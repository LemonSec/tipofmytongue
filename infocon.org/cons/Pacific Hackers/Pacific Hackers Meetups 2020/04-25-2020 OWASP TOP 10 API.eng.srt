1
00:00:00,430 --> 00:00:11,470
never close you guys probably saw it on

2
00:00:11,470 --> 00:00:15,720
the on the team nationwide people that

3
00:00:15,720 --> 00:00:19,090
never if it ever shut down it was it was

4
00:00:19,090 --> 00:00:22,660
basically in a specific places but I

5
00:00:22,660 --> 00:00:29,650
would say by state Sears I went out the

6
00:00:29,650 --> 00:00:33,910
traffic was insane people eating going

7
00:00:33,910 --> 00:00:36,010
into I went to a store actually was

8
00:00:36,010 --> 00:00:39,430
bizarre there there were like glasses

9
00:00:39,430 --> 00:00:42,399
everywhere like you can when you when

10
00:00:42,399 --> 00:00:44,050
you want to buy something you there is

11
00:00:44,050 --> 00:00:46,090
like a glass and then you kind of put

12
00:00:46,090 --> 00:00:47,620
through the bra note they check you out

13
00:00:47,620 --> 00:00:49,870
and then you have to they won't let you

14
00:00:49,870 --> 00:00:52,000
in if you don't have a mask and then

15
00:00:52,000 --> 00:00:54,100
you're like bombarded with all this

16
00:00:54,100 --> 00:00:56,379
messages that you had to be six feet

17
00:00:56,379 --> 00:00:58,450
away from it was like being a movie it

18
00:00:58,450 --> 00:01:04,869
was weird and you saw if you meant to

19
00:01:04,869 --> 00:01:07,540
know what we have that is actually in a

20
00:01:07,540 --> 00:01:09,130
coffee shop and is open for business

21
00:01:09,130 --> 00:01:12,460
though the reopening is happening not

22
00:01:12,460 --> 00:01:16,600
sure how this but at least from what I

23
00:01:16,600 --> 00:01:25,090
am right now see I mean how many people

24
00:01:25,090 --> 00:01:30,659
saw out and how the the shelter in place

25
00:01:30,659 --> 00:01:33,759
we should be like New York and we're not

26
00:01:33,759 --> 00:01:35,890
I don't know if it's the heat or the

27
00:01:35,890 --> 00:01:39,820
water but definitely definitely or we're

28
00:01:39,820 --> 00:01:45,119
too lucky but is it

29
00:01:45,119 --> 00:01:47,619
it seems like as soon as they say well I

30
00:01:47,619 --> 00:01:51,340
said okay fine we're going on now so as

31
00:01:51,340 --> 00:01:54,130
far as California goes we're gonna pan

32
00:01:54,130 --> 00:01:58,450
any the medians online we have plenty of

33
00:01:58,450 --> 00:02:02,140
new content coming and we're gonna have

34
00:02:02,140 --> 00:02:08,019
the Cole CDF the polygon then have today

35
00:02:08,019 --> 00:02:11,200
we're gonna had almost on top 10 API and

36
00:02:11,200 --> 00:02:14,530
there's other wonderful

37
00:02:14,530 --> 00:02:17,069
we're gonna continuously drone security

38
00:02:17,069 --> 00:02:22,540
so touch with us join our our slack

39
00:02:22,540 --> 00:02:25,870
channel if you email me at impact on or

40
00:02:25,870 --> 00:02:29,800
I will like channel which is basically

41
00:02:29,800 --> 00:02:32,680
where all of us are communicating if you

42
00:02:32,680 --> 00:02:37,480
were affected by the the layoffs I've

43
00:02:37,480 --> 00:02:39,130
been hearing there's been some layoffs

44
00:02:39,130 --> 00:02:42,850
not sure how California is doing but in

45
00:02:42,850 --> 00:02:45,760
Florida we have heard of some layoffs

46
00:02:45,760 --> 00:02:49,269
already there are plenty of remote jobs

47
00:02:49,269 --> 00:02:51,340
mostly if you're in security there's

48
00:02:51,340 --> 00:02:53,170
this quite a bit of people looking for

49
00:02:53,170 --> 00:02:58,030
for info sake and security engineers so

50
00:02:58,030 --> 00:03:01,030
if you go to the hashtag job offers

51
00:03:01,030 --> 00:03:03,670
channel in slack there's plenty plenty

52
00:03:03,670 --> 00:03:08,860
and if you need a referral just ask us

53
00:03:08,860 --> 00:03:11,890
most of us you know may not most of us i

54
00:03:11,890 --> 00:03:13,810
noticed that sometimes people don't

55
00:03:13,810 --> 00:03:17,230
publish your buffers because nobody's

56
00:03:17,230 --> 00:03:18,940
responding cuz you know on before

57
00:03:18,940 --> 00:03:20,799
covered pretty much everybody was

58
00:03:20,799 --> 00:03:24,549
employing happy or it was easier so i'm

59
00:03:24,549 --> 00:03:28,390
i'm assuming that so some of them will

60
00:03:28,390 --> 00:03:33,510
be able to give you some some guidance

61
00:03:33,510 --> 00:03:36,640
so there's the info if you send me an

62
00:03:36,640 --> 00:03:38,410
email I will join you into the slack

63
00:03:38,410 --> 00:03:43,239
channel we will advise when when we're

64
00:03:43,239 --> 00:03:45,489
going back against the reopening had

65
00:03:45,489 --> 00:03:46,840
just happened I'm not sure where

66
00:03:46,840 --> 00:03:49,959
California it's gonna fall fruit but we

67
00:03:49,959 --> 00:03:51,640
would definitely will be on top of this

68
00:03:51,640 --> 00:03:54,840
and when it's safe to go out and go back

69
00:03:54,840 --> 00:03:57,970
absolutely I will contact the library

70
00:03:57,970 --> 00:04:02,590
and we will get the ball rolling a kind

71
00:04:02,590 --> 00:04:07,840
reminder to please mute yourself and and

72
00:04:07,840 --> 00:04:09,040
don't put her somehow because then we'll

73
00:04:09,040 --> 00:04:15,070
hear the music that had to mute other

74
00:04:15,070 --> 00:04:17,709
than that I'm gonna let the presenter

75
00:04:17,709 --> 00:04:21,789
decide she wants to take questions

76
00:04:21,789 --> 00:04:26,289
initially or at the end today we have a

77
00:04:26,289 --> 00:04:29,729
wasp top-10 API

78
00:04:30,150 --> 00:04:48,039
with that come here hi everybody how are

79
00:04:48,039 --> 00:04:48,520
you doing

80
00:04:48,520 --> 00:06:27,069
I hope you had okay yeah yes the if you

81
00:06:27,069 --> 00:06:34,060
going Civic hackers you search you find

82
00:06:34,060 --> 00:06:36,539
out a youtube channel every single

83
00:06:36,539 --> 00:06:40,389
meeting that we're presenting is being

84
00:06:40,389 --> 00:06:41,770
recorded like this one

85
00:06:41,770 --> 00:06:45,030
was being recorded they will be uploaded

86
00:06:45,030 --> 00:06:56,879
some time after he ends go ahead kuvira

87
00:06:56,879 --> 00:07:01,180
can you confirm somebody can like unable

88
00:07:01,180 --> 00:07:05,580
to see my screen now okay awesome okay

89
00:07:05,729 --> 00:07:09,669
so today we are going to cover most top

90
00:07:09,669 --> 00:07:13,840
10 API and a little bit background about

91
00:07:13,840 --> 00:07:15,060
me

92
00:07:15,060 --> 00:07:18,880
once again I'm trying to do this okay

93
00:07:18,880 --> 00:07:21,520
so my background I'm a software engineer

94
00:07:21,520 --> 00:07:24,220
I was a developer for a couple of years

95
00:07:24,220 --> 00:07:26,650
before I stumbled upon the application

96
00:07:26,650 --> 00:07:29,949
security area and then I kind of

97
00:07:29,949 --> 00:07:32,050
discovered myself like I like to make

98
00:07:32,050 --> 00:07:35,620
things smooth and the building so ever

99
00:07:35,620 --> 00:07:37,599
since like 8 plus years have been in the

100
00:07:37,599 --> 00:07:40,300
application security anything in Apps a

101
00:07:40,300 --> 00:07:43,360
click from tech modeling SS DLC process

102
00:07:43,360 --> 00:07:47,080
the tooling security testing tools like

103
00:07:47,080 --> 00:07:50,770
SAS tests SCA the vulnerability

104
00:07:50,770 --> 00:07:53,560
management analyzing and ship left

105
00:07:53,560 --> 00:07:57,880
managing security champions program my

106
00:07:57,880 --> 00:08:00,039
area is I like to work on the

107
00:08:00,039 --> 00:08:03,340
application security so that's a little

108
00:08:03,340 --> 00:08:10,930
background about me and having some

109
00:08:10,930 --> 00:08:19,000
issues yeah so before I dive deep into

110
00:08:19,000 --> 00:08:23,020
over Stockton API I just wanted to give

111
00:08:23,020 --> 00:08:24,099
you an introduction

112
00:08:24,099 --> 00:08:27,340
what is why do we need API security it

113
00:08:27,340 --> 00:08:28,870
is is it different from the web

114
00:08:28,870 --> 00:08:31,950
application security to understand this

115
00:08:31,950 --> 00:08:35,969
a simple diagram like how the API

116
00:08:35,969 --> 00:08:38,979
Gorem wall looking back in the days

117
00:08:38,979 --> 00:08:41,828
traditional web application do you see

118
00:08:41,828 --> 00:08:44,200
like a web app or calling an application

119
00:08:44,200 --> 00:08:47,730
server or web server so the whole like

120
00:08:47,730 --> 00:08:50,410
functionality is embedded like for each

121
00:08:50,410 --> 00:08:53,500
HTTP call like the HTML you could be

122
00:08:53,500 --> 00:08:55,110
returned to the client

123
00:08:55,110 --> 00:08:57,810
so there is a tight coupling between the

124
00:08:57,810 --> 00:09:00,090
client and the server and the state of

125
00:09:00,090 --> 00:09:02,640
his main with the session ID or similar

126
00:09:02,640 --> 00:09:04,950
cookies so it is just a plain

127
00:09:04,950 --> 00:09:07,860
straightforward communication which no

128
00:09:07,860 --> 00:09:10,890
extra layers on it and then it won't do

129
00:09:10,890 --> 00:09:12,930
a single page application like I could

130
00:09:12,930 --> 00:09:17,520
say early adoption I API in the Box it

131
00:09:17,520 --> 00:09:21,060
is it is just for like abstract here the

132
00:09:21,060 --> 00:09:24,029
web application you know like a static

133
00:09:24,029 --> 00:09:26,820
content and a JavaScript with first like

134
00:09:26,820 --> 00:09:29,880
a single a functionality API like the

135
00:09:29,880 --> 00:09:32,160
whole data is returned for example like

136
00:09:32,160 --> 00:09:33,839
one functionality want to add a user

137
00:09:33,839 --> 00:09:37,440
like a Ritter a med user you call the

138
00:09:37,440 --> 00:09:41,430
web server that functionality back of

139
00:09:41,430 --> 00:09:44,430
the thing and return the whole response

140
00:09:44,430 --> 00:09:47,730
back to the client so this is also a

141
00:09:47,730 --> 00:09:50,850
little bit of client and the API up

142
00:09:50,850 --> 00:09:55,290
tightly coupled so moving on to like you

143
00:09:55,290 --> 00:09:57,000
see the single page application and

144
00:09:57,000 --> 00:10:00,210
there are multiple API endpoints so this

145
00:10:00,210 --> 00:10:01,860
is what I would say like like the

146
00:10:01,860 --> 00:10:03,960
application authenticates a user with

147
00:10:03,960 --> 00:10:07,710
some type of a cookie or a token for

148
00:10:07,710 --> 00:10:11,510
making sense of the API calls like here

149
00:10:11,510 --> 00:10:14,460
like that you are multiple in one

150
00:10:14,460 --> 00:10:16,320
particular web page you might call

151
00:10:16,320 --> 00:10:21,000
multiple API is for every functionality

152
00:10:21,000 --> 00:10:24,050
for example if I wanted to see a user

153
00:10:24,050 --> 00:10:26,520
like whatever the product that I bought

154
00:10:26,520 --> 00:10:28,890
and ie reviews for the product it could

155
00:10:28,890 --> 00:10:31,140
be like maybe multiple API calls on the

156
00:10:31,140 --> 00:10:34,410
back but all these are like the results

157
00:10:34,410 --> 00:10:37,890
are filtered through the client so

158
00:10:37,890 --> 00:10:40,589
eventually it lead to many consumers and

159
00:10:40,589 --> 00:10:42,330
many providers if you see this diagram

160
00:10:42,330 --> 00:10:44,250
there are many types of application

161
00:10:44,250 --> 00:10:46,500
single page applications as applications

162
00:10:46,500 --> 00:10:49,530
mobile apps evolve and partner it via is

163
00:10:49,530 --> 00:10:51,900
so then the API gateway came into the

164
00:10:51,900 --> 00:10:56,130
picture so API gateway like that's kind

165
00:10:56,130 --> 00:10:59,160
of an entry point that managers like be

166
00:10:59,160 --> 00:11:01,709
back in all the API like one-way access

167
00:11:01,709 --> 00:11:06,030
like it can call multiple API switch is

168
00:11:06,030 --> 00:11:07,500
in house

169
00:11:07,500 --> 00:11:10,170
also public facing API is and

170
00:11:10,170 --> 00:11:12,780
third-party api's so as things get

171
00:11:12,780 --> 00:11:14,970
complex you see this web application

172
00:11:14,970 --> 00:11:18,570
attacks subsidies is not applicable for

173
00:11:18,570 --> 00:11:21,660
the same API attack surface so they are

174
00:11:21,660 --> 00:11:24,450
little with different although there are

175
00:11:24,450 --> 00:11:27,060
can be some attacks are common but then

176
00:11:27,060 --> 00:11:30,560
API security needs a special attention

177
00:11:30,560 --> 00:11:34,170
especially when there is a mobile

178
00:11:34,170 --> 00:11:37,680
applications and the user interactions

179
00:11:37,680 --> 00:11:41,280
are more common these days so with

180
00:11:41,280 --> 00:11:43,920
respect to web security the most of the

181
00:11:43,920 --> 00:11:45,420
data processing you know they done on

182
00:11:45,420 --> 00:11:48,420
the server side and the webpage is sent

183
00:11:48,420 --> 00:11:52,260
to the client browser so baton for this

184
00:11:52,260 --> 00:11:54,990
type of the application was played a

185
00:11:54,990 --> 00:11:57,150
major role in blocking the malicious

186
00:11:57,150 --> 00:12:01,520
traffic analyzing the malicious request

187
00:12:01,520 --> 00:12:05,580
and blocking the IP is acceptable but

188
00:12:05,580 --> 00:12:12,180
when acosta I think somebody is not on

189
00:12:12,180 --> 00:12:19,110
mute you please don't meet you okay so

190
00:12:19,110 --> 00:12:22,590
going back to API security so evolution

191
00:12:22,590 --> 00:12:25,020
of mobile apps micro services and the

192
00:12:25,020 --> 00:12:27,350
more and more richer user experiences

193
00:12:27,350 --> 00:12:31,950
there is like more attack surface on ApS

194
00:12:31,950 --> 00:12:34,260
that we are going to see in the session

195
00:12:34,260 --> 00:12:37,050
today so bots and malicious actors

196
00:12:37,050 --> 00:12:40,260
routing from attacking the web sites now

197
00:12:40,260 --> 00:12:42,570
there are more targets on attacking the

198
00:12:42,570 --> 00:12:46,380
public API is because API is are the

199
00:12:46,380 --> 00:12:49,170
data like they can store more data and

200
00:12:49,170 --> 00:12:51,780
they can handle such state between the

201
00:12:51,780 --> 00:12:56,340
sessions so and there's new technology

202
00:12:56,340 --> 00:12:58,370
like say how do you set your API keys

203
00:12:58,370 --> 00:13:00,810
there is always manipulation around s

204
00:13:00,810 --> 00:13:03,990
areas so exposes action access key

205
00:13:03,990 --> 00:13:07,230
tokens etc so all these are leave a wide

206
00:13:07,230 --> 00:13:11,640
range of attacks so I hope that you got

207
00:13:11,640 --> 00:13:14,910
an idea about like the web and APA

208
00:13:14,910 --> 00:13:17,130
security is different because one when

209
00:13:17,130 --> 00:13:18,990
you develop a web application it's just

210
00:13:18,990 --> 00:13:20,940
not enough these days to focus only

211
00:13:20,940 --> 00:13:24,030
those web issues you have to pay special

212
00:13:24,030 --> 00:13:27,090
attention on the API during the design

213
00:13:27,090 --> 00:13:30,000
phase itself so now I'm going back

214
00:13:30,000 --> 00:13:33,510
coming back to the top 10 API what is

215
00:13:33,510 --> 00:13:36,480
top 10 API from wasp I'm sure everybody

216
00:13:36,480 --> 00:13:40,620
is aware of us like it's a nonprofit

217
00:13:40,620 --> 00:13:42,810
organization they have like a top 10

218
00:13:42,810 --> 00:13:45,620
mobile top 10 where but it attacks

219
00:13:45,620 --> 00:13:48,480
documented risk document them so this

220
00:13:48,480 --> 00:13:54,840
was captain API or API is this document

221
00:13:54,840 --> 00:13:58,590
or a piece written to 2019 it's pretty

222
00:13:58,590 --> 00:14:03,960
recent so they kind of mapped all into

223
00:14:03,960 --> 00:14:08,250
this 10 buckets we can go each and every

224
00:14:08,250 --> 00:14:11,580
one in detail but at a high level you

225
00:14:11,580 --> 00:14:16,590
can see these are the 10 so yeah first

226
00:14:16,590 --> 00:14:20,730
the broken object level authorization so

227
00:14:20,730 --> 00:14:23,970
what is it when you think of calling an

228
00:14:23,970 --> 00:14:27,570
API in the screen you see a simple get

229
00:14:27,570 --> 00:14:30,270
request get user detail ins for the user

230
00:14:30,270 --> 00:14:35,820
ID 241 so from the like when you develop

231
00:14:35,820 --> 00:14:40,890
this API like if you manipulate an ID in

232
00:14:40,890 --> 00:14:43,590
the request because the server does not

233
00:14:43,590 --> 00:14:46,260
fully track the client state instead

234
00:14:46,260 --> 00:14:48,240
like whatever the functionality will

235
00:14:48,240 --> 00:14:52,380
write on retrieving the user details it

236
00:14:52,380 --> 00:14:54,120
relays on the parameter right like the

237
00:14:54,120 --> 00:14:57,360
user 244 unlike so that parameter you go

238
00:14:57,360 --> 00:14:59,610
hit the database get the details for

239
00:14:59,610 --> 00:15:03,570
that particular user so now from the

240
00:15:03,570 --> 00:15:06,089
attacker mind said what I would want you

241
00:15:06,089 --> 00:15:08,700
to think is like what if if I can pass

242
00:15:08,700 --> 00:15:11,700
to 42 will I be able to get the data so

243
00:15:11,700 --> 00:15:15,600
what kind of mechanisms and controls we

244
00:15:15,600 --> 00:15:17,100
need to have in place and what is the

245
00:15:17,100 --> 00:15:19,200
issue here like you can clearly say if I

246
00:15:19,200 --> 00:15:21,200
if my API

247
00:15:21,200 --> 00:15:25,250
if I pass another 240 to another user

248
00:15:25,250 --> 00:15:28,380
will I be able to get those response for

249
00:15:28,380 --> 00:15:32,790
that user successfully let's dig into

250
00:15:32,790 --> 00:15:34,769
another example it's similar to the

251
00:15:34,769 --> 00:15:37,019
previous one I'm just doing a post here

252
00:15:37,019 --> 00:15:40,649
product reviews so the application the

253
00:15:40,649 --> 00:15:43,739
user blog daily and the user 140 is

254
00:15:43,739 --> 00:15:47,519
supposed to update his review he had a

255
00:15:47,519 --> 00:15:50,459
very bad experience he wanted to review

256
00:15:50,459 --> 00:15:54,029
the product one point but is there a way

257
00:15:54,029 --> 00:15:56,429
that the attacker can directly keep the

258
00:15:56,429 --> 00:15:59,759
API manipulate it and then change his

259
00:15:59,759 --> 00:16:07,259
reviews or some other users reviews like

260
00:16:07,259 --> 00:16:11,730
again 141 make instead of the user

261
00:16:11,730 --> 00:16:13,589
updating his mood really you can hear

262
00:16:13,589 --> 00:16:15,239
paid into another user

263
00:16:15,239 --> 00:16:17,910
so what is missing in here it's pretty

264
00:16:17,910 --> 00:16:19,470
much the access control checks under

265
00:16:19,470 --> 00:16:24,329
Singh and also if you see we are not

266
00:16:24,329 --> 00:16:27,259
validating whether if the logged in user

267
00:16:27,259 --> 00:16:31,470
has the same performed to same requested

268
00:16:31,470 --> 00:16:34,889
action of the requested object to give

269
00:16:34,889 --> 00:16:41,759
you a more detail on this if you see we

270
00:16:41,759 --> 00:16:43,379
are not checking if you are not checking

271
00:16:43,379 --> 00:16:47,660
in the API whether this logged in user

272
00:16:47,660 --> 00:16:50,220
is the same user that is going to

273
00:16:50,220 --> 00:16:52,499
perform the action on the particular

274
00:16:52,499 --> 00:16:55,740
object so if that check is missing

275
00:16:55,740 --> 00:16:57,420
authorization check is missing it's

276
00:16:57,420 --> 00:17:00,749
going to return whatever the data for

277
00:17:00,749 --> 00:17:04,559
the other user before I go into the

278
00:17:04,559 --> 00:17:08,130
prevention I would like to give you a

279
00:17:08,130 --> 00:17:10,409
real-world attack that happened on this

280
00:17:10,409 --> 00:17:13,049
particular issue the broken object level

281
00:17:13,049 --> 00:17:16,409
authorization it's this is the open a

282
00:17:16,409 --> 00:17:20,429
chrome take over happened in 2019 so

283
00:17:20,429 --> 00:17:23,459
step one I would like to go over that

284
00:17:23,459 --> 00:17:25,770
act and to see if you can understand how

285
00:17:25,770 --> 00:17:30,779
exactly happen at a high level if you

286
00:17:30,779 --> 00:17:33,090
see this request this is the API request

287
00:17:33,090 --> 00:17:36,360
one of the API any phone number that you

288
00:17:36,360 --> 00:17:40,110
give and the response gave you an

289
00:17:40,110 --> 00:17:41,850
additional correlation for that

290
00:17:41,850 --> 00:17:44,370
particular just by giving the phone

291
00:17:44,370 --> 00:17:47,310
number it gave it mapped a UUID

292
00:17:47,310 --> 00:17:52,770
user so with this API the UUID gots the

293
00:17:52,770 --> 00:17:55,550
eight that is a first step

294
00:17:55,550 --> 00:18:00,170
using the UUID there was another API

295
00:18:00,170 --> 00:18:04,560
marketplace RPC whatever that if you see

296
00:18:04,560 --> 00:18:07,610
on the left left side the user ID

297
00:18:07,610 --> 00:18:09,600
whatever you returned with the earlier

298
00:18:09,600 --> 00:18:15,120
step request and send the API malicious

299
00:18:15,120 --> 00:18:17,310
request whatever you're not supposed to

300
00:18:17,310 --> 00:18:21,330
it then you got their successful API

301
00:18:21,330 --> 00:18:24,150
response back with the PII data for that

302
00:18:24,150 --> 00:18:28,110
particular user so pretty much what

303
00:18:28,110 --> 00:18:31,590
happened here you're able to get all the

304
00:18:31,590 --> 00:18:35,190
PAA data for any other user with just

305
00:18:35,190 --> 00:18:44,360
passing the so how do you prevent it so

306
00:18:44,810 --> 00:18:48,270
one thing to prevent it it's pretty easy

307
00:18:48,270 --> 00:18:52,530
you see like use gyd instead of UID you

308
00:18:52,530 --> 00:18:55,830
know it's not you gy d is not guessable

309
00:18:55,830 --> 00:18:58,140
whether we're a see why he is always

310
00:18:58,140 --> 00:19:02,850
guessable also you have to include the

311
00:19:02,850 --> 00:19:05,460
proper authorization mechanism that

312
00:19:05,460 --> 00:19:07,170
relates on the user policies and

313
00:19:07,170 --> 00:19:10,230
hierarchy but you have to check in your

314
00:19:10,230 --> 00:19:12,900
api whether the user that is logged in

315
00:19:12,900 --> 00:19:15,390
is the same user that is retrieving

316
00:19:15,390 --> 00:19:18,240
their user data here it is not the case

317
00:19:18,240 --> 00:19:22,430
in the first example we saw so

318
00:19:22,430 --> 00:19:24,690
authorization check has to be in every

319
00:19:24,690 --> 00:19:28,950
function just not one but whatever the

320
00:19:28,950 --> 00:19:30,510
function that you do you have to make

321
00:19:30,510 --> 00:19:32,790
sure just not the authentication is

322
00:19:32,790 --> 00:19:35,070
satisfied you whether the user has

323
00:19:35,070 --> 00:19:38,400
authorized to do some action on the

324
00:19:38,400 --> 00:19:41,490
object so one other thing you can do

325
00:19:41,490 --> 00:19:43,590
developers can write test cases early in

326
00:19:43,590 --> 00:19:45,830
the development

327
00:19:51,350 --> 00:19:53,420
so the second

328
00:19:53,420 --> 00:19:56,270
the top two is who can user

329
00:19:56,270 --> 00:19:57,950
authentication the first one is like

330
00:19:57,950 --> 00:20:01,070
object level so the second one talks

331
00:20:01,070 --> 00:20:05,570
about authentication so when you talk

332
00:20:05,570 --> 00:20:09,350
about the authentication API endpoints

333
00:20:09,350 --> 00:20:11,090
for authentication are treated

334
00:20:11,090 --> 00:20:13,340
differently from the regular endpoints

335
00:20:13,340 --> 00:20:16,280
like there are multiple API influence

336
00:20:16,280 --> 00:20:20,480
obviously login and user so many API

337
00:20:20,480 --> 00:20:22,580
endpoints but what I'm mentioning here

338
00:20:22,580 --> 00:20:25,310
is there are few API endpoints that

339
00:20:25,310 --> 00:20:28,010
require special attention just not

340
00:20:28,010 --> 00:20:28,430
locked

341
00:20:28,430 --> 00:20:31,580
maybe there are other API is like not

342
00:20:31,580 --> 00:20:33,830
forgot password and reset password it's

343
00:20:33,830 --> 00:20:35,750
special attention to and should be

344
00:20:35,750 --> 00:20:38,630
protected same as login we are going to

345
00:20:38,630 --> 00:20:42,670
just see a use case why it is important

346
00:20:42,670 --> 00:20:47,600
because it allows the credentials like

347
00:20:47,600 --> 00:20:49,220
with the credential stuffing mechanical

348
00:20:49,220 --> 00:20:54,200
say you want to reset a password so the

349
00:20:54,200 --> 00:20:57,670
API request and response accepts request

350
00:20:57,670 --> 00:21:02,090
username password so what if if an

351
00:21:02,090 --> 00:21:04,010
attacker can perform a credential

352
00:21:04,010 --> 00:21:05,990
stuffing on that particular API by

353
00:21:05,990 --> 00:21:10,610
sending in multiple passwords username

354
00:21:10,610 --> 00:21:12,230
and password combinations in the API

355
00:21:12,230 --> 00:21:15,230
request so how does your API is going to

356
00:21:15,230 --> 00:21:17,090
be good for that particular use case you

357
00:21:17,090 --> 00:21:21,620
have to think about it so even when you

358
00:21:21,620 --> 00:21:24,170
are implementing the JWT totals they are

359
00:21:24,170 --> 00:21:27,860
all possible that in the developer when

360
00:21:27,860 --> 00:21:30,800
they are implementing it they think it's

361
00:21:30,800 --> 00:21:33,770
safe but then there is a way one of them

362
00:21:33,770 --> 00:21:36,260
is like if you say the algorithm is null

363
00:21:36,260 --> 00:21:38,980
that means it's pretty much like it's um

364
00:21:38,980 --> 00:21:41,930
you're not like signing up properly so

365
00:21:41,930 --> 00:21:45,920
these are some of the flops and I have

366
00:21:45,920 --> 00:21:48,740
seen auth tokens and FAQs what is being

367
00:21:48,740 --> 00:21:51,980
passed in the URL and also weak

368
00:21:51,980 --> 00:21:53,180
encryption keys

369
00:21:53,180 --> 00:21:55,940
the keys are not good enough the length

370
00:21:55,940 --> 00:21:59,690
whatever it is we caches and in this

371
00:21:59,690 --> 00:22:01,820
case no account lockout so what if like

372
00:22:01,820 --> 00:22:06,290
I keep trying multiple times to I

373
00:22:06,290 --> 00:22:08,630
I mean do i implement the proper account

374
00:22:08,630 --> 00:22:11,660
like maybe depending on your application

375
00:22:11,660 --> 00:22:13,610
whether ten times eight times six times

376
00:22:13,610 --> 00:22:17,030
whatever it is so these are the good

377
00:22:17,030 --> 00:22:18,680
points to think about when you consider

378
00:22:18,680 --> 00:22:21,820
the Authenticator part I would like to

379
00:22:21,820 --> 00:22:27,140
go over this example see I am doing a

380
00:22:27,140 --> 00:22:30,890
post API call like a very figure on the

381
00:22:30,890 --> 00:22:34,850
reset password lick this is the API that

382
00:22:34,850 --> 00:22:36,920
would send me a verification code to my

383
00:22:36,920 --> 00:22:45,560
mobile SMS code is like six digit if

384
00:22:45,560 --> 00:22:47,330
there is no rate limiting the API

385
00:22:47,330 --> 00:22:50,600
this is suspected to brute-forcing

386
00:22:50,600 --> 00:22:54,410
because you can set you can attempt

387
00:22:54,410 --> 00:22:57,560
again with the help of script try x

388
00:22:57,560 --> 00:22:59,960
times with the various six digit code

389
00:22:59,960 --> 00:23:02,090
eventually that will lead to the reset

390
00:23:02,090 --> 00:23:03,740
password again we talked about the rate

391
00:23:03,740 --> 00:23:05,960
limiting without rate limiting it this

392
00:23:05,960 --> 00:23:09,140
this would break so what is the

393
00:23:09,140 --> 00:23:15,560
prevention for this issue implement

394
00:23:15,560 --> 00:23:18,020
multi-factor whenever it is possible

395
00:23:18,020 --> 00:23:21,740
that is just not enough but that's a

396
00:23:21,740 --> 00:23:24,350
good starting point just do a

397
00:23:24,350 --> 00:23:26,600
multi-factor and also definitely for an

398
00:23:26,600 --> 00:23:28,700
anti root root first mechanism

399
00:23:28,700 --> 00:23:31,300
you got a rate limit your API you go to

400
00:23:31,300 --> 00:23:36,920
know your API so just it I mean rate

401
00:23:36,920 --> 00:23:39,140
limiting is used to control the amount

402
00:23:39,140 --> 00:23:41,930
of incoming and outgoing traffic from

403
00:23:41,930 --> 00:23:45,110
and to relate to work say if you say

404
00:23:45,110 --> 00:23:47,800
you're letting your API allowing like

405
00:23:47,800 --> 00:23:50,990
eight requests per minute then anything

406
00:23:50,990 --> 00:23:54,260
more than that it would it would be an

407
00:23:54,260 --> 00:23:57,200
error so you can have some kind of

408
00:23:57,200 --> 00:23:59,390
protection over here and we talked about

409
00:23:59,390 --> 00:24:01,820
the account lockout and there is another

410
00:24:01,820 --> 00:24:05,390
capture to consider and also don't mean

411
00:24:05,390 --> 00:24:07,520
when the wheel use the standards for

412
00:24:07,520 --> 00:24:09,680
authentication token generation of

413
00:24:09,680 --> 00:24:15,050
password storage so now moving on to the

414
00:24:15,050 --> 00:24:20,060
third top ten on in top ten who was VPN

415
00:24:20,060 --> 00:24:25,220
save data exposure so what is excessive

416
00:24:25,220 --> 00:24:29,300
data exposure so this happens when you

417
00:24:29,300 --> 00:24:31,940
sniff just knit the APA traffic looking

418
00:24:31,940 --> 00:24:33,230
for the sensitive data

419
00:24:33,230 --> 00:24:38,390
what is impaired just by sniffing if

420
00:24:38,390 --> 00:24:42,170
your API returns some responses more

421
00:24:42,170 --> 00:24:46,580
than it is supposed to return consider

422
00:24:46,580 --> 00:24:49,180
in there I have seen this a lot like

423
00:24:49,180 --> 00:24:54,440
when you develop or design an API so we

424
00:24:54,440 --> 00:24:56,690
just like okay this functionality this

425
00:24:56,690 --> 00:24:58,220
is the request and this is the API

426
00:24:58,220 --> 00:25:00,410
response but there are a lot of cases we

427
00:25:00,410 --> 00:25:02,540
send wood because just because we create

428
00:25:02,540 --> 00:25:05,660
from database we don't if you don't

429
00:25:05,660 --> 00:25:08,650
consider what the client is expecting

430
00:25:08,650 --> 00:25:11,870
and sell the whole bunch of rest

431
00:25:11,870 --> 00:25:14,450
response back to the client and expect

432
00:25:14,450 --> 00:25:16,270
the client to filter it for the display

433
00:25:16,270 --> 00:25:19,010
then it is a problem because C cannot

434
00:25:19,010 --> 00:25:21,710
trust the client to display somebody can

435
00:25:21,710 --> 00:25:26,890
hit your API and can read your data data

436
00:25:26,890 --> 00:25:31,100
so by looking at the example it's very

437
00:25:31,100 --> 00:25:33,650
simple example I just wanted to read my

438
00:25:33,650 --> 00:25:38,330
user reviews get API user reviews so

439
00:25:38,330 --> 00:25:41,660
here the response if you see the

440
00:25:41,660 --> 00:25:43,790
response you are supposed to give just

441
00:25:43,790 --> 00:25:46,160
this is the user and this is the list of

442
00:25:46,160 --> 00:25:48,680
reviews that here total like say 5

443
00:25:48,680 --> 00:25:51,890
videos but just because the way it is

444
00:25:51,890 --> 00:25:53,870
developed I would talk about why it is

445
00:25:53,870 --> 00:25:57,140
coming so the whole user object is

446
00:25:57,140 --> 00:25:59,000
present as a part of the response and

447
00:25:59,000 --> 00:26:03,050
this is not very earlier this is pretty

448
00:26:03,050 --> 00:26:04,820
common people used to do that because

449
00:26:04,820 --> 00:26:09,320
the ORM framework like bar when you bind

450
00:26:09,320 --> 00:26:12,800
it it just until you filter it filter it

451
00:26:12,800 --> 00:26:14,450
out it just sends the whole object back

452
00:26:14,450 --> 00:26:17,330
to the client and and if you just do it

453
00:26:17,330 --> 00:26:21,650
like the object dot to JSON it displays

454
00:26:21,650 --> 00:26:24,050
the entire data which including the PII

455
00:26:24,050 --> 00:26:30,710
data available on the user object so so

456
00:26:30,710 --> 00:26:31,670
that's why

457
00:26:31,670 --> 00:26:34,520
what you have to do is be conservative

458
00:26:34,520 --> 00:26:37,700
in exposing the data so always use the

459
00:26:37,700 --> 00:26:41,090
principle of least privilege expose only

460
00:26:41,090 --> 00:26:42,860
the Recker I'd call for the APA call in

461
00:26:42,860 --> 00:26:45,410
the previous case the ideal would be

462
00:26:45,410 --> 00:26:48,890
just to display the user ID the request

463
00:26:48,890 --> 00:26:51,590
like we need the reviews just the

464
00:26:51,590 --> 00:26:54,080
response should be like user ID and the

465
00:26:54,080 --> 00:26:57,340
review will say five reviews that that -

466
00:26:57,340 --> 00:27:00,700
should be the response rather than not

467
00:27:00,700 --> 00:27:03,110
giving the whole user object back to the

468
00:27:03,110 --> 00:27:05,620
client and the client filtering the

469
00:27:05,620 --> 00:27:09,410
reviews and so that's not the ideal way

470
00:27:09,410 --> 00:27:12,620
to do this also prevents accidental

471
00:27:12,620 --> 00:27:16,070
exposure and also some disclosure of

472
00:27:16,070 --> 00:27:18,230
personal information and sometimes you

473
00:27:18,230 --> 00:27:21,890
can even like figure out by correlating

474
00:27:21,890 --> 00:27:24,440
the data from different data sets so

475
00:27:24,440 --> 00:27:27,950
it's always like that good to follow

476
00:27:27,950 --> 00:27:31,090
their principle of least privilege

477
00:27:31,540 --> 00:27:34,910
another real-world example the Twitter

478
00:27:34,910 --> 00:27:37,820
app work was used to match 17 million

479
00:27:37,820 --> 00:27:40,940
phone numbers to user accounts so this

480
00:27:40,940 --> 00:27:44,000
is like December 2019 and design flowing

481
00:27:44,000 --> 00:27:49,100
Twitter and draw API a high level the

482
00:27:49,100 --> 00:27:53,420
API the Twitter API one of the API you

483
00:27:53,420 --> 00:27:56,030
could upload and stops bunch of phone

484
00:27:56,030 --> 00:27:57,280
numbers

485
00:27:57,280 --> 00:28:00,710
somebody is such a found this money it

486
00:28:00,710 --> 00:28:03,380
could accept a public number of phone

487
00:28:03,380 --> 00:28:07,090
numbers and account match the API so

488
00:28:07,090 --> 00:28:09,590
there are some validations there were

489
00:28:09,590 --> 00:28:12,470
some validations in place basically if

490
00:28:12,470 --> 00:28:14,330
you gave like consecutive numbers if you

491
00:28:14,330 --> 00:28:17,900
threw errors but there was one

492
00:28:17,900 --> 00:28:20,570
validation bypass and he was able to

493
00:28:20,570 --> 00:28:23,750
upload a bunch of four numbers millions

494
00:28:23,750 --> 00:28:26,510
of phone numbers and it matched to the

495
00:28:26,510 --> 00:28:30,170
user account user information so upload

496
00:28:30,170 --> 00:28:31,700
the entire list of generated phone

497
00:28:31,700 --> 00:28:34,670
numbers through Twitter contacts upload

498
00:28:34,670 --> 00:28:36,500
feature and fetches they use the data in

499
00:28:36,500 --> 00:28:40,040
return so I really shouldn't have

500
00:28:40,040 --> 00:28:43,640
returned the response the whole bunch of

501
00:28:43,640 --> 00:28:44,730
user data it

502
00:28:44,730 --> 00:28:48,120
just an upload functionality I don't

503
00:28:48,120 --> 00:28:49,980
know much in detail but then looking at

504
00:28:49,980 --> 00:28:52,470
this is it's like excessive data

505
00:28:52,470 --> 00:28:56,610
exposure problem so how do you prevent

506
00:28:56,610 --> 00:28:59,580
it pretty simple never rely on the

507
00:28:59,580 --> 00:29:03,600
client to filter the data always you

508
00:29:03,600 --> 00:29:06,570
just return whatever it's needed for

509
00:29:06,570 --> 00:29:10,200
that particular use case and the best

510
00:29:10,200 --> 00:29:13,440
thing is like no truly good figure this

511
00:29:13,440 --> 00:29:17,790
out but best methodology or what you

512
00:29:17,790 --> 00:29:20,090
want to do is just review your API is

513
00:29:20,090 --> 00:29:22,049
what you are selling and what you are

514
00:29:22,049 --> 00:29:25,140
getting back some peer review that would

515
00:29:25,140 --> 00:29:28,710
help and the developer should ask this

516
00:29:28,710 --> 00:29:31,290
question who is consumer of the data

517
00:29:31,290 --> 00:29:33,980
who is the consuming this data like

518
00:29:33,980 --> 00:29:36,780
instead of just okay I'm going to turn

519
00:29:36,780 --> 00:29:39,059
it this one asks these questions who is

520
00:29:39,059 --> 00:29:42,179
consumer and what is it what data is

521
00:29:42,179 --> 00:29:45,990
required ask these like questions and

522
00:29:45,990 --> 00:29:49,650
avoid using those two J to string and to

523
00:29:49,650 --> 00:29:53,010
JSON eventually end up in the log files

524
00:29:53,010 --> 00:29:56,780
which would be an internal thread so and

525
00:29:56,780 --> 00:29:59,549
as we talked about return only specific

526
00:29:59,549 --> 00:30:01,470
properties and always use the data

527
00:30:01,470 --> 00:30:05,429
classification if possible depending on

528
00:30:05,429 --> 00:30:10,290
the use case and moving on to number

529
00:30:10,290 --> 00:30:15,030
four its lack of resources and late rate

530
00:30:15,030 --> 00:30:20,400
limiting so so this issue happens when

531
00:30:20,400 --> 00:30:24,890
your multiple concurrent requests

532
00:30:24,890 --> 00:30:27,960
it doesn't require any authorization or

533
00:30:27,960 --> 00:30:30,570
anything it is just like DDoS attack

534
00:30:30,570 --> 00:30:35,160
right like like exploding your resources

535
00:30:35,160 --> 00:30:38,510
so sending multiple concurrent requests

536
00:30:38,510 --> 00:30:41,490
by using a like a cloud resource or a

537
00:30:41,490 --> 00:30:44,610
real computer and see and observe how

538
00:30:44,610 --> 00:30:50,250
the API is wants us respond back this is

539
00:30:50,250 --> 00:30:53,820
a clearly a denial of service attack so

540
00:30:53,820 --> 00:30:56,760
because multiple clients compete for the

541
00:30:56,760 --> 00:30:58,710
resources

542
00:30:58,710 --> 00:31:03,200
at a given time now look at this example

543
00:31:03,200 --> 00:31:07,050
the requesters I just wanted to see the

544
00:31:07,050 --> 00:31:11,070
list of users in a page and the this is

545
00:31:11,070 --> 00:31:13,500
the request and I am limiting it to the

546
00:31:13,500 --> 00:31:17,310
size 100 so this is my functionality for

547
00:31:17,310 --> 00:31:20,040
example when you want to develop

548
00:31:20,040 --> 00:31:22,410
something like this there will a per

549
00:31:22,410 --> 00:31:24,840
should ask question so what if the

550
00:31:24,840 --> 00:31:27,960
attacker changes from the size like

551
00:31:27,960 --> 00:31:29,430
hundred to a big number

552
00:31:29,430 --> 00:31:33,870
how does my API respond back it would be

553
00:31:33,870 --> 00:31:34,770
unresponsive

554
00:31:34,770 --> 00:31:36,330
maybe buffer overflow errors can happen

555
00:31:36,330 --> 00:31:38,640
the nail of service can happen but how

556
00:31:38,640 --> 00:31:43,200
do you protect it so this is where the

557
00:31:43,200 --> 00:31:46,350
rate-limiting comes into picture it is a

558
00:31:46,350 --> 00:31:49,920
best way often to limit how often the

559
00:31:49,920 --> 00:31:51,960
client can call the API within the

560
00:31:51,960 --> 00:31:54,660
defined time frame that I told you like

561
00:31:54,660 --> 00:31:58,290
your H API is very different and you can

562
00:31:58,290 --> 00:32:02,040
set a PA rate limiting Maya this is the

563
00:32:02,040 --> 00:32:05,700
API we used frequently the other ApS are

564
00:32:05,700 --> 00:32:08,340
not that frequently so you can define

565
00:32:08,340 --> 00:32:11,580
the API is like I need to serve my API

566
00:32:11,580 --> 00:32:17,610
is like yeah like hundred requests per

567
00:32:17,610 --> 00:32:21,630
minute or whatever and the other one

568
00:32:21,630 --> 00:32:23,400
server-side validation on control

569
00:32:23,400 --> 00:32:26,640
parameters in the earlier example we saw

570
00:32:26,640 --> 00:32:28,740
the size hundred make sure you check

571
00:32:28,740 --> 00:32:32,310
because it is a user parameter it can be

572
00:32:32,310 --> 00:32:34,740
manipulated so check for the parameter

573
00:32:34,740 --> 00:32:36,720
and also check for the maximum what do

574
00:32:36,720 --> 00:32:39,620
you allow if anything more than that

575
00:32:39,620 --> 00:32:45,540
message now moving on to dopamine

576
00:32:45,540 --> 00:32:50,190
function level authorization so this is

577
00:32:50,190 --> 00:32:52,980
a little different this is a functional

578
00:32:52,980 --> 00:32:57,150
level authorization issue that good

579
00:32:57,150 --> 00:33:02,730
example would be so there are lot of API

580
00:33:02,730 --> 00:33:06,540
endpoints and there are few endpoints

581
00:33:06,540 --> 00:33:08,700
that you will have you never intended to

582
00:33:08,700 --> 00:33:12,600
expose to the public

583
00:33:12,600 --> 00:33:15,750
so the attackers selling the legitimate

584
00:33:15,750 --> 00:33:18,330
APA calls to the API endpoint they

585
00:33:18,330 --> 00:33:22,680
should not this happens a lot too

586
00:33:22,680 --> 00:33:28,500
because the way in which CI CDE now it's

587
00:33:28,500 --> 00:33:30,450
pretty quick the way in which the

588
00:33:30,450 --> 00:33:32,550
functionalities are turned out there are

589
00:33:32,550 --> 00:33:35,160
a lot of old API endpoints are there are

590
00:33:35,160 --> 00:33:38,030
there are api is without documentation

591
00:33:38,030 --> 00:33:42,120
so on there are few higher level

592
00:33:42,120 --> 00:33:44,700
permissions API which are not exposed or

593
00:33:44,700 --> 00:33:48,240
exposed there's so many ways it could

594
00:33:48,240 --> 00:33:51,420
happen just because it is the way the

595
00:33:51,420 --> 00:33:53,280
API is are structured if you look at

596
00:33:53,280 --> 00:33:58,400
REST API is I can tell you like you know

597
00:33:58,400 --> 00:34:04,260
API users 100 it is a gate API right but

598
00:34:04,260 --> 00:34:06,510
you are not supposed to do a delete on

599
00:34:06,510 --> 00:34:11,760
that particular the delete request but

600
00:34:11,760 --> 00:34:13,949
then if you don't disable the HTTP

601
00:34:13,949 --> 00:34:16,050
delete then you are allowed to do a

602
00:34:16,050 --> 00:34:18,750
delete so these kind of little

603
00:34:18,750 --> 00:34:21,330
information or configurations might be

604
00:34:21,330 --> 00:34:24,060
missing that the attackers can take use

605
00:34:24,060 --> 00:34:27,570
effec in this simple example that I'm do

606
00:34:27,570 --> 00:34:28,770
I am supposed to do

607
00:34:28,770 --> 00:34:31,830
only the get but since delete is not

608
00:34:31,830 --> 00:34:35,429
disabled I am NOT occur or anybody can

609
00:34:35,429 --> 00:34:38,100
able to perform a delete operation on

610
00:34:38,100 --> 00:34:40,770
that particular user so this is read

611
00:34:40,770 --> 00:34:42,659
standard it's easy to guess

612
00:34:42,659 --> 00:34:48,270
so that opener attack range and also

613
00:34:48,270 --> 00:34:51,840
yeah simple example would be the URL

614
00:34:51,840 --> 00:34:55,139
string if there is anything that changes

615
00:34:55,139 --> 00:34:57,990
from user 100 what if I change to admit

616
00:34:57,990 --> 00:35:01,020
what it is what does it return so all

617
00:35:01,020 --> 00:35:02,940
these questions like when you develop an

618
00:35:02,940 --> 00:35:08,250
API you should ask yourself so can

619
00:35:08,250 --> 00:35:10,880
regular user access the admin endpoint

620
00:35:10,880 --> 00:35:13,650
and the user can perform sensitive

621
00:35:13,650 --> 00:35:16,050
actions where suppose not to say from

622
00:35:16,050 --> 00:35:20,940
get to delete so this open up this

623
00:35:20,940 --> 00:35:23,220
function level authorization I can

624
00:35:23,220 --> 00:35:25,570
explain with another example

625
00:35:25,570 --> 00:35:27,160
in the ride-sharing app there are

626
00:35:27,160 --> 00:35:29,260
different API is available driver API

627
00:35:29,260 --> 00:35:32,470
right away Pia admin API but you are not

628
00:35:32,470 --> 00:35:38,430
supposed to expose your admin API but

629
00:35:38,430 --> 00:35:42,280
somehow that I got hold of the admin

630
00:35:42,280 --> 00:35:46,510
appeal can he the use user can perform a

631
00:35:46,510 --> 00:35:49,570
delete user and attacker can perform it

632
00:35:49,570 --> 00:35:52,960
any user - it's the function level

633
00:35:52,960 --> 00:35:56,650
authorization checks are missing how do

634
00:35:56,650 --> 00:36:00,790
we prevent it so deny all access by

635
00:36:00,790 --> 00:36:03,520
default requiring explicit grants to

636
00:36:03,520 --> 00:36:07,060
specific roles for every function again

637
00:36:07,060 --> 00:36:08,440
it is something to do with the

638
00:36:08,440 --> 00:36:11,370
authorization like policies and roles

639
00:36:11,370 --> 00:36:14,040
because it's getting complicated in this

640
00:36:14,040 --> 00:36:18,640
example you see the same functionality

641
00:36:18,640 --> 00:36:21,190
but different roles like driver and

642
00:36:21,190 --> 00:36:24,850
rider and ID so getting a little

643
00:36:24,850 --> 00:36:26,740
complicated so you need to have like the

644
00:36:26,740 --> 00:36:28,930
access permissions and rules defined

645
00:36:28,930 --> 00:36:32,170
properly in your code and also implement

646
00:36:32,170 --> 00:36:33,940
that the solution would be like

647
00:36:33,940 --> 00:36:35,560
implement the solution in the who would

648
00:36:35,560 --> 00:36:38,850
check your configurations an API gateway

649
00:36:38,850 --> 00:36:43,030
disable the unused HTTP methods I see

650
00:36:43,030 --> 00:36:45,790
that a lot lot of sensitive methods are

651
00:36:45,790 --> 00:36:47,740
not disabled and then the fact of

652
00:36:47,740 --> 00:36:51,100
getting use of those and have

653
00:36:51,100 --> 00:36:57,610
authorization checks in place now moving

654
00:36:57,610 --> 00:37:01,990
on to boss assignment math assignment is

655
00:37:01,990 --> 00:37:08,470
a problem where you bind the client data

656
00:37:08,470 --> 00:37:11,410
to the data models the ORM II with the

657
00:37:11,410 --> 00:37:13,360
use of ORM models

658
00:37:13,360 --> 00:37:15,850
whatever the data forget collected from

659
00:37:15,850 --> 00:37:20,130
the user and then it mapped to an object

660
00:37:20,130 --> 00:37:23,380
automatically that was a lot Vantage for

661
00:37:23,380 --> 00:37:25,870
developers when you are working on it or

662
00:37:25,870 --> 00:37:31,060
yeah that was a feature and that is

663
00:37:31,060 --> 00:37:36,970
getting exploited I would say it is by

664
00:37:36,970 --> 00:37:37,619
blindly

665
00:37:37,619 --> 00:37:44,730
laying on over them so this this is

666
00:37:44,730 --> 00:37:47,190
because the framework encourages the

667
00:37:47,190 --> 00:37:49,230
developers to use automatically bind

668
00:37:49,230 --> 00:37:52,470
from the input to the object that is

669
00:37:52,470 --> 00:37:54,240
going to be saved in a database of a

670
00:37:54,240 --> 00:37:55,819
tribe

671
00:37:55,819 --> 00:37:59,339
either guessing object properties or

672
00:37:59,339 --> 00:38:02,279
exploring other apan wines or reading

673
00:38:02,279 --> 00:38:05,789
the documentation input and figure out

674
00:38:05,789 --> 00:38:09,900
how your API is working and what are the

675
00:38:09,900 --> 00:38:12,390
properties available so can I manipulate

676
00:38:12,390 --> 00:38:16,499
this that's the source of the attack by

677
00:38:16,499 --> 00:38:18,569
not preventing the client from changing

678
00:38:18,569 --> 00:38:20,430
the values like it should be only

679
00:38:20,430 --> 00:38:20,819
readable

680
00:38:20,819 --> 00:38:23,190
literally but then you somehow make it

681
00:38:23,190 --> 00:38:28,499
right so an example I can show you the

682
00:38:28,499 --> 00:38:31,529
next one say there is a forum user a

683
00:38:31,529 --> 00:38:34,589
password and email you collect it from

684
00:38:34,589 --> 00:38:38,789
the user info and and this is the user

685
00:38:38,789 --> 00:38:41,569
object it is been buying - username

686
00:38:41,569 --> 00:38:45,420
password email and there is another real

687
00:38:45,420 --> 00:38:50,759
value is admin - or false it's being

688
00:38:50,759 --> 00:38:54,960
there in the user object right so when

689
00:38:54,960 --> 00:38:59,970
you do an edit user you bind the form

690
00:38:59,970 --> 00:39:02,359
running to the user automatically

691
00:39:02,359 --> 00:39:05,819
instead of instead of manually setting

692
00:39:05,819 --> 00:39:08,339
it that is the issue here

693
00:39:08,339 --> 00:39:09,930
that is the master class assignment

694
00:39:09,930 --> 00:39:14,099
issue here so we need to a post call a

695
00:39:14,099 --> 00:39:18,509
PA call what does it do like anywhere I

696
00:39:18,509 --> 00:39:21,029
can I the original request will be the

697
00:39:21,029 --> 00:39:23,900
username is something password and email

698
00:39:23,900 --> 00:39:29,640
but now just flipping through it I am

699
00:39:29,640 --> 00:39:31,410
figuring it out hey there is another

700
00:39:31,410 --> 00:39:34,769
variable inside the user that I can

701
00:39:34,769 --> 00:39:38,099
leverage and it says is admin so I have

702
00:39:38,099 --> 00:39:40,249
what if I try with eggman true and that

703
00:39:40,249 --> 00:39:42,660
is the whole issue right like you were

704
00:39:42,660 --> 00:39:46,950
able to edit a user as an admin so

705
00:39:46,950 --> 00:39:50,160
that's the mask assignment issue so one

706
00:39:50,160 --> 00:39:51,390
of the real world

707
00:39:51,390 --> 00:39:54,119
that happened in some Harbor which is on

708
00:39:54,119 --> 00:39:57,990
2019 a cloud registry service this is a

709
00:39:57,990 --> 00:39:59,849
popular open source system for

710
00:39:59,849 --> 00:40:02,059
registering the container base images

711
00:40:02,059 --> 00:40:05,190
again it internally used o RM for

712
00:40:05,190 --> 00:40:06,869
writing the objects to their database as

713
00:40:06,869 --> 00:40:11,010
we discussed in a lot of places so this

714
00:40:11,010 --> 00:40:13,589
list just found that the user objects I

715
00:40:13,589 --> 00:40:15,990
have an admin role flag on them that

716
00:40:15,990 --> 00:40:18,210
directly matched to the field so

717
00:40:18,210 --> 00:40:21,559
basically they got hold of the admin

718
00:40:21,559 --> 00:40:24,720
variable and they were able to track

719
00:40:24,720 --> 00:40:26,700
what the base images used in the company

720
00:40:26,700 --> 00:40:30,710
so so that's the mass assignment problem

721
00:40:30,710 --> 00:40:33,500
what could be the prevention mechanism

722
00:40:33,500 --> 00:40:36,809
do not bind automatically the client

723
00:40:36,809 --> 00:40:39,960
input to the objects just whitelist only

724
00:40:39,960 --> 00:40:41,880
the properties updated by the client

725
00:40:41,880 --> 00:40:46,230
so in our example we saw previously we

726
00:40:46,230 --> 00:40:48,450
would just manually set only those three

727
00:40:48,450 --> 00:40:53,220
properties and not binding the whole

728
00:40:53,220 --> 00:40:58,109
object so how is everybody doing

729
00:40:58,109 --> 00:41:00,690
is it your able to follow through just

730
00:41:00,690 --> 00:41:18,420
just making sure okay nice ok now the

731
00:41:18,420 --> 00:41:24,119
security Miss configuration so this is a

732
00:41:24,119 --> 00:41:30,000
pretty standard same as wasp issue 2 in

733
00:41:30,000 --> 00:41:32,910
the web application nothing strange and

734
00:41:32,910 --> 00:41:35,490
it is applicable to API also any

735
00:41:35,490 --> 00:41:38,480
unpatched flaws common in points

736
00:41:38,480 --> 00:41:40,890
unprotected files like that you can

737
00:41:40,890 --> 00:41:42,660
directly used to gain unauthorized

738
00:41:42,660 --> 00:41:45,119
access give to the Miss computation that

739
00:41:45,119 --> 00:41:48,119
is happening that can expose only the

740
00:41:48,119 --> 00:41:53,099
sensitive data compromising server sort

741
00:41:53,099 --> 00:41:54,569
of configuration issues that we are

742
00:41:54,569 --> 00:41:58,259
pretty much aware oh so this happens due

743
00:41:58,259 --> 00:42:01,109
to the lack of secured headers and we

744
00:42:01,109 --> 00:42:04,800
talked about HTTP method not able to

745
00:42:04,800 --> 00:42:08,550
whew and we are exposing more and in

746
00:42:08,550 --> 00:42:11,250
case of web application again polls

747
00:42:11,250 --> 00:42:14,910
policy is misconfigured that you are not

748
00:42:14,910 --> 00:42:16,350
supposed to access but the course

749
00:42:16,350 --> 00:42:19,590
policies are like you can define a

750
00:42:19,590 --> 00:42:20,970
course policy but it is like

751
00:42:20,970 --> 00:42:24,240
misconfigured like what aps can access

752
00:42:24,240 --> 00:42:28,350
if you give a star on it so that

753
00:42:28,350 --> 00:42:31,110
configuration can be Miskin is a problem

754
00:42:31,110 --> 00:42:35,190
here and again cloud configurations i

755
00:42:35,190 --> 00:42:40,400
would see a breach here like Equifax

756
00:42:40,400 --> 00:42:43,710
everybody is aware of the lack of

757
00:42:43,710 --> 00:42:47,360
security headers untouched Apache struts

758
00:42:47,360 --> 00:42:52,760
again the HTTP header content type that

759
00:42:52,760 --> 00:42:56,820
was being manipulated with a malicious

760
00:42:56,820 --> 00:43:00,570
payload so in the alerting system also

761
00:43:00,570 --> 00:43:02,970
failed due to a security certificate

762
00:43:02,970 --> 00:43:06,210
that has been expired for 19 months so

763
00:43:06,210 --> 00:43:08,760
in then 148 million customers got

764
00:43:08,760 --> 00:43:10,610
infected so there's a lot of

765
00:43:10,610 --> 00:43:14,790
misconfigurations issue here including

766
00:43:14,790 --> 00:43:17,040
not maintaining your certificates

767
00:43:17,040 --> 00:43:18,170
properly

768
00:43:18,170 --> 00:43:25,350
what's a prevention it's hardening there

769
00:43:25,350 --> 00:43:28,140
might be some automate there must be a

770
00:43:28,140 --> 00:43:30,900
way to automate your configuration to

771
00:43:30,900 --> 00:43:33,120
find the configuration plot flaws you

772
00:43:33,120 --> 00:43:36,150
can think about it and disable the

773
00:43:36,150 --> 00:43:39,600
unused HTTP methods we saw that earlier

774
00:43:39,600 --> 00:43:42,660
make sure our certs are in place so and

775
00:43:42,660 --> 00:43:45,320
also review your s3 button

776
00:43:45,320 --> 00:43:48,240
configurations API stack across the API

777
00:43:48,240 --> 00:43:51,120
stack the configuration orchestration

778
00:43:51,120 --> 00:43:53,240
files everything comes under this

779
00:43:53,240 --> 00:44:01,740
particular configuration topic to

780
00:44:01,740 --> 00:44:07,320
injection this is also kind of the same

781
00:44:07,320 --> 00:44:10,230
attack surface as in the OWASP top 10

782
00:44:10,230 --> 00:44:18,640
and the web application so

783
00:44:18,640 --> 00:44:21,490
this happens because a client data that

784
00:44:21,490 --> 00:44:24,519
is coming is not validated or filtered

785
00:44:24,519 --> 00:44:27,970
or sanitized by the API again the same

786
00:44:27,970 --> 00:44:32,470
issue is when you have an input that is

787
00:44:32,470 --> 00:44:34,539
not being properly sanitized and your

788
00:44:34,539 --> 00:44:37,329
API is accepting that input without that

789
00:44:37,329 --> 00:44:40,869
sanitization and the input is being

790
00:44:40,869 --> 00:44:45,549
passed on to a query which can mean

791
00:44:45,549 --> 00:44:47,859
concatenating a query and then it cannot

792
00:44:47,859 --> 00:44:50,880
try more than what it is supposed to a

793
00:44:50,880 --> 00:44:53,980
simple example would be if you see a

794
00:44:53,980 --> 00:44:59,260
delete API bookings like you're supposed

795
00:44:59,260 --> 00:45:07,269
to pass daily the particular 678 but the

796
00:45:07,269 --> 00:45:09,309
attacker was able to intercept this

797
00:45:09,309 --> 00:45:12,369
request and change the booking ID in the

798
00:45:12,369 --> 00:45:15,880
query string parameter so just by

799
00:45:15,880 --> 00:45:17,829
manipulating in in the query string

800
00:45:17,829 --> 00:45:20,289
parameter he was able to manipulate and

801
00:45:20,289 --> 00:45:24,089
delete another person poking so again

802
00:45:24,089 --> 00:45:26,500
sanitization of the input would have

803
00:45:26,500 --> 00:45:30,460
helped here don't trust any user inputs

804
00:45:30,460 --> 00:45:33,309
that is the number o number one and

805
00:45:33,309 --> 00:45:35,829
sanitize is all the inputs that is

806
00:45:35,829 --> 00:45:38,829
coming into the API that would be the

807
00:45:38,829 --> 00:45:42,309
preventer prevention and care in input

808
00:45:42,309 --> 00:45:44,380
properly decode properly special

809
00:45:44,380 --> 00:45:48,130
character should be escaped and you

810
00:45:48,130 --> 00:45:50,710
prefer a safe API that provides the

811
00:45:50,710 --> 00:45:52,839
parametrized interface use prepared

812
00:45:52,839 --> 00:45:56,890
statements in in the backend to retry

813
00:45:56,890 --> 00:45:59,640
from the tables

814
00:46:00,619 --> 00:46:03,390
so the next one is of improper asset

815
00:46:03,390 --> 00:46:07,260
management so this term this is again a

816
00:46:07,260 --> 00:46:11,329
very common issue in the development

817
00:46:11,329 --> 00:46:14,520
management of is APA assets in the in

818
00:46:14,520 --> 00:46:16,530
this fast c ICD pipeline

819
00:46:16,530 --> 00:46:18,720
we gotta update so many versions very

820
00:46:18,720 --> 00:46:20,849
quicker so we don't be commissioned the

821
00:46:20,849 --> 00:46:25,560
old version properly and any new fixer

822
00:46:25,560 --> 00:46:27,450
security fixes goes into the new version

823
00:46:27,450 --> 00:46:31,369
but the old versions are left behind and

824
00:46:31,369 --> 00:46:34,020
still there are some requests active

825
00:46:34,020 --> 00:46:36,690
requests going on that input is being

826
00:46:36,690 --> 00:46:40,320
serviced so that is a core problem in

827
00:46:40,320 --> 00:46:43,589
this issue and also then like so many

828
00:46:43,589 --> 00:46:47,369
api is like um and if you not in the api

829
00:46:47,369 --> 00:46:49,349
gateway there are how do you discover

830
00:46:49,349 --> 00:46:52,290
them and having not documented API

831
00:46:52,290 --> 00:46:55,560
endpoints whole team working on some API

832
00:46:55,560 --> 00:46:57,180
is long back having download

833
00:46:57,180 --> 00:46:59,640
documentation so the API discovery is

834
00:46:59,640 --> 00:47:03,060
the problem here the old API is that our

835
00:47:03,060 --> 00:47:04,829
government and abandoned but still are

836
00:47:04,829 --> 00:47:10,680
in active servicing so and also the same

837
00:47:10,680 --> 00:47:12,839
security standards is not being in

838
00:47:12,839 --> 00:47:15,319
production and not production

839
00:47:15,319 --> 00:47:19,829
environments for example I put just in

840
00:47:19,829 --> 00:47:27,089
this picture just cb1 get users and I

841
00:47:27,089 --> 00:47:28,859
have some other new functionality I

842
00:47:28,859 --> 00:47:33,270
released a v3 those two are active so in

843
00:47:33,270 --> 00:47:35,940
the real world now experimentation you

844
00:47:35,940 --> 00:47:39,270
wanted to in you wanted to introduce a

845
00:47:39,270 --> 00:47:42,180
new functionality so you created a new

846
00:47:42,180 --> 00:47:45,960
III get users that might be the new

847
00:47:45,960 --> 00:47:50,609
latest API does some like get more

848
00:47:50,609 --> 00:47:52,290
details or whatever the functionality

849
00:47:52,290 --> 00:47:54,960
that they've already develop so there

850
00:47:54,960 --> 00:47:57,300
are some users like with the

851
00:47:57,300 --> 00:48:01,500
experimentation like 80% is using v1 and

852
00:48:01,500 --> 00:48:05,790
20% users are getting the v3 request so

853
00:48:05,790 --> 00:48:09,630
both of them are active and consider

854
00:48:09,630 --> 00:48:12,150
this case there is a security issue

855
00:48:12,150 --> 00:48:14,250
popped up and you fixed only on

856
00:48:14,250 --> 00:48:17,820
three and you did not fix on wheel one

857
00:48:17,820 --> 00:48:20,420
what would happen still some other

858
00:48:20,420 --> 00:48:22,680
attacker can get hold of v1 and

859
00:48:22,680 --> 00:48:26,369
manipulate it and exploit that issue so

860
00:48:26,369 --> 00:48:29,099
it is always the best idea that whatever

861
00:48:29,099 --> 00:48:34,190
the fixes that you put in it has to be

862
00:48:34,190 --> 00:48:37,650
getting to all those API versions and

863
00:48:37,650 --> 00:48:42,450
also there is a third one it's pretty

864
00:48:42,450 --> 00:48:45,270
old API it's not discoverable that

865
00:48:45,270 --> 00:48:47,580
nobody moves what it does but it is

866
00:48:47,580 --> 00:48:49,109
serving some traffic with no

867
00:48:49,109 --> 00:48:51,750
documentation it's up in the world for

868
00:48:51,750 --> 00:48:55,859
exploitation as well this is pretty

869
00:48:55,859 --> 00:48:58,830
common link to a Google that for a

870
00:48:58,830 --> 00:49:01,290
particular like you will be able to find

871
00:49:01,290 --> 00:49:04,349
out all the old API versions etc it's

872
00:49:04,349 --> 00:49:07,410
out in the world another example would

873
00:49:07,410 --> 00:49:12,290
be unknown API host for example DevOps

874
00:49:12,290 --> 00:49:16,890
they can tail table something for them

875
00:49:16,890 --> 00:49:21,869
but nobody knows it so there could be

876
00:49:21,869 --> 00:49:27,599
some again it's a discovery issue the

877
00:49:27,599 --> 00:49:29,700
real-world example would be a company

878
00:49:29,700 --> 00:49:32,810
called Just Dial it's a local search

879
00:49:32,810 --> 00:49:35,280
service in India so it got reached on

880
00:49:35,280 --> 00:49:39,930
2009 19 just because again would

881
00:49:39,930 --> 00:49:42,660
unprotected API I was left in the world

882
00:49:42,660 --> 00:49:45,480
that leaked the data on their users so

883
00:49:45,480 --> 00:49:47,700
basically their latest version did not

884
00:49:47,700 --> 00:49:53,040
have any issues but the old version had

885
00:49:53,040 --> 00:49:55,020
some issues and the attackers were able

886
00:49:55,020 --> 00:49:57,000
to exploit it and get the user

887
00:49:57,000 --> 00:49:59,280
information this one is pretty

888
00:49:59,280 --> 00:50:02,330
challenging and time-consuming for

889
00:50:02,330 --> 00:50:05,150
developers like just to make sure

890
00:50:05,150 --> 00:50:11,670
whatever the active API is are serving

891
00:50:11,670 --> 00:50:16,829
the same and how do you play

892
00:50:16,829 --> 00:50:19,480
again it's required some work you need

893
00:50:19,480 --> 00:50:23,319
to have the inventory rod staging what

894
00:50:23,319 --> 00:50:26,109
are the APA host host generate API

895
00:50:26,109 --> 00:50:28,210
documentation using open standards these

896
00:50:28,210 --> 00:50:30,099
days it's left a lot of open standards

897
00:50:30,099 --> 00:50:32,109
are available just do the APA

898
00:50:32,109 --> 00:50:34,089
documentation and make them available

899
00:50:34,089 --> 00:50:37,630
and then protection measures that we

900
00:50:37,630 --> 00:50:40,240
talked about not only for fraud just do

901
00:50:40,240 --> 00:50:41,049
the same thing for the other

902
00:50:41,049 --> 00:50:44,140
environments and move to new API secure

903
00:50:44,140 --> 00:50:46,200
version decommission the old one

904
00:50:46,200 --> 00:50:52,140
whenever you can and the last one

905
00:50:52,140 --> 00:50:56,019
insufficient log and monitoring this is

906
00:50:56,019 --> 00:50:58,150
pretty standard you leave a lot of

907
00:50:58,150 --> 00:51:00,700
information in your log and also you

908
00:51:00,700 --> 00:51:02,980
don't wanna tear it up those two

909
00:51:02,980 --> 00:51:05,609
problems so video sharing platform

910
00:51:05,609 --> 00:51:08,710
dailymotion hit by the credential

911
00:51:08,710 --> 00:51:11,769
stuffing attack again the same problem

912
00:51:11,769 --> 00:51:13,359
is like there were no alerts what

913
00:51:13,359 --> 00:51:15,369
occurred there was no monitoring

914
00:51:15,369 --> 00:51:19,750
happening after the customer complains

915
00:51:19,750 --> 00:51:21,730
then the team started looking into it

916
00:51:21,730 --> 00:51:24,640
and they found this packet oh okay then

917
00:51:24,640 --> 00:51:26,529
they reached up with the customers and -

918
00:51:26,529 --> 00:51:28,599
for the person password reset etcetera

919
00:51:28,599 --> 00:51:34,059
so yeah like you got a monitor and logs

920
00:51:34,059 --> 00:51:36,130
you gotta make sure there is no PII

921
00:51:36,130 --> 00:51:38,680
information or anything sensitive

922
00:51:38,680 --> 00:51:41,470
information is being logged as well and

923
00:51:41,470 --> 00:51:44,619
the prevention log in the failed

924
00:51:44,619 --> 00:51:46,960
attempts prepared some alert use like

925
00:51:46,960 --> 00:51:49,329
sim tool to collect and aggregate the

926
00:51:49,329 --> 00:51:53,589
logs monitor create alerts dashboard

927
00:51:53,589 --> 00:51:55,450
anything that helps on this particular

928
00:51:55,450 --> 00:51:59,140
issue and these are the references I

929
00:51:59,140 --> 00:52:05,380
included thank you that's was an API I

930
00:52:05,380 --> 00:52:09,089
am open for any questions if you have

931
00:52:15,590 --> 00:52:22,560
any questions I think somebody was

932
00:52:22,560 --> 00:52:28,590
asking how often this is updated yeah so

933
00:52:28,590 --> 00:52:36,420
um this 2019 like couple of last year

934
00:52:36,420 --> 00:52:38,310
and then they I know the team is

935
00:52:38,310 --> 00:52:43,109
actively working on and updating the

936
00:52:43,109 --> 00:52:45,690
standards and also they are working on

937
00:52:45,690 --> 00:52:50,430
to release a vulnerable API that that

938
00:52:50,430 --> 00:52:53,940
everybody can just use to learn like how

939
00:52:53,940 --> 00:52:56,369
web code was used to learn the web

940
00:52:56,369 --> 00:53:00,240
application attack um so yeah this team

941
00:53:00,240 --> 00:53:01,680
is pretty active and working on the

942
00:53:01,680 --> 00:53:05,640
initiatives and there is a group working

943
00:53:05,640 --> 00:53:09,930
on the JIRA issues as well yeah I have a

944
00:53:09,930 --> 00:53:13,950
question what tools and techniques do

945
00:53:13,950 --> 00:53:20,210
you use to evaluate the API endpoints

946
00:53:20,210 --> 00:53:23,609
and it would be nice if we have example

947
00:53:23,609 --> 00:53:32,670
to illustrate yeah so I think this like

948
00:53:32,670 --> 00:53:34,680
issues that I've talked about like

949
00:53:34,680 --> 00:53:37,560
except for the business logic flaws any

950
00:53:37,560 --> 00:53:39,690
- tools we're able to figure out a lot

951
00:53:39,690 --> 00:53:42,720
of issues - I'm not mentioning any one

952
00:53:42,720 --> 00:53:47,070
in particular but and and for business

953
00:53:47,070 --> 00:53:48,150
logic flaws

954
00:53:48,150 --> 00:53:51,090
unfortunately there is not any tool that

955
00:53:51,090 --> 00:53:54,150
will figure it out it is all about the

956
00:53:54,150 --> 00:53:57,420
pen testing so I would say lot of issues

957
00:53:57,420 --> 00:54:01,859
in the API so far have discovered

958
00:54:01,859 --> 00:54:06,030
interesting from the basic ones like

959
00:54:06,030 --> 00:54:10,170
HTTP headers and there are some rules

960
00:54:10,170 --> 00:54:13,290
around that like you can figure it out

961
00:54:13,290 --> 00:54:17,190
with these - tools but for the API

962
00:54:17,190 --> 00:54:20,220
security I feel there's a lot going on

963
00:54:20,220 --> 00:54:21,869
in the business logic side like you've

964
00:54:21,869 --> 00:54:23,940
got to validate there is nothing like

965
00:54:23,940 --> 00:54:25,440
one to will figure out your

966
00:54:25,440 --> 00:54:27,200
authorization flaws or anything

967
00:54:27,200 --> 00:54:29,240
that so it is a lot of manual review and

968
00:54:29,240 --> 00:54:33,530
pen testing there's another question

969
00:54:33,530 --> 00:54:39,530
here any best practice recommendations

970
00:54:39,530 --> 00:54:43,930
you have for authenticating all modes

971
00:54:43,930 --> 00:54:47,859
and it'll be the question yes any best

972
00:54:47,859 --> 00:54:50,750
practice recommendations for

973
00:54:50,750 --> 00:54:57,470
authenticating mobile apps yeah use the

974
00:54:57,470 --> 00:55:01,280
what like the standard framework what

975
00:55:01,280 --> 00:55:06,410
2.0 integrate that and then you protect

976
00:55:06,410 --> 00:55:11,180
your access tokens and that's my answer

977
00:55:11,180 --> 00:55:13,369
like use a pop like whatever the

978
00:55:13,369 --> 00:55:15,440
framework that is instead of like

979
00:55:15,440 --> 00:55:17,210
reinventing yourself use a popular

980
00:55:17,210 --> 00:55:20,180
framework like I have used what 2.0

981
00:55:20,180 --> 00:55:25,430
framework the question how is rate

982
00:55:25,430 --> 00:55:28,520
limiting done in practice doesn't that

983
00:55:28,520 --> 00:55:36,079
consume significant computer sources can

984
00:55:36,079 --> 00:55:39,200
you elaborate on this question um this

985
00:55:39,200 --> 00:55:58,250
was Shan Hsiung can you speak up ok

986
00:55:58,250 --> 00:55:59,220
let's move on

987
00:55:59,220 --> 00:56:01,380
comes back it was mentioned in an

988
00:56:01,380 --> 00:56:04,650
excessive data spa sure about sniffing

989
00:56:04,650 --> 00:56:17,460
API traffic how is that possible if you

990
00:56:17,460 --> 00:56:27,349
I mean get hold of the API like I mean

991
00:56:27,410 --> 00:56:36,119
I'm just thinking like something like

992
00:56:36,119 --> 00:56:38,550
you bypass it then get hold of the API

993
00:56:38,550 --> 00:56:40,560
and then get that sensitive information

994
00:56:40,560 --> 00:56:42,720
so I have not done much on the pen

995
00:56:42,720 --> 00:56:52,069
testing side but yeah there's another

996
00:56:53,270 --> 00:56:55,560
yes I think that's the last question I

997
00:56:55,560 --> 00:56:57,720
think Shawn is having issues with his my

998
00:56:57,720 --> 00:57:08,330
I have a question if that's okay

999
00:57:08,330 --> 00:57:11,310
yeah so you mentioned earlier about the

1000
00:57:11,310 --> 00:57:15,030
C CI and C D that continuous integration

1001
00:57:15,030 --> 00:57:16,920
and development

1002
00:57:16,920 --> 00:57:19,740
I was wondering how how would you like

1003
00:57:19,740 --> 00:57:21,810
if you share with us like what - like

1004
00:57:21,810 --> 00:57:23,640
the tools or the framework that have

1005
00:57:23,640 --> 00:57:27,810
been used during your experience that in

1006
00:57:27,810 --> 00:57:31,470
and how it does change the the API is

1007
00:57:31,470 --> 00:57:35,400
like performing security maybe check or

1008
00:57:35,400 --> 00:57:42,150
gate checks I'm just really curious know

1009
00:57:42,150 --> 00:57:43,950
I'm just mentioning about the CI CD

1010
00:57:43,950 --> 00:57:48,500
pipeline is like I mean now the

1011
00:57:48,500 --> 00:57:50,730
continuous integration people are

1012
00:57:50,730 --> 00:57:54,660
releasing more more features faster and

1013
00:57:54,660 --> 00:57:57,660
how the old version is like yet

1014
00:57:57,660 --> 00:58:00,480
abandoned so with that perspective I was

1015
00:58:00,480 --> 00:58:03,839
mentioning the CI CD and like you to

1016
00:58:03,839 --> 00:58:06,810
move fast so there are a lot of like old

1017
00:58:06,810 --> 00:58:09,119
API is getting abandoned undocumented

1018
00:58:09,119 --> 00:58:12,500
version but is this your question

1019
00:58:12,500 --> 00:58:16,099
like regarding what dose is being used

1020
00:58:16,099 --> 00:58:18,400
or is it anything in particular

1021
00:58:18,400 --> 00:58:22,970
yeah thank you I would be interested as

1022
00:58:22,970 --> 00:58:27,020
to that that it you know you explain the

1023
00:58:27,020 --> 00:58:29,540
the previous slide that's nice but I'm

1024
00:58:29,540 --> 00:58:31,940
just out of curiosity what would be like

1025
00:58:31,940 --> 00:58:34,310
there's so many frameworks but from your

1026
00:58:34,310 --> 00:58:36,980
experience as a security engineer what

1027
00:58:36,980 --> 00:58:40,970
would you like see the like a pipeline a

1028
00:58:40,970 --> 00:58:43,400
framework that it's that that did work

1029
00:58:43,400 --> 00:58:46,130
for you especially with that implements

1030
00:58:46,130 --> 00:58:53,750
like security gate checks okay I'm so

1031
00:58:53,750 --> 00:58:56,990
not in particular with API security so

1032
00:58:56,990 --> 00:59:00,200
in general the gate checks anything with

1033
00:59:00,200 --> 00:59:08,650
this like I mean any sassed checks also

1034
00:59:08,650 --> 00:59:10,790
automated like a SAP tool I have

1035
00:59:10,790 --> 00:59:13,880
integrated that was pretty cool I mean

1036
00:59:13,880 --> 00:59:15,859
I'm just not talking about API security

1037
00:59:15,859 --> 00:59:18,890
but in general the pipeline when you

1038
00:59:18,890 --> 00:59:21,140
come with the code or before you come

1039
00:59:21,140 --> 00:59:24,140
with the code the SAS kicks in and you

1040
00:59:24,140 --> 00:59:27,230
can the developer and before even

1041
00:59:27,230 --> 00:59:30,560
committing there is an IDE plug-in well

1042
00:59:30,560 --> 00:59:32,599
if it is available you can validate your

1043
00:59:32,599 --> 00:59:36,290
code for the security flaws because

1044
00:59:36,290 --> 00:59:38,390
assists all about the rules and there

1045
00:59:38,390 --> 00:59:41,330
are also you can do in your pipeline in

1046
00:59:41,330 --> 00:59:42,859
like when your module for what it is all

1047
00:59:42,859 --> 00:59:45,140
how you want to integrate it many before

1048
00:59:45,140 --> 00:59:48,500
you merge a for somebody I mean the

1049
00:59:48,500 --> 00:59:52,430
sastra scan can determine and give you a

1050
00:59:52,430 --> 00:59:56,080
report of whatever the security issues

1051
00:59:56,080 --> 01:00:02,390
and the next is the - if you wanted the

1052
01:00:02,390 --> 01:00:04,700
live request malicious request like how

1053
01:00:04,700 --> 01:00:09,680
the responses are and like the lot of

1054
01:00:09,680 --> 01:00:11,510
issues that I've spoke about like

1055
01:00:11,510 --> 01:00:20,030
headers and headers and we methods are

1056
01:00:20,030 --> 01:00:22,430
not enabled those are can be caught by

1057
01:00:22,430 --> 01:00:26,329
the - or can be like a wasp

1058
01:00:26,329 --> 01:00:28,880
you owe us consents Abdul you can try

1059
01:00:28,880 --> 01:00:30,979
that true it does both active and

1060
01:00:30,979 --> 01:00:33,679
passive scans the third is the ACA

1061
01:00:33,679 --> 01:00:36,189
software compositional analysis so any

1062
01:00:36,189 --> 01:00:38,929
code that you push in you want to make

1063
01:00:38,929 --> 01:00:41,109
sure that you're not introducing any

1064
01:00:41,109 --> 01:00:43,640
using any vulnerable libraries in your

1065
01:00:43,640 --> 01:00:52,959
corn yes like so yeah just a quick

1066
01:00:55,479 --> 01:00:58,219
question here for rate limiting can you

1067
01:00:58,219 --> 01:01:03,609
use API gave weights that offers this

1068
01:01:04,479 --> 01:01:09,019
yes so I have not worked in detail on

1069
01:01:09,019 --> 01:01:11,689
that but I know that yes you can use APA

1070
01:01:11,689 --> 01:01:24,339
gateways and rate limiting questions

1071
01:01:30,069 --> 01:01:32,299
there's a question we're getting Nets

1072
01:01:32,299 --> 01:01:36,619
Parker how good would that be for ABI da

1073
01:01:36,619 --> 01:01:45,469
da SD security yes it's just the there

1074
01:01:45,469 --> 01:01:48,410
in nets Parker which is a tool for for

1075
01:01:48,410 --> 01:01:53,029
testing web web services ABS how good

1076
01:01:53,029 --> 01:01:58,189
would that be for a API DASD security

1077
01:01:58,189 --> 01:02:03,829
dynamic dynamic yeah I have not I have

1078
01:02:03,829 --> 01:02:06,319
not used it to so I cannot comment on

1079
01:02:06,319 --> 01:02:10,069
that but whatever I may experience like

1080
01:02:10,069 --> 01:02:14,209
the rules like apart from the business

1081
01:02:14,209 --> 01:02:17,420
logic flaws I mean business logic like

1082
01:02:17,420 --> 01:02:20,179
the object we talked about the object

1083
01:02:20,179 --> 01:02:21,799
level authorization function level

1084
01:02:21,799 --> 01:02:25,239
authorization like all those are like

1085
01:02:25,239 --> 01:02:28,400
the - tools would not be able to fight

1086
01:02:28,400 --> 01:02:30,859
it or any other tool like I have tried

1087
01:02:30,859 --> 01:02:32,390
was not able to find it those are all

1088
01:02:32,390 --> 01:02:36,709
manual review interesting you got to

1089
01:02:36,709 --> 01:02:38,150
work with the development teams like

1090
01:02:38,150 --> 01:02:39,990
security person or the developers

1091
01:02:39,990 --> 01:02:42,720
to be aware of it checks are like

1092
01:02:42,720 --> 01:02:45,450
business logic sold but other than what

1093
01:02:45,450 --> 01:02:49,110
I when I talked about like the security

1094
01:02:49,110 --> 01:02:52,280
headers missing or any HTTP method its

1095
01:02:52,280 --> 01:02:56,250
disabled all those like dust was able to

1096
01:02:56,250 --> 01:02:59,190
find it with respect to this API and and

1097
01:02:59,190 --> 01:03:02,640
some sensitive information also they

1098
01:03:02,640 --> 01:03:08,070
were able to figure it out here's

1099
01:03:08,070 --> 01:03:09,780
another question how would you

1100
01:03:09,780 --> 01:03:13,050
differentiate de ASD from threat

1101
01:03:13,050 --> 01:03:17,900
modeling in terms of web app security

1102
01:03:19,970 --> 01:03:21,119
okay

1103
01:03:21,119 --> 01:03:26,760
Tech modelling is completely like the

1104
01:03:26,760 --> 01:03:28,830
only is like it when you do an

1105
01:03:28,830 --> 01:03:30,810
architecture review for your web

1106
01:03:30,810 --> 01:03:33,990
application say set morning is just

1107
01:03:33,990 --> 01:03:37,350
another term right then we think from a

1108
01:03:37,350 --> 01:03:40,650
different perspective when we are

1109
01:03:40,650 --> 01:03:42,660
architecting we draw some diagrams but

1110
01:03:42,660 --> 01:03:46,950
then that model is available you have

1111
01:03:46,950 --> 01:03:50,220
like you draw or like you discuss about

1112
01:03:50,220 --> 01:03:52,520
what are your applications what are you

1113
01:03:52,520 --> 01:03:55,710
inside the application and what are your

1114
01:03:55,710 --> 01:03:59,130
trust boundaries so it is a design way

1115
01:03:59,130 --> 01:04:02,280
of thinking that what could go wrong and

1116
01:04:02,280 --> 01:04:03,690
there are so many principles that you

1117
01:04:03,690 --> 01:04:07,290
can apply close try which is from the

1118
01:04:07,290 --> 01:04:10,710
Microsoft atom show start like so I

1119
01:04:10,710 --> 01:04:13,619
follow this tri principle like bringing

1120
01:04:13,619 --> 01:04:15,660
information is your sure so apply that

1121
01:04:15,660 --> 01:04:17,820
model to figure out the threads early in

1122
01:04:17,820 --> 01:04:19,560
the development phase before I even

1123
01:04:19,560 --> 01:04:22,080
start writing code we used two figures I

1124
01:04:22,080 --> 01:04:25,230
put a diagram how the process flows from

1125
01:04:25,230 --> 01:04:28,830
your application and output and then has

1126
01:04:28,830 --> 01:04:31,890
boundaries and and you do the stripe and

1127
01:04:31,890 --> 01:04:33,869
suppose whether spoofing can happen what

1128
01:04:33,869 --> 01:04:37,530
could go wrong so so that is totally

1129
01:04:37,530 --> 01:04:40,859
different from write logic model is like

1130
01:04:40,859 --> 01:04:44,880
I haven't seen I mean I use like this is

1131
01:04:44,880 --> 01:04:46,020
manual fit model

1132
01:04:46,020 --> 01:04:48,930
I know there are tools available but I

1133
01:04:48,930 --> 01:04:52,290
heard like they are also like not up to

1134
01:04:52,290 --> 01:04:53,339
the

1135
01:04:53,339 --> 01:04:55,710
like finding all the vulnerabilities so

1136
01:04:55,710 --> 01:04:58,200
it's the best way to manually sit and

1137
01:04:58,200 --> 01:05:00,420
threat model and record all the threats

1138
01:05:00,420 --> 01:05:08,069
and the mitigation - to something it's

1139
01:05:08,069 --> 01:05:09,509
very different from that model you

1140
01:05:09,509 --> 01:05:15,450
configure the URL the test and basically

1141
01:05:15,450 --> 01:05:17,700
the rules kick in and it sends the

1142
01:05:17,700 --> 01:05:22,049
malicious request flex crawl through the

1143
01:05:22,049 --> 01:05:24,989
pages and finds out the actual

1144
01:05:24,989 --> 01:05:27,150
vulnerabilities and we give you a tour

1145
01:05:27,150 --> 01:05:29,640
of how this flaw could be avoided and

1146
01:05:29,640 --> 01:05:31,200
what is the request URL and what is the

1147
01:05:31,200 --> 01:05:34,368
response that you got it

1148
01:05:36,479 --> 01:05:46,499
any other questions I just wanted to

1149
01:05:46,499 --> 01:05:50,279
yeah in the talk like so any automated

1150
01:05:50,279 --> 01:05:52,589
testing API I haven't explored that much

1151
01:05:52,589 --> 01:05:56,190
but then I would emphasize this like a

1152
01:05:56,190 --> 01:05:58,890
lot of issues that have we talked about

1153
01:05:58,890 --> 01:06:01,680
it is like just a manual review or

1154
01:06:01,680 --> 01:06:05,160
asking the right questions like so like

1155
01:06:05,160 --> 01:06:07,079
working with the team like hey this is

1156
01:06:07,079 --> 01:06:09,029
the request and this is the response and

1157
01:06:09,029 --> 01:06:11,700
sitting and talking what the client what

1158
01:06:11,700 --> 01:06:13,170
is the functionality and what is the

1159
01:06:13,170 --> 01:06:17,849
flow and who wants this data and seeing

1160
01:06:17,849 --> 01:06:19,979
the actual response and asking questions

1161
01:06:19,979 --> 01:06:22,920
like hey is this a pure data if you see

1162
01:06:22,920 --> 01:06:25,319
something fishy just drill down the API

1163
01:06:25,319 --> 01:06:28,710
response and talk to the team's like is

1164
01:06:28,710 --> 01:06:30,210
it needed like if you see anything

1165
01:06:30,210 --> 01:06:32,309
sensitive like hey why is neither

1166
01:06:32,309 --> 01:06:36,109
question that and and that and then

1167
01:06:36,109 --> 01:06:38,430
authorization how are we authorization

1168
01:06:38,430 --> 01:06:40,859
how are you limiting the access like

1169
01:06:40,859 --> 01:06:42,900
it's more like manual review that helped

1170
01:06:42,900 --> 01:06:46,529
a lot yeah that's one thing that ever

1171
01:06:46,529 --> 01:06:51,180
share my experiences with the API a lot

1172
01:06:51,180 --> 01:06:53,670
of thing like during the development

1173
01:06:53,670 --> 01:06:56,549
before we develop like you ask questions

1174
01:06:56,549 --> 01:07:01,859
and you figure it out a lot thank you

1175
01:07:01,859 --> 01:07:02,440
very much

1176
01:07:02,440 --> 01:07:04,660
thank you very much everybody brother if

1177
01:07:04,660 --> 01:07:07,599
you ask if you send me an email you info

1178
01:07:07,599 --> 01:07:10,720
be hacked of the org I would invite you

1179
01:07:10,720 --> 01:07:13,480
to slack we have amazing an exciting

1180
01:07:13,480 --> 01:07:16,420
coming up I'm gonna have the Koval CTF

1181
01:07:16,420 --> 01:07:19,420
the panel goichi we're gonna have a

1182
01:07:19,420 --> 01:07:22,660
container security drone security and

1183
01:07:22,660 --> 01:07:26,470
many others stay tuned check meet Colin

1184
01:07:26,470 --> 01:07:30,520
for / specific hackers again hacker

1185
01:07:30,520 --> 01:07:34,530
specific in Twitter or FAQ meet up and

1186
01:07:34,530 --> 01:07:37,030
we'll stay in touch and I'll thank you

1187
01:07:37,030 --> 01:07:40,839
very much for attending thank you for

1188
01:07:40,839 --> 01:07:43,900
this opportunity as well thank you hey

1189
01:07:43,900 --> 01:07:46,990
Rob hmm are we still using the P hack

1190
01:07:46,990 --> 01:07:48,869
channel on the slack

1191
01:07:48,869 --> 01:07:51,849
absolutely okay cuz I didn't see

1192
01:07:51,849 --> 01:07:56,970
anything for today you guys don't talk

1193
01:07:56,970 --> 01:08:00,400
if you guys don't die assume that you

1194
01:08:00,400 --> 01:08:03,460
guys are not nothing that you're not

1195
01:08:03,460 --> 01:08:05,589
active if you guys post off for sure

1196
01:08:05,589 --> 01:08:07,990
we'll get it going but you know you see

1197
01:08:07,990 --> 01:08:10,690
the general the thread in tow that right

1198
01:08:10,690 --> 01:08:12,339
now and the current disaster but yeah

1199
01:08:12,339 --> 01:08:14,650
you get this is your channel so please

1200
01:08:14,650 --> 01:08:20,319
use it didn't thank you alright guys

1201
01:08:20,319 --> 01:08:23,219
thanks so much

