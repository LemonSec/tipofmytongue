1
00:00:02,070 --> 00:00:06,949
Stupid yeah, okay one actually, right. So, uh

2
00:00:08,460 --> 00:00:13,970
Basically, welcome guys, this is say our first attempt to do online meetings.

3
00:00:14,610 --> 00:00:19,039
Today we're going to have Cristina Muñoz presenting about automatic detection

4
00:00:20,130 --> 00:00:25,159
in PyPI. It looks like an amazing an amazing topic

5
00:00:26,640 --> 00:00:28,589
She is right now

6
00:00:28,589 --> 00:00:35,509
sending us the presentation and while she does that I wanted to give you guys a little bit of an

7
00:00:37,020 --> 00:00:39,139
FYSA.

8
00:00:41,010 --> 00:00:42,930
Basically, this is

9
00:00:42,930 --> 00:00:44,879
what we're trying to do.

10
00:00:44,879 --> 00:00:46,879
The meetings will go online

11
00:00:47,460 --> 00:00:55,309
for the next two months, and then after after that we're going to evaluate if we can come back to in-person meetings.

12
00:00:55,710 --> 00:00:57,710
Most of you know

13
00:00:57,809 --> 00:00:59,958
obviously what's going on what's going on in California.

14
00:01:01,469 --> 00:01:03,120
And

15
00:01:03,120 --> 00:01:05,509
We're trying to basically self for this

16
00:01:06,060 --> 00:01:11,960
as we go because the the situation is very fluid and it changes pretty quick

17
00:01:12,900 --> 00:01:14,400
so

18
00:01:14,400 --> 00:01:18,709
We're gonna review then and then advise if we can come back to

19
00:01:21,450 --> 00:01:24,439
in-person meetings. The Bay Area CTF and Chill Cook-Off

20
00:01:25,229 --> 00:01:30,618
that we were going do an April has been postponed. The new date will be announced once we

21
00:01:32,850 --> 00:01:34,229
have an

22
00:01:34,229 --> 00:01:36,679
idea of when we can do this event.

23
00:01:37,409 --> 00:01:41,508
The meetings will be saved and posted at the YouTube channel that you're looking at there.

24
00:01:41,850 --> 00:01:46,038
You just go in and this is a brand new channel. We still don't have our own

25
00:01:47,189 --> 00:01:51,109
URL, but you can go in YouTube and type

26
00:01:52,049 --> 00:01:54,049
Pacific hackers and you'll find our channel.

27
00:01:56,549 --> 00:02:03,618
You can also join our slack which is percent-27.slack.com. We have a

28
00:02:05,340 --> 00:02:08,420
channel called #current_disaster where we have a lot of open source intelligence

29
00:02:10,068 --> 00:02:14,238
and up-to-date information about what's going on and

30
00:02:16,769 --> 00:02:18,769
for the info tech industry,

31
00:02:20,249 --> 00:02:25,999
threat intelligence, etc. So if you email me at info@phack.org

32
00:02:25,999 --> 00:02:29,239
I will definitely add you to the channel.

33
00:02:31,409 --> 00:02:33,409
Cristina are you back?

34
00:02:34,240 --> 00:02:37,170
I'm here. Okay. Did you email me your...

35
00:02:37,810 --> 00:02:40,139
Um, I think I emailed it to Marco.

36
00:02:40,810 --> 00:02:42,810
Okay. Okay, Marco. Did you get it?

37
00:02:43,810 --> 00:02:47,579
Yeah, I got it. Okay.So I'm going to make you presenter Marco, hold on.

38
00:02:48,700 --> 00:02:50,700
Let me open it.

39
00:02:50,800 --> 00:02:54,870
I also opened a new browser so I can give it a try here.

40
00:02:58,000 --> 00:03:00,029
Well, am I making you presenter or..?

41
00:03:00,760 --> 00:03:07,108
Let's try Cristina. She wanted to give it a try. Yeah, I'll just try it right now one more time. Yeah, try it.

42
00:03:07,900 --> 00:03:11,819
okay, and then if that fails we'll just have like a Marco like

43
00:03:15,010 --> 00:03:22,769
Just make you a presenter. Alright, I have the window open

44
00:03:27,670 --> 00:03:30,839
Excellent. I'm going to share my screen

45
00:03:43,030 --> 00:03:45,030
Coming on

46
00:03:48,520 --> 00:03:56,070
Wow, okay go. Oh, there we go. You guys see my screen? Yeah!

47
00:03:57,970 --> 00:03:59,950
Awesome. It's all yours.

48
00:03:59,950 --> 00:04:07,799
Cool, cool cool cool. Let me just get my notes up. Alright, so

49
00:04:09,190 --> 00:04:16,440
We're gonna go on a journey, a narrative journey, about automated malware detection in the Python Package Index

50
00:04:17,829 --> 00:04:19,829
So buckle up.

51
00:04:24,460 --> 00:04:26,229
My name is Cristina

52
00:04:26,230 --> 00:04:33,149
I'm gonna start by introducing myself and talking about how I became something of a subject-matter expert on this topic.

53
00:04:34,510 --> 00:04:39,869
I've spent the better part of the past decade writing software and doing security stuff at tech companies,

54
00:04:39,870 --> 00:04:45,480
but only recently have I gotten into security. I've only really been doing it professionally for about three years

55
00:04:47,140 --> 00:04:54,989
Um, most of my work experience has been at big tech companies and consultancies in San Francisco and New York as well as a brief stint

56
00:04:54,990 --> 00:05:00,060
at a research institute in Berlin. I like solving human problems with software tooling

57
00:05:01,990 --> 00:05:06,120
My last gig was at a Google X startup called Chronicle Security,

58
00:05:06,250 --> 00:05:09,779
which was formally acquired by Google cloud in August 2019.

59
00:05:10,060 --> 00:05:14,940
This is three months after we brought our flagship products to market.

60
00:05:15,100 --> 00:05:18,540
This product was called Backstory Backstory is a new kind of

61
00:05:19,030 --> 00:05:24,510
security information and event management system, also known as a SIEM, which integrates all kinds of

62
00:05:24,970 --> 00:05:29,489
security related telemetry like syslog data, EDR data, network information

63
00:05:30,880 --> 00:05:32,800
Active Directory

64
00:05:32,800 --> 00:05:34,060
information

65
00:05:34,060 --> 00:05:40,619
into one place, and is constantly scanning all of this data looking for indicators of compromised

66
00:05:41,350 --> 00:05:45,959
also known as IOCs. Security folks love acronyms, so there's a lot of them in this talk.

67
00:05:45,960 --> 00:05:48,659
I'll try and define all of them, and if I use an acronym you don't know,

68
00:05:49,360 --> 00:05:51,360
please make a note in the chat.

69
00:05:52,360 --> 00:05:57,479
The marketing department touted backstory as kind of a single pane of glass for a SOC.

70
00:05:58,720 --> 00:06:00,720
It's integrated with all kinds of

71
00:06:01,060 --> 00:06:08,130
threat intel feeds like the Department of Homeland Security has one that it was integrated with, and a dozen other ones,

72
00:06:08,470 --> 00:06:09,970
virus scanners

73
00:06:09,970 --> 00:06:16,739
VirusTotal was actually part of Chronicle Security while we were operating, so deep integration with VirusTotal was part of our product offering.

74
00:06:17,890 --> 00:06:22,799
After a Chronicle was acquired, I was offered a spot with her Googley overlords,

75
00:06:24,220 --> 00:06:26,670
but I decided that I was not about that life,

76
00:06:27,700 --> 00:06:29,700
so instead I

77
00:06:30,070 --> 00:06:32,070
went on a vision quest in Guatemala.

78
00:06:33,250 --> 00:06:37,589
When I was in Guatemala, I was thinking about what I was gonna do next with my career

79
00:06:38,410 --> 00:06:45,630
In between swimming in waterfalls and eating Tamarindo raspados, I got an email from someone that I've never met before.

80
00:06:46,750 --> 00:06:48,750
This person

81
00:06:49,300 --> 00:06:51,300
was representing the Python Software Foundation

82
00:06:52,419 --> 00:06:58,409
and emailing me about an upcoming Request for Proposal that they had issued. So Sumana

83
00:06:59,590 --> 00:07:05,549
Like I mentioned, I have never met this person in person and as it turns out, I have not even chatted with them on Zulip,

84
00:07:05,550 --> 00:07:07,550
as they suggested this email.

85
00:07:07,750 --> 00:07:15,269
She found me because we've both been part of this pseudo-bohemian programmer retreat known as Recurse Center, formerly Hacker School

86
00:07:15,940 --> 00:07:19,499
She asked me if I had any thoughts about cryptographic signing or malware detection,

87
00:07:19,570 --> 00:07:24,209
which was the subject of the RFP, and if so to consider submitting a proposal.

88
00:07:24,940 --> 00:07:29,669
So I received this email on September 3rd. The RFP deadline was October 21st.

89
00:07:29,740 --> 00:07:37,140
I finished my vacation and got back to the Bay Area and started looking at this proposal a bit more deeply.

90
00:07:38,410 --> 00:07:44,669
So, let's talk a little bit about what the Python Package Index is, because some of you who aren't from the Python

91
00:07:45,010 --> 00:07:48,209
ecosystem might be a little confused or unfamiliar with it.

92
00:07:48,460 --> 00:07:53,219
The Python Package Index is the official third-party software repository for Python.

93
00:07:53,260 --> 00:07:58,260
So almost every programming language has some kind of official or a canonical package source.

94
00:07:58,990 --> 00:08:04,829
The names of these package sources invariably are some kind of acronym that referenced the programming language.

95
00:08:04,830 --> 00:08:12,120
So, for example, nodejs's package archive is called NPM. You can find it at npmjs.com and the package manager is also called NPM

96
00:08:12,669 --> 00:08:17,457
Perl has one, it's called CPAN, and for Python, it's PyPI.

97
00:08:18,819 --> 00:08:24,359
The way that you install software from  PyPI is with pip typically.

98
00:08:25,269 --> 00:08:31,079
So if you've ever run a command that looks like this, then you've used PyPI, unbeknownst to you.

99
00:08:31,539 --> 00:08:37,289
PyPI is critical software in the Python ecosystem. So here's a question.

100
00:08:38,078 --> 00:08:45,329
When you install a package from PyPI, the official Python package repository, using pip or some other method,

101
00:08:45,519 --> 00:08:49,559
How do you know that the software that you were installing is not malware?

102
00:08:50,889 --> 00:08:54,599
And the answer is that you don't. You don't know it's not malware.

103
00:08:55,959 --> 00:09:03,358
The reason that you don't know is because the people that, Oh, can someone put their mic on mute?

104
00:09:05,350 --> 00:09:08,519
Cool, the reason that you don't know is because

105
00:09:09,850 --> 00:09:13,259
The PyPI, you know, administrators don't know.

106
00:09:14,050 --> 00:09:18,329
So let's talk a little bit about operating system package repositories.

107
00:09:19,569 --> 00:09:21,569
So the Debian package

108
00:09:22,029 --> 00:09:24,148
repository, the Debian project keeps

109
00:09:24,910 --> 00:09:28,980
25,000 packages in their repo for people to download

110
00:09:29,740 --> 00:09:32,609
over the Debian package manager, which is called APT.

111
00:09:33,189 --> 00:09:40,259
Each of those 25,000 packages has been manually reviewed or sponsored by a Debian core developer. So,

112
00:09:41,050 --> 00:09:48,508
there's kind of this community of developers that maintain the security and integrity of this 25,000 package large ecosystem.

113
00:09:49,209 --> 00:09:51,209
So PyPI,

114
00:09:51,339 --> 00:09:56,578
There are 5,000 file uploads every day to PyPI, and that number is only growing.

115
00:09:57,100 --> 00:10:03,959
So 5,000 file uploads a day versus 25,000 packages like the scale of the problem is just like too large for

116
00:10:05,470 --> 00:10:09,630
people to manually review every single upload that happens.

117
00:10:10,569 --> 00:10:14,128
So there's definitely a need to do some kind of automated screening here.

118
00:10:16,180 --> 00:10:22,559
Let's talk about the RfP. I also see some questions coming in. Oh, yes, it's being recorded.

119
00:10:23,920 --> 00:10:29,939
Cool. Are you advancing slides? Oh, there they are. I see some now. They weren't advancing before. Thank you. Yeah

120
00:10:30,580 --> 00:10:33,420
Cool. So the RFP has two milestones,

121
00:10:34,090 --> 00:10:38,009
with the overarching purpose of implementing these advanced security features.

122
00:10:38,920 --> 00:10:44,490
The first milestone is basically "implement The Update Framework" as a way to ensure that the files that

123
00:10:45,730 --> 00:10:47,410
the files and the packages that

124
00:10:47,410 --> 00:10:54,509
users download haven't been tampered with. So they are the same files and packages that the developers of these packages are uploading to PyPI.

125
00:10:55,150 --> 00:11:01,290
The Update Framework does a lot of really neat stuff and has been pretty widely adopted at this point by places like Cloudflare, Docker,

126
00:11:01,540 --> 00:11:03,540
Digital Ocean and others.

127
00:11:03,670 --> 00:11:09,329
And the idea of Milestone 1 is to protect users against compromises of PyPI mirrors,

128
00:11:10,180 --> 00:11:15,628
PyPIs own TLS termination, and content distribution infrastructure.

129
00:11:16,510 --> 00:11:19,470
PEP-458 has a lot of details about how it will do that.

130
00:11:20,020 --> 00:11:24,749
So if you are interested in learning more about Milestone 1 or The Update Framework

131
00:11:25,510 --> 00:11:31,530
Definitely go check out The Update Framework documentation or PEP-458. That's pretty much everything

132
00:11:31,530 --> 00:11:37,738
that I know about Milestone 1 and The Update Framework and this talk is actually titled "Automated Malware Detection in PyPI".

133
00:11:37,840 --> 00:11:42,360
So let's go ahead and talk about Milestone 2, which is what I actually submitted a proposal for.

134
00:11:45,490 --> 00:11:48,150
Cool, so in this RFP,

135
00:11:49,660 --> 00:11:56,670
the authors describe a system that needs to be extendable and work with open source software development practices.

136
00:11:57,310 --> 00:11:59,339
So effectively we want a crowdsource

137
00:12:00,130 --> 00:12:01,300
security.

138
00:12:01,300 --> 00:12:03,010
There's also some

139
00:12:03,010 --> 00:12:09,660
storage infrastructure that is needed to store information about these malware checks and also the results that these checks generate.

140
00:12:10,690 --> 00:12:15,239
These results need to be surfaced to administrators in a view.

141
00:12:16,210 --> 00:12:17,800
and

142
00:12:17,800 --> 00:12:19,719
There needs to be documentation.

143
00:12:19,720 --> 00:12:26,699
So, in a sense, what PyPI wants is their own single pane of glass for viewing and investigating security-

144
00:12:27,070 --> 00:12:29,070
relevant events.

145
00:12:30,520 --> 00:12:35,340
Cool. Another perspective on what they want is a SIEM. Right?

146
00:12:35,340 --> 00:12:43,079
They want to collect security relevant telemetry, scan for indicators of compromise with checks, and then extend the system to ingest different

147
00:12:43,270 --> 00:12:47,040
signals, so different threat feeds or different malware signatures.

148
00:12:47,560 --> 00:12:52,199
This is a SIEM. They want a SIEM built into PyPI. I know a couple of things about SIEMs.

149
00:12:52,810 --> 00:12:59,549
So with no freelance or consulting experience at my back, I dove head-first into writing what this proposal would be.

150
00:13:00,910 --> 00:13:02,140
 

151
00:13:02,140 --> 00:13:03,850
Much to my surprise

152
00:13:03,850 --> 00:13:05,820
my proposal was selected.

153
00:13:05,820 --> 00:13:10,859
This is an email from Ernest, the Director of Infrastructure for the Python Software Foundation, letting me know that

154
00:13:11,230 --> 00:13:14,730
they wanted to implement my design and that I would be working with another

155
00:13:15,430 --> 00:13:20,370
security firm to actually implement some of the malware checks that would be hooked into the system.

156
00:13:21,640 --> 00:13:23,020
cool

157
00:13:23,020 --> 00:13:25,829
So, any questions so far?

158
00:13:26,860 --> 00:13:30,089
I mean, this is just kind of the story about how this came about.

159
00:13:31,840 --> 00:13:36,000
So, let's talk a little bit about packing... the people yet so I'll let you know, okay.

160
00:13:40,150 --> 00:13:48,120
Awesome, so let's talk a bit about some packaging concepts because I feel like this audience might be mostly security engineers and maybe not

161
00:13:48,120 --> 00:13:51,120
super familiar with like software packaging ecosystem stuff

162
00:13:51,670 --> 00:13:52,839
so

163
00:13:52,840 --> 00:13:55,500
Fundamentally, there are three kinds of assets that we're trying to protect here:

164
00:13:56,260 --> 00:13:58,260
projects, releases, and files.

165
00:13:59,740 --> 00:14:06,209
This is a Python package that I actually have developed and maintained that's hosted on PyPI.

166
00:14:07,600 --> 00:14:11,159
Right before this call, I looked up how many projects are hosted on PyPI,

167
00:14:11,160 --> 00:14:11,860
and as of today

168
00:14:11,860 --> 00:14:18,779
It's two hundred and twenty two thousand five hundred and eighty something projects. A project is the top level

169
00:14:19,180 --> 00:14:22,468
organizational unit for this third party software hosted on PyPI.

170
00:14:23,320 --> 00:14:28,439
Projects have a name, a description, one or more authors or maintainers, and

171
00:14:28,900 --> 00:14:31,410
most importantly, they contain something called releases.

172
00:14:32,110 --> 00:14:34,919
So, releases are the next most granular

173
00:14:35,500 --> 00:14:42,570
unit in packaging. A release is simply a particular version of a package and a release contains something,

174
00:14:43,150 --> 00:14:45,150
contains release files.

175
00:14:45,760 --> 00:14:53,700
So here you can see that my sodapy package contains two release files, a wheel file, which is the distribution type, a built distribution,

176
00:14:54,350 --> 00:14:56,130
and a source file.

177
00:14:56,130 --> 00:15:02,839
When someone installs this package, they will install one of these files to run and execute my package.

178
00:15:04,140 --> 00:15:11,750
Um, so when we're talking about malware, the release files are typically the assets that people tend to focus on, as well as like

179
00:15:11,750 --> 00:15:13,750
releases when we talk about malware distribution.

180
00:15:13,750 --> 00:15:15,750
The automated malware detection system operates principally on these 3 assets in PyPI: Projects, Releases and Files.

181
00:15:16,320 --> 00:15:21,110
I'm gonna be talking about a system that operates on all three of these assets

182
00:15:21,900 --> 00:15:28,370
And then right now we're gonna talk about actually different attacks that the someone can perform on each of these types of assets.

183
00:15:29,640 --> 00:15:35,180
Also, the verdicts that the system generates (or IOCs, depending on what world you're coming from)

184
00:15:35,670 --> 00:15:40,699
will always be associated with exactly one of these assets via like a foreign key relationship.

185
00:15:42,600 --> 00:15:47,209
Cool, so the first attack is going to be on package names.

186
00:15:47,760 --> 00:15:51,439
(so on the package unit). A common tactic used by hackers

187
00:15:51,570 --> 00:15:58,970
is to simply create a project with a familiar or legitimate looking name and hope that someone accidentally installs it, right? So

188
00:15:59,490 --> 00:16:05,870
the legitimate dateutil module provides extensions to datetime, which is a Python standard library module,

189
00:16:06,630 --> 00:16:09,080
and it's actually already Python 3 compatible,

190
00:16:09,360 --> 00:16:16,639
but someone got really clever and decided to create a python3-dateutil module.

191
00:16:17,520 --> 00:16:21,379
And then jellyfish is also a legitimate Python module,

192
00:16:21,840 --> 00:16:29,180
but this package name is actually jellyfish spelled with an uppercase I and a lowercase L.

193
00:16:29,310 --> 00:16:32,779
So it looks like a widely adopted and legitimate package name

194
00:16:32,880 --> 00:16:38,600
What these two packages do is actually steal your SSH and GPG keys when you install them.

195
00:16:40,950 --> 00:16:47,030
These packages, dateutil is particularly insidious, or actually, let's go back to these package names.

196
00:16:47,670 --> 00:16:50,149
So in December,

197
00:16:50,820 --> 00:16:58,220
on December 1st of last year (2019) a German software developer named Lucas Martini discovered that these

198
00:16:58,650 --> 00:17:05,780
libraries were actually malware. He notified the PyPI security team. They investigated it and the same day they took both of these packages down.

199
00:17:07,349 --> 00:17:12,378
So thankfully python3-dateutil was actually only uploaded two days before this discovery was made,

200
00:17:12,689 --> 00:17:18,259
but the malicious jellyfish library had actually been live for nearly an entire year getting

201
00:17:18,679 --> 00:17:21,739
dozens of downloads every day from unsuspecting users.

202
00:17:22,980 --> 00:17:24,980
The other issue is that

203
00:17:26,010 --> 00:17:30,649
the official Debian repository actually does have a

204
00:17:30,870 --> 00:17:34,639
legitimate Python module called  python3-dateutil that

205
00:17:34,740 --> 00:17:41,390
users can install. So if for some reason someone wanted to install Python modules from Debian instead of from PyPI,

206
00:17:41,730 --> 00:17:45,649
they would actually install something called python3-dateutil,

207
00:17:45,840 --> 00:17:50,510
Which is actually just the legitimate dateutil module built with Python 3.

208
00:17:51,450 --> 00:17:55,039
So this was like a really insidious attack and that happened just four months ago.

209
00:17:55,039 --> 00:17:58,669
This actually happened while I was working on this malware detection system,

210
00:17:58,669 --> 00:18:03,439
so these typo-squatted and name-squatted malicious packages are cropping up all the time.

211
00:18:06,690 --> 00:18:14,059
Right, oh, I also want to talk a little bit about kind of creative mitigations people are taking against typo-squatting and name-squatting.

212
00:18:15,510 --> 00:18:16,890
So

213
00:18:16,890 --> 00:18:19,189
you can't really apply like

214
00:18:20,370 --> 00:18:22,879
something like an edit-distance filter for

215
00:18:23,640 --> 00:18:28,369
packages and then have a small-edit distance away from, you know, legitimate package names,

216
00:18:29,460 --> 00:18:35,000
because you're gonna generate a lot of verdicts if you do that. There are literally thousands of projects that have that have similar names.

217
00:18:35,640 --> 00:18:40,520
So a more fine-grained heuristic would be required to really address this problem effectively

218
00:18:41,399 --> 00:18:47,899
But an even more clever thing that people are doing like, the PyPI security team and also independent

219
00:18:48,570 --> 00:18:52,129
security research firms is to preemptively name-squat

220
00:18:52,649 --> 00:18:59,658
Packages that are like potentially typo-squatted or other package names that might be susceptible to abuse.

221
00:19:00,000 --> 00:19:02,270
So by pre-emptive name-squatting, I mean,

222
00:19:02,270 --> 00:19:04,270
they just legitimately register

223
00:19:04,409 --> 00:19:11,419
empty projects with misspelled names or names that are like prepended with python- or like python3-

224
00:19:13,169 --> 00:19:15,169
That's pretty cool...

225
00:19:15,809 --> 00:19:16,980
Alright

226
00:19:16,980 --> 00:19:18,929
Let's talk a bit about setup.py.

227
00:19:18,929 --> 00:19:25,069
So as I mentioned earlier, there are two a principle package distribution formats for Python: built distributions and source

228
00:19:25,799 --> 00:19:32,329
distributions. Wheel is an example of a built distribution. Built distributions are exactly what they sound like. You install them on your system.

229
00:19:32,360 --> 00:19:33,689
They're already built.

230
00:19:33,690 --> 00:19:37,429
When you install them you basically just download an archive file and then the

231
00:19:37,980 --> 00:19:44,179
package manager that you're using moves the built files into the right locations so that when you call them, they're executed.

232
00:19:44,640 --> 00:19:47,329
They don't execute any additional code on your system.

233
00:19:48,030 --> 00:19:50,030
and are generally

234
00:19:50,340 --> 00:19:52,340
considered the more modern, newer, preferred

235
00:19:52,620 --> 00:19:55,188
packaging format for package developers.

236
00:19:55,740 --> 00:19:59,419
An older distribution format is source distributions.

237
00:19:59,700 --> 00:20:06,380
They actually do require an extra build step on the user environment after they're downloaded which the developer of the package actually

238
00:20:06,630 --> 00:20:10,819
controls. So I'm developing a package. I want to put some malware in it.

239
00:20:10,820 --> 00:20:13,760
I can actually just inject it into the setup.py file.

240
00:20:13,760 --> 00:20:20,329
which is required for source distribution. setup.py is the build instructions that are executed on the target machine.

241
00:20:20,789 --> 00:20:27,979
So this is an insidious attack vector because it's basically giving developers of packages like a backdoor for remote code execution

242
00:20:28,440 --> 00:20:35,360
on whoever downloads their packages machines, and like, just on the install. So when someone does `pip install whatever`

243
00:20:36,870 --> 00:20:39,139
when that install operation happens,

244
00:20:39,659 --> 00:20:45,559
me, as the package developer, can just run whatever kind of command I want if I hook in this install command.

245
00:20:45,830 --> 00:20:52,460
So here I've hooked into the install command this post-install class and then in this post-install class

246
00:20:52,679 --> 00:20:56,029
I'm, you know, running a reverse shell and then installing my malware.

247
00:20:56,730 --> 00:21:03,349
And this is like something that package developers have control over and a way for them to like remotely execute code on your machine. So,

248
00:21:03,900 --> 00:21:07,009
like I mentioned, Wheel kind of mitigates this attack path,

249
00:21:07,010 --> 00:21:14,119
but a lot of package maintainers are still uploading packages with source distributions that execute arbitrary code on install.

250
00:21:19,020 --> 00:21:20,129
Cool

251
00:21:20,130 --> 00:21:21,150
so

252
00:21:21,150 --> 00:21:23,719
The last thing I talked about is how to compromise

253
00:21:24,299 --> 00:21:30,529
the actual release files. The final attack path I'll talk about is compromising releases themselves.

254
00:21:30,720 --> 00:21:36,579
So this is a story actually from another programming ecosystem, from the node ecosystem

255
00:21:37,160 --> 00:21:44,889
But it doesn't mean that it can't happen in the Python ecosystem. So let's consider a not-so-hypothetical scenario: a busy software engineer

256
00:21:45,710 --> 00:21:47,740
not-so-hypothetically called Dominic Carr

257
00:21:48,800 --> 00:21:50,800
Is approached by a seemingly-

258
00:21:51,590 --> 00:21:55,510
legit developer not-so-hypothetically called right9control

259
00:21:56,300 --> 00:22:02,589
And the seemingly legit developer offers to take over a somewhat popular package for the busy package maintainer.

260
00:22:04,040 --> 00:22:06,040
This package is called event-stream.

261
00:22:06,470 --> 00:22:12,939
Ownership of the package is transferred. The new owner pushes a new release to the package. This new release contains malware.

262
00:22:13,460 --> 00:22:18,069
Thousands are affected. Chaos, alarm, and this really depressing Github issue, ensue.

263
00:22:19,340 --> 00:22:23,139
Owners and maintainers of open source packages are an extremely porous attack surface,

264
00:22:23,780 --> 00:22:25,129
and

265
00:22:25,130 --> 00:22:28,270
even if an owner doesn't voluntarily cede control of

266
00:22:29,000 --> 00:22:31,119
their package to someone they've never met before,

267
00:22:32,240 --> 00:22:34,630
there are other ways that people can attack package maintainers.

268
00:22:35,690 --> 00:22:40,420
So for example, PyPI only enable two-factor authentication in June of last year.

269
00:22:40,520 --> 00:22:45,339
So two-factor authentication has only been possible to turn on for about nine months at this point,

270
00:22:45,340 --> 00:22:45,840
and it's not required.

271
00:22:46,910 --> 00:22:53,619
So package maintainers that don't have this turned on are still susceptible to things like credential stuffing attacks or brute force password attacks

272
00:22:54,500 --> 00:22:56,589
Just because it hasn't happened yet doesn't mean it won't.

273
00:22:59,330 --> 00:23:01,330
Malware there's malware everywhere

274
00:23:02,840 --> 00:23:09,579
And I also don't want to disparage just really quickly too much...Cristina, I have a question:

275
00:23:11,570 --> 00:23:15,850
are these malware packages also found with OSS?

276
00:23:16,520 --> 00:23:20,770
Okay. So PyPI only hosts open source software. So yes.

277
00:23:21,590 --> 00:23:23,980
I'm only talking about open source software right now.

278
00:23:28,580 --> 00:23:35,139
Okay, so I don't want to disparage the hard-working army of almost entirely volunteers trying to keep PyPI users safe.

279
00:23:36,230 --> 00:23:38,469
You know, there's a lot of hard work going into

280
00:23:39,470 --> 00:23:43,300
Manually screening PyPI packages for malware, but there's just so many

281
00:23:44,360 --> 00:23:48,399
threat vectors out there, and so much malware out there, most of which we probably don't even know,

282
00:23:48,530 --> 00:23:51,189
that there really is a need for like some kind of automation here.

283
00:23:53,660 --> 00:24:01,059
Cool. So when I was putting together this proposal, I had to roll up my sleeves and do some web application development.

284
00:24:01,190 --> 00:24:04,929
Um, I haven't done web app development in a really long time.

285
00:24:04,929 --> 00:24:07,719
So I had to kind of re-familiarize myself with like web app

286
00:24:08,179 --> 00:24:13,299
architecture, and I'll just kind of give a little bit of an overview of the architecture of the software

287
00:24:13,300 --> 00:24:17,529
that powers PyPI, which is called warehouse. So warehouse is also kind of new software.

288
00:24:17,540 --> 00:24:21,129
It was rolled out as the PyPI back-end in April 2018.

289
00:24:21,980 --> 00:24:26,079
It was written from the ground up. It uses pyramid, which is a Python web framework,

290
00:24:27,020 --> 00:24:30,759
SQLAlchemy as the ORM or database abstraction layer.

291
00:24:31,460 --> 00:24:33,460
The back-end is Postgres.

292
00:24:33,950 --> 00:24:35,950
Front-end uses Jinja2 templates

293
00:24:36,290 --> 00:24:39,428
Pretty standard. And then if you're developing locally,

294
00:24:40,040 --> 00:24:43,688
docker-compose can be used to bring up a bunch of different docker containers,

295
00:24:44,480 --> 00:24:47,349
and manages the connections between those containers.

296
00:24:48,170 --> 00:24:54,099
Warehouse also is integrated with Celery. Celery is a distributed task queue implementation for Python web apps,

297
00:24:54,830 --> 00:24:56,149
used for

298
00:24:56,150 --> 00:24:57,170
asynchronously

299
00:24:57,170 --> 00:24:59,259
executing long-running processes,

300
00:24:59,870 --> 00:25:05,530
or things like batch jobs. So that was this is the web app that

301
00:25:06,200 --> 00:25:08,200
our SIEM has to live in.

302
00:25:08,420 --> 00:25:10,040
So,

303
00:25:10,040 --> 00:25:12,040
going back to these types of checks,

304
00:25:13,130 --> 00:25:18,999
when I'm thinking about like the elements of my proposal and these different attack vectors, I kind of see two

305
00:25:19,730 --> 00:25:26,770
patterns emerging. Like there are two places where we want to be looking for suspicious activity. One is on discrete singular events

306
00:25:26,770 --> 00:25:30,280
So when files are uploaded or new projects are created.

307
00:25:31,250 --> 00:25:38,829
And the other is kind of like a more high context like sequence of behaviors or patterns, so

308
00:25:39,679 --> 00:25:44,169
for example, a maintainer transfers ownership of a package to a low reputation user

309
00:25:44,600 --> 00:25:48,188
whose IP address is coming from like a VPN and

310
00:25:48,710 --> 00:25:51,790
whose account was created like in the last 24 hours, right?

311
00:25:52,400 --> 00:25:53,630
No

312
00:25:53,630 --> 00:25:56,589
None of these events in isolation is particularly suspicious

313
00:25:57,110 --> 00:25:58,490
but like

314
00:25:58,490 --> 00:26:01,750
given all of these facts and all of the context surrounding like the

315
00:26:02,360 --> 00:26:04,360
package transfer of ownership

316
00:26:04,610 --> 00:26:08,620
this is maybe something that we would want to like raise and alert for.

317
00:26:10,070 --> 00:26:14,290
So yeah, there are two kinds of checks that the system needs to support. It needs to support

318
00:26:14,930 --> 00:26:20,499
hooks into events, which are events that happened at discrete times and then it also needs to

319
00:26:22,220 --> 00:26:28,569
be able to look at patterns and behaviors and do these kind of investigations in a scheduled way.

320
00:26:30,470 --> 00:26:33,339
Cool so event-based checks

321
00:26:33,980 --> 00:26:38,230
are useful, like I said, for low-context heuristics for identifying malware.

322
00:26:38,809 --> 00:26:39,639
For example,

323
00:26:39,640 --> 00:26:40,490
as soon as the file is

324
00:26:40,490 --> 00:26:42,910
uploaded, you do something like send that file to VirusTotal,

325
00:26:42,980 --> 00:26:49,420
to run it against a few different antivirus engines and then see if any of them report that file as malware.

326
00:26:49,970 --> 00:26:53,530
You could also write some YARA rules to look for malicious code signatures.

327
00:26:54,800 --> 00:26:58,928
Upload time is also a good time to do things like running static or dynamic analyzers.

328
00:26:59,870 --> 00:27:03,188
What kind of tracking is used for hash values of submitted files?

329
00:27:04,610 --> 00:27:09,639
So right now, I'm gonna get into some of the checks that are already instrumented,

330
00:27:10,670 --> 00:27:14,170
but by hash file values presumably you mean, like,

331
00:27:14,900 --> 00:27:18,000
just like an md5 of files or?

332
00:27:19,730 --> 00:27:23,500
Like yeah, so that when the files are uploaded they are, you know,

333
00:27:23,500 --> 00:27:27,579
Like an md5 and a sha-256 is computed and that's used actually

334
00:27:27,580 --> 00:27:34,240
It's the primary key in the warehouse back-end for those files, but we're not submitting those file hashes to VirusTotal yet.

335
00:27:34,820 --> 00:27:36,820
Yet.

336
00:27:38,150 --> 00:27:39,650
Cool

337
00:27:39,650 --> 00:27:41,000
So yeah at upload time

338
00:27:41,000 --> 00:27:45,280
There's a number of things you can do to a file or a project or a release

339
00:27:45,559 --> 00:27:50,199
A number of scans or checks that you could run to figure out if something fishy is happening and

340
00:27:50,750 --> 00:27:56,079
one of those scans that we actually rolled out the system with is actually a couple of different YARA rules.

341
00:27:57,530 --> 00:27:59,530
So right now we have some YARA rules

342
00:28:00,260 --> 00:28:05,559
that are instrumented to look for sketchy things in the setup.py file

343
00:28:06,320 --> 00:28:10,480
Some of the sketchy things we're looking for are new processes being spawned

344
00:28:11,450 --> 00:28:16,669
Like the subprocess module being imported for example, or people running like exec or evaluation

345
00:28:17,459 --> 00:28:18,839
statements,

346
00:28:18,839 --> 00:28:24,078
making network calls, like a call to a command-and-control server, is a pretty classic malware move.

347
00:28:24,179 --> 00:28:27,018
So we're looking for outbound network calls

348
00:28:28,320 --> 00:28:30,208
Deserialization

349
00:28:30,209 --> 00:28:34,909
refers to serialized or obfuscated code that could contain a malicious payload, so

350
00:28:36,029 --> 00:28:42,529
A lazy hacker might base4 encode a reverse shell in setup.py

351
00:28:42,599 --> 00:28:46,729
so if there's any importing of like pickling or

352
00:28:47,789 --> 00:28:53,118
base64 decoding in setup.py, we're raising alarm bells for that, and then metaprogramming.

353
00:28:54,209 --> 00:28:58,789
Metaprogramming is another obfuscation strategy that hackers used to access Python

354
00:28:59,039 --> 00:29:03,169
internals without actually referencing like literal strings like exec or eval,

355
00:29:03,499 --> 00:29:05,838
so the first bullet point is actually

356
00:29:06,059 --> 00:29:13,218
matching literal strings like exec or eval and then the last bullet point is looking for things that are the libraries that are importing that

357
00:29:13,469 --> 00:29:15,469
functionality to see if that's getting called.

358
00:29:15,929 --> 00:29:18,918
The bad news about this approach is that it's always going to be an arms race.

359
00:29:19,379 --> 00:29:23,178
So you can only put malware signatures like a string match

360
00:29:23,399 --> 00:29:27,257
into a YARA rule once you've already identified that as a way that

361
00:29:27,359 --> 00:29:30,168
hackers are using to like inject malware  into setup.py.

362
00:29:30,809 --> 00:29:33,288
And there's also a lot of legitimate reasons

363
00:29:33,289 --> 00:29:37,819
Someone would want to spawn a process or make a network call in setup.py.

364
00:29:38,579 --> 00:29:45,799
So one example is we turned this system on in the test PyPI server, which is found at test.pypi.org and

365
00:29:46,739 --> 00:29:52,249
psycopg, which is actually like the official Python client library for Postgres,

366
00:29:53,429 --> 00:30:00,949
raised a verdict, because it does this like subprocess spawning when you install it.

367
00:30:01,529 --> 00:30:03,389
um

368
00:30:03,389 --> 00:30:09,438
Let's see, oh there's also a lot of Python packages that install random third-party software when you download them, which like, as

369
00:30:10,139 --> 00:30:13,878
As a security person, to me sounds like malware, but, you know,

370
00:30:13,879 --> 00:30:17,509
there are a lot of users that legitimately rely on this functionality.

371
00:30:17,609 --> 00:30:23,059
So like if you're installing some kind of DevOps software and you someone in their

372
00:30:23,879 --> 00:30:29,629
Setup file downloading like other software with their Python package pip will be like, okay

373
00:30:29,630 --> 00:30:35,359
I'll install this package, but the developer also wants me to install Terraform and download that

374
00:30:35,660 --> 00:30:37,660
So, I'm gonna go download Terraform now.

375
00:30:38,280 --> 00:30:44,869
So this just raised...This just generated a ton of verdicts when we enabled it and like we need to really hone

376
00:30:45,060 --> 00:30:50,149
What these YARA rules are and fine-tune them so that we get a better signal-to-noise ratio.

377
00:30:52,470 --> 00:30:55,130
Cool uh scheduled checks

378
00:30:56,730 --> 00:30:58,140
So

379
00:30:58,140 --> 00:31:00,140
scheduled checks are

380
00:31:00,300 --> 00:31:06,379
Useful for analyzing things that where we need like a lot of context surrounding certain behaviors to be able to make a determination

381
00:31:06,750 --> 00:31:12,800
About whether something could be potentially malicious or not. So you would use a scheduled check to

382
00:31:14,340 --> 00:31:18,169
Like determine if a sequence of actions is suspicious.

383
00:31:18,170 --> 00:31:22,399
So like an example of some suspicious actions would be a like low reputation user

384
00:31:22,740 --> 00:31:26,780
With a recently created user account and a sketchy IP address

385
00:31:27,810 --> 00:31:29,399
Creates a package name

386
00:31:29,400 --> 00:31:36,680
that is a one character edit distance away from a very popular package name, or the maintainer of a popular package

387
00:31:36,870 --> 00:31:41,599
Disables two-factor authentication and then transfers the ownership of his popular package to another user.

388
00:31:42,810 --> 00:31:46,279
There are a lot of these kind of like reputation base checks that we could integrate

389
00:31:46,830 --> 00:31:54,590
but so far the only check that we have integrated for user behavior, which is actually like a higher signal than the YARA rule is

390
00:31:55,560 --> 00:31:59,749
using the package turnover as the heuristic so

391
00:32:00,300 --> 00:32:01,740
This was implemented

392
00:32:01,740 --> 00:32:08,510
algorithmically. It basically just queries the warehouse database to look for new releases every 24 hours and then

393
00:32:08,670 --> 00:32:14,899
Further queries those releases and the packages associated with them to look for  maintainership

394
00:32:15,540 --> 00:32:19,550
transfers or package ownership changes in the past 24 hours.

395
00:32:24,000 --> 00:32:27,540
All right, um

396
00:32:30,550 --> 00:32:32,550
Cool

397
00:32:33,370 --> 00:32:39,329
So we've talked a little bit about the types of checks that are implemented and

398
00:32:40,240 --> 00:32:45,030
Are running but let's talk a little bit about the infrastructure and actually how they're running so

399
00:32:45,820 --> 00:32:52,770
Either an event happens like a new project or release or release file is created or it's noon on a Monday

400
00:32:52,780 --> 00:32:54,780
so it's like a schedule thing or

401
00:32:55,300 --> 00:33:01,469
The system even has the capability for an administrator to press a button and manually trigger a run of a particular check

402
00:33:01,990 --> 00:33:06,510
The check run happens it populates a new table in the warehouse database called verdicts.

403
00:33:07,450 --> 00:33:14,670
There's an administrator view that reads from this verdicts table and surfaces these verdicts for manual review and then

404
00:33:15,640 --> 00:33:21,929
This admin can just kind of like look at this window and go down the list and investigate the verdicts.

405
00:33:22,390 --> 00:33:24,780
They can either mark those verdicts as benign

406
00:33:25,630 --> 00:33:29,699
and they kind of like are eliminated from this view or "triaged" or

407
00:33:29,950 --> 00:33:36,360
if their investigation yields that a verdict is legitimate they can then like take further actions like contact a

408
00:33:37,059 --> 00:33:40,439
package manager or take down a malicious package

409
00:33:41,170 --> 00:33:45,509
So here I have just kind of like in black text "check runs"

410
00:33:45,870 --> 00:33:50,968
So let's actually investigate more like what that entails. So the mechanics of a check run

411
00:33:51,250 --> 00:33:55,170
For hooked checks involve hooking into the SQLAlchemy database session

412
00:33:55,690 --> 00:33:57,960
And listening for object creation events.

413
00:33:57,960 --> 00:34:04,980
So whenever an object is created in the session, a database query is kicked off that then looks for

414
00:34:05,620 --> 00:34:12,899
Checks that operate on that associated object and then it queues up of all of those checks for the object and runs them

415
00:34:13,359 --> 00:34:15,359
in like this distributed

416
00:34:15,520 --> 00:34:20,429
asynchronous way, which populates the verdicts table, and then those verdicts are surfaced to the admin

417
00:34:31,690 --> 00:34:33,690
Olga, can you mute your mic?

418
00:34:38,270 --> 00:34:40,270
Can I mute Olga?

419
00:34:44,960 --> 00:34:47,620
Should be able to okay cool

420
00:34:50,389 --> 00:34:52,389
Awesome, thank you!

421
00:34:53,120 --> 00:34:57,249
So this is how the Celery task queue works, um

422
00:34:59,060 --> 00:35:01,060
Developing new checks

423
00:35:01,700 --> 00:35:05,019
So you are a software developer or a security engineer

424
00:35:05,020 --> 00:35:11,709
You want to improve the security of PyPI. You too can contribute checks! All of the stuff is open-source, and it's well documented!

425
00:35:11,960 --> 00:35:15,280
So you just download the warehouse codebase. Bring everything up with docker.

426
00:35:15,950 --> 00:35:20,288
When you go to develop your new check, there's actually a base class that you can just inherit from and

427
00:35:20,990 --> 00:35:24,459
Writing a check is as easy as just implementing a method in this base class

428
00:35:26,000 --> 00:35:31,630
Then to enable this check you have to toggle like an environment variable because by default in your development environment

429
00:35:31,970 --> 00:35:34,899
these malware checks won't run. They'll actually just print

430
00:35:35,870 --> 00:35:38,950
The information about the check anytime  a hook happens.

431
00:35:39,620 --> 00:35:42,940
So just toggle this environment variable to actually run the checks.

432
00:35:43,490 --> 00:35:45,580
There's a script that you can then use to

433
00:35:45,740 --> 00:35:50,649
Deploy your checks to the database and then when you actually bring up the app, you can just log into

434
00:35:51,410 --> 00:35:59,170
The app admin to enable it and then perform whatever kind of event is required to actually trigger your check. So

435
00:36:00,500 --> 00:36:07,030
This is kind of the life cycle for if you're, you know, a developer and you want to contribute this malware check how it will

436
00:36:07,030 --> 00:36:08,360
work for you.

437
00:36:08,360 --> 00:36:10,809
The first thing you should do is actually open a Github issue.

438
00:36:11,390 --> 00:36:12,609
so you let like,

439
00:36:12,610 --> 00:36:13,760
you know, the PyPI

440
00:36:13,760 --> 00:36:19,180
Admins and then the broader Python community know that like you want to implement a malware check and get feedback

441
00:36:19,700 --> 00:36:21,700
from them about that check.

442
00:36:22,280 --> 00:36:28,090
If the feedback is good and people are excited about your proposed check. You can go ahead and open a pull request on Github.

443
00:36:29,180 --> 00:36:35,859
When the admins have a chance to review your pull requests, they'll deploy probably to the test PyPI instance first and then to production.

444
00:36:36,590 --> 00:36:42,910
After they deploy it, they'll enable it, do an evaluation run, review the verdicts, make sure there's a good signal-to-noise ratio,

445
00:36:44,090 --> 00:36:48,940
And then either give you feedback about improving the signal-to-noise ratio and tuning the check,

446
00:36:49,300 --> 00:36:54,599
Um leave it as is, or if they decide that it's just like really noisy and not useful, there's the capability to

447
00:36:55,480 --> 00:36:57,570
Wipe out the check or revert it

448
00:36:59,230 --> 00:37:03,480
So, I don't know if this will work but we'll go ahead and give this a try

449
00:37:04,330 --> 00:37:09,000
We should be able to log in to the test admin

450
00:37:10,480 --> 00:37:12,480
and

451
00:37:14,260 --> 00:37:17,969
Like actually see the views that I developed.

452
00:37:20,380 --> 00:37:22,829
Maybe not. So just a second.

453
00:37:28,960 --> 00:37:31,800
No, I think I have to share a new window.

454
00:38:00,369 --> 00:38:08,129
We actually have two really good questions on the chat so while you're doing trying to show the other screen

455
00:38:09,910 --> 00:38:13,440
You can answer those questions actually there. Yeah. Can you read them for me actually?

456
00:38:14,109 --> 00:38:21,989
yeah, so the first one from Reza is: What kind of check is used to detect already popular files with an owner that may

457
00:38:21,990 --> 00:38:27,718
have gone rogue or had their account compromised? And then as a secondary question

458
00:38:27,720 --> 00:38:33,569
is: Are files immediately deleted or placed in a quarantine?

459
00:38:34,180 --> 00:38:36,930
Yeah, so I'll answer the second question first.

460
00:38:36,930 --> 00:38:42,868
There's no kind of like automated actions happening as a result of these checks running and the verdicts being generated.

461
00:38:43,240 --> 00:38:47,729
An administrator has to manually review the verdict,

462
00:38:48,160 --> 00:38:51,538
and then review the package or the release file or whatever

463
00:38:51,539 --> 00:38:57,268
the verdict is associated with to actually confirm that it's malware, and then the administrator at that point can decide what

464
00:38:57,670 --> 00:39:01,920
subsequent actions to take. So that could be taking down the package if it's determined to be malicious.

465
00:39:01,920 --> 00:39:06,420
It can be reaching out to the package maintainer if there's like something fishy going on with their user account.

466
00:39:07,239 --> 00:39:12,689
But right now there's no automated stuff happening beyond the check running and the verdict being generated.

467
00:39:14,099 --> 00:39:20,038
What kind of check is used for already popular files with an owner that may have gone rogue?

468
00:39:20,829 --> 00:39:27,209
Ok, so right now the only two checks that we have instrumented are the ones that I described so I think like a really good

469
00:39:27,430 --> 00:39:31,980
Check to be implemented that I really wanted to have rolled out when we first rolled out the system

470
00:39:31,980 --> 00:39:33,789
But like we just kind of ran out of time and money,

471
00:39:33,789 --> 00:39:40,679
So if someone in the open-source community wants to contribute this that would be great, is uploading checks to VirusTotal. I think

472
00:39:41,049 --> 00:39:44,369
getting the detections from VirusTotal would be like a really useful signal

473
00:39:45,279 --> 00:39:49,199
for determining if there's like something that's known malware is in a package,

474
00:39:50,230 --> 00:39:56,249
or if they have their account compromised. So if they have their account compromised, they can hopefully reach out to the

475
00:39:56,769 --> 00:39:59,997
PyPI security team to let them know their account has been compromised, or

476
00:40:00,279 --> 00:40:06,238
the package ownership check actually looks for like suspicious behavior around transferring package ownership

477
00:40:06,819 --> 00:40:13,798
to newly created users. So there is something in place for that and then that looks like

478
00:40:15,729 --> 00:40:23,249
That's one question the other question is from Greg. Is there a way for end users of a package to report suspicious behavior of a

479
00:40:23,769 --> 00:40:30,299
downloaded library? So you can sort of have a community rating for the download package. I think you answered that but go ahead.

480
00:40:30,609 --> 00:40:35,848
Yeah, I think that is actually like a really great. So did I stop screen sharing?

481
00:40:37,119 --> 00:40:42,688
Or can I stop? Okay cool. I'm going to show the other screen because I got this worked out.

482
00:40:44,229 --> 00:40:46,229
Let's see

483
00:40:46,539 --> 00:40:50,429
This one. Oh, wow. All right, you guys see that screen now?

484
00:40:53,229 --> 00:40:54,479
Awesome, okay

485
00:40:54,479 --> 00:41:01,019
So I'll answer this other question then we'll do a tour of the admin. There currently is a way for end users to report

486
00:41:01,329 --> 00:41:01,829
like,

487
00:41:01,829 --> 00:41:03,430
you know, security

488
00:41:03,430 --> 00:41:08,549
vulnerabilities to PyPI or packages that they think are suspicious and that's just to reach out to the PyPI security team.

489
00:41:08,549 --> 00:41:12,419
I think it's just security@pypi,  or security@python.

490
00:41:13,479 --> 00:41:18,299
You can look this up slash if you give me a couple of minutes, I can find the right email alias for you.

491
00:41:18,489 --> 00:41:24,448
But there's a team of mostly volunteers dedicated to receiving these inbound requests and triaging them.

492
00:41:25,929 --> 00:41:29,729
So for community ratings, there is something called SourceRank,

493
00:41:30,189 --> 00:41:32,939
which I recommend that you check out. One of the

494
00:41:33,369 --> 00:41:33,869
ideas

495
00:41:33,869 --> 00:41:38,098
I had for malware checks that, again, has not been implemented yet because it's really new system,

496
00:41:38,559 --> 00:41:45,329
would be integrating that kind of signal, like reputation information, from SourceRank and then using it to

497
00:41:46,119 --> 00:41:52,828
raise verdicts based on suspicious behavior. So that would be like an example of like a high-context, probably a schedule check.

498
00:41:54,459 --> 00:41:57,808
How about creating a virtual environment that does code coverage analysis?

499
00:41:58,449 --> 00:42:05,789
Yeah, static and dynamic analysis would be great checks to integrate and I encourage you all to go out and write these checks

500
00:42:06,099 --> 00:42:08,099
because we need that.

501
00:42:09,099 --> 00:42:13,410
Cool. Oh, and it looks like Ernest is actually here. Thanks Ernest!

502
00:42:13,449 --> 00:42:19,019
There's a lot of people on this call that probably know more about Python packaging ecosystem insecurity than I do

503
00:42:19,140 --> 00:42:24,328
So maybe when I'm done showcasing this UI we can cede the floor to them for a few seconds

504
00:42:24,940 --> 00:42:28,409
to add anything that I missed or like provide a different perspective.

505
00:42:29,829 --> 00:42:32,879
Cool. So this is what the UI looks like.

506
00:42:33,760 --> 00:42:37,169
There are two new sections added to the warehouse admin.

507
00:42:38,230 --> 00:42:40,230
That I added as part of this work.

508
00:42:40,470 --> 00:42:42,480
One is the check administration interface

509
00:42:42,490 --> 00:42:49,290
And this is where admins can go to do things like turn on checks or run evaluations when a new check is becoming enabled.

510
00:42:49,690 --> 00:42:52,799
So this is an example of a scheduled check. You get information

511
00:42:52,900 --> 00:42:57,270
about which version of this particular check it is, what the schedule it runs on is.

512
00:42:57,430 --> 00:43:01,740
Looks like this is the check that runs every day at midnight, and when it was created.

513
00:43:03,150 --> 00:43:07,200
This check is enabled which means I can do things like manually trigger an evaluation

514
00:43:07,540 --> 00:43:10,409
but if we decide that the check isn't useful we can

515
00:43:11,049 --> 00:43:17,609
Move it to wiped out, for example. When you checked our first deployed though, they are automatically in the "disabled" state.

516
00:43:19,030 --> 00:43:21,929
The other interface is this verdicts admin.

517
00:43:22,480 --> 00:43:26,969
And this is all of like the IOCs basically from these checks.

518
00:43:27,130 --> 00:43:32,940
so most of these are coming from the YARA rules check, which is the SetupPatterns check. You can go ahead and

519
00:43:33,490 --> 00:43:36,419
investigate this fanfic fair object

520
00:43:37,690 --> 00:43:39,690
to see why this

521
00:43:39,730 --> 00:43:41,730
why this verdict was raised.

522
00:43:41,859 --> 00:43:47,159
and in the message, you can actually get the information that there's a process spawn in setup and then

523
00:43:47,770 --> 00:43:50,549
Information about where this process spawn is happening.

524
00:43:50,890 --> 00:43:56,098
If I were an admin and I were to manually go investigate what's going on with this package

525
00:43:56,099 --> 00:43:58,709
I could do things like, see who uploaded it

526
00:43:59,770 --> 00:44:02,280
Take a look at what it looks like from the user perspective

527
00:44:02,349 --> 00:44:07,048
If I were to download this package, download it myself and manually inspect the source code.

528
00:44:07,359 --> 00:44:12,149
And then once I take these actions go ahead and decide that this is actually fine.

529
00:44:12,880 --> 00:44:17,730
Rhere's nothing wrong with this. Or if something is wrong, flag it as a threat and

530
00:44:18,339 --> 00:44:22,409
Then it is removed from the default view which shows us only

531
00:44:23,109 --> 00:44:25,109
verdicts that need to be reviewed.

532
00:44:26,380 --> 00:44:29,460
Cool so, I think I already,

533
00:44:30,099 --> 00:44:36,419
Unfortunately closed out of my presentation, but I have a couple more slides, let me see if I can go back to that.

534
00:44:37,180 --> 00:44:40,290
And we have one more question from PxMx:

535
00:44:42,100 --> 00:44:48,959
Do the checks have any sort of priority or confidence. For example, Check A might be higher confidence than Check B.

536
00:44:49,200 --> 00:44:52,200
So the admins will review results from Check A first.

537
00:44:54,130 --> 00:44:55,270
Yeah

538
00:44:55,270 --> 00:45:00,270
So and then never mind I see confidence so that the confidence isn't what you think it is, unfortunately.

539
00:45:01,420 --> 00:45:03,420
Hold on a sec

540
00:45:04,900 --> 00:45:09,570
This thing cool, so yeah the confidence and

541
00:45:11,830 --> 00:45:13,569
The

542
00:45:13,570 --> 00:45:15,570
classification are

543
00:45:15,580 --> 00:45:18,630
flags that the check developers actually

544
00:45:19,750 --> 00:45:26,669
Instrument, not the admins. So the person who is contributing the check is supposed to be providing the signal for how

545
00:45:27,970 --> 00:45:31,408
high confidence or high fidelity they think that check is

546
00:45:32,200 --> 00:45:36,540
And I think that that is actually a weakness of the system. I think that, over time

547
00:45:36,550 --> 00:45:38,520
And again, this is the new system

548
00:45:38,520 --> 00:45:42,509
But I think there needs to be a way to kind of do like a meta analysis of all of these verdicts

549
00:45:43,090 --> 00:45:44,740
and actually

550
00:45:44,740 --> 00:45:52,529
see which verdicts from which checks were actually surfacing like legitimate threats versus which ones were noisy and then

551
00:45:52,810 --> 00:45:58,139
Adjust those values accordingly, but right now those values are set just by the check developer.

552
00:45:58,240 --> 00:46:04,979
So for the YARA rules check, for example, if like in setup.py someone is importing the os module

553
00:46:04,980 --> 00:46:09,360
I think that is set as a low-confidence, low-fidelity

554
00:46:10,390 --> 00:46:11,650
indicator.

555
00:46:11,650 --> 00:46:17,010
But if someone is importing like the sub-process module the developer decided that that would be like a high-

556
00:46:17,530 --> 00:46:20,009
confidence, high-fidelity indicator.

557
00:46:21,790 --> 00:46:26,610
Cool so, do you guys see my presentation again? No, go ahead

558
00:46:26,790 --> 00:46:31,229
Like I guess unshare and then share again. See if it allows you.

559
00:46:31,870 --> 00:46:33,870
Okay

560
00:46:43,410 --> 00:46:48,618
Awesome cool. So everything I talked about is actually documented. I'm in

561
00:46:49,319 --> 00:46:54,469
The warehouse docks everything except the Guatemala vacation stuff at the beginning. So go ahead and check that out

562
00:46:55,890 --> 00:47:02,868
this all of this code was finally merged a couple of weeks ago in one massive pull request of

563
00:47:03,359 --> 00:47:07,249
4,000 lines. We wrote a SIEM integrated into PyPI in 4,000 lines of code.

564
00:47:07,980 --> 00:47:12,469
Which leads me to some alternative title slides for this talk: How to build a custom SIEM in

565
00:47:13,079 --> 00:47:18,949
4174 lines of code or less! or How to quit your big tech startup and bootstrap your own startup

566
00:47:20,369 --> 00:47:21,050
So yeah

567
00:47:21,050 --> 00:47:28,339
If you guys have any more questions or comments or questions for other people that know more about the Python packaging ecosystem or Python

568
00:47:28,500 --> 00:47:30,500
security that I do

569
00:47:30,770 --> 00:47:32,770
Now's the time to ask those.

570
00:47:37,829 --> 00:47:41,899
There's a few questions coming up so... Can checks have dependencies on other checks?

571
00:47:41,900 --> 00:47:47,510
For example, Check A  won't issue a verdict unless Check B also issues a verdict.

572
00:47:49,440 --> 00:47:51,440
Hmm let me think about that.

573
00:47:53,010 --> 00:47:56,719
I don't see why not. Yeah, I mean, so the

574
00:47:57,390 --> 00:47:59,279
the checks are

575
00:47:59,280 --> 00:48:03,379
The checks are literally built into the warehouse codebase

576
00:48:03,380 --> 00:48:08,960
so they have access to the whole warehouse database so they could literally just query the database for

577
00:48:09,270 --> 00:48:17,089
Like other check verdicts and then decide to issue a verdict based on existing verdicts, that is within the capability of the system.

578
00:48:24,710 --> 00:48:26,710
I don't see any other questions

579
00:48:29,610 --> 00:48:34,160
So far great presentation, I I like it.

580
00:48:36,690 --> 00:48:38,690
Amazing Cristina, thank you very much.

581
00:48:38,970 --> 00:48:41,720
Thanks. Yeah, I was actually supposed to be um

582
00:48:42,240 --> 00:48:47,388
Giving this chat at PyCon this year. Now that Coronavirus is happening,

583
00:48:47,390 --> 00:48:50,900
I don't know if I will be able to do that.

584
00:48:51,660 --> 00:48:56,629
So I'm really grateful for the opportunity to be able to talk about the system here

585
00:48:58,410 --> 00:49:02,690
So what we're gonna publish it on the YouTube and you if you share your

586
00:49:04,950 --> 00:49:06,950
We can publish it with it as well

587
00:49:08,190 --> 00:49:10,309
Anybody want has any comments or

588
00:49:12,720 --> 00:49:16,519
I mean just shared this for just a second just

589
00:49:18,690 --> 00:49:20,690
Remind people

590
00:49:26,010 --> 00:49:32,300
Yeah, so people want the github repo URL I will just go ahead and paste that into the channel

591
00:49:42,690 --> 00:49:48,980
So, like I said, this is all just right in the warehouse codebase, so if you go to github.com slash

592
00:49:49,980 --> 00:49:53,569
Python packaging authority is what pypa stands for slash warehouse

593
00:49:54,120 --> 00:49:57,348
That's where you can download all the warehouse codebase and also get links to the warehouse

594
00:49:57,570 --> 00:50:02,570
documentation. And all of the malware check stuff is in just a subdirectory of the main root directory

595
00:50:02,760 --> 00:50:07,430
So it's in the /warehouse/malware directory.

596
00:50:07,440 --> 00:50:11,059
Yes, there is literally a directory in the warehouse codebase titled "malware".

597
00:50:14,280 --> 00:50:16,850
Thank you very much and before we go

598
00:50:18,270 --> 00:50:20,270
reminder for everybody

599
00:50:21,000 --> 00:50:28,370
Here you can check this presentation we'll post it in the YouTube channel there's our email if you want to communicate with us

600
00:50:28,520 --> 00:50:30,520
There's our slack

601
00:50:30,600 --> 00:50:36,049
Sentence and send me an email to info IP org and so we can keep the conversation going

602
00:50:36,450 --> 00:50:43,859
The you the next meeting will be announcing soon because in our in our schedule we have the Bay Area CTF and chili cook-off

603
00:50:43,859 --> 00:50:45,848
Which has been postponed?

604
00:50:45,849 --> 00:50:47,619
but we will have

605
00:50:47,619 --> 00:50:53,069
Content for our next meeting and will be publishing soon. So thank you very much for for attending today

606
00:50:53,070 --> 00:50:59,909
Oh actually before you leave Cristina, so we have this conversation at BSides and now you got me into it

607
00:50:59,940 --> 00:51:07,349
So so for people who doesn't know, the presentation was given on an open source laptop, and this is the first time that I hear

608
00:51:08,170 --> 00:51:11,310
about open source laptops, so can you

609
00:51:12,369 --> 00:51:13,960
share the the

610
00:51:13,960 --> 00:51:15,960
website where you bought the

611
00:51:16,270 --> 00:51:21,899
Your laptop and tell us more about it. Tell us how it works and stuff like that.

612
00:51:22,599 --> 00:51:29,849
Okay, I don't actually know everything about this laptop. But yeah, so

613
00:51:31,119 --> 00:51:37,319
This was like kind of my first foray, this contract, into like, getting paid to do open source work

614
00:51:38,080 --> 00:51:39,460
and

615
00:51:39,460 --> 00:51:42,869
In addition to getting paid to do this work, which I think is like an incredible privilege

616
00:51:42,869 --> 00:51:47,999
I also want to like give back to this community because I really believe like in the mission of open source

617
00:51:48,000 --> 00:51:52,500
And it just powers like so much of the software that like we use all the time every day

618
00:51:52,750 --> 00:51:54,180
That like like it

619
00:51:54,180 --> 00:51:57,480
It just is what facilitates the world that we live in now.

620
00:51:57,790 --> 00:52:03,570
So I wanted to give some of that money back to other open-source organizations, which is why I bought this laptop

621
00:52:03,570 --> 00:52:10,499
It's a Purism laptop. I believe the URL is just 
 puri.sm, like purism.

622
00:52:11,470 --> 00:52:17,879
And all of the software and hardware components on this laptop are like fully like open source and hackable

623
00:52:18,130 --> 00:52:21,330
Um, so yeah, there's nothing proprietary

624
00:52:21,880 --> 00:52:25,619
Running on this laptop or installed on this laptop, which is pretty great

625
00:52:26,740 --> 00:52:30,178
How about the performance? I mean, you know comparing like to

626
00:52:30,910 --> 00:52:32,049
commercial

627
00:52:32,050 --> 00:52:38,789
Computers. I mean, what are your your feedback about that I would say that this is definitely a hacker laptop

628
00:52:38,980 --> 00:52:40,980
um like

629
00:52:41,170 --> 00:52:44,430
This is like, you know, purism is like kind of a new company, too.

630
00:52:44,430 --> 00:52:46,770
So they just started making these laptops in the past few years.

631
00:52:47,440 --> 00:52:53,589
And there's you know, there's there's still some bugs like that's that they're ironing. But if you're like comfortable running

632
00:52:54,200 --> 00:52:59,109
Linux and like administering your own linux of environment like definitely consider getting up here is a laptop

633
00:53:01,579 --> 00:53:03,579
Awesome cool

634
00:53:04,310 --> 00:53:09,578
I don't see any other questions. Oh someone asked if I can we can connect over LinkedIn. I'm sorry

635
00:53:09,579 --> 00:53:16,239
I'm not on LinkedIn. You can email me. What model is it? Oh, yeah. It's the Librem 13 version 4

636
00:53:22,970 --> 00:53:24,410
That's great

637
00:53:24,410 --> 00:53:27,339
Well, thank you so much. I was very happy

638
00:53:28,520 --> 00:53:33,219
you know, I saw part of the presentation before I guess because you gave me the

639
00:53:34,130 --> 00:53:37,210
the overview and we work on it and I

640
00:53:37,760 --> 00:53:43,749
Gonna be a great presentation, but definitely went above and beyond my my expectations so great job

641
00:53:43,750 --> 00:53:46,959
I like it. Yeah, I think you guys

642
00:53:47,660 --> 00:53:49,660
Stay safe out there

643
00:53:49,940 --> 00:53:57,819
Um, and I will see you at another peacock event. Thank you very much. Everybody babe Oh,

644
00:53:59,089 --> 00:54:01,089
Larry guys since they saved

