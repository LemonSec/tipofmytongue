1
00:00:08,130 --> 00:00:13,000
hello party people

2
00:00:10,120 --> 00:00:16,660
welcome to the<font color="#CCCCCC"> Kaos</font><font color="#E5E5E5"> West stage the next</font>

3
00:00:13,000 --> 00:00:18,490
talk is<font color="#E5E5E5"> hired by Tom a</font><font color="#CCCCCC"> little bit the</font>

4
00:00:16,660 --> 00:00:21,029
one or<font color="#CCCCCC"> the other person may know</font><font color="#E5E5E5"> Tom</font>

5
00:00:18,490 --> 00:00:21,029
<font color="#CCCCCC">drill bit</font>

6
00:00:25,820 --> 00:00:32,870
<font color="#E5E5E5">I think I</font><font color="#CCCCCC"> just should hold the</font><font color="#E5E5E5"> micro in</font>

7
00:00:31,099 --> 00:00:36,470
there and then interesting things

8
00:00:32,870 --> 00:00:38,989
happened<font color="#E5E5E5"> so um I will try to bridge the</font>

9
00:00:36,470 --> 00:00:41,960
<font color="#E5E5E5">time shortly this is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> self-organized</font>

10
00:00:38,989 --> 00:00:44,300
session<font color="#CCCCCC"> you can bring</font><font color="#E5E5E5"> your papers and</font>

11
00:00:41,960 --> 00:00:47,570
hold your project or kink that<font color="#E5E5E5"> you have</font>

12
00:00:44,300 --> 00:00:53,030
here<font color="#E5E5E5"> on stage we we put it on the media</font>

13
00:00:47,570 --> 00:00:55,580
<font color="#CCCCCC">CEC see you can show it around</font><font color="#E5E5E5"> so this</font>

14
00:00:53,030 --> 00:00:57,920
stage is made for<font color="#E5E5E5"> you basically</font><font color="#CCCCCC"> and it's</font>

15
00:00:55,580 --> 00:01:01,039
so well of<font color="#E5E5E5"> that we don't have and we we</font>

16
00:00:57,920 --> 00:01:02,840
do have<font color="#CCCCCC"> a few slots</font><font color="#E5E5E5"> left so thank you</font>

17
00:01:01,039 --> 00:01:04,369
<font color="#CCCCCC">very much community</font><font color="#E5E5E5"> everybody of you</font>

18
00:01:02,840 --> 00:01:07,310
here to make<font color="#E5E5E5"> this</font><font color="#CCCCCC"> Congress so special</font>

19
00:01:04,369 --> 00:01:11,180
and<font color="#E5E5E5"> add your your personality to it</font><font color="#CCCCCC"> too</font>

20
00:01:07,310 --> 00:01:14,320
so<font color="#CCCCCC"> some</font><font color="#E5E5E5"> links are you ready you finished</font>

21
00:01:11,180 --> 00:01:14,320
your discussions

22
00:01:23,700 --> 00:01:28,840
so please dear audience applause<font color="#CCCCCC"> form</font>

23
00:01:27,040 --> 00:01:34,210
<font color="#E5E5E5">table little bit and the fourth</font>

24
00:01:28,840 --> 00:01:36,910
programming language thank you<font color="#CCCCCC"> very</font><font color="#E5E5E5"> much</font>

25
00:01:34,210 --> 00:01:41,380
<font color="#CCCCCC">I hope that in half an</font><font color="#E5E5E5"> hour you will</font>

26
00:01:36,910 --> 00:01:46,020
<font color="#E5E5E5">give me a hand as well</font><font color="#CCCCCC"> I have always</font>

27
00:01:41,380 --> 00:01:49,330
been in a minority<font color="#CCCCCC"> position in the chaos</font>

28
00:01:46,020 --> 00:01:52,990
<font color="#CCCCCC">environment because I have been I</font><font color="#E5E5E5"> am</font><font color="#CCCCCC"> a</font>

29
00:01:49,330 --> 00:01:54,940
<font color="#CCCCCC">force programmer since 1980</font><font color="#E5E5E5"> and I'm so</font>

30
00:01:52,990 --> 00:01:59,050
<font color="#E5E5E5">happy with the language that</font><font color="#CCCCCC"> I never</font>

31
00:01:54,940 --> 00:02:01,869
felt any need to<font color="#CCCCCC"> use something</font><font color="#E5E5E5"> else for</font>

32
00:01:59,050 --> 00:02:05,130
<font color="#E5E5E5">the things I'm doing and I will relate</font>

33
00:02:01,869 --> 00:02:09,220
<font color="#CCCCCC">to this to you why this is the case and</font>

34
00:02:05,130 --> 00:02:12,060
I will<font color="#E5E5E5"> take a very unusual and angle in</font>

35
00:02:09,220 --> 00:02:12,060
<font color="#CCCCCC">that respect</font>

36
00:02:16,489 --> 00:02:21,930
where it comes from<font color="#E5E5E5"> I mean that is</font><font color="#CCCCCC"> not</font>

37
00:02:19,230 --> 00:02:25,319
controversial<font color="#CCCCCC"> it was</font><font color="#E5E5E5"> developed by</font>

38
00:02:21,930 --> 00:02:28,379
<font color="#E5E5E5">Charles Moore in the 1960s and over a</font>

39
00:02:25,319 --> 00:02:32,119
period<font color="#CCCCCC"> of 10 years he experimented with</font>

40
00:02:28,379 --> 00:02:36,899
different<font color="#E5E5E5"> concepts and it all started</font>

41
00:02:32,120 --> 00:02:40,560
<font color="#E5E5E5">because he</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> programming</font><font color="#CCCCCC"> and IBM 26</font>

42
00:02:36,900 --> 00:02:43,739
something using punch cards of course<font color="#E5E5E5"> in</font>

43
00:02:40,560 --> 00:02:46,920
the 1960s<font color="#E5E5E5"> and he had different what we</font>

44
00:02:43,739 --> 00:02:49,920
<font color="#CCCCCC">would now call Sapru teens</font><font color="#E5E5E5"> every</font>

45
00:02:46,920 --> 00:02:52,018
<font color="#E5E5E5">supporting was car</font><font color="#CCCCCC"> tech and</font><font color="#E5E5E5"> he was</font>

46
00:02:49,920 --> 00:02:55,140
<font color="#E5E5E5">looking for a mechanism to pass</font>

47
00:02:52,019 --> 00:02:57,599
arguments<font color="#E5E5E5"> from one car</font><font color="#CCCCCC"> tech</font><font color="#E5E5E5"> and the</font>

48
00:02:55,140 --> 00:03:00,328
<font color="#E5E5E5">programs to the next car tech into</font>

49
00:02:57,599 --> 00:03:03,810
programs and this is why he<font color="#E5E5E5"> wound up</font>

50
00:03:00,329 --> 00:03:06,989
<font color="#E5E5E5">with</font><font color="#CCCCCC"> a data stack</font><font color="#E5E5E5"> so the first program</font>

51
00:03:03,810 --> 00:03:09,420
<font color="#E5E5E5">was running left it's argued its results</font>

52
00:03:06,989 --> 00:03:12,569
on the data stack and then the next car

53
00:03:09,420 --> 00:03:14,940
<font color="#E5E5E5">tech would pick up the parameters under</font>

54
00:03:12,569 --> 00:03:17,670
<font color="#E5E5E5">the data stack and process them further</font>

55
00:03:14,940 --> 00:03:21,630
<font color="#CCCCCC">so that is one</font><font color="#E5E5E5"> of the constituents of</font>

56
00:03:17,670 --> 00:03:26,760
<font color="#E5E5E5">the</font><font color="#CCCCCC"> false</font><font color="#E5E5E5"> programming language then</font>

57
00:03:21,630 --> 00:03:31,019
after this this period of<font color="#CCCCCC"> 10 years</font><font color="#E5E5E5"> when</font>

58
00:03:26,760 --> 00:03:34,350
he came<font color="#CCCCCC"> to a version of his personal</font>

59
00:03:31,019 --> 00:03:39,440
programming environment that in

60
00:03:34,350 --> 00:03:43,560
retrospect he called this then was false

61
00:03:39,440 --> 00:03:48,239
he used an assembler on<font color="#E5E5E5"> some mini</font>

62
00:03:43,560 --> 00:03:51,450
computer<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> it was a variant</font><font color="#E5E5E5"> and he</font>

63
00:03:48,239 --> 00:03:53,250
wanted<font color="#E5E5E5"> to call it forth because this was</font>

64
00:03:51,450 --> 00:03:55,440
a<font color="#CCCCCC"> time when everybody</font><font color="#E5E5E5"> was talking about</font>

65
00:03:53,250 --> 00:03:58,470
the search integration<font color="#E5E5E5"> of languages and</font>

66
00:03:55,440 --> 00:04:00,870
he<font color="#E5E5E5"> wanted</font><font color="#CCCCCC"> to leapfrog all of</font><font color="#E5E5E5"> that but</font>

67
00:03:58,470 --> 00:04:04,049
then unfortunately<font color="#E5E5E5"> the assembler only</font>

68
00:04:00,870 --> 00:04:09,739
accepted five letter identifiers<font color="#E5E5E5"> and so</font>

69
00:04:04,049 --> 00:04:09,739
the you had to go and it became false

70
00:04:12,440 --> 00:04:19,860
the programming language is based on a

71
00:04:15,960 --> 00:04:22,890
<font color="#E5E5E5">conceptual model of a CPU and this is</font>

72
00:04:19,860 --> 00:04:27,270
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> the conceptual model you have</font>

73
00:04:22,890 --> 00:04:30,090
a data stack you have<font color="#E5E5E5"> the two top items</font>

74
00:04:27,270 --> 00:04:32,490
of the data stack which have a special

75
00:04:30,090 --> 00:04:36,479
<font color="#CCCCCC">role if</font><font color="#E5E5E5"> you think in heart where they</font>

76
00:04:32,490 --> 00:04:38,520
would be registers the top of stack and

77
00:04:36,480 --> 00:04:41,550
the next of stack and the top of<font color="#E5E5E5"> stack</font>

78
00:04:38,520 --> 00:04:45,450
<font color="#E5E5E5">and next</font><font color="#CCCCCC"> step</font><font color="#E5E5E5"> feed the ALU for</font><font color="#CCCCCC"> binary</font>

79
00:04:41,550 --> 00:04:48,090
arithmetic<font color="#CCCCCC"> I mean with two arguments and</font>

80
00:04:45,450 --> 00:04:51,210
the result goes back into<font color="#E5E5E5"> the top</font><font color="#CCCCCC"> of</font>

81
00:04:48,090 --> 00:04:53,219
stack<font color="#E5E5E5"> and then there is a return stick</font>

82
00:04:51,210 --> 00:04:57,270
because<font color="#E5E5E5"> we want to do subroutine calls</font>

83
00:04:53,220 --> 00:05:00,990
and returns<font color="#E5E5E5"> and there is this little</font>

84
00:04:57,270 --> 00:05:03,240
<font color="#CCCCCC">path on the left where you can exchange</font>

85
00:05:00,990 --> 00:05:04,850
<font color="#E5E5E5">data between the</font><font color="#CCCCCC"> returns stack and the</font>

86
00:05:03,240 --> 00:05:07,800
data stack which comes in handy

87
00:05:04,850 --> 00:05:10,020
<font color="#CCCCCC">sometimes I get to do</font><font color="#E5E5E5"> that later</font><font color="#CCCCCC"> and</font>

88
00:05:07,800 --> 00:05:14,610
<font color="#E5E5E5">then of course the program counter</font><font color="#CCCCCC"> is</font>

89
00:05:10,020 --> 00:05:17,880
connected to the<font color="#E5E5E5"> return stack and why I</font>

90
00:05:14,610 --> 00:05:21,390
wrote this<font color="#E5E5E5"> arrow to the memory I don't</font>

91
00:05:17,880 --> 00:05:24,719
know this<font color="#E5E5E5"> is not necessary but basically</font>

92
00:05:21,390 --> 00:05:27,120
the data<font color="#E5E5E5"> stack is also connected</font><font color="#CCCCCC"> to the</font>

93
00:05:24,720 --> 00:05:28,860
data<font color="#E5E5E5"> memory and you can store and</font>

94
00:05:27,120 --> 00:05:31,800
<font color="#CCCCCC">retrieve</font><font color="#E5E5E5"> results there that is very</font>

95
00:05:28,860 --> 00:05:34,980
<font color="#E5E5E5">conventional what is unconventional that</font>

96
00:05:31,800 --> 00:05:39,090
instead<font color="#CCCCCC"> of a register file we</font><font color="#E5E5E5"> just have</font>

97
00:05:34,980 --> 00:05:43,640
a stack<font color="#E5E5E5"> and everybody of you who ever</font>

98
00:05:39,090 --> 00:05:47,159
<font color="#E5E5E5">use the original</font><font color="#CCCCCC"> youlet pocket</font>

99
00:05:43,640 --> 00:05:50,479
calculators<font color="#E5E5E5"> knows how you operate</font><font color="#CCCCCC"> to</font>

100
00:05:47,160 --> 00:05:50,480
arithmetic on a stack

101
00:05:52,600 --> 00:06:01,490
both the that is called<font color="#E5E5E5"> postfix notation</font>

102
00:05:56,479 --> 00:06:04,840
or postfix<font color="#E5E5E5"> operation and the data stack</font>

103
00:06:01,490 --> 00:06:08,990
is<font color="#E5E5E5"> the parameter storage used for</font>

104
00:06:04,840 --> 00:06:11,388
<font color="#CCCCCC">evaluation of expressions</font><font color="#E5E5E5"> all operators</font>

105
00:06:08,990 --> 00:06:14,500
and functions<font color="#E5E5E5"> takes their parameters</font>

106
00:06:11,389 --> 00:06:18,530
<font color="#E5E5E5">from and leave the results on the stack</font>

107
00:06:14,500 --> 00:06:20,210
<font color="#CCCCCC">forth words and why they are</font><font color="#E5E5E5"> called</font>

108
00:06:18,530 --> 00:06:24,859
words<font color="#E5E5E5"> I will come to that in a minute</font>

109
00:06:20,210 --> 00:06:28,520
<font color="#CCCCCC">what you</font><font color="#E5E5E5"> usually</font><font color="#CCCCCC"> would call functions do</font>

110
00:06:24,860 --> 00:06:31,160
<font color="#CCCCCC">not have parameter lists so you don't</font>

111
00:06:28,520 --> 00:06:34,219
need the opening paren and<font color="#E5E5E5"> then this</font>

112
00:06:31,160 --> 00:06:37,699
that comma and another parameter<font color="#CCCCCC"> closing</font>

113
00:06:34,220 --> 00:06:42,830
<font color="#CCCCCC">forum</font><font color="#E5E5E5"> now they just use the stack as</font>

114
00:06:37,699 --> 00:06:45,710
parameter exchange and so this is one<font color="#CCCCCC"> of</font>

115
00:06:42,830 --> 00:06:48,409
the<font color="#E5E5E5"> drawbacks of</font><font color="#CCCCCC"> Falls</font><font color="#E5E5E5"> you do not name</font>

116
00:06:45,710 --> 00:06:51,590
the parameters<font color="#E5E5E5"> the parameters are just</font>

117
00:06:48,410 --> 00:06:54,349
there and the programmer has to<font color="#E5E5E5"> take</font>

118
00:06:51,590 --> 00:06:57,289
care that<font color="#E5E5E5"> the parameters are really</font>

119
00:06:54,349 --> 00:07:02,740
there in the order<font color="#E5E5E5"> needed by the next</font>

120
00:06:57,289 --> 00:07:06,349
word<font color="#CCCCCC"> you</font><font color="#E5E5E5"> call just to make an example</font>

121
00:07:02,740 --> 00:07:09,110
<font color="#E5E5E5">arithmetic operations you put a 1 on the</font>

122
00:07:06,349 --> 00:07:14,000
<font color="#E5E5E5">stack</font><font color="#CCCCCC"> you put a to understand</font><font color="#E5E5E5"> you do a</font>

123
00:07:09,110 --> 00:07:17,599
plus<font color="#E5E5E5"> and then you put a 3 on</font><font color="#CCCCCC"> the stack</font>

124
00:07:14,000 --> 00:07:21,370
<font color="#E5E5E5">and you</font><font color="#CCCCCC"> multiply and the dot is the</font>

125
00:07:17,599 --> 00:07:25,520
print operator<font color="#E5E5E5"> and the result is 9</font>

126
00:07:21,370 --> 00:07:29,360
<font color="#E5E5E5">because 1 plus</font><font color="#CCCCCC"> 2 is 3 and 3 times 3 is 9</font>

127
00:07:25,520 --> 00:07:34,120
so<font color="#E5E5E5"> this is exactly how the</font><font color="#CCCCCC"> ulid packet</font>

128
00:07:29,360 --> 00:07:34,120
<font color="#CCCCCC">of calculators used to operate</font>

129
00:07:37,560 --> 00:07:40,560
<font color="#E5E5E5">okay</font>

130
00:07:41,080 --> 00:07:50,330
manipulating<font color="#E5E5E5"> the</font><font color="#CCCCCC"> stack</font><font color="#E5E5E5"> so the difference</font>

131
00:07:46,880 --> 00:07:53,960
<font color="#E5E5E5">between a register oriented machine and</font>

132
00:07:50,330 --> 00:07:57,258
a stack oriented machine is not as big

133
00:07:53,960 --> 00:08:01,669
as you might think<font color="#CCCCCC"> in both cases you</font>

134
00:07:57,259 --> 00:08:03,500
have the difficulty<font color="#CCCCCC"> that your parameters</font>

135
00:08:01,669 --> 00:08:05,930
that you<font color="#CCCCCC"> need in order to</font><font color="#E5E5E5"> call a</font>

136
00:08:03,500 --> 00:08:08,509
function<font color="#CCCCCC"> are not in the order that</font><font color="#E5E5E5"> you</font>

137
00:08:05,930 --> 00:08:11,360
need them<font color="#E5E5E5"> in a register</font><font color="#CCCCCC"> machine you have</font>

138
00:08:08,509 --> 00:08:15,440
to exchange registers<font color="#E5E5E5"> on a stack machine</font>

139
00:08:11,360 --> 00:08:17,630
<font color="#E5E5E5">you have to reorder the parameters on</font>

140
00:08:15,440 --> 00:08:20,120
the stack<font color="#CCCCCC"> and you have a couple of</font>

141
00:08:17,630 --> 00:08:25,159
operations<font color="#E5E5E5"> to do that</font>

142
00:08:20,120 --> 00:08:30,229
let me explain this notation<font color="#E5E5E5"> here</font>

143
00:08:25,160 --> 00:08:34,909
<font color="#E5E5E5">between the parens</font><font color="#CCCCCC"> before the - - that's</font>

144
00:08:30,229 --> 00:08:36,529
<font color="#E5E5E5">the number and semantics of the operator</font>

145
00:08:34,909 --> 00:08:40,520
before<font color="#CCCCCC"> the</font><font color="#E5E5E5"> operation</font>

146
00:08:36,529 --> 00:08:42,620
<font color="#E5E5E5">then comes the operation and at the</font>

147
00:08:40,520 --> 00:08:46,130
right side you<font color="#CCCCCC"> see the result</font>

148
00:08:42,620 --> 00:08:49,310
so the<font color="#E5E5E5"> dupe just duplicates an item on</font>

149
00:08:46,130 --> 00:08:52,700
the stack the drop<font color="#CCCCCC"> is rolled</font><font color="#E5E5E5"> away an</font>

150
00:08:49,310 --> 00:08:56,630
item<font color="#E5E5E5"> on the stack the swap exchanges the</font>

151
00:08:52,700 --> 00:08:59,800
tools<font color="#CCCCCC"> pop items on the stack and the rot</font>

152
00:08:56,630 --> 00:09:02,480
is I mean goes down<font color="#CCCCCC"> through the search</font>

153
00:08:59,800 --> 00:09:05,029
operation<font color="#CCCCCC"> a parameter on the stack and</font>

154
00:09:02,480 --> 00:09:08,660
<font color="#E5E5E5">then</font><font color="#CCCCCC"> the minus rot is exactly the</font>

155
00:09:05,029 --> 00:09:14,560
opposite of the<font color="#E5E5E5"> rod now you might start</font>

156
00:09:08,660 --> 00:09:18,260
wondering why is<font color="#E5E5E5"> - rot</font><font color="#CCCCCC"> a valid name</font>

157
00:09:14,560 --> 00:09:21,349
because most programming languages would

158
00:09:18,260 --> 00:09:24,970
say AHA this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the - followed by</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> rod</font>

159
00:09:21,350 --> 00:09:24,970
not so<font color="#CCCCCC"> enforce</font>

160
00:09:25,590 --> 00:09:30,470
<font color="#CCCCCC">I will jump ahead</font><font color="#E5E5E5"> here</font>

161
00:09:37,000 --> 00:09:43,880
<font color="#CCCCCC">Malthus is</font><font color="#E5E5E5"> too bad</font><font color="#CCCCCC"> I don't quite</font>

162
00:09:39,890 --> 00:09:49,069
<font color="#E5E5E5">remember my presentation</font>

163
00:09:43,880 --> 00:09:51,290
<font color="#CCCCCC">anyway</font><font color="#E5E5E5"> I keep in water</font><font color="#CCCCCC"> so this was</font>

164
00:09:49,070 --> 00:09:54,110
things happening on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> rich on the data</font>

165
00:09:51,290 --> 00:09:57,199
stack<font color="#E5E5E5"> now we also have the second stack</font>

166
00:09:54,110 --> 00:10:00,740
the return<font color="#E5E5E5"> stack and that</font><font color="#CCCCCC"> the returned</font>

167
00:09:57,200 --> 00:10:03,920
stack is primarily<font color="#CCCCCC"> used to</font><font color="#E5E5E5"> store return</font>

168
00:10:00,740 --> 00:10:07,790
addresses<font color="#E5E5E5"> of a word for word or a</font>

169
00:10:03,920 --> 00:10:10,810
function call and it also serves<font color="#E5E5E5"> as a</font>

170
00:10:07,790 --> 00:10:14,630
storage<font color="#E5E5E5"> location for loop indices and</font>

171
00:10:10,810 --> 00:10:17,899
therefore it is very easy<font color="#CCCCCC"> in force to</font>

172
00:10:14,630 --> 00:10:20,600
nest loops<font color="#E5E5E5"> because if you are inside a</font>

173
00:10:17,899 --> 00:10:23,570
loop and<font color="#CCCCCC"> you do a call then</font>

174
00:10:20,600 --> 00:10:25,940
automatically the old loop index gets

175
00:10:23,570 --> 00:10:28,880
pushed on the<font color="#CCCCCC"> RHIB further down on</font><font color="#E5E5E5"> the</font>

176
00:10:25,940 --> 00:10:31,310
<font color="#E5E5E5">return stack and then you can do</font><font color="#CCCCCC"> your</font>

177
00:10:28,880 --> 00:10:36,110
word and<font color="#E5E5E5"> the return with automatically</font>

178
00:10:31,310 --> 00:10:37,910
retrieves the loop index<font color="#E5E5E5"> and in addition</font>

179
00:10:36,110 --> 00:10:42,079
the returns that<font color="#CCCCCC"> can be used as a</font>

180
00:10:37,910 --> 00:10:44,149
temporary<font color="#E5E5E5"> data storage to get some</font>

181
00:10:42,079 --> 00:10:50,620
parameters<font color="#CCCCCC"> out of the way which are</font>

182
00:10:44,149 --> 00:10:54,410
currently not in use the interpreter

183
00:10:50,620 --> 00:10:56,600
force is an<font color="#CCCCCC"> interactive system that is</font>

184
00:10:54,410 --> 00:11:00,199
<font color="#E5E5E5">controlled from the command line</font><font color="#CCCCCC"> so in</font>

185
00:10:56,600 --> 00:11:03,529
that respect<font color="#CCCCCC"> it is similar</font><font color="#E5E5E5"> to Python</font><font color="#CCCCCC"> it</font>

186
00:11:00,200 --> 00:11:07,610
is very similar<font color="#E5E5E5"> to Lisp</font><font color="#CCCCCC"> by the way only</font>

187
00:11:03,529 --> 00:11:12,350
<font color="#CCCCCC">that disp uses in</font><font color="#E5E5E5"> fixed prefix notation</font>

188
00:11:07,610 --> 00:11:15,050
and force uses postfix notation<font color="#E5E5E5"> all</font>

189
00:11:12,350 --> 00:11:18,860
words are<font color="#E5E5E5"> kept in the linked list of</font>

190
00:11:15,050 --> 00:11:20,959
word names associated was compiled code

191
00:11:18,860 --> 00:11:26,400
<font color="#E5E5E5">now this</font><font color="#CCCCCC"> is what you conventionally</font>

192
00:11:20,959 --> 00:11:29,709
would call the syntax tree

193
00:11:26,400 --> 00:11:32,650
although because<font color="#CCCCCC"> it is an interactive</font>

194
00:11:29,710 --> 00:11:34,750
<font color="#CCCCCC">system this syntax tree</font><font color="#E5E5E5"> of the</font>

195
00:11:32,650 --> 00:11:39,939
dictionary as we call it in force is

196
00:11:34,750 --> 00:11:43,980
<font color="#E5E5E5">always present and the way it</font><font color="#CCCCCC"> operates</font>

197
00:11:39,940 --> 00:11:48,340
<font color="#CCCCCC">you type in a string of</font><font color="#E5E5E5"> ASCII characters</font>

198
00:11:43,980 --> 00:11:51,010
separated<font color="#E5E5E5"> by a blank and then the</font>

199
00:11:48,340 --> 00:11:52,900
<font color="#E5E5E5">interpreter goes ahead and looks it up</font>

200
00:11:51,010 --> 00:11:55,360
whether it<font color="#E5E5E5"> can find the string in the</font>

201
00:11:52,900 --> 00:11:57,900
dictionary if it finds<font color="#E5E5E5"> the string in the</font>

202
00:11:55,360 --> 00:12:01,570
dictionary<font color="#E5E5E5"> then it jumps</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

203
00:11:57,900 --> 00:12:04,300
<font color="#E5E5E5">Associated executable address if it</font>

204
00:12:01,570 --> 00:12:07,450
cannot<font color="#E5E5E5"> point the string it tries</font><font color="#CCCCCC"> to</font>

205
00:12:04,300 --> 00:12:10,689
convert it into a<font color="#E5E5E5"> number according</font><font color="#CCCCCC"> to</font>

206
00:12:07,450 --> 00:12:13,330
the setting of the variable base<font color="#CCCCCC"> so if</font>

207
00:12:10,690 --> 00:12:16,690
you have a<font color="#E5E5E5"> 2 in the base you walk to</font>

208
00:12:13,330 --> 00:12:19,420
<font color="#E5E5E5">walk work in binary if you have a tender</font>

209
00:12:16,690 --> 00:12:24,220
<font color="#E5E5E5">its decimal</font><font color="#CCCCCC"> if you have a 16</font><font color="#E5E5E5"> and you</font>

210
00:12:19,420 --> 00:12:27,670
work in hexadecimal<font color="#CCCCCC"> if it is neither</font>

211
00:12:24,220 --> 00:12:30,580
found in the dictionary<font color="#CCCCCC"> nor converted</font>

212
00:12:27,670 --> 00:12:34,770
into a number you did<font color="#E5E5E5"> a typo</font><font color="#CCCCCC"> and the</font>

213
00:12:30,580 --> 00:12:34,770
system says well I<font color="#E5E5E5"> don't know that</font>

214
00:12:36,030 --> 00:12:43,510
defining<font color="#E5E5E5"> new words so how how do you</font>

215
00:12:39,490 --> 00:12:46,510
<font color="#E5E5E5">define new words the basic operator is</font>

216
00:12:43,510 --> 00:12:48,610
<font color="#CCCCCC">the</font><font color="#E5E5E5"> colon and then after the colon comes</font>

217
00:12:46,510 --> 00:12:51,819
the name of the new word you<font color="#CCCCCC"> are</font>

218
00:12:48,610 --> 00:12:55,540
defining and then<font color="#E5E5E5"> for and then usually</font>

219
00:12:51,820 --> 00:12:58,750
you<font color="#CCCCCC"> write a stack comment so you say</font>

220
00:12:55,540 --> 00:13:02,439
what do I need<font color="#E5E5E5"> if all the</font><font color="#CCCCCC"> words starts</font>

221
00:12:58,750 --> 00:13:05,800
and what is the<font color="#E5E5E5"> stacks situation when</font>

222
00:13:02,440 --> 00:13:08,800
the word has finished and so we could

223
00:13:05,800 --> 00:13:14,680
define<font color="#CCCCCC"> the word</font><font color="#E5E5E5"> for plus that just</font><font color="#CCCCCC"> does</font>

224
00:13:08,800 --> 00:13:17,380
<font color="#E5E5E5">before plus intuitively but of course</font>

225
00:13:14,680 --> 00:13:21,579
you can do nasty things<font color="#E5E5E5"> like for</font>

226
00:13:17,380 --> 00:13:26,290
instance<font color="#E5E5E5"> you could define colon number</font>

227
00:13:21,580 --> 00:13:28,690
<font color="#CCCCCC">two for</font><font color="#E5E5E5"> semi colon</font><font color="#CCCCCC"> and all of a sudden</font>

228
00:13:26,290 --> 00:13:31,000
if you now type<font color="#E5E5E5"> in</font><font color="#CCCCCC"> 2 there</font><font color="#E5E5E5"> would be a</font>

229
00:13:28,690 --> 00:13:33,880
<font color="#CCCCCC">four on the stack so</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is something</font>

230
00:13:31,000 --> 00:13:37,040
<font color="#CCCCCC">you should</font><font color="#E5E5E5"> not do</font><font color="#CCCCCC"> but it's possible</font>

231
00:13:33,880 --> 00:13:41,209
so two times I<font color="#CCCCCC"> think it's pretty much</font>

232
00:13:37,040 --> 00:13:44,630
safe explosion<font color="#E5E5E5"> explanatory</font><font color="#CCCCCC"> you duplicate</font>

233
00:13:41,209 --> 00:13:47,000
the<font color="#CCCCCC"> n1 on the stack</font><font color="#E5E5E5"> and then you add</font>

234
00:13:44,630 --> 00:13:49,970
these two<font color="#E5E5E5"> copies</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> same number</font>

235
00:13:47,000 --> 00:13:58,579
together<font color="#E5E5E5"> and that is two times or shift</font>

236
00:13:49,970 --> 00:14:02,149
left<font color="#CCCCCC"> just to give</font><font color="#E5E5E5"> you a an idea of how</font>

237
00:13:58,579 --> 00:14:05,449
how you program applications<font color="#CCCCCC"> enforce</font>

238
00:14:02,149 --> 00:14:09,170
<font color="#E5E5E5">then look at we have a washing</font><font color="#CCCCCC"> machine</font>

239
00:14:05,450 --> 00:14:12,320
<font color="#E5E5E5">and so this is the washer and the washer</font>

240
00:14:09,170 --> 00:14:18,610
<font color="#E5E5E5">washes it spins it rinses and then it</font>

241
00:14:12,320 --> 00:14:23,209
spins again<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> fourth compiler is</font>

242
00:14:18,610 --> 00:14:26,120
just a one-pass compiler<font color="#CCCCCC"> and you do not</font>

243
00:14:23,209 --> 00:14:28,849
have forward references<font color="#CCCCCC"> so if you wanted</font>

244
00:14:26,120 --> 00:14:32,839
<font color="#E5E5E5">to make this definition</font><font color="#CCCCCC"> you first have</font>

245
00:14:28,850 --> 00:14:35,420
to define<font color="#E5E5E5"> wash spin rinse and spin again</font>

246
00:14:32,839 --> 00:14:38,420
and just<font color="#E5E5E5"> as an example I mean the</font>

247
00:14:35,420 --> 00:14:42,170
definition<font color="#CCCCCC"> of rinse could look like</font><font color="#E5E5E5"> fill</font>

248
00:14:38,420 --> 00:14:45,319
agitate and<font color="#E5E5E5"> drain and then you further</font>

249
00:14:42,170 --> 00:14:47,990
<font color="#E5E5E5">the further you go down the closer you</font>

250
00:14:45,320 --> 00:14:51,829
come to the hardware<font color="#CCCCCC"> and then in the end</font>

251
00:14:47,990 --> 00:14:54,980
<font color="#E5E5E5">you will have nasty hexadecimal numbers</font>

252
00:14:51,829 --> 00:15:00,589
that gets<font color="#E5E5E5"> taught in some addressable</font>

253
00:14:54,980 --> 00:15:02,510
register what makes for so unique and

254
00:15:00,589 --> 00:15:05,870
why<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> called an extensible</font>

255
00:15:02,510 --> 00:15:10,970
language of the fact that newly<font color="#E5E5E5"> defined</font>

256
00:15:05,870 --> 00:15:16,490
words<font color="#CCCCCC"> exactly on the same</font><font color="#E5E5E5"> level in terms</font>

257
00:15:10,970 --> 00:15:19,550
<font color="#CCCCCC">of usability</font><font color="#E5E5E5"> as the core word</font><font color="#CCCCCC"> set</font><font color="#E5E5E5"> the</font>

258
00:15:16,490 --> 00:15:22,040
<font color="#CCCCCC">ATIS</font><font color="#E5E5E5"> part was in the first place</font><font color="#CCCCCC"> so in a</font>

259
00:15:19,550 --> 00:15:25,640
sense you<font color="#CCCCCC"> could say the fourth</font>

260
00:15:22,040 --> 00:15:30,319
programming language is the assembler of

261
00:15:25,640 --> 00:15:34,390
a virtual<font color="#E5E5E5"> machine that you can extend so</font>

262
00:15:30,320 --> 00:15:37,160
you can you can<font color="#E5E5E5"> increase the</font><font color="#CCCCCC"> number of</font>

263
00:15:34,390 --> 00:15:41,439
instructions<font color="#CCCCCC"> that this</font><font color="#E5E5E5"> virtual machine</font>

264
00:15:37,160 --> 00:15:41,439
<font color="#E5E5E5">is</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> execute</font>

265
00:15:42,739 --> 00:15:54,979
memory and<font color="#CCCCCC"> i/o</font><font color="#E5E5E5"> so we have the fetch</font>

266
00:15:48,419 --> 00:15:58,529
operator that consumes an address and

267
00:15:54,979 --> 00:16:02,549
returns<font color="#E5E5E5"> the content of the memory cell</font>

268
00:15:58,529 --> 00:16:05,699
at that errors<font color="#E5E5E5"> in force we have no</font>

269
00:16:02,549 --> 00:16:08,728
notion of bytes<font color="#E5E5E5"> in force we have</font>

270
00:16:05,699 --> 00:16:13,469
addressable cells and the addressable

271
00:16:08,729 --> 00:16:14,249
cell may be more or<font color="#CCCCCC"> less any bit</font><font color="#E5E5E5"> widths</font>

272
00:16:13,470 --> 00:16:18,029
wide

273
00:16:14,249 --> 00:16:21,689
I mean conventionally you have 16<font color="#CCCCCC"> bits</font>

274
00:16:18,029 --> 00:16:25,439
<font color="#E5E5E5">you have 32 bits from</font><font color="#CCCCCC"> an engineering</font>

275
00:16:21,689 --> 00:16:31,410
point of view<font color="#E5E5E5"> 24 bits make much more</font>

276
00:16:25,439 --> 00:16:35,009
sense than 32 for instance and if you

277
00:16:31,410 --> 00:16:39,569
come<font color="#E5E5E5"> to the fourth engine implementation</font>

278
00:16:35,009 --> 00:16:43,019
on an FPGA<font color="#E5E5E5"> then you will find that the</font>

279
00:16:39,569 --> 00:16:47,009
internal<font color="#E5E5E5"> bra creme in FPGAs</font><font color="#CCCCCC"> is not aid</font>

280
00:16:43,019 --> 00:16:50,189
<font color="#E5E5E5">it is nine bits wide and so it is very</font>

281
00:16:47,009 --> 00:16:53,759
<font color="#E5E5E5">tempting</font><font color="#CCCCCC"> to then just use an 18-bit</font>

282
00:16:50,189 --> 00:16:57,929
machine for instance<font color="#E5E5E5"> perfectly feasible</font>

283
00:16:53,759 --> 00:17:01,859
<font color="#E5E5E5">because</font><font color="#CCCCCC"> it does</font><font color="#E5E5E5"> your word</font><font color="#CCCCCC"> width</font><font color="#E5E5E5"> does not</font>

284
00:16:57,929 --> 00:17:05,069
have to be divisible by<font color="#E5E5E5"> 8 and if you</font>

285
00:17:01,859 --> 00:17:08,760
want to<font color="#CCCCCC"> operate on bytes you just store</font>

286
00:17:05,069 --> 00:17:11,069
one bite at one<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> location and if</font>

287
00:17:08,760 --> 00:17:18,359
it has more than<font color="#E5E5E5"> 8 bits for you just</font>

288
00:17:11,069 --> 00:17:21,470
throw away the<font color="#E5E5E5"> extra bits then you need</font>

289
00:17:18,359 --> 00:17:25,079
words<font color="#E5E5E5"> to display your results we already</font>

290
00:17:21,470 --> 00:17:28,950
stumbled<font color="#E5E5E5"> across dot</font><font color="#CCCCCC"> it just shows the</font>

291
00:17:25,079 --> 00:17:32,908
number on the stack as a<font color="#E5E5E5"> science you dot</font>

292
00:17:28,950 --> 00:17:36,899
shows the top stack item as an unsigned

293
00:17:32,909 --> 00:17:40,260
number like in addresses and type for

294
00:17:36,899 --> 00:17:44,840
instance<font color="#CCCCCC"> takes an address and in the</font>

295
00:17:40,260 --> 00:17:44,840
<font color="#CCCCCC">lengths and prints this as a string</font>

296
00:17:46,840 --> 00:17:53,870
primitive data types

297
00:17:49,330 --> 00:17:56,240
<font color="#CCCCCC">this is a definition of a constant the</font>

298
00:17:53,870 --> 00:18:00,969
constant<font color="#E5E5E5"> consumes a number and you give</font>

299
00:17:56,240 --> 00:18:05,720
<font color="#CCCCCC">it a name a variable</font><font color="#E5E5E5"> allocates one</font>

300
00:18:00,970 --> 00:18:09,680
memory cell in memory and so if we now

301
00:18:05,720 --> 00:18:13,550
that we defined<font color="#CCCCCC"> sly</font><font color="#E5E5E5"> on weird you can do</font>

302
00:18:09,680 --> 00:18:20,000
it by<font color="#E5E5E5"> weird store and then if you do a</font>

303
00:18:13,550 --> 00:18:25,399
<font color="#E5E5E5">via Treach you you get a</font><font color="#CCCCCC"> tool to get</font>

304
00:18:20,000 --> 00:18:32,120
more fancy you<font color="#E5E5E5"> can create a vector so</font>

305
00:18:25,400 --> 00:18:36,200
create my<font color="#CCCCCC"> Wecht or just create a name</font>

306
00:18:32,120 --> 00:18:38,989
for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> next empty memory cell and it</font>

307
00:18:36,200 --> 00:18:43,220
doesn't do anything<font color="#E5E5E5"> else and then</font><font color="#CCCCCC"> you</font>

308
00:18:38,990 --> 00:18:47,480
<font color="#E5E5E5">say</font><font color="#CCCCCC"> okay my vector should be ten cells</font>

309
00:18:43,220 --> 00:18:51,680
<font color="#E5E5E5">white and so you do this with the</font>

310
00:18:47,480 --> 00:18:54,370
ampersand stands for decimal<font color="#E5E5E5"> decimal</font><font color="#CCCCCC"> 10</font>

311
00:18:51,680 --> 00:18:57,650
cells<font color="#E5E5E5"> a lot that gives you a vector then</font>

312
00:18:54,370 --> 00:18:59,949
the<font color="#CCCCCC"> full line gives you a vector of ten</font>

313
00:18:57,650 --> 00:18:59,950
elements

314
00:19:00,530 --> 00:19:05,720
and my<font color="#CCCCCC"> vector as I said returns the</font>

315
00:19:03,799 --> 00:19:09,260
address<font color="#E5E5E5"> of the first element and then</font>

316
00:19:05,720 --> 00:19:11,900
you can do<font color="#E5E5E5"> address computation on in</font>

317
00:19:09,260 --> 00:19:17,450
<font color="#E5E5E5">order</font><font color="#CCCCCC"> to get what you</font><font color="#E5E5E5"> want or</font><font color="#CCCCCC"> you can</font>

318
00:19:11,900 --> 00:19:21,980
<font color="#E5E5E5">get more fancy like defining a</font><font color="#CCCCCC"> new data</font>

319
00:19:17,450 --> 00:19:27,559
<font color="#CCCCCC">type you can say I want to define a</font>

320
00:19:21,980 --> 00:19:30,679
<font color="#CCCCCC">vector of a limited size and I want to</font>

321
00:19:27,559 --> 00:19:35,928
be able to<font color="#E5E5E5"> access the elements in the</font>

322
00:19:30,679 --> 00:19:37,940
<font color="#CCCCCC">vector by passing the index to the name</font>

323
00:19:35,929 --> 00:19:39,200
<font color="#E5E5E5">of the vector this I mean this is</font>

324
00:19:37,940 --> 00:19:41,450
<font color="#CCCCCC">difficult to</font><font color="#E5E5E5"> explain</font>

325
00:19:39,200 --> 00:19:48,230
I must confess<font color="#CCCCCC"> because here</font><font color="#E5E5E5"> we have a</font>

326
00:19:41,450 --> 00:19:53,570
word where we<font color="#CCCCCC"> define the</font><font color="#E5E5E5"> operation in</font>

327
00:19:48,230 --> 00:19:59,539
two different time instances so the code

328
00:19:53,570 --> 00:20:03,620
between<font color="#E5E5E5"> : vector which enters the name</font>

329
00:19:59,539 --> 00:20:08,150
vector into the dictionary<font color="#CCCCCC"> and when</font>

330
00:20:03,620 --> 00:20:15,580
vector will be<font color="#E5E5E5"> executed later on it we</font>

331
00:20:08,150 --> 00:20:15,580
will create in cells<font color="#E5E5E5"> and allocate them</font>

332
00:20:16,360 --> 00:20:23,658
so in this example<font color="#CCCCCC"> 10 vector index</font>

333
00:20:20,120 --> 00:20:26,360
vector will automatically create a

334
00:20:23,659 --> 00:20:30,980
vector<font color="#E5E5E5"> called index vector with ten</font>

335
00:20:26,360 --> 00:20:35,209
elements<font color="#CCCCCC"> and when we later</font><font color="#E5E5E5"> on execute</font>

336
00:20:30,980 --> 00:20:38,230
index vector then the code between<font color="#E5E5E5"> the</font>

337
00:20:35,210 --> 00:20:45,260
does and the semicolon will be executed

338
00:20:38,230 --> 00:20:49,220
and that means at the beginning we have

339
00:20:45,260 --> 00:20:52,250
an<font color="#E5E5E5"> index on the stack and in the end we</font>

340
00:20:49,220 --> 00:20:56,059
have the actual physical address<font color="#E5E5E5"> of the</font>

341
00:20:52,250 --> 00:21:00,230
data item of of that index location on

342
00:20:56,059 --> 00:21:02,510
the stack<font color="#CCCCCC"> there is a little</font><font color="#E5E5E5"> bit of an</font>

343
00:21:00,230 --> 00:21:06,049
invisible<font color="#E5E5E5"> mystery here</font>

344
00:21:02,510 --> 00:21:11,029
because the word does returns the

345
00:21:06,049 --> 00:21:14,870
address<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> first location</font><font color="#E5E5E5"> of the</font>

346
00:21:11,029 --> 00:21:18,139
<font color="#CCCCCC">datatype so</font><font color="#E5E5E5"> we have an index on the</font>

347
00:21:14,870 --> 00:21:20,330
stack if you execute us<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> also on</font>

348
00:21:18,139 --> 00:21:23,059
top<font color="#E5E5E5"> of the index we have</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> address of</font>

349
00:21:20,330 --> 00:21:26,120
<font color="#E5E5E5">the first field now then we first have</font>

350
00:21:23,059 --> 00:21:32,049
to<font color="#E5E5E5"> swap these two items</font><font color="#CCCCCC"> to get the index</font>

351
00:21:26,120 --> 00:21:34,969
on top we apply the<font color="#CCCCCC"> sells operator to it</font>

352
00:21:32,049 --> 00:21:36,980
now yeah I have to get to the<font color="#E5E5E5"> sells</font>

353
00:21:34,970 --> 00:21:39,769
operator why<font color="#E5E5E5"> that sells operator is</font>

354
00:21:36,980 --> 00:21:44,360
needed when force<font color="#E5E5E5"> is working on let's</font>

355
00:21:39,769 --> 00:21:51,230
say an Intel machine<font color="#CCCCCC"> then of</font><font color="#E5E5E5"> course we</font>

356
00:21:44,360 --> 00:21:54,860
do have bytes and<font color="#E5E5E5"> so</font><font color="#CCCCCC"> if our addressable</font>

357
00:21:51,230 --> 00:21:57,980
cell is 32 bits wide<font color="#CCCCCC"> it consumes</font><font color="#E5E5E5"> 4 bytes</font>

358
00:21:54,860 --> 00:22:04,219
<font color="#E5E5E5">and the</font><font color="#CCCCCC"> sells operator is exactly the</font>

359
00:21:57,980 --> 00:22:09,230
operator<font color="#E5E5E5"> that</font><font color="#CCCCCC"> computes out of the number</font>

360
00:22:04,220 --> 00:22:11,330
of the<font color="#E5E5E5"> 32</font><font color="#CCCCCC"> bit item that I want it</font>

361
00:22:09,230 --> 00:22:15,409
computes the byte address<font color="#E5E5E5"> on an</font>

362
00:22:11,330 --> 00:22:18,710
intermission<font color="#E5E5E5"> for it and so we mark we</font>

363
00:22:15,409 --> 00:22:22,399
<font color="#E5E5E5">multiply the index for instance using</font>

364
00:22:18,710 --> 00:22:25,890
cells by<font color="#E5E5E5"> by 4 because we have 30 32 bit</font>

365
00:22:22,399 --> 00:22:28,620
for system and then we add it at this

366
00:22:25,890 --> 00:22:30,780
<font color="#CCCCCC">to the first address</font><font color="#E5E5E5"> that was left by</font>

367
00:22:28,620 --> 00:22:36,060
<font color="#E5E5E5">the does and that gives up them the</font>

368
00:22:30,780 --> 00:22:41,610
physical<font color="#E5E5E5"> location of</font><font color="#CCCCCC"> the data item</font><font color="#E5E5E5"> at</font>

369
00:22:36,060 --> 00:22:44,700
index in the vector so<font color="#E5E5E5"> three index</font>

370
00:22:41,610 --> 00:22:49,020
vectors<font color="#E5E5E5"> returns the memory address of</font>

371
00:22:44,700 --> 00:22:52,110
<font color="#CCCCCC">the</font><font color="#E5E5E5"> fourth element of index vector and</font>

372
00:22:49,020 --> 00:22:55,440
this<font color="#CCCCCC"> is because</font><font color="#E5E5E5"> four starts counting</font>

373
00:22:52,110 --> 00:22:58,340
from<font color="#E5E5E5"> zero so you always count 0 1 2 3</font>

374
00:22:55,440 --> 00:22:58,340
<font color="#E5E5E5">and so on</font>

375
00:23:00,770 --> 00:23:07,470
<font color="#CCCCCC">controlled structures of course we have</font>

376
00:23:05,280 --> 00:23:11,430
<font color="#CCCCCC">controlled structures and can</font><font color="#E5E5E5"> modify the</font>

377
00:23:07,470 --> 00:23:16,350
<font color="#CCCCCC">program flow</font><font color="#E5E5E5"> as in every other complete</font>

378
00:23:11,430 --> 00:23:18,900
programming language again with a

379
00:23:16,350 --> 00:23:22,070
special feature<font color="#E5E5E5"> that this is a reverse</font>

380
00:23:18,900 --> 00:23:24,990
polish notation<font color="#E5E5E5"> so we first compute</font>

381
00:23:22,070 --> 00:23:28,710
<font color="#E5E5E5">always we first compute arguments and</font>

382
00:23:24,990 --> 00:23:33,810
then we apply<font color="#E5E5E5"> the operator to it in this</font>

383
00:23:28,710 --> 00:23:37,200
<font color="#E5E5E5">case if we have the if clause then we</font>

384
00:23:33,810 --> 00:23:41,820
first compute a flag<font color="#E5E5E5"> however complex</font>

385
00:23:37,200 --> 00:23:44,790
that might be and then the if interprets

386
00:23:41,820 --> 00:23:48,389
the top item<font color="#E5E5E5"> on the stack as the flag</font>

387
00:23:44,790 --> 00:23:51,540
<font color="#E5E5E5">and if the flag is true the code between</font>

388
00:23:48,390 --> 00:23:54,300
<font color="#CCCCCC">F</font><font color="#E5E5E5"> and then will be executed and if the</font>

389
00:23:51,540 --> 00:23:58,830
flag on top<font color="#CCCCCC"> of the stack is 0 then a</font>

390
00:23:54,300 --> 00:24:02,760
jump after then is performed<font color="#CCCCCC"> so then if</font>

391
00:23:58,830 --> 00:24:05,280
else then is<font color="#E5E5E5"> also then easy wall is easy</font>

392
00:24:02,760 --> 00:24:08,280
to understand all those<font color="#E5E5E5"> are syntaxes</font>

393
00:24:05,280 --> 00:24:10,710
unconventional<font color="#E5E5E5"> if the flag</font><font color="#CCCCCC"> is true we</font>

394
00:24:08,280 --> 00:24:14,129
execute the code between<font color="#CCCCCC"> if and</font><font color="#E5E5E5"> else</font><font color="#CCCCCC"> if</font>

395
00:24:10,710 --> 00:24:19,710
<font color="#CCCCCC">it</font><font color="#E5E5E5"> is false we execute the code between</font>

396
00:24:14,130 --> 00:24:22,260
<font color="#E5E5E5">else and then another loop is the</font><font color="#CCCCCC"> begin</font>

397
00:24:19,710 --> 00:24:25,110
<font color="#E5E5E5">until loop which always executes the</font>

398
00:24:22,260 --> 00:24:27,750
loop<font color="#E5E5E5"> at least once and then at the end</font>

399
00:24:25,110 --> 00:24:31,260
we decide<font color="#E5E5E5"> whether we jump back or</font>

400
00:24:27,750 --> 00:24:35,760
whether we<font color="#E5E5E5"> leaves the</font><font color="#CCCCCC"> dual</font><font color="#E5E5E5"> and the other</font>

401
00:24:31,260 --> 00:24:38,460
variant is where we compute a flag<font color="#E5E5E5"> if</font>

402
00:24:35,760 --> 00:24:39,640
the flag is<font color="#E5E5E5"> true we execute something</font>

403
00:24:38,460 --> 00:24:42,280
<font color="#E5E5E5">between while</font>

404
00:24:39,640 --> 00:24:46,030
and then the repeat<font color="#CCCCCC"> jumps back to the</font>

405
00:24:42,280 --> 00:24:48,550
<font color="#E5E5E5">begin does the next computation and only</font>

406
00:24:46,030 --> 00:24:54,070
if we are<font color="#E5E5E5"> false we jump out</font><font color="#CCCCCC"> of the loop</font>

407
00:24:48,550 --> 00:24:58,149
after the repeat<font color="#E5E5E5"> another variant is</font>

408
00:24:54,070 --> 00:25:00,909
counted loops<font color="#E5E5E5"> that consume two items on</font>

409
00:24:58,150 --> 00:25:05,830
the<font color="#CCCCCC"> stack a start value and a limiting</font>

410
00:25:00,910 --> 00:25:08,500
value and then<font color="#CCCCCC"> we'll do do we loop</font><font color="#E5E5E5"> so</font>

411
00:25:05,830 --> 00:25:11,530
many times around<font color="#E5E5E5"> and then there is the</font>

412
00:25:08,500 --> 00:25:20,260
array which returns us the current loop

413
00:25:11,530 --> 00:25:25,210
index compiler extension now things

414
00:25:20,260 --> 00:25:28,720
become<font color="#CCCCCC"> really interesting because not</font>

415
00:25:25,210 --> 00:25:32,670
<font color="#CCCCCC">only can you define new words</font><font color="#E5E5E5"> or</font>

416
00:25:28,720 --> 00:25:38,500
functions and force but<font color="#E5E5E5"> you can also</font>

417
00:25:32,670 --> 00:25:42,340
modify<font color="#E5E5E5"> the compiler itself and modifying</font>

418
00:25:38,500 --> 00:25:45,930
the compiler<font color="#CCCCCC"> the important name here or</font>

419
00:25:42,340 --> 00:25:49,570
word here is the<font color="#CCCCCC"> word</font><font color="#E5E5E5"> immediate that is</font>

420
00:25:45,930 --> 00:25:54,990
attached to a word definition and it

421
00:25:49,570 --> 00:25:59,110
just means if the compiler encounters<font color="#CCCCCC"> an</font>

422
00:25:54,990 --> 00:26:03,940
immediate word that will be<font color="#E5E5E5"> immediately</font>

423
00:25:59,110 --> 00:26:07,000
executed<font color="#CCCCCC"> by the compiler whereas any</font>

424
00:26:03,940 --> 00:26:09,970
word<font color="#CCCCCC"> that is not</font><font color="#E5E5E5"> immediate and that is</font>

425
00:26:07,000 --> 00:26:12,670
part of a word definition will judge its

426
00:26:09,970 --> 00:26:17,170
executable address will just be compiled

427
00:26:12,670 --> 00:26:21,760
into<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> and nothing</font><font color="#E5E5E5"> else and so in</font>

428
00:26:17,170 --> 00:26:24,520
essence this if and this then and<font color="#E5E5E5"> this</font>

429
00:26:21,760 --> 00:26:27,610
<font color="#E5E5E5">is else then they are all immediate</font>

430
00:26:24,520 --> 00:26:30,060
words which<font color="#E5E5E5"> execute why the compiler is</font>

431
00:26:27,610 --> 00:26:30,060
working

432
00:26:32,270 --> 00:26:40,740
so this mechanism<font color="#E5E5E5"> the extension of the</font>

433
00:26:38,160 --> 00:26:44,460
compiler can be used to bake your own

434
00:26:40,740 --> 00:26:48,030
<font color="#E5E5E5">case or to bake your own struct compiler</font>

435
00:26:44,460 --> 00:26:55,410
or<font color="#E5E5E5"> I mean to make</font><font color="#CCCCCC"> it really interested</font>

436
00:26:48,030 --> 00:26:59,070
I call this syntactic sugar<font color="#E5E5E5"> so the</font>

437
00:26:55,410 --> 00:27:02,850
question at hand was<font color="#E5E5E5"> to define a</font><font color="#CCCCCC"> MOS</font>

438
00:26:59,070 --> 00:27:04,980
alphabets<font color="#E5E5E5"> generator so you would type</font><font color="#CCCCCC"> in</font>

439
00:27:02,850 --> 00:27:09,800
numbers and strings<font color="#E5E5E5"> and it would be</font>

440
00:27:04,980 --> 00:27:14,430
converted into<font color="#E5E5E5"> the Morse code</font><font color="#CCCCCC"> and if you</font>

441
00:27:09,800 --> 00:27:17,129
<font color="#E5E5E5">sugar syntactically your compiler</font><font color="#CCCCCC"> you</font>

442
00:27:14,430 --> 00:27:20,810
can write down<font color="#E5E5E5"> it you can write it down</font>

443
00:27:17,130 --> 00:27:24,510
<font color="#E5E5E5">in this syntax which is pretty intuitive</font>

444
00:27:20,810 --> 00:27:26,610
<font color="#CCCCCC">you'll have a dot and the dash and</font><font color="#E5E5E5"> then</font>

445
00:27:24,510 --> 00:27:30,240
you have the<font color="#CCCCCC"> vertical bar</font><font color="#E5E5E5"> and the</font>

446
00:27:26,610 --> 00:27:34,889
vertical<font color="#CCCCCC"> bar</font><font color="#E5E5E5"> gives it</font><font color="#CCCCCC"> and takes a name</font>

447
00:27:30,240 --> 00:27:40,520
and the name<font color="#E5E5E5"> from this moment on will be</font>

448
00:27:34,890 --> 00:27:44,040
<font color="#E5E5E5">it will be associated</font><font color="#CCCCCC"> with the dot</font><font color="#E5E5E5"> dash</font>

449
00:27:40,520 --> 00:27:47,790
so what you have to<font color="#CCCCCC"> do in</font><font color="#E5E5E5"> order to do</font>

450
00:27:44,040 --> 00:27:50,629
this<font color="#CCCCCC"> magic</font><font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to define</font><font color="#E5E5E5"> most table</font>

451
00:27:47,790 --> 00:27:53,520
<font color="#CCCCCC">: as the beginning of</font><font color="#E5E5E5"> the definition</font>

452
00:27:50,630 --> 00:27:55,650
<font color="#CCCCCC">semicolon more stable as the end of</font>

453
00:27:53,520 --> 00:27:58,590
course there<font color="#E5E5E5"> one more lines they don't</font>

454
00:27:55,650 --> 00:28:01,200
fit here<font color="#E5E5E5"> and so basically what you have</font>

455
00:27:58,590 --> 00:28:04,320
<font color="#CCCCCC">to do is you have to define</font><font color="#E5E5E5"> your</font>

456
00:28:01,200 --> 00:28:08,130
<font color="#E5E5E5">compiling words more stable colon</font>

457
00:28:04,320 --> 00:28:12,120
<font color="#E5E5E5">semicolon more stable vertical bar which</font>

458
00:28:08,130 --> 00:28:14,970
is<font color="#E5E5E5"> used at</font><font color="#CCCCCC"> the end of the dots and</font>

459
00:28:12,120 --> 00:28:18,360
dashes<font color="#CCCCCC"> you have to</font><font color="#E5E5E5"> define your dots and</font>

460
00:28:14,970 --> 00:28:21,390
your dash<font color="#E5E5E5"> and each of those definitions</font>

461
00:28:18,360 --> 00:28:24,360
<font color="#CCCCCC">takes between</font><font color="#E5E5E5"> one and four lines of code</font>

462
00:28:21,390 --> 00:28:26,820
<font color="#CCCCCC">and if you are an experienced</font><font color="#E5E5E5"> programmer</font>

463
00:28:24,360 --> 00:28:29,159
<font color="#CCCCCC">I mean you look</font><font color="#E5E5E5"> at the problem and then</font>

464
00:28:26,820 --> 00:28:32,270
<font color="#CCCCCC">it is</font><font color="#E5E5E5"> very easy</font><font color="#CCCCCC"> to come up</font><font color="#E5E5E5"> with a</font>

465
00:28:29,160 --> 00:28:32,270
<font color="#E5E5E5">solution to do that</font>

466
00:28:33,330 --> 00:28:41,918
this pretty much<font color="#CCCCCC"> covers the basic</font>

467
00:28:36,870 --> 00:28:45,639
<font color="#E5E5E5">capabilities of force</font><font color="#CCCCCC"> it is standardized</font>

468
00:28:41,919 --> 00:28:48,429
and there are<font color="#CCCCCC"> annual meetings on a</font>

469
00:28:45,640 --> 00:28:50,530
European or actually nowadays<font color="#CCCCCC"> on an</font>

470
00:28:48,429 --> 00:28:54,220
international<font color="#E5E5E5"> level</font><font color="#CCCCCC"> the Euro falls</font>

471
00:28:50,530 --> 00:28:55,678
conferences and this is where the

472
00:28:54,220 --> 00:28:59,250
standardization<font color="#E5E5E5"> and ongoing</font>

473
00:28:55,679 --> 00:29:03,429
<font color="#CCCCCC">standardization</font><font color="#E5E5E5"> process is taking place</font>

474
00:28:59,250 --> 00:29:06,419
unfortunately<font color="#E5E5E5"> I'm missing one important</font>

475
00:29:03,429 --> 00:29:06,419
slide here

476
00:29:12,360 --> 00:29:22,120
<font color="#E5E5E5">okay I will use this fall for explain</font>

477
00:29:19,510 --> 00:29:23,350
why I love<font color="#CCCCCC"> force</font><font color="#E5E5E5"> I didn't tell you why I</font>

478
00:29:22,120 --> 00:29:28,179
love force yet

479
00:29:23,350 --> 00:29:32,830
I love force because any character

480
00:29:28,180 --> 00:29:36,880
except<font color="#E5E5E5"> tap and space can</font><font color="#CCCCCC"> be part of</font><font color="#E5E5E5"> a</font>

481
00:29:32,830 --> 00:29:42,090
name so I<font color="#CCCCCC"> can use all special characters</font>

482
00:29:36,880 --> 00:29:48,160
in a name and<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> the mystery</font><font color="#E5E5E5"> why in</font>

483
00:29:42,090 --> 00:29:53,350
force<font color="#CCCCCC"> - rod is</font><font color="#E5E5E5"> not a - and a</font><font color="#CCCCCC"> rod it is</font>

484
00:29:48,160 --> 00:29:56,920
<font color="#CCCCCC">just the word</font><font color="#E5E5E5"> -</font><font color="#CCCCCC"> rod and for I mean</font>

485
00:29:53,350 --> 00:30:00,129
<font color="#E5E5E5">pretty obvious reasons</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is the inverse</font>

486
00:29:56,920 --> 00:30:03,250
of rod and so I called it is usually

487
00:30:00,130 --> 00:30:13,890
called - rod as in<font color="#E5E5E5"> as an indication of</font>

488
00:30:03,250 --> 00:30:13,890
of inverse and that<font color="#E5E5E5"> means in essence the</font>

489
00:30:15,420 --> 00:30:26,110
hundreds<font color="#E5E5E5"> of men</font><font color="#CCCCCC"> days</font><font color="#E5E5E5"> that up to now went</font>

490
00:30:21,340 --> 00:30:28,629
into regular expression compilers force

491
00:30:26,110 --> 00:30:32,469
doesn't<font color="#E5E5E5"> need regular expressions I mean</font>

492
00:30:28,630 --> 00:30:35,200
the passing process is so simple<font color="#E5E5E5"> you</font>

493
00:30:32,470 --> 00:30:38,260
just<font color="#E5E5E5"> look</font><font color="#CCCCCC"> for the next</font><font color="#E5E5E5"> space and that's</font>

494
00:30:35,200 --> 00:30:41,590
all and everything that is enclosed in

495
00:30:38,260 --> 00:30:45,160
space<font color="#CCCCCC"> all its to be more precise is</font>

496
00:30:41,590 --> 00:30:47,260
enclosed by<font color="#E5E5E5"> white space is just</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> force</font>

497
00:30:45,160 --> 00:30:50,560
word that<font color="#E5E5E5"> gets looked up in a dictionary</font>

498
00:30:47,260 --> 00:30:52,840
<font color="#CCCCCC">is that it's not successful it an</font>

499
00:30:50,560 --> 00:30:58,200
attempt is<font color="#CCCCCC"> made to convert it to a</font>

500
00:30:52,840 --> 00:30:59,520
<font color="#E5E5E5">number</font><font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> all which means that</font>

501
00:30:58,200 --> 00:31:02,710
[Music]

502
00:30:59,520 --> 00:31:05,740
<font color="#CCCCCC">are to put it in another</font><font color="#E5E5E5"> way when I</font>

503
00:31:02,710 --> 00:31:09,190
started<font color="#E5E5E5"> to program in force</font><font color="#CCCCCC"> I used to</font>

504
00:31:05,740 --> 00:31:16,530
study<font color="#CCCCCC"> computer science</font><font color="#E5E5E5"> which was pretty</font>

505
00:31:09,190 --> 00:31:21,520
new<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> mid 1970s and I stood in awe</font>

506
00:31:16,530 --> 00:31:24,160
<font color="#E5E5E5">before the compiler writers because that</font>

507
00:31:21,520 --> 00:31:28,030
seems like an<font color="#E5E5E5"> extremely complex thing</font><font color="#CCCCCC"> to</font>

508
00:31:24,160 --> 00:31:30,940
do and when I then started<font color="#CCCCCC"> to program in</font>

509
00:31:28,030 --> 00:31:34,629
force<font color="#E5E5E5"> and when I learned how to extend</font>

510
00:31:30,940 --> 00:31:37,180
<font color="#E5E5E5">the compiling capabilities of force this</font>

511
00:31:34,630 --> 00:31:43,950
all of the compiler writers went

512
00:31:37,180 --> 00:31:43,950
completely away<font color="#E5E5E5"> it is simple and</font>

513
00:31:46,000 --> 00:31:54,490
if you think<font color="#CCCCCC"> about how force works and</font>

514
00:31:49,780 --> 00:32:01,149
how<font color="#CCCCCC"> you program enforce</font><font color="#E5E5E5"> it is basically</font>

515
00:31:54,490 --> 00:32:03,610
pure anarchy<font color="#CCCCCC"> because you can if you are</font>

516
00:32:01,150 --> 00:32:06,970
a good programmer you<font color="#CCCCCC"> can do excellent</font>

517
00:32:03,610 --> 00:32:11,229
things in force<font color="#E5E5E5"> if you acquire a bad</font>

518
00:32:06,970 --> 00:32:14,880
programmer<font color="#E5E5E5"> you are able</font><font color="#CCCCCC"> to rewrite the</font>

519
00:32:11,230 --> 00:32:20,650
most<font color="#E5E5E5"> rigorous code which is absolutely</font>

520
00:32:14,880 --> 00:32:25,750
<font color="#E5E5E5">unremember</font><font color="#CCCCCC"> abou</font><font color="#E5E5E5"> in no time so in a sense</font>

521
00:32:20,650 --> 00:32:28,060
<font color="#E5E5E5">force is a programming amplifier it</font>

522
00:32:25,750 --> 00:32:30,880
gives you capabilities that you don't

523
00:32:28,060 --> 00:32:35,379
have in most other programming languages

524
00:32:30,880 --> 00:32:39,930
<font color="#E5E5E5">to express yourself and to create your</font>

525
00:32:35,380 --> 00:32:39,930
own syntax<font color="#E5E5E5"> to solve a problem</font>

526
00:32:46,279 --> 00:32:53,359
and then the<font color="#E5E5E5"> next logical step</font><font color="#CCCCCC"> of course</font>

527
00:32:50,029 --> 00:32:55,330
is because<font color="#E5E5E5"> the</font><font color="#CCCCCC"> force virtual machine is</font>

528
00:32:53,359 --> 00:32:59,210
so<font color="#E5E5E5"> simple</font>

529
00:32:55,330 --> 00:33:01,728
on most register machines it has to be

530
00:32:59,210 --> 00:33:04,009
<font color="#CCCCCC">emulated I mean just like Java has</font><font color="#E5E5E5"> to be</font>

531
00:33:01,729 --> 00:33:05,989
emulated<font color="#CCCCCC"> and there are also bytecode</font>

532
00:33:04,009 --> 00:33:08,869
implementations of force like for

533
00:33:05,989 --> 00:33:11,659
instance<font color="#CCCCCC"> open boot is just a bytecode</font>

534
00:33:08,869 --> 00:33:15,168
implementation of the fourth language<font color="#E5E5E5"> on</font>

535
00:33:11,659 --> 00:33:19,639
a large variety<font color="#E5E5E5"> of different</font><font color="#CCCCCC"> processes</font>

536
00:33:15,169 --> 00:33:22,429
<font color="#CCCCCC">and the advantage of this approach</font><font color="#E5E5E5"> is</font>

537
00:33:19,639 --> 00:33:25,849
<font color="#CCCCCC">that if you have peripheral IO cards</font>

538
00:33:22,429 --> 00:33:28,389
they will execute the false<font color="#E5E5E5"> bytecode and</font>

539
00:33:25,849 --> 00:33:31,210
then the<font color="#CCCCCC"> fourth bytecode is just</font>

540
00:33:28,389 --> 00:33:35,269
interpreted on these<font color="#E5E5E5"> different processes</font>

541
00:33:31,210 --> 00:33:37,729
<font color="#E5E5E5">but the bytecode on the peripheral card</font>

542
00:33:35,269 --> 00:33:40,429
remains exactly the<font color="#E5E5E5"> same on</font><font color="#CCCCCC"> all machines</font>

543
00:33:37,729 --> 00:33:44,929
<font color="#CCCCCC">so this is where the big market niche</font>

544
00:33:40,429 --> 00:33:47,269
was for open boot when we had at<font color="#E5E5E5"> least</font>

545
00:33:44,929 --> 00:33:54,769
<font color="#E5E5E5">four different variants</font><font color="#CCCCCC"> of RISC</font>

546
00:33:47,269 --> 00:33:56,989
processors in the<font color="#E5E5E5"> 1990s but since the</font>

547
00:33:54,769 --> 00:34:00,259
<font color="#CCCCCC">fourth machine is the virtual machine</font><font color="#E5E5E5"> is</font>

548
00:33:56,989 --> 00:34:05,659
such a simple thing<font color="#CCCCCC"> it is</font><font color="#E5E5E5"> very easy to</font>

549
00:34:00,259 --> 00:34:07,909
<font color="#CCCCCC">implement it in real hardware and I have</font>

550
00:34:05,659 --> 00:34:14,629
been<font color="#CCCCCC"> doing that</font><font color="#E5E5E5"> for the</font><font color="#CCCCCC"> past 15 years</font>

551
00:34:07,909 --> 00:34:18,980
<font color="#E5E5E5">and because I earn my</font><font color="#CCCCCC"> money by</font><font color="#E5E5E5"> feeling</font>

552
00:34:14,629 --> 00:34:22,190
<font color="#E5E5E5">FPGAs with content and so if I have a</font>

553
00:34:18,980 --> 00:34:24,949
new<font color="#E5E5E5"> piece of</font><font color="#CCCCCC"> hardware with an FPGA on it</font>

554
00:34:22,190 --> 00:34:28,668
the first thing<font color="#CCCCCC"> I do is I put</font><font color="#E5E5E5"> microcar</font>

555
00:34:24,949 --> 00:34:32,178
on it<font color="#E5E5E5"> and then I can also always explore</font>

556
00:34:28,668 --> 00:34:36,098
the FPGA phone in somebody instead of

557
00:34:32,179 --> 00:34:42,069
<font color="#E5E5E5">and I can program the FPGA</font>

558
00:34:36,099 --> 00:34:45,679
explore it and changing<font color="#E5E5E5"> the code and</font>

559
00:34:42,069 --> 00:34:49,549
executing it<font color="#E5E5E5"> on the FPGA</font><font color="#CCCCCC"> on the software</font>

560
00:34:45,679 --> 00:34:52,579
<font color="#E5E5E5">level takes well</font><font color="#CCCCCC"> 10-15 seconds whereas</font>

561
00:34:49,549 --> 00:34:56,960
to run a new<font color="#CCCCCC"> version was</font><font color="#E5E5E5"> a change FPGA</font>

562
00:34:52,579 --> 00:34:58,860
<font color="#E5E5E5">which changed VHDL code</font><font color="#CCCCCC"> on the current</font>

563
00:34:56,960 --> 00:35:00,630
generation<font color="#E5E5E5"> that I'm working on with</font>

564
00:34:58,860 --> 00:35:04,320
<font color="#CCCCCC">for satellites</font><font color="#E5E5E5"> and radiation</font>

565
00:35:00,630 --> 00:35:08,040
<font color="#E5E5E5">environments you were talking about 45</font>

566
00:35:04,320 --> 00:35:13,530
minutes<font color="#E5E5E5"> so this approach makes a lot of</font>

567
00:35:08,040 --> 00:35:16,230
sense<font color="#CCCCCC"> and if you look at at the diagram</font>

568
00:35:13,530 --> 00:35:22,830
<font color="#CCCCCC">you see the</font><font color="#E5E5E5"> one-to-one relation more or</font>

569
00:35:16,230 --> 00:35:24,690
less to<font color="#CCCCCC"> the virtual</font><font color="#E5E5E5"> machine and then all</font>

570
00:35:22,830 --> 00:35:29,910
this<font color="#CCCCCC"> is not really a part of</font><font color="#E5E5E5"> the force</font>

571
00:35:24,690 --> 00:35:32,820
<font color="#CCCCCC">talk</font><font color="#E5E5E5"> but this is my baby basically apart</font>

572
00:35:29,910 --> 00:35:36,049
from interrupts since I'm a real time

573
00:35:32,820 --> 00:35:40,350
programmer interrupts are very important

574
00:35:36,050 --> 00:35:43,620
<font color="#CCCCCC">there is also the flip side of the coin</font>

575
00:35:40,350 --> 00:35:47,009
<font color="#E5E5E5">and the flip side of the coin is and I</font>

576
00:35:43,620 --> 00:35:49,859
spelled it out and an interrupt is an

577
00:35:47,010 --> 00:35:54,150
event did happen<font color="#E5E5E5"> that was not expected</font>

578
00:35:49,860 --> 00:35:59,280
<font color="#CCCCCC">by the software whereas the pause</font>

579
00:35:54,150 --> 00:36:01,740
exactly the opposite<font color="#E5E5E5"> the an event did</font>

580
00:35:59,280 --> 00:36:05,070
not<font color="#E5E5E5"> happen that</font><font color="#CCCCCC"> the software</font><font color="#E5E5E5"> expected</font>

581
00:36:01,740 --> 00:36:08,520
like the<font color="#E5E5E5"> software wants to fetch a bite</font>

582
00:36:05,070 --> 00:36:13,830
from<font color="#E5E5E5"> a</font><font color="#CCCCCC"> Ewart</font><font color="#E5E5E5"> but there is nothing</font><font color="#CCCCCC"> on the</font>

583
00:36:08,520 --> 00:36:17,550
UART yet it's<font color="#E5E5E5"> still to come and in</font><font color="#CCCCCC"> micro</font>

584
00:36:13,830 --> 00:36:20,580
<font color="#E5E5E5">core I converted this</font><font color="#CCCCCC"> to like the flip</font>

585
00:36:17,550 --> 00:36:22,530
side<font color="#E5E5E5"> as a hardware signal as a flip side</font>

586
00:36:20,580 --> 00:36:25,860
<font color="#CCCCCC">to the</font><font color="#E5E5E5"> interrupt and then what you</font>

587
00:36:22,530 --> 00:36:28,350
basically do is the<font color="#E5E5E5"> hardware signals on</font>

588
00:36:25,860 --> 00:36:32,430
a hardware level<font color="#E5E5E5"> that what this</font>

589
00:36:28,350 --> 00:36:35,490
operation<font color="#E5E5E5"> cannot be done then a trip is</font>

590
00:36:32,430 --> 00:36:37,379
called<font color="#E5E5E5"> and</font><font color="#CCCCCC"> closes scheduler and does</font>

591
00:36:35,490 --> 00:36:39,529
some other<font color="#E5E5E5"> tasks in the multitasking</font>

592
00:36:37,380 --> 00:36:39,530
<font color="#E5E5E5">environment</font>

593
00:36:40,040 --> 00:36:47,940
<font color="#E5E5E5">okay that's the end</font><font color="#CCCCCC"> of the talk</font>

594
00:36:44,900 --> 00:37:01,190
these are interesting links in that

595
00:36:47,940 --> 00:37:01,190
<font color="#E5E5E5">respect questions piece questions</font>

596
00:37:11,870 --> 00:37:17,240
so how many<font color="#E5E5E5"> look-up tables</font><font color="#CCCCCC"> you need for</font>

597
00:37:14,480 --> 00:37:19,310
your<font color="#E5E5E5"> fourth machine</font><font color="#CCCCCC"> look</font><font color="#E5E5E5"> up tables why</font>

598
00:37:17,240 --> 00:37:23,560
would I need<font color="#CCCCCC"> to look up tables now in</font>

599
00:37:19,310 --> 00:37:28,220
the<font color="#E5E5E5"> FPGA just the size of</font><font color="#CCCCCC"> the soul</font><font color="#E5E5E5"> okay</font>

600
00:37:23,560 --> 00:37:30,710
<font color="#CCCCCC">I have been</font><font color="#E5E5E5"> working on</font><font color="#CCCCCC"> the micro semi</font>

601
00:37:28,220 --> 00:37:32,270
<font color="#CCCCCC">what used</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be active for such a long</font>

602
00:37:30,710 --> 00:37:35,510
time<font color="#CCCCCC"> they have a very</font><font color="#E5E5E5"> very fine</font>

603
00:37:32,270 --> 00:37:38,750
<font color="#CCCCCC">granularity</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> on those it is around</font>

604
00:37:35,510 --> 00:37:44,030
<font color="#CCCCCC">five thousand cells I think if you if we</font>

605
00:37:38,750 --> 00:37:50,380
talk<font color="#E5E5E5"> about</font><font color="#CCCCCC"> Xilinx or lettuce or Atmel</font><font color="#E5E5E5"> we</font>

606
00:37:44,030 --> 00:37:50,380
are talking about<font color="#CCCCCC"> 2000 to 2500</font>

607
00:37:56,190 --> 00:37:59,420
any more questions

608
00:38:00,290 --> 00:38:03,490
I have a question

609
00:38:03,500 --> 00:38:09,830
you were<font color="#E5E5E5"> here with we fixed the</font><font color="#CCCCCC"> Internet</font>

610
00:38:06,050 --> 00:38:12,440
guys is that<font color="#E5E5E5"> correct yeah what has the</font>

611
00:38:09,830 --> 00:38:19,310
<font color="#E5E5E5">program language</font><font color="#CCCCCC"> forth to do with we fix</font>

612
00:38:12,440 --> 00:38:22,640
the<font color="#CCCCCC"> Internet as bounty he did a full new</font>

613
00:38:19,310 --> 00:38:25,310
<font color="#CCCCCC">internet stack</font><font color="#E5E5E5"> all programmed in force</font>

614
00:38:22,640 --> 00:38:27,589
<font color="#E5E5E5">yes he had to talk earlier</font><font color="#CCCCCC"> today and he</font>

615
00:38:25,310 --> 00:38:29,779
said and he referenced yours

616
00:38:27,590 --> 00:38:34,040
so maybe burn for the others<font color="#E5E5E5"> just</font>

617
00:38:29,780 --> 00:38:37,160
compressing one problem we have with

618
00:38:34,040 --> 00:38:39,080
<font color="#E5E5E5">Internet is attack surface</font><font color="#CCCCCC"> it's just too</font>

619
00:38:37,160 --> 00:38:42,859
complicated<font color="#CCCCCC"> everything we do is too</font>

620
00:38:39,080 --> 00:38:44,660
complicated<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we built a huge attack</font>

621
00:38:42,860 --> 00:38:48,620
surface for all the evil<font color="#CCCCCC"> people out</font>

622
00:38:44,660 --> 00:38:51,710
there and we have<font color="#E5E5E5"> to go down make</font><font color="#CCCCCC"> it</font>

623
00:38:48,620 --> 00:38:54,500
simpler and simpler<font color="#E5E5E5"> until we understand</font>

624
00:38:51,710 --> 00:38:57,680
what we are<font color="#CCCCCC"> doing and</font><font color="#E5E5E5"> force is one way</font>

625
00:38:54,500 --> 00:39:01,730
<font color="#E5E5E5">to make things simpler at least our</font>

626
00:38:57,680 --> 00:39:07,040
development systems set<font color="#CCCCCC"> the</font><font color="#E5E5E5"> point here</font>

627
00:39:01,730 --> 00:39:09,020
<font color="#E5E5E5">and it's not just writing a stake in</font>

628
00:39:07,040 --> 00:39:12,580
<font color="#CCCCCC">force it's also when you think about</font>

629
00:39:09,020 --> 00:39:16,460
<font color="#E5E5E5">JavaScript it's too complicated even</font>

630
00:39:12,580 --> 00:39:20,660
even our image file formats are<font color="#E5E5E5"> now so</font>

631
00:39:16,460 --> 00:39:24,890
complicated that<font color="#CCCCCC"> you can inject attacks</font>

632
00:39:20,660 --> 00:39:27,859
in<font color="#CCCCCC"> an PNG or</font><font color="#E5E5E5"> JPEG and that's not the</font>

633
00:39:24,890 --> 00:39:31,549
<font color="#CCCCCC">right way so</font><font color="#E5E5E5"> you have to cut down all</font>

634
00:39:27,860 --> 00:39:34,250
this complicated<font color="#CCCCCC"> and things and the</font>

635
00:39:31,550 --> 00:39:35,930
<font color="#E5E5E5">complicated stuff is just accidental</font>

636
00:39:34,250 --> 00:39:38,960
<font color="#CCCCCC">complication it's not necessary</font>

637
00:39:35,930 --> 00:39:43,408
<font color="#E5E5E5">complication and forth</font><font color="#CCCCCC"> fast teaches you</font>

638
00:39:38,960 --> 00:39:47,880
how to be simply as

639
00:39:43,409 --> 00:39:49,699
<font color="#E5E5E5">state</font><font color="#CCCCCC"> of mind</font><font color="#E5E5E5"> solve simply turns of</font>

640
00:39:47,880 --> 00:39:55,219
complex things

641
00:39:49,699 --> 00:39:55,219
thank you<font color="#CCCCCC"> very</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> Annie</font>

642
00:39:58,380 --> 00:40:05,850
<font color="#E5E5E5">may be a dumb question but when you run</font>

643
00:40:01,650 --> 00:40:09,050
<font color="#E5E5E5">those false program on the FPGA</font><font color="#CCCCCC"> how can</font>

644
00:40:05,850 --> 00:40:13,950
I imagine<font color="#E5E5E5"> this do you upload byte</font>

645
00:40:09,050 --> 00:40:18,540
sequence to this<font color="#CCCCCC"> FP yeah I have I have a</font>

646
00:40:13,950 --> 00:40:21,000
<font color="#CCCCCC">little what is</font><font color="#E5E5E5"> called I don't remember</font>

647
00:40:18,540 --> 00:40:24,029
it from the<font color="#E5E5E5"> SPARC architecture</font><font color="#CCCCCC"> so you</font>

648
00:40:21,000 --> 00:40:27,120
have<font color="#E5E5E5"> something on the side with receive</font>

649
00:40:24,030 --> 00:40:29,490
and a transmit channel that<font color="#E5E5E5"> allows you</font>

650
00:40:27,120 --> 00:40:32,609
<font color="#CCCCCC">to connect it as we call it the</font>

651
00:40:29,490 --> 00:40:34,560
umbilical to a host computer<font color="#E5E5E5"> and the</font>

652
00:40:32,610 --> 00:40:39,690
host computer runs across<font color="#E5E5E5"> across</font>

653
00:40:34,560 --> 00:40:42,860
compiler and a full image<font color="#E5E5E5"> of the program</font>

654
00:40:39,690 --> 00:40:45,960
and data memory<font color="#E5E5E5"> on the target system and</font>

655
00:40:42,860 --> 00:40:48,240
this was this technique you<font color="#CCCCCC"> are in</font>

656
00:40:45,960 --> 00:40:50,940
complete<font color="#CCCCCC"> control of the target system</font>

657
00:40:48,240 --> 00:40:53,580
<font color="#E5E5E5">because you can compile code that you</font>

658
00:40:50,940 --> 00:40:57,060
have<font color="#E5E5E5"> written in an editor</font><font color="#CCCCCC"> you load the</font>

659
00:40:53,580 --> 00:40:59,720
file and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> compile for the target</font>

660
00:40:57,060 --> 00:41:03,900
<font color="#E5E5E5">system and that compiles it into</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> mem</font>

661
00:40:59,720 --> 00:41:06,899
memory area in the<font color="#E5E5E5"> host and then you</font>

662
00:41:03,900 --> 00:41:09,720
transfer this memory image into the

663
00:41:06,900 --> 00:41:13,580
target<font color="#CCCCCC"> system and then you start the</font>

664
00:41:09,720 --> 00:41:16,020
<font color="#E5E5E5">target system and let it executes some</font>

665
00:41:13,580 --> 00:41:18,690
executable routine on<font color="#E5E5E5"> the target system</font>

666
00:41:16,020 --> 00:41:21,900
and then I mean this is standard

667
00:41:18,690 --> 00:41:24,120
technology basically<font color="#CCCCCC"> how you connect a</font>

668
00:41:21,900 --> 00:41:26,340
host<font color="#CCCCCC"> on the target system yo-you</font>

669
00:41:24,120 --> 00:41:32,339
binnacle<font color="#CCCCCC"> and then you have a very simple</font>

670
00:41:26,340 --> 00:41:35,070
monitor loop that waits on<font color="#CCCCCC"> the umbilical</font>

671
00:41:32,340 --> 00:41:38,700
to receive an address<font color="#CCCCCC"> that it should</font>

672
00:41:35,070 --> 00:41:41,220
jump<font color="#CCCCCC"> to and once it has executed what it</font>

673
00:41:38,700 --> 00:41:44,339
found<font color="#E5E5E5"> at this address then if everything</font>

674
00:41:41,220 --> 00:41:48,959
<font color="#E5E5E5">went</font><font color="#CCCCCC"> okay it sends back a</font><font color="#E5E5E5"> zero so the</font>

675
00:41:44,340 --> 00:41:51,450
host<font color="#E5E5E5"> system knows then well this word</font>

676
00:41:48,960 --> 00:41:54,420
has<font color="#CCCCCC"> been executed and everything was</font>

677
00:41:51,450 --> 00:41:58,020
<font color="#CCCCCC">fine</font><font color="#E5E5E5"> and if it is not a zero than it is</font>

678
00:41:54,420 --> 00:41:59,869
either a warning or<font color="#E5E5E5"> an arrow that's</font>

679
00:41:58,020 --> 00:42:02,970
<font color="#E5E5E5">simple</font>

680
00:41:59,869 --> 00:42:06,740
that did this answer your<font color="#E5E5E5"> question</font><font color="#CCCCCC"> not</font>

681
00:42:02,970 --> 00:42:06,740
<font color="#CCCCCC">really I I will come to you</font>

682
00:42:13,300 --> 00:42:18,360
thank you any more<font color="#E5E5E5"> questions from the</font>

683
00:42:16,240 --> 00:42:18,359
<font color="#CCCCCC">audience</font>

684
00:42:22,490 --> 00:42:26,379
<font color="#E5E5E5">okay thank you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much for your</font>

685
00:42:24,859 --> 00:42:33,840
attention

686
00:42:26,380 --> 00:42:33,840
[Applause]

