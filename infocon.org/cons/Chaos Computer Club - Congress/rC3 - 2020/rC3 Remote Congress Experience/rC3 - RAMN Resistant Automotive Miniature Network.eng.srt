1
00:00:01,500 --> 00:00:10,520
[Music]

2
00:00:07,350 --> 00:00:10,520
[Applause]

3
00:00:14,000 --> 00:00:18,160
hello everyone my name is camille i am a

4
00:00:16,000 --> 00:00:20,400
researcher at toyotaro cooperation

5
00:00:18,160 --> 00:00:21,840
and this is a presentation about ramen a

6
00:00:20,400 --> 00:00:23,680
platform that's been developed to make

7
00:00:21,840 --> 00:00:26,960
education and research in automotive

8
00:00:23,680 --> 00:00:28,320
systems more accessible

9
00:00:26,960 --> 00:00:30,160
the automotive industry can be

10
00:00:28,320 --> 00:00:31,920
inaccessible to many people because

11
00:00:30,160 --> 00:00:34,320
automotive projects may involve

12
00:00:31,920 --> 00:00:34,719
prohibitive costs and be tied to ndas

13
00:00:34,320 --> 00:00:37,280
that not

14
00:00:34,719 --> 00:00:39,120
everybody is willing to sign what we

15
00:00:37,280 --> 00:00:40,239
want to propose with this project is an

16
00:00:39,120 --> 00:00:42,640
inexpensive testbed

17
00:00:40,239 --> 00:00:44,160
to study and research automotive systems

18
00:00:42,640 --> 00:00:46,480
which is both open source

19
00:00:44,160 --> 00:00:47,279
and developed with open source tools so

20
00:00:46,480 --> 00:00:48,800
that at least

21
00:00:47,280 --> 00:00:51,600
anyone can get access to a good

22
00:00:48,800 --> 00:00:53,120
alternative for education and research

23
00:00:51,600 --> 00:00:55,600
the main focus of this test bed is

24
00:00:53,120 --> 00:00:57,280
security but you will see that the usage

25
00:00:55,600 --> 00:00:58,320
of the test bed is not limited to

26
00:00:57,280 --> 00:01:00,480
security

27
00:00:58,320 --> 00:01:03,760
and i will keep the security talk mostly

28
00:01:00,480 --> 00:01:03,760
for the end of the presentation

29
00:01:05,119 --> 00:01:08,720
i will start by giving a short

30
00:01:06,560 --> 00:01:11,280
introduction about automotive systems

31
00:01:08,720 --> 00:01:12,400
then i will present the design details

32
00:01:11,280 --> 00:01:14,240
of that testbed

33
00:01:12,400 --> 00:01:17,520
with various demonstrations and concrete

34
00:01:14,240 --> 00:01:19,520
details about its hardware and software

35
00:01:17,520 --> 00:01:21,360
as an example of how the testbed can be

36
00:01:19,520 --> 00:01:23,520
used i will spend some time

37
00:01:21,360 --> 00:01:25,200
experimenting with boost control

38
00:01:23,520 --> 00:01:27,039
and by that i mean i will go through the

39
00:01:25,200 --> 00:01:28,000
whole development process starting from

40
00:01:27,040 --> 00:01:30,320
evaluating the

41
00:01:28,000 --> 00:01:31,680
differential equations of a simple

42
00:01:30,320 --> 00:01:33,439
mechanical model

43
00:01:31,680 --> 00:01:35,119
i will experiment with various control

44
00:01:33,439 --> 00:01:37,520
strategies implement them

45
00:01:35,119 --> 00:01:39,360
in c and make measurements in a driving

46
00:01:37,520 --> 00:01:41,439
simulator using only data from the

47
00:01:39,360 --> 00:01:43,600
canvas

48
00:01:41,439 --> 00:01:45,679
and i will do all that using only open

49
00:01:43,600 --> 00:01:47,280
source tools

50
00:01:45,680 --> 00:01:49,280
this is to demonstrate how the testbed

51
00:01:47,280 --> 00:01:49,759
can be used but also to have a concrete

52
00:01:49,280 --> 00:01:51,680
project

53
00:01:49,759 --> 00:01:53,840
that i can use as a reference to explain

54
00:01:51,680 --> 00:01:54,399
after what corporately would have been

55
00:01:53,840 --> 00:01:56,640
different

56
00:01:54,399 --> 00:01:58,640
if you were experimenting with a real

57
00:01:56,640 --> 00:02:00,399
electronic control unit

58
00:01:58,640 --> 00:02:02,000
i will also explain how we can get close

59
00:02:00,399 --> 00:02:05,200
to automotive hardware and software

60
00:02:02,000 --> 00:02:06,719
without signing ndas so the second part

61
00:02:05,200 --> 00:02:08,479
of the talk is mainly here to give you

62
00:02:06,719 --> 00:02:09,359
more information about the automotive

63
00:02:08,479 --> 00:02:11,840
industry

64
00:02:09,360 --> 00:02:13,760
in case you are not familiar with it

65
00:02:11,840 --> 00:02:15,680
before i start let me just clarify that

66
00:02:13,760 --> 00:02:16,160
this is not an advertisement we are not

67
00:02:15,680 --> 00:02:18,080
selling

68
00:02:16,160 --> 00:02:19,680
anything represent here and we do not

69
00:02:18,080 --> 00:02:21,599
profit financially from it

70
00:02:19,680 --> 00:02:25,840
we are simply sharing design files with

71
00:02:21,599 --> 00:02:25,839
privacy licenses and without royalties

72
00:02:26,720 --> 00:02:31,359
ok so first let me give you a very quick

73
00:02:28,400 --> 00:02:32,959
introduction about automotive systems

74
00:02:31,360 --> 00:02:34,560
you can see a car as a collection of

75
00:02:32,959 --> 00:02:35,360
systems divided in four different

76
00:02:34,560 --> 00:02:37,040
domains

77
00:02:35,360 --> 00:02:38,720
the powertrain domain which includes the

78
00:02:37,040 --> 00:02:40,239
engine and the transmission

79
00:02:38,720 --> 00:02:42,800
the chassis domain which includes the

80
00:02:40,239 --> 00:02:44,239
steering column and suspensions

81
00:02:42,800 --> 00:02:47,040
the body domain which includes the

82
00:02:44,239 --> 00:02:48,640
lights the doors and heating

83
00:02:47,040 --> 00:02:52,640
and the infotainment domain which

84
00:02:48,640 --> 00:02:52,640
includes navigation and connectivity

85
00:02:53,920 --> 00:02:57,200
many of the different systems that can

86
00:02:55,360 --> 00:02:59,840
be found in the car are controlled

87
00:02:57,200 --> 00:03:00,799
by electronic control units or ecu's or

88
00:02:59,840 --> 00:03:02,480
shorts

89
00:03:00,800 --> 00:03:04,000
there are many kinds of ecu's in the car

90
00:03:02,480 --> 00:03:05,119
sometimes hundreds of them

91
00:03:04,000 --> 00:03:07,280
and usually they're not hard to

92
00:03:05,120 --> 00:03:07,920
understand they have a limited number of

93
00:03:07,280 --> 00:03:09,519
inputs

94
00:03:07,920 --> 00:03:11,679
generally data from sensors and

95
00:03:09,519 --> 00:03:12,480
actuators and they have a limited number

96
00:03:11,680 --> 00:03:15,599
of outputs

97
00:03:12,480 --> 00:03:18,238
generally to control actuators

98
00:03:15,599 --> 00:03:20,000
so for example an airbag ecu may use an

99
00:03:18,239 --> 00:03:22,800
accelerometer as its input

100
00:03:20,000 --> 00:03:24,879
and an airbag trigger as its output the

101
00:03:22,800 --> 00:03:27,280
role of the ecu will be to use data from

102
00:03:24,879 --> 00:03:30,720
the accelerometer to detect a shock

103
00:03:27,280 --> 00:03:32,879
and output a signal as actuator

104
00:03:30,720 --> 00:03:35,440
to detonate an airbag when the shock is

105
00:03:32,879 --> 00:03:35,440
detected

106
00:03:36,239 --> 00:03:39,760
it is very common for ecus to the data

107
00:03:38,400 --> 00:03:42,080
from other ecu's

108
00:03:39,760 --> 00:03:44,720
most of the time ecu's we need to share

109
00:03:42,080 --> 00:03:46,319
data with other ecu's on the same domain

110
00:03:44,720 --> 00:03:48,560
in the case of an automatic core for

111
00:03:46,319 --> 00:03:50,560
example the transmission control unit

112
00:03:48,560 --> 00:03:52,799
needs input from the engine ecu to

113
00:03:50,560 --> 00:03:54,959
determine the correct gear

114
00:03:52,799 --> 00:03:56,959
if that data is critical that connection

115
00:03:54,959 --> 00:03:59,040
may even be redundant

116
00:03:56,959 --> 00:04:01,040
ecus may also need to communicate with

117
00:03:59,040 --> 00:04:02,879
ecu's on a different domain

118
00:04:01,040 --> 00:04:04,079
for example the brake system usually in

119
00:04:02,879 --> 00:04:05,518
the chassis domain

120
00:04:04,080 --> 00:04:08,400
we need to communicate its state to the

121
00:04:05,519 --> 00:04:10,159
stock map usually in the body domain

122
00:04:08,400 --> 00:04:12,480
most of the time the technology that is

123
00:04:10,159 --> 00:04:15,120
used for communication is scanned

124
00:04:12,480 --> 00:04:16,478
and kind technology uses a bus topology

125
00:04:15,120 --> 00:04:18,639
which means a cam message will be

126
00:04:16,478 --> 00:04:19,519
received by all ecu's on the same can

127
00:04:18,639 --> 00:04:21,840
bus

128
00:04:19,519 --> 00:04:23,040
there is no authentication or encryption

129
00:04:21,839 --> 00:04:25,758
at the link layer

130
00:04:23,040 --> 00:04:27,360
so any message can be sent by any ecu

131
00:04:25,759 --> 00:04:28,320
and security features need to be

132
00:04:27,360 --> 00:04:32,240
implemented

133
00:04:28,320 --> 00:04:34,320
at higher layers the standard time frame

134
00:04:32,240 --> 00:04:37,280
consists mainly of an arbitration id of

135
00:04:34,320 --> 00:04:39,759
11 bits and a payload of 8 bytes

136
00:04:37,280 --> 00:04:41,840
plan fd is a recent evolution of can

137
00:04:39,759 --> 00:04:44,960
where the payload size may be extended

138
00:04:41,840 --> 00:04:44,960
up to 64 bytes

139
00:04:46,000 --> 00:04:50,560
for an ecl network manufacturers will

140
00:04:48,240 --> 00:04:52,960
assign a meaning to each arbitration id

141
00:04:50,560 --> 00:04:54,400
and each bit in their payload the file

142
00:04:52,960 --> 00:04:56,799
that determines the traffic on the can

143
00:04:54,400 --> 00:05:00,080
bus is often referred to as a dbc

144
00:04:56,800 --> 00:05:00,720
file for example assuming a log

145
00:05:00,080 --> 00:05:02,719
controller

146
00:05:00,720 --> 00:05:05,120
and two lamps are the canvas the

147
00:05:02,720 --> 00:05:07,120
manufacturer may decide that id123

148
00:05:05,120 --> 00:05:09,520
is used by the long controller to

149
00:05:07,120 --> 00:05:13,039
communicate the command of both lamps

150
00:05:09,520 --> 00:05:15,440
that id124 is used by the left left lamp

151
00:05:13,039 --> 00:05:16,800
to give feedback about the status and

152
00:05:15,440 --> 00:05:18,960
that id125

153
00:05:16,800 --> 00:05:21,120
is used by the right lamp to give

154
00:05:18,960 --> 00:05:22,799
feedback about its status

155
00:05:21,120 --> 00:05:25,199
each of those messages will be

156
00:05:22,800 --> 00:05:26,800
broadcasted periodically by the assigned

157
00:05:25,199 --> 00:05:28,639
ecu on the canvas

158
00:05:26,800 --> 00:05:32,320
and will serve as the basis for most

159
00:05:28,639 --> 00:05:32,320
data exchange between ecu's

160
00:05:34,160 --> 00:05:37,520
so that's it for the introduction there

161
00:05:35,919 --> 00:05:38,240
are many reasons why people will be

162
00:05:37,520 --> 00:05:41,120
interested

163
00:05:38,240 --> 00:05:42,639
in automated system and ecu networks the

164
00:05:41,120 --> 00:05:43,919
activity that gets by far the most

165
00:05:42,639 --> 00:05:45,600
attention from the media is

166
00:05:43,919 --> 00:05:48,320
vulnerability research

167
00:05:45,600 --> 00:05:50,160
but there are also other reasons for

168
00:05:48,320 --> 00:05:51,919
example owners they want to check

169
00:05:50,160 --> 00:05:53,680
their car's compliance with regulations

170
00:05:51,919 --> 00:05:57,440
such as emissions regulations

171
00:05:53,680 --> 00:06:01,039
and privacy regulations for example gdpr

172
00:05:57,440 --> 00:06:02,160
gdpr other owners may want to exercise

173
00:06:01,039 --> 00:06:03,599
the rights to repair

174
00:06:02,160 --> 00:06:05,919
if they are guaranteed by the country

175
00:06:03,600 --> 00:06:06,880
they live in and finally some owners may

176
00:06:05,919 --> 00:06:09,440
want to experiment

177
00:06:06,880 --> 00:06:10,719
and innovate with diy features or simply

178
00:06:09,440 --> 00:06:14,160
satisfy the curiosity

179
00:06:10,720 --> 00:06:15,919
and educate others and while those may

180
00:06:14,160 --> 00:06:16,319
be valid reasons to experiment with the

181
00:06:15,919 --> 00:06:18,159
car

182
00:06:16,319 --> 00:06:19,919
manufacturers are typically against

183
00:06:18,160 --> 00:06:21,680
people tinkering with a car because they

184
00:06:19,919 --> 00:06:23,359
may be worried about the intellectual

185
00:06:21,680 --> 00:06:25,680
property being stolen

186
00:06:23,360 --> 00:06:27,520
about vulnerabilities being exploited or

187
00:06:25,680 --> 00:06:27,840
people hurting themselves and others

188
00:06:27,520 --> 00:06:31,599
while

189
00:06:27,840 --> 00:06:33,280
injury and what probably suffers the

190
00:06:31,600 --> 00:06:35,280
most from this dedicated situation

191
00:06:33,280 --> 00:06:36,318
is education and research innovative

192
00:06:35,280 --> 00:06:38,479
security

193
00:06:36,319 --> 00:06:39,919
because people cannot easily get access

194
00:06:38,479 --> 00:06:41,599
to safe equipment

195
00:06:39,919 --> 00:06:43,198
or access to the information that they

196
00:06:41,600 --> 00:06:44,880
would need

197
00:06:43,199 --> 00:06:46,639
in the long term this may mean that

198
00:06:44,880 --> 00:06:48,319
manufacturers will have less security

199
00:06:46,639 --> 00:06:49,199
technologies to choose from to secure

200
00:06:48,319 --> 00:06:50,800
their cars

201
00:06:49,199 --> 00:06:53,599
and that less talents would be available

202
00:06:50,800 --> 00:06:55,120
to develop and evaluate them

203
00:06:53,599 --> 00:06:57,039
and the development of course involves

204
00:06:55,120 --> 00:06:58,560
many people from many companies so it is

205
00:06:57,039 --> 00:06:59,280
important to make sure that everyone

206
00:06:58,560 --> 00:07:01,120
involved

207
00:06:59,280 --> 00:07:03,840
involved is competent in automotive

208
00:07:01,120 --> 00:07:03,840
security

209
00:07:04,240 --> 00:07:07,599
and some people are pushing for more

210
00:07:05,680 --> 00:07:08,080
open sourcing cars and who knows maybe

211
00:07:07,599 --> 00:07:11,440
one day

212
00:07:08,080 --> 00:07:13,359
a car will be 100 open source

213
00:07:11,440 --> 00:07:16,719
but if it happens it is going to take a

214
00:07:13,360 --> 00:07:18,479
long time

215
00:07:16,720 --> 00:07:20,800
and manufacturers themselves do not have

216
00:07:18,479 --> 00:07:23,440
access to 100 of the source code

217
00:07:20,800 --> 00:07:23,919
of the cars they make because ecu's

218
00:07:23,440 --> 00:07:25,440
contain

219
00:07:23,919 --> 00:07:27,758
intellectual property from other

220
00:07:25,440 --> 00:07:28,319
companies so this is mostly a political

221
00:07:27,759 --> 00:07:30,000
topic

222
00:07:28,319 --> 00:07:31,680
so there is not much we can contribute

223
00:07:30,000 --> 00:07:33,199
to as researchers

224
00:07:31,680 --> 00:07:35,199
however one way you can contribute

225
00:07:33,199 --> 00:07:36,080
technically right now is to try the

226
00:07:35,199 --> 00:07:38,319
other way around

227
00:07:36,080 --> 00:07:39,680
and use what is publicly available to

228
00:07:38,319 --> 00:07:45,599
make it accessible to learn

229
00:07:39,680 --> 00:07:47,680
and research automotive systems

230
00:07:45,599 --> 00:07:50,719
and that is what we try to do with ramen

231
00:07:47,680 --> 00:07:52,560
which is a topic of this presentation

232
00:07:50,720 --> 00:07:54,080
the objective is to provide a platform

233
00:07:52,560 --> 00:07:56,160
for research that is

234
00:07:54,080 --> 00:07:57,840
open and by that we mean it should be

235
00:07:56,160 --> 00:07:59,680
easy to modify the source code and

236
00:07:57,840 --> 00:08:01,919
reprogram the ecu's

237
00:07:59,680 --> 00:08:03,039
accessible and by that we need

238
00:08:01,919 --> 00:08:05,198
inexpensive

239
00:08:03,039 --> 00:08:06,878
small and requiring no prior skills in

240
00:08:05,199 --> 00:08:09,360
automotive systems

241
00:08:06,879 --> 00:08:10,639
safe with no risk of accidents or legal

242
00:08:09,360 --> 00:08:12,400
repercussions

243
00:08:10,639 --> 00:08:14,560
and motivating something that you can

244
00:08:12,400 --> 00:08:16,318
interact with so that you get the same

245
00:08:14,560 --> 00:08:18,639
kind of experience as you do when you

246
00:08:16,319 --> 00:08:20,000
experiment with a real car

247
00:08:18,639 --> 00:08:21,919
there are already some solutions

248
00:08:20,000 --> 00:08:22,879
available if you want to experiment with

249
00:08:21,919 --> 00:08:25,520
an ec network

250
00:08:22,879 --> 00:08:27,280
besides of course a real car the first

251
00:08:25,520 --> 00:08:29,280
one is making your own test bed

252
00:08:27,280 --> 00:08:30,799
from real ecu's so we can see many

253
00:08:29,280 --> 00:08:32,478
hackers sharing that testbed and

254
00:08:30,800 --> 00:08:33,919
security conferences

255
00:08:32,479 --> 00:08:35,680
and usually if you see something like

256
00:08:33,919 --> 00:08:36,718
this you stop and you immediately get

257
00:08:35,679 --> 00:08:38,399
interested

258
00:08:36,719 --> 00:08:40,560
so it is a nice way to motivate people

259
00:08:38,399 --> 00:08:42,320
to learn unfortunately

260
00:08:40,559 --> 00:08:43,838
those are not easy to reprogram because

261
00:08:42,320 --> 00:08:45,279
manufacturers do not share information

262
00:08:43,839 --> 00:08:46,959
about the ecu's

263
00:08:45,279 --> 00:08:51,200
and they require a lot of skills to

264
00:08:46,959 --> 00:08:51,199
build so it's not accessible to everyone

265
00:08:51,519 --> 00:08:56,320
another option is to use development

266
00:08:53,600 --> 00:08:58,000
boards such as arduino

267
00:08:56,320 --> 00:08:59,519
and that is what you can see mostly on

268
00:08:58,000 --> 00:09:01,040
academic papers

269
00:08:59,519 --> 00:09:02,720
they have the advantage of being

270
00:09:01,040 --> 00:09:04,319
reproducible and you can modify the

271
00:09:02,720 --> 00:09:06,480
source code as you want

272
00:09:04,320 --> 00:09:07,519
so they can be used in many cases for

273
00:09:06,480 --> 00:09:09,920
research

274
00:09:07,519 --> 00:09:11,920
but they lack many safety features often

275
00:09:09,920 --> 00:09:16,000
found on actual eco hardware

276
00:09:11,920 --> 00:09:16,240
and software even if you are even if you

277
00:09:16,000 --> 00:09:18,399
are

278
00:09:16,240 --> 00:09:20,480
able to simulate a can bus you don't get

279
00:09:18,399 --> 00:09:20,880
the same level of direction as you do if

280
00:09:20,480 --> 00:09:23,040
you re

281
00:09:20,880 --> 00:09:24,880
with a car so it's not something that

282
00:09:23,040 --> 00:09:27,360
motivates people and makes them want to

283
00:09:24,880 --> 00:09:27,360
run more

284
00:09:29,440 --> 00:09:33,040
and the third option is to use a

285
00:09:30,959 --> 00:09:34,959
professional test bed such as pasta

286
00:09:33,040 --> 00:09:36,560
and other work from our team this is a

287
00:09:34,959 --> 00:09:38,000
good option because you get access to

288
00:09:36,560 --> 00:09:40,160
the source code and you can reprogram

289
00:09:38,000 --> 00:09:41,760
the ecu's and the canvas network is

290
00:09:40,160 --> 00:09:44,079
already simulating a full car

291
00:09:41,760 --> 00:09:45,360
so the groundwork is already done it's a

292
00:09:44,080 --> 00:09:47,120
major drawback so

293
00:09:45,360 --> 00:09:50,560
that it is very expensive so it is not

294
00:09:47,120 --> 00:09:52,399
accessible to everyone so there are some

295
00:09:50,560 --> 00:09:54,399
options to study and research automotive

296
00:09:52,399 --> 00:09:56,000
systems but none of them seem to be both

297
00:09:54,399 --> 00:09:56,959
accessible and motivating at the same

298
00:09:56,000 --> 00:09:58,480
time

299
00:09:56,959 --> 00:09:59,920
so many people don't even think of

300
00:09:58,480 --> 00:10:00,880
learning about automotive systems

301
00:09:59,920 --> 00:10:03,360
because it never

302
00:10:00,880 --> 00:10:04,320
occurred to them that they could like it

303
00:10:03,360 --> 00:10:06,000
and in comparison

304
00:10:04,320 --> 00:10:07,760
with other industries you have so many

305
00:10:06,000 --> 00:10:08,880
ways to get started if you want to learn

306
00:10:07,760 --> 00:10:11,040
about linux you can

307
00:10:08,880 --> 00:10:12,320
start with a raspberry pi if you want to

308
00:10:11,040 --> 00:10:13,439
learn about electronics you can start

309
00:10:12,320 --> 00:10:16,000
with an arduino

310
00:10:13,440 --> 00:10:16,640
and so on so we wanted something that

311
00:10:16,000 --> 00:10:19,120
would give

312
00:10:16,640 --> 00:10:21,600
a similar experience but for automotive

313
00:10:19,120 --> 00:10:21,600
systems

314
00:10:24,640 --> 00:10:28,319
so we noticed that most of the test beds

315
00:10:26,640 --> 00:10:30,319
that people are using to experiment with

316
00:10:28,320 --> 00:10:32,320
ecu's are made of four ecu's

317
00:10:30,320 --> 00:10:36,079
so the ecu's are often communicating

318
00:10:32,320 --> 00:10:36,079
with each other using a can bus

319
00:10:36,720 --> 00:10:40,000
so we try to fit all that in a pcb the

320
00:10:38,959 --> 00:10:42,479
size of a credit card

321
00:10:40,000 --> 00:10:44,320
and we name that pcb ramen it features

322
00:10:42,480 --> 00:10:47,600
four ecu's connected over

323
00:10:44,320 --> 00:10:49,440
a common can bus or kind of debuss which

324
00:10:47,600 --> 00:10:53,360
is accessible from outside

325
00:10:49,440 --> 00:10:54,959
by your terminal block one of the ecu

326
00:10:53,360 --> 00:10:56,560
of the ecu's is also connected to

327
00:10:54,959 --> 00:10:59,040
connect to usb

328
00:10:56,560 --> 00:11:00,719
which is also the power supply pin

329
00:10:59,040 --> 00:11:02,959
sockets can be used to connect sensors

330
00:11:00,720 --> 00:11:04,720
actuators and additional hardware

331
00:11:02,959 --> 00:11:08,880
and the board features many probes to

332
00:11:04,720 --> 00:11:08,880
easily access important electric signals

333
00:11:10,660 --> 00:11:14,560
[Music]

334
00:11:12,160 --> 00:11:16,399
the four ecu simulate a car network with

335
00:11:14,560 --> 00:11:18,319
messages identical to pasta

336
00:11:16,399 --> 00:11:20,480
the name ramen is obviously a reference

337
00:11:18,320 --> 00:11:22,880
to pasta since it is a cheap alternative

338
00:11:20,480 --> 00:11:24,880
mostly aimed at students

339
00:11:22,880 --> 00:11:26,560
in real course cam messages typically

340
00:11:24,880 --> 00:11:28,560
have different payload sizes

341
00:11:26,560 --> 00:11:30,959
but by default we operate with maximum

342
00:11:28,560 --> 00:11:33,359
paired size to demonstrate heavy traffic

343
00:11:30,959 --> 00:11:34,000
so basic format is like this arbitration

344
00:11:33,360 --> 00:11:35,920
id

345
00:11:34,000 --> 00:11:38,000
two bytes for the data two bytes for a

346
00:11:35,920 --> 00:11:38,880
counter and four bytes of additional

347
00:11:38,000 --> 00:11:40,959
data

348
00:11:38,880 --> 00:11:45,120
random data used as a placeholder for

349
00:11:40,959 --> 00:11:45,119
additional data such as checksum or mac

350
00:11:45,839 --> 00:11:49,040
you can easily modify the messages

351
00:11:47,519 --> 00:11:51,200
arbitration id in format

352
00:11:49,040 --> 00:11:52,959
and here we are assuming a full by-wire

353
00:11:51,200 --> 00:11:54,399
vehicle which means all physical

354
00:11:52,959 --> 00:11:56,800
functions of a car

355
00:11:54,399 --> 00:12:00,720
are accessible to the canvas which is

356
00:11:56,800 --> 00:12:00,719
usually not the case on current cars

357
00:12:00,800 --> 00:12:04,479
the block diagram of ramen looks like

358
00:12:02,560 --> 00:12:06,479
this and as i explained earlier

359
00:12:04,480 --> 00:12:08,320
all ecu's are periodically exchanging

360
00:12:06,480 --> 00:12:10,240
messages on the canvas

361
00:12:08,320 --> 00:12:11,760
if you connect a giant adapter and have

362
00:12:10,240 --> 00:12:15,200
a look at the traffic

363
00:12:11,760 --> 00:12:15,200
it will typically look like this

364
00:12:21,120 --> 00:12:24,240
so the port itself is enough to simulate

365
00:12:23,120 --> 00:12:26,320
an issue network

366
00:12:24,240 --> 00:12:28,160
but it does not look very motivating

367
00:12:26,320 --> 00:12:30,000
what we wanted on top of this was some

368
00:12:28,160 --> 00:12:32,560
sensors and actuators to make it more

369
00:12:30,000 --> 00:12:35,120
interactive

370
00:12:32,560 --> 00:12:36,560
so we created four expansion boards for

371
00:12:35,120 --> 00:12:38,399
sensors and actuators

372
00:12:36,560 --> 00:12:40,560
to simulate the infotainment domain we

373
00:12:38,399 --> 00:12:42,720
simply use a screen

374
00:12:40,560 --> 00:12:45,599
for the body domain we use an engine key

375
00:12:42,720 --> 00:12:45,600
and some leds

376
00:12:47,200 --> 00:12:50,800
for the chassis domain we mainly use a

377
00:12:49,120 --> 00:12:52,399
slide switch

378
00:12:50,800 --> 00:12:54,560
to simulate the side brake and the

379
00:12:52,399 --> 00:12:56,399
rotating potentiometer potentiometer to

380
00:12:54,560 --> 00:12:58,000
simulate the steering wheel

381
00:12:56,399 --> 00:12:59,519
and for the powertrain domain we use

382
00:12:58,000 --> 00:13:00,480
slight potentiometers for the brake and

383
00:12:59,519 --> 00:13:04,079
accelerator

384
00:13:00,480 --> 00:13:04,079
and the joystick for the shift lever

385
00:13:05,200 --> 00:13:09,760
the ec connected to usb implements a

386
00:13:07,200 --> 00:13:11,600
standard cam or kfd interface

387
00:13:09,760 --> 00:13:12,959
either over a standard ceiling port

388
00:13:11,600 --> 00:13:15,120
using excel can or

389
00:13:12,959 --> 00:13:17,599
over a native interface on linux thanks

390
00:13:15,120 --> 00:13:19,600
to the condor light firmware projects

391
00:13:17,600 --> 00:13:21,680
if you connect the board to usb ports on

392
00:13:19,600 --> 00:13:23,200
a computer it should be recognized as a

393
00:13:21,680 --> 00:13:24,880
usb to cam adapter

394
00:13:23,200 --> 00:13:28,639
so it is not necessary to own an

395
00:13:24,880 --> 00:13:28,639
external can adapter to get started

396
00:13:29,760 --> 00:13:33,600
this is a remote of what it looks like

397
00:13:31,040 --> 00:13:36,399
to use ramen just connect it over usb

398
00:13:33,600 --> 00:13:38,160
if you use linux linux you can get it to

399
00:13:36,399 --> 00:13:40,320
be recognized as a standard

400
00:13:38,160 --> 00:13:42,639
kind network interface so it will show

401
00:13:40,320 --> 00:13:44,399
up in this config

402
00:13:42,639 --> 00:13:46,079
then you can use various tools available

403
00:13:44,399 --> 00:13:48,240
on linux to observe the traffic

404
00:13:46,079 --> 00:13:49,599
for example can sniffer here you can see

405
00:13:48,240 --> 00:13:52,240
the traffic explained earlier

406
00:13:49,600 --> 00:13:55,519
the giant ids on the left on the left

407
00:13:52,240 --> 00:13:55,519
and the payload on the right

408
00:13:58,240 --> 00:14:02,399
so with this we can simulate an iso

409
00:14:00,320 --> 00:14:04,560
network with sensors and actuators

410
00:14:02,399 --> 00:14:06,160
basis enough for basic interactions but

411
00:14:04,560 --> 00:14:08,638
it still does not feel like you are

412
00:14:06,160 --> 00:14:10,399
actually experimenting with the car

413
00:14:08,639 --> 00:14:12,000
ideally the ecu should be performing

414
00:14:10,399 --> 00:14:14,320
realistic ecu functions

415
00:14:12,000 --> 00:14:16,639
not just lighting up leds based on some

416
00:14:14,320 --> 00:14:17,760
switches and potentiometers

417
00:14:16,639 --> 00:14:19,760
and for this we found that the

418
00:14:17,760 --> 00:14:21,199
connection in a closed loop with an open

419
00:14:19,760 --> 00:14:22,959
source driving simulator would be an

420
00:14:21,199 --> 00:14:24,639
affordable and safe solution

421
00:14:22,959 --> 00:14:27,040
to feel like you are driving the ecl

422
00:14:24,639 --> 00:14:27,040
network

423
00:14:28,560 --> 00:14:32,399
fortunately there is a great open source

424
00:14:30,480 --> 00:14:33,040
driving simulator for autonomous driving

425
00:14:32,399 --> 00:14:35,279
research

426
00:14:33,040 --> 00:14:37,279
it is called corner it features a python

427
00:14:35,279 --> 00:14:38,160
api so it is very easy to interact with

428
00:14:37,279 --> 00:14:39,760
it

429
00:14:38,160 --> 00:14:41,839
and it also comes with an example

430
00:14:39,760 --> 00:14:43,680
central algorithm so you can

431
00:14:41,839 --> 00:14:46,880
immediately start experimenting with a

432
00:14:43,680 --> 00:14:46,880
virtual self-driving car

433
00:14:47,519 --> 00:14:51,279
so we wrote some scripts so that most

434
00:14:49,440 --> 00:14:53,680
sensors value

435
00:14:51,279 --> 00:14:55,600
for example speed and altitude would be

436
00:14:53,680 --> 00:14:58,079
simulated on the computer in kerner

437
00:14:55,600 --> 00:14:58,880
then broadcasted on the canvas on the

438
00:14:58,079 --> 00:15:00,638
other side

439
00:14:58,880 --> 00:15:02,320
we made it so that all controls of color

440
00:15:00,639 --> 00:15:05,040
such as throttle steering

441
00:15:02,320 --> 00:15:06,399
and brakes would be decided by the issue

442
00:15:05,040 --> 00:15:07,839
network

443
00:15:06,399 --> 00:15:09,920
and this is what you could refer to as

444
00:15:07,839 --> 00:15:12,160
hills or hardware in the loop simulation

445
00:15:09,920 --> 00:15:14,000
in the automotive industry ramen is not

446
00:15:12,160 --> 00:15:27,839
as advanced as professional tools

447
00:15:14,000 --> 00:15:27,839
but at least it is accessible

448
00:15:29,279 --> 00:15:32,399
so to achieve manual control it is not

449
00:15:31,120 --> 00:15:34,320
complicated with color

450
00:15:32,399 --> 00:15:35,680
on the manual control example provided

451
00:15:34,320 --> 00:15:37,360
with the api

452
00:15:35,680 --> 00:15:39,199
there is a right through game loop that

453
00:15:37,360 --> 00:15:41,199
reads events on the keyboard

454
00:15:39,199 --> 00:15:44,000
applies controls then updates the

455
00:15:41,199 --> 00:15:44,000
physics simulation

456
00:15:44,160 --> 00:15:47,920
so kara does not simulate a canvas by

457
00:15:46,000 --> 00:15:49,759
default so we created a python class to

458
00:15:47,920 --> 00:15:52,079
easily interact with the canvas using

459
00:15:49,759 --> 00:15:53,680
the time message specifications of raman

460
00:15:52,079 --> 00:15:55,120
to integrate it with caller we just need

461
00:15:53,680 --> 00:15:56,560
to replace keyboard controls with

462
00:15:55,120 --> 00:15:59,839
actuator control

463
00:15:56,560 --> 00:16:00,319
data read from the campus to close the

464
00:15:59,839 --> 00:16:02,079
loop

465
00:16:00,320 --> 00:16:04,399
we broadcast sensor data using 10

466
00:16:02,079 --> 00:16:06,800
messages based on data retreat

467
00:16:04,399 --> 00:16:09,839
retrieved from the python api of the

468
00:16:06,800 --> 00:16:09,839
physics simulator

469
00:16:10,560 --> 00:16:13,920
and with this were able to control the

470
00:16:12,160 --> 00:16:14,639
car manually with the potentiometers on

471
00:16:13,920 --> 00:16:17,040
the board

472
00:16:14,639 --> 00:16:17,839
here i gently press accelerator release

473
00:16:17,040 --> 00:16:19,599
the hand brake

474
00:16:17,839 --> 00:16:23,839
and i can control the car using the

475
00:16:19,600 --> 00:16:23,839
steering wheel on the expansion board

476
00:16:29,550 --> 00:16:32,650
[Music]

477
00:17:03,440 --> 00:17:07,199
so manual control is nice but automatic

478
00:17:05,119 --> 00:17:08,079
control is better because ultimately we

479
00:17:07,199 --> 00:17:11,199
want to focus

480
00:17:08,079 --> 00:17:13,280
on working on the canvas so on the

481
00:17:11,199 --> 00:17:16,240
original project there is also an

482
00:17:13,280 --> 00:17:18,000
example script for automatic control

483
00:17:16,240 --> 00:17:20,160
again there is a white true loop where

484
00:17:18,000 --> 00:17:21,599
the code basically simulates the physics

485
00:17:20,160 --> 00:17:23,760
lets the center of the ai make a

486
00:17:21,599 --> 00:17:26,639
decision then apply the controls to the

487
00:17:23,760 --> 00:17:26,640
physics simulation

488
00:17:28,640 --> 00:17:32,080
to integrate one man with a self-driving

489
00:17:30,320 --> 00:17:33,840
algorithm again we need to replace the

490
00:17:32,080 --> 00:17:35,840
apply control part with the controls

491
00:17:33,840 --> 00:17:37,520
from the eco network

492
00:17:35,840 --> 00:17:39,840
we also need to send cam messages with

493
00:17:37,520 --> 00:17:41,840
sensor data retrieves of the python api

494
00:17:39,840 --> 00:17:43,600
of the physics simulation

495
00:17:41,840 --> 00:17:45,840
that is identical to having manual

496
00:17:43,600 --> 00:17:46,959
control what we need to do more is also

497
00:17:45,840 --> 00:17:50,080
send message

498
00:17:46,960 --> 00:17:53,760
to broadcast the status

499
00:17:50,080 --> 00:17:56,159
of the ai to the ecu network

500
00:17:53,760 --> 00:17:57,200
so that the ecl network knows what

501
00:17:56,160 --> 00:18:01,840
control the ai

502
00:17:57,200 --> 00:18:01,840
algorithm is requesting

503
00:18:02,880 --> 00:18:07,440
so periodically the ai will broadcast

504
00:18:04,960 --> 00:18:09,360
its status by sending messages over usb

505
00:18:07,440 --> 00:18:11,760
which are converted into canned messages

506
00:18:09,360 --> 00:18:13,760
by the ec connected to usb

507
00:18:11,760 --> 00:18:15,120
all ecu's on the network will receive

508
00:18:13,760 --> 00:18:16,960
those messages

509
00:18:15,120 --> 00:18:21,199
and will decide the actual controls of

510
00:18:16,960 --> 00:18:23,600
the car based on their own algorithm

511
00:18:21,200 --> 00:18:24,640
for example the part-two ecu may decide

512
00:18:23,600 --> 00:18:26,480
to apply breaks

513
00:18:24,640 --> 00:18:27,679
depending on the highest value between

514
00:18:26,480 --> 00:18:30,720
the ai brace

515
00:18:27,679 --> 00:18:32,559
and the brake potentiometer

516
00:18:30,720 --> 00:18:33,919
all ecu's will receive the cam message

517
00:18:32,559 --> 00:18:36,399
that applies the control

518
00:18:33,919 --> 00:18:38,240
some ecu's may filter that message if

519
00:18:36,400 --> 00:18:41,280
they do not need it

520
00:18:38,240 --> 00:18:41,600
some ecu's like the body ecu may process

521
00:18:41,280 --> 00:18:43,840
it

522
00:18:41,600 --> 00:18:45,760
and take action for example if the

523
00:18:43,840 --> 00:18:48,399
brakes are engaged the body ecu

524
00:18:45,760 --> 00:18:51,120
will light up the stop lamp on the

525
00:18:48,400 --> 00:18:51,120
expansion board

526
00:18:51,440 --> 00:18:54,799
finally the ecu connected to usb will

527
00:18:53,520 --> 00:18:55,760
forward the brake controls to the

528
00:18:54,799 --> 00:18:57,440
simulator

529
00:18:55,760 --> 00:19:00,400
that will apply the brakes in the

530
00:18:57,440 --> 00:19:00,400
physics simulation

531
00:19:01,440 --> 00:19:05,039
so this is what it actually looks like

532
00:19:03,440 --> 00:19:05,760
all i need to do again is release the

533
00:19:05,039 --> 00:19:09,360
handbrake

534
00:19:05,760 --> 00:19:11,200
and the car will drive itself so the car

535
00:19:09,360 --> 00:19:13,120
is controlled by the easter network

536
00:19:11,200 --> 00:19:14,960
so when the car stops in the simulation

537
00:19:13,120 --> 00:19:17,360
it is because the controls were applied

538
00:19:14,960 --> 00:19:18,880
as a portrait ecu you can see that the

539
00:19:17,360 --> 00:19:21,360
stop lamp lights up

540
00:19:18,880 --> 00:19:25,840
because the body ecu also received and

541
00:19:21,360 --> 00:19:25,840
processed the breakdown message

542
00:19:29,120 --> 00:19:32,559
since the ecu is in charge of the

543
00:19:30,480 --> 00:19:32,960
controls i can force the car to stop any

544
00:19:32,559 --> 00:19:36,840
time

545
00:19:32,960 --> 00:19:39,840
by forcing brakes on the powertrain ecu

546
00:19:36,840 --> 00:19:39,840
potentiometer

547
00:19:44,799 --> 00:19:48,480
so if you connect an external can

548
00:19:46,320 --> 00:19:50,639
adapter to the canvas you will be able

549
00:19:48,480 --> 00:19:52,640
to send and receive messages

550
00:19:50,640 --> 00:19:56,559
so using ramen you can experiment with

551
00:19:52,640 --> 00:19:56,559
the canvas of a self-driving virtual car

552
00:20:01,760 --> 00:20:06,320
when you want to reprogram an ecu in the

553
00:20:03,760 --> 00:20:07,360
real world you have two options either

554
00:20:06,320 --> 00:20:09,360
you interact with the hardware

555
00:20:07,360 --> 00:20:10,879
bootloader or the ecu's microcontroller

556
00:20:09,360 --> 00:20:12,639
which depends on the microcontroller's

557
00:20:10,880 --> 00:20:14,320
model and manufacturer

558
00:20:12,640 --> 00:20:16,080
or you interact with diagnostics and

559
00:20:14,320 --> 00:20:18,799
calibration software which depends on

560
00:20:16,080 --> 00:20:20,639
the car model and manufacturer

561
00:20:18,799 --> 00:20:21,840
diagnostic and calibration are often

562
00:20:20,640 --> 00:20:24,559
done on the canvas

563
00:20:21,840 --> 00:20:25,678
but other options may be available

564
00:20:24,559 --> 00:20:28,320
protocols

565
00:20:25,679 --> 00:20:30,640
are defined by standard documents you

566
00:20:28,320 --> 00:20:32,240
often hear about uds and obd2

567
00:20:30,640 --> 00:20:34,000
which both rely on the same transport

568
00:20:32,240 --> 00:20:36,480
layer isotp

569
00:20:34,000 --> 00:20:38,400
but there are also other protocols such

570
00:20:36,480 --> 00:20:42,080
as keyword protocol 2000

571
00:20:38,400 --> 00:20:44,720
or xcp all those protocols

572
00:20:42,080 --> 00:20:46,879
can often also be implemented over other

573
00:20:44,720 --> 00:20:48,640
layers

574
00:20:46,880 --> 00:20:50,720
for the hardware bootloaders it depends

575
00:20:48,640 --> 00:20:53,600
on the microcontroller manufacturer

576
00:20:50,720 --> 00:20:55,120
for example for an xtm32 microcontroller

577
00:20:53,600 --> 00:20:56,559
you can reprogram the firmware by

578
00:20:55,120 --> 00:20:59,760
interacting overcam

579
00:20:56,559 --> 00:21:01,840
according to the application note 3154

580
00:20:59,760 --> 00:21:03,919
over usb according to the application

581
00:21:01,840 --> 00:21:05,760
nodes 3156

582
00:21:03,919 --> 00:21:08,799
or using other protocols defined in

583
00:21:05,760 --> 00:21:08,799
other application nodes

584
00:21:09,360 --> 00:21:13,600
in the case of raman we use the hardware

585
00:21:11,440 --> 00:21:15,600
bootloader to reprogram the ecus

586
00:21:13,600 --> 00:21:16,639
and we can also use the uds protocol

587
00:21:15,600 --> 00:21:18,879
over cad

588
00:21:16,640 --> 00:21:22,720
and in the future we may consider adding

589
00:21:18,880 --> 00:21:22,720
xcp and kwb to fast

590
00:21:23,360 --> 00:21:26,879
how to reprogram an ecu using

591
00:21:25,039 --> 00:21:28,480
calibration and diagnostic software

592
00:21:26,880 --> 00:21:30,080
is a topic that is already heavily

593
00:21:28,480 --> 00:21:32,000
discussed at automotive security

594
00:21:30,080 --> 00:21:33,120
talks i will not spend time on this

595
00:21:32,000 --> 00:21:34,559
topic

596
00:21:33,120 --> 00:21:36,559
you can find the definition of the

597
00:21:34,559 --> 00:21:38,720
standards online usually you need to

598
00:21:36,559 --> 00:21:40,799
spec you need to pay for them

599
00:21:38,720 --> 00:21:42,320
but you can also find summaries for free

600
00:21:40,799 --> 00:21:45,840
on some websites

601
00:21:42,320 --> 00:21:45,840
for example wikipedia

602
00:21:48,320 --> 00:21:51,600
what is more interesting to discuss here

603
00:21:50,159 --> 00:21:52,960
is a hubbub loader

604
00:21:51,600 --> 00:21:54,879
the various ways to force a

605
00:21:52,960 --> 00:21:56,640
microcontroller into bootloader mode are

606
00:21:54,880 --> 00:22:00,320
described in the application node

607
00:21:56,640 --> 00:22:02,080
application node 2606 the format of cad

608
00:22:00,320 --> 00:22:03,678
messages you need to send to interact

609
00:22:02,080 --> 00:22:04,720
with the bootloader is defined in the

610
00:22:03,679 --> 00:22:07,760
application node

611
00:22:04,720 --> 00:22:10,159
3154 and it's not complicated

612
00:22:07,760 --> 00:22:11,039
the format is simply command byte plus

613
00:22:10,159 --> 00:22:12,799
argument

614
00:22:11,039 --> 00:22:15,200
all that within the same canned message

615
00:22:12,799 --> 00:22:15,200
payload

616
00:22:15,760 --> 00:22:21,360
so we wrote some script to make it

617
00:22:17,520 --> 00:22:21,360
easier to interact with the bookloader

618
00:22:25,280 --> 00:22:28,960
so here i am showing the script that we

619
00:22:26,960 --> 00:22:30,880
use to interact with the plotter

620
00:22:28,960 --> 00:22:32,480
first thing i do is retrieve all

621
00:22:30,880 --> 00:22:34,480
information from the bootloader

622
00:22:32,480 --> 00:22:37,120
including the version the supported

623
00:22:34,480 --> 00:22:39,679
commands and the chip id

624
00:22:37,120 --> 00:22:42,320
i then use a read memory command to the

625
00:22:39,679 --> 00:22:45,919
unknown sections of memories

626
00:22:42,320 --> 00:22:47,280
this includes the ecu firmware

627
00:22:45,919 --> 00:22:55,840
so it can be a good start to start

628
00:22:47,280 --> 00:22:55,840
experimenting with reverse engineering

629
00:22:59,840 --> 00:23:03,760
you can also activate memory without

630
00:23:01,840 --> 00:23:09,840
protection and see what happens when you

631
00:23:03,760 --> 00:23:09,840
try to dump the memory again

632
00:23:15,200 --> 00:23:19,440
and in this case it's not allowing

633
00:23:16,960 --> 00:23:21,120
memory terms anymore

634
00:23:19,440 --> 00:23:23,360
you can remove the memory protection

635
00:23:21,120 --> 00:23:25,918
which will wipe out the memory

636
00:23:23,360 --> 00:23:27,600
and after you do that you can you can

637
00:23:25,919 --> 00:23:36,500
use the bootloader to reprogram

638
00:23:27,600 --> 00:23:39,659
the ecu's

639
00:23:36,500 --> 00:23:39,660
[Music]

640
00:23:46,559 --> 00:23:49,520
for the hardware we also designed

641
00:23:48,000 --> 00:23:50,320
additional expression boards before your

642
00:23:49,520 --> 00:23:52,158
speeches

643
00:23:50,320 --> 00:23:54,158
first one is an expansion to connect a

644
00:23:52,159 --> 00:23:56,400
jtag debugger

645
00:23:54,159 --> 00:23:58,400
second one is a board to add external

646
00:23:56,400 --> 00:24:00,000
quad display memories which have soic

647
00:23:58,400 --> 00:24:04,159
packages such as eprom

648
00:24:00,000 --> 00:24:06,159
fram flash no then sram and so on

649
00:24:04,159 --> 00:24:09,200
the third one is a board to add a

650
00:24:06,159 --> 00:24:10,960
trusted platform module

651
00:24:09,200 --> 00:24:19,840
and the last one is an interface to

652
00:24:10,960 --> 00:24:19,840
easily connect a chip whisperer

653
00:24:21,360 --> 00:24:24,959
all those expansions are compatible with

654
00:24:23,279 --> 00:24:27,039
each other so you can stack them

655
00:24:24,960 --> 00:24:29,279
and create a very advanced eco network

656
00:24:27,039 --> 00:24:33,840
with all issues between a tpm and one

657
00:24:29,279 --> 00:24:33,840
gigabit of memory

658
00:24:34,320 --> 00:24:39,200
and it looks better when many expansions

659
00:24:36,000 --> 00:24:40,880
are stuck on top of each other

660
00:24:39,200 --> 00:24:42,960
since we would like to use ramen for

661
00:24:40,880 --> 00:24:44,240
education we try to vary the type of

662
00:24:42,960 --> 00:24:47,039
electrical signals

663
00:24:44,240 --> 00:24:48,960
used in the expansions and we added many

664
00:24:47,039 --> 00:25:01,840
excellent probes to easily connect

665
00:24:48,960 --> 00:25:01,840
external tools

666
00:25:04,159 --> 00:25:07,760
you can use one of the many external

667
00:25:05,760 --> 00:25:11,200
probes to connect an oscilloscope

668
00:25:07,760 --> 00:25:12,840
and have a look at analog signals

669
00:25:11,200 --> 00:25:15,840
for example here's a bright

670
00:25:12,840 --> 00:25:15,840
potentiometer

671
00:25:17,360 --> 00:25:21,760
or connect a logic analyzer and have a

672
00:25:19,760 --> 00:25:24,320
look at digital signals

673
00:25:21,760 --> 00:25:29,840
for example to analyze spi communication

674
00:25:24,320 --> 00:25:29,840
between the ecu and the screen

675
00:25:32,320 --> 00:25:36,399
for the hardware design we kept it

676
00:25:33,840 --> 00:25:38,399
simple using only two layers and keeping

677
00:25:36,400 --> 00:25:39,760
all components on the same side

678
00:25:38,400 --> 00:25:41,200
we designed the hardware with large

679
00:25:39,760 --> 00:25:42,240
tolerances so it should be easy to

680
00:25:41,200 --> 00:25:44,799
produce with both

681
00:25:42,240 --> 00:25:46,559
pcb fabrication services we use

682
00:25:44,799 --> 00:25:48,240
components with large size so

683
00:25:46,559 --> 00:25:57,840
if you have some skills in soldering you

684
00:25:48,240 --> 00:25:57,840
should be able to solder one yourself

685
00:25:59,600 --> 00:26:03,039
we designed the hardware using kicad

686
00:26:01,520 --> 00:26:04,240
which is an open source tool for

687
00:26:03,039 --> 00:26:06,000
designing hardware

688
00:26:04,240 --> 00:26:11,840
you can easily modify the schematics

689
00:26:06,000 --> 00:26:11,840
layout and even generate nice pdus

690
00:26:12,880 --> 00:26:16,400
so firmware is designed using stn42 cube

691
00:26:15,760 --> 00:26:18,080
id

692
00:26:16,400 --> 00:26:20,080
it is accessible to beginners and you

693
00:26:18,080 --> 00:26:22,480
can easily reconfigure peripherals and

694
00:26:20,080 --> 00:26:24,720
clocks from the graphical interface

695
00:26:22,480 --> 00:26:26,640
you will you will ever get some

696
00:26:24,720 --> 00:26:27,919
statistics such as the estimated power

697
00:26:26,640 --> 00:26:29,600
consumption

698
00:26:27,919 --> 00:26:31,360
but of course you do not need to use the

699
00:26:29,600 --> 00:26:33,120
vertical interface and libraries if you

700
00:26:31,360 --> 00:26:34,080
would rather program everything yourself

701
00:26:33,120 --> 00:26:38,000
by interacting

702
00:26:34,080 --> 00:26:40,158
directly with registers

703
00:26:38,000 --> 00:26:42,720
use freertos as a real-time operating

704
00:26:40,159 --> 00:26:44,799
system the basic software of ecu's have

705
00:26:42,720 --> 00:26:46,880
several tasks running in parallel

706
00:26:44,799 --> 00:26:49,039
wi-fi receiving messages one for sending

707
00:26:46,880 --> 00:26:52,159
cam messages and several periodic tasks

708
00:26:49,039 --> 00:26:53,919
to take care of the ecu control loops

709
00:26:52,159 --> 00:26:56,720
those tasks receive data from different

710
00:26:53,919 --> 00:27:00,400
interrupt services within

711
00:26:56,720 --> 00:27:02,640
using queues and dm memory overwrites

712
00:27:00,400 --> 00:27:04,240
the task can also exchange data between

713
00:27:02,640 --> 00:27:07,840
each browser using cues

714
00:27:04,240 --> 00:27:07,840
or memory overwrite

715
00:27:09,200 --> 00:27:12,799
again to keep the project accessible to

716
00:27:10,960 --> 00:27:14,400
beginners we did the os configuration

717
00:27:12,799 --> 00:27:15,760
using the graphical interface

718
00:27:14,400 --> 00:27:18,240
where you can see all tasks as a

719
00:27:15,760 --> 00:27:21,440
configuration for example the priority

720
00:27:18,240 --> 00:27:23,279
you can add or remove interrupts and you

721
00:27:21,440 --> 00:27:24,720
can also configure the value skews in

722
00:27:23,279 --> 00:27:27,120
memory

723
00:27:24,720 --> 00:27:28,720
there is still a lot of memory left even

724
00:27:27,120 --> 00:27:30,639
even on the microcontroller with less

725
00:27:28,720 --> 00:27:32,080
performances

726
00:27:30,640 --> 00:27:35,440
so you can easily add your own

727
00:27:32,080 --> 00:27:35,439
application on double bass

728
00:27:38,880 --> 00:27:42,159
so that's all that's all for the

729
00:27:40,399 --> 00:27:44,158
hardware and software section you can

730
00:27:42,159 --> 00:27:45,679
find more details on github

731
00:27:44,159 --> 00:27:48,720
i would like to move to the next section

732
00:27:45,679 --> 00:27:50,000
now and show you a usage example

733
00:27:48,720 --> 00:27:52,399
there are usually two patterns for

734
00:27:50,000 --> 00:27:53,919
people working in automotive security

735
00:27:52,399 --> 00:27:55,678
either there are automotive engineers

736
00:27:53,919 --> 00:27:56,880
who learn about security or there are

737
00:27:55,679 --> 00:27:59,760
security engineers

738
00:27:56,880 --> 00:28:01,520
who learn about automotive systems since

739
00:27:59,760 --> 00:28:03,360
this is a security conference and i

740
00:28:01,520 --> 00:28:04,879
assume most people do not need me to

741
00:28:03,360 --> 00:28:05,760
explain how the platform can be used to

742
00:28:04,880 --> 00:28:08,480
study

743
00:28:05,760 --> 00:28:12,000
and research basic security topics i

744
00:28:08,480 --> 00:28:12,000
will focus on the automotive side

745
00:28:12,240 --> 00:28:16,000
the diagnostics and calibration topic is

746
00:28:15,360 --> 00:28:17,600
already covered

747
00:28:16,000 --> 00:28:20,720
by many security talks so i will not

748
00:28:17,600 --> 00:28:20,719
spend time on this

749
00:28:23,840 --> 00:28:27,120
so i will spend time on i will spend

750
00:28:26,799 --> 00:28:29,279
time

751
00:28:27,120 --> 00:28:30,879
on something that is not often mentioned

752
00:28:29,279 --> 00:28:32,799
in security conferences

753
00:28:30,880 --> 00:28:35,760
control algorithms and safety critical

754
00:28:32,799 --> 00:28:35,760
hardware and software

755
00:28:36,480 --> 00:28:39,679
and for this i would like to demonstrate

756
00:28:37,840 --> 00:28:42,080
the design of a pid controller for

757
00:28:39,679 --> 00:28:43,440
cruise control as an example

758
00:28:42,080 --> 00:28:44,960
i will show you how being knowledgeable

759
00:28:43,440 --> 00:28:46,720
in control systems may be relevant to

760
00:28:44,960 --> 00:28:48,480
security engineers

761
00:28:46,720 --> 00:28:50,720
and how many of the activities that are

762
00:28:48,480 --> 00:28:51,679
done by engineers in the automotive

763
00:28:50,720 --> 00:28:53,919
industry

764
00:28:51,679 --> 00:28:57,120
can also be simulated using open source

765
00:28:53,919 --> 00:28:59,279
tools including ramen

766
00:28:57,120 --> 00:29:00,719
once we have an implement implementation

767
00:28:59,279 --> 00:29:02,320
in c that works

768
00:29:00,720 --> 00:29:04,480
i will then use it as a reference to

769
00:29:02,320 --> 00:29:07,439
talk about safety critical systems

770
00:29:04,480 --> 00:29:08,720
and the differences differences with

771
00:29:07,440 --> 00:29:12,559
real ecu hardware

772
00:29:08,720 --> 00:29:14,640
and software

773
00:29:12,559 --> 00:29:16,399
so let's get started cruise control is

774
00:29:14,640 --> 00:29:18,480
very simple when a human is controlling

775
00:29:16,399 --> 00:29:20,959
the throttle with the accelerator pedal

776
00:29:18,480 --> 00:29:21,520
depending on the skill thus the car may

777
00:29:20,960 --> 00:29:25,600
have an

778
00:29:21,520 --> 00:29:27,679
evil speed what we want is an ecu that

779
00:29:25,600 --> 00:29:31,439
optimizes the control of the throttle

780
00:29:27,679 --> 00:29:31,440
so that you can maintain a steady speed

781
00:29:34,080 --> 00:29:38,399
an automatic car can be very easy to

782
00:29:35,919 --> 00:29:40,399
model if you press the accelerator pedal

783
00:29:38,399 --> 00:29:42,239
which opens the throttle you will get

784
00:29:40,399 --> 00:29:43,918
speed out of your car

785
00:29:42,240 --> 00:29:45,440
but the relationship between speed and

786
00:29:43,919 --> 00:29:46,720
throttle is not as simple as the

787
00:29:45,440 --> 00:29:48,559
multiplication

788
00:29:46,720 --> 00:29:50,880
no we have to follow the laws of

789
00:29:48,559 --> 00:29:52,720
dynamics in this case that the sum of

790
00:29:50,880 --> 00:29:54,640
forces on the car

791
00:29:52,720 --> 00:29:56,320
is equal to its mass times its

792
00:29:54,640 --> 00:29:57,840
acceleration

793
00:29:56,320 --> 00:29:59,520
we can consider that there is a force

794
00:29:57,840 --> 00:30:00,559
pushing the core that is proportional to

795
00:29:59,520 --> 00:30:01,840
the throttle

796
00:30:00,559 --> 00:30:03,520
and that there is an opposite force

797
00:30:01,840 --> 00:30:05,840
proportional to the speed due to

798
00:30:03,520 --> 00:30:07,520
friction

799
00:30:05,840 --> 00:30:10,799
when we solve this differential equation

800
00:30:07,520 --> 00:30:14,879
equation what we expect to see

801
00:30:10,799 --> 00:30:14,879
is the speed follow an exponential curve

802
00:30:15,200 --> 00:30:18,720
and a simple way to control the speed

803
00:30:17,120 --> 00:30:19,840
that may come to your mind is open-loop

804
00:30:18,720 --> 00:30:21,279
control

805
00:30:19,840 --> 00:30:22,639
you make some measurements on the flat

806
00:30:21,279 --> 00:30:24,399
road of the relationship between

807
00:30:22,640 --> 00:30:26,880
throttle and maximum speed

808
00:30:24,399 --> 00:30:29,039
and you keep it in a lookup table when

809
00:30:26,880 --> 00:30:30,000
the user asks the ecu to reach a certain

810
00:30:29,039 --> 00:30:31,919
speed

811
00:30:30,000 --> 00:30:35,600
the ecu can use the lookup table to find

812
00:30:31,919 --> 00:30:38,720
what photo controls should be applied

813
00:30:35,600 --> 00:30:38,719
based on path measurements

814
00:30:40,000 --> 00:30:44,320
and this may work in some situations but

815
00:30:42,159 --> 00:30:47,360
according to the laws of dynamics

816
00:30:44,320 --> 00:30:48,480
as soon as we reach an upward slope the

817
00:30:47,360 --> 00:30:52,719
card will lose speeds

818
00:30:48,480 --> 00:30:52,720
will lose speed because of gravity

819
00:30:53,120 --> 00:30:57,518
so at least that is what we expect but

820
00:30:54,880 --> 00:30:59,840
we should verify that on the canvas

821
00:30:57,519 --> 00:31:01,840
this is something we can use ramen for

822
00:30:59,840 --> 00:31:05,439
here i am using an external kind of

823
00:31:01,840 --> 00:31:07,519
can adapter it to a second pc

824
00:31:05,440 --> 00:31:09,200
on that pc i simply receive data from

825
00:31:07,519 --> 00:31:11,440
the physical canvas

826
00:31:09,200 --> 00:31:12,799
for the rest of the section i will only

827
00:31:11,440 --> 00:31:15,120
be modifying the firmware

828
00:31:12,799 --> 00:31:15,840
on the powertrain ecu i will not change

829
00:31:15,120 --> 00:31:19,840
the simulator

830
00:31:15,840 --> 00:31:19,840
i will not even reboot it

831
00:31:25,279 --> 00:31:28,720
so in the simulator i drove around in

832
00:31:27,440 --> 00:31:30,960
the city to find

833
00:31:28,720 --> 00:31:33,120
to find a nice place to experiment more

834
00:31:30,960 --> 00:31:34,720
precisely i looked for a place with a

835
00:31:33,120 --> 00:31:39,279
flat road

836
00:31:34,720 --> 00:31:39,279
followed by another and upward slope

837
00:31:40,000 --> 00:31:43,279
then i programmed the portrait ecu to

838
00:31:42,000 --> 00:31:45,679
apply a constant photon

839
00:31:43,279 --> 00:31:46,880
which is only one line of code and after

840
00:31:45,679 --> 00:31:48,880
reprimanding the ecu

841
00:31:46,880 --> 00:31:50,000
i left the car drive straight and i

842
00:31:48,880 --> 00:32:01,840
recorded data

843
00:31:50,000 --> 00:32:01,840
from the canvas

844
00:32:04,880 --> 00:32:09,440
i use an open source tool for campus

845
00:32:07,600 --> 00:32:12,959
analysis called bus master

846
00:32:09,440 --> 00:32:14,720
bus masters allows you to load dbc files

847
00:32:12,960 --> 00:32:16,240
or to input manually the format of your

848
00:32:14,720 --> 00:32:18,559
account frames here

849
00:32:16,240 --> 00:32:20,640
i simply told bus master what were the

850
00:32:18,559 --> 00:32:21,600
kind objection ids of the photo control

851
00:32:20,640 --> 00:32:23,919
message

852
00:32:21,600 --> 00:32:27,360
and the speed sensor message and what

853
00:32:23,919 --> 00:32:29,840
was the format of the payload

854
00:32:27,360 --> 00:32:31,199
once i do that i can blow the evolution

855
00:32:29,840 --> 00:32:35,039
of the photon and speed

856
00:32:31,200 --> 00:32:36,720
over time and the results we get are

857
00:32:35,039 --> 00:32:38,320
exactly what we expected from our

858
00:32:36,720 --> 00:32:40,080
differential equations

859
00:32:38,320 --> 00:32:42,399
the speed of the vehicle is following an

860
00:32:40,080 --> 00:32:44,240
expansion curve and as soon as we reach

861
00:32:42,399 --> 00:32:46,879
the upward slope we start losing speed

862
00:32:44,240 --> 00:32:48,880
because the throttle is constant

863
00:32:46,880 --> 00:32:51,039
there are some noise and non-linearities

864
00:32:48,880 --> 00:32:53,360
at low speed but overall it seems our

865
00:32:51,039 --> 00:32:55,919
model of the car is correct

866
00:32:53,360 --> 00:32:57,199
we are approaching the problem correctly

867
00:32:55,919 --> 00:32:59,600
what we can see here

868
00:32:57,200 --> 00:33:02,399
is that it takes around 40 seconds for

869
00:32:59,600 --> 00:33:04,559
one test drive

870
00:33:02,399 --> 00:33:06,399
and 40 seconds it's already too long so

871
00:33:04,559 --> 00:33:07,360
before testing the ecu in the driving

872
00:33:06,399 --> 00:33:08,799
simulator

873
00:33:07,360 --> 00:33:10,719
we want to use a software that can

874
00:33:08,799 --> 00:33:12,158
simulate different set equations

875
00:33:10,720 --> 00:33:13,919
so that you can see the impact of the

876
00:33:12,159 --> 00:33:16,799
cruise control algorithm directly

877
00:33:13,919 --> 00:33:18,320
without having to wait 40 seconds most

878
00:33:16,799 --> 00:33:19,279
of the time this is done using a

879
00:33:18,320 --> 00:33:21,840
professional 2

880
00:33:19,279 --> 00:33:23,279
tool such as matlab or simulink matlab

881
00:33:21,840 --> 00:33:25,120
and symmetric

882
00:33:23,279 --> 00:33:26,559
but here we will use the open source

883
00:33:25,120 --> 00:33:28,399
tool scilab

884
00:33:26,559 --> 00:33:30,240
it has a graphical interface where we

885
00:33:28,399 --> 00:33:33,279
can connect inputs and outputs

886
00:33:30,240 --> 00:33:33,279
from a block diagram

887
00:33:34,720 --> 00:33:38,000
differential equations are a bit hard to

888
00:33:36,559 --> 00:33:39,519
deal with because the relationship

889
00:33:38,000 --> 00:33:41,840
between inputs and outputs is

890
00:33:39,519 --> 00:33:42,880
complicated what you typically do in

891
00:33:41,840 --> 00:33:44,720
controlled theory

892
00:33:42,880 --> 00:33:46,640
is use the laplace transform which will

893
00:33:44,720 --> 00:33:49,519
change the variable from time t

894
00:33:46,640 --> 00:33:50,960
to a complex number called s this may be

895
00:33:49,519 --> 00:33:52,640
complicated without controlled fury

896
00:33:50,960 --> 00:33:54,320
background but you just need to know

897
00:33:52,640 --> 00:33:56,159
that the differentiation is equivalent

898
00:33:54,320 --> 00:33:58,158
to multiplication by s

899
00:33:56,159 --> 00:34:00,000
and that an integration is equivalent to

900
00:33:58,159 --> 00:34:02,799
division by s

901
00:34:00,000 --> 00:34:04,320
and our system easy is easier to model

902
00:34:02,799 --> 00:34:05,519
with the laplace transform

903
00:34:04,320 --> 00:34:07,840
because we now have a simple

904
00:34:05,519 --> 00:34:10,239
relationship between throttle and speed

905
00:34:07,840 --> 00:34:12,960
speed equals transfer function of car

906
00:34:10,239 --> 00:34:12,959
times portal

907
00:34:15,359 --> 00:34:18,879
and based on the measurement for the

908
00:34:16,800 --> 00:34:21,119
canvas we can evaluate the transfer

909
00:34:18,879 --> 00:34:22,000
the transfer function of the car to be

910
00:34:21,119 --> 00:34:26,320
equal to

911
00:34:22,000 --> 00:34:28,399
approximately one over one plus four s

912
00:34:26,320 --> 00:34:29,919
we can simulate the core in scilab by

913
00:34:28,399 --> 00:34:34,159
using a block function which has the

914
00:34:29,918 --> 00:34:35,759
exact same transfer function

915
00:34:34,159 --> 00:34:37,280
using scilab we can notice various

916
00:34:35,760 --> 00:34:38,320
scenarios and get the results

917
00:34:37,280 --> 00:34:40,079
immediately

918
00:34:38,320 --> 00:34:41,440
here i am testing the scenario in which

919
00:34:40,079 --> 00:34:44,000
we start from zero speed

920
00:34:41,440 --> 00:34:46,480
apply a constant throttle and after 20

921
00:34:44,000 --> 00:34:49,119
seconds we add a new force gravity

922
00:34:46,480 --> 00:34:52,639
which corresponds to the slope and this

923
00:34:49,119 --> 00:34:52,639
is what we call here the disturbance

924
00:34:53,599 --> 00:34:56,960
and with scilab simulation we can verify

925
00:34:55,440 --> 00:34:58,880
we get waveforms similar to

926
00:34:56,960 --> 00:35:00,560
measurements on the can bus with a

927
00:34:58,880 --> 00:35:02,000
constant photon the speed follows an

928
00:35:00,560 --> 00:35:03,359
exponential curve that is close to

929
00:35:02,000 --> 00:35:06,800
maximum speed

930
00:35:03,359 --> 00:35:08,720
after around 14 seconds

931
00:35:06,800 --> 00:35:10,880
and as soon as there is a disturbance

932
00:35:08,720 --> 00:35:12,560
the gravity here showing green we can

933
00:35:10,880 --> 00:35:14,839
check that the car loses speed

934
00:35:12,560 --> 00:35:16,960
because there is no reaction from the

935
00:35:14,839 --> 00:35:18,880
photon

936
00:35:16,960 --> 00:35:22,480
so to fix that the solution is obvious

937
00:35:18,880 --> 00:35:22,480
the ecu's need to have feedback

938
00:35:22,640 --> 00:35:26,078
we need the ecu to make use of the speed

939
00:35:25,040 --> 00:35:28,640
sensor data

940
00:35:26,079 --> 00:35:30,079
that it can find on the canvas so that

941
00:35:28,640 --> 00:35:33,759
it can adapt the throttle to the

942
00:35:30,079 --> 00:35:35,839
actual speed of the vehicle

943
00:35:33,760 --> 00:35:37,040
the first solution that may come to mind

944
00:35:35,839 --> 00:35:38,960
to software engineers

945
00:35:37,040 --> 00:35:40,400
is bank bank control the employment

946
00:35:38,960 --> 00:35:43,359
control is quite simple

947
00:35:40,400 --> 00:35:44,640
you measure the speed and if it is above

948
00:35:43,359 --> 00:35:46,640
a certain threshold

949
00:35:44,640 --> 00:35:48,319
you stop applying the throttle if it

950
00:35:46,640 --> 00:35:50,879
goes below a certain threshold

951
00:35:48,320 --> 00:35:52,960
you apply the throttle again this is

952
00:35:50,880 --> 00:35:55,680
extremely easy to implement in c

953
00:35:52,960 --> 00:35:55,680
on the ecu

954
00:35:56,400 --> 00:36:00,560
and once we reprogram the ecu the ecu on

955
00:35:58,880 --> 00:36:01,359
ramen we can make measurements of the

956
00:36:00,560 --> 00:36:03,040
can bus

957
00:36:01,359 --> 00:36:04,480
and verify that this time we are not

958
00:36:03,040 --> 00:36:07,520
losing speed anymore

959
00:36:04,480 --> 00:36:10,640
when we reach a slope but as you can see

960
00:36:07,520 --> 00:36:10,640
there are some oscillations

961
00:36:11,359 --> 00:36:14,400
and as you can imagine the oscillations

962
00:36:13,359 --> 00:36:16,078
are not something very nice for

963
00:36:14,400 --> 00:36:18,240
passengers

964
00:36:16,079 --> 00:36:20,800
apparently people driving like this is

965
00:36:18,240 --> 00:36:22,560
the reason cruise control was invented

966
00:36:20,800 --> 00:36:24,400
i do not know that story is true but i

967
00:36:22,560 --> 00:36:26,320
can't believe it

968
00:36:24,400 --> 00:36:29,760
so my control may be a good start but it

969
00:36:26,320 --> 00:36:29,760
is not good enough for cruise control

970
00:36:32,000 --> 00:36:36,400
and the most famous algorithm used in

971
00:36:34,000 --> 00:36:39,040
control theory is a pid controller

972
00:36:36,400 --> 00:36:40,079
you can find a lot of resources online a

973
00:36:39,040 --> 00:36:42,160
pid controller

974
00:36:40,079 --> 00:36:43,760
is one of the control mechanism used in

975
00:36:42,160 --> 00:36:45,279
software by the centralizing ai of

976
00:36:43,760 --> 00:36:47,119
caller

977
00:36:45,280 --> 00:36:48,800
in the pid controller you measure the

978
00:36:47,119 --> 00:36:50,079
difference between the target speed and

979
00:36:48,800 --> 00:36:53,119
the current speed

980
00:36:50,079 --> 00:36:54,800
you call that difference the error

981
00:36:53,119 --> 00:36:56,720
and you can control the throttle using

982
00:36:54,800 --> 00:36:59,520
the sum of three control blocks

983
00:36:56,720 --> 00:37:01,839
the error multiplied by kp the integral

984
00:36:59,520 --> 00:37:03,520
of the error multiplied by ki

985
00:37:01,839 --> 00:37:06,560
and the derivative of the error

986
00:37:03,520 --> 00:37:06,560
multiplied by kd

987
00:37:06,640 --> 00:37:13,759
kp ki and kd are called by constants

988
00:37:11,119 --> 00:37:13,760
called gains

989
00:37:15,040 --> 00:37:18,480
and you need to have a very fine tuning

990
00:37:16,880 --> 00:37:19,280
of those gains to achieve optimal

991
00:37:18,480 --> 00:37:21,280
control

992
00:37:19,280 --> 00:37:23,200
here i can simulate a kd controller

993
00:37:21,280 --> 00:37:25,359
using scilab

994
00:37:23,200 --> 00:37:26,399
with different blocks remember that the

995
00:37:25,359 --> 00:37:27,680
division by s

996
00:37:26,400 --> 00:37:30,880
is an integration and then the

997
00:37:27,680 --> 00:37:33,200
multiplication by s is a derivation

998
00:37:30,880 --> 00:37:35,119
thanks to the simulation i am i am able

999
00:37:33,200 --> 00:37:36,960
to try many values without having to

1000
00:37:35,119 --> 00:37:38,320
actually drive the car

1001
00:37:36,960 --> 00:37:40,560
and when we are able to find brake

1002
00:37:38,320 --> 00:37:43,200
values when we are able to find

1003
00:37:40,560 --> 00:37:45,680
correct values for the pid controller we

1004
00:37:43,200 --> 00:37:45,680
get this

1005
00:37:46,800 --> 00:37:50,960
so ecu is able to reach a target speed

1006
00:37:48,800 --> 00:37:51,920
quickly without oscillations and without

1007
00:37:50,960 --> 00:37:54,880
overshooting

1008
00:37:51,920 --> 00:37:54,880
the maximum speed

1009
00:37:54,960 --> 00:37:58,160
and when there is a disturbance to

1010
00:37:56,400 --> 00:38:00,400
gravity it will dynamically

1011
00:37:58,160 --> 00:38:02,480
adapt the controls of the throttle so

1012
00:38:00,400 --> 00:38:04,240
that the target speed is maintained

1013
00:38:02,480 --> 00:38:07,119
so this is good because this is what we

1014
00:38:04,240 --> 00:38:09,359
want for a cruise control

1015
00:38:07,119 --> 00:38:10,640
but either gain of only one control

1016
00:38:09,359 --> 00:38:12,319
block isn't correct

1017
00:38:10,640 --> 00:38:13,680
the speed of the vehicle may look like

1018
00:38:12,320 --> 00:38:16,240
something totally different

1019
00:38:13,680 --> 00:38:18,319
potentially dangerous and this is why

1020
00:38:16,240 --> 00:38:19,118
the integrity of calibration data is

1021
00:38:18,320 --> 00:38:21,440
important

1022
00:38:19,119 --> 00:38:23,280
not only from a safety point of view but

1023
00:38:21,440 --> 00:38:25,040
also from a security point of view

1024
00:38:23,280 --> 00:38:27,520
because an attacker should not be able

1025
00:38:25,040 --> 00:38:33,839
to make an ecu have a dangerous behavior

1026
00:38:27,520 --> 00:38:33,839
behavior with only one small change

1027
00:38:36,160 --> 00:38:39,759
and last thing i need to explain is how

1028
00:38:38,079 --> 00:38:41,440
to implement this algorithm in c

1029
00:38:39,760 --> 00:38:43,680
and this is not obvious because we are

1030
00:38:41,440 --> 00:38:44,720
dealing with integration and derivations

1031
00:38:43,680 --> 00:38:47,279
which are not

1032
00:38:44,720 --> 00:38:48,399
on which are not possible for digital

1033
00:38:47,280 --> 00:38:50,160
functions

1034
00:38:48,400 --> 00:38:52,480
so there are many ways to implement this

1035
00:38:50,160 --> 00:38:56,000
in a digital 3d controller in c

1036
00:38:52,480 --> 00:38:57,680
i will just explain two approaches

1037
00:38:56,000 --> 00:38:59,040
the first approach is to stay in the

1038
00:38:57,680 --> 00:39:01,279
stand in the time domain

1039
00:38:59,040 --> 00:39:03,599
and approximate the derivation by the

1040
00:39:01,280 --> 00:39:06,079
difference between two successive errors

1041
00:39:03,599 --> 00:39:07,359
divided by the sampling time and we can

1042
00:39:06,079 --> 00:39:10,800
approximate the integral

1043
00:39:07,359 --> 00:39:13,520
operation with a riemann sum

1044
00:39:10,800 --> 00:39:16,400
which is a running sum of all errors so

1045
00:39:13,520 --> 00:39:19,599
far multiplied by the sampling time

1046
00:39:16,400 --> 00:39:21,200
this may look a bit intimidating but

1047
00:39:19,599 --> 00:39:23,520
when you look at it closely

1048
00:39:21,200 --> 00:39:24,399
you can see it is just a combination of

1049
00:39:23,520 --> 00:39:26,400
constants

1050
00:39:24,400 --> 00:39:28,720
and values that can be computed from

1051
00:39:26,400 --> 00:39:31,200
current and past sensor values from the

1052
00:39:28,720 --> 00:39:31,200
canvas

1053
00:39:33,440 --> 00:39:36,560
so actual implementation in c looks like

1054
00:39:35,599 --> 00:39:38,640
this

1055
00:39:36,560 --> 00:39:40,960
we need to define two variables one to

1056
00:39:38,640 --> 00:39:42,640
store the running sum of errors

1057
00:39:40,960 --> 00:39:46,079
and when to store the error from the

1058
00:39:42,640 --> 00:39:46,078
previous control loop execution

1059
00:39:46,960 --> 00:39:50,560
in the control loop we define constant

1060
00:39:48,880 --> 00:39:54,000
gains for each stage

1061
00:39:50,560 --> 00:39:54,000
we compute the current error

1062
00:39:54,079 --> 00:39:58,160
we add the error to the sum of all

1063
00:39:55,760 --> 00:39:58,160
errors

1064
00:39:59,440 --> 00:40:04,400
we compute the difference between

1065
00:40:00,720 --> 00:40:06,240
current errors and previous error

1066
00:40:04,400 --> 00:40:07,440
we then add all those values with that

1067
00:40:06,240 --> 00:40:09,520
respective gain

1068
00:40:07,440 --> 00:40:10,480
to the output variable and we clone that

1069
00:40:09,520 --> 00:40:13,839
output

1070
00:40:10,480 --> 00:40:13,839
in case it goes out of bound

1071
00:40:14,240 --> 00:40:17,439
we then apply the throttle control and

1072
00:40:16,319 --> 00:40:20,160
save the current error

1073
00:40:17,440 --> 00:40:24,480
in the previous error variable for use

1074
00:40:20,160 --> 00:40:26,000
in the next iteration

1075
00:40:24,480 --> 00:40:28,480
the second approach is to use the

1076
00:40:26,000 --> 00:40:30,319
laplace the laplace transform of the pid

1077
00:40:28,480 --> 00:40:32,400
controller

1078
00:40:30,319 --> 00:40:34,079
we first need to convert it to a z

1079
00:40:32,400 --> 00:40:36,319
transform the equivalent of laplace

1080
00:40:34,079 --> 00:40:38,480
transform but for digital signals

1081
00:40:36,319 --> 00:40:41,839
it looks a bit complicated but there are

1082
00:40:38,480 --> 00:40:43,599
many tools to do the conversion for you

1083
00:40:41,839 --> 00:40:44,960
if you want to do the conversion by hand

1084
00:40:43,599 --> 00:40:48,480
one way is to use the

1085
00:40:44,960 --> 00:40:53,440
bi-linear transformation

1086
00:40:48,480 --> 00:40:55,520
in which we you replace s by this

1087
00:40:53,440 --> 00:40:57,920
to approximate the z transform of your

1088
00:40:55,520 --> 00:40:57,920
ecu

1089
00:41:01,200 --> 00:41:06,799
and again this me this may all look a

1090
00:41:04,319 --> 00:41:08,720
bit intimidating but you can actually

1091
00:41:06,800 --> 00:41:10,560
compute the throttle output

1092
00:41:08,720 --> 00:41:11,919
by using the throttle output from two

1093
00:41:10,560 --> 00:41:14,400
iterations ago

1094
00:41:11,920 --> 00:41:16,560
the current error the previous error and

1095
00:41:14,400 --> 00:41:18,160
the error before that

1096
00:41:16,560 --> 00:41:20,078
which can all be computed from sensor

1097
00:41:18,160 --> 00:41:22,078
values on the canvas

1098
00:41:20,079 --> 00:41:23,359
and while this control algorithm is

1099
00:41:22,079 --> 00:41:24,720
equivalent to our previous

1100
00:41:23,359 --> 00:41:27,839
implementation

1101
00:41:24,720 --> 00:41:27,839
it looks totally different

1102
00:41:28,000 --> 00:41:31,839
and what i would like to stress here

1103
00:41:30,079 --> 00:41:33,839
that identical control algorithm

1104
00:41:31,839 --> 00:41:35,680
may have very different software

1105
00:41:33,839 --> 00:41:38,640
implementations which may be relevant

1106
00:41:35,680 --> 00:41:38,640
for reverse engineers

1107
00:41:44,880 --> 00:41:48,000
i only show the first implementation not

1108
00:41:46,880 --> 00:41:50,319
waste time but you can see

1109
00:41:48,000 --> 00:41:52,560
now that the ecu in ramen is able to

1110
00:41:50,319 --> 00:42:03,200
make the car maintain a constant speed

1111
00:41:52,560 --> 00:42:04,880
with dynamic control of the throttle

1112
00:42:03,200 --> 00:42:06,399
so that's it for the example i just

1113
00:42:04,880 --> 00:42:08,480
wanted to show that ramen can be used

1114
00:42:06,400 --> 00:42:10,720
for realistic activities on the campus

1115
00:42:08,480 --> 00:42:12,880
and that the ecu's are not just doing

1116
00:42:10,720 --> 00:42:14,480
some random busy work

1117
00:42:12,880 --> 00:42:16,400
the control theory part may be

1118
00:42:14,480 --> 00:42:18,319
complicated and if that was going too

1119
00:42:16,400 --> 00:42:20,000
fast for you at least i hope it proves

1120
00:42:18,319 --> 00:42:21,440
there is a lot of things to discover and

1121
00:42:20,000 --> 00:42:23,359
experiment with

1122
00:42:21,440 --> 00:42:31,839
and that all that learning can be done

1123
00:42:23,359 --> 00:42:31,839
with open source tools

1124
00:42:35,920 --> 00:42:39,440
now i would like to discuss what would

1125
00:42:37,440 --> 00:42:40,640
have been different with ecu's because

1126
00:42:39,440 --> 00:42:42,839
as you can imagine

1127
00:42:40,640 --> 00:42:44,000
actual eco software is not as simple as

1128
00:42:42,839 --> 00:42:46,160
this

1129
00:42:44,000 --> 00:42:47,280
i will also also show you what

1130
00:42:46,160 --> 00:42:50,078
alternatives we have

1131
00:42:47,280 --> 00:42:51,839
technologies hidden behind ndas so that

1132
00:42:50,079 --> 00:42:54,240
we can get as close as we can to real

1133
00:42:51,839 --> 00:42:56,560
easy use

1134
00:42:54,240 --> 00:42:58,479
we show that ramen in ramen that this

1135
00:42:56,560 --> 00:43:00,078
cruise control ec worked

1136
00:42:58,480 --> 00:43:02,000
but we only tried it on a single

1137
00:43:00,079 --> 00:43:05,359
scenario namely a flat road

1138
00:43:02,000 --> 00:43:05,359
followed by an upward slope

1139
00:43:05,520 --> 00:43:09,119
but what about the scenario in which a

1140
00:43:07,280 --> 00:43:10,960
car in front is driving slowly

1141
00:43:09,119 --> 00:43:12,640
or what about the scenario in which we

1142
00:43:10,960 --> 00:43:14,880
are in a downward slope

1143
00:43:12,640 --> 00:43:16,640
in this case the ecu will not be able to

1144
00:43:14,880 --> 00:43:18,160
prevent the car from going too fast

1145
00:43:16,640 --> 00:43:22,480
because it does not have access to the

1146
00:43:18,160 --> 00:43:22,480
brakes which could lead to an accident

1147
00:43:22,560 --> 00:43:25,839
and the difficult problem here is not

1148
00:43:24,400 --> 00:43:27,440
whether you can think of one more

1149
00:43:25,839 --> 00:43:29,279
scenario

1150
00:43:27,440 --> 00:43:31,920
the difficult problem is can you think

1151
00:43:29,280 --> 00:43:34,000
of them all and are you sure

1152
00:43:31,920 --> 00:43:35,280
and thinking of all dangerous scenarios

1153
00:43:34,000 --> 00:43:37,280
quantifying the risk

1154
00:43:35,280 --> 00:43:39,440
and implementing countermeasures is what

1155
00:43:37,280 --> 00:43:42,079
makes automotive systems

1156
00:43:39,440 --> 00:43:42,079
really different

1157
00:43:43,280 --> 00:43:48,359
and to prove that an ecu is reasonably

1158
00:43:45,599 --> 00:43:49,520
safe you ideally need to follow iso

1159
00:43:48,359 --> 00:43:52,078
26262

1160
00:43:49,520 --> 00:43:55,119
standard which is a standard for

1161
00:43:52,079 --> 00:43:56,319
functional safety the standard safety

1162
00:43:55,119 --> 00:43:58,480
the standard defines different

1163
00:43:56,319 --> 00:44:00,800
requirements at many levels

1164
00:43:58,480 --> 00:44:03,040
not all ecu's are equally critical so

1165
00:44:00,800 --> 00:44:06,400
safety relevant ecu's are assigned

1166
00:44:03,040 --> 00:44:09,839
an automotive safety integrity level

1167
00:44:06,400 --> 00:44:10,960
or ac for shots and ac a is a less

1168
00:44:09,839 --> 00:44:15,680
critical

1169
00:44:10,960 --> 00:44:15,680
level and sld is the most critical level

1170
00:44:15,920 --> 00:44:19,520
so if you were to design a real cruise

1171
00:44:17,520 --> 00:44:20,240
control ecu for use in a real car you

1172
00:44:19,520 --> 00:44:22,079
could not just

1173
00:44:20,240 --> 00:44:23,759
connect some random ecu to the canvas

1174
00:44:22,079 --> 00:44:25,040
and try it on the highway

1175
00:44:23,760 --> 00:44:28,000
you will need to go through a lot of

1176
00:44:25,040 --> 00:44:31,599
analysis just such as hazop hara

1177
00:44:28,000 --> 00:44:32,640
fme sdpa and so on usually there are so

1178
00:44:31,599 --> 00:44:34,720
many requirements

1179
00:44:32,640 --> 00:44:37,520
so they cannot be tracked with only a

1180
00:44:34,720 --> 00:44:39,200
human and a sheet of paper

1181
00:44:37,520 --> 00:44:43,280
they are managed using dedicated

1182
00:44:39,200 --> 00:44:43,279
dedicated tools such as rational doors

1183
00:44:45,280 --> 00:44:48,640
now let's discuss how the software will

1184
00:44:46,880 --> 00:44:50,000
be different

1185
00:44:48,640 --> 00:44:51,680
the main contribution of automotive

1186
00:44:50,000 --> 00:44:53,440
software is to realize control

1187
00:44:51,680 --> 00:44:55,359
algorithms safely

1188
00:44:53,440 --> 00:44:56,800
but without confirmations many things

1189
00:44:55,359 --> 00:44:58,560
could go wrong

1190
00:44:56,800 --> 00:45:00,560
for example there could be bugs in the

1191
00:44:58,560 --> 00:45:02,400
ecu application code

1192
00:45:00,560 --> 00:45:04,078
even without any bug the software may

1193
00:45:02,400 --> 00:45:07,599
not be robust enough when there are

1194
00:45:04,079 --> 00:45:07,599
transit errors in the hardware

1195
00:45:08,800 --> 00:45:11,680
there could be there could also be

1196
00:45:10,400 --> 00:45:14,560
problems with the two chains that

1197
00:45:11,680 --> 00:45:17,200
compile the firmware

1198
00:45:14,560 --> 00:45:19,839
and problems with the libraries and arto

1199
00:45:17,200 --> 00:45:19,839
and artos

1200
00:45:22,640 --> 00:45:26,640
and and when we have a close look at the

1201
00:45:25,040 --> 00:45:28,800
prd controller implementation

1202
00:45:26,640 --> 00:45:30,400
which seemed good enough in our testing

1203
00:45:28,800 --> 00:45:31,680
we can see it is actually a terrible

1204
00:45:30,400 --> 00:45:34,160
implementation

1205
00:45:31,680 --> 00:45:35,759
we are mixing integers and unsigned

1206
00:45:34,160 --> 00:45:38,000
integers and floats before

1207
00:45:35,760 --> 00:45:39,599
proper checks and type casting we are

1208
00:45:38,000 --> 00:45:43,200
not checking for overflows

1209
00:45:39,599 --> 00:45:43,200
and other random software issues

1210
00:45:44,079 --> 00:45:47,200
and this is not acceptable but for

1211
00:45:45,839 --> 00:45:48,560
safety and security

1212
00:45:47,200 --> 00:45:50,319
and in this case the problems were

1213
00:45:48,560 --> 00:45:52,000
obvious on purpose but sometimes it can

1214
00:45:50,319 --> 00:45:54,560
be very hard to spot because they stem

1215
00:45:52,000 --> 00:45:56,160
from very subtle computing issues

1216
00:45:54,560 --> 00:45:58,560
and those issues may lead to system

1217
00:45:56,160 --> 00:46:00,160
failures

1218
00:45:58,560 --> 00:46:02,319
so to avoid such scenarios the

1219
00:46:00,160 --> 00:46:03,040
automotive industry usually mandates the

1220
00:46:02,319 --> 00:46:05,520
use

1221
00:46:03,040 --> 00:46:06,800
of a language subset which restricts

1222
00:46:05,520 --> 00:46:09,200
what developers can do

1223
00:46:06,800 --> 00:46:14,000
but make sure that numerical errors are

1224
00:46:09,200 --> 00:46:15,839
less likely to happen

1225
00:46:14,000 --> 00:46:17,760
so usually usually in the automotive

1226
00:46:15,839 --> 00:46:19,920
industry the star that is used is

1227
00:46:17,760 --> 00:46:22,079
misracy

1228
00:46:19,920 --> 00:46:28,240
and it is very similar to certsi which

1229
00:46:22,079 --> 00:46:30,240
is popular in the security industry

1230
00:46:28,240 --> 00:46:32,078
using a language subset is only one

1231
00:46:30,240 --> 00:46:34,479
other requirements that are dictated by

1232
00:46:32,079 --> 00:46:36,800
iso 26262

1233
00:46:34,480 --> 00:46:38,560
there are many other requirements at a

1234
00:46:36,800 --> 00:46:40,240
high level they try to enforce a low

1235
00:46:38,560 --> 00:46:41,920
complexity of the software

1236
00:46:40,240 --> 00:46:44,000
for example by restricting the size of

1237
00:46:41,920 --> 00:46:46,480
components restricting the coupling

1238
00:46:44,000 --> 00:46:47,839
coupling between software components and

1239
00:46:46,480 --> 00:46:50,000
making sure the scheduling

1240
00:46:47,839 --> 00:46:52,240
is appropriate and there are not too

1241
00:46:50,000 --> 00:46:53,599
many interrupts

1242
00:46:52,240 --> 00:46:55,200
but they also have more concrete

1243
00:46:53,599 --> 00:46:57,119
requirements such as restricting

1244
00:46:55,200 --> 00:46:57,839
functions to one entry and one exit

1245
00:46:57,119 --> 00:47:00,240
point

1246
00:46:57,839 --> 00:47:01,040
forbid dynamic memory avoid global

1247
00:47:00,240 --> 00:47:05,118
variables

1248
00:47:01,040 --> 00:47:05,119
limit the use of pointers and so on

1249
00:47:05,760 --> 00:47:09,119
the other issues we have to deal with

1250
00:47:07,680 --> 00:47:12,240
which is unrelated to bugs

1251
00:47:09,119 --> 00:47:14,800
is 20 errors in the harsh environment

1252
00:47:12,240 --> 00:47:15,439
data is not always reliable there may be

1253
00:47:14,800 --> 00:47:17,359
bit flip

1254
00:47:15,440 --> 00:47:18,720
occurring outside of memory for example

1255
00:47:17,359 --> 00:47:21,200
because of noise

1256
00:47:18,720 --> 00:47:23,200
uncognition communication lines but

1257
00:47:21,200 --> 00:47:25,040
there also may be bit flips occurring

1258
00:47:23,200 --> 00:47:28,000
inside a microcontroller's memory

1259
00:47:25,040 --> 00:47:29,759
for example because of cosmic rays those

1260
00:47:28,000 --> 00:47:31,599
issues do not originate from software

1261
00:47:29,760 --> 00:47:32,880
they are originally from hardware

1262
00:47:31,599 --> 00:47:34,800
but they do need to be addressed by

1263
00:47:32,880 --> 00:47:36,640
software because remember

1264
00:47:34,800 --> 00:47:39,200
in the case of the example cruise

1265
00:47:36,640 --> 00:47:41,279
control ecu just one bit flip

1266
00:47:39,200 --> 00:47:43,040
could lead to unwanted behavior of the

1267
00:47:41,280 --> 00:47:46,079
ecu

1268
00:47:43,040 --> 00:47:47,520
of the car so to address these issues

1269
00:47:46,079 --> 00:47:49,040
automatic even controllers need special

1270
00:47:47,520 --> 00:47:50,240
counter measures for example having

1271
00:47:49,040 --> 00:47:53,839
redundant memory

1272
00:47:50,240 --> 00:47:53,839
or having redundant cpus

1273
00:47:57,119 --> 00:48:00,960
in easy use you will typically find

1274
00:47:58,960 --> 00:48:03,200
microcontrollers that have been designed

1275
00:48:00,960 --> 00:48:05,040
specially for automotive use all those

1276
00:48:03,200 --> 00:48:05,598
microcontrollers require you to sign an

1277
00:48:05,040 --> 00:48:07,200
nda

1278
00:48:05,599 --> 00:48:08,720
so you cannot just buy them and start

1279
00:48:07,200 --> 00:48:10,879
programming them

1280
00:48:08,720 --> 00:48:12,160
so that makes it a bit hard to study an

1281
00:48:10,880 --> 00:48:14,720
actual

1282
00:48:12,160 --> 00:48:15,680
ecu map controller and real automative

1283
00:48:14,720 --> 00:48:18,720
software

1284
00:48:15,680 --> 00:48:20,720
but iso 26262

1285
00:48:18,720 --> 00:48:22,640
is not the only standard for safety

1286
00:48:20,720 --> 00:48:25,799
critical systems

1287
00:48:22,640 --> 00:48:27,279
iso 26262 is actually derived from iec

1288
00:48:25,800 --> 00:48:28,960
6.508

1289
00:48:27,280 --> 00:48:30,720
so therefore and they are both similar

1290
00:48:28,960 --> 00:48:33,839
in their concepts

1291
00:48:30,720 --> 00:48:35,680
and iec61508 microcontrollers they do

1292
00:48:33,839 --> 00:48:39,200
not require ntas for most other

1293
00:48:35,680 --> 00:48:39,200
activities you may be interested in

1294
00:48:39,520 --> 00:48:42,960
and more completely brandman can be used

1295
00:48:41,280 --> 00:48:46,000
with stm42l4

1296
00:48:42,960 --> 00:48:47,440
or stn42l5 microcontrollers and for

1297
00:48:46,000 --> 00:48:49,680
those microcontrollers you do not need

1298
00:48:47,440 --> 00:48:51,680
an idea to download guidelines on how to

1299
00:48:49,680 --> 00:48:53,118
implement safe software

1300
00:48:51,680 --> 00:48:54,480
for example you can find a list of

1301
00:48:53,119 --> 00:48:55,839
features that are required for safety

1302
00:48:54,480 --> 00:48:57,680
applications

1303
00:48:55,839 --> 00:48:58,880
and you can request more data that you

1304
00:48:57,680 --> 00:49:01,598
would need to actually achieve

1305
00:48:58,880 --> 00:49:04,720
compliance with iec 6.508

1306
00:49:01,599 --> 00:49:06,880
such as the fmea and fmeda

1307
00:49:04,720 --> 00:49:09,040
but to obtain those data you would need

1308
00:49:06,880 --> 00:49:10,960
to sign an mda

1309
00:49:09,040 --> 00:49:12,400
no i personally do not think that those

1310
00:49:10,960 --> 00:49:15,359
data are essential for

1311
00:49:12,400 --> 00:49:16,240
education and research so using such

1312
00:49:15,359 --> 00:49:19,440
microcontrollers

1313
00:49:16,240 --> 00:49:21,359
is a good alternative but again let me

1314
00:49:19,440 --> 00:49:23,359
stress that this is unhappy for learning

1315
00:49:21,359 --> 00:49:24,960
and researching not for actually using

1316
00:49:23,359 --> 00:49:26,880
the car

1317
00:49:24,960 --> 00:49:29,200
i don't have time to detail other safety

1318
00:49:26,880 --> 00:49:31,200
features let me just talk about memory

1319
00:49:29,200 --> 00:49:33,359
redundancy

1320
00:49:31,200 --> 00:49:34,720
since this one impacts the code of the

1321
00:49:33,359 --> 00:49:38,480
application

1322
00:49:34,720 --> 00:49:38,480
of the example cruise control ecu

1323
00:49:39,440 --> 00:49:43,200
so in the example we wrote the gain of

1324
00:49:41,440 --> 00:49:46,000
each stage in code memory

1325
00:49:43,200 --> 00:49:48,078
defining them as constants for a safer

1326
00:49:46,000 --> 00:49:49,359
application they should not be here

1327
00:49:48,079 --> 00:49:51,599
they should they belong to another

1328
00:49:49,359 --> 00:49:54,000
section the data flash where ecc

1329
00:49:51,599 --> 00:49:55,920
protection can be activated

1330
00:49:54,000 --> 00:49:57,760
if possible calibration data should be

1331
00:49:55,920 --> 00:50:00,319
stored twice with checksums and

1332
00:49:57,760 --> 00:50:02,480
preferably max

1333
00:50:00,319 --> 00:50:04,000
if you are not familiar with ecc memory

1334
00:50:02,480 --> 00:50:05,760
it is a kind of memory

1335
00:50:04,000 --> 00:50:08,720
that can detect b flips and sometimes

1336
00:50:05,760 --> 00:50:10,800
automatically corrects them

1337
00:50:08,720 --> 00:50:12,959
renault memory is also available for the

1338
00:50:10,800 --> 00:50:14,720
ram but not at all addresses

1339
00:50:12,960 --> 00:50:16,319
so in the application we have to ensure

1340
00:50:14,720 --> 00:50:18,558
that 50 critical variables

1341
00:50:16,319 --> 00:50:20,960
are placed in a section of ram in which

1342
00:50:18,559 --> 00:50:24,400
bitflips can be detected

1343
00:50:20,960 --> 00:50:25,119
in this case in section scrum 2 for data

1344
00:50:24,400 --> 00:50:28,000
in ram that

1345
00:50:25,119 --> 00:50:29,680
are actually constant such as the games

1346
00:50:28,000 --> 00:50:30,319
you may also want to activate script

1347
00:50:29,680 --> 00:50:33,040
activate

1348
00:50:30,319 --> 00:50:34,480
write protection a feature that is only

1349
00:50:33,040 --> 00:50:39,040
available in sram

1350
00:50:34,480 --> 00:50:40,559
2. okay last slide about software

1351
00:50:39,040 --> 00:50:42,240
in the example cruise control we're

1352
00:50:40,559 --> 00:50:45,040
using gcc2 chain

1353
00:50:42,240 --> 00:50:45,680
in iso 26262 it is a requirement to have

1354
00:50:45,040 --> 00:50:48,000
what is called

1355
00:50:45,680 --> 00:50:50,319
a dual confidence level to ensure that

1356
00:50:48,000 --> 00:50:51,599
two chains will not introduce errors

1357
00:50:50,319 --> 00:50:53,759
as it could be the case with some

1358
00:50:51,599 --> 00:50:55,359
optimizations so normally you could not

1359
00:50:53,760 --> 00:50:56,800
use gcc

1360
00:50:55,359 --> 00:50:58,558
real-time operating systems and

1361
00:50:56,800 --> 00:51:00,319
libraries may also add problems that is

1362
00:50:58,559 --> 00:51:03,040
why they need to be certified

1363
00:51:00,319 --> 00:51:04,480
both st 42 hull and free rotors are

1364
00:51:03,040 --> 00:51:06,400
compliant with biswasi

1365
00:51:04,480 --> 00:51:09,839
which is nice but they are not compliant

1366
00:51:06,400 --> 00:51:09,839
with iso 262

1367
00:51:10,079 --> 00:51:14,480
however it looks like it looks like st

1368
00:51:12,559 --> 00:51:15,680
is bringing azure archos into the

1369
00:51:14,480 --> 00:51:17,520
ecosystem

1370
00:51:15,680 --> 00:51:20,000
and that one is actually pre-satisfied

1371
00:51:17,520 --> 00:51:21,520
iso 2662 so

1372
00:51:20,000 --> 00:51:23,119
maybe in the future it would be an

1373
00:51:21,520 --> 00:51:24,000
option to experiment with actually with

1374
00:51:23,119 --> 00:51:28,880
an actual

1375
00:51:24,000 --> 00:51:31,119
iso 26262 operating system

1376
00:51:28,880 --> 00:51:32,559
so now let's talk a bit about hardware

1377
00:51:31,119 --> 00:51:34,079
in case it was not clear to you you

1378
00:51:32,559 --> 00:51:35,359
cannot use commercial electronics to

1379
00:51:34,079 --> 00:51:37,359
implement an ecu

1380
00:51:35,359 --> 00:51:39,440
smartphone vendors will offer why you

1381
00:51:37,359 --> 00:51:41,520
want you not to let a device in your car

1382
00:51:39,440 --> 00:51:42,720
because a parked car can reach excellent

1383
00:51:41,520 --> 00:51:44,079
temperatures

1384
00:51:42,720 --> 00:51:46,078
that commercial electronics are not

1385
00:51:44,079 --> 00:51:47,440
designed to resist

1386
00:51:46,079 --> 00:51:49,359
and if you and if you think that the

1387
00:51:47,440 --> 00:51:51,520
life inside the cabin is hard you should

1388
00:51:49,359 --> 00:51:52,799
think about an ecu

1389
00:51:51,520 --> 00:51:55,920
which has to stay in the engine

1390
00:51:52,800 --> 00:51:57,440
compartment and operate without failures

1391
00:51:55,920 --> 00:51:59,680
and you would not think of putting a

1392
00:51:57,440 --> 00:52:02,720
smartphone on an arduino here

1393
00:51:59,680 --> 00:52:02,720
and trust your life with it

1394
00:52:02,880 --> 00:52:06,640
and extreme temperatures are just one of

1395
00:52:04,880 --> 00:52:07,839
the many environmental factors that make

1396
00:52:06,640 --> 00:52:08,799
it difficult for this you to stay

1397
00:52:07,839 --> 00:52:10,480
reliable

1398
00:52:08,800 --> 00:52:11,920
the ecu also need to resist high

1399
00:52:10,480 --> 00:52:14,960
humidity

1400
00:52:11,920 --> 00:52:17,520
corrosive gases vibrations microcuts

1401
00:52:14,960 --> 00:52:19,040
load damps electrostatic discharges

1402
00:52:17,520 --> 00:52:21,599
electromagnetic noise

1403
00:52:19,040 --> 00:52:21,599
and so on

1404
00:52:23,200 --> 00:52:26,720
and when subjected subjected to such a

1405
00:52:25,680 --> 00:52:27,919
harsh environment

1406
00:52:26,720 --> 00:52:29,919
many things could go wrong with

1407
00:52:27,920 --> 00:52:30,880
electronics you probably know about

1408
00:52:29,920 --> 00:52:33,599
corrosions

1409
00:52:30,880 --> 00:52:34,559
but many other physical phenomena are at

1410
00:52:33,599 --> 00:52:36,960
risk of happening

1411
00:52:34,559 --> 00:52:37,680
to the components solder cracks

1412
00:52:36,960 --> 00:52:39,760
incremental

1413
00:52:37,680 --> 00:52:40,960
growth whiskers dendrites

1414
00:52:39,760 --> 00:52:43,760
electromigration

1415
00:52:40,960 --> 00:52:46,079
etc for example whiskers are later

1416
00:52:43,760 --> 00:52:47,839
growing out of electrical components and

1417
00:52:46,079 --> 00:52:49,599
dendrites are meta leading the plus side

1418
00:52:47,839 --> 00:52:51,520
towards the minus side

1419
00:52:49,599 --> 00:52:54,160
and many other phenomena may result in a

1420
00:52:51,520 --> 00:52:54,160
dangerous fader

1421
00:52:54,319 --> 00:52:57,520
so obviously ecu's need to be designed

1422
00:52:56,160 --> 00:52:58,960
to resist harsh environments

1423
00:52:57,520 --> 00:53:01,280
and heart control measures against all

1424
00:52:58,960 --> 00:53:02,880
those potential failures ecu's need to

1425
00:53:01,280 --> 00:53:05,359
pass various tests that simulate

1426
00:53:02,880 --> 00:53:06,640
that simulate harsh environments those

1427
00:53:05,359 --> 00:53:07,839
tests are usually defined by

1428
00:53:06,640 --> 00:53:08,720
manufacturers and the test

1429
00:53:07,839 --> 00:53:11,119
specifications

1430
00:53:08,720 --> 00:53:12,558
are made are not made public what is

1431
00:53:11,119 --> 00:53:14,240
made public however is the test

1432
00:53:12,559 --> 00:53:16,400
specifications for individual

1433
00:53:14,240 --> 00:53:18,078
electronic components and those tests

1434
00:53:16,400 --> 00:53:20,480
are usually defined by ac

1435
00:53:18,079 --> 00:53:21,680
so electronic the automotive electronic

1436
00:53:20,480 --> 00:53:26,319
console

1437
00:53:21,680 --> 00:53:26,319
and you can have a look at them online

1438
00:53:27,040 --> 00:53:30,558
for ramen we try to follow design

1439
00:53:28,559 --> 00:53:32,319
deadlines similar to those of weak ecu's

1440
00:53:30,559 --> 00:53:33,839
but of course we cannot follow actual

1441
00:53:32,319 --> 00:53:34,960
rules as it would be much less

1442
00:53:33,839 --> 00:53:38,240
accessible

1443
00:53:34,960 --> 00:53:39,680
completely we selected ac 200 grade zero

1444
00:53:38,240 --> 00:53:42,959
components for everything

1445
00:53:39,680 --> 00:53:45,118
except connectors and microcontrollers

1446
00:53:42,960 --> 00:53:46,640
because those may require nda or not be

1447
00:53:45,119 --> 00:53:48,480
easily accessible

1448
00:53:46,640 --> 00:53:50,960
depending on the path reference ecu

1449
00:53:48,480 --> 00:53:53,040
microcontrollers may be usable from -40

1450
00:53:50,960 --> 00:53:54,720
to 125 degrees

1451
00:53:53,040 --> 00:53:56,640
ramen try to stay close to automatic

1452
00:53:54,720 --> 00:53:58,160
grade but it is still not automatic

1453
00:53:56,640 --> 00:53:59,118
grade especially in the reliability

1454
00:53:58,160 --> 00:54:02,879
department

1455
00:53:59,119 --> 00:54:02,880
so it cannot be used as a real pc

1456
00:54:03,599 --> 00:54:06,319
and the reason we try to stay close to

1457
00:54:05,040 --> 00:54:07,920
automotive hardware is to help

1458
00:54:06,319 --> 00:54:09,119
researchers evaluate the impact of

1459
00:54:07,920 --> 00:54:10,079
manufacturing tolerances and

1460
00:54:09,119 --> 00:54:12,480
environments

1461
00:54:10,079 --> 00:54:14,160
because remember manufacturers are

1462
00:54:12,480 --> 00:54:16,720
making millions of cars

1463
00:54:14,160 --> 00:54:18,160
candy that needs to operate on a large

1464
00:54:16,720 --> 00:54:20,000
operating range

1465
00:54:18,160 --> 00:54:21,839
so if you are developing for example a

1466
00:54:20,000 --> 00:54:23,200
security technology that relies on

1467
00:54:21,839 --> 00:54:25,839
hardware characteristics

1468
00:54:23,200 --> 00:54:26,480
such as the clocks of the ecu's we need

1469
00:54:25,839 --> 00:54:29,119
to prove that

1470
00:54:26,480 --> 00:54:30,640
the technology works despite manufacture

1471
00:54:29,119 --> 00:54:33,680
manufacturing tolerances

1472
00:54:30,640 --> 00:54:35,440
and harsh environments and with ramen it

1473
00:54:33,680 --> 00:54:36,319
is easy to have a large sample of eco

1474
00:54:35,440 --> 00:54:38,400
networks

1475
00:54:36,319 --> 00:54:41,680
and since they are they can easily fit

1476
00:54:38,400 --> 00:54:41,680
in various testing equipment

1477
00:54:42,799 --> 00:54:46,000
and now let's move on to the last

1478
00:54:44,240 --> 00:54:48,799
section security

1479
00:54:46,000 --> 00:54:50,400
so in the automotive industry you just

1480
00:54:48,799 --> 00:54:52,240
cannot apply the same reasoning as you

1481
00:54:50,400 --> 00:54:54,319
do in many other industries

1482
00:54:52,240 --> 00:54:56,319
for example a credit card if it detects

1483
00:54:54,319 --> 00:54:58,160
it the temperature is too cold

1484
00:54:56,319 --> 00:55:00,319
it may think that it is a tempering

1485
00:54:58,160 --> 00:55:02,879
attack and decide to shut down

1486
00:55:00,319 --> 00:55:03,680
because it is not safety critical on the

1487
00:55:02,880 --> 00:55:05,520
other hand

1488
00:55:03,680 --> 00:55:07,759
the car needs to start quickly because

1489
00:55:05,520 --> 00:55:09,040
the user should not be left out in the

1490
00:55:07,760 --> 00:55:11,920
code

1491
00:55:09,040 --> 00:55:12,400
and also credit cards have an expiration

1492
00:55:11,920 --> 00:55:13,680
date

1493
00:55:12,400 --> 00:55:16,079
so they do not need to guarantee

1494
00:55:13,680 --> 00:55:18,000
security for more than a few years

1495
00:55:16,079 --> 00:55:19,599
but cars do not have a course do not

1496
00:55:18,000 --> 00:55:21,200
have an expiration date

1497
00:55:19,599 --> 00:55:22,720
if they are well maintained they may be

1498
00:55:21,200 --> 00:55:24,319
used for several decades

1499
00:55:22,720 --> 00:55:26,480
and the security technologies should

1500
00:55:24,319 --> 00:55:28,079
keep on working

1501
00:55:26,480 --> 00:55:30,720
so in the end automotive security

1502
00:55:28,079 --> 00:55:32,880
technologies have different requirements

1503
00:55:30,720 --> 00:55:34,078
unfortunately according to past research

1504
00:55:32,880 --> 00:55:35,920
a security technology

1505
00:55:34,079 --> 00:55:37,760
is often less reliable when you extend

1506
00:55:35,920 --> 00:55:41,200
its operating temperature range

1507
00:55:37,760 --> 00:55:42,720
and its lifetime for example at low

1508
00:55:41,200 --> 00:55:44,558
temperatures you may become vulnerable

1509
00:55:42,720 --> 00:55:46,720
to cod boot attacks

1510
00:55:44,559 --> 00:55:48,319
at high temperatures it has also been

1511
00:55:46,720 --> 00:55:49,919
shown that electronics tend to be less

1512
00:55:48,319 --> 00:55:51,920
reliable

1513
00:55:49,920 --> 00:55:53,839
concerning leaching attacks and in those

1514
00:55:51,920 --> 00:55:54,400
papers high temperature means something

1515
00:55:53,839 --> 00:55:57,520
like

1516
00:55:54,400 --> 00:55:58,880
60 degrees or 100 degrees celsius

1517
00:55:57,520 --> 00:56:02,079
far from the maximum temperature

1518
00:55:58,880 --> 00:56:03,839
required for some issues

1519
00:56:02,079 --> 00:56:05,920
also it has been shown that a higher age

1520
00:56:03,839 --> 00:56:09,200
for electronics usually results in

1521
00:56:05,920 --> 00:56:09,200
different security properties

1522
00:56:10,640 --> 00:56:13,920
and you may think that the safety

1523
00:56:11,760 --> 00:56:15,440
features of automotive microcontrollers

1524
00:56:13,920 --> 00:56:16,720
will prevent some attacks such as

1525
00:56:15,440 --> 00:56:18,960
glitching attacks

1526
00:56:16,720 --> 00:56:20,319
but it has been shown that ecc memories

1527
00:56:18,960 --> 00:56:21,520
are also susceptible to engineering

1528
00:56:20,319 --> 00:56:24,558
attacks

1529
00:56:21,520 --> 00:56:26,240
and that even iso26262 slt

1530
00:56:24,559 --> 00:56:27,280
microcontrollers with the highest level

1531
00:56:26,240 --> 00:56:29,839
of safety

1532
00:56:27,280 --> 00:56:30,640
may be susceptible to glitching so

1533
00:56:29,839 --> 00:56:32,558
safety features

1534
00:56:30,640 --> 00:56:35,440
often have but they are really enough to

1535
00:56:32,559 --> 00:56:35,440
ensure security

1536
00:56:35,520 --> 00:56:39,040
what is also different with automotive

1537
00:56:37,359 --> 00:56:40,799
is what you need is that you need

1538
00:56:39,040 --> 00:56:42,240
to rethink the strategy in case of

1539
00:56:40,799 --> 00:56:44,000
security problems

1540
00:56:42,240 --> 00:56:45,279
for example with credit cards it is not

1541
00:56:44,000 --> 00:56:47,920
uncommon for office

1542
00:56:45,280 --> 00:56:50,000
authentication to fail randomly when the

1543
00:56:47,920 --> 00:56:51,839
credit card fails to work

1544
00:56:50,000 --> 00:56:54,400
usually you just need to try it once

1545
00:56:51,839 --> 00:56:55,359
more and it will be it will probably

1546
00:56:54,400 --> 00:56:57,760
work

1547
00:56:55,359 --> 00:56:58,720
and even if it fails again no light is

1548
00:56:57,760 --> 00:57:00,000
at risk

1549
00:56:58,720 --> 00:57:01,839
but the car cannot have the same

1550
00:57:00,000 --> 00:57:02,960
strategy if you add authentication to

1551
00:57:01,839 --> 00:57:05,200
the cam break

1552
00:57:02,960 --> 00:57:06,400
if you add authentication to the

1553
00:57:05,200 --> 00:57:08,000
breakdown message

1554
00:57:06,400 --> 00:57:10,000
and you start receiving break request

1555
00:57:08,000 --> 00:57:12,480
messages that fake authentication

1556
00:57:10,000 --> 00:57:14,400
what should the card really do should

1557
00:57:12,480 --> 00:57:16,480
the card really do

1558
00:57:14,400 --> 00:57:17,760
because it may be a cyber attack which

1559
00:57:16,480 --> 00:57:19,040
you want to avoid

1560
00:57:17,760 --> 00:57:20,880
but you should not rule out the

1561
00:57:19,040 --> 00:57:22,558
possibility of a roundabout function

1562
00:57:20,880 --> 00:57:24,079
or a false positive for an intrusion

1563
00:57:22,559 --> 00:57:26,960
detection system

1564
00:57:24,079 --> 00:57:28,960
and by adding complexity into the system

1565
00:57:26,960 --> 00:57:31,599
you always increase the odds of

1566
00:57:28,960 --> 00:57:33,200
the odds of a problem and which one

1567
00:57:31,599 --> 00:57:34,640
would be worse between breaking because

1568
00:57:33,200 --> 00:57:38,480
of a cyber attack

1569
00:57:34,640 --> 00:57:38,480
or not breaking because of a malfunction

1570
00:57:39,200 --> 00:57:42,879
and there is no easy way to answer that

1571
00:57:40,960 --> 00:57:44,480
question but what i want to stress here

1572
00:57:42,880 --> 00:57:46,160
is that many security countermeasures

1573
00:57:44,480 --> 00:57:48,400
that people suggest for car

1574
00:57:46,160 --> 00:57:50,319
such as encrypting the canvas

1575
00:57:48,400 --> 00:57:53,200
permanently disabling the backboards

1576
00:57:50,319 --> 00:57:54,720
debug ports or obfuscating the firmware

1577
00:57:53,200 --> 00:57:56,240
they may not necessarily be the best

1578
00:57:54,720 --> 00:57:57,919
ideas because if you suspect a

1579
00:57:56,240 --> 00:57:59,359
malfunction with an ecu

1580
00:57:57,920 --> 00:58:00,960
you need to investigate the problem

1581
00:57:59,359 --> 00:58:03,279
seriously because it may

1582
00:58:00,960 --> 00:58:04,400
harm people you cannot just replace the

1583
00:58:03,280 --> 00:58:09,200
car as you would

1584
00:58:04,400 --> 00:58:11,520
with a credit card or a smartphone

1585
00:58:09,200 --> 00:58:12,799
so technologies that can really take

1586
00:58:11,520 --> 00:58:13,520
into account both automotive

1587
00:58:12,799 --> 00:58:15,520
requirements

1588
00:58:13,520 --> 00:58:17,280
and security requirements are better and

1589
00:58:15,520 --> 00:58:19,599
we should make sure that education and

1590
00:58:17,280 --> 00:58:21,520
research in these areas

1591
00:58:19,599 --> 00:58:25,440
are accessible to many researchers

1592
00:58:21,520 --> 00:58:26,960
without ndas or prohibitive costs

1593
00:58:25,440 --> 00:58:29,200
now of course you can use ramen to try

1594
00:58:26,960 --> 00:58:29,599
out different attacks the first obvious

1595
00:58:29,200 --> 00:58:31,520
one

1596
00:58:29,599 --> 00:58:33,119
is to inject messages to alter the

1597
00:58:31,520 --> 00:58:37,839
behavior of the car

1598
00:58:33,119 --> 00:58:37,839
here for example the brakes

1599
00:58:52,799 --> 00:58:56,480
another kind of security that i did not

1600
00:58:54,559 --> 00:58:58,880
mention in this presentation is physical

1601
00:58:56,480 --> 00:59:00,400
security for sensors and actuators

1602
00:58:58,880 --> 00:59:01,839
here i am demonstrating what happens

1603
00:59:00,400 --> 00:59:02,839
when i overtake the control of the

1604
00:59:01,839 --> 00:59:05,839
steering wheel

1605
00:59:02,839 --> 00:59:08,240
activator a human will probably break

1606
00:59:05,839 --> 00:59:10,400
in this situation the self-driving

1607
00:59:08,240 --> 00:59:11,680
algorithm in kara here does not realize

1608
00:59:10,400 --> 00:59:12,400
it has lost control of the steering

1609
00:59:11,680 --> 00:59:13,598
wheel

1610
00:59:12,400 --> 00:59:16,079
and it is still trying to correct the

1611
00:59:13,599 --> 00:59:19,839
trajectory when a better decision

1612
00:59:16,079 --> 00:59:19,839
would be to stop the car

1613
00:59:20,079 --> 00:59:24,559
so this is the end of the presentation

1614
00:59:22,799 --> 00:59:26,720
we developed an inexpensive

1615
00:59:24,559 --> 00:59:29,280
safe and interactive platform to study

1616
00:59:26,720 --> 00:59:31,680
and research automotive systems

1617
00:59:29,280 --> 00:59:32,319
the platform is accessible to beginners

1618
00:59:31,680 --> 00:59:34,399
it is not

1619
00:59:32,319 --> 00:59:36,880
automotive grade but it is close enough

1620
00:59:34,400 --> 00:59:38,640
for research and educational purposes

1621
00:59:36,880 --> 00:59:40,160
the project is open source and with

1622
00:59:38,640 --> 00:59:42,400
permissive licenses

1623
00:59:40,160 --> 00:59:43,920
if you have questions or ideas do not

1624
00:59:42,400 --> 00:59:45,359
hesitate to contact us

1625
00:59:43,920 --> 00:59:47,760
especially if you are involved with

1626
00:59:45,359 --> 00:59:52,319
education research trainings ctf

1627
00:59:47,760 --> 00:59:52,319
etc and thank you for watching

1628
00:59:57,040 --> 01:00:00,640
kami thanks for this comprehensive talk

1629
01:00:00,079 --> 01:00:03,680
this was

1630
01:00:00,640 --> 01:00:05,359
amazing um we unfortunately don't have

1631
01:00:03,680 --> 01:00:06,160
much time for a question answers but

1632
01:00:05,359 --> 01:00:08,400
there's one

1633
01:00:06,160 --> 01:00:10,640
uh question that popped up which is

1634
01:00:08,400 --> 01:00:12,480
about the hardware and your pcb how did

1635
01:00:10,640 --> 01:00:14,558
you design it how much does it cost

1636
01:00:12,480 --> 01:00:17,599
actually how can you how can you get

1637
01:00:14,559 --> 01:00:19,040
actually hold of that thing

1638
01:00:17,599 --> 01:00:21,280
yes so i designed everything with

1639
01:00:19,040 --> 01:00:22,720
keycard and i mean

1640
01:00:21,280 --> 01:00:25,119
i think a few years ago it was very hard

1641
01:00:22,720 --> 01:00:27,759
to design hardware hardware

1642
01:00:25,119 --> 01:00:28,400
but now you have footprints libraries

1643
01:00:27,760 --> 01:00:31,520
available

1644
01:00:28,400 --> 01:00:33,520
online it has become very easy the bomb

1645
01:00:31,520 --> 01:00:34,799
was between 50 to 100 euros for a

1646
01:00:33,520 --> 01:00:36,480
quantity of one

1647
01:00:34,799 --> 01:00:38,160
the microcontrollers are obviously the

1648
01:00:36,480 --> 01:00:41,040
expensive parts

1649
01:00:38,160 --> 01:00:42,000
and the pcb pcb and assembling part it

1650
01:00:41,040 --> 01:00:44,558
is up to the pcb

1651
01:00:42,000 --> 01:00:45,440
fabrication fabrication service if you

1652
01:00:44,559 --> 01:00:48,079
have questions

1653
01:00:45,440 --> 01:00:57,839
just ask me on github i would be happy

1654
01:00:48,079 --> 01:00:57,839
to answer

1655
01:01:22,839 --> 01:01:25,839
wow

1656
01:01:27,559 --> 01:01:30,559
bye

