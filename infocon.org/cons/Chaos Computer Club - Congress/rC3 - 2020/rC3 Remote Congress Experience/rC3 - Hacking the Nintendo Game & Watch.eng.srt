1
00:00:01,290 --> 00:00:09,080
[Music]

2
00:00:07,140 --> 00:00:12,559
[Applause]

3
00:00:09,080 --> 00:00:14,240
[Laughter]

4
00:00:12,559 --> 00:00:17,759
so about our next speaker

5
00:00:14,240 --> 00:00:20,160
um he's a security researcher

6
00:00:17,760 --> 00:00:21,279
focused on embedded systems secure

7
00:00:20,160 --> 00:00:25,119
communications and

8
00:00:21,279 --> 00:00:28,560
mobile security he uh was

9
00:00:25,119 --> 00:00:32,320
he was nominated by forbes for uh

10
00:00:28,560 --> 00:00:36,079
the 30 under 30 in technology

11
00:00:32,320 --> 00:00:39,440
and also has won a volva

12
00:00:36,079 --> 00:00:42,399
obas absec ctf um

13
00:00:39,440 --> 00:00:43,360
he has also found and disclosed

14
00:00:42,399 --> 00:00:46,320
responsibly

15
00:00:43,360 --> 00:00:48,320
multiple vulnerabilities and especially

16
00:00:46,320 --> 00:00:50,640
for you nintendo aficionados

17
00:00:48,320 --> 00:00:51,680
i want you to watch out for the next

18
00:00:50,640 --> 00:00:53,680
intro which is

19
00:00:51,680 --> 00:00:59,840
really amazing and you will all love

20
00:00:53,680 --> 00:00:59,840
thank you very much

21
00:01:10,080 --> 00:01:13,840
oh damn it

22
00:01:21,990 --> 00:01:41,840
[Music]

23
00:01:38,840 --> 00:01:41,840
hmm

24
00:01:58,110 --> 00:02:05,430
[Music]

25
00:02:12,060 --> 00:02:15,150
[Music]

26
00:02:34,840 --> 00:02:37,840
um

27
00:02:52,640 --> 00:02:57,599
oof what a trip welcome to my talk on

28
00:02:55,680 --> 00:02:59,200
hacking the new nintendo game and watch

29
00:02:57,599 --> 00:03:00,959
super mario brothers

30
00:02:59,200 --> 00:03:02,958
my name is thomas roth and i'm a

31
00:03:00,959 --> 00:03:03,680
security researcher and trainer from

32
00:03:02,959 --> 00:03:05,200
germany

33
00:03:03,680 --> 00:03:07,519
and you can find me on twitter at

34
00:03:05,200 --> 00:03:09,518
geekdryninja and also on youtube at

35
00:03:07,519 --> 00:03:12,319
stacksmashing

36
00:03:09,519 --> 00:03:13,599
now this year marks the 35th anniversary

37
00:03:12,319 --> 00:03:16,079
of our favorite plumber

38
00:03:13,599 --> 00:03:18,238
super mario and to celebrate that

39
00:03:16,080 --> 00:03:19,280
nintendo launched a new game console

40
00:03:18,239 --> 00:03:22,640
called the nintendo

41
00:03:19,280 --> 00:03:24,799
game and watch super mario brothers

42
00:03:22,640 --> 00:03:26,958
the console is lightweight and looks

43
00:03:24,799 --> 00:03:28,879
pretty nice and it comes pre-installed

44
00:03:26,959 --> 00:03:30,400
with three games and also this nice

45
00:03:28,879 --> 00:03:32,879
animated clock

46
00:03:30,400 --> 00:03:34,720
the three games are super mario brothers

47
00:03:32,879 --> 00:03:37,200
the original nes game

48
00:03:34,720 --> 00:03:38,239
super mario brothers 2 the lost levels

49
00:03:37,200 --> 00:03:40,319
and also

50
00:03:38,239 --> 00:03:41,440
a reinterpretation of an old game and

51
00:03:40,319 --> 00:03:45,359
watch game called

52
00:03:41,440 --> 00:03:47,440
ball now as you probably know

53
00:03:45,360 --> 00:03:49,040
this is not the first retro console that

54
00:03:47,440 --> 00:03:52,640
nintendo released

55
00:03:49,040 --> 00:03:56,959
in 2016 they released the nes classic

56
00:03:52,640 --> 00:03:59,119
and 2017 they released the snes classic

57
00:03:56,959 --> 00:04:00,480
now these devices were super popular in

58
00:03:59,120 --> 00:04:02,400
the homebrew community

59
00:04:00,480 --> 00:04:03,760
because they make it really easy to add

60
00:04:02,400 --> 00:04:05,360
additional roms to it

61
00:04:03,760 --> 00:04:06,798
they make it really easy to modify the

62
00:04:05,360 --> 00:04:08,720
firmware and so on

63
00:04:06,799 --> 00:04:10,640
and you can basically just plug them

64
00:04:08,720 --> 00:04:12,159
into your computer install a simple

65
00:04:10,640 --> 00:04:13,359
software and you can do whatever you

66
00:04:12,159 --> 00:04:15,200
want with them

67
00:04:13,360 --> 00:04:17,359
the reason for that is that they run

68
00:04:15,200 --> 00:04:19,358
linux and have

69
00:04:17,358 --> 00:04:21,680
and have a pretty powerful arm processor

70
00:04:19,358 --> 00:04:24,080
on the inside and so it's really

71
00:04:21,680 --> 00:04:24,880
it's really a nice device to play with

72
00:04:24,080 --> 00:04:27,359
and so on

73
00:04:24,880 --> 00:04:29,360
and so when nintendo announced this new

74
00:04:27,360 --> 00:04:30,800
console a lot of people were hoping for

75
00:04:29,360 --> 00:04:34,880
a similar experience

76
00:04:30,800 --> 00:04:37,440
of having a nice mobile homebrew device

77
00:04:34,880 --> 00:04:37,919
now if you were to make a venn diagram

78
00:04:37,440 --> 00:04:39,680
of

79
00:04:37,919 --> 00:04:41,359
some of my biggest interests you would

80
00:04:39,680 --> 00:04:44,400
have reverse engineering

81
00:04:41,360 --> 00:04:46,720
hardware hacking and retro computing

82
00:04:44,400 --> 00:04:48,560
and this new gaming watch fits right in

83
00:04:46,720 --> 00:04:50,800
the middle of that and so when it was

84
00:04:48,560 --> 00:04:52,639
announced on the 3rd of september

85
00:04:50,800 --> 00:04:55,280
i knew that i needed to have one of

86
00:04:52,639 --> 00:04:56,400
those and given how hard the nes and the

87
00:04:55,280 --> 00:04:59,599
snes classic

88
00:04:56,400 --> 00:05:01,840
were to buy for a while i pre-ordered it

89
00:04:59,600 --> 00:05:04,960
on like four or five different sites

90
00:05:01,840 --> 00:05:06,638
a couple of which got cancelled but i

91
00:05:04,960 --> 00:05:07,599
was pretty excited because i had three

92
00:05:06,639 --> 00:05:10,080
pre-orders

93
00:05:07,600 --> 00:05:11,280
and was supposed to ship on the 13th of

94
00:05:10,080 --> 00:05:13,120
november

95
00:05:11,280 --> 00:05:14,400
and so i was really looking forward to

96
00:05:13,120 --> 00:05:16,479
this

97
00:05:14,400 --> 00:05:18,400
and i was having breakfast on the 12th

98
00:05:16,479 --> 00:05:18,719
of november when suddenly the doorbell

99
00:05:18,400 --> 00:05:21,280
rang

100
00:05:18,720 --> 00:05:21,840
and dhl delivered me the new game and

101
00:05:21,280 --> 00:05:24,880
watch

102
00:05:21,840 --> 00:05:26,239
one day before the official release now

103
00:05:24,880 --> 00:05:28,400
at that point in time

104
00:05:26,240 --> 00:05:30,960
there was no technical information

105
00:05:28,400 --> 00:05:33,679
available about the device whatsoever

106
00:05:30,960 --> 00:05:35,120
like if you searched for game and watch

107
00:05:33,680 --> 00:05:36,560
on twitter you would only find the

108
00:05:35,120 --> 00:05:38,639
announcements or maybe

109
00:05:36,560 --> 00:05:40,000
a picture of the box of someone who also

110
00:05:38,639 --> 00:05:42,160
received it early

111
00:05:40,000 --> 00:05:43,280
but there were no teardowns no pictures

112
00:05:42,160 --> 00:05:45,919
of the insides

113
00:05:43,280 --> 00:05:46,799
and most importantly nobody had hacked

114
00:05:45,919 --> 00:05:49,440
it yet

115
00:05:46,800 --> 00:05:51,360
and this gave me as a hardware hacker

116
00:05:49,440 --> 00:05:53,360
the kind of unique opportunity to

117
00:05:51,360 --> 00:05:56,000
potentially be the first one to hack

118
00:05:53,360 --> 00:05:57,840
a new nintendo console and so i just

119
00:05:56,000 --> 00:05:58,400
literally dropped everything else i was

120
00:05:57,840 --> 00:06:01,919
doing

121
00:05:58,400 --> 00:06:03,919
and started investigating the device

122
00:06:01,919 --> 00:06:05,280
now i should say that normally i stay

123
00:06:03,919 --> 00:06:08,639
pretty far away from

124
00:06:05,280 --> 00:06:10,318
any new console hacking mainly because

125
00:06:08,639 --> 00:06:11,440
of the piracy issues i don't want to

126
00:06:10,319 --> 00:06:14,479
enable piracy

127
00:06:11,440 --> 00:06:17,440
i don't want to i don't want to

128
00:06:14,479 --> 00:06:17,840
deal with piracy and i don't want to

129
00:06:17,440 --> 00:06:20,240
build

130
00:06:17,840 --> 00:06:21,758
tools that enable other people to pirate

131
00:06:20,240 --> 00:06:24,080
stuff basically

132
00:06:21,759 --> 00:06:25,759
but given that on this device you cannot

133
00:06:24,080 --> 00:06:27,840
buy any more games and that all the

134
00:06:25,759 --> 00:06:30,000
games that are on there

135
00:06:27,840 --> 00:06:31,039
were basically already released over 30

136
00:06:30,000 --> 00:06:33,039
years ago

137
00:06:31,039 --> 00:06:34,400
i was not really worried about piracy

138
00:06:33,039 --> 00:06:36,880
and felt pretty comfortable

139
00:06:34,400 --> 00:06:37,840
in sharing all the results of the

140
00:06:36,880 --> 00:06:41,039
investigation

141
00:06:37,840 --> 00:06:41,520
and also the basically the issues we

142
00:06:41,039 --> 00:06:43,759
found

143
00:06:41,520 --> 00:06:44,560
that allowed us to customize the device

144
00:06:43,759 --> 00:06:46,319
and so on

145
00:06:44,560 --> 00:06:48,160
and in this talk i want to walk you

146
00:06:46,319 --> 00:06:50,160
through how we managed to

147
00:06:48,160 --> 00:06:52,880
hack the device and how you can do it at

148
00:06:50,160 --> 00:06:56,960
home using relatively cheap hardware

149
00:06:52,880 --> 00:06:59,919
and yeah hope you enjoy it

150
00:06:56,960 --> 00:07:01,599
now let's start by looking at the at the

151
00:06:59,919 --> 00:07:03,520
device itself

152
00:07:01,599 --> 00:07:05,039
the device is pretty lightweight and

153
00:07:03,520 --> 00:07:08,000
comes with a nicely

154
00:07:05,039 --> 00:07:09,759
sized case and so it really for me it

155
00:07:08,000 --> 00:07:10,240
sits really well in my hand and it has a

156
00:07:09,759 --> 00:07:14,080
nice

157
00:07:10,240 --> 00:07:16,400
320 by 240 lcd display a d-pad

158
00:07:14,080 --> 00:07:18,240
a and b buttons and also three buttons

159
00:07:16,400 --> 00:07:18,960
to switch between the different game

160
00:07:18,240 --> 00:07:20,960
modes

161
00:07:18,960 --> 00:07:22,318
on the right side we also have the power

162
00:07:20,960 --> 00:07:24,400
button and the usb c

163
00:07:22,319 --> 00:07:25,599
port now before you get excited about

164
00:07:24,400 --> 00:07:27,039
the usb port

165
00:07:25,599 --> 00:07:29,520
i can already tell you that

166
00:07:27,039 --> 00:07:31,280
unfortunately nintendo decided to not

167
00:07:29,520 --> 00:07:33,520
connect the data lines of the usb

168
00:07:31,280 --> 00:07:36,000
port and so you can really only use it

169
00:07:33,520 --> 00:07:37,520
for charging

170
00:07:36,000 --> 00:07:40,479
also because we are talking about

171
00:07:37,520 --> 00:07:41,919
nintendo here they use their proprietary

172
00:07:40,479 --> 00:07:43,919
tripoint screws

173
00:07:41,919 --> 00:07:46,878
on the device and so to open it up you

174
00:07:43,919 --> 00:07:48,878
need one of those special tri-point bits

175
00:07:46,879 --> 00:07:51,199
luckily nowadays most bit sets should

176
00:07:48,879 --> 00:07:53,280
have them but it still

177
00:07:51,199 --> 00:07:54,879
would suck if you order your unit and

178
00:07:53,280 --> 00:07:57,599
then you can't open it up because you're

179
00:07:54,879 --> 00:07:59,680
missing a screwdriver

180
00:07:57,599 --> 00:08:00,639
after opening it up the first thing you

181
00:07:59,680 --> 00:08:03,120
probably notice

182
00:08:00,639 --> 00:08:05,199
is the battery and if you've ever opened

183
00:08:03,120 --> 00:08:07,039
up a nintendo switch joy-con before you

184
00:08:05,199 --> 00:08:08,400
might recognize the battery because it's

185
00:08:07,039 --> 00:08:10,960
the exact same one

186
00:08:08,400 --> 00:08:12,638
that's used in the joy-cons this is very

187
00:08:10,960 --> 00:08:14,638
cool because if down the line like let's

188
00:08:12,639 --> 00:08:16,639
say in two or three years

189
00:08:14,639 --> 00:08:18,560
your battery of your gaming watch dies

190
00:08:16,639 --> 00:08:20,160
you can just go and buy a joy-con

191
00:08:18,560 --> 00:08:21,039
battery which you can have really

192
00:08:20,160 --> 00:08:24,400
cheaply

193
00:08:21,039 --> 00:08:26,000
almost anywhere next to the battery on

194
00:08:24,400 --> 00:08:29,120
the right side we have

195
00:08:26,000 --> 00:08:31,520
a small speaker which is not very good

196
00:08:29,120 --> 00:08:33,039
and underneath we have the main pcb with

197
00:08:31,520 --> 00:08:35,679
the processor the storage

198
00:08:33,039 --> 00:08:36,559
and so on and so forth let's take a look

199
00:08:35,679 --> 00:08:38,640
at those

200
00:08:36,559 --> 00:08:41,838
now the main processor of the device is

201
00:08:38,640 --> 00:08:41,838
an stm32

202
00:08:42,080 --> 00:08:47,440
this is a cortex m7 from st

203
00:08:44,519 --> 00:08:48,080
microelectronics with 1.3 megabytes of

204
00:08:47,440 --> 00:08:51,279
ram

205
00:08:48,080 --> 00:08:53,680
and 128 kilobytes of flash it runs at

206
00:08:51,279 --> 00:08:55,519
280 megahertz and is a pretty beefy

207
00:08:53,680 --> 00:08:58,079
microcontroller

208
00:08:55,519 --> 00:09:01,040
but it's much less powerful than the

209
00:08:58,080 --> 00:09:02,640
processor in the nes or snes classic

210
00:09:01,040 --> 00:09:04,480
like this processor is really just a

211
00:09:02,640 --> 00:09:05,360
microcontroller and so it can't run

212
00:09:04,480 --> 00:09:08,240
linux

213
00:09:05,360 --> 00:09:10,160
it can't run let's say super complex

214
00:09:08,240 --> 00:09:12,080
software instead it will be

215
00:09:10,160 --> 00:09:13,760
it will be programmed in some bare metal

216
00:09:12,080 --> 00:09:15,839
way and so we will have a bare metal

217
00:09:13,760 --> 00:09:17,600
firmware on the device

218
00:09:15,839 --> 00:09:19,600
to the right of it you can also find a

219
00:09:17,600 --> 00:09:22,320
one megabyte spi flash

220
00:09:19,600 --> 00:09:24,959
um and so overall we have roughly 1.1

221
00:09:22,320 --> 00:09:27,120
megabyte of storage on the device

222
00:09:24,959 --> 00:09:28,719
now most microcontrollers or basically

223
00:09:27,120 --> 00:09:31,440
all microcontrollers

224
00:09:28,720 --> 00:09:32,880
have a debugging port and if we take a

225
00:09:31,440 --> 00:09:34,839
look at the pcb

226
00:09:32,880 --> 00:09:36,959
you can see that there are five

227
00:09:34,839 --> 00:09:38,959
unpopulated contacts here

228
00:09:36,959 --> 00:09:41,279
and if you see a couple of contacts that

229
00:09:38,959 --> 00:09:44,000
are not populated close to your cpu

230
00:09:41,279 --> 00:09:45,519
it's very likely that that it's the

231
00:09:44,000 --> 00:09:48,399
debugging port

232
00:09:45,519 --> 00:09:50,480
and luckily the data sheet for the stm32

233
00:09:48,399 --> 00:09:52,720
is openly available and so

234
00:09:50,480 --> 00:09:54,000
we can check the pin outs in the

235
00:09:52,720 --> 00:09:57,200
datasheet

236
00:09:54,000 --> 00:09:58,560
and then use a multimeter to to see

237
00:09:57,200 --> 00:10:00,240
whether these pins are actually the

238
00:09:58,560 --> 00:10:02,319
debugging interface

239
00:10:00,240 --> 00:10:05,200
and turns out they actually are and so

240
00:10:02,320 --> 00:10:08,079
we can find the swd debugging interface

241
00:10:05,200 --> 00:10:10,640
as well as vcc and ground exposed on

242
00:10:08,079 --> 00:10:12,239
these pins

243
00:10:10,640 --> 00:10:14,720
now this means that we can use a

244
00:10:12,240 --> 00:10:17,120
debugger so for example a j-link or

245
00:10:14,720 --> 00:10:18,640
an st-link or whatever to connect to the

246
00:10:17,120 --> 00:10:21,040
device and because

247
00:10:18,640 --> 00:10:22,640
the the contacts are really easy to

248
00:10:21,040 --> 00:10:24,319
access you don't even have to solder

249
00:10:22,640 --> 00:10:25,279
like you can just hook up a couple of

250
00:10:24,320 --> 00:10:28,320
test pins

251
00:10:25,279 --> 00:10:31,360
and they will allow you to to easily

252
00:10:28,320 --> 00:10:32,720
hook up your debugger now the problem is

253
00:10:31,360 --> 00:10:34,560
on most devices

254
00:10:32,720 --> 00:10:35,920
the debugging interface will be locked

255
00:10:34,560 --> 00:10:38,880
during manufacturing

256
00:10:35,920 --> 00:10:41,199
this is done to prevent people like us

257
00:10:38,880 --> 00:10:42,959
to basically do whatever with the device

258
00:10:41,200 --> 00:10:45,519
and to prevent us from being able to

259
00:10:42,959 --> 00:10:46,640
dump the firmware uh potentially reflash

260
00:10:45,519 --> 00:10:48,800
it and so on

261
00:10:46,640 --> 00:10:50,560
and so i was very curious to see whether

262
00:10:48,800 --> 00:10:51,439
we can actually connect to the debugging

263
00:10:50,560 --> 00:10:53,518
port

264
00:10:51,440 --> 00:10:55,760
and when starting up j-link and trying

265
00:10:53,519 --> 00:10:57,360
to connect we can see it can actually

266
00:10:55,760 --> 00:10:59,680
successfully connect

267
00:10:57,360 --> 00:11:01,440
but when you take a closer look there's

268
00:10:59,680 --> 00:11:04,640
also a message that the device

269
00:11:01,440 --> 00:11:08,880
is actively protected

270
00:11:04,640 --> 00:11:11,199
this is because the chip the stm3d2 chip

271
00:11:08,880 --> 00:11:14,480
features something called rdp protection

272
00:11:11,200 --> 00:11:17,040
level or readout protection level

273
00:11:14,480 --> 00:11:18,959
this is basically the the security

274
00:11:17,040 --> 00:11:19,439
setting for the debugging interface and

275
00:11:18,959 --> 00:11:22,319
it has

276
00:11:19,440 --> 00:11:24,399
three levels level zero means no

277
00:11:22,320 --> 00:11:26,880
protection is active

278
00:11:24,399 --> 00:11:28,000
level one means that the flash memory is

279
00:11:26,880 --> 00:11:29,600
protected and so we

280
00:11:28,000 --> 00:11:32,560
can't dump the internal flash of the

281
00:11:29,600 --> 00:11:33,839
device however we can dump the ramp

282
00:11:32,560 --> 00:11:36,719
contents and we can also

283
00:11:33,839 --> 00:11:37,920
execute code from ram and then there's

284
00:11:36,720 --> 00:11:39,760
also level 2

285
00:11:37,920 --> 00:11:41,360
which means that all debugging features

286
00:11:39,760 --> 00:11:43,839
are disabled

287
00:11:41,360 --> 00:11:44,720
now just because a chip is in level 2

288
00:11:43,839 --> 00:11:47,120
doesn't mean that

289
00:11:44,720 --> 00:11:49,839
you have to give up for example in our

290
00:11:47,120 --> 00:11:51,839
talk wallet.failed a couple of years ago

291
00:11:49,839 --> 00:11:52,880
we showed how to use fault injection to

292
00:11:51,839 --> 00:11:54,800
bypass

293
00:11:52,880 --> 00:11:56,560
the level 2 protection and downgrade a

294
00:11:54,800 --> 00:11:58,160
chip to level one

295
00:11:56,560 --> 00:12:00,319
however on the game and watch we are

296
00:11:58,160 --> 00:12:01,439
lucky and the interface is not fully

297
00:12:00,320 --> 00:12:03,440
disabled

298
00:12:01,440 --> 00:12:05,360
instead it's in level one and so we can

299
00:12:03,440 --> 00:12:08,000
still dump the ram

300
00:12:05,360 --> 00:12:08,800
which is a pretty good entry point even

301
00:12:08,000 --> 00:12:10,720
though

302
00:12:08,800 --> 00:12:12,560
we can't dump the firmware yet now

303
00:12:10,720 --> 00:12:14,160
having dumped the ram of the device i

304
00:12:12,560 --> 00:12:16,880
was pretty curious to see

305
00:12:14,160 --> 00:12:19,040
what's inside of it and one of my

306
00:12:16,880 --> 00:12:21,200
suspicions was that potentially

307
00:12:19,040 --> 00:12:22,480
the emulator that's hopefully running on

308
00:12:21,200 --> 00:12:24,560
the device

309
00:12:22,480 --> 00:12:26,480
loads the original super mario brothers

310
00:12:24,560 --> 00:12:29,839
rom into ram

311
00:12:26,480 --> 00:12:32,560
and so i was wondering whether maybe we

312
00:12:29,839 --> 00:12:35,600
can find the rom that the device uses

313
00:12:32,560 --> 00:12:36,319
in the ram dump and so i open up the ram

314
00:12:35,600 --> 00:12:38,800
dump in a

315
00:12:36,320 --> 00:12:40,880
in a hex editor and i also open up the

316
00:12:38,800 --> 00:12:43,359
original super mario brothers rom

317
00:12:40,880 --> 00:12:45,040
in a second window in a hex editor and

318
00:12:43,360 --> 00:12:46,880
try to find different parts of the

319
00:12:45,040 --> 00:12:50,480
original rom in the ram dump

320
00:12:46,880 --> 00:12:51,120
and it turns out that yes the nes rom is

321
00:12:50,480 --> 00:12:53,440
loaded

322
00:12:51,120 --> 00:12:55,200
into ram and it's always at the same

323
00:12:53,440 --> 00:12:57,600
address and so it's probably like during

324
00:12:55,200 --> 00:12:59,600
boot up it gets copied into ram

325
00:12:57,600 --> 00:13:01,839
or something along those lines and so

326
00:12:59,600 --> 00:13:02,399
this is pretty cool to know because it

327
00:13:01,839 --> 00:13:05,360
tells us

328
00:13:02,399 --> 00:13:06,000
a couple of things first off we know now

329
00:13:05,360 --> 00:13:08,160
that the debug

330
00:13:06,000 --> 00:13:09,279
port is enabled and working but that

331
00:13:08,160 --> 00:13:11,760
it's unfortunately

332
00:13:09,279 --> 00:13:14,000
at rdp level one and so we can only dump

333
00:13:11,760 --> 00:13:16,000
the the ram

334
00:13:14,000 --> 00:13:17,040
and we also know that the nes rom is

335
00:13:16,000 --> 00:13:18,800
loaded into ram

336
00:13:17,040 --> 00:13:20,480
and this means that the device runs a

337
00:13:18,800 --> 00:13:22,719
real nes emulator

338
00:13:20,480 --> 00:13:24,880
and so if we get aki we can for example

339
00:13:22,720 --> 00:13:27,519
just replace the rom that is used by

340
00:13:24,880 --> 00:13:30,399
by the device and play for example our

341
00:13:27,519 --> 00:13:30,399
own nes game

342
00:13:33,680 --> 00:13:37,519
next was time to dump the flash chip of

343
00:13:36,880 --> 00:13:39,439
the device

344
00:13:37,519 --> 00:13:41,519
for this i'm using a device called mini

345
00:13:39,440 --> 00:13:42,120
pro and i'm using one of these really

346
00:13:41,519 --> 00:13:45,120
useful

347
00:13:42,120 --> 00:13:47,360
syc8 clips and so these ones you can

348
00:13:45,120 --> 00:13:50,320
simply clip onto the flash chip

349
00:13:47,360 --> 00:13:52,160
and then dump it now one warning though

350
00:13:50,320 --> 00:13:54,079
the flash chip on the device is running

351
00:13:52,160 --> 00:13:55,519
at 1.8 volts and so you want to make

352
00:13:54,079 --> 00:13:58,560
sure that your programmer

353
00:13:55,519 --> 00:14:01,040
also supports 1.8 volt operation if you

354
00:13:58,560 --> 00:14:01,599
accidentally try to read it out at 3.3

355
00:14:01,040 --> 00:14:03,680
volts

356
00:14:01,600 --> 00:14:05,360
you will break your flash trust me

357
00:14:03,680 --> 00:14:07,760
because it happened to me on one of my

358
00:14:05,360 --> 00:14:07,760
units

359
00:14:08,160 --> 00:14:12,079
now with this flash dump from the device

360
00:14:10,320 --> 00:14:14,160
we can start to analyze it

361
00:14:12,079 --> 00:14:16,000
and what i always like to do first is

362
00:14:14,160 --> 00:14:18,079
take a look at the entropy or the

363
00:14:16,000 --> 00:14:20,000
randomness of the flash dump

364
00:14:18,079 --> 00:14:21,519
and so using bin walk with the dash

365
00:14:20,000 --> 00:14:23,839
uppercase e option

366
00:14:21,519 --> 00:14:25,680
we get a nice entropy graph and in this

367
00:14:23,839 --> 00:14:27,600
case you can see we have a very high

368
00:14:25,680 --> 00:14:28,800
entropy over almost the whole flash

369
00:14:27,600 --> 00:14:31,600
contents

370
00:14:28,800 --> 00:14:33,279
and this mostly indicates that the flash

371
00:14:31,600 --> 00:14:35,440
contents are encrypted

372
00:14:33,279 --> 00:14:37,680
it could also mean compression but if

373
00:14:35,440 --> 00:14:40,480
it's compressed you would often see

374
00:14:37,680 --> 00:14:41,760
more like dips in the entropy and in

375
00:14:40,480 --> 00:14:45,040
this case it's one

376
00:14:41,760 --> 00:14:47,519
very high entropy stream we also notice

377
00:14:45,040 --> 00:14:49,439
that there are no repetitions whatsoever

378
00:14:47,519 --> 00:14:51,519
which also tells us that it's probably

379
00:14:49,440 --> 00:14:52,240
not like a simple xor based encryption

380
00:14:51,519 --> 00:14:55,040
or so

381
00:14:52,240 --> 00:14:56,079
and instead something like aes or or

382
00:14:55,040 --> 00:14:58,000
something similar

383
00:14:56,079 --> 00:14:59,439
but just because the flash is encrypted

384
00:14:58,000 --> 00:15:00,240
doesn't mean we have to give up on the

385
00:14:59,440 --> 00:15:02,320
contrary

386
00:15:00,240 --> 00:15:04,000
i think now it starts to get interesting

387
00:15:02,320 --> 00:15:05,519
because you actually have a challenge

388
00:15:04,000 --> 00:15:08,160
and it's not just plug and

389
00:15:05,519 --> 00:15:09,519
plug and play so to say one of the

390
00:15:08,160 --> 00:15:12,800
biggest questions i had

391
00:15:09,519 --> 00:15:14,720
is is the flash actually verified like

392
00:15:12,800 --> 00:15:16,399
does the device boot even though the

393
00:15:14,720 --> 00:15:18,880
flash has been modified

394
00:15:16,399 --> 00:15:19,760
because if it does this would open up a

395
00:15:18,880 --> 00:15:23,439
lot of

396
00:15:19,760 --> 00:15:27,199
attack vectors basically as you will see

397
00:15:23,440 --> 00:15:27,839
and so to to verify this i basically try

398
00:15:27,199 --> 00:15:30,240
to put

399
00:15:27,839 --> 00:15:31,440
zeros in random places in the flash

400
00:15:30,240 --> 00:15:33,600
image and so

401
00:15:31,440 --> 00:15:34,959
i put some at address 0 so i'm at hex

402
00:15:33,600 --> 00:15:36,480
2000 and so on

403
00:15:34,959 --> 00:15:38,959
and then i checked whether the device

404
00:15:36,480 --> 00:15:41,279
would still boot up and with the most

405
00:15:38,959 --> 00:15:42,479
flash modifications it would still boot

406
00:15:41,279 --> 00:15:44,240
just fine

407
00:15:42,480 --> 00:15:45,839
this tells us that even though the flash

408
00:15:44,240 --> 00:15:47,360
contents are encrypted

409
00:15:45,839 --> 00:15:49,360
they are not validated they are not

410
00:15:47,360 --> 00:15:50,880
check sum or anything and so the device

411
00:15:49,360 --> 00:15:51,759
and so we can potentially trick the

412
00:15:50,880 --> 00:15:54,959
device

413
00:15:51,759 --> 00:15:56,639
into accepting a modified flash image

414
00:15:54,959 --> 00:16:00,239
and this is really important to know as

415
00:15:56,639 --> 00:16:02,959
you will see in a couple of minutes

416
00:16:00,240 --> 00:16:04,320
my next suspicion was that maybe the nes

417
00:16:02,959 --> 00:16:06,839
rom we see in ram

418
00:16:04,320 --> 00:16:08,320
is actually loaded from the external

419
00:16:06,839 --> 00:16:11,279
flash

420
00:16:08,320 --> 00:16:11,680
and so to to find out whether that's the

421
00:16:11,279 --> 00:16:14,240
case

422
00:16:11,680 --> 00:16:14,959
i again took the flash and i inserted

423
00:16:14,240 --> 00:16:18,240
zeros

424
00:16:14,959 --> 00:16:20,959
at multiple positions in the flash image

425
00:16:18,240 --> 00:16:22,079
flashed that over booted up the game

426
00:16:20,959 --> 00:16:24,800
dumped the ram

427
00:16:22,079 --> 00:16:26,319
and then compared the nes rom that i'm

428
00:16:24,800 --> 00:16:28,880
now dumping from ram

429
00:16:26,320 --> 00:16:30,399
with the one that i dumped initially and

430
00:16:28,880 --> 00:16:32,639
checked whether they are equal

431
00:16:30,399 --> 00:16:33,920
because my suspicion was that maybe i

432
00:16:32,639 --> 00:16:35,920
can

433
00:16:33,920 --> 00:16:37,199
i can overwrite a couple of bytes in the

434
00:16:35,920 --> 00:16:40,079
encrypted flash

435
00:16:37,199 --> 00:16:40,719
and then i will modify the nes rom and

436
00:16:40,079 --> 00:16:42,719
after

437
00:16:40,720 --> 00:16:44,720
doing this for like i don't know half an

438
00:16:42,720 --> 00:16:47,040
hour i got lucky

439
00:16:44,720 --> 00:16:48,399
and i modified four bytes in the flash

440
00:16:47,040 --> 00:16:50,560
image and four bytes

441
00:16:48,399 --> 00:16:51,759
in the ram sorry in the rom that was

442
00:16:50,560 --> 00:16:54,800
loaded into ram

443
00:16:51,759 --> 00:16:56,720
changed and this tells us quite a bit

444
00:16:54,800 --> 00:16:58,800
it means that the rom is loaded from

445
00:16:56,720 --> 00:17:00,959
flash into ram

446
00:16:58,800 --> 00:17:03,359
and that the flash contents are not

447
00:17:00,959 --> 00:17:06,399
validated

448
00:17:03,360 --> 00:17:06,799
and what's also important is that we we

449
00:17:06,400 --> 00:17:09,280
changed

450
00:17:06,799 --> 00:17:10,400
four bytes in the flash and now four

451
00:17:09,280 --> 00:17:13,119
bytes in the

452
00:17:10,400 --> 00:17:14,400
decrypted image changed and this is very

453
00:17:13,119 --> 00:17:16,079
important to know because

454
00:17:14,400 --> 00:17:17,919
if we take a look at what we would

455
00:17:16,079 --> 00:17:19,280
expect to happen when we when we change

456
00:17:17,919 --> 00:17:21,039
the flash contents

457
00:17:19,280 --> 00:17:23,520
there are multiple outcomes and so for

458
00:17:21,039 --> 00:17:24,959
example here we have these by flash

459
00:17:23,520 --> 00:17:27,918
contents on the left

460
00:17:24,959 --> 00:17:29,520
and the ram contents on the right and so

461
00:17:27,919 --> 00:17:30,720
the ram contents are basically the

462
00:17:29,520 --> 00:17:34,799
decrypted version

463
00:17:30,720 --> 00:17:36,720
of the spyflash contents now let's say

464
00:17:34,799 --> 00:17:39,760
we change four bytes in the encrypted

465
00:17:36,720 --> 00:17:42,240
flash image to zeros

466
00:17:39,760 --> 00:17:44,240
how would we expect the ram contents to

467
00:17:42,240 --> 00:17:44,880
change for example if we would see that

468
00:17:44,240 --> 00:17:48,000
now

469
00:17:44,880 --> 00:17:50,320
16 bytes in the ram are changing

470
00:17:48,000 --> 00:17:51,360
this means that we are potentially

471
00:17:50,320 --> 00:17:54,080
looking at

472
00:17:51,360 --> 00:17:55,840
an encryption algorithm such as aes in

473
00:17:54,080 --> 00:17:57,520
electronic codebook mode

474
00:17:55,840 --> 00:17:58,959
because it's a block-based encryption

475
00:17:57,520 --> 00:18:02,480
and so if we change

476
00:17:58,960 --> 00:18:04,400
4 bytes in the input data a block size

477
00:18:02,480 --> 00:18:07,280
in this case 16 bytes and the output

478
00:18:04,400 --> 00:18:07,280
data would change

479
00:18:07,679 --> 00:18:11,840
the next possibility is that we change 4

480
00:18:10,240 --> 00:18:15,360
bytes in the spy flash

481
00:18:11,840 --> 00:18:16,559
and all data afterwards will be changed

482
00:18:15,360 --> 00:18:18,879
and in this case

483
00:18:16,559 --> 00:18:19,840
we would look at some kind of chaining

484
00:18:18,880 --> 00:18:23,679
cipher such as

485
00:18:19,840 --> 00:18:26,399
aes in the cbc mode however if we change

486
00:18:23,679 --> 00:18:28,160
4 bytes in the spy flash and only 4

487
00:18:26,400 --> 00:18:31,280
bytes in the ram changed

488
00:18:28,160 --> 00:18:33,039
we are looking at at something such as

489
00:18:31,280 --> 00:18:34,879
aes and counter mode

490
00:18:33,039 --> 00:18:38,799
and to understand this let's take a

491
00:18:34,880 --> 00:18:41,280
better look at how aes and ctr works

492
00:18:38,799 --> 00:18:42,480
aes ctr works by having your clear text

493
00:18:41,280 --> 00:18:45,039
and xoring it

494
00:18:42,480 --> 00:18:46,080
with an aes encryption stream that is

495
00:18:45,039 --> 00:18:50,480
generated from

496
00:18:46,080 --> 00:18:53,678
a key a nonce and a counter algorithm

497
00:18:50,480 --> 00:18:55,919
now the aes stream that will be used to

498
00:18:53,679 --> 00:18:56,880
xor your clear text will always be the

499
00:18:55,919 --> 00:18:59,440
same if key

500
00:18:56,880 --> 00:19:02,160
and nonce is the same this is why it's

501
00:18:59,440 --> 00:19:04,559
super important that if you use aes ctr

502
00:19:02,160 --> 00:19:06,160
you always select a unique nonce for

503
00:19:04,559 --> 00:19:08,799
each encryption

504
00:19:06,160 --> 00:19:10,640
if you encrypt similar data with the

505
00:19:08,799 --> 00:19:12,879
same nonce twice

506
00:19:10,640 --> 00:19:14,400
large parts of the resulting cipher text

507
00:19:12,880 --> 00:19:16,799
will be the same

508
00:19:14,400 --> 00:19:18,400
and so the clear text gets xored with

509
00:19:16,799 --> 00:19:21,600
the asctr stream

510
00:19:18,400 --> 00:19:24,160
and then we get our ciphertext

511
00:19:21,600 --> 00:19:25,439
now if we know the clear text as we do

512
00:19:24,160 --> 00:19:28,559
because the clear text

513
00:19:25,440 --> 00:19:29,360
is the rom that is loaded into ram and

514
00:19:28,559 --> 00:19:31,678
we know

515
00:19:29,360 --> 00:19:33,520
the cipher text which we do because it's

516
00:19:31,679 --> 00:19:35,120
the contents of the encrypted flash we

517
00:19:33,520 --> 00:19:38,960
just dumped

518
00:19:35,120 --> 00:19:41,600
we can basically reverse the operation

519
00:19:38,960 --> 00:19:43,039
and as a result we get the aes ctr

520
00:19:41,600 --> 00:19:46,879
stream that was used to

521
00:19:43,039 --> 00:19:47,679
encrypt the flash and now this means

522
00:19:46,880 --> 00:19:50,799
that we can

523
00:19:47,679 --> 00:19:53,360
take for example a custom rom

524
00:19:50,799 --> 00:19:55,679
xor it with the asctr stream we just

525
00:19:53,360 --> 00:19:57,840
calculated

526
00:19:55,679 --> 00:20:00,000
and then generate our own encrypted

527
00:19:57,840 --> 00:20:00,399
flash image for example with a modified

528
00:20:00,000 --> 00:20:01,919
rom

529
00:20:00,400 --> 00:20:04,240
and so i wrote a couple of python

530
00:20:01,919 --> 00:20:07,280
scripts to to try this

531
00:20:04,240 --> 00:20:08,960
and after a while i was running hacked

532
00:20:07,280 --> 00:20:10,720
super mario brothers instead of super

533
00:20:08,960 --> 00:20:13,840
mario brothers

534
00:20:10,720 --> 00:20:15,600
so woohoo we hacked the nintendo game

535
00:20:13,840 --> 00:20:16,320
and watch one day before the official

536
00:20:15,600 --> 00:20:18,480
release

537
00:20:16,320 --> 00:20:20,000
and we can install modified super mario

538
00:20:18,480 --> 00:20:22,000
brothers roms

539
00:20:20,000 --> 00:20:23,360
now you can find the scripts that i used

540
00:20:22,000 --> 00:20:25,440
for this on my github

541
00:20:23,360 --> 00:20:26,479
so it's in a repository called game and

542
00:20:25,440 --> 00:20:28,799
watch hacking

543
00:20:26,480 --> 00:20:30,400
and i was super excited because it mean

544
00:20:28,799 --> 00:20:32,720
it meant that i succeeded and that i

545
00:20:30,400 --> 00:20:35,440
basically hacked a nintendo console

546
00:20:32,720 --> 00:20:37,600
one day before the official release

547
00:20:35,440 --> 00:20:40,799
unfortunately i finished the level but

548
00:20:37,600 --> 00:20:42,799
toad wasn't as excited he told me that

549
00:20:40,799 --> 00:20:46,240
unfortunately our firmware is still

550
00:20:42,799 --> 00:20:48,320
in another castle and so on the monday

551
00:20:46,240 --> 00:20:50,080
after the launch of the device

552
00:20:48,320 --> 00:20:52,080
i teamed up with conrad pacman a

553
00:20:50,080 --> 00:20:54,158
hardware hacker from sweden who i met at

554
00:20:52,080 --> 00:20:56,480
the previous congress

555
00:20:54,159 --> 00:20:58,480
and we started chatting and throwing

556
00:20:56,480 --> 00:21:00,720
ideas back and forth and so on

557
00:20:58,480 --> 00:21:02,240
and eventually we noticed that the

558
00:21:00,720 --> 00:21:05,280
device has a special

559
00:21:02,240 --> 00:21:07,120
ram area called itcm ram which is a

560
00:21:05,280 --> 00:21:08,879
tightly coupled instruction ram

561
00:21:07,120 --> 00:21:11,439
that is normally used for very high

562
00:21:08,880 --> 00:21:12,880
performance routines such as interrupt

563
00:21:11,440 --> 00:21:15,760
handlers and so on

564
00:21:12,880 --> 00:21:16,000
and so it's in a very fast ram area and

565
00:21:15,760 --> 00:21:18,000
we

566
00:21:16,000 --> 00:21:21,600
realized that we never actually looked

567
00:21:18,000 --> 00:21:23,440
at the contents of that itcm ram

568
00:21:21,600 --> 00:21:24,879
and so we dumped it from the device

569
00:21:23,440 --> 00:21:27,360
using the debugging port

570
00:21:24,880 --> 00:21:27,919
and it turns out that this itcm ram

571
00:21:27,360 --> 00:21:31,840
contains

572
00:21:27,919 --> 00:21:33,919
arm code and so again the question is

573
00:21:31,840 --> 00:21:36,559
where does this arm code come from does

574
00:21:33,919 --> 00:21:39,280
it maybe just like the nes rom come from

575
00:21:36,559 --> 00:21:43,360
the external flash

576
00:21:39,280 --> 00:21:44,879
and so basically i repeated the whole

577
00:21:43,360 --> 00:21:47,520
the whole thing that we also did with

578
00:21:44,880 --> 00:21:48,720
the nes rom and it just put zeros at the

579
00:21:47,520 --> 00:21:52,158
very beginning of the

580
00:21:48,720 --> 00:21:54,960
encrypted flash rebooted the device

581
00:21:52,159 --> 00:21:57,039
and dumped the itcm rom and i got super

582
00:21:54,960 --> 00:22:00,480
lucky on the first try already

583
00:21:57,039 --> 00:22:01,919
the itscm contents changed and because

584
00:22:00,480 --> 00:22:04,159
the itcm contains

585
00:22:01,919 --> 00:22:06,720
code not just data so earlier we only

586
00:22:04,159 --> 00:22:09,760
had the the nes rom which is just data

587
00:22:06,720 --> 00:22:10,559
but this time the ram contains code this

588
00:22:09,760 --> 00:22:12,480
means

589
00:22:10,559 --> 00:22:14,399
that with the same exo trick we used

590
00:22:12,480 --> 00:22:18,400
before we could inject

591
00:22:14,400 --> 00:22:21,039
custom itcm code into the external flash

592
00:22:18,400 --> 00:22:22,159
which would then be loaded into ram when

593
00:22:21,039 --> 00:22:24,960
the device boots

594
00:22:22,159 --> 00:22:25,760
and because it's it's a persistent

595
00:22:24,960 --> 00:22:28,000
method

596
00:22:25,760 --> 00:22:30,480
we can then reboot the device and let it

597
00:22:28,000 --> 00:22:32,559
run without the debugger connected

598
00:22:30,480 --> 00:22:34,159
and so whatever code we load into this

599
00:22:32,559 --> 00:22:36,960
itcm area

600
00:22:34,159 --> 00:22:38,880
will be able to actually read the flash

601
00:22:36,960 --> 00:22:40,400
and so we could potentially write some

602
00:22:38,880 --> 00:22:42,559
code that

603
00:22:40,400 --> 00:22:44,480
gets somehow called by the firmware and

604
00:22:42,559 --> 00:22:47,678
then copies the internal flash

605
00:22:44,480 --> 00:22:48,000
into ram from where we then can retrieve

606
00:22:47,679 --> 00:22:51,360
it

607
00:22:48,000 --> 00:22:53,600
using the debugger

608
00:22:51,360 --> 00:22:54,719
now the problem is let's say we have a

609
00:22:53,600 --> 00:22:58,399
custom payload

610
00:22:54,720 --> 00:23:01,600
in somehow in this itcm area

611
00:22:58,400 --> 00:23:02,240
we don't know which address of this itcm

612
00:23:01,600 --> 00:23:03,918
code

613
00:23:02,240 --> 00:23:05,440
gets executed and so we don't know

614
00:23:03,919 --> 00:23:06,640
whether the firmware will jump to

615
00:23:05,440 --> 00:23:08,880
address 0

616
00:23:06,640 --> 00:23:10,559
or address to 100 or whatever but

617
00:23:08,880 --> 00:23:12,799
there's a really simple trick

618
00:23:10,559 --> 00:23:15,200
to still build a successful payload and

619
00:23:12,799 --> 00:23:18,158
it's called a knob slide

620
00:23:15,200 --> 00:23:20,000
a knob or no operation is an instruction

621
00:23:18,159 --> 00:23:23,039
that simply does nothing

622
00:23:20,000 --> 00:23:25,039
and if we fill most of the itcm ram with

623
00:23:23,039 --> 00:23:27,600
knobs and put our payload at the very

624
00:23:25,039 --> 00:23:28,960
end we build something that is basically

625
00:23:27,600 --> 00:23:32,240
an upslide

626
00:23:28,960 --> 00:23:33,039
and so when the cpu indicated by mario

627
00:23:32,240 --> 00:23:35,280
here

628
00:23:33,039 --> 00:23:36,480
jumps to a random address in that whole

629
00:23:35,280 --> 00:23:38,240
knob slide

630
00:23:36,480 --> 00:23:39,840
it will start executing knobs knobs

631
00:23:38,240 --> 00:23:42,720
knobs knobs and slide down

632
00:23:39,840 --> 00:23:44,158
into our payload and execute it and so

633
00:23:42,720 --> 00:23:46,720
even if mario jumps

634
00:23:44,159 --> 00:23:48,159
right in the middle of the knob slide he

635
00:23:46,720 --> 00:23:50,240
will always

636
00:23:48,159 --> 00:23:51,840
slide down the slide and end up in our

637
00:23:50,240 --> 00:23:54,000
payload

638
00:23:51,840 --> 00:23:55,840
and conrad wrote this really really

639
00:23:54,000 --> 00:23:57,919
simple payload which is only like 10

640
00:23:55,840 --> 00:23:59,840
instructions which basically just copies

641
00:23:57,919 --> 00:24:01,840
the internal flash into ram

642
00:23:59,840 --> 00:24:03,360
from where we can then retrieve it using

643
00:24:01,840 --> 00:24:06,080
the debugger

644
00:24:03,360 --> 00:24:07,918
so woohoo super simple exploit we have a

645
00:24:06,080 --> 00:24:10,480
full firmware backup and a full flash

646
00:24:07,919 --> 00:24:12,799
backup and now we can really fiddle with

647
00:24:10,480 --> 00:24:14,320
everything on the device and we've

648
00:24:12,799 --> 00:24:16,320
actually released tools

649
00:24:14,320 --> 00:24:18,480
to do this yourself and so if you want

650
00:24:16,320 --> 00:24:20,240
to backup your nintendo game and watch

651
00:24:18,480 --> 00:24:22,799
you can just go

652
00:24:20,240 --> 00:24:24,480
onto my github and download the game and

653
00:24:22,799 --> 00:24:26,879
watch backup repository

654
00:24:24,480 --> 00:24:28,320
which contains a lot of information on

655
00:24:26,880 --> 00:24:31,440
how to back it up

656
00:24:28,320 --> 00:24:32,080
it does it does check something and so

657
00:24:31,440 --> 00:24:33,760
on to ensure

658
00:24:32,080 --> 00:24:36,240
that you don't accidentally brick your

659
00:24:33,760 --> 00:24:38,158
device and you can easily

660
00:24:36,240 --> 00:24:39,360
back up the original firmware install

661
00:24:38,159 --> 00:24:42,000
homebrew and then

662
00:24:39,360 --> 00:24:43,199
always go back to the original software

663
00:24:42,000 --> 00:24:46,159
we also have an awesome

664
00:24:43,200 --> 00:24:47,760
support community on discord and so if

665
00:24:46,159 --> 00:24:50,400
you ever need help

666
00:24:47,760 --> 00:24:51,360
you you will i think you will find

667
00:24:50,400 --> 00:24:53,120
success there

668
00:24:51,360 --> 00:24:55,520
and so far we haven't had a single

669
00:24:53,120 --> 00:24:58,799
bricked game and watch and so

670
00:24:55,520 --> 00:25:00,799
looks to be pretty stable and so i was

671
00:24:58,799 --> 00:25:05,360
pretty excited because

672
00:25:00,799 --> 00:25:08,480
the quest was over or is it

673
00:25:05,360 --> 00:25:11,120
if you ever claim on the internet

674
00:25:08,480 --> 00:25:11,760
that you successfully hacked an embedded

675
00:25:11,120 --> 00:25:14,799
device

676
00:25:11,760 --> 00:25:17,279
there will be exactly one response and

677
00:25:14,799 --> 00:25:19,918
one response only

678
00:25:17,279 --> 00:25:22,320
but does it run doom literally my

679
00:25:19,919 --> 00:25:24,240
twitter dms my youtube comments and even

680
00:25:22,320 --> 00:25:26,240
my friends were spamming me

681
00:25:24,240 --> 00:25:28,559
with the challenge to get doom running

682
00:25:26,240 --> 00:25:30,480
on the device but to get doom running

683
00:25:28,559 --> 00:25:33,840
we first needed to bring up all the

684
00:25:30,480 --> 00:25:36,000
hardware and so we basically needed

685
00:25:33,840 --> 00:25:38,720
to create a way to develop and load

686
00:25:36,000 --> 00:25:40,480
homebrew onto the device

687
00:25:38,720 --> 00:25:42,640
now luckily for us most of the

688
00:25:40,480 --> 00:25:44,799
components on the board are

689
00:25:42,640 --> 00:25:46,880
very well documented and so there are no

690
00:25:44,799 --> 00:25:47,918
nda components and so for example the

691
00:25:46,880 --> 00:25:50,080
processor

692
00:25:47,919 --> 00:25:52,320
has an open reference manual and open

693
00:25:50,080 --> 00:25:55,439
source library to use it

694
00:25:52,320 --> 00:25:57,039
the flash is a well-known flash chip

695
00:25:55,440 --> 00:25:59,360
and so on and so forth and there are

696
00:25:57,039 --> 00:26:01,919
only a couple of very proprietary or

697
00:25:59,360 --> 00:26:05,279
custom components and so for example

698
00:26:01,919 --> 00:26:07,760
the lcd on the device is proprietary and

699
00:26:05,279 --> 00:26:10,159
we had to basically sniff the spi bus

700
00:26:07,760 --> 00:26:12,240
that goes to the display

701
00:26:10,159 --> 00:26:14,159
to basically decode the the

702
00:26:12,240 --> 00:26:16,320
initialization

703
00:26:14,159 --> 00:26:18,240
of the of the display and so on and

704
00:26:16,320 --> 00:26:20,320
after a while we had

705
00:26:18,240 --> 00:26:22,559
the full hardware running we had lcd

706
00:26:20,320 --> 00:26:25,120
support we had audio support steep

707
00:26:22,559 --> 00:26:27,279
support buttons and even flashing tools

708
00:26:25,120 --> 00:26:28,080
that allow you to simply use an swd

709
00:26:27,279 --> 00:26:30,799
debugger

710
00:26:28,080 --> 00:26:32,480
to dump and rewrite the external flash

711
00:26:30,799 --> 00:26:33,440
and you can find all of these things on

712
00:26:32,480 --> 00:26:35,360
our github

713
00:26:33,440 --> 00:26:36,799
now if you want to mod your own game and

714
00:26:35,360 --> 00:26:40,080
watch all you need

715
00:26:36,799 --> 00:26:40,559
is a simple debugging adapter such as a

716
00:26:40,080 --> 00:26:43,360
cheap

717
00:26:40,559 --> 00:26:46,158
three dollar st-link a trading one s or

718
00:26:43,360 --> 00:26:48,158
a real st-link device

719
00:26:46,159 --> 00:26:49,440
and then you can get started we've also

720
00:26:48,159 --> 00:26:51,120
published a base

721
00:26:49,440 --> 00:26:53,039
project for anyone who wants to get

722
00:26:51,120 --> 00:26:54,320
started with building their own games

723
00:26:53,039 --> 00:26:55,440
for the game and watch and so it's

724
00:26:54,320 --> 00:26:57,520
really simple

725
00:26:55,440 --> 00:26:59,520
it's just a frame buffer you can draw to

726
00:26:57,520 --> 00:27:01,679
input is really simple and so on

727
00:26:59,520 --> 00:27:03,039
and as said we have a really helpful

728
00:27:01,679 --> 00:27:05,440
community

729
00:27:03,039 --> 00:27:08,158
now with all the hardware up and running

730
00:27:05,440 --> 00:27:10,159
i could finally start porting doom

731
00:27:08,159 --> 00:27:13,039
now i started by looking around for

732
00:27:10,159 --> 00:27:14,880
other parts of doom 2 and stm32

733
00:27:13,039 --> 00:27:16,799
and i found this project by floppis

734
00:27:14,880 --> 00:27:20,000
called stm32doom

735
00:27:16,799 --> 00:27:22,320
now the issue is stm32doom is

736
00:27:20,000 --> 00:27:23,279
designed for a board with 8 megabytes of

737
00:27:22,320 --> 00:27:25,840
ram

738
00:27:23,279 --> 00:27:28,960
and also the data files for doom were

739
00:27:25,840 --> 00:27:31,678
stored on an external usb drive

740
00:27:28,960 --> 00:27:33,440
on our platform we only have 1.3

741
00:27:31,679 --> 00:27:36,320
megabytes of ram

742
00:27:33,440 --> 00:27:37,120
128 kilobytes of flash and only one

743
00:27:36,320 --> 00:27:39,439
megabyte of

744
00:27:37,120 --> 00:27:40,879
external flash and we have to fit all

745
00:27:39,440 --> 00:27:44,480
the level information

746
00:27:40,880 --> 00:27:44,480
all the code and so on in there

747
00:27:45,200 --> 00:27:49,600
now the doom level information is stored

748
00:27:47,679 --> 00:27:53,360
in so-called wad

749
00:27:49,600 --> 00:27:55,520
what where's all my data files

750
00:27:53,360 --> 00:27:58,158
and these data files contain the sprites

751
00:27:55,520 --> 00:28:00,480
the textures the levels and so on

752
00:27:58,159 --> 00:28:02,320
now the what for doom 1 is roughly 4

753
00:28:00,480 --> 00:28:05,440
megabytes in size and

754
00:28:02,320 --> 00:28:06,639
the what for doom 2 is 40 megabytes in

755
00:28:05,440 --> 00:28:09,840
size

756
00:28:06,640 --> 00:28:11,520
but we only have 1.1 megabyte of storage

757
00:28:09,840 --> 00:28:13,279
plus we have to fit all the code in

758
00:28:11,520 --> 00:28:16,639
there so obviously

759
00:28:13,279 --> 00:28:19,520
we needed to find a very very small doom

760
00:28:16,640 --> 00:28:19,919
what and as it turns out there's a thing

761
00:28:19,520 --> 00:28:23,120
called

762
00:28:19,919 --> 00:28:25,840
mini what which is a minimal doom iwad

763
00:28:23,120 --> 00:28:26,399
which is basically all the bells and

764
00:28:25,840 --> 00:28:29,279
whistles

765
00:28:26,399 --> 00:28:30,719
stripped from the wad file and

766
00:28:29,279 --> 00:28:33,200
everything replaced by

767
00:28:30,720 --> 00:28:34,000
simple outlines and so on and while it's

768
00:28:33,200 --> 00:28:35,840
not pretty

769
00:28:34,000 --> 00:28:38,799
i was pretty confident that i could get

770
00:28:35,840 --> 00:28:43,120
it working as it's only 250 kilobytes

771
00:28:38,799 --> 00:28:45,600
of storage down from 14 megabytes

772
00:28:43,120 --> 00:28:47,918
now in addition to that a lot of stuff

773
00:28:45,600 --> 00:28:49,840
on the chocolate doom port itself had to

774
00:28:47,919 --> 00:28:52,159
be changed and so for example

775
00:28:49,840 --> 00:28:54,158
i had to rip out all the file handling

776
00:28:52,159 --> 00:28:56,159
and add a custom file handler

777
00:28:54,159 --> 00:28:57,200
i had to add support for the game and

778
00:28:56,159 --> 00:28:59,760
watch lcd

779
00:28:57,200 --> 00:29:01,360
button import support and i also had to

780
00:28:59,760 --> 00:29:03,600
get rid of a lot of things

781
00:29:01,360 --> 00:29:05,439
to get it running somewhat smoothly and

782
00:29:03,600 --> 00:29:06,240
so for example the infamous wipe effect

783
00:29:05,440 --> 00:29:09,120
had to go

784
00:29:06,240 --> 00:29:09,440
and i also had to remove sound support

785
00:29:09,120 --> 00:29:12,080
now

786
00:29:09,440 --> 00:29:12,880
the next issue was that once it was

787
00:29:12,080 --> 00:29:15,120
compiling

788
00:29:12,880 --> 00:29:16,559
it simply would not fit into ram and

789
00:29:15,120 --> 00:29:19,439
crash all the time

790
00:29:16,559 --> 00:29:20,480
now on the device we have roughly 1.3

791
00:29:19,440 --> 00:29:23,440
megabytes of ram

792
00:29:20,480 --> 00:29:25,440
in different ram areas and for example

793
00:29:23,440 --> 00:29:26,080
just the frame buffer that we obviously

794
00:29:25,440 --> 00:29:29,279
need

795
00:29:26,080 --> 00:29:31,439
takes up 154 kilobytes of that

796
00:29:29,279 --> 00:29:33,279
then we have 160 kilobytes of

797
00:29:31,440 --> 00:29:36,399
initialized data

798
00:29:33,279 --> 00:29:38,399
320 kilobytes of uninitialized data and

799
00:29:36,399 --> 00:29:40,000
a ton of dynamic allocations that are

800
00:29:38,399 --> 00:29:41,918
done by chocolate doom

801
00:29:40,000 --> 00:29:43,919
and these dynamic allocations were a

802
00:29:41,919 --> 00:29:46,159
huge issue because

803
00:29:43,919 --> 00:29:48,080
the chocolate doom source code does a

804
00:29:46,159 --> 00:29:50,559
lot of small allocations

805
00:29:48,080 --> 00:29:52,320
which are only used for temporary data

806
00:29:50,559 --> 00:29:55,760
and so they get freed again

807
00:29:52,320 --> 00:29:58,799
and so on and so your dynamic memory

808
00:29:55,760 --> 00:30:00,480
gets very very fragmented very quickly

809
00:29:58,799 --> 00:30:02,080
and so eventually there's just not

810
00:30:00,480 --> 00:30:06,399
enough space to for example

811
00:30:02,080 --> 00:30:09,199
initialize the level and so to fix this

812
00:30:06,399 --> 00:30:10,719
i took the chocolate doom code and i

813
00:30:09,200 --> 00:30:12,480
changed a lot of the

814
00:30:10,720 --> 00:30:14,559
dynamic allocations to static

815
00:30:12,480 --> 00:30:15,279
allocations which also had the big

816
00:30:14,559 --> 00:30:18,799
advantage

817
00:30:15,279 --> 00:30:20,000
of making the error messages by the

818
00:30:18,799 --> 00:30:21,600
compiler

819
00:30:20,000 --> 00:30:24,159
much more meaningful because it would

820
00:30:21,600 --> 00:30:27,199
actually tell you hey this and this data

821
00:30:24,159 --> 00:30:28,880
does not fit into ram and eventually

822
00:30:27,200 --> 00:30:30,080
after a lot of trial and error and

823
00:30:28,880 --> 00:30:32,880
copying as

824
00:30:30,080 --> 00:30:33,520
many of the original assets as possible

825
00:30:32,880 --> 00:30:37,120
into

826
00:30:33,520 --> 00:30:39,520
the minimal iwad i got it i had

827
00:30:37,120 --> 00:30:41,520
doom running on the nintendo game and

828
00:30:39,520 --> 00:30:44,240
watch super mario brothers

829
00:30:41,520 --> 00:30:46,158
and i hopefully can't the internet gods

830
00:30:44,240 --> 00:30:48,399
that forced me to do it

831
00:30:46,159 --> 00:30:50,159
now unfortunately the usb port is

832
00:30:48,399 --> 00:30:53,520
physically not connected

833
00:30:50,159 --> 00:30:55,520
to the processor and so it will not be

834
00:30:53,520 --> 00:30:57,519
possible to hack the device simply by

835
00:30:55,520 --> 00:30:59,440
plugging it into your computer

836
00:30:57,519 --> 00:31:01,279
however it's relatively simple to do

837
00:30:59,440 --> 00:31:04,320
this using one of these

838
00:31:01,279 --> 00:31:06,000
usb debuggers now the most requested

839
00:31:04,320 --> 00:31:09,600
type of homebrew software

840
00:31:06,000 --> 00:31:11,519
was obviously emulators and i'm proud to

841
00:31:09,600 --> 00:31:14,559
say that by now we actually have

842
00:31:11,519 --> 00:31:17,120
kind of a large collection of emulators

843
00:31:14,559 --> 00:31:19,360
running on the nintendo gaming watch

844
00:31:17,120 --> 00:31:21,678
and it all started with conrad backman

845
00:31:19,360 --> 00:31:23,519
discovering the retro gold project which

846
00:31:21,679 --> 00:31:26,640
is an emulator collection

847
00:31:23,519 --> 00:31:27,760
for a device called the odroid go and

848
00:31:26,640 --> 00:31:30,480
the odroid go

849
00:31:27,760 --> 00:31:32,640
is a small handheld with similar input

850
00:31:30,480 --> 00:31:33,760
and size constraints as the nintendo

851
00:31:32,640 --> 00:31:36,080
game and watch

852
00:31:33,760 --> 00:31:37,279
and so it's kind of cool to port this

853
00:31:36,080 --> 00:31:39,519
over because it

854
00:31:37,279 --> 00:31:41,039
it basically already did all of the hard

855
00:31:39,519 --> 00:31:44,240
work so to say

856
00:31:41,039 --> 00:31:44,879
and retro go comes with emulators for

857
00:31:44,240 --> 00:31:48,000
the

858
00:31:44,880 --> 00:31:49,919
nes for the game boy and the gamer color

859
00:31:48,000 --> 00:31:51,360
and even for the sega master system and

860
00:31:49,919 --> 00:31:53,600
the sega game gear

861
00:31:51,360 --> 00:31:55,439
and after a couple of days conrad

862
00:31:53,600 --> 00:31:58,959
actually was able to show off

863
00:31:55,440 --> 00:31:59,760
his nes emulator running zelda and other

864
00:31:58,960 --> 00:32:02,320
games such as

865
00:31:59,760 --> 00:32:02,879
contra and swan on the nintendo game and

866
00:32:02,320 --> 00:32:05,200
watch

867
00:32:02,880 --> 00:32:07,760
this is super fun and initially we only

868
00:32:05,200 --> 00:32:09,919
had really a basic emulator that

869
00:32:07,760 --> 00:32:11,600
you know could barely play and we had a

870
00:32:09,919 --> 00:32:12,799
lot of frame drops we didn't have nice

871
00:32:11,600 --> 00:32:14,799
scaling v-sync

872
00:32:12,799 --> 00:32:16,158
and so on but now after a couple of

873
00:32:14,799 --> 00:32:18,639
weeks it's really

874
00:32:16,159 --> 00:32:20,159
a nice device to use and to play with

875
00:32:18,640 --> 00:32:22,559
and so we also

876
00:32:20,159 --> 00:32:24,399
have and game boy emulator running and

877
00:32:22,559 --> 00:32:26,799
so you can play your favorite

878
00:32:24,399 --> 00:32:28,239
game boy games such as pokemon super

879
00:32:26,799 --> 00:32:30,399
mario land and so on

880
00:32:28,240 --> 00:32:33,039
on the nintendo game and watch if you

881
00:32:30,399 --> 00:32:35,199
own the corresponding rom backups

882
00:32:33,039 --> 00:32:37,039
and we also experimented with different

883
00:32:35,200 --> 00:32:39,440
scaling algorithms to make the most

884
00:32:37,039 --> 00:32:41,440
out of the screen and so you can

885
00:32:39,440 --> 00:32:43,760
basically change the scaling algorithm

886
00:32:41,440 --> 00:32:45,519
that is used for the display

887
00:32:43,760 --> 00:32:47,279
depending on what you prefer and you

888
00:32:45,519 --> 00:32:48,559
could even change the palette for the

889
00:32:47,279 --> 00:32:52,159
different games

890
00:32:48,559 --> 00:32:53,918
we also have a nice game chooser menu

891
00:32:52,159 --> 00:32:55,679
which allows you to basically have

892
00:32:53,919 --> 00:32:56,480
multiple roms on the device that you can

893
00:32:55,679 --> 00:32:58,720
switch

894
00:32:56,480 --> 00:33:00,640
between we have safe state support and

895
00:32:58,720 --> 00:33:02,960
so you if you turn off the device

896
00:33:00,640 --> 00:33:04,720
it will save wherever you left off and

897
00:33:02,960 --> 00:33:06,559
you can even come back

898
00:33:04,720 --> 00:33:08,480
to your save game once the battery run

899
00:33:06,559 --> 00:33:09,039
out you can find the source code for all

900
00:33:08,480 --> 00:33:12,559
of that

901
00:33:09,039 --> 00:33:16,080
on the retro go repository from conrad

902
00:33:12,559 --> 00:33:16,080
and it's really really awesome

903
00:33:16,159 --> 00:33:20,799
other people build for example emulators

904
00:33:18,559 --> 00:33:22,720
for the chip 8 system and so

905
00:33:20,799 --> 00:33:24,240
the chip 8 emulator comes with a nice

906
00:33:22,720 --> 00:33:26,799
collection of small

907
00:33:24,240 --> 00:33:27,360
arcade games and so on and it's really

908
00:33:26,799 --> 00:33:30,080
fun

909
00:33:27,360 --> 00:33:32,000
and really easy to develop for and so

910
00:33:30,080 --> 00:33:32,799
really give this a try if you own a game

911
00:33:32,000 --> 00:33:36,000
and watch

912
00:33:32,799 --> 00:33:38,399
and want to try homebrew on it

913
00:33:36,000 --> 00:33:40,559
tim scherving is even working on an

914
00:33:38,399 --> 00:33:42,479
emulator for the original game and watch

915
00:33:40,559 --> 00:33:43,600
games and so this is really cool because

916
00:33:42,480 --> 00:33:46,880
it basically

917
00:33:43,600 --> 00:33:49,360
turns the nintendo game and watch into

918
00:33:46,880 --> 00:33:51,200
an emulator for all game and watch games

919
00:33:49,360 --> 00:33:53,918
that were ever released

920
00:33:51,200 --> 00:33:55,840
and what was really amazing to me is how

921
00:33:53,919 --> 00:33:57,440
the community came together

922
00:33:55,840 --> 00:33:58,879
and so we were pretty open about the

923
00:33:57,440 --> 00:34:01,120
progress on twitter

924
00:33:58,880 --> 00:34:02,640
and also conrad was twitch streaming a

925
00:34:01,120 --> 00:34:04,799
lot of the process

926
00:34:02,640 --> 00:34:06,480
and we opened up a discord where people

927
00:34:04,799 --> 00:34:09,040
could join who were interested

928
00:34:06,480 --> 00:34:10,879
in hacking on the device and it was

929
00:34:09,040 --> 00:34:12,000
amazing to see what came out of the

930
00:34:10,879 --> 00:34:14,560
community and so

931
00:34:12,000 --> 00:34:16,079
for example we now have a working

932
00:34:14,560 --> 00:34:17,918
storage upgrade that works

933
00:34:16,079 --> 00:34:19,119
both with homebrew but also with the

934
00:34:17,918 --> 00:34:20,719
original firmware

935
00:34:19,119 --> 00:34:22,639
and so instead of one megabyte of

936
00:34:20,719 --> 00:34:23,199
storage you can have 60 megabytes of

937
00:34:22,639 --> 00:34:25,440
flash

938
00:34:23,199 --> 00:34:27,199
and you just need to to replace a single

939
00:34:25,440 --> 00:34:29,760
chip which is pretty

940
00:34:27,199 --> 00:34:30,799
easy to do then for understanding the

941
00:34:29,760 --> 00:34:32,800
full hardware

942
00:34:30,800 --> 00:34:34,879
daniel cuthbert and daniel padilla

943
00:34:32,800 --> 00:34:35,679
provided us with high resolution x-ray

944
00:34:34,879 --> 00:34:38,560
images

945
00:34:35,679 --> 00:34:40,800
which allowed us to fully understand

946
00:34:38,560 --> 00:34:41,359
every single connection even of the bga

947
00:34:40,800 --> 00:34:44,480
parts

948
00:34:41,359 --> 00:34:47,199
without desoldering anything then jake

949
00:34:44,480 --> 00:34:49,599
little of upcycle electronics

950
00:34:47,199 --> 00:34:51,279
traced on the x-rays and also using a

951
00:34:49,599 --> 00:34:54,079
multimeter every last

952
00:34:51,280 --> 00:34:56,159
trace on the pcb and he even created a

953
00:34:54,079 --> 00:34:58,320
schematic of the device which

954
00:34:56,159 --> 00:35:00,400
gives you all the details you need when

955
00:34:58,320 --> 00:35:02,880
you want to program something also

956
00:35:00,400 --> 00:35:04,720
and what's really really fun senator van

957
00:35:02,880 --> 00:35:07,040
der wehl for example even created a

958
00:35:04,720 --> 00:35:08,959
custom backplate and now there are even

959
00:35:07,040 --> 00:35:10,880
project that projects that try to

960
00:35:08,960 --> 00:35:13,480
replace the original pcb

961
00:35:10,880 --> 00:35:14,880
with a custom pcb with an fpga and an

962
00:35:13,480 --> 00:35:17,839
esp32

963
00:35:14,880 --> 00:35:19,520
and so it's really exciting to see what

964
00:35:17,839 --> 00:35:21,279
people come up with

965
00:35:19,520 --> 00:35:23,759
now i hope you enjoyed this talk and i

966
00:35:21,280 --> 00:35:25,359
hope to see you on our discord if you

967
00:35:23,760 --> 00:35:31,839
want to join the fun

968
00:35:25,359 --> 00:35:31,839
and thank you for coming

969
00:35:34,320 --> 00:35:38,240
hi um wow that was a really amazing talk

970
00:35:37,280 --> 00:35:41,440
thank you very much

971
00:35:38,240 --> 00:35:42,640
uh thomas um as announced in the

972
00:35:41,440 --> 00:35:46,000
beginning

973
00:35:42,640 --> 00:35:49,200
we do accept questions from you and

974
00:35:46,000 --> 00:35:50,640
we have quite quite a few

975
00:35:49,200 --> 00:35:52,480
let's see if we managed to make it

976
00:35:50,640 --> 00:35:55,839
through all of them

977
00:35:52,480 --> 00:35:58,000
the first one is did you read the

978
00:35:55,839 --> 00:36:01,119
articles about nintendo observing

979
00:35:58,000 --> 00:36:04,960
hackers like private investigators etc

980
00:36:01,119 --> 00:36:06,800
and are you somehow worried about this

981
00:36:04,960 --> 00:36:08,880
oh what's going on with my camera looks

982
00:36:06,800 --> 00:36:11,359
like luigi messed around with my video

983
00:36:08,880 --> 00:36:13,839
setup here

984
00:36:11,359 --> 00:36:15,359
uh-huh yeah i've so i've read those

985
00:36:13,839 --> 00:36:18,560
articles but um

986
00:36:15,359 --> 00:36:20,799
so i believe that um in this case

987
00:36:18,560 --> 00:36:22,640
the there is no piracy issue right like

988
00:36:20,800 --> 00:36:24,560
i'm not allowing anyone to play any new

989
00:36:22,640 --> 00:36:26,640
games if you wanted to

990
00:36:24,560 --> 00:36:28,480
to dump a super mario rum you would have

991
00:36:26,640 --> 00:36:30,879
done it 30 years ago or

992
00:36:28,480 --> 00:36:32,880
on the nes classic or on the switch on

993
00:36:30,880 --> 00:36:34,160
any of the 100 consoles nintendo

994
00:36:32,880 --> 00:36:36,079
launched in between

995
00:36:34,160 --> 00:36:38,240
and so i'm really not too worried about

996
00:36:36,079 --> 00:36:40,800
it to be honest

997
00:36:38,240 --> 00:36:42,879
um i also think the the the aspect of of

998
00:36:40,800 --> 00:36:46,560
the uh target audience is

999
00:36:42,880 --> 00:36:47,760
uh is to be uh seen here um so off to

1000
00:36:46,560 --> 00:36:50,400
the next question

1001
00:36:47,760 --> 00:36:51,440
uh which is um is the do you think that

1002
00:36:50,400 --> 00:36:56,240
there is a reason

1003
00:36:51,440 --> 00:36:59,560
why an external flash chip has been used

1004
00:36:56,240 --> 00:37:02,078
yeah so um the internal flash of the

1005
00:36:59,560 --> 00:37:04,000
s732h7b0 is relatively small it's only

1006
00:37:02,079 --> 00:37:06,240
128 kilobytes

1007
00:37:04,000 --> 00:37:07,040
and so they simply couldn't fit

1008
00:37:06,240 --> 00:37:08,879
everything

1009
00:37:07,040 --> 00:37:10,160
in like basically even just the frame

1010
00:37:08,880 --> 00:37:12,320
buffer um

1011
00:37:10,160 --> 00:37:14,078
even just a frame buffer picture also is

1012
00:37:12,320 --> 00:37:16,400
larger than the internal flash

1013
00:37:14,079 --> 00:37:19,040
and so um i think that's why they did it

1014
00:37:16,400 --> 00:37:22,560
and i'm glad they did

1015
00:37:19,040 --> 00:37:25,359
yeah sure um and um

1016
00:37:22,560 --> 00:37:28,720
is the decryption done in software or is

1017
00:37:25,359 --> 00:37:30,640
it a feature of the microcontroller

1018
00:37:28,720 --> 00:37:31,919
so the microcontroller has an integrated

1019
00:37:30,640 --> 00:37:35,279
feature called otf

1020
00:37:31,920 --> 00:37:36,800
dec otf deck and basically the flash is

1021
00:37:35,280 --> 00:37:38,720
directly mapped into memory and they

1022
00:37:36,800 --> 00:37:39,760
have this chip peripheral called otf

1023
00:37:38,720 --> 00:37:41,759
deck that

1024
00:37:39,760 --> 00:37:42,960
automatically provides the decryption

1025
00:37:41,760 --> 00:37:45,119
and so on and so it's done

1026
00:37:42,960 --> 00:37:46,560
all in hardware and you can even

1027
00:37:45,119 --> 00:37:47,920
retrieve the keys from hardware

1028
00:37:46,560 --> 00:37:51,680
basically

1029
00:37:47,920 --> 00:37:54,480
okay very nice and um

1030
00:37:51,680 --> 00:37:55,759
also um and the next question is somehow

1031
00:37:54,480 --> 00:37:59,040
related to that

1032
00:37:55,760 --> 00:38:00,320
uh is uh in your opinion the encryption

1033
00:37:59,040 --> 00:38:03,119
nintendo has applied

1034
00:38:00,320 --> 00:38:04,800
uh even worth the effort for them it

1035
00:38:03,119 --> 00:38:06,960
feels like it's just there to give

1036
00:38:04,800 --> 00:38:07,440
shareholders a false sense of security

1037
00:38:06,960 --> 00:38:11,200
how

1038
00:38:07,440 --> 00:38:13,280
what would you think about that i think

1039
00:38:11,200 --> 00:38:14,960
from my perspective they choose just the

1040
00:38:13,280 --> 00:38:17,119
right encryption because it was a ton of

1041
00:38:14,960 --> 00:38:19,280
fun to reverse engineer and try to

1042
00:38:17,119 --> 00:38:20,400
to bypass it and say uh it was an

1043
00:38:19,280 --> 00:38:22,480
awesome challenge

1044
00:38:20,400 --> 00:38:24,160
and so i think they did everything right

1045
00:38:22,480 --> 00:38:25,760
but um i also think

1046
00:38:24,160 --> 00:38:27,680
in the end it's it's such a simple

1047
00:38:25,760 --> 00:38:28,560
device and it's like if you take a look

1048
00:38:27,680 --> 00:38:30,319
at what people

1049
00:38:28,560 --> 00:38:32,400
are building on top of it with like

1050
00:38:30,320 --> 00:38:34,800
games and and all the kind of stuff

1051
00:38:32,400 --> 00:38:35,520
um i think they did everything right but

1052
00:38:34,800 --> 00:38:37,599
um

1053
00:38:35,520 --> 00:38:40,079
probably it was just a tick mark of yeah

1054
00:38:37,599 --> 00:38:41,920
we totally locked down jtag and um

1055
00:38:40,079 --> 00:38:43,599
yeah but i think it's fun because again

1056
00:38:41,920 --> 00:38:44,640
like it doesn't open up any piracy

1057
00:38:43,599 --> 00:38:47,280
issues

1058
00:38:44,640 --> 00:38:48,720
sure and the the one thing is related to

1059
00:38:47,280 --> 00:38:52,079
the knob slide which you

1060
00:38:48,720 --> 00:38:55,520
very uh very uh well uh animated

1061
00:38:52,079 --> 00:38:57,520
um so um

1062
00:38:55,520 --> 00:38:58,880
wouldn't uh wouldn't start of sub

1063
00:38:57,520 --> 00:39:01,920
routines be suitable

1064
00:38:58,880 --> 00:39:05,440
as well for that uh for that uh

1065
00:39:01,920 --> 00:39:08,960
goal um uh the the person asking

1066
00:39:05,440 --> 00:39:11,520
uh says that a big push r5 r4

1067
00:39:08,960 --> 00:39:12,560
r5 etc instructions are quite

1068
00:39:11,520 --> 00:39:15,920
recognizable

1069
00:39:12,560 --> 00:39:19,279
um how would yeah

1070
00:39:15,920 --> 00:39:21,680
yeah so um absolutely so um the

1071
00:39:19,280 --> 00:39:24,000
the time from finding the data in the

1072
00:39:21,680 --> 00:39:27,598
itcm ram and actually exploiting it was

1073
00:39:24,000 --> 00:39:28,880
less than an hour and so um if we would

1074
00:39:27,599 --> 00:39:30,400
have tried to reverse engineer it it

1075
00:39:28,880 --> 00:39:32,240
would be more work like absolutely

1076
00:39:30,400 --> 00:39:34,079
possible and also not difficult

1077
00:39:32,240 --> 00:39:35,919
but just filling the ram with knob took

1078
00:39:34,079 --> 00:39:37,440
a couple of minutes and so

1079
00:39:35,920 --> 00:39:39,760
it was really the easiest way in the

1080
00:39:37,440 --> 00:39:41,520
fastest way um without fiddling around

1081
00:39:39,760 --> 00:39:44,880
in gydra also

1082
00:39:41,520 --> 00:39:48,400
okay cool thanks and

1083
00:39:44,880 --> 00:39:51,200
this is more a remark than a question

1084
00:39:48,400 --> 00:39:55,040
the person says it's strange that an

1085
00:39:51,200 --> 00:39:55,680
estes an 5281 does not mention a single

1086
00:39:55,040 --> 00:39:57,759
time

1087
00:39:55,680 --> 00:39:58,720
that the data is not verified during

1088
00:39:57,760 --> 00:40:01,280
encryption

1089
00:39:58,720 --> 00:40:03,598
i think it's more a fault on st than

1090
00:40:01,280 --> 00:40:06,880
nintendo's side

1091
00:40:03,599 --> 00:40:09,040
what would you think about that yeah

1092
00:40:06,880 --> 00:40:10,079
i would somewhat agree because in this

1093
00:40:09,040 --> 00:40:12,960
case even if you

1094
00:40:10,079 --> 00:40:13,599
don't have jtag like an arm thump

1095
00:40:12,960 --> 00:40:16,079
instruction

1096
00:40:13,599 --> 00:40:18,160
is two to four bytes and so you you you

1097
00:40:16,079 --> 00:40:20,000
have a relatively small space to brute

1098
00:40:18,160 --> 00:40:21,359
force to potentially get an interesting

1099
00:40:20,000 --> 00:40:24,000
branch instruction and so on

1100
00:40:21,359 --> 00:40:25,520
so i think it's yeah i mean it's it's

1101
00:40:24,000 --> 00:40:28,079
not perfect but also

1102
00:40:25,520 --> 00:40:30,400
um doing verification is is very

1103
00:40:28,079 --> 00:40:32,720
expensive computational wise and so

1104
00:40:30,400 --> 00:40:34,240
i think it should just be the the

1105
00:40:32,720 --> 00:40:37,439
firmware that actually verifies the

1106
00:40:34,240 --> 00:40:40,799
contents of the external flash

1107
00:40:37,440 --> 00:40:43,119
okay um so we i think we should uh

1108
00:40:40,800 --> 00:40:44,720
two questions more and then uh we can go

1109
00:40:43,119 --> 00:40:47,920
back to the studio

1110
00:40:44,720 --> 00:40:51,040
um the uh there's a question about

1111
00:40:47,920 --> 00:40:54,880
the aes encryption key um have you

1112
00:40:51,040 --> 00:40:57,359
managed to recover them yes we did

1113
00:40:54,880 --> 00:40:58,240
um but so there is an application up by

1114
00:40:57,359 --> 00:41:00,319
st

1115
00:40:58,240 --> 00:41:01,839
and they do some crazy shifting around

1116
00:41:00,319 --> 00:41:02,640
with the keys but i think even just

1117
00:41:01,839 --> 00:41:04,960
today like

1118
00:41:02,640 --> 00:41:06,879
an hour before the talk or so a guy

1119
00:41:04,960 --> 00:41:07,440
who's also or sorry i'm not sure this

1120
00:41:06,880 --> 00:41:09,760
guy uh

1121
00:41:07,440 --> 00:41:10,720
a person on our discord actually managed

1122
00:41:09,760 --> 00:41:13,359
to to

1123
00:41:10,720 --> 00:41:15,040
um rebuild the full encryption but we i

1124
00:41:13,359 --> 00:41:16,000
personally was never interested in that

1125
00:41:15,040 --> 00:41:18,079
because um

1126
00:41:16,000 --> 00:41:20,079
after you've downgraded to rdp0 the

1127
00:41:18,079 --> 00:41:22,160
device you can just

1128
00:41:20,079 --> 00:41:24,000
access the memory map flash and get the

1129
00:41:22,160 --> 00:41:25,200
completely decrypted flash contents

1130
00:41:24,000 --> 00:41:28,480
basically

1131
00:41:25,200 --> 00:41:31,040
sure thanks and last question about the

1132
00:41:28,480 --> 00:41:33,839
lcd controller

1133
00:41:31,040 --> 00:41:34,640
whether it's used by writing pixels over

1134
00:41:33,839 --> 00:41:37,599
spi

1135
00:41:34,640 --> 00:41:39,598
or if it has some extra features maybe

1136
00:41:37,599 --> 00:41:40,880
even backgrounds or sprites or something

1137
00:41:39,599 --> 00:41:43,839
like that

1138
00:41:40,880 --> 00:41:44,960
so um the the lcd itself doesn't have

1139
00:41:43,839 --> 00:41:47,359
any special features

1140
00:41:44,960 --> 00:41:49,520
it has a one spi bus to configure it and

1141
00:41:47,359 --> 00:41:52,400
then a parallel interface where you

1142
00:41:49,520 --> 00:41:55,200
uh so it takes up a lot of pins but the

1143
00:41:52,400 --> 00:41:56,800
chip itself has a hardware called ltdc

1144
00:41:55,200 --> 00:41:58,799
which is an lcd controller

1145
00:41:56,800 --> 00:42:00,960
which provides two layers with alpha

1146
00:41:58,800 --> 00:42:03,520
blending and some basic windowing and so

1147
00:42:00,960 --> 00:42:06,800
on

1148
00:42:03,520 --> 00:42:09,040
okay cool then thank you very very much

1149
00:42:06,800 --> 00:42:12,319
for the great talk and the great intro

1150
00:42:09,040 --> 00:42:14,839
and with that back to our main studio

1151
00:42:12,319 --> 00:42:17,220
in the orbit thank you very much back to

1152
00:42:14,839 --> 00:42:20,509
orbit

1153
00:42:17,220 --> 00:42:20,509
[Music]

1154
00:42:42,839 --> 00:42:45,839
wow

1155
00:42:55,280 --> 00:42:57,359
you

