1
00:00:01,300 --> 00:00:11,800
[Music]

2
00:00:16,160 --> 00:00:20,880
good morning

3
00:00:16,960 --> 00:00:23,680
and welcome to my second talk on flutter

4
00:00:20,880 --> 00:00:24,880
my name is the one with the braid and in

5
00:00:23,680 --> 00:00:28,080
today's talk

6
00:00:24,880 --> 00:00:30,320
i will focus on animations

7
00:00:28,080 --> 00:00:34,320
and on the rendering of flutter's

8
00:00:30,320 --> 00:00:34,320
graphics library and background

9
00:00:34,399 --> 00:00:41,680
okay let's begin

10
00:00:37,920 --> 00:00:44,800
um yeah i will talk on about motion

11
00:00:41,680 --> 00:00:47,039
uh motion is part of user experience so

12
00:00:44,800 --> 00:00:51,038
it's not only a technical talk

13
00:00:47,039 --> 00:00:54,879
but also a talk on kind of

14
00:00:51,039 --> 00:00:59,120
how motion and how app design affects

15
00:00:54,879 --> 00:01:02,879
the user

16
00:00:59,120 --> 00:01:03,440
yeah and that's that that already points

17
00:01:02,879 --> 00:01:08,640
to the

18
00:01:03,440 --> 00:01:11,280
first question why do we need animation

19
00:01:08,640 --> 00:01:13,680
um there are different reasons sometimes

20
00:01:11,280 --> 00:01:17,040
we want to emphasize

21
00:01:13,680 --> 00:01:20,720
something in regard of hierarchy

22
00:01:17,040 --> 00:01:20,720
the moment i will slow down the

23
00:01:24,840 --> 00:01:30,240
animation

24
00:01:26,960 --> 00:01:32,559
yeah here you can see uh

25
00:01:30,240 --> 00:01:33,439
this pop-up this card which are this

26
00:01:32,560 --> 00:01:38,000
list tile which

27
00:01:33,439 --> 00:01:41,360
expands uh and the box

28
00:01:38,000 --> 00:01:45,040
being created from this list style shows

29
00:01:41,360 --> 00:01:48,320
that the list tile actually contains

30
00:01:45,040 --> 00:01:51,840
uh whatever is shown afterwards um

31
00:01:48,320 --> 00:01:54,880
this is a kind of hierarchy shown by

32
00:01:51,840 --> 00:01:58,000
um by the animation

33
00:01:54,880 --> 00:01:59,520
uh another common use case is indication

34
00:01:58,000 --> 00:02:02,159
of status

35
00:01:59,520 --> 00:02:03,039
um here you see a kind of progress

36
00:02:02,159 --> 00:02:06,719
indicator

37
00:02:03,040 --> 00:02:10,080
these list tiles glowing

38
00:02:06,719 --> 00:02:11,038
uh and later these um messages or

39
00:02:10,080 --> 00:02:13,760
whatever

40
00:02:11,038 --> 00:02:14,720
appearing uh that indicates status of an

41
00:02:13,760 --> 00:02:18,319
application it

42
00:02:14,720 --> 00:02:21,440
uh indicates uh for the user that

43
00:02:18,319 --> 00:02:23,040
it's not ready yet uh that they should

44
00:02:21,440 --> 00:02:26,400
wait until it's

45
00:02:23,040 --> 00:02:28,799
uh everything is loaded and so on

46
00:02:26,400 --> 00:02:29,680
okay a third part is feedback uh here

47
00:02:28,800 --> 00:02:32,800
you can

48
00:02:29,680 --> 00:02:35,440
see a card being dragged around

49
00:02:32,800 --> 00:02:36,879
and other cards um correspondingly

50
00:02:35,440 --> 00:02:40,000
moving

51
00:02:36,879 --> 00:02:43,200
that shows the users that

52
00:02:40,000 --> 00:02:44,080
their actions are successful that

53
00:02:43,200 --> 00:02:48,160
whatever they

54
00:02:44,080 --> 00:02:51,599
perform uh is a valid action in the app

55
00:02:48,160 --> 00:02:54,959
and the last well yeah another

56
00:02:51,599 --> 00:02:55,679
point of animation uh is user education

57
00:02:54,959 --> 00:02:58,400
you see

58
00:02:55,680 --> 00:02:59,040
as when you tap the lock screen it does

59
00:02:58,400 --> 00:03:01,200
not work

60
00:02:59,040 --> 00:03:02,879
if you swipe up it works and this

61
00:03:01,200 --> 00:03:06,000
animation this

62
00:03:02,879 --> 00:03:07,760
bouncing at the bottom indicates that

63
00:03:06,000 --> 00:03:13,040
the user should try to

64
00:03:07,760 --> 00:03:13,040
uh swipe upward to unlock

65
00:03:14,080 --> 00:03:21,360
okay um let's talk about flutter and

66
00:03:17,519 --> 00:03:23,120
animation all these animations are

67
00:03:21,360 --> 00:03:23,680
possible and flatter the question is

68
00:03:23,120 --> 00:03:27,040
only

69
00:03:23,680 --> 00:03:30,799
how and

70
00:03:27,040 --> 00:03:34,319
the flat documentation has a well

71
00:03:30,799 --> 00:03:36,400
quite filled uh overview

72
00:03:34,319 --> 00:03:38,000
of animations and flatter and i will try

73
00:03:36,400 --> 00:03:42,959
to break it down

74
00:03:38,000 --> 00:03:46,159
um yeah that's the

75
00:03:42,959 --> 00:03:47,840
guide on how to use animations uh

76
00:03:46,159 --> 00:03:51,200
provided by flutter

77
00:03:47,840 --> 00:03:54,319
um even if we zoom in it is not

78
00:03:51,200 --> 00:03:56,560
that helpful um

79
00:03:54,319 --> 00:03:57,839
let's go through these animations step

80
00:03:56,560 --> 00:04:01,120
by step

81
00:03:57,840 --> 00:04:05,360
um first of all we have implicit

82
00:04:01,120 --> 00:04:09,519
animation uh an implicit animation is

83
00:04:05,360 --> 00:04:12,640
a quite tiny but uh

84
00:04:09,519 --> 00:04:15,200
useful animation uh it consists of

85
00:04:12,640 --> 00:04:16,399
three parts a value which is being

86
00:04:15,200 --> 00:04:20,079
animated that may be an

87
00:04:16,399 --> 00:04:23,758
integer i don't know a color size

88
00:04:20,079 --> 00:04:26,840
um whatever um a duration

89
00:04:23,759 --> 00:04:28,240
so the amount of time the animation

90
00:04:26,840 --> 00:04:31,198
takes

91
00:04:28,240 --> 00:04:32,720
and a curve in which the animation is

92
00:04:31,199 --> 00:04:36,080
being performed

93
00:04:32,720 --> 00:04:37,919
um i found a nice graphic showing

94
00:04:36,080 --> 00:04:41,520
these curves but first of all well they

95
00:04:37,919 --> 00:04:44,000
are simple they are easy to implement

96
00:04:41,520 --> 00:04:46,639
and do not require any advanced uh

97
00:04:44,000 --> 00:04:50,160
knowledge of flattering or

98
00:04:46,639 --> 00:04:51,199
any mathematics um here you can see a

99
00:04:50,160 --> 00:04:53,280
couple of chords

100
00:04:51,199 --> 00:04:54,240
provided in flattery of course you could

101
00:04:53,280 --> 00:04:57,919
create your

102
00:04:54,240 --> 00:05:01,280
uh codes on your own as well um

103
00:04:57,919 --> 00:05:04,639
you have ease a curve so um

104
00:05:01,280 --> 00:05:06,960
this and accelerating course um

105
00:05:04,639 --> 00:05:08,320
you have exponential acceleration at the

106
00:05:06,960 --> 00:05:13,599
acceleration

107
00:05:08,320 --> 00:05:16,639
um you have bouncing animations you have

108
00:05:13,600 --> 00:05:17,600
in out easing and elastic animation so

109
00:05:16,639 --> 00:05:20,720
you have pretty much

110
00:05:17,600 --> 00:05:21,280
everything you can imagine off uh they

111
00:05:20,720 --> 00:05:24,320
are built

112
00:05:21,280 --> 00:05:27,840
in and accessible via curve dot

113
00:05:24,320 --> 00:05:32,240
and name of the curve okay

114
00:05:27,840 --> 00:05:34,239
an example of an implicit animation is

115
00:05:32,240 --> 00:05:38,160
an animated container

116
00:05:34,240 --> 00:05:40,880
an animated container is a widget um

117
00:05:38,160 --> 00:05:42,479
which simply animates all the values it

118
00:05:40,880 --> 00:05:45,600
is being given

119
00:05:42,479 --> 00:05:47,599
um in the code sample

120
00:05:45,600 --> 00:05:49,440
i i'm unsure whether you can see my

121
00:05:47,600 --> 00:05:51,199
mouse here

122
00:05:49,440 --> 00:05:52,050
at least you should be able to see the

123
00:05:51,199 --> 00:05:54,400
selection

124
00:05:52,050 --> 00:05:57,759
[Music]

125
00:05:54,400 --> 00:05:58,960
you see it checks whether this selected

126
00:05:57,759 --> 00:06:02,400
value is

127
00:05:58,960 --> 00:06:05,758
or this boolean is false or true

128
00:06:02,400 --> 00:06:09,520
and correspondingly sets the size

129
00:06:05,759 --> 00:06:09,520
and the color of the container

130
00:06:10,160 --> 00:06:17,360
it's being given a duration

131
00:06:13,759 --> 00:06:20,960
two seconds and a curve

132
00:06:17,360 --> 00:06:24,479
uh yeah and afterwards it just contains

133
00:06:20,960 --> 00:06:26,880
a child widget um

134
00:06:24,479 --> 00:06:28,318
and as soon as the containing widget

135
00:06:26,880 --> 00:06:31,199
should change

136
00:06:28,319 --> 00:06:32,720
the selected uh boolean and should

137
00:06:31,199 --> 00:06:36,000
trigger a rebuild of this

138
00:06:32,720 --> 00:06:40,080
stateless stateful widget um

139
00:06:36,000 --> 00:06:43,120
then all these values here the alignment

140
00:06:40,080 --> 00:06:46,159
um the color the height the width

141
00:06:43,120 --> 00:06:49,599
and they are all being animated using

142
00:06:46,160 --> 00:06:52,400
this curve and the duration

143
00:06:49,599 --> 00:06:55,759
it's a very simple animation but is

144
00:06:52,400 --> 00:06:55,758
useful in many cases

145
00:06:56,160 --> 00:07:00,160
yeah another kind of implicit animation

146
00:06:58,319 --> 00:07:03,199
is a so-called uh

147
00:07:00,160 --> 00:07:05,280
tween builder um

148
00:07:03,199 --> 00:07:06,960
on builders and animation builders we

149
00:07:05,280 --> 00:07:09,198
will talk later

150
00:07:06,960 --> 00:07:11,758
um but here a quick introduction the

151
00:07:09,199 --> 00:07:17,120
tween builder consists of a tree

152
00:07:11,759 --> 00:07:20,400
uh so uh yeah a scalar

153
00:07:17,120 --> 00:07:23,520
here in the amount of values in which

154
00:07:20,400 --> 00:07:26,638
the animation takes place iteration uh

155
00:07:23,520 --> 00:07:31,599
at the builder um a builder

156
00:07:26,639 --> 00:07:35,199
which is given the value of the tween

157
00:07:31,599 --> 00:07:38,800
um yeah and

158
00:07:35,199 --> 00:07:41,759
based on the value it can change itself

159
00:07:38,800 --> 00:07:43,120
in this case we have the angle set to

160
00:07:41,759 --> 00:07:46,479
the tween

161
00:07:43,120 --> 00:07:50,000
and as soon as the tween changes so

162
00:07:46,479 --> 00:07:53,280
every every frame

163
00:07:50,000 --> 00:07:56,080
this is rebuild using the new angle

164
00:07:53,280 --> 00:07:59,599
um that's another easy way of animation

165
00:07:56,080 --> 00:08:02,719
in flutter

166
00:07:59,599 --> 00:08:06,400
okay a more complex example

167
00:08:02,720 --> 00:08:09,520
is the explicit animation um

168
00:08:06,400 --> 00:08:13,440
of course you know motion from

169
00:08:09,520 --> 00:08:14,799
reality everything we can see consists

170
00:08:13,440 --> 00:08:19,360
of

171
00:08:14,800 --> 00:08:23,039
thousands of frames uh human iron

172
00:08:19,360 --> 00:08:26,560
is able to realize uh 30 or

173
00:08:23,039 --> 00:08:30,159
even more frames per second but

174
00:08:26,560 --> 00:08:33,599
modern devices feature 60 or

175
00:08:30,160 --> 00:08:34,640
120 frames per second and high-end

176
00:08:33,599 --> 00:08:38,839
devices

177
00:08:34,640 --> 00:08:43,279
even more and the explicit animation

178
00:08:38,839 --> 00:08:46,880
allows painting every single frame

179
00:08:43,279 --> 00:08:49,920
the the application renders

180
00:08:46,880 --> 00:08:51,600
yeah you can with an explicit animation

181
00:08:49,920 --> 00:08:55,120
you can set any single of these

182
00:08:51,600 --> 00:08:58,160
frames um yeah it's

183
00:08:55,120 --> 00:09:02,720
used for complex animations for which no

184
00:08:58,160 --> 00:09:06,079
built-in uh um widgets are available

185
00:09:02,720 --> 00:09:06,959
um and have if they're not correctly

186
00:09:06,080 --> 00:09:10,080
implemented

187
00:09:06,959 --> 00:09:13,359
they have a high performance impact so

188
00:09:10,080 --> 00:09:15,440
use with caution yeah

189
00:09:13,360 --> 00:09:16,399
what's the recipe for an explicit

190
00:09:15,440 --> 00:09:19,440
animation

191
00:09:16,399 --> 00:09:22,640
um you take a widget

192
00:09:19,440 --> 00:09:26,240
a stateful widget you mix in

193
00:09:22,640 --> 00:09:29,279
a single ticker provider state mix in

194
00:09:26,240 --> 00:09:30,240
uh use an animation controller sync it

195
00:09:29,279 --> 00:09:33,120
to the

196
00:09:30,240 --> 00:09:33,519
single ticker provider uh add a listener

197
00:09:33,120 --> 00:09:37,040
and

198
00:09:33,519 --> 00:09:38,560
on every listener of the controller you

199
00:09:37,040 --> 00:09:41,839
set the state

200
00:09:38,560 --> 00:09:43,599
uh so pretty much as soon as the state

201
00:09:41,839 --> 00:09:47,120
is set you set a new state

202
00:09:43,600 --> 00:09:48,320
um and that's yeah i'll provide an

203
00:09:47,120 --> 00:09:51,519
example um

204
00:09:48,320 --> 00:09:54,720
yeah here you have um

205
00:09:51,519 --> 00:09:57,920
create a widget state uh with this uh

206
00:09:54,720 --> 00:10:00,160
single ticker provider state mix in uh

207
00:09:57,920 --> 00:10:04,800
we have an animation controller

208
00:10:00,160 --> 00:10:08,000
um and we put the vsync

209
00:10:04,800 --> 00:10:11,359
on our single ticker provider mix in

210
00:10:08,000 --> 00:10:14,079
um as we listen to updates of the

211
00:10:11,360 --> 00:10:15,120
the animation controller so uh it's on

212
00:10:14,079 --> 00:10:18,399
high-end devices it's

213
00:10:15,120 --> 00:10:22,000
120 times per second um

214
00:10:18,399 --> 00:10:24,720
and in this update method

215
00:10:22,000 --> 00:10:26,000
we set the state and simply rebuild the

216
00:10:24,720 --> 00:10:27,920
widget

217
00:10:26,000 --> 00:10:31,120
and then we can do whatever we want we

218
00:10:27,920 --> 00:10:34,240
want with uh the value we animate

219
00:10:31,120 --> 00:10:34,240
um yeah

220
00:10:35,680 --> 00:10:43,040
please pay attention on disposal

221
00:10:39,600 --> 00:10:46,800
the animation controller exists

222
00:10:43,040 --> 00:10:47,839
as long as it is not or until it is

223
00:10:46,800 --> 00:10:50,479
deposed

224
00:10:47,839 --> 00:10:51,920
um means as soon as you remove the

225
00:10:50,480 --> 00:10:53,920
widget from screen

226
00:10:51,920 --> 00:10:54,959
or if you move to another page of your

227
00:10:53,920 --> 00:10:57,599
application

228
00:10:54,959 --> 00:10:58,880
the animation controller would actually

229
00:10:57,600 --> 00:11:01,920
uh continue

230
00:10:58,880 --> 00:11:05,680
to animate itself um

231
00:11:01,920 --> 00:11:07,839
so you explicitly have to dispose it

232
00:11:05,680 --> 00:11:08,719
yeah and here are editor i provide an

233
00:11:07,839 --> 00:11:12,640
example where

234
00:11:08,720 --> 00:11:16,800
it's simply forwarding uh infinitely

235
00:11:12,640 --> 00:11:20,000
okay that's the very low level uh

236
00:11:16,800 --> 00:11:23,120
animation um but that's

237
00:11:20,000 --> 00:11:25,279
actually under the hood how all the

238
00:11:23,120 --> 00:11:28,800
animations built in and flutter work

239
00:11:25,279 --> 00:11:31,040
um the animation builder and all the

240
00:11:28,800 --> 00:11:32,479
the different animation builders make

241
00:11:31,040 --> 00:11:35,519
use of this

242
00:11:32,480 --> 00:11:37,040
um animation spill and animation

243
00:11:35,519 --> 00:11:40,720
builders are widgets

244
00:11:37,040 --> 00:11:42,880
which provide uh exactly what we

245
00:11:40,720 --> 00:11:43,839
were just talking on in explicit

246
00:11:42,880 --> 00:11:46,160
animations

247
00:11:43,839 --> 00:11:47,279
that's what they provide under the hood

248
00:11:46,160 --> 00:11:50,800
um

249
00:11:47,279 --> 00:11:53,120
and provide a builder with uh

250
00:11:50,800 --> 00:11:54,079
the current value of the animation

251
00:11:53,120 --> 00:11:57,120
controller

252
00:11:54,079 --> 00:11:58,800
uh that's much easier to use and uh yeah

253
00:11:57,120 --> 00:11:59,920
why should you use an explicit animation

254
00:11:58,800 --> 00:12:03,359
if you can use

255
00:11:59,920 --> 00:12:06,639
an animated builder okay

256
00:12:03,360 --> 00:12:07,120
let's have a look at one um for example

257
00:12:06,639 --> 00:12:09,920
here

258
00:12:07,120 --> 00:12:10,880
we have an animation controller uh

259
00:12:09,920 --> 00:12:14,639
consisting for

260
00:12:10,880 --> 00:12:18,399
10 seconds repeating infinitely um

261
00:12:14,639 --> 00:12:21,200
and based on the value of the animation

262
00:12:18,399 --> 00:12:21,760
controller which is part of our widget

263
00:12:21,200 --> 00:12:25,120
um

264
00:12:21,760 --> 00:12:27,839
we have an animation builder which is

265
00:12:25,120 --> 00:12:28,800
building based on the value of our

266
00:12:27,839 --> 00:12:32,240
current

267
00:12:28,800 --> 00:12:33,599
of our animation controller in our case

268
00:12:32,240 --> 00:12:37,279
we simply rotate

269
00:12:33,600 --> 00:12:40,800
a box whatever it may be

270
00:12:37,279 --> 00:12:40,800
um yeah

271
00:12:41,120 --> 00:12:45,760
that was quite uh hard and in most cases

272
00:12:44,639 --> 00:12:48,000
you do not

273
00:12:45,760 --> 00:12:48,959
need to use these uh difficult

274
00:12:48,000 --> 00:12:52,560
animations

275
00:12:48,959 --> 00:12:55,199
uh well difficult um usually

276
00:12:52,560 --> 00:12:56,560
simple animations like hero animation

277
00:12:55,200 --> 00:12:59,760
are sufficient

278
00:12:56,560 --> 00:13:01,279
um what is a hero animation a hero

279
00:12:59,760 --> 00:13:04,720
animation

280
00:13:01,279 --> 00:13:07,839
is an anime there is a widget

281
00:13:04,720 --> 00:13:10,720
you can place around any other widget

282
00:13:07,839 --> 00:13:12,079
for example if we have an image we place

283
00:13:10,720 --> 00:13:15,279
an error around it

284
00:13:12,079 --> 00:13:17,199
give it a certain tag uh a attack can be

285
00:13:15,279 --> 00:13:18,079
any object so it could be a string could

286
00:13:17,200 --> 00:13:19,519
be an integer

287
00:13:18,079 --> 00:13:21,839
it could be a witcher that could be

288
00:13:19,519 --> 00:13:25,600
whatever um

289
00:13:21,839 --> 00:13:28,560
if we place a hero around a widget

290
00:13:25,600 --> 00:13:29,839
perform a page route so we move to

291
00:13:28,560 --> 00:13:32,959
another page in our

292
00:13:29,839 --> 00:13:36,160
uh application um and use

293
00:13:32,959 --> 00:13:38,560
the same hero again so a hero

294
00:13:36,160 --> 00:13:39,920
with the same tag and any child should

295
00:13:38,560 --> 00:13:44,000
be a similarly

296
00:13:39,920 --> 00:13:47,439
looking child um then it

297
00:13:44,000 --> 00:13:50,480
yeah the hero simply moves from its

298
00:13:47,440 --> 00:13:54,000
first location to its second location

299
00:13:50,480 --> 00:13:56,720
um zooms to the corresponding um

300
00:13:54,000 --> 00:13:57,360
location and yeah that's very useful for

301
00:13:56,720 --> 00:13:59,199
simple

302
00:13:57,360 --> 00:14:01,120
animations you know it from floating

303
00:13:59,199 --> 00:14:03,279
action buttons for example

304
00:14:01,120 --> 00:14:04,560
or from any image gallery you know if

305
00:14:03,279 --> 00:14:07,600
you tap an

306
00:14:04,560 --> 00:14:08,560
image it zooms in and it's not such an

307
00:14:07,600 --> 00:14:11,120
animation you think

308
00:14:08,560 --> 00:14:12,560
you would never fade an image from the

309
00:14:11,120 --> 00:14:16,000
bottom to the top as a

310
00:14:12,560 --> 00:14:19,119
normal pace page transition um

311
00:14:16,000 --> 00:14:21,760
you simply zoom in the image if you

312
00:14:19,120 --> 00:14:23,040
would surround an image within hero and

313
00:14:21,760 --> 00:14:26,079
move to another page

314
00:14:23,040 --> 00:14:28,240
containing the same image um yeah it's

315
00:14:26,079 --> 00:14:31,839
used for simple animations and it's

316
00:14:28,240 --> 00:14:31,839
very very easy to implement

317
00:14:32,079 --> 00:14:35,279
now here i found the graphic uh

318
00:14:33,839 --> 00:14:38,720
explaining how a

319
00:14:35,279 --> 00:14:42,079
hero works we have our source hero

320
00:14:38,720 --> 00:14:44,240
a big image for example um

321
00:14:42,079 --> 00:14:46,239
in the middle of the screen um and

322
00:14:44,240 --> 00:14:49,199
during the page route

323
00:14:46,240 --> 00:14:49,920
and fledgy detects okay the hearer

324
00:14:49,199 --> 00:14:53,120
appears

325
00:14:49,920 --> 00:14:56,160
again uh in our destination it's at

326
00:14:53,120 --> 00:14:59,920
the top on the left side

327
00:14:56,160 --> 00:15:03,600
uh and hands the hero will zoom in

328
00:14:59,920 --> 00:15:06,959
and move its position to the destination

329
00:15:03,600 --> 00:15:09,680
position yeah

330
00:15:06,959 --> 00:15:11,518
that's uh simply how you would uh

331
00:15:09,680 --> 00:15:15,120
implement a hero

332
00:15:11,519 --> 00:15:17,920
um we have for example

333
00:15:15,120 --> 00:15:18,240
a container containing something put in

334
00:15:17,920 --> 00:15:21,599
here

335
00:15:18,240 --> 00:15:24,720
inside on another page we move to

336
00:15:21,600 --> 00:15:28,320
we implement a card or whatever

337
00:15:24,720 --> 00:15:31,519
containing the same hero tag and then

338
00:15:28,320 --> 00:15:34,800
the contents of the hero will fade

339
00:15:31,519 --> 00:15:38,240
to um the destination

340
00:15:34,800 --> 00:15:41,680
uh hero please pay attention

341
00:15:38,240 --> 00:15:44,240
not to use the same hero attack on two

342
00:15:41,680 --> 00:15:46,319
heroes and on a page otherwise you will

343
00:15:44,240 --> 00:15:48,000
run into trouble because flutter won't

344
00:15:46,320 --> 00:15:50,560
be able to decide

345
00:15:48,000 --> 00:15:51,040
which hero to move on um you know this

346
00:15:50,560 --> 00:15:54,000
if you

347
00:15:51,040 --> 00:15:54,880
put several floating action buttons on

348
00:15:54,000 --> 00:15:57,519
one screen

349
00:15:54,880 --> 00:15:58,480
you run into trouble because flutter

350
00:15:57,519 --> 00:16:00,639
tries to

351
00:15:58,480 --> 00:16:05,120
animate to both floating action button

352
00:16:00,639 --> 00:16:09,360
and buttons and will cause errors

353
00:16:05,120 --> 00:16:13,680
okay that was uh the easy-peasy part

354
00:16:09,360 --> 00:16:17,440
um but let's talk about more complex

355
00:16:13,680 --> 00:16:18,880
transitions and for these complex

356
00:16:17,440 --> 00:16:22,320
transitions

357
00:16:18,880 --> 00:16:25,360
flatter provides an animations package

358
00:16:22,320 --> 00:16:28,079
it's not a part of the flat

359
00:16:25,360 --> 00:16:29,839
framework because well it's not an

360
00:16:28,079 --> 00:16:30,638
everyday use case that's why it was

361
00:16:29,839 --> 00:16:34,000
moved to an

362
00:16:30,639 --> 00:16:37,279
external package but it's an original

363
00:16:34,000 --> 00:16:40,320
package from flutter.dev um

364
00:16:37,279 --> 00:16:41,120
yeah the animations package contains

365
00:16:40,320 --> 00:16:44,720
pre-built

366
00:16:41,120 --> 00:16:47,839
animations um for common

367
00:16:44,720 --> 00:16:51,120
cases um i'll go through these

368
00:16:47,839 --> 00:16:53,759
cases here and it's used for ui

369
00:16:51,120 --> 00:16:56,959
transitions so complex transitions

370
00:16:53,759 --> 00:16:59,440
um and it's comparatively easy to

371
00:16:56,959 --> 00:17:02,000
implement

372
00:16:59,440 --> 00:17:04,160
okay here we have the so-called

373
00:17:02,000 --> 00:17:07,599
container transformed

374
00:17:04,160 --> 00:17:11,439
you can see several containers which are

375
00:17:07,599 --> 00:17:13,119
expanding in some way

376
00:17:11,439 --> 00:17:14,720
for example here the floating action

377
00:17:13,119 --> 00:17:17,678
button which

378
00:17:14,720 --> 00:17:18,400
is being transformed into a card or a

379
00:17:17,679 --> 00:17:22,000
page uh

380
00:17:18,400 --> 00:17:25,439
creating uh whatever

381
00:17:22,000 --> 00:17:26,000
um or here we have a card expanding and

382
00:17:25,439 --> 00:17:29,200
showing

383
00:17:26,000 --> 00:17:29,760
more detail um that's a common use case

384
00:17:29,200 --> 00:17:33,360
for

385
00:17:29,760 --> 00:17:36,960
container transforms yeah beside

386
00:17:33,360 --> 00:17:39,360
aside yeah yeah i provide a code example

387
00:17:36,960 --> 00:17:41,039
um it's actually quite easy to implement

388
00:17:39,360 --> 00:17:43,280
a

389
00:17:41,039 --> 00:17:45,360
container transition it's called uh open

390
00:17:43,280 --> 00:17:49,280
container and the animation

391
00:17:45,360 --> 00:17:52,639
package um yeah you have a builder

392
00:17:49,280 --> 00:17:56,639
for the closed state and for the open

393
00:17:52,640 --> 00:18:00,480
state um and as soon as it

394
00:17:56,640 --> 00:18:03,200
it's being tapped it will simply um

395
00:18:00,480 --> 00:18:05,360
render the transition from the original

396
00:18:03,200 --> 00:18:06,400
well it will expand first of all to a

397
00:18:05,360 --> 00:18:09,840
full page

398
00:18:06,400 --> 00:18:10,880
container and build the uh destination

399
00:18:09,840 --> 00:18:13,678
content

400
00:18:10,880 --> 00:18:14,480
uh and in the close as soon as you tap

401
00:18:13,679 --> 00:18:17,760
back

402
00:18:14,480 --> 00:18:20,559
um it builds the closed

403
00:18:17,760 --> 00:18:20,559
state again

404
00:18:22,160 --> 00:18:28,400
yeah another common use case is

405
00:18:25,280 --> 00:18:32,879
an axis transition um

406
00:18:28,400 --> 00:18:34,720
you know from log in screens or um

407
00:18:32,880 --> 00:18:36,080
coding guides you know i don't know

408
00:18:34,720 --> 00:18:39,200
whether you

409
00:18:36,080 --> 00:18:40,240
know google's code labs or so on they

410
00:18:39,200 --> 00:18:43,600
provide an

411
00:18:40,240 --> 00:18:46,320
access at the uh at one of their

412
00:18:43,600 --> 00:18:47,840
accesses uh which you have this the

413
00:18:46,320 --> 00:18:51,280
second picture here

414
00:18:47,840 --> 00:18:53,199
um numbers of steps um

415
00:18:51,280 --> 00:18:54,720
and you have pretty animate or with

416
00:18:53,200 --> 00:18:58,640
flatter you can

417
00:18:54,720 --> 00:19:01,840
code pretty animations on these axises

418
00:18:58,640 --> 00:19:05,280
um here there are

419
00:19:01,840 --> 00:19:08,399
two types of these access transitions um

420
00:19:05,280 --> 00:19:09,280
there are shared access page transition

421
00:19:08,400 --> 00:19:12,320
builder

422
00:19:09,280 --> 00:19:14,879
well ugly word the shared access page

423
00:19:12,320 --> 00:19:18,799
transition builder is a page transition

424
00:19:14,880 --> 00:19:23,120
so you simply provide two pages

425
00:19:18,799 --> 00:19:25,840
in your flatter application and

426
00:19:23,120 --> 00:19:27,120
the animations package uh with this

427
00:19:25,840 --> 00:19:30,000
shared access transition

428
00:19:27,120 --> 00:19:30,719
builder will take care of the transition

429
00:19:30,000 --> 00:19:33,200
between

430
00:19:30,720 --> 00:19:35,039
those two pages so it's actually uh you

431
00:19:33,200 --> 00:19:36,799
know material page route

432
00:19:35,039 --> 00:19:38,879
and that's another kind of kind of a

433
00:19:36,799 --> 00:19:41,520
page transition

434
00:19:38,880 --> 00:19:42,240
and the other one is a widget a simple

435
00:19:41,520 --> 00:19:45,280
widget

436
00:19:42,240 --> 00:19:49,520
um containing several um

437
00:19:45,280 --> 00:19:52,879
other widgets um in which yeah

438
00:19:49,520 --> 00:19:53,600
through which an uh one of these axis

439
00:19:52,880 --> 00:19:55,679
transitions

440
00:19:53,600 --> 00:19:57,360
is being performed an axis transition

441
00:19:55,679 --> 00:20:00,799
can take place on

442
00:19:57,360 --> 00:20:03,840
uh the x the epsilon and

443
00:20:00,799 --> 00:20:06,879
uh the z

444
00:20:03,840 --> 00:20:10,240
axis um yeah

445
00:20:06,880 --> 00:20:13,039
for example here that's

446
00:20:10,240 --> 00:20:14,880
here you have actually all the uh

447
00:20:13,039 --> 00:20:17,760
different axises here here

448
00:20:14,880 --> 00:20:18,320
horizontal here vertical and here uh

449
00:20:17,760 --> 00:20:21,520
through

450
00:20:18,320 --> 00:20:25,918
the set axis

451
00:20:21,520 --> 00:20:29,200
okay um another very commonly

452
00:20:25,919 --> 00:20:32,720
used um animation

453
00:20:29,200 --> 00:20:34,400
is an animated icon um animated icons

454
00:20:32,720 --> 00:20:38,240
and flatter are pre-built

455
00:20:34,400 --> 00:20:38,240
animations for icons

456
00:20:40,159 --> 00:20:45,520
yeah for example a play button

457
00:20:45,840 --> 00:20:52,240
in a music player which

458
00:20:49,200 --> 00:20:55,360
translates into a pulse button

459
00:20:52,240 --> 00:20:58,559
here it's very very easy to implement

460
00:20:55,360 --> 00:21:03,199
um and emphasizes the user

461
00:20:58,559 --> 00:21:06,559
what uh their actions

462
00:21:03,200 --> 00:21:09,600
affected yeah

463
00:21:06,559 --> 00:21:11,360
here are some examples um

464
00:21:09,600 --> 00:21:13,678
different icons and how they could

465
00:21:11,360 --> 00:21:17,039
behave when you tap them

466
00:21:13,679 --> 00:21:21,679
um common use cases but there are

467
00:21:17,039 --> 00:21:25,039
more complex examples as well

468
00:21:21,679 --> 00:21:28,799
um how to do it well it's

469
00:21:25,039 --> 00:21:31,919
easy peasy um just use animated icon

470
00:21:28,799 --> 00:21:35,360
uh as i can you provide an animated icon

471
00:21:31,919 --> 00:21:36,799
source um yeah look at the api docs

472
00:21:35,360 --> 00:21:38,959
which are available

473
00:21:36,799 --> 00:21:40,720
uh but it could be used for example for

474
00:21:38,960 --> 00:21:43,840
a drawer

475
00:21:40,720 --> 00:21:46,880
to um show a back button

476
00:21:43,840 --> 00:21:49,520
as soon as the draw is opened or so on

477
00:21:46,880 --> 00:21:49,520
or whatever

478
00:21:49,919 --> 00:21:53,760
yeah and now the question well i set

479
00:21:52,320 --> 00:21:56,960
flatter renders with

480
00:21:53,760 --> 00:22:00,158
up to 120 frames per second

481
00:21:56,960 --> 00:22:04,080
and in every single frame

482
00:22:00,159 --> 00:22:07,760
you can render the whole widget again

483
00:22:04,080 --> 00:22:10,240
how does it work um

484
00:22:07,760 --> 00:22:12,240
yeah let's have a look at the engine

485
00:22:10,240 --> 00:22:16,000
especially at the rendering of

486
00:22:12,240 --> 00:22:18,559
the flutter engine yeah

487
00:22:16,000 --> 00:22:19,120
first of all we will look at how flutter

488
00:22:18,559 --> 00:22:22,639
works

489
00:22:19,120 --> 00:22:25,360
under the hood okay we have our widgets

490
00:22:22,640 --> 00:22:26,320
we have animation that's what we just

491
00:22:25,360 --> 00:22:28,879
talked about

492
00:22:26,320 --> 00:22:30,158
we have witches of different kinds we

493
00:22:28,880 --> 00:22:32,960
have gisters we have

494
00:22:30,159 --> 00:22:33,919
painting maybe you already used a custom

495
00:22:32,960 --> 00:22:36,559
paint

496
00:22:33,919 --> 00:22:37,520
um yeah and that's all the framework

497
00:22:36,559 --> 00:22:40,158
flutter

498
00:22:37,520 --> 00:22:41,360
it's written in dart but now the

499
00:22:40,159 --> 00:22:44,080
question is well

500
00:22:41,360 --> 00:22:44,719
we know dart has a set state and on set

501
00:22:44,080 --> 00:22:48,080
state

502
00:22:44,720 --> 00:22:51,600
something happens but what happens

503
00:22:48,080 --> 00:22:55,199
uh and that's what the engine does

504
00:22:51,600 --> 00:22:58,158
under uh the hood uh the engine

505
00:22:55,200 --> 00:23:00,400
is written in c plus plus and provides

506
00:22:58,159 --> 00:23:03,919
uh

507
00:23:00,400 --> 00:23:04,559
yeah all the apis for skia the rendering

508
00:23:03,919 --> 00:23:07,600
library

509
00:23:04,559 --> 00:23:09,039
dart and all the text stuff like

510
00:23:07,600 --> 00:23:12,639
accessibility

511
00:23:09,039 --> 00:23:17,840
um right to left left to right um

512
00:23:12,640 --> 00:23:17,840
and so on um yeah

513
00:23:18,720 --> 00:23:22,000
let's have a look on how an animation

514
00:23:21,600 --> 00:23:25,039
works

515
00:23:22,000 --> 00:23:28,159
in flutter um we have

516
00:23:25,039 --> 00:23:31,840
a gpu which provides a v-sync

517
00:23:28,159 --> 00:23:34,720
with used to

518
00:23:31,840 --> 00:23:36,399
sync the animation to the rendering of

519
00:23:34,720 --> 00:23:36,960
the application otherwise if we would

520
00:23:36,400 --> 00:23:39,919
not

521
00:23:36,960 --> 00:23:40,640
do this well we simply could not uh but

522
00:23:39,919 --> 00:23:44,000
what it

523
00:23:40,640 --> 00:23:47,200
would mean is that the

524
00:23:44,000 --> 00:23:50,000
animation would not be synced to the

525
00:23:47,200 --> 00:23:50,880
updates of the user interface would be a

526
00:23:50,000 --> 00:23:53,360
mess

527
00:23:50,880 --> 00:23:54,080
i don't know you know it for example if

528
00:23:53,360 --> 00:23:58,559
you

529
00:23:54,080 --> 00:24:02,879
uh film with 30 fps

530
00:23:58,559 --> 00:24:05,200
a monitor with 25 fps you will see

531
00:24:02,880 --> 00:24:06,240
some ugly rendering and some issues and

532
00:24:05,200 --> 00:24:08,640
so on and that's

533
00:24:06,240 --> 00:24:11,600
what would theoretically happen if uh

534
00:24:08,640 --> 00:24:14,640
flutter would not require a v-sync

535
00:24:11,600 --> 00:24:18,240
okay we animate we tick

536
00:24:14,640 --> 00:24:20,000
animations um means we were talking

537
00:24:18,240 --> 00:24:20,880
about this ticket provider it takes

538
00:24:20,000 --> 00:24:24,080
every time

539
00:24:20,880 --> 00:24:27,600
the gpu is rendering um

540
00:24:24,080 --> 00:24:31,360
that causes our widget to rebuild the

541
00:24:27,600 --> 00:24:32,080
parts which changed um afterwards the

542
00:24:31,360 --> 00:24:35,279
engine

543
00:24:32,080 --> 00:24:37,520
performs the layout it computes the

544
00:24:35,279 --> 00:24:41,200
sizes of the widgets

545
00:24:37,520 --> 00:24:43,918
and so on and and as soon as

546
00:24:41,200 --> 00:24:45,440
everything is properly rendered uh it's

547
00:24:43,919 --> 00:24:48,559
the frame is recorded

548
00:24:45,440 --> 00:24:52,559
by skier and is painted

549
00:24:48,559 --> 00:24:52,559
to our uh canvas

550
00:24:52,960 --> 00:24:59,200
yeah and that's an important it's not

551
00:24:56,480 --> 00:25:00,240
really about animations but a point to

552
00:24:59,200 --> 00:25:03,039
be mentioned

553
00:25:00,240 --> 00:25:03,600
um that's what the major difference

554
00:25:03,039 --> 00:25:08,480
between

555
00:25:03,600 --> 00:25:11,199
stateless and stateful widgets is um

556
00:25:08,480 --> 00:25:11,919
stateless widget has a constructor and

557
00:25:11,200 --> 00:25:15,039
is being

558
00:25:11,919 --> 00:25:17,840
will uh build but

559
00:25:15,039 --> 00:25:19,840
it does not matter in which build

560
00:25:17,840 --> 00:25:22,879
context

561
00:25:19,840 --> 00:25:26,158
and the state full widget in opposite

562
00:25:22,880 --> 00:25:29,679
creates is its state

563
00:25:26,159 --> 00:25:32,240
for each new build uh context

564
00:25:29,679 --> 00:25:33,360
uh but it does not rebuild the whole

565
00:25:32,240 --> 00:25:37,440
widget

566
00:25:33,360 --> 00:25:40,158
so even if our parenting widget changed

567
00:25:37,440 --> 00:25:40,720
uh if we provide the same state full

568
00:25:40,159 --> 00:25:44,080
widget

569
00:25:40,720 --> 00:25:44,480
in our change parenting widget uh it

570
00:25:44,080 --> 00:25:47,840
would

571
00:25:44,480 --> 00:25:49,840
still uh yeah uh

572
00:25:47,840 --> 00:25:51,039
it would still have its state and would

573
00:25:49,840 --> 00:25:54,480
not be

574
00:25:51,039 --> 00:25:54,480
rebuild from scratch

575
00:25:54,880 --> 00:25:59,039
okay what does it mean um if we have our

576
00:25:57,919 --> 00:26:02,559
state

577
00:25:59,039 --> 00:26:05,679
um we first initialize

578
00:26:02,559 --> 00:26:07,279
our state that's uh yeah

579
00:26:05,679 --> 00:26:09,120
that's where you for example the

580
00:26:07,279 --> 00:26:12,400
animations uh that's where you would

581
00:26:09,120 --> 00:26:15,678
uh declare the animations controller um

582
00:26:12,400 --> 00:26:18,799
and after words uh the first

583
00:26:15,679 --> 00:26:22,159
build is being triggered um

584
00:26:18,799 --> 00:26:26,240
and for example if nothing happens um

585
00:26:22,159 --> 00:26:28,480
as soon as um our parenting richards

586
00:26:26,240 --> 00:26:31,919
decides no longer to show our

587
00:26:28,480 --> 00:26:35,679
widget our widget is being deposed

588
00:26:31,919 --> 00:26:38,880
but a state full widget is able or

589
00:26:35,679 --> 00:26:41,840
state is able to set its own state

590
00:26:38,880 --> 00:26:42,480
to trigger a rebuild or if the parenting

591
00:26:41,840 --> 00:26:45,840
widget

592
00:26:42,480 --> 00:26:48,240
change it is being rebuilt as well but

593
00:26:45,840 --> 00:26:49,439
it's not being re-initialized it's only

594
00:26:48,240 --> 00:26:52,559
being rebuilt

595
00:26:49,440 --> 00:26:55,919
and that's the major difference and

596
00:26:52,559 --> 00:26:58,799
by these by this entanglement of

597
00:26:55,919 --> 00:26:59,600
so many widgets stateful and stateless

598
00:26:58,799 --> 00:27:02,480
um

599
00:26:59,600 --> 00:27:04,480
on one rendering of our graphics library

600
00:27:02,480 --> 00:27:08,159
of enron

601
00:27:04,480 --> 00:27:11,600
uh during one of these 120

602
00:27:08,159 --> 00:27:13,840
frames per second uh only these

603
00:27:11,600 --> 00:27:14,959
tiny parts of the applications which

604
00:27:13,840 --> 00:27:17,918
really changed

605
00:27:14,960 --> 00:27:19,120
only they are being rebuilt and that's

606
00:27:17,919 --> 00:27:21,840
why flatter has

607
00:27:19,120 --> 00:27:23,360
such an incredible performance on

608
00:27:21,840 --> 00:27:26,080
animations and layout

609
00:27:23,360 --> 00:27:30,240
and works even on low level devices with

610
00:27:26,080 --> 00:27:33,760
up to 120 frames per seconds

611
00:27:30,240 --> 00:27:34,080
yeah at that point i would like to stop

612
00:27:33,760 --> 00:27:36,960
this

613
00:27:34,080 --> 00:27:37,600
talk um i hope i could give you a good

614
00:27:36,960 --> 00:27:40,640
impression

615
00:27:37,600 --> 00:27:43,760
on animations in flutter and how

616
00:27:40,640 --> 00:27:46,960
rendering of the engine works in flutter

617
00:27:43,760 --> 00:27:50,000
um and i would now like you to enjoy the

618
00:27:46,960 --> 00:27:51,679
q and a and the rest of the the remote

619
00:27:50,000 --> 00:27:53,919
chaos experience

620
00:27:51,679 --> 00:27:57,120
thank you thank you very much for the

621
00:27:53,919 --> 00:27:57,120
session about flutter

622
00:27:57,360 --> 00:28:02,559
the thing is one question i had is that

623
00:28:00,559 --> 00:28:05,200
flutter was developed by google

624
00:28:02,559 --> 00:28:07,120
so not everybody likes google so what

625
00:28:05,200 --> 00:28:10,320
what would you say to people who

626
00:28:07,120 --> 00:28:13,360
are wary because of that uh

627
00:28:10,320 --> 00:28:16,399
me neither i actually avoid anything

628
00:28:13,360 --> 00:28:19,520
from google um but flutter is

629
00:28:16,399 --> 00:28:22,000
open source uh and so

630
00:28:19,520 --> 00:28:23,520
i see no issues in using flutter

631
00:28:22,000 --> 00:28:25,919
especially because it's

632
00:28:23,520 --> 00:28:28,720
powered by a great community there's no

633
00:28:25,919 --> 00:28:32,640
requirement for any proprietary

634
00:28:28,720 --> 00:28:33,600
service and uh so i see no issues in

635
00:28:32,640 --> 00:28:36,799
there you can

636
00:28:33,600 --> 00:28:40,240
uh include an uh dependencies from any

637
00:28:36,799 --> 00:28:43,200
um package server for dart you want

638
00:28:40,240 --> 00:28:44,960
so yeah it's actually quite useful it's

639
00:28:43,200 --> 00:28:48,080
a bsd 3

640
00:28:44,960 --> 00:28:52,159
clause license so it is

641
00:28:48,080 --> 00:28:54,559
uh as free as we can expect it

642
00:28:52,159 --> 00:28:56,399
thank you very much once again whoever

643
00:28:54,559 --> 00:28:57,120
is watching us and has a question now

644
00:28:56,399 --> 00:28:59,918
now would be

645
00:28:57,120 --> 00:29:02,239
the best moment to put your question

646
00:28:59,919 --> 00:29:04,880
into the irc or on twitter or mastodon

647
00:29:02,240 --> 00:29:08,080
so we can read it and answer it now

648
00:29:04,880 --> 00:29:09,279
um so until these questions maybe

649
00:29:08,080 --> 00:29:12,158
another one rolls in

650
00:29:09,279 --> 00:29:13,279
can you give us a few examples ah we

651
00:29:12,159 --> 00:29:15,360
have a new question but

652
00:29:13,279 --> 00:29:16,640
i have other another question first

653
00:29:15,360 --> 00:29:18,479
sorry um

654
00:29:16,640 --> 00:29:20,559
so give us a few examples what you have

655
00:29:18,480 --> 00:29:22,559
built in the in the last

656
00:29:20,559 --> 00:29:24,158
month with flutter because i know you've

657
00:29:22,559 --> 00:29:25,440
been developing with slatter for some

658
00:29:24,159 --> 00:29:28,880
time now

659
00:29:25,440 --> 00:29:30,799
uh yeah uh currently i'm uh working on

660
00:29:28,880 --> 00:29:32,159
an application called sarno plus plus

661
00:29:30,799 --> 00:29:35,200
it's uh the

662
00:29:32,159 --> 00:29:40,159
it's a mobile port of uh the

663
00:29:35,200 --> 00:29:43,200
uh known note-taking software xornal um

664
00:29:40,159 --> 00:29:45,840
um which uh i'm currently importing to

665
00:29:43,200 --> 00:29:46,640
uh to android and ios uh together with

666
00:29:45,840 --> 00:29:49,760
the original

667
00:29:46,640 --> 00:29:51,840
maintainers of the linux and windows uh

668
00:29:49,760 --> 00:29:53,600
application

669
00:29:51,840 --> 00:29:55,520
oh that sounds interesting thank you

670
00:29:53,600 --> 00:29:56,000
very much so we now head over to one

671
00:29:55,520 --> 00:29:58,639
question

672
00:29:56,000 --> 00:29:59,360
linmop on irc has a question i'll read

673
00:29:58,640 --> 00:30:01,200
it off

674
00:29:59,360 --> 00:30:03,120
what's the progress of the port of

675
00:30:01,200 --> 00:30:05,039
flutter to arm linux

676
00:30:03,120 --> 00:30:06,879
for devices for example like the pine

677
00:30:05,039 --> 00:30:10,080
phone do you know about that

678
00:30:06,880 --> 00:30:13,360
um i recently read on github about

679
00:30:10,080 --> 00:30:16,480
um this uh there is work in progress

680
00:30:13,360 --> 00:30:19,840
um i think the flutter tool uh

681
00:30:16,480 --> 00:30:23,840
is now capable to run on uh linux

682
00:30:19,840 --> 00:30:27,360
for arm but um it's not possible yet to

683
00:30:23,840 --> 00:30:30,559
build uh release uh yeah to

684
00:30:27,360 --> 00:30:34,240
build release mode applications uh on

685
00:30:30,559 --> 00:30:37,520
neither on arm not nor forearm

686
00:30:34,240 --> 00:30:40,480
but they are working on it

687
00:30:37,520 --> 00:30:42,158
okay so we don't know at the time being

688
00:30:40,480 --> 00:30:44,960
when this is going to be

689
00:30:42,159 --> 00:30:45,520
done okay thank you very much um how can

690
00:30:44,960 --> 00:30:48,880
people

691
00:30:45,520 --> 00:30:50,559
um learn more about that or can stay in

692
00:30:48,880 --> 00:30:53,039
contact with you if they want and if you

693
00:30:50,559 --> 00:30:56,799
have questions afterwards maybe

694
00:30:53,039 --> 00:30:59,919
uh i'm available here in wikipaka wiki

695
00:30:56,799 --> 00:31:02,000
uh or um here uh

696
00:30:59,919 --> 00:31:03,360
i guess there's a q a session in big

697
00:31:02,000 --> 00:31:05,440
blue button later

698
00:31:03,360 --> 00:31:07,360
on which you can contact me and

699
00:31:05,440 --> 00:31:09,760
otherwise uh just search for

700
00:31:07,360 --> 00:31:11,039
the one with the bright in the internet

701
00:31:09,760 --> 00:31:14,799
uh you will find

702
00:31:11,039 --> 00:31:14,799
possibilities to come contact me

703
00:31:15,519 --> 00:31:21,360
so i'll post the link to uh to

704
00:31:18,799 --> 00:31:22,879
further q a in the in the rsc if anybody

705
00:31:21,360 --> 00:31:24,080
wants to use that thank you for the

706
00:31:22,880 --> 00:31:26,000
question linhop

707
00:31:24,080 --> 00:31:27,760
thank you for your talk uh the one with

708
00:31:26,000 --> 00:31:28,240
the braid i think we don't have another

709
00:31:27,760 --> 00:31:30,720
question

710
00:31:28,240 --> 00:31:32,799
at the moment right now but um we

711
00:31:30,720 --> 00:31:34,559
recorded this for posterity so

712
00:31:32,799 --> 00:31:35,918
if anybody sees this later they will

713
00:31:34,559 --> 00:31:38,000
contact you i guess

714
00:31:35,919 --> 00:31:39,760
thank you so much for your contribution

715
00:31:38,000 --> 00:31:41,039
and see you again in the program

716
00:31:39,760 --> 00:31:47,840
tomorrow

717
00:31:41,039 --> 00:31:47,840
yeah goodbye see you tomorrow

718
00:31:52,399 --> 00:31:54,479
you

