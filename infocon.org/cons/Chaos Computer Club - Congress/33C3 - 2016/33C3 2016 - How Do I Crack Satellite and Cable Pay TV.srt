1
00:00:01,760 --> 00:00:19,880
[Music]

2
00:00:11,030 --> 00:00:26,329
<font color="#E5E5E5">so coming over to our next talk tonight</font>

3
00:00:19,880 --> 00:00:28,250
<font color="#E5E5E5">if you switch off your</font><font color="#CCCCCC"> tech</font><font color="#E5E5E5"> phone and if</font>

4
00:00:26,329 --> 00:00:32,660
you're full of different impressions

5
00:00:28,250 --> 00:00:36,110
<font color="#E5E5E5">full of different impressions of this</font>

6
00:00:32,659 --> 00:00:38,959
day<font color="#CCCCCC"> you maybe want to watch TV</font><font color="#E5E5E5"> but it</font>

7
00:00:36,110 --> 00:00:43,309
would be cool to have<font color="#CCCCCC"> a TV</font><font color="#E5E5E5"> unencrypted</font>

8
00:00:38,960 --> 00:00:45,410
<font color="#CCCCCC">pray TV arm</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> Chris</font><font color="#E5E5E5"> kolinsky asks</font>

9
00:00:43,309 --> 00:00:49,070
himself<font color="#E5E5E5"> the same and how to achieve</font>

10
00:00:45,410 --> 00:00:51,620
<font color="#E5E5E5">unencrypted</font><font color="#CCCCCC"> pay-tv but the heck away so</font>

11
00:00:49,070 --> 00:00:54,890
<font color="#E5E5E5">Chris reverse-engineered nothing less</font>

12
00:00:51,620 --> 00:00:57,739
than the signal<font color="#E5E5E5"> and encryption for</font><font color="#CCCCCC"> a</font>

13
00:00:54,890 --> 00:01:01,100
standard<font color="#E5E5E5"> that remains unaccepted since</font>

14
00:00:57,739 --> 00:01:03,678
the late nineties<font color="#E5E5E5"> please welcome with an</font>

15
00:01:01,100 --> 00:01:05,040
anniversary edition<font color="#E5E5E5"> applause Chris</font>

16
00:01:03,679 --> 00:01:13,080
<font color="#CCCCCC">galinsky</font>

17
00:01:05,040 --> 00:01:25,920
[Applause]

18
00:01:13,080 --> 00:01:28,320
<font color="#E5E5E5">hello everyone my name is</font><font color="#CCCCCC"> chris</font><font color="#E5E5E5"> kolinsky</font>

19
00:01:25,920 --> 00:01:30,000
<font color="#CCCCCC">i'm a hacker</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> canada</font><font color="#E5E5E5"> and i'm here</font>

20
00:01:28,320 --> 00:01:32,100
today to talk about how<font color="#CCCCCC"> I cracked</font>

21
00:01:30,000 --> 00:01:34,770
digital cable and satellite TV security

22
00:01:32,100 --> 00:01:36,809
<font color="#CCCCCC">i</font><font color="#E5E5E5"> studied an access control platform</font>

23
00:01:34,770 --> 00:01:37,710
that's widely used across<font color="#CCCCCC"> canada</font><font color="#E5E5E5"> and the</font>

24
00:01:36,810 --> 00:01:40,020
USA

25
00:01:37,710 --> 00:01:43,320
it's one of the two common platforms

26
00:01:40,020 --> 00:01:45,330
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> using cable TV and it's also used</font>

27
00:01:43,320 --> 00:01:48,630
in satellite TV<font color="#E5E5E5"> by one of the two</font>

28
00:01:45,330 --> 00:01:50,370
<font color="#CCCCCC">Canadian</font><font color="#E5E5E5"> satellite TV operators as far</font>

29
00:01:48,630 --> 00:01:51,929
as<font color="#CCCCCC"> i know the system has remained secure</font>

30
00:01:50,370 --> 00:01:54,690
since it was introduced in the nineteen

31
00:01:51,930 --> 00:01:56,340
nineties and<font color="#CCCCCC"> i was curious if I could</font>

32
00:01:54,690 --> 00:01:57,479
understand the system based on the older

33
00:01:56,340 --> 00:01:59,729
<font color="#CCCCCC">set-top</font><font color="#E5E5E5"> boxes</font>

34
00:01:57,479 --> 00:02:01,860
some of them<font color="#E5E5E5"> were 15 years old and</font>

35
00:01:59,729 --> 00:02:03,270
they're still in use so these devices

36
00:02:01,860 --> 00:02:06,150
haven't<font color="#E5E5E5"> received</font><font color="#CCCCCC"> upgraded</font><font color="#E5E5E5"> security</font>

37
00:02:03,270 --> 00:02:11,009
hardware that time<font color="#E5E5E5"> and</font><font color="#CCCCCC"> i started looking</font>

38
00:02:06,150 --> 00:02:12,420
at how the system works before i get

39
00:02:11,009 --> 00:02:14,100
into the reverse engineering<font color="#CCCCCC"> i'll start</font>

40
00:02:12,420 --> 00:02:15,750
with a brief description of how digital

41
00:02:14,100 --> 00:02:18,329
television is sent over satellite or

42
00:02:15,750 --> 00:02:19,980
cable satellite and cable digital

43
00:02:18,330 --> 00:02:22,230
television are pretty similar for the

44
00:02:19,980 --> 00:02:24,450
most part<font color="#E5E5E5"> there are a variety of signal</font>

45
00:02:22,230 --> 00:02:29,040
modulation is used the relevant ones

46
00:02:24,450 --> 00:02:31,200
here are<font color="#CCCCCC"> qpsk about</font><font color="#E5E5E5"> 27 megabits and 8psk</font>

47
00:02:29,040 --> 00:02:35,070
turbo<font color="#CCCCCC"> faq</font><font color="#E5E5E5"> at about thirty eight</font>

48
00:02:31,200 --> 00:02:37,140
<font color="#E5E5E5">megabytes for satellite and QAM 256</font><font color="#CCCCCC"> out</font>

49
00:02:35,070 --> 00:02:39,660
<font color="#CCCCCC">of 38 megabits for cable</font>

50
00:02:37,140 --> 00:02:42,299
there's also an out-of-band<font color="#E5E5E5"> channel used</font>

51
00:02:39,660 --> 00:02:44,910
by cable which is<font color="#CCCCCC"> qpsk modulated</font><font color="#E5E5E5"> at 2</font>

52
00:02:42,300 --> 00:02:46,500
megabits<font color="#E5E5E5"> this</font><font color="#CCCCCC"> out-of-band</font><font color="#E5E5E5"> channel</font>

53
00:02:44,910 --> 00:02:48,209
carries the subscription management

54
00:02:46,500 --> 00:02:50,730
program guide information from<font color="#E5E5E5"> where</font>

55
00:02:48,209 --> 00:02:52,410
upgrades etc<font color="#E5E5E5"> and while you change</font>

56
00:02:50,730 --> 00:02:54,268
channels and the cable box<font color="#CCCCCC"> tunes two</font>

57
00:02:52,410 --> 00:02:56,310
different frequencies<font color="#E5E5E5"> this</font><font color="#CCCCCC"> out-of-band</font>

58
00:02:54,269 --> 00:02:57,870
<font color="#E5E5E5">channel remains</font><font color="#CCCCCC"> tuned</font><font color="#E5E5E5"> so that the</font><font color="#CCCCCC"> box</font>

59
00:02:56,310 --> 00:03:00,840
continuously<font color="#CCCCCC"> receives the state and no</font>

60
00:02:57,870 --> 00:03:02,400
matter what TV channel<font color="#E5E5E5"> your</font><font color="#CCCCCC"> tune in the</font>

61
00:03:00,840 --> 00:03:03,810
satellite TV this type of data is

62
00:03:02,400 --> 00:03:05,850
included within the main transport

63
00:03:03,810 --> 00:03:09,480
stream instead of in<font color="#E5E5E5"> a secondary motive</font>

64
00:03:05,850 --> 00:03:12,720
<font color="#E5E5E5">and transport stream the video is sent</font>

65
00:03:09,480 --> 00:03:15,298
as<font color="#CCCCCC"> mpeg-2</font><font color="#E5E5E5"> or H dot 264 transport stream</font>

66
00:03:12,720 --> 00:03:17,370
<font color="#E5E5E5">this is a standard format for</font><font color="#CCCCCC"> carrying</font>

67
00:03:15,299 --> 00:03:19,560
video streams<font color="#E5E5E5"> so we can be played by any</font>

68
00:03:17,370 --> 00:03:21,900
hardware video<font color="#E5E5E5"> decoder or software</font>

69
00:03:19,560 --> 00:03:24,030
decoder for example<font color="#E5E5E5"> VLC</font>

70
00:03:21,900 --> 00:03:26,819
<font color="#E5E5E5">and the encryption system used here is</font>

71
00:03:24,030 --> 00:03:28,620
called decipher<font color="#E5E5E5"> to which does not follow</font>

72
00:03:26,819 --> 00:03:32,909
the<font color="#E5E5E5"> DVD standards that are used in the</font>

73
00:03:28,620 --> 00:03:35,549
rest of the world the MPEG transport

74
00:03:32,909 --> 00:03:39,540
stream is made up of<font color="#E5E5E5"> packets of 188</font>

75
00:03:35,549 --> 00:03:41,129
<font color="#E5E5E5">bytes each packet has a bid</font><font color="#CCCCCC"> this is used</font>

76
00:03:39,540 --> 00:03:46,319
to differentiate different types of data

77
00:03:41,129 --> 00:03:48,540
<font color="#CCCCCC">kids range from 0 to x 1</font><font color="#E5E5E5"> FF</font><font color="#CCCCCC"> each pit</font>

78
00:03:46,319 --> 00:03:51,629
carries an MPEG packetized<font color="#E5E5E5"> elementary</font>

79
00:03:48,540 --> 00:03:53,310
stream<font color="#E5E5E5"> that's a video or audio stream or</font>

80
00:03:51,629 --> 00:03:55,920
the pit may carry one or more service

81
00:03:53,310 --> 00:03:57,720
information tables<font color="#E5E5E5"> the service</font>

82
00:03:55,920 --> 00:04:00,420
information tables have an<font color="#E5E5E5"> 8-bit table</font>

83
00:03:57,720 --> 00:04:02,790
ID and a length of up to a thousand<font color="#E5E5E5"> 24</font>

84
00:04:00,420 --> 00:04:05,790
bytes<font color="#E5E5E5"> including</font><font color="#CCCCCC"> a crc32 for error</font>

85
00:04:02,790 --> 00:04:07,319
detection and this table ID<font color="#CCCCCC"> identifies</font>

86
00:04:05,790 --> 00:04:10,650
the type of data that you can expect

87
00:04:07,319 --> 00:04:12,750
within the table table 0 is the<font color="#E5E5E5"> program</font>

88
00:04:10,650 --> 00:04:14,579
<font color="#CCCCCC">Association table containing a list of</font>

89
00:04:12,750 --> 00:04:17,070
programs carried in this transport

90
00:04:14,579 --> 00:04:19,680
stream and the PMT<font color="#CCCCCC"> pit for</font><font color="#E5E5E5"> each program</font>

91
00:04:17,070 --> 00:04:23,009
the program<font color="#CCCCCC"> Association table is always</font>

92
00:04:19,680 --> 00:04:24,930
on<font color="#E5E5E5"> page 0 table 2 is a program map table</font>

93
00:04:23,009 --> 00:04:27,030
which contains the list of<font color="#CCCCCC"> packet eyes</font>

94
00:04:24,930 --> 00:04:30,180
elementary streams and the pit for each

95
00:04:27,030 --> 00:04:32,638
as well as an ECM<font color="#E5E5E5"> pit</font><font color="#CCCCCC"> there's a program</font>

96
00:04:30,180 --> 00:04:36,090
<font color="#E5E5E5">map table for each MPEG program or TV</font>

97
00:04:32,639 --> 00:04:38,580
channel<font color="#E5E5E5"> that's found in the stream the</font>

98
00:04:36,090 --> 00:04:40,109
ECM<font color="#CCCCCC"> pit is where entitlement control</font>

99
00:04:38,580 --> 00:04:43,169
messages are sent containing information

100
00:04:40,110 --> 00:04:44,909
<font color="#E5E5E5">that's used to det generate the key that</font>

101
00:04:43,169 --> 00:04:47,880
decrypt the packetized elementary

102
00:04:44,909 --> 00:04:52,860
streams<font color="#E5E5E5"> this system uses two types of</font>

103
00:04:47,880 --> 00:04:56,550
ECM<font color="#E5E5E5"> table 40</font><font color="#CCCCCC"> i call ECM</font><font color="#E5E5E5"> 40 and table 41</font>

104
00:04:52,860 --> 00:04:58,560
<font color="#CCCCCC">I</font><font color="#E5E5E5"> call</font><font color="#CCCCCC"> ECM</font><font color="#E5E5E5"> 41 on pit</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> there may be</font>

105
00:04:56,550 --> 00:05:01,710
one or more conditional access tables

106
00:04:58,560 --> 00:05:04,020
<font color="#E5E5E5">table ID number one these tables</font>

107
00:05:01,710 --> 00:05:06,900
identify a<font color="#E5E5E5"> pit that carries</font><font color="#CCCCCC"> DMMs</font>

108
00:05:04,020 --> 00:05:09,240
<font color="#E5E5E5">entitlement management messages these</font>

109
00:05:06,900 --> 00:05:11,580
messages are used to set access rates

110
00:05:09,240 --> 00:05:12,810
for individual<font color="#CCCCCC"> set-top boxes</font><font color="#E5E5E5"> the</font>

111
00:05:11,580 --> 00:05:14,669
subscription information like what

112
00:05:12,810 --> 00:05:18,780
channels are available is carried inside

113
00:05:14,669 --> 00:05:20,639
of Em's

114
00:05:18,780 --> 00:05:24,479
<font color="#E5E5E5">this is a hardware interface to receive</font>

115
00:05:20,639 --> 00:05:27,690
satellite data<font color="#CCCCCC"> jen pic</font><font color="#E5E5E5"> Skywalker</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> the</font>

116
00:05:24,480 --> 00:05:30,660
<font color="#E5E5E5">dc2</font><font color="#CCCCCC"> qpsk modulation</font><font color="#E5E5E5"> isn't widely</font>

117
00:05:27,690 --> 00:05:33,810
supported in the USB or<font color="#CCCCCC"> pci dvb-s</font>

118
00:05:30,660 --> 00:05:35,669
<font color="#E5E5E5">devices and the</font><font color="#CCCCCC"> 8psk</font><font color="#E5E5E5"> turbo fact</font>

119
00:05:33,810 --> 00:05:38,520
modulation support is even less common

120
00:05:35,669 --> 00:05:40,289
<font color="#E5E5E5">and one of the devices that does support</font>

121
00:05:38,520 --> 00:05:43,260
<font color="#E5E5E5">these signals is this</font><font color="#CCCCCC"> jen pics device</font>

122
00:05:40,290 --> 00:05:46,650
which is using a broadcom<font color="#CCCCCC"> PCM</font><font color="#E5E5E5"> for 500</font>

123
00:05:43,260 --> 00:05:51,000
<font color="#CCCCCC">the modulator</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it supports both dc2</font>

124
00:05:46,650 --> 00:05:53,159
<font color="#CCCCCC">qpsk and</font><font color="#E5E5E5"> the 8psk modulations it works</font>

125
00:05:51,000 --> 00:05:55,350
well<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> drivers need to be</font>

126
00:05:53,160 --> 00:05:57,720
recompiled<font color="#E5E5E5"> to include support for these</font>

127
00:05:55,350 --> 00:06:00,180
modes and patches for this were

128
00:05:57,720 --> 00:06:04,110
published by update<font color="#CCCCCC"> Lee there's a link</font>

129
00:06:00,180 --> 00:06:05,790
on the slide for cable

130
00:06:04,110 --> 00:06:10,560
there's a variety of it after supporting

131
00:06:05,790 --> 00:06:14,700
<font color="#CCCCCC">QAM 256 demodulation i use the USB hvr</font>

132
00:06:10,560 --> 00:06:16,770
<font color="#CCCCCC">950 q</font><font color="#E5E5E5"> tuner unfortunately to</font><font color="#CCCCCC"> the outer</font>

133
00:06:14,700 --> 00:06:19,590
<font color="#CCCCCC">band channel is generally not supported</font>

134
00:06:16,770 --> 00:06:21,150
by the off-the-shelf interfaces<font color="#E5E5E5"> inside</font>

135
00:06:19,590 --> 00:06:23,880
the cable box it's handled within the

136
00:06:21,150 --> 00:06:26,640
integrated chipset and for the clear QAM

137
00:06:23,880 --> 00:06:28,740
<font color="#E5E5E5">consumer devices such as USB interfaces</font>

138
00:06:26,640 --> 00:06:31,860
<font color="#E5E5E5">access to the</font><font color="#CCCCCC"> outer band data isn't</font>

139
00:06:28,740 --> 00:06:33,690
actually required<font color="#E5E5E5"> and so they don't</font>

140
00:06:31,860 --> 00:06:35,070
<font color="#CCCCCC">included inside</font><font color="#E5E5E5"> of the hardware this out</font>

141
00:06:33,690 --> 00:06:41,400
<font color="#E5E5E5">of</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> data is used only for pay-tv</font>

142
00:06:35,070 --> 00:06:43,979
services with the satellite and cable

143
00:06:41,400 --> 00:06:45,419
interfaces<font color="#CCCCCC"> dvb snoop can be used to view</font>

144
00:06:43,979 --> 00:06:47,460
a lot of information with the<font color="#CCCCCC"> transport</font>

145
00:06:45,419 --> 00:06:49,680
stream<font color="#CCCCCC"> it's enough information to be</font>

146
00:06:47,460 --> 00:06:51,870
quite overwhelming<font color="#CCCCCC"> so the trick to using</font>

147
00:06:49,680 --> 00:06:55,260
it is being able to sift through the

148
00:06:51,870 --> 00:06:57,270
output for the relevant information<font color="#CCCCCC"> DVD</font>

149
00:06:55,260 --> 00:06:59,460
<font color="#CCCCCC">snoop also doesn't recognize all of the</font>

150
00:06:57,270 --> 00:07:01,289
<font color="#CCCCCC">digital for</font><font color="#E5E5E5"> two tables because it's a</font>

151
00:06:59,460 --> 00:07:04,169
<font color="#E5E5E5">non-standard system and</font><font color="#CCCCCC"> EV Snoop is</font>

152
00:07:01,289 --> 00:07:05,789
targeted<font color="#E5E5E5"> towards the standard systems</font><font color="#CCCCCC"> so</font>

153
00:07:04,169 --> 00:07:07,140
<font color="#E5E5E5">DVD sleep may not be able to tell you</font>

154
00:07:05,789 --> 00:07:09,240
everything about the transport stream

155
00:07:07,140 --> 00:07:10,289
but there was still a very useful tool

156
00:07:09,240 --> 00:07:16,920
for all the information that<font color="#CCCCCC"> you can</font>

157
00:07:10,289 --> 00:07:19,740
<font color="#CCCCCC">provide</font>

158
00:07:16,920 --> 00:07:21,570
<font color="#CCCCCC">dvb</font><font color="#E5E5E5"> snoop and most other tools and</font>

159
00:07:19,740 --> 00:07:23,340
documentation or divine<font color="#CCCCCC"> design for the</font>

160
00:07:21,570 --> 00:07:26,130
DVD standard or other recognized

161
00:07:23,340 --> 00:07:27,929
standards such as<font color="#CCCCCC"> atsc did</font><font color="#E5E5E5"> you say for</font>

162
00:07:26,130 --> 00:07:30,030
cable<font color="#CCCCCC"> and</font><font color="#E5E5E5"> satellite systems use a lot of</font>

163
00:07:27,930 --> 00:07:32,400
<font color="#CCCCCC">non-standard able</font><font color="#E5E5E5"> to carry the system</font>

164
00:07:30,030 --> 00:07:34,590
information for cable<font color="#E5E5E5"> TV some of these</font>

165
00:07:32,400 --> 00:07:39,929
tables are standardized by the<font color="#E5E5E5"> document</font>

166
00:07:34,590 --> 00:07:42,330
<font color="#CCCCCC">scte 65 there is no be 80 or sdt</font><font color="#E5E5E5"> as</font>

167
00:07:39,930 --> 00:07:44,100
<font color="#E5E5E5">you'd expect in</font><font color="#CCCCCC"> dvb</font><font color="#E5E5E5"> instead there is a</font>

168
00:07:42,330 --> 00:07:45,750
virtual<font color="#E5E5E5"> channel table that map's the</font>

169
00:07:44,100 --> 00:07:48,420
transport streams and<font color="#CCCCCC"> programs</font><font color="#E5E5E5"> channel</font>

170
00:07:45,750 --> 00:07:51,060
numbers<font color="#E5E5E5"> the electronic</font><font color="#CCCCCC"> program guide is</font>

171
00:07:48,420 --> 00:07:52,620
also not<font color="#CCCCCC"> DVD standard</font><font color="#E5E5E5"> so you don't even</font>

172
00:07:51,060 --> 00:07:57,150
get the<font color="#E5E5E5"> current next program information</font>

173
00:07:52,620 --> 00:07:59,790
in any kind of<font color="#CCCCCC"> a standard</font><font color="#E5E5E5"> format another</font>

174
00:07:57,150 --> 00:08:02,190
cable TV adapter is the<font color="#E5E5E5"> HD homerun prime</font>

175
00:07:59,790 --> 00:08:05,580
<font color="#CCCCCC">this one is a network-connected</font><font color="#E5E5E5"> 32</font>

176
00:08:02,190 --> 00:08:07,560
<font color="#E5E5E5">device with</font><font color="#CCCCCC"> cable card support the</font>

177
00:08:05,580 --> 00:08:08,340
<font color="#E5E5E5">set-top boxes i study predate the cable</font>

178
00:08:07,560 --> 00:08:09,990
cards

179
00:08:08,340 --> 00:08:11,669
although the<font color="#E5E5E5"> newer boxes do</font><font color="#CCCCCC"> you use the</font>

180
00:08:09,990 --> 00:08:14,520
<font color="#E5E5E5">cable cards and they support the</font><font color="#CCCCCC"> digits</font>

181
00:08:11,670 --> 00:08:16,050
<font color="#CCCCCC">a</font><font color="#E5E5E5"> 42</font><font color="#CCCCCC"> by cable card support does also</font>

182
00:08:14,520 --> 00:08:18,750
means that this HD homerun prime

183
00:08:16,050 --> 00:08:21,990
includes the tuner and<font color="#CCCCCC"> KPIs qpsk</font>

184
00:08:18,750 --> 00:08:23,640
demodulator<font color="#E5E5E5"> for the out of</font><font color="#CCCCCC"> an channel</font><font color="#E5E5E5"> so</font>

185
00:08:21,990 --> 00:08:26,970
<font color="#CCCCCC">it</font><font color="#E5E5E5"> is able to pass this data to the</font>

186
00:08:23,640 --> 00:08:28,979
<font color="#E5E5E5">cablecard</font><font color="#CCCCCC"> as necessary</font><font color="#E5E5E5"> however even the</font>

187
00:08:26,970 --> 00:08:31,050
hdhomerun doesn't make this out of<font color="#E5E5E5"> and</font>

188
00:08:28,980 --> 00:08:34,229
data available other than the<font color="#CCCCCC"> cablecard</font>

189
00:08:31,050 --> 00:08:36,630
<font color="#E5E5E5">interface so to access the demodulated</font>

190
00:08:34,229 --> 00:08:38,520
<font color="#E5E5E5">out of and data</font><font color="#CCCCCC"> I tapped into</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> HD</font>

191
00:08:36,630 --> 00:08:41,400
<font color="#CCCCCC">homerun prime with a cable card inserted</font>

192
00:08:38,520 --> 00:08:45,030
and connected a logic analyzer to the

193
00:08:41,400 --> 00:08:49,199
data<font color="#E5E5E5"> and clock signals</font><font color="#CCCCCC"> i wrote software</font>

194
00:08:45,030 --> 00:08:51,720
using the cilia<font color="#CCCCCC"> sdk to capture the qpsk</font>

195
00:08:49,200 --> 00:08:53,070
demodulated data then in software<font color="#E5E5E5"> i</font>

196
00:08:51,720 --> 00:08:54,780
performed the interleaving<font color="#E5E5E5"> d</font>

197
00:08:53,070 --> 00:08:57,810
<font color="#E5E5E5">randomization in the forward error</font>

198
00:08:54,780 --> 00:09:01,350
connection and the output is an MPEG

199
00:08:57,810 --> 00:09:03,959
transport stream<font color="#E5E5E5"> so using an HD homerun</font>

200
00:09:01,350 --> 00:09:05,820
prime<font color="#E5E5E5"> connected to the logic analyzer</font>

201
00:09:03,960 --> 00:09:08,430
<font color="#E5E5E5">connected to the</font><font color="#CCCCCC"> pc running the software</font>

202
00:09:05,820 --> 00:09:10,530
<font color="#E5E5E5">the output finally is the</font><font color="#CCCCCC"> two megabit</font>

203
00:09:08,430 --> 00:09:12,510
transport stream and this transport

204
00:09:10,530 --> 00:09:14,670
stream looks like a standard transport

205
00:09:12,510 --> 00:09:16,890
stream and inside are the conditional

206
00:09:14,670 --> 00:09:19,199
access management<font color="#E5E5E5"> messages</font><font color="#CCCCCC"> program guide</font>

207
00:09:16,890 --> 00:09:21,000
information<font color="#CCCCCC"> and</font><font color="#E5E5E5"> etc everything that was</font>

208
00:09:19,200 --> 00:09:21,880
missing from the main<font color="#E5E5E5"> QAM transport</font>

209
00:09:21,000 --> 00:09:29,050
stream

210
00:09:21,880 --> 00:09:31,390
<font color="#CCCCCC">two bits in each packet will indicate if</font>

211
00:09:29,050 --> 00:09:36,910
the packet is scrambled with the even ki

212
00:09:31,390 --> 00:09:39,610
ladki<font color="#E5E5E5"> or not scrambled</font><font color="#CCCCCC"> at all the keys</font>

213
00:09:36,910 --> 00:09:41,170
<font color="#E5E5E5">changed short intervals</font><font color="#CCCCCC"> TV systems</font>

214
00:09:39,610 --> 00:09:44,110
typically<font color="#E5E5E5"> would change every five to</font>

215
00:09:41,170 --> 00:09:47,140
<font color="#E5E5E5">thirty</font><font color="#CCCCCC"> Seconds DC to</font><font color="#E5E5E5"> every 133</font>

216
00:09:44,110 --> 00:09:49,120
<font color="#E5E5E5">milliseconds or one second</font>

217
00:09:47,140 --> 00:09:51,430
the key used<font color="#E5E5E5"> for decryption alternates</font>

218
00:09:49,120 --> 00:09:53,260
between even and odd<font color="#CCCCCC"> the odd</font><font color="#E5E5E5"> key is in</font>

219
00:09:51,430 --> 00:09:55,000
use while the even he is updated and

220
00:09:53,260 --> 00:09:57,970
then<font color="#CCCCCC"> the even</font><font color="#E5E5E5"> he is in use while the</font><font color="#CCCCCC"> odd</font>

221
00:09:55,000 --> 00:09:59,500
<font color="#CCCCCC">he is updated an encrypted transport</font>

222
00:09:57,970 --> 00:10:01,720
stream is sent by the cable or satellite

223
00:09:59,500 --> 00:10:04,750
and<font color="#CCCCCC"> it's passed</font><font color="#E5E5E5"> through the</font><font color="#CCCCCC"> descrambler</font>

224
00:10:01,720 --> 00:10:06,160
<font color="#CCCCCC">in the ACP and the result is a</font><font color="#E5E5E5"> decrypted</font>

225
00:10:04,750 --> 00:10:09,160
transport stream that is played by the

226
00:10:06,160 --> 00:10:12,219
impact decoder<font color="#E5E5E5"> the descrambler uses a</font>

227
00:10:09,160 --> 00:10:15,670
working key<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a</font><font color="#CCCCCC"> 56 bit dusky</font><font color="#E5E5E5"> that</font>

228
00:10:12,220 --> 00:10:17,050
changes every<font color="#E5E5E5"> 133 milliseconds or in</font>

229
00:10:15,670 --> 00:10:20,380
some cases they haven't slowed down to

230
00:10:17,050 --> 00:10:22,359
changing every one second<font color="#E5E5E5"> this working</font>

231
00:10:20,380 --> 00:10:24,580
key is generated by encrypting the frame

232
00:10:22,360 --> 00:10:27,910
count from<font color="#E5E5E5"> ECM</font><font color="#CCCCCC"> 40 packets with the</font>

233
00:10:24,580 --> 00:10:30,730
program<font color="#E5E5E5"> key the program key again death</font>

234
00:10:27,910 --> 00:10:33,040
comes from the ECM 41 message and is

235
00:10:30,730 --> 00:10:34,780
encrypted with<font color="#CCCCCC"> a category key</font><font color="#E5E5E5"> the</font>

236
00:10:33,040 --> 00:10:36,790
program<font color="#CCCCCC"> key is unique to each channel</font>

237
00:10:34,780 --> 00:10:40,120
and it changes daily<font color="#E5E5E5"> or for every</font>

238
00:10:36,790 --> 00:10:43,089
pay-per-view event the category<font color="#E5E5E5"> key also</font>

239
00:10:40,120 --> 00:10:44,680
<font color="#CCCCCC">desk is shared by all the</font><font color="#E5E5E5"> set-top boxes</font>

240
00:10:43,090 --> 00:10:47,200
that are authorized for any channel from

241
00:10:44,680 --> 00:10:49,510
this provider<font color="#E5E5E5"> the category</font><font color="#CCCCCC"> key is sent</font>

242
00:10:47,200 --> 00:10:52,900
to each<font color="#CCCCCC"> set top box individually</font><font color="#E5E5E5"> inside</font>

243
00:10:49,510 --> 00:10:55,840
the<font color="#E5E5E5"> m95 message and this category</font><font color="#CCCCCC"> key</font>

244
00:10:52,900 --> 00:10:57,459
typically changes monthly<font color="#E5E5E5"> but many cable</font>

245
00:10:55,840 --> 00:10:59,230
operators change<font color="#CCCCCC"> keys much less</font>

246
00:10:57,460 --> 00:11:02,950
frequently<font color="#E5E5E5"> some of them using the same</font>

247
00:10:59,230 --> 00:11:05,980
key for years at a time to decrypt the

248
00:11:02,950 --> 00:11:09,130
<font color="#CCCCCC">emm in order</font><font color="#E5E5E5"> to get the category</font><font color="#CCCCCC"> key cds</font>

249
00:11:05,980 --> 00:11:11,860
or use each<font color="#CCCCCC"> set top box has a set of</font>

250
00:11:09,130 --> 00:11:12,820
<font color="#CCCCCC">56-bit that seed</font><font color="#E5E5E5"> keys inside of battery</font>

251
00:11:11,860 --> 00:11:14,050
background

252
00:11:12,820 --> 00:11:16,420
these are initialized during

253
00:11:14,050 --> 00:11:18,160
manufacturing for the lifetime of the

254
00:11:16,420 --> 00:11:21,699
<font color="#E5E5E5">set-top box these keys are used to</font>

255
00:11:18,160 --> 00:11:24,370
secure<font color="#CCCCCC"> a mms</font><font color="#E5E5E5"> so this forms a chain from</font>

256
00:11:21,700 --> 00:11:26,470
the<font color="#CCCCCC"> cds initialize drug manufacturing</font>

257
00:11:24,370 --> 00:11:28,240
<font color="#E5E5E5">and</font><font color="#CCCCCC"> ever-changing to the description of</font>

258
00:11:26,470 --> 00:11:34,060
the MPEG transport stream

259
00:11:28,240 --> 00:11:35,290
<font color="#CCCCCC">inside asset</font><font color="#E5E5E5"> satellite set-top box we</font>

260
00:11:34,060 --> 00:11:37,689
can see the main components of the

261
00:11:35,290 --> 00:11:39,520
system<font color="#CCCCCC"> the signal enters the tutor and</font>

262
00:11:37,690 --> 00:11:41,709
<font color="#CCCCCC">is passed through the demodulator</font><font color="#E5E5E5"> which</font>

263
00:11:39,520 --> 00:11:43,660
<font color="#E5E5E5">opens the</font><font color="#CCCCCC"> serial transport stream</font><font color="#E5E5E5"> this</font>

264
00:11:41,709 --> 00:11:46,479
transport stream passes through the<font color="#CCCCCC"> ACP</font>

265
00:11:43,660 --> 00:11:48,850
<font color="#E5E5E5">access control processor and is then</font>

266
00:11:46,480 --> 00:11:52,510
sent to the MPEG decoder<font color="#E5E5E5"> to put a video</font>

267
00:11:48,850 --> 00:11:54,580
signal to the TV<font color="#E5E5E5"> a</font><font color="#CCCCCC"> 60k microcontroller</font>

268
00:11:52,510 --> 00:11:56,800
acts as the<font color="#E5E5E5"> set-top box main controller</font>

269
00:11:54,580 --> 00:12:00,339
<font color="#CCCCCC">it</font><font color="#E5E5E5"> communicates with the MPEG decoder as</font>

270
00:11:56,800 --> 00:12:02,380
well as with the<font color="#E5E5E5"> acpi an SPI bus a</font>

271
00:12:00,339 --> 00:12:04,420
battery provides backup power<font color="#CCCCCC"> the ACP</font>

272
00:12:02,380 --> 00:12:07,480
<font color="#E5E5E5">will retain</font><font color="#CCCCCC"> round contents</font><font color="#E5E5E5"> even when the</font>

273
00:12:04,420 --> 00:12:09,579
<font color="#E5E5E5">set-top</font><font color="#CCCCCC"> box is unplugged</font><font color="#E5E5E5"> there's a TV</font>

274
00:12:07,480 --> 00:12:11,350
<font color="#CCCCCC">pass a lot near the power supply</font>

275
00:12:09,580 --> 00:12:13,209
this is an upgrade slot with a card edge

276
00:12:11,350 --> 00:12:16,420
connector to allow for security upgrades

277
00:12:13,209 --> 00:12:18,699
<font color="#E5E5E5">the system</font><font color="#CCCCCC"> States secure</font><font color="#E5E5E5"> so the TV</font><font color="#CCCCCC"> pass</font>

278
00:12:16,420 --> 00:12:21,459
<font color="#CCCCCC">lot was never used and the</font><font color="#E5E5E5"> newer set-top</font>

279
00:12:18,700 --> 00:12:23,709
boxes don't actually include<font color="#E5E5E5"> TV</font><font color="#CCCCCC"> past</font>

280
00:12:21,459 --> 00:12:26,199
<font color="#E5E5E5">slot inside</font><font color="#CCCCCC"> so at</font><font color="#E5E5E5"> this point it seems</font>

281
00:12:23,709 --> 00:12:31,089
quite unlikely that this TV<font color="#CCCCCC"> pass card</font>

282
00:12:26,200 --> 00:12:33,070
<font color="#E5E5E5">will ever actually be used inside a</font>

283
00:12:31,089 --> 00:12:35,170
cable set-top box it's very similar to a

284
00:12:33,070 --> 00:12:37,180
satellite set-top box<font color="#E5E5E5"> but the cable</font>

285
00:12:35,170 --> 00:12:39,579
<font color="#E5E5E5">boxes tend to be more tightly integrated</font>

286
00:12:37,180 --> 00:12:41,199
<font color="#E5E5E5">signal enters the tuner and passes</font>

287
00:12:39,579 --> 00:12:43,449
through<font color="#E5E5E5"> a broadcom</font><font color="#CCCCCC"> trip that handles</font>

288
00:12:41,200 --> 00:12:45,730
<font color="#CCCCCC">demodulation</font><font color="#E5E5E5"> and the same trip will also</font>

289
00:12:43,450 --> 00:12:49,240
handle MPEG decoding after the transport

290
00:12:45,730 --> 00:12:51,160
stream has been decrypted by the<font color="#CCCCCC"> AC pa6</font>

291
00:12:49,240 --> 00:12:54,130
<font color="#CCCCCC">tak microcontroller access the set-top</font>

292
00:12:51,160 --> 00:12:57,370
box<font color="#E5E5E5"> main controller again talking</font><font color="#CCCCCC"> vcp by</font>

293
00:12:54,130 --> 00:13:00,189
<font color="#CCCCCC">spi and a battery provides backup power</font>

294
00:12:57,370 --> 00:13:04,270
to the<font color="#CCCCCC"> ACP</font><font color="#E5E5E5"> and also to the</font><font color="#CCCCCC"> non-volatile</font>

295
00:13:00,190 --> 00:13:05,620
around<font color="#E5E5E5"> used by the main controller a TV</font>

296
00:13:04,270 --> 00:13:08,829
<font color="#CCCCCC">pass lot is underneath the main board</font>

297
00:13:05,620 --> 00:13:10,540
<font color="#CCCCCC">it's not visible in this photo</font><font color="#E5E5E5"> the cable</font>

298
00:13:08,829 --> 00:13:12,010
set-top boxes include a second<font color="#E5E5E5"> tuner</font>

299
00:13:10,540 --> 00:13:14,260
that's used to receive the outer<font color="#E5E5E5"> band</font>

300
00:13:12,010 --> 00:13:16,180
data<font color="#E5E5E5"> this</font><font color="#CCCCCC"> soda ban</font><font color="#E5E5E5"> tuner operates</font>

301
00:13:14,260 --> 00:13:16,600
independently of the main tuner and on a

302
00:13:16,180 --> 00:13:19,029
sec

303
00:13:16,600 --> 00:13:20,500
<font color="#CCCCCC">Fritzi frequency range and it's used to</font>

304
00:13:19,029 --> 00:13:22,029
provide a transport stream containing

305
00:13:20,500 --> 00:13:23,500
the system information with the program

306
00:13:22,029 --> 00:13:27,250
<font color="#E5E5E5">guide for more updates</font>

307
00:13:23,500 --> 00:13:31,390
<font color="#CCCCCC">mmm cetera</font>

308
00:13:27,250 --> 00:13:34,870
<font color="#E5E5E5">here we see the</font><font color="#CCCCCC"> ACP chip it's a</font><font color="#E5E5E5"> 100 pin</font>

309
00:13:31,390 --> 00:13:36,520
tqfp package from the markings we can

310
00:13:34,870 --> 00:13:38,590
see it's a custom<font color="#E5E5E5"> system-on-chip made</font>

311
00:13:36,520 --> 00:13:41,260
for general instrument corporation<font color="#CCCCCC"> gic</font>

312
00:13:38,590 --> 00:13:43,480
all the<font color="#CCCCCC"> description</font><font color="#E5E5E5"> is performed by the</font>

313
00:13:41,260 --> 00:13:46,750
<font color="#CCCCCC">ACP and all the Christian keys are kept</font>

314
00:13:43,480 --> 00:13:49,750
only within this<font color="#E5E5E5"> chip the newer</font><font color="#CCCCCC"> set-top</font>

315
00:13:46,750 --> 00:13:52,000
<font color="#CCCCCC">boxes use newer versions of the ACP i</font>

316
00:13:49,750 --> 00:13:54,520
<font color="#E5E5E5">studied the original</font><font color="#CCCCCC"> acp chip that seen</font>

317
00:13:52,000 --> 00:13:56,590
in this photo<font color="#E5E5E5"> as long as the set-top</font>

318
00:13:54,520 --> 00:13:59,740
boxes using this chip or actively used

319
00:13:56,590 --> 00:14:01,450
it remains relevant target<font color="#E5E5E5"> whether the</font>

320
00:13:59,740 --> 00:14:04,120
newer<font color="#CCCCCC"> ACPs include more advanced</font>

321
00:14:01,450 --> 00:14:06,370
security features or if they exist only

322
00:14:04,120 --> 00:14:12,880
for cost savings<font color="#E5E5E5"> you to shrinking the</font>

323
00:14:06,370 --> 00:14:14,770
<font color="#E5E5E5">die size</font><font color="#CCCCCC"> i don't really know some of</font><font color="#E5E5E5"> the</font>

324
00:14:12,880 --> 00:14:17,020
interesting<font color="#E5E5E5"> pins on the</font><font color="#CCCCCC"> ACP</font><font color="#E5E5E5"> are labeled</font>

325
00:14:14,770 --> 00:14:19,720
here in one is marked<font color="#E5E5E5"> the top left</font>

326
00:14:17,020 --> 00:14:21,579
corner of the chip<font color="#CCCCCC"> there's an SPI slave</font>

327
00:14:19,720 --> 00:14:23,470
controller on pins 125<font color="#E5E5E5"> used for</font>

328
00:14:21,580 --> 00:14:25,870
communication with the set-top box main

329
00:14:23,470 --> 00:14:27,970
controller<font color="#CCCCCC"> there's a battery backup</font><font color="#E5E5E5"> in</font>

330
00:14:25,870 --> 00:14:29,650
<font color="#E5E5E5">that's connected to a 3 volt battery to</font>

331
00:14:27,970 --> 00:14:31,090
keep<font color="#CCCCCC"> the round contents of the ACP</font>

332
00:14:29,650 --> 00:14:33,430
intact at all times

333
00:14:31,090 --> 00:14:36,190
there's a<font color="#E5E5E5"> stream transfer stream input</font>

334
00:14:33,430 --> 00:14:38,410
on pins 88<font color="#E5E5E5"> 92 which receives the data</font>

335
00:14:36,190 --> 00:14:40,750
from the demodulator<font color="#E5E5E5"> and there's a</font>

336
00:14:38,410 --> 00:14:42,969
serial transport stream output on pins

337
00:14:40,750 --> 00:14:45,310
<font color="#CCCCCC">28 233 which sends the decrypted</font>

338
00:14:42,970 --> 00:14:51,640
transport stream from the<font color="#E5E5E5"> mpeg-2 the</font>

339
00:14:45,310 --> 00:14:53,680
impact decoder<font color="#E5E5E5"> to be output to the TV</font>

340
00:14:51,640 --> 00:14:56,470
<font color="#E5E5E5">at one point</font><font color="#CCCCCC"> I had written</font><font color="#E5E5E5"> software for</font>

341
00:14:53,680 --> 00:14:58,660
<font color="#E5E5E5">an avr32 device not the one that shown</font>

342
00:14:56,470 --> 00:15:00,280
<font color="#E5E5E5">here that has a synchronous serial</font>

343
00:14:58,660 --> 00:15:02,140
peripheral<font color="#E5E5E5"> that</font><font color="#CCCCCC"> supports sending</font><font color="#E5E5E5"> and</font>

344
00:15:00,280 --> 00:15:04,390
receiving<font color="#E5E5E5"> data</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> 27</font><font color="#CCCCCC"> megabit rate of</font>

345
00:15:02,140 --> 00:15:07,810
the transport stream my avr32

346
00:15:04,390 --> 00:15:09,550
implementation<font color="#E5E5E5"> turned out a bit ugly but</font>

347
00:15:07,810 --> 00:15:11,770
rather than cleaning it up<font color="#CCCCCC"> i was</font><font color="#E5E5E5"> able to</font>

348
00:15:09,550 --> 00:15:14,109
use it as it was it had some limitations

349
00:15:11,770 --> 00:15:16,720
like only accepting 64 kilobytes of data

350
00:15:14,110 --> 00:15:19,480
for replay logging which was just barely

351
00:15:16,720 --> 00:15:21,220
good enough for my studies<font color="#CCCCCC"> what the</font>

352
00:15:19,480 --> 00:15:23,170
transport stream logging<font color="#CCCCCC"> inserted show</font>

353
00:15:21,220 --> 00:15:25,930
me was that the transport stream passes

354
00:15:23,170 --> 00:15:28,719
through the<font color="#CCCCCC"> ACP with selected pigs being</font>

355
00:15:25,930 --> 00:15:30,729
<font color="#E5E5E5">decrypted and then the output is the</font>

356
00:15:28,720 --> 00:15:34,240
full transport stream<font color="#E5E5E5"> by the selected</font>

357
00:15:30,730 --> 00:15:36,490
program has been decrypted the avr32

358
00:15:34,240 --> 00:15:39,250
<font color="#CCCCCC">logging</font><font color="#E5E5E5"> interface had rather limited use</font>

359
00:15:36,490 --> 00:15:42,190
for me<font color="#E5E5E5"> later on when I did more thorough</font>

360
00:15:39,250 --> 00:15:43,660
research<font color="#CCCCCC"> i did so using an ACP that I'd</font>

361
00:15:42,190 --> 00:15:45,520
removed<font color="#E5E5E5"> from the box and I put on a</font>

362
00:15:43,660 --> 00:15:47,469
breakout board and then<font color="#CCCCCC"> I</font><font color="#E5E5E5"> can control</font>

363
00:15:45,520 --> 00:15:50,260
the clock<font color="#E5E5E5"> and at that point it was much</font>

364
00:15:47,470 --> 00:15:51,670
easier to use<font color="#E5E5E5"> an</font><font color="#CCCCCC"> ex</font><font color="#E5E5E5"> mega AVR platform to</font>

365
00:15:50,260 --> 00:15:53,110
send and receive the transport stream

366
00:15:51,670 --> 00:15:56,170
<font color="#E5E5E5">through the</font><font color="#CCCCCC"> ACP at a much lower</font><font color="#E5E5E5"> bitrate</font>

367
00:15:53,110 --> 00:15:58,690
<font color="#E5E5E5">shown here is the</font><font color="#CCCCCC"> xmega platform</font><font color="#E5E5E5"> i</font>

368
00:15:56,170 --> 00:16:03,849
settled on using for<font color="#E5E5E5"> spi and also the</font>

369
00:15:58,690 --> 00:16:05,560
<font color="#E5E5E5">transport stream interfacing</font><font color="#CCCCCC"> to honor</font>

370
00:16:03,850 --> 00:16:07,600
<font color="#E5E5E5">the data path between the set-top box</font>

371
00:16:05,560 --> 00:16:09,880
main controller and the<font color="#CCCCCC"> ACP on the SPI</font>

372
00:16:07,600 --> 00:16:14,230
bus<font color="#CCCCCC"> i use the X</font><font color="#E5E5E5"> mega-development</font><font color="#CCCCCC"> board</font>

373
00:16:09,880 --> 00:16:16,540
to<font color="#E5E5E5"> spi airports were acted as slave with</font>

374
00:16:14,230 --> 00:16:18,970
the master<font color="#E5E5E5"> or slave in signal connected</font>

375
00:16:16,540 --> 00:16:20,770
to one and<font color="#CCCCCC"> master enslave out signal</font>

376
00:16:18,970 --> 00:16:23,170
connected to the master<font color="#E5E5E5"> out slave in</font>

377
00:16:20,770 --> 00:16:25,030
input of the second<font color="#CCCCCC"> port so</font><font color="#E5E5E5"> from one</font>

378
00:16:23,170 --> 00:16:26,740
port<font color="#E5E5E5"> is sent by the set-top box</font>

379
00:16:25,030 --> 00:16:30,520
controller received from the other

380
00:16:26,740 --> 00:16:32,470
<font color="#E5E5E5">report it receives bites from the</font><font color="#CCCCCC"> ACP</font><font color="#E5E5E5"> in</font>

381
00:16:30,520 --> 00:16:34,810
case<font color="#CCCCCC"> i want to talk directly to the ACP</font>

382
00:16:32,470 --> 00:16:36,460
or the set-top box main controller<font color="#E5E5E5"> it's</font>

383
00:16:34,810 --> 00:16:38,619
<font color="#E5E5E5">only necessary to connect both the</font>

384
00:16:36,460 --> 00:16:41,290
<font color="#CCCCCC">mausoleum iso signals on one of the spi</font>

385
00:16:38,620 --> 00:16:43,690
interfaces<font color="#E5E5E5"> by holding the main</font>

386
00:16:41,290 --> 00:16:45,670
controller<font color="#CCCCCC"> and</font><font color="#E5E5E5"> reset my ex</font><font color="#CCCCCC"> may go was</font>

387
00:16:43,690 --> 00:16:48,580
able to act as the<font color="#CCCCCC"> spi master and then</font>

388
00:16:45,670 --> 00:16:49,750
talk to the<font color="#CCCCCC"> ACP</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> had 12 works for</font>

389
00:16:48,580 --> 00:16:51,700
passively monitoring the<font color="#CCCCCC"> FBI</font>

390
00:16:49,750 --> 00:16:53,710
<font color="#CCCCCC">Communications in the set-top box and</font>

391
00:16:51,700 --> 00:16:55,240
can also act as the<font color="#CCCCCC"> spi master for</font>

392
00:16:53,710 --> 00:16:57,170
<font color="#CCCCCC">integrated interrogating the</font><font color="#E5E5E5"> chip</font>

393
00:16:55,240 --> 00:17:01,700
<font color="#E5E5E5">directly</font>

394
00:16:57,170 --> 00:17:03,680
<font color="#E5E5E5">by logging the SPI bus between the main</font>

395
00:17:01,700 --> 00:17:05,270
controller the<font color="#CCCCCC"> ACP we see that</font>

396
00:17:03,680 --> 00:17:08,569
information about the current access

397
00:17:05,270 --> 00:17:12,859
levels<font color="#E5E5E5"> sent from the</font><font color="#CCCCCC"> ACP</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> ACP also</font>

398
00:17:08,569 --> 00:17:14,839
receives<font color="#E5E5E5"> mms via the SPI bus</font><font color="#CCCCCC"> DMMs</font><font color="#E5E5E5"> have</font>

399
00:17:12,859 --> 00:17:17,089
been filtered by the unit address number

400
00:17:14,839 --> 00:17:19,250
<font color="#CCCCCC">or</font><font color="#E5E5E5"> the set-top box</font><font color="#CCCCCC"> serial</font><font color="#E5E5E5"> number so the</font>

401
00:17:17,089 --> 00:17:20,659
<font color="#CCCCCC">ACP</font><font color="#E5E5E5"> only receives messages that are</font>

402
00:17:19,250 --> 00:17:23,569
intended for that specific unit

403
00:17:20,660 --> 00:17:25,819
commander<font color="#CCCCCC"> 04 include the current</font>

404
00:17:23,569 --> 00:17:28,040
category key box and key selection use

405
00:17:25,819 --> 00:17:31,190
commands<font color="#E5E5E5"> or five includes the unit</font>

406
00:17:28,040 --> 00:17:32,659
address number<font color="#E5E5E5"> command 13 returns the</font>

407
00:17:31,190 --> 00:17:36,320
<font color="#CCCCCC">authorized subscription</font><font color="#E5E5E5"> tears for this</font>

408
00:17:32,660 --> 00:17:37,790
unit<font color="#CCCCCC"> command 787</font><font color="#E5E5E5"> provide information</font>

409
00:17:36,320 --> 00:17:41,689
about the channel being currently

410
00:17:37,790 --> 00:17:43,520
decrypted additionally by the spi

411
00:17:41,690 --> 00:17:45,470
interface<font color="#E5E5E5"> the set-top box main</font>

412
00:17:43,520 --> 00:17:49,429
controller tells the<font color="#CCCCCC"> ACP which pins to</font>

413
00:17:45,470 --> 00:17:51,799
decrypt and which is the ECM<font color="#CCCCCC"> pit</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> ACP</font>

414
00:17:49,429 --> 00:17:53,510
doesn't send any keys on the bus and it

415
00:17:51,799 --> 00:17:56,809
only receives category keys that are

416
00:17:53,510 --> 00:17:58,070
encrypted<font color="#E5E5E5"> with in</font><font color="#CCCCCC"> ems by the spi</font><font color="#E5E5E5"> so all</font>

417
00:17:56,809 --> 00:18:00,410
of the really interesting data is

418
00:17:58,070 --> 00:18:02,389
contained within the<font color="#CCCCCC"> ACP chip itself and</font>

419
00:18:00,410 --> 00:18:07,940
<font color="#CCCCCC">its never sent out on any kind of</font><font color="#E5E5E5"> a bus</font>

420
00:18:02,390 --> 00:18:10,700
so next I started invasive study of the

421
00:18:07,940 --> 00:18:12,049
<font color="#E5E5E5">chip studying it under a microscope</font><font color="#CCCCCC"> the</font>

422
00:18:10,700 --> 00:18:13,970
<font color="#E5E5E5">cost of microscopes can range from</font>

423
00:18:12,049 --> 00:18:16,190
hundreds of dollars to tens of thousands

424
00:18:13,970 --> 00:18:17,630
of dollars<font color="#E5E5E5"> or even higher for things</font>

425
00:18:16,190 --> 00:18:19,669
like electron microscopes<font color="#E5E5E5"> or other</font>

426
00:18:17,630 --> 00:18:22,160
specialized equipment<font color="#CCCCCC"> so i have a couple</font>

427
00:18:19,669 --> 00:18:24,740
of microscopes that<font color="#CCCCCC"> i use this one is</font>

428
00:18:22,160 --> 00:18:26,510
the<font color="#E5E5E5"> mandatory</font><font color="#CCCCCC"> ofs</font><font color="#E5E5E5"> 70 microscope these</font>

429
00:18:24,740 --> 00:18:28,100
<font color="#CCCCCC">meter tuyo are often used for micro</font>

430
00:18:26,510 --> 00:18:30,710
probing but you can also use it for

431
00:18:28,100 --> 00:18:33,020
other uses for this project<font color="#CCCCCC"> I didn't do</font>

432
00:18:30,710 --> 00:18:35,540
any<font color="#CCCCCC"> micro probing</font><font color="#E5E5E5"> but I</font><font color="#CCCCCC"> use this</font>

433
00:18:33,020 --> 00:18:37,340
microscope because<font color="#CCCCCC"> it was what i had for</font>

434
00:18:35,540 --> 00:18:39,620
<font color="#E5E5E5">studying this kind of technology</font><font color="#CCCCCC"> you</font>

435
00:18:37,340 --> 00:18:40,699
<font color="#E5E5E5">could use even more basic equipment</font><font color="#CCCCCC"> but</font>

436
00:18:39,620 --> 00:18:42,110
of<font color="#E5E5E5"> course if you have the higher</font><font color="#CCCCCC"> and</font>

437
00:18:40,700 --> 00:18:46,309
<font color="#E5E5E5">equipment it's a lot nicer to work with</font>

438
00:18:42,110 --> 00:18:48,559
another microscope<font color="#CCCCCC"> i use as ice axe</font>

439
00:18:46,309 --> 00:18:50,270
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> on this microscope is designed</font>

440
00:18:48,559 --> 00:18:52,139
for inspecting wafers it has a really

441
00:18:50,270 --> 00:18:54,240
good optical quality

442
00:18:52,140 --> 00:18:56,070
<font color="#CCCCCC">I said that more basic equipment could</font>

443
00:18:54,240 --> 00:18:57,540
be<font color="#CCCCCC"> using its true but when you get into</font>

444
00:18:56,070 --> 00:18:59,129
this kind of thing you might find

445
00:18:57,540 --> 00:19:02,100
yourself again and again<font color="#CCCCCC"> investing more</font>

446
00:18:59,130 --> 00:19:03,960
equipment<font color="#CCCCCC"> 50 $10,000 in this setup</font>

447
00:19:02,100 --> 00:19:05,909
including the microscope<font color="#E5E5E5"> in the camera</font>

448
00:19:03,960 --> 00:19:11,550
and the scanning stage and other parts

449
00:19:05,910 --> 00:19:13,020
to look at the chip under the microscope

450
00:19:11,550 --> 00:19:16,500
requires that the<font color="#E5E5E5"> chip is encapsulated</font>

451
00:19:13,020 --> 00:19:18,510
<font color="#E5E5E5">fuming nitric acid is used for this</font>

452
00:19:16,500 --> 00:19:20,850
the chip is<font color="#E5E5E5"> immersed in heated red</font>

453
00:19:18,510 --> 00:19:23,460
fuming nitric acid which reacts with<font color="#CCCCCC"> the</font>

454
00:19:20,850 --> 00:19:25,740
plastic packaging and removes removes it

455
00:19:23,460 --> 00:19:27,570
the chip is then rinsed in acetone and

456
00:19:25,740 --> 00:19:29,910
<font color="#CCCCCC">cleaned with isopropyl alcohol in an</font>

457
00:19:27,570 --> 00:19:32,460
ultrasonic<font color="#CCCCCC"> bath which leaves that</font><font color="#E5E5E5"> I bear</font>

458
00:19:29,910 --> 00:19:34,260
and clean the nitric acid is quite

459
00:19:32,460 --> 00:19:36,210
aggressive and it's important to handle

460
00:19:34,260 --> 00:19:38,550
it carefully<font color="#CCCCCC"> but</font><font color="#E5E5E5"> the process is really</font>

461
00:19:36,210 --> 00:19:39,780
straightforward<font color="#CCCCCC"> most people probably</font>

462
00:19:38,550 --> 00:19:42,149
wouldn't want to do this in their home

463
00:19:39,780 --> 00:19:47,910
<font color="#CCCCCC">so you should go out to the garage and</font>

464
00:19:42,150 --> 00:19:49,830
use your<font color="#CCCCCC"> head there after</font><font color="#E5E5E5"> the</font>

465
00:19:47,910 --> 00:19:51,480
calculation<font color="#E5E5E5"> the bear chips are left with</font>

466
00:19:49,830 --> 00:19:53,010
bonding wires attached to them

467
00:19:51,480 --> 00:19:54,120
so these wires will be plucked off using

468
00:19:53,010 --> 00:19:57,780
tweezers to get them out of the way

469
00:19:54,120 --> 00:19:59,879
already in this photo we can see some of

470
00:19:57,780 --> 00:20:01,560
the larger structures on the chip<font color="#E5E5E5"> half</font>

471
00:19:59,880 --> 00:20:02,940
of<font color="#E5E5E5"> its covered with the middle plane and</font>

472
00:20:01,560 --> 00:20:10,050
the other half shows some kind of

473
00:20:02,940 --> 00:20:11,640
visible circuitry this is an image of

474
00:20:10,050 --> 00:20:13,320
the chip under<font color="#E5E5E5"> the microscope</font>

475
00:20:11,640 --> 00:20:14,850
it's been stitched together from several

476
00:20:13,320 --> 00:20:17,879
smaller images to give an overview of

477
00:20:14,850 --> 00:20:20,610
the chip<font color="#E5E5E5"> looking at the capsulated ship</font>

478
00:20:17,880 --> 00:20:22,770
<font color="#E5E5E5">we see the bond pads around the outside</font>

479
00:20:20,610 --> 00:20:24,990
<font color="#CCCCCC">a metal plane covering the top part of</font>

480
00:20:22,770 --> 00:20:26,580
the<font color="#E5E5E5"> chip and wires on the bottom of the</font>

481
00:20:24,990 --> 00:20:29,100
<font color="#E5E5E5">chip</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> spaghetti logic running all</font>

482
00:20:26,580 --> 00:20:30,629
over the place with a couple of

483
00:20:29,100 --> 00:20:31,560
structures that<font color="#CCCCCC"> look</font><font color="#E5E5E5"> like they could be</font>

484
00:20:30,630 --> 00:20:34,320
a type of memory

485
00:20:31,560 --> 00:20:35,639
there's a lot still hidden from us to

486
00:20:34,320 --> 00:20:40,590
see more of the chip<font color="#CCCCCC"> it will be</font>

487
00:20:35,640 --> 00:20:42,840
necessary to<font color="#E5E5E5"> dealer it to dealer the</font>

488
00:20:40,590 --> 00:20:45,629
chip<font color="#CCCCCC"> I used hydrofluoric acid to form a</font>

489
00:20:42,840 --> 00:20:47,580
<font color="#CCCCCC">wedge i</font><font color="#E5E5E5"> use the wink rust stain remover</font>

490
00:20:45,630 --> 00:20:49,170
product<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> available in hardware</font>

491
00:20:47,580 --> 00:20:51,689
stores all over the USA

492
00:20:49,170 --> 00:20:55,440
it's a<font color="#E5E5E5"> dilute hf solution that works</font>

493
00:20:51,690 --> 00:20:56,970
really well for<font color="#E5E5E5"> layering</font><font color="#CCCCCC"> i sees I put a</font>

494
00:20:55,440 --> 00:20:59,220
small amount of the<font color="#E5E5E5"> wink liquid in a</font>

495
00:20:56,970 --> 00:21:01,770
beaker and heated on the hot plate<font color="#E5E5E5"> then</font>

496
00:20:59,220 --> 00:21:03,780
<font color="#CCCCCC">I</font><font color="#E5E5E5"> dropped the D capsulated</font><font color="#CCCCCC"> I in using a</font>

497
00:21:01,770 --> 00:21:05,220
pipette<font color="#CCCCCC"> I agitate the liquid to disturb</font>

498
00:21:03,780 --> 00:21:05,730
the bubbles that form on the surface of

499
00:21:05,220 --> 00:21:07,740
the chip

500
00:21:05,730 --> 00:21:10,920
<font color="#E5E5E5">so the acid can actually</font><font color="#CCCCCC"> chip</font><font color="#E5E5E5"> more</font>

501
00:21:07,740 --> 00:21:12,480
evenly<font color="#E5E5E5"> the actual result isn't perfect</font>

502
00:21:10,920 --> 00:21:14,160
some parts of the<font color="#E5E5E5"> chip will be</font><font color="#CCCCCC"> H deeper</font>

503
00:21:12,480 --> 00:21:16,980
than other parts<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I've gotten quite</font>

504
00:21:14,160 --> 00:21:17,940
useful results using this technique<font color="#CCCCCC"> you</font>

505
00:21:16,980 --> 00:21:20,160
really don't want to breathe in these

506
00:21:17,940 --> 00:21:26,910
fumes so do this in<font color="#CCCCCC"> the future in your</font>

507
00:21:20,160 --> 00:21:28,530
garage also after a short time immersed

508
00:21:26,910 --> 00:21:30,150
in the<font color="#CCCCCC"> heated weak solution the chip was</font>

509
00:21:28,530 --> 00:21:32,580
rinsed and put back into the microscope

510
00:21:30,150 --> 00:21:34,770
now the top<font color="#CCCCCC"> metal plate has been removed</font>

511
00:21:32,580 --> 00:21:37,439
so we can see what's below<font color="#E5E5E5"> there are</font>

512
00:21:34,770 --> 00:21:38,820
some visual effects that we start to see

513
00:21:37,440 --> 00:21:40,440
in the photo from the etching being a

514
00:21:38,820 --> 00:21:42,960
little bit uneven but overall the

515
00:21:40,440 --> 00:21:46,560
<font color="#E5E5E5">dealership looks quite good and is able</font>

516
00:21:42,960 --> 00:21:49,200
to start studying it at the<font color="#E5E5E5"> top left the</font>

517
00:21:46,560 --> 00:21:51,270
<font color="#E5E5E5">tall rectangles around the four blocks</font>

518
00:21:49,200 --> 00:21:52,680
<font color="#CCCCCC">at the top right or wrong and then</font>

519
00:21:51,270 --> 00:21:57,360
there's logic that tie these into the

520
00:21:52,680 --> 00:21:59,070
logic area below<font color="#CCCCCC"> i was interested in</font>

521
00:21:57,360 --> 00:22:01,050
finding how the bits were encoded<font color="#E5E5E5"> in</font>

522
00:21:59,070 --> 00:22:03,210
wrong<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> continued</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> layering the</font>

523
00:22:01,050 --> 00:22:05,310
chip<font color="#CCCCCC"> this was another dip in the link</font>

524
00:22:03,210 --> 00:22:07,560
<font color="#E5E5E5">and another metal layer has been removed</font>

525
00:22:05,310 --> 00:22:09,990
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> the robber not visible yet so i</font>

526
00:22:07,560 --> 00:22:11,550
<font color="#CCCCCC">continued the layering process</font><font color="#E5E5E5"> at this</font>

527
00:22:09,990 --> 00:22:13,290
<font color="#E5E5E5">point we're starting to see more of the</font>

528
00:22:11,550 --> 00:22:19,050
visual effects from the uneven<font color="#E5E5E5"> matching</font>

529
00:22:13,290 --> 00:22:20,370
<font color="#E5E5E5">but it's still not too bad</font><font color="#CCCCCC"> after a third</font>

530
00:22:19,050 --> 00:22:22,980
dip in the<font color="#CCCCCC"> link</font><font color="#E5E5E5"> more metal has been</font>

531
00:22:20,370 --> 00:22:25,350
removed<font color="#CCCCCC"> at</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> the layering is</font>

532
00:22:22,980 --> 00:22:26,910
becoming more and more uneven<font color="#E5E5E5"> we can see</font>

533
00:22:25,350 --> 00:22:29,159
the wrong blocks have been half edge to

534
00:22:26,910 --> 00:22:31,410
a lower layer while half of the upper

535
00:22:29,160 --> 00:22:32,940
<font color="#E5E5E5">layers so remaining the wet etching</font>

536
00:22:31,410 --> 00:22:36,300
process can be quite difficult to

537
00:22:32,940 --> 00:22:37,860
perform<font color="#E5E5E5"> completely consistently without</font>

538
00:22:36,300 --> 00:22:39,720
adding additional steps such as

539
00:22:37,860 --> 00:22:41,070
polishing<font color="#E5E5E5"> and at the time</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> did this</font>

540
00:22:39,720 --> 00:22:42,630
project<font color="#CCCCCC"> i didn't have the</font><font color="#E5E5E5"> polisher</font>

541
00:22:41,070 --> 00:22:45,840
available so I was relying only on the

542
00:22:42,630 --> 00:22:48,210
wedge some of the areas of the<font color="#E5E5E5"> wrong are</font>

543
00:22:45,840 --> 00:22:50,459
now showing visible bits<font color="#CCCCCC"> the other areas</font>

544
00:22:48,210 --> 00:22:51,930
of<font color="#CCCCCC"> annette's deeply enough so I continue</font>

545
00:22:50,460 --> 00:22:55,020
to<font color="#CCCCCC"> add further to</font><font color="#E5E5E5"> try and get a clean</font>

546
00:22:51,930 --> 00:22:56,160
rom

547
00:22:55,020 --> 00:22:57,990
<font color="#E5E5E5">we can see the wrong</font><font color="#CCCCCC"> but it's quite</font>

548
00:22:56,160 --> 00:23:00,270
<font color="#E5E5E5">clearly now</font><font color="#CCCCCC"> there are arranged in rows</font>

549
00:22:57,990 --> 00:23:01,950
and columns and in this image<font color="#E5E5E5"> if a black</font>

550
00:23:00,270 --> 00:23:05,580
dog is visible that indicates that the

551
00:23:01,950 --> 00:23:06,990
<font color="#CCCCCC">baby</font><font color="#E5E5E5"> is a</font><font color="#CCCCCC"> one image quality is important</font>

552
00:23:05,580 --> 00:23:08,370
<font color="#CCCCCC">the better</font><font color="#E5E5E5"> the photographs the more</font>

553
00:23:06,990 --> 00:23:10,290
consistently the bits will be visible

554
00:23:08,370 --> 00:23:12,780
<font color="#CCCCCC">but</font><font color="#E5E5E5"> it doesn't have to be really perfect</font>

555
00:23:10,290 --> 00:23:14,879
<font color="#CCCCCC">you can do some image processing on it</font>

556
00:23:12,780 --> 00:23:16,920
<font color="#E5E5E5">you can even repeat the process</font><font color="#CCCCCC"> on</font>

557
00:23:14,880 --> 00:23:19,140
multiple chips<font color="#E5E5E5"> you layer them and</font>

558
00:23:16,920 --> 00:23:21,180
photograph them and at some point you'll

559
00:23:19,140 --> 00:23:24,240
be able to have the entire rom<font color="#E5E5E5"> clean and</font>

560
00:23:21,180 --> 00:23:26,400
consistently visible with the visible

561
00:23:24,240 --> 00:23:28,080
<font color="#CCCCCC">bit exposed and photographs taken the</font>

562
00:23:26,400 --> 00:23:30,450
bits can be extracted using<font color="#E5E5E5"> software</font>

563
00:23:28,080 --> 00:23:33,540
image analysis tool<font color="#E5E5E5"> or the</font><font color="#CCCCCC"> bits could</font><font color="#E5E5E5"> be</font>

564
00:23:30,450 --> 00:23:36,960
extracted manually<font color="#E5E5E5"> the wrong here is 32</font>

565
00:23:33,540 --> 00:23:39,389
kilobytes<font color="#E5E5E5"> or over 260,000 bits so manual</font>

566
00:23:36,960 --> 00:23:41,040
extraction<font color="#CCCCCC"> will be a bit labor of X</font><font color="#E5E5E5"> a</font>

567
00:23:39,390 --> 00:23:43,830
bit<font color="#E5E5E5"> labor-intensive but it isn't</font>

568
00:23:41,040 --> 00:23:47,639
impossible<font color="#CCCCCC"> a software tool</font><font color="#E5E5E5"> is more</font>

569
00:23:43,830 --> 00:23:49,590
efficient<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I wrote some software to</font>

570
00:23:47,640 --> 00:23:51,600
analyze the images and identify the 10

571
00:23:49,590 --> 00:23:54,840
bits<font color="#E5E5E5"> there are bits marked with</font><font color="#CCCCCC"> a yellow</font>

572
00:23:51,600 --> 00:23:56,580
<font color="#CCCCCC">box 40 bits or blue box</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> one bits i</font>

573
00:23:54,840 --> 00:23:58,139
use<font color="#CCCCCC"> a software to analyze the image and</font>

574
00:23:56,580 --> 00:24:00,750
then<font color="#CCCCCC"> i can quickly</font><font color="#E5E5E5"> review the results</font>

575
00:23:58,140 --> 00:24:05,130
manually and identify any areas that<font color="#CCCCCC"> i</font>

576
00:24:00,750 --> 00:24:06,960
can see after extracting the bits from

577
00:24:05,130 --> 00:24:09,030
the photographs<font color="#E5E5E5"> i have a binary version</font>

578
00:24:06,960 --> 00:24:10,650
of the<font color="#CCCCCC"> rom</font><font color="#E5E5E5"> data</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a visual</font>

579
00:24:09,030 --> 00:24:13,080
representation of the<font color="#E5E5E5"> bits extracted</font>

580
00:24:10,650 --> 00:24:14,790
from this piece of wrong<font color="#CCCCCC"> with black box</font>

581
00:24:13,080 --> 00:24:19,230
to signify<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> bits and the white</font><font color="#CCCCCC"> boxes</font>

582
00:24:14,790 --> 00:24:21,720
<font color="#E5E5E5">signify</font><font color="#CCCCCC"> 0 bits in this image</font><font color="#E5E5E5"> I've</font>

583
00:24:19,230 --> 00:24:23,820
overlaid the extracted bottom 13 rows of

584
00:24:21,720 --> 00:24:25,560
bits over the photograph<font color="#E5E5E5"> you can see</font>

585
00:24:23,820 --> 00:24:27,720
some visual patterns inside this also

586
00:24:25,560 --> 00:24:29,520
and these visual patterns are a good

587
00:24:27,720 --> 00:24:30,540
indicator that this<font color="#CCCCCC"> rom</font><font color="#E5E5E5"> is probably not</font>

588
00:24:29,520 --> 00:24:34,980
scrambled

589
00:24:30,540 --> 00:24:37,139
this image<font color="#E5E5E5"> shows the end of the wrong</font>

590
00:24:34,980 --> 00:24:39,510
<font color="#CCCCCC">where you can see a pattern covering</font>

591
00:24:37,140 --> 00:24:41,160
most of the image<font color="#CCCCCC"> due to a repeated</font>

592
00:24:39,510 --> 00:24:43,620
pattern of filler<font color="#CCCCCC"> bites that occupy</font>

593
00:24:41,160 --> 00:24:45,030
unused space at the end of the wrong at

594
00:24:43,620 --> 00:24:46,080
the very end of<font color="#CCCCCC"> rom the pattern is</font>

595
00:24:45,030 --> 00:24:47,670
interrupted

596
00:24:46,080 --> 00:24:49,530
this is where the vectors table exist at

597
00:24:47,670 --> 00:24:51,420
the top<font color="#E5E5E5"> end of memory indicating the</font>

598
00:24:49,530 --> 00:24:54,690
<font color="#CCCCCC">reset</font><font color="#E5E5E5"> address the addresses of interrupt</font>

599
00:24:51,420 --> 00:24:56,730
handlers<font color="#E5E5E5"> the</font><font color="#CCCCCC"> rom has unused space</font><font color="#E5E5E5"> filler</font>

600
00:24:54,690 --> 00:25:01,270
<font color="#CCCCCC">rights at the end and the vectors table</font>

601
00:24:56,730 --> 00:25:03,190
at address is<font color="#E5E5E5"> ff6 through</font><font color="#CCCCCC"> FFF</font>

602
00:25:01,270 --> 00:25:04,870
<font color="#E5E5E5">after extracting the bits and decoding</font>

603
00:25:03,190 --> 00:25:05,980
them<font color="#CCCCCC"> into</font><font color="#E5E5E5"> bites the hex dump can be</font>

604
00:25:04,870 --> 00:25:09,520
studied

605
00:25:05,980 --> 00:25:11,410
<font color="#CCCCCC">there's a copyright 1997 chcc asking</font>

606
00:25:09,520 --> 00:25:12,879
string<font color="#E5E5E5"> around which is helpful to</font>

607
00:25:11,410 --> 00:25:15,880
identify<font color="#E5E5E5"> with ron has been decoded</font>

608
00:25:12,880 --> 00:25:17,260
correctly<font color="#E5E5E5"> if you can read the</font><font color="#CCCCCC"> ascii text</font>

609
00:25:15,880 --> 00:25:20,110
then surely the bits are in the correct

610
00:25:17,260 --> 00:25:21,370
order<font color="#E5E5E5"> the decoding in this case</font><font color="#CCCCCC"> is just</font>

611
00:25:20,110 --> 00:25:23,320
a matter of<font color="#E5E5E5"> organizing the bits and</font>

612
00:25:21,370 --> 00:25:24,969
<font color="#E5E5E5">bytes it's quite straightforward there</font>

613
00:25:23,320 --> 00:25:29,889
was no scrambling or anything else that

614
00:25:24,970 --> 00:25:31,180
was complex with<font color="#E5E5E5"> the wrong contents</font>

615
00:25:29,890 --> 00:25:33,370
extracted the software can be

616
00:25:31,180 --> 00:25:34,540
disassembled and analyzed the first step

617
00:25:33,370 --> 00:25:37,479
was to identify the<font color="#CCCCCC"> cpu architecture</font>

618
00:25:34,540 --> 00:25:40,720
<font color="#CCCCCC">studying the binary dump it appeared to</font>

619
00:25:37,480 --> 00:25:42,940
<font color="#E5E5E5">be an 8-bit CPU</font><font color="#CCCCCC"> but wasn't 8051 or 605</font>

620
00:25:40,720 --> 00:25:43,960
<font color="#E5E5E5">or any other of the processor types</font><font color="#CCCCCC"> i</font>

621
00:25:42,940 --> 00:25:46,690
tried first

622
00:25:43,960 --> 00:25:49,240
eventually<font color="#CCCCCC"> i tried disassembling a 6502</font>

623
00:25:46,690 --> 00:25:50,770
in the<font color="#E5E5E5"> code made sense later</font><font color="#CCCCCC"> I'd</font>

624
00:25:49,240 --> 00:25:52,270
<font color="#CCCCCC">remember that i looked at a previous</font>

625
00:25:50,770 --> 00:25:54,580
version of the<font color="#E5E5E5"> access controller from</font>

626
00:25:52,270 --> 00:25:56,770
<font color="#E5E5E5">the same manufacturer which was used in</font>

627
00:25:54,580 --> 00:25:59,199
another system video<font color="#E5E5E5"> site</font><font color="#CCCCCC"> for 2</font><font color="#E5E5E5"> plus an</font>

628
00:25:56,770 --> 00:26:01,750
ancestor of digits safer on the older

629
00:25:59,200 --> 00:26:05,770
chip was a copyright notice from<font color="#CCCCCC"> wdc</font>

630
00:26:01,750 --> 00:26:07,840
<font color="#CCCCCC">licenses the 6502 core</font><font color="#E5E5E5"> IP it was visit</font>

631
00:26:05,770 --> 00:26:09,790
visible directly on the<font color="#CCCCCC"> chip died under</font>

632
00:26:07,840 --> 00:26:11,740
<font color="#E5E5E5">the microscope</font><font color="#CCCCCC"> so this would have been a</font>

633
00:26:09,790 --> 00:26:14,770
great clue for the<font color="#CCCCCC"> cpu architecture</font><font color="#E5E5E5"> if</font>

634
00:26:11,740 --> 00:26:17,410
<font color="#CCCCCC">I'd actually noticed it earlier for</font>

635
00:26:14,770 --> 00:26:19,060
<font color="#CCCCCC">disassembly I used Ida it supports 6502</font>

636
00:26:17,410 --> 00:26:23,020
and is of course a very powerful

637
00:26:19,060 --> 00:26:26,350
disassembler in<font color="#E5E5E5"> addition to disassembly</font>

638
00:26:23,020 --> 00:26:28,810
<font color="#CCCCCC">i use 6502 simulation software to study</font>

639
00:26:26,350 --> 00:26:30,159
the software in a virtual CPU<font color="#E5E5E5"> the</font>

640
00:26:28,810 --> 00:26:31,810
simulation is really helpful when

641
00:26:30,160 --> 00:26:33,220
disassembling the software provides a

642
00:26:31,810 --> 00:26:36,040
lot of insight into what's going on

643
00:26:33,220 --> 00:26:37,810
<font color="#CCCCCC">since 6502 is a very well-known</font>

644
00:26:36,040 --> 00:26:40,389
architecture it was not at all difficult

645
00:26:37,810 --> 00:26:43,330
to find an existing simulator<font color="#E5E5E5"> even free</font>

646
00:26:40,390 --> 00:26:45,280
with<font color="#E5E5E5"> source code the 6502 is used in</font>

647
00:26:43,330 --> 00:26:47,530
8-bit computers like the<font color="#E5E5E5"> Apple</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> in</font>

648
00:26:45,280 --> 00:26:48,639
<font color="#CCCCCC">commodore 64</font><font color="#E5E5E5"> so there's really a lot of</font>

649
00:26:47,530 --> 00:26:51,820
enthusiasts<font color="#CCCCCC"> and a great deal of</font>

650
00:26:48,640 --> 00:26:53,650
information about this architecture as<font color="#CCCCCC"> I</font>

651
00:26:51,820 --> 00:26:55,419
<font color="#E5E5E5">gain understanding of the system on chip</font>

652
00:26:53,650 --> 00:26:57,460
<font color="#E5E5E5">through disassembling the software</font><font color="#CCCCCC"> i</font>

653
00:26:55,420 --> 00:26:59,230
began adding some of the features into

654
00:26:57,460 --> 00:27:00,730
the simulator to emulate some of the

655
00:26:59,230 --> 00:27:07,020
hardware peripherals that were found

656
00:27:00,730 --> 00:27:09,780
inside the<font color="#CCCCCC"> ACP that device itself</font>

657
00:27:07,020 --> 00:27:11,310
<font color="#CCCCCC">one of the first things I saw</font><font color="#E5E5E5"> in the</font>

658
00:27:09,780 --> 00:27:13,620
disassembly<font color="#CCCCCC"> was</font><font color="#E5E5E5"> that there are two</font>

659
00:27:11,310 --> 00:27:15,389
operating modes<font color="#E5E5E5"> during startup values</font>

660
00:27:13,620 --> 00:27:17,189
<font color="#CCCCCC">and ram are checked and at the ACP</font>

661
00:27:15,390 --> 00:27:18,600
hasn't been initialized it enters<font color="#E5E5E5"> a</font>

662
00:27:17,190 --> 00:27:20,550
personalization mode<font color="#CCCCCC"> used during</font>

663
00:27:18,600 --> 00:27:23,730
manufacturing to assign the unit address

664
00:27:20,550 --> 00:27:25,470
<font color="#CCCCCC">and cds in normal conditions after the</font>

665
00:27:23,730 --> 00:27:27,630
<font color="#E5E5E5">set-top boxes left the factory this</font>

666
00:27:25,470 --> 00:27:29,880
personalization<font color="#CCCCCC"> softwares</font><font color="#E5E5E5"> bypass the</font><font color="#CCCCCC"> ACP</font>

667
00:27:27,630 --> 00:27:32,880
will always run<font color="#E5E5E5"> its main application</font>

668
00:27:29,880 --> 00:27:36,150
the next thing<font color="#CCCCCC"> i found was the</font>

669
00:27:32,880 --> 00:27:37,980
application wasn't very simple<font color="#E5E5E5"> this 6502</font>

670
00:27:36,150 --> 00:27:40,710
actually<font color="#CCCCCC"> runs a</font><font color="#E5E5E5"> task switching operating</font>

671
00:27:37,980 --> 00:27:42,300
system<font color="#CCCCCC"> a tasks are run</font><font color="#E5E5E5"> supporting</font>

672
00:27:40,710 --> 00:27:45,210
<font color="#E5E5E5">description of up to two channels at the</font>

673
00:27:42,300 --> 00:27:47,190
same time there are two tasks to handle

674
00:27:45,210 --> 00:27:48,870
processing of ECM 40 messages and

675
00:27:47,190 --> 00:27:51,570
generation of the working he's used to

676
00:27:48,870 --> 00:27:54,120
decrypt the transport stream and two

677
00:27:51,570 --> 00:27:55,980
tasks to handle processing of ECM 41

678
00:27:54,120 --> 00:27:59,429
<font color="#E5E5E5">messages to generate the program keys</font>

679
00:27:55,980 --> 00:28:02,640
that are used to process the ECM 41 task

680
00:27:59,430 --> 00:28:04,380
for handling<font color="#CCCCCC"> emm</font><font color="#E5E5E5"> processing and there's</font>

681
00:28:02,640 --> 00:28:06,240
also a<font color="#E5E5E5"> task to communicate with the TV</font>

682
00:28:04,380 --> 00:28:09,150
<font color="#CCCCCC">pass interface for security upgrades</font>

683
00:28:06,240 --> 00:28:10,500
with another task to handle the messages

684
00:28:09,150 --> 00:28:16,020
that are coming in over the spi

685
00:28:10,500 --> 00:28:17,820
interface since the ACP is a custom

686
00:28:16,020 --> 00:28:19,800
<font color="#E5E5E5">system-on-chip there is no documentation</font>

687
00:28:17,820 --> 00:28:22,110
available describing the hardware

688
00:28:19,800 --> 00:28:23,970
capabilities<font color="#E5E5E5"> so the disassembly was</font>

689
00:28:22,110 --> 00:28:25,590
studied and the<font color="#CCCCCC"> input-output registers</font>

690
00:28:23,970 --> 00:28:28,740
had to be<font color="#CCCCCC"> guests based on the software</font>

691
00:28:25,590 --> 00:28:30,149
usage<font color="#CCCCCC"> there</font><font color="#E5E5E5"> is an</font><font color="#CCCCCC"> SPI slave peripheral</font>

692
00:28:28,740 --> 00:28:33,060
<font color="#CCCCCC">for communication with the main</font>

693
00:28:30,150 --> 00:28:35,130
controller<font color="#E5E5E5"> the</font><font color="#CCCCCC"> spi peripheral sends</font><font color="#E5E5E5"> and</font>

694
00:28:33,060 --> 00:28:37,200
<font color="#E5E5E5">receives data directly</font><font color="#CCCCCC"> around and</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> a</font>

695
00:28:35,130 --> 00:28:38,280
signal set indicating that transfer has

696
00:28:37,200 --> 00:28:41,400
been completed

697
00:28:38,280 --> 00:28:43,740
there's a desk<font color="#CCCCCC"> crypto peripheral</font><font color="#E5E5E5"> key</font>

698
00:28:41,400 --> 00:28:46,050
data and operating<font color="#E5E5E5"> mode</font><font color="#CCCCCC"> or seven</font>

699
00:28:43,740 --> 00:28:47,460
registers and when the description has

700
00:28:46,050 --> 00:28:50,159
been complete the result can be read

701
00:28:47,460 --> 00:28:52,680
from additional registers<font color="#CCCCCC"> there's a</font>

702
00:28:50,160 --> 00:28:54,540
transport<font color="#E5E5E5"> stream</font><font color="#CCCCCC"> p</font><font color="#E5E5E5"> scrambler the working</font>

703
00:28:52,680 --> 00:28:56,610
<font color="#E5E5E5">he is set in</font><font color="#CCCCCC"> Hardware registers and</font><font color="#E5E5E5"> the</font>

704
00:28:54,540 --> 00:28:58,350
<font color="#CCCCCC">scramble then output decrypted transport</font>

705
00:28:56,610 --> 00:29:02,370
stream on the<font color="#CCCCCC"> serial transport stream</font>

706
00:28:58,350 --> 00:29:04,230
interface there are paid filters set by

707
00:29:02,370 --> 00:29:07,169
the set-top box main controller<font color="#E5E5E5"> over the</font>

708
00:29:04,230 --> 00:29:09,150
SPI bus<font color="#E5E5E5"> these filters select which video</font>

709
00:29:07,170 --> 00:29:10,950
and audio<font color="#E5E5E5"> streams to</font><font color="#CCCCCC"> descramble and</font>

710
00:29:09,150 --> 00:29:12,460
which<font color="#E5E5E5"> ECM</font><font color="#CCCCCC"> packet should</font><font color="#E5E5E5"> be received by</font>

711
00:29:10,950 --> 00:29:15,850
the<font color="#CCCCCC"> ACP</font>

712
00:29:12,460 --> 00:29:18,700
<font color="#E5E5E5">received</font><font color="#CCCCCC"> ace receive GM's</font><font color="#E5E5E5"> our place</font>

713
00:29:15,850 --> 00:29:23,770
around and the 6502 is notified of a<font color="#E5E5E5"> new</font>

714
00:29:18,700 --> 00:29:25,150
ECM<font color="#E5E5E5"> via register bit</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> at this point</font><font color="#CCCCCC"> I</font>

715
00:29:23,770 --> 00:29:26,020
<font color="#E5E5E5">am starting to get an idea of how the</font>

716
00:29:25,150 --> 00:29:27,520
system works

717
00:29:26,020 --> 00:29:31,389
<font color="#CCCCCC">I've studied the MPEG transport stream</font>

718
00:29:27,520 --> 00:29:33,340
and log<font color="#CCCCCC"> ECM data I've logged the SPI bus</font>

719
00:29:31,390 --> 00:29:36,160
and understand messages between the

720
00:29:33,340 --> 00:29:37,720
set-top box main controller the<font color="#CCCCCC"> ACP i</font>

721
00:29:36,160 --> 00:29:39,130
was<font color="#E5E5E5"> able to extract the entire wrong</font>

722
00:29:37,720 --> 00:29:40,600
<font color="#CCCCCC">contents optically and I've just</font>

723
00:29:39,130 --> 00:29:43,510
<font color="#CCCCCC">assemble the software and running in</font>

724
00:29:40,600 --> 00:29:45,879
simulation<font color="#E5E5E5"> there are some keys that are</font>

725
00:29:43,510 --> 00:29:47,770
found in<font color="#CCCCCC"> rom</font><font color="#E5E5E5"> fixed keys which never</font>

726
00:29:45,880 --> 00:29:49,420
<font color="#E5E5E5">change and are used when a channel has a</font>

727
00:29:47,770 --> 00:29:52,210
free preview weekend or something of the

728
00:29:49,420 --> 00:29:54,520
sort<font color="#CCCCCC"> any</font><font color="#E5E5E5"> set-top box that has ever had</font>

729
00:29:52,210 --> 00:29:55,780
any kind of authorization of the past is

730
00:29:54,520 --> 00:29:59,200
allowed to decrypt channels that are

731
00:29:55,780 --> 00:30:01,180
encrypted using the<font color="#CCCCCC"> fix key mode so now</font>

732
00:29:59,200 --> 00:30:03,220
the focus is on understanding the ECM

733
00:30:01,180 --> 00:30:05,680
and<font color="#E5E5E5"> emm algorithms within the</font><font color="#CCCCCC"> rom</font>

734
00:30:03,220 --> 00:30:07,810
software<font color="#E5E5E5"> at this point I'm still missing</font>

735
00:30:05,680 --> 00:30:11,050
some important information from the<font color="#CCCCCC"> ACP</font>

736
00:30:07,810 --> 00:30:13,750
<font color="#E5E5E5">all the</font><font color="#CCCCCC"> cds category keys and</font><font color="#E5E5E5"> program</font>

737
00:30:11,050 --> 00:30:15,340
<font color="#CCCCCC">keys exists only within around so to</font>

738
00:30:13,750 --> 00:30:20,620
decrypt any of the<font color="#E5E5E5"> channels not in free</font>

739
00:30:15,340 --> 00:30:22,840
preview isn't possibly at this point the

740
00:30:20,620 --> 00:30:25,209
ECM<font color="#E5E5E5"> 40 message is used to generate the</font>

741
00:30:22,840 --> 00:30:28,030
working key used to descramble the MPEG

742
00:30:25,210 --> 00:30:29,890
streams<font color="#E5E5E5"> there's a service ID used to</font>

743
00:30:28,030 --> 00:30:31,540
identify each<font color="#E5E5E5"> channel and a frame count</font>

744
00:30:29,890 --> 00:30:34,360
that's used with the program key to

745
00:30:31,540 --> 00:30:36,280
calculate the working<font color="#E5E5E5"> key</font><font color="#CCCCCC"> the Crypt mode</font>

746
00:30:34,360 --> 00:30:38,409
identifies<font color="#E5E5E5"> if the channels operating</font>

747
00:30:36,280 --> 00:30:40,389
unencrypted with a fixed key or with<font color="#CCCCCC"> a</font>

748
00:30:38,410 --> 00:30:43,120
normal secure keys which are typically

749
00:30:40,390 --> 00:30:45,070
used the frame count is simply a 24-bit

750
00:30:43,120 --> 00:30:48,340
counter that increments<font color="#E5E5E5"> each time the</font>

751
00:30:45,070 --> 00:30:50,439
working key changes<font color="#E5E5E5"> there's a bite I've</font>

752
00:30:48,340 --> 00:30:50,980
<font color="#E5E5E5">labeled hardware that has one bit set in</font>

753
00:30:50,440 --> 00:30:52,540
it

754
00:30:50,980 --> 00:30:53,680
this selects a special<font color="#CCCCCC"> encryption</font><font color="#E5E5E5"> mode</font>

755
00:30:52,540 --> 00:30:58,990
<font color="#E5E5E5">that</font><font color="#CCCCCC"> i'll come back to</font><font color="#E5E5E5"> a little bit</font>

756
00:30:53,680 --> 00:31:01,540
later the ECM 41 contains encrypted

757
00:30:58,990 --> 00:31:05,200
program key<font color="#E5E5E5"> that's needed to correctly</font>

758
00:31:01,540 --> 00:31:07,210
decrypt the ECM<font color="#E5E5E5"> 40 there's a provider</font><font color="#CCCCCC"> ID</font>

759
00:31:05,200 --> 00:31:09,250
<font color="#E5E5E5">that indicates which TV</font><font color="#CCCCCC"> operators</font>

760
00:31:07,210 --> 00:31:12,010
subscribers<font color="#CCCCCC"> the CCM should be processed</font>

761
00:31:09,250 --> 00:31:13,630
by<font color="#E5E5E5"> and there's the same service ID that</font>

762
00:31:12,010 --> 00:31:17,410
will be found within the ECM 40 messages

763
00:31:13,630 --> 00:31:19,000
<font color="#E5E5E5">the category epoch identifies which</font>

764
00:31:17,410 --> 00:31:20,860
category key is in use

765
00:31:19,000 --> 00:31:22,960
there's also information about how long

766
00:31:20,860 --> 00:31:25,029
this<font color="#E5E5E5"> program</font><font color="#CCCCCC"> he will be valid for</font>

767
00:31:22,960 --> 00:31:27,399
<font color="#CCCCCC">ECM</font><font color="#E5E5E5"> 41 contains one or more</font>

768
00:31:25,029 --> 00:31:29,470
<font color="#E5E5E5">subscriptions</font><font color="#CCCCCC"> here's that must be found</font>

769
00:31:27,399 --> 00:31:31,840
within the<font color="#E5E5E5"> customers</font><font color="#CCCCCC"> acp</font><font color="#E5E5E5"> to allow this</font>

770
00:31:29,470 --> 00:31:33,669
message to be processed the subscription

771
00:31:31,840 --> 00:31:35,740
tears are written to the<font color="#CCCCCC"> ECP</font><font color="#E5E5E5"> when the</font>

772
00:31:33,669 --> 00:31:38,380
<font color="#CCCCCC">emm containing</font><font color="#E5E5E5"> authorization details</font>

773
00:31:35,740 --> 00:31:40,120
<font color="#E5E5E5">received there is again a hardware</font><font color="#CCCCCC"> trip</font>

774
00:31:38,380 --> 00:31:46,240
<font color="#CCCCCC">to select bite that i will get</font><font color="#E5E5E5"> back to</font>

775
00:31:40,120 --> 00:31:49,029
this slide shows what a half of a second

776
00:31:46,240 --> 00:31:52,270
of<font color="#E5E5E5"> ECM 40cm 41 activity might look like</font>

777
00:31:49,029 --> 00:31:55,059
to be able to descramble the<font color="#E5E5E5"> program the</font>

778
00:31:52,270 --> 00:31:57,429
<font color="#CCCCCC">ACP must process</font><font color="#E5E5E5"> occurring ECM 41 to get</font>

779
00:31:55,059 --> 00:31:59,950
the program key and then process an<font color="#E5E5E5"> ECM</font>

780
00:31:57,429 --> 00:32:02,020
<font color="#CCCCCC">42 get the working</font><font color="#E5E5E5"> key the working keys</font>

781
00:31:59,950 --> 00:32:05,320
then used by the descrambler<font color="#E5E5E5"> to decrypt</font>

782
00:32:02,020 --> 00:32:07,929
MPEG stream until the<font color="#CCCCCC"> ACP receives the</font>

783
00:32:05,320 --> 00:32:10,149
ECM 41 with the current key as well as

784
00:32:07,929 --> 00:32:12,220
an ECM<font color="#E5E5E5"> 40 with the frame count</font><font color="#CCCCCC"> it's not</font>

785
00:32:10,149 --> 00:32:15,039
yet possible to decrypt<font color="#E5E5E5"> the</font><font color="#CCCCCC"> transport</font>

786
00:32:12,220 --> 00:32:18,789
<font color="#E5E5E5">stream the working keys have a short</font>

787
00:32:15,039 --> 00:32:21,039
lifetime<font color="#E5E5E5"> only 133 milliseconds the</font>

788
00:32:18,789 --> 00:32:22,570
series of<font color="#E5E5E5"> ECM shown here all would</font>

789
00:32:21,039 --> 00:32:27,850
happen within a period of a half of<font color="#CCCCCC"> the</font>

790
00:32:22,570 --> 00:32:30,399
second the<font color="#CCCCCC"> mms</font><font color="#E5E5E5"> are split into four parts</font>

791
00:32:27,850 --> 00:32:31,870
each part contains a portion of the

792
00:32:30,399 --> 00:32:34,449
subscription information for<font color="#CCCCCC"> the set-top</font>

793
00:32:31,870 --> 00:32:36,820
<font color="#E5E5E5">box a category key is calculated from</font>

794
00:32:34,450 --> 00:32:38,710
each of the four parts and the key that

795
00:32:36,820 --> 00:32:40,539
is calculated for each part has to match

796
00:32:38,710 --> 00:32:43,090
the others<font color="#CCCCCC"> or the emm will be rejected</font>

797
00:32:40,539 --> 00:32:46,270
and all authorization and<font color="#CCCCCC"> catagory ki</font>

798
00:32:43,090 --> 00:32:49,418
will be wiped from<font color="#CCCCCC"> the SACP</font><font color="#E5E5E5"> when the</font>

799
00:32:46,270 --> 00:32:51,220
first<font color="#CCCCCC"> emm</font><font color="#E5E5E5"> part 0 is received the</font>

800
00:32:49,419 --> 00:32:52,600
authorization data inside the ACP is

801
00:32:51,220 --> 00:32:55,210
reset and<font color="#E5E5E5"> will be replaced with</font>

802
00:32:52,600 --> 00:32:58,240
authorization data from the<font color="#CCCCCC"> EML</font><font color="#E5E5E5"> when the</font>

803
00:32:55,210 --> 00:33:00,580
next part<font color="#CCCCCC"> part one</font><font color="#E5E5E5"> is received the</font>

804
00:32:58,240 --> 00:33:03,039
existing authorization data<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> ACP</font>

805
00:33:00,580 --> 00:33:05,710
from part 0 is hashed along with the

806
00:33:03,039 --> 00:33:07,510
data in part<font color="#CCCCCC"> 1 if the result is correct</font>

807
00:33:05,710 --> 00:33:09,429
then the<font color="#E5E5E5"> authorization from part one is</font>

808
00:33:07,510 --> 00:33:12,190
copied into the<font color="#CCCCCC"> ACP alongside the</font>

809
00:33:09,429 --> 00:33:14,649
existing data from part 0<font color="#E5E5E5"> if the result</font>

810
00:33:12,190 --> 00:33:18,100
is incorrect<font color="#CCCCCC"> then the ACPs authorization</font>

811
00:33:14,649 --> 00:33:20,110
is erased<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this way the</font><font color="#CCCCCC"> Fourier</font>

812
00:33:18,100 --> 00:33:21,730
<font color="#E5E5E5">messages are linked together and if</font>

813
00:33:20,110 --> 00:33:25,840
anything is modified<font color="#E5E5E5"> within any of the a</font>

814
00:33:21,730 --> 00:33:28,840
<font color="#E5E5E5">messages</font><font color="#CCCCCC"> the authorization will fail</font>

815
00:33:25,840 --> 00:33:30,668
this is an example of an emm<font color="#E5E5E5"> each of the</font>

816
00:33:28,840 --> 00:33:32,830
<font color="#CCCCCC">40mm</font><font color="#E5E5E5"> parts</font><font color="#CCCCCC"> contains some common</font>

817
00:33:30,669 --> 00:33:35,020
information like the unit address and

818
00:33:32,830 --> 00:33:38,199
which category<font color="#E5E5E5"> epoch</font><font color="#CCCCCC"> the CMM contains</font>

819
00:33:35,020 --> 00:33:40,570
information for the<font color="#CCCCCC"> emm</font><font color="#E5E5E5"> contain</font><font color="#CCCCCC"> to</font>

820
00:33:38,200 --> 00:33:42,909
category<font color="#CCCCCC"> keys one for the current epoch</font>

821
00:33:40,570 --> 00:33:44,559
and<font color="#E5E5E5"> also for the next so that when there</font>

822
00:33:42,909 --> 00:33:46,539
is<font color="#CCCCCC"> the change of the category key</font><font color="#E5E5E5"> the</font>

823
00:33:44,559 --> 00:33:49,809
<font color="#CCCCCC">ACP already has the next</font><font color="#E5E5E5"> key available</font>

824
00:33:46,539 --> 00:33:53,679
to decrypt the category key from the ECM

825
00:33:49,809 --> 00:33:57,370
<font color="#E5E5E5">from the</font><font color="#CCCCCC"> emm</font><font color="#E5E5E5"> the cds</font><font color="#CCCCCC"> containing the ACP</font>

826
00:33:53,679 --> 00:34:00,399
<font color="#E5E5E5">are used the</font><font color="#CCCCCC"> cds are unique to HACCP and</font>

827
00:33:57,370 --> 00:34:01,870
are assigned during manufacturing<font color="#CCCCCC"> DMMs</font>

828
00:34:00,399 --> 00:34:03,908
are transmitted<font color="#E5E5E5"> out a band for cable</font>

829
00:34:01,870 --> 00:34:06,010
systems<font color="#E5E5E5"> but</font><font color="#CCCCCC"> their</font><font color="#E5E5E5"> past the</font><font color="#CCCCCC"> ACP in the</font>

830
00:34:03,909 --> 00:34:07,600
same<font color="#CCCCCC"> ways for satellite systems</font><font color="#E5E5E5"> so the</font>

831
00:34:06,010 --> 00:34:12,820
<font color="#CCCCCC">ACP level</font><font color="#E5E5E5"> there's no difference between</font>

832
00:34:07,600 --> 00:34:14,020
the satellite and<font color="#E5E5E5"> the cable systems at</font>

833
00:34:12,820 --> 00:34:15,429
<font color="#E5E5E5">this point it should be possible to</font>

834
00:34:14,020 --> 00:34:17,889
decrypt channels that are using a fixed

835
00:34:15,429 --> 00:34:19,750
<font color="#E5E5E5">mode analysis of the</font><font color="#CCCCCC"> rom has shown the</font>

836
00:34:17,889 --> 00:34:22,839
algorithms used to process the ECM<font color="#CCCCCC"> and</font>

837
00:34:19,750 --> 00:34:24,280
generator working<font color="#E5E5E5"> key the</font><font color="#CCCCCC"> fix</font><font color="#E5E5E5"> keys are</font>

838
00:34:22,839 --> 00:34:26,379
known because they're contained in<font color="#CCCCCC"> rom</font>

839
00:34:24,280 --> 00:34:28,060
<font color="#E5E5E5">there could have been some question</font>

840
00:34:26,379 --> 00:34:30,879
about the possibility of bit errors from

841
00:34:28,060 --> 00:34:32,739
the optical<font color="#CCCCCC"> rom extraction process but</font>

842
00:34:30,879 --> 00:34:34,509
the<font color="#CCCCCC"> fix</font><font color="#E5E5E5"> keys can be confirmed is correct</font>

843
00:34:32,739 --> 00:34:36,668
because the wrong software<font color="#E5E5E5"> performs</font><font color="#CCCCCC"> to</font>

844
00:34:34,510 --> 00:34:38,740
<font color="#E5E5E5">check some of this 256 byte area that</font>

845
00:34:36,668 --> 00:34:40,359
contains the keys successfully running

846
00:34:38,739 --> 00:34:42,339
the checksum on the extracted<font color="#CCCCCC"> rom data</font>

847
00:34:40,359 --> 00:34:45,580
indicates that the extracted<font color="#CCCCCC"> keys seem</font>

848
00:34:42,339 --> 00:34:46,899
to be correct but when<font color="#CCCCCC"> I attempted to</font>

849
00:34:45,580 --> 00:34:47,619
decrypt<font color="#CCCCCC"> to fix key channel there's a</font>

850
00:34:46,899 --> 00:34:50,589
problem

851
00:34:47,619 --> 00:34:51,790
it did not work<font color="#E5E5E5"> whether it was a bug in</font>

852
00:34:50,589 --> 00:34:54,159
my<font color="#E5E5E5"> description implementation or</font>

853
00:34:51,790 --> 00:34:57,040
<font color="#E5E5E5">something else was unclear however</font><font color="#CCCCCC"> I had</font>

854
00:34:54,159 --> 00:34:58,930
noticed<font color="#CCCCCC"> the bit in ECM 40 was set that</font>

855
00:34:57,040 --> 00:35:01,300
causes a bit within the<font color="#CCCCCC"> ACP</font><font color="#E5E5E5"> hardware</font>

856
00:34:58,930 --> 00:35:03,580
peripherals to<font color="#E5E5E5"> be set the purpose of the</font>

857
00:35:01,300 --> 00:35:05,440
bit was unclear but<font color="#CCCCCC"> its</font><font color="#E5E5E5"> address was</font>

858
00:35:03,580 --> 00:35:07,450
suspiciously close to the transport

859
00:35:05,440 --> 00:35:08,710
<font color="#E5E5E5">stream descrambler key so</font><font color="#CCCCCC"> I start to</font>

860
00:35:07,450 --> 00:35:10,450
suspect that there might be some

861
00:35:08,710 --> 00:35:15,790
encryption other than just standard<font color="#CCCCCC"> desk</font>

862
00:35:10,450 --> 00:35:17,140
to be able to learn more about the<font color="#CCCCCC"> acpi</font>

863
00:35:15,790 --> 00:35:19,509
started to look at<font color="#CCCCCC"> collect relationship</font>

864
00:35:17,140 --> 00:35:20,890
<font color="#E5E5E5">if</font><font color="#CCCCCC"> I can succeed to</font><font color="#E5E5E5"> glitch the chip</font><font color="#CCCCCC"> i</font>

865
00:35:19,510 --> 00:35:23,109
may be able to find a way to read and

866
00:35:20,890 --> 00:35:25,240
even<font color="#E5E5E5"> write memory and possibly a way to</font>

867
00:35:23,109 --> 00:35:26,589
run my own software directly on the<font color="#E5E5E5"> chip</font>

868
00:35:25,240 --> 00:35:27,939
<font color="#E5E5E5">this will allow</font><font color="#CCCCCC"> me to control the</font>

869
00:35:26,589 --> 00:35:29,290
hardware peripherals and be able to

870
00:35:27,940 --> 00:35:32,830
observe the chips operation under

871
00:35:29,290 --> 00:35:35,349
different conditions<font color="#E5E5E5"> timing tests of the</font>

872
00:35:32,830 --> 00:35:37,540
<font color="#CCCCCC">ACP suggest that the 6502 is running</font>

873
00:35:35,349 --> 00:35:39,010
from internal clock source<font color="#E5E5E5"> so this ruled</font>

874
00:35:37,540 --> 00:35:41,890
out<font color="#E5E5E5"> a clock which attack</font>

875
00:35:39,010 --> 00:35:43,540
<font color="#CCCCCC">avicii glitch</font><font color="#E5E5E5"> makes sense</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> with the</font>

876
00:35:41,890 --> 00:35:44,980
age of this chip<font color="#E5E5E5"> it seemed reasonable to</font>

877
00:35:43,540 --> 00:35:47,230
expect that it would be susceptible to

878
00:35:44,980 --> 00:35:48,520
<font color="#CCCCCC">VCC glitches the stronger protections</font>

879
00:35:47,230 --> 00:35:52,420
against this type of attack or

880
00:35:48,520 --> 00:35:54,310
relatively recent<font color="#E5E5E5"> my glitter design is</font>

881
00:35:52,420 --> 00:35:56,830
quite simple<font color="#E5E5E5"> it's based on an</font><font color="#CCCCCC"> ex</font>

882
00:35:54,310 --> 00:35:58,570
mega-development<font color="#CCCCCC"> board and breadboard i</font>

883
00:35:56,830 --> 00:36:01,569
use the<font color="#CCCCCC"> xmega to communicate with the</font>

884
00:35:58,570 --> 00:36:04,720
<font color="#CCCCCC">ACP over spi</font><font color="#E5E5E5"> and to control the glitch a</font>

885
00:36:01,570 --> 00:36:08,470
74 series 4053 analog switch is used to

886
00:36:04,720 --> 00:36:10,899
quickly switch the<font color="#CCCCCC"> ACP VCC between two</font>

887
00:36:08,470 --> 00:36:13,810
voltages<font color="#CCCCCC"> a normal operating voltage and</font>

888
00:36:10,900 --> 00:36:16,780
<font color="#CCCCCC">a lower glitch voltage</font><font color="#E5E5E5"> i use</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> benchtop</font>

889
00:36:13,810 --> 00:36:18,640
DC power supply and<font color="#E5E5E5"> two outputs so</font><font color="#CCCCCC"> i can</font>

890
00:36:16,780 --> 00:36:22,120
easily adjust both the normal<font color="#E5E5E5"> VCC and</font>

891
00:36:18,640 --> 00:36:23,980
glittery<font color="#E5E5E5"> sea levels other parts on the</font>

892
00:36:22,120 --> 00:36:25,990
breadboard<font color="#CCCCCC"> are an oscillator to provide</font>

893
00:36:23,980 --> 00:36:28,630
some clock inputs necessary for the<font color="#CCCCCC"> ACP</font>

894
00:36:25,990 --> 00:36:30,279
to operate and an inverter and<font color="#CCCCCC"> NAND gate</font>

895
00:36:28,630 --> 00:36:33,490
to cut out the clock during the time of

896
00:36:30,280 --> 00:36:35,890
the glitch<font color="#E5E5E5"> to simplify the test set up</font>

897
00:36:33,490 --> 00:36:37,240
as much<font color="#E5E5E5"> as possible</font><font color="#CCCCCC"> the ACP was removed</font>

898
00:36:35,890 --> 00:36:39,430
from the set-top box and<font color="#CCCCCC"> father</font><font color="#E5E5E5"> to a</font>

899
00:36:37,240 --> 00:36:41,080
breakout board<font color="#CCCCCC"> so in this process the</font>

900
00:36:39,430 --> 00:36:43,120
battery background was disconnected<font color="#CCCCCC"> and</font>

901
00:36:41,080 --> 00:36:44,830
all the keys<font color="#CCCCCC"> are lost but for the</font>

902
00:36:43,120 --> 00:36:47,500
purpose of developing<font color="#E5E5E5"> working</font><font color="#CCCCCC"> which this</font>

903
00:36:44,830 --> 00:36:48,940
<font color="#E5E5E5">was</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> the simple breadboard base</font>

904
00:36:47,500 --> 00:36:50,260
<font color="#E5E5E5">collector is quite flexible</font><font color="#CCCCCC"> the</font>

905
00:36:48,940 --> 00:36:53,650
breadboard can be modified to test

906
00:36:50,260 --> 00:36:55,270
different ideas<font color="#E5E5E5"> reconfigure quickly more</font>

907
00:36:53,650 --> 00:37:00,430
complex<font color="#E5E5E5"> and advanced culture wasn't</font>

908
00:36:55,270 --> 00:37:01,660
necessary to test the<font color="#CCCCCC"> glitter to find</font>

909
00:37:00,430 --> 00:37:03,399
out<font color="#CCCCCC"> if it will work and what voltage</font>

910
00:37:01,660 --> 00:37:06,399
levels are successful we can send a

911
00:37:03,400 --> 00:37:09,130
command to the<font color="#CCCCCC"> ACP</font><font color="#E5E5E5"> then glitch and then</font>

912
00:37:06,400 --> 00:37:10,780
see the response<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> ACP</font><font color="#E5E5E5"> the</font>

913
00:37:09,130 --> 00:37:12,250
general strategy is to lower the voltage

914
00:37:10,780 --> 00:37:15,370
just to the point where the<font color="#E5E5E5"> chips</font>

915
00:37:12,250 --> 00:37:16,750
sometimes resets<font color="#E5E5E5"> due to the glitch by</font>

916
00:37:15,370 --> 00:37:19,089
adjusting voltage levels<font color="#CCCCCC"> and Glitch</font>

917
00:37:16,750 --> 00:37:21,700
<font color="#E5E5E5">length and timing intellectual and</font><font color="#CCCCCC"> likes</font>

918
00:37:19,090 --> 00:37:24,850
<font color="#CCCCCC">to keep succeeded to cause acp responses</font>

919
00:37:21,700 --> 00:37:27,669
to be altered the<font color="#CCCCCC"> check someone spi</font>

920
00:37:24,850 --> 00:37:29,560
<font color="#CCCCCC">packets is</font><font color="#E5E5E5"> very convenient when unusual</font>

921
00:37:27,670 --> 00:37:31,780
data is received from the<font color="#CCCCCC"> ACP chip with</font>

922
00:37:29,560 --> 00:37:33,070
a valid<font color="#E5E5E5"> checksum</font><font color="#CCCCCC"> it's a pretty good sign</font>

923
00:37:31,780 --> 00:37:35,050
that the glitch caused the temporary

924
00:37:33,070 --> 00:37:36,570
fault within the<font color="#CCCCCC"> cpu</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> that normal</font>

925
00:37:35,050 --> 00:37:38,910
<font color="#CCCCCC">operations resumed</font>

926
00:37:36,570 --> 00:37:40,920
<font color="#E5E5E5">depending on the glitches delivered</font>

927
00:37:38,910 --> 00:37:42,420
<font color="#E5E5E5">different effects are</font><font color="#CCCCCC"> seen</font><font color="#E5E5E5"> we can see</font>

928
00:37:40,920 --> 00:37:44,100
that generally as the glitches<font color="#E5E5E5"> moved</font>

929
00:37:42,420 --> 00:37:45,840
later<font color="#CCCCCC"> it's the later base</font><font color="#E5E5E5"> for the</font>

930
00:37:44,100 --> 00:37:47,460
response<font color="#E5E5E5"> pocket change</font>

931
00:37:45,840 --> 00:37:49,440
<font color="#E5E5E5">so at this point it looks like the</font>

932
00:37:47,460 --> 00:37:55,320
glitter works and is able to cause<font color="#E5E5E5"> a pre</font>

933
00:37:49,440 --> 00:37:56,640
fault<font color="#E5E5E5"> since i had an</font><font color="#CCCCCC"> effective glitch i</font>

934
00:37:55,320 --> 00:37:58,350
took the circuit from the breadboard and

935
00:37:56,640 --> 00:38:00,150
<font color="#CCCCCC">catch the simple PCB that could plug</font>

936
00:37:58,350 --> 00:38:02,580
directly on the<font color="#CCCCCC"> X</font><font color="#E5E5E5"> mega-development</font><font color="#CCCCCC"> board</font>

937
00:38:00,150 --> 00:38:04,470
<font color="#E5E5E5">this performs exactly the same function</font>

938
00:38:02,580 --> 00:38:05,759
<font color="#E5E5E5">as the breadboard</font><font color="#CCCCCC"> literature</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> i'm a</font>

939
00:38:04,470 --> 00:38:07,500
bit<font color="#E5E5E5"> less likely to accidentally</font>

940
00:38:05,760 --> 00:38:09,720
unplugged a wire from the breadboard and

941
00:38:07,500 --> 00:38:11,010
have to repair things<font color="#E5E5E5"> the circuit</font><font color="#CCCCCC"> was</font>

942
00:38:09,720 --> 00:38:13,740
simple enough that<font color="#CCCCCC"> I could create a one</font>

943
00:38:11,010 --> 00:38:18,750
sided<font color="#E5E5E5"> PCB so it was very easy for myself</font>

944
00:38:13,740 --> 00:38:20,879
<font color="#E5E5E5">to</font><font color="#CCCCCC"> watch</font><font color="#E5E5E5"> at home now my goal is to have</font>

945
00:38:18,750 --> 00:38:23,430
the<font color="#CCCCCC"> ACP</font><font color="#E5E5E5"> execute the</font><font color="#CCCCCC"> court of my choice</font>

946
00:38:20,880 --> 00:38:25,650
because the 6502 is a von<font color="#E5E5E5"> Neumann</font>

947
00:38:23,430 --> 00:38:27,930
architecture<font color="#CCCCCC"> all code and data memory</font>

948
00:38:25,650 --> 00:38:29,940
<font color="#E5E5E5">share the same address space from</font>

949
00:38:27,930 --> 00:38:31,919
software disassembly<font color="#CCCCCC"> I saw that there</font>

950
00:38:29,940 --> 00:38:35,190
didn't appear to be any paging or<font color="#CCCCCC"> mau</font>

951
00:38:31,920 --> 00:38:37,800
features<font color="#E5E5E5"> the software in</font><font color="#CCCCCC"> rom is fully</font>

952
00:38:35,190 --> 00:38:39,480
self-contained<font color="#CCCCCC"> there is no eeprom</font><font color="#E5E5E5"> and</font>

953
00:38:37,800 --> 00:38:41,670
<font color="#CCCCCC">ram is never used to hold executable</font>

954
00:38:39,480 --> 00:38:44,130
code<font color="#CCCCCC"> so there aren't jumps into these</font>

955
00:38:41,670 --> 00:38:45,600
areas to exploit and in fact it wasn't

956
00:38:44,130 --> 00:38:48,240
clear if<font color="#E5E5E5"> there's anything preventing</font>

957
00:38:45,600 --> 00:38:49,980
code execution outside of wrong<font color="#CCCCCC"> i</font>

958
00:38:48,240 --> 00:38:52,740
<font color="#E5E5E5">decided to take a chance and test the</font>

959
00:38:49,980 --> 00:38:55,110
frame is executable<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I send a message</font>

960
00:38:52,740 --> 00:38:57,359
via<font color="#CCCCCC"> spi</font><font color="#E5E5E5"> knowing that this message will</font>

961
00:38:55,110 --> 00:38:59,880
be stored<font color="#E5E5E5"> around the message</font><font color="#CCCCCC"> contains</font>

962
00:38:57,360 --> 00:39:02,370
6502 executable code that will copy

963
00:38:59,880 --> 00:39:03,780
itself to an unused area around<font color="#CCCCCC"> execute</font>

964
00:39:02,370 --> 00:39:06,210
from this area and send<font color="#E5E5E5"> a knack</font>

965
00:39:03,780 --> 00:39:08,490
indicating it was successful because I

966
00:39:06,210 --> 00:39:10,380
<font color="#E5E5E5">studied the use of the spi interface in</font>

967
00:39:08,490 --> 00:39:12,330
the wrong code<font color="#CCCCCC"> i'm able to create this</font>

968
00:39:10,380 --> 00:39:14,490
executable payload that will continue to

969
00:39:12,330 --> 00:39:17,790
receive commands<font color="#CCCCCC"> by spi after</font><font color="#E5E5E5"> it's taken</font>

970
00:39:14,490 --> 00:39:19,950
<font color="#E5E5E5">control of the</font><font color="#CCCCCC"> ACP to try to maximize</font>

971
00:39:17,790 --> 00:39:21,810
chances of success<font color="#CCCCCC"> i</font><font color="#E5E5E5"> looked through</font><font color="#CCCCCC"> the</font>

972
00:39:19,950 --> 00:39:23,430
<font color="#CCCCCC">wrong code</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> multibyte instructions</font>

973
00:39:21,810 --> 00:39:25,410
which have broken up would have

974
00:39:23,430 --> 00:39:27,600
contained within them<font color="#E5E5E5"> a</font><font color="#CCCCCC"> drop-off</font><font color="#E5E5E5"> code</font>

975
00:39:25,410 --> 00:39:29,819
with a destination<font color="#E5E5E5"> that should lead to</font>

976
00:39:27,600 --> 00:39:33,779
<font color="#E5E5E5">wear my executable</font><font color="#CCCCCC"> pale payload was</font>

977
00:39:29,820 --> 00:39:34,800
placed around since the ACP has a single

978
00:39:33,780 --> 00:39:36,360
address space

979
00:39:34,800 --> 00:39:37,950
<font color="#E5E5E5">this gives a lot of opportunities for</font>

980
00:39:36,360 --> 00:39:39,900
glitching to<font color="#E5E5E5"> cause execution to reach</font>

981
00:39:37,950 --> 00:39:41,910
the payload<font color="#CCCCCC"> there are multiple scenarios</font>

982
00:39:39,900 --> 00:39:44,340
possible<font color="#CCCCCC"> in</font><font color="#E5E5E5"> addition to my selected</font>

983
00:39:41,910 --> 00:39:46,500
<font color="#E5E5E5">glitch target that corruption is</font><font color="#CCCCCC"> a</font>

984
00:39:44,340 --> 00:39:48,330
possibility<font color="#E5E5E5"> and really any abnormal</font>

985
00:39:46,500 --> 00:39:49,750
program flow has some possibility that

986
00:39:48,330 --> 00:39:51,279
it could eventually land in<font color="#CCCCCC"> Mike</font>

987
00:39:49,750 --> 00:39:53,740
<font color="#CCCCCC">load the von Neumann architecture</font>

988
00:39:51,280 --> 00:39:55,300
without strong memory management is a

989
00:39:53,740 --> 00:39:57,279
very fertile ground for glitching

990
00:39:55,300 --> 00:39:58,630
anything around potentially could be

991
00:39:57,280 --> 00:40:00,640
executed

992
00:39:58,630 --> 00:40:02,710
<font color="#E5E5E5">so at this point there are several</font>

993
00:40:00,640 --> 00:40:04,210
uncertainties<font color="#E5E5E5"> but so far nothing</font>

994
00:40:02,710 --> 00:40:06,940
totally rules out the possibility of

995
00:40:04,210 --> 00:40:08,800
success<font color="#CCCCCC"> bacp</font><font color="#E5E5E5"> operates from an internal</font>

996
00:40:06,940 --> 00:40:11,470
clock source and the interrupt driven

997
00:40:08,800 --> 00:40:14,410
<font color="#CCCCCC">task-switching does add some further</font>

998
00:40:11,470 --> 00:40:16,810
timing<font color="#E5E5E5"> uncertainty so i'll send the code</font>

999
00:40:14,410 --> 00:40:19,270
payload<font color="#E5E5E5"> delay</font><font color="#CCCCCC"> then glitch and see the</font>

1000
00:40:16,810 --> 00:40:20,560
result<font color="#CCCCCC"> when</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> unsuccessful change</font><font color="#E5E5E5"> the</font>

1001
00:40:19,270 --> 00:40:22,720
delay and I try again

1002
00:40:20,560 --> 00:40:24,520
<font color="#CCCCCC">I try to aim for the</font><font color="#E5E5E5"> instruction that</font>

1003
00:40:22,720 --> 00:40:26,709
<font color="#CCCCCC">I've</font><font color="#E5E5E5"> identified as possibly corruptible</font>

1004
00:40:24,520 --> 00:40:28,930
into a jump<font color="#CCCCCC"> but there</font><font color="#E5E5E5"> are a lot of</font>

1005
00:40:26,710 --> 00:40:31,750
unknowns<font color="#E5E5E5"> so really the</font><font color="#CCCCCC"> processes like</font>

1006
00:40:28,930 --> 00:40:33,549
fishing<font color="#E5E5E5"> throw line and hope</font><font color="#CCCCCC"> i have a</font>

1007
00:40:31,750 --> 00:40:34,990
target but<font color="#E5E5E5"> no way if I no way to know if</font>

1008
00:40:33,550 --> 00:40:38,860
<font color="#E5E5E5">I can really hit it or if it will have</font>

1009
00:40:34,990 --> 00:40:41,830
the expected result<font color="#E5E5E5"> but sometimes</font>

1010
00:40:38,860 --> 00:40:43,570
fishing is good<font color="#E5E5E5"> relatively quickly the</font>

1011
00:40:41,830 --> 00:40:45,460
<font color="#CCCCCC">ACP returns a knack</font><font color="#E5E5E5"> indicating a</font>

1012
00:40:43,570 --> 00:40:47,980
successful<font color="#E5E5E5"> glitch</font><font color="#CCCCCC"> the first successful</font>

1013
00:40:45,460 --> 00:40:49,540
<font color="#CCCCCC">glitch</font><font color="#E5E5E5"> took some hours to find and then</font>

1014
00:40:47,980 --> 00:40:51,070
after this it was possible to make it

1015
00:40:49,540 --> 00:40:53,529
work repeatedly<font color="#CCCCCC"> a matter of minutes or</font>

1016
00:40:51,070 --> 00:40:55,600
even seconds<font color="#CCCCCC"> so now i have my code</font>

1017
00:40:53,530 --> 00:40:57,370
executing around<font color="#CCCCCC"> i'm</font><font color="#E5E5E5"> able to send the</font>

1018
00:40:55,600 --> 00:40:59,440
<font color="#CCCCCC">ACP additional pieces of code to be</font>

1019
00:40:57,370 --> 00:41:01,420
executed<font color="#CCCCCC"> this allows me to read any</font>

1020
00:40:59,440 --> 00:41:03,070
memory address<font color="#CCCCCC"> right any memory address</font>

1021
00:41:01,420 --> 00:41:08,140
and perform any other operations

1022
00:41:03,070 --> 00:41:10,030
<font color="#E5E5E5">possible with the 6502</font><font color="#CCCCCC"> i wrote a simple</font>

1023
00:41:08,140 --> 00:41:11,650
application to perform glitch searches

1024
00:41:10,030 --> 00:41:14,230
and then to interact with the<font color="#E5E5E5"> code</font>

1025
00:41:11,650 --> 00:41:15,970
payload<font color="#E5E5E5"> back door installed around this</font>

1026
00:41:14,230 --> 00:41:18,010
program<font color="#E5E5E5"> allows me to enter an address in</font>

1027
00:41:15,970 --> 00:41:20,709
length and have data returned or write

1028
00:41:18,010 --> 00:41:22,390
to memory etc<font color="#CCCCCC"> there's also support for</font>

1029
00:41:20,710 --> 00:41:24,130
setting the key<font color="#E5E5E5"> and data and performing</font>

1030
00:41:22,390 --> 00:41:27,220
<font color="#CCCCCC">deaths and correct or decrypt using the</font>

1031
00:41:24,130 --> 00:41:29,560
desk hardware that's inside the<font color="#CCCCCC"> ACP</font><font color="#E5E5E5"> a</font>

1032
00:41:27,220 --> 00:41:31,750
few things<font color="#CCCCCC"> i noticed at this point there</font>

1033
00:41:29,560 --> 00:41:33,279
is<font color="#CCCCCC"> a2</font><font color="#E5E5E5"> kilobyte area of</font><font color="#CCCCCC"> rom</font><font color="#E5E5E5"> that if</font><font color="#CCCCCC"> I</font>

1034
00:41:31,750 --> 00:41:35,440
attempted to read it<font color="#E5E5E5"> cause the</font><font color="#CCCCCC"> trip</font><font color="#E5E5E5"> to</font>

1035
00:41:33,280 --> 00:41:37,360
reset this area of<font color="#CCCCCC"> wrong contains the</font>

1036
00:41:35,440 --> 00:41:39,280
<font color="#E5E5E5">personalization routines that are never</font>

1037
00:41:37,360 --> 00:41:41,890
normally used after the device leaves

1038
00:41:39,280 --> 00:41:44,020
the factory<font color="#E5E5E5"> there's also protection</font>

1039
00:41:41,890 --> 00:41:45,670
against modifying the<font color="#CCCCCC"> cds around trying</font>

1040
00:41:44,020 --> 00:41:48,400
to store<font color="#E5E5E5"> value these memory locations</font>

1041
00:41:45,670 --> 00:41:50,200
<font color="#E5E5E5">appear to do nothing</font>

1042
00:41:48,400 --> 00:41:51,970
<font color="#E5E5E5">there are specific addresses within</font>

1043
00:41:50,200 --> 00:41:54,279
<font color="#E5E5E5">around that</font><font color="#CCCCCC"> can't</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> red or</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> chip</font>

1044
00:41:51,970 --> 00:41:56,950
will lock up<font color="#E5E5E5"> these are clever traps put</font>

1045
00:41:54,280 --> 00:42:00,160
in place<font color="#CCCCCC"> as a security measure</font><font color="#E5E5E5"> the seven</font>

1046
00:41:56,950 --> 00:42:02,350
<font color="#E5E5E5">bite</font><font color="#CCCCCC"> 56-bit keys stored around</font><font color="#E5E5E5"> straddle</font>

1047
00:42:00,160 --> 00:42:04,000
these<font color="#CCCCCC"> data addresses so a potential</font>

1048
00:42:02,350 --> 00:42:05,440
exploit that could cause a linear dump

1049
00:42:04,000 --> 00:42:08,530
of memory will be stopped before

1050
00:42:05,440 --> 00:42:10,510
complete<font color="#CCCCCC"> key is ever read</font><font color="#E5E5E5"> when the chip</font>

1051
00:42:08,530 --> 00:42:12,430
<font color="#E5E5E5">is reset it means having to glitch in</font>

1052
00:42:10,510 --> 00:42:14,110
again<font color="#E5E5E5"> because my</font><font color="#CCCCCC"> court payload exists</font>

1053
00:42:12,430 --> 00:42:19,330
only around and there is no way to<font color="#E5E5E5"> hook</font>

1054
00:42:14,110 --> 00:42:21,490
in a permanent<font color="#CCCCCC"> back door</font><font color="#E5E5E5"> since we can</font>

1055
00:42:19,330 --> 00:42:23,410
execute code on the<font color="#CCCCCC"> ECP receive response</font>

1056
00:42:21,490 --> 00:42:24,609
<font color="#E5E5E5">we can read the</font><font color="#CCCCCC"> rom to have its contents</font>

1057
00:42:23,410 --> 00:42:26,440
without any of the<font color="#E5E5E5"> areas that were</font>

1058
00:42:24,610 --> 00:42:28,840
introduced during the optical extraction

1059
00:42:26,440 --> 00:42:30,610
process comparing the results of the

1060
00:42:28,840 --> 00:42:32,470
optical<font color="#CCCCCC"> rom extraction with a proper</font>

1061
00:42:30,610 --> 00:42:33,910
<font color="#CCCCCC">dump we can see how many</font><font color="#E5E5E5"> errors were in</font>

1062
00:42:32,470 --> 00:42:35,830
the optical extraction

1063
00:42:33,910 --> 00:42:37,990
<font color="#E5E5E5">overall the optical</font><font color="#CCCCCC"> attraction is quite</font>

1064
00:42:35,830 --> 00:42:39,190
good<font color="#E5E5E5"> it was after all good enough to</font>

1065
00:42:37,990 --> 00:42:41,859
understand the software<font color="#CCCCCC"> and</font><font color="#E5E5E5"> get us to</font>

1066
00:42:39,190 --> 00:42:44,200
this point<font color="#E5E5E5"> there's only one bite with</font>

1067
00:42:41,860 --> 00:42:46,390
more than a single incorrectly<font color="#E5E5E5"> flip</font><font color="#CCCCCC"> it</font>

1068
00:42:44,200 --> 00:42:47,799
many of the<font color="#E5E5E5"> areas that existed were</font>

1069
00:42:46,390 --> 00:42:49,960
quite obvious when disassembling the

1070
00:42:47,800 --> 00:42:51,670
software if an instruction is out of

1071
00:42:49,960 --> 00:42:53,650
place but flipping a single bit would

1072
00:42:51,670 --> 00:42:55,900
make it sensible then it was probably a

1073
00:42:53,650 --> 00:42:58,000
bit<font color="#CCCCCC"> air I didn't keep detailed records</font>

1074
00:42:55,900 --> 00:42:59,080
<font color="#E5E5E5">but</font><font color="#CCCCCC"> i think i probably caught about half</font>

1075
00:42:58,000 --> 00:43:01,150
of the<font color="#E5E5E5"> wrong</font><font color="#CCCCCC"> areas during the</font>

1076
00:42:59,080 --> 00:43:06,520
disassembly process before<font color="#CCCCCC"> i started</font>

1077
00:43:01,150 --> 00:43:09,040
glitching the interesting<font color="#CCCCCC"> keys in the</font>

1078
00:43:06,520 --> 00:43:11,020
<font color="#CCCCCC">ACP are all</font><font color="#E5E5E5"> stored in</font><font color="#CCCCCC"> RAM only</font><font color="#E5E5E5"> this</font>

1079
00:43:09,040 --> 00:43:14,560
includes working program category and

1080
00:43:11,020 --> 00:43:17,350
<font color="#CCCCCC">cds the ram is battery back if the cds</font>

1081
00:43:14,560 --> 00:43:19,720
<font color="#E5E5E5">are ever lost</font><font color="#CCCCCC"> from am this acp can no</font>

1082
00:43:17,350 --> 00:43:22,330
longer process<font color="#CCCCCC"> EMS and so is useless</font>

1083
00:43:19,720 --> 00:43:24,310
it's possible to<font color="#CCCCCC"> which the ACP</font><font color="#E5E5E5"> and read</font>

1084
00:43:22,330 --> 00:43:26,770
memory but the<font color="#E5E5E5"> glitter works on an</font><font color="#CCCCCC"> ACP</font>

1085
00:43:24,310 --> 00:43:28,779
<font color="#E5E5E5">removed from this</font><font color="#CCCCCC"> set top box</font><font color="#E5E5E5"> when the</font>

1086
00:43:26,770 --> 00:43:31,090
<font color="#CCCCCC">AC</font><font color="#E5E5E5"> is in circuit the condition the</font>

1087
00:43:28,780 --> 00:43:34,210
connections to other components and 16

1088
00:43:31,090 --> 00:43:36,190
<font color="#E5E5E5">vc connected pins pose a problem to</font>

1089
00:43:34,210 --> 00:43:37,990
<font color="#CCCCCC">glitch the ACP and circuit will require</font>

1090
00:43:36,190 --> 00:43:39,880
some modifications to the set-top box

1091
00:43:37,990 --> 00:43:42,459
<font color="#E5E5E5">disconnecting the</font><font color="#CCCCCC"> ECP from other parts</font>

1092
00:43:39,880 --> 00:43:45,280
<font color="#E5E5E5">or another alternative is to remove the</font>

1093
00:43:42,460 --> 00:43:47,110
<font color="#CCCCCC">ACP from the set-top box and place it on</font>

1094
00:43:45,280 --> 00:43:49,040
<font color="#E5E5E5">a breakout board without losing the</font>

1095
00:43:47,110 --> 00:43:52,700
battery power and wiping<font color="#E5E5E5"> around</font>

1096
00:43:49,040 --> 00:43:54,259
<font color="#E5E5E5">rather than modify the set-top box where</font>

1097
00:43:52,700 --> 00:43:56,180
each of several different models would

1098
00:43:54,260 --> 00:43:58,160
have required unique modifications<font color="#CCCCCC"> i</font>

1099
00:43:56,180 --> 00:43:59,750
decided to try to remove the<font color="#CCCCCC"> ACP with a</font>

1100
00:43:58,160 --> 00:44:01,879
battery still attached

1101
00:43:59,750 --> 00:44:03,980
the plan is to carefully lift the

1102
00:44:01,880 --> 00:44:07,640
battery<font color="#E5E5E5"> and ground pins while the</font>

1103
00:44:03,980 --> 00:44:09,260
<font color="#E5E5E5">set-top box is powered on providing</font><font color="#CCCCCC"> bc i</font>

1104
00:44:07,640 --> 00:44:11,240
use a small tool<font color="#CCCCCC"> i made from a razor</font>

1105
00:44:09,260 --> 00:44:13,490
<font color="#CCCCCC">blade using a dremel tool</font><font color="#E5E5E5"> then attach</font>

1106
00:44:11,240 --> 00:44:15,200
the handle of a screwdriver<font color="#CCCCCC"> this tool</font>

1107
00:44:13,490 --> 00:44:17,000
can be wedged under<font color="#E5E5E5"> a pin then with some</font>

1108
00:44:15,200 --> 00:44:18,379
<font color="#CCCCCC">hot air the solder will melt and a</font>

1109
00:44:17,000 --> 00:44:19,910
single<font color="#E5E5E5"> pin can be lifted straight up</font>

1110
00:44:18,380 --> 00:44:25,550
without damaging any of the other pins

1111
00:44:19,910 --> 00:44:27,980
with the pins lifted an external battery

1112
00:44:25,550 --> 00:44:28,940
can be attached<font color="#E5E5E5"> after attaching an</font>

1113
00:44:27,980 --> 00:44:36,839
external battery

1114
00:44:28,940 --> 00:44:39,809
[Applause]

1115
00:44:36,839 --> 00:44:41,788
<font color="#E5E5E5">after attaching an external battery</font><font color="#CCCCCC"> the</font>

1116
00:44:39,809 --> 00:44:43,589
<font color="#E5E5E5">set-top</font><font color="#CCCCCC"> box is unplugged and the ACP can</font>

1117
00:44:41,789 --> 00:44:46,440
<font color="#E5E5E5">remove</font><font color="#CCCCCC"> removed from the</font><font color="#E5E5E5"> set-top box</font>

1118
00:44:43,589 --> 00:44:48,839
using<font color="#E5E5E5"> hot air the</font><font color="#CCCCCC"> ACP can be</font><font color="#E5E5E5"> roofing the</font>

1119
00:44:46,440 --> 00:44:51,239
set-top box<font color="#E5E5E5"> glitch and can be placed</font>

1120
00:44:48,839 --> 00:44:52,619
<font color="#E5E5E5">back in the set-top box if desired to do</font>

1121
00:44:51,239 --> 00:44:53,309
this<font color="#CCCCCC"> i just use</font><font color="#E5E5E5"> hot air and a lot of</font>

1122
00:44:52,619 --> 00:44:55,710
flux

1123
00:44:53,309 --> 00:44:57,599
<font color="#E5E5E5">additionally once the interesting</font><font color="#CCCCCC"> he's</font>

1124
00:44:55,710 --> 00:44:59,309
<font color="#CCCCCC">been</font><font color="#E5E5E5"> extracted it might not even be</font>

1125
00:44:57,599 --> 00:45:03,599
necessary to replace the<font color="#CCCCCC"> ACP in</font><font color="#E5E5E5"> the</font>

1126
00:44:59,309 --> 00:45:04,979
set-top box<font color="#E5E5E5"> the ACP is now placed on a</font>

1127
00:45:03,599 --> 00:45:06,960
<font color="#E5E5E5">breakout board connected to the</font><font color="#CCCCCC"> pitcher</font>

1128
00:45:04,979 --> 00:45:08,848
<font color="#E5E5E5">not</font><font color="#CCCCCC"> all the pins need to be connected</font>

1129
00:45:06,960 --> 00:45:11,339
<font color="#CCCCCC">only a handful of things are actually</font>

1130
00:45:08,849 --> 00:45:13,019
<font color="#CCCCCC">used by the glitcher you can also see at</font>

1131
00:45:11,339 --> 00:45:14,849
this point the<font color="#CCCCCC"> glitters in a project</font><font color="#E5E5E5"> box</font>

1132
00:45:13,019 --> 00:45:16,979
<font color="#CCCCCC">the aesthetics greatly improved since</font>

1133
00:45:14,849 --> 00:45:19,200
the<font color="#E5E5E5"> breadbox</font><font color="#CCCCCC"> play</font><font color="#E5E5E5"> the breadboard</font><font color="#CCCCCC"> base</font>

1134
00:45:16,979 --> 00:45:22,950
<font color="#CCCCCC">Letcher the functionalities identical</font>

1135
00:45:19,200 --> 00:45:24,749
<font color="#E5E5E5">the timing of</font><font color="#CCCCCC"> acp responses is different</font>

1136
00:45:22,950 --> 00:45:26,489
on a<font color="#E5E5E5"> chip with valid around compared to</font>

1137
00:45:24,749 --> 00:45:29,279
the previous chips that<font color="#E5E5E5"> I glitch before</font>

1138
00:45:26,489 --> 00:45:31,079
<font color="#CCCCCC">I didn't confirm whether the cause of</font>

1139
00:45:29,279 --> 00:45:32,609
the<font color="#E5E5E5"> timing difference was due to a</font>

1140
00:45:31,079 --> 00:45:34,619
different oscillator configuration or

1141
00:45:32,609 --> 00:45:36,089
just<font color="#E5E5E5"> a different software path but by</font>

1142
00:45:34,619 --> 00:45:38,160
adjusting the timing<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the glitches the</font>

1143
00:45:36,089 --> 00:45:40,710
executable code payload runs as it did

1144
00:45:38,160 --> 00:45:42,420
on the previous chips<font color="#E5E5E5"> so now we can read</font>

1145
00:45:40,710 --> 00:45:44,489
<font color="#E5E5E5">the</font><font color="#CCCCCC"> round contents of a valid acp</font>

1146
00:45:42,420 --> 00:45:47,039
<font color="#E5E5E5">including the category keys if the</font>

1147
00:45:44,489 --> 00:45:48,420
<font color="#E5E5E5">set-top box at current authorization as</font>

1148
00:45:47,039 --> 00:45:52,469
well as the<font color="#CCCCCC"> seed</font><font color="#E5E5E5"> keys that are used by</font>

1149
00:45:48,420 --> 00:45:55,200
<font color="#E5E5E5">this a</font><font color="#CCCCCC"> cpg crispy M&MS without</font><font color="#E5E5E5"> about</font>

1150
00:45:52,469 --> 00:45:57,089
<font color="#E5E5E5">with a valid category</font><font color="#CCCCCC"> key</font><font color="#E5E5E5"> ECM can be</font>

1151
00:45:55,200 --> 00:46:02,009
decrypted and correct<font color="#E5E5E5"> working</font><font color="#CCCCCC"> key can be</font>

1152
00:45:57,089 --> 00:46:03,420
calculated for any channel now with the

1153
00:46:02,009 --> 00:46:05,759
capability of running my own<font color="#CCCCCC"> Court of</font>

1154
00:46:03,420 --> 00:46:08,069
the<font color="#CCCCCC"> ACP</font><font color="#E5E5E5"> it's time to look at the</font>

1155
00:46:05,759 --> 00:46:09,900
transport stream descrambling<font color="#E5E5E5"> there's a</font>

1156
00:46:08,069 --> 00:46:12,630
hardware<font color="#E5E5E5"> register bit that set or</font><font color="#CCCCCC"> clear</font>

1157
00:46:09,900 --> 00:46:14,339
based on a bite in the ECM 40<font color="#E5E5E5"> when this</font>

1158
00:46:12,630 --> 00:46:16,529
<font color="#E5E5E5">bit is clear</font><font color="#CCCCCC"> standards description</font><font color="#E5E5E5"> is</font>

1159
00:46:14,339 --> 00:46:18,150
used when the bit is set the transport

1160
00:46:16,529 --> 00:46:20,249
stream<font color="#E5E5E5"> descrambler acts differently</font>

1161
00:46:18,150 --> 00:46:22,650
additionally<font color="#E5E5E5"> there's an 8-bit hardware</font>

1162
00:46:20,249 --> 00:46:24,180
register in the desperate<font color="#CCCCCC"> alaria when</font>

1163
00:46:22,650 --> 00:46:25,769
<font color="#CCCCCC">it's zero the</font><font color="#E5E5E5"> peripheral operates the</font>

1164
00:46:24,180 --> 00:46:27,868
standard<font color="#CCCCCC"> desk for any other value the</font>

1165
00:46:25,769 --> 00:46:29,308
peripheral acts differently<font color="#E5E5E5"> at this</font>

1166
00:46:27,869 --> 00:46:30,809
<font color="#E5E5E5">point I started to think</font><font color="#CCCCCC"> i might be</font>

1167
00:46:29,309 --> 00:46:32,249
looking at doing a gate level reverse

1168
00:46:30,809 --> 00:46:34,589
engineering of the chip to understand

1169
00:46:32,249 --> 00:46:37,049
this functionality<font color="#E5E5E5"> the chips using</font>

1170
00:46:34,589 --> 00:46:39,119
technology that's older so<font color="#CCCCCC"> reverse</font>

1171
00:46:37,049 --> 00:46:40,288
<font color="#CCCCCC">engineering should be feasible but if</font>

1172
00:46:39,119 --> 00:46:41,700
possible<font color="#E5E5E5"> I'd like to avoid all this</font>

1173
00:46:40,289 --> 00:46:43,229
extra work it would be quite<font color="#CCCCCC"> time</font>

1174
00:46:41,700 --> 00:46:44,669
<font color="#CCCCCC">consuming and</font><font color="#E5E5E5"> might give</font><font color="#CCCCCC"> imperfect</font>

1175
00:46:43,229 --> 00:46:46,710
results similar to the optical<font color="#CCCCCC"> rom</font>

1176
00:46:44,670 --> 00:46:48,509
extraction<font color="#CCCCCC"> so I</font><font color="#E5E5E5"> start with trying to</font>

1177
00:46:46,710 --> 00:46:49,890
characterize the scrambling modes<font color="#CCCCCC"> the</font>

1178
00:46:48,509 --> 00:46:50,309
<font color="#E5E5E5">transport stream packet is made up of a</font>

1179
00:46:49,890 --> 00:46:52,319
<font color="#CCCCCC">4 x</font>

1180
00:46:50,309 --> 00:46:55,559
header and 23 blocks of<font color="#CCCCCC"> eight bytes each</font>

1181
00:46:52,319 --> 00:46:58,019
<font color="#E5E5E5">the desktop rates on these</font><font color="#CCCCCC"> 8 x 64 bit</font>

1182
00:46:55,559 --> 00:47:01,410
blocks<font color="#E5E5E5"> by flipping one bit and encrypted</font>

1183
00:46:58,019 --> 00:47:04,140
input<font color="#E5E5E5"> ECB</font><font color="#CCCCCC"> CBC or ofb modes can be</font>

1184
00:47:01,410 --> 00:47:06,509
differentiated<font color="#E5E5E5"> flipping</font><font color="#CCCCCC"> one bit cause an</font>

1185
00:47:04,140 --> 00:47:08,189
<font color="#CCCCCC">eight by block to be corrected and the</font>

1186
00:47:06,509 --> 00:47:10,140
corresponding bit in the following<font color="#E5E5E5"> block</font>

1187
00:47:08,189 --> 00:47:13,259
to be flipped<font color="#CCCCCC"> this indicates CBC mode is</font>

1188
00:47:10,140 --> 00:47:14,879
in use<font color="#E5E5E5"> timing of the input compared to</font>

1189
00:47:13,259 --> 00:47:16,650
the decrypted output was measured with<font color="#CCCCCC"> a</font>

1190
00:47:14,880 --> 00:47:18,479
<font color="#CCCCCC">scrambler standard deaths and in the</font>

1191
00:47:16,650 --> 00:47:20,339
custom hardware mode<font color="#CCCCCC"> no timing</font>

1192
00:47:18,479 --> 00:47:21,779
<font color="#CCCCCC">differences seen this suggests the</font>

1193
00:47:20,339 --> 00:47:24,119
internal properties of<font color="#CCCCCC"> des haven't</font>

1194
00:47:21,779 --> 00:47:25,439
changed<font color="#CCCCCC"> which makes</font><font color="#E5E5E5"> sense because the</font>

1195
00:47:24,119 --> 00:47:27,599
<font color="#CCCCCC">discussion has to</font><font color="#E5E5E5"> be done in real time</font>

1196
00:47:25,439 --> 00:47:29,819
<font color="#E5E5E5">so</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> suggests that</font><font color="#CCCCCC"> crypto</font>

1197
00:47:27,599 --> 00:47:31,439
customizations<font color="#E5E5E5"> are not affecting some</font>

1198
00:47:29,819 --> 00:47:35,009
<font color="#CCCCCC">des internals like the number of rounds</font>

1199
00:47:31,439 --> 00:47:36,719
<font color="#CCCCCC">also by using acp as a decryption oracle</font>

1200
00:47:35,009 --> 00:47:38,519
<font color="#CCCCCC">I determined that the customization</font>

1201
00:47:36,719 --> 00:47:41,789
<font color="#E5E5E5">affects each of the 23 blocks of the</font>

1202
00:47:38,519 --> 00:47:43,769
transport stream differently next<font color="#CCCCCC"> I</font>

1203
00:47:41,789 --> 00:47:45,329
tested<font color="#E5E5E5"> the software using deaths wikis</font>

1204
00:47:43,769 --> 00:47:47,669
<font color="#E5E5E5">these are certain</font><font color="#CCCCCC"> key is not recommended</font>

1205
00:47:45,329 --> 00:47:48,719
<font color="#E5E5E5">for use with death because their</font>

1206
00:47:47,670 --> 00:47:51,689
properties<font color="#CCCCCC"> weekend the cryptographic</font>

1207
00:47:48,719 --> 00:47:53,759
<font color="#E5E5E5">strength</font><font color="#CCCCCC"> aqui of all</font><font color="#E5E5E5"> 0</font><font color="#CCCCCC"> or all 1 bits</font>

1208
00:47:51,689 --> 00:47:55,709
will cause<font color="#E5E5E5"> des</font><font color="#CCCCCC"> description and</font>

1209
00:47:53,759 --> 00:47:56,939
encryption to be identical<font color="#CCCCCC"> that is</font>

1210
00:47:55,709 --> 00:47:58,410
running the same data through and

1211
00:47:56,939 --> 00:48:01,410
correct or decrypt<font color="#E5E5E5"> will give the same</font>

1212
00:47:58,410 --> 00:48:03,118
result<font color="#CCCCCC"> i can test this on an essay CP</font>

1213
00:48:01,410 --> 00:48:06,420
<font color="#E5E5E5">configured for</font><font color="#CCCCCC"> standard s</font><font color="#E5E5E5"> description</font>

1214
00:48:03,119 --> 00:48:07,890
and see the expected<font color="#CCCCCC"> vici</font><font color="#E5E5E5"> behavior when</font>

1215
00:48:06,420 --> 00:48:10,319
tested with<font color="#E5E5E5"> the descrambler and custom</font>

1216
00:48:07,890 --> 00:48:12,689
mode<font color="#E5E5E5"> the</font><font color="#CCCCCC"> wiikey behavior changes using a</font>

1217
00:48:10,319 --> 00:48:14,160
key<font color="#E5E5E5"> of all 0 all</font><font color="#CCCCCC"> one didn't produce the</font>

1218
00:48:12,689 --> 00:48:17,428
same<font color="#CCCCCC"> results</font><font color="#E5E5E5"> and encrypt and decrypt</font>

1219
00:48:14,160 --> 00:48:19,348
modes<font color="#E5E5E5"> looking at the other</font><font color="#CCCCCC"> hardware</font>

1220
00:48:17,429 --> 00:48:21,029
register<font color="#E5E5E5"> testing the desperate with</font>

1221
00:48:19,349 --> 00:48:23,400
different values<font color="#E5E5E5"> in the 8-bit register</font>

1222
00:48:21,029 --> 00:48:26,069
and using<font color="#CCCCCC"> wikis</font><font color="#E5E5E5"> shows that the standard</font>

1223
00:48:23,400 --> 00:48:27,179
<font color="#CCCCCC">as we keep behavior still exist</font><font color="#E5E5E5"> so my</font>

1224
00:48:26,069 --> 00:48:28,799
<font color="#CCCCCC">hundred this point is that one</font>

1225
00:48:27,179 --> 00:48:31,049
customization<font color="#E5E5E5"> affects the key and the</font>

1226
00:48:28,799 --> 00:48:32,369
other customization<font color="#E5E5E5"> affects the data at</font>

1227
00:48:31,049 --> 00:48:34,049
this<font color="#E5E5E5"> point I can't be certain but I have</font>

1228
00:48:32,369 --> 00:48:37,499
a good feeling<font color="#E5E5E5"> about the theory so</font><font color="#CCCCCC"> I</font>

1229
00:48:34,049 --> 00:48:38,999
<font color="#CCCCCC">continue to investigate</font><font color="#E5E5E5"> based on the</font>

1230
00:48:37,499 --> 00:48:40,709
idea that the hardware customization

1231
00:48:38,999 --> 00:48:41,189
affects only the key and<font color="#CCCCCC"> decryption</font><font color="#E5E5E5"> is</font>

1232
00:48:40,709 --> 00:48:42,448
<font color="#CCCCCC">higher</font>

1233
00:48:41,189 --> 00:48:44,160
static<font color="#CCCCCC"> I thought the simplest</font>

1234
00:48:42,449 --> 00:48:46,019
customization<font color="#CCCCCC"> would be an XOR mask</font>

1235
00:48:44,160 --> 00:48:48,479
that's applied to the key before it used

1236
00:48:46,019 --> 00:48:49,919
for description<font color="#CCCCCC"> xor requires only a</font>

1237
00:48:48,479 --> 00:48:51,598
single<font color="#CCCCCC"> gate in series with the best</font>

1238
00:48:49,920 --> 00:48:53,459
engine so it fits the requirements of

1239
00:48:51,599 --> 00:48:55,799
fast and very simple<font color="#CCCCCC"> to implement in</font>

1240
00:48:53,459 --> 00:48:57,149
<font color="#E5E5E5">hardware</font><font color="#CCCCCC"> a change of even a single bit</font>

1241
00:48:55,799 --> 00:48:57,950
in the key<font color="#E5E5E5"> could cause the observed</font>

1242
00:48:57,150 --> 00:48:59,540
effects

1243
00:48:57,950 --> 00:49:01,098
<font color="#E5E5E5">flipping more than 28 bits would be</font>

1244
00:48:59,540 --> 00:49:04,339
pointless that's the same as inverting a

1245
00:49:01,099 --> 00:49:06,020
key and flipping fewer bits<font color="#CCCCCC"> more</font>

1246
00:49:04,339 --> 00:49:07,460
<font color="#CCCCCC">footprints</font><font color="#E5E5E5"> means more gates necessary</font>

1247
00:49:06,020 --> 00:49:09,800
for the customization so it makes sense

1248
00:49:07,460 --> 00:49:12,050
<font color="#CCCCCC">to</font><font color="#E5E5E5"> flip minimal number of bits so</font><font color="#CCCCCC"> i</font>

1249
00:49:09,800 --> 00:49:14,390
wrote<font color="#E5E5E5"> this wonderful</font><font color="#CCCCCC"> for loop</font><font color="#E5E5E5"> nested</font><font color="#CCCCCC"> 16</font>

1250
00:49:12,050 --> 00:49:15,829
levels deep<font color="#E5E5E5"> to test description results</font>

1251
00:49:14,390 --> 00:49:17,839
after flipping one bit of the key<font color="#CCCCCC"> than</font>

1252
00:49:15,829 --> 00:49:20,089
flipping<font color="#CCCCCC"> to</font><font color="#E5E5E5"> bits</font><font color="#CCCCCC"> three bits and so on</font><font color="#E5E5E5"> up</font>

1253
00:49:17,839 --> 00:49:21,799
<font color="#E5E5E5">to 16 bits to test all the possible keys</font>

1254
00:49:20,089 --> 00:49:23,690
will take a long time but if only a few

1255
00:49:21,800 --> 00:49:26,150
bits<font color="#E5E5E5"> or flip then it might be possible</font>

1256
00:49:23,690 --> 00:49:27,980
to run<font color="#E5E5E5"> in a shorter period of time and</font>

1257
00:49:26,150 --> 00:49:30,140
promising results did come quickly

1258
00:49:27,980 --> 00:49:31,520
it turns out the theory held up and some

1259
00:49:30,140 --> 00:49:33,470
of the<font color="#E5E5E5"> blocks have</font><font color="#CCCCCC"> this fuse 3</font><font color="#E5E5E5"> bits</font>

1260
00:49:31,520 --> 00:49:36,109
flipped this takes only seconds for the

1261
00:49:33,470 --> 00:49:38,240
software to identify<font color="#E5E5E5"> after verifying</font>

1262
00:49:36,109 --> 00:49:39,890
that these work<font color="#CCCCCC"> for extra maps</font><font color="#E5E5E5"> for these</font>

1263
00:49:38,240 --> 00:49:42,770
<font color="#E5E5E5">blocks the software then was left</font>

1264
00:49:39,890 --> 00:49:44,598
running to find all 23 asks the simple

1265
00:49:42,770 --> 00:49:46,579
<font color="#E5E5E5">brute force method</font><font color="#CCCCCC"> worked around for a</font>

1266
00:49:44,599 --> 00:49:49,550
couple of days to identify all the<font color="#E5E5E5"> 23</font>

1267
00:49:46,579 --> 00:49:50,810
masks<font color="#CCCCCC"> by more carefully analyzing which</font>

1268
00:49:49,550 --> 00:49:53,119
bits are being flipped in the early

1269
00:49:50,810 --> 00:49:54,078
results<font color="#CCCCCC"> a pattern can actually be found</font>

1270
00:49:53,119 --> 00:49:56,240
so the search could have been more

1271
00:49:54,079 --> 00:49:57,470
limited<font color="#E5E5E5"> using this technique the</font>

1272
00:49:56,240 --> 00:50:02,149
software<font color="#E5E5E5"> tracker</font><font color="#CCCCCC"> you could have</font>

1273
00:49:57,470 --> 00:50:03,649
completed it in under a second<font color="#CCCCCC"> after</font>

1274
00:50:02,150 --> 00:50:05,329
successfully solving the<font color="#E5E5E5"> first hardware</font>

1275
00:50:03,650 --> 00:50:08,000
customization the theory that the<font color="#E5E5E5"> second</font>

1276
00:50:05,329 --> 00:50:08,780
customization is the data<font color="#CCCCCC"> X or looks</font>

1277
00:50:08,000 --> 00:50:10,760
promising

1278
00:50:08,780 --> 00:50:12,740
it makes sense that one or more<font color="#CCCCCC"> xor gate</font>

1279
00:50:10,760 --> 00:50:15,800
<font color="#E5E5E5">is enabled by each bit of the 8-bit</font>

1280
00:50:12,740 --> 00:50:17,779
<font color="#E5E5E5">hardware register using the</font><font color="#CCCCCC"> acct is</font><font color="#E5E5E5"> a</font>

1281
00:50:15,800 --> 00:50:19,430
<font color="#CCCCCC">description oracle unknown</font><font color="#E5E5E5"> key and data</font>

1282
00:50:17,780 --> 00:50:22,040
are decrypted with all values of the

1283
00:50:19,430 --> 00:50:24,950
8-bit register<font color="#E5E5E5"> software attack of this</font>

1284
00:50:22,040 --> 00:50:27,680
function was successful and 255<font color="#CCCCCC"> explore</font>

1285
00:50:24,950 --> 00:50:30,200
masks for<font color="#E5E5E5"> identify</font><font color="#CCCCCC"> behavior matching</font>

1286
00:50:27,680 --> 00:50:32,240
what was expected<font color="#CCCCCC"> i haven't actually</font>

1287
00:50:30,200 --> 00:50:34,430
seen this customization in actual use

1288
00:50:32,240 --> 00:50:35,689
<font color="#E5E5E5">presumably they're saving it to be used</font>

1289
00:50:34,430 --> 00:50:37,790
as a countermeasure against pirate

1290
00:50:35,690 --> 00:50:39,230
devices when necessary<font color="#E5E5E5"> but it hasn't</font>

1291
00:50:37,790 --> 00:50:49,870
been necessary since the system never

1292
00:50:39,230 --> 00:50:53,350
had a security breach

1293
00:50:49,870 --> 00:50:54,339
<font color="#CCCCCC">in order to implement a soft</font><font color="#E5E5E5"> count</font><font color="#CCCCCC"> the</font>

1294
00:50:53,350 --> 00:50:56,440
software implementation of the

1295
00:50:54,340 --> 00:50:58,600
descrambler<font color="#E5E5E5"> a few cryptographic details</font>

1296
00:50:56,440 --> 00:51:01,150
need to<font color="#CCCCCC"> buy</font><font color="#E5E5E5"> the identified but at this</font>

1297
00:50:58,600 --> 00:51:03,190
point I have all the tools to do so<font color="#CCCCCC"> the</font>

1298
00:51:01,150 --> 00:51:05,200
initialization vector<font color="#CCCCCC"> used for</font><font color="#E5E5E5"> CPC mode</font>

1299
00:51:03,190 --> 00:51:06,790
can be found through simple acts or<font color="#E5E5E5"> and</font>

1300
00:51:05,200 --> 00:51:08,830
the handling of short blocks<font color="#E5E5E5"> those less</font>

1301
00:51:06,790 --> 00:51:11,050
than the<font color="#E5E5E5"> 64-bit</font><font color="#CCCCCC"> desk block size can be</font>

1302
00:51:08,830 --> 00:51:12,880
identified likewise with all these

1303
00:51:11,050 --> 00:51:15,430
details<font color="#CCCCCC"> a software implementation of the</font>

1304
00:51:12,880 --> 00:51:17,110
<font color="#CCCCCC">emm</font><font color="#E5E5E5"> description of category key and ECM</font>

1305
00:51:15,430 --> 00:51:19,180
<font color="#CCCCCC">decryption program key and working he's</font>

1306
00:51:17,110 --> 00:51:20,800
can<font color="#E5E5E5"> be made and the transport stream</font>

1307
00:51:19,180 --> 00:51:23,710
<font color="#E5E5E5">descrambler can also be implemented in</font>

1308
00:51:20,800 --> 00:51:25,390
software<font color="#E5E5E5"> the rapid key changes in use of</font>

1309
00:51:23,710 --> 00:51:26,890
deaths with<font color="#CCCCCC"> hardware customizations</font>

1310
00:51:25,390 --> 00:51:28,779
makes it a bit different to implement

1311
00:51:26,890 --> 00:51:30,940
compared to a soft comfort typical<font color="#CCCCCC"> TV</font>

1312
00:51:28,780 --> 00:51:35,470
systems<font color="#E5E5E5"> but overall the concept is the</font>

1313
00:51:30,940 --> 00:51:36,910
same<font color="#E5E5E5"> and now it's all working</font><font color="#CCCCCC"> i was able</font>

1314
00:51:35,470 --> 00:51:38,859
to test it and<font color="#E5E5E5"> it's fully working on</font>

1315
00:51:36,910 --> 00:51:40,779
both the satellite and<font color="#E5E5E5"> cable systems</font>

1316
00:51:38,860 --> 00:51:43,090
this is a screen that's broadcast before

1317
00:51:40,780 --> 00:51:44,710
pay-per-view event goes live<font color="#E5E5E5"> the</font>

1318
00:51:43,090 --> 00:51:46,420
pay-per-view like all other channels can

1319
00:51:44,710 --> 00:51:47,890
be decrypted with<font color="#CCCCCC"> a soft and using the</font>

1320
00:51:46,420 --> 00:51:50,980
algorithms learned in these keys that

1321
00:51:47,890 --> 00:51:53,980
are extracted with the ECM<font color="#E5E5E5"> and</font><font color="#CCCCCC"> emm</font>

1322
00:51:50,980 --> 00:51:55,990
algorithms and<font color="#CCCCCC"> seed</font><font color="#E5E5E5"> keys for set-top box</font>

1323
00:51:53,980 --> 00:51:58,120
with any level of<font color="#E5E5E5"> authorization the</font>

1324
00:51:55,990 --> 00:51:59,919
category can be<font color="#CCCCCC"> corrected and then you</font>

1325
00:51:58,120 --> 00:52:01,779
<font color="#E5E5E5">secret to decrypt any and all</font><font color="#CCCCCC"> the</font>

1326
00:51:59,920 --> 00:52:12,030
channels that<font color="#E5E5E5"> are broadcast by this</font>

1327
00:52:01,780 --> 00:52:15,690
provider

1328
00:52:12,030 --> 00:52:18,540
<font color="#CCCCCC">a few of the weaknesses that identified</font>

1329
00:52:15,690 --> 00:52:21,000
in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> system where that the acpi</font><font color="#CCCCCC"> study</font>

1330
00:52:18,540 --> 00:52:22,950
<font color="#E5E5E5">is relatively old technology almost 20</font>

1331
00:52:21,000 --> 00:52:24,930
years old<font color="#CCCCCC"> so this makes it a lot easier</font>

1332
00:52:22,950 --> 00:52:28,890
for invasive analysis today than when it

1333
00:52:24,930 --> 00:52:30,390
was<font color="#E5E5E5"> brand-new</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> tqfp 100 package is</font>

1334
00:52:28,890 --> 00:52:32,879
quite easy to deal with compared to

1335
00:52:30,390 --> 00:52:34,980
modern alternatives<font color="#CCCCCC"> the chip business</font>

1336
00:52:32,880 --> 00:52:38,640
<font color="#E5E5E5">susceptible to the voltage glitching</font>

1337
00:52:34,980 --> 00:52:40,830
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> a von Neumann architecture without</font>

1338
00:52:38,640 --> 00:52:43,770
strong<font color="#CCCCCC"> mu</font><font color="#E5E5E5"> protection preventing code to</font>

1339
00:52:40,830 --> 00:52:45,810
be executed from<font color="#CCCCCC"> around they didn't</font>

1340
00:52:43,770 --> 00:52:47,190
leave any possibility for code update<font color="#E5E5E5"> or</font>

1341
00:52:45,810 --> 00:52:49,710
dynamic code execution for

1342
00:52:47,190 --> 00:52:52,260
countermeasure purposes<font color="#E5E5E5"> the software for</font>

1343
00:52:49,710 --> 00:52:53,910
the ACPs contained entirely in<font color="#CCCCCC"> rom</font><font color="#E5E5E5"> with</font>

1344
00:52:52,260 --> 00:52:57,090
no mechanism for software updates<font color="#CCCCCC"> in the</font>

1345
00:52:53,910 --> 00:53:00,180
field<font color="#E5E5E5"> the hardware customizations the</font>

1346
00:52:57,090 --> 00:53:02,340
<font color="#E5E5E5">crypt or quite simple and required no</font>

1347
00:53:00,180 --> 00:53:04,169
reverse engineering of the<font color="#E5E5E5"> chip logic</font><font color="#CCCCCC"> i</font>

1348
00:53:02,340 --> 00:53:09,330
was<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it basically able to guess the</font>

1349
00:53:04,170 --> 00:53:10,650
hardware customizations<font color="#CCCCCC"> i was impressed</font>

1350
00:53:09,330 --> 00:53:11,700
with the design of the system

1351
00:53:10,650 --> 00:53:13,290
it<font color="#E5E5E5"> was actually stronger than</font><font color="#CCCCCC"> i</font>

1352
00:53:11,700 --> 00:53:16,259
anticipated when<font color="#CCCCCC"> I started the project</font>

1353
00:53:13,290 --> 00:53:18,210
<font color="#E5E5E5">all the key handling and</font><font color="#CCCCCC"> decryption</font><font color="#E5E5E5"> is</font>

1354
00:53:16,260 --> 00:53:19,800
<font color="#E5E5E5">contained within a single chip which</font>

1355
00:53:18,210 --> 00:53:21,180
makes it<font color="#E5E5E5"> impossible to</font><font color="#CCCCCC"> Dukey sharing</font>

1356
00:53:19,800 --> 00:53:24,240
that's being done with some of the smart

1357
00:53:21,180 --> 00:53:25,980
card<font color="#E5E5E5"> systems the fast working</font><font color="#CCCCCC"> he change</font>

1358
00:53:24,240 --> 00:53:28,229
interval<font color="#E5E5E5"> only a hundred 33 milliseconds</font>

1359
00:53:25,980 --> 00:53:30,420
also<font color="#E5E5E5"> makes</font><font color="#CCCCCC"> key</font><font color="#E5E5E5"> sharing more difficult</font>

1360
00:53:28,230 --> 00:53:31,980
and the short<font color="#CCCCCC"> tight lifetime of the</font><font color="#E5E5E5"> key</font>

1361
00:53:30,420 --> 00:53:35,160
makes cracking it in<font color="#CCCCCC"> real-time quite</font>

1362
00:53:31,980 --> 00:53:36,930
unrealistic<font color="#E5E5E5"> the lack of code in any</font>

1363
00:53:35,160 --> 00:53:38,670
<font color="#E5E5E5">rewritable memory means there's nowhere</font>

1364
00:53:36,930 --> 00:53:42,029
to write code for permanent<font color="#CCCCCC"> backdoor to</font>

1365
00:53:38,670 --> 00:53:45,390
disable the access or it to disable the

1366
00:53:42,030 --> 00:53:47,340
access controls<font color="#CCCCCC"> i listed this also has a</font>

1367
00:53:45,390 --> 00:53:49,560
weakness<font color="#E5E5E5"> but in fact this is</font><font color="#CCCCCC"> a strength</font>

1368
00:53:47,340 --> 00:53:51,270
as it limits the attackers capability to

1369
00:53:49,560 --> 00:53:54,420
install any kind of persistent<font color="#CCCCCC"> backdoor</font>

1370
00:53:51,270 --> 00:53:56,280
<font color="#E5E5E5">the chip operates on an internal clock</font>

1371
00:53:54,420 --> 00:53:57,840
eliminating<font color="#CCCCCC"> clock which attack and</font>

1372
00:53:56,280 --> 00:54:01,050
making timing<font color="#CCCCCC"> of voltage collection a</font>

1373
00:53:57,840 --> 00:54:03,060
lot more difficult<font color="#E5E5E5"> these dead addresses</font>

1374
00:54:01,050 --> 00:54:05,280
in the middle of Deskis<font color="#E5E5E5"> prevent linear</font>

1375
00:54:03,060 --> 00:54:06,870
readout of keys<font color="#E5E5E5"> if one were to cause a</font>

1376
00:54:05,280 --> 00:54:08,490
loop reading data to go out of balance

1377
00:54:06,870 --> 00:54:10,529
and reach the area<font color="#CCCCCC"> around where keys are</font>

1378
00:54:08,490 --> 00:54:12,779
<font color="#CCCCCC">stored</font><font color="#E5E5E5"> the chip will reset before an</font>

1379
00:54:10,530 --> 00:54:15,030
entire<font color="#CCCCCC"> key</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> red after</font><font color="#E5E5E5"> the first couple</font>

1380
00:54:12,780 --> 00:54:18,410
of bites<font color="#CCCCCC"> a dead address will be accessed</font>

1381
00:54:15,030 --> 00:54:20,089
that causes the<font color="#E5E5E5"> trip to reset</font>

1382
00:54:18,410 --> 00:54:22,460
<font color="#E5E5E5">personalization</font><font color="#CCCCCC"> rom</font><font color="#E5E5E5"> appears to be</font>

1383
00:54:20,089 --> 00:54:24,650
<font color="#E5E5E5">inaccessible</font><font color="#CCCCCC"> so it can easily be used to</font>

1384
00:54:22,460 --> 00:54:29,059
modify the keys and unit address within

1385
00:54:24,650 --> 00:54:31,430
the<font color="#CCCCCC"> ACP the cds</font><font color="#E5E5E5"> aren't easily changed so</font>

1386
00:54:29,059 --> 00:54:34,760
the<font color="#E5E5E5"> set-top boxes can't easily be cloned</font>

1387
00:54:31,430 --> 00:54:36,230
the keys<font color="#CCCCCC"> exist only</font><font color="#E5E5E5"> around</font><font color="#CCCCCC"> so you</font><font color="#E5E5E5"> have</font>

1388
00:54:34,760 --> 00:54:38,510
to maintain a battery backup at all

1389
00:54:36,230 --> 00:54:41,990
times<font color="#CCCCCC"> this rules out a lot of invasive</font>

1390
00:54:38,510 --> 00:54:44,510
attacks to retrieve the keys and there

1391
00:54:41,990 --> 00:54:46,848
are no<font color="#E5E5E5"> group</font><font color="#CCCCCC"> he's used for EMS</font><font color="#E5E5E5"> all unit</font>

1392
00:54:44,510 --> 00:54:48,470
addressing is<font color="#E5E5E5"> to individual units</font><font color="#CCCCCC"> so you</font>

1393
00:54:46,849 --> 00:54:50,119
have to pull keys from an actively

1394
00:54:48,470 --> 00:54:53,058
subscribe box in order to get active

1395
00:54:50,119 --> 00:54:55,309
keys<font color="#CCCCCC"> that said if you have</font><font color="#E5E5E5"> keys from a</font>

1396
00:54:53,059 --> 00:54:56,750
box that<font color="#E5E5E5"> is subscribe to any channel you</font>

1397
00:54:55,309 --> 00:54:58,609
<font color="#E5E5E5">will receive an emm containing the</font>

1398
00:54:56,750 --> 00:55:00,740
category<font color="#E5E5E5"> he which is capable of</font>

1399
00:54:58,609 --> 00:55:01,759
decrypting all channels<font color="#CCCCCC"> so you don't</font>

1400
00:55:00,740 --> 00:55:03,470
need to have a subscription to all

1401
00:55:01,760 --> 00:55:04,640
channels you want to decrypt<font color="#E5E5E5"> as long as</font>

1402
00:55:03,470 --> 00:55:06,078
<font color="#E5E5E5">you're authorized for at least one</font>

1403
00:55:04,640 --> 00:55:11,210
channel on the system

1404
00:55:06,079 --> 00:55:13,460
the software<font color="#E5E5E5"> is generally</font><font color="#CCCCCC"> well-designed</font>

1405
00:55:11,210 --> 00:55:14,270
<font color="#E5E5E5">written</font><font color="#CCCCCC"> i didn't notice any glaring bugs</font>

1406
00:55:13,460 --> 00:55:17,660
<font color="#E5E5E5">within it</font>

1407
00:55:14,270 --> 00:55:20,030
although<font color="#E5E5E5"> des is used the</font><font color="#CCCCCC"> mm decryption</font>

1408
00:55:17,660 --> 00:55:21,470
requires using<font color="#CCCCCC"> three Deskis</font><font color="#E5E5E5"> and multiple</font>

1409
00:55:20,030 --> 00:55:24,950
rounds<font color="#CCCCCC"> were performed when decrypting</font>

1410
00:55:21,470 --> 00:55:26,598
<font color="#E5E5E5">M&E cm's so this part isn't as simple as</font>

1411
00:55:24,950 --> 00:55:30,020
<font color="#E5E5E5">cracking a single 56 bit key</font>

1412
00:55:26,599 --> 00:55:31,640
<font color="#E5E5E5">brute-forcing starting from the</font>

1413
00:55:30,020 --> 00:55:33,710
encrypted transport stream requires

1414
00:55:31,640 --> 00:55:35,868
<font color="#E5E5E5">cracking</font><font color="#CCCCCC"> working key then program key</font>

1415
00:55:33,710 --> 00:55:44,569
<font color="#E5E5E5">then category key and finally the three</font>

1416
00:55:35,869 --> 00:55:45,859
<font color="#CCCCCC">cds you might wonder how many set-top</font>

1417
00:55:44,569 --> 00:55:55,020
<font color="#CCCCCC">boxes it took for me to complete this</font>

1418
00:55:45,859 --> 00:55:58,049
project

1419
00:55:55,020 --> 00:56:02,820
<font color="#E5E5E5">the truth is</font><font color="#CCCCCC"> I only needed the one</font>

1420
00:55:58,050 --> 00:56:05,100
<font color="#CCCCCC">truckload</font><font color="#E5E5E5"> some of the boxes had</font>

1421
00:56:02,820 --> 00:56:07,230
different<font color="#CCCCCC"> versions.the acp chip many of</font>

1422
00:56:05,100 --> 00:56:08,730
the<font color="#CCCCCC"> boxes at different PCB layout</font><font color="#E5E5E5"> so it</font>

1423
00:56:07,230 --> 00:56:11,220
was interesting to be able to look at a

1424
00:56:08,730 --> 00:56:13,950
variety of boxes<font color="#CCCCCC"> the</font><font color="#E5E5E5"> cost of you</font><font color="#CCCCCC"> set top</font>

1425
00:56:11,220 --> 00:56:15,509
<font color="#E5E5E5">boxes was low around twenty dollars and</font>

1426
00:56:13,950 --> 00:56:17,069
for this research is focusing on the

1427
00:56:15,510 --> 00:56:18,630
signal<font color="#E5E5E5"> security and didn't need the</font><font color="#CCCCCC"> PVR</font>

1428
00:56:17,070 --> 00:56:19,950
functionality or any of the advanced

1429
00:56:18,630 --> 00:56:25,590
features from the<font color="#E5E5E5"> expensive</font><font color="#CCCCCC"> set-top</font>

1430
00:56:19,950 --> 00:56:27,779
boxes<font color="#CCCCCC"> so at</font><font color="#E5E5E5"> this point</font><font color="#CCCCCC"> I have</font><font color="#E5E5E5"> a brief</font>

1431
00:56:25,590 --> 00:56:30,270
anti-piracy message<font color="#CCCCCC"> i don't recommend</font>

1432
00:56:27,780 --> 00:56:31,890
you pirate cable or satellite TV<font color="#CCCCCC"> there's</font>

1433
00:56:30,270 --> 00:56:33,030
<font color="#CCCCCC">never anything good on it doesn't matter</font>

1434
00:56:31,890 --> 00:56:34,680
how many channels you<font color="#E5E5E5"> can decrypt</font>

1435
00:56:33,030 --> 00:56:48,390
<font color="#E5E5E5">believe me</font><font color="#CCCCCC"> I looked</font><font color="#E5E5E5"> it's not worth the</font>

1436
00:56:34,680 --> 00:56:53,279
effort

1437
00:56:48,390 --> 00:56:59,490
<font color="#E5E5E5">do we have questions from the room</font>

1438
00:56:53,279 --> 00:57:01,349
questions please use the microphones<font color="#CCCCCC"> i</font>

1439
00:56:59,490 --> 00:57:02,609
know there<font color="#E5E5E5"> is one question from the</font>

1440
00:57:01,349 --> 00:57:08,339
<font color="#E5E5E5">interwebs</font>

1441
00:57:02,609 --> 00:57:09,960
<font color="#CCCCCC">ok I</font><font color="#E5E5E5"> don't know this is working</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> so</font>

1442
00:57:08,339 --> 00:57:14,549
the<font color="#E5E5E5"> first question from the internet is</font>

1443
00:57:09,960 --> 00:57:16,680
how many chips<font color="#E5E5E5"> did you destroy or make</font>

1444
00:57:14,549 --> 00:57:21,630
unusable and how did you get all those

1445
00:57:16,680 --> 00:57:24,690
<font color="#E5E5E5">set</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> boxes because the cost of the</font>

1446
00:57:21,630 --> 00:57:26,849
<font color="#CCCCCC">set-top boxes was quite low I wasn't</font>

1447
00:57:24,690 --> 00:57:29,730
afraid to destroy several<font color="#CCCCCC"> ships</font><font color="#E5E5E5"> in the</font>

1448
00:57:26,849 --> 00:57:32,670
process<font color="#E5E5E5"> of it didn't take as many as I</font>

1449
00:57:29,730 --> 00:57:35,579
would have expected in the beginning two

1450
00:57:32,670 --> 00:57:38,700
or three chips were used to<font color="#E5E5E5"> for the</font>

1451
00:57:35,579 --> 00:57:40,230
<font color="#CCCCCC">calculation</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> d layering process i</font>

1452
00:57:38,700 --> 00:57:42,390
ended up extracting the room from a

1453
00:57:40,230 --> 00:57:45,510
single chip and then when it came to

1454
00:57:42,390 --> 00:57:47,970
glitching<font color="#E5E5E5"> there were three or four chips</font>

1455
00:57:45,510 --> 00:57:50,339
that<font color="#CCCCCC"> I removed any race around from to</font>

1456
00:57:47,970 --> 00:57:52,109
develop the glitch<font color="#E5E5E5"> when</font><font color="#CCCCCC"> i finally got to</font>

1457
00:57:50,339 --> 00:57:54,089
<font color="#E5E5E5">the point where</font><font color="#CCCCCC"> i was extracting heat</font>

1458
00:57:52,109 --> 00:57:55,920
from a valid<font color="#E5E5E5"> ship the very first</font><font color="#CCCCCC"> trip</font>

1459
00:57:54,089 --> 00:57:57,299
that<font color="#E5E5E5"> I tried</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> so there were few</font>

1460
00:57:55,920 --> 00:58:01,980
casualties<font color="#E5E5E5"> involved</font>

1461
00:57:57,299 --> 00:58:02,819
Thank You microphone<font color="#CCCCCC"> three was the first</font>

1462
00:58:01,980 --> 00:58:05,549
one<font color="#E5E5E5"> please</font>

1463
00:58:02,819 --> 00:58:06,900
how many years did this<font color="#E5E5E5"> portrait</font><font color="#CCCCCC"> kick</font>

1464
00:58:05,549 --> 00:58:10,770
you

1465
00:58:06,900 --> 00:58:13,109
<font color="#CCCCCC">I would work for a few weeks at a time</font>

1466
00:58:10,770 --> 00:58:14,880
and then get burnt out and take a break

1467
00:58:13,109 --> 00:58:16,529
and then come back to it

1468
00:58:14,880 --> 00:58:21,240
most<font color="#E5E5E5"> of the work for the project was</font>

1469
00:58:16,529 --> 00:58:24,869
completed over about a<font color="#CCCCCC"> two-year period</font>

1470
00:58:21,240 --> 00:58:28,078
<font color="#E5E5E5">thank you and microphone to please and</font>

1471
00:58:24,869 --> 00:58:30,150
<font color="#CCCCCC">hi</font><font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> for a great lecture</font><font color="#E5E5E5"> how</font>

1472
00:58:28,079 --> 00:58:35,190
comes<font color="#E5E5E5"> it that the content description</font>

1473
00:58:30,150 --> 00:58:36,539
was<font color="#E5E5E5"> and</font><font color="#CCCCCC"> des</font><font color="#E5E5E5"> and not a</font><font color="#CCCCCC"> DVD csa</font><font color="#E5E5E5"> because we</font>

1474
00:58:35,190 --> 00:58:39,329
used<font color="#E5E5E5"> to</font><font color="#CCCCCC"> usually that content is</font>

1475
00:58:36,539 --> 00:58:40,559
encrypted with<font color="#CCCCCC"> dbsa in</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> disease in</font>

1476
00:58:39,329 --> 00:58:41,490
<font color="#CCCCCC">north america we don't believe in</font>

1477
00:58:40,559 --> 00:58:45,809
standards

1478
00:58:41,490 --> 00:58:50,368
<font color="#CCCCCC">ok thanks</font>

1479
00:58:45,809 --> 00:58:51,779
<font color="#E5E5E5">the timing was also a part of it that</font>

1480
00:58:50,369 --> 00:58:53,910
the system was being developed at the

1481
00:58:51,779 --> 00:58:56,339
same time as<font color="#CCCCCC"> DV was being standardized</font>

1482
00:58:53,910 --> 00:58:57,598
<font color="#CCCCCC">so general instrument rather than going</font>

1483
00:58:56,339 --> 00:58:59,160
along with<font color="#E5E5E5"> the standards</font><font color="#CCCCCC"> group</font><font color="#E5E5E5"> and</font>

1484
00:58:57,599 --> 00:59:02,039
waiting for this<font color="#E5E5E5"> and organization they</font>

1485
00:58:59,160 --> 00:59:04,890
went with<font color="#E5E5E5"> DES directly</font>

1486
00:59:02,039 --> 00:59:08,730
thank you and another one from cyber

1487
00:59:04,890 --> 00:59:10,890
space<font color="#CCCCCC"> double ok</font><font color="#E5E5E5"> another question from</font>

1488
00:59:08,730 --> 00:59:12,630
the<font color="#E5E5E5"> internet is you have all this fancy</font>

1489
00:59:10,890 --> 00:59:16,078
like<font color="#E5E5E5"> lab equipment and stuff</font>

1490
00:59:12,630 --> 00:59:18,000
how were you able to<font color="#E5E5E5"> afford that</font><font color="#CCCCCC"> I've</font>

1491
00:59:16,079 --> 00:59:19,650
been quite interested in this for a long

1492
00:59:18,000 --> 00:59:22,799
time so<font color="#E5E5E5"> I've collected this equipment</font>

1493
00:59:19,650 --> 00:59:24,299
<font color="#CCCCCC">over</font><font color="#E5E5E5"> over a period of years of and</font><font color="#CCCCCC"> I do</font>

1494
00:59:22,799 --> 00:59:26,940
some work professionally<font color="#CCCCCC"> in reverse</font>

1495
00:59:24,299 --> 00:59:28,440
engineering<font color="#E5E5E5"> so whenever possible I</font><font color="#CCCCCC"> use a</font>

1496
00:59:26,940 --> 00:59:34,770
<font color="#CCCCCC">client's money</font><font color="#E5E5E5"> to buy another piece of</font>

1497
00:59:28,440 --> 00:59:36,539
equipment for the lab to do this actual

1498
00:59:34,770 --> 00:59:37,950
work though<font color="#CCCCCC"> you could even use more</font>

1499
00:59:36,539 --> 00:59:41,039
basic equipment because of the age of

1500
00:59:37,950 --> 00:59:43,410
the chip<font color="#CCCCCC"> you could use a microscope that</font>

1501
00:59:41,039 --> 00:59:44,819
you<font color="#E5E5E5"> can find easily for</font><font color="#CCCCCC"> 1000 or 2000</font>

1502
00:59:43,410 --> 00:59:47,190
dollars or even less<font color="#E5E5E5"> than have quite</font>

1503
00:59:44,819 --> 00:59:49,049
good results so it's not trivial but

1504
00:59:47,190 --> 00:59:53,460
it's not<font color="#E5E5E5"> a huge amount of money for lab</font>

1505
00:59:49,049 --> 00:59:55,980
equipment<font color="#E5E5E5"> not that huge microphone to</font>

1506
00:59:53,460 --> 00:59:57,690
please<font color="#E5E5E5"> and what do you do for a living</font>

1507
00:59:55,980 --> 01:00:00,470
decides<font color="#CCCCCC"> reverse-engineering</font>

1508
00:59:57,690 --> 01:00:07,010
<font color="#CCCCCC">reverse-engineering that</font>

1509
01:00:00,470 --> 01:00:10,848
<font color="#CCCCCC">thank you</font><font color="#E5E5E5"> and the internet again</font>

1510
01:00:07,010 --> 01:00:13,820
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> next question is you just</font><font color="#CCCCCC"> saw</font>

1511
01:00:10,849 --> 01:00:15,859
<font color="#E5E5E5">somebody wants to know how well which</font>

1512
01:00:13,820 --> 01:00:17,900
software did you use for the automated

1513
01:00:15,859 --> 01:00:21,109
image<font color="#E5E5E5"> analyzing and</font><font color="#CCCCCC"> isn't available</font>

1514
01:00:17,900 --> 01:00:22,700
somewhere<font color="#CCCCCC"> are like everybody else that</font>

1515
01:00:21,109 --> 01:00:26,029
I've known<font color="#E5E5E5"> that's an optical wrong</font>

1516
01:00:22,700 --> 01:00:27,379
extraction<font color="#CCCCCC"> I developed it</font><font color="#E5E5E5"> myself</font>

1517
01:00:26,030 --> 01:00:29,780
everybody seems to develop their own

1518
01:00:27,380 --> 01:00:32,270
tools from scratch for that the<font color="#CCCCCC"> image</font>

1519
01:00:29,780 --> 01:00:33,770
<font color="#CCCCCC">processing i use</font><font color="#E5E5E5"> was really quite simple</font>

1520
01:00:32,270 --> 01:00:35,210
so it didn't it didn't take a lot of

1521
01:00:33,770 --> 01:00:38,270
advanced algorithms or anything like

1522
01:00:35,210 --> 01:00:39,859
that so<font color="#CCCCCC"> I i'm</font><font color="#E5E5E5"> using some software</font>

1523
01:00:38,270 --> 01:00:46,310
developer personally and hasn't been

1524
01:00:39,859 --> 01:00:47,900
released<font color="#E5E5E5"> microphone to police and how</font>

1525
01:00:46,310 --> 01:00:50,330
did you kept the books<font color="#CCCCCC"> by boxes</font>

1526
01:00:47,900 --> 01:00:52,190
<font color="#E5E5E5">subscribed so did you call them every</font>

1527
01:00:50,330 --> 01:00:54,859
week oh my box broke down<font color="#CCCCCC"> I got</font><font color="#E5E5E5"> another</font>

1528
01:00:52,190 --> 01:00:56,180
one<font color="#E5E5E5"> or host system for most of the</font>

1529
01:00:54,859 --> 01:00:57,109
research that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> did I didn't need an</font>

1530
01:00:56,180 --> 01:00:59,180
active box

1531
01:00:57,109 --> 01:01:01,759
<font color="#E5E5E5">I</font><font color="#CCCCCC"> i did all the research just on I'd</font>

1532
01:00:59,180 --> 01:01:04,098
previously activated boxes that had lost

1533
01:01:01,760 --> 01:01:05,869
<font color="#CCCCCC">for</font><font color="#E5E5E5"> authorization and by the time</font><font color="#CCCCCC"> I had</font>

1534
01:01:04,099 --> 01:01:08,119
the process figured out that<font color="#CCCCCC"> I knew how</font>

1535
01:01:05,869 --> 01:01:09,320
to attract he's from a valid box<font color="#CCCCCC"> i</font><font color="#E5E5E5"> only</font>

1536
01:01:08,119 --> 01:01:11,359
needed<font color="#CCCCCC"> the</font><font color="#E5E5E5"> one box</font>

1537
01:01:09,320 --> 01:01:13,490
<font color="#CCCCCC">yeah and have you heard back from the</font>

1538
01:01:11,359 --> 01:01:16,880
cable provider about this

1539
01:01:13,490 --> 01:01:17,750
<font color="#CCCCCC">no okay thank you microphone</font><font color="#E5E5E5"> three</font>

1540
01:01:16,880 --> 01:01:20,570
<font color="#E5E5E5">please</font>

1541
01:01:17,750 --> 01:01:22,339
hello thanks very much for the lecture

1542
01:01:20,570 --> 01:01:25,460
<font color="#CCCCCC">well done all the work</font>

1543
01:01:22,339 --> 01:01:30,410
my question is how does the<font color="#CCCCCC"> pitching</font><font color="#E5E5E5"> or</font>

1544
01:01:25,460 --> 01:01:33,109
glitching attack<font color="#CCCCCC"> for the glitter i was</font>

1545
01:01:30,410 --> 01:01:36,379
<font color="#E5E5E5">was quite simple I</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> drop the voltage</font>

1546
01:01:33,109 --> 01:01:38,930
<font color="#E5E5E5">for a very brief period of time and it's</font>

1547
01:01:36,380 --> 01:01:41,960
enough time that it causes at least one

1548
01:01:38,930 --> 01:01:43,220
instruction to not execute properly<font color="#E5E5E5"> but</font>

1549
01:01:41,960 --> 01:01:45,530
it's too short of a time to cause the

1550
01:01:43,220 --> 01:01:47,720
ship to reset<font color="#E5E5E5"> so essentially i'm</font>

1551
01:01:45,530 --> 01:01:49,580
corrupting one<font color="#E5E5E5"> instruction</font><font color="#CCCCCC"> it is</font><font color="#E5E5E5"> far as</font>

1552
01:01:47,720 --> 01:01:51,740
the specific target that I hit that led

1553
01:01:49,580 --> 01:01:55,040
to my<font color="#CCCCCC"> coat</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> ram I'm not actually sure</font>

1554
01:01:51,740 --> 01:01:57,259
<font color="#E5E5E5">I</font><font color="#CCCCCC"> i found that</font><font color="#E5E5E5"> if I glitch at this time</font>

1555
01:01:55,040 --> 01:01:58,910
then the code ends up executing my code

1556
01:01:57,260 --> 01:02:04,040
<font color="#CCCCCC">good</font><font color="#E5E5E5"> enough for me</font>

1557
01:01:58,910 --> 01:02:06,560
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> thank you Chris please</font><font color="#CCCCCC"> the audience</font>

1558
01:02:04,040 --> 01:02:07,610
give<font color="#E5E5E5"> an anniversary edition</font><font color="#CCCCCC"> applause to</font>

1559
01:02:06,560 --> 01:02:14,840
<font color="#CCCCCC">Christians</font>

1560
01:02:07,610 --> 01:02:45,429
[Applause]

1561
01:02:14,840 --> 01:02:45,429
[Music]

