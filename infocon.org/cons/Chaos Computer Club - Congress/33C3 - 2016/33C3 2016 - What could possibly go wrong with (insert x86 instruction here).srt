1
00:00:01,760 --> 00:00:06,180
[Music]

2
00:00:04,470 --> 00:00:10,969
<font color="#CCCCCC">ok</font>

3
00:00:06,180 --> 00:00:15,500
<font color="#CCCCCC">ok</font>

4
00:00:10,970 --> 00:00:18,590
<font color="#E5E5E5">we are real</font><font color="#CCCCCC"> River</font><font color="#E5E5E5"> motto and the matter</font>

5
00:00:15,500 --> 00:00:20,509
this year is<font color="#E5E5E5"> works for me and</font><font color="#CCCCCC"> I think</font>

6
00:00:18,590 --> 00:00:22,970
<font color="#CCCCCC">who</font><font color="#E5E5E5"> many people how many people in your</font>

7
00:00:20,510 --> 00:00:25,369
programmers<font color="#E5E5E5"> raise your hands or shout or</font>

8
00:00:22,970 --> 00:00:29,150
<font color="#CCCCCC">whoa</font><font color="#E5E5E5"> that's a lot</font>

9
00:00:25,369 --> 00:00:37,280
<font color="#CCCCCC">ok so i think many of you will work on</font>

10
00:00:29,150 --> 00:00:39,079
x86<font color="#E5E5E5"> yeah and I think you assume that it</font>

11
00:00:37,280 --> 00:00:44,450
works and that everything works as

12
00:00:39,079 --> 00:00:48,320
intended and<font color="#E5E5E5"> I mean what could go wrong</font>

13
00:00:44,450 --> 00:00:53,060
our next<font color="#E5E5E5"> talk the first one today</font><font color="#CCCCCC"> will</font>

14
00:00:48,320 --> 00:00:55,490
<font color="#E5E5E5">be by</font><font color="#CCCCCC"> clementi Maurice who previously 10</font>

15
00:00:53,060 --> 00:00:59,270
<font color="#CCCCCC">roja Madge is</font><font color="#E5E5E5"> something i would call</font>

16
00:00:55,490 --> 00:01:02,960
scary and moments live who has worked on

17
00:00:59,270 --> 00:01:07,700
the<font color="#CCCCCC"> imma get on</font><font color="#E5E5E5"> exploit back</font>

18
00:01:02,960 --> 00:01:10,310
what is it<font color="#CCCCCC"> ok so the next I would</font><font color="#E5E5E5"> like</font>

19
00:01:07,700 --> 00:01:13,369
<font color="#E5E5E5">to hear a really warm</font><font color="#CCCCCC"> clothes for</font>

20
00:01:10,310 --> 00:01:16,220
<font color="#E5E5E5">speakers for the talk what could</font><font color="#CCCCCC"> what</font>

21
00:01:13,369 --> 00:01:17,240
could<font color="#CCCCCC"> possibly go wrong with insert x86</font>

22
00:01:16,220 --> 00:01:26,900
instruction here

23
00:01:17,240 --> 00:01:30,560
thank<font color="#E5E5E5"> you</font>

24
00:01:26,900 --> 00:01:31,910
<font color="#E5E5E5">well thank you all for being here this</font>

25
00:01:30,560 --> 00:01:34,040
morning

26
00:01:31,910 --> 00:01:36,920
<font color="#CCCCCC">yes</font><font color="#E5E5E5"> this is all talk what could possibly</font>

27
00:01:34,040 --> 00:01:39,290
go wrong with<font color="#E5E5E5"> instead x86 instruction</font>

28
00:01:36,920 --> 00:01:42,860
here so just<font color="#E5E5E5"> a few words about ourselves</font>

29
00:01:39,290 --> 00:01:44,900
so<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> too</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> noise</font><font color="#CCCCCC"> i got my PhD in</font>

30
00:01:42,860 --> 00:01:46,610
computer science and<font color="#CCCCCC"> I'm not</font><font color="#E5E5E5"> working as</font>

31
00:01:44,900 --> 00:01:49,190
a<font color="#E5E5E5"> postdoc at</font><font color="#CCCCCC"> class</font><font color="#E5E5E5"> university of</font>

32
00:01:46,610 --> 00:01:51,620
technology industry<font color="#E5E5E5"> you can reach me on</font>

33
00:01:49,190 --> 00:01:53,240
<font color="#CCCCCC">twitter</font><font color="#E5E5E5"> of my email but there's also</font><font color="#CCCCCC"> i</font>

34
00:01:51,620 --> 00:01:57,140
think<font color="#E5E5E5"> lots of time before the</font><font color="#CCCCCC"> Congress</font>

35
00:01:53,240 --> 00:01:59,360
<font color="#E5E5E5">is over time and my name is not slip on</font>

36
00:01:57,140 --> 00:02:01,550
<font color="#E5E5E5">my PhD student at</font><font color="#CCCCCC"> cardiff university of</font>

37
00:01:59,360 --> 00:02:04,130
<font color="#CCCCCC">technology and you can also reach me on</font>

38
00:02:01,550 --> 00:02:07,940
<font color="#CCCCCC">twitter or</font><font color="#E5E5E5"> just after our talk and in</font>

39
00:02:04,130 --> 00:02:10,579
the next<font color="#E5E5E5"> days</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> about this talk</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> the</font>

40
00:02:07,940 --> 00:02:13,100
title says this is a talk about<font color="#E5E5E5"> x86</font>

41
00:02:10,580 --> 00:02:14,060
instructions<font color="#CCCCCC"> but</font><font color="#E5E5E5"> this is not a talk</font>

42
00:02:13,100 --> 00:02:17,870
about software

43
00:02:14,060 --> 00:02:20,060
don't leave yet<font color="#CCCCCC"> i'm actually even</font>

44
00:02:17,870 --> 00:02:21,500
assuming safe software<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the point</font>

45
00:02:20,060 --> 00:02:24,080
that we want to make is that safe

46
00:02:21,500 --> 00:02:27,140
software does not mean<font color="#CCCCCC"> safe execution</font>

47
00:02:24,080 --> 00:02:29,209
and we have information leakage because

48
00:02:27,140 --> 00:02:32,208
of the end<font color="#E5E5E5"> lying hardware and this is</font>

49
00:02:29,209 --> 00:02:33,980
what<font color="#E5E5E5"> we're going to talk about today so</font>

50
00:02:32,209 --> 00:02:36,590
<font color="#E5E5E5">we'll be talking about cat attacks what</font>

51
00:02:33,980 --> 00:02:38,390
are they<font color="#CCCCCC"> what</font><font color="#E5E5E5"> can we do is that and</font><font color="#CCCCCC"> all</font>

52
00:02:36,590 --> 00:02:41,480
<font color="#CCCCCC">those special kind of cat attacked that</font>

53
00:02:38,390 --> 00:02:44,089
we found this year<font color="#E5E5E5"> so doing</font><font color="#CCCCCC"> cats without</font>

54
00:02:41,480 --> 00:02:49,549
memory accesses and how to use that even

55
00:02:44,090 --> 00:02:52,010
<font color="#CCCCCC">to</font><font color="#E5E5E5"> bypass can</font><font color="#CCCCCC"> lasl so again the</font><font color="#E5E5E5"> talk</font>

56
00:02:49,550 --> 00:02:53,959
says is to talk about<font color="#CCCCCC"> x86 instructions</font>

57
00:02:52,010 --> 00:02:56,570
but this is even more global<font color="#CCCCCC"> then</font><font color="#E5E5E5"> that</font>

58
00:02:53,959 --> 00:02:59,510
we can also<font color="#E5E5E5"> mount this</font><font color="#CCCCCC"> cash attacks on</font>

59
00:02:56,570 --> 00:03:01,250
<font color="#E5E5E5">arm and not only on x86 or some of the</font>

60
00:02:59,510 --> 00:03:07,549
examples that you will see also applies

61
00:03:01,250 --> 00:03:09,500
to<font color="#E5E5E5"> arm</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> they will to have a bit of</font>

62
00:03:07,550 --> 00:03:11,360
background<font color="#E5E5E5"> but actually most of</font><font color="#CCCCCC"> the</font>

63
00:03:09,500 --> 00:03:14,690
<font color="#CCCCCC">background will</font><font color="#E5E5E5"> be along the lines</font>

64
00:03:11,360 --> 00:03:19,790
because discovers really<font color="#CCCCCC"> huge chunk of</font>

65
00:03:14,690 --> 00:03:22,310
our research<font color="#E5E5E5"> and</font><font color="#CCCCCC"> will see</font><font color="#E5E5E5"> many</font><font color="#CCCCCC"> three</font>

66
00:03:19,790 --> 00:03:26,179
instructions<font color="#E5E5E5"> so move and how we can</font>

67
00:03:22,310 --> 00:03:28,549
perform this cat attacked<font color="#CCCCCC"> what other and</font>

68
00:03:26,180 --> 00:03:30,440
the<font color="#CCCCCC"> instructions will flush so here</font>

69
00:03:28,549 --> 00:03:34,400
we'll be doing cat attacks without any

70
00:03:30,440 --> 00:03:37,750
memory accesses<font color="#E5E5E5"> then we'll see</font><font color="#CCCCCC"> prefetch</font>

71
00:03:34,400 --> 00:03:41,620
<font color="#E5E5E5">and how we can bypass can</font><font color="#CCCCCC"> La Silla and</font>

72
00:03:37,750 --> 00:03:44,500
<font color="#E5E5E5">lots of translations levels and then</font>

73
00:03:41,620 --> 00:03:47,590
there's even a bonus tracks<font color="#CCCCCC"> Lloyd's</font><font color="#E5E5E5"> this</font>

74
00:03:44,500 --> 00:03:50,350
<font color="#E5E5E5">this will be not our works but even more</font>

75
00:03:47,590 --> 00:03:53,620
instructions and even more<font color="#CCCCCC"> texts</font>

76
00:03:50,350 --> 00:03:57,850
<font color="#CCCCCC">ok so let's start with a bit of an</font>

77
00:03:53,620 --> 00:04:00,700
introduction<font color="#E5E5E5"> so on</font><font color="#CCCCCC"> we will be mainly</font>

78
00:03:57,850 --> 00:04:03,100
focusing on<font color="#E5E5E5"> intel cpus and this is our</font>

79
00:04:00,700 --> 00:04:05,019
<font color="#CCCCCC">rough</font><font color="#E5E5E5"> in terms of course in cash is how</font>

80
00:04:03,100 --> 00:04:07,329
it looks like today so we have<font color="#CCCCCC"> a</font>

81
00:04:05,020 --> 00:04:09,190
<font color="#E5E5E5">different levels of course at different</font>

82
00:04:07,330 --> 00:04:11,739
<font color="#CCCCCC">courses</font><font color="#E5E5E5"> so here for calls and different</font>

83
00:04:09,190 --> 00:04:14,320
levels of caches<font color="#E5E5E5"> so here usually we have</font>

84
00:04:11,739 --> 00:04:15,940
three levels of caches<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> 11</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> and</font>

85
00:04:14,320 --> 00:04:17,738
number<font color="#CCCCCC"> 2 then our product which call</font>

86
00:04:15,940 --> 00:04:19,660
<font color="#E5E5E5">which means that call</font><font color="#CCCCCC"> zero can only</font>

87
00:04:17,738 --> 00:04:21,789
<font color="#E5E5E5">access</font><font color="#CCCCCC"> its level one and its level two</font>

88
00:04:19,660 --> 00:04:25,360
and<font color="#CCCCCC"> level 1</font><font color="#E5E5E5"> and level 2 or for example</font>

89
00:04:21,790 --> 00:04:27,760
call<font color="#CCCCCC"> three and we have the last level</font>

90
00:04:25,360 --> 00:04:31,480
cache<font color="#CCCCCC"> so here if you</font><font color="#E5E5E5"> can see the pointer</font>

91
00:04:27,760 --> 00:04:34,030
<font color="#E5E5E5">so this one is divided into slices</font><font color="#CCCCCC"> so we</font>

92
00:04:31,480 --> 00:04:37,180
have as many slices as<font color="#CCCCCC"> call</font><font color="#E5E5E5"> so here four</font>

93
00:04:34,030 --> 00:04:39,700
slices<font color="#E5E5E5"> but all</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> places are shared</font>

94
00:04:37,180 --> 00:04:45,190
across<font color="#CCCCCC"> cool</font><font color="#E5E5E5"> so call</font><font color="#CCCCCC"> zero can access the</font>

95
00:04:39,700 --> 00:04:47,050
<font color="#CCCCCC">whole asteroid capture 01 2013 we also</font>

96
00:04:45,190 --> 00:04:49,660
have a nice property on<font color="#E5E5E5"> the intensive</font>

97
00:04:47,050 --> 00:04:51,370
use is this level of<font color="#E5E5E5"> cash is inclusive</font>

98
00:04:49,660 --> 00:04:53,020
and what it means is that everything

99
00:04:51,370 --> 00:04:55,270
that is<font color="#CCCCCC"> contestant number one</font><font color="#E5E5E5"> and number</font>

100
00:04:53,020 --> 00:04:57,159
<font color="#CCCCCC">two will also be contained in the last</font>

101
00:04:55,270 --> 00:05:01,780
<font color="#E5E5E5">level cache and this</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> prove to be</font>

102
00:04:57,160 --> 00:05:04,270
quite useful for<font color="#E5E5E5"> cash attacks</font><font color="#CCCCCC"> so today</font>

103
00:05:01,780 --> 00:05:07,989
we mostly have<font color="#E5E5E5"> says set associative</font>

104
00:05:04,270 --> 00:05:10,359
caches<font color="#E5E5E5"> what it means is that we have a</font>

105
00:05:07,990 --> 00:05:12,880
data<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> loading specific sets and</font>

106
00:05:10,360 --> 00:05:16,090
that depends only on its address<font color="#E5E5E5"> so we</font>

107
00:05:12,880 --> 00:05:18,340
have some bits of the address that gives

108
00:05:16,090 --> 00:05:20,229
us the index and<font color="#CCCCCC"> that says okay the line</font>

109
00:05:18,340 --> 00:05:23,859
is going to be<font color="#CCCCCC"> loaded</font><font color="#E5E5E5"> in this case</font><font color="#CCCCCC"> it's</font>

110
00:05:20,229 --> 00:05:25,630
so this is a<font color="#CCCCCC"> cash assets and then we</font>

111
00:05:23,860 --> 00:05:29,680
have several ways<font color="#E5E5E5"> percent so here we</font>

112
00:05:25,630 --> 00:05:31,930
have four ways and the<font color="#CCCCCC"> cache line is</font>

113
00:05:29,680 --> 00:05:34,030
going<font color="#E5E5E5"> to be loaded in a specific way and</font>

114
00:05:31,930 --> 00:05:36,430
that will only depend on the replacement

115
00:05:34,030 --> 00:05:39,250
policy and not on the address itself<font color="#E5E5E5"> so</font>

116
00:05:36,430 --> 00:05:41,770
when you load line into the<font color="#CCCCCC"> cache</font>

117
00:05:39,250 --> 00:05:44,530
<font color="#E5E5E5">usually the</font><font color="#CCCCCC"> cash is already full and</font><font color="#E5E5E5"> you</font>

118
00:05:41,770 --> 00:05:46,270
have to make room for a new line<font color="#CCCCCC"> so this</font>

119
00:05:44,530 --> 00:05:47,320
<font color="#E5E5E5">is where the replacement replacement</font>

120
00:05:46,270 --> 00:05:49,870
policy

121
00:05:47,320 --> 00:05:52,030
this is what it does<font color="#E5E5E5"> is</font><font color="#CCCCCC"> ok I'm going</font><font color="#E5E5E5"> to</font>

122
00:05:49,870 --> 00:05:56,860
remove this line to mix to make room for

123
00:05:52,030 --> 00:05:59,500
the next line<font color="#E5E5E5"> so far today we're going</font>

124
00:05:56,860 --> 00:06:00,340
to<font color="#E5E5E5"> see only</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> instructions that</font><font color="#CCCCCC"> been</font>

125
00:05:59,500 --> 00:06:02,170
telling you

126
00:06:00,340 --> 00:06:04,690
<font color="#E5E5E5">so</font><font color="#CCCCCC"> the move instruction it does a lot of</font>

127
00:06:02,170 --> 00:06:07,120
things but the<font color="#E5E5E5"> on</font><font color="#CCCCCC"> CD the aspect that we</font>

128
00:06:04,690 --> 00:06:08,650
<font color="#CCCCCC">are interested about it that can access</font>

129
00:06:07,120 --> 00:06:12,640
data in the main memory

130
00:06:08,650 --> 00:06:14,950
we're going to<font color="#E5E5E5"> see as</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> flash but it</font>

131
00:06:12,640 --> 00:06:18,190
<font color="#CCCCCC">doesn't</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> it removes a cache line</font>

132
00:06:14,950 --> 00:06:20,260
from the cash from the whole<font color="#CCCCCC"> cash and</font>

133
00:06:18,190 --> 00:06:24,219
we're<font color="#CCCCCC"> going to see</font><font color="#E5E5E5"> prefect here</font>

134
00:06:20,260 --> 00:06:27,400
<font color="#CCCCCC">privilege</font><font color="#E5E5E5"> a cache line for future use</font>

135
00:06:24,220 --> 00:06:28,990
so we're going to see what they do and

136
00:06:27,400 --> 00:06:31,479
the kind of side<font color="#E5E5E5"> effect that they have</font>

137
00:06:28,990 --> 00:06:34,390
and all the attacks that we can do with

138
00:06:31,480 --> 00:06:35,860
them and that's basically all the<font color="#CCCCCC"> SMP</font>

139
00:06:34,390 --> 00:06:38,560
<font color="#CCCCCC">you need</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> today</font><font color="#E5E5E5"> so even if you're not</font>

140
00:06:35,860 --> 00:06:42,490
<font color="#E5E5E5">an expert of x86 don't worry it's not</font>

141
00:06:38,560 --> 00:06:45,520
just<font color="#E5E5E5"> like full of assembly in and stuff</font>

142
00:06:42,490 --> 00:06:47,560
<font color="#CCCCCC">okay so onto the</font><font color="#E5E5E5"> first one so we will</font>

143
00:06:45,520 --> 00:06:50,620
first start with the<font color="#CCCCCC"> muffin structure</font>

144
00:06:47,560 --> 00:06:55,930
and actually the first slide is full of

145
00:06:50,620 --> 00:06:57,400
<font color="#CCCCCC">old however</font><font color="#E5E5E5"> as you can see there are</font><font color="#CCCCCC"> at</font>

146
00:06:55,930 --> 00:06:59,800
<font color="#CCCCCC">the mall</font><font color="#E5E5E5"> construction</font><font color="#CCCCCC"> is used to move</font>

147
00:06:57,400 --> 00:07:01,570
data from registers<font color="#CCCCCC"> two</font><font color="#E5E5E5"> registers from</font>

148
00:06:59,800 --> 00:07:03,610
<font color="#E5E5E5">the main memory and back to the main</font>

149
00:07:01,570 --> 00:07:06,130
memory<font color="#CCCCCC"> and as you can see there are many</font>

150
00:07:03,610 --> 00:07:08,140
moves you can use<font color="#E5E5E5"> but basically it's</font>

151
00:07:06,130 --> 00:07:08,890
just<font color="#E5E5E5"> move data and that's all we need to</font>

152
00:07:08,140 --> 00:07:11,469
know

153
00:07:08,890 --> 00:07:14,469
in addition a lot of exceptions<font color="#E5E5E5"> cannot</font>

154
00:07:11,470 --> 00:07:16,660
<font color="#CCCCCC">clear so we can assume that wide</font><font color="#E5E5E5"> those</font>

155
00:07:14,470 --> 00:07:19,450
restrictions are so tight that nothing

156
00:07:16,660 --> 00:07:21,610
can go wrong when you just move data

157
00:07:19,450 --> 00:07:23,920
because moving data is simple

158
00:07:21,610 --> 00:07:27,580
however<font color="#CCCCCC"> why there are a lot of</font>

159
00:07:23,920 --> 00:07:31,270
exceptions<font color="#CCCCCC"> their data that is accessed</font>

160
00:07:27,580 --> 00:07:33,669
<font color="#CCCCCC">is always loaded into the cash</font><font color="#E5E5E5"> so data</font>

161
00:07:31,270 --> 00:07:36,070
is in the cash it<font color="#E5E5E5"> and this is</font>

162
00:07:33,670 --> 00:07:36,790
transparent to the program that is

163
00:07:36,070 --> 00:07:40,180
running

164
00:07:36,790 --> 00:07:41,920
however there are side effects<font color="#E5E5E5"> when you</font>

165
00:07:40,180 --> 00:07:43,810
run<font color="#E5E5E5"> these instructions and we</font><font color="#CCCCCC"> will see</font>

166
00:07:41,920 --> 00:07:46,780
how<font color="#E5E5E5"> they look like with them</font><font color="#CCCCCC"> off</font>

167
00:07:43,810 --> 00:07:49,150
instruction<font color="#E5E5E5"> so you probably all know</font>

168
00:07:46,780 --> 00:07:51,580
that data can either be<font color="#CCCCCC"> interview</font>

169
00:07:49,150 --> 00:07:53,020
registers in the different levels of the

170
00:07:51,580 --> 00:07:57,469
<font color="#E5E5E5">cash that</font><font color="#CCCCCC"> community</font><font color="#E5E5E5"> and show to you</font>

171
00:07:53,020 --> 00:08:00,320
earlier in the main memory on the<font color="#CCCCCC"> disk</font>

172
00:07:57,470 --> 00:08:02,900
depending on where the memory<font color="#E5E5E5"> and data</font>

173
00:08:00,320 --> 00:08:06,680
is located<font color="#E5E5E5"> it</font><font color="#CCCCCC"> leads a</font><font color="#E5E5E5"> longer time to be</font>

174
00:08:02,900 --> 00:08:10,489
loaded back to the<font color="#CCCCCC"> cpu</font><font color="#E5E5E5"> and this is what</font>

175
00:08:06,680 --> 00:08:13,790
we can see in this plot<font color="#E5E5E5"> so we try here</font>

176
00:08:10,490 --> 00:08:16,100
to measure the access time of an address

177
00:08:13,790 --> 00:08:18,560
over and over again assuming that when

178
00:08:16,100 --> 00:08:21,650
we<font color="#CCCCCC"> exit is more often</font><font color="#E5E5E5"> it is already</font>

179
00:08:18,560 --> 00:08:24,290
stored in the cache<font color="#E5E5E5"> so around</font><font color="#CCCCCC"> seven</font>

180
00:08:21,650 --> 00:08:26,989
<font color="#E5E5E5">disciples</font><font color="#CCCCCC"> most of the time we can assume</font>

181
00:08:24,290 --> 00:08:31,040
<font color="#E5E5E5">when we load an</font><font color="#CCCCCC"> act address and it takes</font>

182
00:08:26,990 --> 00:08:34,610
<font color="#CCCCCC">70 cycads it's loaded into the cash</font>

183
00:08:31,040 --> 00:08:36,680
however when we<font color="#E5E5E5"> assume that the data is</font>

184
00:08:34,610 --> 00:08:39,289
loaded from the main memory<font color="#CCCCCC"> we can</font>

185
00:08:36,679 --> 00:08:42,439
clearly see that<font color="#CCCCCC"> it Nate needs</font><font color="#E5E5E5"> a much</font>

186
00:08:39,289 --> 00:08:45,530
longer time like a bit more than 200

187
00:08:42,440 --> 00:08:47,540
sizes so depending when we measure the

188
00:08:45,530 --> 00:08:49,970
time it needs to take to load the

189
00:08:47,540 --> 00:08:52,099
address<font color="#CCCCCC"> we can say the data has been</font>

190
00:08:49,970 --> 00:08:56,180
loaded to the<font color="#E5E5E5"> cash</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> data is still</font>

191
00:08:52,100 --> 00:08:58,640
located in the main memory and this

192
00:08:56,180 --> 00:09:01,339
property is what we can exploit<font color="#E5E5E5"> using</font>

193
00:08:58,640 --> 00:09:05,390
cash attacks<font color="#E5E5E5"> so we measure the timing</font>

194
00:09:01,340 --> 00:09:08,089
differences on memory accesses and what

195
00:09:05,390 --> 00:09:10,189
a decade<font color="#CCCCCC"> asti monitors the cache lines</font>

196
00:09:08,089 --> 00:09:12,200
<font color="#E5E5E5">but he has no way to know what's</font>

197
00:09:10,190 --> 00:09:14,690
actually the content of the cache line

198
00:09:12,200 --> 00:09:17,089
so we can only monitor that this cache

199
00:09:14,690 --> 00:09:20,540
line has been accessed and not<font color="#E5E5E5"> what's</font>

200
00:09:17,089 --> 00:09:22,250
<font color="#E5E5E5">actually stored in the cache line and</font>

201
00:09:20,540 --> 00:09:24,439
what you can do with this is you can

202
00:09:22,250 --> 00:09:26,750
implement covert channels<font color="#CCCCCC"> so you can</font>

203
00:09:24,440 --> 00:09:27,740
allow<font color="#E5E5E5"> two processes to communicate with</font>

204
00:09:26,750 --> 00:09:29,930
each other

205
00:09:27,740 --> 00:09:33,020
<font color="#E5E5E5">evading the permission system what</font><font color="#CCCCCC"> will</font>

206
00:09:29,930 --> 00:09:36,079
see<font color="#E5E5E5"> later on in</font><font color="#CCCCCC"> addition you can also do</font>

207
00:09:33,020 --> 00:09:38,569
side-channel attacks<font color="#E5E5E5"> so you can spy with</font>

208
00:09:36,080 --> 00:09:41,330
malicious<font color="#E5E5E5"> attacking application on</font>

209
00:09:38,570 --> 00:09:43,820
benign<font color="#E5E5E5"> processes and you can use this to</font>

210
00:09:41,330 --> 00:09:47,780
steal cryptographic keys<font color="#CCCCCC"> other</font><font color="#E5E5E5"> spy on</font>

211
00:09:43,820 --> 00:09:52,339
<font color="#E5E5E5">keystrokes and basically we have</font>

212
00:09:47,780 --> 00:09:54,860
different types of<font color="#E5E5E5"> cash attacks and</font><font color="#CCCCCC"> i</font>

213
00:09:52,339 --> 00:09:56,750
want to explain the most popular one<font color="#CCCCCC"> the</font>

214
00:09:54,860 --> 00:09:59,420
<font color="#CCCCCC">flash and reload attack in the beginning</font>

215
00:09:56,750 --> 00:10:02,030
<font color="#E5E5E5">so on the left you have the address</font>

216
00:09:59,420 --> 00:10:04,160
space of the victim<font color="#E5E5E5"> and on the right you</font>

217
00:10:02,030 --> 00:10:07,189
have the address space of the attacker

218
00:10:04,160 --> 00:10:09,740
who<font color="#CCCCCC"> maps a shared library on executable</font>

219
00:10:07,190 --> 00:10:10,350
that the victim is used<font color="#E5E5E5"> into its own</font>

220
00:10:09,740 --> 00:10:14,100
address

221
00:10:10,350 --> 00:10:17,100
<font color="#CCCCCC">days like</font><font color="#E5E5E5"> the red rectangle and this</font>

222
00:10:14,100 --> 00:10:19,860
means that when this stator is stored in

223
00:10:17,100 --> 00:10:24,390
the cache<font color="#CCCCCC"> it's cached for both processes</font>

224
00:10:19,860 --> 00:10:26,790
<font color="#CCCCCC">now</font><font color="#E5E5E5"> the attacker can use the flash</font>

225
00:10:24,390 --> 00:10:28,890
instruction to remove the data out of

226
00:10:26,790 --> 00:10:31,620
the cash<font color="#CCCCCC"> so it's not in the cache</font>

227
00:10:28,890 --> 00:10:35,040
<font color="#E5E5E5">anymore so it's also not cached for the</font>

228
00:10:31,620 --> 00:10:37,650
victim now the attacker can schedule the

229
00:10:35,040 --> 00:10:39,780
victim<font color="#E5E5E5"> and if the victim decides yeah I</font>

230
00:10:37,650 --> 00:10:42,959
<font color="#CCCCCC">need this data it will be loaded back</font>

231
00:10:39,780 --> 00:10:45,600
into the<font color="#CCCCCC"> cache</font><font color="#E5E5E5"> and now the attacker can</font>

232
00:10:42,960 --> 00:10:48,090
reload the data<font color="#E5E5E5"> measure the time how</font>

233
00:10:45,600 --> 00:10:49,770
long it took<font color="#E5E5E5"> and then decide</font><font color="#CCCCCC"> okay</font>

234
00:10:48,090 --> 00:10:52,080
the victim has access<font color="#CCCCCC"> to data in the</font>

235
00:10:49,770 --> 00:10:55,050
meantime<font color="#CCCCCC"> the victim has not access to</font>

236
00:10:52,080 --> 00:10:58,950
data in the meantime<font color="#CCCCCC"> and by</font><font color="#E5E5E5"> that you can</font>

237
00:10:55,050 --> 00:11:00,930
spy if this address has been used<font color="#CCCCCC"> the</font>

238
00:10:58,950 --> 00:11:03,240
second type of attack is called<font color="#CCCCCC"> prime</font>

239
00:11:00,930 --> 00:11:05,459
<font color="#E5E5E5">and probe and it does not rely on the</font>

240
00:11:03,240 --> 00:11:08,190
shared memory<font color="#E5E5E5"> like the flash and reload</font>

241
00:11:05,460 --> 00:11:11,490
<font color="#E5E5E5">attack and it works as the following</font><font color="#CCCCCC"> so</font>

242
00:11:08,190 --> 00:11:15,120
instead of<font color="#E5E5E5"> mapping anything into its own</font>

243
00:11:11,490 --> 00:11:20,430
address space<font color="#E5E5E5"> the cat attacker loads a</font>

244
00:11:15,120 --> 00:11:23,010
lot of data into one cache line here and

245
00:11:20,430 --> 00:11:25,260
<font color="#E5E5E5">fills the cash and now he again</font>

246
00:11:23,010 --> 00:11:27,780
schedules the victim and the schedule

247
00:11:25,260 --> 00:11:34,350
can access data that maps to the same

248
00:11:27,780 --> 00:11:36,000
<font color="#E5E5E5">cache set so they</font><font color="#CCCCCC"> can't set is used by</font>

249
00:11:34,350 --> 00:11:39,090
the adapter and<font color="#E5E5E5"> the victim at the same</font>

250
00:11:36,000 --> 00:11:41,760
time<font color="#E5E5E5"> and now the attacker can start</font>

251
00:11:39,090 --> 00:11:43,590
measuring the<font color="#E5E5E5"> access time</font><font color="#CCCCCC"> to the</font>

252
00:11:41,760 --> 00:11:46,920
<font color="#E5E5E5">addresses he loaded into the</font><font color="#CCCCCC"> cash before</font>

253
00:11:43,590 --> 00:11:48,150
<font color="#E5E5E5">and when he accesses an address that is</font>

254
00:11:46,920 --> 00:11:52,110
still in the<font color="#CCCCCC"> cash</font>

255
00:11:48,150 --> 00:11:54,930
<font color="#E5E5E5">it's faster so imagine slower time and</font>

256
00:11:52,110 --> 00:11:57,030
TV<font color="#CCCCCC"> if it's not in the cache</font><font color="#E5E5E5"> anymore</font>

257
00:11:54,930 --> 00:11:59,280
it has to be reloaded into the<font color="#CCCCCC"> cash so</font>

258
00:11:57,030 --> 00:12:02,699
it takes a longer time and<font color="#CCCCCC"> you can sum</font>

259
00:11:59,280 --> 00:12:06,930
this up and detect if the victim has

260
00:12:02,700 --> 00:12:08,640
loaded data into the<font color="#E5E5E5"> cash as well so the</font>

261
00:12:06,930 --> 00:12:10,560
<font color="#E5E5E5">first thing we want to show you is what</font>

262
00:12:08,640 --> 00:12:14,100
you can do with kasia<font color="#E5E5E5"> texts you can</font>

263
00:12:10,560 --> 00:12:15,810
implement a covered<font color="#CCCCCC"> channel</font><font color="#E5E5E5"> and this</font>

264
00:12:14,100 --> 00:12:19,050
could be happening in the following

265
00:12:15,810 --> 00:12:22,050
scenario so you're in still an app on

266
00:12:19,050 --> 00:12:24,019
your phone to watch your<font color="#E5E5E5"> favorite images</font>

267
00:12:22,050 --> 00:12:27,050
to take to apply some<font color="#CCCCCC"> filter</font>

268
00:12:24,019 --> 00:12:28,550
<font color="#CCCCCC">rose</font><font color="#E5E5E5"> and in the end you don't know that</font>

269
00:12:27,050 --> 00:12:30,709
this malicious<font color="#E5E5E5"> because the only</font>

270
00:12:28,550 --> 00:12:33,498
permission it requires<font color="#E5E5E5"> is to access your</font>

271
00:12:30,709 --> 00:12:37,128
images which makes sense<font color="#CCCCCC"> so you can</font>

272
00:12:33,499 --> 00:12:38,420
easily install it without any fear<font color="#CCCCCC"> in</font>

273
00:12:37,129 --> 00:12:40,610
<font color="#CCCCCC">addition you want to know what the</font>

274
00:12:38,420 --> 00:12:42,469
weather is outside<font color="#E5E5E5"> so install a nice</font>

275
00:12:40,610 --> 00:12:44,299
little weather widget and the only

276
00:12:42,470 --> 00:12:47,299
permission it has is to access the

277
00:12:44,299 --> 00:12:49,790
internet because it has<font color="#CCCCCC"> slowed the</font>

278
00:12:47,299 --> 00:12:52,910
information from somewhere

279
00:12:49,790 --> 00:12:55,279
so what happens if<font color="#E5E5E5"> you're able to</font>

280
00:12:52,910 --> 00:12:58,100
implement a<font color="#CCCCCC"> cabbage channel between two</font>

281
00:12:55,279 --> 00:12:59,779
these<font color="#E5E5E5"> two applications without any</font>

282
00:12:58,100 --> 00:13:02,029
<font color="#E5E5E5">permissions and privileges so they can</font>

283
00:12:59,779 --> 00:13:04,549
communicate with each other without

284
00:13:02,029 --> 00:13:07,160
using any<font color="#E5E5E5"> mechanisms provided by the</font>

285
00:13:04,549 --> 00:13:09,860
operating system so<font color="#E5E5E5"> it's him</font>

286
00:13:07,160 --> 00:13:12,738
it can happen that now the gallery image

287
00:13:09,860 --> 00:13:16,249
<font color="#CCCCCC">consent the image to the</font><font color="#E5E5E5"> internet which</font>

288
00:13:12,739 --> 00:13:19,129
will be uploaded and exposed for

289
00:13:16,249 --> 00:13:24,319
everyone<font color="#E5E5E5"> so you maybe don't want to see</font>

290
00:13:19,129 --> 00:13:26,540
the cat picture everywhere<font color="#E5E5E5"> and why we</font>

291
00:13:24,319 --> 00:13:28,910
can use this with those<font color="#CCCCCC"> prime</font><font color="#E5E5E5"> and probe</font>

292
00:13:26,540 --> 00:13:31,549
<font color="#CCCCCC">flash</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> reload attacks</font><font color="#E5E5E5"> we will discuss</font>

293
00:13:28,910 --> 00:13:33,799
a<font color="#CCCCCC"> covered channel using private</font><font color="#E5E5E5"> probe</font><font color="#CCCCCC"> so</font>

294
00:13:31,549 --> 00:13:36,319
how can we transmit<font color="#CCCCCC"> this data so we need</font>

295
00:13:33,799 --> 00:13:38,839
to transmit<font color="#CCCCCC"> ones</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> zeros at some point</font>

296
00:13:36,319 --> 00:13:41,149
so the set<font color="#E5E5E5"> the sender and the receiver</font>

297
00:13:38,839 --> 00:13:46,220
<font color="#E5E5E5">agree on one</font><font color="#CCCCCC"> cache set that they both</font>

298
00:13:41,149 --> 00:13:49,279
use and the receiver probes<font color="#CCCCCC"> to set all</font>

299
00:13:46,220 --> 00:13:52,009
the time<font color="#E5E5E5"> and when the</font><font color="#CCCCCC"> sender</font><font color="#E5E5E5"> wants to</font>

300
00:13:49,279 --> 00:13:57,139
transmit<font color="#CCCCCC"> 20 he</font><font color="#E5E5E5"> just does nothing</font>

301
00:13:52,009 --> 00:13:59,540
so the lines of the receiver are in the

302
00:13:57,139 --> 00:14:01,910
<font color="#CCCCCC">cash all the time and he knows okay he's</font>

303
00:13:59,540 --> 00:14:03,799
sending<font color="#E5E5E5"> nothing so it's a zero on the</font>

304
00:14:01,910 --> 00:14:05,929
other hand if the<font color="#CCCCCC"> sender</font><font color="#E5E5E5"> wants to</font>

305
00:14:03,799 --> 00:14:08,209
transmit the one he starts<font color="#E5E5E5"> accessing</font>

306
00:14:05,929 --> 00:14:10,730
addresses that map to the same<font color="#E5E5E5"> cache set</font>

307
00:14:08,209 --> 00:14:13,669
<font color="#E5E5E5">so it will take a</font><font color="#CCCCCC"> longer time for the</font>

308
00:14:10,730 --> 00:14:14,149
receiver to access its<font color="#CCCCCC"> address</font><font color="#E5E5E5"> again and</font>

309
00:14:13,669 --> 00:14:17,269
he knows

310
00:14:14,149 --> 00:14:20,449
<font color="#CCCCCC">ok the senator</font><font color="#E5E5E5"> trust standard me at one</font>

311
00:14:17,269 --> 00:14:23,809
<font color="#E5E5E5">and</font><font color="#CCCCCC"> Kevin teen</font><font color="#E5E5E5"> will show you what you</font>

312
00:14:20,449 --> 00:14:25,279
can do with this<font color="#E5E5E5"> color channel so</font>

313
00:14:23,809 --> 00:14:26,629
<font color="#E5E5E5">they're really nice thing about crime</font>

314
00:14:25,279 --> 00:14:28,579
<font color="#CCCCCC">probably that it has really low</font>

315
00:14:26,629 --> 00:14:30,980
<font color="#E5E5E5">requirement so it doesn't in any kind of</font>

316
00:14:28,579 --> 00:14:34,420
<font color="#CCCCCC">shape memory</font><font color="#E5E5E5"> and for example if you have</font>

317
00:14:30,980 --> 00:14:36,579
<font color="#E5E5E5">to</font><font color="#CCCCCC"> get admissions you could have some</font>

318
00:14:34,420 --> 00:14:38,769
<font color="#CCCCCC">shared memory of your memory duplication</font>

319
00:14:36,579 --> 00:14:41,680
<font color="#CCCCCC">the thing is that</font><font color="#E5E5E5"> is highly insecure so</font>

320
00:14:38,769 --> 00:14:44,230
cloud providers like<font color="#E5E5E5"> MSNBC to disable</font>

321
00:14:41,680 --> 00:14:45,939
that out<font color="#E5E5E5"> now we can see use</font><font color="#CCCCCC"> primarily</font>

322
00:14:44,230 --> 00:14:50,620
because<font color="#E5E5E5"> it doesn't it doesn't need this</font>

323
00:14:45,940 --> 00:14:52,360
<font color="#CCCCCC">memory</font><font color="#E5E5E5"> another problem with</font><font color="#CCCCCC"> casual</font>

324
00:14:50,620 --> 00:14:55,180
<font color="#CCCCCC">opportunities that they are quite noisy</font>

325
00:14:52,360 --> 00:14:57,220
so you have other applications that are

326
00:14:55,180 --> 00:14:59,079
also running on the system<font color="#CCCCCC"> they</font><font color="#E5E5E5"> are all</font>

327
00:14:57,220 --> 00:15:01,420
competing for the cash and they might

328
00:14:59,079 --> 00:15:03,310
like<font color="#CCCCCC"> affect some cache lines</font><font color="#E5E5E5"> especially</font>

329
00:15:01,420 --> 00:15:07,000
<font color="#CCCCCC">if it's an application that is very</font>

330
00:15:03,310 --> 00:15:08,589
<font color="#CCCCCC">memory intensive</font><font color="#E5E5E5"> and you also have a</font>

331
00:15:07,000 --> 00:15:10,449
<font color="#CCCCCC">noise due to the fact that the sender</font>

332
00:15:08,589 --> 00:15:12,100
and the receiver might not be scheduled

333
00:15:10,449 --> 00:15:14,199
at the same time so if you have your

334
00:15:12,100 --> 00:15:16,480
<font color="#CCCCCC">Center that since all the things</font><font color="#E5E5E5"> and the</font>

335
00:15:14,199 --> 00:15:18,459
<font color="#E5E5E5">reserve is not scheduled</font><font color="#CCCCCC"> them some part</font>

336
00:15:16,480 --> 00:15:21,579
of the transmission can get lost

337
00:15:18,459 --> 00:15:24,518
so what we did is we try to build<font color="#CCCCCC"> and</font>

338
00:15:21,579 --> 00:15:27,069
<font color="#E5E5E5">never</font><font color="#CCCCCC"> free</font><font color="#E5E5E5"> cover</font><font color="#CCCCCC"> channel so we think</font><font color="#E5E5E5"> we</font>

339
00:15:24,519 --> 00:15:29,740
took care of this<font color="#E5E5E5"> all this noise issues</font>

340
00:15:27,070 --> 00:15:33,160
<font color="#E5E5E5">by using some error detection to</font>

341
00:15:29,740 --> 00:15:35,290
resynchronize the the center and the<font color="#E5E5E5"> end</font>

342
00:15:33,160 --> 00:15:37,750
and the<font color="#CCCCCC"> recipient</font><font color="#E5E5E5"> and then we use some</font>

343
00:15:35,290 --> 00:15:39,819
error correction to correct<font color="#E5E5E5"> the</font>

344
00:15:37,750 --> 00:15:41,709
remaining<font color="#CCCCCC"> arrows so we managed to have a</font>

345
00:15:39,820 --> 00:15:44,769
completely error-free<font color="#E5E5E5"> copper</font><font color="#CCCCCC"> journal</font>

346
00:15:41,709 --> 00:15:47,079
even if you have a lot of noise so<font color="#E5E5E5"> let's</font>

347
00:15:44,769 --> 00:15:52,089
say another<font color="#E5E5E5"> veteran machine also on the</font>

348
00:15:47,079 --> 00:15:54,729
<font color="#CCCCCC">machine as in</font><font color="#E5E5E5"> solving files</font><font color="#CCCCCC"> from a web</font>

349
00:15:52,089 --> 00:15:59,709
server also doing<font color="#E5E5E5"> lots of memory</font>

350
00:15:54,730 --> 00:16:02,380
intensive tasks at the same time and it

351
00:15:59,709 --> 00:16:06,160
the<font color="#CCCCCC"> coveted completely</font><font color="#E5E5E5"> ever free and</font>

352
00:16:02,380 --> 00:16:07,449
around<font color="#CCCCCC"> 4275 kilobytes per second which</font>

353
00:16:06,160 --> 00:16:09,819
is still quite a lot

354
00:16:07,449 --> 00:16:13,029
all of<font color="#CCCCCC"> these between different missions</font>

355
00:16:09,820 --> 00:16:15,640
<font color="#E5E5E5">on</font><font color="#CCCCCC"> amazon</font><font color="#E5E5E5"> ec2 and the really</font><font color="#CCCCCC"> neat thing</font>

356
00:16:13,029 --> 00:16:18,880
that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> we we wanted to to do something</font>

357
00:16:15,640 --> 00:16:20,949
with that and basically<font color="#CCCCCC"> manage to create</font>

358
00:16:18,880 --> 00:16:26,230
<font color="#E5E5E5">an</font><font color="#CCCCCC"> ssh connection really over the cash</font>

359
00:16:20,949 --> 00:16:28,630
so they don't have any network between

360
00:16:26,230 --> 00:16:31,000
between them<font color="#E5E5E5"> but just feel</font><font color="#CCCCCC"> setting the</font>

361
00:16:28,630 --> 00:16:33,579
<font color="#E5E5E5">zeros and the ones and we have an</font><font color="#CCCCCC"> ssh</font>

362
00:16:31,000 --> 00:16:36,250
connection between them<font color="#E5E5E5"> so you could say</font>

363
00:16:33,579 --> 00:16:40,989
that<font color="#E5E5E5"> cash</font><font color="#CCCCCC"> conversion</font><font color="#E5E5E5"> and more thing but</font>

364
00:16:36,250 --> 00:16:42,699
<font color="#CCCCCC">I think it's a real friends and yeah if</font>

365
00:16:40,990 --> 00:16:46,510
you want to have more details about this

366
00:16:42,699 --> 00:16:46,949
work in particular<font color="#E5E5E5"> it will be published</font>

367
00:16:46,510 --> 00:16:51,660
<font color="#CCCCCC">in that</font>

368
00:16:46,950 --> 00:16:53,580
<font color="#CCCCCC">emphasis</font><font color="#E5E5E5"> so the second application that</font>

369
00:16:51,660 --> 00:16:57,449
we wanted to show you is that we can<font color="#CCCCCC"> add</font>

370
00:16:53,580 --> 00:16:58,890
<font color="#CCCCCC">a</font><font color="#E5E5E5"> crypto with cash attacks so</font><font color="#CCCCCC"> I'm in</font>

371
00:16:57,450 --> 00:17:01,740
particular we're going to show you an

372
00:16:58,890 --> 00:17:03,600
attack on a yes and<font color="#E5E5E5"> a special</font>

373
00:17:01,740 --> 00:17:04,920
implementation of<font color="#E5E5E5"> a</font><font color="#CCCCCC"> is that uses to</font>

374
00:17:03,600 --> 00:17:07,079
<font color="#CCCCCC">table</font><font color="#E5E5E5"> so that's</font><font color="#CCCCCC"> a fast software</font>

375
00:17:04,920 --> 00:17:11,550
implementation<font color="#E5E5E5"> because it uses some</font>

376
00:17:07,079 --> 00:17:13,649
<font color="#CCCCCC">precomputed look-up tables</font><font color="#E5E5E5"> so it's known</font>

377
00:17:11,550 --> 00:17:17,669
to be vulnerable to cyberattacks since

378
00:17:13,650 --> 00:17:20,310
<font color="#E5E5E5">276</font><font color="#CCCCCC"> by as</font><font color="#E5E5E5"> we get</font><font color="#CCCCCC"> Alan</font><font color="#E5E5E5"> it's a one-round</font>

379
00:17:17,670 --> 00:17:24,060
known plaintext attacks so you have<font color="#E5E5E5"> PPO</font>

380
00:17:20,310 --> 00:17:26,369
<font color="#E5E5E5">plan</font><font color="#CCCCCC"> takes</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> k your secret key and the</font>

381
00:17:24,060 --> 00:17:28,409
the<font color="#CCCCCC"> ASM chrism</font><font color="#E5E5E5"> but it doesn't that is</font>

382
00:17:26,369 --> 00:17:31,050
<font color="#CCCCCC">computer and intermediate States at each</font>

383
00:17:28,410 --> 00:17:35,310
round<font color="#CCCCCC"> our</font><font color="#E5E5E5"> and on the first round the</font>

384
00:17:31,050 --> 00:17:38,820
<font color="#CCCCCC">accessed table indices are just peeks ok</font>

385
00:17:35,310 --> 00:17:42,120
now<font color="#E5E5E5"> it's a</font><font color="#CCCCCC"> one it's a known plaintext</font>

386
00:17:38,820 --> 00:17:44,040
attack<font color="#E5E5E5"> and what it means that if you can</font>

387
00:17:42,120 --> 00:17:45,929
recover the access that well in this is

388
00:17:44,040 --> 00:17:49,470
<font color="#CCCCCC">you've also</font><font color="#E5E5E5"> managed to recover the key</font>

389
00:17:45,930 --> 00:17:51,930
because<font color="#CCCCCC"> it strips</font><font color="#E5E5E5"> or so that would be</font>

390
00:17:49,470 --> 00:17:55,380
bad right if we could<font color="#E5E5E5"> recover this</font>

391
00:17:51,930 --> 00:17:57,330
accessible in this is<font color="#CCCCCC"> well we can with</font>

392
00:17:55,380 --> 00:18:00,270
<font color="#CCCCCC">cash attack</font><font color="#E5E5E5"> so we did that with</font><font color="#CCCCCC"> fresh</font>

393
00:17:57,330 --> 00:18:02,340
<font color="#CCCCCC">and reload and with plumbing problem</font><font color="#E5E5E5"> so</font>

394
00:18:00,270 --> 00:18:05,220
on the<font color="#CCCCCC"> x-axis you</font><font color="#E5E5E5"> have the plant expert</font>

395
00:18:02,340 --> 00:18:07,169
values and on the<font color="#CCCCCC"> y-axis you</font><font color="#E5E5E5"> have the</font>

396
00:18:05,220 --> 00:18:12,450
addresses which are essentially<font color="#E5E5E5"> which</font>

397
00:18:07,170 --> 00:18:15,690
table<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> table</font><font color="#E5E5E5"> entries so a black</font>

398
00:18:12,450 --> 00:18:17,640
<font color="#E5E5E5">cell which means that with mana told the</font>

399
00:18:15,690 --> 00:18:20,070
captain and we've seen a lot of<font color="#E5E5E5"> cash</font>

400
00:18:17,640 --> 00:18:23,100
<font color="#CCCCCC">hits so this basically the blackberries</font>

401
00:18:20,070 --> 00:18:26,040
<font color="#CCCCCC">to draw we</font><font color="#E5E5E5"> are that statistical entry</font>

402
00:18:23,100 --> 00:18:28,949
has been accessed and<font color="#E5E5E5"> here it's a toy</font>

403
00:18:26,040 --> 00:18:32,040
example at the keys or<font color="#E5E5E5"> zeros</font><font color="#CCCCCC"> but you</font>

404
00:18:28,950 --> 00:18:34,350
would have basically just a different

405
00:18:32,040 --> 00:18:36,060
pattern if<font color="#CCCCCC"> the key was not all</font><font color="#E5E5E5"> zeros and</font>

406
00:18:34,350 --> 00:18:39,030
as long as you can see this nice

407
00:18:36,060 --> 00:18:43,110
diagonal<font color="#CCCCCC"> or a pattern then you have</font>

408
00:18:39,030 --> 00:18:45,149
recovered the key<font color="#E5E5E5"> so it's an old attack</font>

409
00:18:43,110 --> 00:18:48,389
276<font color="#E5E5E5"> it's been</font><font color="#CCCCCC"> 10 years</font>

410
00:18:45,150 --> 00:18:49,860
everything should<font color="#E5E5E5"> be fixed by now and</font>

411
00:18:48,390 --> 00:18:53,820
you see where<font color="#E5E5E5"> I'm going</font>

412
00:18:49,860 --> 00:18:54,689
it's not so on<font color="#CCCCCC"> Android the bouncy castle</font>

413
00:18:53,820 --> 00:18:58,169
and

414
00:18:54,690 --> 00:19:01,860
implementation<font color="#E5E5E5"> uses by</font><font color="#CCCCCC"> defaults</font><font color="#E5E5E5"> at the</font>

415
00:18:58,170 --> 00:19:03,600
table so that's bad<font color="#E5E5E5"> and</font><font color="#CCCCCC"> also many</font>

416
00:19:01,860 --> 00:19:06,659
<font color="#CCCCCC">implementations that you can find online</font>

417
00:19:03,600 --> 00:19:12,000
<font color="#CCCCCC">users pre</font><font color="#E5E5E5"> computed values so maybe be</font>

418
00:19:06,660 --> 00:19:14,190
<font color="#E5E5E5">wary about</font><font color="#CCCCCC"> this kind of</font><font color="#E5E5E5"> attacks the last</font>

419
00:19:12,000 --> 00:19:18,390
application we wanted to show you is how

420
00:19:14,190 --> 00:19:20,070
we can spy on<font color="#E5E5E5"> keystrokes</font><font color="#CCCCCC"> so for that we</font>

421
00:19:18,390 --> 00:19:22,440
will use<font color="#CCCCCC"> flash and reload because it's a</font>

422
00:19:20,070 --> 00:19:25,169
really fine<font color="#CCCCCC"> cranes</font><font color="#E5E5E5"> attack we can see</font>

423
00:19:22,440 --> 00:19:27,990
very precisely which cache line has been

424
00:19:25,170 --> 00:19:30,180
accessed and<font color="#E5E5E5"> a</font><font color="#CCCCCC"> cation is only as 64</font>

425
00:19:27,990 --> 00:19:31,980
bytes so it's really not a lot<font color="#E5E5E5"> and we're</font>

426
00:19:30,180 --> 00:19:34,800
<font color="#E5E5E5">going to use that to spy on keystrokes</font>

427
00:19:31,980 --> 00:19:35,460
and<font color="#E5E5E5"> we even have a small team</font><font color="#CCCCCC"> of four</font>

428
00:19:34,800 --> 00:19:42,629
you

429
00:19:35,460 --> 00:19:44,610
so what you can see on the screen this

430
00:19:42,630 --> 00:19:47,880
is not<font color="#E5E5E5"> an</font><font color="#CCCCCC"> intellectual</font><font color="#E5E5E5"> 86</font><font color="#CCCCCC"> its own</font>

431
00:19:44,610 --> 00:19:49,770
<font color="#CCCCCC">smartphone</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> galaxy s6</font><font color="#E5E5E5"> but you can</font>

432
00:19:47,880 --> 00:19:52,350
also apply this<font color="#CCCCCC"> catch a textear so</font>

433
00:19:49,770 --> 00:19:53,970
that's what we want to empathize<font color="#CCCCCC"> so on</font>

434
00:19:52,350 --> 00:19:56,370
the left you see the screen and on the

435
00:19:53,970 --> 00:19:58,260
right we have connected the shell with

436
00:19:56,370 --> 00:19:59,969
no privileges and<font color="#E5E5E5"> permissions so it can</font>

437
00:19:58,260 --> 00:20:03,270
basically be an app that you install

438
00:19:59,970 --> 00:20:09,330
from the<font color="#CCCCCC"> app store and on the right we</font>

439
00:20:03,270 --> 00:20:11,010
<font color="#CCCCCC">are</font><font color="#E5E5E5"> going to start our spy tool and on</font>

440
00:20:09,330 --> 00:20:13,980
the<font color="#CCCCCC"> Left</font><font color="#E5E5E5"> we just</font><font color="#CCCCCC"> open</font><font color="#E5E5E5"> the messenger app</font>

441
00:20:11,010 --> 00:20:16,680
and whenever the user hits<font color="#CCCCCC"> any key on</font>

442
00:20:13,980 --> 00:20:19,080
the<font color="#E5E5E5"> keyboard</font><font color="#CCCCCC"> our spy tool takes care of</font>

443
00:20:16,680 --> 00:20:21,660
that and notice is that<font color="#E5E5E5"> also if you</font>

444
00:20:19,080 --> 00:20:25,409
press the<font color="#E5E5E5"> spacebar</font><font color="#CCCCCC"> we can also measure</font>

445
00:20:21,660 --> 00:20:27,330
that<font color="#E5E5E5"> if the user decides okay</font><font color="#CCCCCC"> i want to</font>

446
00:20:25,410 --> 00:20:28,140
delete the<font color="#CCCCCC"> world because he changed his</font>

447
00:20:27,330 --> 00:20:30,659
mind

448
00:20:28,140 --> 00:20:33,780
we<font color="#E5E5E5"> can also register if the user press</font>

449
00:20:30,660 --> 00:20:37,410
the backspace button<font color="#CCCCCC"> so in the</font><font color="#E5E5E5"> end we</font>

450
00:20:33,780 --> 00:20:40,440
can see exactly how long the words where

451
00:20:37,410 --> 00:20:44,310
the user typed into his phone without

452
00:20:40,440 --> 00:20:54,710
any permissions and privileges which is

453
00:20:44,310 --> 00:20:57,950
bad

454
00:20:54,710 --> 00:21:02,390
<font color="#E5E5E5">so enough about the math instruction</font>

455
00:20:57,950 --> 00:21:05,210
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> have to</font><font color="#CCCCCC"> seal flush</font><font color="#E5E5E5"> so this your</font>

456
00:21:02,390 --> 00:21:07,669
first instruction<font color="#CCCCCC"> and</font><font color="#E5E5E5"> what it does</font><font color="#CCCCCC"> is</font>

457
00:21:05,210 --> 00:21:10,250
<font color="#E5E5E5">that it it invalidates from every level</font>

458
00:21:07,669 --> 00:21:13,309
<font color="#E5E5E5">the cache line that contains the address</font>

459
00:21:10,250 --> 00:21:15,110
that you<font color="#E5E5E5"> pass to this instruction so in</font>

460
00:21:13,309 --> 00:21:16,730
itself<font color="#E5E5E5"> it's kind of bad because it</font>

461
00:21:15,110 --> 00:21:19,370
enables<font color="#E5E5E5"> the flesh and</font><font color="#CCCCCC"> will detect that</font>

462
00:21:16,730 --> 00:21:21,440
<font color="#E5E5E5">we showed earlier that was flush</font><font color="#CCCCCC"> reload</font>

463
00:21:19,370 --> 00:21:24,350
and the fleshpots<font color="#E5E5E5"> is done with seal</font>

464
00:21:21,440 --> 00:21:29,029
flush<font color="#E5E5E5"> but there's actually more to it</font>

465
00:21:24,350 --> 00:21:31,129
how wonderful so there's a<font color="#CCCCCC"> first-time</font>

466
00:21:29,029 --> 00:21:33,320
<font color="#CCCCCC">indicate</font><font color="#E5E5E5"> with it so we're going to see</font>

467
00:21:31,130 --> 00:21:34,909
that the<font color="#CCCCCC"> first instruction</font><font color="#E5E5E5"> has</font><font color="#CCCCCC"> a</font>

468
00:21:33,320 --> 00:21:37,820
different timing depending on whether

469
00:21:34,909 --> 00:21:38,929
the data that you did<font color="#E5E5E5"> the</font><font color="#CCCCCC"> past week is</font>

470
00:21:37,820 --> 00:21:41,899
<font color="#E5E5E5">cached or not</font>

471
00:21:38,929 --> 00:21:44,929
so imagine<font color="#E5E5E5"> you have a cache line that is</font>

472
00:21:41,899 --> 00:21:47,090
on the level<font color="#CCCCCC"> 1i include</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> the</font>

473
00:21:44,929 --> 00:21:50,450
<font color="#CCCCCC">included property it has to be also in</font>

474
00:21:47,090 --> 00:21:52,939
the<font color="#E5E5E5"> last</font><font color="#CCCCCC"> comment cash</font><font color="#E5E5E5"> that this is quite</font>

475
00:21:50,450 --> 00:21:54,890
convenient<font color="#E5E5E5"> and this is also why we have</font>

476
00:21:52,940 --> 00:21:57,799
this inclusion property for performance

477
00:21:54,890 --> 00:21:59,840
reasons on intensive use if you want<font color="#E5E5E5"> to</font>

478
00:21:57,799 --> 00:22:02,059
<font color="#CCCCCC">seee for line increases</font><font color="#E5E5E5"> present at all</font>

479
00:21:59,840 --> 00:22:03,918
in the<font color="#CCCCCC"> cash you just have</font><font color="#E5E5E5"> to look in the</font>

480
00:22:02,059 --> 00:22:05,658
last level cache<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is basically</font>

481
00:22:03,919 --> 00:22:07,940
what this your first instruction<font color="#CCCCCC"> does it</font>

482
00:22:05,659 --> 00:22:10,340
goes to the<font color="#CCCCCC"> possible characters is ok</font>

483
00:22:07,940 --> 00:22:12,890
there's a line<font color="#CCCCCC"> i'm</font><font color="#E5E5E5"> going to</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> this</font>

484
00:22:10,340 --> 00:22:15,168
one and then there's something that<font color="#E5E5E5"> is</font>

485
00:22:12,890 --> 00:22:18,140
<font color="#CCCCCC">ok the line is also present somewhere</font>

486
00:22:15,169 --> 00:22:21,740
else<font color="#CCCCCC"> so then</font><font color="#E5E5E5"> it flushes the line in</font>

487
00:22:18,140 --> 00:22:25,220
level<font color="#CCCCCC"> one and</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of it too so</font><font color="#E5E5E5"> that's</font>

488
00:22:21,740 --> 00:22:28,760
low now if you perform<font color="#CCCCCC"> still flesh</font><font color="#E5E5E5"> from</font>

489
00:22:25,220 --> 00:22:30,830
some data that is not cached basically

490
00:22:28,760 --> 00:22:33,140
does the same goes to the last level

491
00:22:30,830 --> 00:22:35,360
cache<font color="#CCCCCC"> see that there's no line and they</font>

492
00:22:33,140 --> 00:22:37,100
can't be any<font color="#CCCCCC"> the this data can't be</font>

493
00:22:35,360 --> 00:22:38,809
anywhere else in the<font color="#CCCCCC"> cash because it</font>

494
00:22:37,100 --> 00:22:41,899
would be in the last level cache<font color="#E5E5E5"> if it</font>

495
00:22:38,809 --> 00:22:43,820
was anywhere<font color="#CCCCCC"> so it does nothing to</font><font color="#E5E5E5"> stop</font>

496
00:22:41,899 --> 00:22:47,389
there<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that's fast</font>

497
00:22:43,820 --> 00:22:48,049
so how exactly<font color="#CCCCCC"> fast and so</font><font color="#E5E5E5"> am</font><font color="#CCCCCC"> I talking</font>

498
00:22:47,390 --> 00:22:51,289
about

499
00:22:48,049 --> 00:22:54,200
<font color="#E5E5E5">so it's actually only a very few cycles</font>

500
00:22:51,289 --> 00:22:56,990
so we<font color="#E5E5E5"> did this</font><font color="#CCCCCC"> experiments on different</font>

501
00:22:54,200 --> 00:23:00,200
<font color="#E5E5E5">microarchitecture so centerbridge</font><font color="#CCCCCC"> I've</font>

502
00:22:56,990 --> 00:23:01,130
<font color="#CCCCCC">written as well and so it the different</font>

503
00:23:00,200 --> 00:23:03,320
colors correspond to the different

504
00:23:01,130 --> 00:23:04,690
<font color="#CCCCCC">microarchitectures so first thing that</font>

505
00:23:03,320 --> 00:23:07,000
is already

506
00:23:04,690 --> 00:23:08,410
I can<font color="#E5E5E5"> often is that you can see that you</font>

507
00:23:07,000 --> 00:23:13,390
can distinguish the microarchitecture

508
00:23:08,410 --> 00:23:14,950
<font color="#E5E5E5">quites and nicely with this but the real</font>

509
00:23:13,390 --> 00:23:18,760
point is that you have really<font color="#CCCCCC"> a</font>

510
00:23:14,950 --> 00:23:20,950
<font color="#CCCCCC">different somme</font><font color="#E5E5E5"> the solid the solid line</font>

511
00:23:18,760 --> 00:23:23,440
is when we perform the<font color="#CCCCCC"> measurements</font><font color="#E5E5E5"> on</font>

512
00:23:20,950 --> 00:23:26,170
<font color="#E5E5E5">CL first with the line that was already</font>

513
00:23:23,440 --> 00:23:28,810
in the cash and the<font color="#E5E5E5"> dashed line is when</font>

514
00:23:26,170 --> 00:23:31,300
the line was not in the<font color="#E5E5E5"> cache and in all</font>

515
00:23:28,810 --> 00:23:33,190
microarchitectures<font color="#E5E5E5"> you can see that we</font>

516
00:23:31,300 --> 00:23:33,970
can see a difference<font color="#CCCCCC"> it's only a few</font>

517
00:23:33,190 --> 00:23:37,540
cycles

518
00:23:33,970 --> 00:23:42,670
it's a bit noisy<font color="#E5E5E5"> so what could go wrong</font>

519
00:23:37,540 --> 00:23:44,440
<font color="#CCCCCC">ok so</font><font color="#E5E5E5"> exploding these few cycles we</font>

520
00:23:42,670 --> 00:23:46,330
still managed to perform<font color="#CCCCCC"> gnucash</font><font color="#E5E5E5"> attacks</font>

521
00:23:44,440 --> 00:23:48,610
<font color="#E5E5E5">that we call flash and flash so</font><font color="#CCCCCC"> i'm</font>

522
00:23:46,330 --> 00:23:50,260
going<font color="#E5E5E5"> to explain that to you</font>

523
00:23:48,610 --> 00:23:52,689
<font color="#CCCCCC">so basically everything that we could do</font>

524
00:23:50,260 --> 00:23:55,120
with<font color="#CCCCCC"> Russian</font><font color="#E5E5E5"> would we can also do with</font>

525
00:23:52,690 --> 00:23:58,240
<font color="#CCCCCC">frozen</font><font color="#E5E5E5"> flesh</font><font color="#CCCCCC"> we can perform convergence</font>

526
00:23:55,120 --> 00:24:00,100
and<font color="#CCCCCC"> cybernetics is stealthier than</font>

527
00:23:58,240 --> 00:24:02,230
previous<font color="#CCCCCC"> cat attacks i'm going to go</font>

528
00:24:00,100 --> 00:24:04,929
back on this one<font color="#E5E5E5"> and it's also faster</font>

529
00:24:02,230 --> 00:24:09,010
than previous<font color="#CCCCCC"> cat X</font><font color="#E5E5E5"> so how does it work</font>

530
00:24:04,930 --> 00:24:11,860
exactly so<font color="#CCCCCC"> them principle is a bit</font>

531
00:24:09,010 --> 00:24:13,720
similar to<font color="#CCCCCC"> flushing wheel so we have the</font>

532
00:24:11,860 --> 00:24:15,399
attacker and the victim that have some

533
00:24:13,720 --> 00:24:19,120
kind of<font color="#E5E5E5"> short memory let's say</font><font color="#CCCCCC"> is your</font>

534
00:24:15,400 --> 00:24:21,100
library<font color="#E5E5E5"> it will be shared in the cash</font><font color="#CCCCCC"> at</font>

535
00:24:19,120 --> 00:24:24,159
the<font color="#E5E5E5"> article start by flushing</font><font color="#CCCCCC"> the cache</font>

536
00:24:21,100 --> 00:24:26,530
line<font color="#E5E5E5"> then lets the victim perform</font>

537
00:24:24,160 --> 00:24:29,110
whatever thousand its encryption<font color="#CCCCCC"> the</font>

538
00:24:26,530 --> 00:24:32,230
victim will load<font color="#CCCCCC"> something onto</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> cash</font>

539
00:24:29,110 --> 00:24:34,300
<font color="#E5E5E5">automatically and now the</font><font color="#CCCCCC"> attacker wants</font>

540
00:24:32,230 --> 00:24:36,580
<font color="#E5E5E5">to know again if the victim access this</font>

541
00:24:34,300 --> 00:24:39,879
precise<font color="#E5E5E5"> cache line and instead of</font>

542
00:24:36,580 --> 00:24:42,790
<font color="#E5E5E5">reloading</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> is going to have fresh it</font>

543
00:24:39,880 --> 00:24:44,830
again<font color="#CCCCCC"> and since we have this timing</font>

544
00:24:42,790 --> 00:24:46,960
difference depending on whether the data

545
00:24:44,830 --> 00:24:50,020
is in the casual not<font color="#CCCCCC"> it give us some</font>

546
00:24:46,960 --> 00:24:54,730
information as if we loaded it except<font color="#E5E5E5"> is</font>

547
00:24:50,020 --> 00:24:57,220
way faster so i talked about

548
00:24:54,730 --> 00:24:59,650
stealthiness<font color="#CCCCCC"> so the thing is that</font>

549
00:24:57,220 --> 00:25:03,310
basically this<font color="#CCCCCC"> cash attacks and that</font>

550
00:24:59,650 --> 00:25:06,580
also applies to<font color="#CCCCCC"> Roma there</font><font color="#E5E5E5"> are already</font>

551
00:25:03,310 --> 00:25:08,889
<font color="#CCCCCC">stealth in themselves</font><font color="#E5E5E5"> because there's no</font>

552
00:25:06,580 --> 00:25:10,990
antivirus today that can detect them but

553
00:25:08,890 --> 00:25:13,570
some people thought that we could detect

554
00:25:10,990 --> 00:25:15,130
them with performance counters<font color="#CCCCCC"> because</font>

555
00:25:13,570 --> 00:25:15,939
they do a lot of<font color="#CCCCCC"> cash misses and cat</font>

556
00:25:15,130 --> 00:25:17,769
references

557
00:25:15,940 --> 00:25:22,090
<font color="#E5E5E5">that</font><font color="#CCCCCC"> happened when the day is</font><font color="#E5E5E5"> flushed</font>

558
00:25:17,769 --> 00:25:23,169
and when<font color="#CCCCCC"> you read excess memory now what</font>

559
00:25:22,090 --> 00:25:25,029
we thought is that

560
00:25:23,169 --> 00:25:28,899
yeah but<font color="#CCCCCC"> that also not the the only</font>

561
00:25:25,029 --> 00:25:30,970
<font color="#E5E5E5">programs</font><font color="#CCCCCC"> that two lots</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> cache</font><font color="#E5E5E5"> misses</font>

562
00:25:28,899 --> 00:25:34,928
<font color="#E5E5E5">and</font><font color="#CCCCCC"> cat preferences so we would like to</font>

563
00:25:30,970 --> 00:25:37,330
have a slightly<font color="#E5E5E5"> better metric so this</font>

564
00:25:34,929 --> 00:25:40,120
<font color="#CCCCCC">cash attacks they have a very heavy</font>

565
00:25:37,330 --> 00:25:42,610
activity<font color="#E5E5E5"> on the cash but</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> also</font>

566
00:25:40,120 --> 00:25:44,500
very particular because they are very

567
00:25:42,610 --> 00:25:47,258
short<font color="#CCCCCC"> groups of</font><font color="#E5E5E5"> course if you take</font>

568
00:25:44,500 --> 00:25:50,529
<font color="#CCCCCC">flushing know</font><font color="#E5E5E5"> this just fresh 19</font><font color="#CCCCCC"> we love</font>

569
00:25:47,259 --> 00:25:52,929
<font color="#CCCCCC">the line and then again fresh blood that</font>

570
00:25:50,529 --> 00:25:54,879
<font color="#CCCCCC">very short loop and that creates a very</font>

571
00:25:52,929 --> 00:25:59,080
low pressure on the instructions<font color="#E5E5E5"> therapy</font>

572
00:25:54,879 --> 00:26:02,439
which is kind of particular<font color="#E5E5E5"> for of cash</font>

573
00:25:59,080 --> 00:26:04,389
<font color="#E5E5E5">attacks</font><font color="#CCCCCC"> so what we decided to do is</font>

574
00:26:02,440 --> 00:26:06,580
<font color="#E5E5E5">nominating the</font><font color="#CCCCCC"> cash difference for</font><font color="#E5E5E5"> the</font>

575
00:26:04,389 --> 00:26:07,959
cache misses and<font color="#CCCCCC"> carefree</font><font color="#E5E5E5"> frances by</font>

576
00:26:06,580 --> 00:26:10,750
events that have to do with<font color="#E5E5E5"> the</font>

577
00:26:07,960 --> 00:26:15,070
instructions<font color="#CCCCCC"> will be and there we could</font>

578
00:26:10,750 --> 00:26:18,100
manage to detect<font color="#E5E5E5"> a</font><font color="#CCCCCC"> cat attacks and Rama</font>

579
00:26:15,070 --> 00:26:20,529
and we don't have been false positives

580
00:26:18,100 --> 00:26:24,399
<font color="#E5E5E5">so this is the metric that I'm going to</font>

581
00:26:20,529 --> 00:26:26,679
use when I talk about<font color="#E5E5E5"> seriousness so we</font>

582
00:26:24,399 --> 00:26:29,289
started by creating a cover<font color="#CCCCCC"> journal</font>

583
00:26:26,679 --> 00:26:32,679
<font color="#E5E5E5">first we wanted to have it as fast as</font>

584
00:26:29,289 --> 00:26:35,620
possible so we created a protocol to

585
00:26:32,679 --> 00:26:37,419
<font color="#CCCCCC">evaluate all the kind of cat attacked</font>

586
00:26:35,620 --> 00:26:40,299
that we had so flat and<font color="#CCCCCC"> flash freshman</font>

587
00:26:37,419 --> 00:26:42,789
<font color="#E5E5E5">we know them from prop and we started</font>

588
00:26:40,299 --> 00:26:46,330
with a packet side of<font color="#CCCCCC"> 20</font><font color="#E5E5E5"> doesn't really</font>

589
00:26:42,789 --> 00:26:49,299
matter<font color="#E5E5E5"> we</font><font color="#CCCCCC"> measured the capacity of our</font>

590
00:26:46,330 --> 00:26:51,460
<font color="#CCCCCC">cover channel and flesh is around five</font>

591
00:26:49,299 --> 00:26:53,139
hundred kilobytes per second

592
00:26:51,460 --> 00:26:54,730
well as fresh<font color="#CCCCCC"> &</font><font color="#E5E5E5"> world was only</font><font color="#CCCCCC"> three</font>

593
00:26:53,139 --> 00:26:56,350
<font color="#CCCCCC">hundred kilobytes per second so</font>

594
00:26:54,730 --> 00:26:58,990
<font color="#CCCCCC">frightened first is already quite an</font>

595
00:26:56,350 --> 00:27:01,840
improvement on the speed then we measure

596
00:26:58,990 --> 00:27:03,940
this<font color="#CCCCCC"> tile stone at these speeds only</font>

597
00:27:01,840 --> 00:27:05,769
<font color="#CCCCCC">freshman</font><font color="#E5E5E5"> freshwater snails</font>

598
00:27:03,940 --> 00:27:07,629
another thing is<font color="#CCCCCC"> that flush</font><font color="#E5E5E5"> impression</font>

599
00:27:05,769 --> 00:27:09,850
<font color="#E5E5E5">of flesh and reload as you've seen</font><font color="#CCCCCC"> the</font>

600
00:27:07,629 --> 00:27:11,408
<font color="#CCCCCC">shell</font><font color="#E5E5E5"> some similarities so</font><font color="#CCCCCC"> for the cover</font>

601
00:27:09,850 --> 00:27:14,110
<font color="#E5E5E5">channel they</font><font color="#CCCCCC"> will share</font><font color="#E5E5E5"> the same</font><font color="#CCCCCC"> Center</font>

602
00:27:11,409 --> 00:27:16,179
on<font color="#E5E5E5"> it</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> receivers different</font><font color="#CCCCCC"> and for</font>

603
00:27:14,110 --> 00:27:19,149
this one at the<font color="#CCCCCC"> center was not still</font>

604
00:27:16,179 --> 00:27:21,639
<font color="#CCCCCC">purpose of them anyway if you want a</font>

605
00:27:19,149 --> 00:27:25,989
fast<font color="#CCCCCC"> cover channel 10</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> right flat</font>

606
00:27:21,639 --> 00:27:27,699
<font color="#CCCCCC">and flush</font><font color="#E5E5E5"> that works now and let's try</font>

607
00:27:25,990 --> 00:27:29,260
to make it still<font color="#CCCCCC"> see</font><font color="#E5E5E5"> completely still</font>

608
00:27:27,700 --> 00:27:30,910
see because if<font color="#CCCCCC"> i have the standard that</font>

609
00:27:29,260 --> 00:27:33,430
<font color="#CCCCCC">it's not steps maybe</font><font color="#E5E5E5"> that will give away</font>

610
00:27:30,910 --> 00:27:36,040
the whole attack<font color="#CCCCCC"> so we said okay maybe</font>

611
00:27:33,430 --> 00:27:38,890
if we just slow down all the attacks

612
00:27:36,040 --> 00:27:41,290
<font color="#E5E5E5">then there would be less cash cash its</font>

613
00:27:38,890 --> 00:27:43,810
cache misses and then maybe all the

614
00:27:41,290 --> 00:27:47,050
attacks are actually still see why not

615
00:27:43,810 --> 00:27:50,080
so we tried that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> slow</font><font color="#E5E5E5"> down everything</font>

616
00:27:47,050 --> 00:27:53,830
<font color="#CCCCCC">so flash and flash of fresh</font><font color="#E5E5E5"> are around</font>

617
00:27:50,080 --> 00:27:55,750
<font color="#CCCCCC">50 kilo Piper seconds now from probe's</font><font color="#E5E5E5"> a</font>

618
00:27:53,830 --> 00:28:01,360
bit slower because it takes more time to

619
00:27:55,750 --> 00:28:05,440
<font color="#CCCCCC">from and pop</font><font color="#E5E5E5"> anything but still even</font>

620
00:28:01,360 --> 00:28:09,669
with this lowdham<font color="#E5E5E5"> only</font><font color="#CCCCCC"> Russian first has</font>

621
00:28:05,440 --> 00:28:12,250
<font color="#E5E5E5">its</font><font color="#CCCCCC"> real Civil</font><font color="#E5E5E5"> cells and we also managed</font>

622
00:28:09,670 --> 00:28:14,140
to have the<font color="#CCCCCC"> center cells now</font><font color="#E5E5E5"> so</font>

623
00:28:12,250 --> 00:28:16,120
basically whether you want a fast

624
00:28:14,140 --> 00:28:20,500
<font color="#E5E5E5">courier journal or a</font><font color="#CCCCCC"> stylus cover</font>

625
00:28:16,120 --> 00:28:23,439
<font color="#E5E5E5">chillin</font><font color="#CCCCCC"> russian forces really great now</font>

626
00:28:20,500 --> 00:28:26,980
<font color="#E5E5E5">we wanted to also evaluate if it wasn't</font>

627
00:28:23,440 --> 00:28:29,770
too noisy to perform some<font color="#CCCCCC"> section attack</font>

628
00:28:26,980 --> 00:28:31,510
<font color="#E5E5E5">so we did this side channels on the</font><font color="#CCCCCC"> aes</font>

629
00:28:29,770 --> 00:28:35,290
table implementation<font color="#CCCCCC"> the attacks that</font>

630
00:28:31,510 --> 00:28:37,480
have shown you earlier so we<font color="#CCCCCC"> completed</font>

631
00:28:35,290 --> 00:28:39,760
<font color="#E5E5E5">the number of encryption that we</font><font color="#CCCCCC"> need to</font>

632
00:28:37,480 --> 00:28:42,760
<font color="#E5E5E5">do them in</font><font color="#CCCCCC"> the upper four bits of</font>

633
00:28:39,760 --> 00:28:46,000
occupied<font color="#E5E5E5"> so here the lower at the better</font>

634
00:28:42,760 --> 00:28:48,940
the attack and<font color="#E5E5E5"> fresh</font><font color="#CCCCCC"> and really is a bit</font>

635
00:28:46,000 --> 00:28:51,700
better so we<font color="#E5E5E5"> need only 250 encryptions</font>

636
00:28:48,940 --> 00:28:56,530
to recover these<font color="#E5E5E5"> bits about fresh</font><font color="#CCCCCC"> fish</font>

637
00:28:51,700 --> 00:28:58,570
comes<font color="#E5E5E5"> what comes quite close with 350</font>

638
00:28:56,530 --> 00:29:02,440
and from<font color="#CCCCCC"> improve is actually the most</font>

639
00:28:58,570 --> 00:29:05,379
<font color="#E5E5E5">noisy of them all</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> needs five</font><font color="#CCCCCC"> crews 25</font>

640
00:29:02,440 --> 00:29:06,760
thousands<font color="#E5E5E5"> encryptions so we have around</font>

641
00:29:05,380 --> 00:29:11,500
the same performance for<font color="#CCCCCC"> freshmen first</font>

642
00:29:06,760 --> 00:29:12,879
<font color="#CCCCCC">inflation world now let's evaluate the</font>

643
00:29:11,500 --> 00:29:15,370
stealthiness<font color="#E5E5E5"> again</font>

644
00:29:12,880 --> 00:29:19,300
so what we did here is we've heard from

645
00:29:15,370 --> 00:29:22,719
<font color="#E5E5E5">256-bit encryption in a synchronous</font>

646
00:29:19,300 --> 00:29:25,780
<font color="#E5E5E5">attack so we really had the spy in the</font>

647
00:29:22,720 --> 00:29:28,360
victim<font color="#CCCCCC"> schedules and we evaluated</font><font color="#E5E5E5"> this</font>

648
00:29:25,780 --> 00:29:32,170
<font color="#E5E5E5">business of them all and</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> flesh</font>

649
00:29:28,360 --> 00:29:34,570
<font color="#E5E5E5">again</font><font color="#CCCCCC"> is tails</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> why</font><font color="#E5E5E5"> you can always</font>

650
00:29:32,170 --> 00:29:36,100
<font color="#CCCCCC">load on the cover channel you actually</font>

651
00:29:34,570 --> 00:29:37,870
constantly<font color="#E5E5E5"> slow down the side channel</font>

652
00:29:36,100 --> 00:29:40,168
because in a real-life scenario you're

653
00:29:37,870 --> 00:29:42,629
not going to say hey<font color="#E5E5E5"> victim</font>

654
00:29:40,169 --> 00:29:47,489
<font color="#E5E5E5">wait for me your kids trying to do an</font>

655
00:29:42,629 --> 00:29:49,830
<font color="#E5E5E5">attack here</font><font color="#CCCCCC"> that won't work so that's</font>

656
00:29:47,489 --> 00:29:53,609
even more with whatever it is<font color="#CCCCCC"> i can a</font>

657
00:29:49,830 --> 00:29:55,408
bit of background before continuing

658
00:29:53,609 --> 00:29:57,539
so<font color="#CCCCCC"> I've shown you the different levels</font>

659
00:29:55,409 --> 00:30:00,330
of caches and here<font color="#CCCCCC"> i'm going to focus</font>

660
00:29:57,539 --> 00:30:04,649
more on the last level cache<font color="#E5E5E5"> so we have</font>

661
00:30:00,330 --> 00:30:08,730
here our<font color="#E5E5E5"> four slices</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is the last</font>

662
00:30:04,649 --> 00:30:10,949
level cache and we have some bits of the

663
00:30:08,730 --> 00:30:13,559
address here that corresponds to the set

664
00:30:10,950 --> 00:30:16,200
<font color="#E5E5E5">but more importantly we need to know</font>

665
00:30:13,559 --> 00:30:18,869
<font color="#CCCCCC">where</font><font color="#E5E5E5"> in which lice and address is going</font>

666
00:30:16,200 --> 00:30:21,480
to be and that is given that is given by

667
00:30:18,869 --> 00:30:23,279
some<font color="#E5E5E5"> bits of the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> and the track of</font>

668
00:30:21,480 --> 00:30:26,100
the address that<font color="#CCCCCC"> are passed</font><font color="#E5E5E5"> into a</font><font color="#CCCCCC"> heart</font>

669
00:30:23,279 --> 00:30:28,379
<font color="#CCCCCC">function that says in which slice the</font>

670
00:30:26,100 --> 00:30:29,850
line is going to be another thing is

671
00:30:28,379 --> 00:30:35,129
that this hash function is undocumented

672
00:30:29,850 --> 00:30:38,279
<font color="#CCCCCC">by</font><font color="#E5E5E5"> until we don't be finalized</font><font color="#CCCCCC"> so we</font>

673
00:30:35,129 --> 00:30:39,809
have this as many<font color="#CCCCCC"> slices</font><font color="#E5E5E5"> cool and then</font>

674
00:30:38,279 --> 00:30:42,840
documented<font color="#E5E5E5"> have function that map's a</font>

675
00:30:39,809 --> 00:30:45,178
physical address to slice and while it's

676
00:30:42,840 --> 00:30:47,220
actually a bit of a pain for attacks it

677
00:30:45,179 --> 00:30:49,590
as it was not designed for security

678
00:30:47,220 --> 00:30:51,749
<font color="#E5E5E5">originally but for performance because</font>

679
00:30:49,590 --> 00:30:55,709
you want all the access to be evenly

680
00:30:51,749 --> 00:30:58,350
distributed in the different slices for

681
00:30:55,710 --> 00:31:01,139
performance reasons<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> hash function</font>

682
00:30:58,350 --> 00:31:03,689
<font color="#E5E5E5">basically does it take some bits of the</font>

683
00:31:01,139 --> 00:31:06,779
physical address and<font color="#CCCCCC"> output k bits</font><font color="#E5E5E5"> of</font>

684
00:31:03,690 --> 00:31:08,519
<font color="#CCCCCC">slides so just one bids if you have a</font>

685
00:31:06,779 --> 00:31:10,019
<font color="#E5E5E5">token machine</font><font color="#CCCCCC"> tube is if you have a for</font>

686
00:31:08,519 --> 00:31:12,809
commercial and so on

687
00:31:10,019 --> 00:31:16,980
now let's go back to<font color="#CCCCCC"> withstand floor</font><font color="#E5E5E5"> see</font>

688
00:31:12,809 --> 00:31:18,359
what's the<font color="#E5E5E5"> relation with that so the</font>

689
00:31:16,980 --> 00:31:20,940
thing that we noticed is that still

690
00:31:18,359 --> 00:31:22,799
<font color="#E5E5E5">first is actually faster to reach a line</font>

691
00:31:20,940 --> 00:31:27,450
on the local slice

692
00:31:22,799 --> 00:31:30,989
so if you have if you're flushing always

693
00:31:27,450 --> 00:31:33,539
one line and you run your program<font color="#E5E5E5"> on</font>

694
00:31:30,989 --> 00:31:36,929
<font color="#E5E5E5">call</font><font color="#CCCCCC"> 01 court will call</font><font color="#E5E5E5"> three you will</font>

695
00:31:33,539 --> 00:31:38,399
observe that one call in particular on

696
00:31:36,929 --> 00:31:42,239
<font color="#E5E5E5">when you run the program on one</font><font color="#CCCCCC"> call</font>

697
00:31:38,399 --> 00:31:44,580
<font color="#E5E5E5">this year flush is faster and so here</font>

698
00:31:42,239 --> 00:31:46,619
this is on call<font color="#E5E5E5"> one and you can see that</font>

699
00:31:44,580 --> 00:31:49,918
call<font color="#E5E5E5"> 0 2</font><font color="#CCCCCC"> & 3</font>

700
00:31:46,619 --> 00:31:52,379
it's it's a bit slower<font color="#E5E5E5"> and here we can</font>

701
00:31:49,919 --> 00:31:52,830
deduce<font color="#CCCCCC"> that's so we we run the program</font>

702
00:31:52,379 --> 00:31:54,299
<font color="#CCCCCC">on call</font>

703
00:31:52,830 --> 00:31:56,428
<font color="#E5E5E5">one and</font><font color="#CCCCCC"> professional</font><font color="#E5E5E5"> with the same line</font>

704
00:31:54,299 --> 00:32:01,080
and we can deduce that the line<font color="#CCCCCC"> belong</font>

705
00:31:56,429 --> 00:32:02,880
<font color="#CCCCCC">to slice one</font><font color="#E5E5E5"> and what we can do with</font>

706
00:32:01,080 --> 00:32:05,668
that is that we can map<font color="#E5E5E5"> physical</font>

707
00:32:02,880 --> 00:32:07,289
interest slices and that's one way to

708
00:32:05,669 --> 00:32:10,799
reverse engineer this addressing

709
00:32:07,289 --> 00:32:14,279
function that was not documented<font color="#E5E5E5"> funnily</font>

710
00:32:10,799 --> 00:32:15,899
enough that's not the only way and what

711
00:32:14,279 --> 00:32:18,360
I did before that was using the

712
00:32:15,899 --> 00:32:20,820
performance counters to<font color="#CCCCCC"> reverse engineer</font>

713
00:32:18,360 --> 00:32:22,590
this<font color="#E5E5E5"> dysfunction but that's actually a</font>

714
00:32:20,820 --> 00:32:24,809
whole<font color="#CCCCCC"> other</font><font color="#E5E5E5"> story and if you want more</font>

715
00:32:22,590 --> 00:32:30,120
<font color="#E5E5E5">detail on that there's also</font><font color="#CCCCCC"> nothing on</font>

716
00:32:24,809 --> 00:32:32,158
that so the<font color="#E5E5E5"> next instruction</font><font color="#CCCCCC"> want to</font>

717
00:32:30,120 --> 00:32:35,399
talk about<font color="#E5E5E5"> is the prefetch instruction</font>

718
00:32:32,159 --> 00:32:38,880
and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> brief instructions used to della</font>

719
00:32:35,399 --> 00:32:41,279
<font color="#CCCCCC">cpu ok please load the data and it later</font>

720
00:32:38,880 --> 00:32:45,179
on into the<font color="#CCCCCC"> cash if you have some time</font>

721
00:32:41,279 --> 00:32:49,799
and in the anti actually six different

722
00:32:45,179 --> 00:32:52,889
<font color="#E5E5E5">prefetch instructions</font><font color="#CCCCCC"> 350 0 to t 2 which</font>

723
00:32:49,799 --> 00:32:54,899
means<font color="#CCCCCC"> cpu please load the data into the</font>

724
00:32:52,889 --> 00:32:58,590
<font color="#E5E5E5">first level</font><font color="#CCCCCC"> cache or in the last level</font>

725
00:32:54,899 --> 00:33:00,479
cache<font color="#CCCCCC"> whatever you want to use</font><font color="#E5E5E5"> but we</font>

726
00:32:58,590 --> 00:33:02,939
spare you the details because<font color="#E5E5E5"> it's not</font>

727
00:33:00,480 --> 00:33:04,919
so interesting in the end however<font color="#CCCCCC"> what's</font>

728
00:33:02,940 --> 00:33:07,440
more interesting is when we take a look

729
00:33:04,919 --> 00:33:10,019
at the<font color="#E5E5E5"> engine manual and what it says</font>

730
00:33:07,440 --> 00:33:12,330
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> so using the</font><font color="#CCCCCC"> prefetch</font>

731
00:33:10,019 --> 00:33:14,610
instruction is recommended only if<font color="#CCCCCC"> theta</font>

732
00:33:12,330 --> 00:33:16,830
<font color="#E5E5E5">does not fit in the cache so you can</font>

733
00:33:14,610 --> 00:33:19,469
tell us if you please slow data<font color="#CCCCCC"> I want</font>

734
00:33:16,830 --> 00:33:23,070
<font color="#CCCCCC">to stream into the cash so</font><font color="#E5E5E5"> it's more</font>

735
00:33:19,470 --> 00:33:25,440
performant use of software<font color="#CCCCCC"> prefetch</font>

736
00:33:23,070 --> 00:33:27,750
should be limited to memory addresses

737
00:33:25,440 --> 00:33:31,440
that are managed or<font color="#E5E5E5"> own within the</font>

738
00:33:27,750 --> 00:33:34,380
application context<font color="#E5E5E5"> so one might wonder</font>

739
00:33:31,440 --> 00:33:36,179
what happens if this address is not

740
00:33:34,380 --> 00:33:40,350
<font color="#CCCCCC">manage by myself</font>

741
00:33:36,179 --> 00:33:42,149
sounds interesting<font color="#CCCCCC"> pre-fishing two</font>

742
00:33:40,350 --> 00:33:44,070
<font color="#E5E5E5">addresses</font><font color="#CCCCCC"> that are not mapped</font><font color="#E5E5E5"> to</font>

743
00:33:42,149 --> 00:33:47,908
<font color="#E5E5E5">physical pages can experience</font>

744
00:33:44,070 --> 00:33:50,490
<font color="#CCCCCC">nondeterministic performance penalty for</font>

745
00:33:47,909 --> 00:33:52,679
example specifying a null pointer as an

746
00:33:50,490 --> 00:33:55,200
address for<font color="#E5E5E5"> prefetch</font><font color="#CCCCCC"> can cost long</font>

747
00:33:52,679 --> 00:33:58,679
delays<font color="#E5E5E5"> so we don't want to do that</font>

748
00:33:55,200 --> 00:34:01,919
because our program will be slow<font color="#E5E5E5"> so</font>

749
00:33:58,679 --> 00:34:04,519
let's take a look<font color="#CCCCCC"> what they mean</font><font color="#E5E5E5"> with</font>

750
00:34:01,919 --> 00:34:06,559
<font color="#CCCCCC">non-deterministic</font><font color="#E5E5E5"> performance penalty</font>

751
00:34:04,519 --> 00:34:10,339
<font color="#E5E5E5">because we want to write good</font><font color="#CCCCCC"> software</font>

752
00:34:06,559 --> 00:34:11,538
right<font color="#E5E5E5"> but before that we have to take a</font>

753
00:34:10,339 --> 00:34:14,690
look at the little bit more background

754
00:34:11,539 --> 00:34:17,569
information to understand<font color="#E5E5E5"> the attacks so</font>

755
00:34:14,690 --> 00:34:19,819
on modern operating systems<font color="#CCCCCC"> every</font>

756
00:34:17,569 --> 00:34:22,879
application has his own virtual address

757
00:34:19,819 --> 00:34:24,679
space<font color="#CCCCCC"> so at some point the cpu need to</font>

758
00:34:22,879 --> 00:34:26,839
translate these addresses to the

759
00:34:24,679 --> 00:34:29,569
physical addresses actually in the<font color="#CCCCCC"> drm</font>

760
00:34:26,839 --> 00:34:32,480
<font color="#E5E5E5">and for that we have this very complex</font>

761
00:34:29,569 --> 00:34:36,319
looking<font color="#E5E5E5"> data structure</font><font color="#CCCCCC"> so we have a</font>

762
00:34:32,480 --> 00:34:40,069
48-bit<font color="#E5E5E5"> virtual address and some of those</font>

763
00:34:36,319 --> 00:34:43,849
bits<font color="#CCCCCC"> map to</font><font color="#E5E5E5"> enable like the</font><font color="#CCCCCC"> PM level for</font>

764
00:34:40,069 --> 00:34:47,239
table with 512<font color="#E5E5E5"> entries so depending on</font>

765
00:34:43,849 --> 00:34:50,389
the<font color="#E5E5E5"> spits</font><font color="#CCCCCC"> disappear nose at which line</font>

766
00:34:47,239 --> 00:34:52,759
<font color="#E5E5E5">he has to look and if there is stated</font>

767
00:34:50,389 --> 00:34:54,859
<font color="#CCCCCC">tear because</font><font color="#E5E5E5"> the address is mapped he</font>

768
00:34:52,760 --> 00:34:57,770
can proceed<font color="#E5E5E5"> and look at the page</font>

769
00:34:54,859 --> 00:35:02,150
directory<font color="#E5E5E5"> point the table and surround</font>

770
00:34:57,770 --> 00:35:04,759
<font color="#E5E5E5">for town so</font><font color="#CCCCCC"> it's everything is the same</font>

771
00:35:02,150 --> 00:35:07,039
for each level until you come to your

772
00:35:04,760 --> 00:35:09,260
page table<font color="#E5E5E5"> where you have</font><font color="#CCCCCC"> four kilobyte</font>

773
00:35:07,039 --> 00:35:12,410
pages<font color="#E5E5E5"> so it's in the end not that</font>

774
00:35:09,260 --> 00:35:14,329
complicated but it's a bit confusing

775
00:35:12,410 --> 00:35:16,670
because you want to know a physical

776
00:35:14,329 --> 00:35:20,329
address<font color="#CCCCCC"> so you have to look it up</font>

777
00:35:16,670 --> 00:35:22,400
somewhere in them in the main memory

778
00:35:20,329 --> 00:35:24,770
<font color="#E5E5E5">with physical addresses to translate the</font>

779
00:35:22,400 --> 00:35:28,069
virtual addresses<font color="#E5E5E5"> and if you have to go</font>

780
00:35:24,770 --> 00:35:31,910
through all those levels<font color="#E5E5E5"> it needs a long</font>

781
00:35:28,069 --> 00:35:33,799
time so we can do better than that<font color="#E5E5E5"> and</font>

782
00:35:31,910 --> 00:35:39,319
that's why<font color="#CCCCCC"> intel introduced</font><font color="#E5E5E5"> additional</font>

783
00:35:33,799 --> 00:35:41,299
<font color="#CCCCCC">caches</font><font color="#E5E5E5"> also for all of those levels so</font>

784
00:35:39,319 --> 00:35:44,599
if<font color="#CCCCCC"> he wants to didn't translate an</font>

785
00:35:41,299 --> 00:35:46,430
address<font color="#CCCCCC"> they can look at the itlp</font><font color="#E5E5E5"> and</font>

786
00:35:44,599 --> 00:35:49,069
<font color="#CCCCCC">for</font><font color="#E5E5E5"> instructions and the data will be</font>

787
00:35:46,430 --> 00:35:51,710
<font color="#CCCCCC">for data</font><font color="#E5E5E5"> if it's there you can stop</font>

788
00:35:49,069 --> 00:35:54,109
<font color="#E5E5E5">otherwise you go down all those levels</font>

789
00:35:51,710 --> 00:36:00,020
and if it's not in any cash<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to</font>

790
00:35:54,109 --> 00:36:02,150
look it up in the drm<font color="#E5E5E5"> in addition the</font>

791
00:36:00,020 --> 00:36:03,829
address space you have shared<font color="#E5E5E5"> because</font>

792
00:36:02,150 --> 00:36:05,960
you have on the one hand the user memory

793
00:36:03,829 --> 00:36:08,180
and the other hand you have<font color="#CCCCCC"> mapped</font><font color="#E5E5E5"> the</font>

794
00:36:05,960 --> 00:36:11,390
<font color="#CCCCCC">colonel</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> convenience and performance</font>

795
00:36:08,180 --> 00:36:13,339
<font color="#E5E5E5">also in the address space and if you</font><font color="#CCCCCC"> use</font>

796
00:36:11,390 --> 00:36:15,839
<font color="#CCCCCC">a</font><font color="#E5E5E5"> program wants to access some</font><font color="#CCCCCC"> kernel</font>

797
00:36:13,339 --> 00:36:18,330
functionality like reading a file

798
00:36:15,840 --> 00:36:20,220
it will switch to the<font color="#CCCCCC"> kernel memory</font>

799
00:36:18,330 --> 00:36:22,620
<font color="#E5E5E5">there's a privilege escalation and then</font>

800
00:36:20,220 --> 00:36:24,779
you can create the file and so on<font color="#CCCCCC"> so</font>

801
00:36:22,620 --> 00:36:27,660
<font color="#E5E5E5">that's it</font>

802
00:36:24,780 --> 00:36:30,780
however you have<font color="#CCCCCC"> trials</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> colonel</font>

803
00:36:27,660 --> 00:36:33,210
<font color="#E5E5E5">and</font><font color="#CCCCCC"> if you know the addresses of those</font>

804
00:36:30,780 --> 00:36:35,820
drivers you can do code<font color="#CCCCCC"> reuse that</font>

805
00:36:33,210 --> 00:36:37,440
<font color="#E5E5E5">accent as a countermeasure</font><font color="#CCCCCC"> they</font>

806
00:36:35,820 --> 00:36:41,100
introduced<font color="#E5E5E5"> address space layout</font>

807
00:36:37,440 --> 00:36:44,040
randomization<font color="#E5E5E5"> also</font><font color="#CCCCCC"> photochromic and this</font>

808
00:36:41,100 --> 00:36:47,400
means that when you have your program

809
00:36:44,040 --> 00:36:50,130
running<font color="#E5E5E5"> the</font><font color="#CCCCCC"> only snapped at one address</font>

810
00:36:47,400 --> 00:36:51,660
<font color="#E5E5E5">and if you reboot the machine</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not</font>

811
00:36:50,130 --> 00:36:54,960
on the same address<font color="#E5E5E5"> anymore that</font>

812
00:36:51,660 --> 00:36:58,170
somewhere else<font color="#CCCCCC"> so if there's a way to</font>

813
00:36:54,960 --> 00:37:01,260
find out<font color="#CCCCCC"> at which address</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> currently</font>

814
00:36:58,170 --> 00:37:04,200
<font color="#E5E5E5">loaded you have circumvented this</font>

815
00:37:01,260 --> 00:37:06,180
<font color="#CCCCCC">countermeasure</font><font color="#E5E5E5"> and defeated</font><font color="#CCCCCC"> Colonel</font>

816
00:37:04,200 --> 00:37:10,589
address space layout randomization<font color="#CCCCCC"> so</font>

817
00:37:06,180 --> 00:37:12,870
this would be nice for some attacks in

818
00:37:10,590 --> 00:37:16,110
addition there's also the<font color="#CCCCCC"> camel direct</font>

819
00:37:12,870 --> 00:37:19,080
physical map<font color="#E5E5E5"> and what does this mean</font>

820
00:37:16,110 --> 00:37:22,470
so<font color="#E5E5E5"> it's implemented on many operating</font>

821
00:37:19,080 --> 00:37:25,319
systems like OS X Linux<font color="#E5E5E5"> also an extent</font>

822
00:37:22,470 --> 00:37:29,759
<font color="#E5E5E5">hypervisor and</font><font color="#CCCCCC"> PSD but not on Windows</font>

823
00:37:25,320 --> 00:37:32,310
<font color="#CCCCCC">but what it means is that the complete</font>

824
00:37:29,760 --> 00:37:34,710
physical memory is mapped in

825
00:37:32,310 --> 00:37:38,730
additionally in the<font color="#E5E5E5"> kernel memory at the</font>

826
00:37:34,710 --> 00:37:40,470
fixed offset<font color="#E5E5E5"> so for every page that is</font>

827
00:37:38,730 --> 00:37:43,140
<font color="#E5E5E5">mapped in the user space</font><font color="#CCCCCC"> there's</font>

828
00:37:40,470 --> 00:37:45,390
something like a twin page in the kernel

829
00:37:43,140 --> 00:37:47,730
memory which you can't access because

830
00:37:45,390 --> 00:37:50,279
it's in the<font color="#E5E5E5"> kernel memory</font>

831
00:37:47,730 --> 00:37:53,100
however we will need<font color="#CCCCCC"> it later</font><font color="#E5E5E5"> because</font>

832
00:37:50,280 --> 00:37:57,090
now we go back to<font color="#E5E5E5"> prefetch and see what</font>

833
00:37:53,100 --> 00:38:00,480
we can do with that<font color="#E5E5E5"> so</font><font color="#CCCCCC"> free fetch is not</font>

834
00:37:57,090 --> 00:38:02,910
unusual instruction<font color="#E5E5E5"> because it just</font>

835
00:38:00,480 --> 00:38:05,400
<font color="#E5E5E5">tells the</font><font color="#CCCCCC"> cpu I might</font><font color="#E5E5E5"> need that data</font>

836
00:38:02,910 --> 00:38:09,420
later on if you have time loaded for me

837
00:38:05,400 --> 00:38:12,450
if not deceive you<font color="#E5E5E5"> can ignore it because</font>

838
00:38:09,420 --> 00:38:14,340
<font color="#CCCCCC">it's busy with other stuff so there's no</font>

839
00:38:12,450 --> 00:38:16,710
necessity that this instruction is

840
00:38:14,340 --> 00:38:20,940
really executed<font color="#E5E5E5"> but most of the time it</font>

841
00:38:16,710 --> 00:38:23,880
is and<font color="#E5E5E5"> a nice interesting thing is that</font>

842
00:38:20,940 --> 00:38:25,800
it generates no false<font color="#CCCCCC"> so</font><font color="#E5E5E5"> whatever you</font>

843
00:38:23,880 --> 00:38:28,450
pass<font color="#E5E5E5"> through this instruction your</font>

844
00:38:25,800 --> 00:38:31,089
program<font color="#E5E5E5"> won't crash and</font>

845
00:38:28,450 --> 00:38:33,490
<font color="#E5E5E5">it does not check any privileges so</font><font color="#CCCCCC"> i</font>

846
00:38:31,089 --> 00:38:36,130
can also pass and try and address to it

847
00:38:33,490 --> 00:38:37,660
and it<font color="#CCCCCC"> won't say now stop your axis and</font>

848
00:38:36,130 --> 00:38:41,950
<font color="#E5E5E5">address that you are not allowed to act</font>

849
00:38:37,660 --> 00:38:43,899
<font color="#E5E5E5">is so</font><font color="#CCCCCC"> I crash</font><font color="#E5E5E5"> it just continues which is</font>

850
00:38:41,950 --> 00:38:47,109
nice

851
00:38:43,900 --> 00:38:49,900
the second interesting thing is that the

852
00:38:47,109 --> 00:38:52,900
operators virtual address<font color="#CCCCCC"> so every time</font>

853
00:38:49,900 --> 00:38:55,390
you execute this instruction<font color="#CCCCCC"> the</font><font color="#E5E5E5"> CPU has</font>

854
00:38:52,900 --> 00:38:57,339
<font color="#E5E5E5">to go and check</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> what physical</font>

855
00:38:55,390 --> 00:38:59,618
address<font color="#CCCCCC"> does</font><font color="#E5E5E5"> this virtual address</font>

856
00:38:57,339 --> 00:39:02,799
correspond to<font color="#E5E5E5"> so it has to do look up</font>

857
00:38:59,619 --> 00:39:05,650
with all<font color="#CCCCCC"> those tables within</font><font color="#E5E5E5"> earlier and</font>

858
00:39:02,800 --> 00:39:08,050
as you probably have guessed already<font color="#CCCCCC"> the</font>

859
00:39:05,650 --> 00:39:10,210
execution time various<font color="#E5E5E5"> also</font><font color="#CCCCCC"> for the</font>

860
00:39:08,050 --> 00:39:12,130
<font color="#CCCCCC">profession structure and we'll see later</font>

861
00:39:10,210 --> 00:39:15,790
on what we can do with<font color="#CCCCCC"> that</font>

862
00:39:12,130 --> 00:39:19,390
so let's get back to the direct physical

863
00:39:15,790 --> 00:39:21,700
match<font color="#CCCCCC"> map</font><font color="#E5E5E5"> because we can create an</font>

864
00:39:19,390 --> 00:39:24,098
<font color="#CCCCCC">irregular</font><font color="#E5E5E5"> for address translation so we</font>

865
00:39:21,700 --> 00:39:26,470
can find out what physical address

866
00:39:24,099 --> 00:39:28,780
belongs to the virtual address<font color="#E5E5E5"> because</font>

867
00:39:26,470 --> 00:39:31,359
nowadays you don't want that the user to

868
00:39:28,780 --> 00:39:34,210
know because you can craft nice<font color="#E5E5E5"> throw my</font>

869
00:39:31,359 --> 00:39:36,730
attacks with that information and more

870
00:39:34,210 --> 00:39:39,490
advanced<font color="#CCCCCC"> catch attacks so you restrict</font>

871
00:39:36,730 --> 00:39:41,980
this information to the user<font color="#E5E5E5"> but let's</font>

872
00:39:39,490 --> 00:39:45,160
check if we find a way to still get this

873
00:39:41,980 --> 00:39:49,720
information<font color="#E5E5E5"> so as</font><font color="#CCCCCC"> I've told you earlier</font>

874
00:39:45,160 --> 00:39:52,149
if you<font color="#E5E5E5"> have a</font><font color="#CCCCCC"> bad page in the</font><font color="#E5E5E5"> user space</font>

875
00:39:49,720 --> 00:39:55,180
mapped<font color="#E5E5E5"> you have the twin page in the</font>

876
00:39:52,150 --> 00:39:58,329
<font color="#CCCCCC">kennel space and if it's cached its cash</font>

877
00:39:55,180 --> 00:40:00,970
<font color="#E5E5E5">for both of them again so the attack now</font>

878
00:39:58,329 --> 00:40:05,290
works as the following from the attacker

879
00:40:00,970 --> 00:40:07,328
<font color="#E5E5E5">you flash your user space page so it's</font>

880
00:40:05,290 --> 00:40:10,900
not in the cache<font color="#E5E5E5"> for yet also for</font>

881
00:40:07,329 --> 00:40:13,900
account memory and then you called<font color="#E5E5E5"> pre</font>

882
00:40:10,900 --> 00:40:16,750
fetch on the address of the<font color="#CCCCCC"> colonel</font>

883
00:40:13,900 --> 00:40:18,880
because<font color="#CCCCCC"> I told you</font><font color="#E5E5E5"> you still can do that</font>

884
00:40:16,750 --> 00:40:23,020
because it doesn't create any thoughts

885
00:40:18,880 --> 00:40:26,589
so you tell the<font color="#CCCCCC"> cpu please load meet the</font>

886
00:40:23,020 --> 00:40:29,890
<font color="#CCCCCC">stator into</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> cash</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> if i don't</font>

887
00:40:26,589 --> 00:40:32,828
have access to<font color="#E5E5E5"> the stator</font><font color="#CCCCCC"> normally</font><font color="#E5E5E5"> and</font>

888
00:40:29,890 --> 00:40:35,140
if we now measure on our<font color="#CCCCCC"> user space page</font>

889
00:40:32,829 --> 00:40:37,900
<font color="#E5E5E5">the address again and we measure</font><font color="#CCCCCC"> catch</font>

890
00:40:35,140 --> 00:40:38,930
it because it has been loaded by the<font color="#CCCCCC"> cpu</font>

891
00:40:37,900 --> 00:40:42,109
into the<font color="#CCCCCC"> cash</font>

892
00:40:38,930 --> 00:40:44,058
<font color="#E5E5E5">we know exactly at which position since</font>

893
00:40:42,109 --> 00:40:47,660
we passed the address to the function

894
00:40:44,059 --> 00:40:50,210
this address corresponds to<font color="#CCCCCC"> an</font><font color="#E5E5E5"> because</font>

895
00:40:47,660 --> 00:40:52,279
this is at a fixed offset<font color="#CCCCCC"> we can just do</font>

896
00:40:50,210 --> 00:40:55,369
a simple subtraction<font color="#E5E5E5"> and now the</font>

897
00:40:52,280 --> 00:40:57,770
physical address again<font color="#CCCCCC"> so we have a nice</font>

898
00:40:55,369 --> 00:41:00,109
way to find physical addresses for

899
00:40:57,770 --> 00:41:02,480
virtual addresses and in practice this

900
00:41:00,109 --> 00:41:05,660
looks like<font color="#E5E5E5"> this following</font><font color="#CCCCCC"> plot</font><font color="#E5E5E5"> so it's</font>

901
00:41:02,480 --> 00:41:07,760
pretty simple<font color="#CCCCCC"> because</font><font color="#E5E5E5"> we just do this</font>

902
00:41:05,660 --> 00:41:09,589
for every address and at some point we

903
00:41:07,760 --> 00:41:12,589
measure<font color="#CCCCCC"> cash it so there's a huge</font>

904
00:41:09,589 --> 00:41:15,349
difference<font color="#E5E5E5"> and exactly at this point we</font>

905
00:41:12,589 --> 00:41:19,490
know this physical address corresponds

906
00:41:15,349 --> 00:41:21,589
to our virtual address<font color="#E5E5E5"> the second thing</font>

907
00:41:19,490 --> 00:41:24,618
is that we can exploit the timing

908
00:41:21,589 --> 00:41:27,740
differences<font color="#CCCCCC"> it needs for the pre fish in</font>

909
00:41:24,619 --> 00:41:30,770
structure because as<font color="#CCCCCC"> I told</font><font color="#E5E5E5"> you when you</font>

910
00:41:27,740 --> 00:41:33,078
go down this cash levels at some point

911
00:41:30,770 --> 00:41:35,869
<font color="#E5E5E5">to see it's here or it's not here so it</font>

912
00:41:33,079 --> 00:41:38,059
can<font color="#CCCCCC"> abort early</font><font color="#E5E5E5"> and with that we can</font>

913
00:41:35,869 --> 00:41:40,670
know exactly when the prefetch

914
00:41:38,059 --> 00:41:43,579
<font color="#E5E5E5">instruction reported and now how the</font>

915
00:41:40,670 --> 00:41:48,170
pages are mapped into the address space

916
00:41:43,579 --> 00:41:54,079
so the timing depends on<font color="#E5E5E5"> reddit</font>

917
00:41:48,170 --> 00:41:57,200
translation<font color="#E5E5E5"> stops and using those two</font>

918
00:41:54,079 --> 00:41:58,130
properties until<font color="#E5E5E5"> information we can do</font>

919
00:41:57,200 --> 00:42:00,558
the following

920
00:41:58,130 --> 00:42:03,049
on<font color="#E5E5E5"> the one hand we can build</font><font color="#CCCCCC"> very ends</font>

921
00:42:00,559 --> 00:42:05,150
of<font color="#E5E5E5"> cash effects</font><font color="#CCCCCC"> so instead of flash and</font>

922
00:42:03,049 --> 00:42:07,790
reload<font color="#CCCCCC"> we can do for our flash and</font>

923
00:42:05,150 --> 00:42:10,040
prefetch for instance we can also use

924
00:42:07,790 --> 00:42:12,410
prefetch to<font color="#CCCCCC"> Montreux</font><font color="#E5E5E5"> him a tax on</font>

925
00:42:10,040 --> 00:42:14,299
privileged addresses<font color="#E5E5E5"> because it doesn't</font>

926
00:42:12,410 --> 00:42:17,899
do any<font color="#E5E5E5"> false</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> passed those</font>

927
00:42:14,299 --> 00:42:20,660
addresses and it works as well<font color="#E5E5E5"> in</font>

928
00:42:17,900 --> 00:42:23,119
addition we can use it to recover the

929
00:42:20,660 --> 00:42:24,828
translation<font color="#E5E5E5"> levels of a process which</font>

930
00:42:23,119 --> 00:42:27,049
you could do earlier with the<font color="#E5E5E5"> page</font>

931
00:42:24,829 --> 00:42:28,880
<font color="#CCCCCC">netfile</font><font color="#E5E5E5"> but as I told you it's not</font>

932
00:42:27,049 --> 00:42:31,819
privileged<font color="#CCCCCC"> so you don't have access to</font>

933
00:42:28,880 --> 00:42:35,059
that<font color="#E5E5E5"> and by doing that you can</font><font color="#CCCCCC"> buy-bust</font>

934
00:42:31,819 --> 00:42:37,579
<font color="#E5E5E5">address space layout randomization in</font>

935
00:42:35,059 --> 00:42:39,530
addition as<font color="#CCCCCC"> i</font><font color="#E5E5E5"> told</font><font color="#CCCCCC"> you you can translate</font>

936
00:42:37,579 --> 00:42:42,770
virtual addresses<font color="#E5E5E5"> to physical addresses</font>

937
00:42:39,530 --> 00:42:45,319
which is now also privileged<font color="#E5E5E5"> with the</font>

938
00:42:42,770 --> 00:42:47,569
basement file and using that it really

939
00:42:45,319 --> 00:42:51,740
enables<font color="#CCCCCC"> return the direct exploit its</font>

940
00:42:47,569 --> 00:42:54,380
which<font color="#E5E5E5"> has been demonstrated last year</font>

941
00:42:51,740 --> 00:42:56,299
on top of that we can also use this to

942
00:42:54,380 --> 00:42:59,600
locate Colonel<font color="#E5E5E5"> drivers</font><font color="#CCCCCC"> as i told you it</font>

943
00:42:56,300 --> 00:43:01,880
would be<font color="#E5E5E5"> nice if we can circumvent</font><font color="#CCCCCC"> ksl</font>

944
00:42:59,600 --> 00:43:03,710
<font color="#CCCCCC">our as well</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> i will</font><font color="#E5E5E5"> show you now how</font>

945
00:43:01,880 --> 00:43:08,360
this is possible

946
00:43:03,710 --> 00:43:10,700
so with the first<font color="#CCCCCC"> oracle</font><font color="#E5E5E5"> we find out all</font>

947
00:43:08,360 --> 00:43:15,230
the pages that are mapped and for each

948
00:43:10,700 --> 00:43:17,089
of those pages<font color="#E5E5E5"> we</font><font color="#CCCCCC"> evict</font><font color="#E5E5E5"> the translation</font>

949
00:43:15,230 --> 00:43:19,100
caches<font color="#E5E5E5"> and we can do that by either</font>

950
00:43:17,090 --> 00:43:22,160
calling sleep which<font color="#CCCCCC"> schedule</font><font color="#E5E5E5"> another</font>

951
00:43:19,100 --> 00:43:25,160
program or<font color="#E5E5E5"> excess just a large memory</font>

952
00:43:22,160 --> 00:43:27,080
buffer then we<font color="#E5E5E5"> perform</font><font color="#CCCCCC"> this is called</font>

953
00:43:25,160 --> 00:43:28,850
<font color="#CCCCCC">the</font><font color="#E5E5E5"> driver so</font><font color="#CCCCCC"> that is called of the</font>

954
00:43:27,080 --> 00:43:31,549
driver executed and loaded into the

955
00:43:28,850 --> 00:43:35,750
<font color="#CCCCCC">cache</font><font color="#E5E5E5"> and then we just measure the time</font>

956
00:43:31,550 --> 00:43:38,780
<font color="#E5E5E5">three fish takes on this address and in</font>

957
00:43:35,750 --> 00:43:42,380
the<font color="#E5E5E5"> end the fastest average access time</font>

958
00:43:38,780 --> 00:43:44,330
is the driver page so we can mount this

959
00:43:42,380 --> 00:43:47,960
attack on<font color="#CCCCCC"> Windows 10 in less than 12</font>

960
00:43:44,330 --> 00:43:50,779
seconds<font color="#CCCCCC"> so we can defeat Caroline less</font>

961
00:43:47,960 --> 00:43:53,390
than 12 seconds which is very nice<font color="#E5E5E5"> and</font>

962
00:43:50,780 --> 00:43:56,990
in practice<font color="#E5E5E5"> the measurements looks like</font>

963
00:43:53,390 --> 00:43:59,420
the<font color="#CCCCCC"> following so we have a lot of</font><font color="#E5E5E5"> long</font>

964
00:43:56,990 --> 00:44:01,819
measurements and at<font color="#E5E5E5"> some point you have</font>

965
00:43:59,420 --> 00:44:06,770
a<font color="#CCCCCC"> loved</font><font color="#E5E5E5"> one and you know exactly that</font>

966
00:44:01,820 --> 00:44:08,720
the disk driver<font color="#E5E5E5"> region and</font><font color="#CCCCCC"> addressed the</font>

967
00:44:06,770 --> 00:44:12,200
driver is located<font color="#E5E5E5"> and you can mount</font>

968
00:44:08,720 --> 00:44:15,830
<font color="#E5E5E5">those</font><font color="#CCCCCC"> red</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> direct attacks again</font>

969
00:44:12,200 --> 00:44:18,710
<font color="#E5E5E5">however that's</font><font color="#CCCCCC"> not everything</font><font color="#E5E5E5"> because</font>

970
00:44:15,830 --> 00:44:21,319
there are more<font color="#E5E5E5"> instructions mental now</font>

971
00:44:18,710 --> 00:44:22,790
so that the following is not our work

972
00:44:21,320 --> 00:44:24,650
but we thought that would be interested

973
00:44:22,790 --> 00:44:28,970
because it's basically more instructions

974
00:44:24,650 --> 00:44:31,369
<font color="#CCCCCC">more tex</font><font color="#E5E5E5"> orphans so there's the</font><font color="#CCCCCC"> deceit</font>

975
00:44:28,970 --> 00:44:33,169
instruction and what it does that is

976
00:44:31,369 --> 00:44:35,690
requested random<font color="#CCCCCC"> see to</font><font color="#E5E5E5"> the hardware</font>

977
00:44:33,170 --> 00:44:37,010
<font color="#E5E5E5">random number generator so the thing is</font>

978
00:44:35,690 --> 00:44:39,140
that there is<font color="#CCCCCC"> the fixed</font><font color="#E5E5E5"> number of</font>

979
00:44:37,010 --> 00:44:41,720
<font color="#CCCCCC">recomputed random bits</font><font color="#E5E5E5"> and that takes</font>

980
00:44:39,140 --> 00:44:43,970
time to regenerate them so as everything

981
00:44:41,720 --> 00:44:47,750
that takes time<font color="#CCCCCC"> you can create a cover</font>

982
00:44:43,970 --> 00:44:49,640
<font color="#CCCCCC">to notice that</font><font color="#E5E5E5"> there's also</font><font color="#CCCCCC"> if a deaf</font>

983
00:44:47,750 --> 00:44:53,300
<font color="#CCCCCC">man which are floating point</font><font color="#E5E5E5"> operations</font>

984
00:44:49,640 --> 00:44:56,450
here<font color="#CCCCCC"> the running time of this</font>

985
00:44:53,300 --> 00:44:58,280
instruction depends on the operands<font color="#E5E5E5"> some</font>

986
00:44:56,450 --> 00:45:00,770
people<font color="#CCCCCC"> manage two pies firefox same</font>

987
00:44:58,280 --> 00:45:04,160
<font color="#CCCCCC">origin policy reason</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> filter</font>

988
00:45:00,770 --> 00:45:05,250
timing<font color="#CCCCCC"> attack with debt and there's also</font>

989
00:45:04,160 --> 00:45:08,759
the drum<font color="#CCCCCC"> instruction</font>

990
00:45:05,250 --> 00:45:11,100
<font color="#CCCCCC">Sam's</font><font color="#E5E5E5"> so in modern CPUs you have branch</font>

991
00:45:08,760 --> 00:45:13,860
prediction and<font color="#E5E5E5"> and</font><font color="#CCCCCC"> branched I would</font>

992
00:45:11,100 --> 00:45:16,020
<font color="#CCCCCC">target</font><font color="#E5E5E5"> prediction with that</font><font color="#CCCCCC"> there it's</font>

993
00:45:13,860 --> 00:45:18,120
<font color="#E5E5E5">actually been studied</font><font color="#CCCCCC"> rod you can create</font>

994
00:45:16,020 --> 00:45:20,430
<font color="#CCCCCC">comfortable you can do</font><font color="#E5E5E5"> such</font><font color="#CCCCCC"> an attack</font>

995
00:45:18,120 --> 00:45:24,509
<font color="#CCCCCC">some crypto you can also buy scantily</font>

996
00:45:20,430 --> 00:45:27,419
<font color="#CCCCCC">setup and</font><font color="#E5E5E5"> finally there are</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> second</font>

997
00:45:24,510 --> 00:45:29,160
instructions which is an extension for

998
00:45:27,420 --> 00:45:31,560
hard work from<font color="#E5E5E5"> the action memory support</font>

999
00:45:29,160 --> 00:45:33,540
which has also been used to<font color="#CCCCCC"> Piper</font>

1000
00:45:31,560 --> 00:45:36,330
scandalous<font color="#E5E5E5"> and also in case your natural</font>

1001
00:45:33,540 --> 00:45:39,630
<font color="#CCCCCC">Kelly is so i stood</font><font color="#E5E5E5"> you have lots of</font>

1002
00:45:36,330 --> 00:45:44,940
different things for it

1003
00:45:39,630 --> 00:45:47,670
<font color="#CCCCCC">okay so on the computer now</font><font color="#E5E5E5"> so have you</font>

1004
00:45:44,940 --> 00:45:50,010
seen it's actually more a problem of CPU

1005
00:45:47,670 --> 00:45:53,220
design<font color="#E5E5E5"> then really the instruction set</font>

1006
00:45:50,010 --> 00:45:55,410
architecture<font color="#E5E5E5"> the thing is that all these</font>

1007
00:45:53,220 --> 00:45:58,290
issues are really hard to<font color="#E5E5E5"> patch</font><font color="#CCCCCC"> they are</font>

1008
00:45:55,410 --> 00:46:00,210
all linked to performance optimizations

1009
00:45:58,290 --> 00:46:01,620
and<font color="#E5E5E5"> we are not getting rid of</font>

1010
00:46:00,210 --> 00:46:03,210
performance optimization that's

1011
00:46:01,620 --> 00:46:05,790
basically a<font color="#E5E5E5"> trade-off between</font>

1012
00:46:03,210 --> 00:46:09,240
performance and security and performance

1013
00:46:05,790 --> 00:46:13,800
seems to always win

1014
00:46:09,240 --> 00:46:19,680
there has been<font color="#E5E5E5"> some propositions to</font>

1015
00:46:13,800 --> 00:46:22,740
against cat attacks<font color="#CCCCCC"> to let me remove</font>

1016
00:46:19,680 --> 00:46:24,660
<font color="#CCCCCC">this your</font><font color="#E5E5E5"> first instructions and the</font>

1017
00:46:22,740 --> 00:46:27,660
thing is that all these quick fix<font color="#E5E5E5"> won't</font>

1018
00:46:24,660 --> 00:46:29,220
<font color="#E5E5E5">work because we always find the ways to</font>

1019
00:46:27,660 --> 00:46:31,890
do the same thing without<font color="#E5E5E5"> this precise</font>

1020
00:46:29,220 --> 00:46:33,390
instructions and also we keep finding

1021
00:46:31,890 --> 00:46:38,279
new<font color="#CCCCCC"> instruction</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> leaked information</font>

1022
00:46:33,390 --> 00:46:42,270
<font color="#CCCCCC">so it's really quite quite a big topic</font>

1023
00:46:38,280 --> 00:46:44,310
that that we have to fix this so thank

1024
00:46:42,270 --> 00:46:47,700
<font color="#E5E5E5">you very much for your attention</font>

1025
00:46:44,310 --> 00:46:52,380
<font color="#CCCCCC">if</font><font color="#E5E5E5"> you have any questions</font><font color="#CCCCCC"> will be</font><font color="#E5E5E5"> happy</font>

1026
00:46:47,700 --> 00:46:59,759
[Applause]

1027
00:46:52,380 --> 00:47:02,280
<font color="#CCCCCC">ok</font>

1028
00:46:59,760 --> 00:47:04,770
<font color="#E5E5E5">thank you very much again for your talk</font>

1029
00:47:02,280 --> 00:47:07,740
<font color="#E5E5E5">and now we will have the Q&A and we have</font>

1030
00:47:04,770 --> 00:47:09,540
<font color="#E5E5E5">I think about 15 minutes so you can</font>

1031
00:47:07,740 --> 00:47:12,299
start lining up behind the microphones

1032
00:47:09,540 --> 00:47:16,680
<font color="#CCCCCC">they are in the grace in the</font><font color="#E5E5E5"> middle</font>

1033
00:47:12,300 --> 00:47:17,760
except i think that<font color="#E5E5E5"> 10 it's a backup so</font>

1034
00:47:16,680 --> 00:47:19,859
it<font color="#E5E5E5"> will work</font>

1035
00:47:17,760 --> 00:47:22,020
and while we wait<font color="#CCCCCC"> I think we</font><font color="#E5E5E5"> will take</font>

1036
00:47:19,860 --> 00:47:26,760
questions from our signal<font color="#E5E5E5"> angel if there</font>

1037
00:47:22,020 --> 00:47:31,390
<font color="#E5E5E5">are any</font><font color="#CCCCCC"> ok they aren't any so</font><font color="#E5E5E5"> microphone</font>

1038
00:47:26,760 --> 00:47:34,690
questions<font color="#CCCCCC"> i think you have</font><font color="#E5E5E5"> front like</font>

1039
00:47:31,390 --> 00:47:39,970
<font color="#CCCCCC">can you do</font><font color="#E5E5E5"> me</font>

1040
00:47:34,690 --> 00:47:43,180
<font color="#E5E5E5">try again</font><font color="#CCCCCC"> okay i can</font><font color="#E5E5E5"> you hear me now</font>

1041
00:47:39,970 --> 00:47:46,180
<font color="#CCCCCC">okay yeah</font><font color="#E5E5E5"> I'd like to know what exactly</font>

1042
00:47:43,180 --> 00:47:48,609
was yours<font color="#CCCCCC"> stealthiness</font><font color="#E5E5E5"> metric</font><font color="#CCCCCC"> was it</font>

1043
00:47:46,180 --> 00:47:53,500
that you can't distinguish<font color="#E5E5E5"> distinguish</font>

1044
00:47:48,609 --> 00:47:56,560
it from a normal process or<font color="#E5E5E5"> so</font><font color="#CCCCCC"> white</font>

1045
00:47:53,500 --> 00:47:58,540
<font color="#E5E5E5">second</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> we have stuck your day could</font>

1046
00:47:56,560 --> 00:48:02,109
you quiet down a bit

1047
00:47:58,540 --> 00:48:04,180
that would<font color="#E5E5E5"> be nice the question was</font>

1048
00:48:02,109 --> 00:48:08,920
about this<font color="#E5E5E5"> fierceness metric basically</font>

1049
00:48:04,180 --> 00:48:12,609
and we so we<font color="#E5E5E5"> am used to metric with the</font>

1050
00:48:08,920 --> 00:48:14,560
cache misses and<font color="#CCCCCC"> cat</font><font color="#E5E5E5"> references and</font>

1051
00:48:12,609 --> 00:48:19,359
normalized by the instructions will be

1052
00:48:14,560 --> 00:48:22,390
events and we just found the threshold

1053
00:48:19,359 --> 00:48:24,098
and<font color="#E5E5E5"> the which pretty much every</font><font color="#CCCCCC"> lap</font>

1054
00:48:22,390 --> 00:48:26,529
<font color="#E5E5E5">every</font><font color="#CCCCCC"> nine application was below this</font>

1055
00:48:24,099 --> 00:48:31,750
and<font color="#CCCCCC"> drama and can't explain</font><font color="#E5E5E5"> after that</font>

1056
00:48:26,530 --> 00:48:32,770
<font color="#E5E5E5">so we we fix</font><font color="#CCCCCC"> this record medical that</font>

1057
00:48:31,750 --> 00:48:36,640
microphone

1058
00:48:32,770 --> 00:48:40,869
<font color="#E5E5E5">hello</font><font color="#CCCCCC"> thanks for the talk was great</font>

1059
00:48:36,640 --> 00:48:42,490
first question<font color="#E5E5E5"> did you inform</font><font color="#CCCCCC"> int'l</font>

1060
00:48:40,869 --> 00:48:47,710
before<font color="#E5E5E5"> doing this talk</font>

1061
00:48:42,490 --> 00:48:51,729
<font color="#CCCCCC">no okay the second question</font><font color="#E5E5E5"> what your</font>

1062
00:48:47,710 --> 00:48:54,160
future plans<font color="#E5E5E5"> sorry what's your future</font>

1063
00:48:51,730 --> 00:48:56,770
plans future plans

1064
00:48:54,160 --> 00:48:59,290
well when<font color="#CCCCCC"> i did that is interesting is</font>

1065
00:48:56,770 --> 00:49:02,950
that we keep finding these smallest by

1066
00:48:59,290 --> 00:49:05,050
<font color="#E5E5E5">accident or</font><font color="#CCCCCC"> mine really so</font><font color="#E5E5E5"> I having a</font>

1067
00:49:02,950 --> 00:49:07,029
good idea of what's the attack surface

1068
00:49:05,050 --> 00:49:09,160
here would be a good thing and doing

1069
00:49:07,030 --> 00:49:13,540
that automatically would be even better

1070
00:49:09,160 --> 00:49:15,790
great<font color="#E5E5E5"> things</font><font color="#CCCCCC"> ok the microphone</font><font color="#E5E5E5"> in the</font>

1071
00:49:13,540 --> 00:49:19,060
back over there<font color="#E5E5E5"> the</font><font color="#CCCCCC"> work I and white</font>

1072
00:49:15,790 --> 00:49:21,849
<font color="#CCCCCC">hi one question if you have like a demon</font>

1073
00:49:19,060 --> 00:49:24,670
that randomly<font color="#CCCCCC"> invalidate</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> cache</font>

1074
00:49:21,849 --> 00:49:28,810
lines would that be<font color="#E5E5E5"> a better condom</font>

1075
00:49:24,670 --> 00:49:34,660
<font color="#E5E5E5">measure than disabling the cash</font>

1076
00:49:28,810 --> 00:49:37,390
<font color="#CCCCCC">the first</font><font color="#E5E5E5"> question if</font><font color="#CCCCCC"> invalidating</font><font color="#E5E5E5"> cache</font>

1077
00:49:34,660 --> 00:49:41,649
lines would be better than<font color="#CCCCCC"> deserving</font>

1078
00:49:37,390 --> 00:49:43,900
<font color="#CCCCCC">default cash</font><font color="#E5E5E5"> so I'm if you know which</font>

1079
00:49:41,650 --> 00:49:45,940
<font color="#E5E5E5">cache lines have been accessed by the</font>

1080
00:49:43,900 --> 00:49:48,520
process you can invalidate<font color="#E5E5E5"> those cache</font>

1081
00:49:45,940 --> 00:49:50,860
lines before you swap those processes

1082
00:49:48,520 --> 00:49:53,530
<font color="#E5E5E5">but it's also a</font><font color="#CCCCCC"> trade-off between</font>

1083
00:49:50,860 --> 00:49:57,130
performance like you can also with<font color="#CCCCCC"> use</font>

1084
00:49:53,530 --> 00:49:59,080
<font color="#E5E5E5">switch processes</font><font color="#CCCCCC"> flash</font><font color="#E5E5E5"> to hold cash and</font>

1085
00:49:57,130 --> 00:50:01,360
then is empty and you don't see any

1086
00:49:59,080 --> 00:50:05,140
activity<font color="#E5E5E5"> anymore but it's also the</font>

1087
00:50:01,360 --> 00:50:06,910
trade-off of performance with this<font color="#CCCCCC"> my ok</font>

1088
00:50:05,140 --> 00:50:09,850
<font color="#E5E5E5">maybe a second question if</font><font color="#CCCCCC"> you're there</font>

1089
00:50:06,910 --> 00:50:12,670
are some architectures that have random

1090
00:50:09,850 --> 00:50:15,100
<font color="#CCCCCC">cache line and</font><font color="#E5E5E5"> validations</font><font color="#CCCCCC"> did you try</font>

1091
00:50:12,670 --> 00:50:19,360
those<font color="#CCCCCC"> if you can see is</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> professional</font>

1092
00:50:15,100 --> 00:50:21,250
<font color="#E5E5E5">there if</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> truly random but</font>

1093
00:50:19,360 --> 00:50:23,320
probably you just have to make more

1094
00:50:21,250 --> 00:50:26,380
measurements and<font color="#CCCCCC"> measurements and then</font>

1095
00:50:23,320 --> 00:50:28,540
you can<font color="#CCCCCC"> ever reach out the noise and</font>

1096
00:50:26,380 --> 00:50:30,340
then you can do this attacks again like

1097
00:50:28,540 --> 00:50:31,750
with<font color="#CCCCCC"> Prime and</font><font color="#E5E5E5"> probe where you need more</font>

1098
00:50:30,340 --> 00:50:34,270
measurements because it's much more

1099
00:50:31,750 --> 00:50:36,910
noisy<font color="#CCCCCC"> so in the</font><font color="#E5E5E5"> end we'll just need much</font>

1100
00:50:34,270 --> 00:50:38,740
more measurements or so on<font color="#CCCCCC"> our meats</font>

1101
00:50:36,910 --> 00:50:40,390
supposed to give you the random<font color="#CCCCCC"> at this</font>

1102
00:50:38,740 --> 00:50:43,450
is reading the manual but we actually

1103
00:50:40,390 --> 00:50:45,700
found a nice ways<font color="#CCCCCC"> to if you catch lines</font>

1104
00:50:43,450 --> 00:50:47,410
that we wanted to it<font color="#E5E5E5"> so it's not</font>

1105
00:50:45,700 --> 00:50:49,390
<font color="#CCCCCC">actually that should read them</font>

1106
00:50:47,410 --> 00:50:51,940
so even it let's see if something is

1107
00:50:49,390 --> 00:50:54,609
truly random<font color="#CCCCCC"> it might be nice but then</font>

1108
00:50:51,940 --> 00:50:56,530
it's also quite complicated<font color="#E5E5E5"> to to</font>

1109
00:50:54,610 --> 00:50:58,510
implement<font color="#CCCCCC"> I mean you</font><font color="#E5E5E5"> probably don't want</font>

1110
00:50:56,530 --> 00:51:02,860
<font color="#E5E5E5">to run number</font><font color="#CCCCCC"> two narrative transfer</font>

1111
00:50:58,510 --> 00:51:07,420
<font color="#E5E5E5">caches</font><font color="#CCCCCC"> ok thanks</font><font color="#E5E5E5"> ok and then the three</font>

1112
00:51:02,860 --> 00:51:09,040
guys here in the microphone from<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> my</font>

1113
00:51:07,420 --> 00:51:12,760
question is about a detail with the

1114
00:51:09,040 --> 00:51:15,190
keylogger<font color="#CCCCCC"> arm</font><font color="#E5E5E5"> you could distinguish</font>

1115
00:51:12,760 --> 00:51:17,560
between<font color="#E5E5E5"> space backspace and alphabet</font>

1116
00:51:15,190 --> 00:51:20,230
which is quite interesting but could you

1117
00:51:17,560 --> 00:51:22,720
also figure out the specific keys that

1118
00:51:20,230 --> 00:51:23,920
were<font color="#CCCCCC"> oppressed that if so how</font>

1119
00:51:22,720 --> 00:51:26,439
<font color="#CCCCCC">yeah that depends on the implementation</font>

1120
00:51:23,920 --> 00:51:28,840
of the keyboard but we did we use the

1121
00:51:26,440 --> 00:51:31,180
<font color="#CCCCCC">end what stock keyboard which is</font><font color="#E5E5E5"> shipped</font>

1122
00:51:28,840 --> 00:51:33,730
with the<font color="#CCCCCC"> sams own</font><font color="#E5E5E5"> so it's pre-installed</font>

1123
00:51:31,180 --> 00:51:35,680
and if you have a table somewhere in

1124
00:51:33,730 --> 00:51:38,440
your code which says<font color="#CCCCCC"> okay if you press</font>

1125
00:51:35,680 --> 00:51:40,339
this exact location<font color="#CCCCCC"> or this image it's</font>

1126
00:51:38,440 --> 00:51:41,869
an<font color="#CCCCCC"> a</font><font color="#E5E5E5"> or this is</font><font color="#CCCCCC"> Abby</font>

1127
00:51:40,339 --> 00:51:44,479
then you can also do a more

1128
00:51:41,869 --> 00:51:47,180
sophisticated attack<font color="#CCCCCC"> so if you find any</font>

1129
00:51:44,479 --> 00:51:49,519
<font color="#E5E5E5">functions</font><font color="#CCCCCC"> or data in the code which</font>

1130
00:51:47,180 --> 00:51:52,578
directly<font color="#CCCCCC"> TLC ok</font><font color="#E5E5E5"> this is this character</font>

1131
00:51:49,519 --> 00:51:54,589
<font color="#E5E5E5">you can also spy on the actual key</font>

1132
00:51:52,579 --> 00:52:01,940
characters on the keyboard

1133
00:51:54,589 --> 00:52:04,038
thank you<font color="#CCCCCC"> I I thank you for your talk</font>

1134
00:52:01,940 --> 00:52:06,950
my first question<font color="#CCCCCC"> is what can</font><font color="#E5E5E5"> we</font>

1135
00:52:04,039 --> 00:52:09,319
actually<font color="#CCCCCC"> do now</font><font color="#E5E5E5"> to mitigate this kind of</font>

1136
00:52:06,950 --> 00:52:14,149
attack by for example<font color="#CCCCCC"> switching off care</font>

1137
00:52:09,319 --> 00:52:16,219
<font color="#CCCCCC">GSXR using c</font><font color="#E5E5E5"> serum so AI think the very</font>

1138
00:52:14,150 --> 00:52:18,229
important thing to protect would be like

1139
00:52:16,219 --> 00:52:19,759
<font color="#E5E5E5">crypto and the</font><font color="#CCCCCC"> good thing is that today</font>

1140
00:52:18,229 --> 00:52:21,618
we know how to be critical that is

1141
00:52:19,759 --> 00:52:23,059
<font color="#E5E5E5">resisting to such an attack so the</font>

1142
00:52:21,619 --> 00:52:24,950
question would be to stop improving

1143
00:52:23,059 --> 00:52:28,519
<font color="#E5E5E5">implementation that are known to be</font>

1144
00:52:24,950 --> 00:52:32,210
<font color="#E5E5E5">vulnerable</font><font color="#CCCCCC"> 14</font><font color="#E5E5E5"> years</font><font color="#CCCCCC"> then things like</font>

1145
00:52:28,519 --> 00:52:35,269
<font color="#E5E5E5">keystrokes is way harder to to protect</font>

1146
00:52:32,210 --> 00:52:38,059
<font color="#CCCCCC">so let's say crypto is manageable the</font>

1147
00:52:35,269 --> 00:52:40,368
whole system is clearly<font color="#E5E5E5"> in another</font>

1148
00:52:38,059 --> 00:52:41,839
problem<font color="#E5E5E5"> and you you can have different</font>

1149
00:52:40,369 --> 00:52:44,239
types of content on the hardware side

1150
00:52:41,839 --> 00:52:46,308
<font color="#E5E5E5">but that would mean that in turn</font><font color="#CCCCCC"> and arm</font>

1151
00:52:44,239 --> 00:52:47,719
<font color="#E5E5E5">actually want to fix that and that they</font>

1152
00:52:46,309 --> 00:52:51,200
know how to think that<font color="#CCCCCC"> I don't even know</font>

1153
00:52:47,719 --> 00:52:53,989
<font color="#E5E5E5">how to</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> that in hardware then on</font>

1154
00:52:51,200 --> 00:52:56,118
the system side if you prevent some kind

1155
00:52:53,989 --> 00:52:57,890
of memory sharing<font color="#E5E5E5"> you don't have fresh</font>

1156
00:52:56,119 --> 00:53:00,319
and<font color="#CCCCCC"> we don't anymore</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> probably is</font>

1157
00:52:57,890 --> 00:53:02,239
much more<font color="#CCCCCC"> noisier i miss</font><font color="#E5E5E5"> much more</font>

1158
00:53:00,319 --> 00:53:03,229
<font color="#E5E5E5">noises or it it would be if an</font>

1159
00:53:02,239 --> 00:53:07,609
improvement

1160
00:53:03,229 --> 00:53:11,779
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> we have signal angel</font>

1161
00:53:07,609 --> 00:53:13,009
<font color="#CCCCCC">Christians no okay</font><font color="#E5E5E5"> then more microphone</font>

1162
00:53:11,779 --> 00:53:15,440
<font color="#CCCCCC">i think you are</font>

1163
00:53:13,009 --> 00:53:17,329
<font color="#CCCCCC">I wanted to ask about the way you</font>

1164
00:53:15,440 --> 00:53:19,099
<font color="#E5E5E5">establish the side</font><font color="#CCCCCC"> channel between the</font>

1165
00:53:17,329 --> 00:53:22,849
two<font color="#CCCCCC"> processors because it was people</font>

1166
00:53:19,099 --> 00:53:26,329
<font color="#E5E5E5">obviously have to be timed in way to</font>

1167
00:53:22,849 --> 00:53:28,489
transmit information between one process

1168
00:53:26,329 --> 00:53:30,920
to the other<font color="#E5E5E5"> is there anywhere that you</font>

1169
00:53:28,489 --> 00:53:32,839
documented<font color="#E5E5E5"> the whole you know it's</font>

1170
00:53:30,920 --> 00:53:34,549
<font color="#E5E5E5">actually almost like the seven layers</font>

1171
00:53:32,839 --> 00:53:36,440
<font color="#E5E5E5">something like that</font><font color="#CCCCCC"> there any way that</font>

1172
00:53:34,549 --> 00:53:37,940
you documented that it would be really

1173
00:53:36,440 --> 00:53:40,279
interesting to know how<font color="#CCCCCC"> it</font><font color="#E5E5E5"> work</font>

1174
00:53:37,940 --> 00:53:42,170
you can find<font color="#E5E5E5"> this information in the</font>

1175
00:53:40,279 --> 00:53:45,650
paper because there are several papers

1176
00:53:42,170 --> 00:53:48,259
on<font color="#CCCCCC"> color channels using that</font><font color="#E5E5E5"> so the</font>

1177
00:53:45,650 --> 00:53:50,660
<font color="#CCCCCC">Indians</font><font color="#E5E5E5"> paper is published in February</font><font color="#CCCCCC"> I</font>

1178
00:53:48,259 --> 00:53:53,100
guess<font color="#CCCCCC"> yeah but the ama get on paper also</font>

1179
00:53:50,660 --> 00:53:55,259
includes<font color="#CCCCCC"> introduce a cover channel</font>

1180
00:53:53,100 --> 00:53:57,210
<font color="#CCCCCC">and you can find more information about</font>

1181
00:53:55,260 --> 00:53:59,280
how<font color="#E5E5E5"> the</font><font color="#CCCCCC"> packets look like and how the</font>

1182
00:53:57,210 --> 00:54:03,840
<font color="#CCCCCC">synchronization box in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> paper making</font>

1183
00:53:59,280 --> 00:54:06,270
one last question

1184
00:54:03,840 --> 00:54:08,250
yeah<font color="#CCCCCC"> I</font><font color="#E5E5E5"> and you mentioned that you use</font>

1185
00:54:06,270 --> 00:54:11,460
<font color="#CCCCCC">this</font><font color="#E5E5E5"> week's attack for the</font><font color="#CCCCCC"> IAS</font>

1186
00:54:08,250 --> 00:54:14,880
<font color="#E5E5E5">side-channel attack and</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you solve</font>

1187
00:54:11,460 --> 00:54:17,220
<font color="#CCCCCC">the</font><font color="#E5E5E5"> round is</font><font color="#CCCCCC"> round detection and is it</font>

1188
00:54:14,880 --> 00:54:20,550
different<font color="#E5E5E5"> to some</font><font color="#CCCCCC"> scheduling</font>

1189
00:54:17,220 --> 00:54:22,649
<font color="#E5E5E5">manipulation</font><font color="#CCCCCC"> so on this one I think</font><font color="#E5E5E5"> we</font>

1190
00:54:20,550 --> 00:54:24,960
are only did something<font color="#E5E5E5"> criminal attacks</font>

1191
00:54:22,650 --> 00:54:26,880
or we already<font color="#CCCCCC"> knew when the victim is</font>

1192
00:54:24,960 --> 00:54:29,880
going to be scheduled<font color="#E5E5E5"> and we didn't have</font>

1193
00:54:26,880 --> 00:54:31,110
anything to do with<font color="#CCCCCC"> kill us all</font><font color="#E5E5E5"> right</font>

1194
00:54:29,880 --> 00:54:34,890
thank you

1195
00:54:31,110 --> 00:54:36,960
are there<font color="#E5E5E5"> any more questions</font>

1196
00:54:34,890 --> 00:54:40,109
<font color="#E5E5E5">no I don't see anyone then thank you</font>

1197
00:54:36,960 --> 00:54:43,530
<font color="#E5E5E5">very much again to our speakers</font>

1198
00:54:40,110 --> 00:55:10,579
[Applause]

1199
00:54:43,530 --> 00:55:10,579
[Music]

