1
00:00:01,700 --> 00:00:13,740
[Music]

2
00:00:13,740 --> 00:00:16,630
Timmy throw ansel has come all the way

3
00:00:16,630 --> 00:00:18,070
from Australia to talk to us about

4
00:00:18,070 --> 00:00:21,939
dissecting hdmi and developing an open

5
00:00:21,939 --> 00:00:25,480
and if G fpga-based capture hardware for

6
00:00:25,480 --> 00:00:28,989
sharing talks and outside of the room

7
00:00:28,989 --> 00:00:32,619
and he will be explaining how to dissect

8
00:00:32,619 --> 00:00:34,930
it and I'm looking forward to hearing

9
00:00:34,930 --> 00:00:38,200
the talk in a second so please give him

10
00:00:38,200 --> 00:00:42,899
a round of applause again thank you

11
00:00:49,940 --> 00:00:55,379
okay um hi I'm Tim and in theory if my

12
00:00:55,379 --> 00:01:02,910
slides change you would see that and I

13
00:01:02,910 --> 00:01:06,360
kind of have too many projects and I'm

14
00:01:06,360 --> 00:01:08,670
be discussing one of them this is

15
00:01:08,670 --> 00:01:11,100
another project that I gave a lightning

16
00:01:11,100 --> 00:01:14,100
talk on earlier if you didn't see it so

17
00:01:14,100 --> 00:01:16,350
our microcontroller that goes in your

18
00:01:16,350 --> 00:01:20,270
USB port people wanted to know when to

19
00:01:20,270 --> 00:01:25,679
hack on it tomorrow at 2pm apparently so

20
00:01:25,679 --> 00:01:28,140
first I want to say is I'm a software

21
00:01:28,140 --> 00:01:30,869
developer I'm not hardware designer I'm

22
00:01:30,869 --> 00:01:33,750
not an FPGA developer I'm not a

23
00:01:33,750 --> 00:01:37,740
professional in any of that I develop

24
00:01:37,740 --> 00:01:40,440
software for full time so this is my

25
00:01:40,440 --> 00:01:45,690
hobby as well this information comes

26
00:01:45,690 --> 00:01:49,289
from a couple of projects that i started

27
00:01:49,289 --> 00:01:52,259
but a lot of other people did the

28
00:01:52,259 --> 00:01:54,539
majority of the work and i'm just

29
00:01:54,539 --> 00:01:56,369
telling you about it because they're too

30
00:01:56,369 --> 00:01:58,800
shy to come up and talk about it

31
00:01:58,800 --> 00:02:02,520
themselves so a big thank you to all

32
00:02:02,520 --> 00:02:04,950
these people who've helped me in various

33
00:02:04,950 --> 00:02:09,780
ways regarding this and these slides any

34
00:02:09,780 --> 00:02:12,120
of the blue things are links so if

35
00:02:12,120 --> 00:02:14,819
you're playing along at home you can get

36
00:02:14,819 --> 00:02:17,280
to them by that URL and click on these

37
00:02:17,280 --> 00:02:19,500
things and there's probably other people

38
00:02:19,500 --> 00:02:21,360
have forgotten who are not on this list

39
00:02:21,360 --> 00:02:25,890
I'm very sorry so this title of this

40
00:02:25,890 --> 00:02:28,470
talk could be called software guy tries

41
00:02:28,470 --> 00:02:32,519
hardware and complains this I've had a

42
00:02:32,519 --> 00:02:34,800
really hard time figuring out what to

43
00:02:34,800 --> 00:02:37,410
call this talk and you'll see some other

44
00:02:37,410 --> 00:02:41,250
attempts at naming this talk better so a

45
00:02:41,250 --> 00:02:44,000
bit of history how did I end up doing

46
00:02:44,000 --> 00:02:53,370
hdmi stuff so Tim videos is a group of

47
00:02:53,370 --> 00:02:55,530
projects which are trying to make it

48
00:02:55,530 --> 00:02:58,560
easy to record and livestream user

49
00:02:58,560 --> 00:03:00,260
groups and conferences like

50
00:03:00,260 --> 00:03:04,069
this event however we want to do it

51
00:03:04,069 --> 00:03:07,849
without needing the awesome team that is

52
00:03:07,849 --> 00:03:10,280
doing the recording here these guys are

53
00:03:10,280 --> 00:03:11,950
really really organized and professional

54
00:03:11,950 --> 00:03:16,760
we want to do it where people have no

55
00:03:16,760 --> 00:03:19,040
experience at all with AV and can just

56
00:03:19,040 --> 00:03:23,390
make it happen and so this is how you

57
00:03:23,390 --> 00:03:29,000
record a conference or user group I'm

58
00:03:29,000 --> 00:03:31,010
going to be talking about these two

59
00:03:31,010 --> 00:03:33,349
things here the HDMI two USB devices

60
00:03:33,349 --> 00:03:37,069
that we created they used in our setup

61
00:03:37,069 --> 00:03:40,220
both for camera capture and for capture

62
00:03:40,220 --> 00:03:46,099
of slides and so the HDMI USB is Faust

63
00:03:46,099 --> 00:03:48,620
hardware for doing HDMI capture and

64
00:03:48,620 --> 00:03:52,849
actually has a bit of history with the

65
00:03:52,849 --> 00:03:57,769
CCC because it was inspired by a speaker

66
00:03:57,769 --> 00:04:04,030
who spoke here bunny spoke on his any TV

67
00:04:04,030 --> 00:04:08,510
bored which was a fpga men in the middle

68
00:04:08,510 --> 00:04:12,319
attack on hdcp secured links his talk is

69
00:04:12,319 --> 00:04:14,209
really awesome it's going to be a fat

70
00:04:14,209 --> 00:04:16,430
talk is way more technical than mine and

71
00:04:16,430 --> 00:04:18,769
gives you some really awesome details

72
00:04:18,769 --> 00:04:21,440
about the cool things he did to make

73
00:04:21,440 --> 00:04:24,710
that work mine is much more basic you

74
00:04:24,710 --> 00:04:26,840
don't need much experience with hdmi to

75
00:04:26,840 --> 00:04:31,880
follow my talk and so our device works

76
00:04:31,880 --> 00:04:34,280
like is does except his was deliberately

77
00:04:34,280 --> 00:04:39,110
designed to not allow capture our design

78
00:04:39,110 --> 00:04:41,180
allows capture it effectively men's in

79
00:04:41,180 --> 00:04:43,479
the Middle's the presenters projector

80
00:04:43,479 --> 00:04:47,780
between the presenters laptop and the

81
00:04:47,780 --> 00:04:50,510
projector and provides a high quality

82
00:04:50,510 --> 00:04:55,340
capture out the USB to port it uses an

83
00:04:55,340 --> 00:04:58,849
fpga to do that this is because using

84
00:04:58,849 --> 00:05:00,770
fpga makes hardware problem software

85
00:05:00,770 --> 00:05:03,530
problems and as i said i'm a software

86
00:05:03,530 --> 00:05:06,080
developer I prefer software forums to

87
00:05:06,080 --> 00:05:10,310
hardware problems and the way it kind of

88
00:05:10,310 --> 00:05:13,550
works is at PS as a UVC webcam so that

89
00:05:13,550 --> 00:05:13,820
you

90
00:05:13,820 --> 00:05:16,430
can use it with skype or hang out or any

91
00:05:16,430 --> 00:05:17,540
of those things without needing any

92
00:05:17,540 --> 00:05:19,850
drivers on sets of operating systems

93
00:05:19,850 --> 00:05:24,470
like Max and linux on Windows you need a

94
00:05:24,470 --> 00:05:26,510
driver that tells it to use the internal

95
00:05:26,510 --> 00:05:28,910
driver it's kind of weird and also

96
00:05:28,910 --> 00:05:31,640
serial port because we have the ability

97
00:05:31,640 --> 00:05:34,040
to switch which input goes to which

98
00:05:34,040 --> 00:05:38,780
output is kind of like a matrix and so

99
00:05:38,780 --> 00:05:40,400
this is the open source hardware we

100
00:05:40,400 --> 00:05:44,240
designed the it's in KY CAD you can find

101
00:05:44,240 --> 00:05:50,180
it on github I'm quite proud of it it's

102
00:05:50,180 --> 00:05:53,090
quite a good little kit we don't use all

103
00:05:53,090 --> 00:05:54,800
the features of it yet but it's pretty

104
00:05:54,800 --> 00:06:01,100
awesome and it's in use we use this

105
00:06:01,100 --> 00:06:03,920
technology to capture at a bunch of

106
00:06:03,920 --> 00:06:07,880
conferences pycon in Australia Linux a

107
00:06:07,880 --> 00:06:09,710
comp that I you in Australia as I said

108
00:06:09,710 --> 00:06:14,270
I'm Australian debconf though are not

109
00:06:14,270 --> 00:06:19,690
Australian they used it in sorry in

110
00:06:19,690 --> 00:06:23,030
South Africa I think and there are a

111
00:06:23,030 --> 00:06:24,620
whole bunch of other people around the

112
00:06:24,620 --> 00:06:27,020
world who are using this which is pretty

113
00:06:27,020 --> 00:06:29,090
awesome the main reason I wanted the

114
00:06:29,090 --> 00:06:31,460
open source was so that other people

115
00:06:31,460 --> 00:06:35,180
could use them and learn from it and fix

116
00:06:35,180 --> 00:06:40,190
problems because there are lots of

117
00:06:40,190 --> 00:06:42,050
problems we'll run into and the other

118
00:06:42,050 --> 00:06:44,630
thing is this is all full of Python we

119
00:06:44,630 --> 00:06:50,870
do use FPGA to python to create the

120
00:06:50,870 --> 00:06:53,780
firmware for the FPGA and all these

121
00:06:53,780 --> 00:06:55,130
other areas if you want to find out more

122
00:06:55,130 --> 00:06:57,920
about that go to my talk ticon-a you

123
00:06:57,920 --> 00:07:00,890
which was recorded with the very device

124
00:07:00,890 --> 00:07:02,540
i'm talking about which is kind of cool

125
00:07:02,540 --> 00:07:09,620
oops sorry but as I said this is going

126
00:07:09,620 --> 00:07:12,080
to include lots of problems the first

127
00:07:12,080 --> 00:07:16,190
one is people still use vga this kind of

128
00:07:16,190 --> 00:07:21,890
makes me sad because vga is not hdmi it

129
00:07:21,890 --> 00:07:24,590
was invented in 1987 and it's an analog

130
00:07:24,590 --> 00:07:25,780
signal

131
00:07:25,780 --> 00:07:28,750
well HD might share some history with

132
00:07:28,750 --> 00:07:30,940
vga you can't use the same techniques

133
00:07:30,940 --> 00:07:34,690
for capturing HDMI that you can VJ so

134
00:07:34,690 --> 00:07:39,750
why do you still use it it's old and bad

135
00:07:39,750 --> 00:07:43,870
we developed a vga expansion board to

136
00:07:43,870 --> 00:07:47,080
effectively last to capture vga using

137
00:07:47,080 --> 00:07:50,470
the same thing by developed i mean we

138
00:07:50,470 --> 00:07:52,960
have designed and some exist but

139
00:07:52,960 --> 00:07:54,490
nobody's actually finished the firmware

140
00:07:54,490 --> 00:07:57,100
to make them work yet so I'd love help

141
00:07:57,100 --> 00:08:03,210
there there's also another problem I

142
00:08:03,210 --> 00:08:05,680
want to do this all open source as i

143
00:08:05,680 --> 00:08:11,320
said the hdmi ecosystem has commercial

144
00:08:11,320 --> 00:08:12,850
course you can buy and they work

145
00:08:12,850 --> 00:08:16,000
reasonably well but you have to buy them

146
00:08:16,000 --> 00:08:17,800
and you don't get the source code to

147
00:08:17,800 --> 00:08:19,450
them or if you do get the source code to

148
00:08:19,450 --> 00:08:20,979
them you can't share them with other

149
00:08:20,979 --> 00:08:25,360
people as well I want to be I'm source

150
00:08:25,360 --> 00:08:27,880
because we wanted to solve all those

151
00:08:27,880 --> 00:08:30,100
problems that people have when plugging

152
00:08:30,100 --> 00:08:34,539
their laptop and it not working and the

153
00:08:34,539 --> 00:08:37,390
commercial cause aren't designed to

154
00:08:37,390 --> 00:08:40,450
allow us to give the ability to do that

155
00:08:40,450 --> 00:08:45,570
solve those problems payment permanently

156
00:08:45,570 --> 00:08:48,490
so we create a new implementation as

157
00:08:48,490 --> 00:08:50,560
anybody who's ever done a reimplement a

158
00:08:50,560 --> 00:08:51,970
shin or a new implementation or

159
00:08:51,970 --> 00:08:55,900
something it means that you've got new

160
00:08:55,900 --> 00:08:58,470
bugs which I will describe quite a bit

161
00:08:58,470 --> 00:09:01,990
so this talk could be called debugging

162
00:09:01,990 --> 00:09:05,830
HDMI rather than dissecting HDMI because

163
00:09:05,830 --> 00:09:07,480
it includes a lot of information about

164
00:09:07,480 --> 00:09:12,460
how things went wrong okay so that's

165
00:09:12,460 --> 00:09:14,350
kind of introduction of why we're here

166
00:09:14,350 --> 00:09:17,050
and why I'm talking about this so how

167
00:09:17,050 --> 00:09:23,800
does haytch dee my work well hdmi is

168
00:09:23,800 --> 00:09:26,440
actually reasonably old now it was

169
00:09:26,440 --> 00:09:32,070
created in 2002 it's based on the DVI

170
00:09:32,070 --> 00:09:36,470
specification DVI was created in 1999

171
00:09:36,470 --> 00:09:42,610
so DVI is 17 years old and DVI was

172
00:09:42,610 --> 00:09:45,830
designed to replace VGA and shares a lot

173
00:09:45,830 --> 00:09:50,630
of similar history hdmi is backwards

174
00:09:50,630 --> 00:09:54,590
compatible with DVI electrically and

175
00:09:54,590 --> 00:09:56,570
protocol wires but use a different

176
00:09:56,570 --> 00:09:59,150
connector and so this makes you my

177
00:09:59,150 --> 00:10:01,280
connector you've probably seen them all

178
00:10:01,280 --> 00:10:05,300
before if you look closely you'll see

179
00:10:05,300 --> 00:10:08,660
that there are 19 pins on the hdmi

180
00:10:08,660 --> 00:10:13,760
connector that's pin 1 so what all these

181
00:10:13,760 --> 00:10:16,010
pins do well there are five pins which

182
00:10:16,010 --> 00:10:19,640
are used for ground this one pin which

183
00:10:19,640 --> 00:10:22,970
is useful power gives you 5 volts at 50

184
00:10:22,970 --> 00:10:26,900
milliamps this isn't much to you can't

185
00:10:26,900 --> 00:10:28,730
do much with 50 milliamps except maybe

186
00:10:28,730 --> 00:10:32,090
some type of adapter converter or power

187
00:10:32,090 --> 00:10:36,170
whole microcontroller some Chinese

188
00:10:36,170 --> 00:10:38,810
devices try to draw like an app from

189
00:10:38,810 --> 00:10:42,230
this that's not very good so that's

190
00:10:42,230 --> 00:10:44,410
another thing you should watch out for

191
00:10:44,410 --> 00:10:48,650
there are three high speed data pairs

192
00:10:48,650 --> 00:10:50,600
which transmit like the actual video

193
00:10:50,600 --> 00:10:54,380
data and they share a clock pair so

194
00:10:54,380 --> 00:10:58,040
that's these pins here and then there

195
00:10:58,040 --> 00:10:59,630
are five pins which are used for low

196
00:10:59,630 --> 00:11:03,470
speed data and so that's all the pins on

197
00:11:03,470 --> 00:11:07,100
the hdmi connector you might have

198
00:11:07,100 --> 00:11:11,470
noticed that there was a whole bunch of

199
00:11:11,470 --> 00:11:14,360
different things I said there and you

200
00:11:14,360 --> 00:11:16,190
need to actually understand a whole

201
00:11:16,190 --> 00:11:18,430
bunch of different protocols to

202
00:11:18,430 --> 00:11:21,890
understand how HDMI works there's a

203
00:11:21,890 --> 00:11:23,600
bunch of low-speed ones and there's a

204
00:11:23,600 --> 00:11:28,430
bunch of high-speed ones I'm not going

205
00:11:28,430 --> 00:11:30,940
to talk about all of those protocols

206
00:11:30,940 --> 00:11:33,230
because there's just too many to go into

207
00:11:33,230 --> 00:11:36,890
an hour talk the low-speed protocol I'm

208
00:11:36,890 --> 00:11:39,710
not going to talk about is a cc or audio

209
00:11:39,710 --> 00:11:41,420
return and I'm not going to talk about

210
00:11:41,420 --> 00:11:45,200
any of the ziller II data protocol that

211
00:11:45,200 --> 00:11:48,860
is high speed or hdcp if you want hdcp

212
00:11:48,860 --> 00:11:49,690
gone

213
00:11:49,690 --> 00:11:52,740
bunnies talk it's much better than mine

214
00:11:52,740 --> 00:11:57,070
but or Ethernet what I will be talking

215
00:11:57,070 --> 00:12:02,410
about is the ed and ddc protocols the

216
00:12:02,410 --> 00:12:05,860
eight beat mb encoding of the pixel data

217
00:12:05,860 --> 00:12:08,230
and the to beat mb encoding of the

218
00:12:08,230 --> 00:12:11,530
control data interesting enough this is

219
00:12:11,530 --> 00:12:14,800
actually DVI I'm not telling you about

220
00:12:14,800 --> 00:12:17,620
hdmi I'm really describing to you how

221
00:12:17,620 --> 00:12:25,500
DVI works so again many titles so

222
00:12:25,500 --> 00:12:29,350
starting with the low-speed protocol II

223
00:12:29,350 --> 00:12:33,670
did or DVI ddc i'm going to use those

224
00:12:33,670 --> 00:12:37,570
two terms interchangeably they have been

225
00:12:37,570 --> 00:12:39,490
so confused now that they are

226
00:12:39,490 --> 00:12:43,780
interchangeable in my opinion this is

227
00:12:43,780 --> 00:12:47,560
something they inherited from vga it was

228
00:12:47,560 --> 00:12:51,130
invented and added to VJ in august of

229
00:12:51,130 --> 00:12:54,550
1994 it was for plug-and-play of

230
00:12:54,550 --> 00:12:56,200
monitors so that you could plug in your

231
00:12:56,200 --> 00:12:57,670
monitoring your graphics card will just

232
00:12:57,670 --> 00:13:01,660
work rather than requiring you to tell

233
00:13:01,660 --> 00:13:04,000
your graphics card exactly what

234
00:13:04,000 --> 00:13:06,990
resolution and stuff your monitor water

235
00:13:06,990 --> 00:13:11,850
it uses i squared C in a small eeprom

236
00:13:11,850 --> 00:13:17,950
these the pins that it uses 15 is the

237
00:13:17,950 --> 00:13:22,630
clock pin and 16 is the data pin and

238
00:13:22,630 --> 00:13:25,090
then it uses the ground and the 5 volts

239
00:13:25,090 --> 00:13:29,290
is used to power that eeprom and in some

240
00:13:29,290 --> 00:13:31,060
way it's also used in nineteen because

241
00:13:31,060 --> 00:13:33,220
19 is how you detect that there's

242
00:13:33,220 --> 00:13:38,050
something there to read from a user i

243
00:13:38,050 --> 00:13:41,200
squared c i squared c is a low-speed

244
00:13:41,200 --> 00:13:43,960
protocol that runs are either 100

245
00:13:43,960 --> 00:13:46,630
kilohertz or 400 kilohertz technically

246
00:13:46,630 --> 00:13:51,310
II did is not i squared C but it is it

247
00:13:51,310 --> 00:13:52,750
only supports the hundred kilohertz

248
00:13:52,750 --> 00:13:56,320
version though in theory everything on

249
00:13:56,320 --> 00:13:58,240
this planet can be read at 400 kilohertz

250
00:13:58,240 --> 00:14:00,300
it's also very well explained elsewhere

251
00:14:00,300 --> 00:14:03,220
so I'm not going to explain in detail

252
00:14:03,220 --> 00:14:06,040
i squared C is or does or how to

253
00:14:06,040 --> 00:14:11,399
implement it the eeprom is a 24 series

254
00:14:11,399 --> 00:14:16,660
found I squared C address 50 arm it's

255
00:14:16,660 --> 00:14:19,689
eight bits in size which gives you 256

256
00:14:19,689 --> 00:14:24,250
bytes of data again this a prom and how

257
00:14:24,250 --> 00:14:26,230
to talk to it is very well described on

258
00:14:26,230 --> 00:14:28,750
the Internet so I'm not going to

259
00:14:28,750 --> 00:14:31,300
describe it here if you've used eproms

260
00:14:31,300 --> 00:14:34,269
over i squared C it's likely you've used

261
00:14:34,269 --> 00:14:38,399
to 24 series eeprom probably bigger ones

262
00:14:38,399 --> 00:14:43,449
256 bytes is pretty small so like 16

263
00:14:43,449 --> 00:14:47,800
width one but II did only supports the

264
00:14:47,800 --> 00:14:52,180
eight bits ones um the kind of

265
00:14:52,180 --> 00:14:54,490
interesting part of eid eid is the data

266
00:14:54,490 --> 00:14:57,279
structure it's a custom binary format

267
00:14:57,279 --> 00:15:00,339
that describes what the contents of the

268
00:15:00,339 --> 00:15:03,459
eeprom is again wikipedia has a really

269
00:15:03,459 --> 00:15:05,800
good description of this so i'm not

270
00:15:05,800 --> 00:15:08,379
going to go into much detail but the

271
00:15:08,379 --> 00:15:10,269
important things are that it describes

272
00:15:10,269 --> 00:15:14,649
the resolution frequency and format for

273
00:15:14,649 --> 00:15:17,829
talking to the monitor this is really

274
00:15:17,829 --> 00:15:20,620
important because if you try and send

275
00:15:20,620 --> 00:15:22,269
the wrong resolution frequency or form

276
00:15:22,269 --> 00:15:23,589
at the monitors not going to understand

277
00:15:23,589 --> 00:15:27,579
it and so this is kind of what he did is

278
00:15:27,579 --> 00:15:32,980
used for so this is where things start

279
00:15:32,980 --> 00:15:38,889
getting a bit hairy presenters come up

280
00:15:38,889 --> 00:15:40,540
to the front and the first question

281
00:15:40,540 --> 00:15:42,670
you'll see anybody ask is what

282
00:15:42,670 --> 00:15:45,339
resolution do I use and they get a panel

283
00:15:45,339 --> 00:15:47,139
like this which has a bazillion

284
00:15:47,139 --> 00:15:51,389
resolutions selected and the thing is

285
00:15:51,389 --> 00:15:54,759
despite your monitor saying that it

286
00:15:54,759 --> 00:16:00,309
supports many formats they lie it turns

287
00:16:00,309 --> 00:16:03,699
out that projectors lie a lot more than

288
00:16:03,699 --> 00:16:06,069
normal displays I don't know why they're

289
00:16:06,069 --> 00:16:09,490
special and so this is what a supported

290
00:16:09,490 --> 00:16:14,040
format looks like it's really great as

291
00:16:14,040 --> 00:16:16,889
well I care about cap

292
00:16:16,889 --> 00:16:21,299
the data and so I want things in the

293
00:16:21,299 --> 00:16:26,910
format that is easy for me to capture I

294
00:16:26,910 --> 00:16:29,759
also don't want to be scaling people's

295
00:16:29,759 --> 00:16:32,489
images and text because scaling looks

296
00:16:32,489 --> 00:16:34,739
really bad so if somebody slex like a

297
00:16:34,739 --> 00:16:37,019
really low resolution and we scale top

298
00:16:37,019 --> 00:16:40,619
it looks really horrible it makes text

299
00:16:40,619 --> 00:16:43,799
unreadable and presenters are very

300
00:16:43,799 --> 00:16:45,809
renowned speciallitet nickel conferences

301
00:16:45,809 --> 00:16:48,419
for using tiny tiny fonts and so we need

302
00:16:48,419 --> 00:16:51,779
as much resolution as we can and so how

303
00:16:51,779 --> 00:16:54,059
we solve this is we emulate our own

304
00:16:54,059 --> 00:16:56,369
eeprom in the fpga and ignore what the

305
00:16:56,369 --> 00:16:59,040
projector tells us it can do we tell the

306
00:16:59,040 --> 00:17:01,829
presenter that this is the what we

307
00:17:01,829 --> 00:17:05,760
support you might notice that it kind of

308
00:17:05,760 --> 00:17:08,579
solves the problem of what resolution we

309
00:17:08,579 --> 00:17:12,359
do offer a single solution our first

310
00:17:12,359 --> 00:17:13,799
single option makes it very hard to

311
00:17:13,799 --> 00:17:17,039
choose the wrong one so that's good we

312
00:17:17,039 --> 00:17:21,029
solved a problem no we haven't told a

313
00:17:21,029 --> 00:17:24,029
problem we were recording pike on a you

314
00:17:24,029 --> 00:17:26,849
and we found that some mac laptops were

315
00:17:26,849 --> 00:17:32,370
refusing to work to understand the cause

316
00:17:32,370 --> 00:17:34,769
of this you need to understand a little

317
00:17:34,769 --> 00:17:37,260
bit about how the world works there are

318
00:17:37,260 --> 00:17:38,940
two major frequencies in the world 50

319
00:17:38,940 --> 00:17:42,330
Hertz and 60 Hertz 50 Hertz is mainly

320
00:17:42,330 --> 00:17:44,190
used in the rest of the world and 60

321
00:17:44,190 --> 00:17:46,769
Hertz is used in America and Japan a few

322
00:17:46,769 --> 00:17:49,320
other places but that's kind of very

323
00:17:49,320 --> 00:17:53,179
rough thing laptop sold in Australia

324
00:17:53,179 --> 00:17:55,380
Australia's 50 Hertz is part of the rest

325
00:17:55,380 --> 00:17:58,019
of the world you think that the laptop

326
00:17:58,019 --> 00:18:01,049
could do 50 Hertz plus everything's

327
00:18:01,049 --> 00:18:03,360
global these days right I can plug in my

328
00:18:03,360 --> 00:18:06,240
power pack for my laptop in the US

329
00:18:06,240 --> 00:18:09,419
Australia so like it should work

330
00:18:09,419 --> 00:18:15,809
everywhere right no sad so we solved it

331
00:18:15,809 --> 00:18:20,510
by claiming that we were American and

332
00:18:20,510 --> 00:18:23,279
supporting 60 frames per second rather

333
00:18:23,279 --> 00:18:26,010
than 50 frames seconds I guess display

334
00:18:26,010 --> 00:18:29,129
with American accent we deployed this

335
00:18:29,129 --> 00:18:30,390
hotfix

336
00:18:30,390 --> 00:18:34,770
on the Friday evening and on Saturday we

337
00:18:34,770 --> 00:18:36,990
all the problems that we're having a

338
00:18:36,990 --> 00:18:38,700
Friday went away so this is kind of the

339
00:18:38,700 --> 00:18:41,970
power of a open source solution and

340
00:18:41,970 --> 00:18:45,260
having complete control of your hardware

341
00:18:45,260 --> 00:18:48,900
nowadays we actually offer both 60 and

342
00:18:48,900 --> 00:18:52,680
50 because for display capture if you're

343
00:18:52,680 --> 00:18:55,400
displaying stuff at 50 frames per second

344
00:18:55,400 --> 00:18:57,480
you're probably speaking a lot faster

345
00:18:57,480 --> 00:19:01,980
than I am and it's really weird these

346
00:19:01,980 --> 00:19:04,190
are hundred and twenty eight bytes are

347
00:19:04,190 --> 00:19:07,020
really hard and the number one cause of

348
00:19:07,020 --> 00:19:12,300
why a person's laptop can't talk to the

349
00:19:12,300 --> 00:19:19,650
projector gets a trophy to try and

350
00:19:19,650 --> 00:19:23,520
figure out why that is we created EDTV

351
00:19:23,520 --> 00:19:25,920
it's supposed to be a repository of ed

352
00:19:25,920 --> 00:19:28,400
data and it was a summer of code project

353
00:19:28,400 --> 00:19:31,830
python django bootstrap and II did grab

354
00:19:31,830 --> 00:19:33,440
a tool that you can run in your laptop

355
00:19:33,440 --> 00:19:36,570
I'd love help making this work better

356
00:19:36,570 --> 00:19:38,910
hasn't had much love since the summer of

357
00:19:38,910 --> 00:19:42,390
code student made at work but be really

358
00:19:42,390 --> 00:19:44,360
nice to have an open database of

359
00:19:44,360 --> 00:19:48,420
everybody's ed data out there there are

360
00:19:48,420 --> 00:19:50,580
a bunch of closed ones i can pay to buy

361
00:19:50,580 --> 00:19:53,220
one but i'd really love to have an open

362
00:19:53,220 --> 00:19:58,440
one as well maybe we don't need the

363
00:19:58,440 --> 00:20:00,000
whole capture solution maybe you can

364
00:20:00,000 --> 00:20:03,150
just override the e did and so the c3

365
00:20:03,150 --> 00:20:05,460
vaak here actually developed a version

366
00:20:05,460 --> 00:20:08,970
that overrides II did for vga I have a

367
00:20:08,970 --> 00:20:13,140
design which works for HDMI it just had

368
00:20:13,140 --> 00:20:15,590
uses a low-cost microprocessor to

369
00:20:15,590 --> 00:20:20,370
pretend to be an EEPROM as well

370
00:20:20,370 --> 00:20:22,470
displayport it's not hasty my don't get

371
00:20:22,470 --> 00:20:23,790
the two confused of very very different

372
00:20:23,790 --> 00:20:26,790
protocols they have an axillary channel

373
00:20:26,790 --> 00:20:30,570
like II did and cec I have boards that

374
00:20:30,570 --> 00:20:34,950
to decode them here at ccc so if your

375
00:20:34,950 --> 00:20:37,110
interest in that come and talk to me

376
00:20:37,110 --> 00:20:39,360
because would really like to do similar

377
00:20:39,360 --> 00:20:42,450
things for display port and

378
00:20:42,450 --> 00:20:50,100
so that's the slow speed data what about

379
00:20:50,100 --> 00:20:53,640
high speed data so each pics on your

380
00:20:53,640 --> 00:21:00,540
screen is basically three colors in DVI

381
00:21:00,540 --> 00:21:04,830
standard red green blue and each one to

382
00:21:04,830 --> 00:21:09,720
bite in size each of the colors is

383
00:21:09,720 --> 00:21:13,590
mapped to a channel on the HDMI

384
00:21:13,590 --> 00:21:16,320
connector and so you guys see the red

385
00:21:16,320 --> 00:21:20,280
and the green and the blue channels each

386
00:21:20,280 --> 00:21:23,670
channel is a differential pair you get a

387
00:21:23,670 --> 00:21:27,300
plus and a negative and a shield and

388
00:21:27,300 --> 00:21:30,560
they use twisted pair to try and reduce

389
00:21:30,560 --> 00:21:35,490
the noise reception of these because

390
00:21:35,490 --> 00:21:39,150
these are quite high speed and they have

391
00:21:39,150 --> 00:21:40,560
a dedicated shield to try and again

392
00:21:40,560 --> 00:21:47,070
reduce the noise that is captured and so

393
00:21:47,070 --> 00:21:50,310
this is kind of where it gets the

394
00:21:50,310 --> 00:21:55,320
differential signaling part of the tmds

395
00:21:55,320 --> 00:21:58,560
that is the kind of code name for the

396
00:21:58,560 --> 00:22:01,140
internal protocol that is used on the

397
00:22:01,140 --> 00:22:06,450
high-speed data they also all those

398
00:22:06,450 --> 00:22:10,860
channels share a clock that clock is

399
00:22:10,860 --> 00:22:14,250
called the pixel clock but each of these

400
00:22:14,250 --> 00:22:17,240
channels is a serial channel it

401
00:22:17,240 --> 00:22:24,390
transmits data at 10 bits the every 10

402
00:22:24,390 --> 00:22:27,000
bits sorry every clock cycle there are

403
00:22:27,000 --> 00:22:29,580
10 bits of data transmitted on each of

404
00:22:29,580 --> 00:22:32,280
these channels so there's a share clock

405
00:22:32,280 --> 00:22:35,040
and each of the channels is running at

406
00:22:35,040 --> 00:22:37,700
effectively 10 times that share clock

407
00:22:37,700 --> 00:22:40,470
and so this is kind of what the whole

408
00:22:40,470 --> 00:22:43,740
system looks like you have your red

409
00:22:43,740 --> 00:22:46,380
green blue channels you take your 8 bits

410
00:22:46,380 --> 00:22:49,530
of input data on each Channel and you

411
00:22:49,530 --> 00:22:52,230
convert it to

412
00:22:52,230 --> 00:22:54,820
the 10 bits that we're going to transmit

413
00:22:54,820 --> 00:22:57,250
and it goes across the cable and then we

414
00:22:57,250 --> 00:23:01,540
decode on the other side so the question

415
00:23:01,540 --> 00:23:06,420
is what does the 8-bit 210 bit encoding

416
00:23:06,420 --> 00:23:11,070
look like and how do you understand that

417
00:23:11,070 --> 00:23:14,620
it's described by this diagram here it's

418
00:23:14,620 --> 00:23:17,380
a bit small so I'll bring it up this is

419
00:23:17,380 --> 00:23:24,970
what it looks like yeah sure what this

420
00:23:24,970 --> 00:23:28,750
diagram like I've spent hours looking at

421
00:23:28,750 --> 00:23:32,590
this and it is extremely hard diagram to

422
00:23:32,590 --> 00:23:37,350
decode it's very very hard to understand

423
00:23:37,350 --> 00:23:40,600
and it turns out the encoding protocol

424
00:23:40,600 --> 00:23:44,020
it's actually quite easy it's three easy

425
00:23:44,020 --> 00:23:48,400
steps approximately and so I'm going to

426
00:23:48,400 --> 00:23:51,010
show you all how to write a encoder or

427
00:23:51,010 --> 00:23:53,500
decoder that diagram is just for the

428
00:23:53,500 --> 00:23:57,070
encoder they have a similarly diagram

429
00:23:57,070 --> 00:23:59,080
that is not the inverse of this for

430
00:23:59,080 --> 00:24:02,350
decoding again almost impossible to read

431
00:24:02,350 --> 00:24:05,800
so the three steps first we're going to

432
00:24:05,800 --> 00:24:08,020
do control or pixel choose which one to

433
00:24:08,020 --> 00:24:10,360
do and then we go into either encode

434
00:24:10,360 --> 00:24:15,370
control data on code pixel data so a

435
00:24:15,370 --> 00:24:19,270
couple important points to go through

436
00:24:19,270 --> 00:24:23,320
first the input data no matter how wide

437
00:24:23,320 --> 00:24:28,080
it is is converted to 10 bit symbols

438
00:24:28,080 --> 00:24:31,000
data goes to symbols when we're talking

439
00:24:31,000 --> 00:24:33,130
about them being transmitted we talk

440
00:24:33,130 --> 00:24:35,410
about them symbols when it's decoded

441
00:24:35,410 --> 00:24:39,090
into pixels we talk about them in data

442
00:24:39,090 --> 00:24:43,000
as well things and need to be kept DC

443
00:24:43,000 --> 00:24:48,430
balanced so I've rushed ahead the

444
00:24:48,430 --> 00:24:51,400
question is why 10 bits our pixels were

445
00:24:51,400 --> 00:24:54,150
eight bits I will explain why in the

446
00:24:54,150 --> 00:24:56,860
pixel data section but it's important

447
00:24:56,860 --> 00:24:58,270
that all hour cymbals are the same size

448
00:24:58,270 --> 00:25:01,060
and we're always transmitting 10-bit

449
00:25:01,060 --> 00:25:07,860
every clock cycle keeping DC balanced

450
00:25:07,860 --> 00:25:12,060
long runs of one's or zeros are bad

451
00:25:12,060 --> 00:25:15,430
there are lots of reasons for this I

452
00:25:15,430 --> 00:25:20,920
tend to think of it like HDMI isn't AC

453
00:25:20,920 --> 00:25:23,170
coupled but you can kind of think of it

454
00:25:23,170 --> 00:25:28,570
like AC coupled it's not to recover

455
00:25:28,570 --> 00:25:33,490
clock we have a clock pair that is used

456
00:25:33,490 --> 00:25:35,530
to give our clock signal and there are

457
00:25:35,530 --> 00:25:37,000
lots of lies on the internet that say

458
00:25:37,000 --> 00:25:40,930
that the reason we want to keep DC

459
00:25:40,930 --> 00:25:43,660
balances because of God but no that's

460
00:25:43,660 --> 00:25:49,420
not the case so what does DC balance

461
00:25:49,420 --> 00:25:55,060
mean a symbol which has lots of ones or

462
00:25:55,060 --> 00:25:57,970
lots of zeros he is going to be

463
00:25:57,970 --> 00:26:01,840
considered DC bias if it has more ones

464
00:26:01,840 --> 00:26:05,860
and zeros and this is kind of what it's

465
00:26:05,860 --> 00:26:09,400
like this symbol here has lots of ones

466
00:26:09,400 --> 00:26:11,230
and so if you add up all the ones you

467
00:26:11,230 --> 00:26:13,600
can see it's got quite a positive bias

468
00:26:13,600 --> 00:26:16,750
if it was in verse and had lots of zeros

469
00:26:16,750 --> 00:26:19,570
it would have a negative DC bias and so

470
00:26:19,570 --> 00:26:22,060
that caused that DC bias over time

471
00:26:22,060 --> 00:26:27,250
causes us problems so there's the two

472
00:26:27,250 --> 00:26:28,420
important things we have to keep in mind

473
00:26:28,420 --> 00:26:34,600
when looking at the rest so the first

474
00:26:34,600 --> 00:26:36,550
thing we need to figure out is are we

475
00:26:36,550 --> 00:26:38,910
transmitting control data or pixel data

476
00:26:38,910 --> 00:26:43,060
turns out that what is happening in your

477
00:26:43,060 --> 00:26:45,160
display is we're transmitting something

478
00:26:45,160 --> 00:26:49,810
that's actually bigger than what you see

479
00:26:49,810 --> 00:26:51,760
on your screen and this is not to scale

480
00:26:51,760 --> 00:26:53,830
the control data periods are much much

481
00:26:53,830 --> 00:26:59,590
smaller the control raised in Orange in

482
00:26:59,590 --> 00:27:06,310
the pixel data's in purple pink so why

483
00:27:06,310 --> 00:27:10,600
does this exists it exists because of

484
00:27:10,600 --> 00:27:13,270
old CRT monitors and for those in the

485
00:27:13,270 --> 00:27:15,310
audience who were kind of born after CRT

486
00:27:15,310 --> 00:27:16,390
monitors

487
00:27:16,390 --> 00:27:20,020
this is what they look like and they way

488
00:27:20,020 --> 00:27:23,230
they work is they have electron beam

489
00:27:23,230 --> 00:27:26,620
that scans across highlighting the

490
00:27:26,620 --> 00:27:29,860
phosphorus this electron beam can't just

491
00:27:29,860 --> 00:27:32,620
be get back to the other side of the

492
00:27:32,620 --> 00:27:36,220
screen straight away or get back to the

493
00:27:36,220 --> 00:27:38,410
top of the screen and so these periods

494
00:27:38,410 --> 00:27:40,780
where we're transmitting control data

495
00:27:40,780 --> 00:27:44,080
was to allow the electron beam to get

496
00:27:44,080 --> 00:27:47,110
back to the location where it needed to

497
00:27:47,110 --> 00:27:50,790
start transmitting the next set of data

498
00:27:51,450 --> 00:27:55,300
and so that's why it exists why do we

499
00:27:55,300 --> 00:27:57,850
care because the encoding schemes full

500
00:27:57,850 --> 00:27:59,530
control and pixel data are actually

501
00:27:59,530 --> 00:28:04,480
quite different this is the main

502
00:28:04,480 --> 00:28:06,700
difference I'm going to come back to the

503
00:28:06,700 --> 00:28:09,250
slide a bit later but again an important

504
00:28:09,250 --> 00:28:13,690
thing to see here is that the despite

505
00:28:13,690 --> 00:28:14,890
the encoding scheme being quite

506
00:28:14,890 --> 00:28:19,590
different the output is 10 bits in size

507
00:28:20,220 --> 00:28:23,350
so that first step choosing whether it's

508
00:28:23,350 --> 00:28:26,860
pixel or control data is described by

509
00:28:26,860 --> 00:28:29,500
this bit of the diagram you might notice

510
00:28:29,500 --> 00:28:33,210
it's not the first thing in the diagram

511
00:28:33,210 --> 00:28:35,710
so how do you convert control data to do

512
00:28:35,710 --> 00:28:38,620
control symbols first we need to know

513
00:28:38,620 --> 00:28:40,870
what control data is there are two bits

514
00:28:40,870 --> 00:28:42,970
there's the haight sink and the vsync

515
00:28:42,970 --> 00:28:46,660
signal they provide basically the

516
00:28:46,660 --> 00:28:50,490
horizontal and vertical pixel sizes

517
00:28:50,490 --> 00:28:53,650
they're kind of left over from vga we

518
00:28:53,650 --> 00:28:58,120
don't actually need them in HDMI or DVI

519
00:28:58,120 --> 00:29:01,480
to know where the edges are because we

520
00:29:01,480 --> 00:29:03,580
can tell the difference between control

521
00:29:03,580 --> 00:29:07,330
and pixel data but they kind of still

522
00:29:07,330 --> 00:29:08,860
exists because of backwards

523
00:29:08,860 --> 00:29:12,730
compatibility this means that we have

524
00:29:12,730 --> 00:29:14,470
two bits of data that we need to convert

525
00:29:14,470 --> 00:29:16,960
to 10 bits of data so it's a to be Tim

526
00:29:16,960 --> 00:29:23,200
be scheme and how they do it is they

527
00:29:23,200 --> 00:29:24,160
just

528
00:29:24,160 --> 00:29:26,590
and picked four symbols that were going

529
00:29:26,590 --> 00:29:30,370
to be these control data symbols these

530
00:29:30,370 --> 00:29:32,590
are the four symbols and there's some

531
00:29:32,590 --> 00:29:35,890
interesting properties with them chosen

532
00:29:35,890 --> 00:29:38,200
to be DC ballots they roughly have the

533
00:29:38,200 --> 00:29:40,360
same number of zeros and ones so we

534
00:29:40,360 --> 00:29:43,780
don't have to worry about the DC bias of

535
00:29:43,780 --> 00:29:47,680
these symbols very much that also chosen

536
00:29:47,680 --> 00:29:50,260
to have seven or more transitions from 0

537
00:29:50,260 --> 00:29:57,820
to 1 in them this number of transitions

538
00:29:57,820 --> 00:30:02,110
is used to understand the phase

539
00:30:02,110 --> 00:30:04,530
relationship of the different channels

540
00:30:04,530 --> 00:30:07,270
so if you remember this diagram we have

541
00:30:07,270 --> 00:30:09,400
a cable going between the transmitter

542
00:30:09,400 --> 00:30:13,840
and the receiver these again very high

543
00:30:13,840 --> 00:30:17,020
speed signals and even if the

544
00:30:17,020 --> 00:30:19,690
transmitter was transmitting everything

545
00:30:19,690 --> 00:30:24,190
at the same time the cable is an ideal

546
00:30:24,190 --> 00:30:28,630
and might delay some of the symbols the

547
00:30:28,630 --> 00:30:31,300
bits on one channel longer than others

548
00:30:31,300 --> 00:30:33,790
and so by having lots of these

549
00:30:33,790 --> 00:30:37,450
transmissions we can actually find the

550
00:30:37,450 --> 00:30:39,910
phase relationship between each of the

551
00:30:39,910 --> 00:30:42,550
channels and then recover the data and

552
00:30:42,550 --> 00:30:47,740
so that's why these control symbols have

553
00:30:47,740 --> 00:30:51,390
a large number of transitions in them

554
00:30:51,390 --> 00:30:53,290
more on that later when we get to

555
00:30:53,290 --> 00:30:55,210
implementation and I'm running out of

556
00:30:55,210 --> 00:30:58,870
time so this part of diagram is the

557
00:30:58,870 --> 00:31:04,780
control data encoding what about pixel

558
00:31:04,780 --> 00:31:08,800
data pixel symbols again in DVI each

559
00:31:08,800 --> 00:31:13,870
channel the pixel is eight bits and the

560
00:31:13,870 --> 00:31:15,250
encoding scheme is described by

561
00:31:15,250 --> 00:31:17,350
basically the rest of the diagram but

562
00:31:17,350 --> 00:31:21,480
again it's actually really really simple

563
00:31:21,480 --> 00:31:25,900
this encoding scheme is called 8b timbi

564
00:31:25,900 --> 00:31:28,330
because it takes eight bits converting

565
00:31:28,330 --> 00:31:31,240
it to 10 bits however there's a huge

566
00:31:31,240 --> 00:31:33,940
danger here because IBM also invented at

567
00:31:33,940 --> 00:31:35,580
8pm be skiing

568
00:31:35,580 --> 00:31:37,860
that is used in everything this is used

569
00:31:37,860 --> 00:31:39,330
in DisplayPort it's used in peace

570
00:31:39,330 --> 00:31:41,820
Express isn't SATA it's used in pretty

571
00:31:41,820 --> 00:31:44,280
much everything on the planet this is

572
00:31:44,280 --> 00:31:48,630
not the encoding tdms users you can use

573
00:31:48,630 --> 00:31:51,330
a lose a lot of time trying to map this

574
00:31:51,330 --> 00:31:54,360
diagram to the IBM coding scheme and

575
00:31:54,360 --> 00:31:56,730
going these are not the same that is

576
00:31:56,730 --> 00:31:58,230
because they're not the same this is a

577
00:31:58,230 --> 00:32:02,790
totally different coding scheme um so

578
00:32:02,790 --> 00:32:04,890
encoding pixel data is a two-step

579
00:32:04,890 --> 00:32:07,290
process I did say it was three ish steps

580
00:32:07,290 --> 00:32:11,850
to do this the first step is we want to

581
00:32:11,850 --> 00:32:16,220
reduce the transitions in the data and

582
00:32:16,220 --> 00:32:20,070
so how do we do this sorry why do we do

583
00:32:20,070 --> 00:32:22,200
this is because this again is a high

584
00:32:22,200 --> 00:32:24,720
speed channel we want to reduce the

585
00:32:24,720 --> 00:32:27,840
crosstalk between the lanes actually

586
00:32:27,840 --> 00:32:31,080
quite close to each other and so by

587
00:32:31,080 --> 00:32:34,290
reducing number of transitions we can

588
00:32:34,290 --> 00:32:39,540
reduce the probability that the signal

589
00:32:39,540 --> 00:32:41,850
propagates from one channel to the next

590
00:32:41,850 --> 00:32:46,050
and how we do it um we're going to

591
00:32:46,050 --> 00:32:49,530
choose one of two encoding schemes an

592
00:32:49,530 --> 00:32:51,720
XOR encoding scheme or an X North

593
00:32:51,720 --> 00:32:54,840
encoding scheme so how do we do the XO

594
00:32:54,840 --> 00:32:56,340
on coding scheme it's actually pretty

595
00:32:56,340 --> 00:32:59,250
simple we set then code a bit same as

596
00:32:59,250 --> 00:33:01,110
the first date a bit and then the next

597
00:33:01,110 --> 00:33:03,450
encode a bit is the first encoded bit

598
00:33:03,450 --> 00:33:09,870
XOR with the data bit so and then we

599
00:33:09,870 --> 00:33:12,360
just repeat until we have done the eight

600
00:33:12,360 --> 00:33:15,090
bits so this is how we do the XOR

601
00:33:15,090 --> 00:33:17,850
encoding the xnor encoding is the same

602
00:33:17,850 --> 00:33:19,980
process except instead of using X or

603
00:33:19,980 --> 00:33:24,990
users X naught then how do we choose

604
00:33:24,990 --> 00:33:31,140
which one of these to use if the input

605
00:33:31,140 --> 00:33:35,010
data byte has fewer than four ones we

606
00:33:35,010 --> 00:33:37,680
use the X or if it has more than four

607
00:33:37,680 --> 00:33:40,320
ones we use the xnor and then there's a

608
00:33:40,320 --> 00:33:42,630
tiebreaker if you have even the

609
00:33:42,630 --> 00:33:45,150
important thing here is that this method

610
00:33:45,150 --> 00:33:47,490
is determined by the data byte only

611
00:33:47,490 --> 00:33:48,840
there's no

612
00:33:48,840 --> 00:33:52,039
he didn't stay here or continuous change

613
00:33:52,039 --> 00:33:57,630
every pixel has a one-to-one mapping to

614
00:33:57,630 --> 00:34:02,850
an encoding and then we append a bit on

615
00:34:02,850 --> 00:34:05,429
the end that indicates whether we chose

616
00:34:05,429 --> 00:34:09,179
X or X nor encoding of that data and so

617
00:34:09,179 --> 00:34:13,320
that converts our eight bits input

618
00:34:13,320 --> 00:34:17,270
pixels to 9 bits of encoded data

619
00:34:17,270 --> 00:34:21,060
effectively our eight bit and code

620
00:34:21,060 --> 00:34:23,070
sequence and then one bit to indicate

621
00:34:23,070 --> 00:34:27,449
whether we chose xor xor nor encoding

622
00:34:27,449 --> 00:34:33,260
for that data bit so that's it there

623
00:34:33,260 --> 00:34:35,550
this encoding is actually very good at

624
00:34:35,550 --> 00:34:40,190
reducing transitions on average we had

625
00:34:40,190 --> 00:34:43,589
roughly eight transitions previously now

626
00:34:43,589 --> 00:34:47,399
we have roughly three ish so it's pretty

627
00:34:47,399 --> 00:34:50,250
cool I have no idea how they figure this

628
00:34:50,250 --> 00:34:52,530
out I'm assuming some very smart

629
00:34:52,530 --> 00:34:55,349
mathematicians were involved because

630
00:34:55,349 --> 00:35:00,000
this discovering this is beyond me and

631
00:35:00,000 --> 00:35:01,920
that describes the top part of this

632
00:35:01,920 --> 00:35:07,339
process this is where the in the tmds

633
00:35:07,339 --> 00:35:11,099
the transition minimization comes from

634
00:35:11,099 --> 00:35:14,190
that step there the encoding process and

635
00:35:14,190 --> 00:35:16,650
but there's still one more step we need

636
00:35:16,650 --> 00:35:19,140
to keep the channel DC balanced as I

637
00:35:19,140 --> 00:35:23,130
explained earlier and how can we do that

638
00:35:23,130 --> 00:35:25,980
because not our pixels aren't guaranteed

639
00:35:25,980 --> 00:35:30,150
to be a zero DC bias like a control

640
00:35:30,150 --> 00:35:33,300
symbols are we do it by keeping a

641
00:35:33,300 --> 00:35:36,560
running count of the DC bias we have and

642
00:35:36,560 --> 00:35:41,280
then if we have a positive DC bias and

643
00:35:41,280 --> 00:35:44,970
the symbol is also positively biased we

644
00:35:44,970 --> 00:35:47,160
invert it or if we have a negative DC

645
00:35:47,160 --> 00:35:50,280
bias and the symbol has a negative DC

646
00:35:50,280 --> 00:35:54,300
bias we invert it and the reason we do

647
00:35:54,300 --> 00:35:57,540
this is because when we invert a symbol

648
00:35:57,540 --> 00:36:00,150
we compare all the ones as heroes which

649
00:36:00,150 --> 00:36:02,700
means a negative DC bias becomes a

650
00:36:02,700 --> 00:36:06,359
positive DC bias and so as I said we

651
00:36:06,359 --> 00:36:08,520
chose because we are already negative

652
00:36:08,520 --> 00:36:11,430
and the thing was negative we convert it

653
00:36:11,430 --> 00:36:13,770
to plus it means that we're going to

654
00:36:13,770 --> 00:36:18,119
drive the running DC bias value back

655
00:36:18,119 --> 00:36:21,390
towards zero we might overshoot but the

656
00:36:21,390 --> 00:36:23,849
next stage will keep trying to isolate

657
00:36:23,849 --> 00:36:27,359
up and down and on average over time we

658
00:36:27,359 --> 00:36:32,930
keep a DC bias of zero and as I said

659
00:36:32,930 --> 00:36:35,820
then to indicate whether or not we

660
00:36:35,820 --> 00:36:41,760
inverted or kept the straight through or

661
00:36:41,760 --> 00:36:44,310
we inverted we add another bit on end

662
00:36:44,310 --> 00:36:47,540
and so that's how we get our ten bit

663
00:36:47,540 --> 00:36:51,900
encoding scheme we have the eight bits

664
00:36:51,900 --> 00:36:54,930
of encoded data then one bit indicating

665
00:36:54,930 --> 00:36:58,109
whether or not it used XOX non-coding

666
00:36:58,109 --> 00:37:02,099
and then one bit to indicate whether or

667
00:37:02,099 --> 00:37:04,200
not we inverted the symbol and so that

668
00:37:04,200 --> 00:37:06,150
described this bottom part of the chart

669
00:37:06,150 --> 00:37:12,319
and now you can see partly why this

670
00:37:12,319 --> 00:37:15,240
chart is kind of confusing it's no way

671
00:37:15,240 --> 00:37:18,420
in what I think of as a logical diagram

672
00:37:18,420 --> 00:37:20,339
this might be how you implement it in

673
00:37:20,339 --> 00:37:21,720
hardware if you already understand the

674
00:37:21,720 --> 00:37:25,740
protocol but not very good diagram for

675
00:37:25,740 --> 00:37:32,369
explaining what's going on and as you

676
00:37:32,369 --> 00:37:34,530
see it's actually pretty simple and in

677
00:37:34,530 --> 00:37:39,450
summary this is the interesting

678
00:37:39,450 --> 00:37:41,220
information about the two different

679
00:37:41,220 --> 00:37:46,800
encoding schemes because we minimize the

680
00:37:46,800 --> 00:37:49,470
transitions in the pixel data we can

681
00:37:49,470 --> 00:37:51,839
actually tell control data and pixel

682
00:37:51,839 --> 00:37:54,300
data apart by looking at how many

683
00:37:54,300 --> 00:37:56,910
transitions in the symbol if it has six

684
00:37:56,910 --> 00:37:58,380
or more transitions it must be in

685
00:37:58,380 --> 00:38:02,040
control simple if as four or less must

686
00:38:02,040 --> 00:38:06,990
be a pixel simple so you know how now

687
00:38:06,990 --> 00:38:09,900
know how to encode tdms data and how to

688
00:38:09,900 --> 00:38:13,170
decode DDMS data because if you want to

689
00:38:13,170 --> 00:38:15,589
decode you just do

690
00:38:15,589 --> 00:38:20,119
process backwards congratulations so how

691
00:38:20,119 --> 00:38:25,489
do you actually implement this well you

692
00:38:25,489 --> 00:38:28,400
can just write the X or logic and a

693
00:38:28,400 --> 00:38:29,989
little counter that keeps track of the

694
00:38:29,989 --> 00:38:31,670
day I see by us and all that type of

695
00:38:31,670 --> 00:38:35,210
thing in the FPGA i'm not going to

696
00:38:35,210 --> 00:38:37,969
ascribe that because i don't have much

697
00:38:37,969 --> 00:38:41,059
time but if you follow the process and

698
00:38:41,059 --> 00:38:43,700
that I've given you it should be pretty

699
00:38:43,700 --> 00:38:48,079
easy but and this is what we use

700
00:38:48,079 --> 00:38:51,769
currently you could actually use a

701
00:38:51,769 --> 00:38:53,509
lookup table what we're doing is

702
00:38:53,509 --> 00:38:56,329
converting eight bits of data to 10 bits

703
00:38:56,329 --> 00:39:00,489
of data that is a lookup table process

704
00:39:00,489 --> 00:39:04,819
pretty easy if pj's are really good at

705
00:39:04,819 --> 00:39:08,059
using doing lookup table type processes

706
00:39:08,059 --> 00:39:10,640
and it also allows you then to extend

707
00:39:10,640 --> 00:39:15,529
this system to those other protocols

708
00:39:15,529 --> 00:39:18,380
like the four be 10 be that is used for

709
00:39:18,380 --> 00:39:21,739
the auxiliary data so we're looking at

710
00:39:21,739 --> 00:39:24,049
that in the future use of few more

711
00:39:24,049 --> 00:39:26,769
resources but it's a lot more powerful

712
00:39:26,769 --> 00:39:29,479
and so this is kind of what your encoder

713
00:39:29,479 --> 00:39:32,869
will look like and your decoder it's

714
00:39:32,869 --> 00:39:35,749
quite simple takes in year eight your 10

715
00:39:35,749 --> 00:39:38,150
bits of data and outputs either your

716
00:39:38,150 --> 00:39:39,979
eight bits of pixel data or two bits of

717
00:39:39,979 --> 00:39:43,819
control data and a data type this is

718
00:39:43,819 --> 00:39:45,829
kind of what if you went into our design

719
00:39:45,829 --> 00:39:49,219
and looked at it it a high level in

720
00:39:49,219 --> 00:39:50,509
schematic you'll probably see a block

721
00:39:50,509 --> 00:39:52,819
that looks like this the encoders

722
00:39:52,819 --> 00:39:54,650
slightly more complicated because you

723
00:39:54,650 --> 00:39:56,719
also have the DC bias count that you

724
00:39:56,719 --> 00:40:01,069
have to keep track of but again a the

725
00:40:01,069 --> 00:40:02,839
data goes in and the data comes out and

726
00:40:02,839 --> 00:40:09,049
that's simple right and yeah this kind

727
00:40:09,049 --> 00:40:11,390
of extends to auxiliary data or if you

728
00:40:11,390 --> 00:40:14,779
get an error like if you there are 124

729
00:40:14,779 --> 00:40:17,690
symbols that you can have in 10 bit

730
00:40:17,690 --> 00:40:20,269
today de not all of them are valid and

731
00:40:20,269 --> 00:40:21,920
so if you get one of these invalid

732
00:40:21,920 --> 00:40:25,150
symbols you know you have an error

733
00:40:25,269 --> 00:40:27,200
however thing

734
00:40:27,200 --> 00:40:31,099
happen quite quickly when you x them by

735
00:40:31,099 --> 00:40:36,109
10 and so our pixel clock for 640 by 480

736
00:40:36,109 --> 00:40:38,720
is 25 megahertz when you times that by

737
00:40:38,720 --> 00:40:43,030
10 you get 250 mega bits per channel

738
00:40:43,030 --> 00:40:47,420
when you're doing 720p you're doing 750

739
00:40:47,420 --> 00:40:51,250
mega bits per channel and 1080p is a

740
00:40:51,250 --> 00:40:54,530
1500 mega bits per channel and FB jeez

741
00:40:54,530 --> 00:40:57,920
fpgas are fast but they're not really

742
00:40:57,920 --> 00:41:01,070
that fast at a range that I can afford

743
00:41:01,070 --> 00:41:03,980
by i'm sure the military has ones that

744
00:41:03,980 --> 00:41:07,480
go this fast but i'm not as rich as them

745
00:41:07,480 --> 00:41:10,700
but they do include a nice hat to solve

746
00:41:10,700 --> 00:41:13,490
this and that cool suit is they

747
00:41:13,490 --> 00:41:15,920
basically turn parallel data in the zero

748
00:41:15,920 --> 00:41:20,560
data this is what the blocks look like

749
00:41:20,560 --> 00:41:23,660
you give them your tdms parallel data

750
00:41:23,660 --> 00:41:26,000
and they convert it to high-speed serial

751
00:41:26,000 --> 00:41:28,520
data for you there are a little bit

752
00:41:28,520 --> 00:41:31,160
fiddly to use and your best option is to

753
00:41:31,160 --> 00:41:34,180
go and find a person who's already

754
00:41:34,180 --> 00:41:37,670
configured this for your FPGA and follow

755
00:41:37,670 --> 00:41:41,540
what they do hampster Mike hamster field

756
00:41:41,540 --> 00:41:44,690
has a really good documentation on how

757
00:41:44,690 --> 00:41:47,060
to use these in the Spartan six these

758
00:41:47,060 --> 00:41:50,020
are also unique to your FPGA so

759
00:41:50,020 --> 00:41:52,460
different FPGAs are going to have

760
00:41:52,460 --> 00:41:54,319
different control schemes but if you're

761
00:41:54,319 --> 00:41:58,730
using a Spartan six then go and look at

762
00:41:58,730 --> 00:42:02,869
what Mike hampster field is doing for

763
00:42:02,869 --> 00:42:08,420
configuring these and so I remember how

764
00:42:08,420 --> 00:42:13,240
I said our system has a a serial console

765
00:42:13,240 --> 00:42:15,920
because we have this system we can

766
00:42:15,920 --> 00:42:19,190
actually do delve quite deep into what's

767
00:42:19,190 --> 00:42:25,010
happening internally in the system and

768
00:42:25,010 --> 00:42:27,530
print it out and so this is the bugging

769
00:42:27,530 --> 00:42:34,240
from one of our arm systems you can see

770
00:42:34,240 --> 00:42:36,109
the first thing is the phase

771
00:42:36,109 --> 00:42:39,680
relationship between each of the

772
00:42:39,680 --> 00:42:40,539
channels

773
00:42:40,539 --> 00:42:42,489
the next one is whether we're getting

774
00:42:42,489 --> 00:42:45,160
valid data and then on each of the

775
00:42:45,160 --> 00:42:47,439
channels and then we've got the error

776
00:42:47,439 --> 00:42:50,289
rate for that channel whether all the

777
00:42:50,289 --> 00:42:52,779
channels are synchronized and then some

778
00:42:52,779 --> 00:42:54,669
resolution information you can see that

779
00:42:54,669 --> 00:42:57,459
this has got a 74 megahertz six o'clock

780
00:42:57,459 --> 00:43:01,029
and there are three columns because

781
00:43:01,029 --> 00:43:04,989
there's red green and blue channels so

782
00:43:04,989 --> 00:43:06,819
this gives us some very interesting

783
00:43:06,819 --> 00:43:09,759
debugging capabilities if you plug in a

784
00:43:09,759 --> 00:43:14,140
cable and you're getting errors on the

785
00:43:14,140 --> 00:43:17,439
blue channel but nowhere else it's

786
00:43:17,439 --> 00:43:19,119
highly likely there's something wrong

787
00:43:19,119 --> 00:43:22,749
with that cable this is a very powerful

788
00:43:22,749 --> 00:43:25,660
tool that allows us to figure out what's

789
00:43:25,660 --> 00:43:29,769
going wrong in a system and it's

790
00:43:29,769 --> 00:43:31,509
something you can't really get with the

791
00:43:31,509 --> 00:43:35,529
commercial versions of this but what

792
00:43:35,529 --> 00:43:38,349
about errors I'm everything I'm talking

793
00:43:38,349 --> 00:43:40,059
about now is a little bit experimental

794
00:43:40,059 --> 00:43:42,249
we haven't actually implemented this but

795
00:43:42,249 --> 00:43:44,169
at some ideas about what we can do

796
00:43:44,169 --> 00:43:46,659
because we now have complete control of

797
00:43:46,659 --> 00:43:50,679
our decoder so as I said this 124

798
00:43:50,679 --> 00:43:53,219
possible choices for template symbols of

799
00:43:53,219 --> 00:43:58,749
which 460 are valid pixel symbols for a

800
00:43:58,749 --> 00:44:02,229
valid control symbols and 560 symbol

801
00:44:02,229 --> 00:44:04,499
should never ever be seen no matter what

802
00:44:04,499 --> 00:44:08,069
that's like fifty-six percent of our

803
00:44:08,069 --> 00:44:12,159
space that should never be seen but it's

804
00:44:12,159 --> 00:44:14,199
actually better than that we know

805
00:44:14,199 --> 00:44:17,579
because of the running DC bias that

806
00:44:17,579 --> 00:44:25,390
there are 256 valid pixel symbols at any

807
00:44:25,390 --> 00:44:28,150
one point you can't have the if you've

808
00:44:28,150 --> 00:44:32,079
got a negative DC bias you can't have a

809
00:44:32,079 --> 00:44:34,689
pixel symbol which continues to drive

810
00:44:34,689 --> 00:44:37,599
you negative and so actually

811
00:44:37,599 --> 00:44:42,819
seventy-four percent of our space at any

812
00:44:42,819 --> 00:44:48,039
one time is not allowed to exist um this

813
00:44:48,039 --> 00:44:51,219
means that a huge number of the invalid

814
00:44:51,219 --> 00:44:54,010
symbols are only near

815
00:44:54,010 --> 00:44:56,650
one other valid symbol and so we can

816
00:44:56,650 --> 00:44:59,770
actually correct them we can go this

817
00:44:59,770 --> 00:45:02,170
symbol must have been this other symbol

818
00:45:02,170 --> 00:45:05,350
because it's not valid symbol it must be

819
00:45:05,350 --> 00:45:08,650
a bit error from this other symbol and

820
00:45:08,650 --> 00:45:10,990
so we can correct these errors and this

821
00:45:10,990 --> 00:45:15,330
is quite cool we can correct about

822
00:45:15,330 --> 00:45:19,690
seventy percent of single bit flip

823
00:45:19,690 --> 00:45:24,940
errors in pixel data but sadly there is

824
00:45:24,940 --> 00:45:29,650
some that we can't but we can detect

825
00:45:29,650 --> 00:45:34,960
that we got a in valent pixel data so

826
00:45:34,960 --> 00:45:36,930
the fact that there's an error is

827
00:45:36,930 --> 00:45:42,010
important so in this case we've got two

828
00:45:42,010 --> 00:45:44,290
pixels that we receive correctly and we

829
00:45:44,290 --> 00:45:48,070
got a pixel that we know is invalid

830
00:45:48,070 --> 00:45:50,770
value and then two more pixels that we

831
00:45:50,770 --> 00:45:54,190
receive quickly so you can imagine this

832
00:45:54,190 --> 00:45:56,860
is a blue channel so the first ones were

833
00:45:56,860 --> 00:45:59,200
very very blue not very blue and then

834
00:45:59,200 --> 00:46:02,170
there's the decoded value for this is

835
00:46:02,170 --> 00:46:04,870
very very blue like very light blue and

836
00:46:04,870 --> 00:46:07,630
then some not other ones and this looks

837
00:46:07,630 --> 00:46:12,660
really bad right this was probably a

838
00:46:12,660 --> 00:46:16,950
whole blue block not one pixel

839
00:46:16,950 --> 00:46:20,260
difference of that big that size is

840
00:46:20,260 --> 00:46:25,150
probably not a valid value and so we can

841
00:46:25,150 --> 00:46:28,810
cover them up we can go the two pixels

842
00:46:28,810 --> 00:46:31,420
either side and average them and fix

843
00:46:31,420 --> 00:46:34,330
that pixel so this allows us to correct

844
00:46:34,330 --> 00:46:36,880
a whole bunch more of errors that are

845
00:46:36,880 --> 00:46:40,180
occurring and as but we're about to take

846
00:46:40,180 --> 00:46:42,580
this data and run it through a JPEG

847
00:46:42,580 --> 00:46:47,110
encoder this doesn't actually affect the

848
00:46:47,110 --> 00:46:50,500
quality of the output all that much and

849
00:46:50,500 --> 00:46:52,660
allows us to fix things that would

850
00:46:52,660 --> 00:46:56,230
otherwise be giant glaring glitches in

851
00:46:56,230 --> 00:47:00,190
the output and so that's some

852
00:47:00,190 --> 00:47:03,040
interesting information about how you do

853
00:47:03,040 --> 00:47:05,950
tdms decoding and how we can fix some

854
00:47:05,950 --> 00:47:08,250
errors

855
00:47:08,440 --> 00:47:10,910
the thing is we can do even better than

856
00:47:10,910 --> 00:47:14,480
this because it's an open source project

857
00:47:14,480 --> 00:47:17,990
maybe you have some idea about how we

858
00:47:17,990 --> 00:47:20,750
can improve the sir des performance

859
00:47:20,750 --> 00:47:23,570
maybe have some idea about how to do

860
00:47:23,570 --> 00:47:27,890
tdms decoding on a much lower power

861
00:47:27,890 --> 00:47:31,670
device than we use I'm its own the

862
00:47:31,670 --> 00:47:34,070
source you can look at the code and you

863
00:47:34,070 --> 00:47:37,280
can improve it and would love you to do

864
00:47:37,280 --> 00:47:41,030
it and the thing is that I have lots of

865
00:47:41,030 --> 00:47:43,730
hardware but not much time if you have

866
00:47:43,730 --> 00:47:45,530
lots of time and not much hardware i

867
00:47:45,530 --> 00:47:50,090
think i can solve this problem these are

868
00:47:50,090 --> 00:47:55,280
links to the hdmi USB project and the

869
00:47:55,280 --> 00:47:57,740
team videos project and oil code our

870
00:47:57,740 --> 00:48:01,810
hardware everything is on github under

871
00:48:01,810 --> 00:48:05,030
open-source licenses and here's some

872
00:48:05,030 --> 00:48:07,100
bonus screenshots that I wasn't able to

873
00:48:07,100 --> 00:48:11,600
fit in other locations you can see these

874
00:48:11,600 --> 00:48:14,630
are small errors that one was kind of a

875
00:48:14,630 --> 00:48:18,260
big error this is what happens when your

876
00:48:18,260 --> 00:48:28,460
ddr memory is slightly broken yeah but

877
00:48:28,460 --> 00:48:34,930
yeah and that is my talk

878
00:48:42,500 --> 00:48:44,420
excellent thank you very much method and

879
00:48:44,420 --> 00:48:46,700
as you've noticed we have a couple of

880
00:48:46,700 --> 00:48:48,440
microphones standing around in the room

881
00:48:48,440 --> 00:48:50,660
if you have any questions remover please

882
00:48:50,660 --> 00:48:53,510
line up behind the microphones and I

883
00:48:53,510 --> 00:48:55,580
will allow you to ask the questions we

884
00:48:55,580 --> 00:48:58,220
have a question from the internet yes

885
00:48:58,220 --> 00:49:01,010
thank you do you know if normal and

886
00:49:01,010 --> 00:49:03,830
monitors do similar error recovery or

887
00:49:03,830 --> 00:49:07,310
hiding um I know of no commercial

888
00:49:07,310 --> 00:49:09,380
implementation that does any type of

889
00:49:09,380 --> 00:49:11,360
error correction the solution for the

890
00:49:11,360 --> 00:49:15,860
commercial guys is to effectively never

891
00:49:15,860 --> 00:49:24,260
get errors they can do that because they

892
00:49:24,260 --> 00:49:25,430
don't have to deal with the angry

893
00:49:25,430 --> 00:49:27,620
speakers on the ground going why as my

894
00:49:27,620 --> 00:49:32,210
slides look weird and as well they're

895
00:49:32,210 --> 00:49:34,160
probably working with better quality

896
00:49:34,160 --> 00:49:37,100
hardware than we're using we're trying

897
00:49:37,100 --> 00:49:38,900
to make things as cheap as possible and

898
00:49:38,900 --> 00:49:42,080
so we are pushing the boundaries of a

899
00:49:42,080 --> 00:49:44,030
lot of the devices we're using so we're

900
00:49:44,030 --> 00:49:47,440
more likely to get errors then they are

901
00:49:47,440 --> 00:49:49,490
we have quite a lot of questions to

902
00:49:49,490 --> 00:49:51,080
remember questions not comments

903
00:49:51,080 --> 00:49:54,340
microphone number one please

904
00:50:10,630 --> 00:50:19,539
yes sorry I don't quite understand

905
00:50:19,539 --> 00:50:24,210
what's going on do we have translate

906
00:50:29,099 --> 00:50:46,720
audio problem i'll be around afterwards

907
00:50:46,720 --> 00:50:52,720
if you want to chat to me and we might

908
00:50:52,720 --> 00:50:54,789
do that where you brights you on the

909
00:50:54,789 --> 00:50:57,640
computer afterwards a second question

910
00:50:57,640 --> 00:51:01,140
from a microphone number three please oh

911
00:51:01,140 --> 00:51:04,029
yes can you determine the quality of a

912
00:51:04,029 --> 00:51:06,579
hdmi cable for example by measuring bit

913
00:51:06,579 --> 00:51:09,039
error rate of each three bears and maybe

914
00:51:09,039 --> 00:51:10,390
also some gentle on the clock and that

915
00:51:10,390 --> 00:51:15,250
kind of um yes we can the quality of a

916
00:51:15,250 --> 00:51:17,829
hdmi cable should be there 0 bit errors

917
00:51:17,829 --> 00:51:19,990
so anything that has nonzero better

918
00:51:19,990 --> 00:51:23,769
errors we chopped up and throw away this

919
00:51:23,769 --> 00:51:26,039
gets interesting when you have very long

920
00:51:26,039 --> 00:51:29,950
cables we can actually see that the

921
00:51:29,950 --> 00:51:31,930
longer the cable is the harder for them

922
00:51:31,930 --> 00:51:39,789
to keep 0 bit errors so yes we can kind

923
00:51:39,789 --> 00:51:43,509
of judge the quality of the cable but

924
00:51:43,509 --> 00:51:48,160
it's also hard because it depends on

925
00:51:48,160 --> 00:51:51,369
what the sister-like sender is doing if

926
00:51:51,369 --> 00:51:55,359
the sender is of a lower quality and the

927
00:51:55,359 --> 00:51:57,430
cable is low quality you might get the

928
00:51:57,430 --> 00:51:59,529
errors but if the sender is of a high

929
00:51:59,529 --> 00:52:06,400
quality and the cables of a low quality

930
00:52:06,400 --> 00:52:08,259
they might cancel each other out and

931
00:52:08,259 --> 00:52:12,180
still be fine and so we can't just go

932
00:52:12,180 --> 00:52:18,009
the this is a good cable because we

933
00:52:18,009 --> 00:52:19,960
don't actually have any control over our

934
00:52:19,960 --> 00:52:24,869
how powerful a sender is on this device

935
00:52:24,869 --> 00:52:28,029
if we could kind of turn down the sender

936
00:52:28,029 --> 00:52:29,619
and see where things start going wrong

937
00:52:29,619 --> 00:52:32,650
they'll be pretty cool if anybody wants

938
00:52:32,650 --> 00:52:34,809
to look at building such a device I

939
00:52:34,809 --> 00:52:38,410
would love to help you do that we have

940
00:52:38,410 --> 00:52:39,910
another question from microphone number

941
00:52:39,910 --> 00:52:44,109
5 your heart well the hdmi to USB

942
00:52:44,109 --> 00:52:47,380
hardware yes it available for simply

943
00:52:47,380 --> 00:52:50,950
offering or has it to be sold by hand or

944
00:52:50,950 --> 00:52:54,460
um you can you cannot soul to this ball

945
00:52:54,460 --> 00:52:56,200
by hand unless you're much much better

946
00:52:56,200 --> 00:52:59,440
than I am he uses ball grid array parts

947
00:52:59,440 --> 00:53:03,250
because it's FPGA this is one here you

948
00:53:03,250 --> 00:53:05,319
can buy them we're working with a

949
00:53:05,319 --> 00:53:08,319
manufacturer or an India who builds them

950
00:53:08,319 --> 00:53:13,150
for us we work with them and it was

951
00:53:13,150 --> 00:53:16,180
pretty awesome we're also working on new

952
00:53:16,180 --> 00:53:18,400
hardware I've got a whole bunch of fpga

953
00:53:18,400 --> 00:53:20,289
hardware down here that you can come

954
00:53:20,289 --> 00:53:22,960
over look at and I'll probably move it

955
00:53:22,960 --> 00:53:26,769
out into the hallway afterwards again if

956
00:53:26,769 --> 00:53:28,599
you're interested in the hardware and

957
00:53:28,599 --> 00:53:32,049
you have a use case chat to me because I

958
00:53:32,049 --> 00:53:35,829
like to solve problems of people not

959
00:53:35,829 --> 00:53:38,890
having hardware and my employer pays me

960
00:53:38,890 --> 00:53:42,009
too much so I get to use my

961
00:53:42,009 --> 00:53:44,559
discretionary funds for helping out

962
00:53:44,559 --> 00:53:49,079
people doing open source stuff

963
00:53:54,240 --> 00:53:56,580
we have at least four more questions

964
00:53:56,580 --> 00:53:59,490
microphone number two please and do you

965
00:53:59,490 --> 00:54:02,900
think it would be possible to get and

966
00:54:02,900 --> 00:54:06,390
180 p image out of the open source

967
00:54:06,390 --> 00:54:11,640
hardware but you promised yes I do but

968
00:54:11,640 --> 00:54:17,130
it requires us to do some hard work that

969
00:54:17,130 --> 00:54:20,330
we haven't had time to do yet and for us

970
00:54:20,330 --> 00:54:25,230
720p at 60 frames per second is good

971
00:54:25,230 --> 00:54:33,510
enough the USB USB connection is limited

972
00:54:33,510 --> 00:54:35,010
in bandwidth because we don't have a

973
00:54:35,010 --> 00:54:38,730
h.264 encoder we only have mjpeg if

974
00:54:38,730 --> 00:54:41,310
somebody wants to write us a open source

975
00:54:41,310 --> 00:54:47,010
say WebM rather than h.264 encoder that

976
00:54:47,010 --> 00:54:48,960
might start becoming more interesting we

977
00:54:48,960 --> 00:54:51,030
also have Ethernet gigabit ethernet on

978
00:54:51,030 --> 00:54:53,910
this board it should be pretty easy to

979
00:54:53,910 --> 00:54:56,869
stream the data out to ethernet again

980
00:54:56,869 --> 00:55:00,359
need help the ethernet controller works

981
00:55:00,359 --> 00:55:02,550
we can telnet into the board and control

982
00:55:02,550 --> 00:55:06,230
it via telnet we just need somebody to

983
00:55:06,230 --> 00:55:09,119
actually connect the data and the

984
00:55:09,119 --> 00:55:11,790
high-speed data side up we use it for

985
00:55:11,790 --> 00:55:15,690
the bugging and stuff so yeah Mike helps

986
00:55:15,690 --> 00:55:18,300
the field again really big thank you to

987
00:55:18,300 --> 00:55:24,500
him he is an amazing designer he built

988
00:55:24,500 --> 00:55:28,070
1080p60 that is a little bit out of spec

989
00:55:28,070 --> 00:55:32,090
but actually works really well on

990
00:55:32,090 --> 00:55:34,350
hardware that is almost identical to us

991
00:55:34,350 --> 00:55:39,210
and he also did the DisplayPort like a

992
00:55:39,210 --> 00:55:42,060
4k display port which we can do on our

993
00:55:42,060 --> 00:55:45,690
board so if you only need one or two of

994
00:55:45,690 --> 00:55:50,700
the 1080p things display port connectors

995
00:55:50,700 --> 00:55:52,530
can be converted to hdmi quite easily

996
00:55:52,530 --> 00:55:56,940
and you can do that on them so yes I

997
00:55:56,940 --> 00:55:59,430
think it's possible but again open

998
00:55:59,430 --> 00:56:04,160
source hobbyist need developers

999
00:56:05,030 --> 00:56:07,310
we'll take one question for the Internet

1000
00:56:07,310 --> 00:56:12,050
thank you have you considered jpeg2000

1001
00:56:12,050 --> 00:56:15,360
no I have not and the main reason is

1002
00:56:15,360 --> 00:56:18,270
that I want to be a webcam I won't

1003
00:56:18,270 --> 00:56:21,870
pretend to be a webcam the UVC standard

1004
00:56:21,870 --> 00:56:25,860
which is the USB webcam standard does

1005
00:56:25,860 --> 00:56:31,410
not support jpeg 2000 there's no reason

1006
00:56:31,410 --> 00:56:33,000
we couldn't support jpeg 2000 when

1007
00:56:33,000 --> 00:56:35,250
connected to linux like we could fix the

1008
00:56:35,250 --> 00:56:38,190
Linux driver to add JP 2000 support

1009
00:56:38,190 --> 00:56:41,390
again I don't know if there's any good

1010
00:56:41,390 --> 00:56:45,240
open source fpga implementations of jpeg

1011
00:56:45,240 --> 00:56:53,070
2000 so I that's also a blocker but if

1012
00:56:53,070 --> 00:56:54,930
you're interested in helping out come

1013
00:56:54,930 --> 00:57:01,020
and talk to me as I said I would my very

1014
00:57:01,020 --> 00:57:03,840
much love to chat to you and solve the

1015
00:57:03,840 --> 00:57:06,900
problems you're having with getting

1016
00:57:06,900 --> 00:57:11,670
going as well we have t-shirts I'm

1017
00:57:11,670 --> 00:57:14,220
wearing a t-shirt that we have and i

1018
00:57:14,220 --> 00:57:16,670
will send anybody who contributes a

1019
00:57:16,670 --> 00:57:20,100
t-shirt weather that's fixing our

1020
00:57:20,100 --> 00:57:22,970
website hoping your documentation

1021
00:57:22,970 --> 00:57:25,320
helping people on IRC get set up

1022
00:57:25,320 --> 00:57:28,980
anything you don't need to be an expert

1023
00:57:28,980 --> 00:57:35,100
on fpga stuff to help out and we also

1024
00:57:35,100 --> 00:57:37,650
are working on a little project to run

1025
00:57:37,650 --> 00:57:40,710
micro python on fpgas so if you're

1026
00:57:40,710 --> 00:57:42,570
really into Python and you like micro

1027
00:57:42,570 --> 00:57:47,100
Python I would love to help you help us

1028
00:57:47,100 --> 00:57:49,920
do that it's kind of working we just

1029
00:57:49,920 --> 00:57:53,730
need more peripheral support so we have

1030
00:57:53,730 --> 00:57:54,870
two more questions from microphone

1031
00:57:54,870 --> 00:57:57,810
number one so is there some sort of

1032
00:57:57,810 --> 00:57:59,850
dedicated processor in that board or do

1033
00:57:59,850 --> 00:58:02,790
use like a micro place in the FPGA we

1034
00:58:02,790 --> 00:58:05,940
use an open-source soft core one of

1035
00:58:05,940 --> 00:58:08,220
three we can change which softcore we're

1036
00:58:08,220 --> 00:58:11,410
using with a command-line flag

1037
00:58:11,410 --> 00:58:15,450
we're using either the lattice micro 32

1038
00:58:15,450 --> 00:58:18,490
which was produced by lattice

1039
00:58:18,490 --> 00:58:22,750
semiconductor we can use the open risk

1040
00:58:22,750 --> 00:58:28,539
1k or we can use a risk 5 processor we

1041
00:58:28,539 --> 00:58:31,240
generally default to LMK 32 because it's

1042
00:58:31,240 --> 00:58:37,210
the most performance for least FPGA

1043
00:58:37,210 --> 00:58:42,880
resource trade-off but if you like risk

1044
00:58:42,880 --> 00:58:46,809
5 or open risk 1k better for some reason

1045
00:58:46,809 --> 00:58:50,109
saying you want to run linux on our soft

1046
00:58:50,109 --> 00:58:54,099
core then you can do that with a one

1047
00:58:54,099 --> 00:58:58,599
line command line change yeah we're

1048
00:58:58,599 --> 00:59:01,349
looking at adding Jake or support in

1049
00:59:01,349 --> 00:59:05,200
early next year J cause quite big though

1050
00:59:05,200 --> 00:59:08,650
compared to LM 32 so it probably won't

1051
00:59:08,650 --> 00:59:11,710
fit on some of the very small devices so

1052
00:59:11,710 --> 00:59:14,920
it's a lattice fpga okay it's a Spartan

1053
00:59:14,920 --> 00:59:17,380
6 fpga and our new boards will probably

1054
00:59:17,380 --> 00:59:22,150
be our tech 7 but we're still in the

1055
00:59:22,150 --> 00:59:24,400
process of making them exist yet I've

1056
00:59:24,400 --> 00:59:26,770
also been working with bunnies any TV to

1057
00:59:26,770 --> 00:59:30,549
putting our firmware to that which is

1058
00:59:30,549 --> 00:59:32,980
bring really awesome he's doing some

1059
00:59:32,980 --> 00:59:36,970
cool work there and he's kind of expired

1060
00:59:36,970 --> 00:59:39,549
this whole development by showing that

1061
00:59:39,549 --> 00:59:42,010
yes you could do this and you shouldn't

1062
00:59:42,010 --> 00:59:44,349
be scared of it good one more question

1063
00:59:44,349 --> 00:59:46,510
from microphone number one yes do you

1064
00:59:46,510 --> 00:59:48,880
have any plans for incorporating hd-sdi

1065
00:59:48,880 --> 00:59:57,190
into your platform um yes and no we have

1066
00:59:57,190 --> 01:00:02,220
plans and ideas that we could do it but

1067
01:00:02,220 --> 01:00:08,890
HD HD SDI and all the SDI protocols a

1068
01:00:08,890 --> 01:00:13,750
much harder for the consumer generally

1069
01:00:13,750 --> 01:00:16,510
to access and we want to drive the cost

1070
01:00:16,510 --> 01:00:21,839
of this down to as low as it can go and

1071
01:00:21,839 --> 01:00:25,100
HDMI is a consumer electronic thing

1072
01:00:25,100 --> 01:00:26,390
you get it on everything you get on your

1073
01:00:26,390 --> 01:00:31,850
like five buck Raspberry Pi hdmi is

1074
01:00:31,850 --> 01:00:34,150
probably a really good solution for this

1075
01:00:34,150 --> 01:00:37,130
we haven't developed an ESD I cause or

1076
01:00:37,130 --> 01:00:39,830
anything like that so I can't tell you

1077
01:00:39,830 --> 01:00:43,480
like that we're doing anything there but

1078
01:00:43,480 --> 01:00:46,550
somebody is interested again I like to

1079
01:00:46,550 --> 01:00:49,880
remove roadblocks and we would love to

1080
01:00:49,880 --> 01:00:54,050
have people work on that we have one

1081
01:00:54,050 --> 01:00:55,280
more question from the internet we have

1082
01:00:55,280 --> 01:00:57,500
two minutes left okay thank you the

1083
01:00:57,500 --> 01:01:00,140
question is not related to HTM I but do

1084
01:01:00,140 --> 01:01:03,200
FPGAs fpgas are programmed in a

1085
01:01:03,200 --> 01:01:04,940
high-level language like you know very

1086
01:01:04,940 --> 01:01:08,120
locker after simulations you compile so

1087
01:01:08,120 --> 01:01:10,070
every vendor has created its own

1088
01:01:10,070 --> 01:01:12,980
compiler for its own hardware are you

1089
01:01:12,980 --> 01:01:15,590
aware of a move to open source compilers

1090
01:01:15,590 --> 01:01:17,870
or two independent hardware do you see a

1091
01:01:17,870 --> 01:01:20,270
benefit and open source fpga compilers

1092
01:01:20,270 --> 01:01:28,310
um yes if anybody knows about fpgas you

1093
01:01:28,310 --> 01:01:30,290
know they use proprietary compilers and

1094
01:01:30,290 --> 01:01:33,020
these proprietary compilers are terrible

1095
01:01:33,020 --> 01:01:38,570
I a software engineer if I find a bug in

1096
01:01:38,570 --> 01:01:41,420
GCC I can fix the bug I've got those

1097
01:01:41,420 --> 01:01:43,490
skills and I can move forward or at

1098
01:01:43,490 --> 01:01:45,140
least figure out why the hell the bug

1099
01:01:45,140 --> 01:01:48,680
occurred that is not the case with fpga

1100
01:01:48,680 --> 01:01:51,590
compilers I'm the FPGA compiler we use

1101
01:01:51,590 --> 01:01:54,200
is non-deterministic you can give it a

1102
01:01:54,200 --> 01:01:56,360
the same source code and it produces

1103
01:01:56,360 --> 01:01:59,060
different output i'd love something to

1104
01:01:59,060 --> 01:02:02,030
reverse engineer why that occurs because

1105
01:02:02,030 --> 01:02:05,810
I've removed all the randomness from

1106
01:02:05,810 --> 01:02:08,690
random sources from it still manages the

1107
01:02:08,690 --> 01:02:11,990
door I'm really impressed so Clifford

1108
01:02:11,990 --> 01:02:16,430
has done an open source fpga tool chain

1109
01:02:16,430 --> 01:02:22,040
for the lettuce I some stick things he

1110
01:02:22,040 --> 01:02:26,440
said he's going to work on the atrix 7f

1111
01:02:26,440 --> 01:02:31,340
pjs please donate to him and help him i

1112
01:02:31,340 --> 01:02:35,870
would like if that exists i owe people

1113
01:02:35,870 --> 01:02:38,270
like a bazillion beers because the

1114
01:02:38,270 --> 01:02:40,580
sooner I can get off proprietary tool

1115
01:02:40,580 --> 01:02:44,240
chains the happier i will be and it will

1116
01:02:44,240 --> 01:02:47,360
make my hobby so much nicer so please

1117
01:02:47,360 --> 01:02:50,180
help him and do give Tim a big round of

1118
01:02:50,180 --> 01:02:50,680
applause

1119
01:02:50,680 --> 01:02:56,210
[Applause]

1120
01:02:56,210 --> 01:03:02,909
[Music]

1121
01:03:05,240 --> 01:03:07,299
you

1122
01:03:10,070 --> 01:03:20,300
[Music]

