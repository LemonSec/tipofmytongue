1
00:00:01,700 --> 00:00:19,480
[Music]

2
00:00:08,800 --> 00:00:22,570
<font color="#CCCCCC">ok good morning good morning welcome</font>

3
00:00:19,480 --> 00:00:26,950
again to our<font color="#E5E5E5"> second talk of the of the</font>

4
00:00:22,570 --> 00:00:29,619
day<font color="#E5E5E5"> our next speaker is a security</font>

5
00:00:26,950 --> 00:00:32,528
researcher at checkpoint<font color="#E5E5E5"> and he will be</font>

6
00:00:29,619 --> 00:00:35,649
talking to us today about exploiting PHP

7
00:00:32,529 --> 00:00:37,810
<font color="#CCCCCC">seven</font><font color="#E5E5E5"> and serialize mechanisms so please</font>

8
00:00:35,649 --> 00:00:39,090
give a big warm round of applause to

9
00:00:37,810 --> 00:00:45,329
<font color="#CCCCCC">unite</font>

10
00:00:39,090 --> 00:00:47,120
[Applause]

11
00:00:45,329 --> 00:00:48,420
<font color="#CCCCCC">ok</font>

12
00:00:47,120 --> 00:00:51,870
[Applause]

13
00:00:48,420 --> 00:00:53,519
hi and welcome to my talk<font color="#CCCCCC"> teaching the</font>

14
00:00:51,870 --> 00:00:55,769
new dog old tricks

15
00:00:53,519 --> 00:00:59,940
it's about PHP<font color="#E5E5E5"> seven-member internals</font>

16
00:00:55,769 --> 00:01:01,469
<font color="#E5E5E5">for security researchers and I must give</font>

17
00:00:59,940 --> 00:01:04,289
a disclaimer first this is not<font color="#CCCCCC"> to talk</font>

18
00:01:01,469 --> 00:01:06,630
about<font color="#E5E5E5"> PHP code is about PHP</font><font color="#CCCCCC"> seven</font>

19
00:01:04,289 --> 00:01:08,670
<font color="#E5E5E5">interpreter some</font><font color="#CCCCCC"> i hope you enjoy it</font>

20
00:01:06,630 --> 00:01:10,920
<font color="#CCCCCC">about me</font>

21
00:01:08,670 --> 00:01:13,320
my name is<font color="#CCCCCC"> an eye</font><font color="#E5E5E5"> has already said</font><font color="#CCCCCC"> i</font>

22
00:01:10,920 --> 00:01:15,450
work<font color="#E5E5E5"> at checkpoint</font><font color="#CCCCCC"> my team and I</font><font color="#E5E5E5"> work</font>

23
00:01:13,320 --> 00:01:18,600
about<font color="#CCCCCC"> many stuff and networks embedded</font>

24
00:01:15,450 --> 00:01:20,670
devices<font color="#CCCCCC"> expert sides</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> client-side</font>

25
00:01:18,600 --> 00:01:23,490
<font color="#E5E5E5">exploits but also</font><font color="#CCCCCC"> member corruptions</font><font color="#E5E5E5"> of</font>

26
00:01:20,670 --> 00:01:24,899
all sorts and today's agenda

27
00:01:23,490 --> 00:01:28,048
first we'll have a brief introduction

28
00:01:24,899 --> 00:01:29,759
about PHP and then we'll talk about PHP

29
00:01:28,049 --> 00:01:31,020
and<font color="#CCCCCC"> serialize mechanism</font>

30
00:01:29,759 --> 00:01:32,940
after that<font color="#E5E5E5"> we'll talk about the</font>

31
00:01:31,020 --> 00:01:36,449
implementation of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> system the</font>

32
00:01:32,940 --> 00:01:38,069
value system of in PHP<font color="#CCCCCC"> seven</font><font color="#E5E5E5"> now gaining</font>

33
00:01:36,450 --> 00:01:39,750
this knowledge of uncivilized and<font color="#CCCCCC"> the</font>

34
00:01:38,069 --> 00:01:42,209
<font color="#CCCCCC">civil system will see some bugs and</font>

35
00:01:39,750 --> 00:01:44,640
vulnerabilities<font color="#E5E5E5"> after that we'll discuss</font>

36
00:01:42,209 --> 00:01:47,069
the internals of the alligator in PHP<font color="#CCCCCC"> 7</font>

37
00:01:44,640 --> 00:01:49,289
<font color="#E5E5E5">it's an alligator and using our</font>

38
00:01:47,069 --> 00:01:51,000
knowledge of the<font color="#E5E5E5"> alligator and we can</font>

39
00:01:49,289 --> 00:01:53,489
<font color="#E5E5E5">see how we can exploit the bugs and</font>

40
00:01:51,000 --> 00:01:55,920
<font color="#CCCCCC">right</font><font color="#E5E5E5"> remote code execution exploits</font>

41
00:01:53,489 --> 00:01:58,979
<font color="#E5E5E5">then we'll have</font><font color="#CCCCCC"> conclusions questions</font>

42
00:01:55,920 --> 00:02:03,450
etc<font color="#E5E5E5"> so let's begin</font>

43
00:01:58,979 --> 00:02:04,769
<font color="#CCCCCC">PHP</font><font color="#E5E5E5"> is the most used language in web</font>

44
00:02:03,450 --> 00:02:07,709
applications today<font color="#E5E5E5"> for writing</font>

45
00:02:04,769 --> 00:02:09,810
<font color="#E5E5E5">applications and basically</font><font color="#CCCCCC"> it's</font>

46
00:02:07,709 --> 00:02:12,060
<font color="#E5E5E5">server-side language and servers</font><font color="#CCCCCC"> rule</font>

47
00:02:09,810 --> 00:02:13,800
<font color="#E5E5E5">the world</font><font color="#CCCCCC"> our information on the data we</font>

48
00:02:12,060 --> 00:02:16,319
<font color="#E5E5E5">having applications is in the server</font>

49
00:02:13,800 --> 00:02:19,379
side so it's very interesting as a

50
00:02:16,319 --> 00:02:20,670
malicious attackers<font color="#CCCCCC"> is</font><font color="#E5E5E5"> want to get some</font>

51
00:02:19,379 --> 00:02:24,510
information protect the<font color="#CCCCCC"> server is</font>

52
00:02:20,670 --> 00:02:26,700
usually<font color="#E5E5E5"> and when</font><font color="#CCCCCC"> i said</font><font color="#E5E5E5"> it's the most</font>

53
00:02:24,510 --> 00:02:28,170
used language today<font color="#E5E5E5"> today the most</font>

54
00:02:26,700 --> 00:02:31,799
popular version of this language is

55
00:02:28,170 --> 00:02:34,679
version<font color="#CCCCCC"> 5</font><font color="#E5E5E5"> but unless here came up a new</font>

56
00:02:31,800 --> 00:02:36,090
version and it was released<font color="#E5E5E5"> a HP seven</font>

57
00:02:34,680 --> 00:02:39,420
<font color="#E5E5E5">and</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> what we're going to talk</font>

58
00:02:36,090 --> 00:02:40,769
about today<font color="#E5E5E5"> so it's the most simple one</font>

59
00:02:39,420 --> 00:02:43,140
of the most important languages today

60
00:02:40,769 --> 00:02:44,549
and what about the security of<font color="#E5E5E5"> PHP</font><font color="#CCCCCC"> and</font>

61
00:02:43,140 --> 00:02:47,488
<font color="#CCCCCC">PHP applications</font>

62
00:02:44,549 --> 00:02:49,980
<font color="#E5E5E5">well</font><font color="#CCCCCC"> like every popular hand</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> every</font>

63
00:02:47,489 --> 00:02:52,290
<font color="#CCCCCC">people are language has a</font>

64
00:02:49,980 --> 00:02:55,530
<font color="#CCCCCC">moment</font><font color="#E5E5E5"> is written into it or written by</font>

65
00:02:52,290 --> 00:02:57,390
it<font color="#E5E5E5"> so we know many members of fiscal</font>

66
00:02:55,530 --> 00:02:59,610
injection<font color="#CCCCCC"> in recent years</font><font color="#E5E5E5"> and excesses</font>

67
00:02:57,390 --> 00:03:01,529
<font color="#CCCCCC">these are high-level vulnerabilities and</font>

68
00:02:59,610 --> 00:03:03,750
it depends on the code you're writing to

69
00:03:01,530 --> 00:03:06,030
your web application<font color="#E5E5E5"> but they're also</font>

70
00:03:03,750 --> 00:03:07,560
<font color="#CCCCCC">member</font><font color="#E5E5E5"> corruptions how can you have</font>

71
00:03:06,030 --> 00:03:08,970
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> corruption</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> high-level i'm</font>

72
00:03:07,560 --> 00:03:11,010
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> ask well solve the</font>

73
00:03:08,970 --> 00:03:12,959
functionality of PHP is implemented in

74
00:03:11,010 --> 00:03:15,090
the interpreter itself which is

75
00:03:12,959 --> 00:03:16,829
returning to see and when you<font color="#E5E5E5"> passed</font>

76
00:03:15,090 --> 00:03:19,049
user input to this kind of functionality

77
00:03:16,829 --> 00:03:21,090
<font color="#E5E5E5">and you have bugs there you can get some</font>

78
00:03:19,049 --> 00:03:23,220
<font color="#CCCCCC">member corruptions the most notable</font>

79
00:03:21,090 --> 00:03:25,860
example for this is the answer<font color="#E5E5E5"> lies</font>

80
00:03:23,220 --> 00:03:28,590
function which has been exploited<font color="#CCCCCC"> many</font>

81
00:03:25,860 --> 00:03:30,060
times over the recent years<font color="#E5E5E5"> and this is</font>

82
00:03:28,590 --> 00:03:32,579
<font color="#E5E5E5">exactly the function</font><font color="#CCCCCC"> is going to talk</font>

83
00:03:30,060 --> 00:03:35,819
about today but in the new domain of<font color="#CCCCCC"> PHP</font>

84
00:03:32,579 --> 00:03:40,379
<font color="#CCCCCC">seven</font><font color="#E5E5E5"> so what about the history of</font><font color="#CCCCCC"> fun</font>

85
00:03:35,819 --> 00:03:42,599
serialize<font color="#E5E5E5"> of too many</font><font color="#CCCCCC"> cds</font><font color="#E5E5E5"> actually and</font>

86
00:03:40,379 --> 00:03:44,819
most of<font color="#CCCCCC"> cv</font><font color="#E5E5E5"> is this</font><font color="#CCCCCC"> vulnerability is</font><font color="#E5E5E5"> a</font>

87
00:03:42,599 --> 00:03:46,440
<font color="#CCCCCC">work cited</font><font color="#E5E5E5"> in object</font><font color="#CCCCCC"> injections so</font>

88
00:03:44,819 --> 00:03:48,720
properly oriented programming for heard

89
00:03:46,440 --> 00:03:51,989
of it<font color="#E5E5E5"> and this is a logical explanation</font>

90
00:03:48,720 --> 00:03:54,750
<font color="#E5E5E5">it depends on the application that a</font>

91
00:03:51,989 --> 00:03:57,870
<font color="#CCCCCC">will is used how this application</font><font color="#E5E5E5"> to PHP</font>

92
00:03:54,750 --> 00:04:00,000
applications written<font color="#E5E5E5"> but also have been</font>

93
00:03:57,870 --> 00:04:01,500
<font color="#E5E5E5">our corruptions</font><font color="#CCCCCC"> and are exceptions does</font>

94
00:04:00,000 --> 00:04:03,630
not depend on the application<font color="#E5E5E5"> member</font>

95
00:04:01,500 --> 00:04:06,030
corruption<font color="#E5E5E5"> expectation depends only on</font>

96
00:04:03,630 --> 00:04:09,569
the PHP version<font color="#CCCCCC"> the second version</font><font color="#E5E5E5"> 5</font>

97
00:04:06,030 --> 00:04:11,700
version<font color="#CCCCCC"> 7 and 4</font><font color="#E5E5E5"> memory corruption</font><font color="#CCCCCC"> xin</font>

98
00:04:09,569 --> 00:04:15,690
<font color="#E5E5E5">php5 there was a generic exploit</font>

99
00:04:11,700 --> 00:04:20,250
developed by ionic<font color="#CCCCCC"> Stefan answer and it</font>

100
00:04:15,690 --> 00:04:23,490
was<font color="#CCCCCC"> describing Blackett 2010 and this</font>

101
00:04:20,250 --> 00:04:26,550
<font color="#CCCCCC">exploit could basically work on every</font>

102
00:04:23,490 --> 00:04:29,910
php5<font color="#E5E5E5"> memory corruption answer is no</font>

103
00:04:26,550 --> 00:04:31,650
corruption<font color="#E5E5E5"> you had so as</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> said it's a</font>

104
00:04:29,910 --> 00:04:36,240
very<font color="#E5E5E5"> all problem but here is an example</font>

105
00:04:31,650 --> 00:04:37,560
from<font color="#E5E5E5"> and this year on</font><font color="#CCCCCC"> july</font><font color="#E5E5E5"> this small</font>

106
00:04:36,240 --> 00:04:41,490
<font color="#E5E5E5">website that don't know if you're</font>

107
00:04:37,560 --> 00:04:43,220
familiar<font color="#E5E5E5"> fit open the back</font><font color="#CCCCCC"> county and</font>

108
00:04:41,490 --> 00:04:46,790
this<font color="#CCCCCC"> bug</font><font color="#E5E5E5"> bounty and</font>

109
00:04:43,220 --> 00:04:49,250
<font color="#CCCCCC">attracted</font><font color="#E5E5E5"> the attention of a company</font>

110
00:04:46,790 --> 00:04:52,130
called even<font color="#CCCCCC"> I'd</font><font color="#E5E5E5"> they looked at the</font><font color="#CCCCCC"> API</font>

111
00:04:49,250 --> 00:04:54,260
and found this<font color="#CCCCCC"> API call a post request</font>

112
00:04:52,130 --> 00:04:56,150
<font color="#E5E5E5">and you can see</font><font color="#CCCCCC"> cook here and</font><font color="#E5E5E5"> this</font>

113
00:04:54,260 --> 00:04:58,520
cookie has a very interesting format

114
00:04:56,150 --> 00:05:00,469
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is the front of</font><font color="#CCCCCC"> fun serialize</font><font color="#E5E5E5"> and</font>

115
00:04:58,520 --> 00:05:02,180
of<font color="#E5E5E5"> course when you send the request to</font>

116
00:05:00,470 --> 00:05:05,510
get a response<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you see this arrow</font>

117
00:05:02,180 --> 00:05:07,730
actually process<font color="#E5E5E5"> this cookie</font><font color="#CCCCCC"> so we have</font>

118
00:05:05,510 --> 00:05:09,800
a vulnerable and serialize<font color="#E5E5E5"> right there</font>

119
00:05:07,730 --> 00:05:12,920
and what they did the<font color="#CCCCCC"> fuzz and</font><font color="#E5E5E5"> serialize</font>

120
00:05:09,800 --> 00:05:15,020
and version<font color="#CCCCCC"> 5 this</font><font color="#E5E5E5"> in this instance and</font>

121
00:05:12,920 --> 00:05:15,830
found the vulnerability<font color="#CCCCCC"> exploited</font><font color="#E5E5E5"> it got</font>

122
00:05:15,020 --> 00:05:18,590
the<font color="#E5E5E5"> bounty</font>

123
00:05:15,830 --> 00:05:21,200
so what about PHP 7 i'm talking about

124
00:05:18,590 --> 00:05:23,539
<font color="#CCCCCC">all-time well it's a new release of the</font>

125
00:05:21,200 --> 00:05:26,810
language it was released just a year ago

126
00:05:23,540 --> 00:05:28,520
and they<font color="#E5E5E5"> kinda re-implemented everything</font>

127
00:05:26,810 --> 00:05:30,110
for performance so they<font color="#CCCCCC"> are implemented</font>

128
00:05:28,520 --> 00:05:31,130
the value system they have we

129
00:05:30,110 --> 00:05:34,340
implemented the memory<font color="#E5E5E5"> location</font>

130
00:05:31,130 --> 00:05:37,790
<font color="#E5E5E5">mechanisms and for this reason the</font>

131
00:05:34,340 --> 00:05:38,989
exploitation<font color="#E5E5E5"> technique of the memory</font>

132
00:05:37,790 --> 00:05:42,050
corruption<font color="#CCCCCC"> does not work anymore</font>

133
00:05:38,990 --> 00:05:43,730
<font color="#CCCCCC">expectation of</font><font color="#E5E5E5"> corruptions depend</font>

134
00:05:42,050 --> 00:05:44,750
heavily on the memory layout and when

135
00:05:43,730 --> 00:05:48,470
you change all of that

136
00:05:44,750 --> 00:05:50,330
nothing<font color="#E5E5E5"> works again but still we have</font>

137
00:05:48,470 --> 00:05:52,280
the answer lies functionality in PHP

138
00:05:50,330 --> 00:05:55,010
<font color="#CCCCCC">seven because you have some sort of</font>

139
00:05:52,280 --> 00:05:57,380
backward compatibility and there have

140
00:05:55,010 --> 00:05:59,750
been some<font color="#E5E5E5"> civvies object</font><font color="#CCCCCC"> injections to</font>

141
00:05:57,380 --> 00:06:01,460
<font color="#E5E5E5">works being purely logical but the</font>

142
00:05:59,750 --> 00:06:02,750
memory corruption<font color="#CCCCCC"> while still there you</font>

143
00:06:01,460 --> 00:06:05,810
can still find the reception

144
00:06:02,750 --> 00:06:07,940
vulnerabilities in<font color="#CCCCCC"> and</font><font color="#E5E5E5"> serialize you</font>

145
00:06:05,810 --> 00:06:13,430
don't have any remote exploits until<font color="#E5E5E5"> I</font>

146
00:06:07,940 --> 00:06:16,700
<font color="#E5E5E5">this talk</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> less</font><font color="#CCCCCC"> yeah thnkx for me</font><font color="#E5E5E5"> so</font>

147
00:06:13,430 --> 00:06:20,210
let's<font color="#CCCCCC"> talk about them</font><font color="#E5E5E5"> serialize and</font><font color="#CCCCCC"> then</font>

148
00:06:16,700 --> 00:06:21,289
serialize<font color="#E5E5E5"> first we have to have to make</font>

149
00:06:20,210 --> 00:06:22,849
something clear you should say

150
00:06:21,290 --> 00:06:24,860
<font color="#CCCCCC">deserialize</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> sterilized is</font>

151
00:06:22,850 --> 00:06:26,450
grammatically incorrect<font color="#E5E5E5"> and if it bugs</font>

152
00:06:24,860 --> 00:06:28,490
you well that's how it's<font color="#CCCCCC"> gonna be</font><font color="#E5E5E5"> for</font>

153
00:06:26,450 --> 00:06:32,270
<font color="#CCCCCC">the rest of this talk so I'm sorry but</font>

154
00:06:28,490 --> 00:06:34,550
<font color="#CCCCCC">PHP</font><font color="#E5E5E5"> being PHP we can go on and this is</font>

155
00:06:32,270 --> 00:06:37,880
the documentation of the<font color="#CCCCCC"> serialize an</font>

156
00:06:34,550 --> 00:06:40,070
<font color="#CCCCCC">unserious</font><font color="#E5E5E5"> functionality in PHP basically</font>

157
00:06:37,880 --> 00:06:41,780
what serialize does it<font color="#E5E5E5"> it takes values</font>

158
00:06:40,070 --> 00:06:44,900
and<font color="#E5E5E5"> convert them to string that you can</font>

159
00:06:41,780 --> 00:06:47,270
<font color="#CCCCCC">a store and retrieve later and answer</font>

160
00:06:44,900 --> 00:06:49,310
lies is the reverse operation so you get

161
00:06:47,270 --> 00:06:51,890
a string that in a specific format<font color="#E5E5E5"> of</font>

162
00:06:49,310 --> 00:06:52,960
<font color="#CCCCCC">uncivilized</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> converted</font><font color="#E5E5E5"> back into a</font>

163
00:06:51,890 --> 00:06:56,199
<font color="#E5E5E5">volume</font>

164
00:06:52,960 --> 00:06:57,758
<font color="#E5E5E5">this is very simple</font><font color="#CCCCCC"> you would say but</font>

165
00:06:56,199 --> 00:07:00,160
there have been<font color="#E5E5E5"> too many vulnerabilities</font>

166
00:06:57,759 --> 00:07:02,020
<font color="#E5E5E5">there and</font><font color="#CCCCCC"> you'll see exactly why</font><font color="#E5E5E5"> so</font>

167
00:07:00,160 --> 00:07:04,810
let's have an example of serialization

168
00:07:02,020 --> 00:07:07,240
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> assume we want to serialize this nice</font>

169
00:07:04,810 --> 00:07:09,699
array that has another right inside of

170
00:07:07,240 --> 00:07:11,949
it and so on and<font color="#E5E5E5"> we'll go</font><font color="#CCCCCC"> step-by-step</font>

171
00:07:09,699 --> 00:07:13,870
<font color="#E5E5E5">and</font><font color="#CCCCCC"> sterilize</font><font color="#E5E5E5"> it to the</font><font color="#CCCCCC"> serial it to</font>

172
00:07:11,949 --> 00:07:16,060
answer lies<font color="#CCCCCC"> formats</font><font color="#E5E5E5"> so first</font><font color="#CCCCCC"> was</font>

173
00:07:13,870 --> 00:07:18,220
<font color="#CCCCCC">sterilizing an array with</font><font color="#E5E5E5"> four elements</font>

174
00:07:16,060 --> 00:07:21,610
<font color="#CCCCCC">so as</font><font color="#E5E5E5"> you can see down below we have the</font>

175
00:07:18,220 --> 00:07:27,160
string and it's a column for a<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a</font>

176
00:07:21,610 --> 00:07:29,050
<font color="#CCCCCC">Colin</font><font color="#E5E5E5"> 444 values and in PHP every array</font>

177
00:07:27,160 --> 00:07:32,650
is actually a hash table or a dictionary

178
00:07:29,050 --> 00:07:35,050
<font color="#E5E5E5">so it's a key-value store</font><font color="#CCCCCC"> but when you</font>

179
00:07:32,650 --> 00:07:37,989
have an array<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> the keys are implicit</font>

180
00:07:35,050 --> 00:07:39,520
<font color="#E5E5E5">the kids are just</font><font color="#CCCCCC"> running</font><font color="#E5E5E5"> index running</font>

181
00:07:37,990 --> 00:07:42,340
index and<font color="#CCCCCC"> it's implicit so we're</font>

182
00:07:39,520 --> 00:07:45,880
serializing the first entry<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> integer</font>

183
00:07:42,340 --> 00:07:46,690
<font color="#CCCCCC">0 is key so</font><font color="#E5E5E5"> we have</font><font color="#CCCCCC"> icons</font><font color="#E5E5E5"> 0 and now for</font>

184
00:07:45,880 --> 00:07:50,349
the<font color="#CCCCCC"> value</font>

185
00:07:46,690 --> 00:07:55,000
next<font color="#E5E5E5"> we're serializing integer</font><font color="#CCCCCC"> 14</font><font color="#E5E5E5"> key</font>

186
00:07:50,349 --> 00:07:57,789
<font color="#E5E5E5">and integer</font><font color="#CCCCCC"> 1 free 7</font><font color="#E5E5E5"> as the value and</font>

187
00:07:55,000 --> 00:08:01,060
then worse<font color="#E5E5E5"> serializing a string so we</font>

188
00:07:57,789 --> 00:08:03,820
have integer to as the key and<font color="#E5E5E5"> string so</font>

189
00:08:01,060 --> 00:08:05,560
we have<font color="#CCCCCC"> s4 string Colin 545 characters</font>

190
00:08:03,820 --> 00:08:07,599
<font color="#E5E5E5">then we have</font><font color="#CCCCCC"> apple this is the value of</font>

191
00:08:05,560 --> 00:08:09,130
the string<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> for serializing</font>

192
00:08:07,599 --> 00:08:12,490
<font color="#E5E5E5">another array so we have the implicit</font>

193
00:08:09,130 --> 00:08:15,759
<font color="#CCCCCC">key integer free and the value a column</font>

194
00:08:12,490 --> 00:08:16,780
free for free values<font color="#E5E5E5"> in this and</font>

195
00:08:15,759 --> 00:08:19,630
necessary

196
00:08:16,780 --> 00:08:21,489
next we have an explicit key string a so

197
00:08:19,630 --> 00:08:23,889
we have<font color="#CCCCCC"> asked for string column 141</font>

198
00:08:21,490 --> 00:08:25,780
character<font color="#CCCCCC"> a</font><font color="#E5E5E5"> for the value of the string</font>

199
00:08:23,889 --> 00:08:28,150
<font color="#E5E5E5">and this is the key and the value is</font>

200
00:08:25,780 --> 00:08:30,340
integer<font color="#CCCCCC"> one next year</font><font color="#E5E5E5"> serializing a</font>

201
00:08:28,150 --> 00:08:32,649
class and object<font color="#E5E5E5"> actually so we have</font>

202
00:08:30,340 --> 00:08:35,559
gone back to<font color="#E5E5E5"> a place it</font><font color="#CCCCCC"> keys so it's</font>

203
00:08:32,649 --> 00:08:38,828
<font color="#E5E5E5">integer</font><font color="#CCCCCC"> 0 as an implicit key</font><font color="#E5E5E5"> then we</font>

204
00:08:35,559 --> 00:08:41,199
have object<font color="#E5E5E5"> at the classroom has free</font><font color="#CCCCCC"> 8</font>

205
00:08:38,828 --> 00:08:43,989
<font color="#CCCCCC">Carter</font><font color="#E5E5E5"> so it's</font><font color="#CCCCCC"> colin eight Colin the</font>

206
00:08:41,200 --> 00:08:46,540
class<font color="#E5E5E5"> name stdclass then we have</font><font color="#CCCCCC"> Colin</font>

207
00:08:43,990 --> 00:08:48,820
<font color="#CCCCCC">00 is the number of properties in this</font>

208
00:08:46,540 --> 00:08:52,510
object<font color="#CCCCCC"> 0 properties nothing in</font><font color="#E5E5E5"> there</font>

209
00:08:48,820 --> 00:08:55,209
<font color="#E5E5E5">curly brackets with empty and properties</font>

210
00:08:52,510 --> 00:08:57,730
then<font color="#CCCCCC"> we're and serializing</font><font color="#E5E5E5"> integer</font><font color="#CCCCCC"> one</font>

211
00:08:55,209 --> 00:08:59,170
is key and integers<font color="#E5E5E5"> 7 free one</font><font color="#CCCCCC"> has value</font>

212
00:08:57,730 --> 00:09:01,720
and<font color="#CCCCCC"> this was the process of</font>

213
00:08:59,170 --> 00:09:03,400
serialization<font color="#E5E5E5"> quite straightforward and</font>

214
00:09:01,720 --> 00:09:03,840
we have this nice format that we know

215
00:09:03,400 --> 00:09:05,520
about

216
00:09:03,840 --> 00:09:07,440
<font color="#E5E5E5">next I want to show example of an</font>

217
00:09:05,520 --> 00:09:09,300
serialization and this would be the

218
00:09:07,440 --> 00:09:12,480
exact reverse so it's<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be a bit</font>

219
00:09:09,300 --> 00:09:16,050
boring but<font color="#E5E5E5"> i want to show something here</font>

220
00:09:12,480 --> 00:09:17,880
<font color="#CCCCCC">PHP supports a feature called</font><font color="#E5E5E5"> references</font>

221
00:09:16,050 --> 00:09:20,609
and references means that during an

222
00:09:17,880 --> 00:09:22,350
serialization in the format<font color="#E5E5E5"> we can</font>

223
00:09:20,610 --> 00:09:24,120
specify instead of specifying<font color="#CCCCCC"> values</font>

224
00:09:22,350 --> 00:09:26,880
such as<font color="#E5E5E5"> integer</font><font color="#CCCCCC"> a string</font><font color="#E5E5E5"> we can specify</font>

225
00:09:24,120 --> 00:09:30,300
a reference<font color="#E5E5E5"> and this tells the PHP</font>

226
00:09:26,880 --> 00:09:33,120
<font color="#E5E5E5">mechanism go back see what was the</font><font color="#CCCCCC"> and</font>

227
00:09:30,300 --> 00:09:36,240
value<font color="#E5E5E5"> we just</font><font color="#CCCCCC"> parts</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> yours and</font><font color="#CCCCCC"> i</font>

228
00:09:33,120 --> 00:09:38,370
want a copy of this value or a reference

229
00:09:36,240 --> 00:09:40,410
to this value and<font color="#CCCCCC"> you want to</font><font color="#E5E5E5"> support</font>

230
00:09:38,370 --> 00:09:42,390
this feature during an serialization

231
00:09:40,410 --> 00:09:44,219
<font color="#E5E5E5">every value that is part by the</font>

232
00:09:42,390 --> 00:09:45,150
<font color="#CCCCCC">Assyrians mechanism and is kept a</font>

233
00:09:44,220 --> 00:09:47,130
reference to

234
00:09:45,150 --> 00:09:49,170
so we have this array called of our<font color="#CCCCCC"> hair</font>

235
00:09:47,130 --> 00:09:51,420
<font color="#CCCCCC">a</font><font color="#E5E5E5"> and this in this area we have pointers</font>

236
00:09:49,170 --> 00:09:52,110
to every<font color="#E5E5E5"> parsed value and let's see how</font>

237
00:09:51,420 --> 00:09:53,819
it's done

238
00:09:52,110 --> 00:09:56,310
so first<font color="#E5E5E5"> we're answer izing an array</font>

239
00:09:53,820 --> 00:09:58,200
with<font color="#E5E5E5"> four elements so you see in the</font>

240
00:09:56,310 --> 00:09:59,880
<font color="#E5E5E5">marsh area and it's a one based area you</font>

241
00:09:58,200 --> 00:10:03,660
have<font color="#CCCCCC"> pointed to</font><font color="#E5E5E5"> this array we just</font>

242
00:09:59,880 --> 00:10:06,450
instantiated<font color="#E5E5E5"> next we have a key</font><font color="#CCCCCC"> integer</font>

243
00:10:03,660 --> 00:10:08,430
<font color="#CCCCCC">0 and value now and we can see that the</font>

244
00:10:06,450 --> 00:10:11,760
<font color="#E5E5E5">second pointer points to the now we just</font>

245
00:10:08,430 --> 00:10:14,520
<font color="#CCCCCC">parsed next we have</font><font color="#E5E5E5"> integer</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> key</font>

246
00:10:11,760 --> 00:10:17,160
<font color="#CCCCCC">industry</font><font color="#E5E5E5"> 1437 as a value and the third</font>

247
00:10:14,520 --> 00:10:19,410
pointer points<font color="#E5E5E5"> to one free</font><font color="#CCCCCC"> seven then we</font>

248
00:10:17,160 --> 00:10:21,900
have<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> string</font><font color="#CCCCCC"> Apple</font><font color="#E5E5E5"> as the value</font>

249
00:10:19,410 --> 00:10:23,430
and the<font color="#E5E5E5"> first pointer for pointer points</font>

250
00:10:21,900 --> 00:10:27,090
to this value

251
00:10:23,430 --> 00:10:29,550
next we have<font color="#E5E5E5"> at this array know this is</font>

252
00:10:27,090 --> 00:10:31,440
an<font color="#CCCCCC"> internal</font><font color="#E5E5E5"> ready but the</font><font color="#CCCCCC"> bar hash array</font>

253
00:10:29,550 --> 00:10:33,180
<font color="#E5E5E5">is a flat area so even though we have</font>

254
00:10:31,440 --> 00:10:36,180
some nesting here we have<font color="#E5E5E5"> already within</font>

255
00:10:33,180 --> 00:10:40,020
an array in the value<font color="#CCCCCC"> values arts</font><font color="#E5E5E5"> nested</font>

256
00:10:36,180 --> 00:10:42,060
<font color="#E5E5E5">the</font><font color="#CCCCCC"> bar hash</font><font color="#E5E5E5"> array is flat and the</font><font color="#CCCCCC"> fifth</font>

257
00:10:40,020 --> 00:10:44,939
pointer points<font color="#CCCCCC"> to</font><font color="#E5E5E5"> RA next</font><font color="#CCCCCC"> year and</font>

258
00:10:42,060 --> 00:10:46,800
<font color="#E5E5E5">serializing</font><font color="#CCCCCC"> the key</font><font color="#E5E5E5"> a and the value</font><font color="#CCCCCC"> 1</font>

259
00:10:44,940 --> 00:10:49,410
<font color="#E5E5E5">and we have another pointer to the value</font>

260
00:10:46,800 --> 00:10:52,410
then<font color="#CCCCCC"> we're insatiate instantiating the</font>

261
00:10:49,410 --> 00:10:54,930
<font color="#E5E5E5">SD</font><font color="#CCCCCC"> object</font><font color="#E5E5E5"> so we have another object</font>

262
00:10:52,410 --> 00:10:57,420
there and<font color="#CCCCCC"> a7 pointer points to this</font>

263
00:10:54,930 --> 00:10:59,099
<font color="#E5E5E5">instantiated object and now something</font>

264
00:10:57,420 --> 00:11:01,650
interesting is going to happen

265
00:10:59,100 --> 00:11:05,100
<font color="#E5E5E5">we're</font><font color="#CCCCCC"> uncie realizing a reference to the</font>

266
00:11:01,650 --> 00:11:07,140
third value<font color="#E5E5E5"> so what would happen here</font><font color="#CCCCCC"> at</font>

267
00:11:05,100 --> 00:11:09,870
<font color="#E5E5E5">PHP</font><font color="#CCCCCC"> the answer lies functionality</font><font color="#E5E5E5"> will</font>

268
00:11:07,140 --> 00:11:12,270
go and check the<font color="#E5E5E5"> bar Harry go to the</font>

269
00:11:09,870 --> 00:11:15,070
third value<font color="#E5E5E5"> the third value here is a</font>

270
00:11:12,270 --> 00:11:18,340
pointer to the integer<font color="#CCCCCC"> 1 free seven</font>

271
00:11:15,070 --> 00:11:20,350
<font color="#E5E5E5">and now we need to create a reference to</font>

272
00:11:18,340 --> 00:11:22,240
this value so this is what we do we can

273
00:11:20,350 --> 00:11:24,760
serialize this value and we create a

274
00:11:22,240 --> 00:11:28,240
reference to a previously<font color="#CCCCCC"> passed</font><font color="#E5E5E5"> value</font>

275
00:11:24,760 --> 00:11:30,610
so this how<font color="#E5E5E5"> PHP supports this feature of</font>

276
00:11:28,240 --> 00:11:32,980
references of<font color="#CCCCCC"> backward references and</font>

277
00:11:30,610 --> 00:11:35,050
this mechanism<font color="#CCCCCC"> this feature cause</font><font color="#E5E5E5"> many</font>

278
00:11:32,980 --> 00:11:37,960
bugs in the past because as you can see

279
00:11:35,050 --> 00:11:40,209
we keep<font color="#E5E5E5"> pointer to stuff we maybe need</font>

280
00:11:37,960 --> 00:11:41,710
maybe we don't need it again and and

281
00:11:40,210 --> 00:11:45,580
<font color="#E5E5E5">there has been some confusion over the</font>

282
00:11:41,710 --> 00:11:47,620
years<font color="#E5E5E5"> if</font><font color="#CCCCCC"> you got lost in this</font>

283
00:11:45,580 --> 00:11:49,810
complicated<font color="#E5E5E5"> format there are some points</font>

284
00:11:47,620 --> 00:11:51,850
<font color="#CCCCCC">i</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> you to remember</font><font color="#E5E5E5"> so first it's a</font>

285
00:11:49,810 --> 00:11:54,160
complicated<font color="#CCCCCC"> format ok</font>

286
00:11:51,850 --> 00:11:57,670
yes obviously<font color="#CCCCCC"> in</font><font color="#E5E5E5"> complicated formats</font>

287
00:11:54,160 --> 00:11:59,380
leads<font color="#CCCCCC"> to bugs and the</font><font color="#E5E5E5"> bugs and this</font>

288
00:11:57,670 --> 00:12:01,780
we're<font color="#CCCCCC"> going to see it soon</font>

289
00:11:59,380 --> 00:12:03,610
we have many many ways to control

290
00:12:01,780 --> 00:12:05,770
<font color="#CCCCCC">applications right</font><font color="#E5E5E5"> where</font><font color="#CCCCCC"> instead of</font>

291
00:12:03,610 --> 00:12:08,560
<font color="#CCCCCC">shooting objects are instantiated where</font>

292
00:12:05,770 --> 00:12:10,569
<font color="#E5E5E5">and serializing strings of various lamps</font>

293
00:12:08,560 --> 00:12:12,579
<font color="#CCCCCC">we</font><font color="#E5E5E5"> ran serializing hash tables of</font>

294
00:12:10,570 --> 00:12:15,640
various<font color="#CCCCCC"> lands so we have lots of control</font>

295
00:12:12,580 --> 00:12:18,310
as users and we keep these references

296
00:12:15,640 --> 00:12:20,140
<font color="#CCCCCC">things so we keep</font><font color="#E5E5E5"> references backwards</font>

297
00:12:18,310 --> 00:12:22,719
two things we answer lies in the past

298
00:12:20,140 --> 00:12:24,670
and we can reuse them so in this case we

299
00:12:22,720 --> 00:12:27,460
have some use after free we<font color="#E5E5E5"> managed to</font>

300
00:12:24,670 --> 00:12:29,319
free some object in some magical way<font color="#E5E5E5"> we</font>

301
00:12:27,460 --> 00:12:32,410
still have<font color="#E5E5E5"> pointer and can go forward as</font>

302
00:12:29,320 --> 00:12:35,050
exploiters<font color="#E5E5E5"> so now we</font><font color="#CCCCCC"> talk about</font><font color="#E5E5E5"> the</font>

303
00:12:32,410 --> 00:12:37,240
<font color="#CCCCCC">civil system in PHP</font><font color="#E5E5E5"> now zeros are</font>

304
00:12:35,050 --> 00:12:40,630
basically<font color="#E5E5E5"> values</font><font color="#CCCCCC"> ok this is how the PHP</font>

305
00:12:37,240 --> 00:12:42,250
interpreter calls<font color="#E5E5E5"> values our</font><font color="#CCCCCC"> holes</font>

306
00:12:40,630 --> 00:12:44,080
variables this is a PHP variable<font color="#CCCCCC"> I'm</font>

307
00:12:42,250 --> 00:12:46,450
sorry that<font color="#E5E5E5"> we have PHP to stop but</font>

308
00:12:44,080 --> 00:12:50,620
<font color="#CCCCCC">they're there</font><font color="#E5E5E5"> won't be much of it I</font>

309
00:12:46,450 --> 00:12:52,150
named<font color="#E5E5E5"> any soon so anytime soon and as</font>

310
00:12:50,620 --> 00:12:54,550
<font color="#CCCCCC">high-level</font><font color="#E5E5E5"> language we have</font><font color="#CCCCCC"> a couple of</font>

311
00:12:52,150 --> 00:12:56,590
features for our variables<font color="#E5E5E5"> one we have</font>

312
00:12:54,550 --> 00:12:59,500
automatic memory management or garbage

313
00:12:56,590 --> 00:13:03,610
collection and we have this<font color="#E5E5E5"> references</font>

314
00:12:59,500 --> 00:13:05,830
<font color="#E5E5E5">reference when y is a reference to X it</font>

315
00:13:03,610 --> 00:13:07,450
means that the value of variable Y

316
00:13:05,830 --> 00:13:10,540
changes when the value of verbal

317
00:13:07,450 --> 00:13:12,850
exchanges and<font color="#CCCCCC"> vice</font><font color="#E5E5E5"> versa so they both</font>

318
00:13:10,540 --> 00:13:16,870
basically<font color="#CCCCCC"> our</font><font color="#E5E5E5"> variables holding the same</font>

319
00:13:12,850 --> 00:13:19,420
value and this is how these evils were

320
00:13:16,870 --> 00:13:21,340
implemented<font color="#CCCCCC"> and php5 we</font><font color="#E5E5E5"> had this struct</font>

321
00:13:19,420 --> 00:13:23,829
<font color="#E5E5E5">called</font><font color="#CCCCCC"> the abstract</font><font color="#E5E5E5"> it was on the hip</font>

322
00:13:21,340 --> 00:13:26,680
it was<font color="#E5E5E5"> reference counted and</font><font color="#CCCCCC"> every 0 was</font>

323
00:13:23,830 --> 00:13:28,600
basically a pointer to this struct and

324
00:13:26,680 --> 00:13:31,180
<font color="#CCCCCC">every time</font><font color="#E5E5E5"> we created</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> new</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> we have</font>

325
00:13:28,600 --> 00:13:34,899
to create<font color="#E5E5E5"> to allocate destruct on the</font>

326
00:13:31,180 --> 00:13:37,120
hip and initialize it the memory

327
00:13:34,899 --> 00:13:39,190
management was quite obvious we have

328
00:13:37,120 --> 00:13:41,709
reference count and we have memory<font color="#CCCCCC"> did a</font>

329
00:13:39,190 --> 00:13:43,690
cycle detection so it was a very simple

330
00:13:41,709 --> 00:13:46,719
algorithm which most people know about

331
00:13:43,690 --> 00:13:48,790
and to make references to make two

332
00:13:46,720 --> 00:13:50,410
variables<font color="#E5E5E5"> point to the same</font><font color="#CCCCCC"> values</font><font color="#E5E5E5"> just</font>

333
00:13:48,790 --> 00:13:52,839
<font color="#E5E5E5">two pointers pointing to the same</font>

334
00:13:50,410 --> 00:13:57,699
structure on the<font color="#E5E5E5"> hip everything was very</font>

335
00:13:52,839 --> 00:13:59,860
simple very nice but it was slow so when

336
00:13:57,699 --> 00:14:02,859
implementing PHP<font color="#E5E5E5"> seven and</font><font color="#CCCCCC"> i have been</font>

337
00:13:59,860 --> 00:14:05,680
<font color="#E5E5E5">some motivation</font><font color="#CCCCCC"> motivations to change it</font>

338
00:14:02,860 --> 00:14:08,259
and<font color="#E5E5E5"> what the implementers wanted</font><font color="#CCCCCC"> less</font>

339
00:14:05,680 --> 00:14:09,880
<font color="#E5E5E5">references now if</font><font color="#CCCCCC"> zero is a pointer</font>

340
00:14:08,259 --> 00:14:11,860
every time you need to reference value

341
00:14:09,880 --> 00:14:13,449
have to dereference the pointer which

342
00:14:11,860 --> 00:14:15,250
can be expensive

343
00:14:13,449 --> 00:14:17,139
also every time<font color="#CCCCCC"> you create</font><font color="#E5E5E5"> a new value</font>

344
00:14:15,250 --> 00:14:18,430
even if it's for a short time if you

345
00:14:17,139 --> 00:14:20,740
know exactly where it is we still have

346
00:14:18,430 --> 00:14:23,620
to make a location on the hip<font color="#E5E5E5"> which can</font>

347
00:14:20,740 --> 00:14:25,540
be expensive so they designed a system

348
00:14:23,620 --> 00:14:27,610
for embedding they said<font color="#CCCCCC"> okay I don't</font>

349
00:14:25,540 --> 00:14:29,199
<font color="#E5E5E5">suppose to be just on the</font><font color="#CCCCCC"> hippo want to</font>

350
00:14:27,610 --> 00:14:31,329
be able to embed them everywhere<font color="#CCCCCC"> I want</font>

351
00:14:29,199 --> 00:14:34,479
on the stack in other<font color="#CCCCCC"> struct and</font><font color="#E5E5E5"> so on</font>

352
00:14:31,329 --> 00:14:36,459
and<font color="#E5E5E5"> this is how the news evil system is</font>

353
00:14:34,480 --> 00:14:37,959
implemented we have this<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> struck but</font>

354
00:14:36,459 --> 00:14:41,529
now it's a bit different<font color="#E5E5E5"> it's simpler</font>

355
00:14:37,959 --> 00:14:44,199
<font color="#CCCCCC">zeros</font><font color="#E5E5E5"> are just distract and destruct</font>

356
00:14:41,529 --> 00:14:46,689
contains only value and type<font color="#CCCCCC"> so there's</font>

357
00:14:44,199 --> 00:14:50,380
no reference counting and we can put

358
00:14:46,689 --> 00:14:52,750
destruct wherever we want<font color="#E5E5E5"> and the value</font>

359
00:14:50,380 --> 00:14:54,939
of thing here<font color="#CCCCCC"> can be I</font><font color="#E5E5E5"> one of two things</font>

360
00:14:52,750 --> 00:14:57,459
it can be a primitive type for example a

361
00:14:54,939 --> 00:15:00,310
primitive<font color="#CCCCCC"> c-type</font><font color="#E5E5E5"> like integers or floats</font>

362
00:14:57,459 --> 00:15:02,469
and so on but<font color="#CCCCCC"> PHP</font><font color="#E5E5E5"> supports also strings</font>

363
00:15:00,310 --> 00:15:04,569
<font color="#E5E5E5">so if you want to support complex types</font>

364
00:15:02,470 --> 00:15:07,000
<font color="#CCCCCC">like streams or objects</font><font color="#E5E5E5"> this value would</font>

365
00:15:04,569 --> 00:15:09,339
be a pointer to a complex<font color="#CCCCCC"> strap</font><font color="#E5E5E5"> and</font>

366
00:15:07,000 --> 00:15:11,800
destruct will be on the hip

367
00:15:09,339 --> 00:15:13,660
<font color="#E5E5E5">ok so</font><font color="#CCCCCC"> this truck will not be on the</font>

368
00:15:11,800 --> 00:15:17,560
stack<font color="#E5E5E5"> and it will be</font><font color="#CCCCCC"> some around the hip</font>

369
00:15:13,660 --> 00:15:20,019
<font color="#E5E5E5">and it will also be reference counted so</font>

370
00:15:17,560 --> 00:15:22,660
here's an example this is an integer and

371
00:15:20,019 --> 00:15:25,449
<font color="#CCCCCC">in-memory we'll just have the value one</font>

372
00:15:22,660 --> 00:15:27,339
free<font color="#CCCCCC"> 7 and the type long</font>

373
00:15:25,449 --> 00:15:30,008
that's it we don't know where it is and

374
00:15:27,339 --> 00:15:33,670
it's quite simple

375
00:15:30,009 --> 00:15:35,889
now to support reference counting<font color="#E5E5E5"> now</font>

376
00:15:33,670 --> 00:15:37,959
it's the responsibility of whoever

377
00:15:35,889 --> 00:15:40,089
initialize<font color="#CCCCCC"> it</font><font color="#E5E5E5"> initialized to</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> right if</font>

378
00:15:37,959 --> 00:15:42,130
the<font color="#CCCCCC"> Civil</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> instruct</font><font color="#E5E5E5"> whoever initials</font>

379
00:15:40,089 --> 00:15:45,700
destruct<font color="#E5E5E5"> needs to clear it up</font>

380
00:15:42,130 --> 00:15:47,380
but there is a one complication here<font color="#E5E5E5"> if</font>

381
00:15:45,700 --> 00:15:49,120
the<font color="#E5E5E5"> values is a primitive value</font>

382
00:15:47,380 --> 00:15:51,280
everything is good but if<font color="#E5E5E5"> it's a pointer</font>

383
00:15:49,120 --> 00:15:52,780
to another struct<font color="#E5E5E5"> this structure</font>

384
00:15:51,280 --> 00:15:55,360
<font color="#CCCCCC">dereference counted</font><font color="#E5E5E5"> and when its</font>

385
00:15:52,780 --> 00:15:57,459
reference<font color="#E5E5E5"> and this is how the garbage</font>

386
00:15:55,360 --> 00:15:59,740
collection works<font color="#CCCCCC"> it</font><font color="#E5E5E5"> checks the value</font>

387
00:15:57,460 --> 00:16:01,540
pointed a<font color="#E5E5E5"> bite</font><font color="#CCCCCC"> of evil and</font><font color="#E5E5E5"> has also</font>

388
00:15:59,740 --> 00:16:03,430
reference count and garbage collection

389
00:16:01,540 --> 00:16:05,260
<font color="#CCCCCC">now let's see an example</font>

390
00:16:03,430 --> 00:16:07,900
<font color="#CCCCCC">ok so this is the string structures I</font>

391
00:16:05,260 --> 00:16:10,030
<font color="#E5E5E5">said it's a complex type so this truck</font>

392
00:16:07,900 --> 00:16:12,670
is on the hip and<font color="#CCCCCC"> is pointed by</font><font color="#E5E5E5"> as evil</font>

393
00:16:10,030 --> 00:16:15,100
as you can see the first field

394
00:16:12,670 --> 00:16:17,170
<font color="#CCCCCC">instructor is the reference count and</font>

395
00:16:15,100 --> 00:16:21,460
the<font color="#E5E5E5"> last field is a flexible</font><font color="#CCCCCC"> Raymond and</font>

396
00:16:17,170 --> 00:16:24,010
<font color="#E5E5E5">remember right</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> remember</font><font color="#CCCCCC"> so and when</font><font color="#E5E5E5"> in</font>

397
00:16:21,460 --> 00:16:26,290
it when allocating<font color="#E5E5E5"> is a string we</font>

398
00:16:24,010 --> 00:16:28,750
allocate more data enough memory to

399
00:16:26,290 --> 00:16:32,620
store the string content itself and we

400
00:16:28,750 --> 00:16:33,760
<font color="#E5E5E5">access it via this field so this is what</font>

401
00:16:32,620 --> 00:16:37,630
it looks like<font color="#CCCCCC"> an alright when we are</font>

402
00:16:33,760 --> 00:16:40,090
initializing<font color="#CCCCCC"> and</font><font color="#E5E5E5"> and variable of type</font>

403
00:16:37,630 --> 00:16:42,220
string<font color="#E5E5E5"> then we have</font><font color="#CCCCCC"> this evil struct</font>

404
00:16:40,090 --> 00:16:45,430
<font color="#E5E5E5">it's of type string</font><font color="#CCCCCC"> we're allocating</font>

405
00:16:42,220 --> 00:16:47,170
<font color="#E5E5E5">presents string on the hip</font><font color="#CCCCCC"> we initialize</font>

406
00:16:45,430 --> 00:16:50,170
it with the<font color="#CCCCCC"> values</font><font color="#E5E5E5"> you can see we put</font>

407
00:16:47,170 --> 00:16:52,120
the value<font color="#CCCCCC"> Apple here and we just point</font>

408
00:16:50,170 --> 00:16:56,110
this evil to this string and<font color="#E5E5E5"> reference</font>

409
00:16:52,120 --> 00:17:00,610
count is one and this construct is on

410
00:16:56,110 --> 00:17:01,450
the hip<font color="#E5E5E5"> so how can we manage the</font>

411
00:17:00,610 --> 00:17:03,730
references

412
00:17:01,450 --> 00:17:06,760
how<font color="#CCCCCC"> do did the references feature was</font>

413
00:17:03,730 --> 00:17:10,689
implemented<font color="#E5E5E5"> this time we cannot just</font>

414
00:17:06,760 --> 00:17:12,550
make<font color="#E5E5E5"> 10.2 another because they may be in</font>

415
00:17:10,689 --> 00:17:14,920
different scopes one can be<font color="#E5E5E5"> instructed</font>

416
00:17:12,550 --> 00:17:19,089
the other can be on the stack and<font color="#CCCCCC"> and</font>

417
00:17:14,920 --> 00:17:22,720
they must be managed right<font color="#E5E5E5"> so there is a</font>

418
00:17:19,089 --> 00:17:25,958
solution here in PHP<font color="#E5E5E5"> d in implemented</font>

419
00:17:22,720 --> 00:17:27,970
and another type called references and

420
00:17:25,959 --> 00:17:29,650
it's easier to show than explain so i'll

421
00:17:27,970 --> 00:17:32,290
show how it works

422
00:17:29,650 --> 00:17:34,390
<font color="#E5E5E5">assume you have this variable</font><font color="#CCCCCC"> X which</font>

423
00:17:32,290 --> 00:17:37,930
has<font color="#CCCCCC"> 147</font><font color="#E5E5E5"> and now we have the variable</font><font color="#CCCCCC"> Y</font>

424
00:17:34,390 --> 00:17:39,160
which<font color="#E5E5E5"> is a reference to variable</font><font color="#CCCCCC"> X ok</font><font color="#E5E5E5"> so</font>

425
00:17:37,930 --> 00:17:43,480
we have it in memory and I want to make

426
00:17:39,160 --> 00:17:43,960
a reference to it so we initialize<font color="#CCCCCC"> and</font>

427
00:17:43,480 --> 00:17:45,940
<font color="#CCCCCC">you</font>

428
00:17:43,960 --> 00:17:47,740
<font color="#E5E5E5">struct</font><font color="#CCCCCC"> ok on the hip called the</font>

429
00:17:45,940 --> 00:17:49,930
reference and<font color="#CCCCCC"> distract has</font><font color="#E5E5E5"> two fields</font>

430
00:17:47,740 --> 00:17:52,030
the first<font color="#E5E5E5"> field is a reference count and</font>

431
00:17:49,930 --> 00:17:54,010
<font color="#E5E5E5">the second field is another is evil and</font>

432
00:17:52,030 --> 00:17:54,889
we initialize this<font color="#CCCCCC"> evo</font><font color="#E5E5E5"> value to be the</font>

433
00:17:54,010 --> 00:17:57,020
same as<font color="#CCCCCC"> a</font>

434
00:17:54,890 --> 00:18:00,230
<font color="#CCCCCC">so you can see it contains a copy of the</font>

435
00:17:57,020 --> 00:18:01,910
value then we<font color="#CCCCCC"> changed type of X to be a</font>

436
00:18:00,230 --> 00:18:03,530
reference<font color="#E5E5E5"> and now it points to</font><font color="#CCCCCC"> design</font>

437
00:18:01,910 --> 00:18:05,480
reference<font color="#E5E5E5"> and now we can initialize</font><font color="#CCCCCC"> y</font>

438
00:18:03,530 --> 00:18:07,550
<font color="#E5E5E5">and</font><font color="#CCCCCC"> y will be</font><font color="#E5E5E5"> the same so it also be a</font>

439
00:18:05,480 --> 00:18:10,190
reference to something on the tape<font color="#E5E5E5"> so we</font>

440
00:18:07,550 --> 00:18:13,460
moved the contents of<font color="#CCCCCC"> X to the hip and</font>

441
00:18:10,190 --> 00:18:15,320
now we can have the 20<font color="#CCCCCC"> is</font><font color="#E5E5E5"> x and y we</font>

442
00:18:13,460 --> 00:18:18,950
just pointers to the hip like previously

443
00:18:15,320 --> 00:18:20,659
<font color="#E5E5E5">the key things to remember about</font><font color="#CCCCCC"> the</font>

444
00:18:18,950 --> 00:18:22,220
<font color="#E5E5E5">evils is that they're designed for</font>

445
00:18:20,660 --> 00:18:25,610
embedding so they can be in many places

446
00:18:22,220 --> 00:18:27,620
which can cause some<font color="#CCCCCC"> bugs</font><font color="#E5E5E5"> the</font>

447
00:18:25,610 --> 00:18:29,780
motivations<font color="#CCCCCC"> are our goals</font><font color="#E5E5E5"> were achieved</font>

448
00:18:27,620 --> 00:18:32,899
is there less the references and less

449
00:18:29,780 --> 00:18:36,800
<font color="#CCCCCC">heap usage but making reference is a bit</font>

450
00:18:32,900 --> 00:18:39,410
complicated<font color="#CCCCCC"> reference</font><font color="#E5E5E5"> is not the feature</font>

451
00:18:36,800 --> 00:18:40,909
that<font color="#E5E5E5"> used too much accepting exploits</font><font color="#CCCCCC"> so</font>

452
00:18:39,410 --> 00:18:45,080
it is

453
00:18:40,910 --> 00:18:48,590
yeah so this<font color="#CCCCCC"> there is a trade-off here</font>

454
00:18:45,080 --> 00:18:50,060
between<font color="#E5E5E5"> their</font><font color="#CCCCCC"> zeros are</font><font color="#E5E5E5"> more simple but</font>

455
00:18:48,590 --> 00:18:51,919
reference are more complicated and it's

456
00:18:50,060 --> 00:18:54,980
the<font color="#CCCCCC"> fourth grade of</font><font color="#E5E5E5"> in my opinion</font><font color="#CCCCCC"> at</font>

457
00:18:51,920 --> 00:18:57,560
<font color="#CCCCCC">least so now</font><font color="#E5E5E5"> that we know about</font><font color="#CCCCCC"> in Syria</font>

458
00:18:54,980 --> 00:18:59,570
<font color="#CCCCCC">lies and we know</font><font color="#E5E5E5"> about as evil let's see</font>

459
00:18:57,560 --> 00:19:02,300
some bugs and vulnerabilities

460
00:18:59,570 --> 00:19:05,689
so first<font color="#CCCCCC"> use a funny show</font><font color="#E5E5E5"> value</font><font color="#CCCCCC"> now</font>

461
00:19:02,300 --> 00:19:07,580
since 0 is used to be pointers

462
00:19:05,690 --> 00:19:09,380
initializing pointers was very easy

463
00:19:07,580 --> 00:19:11,270
right everybody knows how to initialize

464
00:19:09,380 --> 00:19:12,290
<font color="#CCCCCC">aponte pointer you</font><font color="#E5E5E5"> just pointed to now</font>

465
00:19:11,270 --> 00:19:14,450
and you're done

466
00:19:12,290 --> 00:19:16,370
<font color="#E5E5E5">initialize instructs is is a different</font>

467
00:19:14,450 --> 00:19:18,440
story right we need to initialize them

468
00:19:16,370 --> 00:19:21,649
with some macros or maybe some constants

469
00:19:18,440 --> 00:19:24,050
<font color="#CCCCCC">it may</font><font color="#E5E5E5"> take some time and programmers</font>

470
00:19:21,650 --> 00:19:26,630
tend to skip<font color="#CCCCCC"> the</font><font color="#E5E5E5"> space if the if if it's</font>

471
00:19:24,050 --> 00:19:29,629
possible you<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> initializers trucks</font>

472
00:19:26,630 --> 00:19:30,980
which is a problem<font color="#E5E5E5"> and this is a can</font>

473
00:19:29,630 --> 00:19:32,960
lead to some vulnerabilities and this is

474
00:19:30,980 --> 00:19:35,600
the exact example here we have

475
00:19:32,960 --> 00:19:37,790
<font color="#E5E5E5">dysfunction</font><font color="#CCCCCC"> the SPL object storage</font><font color="#E5E5E5"> and</font>

476
00:19:35,600 --> 00:19:39,800
<font color="#E5E5E5">serialize and this function is the</font>

477
00:19:37,790 --> 00:19:42,860
<font color="#E5E5E5">customer play implementation of</font>

478
00:19:39,800 --> 00:19:45,680
cancellation of<font color="#E5E5E5"> destruct</font><font color="#CCCCCC"> svl object</font>

479
00:19:42,860 --> 00:19:48,050
storage<font color="#E5E5E5"> at this class is implemented in</font>

480
00:19:45,680 --> 00:19:50,900
<font color="#CCCCCC">C code some of the classes in the SPL</font>

481
00:19:48,050 --> 00:19:53,120
the<font color="#CCCCCC"> PHP standard library are implemented</font>

482
00:19:50,900 --> 00:19:54,860
in<font color="#CCCCCC"> c and this is the case here</font><font color="#E5E5E5"> and as</font>

483
00:19:53,120 --> 00:19:56,959
you can see the first line<font color="#E5E5E5"> at two</font>

484
00:19:54,860 --> 00:19:59,990
variables are declared<font color="#E5E5E5"> entry and in</font>

485
00:19:56,960 --> 00:20:03,680
these are<font color="#E5E5E5"> zville so there are two types</font>

486
00:19:59,990 --> 00:20:06,110
<font color="#CCCCCC">evil struct and</font><font color="#E5E5E5"> at no point this code</font>

487
00:20:03,680 --> 00:20:07,940
<font color="#E5E5E5">they</font><font color="#CCCCCC"> are initialized and after a few</font>

488
00:20:06,110 --> 00:20:11,029
lines of code we reach this

489
00:20:07,940 --> 00:20:13,220
a statement calling the function PHP

490
00:20:11,029 --> 00:20:14,570
<font color="#CCCCCC">varanasi realize this is the sea</font>

491
00:20:13,220 --> 00:20:16,820
implementation of the<font color="#CCCCCC"> uncivilized</font>

492
00:20:14,570 --> 00:20:18,500
function and the first value is a

493
00:20:16,820 --> 00:20:20,360
pointer to this in<font color="#E5E5E5"> that was never</font>

494
00:20:18,500 --> 00:20:23,809
initialized<font color="#E5E5E5"> and this this is supposed to</font>

495
00:20:20,360 --> 00:20:25,399
be an out variable<font color="#E5E5E5"> but it's not</font><font color="#CCCCCC"> okay so</font>

496
00:20:23,809 --> 00:20:28,250
<font color="#CCCCCC">but this is what we're going to store</font>

497
00:20:25,399 --> 00:20:30,529
the<font color="#E5E5E5"> stronger and serializing the next</font>

498
00:20:28,250 --> 00:20:32,720
variable is<font color="#CCCCCC"> P P</font><font color="#E5E5E5"> points to</font><font color="#CCCCCC"> the stronger</font>

499
00:20:30,529 --> 00:20:35,029
<font color="#E5E5E5">and serializing so this function what is</font>

500
00:20:32,720 --> 00:20:38,480
<font color="#E5E5E5">its</font><font color="#CCCCCC"> fancy</font><font color="#E5E5E5"> realizes the string pointed by</font>

501
00:20:35,029 --> 00:20:41,779
<font color="#CCCCCC">P and stores the value</font><font color="#E5E5E5"> in however</font>

502
00:20:38,480 --> 00:20:44,539
internally<font color="#E5E5E5"> we</font><font color="#CCCCCC"> reach</font><font color="#E5E5E5"> this line of code at</font>

503
00:20:41,779 --> 00:20:47,269
<font color="#CCCCCC">0.2 destroy</font><font color="#E5E5E5"> which means please destroy</font>

504
00:20:44,539 --> 00:20:50,899
this evil<font color="#E5E5E5"> which is pointed by arvo right</font>

505
00:20:47,269 --> 00:20:53,179
and what is<font color="#CCCCCC"> our in our</font><font color="#E5E5E5"> case it's in it's</font>

506
00:20:50,899 --> 00:20:55,699
exactly the thing we did not initialize

507
00:20:53,179 --> 00:20:57,440
at no point and the reason<font color="#CCCCCC"> and the code</font>

508
00:20:55,700 --> 00:21:00,649
does this is to make sure there is no

509
00:20:57,440 --> 00:21:03,230
value in<font color="#E5E5E5"> dville before writing new</font>

510
00:21:00,649 --> 00:21:05,570
values<font color="#E5E5E5"> but since this value was never</font>

511
00:21:03,230 --> 00:21:07,490
initialized<font color="#E5E5E5"> what's in this value is</font>

512
00:21:05,570 --> 00:21:09,289
garbage from the stack and if you shape

513
00:21:07,490 --> 00:21:11,809
your stick<font color="#E5E5E5"> correctly you can cause some</font>

514
00:21:09,289 --> 00:21:17,539
bad things<font color="#CCCCCC"> to happen so this was Stevie</font>

515
00:21:11,809 --> 00:21:20,299
<font color="#E5E5E5">2016</font><font color="#CCCCCC"> 7480 ok so the next example is</font><font color="#E5E5E5"> type</font>

516
00:21:17,539 --> 00:21:22,220
confusion and we are going to rely on

517
00:21:20,299 --> 00:21:25,129
the fact that making references is very

518
00:21:22,220 --> 00:21:28,279
complicated process as you see any

519
00:21:25,129 --> 00:21:30,709
changes the type of this evil<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> and we</font>

520
00:21:28,279 --> 00:21:32,299
can suspect somebody forgot about this

521
00:21:30,710 --> 00:21:34,759
possibility and this is exactly what

522
00:21:32,299 --> 00:21:37,759
happened<font color="#E5E5E5"> so we have the same function</font>

523
00:21:34,759 --> 00:21:39,289
again<font color="#E5E5E5"> and this is</font><font color="#CCCCCC"> a you have more lines</font>

524
00:21:37,759 --> 00:21:41,509
of code from the same function but it's

525
00:21:39,289 --> 00:21:44,299
the<font color="#CCCCCC"> an</font><font color="#E5E5E5"> serialize of the SVO object</font>

526
00:21:41,509 --> 00:21:45,950
storage and as you can see in the second

527
00:21:44,299 --> 00:21:48,259
line here we are calling the internal

528
00:21:45,950 --> 00:21:52,490
<font color="#E5E5E5">uncivilized and</font><font color="#CCCCCC"> work again converting</font>

529
00:21:48,259 --> 00:21:55,370
the string pointed by<font color="#CCCCCC"> P and stored and a</font>

530
00:21:52,490 --> 00:21:57,889
result in<font color="#CCCCCC"> an evil entry</font>

531
00:21:55,370 --> 00:22:00,350
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> two lines later</font><font color="#CCCCCC"> we're checking the</font>

532
00:21:57,889 --> 00:22:02,449
type of what we just<font color="#CCCCCC"> unsterilized making</font>

533
00:22:00,350 --> 00:22:05,330
sure is of type object so you can see

534
00:22:02,450 --> 00:22:07,460
that if the the type of entry is not

535
00:22:05,330 --> 00:22:10,039
object<font color="#E5E5E5"> the function</font><font color="#CCCCCC"> bales better things</font>

536
00:22:07,460 --> 00:22:12,409
happen<font color="#E5E5E5"> but if it's nothing should happen</font>

537
00:22:10,039 --> 00:22:14,000
but if it's<font color="#CCCCCC"> of type</font><font color="#E5E5E5"> object we can go on</font>

538
00:22:12,409 --> 00:22:17,269
<font color="#E5E5E5">and in the last line where</font><font color="#CCCCCC"> and</font>

539
00:22:14,000 --> 00:22:19,399
serializing<font color="#E5E5E5"> and the next value</font><font color="#CCCCCC"> peas</font>

540
00:22:17,269 --> 00:22:21,320
<font color="#CCCCCC">advanced</font><font color="#E5E5E5"> here and now it points</font><font color="#CCCCCC"> a</font>

541
00:22:19,399 --> 00:22:23,149
<font color="#E5E5E5">onwards in the string and we're</font>

542
00:22:21,320 --> 00:22:26,839
converting the string pointed by<font color="#CCCCCC"> P and</font>

543
00:22:23,149 --> 00:22:29,418
store it<font color="#CCCCCC"> into</font><font color="#E5E5E5"> end but what happens if in</font>

544
00:22:26,839 --> 00:22:30,678
<font color="#E5E5E5">is actually a reference to entry</font>

545
00:22:29,419 --> 00:22:32,869
<font color="#CCCCCC">well the type of entry is going to</font>

546
00:22:30,679 --> 00:22:36,200
change<font color="#CCCCCC"> and let's see how what happens</font>

547
00:22:32,869 --> 00:22:38,899
so first answer<font color="#E5E5E5"> realizing entry and it's</font>

548
00:22:36,200 --> 00:22:40,429
an object and we're checking<font color="#E5E5E5"> and this is</font>

549
00:22:38,899 --> 00:22:43,428
actually<font color="#E5E5E5"> an object and everything is</font>

550
00:22:40,429 --> 00:22:47,989
good<font color="#E5E5E5"> but next</font><font color="#CCCCCC"> our answer</font><font color="#E5E5E5"> izing in and in</font>

551
00:22:43,429 --> 00:22:50,119
<font color="#E5E5E5">is a reference to entry so according to</font>

552
00:22:47,989 --> 00:22:52,099
the process first we're allocating is<font color="#CCCCCC"> a</font>

553
00:22:50,119 --> 00:22:54,379
reference on<font color="#CCCCCC"> the hip and we're</font>

554
00:22:52,099 --> 00:22:56,928
initializing to be the copy of entry

555
00:22:54,379 --> 00:22:59,209
<font color="#E5E5E5">then</font><font color="#CCCCCC"> we're changing the type of entry to</font>

556
00:22:56,929 --> 00:23:00,859
be of type<font color="#E5E5E5"> reference and point to this</font>

557
00:22:59,210 --> 00:23:04,039
reference<font color="#E5E5E5"> and of course</font><font color="#CCCCCC"> less they were</font>

558
00:23:00,859 --> 00:23:06,830
initializing in<font color="#CCCCCC"> but in this process</font><font color="#E5E5E5"> we</font>

559
00:23:04,039 --> 00:23:07,879
actually<font color="#CCCCCC"> changed</font><font color="#E5E5E5"> the type of entry after</font>

560
00:23:06,830 --> 00:23:10,279
<font color="#CCCCCC">we checked it</font>

561
00:23:07,879 --> 00:23:13,158
so this is<font color="#E5E5E5"> a bug and actually bad things</font>

562
00:23:10,279 --> 00:23:14,960
happened and<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> explainable but</font>

563
00:23:13,159 --> 00:23:18,859
<font color="#E5E5E5">it's still</font><font color="#CCCCCC"> buggin was fixed so this</font><font color="#E5E5E5"> is</font>

564
00:23:14,960 --> 00:23:21,619
about<font color="#CCCCCC"> 7</font><font color="#E5E5E5"> free</font><font color="#CCCCCC"> to 58</font><font color="#E5E5E5"> in PHP system</font>

565
00:23:18,859 --> 00:23:24,499
<font color="#CCCCCC">ok so here is this</font><font color="#E5E5E5"> is the last</font><font color="#CCCCCC"> back for</font>

566
00:23:21,619 --> 00:23:26,449
today and<font color="#E5E5E5"> its use after free and the</font>

567
00:23:24,499 --> 00:23:29,029
problem stems from the fact that<font color="#CCCCCC"> now</font>

568
00:23:26,450 --> 00:23:31,279
<font color="#CCCCCC">zeros are embedded in structs</font><font color="#E5E5E5"> and we</font>

569
00:23:29,029 --> 00:23:33,289
keep pointers to do is evils<font color="#CCCCCC"> but strikes</font>

570
00:23:31,279 --> 00:23:35,690
have their own rules of how they change

571
00:23:33,289 --> 00:23:37,460
and some<font color="#CCCCCC"> structure to change</font><font color="#E5E5E5"> tend to</font>

572
00:23:35,690 --> 00:23:40,789
change<font color="#CCCCCC"> the place in memory without</font>

573
00:23:37,460 --> 00:23:42,289
telling any<font color="#E5E5E5"> anything else and if we keep</font>

574
00:23:40,789 --> 00:23:44,779
using these pointers<font color="#E5E5E5"> were actually</font>

575
00:23:42,289 --> 00:23:48,589
pointing to an hour which is not not and

576
00:23:44,779 --> 00:23:50,899
not valid anymore<font color="#CCCCCC"> so such a dynamic</font>

577
00:23:48,589 --> 00:23:53,359
<font color="#CCCCCC">stretch</font><font color="#E5E5E5"> can be a hash table for example</font>

578
00:23:50,899 --> 00:23:55,518
and this code is<font color="#CCCCCC"> from</font><font color="#E5E5E5"> process</font><font color="#CCCCCC"> the data</font>

579
00:23:53,359 --> 00:23:58,309
function this function is the function

580
00:23:55,519 --> 00:23:59,960
that processes<font color="#E5E5E5"> every</font><font color="#CCCCCC"> hash</font><font color="#E5E5E5"> table during</font>

581
00:23:58,309 --> 00:24:03,440
<font color="#E5E5E5">the serialization and hash tables can be</font>

582
00:23:59,960 --> 00:24:05,029
also<font color="#E5E5E5"> properties off an object</font>

583
00:24:03,440 --> 00:24:07,309
<font color="#CCCCCC">ok and in here in the first line already</font>

584
00:24:05,029 --> 00:24:09,259
<font color="#CCCCCC">clearing the variables and</font><font color="#E5E5E5"> elects next</font>

585
00:24:07,309 --> 00:24:12,619
line we're adding a new entry to a<font color="#CCCCCC"> hash</font>

586
00:24:09,259 --> 00:24:15,289
<font color="#CCCCCC">table</font><font color="#E5E5E5"> so what we do here is</font><font color="#CCCCCC"> n hash at</font>

587
00:24:12,619 --> 00:24:17,689
<font color="#E5E5E5">you we're adding a new entry</font><font color="#CCCCCC"> the first</font>

588
00:24:15,289 --> 00:24:19,460
parameter is the hash table and the

589
00:24:17,690 --> 00:24:21,710
second parameter is the key<font color="#E5E5E5"> and the</font>

590
00:24:19,460 --> 00:24:24,710
result of this function is a pointer to

591
00:24:21,710 --> 00:24:26,750
this evil that is the volume<font color="#E5E5E5"> so where we</font>

592
00:24:24,710 --> 00:24:29,810
get data points to this

593
00:24:26,750 --> 00:24:32,360
<font color="#E5E5E5">zero we need to feel</font><font color="#CCCCCC"> it and</font><font color="#E5E5E5"> then we're</font>

594
00:24:29,810 --> 00:24:33,770
calling the last line<font color="#CCCCCC"> less</font><font color="#E5E5E5"> line calls</font>

595
00:24:32,360 --> 00:24:36,469
the<font color="#E5E5E5"> internal implementation of an</font>

596
00:24:33,770 --> 00:24:40,280
serialize<font color="#E5E5E5"> and again it converts the</font>

597
00:24:36,470 --> 00:24:42,920
string pointed by<font color="#CCCCCC"> P and sorts</font><font color="#E5E5E5"> is stores</font>

598
00:24:40,280 --> 00:24:45,680
its value in data or data is pointing to

599
00:24:42,920 --> 00:24:47,330
<font color="#CCCCCC">but</font><font color="#E5E5E5"> look at the last parameter here</font><font color="#CCCCCC"> is</font>

600
00:24:45,680 --> 00:24:50,300
the<font color="#E5E5E5"> bar</font><font color="#CCCCCC"> hatch this array we talked about</font>

601
00:24:47,330 --> 00:24:53,929
in the previous part and<font color="#CCCCCC"> varnish keeps</font>

602
00:24:50,300 --> 00:24:57,110
pointers to every<font color="#CCCCCC"> and piece of info for</font>

603
00:24:53,930 --> 00:24:58,850
every value<font color="#CCCCCC"> we parsed</font><font color="#E5E5E5"> including data so</font>

604
00:24:57,110 --> 00:25:01,790
<font color="#CCCCCC">data</font><font color="#E5E5E5"> points internally to the hash table</font>

605
00:24:58,850 --> 00:25:04,370
and it is stored in the end of our<font color="#CCCCCC"> hairy</font>

606
00:25:01,790 --> 00:25:06,710
<font color="#E5E5E5">but what happens if you manage to insert</font>

607
00:25:04,370 --> 00:25:08,510
another value to the hash table<font color="#E5E5E5"> then</font><font color="#CCCCCC"> the</font>

608
00:25:06,710 --> 00:25:11,120
<font color="#CCCCCC">history</font><font color="#E5E5E5"> will my precise right hash</font>

609
00:25:08,510 --> 00:25:12,710
tables<font color="#E5E5E5"> grow sometimes</font><font color="#CCCCCC"> memory and when</font>

610
00:25:11,120 --> 00:25:14,659
they grow internally they reallocate

611
00:25:12,710 --> 00:25:16,970
their memory to store additional values

612
00:25:14,660 --> 00:25:19,190
<font color="#CCCCCC">so this is</font><font color="#E5E5E5"> how it looks like in</font><font color="#CCCCCC"> our</font>

613
00:25:16,970 --> 00:25:21,410
first year and serializing<font color="#E5E5E5"> an object</font>

614
00:25:19,190 --> 00:25:24,080
this object has some properties for

615
00:25:21,410 --> 00:25:26,360
example it has<font color="#E5E5E5"> to</font><font color="#CCCCCC"> poverty</font><font color="#E5E5E5"> 0 and 1 and</font>

616
00:25:24,080 --> 00:25:27,889
then magically we<font color="#CCCCCC"> managed to insert</font>

617
00:25:26,360 --> 00:25:31,909
another value to the<font color="#CCCCCC"> properties hash</font>

618
00:25:27,890 --> 00:25:34,580
table and it reallocates<font color="#E5E5E5"> so now the</font>

619
00:25:31,910 --> 00:25:37,280
<font color="#CCCCCC">vardesh</font><font color="#E5E5E5"> points the new value that was</font>

620
00:25:34,580 --> 00:25:41,090
<font color="#CCCCCC">serialized but the two previous values</font>

621
00:25:37,280 --> 00:25:42,830
are not valid anymore and this<font color="#E5E5E5"> is not</font>

622
00:25:41,090 --> 00:25:44,179
very common scenario it's quite hard to

623
00:25:42,830 --> 00:25:46,520
exploit this<font color="#E5E5E5"> or to trigger it is</font>

624
00:25:44,180 --> 00:25:48,980
<font color="#E5E5E5">vulnerability actually because if you</font>

625
00:25:46,520 --> 00:25:51,139
remember the format before and

626
00:25:48,980 --> 00:25:53,420
serializing<font color="#E5E5E5"> an object</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> is the</font>

627
00:25:51,140 --> 00:25:56,060
number of properties in this object and

628
00:25:53,420 --> 00:25:58,670
PHP make sure the hash table has enough

629
00:25:56,060 --> 00:26:02,899
capacity to hold all these<font color="#E5E5E5"> properties</font>

630
00:25:58,670 --> 00:26:04,280
yep<font color="#CCCCCC"> there are</font><font color="#E5E5E5"> two ways to do trigger</font>

631
00:26:02,900 --> 00:26:06,650
<font color="#E5E5E5">this one</font><font color="#CCCCCC"> will be the</font><font color="#E5E5E5"> first one is the</font>

632
00:26:04,280 --> 00:26:09,440
wake up function and this is a function

633
00:26:06,650 --> 00:26:11,330
that objects can define and this

634
00:26:09,440 --> 00:26:14,360
function this method is called after the

635
00:26:11,330 --> 00:26:17,659
object has been<font color="#E5E5E5"> serialized</font><font color="#CCCCCC"> and if for</font>

636
00:26:14,360 --> 00:26:19,879
some reason this function defines a<font color="#CCCCCC"> a</font>

637
00:26:17,660 --> 00:26:21,560
new property<font color="#CCCCCC"> on the fly</font>

638
00:26:19,880 --> 00:26:24,140
<font color="#CCCCCC">no then</font><font color="#E5E5E5"> the interpreter is not aware of</font>

639
00:26:21,560 --> 00:26:26,810
this beforehand so inserting a new

640
00:26:24,140 --> 00:26:29,000
property on the fly<font color="#E5E5E5"> can cause this</font><font color="#CCCCCC"> this</font>

641
00:26:26,810 --> 00:26:31,429
<font color="#CCCCCC">contributors vulnerability and also we</font>

642
00:26:29,000 --> 00:26:33,620
have my<font color="#E5E5E5"> all-time</font><font color="#CCCCCC"> favorite object in PHP</font>

643
00:26:31,430 --> 00:26:35,059
or<font color="#E5E5E5"> class</font><font color="#CCCCCC"> the data interval</font><font color="#E5E5E5"> class</font>

644
00:26:33,620 --> 00:26:38,209
and this class has a very interesting

645
00:26:35,059 --> 00:26:40,250
behavior<font color="#CCCCCC"> it does not</font><font color="#E5E5E5"> initialize its</font>

646
00:26:38,210 --> 00:26:44,090
properties<font color="#CCCCCC"> hashtable</font><font color="#E5E5E5"> beforehand</font>

647
00:26:40,250 --> 00:26:46,790
<font color="#CCCCCC">alright it</font><font color="#E5E5E5"> actually only when accessing</font>

648
00:26:44,090 --> 00:26:49,010
the properties of this object then it

649
00:26:46,790 --> 00:26:51,830
defines<font color="#CCCCCC"> and adds</font><font color="#E5E5E5"> its properties to the</font>

650
00:26:49,010 --> 00:26:54,530
hash table<font color="#E5E5E5"> so if</font><font color="#CCCCCC"> you manage to come to</font>

651
00:26:51,830 --> 00:26:58,309
some functionality such as<font color="#CCCCCC"> to string or</font>

652
00:26:54,530 --> 00:27:00,290
wake up<font color="#CCCCCC"> the touches this</font><font color="#E5E5E5"> object or some</font>

653
00:26:58,309 --> 00:27:03,139
objects properties such as the interval

654
00:27:00,290 --> 00:27:09,379
we can trigger this vulnerability and

655
00:27:03,140 --> 00:27:10,160
this was<font color="#CCCCCC"> Stevie</font><font color="#E5E5E5"> 2016 7 479 so these bugs</font>

656
00:27:09,380 --> 00:27:11,270
are complicated

657
00:27:10,160 --> 00:27:13,190
<font color="#CCCCCC">they're still and sterilized</font>

658
00:27:11,270 --> 00:27:14,840
vulnerabilities and even between the

659
00:27:13,190 --> 00:27:16,970
time<font color="#E5E5E5"> i submitted this talk and today</font>

660
00:27:14,840 --> 00:27:20,240
tour has been at least one more<font color="#E5E5E5"> that was</font>

661
00:27:16,970 --> 00:27:21,770
reported<font color="#E5E5E5"> and published the</font>

662
00:27:20,240 --> 00:27:24,200
vulnerabilities are a bit different than

663
00:27:21,770 --> 00:27:25,940
what we<font color="#E5E5E5"> used to see because evil system</font>

664
00:27:24,200 --> 00:27:29,240
is a<font color="#E5E5E5"> bit different but still very</font>

665
00:27:25,940 --> 00:27:31,850
corruptions<font color="#E5E5E5"> and</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> really let</font><font color="#E5E5E5"> us</font>

666
00:27:29,240 --> 00:27:34,010
use<font color="#E5E5E5"> a</font><font color="#CCCCCC"> freak values is as we've seen the</font>

667
00:27:31,850 --> 00:27:36,469
two vulnerabilities let us<font color="#E5E5E5"> reuse the</font>

668
00:27:34,010 --> 00:27:38,030
<font color="#E5E5E5">field values and this is a property that</font>

669
00:27:36,470 --> 00:27:39,830
we're<font color="#E5E5E5"> gonna need in order to exploit</font>

670
00:27:38,030 --> 00:27:44,540
these vulnerabilities

671
00:27:39,830 --> 00:27:46,790
so after<font color="#CCCCCC"> we know about how the system</font>

672
00:27:44,540 --> 00:27:49,190
works internally and<font color="#E5E5E5"> as</font><font color="#CCCCCC"> evidence evil</font>

673
00:27:46,790 --> 00:27:50,928
system works and we found some<font color="#CCCCCC"> bugs are</font>

674
00:27:49,190 --> 00:27:53,840
we<font color="#CCCCCC"> going to talk a bit about the</font>

675
00:27:50,929 --> 00:27:55,429
<font color="#E5E5E5">alligator</font><font color="#CCCCCC"> because when exploiting this</font>

676
00:27:53,840 --> 00:27:58,129
kind of<font color="#CCCCCC"> our</font><font color="#E5E5E5"> corruption vulnerabilities</font>

677
00:27:55,429 --> 00:28:02,210
we need to know how<font color="#CCCCCC"> at the allocated</font>

678
00:27:58,130 --> 00:28:04,190
works how memory looks like<font color="#E5E5E5"> so we had</font>

679
00:28:02,210 --> 00:28:06,350
the previous<font color="#CCCCCC"> alligator of php5</font><font color="#E5E5E5"> and it's</font>

680
00:28:04,190 --> 00:28:09,590
not<font color="#E5E5E5"> too important but it was</font><font color="#CCCCCC"> hit based</font>

681
00:28:06,350 --> 00:28:12,889
alligator and every slot slot is the

682
00:28:09,590 --> 00:28:15,740
allocation unit in PHP<font color="#CCCCCC"> ok so it's called</font>

683
00:28:12,890 --> 00:28:18,920
slot and it has a size and flags to each

684
00:28:15,740 --> 00:28:21,710
<font color="#CCCCCC">year allocation and also Phillies for</font>

685
00:28:18,920 --> 00:28:24,500
<font color="#E5E5E5">caching and it also it was very</font><font color="#CCCCCC"> fun it</font>

686
00:28:21,710 --> 00:28:26,390
was<font color="#E5E5E5"> a nice for exploiting but now we</font>

687
00:28:24,500 --> 00:28:28,070
have a different<font color="#CCCCCC"> alligator</font><font color="#E5E5E5"> the alligator</font>

688
00:28:26,390 --> 00:28:31,010
here is that it's a<font color="#CCCCCC"> completely right</font>

689
00:28:28,070 --> 00:28:33,080
there is nothing similar and it features

690
00:28:31,010 --> 00:28:35,540
<font color="#CCCCCC">beans or memory pools as you know them</font>

691
00:28:33,080 --> 00:28:36,919
and<font color="#CCCCCC"> Phyllis this is basically how the</font>

692
00:28:35,540 --> 00:28:39,320
<font color="#CCCCCC">alligator works these are the basic</font>

693
00:28:36,920 --> 00:28:41,900
building blocks and<font color="#CCCCCC"> I'm gonna throw some</font>

694
00:28:39,320 --> 00:28:42,830
deals at you and you probably see them

695
00:28:41,900 --> 00:28:44,960
or not

696
00:28:42,830 --> 00:28:46,939
<font color="#CCCCCC">a delegated works in chunks of</font><font color="#E5E5E5"> two</font>

697
00:28:44,960 --> 00:28:49,640
megabytes from the operating system and

698
00:28:46,940 --> 00:28:51,649
these<font color="#E5E5E5"> chunks are divided into pages</font><font color="#CCCCCC"> the</font>

699
00:28:49,640 --> 00:28:55,190
first<font color="#CCCCCC"> pages page descriptor he describes</font>

700
00:28:51,649 --> 00:28:57,260
the chunk<font color="#E5E5E5"> and it has couple of</font><font color="#CCCCCC"> structs</font>

701
00:28:55,190 --> 00:28:59,210
<font color="#E5E5E5">and the two important ones</font><font color="#CCCCCC"> are is the</font>

702
00:28:57,260 --> 00:29:03,019
one describing the pages which page

703
00:28:59,210 --> 00:29:05,450
<font color="#E5E5E5">pages are user</font><font color="#CCCCCC"> free to use and pointers</font>

704
00:29:03,019 --> 00:29:08,360
to the beans or<font color="#E5E5E5"> to the free list a that</font>

705
00:29:05,450 --> 00:29:12,019
<font color="#E5E5E5">were initialized and</font><font color="#CCCCCC"> everyone is a</font><font color="#E5E5E5"> free</font>

706
00:29:08,360 --> 00:29:13,729
list and<font color="#E5E5E5"> of specific size we have the 32</font>

707
00:29:12,019 --> 00:29:17,210
bytes being<font color="#CCCCCC"> with the six</font><font color="#E5E5E5"> invites</font><font color="#CCCCCC"> been</font>

708
00:29:13,730 --> 00:29:18,559
and it can<font color="#E5E5E5"> spend over multiple pages</font><font color="#CCCCCC"> now</font>

709
00:29:17,210 --> 00:29:19,460
let's say it in a way you can actually

710
00:29:18,559 --> 00:29:21,529
remember

711
00:29:19,460 --> 00:29:23,929
so<font color="#E5E5E5"> here is</font><font color="#CCCCCC"> a chunk from the operating</font>

712
00:29:21,529 --> 00:29:26,690
system<font color="#CCCCCC"> its of</font><font color="#E5E5E5"> two megabytes and</font><font color="#CCCCCC"> it's</font>

713
00:29:23,929 --> 00:29:28,580
divided<font color="#E5E5E5"> it is divided into pages first</font>

714
00:29:26,690 --> 00:29:30,980
<font color="#E5E5E5">page is the</font><font color="#CCCCCC"> transcript or you can see</font>

715
00:29:28,580 --> 00:29:34,460
the free slots it is just array of

716
00:29:30,980 --> 00:29:37,850
pointers to free lists and<font color="#E5E5E5"> page info for</font>

717
00:29:34,460 --> 00:29:40,250
each page and this is what it looks like

718
00:29:37,850 --> 00:29:42,860
<font color="#CCCCCC">so then</font><font color="#E5E5E5"> it can spend over multiple pages</font>

719
00:29:40,250 --> 00:29:45,080
<font color="#E5E5E5">is the 16 bytes been and we initialize</font>

720
00:29:42,860 --> 00:29:48,590
it as a free list so every<font color="#CCCCCC"> six invites</font>

721
00:29:45,080 --> 00:29:50,990
points to the next<font color="#CCCCCC"> bites and we register</font>

722
00:29:48,590 --> 00:29:53,240
it in<font color="#E5E5E5"> the chunk descriptors so we have</font>

723
00:29:50,990 --> 00:29:55,700
the page information<font color="#CCCCCC"> 16-byte spends over</font>

724
00:29:53,240 --> 00:29:59,090
two pages and pointed to the free list

725
00:29:55,700 --> 00:30:01,610
now the allocation algorithm is quite

726
00:29:59,090 --> 00:30:04,699
simple<font color="#CCCCCC"> first-rate</font><font color="#E5E5E5"> we want assume you</font>

727
00:30:01,610 --> 00:30:06,229
want to allocate a chance lot of size 30

728
00:30:04,700 --> 00:30:08,149
then you checked which have been it

729
00:30:06,230 --> 00:30:10,820
belongs<font color="#CCCCCC"> to i think</font><font color="#E5E5E5"> it belongs to</font><font color="#CCCCCC"> be</font>

730
00:30:08,149 --> 00:30:13,010
number<font color="#CCCCCC"> five</font><font color="#E5E5E5"> then we check if there is a</font>

731
00:30:10,820 --> 00:30:15,049
<font color="#E5E5E5">free least available worries have been</font>

732
00:30:13,010 --> 00:30:16,760
initialized<font color="#E5E5E5"> if it if there is no initial</font>

733
00:30:15,049 --> 00:30:18,830
has<font color="#E5E5E5"> been we initialize</font><font color="#CCCCCC"> and you've been</font>

734
00:30:16,760 --> 00:30:22,309
<font color="#CCCCCC">and then we just popped from the fullest</font>

735
00:30:18,830 --> 00:30:24,649
<font color="#CCCCCC">so assume you want to allocate 30 bites</font>

736
00:30:22,309 --> 00:30:27,649
there is no<font color="#E5E5E5"> 30</font><font color="#CCCCCC"> bites</font><font color="#E5E5E5"> been available</font>

737
00:30:24,649 --> 00:30:29,178
right now so we're<font color="#CCCCCC"> Alex initializing and</font>

738
00:30:27,649 --> 00:30:31,489
<font color="#CCCCCC">you've been and then we just</font><font color="#E5E5E5"> popped from</font>

739
00:30:29,179 --> 00:30:33,380
the fullest<font color="#CCCCCC"> so we want to make an</font><font color="#E5E5E5"> ideal</font>

740
00:30:31,490 --> 00:30:35,210
location<font color="#E5E5E5"> of the same size it's even</font>

741
00:30:33,380 --> 00:30:39,679
simpler<font color="#CCCCCC"> to just</font><font color="#E5E5E5"> pop from the free list</font>

742
00:30:35,210 --> 00:30:41,750
<font color="#E5E5E5">for</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> memory is the inverse operation so</font>

743
00:30:39,679 --> 00:30:44,450
we get some<font color="#E5E5E5"> point</font><font color="#CCCCCC"> we want to free it</font>

744
00:30:41,750 --> 00:30:46,519
back to the pool<font color="#E5E5E5"> so we checked which</font>

745
00:30:44,450 --> 00:30:48,620
<font color="#CCCCCC">chunk it belongs in which page within</font>

746
00:30:46,519 --> 00:30:50,809
the<font color="#CCCCCC"> trunk</font><font color="#E5E5E5"> it belongs to</font><font color="#CCCCCC"> we read the</font>

747
00:30:48,620 --> 00:30:52,489
<font color="#CCCCCC">chart descriptor</font><font color="#E5E5E5"> to know to which</font><font color="#CCCCCC"> feels</font>

748
00:30:50,809 --> 00:30:53,360
to push it back and we push it back to

749
00:30:52,490 --> 00:30:57,020
the<font color="#E5E5E5"> fullest</font>

750
00:30:53,360 --> 00:31:00,260
<font color="#E5E5E5">so</font><font color="#CCCCCC"> assuming we</font><font color="#E5E5E5"> want to free at the first</font>

751
00:30:57,020 --> 00:31:01,790
<font color="#E5E5E5">slot of this</font><font color="#CCCCCC"> been then we just see it</font>

752
00:31:00,260 --> 00:31:04,400
belongs to the third page we see the

753
00:31:01,790 --> 00:31:09,049
third page is of being 32 we go to the

754
00:31:04,400 --> 00:31:10,460
free list and we just<font color="#CCCCCC"> pushed back when I</font>

755
00:31:09,049 --> 00:31:12,170
want to<font color="#CCCCCC"> remember about the alligator is</font>

756
00:31:10,460 --> 00:31:14,000
that the<font color="#E5E5E5"> alligator is very very</font>

757
00:31:12,170 --> 00:31:17,480
predictable<font color="#E5E5E5"> which is important for us as</font>

758
00:31:14,000 --> 00:31:19,850
<font color="#CCCCCC">exploiters and it's impossible to free</font>

759
00:31:17,480 --> 00:31:22,040
just random<font color="#E5E5E5"> pointers that this was used</font>

760
00:31:19,850 --> 00:31:23,540
in the previous<font color="#CCCCCC"> expectations technique</font>

761
00:31:22,040 --> 00:31:24,950
but it's not possible anymore because<font color="#E5E5E5"> we</font>

762
00:31:23,540 --> 00:31:27,620
<font color="#E5E5E5">have some</font><font color="#CCCCCC"> with operations</font><font color="#E5E5E5"> and lookups</font>

763
00:31:24,950 --> 00:31:30,740
and it's hard to forge memory to look at

764
00:31:27,620 --> 00:31:32,540
the correct way for this<font color="#E5E5E5"> to work and we</font>

765
00:31:30,740 --> 00:31:34,669
can abuse<font color="#E5E5E5"> for</font><font color="#CCCCCC"> those pointers to get</font>

766
00:31:32,540 --> 00:31:36,500
arbitrary right so we can change them if

767
00:31:34,669 --> 00:31:39,740
we can change the free list and then

768
00:31:36,500 --> 00:31:41,360
allocate a few slots we might<font color="#E5E5E5"> we can</font>

769
00:31:39,740 --> 00:31:44,030
allocate to the place we want<font color="#E5E5E5"> to and</font><font color="#CCCCCC"> i'm</font>

770
00:31:41,360 --> 00:31:46,820
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> explain it much more later</font>

771
00:31:44,030 --> 00:31:49,070
so now that we have vulnerabilities and

772
00:31:46,820 --> 00:31:49,610
we know about the alligator and how it

773
00:31:49,070 --> 00:31:53,090
works

774
00:31:49,610 --> 00:31:55,820
it's time to write an expert<font color="#E5E5E5"> right and</font>

775
00:31:53,090 --> 00:31:57,918
every<font color="#E5E5E5"> exploit has few stages</font><font color="#CCCCCC"> the most</font>

776
00:31:55,820 --> 00:32:01,700
common<font color="#E5E5E5"> are</font><font color="#CCCCCC"> leaks so we want to make some</font>

777
00:31:57,919 --> 00:32:04,370
more information to bypass basilar<font color="#E5E5E5"> then</font>

778
00:32:01,700 --> 00:32:07,580
we would like to read some<font color="#E5E5E5"> memories so</font>

779
00:32:04,370 --> 00:32:10,250
we can read data or gadgets<font color="#E5E5E5"> function</font>

780
00:32:07,580 --> 00:32:11,840
pointers<font color="#E5E5E5"> so on</font><font color="#CCCCCC"> it would like to</font><font color="#E5E5E5"> write</font>

781
00:32:10,250 --> 00:32:14,630
<font color="#CCCCCC">maybe write our shellcode</font><font color="#E5E5E5"> maybe write</font>

782
00:32:11,840 --> 00:32:16,129
some other stuff<font color="#E5E5E5"> and we would like to</font>

783
00:32:14,630 --> 00:32:19,190
execute code<font color="#CCCCCC"> this is what we're here for</font>

784
00:32:16,130 --> 00:32:20,929
<font color="#E5E5E5">and first thing we're going to talk</font>

785
00:32:19,190 --> 00:32:23,570
about the<font color="#CCCCCC"> link i think is the most</font>

786
00:32:20,929 --> 00:32:24,620
complicated part<font color="#E5E5E5"> and we're going to</font>

787
00:32:23,570 --> 00:32:27,530
abuse the alligator

788
00:32:24,620 --> 00:32:28,790
it's our best friend here and it's

789
00:32:27,530 --> 00:32:30,500
roughly based on the previous

790
00:32:28,790 --> 00:32:32,928
<font color="#E5E5E5">exploitation to connect what is the</font>

791
00:32:30,500 --> 00:32:34,580
generalization of it and we're going to

792
00:32:32,929 --> 00:32:36,799
use our ability to serialize<font color="#E5E5E5"> freed</font>

793
00:32:34,580 --> 00:32:38,030
objects and we believe we can<font color="#E5E5E5"> serialize</font>

794
00:32:36,799 --> 00:32:39,889
<font color="#E5E5E5">the objects not only use them because</font>

795
00:32:38,030 --> 00:32:42,020
<font color="#E5E5E5">this is how we initially started right</font>

796
00:32:39,890 --> 00:32:44,419
we<font color="#E5E5E5"> haven't</font><font color="#CCCCCC"> serialize</font><font color="#E5E5E5"> if when serializing</font>

797
00:32:42,020 --> 00:32:46,400
something we probably it was<font color="#CCCCCC"> serialized</font>

798
00:32:44,419 --> 00:32:48,230
before so we have<font color="#E5E5E5"> a some kind of</font>

799
00:32:46,400 --> 00:32:49,940
mechanism here that we<font color="#CCCCCC"> see really</font>

800
00:32:48,230 --> 00:32:53,660
<font color="#E5E5E5">something answer lies in civilized back</font>

801
00:32:49,940 --> 00:32:56,000
and so on<font color="#E5E5E5"> the alligator if you remember</font>

802
00:32:53,660 --> 00:32:57,710
is<font color="#CCCCCC"> philly so it overrides everything</font>

803
00:32:56,000 --> 00:32:59,390
that is passed to it so if<font color="#CCCCCC"> you're free</font>

804
00:32:57,710 --> 00:33:01,820
pointers<font color="#CCCCCC"> the alligator is going to be</font>

805
00:32:59,390 --> 00:33:03,580
free slots that the alligator is going

806
00:33:01,820 --> 00:33:05,830
to offer them

807
00:33:03,580 --> 00:33:09,010
and after we<font color="#E5E5E5"> freedom we use them we can</font>

808
00:33:05,830 --> 00:33:12,490
read<font color="#E5E5E5"> a via these pointers and read some</font>

809
00:33:09,010 --> 00:33:13,720
data that was also freed<font color="#CCCCCC"> so this is</font><font color="#E5E5E5"> how</font>

810
00:33:12,490 --> 00:33:16,390
it's going to work the alligator is a

811
00:33:13,720 --> 00:33:18,490
free list and the<font color="#E5E5E5"> first pointers in this</font>

812
00:33:16,390 --> 00:33:20,680
<font color="#CCCCCC">loss in the free slots is the next slot</font>

813
00:33:18,490 --> 00:33:22,750
<font color="#CCCCCC">it's just the point right so here is the</font>

814
00:33:20,680 --> 00:33:26,200
free<font color="#CCCCCC"> slots truck</font><font color="#E5E5E5"> and you can see the</font>

815
00:33:22,750 --> 00:33:28,720
first field is a pointer and when<font color="#CCCCCC"> read</font>

816
00:33:26,200 --> 00:33:29,770
<font color="#CCCCCC">free objects we can sometimes read via</font>

817
00:33:28,720 --> 00:33:32,920
this pointer

818
00:33:29,770 --> 00:33:34,780
I mean we freed the slot and we're still

819
00:33:32,920 --> 00:33:37,780
using it so<font color="#E5E5E5"> we can read</font><font color="#CCCCCC"> responder</font><font color="#E5E5E5"> and</font>

820
00:33:34,780 --> 00:33:40,720
read to the next slot next<font color="#CCCCCC"> three slot</font><font color="#E5E5E5"> so</font>

821
00:33:37,780 --> 00:33:43,180
here<font color="#E5E5E5"> is my all-time favorite class in</font>

822
00:33:40,720 --> 00:33:45,010
PHP<font color="#E5E5E5"> the date interval class and as you</font>

823
00:33:43,180 --> 00:33:47,320
can see this<font color="#E5E5E5"> how destructive implemented</font>

824
00:33:45,010 --> 00:33:50,650
<font color="#E5E5E5">Mary and the first field is a pointer</font>

825
00:33:47,320 --> 00:33:52,780
<font color="#CCCCCC">how lucky we are right and it</font><font color="#E5E5E5"> only</font>

826
00:33:50,650 --> 00:33:54,670
points to<font color="#CCCCCC"> distract and destruct</font><font color="#E5E5E5"> is a</font>

827
00:33:52,780 --> 00:33:56,379
very simple structure<font color="#E5E5E5"> it has many fields</font>

828
00:33:54,670 --> 00:33:59,020
but all of them are integers<font color="#CCCCCC"> they're not</font>

829
00:33:56,380 --> 00:34:01,840
<font color="#E5E5E5">only integers</font><font color="#CCCCCC"> integers</font><font color="#E5E5E5"> SL is signed long</font>

830
00:33:59,020 --> 00:34:03,430
long<font color="#E5E5E5"> so they're</font><font color="#CCCCCC"> all so</font><font color="#E5E5E5"> uncivilized and</font>

831
00:34:01,840 --> 00:34:06,010
written back to the user

832
00:34:03,430 --> 00:34:07,900
so when<font color="#E5E5E5"> serializing at this class we're</font>

833
00:34:06,010 --> 00:34:10,090
actually getting these numbers the<font color="#CCCCCC"> year</font>

834
00:34:07,900 --> 00:34:12,940
<font color="#CCCCCC">demand</font><font color="#E5E5E5"> the day and so on</font>

835
00:34:10,090 --> 00:34:14,560
so how we<font color="#E5E5E5"> going to forge</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> leak in</font>

836
00:34:12,940 --> 00:34:17,110
practice<font color="#E5E5E5"> first we're going to allocate</font>

837
00:34:14,560 --> 00:34:19,600
the<font color="#E5E5E5"> state interval and we will allocate</font>

838
00:34:17,110 --> 00:34:21,190
an object like for example<font color="#E5E5E5"> string and</font>

839
00:34:19,600 --> 00:34:25,839
then we're<font color="#E5E5E5"> going to free both objects</font>

840
00:34:21,190 --> 00:34:27,280
<font color="#CCCCCC">first</font><font color="#E5E5E5"> string then the date interval and</font>

841
00:34:25,840 --> 00:34:28,900
the alligator is going to override the

842
00:34:27,280 --> 00:34:31,120
<font color="#E5E5E5">date interval with a pointer to the</font>

843
00:34:28,900 --> 00:34:33,550
string to the freed strength<font color="#CCCCCC"> because how</font>

844
00:34:31,120 --> 00:34:35,500
it<font color="#E5E5E5"> works and the other is also going to</font>

845
00:34:33,550 --> 00:34:38,290
<font color="#E5E5E5">overwrite this string of some pointers</font>

846
00:34:35,500 --> 00:34:40,389
<font color="#CCCCCC">so when we serialize</font><font color="#E5E5E5"> the state interval</font>

847
00:34:38,290 --> 00:34:42,310
<font color="#E5E5E5">we're going to read at</font><font color="#CCCCCC"> these objects and</font>

848
00:34:40,389 --> 00:34:44,889
<font color="#E5E5E5">here's some hacks</font><font color="#CCCCCC"> them for you because</font>

849
00:34:42,310 --> 00:34:46,239
you really wanted it and<font color="#E5E5E5"> here's a</font><font color="#CCCCCC"> you</font>

850
00:34:44,889 --> 00:34:49,480
can see the<font color="#CCCCCC"> Phillies before we start our</font>

851
00:34:46,239 --> 00:34:52,209
<font color="#E5E5E5">exploit and now we allocate interval and</font>

852
00:34:49,480 --> 00:34:53,920
<font color="#E5E5E5">as you can see it points to some</font><font color="#CCCCCC"> struck</font>

853
00:34:52,210 --> 00:34:55,900
<font color="#CCCCCC">that initialized-</font><font color="#E5E5E5"> ones because it</font>

854
00:34:53,920 --> 00:34:58,570
doesn't matter so much and are also

855
00:34:55,900 --> 00:35:01,060
allocating<font color="#CCCCCC"> are and serializing a string</font>

856
00:34:58,570 --> 00:35:03,640
<font color="#E5E5E5">one of the data and now we're offering</font>

857
00:35:01,060 --> 00:35:05,140
<font color="#CCCCCC">at the</font><font color="#E5E5E5"> two of them and as you can see</font>

858
00:35:03,640 --> 00:35:07,660
the<font color="#E5E5E5"> date interval pointer the first</font>

859
00:35:05,140 --> 00:35:10,060
<font color="#CCCCCC">pointer now points to the freed string</font>

860
00:35:07,660 --> 00:35:11,950
and when serializing this<font color="#CCCCCC"> interval</font>

861
00:35:10,060 --> 00:35:13,900
actually get the values<font color="#E5E5E5"> in the string</font>

862
00:35:11,950 --> 00:35:14,899
will get<font color="#E5E5E5"> these pointers as integers</font>

863
00:35:13,900 --> 00:35:17,990
which is very nice

864
00:35:14,900 --> 00:35:19,220
<font color="#E5E5E5">how can read memory</font><font color="#CCCCCC"> well we have this</font>

865
00:35:17,990 --> 00:35:20,990
very nice

866
00:35:19,220 --> 00:35:22,669
<font color="#E5E5E5">struct already so if we can control</font><font color="#CCCCCC"> the</font>

867
00:35:20,990 --> 00:35:25,430
<font color="#CCCCCC">struct fully</font><font color="#E5E5E5"> we could if we can grow</font>

868
00:35:22,670 --> 00:35:27,380
<font color="#E5E5E5">controls evil</font><font color="#CCCCCC"> fully we can just change</font>

869
00:35:25,430 --> 00:35:30,109
this pointer to whatever<font color="#E5E5E5"> we want</font>

870
00:35:27,380 --> 00:35:32,510
so pointing the first field in the<font color="#CCCCCC"> data</font>

871
00:35:30,109 --> 00:35:34,940
interval<font color="#CCCCCC"> will let us read any kind of</font>

872
00:35:32,510 --> 00:35:37,220
<font color="#CCCCCC">Mary we want if we don't control their</font>

873
00:35:34,940 --> 00:35:40,579
fully which can be the case in<font color="#E5E5E5"> 64-bit</font>

874
00:35:37,220 --> 00:35:42,740
<font color="#E5E5E5">was the case there is a more complicated</font>

875
00:35:40,579 --> 00:35:45,319
way and<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> not going to discuss it here</font>

876
00:35:42,740 --> 00:35:48,589
but basically we can use a different

877
00:35:45,319 --> 00:35:50,420
object<font color="#CCCCCC"> that</font><font color="#E5E5E5"> a period object which has a</font>

878
00:35:48,589 --> 00:35:52,520
first first field<font color="#E5E5E5"> as a pointer which</font>

879
00:35:50,420 --> 00:35:54,079
points to another<font color="#CCCCCC"> socket</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> disrupt we</font>

880
00:35:52,520 --> 00:35:56,029
control another<font color="#E5E5E5"> pointer that is passed</font>

881
00:35:54,079 --> 00:35:58,849
to<font color="#CCCCCC"> Esther copy</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> serialization so we</font>

882
00:35:56,029 --> 00:36:00,770
can read<font color="#E5E5E5"> a memory with</font><font color="#CCCCCC"> is your copy and</font>

883
00:35:58,849 --> 00:36:03,529
you can see all the details in the paper

884
00:36:00,770 --> 00:36:05,660
published earlier this year<font color="#CCCCCC"> i'll give</font>

885
00:36:03,529 --> 00:36:09,200
<font color="#CCCCCC">Alex</font><font color="#E5E5E5"> links in the end of this talk</font>

886
00:36:05,660 --> 00:36:11,750
<font color="#E5E5E5">how can we possibly write memory</font>

887
00:36:09,200 --> 00:36:14,058
<font color="#CCCCCC">well</font><font color="#E5E5E5"> writing memory is a much more</font>

888
00:36:11,750 --> 00:36:15,680
complicated here and<font color="#CCCCCC"> is how we're going</font>

889
00:36:14,059 --> 00:36:17,779
to we're going to free some<font color="#E5E5E5"> strings back</font>

890
00:36:15,680 --> 00:36:20,000
to the alligator and in strings are

891
00:36:17,779 --> 00:36:20,539
going to<font color="#E5E5E5"> write pointers to wherever we</font>

892
00:36:20,000 --> 00:36:23,510
want

893
00:36:20,539 --> 00:36:25,640
whichever we want to<font color="#E5E5E5"> write then we going</font>

894
00:36:23,510 --> 00:36:27,230
<font color="#E5E5E5">to abuse the free list and we're going</font>

895
00:36:25,640 --> 00:36:28,520
to change the pointers in the<font color="#E5E5E5"> free list</font>

896
00:36:27,230 --> 00:36:30,289
<font color="#CCCCCC">and going to increase</font><font color="#E5E5E5"> the more the</font>

897
00:36:28,520 --> 00:36:33,770
<font color="#E5E5E5">crystal depending on our vulnerability</font>

898
00:36:30,289 --> 00:36:35,299
<font color="#CCCCCC">unworthy memory</font><font color="#E5E5E5"> and at some point if</font>

899
00:36:33,770 --> 00:36:39,259
increase them enough they will actually

900
00:36:35,299 --> 00:36:41,509
point to this<font color="#E5E5E5"> memory you want</font><font color="#CCCCCC"> right so</font>

901
00:36:39,260 --> 00:36:43,250
after<font color="#CCCCCC"> a few locations will actually have</font>

902
00:36:41,510 --> 00:36:48,079
the memory allocator give us the address

903
00:36:43,250 --> 00:36:50,210
we want to write it<font color="#E5E5E5"> and this is</font><font color="#CCCCCC"> likewhat</font>

904
00:36:48,079 --> 00:36:53,359
<font color="#E5E5E5">want to happen so how can we free these</font>

905
00:36:50,210 --> 00:36:55,250
strings as we said every value<font color="#CCCCCC"> we're</font>

906
00:36:53,359 --> 00:36:57,619
parsing<font color="#CCCCCC"> and uncivilized gets a reference</font>

907
00:36:55,250 --> 00:36:59,270
in the<font color="#CCCCCC"> bar Harry so we have reference to</font>

908
00:36:57,619 --> 00:37:02,329
almost everything and nothing is freed

909
00:36:59,270 --> 00:37:05,119
<font color="#E5E5E5">during an serialization except there is</font>

910
00:37:02,329 --> 00:37:07,490
one exception and it's a<font color="#E5E5E5"> in the hash</font>

911
00:37:05,119 --> 00:37:09,890
table<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> use the same key twice</font><font color="#CCCCCC"> kids</font>

912
00:37:07,490 --> 00:37:11,899
are<font color="#E5E5E5"> not kept references to and if you're</font>

913
00:37:09,890 --> 00:37:13,670
using the same key twice and<font color="#E5E5E5"> the keys</font>

914
00:37:11,900 --> 00:37:16,369
can be strings<font color="#CCCCCC"> the second time we're</font>

915
00:37:13,670 --> 00:37:18,049
using a<font color="#CCCCCC"> mesquite is free</font><font color="#E5E5E5"> the hash table</font>

916
00:37:16,369 --> 00:37:19,910
looks at the cancers

917
00:37:18,049 --> 00:37:21,288
<font color="#CCCCCC">well I've already got the</font><font color="#E5E5E5"> ski</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't</font>

918
00:37:19,910 --> 00:37:23,720
<font color="#CCCCCC">need</font><font color="#E5E5E5"> anymore and freeze it back to the</font>

919
00:37:21,289 --> 00:37:25,970
alligator<font color="#E5E5E5"> not references to it are made</font>

920
00:37:23,720 --> 00:37:29,180
and<font color="#CCCCCC"> its back in the alligator for us</font>

921
00:37:25,970 --> 00:37:31,669
<font color="#E5E5E5">and the next thing we need to know is</font>

922
00:37:29,180 --> 00:37:33,230
how to abuse<font color="#E5E5E5"> pointers in the Phillies</font>

923
00:37:31,670 --> 00:37:37,849
this is the most interesting part here

924
00:37:33,230 --> 00:37:40,369
and it<font color="#E5E5E5"> and the reason it is possible and</font>

925
00:37:37,849 --> 00:37:42,410
it's very common is because we have<font color="#CCCCCC"> that</font>

926
00:37:40,369 --> 00:37:44,750
confusion<font color="#E5E5E5"> here right</font><font color="#CCCCCC"> we have the free</font>

927
00:37:42,410 --> 00:37:47,960
slots which<font color="#E5E5E5"> their first field is a</font>

928
00:37:44,750 --> 00:37:49,520
pointer<font color="#E5E5E5"> but we also have the something</font>

929
00:37:47,960 --> 00:37:51,830
that was freed the<font color="#E5E5E5"> value that was freed</font>

930
00:37:49,520 --> 00:37:56,330
and we still have a reference to it and

931
00:37:51,830 --> 00:37:57,920
on the hip<font color="#E5E5E5"> every</font><font color="#CCCCCC"> I for every</font><font color="#E5E5E5"> structure</font>

932
00:37:56,330 --> 00:38:00,170
on the<font color="#E5E5E5"> hip as a reference count and the</font>

933
00:37:57,920 --> 00:38:02,240
reference reference count is always the

934
00:38:00,170 --> 00:38:04,550
first field<font color="#CCCCCC"> so if you take the scent</font>

935
00:38:02,240 --> 00:38:06,919
<font color="#E5E5E5">object for example</font><font color="#CCCCCC"> a destruct first</font>

936
00:38:04,550 --> 00:38:10,430
<font color="#E5E5E5">field is a reference come</font><font color="#CCCCCC"> so if</font><font color="#E5E5E5"> we have</font>

937
00:38:06,920 --> 00:38:13,220
a type confusion between<font color="#E5E5E5"> and an object</font>

938
00:38:10,430 --> 00:38:15,080
<font color="#CCCCCC">at abs</font><font color="#E5E5E5"> so not</font><font color="#CCCCCC"> attack with</font><font color="#E5E5E5"> if an object</font>

939
00:38:13,220 --> 00:38:17,419
was freed and we can still use it

940
00:38:15,080 --> 00:38:19,700
increasing the references<font color="#CCCCCC"> or</font><font color="#E5E5E5"> decreasing</font>

941
00:38:17,420 --> 00:38:23,119
the references to this object actually

942
00:38:19,700 --> 00:38:25,640
increases or decreases<font color="#CCCCCC"> a pointer so this</font>

943
00:38:23,119 --> 00:38:28,040
<font color="#CCCCCC">is</font><font color="#E5E5E5"> how we can control this pointer and</font>

944
00:38:25,640 --> 00:38:32,509
some more<font color="#CCCCCC"> heads-up so this is part of</font>

945
00:38:28,040 --> 00:38:34,609
the<font color="#E5E5E5"> exploit a</font><font color="#CCCCCC"> row</font><font color="#E5E5E5"> to bug 71 free 11 and</font>

946
00:38:32,510 --> 00:38:36,830
here you can see that<font color="#E5E5E5"> and we already</font>

947
00:38:34,609 --> 00:38:38,750
freed the<font color="#CCCCCC"> strength back to the</font><font color="#E5E5E5"> alligator</font>

948
00:38:36,830 --> 00:38:41,029
so you can see the<font color="#CCCCCC"> four</font><font color="#E5E5E5"> ones</font><font color="#CCCCCC"> indexed</font><font color="#E5E5E5"> up</font>

949
00:38:38,750 --> 00:38:42,710
<font color="#E5E5E5">and now we're going to trigger the</font>

950
00:38:41,030 --> 00:38:46,849
vulnerability<font color="#E5E5E5"> the vulnerability here</font>

951
00:38:42,710 --> 00:38:49,940
lies in the array object class and

952
00:38:46,849 --> 00:38:51,920
parsing it increases the pointer in the

953
00:38:49,940 --> 00:38:55,520
<font color="#E5E5E5">real estate</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> and now we have used</font>

954
00:38:51,920 --> 00:38:57,650
after free of this address and the first

955
00:38:55,520 --> 00:38:59,990
that is pointed by the<font color="#CCCCCC"> first it's still</font>

956
00:38:57,650 --> 00:39:03,980
in the alligator<font color="#E5E5E5"> but we have a reference</font>

957
00:38:59,990 --> 00:39:05,990
to it and it was the<font color="#E5E5E5"> 11th and value that</font>

958
00:39:03,980 --> 00:39:06,859
we are so adding references to this

959
00:39:05,990 --> 00:39:09,618
address

960
00:39:06,859 --> 00:39:12,140
so<font color="#CCCCCC"> r 11 parsing are 11 so on we're</font>

961
00:39:09,619 --> 00:39:15,200
<font color="#E5E5E5">increasing this pointer by to every time</font>

962
00:39:12,140 --> 00:39:17,118
<font color="#E5E5E5">and at some point reach the values just</font>

963
00:39:15,200 --> 00:39:18,140
freed<font color="#E5E5E5"> back to the hip</font><font color="#CCCCCC"> erected the</font>

964
00:39:17,119 --> 00:39:21,380
alligator

965
00:39:18,140 --> 00:39:24,140
so now if we allocate<font color="#CCCCCC"> twice from the</font>

966
00:39:21,380 --> 00:39:26,420
<font color="#CCCCCC">spin</font><font color="#E5E5E5"> the first</font><font color="#CCCCCC"> time will allocate</font><font color="#E5E5E5"> at the</font>

967
00:39:24,140 --> 00:39:28,670
object that was corrupted and the second

968
00:39:26,420 --> 00:39:30,619
time<font color="#CCCCCC"> will</font><font color="#E5E5E5"> actually can write</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> 41 41 41</font>

969
00:39:28,670 --> 00:39:32,530
<font color="#E5E5E5">and we will set</font><font color="#CCCCCC"> fault but is</font><font color="#E5E5E5"> exactly</font>

970
00:39:30,619 --> 00:39:35,350
what<font color="#E5E5E5"> you wanted right</font>

971
00:39:32,530 --> 00:39:38,350
<font color="#CCCCCC">so</font><font color="#E5E5E5"> code execution after all this code</font>

972
00:39:35,350 --> 00:39:39,850
execution is quite simple if you're

973
00:39:38,350 --> 00:39:41,650
controlling as evil as<font color="#E5E5E5"> i said</font><font color="#CCCCCC"> the</font>

974
00:39:39,850 --> 00:39:43,779
easiest way is to override a<font color="#E5E5E5"> callback</font>

975
00:39:41,650 --> 00:39:46,660
<font color="#CCCCCC">Ryu do you control some object you can</font>

976
00:39:43,780 --> 00:39:48,400
decide what complex it has<font color="#E5E5E5"> but if you</font>

977
00:39:46,660 --> 00:39:51,040
don't control your fully you can just

978
00:39:48,400 --> 00:39:52,810
<font color="#E5E5E5">have a right primitive so we can write</font>

979
00:39:51,040 --> 00:39:57,700
<font color="#CCCCCC">the function</font><font color="#E5E5E5"> pointer and that's about it</font>

980
00:39:52,810 --> 00:39:59,140
so<font color="#E5E5E5"> takeaways from this exploit the</font>

981
00:39:57,700 --> 00:40:02,109
alligator is your friend<font color="#E5E5E5"> please use it</font>

982
00:39:59,140 --> 00:40:03,549
use it wisely and these primitives<font color="#E5E5E5"> are</font>

983
00:40:02,110 --> 00:40:05,350
reusable they can be used in many

984
00:40:03,550 --> 00:40:07,990
different vulnerabilities within<font color="#CCCCCC"> dancy</font>

985
00:40:05,350 --> 00:40:10,210
<font color="#CCCCCC">realized mechanism and combining all</font>

986
00:40:07,990 --> 00:40:14,319
these primitives<font color="#E5E5E5"> you get the remote code</font>

987
00:40:10,210 --> 00:40:15,640
execution<font color="#CCCCCC"> conclusion from the talk even</font>

988
00:40:14,320 --> 00:40:17,440
<font color="#E5E5E5">though you're writing your code in</font>

989
00:40:15,640 --> 00:40:20,500
<font color="#E5E5E5">high-level language such as PHP you're</font>

990
00:40:17,440 --> 00:40:23,560
so vulnerable to vote<font color="#E5E5E5"> member corruptions</font>

991
00:40:20,500 --> 00:40:26,470
<font color="#E5E5E5">or outer low-level problems</font><font color="#CCCCCC"> the new</font>

992
00:40:23,560 --> 00:40:27,640
<font color="#E5E5E5">design of PHP is for</font><font color="#CCCCCC"> officiously</font><font color="#E5E5E5"> you</font>

993
00:40:26,470 --> 00:40:29,859
still have<font color="#CCCCCC"> our abilities</font>

994
00:40:27,640 --> 00:40:32,920
I don't think<font color="#CCCCCC"> it's more secure less</font>

995
00:40:29,860 --> 00:40:35,350
<font color="#E5E5E5">secure away and the alligator is</font>

996
00:40:32,920 --> 00:40:39,220
<font color="#CCCCCC">Explorer friendly</font><font color="#E5E5E5"> please when you're</font>

997
00:40:35,350 --> 00:40:40,870
writing an expert use it and never never

998
00:40:39,220 --> 00:40:43,689
never<font color="#CCCCCC"> used in</font><font color="#E5E5E5"> Sea lies this function is</font>

999
00:40:40,870 --> 00:40:46,270
a remote<font color="#CCCCCC"> quick execution</font><font color="#E5E5E5"> basically every</font>

1000
00:40:43,690 --> 00:40:50,350
time it was<font color="#CCCCCC"> a</font><font color="#E5E5E5"> in some somewhere in</font>

1001
00:40:46,270 --> 00:40:51,880
<font color="#E5E5E5">original code it was exploited some more</font>

1002
00:40:50,350 --> 00:40:53,230
information you can find<font color="#E5E5E5"> in checkpoint</font>

1003
00:40:51,880 --> 00:40:55,840
blog and also in the description of this

1004
00:40:53,230 --> 00:40:59,080
talk i have a link to the paper<font color="#CCCCCC"> I just</font>

1005
00:40:55,840 --> 00:41:01,660
published a<font color="#E5E5E5"> and</font><font color="#CCCCCC"> they're gonna</font><font color="#E5E5E5"> be another</font>

1006
00:40:59,080 --> 00:41:03,400
publication soon about<font color="#CCCCCC"> the</font><font color="#E5E5E5"> verbals</font><font color="#CCCCCC"> I</font>

1007
00:41:01,660 --> 00:41:05,440
<font color="#CCCCCC">talk</font><font color="#E5E5E5"> about more information about them</font>

1008
00:41:03,400 --> 00:41:06,430
and also<font color="#CCCCCC"> third vulnerability which I did</font>

1009
00:41:05,440 --> 00:41:10,150
not discuss here

1010
00:41:06,430 --> 00:41:13,149
PHP<font color="#E5E5E5"> bug system is the second link and</font>

1011
00:41:10,150 --> 00:41:14,770
there is every<font color="#CCCCCC"> back recorded and every</font>

1012
00:41:13,150 --> 00:41:19,330
vulnerability some of the<font color="#CCCCCC"> box doesn't</font>

1013
00:41:14,770 --> 00:41:21,430
have<font color="#CCCCCC"> tvs unfortunately</font><font color="#E5E5E5"> and third link is</font>

1014
00:41:19,330 --> 00:41:23,740
<font color="#CCCCCC">Nikita popova i think</font><font color="#E5E5E5"> is pronounced</font>

1015
00:41:21,430 --> 00:41:25,750
<font color="#CCCCCC">incorrectly that blog he's a main</font>

1016
00:41:23,740 --> 00:41:27,609
contributor to PHP and he has many

1017
00:41:25,750 --> 00:41:30,040
explanations about internal mechanisms

1018
00:41:27,610 --> 00:41:32,170
within<font color="#CCCCCC"> Petrie</font><font color="#E5E5E5"> if you want to contact me</font>

1019
00:41:30,040 --> 00:41:35,320
so you have my corporate mail my<font color="#CCCCCC"> Twitter</font>

1020
00:41:32,170 --> 00:41:39,420
and<font color="#CCCCCC"> I meanwhile most other platforms</font>

1021
00:41:35,320 --> 00:41:43,280
such as general so on couchsurfing<font color="#CCCCCC"> and</font>

1022
00:41:39,420 --> 00:41:54,299
<font color="#E5E5E5">so that's it any questions</font>

1023
00:41:43,280 --> 00:41:56,699
[Applause]

1024
00:41:54,299 --> 00:41:58,979
<font color="#E5E5E5">thank you and I</font><font color="#CCCCCC"> if you have</font><font color="#E5E5E5"> questions</font>

1025
00:41:56,699 --> 00:42:01,380
please line up next to the microphones

1026
00:41:58,979 --> 00:42:05,788
and ask<font color="#CCCCCC"> your question if</font><font color="#E5E5E5"> you're leaving</font>

1027
00:42:01,380 --> 00:42:15,390
please do so quietly<font color="#CCCCCC"> any questions from</font>

1028
00:42:05,789 --> 00:42:16,619
here or from the internet<font color="#CCCCCC"> people</font><font color="#E5E5E5"> are</font>

1029
00:42:15,390 --> 00:42:19,979
overwhelmed

1030
00:42:16,619 --> 00:42:21,569
<font color="#CCCCCC">ok so i'll start</font><font color="#E5E5E5"> with a question</font>

1031
00:42:19,979 --> 00:42:23,249
actually because<font color="#CCCCCC"> i have I didn't</font>

1032
00:42:21,569 --> 00:42:25,859
understand the internals too much

1033
00:42:23,249 --> 00:42:27,718
<font color="#CCCCCC">I'm intensive applications of exploiting</font>

1034
00:42:25,859 --> 00:42:29,308
uh things<font color="#CCCCCC"> they talk about any of this in</font>

1035
00:42:27,719 --> 00:42:32,549
the wild<font color="#E5E5E5"> are we expected to see this in</font>

1036
00:42:29,309 --> 00:42:34,679
the<font color="#E5E5E5"> wild actually</font><font color="#CCCCCC"> HP seven is not very</font>

1037
00:42:32,549 --> 00:42:37,319
widely used<font color="#CCCCCC"> by</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> I think it's two</font>

1038
00:42:34,679 --> 00:42:39,809
<font color="#CCCCCC">percent is just a</font><font color="#E5E5E5"> year old but as long</font>

1039
00:42:37,319 --> 00:42:43,170
as soon as the<font color="#E5E5E5"> big platforms the big</font>

1040
00:42:39,809 --> 00:42:46,259
<font color="#E5E5E5">CMS's will move to this a new language I</font>

1041
00:42:43,170 --> 00:42:48,809
<font color="#CCCCCC">I predict you'll see some of them are</font>

1042
00:42:46,259 --> 00:42:53,400
vulnerabilities but<font color="#CCCCCC"> a single seymour</font>

1043
00:42:48,809 --> 00:42:57,239
<font color="#E5E5E5">exploits</font><font color="#CCCCCC"> coming</font><font color="#E5E5E5"> questions from the</font>

1044
00:42:53,400 --> 00:42:59,429
audience or from the internet<font color="#E5E5E5"> internet</font>

1045
00:42:57,239 --> 00:43:01,199
<font color="#E5E5E5">has a question yes</font><font color="#CCCCCC"> okay yes</font>

1046
00:42:59,429 --> 00:43:04,469
are there any popular<font color="#CCCCCC"> project that are</font>

1047
00:43:01,199 --> 00:43:06,749
affected by these vulnerabilities<font color="#CCCCCC"> now</font>

1048
00:43:04,469 --> 00:43:09,119
that<font color="#CCCCCC"> i know</font><font color="#E5E5E5"> of not yet because</font><font color="#CCCCCC"> PHP seven</font>

1049
00:43:06,749 --> 00:43:13,799
is not widely used by now<font color="#E5E5E5"> there are no</font>

1050
00:43:09,119 --> 00:43:16,859
big<font color="#CCCCCC"> CMS is using PHP</font><font color="#E5E5E5"> seven</font><font color="#CCCCCC"> sorry</font>

1051
00:43:13,799 --> 00:43:23,009
internet<font color="#E5E5E5"> if you have more questions then</font>

1052
00:43:16,859 --> 00:43:26,040
go ahead

1053
00:43:23,010 --> 00:43:28,710
<font color="#E5E5E5">anyone from the audience last chance</font>

1054
00:43:26,040 --> 00:43:30,390
ok so again please give a big round of

1055
00:43:28,710 --> 00:43:39,500
applause<font color="#CCCCCC"> tonight</font>

1056
00:43:30,390 --> 00:44:06,540
[Applause]

1057
00:43:39,500 --> 00:44:06,540
[Music]

