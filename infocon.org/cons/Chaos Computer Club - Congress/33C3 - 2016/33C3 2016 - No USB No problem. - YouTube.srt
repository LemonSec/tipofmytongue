1
00:00:01,760 --> 00:00:21,540
[Music]

2
00:00:18,420 --> 00:00:25,050
<font color="#CCCCCC">thank you all</font><font color="#E5E5E5"> for coming this talk is</font>

3
00:00:21,540 --> 00:00:28,380
going to be on<font color="#E5E5E5"> no USB</font><font color="#CCCCCC"> no problem</font>

4
00:00:25,050 --> 00:00:30,869
<font color="#E5E5E5">greynium a software-only USB stack for</font>

5
00:00:28,380 --> 00:00:33,510
<font color="#CCCCCC">in this case specifically 48</font><font color="#E5E5E5"> megahertz</font>

6
00:00:30,869 --> 00:00:36,059
<font color="#E5E5E5">arm cortex-m 0</font><font color="#CCCCCC"> plus cpu so that's a very</font>

7
00:00:33,510 --> 00:00:38,820
specific<font color="#CCCCCC"> cpu but it turns out that it's</font>

8
00:00:36,059 --> 00:00:40,500
actually relatively common during this

9
00:00:38,820 --> 00:00:42,300
talk<font color="#E5E5E5"> I'm going to talk</font>

10
00:00:40,500 --> 00:00:43,800
it's going to be three sections<font color="#CCCCCC"> the</font>

11
00:00:42,300 --> 00:00:45,510
first<font color="#E5E5E5"> section why would anyone want to</font>

12
00:00:43,800 --> 00:00:49,769
do this thing why would you want to bit

13
00:00:45,510 --> 00:00:53,580
<font color="#E5E5E5">bang a USB stack on a cortex-m</font><font color="#CCCCCC"> 0 plus 40</font>

14
00:00:49,769 --> 00:00:55,530
megahertz<font color="#E5E5E5"> us</font><font color="#CCCCCC"> cpu</font><font color="#E5E5E5"> part</font><font color="#CCCCCC"> 2 is going to be</font>

15
00:00:53,580 --> 00:00:57,180
how it's made and so this part is going

16
00:00:55,530 --> 00:00:59,909
to be where we include things like<font color="#CCCCCC"> scope</font>

17
00:00:57,180 --> 00:01:02,190
<font color="#CCCCCC">traces and code snippets and things like</font>

18
00:00:59,909 --> 00:01:03,900
that this is the real meat of the talk

19
00:01:02,190 --> 00:01:04,949
<font color="#E5E5E5">and then we're going to go on and talk</font>

20
00:01:03,900 --> 00:01:08,370
about what now

21
00:01:04,949 --> 00:01:10,110
now that we have this USB<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> bang stack</font>

22
00:01:08,370 --> 00:01:13,350
<font color="#CCCCCC">what can</font><font color="#E5E5E5"> we do with it what can</font><font color="#CCCCCC"> we</font>

23
00:01:10,110 --> 00:01:17,190
actually do with<font color="#CCCCCC"> a low speed</font><font color="#E5E5E5"> USB stack</font>

24
00:01:13,350 --> 00:01:19,289
<font color="#E5E5E5">first a little bit about me</font><font color="#CCCCCC"> I first</font>

25
00:01:17,190 --> 00:01:21,720
presented at<font color="#CCCCCC"> ccc a couple years ago</font>

26
00:01:19,290 --> 00:01:24,359
talking about SD cards are getting code

27
00:01:21,720 --> 00:01:26,880
execution on them very embedded system

28
00:01:24,359 --> 00:01:30,780
<font color="#E5E5E5">at the lady 51</font><font color="#CCCCCC"> can't do a whole lot of a</font>

29
00:01:26,880 --> 00:01:32,490
<font color="#CCCCCC">lot on these</font><font color="#E5E5E5"> except SD cards also known</font>

30
00:01:30,780 --> 00:01:39,630
for working on<font color="#E5E5E5"> the soft drugs</font><font color="#CCCCCC"> are not</font>

31
00:01:32,490 --> 00:01:43,320
<font color="#CCCCCC">being</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> open-source laptop</font>

32
00:01:39,630 --> 00:01:44,789
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> and we also the laptop</font><font color="#E5E5E5"> had</font>

33
00:01:43,320 --> 00:01:46,408
<font color="#E5E5E5">this battery</font><font color="#CCCCCC"> board that's actually</font>

34
00:01:44,789 --> 00:01:51,720
closer to what<font color="#E5E5E5"> I'll be talking about</font>

35
00:01:46,409 --> 00:01:54,659
today<font color="#E5E5E5"> it has its own</font><font color="#CCCCCC"> cpu on</font><font color="#E5E5E5"> that runs</font><font color="#CCCCCC"> in</font>

36
00:01:51,720 --> 00:01:57,689
<font color="#CCCCCC">the cortex</font><font color="#E5E5E5"> m0 as well so this really is</font>

37
00:01:54,659 --> 00:02:01,799
applicable to the<font color="#CCCCCC"> USB</font><font color="#E5E5E5"> bit bang</font><font color="#CCCCCC"> stick</font>

38
00:01:57,689 --> 00:02:03,240
that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> talk about</font><font color="#E5E5E5"> now I'd like you to</font>

39
00:02:01,799 --> 00:02:05,579
take<font color="#E5E5E5"> with the takeaways</font><font color="#CCCCCC"> I'd like you to</font>

40
00:02:03,240 --> 00:02:07,408
have from this talk<font color="#CCCCCC"> is I want you to</font>

41
00:02:05,579 --> 00:02:11,130
have a better understanding of low-level

42
00:02:07,409 --> 00:02:12,360
<font color="#CCCCCC">USB</font><font color="#E5E5E5"> a lot of how to's and books and</font>

43
00:02:11,130 --> 00:02:14,250
things like that they'll talk about the

44
00:02:12,360 --> 00:02:15,720
<font color="#CCCCCC">higher-level</font><font color="#E5E5E5"> things about descriptors</font>

45
00:02:14,250 --> 00:02:17,849
and<font color="#CCCCCC"> and you have a chip now that</font>

46
00:02:15,720 --> 00:02:19,769
supports<font color="#E5E5E5"> USB what do you do with it</font>

47
00:02:17,849 --> 00:02:21,899
<font color="#E5E5E5">not many of them</font><font color="#CCCCCC"> talk about the low</font>

48
00:02:19,769 --> 00:02:25,170
<font color="#CCCCCC">level protocol stuff so</font><font color="#E5E5E5"> I wanted to tell</font>

49
00:02:21,900 --> 00:02:27,420
<font color="#E5E5E5">you a little bit about the protocols</font><font color="#CCCCCC"> at</font>

50
00:02:25,170 --> 00:02:29,579
<font color="#CCCCCC">a low level i'm going to have some</font>

51
00:02:27,420 --> 00:02:31,290
tricks that you can use to improve your

52
00:02:29,580 --> 00:02:33,750
embedded programming<font color="#E5E5E5"> embedded</font>

53
00:02:31,290 --> 00:02:35,849
programming is really different from web

54
00:02:33,750 --> 00:02:37,319
stuff from desktop stuff and there's

55
00:02:35,849 --> 00:02:39,060
some tricks that you use for embedded

56
00:02:37,319 --> 00:02:41,369
programming that<font color="#CCCCCC"> I'd like</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> share</font><font color="#E5E5E5"> with</font>

57
00:02:39,060 --> 00:02:44,220
you<font color="#E5E5E5"> but</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> think the most important thing</font>

58
00:02:41,370 --> 00:02:44,670
is to know what's important and what's

59
00:02:44,220 --> 00:02:46,230
not

60
00:02:44,670 --> 00:02:47,640
when you<font color="#E5E5E5"> have a new project when you</font>

61
00:02:46,230 --> 00:02:50,130
have<font color="#CCCCCC"> a new protocol your detailing</font>

62
00:02:47,640 --> 00:02:51,358
<font color="#CCCCCC">you're trying to implement there are</font>

63
00:02:50,130 --> 00:02:54,329
things that are very important that you

64
00:02:51,359 --> 00:02:56,190
absolutely cannot get wrong<font color="#E5E5E5"> and then</font>

65
00:02:54,329 --> 00:02:58,109
there's this whole other section of<font color="#E5E5E5"> of</font>

66
00:02:56,190 --> 00:02:59,700
stuff that they say is important but

67
00:02:58,109 --> 00:03:01,230
turns out it really isn't

68
00:02:59,700 --> 00:03:03,510
and it's important to know what's

69
00:03:01,230 --> 00:03:06,720
important and what you can kind of<font color="#CCCCCC"> punch</font>

70
00:03:03,510 --> 00:03:08,250
<font color="#E5E5E5">you can you can worry about later with</font>

71
00:03:06,720 --> 00:03:09,450
that let's get started why would you do

72
00:03:08,250 --> 00:03:13,739
this thing

73
00:03:09,450 --> 00:03:14,459
well the theme for this event is<font color="#E5E5E5"> works</font>

74
00:03:13,739 --> 00:03:18,510
for<font color="#E5E5E5"> me</font>

75
00:03:14,459 --> 00:03:23,100
USB is really really easy if you're a

76
00:03:18,510 --> 00:03:24,690
user<font color="#CCCCCC"> it can be a little bit difficult</font><font color="#E5E5E5"> so</font>

77
00:03:23,100 --> 00:03:25,858
<font color="#CCCCCC">USB is</font><font color="#E5E5E5"> great you can plug</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> and you</font>

78
00:03:24,690 --> 00:03:27,450
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> have to worry about any sort of</font>

79
00:03:25,859 --> 00:03:29,730
configuration<font color="#CCCCCC"> there's none of this</font>

80
00:03:27,450 --> 00:03:31,790
anymore<font color="#E5E5E5"> no environment variables</font><font color="#CCCCCC"> no</font>

81
00:03:29,730 --> 00:03:37,608
interrupt you plug it in and it<font color="#E5E5E5"> will</font>

82
00:03:31,790 --> 00:03:41,450
<font color="#E5E5E5">the other</font><font color="#CCCCCC"> motivation is</font><font color="#E5E5E5"> that USB is</font>

83
00:03:37,609 --> 00:03:44,000
everywhere<font color="#E5E5E5"> friend of mine has this USB</font>

84
00:03:41,450 --> 00:03:45,738
<font color="#CCCCCC">pokeball for some reason</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> i read it</font>

85
00:03:44,000 --> 00:03:47,900
literally is everywhere so everything

86
00:03:45,739 --> 00:03:49,400
<font color="#E5E5E5">supports USB</font><font color="#CCCCCC"> so if you want something to</font>

87
00:03:47,900 --> 00:03:52,909
work for somebody else<font color="#CCCCCC"> we probably</font>

88
00:03:49,400 --> 00:03:55,010
should go with<font color="#E5E5E5"> USB we</font><font color="#CCCCCC"> a couple years ago</font>

89
00:03:52,909 --> 00:03:57,290
we did this this is a fernvale this is a

90
00:03:55,010 --> 00:03:59,510
<font color="#E5E5E5">mobile phone</font><font color="#CCCCCC"> cpu kind of a breakout</font>

91
00:03:57,290 --> 00:04:02,000
board type thing<font color="#CCCCCC"> and</font><font color="#E5E5E5"> in the middle there</font>

92
00:03:59,510 --> 00:04:04,578
you can see<font color="#CCCCCC"> a kind of a white box and</font>

93
00:04:02,000 --> 00:04:07,609
that is a<font color="#CCCCCC"> uart that's a serial port</font><font color="#E5E5E5"> it</font>

94
00:04:04,579 --> 00:04:10,459
runs<font color="#CCCCCC"> at about 3.3 volts and</font><font color="#E5E5E5"> it is really</font>

95
00:04:07,609 --> 00:04:12,560
easy to get going<font color="#E5E5E5"> for developer because</font>

96
00:04:10,459 --> 00:04:15,470
<font color="#E5E5E5">you write a value to an area</font><font color="#CCCCCC"> of memory</font>

97
00:04:12,560 --> 00:04:17,209
and<font color="#CCCCCC"> it pops out the port</font><font color="#E5E5E5"> but from a user</font>

98
00:04:15,470 --> 00:04:19,579
perspective<font color="#CCCCCC"> you have to go and</font><font color="#E5E5E5"> have to</font>

99
00:04:17,209 --> 00:04:20,988
find a TTL serial cable and then get USB

100
00:04:19,579 --> 00:04:25,130
drivers working and it's<font color="#CCCCCC"> just</font><font color="#E5E5E5"> a huge</font>

101
00:04:20,988 --> 00:04:27,409
<font color="#E5E5E5">pain for the normal user and towards the</font>

102
00:04:25,130 --> 00:04:29,360
end of the development cycle we got USB

103
00:04:27,410 --> 00:04:31,820
support working natively so all you had

104
00:04:29,360 --> 00:04:34,729
to do to develop on the<font color="#E5E5E5"> cpu is plug it</font>

105
00:04:31,820 --> 00:04:37,159
into the USB port<font color="#CCCCCC"> it had power</font>

106
00:04:34,729 --> 00:04:40,010
<font color="#CCCCCC">I had USB serial communication and it</font>

107
00:04:37,159 --> 00:04:43,099
was really easy to bring it up<font color="#E5E5E5"> and this</font>

108
00:04:40,010 --> 00:04:45,199
actually surprised me because<font color="#CCCCCC"> i have</font><font color="#E5E5E5"> the</font>

109
00:04:43,099 --> 00:04:48,139
serial cable<font color="#CCCCCC"> setup i mean i thought</font><font color="#E5E5E5"> that</font>

110
00:04:45,199 --> 00:04:50,150
was relatively easy<font color="#E5E5E5"> but just having USB</font>

111
00:04:48,139 --> 00:04:51,860
serial made it so easy for other people

112
00:04:50,150 --> 00:04:53,870
to get going and start contributing code

113
00:04:51,860 --> 00:04:57,409
that really stuck with me that USB

114
00:04:53,870 --> 00:05:01,130
support on the thing is huge for

115
00:04:57,409 --> 00:05:03,919
enabling users to use your product<font color="#CCCCCC"> now</font>

116
00:05:01,130 --> 00:05:07,610
<font color="#E5E5E5">fast forward to last year</font><font color="#CCCCCC"> bunny did</font><font color="#E5E5E5"> a</font>

117
00:05:03,919 --> 00:05:08,780
<font color="#E5E5E5">board for</font><font color="#CCCCCC"> burningman codename orchard if</font>

118
00:05:07,610 --> 00:05:11,090
you<font color="#E5E5E5"> look you can see the</font><font color="#CCCCCC"> antenna</font>

119
00:05:08,780 --> 00:05:12,590
<font color="#E5E5E5">sticking out the side in burning</font><font color="#CCCCCC"> man</font>

120
00:05:11,090 --> 00:05:13,789
there's some special requirements when

121
00:05:12,590 --> 00:05:15,859
you want to do a bad you want to have

122
00:05:13,789 --> 00:05:18,020
mesh communication type stuff<font color="#CCCCCC"> not</font>

123
00:05:15,860 --> 00:05:19,729
necessarily internet of things you don't

124
00:05:18,020 --> 00:05:22,130
need a gateway but you just need a<font color="#E5E5E5"> mesh</font>

125
00:05:19,729 --> 00:05:23,570
they can talk to each other<font color="#CCCCCC"> of course</font>

126
00:05:22,130 --> 00:05:26,210
<font color="#CCCCCC">this being burning man</font><font color="#E5E5E5"> had lots of</font>

127
00:05:23,570 --> 00:05:28,729
blinky lights<font color="#E5E5E5"> and and</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> is a really</font>

128
00:05:26,210 --> 00:05:30,409
cool project but if you flip it over<font color="#E5E5E5"> on</font>

129
00:05:28,729 --> 00:05:33,110
the back you can see<font color="#CCCCCC"> there is</font><font color="#E5E5E5"> a big</font>

130
00:05:30,409 --> 00:05:36,139
black box and<font color="#E5E5E5"> that's a battery and</font>

131
00:05:33,110 --> 00:05:39,380
there's a USB port and<font color="#E5E5E5"> for this badge</font>

132
00:05:36,139 --> 00:05:39,950
that this actually act as a phone

133
00:05:39,380 --> 00:05:41,960
charger

134
00:05:39,950 --> 00:05:43,159
it's a portable battery pack like you'd

135
00:05:41,960 --> 00:05:44,260
get at the airport when you're running

136
00:05:43,159 --> 00:05:47,170
out of battery

137
00:05:44,260 --> 00:05:50,409
<font color="#CCCCCC">that's because the cpu doesn't actually</font>

138
00:05:47,170 --> 00:05:52,060
do USB<font color="#CCCCCC"> it has a radio in it that does</font>

139
00:05:50,410 --> 00:05:55,030
900 megahertz and it's fantastic for

140
00:05:52,060 --> 00:05:58,330
mesh networking<font color="#CCCCCC"> but it doesn't</font><font color="#E5E5E5"> have USB</font>

141
00:05:55,030 --> 00:06:01,000
support<font color="#E5E5E5"> we took the orchard</font><font color="#CCCCCC"> corn</font>

142
00:05:58,330 --> 00:06:04,210
<font color="#CCCCCC">reworked</font><font color="#E5E5E5"> we did a project with MIT and</font>

143
00:06:01,000 --> 00:06:07,810
now the port has gone from<font color="#CCCCCC"> taipei</font><font color="#E5E5E5"> 20 TG</font>

144
00:06:04,210 --> 00:06:10,539
<font color="#E5E5E5">and</font><font color="#CCCCCC"> bunny</font><font color="#E5E5E5"> did a thing where he decided</font>

145
00:06:07,810 --> 00:06:13,450
to wire up the<font color="#CCCCCC"> d+ in the d-</font><font color="#E5E5E5"> pins to the</font>

146
00:06:10,540 --> 00:06:16,930
<font color="#CCCCCC">CPU</font><font color="#E5E5E5"> in case somebody decided to do a</font><font color="#CCCCCC"> big</font>

147
00:06:13,450 --> 00:06:20,740
<font color="#E5E5E5">bang USB stack at the time I thought now</font>

148
00:06:16,930 --> 00:06:21,670
why would you want to do that but fast

149
00:06:20,740 --> 00:06:23,410
forward a couple of months<font color="#CCCCCC"> and I was</font>

150
00:06:21,670 --> 00:06:25,600
talking to somebody and they wanted to

151
00:06:23,410 --> 00:06:27,040
take<font color="#E5E5E5"> gaming controllers what they've</font>

152
00:06:25,600 --> 00:06:30,010
done is they've taken raspberry<font color="#E5E5E5"> PI's</font>

153
00:06:27,040 --> 00:06:32,710
<font color="#CCCCCC">daisy chain them with</font><font color="#E5E5E5"> the OTG cables and</font>

154
00:06:30,010 --> 00:06:35,890
they were having the pies in a box with

155
00:06:32,710 --> 00:06:37,930
an arcade stick and<font color="#CCCCCC"> I thought well you</font>

156
00:06:35,890 --> 00:06:39,580
know I have this wireless radio<font color="#CCCCCC"> all it</font>

157
00:06:37,930 --> 00:06:43,330
needs is a USB stick that's really all

158
00:06:39,580 --> 00:06:45,190
it is how hard could it be<font color="#CCCCCC"> the project</font>

159
00:06:43,330 --> 00:06:48,310
<font color="#CCCCCC">paula was</font><font color="#E5E5E5"> born as one</font><font color="#CCCCCC"> it cannot</font><font color="#E5E5E5"> be done</font>

160
00:06:45,190 --> 00:06:52,060
<font color="#E5E5E5">now to</font><font color="#CCCCCC"> be fair there are other software</font>

161
00:06:48,310 --> 00:06:53,350
USB<font color="#CCCCCC"> stack v</font><font color="#E5E5E5"> USB is the most famous</font><font color="#CCCCCC"> it's</font>

162
00:06:52,060 --> 00:06:56,320
a really impressive piece of software

163
00:06:53,350 --> 00:06:59,110
that gives<font color="#E5E5E5"> low-end AVR</font><font color="#CCCCCC"> such as arduino</font>

164
00:06:56,320 --> 00:07:00,730
<font color="#E5E5E5">full USB low speed stacks really</font>

165
00:06:59,110 --> 00:07:03,520
impressive it does it all in 12

166
00:07:00,730 --> 00:07:05,710
megahertz<font color="#CCCCCC"> but of course the big problem</font>

167
00:07:03,520 --> 00:07:08,830
that with that is<font color="#CCCCCC"> it's for</font><font color="#E5E5E5"> AVR and we</font>

168
00:07:05,710 --> 00:07:11,710
want to do it for arm the other software

169
00:07:08,830 --> 00:07:13,090
stack that<font color="#CCCCCC"> i'm aware of is I'm actually</font>

170
00:07:11,710 --> 00:07:17,260
not sure how to pronounce this<font color="#CCCCCC"> I think</font>

171
00:07:13,090 --> 00:07:19,390
<font color="#E5E5E5">it's like em let em</font><font color="#CCCCCC"> c USB</font><font color="#E5E5E5"> it is very</font>

172
00:07:17,260 --> 00:07:22,570
similar to what we have<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a cortex-m 0</font>

173
00:07:19,390 --> 00:07:25,210
<font color="#CCCCCC">plus also very impressive but they both</font>

174
00:07:22,570 --> 00:07:28,210
have one problem that makes it a little

175
00:07:25,210 --> 00:07:30,640
bit difficult<font color="#E5E5E5"> didn't</font><font color="#CCCCCC"> is a problem that i</font>

176
00:07:28,210 --> 00:07:32,530
wanted to fix and so one problem with

177
00:07:30,640 --> 00:07:35,770
hardware is that it's kind of a

178
00:07:32,530 --> 00:07:37,900
<font color="#E5E5E5">minefield</font><font color="#CCCCCC"> if you have the documentation</font>

179
00:07:35,770 --> 00:07:40,570
<font color="#E5E5E5">even if you have the reference</font><font color="#CCCCCC"> manuals</font>

180
00:07:37,900 --> 00:07:45,159
<font color="#E5E5E5">there's all sorts of things pitfalls and</font>

181
00:07:40,570 --> 00:07:47,380
traps you might miss this is a line out

182
00:07:45,160 --> 00:07:49,900
of one of the reference manuals<font color="#E5E5E5"> says</font>

183
00:07:47,380 --> 00:07:52,570
<font color="#CCCCCC">portait is assigned a dedicated</font>

184
00:07:49,900 --> 00:07:54,190
interrupt<font color="#E5E5E5"> and ports and</font><font color="#CCCCCC"> forty Sharon</font>

185
00:07:52,570 --> 00:07:55,560
interrupt<font color="#E5E5E5"> and then it goes on to talk</font>

186
00:07:54,190 --> 00:07:58,200
about<font color="#CCCCCC"> DNA</font>

187
00:07:55,560 --> 00:07:59,850
<font color="#E5E5E5">now if you read between</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> lines you</font>

188
00:07:58,200 --> 00:08:06,300
notice they don't actually<font color="#CCCCCC"> mention</font><font color="#E5E5E5"> port</font>

189
00:07:59,850 --> 00:08:07,889
<font color="#CCCCCC">be 40 exists but it has no interrupt and</font>

190
00:08:06,300 --> 00:08:09,780
this is the kind of problem you find out

191
00:08:07,889 --> 00:08:13,889
about two weeks after you get the board

192
00:08:09,780 --> 00:08:15,359
back from the fab and hardware<font color="#E5E5E5"> just full</font>

193
00:08:13,889 --> 00:08:17,970
of these things is another one that says

194
00:08:15,360 --> 00:08:19,530
p2p<font color="#E5E5E5"> 3</font><font color="#CCCCCC"> MPT</font><font color="#E5E5E5"> before our true open drain</font>

195
00:08:17,970 --> 00:08:21,450
pins which sounds great

196
00:08:19,530 --> 00:08:23,760
it says<font color="#E5E5E5"> goes on to say you need to use a</font>

197
00:08:21,450 --> 00:08:26,400
<font color="#CCCCCC">neck strap up</font><font color="#E5E5E5"> which basically in</font><font color="#CCCCCC"> english</font>

198
00:08:23,760 --> 00:08:29,340
<font color="#E5E5E5">means that ptb three and 50 before our</font>

199
00:08:26,400 --> 00:08:31,590
input only you can use them for output

200
00:08:29,340 --> 00:08:33,449
and again<font color="#E5E5E5"> you find this out about two</font>

201
00:08:31,590 --> 00:08:34,588
weeks after you get back from<font color="#E5E5E5"> the fat</font>

202
00:08:33,450 --> 00:08:36,570
<font color="#E5E5E5">when you're actually trying to figure</font>

203
00:08:34,589 --> 00:08:37,919
out why is<font color="#CCCCCC"> I'm i'm sending a</font><font color="#E5E5E5"> value out</font>

204
00:08:36,570 --> 00:08:42,599
why<font color="#E5E5E5"> isn't coming out</font>

205
00:08:37,919 --> 00:08:43,890
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> this pin is input only</font><font color="#E5E5E5"> and</font>

206
00:08:42,599 --> 00:08:45,870
this<font color="#E5E5E5"> is just all over the place</font><font color="#CCCCCC"> here is</font>

207
00:08:43,890 --> 00:08:48,089
a pin out diagram for one of the chips

208
00:08:45,870 --> 00:08:51,540
it's really small<font color="#E5E5E5"> but the thing to note</font>

209
00:08:48,089 --> 00:08:55,470
is that<font color="#E5E5E5"> pins have multiple uses</font>

210
00:08:51,540 --> 00:08:58,260
so for example of<font color="#CCCCCC"> pta 0 on a chip you</font>

211
00:08:55,470 --> 00:09:02,100
can<font color="#E5E5E5"> use it as</font><font color="#CCCCCC"> gpio</font><font color="#E5E5E5"> sometimes you can use</font>

212
00:08:58,260 --> 00:09:04,500
it as a<font color="#CCCCCC"> a DC but a lot of times</font>

213
00:09:02,100 --> 00:09:07,980
<font color="#CCCCCC">pta zero is one of the debug pants and</font>

214
00:09:04,500 --> 00:09:11,670
so<font color="#E5E5E5"> it's reserved</font><font color="#CCCCCC"> and both of the other</font>

215
00:09:07,980 --> 00:09:14,940
<font color="#CCCCCC">big bang USB</font><font color="#E5E5E5"> stacks</font><font color="#CCCCCC"> reserve PTA 0</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> p</font>

216
00:09:11,670 --> 00:09:17,099
<font color="#CCCCCC">p0</font><font color="#E5E5E5"> or pin</font><font color="#CCCCCC"> 0 and</font><font color="#E5E5E5"> pin</font><font color="#CCCCCC"> one as</font><font color="#E5E5E5"> their</font><font color="#CCCCCC"> d+</font>

217
00:09:14,940 --> 00:09:19,920
<font color="#CCCCCC">indi- pins and it's completely invariant</font>

218
00:09:17,100 --> 00:09:21,690
<font color="#CCCCCC">this makes the math really good really</font>

219
00:09:19,920 --> 00:09:23,010
easy to work with but<font color="#CCCCCC"> i wanted to have a</font>

220
00:09:21,690 --> 00:09:26,130
special feature where we could have

221
00:09:23,010 --> 00:09:27,780
different<font color="#CCCCCC"> d+ indi- pins</font><font color="#E5E5E5"> so work on one</font>

222
00:09:26,130 --> 00:09:30,360
of these things<font color="#E5E5E5"> if we really wanted</font><font color="#CCCCCC"> was</font>

223
00:09:27,780 --> 00:09:33,000
<font color="#E5E5E5">a really tiny chip it's a</font><font color="#CCCCCC"> i think it's</font>

224
00:09:30,360 --> 00:09:40,080
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> ingestible computing is what they</font>

225
00:09:33,000 --> 00:09:42,450
call it but so USB is<font color="#CCCCCC"> is I was doing the</font>

226
00:09:40,080 --> 00:09:44,970
math<font color="#E5E5E5"> USB low-speed signaling is 1.5</font>

227
00:09:42,450 --> 00:09:47,760
megahertz<font color="#E5E5E5"> on a 40 megahertz chip that</font>

228
00:09:44,970 --> 00:09:51,720
gives you thirty two clock cycles per

229
00:09:47,760 --> 00:09:55,709
bit and the<font color="#E5E5E5"> target</font><font color="#CCCCCC"> cpu again is a</font>

230
00:09:51,720 --> 00:09:58,589
<font color="#E5E5E5">cortex-m 0</font><font color="#CCCCCC"> plus</font><font color="#E5E5E5"> at 40 megahertz</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> the</font>

231
00:09:55,709 --> 00:10:01,050
plus is actually really important<font color="#CCCCCC"> the</font>

232
00:09:58,589 --> 00:10:03,959
arm cortex-m<font color="#CCCCCC"> 0 is a</font><font color="#E5E5E5"> three stage pipeline</font>

233
00:10:01,050 --> 00:10:04,899
<font color="#CCCCCC">the m0 plus they knocked down</font><font color="#E5E5E5"> to two</font>

234
00:10:03,959 --> 00:10:06,878
stage

235
00:10:04,899 --> 00:10:10,119
and this is a screenshot from the<font color="#E5E5E5"> arm</font>

236
00:10:06,879 --> 00:10:12,519
<font color="#E5E5E5">programmers reference manual</font><font color="#CCCCCC"> if you look</font>

237
00:10:10,119 --> 00:10:15,519
<font color="#CCCCCC">at everything on</font><font color="#E5E5E5"> there more or less is</font>

238
00:10:12,519 --> 00:10:17,949
one cycle so anything math if you want

239
00:10:15,519 --> 00:10:19,749
to add and subtract<font color="#E5E5E5"> you</font><font color="#CCCCCC"> want a shifter</font>

240
00:10:17,949 --> 00:10:23,050
or anything

241
00:10:19,749 --> 00:10:24,730
<font color="#CCCCCC">mathy is one cycle anything</font><font color="#E5E5E5"> involving</font>

242
00:10:23,050 --> 00:10:27,368
the program counter is<font color="#CCCCCC"> too so most</font>

243
00:10:24,730 --> 00:10:30,189
<font color="#CCCCCC">jumpstart to anything loading or storing</font>

244
00:10:27,369 --> 00:10:31,959
from<font color="#CCCCCC"> ram is is</font><font color="#E5E5E5"> to anything weird like a</font>

245
00:10:30,189 --> 00:10:36,550
memory barrier or<font color="#CCCCCC"> load a</font><font color="#E5E5E5"> coprocessor</font>

246
00:10:31,959 --> 00:10:37,628
load is<font color="#CCCCCC"> three</font><font color="#E5E5E5"> so I when</font><font color="#CCCCCC"> I ran</font><font color="#E5E5E5"> the</font>

247
00:10:36,550 --> 00:10:40,990
numbers it<font color="#CCCCCC"> seemed like it could be</font>

248
00:10:37,629 --> 00:10:44,439
possible<font color="#CCCCCC"> and so with that in mind I had</font>

249
00:10:40,990 --> 00:10:50,019
a design of the<font color="#E5E5E5"> board palawan and</font><font color="#CCCCCC"> I got</font>

250
00:10:44,439 --> 00:10:53,559
<font color="#E5E5E5">to work smarter it actually does work so</font>

251
00:10:50,019 --> 00:10:56,889
<font color="#E5E5E5">let's go</font><font color="#CCCCCC"> on to</font><font color="#E5E5E5"> how it's made</font>

252
00:10:53,559 --> 00:10:59,139
<font color="#CCCCCC">grandma is</font><font color="#E5E5E5"> the name of the project and</font>

253
00:10:56,889 --> 00:11:01,059
it has roughly this architecture so<font color="#CCCCCC"> at</font>

254
00:10:59,139 --> 00:11:03,970
the top<font color="#E5E5E5"> you have a user code which is</font>

255
00:11:01,059 --> 00:11:05,800
things like<font color="#E5E5E5"> descriptor callbacks and how</font>

256
00:11:03,970 --> 00:11:07,059
to get buffers and if you want to use it

257
00:11:05,800 --> 00:11:08,829
in your project

258
00:11:07,059 --> 00:11:12,730
this is the thing that you'll be<font color="#E5E5E5"> writing</font>

259
00:11:08,829 --> 00:11:14,620
<font color="#E5E5E5">to below that is the state and this</font>

260
00:11:12,730 --> 00:11:16,209
keeps track of where USB<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the state</font>

261
00:11:14,620 --> 00:11:18,999
and<font color="#E5E5E5"> that it's called</font><font color="#CCCCCC"> granules State DOT</font>

262
00:11:16,209 --> 00:11:21,878
<font color="#E5E5E5">see below that you have</font><font color="#CCCCCC"> a Phi which</font>

263
00:11:18,999 --> 00:11:24,339
handles<font color="#CCCCCC"> all the</font><font color="#E5E5E5"> level</font><font color="#CCCCCC"> five</font><font color="#E5E5E5"> stuff and</font>

264
00:11:21,879 --> 00:11:26,679
below that you have<font color="#CCCCCC"> 5ll</font><font color="#E5E5E5"> which is the</font>

265
00:11:24,339 --> 00:11:28,629
hardware dependent implementation and

266
00:11:26,679 --> 00:11:31,389
one of the great things about this is

267
00:11:28,629 --> 00:11:34,449
everything here with the exception<font color="#E5E5E5"> to</font>

268
00:11:31,389 --> 00:11:36,160
<font color="#E5E5E5">file</font><font color="#CCCCCC"> l is written in c which means that</font>

269
00:11:34,449 --> 00:11:38,349
it's portable to anything you want you

270
00:11:36,160 --> 00:11:40,089
<font color="#E5E5E5">could relax</font><font color="#CCCCCC"> the separate d plus d</font><font color="#E5E5E5"> minus</font>

271
00:11:38,350 --> 00:11:44,230
<font color="#E5E5E5">pins and put this to something that is</font>

272
00:11:40,089 --> 00:11:46,389
slower than<font color="#E5E5E5"> m0</font><font color="#CCCCCC"> + 40 megahertz on</font><font color="#E5E5E5"> and it</font>

273
00:11:44,230 --> 00:11:47,920
<font color="#E5E5E5">would work just fine</font><font color="#CCCCCC"> so what I'm going</font>

274
00:11:46,389 --> 00:11:49,689
to do now is I'm<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> start actually</font>

275
00:11:47,920 --> 00:11:53,019
slightly below this you're just going to

276
00:11:49,689 --> 00:11:58,569
work our way up<font color="#E5E5E5"> going over the basics of</font>

277
00:11:53,019 --> 00:12:01,360
<font color="#E5E5E5">USB to start with we got electrical</font><font color="#CCCCCC"> I</font>

278
00:11:58,569 --> 00:12:02,889
mean everything's basically wires<font color="#E5E5E5"> and</font>

279
00:12:01,360 --> 00:12:05,529
one of the cool things about us because

280
00:12:02,889 --> 00:12:07,839
they actually<font color="#E5E5E5"> standardized the wiring</font>

281
00:12:05,529 --> 00:12:09,490
<font color="#E5E5E5">color</font><font color="#CCCCCC"> so if you cut open any spec</font>

282
00:12:07,839 --> 00:12:13,179
compliant USB cable you'll find these

283
00:12:09,490 --> 00:12:17,170
four<font color="#E5E5E5"> colors red is 5 volts</font><font color="#CCCCCC"> ground is</font>

284
00:12:13,179 --> 00:12:18,100
<font color="#E5E5E5">black</font><font color="#CCCCCC"> duplicity</font><font color="#E5E5E5"> minus</font><font color="#CCCCCC"> are white and</font>

285
00:12:17,170 --> 00:12:20,170
<font color="#E5E5E5">green and I act</font>

286
00:12:18,100 --> 00:12:22,600
I forget<font color="#E5E5E5"> which</font><font color="#CCCCCC"> ones</font><font color="#E5E5E5"> which was largely</font>

287
00:12:20,170 --> 00:12:24,430
<font color="#CCCCCC">doesn't matter</font>

288
00:12:22,600 --> 00:12:27,009
as for the schematic this is<font color="#E5E5E5"> the</font>

289
00:12:24,430 --> 00:12:28,959
schematic that I used and the thing

290
00:12:27,009 --> 00:12:31,480
about<font color="#E5E5E5"> hardware</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> it's really</font><font color="#CCCCCC"> hard to</font>

291
00:12:28,959 --> 00:12:35,589
make patches<font color="#CCCCCC"> so you tend to put in a lot</font>

292
00:12:31,480 --> 00:12:39,130
of extra stuff<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example USB</font>

293
00:12:35,589 --> 00:12:42,579
<font color="#E5E5E5">low-speed requires a</font><font color="#CCCCCC"> I think the pull up</font>

294
00:12:39,130 --> 00:12:46,089
on the<font color="#CCCCCC"> d- pin to let</font><font color="#E5E5E5"> it know that</font><font color="#CCCCCC"> it's</font>

295
00:12:42,579 --> 00:12:48,670
low speed<font color="#E5E5E5"> but you also put in a pull up</font>

296
00:12:46,089 --> 00:12:51,670
on the<font color="#CCCCCC"> d+ just in case you get</font><font color="#E5E5E5"> backwards</font>

297
00:12:48,670 --> 00:12:53,349
<font color="#CCCCCC">also put its provisions for pull downs</font>

298
00:12:51,670 --> 00:12:54,939
<font color="#E5E5E5">in case something had to be pulled down</font>

299
00:12:53,350 --> 00:12:57,009
for some reason you put in shunt

300
00:12:54,940 --> 00:12:58,899
resistors and a whole bunch of ESD

301
00:12:57,009 --> 00:13:02,380
protection basically if you<font color="#E5E5E5"> move all the</font>

302
00:12:58,899 --> 00:13:03,699
extraneous fluff your<font color="#E5E5E5"> schematic look</font>

303
00:13:02,380 --> 00:13:06,399
like this

304
00:13:03,699 --> 00:13:07,899
so in terms of<font color="#E5E5E5"> of wiring</font><font color="#CCCCCC"> it's it's not</font>

305
00:13:06,399 --> 00:13:11,290
too bad to get it working

306
00:13:07,899 --> 00:13:13,540
and as for traces this is what the PCB

307
00:13:11,290 --> 00:13:17,319
end up looking like<font color="#E5E5E5"> i'll go into that</font>

308
00:13:13,540 --> 00:13:21,730
later but if you plug this<font color="#E5E5E5"> this PCB</font><font color="#CCCCCC"> if</font>

309
00:13:17,319 --> 00:13:25,209
<font color="#E5E5E5">you plug this into a</font><font color="#CCCCCC"> raspberry pi</font><font color="#E5E5E5"> it is</font>

310
00:13:21,730 --> 00:13:28,180
going to say this new<font color="#CCCCCC"> low speed device</font>

311
00:13:25,209 --> 00:13:30,430
number four and then it's going to give

312
00:13:28,180 --> 00:13:32,138
a descriptor error and the fact that it

313
00:13:30,430 --> 00:13:34,060
<font color="#E5E5E5">says</font><font color="#CCCCCC"> low-speed device</font><font color="#E5E5E5"> means that we</font>

314
00:13:32,139 --> 00:13:36,519
actually got<font color="#CCCCCC"> to pull up correct so so so</font>

315
00:13:34,060 --> 00:13:37,689
great that means the hardware<font color="#E5E5E5"> seems</font>

316
00:13:36,519 --> 00:13:40,540
correct

317
00:13:37,689 --> 00:13:42,219
incidentally the the error<font color="#E5E5E5"> minus 32 if</font>

318
00:13:40,540 --> 00:13:45,279
you look<font color="#E5E5E5"> up that error note that's a</font>

319
00:13:42,220 --> 00:13:47,829
pipe which just means that<font color="#CCCCCC"> had tried to</font>

320
00:13:45,279 --> 00:13:50,110
access<font color="#CCCCCC"> end point zero the configuration</font>

321
00:13:47,829 --> 00:13:52,269
pipe<font color="#E5E5E5"> and what we haven't written any</font>

322
00:13:50,110 --> 00:13:54,610
code yet so it didn't get anything back

323
00:13:52,269 --> 00:13:56,110
so yeah broken pipe that makes a lot of

324
00:13:54,610 --> 00:13:58,630
sense

325
00:13:56,110 --> 00:14:01,389
<font color="#E5E5E5">ok</font><font color="#CCCCCC"> that's the physical stuff</font><font color="#E5E5E5"> that's all</font>

326
00:13:58,630 --> 00:14:04,149
the electrical stuff<font color="#CCCCCC"> with just the</font>

327
00:14:01,389 --> 00:14:06,189
wiring<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> talk about signaling</font><font color="#CCCCCC"> talk</font>

328
00:14:04,149 --> 00:14:13,269
<font color="#E5E5E5">about what gets sent over those wires</font>

329
00:14:06,189 --> 00:14:16,719
USB has three states there's JK<font color="#CCCCCC"> and s0</font>

330
00:14:13,269 --> 00:14:19,630
<font color="#CCCCCC">k-state looks like this a state looks</font>

331
00:14:16,720 --> 00:14:20,800
like this<font color="#CCCCCC"> in SC 0 looks like that i</font>

332
00:14:19,630 --> 00:14:23,500
always<font color="#E5E5E5"> get the case statement a</font>

333
00:14:20,800 --> 00:14:25,959
<font color="#CCCCCC">statement up largely doesn't matter</font>

334
00:14:23,500 --> 00:14:27,670
<font color="#E5E5E5">I</font><font color="#CCCCCC"> USB</font><font color="#E5E5E5"> is concerned about the transition</font>

335
00:14:25,959 --> 00:14:29,138
from one to the other and in fact<font color="#E5E5E5"> low</font>

336
00:14:27,670 --> 00:14:30,410
<font color="#E5E5E5">speed and</font><font color="#CCCCCC"> high speed the case they're</font>

337
00:14:29,139 --> 00:14:33,470
low speed

338
00:14:30,410 --> 00:14:37,730
full speed<font color="#CCCCCC"> the case</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> j skatin</font><font color="#E5E5E5"> case</font>

339
00:14:33,470 --> 00:14:39,980
<font color="#CCCCCC">taters are opposite so there's no se one</font>

340
00:14:37,730 --> 00:14:42,529
<font color="#CCCCCC">if you have a single-ended</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> we're</font>

341
00:14:39,980 --> 00:14:44,000
both wires<font color="#CCCCCC"> are high that means</font><font color="#E5E5E5"> bad</font>

342
00:14:42,529 --> 00:14:46,939
things have happened you have a short

343
00:14:44,000 --> 00:14:48,529
<font color="#CCCCCC">you screwed up your code</font><font color="#E5E5E5"> whatever</font><font color="#CCCCCC"> the</font>

344
00:14:46,939 --> 00:14:51,170
host is going to disconnect you and<font color="#E5E5E5"> it's</font>

345
00:14:48,529 --> 00:14:53,089
<font color="#CCCCCC">gonna reset the line I think something</font>

346
00:14:51,170 --> 00:14:56,300
<font color="#E5E5E5">has gone horribly horribly wrong</font><font color="#CCCCCC"> which</font>

347
00:14:53,089 --> 00:14:59,420
<font color="#E5E5E5">it has and so you basically lose the</font>

348
00:14:56,300 --> 00:15:03,620
connection<font color="#E5E5E5"> so great you have the</font>

349
00:14:59,420 --> 00:15:06,680
<font color="#CCCCCC">signaling</font><font color="#E5E5E5"> decoding</font><font color="#CCCCCC"> States USB is is over</font>

350
00:15:03,620 --> 00:15:09,829
time itself<font color="#E5E5E5"> clocking and</font><font color="#CCCCCC"> it's concerned</font>

351
00:15:06,680 --> 00:15:12,079
about transitions<font color="#E5E5E5"> so if we</font><font color="#CCCCCC"> sampled at</font>

352
00:15:09,829 --> 00:15:13,758
one section and then wait<font color="#E5E5E5"> thirty two</font>

353
00:15:12,079 --> 00:15:16,370
clock cycles and sample again we can

354
00:15:13,759 --> 00:15:18,649
tell if it's the same sample<font color="#E5E5E5"> so it's a</font>

355
00:15:16,370 --> 00:15:21,980
<font color="#CCCCCC">zero</font><font color="#E5E5E5"> if it's a different sample</font><font color="#CCCCCC"> it's a</font>

356
00:15:18,649 --> 00:15:25,160
<font color="#E5E5E5">one</font><font color="#CCCCCC"> arm and</font><font color="#E5E5E5"> it would be really great</font>

357
00:15:21,980 --> 00:15:27,290
<font color="#E5E5E5">this is actually a</font><font color="#CCCCCC"> exclusive nor is that</font>

358
00:15:25,160 --> 00:15:28,819
the type of<font color="#E5E5E5"> gate which we don't have an</font>

359
00:15:27,290 --> 00:15:33,290
opcode for that<font color="#E5E5E5"> will have to use</font><font color="#CCCCCC"> to</font>

360
00:15:28,819 --> 00:15:37,399
<font color="#E5E5E5">opcodes</font><font color="#CCCCCC"> one to</font><font color="#E5E5E5"> negate and</font><font color="#CCCCCC"> 12 x</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> but</font>

361
00:15:33,290 --> 00:15:40,969
it's not too bad

362
00:15:37,399 --> 00:15:43,699
<font color="#E5E5E5">going up the stock a little more USB has</font>

363
00:15:40,970 --> 00:15:46,040
this<font color="#CCCCCC"> 8-bit preamble which is great this</font>

364
00:15:43,699 --> 00:15:51,019
is<font color="#E5E5E5"> basically where it goes from the</font>

365
00:15:46,040 --> 00:15:52,490
<font color="#E5E5E5">k-state to the</font><font color="#CCCCCC"> daystate k</font><font color="#E5E5E5"> jkjk</font><font color="#CCCCCC"> and the</font>

366
00:15:51,019 --> 00:15:54,829
nice thing about this is each bit

367
00:15:52,490 --> 00:15:57,529
members<font color="#CCCCCC"> 32 cycles</font><font color="#E5E5E5"> and if you do the math</font>

368
00:15:54,829 --> 00:15:59,989
that means we have actually 256 cycles

369
00:15:57,529 --> 00:16:02,600
before the start of data<font color="#E5E5E5"> and that's a</font>

370
00:15:59,990 --> 00:16:05,389
ton of time to get synchronized to the

371
00:16:02,600 --> 00:16:06,589
pulse which again that means<font color="#E5E5E5"> that we're</font>

372
00:16:05,389 --> 00:16:07,819
probably going to be in pretty good

373
00:16:06,589 --> 00:16:11,089
shape and it goes to actually implement

374
00:16:07,819 --> 00:16:13,309
this<font color="#E5E5E5"> following that is the data section</font>

375
00:16:11,089 --> 00:16:15,079
which is up to<font color="#E5E5E5"> on low speed</font><font color="#CCCCCC"> we're</font>

376
00:16:13,309 --> 00:16:18,050
fortunate here<font color="#E5E5E5"> that</font><font color="#CCCCCC"> were limited to 11</font>

377
00:16:15,079 --> 00:16:20,000
<font color="#E5E5E5">bytes of data at the most and then we</font>

378
00:16:18,050 --> 00:16:23,540
get this<font color="#CCCCCC"> single-ended 0 which just means</font>

379
00:16:20,000 --> 00:16:25,189
hits into the packet and that's when

380
00:16:23,540 --> 00:16:28,040
both of the lines go down normally<font color="#CCCCCC"> there</font>

381
00:16:25,189 --> 00:16:30,439
<font color="#E5E5E5">opposite for the k-state in</font><font color="#CCCCCC"> a state but</font>

382
00:16:28,040 --> 00:16:33,500
if both of the lines<font color="#E5E5E5"> are</font><font color="#CCCCCC"> zero volts that</font>

383
00:16:30,439 --> 00:16:35,779
means<font color="#CCCCCC"> it's into the packet</font><font color="#E5E5E5"> there's just</font>

384
00:16:33,500 --> 00:16:38,540
<font color="#E5E5E5">one more little</font><font color="#CCCCCC"> nibble you have to worry</font>

385
00:16:35,779 --> 00:16:41,510
about<font color="#CCCCCC"> and it's called bit stuffing and</font>

386
00:16:38,540 --> 00:16:43,579
it turns out that most

387
00:16:41,510 --> 00:16:45,319
that the wiring doesn't like it if you

388
00:16:43,580 --> 00:16:48,590
send the same value over and over again

389
00:16:45,320 --> 00:16:50,690
so if you send six ones<font color="#E5E5E5"> that means that</font>

390
00:16:48,590 --> 00:16:52,940
the line is going to be in the<font color="#E5E5E5"> k-state</font>

391
00:16:50,690 --> 00:16:55,550
<font color="#E5E5E5">or the</font><font color="#CCCCCC"> daystate repeatedly you have to</font>

392
00:16:52,940 --> 00:16:58,580
add<font color="#CCCCCC"> a zero you have</font><font color="#E5E5E5"> to flip</font>

393
00:16:55,550 --> 00:17:01,280
here's a scope screenshot of you can see

394
00:16:58,580 --> 00:17:02,900
the the preamble<font color="#E5E5E5"> the</font><font color="#CCCCCC"> 8-bit preamble on</font>

395
00:17:01,280 --> 00:17:04,129
the side and then<font color="#CCCCCC"> i sent a whole bunch</font>

396
00:17:02,900 --> 00:17:06,949
of ones and you can see the<font color="#E5E5E5"> state</font>

397
00:17:04,130 --> 00:17:09,800
flipping<font color="#CCCCCC"> there</font><font color="#E5E5E5"> because it has added</font>

398
00:17:06,949 --> 00:17:12,949
<font color="#CCCCCC">zeros</font><font color="#E5E5E5"> it stuffed in zeros that the</font>

399
00:17:09,800 --> 00:17:16,220
receiver is going to ignore<font color="#CCCCCC"> right so</font>

400
00:17:12,949 --> 00:17:18,320
what's important what can we ignore<font color="#CCCCCC"> and</font>

401
00:17:16,220 --> 00:17:21,319
what do we actually have to get accurate

402
00:17:18,319 --> 00:17:23,839
timing and sink that is incredibly

403
00:17:21,319 --> 00:17:25,159
important because<font color="#E5E5E5"> USB</font><font color="#CCCCCC"> itself clocking if</font>

404
00:17:23,839 --> 00:17:27,619
you get the timing wrong if you get the

405
00:17:25,160 --> 00:17:30,740
<font color="#E5E5E5">sync wrong you</font><font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> going to be able</font>

406
00:17:27,619 --> 00:17:32,239
to work at all<font color="#CCCCCC"> a bit stuffing is also</font>

407
00:17:30,740 --> 00:17:34,190
important if you forget<font color="#E5E5E5"> the stuff</font><font color="#CCCCCC"> bits</font>

408
00:17:32,240 --> 00:17:36,860
<font color="#CCCCCC">than the</font><font color="#E5E5E5"> signal</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the side is going to</font>

409
00:17:34,190 --> 00:17:38,600
come out completely wrong<font color="#E5E5E5"> you have to</font>

410
00:17:36,860 --> 00:17:41,929
handle<font color="#E5E5E5"> error conditions as well such as</font>

411
00:17:38,600 --> 00:17:43,879
<font color="#E5E5E5">keep alive the USB will send empty</font>

412
00:17:41,930 --> 00:17:47,960
packets to every once in<font color="#CCCCCC"> a while I have</font>

413
00:17:43,880 --> 00:17:50,660
<font color="#CCCCCC">to worry about framing</font><font color="#E5E5E5"> if you get into</font>

414
00:17:47,960 --> 00:17:52,700
the packet<font color="#CCCCCC"> after the sink you have to</font>

415
00:17:50,660 --> 00:17:54,860
recover gracefully<font color="#CCCCCC"> you have to handle</font>

416
00:17:52,700 --> 00:17:57,200
<font color="#E5E5E5">overflow for some reason the</font><font color="#CCCCCC"> host sounds</font>

417
00:17:54,860 --> 00:18:01,790
<font color="#E5E5E5">more than</font><font color="#CCCCCC"> 11 bites you have to handle</font>

418
00:17:57,200 --> 00:18:03,560
that case as well<font color="#E5E5E5"> not important you get</font>

419
00:18:01,790 --> 00:18:05,210
<font color="#E5E5E5">six bits because</font><font color="#CCCCCC"> you just look for the</font>

420
00:18:03,560 --> 00:18:08,120
<font color="#CCCCCC">KJ state at the beginning and that's</font>

421
00:18:05,210 --> 00:18:11,090
ages to synchronize<font color="#E5E5E5"> and for the most</font>

422
00:18:08,120 --> 00:18:14,330
part we only need to check one wire<font color="#E5E5E5"> we</font>

423
00:18:11,090 --> 00:18:18,199
<font color="#E5E5E5">don't have to check both</font><font color="#CCCCCC"> the plus</font><font color="#E5E5E5"> and a</font>

424
00:18:14,330 --> 00:18:21,470
<font color="#E5E5E5">minus</font><font color="#CCCCCC"> we can just check d +</font><font color="#E5E5E5"> see what it</font>

425
00:18:18,200 --> 00:18:23,240
was<font color="#CCCCCC"> 32 cycles ago and see if it's</font>

426
00:18:21,470 --> 00:18:25,790
changed now<font color="#CCCCCC"> the only time you need both</font>

427
00:18:23,240 --> 00:18:27,380
wires is if they're both<font color="#CCCCCC"> SC</font><font color="#E5E5E5"> 0 but the</font>

428
00:18:25,790 --> 00:18:29,629
nice thing is you just add the<font color="#E5E5E5"> two up</font>

429
00:18:27,380 --> 00:18:33,320
<font color="#E5E5E5">and if it's zero</font><font color="#CCCCCC"> and you know it's SC</font><font color="#E5E5E5"> 0</font>

430
00:18:29,630 --> 00:18:34,940
and<font color="#E5E5E5"> 1 other features that USB the spec</font>

431
00:18:33,320 --> 00:18:36,919
allows you to<font color="#CCCCCC"> miss up</font><font color="#E5E5E5"> to three packets</font>

432
00:18:34,940 --> 00:18:39,080
so if for some reason we missed the

433
00:18:36,920 --> 00:18:42,650
packet<font color="#CCCCCC"> the host will just try sending</font><font color="#E5E5E5"> it</font>

434
00:18:39,080 --> 00:18:45,949
again<font color="#E5E5E5"> now one thing I haven't mentioned</font>

435
00:18:42,650 --> 00:18:48,050
is<font color="#E5E5E5"> signal integrity and if there are any</font>

436
00:18:45,950 --> 00:18:50,990
analog people in the house<font color="#E5E5E5"> virtualize</font>

437
00:18:48,050 --> 00:18:55,428
<font color="#E5E5E5">this is my</font>

438
00:18:50,990 --> 00:18:58,400
<font color="#E5E5E5">trace for the USB signal pins and if</font>

439
00:18:55,429 --> 00:19:00,230
<font color="#CCCCCC">you're gonna look at this this this is</font>

440
00:18:58,400 --> 00:19:01,730
not a<font color="#CCCCCC"> match set at all</font>

441
00:19:00,230 --> 00:19:03,290
normally want differential routing where

442
00:19:01,730 --> 00:19:05,660
they should be as close together as

443
00:19:03,290 --> 00:19:08,360
possible it should be the same length

444
00:19:05,660 --> 00:19:10,040
<font color="#CCCCCC">I didn't do that here</font><font color="#E5E5E5"> and it turns out</font>

445
00:19:08,360 --> 00:19:14,510
that's just fine

446
00:19:10,040 --> 00:19:16,760
<font color="#E5E5E5">the scope that</font><font color="#CCCCCC"> I had access two had a</font>

447
00:19:14,510 --> 00:19:19,250
thing<font color="#CCCCCC"> that lets you generate an eye</font>

448
00:19:16,760 --> 00:19:21,890
diagram which lets you know how on spec

449
00:19:19,250 --> 00:19:24,860
you are<font color="#E5E5E5"> the USB</font><font color="#CCCCCC"> spec doesn't even</font>

450
00:19:21,890 --> 00:19:27,559
mention<font color="#CCCCCC"> I diagrams in the</font><font color="#E5E5E5"> low-speed</font>

451
00:19:24,860 --> 00:19:29,659
section<font color="#CCCCCC"> but this is what it looks like</font>

452
00:19:27,559 --> 00:19:33,290
and basically you want to avoid the red

453
00:19:29,660 --> 00:19:37,220
bits and it<font color="#CCCCCC"> we do that actually really</font>

454
00:19:33,290 --> 00:19:37,790
well<font color="#CCCCCC"> so even with the awful routing on</font>

455
00:19:37,220 --> 00:19:42,800
<font color="#CCCCCC">there</font>

456
00:19:37,790 --> 00:19:44,000
it works just fine actually it's a bit

457
00:19:42,800 --> 00:19:45,500
of a<font color="#CCCCCC"> lie</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> I went to</font><font color="#E5E5E5"> go take the</font>

458
00:19:44,000 --> 00:19:47,330
<font color="#CCCCCC">screenshot this is what</font><font color="#E5E5E5"> I ended up</font>

459
00:19:45,500 --> 00:19:49,640
getting and this is actually a text

460
00:19:47,330 --> 00:19:52,760
message<font color="#CCCCCC"> i sent to bunny I</font><font color="#E5E5E5"> why is it</font>

461
00:19:49,640 --> 00:19:54,710
failing<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> look at the beginning</font><font color="#CCCCCC"> you</font>

462
00:19:52,760 --> 00:19:57,320
<font color="#E5E5E5">can see there's a little</font><font color="#CCCCCC"> bumble on the</font>

463
00:19:54,710 --> 00:19:59,179
top and on the bottom that isn't in the

464
00:19:57,320 --> 00:20:01,820
other one<font color="#E5E5E5"> you can see this little bumper</font>

465
00:19:59,179 --> 00:20:04,070
<font color="#CCCCCC">dicked down</font><font color="#E5E5E5"> the red that's because</font>

466
00:20:01,820 --> 00:20:05,030
<font color="#CCCCCC">depends on the chip that i was using by</font>

467
00:20:04,070 --> 00:20:07,220
default

468
00:20:05,030 --> 00:20:08,660
<font color="#CCCCCC">we're set</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> high slew rate and so</font><font color="#E5E5E5"> for</font>

469
00:20:07,220 --> 00:20:10,550
<font color="#E5E5E5">any programmers in the house who have</font>

470
00:20:08,660 --> 00:20:12,200
had to do<font color="#CCCCCC"> firmware</font><font color="#E5E5E5"> now and you see that</font>

471
00:20:10,550 --> 00:20:15,919
section<font color="#CCCCCC"> highest</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> weight loss the rate</font>

472
00:20:12,200 --> 00:20:17,630
<font color="#E5E5E5">what that means is when it changes its</font>

473
00:20:15,920 --> 00:20:20,090
going to try and slam it higher<font color="#CCCCCC"> slam at</font>

474
00:20:17,630 --> 00:20:22,100
low as quick as possible<font color="#E5E5E5"> which it turns</font>

475
00:20:20,090 --> 00:20:25,309
out<font color="#CCCCCC"> 1.5</font><font color="#E5E5E5"> megahertz anything</font><font color="#CCCCCC"> below about</font>

476
00:20:22,100 --> 00:20:28,070
15 is low slew rate<font color="#E5E5E5"> and so as soon as</font><font color="#CCCCCC"> i</font>

477
00:20:25,309 --> 00:20:29,690
said<font color="#E5E5E5"> it too low it started looking good</font>

478
00:20:28,070 --> 00:20:32,840
like this and started passing tests

479
00:20:29,690 --> 00:20:34,670
which kind of a free tip<font color="#E5E5E5"> in</font><font color="#CCCCCC"> hardware</font>

480
00:20:32,840 --> 00:20:36,830
<font color="#E5E5E5">faster is not always better</font>

481
00:20:34,670 --> 00:20:38,600
<font color="#CCCCCC">so you might think faster rate I want</font>

482
00:20:36,830 --> 00:20:42,080
<font color="#E5E5E5">faster right now for this case we wanted</font>

483
00:20:38,600 --> 00:20:43,850
<font color="#E5E5E5">slow slow fix the problem and</font><font color="#CCCCCC"> pass the</font>

484
00:20:42,080 --> 00:20:47,059
signal integrity<font color="#E5E5E5"> capacity I diagram no</font>

485
00:20:43,850 --> 00:20:48,889
problem<font color="#E5E5E5"> and in fact because we have</font>

486
00:20:47,059 --> 00:20:51,200
separate<font color="#CCCCCC"> d+ and devices the bits don't</font>

487
00:20:48,890 --> 00:20:54,080
even come out at the same time<font color="#E5E5E5"> there's</font>

488
00:20:51,200 --> 00:20:56,120
like a<font color="#CCCCCC"> seven nano second delay this is</font>

489
00:20:54,080 --> 00:20:57,080
fine<font color="#CCCCCC"> the</font><font color="#E5E5E5"> heart respect doesn't care</font>

490
00:20:56,120 --> 00:20:58,790
about this

491
00:20:57,080 --> 00:21:01,428
we're still within spec even though the

492
00:20:58,790 --> 00:21:03,320
bits<font color="#E5E5E5"> there's a small delay so USB is a</font>

493
00:21:01,429 --> 00:21:07,130
very forgiving protocol in this

494
00:21:03,320 --> 00:21:10,730
sense if you're designing for<font color="#CCCCCC"> a chip you</font>

495
00:21:07,130 --> 00:21:13,430
can actually use a 32-point 768

496
00:21:10,730 --> 00:21:16,400
kilohertz crystal<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a very common</font>

497
00:21:13,430 --> 00:21:19,190
crystal<font color="#CCCCCC"> because</font><font color="#E5E5E5"> you divide down by</font><font color="#CCCCCC"> to</font>

498
00:21:16,400 --> 00:21:20,840
the<font color="#E5E5E5"> what 17</font><font color="#CCCCCC"> and you get a 1 Hertz</font><font color="#E5E5E5"> signal</font>

499
00:21:19,190 --> 00:21:22,910
out of it<font color="#CCCCCC"> so these crystals are very</font>

500
00:21:20,840 --> 00:21:27,439
cheap<font color="#CCCCCC"> the trip that</font><font color="#E5E5E5"> we're using takes</font>

501
00:21:22,910 --> 00:21:32,150
232 768 and then multiplies it by<font color="#E5E5E5"> 1464</font>

502
00:21:27,440 --> 00:21:34,760
<font color="#E5E5E5">which gets us exactly 47.9 7235</font><font color="#CCCCCC"> two</font>

503
00:21:32,150 --> 00:21:37,970
<font color="#E5E5E5">megahertz which it turns out is close</font>

504
00:21:34,760 --> 00:21:40,760
enough<font color="#CCCCCC"> like</font><font color="#E5E5E5"> USB and it's not that many</font>

505
00:21:37,970 --> 00:21:45,140
bits<font color="#CCCCCC"> that works just fine</font>

506
00:21:40,760 --> 00:21:46,700
<font color="#CCCCCC">I'd</font><font color="#E5E5E5"> like to take a moment to</font><font color="#CCCCCC"> tell me</font>

507
00:21:45,140 --> 00:21:48,440
<font color="#CCCCCC">that's the hardware that the low-level</font>

508
00:21:46,700 --> 00:21:50,330
signal and all that<font color="#CCCCCC"> i'd like</font><font color="#E5E5E5"> to take a</font>

509
00:21:48,440 --> 00:21:53,120
moment to talk about the<font color="#E5E5E5"> development</font>

510
00:21:50,330 --> 00:21:54,620
<font color="#CCCCCC">setup that</font><font color="#E5E5E5"> I used to develop this</font><font color="#CCCCCC"> and</font>

511
00:21:53,120 --> 00:21:57,530
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> on the top of one of the</font><font color="#CCCCCC"> boards</font>

512
00:21:54,620 --> 00:22:01,699
<font color="#CCCCCC">that was developing</font><font color="#E5E5E5"> USB on and on the</font>

513
00:21:57,530 --> 00:22:04,280
bottom is a<font color="#CCCCCC"> raspberry pi</font><font color="#E5E5E5"> raspberry PI's</font>

514
00:22:01,700 --> 00:22:07,460
are<font color="#CCCCCC"> as you know very</font><font color="#E5E5E5"> cheap</font><font color="#CCCCCC"> there</font>

515
00:22:04,280 --> 00:22:09,170
<font color="#CCCCCC">30 to 35</font><font color="#E5E5E5"> US dollars and</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> they're</font>

516
00:22:07,460 --> 00:22:12,590
everywhere everyone has a<font color="#CCCCCC"> raspberry pi</font>

517
00:22:09,170 --> 00:22:14,540
it seems<font color="#E5E5E5"> and there are in this case</font>

518
00:22:12,590 --> 00:22:18,050
<font color="#CCCCCC">three wires that run from the raspberry</font>

519
00:22:14,540 --> 00:22:21,440
<font color="#CCCCCC">pi</font><font color="#E5E5E5"> to the device under test and these</font>

520
00:22:18,050 --> 00:22:23,870
three wires are<font color="#CCCCCC"> single wire debug</font><font color="#E5E5E5"> single</font>

521
00:22:21,440 --> 00:22:25,700
<font color="#E5E5E5">idea</font><font color="#CCCCCC"> but clock</font><font color="#E5E5E5"> and reset and actually</font>

522
00:22:23,870 --> 00:22:29,360
<font color="#E5E5E5">the</font><font color="#CCCCCC"> resets optional</font><font color="#E5E5E5"> we can run two wires</font>

523
00:22:25,700 --> 00:22:30,800
<font color="#E5E5E5">over if we need and the board is</font><font color="#CCCCCC"> power</font>

524
00:22:29,360 --> 00:22:33,530
<font color="#E5E5E5">over</font><font color="#CCCCCC"> us base and so that's where we</font><font color="#E5E5E5"> get</font>

525
00:22:30,800 --> 00:22:38,060
the ground from<font color="#E5E5E5"> and on the Raspberry Pi</font>

526
00:22:33,530 --> 00:22:40,160
<font color="#CCCCCC">we run open OCD</font><font color="#E5E5E5"> and this is the</font>

527
00:22:38,060 --> 00:22:42,320
<font color="#CCCCCC">Raspberry Pi normally you'd get a</font><font color="#E5E5E5"> jtag</font>

528
00:22:40,160 --> 00:22:46,220
box and I know only<font color="#CCCCCC"> max makes</font><font color="#E5E5E5"> them for</font>

529
00:22:42,320 --> 00:22:49,310
50 euro<font color="#E5E5E5"> this is 35 bucks and it has</font>

530
00:22:46,220 --> 00:22:50,510
ethernet<font color="#E5E5E5"> it works remotely and the</font>

531
00:22:49,310 --> 00:22:52,970
greatest thing is if<font color="#E5E5E5"> you're developing</font>

532
00:22:50,510 --> 00:22:54,590
on it and you want to share your project

533
00:22:52,970 --> 00:22:56,210
with somebody else if you need help if

534
00:22:54,590 --> 00:22:58,459
you want to get somebody else developing

535
00:22:56,210 --> 00:23:00,260
on it<font color="#E5E5E5"> you just you're gonna send them</font>

536
00:22:58,460 --> 00:23:02,480
aboard anyway just toss the<font color="#E5E5E5"> Raspberry Pi</font>

537
00:23:00,260 --> 00:23:05,870
in the box as well when you mail it to

538
00:23:02,480 --> 00:23:08,180
them because you just have to get them

539
00:23:05,870 --> 00:23:10,250
running the same software<font color="#E5E5E5"> as you when</font>

540
00:23:08,180 --> 00:23:11,630
<font color="#CCCCCC">you</font><font color="#E5E5E5"> developing on on</font><font color="#CCCCCC"> windows or mac or</font>

541
00:23:10,250 --> 00:23:13,970
<font color="#CCCCCC">linux you have to download the tool</font>

542
00:23:11,630 --> 00:23:15,920
chain<font color="#E5E5E5"> you have to configure the jtag box</font>

543
00:23:13,970 --> 00:23:16,490
have to do all this with<font color="#CCCCCC"> the Raspberry</font>

544
00:23:15,920 --> 00:23:19,580
<font color="#CCCCCC">Pi</font><font color="#E5E5E5"> you</font>

545
00:23:16,490 --> 00:23:23,210
<font color="#E5E5E5">get an hdmi you tell it to local host</font>

546
00:23:19,580 --> 00:23:27,649
port<font color="#CCCCCC"> 3333 with gdb</font><font color="#E5E5E5"> you get stack traces</font>

547
00:23:23,210 --> 00:23:30,800
you get<font color="#CCCCCC"> loading code / GDB it's so easy</font>

548
00:23:27,650 --> 00:23:32,750
it's so powerful<font color="#E5E5E5"> and that's that's how</font>

549
00:23:30,800 --> 00:23:37,610
we do development now it's game-changing

550
00:23:32,750 --> 00:23:39,830
<font color="#E5E5E5">really so open OCD</font><font color="#CCCCCC"> you can do a single</font>

551
00:23:37,610 --> 00:23:41,719
are debugging bit banged over the<font color="#CCCCCC"> GPIO</font>

552
00:23:39,830 --> 00:23:44,510
<font color="#CCCCCC">pins and it works fantastically for</font>

553
00:23:41,720 --> 00:23:45,980
<font color="#E5E5E5">these small projects are there was some</font>

554
00:23:44,510 --> 00:23:48,320
other hardware used for developing a

555
00:23:45,980 --> 00:23:50,600
really nice scope that<font color="#CCCCCC"> I had access to</font>

556
00:23:48,320 --> 00:23:52,280
occasionally had access<font color="#E5E5E5"> to</font><font color="#CCCCCC"> bunnies</font>

557
00:23:50,600 --> 00:23:55,459
really really nice scope that actually

558
00:23:52,280 --> 00:23:57,920
did protocol debugging<font color="#E5E5E5"> and as soon as i</font>

559
00:23:55,460 --> 00:23:59,330
got it to decode<font color="#E5E5E5"> USB</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> i was was</font>

560
00:23:57,920 --> 00:24:02,690
set

561
00:23:59,330 --> 00:24:05,178
<font color="#CCCCCC">I got to use an open villa which is very</font>

562
00:24:02,690 --> 00:24:07,580
open source<font color="#E5E5E5"> USB logic analyzer that is</font>

563
00:24:05,179 --> 00:24:09,530
fantastic for decoding<font color="#CCCCCC"> kind of</font>

564
00:24:07,580 --> 00:24:12,620
questionable and dodging<font color="#E5E5E5"> USB packets to</font>

565
00:24:09,530 --> 00:24:14,960
come across and<font color="#CCCCCC"> I had access to a USB</font>

566
00:24:12,620 --> 00:24:17,330
<font color="#E5E5E5">beagle which is fantastic for decoding</font>

567
00:24:14,960 --> 00:24:19,850
<font color="#E5E5E5">nicely formatted packets to come across</font>

568
00:24:17,330 --> 00:24:21,290
and it has a very nice<font color="#E5E5E5"> UI</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is</font>

569
00:24:19,850 --> 00:24:24,770
kind of the order in which<font color="#E5E5E5"> i use them</font>

570
00:24:21,290 --> 00:24:26,120
first the the nice scope and then the

571
00:24:24,770 --> 00:24:28,220
really nice scope and then the<font color="#E5E5E5"> open</font>

572
00:24:26,120 --> 00:24:31,159
<font color="#CCCCCC">villa</font><font color="#E5E5E5"> and now i'm up to using a USB</font>

573
00:24:28,220 --> 00:24:32,510
<font color="#E5E5E5">beagle for decoding protocol and</font><font color="#CCCCCC"> i'm</font>

574
00:24:31,160 --> 00:24:35,330
going<font color="#E5E5E5"> to have some screenshots of what</font>

575
00:24:32,510 --> 00:24:39,170
that looks like later on<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> enough</font>

576
00:24:35,330 --> 00:24:42,500
about hardware<font color="#E5E5E5"> and and</font><font color="#CCCCCC"> setup let's talk</font>

577
00:24:39,170 --> 00:24:44,000
about the actual API that we use the

578
00:24:42,500 --> 00:24:46,820
low-level API remember this is the thing

579
00:24:44,000 --> 00:24:49,400
that's specifically tuned for<font color="#E5E5E5"> a 40</font>

580
00:24:46,820 --> 00:24:51,139
megahertz<font color="#CCCCCC"> cortex-m 0 plus</font><font color="#E5E5E5"> there's two</font>

581
00:24:49,400 --> 00:24:53,660
functions read and write

582
00:24:51,140 --> 00:24:56,360
they both follow the<font color="#CCCCCC"> chi</font><font color="#E5E5E5"> BOS can</font>

583
00:24:53,660 --> 00:24:58,070
<font color="#E5E5E5">convention of end again I because</font>

584
00:24:56,360 --> 00:24:59,899
they're designed to be called from an

585
00:24:58,070 --> 00:25:03,590
interrupt context<font color="#CCCCCC"> the very</font><font color="#E5E5E5"> timing</font>

586
00:24:59,900 --> 00:25:06,950
specific and you call us beef<font color="#CCCCCC"> I read</font><font color="#E5E5E5"> I</font>

587
00:25:03,590 --> 00:25:09,260
<font color="#E5E5E5">to get data from the pins and you call</font>

588
00:25:06,950 --> 00:25:11,660
<font color="#E5E5E5">us</font><font color="#CCCCCC"> b5 right to write data out the pins</font>

589
00:25:09,260 --> 00:25:14,750
<font color="#E5E5E5">you never actually really want to call</font>

590
00:25:11,660 --> 00:25:16,400
these functions yourself<font color="#E5E5E5"> unless you</font>

591
00:25:14,750 --> 00:25:19,070
happen to be<font color="#E5E5E5"> getting screenshots for a</font>

592
00:25:16,400 --> 00:25:21,320
presentation<font color="#CCCCCC"> instead</font><font color="#E5E5E5"> you want to call</font>

593
00:25:19,070 --> 00:25:23,389
<font color="#CCCCCC">random capture I</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> i'm</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to go</font>

594
00:25:21,320 --> 00:25:25,668
into later why this is necessary

595
00:25:23,389 --> 00:25:28,879
<font color="#E5E5E5">but this will take care of sending</font>

596
00:25:25,669 --> 00:25:32,239
responses when you want to respond to

597
00:25:28,879 --> 00:25:33,799
something that the<font color="#CCCCCC"> host descent</font><font color="#E5E5E5"> now</font>

598
00:25:32,239 --> 00:25:35,629
let's get into<font color="#E5E5E5"> just some some</font>

599
00:25:33,799 --> 00:25:38,959
programming tricks<font color="#CCCCCC"> we haven't actually</font>

600
00:25:35,629 --> 00:25:40,939
<font color="#CCCCCC">running written much code</font><font color="#E5E5E5"> but one thing</font>

601
00:25:38,959 --> 00:25:42,409
that we should go without saying but you

602
00:25:40,940 --> 00:25:46,099
don't really know until you get into

603
00:25:42,409 --> 00:25:49,669
this is a<font color="#E5E5E5"> you want to run from</font><font color="#CCCCCC"> Ram if</font>

604
00:25:46,099 --> 00:25:53,779
you run the code from flash flash isn't

605
00:25:49,669 --> 00:25:57,769
consistent<font color="#CCCCCC"> I mean with the particular</font>

606
00:25:53,779 --> 00:26:01,129
<font color="#CCCCCC">MCU that we use flash</font><font color="#E5E5E5"> had a cache of</font>

607
00:25:57,769 --> 00:26:02,749
anywhere between<font color="#CCCCCC"> 48 and</font><font color="#E5E5E5"> 64 bytes</font><font color="#CCCCCC"> they're</font>

608
00:26:01,129 --> 00:26:05,509
not really specific as to what it is and

609
00:26:02,749 --> 00:26:08,479
as soon as you exceed that it has this

610
00:26:05,509 --> 00:26:10,070
tendency to add delay slots and<font color="#CCCCCC"> delay</font>

611
00:26:08,479 --> 00:26:11,570
<font color="#CCCCCC">your code which is not what you want</font>

612
00:26:10,070 --> 00:26:13,729
when you want<font color="#E5E5E5"> performance-critical code</font>

613
00:26:11,570 --> 00:26:16,428
<font color="#CCCCCC">so if you're writing assembly code you</font>

614
00:26:13,729 --> 00:26:18,049
just put up at the top section and then

615
00:26:16,429 --> 00:26:21,619
give<font color="#E5E5E5"> it a</font><font color="#CCCCCC"> section name somewhere in data</font>

616
00:26:18,049 --> 00:26:22,789
and to put<font color="#CCCCCC"> ram text and data you add</font>

617
00:26:21,619 --> 00:26:25,639
something to your linker script<font color="#E5E5E5"> which</font>

618
00:26:22,789 --> 00:26:28,099
looks vaguely like this and then<font color="#CCCCCC"> GCC</font>

619
00:26:25,639 --> 00:26:31,609
will take care of loading it into the

620
00:26:28,099 --> 00:26:33,529
correct section<font color="#E5E5E5"> a little create</font><font color="#CCCCCC"> thunks</font>

621
00:26:31,609 --> 00:26:35,389
to get into your code and it's actually

622
00:26:33,529 --> 00:26:38,929
really easy to run code from<font color="#E5E5E5"> ram and get</font>

623
00:26:35,389 --> 00:26:41,119
cycle accuracy<font color="#E5E5E5"> also it goes without</font>

624
00:26:38,929 --> 00:26:46,609
saying<font color="#E5E5E5"> i use registers for storing data</font>

625
00:26:41,119 --> 00:26:49,579
<font color="#E5E5E5">if you have with the writer</font><font color="#CCCCCC"> we had a</font><font color="#E5E5E5"> lot</font>

626
00:26:46,609 --> 00:26:52,968
of<font color="#CCCCCC"> register starvation because arm</font><font color="#E5E5E5"> only</font>

627
00:26:49,579 --> 00:26:54,799
gives you eight to<font color="#CCCCCC"> twelve to fourteen</font>

628
00:26:52,969 --> 00:26:58,459
<font color="#E5E5E5">registers depending on how you counted</font>

629
00:26:54,799 --> 00:27:01,879
<font color="#E5E5E5">and there's one point where we had an</font>

630
00:26:58,459 --> 00:27:05,149
extra<font color="#E5E5E5"> cycle that we could use and so we</font>

631
00:27:01,879 --> 00:27:07,129
<font color="#E5E5E5">ended up using the stack for storage but</font>

632
00:27:05,149 --> 00:27:08,508
<font color="#E5E5E5">if you can use registers even if it's</font>

633
00:27:07,129 --> 00:27:11,958
one of the<font color="#CCCCCC"> high registers that you can't</font>

634
00:27:08,509 --> 00:27:13,129
do math with<font color="#E5E5E5"> and finally you when you</font>

635
00:27:11,959 --> 00:27:15,649
<font color="#E5E5E5">build this</font><font color="#CCCCCC"> Hardware you did build</font><font color="#E5E5E5"> to</font>

636
00:27:13,129 --> 00:27:17,509
<font color="#E5E5E5">write your building a reader and</font><font color="#CCCCCC"> the</font>

637
00:27:15,649 --> 00:27:19,998
writer<font color="#E5E5E5"> hook one to the other</font>

638
00:27:17,509 --> 00:27:21,709
<font color="#E5E5E5">it's used for testing and bits out 13</font>

639
00:27:19,999 --> 00:27:23,779
bits in the other<font color="#CCCCCC"> this is your test</font>

640
00:27:21,709 --> 00:27:26,659
bench<font color="#CCCCCC"> tested against itself before you</font>

641
00:27:23,779 --> 00:27:29,089
test with a host<font color="#CCCCCC"> and</font><font color="#E5E5E5"> in fact this is you</font>

642
00:27:26,659 --> 00:27:31,729
can see for this particular demo there

643
00:27:29,089 --> 00:27:34,639
are two different banks of pins that we

644
00:27:31,729 --> 00:27:38,120
use and it still works just fine

645
00:27:34,640 --> 00:27:40,400
<font color="#CCCCCC">ok let's talk about the</font><font color="#E5E5E5"> low-level CPI</font>

646
00:27:38,120 --> 00:27:44,419
<font color="#E5E5E5">two functions connect and disconnect</font>

647
00:27:40,400 --> 00:27:46,310
<font color="#E5E5E5">connects them to be inputs which lets it</font>

648
00:27:44,420 --> 00:27:47,210
<font color="#E5E5E5">connect which lets the</font><font color="#CCCCCC"> host</font><font color="#E5E5E5"> detect that</font>

649
00:27:46,310 --> 00:27:48,770
you plug it in

650
00:27:47,210 --> 00:27:50,330
disconnect<font color="#CCCCCC"> sense of two outputs and</font>

651
00:27:48,770 --> 00:27:51,800
<font color="#E5E5E5">makes it seem like you didn't</font><font color="#CCCCCC"> hear</font>

652
00:27:50,330 --> 00:27:53,419
nothing is plugged in<font color="#CCCCCC"> it</font><font color="#E5E5E5"> also to</font>

653
00:27:51,800 --> 00:27:55,790
simulate<font color="#E5E5E5"> pulling it out and</font><font color="#CCCCCC"> putting it</font>

654
00:27:53,420 --> 00:28:00,260
back in<font color="#CCCCCC"> call disconnect</font><font color="#E5E5E5"> and then connect</font>

655
00:27:55,790 --> 00:28:03,200
and then we have a received packet which

656
00:28:00,260 --> 00:28:05,330
is defined as<font color="#E5E5E5"> week which you would add a</font>

657
00:28:03,200 --> 00:28:07,580
function to override this in your code

658
00:28:05,330 --> 00:28:10,370
to do something like<font color="#CCCCCC"> call a</font><font color="#E5E5E5"> function to</font>

659
00:28:07,580 --> 00:28:13,010
process the data that just came in and

660
00:28:10,370 --> 00:28:16,669
you have this capture<font color="#E5E5E5"> packet function</font>

661
00:28:13,010 --> 00:28:20,570
and this will take against take care of

662
00:28:16,670 --> 00:28:22,520
the USB<font color="#E5E5E5"> state machine sending replies</font>

663
00:28:20,570 --> 00:28:24,590
when you need to

664
00:28:22,520 --> 00:28:27,260
<font color="#CCCCCC">with</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna go over some of that</font>

665
00:28:24,590 --> 00:28:28,909
the USB packets and why we need that

666
00:28:27,260 --> 00:28:32,870
capture function function<font color="#E5E5E5"> in the first</font>

667
00:28:28,910 --> 00:28:37,370
place<font color="#CCCCCC"> I said that a USB packet is 11</font>

668
00:28:32,870 --> 00:28:40,610
<font color="#E5E5E5">bites and what those bites are is is</font>

669
00:28:37,370 --> 00:28:45,229
<font color="#CCCCCC">kind of important</font><font color="#E5E5E5"> every packet starts</font>

670
00:28:40,610 --> 00:28:48,379
out with an<font color="#E5E5E5"> 8-bit did this is a</font><font color="#CCCCCC"> an 8-bit</font>

671
00:28:45,230 --> 00:28:50,780
sequence that specifies what that packet

672
00:28:48,380 --> 00:28:54,560
is that could be in<font color="#E5E5E5"> out setup data one</font>

673
00:28:50,780 --> 00:28:57,410
<font color="#E5E5E5">data 0a</font><font color="#CCCCCC"> Karnak if it's in our</font><font color="#E5E5E5"> setup</font><font color="#CCCCCC"> it's</font>

674
00:28:54,560 --> 00:28:59,899
an<font color="#CCCCCC"> 8-bit pit followed by a</font><font color="#E5E5E5"> 16-bit chunk</font>

675
00:28:57,410 --> 00:29:03,110
<font color="#E5E5E5">that's an endpoint</font><font color="#CCCCCC"> and address</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> ICRC</font>

676
00:28:59,900 --> 00:29:05,870
<font color="#CCCCCC">five</font><font color="#E5E5E5"> if it's a</font><font color="#CCCCCC"> day 20 dataone</font><font color="#E5E5E5"> it's an</font>

677
00:29:03,110 --> 00:29:09,050
8-pin followed by anywhere between<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> and</font>

678
00:29:05,870 --> 00:29:11,899
<font color="#CCCCCC">eight</font><font color="#E5E5E5"> data bytes followed by a</font><font color="#CCCCCC"> crc</font><font color="#E5E5E5"> 16</font>

679
00:29:09,050 --> 00:29:14,810
<font color="#E5E5E5">and if it's an acrobatic it's just a pit</font>

680
00:29:11,900 --> 00:29:18,710
<font color="#E5E5E5">there's no additional data</font>

681
00:29:14,810 --> 00:29:21,710
<font color="#E5E5E5">the thing is we need to respond really</font>

682
00:29:18,710 --> 00:29:24,710
quickly<font color="#E5E5E5"> so if the host sends us an in</font>

683
00:29:21,710 --> 00:29:27,050
packet<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> six-and-a-half bit</font><font color="#E5E5E5"> x</font>

684
00:29:24,710 --> 00:29:29,960
which is not that long at all to either

685
00:29:27,050 --> 00:29:31,250
send data<font color="#E5E5E5"> because that's the</font><font color="#CCCCCC"> host asking</font>

686
00:29:29,960 --> 00:29:34,520
for data so we actually have to send

687
00:29:31,250 --> 00:29:36,470
that data right away<font color="#E5E5E5"> or send an act tell</font>

688
00:29:34,520 --> 00:29:37,129
it<font color="#CCCCCC"> now where we're still working on hang</font>

689
00:29:36,470 --> 00:29:38,660
on

690
00:29:37,130 --> 00:29:39,980
if we don't do that it's just<font color="#E5E5E5"> going to</font>

691
00:29:38,660 --> 00:29:42,470
keep asking<font color="#E5E5E5"> because remember we have</font>

692
00:29:39,980 --> 00:29:43,790
three chances to respond<font color="#E5E5E5"> and if we don't</font>

693
00:29:42,470 --> 00:29:45,779
respond<font color="#E5E5E5"> it's going to assume that</font><font color="#CCCCCC"> we're</font>

694
00:29:43,790 --> 00:29:47,759
dead and<font color="#CCCCCC"> is going to reset the link</font>

695
00:29:45,779 --> 00:29:51,299
so we have to respond as quickly as

696
00:29:47,759 --> 00:29:55,559
possible and if the<font color="#E5E5E5"> host census data we</font>

697
00:29:51,299 --> 00:29:57,869
have to send a knack of the correct<font color="#E5E5E5"> we</font>

698
00:29:55,559 --> 00:29:59,879
have<font color="#E5E5E5"> to</font><font color="#CCCCCC"> enact as</font><font color="#E5E5E5"> soon as possible</font>

699
00:29:57,869 --> 00:30:01,738
now<font color="#E5E5E5"> one trick that you can use to make</font>

700
00:29:59,879 --> 00:30:03,869
this easier as some clever array

701
00:30:01,739 --> 00:30:06,269
misalignment<font color="#CCCCCC"> the thing about armed ships</font>

702
00:30:03,869 --> 00:30:10,559
is that<font color="#E5E5E5"> they're really really happy when</font>

703
00:30:06,269 --> 00:30:12,599
everything is 32-bit<font color="#E5E5E5"> aligned and if you</font>

704
00:30:10,559 --> 00:30:14,279
see there's this one bit at the front

705
00:30:12,599 --> 00:30:16,590
<font color="#E5E5E5">that is kind of</font><font color="#CCCCCC"> Miss aligning everything</font>

706
00:30:14,279 --> 00:30:18,509
<font color="#CCCCCC">what you</font><font color="#E5E5E5"> can do is you can put three</font>

707
00:30:16,590 --> 00:30:21,449
bites of padding in front of it to make

708
00:30:18,509 --> 00:30:26,129
it work<font color="#E5E5E5"> and then you can just cast the</font>

709
00:30:21,450 --> 00:30:29,129
the<font color="#E5E5E5"> endpoint address</font><font color="#CCCCCC"> crc</font><font color="#E5E5E5"> 16-bit chunk to</font>

710
00:30:26,129 --> 00:30:31,168
a<font color="#CCCCCC"> UN</font><font color="#E5E5E5"> 16 and</font><font color="#CCCCCC"> shifted off and it becomes</font>

711
00:30:29,129 --> 00:30:32,939
so much easier to do that then work with

712
00:30:31,169 --> 00:30:34,409
each of the individual<font color="#CCCCCC"> hi bites and then</font>

713
00:30:32,940 --> 00:30:35,099
do<font color="#CCCCCC"> the swapping in the masking in the</font>

714
00:30:34,409 --> 00:30:37,289
ending

715
00:30:35,099 --> 00:30:39,749
<font color="#CCCCCC">it's easier just to treat it as a un</font><font color="#E5E5E5"> 16</font>

716
00:30:37,289 --> 00:30:41,070
which you could do<font color="#E5E5E5"> by this clever</font>

717
00:30:39,749 --> 00:30:44,729
misalignment and there's actually a

718
00:30:41,070 --> 00:30:46,200
macro<font color="#E5E5E5"> preprocessor</font><font color="#CCCCCC"> granule buffers that</font>

719
00:30:44,729 --> 00:30:49,619
take care of this in the code that you

720
00:30:46,200 --> 00:30:52,259
can use if you want to<font color="#E5E5E5"> now we've got</font>

721
00:30:49,619 --> 00:30:55,109
these frames<font color="#CCCCCC"> the question we have to ask</font>

722
00:30:52,259 --> 00:30:57,089
is what's important in a frame<font color="#CCCCCC"> and</font><font color="#E5E5E5"> what</font>

723
00:30:55,109 --> 00:31:00,989
can we ignore what's not so important

724
00:30:57,089 --> 00:31:03,299
again<font color="#E5E5E5"> the</font><font color="#CCCCCC"> responses</font><font color="#E5E5E5"> really important if</font>

725
00:31:00,989 --> 00:31:06,479
you don't respond quickly<font color="#CCCCCC"> it's going to</font>

726
00:31:03,299 --> 00:31:08,999
reset the link<font color="#E5E5E5"> the frame sequence is</font>

727
00:31:06,479 --> 00:31:10,649
also important just as<font color="#E5E5E5"> if somebody said</font>

728
00:31:08,999 --> 00:31:13,889
hello when you respond with<font color="#CCCCCC"> anna banana</font>

729
00:31:10,649 --> 00:31:15,330
<font color="#CCCCCC">they're going</font><font color="#E5E5E5"> to be really confused and</font>

730
00:31:13,889 --> 00:31:17,218
not know what to say next

731
00:31:15,330 --> 00:31:21,239
so you have to respond with the correct

732
00:31:17,219 --> 00:31:23,309
response<font color="#E5E5E5"> with the correct sequence also</font>

733
00:31:21,239 --> 00:31:24,690
the outgoing<font color="#CCCCCC"> crc 16 is really important</font>

734
00:31:23,309 --> 00:31:27,570
that has to be correct if that's not

735
00:31:24,690 --> 00:31:30,690
correct<font color="#E5E5E5"> then again the system will reset</font>

736
00:31:27,570 --> 00:31:32,639
the link and it's also important if you

737
00:31:30,690 --> 00:31:35,070
<font color="#E5E5E5">there's a data</font><font color="#CCCCCC"> zero in a data</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> packet</font>

738
00:31:32,639 --> 00:31:36,359
<font color="#E5E5E5">you have to get that correct</font><font color="#CCCCCC"> aspect was</font>

739
00:31:35,070 --> 00:31:38,849
<font color="#CCCCCC">a little bit vague when it comes to that</font>

740
00:31:36,359 --> 00:31:40,889
<font color="#CCCCCC">but if you don't get it correct</font><font color="#E5E5E5"> it's not</font>

741
00:31:38,849 --> 00:31:43,139
<font color="#E5E5E5">it's going to think it's missing packets</font>

742
00:31:40,889 --> 00:31:46,349
and again<font color="#E5E5E5"> it'll reset the linker or</font>

743
00:31:43,139 --> 00:31:47,939
never get the data<font color="#E5E5E5"> fortune there's a lot</font>

744
00:31:46,349 --> 00:31:52,950
of stuff that's not so important that we

745
00:31:47,940 --> 00:31:54,599
<font color="#E5E5E5">could ignore we can send</font><font color="#CCCCCC"> knacks this is</font>

746
00:31:52,950 --> 00:31:56,759
what your keyboard does for example<font color="#E5E5E5"> the</font>

747
00:31:54,599 --> 00:31:58,080
<font color="#E5E5E5">host only asking for data is there any</font>

748
00:31:56,759 --> 00:31:59,370
data is there any data

749
00:31:58,080 --> 00:32:01,168
<font color="#E5E5E5">if you don't press the key there's no</font>

750
00:31:59,370 --> 00:32:05,639
data so the keyboard<font color="#E5E5E5"> will just</font><font color="#CCCCCC"> responded</font>

751
00:32:01,169 --> 00:32:08,460
the neck<font color="#E5E5E5"> the in out and set up packets</font>

752
00:32:05,640 --> 00:32:09,870
have a<font color="#CCCCCC"> seriously five</font><font color="#E5E5E5"> we never generate</font>

753
00:32:08,460 --> 00:32:13,200
them so we never have to worry about

754
00:32:09,870 --> 00:32:15,629
generating seriously<font color="#CCCCCC"> five we never even</font>

755
00:32:13,200 --> 00:32:17,610
have to check<font color="#CCCCCC"> their correct because we</font>

756
00:32:15,630 --> 00:32:20,669
don't have the time to do that so just

757
00:32:17,610 --> 00:32:24,059
<font color="#E5E5E5">assume the</font><font color="#CCCCCC"> crc five is correct</font><font color="#E5E5E5"> we can</font>

758
00:32:20,669 --> 00:32:26,010
also<font color="#E5E5E5"> know the</font><font color="#CCCCCC"> crc</font><font color="#E5E5E5"> 16</font><font color="#CCCCCC"> because we have 6.5</font>

759
00:32:24,059 --> 00:32:28,590
<font color="#CCCCCC">bit</font><font color="#E5E5E5"> time to respond and that's probably</font>

760
00:32:26,010 --> 00:32:30,299
not enough time to generate a<font color="#CCCCCC"> crc</font><font color="#E5E5E5"> of the</font>

761
00:32:28,590 --> 00:32:32,820
package will just assume<font color="#CCCCCC"> is correct</font><font color="#E5E5E5"> and</font>

762
00:32:30,299 --> 00:32:34,740
<font color="#CCCCCC">was</font><font color="#E5E5E5"> throw up our hands</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> also</font>

763
00:32:32,820 --> 00:32:37,080
ignore the address from the<font color="#CCCCCC"> in-n-out</font><font color="#E5E5E5"> and</font>

764
00:32:34,740 --> 00:32:39,330
<font color="#CCCCCC">setup will just assume</font><font color="#E5E5E5"> that the hub has</font>

765
00:32:37,080 --> 00:32:41,370
directed the<font color="#CCCCCC"> packet</font><font color="#E5E5E5"> to us and if it's</font>

766
00:32:39,330 --> 00:32:43,289
coming to us<font color="#CCCCCC"> after</font><font color="#E5E5E5"> seeing it on the pins</font>

767
00:32:41,370 --> 00:32:46,408
<font color="#E5E5E5">it's for us so we</font><font color="#CCCCCC"> can just ignore the</font>

768
00:32:43,289 --> 00:32:49,919
address<font color="#E5E5E5"> and this works reasonably well</font>

769
00:32:46,409 --> 00:32:53,370
now that we have all that<font color="#E5E5E5"> talk about the</font>

770
00:32:49,919 --> 00:32:56,039
state machine<font color="#CCCCCC"> the</font><font color="#E5E5E5"> USB spec is kind of</font>

771
00:32:53,370 --> 00:32:59,879
ugly and the state machine is kind of

772
00:32:56,039 --> 00:33:03,360
ugly this is from the USB 2.0 step<font color="#CCCCCC"> they</font>

773
00:32:59,880 --> 00:33:04,769
<font color="#E5E5E5">actually say this implements the</font><font color="#CCCCCC"> ones</font>

774
00:33:03,360 --> 00:33:06,479
<font color="#CCCCCC">that the implementation you're not</font>

775
00:33:04,769 --> 00:33:07,980
supposed to implement the state machine

776
00:33:06,480 --> 00:33:10,740
directly<font color="#E5E5E5"> supposed to use it as a</font>

777
00:33:07,980 --> 00:33:15,059
<font color="#E5E5E5">guideline</font><font color="#CCCCCC"> it's a mess</font>

778
00:33:10,740 --> 00:33:16,620
it takes<font color="#CCCCCC"> awhile to debug just</font><font color="#E5E5E5"> there's a</font>

779
00:33:15,059 --> 00:33:19,260
state machine<font color="#CCCCCC"> epi</font><font color="#E5E5E5"> that takes care of all</font>

780
00:33:16,620 --> 00:33:21,989
this for you<font color="#CCCCCC"> it's two functions send</font>

781
00:33:19,260 --> 00:33:24,210
data which you call when you want to

782
00:33:21,990 --> 00:33:26,279
send data that the<font color="#CCCCCC"> host will ask for</font>

783
00:33:24,210 --> 00:33:28,320
later so for example if you press<font color="#E5E5E5"> a key</font>

784
00:33:26,279 --> 00:33:31,950
<font color="#E5E5E5">and you want to send that as USB packet</font>

785
00:33:28,320 --> 00:33:33,720
in granham<font color="#E5E5E5"> you specify</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> zero and</font>

786
00:33:31,950 --> 00:33:35,309
some point in the future when the host

787
00:33:33,720 --> 00:33:38,159
says hey you got any data for me

788
00:33:35,309 --> 00:33:39,990
<font color="#E5E5E5">greynium well respond to data you</font>

789
00:33:38,159 --> 00:33:42,120
requested<font color="#CCCCCC"> and then there's this other</font>

790
00:33:39,990 --> 00:33:43,769
function<font color="#CCCCCC"> gradual</font><font color="#E5E5E5"> process that will just</font>

791
00:33:42,120 --> 00:33:45,719
turn the crank on that state machine<font color="#E5E5E5"> it</font>

792
00:33:43,769 --> 00:33:49,169
<font color="#CCCCCC">will you</font><font color="#E5E5E5"> get a packet capture your</font>

793
00:33:45,720 --> 00:33:52,409
<font color="#E5E5E5">passage</font><font color="#CCCCCC"> to the process and the USB state</font>

794
00:33:49,169 --> 00:33:54,960
machine goes and does its thing<font color="#E5E5E5"> and from</font>

795
00:33:52,409 --> 00:33:57,269
this point on<font color="#CCCCCC"> we're just</font><font color="#E5E5E5"> going to hand</font>

796
00:33:54,960 --> 00:33:59,549
<font color="#E5E5E5">wavy</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> the granule</font><font color="#E5E5E5"> now you</font>

797
00:33:57,269 --> 00:34:01,559
get to the user code which if you've

798
00:33:59,549 --> 00:34:03,899
<font color="#E5E5E5">done any sort of</font><font color="#CCCCCC"> us be yourself</font>

799
00:34:01,559 --> 00:34:05,549
this is what the configuration looks

800
00:34:03,899 --> 00:34:09,480
like this is how you define your

801
00:34:05,549 --> 00:34:10,560
particular application<font color="#CCCCCC"> it's a series of</font>

802
00:34:09,480 --> 00:34:12,300
functions

803
00:34:10,560 --> 00:34:13,529
and because one of the themes of this

804
00:34:12,300 --> 00:34:16,980
talk is what's important what's

805
00:34:13,530 --> 00:34:18,150
important from the structure<font color="#CCCCCC"> what's</font>

806
00:34:16,980 --> 00:34:19,350
important<font color="#E5E5E5"> and what's not important</font>

807
00:34:18,150 --> 00:34:21,930
because there's a lot of stuff that

808
00:34:19,350 --> 00:34:25,199
<font color="#CCCCCC">isn't important</font><font color="#E5E5E5"> to get descriptor</font>

809
00:34:21,929 --> 00:34:27,690
<font color="#E5E5E5">function is very important in USB</font><font color="#CCCCCC"> it</font>

810
00:34:25,199 --> 00:34:30,299
describes the device

811
00:34:27,690 --> 00:34:33,179
what kind of device it is<font color="#E5E5E5"> what things</font>

812
00:34:30,300 --> 00:34:34,890
that supports<font color="#E5E5E5"> so in the user code this</font>

813
00:34:33,179 --> 00:34:37,319
configuration structure they get

814
00:34:34,889 --> 00:34:38,790
descriptor<font color="#E5E5E5"> function is very important if</font>

815
00:34:37,320 --> 00:34:41,700
you don't implement that things won't

816
00:34:38,790 --> 00:34:43,650
work<font color="#CCCCCC"> get</font><font color="#E5E5E5"> receive buffer is also</font>

817
00:34:41,699 --> 00:34:45,210
important because when the<font color="#E5E5E5"> host send you</font>

818
00:34:43,650 --> 00:34:47,610
data<font color="#E5E5E5"> you need a place to put it and</font>

819
00:34:45,210 --> 00:34:49,800
<font color="#CCCCCC">grandma will call this function receive</font>

820
00:34:47,610 --> 00:34:51,720
data is also kind of important<font color="#E5E5E5"> when the</font>

821
00:34:49,800 --> 00:34:53,670
<font color="#E5E5E5">host send you data you need a function</font>

822
00:34:51,719 --> 00:34:55,350
call<font color="#E5E5E5"> but the rest of it's not really</font>

823
00:34:53,670 --> 00:34:56,909
important there's<font color="#E5E5E5"> set configuration</font>

824
00:34:55,350 --> 00:34:58,410
number and a couple of other things

825
00:34:56,909 --> 00:35:00,779
these are mostly hooks that could be

826
00:34:58,410 --> 00:35:05,759
used in your code if you want to do

827
00:35:00,780 --> 00:35:08,430
fancy<font color="#E5E5E5"> or things and with that if you</font>

828
00:35:05,760 --> 00:35:10,050
actually set up a<font color="#CCCCCC"> I get description</font>

829
00:35:08,430 --> 00:35:13,740
function<font color="#CCCCCC"> you start describing something</font>

830
00:35:10,050 --> 00:35:17,460
<font color="#CCCCCC">it</font><font color="#E5E5E5"> actually works this is a beagle</font>

831
00:35:13,740 --> 00:35:21,180
output from<font color="#CCCCCC"> I believe this is a keyboard</font>

832
00:35:17,460 --> 00:35:23,130
that<font color="#CCCCCC"> I was setting up it it works at</font>

833
00:35:21,180 --> 00:35:25,049
this point<font color="#CCCCCC"> the host can talk to the</font>

834
00:35:23,130 --> 00:35:27,330
device<font color="#E5E5E5"> and with the proper configuration</font>

835
00:35:25,050 --> 00:35:30,510
of the functions<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the setup process</font>

836
00:35:27,330 --> 00:35:31,860
works<font color="#E5E5E5"> and the setup process is basically</font>

837
00:35:30,510 --> 00:35:36,420
just asking for a whole bunch of

838
00:35:31,860 --> 00:35:40,770
descriptors it's not really useful or

839
00:35:36,420 --> 00:35:43,380
interesting at this point<font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to</font>

840
00:35:40,770 --> 00:35:45,090
talk about now that you have this you

841
00:35:43,380 --> 00:35:46,830
need to start working on the<font color="#CCCCCC"> US because</font>

842
00:35:45,090 --> 00:35:48,900
the user code<font color="#CCCCCC"> thing that you're</font><font color="#E5E5E5"> you as</font>

843
00:35:46,830 --> 00:35:51,120
the developer<font color="#CCCCCC"> going to do</font><font color="#E5E5E5"> and one of the</font>

844
00:35:48,900 --> 00:35:53,970
annoyances that you run into in this

845
00:35:51,120 --> 00:35:56,700
case is a every time you break into the

846
00:35:53,970 --> 00:35:58,589
debugger<font color="#CCCCCC"> the host is going to stop</font>

847
00:35:56,700 --> 00:36:02,609
sending<font color="#E5E5E5"> max saying hey don't have data</font>

848
00:35:58,590 --> 00:36:04,980
and it<font color="#E5E5E5"> the</font><font color="#CCCCCC"> host this</font><font color="#E5E5E5"> is an example of</font>

849
00:36:02,610 --> 00:36:07,890
what<font color="#E5E5E5"> looks like you can see the</font><font color="#CCCCCC"> host</font>

850
00:36:04,980 --> 00:36:09,330
reset the device and started sending

851
00:36:07,890 --> 00:36:11,970
setup package again but because<font color="#CCCCCC"> we're</font>

852
00:36:09,330 --> 00:36:12,790
<font color="#E5E5E5">broken</font><font color="#CCCCCC"> and the debugger</font><font color="#E5E5E5"> the host was</font>

853
00:36:11,970 --> 00:36:15,339
dead

854
00:36:12,790 --> 00:36:17,860
<font color="#CCCCCC">i mean the the</font><font color="#E5E5E5"> device is dead the</font><font color="#CCCCCC"> host</font>

855
00:36:15,340 --> 00:36:20,590
correctly detected the device was in a

856
00:36:17,860 --> 00:36:22,060
bad state<font color="#E5E5E5"> and it reset it unfortunate</font>

857
00:36:20,590 --> 00:36:25,090
this means if you continue the debugger

858
00:36:22,060 --> 00:36:26,830
<font color="#E5E5E5">to continue the device execution after</font>

859
00:36:25,090 --> 00:36:30,190
<font color="#E5E5E5">going into debugger it's going to be in</font>

860
00:36:26,830 --> 00:36:34,060
and kind of a weird state<font color="#CCCCCC"> so how do you</font>

861
00:36:30,190 --> 00:36:36,940
get around that<font color="#E5E5E5"> one tip is that global</font>

862
00:36:34,060 --> 00:36:39,220
variables are really handy

863
00:36:36,940 --> 00:36:41,620
<font color="#E5E5E5">here's an example of a function called</font>

864
00:36:39,220 --> 00:36:43,720
loop<font color="#E5E5E5"> and then have a loop count and if</font>

865
00:36:41,620 --> 00:36:45,640
we load this into the system<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can see</font>

866
00:36:43,720 --> 00:36:48,250
<font color="#E5E5E5">that it actually is keeping track of the</font>

867
00:36:45,640 --> 00:36:51,040
number of loops loops that we did<font color="#E5E5E5"> and</font>

868
00:36:48,250 --> 00:36:54,340
the nice thing about global variables is

869
00:36:51,040 --> 00:36:56,560
<font color="#E5E5E5">they're not actually</font><font color="#CCCCCC"> optimized away</font><font color="#E5E5E5"> if</font>

870
00:36:54,340 --> 00:36:58,660
we made the static<font color="#CCCCCC"> if we made it part of</font>

871
00:36:56,560 --> 00:37:00,759
the function<font color="#E5E5E5"> the optimizer might say hey</font>

872
00:36:58,660 --> 00:37:02,379
we never actually read this variable i'm

873
00:37:00,760 --> 00:37:04,540
just going to optimize it away and look

874
00:37:02,380 --> 00:37:06,310
<font color="#CCCCCC">at major program faster</font><font color="#E5E5E5"> which is not</font>

875
00:37:04,540 --> 00:37:07,600
what we want in this sort of thing so if

876
00:37:06,310 --> 00:37:11,049
you want to figure out what's going<font color="#E5E5E5"> on</font>

877
00:37:07,600 --> 00:37:15,580
<font color="#E5E5E5">global variables are wonderful for that</font>

878
00:37:11,050 --> 00:37:17,110
another tip<font color="#E5E5E5"> is that debugging for the</font>

879
00:37:15,580 --> 00:37:19,480
sort of thing we have<font color="#CCCCCC"> break points with</font>

880
00:37:17,110 --> 00:37:21,340
<font color="#E5E5E5">open</font><font color="#CCCCCC"> Oct</font><font color="#E5E5E5"> which is wonderful but they use</font>

881
00:37:19,480 --> 00:37:23,410
<font color="#CCCCCC">hardware break points which are</font><font color="#E5E5E5"> finite</font>

882
00:37:21,340 --> 00:37:26,620
<font color="#E5E5E5">resource in this particular</font><font color="#CCCCCC"> chip</font><font color="#E5E5E5"> there</font>

883
00:37:23,410 --> 00:37:28,720
to<font color="#CCCCCC"> hardware breakpoints</font><font color="#E5E5E5"> if we for</font>

884
00:37:26,620 --> 00:37:32,080
example break on this function<font color="#CCCCCC"> ch2</font>

885
00:37:28,720 --> 00:37:36,549
<font color="#CCCCCC">toxicity BOS function</font><font color="#E5E5E5"> we see that it has</font>

886
00:37:32,080 --> 00:37:37,900
a breakpoint at<font color="#CCCCCC"> 49</font><font color="#E5E5E5"> locations and if we</font>

887
00:37:36,550 --> 00:37:39,640
look at the<font color="#E5E5E5"> breakpoint information</font><font color="#CCCCCC"> we'll</font>

888
00:37:37,900 --> 00:37:42,790
<font color="#CCCCCC">see</font><font color="#E5E5E5"> yeah it did it went and put a</font>

889
00:37:39,640 --> 00:37:45,850
breakpoint at every single inline<font color="#E5E5E5"> place</font>

890
00:37:42,790 --> 00:37:47,770
for this function which is no good when

891
00:37:45,850 --> 00:37:50,620
we go to actually run this because it

892
00:37:47,770 --> 00:37:54,490
says a<font color="#E5E5E5"> hey you had too many</font><font color="#CCCCCC"> breakpoints</font>

893
00:37:50,620 --> 00:37:57,190
one is too many<font color="#CCCCCC"> breakpoints</font><font color="#E5E5E5"> we have</font><font color="#CCCCCC"> 21</font>

894
00:37:54,490 --> 00:38:01,029
<font color="#CCCCCC">breakpoint</font><font color="#E5E5E5"> give us 49</font><font color="#CCCCCC"> that's not what we</font>

895
00:37:57,190 --> 00:38:05,770
want<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> can actually borrow from</font>

896
00:38:01,030 --> 00:38:07,750
<font color="#CCCCCC">JavaScript</font><font color="#E5E5E5"> there's this function to this</font>

897
00:38:05,770 --> 00:38:09,910
this<font color="#CCCCCC"> preprocessor to find you</font><font color="#E5E5E5"> can do</font>

898
00:38:07,750 --> 00:38:12,430
when you say a defined<font color="#E5E5E5"> debugger to</font><font color="#CCCCCC"> bas a</font>

899
00:38:09,910 --> 00:38:15,129
<font color="#E5E5E5">break point</font><font color="#CCCCCC"> zero which is</font><font color="#E5E5E5"> nice you can</font>

900
00:38:12,430 --> 00:38:18,279
now use the keyword debugger in your

901
00:38:15,130 --> 00:38:19,480
code and<font color="#E5E5E5"> anytime</font><font color="#CCCCCC"> it's that it will break</font>

902
00:38:18,280 --> 00:38:21,970
into the debugger and this is really

903
00:38:19,480 --> 00:38:23,740
nice because this works across

904
00:38:21,970 --> 00:38:24,379
<font color="#E5E5E5">optimizations this works for inline</font>

905
00:38:23,740 --> 00:38:27,140
functions

906
00:38:24,380 --> 00:38:29,720
<font color="#E5E5E5">and compiling and reloading as such a</font>

907
00:38:27,140 --> 00:38:33,980
fast process that this is almost easier

908
00:38:29,720 --> 00:38:35,808
to use<font color="#E5E5E5"> then breaking into the debugger</font>

909
00:38:33,980 --> 00:38:38,000
with<font color="#CCCCCC"> ctrl c or break points or anything</font>

910
00:38:35,809 --> 00:38:42,079
like that

911
00:38:38,000 --> 00:38:45,440
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> great we have this all done we</font>

912
00:38:42,079 --> 00:38:46,849
have a bit<font color="#CCCCCC"> bank USB stack that works</font>

913
00:38:45,440 --> 00:38:49,940
that we can debug that we can figure out

914
00:38:46,849 --> 00:38:53,240
how it works

915
00:38:49,940 --> 00:38:57,440
what<font color="#E5E5E5"> now what can we actually do with it</font>

916
00:38:53,240 --> 00:39:00,500
could we maybe do a<font color="#E5E5E5"> the hard drive</font>

917
00:38:57,440 --> 00:39:02,420
<font color="#E5E5E5">no unfortunately we can't do a hard</font>

918
00:39:00,500 --> 00:39:05,210
drive because we're doing<font color="#E5E5E5"> USB low speed</font>

919
00:39:02,420 --> 00:39:07,309
and low speed only lets us have two

920
00:39:05,210 --> 00:39:09,680
kinds of descriptor<font color="#CCCCCC"> 2 kinds of</font><font color="#E5E5E5"> endpoints</font>

921
00:39:07,309 --> 00:39:12,890
<font color="#CCCCCC">we can have interrupt or</font><font color="#E5E5E5"> we could have</font>

922
00:39:09,680 --> 00:39:15,410
control and USB hard drives require bulk

923
00:39:12,890 --> 00:39:19,190
<font color="#E5E5E5">endpoints and if you try to make a hard</font>

924
00:39:15,410 --> 00:39:21,859
drive using bulk<font color="#E5E5E5"> endpoints</font><font color="#CCCCCC"> it won't</font><font color="#E5E5E5"> work</font>

925
00:39:19,190 --> 00:39:23,599
<font color="#CCCCCC">but it might work but depending on</font><font color="#E5E5E5"> the</font>

926
00:39:21,859 --> 00:39:26,240
<font color="#E5E5E5">operating system you're breaking spec</font>

927
00:39:23,599 --> 00:39:30,680
<font color="#E5E5E5">some operating</font><font color="#CCCCCC"> systems to</font><font color="#E5E5E5"> let it work</font>

928
00:39:26,240 --> 00:39:34,038
some<font color="#CCCCCC"> want</font><font color="#E5E5E5"> the cases the same we could</font>

929
00:39:30,680 --> 00:39:35,720
make a USB audio device know those<font color="#CCCCCC"> use</font>

930
00:39:34,039 --> 00:39:37,400
isochronous endpoints which again are

931
00:39:35,720 --> 00:39:41,118
not<font color="#E5E5E5"> one of the two kinds of endpoints we</font>

932
00:39:37,400 --> 00:39:43,759
can have what about a<font color="#CCCCCC"> midi device again</font>

933
00:39:41,119 --> 00:39:45,799
<font color="#CCCCCC">use</font><font color="#E5E5E5"> bulk and they have</font><font color="#CCCCCC"> three endpoints</font>

934
00:39:43,759 --> 00:39:48,349
with us below speed limited to two so

935
00:39:45,799 --> 00:39:51,440
you can't do keyboards<font color="#E5E5E5"> you care</font><font color="#CCCCCC"> midi</font>

936
00:39:48,349 --> 00:39:52,099
<font color="#E5E5E5">keyboards</font><font color="#CCCCCC"> you can't do Rita if</font><font color="#E5E5E5"> you</font>

937
00:39:51,440 --> 00:39:54,799
wanted to

938
00:39:52,099 --> 00:39:57,259
you can't do<font color="#E5E5E5"> serial devices because</font>

939
00:39:54,799 --> 00:39:59,750
those<font color="#E5E5E5"> require</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> endpoints and bulk</font>

940
00:39:57,259 --> 00:40:02,569
<font color="#CCCCCC">so what</font><font color="#E5E5E5"> can we do</font>

941
00:39:59,750 --> 00:40:05,930
well one of the things we could do is a

942
00:40:02,569 --> 00:40:08,150
dfu device from our update<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> a</font>

943
00:40:05,930 --> 00:40:10,578
<font color="#E5E5E5">suspect that the open local guys helped</font>

944
00:40:08,150 --> 00:40:14,000
develop that uses only<font color="#CCCCCC"> end point zero</font>

945
00:40:10,579 --> 00:40:16,190
and it's useful for<font color="#CCCCCC"> for more updates we</font>

946
00:40:14,000 --> 00:40:19,190
can come up with the<font color="#E5E5E5"> usb hid device like</font>

947
00:40:16,190 --> 00:40:21,559
a keyboard or<font color="#CCCCCC"> mouse</font><font color="#E5E5E5"> joystick these are</font>

948
00:40:19,190 --> 00:40:25,309
all under the USB human interface design

949
00:40:21,559 --> 00:40:27,140
spec and there's one more<font color="#E5E5E5"> we could do a</font>

950
00:40:25,309 --> 00:40:30,410
<font color="#E5E5E5">vendor define class which is I don't</font>

951
00:40:27,140 --> 00:40:32,480
know<font color="#E5E5E5"> USB teapot</font><font color="#CCCCCC"> whatever you want the</font>

952
00:40:30,410 --> 00:40:35,609
<font color="#E5E5E5">vendor device it has no class but it's</font>

953
00:40:32,480 --> 00:40:39,060
whatever you want it to be like zombocom

954
00:40:35,610 --> 00:40:44,040
<font color="#E5E5E5">going back to did</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> interfaces</font><font color="#CCCCCC"> the</font>

955
00:40:39,060 --> 00:40:46,860
human interface<font color="#CCCCCC"> script devices are easy</font>

956
00:40:44,040 --> 00:40:48,840
they come with<font color="#CCCCCC"> their own</font><font color="#E5E5E5"> descriptor the</font>

957
00:40:46,860 --> 00:40:51,240
tells<font color="#E5E5E5"> for example how many buttons on a</font>

958
00:40:48,840 --> 00:40:54,420
joystick how many keys on<font color="#E5E5E5"> a keyboard</font>

959
00:40:51,240 --> 00:40:56,609
how many buttons on a mouse<font color="#CCCCCC"> they</font>

960
00:40:54,420 --> 00:40:59,430
describe themselves and you plug them in

961
00:40:56,610 --> 00:41:01,200
and they just work<font color="#CCCCCC"> one of</font><font color="#E5E5E5"> the other</font>

962
00:40:59,430 --> 00:41:04,140
features of<font color="#CCCCCC"> USB</font><font color="#E5E5E5"> HID is that it doesn't</font>

963
00:41:01,200 --> 00:41:06,839
have to be input you can actually do

964
00:41:04,140 --> 00:41:10,290
<font color="#E5E5E5">vendor to find USB HID and you can send</font>

965
00:41:06,840 --> 00:41:12,960
data<font color="#CCCCCC"> over USB</font><font color="#E5E5E5"> HID</font><font color="#CCCCCC"> up here</font><font color="#E5E5E5"> is also really</font>

966
00:41:10,290 --> 00:41:17,790
easy on windows there's no drivers to

967
00:41:12,960 --> 00:41:20,850
install<font color="#E5E5E5"> it's handled by the USB HID</font><font color="#CCCCCC"> kit</font>

968
00:41:17,790 --> 00:41:23,759
<font color="#CCCCCC">USB sis driver and you plug it in and</font>

969
00:41:20,850 --> 00:41:25,680
<font color="#CCCCCC">windows and it just works there is win</font>

970
00:41:23,760 --> 00:41:29,760
<font color="#CCCCCC">USB</font><font color="#E5E5E5"> that kind of gives you similar</font>

971
00:41:25,680 --> 00:41:32,129
features to<font color="#CCCCCC"> mac</font><font color="#E5E5E5"> and linux where it</font>

972
00:41:29,760 --> 00:41:34,830
doesn't require a driver acquire it

973
00:41:32,130 --> 00:41:37,110
assumes that the application<font color="#E5E5E5"> will handle</font>

974
00:41:34,830 --> 00:41:39,210
all that it either involves reading a

975
00:41:37,110 --> 00:41:42,330
special string descriptor or you put<font color="#E5E5E5"> it</font>

976
00:41:39,210 --> 00:41:46,290
in the browser<font color="#E5E5E5"> the the binary data store</font>

977
00:41:42,330 --> 00:41:49,200
<font color="#E5E5E5">object with the USB 2.1 but</font><font color="#CCCCCC"> I managed to</font>

978
00:41:46,290 --> 00:41:50,340
get it working on my<font color="#E5E5E5"> Windows machine but</font>

979
00:41:49,200 --> 00:41:52,290
it didn't work on somebody<font color="#E5E5E5"> else's</font>

980
00:41:50,340 --> 00:41:53,910
<font color="#CCCCCC">windows machine which kind of violates</font>

981
00:41:52,290 --> 00:41:55,740
the<font color="#E5E5E5"> whole making things easy</font>

982
00:41:53,910 --> 00:41:59,279
so if you do<font color="#E5E5E5"> USB HID even with the</font>

983
00:41:55,740 --> 00:42:02,609
custom<font color="#CCCCCC"> vendor class it's easy</font><font color="#E5E5E5"> even on</font>

984
00:41:59,280 --> 00:42:04,350
<font color="#CCCCCC">windows</font><font color="#E5E5E5"> one of the problems</font><font color="#CCCCCC"> though is</font>

985
00:42:02,610 --> 00:42:06,630
that<font color="#E5E5E5"> USB it isn't super fast I mean</font>

986
00:42:04,350 --> 00:42:09,029
you're limited to every 10 milliseconds

987
00:42:06,630 --> 00:42:09,930
<font color="#E5E5E5">doing a poll</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> the smallest you can</font>

988
00:42:09,030 --> 00:42:11,640
make it

989
00:42:09,930 --> 00:42:14,640
and since we have<font color="#CCCCCC"> eight data bytes if</font>

990
00:42:11,640 --> 00:42:16,710
you do the math that's 800<font color="#CCCCCC"> by the second</font>

991
00:42:14,640 --> 00:42:18,359
<font color="#E5E5E5">it's not very fast but that's</font><font color="#CCCCCC"> ok if you</font>

992
00:42:16,710 --> 00:42:19,980
<font color="#E5E5E5">want to do an</font><font color="#CCCCCC"> updater for example</font><font color="#E5E5E5"> that's</font>

993
00:42:18,360 --> 00:42:22,260
we don't have much flash that's it's

994
00:42:19,980 --> 00:42:25,680
just it's fine really<font color="#CCCCCC"> 800</font><font color="#E5E5E5"> bites</font>

995
00:42:22,260 --> 00:42:29,130
<font color="#CCCCCC">I'll take</font><font color="#E5E5E5"> it</font>

996
00:42:25,680 --> 00:42:33,149
current project status<font color="#E5E5E5"> we have reliable</font>

997
00:42:29,130 --> 00:42:36,420
<font color="#CCCCCC">bi-directional transfers</font><font color="#E5E5E5"> that took</font>

998
00:42:33,150 --> 00:42:41,640
<font color="#CCCCCC">awhile we have a common code base that</font>

999
00:42:36,420 --> 00:42:43,770
works across multiple projects and we

1000
00:42:41,640 --> 00:42:47,339
have ports to a few different platforms

1001
00:42:43,770 --> 00:42:48,800
<font color="#CCCCCC">palawan</font><font color="#E5E5E5"> was of course the first</font><font color="#CCCCCC"> hardware</font>

1002
00:42:47,340 --> 00:42:50,090
<font color="#E5E5E5">project that I worked on</font>

1003
00:42:48,800 --> 00:42:54,110
<font color="#E5E5E5">I was the one that I did most</font>

1004
00:42:50,090 --> 00:42:58,640
development on it works under<font color="#CCCCCC"> GPOs</font><font color="#E5E5E5"> and</font>

1005
00:42:54,110 --> 00:43:02,150
<font color="#E5E5E5">uses a polling system timer there is a</font>

1006
00:42:58,640 --> 00:43:04,069
bootloader called joy that<font color="#CCCCCC"> I did</font><font color="#E5E5E5"> that's</font>

1007
00:43:02,150 --> 00:43:06,380
based off of the excellent fade<font color="#E5E5E5"> candy</font>

1008
00:43:04,070 --> 00:43:10,070
<font color="#E5E5E5">bootloader by</font><font color="#CCCCCC"> michael scott</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> scanline</font>

1009
00:43:06,380 --> 00:43:11,690
<font color="#E5E5E5">it has no real operating system and it</font>

1010
00:43:10,070 --> 00:43:14,360
does all the polling in a main loop

1011
00:43:11,690 --> 00:43:16,550
which is nice because that means we now

1012
00:43:14,360 --> 00:43:18,800
have this software working in two

1013
00:43:16,550 --> 00:43:21,110
completely different ones<font color="#CCCCCC"> polled ones</font>

1014
00:43:18,800 --> 00:43:25,820
interrupt driven and it works under both

1015
00:43:21,110 --> 00:43:27,650
<font color="#CCCCCC">there's also</font><font color="#E5E5E5"> port to the</font><font color="#CCCCCC"> TV tronix love</font>

1016
00:43:25,820 --> 00:43:29,930
to code and there's a talk tomorrow<font color="#E5E5E5"> bye</font>

1017
00:43:27,650 --> 00:43:31,310
bunny at 4pm<font color="#CCCCCC"> I should go see</font><font color="#E5E5E5"> it's</font>

1018
00:43:29,930 --> 00:43:34,970
completely amazing

1019
00:43:31,310 --> 00:43:37,070
this thing had two USB pins<font color="#CCCCCC"> two</font><font color="#E5E5E5"> pins on</font>

1020
00:43:34,970 --> 00:43:39,410
it that when this<font color="#CCCCCC"> was developed we</font>

1021
00:43:37,070 --> 00:43:42,320
didn't know if we could have a bit<font color="#CCCCCC"> bank</font>

1022
00:43:39,410 --> 00:43:45,620
USB stack at all but it is special<font color="#CCCCCC"> in</font>

1023
00:43:42,320 --> 00:43:47,090
that it gets its data<font color="#E5E5E5"> loaded</font><font color="#CCCCCC"> / audio</font><font color="#E5E5E5"> and</font>

1024
00:43:45,620 --> 00:43:49,040
<font color="#E5E5E5">it's really cool so we load the USB</font>

1025
00:43:47,090 --> 00:43:51,230
stack<font color="#CCCCCC"> it's for cables / audio</font><font color="#E5E5E5"> it's</font>

1026
00:43:49,040 --> 00:43:57,080
fantastic<font color="#CCCCCC"> you should go to the top</font>

1027
00:43:51,230 --> 00:43:58,790
tomorrow 4pm one other thing

1028
00:43:57,080 --> 00:44:02,960
what about<font color="#CCCCCC"> multi-threading well it turns</font>

1029
00:43:58,790 --> 00:44:08,509
out that that works for the love to code

1030
00:44:02,960 --> 00:44:10,820
<font color="#E5E5E5">product we actually have a USB polling</font>

1031
00:44:08,510 --> 00:44:14,060
thread running in its own thread with

1032
00:44:10,820 --> 00:44:17,390
another operating system<font color="#CCCCCC"> tpos</font><font color="#E5E5E5"> running in</font>

1033
00:44:14,060 --> 00:44:18,650
the background it occasionally skips a

1034
00:44:17,390 --> 00:44:22,069
packet<font color="#CCCCCC"> but</font><font color="#E5E5E5"> that's fine</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> remember</font>

1035
00:44:18,650 --> 00:44:27,170
<font color="#E5E5E5">USB get three tries so</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> it works</font>

1036
00:44:22,070 --> 00:44:31,100
relatively well I think for future work

1037
00:44:27,170 --> 00:44:34,280
<font color="#CCCCCC">i would</font><font color="#E5E5E5"> like to get a bootloader working</font>

1038
00:44:31,100 --> 00:44:40,100
<font color="#E5E5E5">an update</font><font color="#CCCCCC"> are working there</font><font color="#E5E5E5"> are USB HID</font>

1039
00:44:34,280 --> 00:44:44,060
updaters in existence<font color="#E5E5E5"> microchip makes</font>

1040
00:44:40,100 --> 00:44:45,049
<font color="#CCCCCC">one for their chips</font><font color="#E5E5E5"> there really aren't</font>

1041
00:44:44,060 --> 00:44:47,509
any very good

1042
00:44:45,050 --> 00:44:48,770
there's a<font color="#E5E5E5"> one open source one that I'm</font>

1043
00:44:47,510 --> 00:44:50,840
aware of

1044
00:44:48,770 --> 00:44:52,400
there is the dfu updater but that

1045
00:44:50,840 --> 00:44:56,540
requires drivers on<font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> I'd like a</font>

1046
00:44:52,400 --> 00:44:57,350
more full functional updater<font color="#E5E5E5"> before too</font>

1047
00:44:56,540 --> 00:44:58,460
long

1048
00:44:57,350 --> 00:45:00,680
<font color="#CCCCCC">it'd</font><font color="#E5E5E5"> be nice to get a good for the</font>

1049
00:44:58,460 --> 00:45:01,980
update as well<font color="#CCCCCC"> and i'd like more</font>

1050
00:45:00,680 --> 00:45:03,629
platform testing

1051
00:45:01,980 --> 00:45:04,950
because right now<font color="#CCCCCC"> I do a lot of</font>

1052
00:45:03,630 --> 00:45:07,740
development on linux and windows

1053
00:45:04,950 --> 00:45:10,950
<font color="#CCCCCC">occasionally have access to Mack it</font>

1054
00:45:07,740 --> 00:45:12,899
<font color="#CCCCCC">would be nice if i could test more host</font>

1055
00:45:10,950 --> 00:45:16,259
devices but it would also be nice to get

1056
00:45:12,900 --> 00:45:18,780
the port<font color="#CCCCCC"> two more cpus more than just</font>

1057
00:45:16,260 --> 00:45:22,140
the<font color="#E5E5E5"> two</font><font color="#CCCCCC"> kinetics chips that we have</font>

1058
00:45:18,780 --> 00:45:25,020
access to and just kind of a personal

1059
00:45:22,140 --> 00:45:27,450
thing<font color="#CCCCCC"> I'd like to produce palawan</font>

1060
00:45:25,020 --> 00:45:28,980
<font color="#E5E5E5">hardware myself but the most important</font>

1061
00:45:27,450 --> 00:45:32,730
thing is<font color="#CCCCCC"> i want</font><font color="#E5E5E5"> to get a functioning</font>

1062
00:45:28,980 --> 00:45:34,650
updated working<font color="#E5E5E5"> because when you write</font>

1063
00:45:32,730 --> 00:45:37,590
software<font color="#CCCCCC"> you make mistakes and you want</font>

1064
00:45:34,650 --> 00:45:38,940
to be able to update it and updating the

1065
00:45:37,590 --> 00:45:41,880
update is a bit of a challenge so you

1066
00:45:38,940 --> 00:45:44,190
want the updater to be as<font color="#E5E5E5"> rock solid as</font>

1067
00:45:41,880 --> 00:45:48,090
possible<font color="#E5E5E5"> because</font><font color="#CCCCCC"> I want to be able to</font>

1068
00:45:44,190 --> 00:45:51,630
<font color="#CCCCCC">set up</font><font color="#E5E5E5"> somebody a copy of binary so that</font>

1069
00:45:48,090 --> 00:45:52,440
<font color="#E5E5E5">i know it works for them</font><font color="#CCCCCC"> if it works for</font>

1070
00:45:51,630 --> 00:45:58,480
me

1071
00:45:52,440 --> 00:46:07,069
<font color="#E5E5E5">um thank you for listening</font>

1072
00:45:58,480 --> 00:46:10,549
[Applause]

1073
00:46:07,069 --> 00:46:13,009
<font color="#E5E5E5">I really didn't know that USB could be</font>

1074
00:46:10,549 --> 00:46:15,229
<font color="#E5E5E5">utilized in so many different ways so it</font>

1075
00:46:13,009 --> 00:46:17,660
was really great<font color="#E5E5E5"> now we have time for</font>

1076
00:46:15,229 --> 00:46:21,169
some questions<font color="#CCCCCC"> the questions okay</font><font color="#E5E5E5"> yeah</font>

1077
00:46:17,660 --> 00:46:23,690
so<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> if we have any questions from</font>

1078
00:46:21,170 --> 00:46:35,910
the<font color="#E5E5E5"> southeast take up the microphones in</font>

1079
00:46:23,690 --> 00:46:38,280
a nice row and<font color="#E5E5E5"> got one</font><font color="#CCCCCC"> yeah</font>

1080
00:46:35,910 --> 00:46:42,029
<font color="#CCCCCC">ya</font><font color="#E5E5E5"> know first of all thanks for your</font>

1081
00:46:38,280 --> 00:46:43,470
talk<font color="#E5E5E5"> on one of the important and not so</font>

1082
00:46:42,030 --> 00:46:46,740
important slides you mentioned that you

1083
00:46:43,470 --> 00:46:50,459
<font color="#E5E5E5">ignore the address</font><font color="#CCCCCC"> i can</font><font color="#E5E5E5"> perfectly</font>

1084
00:46:46,740 --> 00:46:53,399
<font color="#E5E5E5">imaging work that this is working on a</font>

1085
00:46:50,460 --> 00:46:54,450
post on top<font color="#CCCCCC"> of parts already connected</font>

1086
00:46:53,400 --> 00:46:57,960
<font color="#E5E5E5">to a host</font>

1087
00:46:54,450 --> 00:46:59,788
did you also test this on different

1088
00:46:57,960 --> 00:47:02,010
brands of<font color="#E5E5E5"> us perhaps because I</font><font color="#CCCCCC"> could</font>

1089
00:46:59,789 --> 00:47:04,799
<font color="#E5E5E5">imagine that to go horribly wrong</font>

1090
00:47:02,010 --> 00:47:07,559
the<font color="#CCCCCC"> question is I ignore the address</font>

1091
00:47:04,799 --> 00:47:08,670
<font color="#E5E5E5">right now there's</font><font color="#CCCCCC"> other to mention</font><font color="#E5E5E5"> that</font>

1092
00:47:07,559 --> 00:47:11,910
<font color="#CCCCCC">it's not important</font>

1093
00:47:08,670 --> 00:47:15,059
it may be that it's fine

1094
00:47:11,910 --> 00:47:16,710
it may be that we can't ignore the

1095
00:47:15,059 --> 00:47:19,049
address<font color="#E5E5E5"> maybe that we cannot ignore the</font>

1096
00:47:16,710 --> 00:47:20,490
address<font color="#CCCCCC"> i actually do capture the</font>

1097
00:47:19,049 --> 00:47:24,420
address because it's just another shift

1098
00:47:20,490 --> 00:47:27,538
and another store in my experience it's

1099
00:47:24,420 --> 00:47:29,280
been absolutely fine but the provision

1100
00:47:27,539 --> 00:47:35,039
is there to get it working

1101
00:47:29,280 --> 00:47:36,690
if it is a problem awesome questions

1102
00:47:35,039 --> 00:47:39,780
from microphone number<font color="#E5E5E5"> two</font>

1103
00:47:36,690 --> 00:47:42,180
hello<font color="#CCCCCC"> have a question so I'm wondering</font>

1104
00:47:39,780 --> 00:47:43,980
if it's simply the amount of cycles<font color="#CCCCCC"> and</font>

1105
00:47:42,180 --> 00:47:45,359
<font color="#E5E5E5">the speed of the cortex</font><font color="#CCCCCC"> x</font><font color="#E5E5E5"> 0 plus</font>

1106
00:47:43,980 --> 00:47:48,900
processor that's limiting from

1107
00:47:45,359 --> 00:47:50,640
implementing this in high speed or is

1108
00:47:48,900 --> 00:47:51,809
<font color="#CCCCCC">high speed USB significantly more</font>

1109
00:47:50,640 --> 00:47:55,500
complicated

1110
00:47:51,809 --> 00:47:57,059
<font color="#CCCCCC">I high-speed I think the question is if</font>

1111
00:47:55,500 --> 00:47:59,309
it's the number of cycles that that's

1112
00:47:57,059 --> 00:48:01,140
limiting<font color="#E5E5E5"> implementation of</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> you</font>

1113
00:47:59,309 --> 00:48:03,359
mean full speed full speed is the twelve

1114
00:48:01,140 --> 00:48:05,788
megabyte version<font color="#E5E5E5"> enough</font><font color="#CCCCCC"> high speed is</font>

1115
00:48:03,359 --> 00:48:06,538
480 megabits<font color="#CCCCCC"> yeah i'm asking about high</font>

1116
00:48:05,789 --> 00:48:11,400
speed as well

1117
00:48:06,539 --> 00:48:12,690
<font color="#CCCCCC">high speed of okay</font><font color="#E5E5E5"> all the way full</font>

1118
00:48:11,400 --> 00:48:14,760
speed is actually a bit of a challenge

1119
00:48:12,690 --> 00:48:17,160
<font color="#E5E5E5">and the reason why full speed doesn't</font>

1120
00:48:14,760 --> 00:48:19,170
work I'm going to say this in the hopes

1121
00:48:17,160 --> 00:48:21,569
that somebody proves me wrong but<font color="#E5E5E5"> full</font>

1122
00:48:19,170 --> 00:48:23,609
<font color="#E5E5E5">speed is impossible on this chip</font><font color="#CCCCCC"> i</font>

1123
00:48:21,569 --> 00:48:26,910
really hope somebody proves me wrong<font color="#E5E5E5"> but</font>

1124
00:48:23,609 --> 00:48:31,319
the problem is the load of the sample

1125
00:48:26,910 --> 00:48:33,808
<font color="#E5E5E5">takes one cycle the check to see the</font>

1126
00:48:31,319 --> 00:48:36,180
shift<font color="#E5E5E5"> takes another cycle the check to</font>

1127
00:48:33,809 --> 00:48:38,849
see if you need to exit<font color="#E5E5E5"> takes a cycle</font>

1128
00:48:36,180 --> 00:48:40,230
and then the add<font color="#CCCCCC"> one</font><font color="#E5E5E5"> to store the next</font>

1129
00:48:38,849 --> 00:48:42,299
value takes<font color="#E5E5E5"> two cycles</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> four</font>

1130
00:48:40,230 --> 00:48:43,799
cycles right there<font color="#E5E5E5"> and you don't even</font>

1131
00:48:42,299 --> 00:48:46,920
get to any<font color="#CCCCCC"> the bit stuffing anything</font>

1132
00:48:43,799 --> 00:48:48,869
like that<font color="#E5E5E5"> so 40 megahertz</font><font color="#CCCCCC"> /</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> 12</font>

1133
00:48:46,920 --> 00:48:49,390
megabits per second gives you this

1134
00:48:48,869 --> 00:48:53,200
number of

1135
00:48:49,390 --> 00:48:54,879
<font color="#CCCCCC">Michael's if you had a dma engine it</font><font color="#E5E5E5"> may</font>

1136
00:48:53,200 --> 00:48:57,279
<font color="#E5E5E5">be possible you can do stupid</font><font color="#CCCCCC"> mi tricks</font>

1137
00:48:54,880 --> 00:48:59,470
<font color="#E5E5E5">but these chips are so low end that they</font>

1138
00:48:57,280 --> 00:49:02,710
don't even have that you basically get a

1139
00:48:59,470 --> 00:49:05,290
<font color="#E5E5E5">cpu and that that's about it so I don't</font>

1140
00:49:02,710 --> 00:49:06,970
think<font color="#CCCCCC"> full</font><font color="#E5E5E5"> speed would be possible</font>

1141
00:49:05,290 --> 00:49:09,370
<font color="#CCCCCC">uh-huh the</font><font color="#E5E5E5"> high-speed</font><font color="#CCCCCC"> I think we'll be</font>

1142
00:49:06,970 --> 00:49:11,049
right out at this<font color="#CCCCCC"> point</font><font color="#E5E5E5"> also because</font>

1143
00:49:09,370 --> 00:49:12,670
<font color="#CCCCCC">high-speed has</font><font color="#E5E5E5"> the additional problem if</font>

1144
00:49:11,050 --> 00:49:14,410
you need to switch voltages<font color="#CCCCCC"> so it's no</font>

1145
00:49:12,670 --> 00:49:15,850
longer just running the pins directly to

1146
00:49:14,410 --> 00:49:19,089
the<font color="#CCCCCC"> cpu you have to have level</font>

1147
00:49:15,850 --> 00:49:20,920
translators and things like that so cool

1148
00:49:19,090 --> 00:49:23,350
<font color="#E5E5E5">questions from the internet</font>

1149
00:49:20,920 --> 00:49:24,130
yeah I got one question from the

1150
00:49:23,350 --> 00:49:26,650
internet

1151
00:49:24,130 --> 00:49:28,630
did you try to use sick rock for a USB

1152
00:49:26,650 --> 00:49:31,540
debugging<font color="#CCCCCC"> SS</font><font color="#E5E5E5"> open source and</font><font color="#CCCCCC"> works</font><font color="#E5E5E5"> with</font>

1153
00:49:28,630 --> 00:49:32,140
some pretty cheap hardware<font color="#E5E5E5"> that's not</font><font color="#CCCCCC"> a</font>

1154
00:49:31,540 --> 00:49:35,050
question

1155
00:49:32,140 --> 00:49:37,690
<font color="#CCCCCC">sig rock crushers gonna try using know</font>

1156
00:49:35,050 --> 00:49:39,520
<font color="#CCCCCC">I've never actually heard</font><font color="#E5E5E5"> of this so</font><font color="#CCCCCC"> I i</font>

1157
00:49:37,690 --> 00:49:41,980
<font color="#CCCCCC">I've never</font><font color="#E5E5E5"> tried using this</font><font color="#CCCCCC"> this</font>

1158
00:49:39,520 --> 00:49:43,480
particular platform<font color="#E5E5E5"> at the only</font><font color="#CCCCCC"> the</font>

1159
00:49:41,980 --> 00:49:44,770
<font color="#CCCCCC">buggers</font><font color="#E5E5E5"> are used where the beagle and</font>

1160
00:49:43,480 --> 00:49:47,050
<font color="#E5E5E5">the open villa</font>

1161
00:49:44,770 --> 00:49:51,280
<font color="#E5E5E5">I've never heard of this rock but I'm</font>

1162
00:49:47,050 --> 00:49:53,920
gonna have to check it out now<font color="#CCCCCC"> I was</font>

1163
00:49:51,280 --> 00:49:56,710
wondering whether it's not possible

1164
00:49:53,920 --> 00:49:58,570
<font color="#E5E5E5">using pulling right now using</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> timer</font>

1165
00:49:56,710 --> 00:50:02,530
interrupt<font color="#CCCCCC"> i imagine</font><font color="#E5E5E5"> whether you could</font>

1166
00:49:58,570 --> 00:50:04,180
use protection on for an<font color="#E5E5E5"> instructor</font><font color="#CCCCCC"> the</font>

1167
00:50:02,530 --> 00:50:07,420
questions we can use<font color="#E5E5E5"> edge detection for</font>

1168
00:50:04,180 --> 00:50:10,330
an interrupt vector<font color="#CCCCCC"> yes you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> and</font>

1169
00:50:07,420 --> 00:50:13,750
<font color="#CCCCCC">that's actually how this is designed to</font>

1170
00:50:10,330 --> 00:50:21,340
work<font color="#CCCCCC"> if I could do this</font>

1171
00:50:13,750 --> 00:50:23,890
yes<font color="#CCCCCC"> if you look at the</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> API</font><font color="#E5E5E5"> forget</font>

1172
00:50:21,340 --> 00:50:26,050
where it is<font color="#CCCCCC"> if you look</font><font color="#E5E5E5"> at the</font><font color="#CCCCCC"> API it's</font>

1173
00:50:23,890 --> 00:50:27,490
<font color="#E5E5E5">designed so that you hit an edge and</font><font color="#CCCCCC"> irq</font>

1174
00:50:26,050 --> 00:50:30,040
and then you call the capture function

1175
00:50:27,490 --> 00:50:33,580
but it's kind of a top-half<font color="#E5E5E5"> bottom half</font>

1176
00:50:30,040 --> 00:50:34,960
thing the<font color="#E5E5E5"> top half deals with handling</font>

1177
00:50:33,580 --> 00:50:37,240
the interrupt and sending<font color="#CCCCCC"> the</font><font color="#E5E5E5"> response</font>

1178
00:50:34,960 --> 00:50:40,780
back<font color="#CCCCCC"> the bottom half is designed to be</font>

1179
00:50:37,240 --> 00:50:42,430
running in this<font color="#CCCCCC"> polled loop so yes you</font>

1180
00:50:40,780 --> 00:50:44,050
do use<font color="#E5E5E5"> interrupt edge detection to</font>

1181
00:50:42,430 --> 00:50:45,339
capture the signal and then send<font color="#E5E5E5"> a</font>

1182
00:50:44,050 --> 00:50:50,140
response back but you do all of your

1183
00:50:45,340 --> 00:50:53,320
processing in the main loop<font color="#E5E5E5"> questions</font>

1184
00:50:50,140 --> 00:50:55,400
from over<font color="#E5E5E5"> there</font><font color="#CCCCCC"> affects how did you do</font>

1185
00:50:53,320 --> 00:50:58,279
the timing recovery you said you have

1186
00:50:55,400 --> 00:51:01,730
plenty of time and at the preamble<font color="#CCCCCC"> but</font>

1187
00:50:58,279 --> 00:51:03,200
yeah you know<font color="#E5E5E5"> accuracy and having plenty</font>

1188
00:51:01,730 --> 00:51:08,299
of time kind of like contradict

1189
00:51:03,200 --> 00:51:10,189
themselves the question<font color="#CCCCCC"> I'm actually</font>

1190
00:51:08,299 --> 00:51:13,700
kind of sad that<font color="#CCCCCC"> i had a slide where I</font>

1191
00:51:10,190 --> 00:51:17,059
<font color="#E5E5E5">described how that happens</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> you</font>

1192
00:51:13,700 --> 00:51:21,140
basically<font color="#CCCCCC"> synchronized to the pulses</font>

1193
00:51:17,059 --> 00:51:30,289
<font color="#CCCCCC">let's see where is it you</font><font color="#E5E5E5"> get these</font>

1194
00:51:21,140 --> 00:51:31,430
pulses at the beginning and<font color="#E5E5E5"> right</font><font color="#CCCCCC"> now</font>

1195
00:51:30,289 --> 00:51:33,529
<font color="#CCCCCC">it's here</font><font color="#E5E5E5"> somewhere</font>

1196
00:51:31,430 --> 00:51:35,390
so<font color="#CCCCCC"> you're counting</font><font color="#E5E5E5"> cycles between the</font>

1197
00:51:33,529 --> 00:51:37,039
<font color="#E5E5E5">not even you</font>

1198
00:51:35,390 --> 00:51:38,420
<font color="#E5E5E5">you at the beginning of this this up</font>

1199
00:51:37,039 --> 00:51:40,190
down up down what you do is you

1200
00:51:38,420 --> 00:51:41,960
continuously in<font color="#E5E5E5"> it's about a</font><font color="#CCCCCC"> for</font>

1201
00:51:40,190 --> 00:51:44,150
instruction loop which is very similar

1202
00:51:41,960 --> 00:51:46,130
to what it would take for full speed<font color="#E5E5E5"> but</font>

1203
00:51:44,150 --> 00:51:48,410
you keep comparing it with itself and

1204
00:51:46,130 --> 00:51:49,640
looking forward to change<font color="#E5E5E5"> and as soon as</font>

1205
00:51:48,410 --> 00:51:50,990
it changes you know<font color="#CCCCCC"> you're synched up</font>

1206
00:51:49,640 --> 00:51:53,750
<font color="#E5E5E5">with the beginning of the pulse</font>

1207
00:51:50,990 --> 00:51:55,459
<font color="#E5E5E5">yeah and from then on you you assume you</font>

1208
00:51:53,750 --> 00:51:58,369
might drift a little bit maybe but it's

1209
00:51:55,460 --> 00:52:03,289
only<font color="#CCCCCC"> 11 bites and so it ends up working</font>

1210
00:51:58,369 --> 00:52:04,819
just fine in the end<font color="#CCCCCC"> thanks</font><font color="#E5E5E5"> questions</font>

1211
00:52:03,289 --> 00:52:07,490
from microphone number<font color="#E5E5E5"> two</font>

1212
00:52:04,819 --> 00:52:09,950
can<font color="#E5E5E5"> you both and USB hop with your</font>

1213
00:52:07,490 --> 00:52:12,500
software<font color="#E5E5E5"> can</font><font color="#CCCCCC"> I build a USB hub with</font><font color="#E5E5E5"> the</font>

1214
00:52:09,950 --> 00:52:14,660
<font color="#E5E5E5">software USB hubs are defined in</font><font color="#CCCCCC"> chapter</font>

1215
00:52:12,500 --> 00:52:19,460
11<font color="#CCCCCC"> / the</font><font color="#E5E5E5"> spec which is about as many</font>

1216
00:52:14,660 --> 00:52:21,950
pages<font color="#E5E5E5"> chapters</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> through</font><font color="#CCCCCC"> ten</font><font color="#E5E5E5"> the other</font>

1217
00:52:19,460 --> 00:52:24,349
<font color="#CCCCCC">problems it would</font><font color="#E5E5E5"> be low speed only and</font>

1218
00:52:21,950 --> 00:52:26,808
USB requires that a hub handle both low

1219
00:52:24,349 --> 00:52:28,730
<font color="#E5E5E5">and full speed</font><font color="#CCCCCC"> so I don't think that</font>

1220
00:52:26,809 --> 00:52:31,640
will be possible not without changing

1221
00:52:28,730 --> 00:52:33,920
the chip and changing the<font color="#CCCCCC"> five</font><font color="#E5E5E5"> but it</font>

1222
00:52:31,640 --> 00:52:36,348
would just involve<font color="#E5E5E5"> handling more</font><font color="#CCCCCC"> food</font>

1223
00:52:33,920 --> 00:52:37,190
types<font color="#CCCCCC"> so it would be possible</font><font color="#E5E5E5"> to faster</font>

1224
00:52:36,349 --> 00:52:42,200
chip

1225
00:52:37,190 --> 00:52:47,450
<font color="#CCCCCC">yeah</font><font color="#E5E5E5"> questions from the internet</font>

1226
00:52:42,200 --> 00:52:49,879
<font color="#E5E5E5">I got</font><font color="#CCCCCC"> kids too short wants the first</font>

1227
00:52:47,450 --> 00:52:53,000
would be do you think highest<font color="#CCCCCC"> pts be</font>

1228
00:52:49,880 --> 00:52:55,130
would be possible<font color="#CCCCCC"> in external five</font><font color="#E5E5E5"> and</font>

1229
00:52:53,000 --> 00:53:00,710
what would be required to<font color="#E5E5E5"> put</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> took</font>

1230
00:52:55,130 --> 00:53:03,830
cortex m3 or<font color="#CCCCCC"> m4 processor so what's the</font>

1231
00:53:00,710 --> 00:53:08,030
first question again

1232
00:53:03,830 --> 00:53:14,450
<font color="#CCCCCC">do you think hi SB SB would be possible</font>

1233
00:53:08,030 --> 00:53:15,230
with an external Phi<font color="#E5E5E5"> the</font><font color="#CCCCCC"> h y5 I think it</font>

1234
00:53:14,450 --> 00:53:20,000
<font color="#E5E5E5">would be possible</font>

1235
00:53:15,230 --> 00:53:23,030
I mean with<font color="#E5E5E5"> they do have cortex-m</font><font color="#CCCCCC"> 0 0</font>

1236
00:53:20,000 --> 00:53:24,560
<font color="#CCCCCC">plus it has a USB five built-in</font><font color="#E5E5E5"> and so</font>

1237
00:53:23,030 --> 00:53:27,230
with an<font color="#CCCCCC"> extra fire of course it's</font>

1238
00:53:24,560 --> 00:53:29,150
possible<font color="#CCCCCC"> I mean something that actually</font>

1239
00:53:27,230 --> 00:53:31,040
does the decoding and streams it<font color="#E5E5E5"> in</font><font color="#CCCCCC"> i</font>

1240
00:53:29,150 --> 00:53:34,070
think<font color="#E5E5E5"> it would be possible</font>

1241
00:53:31,040 --> 00:53:37,700
the second question is could<font color="#E5E5E5"> it be</font>

1242
00:53:34,070 --> 00:53:38,900
ported to an m3 and<font color="#E5E5E5"> m4 the cash makes</font>

1243
00:53:37,700 --> 00:53:41,899
things a little bit weird in a cast

1244
00:53:38,900 --> 00:53:44,180
member of m3 and m4<font color="#CCCCCC"> have caches about</font>

1245
00:53:41,900 --> 00:53:47,000
<font color="#CCCCCC">their faster</font><font color="#E5E5E5"> and so it definitely could</font>

1246
00:53:44,180 --> 00:53:49,399
be ported to an m3 and m4<font color="#CCCCCC"> you just have</font>

1247
00:53:47,000 --> 00:53:51,980
to insert wait states<font color="#E5E5E5"> in fact</font><font color="#CCCCCC"> with the</font>

1248
00:53:49,400 --> 00:53:53,300
faster<font color="#E5E5E5"> chip you might be able to do a</font>

1249
00:53:51,980 --> 00:53:55,040
full speed

1250
00:53:53,300 --> 00:53:58,520
even so<font color="#CCCCCC"> that would</font><font color="#E5E5E5"> be an interesting</font>

1251
00:53:55,040 --> 00:54:02,120
<font color="#CCCCCC">part</font>

1252
00:53:58,520 --> 00:54:05,060
<font color="#E5E5E5">yeah could you maybe elaborate a bit on</font>

1253
00:54:02,120 --> 00:54:07,730
the one writing to the human interface

1254
00:54:05,060 --> 00:54:09,529
device armed<font color="#E5E5E5"> especially</font><font color="#CCCCCC"> i'm</font><font color="#E5E5E5"> curious if</font>

1255
00:54:07,730 --> 00:54:12,260
it's sort of like on<font color="#CCCCCC"> windows if you're</font>

1256
00:54:09,530 --> 00:54:13,910
<font color="#E5E5E5">if it's required to install like an INF</font>

1257
00:54:12,260 --> 00:54:18,170
file or something like that

1258
00:54:13,910 --> 00:54:20,899
no in fact<font color="#E5E5E5"> since with the writing to a</font>

1259
00:54:18,170 --> 00:54:23,660
human interface device<font color="#E5E5E5"> like the question</font>

1260
00:54:20,900 --> 00:54:25,700
<font color="#E5E5E5">is if elaborating on writing to</font><font color="#CCCCCC"> a human</font>

1261
00:54:23,660 --> 00:54:29,930
interface device in other words using a

1262
00:54:25,700 --> 00:54:32,180
hid<font color="#E5E5E5"> class device as an output device and</font>

1263
00:54:29,930 --> 00:54:33,799
there's a wonderful library that<font color="#CCCCCC"> i</font><font color="#E5E5E5"> use</font>

1264
00:54:32,180 --> 00:54:35,270
<font color="#E5E5E5">that is available for just about any</font>

1265
00:54:33,800 --> 00:54:39,260
programming language out there called

1266
00:54:35,270 --> 00:54:43,160
signal 11 hit<font color="#CCCCCC"> USB i</font><font color="#E5E5E5"> think it's called</font>

1267
00:54:39,260 --> 00:54:46,490
<font color="#E5E5E5">and it abstracts away</font><font color="#CCCCCC"> its 1</font><font color="#E5E5E5"> library that</font>

1268
00:54:43,160 --> 00:54:49,399
runs on windows on mac on linux linux

1269
00:54:46,490 --> 00:54:52,609
using<font color="#CCCCCC"> his USB</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> excusing live</font><font color="#E5E5E5"> USB</font>

1270
00:54:49,400 --> 00:54:53,570
<font color="#E5E5E5">it handles all that for you</font>

1271
00:54:52,610 --> 00:54:56,270
you<font color="#CCCCCC"> just need the right kind of</font>

1272
00:54:53,570 --> 00:55:00,260
descriptor that basically tells it the

1273
00:54:56,270 --> 00:55:04,890
vendor format is<font color="#E5E5E5"> 8-bit frames</font><font color="#CCCCCC"> eight of</font>

1274
00:55:00,260 --> 00:55:07,140
them total and it's you just

1275
00:55:04,890 --> 00:55:10,020
<font color="#E5E5E5">right to it using the signal</font><font color="#CCCCCC"> 11 library</font>

1276
00:55:07,140 --> 00:55:12,540
on<font color="#CCCCCC"> Windows it does not require driver at</font>

1277
00:55:10,020 --> 00:55:14,550
all<font color="#CCCCCC"> and so I think that's the ideal way</font>

1278
00:55:12,540 --> 00:55:19,259
to do it<font color="#E5E5E5"> for windows</font>

1279
00:55:14,550 --> 00:55:22,890
yes<font color="#E5E5E5"> I</font><font color="#CCCCCC"> you've talked about prerequisites</font>

1280
00:55:19,260 --> 00:55:25,980
for using this software in different

1281
00:55:22,890 --> 00:55:28,020
operating systems<font color="#CCCCCC"> but how about using it</font>

1282
00:55:25,980 --> 00:55:29,760
in<font color="#E5E5E5"> bio stage candidates emulate a</font>

1283
00:55:28,020 --> 00:55:32,910
keyboard while<font color="#CCCCCC"> they're in bios for</font>

1284
00:55:29,760 --> 00:55:36,330
example<font color="#E5E5E5"> questions can emulate a keyboard</font>

1285
00:55:32,910 --> 00:55:39,720
or<font color="#CCCCCC"> a mouse</font><font color="#E5E5E5"> actually in the bios and that</font>

1286
00:55:36,330 --> 00:55:44,730
is defined in the header of the<font color="#CCCCCC"> there's</font>

1287
00:55:39,720 --> 00:55:48,060
a<font color="#E5E5E5"> it's part of the USB HID descriptor</font>

1288
00:55:44,730 --> 00:55:50,100
<font color="#CCCCCC">there is a boot protocol field in there</font>

1289
00:55:48,060 --> 00:55:52,710
that a lot of times<font color="#CCCCCC"> it's set to 0</font><font color="#E5E5E5"> if you</font>

1290
00:55:50,100 --> 00:55:55,200
<font color="#CCCCCC">set</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to one it acts as a USB keyboard</font>

1291
00:55:52,710 --> 00:55:58,890
that the<font color="#CCCCCC"> bioscan then understand it's a</font>

1292
00:55:55,200 --> 00:56:01,470
<font color="#CCCCCC">very simplified version of the</font><font color="#E5E5E5"> USB HID</font>

1293
00:55:58,890 --> 00:56:03,240
interface<font color="#CCCCCC"> it doesn't really pay it so</font>

1294
00:56:01,470 --> 00:56:04,799
much attention to the number of keys and

1295
00:56:03,240 --> 00:56:08,490
all the<font color="#E5E5E5"> descriptors just assumes that</font>

1296
00:56:04,800 --> 00:56:10,170
it's a<font color="#CCCCCC"> pc</font><font color="#E5E5E5"> 11 keyboard that is designed</font>

1297
00:56:08,490 --> 00:56:13,439
for use in the<font color="#CCCCCC"> bios so yes if you set</font>

1298
00:56:10,170 --> 00:56:14,700
this flag<font color="#CCCCCC"> then it</font><font color="#E5E5E5"> will work thanks three</font>

1299
00:56:13,440 --> 00:56:22,110
questions left

1300
00:56:14,700 --> 00:56:26,580
yes microphone ancient<font color="#E5E5E5"> no internet</font>

1301
00:56:22,110 --> 00:56:28,430
<font color="#CCCCCC">ok ok</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> i totally</font><font color="#E5E5E5"> forgot to ask you to</font>

1302
00:56:26,580 --> 00:56:35,720
give<font color="#E5E5E5"> Sean a big round of applause</font>

1303
00:56:28,430 --> 00:57:06,540
[Applause]

1304
00:56:35,720 --> 00:57:06,540
[Music]

