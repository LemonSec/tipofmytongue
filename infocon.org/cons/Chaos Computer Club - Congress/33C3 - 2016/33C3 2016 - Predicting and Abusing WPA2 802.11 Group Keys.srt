1
00:00:01,700 --> 00:00:19,160
[Music]

2
00:00:14,390 --> 00:00:23,000
<font color="#CCCCCC">ok so our next speaker for the day has</font>

3
00:00:19,160 --> 00:00:25,610
just finished his PhD on security of<font color="#CCCCCC"> a</font>

4
00:00:23,000 --> 00:00:31,490
<font color="#CCCCCC">yeah i think that</font><font color="#E5E5E5"> is a round of applause</font>

5
00:00:25,610 --> 00:00:35,240
<font color="#CCCCCC">on the</font><font color="#E5E5E5"> topic of security of a</font><font color="#CCCCCC"> wp8 els</font>

6
00:00:31,490 --> 00:00:38,870
<font color="#E5E5E5">and</font><font color="#CCCCCC"> rc4</font><font color="#E5E5E5"> he's now doing his postdoc and</font>

7
00:00:35,240 --> 00:00:39,860
focusing on wireless security<font color="#CCCCCC"> so and the</font>

8
00:00:38,870 --> 00:00:42,349
next<font color="#E5E5E5"> talk</font>

9
00:00:39,860 --> 00:00:44,840
the title is<font color="#E5E5E5"> predicting and abusing wpa2</font>

10
00:00:42,350 --> 00:00:53,750
<font color="#E5E5E5">able to 11 the group keys please give a</font>

11
00:00:44,840 --> 00:00:56,810
big round of applause to<font color="#E5E5E5"> math even home</font>

12
00:00:53,750 --> 00:00:59,330
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> thank you for the nice introduction</font>

13
00:00:56,810 --> 00:01:01,220
<font color="#E5E5E5">so</font><font color="#CCCCCC"> I'm indeed motive enough and i'm</font>

14
00:00:59,330 --> 00:01:05,269
going<font color="#E5E5E5"> to present predicting on abusing</font>

15
00:01:01,220 --> 00:01:08,990
wpa2<font color="#CCCCCC"> groupies or</font><font color="#E5E5E5"> more officially a</font><font color="#CCCCCC"> donor</font>

16
00:01:05,269 --> 00:01:11,630
<font color="#E5E5E5">into dot11 groupies so first a quick</font>

17
00:01:08,990 --> 00:01:13,759
introduction to Wi-Fi security

18
00:01:11,630 --> 00:01:16,399
what was the state of Wi-Fi security

19
00:01:13,760 --> 00:01:19,280
before<font color="#CCCCCC"> I did this research</font>

20
00:01:16,400 --> 00:01:21,650
well essentially<font color="#E5E5E5"> Wi-Fi security has been</font>

21
00:01:19,280 --> 00:01:25,940
thoroughly investigated<font color="#CCCCCC"> there</font><font color="#E5E5E5"> have been</font>

22
00:01:21,650 --> 00:01:28,009
a lot<font color="#CCCCCC"> of results for example we know</font>

23
00:01:25,940 --> 00:01:32,030
<font color="#CCCCCC">with the very</font><font color="#E5E5E5"> first security algorithm</font>

24
00:01:28,009 --> 00:01:35,030
of Wi-Fi<font color="#CCCCCC"> wired encrypted privacy</font><font color="#E5E5E5"> in</font>

25
00:01:32,030 --> 00:01:37,700
<font color="#E5E5E5">other words</font><font color="#CCCCCC"> web it was a horribly</font><font color="#E5E5E5"> flawed</font>

26
00:01:35,030 --> 00:01:41,330
<font color="#E5E5E5">you probably all noticed that you can</font>

27
00:01:37,700 --> 00:01:42,440
crack a web<font color="#E5E5E5"> network within</font><font color="#CCCCCC"> mirror</font>

28
00:01:41,330 --> 00:01:44,720
<font color="#E5E5E5">minutes</font>

29
00:01:42,440 --> 00:01:47,990
in fact if you download the latest tool

30
00:01:44,720 --> 00:01:50,179
suite of aircrack-ng<font color="#CCCCCC"> aren't there is</font>

31
00:01:47,990 --> 00:01:53,270
enough traffic on the network<font color="#E5E5E5"> you can</font>

32
00:01:50,180 --> 00:01:56,300
really<font color="#E5E5E5"> obtain the pre-shared key of the</font>

33
00:01:53,270 --> 00:01:58,880
network within only a few minutes<font color="#CCCCCC"> sound</font>

34
00:01:56,300 --> 00:02:04,039
<font color="#E5E5E5">sometimes if you're lucky</font><font color="#CCCCCC"> even</font><font color="#E5E5E5"> seconds</font>

35
00:01:58,880 --> 00:02:06,408
<font color="#E5E5E5">so the first attempt by the 802 11 group</font>

36
00:02:04,040 --> 00:02:10,910
to introduce<font color="#E5E5E5"> a security protocol</font><font color="#CCCCCC"> it's</font>

37
00:02:06,409 --> 00:02:13,010
<font color="#E5E5E5">didn't really went that well</font><font color="#CCCCCC"> we also</font>

38
00:02:10,910 --> 00:02:14,540
have other attacks recently against<font color="#CCCCCC"> our</font>

39
00:02:13,010 --> 00:02:19,640
wireless networks<font color="#E5E5E5"> on in particular</font>

40
00:02:14,540 --> 00:02:23,328
against<font color="#E5E5E5"> wpa2 one example which is quite</font>

41
00:02:19,640 --> 00:02:25,910
recent<font color="#E5E5E5"> is that some vendors or</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> is</font>

42
00:02:23,329 --> 00:02:28,160
<font color="#E5E5E5">peace when they hand out their router</font>

43
00:02:25,910 --> 00:02:31,160
<font color="#CCCCCC">they initialize it with a default</font>

44
00:02:28,160 --> 00:02:33,230
passwords with a default<font color="#CCCCCC"> passphrase</font><font color="#E5E5E5"> and</font>

45
00:02:31,160 --> 00:02:37,760
<font color="#E5E5E5">it turns out that these are rather</font>

46
00:02:33,230 --> 00:02:40,100
predictable<font color="#E5E5E5"> in particular this default</font>

47
00:02:37,760 --> 00:02:42,109
password which would be shown somewhere

48
00:02:40,100 --> 00:02:44,420
here on the back of your router<font color="#E5E5E5"> on the</font>

49
00:02:42,110 --> 00:02:47,299
car to receive with it it was derived

50
00:02:44,420 --> 00:02:49,100
from the<font color="#E5E5E5"> mac address</font><font color="#CCCCCC"> so if you want to</font>

51
00:02:47,299 --> 00:02:51,260
attack one of these networks you simply

52
00:02:49,100 --> 00:02:53,299
have to sniff the network determine the

53
00:02:51,260 --> 00:02:56,269
<font color="#CCCCCC">mac address</font><font color="#E5E5E5"> and from that you could</font>

54
00:02:53,299 --> 00:02:59,930
derive the shared key<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> pre-shared</font>

55
00:02:56,269 --> 00:03:01,730
key of the network and similar to this

56
00:02:59,930 --> 00:03:05,080
you also have<font color="#E5E5E5"> a dictionary attacks</font>

57
00:03:01,730 --> 00:03:07,929
against<font color="#E5E5E5"> the</font><font color="#CCCCCC"> wpa2 handshake so</font>

58
00:03:05,080 --> 00:03:10,090
<font color="#E5E5E5">these are all known a text on the way</font>

59
00:03:07,930 --> 00:03:13,030
that this dictionary attack work<font color="#E5E5E5"> works</font>

60
00:03:10,090 --> 00:03:15,190
is essentially a<font color="#E5E5E5"> you can forsake lines</font>

61
00:03:13,030 --> 00:03:17,560
to disconnect from the network and then

62
00:03:15,190 --> 00:03:19,540
it will reconnect with the network<font color="#E5E5E5"> and</font>

63
00:03:17,560 --> 00:03:21,670
if it reconnects<font color="#CCCCCC"> and of</font><font color="#E5E5E5"> course performs</font>

64
00:03:19,540 --> 00:03:25,900
<font color="#CCCCCC">the fresh and</font><font color="#E5E5E5"> handshake with the access</font>

65
00:03:21,670 --> 00:03:28,059
point to negotiate<font color="#E5E5E5"> session Keys now the</font>

66
00:03:25,900 --> 00:03:29,920
bad<font color="#E5E5E5"> part about this handshake is that as</font>

67
00:03:28,060 --> 00:03:33,040
an attacker<font color="#CCCCCC"> you can capture the</font><font color="#E5E5E5"> four</font>

68
00:03:29,920 --> 00:03:34,660
<font color="#E5E5E5">messages that are exchanged in</font><font color="#CCCCCC"> the</font>

69
00:03:33,040 --> 00:03:37,750
handshake and then you can perform

70
00:03:34,660 --> 00:03:41,980
<font color="#E5E5E5">offline guessing attacks at the password</font>

71
00:03:37,750 --> 00:03:43,480
of your network<font color="#E5E5E5"> and</font><font color="#CCCCCC"> now if the handshake</font>

72
00:03:41,980 --> 00:03:45,850
would have been better designed<font color="#E5E5E5"> this</font>

73
00:03:43,480 --> 00:03:46,810
kind of<font color="#E5E5E5"> dictionary attacks with not have</font>

74
00:03:45,850 --> 00:03:48,790
been possible

75
00:03:46,810 --> 00:03:51,220
<font color="#E5E5E5">unfortunately the way the handshake was</font>

76
00:03:48,790 --> 00:03:53,679
designed<font color="#E5E5E5"> you can make a capture of the</font>

77
00:03:51,220 --> 00:03:56,230
handshake you can process this offline

78
00:03:53,680 --> 00:04:00,880
on this kind of dictionary attacks are

79
00:03:56,230 --> 00:04:03,040
unfortunately<font color="#E5E5E5"> possible</font><font color="#CCCCCC"> think a few years</font>

80
00:04:00,880 --> 00:04:05,019
ago there was also attack which shows

81
00:04:03,040 --> 00:04:07,540
that using a bit of social engineering

82
00:04:05,020 --> 00:04:10,180
as well you can even attack wpa2

83
00:04:07,540 --> 00:04:12,220
enterprise networks and these are

84
00:04:10,180 --> 00:04:14,590
networks<font color="#E5E5E5"> where you have to type in your</font>

85
00:04:12,220 --> 00:04:18,220
username and password<font color="#CCCCCC"> so</font><font color="#E5E5E5"> think of</font>

86
00:04:14,590 --> 00:04:20,530
<font color="#CCCCCC">interim</font><font color="#E5E5E5"> or your company network or also</font>

87
00:04:18,220 --> 00:04:23,830
<font color="#E5E5E5">here</font><font color="#CCCCCC"> in the CC network you also have one</font>

88
00:04:20,529 --> 00:04:25,840
of these enterprise networks as well<font color="#E5E5E5"> and</font>

89
00:04:23,830 --> 00:04:27,669
the<font color="#E5E5E5"> idea behind this attack i'm not</font>

90
00:04:25,840 --> 00:04:29,890
going to<font color="#CCCCCC"> go into detail here because</font>

91
00:04:27,669 --> 00:04:32,200
these are known<font color="#E5E5E5"> but one of the parts</font>

92
00:04:29,890 --> 00:04:34,240
that they<font color="#E5E5E5"> use just a broadcast network</font>

93
00:04:32,200 --> 00:04:36,610
with the same SSID name as the target

94
00:04:34,240 --> 00:04:39,430
<font color="#CCCCCC">Network but they include a small space</font>

95
00:04:36,610 --> 00:04:42,250
bar behind the name<font color="#E5E5E5"> and if you then look</font>

96
00:04:39,430 --> 00:04:44,080
at the network name in your operating

97
00:04:42,250 --> 00:04:46,060
system<font color="#CCCCCC"> you won't know it is that the</font>

98
00:04:44,080 --> 00:04:48,820
network is for example<font color="#CCCCCC"> a</font><font color="#E5E5E5"> room and then</font>

99
00:04:46,060 --> 00:04:50,650
<font color="#E5E5E5">spacebar after it so it's essentially a</font>

100
00:04:48,820 --> 00:04:53,140
completely new network and if you

101
00:04:50,650 --> 00:04:55,120
connect to completely new network and

102
00:04:53,140 --> 00:04:58,210
<font color="#E5E5E5">it's your</font><font color="#CCCCCC"> operating operating</font><font color="#E5E5E5"> system</font>

103
00:04:55,120 --> 00:04:59,979
won't really complain because otherwise

104
00:04:58,210 --> 00:05:01,570
it which<font color="#E5E5E5"> it would say</font><font color="#CCCCCC"> okay</font>

105
00:04:59,979 --> 00:05:02,950
previously<font color="#CCCCCC"> you connected to either on</font>

106
00:05:01,570 --> 00:05:03,610
now it's<font color="#CCCCCC"> certainly use a different</font>

107
00:05:02,950 --> 00:05:05,919
<font color="#E5E5E5">certificate</font>

108
00:05:03,610 --> 00:05:08,710
this is bad<font color="#E5E5E5"> but because the space was</font>

109
00:05:05,919 --> 00:05:10,299
after s after the SSID<font color="#CCCCCC"> your operating</font>

110
00:05:08,710 --> 00:05:12,969
<font color="#E5E5E5">system</font><font color="#CCCCCC"> will think oh it's a new network</font>

111
00:05:10,300 --> 00:05:15,039
<font color="#CCCCCC">everything is fine</font><font color="#E5E5E5"> but as</font><font color="#CCCCCC"> i mentioned</font>

112
00:05:12,970 --> 00:05:17,310
<font color="#E5E5E5">i'm not going into detail just</font>

113
00:05:15,039 --> 00:05:20,460
mentioning it as related to work and

114
00:05:17,310 --> 00:05:23,160
<font color="#E5E5E5">tense lately there have also been a few</font>

115
00:05:20,460 --> 00:05:26,250
more theoretical attacks against<font color="#CCCCCC"> wpa key</font>

116
00:05:23,160 --> 00:05:27,600
<font color="#CCCCCC">camp there are similar in spirit to the</font>

117
00:05:26,250 --> 00:05:30,450
text on the web

118
00:05:27,600 --> 00:05:32,520
<font color="#E5E5E5">except cracking wpa teacup is much</font><font color="#CCCCCC"> much</font>

119
00:05:30,450 --> 00:05:34,920
more<font color="#E5E5E5"> difficult even though there are</font>

120
00:05:32,520 --> 00:05:37,560
also other weaknesses and wpa<font color="#CCCCCC"> teacup</font><font color="#E5E5E5"> so</font>

121
00:05:34,920 --> 00:05:39,180
you should not use it but<font color="#CCCCCC"> you</font><font color="#E5E5E5"> are</font>

122
00:05:37,560 --> 00:05:41,670
theoretical attacks that allow you to

123
00:05:39,180 --> 00:05:44,760
recover the session Keys as well<font color="#CCCCCC"> that</font>

124
00:05:41,670 --> 00:05:47,010
are<font color="#E5E5E5"> very hard to execute and practice so</font>

125
00:05:44,760 --> 00:05:49,380
why am I telling you all this

126
00:05:47,010 --> 00:05:51,630
well if you look at all this previous

127
00:05:49,380 --> 00:05:54,000
research about the security of wireless

128
00:05:51,630 --> 00:05:56,219
networks<font color="#CCCCCC"> we can see that a lot of this</font>

129
00:05:54,000 --> 00:05:59,280
work is focused on the security of the

130
00:05:56,220 --> 00:06:03,120
<font color="#CCCCCC">preshared keys or of the negotiated</font>

131
00:05:59,280 --> 00:06:05,190
session<font color="#E5E5E5"> Keys so that has received a very</font>

132
00:06:03,120 --> 00:06:07,800
large amount of attention from the

133
00:06:05,190 --> 00:06:10,350
research community and also from hackers

134
00:06:07,800 --> 00:06:12,750
however the keys that are used to

135
00:06:10,350 --> 00:06:18,420
protect<font color="#E5E5E5"> broadcast traffic so the</font>

136
00:06:12,750 --> 00:06:20,640
groupies<font color="#CCCCCC"> they are not widely used so</font>

137
00:06:18,420 --> 00:06:27,990
<font color="#CCCCCC">here's</font><font color="#E5E5E5"> something strange with the slides</font>

138
00:06:20,640 --> 00:06:30,599
for some reason<font color="#E5E5E5"> one slide is missing</font><font color="#CCCCCC"> but</font>

139
00:06:27,990 --> 00:06:33,180
<font color="#CCCCCC">anyway so these groupies they are used</font>

140
00:06:30,600 --> 00:06:35,760
to encrypt<font color="#E5E5E5"> broadcast on multicast</font>

141
00:06:33,180 --> 00:06:38,040
traffic<font color="#CCCCCC"> and that is in contrast with</font>

142
00:06:35,760 --> 00:06:40,710
session key so for example if you see

143
00:06:38,040 --> 00:06:42,900
here<font color="#CCCCCC"> your access point it</font><font color="#E5E5E5"> has a rookie</font>

144
00:06:40,710 --> 00:06:45,390
<font color="#E5E5E5">on it also has a session key for every</font>

145
00:06:42,900 --> 00:06:49,890
client that is connected to the network

146
00:06:45,390 --> 00:06:51,810
<font color="#E5E5E5">and so what we notice is that the</font>

147
00:06:49,890 --> 00:06:53,789
security of<font color="#CCCCCC"> these negotiated session</font>

148
00:06:51,810 --> 00:06:55,890
<font color="#CCCCCC">case</font><font color="#E5E5E5"> is properly studied but the</font>

149
00:06:53,790 --> 00:06:58,680
security of the group key is not studied

150
00:06:55,890 --> 00:07:03,000
so what I did during my research is that

151
00:06:58,680 --> 00:07:05,610
<font color="#CCCCCC">I investigated how these groupies are</font>

152
00:07:03,000 --> 00:07:08,040
managed during their full<font color="#E5E5E5"> our lifetime</font>

153
00:07:05,610 --> 00:07:09,000
so what do<font color="#E5E5E5"> I mean with the lifetime of</font>

154
00:07:08,040 --> 00:07:11,400
the group<font color="#E5E5E5"> key</font>

155
00:07:09,000 --> 00:07:13,440
well we have our access point here<font color="#E5E5E5"> and</font>

156
00:07:11,400 --> 00:07:15,810
when you start your access<font color="#E5E5E5"> point so when</font>

157
00:07:13,440 --> 00:07:17,880
you start your router<font color="#CCCCCC"> the first thing</font>

158
00:07:15,810 --> 00:07:21,240
that happens is that it generates<font color="#CCCCCC"> a</font>

159
00:07:17,880 --> 00:07:23,400
fresh<font color="#CCCCCC"> on random</font><font color="#E5E5E5"> group</font><font color="#CCCCCC"> key and here we</font>

160
00:07:21,240 --> 00:07:27,090
notice that the random number generator

161
00:07:23,400 --> 00:07:30,229
<font color="#E5E5E5">so the</font><font color="#CCCCCC"> rng</font><font color="#E5E5E5"> that is used to generate this</font>

162
00:07:27,090 --> 00:07:32,750
group key is<font color="#E5E5E5"> flat so</font>

163
00:07:30,230 --> 00:07:34,730
<font color="#E5E5E5">the standard</font><font color="#CCCCCC"> suggest a bad random</font><font color="#E5E5E5"> number</font>

164
00:07:32,750 --> 00:07:37,100
generator as a reference implementation

165
00:07:34,730 --> 00:07:39,650
<font color="#CCCCCC">and</font><font color="#E5E5E5"> we will see in practice</font><font color="#CCCCCC"> that certain</font>

166
00:07:37,100 --> 00:07:41,840
vendors also<font color="#CCCCCC"> implements a random number</font>

167
00:07:39,650 --> 00:07:43,549
<font color="#E5E5E5">generator that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> predictable</font><font color="#CCCCCC"> on this</font>

168
00:07:41,840 --> 00:07:46,789
will allow us to predict the group key

169
00:07:43,550 --> 00:07:48,440
<font color="#CCCCCC">so that's essentially the first stage of</font>

170
00:07:46,790 --> 00:07:52,010
the lifetime of the<font color="#CCCCCC"> groupie</font><font color="#E5E5E5"> when is</font>

171
00:07:48,440 --> 00:07:54,260
generated<font color="#CCCCCC"> the second part is when a</font>

172
00:07:52,010 --> 00:07:56,750
client connects to the network<font color="#E5E5E5"> when it</font>

173
00:07:54,260 --> 00:07:59,330
<font color="#CCCCCC">Connection</font><font color="#E5E5E5"> network</font><font color="#CCCCCC"> it performs this for</font>

174
00:07:56,750 --> 00:08:01,190
a handshake<font color="#CCCCCC"> negotiates the session Keys</font>

175
00:07:59,330 --> 00:08:05,180
<font color="#E5E5E5">these are sometimes also called the</font>

176
00:08:01,190 --> 00:08:07,850
<font color="#CCCCCC">Paradise keys on during this handshake</font>

177
00:08:05,180 --> 00:08:10,220
<font color="#CCCCCC">the</font><font color="#E5E5E5"> rookie is also transported to the</font>

178
00:08:07,850 --> 00:08:12,290
client<font color="#E5E5E5"> but because of course it needs to</font>

179
00:08:10,220 --> 00:08:15,530
know the group key to be able to decrypt

180
00:08:12,290 --> 00:08:18,500
<font color="#CCCCCC">a broadcast and multicast traffic</font><font color="#E5E5E5"> and</font>

181
00:08:15,530 --> 00:08:21,020
what we found here is that we can

182
00:08:18,500 --> 00:08:23,060
manipulate manipulate<font color="#E5E5E5"> this handshake as</font>

183
00:08:21,020 --> 00:08:27,020
a man-in-the-middle attack ER and we can

184
00:08:23,060 --> 00:08:29,870
then use<font color="#E5E5E5"> we can force you sheets of</font><font color="#CCCCCC"> our</font>

185
00:08:27,020 --> 00:08:31,700
<font color="#CCCCCC">c4</font><font color="#E5E5E5"> meaning at the</font><font color="#CCCCCC"> groupie</font><font color="#E5E5E5"> run it is</font>

186
00:08:29,870 --> 00:08:33,979
being transmitted from the access point

187
00:08:31,700 --> 00:08:37,520
to the client is encrypted using<font color="#CCCCCC"> our c4</font>

188
00:08:33,979 --> 00:08:40,070
<font color="#CCCCCC">on our c4</font><font color="#E5E5E5"> is a</font><font color="#CCCCCC"> secure cypher you</font><font color="#E5E5E5"> should</font>

189
00:08:37,520 --> 00:08:41,598
not use it on<font color="#E5E5E5"> this context we will see</font>

190
00:08:40,070 --> 00:08:43,250
that we also currently<font color="#CCCCCC"> it's a</font>

191
00:08:41,599 --> 00:08:45,440
<font color="#E5E5E5">theoretical attack but we do have an</font>

192
00:08:43,250 --> 00:08:50,150
attack against the way<font color="#CCCCCC"> our c4</font><font color="#E5E5E5"> is used in</font>

193
00:08:45,440 --> 00:08:52,790
this situation<font color="#E5E5E5"> now also one of the more</font>

194
00:08:50,150 --> 00:08:55,370
interesting<font color="#E5E5E5"> parts is also let's say that</font>

195
00:08:52,790 --> 00:08:56,870
we now as an attacker<font color="#E5E5E5"> have the group key</font>

196
00:08:55,370 --> 00:08:59,600
what can we do with the group<font color="#E5E5E5"> key</font>

197
00:08:56,870 --> 00:09:01,670
because of course if we know<font color="#E5E5E5"> at</font><font color="#CCCCCC"> key we</font>

198
00:08:59,600 --> 00:09:03,800
can decrypt broadcast and multicast

199
00:09:01,670 --> 00:09:06,199
frames we can inject broadcast and

200
00:09:03,800 --> 00:09:09,800
multicast<font color="#CCCCCC"> streams</font><font color="#E5E5E5"> but can we do even</font>

201
00:09:06,200 --> 00:09:12,500
more<font color="#CCCCCC"> and arrogance shown that using some</font>

202
00:09:09,800 --> 00:09:14,990
clever tricks<font color="#CCCCCC"> we can use the</font><font color="#E5E5E5"> groupie to</font>

203
00:09:12,500 --> 00:09:16,940
inject unicast<font color="#E5E5E5"> IP traffic so not just</font>

204
00:09:14,990 --> 00:09:19,610
broadcast traffic but also<font color="#E5E5E5"> unique</font><font color="#CCCCCC"> ass</font>

205
00:09:16,940 --> 00:09:23,270
traffic<font color="#E5E5E5"> and we will even show how we can</font>

206
00:09:19,610 --> 00:09:29,210
decrypt<font color="#E5E5E5"> nearly all internet traffic of</font>

207
00:09:23,270 --> 00:09:33,170
the network and then at the last part of

208
00:09:29,210 --> 00:09:35,900
the presentation<font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to propose a</font>

209
00:09:33,170 --> 00:09:38,000
new idea on how to better<font color="#CCCCCC"> i generate</font>

210
00:09:35,900 --> 00:09:39,649
random numbers if you have a Wi-Fi

211
00:09:38,000 --> 00:09:41,300
device

212
00:09:39,649 --> 00:09:44,059
<font color="#E5E5E5">but the main part of the presentation</font>

213
00:09:41,300 --> 00:09:46,849
will be<font color="#E5E5E5"> these first</font><font color="#CCCCCC"> Street steps on</font>

214
00:09:44,059 --> 00:09:49,309
particular predicting the<font color="#CCCCCC"> rnr rng and</font>

215
00:09:46,850 --> 00:09:52,759
then abusing<font color="#E5E5E5"> it to decrypt traffic</font><font color="#CCCCCC"> on</font>

216
00:09:49,309 --> 00:09:54,618
<font color="#CCCCCC">jet traffic so before i get to the main</font>

217
00:09:52,759 --> 00:09:56,990
content of the presentation<font color="#E5E5E5"> I'm going to</font>

218
00:09:54,619 --> 00:10:00,470
give<font color="#CCCCCC"> little bit more background on the</font>

219
00:09:56,990 --> 00:10:02,749
<font color="#CCCCCC">Houthis</font><font color="#E5E5E5"> group keys are used so let's say</font>

220
00:10:00,470 --> 00:10:05,029
we are in the following situation<font color="#E5E5E5"> we</font>

221
00:10:02,749 --> 00:10:07,730
have our access point here which has the

222
00:10:05,029 --> 00:10:09,889
<font color="#CCCCCC">groupie of the network</font><font color="#E5E5E5"> and which has a</font>

223
00:10:07,730 --> 00:10:13,040
<font color="#E5E5E5">two-session case of the two connected</font>

224
00:10:09,889 --> 00:10:15,139
clients here and let's assume that in

225
00:10:13,040 --> 00:10:17,179
this situation client a wants to send a

226
00:10:15,139 --> 00:10:21,170
broadcast network already complete

227
00:10:17,179 --> 00:10:24,829
<font color="#E5E5E5">network now if client a</font><font color="#CCCCCC"> witch</font><font color="#E5E5E5"> sent this</font>

228
00:10:21,170 --> 00:10:27,349
broadcast frame itself<font color="#CCCCCC"> then there</font><font color="#E5E5E5"> is a</font>

229
00:10:24,829 --> 00:10:29,809
problem because there are certain

230
00:10:27,350 --> 00:10:32,209
situations where clients<font color="#E5E5E5"> are out</font><font color="#CCCCCC"> read</font>

231
00:10:29,809 --> 00:10:34,249
out of reach of each other<font color="#E5E5E5"> so that's the</font>

232
00:10:32,209 --> 00:10:36,739
<font color="#CCCCCC">hidden terminal problem if client a</font>

233
00:10:34,249 --> 00:10:37,939
<font color="#E5E5E5">would broadcast</font><font color="#CCCCCC"> message</font><font color="#E5E5E5"> client be would</font>

234
00:10:36,740 --> 00:10:40,040
<font color="#E5E5E5">not receive it</font>

235
00:10:37,939 --> 00:10:42,769
so this was of course and dissipated by

236
00:10:40,040 --> 00:10:45,498
the designers of the Wi-Fi protocol<font color="#E5E5E5"> so</font>

237
00:10:42,769 --> 00:10:48,319
instead what happens if if this<font color="#CCCCCC"> client's</font>

238
00:10:45,499 --> 00:10:52,819
<font color="#E5E5E5">wants to send a broadcast frame</font><font color="#CCCCCC"> at first</font>

239
00:10:48,319 --> 00:10:55,279
sends it to the access point and it will

240
00:10:52,819 --> 00:10:57,079
essentially a sentence frame<font color="#E5E5E5"> with as the</font>

241
00:10:55,279 --> 00:10:59,420
immediate receiver to access points

242
00:10:57,079 --> 00:11:02,209
<font color="#E5E5E5">however the final destination is the</font>

243
00:10:59,420 --> 00:11:04,009
broadcast<font color="#CCCCCC"> mac address</font><font color="#E5E5E5"> and because the</font>

244
00:11:02,209 --> 00:11:06,018
immediate receiver is the access point

245
00:11:04,009 --> 00:11:09,800
it will be encrypted using the session

246
00:11:06,019 --> 00:11:11,509
<font color="#E5E5E5">Keys and when the access points</font><font color="#CCCCCC"> receive</font>

247
00:11:09,800 --> 00:11:13,339
this frame<font color="#E5E5E5"> it will also use the session</font>

248
00:11:11,509 --> 00:11:13,819
<font color="#CCCCCC">Keys to decrypt</font><font color="#E5E5E5"> this frame but then it</font>

249
00:11:13,339 --> 00:11:16,819
will see

250
00:11:13,819 --> 00:11:18,229
<font color="#CCCCCC">ok the final destination is actually the</font>

251
00:11:16,819 --> 00:11:20,240
broadcast<font color="#CCCCCC"> mac</font><font color="#E5E5E5"> address</font>

252
00:11:18,230 --> 00:11:23,240
meaning<font color="#CCCCCC"> i will have two forwards to all</font>

253
00:11:20,240 --> 00:11:24,769
clients and<font color="#E5E5E5"> of course all clients are in</font>

254
00:11:23,240 --> 00:11:28,069
range of the access<font color="#E5E5E5"> point so in this</font>

255
00:11:24,769 --> 00:11:30,410
case<font color="#CCCCCC"> all</font><font color="#E5E5E5"> stations will receive it and</font>

256
00:11:28,069 --> 00:11:32,179
when the access<font color="#CCCCCC"> point sends the group</font>

257
00:11:30,410 --> 00:11:34,429
<font color="#E5E5E5">the broadcast frame the immediate</font>

258
00:11:32,179 --> 00:11:37,129
receiver<font color="#E5E5E5"> of the final destinations are</font>

259
00:11:34,429 --> 00:11:39,439
<font color="#CCCCCC">both</font><font color="#E5E5E5"> the broadcast</font><font color="#CCCCCC"> mac</font><font color="#E5E5E5"> address meaning</font>

260
00:11:37,129 --> 00:11:42,379
in this case the group key is used to

261
00:11:39,439 --> 00:11:44,779
encrypt on<font color="#CCCCCC"> sentence frame so important</font>

262
00:11:42,379 --> 00:11:45,769
takeaway message here is that only the

263
00:11:44,779 --> 00:11:48,290
access point

264
00:11:45,769 --> 00:11:51,019
normally<font color="#CCCCCC"> it</font><font color="#E5E5E5"> will send real group frames</font>

265
00:11:48,290 --> 00:11:52,370
because the client will first<font color="#CCCCCC"> forward it</font>

266
00:11:51,019 --> 00:11:56,660
to the access<font color="#CCCCCC"> points</font>

267
00:11:52,370 --> 00:12:00,620
<font color="#E5E5E5">as a unicast frame so that's for the</font>

268
00:11:56,660 --> 00:12:02,779
quick introduction<font color="#E5E5E5"> so as</font><font color="#CCCCCC"> I mentioned the</font>

269
00:12:00,620 --> 00:12:05,990
talk will mainly be about predicting the

270
00:12:02,779 --> 00:12:09,230
<font color="#CCCCCC">rng and then decrypting</font><font color="#E5E5E5"> all traffic so</font>

271
00:12:05,990 --> 00:12:12,500
let's start with predicting the<font color="#CCCCCC"> orangey</font>

272
00:12:09,230 --> 00:12:14,990
<font color="#CCCCCC">so the first question is</font><font color="#E5E5E5"> okay there's</font>

273
00:12:12,500 --> 00:12:17,480
the Wi-Fi standard specifies some

274
00:12:14,990 --> 00:12:20,990
methods on how to best generate these

275
00:12:17,480 --> 00:12:23,990
groupies<font color="#E5E5E5"> and it turns out that yes they</font>

276
00:12:20,990 --> 00:12:26,210
do<font color="#E5E5E5"> is specify</font><font color="#CCCCCC"> methods on in particular</font>

277
00:12:23,990 --> 00:12:28,160
they have a certain procedure for

278
00:12:26,210 --> 00:12:31,580
generating at the<font color="#E5E5E5"> groupie that will be</font>

279
00:12:28,160 --> 00:12:34,640
used<font color="#E5E5E5"> on the crypto people call this the</font>

280
00:12:31,580 --> 00:12:37,339
key hierarchy and that is being used<font color="#E5E5E5"> so</font>

281
00:12:34,640 --> 00:12:40,939
it's actually fairly<font color="#E5E5E5"> a straightforward</font>

282
00:12:37,339 --> 00:12:43,190
<font color="#CCCCCC">when your access point starts up it will</font>

283
00:12:40,940 --> 00:12:45,350
generate a public counter value so

284
00:12:43,190 --> 00:12:49,070
random<font color="#CCCCCC"> counter it is not start at zero</font>

285
00:12:45,350 --> 00:12:51,589
it can<font color="#E5E5E5"> start</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> any value you want but</font>

286
00:12:49,070 --> 00:12:55,670
<font color="#CCCCCC">its public so an attacker or outsiders</font>

287
00:12:51,589 --> 00:12:57,680
are allowed to know this variable<font color="#E5E5E5"> apart</font>

288
00:12:55,670 --> 00:13:01,010
<font color="#E5E5E5">from that it also generates a private</font>

289
00:12:57,680 --> 00:13:02,959
master key on this has to stay secret

290
00:13:01,010 --> 00:13:07,819
otherwise all<font color="#E5E5E5"> your security guarantees</font>

291
00:13:02,959 --> 00:13:09,739
are gone<font color="#CCCCCC"> so once you have generated</font>

292
00:13:07,820 --> 00:13:12,170
these two fields<font color="#E5E5E5"> with</font><font color="#CCCCCC"> template simply</font>

293
00:13:09,740 --> 00:13:14,510
<font color="#E5E5E5">take a hash of both of them on the</font>

294
00:13:12,170 --> 00:13:17,569
output of that hash is the current<font color="#CCCCCC"> kruky</font>

295
00:13:14,510 --> 00:13:19,790
<font color="#E5E5E5">and the current group</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> also called</font><font color="#CCCCCC"> to</font>

296
00:13:17,570 --> 00:13:21,470
a group<font color="#E5E5E5"> temporal key</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the reason they</font>

297
00:13:19,790 --> 00:13:23,900
call a temporal is because you can

298
00:13:21,470 --> 00:13:26,810
refresh it every hour or every day or

299
00:13:23,900 --> 00:13:28,579
every<font color="#CCCCCC"> 10 minute</font><font color="#E5E5E5"> and that's also the</font>

300
00:13:26,810 --> 00:13:31,069
advantage of this construction because

301
00:13:28,580 --> 00:13:33,050
if you want to generate a group<font color="#E5E5E5"> key</font><font color="#CCCCCC"> is</font>

302
00:13:31,070 --> 00:13:35,510
<font color="#E5E5E5">very simple you simply increase the</font>

303
00:13:33,050 --> 00:13:38,420
public counter by one<font color="#CCCCCC"> you recalculate</font>

304
00:13:35,510 --> 00:13:42,020
<font color="#E5E5E5">this hash value and then you get in a</font>

305
00:13:38,420 --> 00:13:44,089
new<font color="#CCCCCC"> group key</font><font color="#E5E5E5"> so this design seems very</font>

306
00:13:42,020 --> 00:13:45,980
nice because if you want to generate a

307
00:13:44,089 --> 00:13:47,630
new group<font color="#E5E5E5"> key</font><font color="#CCCCCC"> we simply increase this</font>

308
00:13:45,980 --> 00:13:49,040
public counter<font color="#E5E5E5"> by one and you calculate</font>

309
00:13:47,630 --> 00:13:52,100
<font color="#E5E5E5">a new hash</font>

310
00:13:49,040 --> 00:13:53,839
<font color="#E5E5E5">unfortunately this design is actually</font>

311
00:13:52,100 --> 00:13:56,870
quite<font color="#CCCCCC"> bad</font>

312
00:13:53,839 --> 00:14:00,080
why is that that is because<font color="#E5E5E5"> these two</font>

313
00:13:56,870 --> 00:14:02,540
values are only<font color="#E5E5E5"> randomly sampled when</font>

314
00:14:00,080 --> 00:14:04,670
your device<font color="#E5E5E5"> boots and</font><font color="#CCCCCC"> new entropy is</font>

315
00:14:02,540 --> 00:14:07,459
never introduced into<font color="#CCCCCC"> a</font>

316
00:14:04,670 --> 00:14:10,520
system<font color="#E5E5E5"> so if for some reason and a</font>

317
00:14:07,460 --> 00:14:12,950
decorator compromises<font color="#CCCCCC"> the</font><font color="#E5E5E5"> ski and knows</font>

318
00:14:10,520 --> 00:14:14,689
that he can predict all future keys or

319
00:14:12,950 --> 00:14:16,160
in our case<font color="#E5E5E5"> if the random number</font>

320
00:14:14,690 --> 00:14:18,740
generator is bad

321
00:14:16,160 --> 00:14:22,459
we can probably predict all future keys

322
00:14:18,740 --> 00:14:25,310
that are generated<font color="#E5E5E5"> so this is a bad</font>

323
00:14:22,460 --> 00:14:28,190
design<font color="#CCCCCC"> and should be avoided</font>

324
00:14:25,310 --> 00:14:30,410
unfortunately it is officially specified

325
00:14:28,190 --> 00:14:33,980
this way in the standard<font color="#E5E5E5"> so in principle</font>

326
00:14:30,410 --> 00:14:37,790
<font color="#E5E5E5">are</font><font color="#CCCCCC"> the standard</font><font color="#E5E5E5"> recommend everyone to</font>

327
00:14:33,980 --> 00:14:40,130
use this key hierarchy<font color="#E5E5E5"> this procedure</font><font color="#CCCCCC"> so</font>

328
00:14:37,790 --> 00:14:43,189
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> now we know that if we can</font><font color="#CCCCCC"> protect</font>

329
00:14:40,130 --> 00:14:45,800
<font color="#E5E5E5">these two values we can derive our group</font>

330
00:14:43,190 --> 00:14:49,070
key<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> next question is how are</font>

331
00:14:45,800 --> 00:14:51,319
<font color="#E5E5E5">these random numbers generated and again</font>

332
00:14:49,070 --> 00:14:54,500
<font color="#CCCCCC">the</font><font color="#E5E5E5"> Wi-Fi standard provides us with an</font>

333
00:14:51,320 --> 00:14:57,380
answer<font color="#E5E5E5"> because it suggests an example</font>

334
00:14:54,500 --> 00:14:59,720
<font color="#E5E5E5">random number generator and if you read</font>

335
00:14:57,380 --> 00:15:02,720
the standard<font color="#CCCCCC"> it's actually sounds quite</font>

336
00:14:59,720 --> 00:15:05,360
promising because<font color="#E5E5E5"> it says the</font><font color="#CCCCCC"> orangey</font>

337
00:15:02,720 --> 00:15:08,750
<font color="#E5E5E5">that we use should generate the</font>

338
00:15:05,360 --> 00:15:13,250
cryptographic quality<font color="#E5E5E5"> randomness</font><font color="#CCCCCC"> want to</font>

339
00:15:08,750 --> 00:15:15,230
show you the quote<font color="#E5E5E5"> and detail</font><font color="#CCCCCC"> station</font>

340
00:15:13,250 --> 00:15:17,840
must be able to generate<font color="#E5E5E5"> cryptographic</font>

341
00:15:15,230 --> 00:15:20,660
quality random numbers<font color="#E5E5E5"> and you can look</font>

342
00:15:17,840 --> 00:15:22,460
in the appendix at section and<font color="#CCCCCC"> five</font><font color="#E5E5E5"> to</font>

343
00:15:20,660 --> 00:15:26,180
see how you can achieve this

344
00:15:22,460 --> 00:15:28,760
so this sounds very promising until you

345
00:15:26,180 --> 00:15:31,339
actually go to the appendix on<font color="#CCCCCC"> their</font>

346
00:15:28,760 --> 00:15:33,500
<font color="#CCCCCC">excess</font><font color="#E5E5E5"> well wait a minute what we're</font>

347
00:15:31,340 --> 00:15:34,970
going to<font color="#E5E5E5"> sew show is just an example</font>

348
00:15:33,500 --> 00:15:39,740
<font color="#E5E5E5">solution</font>

349
00:15:34,970 --> 00:15:42,620
ideally you should<font color="#E5E5E5"> extend yourself</font><font color="#CCCCCC"> and</font>

350
00:15:39,740 --> 00:15:44,540
of course that's not really that this is

351
00:15:42,620 --> 00:15:47,210
a strange situation because in the

352
00:15:44,540 --> 00:15:49,069
standard itself it says this<font color="#E5E5E5"> energy and</font>

353
00:15:47,210 --> 00:15:51,350
<font color="#CCCCCC">the appendix is</font><font color="#E5E5E5"> secure</font><font color="#CCCCCC"> but if you</font>

354
00:15:49,070 --> 00:15:52,880
actually read<font color="#E5E5E5"> he panics</font><font color="#CCCCCC"> it says this is</font>

355
00:15:51,350 --> 00:15:55,460
just an example solution

356
00:15:52,880 --> 00:15:57,290
it may not<font color="#CCCCCC"> be that secure after all so</font>

357
00:15:55,460 --> 00:15:59,930
we have an inconsistency<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the</font>

358
00:15:57,290 --> 00:16:03,020
standard here<font color="#CCCCCC"> and just to come back to</font>

359
00:15:59,930 --> 00:16:05,060
the text that is shown in the appendix

360
00:16:03,020 --> 00:16:07,520
<font color="#E5E5E5">it says that</font><font color="#CCCCCC"> ok</font>

361
00:16:05,060 --> 00:16:09,560
you<font color="#E5E5E5"> probably should combine it with</font>

362
00:16:07,520 --> 00:16:12,380
other recommendations on how to generate

363
00:16:09,560 --> 00:16:16,540
random numbers this is expository only

364
00:16:12,380 --> 00:16:18,939
again you should probably improve this

365
00:16:16,540 --> 00:16:22,510
<font color="#CCCCCC">which is very strange to see this kind</font>

366
00:16:18,940 --> 00:16:24,040
of language<font color="#E5E5E5"> in a standard so we</font>

367
00:16:22,510 --> 00:16:26,380
basically have an inconsistent

368
00:16:24,040 --> 00:16:30,099
inconsistent description here<font color="#E5E5E5"> it says</font>

369
00:16:26,380 --> 00:16:31,810
<font color="#E5E5E5">that it should be secured and</font><font color="#CCCCCC"> it says</font>

370
00:16:30,100 --> 00:16:34,240
it's not really secure<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> question</font>

371
00:16:31,810 --> 00:16:36,640
is our secure really is this random

372
00:16:34,240 --> 00:16:40,000
number generator<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the next question is</font>

373
00:16:36,640 --> 00:16:41,949
how many platforms<font color="#CCCCCC"> implemented so let's</font>

374
00:16:40,000 --> 00:16:45,730
look in detail at how the random number

375
00:16:41,950 --> 00:16:50,920
generator is implemented and here we see

376
00:16:45,730 --> 00:16:54,040
that the<font color="#E5E5E5"> standard basically defines a</font>

377
00:16:50,920 --> 00:16:55,900
function which is the orange<font color="#CCCCCC"> rng on</font>

378
00:16:54,040 --> 00:16:56,589
<font color="#E5E5E5">first</font><font color="#CCCCCC"> and for all its a stateless</font>

379
00:16:55,900 --> 00:16:58,300
function

380
00:16:56,590 --> 00:17:00,910
welcome back<font color="#CCCCCC"> in a minute why that it's a</font>

381
00:16:58,300 --> 00:17:03,910
bad idea but first and for all

382
00:17:00,910 --> 00:17:05,920
it has a very vague description even if

383
00:17:03,910 --> 00:17:08,200
<font color="#E5E5E5">they only meant</font><font color="#CCCCCC"> that this</font><font color="#E5E5E5"> to be like an</font>

384
00:17:05,920 --> 00:17:10,090
example solution to get people on the

385
00:17:08,200 --> 00:17:12,730
way<font color="#E5E5E5"> because if you look at the code</font>

386
00:17:10,089 --> 00:17:15,069
<font color="#E5E5E5">there is a main while</font><font color="#CCCCCC"> loop</font><font color="#E5E5E5"> here main</font>

387
00:17:12,730 --> 00:17:21,049
loop<font color="#CCCCCC"> and it simply says</font><font color="#E5E5E5"> repeat this</font>

388
00:17:15,069 --> 00:17:24,948
algorithm<font color="#E5E5E5"> until</font><font color="#CCCCCC"> it's random enough</font>

389
00:17:21,049 --> 00:17:29,779
<font color="#E5E5E5">they don't specify what this means</font>

390
00:17:24,949 --> 00:17:31,759
so that's very strange on suspicious<font color="#E5E5E5"> a</font>

391
00:17:29,779 --> 00:17:33,409
bit suspicious as well as also at the

392
00:17:31,759 --> 00:17:36,590
end of the algorithm<font color="#E5E5E5"> at the end of the</font>

393
00:17:33,409 --> 00:17:38,989
loop<font color="#E5E5E5"> so during certain parts of the loop</font>

394
00:17:36,590 --> 00:17:41,149
they say if the time is set to as if the

395
00:17:38,989 --> 00:17:46,279
time is not available<font color="#E5E5E5"> you can simply set</font>

396
00:17:41,149 --> 00:17:48,498
it to<font color="#CCCCCC"> 0 so this this line might not meet</font>

397
00:17:46,279 --> 00:17:51,019
<font color="#E5E5E5">be that bad if they include something</font>

398
00:17:48,499 --> 00:17:53,210
like if you set the time 20 maybe you

399
00:17:51,019 --> 00:17:55,369
should include<font color="#E5E5E5"> should do more iterations</font>

400
00:17:53,210 --> 00:17:57,289
of the main loop but<font color="#E5E5E5"> they simply say</font><font color="#CCCCCC"> oh</font>

401
00:17:55,369 --> 00:17:58,129
well if<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> not available you know just</font>

402
00:17:57,289 --> 00:18:02,690
skip it

403
00:17:58,129 --> 00:18:05,238
so like<font color="#E5E5E5"> I mentioned the standard is a</font>

404
00:18:02,690 --> 00:18:08,059
bit hard to interpret because they say

405
00:18:05,239 --> 00:18:10,549
it's a<font color="#E5E5E5"> example solution but</font><font color="#CCCCCC"> in our other</font>

406
00:18:08,059 --> 00:18:14,178
parts they say<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> quiet it's</font><font color="#E5E5E5"> supposed</font>

407
00:18:10,549 --> 00:18:17,389
to<font color="#E5E5E5"> be good but even if they only meant</font>

408
00:18:14,179 --> 00:18:21,679
it as a<font color="#E5E5E5"> an example for the vendors this</font>

409
00:18:17,389 --> 00:18:23,959
description is still just<font color="#CCCCCC"> to shake</font><font color="#E5E5E5"> now</font>

410
00:18:21,679 --> 00:18:27,649
to come back to this<font color="#E5E5E5"> stateless part here</font>

411
00:18:23,960 --> 00:18:29,539
<font color="#E5E5E5">the random number generator is executed</font>

412
00:18:27,649 --> 00:18:32,029
on the math on the only<font color="#CCCCCC"> one</font><font color="#E5E5E5"> this</font>

413
00:18:29,539 --> 00:18:34,249
function is being called<font color="#E5E5E5"> is random this</font>

414
00:18:32,029 --> 00:18:36,830
<font color="#E5E5E5">collected on again this is a very</font>

415
00:18:34,249 --> 00:18:39,289
strange<font color="#CCCCCC"> the design</font><font color="#E5E5E5"> because if you have a</font>

416
00:18:36,830 --> 00:18:42,080
proper<font color="#CCCCCC"> rng for example the one</font><font color="#E5E5E5"> and</font>

417
00:18:39,289 --> 00:18:45,259
<font color="#E5E5E5">openbsd or the one</font><font color="#CCCCCC"> in linux</font><font color="#E5E5E5"> or the one</font>

418
00:18:42,080 --> 00:18:47,809
<font color="#CCCCCC">and any decent design basically</font><font color="#E5E5E5"> their</font>

419
00:18:45,259 --> 00:18:49,399
entropy is constantly collected in the

420
00:18:47,809 --> 00:18:52,039
background for example you have your

421
00:18:49,399 --> 00:18:54,709
timing of interrupts timing of packets

422
00:18:52,039 --> 00:18:56,509
<font color="#CCCCCC">you</font><font color="#E5E5E5"> have clock skew and so on are</font>

423
00:18:54,710 --> 00:18:58,759
normally<font color="#E5E5E5"> all</font><font color="#CCCCCC"> this randomness and</font>

424
00:18:56,509 --> 00:19:00,889
<font color="#E5E5E5">collected in a</font><font color="#CCCCCC"> so called entropy</font><font color="#E5E5E5"> pool</font>

425
00:18:58,759 --> 00:19:02,960
and then if you need to<font color="#E5E5E5"> randomness you</font>

426
00:19:00,889 --> 00:19:05,600
can extract a random number from this

427
00:19:02,960 --> 00:19:08,149
entry pool for example using a hash or

428
00:19:05,600 --> 00:19:10,309
any other construct<font color="#E5E5E5"> but the fact that</font>

429
00:19:08,149 --> 00:19:13,189
this function is executed on the<font color="#E5E5E5"> man's</font>

430
00:19:10,309 --> 00:19:17,899
<font color="#E5E5E5">is also a very bad sign</font>

431
00:19:13,190 --> 00:19:21,259
so all that is not that promising<font color="#CCCCCC"> on a</font>

432
00:19:17,899 --> 00:19:24,018
free then look at the actual events

433
00:19:21,259 --> 00:19:25,669
where it extract randomness from<font color="#E5E5E5"> you can</font>

434
00:19:24,019 --> 00:19:28,970
see that is mainly based on the

435
00:19:25,669 --> 00:19:32,359
<font color="#E5E5E5">timestamp of that frames are arrived and</font>

436
00:19:28,970 --> 00:19:33,590
also on<font color="#CCCCCC"> the clock</font><font color="#E5E5E5"> generator so let's</font>

437
00:19:32,359 --> 00:19:36,110
look at these<font color="#CCCCCC"> two</font>

438
00:19:33,590 --> 00:19:38,959
sources in detail<font color="#CCCCCC"> we have our frame</font>

439
00:19:36,110 --> 00:19:41,600
arrival times<font color="#CCCCCC"> so if</font><font color="#E5E5E5"> you're right</font><font color="#CCCCCC"> Ruby</font>

440
00:19:38,960 --> 00:19:43,400
<font color="#E5E5E5">connected to an</font><font color="#CCCCCC"> ethernet cable</font><font color="#E5E5E5"> under</font>

441
00:19:41,600 --> 00:19:45,439
would be<font color="#E5E5E5"> a sufficient amount of traffic</font>

442
00:19:43,400 --> 00:19:46,789
<font color="#CCCCCC">then you could simply collect this</font><font color="#E5E5E5"> based</font>

443
00:19:45,440 --> 00:19:49,669
on the<font color="#CCCCCC"> Internet traffic</font>

444
00:19:46,789 --> 00:19:51,140
however and you don't always have the

445
00:19:49,669 --> 00:19:55,490
guarantee that there is sufficient

446
00:19:51,140 --> 00:19:57,380
traffic available<font color="#E5E5E5"> and the</font>

447
00:19:55,490 --> 00:19:59,779
<font color="#CCCCCC">standardization committee</font><font color="#E5E5E5"> that people</font>

448
00:19:57,380 --> 00:20:02,000
<font color="#CCCCCC">realize this like there may not be that</font>

449
00:19:59,779 --> 00:20:04,010
many much traffic available<font color="#E5E5E5"> so what they</font>

450
00:20:02,000 --> 00:20:06,380
said this and<font color="#CCCCCC"> you know if there</font><font color="#E5E5E5"> is not</font>

451
00:20:04,010 --> 00:20:08,870
that much traffic<font color="#E5E5E5"> simply wait until</font><font color="#CCCCCC"> a</font>

452
00:20:06,380 --> 00:20:11,090
client wants to connect and then send a

453
00:20:08,870 --> 00:20:13,279
few messages<font color="#CCCCCC"> of the handshake then abort</font>

454
00:20:11,090 --> 00:20:15,139
<font color="#CCCCCC">the handshake restart a handshake</font><font color="#E5E5E5"> and a</font>

455
00:20:13,279 --> 00:20:20,480
<font color="#CCCCCC">border handshake</font><font color="#E5E5E5"> restart</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> handshake</font>

456
00:20:15,140 --> 00:20:21,770
<font color="#E5E5E5">until you captured enough frames so this</font>

457
00:20:20,480 --> 00:20:24,110
first<font color="#E5E5E5"> time for all would be very</font>

458
00:20:21,770 --> 00:20:26,629
<font color="#CCCCCC">time-consuming</font><font color="#E5E5E5"> and the second bigger</font>

459
00:20:24,110 --> 00:20:28,459
problem is if you are a client<font color="#CCCCCC"> and you</font>

460
00:20:26,630 --> 00:20:30,830
are constantly trying to connect with<font color="#E5E5E5"> a</font>

461
00:20:28,460 --> 00:20:32,659
network<font color="#E5E5E5"> but it</font><font color="#CCCCCC"> fails a</font><font color="#E5E5E5"> few times then</font>

462
00:20:30,830 --> 00:20:35,720
your device will simply<font color="#CCCCCC"> black list</font>

463
00:20:32,659 --> 00:20:37,909
<font color="#E5E5E5">access point and this will not work</font><font color="#CCCCCC"> so</font>

464
00:20:35,720 --> 00:20:42,740
the fact that they even simply suggested

465
00:20:37,909 --> 00:20:45,740
using this is my opinion<font color="#E5E5E5"> absurd</font><font color="#CCCCCC"> so the</font>

466
00:20:42,740 --> 00:20:48,350
second source is the clock jitter<font color="#E5E5E5"> and</font>

467
00:20:45,740 --> 00:20:50,059
<font color="#CCCCCC">drift</font><font color="#E5E5E5"> so if you have a clock in</font><font color="#CCCCCC"> an</font>

468
00:20:48,350 --> 00:20:52,789
implementation<font color="#E5E5E5"> and is never completely</font>

469
00:20:50,059 --> 00:20:54,620
accurate there is also a small amount

470
00:20:52,789 --> 00:20:57,020
that you can't predict as an attacker

471
00:20:54,620 --> 00:20:59,360
<font color="#CCCCCC">the problem</font><font color="#E5E5E5"> here is that they don't</font>

472
00:20:57,020 --> 00:21:02,000
specify a minimum resolution<font color="#E5E5E5"> that the</font>

473
00:20:59,360 --> 00:21:04,639
clock should have<font color="#E5E5E5"> so a vendor can use</font>

474
00:21:02,000 --> 00:21:07,159
any clock at once even<font color="#E5E5E5"> one with a very</font>

475
00:21:04,640 --> 00:21:10,520
low resolution<font color="#E5E5E5"> meaning only a very low</font>

476
00:21:07,159 --> 00:21:11,899
amount of entropy is collected and of

477
00:21:10,520 --> 00:21:14,480
course<font color="#E5E5E5"> that's quite bad</font>

478
00:21:11,899 --> 00:21:19,070
so after<font color="#E5E5E5"> i saw this i thought to myself</font>

479
00:21:14,480 --> 00:21:21,289
<font color="#E5E5E5">okay this is just basically a big</font>

480
00:21:19,070 --> 00:21:23,899
mistake of the<font color="#E5E5E5"> standardization people</font>

481
00:21:21,289 --> 00:21:25,879
surely everyone realized that this was

482
00:21:23,899 --> 00:21:29,389
bad<font color="#E5E5E5"> on</font><font color="#CCCCCC"> today implemented something big</font>

483
00:21:25,880 --> 00:21:31,399
something better<font color="#E5E5E5"> but when actually</font>

484
00:21:29,390 --> 00:21:33,980
looked at<font color="#CCCCCC"> codes</font>

485
00:21:31,399 --> 00:21:34,879
<font color="#CCCCCC">yeah this is really like what the hell</font>

486
00:21:33,980 --> 00:21:38,779
<font color="#E5E5E5">are</font><font color="#CCCCCC"> you doing</font>

487
00:21:34,880 --> 00:21:41,570
so if you look at<font color="#E5E5E5"> vendors we have for</font>

488
00:21:38,779 --> 00:21:44,419
example<font color="#CCCCCC"> MediaTek it was used to be</font>

489
00:21:41,570 --> 00:21:46,740
called also<font color="#E5E5E5"> rolling</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> they implement</font>

490
00:21:44,419 --> 00:21:49,620
<font color="#E5E5E5">this random number generator</font>

491
00:21:46,740 --> 00:21:53,040
<font color="#E5E5E5">almost as specified with a few changes</font>

492
00:21:49,620 --> 00:21:57,780
of those changes actually<font color="#CCCCCC"> reconnect</font><font color="#E5E5E5"> a</font>

493
00:21:53,040 --> 00:21:59,190
bit<font color="#E5E5E5"> more</font><font color="#CCCCCC"> that they also that one</font><font color="#E5E5E5"> good</font>

494
00:21:57,780 --> 00:22:01,110
part by the way<font color="#E5E5E5"> he'll come back to that</font>

495
00:21:59,190 --> 00:22:04,440
in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> minutes</font><font color="#CCCCCC"> then there's</font><font color="#E5E5E5"> also</font>

496
00:22:01,110 --> 00:22:07,020
<font color="#CCCCCC">broadcom the random number generator day</font>

497
00:22:04,440 --> 00:22:09,240
<font color="#E5E5E5">use depends on the operating system that</font>

498
00:22:07,020 --> 00:22:12,420
is being used<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> there is also</font>

499
00:22:09,240 --> 00:22:14,429
open<font color="#E5E5E5"> firmware is a good example of an</font>

500
00:22:12,420 --> 00:22:16,140
embedded system on<font color="#CCCCCC"> terrorists hostapd</font>

501
00:22:14,429 --> 00:22:20,040
which is the<font color="#CCCCCC"> open-source implementation</font>

502
00:22:16,140 --> 00:22:20,940
<font color="#CCCCCC">of linux as you can see they do it</font>

503
00:22:20,040 --> 00:22:25,230
properly

504
00:22:20,940 --> 00:22:28,590
<font color="#CCCCCC">I'm so</font><font color="#E5E5E5"> we did a very rough estimate of</font>

505
00:22:25,230 --> 00:22:31,920
how many networks are run using this

506
00:22:28,590 --> 00:22:34,620
<font color="#CCCCCC">media tech or broad complementation and</font>

507
00:22:31,920 --> 00:22:37,980
so this was just using a very quick<font color="#CCCCCC"> war</font>

508
00:22:34,620 --> 00:22:40,469
drive around my city and I determines

509
00:22:37,980 --> 00:22:42,780
whether<font color="#E5E5E5"> devices using</font><font color="#CCCCCC"> media tech or</font>

510
00:22:40,470 --> 00:22:45,480
<font color="#E5E5E5">broadcom based on the fingerprints of</font>

511
00:22:42,780 --> 00:22:47,820
the beacon<font color="#E5E5E5"> how that works</font><font color="#CCCCCC"> is explained</font>

512
00:22:45,480 --> 00:22:50,640
in a different paper<font color="#E5E5E5"> but essentially</font><font color="#CCCCCC"> I</font>

513
00:22:47,820 --> 00:22:53,580
did a very very rough estimate<font color="#CCCCCC"> on like</font>

514
00:22:50,640 --> 00:22:56,070
<font color="#CCCCCC">this I</font><font color="#E5E5E5"> at most let's say</font><font color="#CCCCCC"> twenty-five</font>

515
00:22:53,580 --> 00:22:58,678
<font color="#E5E5E5">percent of networks could be vulnerable</font>

516
00:22:56,070 --> 00:23:01,830
to this<font color="#CCCCCC"> i would say</font><font color="#E5E5E5"> maybe five or ten</font>

517
00:22:58,679 --> 00:23:02,880
percent<font color="#E5E5E5"> could be attacked using a</font><font color="#CCCCCC"> text</font>

518
00:23:01,830 --> 00:23:06,899
similar to the one<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going to</font>

519
00:23:02,880 --> 00:23:08,610
present<font color="#E5E5E5"> just to show that these are a</font>

520
00:23:06,900 --> 00:23:13,679
bit popular<font color="#CCCCCC"> arms</font><font color="#E5E5E5"> you might be able to</font>

521
00:23:08,610 --> 00:23:15,750
use this<font color="#E5E5E5"> and practice but anyway let's</font>

522
00:23:13,679 --> 00:23:19,890
look at the first implementation the one

523
00:23:15,750 --> 00:23:21,840
of<font color="#CCCCCC"> MediaTek so what</font><font color="#E5E5E5"> did they do</font>

524
00:23:19,890 --> 00:23:24,990
well first and for all they implemented

525
00:23:21,840 --> 00:23:26,879
the key hierarchy<font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of procedure on</font>

526
00:23:24,990 --> 00:23:29,970
how to generate these<font color="#CCCCCC"> groupies</font><font color="#E5E5E5"> as</font>

527
00:23:26,880 --> 00:23:31,920
proposed by the standards<font color="#E5E5E5"> so just to</font>

528
00:23:29,970 --> 00:23:34,800
recap this is this construction where<font color="#E5E5E5"> we</font>

529
00:23:31,920 --> 00:23:36,870
<font color="#E5E5E5">generate</font><font color="#CCCCCC"> to value variables one which is</font>

530
00:23:34,800 --> 00:23:39,450
secret<font color="#CCCCCC"> the other which can be public</font>

531
00:23:36,870 --> 00:23:44,159
<font color="#CCCCCC">than a</font><font color="#E5E5E5"> hash</font><font color="#CCCCCC"> taken onto the outputs ich</font>

532
00:23:39,450 --> 00:23:46,980
<font color="#CCCCCC">schon they do a</font><font color="#E5E5E5"> improve this slightly</font>

533
00:23:44,160 --> 00:23:47,790
<font color="#E5E5E5">actually so they do one thing that is</font>

534
00:23:46,980 --> 00:23:49,740
good

535
00:23:47,790 --> 00:23:51,899
namely instead of when they want to

536
00:23:49,740 --> 00:23:54,000
generate a new group key<font color="#E5E5E5"> instead of</font>

537
00:23:51,900 --> 00:23:56,490
simply increasing the counter by one

538
00:23:54,000 --> 00:23:57,960
they actually<font color="#E5E5E5"> constantly generate a</font>

539
00:23:56,490 --> 00:24:00,090
completely new random

540
00:23:57,960 --> 00:24:01,740
value for the counter<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> that's</font>

541
00:24:00,090 --> 00:24:03,870
actually a very good decision because

542
00:24:01,740 --> 00:24:06,360
then<font color="#E5E5E5"> you are introducing new enterprise</font>

543
00:24:03,870 --> 00:24:09,029
<font color="#CCCCCC">every time you generate a group</font><font color="#E5E5E5"> key</font>

544
00:24:06,360 --> 00:24:13,289
however this group master key that one

545
00:24:09,029 --> 00:24:18,059
is only sampled at boot time

546
00:24:13,289 --> 00:24:21,029
<font color="#CCCCCC">ok so we now know how their construction</font>

547
00:24:18,059 --> 00:24:23,129
works<font color="#E5E5E5"> now the question is how do they</font>

548
00:24:21,029 --> 00:24:25,710
implement this random number generator

549
00:24:23,130 --> 00:24:27,990
on can we then try to attack it

550
00:24:25,710 --> 00:24:31,169
well this is the bad part of their

551
00:24:27,990 --> 00:24:34,289
design<font color="#CCCCCC"> they only use a clock</font><font color="#E5E5E5"> jitter to</font>

552
00:24:31,169 --> 00:24:36,299
extract randomness on to collect entropy

553
00:24:34,289 --> 00:24:39,658
in<font color="#E5E5E5"> particular it uses the so-called</font>

554
00:24:36,299 --> 00:24:41,940
<font color="#CCCCCC">Jeffy's</font><font color="#E5E5E5"> counter of the</font><font color="#CCCCCC"> linux kernel so</font>

555
00:24:39,659 --> 00:24:44,399
the<font color="#CCCCCC"> Jeffress counter is something that</font>

556
00:24:41,940 --> 00:24:47,250
is increased every<font color="#CCCCCC"> dick</font><font color="#E5E5E5"> but not every</font>

557
00:24:44,399 --> 00:24:49,469
processor<font color="#CCCCCC"> tick but every logical tick</font>

558
00:24:47,250 --> 00:24:54,929
<font color="#E5E5E5">and</font><font color="#CCCCCC"> i'll connect to that in a minute</font>

559
00:24:49,470 --> 00:24:57,149
so this rng is likely<font color="#CCCCCC"> quite bad</font><font color="#E5E5E5"> and this</font>

560
00:24:54,929 --> 00:24:59,789
<font color="#E5E5E5">is good for us because at least for us</font>

561
00:24:57,149 --> 00:25:02,250
as attackers<font color="#E5E5E5"> because we simply have to</font>

562
00:24:59,789 --> 00:25:04,230
protect the group<font color="#CCCCCC"> master key on this</font>

563
00:25:02,250 --> 00:25:07,799
<font color="#E5E5E5">public counter which is also count the</font>

564
00:25:04,230 --> 00:25:10,440
genomes<font color="#E5E5E5"> the group</font><font color="#CCCCCC"> knowns</font><font color="#E5E5E5"> and if we can</font>

565
00:25:07,799 --> 00:25:14,490
protect both of them<font color="#E5E5E5"> we can derive the</font>

566
00:25:10,440 --> 00:25:17,100
group key<font color="#E5E5E5"> so let's try to attack</font><font color="#CCCCCC"> this</font>

567
00:25:14,490 --> 00:25:20,580
<font color="#E5E5E5">orangey as</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> mentioned it uses this</font>

568
00:25:17,100 --> 00:25:23,309
<font color="#CCCCCC">jiffies</font><font color="#E5E5E5"> as the counter the problem is</font>

569
00:25:20,580 --> 00:25:27,779
<font color="#CCCCCC">jiffy's have a</font><font color="#E5E5E5"> best millisecond accuracy</font>

570
00:25:23,309 --> 00:25:31,590
which is<font color="#E5E5E5"> a rather low in fact it's</font>

571
00:25:27,779 --> 00:25:35,309
really low<font color="#E5E5E5"> so this means and</font><font color="#CCCCCC"> practice at</font>

572
00:25:31,590 --> 00:25:38,970
the GM k so this secret key which is

573
00:25:35,309 --> 00:25:41,549
generated at<font color="#E5E5E5"> boot</font><font color="#CCCCCC"> generated always uses</font>

574
00:25:38,970 --> 00:25:43,890
the same<font color="#CCCCCC"> give his value so</font><font color="#E5E5E5"> the claim</font>

575
00:25:41,549 --> 00:25:47,460
same clock values so that means in

576
00:25:43,890 --> 00:25:50,820
practice for the<font color="#CCCCCC"> GM k there are say</font>

577
00:25:47,460 --> 00:25:53,760
around 200 to 300 possible values<font color="#E5E5E5"> at</font>

578
00:25:50,820 --> 00:25:55,860
least if you have<font color="#E5E5E5"> a</font><font color="#CCCCCC"> I tested this on my</font>

579
00:25:53,760 --> 00:25:59,039
device on for a specific device on

580
00:25:55,860 --> 00:26:01,260
specific<font color="#E5E5E5"> firmware version then you have</font>

581
00:25:59,039 --> 00:26:03,210
a limited set of possibilities of course

582
00:26:01,260 --> 00:26:06,570
if you run a different firmware version

583
00:26:03,210 --> 00:26:09,120
<font color="#E5E5E5">then some other things might happen</font>

584
00:26:06,570 --> 00:26:10,770
during the boot process<font color="#E5E5E5"> influencing the</font>

585
00:26:09,120 --> 00:26:13,530
time when<font color="#CCCCCC"> his GF you shift</font>

586
00:26:10,770 --> 00:26:15,150
these values are collected<font color="#E5E5E5"> but if you</font>

587
00:26:13,530 --> 00:26:17,639
know the implementation<font color="#CCCCCC"> you're attacking</font>

588
00:26:15,150 --> 00:26:22,110
attacking<font color="#E5E5E5"> you have a very limited set of</font>

589
00:26:17,640 --> 00:26:26,910
values<font color="#E5E5E5"> then the second part is we have</font>

590
00:26:22,110 --> 00:26:29,429
to predict this<font color="#CCCCCC"> genomes value on most</font>

591
00:26:26,910 --> 00:26:32,010
the<font color="#E5E5E5"> routers it is the</font><font color="#CCCCCC"> groupie is</font>

592
00:26:29,430 --> 00:26:34,470
<font color="#E5E5E5">regenerated every hour meaning this</font>

593
00:26:32,010 --> 00:26:36,930
<font color="#E5E5E5">Geno's value is also sampled every hour</font>

594
00:26:34,470 --> 00:26:39,210
<font color="#CCCCCC">so in order to predict this value we</font>

595
00:26:36,930 --> 00:26:41,220
need to know the uptime<font color="#CCCCCC"> of the router to</font>

596
00:26:39,210 --> 00:26:45,090
<font color="#CCCCCC">protect the range of possible jiffies</font>

597
00:26:41,220 --> 00:26:46,800
values that were used<font color="#E5E5E5"> and how do we do</font>

598
00:26:45,090 --> 00:26:48,959
how do we determine the uptime<font color="#E5E5E5"> of the</font>

599
00:26:46,800 --> 00:26:51,330
router<font color="#CCCCCC"> well it's quite simple the uptime</font>

600
00:26:48,960 --> 00:26:54,960
is<font color="#E5E5E5"> lead</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the beacons of most routers</font>

601
00:26:51,330 --> 00:26:56,970
<font color="#CCCCCC">so we simply have to sniff beacons then</font>

602
00:26:54,960 --> 00:26:58,860
we can estimate the<font color="#E5E5E5"> uptime of the router</font>

603
00:26:56,970 --> 00:27:02,940
and then we can estimate the time of

604
00:26:58,860 --> 00:27:05,040
when this<font color="#CCCCCC"> genus</font><font color="#E5E5E5"> was generated so</font>

605
00:27:02,940 --> 00:27:07,770
basically what you have to do for a

606
00:27:05,040 --> 00:27:09,510
successful attack<font color="#CCCCCC"> we need to capture one</font>

607
00:27:07,770 --> 00:27:13,260
and cryptid broadcast or multicast

608
00:27:09,510 --> 00:27:15,570
message<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> to capture also a few</font>

609
00:27:13,260 --> 00:27:18,510
beacons to estimate<font color="#E5E5E5"> the uptime and then</font>

610
00:27:15,570 --> 00:27:22,169
we can do a search<font color="#E5E5E5"> through a</font><font color="#CCCCCC"> hole</font><font color="#E5E5E5"> to</font>

611
00:27:18,510 --> 00:27:25,860
<font color="#CCCCCC">true the whole key space and we try</font><font color="#E5E5E5"> this</font>

612
00:27:22,170 --> 00:27:29,670
<font color="#E5E5E5">against our own router so that's this</font>

613
00:27:25,860 --> 00:27:32,550
one<font color="#E5E5E5"> and here we noticed while we</font>

614
00:27:29,670 --> 00:27:35,430
implemented a program on the GPU<font color="#CCCCCC"> in</font>

615
00:27:32,550 --> 00:27:38,159
particular on<font color="#CCCCCC"> opencl</font><font color="#E5E5E5"> to make sure we can</font>

616
00:27:35,430 --> 00:27:41,430
do this in a timely matter<font color="#CCCCCC"> and we</font><font color="#E5E5E5"> found</font>

617
00:27:38,160 --> 00:27:44,850
that using the GPU in my laptop which is

618
00:27:41,430 --> 00:27:47,460
just standard GPU<font color="#E5E5E5"> you can even get</font>

619
00:27:44,850 --> 00:27:50,429
better<font color="#CCCCCC"> gpus or even multiple ones</font><font color="#E5E5E5"> but</font>

620
00:27:47,460 --> 00:27:52,110
<font color="#E5E5E5">even just on my normal laptop</font><font color="#CCCCCC"> i can</font>

621
00:27:50,430 --> 00:28:00,220
crack the case<font color="#E5E5E5"> within three to four</font>

622
00:27:52,110 --> 00:28:04,209
<font color="#E5E5E5">minutes and this</font>

623
00:28:00,220 --> 00:28:07,030
<font color="#E5E5E5">thank you so this is assuming the router</font>

624
00:28:04,210 --> 00:28:09,460
also<font color="#E5E5E5"> has</font><font color="#CCCCCC"> uptime of one year on</font><font color="#E5E5E5"> if the</font>

625
00:28:07,030 --> 00:28:11,230
<font color="#CCCCCC">uptime is around one year then</font><font color="#E5E5E5"> there's</font>

626
00:28:09,460 --> 00:28:13,600
also a lot of clock skew<font color="#E5E5E5"> meaning</font>

627
00:28:11,230 --> 00:28:15,580
<font color="#CCCCCC">predicting the genomes is harder</font><font color="#E5E5E5"> so if</font>

628
00:28:13,600 --> 00:28:18,549
<font color="#E5E5E5">i'm going to</font><font color="#CCCCCC"> download the attack</font><font color="#E5E5E5"> in a</font>

629
00:28:15,580 --> 00:28:20,980
few minutes<font color="#E5E5E5"> then</font><font color="#CCCCCC"> I know that the</font><font color="#E5E5E5"> uptime</font>

630
00:28:18,549 --> 00:28:23,470
was very low<font color="#E5E5E5"> meaning i can reduce this</font>

631
00:28:20,980 --> 00:28:25,750
number even for further because there

632
00:28:23,470 --> 00:28:28,120
hasn't been that much clock skew<font color="#E5E5E5"> meaning</font>

633
00:28:25,750 --> 00:28:31,390
predicting it will be easier<font color="#CCCCCC"> so this is</font>

634
00:28:28,120 --> 00:28:33,489
in a sense is also a worst-case<font color="#E5E5E5"> estimate</font>

635
00:28:31,390 --> 00:28:35,740
however<font color="#CCCCCC"> i do after note that this is</font>

636
00:28:33,490 --> 00:28:37,780
only if<font color="#E5E5E5"> you are attacking one specific</font>

637
00:28:35,740 --> 00:28:39,970
device if you know which device you're

638
00:28:37,780 --> 00:28:42,039
attacking<font color="#CCCCCC"> let's say you don't know the</font>

639
00:28:39,970 --> 00:28:46,000
exact firmware that is running<font color="#E5E5E5"> then you</font>

640
00:28:42,039 --> 00:28:48,100
have to perform a bigger<font color="#E5E5E5"> search</font><font color="#CCCCCC"> so the</font>

641
00:28:46,000 --> 00:28:52,150
end result here is that you get both the

642
00:28:48,100 --> 00:28:54,219
master key of the current group key so I

643
00:28:52,150 --> 00:28:56,830
<font color="#CCCCCC">plant a</font><font color="#E5E5E5"> demo here now</font>

644
00:28:54,220 --> 00:29:01,179
Wi-Fi demos are always very risky

645
00:28:56,830 --> 00:29:03,039
especially in a situation like this<font color="#CCCCCC"> so</font>

646
00:29:01,179 --> 00:29:07,120
fingers crossed

647
00:29:03,039 --> 00:29:10,299
so let me first<font color="#E5E5E5"> try to mirror the screen</font>

648
00:29:07,120 --> 00:29:18,039
<font color="#CCCCCC">and</font><font color="#E5E5E5"> so we don't already fail here</font>

649
00:29:10,299 --> 00:29:21,010
<font color="#CCCCCC">ok so here i have a Wi-Fi device that is</font>

650
00:29:18,039 --> 00:29:25,030
running and monitor<font color="#CCCCCC"> mart</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I have a</font>

651
00:29:21,010 --> 00:29:27,970
script that will capture the frames<font color="#E5E5E5"> sent</font>

652
00:29:25,030 --> 00:29:30,370
by my router<font color="#E5E5E5"> so I already put it in</font>

653
00:29:27,970 --> 00:29:33,220
monitor mode so that is simply<font color="#CCCCCC"> a script</font>

654
00:29:30,370 --> 00:29:35,949
just execute some at commands to put<font color="#E5E5E5"> it</font>

655
00:29:33,220 --> 00:29:39,940
<font color="#CCCCCC">on</font><font color="#E5E5E5"> monitor mode</font><font color="#CCCCCC"> i'm not going to capture</font>

656
00:29:35,950 --> 00:29:44,230
packets that are sent by my router and I

657
00:29:39,940 --> 00:29:47,289
made a<font color="#CCCCCC"> Python script</font><font color="#E5E5E5"> for that so let's</font>

658
00:29:44,230 --> 00:29:52,390
execute that<font color="#CCCCCC"> on capture packets from my</font>

659
00:29:47,289 --> 00:29:54,730
router<font color="#E5E5E5"> as you can see it's now trying to</font>

660
00:29:52,390 --> 00:29:56,620
capture packets<font color="#E5E5E5"> but nothing is received</font>

661
00:29:54,730 --> 00:29:59,980
yet<font color="#E5E5E5"> and that is normal because the</font>

662
00:29:56,620 --> 00:30:02,408
<font color="#CCCCCC">Rueter is not yet started</font><font color="#E5E5E5"> so let's put</font>

663
00:29:59,980 --> 00:30:05,200
it on this was planned by the way to

664
00:30:02,409 --> 00:30:07,510
show you<font color="#E5E5E5"> it's real</font>

665
00:30:05,200 --> 00:30:10,220
so now the<font color="#CCCCCC"> Rueter</font><font color="#E5E5E5"> is booting</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> in a few</font>

666
00:30:07,510 --> 00:30:12,890
seconds it should be receiving a

667
00:30:10,220 --> 00:30:15,770
<font color="#CCCCCC">beacons</font><font color="#E5E5E5"> from which it can derive the</font>

668
00:30:12,890 --> 00:30:17,900
<font color="#E5E5E5">uptime of the router you can see there</font>

669
00:30:15,770 --> 00:30:20,090
we go<font color="#E5E5E5"> we got a beacon and now it's</font>

670
00:30:17,900 --> 00:30:24,080
waiting for an encrypted<font color="#E5E5E5"> broadcast</font>

671
00:30:20,090 --> 00:30:28,549
packet<font color="#CCCCCC"> now this</font><font color="#E5E5E5"> is one small limitation</font>

672
00:30:24,080 --> 00:30:31,100
of<font color="#E5E5E5"> the attack up as you can see it was</font>

673
00:30:28,549 --> 00:30:33,139
waiting until my laptop connected to

674
00:30:31,100 --> 00:30:36,439
this network<font color="#E5E5E5"> because if no one is</font>

675
00:30:33,140 --> 00:30:39,049
connected to the network<font color="#CCCCCC"> then there is</font>

676
00:30:36,440 --> 00:30:41,299
of course no traffic<font color="#CCCCCC"> so there must be at</font>

677
00:30:39,049 --> 00:30:43,309
least one<font color="#CCCCCC"> clients or for some reason</font>

678
00:30:41,299 --> 00:30:45,559
your router has to send one broadcast

679
00:30:43,309 --> 00:30:48,168
<font color="#E5E5E5">frame that is encrypted using the</font>

680
00:30:45,559 --> 00:30:49,520
broadcast<font color="#CCCCCC"> scheme because</font><font color="#E5E5E5"> otherwise</font><font color="#CCCCCC"> no</font>

681
00:30:48,169 --> 00:30:52,280
there is nothing<font color="#E5E5E5"> to crack</font>

682
00:30:49,520 --> 00:30:56,360
we don't have any data<font color="#E5E5E5"> so in this case</font>

683
00:30:52,280 --> 00:30:59,539
we captured this frame<font color="#CCCCCC"> so</font><font color="#E5E5E5"> let's try to</font>

684
00:30:56,360 --> 00:31:02,270
open this capture file so you can see

685
00:30:59,539 --> 00:31:05,299
here we captured a lot of<font color="#CCCCCC"> bacon frames</font>

686
00:31:02,270 --> 00:31:09,889
and this beacon frame has a field here

687
00:31:05,299 --> 00:31:11,840
which is called the<font color="#CCCCCC"> timestamp on from</font>

688
00:31:09,890 --> 00:31:14,150
this weekend the terminal<font color="#CCCCCC"> of time so</font>

689
00:31:11,840 --> 00:31:18,799
here you can see it here it's very close

690
00:31:14,150 --> 00:31:20,600
to<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> and every</font><font color="#CCCCCC"> time it increases on</font>

691
00:31:18,799 --> 00:31:21,440
from this we can determine the<font color="#E5E5E5"> uptime of</font>

692
00:31:20,600 --> 00:31:25,399
the router

693
00:31:21,440 --> 00:31:27,980
there you go on<font color="#E5E5E5"> that the very ends of</font>

694
00:31:25,400 --> 00:31:32,390
the<font color="#E5E5E5"> sculpture we have this broadcast</font>

695
00:31:27,980 --> 00:31:33,200
<font color="#CCCCCC">packet which we want to decrypt</font><font color="#E5E5E5"> so let's</font>

696
00:31:32,390 --> 00:31:36,230
try that

697
00:31:33,200 --> 00:31:38,900
so as<font color="#CCCCCC"> I mentioned this works on the GPU</font>

698
00:31:36,230 --> 00:31:41,809
<font color="#CCCCCC">so first I have to type up</font><font color="#E5E5E5"> to run</font>

699
00:31:38,900 --> 00:31:44,450
<font color="#E5E5E5">through</font><font color="#CCCCCC"> enable my GPU</font><font color="#E5E5E5"> while executing</font>

700
00:31:41,809 --> 00:31:47,149
the next command<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> simply have a</font>

701
00:31:44,450 --> 00:31:49,789
script here<font color="#CCCCCC"> i'm attacking the media tech</font>

702
00:31:47,150 --> 00:31:55,700
implementation<font color="#CCCCCC"> and i'm using the capture</font>

703
00:31:49,789 --> 00:31:58,070
<font color="#CCCCCC">i just made so now its part</font><font color="#E5E5E5"> is this file</font>

704
00:31:55,700 --> 00:32:00,470
here<font color="#E5E5E5"> that lists all the networks that we</font>

705
00:31:58,070 --> 00:32:02,450
captured in this case because we are in

706
00:32:00,470 --> 00:32:07,159
a crowded room<font color="#CCCCCC"> I made sure that I only</font>

707
00:32:02,450 --> 00:32:08,929
captured frames from my network to try

708
00:32:07,159 --> 00:32:11,360
to make sure that the demo<font color="#E5E5E5"> indeed works</font>

709
00:32:08,929 --> 00:32:14,120
<font color="#E5E5E5">and you can see now it's trying to</font>

710
00:32:11,360 --> 00:32:16,189
predict the group master key on the best

711
00:32:14,120 --> 00:32:18,860
estimate<font color="#CCCCCC"> at the Jeffers</font><font color="#E5E5E5"> values that were</font>

712
00:32:16,190 --> 00:32:21,679
used<font color="#CCCCCC"> there were around</font><font color="#E5E5E5"> this number on</font>

713
00:32:18,860 --> 00:32:22,559
the surface value<font color="#CCCCCC"> state</font><font color="#E5E5E5"> where</font><font color="#CCCCCC"> use 4g</font>

714
00:32:21,679 --> 00:32:24,749
known

715
00:32:22,559 --> 00:32:27,240
<font color="#CCCCCC">she knows estimated around this value</font>

716
00:32:24,749 --> 00:32:29,429
<font color="#CCCCCC">now you may be wondering why is this</font>

717
00:32:27,240 --> 00:32:32,309
<font color="#CCCCCC">Jeffy's values</font><font color="#E5E5E5"> so high</font>

718
00:32:29,429 --> 00:32:35,249
doesn't<font color="#CCCCCC"> it start at zero</font><font color="#E5E5E5"> is actually</font>

719
00:32:32,309 --> 00:32:37,620
very interesting and my opinion<font color="#E5E5E5"> the</font>

720
00:32:35,249 --> 00:32:39,600
<font color="#CCCCCC">linux kernel starts at the Jeffers value</font>

721
00:32:37,620 --> 00:32:41,549
of minus<font color="#E5E5E5"> five minutes</font>

722
00:32:39,600 --> 00:32:44,129
<font color="#E5E5E5">why do they do that well that's because</font>

723
00:32:41,549 --> 00:32:46,559
if you are a developer on<font color="#E5E5E5"> their</font><font color="#CCCCCC"> Stormo</font>

724
00:32:44,129 --> 00:32:48,959
<font color="#E5E5E5">is a</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> in your driver that after five</font>

725
00:32:46,559 --> 00:32:50,610
minutes<font color="#E5E5E5"> when your</font><font color="#CCCCCC"> gypsy values overflows</font>

726
00:32:48,960 --> 00:32:52,259
there is a problem that<font color="#CCCCCC"> divide</font>

727
00:32:50,610 --> 00:32:54,840
developers<font color="#CCCCCC"> with very</font><font color="#E5E5E5"> quickly detect</font>

728
00:32:52,259 --> 00:32:57,059
issues<font color="#CCCCCC"> if your GF is value with overflow</font>

729
00:32:54,840 --> 00:32:58,918
<font color="#E5E5E5">this this is just to explain why this</font>

730
00:32:57,059 --> 00:33:02,789
number is so high even though we just

731
00:32:58,919 --> 00:33:05,519
<font color="#CCCCCC">boots the router in any way you can see</font>

732
00:33:02,789 --> 00:33:08,850
that we successfully found the<font color="#CCCCCC"> groupie</font>

733
00:33:05,519 --> 00:33:12,840
here<font color="#CCCCCC"> on</font><font color="#E5E5E5"> that even decrypted the packets</font>

734
00:33:08,850 --> 00:33:14,820
for us so that worked<font color="#E5E5E5"> on the road the</font>

735
00:33:12,840 --> 00:33:17,549
single decrypted packets to a file as

736
00:33:14,820 --> 00:33:21,809
well<font color="#CCCCCC"> so let's open that as well so you</font>

737
00:33:17,549 --> 00:33:25,559
can see that indeed works here

738
00:33:21,809 --> 00:33:28,019
that's<font color="#E5E5E5"> the wrong file</font><font color="#CCCCCC"> the crypts and</font>

739
00:33:25,559 --> 00:33:31,950
<font color="#CCCCCC">here you can</font><font color="#E5E5E5"> see a</font><font color="#CCCCCC"> descriptive broadcast</font>

740
00:33:28,019 --> 00:33:34,169
packet was an ARP packet on<font color="#CCCCCC"> here you can</font>

741
00:33:31,950 --> 00:33:36,480
<font color="#CCCCCC">see the</font><font color="#E5E5E5"> decrypt packet so</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> indeed</font>

742
00:33:34,169 --> 00:33:39,730
correctly predicted that the<font color="#E5E5E5"> group</font><font color="#CCCCCC"> kyon</font>

743
00:33:36,480 --> 00:33:48,630
who are able to decrypt this packet

744
00:33:39,730 --> 00:33:52,440
[Applause]

745
00:33:48,630 --> 00:33:54,270
<font color="#CCCCCC">so let's now try to switch back to the</font>

746
00:33:52,440 --> 00:34:03,660
presentation

747
00:33:54,270 --> 00:34:07,650
<font color="#CCCCCC">oh ok i will have to go truly</font><font color="#E5E5E5"> slides</font>

748
00:34:03,660 --> 00:34:11,340
again probably<font color="#CCCCCC"> know</font>

749
00:34:07,650 --> 00:34:13,800
<font color="#CCCCCC">ok so that was</font><font color="#E5E5E5"> the demo the demo gods</font>

750
00:34:11,340 --> 00:34:18,960
have praised us<font color="#E5E5E5"> thank god it worked</font>

751
00:34:13,800 --> 00:34:22,350
so now let's come back to the other

752
00:34:18,960 --> 00:34:24,960
vendor<font color="#CCCCCC"> had a</font><font color="#E5E5E5"> broadcom vendor so as</font><font color="#CCCCCC"> I</font>

753
00:34:22,350 --> 00:34:27,629
mentioned<font color="#E5E5E5"> this depends on the operating</font>

754
00:34:24,960 --> 00:34:30,840
system that they are using<font color="#CCCCCC"> a</font><font color="#E5E5E5"> particular</font>

755
00:34:27,629 --> 00:34:32,819
<font color="#CCCCCC">if you are using a linux</font><font color="#E5E5E5"> then they</font>

756
00:34:30,840 --> 00:34:36,300
implement<font color="#CCCCCC"> a groupie hierarchy as</font>

757
00:34:32,820 --> 00:34:39,000
specified in the standards but they

758
00:34:36,300 --> 00:34:43,050
simply<font color="#CCCCCC"> reads random this from def</font><font color="#E5E5E5"> you</font>

759
00:34:39,000 --> 00:34:44,850
random<font color="#E5E5E5"> so that is much better than the</font>

760
00:34:43,050 --> 00:34:47,280
random number generator proposed in the

761
00:34:44,850 --> 00:34:50,370
standard<font color="#CCCCCC"> however a few years ago there</font>

762
00:34:47,280 --> 00:34:53,700
was a<font color="#E5E5E5"> baby</font><font color="#CCCCCC"> a paper called mind</font><font color="#E5E5E5"> your P's</font>

763
00:34:50,370 --> 00:34:56,790
and Q's<font color="#E5E5E5"> by a hangar at all on</font><font color="#CCCCCC"> they</font>

764
00:34:53,699 --> 00:35:00,359
showed that on specifically on embedded

765
00:34:56,790 --> 00:35:03,450
devices on her older than<font color="#CCCCCC"> X Colonel's a</font>

766
00:35:00,360 --> 00:35:06,240
<font color="#E5E5E5">few random might be predictable</font><font color="#CCCCCC"> so this</font>

767
00:35:03,450 --> 00:35:08,640
means that on certain devices<font color="#CCCCCC"> a</font><font color="#E5E5E5"> few</font>

768
00:35:06,240 --> 00:35:10,290
random is predictable<font color="#CCCCCC"> and</font><font color="#E5E5E5"> in turn all</font>

769
00:35:08,640 --> 00:35:13,560
the groupies might be predictable as

770
00:35:10,290 --> 00:35:15,270
well<font color="#E5E5E5"> now if you run a newer linux kernel</font>

771
00:35:13,560 --> 00:35:18,330
<font color="#CCCCCC">and this should no longer be an issue</font>

772
00:35:15,270 --> 00:35:19,650
<font color="#CCCCCC">however because a lot of routers use an</font>

773
00:35:18,330 --> 00:35:21,750
old<font color="#E5E5E5"> colonel</font>

774
00:35:19,650 --> 00:35:24,570
this might be an issue<font color="#CCCCCC"> I haven't</font><font color="#E5E5E5"> tested</font>

775
00:35:21,750 --> 00:35:27,720
this<font color="#CCCCCC"> this is simply based on their paper</font>

776
00:35:24,570 --> 00:35:30,690
that<font color="#CCCCCC"> def you random is not ideal and for</font>

777
00:35:27,720 --> 00:35:33,000
all the<font color="#CCCCCC"> Colonel's essentially so</font><font color="#E5E5E5"> that's</font>

778
00:35:30,690 --> 00:35:37,350
for<font color="#E5E5E5"> linux</font><font color="#CCCCCC"> this broadcom</font><font color="#E5E5E5"> implementation</font>

779
00:35:33,000 --> 00:35:38,760
also runs on<font color="#CCCCCC"> vxworks on equals</font><font color="#E5E5E5"> so for</font>

780
00:35:37,350 --> 00:35:41,790
those of you who don't know what these

781
00:35:38,760 --> 00:35:43,290
operating systems are<font color="#CCCCCC"> vxworks on the</font>

782
00:35:41,790 --> 00:35:47,190
equals<font color="#CCCCCC"> they are but essentially</font>

783
00:35:43,290 --> 00:35:50,279
<font color="#E5E5E5">real-time operating systems</font><font color="#CCCCCC"> vxworks is</font>

784
00:35:47,190 --> 00:35:52,770
proprietary<font color="#CCCCCC"> it's used a lot in</font><font color="#E5E5E5"> aerospace</font>

785
00:35:50,280 --> 00:35:57,210
<font color="#CCCCCC">so its use</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> Mars Lander it's used</font>

786
00:35:52,770 --> 00:35:59,340
by SpaceX<font color="#E5E5E5"> it's also used drones and of</font>

787
00:35:57,210 --> 00:36:00,630
course it's also used<font color="#E5E5E5"> uncertain</font><font color="#CCCCCC"> router</font>

788
00:35:59,340 --> 00:36:02,850
<font color="#CCCCCC">sound access points</font>

789
00:36:00,630 --> 00:36:04,440
<font color="#E5E5E5">then there's also equals which is</font>

790
00:36:02,850 --> 00:36:07,380
essentially similar it's also<font color="#E5E5E5"> a</font>

791
00:36:04,440 --> 00:36:09,600
real-time operating system except it's

792
00:36:07,380 --> 00:36:11,940
open source<font color="#CCCCCC"> on this</font><font color="#E5E5E5"> again used in</font>

793
00:36:09,600 --> 00:36:15,060
aerospace<font color="#CCCCCC"> on it's also used</font><font color="#E5E5E5"> by the</font>

794
00:36:11,940 --> 00:36:16,980
military and certain situations<font color="#E5E5E5"> but of</font>

795
00:36:15,060 --> 00:36:19,380
<font color="#E5E5E5">course we focus on ministries in</font><font color="#CCCCCC"> a</font>

796
00:36:16,980 --> 00:36:23,100
router<font color="#E5E5E5"> and it's used as an access point</font>

797
00:36:19,380 --> 00:36:26,040
<font color="#CCCCCC">so we see that in this case</font>

798
00:36:23,100 --> 00:36:31,529
<font color="#E5E5E5">broadcom again implements the aileron</font>

799
00:36:26,040 --> 00:36:36,330
<font color="#E5E5E5">attitude 11 rookie</font><font color="#CCCCCC"> talent for random</font>

800
00:36:31,530 --> 00:36:39,720
numbers<font color="#E5E5E5"> as simply takes the md5 hash of</font>

801
00:36:36,330 --> 00:36:42,600
the current time in microseconds<font color="#E5E5E5"> so</font>

802
00:36:39,720 --> 00:36:47,279
again that's not ideal at all

803
00:36:42,600 --> 00:36:49,560
there is also another disadvantage of

804
00:36:47,280 --> 00:36:52,530
their implementation on<font color="#CCCCCC"> there is this</font>

805
00:36:49,560 --> 00:36:54,240
public counter in the handshake<font color="#E5E5E5"> in there</font>

806
00:36:52,530 --> 00:36:56,400
<font color="#E5E5E5">for a handshake that you just</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to</font>

807
00:36:54,240 --> 00:36:58,589
connect to the network<font color="#CCCCCC"> now this is</font>

808
00:36:56,400 --> 00:37:01,680
perfectly allowed<font color="#E5E5E5"> there is nothing wrong</font>

809
00:36:58,590 --> 00:37:06,090
with that but it<font color="#E5E5E5"> does make it easy for</font>

810
00:37:01,680 --> 00:37:07,890
us as attackers<font color="#E5E5E5"> because we can collect</font>

811
00:37:06,090 --> 00:37:10,080
the value<font color="#CCCCCC"> of that was used herein</font><font color="#E5E5E5"> the</font>

812
00:37:07,890 --> 00:37:11,730
handshake<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the one that was used while</font>

813
00:37:10,080 --> 00:37:13,799
generating the group<font color="#E5E5E5"> he will be only a</font>

814
00:37:11,730 --> 00:37:16,230
few numbers away from this value that

815
00:37:13,800 --> 00:37:19,320
was<font color="#CCCCCC"> lived</font><font color="#E5E5E5"> so really the only thing we</font>

816
00:37:16,230 --> 00:37:22,140
have to predict here is the group<font color="#E5E5E5"> master</font>

817
00:37:19,320 --> 00:37:24,870
key<font color="#E5E5E5"> and if we have the group master key</font>

818
00:37:22,140 --> 00:37:28,620
weekend<font color="#E5E5E5"> and then again predict the group</font>

819
00:37:24,870 --> 00:37:35,160
key<font color="#E5E5E5"> so one popular router which is a</font>

820
00:37:28,620 --> 00:37:37,650
vulnerable to this is the WR team<font color="#E5E5E5"> 54</font><font color="#CCCCCC"> at</font>

821
00:37:35,160 --> 00:37:40,680
<font color="#E5E5E5">least if you have one that uses version</font>

822
00:37:37,650 --> 00:37:42,960
5 or higher<font color="#CCCCCC"> then it uses</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> vxworks</font>

823
00:37:40,680 --> 00:37:45,359
<font color="#CCCCCC">Colonel so if you have a router which is</font>

824
00:37:42,960 --> 00:37:48,330
version<font color="#CCCCCC"> for four or</font><font color="#E5E5E5"> lower</font><font color="#CCCCCC"> that runs on</font>

825
00:37:45,360 --> 00:37:52,770
<font color="#E5E5E5">linux and of course if you run d we</font><font color="#CCCCCC"> r T</font>

826
00:37:48,330 --> 00:37:55,860
a dd-wrt on this<font color="#CCCCCC"> you're also</font><font color="#E5E5E5"> fine but if</font>

827
00:37:52,770 --> 00:37:58,770
you have a version 5 of this device or

828
00:37:55,860 --> 00:38:01,740
higher than you might be vulnerable

829
00:37:58,770 --> 00:38:04,110
unfortunately<font color="#CCCCCC"> i didn't only had older</font>

830
00:38:01,740 --> 00:38:07,169
<font color="#E5E5E5">versions of this</font><font color="#CCCCCC"> router at all so</font><font color="#E5E5E5"> i</font>

831
00:38:04,110 --> 00:38:10,680
simply<font color="#CCCCCC"> simulated</font><font color="#E5E5E5"> this attack again using</font>

832
00:38:07,170 --> 00:38:12,880
<font color="#CCCCCC">a opencl code and even with just simply</font>

833
00:38:10,680 --> 00:38:15,279
quite modest assumptions

834
00:38:12,880 --> 00:38:18,579
<font color="#E5E5E5">and</font><font color="#CCCCCC"> I predict that you need around for</font>

835
00:38:15,279 --> 00:38:20,319
<font color="#CCCCCC">25</font><font color="#E5E5E5"> minutes on my GPU to crack it</font>

836
00:38:18,579 --> 00:38:22,720
<font color="#E5E5E5">let's say that for some reason my</font>

837
00:38:20,319 --> 00:38:25,058
simulation is not perfect<font color="#CCCCCC"> then you can</font>

838
00:38:22,720 --> 00:38:28,839
use a more powerful GPU<font color="#CCCCCC"> to still</font>

839
00:38:25,059 --> 00:38:30,910
<font color="#E5E5E5">protected but again taking the md5 of</font>

840
00:38:28,839 --> 00:38:33,759
the current time<font color="#E5E5E5"> in microseconds</font><font color="#CCCCCC"> it's</font>

841
00:38:30,910 --> 00:38:35,230
simply not sufficient to collect enough

842
00:38:33,759 --> 00:38:38,799
<font color="#E5E5E5">randomness</font>

843
00:38:35,230 --> 00:38:41,470
so that concludes<font color="#CCCCCC"> both</font><font color="#E5E5E5"> these</font>

844
00:38:38,799 --> 00:38:42,759
implementations<font color="#CCCCCC"> then we also have two</font>

845
00:38:41,470 --> 00:38:45,848
other examples

846
00:38:42,759 --> 00:38:49,599
the first is called open firmware of the

847
00:38:45,849 --> 00:38:53,079
<font color="#E5E5E5">cycle is a host</font><font color="#CCCCCC"> APD so open firmware</font>

848
00:38:49,599 --> 00:38:56,259
<font color="#E5E5E5">essentially it's a simple as it's a</font>

849
00:38:53,079 --> 00:38:57,849
simple<font color="#CCCCCC"> open-source biosystem</font><font color="#E5E5E5"> and what</font>

850
00:38:56,259 --> 00:39:01,599
was really<font color="#E5E5E5"> surprising to me is that</font>

851
00:38:57,849 --> 00:39:04,480
during the<font color="#CCCCCC"> bias</font><font color="#E5E5E5"> these people have very</font>

852
00:39:01,599 --> 00:39:05,619
basic support for Wi-Fi functionality<font color="#E5E5E5"> at</font>

853
00:39:04,480 --> 00:39:08,230
least as a client

854
00:39:05,619 --> 00:39:11,259
<font color="#E5E5E5">you can even</font><font color="#CCCCCC"> collect</font><font color="#E5E5E5"> connect to a</font><font color="#CCCCCC"> wpa to</font>

855
00:39:08,230 --> 00:39:13,779
a<font color="#CCCCCC"> secured network</font><font color="#E5E5E5"> now for me that</font><font color="#CCCCCC"> was</font>

856
00:39:11,259 --> 00:39:19,809
very surprising to see that<font color="#CCCCCC"> bio</font><font color="#E5E5E5"> supports</font>

857
00:39:13,779 --> 00:39:21,670
Wi-Fi<font color="#E5E5E5"> but they do</font><font color="#CCCCCC"> now I do have to say</font>

858
00:39:19,809 --> 00:39:23,319
<font color="#E5E5E5">her that they only implement client</font>

859
00:39:21,670 --> 00:39:27,460
functionality so they don't implement

860
00:39:23,319 --> 00:39:30,009
<font color="#E5E5E5">access point functionality so they don't</font>

861
00:39:27,460 --> 00:39:32,019
actually generate a<font color="#CCCCCC"> groupie</font><font color="#E5E5E5"> however they</font>

862
00:39:30,009 --> 00:39:34,059
do use a random number generator to

863
00:39:32,019 --> 00:39:36,758
generate<font color="#E5E5E5"> other values that are used</font>

864
00:39:34,059 --> 00:39:41,319
during the Wi-Fi handshake<font color="#E5E5E5"> entire is</font>

865
00:39:36,759 --> 00:39:43,000
very very<font color="#E5E5E5"> simple methodology they simply</font>

866
00:39:41,319 --> 00:39:45,700
take the amount of texts that have

867
00:39:43,000 --> 00:39:48,849
occurred since boot<font color="#CCCCCC"> they run that to a</font>

868
00:39:45,700 --> 00:39:51,609
linear<font color="#E5E5E5"> confidential generator which is</font>

869
00:39:48,849 --> 00:39:54,160
simply a deterministic function<font color="#CCCCCC"> is used</font>

870
00:39:51,609 --> 00:39:57,009
<font color="#E5E5E5">as the random number generator</font><font color="#CCCCCC"> get the</font>

871
00:39:54,160 --> 00:39:59,859
output of this is hash<font color="#CCCCCC"> to get a</font>

872
00:39:57,009 --> 00:40:04,269
sufficiently long<font color="#E5E5E5"> output but still this</font>

873
00:39:59,859 --> 00:40:05,740
is very easy to predict<font color="#CCCCCC"> and we included</font>

874
00:40:04,269 --> 00:40:08,680
this because this is a very good example

875
00:40:05,740 --> 00:40:11,140
of an implementation that is running on

876
00:40:08,680 --> 00:40:13,299
embedded system<font color="#CCCCCC"> rather is no Colonel</font>

877
00:40:11,140 --> 00:40:15,368
available to provide you with random

878
00:40:13,299 --> 00:40:17,380
numbers<font color="#E5E5E5"> so in this case we are in the</font>

879
00:40:15,369 --> 00:40:19,269
bias there is no<font color="#CCCCCC"> Colonel there's no</font>

880
00:40:17,380 --> 00:40:21,039
libraries we can use to generate random

881
00:40:19,269 --> 00:40:23,649
numbers<font color="#E5E5E5"> and we see that in that</font>

882
00:40:21,039 --> 00:40:26,350
situation<font color="#E5E5E5"> very bad solutions are</font>

883
00:40:23,650 --> 00:40:27,910
<font color="#CCCCCC">east</font><font color="#E5E5E5"> and at the end of them at the end</font>

884
00:40:26,350 --> 00:40:30,790
of the presentation<font color="#CCCCCC"> I</font><font color="#E5E5E5"> will show away</font>

885
00:40:27,910 --> 00:40:33,640
<font color="#CCCCCC">where even in these scenarios in</font>

886
00:40:30,790 --> 00:40:35,590
embedded<font color="#E5E5E5"> system we can still try to come</font>

887
00:40:33,640 --> 00:40:40,270
up with good ways to generate random

888
00:40:35,590 --> 00:40:43,750
numbers<font color="#E5E5E5"> so as last example we have</font><font color="#CCCCCC"> host</font>

889
00:40:40,270 --> 00:40:46,750
<font color="#CCCCCC">APD</font><font color="#E5E5E5"> which is essentially the</font><font color="#CCCCCC"> most used</font>

890
00:40:43,750 --> 00:40:49,180
<font color="#E5E5E5">access</font><font color="#CCCCCC"> points on linux for example is it</font>

891
00:40:46,750 --> 00:40:51,490
is used by<font color="#CCCCCC"> Android if you</font><font color="#E5E5E5"> set up a</font>

892
00:40:49,180 --> 00:40:54,069
<font color="#CCCCCC">hotspot</font><font color="#E5E5E5"> and they have a very</font><font color="#CCCCCC"> good</font>

893
00:40:51,490 --> 00:40:57,310
implementation<font color="#CCCCCC"> that</font><font color="#E5E5E5"> implements the era</font>

894
00:40:54,070 --> 00:40:59,770
<font color="#E5E5E5">two</font><font color="#CCCCCC"> dot 11 gyuki they</font><font color="#E5E5E5"> extended</font><font color="#CCCCCC"> it to</font>

895
00:40:57,310 --> 00:41:02,350
<font color="#E5E5E5">include</font><font color="#CCCCCC"> enter pre every</font><font color="#E5E5E5"> time a new</font><font color="#CCCCCC"> group</font>

896
00:40:59,770 --> 00:41:05,410
<font color="#CCCCCC">key is generated so that's very good</font>

897
00:41:02,350 --> 00:41:07,870
<font color="#CCCCCC">even better than that they read from def</font>

898
00:41:05,410 --> 00:41:10,270
random<font color="#E5E5E5"> on boots and for some reason</font>

899
00:41:07,870 --> 00:41:12,130
there is not enough<font color="#E5E5E5"> entropy available it</font>

900
00:41:10,270 --> 00:41:13,990
will simply wait until the first client

901
00:41:12,130 --> 00:41:17,440
connects and then it will try to read

902
00:41:13,990 --> 00:41:20,080
again from<font color="#CCCCCC"> def random</font><font color="#E5E5E5"> and if</font><font color="#CCCCCC"> there still</font>

903
00:41:17,440 --> 00:41:22,810
isn't<font color="#E5E5E5"> enough entropy available it will</font>

904
00:41:20,080 --> 00:41:26,290
simply reject connections<font color="#E5E5E5"> so in other</font>

905
00:41:22,810 --> 00:41:32,020
words if you<font color="#E5E5E5"> use hostapd everything</font>

906
00:41:26,290 --> 00:41:35,860
should be fine<font color="#CCCCCC"> of course</font><font color="#E5E5E5"> if the colonel</font>

907
00:41:32,020 --> 00:41:38,500
and everything works properly so that

908
00:41:35,860 --> 00:41:41,980
concludes how we can generate<font color="#E5E5E5"> on predict</font>

909
00:41:38,500 --> 00:41:44,410
<font color="#E5E5E5">this group key we will now explain how</font>

910
00:41:41,980 --> 00:41:46,900
we can<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is the second main part</font>

911
00:41:44,410 --> 00:41:49,060
of the presentation<font color="#E5E5E5"> we can exploit this</font>

912
00:41:46,900 --> 00:41:51,760
<font color="#E5E5E5">group</font><font color="#CCCCCC"> key to inject on decrypt traffic</font>

913
00:41:49,060 --> 00:41:55,600
<font color="#E5E5E5">so let's start with a simple case we</font>

914
00:41:51,760 --> 00:41:59,260
want to inject a unicast IP<font color="#CCCCCC"> packets and</font>

915
00:41:55,600 --> 00:42:02,890
<font color="#E5E5E5">we want to send it towards the client so</font>

916
00:41:59,260 --> 00:42:04,900
your initial ID<font color="#CCCCCC"> maybe ok</font><font color="#E5E5E5"> you have your</font>

917
00:42:02,890 --> 00:42:07,540
IP packets<font color="#E5E5E5"> right here</font>

918
00:42:04,900 --> 00:42:10,630
you simply<font color="#E5E5E5"> put that into a broadcast</font>

919
00:42:07,540 --> 00:42:12,730
Wi-Fi frame<font color="#CCCCCC"> so here we have the</font><font color="#E5E5E5"> Wi-Fi</font>

920
00:42:10,630 --> 00:42:15,190
<font color="#E5E5E5">header of course very simplified</font>

921
00:42:12,730 --> 00:42:17,680
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> reflex</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> header</font><font color="#CCCCCC"> with</font>

922
00:42:15,190 --> 00:42:19,960
<font color="#E5E5E5">which has that this broad k broadcast</font>

923
00:42:17,680 --> 00:42:22,720
frame<font color="#CCCCCC"> is sent towards</font><font color="#E5E5E5"> the clients of our</font>

924
00:42:19,960 --> 00:42:24,970
network<font color="#CCCCCC"> and</font><font color="#E5E5E5"> receiver as the broadcast</font>

925
00:42:22,720 --> 00:42:27,310
<font color="#CCCCCC">mac address</font><font color="#E5E5E5"> because the receivers the</font>

926
00:42:24,970 --> 00:42:29,500
broadcast<font color="#CCCCCC"> mac address this IP packets</font>

927
00:42:27,310 --> 00:42:32,040
and everything with it is encrypted<font color="#E5E5E5"> and</font>

928
00:42:29,500 --> 00:42:34,980
<font color="#E5E5E5">protected</font><font color="#CCCCCC"> using</font><font color="#E5E5E5"> the group key</font>

929
00:42:32,040 --> 00:42:38,430
<font color="#E5E5E5">however this will not work</font><font color="#CCCCCC"> and why is</font>

930
00:42:34,980 --> 00:42:41,640
that well<font color="#CCCCCC"> declined notices that this</font>

931
00:42:38,430 --> 00:42:45,990
<font color="#E5E5E5">unit</font><font color="#CCCCCC"> cost IP packet is received on the</font>

932
00:42:41,640 --> 00:42:49,740
group<font color="#E5E5E5"> addressed</font><font color="#CCCCCC"> a Wi-Fi frame and this</font>

933
00:42:45,990 --> 00:42:53,850
is the<font color="#E5E5E5"> so-called</font><font color="#CCCCCC"> whole 196 check</font>

934
00:42:49,740 --> 00:42:56,069
<font color="#CCCCCC">basically says you should reject packets</font>

935
00:42:53,850 --> 00:42:58,589
that are sent on a group addressed<font color="#E5E5E5"> a</font>

936
00:42:56,070 --> 00:43:01,140
link layer<font color="#E5E5E5"> but</font><font color="#CCCCCC"> they're sent to a unicast</font>

937
00:42:58,590 --> 00:43:04,920
<font color="#E5E5E5">IP address in other words this technique</font>

938
00:43:01,140 --> 00:43:06,660
will not work<font color="#CCCCCC"> so how can we try to</font>

939
00:43:04,920 --> 00:43:09,450
bypass this technique

940
00:43:06,660 --> 00:43:12,390
well the<font color="#CCCCCC"> realization we have to make is</font>

941
00:43:09,450 --> 00:43:14,669
that this check occurs when a link layer

942
00:43:12,390 --> 00:43:16,799
packet is being passed on to the network

943
00:43:14,670 --> 00:43:20,220
layer where we have<font color="#E5E5E5"> these unicast IP</font>

944
00:43:16,800 --> 00:43:22,290
addresses<font color="#CCCCCC"> on an access point</font><font color="#E5E5E5"> only works</font>

945
00:43:20,220 --> 00:43:24,330
at the link layer<font color="#E5E5E5"> so if you can somehow</font>

946
00:43:22,290 --> 00:43:26,190
abuse the access<font color="#E5E5E5"> point then we might be</font>

947
00:43:24,330 --> 00:43:28,590
able to bypass this check

948
00:43:26,190 --> 00:43:31,140
so let me simply<font color="#CCCCCC"> explain the technique</font>

949
00:43:28,590 --> 00:43:33,540
that we're going to use<font color="#E5E5E5"> so we have our</font>

950
00:43:31,140 --> 00:43:36,150
network here with the victim<font color="#E5E5E5"> with the</font>

951
00:43:33,540 --> 00:43:39,420
attacker<font color="#E5E5E5"> which wants to send a packet to</font>

952
00:43:36,150 --> 00:43:42,630
the clients but what the attacker will

953
00:43:39,420 --> 00:43:45,300
do<font color="#CCCCCC"> it</font><font color="#E5E5E5"> will first</font><font color="#CCCCCC"> send this IP packet</font>

954
00:43:42,630 --> 00:43:49,740
<font color="#E5E5E5">towards the access</font><font color="#CCCCCC"> points</font><font color="#E5E5E5"> so again we</font>

955
00:43:45,300 --> 00:43:51,810
have our IP packet here<font color="#CCCCCC"> now we add a bit</font>

956
00:43:49,740 --> 00:43:54,629
more complicated Wi-Fi header<font color="#E5E5E5"> which says</font>

957
00:43:51,810 --> 00:43:56,759
this group frame this broadcast frame is

958
00:43:54,630 --> 00:43:59,850
sent to the access point<font color="#E5E5E5"> the immediate</font>

959
00:43:56,760 --> 00:44:00,780
receiver is in this case the broadcast

960
00:43:59,850 --> 00:44:02,819
<font color="#CCCCCC">mac address</font>

961
00:44:00,780 --> 00:44:04,320
however the final destination of the

962
00:44:02,820 --> 00:44:06,420
frame is the victim

963
00:44:04,320 --> 00:44:07,920
so what will happen if the access<font color="#CCCCCC"> points</font>

964
00:44:06,420 --> 00:44:10,290
receives this frame

965
00:44:07,920 --> 00:44:12,690
well it will notice<font color="#CCCCCC"> ok the frame is</font>

966
00:44:10,290 --> 00:44:14,400
indeed the<font color="#E5E5E5"> destined for me</font><font color="#CCCCCC"> i will use</font>

967
00:44:12,690 --> 00:44:16,140
the group key to decrypt it because<font color="#CCCCCC"> i</font>

968
00:44:14,400 --> 00:44:18,570
did<font color="#E5E5E5"> receive it on the broadcast make</font>

969
00:44:16,140 --> 00:44:20,490
<font color="#CCCCCC">address everything</font><font color="#E5E5E5"> is fine and then it</font>

970
00:44:18,570 --> 00:44:21,510
will notice<font color="#E5E5E5"> while it's still operating</font>

971
00:44:20,490 --> 00:44:24,390
at the link layer

972
00:44:21,510 --> 00:44:26,280
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> but the final destination is actually</font>

973
00:44:24,390 --> 00:44:28,680
the victim so<font color="#CCCCCC"> i have to forward this</font>

974
00:44:26,280 --> 00:44:30,570
packet to the victim and the<font color="#E5E5E5"> access</font>

975
00:44:28,680 --> 00:44:33,180
point of course as the<font color="#E5E5E5"> session case the</font>

976
00:44:30,570 --> 00:44:35,520
<font color="#E5E5E5">pairwise keys of the client so it will</font>

977
00:44:33,180 --> 00:44:38,009
simply take this IP packet<font color="#E5E5E5"> it will</font>

978
00:44:35,520 --> 00:44:40,770
encrypt it using the session<font color="#CCCCCC"> Keys for</font><font color="#E5E5E5"> us</font>

979
00:44:38,010 --> 00:44:43,920
and<font color="#E5E5E5"> we'll simply send it to the victim</font>

980
00:44:40,770 --> 00:44:45,060
<font color="#E5E5E5">for us</font><font color="#CCCCCC"> and now when the victim received</font>

981
00:44:43,920 --> 00:44:47,670
this<font color="#CCCCCC"> packets</font>

982
00:44:45,060 --> 00:44:50,490
everything seems<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> we have our</font><font color="#CCCCCC"> unicast</font>

983
00:44:47,670 --> 00:44:52,620
receiver addresses unicast IP address<font color="#E5E5E5"> it</font>

984
00:44:50,490 --> 00:44:57,330
is properly encrypted<font color="#E5E5E5"> so everything is</font>

985
00:44:52,620 --> 00:45:00,299
<font color="#CCCCCC">okay and</font><font color="#E5E5E5"> the attack works second part is</font>

986
00:44:57,330 --> 00:45:02,310
that we want to also<font color="#E5E5E5"> decrypt packets</font><font color="#CCCCCC"> on</font>

987
00:45:00,300 --> 00:45:04,470
<font color="#CCCCCC">the idea behind this is a very</font><font color="#E5E5E5"> simple</font>

988
00:45:02,310 --> 00:45:06,810
<font color="#E5E5E5">it's also very simple to explain</font>

989
00:45:04,470 --> 00:45:08,819
we simply<font color="#CCCCCC"> are poison at the Rooter on</font>

990
00:45:06,810 --> 00:45:10,890
the client so that the<font color="#CCCCCC"> P address of</font><font color="#E5E5E5"> the</font>

991
00:45:08,820 --> 00:45:14,670
<font color="#CCCCCC">gateway on the IP address of the clients</font>

992
00:45:10,890 --> 00:45:16,650
are broadcast<font color="#CCCCCC"> mac address and then both</font>

993
00:45:14,670 --> 00:45:19,410
the router on the<font color="#E5E5E5"> clients will send</font>

994
00:45:16,650 --> 00:45:21,450
unicast<font color="#E5E5E5"> IP traffic through a broadcast</font>

995
00:45:19,410 --> 00:45:24,120
<font color="#CCCCCC">mac</font><font color="#E5E5E5"> address</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little encrypted using the</font>

996
00:45:21,450 --> 00:45:26,609
group<font color="#E5E5E5"> free cookie which we have so we</font>

997
00:45:24,120 --> 00:45:28,500
can decrypt this packets and then

998
00:45:26,610 --> 00:45:31,380
forward them to<font color="#E5E5E5"> assure that connectivity</font>

999
00:45:28,500 --> 00:45:34,680
<font color="#E5E5E5">states that the client doesn't notice</font>

1000
00:45:31,380 --> 00:45:36,810
anything<font color="#E5E5E5"> so that's actually quite simple</font>

1001
00:45:34,680 --> 00:45:38,970
how we can we prevent this well the

1002
00:45:36,810 --> 00:45:41,910
first thing is that if the access<font color="#CCCCCC"> point</font>

1003
00:45:38,970 --> 00:45:44,160
receives a broadcast frame<font color="#E5E5E5"> but with a</font>

1004
00:45:41,910 --> 00:45:47,040
unicast final destination<font color="#E5E5E5"> it should not</font>

1005
00:45:44,160 --> 00:45:49,049
forward he's on an even better

1006
00:45:47,040 --> 00:45:52,380
<font color="#E5E5E5">countermeasure is that in an</font>

1007
00:45:49,050 --> 00:45:53,790
infrastructure<font color="#CCCCCC"> network</font><font color="#E5E5E5"> so not</font><font color="#CCCCCC"> necessary</font>

1008
00:45:52,380 --> 00:45:55,860
<font color="#CCCCCC">in</font><font color="#E5E5E5"> a mesh network</font><font color="#CCCCCC"> within</font><font color="#E5E5E5"> an</font>

1009
00:45:53,790 --> 00:45:58,590
infrastructure<font color="#CCCCCC"> Network where you have an</font>

1010
00:45:55,860 --> 00:46:01,830
access point<font color="#E5E5E5"> the access points which</font>

1011
00:45:58,590 --> 00:46:04,110
simply ignore frames that are received<font color="#CCCCCC"> a</font>

1012
00:46:01,830 --> 00:46:06,210
broadcast<font color="#E5E5E5"> mac address and then these</font>

1013
00:46:04,110 --> 00:46:09,960
issues would be avoided

1014
00:46:06,210 --> 00:46:13,350
so<font color="#CCCCCC"> I would say</font><font color="#E5E5E5"> that was the most fun</font>

1015
00:46:09,960 --> 00:46:15,660
part of the research<font color="#E5E5E5"> we're now going to</font>

1016
00:46:13,350 --> 00:46:19,080
look at a theoretical attack against the

1017
00:46:15,660 --> 00:46:25,470
handshake<font color="#E5E5E5"> that is being used</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> we</font>

1018
00:46:19,080 --> 00:46:28,319
can force<font color="#E5E5E5"> usage of</font><font color="#CCCCCC"> our c4 ok let's first</font>

1019
00:46:25,470 --> 00:46:30,359
quickly explain how the handshake<font color="#E5E5E5"> works</font>

1020
00:46:28,320 --> 00:46:32,370
<font color="#CCCCCC">so we have our client here which</font>

1021
00:46:30,360 --> 00:46:34,410
sometimes is also called the<font color="#CCCCCC"> supplicants</font>

1022
00:46:32,370 --> 00:46:37,259
during the handshake<font color="#E5E5E5"> and we have our</font>

1023
00:46:34,410 --> 00:46:39,359
access point so the beginning is very

1024
00:46:37,260 --> 00:46:42,000
simple<font color="#CCCCCC"> your access point is constantly</font>

1025
00:46:39,360 --> 00:46:45,090
transmitting a beacons<font color="#E5E5E5"> those beacons</font>

1026
00:46:42,000 --> 00:46:47,430
contains the<font color="#E5E5E5"> futures features of the</font>

1027
00:46:45,090 --> 00:46:51,300
access point for example whether<font color="#E5E5E5"> it</font>

1028
00:46:47,430 --> 00:46:54,509
<font color="#E5E5E5">sports a</font><font color="#CCCCCC"> internal</font><font color="#E5E5E5"> 802 11 or whether it</font>

1029
00:46:51,300 --> 00:46:56,960
supports AAC and<font color="#E5E5E5"> it also includes the</font>

1030
00:46:54,510 --> 00:46:58,460
supported<font color="#CCCCCC"> cyprus of the network</font>

1031
00:46:56,960 --> 00:47:02,810
<font color="#E5E5E5">and practice this basically means</font>

1032
00:46:58,460 --> 00:47:05,839
whether<font color="#E5E5E5"> it supports wpa</font><font color="#CCCCCC"> t keep or a SSC</font>

1033
00:47:02,810 --> 00:47:08,839
<font color="#CCCCCC">cmp</font><font color="#E5E5E5"> and the client will select</font><font color="#CCCCCC"> the a</font>

1034
00:47:05,839 --> 00:47:11,720
dirty<font color="#E5E5E5"> cop or a yes</font><font color="#CCCCCC"> owner will</font><font color="#E5E5E5"> send an</font>

1035
00:47:08,839 --> 00:47:13,820
<font color="#E5E5E5">association request to the network on</font>

1036
00:47:11,720 --> 00:47:16,459
this<font color="#CCCCCC"> packet here basically tells the</font>

1037
00:47:13,820 --> 00:47:20,089
network<font color="#CCCCCC"> i want to join</font><font color="#E5E5E5"> this is the</font>

1038
00:47:16,460 --> 00:47:22,400
<font color="#CCCCCC">cipher I want to use reply to that</font><font color="#E5E5E5"> the</font>

1039
00:47:20,089 --> 00:47:24,410
access<font color="#E5E5E5"> points generator generates around</font>

1040
00:47:22,400 --> 00:47:27,560
the months<font color="#E5E5E5"> the client will also generate</font>

1041
00:47:24,410 --> 00:47:30,259
a random<font color="#E5E5E5"> loans so these random nonsense</font>

1042
00:47:27,560 --> 00:47:31,759
are used to prevent<font color="#E5E5E5"> replay attacks</font><font color="#CCCCCC"> and</font>

1043
00:47:30,260 --> 00:47:35,210
<font color="#CCCCCC">they are</font><font color="#E5E5E5"> used to</font><font color="#CCCCCC"> assure that fresh</font>

1044
00:47:31,760 --> 00:47:37,250
<font color="#E5E5E5">session</font><font color="#CCCCCC"> Keys are negotiated so here we</font>

1045
00:47:35,210 --> 00:47:40,099
have the access point on surveillance

1046
00:47:37,250 --> 00:47:42,140
and we have the<font color="#CCCCCC"> Select</font><font color="#E5E5E5"> countenance</font><font color="#CCCCCC"> also</font>

1047
00:47:40,099 --> 00:47:44,330
the client<font color="#E5E5E5"> note so it's the same as the</font>

1048
00:47:42,140 --> 00:47:46,670
<font color="#CCCCCC">clients which is of the essence</font>

1049
00:47:44,330 --> 00:47:48,770
once they both have received this<font color="#CCCCCC"> is</font>

1050
00:47:46,670 --> 00:47:52,099
nonsense<font color="#E5E5E5"> they can receive</font><font color="#CCCCCC"> that they can</font>

1051
00:47:48,770 --> 00:47:54,259
derive the<font color="#E5E5E5"> second case</font><font color="#CCCCCC"> on after this</font>

1052
00:47:52,099 --> 00:47:56,180
first stage of the handshake

1053
00:47:54,260 --> 00:47:59,060
we are essentially going to confirm that

1054
00:47:56,180 --> 00:48:02,089
everything was<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> that there was no</font>

1055
00:47:59,060 --> 00:48:05,000
attacker<font color="#CCCCCC"> aren't</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> the access point is</font>

1056
00:48:02,089 --> 00:48:07,190
going to send the group<font color="#CCCCCC"> key</font><font color="#E5E5E5"> the group</font>

1057
00:48:05,000 --> 00:48:10,339
temporal key<font color="#CCCCCC"> and message</font><font color="#E5E5E5"> tree of the</font>

1058
00:48:07,190 --> 00:48:13,490
handshake<font color="#E5E5E5"> of the message</font><font color="#CCCCCC"> three and also</font>

1059
00:48:10,339 --> 00:48:15,140
includes<font color="#E5E5E5"> an authenticated</font><font color="#CCCCCC"> cipher list</font><font color="#E5E5E5"> of</font>

1060
00:48:13,490 --> 00:48:17,839
<font color="#E5E5E5">the ciphers that the access points</font>

1061
00:48:15,140 --> 00:48:18,589
supports<font color="#CCCCCC"> so this is to prevent</font><font color="#E5E5E5"> downgrade</font>

1062
00:48:17,839 --> 00:48:19,520
attacks

1063
00:48:18,589 --> 00:48:21,349
let's say that we have a

1064
00:48:19,520 --> 00:48:24,410
man-in-the-middle attack<font color="#CCCCCC"> er</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> air</font>

1065
00:48:21,349 --> 00:48:27,589
says<font color="#CCCCCC"> okay I only support the</font><font color="#E5E5E5"> old</font><font color="#CCCCCC"> teacups</font>

1066
00:48:24,410 --> 00:48:28,700
<font color="#CCCCCC">cipher then the client way to connect</font>

1067
00:48:27,589 --> 00:48:31,099
using<font color="#CCCCCC"> teacup</font>

1068
00:48:28,700 --> 00:48:33,919
however<font color="#E5E5E5"> at</font><font color="#CCCCCC"> that's this stage</font><font color="#E5E5E5"> the real</font>

1069
00:48:31,099 --> 00:48:35,930
<font color="#CCCCCC">access</font><font color="#E5E5E5"> points which</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> sent message tree</font>

1070
00:48:33,920 --> 00:48:38,780
with it which includes the<font color="#E5E5E5"> real</font><font color="#CCCCCC"> cipher</font>

1071
00:48:35,930 --> 00:48:40,490
list which is authenticated using the

1072
00:48:38,780 --> 00:48:43,460
password of the network essentially

1073
00:48:40,490 --> 00:48:46,368
meaning an attacker cannot modify this

1074
00:48:43,460 --> 00:48:48,589
packet of the client would notice after

1075
00:48:46,369 --> 00:48:50,780
<font color="#E5E5E5">receiving message</font><font color="#CCCCCC"> tree if there was a</font>

1076
00:48:48,589 --> 00:48:53,060
possible downgrade attack because<font color="#CCCCCC"> at</font>

1077
00:48:50,780 --> 00:48:53,690
<font color="#CCCCCC">this authenticated cipher</font><font color="#E5E5E5"> list might not</font>

1078
00:48:53,060 --> 00:48:55,250
match it

1079
00:48:53,690 --> 00:48:59,300
the ones that was received in

1080
00:48:55,250 --> 00:49:01,849
unprotected<font color="#E5E5E5"> beacons so the problem with</font>

1081
00:48:59,300 --> 00:49:05,839
this design is that the group key here

1082
00:49:01,849 --> 00:49:08,540
is transmitted and encrypted before the

1083
00:49:05,839 --> 00:49:09,170
clients can prevent or detect<font color="#CCCCCC"> downgrade</font>

1084
00:49:08,540 --> 00:49:12,230
attacks

1085
00:49:09,170 --> 00:49:15,410
<font color="#E5E5E5">so what can an attacker do here</font><font color="#CCCCCC"> an</font>

1086
00:49:12,230 --> 00:49:18,020
attacker can put up a<font color="#E5E5E5"> rope access points</font>

1087
00:49:15,410 --> 00:49:20,839
it can modify the<font color="#E5E5E5"> beacon messages and</font>

1088
00:49:18,020 --> 00:49:23,780
say hey<font color="#E5E5E5"> I only include</font><font color="#CCCCCC"> I only</font><font color="#E5E5E5"> support</font>

1089
00:49:20,839 --> 00:49:27,710
wpa<font color="#E5E5E5"> tkip</font><font color="#CCCCCC"> which means that the</font><font color="#E5E5E5"> clients</font>

1090
00:49:23,780 --> 00:49:31,160
will connect using wpa<font color="#E5E5E5"> TCAP arms in case</font>

1091
00:49:27,710 --> 00:49:32,809
<font color="#E5E5E5">that the session</font><font color="#CCCCCC"> cipher swkt</font><font color="#E5E5E5"> camp then</font>

1092
00:49:31,160 --> 00:49:35,299
this group<font color="#CCCCCC"> carry</font><font color="#E5E5E5"> here when it is</font>

1093
00:49:32,809 --> 00:49:39,680
transmitted to the clients is encrypted

1094
00:49:35,299 --> 00:49:41,660
<font color="#E5E5E5">unprotected using</font><font color="#CCCCCC"> rt4</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> AAS would have</font>

1095
00:49:39,680 --> 00:49:43,129
been used and we also with<font color="#CCCCCC"> usas to</font>

1096
00:49:41,660 --> 00:49:43,848
protect<font color="#CCCCCC"> a groupie and everything</font><font color="#E5E5E5"> would</font>

1097
00:49:43,130 --> 00:49:47,780
be fine

1098
00:49:43,849 --> 00:49:50,480
however in this case we are using<font color="#CCCCCC"> rc4 if</font>

1099
00:49:47,780 --> 00:49:55,400
we can<font color="#E5E5E5"> if you are performing this attack</font>

1100
00:49:50,480 --> 00:49:59,240
on<font color="#E5E5E5"> our c4 is of course quite bad</font>

1101
00:49:55,400 --> 00:50:01,670
so for the<font color="#CCCCCC"> crypt</font><font color="#E5E5E5"> of people around here</font>

1102
00:49:59,240 --> 00:50:03,379
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> very quickly going to explain how</font>

1103
00:50:01,670 --> 00:50:05,390
<font color="#CCCCCC">our c4 is used</font><font color="#E5E5E5"> to basically have a</font>

1104
00:50:03,380 --> 00:50:08,240
<font color="#E5E5E5">16-byte initialization vector which is</font>

1105
00:50:05,390 --> 00:50:10,759
public<font color="#CCCCCC"> you have a 16-byte secret key on</font>

1106
00:50:08,240 --> 00:50:13,609
the first 250<font color="#E5E5E5"> keystream bites are</font>

1107
00:50:10,760 --> 00:50:15,740
dropped<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is actually a very strange</font>

1108
00:50:13,609 --> 00:50:19,279
construction if you're a bit used to<font color="#CCCCCC"> RC</font>

1109
00:50:15,740 --> 00:50:21,740
<font color="#CCCCCC">4 i'm simply going</font><font color="#E5E5E5"> to intuitively</font>

1110
00:50:19,280 --> 00:50:24,859
<font color="#CCCCCC">explain the</font><font color="#E5E5E5"> problem with</font><font color="#CCCCCC"> our c4 in this</font>

1111
00:50:21,740 --> 00:50:28,790
case and also the problem with<font color="#CCCCCC"> our c4</font><font color="#E5E5E5"> in</font>

1112
00:50:24,859 --> 00:50:31,759
general<font color="#E5E5E5"> here you see a graph which kind</font>

1113
00:50:28,790 --> 00:50:35,630
of illustrates the<font color="#E5E5E5"> behavior of our</font><font color="#CCCCCC"> c4</font><font color="#E5E5E5"> in</font>

1114
00:50:31,760 --> 00:50:37,579
this case<font color="#E5E5E5"> so normally if you would make</font>

1115
00:50:35,630 --> 00:50:40,730
these kinds of graphs for a secure

1116
00:50:37,579 --> 00:50:42,319
cipher for example for<font color="#CCCCCC"> AAS</font><font color="#E5E5E5"> this would be</font>

1117
00:50:40,730 --> 00:50:46,250
completely white

1118
00:50:42,319 --> 00:50:48,319
<font color="#E5E5E5">so what does this graph illustrates well</font>

1119
00:50:46,250 --> 00:50:52,520
<font color="#E5E5E5">say for example here you are at</font>

1120
00:50:48,319 --> 00:50:55,308
<font color="#E5E5E5">keystream position</font><font color="#CCCCCC"> say 300</font><font color="#E5E5E5"> if we then go</font>

1121
00:50:52,520 --> 00:50:58,040
look at<font color="#CCCCCC"> keystream value let's say around</font>

1122
00:50:55,309 --> 00:50:58,790
<font color="#E5E5E5">90</font><font color="#CCCCCC"> we can see</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> there's a blue dot</font>

1123
00:50:58,040 --> 00:51:01,940
here

1124
00:50:58,790 --> 00:51:05,990
what is that<font color="#E5E5E5"> that mean that means that</font>

1125
00:51:01,940 --> 00:51:08,990
the<font color="#E5E5E5"> keystream bite at position 300 is</font>

1126
00:51:05,990 --> 00:51:12,169
slightly less likely than uniform to

1127
00:51:08,990 --> 00:51:14,419
contain the value<font color="#CCCCCC"> 90</font><font color="#E5E5E5"> normally</font><font color="#CCCCCC"> this</font>

1128
00:51:12,170 --> 00:51:15,670
<font color="#E5E5E5">should be uniformly random normally if</font>

1129
00:51:14,420 --> 00:51:19,690
you have a proper

1130
00:51:15,670 --> 00:51:23,559
a<font color="#E5E5E5"> cipher every</font><font color="#CCCCCC"> key stream bite should</font>

1131
00:51:19,690 --> 00:51:25,839
occur as often as all the others<font color="#E5E5E5"> however</font>

1132
00:51:23,559 --> 00:51:27,970
<font color="#E5E5E5">you can see here and the colors that is</font>

1133
00:51:25,839 --> 00:51:31,029
blue<font color="#CCCCCC"> keystream bites at certain values</font>

1134
00:51:27,970 --> 00:51:34,959
occur less often<font color="#E5E5E5"> of these red ones occur</font>

1135
00:51:31,030 --> 00:51:36,609
more often than others<font color="#E5E5E5"> of this graph</font>

1136
00:51:34,960 --> 00:51:39,490
depends on the specific<font color="#CCCCCC"> allocation</font>

1137
00:51:36,609 --> 00:51:41,650
<font color="#CCCCCC">factor that is being used</font><font color="#E5E5E5"> so the only</font>

1138
00:51:39,490 --> 00:51:44,799
thing<font color="#CCCCCC"> i would take</font><font color="#E5E5E5"> away from this slide</font>

1139
00:51:41,650 --> 00:51:47,410
is that if you use<font color="#CCCCCC"> rc4</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> key string</font>

1140
00:51:44,799 --> 00:51:51,099
<font color="#E5E5E5">values occur more often than others of</font>

1141
00:51:47,410 --> 00:51:53,230
<font color="#E5E5E5">we can abuse that an attack</font><font color="#CCCCCC"> so if</font><font color="#E5E5E5"> we're</font>

1142
00:51:51,099 --> 00:51:57,369
to perform similar attacks against<font color="#E5E5E5"> the</font>

1143
00:51:53,230 --> 00:52:01,119
ones that<font color="#CCCCCC"> we're executed against SL on</font>

1144
00:51:57,369 --> 00:52:02,559
HTTPS and<font color="#CCCCCC"> a few recent years then we can</font>

1145
00:52:01,119 --> 00:52:04,450
see it's still a theoretical attack

1146
00:52:02,559 --> 00:52:07,780
because it would take around 50 years to

1147
00:52:04,450 --> 00:52:09,189
execute<font color="#E5E5E5"> and the reason is because we</font>

1148
00:52:07,780 --> 00:52:11,410
need to collect a lot of encrypted

1149
00:52:09,190 --> 00:52:13,990
traffic to perform<font color="#E5E5E5"> our crypt analysis</font>

1150
00:52:11,410 --> 00:52:17,500
<font color="#CCCCCC">and in the case of Wi-Fi this is very</font>

1151
00:52:13,990 --> 00:52:18,848
<font color="#CCCCCC">time-consuming to do however</font><font color="#E5E5E5"> attacks</font>

1152
00:52:17,500 --> 00:52:21,760
only get better

1153
00:52:18,849 --> 00:52:23,650
in<font color="#E5E5E5"> fact a few weeks ago I found a trick</font>

1154
00:52:21,760 --> 00:52:25,960
to execute these handshakes more

1155
00:52:23,650 --> 00:52:30,339
frequently<font color="#E5E5E5"> meaning at this time would be</font>

1156
00:52:25,960 --> 00:52:32,470
<font color="#E5E5E5">I think</font><font color="#CCCCCC"> these / 2 or 3 so let's</font><font color="#E5E5E5"> say that</font>

1157
00:52:30,339 --> 00:52:34,960
someone<font color="#E5E5E5"> would put more time in this</font><font color="#CCCCCC"> we</font>

1158
00:52:32,470 --> 00:52:38,020
could probably lower this value<font color="#E5E5E5"> more and</font>

1159
00:52:34,960 --> 00:52:41,349
more every year<font color="#E5E5E5"> so the takeaway messages</font>

1160
00:52:38,020 --> 00:52:44,470
from a cryptographic standpoint<font color="#CCCCCC"> rc4 is</font>

1161
00:52:41,349 --> 00:52:47,829
broken<font color="#E5E5E5"> and you simply not use it anymore</font>

1162
00:52:44,470 --> 00:52:51,250
<font color="#E5E5E5">so the countermeasure is if you have a</font>

1163
00:52:47,829 --> 00:52:54,250
network at home<font color="#E5E5E5"> simply disable wpa2 tkip</font>

1164
00:52:51,250 --> 00:52:56,740
<font color="#CCCCCC">so if you have a not work network</font><font color="#E5E5E5"> not</font>

1165
00:52:54,250 --> 00:52:59,290
only should you select that has to do

1166
00:52:56,740 --> 00:53:03,848
with wpa2<font color="#E5E5E5"> you have to explicitly</font>

1167
00:52:59,290 --> 00:53:06,730
<font color="#E5E5E5">configure it to only use a</font><font color="#CCCCCC"> s on</font><font color="#E5E5E5"> that</font>

1168
00:53:03,849 --> 00:53:11,020
case you are safe against this specific

1169
00:53:06,730 --> 00:53:14,260
attack<font color="#E5E5E5"> so finally the last part of the</font>

1170
00:53:11,020 --> 00:53:16,900
presentation is just a very sort<font color="#CCCCCC"> short</font>

1171
00:53:14,260 --> 00:53:20,859
<font color="#CCCCCC">suggestion</font><font color="#E5E5E5"> on that how we can we improve</font>

1172
00:53:16,900 --> 00:53:22,240
the random number generator and we want

1173
00:53:20,859 --> 00:53:25,328
to make sure that the improvement that

1174
00:53:22,240 --> 00:53:28,220
we suggest even works on the<font color="#E5E5E5"> bed systems</font>

1175
00:53:25,329 --> 00:53:30,980
where is no<font color="#CCCCCC"> Colonel available</font>

1176
00:53:28,220 --> 00:53:32,450
<font color="#E5E5E5">on</font><font color="#CCCCCC"> the weather is very little chance of</font>

1177
00:53:30,980 --> 00:53:35,210
collecting randomness

1178
00:53:32,450 --> 00:53:38,060
well our observation is essentially well

1179
00:53:35,210 --> 00:53:40,790
okay we have a Wi-Fi chip on<font color="#E5E5E5"> this Wi-Fi</font>

1180
00:53:38,060 --> 00:53:42,740
chip can monitor all the Wi-Fi signals

1181
00:53:40,790 --> 00:53:45,140
around<font color="#CCCCCC"> so why not simply extract</font>

1182
00:53:42,740 --> 00:53:47,899
randomness<font color="#E5E5E5"> from all the Wi-Fi frames</font>

1183
00:53:45,140 --> 00:53:49,759
that we receive<font color="#E5E5E5"> in other words why not</font>

1184
00:53:47,900 --> 00:53:54,080
collect randomness<font color="#E5E5E5"> from from</font><font color="#CCCCCC"> wreck</font>

1185
00:53:49,760 --> 00:53:57,770
<font color="#CCCCCC">around</font><font color="#E5E5E5"> noise and we actually found one</font>

1186
00:53:54,080 --> 00:54:01,130
device it is this one this has<font color="#CCCCCC"> so-called</font>

1187
00:53:57,770 --> 00:54:03,890
<font color="#CCCCCC">spectral scan feature</font><font color="#E5E5E5"> and this means</font>

1188
00:54:01,130 --> 00:54:06,890
that this<font color="#CCCCCC"> chip is able to collect a lot</font>

1189
00:54:03,890 --> 00:54:08,540
of samples of the<font color="#E5E5E5"> current</font><font color="#CCCCCC"> Wi-Fi</font>

1190
00:54:06,890 --> 00:54:11,270
background noise<font color="#E5E5E5"> even if there is no</font>

1191
00:54:08,540 --> 00:54:13,400
traffic or nothing is going on<font color="#CCCCCC"> and we</font>

1192
00:54:11,270 --> 00:54:16,250
can generate a very large amount of

1193
00:54:13,400 --> 00:54:19,580
samples every second<font color="#CCCCCC"> the current</font>

1194
00:54:16,250 --> 00:54:24,109
downside is that this is<font color="#E5E5E5"> a bit energy</font>

1195
00:54:19,580 --> 00:54:27,230
<font color="#E5E5E5">this takes a lot of energy so you can't</font>

1196
00:54:24,109 --> 00:54:31,340
run this very long but we did implement

1197
00:54:27,230 --> 00:54:34,640
this idea to extract randomness<font color="#E5E5E5"> from the</font>

1198
00:54:31,340 --> 00:54:37,820
<font color="#CCCCCC">break your nose</font><font color="#E5E5E5"> of the Wi-Fi channel 13</font>

1199
00:54:34,640 --> 00:54:40,640
<font color="#CCCCCC">did a few statistical</font><font color="#E5E5E5"> tests on this on</font>

1200
00:54:37,820 --> 00:54:42,470
our results<font color="#CCCCCC"> where promising a choice</font>

1201
00:54:40,640 --> 00:54:45,529
that we can indeed<font color="#CCCCCC"> the</font><font color="#E5E5E5"> to extract random</font>

1202
00:54:42,470 --> 00:54:47,480
this from background noise<font color="#E5E5E5"> now this is</font>

1203
00:54:45,530 --> 00:54:50,510
just a proposal<font color="#E5E5E5"> as some more research</font>

1204
00:54:47,480 --> 00:54:52,790
here is needed<font color="#E5E5E5"> but</font><font color="#CCCCCC"> i think that</font><font color="#E5E5E5"> Wi-Fi</font>

1205
00:54:50,510 --> 00:54:57,290
<font color="#CCCCCC">vendors that should provide the features</font>

1206
00:54:52,790 --> 00:54:58,820
that common Wi-Fi chips<font color="#CCCCCC"> and export some</font>

1207
00:54:57,290 --> 00:55:00,950
of<font color="#E5E5E5"> the randomness which and then</font>

1208
00:54:58,820 --> 00:55:03,080
directly be used or it can be used by

1209
00:55:00,950 --> 00:55:05,089
the<font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> to strengthen the currents a</font>

1210
00:55:03,080 --> 00:55:09,980
<font color="#E5E5E5">pool of randomness</font>

1211
00:55:05,089 --> 00:55:12,859
so that concludes my talk<font color="#CCCCCC"> there are</font><font color="#E5E5E5"> few</font>

1212
00:55:09,980 --> 00:55:14,750
important lessons to<font color="#E5E5E5"> take away here</font>

1213
00:55:12,859 --> 00:55:17,119
the first is if you have a random number

1214
00:55:14,750 --> 00:55:19,760
generator<font color="#E5E5E5"> always check the quality of</font>

1215
00:55:17,119 --> 00:55:22,250
the output<font color="#CCCCCC"> and especially</font><font color="#E5E5E5"> if you put</font>

1216
00:55:19,760 --> 00:55:25,580
this in the standards<font color="#E5E5E5"> don't put a very</font>

1217
00:55:22,250 --> 00:55:28,670
bad example algorithms which are really

1218
00:55:25,580 --> 00:55:30,619
bad<font color="#E5E5E5"> if you design specification</font><font color="#CCCCCC"> what you</font>

1219
00:55:28,670 --> 00:55:33,140
put<font color="#E5E5E5"> in there should be good on hwood</font>

1220
00:55:30,619 --> 00:55:35,890
work<font color="#E5E5E5"> otherwise just reference an</font>

1221
00:55:33,140 --> 00:55:40,180
external source where<font color="#CCCCCC"> this is explains a</font>

1222
00:55:35,890 --> 00:55:41,950
<font color="#E5E5E5">better on to protect to defend against</font>

1223
00:55:40,180 --> 00:55:44,529
<font color="#E5E5E5">the attack where we decrypt all traffic</font>

1224
00:55:41,950 --> 00:55:47,710
of<font color="#E5E5E5"> a network like</font><font color="#CCCCCC"> i mentioned</font><font color="#E5E5E5"> the access</font>

1225
00:55:44,529 --> 00:55:50,410
point<font color="#E5E5E5"> to ignore any frames that are</font>

1226
00:55:47,710 --> 00:55:54,250
received on broadcast<font color="#CCCCCC"> mac</font><font color="#E5E5E5"> address</font>

1227
00:55:50,410 --> 00:55:56,170
<font color="#CCCCCC">alright which should simply not forward</font>

1228
00:55:54,250 --> 00:55:59,920
<font color="#CCCCCC">unicast</font><font color="#E5E5E5"> frames that are</font><font color="#CCCCCC"> sampling</font>

1229
00:55:56,170 --> 00:56:01,510
broadcast<font color="#CCCCCC"> mac address</font><font color="#E5E5E5"> finally regarding</font>

1230
00:55:59,920 --> 00:56:03,250
<font color="#E5E5E5">the protocol that is used in the</font>

1231
00:56:01,510 --> 00:56:06,099
handshake<font color="#CCCCCC"> you should try to avoid</font>

1232
00:56:03,250 --> 00:56:10,779
sending sensitive data before trying to

1233
00:56:06,099 --> 00:56:12,700
protect down rates attacks<font color="#E5E5E5"> so that</font>

1234
00:56:10,779 --> 00:56:15,940
<font color="#E5E5E5">concludes my presentation</font><font color="#CCCCCC"> if there are</font>

1235
00:56:12,700 --> 00:56:29,180
any questions feel free to ask

1236
00:56:15,940 --> 00:56:32,059
[Applause]

1237
00:56:29,180 --> 00:56:34,430
<font color="#CCCCCC">Thank You Marty we have a few minutes</font>

1238
00:56:32,059 --> 00:56:36,440
left for questions<font color="#CCCCCC"> so</font><font color="#E5E5E5"> if you have any</font>

1239
00:56:34,430 --> 00:56:39,740
questions please line up next to the

1240
00:56:36,440 --> 00:56:42,829
microphones and ask your questions make

1241
00:56:39,740 --> 00:56:44,540
good use of our time if<font color="#CCCCCC"> the we have</font><font color="#E5E5E5"> our</font>

1242
00:56:42,829 --> 00:56:46,730
<font color="#CCCCCC">requests</font><font color="#E5E5E5"> from the internet yes please</font>

1243
00:56:44,540 --> 00:56:51,380
<font color="#E5E5E5">yes</font><font color="#CCCCCC"> to question from the internet the</font>

1244
00:56:46,730 --> 00:56:57,530
first one<font color="#CCCCCC"> what you</font><font color="#E5E5E5"> consider a</font><font color="#CCCCCC"> wpa2</font><font color="#E5E5E5"> with</font>

1245
00:56:51,380 --> 00:57:00,140
<font color="#E5E5E5">appreciate here still safe if the</font>

1246
00:56:57,530 --> 00:57:03,170
<font color="#E5E5E5">pre-shared key is good</font><font color="#CCCCCC"> on unpredictable</font>

1247
00:57:00,140 --> 00:57:05,629
<font color="#E5E5E5">and then this type of dictionary attacks</font>

1248
00:57:03,170 --> 00:57:07,910
they are no longer possible<font color="#CCCCCC"> however you</font>

1249
00:57:05,630 --> 00:57:09,890
still have the issue of the group key<font color="#CCCCCC"> on</font>

1250
00:57:07,910 --> 00:57:12,290
<font color="#CCCCCC">the</font><font color="#E5E5E5"> in fact is</font><font color="#CCCCCC"> groupie which is badly</font>

1251
00:57:09,890 --> 00:57:15,200
generated<font color="#E5E5E5"> this applies to both</font>

1252
00:57:12,290 --> 00:57:17,180
enterprise networks<font color="#CCCCCC"> on networks that use</font>

1253
00:57:15,200 --> 00:57:22,339
a pre-shared key

1254
00:57:17,180 --> 00:57:24,618
currently<font color="#CCCCCC"> I believe that the handshake</font>

1255
00:57:22,339 --> 00:57:27,920
that is<font color="#E5E5E5"> using Wi-Fi can be improved so</font>

1256
00:57:24,619 --> 00:57:30,619
if you use a pre-shared key<font color="#CCCCCC"> i don't</font>

1257
00:57:27,920 --> 00:57:32,329
consider<font color="#E5E5E5"> it as strong as an enterprise</font>

1258
00:57:30,619 --> 00:57:34,430
network where you have proper

1259
00:57:32,329 --> 00:57:37,099
credentials<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> site on an</font>

1260
00:57:34,430 --> 00:57:40,430
enterprise network is more secure<font color="#E5E5E5"> in</font>

1261
00:57:37,099 --> 00:57:43,130
most<font color="#E5E5E5"> cases</font><font color="#CCCCCC"> however</font><font color="#E5E5E5"> as a general user if</font>

1262
00:57:40,430 --> 00:57:44,180
you have a complex<font color="#E5E5E5"> appreciate key then</font>

1263
00:57:43,130 --> 00:57:49,339
you're still good

1264
00:57:44,180 --> 00:57:51,319
<font color="#CCCCCC">ok question from</font><font color="#E5E5E5"> you and for the</font><font color="#CCCCCC"> Arts</font>

1265
00:57:49,339 --> 00:57:53,569
<font color="#CCCCCC">the thing</font><font color="#E5E5E5"> did you</font><font color="#CCCCCC"> considered refuse our</font>

1266
00:57:51,319 --> 00:57:55,250
offer on the<font color="#CCCCCC"> networks</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> you</font>

1267
00:57:53,569 --> 00:58:00,529
already have access to the broadcast so

1268
00:57:55,250 --> 00:58:03,799
<font color="#CCCCCC">what</font><font color="#E5E5E5"> I think that's what we used to</font>

1269
00:58:00,530 --> 00:58:06,859
poison the entries<font color="#CCCCCC"> or</font><font color="#E5E5E5"> the clients so we</font>

1270
00:58:03,799 --> 00:58:08,750
send a broadcast our<font color="#CCCCCC"> packet</font><font color="#E5E5E5"> to poison</font>

1271
00:58:06,859 --> 00:58:10,819
the clients<font color="#E5E5E5"> on the router if that</font>

1272
00:58:08,750 --> 00:58:12,920
explains your question<font color="#E5E5E5"> yeah but can you</font>

1273
00:58:10,819 --> 00:58:16,520
can exploit other clans in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> network's</font>

1274
00:58:12,920 --> 00:58:18,799
you send<font color="#CCCCCC"> and graduates art</font><font color="#E5E5E5"> so you</font>

1275
00:58:16,520 --> 00:58:22,520
basically<font color="#CCCCCC"> broadcaster of</font><font color="#E5E5E5"> injury to</font>

1276
00:58:18,799 --> 00:58:24,770
anybody<font color="#CCCCCC"> under network</font><font color="#E5E5E5"> just not one</font>

1277
00:58:22,520 --> 00:58:27,559
single client<font color="#E5E5E5"> will</font><font color="#CCCCCC"> call</font><font color="#E5E5E5"> you can send it</font>

1278
00:58:24,770 --> 00:58:29,420
to any client you want you can say<font color="#CCCCCC"> i</font>

1279
00:58:27,559 --> 00:58:31,490
want to inject<font color="#E5E5E5"> traffic of this</font><font color="#CCCCCC"> client or</font>

1280
00:58:29,420 --> 00:58:34,220
you can maybe try to send it to all

1281
00:58:31,490 --> 00:58:34,700
clients<font color="#CCCCCC"> I haven't looked at that much in</font>

1282
00:58:34,220 --> 00:58:36,348
detail

1283
00:58:34,700 --> 00:58:38,419
<font color="#CCCCCC">I just that if you want to attack one</font>

1284
00:58:36,349 --> 00:58:39,710
<font color="#CCCCCC">clients that works you</font><font color="#E5E5E5"> want to take</font>

1285
00:58:38,420 --> 00:58:40,430
<font color="#E5E5E5">another client you can just do the same</font>

1286
00:58:39,710 --> 00:58:45,350
attack

1287
00:58:40,430 --> 00:58:49,129
<font color="#CCCCCC">thanks yes a few for we guarding</font><font color="#E5E5E5"> your</font>

1288
00:58:45,350 --> 00:58:51,440
<font color="#E5E5E5">problem i have every access point since</font>

1289
00:58:49,130 --> 00:58:53,600
the broadcast<font color="#CCCCCC"> packets</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> this unique</font>

1290
00:58:51,440 --> 00:58:56,240
<font color="#E5E5E5">aspect medicine is</font><font color="#CCCCCC"> it they're</font><font color="#E5E5E5"> demanding</font>

1291
00:58:53,600 --> 00:58:58,940
<font color="#CCCCCC">standard</font><font color="#E5E5E5"> to do it this way or have</font><font color="#CCCCCC"> to</font>

1292
00:58:56,240 --> 00:59:04,609
<font color="#CCCCCC">check to</font><font color="#E5E5E5"> all implementation do it this</font>

1293
00:58:58,940 --> 00:59:07,130
way or<font color="#CCCCCC"> only son</font><font color="#E5E5E5"> that's a good question i</font>

1294
00:59:04,610 --> 00:59:10,760
don't know exactly what the standard

1295
00:59:07,130 --> 00:59:13,130
says<font color="#E5E5E5"> what</font><font color="#CCCCCC"> I do know is that not even all</font>

1296
00:59:10,760 --> 00:59:16,400
implementations implement this whole

1297
00:59:13,130 --> 00:59:18,680
<font color="#E5E5E5">wonder 296 attack</font><font color="#CCCCCC"> so there you can even</font>

1298
00:59:16,400 --> 00:59:20,480
directly<font color="#CCCCCC"> sent frames to</font><font color="#E5E5E5"> the client</font>

1299
00:59:18,680 --> 00:59:23,390
without needing to abuse the access

1300
00:59:20,480 --> 00:59:25,220
point so<font color="#CCCCCC"> I don't think that this idea of</font>

1301
00:59:23,390 --> 00:59:27,170
forwarding packets is explicitly

1302
00:59:25,220 --> 00:59:30,620
mentioned in the<font color="#E5E5E5"> standard</font><font color="#CCCCCC"> I think they</font>

1303
00:59:27,170 --> 00:59:32,450
just haven't thought about that but<font color="#CCCCCC"> i</font>

1304
00:59:30,620 --> 00:59:34,790
<font color="#E5E5E5">would guess that most implementations</font>

1305
00:59:32,450 --> 00:59:37,609
would be vulnerable to this forwarding

1306
00:59:34,790 --> 00:59:39,860
trick<font color="#CCCCCC"> to the access</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> I</font>

1307
00:59:37,610 --> 00:59:42,080
would<font color="#E5E5E5"> be surprised if certain vendors</font>

1308
00:59:39,860 --> 00:59:46,490
<font color="#E5E5E5">thought about protecting against that it</font>

1309
00:59:42,080 --> 00:59:51,049
could be but<font color="#CCCCCC"> I think the</font><font color="#E5E5E5"> chances</font><font color="#CCCCCC"> lo ok</font>

1310
00:59:46,490 --> 00:59:53,089
last talked last question sorry<font color="#CCCCCC"> know her</font>

1311
00:59:51,050 --> 00:59:54,950
ok then I think we're done<font color="#CCCCCC"> i go again</font>

1312
00:59:53,090 --> 00:59:55,680
<font color="#E5E5E5">big round of applause for</font><font color="#CCCCCC"> a great</font>

1313
00:59:54,950 --> 00:59:59,020
[Music]

1314
00:59:55,680 --> 01:00:26,058
[Applause]

1315
00:59:59,020 --> 01:00:26,059
[Music]

