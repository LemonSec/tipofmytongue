1
00:00:02,830 --> 00:00:23,698
[Music]

2
00:00:19,130 --> 00:00:26,849
driver development has been dominated by

3
00:00:23,699 --> 00:00:30,599
<font color="#CCCCCC">C for many many years</font><font color="#E5E5E5"> and it</font><font color="#CCCCCC"> sadly still</font>

4
00:00:26,849 --> 00:00:33,630
<font color="#E5E5E5">is C is inherently flawed and there are</font>

5
00:00:30,599 --> 00:00:35,880
better<font color="#CCCCCC"> alternatives but those are</font><font color="#E5E5E5"> always</font>

6
00:00:33,630 --> 00:00:39,870
fighting<font color="#E5E5E5"> against the stigma of being</font>

7
00:00:35,880 --> 00:00:42,210
<font color="#E5E5E5">slow</font><font color="#CCCCCC"> and cumbersome to use so today here</font>

8
00:00:39,870 --> 00:00:45,120
our speakers are<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to tell you that</font>

9
00:00:42,210 --> 00:00:48,600
this is in fact<font color="#CCCCCC"> not</font><font color="#E5E5E5"> true you can</font><font color="#CCCCCC"> write</font>

10
00:00:45,120 --> 00:00:51,410
<font color="#E5E5E5">high level drivers with high level</font>

11
00:00:48,600 --> 00:00:55,079
languages and they perform<font color="#CCCCCC"> very well</font>

12
00:00:51,410 --> 00:00:57,120
<font color="#E5E5E5">here to talk about this are Paul Simon</font>

13
00:00:55,079 --> 00:00:59,149
<font color="#E5E5E5">and Sebastian warm round of applause</font>

14
00:00:57,120 --> 00:00:59,149
please

15
00:01:04,709 --> 00:01:09,940
thank you<font color="#CCCCCC"> yeah</font>

16
00:01:07,180 --> 00:01:12,490
<font color="#CCCCCC">and Paul with me</font><font color="#E5E5E5"> uh salmon and Sebastian</font>

17
00:01:09,940 --> 00:01:15,220
<font color="#CCCCCC">and just a</font><font color="#E5E5E5"> few quick</font><font color="#CCCCCC"> notes before</font><font color="#E5E5E5"> we get</font>

18
00:01:12,490 --> 00:01:17,199
started<font color="#CCCCCC"> I speak quite</font><font color="#E5E5E5"> fast</font><font color="#CCCCCC"> usually so</font>

19
00:01:15,220 --> 00:01:19,090
sorry to the translators and sorry to

20
00:01:17,200 --> 00:01:21,880
<font color="#E5E5E5">everyone</font><font color="#CCCCCC"> listening</font><font color="#E5E5E5"> if you are watching</font>

21
00:01:19,090 --> 00:01:24,490
us on a stream recording on<font color="#E5E5E5"> meteor</font><font color="#CCCCCC"> TV CD</font>

22
00:01:21,880 --> 00:01:26,770
<font color="#CCCCCC">Ilya is a button</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> your right where you</font>

23
00:01:24,490 --> 00:01:29,560
can reduce the playback<font color="#E5E5E5"> speed</font><font color="#CCCCCC"> if you are</font>

24
00:01:26,770 --> 00:01:31,240
<font color="#E5E5E5">watching on YouTube you can also reduce</font>

25
00:01:29,560 --> 00:01:34,410
the<font color="#E5E5E5"> playback</font><font color="#CCCCCC"> speed somewhere</font><font color="#E5E5E5"> also please</font>

26
00:01:31,240 --> 00:01:34,410
like and subscribe on YouTube

27
00:01:40,140 --> 00:01:44,410
you might have<font color="#E5E5E5"> already seen</font><font color="#CCCCCC"> that they</font>

28
00:01:42,910 --> 00:01:46,390
have quite<font color="#E5E5E5"> a lot of names up on these</font>

29
00:01:44,410 --> 00:01:48,250
<font color="#E5E5E5">slides today and these</font><font color="#CCCCCC"> are all</font><font color="#E5E5E5"> the</font>

30
00:01:46,390 --> 00:01:51,880
<font color="#CCCCCC">people who somehow contributed to this</font>

31
00:01:48,250 --> 00:01:52,920
talk<font color="#E5E5E5"> and these are all my students with</font>

32
00:01:51,880 --> 00:01:55,810
me<font color="#E5E5E5"> today</font>

33
00:01:52,920 --> 00:01:58,090
<font color="#CCCCCC">Shimon and Sebastian who boasted Jesus</font>

34
00:01:55,810 --> 00:01:59,590
was me<font color="#CCCCCC"> I'm a PhD student at Technical</font>

35
00:01:58,090 --> 00:02:01,360
University of Munich<font color="#E5E5E5"> and I'm researching</font>

36
00:01:59,590 --> 00:02:04,869
<font color="#E5E5E5">performance of software packet</font>

37
00:02:01,360 --> 00:02:06,490
processing system<font color="#CCCCCC"> and today we are going</font>

38
00:02:04,869 --> 00:02:08,800
specifically<font color="#E5E5E5"> to talk about network</font>

39
00:02:06,490 --> 00:02:11,410
drivers well why look<font color="#CCCCCC"> at Network drivers</font>

40
00:02:08,800 --> 00:02:13,900
as a case study<font color="#E5E5E5"> well it's obviously our</font>

41
00:02:11,410 --> 00:02:16,270
research area so it's the next best

42
00:02:13,900 --> 00:02:18,100
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> to do and</font><font color="#E5E5E5"> also user space network</font>

43
00:02:16,270 --> 00:02:19,510
drivers are all directional and user

44
00:02:18,100 --> 00:02:21,340
space drivers as<font color="#CCCCCC"> fare you can</font><font color="#E5E5E5"> use all</font>

45
00:02:19,510 --> 00:02:23,590
the fancy languages<font color="#CCCCCC"> I have already</font>

46
00:02:21,340 --> 00:02:26,050
talked<font color="#CCCCCC"> about user space network</font><font color="#E5E5E5"> drivers</font>

47
00:02:23,590 --> 00:02:28,000
here last year<font color="#CCCCCC"> so a quick</font><font color="#E5E5E5"> recap of what</font>

48
00:02:26,050 --> 00:02:30,580
I<font color="#E5E5E5"> presented here last year is the boss</font>

49
00:02:28,000 --> 00:02:33,160
the<font color="#E5E5E5"> exe project and the</font><font color="#CCCCCC"> exceed project</font>

50
00:02:30,580 --> 00:02:35,739
is a I think<font color="#CCCCCC"> I started</font><font color="#E5E5E5"> where I wanted to</font>

51
00:02:33,160 --> 00:02:37,959
show off how you can write a user space

52
00:02:35,739 --> 00:02:40,209
<font color="#E5E5E5">driver that is actually readable and</font>

53
00:02:37,959 --> 00:02:42,220
understandable<font color="#E5E5E5"> and fast at the same time</font>

54
00:02:40,209 --> 00:02:44,080
so the goal is is to<font color="#E5E5E5"> be used for</font>

55
00:02:42,220 --> 00:02:46,150
educational<font color="#CCCCCC"> purposes</font><font color="#E5E5E5"> it's around a</font>

56
00:02:44,080 --> 00:02:48,580
thousand lines of C code as full of

57
00:02:46,150 --> 00:02:51,549
references<font color="#E5E5E5"> to datasheet specs and so on</font>

58
00:02:48,580 --> 00:02:53,200
and well if you want to know more<font color="#CCCCCC"> about</font>

59
00:02:51,549 --> 00:02:55,239
that<font color="#CCCCCC"> for my talk last year</font>

60
00:02:53,200 --> 00:02:57,730
<font color="#E5E5E5">just a quick</font><font color="#CCCCCC"> diff since then we've added</font>

61
00:02:55,239 --> 00:02:59,110
<font color="#E5E5E5">support for</font><font color="#CCCCCC"> our bionics and fees now</font>

62
00:02:57,730 --> 00:03:00,790
<font color="#E5E5E5">I've a go and set up</font><font color="#CCCCCC"> so you no longer</font>

63
00:02:59,110 --> 00:03:04,030
<font color="#E5E5E5">need</font><font color="#CCCCCC"> it we'll have to play around</font><font color="#E5E5E5"> with</font>

64
00:03:00,790 --> 00:03:06,670
<font color="#E5E5E5">that you can check it out on github</font><font color="#CCCCCC"> yeah</font>

65
00:03:04,030 --> 00:03:08,940
then<font color="#E5E5E5"> I float it in see back then well</font>

66
00:03:06,670 --> 00:03:11,380
why would you write<font color="#E5E5E5"> a drive and see</font>

67
00:03:08,940 --> 00:03:13,209
<font color="#CCCCCC">seems like a</font><font color="#E5E5E5"> kind of obvious question</font>

68
00:03:11,380 --> 00:03:14,910
why wouldn't you because most drivers

69
00:03:13,209 --> 00:03:17,709
are written in C and<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you're</font><font color="#CCCCCC"> going for</font>

70
00:03:14,910 --> 00:03:19,690
educational use of the driver then might

71
00:03:17,709 --> 00:03:21,370
<font color="#CCCCCC">as well use the language that all the</font>

72
00:03:19,690 --> 00:03:23,079
other<font color="#CCCCCC"> drivers</font><font color="#E5E5E5"> are in it's also the</font>

73
00:03:21,370 --> 00:03:25,030
lowest<font color="#CCCCCC"> common denominator of</font><font color="#E5E5E5"> all the</font>

74
00:03:23,079 --> 00:03:27,670
systems programming languages meaning

75
00:03:25,030 --> 00:03:29,380
<font color="#E5E5E5">everyone should be able to eat</font><font color="#CCCCCC"> C and I</font>

76
00:03:27,670 --> 00:03:32,250
also think the C code can be<font color="#E5E5E5"> quite</font>

77
00:03:29,380 --> 00:03:32,250
<font color="#CCCCCC">beautiful in some cases</font>

78
00:03:33,170 --> 00:03:39,859
<font color="#CCCCCC">I can we can we get a</font><font color="#E5E5E5"> quick show of</font>

79
00:03:37,730 --> 00:03:43,488
hands<font color="#E5E5E5"> who here thinks they can reach</font><font color="#CCCCCC"> C</font>

80
00:03:39,860 --> 00:03:45,290
<font color="#CCCCCC">code so this</font><font color="#E5E5E5"> is way more</font><font color="#CCCCCC"> than expected</font>

81
00:03:43,489 --> 00:03:47,090
<font color="#CCCCCC">it was like basically</font><font color="#E5E5E5"> everyone raising</font>

82
00:03:45,290 --> 00:03:51,319
their<font color="#E5E5E5"> hands so let's</font><font color="#CCCCCC"> have a look at some</font>

83
00:03:47,090 --> 00:03:53,540
C code<font color="#E5E5E5"> this is something this</font><font color="#CCCCCC"> is some</font>

84
00:03:51,319 --> 00:03:56,119
actual code from our driver the<font color="#E5E5E5"> first</font>

85
00:03:53,540 --> 00:03:57,769
edit by a student and when I<font color="#CCCCCC"> initially</font>

86
00:03:56,120 --> 00:03:59,810
got<font color="#E5E5E5"> the pull request for this from my</font>

87
00:03:57,770 --> 00:04:01,670
<font color="#E5E5E5">students I was like</font><font color="#CCCCCC"> no we can't at this</font>

88
00:03:59,810 --> 00:04:03,470
macro<font color="#CCCCCC"> is like the goal was to have</font>

89
00:04:01,670 --> 00:04:05,720
readable code you can't<font color="#E5E5E5"> act this and</font>

90
00:04:03,470 --> 00:04:08,150
then we discussed<font color="#CCCCCC"> it a</font><font color="#E5E5E5"> little bit in the</font>

91
00:04:05,720 --> 00:04:09,440
end we<font color="#E5E5E5"> ended up adding it to the code</font>

92
00:04:08,150 --> 00:04:11,360
<font color="#CCCCCC">base</font><font color="#E5E5E5"> because it's really necessary</font>

93
00:04:09,440 --> 00:04:15,350
there's no better way to do<font color="#E5E5E5"> this</font><font color="#CCCCCC"> than</font>

94
00:04:11,360 --> 00:04:17,180
this macro and see who here knows<font color="#E5E5E5"> we can</font>

95
00:04:15,350 --> 00:04:22,690
immediately recognize<font color="#CCCCCC"> the narc or knows</font>

96
00:04:17,180 --> 00:04:27,650
what it does I<font color="#CCCCCC"> see this</font><font color="#E5E5E5"> I see</font><font color="#CCCCCC"> one hand</font>

97
00:04:22,690 --> 00:04:29,180
to have<font color="#E5E5E5"> a few hands okay not bad not bad</font>

98
00:04:27,650 --> 00:04:33,560
does it help if I show you the actual

99
00:04:29,180 --> 00:04:37,220
name anyone<font color="#E5E5E5"> who who can who recognize</font>

100
00:04:33,560 --> 00:04:41,710
this<font color="#E5E5E5"> Michael some more</font><font color="#CCCCCC"> hands yeah</font><font color="#E5E5E5"> okay</font>

101
00:04:37,220 --> 00:04:43,910
<font color="#E5E5E5">but there's kind of little bit</font><font color="#CCCCCC"> fake</font>

102
00:04:41,710 --> 00:04:45,859
inheritance or a little bit too abstract

103
00:04:43,910 --> 00:04:48,470
<font color="#CCCCCC">driver's it's</font><font color="#E5E5E5"> commonly used in drivers</font>

104
00:04:45,860 --> 00:04:51,320
<font color="#E5E5E5">and to abstract the different drivers</font>

105
00:04:48,470 --> 00:04:53,240
I've<font color="#E5E5E5"> Marcos copied from the Linux kernel</font>

106
00:04:51,320 --> 00:04:55,310
<font color="#CCCCCC">and I've searched through the Linux</font>

107
00:04:53,240 --> 00:04:56,990
kernel sources and found<font color="#E5E5E5"> 15,000</font><font color="#CCCCCC"> users of</font>

108
00:04:55,310 --> 00:04:58,910
this<font color="#E5E5E5"> marker so it's not at all unusual</font>

109
00:04:56,990 --> 00:05:01,490
<font color="#E5E5E5">to have</font><font color="#CCCCCC"> C code</font><font color="#E5E5E5"> like this in your driver</font>

110
00:04:58,910 --> 00:05:03,590
<font color="#CCCCCC">so I didn't agree to</font><font color="#E5E5E5"> add it to</font><font color="#CCCCCC"> the code</font>

111
00:05:01,490 --> 00:05:05,060
even<font color="#E5E5E5"> though probably</font><font color="#CCCCCC"> almost no one can</font>

112
00:05:03,590 --> 00:05:07,489
read at the actual code also<font color="#E5E5E5"> has a</font>

113
00:05:05,060 --> 00:05:10,940
<font color="#CCCCCC">comment to a blog post that explains</font>

114
00:05:07,490 --> 00:05:13,130
<font color="#E5E5E5">what is Marco does but it it also chose</font>

115
00:05:10,940 --> 00:05:14,479
the<font color="#E5E5E5"> problem that maybe a lot</font><font color="#CCCCCC"> of people</font>

116
00:05:13,130 --> 00:05:15,770
think they can<font color="#E5E5E5"> read</font><font color="#CCCCCC"> C but then</font><font color="#E5E5E5"> they</font>

117
00:05:14,479 --> 00:05:19,190
encounter something<font color="#E5E5E5"> like that and</font>

118
00:05:15,770 --> 00:05:22,070
suddenly yeah point is it can<font color="#E5E5E5"> be ugly</font>

119
00:05:19,190 --> 00:05:24,860
<font color="#CCCCCC">and it can not only</font><font color="#E5E5E5"> be ugly in terms of</font>

120
00:05:22,070 --> 00:05:26,539
how it looks or<font color="#E5E5E5"> feels by programming it</font>

121
00:05:24,860 --> 00:05:28,610
can also be ugly<font color="#CCCCCC"> when it comes to</font>

122
00:05:26,539 --> 00:05:30,919
security properties or security<font color="#E5E5E5"> issues</font>

123
00:05:28,610 --> 00:05:32,660
there's a screenshot from<font color="#CCCCCC"> CVE details</font>

124
00:05:30,919 --> 00:05:33,859
that<font color="#E5E5E5"> come no I don't expect you to be</font>

125
00:05:32,660 --> 00:05:35,900
able<font color="#E5E5E5"> to read all these figures but</font>

126
00:05:33,860 --> 00:05:37,580
basically it shows there are<font color="#CCCCCC"> security</font>

127
00:05:35,900 --> 00:05:39,650
bugs in the<font color="#E5E5E5"> Linux kernel is specifically</font>

128
00:05:37,580 --> 00:05:44,000
<font color="#E5E5E5">all the Linux kernel bugs found in the</font>

129
00:05:39,650 --> 00:05:46,520
<font color="#E5E5E5">last 20 years or so and now you could</font>

130
00:05:44,000 --> 00:05:46,940
say<font color="#CCCCCC"> well why's the language to blame you</font>

131
00:05:46,520 --> 00:05:49,400
can

132
00:05:46,940 --> 00:05:51,469
<font color="#CCCCCC">I bet code in any language and what we</font>

133
00:05:49,400 --> 00:05:53,690
now would have to do is basically we

134
00:05:51,470 --> 00:05:56,420
would have to go<font color="#E5E5E5"> through all these</font><font color="#CCCCCC"> bucks</font>

135
00:05:53,690 --> 00:05:57,920
<font color="#CCCCCC">and</font><font color="#E5E5E5"> check by</font><font color="#CCCCCC"> the day</font><font color="#E5E5E5"> could be</font><font color="#CCCCCC"> prevented</font>

136
00:05:56,420 --> 00:06:00,590
by using<font color="#E5E5E5"> a memory</font><font color="#CCCCCC"> safe or</font><font color="#E5E5E5"> better</font>

137
00:05:57,920 --> 00:06:02,210
language<font color="#E5E5E5"> and it seems like a lot</font><font color="#CCCCCC"> of work</font>

138
00:06:00,590 --> 00:06:04,520
<font color="#E5E5E5">but luckily someone else already did</font>

139
00:06:02,210 --> 00:06:07,430
<font color="#E5E5E5">that last year there was a paper by</font>

140
00:06:04,520 --> 00:06:09,590
<font color="#CCCCCC">cutler at all who developed a operating</font>

141
00:06:07,430 --> 00:06:13,850
<font color="#E5E5E5">system and go and they looked at all</font>

142
00:06:09,590 --> 00:06:15,140
code execution<font color="#E5E5E5"> backs in thank 2017 in</font>

143
00:06:13,850 --> 00:06:17,450
the linux kernel and looked through<font color="#CCCCCC"> all</font>

144
00:06:15,140 --> 00:06:18,740
<font color="#CCCCCC">of them manually</font><font color="#E5E5E5"> and try to figure out</font>

145
00:06:17,450 --> 00:06:20,180
whether they could have been prevented

146
00:06:18,740 --> 00:06:22,280
<font color="#E5E5E5">by using a different programming</font>

147
00:06:20,180 --> 00:06:24,050
language for<font color="#CCCCCC"> 17% of them they were</font>

148
00:06:22,280 --> 00:06:25,219
<font color="#CCCCCC">unsure</font><font color="#E5E5E5"> and because this</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> kind of</font>

149
00:06:24,050 --> 00:06:26,510
<font color="#E5E5E5">ripped back and they couldn't tell</font>

150
00:06:25,220 --> 00:06:29,540
<font color="#E5E5E5">whether</font><font color="#CCCCCC"> that could</font><font color="#E5E5E5"> have been prevented</font>

151
00:06:26,510 --> 00:06:31,490
<font color="#CCCCCC">for</font><font color="#E5E5E5"> 22 percent of a clear logic</font><font color="#CCCCCC"> parks</font>

152
00:06:29,540 --> 00:06:33,470
<font color="#CCCCCC">respect</font><font color="#E5E5E5"> really you would have made that</font>

153
00:06:31,490 --> 00:06:34,880
back probably<font color="#CCCCCC"> in</font><font color="#E5E5E5"> any language and the</font>

154
00:06:33,470 --> 00:06:36,950
language wouldn't have helped but<font color="#E5E5E5"> for</font>

155
00:06:34,880 --> 00:06:40,580
over 50 percent<font color="#E5E5E5"> of the box we</font><font color="#CCCCCC"> are</font>

156
00:06:36,950 --> 00:06:42,920
related to memory<font color="#E5E5E5"> both use of the free</font>

157
00:06:40,580 --> 00:06:44,570
out<font color="#E5E5E5"> of bound accesses and so on</font><font color="#CCCCCC"> and</font>

158
00:06:42,920 --> 00:06:47,450
<font color="#CCCCCC">these can be prevented</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> using a better</font>

159
00:06:44,570 --> 00:06:50,240
programming language now these are 40

160
00:06:47,450 --> 00:06:53,120
preventable<font color="#E5E5E5"> bugs in this case study and</font>

161
00:06:50,240 --> 00:06:55,460
we looked at them to figure<font color="#CCCCCC"> out how many</font>

162
00:06:53,120 --> 00:06:56,810
<font color="#E5E5E5">of these backs were and drive us</font><font color="#CCCCCC"> versus</font>

163
00:06:55,460 --> 00:06:58,340
<font color="#CCCCCC">parks in other parts</font><font color="#E5E5E5"> of the kernel</font>

164
00:06:56,810 --> 00:07:01,120
because<font color="#CCCCCC"> we are specifically</font><font color="#E5E5E5"> looking at</font>

165
00:06:58,340 --> 00:07:03,469
drivers well 39<font color="#E5E5E5"> of them</font><font color="#CCCCCC"> were and drivers</font>

166
00:07:01,120 --> 00:07:05,930
<font color="#E5E5E5">the other one was in the Bluetooth stack</font>

167
00:07:03,470 --> 00:07:09,169
and of the drivers<font color="#CCCCCC"> take five</font><font color="#E5E5E5"> come by</font>

168
00:07:05,930 --> 00:07:11,150
<font color="#CCCCCC">five driver had certain box</font><font color="#E5E5E5"> yes I know I</font>

169
00:07:09,169 --> 00:07:15,590
was shocked<font color="#CCCCCC"> box and o'clock on Wi-Fi</font>

170
00:07:11,150 --> 00:07:18,620
driver<font color="#E5E5E5"> could have</font><font color="#CCCCCC"> sought now based on</font>

171
00:07:15,590 --> 00:07:23,270
these results<font color="#CCCCCC"> should you be writing new</font>

172
00:07:18,620 --> 00:07:24,890
code in C and 2019<font color="#E5E5E5"> well probably</font><font color="#CCCCCC"> not if</font>

173
00:07:23,270 --> 00:07:26,810
you have a<font color="#E5E5E5"> choice but</font><font color="#CCCCCC"> you just often</font>

174
00:07:24,890 --> 00:07:28,700
<font color="#E5E5E5">don't have a choice</font><font color="#CCCCCC"> if you're</font><font color="#E5E5E5"> adding</font>

175
00:07:26,810 --> 00:07:30,140
some kernel code for some reason<font color="#CCCCCC"> sure</font>

176
00:07:28,700 --> 00:07:31,760
you can write a kernel module<font color="#CCCCCC"> and</font><font color="#E5E5E5"> worst</font>

177
00:07:30,140 --> 00:07:34,370
but good luck getting<font color="#E5E5E5"> it up streams and</font>

178
00:07:31,760 --> 00:07:35,659
other languages<font color="#E5E5E5"> like good luck writing a</font>

179
00:07:34,370 --> 00:07:38,360
kernel module<font color="#CCCCCC"> in JavaScript that's</font>

180
00:07:35,660 --> 00:07:41,080
probably not going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> work and if it's</font>

181
00:07:38,360 --> 00:07:43,400
going to work is probably<font color="#E5E5E5"> a bad idea</font><font color="#CCCCCC"> now</font>

182
00:07:41,080 --> 00:07:45,020
<font color="#CCCCCC">this is why we are looking at user space</font>

183
00:07:43,400 --> 00:07:47,270
drivers because they can be written<font color="#E5E5E5"> in</font>

184
00:07:45,020 --> 00:07:49,450
virtually any language so we are not

185
00:07:47,270 --> 00:07:52,099
constrained<font color="#E5E5E5"> by</font><font color="#CCCCCC"> any environment here and</font>

186
00:07:49,450 --> 00:07:53,870
the question would now be are all the

187
00:07:52,100 --> 00:07:55,490
<font color="#E5E5E5">language that equally good choice can I</font>

188
00:07:53,870 --> 00:07:56,750
do it in any language<font color="#CCCCCC"> should</font><font color="#E5E5E5"> I do it in</font>

189
00:07:55,490 --> 00:07:59,990
any<font color="#CCCCCC"> language</font><font color="#E5E5E5"> which language should</font><font color="#CCCCCC"> I</font>

190
00:07:56,750 --> 00:08:00,740
<font color="#CCCCCC">choose use is a JIT compiler</font><font color="#E5E5E5"> or garbage</font>

191
00:07:59,990 --> 00:08:03,229
collector

192
00:08:00,740 --> 00:08:05,150
<font color="#E5E5E5">in the driver now I initially wanted</font><font color="#CCCCCC"> to</font>

193
00:08:03,229 --> 00:08:07,310
like<font color="#CCCCCC"> write one driver in one high-level</font>

194
00:08:05,150 --> 00:08:09,859
language to have a case study<font color="#CCCCCC"> and then</font>

195
00:08:07,310 --> 00:08:11,479
extensively evaluated<font color="#E5E5E5"> but then I thought</font>

196
00:08:09,860 --> 00:08:13,759
<font color="#E5E5E5">maybe it would</font><font color="#CCCCCC"> be a better</font><font color="#E5E5E5"> idea to write</font>

197
00:08:11,479 --> 00:08:15,680
drivers in all the languages but it

198
00:08:13,759 --> 00:08:18,349
turns out<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> speak all the</font>

199
00:08:15,680 --> 00:08:20,840
languages<font color="#CCCCCC"> but luckily I could recruit</font>

200
00:08:18,349 --> 00:08:23,719
the<font color="#E5E5E5"> help of a few students and there's a</font>

201
00:08:20,840 --> 00:08:25,638
screenshot<font color="#CCCCCC"> from my</font><font color="#E5E5E5"> website at a</font>

202
00:08:23,720 --> 00:08:27,430
university<font color="#CCCCCC"> where i do like announcement</font>

203
00:08:25,639 --> 00:08:29,300
for<font color="#CCCCCC"> jesus' and I just added</font>

204
00:08:27,430 --> 00:08:31,190
<font color="#E5E5E5">announcements for</font><font color="#CCCCCC"> waiting I talked to I</font>

205
00:08:29,300 --> 00:08:40,580
was immersed in go in Java and c-sharp

206
00:08:31,190 --> 00:08:42,140
<font color="#CCCCCC">in Haskell</font><font color="#E5E5E5"> and so on and then</font><font color="#CCCCCC"> at first</font>

207
00:08:40,580 --> 00:08:43,760
<font color="#E5E5E5">my my colleagues at the University</font>

208
00:08:42,140 --> 00:08:45,890
<font color="#E5E5E5">looked at me in red where's Malik are</font>

209
00:08:43,760 --> 00:08:48,260
you serious you realize<font color="#CCCCCC"> this the same</font>

210
00:08:45,890 --> 00:08:49,730
announcement<font color="#CCCCCC"> all over again some of them</font>

211
00:08:48,260 --> 00:08:53,360
still can't tell if I'm<font color="#CCCCCC"> serious about</font>

212
00:08:49,730 --> 00:08:55,250
this<font color="#E5E5E5"> but yes I am and I got a lot of</font>

213
00:08:53,360 --> 00:08:57,380
response<font color="#E5E5E5"> from students I</font><font color="#CCCCCC"> think I talked</font>

214
00:08:55,250 --> 00:08:58,970
<font color="#E5E5E5">to a total of</font><font color="#CCCCCC"> 30 students or so who</font>

215
00:08:57,380 --> 00:09:01,880
wanted<font color="#CCCCCC"> to do one of these teasers</font><font color="#E5E5E5"> and</font>

216
00:08:58,970 --> 00:09:04,279
then these two were one of the<font color="#E5E5E5"> first</font>

217
00:09:01,880 --> 00:09:05,990
ones to<font color="#E5E5E5"> talk to me and I try to scare</font>

218
00:09:04,279 --> 00:09:07,700
them all away initially I told<font color="#E5E5E5"> them all</font>

219
00:09:05,990 --> 00:09:09,470
<font color="#E5E5E5">it's going to be really hard you</font><font color="#CCCCCC"> can get</font>

220
00:09:07,700 --> 00:09:11,630
in easier teasers probably not a good

221
00:09:09,470 --> 00:09:14,000
<font color="#CCCCCC">idea</font><font color="#E5E5E5"> you need to know a lot of</font><font color="#CCCCCC"> low level</font>

222
00:09:11,630 --> 00:09:16,910
stuff and so I scared<font color="#E5E5E5"> away 20 of the 30</font>

223
00:09:14,000 --> 00:09:21,110
I talked to in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> end we did</font><font color="#CCCCCC"> 10 pieces</font>

224
00:09:16,910 --> 00:09:23,120
<font color="#CCCCCC">and yes</font><font color="#E5E5E5"> quite nice result so far</font><font color="#CCCCCC"> if you</font>

225
00:09:21,110 --> 00:09:26,110
are still ongoing but<font color="#E5E5E5"> I hope we will</font>

226
00:09:23,120 --> 00:09:29,630
<font color="#CCCCCC">have</font><font color="#E5E5E5"> 10 different languages</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> drivers</font>

227
00:09:26,110 --> 00:09:33,320
<font color="#E5E5E5">soonish I think finished depending on</font>

228
00:09:29,630 --> 00:09:34,850
how you count<font color="#CCCCCC"> finished 6</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> 7</font><font color="#E5E5E5"> and yeah</font>

229
00:09:33,320 --> 00:09:36,350
also turns out giving a talk here is a

230
00:09:34,850 --> 00:09:39,110
<font color="#E5E5E5">really nice way to recruit students</font>

231
00:09:36,350 --> 00:09:42,110
because a lot of<font color="#E5E5E5"> my students mentioned</font>

232
00:09:39,110 --> 00:09:45,320
that they saw my talk and contacted me

233
00:09:42,110 --> 00:09:47,570
afterwards for<font color="#CCCCCC"> teasers now what did I</font>

234
00:09:45,320 --> 00:09:50,690
tell my students how to how<font color="#CCCCCC"> to go I had</font>

235
00:09:47,570 --> 00:09:53,839
to to write a driver well I explained<font color="#E5E5E5"> to</font>

236
00:09:50,690 --> 00:09:56,510
them<font color="#E5E5E5"> basically the very basics of how</font><font color="#CCCCCC"> to</font>

237
00:09:53,839 --> 00:09:58,339
write a<font color="#CCCCCC"> userspace driver how to talk to</font>

238
00:09:56,510 --> 00:09:59,839
<font color="#CCCCCC">a modern PC I'd first devised and what</font>

239
00:09:58,339 --> 00:10:01,970
you need<font color="#CCCCCC"> to do basically there are three</font>

240
00:09:59,839 --> 00:10:04,640
<font color="#CCCCCC">different ways to</font><font color="#E5E5E5"> talk to modern PCI</font>

241
00:10:01,970 --> 00:10:06,560
<font color="#E5E5E5">Express devices we are ignoring a few</font>

242
00:10:04,640 --> 00:10:09,279
legacy things here if you like<font color="#E5E5E5"> we had</font>

243
00:10:06,560 --> 00:10:11,510
old<font color="#CCCCCC"> io instructions not on here</font><font color="#E5E5E5"> sorry</font>

244
00:10:09,279 --> 00:10:13,939
<font color="#CCCCCC">first way to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> to a device directly</font>

245
00:10:11,510 --> 00:10:14,689
<font color="#E5E5E5">simplest way is memory mapped i/o memory</font>

246
00:10:13,940 --> 00:10:16,490
mapped i/o

247
00:10:14,690 --> 00:10:19,190
just a magic memory<font color="#E5E5E5"> area that is mapped</font>

248
00:10:16,490 --> 00:10:21,650
to<font color="#E5E5E5"> does</font><font color="#CCCCCC"> met</font><font color="#E5E5E5"> into your process and</font>

249
00:10:19,190 --> 00:10:24,170
directly<font color="#E5E5E5"> goes through to the device and</font>

250
00:10:21,650 --> 00:10:26,510
if you read white that memory<font color="#E5E5E5"> the device</font>

251
00:10:24,170 --> 00:10:28,400
gets the request<font color="#E5E5E5"> and can reply to it</font>

252
00:10:26,510 --> 00:10:30,319
that's usually<font color="#E5E5E5"> used to expose device for</font>

253
00:10:28,400 --> 00:10:32,420
<font color="#E5E5E5">just us</font><font color="#CCCCCC"> on Linux</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can just end up</font><font color="#E5E5E5"> a</font>

254
00:10:30,320 --> 00:10:34,250
magic<font color="#E5E5E5"> file via the UI or framework and</font>

255
00:10:32,420 --> 00:10:37,520
then<font color="#E5E5E5"> you have access</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> that from your</font>

256
00:10:34,250 --> 00:10:40,250
user space program<font color="#E5E5E5"> second way is kind of</font>

257
00:10:37,520 --> 00:10:41,720
<font color="#E5E5E5">how the device talks to you or how the</font>

258
00:10:40,250 --> 00:10:43,910
device talks<font color="#E5E5E5"> to the rest of the system</font>

259
00:10:41,720 --> 00:10:45,590
<font color="#E5E5E5">is direct memory access that is just</font>

260
00:10:43,910 --> 00:10:48,050
<font color="#E5E5E5">aware how the device can read and write</font>

261
00:10:45,590 --> 00:10:49,910
arbitrary<font color="#E5E5E5"> memory locations and for user</font>

262
00:10:48,050 --> 00:10:52,310
space<font color="#E5E5E5"> drivers</font><font color="#CCCCCC"> you just have to</font><font color="#E5E5E5"> figure</font>

263
00:10:49,910 --> 00:10:54,439
out where our memory address<font color="#CCCCCC"> space is</font>

264
00:10:52,310 --> 00:10:55,760
mapped physically<font color="#E5E5E5"> then we can tell the</font>

265
00:10:54,440 --> 00:10:57,260
device to write<font color="#E5E5E5"> something there and then</font>

266
00:10:55,760 --> 00:10:59,090
it<font color="#E5E5E5"> will just</font><font color="#CCCCCC"> show up in our process</font>

267
00:10:57,260 --> 00:11:00,920
<font color="#E5E5E5">without</font><font color="#CCCCCC"> us having to do anything in</font>

268
00:10:59,090 --> 00:11:03,650
there in the kernel<font color="#E5E5E5"> and the short</font><font color="#CCCCCC"> for</font>

269
00:11:00,920 --> 00:11:05,329
<font color="#CCCCCC">interrupt we will not be using</font>

270
00:11:03,650 --> 00:11:07,819
<font color="#CCCCCC">interrupts here because we don't need</font>

271
00:11:05,330 --> 00:11:10,550
<font color="#E5E5E5">them</font><font color="#CCCCCC"> for a high-speed</font><font color="#E5E5E5"> network driver but</font>

272
00:11:07,820 --> 00:11:12,050
<font color="#CCCCCC">let's ayat it on here because</font><font color="#E5E5E5"> sometimes</font>

273
00:11:10,550 --> 00:11:13,520
<font color="#CCCCCC">people say well you can't use interrupts</font>

274
00:11:12,050 --> 00:11:15,170
from a user space<font color="#E5E5E5"> driver that is</font>

275
00:11:13,520 --> 00:11:16,699
incorrect you<font color="#CCCCCC"> can use the</font><font color="#E5E5E5"> V if I or</font>

276
00:11:15,170 --> 00:11:18,620
subsystem that<font color="#E5E5E5"> has full support for</font>

277
00:11:16,700 --> 00:11:21,770
interrupt but we won't<font color="#E5E5E5"> be using them</font>

278
00:11:18,620 --> 00:11:23,690
<font color="#E5E5E5">here now what did I tell my students</font>

279
00:11:21,770 --> 00:11:25,550
<font color="#E5E5E5">about how they</font><font color="#CCCCCC"> should</font><font color="#E5E5E5"> go to write their</font>

280
00:11:23,690 --> 00:11:28,190
drivers well basically they should just

281
00:11:25,550 --> 00:11:30,349
<font color="#E5E5E5">remove the current kernel driver</font><font color="#CCCCCC"> do the</font>

282
00:11:28,190 --> 00:11:32,390
<font color="#E5E5E5">magic MF call on the under</font><font color="#CCCCCC"> light metric</font>

283
00:11:30,350 --> 00:11:33,830
file<font color="#E5E5E5"> then figure out the physical</font>

284
00:11:32,390 --> 00:11:41,449
addresses and<font color="#E5E5E5"> then just watch the driver</font>

285
00:11:33,830 --> 00:11:43,490
<font color="#E5E5E5">it's it's really easy so then we have a</font>

286
00:11:41,450 --> 00:11:45,320
lot of hardware<font color="#E5E5E5"> at the University and I</font>

287
00:11:43,490 --> 00:11:47,720
gave<font color="#E5E5E5"> them all access to service there's</font>

288
00:11:45,320 --> 00:11:49,520
<font color="#CCCCCC">ten gigabit</font><font color="#E5E5E5"> network cards of the</font>

289
00:11:47,720 --> 00:11:52,190
<font color="#CCCCCC">infinite likes to be family this is a</font>

290
00:11:49,520 --> 00:11:54,650
really<font color="#E5E5E5"> common network card that you will</font>

291
00:11:52,190 --> 00:11:56,240
find on a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> sellers like default go</font>

292
00:11:54,650 --> 00:11:57,620
to<font color="#E5E5E5"> ten gigabit network card on any</font>

293
00:11:56,240 --> 00:12:00,890
service you will often<font color="#CCCCCC"> find it onboard</font>

294
00:11:57,620 --> 00:12:02,960
<font color="#CCCCCC">or embedded in some of the CPUs even the</font>

295
00:12:00,890 --> 00:12:04,910
nice part about<font color="#CCCCCC"> this</font><font color="#E5E5E5"> has a very very</font>

296
00:12:02,960 --> 00:12:07,730
<font color="#E5E5E5">nice data sheet publicly available that</font>

297
00:12:04,910 --> 00:12:09,589
documents basically<font color="#E5E5E5"> everything fun fact</font>

298
00:12:07,730 --> 00:12:12,530
we found<font color="#E5E5E5"> it easier to program against</font>

299
00:12:09,589 --> 00:12:13,970
this<font color="#CCCCCC"> Hardware black box was a good</font>

300
00:12:12,530 --> 00:12:15,680
public data sheet<font color="#E5E5E5"> and we found</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> to</font>

301
00:12:13,970 --> 00:12:17,300
<font color="#CCCCCC">implemented that I expect which is the</font>

302
00:12:15,680 --> 00:12:21,140
open specification<font color="#CCCCCC"> has several open</font>

303
00:12:17,300 --> 00:12:24,680
source<font color="#E5E5E5"> implementations but yeah um then</font>

304
00:12:21,140 --> 00:12:27,230
the this<font color="#E5E5E5"> network cards a little bit all</font>

305
00:12:24,680 --> 00:12:28,620
at<font color="#CCCCCC"> ten</font><font color="#E5E5E5"> years old also and it has a nice</font>

306
00:12:27,230 --> 00:12:30,390
<font color="#CCCCCC">property</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> it still</font>

307
00:12:28,620 --> 00:12:32,010
low level compared to newer network

308
00:12:30,390 --> 00:12:33,240
<font color="#CCCCCC">cards</font><font color="#E5E5E5"> if you</font><font color="#CCCCCC"> implement this on your</font>

309
00:12:32,010 --> 00:12:35,640
network<font color="#E5E5E5"> at you are usually</font><font color="#CCCCCC"> just</font>

310
00:12:33,240 --> 00:12:37,260
exchanging messages<font color="#E5E5E5"> let some fuel and</font>

311
00:12:35,640 --> 00:12:39,150
<font color="#CCCCCC">that's just boring because</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> firm</font><font color="#E5E5E5"> they</font>

312
00:12:37,260 --> 00:12:40,530
<font color="#E5E5E5">implement everything</font><font color="#CCCCCC"> sure the older</font>

313
00:12:39,150 --> 00:12:42,780
network<font color="#E5E5E5"> cards also have some film there</font>

314
00:12:40,530 --> 00:12:45,449
<font color="#E5E5E5">but you get a lot of more</font><font color="#CCCCCC"> low-level</font>

315
00:12:42,780 --> 00:12:47,100
access<font color="#E5E5E5"> to the card and you you don't</font>

316
00:12:45,450 --> 00:12:48,480
<font color="#E5E5E5">feel</font><font color="#CCCCCC"> like you are just talking</font><font color="#E5E5E5"> to a</font><font color="#CCCCCC"> VM</font>

317
00:12:47,100 --> 00:12:50,850
<font color="#CCCCCC">where you feel like</font><font color="#E5E5E5"> you are implementing</font>

318
00:12:48,480 --> 00:12:53,310
<font color="#E5E5E5">and actually drive by yourself</font><font color="#CCCCCC"> so now</font>

319
00:12:50,850 --> 00:12:55,230
these<font color="#CCCCCC"> are</font><font color="#E5E5E5"> the basic</font><font color="#CCCCCC"> things I</font><font color="#E5E5E5"> told my</font>

320
00:12:53,310 --> 00:12:58,050
students<font color="#E5E5E5"> I will</font><font color="#CCCCCC"> now give over to</font>

321
00:12:55,230 --> 00:13:01,980
Sebastian<font color="#E5E5E5"> and who will show a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit</font>

322
00:12:58,050 --> 00:13:04,469
<font color="#CCCCCC">of C code about</font><font color="#E5E5E5"> well how to write a code</font>

323
00:13:01,980 --> 00:13:05,850
how to<font color="#E5E5E5"> write a driver and C and what</font>

324
00:13:04,470 --> 00:13:13,020
other could be<font color="#CCCCCC"> done in a</font><font color="#E5E5E5"> high-level</font>

325
00:13:05,850 --> 00:13:15,360
language so just showed you what we have

326
00:13:13,020 --> 00:13:17,730
to do in<font color="#CCCCCC"> general I'm going to take a bit</font>

327
00:13:15,360 --> 00:13:19,770
more<font color="#E5E5E5"> detailed look at this so first of</font>

328
00:13:17,730 --> 00:13:24,470
all of<font color="#E5E5E5"> course we have to figure out our</font>

329
00:13:19,770 --> 00:13:28,230
PCI<font color="#E5E5E5"> addresses you can</font><font color="#CCCCCC"> do this via LS PCI</font>

330
00:13:24,470 --> 00:13:31,080
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then you get a list of all the PCI</font>

331
00:13:28,230 --> 00:13:33,180
devices and you just look for<font color="#CCCCCC"> something</font>

332
00:13:31,080 --> 00:13:35,790
<font color="#CCCCCC">like into the</font><font color="#E5E5E5"> cooperation</font><font color="#CCCCCC"> 8:00 to 5:00</font>

333
00:13:33,180 --> 00:13:38,989
<font color="#CCCCCC">9:00 9:00</font><font color="#E5E5E5"> something that looks like this</font>

334
00:13:35,790 --> 00:13:42,060
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> there at the</font><font color="#E5E5E5"> front of the line</font>

335
00:13:38,990 --> 00:13:44,040
<font color="#E5E5E5">there</font><font color="#CCCCCC"> is an address</font><font color="#E5E5E5"> it looks kind</font><font color="#CCCCCC"> of</font>

336
00:13:42,060 --> 00:13:48,449
<font color="#CCCCCC">similar to</font><font color="#E5E5E5"> the MAC</font><font color="#CCCCCC"> address and well</font>

337
00:13:44,040 --> 00:13:50,599
that's<font color="#E5E5E5"> the address we need so now we got</font>

338
00:13:48,450 --> 00:13:54,330
the<font color="#CCCCCC"> address from</font><font color="#E5E5E5"> this address we can</font>

339
00:13:50,600 --> 00:13:57,620
just go<font color="#CCCCCC"> there and unload our driver</font>

340
00:13:54,330 --> 00:14:00,660
<font color="#E5E5E5">that's basically it you just right there</font>

341
00:13:57,620 --> 00:14:05,550
<font color="#CCCCCC">next up we have two</font><font color="#E5E5E5"> M up our PCI</font>

342
00:14:00,660 --> 00:14:08,150
register from<font color="#CCCCCC"> the address space</font><font color="#E5E5E5"> and for</font>

343
00:14:05,550 --> 00:14:10,979
that we yeah<font color="#E5E5E5"> we open our magic file and</font>

344
00:14:08,150 --> 00:14:14,790
execute an air map<font color="#CCCCCC"> the challenge here is</font>

345
00:14:10,980 --> 00:14:16,380
<font color="#E5E5E5">mainly that for every high-level</font>

346
00:14:14,790 --> 00:14:18,030
language you want<font color="#E5E5E5"> to do this and you</font>

347
00:14:16,380 --> 00:14:20,900
have<font color="#CCCCCC"> to have some kind of way to</font>

348
00:14:18,030 --> 00:14:24,240
<font color="#CCCCCC">actually use an M up</font><font color="#E5E5E5"> either via a</font>

349
00:14:20,900 --> 00:14:28,410
library or in the worst case you<font color="#E5E5E5"> just</font>

350
00:14:24,240 --> 00:14:31,380
<font color="#E5E5E5">have to use some C code for that</font><font color="#CCCCCC"> next</font>

351
00:14:28,410 --> 00:14:34,560
thing this is an extract of the

352
00:14:31,380 --> 00:14:36,600
<font color="#CCCCCC">datasheet</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> datasheet yeah it's</font>

353
00:14:34,560 --> 00:14:39,239
basically<font color="#E5E5E5"> like this you have the</font>

354
00:14:36,600 --> 00:14:41,550
register names<font color="#E5E5E5"> register offsets and then</font>

355
00:14:39,240 --> 00:14:43,980
you can just go<font color="#CCCCCC"> through the</font>

356
00:14:41,550 --> 00:14:47,310
document and you find all the registers

357
00:14:43,980 --> 00:14:51,840
you need to read and<font color="#E5E5E5"> set things for the</font>

358
00:14:47,310 --> 00:14:54,420
driver<font color="#CCCCCC"> and yeah a quick</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> network</font>

359
00:14:51,840 --> 00:14:56,760
cards have LEDs often and we can<font color="#CCCCCC"> make</font>

360
00:14:54,420 --> 00:14:57,300
them blink<font color="#E5E5E5"> turn on and off and how do we</font>

361
00:14:56,760 --> 00:15:00,569
<font color="#E5E5E5">do this</font>

362
00:14:57,300 --> 00:15:02,910
well we<font color="#CCCCCC"> have to get the base address of</font>

363
00:15:00,570 --> 00:15:05,340
<font color="#E5E5E5">our registers at the offset</font><font color="#CCCCCC"> that we</font>

364
00:15:02,910 --> 00:15:08,069
found in the<font color="#E5E5E5"> datasheet and then just</font>

365
00:15:05,340 --> 00:15:10,830
switch<font color="#E5E5E5"> the bit and this turns the light</font>

366
00:15:08,070 --> 00:15:15,180
off<font color="#CCCCCC"> and on and yeah</font><font color="#E5E5E5"> right the back of</font>

367
00:15:10,830 --> 00:15:18,150
course<font color="#E5E5E5"> the register also</font><font color="#CCCCCC"> this is one of</font>

368
00:15:15,180 --> 00:15:20,939
<font color="#E5E5E5">the very few valid uses of volatile and</font>

369
00:15:18,150 --> 00:15:24,230
<font color="#E5E5E5">C because we</font><font color="#CCCCCC"> have to really</font><font color="#E5E5E5"> prevent</font>

370
00:15:20,940 --> 00:15:27,420
compiler optimization<font color="#E5E5E5"> here as we have</font>

371
00:15:24,230 --> 00:15:31,800
memory access from multiple sources<font color="#E5E5E5"> so</font>

372
00:15:27,420 --> 00:15:35,880
<font color="#CCCCCC">yeah next up how do we handle packets</font>

373
00:15:31,800 --> 00:15:38,609
via DMA packets are transferred via<font color="#CCCCCC"> cue</font>

374
00:15:35,880 --> 00:15:40,710
interfaces<font color="#CCCCCC"> receive queues transmit</font>

375
00:15:38,610 --> 00:15:42,420
queues and these are often called rings

376
00:15:40,710 --> 00:15:46,740
<font color="#E5E5E5">because well they</font><font color="#CCCCCC"> are organized in a</font>

377
00:15:42,420 --> 00:15:51,300
ring like structure<font color="#E5E5E5"> and</font><font color="#CCCCCC"> these rings are</font>

378
00:15:46,740 --> 00:15:54,500
configured via<font color="#E5E5E5"> mm IO</font><font color="#CCCCCC"> and when this is</font>

379
00:15:51,300 --> 00:15:57,870
<font color="#CCCCCC">done</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can access</font><font color="#E5E5E5"> the device via DMA</font>

380
00:15:54,500 --> 00:16:01,560
these rings<font color="#E5E5E5"> then usually contain</font>

381
00:15:57,870 --> 00:16:06,120
pointers to packets<font color="#E5E5E5"> and these packets</font>

382
00:16:01,560 --> 00:16:09,750
are then also<font color="#E5E5E5"> accessed by a DMA the</font>

383
00:16:06,120 --> 00:16:12,540
details vary a bit between<font color="#E5E5E5"> cards and</font>

384
00:16:09,750 --> 00:16:15,450
devices<font color="#CCCCCC"> but</font><font color="#E5E5E5"> that is not unique</font><font color="#CCCCCC"> tune</font>

385
00:16:12,540 --> 00:16:18,270
makes this<font color="#E5E5E5"> process this is pretty</font><font color="#CCCCCC"> much</font>

386
00:16:15,450 --> 00:16:22,950
<font color="#E5E5E5">the same thing for all PCIe devices they</font>

387
00:16:18,270 --> 00:16:24,600
all kind of work<font color="#CCCCCC"> similar so what are the</font>

388
00:16:22,950 --> 00:16:26,910
challenges for<font color="#CCCCCC"> a</font><font color="#E5E5E5"> high-level</font><font color="#CCCCCC"> language</font>

389
00:16:24,600 --> 00:16:30,690
shows we have<font color="#E5E5E5"> seen some for</font><font color="#CCCCCC"> example the</font>

390
00:16:26,910 --> 00:16:34,290
<font color="#CCCCCC">MF call</font><font color="#E5E5E5"> we somehow have to get access to</font>

391
00:16:30,690 --> 00:16:37,140
this with the proper<font color="#CCCCCC"> flags another thing</font>

392
00:16:34,290 --> 00:16:41,010
we have to handle externally allocated

393
00:16:37,140 --> 00:16:45,720
memory<font color="#E5E5E5"> and the layout this memory comes</font>

394
00:16:41,010 --> 00:16:47,400
in<font color="#E5E5E5"> also we've</font><font color="#CCCCCC"> seen we</font><font color="#E5E5E5"> need volatile to</font>

395
00:16:45,720 --> 00:16:50,790
prevent<font color="#CCCCCC"> compile</font><font color="#E5E5E5"> optimization so we have</font>

396
00:16:47,400 --> 00:16:54,120
to have some kind<font color="#CCCCCC"> of semantics so we can</font>

397
00:16:50,790 --> 00:16:55,879
force this in<font color="#E5E5E5"> other languages and of</font>

398
00:16:54,120 --> 00:16:59,759
course

399
00:16:55,879 --> 00:17:01,980
often<font color="#E5E5E5"> especially for</font><font color="#CCCCCC"> low-level stuff you</font>

400
00:16:59,759 --> 00:17:04,860
<font color="#E5E5E5">often have to</font><font color="#CCCCCC"> use some kind</font><font color="#E5E5E5"> of unsafe</font>

401
00:17:01,980 --> 00:17:07,380
code for<font color="#CCCCCC"> high level languages</font><font color="#E5E5E5"> because</font>

402
00:17:04,859 --> 00:17:11,428
well many operations are inherently

403
00:17:07,380 --> 00:17:13,649
unsafe<font color="#E5E5E5"> when you operate here</font><font color="#CCCCCC"> but we try</font>

404
00:17:11,429 --> 00:17:18,630
to contain this unsafe<font color="#E5E5E5"> code to as few</font>

405
00:17:13,648 --> 00:17:22,859
places<font color="#E5E5E5"> as possible to contain this to a</font>

406
00:17:18,630 --> 00:17:25,470
small area<font color="#CCCCCC"> ok now some basic challenges</font>

407
00:17:22,859 --> 00:17:27,750
<font color="#E5E5E5">I'm going</font><font color="#CCCCCC"> to hand back over</font><font color="#E5E5E5"> to Paul who</font>

408
00:17:25,470 --> 00:17:30,659
says<font color="#E5E5E5"> something about the goals for</font><font color="#CCCCCC"> our</font>

409
00:17:27,750 --> 00:17:32,190
implementations<font color="#CCCCCC"> ok um basically</font><font color="#E5E5E5"> this is</font>

410
00:17:30,659 --> 00:17:34,500
what I've told my students<font color="#E5E5E5"> about what</font>

411
00:17:32,190 --> 00:17:37,350
I'm<font color="#E5E5E5"> expecting for these implementations</font>

412
00:17:34,500 --> 00:17:39,630
<font color="#CCCCCC">I wanted to have the same feature set as</font>

413
00:17:37,350 --> 00:17:42,418
my C driver which was kind of used as

414
00:17:39,630 --> 00:17:44,490
the<font color="#CCCCCC"> reference implementation and it also</font>

415
00:17:42,419 --> 00:17:46,740
was supposed to have the similar

416
00:17:44,490 --> 00:17:48,419
<font color="#E5E5E5">structure but</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> the same time we wanted</font>

417
00:17:46,740 --> 00:17:50,460
<font color="#E5E5E5">to have code that</font><font color="#CCCCCC"> looks</font><font color="#E5E5E5"> like it was</font>

418
00:17:48,419 --> 00:17:54,840
<font color="#E5E5E5">meant to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> within that</font><font color="#CCCCCC"> language</font><font color="#E5E5E5"> it's</font>

419
00:17:50,460 --> 00:17:56,760
<font color="#CCCCCC">always a difficult trade-off</font><font color="#E5E5E5"> to well use</font>

420
00:17:54,840 --> 00:17:58,350
<font color="#E5E5E5">safety features wherever possible but if</font>

421
00:17:56,760 --> 00:18:00,000
they cost too much performance do we

422
00:17:58,350 --> 00:18:02,129
really<font color="#E5E5E5"> need them</font><font color="#CCCCCC"> in all the places where</font>

423
00:18:00,000 --> 00:18:04,350
can be used to safety<font color="#E5E5E5"> features where do</font>

424
00:18:02,130 --> 00:18:06,360
they make<font color="#CCCCCC"> sense</font><font color="#E5E5E5"> and then we wanted to</font>

425
00:18:04,350 --> 00:18:07,559
<font color="#E5E5E5">quantify</font><font color="#CCCCCC"> that the idea</font><font color="#E5E5E5"> is to really have</font>

426
00:18:06,360 --> 00:18:09,168
<font color="#E5E5E5">on the end like</font><font color="#CCCCCC"> 10 driver</font>

427
00:18:07,559 --> 00:18:11,668
implementations that<font color="#CCCCCC"> we can</font>

428
00:18:09,169 --> 00:18:13,350
quantitatively evaluate and look<font color="#CCCCCC"> at the</font>

429
00:18:11,669 --> 00:18:15,539
performance<font color="#E5E5E5"> of all of them look at the</font>

430
00:18:13,350 --> 00:18:17,850
safety<font color="#CCCCCC"> properties of all of them look at</font>

431
00:18:15,539 --> 00:18:20,039
properties like safety<font color="#E5E5E5"> for memory</font>

432
00:18:17,850 --> 00:18:22,110
accesses is guaranteed for a packet

433
00:18:20,039 --> 00:18:26,220
buffers<font color="#E5E5E5"> yes</font><font color="#CCCCCC"> no for other stuff yes</font><font color="#E5E5E5"> no</font>

434
00:18:22,110 --> 00:18:27,779
<font color="#E5E5E5">and so on and I'm now going</font><font color="#CCCCCC"> to look at a</font>

435
00:18:26,220 --> 00:18:31,020
few<font color="#E5E5E5"> of these languages basically I'm</font>

436
00:18:27,779 --> 00:18:32,640
only picking a pezzi I'm only talking

437
00:18:31,020 --> 00:18:34,379
one or<font color="#CCCCCC"> two minutes</font><font color="#E5E5E5"> about each of the</font>

438
00:18:32,640 --> 00:18:36,240
<font color="#E5E5E5">languages for students who are not here</font>

439
00:18:34,380 --> 00:18:37,860
<font color="#E5E5E5">but have already finished</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> teasers</font>

440
00:18:36,240 --> 00:18:41,460
<font color="#E5E5E5">and then we are going to have a deeper</font>

441
00:18:37,860 --> 00:18:43,229
look at go and rust<font color="#CCCCCC"> but Alan I'll start</font>

442
00:18:41,460 --> 00:18:44,909
with the the other languages where<font color="#E5E5E5"> it's</font>

443
00:18:43,230 --> 00:18:45,299
only a very<font color="#E5E5E5"> very short high-level</font>

444
00:18:44,909 --> 00:18:47,490
overview

445
00:18:45,299 --> 00:18:48,750
well first one is C sharp<font color="#CCCCCC"> which seems a</font>

446
00:18:47,490 --> 00:18:52,950
little<font color="#E5E5E5"> bit unusual but</font><font color="#CCCCCC"> we found a</font>

447
00:18:48,750 --> 00:18:54,860
<font color="#E5E5E5">student for that so why not</font><font color="#CCCCCC"> and no we</font>

448
00:18:52,950 --> 00:18:57,750
didn't develop<font color="#E5E5E5"> a driver for Windows</font>

449
00:18:54,860 --> 00:19:00,750
Microsoft<font color="#CCCCCC"> coatl are available on Linux</font>

450
00:18:57,750 --> 00:19:02,490
<font color="#E5E5E5">on works really well</font><font color="#CCCCCC"> for those</font><font color="#E5E5E5"> who</font><font color="#CCCCCC"> don't</font>

451
00:19:00,750 --> 00:19:04,770
know<font color="#E5E5E5"> c-sharp c-sharp is a just in time</font>

452
00:19:02,490 --> 00:19:08,260
compiler<font color="#CCCCCC"> garbage</font><font color="#E5E5E5"> collected memory safe</font>

453
00:19:04,770 --> 00:19:10,570
<font color="#E5E5E5">language and it has a relatively obscure</font>

454
00:19:08,260 --> 00:19:12,760
<font color="#CCCCCC">rarely used</font><font color="#E5E5E5"> unsafe mode and unsafe mode</font>

455
00:19:10,570 --> 00:19:14,830
features full support for<font color="#CCCCCC"> point us</font><font color="#E5E5E5"> so</font>

456
00:19:12,760 --> 00:19:16,570
you can<font color="#CCCCCC"> basically write</font><font color="#E5E5E5"> code that</font><font color="#CCCCCC"> looks</font>

457
00:19:14,830 --> 00:19:18,550
<font color="#E5E5E5">like</font><font color="#CCCCCC"> C you just have to compile gift</font>

458
00:19:16,570 --> 00:19:22,540
<font color="#CCCCCC">compile</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> special flag to tell it</font><font color="#E5E5E5"> hey</font>

459
00:19:18,550 --> 00:19:24,879
I'm going<font color="#E5E5E5"> to use unsafe stuff then how</font>

460
00:19:22,540 --> 00:19:27,280
can<font color="#CCCCCC"> we</font><font color="#E5E5E5"> access external memory or fun</font>

461
00:19:24,880 --> 00:19:29,410
memory<font color="#CCCCCC"> there's for example</font><font color="#E5E5E5"> a few</font><font color="#CCCCCC"> Knights</font>

462
00:19:27,280 --> 00:19:31,030
<font color="#CCCCCC">rappers in and c-sharp is clean walk or</font>

463
00:19:29,410 --> 00:19:32,890
the unmanaged memory stream and so on

464
00:19:31,030 --> 00:19:34,690
<font color="#E5E5E5">but that turned out to be slow too slow</font>

465
00:19:32,890 --> 00:19:36,400
<font color="#CCCCCC">for our</font><font color="#E5E5E5"> implementation so we</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> that</font>

466
00:19:34,690 --> 00:19:38,680
unsafe mode which<font color="#CCCCCC"> basically looks</font><font color="#E5E5E5"> like</font>

467
00:19:36,400 --> 00:19:40,870
<font color="#E5E5E5">this</font><font color="#CCCCCC"> you see the unsafe</font><font color="#E5E5E5"> keyword here and</font>

468
00:19:38,680 --> 00:19:43,090
the other stuff it just<font color="#CCCCCC"> looked like fee</font>

469
00:19:40,870 --> 00:19:46,120
and it also feels like<font color="#CCCCCC"> fee when</font><font color="#E5E5E5"> you are</font>

470
00:19:43,090 --> 00:19:48,550
<font color="#E5E5E5">writing it so it's a really</font><font color="#CCCCCC"> nice</font>

471
00:19:46,120 --> 00:19:50,590
<font color="#CCCCCC">language to add</font><font color="#E5E5E5"> drivers and again the</font>

472
00:19:48,550 --> 00:19:52,780
unsafe code is contained<font color="#CCCCCC"> to a few very</font>

473
00:19:50,590 --> 00:19:54,699
<font color="#CCCCCC">known places</font><font color="#E5E5E5"> that can then be audited</font>

474
00:19:52,780 --> 00:19:56,290
<font color="#E5E5E5">compared to a</font><font color="#CCCCCC"> CD driver where</font><font color="#E5E5E5"> the unsafe</font>

475
00:19:54,700 --> 00:19:57,700
coders all over your code<font color="#E5E5E5"> base and you</font>

476
00:19:56,290 --> 00:19:59,170
don't know where the<font color="#CCCCCC"> buckets here we</font>

477
00:19:57,700 --> 00:20:00,820
know if there's a<font color="#CCCCCC"> buckets probably in</font>

478
00:19:59,170 --> 00:20:03,270
there that you have<font color="#CCCCCC"> while not checking</font>

479
00:20:00,820 --> 00:20:05,980
the<font color="#E5E5E5"> buff</font><font color="#CCCCCC"> size</font><font color="#E5E5E5"> properly or something and</font>

480
00:20:03,270 --> 00:20:08,760
<font color="#CCCCCC">okay that's all it for c-sharp another</font>

481
00:20:05,980 --> 00:20:11,230
unusual<font color="#CCCCCC"> language for drivers is</font><font color="#E5E5E5"> Swift</font>

482
00:20:08,760 --> 00:20:12,820
<font color="#E5E5E5">also front of students</font><font color="#CCCCCC"> mention</font><font color="#E5E5E5"> what kind</font>

483
00:20:11,230 --> 00:20:14,230
<font color="#CCCCCC">of</font><font color="#E5E5E5"> do it in Swift</font><font color="#CCCCCC"> nose like or didn't</font>

484
00:20:12,820 --> 00:20:18,370
even<font color="#CCCCCC"> think of</font><font color="#E5E5E5"> Swift sounds like a good</font>

485
00:20:14,230 --> 00:20:20,470
idea<font color="#CCCCCC"> yeah so</font><font color="#E5E5E5"> no we didn't develop a Mac</font>

486
00:20:18,370 --> 00:20:22,870
<font color="#CCCCCC">OS or iOS</font><font color="#E5E5E5"> driver sisters also available</font>

487
00:20:20,470 --> 00:20:24,490
on the notes<font color="#E5E5E5"> Swift is a compiled</font>

488
00:20:22,870 --> 00:20:26,469
language<font color="#CCCCCC"> that's compiled by a LLVM</font>

489
00:20:24,490 --> 00:20:28,000
memory management is<font color="#E5E5E5"> done by a reference</font>

490
00:20:26,470 --> 00:20:31,930
counting<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> no garbage collector</font>

491
00:20:28,000 --> 00:20:33,310
<font color="#E5E5E5">and it's mostly memory safe</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> again</font>

492
00:20:31,930 --> 00:20:35,770
have to use some<font color="#E5E5E5"> kind of pointers</font>

493
00:20:33,310 --> 00:20:38,139
there's unsafe<font color="#CCCCCC"> path appointed as</font><font color="#E5E5E5"> also</font>

494
00:20:35,770 --> 00:20:39,850
unsafe<font color="#CCCCCC"> or pointer and more classes and</font>

495
00:20:38,140 --> 00:20:42,370
we are using<font color="#E5E5E5"> these</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> to make</font>

496
00:20:39,850 --> 00:20:45,219
packets that<font color="#CCCCCC"> are stored in</font><font color="#E5E5E5"> DD maybethis</font>

497
00:20:42,370 --> 00:20:47,050
available through the application using

498
00:20:45,220 --> 00:20:50,290
the driver<font color="#E5E5E5"> and for example here's a</font>

499
00:20:47,050 --> 00:20:52,450
property<font color="#E5E5E5"> that</font><font color="#CCCCCC"> wraps some memory in a</font>

500
00:20:50,290 --> 00:20:54,100
unsafe buffer pointer weapon and the

501
00:20:52,450 --> 00:20:56,830
unsafe buffer<font color="#CCCCCC"> pointer vapor forces you</font>

502
00:20:54,100 --> 00:20:59,860
to specify<font color="#CCCCCC"> how big the buffer is and</font>

503
00:20:56,830 --> 00:21:03,070
then it does the<font color="#E5E5E5"> bounce check for you</font>

504
00:20:59,860 --> 00:21:04,810
when running<font color="#E5E5E5"> in debug mode then</font>

505
00:21:03,070 --> 00:21:07,300
pointers<font color="#E5E5E5"> are kind of a little bit</font><font color="#CCCCCC"> more</font>

506
00:21:04,810 --> 00:21:09,280
verbose compared to C sharp<font color="#CCCCCC"> but</font>

507
00:21:07,300 --> 00:21:11,860
<font color="#E5E5E5">basically you can</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> them like like</font>

508
00:21:09,280 --> 00:21:13,480
pointers and operator overloading<font color="#CCCCCC"> here</font>

509
00:21:11,860 --> 00:21:16,090
can help for some of the other managed

510
00:21:13,480 --> 00:21:18,040
<font color="#CCCCCC">buffer pointers row buffer pointers</font>

511
00:21:16,090 --> 00:21:20,199
there is<font color="#E5E5E5"> already in overloaded operator</font>

512
00:21:18,040 --> 00:21:22,240
so it looks like<font color="#E5E5E5"> an array access but</font>

513
00:21:20,200 --> 00:21:23,950
yeah<font color="#E5E5E5"> totally</font>

514
00:21:22,240 --> 00:21:27,309
possible to do that<font color="#E5E5E5"> and</font><font color="#CCCCCC"> surfed</font><font color="#E5E5E5"> even if</font>

515
00:21:23,950 --> 00:21:29,860
you are writing a<font color="#E5E5E5"> driver instead of a UI</font>

516
00:21:27,309 --> 00:21:32,678
application now for the fans of

517
00:21:29,860 --> 00:21:34,659
functional programming<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> a fully</font>

518
00:21:32,679 --> 00:21:37,000
working<font color="#CCCCCC"> implementation in Oh camel</font><font color="#E5E5E5"> o</font>

519
00:21:34,660 --> 00:21:38,830
camel is a compiled language that has

520
00:21:37,000 --> 00:21:41,020
garbage collection for memory management

521
00:21:38,830 --> 00:21:42,370
it's also<font color="#E5E5E5"> memory safe and it's the first</font>

522
00:21:41,020 --> 00:21:45,850
functional<font color="#E5E5E5"> language we are going to you</font>

523
00:21:42,370 --> 00:21:48,010
look at and one nice quick<font color="#E5E5E5"> feature of</font><font color="#CCCCCC"> a</font>

524
00:21:45,850 --> 00:21:49,570
camel is<font color="#CCCCCC"> the C struct</font><font color="#E5E5E5"> library the C</font>

525
00:21:48,010 --> 00:21:52,240
stock<font color="#CCCCCC"> library allows you to</font><font color="#E5E5E5"> specify</font>

526
00:21:49,570 --> 00:21:54,669
memory layout like<font color="#CCCCCC"> this kind</font><font color="#E5E5E5"> of looks</font>

527
00:21:52,240 --> 00:21:56,950
like a well C struct and then<font color="#E5E5E5"> it</font>

528
00:21:54,670 --> 00:22:00,130
<font color="#CCCCCC">generates from that code for</font><font color="#E5E5E5"> accesses</font>

529
00:21:56,950 --> 00:22:02,110
and this is really nice compared to<font color="#E5E5E5"> the</font>

530
00:22:00,130 --> 00:22:03,910
<font color="#E5E5E5">Swift example where you would have to</font>

531
00:22:02,110 --> 00:22:05,678
<font color="#E5E5E5">hard code to offset somewhere and it's</font>

532
00:22:03,910 --> 00:22:08,790
much nicer this kind<font color="#E5E5E5"> of code generator</font>

533
00:22:05,679 --> 00:22:11,200
here which does<font color="#CCCCCC"> two I</font><font color="#E5E5E5"> think for you and</font>

534
00:22:08,790 --> 00:22:14,110
also can do automatic<font color="#E5E5E5"> engine</font><font color="#CCCCCC"> of swapping</font>

535
00:22:11,200 --> 00:22:15,520
<font color="#E5E5E5">and so on and then decode and</font><font color="#CCCCCC"> oh camel</font>

536
00:22:14,110 --> 00:22:17,050
now looks quite<font color="#CCCCCC"> different compared to</font>

537
00:22:15,520 --> 00:22:19,870
<font color="#E5E5E5">what</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> might expect</font><font color="#CCCCCC"> for a driver code</font>

538
00:22:17,050 --> 00:22:21,580
and this<font color="#E5E5E5"> is for example</font><font color="#CCCCCC"> just their</font>

539
00:22:19,870 --> 00:22:23,530
function<font color="#E5E5E5"> that counts how</font><font color="#CCCCCC"> many packets</font>

540
00:22:21,580 --> 00:22:25,600
have<font color="#CCCCCC"> been received and</font><font color="#E5E5E5"> they were</font>

541
00:22:23,530 --> 00:22:28,899
<font color="#CCCCCC">suffering by checking the Flex and we</font>

542
00:22:25,600 --> 00:22:33,490
can see here<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> are using the get</font>

543
00:22:28,900 --> 00:22:35,320
at xwb status which is the<font color="#CCCCCC"> data</font><font color="#E5E5E5"> function</font>

544
00:22:33,490 --> 00:22:37,210
from the previous struct declaration we

545
00:22:35,320 --> 00:22:38,409
are checking a flag in that<font color="#E5E5E5"> and then we</font>

546
00:22:37,210 --> 00:22:40,059
are<font color="#CCCCCC"> just counting the</font><font color="#E5E5E5"> Pakistan and we</font>

547
00:22:38,410 --> 00:22:41,980
know<font color="#CCCCCC"> okay we have</font><font color="#E5E5E5"> received</font><font color="#CCCCCC"> ten packets</font>

548
00:22:40,059 --> 00:22:43,510
<font color="#E5E5E5">or whatever since the last call to that</font>

549
00:22:41,980 --> 00:22:46,059
<font color="#E5E5E5">function</font><font color="#CCCCCC"> and we can</font><font color="#E5E5E5"> now pass them on to</font>

550
00:22:43,510 --> 00:22:48,280
<font color="#E5E5E5">the user</font><font color="#CCCCCC"> of our driver</font><font color="#E5E5E5"> I'm more</font>

551
00:22:46,059 --> 00:22:50,830
functional programming we also have an

552
00:22:48,280 --> 00:22:53,410
<font color="#CCCCCC">implementation in Haskell</font><font color="#E5E5E5"> Haskell again</font>

553
00:22:50,830 --> 00:22:55,600
compiled language memory<font color="#E5E5E5"> management by a</font>

554
00:22:53,410 --> 00:22:58,840
<font color="#E5E5E5">garbage collection</font><font color="#CCCCCC"> memory safe and also</font>

555
00:22:55,600 --> 00:23:00,399
<font color="#E5E5E5">functional</font><font color="#CCCCCC"> unites property of few nice</font>

556
00:22:58,840 --> 00:23:03,100
features of<font color="#E5E5E5"> Haskell that you might not</font>

557
00:23:00,400 --> 00:23:05,650
know about<font color="#E5E5E5"> is the system POSIX memory</font>

558
00:23:03,100 --> 00:23:09,100
package has a lot<font color="#E5E5E5"> of lot of really</font>

559
00:23:05,650 --> 00:23:10,570
<font color="#E5E5E5">helpful functions this is compared to</font><font color="#CCCCCC"> -</font>

560
00:23:09,100 --> 00:23:12,219
<font color="#CCCCCC">Oh kennel that we had to add some C code</font>

561
00:23:10,570 --> 00:23:15,220
to<font color="#E5E5E5"> get a map and M lock was the right</font>

562
00:23:12,220 --> 00:23:17,080
flex working and<font color="#CCCCCC"> mirror was everything</font>

563
00:23:15,220 --> 00:23:19,540
available<font color="#E5E5E5"> and the foreign package has</font>

564
00:23:17,080 --> 00:23:21,550
nice functions like<font color="#CCCCCC"> pig bite</font>

565
00:23:19,540 --> 00:23:24,879
poke<font color="#E5E5E5"> bite and so on where you can just</font>

566
00:23:21,550 --> 00:23:27,040
do a memory<font color="#E5E5E5"> access</font><font color="#CCCCCC"> and another thing we</font>

567
00:23:24,880 --> 00:23:29,470
<font color="#E5E5E5">are using and has quite a lot</font><font color="#CCCCCC"> rd some</font>

568
00:23:27,040 --> 00:23:31,240
<font color="#E5E5E5">types because a lot</font><font color="#CCCCCC"> of things and</font><font color="#E5E5E5"> the</font>

569
00:23:29,470 --> 00:23:33,700
drivers are where you have<font color="#E5E5E5"> inferior</font>

570
00:23:31,240 --> 00:23:35,890
<font color="#E5E5E5">Union</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> basically this part where you</font>

571
00:23:33,700 --> 00:23:36,280
write some data and<font color="#CCCCCC"> add in a buffer in</font>

572
00:23:35,890 --> 00:23:39,700
some

573
00:23:36,280 --> 00:23:42,070
the device reads this data and like for

574
00:23:39,700 --> 00:23:43,600
a<font color="#CCCCCC"> transmit packet descriptor we have to</font>

575
00:23:42,070 --> 00:23:45,970
<font color="#E5E5E5">transmit</font><font color="#CCCCCC"> read</font><font color="#E5E5E5"> format which looks one way</font>

576
00:23:43,600 --> 00:23:48,699
<font color="#E5E5E5">once the</font><font color="#CCCCCC"> device has transmitted a packet</font>

577
00:23:45,970 --> 00:23:50,710
it goes back to the same<font color="#E5E5E5"> memory location</font>

578
00:23:48,700 --> 00:23:52,060
<font color="#E5E5E5">and overwrites a different thing so we</font>

579
00:23:50,710 --> 00:23:53,890
then need to<font color="#E5E5E5"> read the same data</font>

580
00:23:52,060 --> 00:23:57,070
something<font color="#E5E5E5"> else and it's basically a</font>

581
00:23:53,890 --> 00:23:58,660
fancy<font color="#E5E5E5"> C Union and SS little bit nicer</font><font color="#CCCCCC"> to</font>

582
00:23:57,070 --> 00:24:03,310
work<font color="#E5E5E5"> less than there than the C unions</font>

583
00:23:58,660 --> 00:24:06,400
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> these other languages of students who</font>

584
00:24:03,310 --> 00:24:08,530
are<font color="#E5E5E5"> not here this</font><font color="#CCCCCC"> year and</font><font color="#E5E5E5"> you can check</font>

585
00:24:06,400 --> 00:24:10,870
<font color="#E5E5E5">out all the implementations on on github</font>

586
00:24:08,530 --> 00:24:13,870
<font color="#E5E5E5">yes there'll be a QR</font><font color="#CCCCCC"> code to scan</font><font color="#E5E5E5"> on the</font>

587
00:24:10,870 --> 00:24:16,389
last slide<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I'm now going</font><font color="#CCCCCC"> to hand</font>

588
00:24:13,870 --> 00:24:19,209
back to<font color="#CCCCCC"> Sebastian who is going to</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> a</font>

589
00:24:16,390 --> 00:24:20,050
deep dive<font color="#E5E5E5"> into golf</font><font color="#CCCCCC"> yeah thank you very</font>

590
00:24:19,210 --> 00:24:23,410
much

591
00:24:20,050 --> 00:24:24,340
so know you've seen<font color="#E5E5E5"> few languages</font><font color="#CCCCCC"> next</font>

592
00:24:23,410 --> 00:24:27,820
up<font color="#E5E5E5"> let's go</font>

593
00:24:24,340 --> 00:24:29,530
what is Go Go as compiled programming

594
00:24:27,820 --> 00:24:32,020
language<font color="#CCCCCC"> it's been developed by</font><font color="#E5E5E5"> Google</font>

595
00:24:29,530 --> 00:24:34,389
it's generally as a<font color="#CCCCCC"> general-purpose</font>

596
00:24:32,020 --> 00:24:36,220
<font color="#E5E5E5">language but as it's been developed by</font>

597
00:24:34,390 --> 00:24:38,080
Google it's<font color="#E5E5E5"> mainly designed for</font>

598
00:24:36,220 --> 00:24:40,150
distributed<font color="#CCCCCC"> systems because that's what</font>

599
00:24:38,080 --> 00:24:42,129
Google<font color="#E5E5E5"> does distribution systems</font><font color="#CCCCCC"> a</font>

600
00:24:40,150 --> 00:24:46,840
driver is<font color="#E5E5E5"> not a distributed system so</font>

601
00:24:42,130 --> 00:24:48,850
why should<font color="#CCCCCC"> we even</font><font color="#E5E5E5"> use go well go</font><font color="#CCCCCC"> thus</font>

602
00:24:46,840 --> 00:24:52,060
offers a few things that are<font color="#CCCCCC"> quite</font><font color="#E5E5E5"> nice</font>

603
00:24:48,850 --> 00:24:54,429
it has<font color="#CCCCCC"> a</font><font color="#E5E5E5"> runtime that has garbage</font>

604
00:24:52,060 --> 00:24:57,940
collection and also<font color="#E5E5E5"> enforces memory</font>

605
00:24:54,430 --> 00:24:59,890
<font color="#E5E5E5">inside safety also</font><font color="#CCCCCC"> it has very large</font>

606
00:24:57,940 --> 00:25:04,440
<font color="#CCCCCC">center</font><font color="#E5E5E5"> libraries so we don't need to</font><font color="#CCCCCC"> use</font>

607
00:24:59,890 --> 00:25:07,570
<font color="#E5E5E5">any other</font><font color="#CCCCCC"> code except</font><font color="#E5E5E5"> the library code</font>

608
00:25:04,440 --> 00:25:10,900
so how do we program drivers and go

609
00:25:07,570 --> 00:25:16,120
actually<font color="#CCCCCC"> in most cases it's just like</font>

610
00:25:10,900 --> 00:25:17,950
<font color="#CCCCCC">see</font><font color="#E5E5E5"> now a few main differences</font><font color="#CCCCCC"> though on</font>

611
00:25:16,120 --> 00:25:20,080
one<font color="#CCCCCC"> hand we don't</font><font color="#E5E5E5"> have pointer</font>

612
00:25:17,950 --> 00:25:23,140
arithmetic<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> pointers but we don't</font>

613
00:25:20,080 --> 00:25:26,199
have arithmetic and this is what we need

614
00:25:23,140 --> 00:25:27,970
for<font color="#E5E5E5"> managing our DMA memory</font><font color="#CCCCCC"> and the</font>

615
00:25:26,200 --> 00:25:30,880
second point<font color="#E5E5E5"> is</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> don't have a wallet</font>

616
00:25:27,970 --> 00:25:34,180
I'll for the memory<font color="#CCCCCC"> barriers for</font>

617
00:25:30,880 --> 00:25:36,490
register<font color="#CCCCCC"> axles mainly so what do</font><font color="#E5E5E5"> we do</font>

618
00:25:34,180 --> 00:25:39,430
instead to compensate for that first<font color="#E5E5E5"> of</font>

619
00:25:36,490 --> 00:25:43,120
all we can manage the DMA memory by a

620
00:25:39,430 --> 00:25:44,950
slices that's<font color="#E5E5E5"> pretty easy and the second</font>

621
00:25:43,120 --> 00:25:47,860
thing is we can<font color="#CCCCCC"> use unsafe pointers</font><font color="#E5E5E5"> for</font>

622
00:25:44,950 --> 00:25:49,870
pretty<font color="#E5E5E5"> much all the rest unsafe pointers</font>

623
00:25:47,860 --> 00:25:53,110
are arbitrary pointers

624
00:25:49,870 --> 00:25:55,510
so that's good<font color="#E5E5E5"> but they do circumvent</font>

625
00:25:53,110 --> 00:25:56,279
the<font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> so we have to be careful</font>

626
00:25:55,510 --> 00:25:59,320
with them

627
00:25:56,279 --> 00:26:01,000
and this<font color="#E5E5E5"> is what we use for mainly</font>

628
00:25:59,320 --> 00:26:04,029
physical address calculation and

629
00:26:01,000 --> 00:26:07,450
register access<font color="#CCCCCC"> and there is also a rule</font>

630
00:26:04,029 --> 00:26:10,539
set for unsafe pointers so<font color="#E5E5E5"> they are</font>

631
00:26:07,450 --> 00:26:14,049
still<font color="#E5E5E5"> valid</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> of course we can we</font>

632
00:26:10,539 --> 00:26:17,289
follow this rule set<font color="#E5E5E5"> so to create</font>

633
00:26:14,049 --> 00:26:19,240
examples<font color="#E5E5E5"> first of all man pools</font><font color="#CCCCCC"> here you</font>

634
00:26:17,289 --> 00:26:22,090
can kind of see how we manage the<font color="#E5E5E5"> DMA</font>

635
00:26:19,240 --> 00:26:24,309
<font color="#E5E5E5">memories</font><font color="#CCCCCC"> first of</font><font color="#E5E5E5"> all we allocate</font><font color="#CCCCCC"> the Z</font>

636
00:26:22,090 --> 00:26:27,340
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> initialized</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> mempool</font><font color="#E5E5E5"> and</font>

637
00:26:24,309 --> 00:26:31,418
then this man<font color="#CCCCCC"> fluid path this is</font>

638
00:26:27,340 --> 00:26:34,330
<font color="#E5E5E5">actually the whole memory mapped area</font>

639
00:26:31,419 --> 00:26:37,320
<font color="#E5E5E5">and we can</font><font color="#CCCCCC"> just stop this into packet</font>

640
00:26:34,330 --> 00:26:39,760
buffers<font color="#CCCCCC"> so you see</font><font color="#E5E5E5"> that's pretty easy</font>

641
00:26:37,320 --> 00:26:42,010
next thing is<font color="#E5E5E5"> for physical</font><font color="#CCCCCC"> address</font>

642
00:26:39,760 --> 00:26:44,760
calculation<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> where we need our</font>

643
00:26:42,010 --> 00:26:47,200
<font color="#E5E5E5">unsafe pointers for the first time</font>

644
00:26:44,760 --> 00:26:48,970
because<font color="#E5E5E5"> we have to translate our virtual</font>

645
00:26:47,200 --> 00:26:50,980
addresses<font color="#E5E5E5"> into physical addresses that</font>

646
00:26:48,970 --> 00:26:54,220
the network card can then use to

647
00:26:50,980 --> 00:26:58,899
<font color="#E5E5E5">actually send and receive packets and</font>

648
00:26:54,220 --> 00:27:02,559
for this because<font color="#E5E5E5"> the runtime checks many</font>

649
00:26:58,899 --> 00:27:05,799
things and<font color="#CCCCCC"> and you have</font><font color="#E5E5E5"> to explicitly</font>

650
00:27:02,559 --> 00:27:10,240
convert types<font color="#CCCCCC"> you first</font><font color="#E5E5E5"> have to convert</font>

651
00:27:05,799 --> 00:27:11,799
your pointer to an unsafe pointer and

652
00:27:10,240 --> 00:27:17,529
then you can convert<font color="#E5E5E5"> it to an integer</font>

653
00:27:11,799 --> 00:27:20,470
<font color="#E5E5E5">type the UN pointer and yeah it's how</font>

654
00:27:17,529 --> 00:27:25,570
<font color="#CCCCCC">you do this</font><font color="#E5E5E5"> and go also no wallet are no</font>

655
00:27:20,470 --> 00:27:27,520
problem<font color="#CCCCCC"> I said we need a volatile as we</font>

656
00:27:25,570 --> 00:27:30,700
share registers with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> network card</font><font color="#CCCCCC"> and</font>

657
00:27:27,520 --> 00:27:33,629
we need and is some kind of compiler

658
00:27:30,700 --> 00:27:36,909
memory barrier to prevent reordering I

659
00:27:33,630 --> 00:27:39,549
<font color="#CCCCCC">notice</font><font color="#E5E5E5"> a volatile and go but the atomic</font>

660
00:27:36,909 --> 00:27:41,590
functions do prevent reordering among

661
00:27:39,549 --> 00:27:45,580
them<font color="#E5E5E5"> amongst other</font><font color="#CCCCCC"> things they provide</font>

662
00:27:41,590 --> 00:27:47,830
strict guarantees then<font color="#E5E5E5"> volatile but yeah</font>

663
00:27:45,580 --> 00:27:50,110
it doesn't<font color="#E5E5E5"> really cost us any</font>

664
00:27:47,830 --> 00:27:54,309
performance here so we're<font color="#CCCCCC"> just</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

665
00:27:50,110 --> 00:27:58,040
<font color="#E5E5E5">use that</font><font color="#CCCCCC"> and yeah so we can use Tomic</font>

666
00:27:54,309 --> 00:28:01,040
store and load<font color="#E5E5E5"> for integer types too</font>

667
00:27:58,040 --> 00:28:05,030
<font color="#E5E5E5">then get all memory barriers so as a</font>

668
00:28:01,040 --> 00:28:07,430
conclusion<font color="#CCCCCC"> I thought go was actually</font>

669
00:28:05,030 --> 00:28:09,620
quite nice to work with<font color="#CCCCCC"> safety</font>

670
00:28:07,430 --> 00:28:12,590
<font color="#CCCCCC">properties have been proven Kotori thou</font>

671
00:28:09,620 --> 00:28:18,439
<font color="#E5E5E5">has posted</font><font color="#CCCCCC"> before wrote a</font><font color="#E5E5E5"> kernel</font><font color="#CCCCCC"> lingo</font>

672
00:28:12,590 --> 00:28:20,929
<font color="#CCCCCC">and</font><font color="#E5E5E5"> yeah so it is safe it gets you some</font>

673
00:28:18,440 --> 00:28:23,240
safety<font color="#E5E5E5"> guarantees and the</font><font color="#CCCCCC"> other thing</font>

674
00:28:20,930 --> 00:28:26,860
it's kind of a personal<font color="#CCCCCC"> opinion but I</font>

675
00:28:23,240 --> 00:28:29,630
think<font color="#CCCCCC"> it</font><font color="#E5E5E5"> looks like C code</font><font color="#CCCCCC"> and beautiful</font>

676
00:28:26,860 --> 00:28:32,270
<font color="#CCCCCC">but it also has downsides in the best</font>

677
00:28:29,630 --> 00:28:35,660
case<font color="#CCCCCC"> it's approximate approximately ten</font>

678
00:28:32,270 --> 00:28:38,480
percent slower than C and<font color="#CCCCCC"> have you</font>

679
00:28:35,660 --> 00:28:42,530
<font color="#E5E5E5">getting more optimal cases it's even</font>

680
00:28:38,480 --> 00:28:43,610
<font color="#CCCCCC">worse compared to C but yeah we have to</font>

681
00:28:42,530 --> 00:28:46,310
live with<font color="#CCCCCC"> that</font>

682
00:28:43,610 --> 00:28:50,360
also descriptor<font color="#CCCCCC"> access can be a bit ugly</font>

683
00:28:46,310 --> 00:28:52,700
but well as long<font color="#E5E5E5"> as it works so next I'm</font>

684
00:28:50,360 --> 00:28:55,280
going<font color="#E5E5E5"> to end over to Simon who did this</font>

685
00:28:52,700 --> 00:28:58,040
<font color="#CCCCCC">in rust</font><font color="#E5E5E5"> Thank You Sebastian</font><font color="#CCCCCC"> so let's</font>

686
00:28:55,280 --> 00:28:59,780
talk about rust what is rust well the

687
00:28:58,040 --> 00:29:01,370
rust website says it is a safe

688
00:28:59,780 --> 00:29:03,710
concurrent and practical systems

689
00:29:01,370 --> 00:29:05,209
<font color="#CCCCCC">language sounds great that's exactly</font>

690
00:29:03,710 --> 00:29:08,270
<font color="#CCCCCC">what we need to write or use this base</font>

691
00:29:05,210 --> 00:29:09,920
network driver<font color="#E5E5E5"> so is there anything else</font>

692
00:29:08,270 --> 00:29:12,320
we<font color="#E5E5E5"> should know well yes</font>

693
00:29:09,920 --> 00:29:14,960
rust has no garbage collector so we have

694
00:29:12,320 --> 00:29:17,389
less overhead<font color="#E5E5E5"> for memory handling it has</font>

695
00:29:14,960 --> 00:29:22,190
<font color="#CCCCCC">a unique ownership system and some rules</font>

696
00:29:17,390 --> 00:29:24,740
for moving<font color="#E5E5E5"> and borrowing values so with</font>

697
00:29:22,190 --> 00:29:27,560
these rules we can clump<font color="#CCCCCC"> accomplished</font>

698
00:29:24,740 --> 00:29:29,420
<font color="#CCCCCC">rust goal</font><font color="#E5E5E5"> of memory safety</font><font color="#CCCCCC"> and we have</font>

699
00:29:27,560 --> 00:29:32,330
unsaved like another<font color="#E5E5E5"> link which</font><font color="#CCCCCC"> is</font>

700
00:29:29,420 --> 00:29:35,300
presented before<font color="#CCCCCC"> what is the</font>

701
00:29:32,330 --> 00:29:38,629
<font color="#E5E5E5">ownership system well it is the core</font>

702
00:29:35,300 --> 00:29:41,840
feature<font color="#E5E5E5"> of rust</font><font color="#CCCCCC"> actually it's it's</font>

703
00:29:38,630 --> 00:29:44,810
<font color="#E5E5E5">basically just a set of three simple</font>

704
00:29:41,840 --> 00:29:46,220
<font color="#E5E5E5">rules rule number one each value has a</font>

705
00:29:44,810 --> 00:29:48,080
<font color="#E5E5E5">variable that is its owner</font>

706
00:29:46,220 --> 00:29:50,180
rule number two<font color="#CCCCCC"> that</font><font color="#E5E5E5"> can only be one</font>

707
00:29:48,080 --> 00:29:52,399
<font color="#CCCCCC">owner at a time and rule number three</font>

708
00:29:50,180 --> 00:29:55,970
when this owner goes out of scope<font color="#E5E5E5"> the</font>

709
00:29:52,400 --> 00:29:59,810
value is freed<font color="#CCCCCC"> these three rules</font>

710
00:29:55,970 --> 00:30:02,000
combined with<font color="#E5E5E5"> rules for borrowing values</font>

711
00:29:59,810 --> 00:30:05,750
keep<font color="#E5E5E5"> us safe from memory port bucks like</font>

712
00:30:02,000 --> 00:30:07,580
<font color="#E5E5E5">double</font><font color="#CCCCCC"> fries and as they</font><font color="#E5E5E5"> are enforced at</font>

713
00:30:05,750 --> 00:30:10,340
compile time<font color="#E5E5E5"> we don't have</font><font color="#CCCCCC"> any</font>

714
00:30:07,580 --> 00:30:11,720
<font color="#E5E5E5">performance penalties at runtime so</font><font color="#CCCCCC"> our</font>

715
00:30:10,340 --> 00:30:14,240
programs are

716
00:30:11,720 --> 00:30:18,350
<font color="#E5E5E5">to see programs but we have the great</font>

717
00:30:14,240 --> 00:30:21,559
<font color="#E5E5E5">advantage of memory safety</font><font color="#CCCCCC"> what does it</font>

718
00:30:18,350 --> 00:30:23,330
look<font color="#CCCCCC"> like in</font><font color="#E5E5E5"> our implementation</font><font color="#CCCCCC"> well we</font>

719
00:30:21,559 --> 00:30:26,990
have packet struct<font color="#CCCCCC"> for</font><font color="#E5E5E5"> network packets</font>

720
00:30:23,330 --> 00:30:28,939
that<font color="#CCCCCC"> on</font><font color="#E5E5E5"> DMA memory and these packets are</font>

721
00:30:26,990 --> 00:30:31,520
passed between the users of<font color="#CCCCCC"> our driver</font>

722
00:30:28,940 --> 00:30:34,520
in our driver<font color="#E5E5E5"> and with them a long</font>

723
00:30:31,520 --> 00:30:37,100
ownership is passed as well<font color="#CCCCCC"> and that's</font>

724
00:30:34,520 --> 00:30:39,590
pretty cool<font color="#CCCCCC"> because</font><font color="#E5E5E5"> when the packet is</font>

725
00:30:37,100 --> 00:30:41,719
passed to the<font color="#E5E5E5"> user only the user can</font>

726
00:30:39,590 --> 00:30:43,668
<font color="#CCCCCC">modify the packet and the</font><font color="#E5E5E5"> packet content</font>

727
00:30:41,720 --> 00:30:46,549
and when it's passed back to<font color="#E5E5E5"> the driver</font>

728
00:30:43,669 --> 00:30:51,980
<font color="#E5E5E5">only the driver can modify it so we have</font>

729
00:30:46,549 --> 00:30:55,460
basically<font color="#CCCCCC"> safe packets handling</font><font color="#E5E5E5"> unlike</font>

730
00:30:51,980 --> 00:30:57,679
in other languages and at the<font color="#E5E5E5"> bottom of</font>

731
00:30:55,460 --> 00:30:59,360
this<font color="#CCCCCC"> slide you can see how you would use</font>

732
00:30:57,679 --> 00:31:02,390
the driver based on our drivers

733
00:30:59,360 --> 00:31:05,418
interfaces you can<font color="#CCCCCC"> see how to receive</font>

734
00:31:02,390 --> 00:31:08,179
modify<font color="#E5E5E5"> and send packets and</font><font color="#CCCCCC"> yeah there's</font>

735
00:31:05,419 --> 00:31:09,530
no way to screw up<font color="#E5E5E5"> so for example you</font>

736
00:31:08,179 --> 00:31:11,450
kind of forget<font color="#CCCCCC"> two free packets because</font>

737
00:31:09,530 --> 00:31:14,299
packets are free to automatically when

738
00:31:11,450 --> 00:31:17,720
they go out<font color="#CCCCCC"> of scope and I'll</font><font color="#E5E5E5"> return to</font>

739
00:31:14,299 --> 00:31:19,908
the memory pool of our driver<font color="#E5E5E5"> so yeah</font>

740
00:31:17,720 --> 00:31:22,130
this<font color="#CCCCCC"> is safe code and</font><font color="#E5E5E5"> and there's</font>

741
00:31:19,909 --> 00:31:24,080
nothing<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do wrong here but</font>

742
00:31:22,130 --> 00:31:25,250
unfortunately<font color="#E5E5E5"> we also have unsafe code</font>

743
00:31:24,080 --> 00:31:28,610
<font color="#E5E5E5">in our and our driver</font>

744
00:31:25,250 --> 00:31:29,750
<font color="#E5E5E5">what is unsafe code well not everything</font>

745
00:31:28,610 --> 00:31:31,699
can be<font color="#E5E5E5"> done in safe</font><font color="#CCCCCC"> trust</font>

746
00:31:29,750 --> 00:31:33,230
for example calling<font color="#E5E5E5"> foreign functions</font>

747
00:31:31,700 --> 00:31:36,080
and dereferencing<font color="#CCCCCC"> roll pointers is</font>

748
00:31:33,230 --> 00:31:39,590
unsafe<font color="#E5E5E5"> but this is nothing</font><font color="#CCCCCC"> and usually</font>

749
00:31:36,080 --> 00:31:41,928
the idea is<font color="#CCCCCC"> to reduce unsafe code to a</font>

750
00:31:39,590 --> 00:31:45,649
few<font color="#E5E5E5"> places and to some checks to make</font>

751
00:31:41,929 --> 00:31:49,370
unsafe code safe what does it<font color="#E5E5E5"> look</font><font color="#CCCCCC"> like</font>

752
00:31:45,650 --> 00:31:54,080
in<font color="#E5E5E5"> our driver well for example</font><font color="#CCCCCC"> we have</font>

753
00:31:49,370 --> 00:31:58,428
<font color="#CCCCCC">to set register mètode'</font><font color="#E5E5E5"> a method to set</font>

754
00:31:54,080 --> 00:32:01,240
the registers of our device<font color="#E5E5E5"> and we use</font>

755
00:31:58,429 --> 00:32:04,280
pointer<font color="#E5E5E5"> right volatile to write to some</font>

756
00:32:01,240 --> 00:32:06,130
register of our device and before we do

757
00:32:04,280 --> 00:32:10,520
that we<font color="#E5E5E5"> have some assertion in our code</font>

758
00:32:06,130 --> 00:32:13,549
<font color="#CCCCCC">to assert that the address we are going</font>

759
00:32:10,520 --> 00:32:17,389
to write<font color="#E5E5E5"> to is indeed inside of the map</font>

760
00:32:13,549 --> 00:32:21,320
memory region<font color="#E5E5E5"> so we have we</font><font color="#CCCCCC"> have some</font>

761
00:32:17,390 --> 00:32:23,899
great code<font color="#E5E5E5"> but is it fast well to find</font>

762
00:32:21,320 --> 00:32:25,970
that out<font color="#CCCCCC"> we</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> up a test bed to</font>

763
00:32:23,899 --> 00:32:28,729
benchmark<font color="#E5E5E5"> our drivers</font>

764
00:32:25,970 --> 00:32:31,309
we have<font color="#E5E5E5"> two servers</font><font color="#CCCCCC"> packet generator and</font>

765
00:32:28,730 --> 00:32:33,980
the device<font color="#E5E5E5"> under test they are connected</font>

766
00:32:31,309 --> 00:32:37,460
by directionally with<font color="#E5E5E5"> two</font><font color="#CCCCCC"> ten gigabit</font>

767
00:32:33,980 --> 00:32:39,650
per second connections<font color="#CCCCCC"> we use the Gungan</font>

768
00:32:37,460 --> 00:32:41,660
<font color="#CCCCCC">moonshine</font><font color="#E5E5E5"> packet generator written by</font>

769
00:32:39,650 --> 00:32:52,790
<font color="#CCCCCC">Paul because obviously it's the</font><font color="#E5E5E5"> best</font>

770
00:32:41,660 --> 00:32:56,000
packet generator<font color="#E5E5E5"> yeah and on the device</font>

771
00:32:52,790 --> 00:32:58,490
on<font color="#CCCCCC"> a test</font><font color="#E5E5E5"> we have simply</font><font color="#CCCCCC"> bidirectional</font>

772
00:32:56,000 --> 00:33:00,230
packet for water that<font color="#CCCCCC"> we implement</font><font color="#E5E5E5"> that</font>

773
00:32:58,490 --> 00:33:03,620
you implement it on<font color="#E5E5E5"> top</font><font color="#CCCCCC"> of our drivers</font>

774
00:33:00,230 --> 00:33:06,770
<font color="#E5E5E5">in all languages and yeah so let's look</font>

775
00:33:03,620 --> 00:33:08,330
at the results<font color="#E5E5E5"> of our measurements</font><font color="#CCCCCC"> so</font>

776
00:33:06,770 --> 00:33:11,030
this is a graph showing<font color="#E5E5E5"> the throughput</font>

777
00:33:08,330 --> 00:33:13,580
<font color="#E5E5E5">of our</font><font color="#CCCCCC"> for water on the x-axis</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font>

778
00:33:11,030 --> 00:33:18,049
<font color="#CCCCCC">see the</font><font color="#E5E5E5"> CPU speed on the y-axis the</font>

779
00:33:13,580 --> 00:33:19,970
<font color="#CCCCCC">packets per second we look at packets</font>

780
00:33:18,049 --> 00:33:23,870
per second<font color="#E5E5E5"> because the main overhead is</font>

781
00:33:19,970 --> 00:33:26,510
per packet not<font color="#CCCCCC"> provided and the top of</font>

782
00:33:23,870 --> 00:33:29,928
<font color="#CCCCCC">the</font><font color="#E5E5E5"> y-axis</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> 30 million packets per</font>

783
00:33:26,510 --> 00:33:34,040
second<font color="#E5E5E5"> because that's</font><font color="#CCCCCC"> about 20 gigabit</font>

784
00:33:29,929 --> 00:33:35,419
per second at minimum<font color="#CCCCCC"> sized packets you</font>

785
00:33:34,040 --> 00:33:38,330
can<font color="#CCCCCC"> see the different plots</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font>

786
00:33:35,419 --> 00:33:41,120
different languages<font color="#CCCCCC"> it's linear scaling</font>

787
00:33:38,330 --> 00:33:45,199
with the<font color="#E5E5E5"> CPU speed rust is the fastest</font>

788
00:33:41,120 --> 00:33:49,909
<font color="#E5E5E5">swifters yeah well it performs</font>

789
00:33:45,200 --> 00:33:52,370
incredibly<font color="#E5E5E5"> poor and so the thing is</font>

790
00:33:49,910 --> 00:33:54,890
<font color="#E5E5E5">usually you you don't manually change</font>

791
00:33:52,370 --> 00:33:58,580
your CPU speed so we<font color="#E5E5E5"> asked ourselves is</font>

792
00:33:54,890 --> 00:34:02,150
there anything else we<font color="#E5E5E5"> can modify</font><font color="#CCCCCC"> yes</font>

793
00:33:58,580 --> 00:34:07,040
this you can change the the batch size

794
00:34:02,150 --> 00:34:11,119
so how<font color="#CCCCCC"> many packets you send at once to</font>

795
00:34:07,040 --> 00:34:14,779
the PCI device<font color="#CCCCCC"> because that avoids some</font>

796
00:34:11,119 --> 00:34:18,250
overhead and<font color="#E5E5E5"> kernel drivers usually</font><font color="#CCCCCC"> use</font>

797
00:34:14,780 --> 00:34:21,080
a<font color="#CCCCCC"> batch size</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> 1 on transmission</font><font color="#E5E5E5"> and</font>

798
00:34:18,250 --> 00:34:23,239
higher batch sizes are one of the main

799
00:34:21,080 --> 00:34:27,020
reasons why<font color="#E5E5E5"> users</font><font color="#CCCCCC"> base drivers are</font>

800
00:34:23,239 --> 00:34:31,428
faster then<font color="#E5E5E5"> kernel drivers</font><font color="#CCCCCC"> batch size of</font>

801
00:34:27,020 --> 00:34:35,030
<font color="#E5E5E5">32 to 64 packets is a very good batch</font>

802
00:34:31,429 --> 00:34:38,770
size because higher batch sizes are bad

803
00:34:35,030 --> 00:34:42,270
<font color="#CCCCCC">because we have more l1 cache misses</font>

804
00:34:38,770 --> 00:34:46,000
and well we asked<font color="#E5E5E5"> ourselves why does</font>

805
00:34:42,270 --> 00:34:48,820
perform<font color="#E5E5E5"> that bad and Paul is going to</font>

806
00:34:46,000 --> 00:34:50,830
<font color="#CCCCCC">tell you why</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> like that</font><font color="#E5E5E5"> yeah so if</font>

807
00:34:48,820 --> 00:34:53,020
<font color="#E5E5E5">you have some program</font><font color="#CCCCCC"> that as performing</font>

808
00:34:50,830 --> 00:34:55,149
not as expected<font color="#CCCCCC"> well what do you do</font><font color="#E5E5E5"> you</font>

809
00:34:53,020 --> 00:34:56,620
run<font color="#E5E5E5"> some profiling on it and then you</font>

810
00:34:55,149 --> 00:34:58,509
get<font color="#E5E5E5"> a lot of data and then you need some</font>

811
00:34:56,620 --> 00:35:01,180
<font color="#CCCCCC">way to visualize this</font><font color="#E5E5E5"> a common way to</font>

812
00:34:58,510 --> 00:35:03,970
<font color="#E5E5E5">visualize profiling results this thing</font>

813
00:35:01,180 --> 00:35:07,000
called<font color="#E5E5E5"> flame graph basically</font><font color="#CCCCCC"> the x-axis</font>

814
00:35:03,970 --> 00:35:09,149
is<font color="#CCCCCC"> time spent</font><font color="#E5E5E5"> in a function and the y</font>

815
00:35:07,000 --> 00:35:11,200
axis is<font color="#CCCCCC"> the depth of</font><font color="#E5E5E5"> the call stack</font><font color="#CCCCCC"> and</font>

816
00:35:09,150 --> 00:35:12,520
<font color="#CCCCCC">now I don't expect you</font><font color="#E5E5E5"> to be able to</font>

817
00:35:11,200 --> 00:35:14,230
<font color="#E5E5E5">read all of this</font><font color="#CCCCCC"> these are</font><font color="#E5E5E5"> just the</font>

818
00:35:12,520 --> 00:35:16,000
function names that are<font color="#E5E5E5"> in here and if</font>

819
00:35:14,230 --> 00:35:17,710
you look<font color="#E5E5E5"> at the top most functions here</font>

820
00:35:16,000 --> 00:35:19,720
these are the<font color="#CCCCCC"> leaf functions by the time</font>

821
00:35:17,710 --> 00:35:21,970
is then actually<font color="#CCCCCC"> used and we can</font>

822
00:35:19,720 --> 00:35:25,149
characterize all these functions what

823
00:35:21,970 --> 00:35:26,500
it's doing in there and while<font color="#E5E5E5"> we found</font>

824
00:35:25,150 --> 00:35:29,470
out<font color="#E5E5E5"> it's due to Swift's memory</font>

825
00:35:26,500 --> 00:35:31,840
management<font color="#E5E5E5"> Swift at calls to the magic</font>

826
00:35:29,470 --> 00:35:33,520
internal<font color="#E5E5E5"> release retains and functions</font>

827
00:35:31,840 --> 00:35:36,070
<font color="#CCCCCC">for each</font><font color="#E5E5E5"> object used in each function</font>

828
00:35:33,520 --> 00:35:39,490
just to<font color="#E5E5E5"> keep</font><font color="#CCCCCC"> track of the reference</font>

829
00:35:36,070 --> 00:35:41,110
counting and that's well<font color="#E5E5E5"> basically no</font>

830
00:35:39,490 --> 00:35:42,939
problem if<font color="#E5E5E5"> you are just writing a UI</font><font color="#CCCCCC"> app</font>

831
00:35:41,110 --> 00:35:44,380
for some buttons or something<font color="#CCCCCC"> but if you</font>

832
00:35:42,940 --> 00:35:45,880
are I think<font color="#E5E5E5"> a driver</font><font color="#CCCCCC"> that has to pass</font>

833
00:35:44,380 --> 00:35:47,140
through millions<font color="#E5E5E5"> of millions of packets</font>

834
00:35:45,880 --> 00:35:51,220
through<font color="#E5E5E5"> a lot of functions all the time</font>

835
00:35:47,140 --> 00:35:52,629
<font color="#E5E5E5">then turns out that spends well 76</font>

836
00:35:51,220 --> 00:35:55,299
<font color="#CCCCCC">percent of its time</font><font color="#E5E5E5"> in these release</font>

837
00:35:52,630 --> 00:35:57,970
<font color="#CCCCCC">retain calls so it could</font><font color="#E5E5E5"> be four times</font>

838
00:35:55,300 --> 00:36:01,810
faster if it had other way to manage

839
00:35:57,970 --> 00:36:03,520
memory<font color="#E5E5E5"> and for comparison</font><font color="#CCCCCC"> in go we spent</font>

840
00:36:01,810 --> 00:36:05,710
less<font color="#CCCCCC"> than half a percent in the garbage</font>

841
00:36:03,520 --> 00:36:08,500
collector<font color="#E5E5E5"> because it's quite simple</font>

842
00:36:05,710 --> 00:36:12,190
application<font color="#E5E5E5"> so now the big advantage of</font>

843
00:36:08,500 --> 00:36:14,740
<font color="#E5E5E5">having these semantics</font><font color="#CCCCCC"> verse reference</font>

844
00:36:12,190 --> 00:36:16,950
counting in Swift is of course<font color="#E5E5E5"> that</font>

845
00:36:14,740 --> 00:36:19,149
there are no unpredictable<font color="#CCCCCC"> pastimes and</font>

846
00:36:16,950 --> 00:36:20,740
the garbage collector<font color="#CCCCCC"> and Gore might</font>

847
00:36:19,150 --> 00:36:23,920
just stop<font color="#E5E5E5"> your driver for all the time</font>

848
00:36:20,740 --> 00:36:25,509
or for some time<font color="#E5E5E5"> the question</font><font color="#CCCCCC"> is now is</font>

849
00:36:23,920 --> 00:36:26,830
<font color="#CCCCCC">it a</font><font color="#E5E5E5"> good idea to have a garbage</font>

850
00:36:25,510 --> 00:36:28,750
<font color="#E5E5E5">collector and something</font><font color="#CCCCCC"> like a driver</font>

851
00:36:26,830 --> 00:36:30,279
now the good thing<font color="#E5E5E5"> is we</font><font color="#CCCCCC"> can measure</font>

852
00:36:28,750 --> 00:36:33,970
that<font color="#CCCCCC"> because we have this forwarding</font>

853
00:36:30,280 --> 00:36:35,830
application and we did that we measure

854
00:36:33,970 --> 00:36:38,049
the latency of<font color="#E5E5E5"> all the packets that</font>

855
00:36:35,830 --> 00:36:40,360
<font color="#E5E5E5">before</font><font color="#CCCCCC"> wallet this latency</font><font color="#E5E5E5"> was measured</font>

856
00:36:38,050 --> 00:36:42,820
at around<font color="#E5E5E5"> 16 million packets per second</font>

857
00:36:40,360 --> 00:36:44,830
<font color="#E5E5E5">and what you see here</font><font color="#CCCCCC"> is the cumulative</font>

858
00:36:42,820 --> 00:36:48,430
distribution function<font color="#E5E5E5"> of the latency of</font>

859
00:36:44,830 --> 00:36:50,140
<font color="#CCCCCC">last</font><font color="#E5E5E5"> and this is basically a almost</font>

860
00:36:48,430 --> 00:36:52,200
perfect<font color="#E5E5E5"> normal</font><font color="#CCCCCC"> distribution centered at</font>

861
00:36:50,140 --> 00:36:54,960
around eight microseconds<font color="#CCCCCC"> verçosa</font><font color="#E5E5E5"> very</font>

862
00:36:52,200 --> 00:36:57,540
<font color="#CCCCCC">Society for comparison a hardware search</font>

863
00:36:54,960 --> 00:37:00,240
takes<font color="#CCCCCC"> around one microsecond to follow</font>

864
00:36:57,540 --> 00:37:02,759
out a packet but eight microseconds<font color="#E5E5E5"> is</font>

865
00:37:00,240 --> 00:37:06,390
for<font color="#CCCCCC"> a software</font><font color="#E5E5E5"> forwarding thing is</font>

866
00:37:02,760 --> 00:37:09,450
really<font color="#E5E5E5"> nice and fast and now to the same</font>

867
00:37:06,390 --> 00:37:12,359
graph<font color="#E5E5E5"> let's at the other languages and</font>

868
00:37:09,450 --> 00:37:14,730
now we see well goes<font color="#CCCCCC"> from similar but</font>

869
00:37:12,359 --> 00:37:18,270
<font color="#CCCCCC">c-sharp</font><font color="#E5E5E5"> is a little bit slower at</font><font color="#CCCCCC"> the</font>

870
00:37:14,730 --> 00:37:19,920
top but I do realize<font color="#CCCCCC"> that this</font><font color="#E5E5E5"> graph</font>

871
00:37:18,270 --> 00:37:21,540
might look a little<font color="#E5E5E5"> bit confusing</font><font color="#CCCCCC"> so</font>

872
00:37:19,920 --> 00:37:23,460
let's really quickly explain it how to

873
00:37:21,540 --> 00:37:27,359
how to<font color="#CCCCCC"> read</font><font color="#E5E5E5"> that if you are not familiar</font>

874
00:37:23,460 --> 00:37:30,569
<font color="#E5E5E5">with these CDF's now we look at a value</font>

875
00:37:27,359 --> 00:37:33,569
<font color="#E5E5E5">at the</font><font color="#CCCCCC"> y axis for example</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> five so</font>

876
00:37:30,569 --> 00:37:37,259
<font color="#CCCCCC">50% then we go over to</font><font color="#E5E5E5"> their language</font><font color="#CCCCCC"> go</font>

877
00:37:33,569 --> 00:37:40,470
down<font color="#E5E5E5"> to the x-axis and</font><font color="#CCCCCC"> that just means</font>

878
00:37:37,260 --> 00:37:42,089
<font color="#CCCCCC">that 50%</font><font color="#E5E5E5"> of the packets take less</font><font color="#CCCCCC"> than</font>

879
00:37:40,470 --> 00:37:44,098
eight point nine microseconds<font color="#E5E5E5"> to be</font>

880
00:37:42,089 --> 00:37:47,819
processed<font color="#E5E5E5"> for c-sharp and the other 50%</font>

881
00:37:44,099 --> 00:37:49,619
<font color="#CCCCCC">take more</font><font color="#E5E5E5"> so then looking at any latency</font>

882
00:37:47,819 --> 00:37:51,990
where a garbage collector or

883
00:37:49,619 --> 00:37:53,609
unpredictable spikes are<font color="#E5E5E5"> involved then</font>

884
00:37:51,990 --> 00:37:55,379
it's always<font color="#CCCCCC"> a good idea to not look at</font>

885
00:37:53,609 --> 00:37:59,040
<font color="#E5E5E5">the median but at something like the</font>

886
00:37:55,380 --> 00:38:01,020
99th percentile and for c-sharp<font color="#CCCCCC"> one</font>

887
00:37:59,040 --> 00:38:04,170
percent of the packets take longer than

888
00:38:01,020 --> 00:38:06,240
30 microseconds<font color="#E5E5E5"> and one percent of the</font>

889
00:38:04,170 --> 00:38:08,069
<font color="#CCCCCC">packets is a lot if</font><font color="#E5E5E5"> you're processing a</font>

890
00:38:06,240 --> 00:38:09,540
lot of packets<font color="#E5E5E5"> like one in a hundred</font>

891
00:38:08,069 --> 00:38:11,040
packets<font color="#E5E5E5"> and you are doing millions of</font>

892
00:38:09,540 --> 00:38:12,359
them per second so you are going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> get</font>

893
00:38:11,040 --> 00:38:14,250
these worst case latency<font color="#E5E5E5"> it's quite</font>

894
00:38:12,359 --> 00:38:18,029
often what we really want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> know is not</font>

895
00:38:14,250 --> 00:38:19,950
<font color="#CCCCCC">the 99th percentile</font><font color="#E5E5E5"> but in 99.9999%</font><font color="#CCCCCC"> ID</font>

896
00:38:18,030 --> 00:38:22,319
or something<font color="#CCCCCC"> like that so we</font><font color="#E5E5E5"> will need</font>

897
00:38:19,950 --> 00:38:24,660
to<font color="#E5E5E5"> zoom</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> that graph here if you're</font>

898
00:38:22,319 --> 00:38:26,160
<font color="#CCCCCC">zooming into</font><font color="#E5E5E5"> a graph you usually change</font>

899
00:38:24,660 --> 00:38:28,440
the<font color="#E5E5E5"> axis to be long I would make to zoom</font>

900
00:38:26,160 --> 00:38:30,808
in<font color="#E5E5E5"> well in this case it would zoom</font><font color="#CCCCCC"> in to</font>

901
00:38:28,440 --> 00:38:33,210
the wrong part<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the graph so we also</font>

902
00:38:30,809 --> 00:38:35,430
have<font color="#E5E5E5"> to subtract the excess from one</font>

903
00:38:33,210 --> 00:38:37,290
yielding the complementary cumulative

904
00:38:35,430 --> 00:38:39,750
distribution function on a logarithmic

905
00:38:37,290 --> 00:38:44,040
<font color="#E5E5E5">axis now this is inverted and a little</font>

906
00:38:39,750 --> 00:38:46,650
bit a confusing graph<font color="#E5E5E5"> but this is what</font>

907
00:38:44,040 --> 00:38:48,240
you<font color="#E5E5E5"> would</font><font color="#CCCCCC"> see in a academic publication</font>

908
00:38:46,650 --> 00:38:50,280
talking something about latency<font color="#E5E5E5"> or</font>

909
00:38:48,240 --> 00:38:52,319
anything like<font color="#CCCCCC"> that but</font><font color="#E5E5E5"> I think it's a</font>

910
00:38:50,280 --> 00:38:56,430
really confusing graph but you can

911
00:38:52,319 --> 00:38:59,369
quickly see<font color="#CCCCCC"> here</font><font color="#E5E5E5"> the percentiles and the</font>

912
00:38:56,430 --> 00:39:01,799
top<font color="#CCCCCC"> no the bottom line would be the</font>

913
00:38:59,369 --> 00:39:03,869
<font color="#E5E5E5">latency of one packet in a million</font>

914
00:39:01,799 --> 00:39:05,069
packets and<font color="#E5E5E5"> what we can do with this</font>

915
00:39:03,869 --> 00:39:06,000
<font color="#CCCCCC">graph</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> make it a little</font><font color="#E5E5E5"> bit more</font>

916
00:39:05,069 --> 00:39:08,460
approachable

917
00:39:06,000 --> 00:39:10,290
if we can basically just rotate it<font color="#E5E5E5"> and</font>

918
00:39:08,460 --> 00:39:13,080
change the<font color="#CCCCCC"> access description of the</font>

919
00:39:10,290 --> 00:39:16,380
<font color="#CCCCCC">x-axis which</font><font color="#E5E5E5"> was the y-axis before and</font>

920
00:39:13,080 --> 00:39:18,390
the<font color="#E5E5E5"> x-axis</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> now the percentile and the</font>

921
00:39:16,380 --> 00:39:20,040
<font color="#CCCCCC">y-axis is the latency and now it's</font>

922
00:39:18,390 --> 00:39:24,598
easier to read we<font color="#CCCCCC"> can for example look</font>

923
00:39:20,040 --> 00:39:26,970
at ninety nine times nine nine<font color="#E5E5E5"> and check</font>

924
00:39:24,599 --> 00:39:28,109
out where<font color="#E5E5E5"> it's which latency at</font><font color="#CCCCCC"> that</font>

925
00:39:26,970 --> 00:39:30,029
percentile is for the different

926
00:39:28,109 --> 00:39:31,590
languages and this<font color="#E5E5E5"> is a kind of graph</font>

927
00:39:30,030 --> 00:39:34,230
<font color="#E5E5E5">that you will see for</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of latency</font>

928
00:39:31,590 --> 00:39:36,660
<font color="#E5E5E5">evaluations of anything that has latency</font>

929
00:39:34,230 --> 00:39:38,580
spikes<font color="#E5E5E5"> if done properly and you</font>

930
00:39:36,660 --> 00:39:40,379
unfortunately often see<font color="#E5E5E5"> people doing</font>

931
00:39:38,580 --> 00:39:42,420
latency evaluations and then providing

932
00:39:40,380 --> 00:39:44,010
like the average<font color="#CCCCCC"> or median latency which</font>

933
00:39:42,420 --> 00:39:46,830
is from many cases are<font color="#CCCCCC"> completely</font>

934
00:39:44,010 --> 00:39:48,630
useless value<font color="#E5E5E5"> most of them probably</font><font color="#CCCCCC"> just</font>

935
00:39:46,830 --> 00:39:50,460
<font color="#E5E5E5">don't know better but if you want to</font>

936
00:39:48,630 --> 00:39:53,220
evaluate latency<font color="#E5E5E5"> please have a graph</font>

937
00:39:50,460 --> 00:39:54,599
like<font color="#CCCCCC"> this in the end</font><font color="#E5E5E5"> and there is if you</font>

938
00:39:53,220 --> 00:39:56,700
want something<font color="#CCCCCC"> to</font><font color="#E5E5E5"> Google there's a</font>

939
00:39:54,599 --> 00:39:58,980
library<font color="#E5E5E5"> called HDR histogram which can</font>

940
00:39:56,700 --> 00:40:00,569
generate<font color="#E5E5E5"> these graphs from latency</font>

941
00:39:58,980 --> 00:40:03,240
measurement data and<font color="#E5E5E5"> that's just a</font>

942
00:40:00,570 --> 00:40:04,890
<font color="#E5E5E5">really nice</font><font color="#CCCCCC"> way to characterize</font><font color="#E5E5E5"> garbage</font>

943
00:40:03,240 --> 00:40:08,490
collection or just-in-time compilation

944
00:40:04,890 --> 00:40:12,359
latency or anything like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> now we got</font>

945
00:40:08,490 --> 00:40:14,279
a driver<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is nice and fast</font><font color="#E5E5E5"> and has a</font>

946
00:40:12,359 --> 00:40:17,040
<font color="#E5E5E5">relatively low latency for for most</font>

947
00:40:14,280 --> 00:40:19,440
<font color="#E5E5E5">languages but we</font><font color="#CCCCCC"> have not</font><font color="#E5E5E5"> yet really</font>

948
00:40:17,040 --> 00:40:23,790
looked at<font color="#E5E5E5"> safety and security beyond</font>

949
00:40:19,440 --> 00:40:26,790
what was offered<font color="#E5E5E5"> by the language because</font>

950
00:40:23,790 --> 00:40:30,390
our driver still<font color="#E5E5E5"> wants its route like</font>

951
00:40:26,790 --> 00:40:33,570
all or virtually all user space drivers

952
00:40:30,390 --> 00:40:36,839
run as root by default and well why is

953
00:40:33,570 --> 00:40:39,690
this the<font color="#CCCCCC"> case well I've shown this code</font>

954
00:40:36,839 --> 00:40:42,630
before<font color="#CCCCCC"> there are a</font><font color="#E5E5E5"> few operations in the</font>

955
00:40:39,690 --> 00:40:44,970
initialization<font color="#CCCCCC"> that just require you to</font>

956
00:40:42,630 --> 00:40:47,180
be rude like<font color="#E5E5E5"> mapping the PCI</font><font color="#CCCCCC"> Express</font>

957
00:40:44,970 --> 00:40:49,049
resource requires you to<font color="#CCCCCC"> be route for</font>

958
00:40:47,180 --> 00:40:50,549
<font color="#E5E5E5">implementation details in the Linux</font>

959
00:40:49,050 --> 00:40:52,830
kernel we need<font color="#CCCCCC"> non-transparent huge</font>

960
00:40:50,550 --> 00:40:55,650
<font color="#CCCCCC">paces for the DNA buffer they require</font>

961
00:40:52,830 --> 00:40:57,960
you to be rude to<font color="#E5E5E5"> allocate them locking</font>

962
00:40:55,650 --> 00:41:00,200
memory requires<font color="#CCCCCC"> route so these are</font>

963
00:40:57,960 --> 00:41:02,339
<font color="#E5E5E5">clearly all functions related to</font>

964
00:41:00,200 --> 00:41:04,830
<font color="#E5E5E5">initialization or setup</font><font color="#CCCCCC"> so the obvious</font>

965
00:41:02,339 --> 00:41:05,670
idea is well write a small program<font color="#E5E5E5"> that</font>

966
00:41:04,830 --> 00:41:07,920
does<font color="#CCCCCC"> that for us</font>

967
00:41:05,670 --> 00:41:09,930
keep that simple and out of that<font color="#E5E5E5"> and</font>

968
00:41:07,920 --> 00:41:12,570
<font color="#E5E5E5">check</font><font color="#CCCCCC"> that's good and then drop all the</font>

969
00:41:09,930 --> 00:41:14,430
<font color="#CCCCCC">privileges</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> we do</font><font color="#E5E5E5"> that yeah sure we</font>

970
00:41:12,570 --> 00:41:16,920
<font color="#CCCCCC">can do</font><font color="#E5E5E5"> that it's relatively easy just</font>

971
00:41:14,430 --> 00:41:19,770
drop privileges after setting up memory

972
00:41:16,920 --> 00:41:21,690
<font color="#E5E5E5">but that's still not</font><font color="#CCCCCC"> really</font>

973
00:41:19,770 --> 00:41:24,090
<font color="#CCCCCC">secure in any way even though you are</font>

974
00:41:21,690 --> 00:41:26,370
<font color="#CCCCCC">now running</font><font color="#E5E5E5"> as an unprivileged user and</font>

975
00:41:24,090 --> 00:41:27,990
to understand why this<font color="#E5E5E5"> does not work as</font>

976
00:41:26,370 --> 00:41:31,410
you might want<font color="#CCCCCC"> it</font><font color="#E5E5E5"> to work we have</font><font color="#CCCCCC"> to</font>

977
00:41:27,990 --> 00:41:35,399
take a high-level<font color="#E5E5E5"> look at how memory</font>

978
00:41:31,410 --> 00:41:38,120
access works on a modern system<font color="#E5E5E5"> and this</font>

979
00:41:35,400 --> 00:41:41,010
is<font color="#CCCCCC"> what a</font><font color="#E5E5E5"> modern system looks like at a</font>

980
00:41:38,120 --> 00:41:42,779
very high<font color="#CCCCCC"> level view we have</font><font color="#E5E5E5"> two CPU</font>

981
00:41:41,010 --> 00:41:45,060
here at the top with our<font color="#CCCCCC"> application</font>

982
00:41:42,780 --> 00:41:47,070
running on<font color="#E5E5E5"> it and and button left we</font>

983
00:41:45,060 --> 00:41:50,370
have PCI Express devised but unlikely<font color="#E5E5E5"> I</font>

984
00:41:47,070 --> 00:41:51,740
have some memory<font color="#E5E5E5"> and if we now want to</font>

985
00:41:50,370 --> 00:41:53,819
do some memory access from our

986
00:41:51,740 --> 00:41:56,250
<font color="#E5E5E5">application it goes like</font><font color="#CCCCCC"> this it goes</font>

987
00:41:53,820 --> 00:41:59,280
<font color="#CCCCCC">through a thing</font><font color="#E5E5E5"> called the MMU</font><font color="#CCCCCC"> the MMU</font>

988
00:41:56,250 --> 00:42:01,650
is the memory management unit<font color="#E5E5E5"> and the</font>

989
00:41:59,280 --> 00:42:03,270
memory management unit<font color="#E5E5E5"> translates</font><font color="#CCCCCC"> your</font>

990
00:42:01,650 --> 00:42:05,730
virtual address that you<font color="#CCCCCC"> have in your</font>

991
00:42:03,270 --> 00:42:09,350
program<font color="#CCCCCC"> to a physical address that can</font>

992
00:42:05,730 --> 00:42:11,670
be used by<font color="#E5E5E5"> the memory controller now the</font>

993
00:42:09,350 --> 00:42:13,920
security or the<font color="#E5E5E5"> isolation between</font>

994
00:42:11,670 --> 00:42:16,590
processes<font color="#E5E5E5"> is controlled by</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> MMU and</font>

995
00:42:13,920 --> 00:42:20,190
<font color="#E5E5E5">only the kernel can reprogram to the MMU</font>

996
00:42:16,590 --> 00:42:23,400
to guarantee the isolation now if we

997
00:42:20,190 --> 00:42:25,500
want to access<font color="#CCCCCC"> our device by a</font><font color="#E5E5E5"> PCI</font>

998
00:42:23,400 --> 00:42:27,480
<font color="#CCCCCC">Express for example memory mapped i/o</font><font color="#E5E5E5"> it</font>

999
00:42:25,500 --> 00:42:29,610
also goes<font color="#E5E5E5"> through the</font><font color="#CCCCCC"> MMU</font><font color="#E5E5E5"> D and a</font><font color="#CCCCCC"> mutant</font>

1000
00:42:27,480 --> 00:42:31,640
knows this is<font color="#E5E5E5"> not going to memory but</font><font color="#CCCCCC"> to</font>

1001
00:42:29,610 --> 00:42:34,530
PCI Express it talks to the<font color="#E5E5E5"> device and</font>

1002
00:42:31,640 --> 00:42:35,940
that's<font color="#CCCCCC"> also all fine</font><font color="#E5E5E5"> now you could</font><font color="#CCCCCC"> argue</font>

1003
00:42:34,530 --> 00:42:37,590
clearly these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> the two kinds of</font>

1004
00:42:35,940 --> 00:42:40,350
memory<font color="#CCCCCC"> accesses we do both</font><font color="#E5E5E5"> are checked</font>

1005
00:42:37,590 --> 00:42:42,720
by<font color="#CCCCCC"> a DMM u so what's the problem well</font>

1006
00:42:40,350 --> 00:42:44,310
the problem is<font color="#E5E5E5"> that</font><font color="#CCCCCC"> when we tell the</font>

1007
00:42:42,720 --> 00:42:45,839
device to do something<font color="#CCCCCC"> that's memory</font>

1008
00:42:44,310 --> 00:42:48,330
I've previously mentioned<font color="#E5E5E5"> we tell the</font>

1009
00:42:45,840 --> 00:42:52,860
device<font color="#E5E5E5"> physical addresses to use them</font>

1010
00:42:48,330 --> 00:42:56,190
and well of course the device<font color="#E5E5E5"> does</font><font color="#CCCCCC"> not</font>

1011
00:42:52,860 --> 00:42:58,020
go through<font color="#E5E5E5"> the MMU of because it doesn't</font>

1012
00:42:56,190 --> 00:43:00,990
know it doesn't<font color="#E5E5E5"> have a concept of</font><font color="#CCCCCC"> it's</font>

1013
00:42:58,020 --> 00:43:02,910
<font color="#CCCCCC">used by a process or it's being used</font><font color="#E5E5E5"> by</font>

1014
00:43:00,990 --> 00:43:05,970
this<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of person just has full access</font>

1015
00:43:02,910 --> 00:43:08,790
to<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> your memory and so if you</font>

1016
00:43:05,970 --> 00:43:10,379
somehow<font color="#CCCCCC"> own the program</font><font color="#E5E5E5"> that is running</font>

1017
00:43:08,790 --> 00:43:13,140
<font color="#CCCCCC">as an unprivileged user it's quite a</font>

1018
00:43:10,380 --> 00:43:15,540
trivial exercise to get any data<font color="#E5E5E5"> from</font>

1019
00:43:13,140 --> 00:43:17,100
the important area that<font color="#E5E5E5"> you shouldn't be</font>

1020
00:43:15,540 --> 00:43:18,540
allowed<font color="#CCCCCC"> to access</font><font color="#E5E5E5"> all right any data</font>

1021
00:43:17,100 --> 00:43:20,970
there by<font color="#CCCCCC"> just telling the device to do</font>

1022
00:43:18,540 --> 00:43:22,440
it for you<font color="#E5E5E5"> meaning any application</font><font color="#CCCCCC"> that</font>

1023
00:43:20,970 --> 00:43:24,600
has direct<font color="#CCCCCC"> access to a PCI Express</font>

1024
00:43:22,440 --> 00:43:26,430
<font color="#E5E5E5">device is effectively route even if you</font>

1025
00:43:24,600 --> 00:43:29,220
<font color="#E5E5E5">dropped privileges so the obvious</font>

1026
00:43:26,430 --> 00:43:31,770
<font color="#E5E5E5">solution is to somehow make this access</font>

1027
00:43:29,220 --> 00:43:32,770
pass goes through the MMU<font color="#CCCCCC"> and there</font><font color="#E5E5E5"> is</font>

1028
00:43:31,770 --> 00:43:35,410
this fancy

1029
00:43:32,770 --> 00:43:37,450
<font color="#CCCCCC">a</font><font color="#E5E5E5"> component quality iommu which is</font>

1030
00:43:35,410 --> 00:43:39,609
exactly for this use case this can be

1031
00:43:37,450 --> 00:43:41,560
found<font color="#E5E5E5"> on any modern CPU that has</font>

1032
00:43:39,610 --> 00:43:43,350
hardware virtualization features<font color="#E5E5E5"> because</font>

1033
00:43:41,560 --> 00:43:45,670
it's mainly<font color="#CCCCCC"> being used to do</font>

1034
00:43:43,350 --> 00:43:47,830
pass-through<font color="#CCCCCC"> of PCI Express devices to</font>

1035
00:43:45,670 --> 00:43:50,350
virtual machines<font color="#E5E5E5"> in a safe and secure</font>

1036
00:43:47,830 --> 00:43:52,630
manner<font color="#E5E5E5"> but you can also use it for</font><font color="#CCCCCC"> user</font>

1037
00:43:50,350 --> 00:43:54,190
<font color="#CCCCCC">space drivers</font><font color="#E5E5E5"> you just need a</font><font color="#CCCCCC"> way to</font>

1038
00:43:52,630 --> 00:43:57,430
tell the<font color="#CCCCCC"> colonel to configure the i/o</font>

1039
00:43:54,190 --> 00:44:01,050
<font color="#CCCCCC">mmm use the proper restrictions for us</font>

1040
00:43:57,430 --> 00:44:03,730
and then the access looks like this and

1041
00:44:01,050 --> 00:44:05,580
we just<font color="#E5E5E5"> need to configure it in a way</font>

1042
00:44:03,730 --> 00:44:08,890
that<font color="#CCCCCC"> the iommu</font>

1043
00:44:05,580 --> 00:44:11,470
<font color="#E5E5E5">has the same permissions for</font><font color="#CCCCCC"> that device</font>

1044
00:44:08,890 --> 00:44:14,379
like the MMU has for our<font color="#CCCCCC"> user space</font>

1045
00:44:11,470 --> 00:44:16,180
program and<font color="#E5E5E5"> then it's perfectly secure</font>

1046
00:44:14,380 --> 00:44:18,250
if<font color="#E5E5E5"> you're a program that owned attacker</font>

1047
00:44:16,180 --> 00:44:21,759
doesn't<font color="#E5E5E5"> have any privileges and beyond</font>

1048
00:44:18,250 --> 00:44:23,680
what your<font color="#E5E5E5"> process has and this is also</font>

1049
00:44:21,760 --> 00:44:25,750
useful<font color="#E5E5E5"> for safety because when I</font>

1050
00:44:23,680 --> 00:44:27,609
<font color="#CCCCCC">initially wrote</font><font color="#E5E5E5"> a driver</font><font color="#CCCCCC"> I kind of</font>

1051
00:44:25,750 --> 00:44:29,560
killed<font color="#CCCCCC"> a server</font><font color="#E5E5E5"> and I apparently must</font>

1052
00:44:27,610 --> 00:44:31,660
configure the DMA and overload something

1053
00:44:29,560 --> 00:44:33,430
that was important for the file<font color="#E5E5E5"> system</font>

1054
00:44:31,660 --> 00:44:35,109
<font color="#E5E5E5">apparently and then it was dead and</font><font color="#CCCCCC"> had</font>

1055
00:44:33,430 --> 00:44:37,509
to reinstall<font color="#CCCCCC"> it so that</font><font color="#E5E5E5"> wouldn't have</font>

1056
00:44:35,110 --> 00:44:42,880
<font color="#E5E5E5">happened if I had started with the iommu</font>

1057
00:44:37,510 --> 00:44:45,160
in the first place how do we do that<font color="#CCCCCC"> to</font>

1058
00:44:42,880 --> 00:44:47,680
reduce<font color="#CCCCCC"> the iommu specifically on Linux</font>

1059
00:44:45,160 --> 00:44:51,129
which has a<font color="#E5E5E5"> night nice sub system called</font>

1060
00:44:47,680 --> 00:44:52,660
<font color="#CCCCCC">yeah we f i/o subsystem</font><font color="#E5E5E5"> and it's what we</font>

1061
00:44:51,130 --> 00:44:54,340
can use we just<font color="#E5E5E5"> need to prepare the</font>

1062
00:44:52,660 --> 00:44:57,819
system<font color="#CCCCCC"> as a route this is a one time</font>

1063
00:44:54,340 --> 00:45:00,070
step<font color="#E5E5E5"> assault we can bind the device to</font>

1064
00:44:57,820 --> 00:45:02,440
the<font color="#E5E5E5"> VF</font><font color="#CCCCCC"> i/o driver instead of</font><font color="#E5E5E5"> two no</font>

1065
00:45:00,070 --> 00:45:04,150
driver at all we can change the owner<font color="#CCCCCC"> of</font>

1066
00:45:02,440 --> 00:45:07,000
the<font color="#E5E5E5"> recycling metric device file and</font>

1067
00:45:04,150 --> 00:45:08,380
pass it to<font color="#E5E5E5"> an unprivileged user</font><font color="#CCCCCC"> then we</font>

1068
00:45:07,000 --> 00:45:10,240
have to give the unprivileged user

1069
00:45:08,380 --> 00:45:13,240
permissions to lock memory to allocate

1070
00:45:10,240 --> 00:45:15,790
DNA memory<font color="#E5E5E5"> but you can also stick them</font>

1071
00:45:13,240 --> 00:45:17,680
can like you<font color="#CCCCCC"> are allowed to allocate -</font>

1072
00:45:15,790 --> 00:45:20,020
<font color="#CCCCCC">err</font><font color="#E5E5E5"> twelve megabytes of locked DNA</font>

1073
00:45:17,680 --> 00:45:22,720
memory and then all the remaining<font color="#E5E5E5"> steps</font>

1074
00:45:20,020 --> 00:45:24,880
can be<font color="#E5E5E5"> done as an unprivileged user the</font>

1075
00:45:22,720 --> 00:45:28,209
unprivileged user can now call an<font color="#E5E5E5"> M upon</font>

1076
00:45:24,880 --> 00:45:30,700
the new device<font color="#E5E5E5"> and then the unprivileged</font>

1077
00:45:28,210 --> 00:45:33,160
user can communicate with the kernel<font color="#E5E5E5"> yio</font>

1078
00:45:30,700 --> 00:45:34,779
control commands on the<font color="#E5E5E5"> magic device and</font>

1079
00:45:33,160 --> 00:45:37,690
it can also tell<font color="#CCCCCC"> the colonel</font><font color="#E5E5E5"> to please</font>

1080
00:45:34,780 --> 00:45:39,910
allocate<font color="#E5E5E5"> team a memory and also actually</font>

1081
00:45:37,690 --> 00:45:43,390
<font color="#E5E5E5">a better way</font><font color="#CCCCCC"> to allocate DNA a movie for</font>

1082
00:45:39,910 --> 00:45:45,370
technical<font color="#CCCCCC"> reasons and then you can just</font>

1083
00:45:43,390 --> 00:45:46,390
use the device as<font color="#CCCCCC"> you had before so you</font>

1084
00:45:45,370 --> 00:45:48,880
just need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> change</font>

1085
00:45:46,390 --> 00:45:51,879
<font color="#E5E5E5">set up steps and then you have a user</font>

1086
00:45:48,880 --> 00:45:55,300
space<font color="#E5E5E5"> driver that can</font><font color="#CCCCCC"> run with well no</font>

1087
00:45:51,880 --> 00:45:56,860
special<font color="#CCCCCC"> privileges at all and the IOM</font>

1088
00:45:55,300 --> 00:45:58,210
you will check all the<font color="#CCCCCC"> excesses</font><font color="#E5E5E5"> and the</font>

1089
00:45:56,860 --> 00:46:00,400
<font color="#CCCCCC">kernel will make sure</font><font color="#E5E5E5"> that you can't</font>

1090
00:45:58,210 --> 00:46:02,320
<font color="#E5E5E5">configure the</font><font color="#CCCCCC"> iommu</font><font color="#E5E5E5"> in a wrong way</font><font color="#CCCCCC"> you</font>

1091
00:46:00,400 --> 00:46:04,750
can just tell it<font color="#E5E5E5"> to please configure the</font>

1092
00:46:02,320 --> 00:46:06,880
<font color="#E5E5E5">iommu in such a way</font><font color="#CCCCCC"> that the device can</font>

1093
00:46:04,750 --> 00:46:09,820
access my current address<font color="#E5E5E5"> space but not</font>

1094
00:46:06,880 --> 00:46:13,780
<font color="#CCCCCC">anything</font><font color="#E5E5E5"> else and we have implemented</font>

1095
00:46:09,820 --> 00:46:15,250
this in<font color="#E5E5E5"> our C driver</font><font color="#CCCCCC"> the my student who</font>

1096
00:46:13,780 --> 00:46:17,200
implemented this<font color="#CCCCCC"> is actually here today</font>

1097
00:46:15,250 --> 00:46:18,550
<font color="#CCCCCC">but he was</font><font color="#E5E5E5"> afraid</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> come up on stage</font>

1098
00:46:17,200 --> 00:46:24,580
<font color="#E5E5E5">but if you have any questions you can</font>

1099
00:46:18,550 --> 00:46:26,080
<font color="#CCCCCC">talk to him afterwards there</font><font color="#E5E5E5"> now we have</font>

1100
00:46:24,580 --> 00:46:29,380
this awesome driver which<font color="#CCCCCC"> is safe secure</font>

1101
00:46:26,080 --> 00:46:30,970
<font color="#CCCCCC">and everything and yet some people still</font>

1102
00:46:29,380 --> 00:46:32,710
argue<font color="#E5E5E5"> our user space drivers are useless</font>

1103
00:46:30,970 --> 00:46:34,390
<font color="#E5E5E5">I already have a driver in the kernel</font>

1104
00:46:32,710 --> 00:46:36,550
why do I need<font color="#CCCCCC"> another driver by what you</font>

1105
00:46:34,390 --> 00:46:38,109
want to write a driver<font color="#E5E5E5"> and obvious</font>

1106
00:46:36,550 --> 00:46:40,030
answer to<font color="#E5E5E5"> the question is why wouldn't</font>

1107
00:46:38,110 --> 00:46:41,380
<font color="#E5E5E5">you want to write a driver can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> fun at</font>

1108
00:46:40,030 --> 00:46:44,800
a lot of fun when<font color="#E5E5E5"> I</font><font color="#CCCCCC"> wrote the first</font>

1109
00:46:41,380 --> 00:46:46,600
<font color="#E5E5E5">driver so yeah then maybe you just need</font>

1110
00:46:44,800 --> 00:46:49,570
a<font color="#E5E5E5"> quick and dirty driver 4-wheel device</font>

1111
00:46:46,600 --> 00:46:51,339
that you found somewhere<font color="#E5E5E5"> maybe you just</font>

1112
00:46:49,570 --> 00:46:54,160
need quick development<font color="#CCCCCC"> cycles where I</font>

1113
00:46:51,340 --> 00:46:55,600
want to<font color="#E5E5E5"> don't want</font><font color="#CCCCCC"> to shoot down your</font>

1114
00:46:54,160 --> 00:46:57,970
kernel all the time or<font color="#E5E5E5"> reboot all the</font>

1115
00:46:55,600 --> 00:46:59,230
time if you have<font color="#CCCCCC"> real</font><font color="#E5E5E5"> device</font><font color="#CCCCCC"> that you</font>

1116
00:46:57,970 --> 00:47:00,819
<font color="#E5E5E5">are developing is maybe you're</font>

1117
00:46:59,230 --> 00:47:02,380
developing a custom<font color="#E5E5E5"> device may be of</font>

1118
00:47:00,820 --> 00:47:04,330
some FPGA bought that<font color="#E5E5E5"> you want to talk</font>

1119
00:47:02,380 --> 00:47:06,520
to real quick result<font color="#E5E5E5"> being involved in</font>

1120
00:47:04,330 --> 00:47:07,990
some<font color="#CCCCCC"> kernel stuff</font><font color="#E5E5E5"> or maybe you</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> need</font>

1121
00:47:06,520 --> 00:47:11,800
a<font color="#E5E5E5"> feature that's found on the hardware</font>

1122
00:47:07,990 --> 00:47:13,839
<font color="#E5E5E5">but not yet on the device driver there</font>

1123
00:47:11,800 --> 00:47:15,310
are some<font color="#CCCCCC"> features</font><font color="#E5E5E5"> there's like a like a</font>

1124
00:47:13,840 --> 00:47:16,840
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> stuff in the past you have</font><font color="#CCCCCC"> infant</font>

1125
00:47:15,310 --> 00:47:19,120
<font color="#CCCCCC">IP stack of flooring which wasn't in</font><font color="#E5E5E5"> the</font>

1126
00:47:16,840 --> 00:47:20,530
<font color="#CCCCCC">open source driver</font><font color="#E5E5E5"> and so on but</font>

1127
00:47:19,120 --> 00:47:22,720
something<font color="#CCCCCC"> we have done recently</font><font color="#E5E5E5"> is</font>

1128
00:47:20,530 --> 00:47:24,730
<font color="#CCCCCC">hardware time stamping</font><font color="#E5E5E5"> the latency</font>

1129
00:47:22,720 --> 00:47:26,980
measurements are short before<font color="#E5E5E5"> required</font>

1130
00:47:24,730 --> 00:47:29,050
us<font color="#CCCCCC"> to take time stems</font><font color="#E5E5E5"> of 15 million</font>

1131
00:47:26,980 --> 00:47:31,840
<font color="#E5E5E5">packets per second with</font><font color="#CCCCCC"> nanosecond level</font>

1132
00:47:29,050 --> 00:47:33,790
<font color="#E5E5E5">position and it is quite hard and people</font>

1133
00:47:31,840 --> 00:47:36,550
usually use special hardware for<font color="#E5E5E5"> this</font>

1134
00:47:33,790 --> 00:47:39,009
<font color="#E5E5E5">and we ourselves have used</font><font color="#CCCCCC"> meta fides in</font>

1135
00:47:36,550 --> 00:47:41,680
the past<font color="#CCCCCC"> folders</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> wall can be a lot</font>

1136
00:47:39,010 --> 00:47:44,590
of<font color="#CCCCCC"> fun to use</font><font color="#E5E5E5"> these nice devices but at</font>

1137
00:47:41,680 --> 00:47:46,750
the same time<font color="#CCCCCC"> it's prohibitive</font><font color="#E5E5E5"> from a</font>

1138
00:47:44,590 --> 00:47:48,370
cost perspective or<font color="#CCCCCC"> from a user</font>

1139
00:47:46,750 --> 00:47:51,690
experience perspective<font color="#E5E5E5"> for some people</font>

1140
00:47:48,370 --> 00:47:56,109
who<font color="#CCCCCC"> just needed</font><font color="#E5E5E5"> to take some</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> stance</font>

1141
00:47:51,690 --> 00:47:58,480
so we want to do it on the cheap<font color="#CCCCCC"> of the</font>

1142
00:47:56,110 --> 00:48:00,130
<font color="#CCCCCC">Shelf</font><font color="#E5E5E5"> commodity network cards and turns</font>

1143
00:47:58,480 --> 00:48:02,080
out all<font color="#CCCCCC"> of these or</font>

1144
00:48:00,130 --> 00:48:03,730
of the<font color="#E5E5E5"> newer</font><font color="#CCCCCC"> carts have a</font><font color="#E5E5E5"> hotter future</font>

1145
00:48:02,080 --> 00:48:05,560
that can just at the time<font color="#E5E5E5"> stem to the</font>

1146
00:48:03,730 --> 00:48:06,130
<font color="#E5E5E5">incoming behalf of all packets that they</font>

1147
00:48:05,560 --> 00:48:08,740
receive

1148
00:48:06,130 --> 00:48:12,040
but sadly none of<font color="#E5E5E5"> the existing drivers</font>

1149
00:48:08,740 --> 00:48:13,569
supported this feature<font color="#E5E5E5"> but showing you</font>

1150
00:48:12,040 --> 00:48:15,100
how you<font color="#E5E5E5"> can access registers you can</font>

1151
00:48:13,570 --> 00:48:17,620
just skip the step<font color="#E5E5E5"> there you unload the</font>

1152
00:48:15,100 --> 00:48:19,450
<font color="#E5E5E5">original driver you</font><font color="#CCCCCC"> can just poke the</font>

1153
00:48:17,620 --> 00:48:21,250
just end that<font color="#E5E5E5"> the thing by the original</font>

1154
00:48:19,450 --> 00:48:22,750
<font color="#CCCCCC">drivers running poke to right register</font>

1155
00:48:21,250 --> 00:48:24,580
<font color="#E5E5E5">and</font><font color="#CCCCCC"> like they tell</font><font color="#E5E5E5"> it to do this please</font>

1156
00:48:22,750 --> 00:48:26,170
<font color="#E5E5E5">and now you've got the</font><font color="#CCCCCC"> timestamp at the</font>

1157
00:48:24,580 --> 00:48:29,049
end of every packet<font color="#E5E5E5"> I'm sure it probably</font>

1158
00:48:26,170 --> 00:48:31,300
breaks your TCP stack or whatever if

1159
00:48:29,050 --> 00:48:32,800
there's<font color="#E5E5E5"> extra data but like pcap doesn't</font>

1160
00:48:31,300 --> 00:48:35,470
care in this case you<font color="#E5E5E5"> just did it was</font>

1161
00:48:32,800 --> 00:48:37,150
<font color="#CCCCCC">DPD can go to war packet buffers and it</font>

1162
00:48:35,470 --> 00:48:38,890
also doesn't care if they<font color="#E5E5E5"> divide things</font>

1163
00:48:37,150 --> 00:48:41,770
<font color="#E5E5E5">there's four extra bytes right extra</font>

1164
00:48:38,890 --> 00:48:44,710
bytes for<font color="#E5E5E5"> this</font><font color="#CCCCCC"> setup</font><font color="#E5E5E5"> that we had here we</font>

1165
00:48:41,770 --> 00:48:46,750
use the embedded<font color="#E5E5E5"> Nakhon Expy on d and</font>

1166
00:48:44,710 --> 00:48:48,850
<font color="#E5E5E5">you had a fiber optic splitter to</font>

1167
00:48:46,750 --> 00:48:50,620
central<font color="#E5E5E5"> timestamp of all the packets</font>

1168
00:48:48,850 --> 00:48:52,990
before and after device<font color="#E5E5E5"> on a test unless</font>

1169
00:48:50,620 --> 00:48:58,270
<font color="#E5E5E5">you</font><font color="#CCCCCC"> lead us with</font><font color="#E5E5E5"> this measurement of all</font>

1170
00:48:52,990 --> 00:48:59,589
these things<font color="#E5E5E5"> and yeah so there's just a</font>

1171
00:48:58,270 --> 00:49:03,100
simple use case<font color="#CCCCCC"> why you would</font><font color="#E5E5E5"> want the</font>

1172
00:48:59,590 --> 00:49:05,500
driver to conclude I can only<font color="#E5E5E5"> really say</font>

1173
00:49:03,100 --> 00:49:07,690
that I<font color="#E5E5E5"> think</font><font color="#CCCCCC"> driver</font><font color="#E5E5E5"> should be</font><font color="#CCCCCC"> written in</font>

1174
00:49:05,500 --> 00:49:10,390
better languages now<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think you</font>

1175
00:49:07,690 --> 00:49:13,150
shouldn't be start writing a<font color="#CCCCCC"> new user</font>

1176
00:49:10,390 --> 00:49:15,129
space<font color="#E5E5E5"> Java and C nowadays sadly if you</font>

1177
00:49:13,150 --> 00:49:17,470
look at the world of user space drivers

1178
00:49:15,130 --> 00:49:19,330
there is<font color="#E5E5E5"> mainly d pd k</font><font color="#CCCCCC"> which is a</font>

1179
00:49:17,470 --> 00:49:21,970
network<font color="#E5E5E5"> user space travel is all see</font>

1180
00:49:19,330 --> 00:49:25,750
there's both all<font color="#E5E5E5"> three because mainly</font>

1181
00:49:21,970 --> 00:49:28,240
<font color="#E5E5E5">copy pasted</font><font color="#CCCCCC"> from current levels and then</font>

1182
00:49:25,750 --> 00:49:30,850
there's<font color="#CCCCCC"> FP DK which has</font><font color="#E5E5E5"> nvme drivers</font>

1183
00:49:28,240 --> 00:49:32,740
also<font color="#CCCCCC"> all c and big</font><font color="#E5E5E5"> exception to this</font><font color="#CCCCCC"> is</font>

1184
00:49:30,850 --> 00:49:35,589
<font color="#CCCCCC">snaps which</font><font color="#E5E5E5"> has drivers</font><font color="#CCCCCC"> in Lua which is</font>

1185
00:49:32,740 --> 00:49:37,060
quite nice<font color="#CCCCCC"> and well our implementations</font>

1186
00:49:35,590 --> 00:49:38,590
which have a lot of<font color="#E5E5E5"> different things and</font>

1187
00:49:37,060 --> 00:49:41,259
we really want<font color="#CCCCCC"> to compare these other</font>

1188
00:49:38,590 --> 00:49:43,510
these<font color="#E5E5E5"> languages you can scan this QR</font>

1189
00:49:41,260 --> 00:49:46,870
<font color="#CCCCCC">code or</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> Google for XE languages on</font>

1190
00:49:43,510 --> 00:49:49,210
github or whatever and then there's like

1191
00:49:46,870 --> 00:49:51,609
this meta repository<font color="#CCCCCC"> that has links to</font>

1192
00:49:49,210 --> 00:49:56,790
<font color="#E5E5E5">all the implementations has</font><font color="#CCCCCC"> we'll have a</font>

1193
00:49:51,610 --> 00:49:59,470
link to<font color="#E5E5E5"> this talk and yeah basically</font>

1194
00:49:56,790 --> 00:50:01,420
<font color="#E5E5E5">check it out what your own driver no</font>

1195
00:49:59,470 --> 00:50:03,750
<font color="#CCCCCC">current code needed thanks for your</font>

1196
00:50:01,420 --> 00:50:03,750
attention

1197
00:50:16,460 --> 00:50:21,290
thank you<font color="#CCCCCC"> very</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> all southern</font><font color="#E5E5E5"> and</font>

1198
00:50:19,080 --> 00:50:25,049
Sebastian we do have time for<font color="#E5E5E5"> questions</font>

1199
00:50:21,290 --> 00:50:25,980
<font color="#E5E5E5">please line up at the microphones and to</font>

1200
00:50:25,050 --> 00:50:28,920
get it<font color="#E5E5E5"> started</font>

1201
00:50:25,980 --> 00:50:32,610
please a question from our signal<font color="#CCCCCC"> in row</font>

1202
00:50:28,920 --> 00:50:34,470
from<font color="#E5E5E5"> the internet so the</font><font color="#CCCCCC"> IRC first of</font>

1203
00:50:32,610 --> 00:50:36,120
<font color="#CCCCCC">all was wondering why was the best</font>

1204
00:50:34,470 --> 00:50:41,250
proposal only<font color="#E5E5E5"> offered as a bachelor</font>

1205
00:50:36,120 --> 00:50:43,140
thesis<font color="#CCCCCC"> yeah the best question kind of</font>

1206
00:50:41,250 --> 00:50:45,180
expected herself<font color="#E5E5E5"> like about adding</font><font color="#CCCCCC"> new</font>

1207
00:50:43,140 --> 00:50:49,259
random language<font color="#CCCCCC"> results</font><font color="#E5E5E5"> well why can't I</font>

1208
00:50:45,180 --> 00:50:51,330
do<font color="#CCCCCC"> it in - the the problem is</font><font color="#E5E5E5"> I tried to</font>

1209
00:50:49,260 --> 00:50:53,400
implement it in version doesn't work the

1210
00:50:51,330 --> 00:50:54,750
way<font color="#CCCCCC"> I wanted to</font><font color="#E5E5E5"> work I would need to</font>

1211
00:50:53,400 --> 00:50:58,440
write more C code<font color="#CCCCCC"> they're the way I</font>

1212
00:50:54,750 --> 00:51:03,060
<font color="#CCCCCC">tried</font><font color="#E5E5E5"> it it does</font><font color="#CCCCCC"> not work if I wrote a</font>

1213
00:50:58,440 --> 00:51:05,340
<font color="#E5E5E5">short C program that called the MF thing</font>

1214
00:51:03,060 --> 00:51:08,759
and then<font color="#CCCCCC"> just slept forever</font><font color="#E5E5E5"> and then the</font>

1215
00:51:05,340 --> 00:51:10,980
idea was<font color="#E5E5E5"> to get the to access the</font>

1216
00:51:08,760 --> 00:51:13,740
address<font color="#E5E5E5"> space of that program that just</font>

1217
00:51:10,980 --> 00:51:15,660
called the MF via the<font color="#E5E5E5"> track</font><font color="#CCCCCC"> FS system</font>

1218
00:51:13,740 --> 00:51:17,069
and then the other<font color="#E5E5E5"> success metric thing</font>

1219
00:51:15,660 --> 00:51:19,049
which has all the things none with DD

1220
00:51:17,070 --> 00:51:21,840
you can write and<font color="#E5E5E5"> read from there but it</font>

1221
00:51:19,050 --> 00:51:23,400
breaks at some point<font color="#E5E5E5"> because you can it</font>

1222
00:51:21,840 --> 00:51:25,230
goes through when reading<font color="#E5E5E5"> but if you</font>

1223
00:51:23,400 --> 00:51:26,880
write<font color="#CCCCCC"> something at some point via Park</font>

1224
00:51:25,230 --> 00:51:29,730
FS that doesn't go<font color="#CCCCCC"> through</font><font color="#E5E5E5"> the PCI</font>

1225
00:51:26,880 --> 00:51:31,230
<font color="#CCCCCC">Express so didn't work and</font><font color="#E5E5E5"> only wanted</font>

1226
00:51:29,730 --> 00:51:32,400
as a bachelor thesis<font color="#E5E5E5"> because kind of a</font>

1227
00:51:31,230 --> 00:51:35,810
master series should maybe be a little

1228
00:51:32,400 --> 00:51:35,810
<font color="#E5E5E5">bit more serious than a job driver</font>

1229
00:51:36,810 --> 00:51:42,069
yeah maybe a more serious one<font color="#CCCCCC"> godness</font>

1230
00:51:40,270 --> 00:51:44,200
asking how to use the chest to handle

1231
00:51:42,069 --> 00:51:48,220
interrupt requests or a<font color="#E5E5E5"> code with strict</font>

1232
00:51:44,200 --> 00:51:49,720
timing requirements<font color="#CCCCCC"> if I have strict</font>

1233
00:51:48,220 --> 00:51:52,839
timing<font color="#CCCCCC"> requirements</font><font color="#E5E5E5"> I'm not going to use</font>

1234
00:51:49,720 --> 00:51:54,220
interrupt interrupt<font color="#CCCCCC"> if I have strict</font>

1235
00:51:52,839 --> 00:51:56,230
timing requirements<font color="#E5E5E5"> I just pull the</font>

1236
00:51:54,220 --> 00:51:58,270
device all<font color="#CCCCCC"> the time</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> how</font>

1237
00:51:56,230 --> 00:52:00,069
basically all<font color="#E5E5E5"> user space</font><font color="#CCCCCC"> travel sake</font>

1238
00:51:58,270 --> 00:52:02,220
just ask the device is there and you

1239
00:52:00,069 --> 00:52:05,410
<font color="#CCCCCC">packet 1</font><font color="#E5E5E5"> million</font><font color="#CCCCCC"> times a second and</font>

1240
00:52:02,220 --> 00:52:09,000
interrupts<font color="#E5E5E5"> are one of the slowest way to</font>

1241
00:52:05,410 --> 00:52:10,960
communicate<font color="#E5E5E5"> between CPU and device just</font>

1242
00:52:09,000 --> 00:52:12,760
receiving the<font color="#E5E5E5"> interrupt requires you to</font>

1243
00:52:10,960 --> 00:52:14,680
do a context switch on the CPU then you

1244
00:52:12,760 --> 00:52:16,000
have to do a context switch back because

1245
00:52:14,680 --> 00:52:17,799
you<font color="#E5E5E5"> don't want to do too much</font><font color="#CCCCCC"> in the</font>

1246
00:52:16,000 --> 00:52:19,359
interrupt handler and then you have to

1247
00:52:17,800 --> 00:52:20,740
play the device<font color="#CCCCCC"> anyways because to</font>

1248
00:52:19,359 --> 00:52:22,990
interrupt<font color="#E5E5E5"> just tells you that something</font>

1249
00:52:20,740 --> 00:52:25,270
has changed<font color="#CCCCCC"> so if you really care about</font>

1250
00:52:22,990 --> 00:52:28,200
the latency then you just pull the

1251
00:52:25,270 --> 00:52:31,180
device all<font color="#E5E5E5"> the time and for</font><font color="#CCCCCC"> userspace</font>

1252
00:52:28,200 --> 00:52:32,680
<font color="#CCCCCC">interrupt</font><font color="#E5E5E5"> check out and we have I or the</font>

1253
00:52:31,180 --> 00:52:33,848
<font color="#CCCCCC">vfi</font><font color="#E5E5E5"> or I'm back you can do like an</font>

1254
00:52:32,680 --> 00:52:35,230
Apollo on something and<font color="#E5E5E5"> then you get</font>

1255
00:52:33,849 --> 00:52:38,650
notified<font color="#CCCCCC"> if there's an interrupt if you</font>

1256
00:52:35,230 --> 00:52:40,869
really need that<font color="#CCCCCC"> ok let's go to the</font><font color="#E5E5E5"> hall</font>

1257
00:52:38,650 --> 00:52:42,819
questions<font color="#CCCCCC"> please keep your questions to</font>

1258
00:52:40,869 --> 00:52:44,740
one sentence only<font color="#E5E5E5"> and</font><font color="#CCCCCC"> only ask questions</font>

1259
00:52:42,819 --> 00:52:47,410
<font color="#CCCCCC">because</font><font color="#E5E5E5"> there's many of them microphone</font>

1260
00:52:44,740 --> 00:52:50,229
<font color="#CCCCCC">number two please</font><font color="#E5E5E5"> so when you compare</font>

1261
00:52:47,410 --> 00:52:53,890
different<font color="#CCCCCC"> user space</font><font color="#E5E5E5"> drivers</font><font color="#CCCCCC"> in</font>

1262
00:52:50,230 --> 00:52:57,460
different languages<font color="#E5E5E5"> why was rust slower</font>

1263
00:52:53,890 --> 00:53:01,569
than<font color="#E5E5E5"> C given</font><font color="#CCCCCC"> that it the memory safety</font>

1264
00:52:57,460 --> 00:53:04,000
<font color="#E5E5E5">is</font><font color="#CCCCCC"> compile time</font><font color="#E5E5E5"> yeah well we have a few</font>

1265
00:53:01,569 --> 00:53:10,000
<font color="#CCCCCC">more memory of relations because of the</font>

1266
00:53:04,000 --> 00:53:11,829
<font color="#E5E5E5">safety so we we have to move the the</font>

1267
00:53:10,000 --> 00:53:15,849
<font color="#E5E5E5">package structures from inside the</font>

1268
00:53:11,829 --> 00:53:18,670
driver to to outside<font color="#E5E5E5"> to the user and you</font>

1269
00:53:15,849 --> 00:53:20,530
don't have<font color="#E5E5E5"> third and</font><font color="#CCCCCC"> C so rust was</font><font color="#E5E5E5"> a bit</font>

1270
00:53:18,670 --> 00:53:23,470
slower because of<font color="#E5E5E5"> that but</font><font color="#CCCCCC"> I think you</font>

1271
00:53:20,530 --> 00:53:25,180
could optimize it maybe a bit better

1272
00:53:23,470 --> 00:53:28,689
because<font color="#E5E5E5"> yeah well it was just a</font>

1273
00:53:25,180 --> 00:53:31,089
bachelor's<font color="#CCCCCC"> thesis or III didn't have</font>

1274
00:53:28,690 --> 00:53:34,270
that much time but yeah I guess it could

1275
00:53:31,089 --> 00:53:37,480
<font color="#CCCCCC">be</font><font color="#E5E5E5"> a bit</font><font color="#CCCCCC"> faster but I think it</font><font color="#E5E5E5"> would</font>

1276
00:53:34,270 --> 00:53:38,890
still<font color="#CCCCCC"> be a bit slower than</font><font color="#E5E5E5"> C also my C</font>

1277
00:53:37,480 --> 00:53:42,210
driver doesn't do any<font color="#E5E5E5"> bounce checks at</font>

1278
00:53:38,890 --> 00:53:42,210
all just<font color="#E5E5E5"> assume so don't do I think</font>

1279
00:53:44,420 --> 00:53:48,829
you mentioned<font color="#E5E5E5"> Haskell in the beginning</font>

1280
00:53:46,460 --> 00:53:50,900
but it wasn't in the comparison<font color="#E5E5E5"> can you</font>

1281
00:53:48,829 --> 00:53:52,279
talk about<font color="#E5E5E5"> that Haskell</font><font color="#CCCCCC"> is not yet</font>

1282
00:53:50,900 --> 00:53:54,380
optimized for performance<font color="#E5E5E5"> that</font><font color="#CCCCCC"> would</font>

1283
00:53:52,279 --> 00:53:56,059
have been unfair<font color="#CCCCCC"> to @a</font><font color="#E5E5E5"> unfinished</font>

1284
00:53:54,380 --> 00:53:57,920
version<font color="#E5E5E5"> for it it's currently still</font>

1285
00:53:56,059 --> 00:54:01,460
quite slow and<font color="#E5E5E5"> I I didn't want to add it</font>

1286
00:53:57,920 --> 00:54:03,500
<font color="#E5E5E5">there microphone</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> four please or</font>

1287
00:54:01,460 --> 00:54:05,359
<font color="#E5E5E5">something or</font><font color="#CCCCCC"> something thank you very</font>

1288
00:54:03,500 --> 00:54:07,640
much<font color="#E5E5E5"> have you consider your internal</font>

1289
00:54:05,359 --> 00:54:09,589
programming languages like<font color="#CCCCCC"> Idris or Koch</font>

1290
00:54:07,640 --> 00:54:13,640
where your compiler can check the logic

1291
00:54:09,589 --> 00:54:17,859
of<font color="#CCCCCC"> your driver</font><font color="#E5E5E5"> um I don't have a student</font>

1292
00:54:13,640 --> 00:54:20,299
<font color="#CCCCCC">for</font><font color="#E5E5E5"> that to implement it but yeah</font>

1293
00:54:17,859 --> 00:54:22,160
microphone<font color="#E5E5E5"> number one please okay I have</font>

1294
00:54:20,299 --> 00:54:24,440
seen several<font color="#CCCCCC"> languages with garbage</font>

1295
00:54:22,160 --> 00:54:27,410
collector<font color="#E5E5E5"> including including go so my</font>

1296
00:54:24,440 --> 00:54:29,240
question is how<font color="#CCCCCC"> often</font><font color="#E5E5E5"> do the GC stop the</font>

1297
00:54:27,410 --> 00:54:34,970
war happens and what is the general heap

1298
00:54:29,240 --> 00:54:36,950
sizes<font color="#E5E5E5"> how often I don't know how often</font>

1299
00:54:34,970 --> 00:54:39,470
<font color="#E5E5E5">and the latency shot you how long it</font>

1300
00:54:36,950 --> 00:54:40,970
takes<font color="#E5E5E5"> which was like up to</font><font color="#CCCCCC"> 40</font>

1301
00:54:39,470 --> 00:54:42,410
microseconds which depending<font color="#E5E5E5"> on your</font>

1302
00:54:40,970 --> 00:54:44,359
<font color="#CCCCCC">application might or might not</font><font color="#E5E5E5"> be a</font>

1303
00:54:42,410 --> 00:54:46,609
<font color="#E5E5E5">problem there's a few other data from</font>

1304
00:54:44,359 --> 00:54:47,930
<font color="#CCCCCC">when</font><font color="#E5E5E5"> we reference this paper of the</font><font color="#CCCCCC"> guys</font>

1305
00:54:46,609 --> 00:54:50,000
who implemented<font color="#E5E5E5"> the whole operating</font>

1306
00:54:47,930 --> 00:54:53,089
system and go they mentioned they see up

1307
00:54:50,000 --> 00:55:01,190
to 200 or 300 microseconds<font color="#E5E5E5"> of past times</font>

1308
00:54:53,089 --> 00:55:04,190
<font color="#E5E5E5">and heap size</font><font color="#CCCCCC"> maybe something about the</font>

1309
00:55:01,190 --> 00:55:06,799
<font color="#E5E5E5">garbage collector I'm not even sure if</font>

1310
00:55:04,190 --> 00:55:10,549
how much it actually<font color="#E5E5E5"> works because the</font>

1311
00:55:06,799 --> 00:55:13,400
go profiling just dropped this<font color="#E5E5E5"> node as</font>

1312
00:55:10,549 --> 00:55:16,940
<font color="#E5E5E5">it was so</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> time compared to</font><font color="#CCCCCC"> the</font>

1313
00:55:13,400 --> 00:55:19,960
<font color="#E5E5E5">others so it's basically irrelevant</font>

1314
00:55:16,940 --> 00:55:22,490
except for<font color="#E5E5E5"> probably some latency</font>

1315
00:55:19,960 --> 00:55:26,630
microphone number<font color="#CCCCCC"> three please yeah I</font>

1316
00:55:22,490 --> 00:55:28,879
missed a couple<font color="#E5E5E5"> of languages OpenCL and</font>

1317
00:55:26,630 --> 00:55:31,730
<font color="#CCCCCC">CUDA</font><font color="#E5E5E5"> not not because they're</font>

1318
00:55:28,880 --> 00:55:33,980
particularly yeah languages but it would

1319
00:55:31,730 --> 00:55:36,710
be<font color="#CCCCCC"> interesting to</font><font color="#E5E5E5"> have the</font><font color="#CCCCCC"> GP</font><font color="#E5E5E5"> the</font>

1320
00:55:33,980 --> 00:55:41,960
network<font color="#E5E5E5"> a paper out</font><font color="#CCCCCC"> there that's called</font>

1321
00:55:36,710 --> 00:55:44,140
packet radar<font color="#E5E5E5"> thing yes they do exactly</font>

1322
00:55:41,960 --> 00:55:44,140
what

1323
00:55:45,390 --> 00:55:50,920
there's also another paper out there

1324
00:55:47,829 --> 00:55:52,269
<font color="#E5E5E5">called raising</font><font color="#CCCCCC"> the bar for</font><font color="#E5E5E5"> GP packet</font>

1325
00:55:50,920 --> 00:55:54,430
processing or something like this

1326
00:55:52,269 --> 00:55:56,500
they basically argue against<font color="#CCCCCC"> that the</font>

1327
00:55:54,430 --> 00:55:58,618
main<font color="#E5E5E5"> problem is if you are transferring</font>

1328
00:55:56,500 --> 00:56:01,720
<font color="#CCCCCC">the packets between</font><font color="#E5E5E5"> the network card and</font>

1329
00:55:58,619 --> 00:56:03,490
GPU<font color="#E5E5E5"> this is kind of slow and you need to</font>

1330
00:56:01,720 --> 00:56:05,348
use gigantic batch sizes<font color="#E5E5E5"> there the</font>

1331
00:56:03,490 --> 00:56:07,660
<font color="#CCCCCC">packet shader guys used</font><font color="#E5E5E5"> to think</font><font color="#CCCCCC"> batch</font>

1332
00:56:05,349 --> 00:56:09,519
size of<font color="#CCCCCC"> 4000 or 8000 which</font><font color="#E5E5E5"> effect</font>

1333
00:56:07,660 --> 00:56:12,460
latency<font color="#E5E5E5"> and they don't have a proper</font>

1334
00:56:09,519 --> 00:56:14,109
latency evaluation wonder why but if

1335
00:56:12,460 --> 00:56:15,400
you're interested<font color="#CCCCCC"> and GPU packet</font>

1336
00:56:14,109 --> 00:56:17,319
processing<font color="#E5E5E5"> read that packet</font><font color="#CCCCCC"> read</font><font color="#E5E5E5"> up</font>

1337
00:56:15,400 --> 00:56:19,750
iPods a few years old thank you

1338
00:56:17,319 --> 00:56:23,170
microphone number<font color="#CCCCCC"> one please so how do</font>

1339
00:56:19,750 --> 00:56:25,390
you<font color="#E5E5E5"> deal with i/o</font><font color="#CCCCCC"> or during the x86</font><font color="#E5E5E5"> will</font>

1340
00:56:23,170 --> 00:56:28,539
guarantee you that<font color="#E5E5E5"> this the order in</font>

1341
00:56:25,390 --> 00:56:31,269
<font color="#CCCCCC">which the CPU posts</font><font color="#E5E5E5"> IO</font><font color="#CCCCCC"> accesses is the</font>

1342
00:56:28,539 --> 00:56:33,970
same as the device receives them but on

1343
00:56:31,269 --> 00:56:36,640
other platforms this<font color="#E5E5E5"> is not the case and</font>

1344
00:56:33,970 --> 00:56:40,269
if you do it with<font color="#E5E5E5"> you</font><font color="#CCCCCC"> i/o the UI or</font>

1345
00:56:36,640 --> 00:56:43,420
<font color="#E5E5E5">doesn't give you any such guarantee well</font>

1346
00:56:40,269 --> 00:56:45,669
for memory ordering it's highly specific

1347
00:56:43,420 --> 00:56:47,529
<font color="#E5E5E5">to the device you are using which memory</font>

1348
00:56:45,670 --> 00:56:50,200
ordering semantics you<font color="#E5E5E5"> are using the the</font>

1349
00:56:47,529 --> 00:56:51,849
<font color="#CCCCCC">great</font><font color="#E5E5E5"> thing is in the in the device we</font>

1350
00:56:50,200 --> 00:56:55,419
<font color="#CCCCCC">are using here the the Intel device in</font>

1351
00:56:51,849 --> 00:56:58,660
the<font color="#CCCCCC"> s11</font><font color="#E5E5E5"> location where I'm so really</font>

1352
00:56:55,420 --> 00:56:59,920
sure that<font color="#CCCCCC"> I do need a release memory</font>

1353
00:56:58,660 --> 00:57:02,288
<font color="#CCCCCC">other semantics because</font><font color="#E5E5E5"> there's</font>

1354
00:56:59,920 --> 00:57:04,240
something<font color="#CCCCCC"> which clearly said some flack</font>

1355
00:57:02,289 --> 00:57:06,730
and then the device<font color="#E5E5E5"> with some other</font>

1356
00:57:04,240 --> 00:57:08,470
memory based on<font color="#E5E5E5"> listen and like 99% sure</font>

1357
00:57:06,730 --> 00:57:09,819
that<font color="#E5E5E5"> this should be</font><font color="#CCCCCC"> release memory order</font>

1358
00:57:08,470 --> 00:57:11,950
there but none of the driver

1359
00:57:09,819 --> 00:57:14,859
implementations has any release memory

1360
00:57:11,950 --> 00:57:17,859
order barrier there and so we don't<font color="#E5E5E5"> we</font>

1361
00:57:14,859 --> 00:57:20,650
don't<font color="#E5E5E5"> need it here</font><font color="#CCCCCC"> and other</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> that</font>

1362
00:57:17,859 --> 00:57:23,049
for going to ask you of course have

1363
00:57:20,650 --> 00:57:25,869
<font color="#CCCCCC">low-level primitives to</font><font color="#E5E5E5"> to ensure</font><font color="#CCCCCC"> or to</font>

1364
00:57:23,049 --> 00:57:28,538
enforce<font color="#CCCCCC"> hardware memory barriers</font><font color="#E5E5E5"> for</font>

1365
00:57:25,869 --> 00:57:31,240
other<font color="#E5E5E5"> languages if you for</font><font color="#CCCCCC"> example check</font>

1366
00:57:28,539 --> 00:57:34,150
out the snap driver which is written in

1367
00:57:31,240 --> 00:57:35,740
<font color="#E5E5E5">Lua</font><font color="#CCCCCC"> they have</font><font color="#E5E5E5"> a little</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> stop which</font>

1368
00:57:34,150 --> 00:57:39,490
<font color="#CCCCCC">cards right</font><font color="#E5E5E5"> entrance instruction at the</font>

1369
00:57:35,740 --> 00:57:41,258
<font color="#E5E5E5">right place</font><font color="#CCCCCC"> Thanks number four please</font>

1370
00:57:39,490 --> 00:57:43,779
thank you

1371
00:57:41,259 --> 00:57:47,200
yeah the abstract of this talk mentioned

1372
00:57:43,779 --> 00:57:49,569
that the user space<font color="#CCCCCC"> implementation</font><font color="#E5E5E5"> was</font>

1373
00:57:47,200 --> 00:57:52,029
<font color="#E5E5E5">six to ten times faster than the in</font>

1374
00:57:49,569 --> 00:57:53,980
kernel implementation what<font color="#E5E5E5"> is just</font>

1375
00:57:52,029 --> 00:57:56,620
because of<font color="#CCCCCC"> the batch sizes or were there</font>

1376
00:57:53,980 --> 00:57:59,500
other reasons<font color="#CCCCCC"> for that</font><font color="#E5E5E5"> so this is</font>

1377
00:57:56,620 --> 00:58:01,270
mainly due to the<font color="#E5E5E5"> to the back</font><font color="#CCCCCC"> side the</font>

1378
00:57:59,500 --> 00:58:04,030
current<font color="#E5E5E5"> implementation when using</font><font color="#CCCCCC"> HDPE</font>

1379
00:58:01,270 --> 00:58:06,610
is<font color="#E5E5E5"> also fastest or was compared to</font>

1380
00:58:04,030 --> 00:58:09,160
<font color="#CCCCCC">current</font><font color="#E5E5E5"> without</font><font color="#CCCCCC"> XTP</font><font color="#E5E5E5"> colonel with HDPE I</font>

1381
00:58:06,610 --> 00:58:11,080
think we are 30%<font color="#CCCCCC"> faster</font><font color="#E5E5E5"> also if you have</font>

1382
00:58:09,160 --> 00:58:13,569
a kernel<font color="#CCCCCC"> that</font><font color="#E5E5E5"> can exceed to</font><font color="#CCCCCC"> http between</font>

1383
00:58:11,080 --> 00:58:16,270
different<font color="#CCCCCC"> necks</font><font color="#E5E5E5"> because most</font><font color="#CCCCCC"> Nix can</font>

1384
00:58:13,570 --> 00:58:19,600
just<font color="#CCCCCC"> tentacles</font><font color="#E5E5E5"> different definite yes</font>

1385
00:58:16,270 --> 00:58:21,910
next<font color="#CCCCCC"> question again from the</font><font color="#E5E5E5"> internet so</font>

1386
00:58:19,600 --> 00:58:23,830
<font color="#CCCCCC">our is asking have you</font><font color="#E5E5E5"> considered</font>

1387
00:58:21,910 --> 00:58:26,200
writing<font color="#CCCCCC"> user space drivers for the more</font>

1388
00:58:23,830 --> 00:58:28,000
inherently insecure<font color="#E5E5E5"> due to specification</font>

1389
00:58:26,200 --> 00:58:32,290
complexity things like the Bluetooth

1390
00:58:28,000 --> 00:58:37,000
stack or things like<font color="#E5E5E5"> this yeah</font><font color="#CCCCCC"> would be</font>

1391
00:58:32,290 --> 00:58:39,970
<font color="#E5E5E5">would</font><font color="#CCCCCC"> be interesting yeah I guess that's</font>

1392
00:58:37,000 --> 00:58:41,680
a<font color="#E5E5E5"> good topic for</font><font color="#CCCCCC"> further</font><font color="#E5E5E5"> research we</font>

1393
00:58:39,970 --> 00:58:44,319
just went for<font color="#E5E5E5"> a</font><font color="#CCCCCC"> network</font><font color="#E5E5E5"> because it's</font>

1394
00:58:41,680 --> 00:58:46,629
<font color="#E5E5E5">really common to have user space network</font>

1395
00:58:44,320 --> 00:58:48,310
<font color="#E5E5E5">stuff all</font><font color="#CCCCCC"> direction</font><font color="#E5E5E5"> all like look at</font>

1396
00:58:46,630 --> 00:58:50,550
<font color="#E5E5E5">your iPhone or whatever there's a user</font>

1397
00:58:48,310 --> 00:58:54,370
space<font color="#E5E5E5"> TCP stack running on it so yeah</font>

1398
00:58:50,550 --> 00:58:56,230
number<font color="#E5E5E5"> three please no thanks for the</font>

1399
00:58:54,370 --> 00:58:59,819
talk<font color="#CCCCCC"> just a little question does the</font>

1400
00:58:56,230 --> 00:58:59,820
iommu affect performance

1401
00:59:00,030 --> 00:59:06,940
<font color="#CCCCCC">you're not yet sure</font><font color="#E5E5E5"> you can ask him</font>

1402
00:59:04,030 --> 00:59:09,160
afterwards as<font color="#E5E5E5"> fast</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have evaluated it</font>

1403
00:59:06,940 --> 00:59:14,740
does not yet affect performance there's

1404
00:59:09,160 --> 00:59:20,319
also a<font color="#E5E5E5"> paper called</font><font color="#CCCCCC"> I was</font><font color="#E5E5E5"> called PCIe</font>

1405
00:59:14,740 --> 00:59:23,080
bench PCIe bench something come last

1406
00:59:20,320 --> 00:59:24,580
<font color="#E5E5E5">yeah I think and you can read this paper</font>

1407
00:59:23,080 --> 00:59:27,130
they<font color="#CCCCCC"> have a performance evaluation of</font>

1408
00:59:24,580 --> 00:59:30,040
the IOM you so yes there is some effects

1409
00:59:27,130 --> 00:59:31,990
because the<font color="#CCCCCC"> Tildy size is smaller on the</font>

1410
00:59:30,040 --> 00:59:34,690
<font color="#E5E5E5">IOM you but we couldn't</font><font color="#CCCCCC"> measure it in a</font>

1411
00:59:31,990 --> 00:59:38,560
lot<font color="#CCCCCC"> I set up yet microphone number one</font>

1412
00:59:34,690 --> 00:59:41,380
please<font color="#CCCCCC"> when you access ring buffers you</font>

1413
00:59:38,560 --> 00:59:43,900
<font color="#E5E5E5">usually have to</font><font color="#CCCCCC"> have like a an excess</font>

1414
00:59:41,380 --> 00:59:45,910
<font color="#CCCCCC">ones macro that you used to access the</font>

1415
00:59:43,900 --> 00:59:48,580
<font color="#E5E5E5">memory in C because</font><font color="#CCCCCC"> C is actually</font>

1416
00:59:45,910 --> 00:59:50,740
allowed to<font color="#E5E5E5"> change the semantics of the</font>

1417
00:59:48,580 --> 00:59:52,390
implementation<font color="#CCCCCC"> in a way where instead of</font>

1418
00:59:50,740 --> 00:59:54,279
say reading memory is stored in a

1419
00:59:52,390 --> 00:59:56,650
variable<font color="#CCCCCC"> and then using that variable</font>

1420
00:59:54,280 --> 01:00:00,040
would translate into something<font color="#CCCCCC"> that</font>

1421
00:59:56,650 --> 01:00:02,320
would read the memory twice<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is</font>

1422
01:00:00,040 --> 01:00:04,960
this was a problems<font color="#CCCCCC"> was excess a 155 I</font>

1423
01:00:02,320 --> 01:00:07,660
believe and were in net back net front

1424
01:00:04,960 --> 01:00:09,670
<font color="#E5E5E5">the communication actually broken in</font>

1425
01:00:07,660 --> 01:00:12,788
that way because<font color="#CCCCCC"> you had to talk to buck</font>

1426
01:00:09,670 --> 01:00:14,140
how would you enforce like a<font color="#E5E5E5"> single</font>

1427
01:00:12,789 --> 01:00:16,750
memory access<font color="#CCCCCC"> and all of those</font>

1428
01:00:14,140 --> 01:00:20,650
programming languages and for us<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of</font>

1429
01:00:16,750 --> 01:00:22,900
us I have but the<font color="#E5E5E5"> thing that's most of</font>

1430
01:00:20,650 --> 01:00:25,440
these programming languages do need to

1431
01:00:22,900 --> 01:00:28,029
copy the descriptive and using it so the

1432
01:00:25,440 --> 01:00:29,470
Turing<font color="#CCCCCC"> sort the descriptors the</font>

1433
01:00:28,029 --> 01:00:31,450
descriptors are<font color="#E5E5E5"> basically pointers to</font>

1434
01:00:29,470 --> 01:00:33,220
some other buffers and<font color="#E5E5E5"> the critical part</font>

1435
01:00:31,450 --> 01:00:34,569
is when reading the descriptor and I

1436
01:00:33,220 --> 01:00:37,089
think all<font color="#CCCCCC"> of the language implementation</font>

1437
01:00:34,569 --> 01:00:39,940
copy the whole descriptor<font color="#CCCCCC"> just sixteen</font>

1438
01:00:37,089 --> 01:00:45,700
<font color="#E5E5E5">bytes okay so a memory is always copied</font>

1439
01:00:39,940 --> 01:00:49,809
guaranteed I hope so please do check<font color="#E5E5E5"> in</font>

1440
01:00:45,700 --> 01:00:51,730
<font color="#E5E5E5">the in the girl code we had the the the</font>

1441
01:00:49,809 --> 01:00:53,529
atomic read thing and I hope that only

1442
01:00:51,730 --> 01:00:57,670
does one access not<font color="#E5E5E5"> about</font><font color="#CCCCCC"> it considers a</font>

1443
01:00:53,529 --> 01:01:00,279
<font color="#CCCCCC">back in goes</font><font color="#E5E5E5"> my atomic it twice and see</font>

1444
01:00:57,670 --> 01:01:02,109
<font color="#E5E5E5">I also copy it I think we have time for</font>

1445
01:01:00,279 --> 01:01:05,440
one<font color="#CCCCCC"> last question</font><font color="#E5E5E5"> from microphone number</font>

1446
01:01:02,109 --> 01:01:07,690
<font color="#CCCCCC">two please how can we convince other</font>

1447
01:01:05,440 --> 01:01:09,849
people<font color="#E5E5E5"> especially other developers</font><font color="#CCCCCC"> and</font>

1448
01:01:07,690 --> 01:01:11,920
the business people of the necessity of

1449
01:01:09,849 --> 01:01:13,539
moving away<font color="#CCCCCC"> from</font><font color="#E5E5E5"> C learning a new</font>

1450
01:01:11,920 --> 01:01:17,440
language and investing the time<font color="#E5E5E5"> of</font>

1451
01:01:13,539 --> 01:01:21,099
developing stuff in it yeah I honestly

1452
01:01:17,440 --> 01:01:23,130
don't know<font color="#CCCCCC"> I'm it's like a mystery to me</font>

1453
01:01:21,099 --> 01:01:29,349
why people<font color="#CCCCCC"> keep writing stuff in</font><font color="#E5E5E5"> the</font>

1454
01:01:23,130 --> 01:01:31,400
yeah<font color="#E5E5E5"> no idea sorry thank you very much</font>

1455
01:01:29,349 --> 01:01:35,949
<font color="#E5E5E5">to Paul Simon</font><font color="#CCCCCC"> interaction</font>

1456
01:01:31,400 --> 01:01:35,949
[Applause]

1457
01:01:36,160 --> 01:01:43,330
[Music]

1458
01:01:45,400 --> 01:01:58,060
[Music]

