1
00:00:02,830 --> 00:00:15,470
[Music]

2
00:00:17,600 --> 00:00:25,650
welcome to our<font color="#E5E5E5"> introduction</font><font color="#CCCCCC"> to deep</font>

3
00:00:21,000 --> 00:00:27,750
learning<font color="#E5E5E5"> with</font><font color="#CCCCCC"> toy B deep learning also</font>

4
00:00:25,650 --> 00:00:30,630
<font color="#E5E5E5">often called machine learning</font><font color="#CCCCCC"> is a</font>

5
00:00:27,750 --> 00:00:34,380
hybrid<font color="#E5E5E5"> which we heard here in the media</font>

6
00:00:30,630 --> 00:00:37,050
<font color="#E5E5E5">all the</font><font color="#CCCCCC"> time it's nearly</font><font color="#E5E5E5"> as bad</font><font color="#CCCCCC"> as</font>

7
00:00:34,380 --> 00:00:40,680
blockchain<font color="#E5E5E5"> it's a solution</font><font color="#CCCCCC"> for</font>

8
00:00:37,050 --> 00:00:43,019
everything<font color="#CCCCCC"> today</font><font color="#E5E5E5"> we'll get a sneak peek</font>

9
00:00:40,680 --> 00:00:45,800
into the internals of this<font color="#E5E5E5"> mystical</font>

10
00:00:43,020 --> 00:00:48,600
black box<font color="#E5E5E5"> they</font><font color="#CCCCCC"> are talking about and</font>

11
00:00:45,800 --> 00:00:49,949
<font color="#E5E5E5">Tommy will show us why</font><font color="#CCCCCC"> people who know</font>

12
00:00:48,600 --> 00:00:52,770
what machine learning<font color="#E5E5E5"> really</font><font color="#CCCCCC"> is about</font>

13
00:00:49,950 --> 00:00:53,690
<font color="#E5E5E5">have to facepalm so often when they read</font>

14
00:00:52,770 --> 00:00:57,300
the news

15
00:00:53,690 --> 00:00:59,750
so please welcome<font color="#E5E5E5"> Toby was a big round</font>

16
00:00:57,300 --> 00:00:59,750
of applause

17
00:01:06,060 --> 00:01:12,909
<font color="#E5E5E5">all right</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> morning and welcome to</font>

18
00:01:09,789 --> 00:01:14,649
<font color="#E5E5E5">introduction</font><font color="#CCCCCC"> to deep learning</font><font color="#E5E5E5"> the title</font>

19
00:01:12,909 --> 00:01:16,450
<font color="#E5E5E5">will</font><font color="#CCCCCC"> already tell you what this talk is</font>

20
00:01:14,649 --> 00:01:19,929
about<font color="#E5E5E5"> I want to give</font><font color="#CCCCCC"> you an introduction</font>

21
00:01:16,450 --> 00:01:23,200
<font color="#CCCCCC">onto how deep learning</font><font color="#E5E5E5"> works what</font>

22
00:01:19,929 --> 00:01:26,619
<font color="#E5E5E5">happens inside this black box</font><font color="#CCCCCC"> but first</font>

23
00:01:23,200 --> 00:01:28,659
of all<font color="#CCCCCC"> Who</font><font color="#E5E5E5"> am I</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> Toby it's a German</font>

24
00:01:26,619 --> 00:01:32,020
<font color="#E5E5E5">nickname as it has nothing</font><font color="#CCCCCC"> to do with</font>

25
00:01:28,659 --> 00:01:34,600
toys or<font color="#E5E5E5"> bees you might have heard my</font>

26
00:01:32,020 --> 00:01:35,560
voice before<font color="#E5E5E5"> because I host the new</font>

27
00:01:34,600 --> 00:01:37,630
<font color="#E5E5E5">scala podcast</font>

28
00:01:35,560 --> 00:01:40,119
dare I explain scientific topics in

29
00:01:37,630 --> 00:01:41,890
under<font color="#E5E5E5"> 10</font><font color="#CCCCCC"> minutes</font><font color="#E5E5E5"> I'll have to use a</font>

30
00:01:40,119 --> 00:01:43,569
<font color="#E5E5E5">little more time today and you'll also</font>

31
00:01:41,890 --> 00:01:47,619
<font color="#E5E5E5">have fancy animations which hopefully</font>

32
00:01:43,569 --> 00:01:50,049
will<font color="#E5E5E5"> help in my day job</font><font color="#CCCCCC"> I'm a research</font>

33
00:01:47,619 --> 00:01:53,170
scientist at an<font color="#CCCCCC"> institute for computer</font>

34
00:01:50,049 --> 00:01:56,170
vision<font color="#CCCCCC"> I</font><font color="#E5E5E5"> analyze microscopy images of</font>

35
00:01:53,170 --> 00:01:58,869
bone<font color="#E5E5E5"> marrow blood cells and try to find</font>

36
00:01:56,170 --> 00:02:02,020
ways<font color="#CCCCCC"> to teach the</font><font color="#E5E5E5"> computer to understand</font>

37
00:01:58,869 --> 00:02:04,959
what it sees<font color="#CCCCCC"> namely to differentiate</font>

38
00:02:02,020 --> 00:02:07,899
<font color="#E5E5E5">between certain cells or first of all</font>

39
00:02:04,959 --> 00:02:10,090
<font color="#E5E5E5">fine cells in an image which is</font><font color="#CCCCCC"> a task</font>

40
00:02:07,899 --> 00:02:13,420
that<font color="#E5E5E5"> is more complex than it might sound</font>

41
00:02:10,090 --> 00:02:17,739
like let me start with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> introduction</font>

42
00:02:13,420 --> 00:02:20,260
<font color="#CCCCCC">to deep learning we all know how</font><font color="#E5E5E5"> to code</font>

43
00:02:17,739 --> 00:02:22,810
<font color="#E5E5E5">we code in a</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> simple</font><font color="#CCCCCC"> way we have</font>

44
00:02:20,260 --> 00:02:25,420
some<font color="#E5E5E5"> input for all computer algorithm</font>

45
00:02:22,810 --> 00:02:29,410
then we have an algorithm<font color="#E5E5E5"> which says do</font>

46
00:02:25,420 --> 00:02:31,569
<font color="#E5E5E5">this do</font><font color="#CCCCCC"> that if this then that</font><font color="#E5E5E5"> and in</font>

47
00:02:29,410 --> 00:02:34,769
that<font color="#CCCCCC"> way we generate some output</font>

48
00:02:31,569 --> 00:02:37,480
this is not how machine learning works

49
00:02:34,769 --> 00:02:40,269
<font color="#E5E5E5">machine learning assumes you</font><font color="#CCCCCC"> have some</font>

50
00:02:37,480 --> 00:02:43,149
input<font color="#CCCCCC"> and you also have some output and</font>

51
00:02:40,269 --> 00:02:46,180
<font color="#E5E5E5">what you also have is some statistical</font>

52
00:02:43,150 --> 00:02:48,669
model<font color="#E5E5E5"> this statistical model is flexible</font>

53
00:02:46,180 --> 00:02:51,280
it has certain parameters<font color="#E5E5E5"> which it can</font>

54
00:02:48,669 --> 00:02:53,919
learn<font color="#E5E5E5"> from the distribution of inputs</font>

55
00:02:51,280 --> 00:02:56,620
and<font color="#CCCCCC"> outputs you give it for training</font><font color="#E5E5E5"> so</font>

56
00:02:53,919 --> 00:02:58,959
you<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> learn the statistical</font>

57
00:02:56,620 --> 00:03:01,530
model<font color="#CCCCCC"> to generate</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> desired output</font>

58
00:02:58,959 --> 00:03:04,299
<font color="#E5E5E5">from the desired from the given input</font>

59
00:03:01,530 --> 00:03:07,480
<font color="#E5E5E5">let me give you a really simple</font><font color="#CCCCCC"> example</font>

60
00:03:04,299 --> 00:03:10,540
of how<font color="#E5E5E5"> this</font><font color="#CCCCCC"> might work</font><font color="#E5E5E5"> let's say we have</font>

61
00:03:07,480 --> 00:03:13,689
two<font color="#CCCCCC"> animals oh well we have two kinds</font><font color="#E5E5E5"> of</font>

62
00:03:10,540 --> 00:03:16,060
animals unicorns<font color="#E5E5E5"> and rabbits</font><font color="#CCCCCC"> and now we</font>

63
00:03:13,689 --> 00:03:18,909
want to find<font color="#E5E5E5"> an</font><font color="#CCCCCC"> algorithm that tells us</font>

64
00:03:16,060 --> 00:03:19,490
whether this animal we have<font color="#E5E5E5"> right now as</font>

65
00:03:18,909 --> 00:03:24,769
an input

66
00:03:19,490 --> 00:03:27,020
<font color="#E5E5E5">is a rabbit or a unicorn</font><font color="#CCCCCC"> we can write a</font>

67
00:03:24,770 --> 00:03:29,240
simple<font color="#E5E5E5"> algorithm to do that but we can</font>

68
00:03:27,020 --> 00:03:31,630
also do it with<font color="#E5E5E5"> machine learning</font><font color="#CCCCCC"> the</font>

69
00:03:29,240 --> 00:03:34,670
first thing we need is<font color="#E5E5E5"> some</font><font color="#CCCCCC"> input I</font>

70
00:03:31,630 --> 00:03:37,220
choose<font color="#E5E5E5"> two features that</font><font color="#CCCCCC"> are able to</font>

71
00:03:34,670 --> 00:03:41,329
<font color="#E5E5E5">tell me</font><font color="#CCCCCC"> whether</font><font color="#E5E5E5"> this animal is a rabbit</font>

72
00:03:37,220 --> 00:03:43,550
<font color="#CCCCCC">or a unicorn namely speed and size we</font>

73
00:03:41,330 --> 00:03:46,160
call these features<font color="#E5E5E5"> and they describe</font>

74
00:03:43,550 --> 00:03:49,420
something<font color="#E5E5E5"> about what we want to classify</font>

75
00:03:46,160 --> 00:03:51,920
<font color="#CCCCCC">and the class is in this</font><font color="#E5E5E5"> case our animal</font>

76
00:03:49,420 --> 00:03:55,130
first thing I<font color="#E5E5E5"> need is some training data</font>

77
00:03:51,920 --> 00:03:59,089
<font color="#E5E5E5">some input the</font><font color="#CCCCCC"> input here are just pairs</font>

78
00:03:55,130 --> 00:04:01,910
of speed and size<font color="#E5E5E5"> what I also need is</font>

79
00:03:59,090 --> 00:04:04,010
<font color="#CCCCCC">information about the desired output</font><font color="#E5E5E5"> the</font>

80
00:04:01,910 --> 00:04:08,060
desired output of<font color="#CCCCCC"> course being the</font><font color="#E5E5E5"> class</font>

81
00:04:04,010 --> 00:04:13,250
<font color="#CCCCCC">so either unicorn</font><font color="#E5E5E5"> or rabbit here denoted</font>

82
00:04:08,060 --> 00:04:15,290
by<font color="#E5E5E5"> yellow and red axis so let's try to</font>

83
00:04:13,250 --> 00:04:18,529
find<font color="#E5E5E5"> a statistical model which we can</font>

84
00:04:15,290 --> 00:04:21,320
use<font color="#CCCCCC"> to separate this feature space into</font>

85
00:04:18,529 --> 00:04:23,840
two<font color="#E5E5E5"> halves one for the rabbits one for</font>

86
00:04:21,320 --> 00:04:25,580
the unicorns looking at<font color="#E5E5E5"> this we can</font>

87
00:04:23,840 --> 00:04:28,159
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> find a really simple</font>

88
00:04:25,580 --> 00:04:29,990
statistical model and our statistical

89
00:04:28,160 --> 00:04:33,290
model in this<font color="#CCCCCC"> case is just a straight</font>

90
00:04:29,990 --> 00:04:35,570
line<font color="#E5E5E5"> and the learning process is then to</font>

91
00:04:33,290 --> 00:04:39,440
find where in<font color="#E5E5E5"> this feature space</font><font color="#CCCCCC"> the</font>

92
00:04:35,570 --> 00:04:41,180
line<font color="#E5E5E5"> should be ideally for example here</font>

93
00:04:39,440 --> 00:04:44,240
right in the<font color="#E5E5E5"> middle between the two</font>

94
00:04:41,180 --> 00:04:46,510
<font color="#CCCCCC">classes rabbit and unicorn</font><font color="#E5E5E5"> of course</font>

95
00:04:44,240 --> 00:04:49,460
this<font color="#E5E5E5"> is an overly simplified</font><font color="#CCCCCC"> example</font>

96
00:04:46,510 --> 00:04:51,860
<font color="#E5E5E5">real world applications have feature</font>

97
00:04:49,460 --> 00:04:55,370
distributions which look much more like

98
00:04:51,860 --> 00:04:57,470
<font color="#E5E5E5">this so we have a gradient we don't have</font>

99
00:04:55,370 --> 00:04:59,390
a perfect<font color="#CCCCCC"> separation between those two</font>

100
00:04:57,470 --> 00:05:02,480
classes<font color="#CCCCCC"> and those two classes are</font>

101
00:04:59,390 --> 00:05:04,310
definitely not separable<font color="#E5E5E5"> by a line if we</font>

102
00:05:02,480 --> 00:05:07,400
look<font color="#E5E5E5"> again at some training samples</font>

103
00:05:04,310 --> 00:05:10,430
training samples are the data points<font color="#CCCCCC"> we</font>

104
00:05:07,400 --> 00:05:12,679
use for the machine learning process<font color="#CCCCCC"> so</font>

105
00:05:10,430 --> 00:05:15,200
to try<font color="#E5E5E5"> to find the parameters</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> our</font>

106
00:05:12,680 --> 00:05:18,440
statistical model if we<font color="#E5E5E5"> look at the line</font>

107
00:05:15,200 --> 00:05:21,560
again then this will<font color="#CCCCCC"> not be</font><font color="#E5E5E5"> able to</font>

108
00:05:18,440 --> 00:05:24,080
separate this training set well we will

109
00:05:21,560 --> 00:05:26,030
<font color="#E5E5E5">have a line</font><font color="#CCCCCC"> that has some arrows some</font>

110
00:05:24,080 --> 00:05:27,680
unicorns which will be<font color="#E5E5E5"> classified as</font>

111
00:05:26,030 --> 00:05:30,950
rabbits<font color="#CCCCCC"> some rabbits which will be</font>

112
00:05:27,680 --> 00:05:32,600
<font color="#E5E5E5">classified as unicorns this is what we</font>

113
00:05:30,950 --> 00:05:34,849
call<font color="#CCCCCC"> underfitting our</font>

114
00:05:32,600 --> 00:05:38,390
is just not<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> express</font><font color="#CCCCCC"> what we</font>

115
00:05:34,850 --> 00:05:41,060
<font color="#E5E5E5">wanted to learn there's the opposite</font>

116
00:05:38,390 --> 00:05:43,729
case the opposite case being we just

117
00:05:41,060 --> 00:05:46,460
learn all the training samples<font color="#E5E5E5"> by heart</font>

118
00:05:43,730 --> 00:05:48,890
<font color="#E5E5E5">this is if we have a very complex model</font>

119
00:05:46,460 --> 00:05:51,530
<font color="#E5E5E5">in just a few training samples to teach</font>

120
00:05:48,890 --> 00:05:53,840
the model what it should<font color="#E5E5E5"> learn in this</font>

121
00:05:51,530 --> 00:05:56,479
case we have a perfect<font color="#CCCCCC"> separation of</font>

122
00:05:53,840 --> 00:05:57,890
unicorns<font color="#CCCCCC"> and rabbits</font><font color="#E5E5E5"> at least for the</font>

123
00:05:56,480 --> 00:06:01,070
few data points<font color="#CCCCCC"> we have</font>

124
00:05:57,890 --> 00:06:03,860
if we draw<font color="#E5E5E5"> another example from the real</font>

125
00:06:01,070 --> 00:06:06,980
world<font color="#CCCCCC"> some other data points</font><font color="#E5E5E5"> they will</font>

126
00:06:03,860 --> 00:06:10,010
most<font color="#E5E5E5"> likely be wrong and this is what we</font>

127
00:06:06,980 --> 00:06:12,340
call overfitting<font color="#CCCCCC"> the perfect scenario in</font>

128
00:06:10,010 --> 00:06:15,680
this case would be<font color="#E5E5E5"> something like</font><font color="#CCCCCC"> this a</font>

129
00:06:12,340 --> 00:06:17,599
classifier which is really close<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

130
00:06:15,680 --> 00:06:19,970
<font color="#CCCCCC">distribution we have in the real world</font>

131
00:06:17,600 --> 00:06:23,300
<font color="#CCCCCC">and machine learning is</font><font color="#E5E5E5"> task with</font>

132
00:06:19,970 --> 00:06:26,600
finding this perfect model and its

133
00:06:23,300 --> 00:06:28,850
parameters<font color="#E5E5E5"> let me show you a different</font>

134
00:06:26,600 --> 00:06:32,720
<font color="#E5E5E5">kind of model something</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> probably all</font>

135
00:06:28,850 --> 00:06:35,150
have heard about neural networks<font color="#CCCCCC"> your</font>

136
00:06:32,720 --> 00:06:37,910
networks are inspired by<font color="#CCCCCC"> the brain or</font>

137
00:06:35,150 --> 00:06:41,210
more<font color="#CCCCCC"> precisely by the neurons in our</font>

138
00:06:37,910 --> 00:06:43,490
<font color="#E5E5E5">brain neurons are tiny objects tiny</font>

139
00:06:41,210 --> 00:06:46,609
cells in<font color="#E5E5E5"> our brain that</font><font color="#CCCCCC"> takes some input</font>

140
00:06:43,490 --> 00:06:47,120
<font color="#CCCCCC">and</font><font color="#E5E5E5"> generate some output sounds familiar</font>

141
00:06:46,610 --> 00:06:49,880
right

142
00:06:47,120 --> 00:06:52,190
<font color="#E5E5E5">we have inputs usually in the form of</font>

143
00:06:49,880 --> 00:06:54,350
<font color="#E5E5E5">electrical signals and if they were</font>

144
00:06:52,190 --> 00:06:57,380
strong enough<font color="#CCCCCC"> this</font><font color="#E5E5E5"> neuron will also send</font>

145
00:06:54,350 --> 00:06:59,930
out an electrical signal<font color="#CCCCCC"> and this is</font>

146
00:06:57,380 --> 00:07:03,680
<font color="#E5E5E5">something we can model in a computer</font>

147
00:06:59,930 --> 00:07:05,690
engineering<font color="#E5E5E5"> way so what we do is we take</font>

148
00:07:03,680 --> 00:07:08,600
in urine the neuron is just a simple

149
00:07:05,690 --> 00:07:11,120
<font color="#E5E5E5">mapping from input to output input here</font>

150
00:07:08,600 --> 00:07:16,030
just<font color="#CCCCCC"> three input nodes we denote them by</font>

151
00:07:11,120 --> 00:07:18,620
i1<font color="#E5E5E5"> i2 and</font><font color="#CCCCCC"> i3</font><font color="#E5E5E5"> and output denoted by</font><font color="#CCCCCC"> O</font><font color="#E5E5E5"> and</font>

152
00:07:16,030 --> 00:07:20,840
now you will actually<font color="#E5E5E5"> see some</font>

153
00:07:18,620 --> 00:07:23,030
mathematical equations they are not many

154
00:07:20,840 --> 00:07:24,679
<font color="#E5E5E5">of this these in this foundation talk</font>

155
00:07:23,030 --> 00:07:27,080
don't worry and it's really<font color="#E5E5E5"> simple</font>

156
00:07:24,680 --> 00:07:29,270
<font color="#CCCCCC">there's one more thing</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> need first</font>

157
00:07:27,080 --> 00:07:32,180
though if we want to<font color="#E5E5E5"> map input to output</font>

158
00:07:29,270 --> 00:07:34,549
<font color="#E5E5E5">in the way and</font><font color="#CCCCCC"> yearned us namely the</font>

159
00:07:32,180 --> 00:07:36,410
weights<font color="#E5E5E5"> the</font><font color="#CCCCCC"> weights are just some</font>

160
00:07:34,550 --> 00:07:41,240
arbitrary<font color="#E5E5E5"> numbers for now</font><font color="#CCCCCC"> let's call</font>

161
00:07:36,410 --> 00:07:43,910
<font color="#E5E5E5">them W 1 W 2 and W</font><font color="#CCCCCC"> 3 so we take those</font>

162
00:07:41,240 --> 00:07:46,190
<font color="#E5E5E5">weights and we multiply them with</font><font color="#CCCCCC"> the</font>

163
00:07:43,910 --> 00:07:49,220
input input<font color="#CCCCCC"> 1</font>

164
00:07:46,190 --> 00:07:52,850
wait<font color="#CCCCCC"> 1 input 2</font><font color="#E5E5E5"> times wait</font><font color="#CCCCCC"> 2 and so on</font>

165
00:07:49,220 --> 00:07:53,660
<font color="#CCCCCC">and this this sum just</font><font color="#E5E5E5"> will be our</font>

166
00:07:52,850 --> 00:07:57,110
output

167
00:07:53,660 --> 00:07:59,300
well not quite<font color="#E5E5E5"> we make it a little bit</font>

168
00:07:57,110 --> 00:08:01,460
<font color="#E5E5E5">more complicated we also use something</font>

169
00:07:59,300 --> 00:08:04,250
called an activation function<font color="#CCCCCC"> the</font>

170
00:08:01,460 --> 00:08:06,710
activation function is just<font color="#E5E5E5"> a mapping</font>

171
00:08:04,250 --> 00:08:08,930
<font color="#E5E5E5">from one scalar value to another scalar</font>

172
00:08:06,710 --> 00:08:13,609
value in this case from what we got as

173
00:08:08,930 --> 00:08:16,310
an output<font color="#E5E5E5"> the sum to something that more</font>

174
00:08:13,610 --> 00:08:18,680
closely fits what we<font color="#E5E5E5"> need this</font><font color="#CCCCCC"> could for</font>

175
00:08:16,310 --> 00:08:20,600
example<font color="#E5E5E5"> be something binary where we</font>

176
00:08:18,680 --> 00:08:22,370
have all the negative<font color="#E5E5E5"> numbers being</font>

177
00:08:20,600 --> 00:08:24,890
mapped to<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> and all the</font><font color="#CCCCCC"> positive</font>

178
00:08:22,370 --> 00:08:27,740
numbers<font color="#CCCCCC"> being mapped to one and then</font>

179
00:08:24,890 --> 00:08:32,000
this<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> and one can encode something</font>

180
00:08:27,740 --> 00:08:33,979
<font color="#E5E5E5">for example</font><font color="#CCCCCC"> rabbit or unicorn so let</font><font color="#E5E5E5"> me</font>

181
00:08:32,000 --> 00:08:35,659
give you an<font color="#CCCCCC"> example of how we</font><font color="#E5E5E5"> can make</font>

182
00:08:33,979 --> 00:08:37,610
<font color="#E5E5E5">the previous example with</font><font color="#CCCCCC"> the rabbits</font>

183
00:08:35,659 --> 00:08:42,110
<font color="#E5E5E5">and unicorns work with such a simple</font>

184
00:08:37,610 --> 00:08:44,300
urine<font color="#E5E5E5"> we just use speed size and the</font>

185
00:08:42,110 --> 00:08:48,490
arbitrarily chosen number<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> as our</font>

186
00:08:44,300 --> 00:08:51,920
inputs<font color="#E5E5E5"> and the weights 1 1 and minus</font><font color="#CCCCCC"> 1</font>

187
00:08:48,490 --> 00:08:54,410
if we look at the equations<font color="#E5E5E5"> then we get</font>

188
00:08:51,920 --> 00:08:59,060
for all<font color="#E5E5E5"> negative numbers</font><font color="#CCCCCC"> so speed plus</font>

189
00:08:54,410 --> 00:09:01,699
size being less than<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> 0 and 1 for</font><font color="#CCCCCC"> all</font>

190
00:08:59,060 --> 00:09:04,219
<font color="#E5E5E5">positive numbers being speed plus size</font>

191
00:09:01,700 --> 00:09:07,400
larger than<font color="#E5E5E5"> 10 greater than 10</font>

192
00:09:04,220 --> 00:09:10,550
this way we again have a separating line

193
00:09:07,400 --> 00:09:13,610
between unicorns and rabbits<font color="#E5E5E5"> but again</font>

194
00:09:10,550 --> 00:09:16,219
we<font color="#E5E5E5"> have this really simplistic model we</font>

195
00:09:13,610 --> 00:09:19,570
want to become more and<font color="#E5E5E5"> more</font><font color="#CCCCCC"> complicated</font>

196
00:09:16,220 --> 00:09:23,480
in order<font color="#E5E5E5"> to express more complex tasks</font>

197
00:09:19,570 --> 00:09:26,210
so what do we<font color="#E5E5E5"> do we take more neurons we</font>

198
00:09:23,480 --> 00:09:28,700
take our<font color="#E5E5E5"> 3 input values and put them</font>

199
00:09:26,210 --> 00:09:31,760
into one<font color="#CCCCCC"> yeren and into a second urine</font>

200
00:09:28,700 --> 00:09:34,160
and into a third urine<font color="#CCCCCC"> and we take the</font>

201
00:09:31,760 --> 00:09:37,300
output<font color="#CCCCCC"> of those 3</font><font color="#E5E5E5"> neurons as input for</font>

202
00:09:34,160 --> 00:09:40,370
another<font color="#CCCCCC"> neuron</font><font color="#E5E5E5"> we also call this</font>

203
00:09:37,300 --> 00:09:42,109
multi-layer perceptron perceptron just

204
00:09:40,370 --> 00:09:44,680
being a different name for neuron what

205
00:09:42,110 --> 00:09:47,900
we have there and the<font color="#CCCCCC"> whole thing is</font>

206
00:09:44,680 --> 00:09:50,180
<font color="#E5E5E5">also called a neural network</font><font color="#CCCCCC"> so now the</font>

207
00:09:47,900 --> 00:09:53,150
question<font color="#E5E5E5"> how do we train this how do we</font>

208
00:09:50,180 --> 00:09:55,219
learn what this network<font color="#E5E5E5"> should encode</font>

209
00:09:53,150 --> 00:09:57,319
well we want a mapping from input to

210
00:09:55,220 --> 00:10:00,170
output<font color="#CCCCCC"> and what we can</font><font color="#E5E5E5"> change other</font>

211
00:09:57,320 --> 00:10:02,420
weights<font color="#E5E5E5"> first what we do</font><font color="#CCCCCC"> is we take</font><font color="#E5E5E5"> it</font>

212
00:10:00,170 --> 00:10:05,060
example some input<font color="#E5E5E5"> put it through the</font>

213
00:10:02,420 --> 00:10:08,599
network<font color="#E5E5E5"> get an output but this might not</font>

214
00:10:05,060 --> 00:10:10,310
<font color="#E5E5E5">be the desired output</font><font color="#CCCCCC"> which we know</font><font color="#E5E5E5"> so</font>

215
00:10:08,600 --> 00:10:13,730
<font color="#E5E5E5">in the binary case there are four</font>

216
00:10:10,310 --> 00:10:17,359
possible cases<font color="#E5E5E5"> computed output expected</font>

217
00:10:13,730 --> 00:10:20,389
output each<font color="#CCCCCC"> to values 0 and 1</font><font color="#E5E5E5"> the best</font>

218
00:10:17,360 --> 00:10:23,959
case would<font color="#CCCCCC"> be we want</font><font color="#E5E5E5"> a 0 get a 0 1</font><font color="#CCCCCC"> 2 1</font>

219
00:10:20,389 --> 00:10:27,139
<font color="#E5E5E5">or and get</font><font color="#CCCCCC"> a 1</font><font color="#E5E5E5"> but there is also the</font>

220
00:10:23,959 --> 00:10:29,239
opposite case<font color="#E5E5E5"> in these two cases we can</font>

221
00:10:27,139 --> 00:10:31,930
learn something<font color="#CCCCCC"> about our model namely</font>

222
00:10:29,240 --> 00:10:35,089
<font color="#E5E5E5">in which</font><font color="#CCCCCC"> direction to change the weights</font>

223
00:10:31,930 --> 00:10:37,310
<font color="#E5E5E5">it's a little bit simplified but in</font>

224
00:10:35,089 --> 00:10:39,139
principle<font color="#E5E5E5"> you just raise the weights if</font>

225
00:10:37,310 --> 00:10:40,699
you need a higher number as output and

226
00:10:39,139 --> 00:10:44,060
you lower the weights if you need<font color="#CCCCCC"> a</font>

227
00:10:40,699 --> 00:10:46,910
<font color="#CCCCCC">lower number as output to tell you how</font>

228
00:10:44,060 --> 00:10:49,130
much we have<font color="#E5E5E5"> two terms first term being</font>

229
00:10:46,910 --> 00:10:51,290
the<font color="#CCCCCC"> error so in</font><font color="#E5E5E5"> this case</font><font color="#CCCCCC"> just the</font>

230
00:10:49,130 --> 00:10:54,649
difference between desired and expected

231
00:10:51,290 --> 00:10:56,420
output<font color="#E5E5E5"> also</font><font color="#CCCCCC"> often called a loss function</font>

232
00:10:54,649 --> 00:10:59,720
especially<font color="#E5E5E5"> in deep learning and more</font>

233
00:10:56,420 --> 00:11:02,540
<font color="#E5E5E5">complex applications you also have a</font>

234
00:10:59,720 --> 00:11:06,529
second term we call the<font color="#CCCCCC"> act the</font><font color="#E5E5E5"> learning</font>

235
00:11:02,540 --> 00:11:08,300
<font color="#E5E5E5">rate and the learning rate is what tells</font>

236
00:11:06,529 --> 00:11:10,100
us how quickly<font color="#E5E5E5"> we should change the</font>

237
00:11:08,300 --> 00:11:13,430
<font color="#CCCCCC">weights how quickly we should adapt the</font>

238
00:11:10,100 --> 00:11:15,860
weights<font color="#CCCCCC"> ok this is</font><font color="#E5E5E5"> how we learn a model</font>

239
00:11:13,430 --> 00:11:17,420
this is almost<font color="#E5E5E5"> everything you need to</font>

240
00:11:15,860 --> 00:11:19,880
know<font color="#E5E5E5"> there are mathematical equations</font>

241
00:11:17,420 --> 00:11:21,680
that tell<font color="#E5E5E5"> you how much to change based</font>

242
00:11:19,880 --> 00:11:25,060
<font color="#E5E5E5">on the error and the learning function</font>

243
00:11:21,680 --> 00:11:27,949
and this<font color="#E5E5E5"> is the entire learning process</font>

244
00:11:25,060 --> 00:11:30,140
let's get back to the<font color="#E5E5E5"> terminology we</font>

245
00:11:27,949 --> 00:11:32,060
have the input layer we<font color="#E5E5E5"> have the output</font>

246
00:11:30,140 --> 00:11:35,180
layer which somehow encodes our output

247
00:11:32,060 --> 00:11:37,399
<font color="#E5E5E5">either in one value or in several values</font>

248
00:11:35,180 --> 00:11:39,680
if we<font color="#CCCCCC"> have a multiple if we have</font>

249
00:11:37,399 --> 00:11:42,260
multiple classes<font color="#CCCCCC"> we also have the hidden</font>

250
00:11:39,680 --> 00:11:45,979
<font color="#E5E5E5">layers which are actually what makes our</font>

251
00:11:42,260 --> 00:11:48,890
model<font color="#E5E5E5"> deep what we can change what we</font>

252
00:11:45,980 --> 00:11:51,319
can<font color="#E5E5E5"> learn is the other</font><font color="#CCCCCC"> weights</font><font color="#E5E5E5"> the</font>

253
00:11:48,890 --> 00:11:53,510
parameters of<font color="#E5E5E5"> this model</font><font color="#CCCCCC"> but what we</font>

254
00:11:51,319 --> 00:11:55,430
also need to keep in<font color="#CCCCCC"> mind is the number</font>

255
00:11:53,510 --> 00:11:56,930
<font color="#E5E5E5">of layers</font><font color="#CCCCCC"> the number of neurons</font><font color="#E5E5E5"> per</font>

256
00:11:55,430 --> 00:11:59,029
layer<font color="#E5E5E5"> the learning rate and the</font>

257
00:11:56,930 --> 00:12:01,819
activation<font color="#CCCCCC"> function</font><font color="#E5E5E5"> these are</font><font color="#CCCCCC"> called</font>

258
00:11:59,029 --> 00:12:04,279
hyper parameters and they determine how

259
00:12:01,819 --> 00:12:08,000
complex our model is how well<font color="#E5E5E5"> it is</font>

260
00:12:04,279 --> 00:12:10,010
suited to<font color="#E5E5E5"> solve the task at hand</font><font color="#CCCCCC"> I quite</font>

261
00:12:08,000 --> 00:12:11,899
often spoke about solving tasks so the

262
00:12:10,010 --> 00:12:13,379
question is what can we<font color="#E5E5E5"> actually do with</font>

263
00:12:11,899 --> 00:12:15,419
<font color="#E5E5E5">neural networks</font>

264
00:12:13,379 --> 00:12:17,489
<font color="#CCCCCC">mostly classification tasks for example</font>

265
00:12:15,419 --> 00:12:20,309
tell me is this<font color="#E5E5E5"> animal a rabbit or a</font>

266
00:12:17,489 --> 00:12:23,009
unicorn<font color="#CCCCCC"> is this text message spam or</font>

267
00:12:20,309 --> 00:12:25,709
legitimate<font color="#E5E5E5"> is this patient</font><font color="#CCCCCC"> healthy or</font>

268
00:12:23,009 --> 00:12:27,769
ill is this image a<font color="#CCCCCC"> picture of a cat or</font>

269
00:12:25,709 --> 00:12:30,268
a dog

270
00:12:27,769 --> 00:12:31,769
we already saw<font color="#E5E5E5"> for the animal that we</font>

271
00:12:30,269 --> 00:12:34,049
need<font color="#E5E5E5"> something called features which</font>

272
00:12:31,769 --> 00:12:36,119
somehow encodes<font color="#CCCCCC"> information about what</font>

273
00:12:34,049 --> 00:12:38,549
we want to<font color="#E5E5E5"> classify something we can use</font>

274
00:12:36,119 --> 00:12:42,059
<font color="#CCCCCC">as input</font><font color="#E5E5E5"> for the</font><font color="#CCCCCC"> neural network</font><font color="#E5E5E5"> some</font>

275
00:12:38,549 --> 00:12:43,799
kind of number that<font color="#CCCCCC"> is meaningful</font><font color="#E5E5E5"> so for</font>

276
00:12:42,059 --> 00:12:46,348
the animal it could be speed size or

277
00:12:43,799 --> 00:12:48,269
something<font color="#CCCCCC"> like color</font><font color="#E5E5E5"> color of course</font>

278
00:12:46,349 --> 00:12:52,889
being<font color="#E5E5E5"> more complex again because we have</font>

279
00:12:48,269 --> 00:12:55,859
<font color="#CCCCCC">for example</font><font color="#E5E5E5"> RGB so</font><font color="#CCCCCC"> three values and text</font>

280
00:12:52,889 --> 00:12:58,049
message being<font color="#CCCCCC"> a more complex case again</font>

281
00:12:55,859 --> 00:12:59,759
because we somehow need<font color="#CCCCCC"> to encode the</font>

282
00:12:58,049 --> 00:13:02,759
sender<font color="#CCCCCC"> and whether the sender is</font>

283
00:12:59,759 --> 00:13:04,649
<font color="#E5E5E5">legitimate same for the recipient</font><font color="#CCCCCC"> or the</font>

284
00:13:02,759 --> 00:13:08,129
<font color="#CCCCCC">number of hyperlinks</font><font color="#E5E5E5"> or where the</font>

285
00:13:04,649 --> 00:13:10,619
hyperlinks refer to or the whether there

286
00:13:08,129 --> 00:13:12,989
<font color="#CCCCCC">are certain words present in the text it</font>

287
00:13:10,619 --> 00:13:16,739
gets more<font color="#E5E5E5"> and</font><font color="#CCCCCC"> more complicated even more</font>

288
00:13:12,989 --> 00:13:19,649
so for patient how do we encode medical

289
00:13:16,739 --> 00:13:21,269
history<font color="#E5E5E5"> in a proper way</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the network</font>

290
00:13:19,649 --> 00:13:23,279
<font color="#CCCCCC">to learn I mean temperature is simple</font>

291
00:13:21,269 --> 00:13:25,859
it's a<font color="#E5E5E5"> scalar</font><font color="#CCCCCC"> value we just have a</font>

292
00:13:23,279 --> 00:13:28,619
number<font color="#E5E5E5"> but</font><font color="#CCCCCC"> how do we encode whether</font>

293
00:13:25,859 --> 00:13:31,079
certain<font color="#E5E5E5"> symptoms are present</font><font color="#CCCCCC"> and the</font>

294
00:13:28,619 --> 00:13:34,829
image<font color="#E5E5E5"> which is actually what I work with</font>

295
00:13:31,079 --> 00:13:37,649
every<font color="#CCCCCC"> day</font><font color="#E5E5E5"> is again quite complex we have</font>

296
00:13:34,829 --> 00:13:40,079
<font color="#E5E5E5">values we have numbers but</font><font color="#CCCCCC"> only pixel</font>

297
00:13:37,649 --> 00:13:41,879
values which make it<font color="#E5E5E5"> difficult</font><font color="#CCCCCC"> which are</font>

298
00:13:40,079 --> 00:13:45,358
difficult<font color="#CCCCCC"> to use as input for neural</font>

299
00:13:41,879 --> 00:13:47,339
network why<font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> show you I'll actually</font>

300
00:13:45,359 --> 00:13:49,769
show<font color="#E5E5E5"> you</font><font color="#CCCCCC"> what this</font><font color="#E5E5E5"> picture is</font><font color="#CCCCCC"> a very</font>

301
00:13:47,339 --> 00:13:52,019
<font color="#CCCCCC">famous picture and</font><font color="#E5E5E5"> everybody uses it in</font>

302
00:13:49,769 --> 00:13:55,109
computer vision<font color="#CCCCCC"> they will tell you it's</font>

303
00:13:52,019 --> 00:13:58,709
because<font color="#E5E5E5"> there is a multitude of</font>

304
00:13:55,109 --> 00:14:01,409
different<font color="#CCCCCC"> characteristics in</font><font color="#E5E5E5"> this image</font>

305
00:13:58,709 --> 00:14:04,498
shapes<font color="#E5E5E5"> edges whatever you desire the</font>

306
00:14:01,409 --> 00:14:07,709
truth is it's a crop from the<font color="#E5E5E5"> centerfold</font>

307
00:14:04,499 --> 00:14:09,599
<font color="#E5E5E5">of the Playboy and in earlier years the</font>

308
00:14:07,709 --> 00:14:12,419
computer<font color="#E5E5E5"> vision</font><font color="#CCCCCC"> engineers was a mostly</font>

309
00:14:09,599 --> 00:14:14,579
male audience<font color="#E5E5E5"> anyway let's take</font><font color="#CCCCCC"> five by</font>

310
00:14:12,419 --> 00:14:17,549
<font color="#CCCCCC">five</font><font color="#E5E5E5"> pixels let's assume this is</font><font color="#CCCCCC"> a five</font>

311
00:14:14,579 --> 00:14:20,579
<font color="#E5E5E5">by</font><font color="#CCCCCC"> five</font><font color="#E5E5E5"> pixels a really small image if</font>

312
00:14:17,549 --> 00:14:22,619
<font color="#E5E5E5">we take those 25 pixels and use them as</font>

313
00:14:20,579 --> 00:14:25,349
input for<font color="#CCCCCC"> our neural network you already</font>

314
00:14:22,619 --> 00:14:27,030
see<font color="#CCCCCC"> that we have many connections</font><font color="#E5E5E5"> many</font>

315
00:14:25,350 --> 00:14:29,640
weights which means a<font color="#E5E5E5"> very calm</font>

316
00:14:27,030 --> 00:14:31,949
<font color="#CCCCCC">flex model</font><font color="#E5E5E5"> complex model of course prone</font>

317
00:14:29,640 --> 00:14:35,449
to overfitting<font color="#CCCCCC"> but there are more</font>

318
00:14:31,950 --> 00:14:39,270
<font color="#CCCCCC">problems first being we have</font>

319
00:14:35,450 --> 00:14:41,090
disconnected<font color="#CCCCCC"> the pixels</font><font color="#E5E5E5"> from its</font><font color="#CCCCCC"> natal</font>

320
00:14:39,270 --> 00:14:43,620
from its<font color="#E5E5E5"> neighbors we can't encode</font>

321
00:14:41,090 --> 00:14:46,050
information about the neighborhood

322
00:14:43,620 --> 00:14:47,790
<font color="#E5E5E5">anymore and that really sucks</font><font color="#CCCCCC"> if we just</font>

323
00:14:46,050 --> 00:14:49,050
<font color="#E5E5E5">take the whole picture and move it to</font>

324
00:14:47,790 --> 00:14:51,660
<font color="#E5E5E5">the left or through the right by just</font>

325
00:14:49,050 --> 00:14:53,490
<font color="#CCCCCC">one</font><font color="#E5E5E5"> pixel the network will see something</font>

326
00:14:51,660 --> 00:14:57,600
<font color="#CCCCCC">completely different even</font><font color="#E5E5E5"> though to us</font>

327
00:14:53,490 --> 00:14:59,610
it<font color="#E5E5E5"> is exactly the same but we can solve</font>

328
00:14:57,600 --> 00:15:01,650
that<font color="#E5E5E5"> with some very clever engineering</font>

329
00:14:59,610 --> 00:15:04,200
something we call a convolutional layer

330
00:15:01,650 --> 00:15:07,829
it is again a hidden layer in a<font color="#E5E5E5"> neural</font>

331
00:15:04,200 --> 00:15:09,750
network<font color="#CCCCCC"> but it does something</font><font color="#E5E5E5"> special</font><font color="#CCCCCC"> it</font>

332
00:15:07,830 --> 00:15:11,990
<font color="#E5E5E5">actually is a very simple neuron again</font>

333
00:15:09,750 --> 00:15:15,600
just<font color="#E5E5E5"> for input values one output value</font>

334
00:15:11,990 --> 00:15:17,790
<font color="#E5E5E5">but the</font><font color="#CCCCCC"> four input values look at</font><font color="#E5E5E5"> two by</font>

335
00:15:15,600 --> 00:15:20,490
<font color="#E5E5E5">two pixels</font><font color="#CCCCCC"> and encode one output value</font>

336
00:15:17,790 --> 00:15:22,500
<font color="#E5E5E5">and then the same network</font><font color="#CCCCCC"> is shifted to</font>

337
00:15:20,490 --> 00:15:25,140
<font color="#CCCCCC">the</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> encodes another</font><font color="#E5E5E5"> pixel and</font>

338
00:15:22,500 --> 00:15:28,410
another pixel<font color="#E5E5E5"> and the next row of pixels</font>

339
00:15:25,140 --> 00:15:31,560
<font color="#CCCCCC">and in</font><font color="#E5E5E5"> this way creates another 2d image</font>

340
00:15:28,410 --> 00:15:34,949
we have preserved<font color="#E5E5E5"> information about the</font>

341
00:15:31,560 --> 00:15:38,310
neighborhood and we just have a<font color="#E5E5E5"> very low</font>

342
00:15:34,950 --> 00:15:41,310
number<font color="#E5E5E5"> of weights not the huge number of</font>

343
00:15:38,310 --> 00:15:46,079
<font color="#E5E5E5">parameters we saw earlier we can use</font>

344
00:15:41,310 --> 00:15:49,469
this once or twice<font color="#CCCCCC"> or several hundred</font>

345
00:15:46,080 --> 00:15:51,960
<font color="#CCCCCC">times</font><font color="#E5E5E5"> and this is actually where we go</font>

346
00:15:49,470 --> 00:15:54,090
deep deep means we have<font color="#E5E5E5"> several layers</font>

347
00:15:51,960 --> 00:15:56,220
and having layers that don't need

348
00:15:54,090 --> 00:15:59,340
thousands or millions of<font color="#CCCCCC"> connections but</font>

349
00:15:56,220 --> 00:16:02,190
<font color="#E5E5E5">only a few this is what allows us</font><font color="#CCCCCC"> to go</font>

350
00:15:59,340 --> 00:16:05,460
really<font color="#E5E5E5"> deep and this fashion we</font><font color="#CCCCCC"> can</font>

351
00:16:02,190 --> 00:16:08,430
encode an entire<font color="#CCCCCC"> emit</font><font color="#E5E5E5"> image in just a</font>

352
00:16:05,460 --> 00:16:10,110
<font color="#E5E5E5">few meaningful values how these well</font>

353
00:16:08,430 --> 00:16:12,060
used to<font color="#E5E5E5"> look</font><font color="#CCCCCC"> like and what</font><font color="#E5E5E5"> they encode</font>

354
00:16:10,110 --> 00:16:15,570
this is<font color="#E5E5E5"> learn through the learning</font>

355
00:16:12,060 --> 00:16:18,239
<font color="#CCCCCC">process</font><font color="#E5E5E5"> and we can then for</font><font color="#CCCCCC"> example use</font>

356
00:16:15,570 --> 00:16:20,880
these few values<font color="#E5E5E5"> as input for a</font>

357
00:16:18,240 --> 00:16:23,850
classification<font color="#CCCCCC"> network the current fully</font>

358
00:16:20,880 --> 00:16:27,000
connected<font color="#CCCCCC"> network we saw earlier</font><font color="#E5E5E5"> or we</font>

359
00:16:23,850 --> 00:16:29,130
can do something<font color="#CCCCCC"> more clever</font><font color="#E5E5E5"> we can do</font>

360
00:16:27,000 --> 00:16:31,260
the inverse<font color="#CCCCCC"> operation and create an</font>

361
00:16:29,130 --> 00:16:34,100
<font color="#E5E5E5">image again for example the same image</font>

362
00:16:31,260 --> 00:16:36,600
which is<font color="#E5E5E5"> then called an autoencoder</font>

363
00:16:34,100 --> 00:16:38,760
<font color="#CCCCCC">autoencoders are tremendously useful</font>

364
00:16:36,600 --> 00:16:40,769
even<font color="#E5E5E5"> though they don't appear that way</font>

365
00:16:38,760 --> 00:16:42,509
<font color="#E5E5E5">for example</font><font color="#CCCCCC"> imagine</font>

366
00:16:40,769 --> 00:16:45,179
want to check whether<font color="#CCCCCC"> something has a</font>

367
00:16:42,509 --> 00:16:48,809
defect<font color="#E5E5E5"> or not a picture</font><font color="#CCCCCC"> of a</font><font color="#E5E5E5"> fabric or</font>

368
00:16:45,179 --> 00:16:52,199
of something<font color="#E5E5E5"> you just</font><font color="#CCCCCC"> train the network</font>

369
00:16:48,809 --> 00:16:54,719
with normal pictures and then if you

370
00:16:52,199 --> 00:16:58,889
have a defect picture the network is not

371
00:16:54,720 --> 00:17:01,049
<font color="#CCCCCC">able to reproduce</font><font color="#E5E5E5"> this defect</font><font color="#CCCCCC"> and so the</font>

372
00:16:58,889 --> 00:17:03,089
difference of<font color="#E5E5E5"> the reproduced picture and</font>

373
00:17:01,049 --> 00:17:06,000
the<font color="#CCCCCC"> real picture will</font><font color="#E5E5E5"> show you where</font>

374
00:17:03,089 --> 00:17:08,880
<font color="#E5E5E5">arrows are if it works properly</font><font color="#CCCCCC"> I have</font>

375
00:17:06,000 --> 00:17:11,069
<font color="#CCCCCC">to</font><font color="#E5E5E5"> admit that</font><font color="#CCCCCC"> but we can go even further</font>

376
00:17:08,880 --> 00:17:13,679
<font color="#E5E5E5">let's say we want to encode something</font>

377
00:17:11,069 --> 00:17:16,049
entirely else<font color="#CCCCCC"> or well let's encode the</font>

378
00:17:13,679 --> 00:17:18,659
image<font color="#CCCCCC"> the information in the image</font><font color="#E5E5E5"> but</font>

379
00:17:16,049 --> 00:17:20,668
in another representation<font color="#CCCCCC"> for example</font>

380
00:17:18,659 --> 00:17:23,069
let's say we<font color="#CCCCCC"> have three classes</font><font color="#E5E5E5"> again</font>

381
00:17:20,669 --> 00:17:26,159
<font color="#E5E5E5">the background class and gray a class</font>

382
00:17:23,069 --> 00:17:30,270
called<font color="#CCCCCC"> hat or head we're in blue and</font>

383
00:17:26,159 --> 00:17:32,010
person in green we can also use this<font color="#CCCCCC"> for</font>

384
00:17:30,270 --> 00:17:34,110
other applications than just for

385
00:17:32,010 --> 00:17:36,090
pictures of humans<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> we have a</font>

386
00:17:34,110 --> 00:17:38,219
picture<font color="#CCCCCC"> of a street and want</font><font color="#E5E5E5"> to encode</font>

387
00:17:36,090 --> 00:17:42,149
where is the car<font color="#E5E5E5"> where's the pedestrian</font>

388
00:17:38,220 --> 00:17:45,299
tremendously useful<font color="#E5E5E5"> or we have an MRI</font>

389
00:17:42,149 --> 00:17:48,928
scan of a brain where in the<font color="#E5E5E5"> brain is</font>

390
00:17:45,299 --> 00:17:51,658
the tumor<font color="#CCCCCC"> can</font><font color="#E5E5E5"> we somehow learn this yes</font>

391
00:17:48,929 --> 00:17:54,120
we can't do this with methods like these

392
00:17:51,659 --> 00:17:57,659
if they are trained properly<font color="#CCCCCC"> more about</font>

393
00:17:54,120 --> 00:17:59,250
<font color="#E5E5E5">that later well we expect something like</font>

394
00:17:57,659 --> 00:18:01,500
this to<font color="#E5E5E5"> come out</font><font color="#CCCCCC"> but the truth</font><font color="#E5E5E5"> looks</font>

395
00:17:59,250 --> 00:18:04,020
rather like<font color="#E5E5E5"> this especially if it's not</font>

396
00:18:01,500 --> 00:18:06,330
<font color="#E5E5E5">properly trained we have not the real</font>

397
00:18:04,020 --> 00:18:09,179
shape we want<font color="#E5E5E5"> to get but something</font>

398
00:18:06,330 --> 00:18:11,879
distorted so here is<font color="#E5E5E5"> again where we need</font>

399
00:18:09,179 --> 00:18:13,980
<font color="#E5E5E5">to do learning first we take a picture</font>

400
00:18:11,880 --> 00:18:16,559
put<font color="#E5E5E5"> it through the network get our</font>

401
00:18:13,980 --> 00:18:18,830
output representation<font color="#CCCCCC"> and we have the</font>

402
00:18:16,559 --> 00:18:22,320
<font color="#CCCCCC">information about how we want it</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> look</font>

403
00:18:18,830 --> 00:18:25,470
we again compute some kind<font color="#E5E5E5"> of loss value</font>

404
00:18:22,320 --> 00:18:28,080
this time<font color="#CCCCCC"> for example being the overlap</font>

405
00:18:25,470 --> 00:18:30,450
between<font color="#E5E5E5"> the shape we get out of the</font>

406
00:18:28,080 --> 00:18:35,039
model<font color="#CCCCCC"> and the shape we want</font><font color="#E5E5E5"> to have and</font>

407
00:18:30,450 --> 00:18:37,799
we use<font color="#E5E5E5"> this error this loss function to</font>

408
00:18:35,039 --> 00:18:39,809
update the<font color="#CCCCCC"> weight of our network again</font>

409
00:18:37,799 --> 00:18:42,539
even though it's more complicated<font color="#E5E5E5"> here</font>

410
00:18:39,809 --> 00:18:43,889
<font color="#E5E5E5">even though we have more layers and even</font>

411
00:18:42,539 --> 00:18:46,470
<font color="#E5E5E5">though the layers look slightly</font>

412
00:18:43,889 --> 00:18:50,729
<font color="#CCCCCC">different it is</font><font color="#E5E5E5"> the same</font><font color="#CCCCCC"> process all</font>

413
00:18:46,470 --> 00:18:54,450
<font color="#E5E5E5">over again as with a binary case</font>

414
00:18:50,730 --> 00:18:57,000
and we need lots of training data<font color="#CCCCCC"> this</font>

415
00:18:54,450 --> 00:18:59,610
is something that<font color="#CCCCCC"> you'll hear often in</font>

416
00:18:57,000 --> 00:19:02,550
<font color="#E5E5E5">connection with deep learning you need</font>

417
00:18:59,610 --> 00:19:06,209
<font color="#E5E5E5">lots of training data to make this work</font>

418
00:19:02,550 --> 00:19:09,180
images<font color="#E5E5E5"> are complex things</font><font color="#CCCCCC"> and in order</font>

419
00:19:06,210 --> 00:19:11,870
to meaningful extract<font color="#E5E5E5"> knowledge from</font>

420
00:19:09,180 --> 00:19:16,470
them<font color="#E5E5E5"> the network needs to see a</font>

421
00:19:11,870 --> 00:19:19,229
<font color="#E5E5E5">multitude of different images well now I</font>

422
00:19:16,470 --> 00:19:21,450
already<font color="#E5E5E5"> showed you some things we use a</font>

423
00:19:19,230 --> 00:19:23,700
network architecture some sub networks

424
00:19:21,450 --> 00:19:26,010
the fully convolutional encoder which

425
00:19:23,700 --> 00:19:29,400
takes an image<font color="#E5E5E5"> and produces a few</font>

426
00:19:26,010 --> 00:19:31,170
meaningful<font color="#E5E5E5"> values out</font><font color="#CCCCCC"> of this image its</font>

427
00:19:29,400 --> 00:19:34,320
<font color="#E5E5E5">counterpart the fully convolutional</font>

428
00:19:31,170 --> 00:19:35,700
decoder<font color="#E5E5E5"> fully convolutional meaning by</font>

429
00:19:34,320 --> 00:19:37,470
the way that we only have these

430
00:19:35,700 --> 00:19:40,650
convolutional layers with a few

431
00:19:37,470 --> 00:19:43,110
parameters<font color="#E5E5E5"> that somehow encode spatial</font>

432
00:19:40,650 --> 00:19:46,080
<font color="#CCCCCC">information and keep it for the next</font>

433
00:19:43,110 --> 00:19:49,110
layers the decoder<font color="#CCCCCC"> takes a</font><font color="#E5E5E5"> few</font>

434
00:19:46,080 --> 00:19:51,830
meaningful numbers<font color="#E5E5E5"> and reproduces an</font>

435
00:19:49,110 --> 00:19:54,240
image either<font color="#E5E5E5"> either the same image or</font>

436
00:19:51,830 --> 00:19:57,659
another representation<font color="#E5E5E5"> of the</font>

437
00:19:54,240 --> 00:19:59,390
<font color="#E5E5E5">information encoded in the image we</font><font color="#CCCCCC"> also</font>

438
00:19:57,660 --> 00:20:02,430
already<font color="#E5E5E5"> saw the fully connected</font><font color="#CCCCCC"> Network</font>

439
00:19:59,390 --> 00:20:04,590
<font color="#CCCCCC">fully connected meaning every neuron</font><font color="#E5E5E5"> is</font>

440
00:20:02,430 --> 00:20:07,290
connected<font color="#CCCCCC"> to every neuron in the next</font>

441
00:20:04,590 --> 00:20:09,179
layer this of course can<font color="#E5E5E5"> be dangerous</font>

442
00:20:07,290 --> 00:20:11,970
<font color="#CCCCCC">because this is where we</font><font color="#E5E5E5"> actually get</font>

443
00:20:09,180 --> 00:20:14,250
most of our<font color="#E5E5E5"> parameters</font><font color="#CCCCCC"> if we have a</font>

444
00:20:11,970 --> 00:20:16,440
fully connected<font color="#CCCCCC"> Network</font><font color="#E5E5E5"> this is where</font>

445
00:20:14,250 --> 00:20:18,270
the most parameters will be<font color="#E5E5E5"> present</font>

446
00:20:16,440 --> 00:20:20,970
<font color="#E5E5E5">because connecting every node</font><font color="#CCCCCC"> to every</font>

447
00:20:18,270 --> 00:20:24,090
node this<font color="#CCCCCC"> is just a high number of</font>

448
00:20:20,970 --> 00:20:25,830
<font color="#E5E5E5">connections we can also do other things</font>

449
00:20:24,090 --> 00:20:29,580
for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> something called a pooling</font>

450
00:20:25,830 --> 00:20:31,560
layer<font color="#E5E5E5"> a pooling layer being basically</font>

451
00:20:29,580 --> 00:20:33,030
the same as one of<font color="#E5E5E5"> those convolutional</font>

452
00:20:31,560 --> 00:20:35,429
layers just<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> don't have</font>

453
00:20:33,030 --> 00:20:38,190
parameters we need<font color="#CCCCCC"> to learn this works</font>

454
00:20:35,430 --> 00:20:41,250
without parameters because this neuron

455
00:20:38,190 --> 00:20:44,400
just chooses which ever<font color="#CCCCCC"> well.you is the</font>

456
00:20:41,250 --> 00:20:47,190
highest and takes that value<font color="#CCCCCC"> as output</font>

457
00:20:44,400 --> 00:20:49,920
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> really great</font><font color="#CCCCCC"> for reducing the</font>

458
00:20:47,190 --> 00:20:51,960
size of<font color="#E5E5E5"> your image</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> also getting rid</font>

459
00:20:49,920 --> 00:20:55,260
<font color="#E5E5E5">of information that might not be</font><font color="#CCCCCC"> that</font>

460
00:20:51,960 --> 00:20:57,810
<font color="#E5E5E5">important we can also do some clever</font>

461
00:20:55,260 --> 00:20:59,760
techniques like adding a drop<font color="#E5E5E5"> out layer</font>

462
00:20:57,810 --> 00:21:01,120
a<font color="#CCCCCC"> drop out layer just being a normal</font>

463
00:20:59,760 --> 00:21:04,210
<font color="#E5E5E5">layer in a neural net</font>

464
00:21:01,120 --> 00:21:06,820
work where<font color="#CCCCCC"> we remove some connections in</font>

465
00:21:04,210 --> 00:21:08,350
one training<font color="#E5E5E5"> step these connections in</font>

466
00:21:06,820 --> 00:21:11,860
the next<font color="#E5E5E5"> training step some other</font>

467
00:21:08,350 --> 00:21:13,330
connections<font color="#E5E5E5"> this way we teach teach the</font>

468
00:21:11,860 --> 00:21:17,620
other connections to become more

469
00:21:13,330 --> 00:21:20,379
resilient<font color="#E5E5E5"> against errors</font><font color="#CCCCCC"> I would like</font><font color="#E5E5E5"> to</font>

470
00:21:17,620 --> 00:21:22,719
start<font color="#E5E5E5"> with something I call the model</font>

471
00:21:20,380 --> 00:21:26,230
show now and<font color="#E5E5E5"> show you some models and</font>

472
00:21:22,720 --> 00:21:28,540
how we train those models<font color="#CCCCCC"> and I will</font>

473
00:21:26,230 --> 00:21:31,809
start<font color="#E5E5E5"> with a fully convolutional decoder</font>

474
00:21:28,540 --> 00:21:33,970
we saw earlier<font color="#CCCCCC"> this thing that</font><font color="#E5E5E5"> takes a</font>

475
00:21:31,809 --> 00:21:36,790
<font color="#E5E5E5">number and creates a picture</font><font color="#CCCCCC"> I would</font>

476
00:21:33,970 --> 00:21:39,970
<font color="#E5E5E5">like to take this model put in some</font>

477
00:21:36,790 --> 00:21:43,840
number<font color="#E5E5E5"> and get out a picture a picture</font>

478
00:21:39,970 --> 00:21:45,460
<font color="#CCCCCC">of a horse for example if I</font><font color="#E5E5E5"> put in a</font>

479
00:21:43,840 --> 00:21:47,050
different<font color="#E5E5E5"> number I also want to get a</font>

480
00:21:45,460 --> 00:21:50,530
picture of<font color="#E5E5E5"> a horse</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> of a different</font>

481
00:21:47,050 --> 00:21:53,590
<font color="#CCCCCC">horse</font><font color="#E5E5E5"> so what I want to get is a mapping</font>

482
00:21:50,530 --> 00:21:55,928
<font color="#CCCCCC">from</font><font color="#E5E5E5"> some numbers some features that</font>

483
00:21:53,590 --> 00:21:59,439
<font color="#E5E5E5">encode something about the horse picture</font>

484
00:21:55,929 --> 00:22:01,470
and get<font color="#E5E5E5"> a horse picture out</font><font color="#CCCCCC"> of it</font><font color="#E5E5E5"> you</font>

485
00:21:59,440 --> 00:22:04,690
might see<font color="#E5E5E5"> already why this is</font>

486
00:22:01,470 --> 00:22:07,150
<font color="#E5E5E5">problematic it is problematic because we</font>

487
00:22:04,690 --> 00:22:10,390
don't<font color="#CCCCCC"> have a</font><font color="#E5E5E5"> mapping from feature to</font>

488
00:22:07,150 --> 00:22:14,110
horse<font color="#E5E5E5"> or from horse to feature so</font><font color="#CCCCCC"> we</font>

489
00:22:10,390 --> 00:22:17,580
don't have a truth value we can use to

490
00:22:14,110 --> 00:22:20,860
learn how to generate<font color="#E5E5E5"> this mapping well</font>

491
00:22:17,580 --> 00:22:23,350
<font color="#E5E5E5">computer vision engineers</font><font color="#CCCCCC"> or deep</font>

492
00:22:20,860 --> 00:22:26,559
<font color="#CCCCCC">learning professionals they're smart and</font>

493
00:22:23,350 --> 00:22:28,990
have clever ideas<font color="#E5E5E5"> let's just assume we</font>

494
00:22:26,559 --> 00:22:32,800
have such a network<font color="#CCCCCC"> and let's</font><font color="#E5E5E5"> call</font><font color="#CCCCCC"> it a</font>

495
00:22:28,990 --> 00:22:34,960
generator let's take some numbers<font color="#E5E5E5"> put</font>

496
00:22:32,800 --> 00:22:38,770
<font color="#E5E5E5">them into the generator and get some</font>

497
00:22:34,960 --> 00:22:40,059
<font color="#E5E5E5">horses well it doesn't work yet we still</font>

498
00:22:38,770 --> 00:22:41,770
<font color="#CCCCCC">have to train</font><font color="#E5E5E5"> it so they are probably</font>

499
00:22:40,059 --> 00:22:44,889
<font color="#E5E5E5">not only horses but also some very</font>

500
00:22:41,770 --> 00:22:47,440
<font color="#E5E5E5">special unicorns among the horses</font><font color="#CCCCCC"> which</font>

501
00:22:44,890 --> 00:22:50,110
might be nice for<font color="#CCCCCC"> other applications but</font>

502
00:22:47,440 --> 00:22:53,920
I wanted pictures<font color="#E5E5E5"> of horses right now so</font>

503
00:22:50,110 --> 00:22:56,620
I can't train with this data<font color="#CCCCCC"> directly</font>

504
00:22:53,920 --> 00:22:59,800
but what<font color="#E5E5E5"> I can do is I can create a</font>

505
00:22:56,620 --> 00:23:02,709
second<font color="#E5E5E5"> network this</font><font color="#CCCCCC"> network is called</font><font color="#E5E5E5"> a</font>

506
00:22:59,800 --> 00:23:05,530
discriminator<font color="#E5E5E5"> and I can give it the</font>

507
00:23:02,710 --> 00:23:09,160
<font color="#E5E5E5">input generated from the generator as</font>

508
00:23:05,530 --> 00:23:12,070
well<font color="#CCCCCC"> as the real data I</font><font color="#E5E5E5"> have the real</font>

509
00:23:09,160 --> 00:23:13,810
horse pictures<font color="#E5E5E5"> and then I can teach the</font>

510
00:23:12,070 --> 00:23:16,240
discriminator to distill

511
00:23:13,810 --> 00:23:21,280
which between those tell<font color="#E5E5E5"> me it is a real</font>

512
00:23:16,240 --> 00:23:23,740
horse<font color="#CCCCCC"> or it's</font><font color="#E5E5E5"> not a real horse and there</font>

513
00:23:21,280 --> 00:23:26,230
I know what is the truth because<font color="#CCCCCC"> I</font>

514
00:23:23,740 --> 00:23:29,410
either take<font color="#E5E5E5"> real horse</font><font color="#CCCCCC"> pictures or fake</font>

515
00:23:26,230 --> 00:23:31,180
horse pictures<font color="#E5E5E5"> from the generator so I</font>

516
00:23:29,410 --> 00:23:34,300
<font color="#E5E5E5">have a truth value for this</font>

517
00:23:31,180 --> 00:23:36,600
discriminator<font color="#E5E5E5"> but in doing this I also</font>

518
00:23:34,300 --> 00:23:39,270
have a truth value for the generator

519
00:23:36,600 --> 00:23:41,980
<font color="#E5E5E5">because I want the generator to work</font>

520
00:23:39,270 --> 00:23:43,750
against the<font color="#E5E5E5"> discriminator so I can also</font>

521
00:23:41,980 --> 00:23:46,300
<font color="#E5E5E5">use the information how well the</font>

522
00:23:43,750 --> 00:23:49,030
discriminator does to<font color="#E5E5E5"> train the</font>

523
00:23:46,300 --> 00:23:51,879
generator<font color="#E5E5E5"> to become better in fooling</font>

524
00:23:49,030 --> 00:23:55,889
this is called a generative adversarial

525
00:23:51,880 --> 00:23:58,750
<font color="#E5E5E5">Network and it can be used to generate</font>

526
00:23:55,890 --> 00:24:01,690
<font color="#E5E5E5">pictures of an arbitrary distribution</font>

527
00:23:58,750 --> 00:24:03,540
<font color="#CCCCCC">let's do this with numbers and I will</font>

528
00:24:01,690 --> 00:24:05,950
actually<font color="#E5E5E5"> show</font><font color="#CCCCCC"> you the training</font><font color="#E5E5E5"> process</font>

529
00:24:03,540 --> 00:24:07,750
<font color="#E5E5E5">before I start the video I'll tell</font><font color="#CCCCCC"> you</font>

530
00:24:05,950 --> 00:24:10,060
what i<font color="#CCCCCC"> did i took some handwritten</font>

531
00:24:07,750 --> 00:24:12,610
digits<font color="#E5E5E5"> there is a database called</font>

532
00:24:10,060 --> 00:24:16,090
amnesty<font color="#CCCCCC"> of handwritten digits</font><font color="#E5E5E5"> so the</font>

533
00:24:12,610 --> 00:24:19,209
numbers of 0 to 9<font color="#E5E5E5"> and</font><font color="#CCCCCC"> i took those</font><font color="#E5E5E5"> and</font>

534
00:24:16,090 --> 00:24:20,949
used them as<font color="#E5E5E5"> training data</font><font color="#CCCCCC"> i trained a</font>

535
00:24:19,210 --> 00:24:24,570
generator in the way i showed<font color="#E5E5E5"> you on</font><font color="#CCCCCC"> the</font>

536
00:24:20,950 --> 00:24:27,430
previous slide<font color="#CCCCCC"> and then I just took some</font>

537
00:24:24,570 --> 00:24:30,490
<font color="#E5E5E5">random numbers</font><font color="#CCCCCC"> I put those random</font>

538
00:24:27,430 --> 00:24:32,530
<font color="#E5E5E5">numbers</font><font color="#CCCCCC"> into the network and</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> stored</font>

539
00:24:30,490 --> 00:24:35,290
the image<font color="#CCCCCC"> of what came out of the</font>

540
00:24:32,530 --> 00:24:39,910
<font color="#CCCCCC">network and here in the video you'll see</font>

541
00:24:35,290 --> 00:24:42,879
<font color="#E5E5E5">how the network improved with ongoing</font>

542
00:24:39,910 --> 00:24:46,440
training you will see that we start

543
00:24:42,880 --> 00:24:50,260
basically<font color="#CCCCCC"> with just</font><font color="#E5E5E5"> noisy images and</font>

544
00:24:46,440 --> 00:24:53,860
then after some what we<font color="#CCCCCC"> call a pox so</font>

545
00:24:50,260 --> 00:24:56,500
training iterations<font color="#E5E5E5"> the network is able</font>

546
00:24:53,860 --> 00:25:02,229
to<font color="#E5E5E5"> almost perfectly generate handwritten</font>

547
00:24:56,500 --> 00:25:05,440
digits<font color="#E5E5E5"> just</font><font color="#CCCCCC"> from noise which I find</font>

548
00:25:02,230 --> 00:25:08,950
<font color="#E5E5E5">truly fascinating of course this is an</font>

549
00:25:05,440 --> 00:25:11,380
example where it works<font color="#CCCCCC"> it highly depends</font>

550
00:25:08,950 --> 00:25:14,170
<font color="#E5E5E5">on your data set and how you train the</font>

551
00:25:11,380 --> 00:25:16,000
model<font color="#E5E5E5"> whether it is a success or</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> but</font>

552
00:25:14,170 --> 00:25:19,900
if it works you can<font color="#CCCCCC"> use it to generate</font>

553
00:25:16,000 --> 00:25:23,830
<font color="#E5E5E5">funds you can generate characters 3d</font>

554
00:25:19,900 --> 00:25:26,380
objects<font color="#E5E5E5"> pictures of animals whatever you</font>

555
00:25:23,830 --> 00:25:29,320
want as<font color="#E5E5E5"> long as you have training data</font>

556
00:25:26,380 --> 00:25:33,370
let's go more crazy<font color="#CCCCCC"> let's take two of</font>

557
00:25:29,320 --> 00:25:37,389
those<font color="#CCCCCC"> and let's say we</font><font color="#E5E5E5"> have pictures of</font>

558
00:25:33,370 --> 00:25:38,949
horses and pictures of zebras<font color="#CCCCCC"> I want to</font>

559
00:25:37,390 --> 00:25:41,559
convert<font color="#E5E5E5"> those pictures of</font><font color="#CCCCCC"> horses into</font>

560
00:25:38,950 --> 00:25:43,179
pictures of zebras<font color="#E5E5E5"> and I want to convert</font>

561
00:25:41,559 --> 00:25:44,559
pictures of zebras into pictures of

562
00:25:43,179 --> 00:25:47,590
<font color="#E5E5E5">horses so I want to have the same</font>

563
00:25:44,559 --> 00:25:49,678
picture just with the other animal but I

564
00:25:47,590 --> 00:25:51,970
don't have training<font color="#CCCCCC"> data of the same</font>

565
00:25:49,679 --> 00:25:55,419
situation just once with a horse<font color="#E5E5E5"> and</font>

566
00:25:51,970 --> 00:25:57,190
once with a zebra<font color="#E5E5E5"> doesn't matter we can</font>

567
00:25:55,419 --> 00:26:00,460
train a network that does that<font color="#CCCCCC"> for us</font>

568
00:25:57,190 --> 00:26:02,460
again we just<font color="#CCCCCC"> have</font><font color="#E5E5E5"> a network we call it</font>

569
00:26:00,460 --> 00:26:05,559
the generator and we have two of those

570
00:26:02,460 --> 00:26:09,150
<font color="#E5E5E5">one that converts horses to zebras and</font>

571
00:26:05,559 --> 00:26:13,539
one that converts zebras to<font color="#E5E5E5"> horses and</font>

572
00:26:09,150 --> 00:26:16,059
then we also have two discriminators

573
00:26:13,539 --> 00:26:19,320
those that tell us real horse

574
00:26:16,059 --> 00:26:21,490
fake horse real zebra fake zebra<font color="#E5E5E5"> and</font>

575
00:26:19,320 --> 00:26:25,200
then we<font color="#E5E5E5"> again need to perform some</font>

576
00:26:21,490 --> 00:26:27,820
<font color="#E5E5E5">training so we need to somehow encode</font>

577
00:26:25,200 --> 00:26:30,340
did it work what we wanted<font color="#E5E5E5"> to do and</font>

578
00:26:27,820 --> 00:26:31,870
<font color="#E5E5E5">very simple way</font><font color="#CCCCCC"> to do this is we take a</font>

579
00:26:30,340 --> 00:26:33,699
picture<font color="#CCCCCC"> of</font><font color="#E5E5E5"> a horse put it through the</font>

580
00:26:31,870 --> 00:26:35,649
generator<font color="#E5E5E5"> that generates a zebra take</font>

581
00:26:33,700 --> 00:26:37,120
this fake picture of a zebra put it

582
00:26:35,650 --> 00:26:39,039
through the generator<font color="#E5E5E5"> that generates a</font>

583
00:26:37,120 --> 00:26:41,799
picture of a horse<font color="#E5E5E5"> and if this is</font><font color="#CCCCCC"> the</font>

584
00:26:39,039 --> 00:26:44,140
same picture<font color="#E5E5E5"> as we put in then our model</font>

585
00:26:41,799 --> 00:26:46,960
worked and if it didn't we can use that

586
00:26:44,140 --> 00:26:49,780
information<font color="#E5E5E5"> to update the weights</font><font color="#CCCCCC"> I just</font>

587
00:26:46,960 --> 00:26:52,210
took a random<font color="#CCCCCC"> picture from a free</font>

588
00:26:49,780 --> 00:26:54,399
<font color="#E5E5E5">library in the Internet</font><font color="#CCCCCC"> of a</font><font color="#E5E5E5"> horse and</font>

589
00:26:52,210 --> 00:26:56,320
generated a zebra<font color="#E5E5E5"> and it worked</font>

590
00:26:54,400 --> 00:26:59,260
remarkably well I actually didn't even

591
00:26:56,320 --> 00:27:01,330
<font color="#E5E5E5">do training it also doesn't need to be a</font>

592
00:26:59,260 --> 00:27:03,100
<font color="#E5E5E5">picture you can</font><font color="#CCCCCC"> also convert</font><font color="#E5E5E5"> text to</font>

593
00:27:01,330 --> 00:27:05,260
images you describe something in words

594
00:27:03,100 --> 00:27:09,129
and generate<font color="#CCCCCC"> images you</font><font color="#E5E5E5"> can etch your</font>

595
00:27:05,260 --> 00:27:11,590
<font color="#CCCCCC">face or age a cell or make a patient</font>

596
00:27:09,130 --> 00:27:13,870
healthy or sick<font color="#E5E5E5"> or the image of a</font>

597
00:27:11,590 --> 00:27:16,299
patient<font color="#E5E5E5"> not</font><font color="#CCCCCC"> the patient itself</font>

598
00:27:13,870 --> 00:27:18,070
<font color="#E5E5E5">unfortunately you can do style transfer</font>

599
00:27:16,299 --> 00:27:20,889
like take a picture<font color="#CCCCCC"> of Van</font><font color="#E5E5E5"> Gogh and</font>

600
00:27:18,070 --> 00:27:24,730
apply it to<font color="#E5E5E5"> your own picture stuff like</font>

601
00:27:20,890 --> 00:27:27,130
<font color="#E5E5E5">that something else that we can do with</font>

602
00:27:24,730 --> 00:27:28,720
neural networks let's assume<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have a</font>

603
00:27:27,130 --> 00:27:31,000
<font color="#E5E5E5">classification</font><font color="#CCCCCC"> network we have a</font><font color="#E5E5E5"> picture</font>

604
00:27:28,720 --> 00:27:33,610
<font color="#E5E5E5">of a toothbrush brush and the network</font>

605
00:27:31,000 --> 00:27:36,790
tiles as<font color="#CCCCCC"> well this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> toothbrush great</font>

606
00:27:33,610 --> 00:27:38,600
but how resilient<font color="#CCCCCC"> is this Network does</font>

607
00:27:36,790 --> 00:27:42,860
it really<font color="#E5E5E5"> work</font>

608
00:27:38,600 --> 00:27:44,990
in every<font color="#E5E5E5"> scenario there's a second neck</font>

609
00:27:42,860 --> 00:27:46,850
<font color="#CCCCCC">network we can apply we call it an</font>

610
00:27:44,990 --> 00:27:48,980
adversarial<font color="#E5E5E5"> Network and that network is</font>

611
00:27:46,850 --> 00:27:50,418
trained to<font color="#E5E5E5"> do one thing look at the</font>

612
00:27:48,980 --> 00:27:52,340
network look at the picture and<font color="#CCCCCC"> then</font>

613
00:27:50,419 --> 00:27:54,679
find the<font color="#CCCCCC"> one weak spot in the picture</font>

614
00:27:52,340 --> 00:27:56,418
just change one pixel slightly so that

615
00:27:54,679 --> 00:28:01,820
<font color="#CCCCCC">the network will tell me this toothbrush</font>

616
00:27:56,419 --> 00:28:03,830
is an octopus works remarkably well<font color="#CCCCCC"> also</font>

617
00:28:01,820 --> 00:28:05,960
<font color="#CCCCCC">works with just changing the picture</font>

618
00:28:03,830 --> 00:28:09,110
slightly so changing all<font color="#CCCCCC"> the pictures</font>

619
00:28:05,960 --> 00:28:11,389
pixels<font color="#E5E5E5"> but just slight menu changes that</font>

620
00:28:09,110 --> 00:28:12,740
we don't perceive but<font color="#E5E5E5"> the</font><font color="#CCCCCC"> network the</font>

621
00:28:11,389 --> 00:28:17,658
classification network is completely

622
00:28:12,740 --> 00:28:19,429
<font color="#E5E5E5">thrown off well sounds bad</font><font color="#CCCCCC"> is bad if you</font>

623
00:28:17,659 --> 00:28:21,169
don't consider<font color="#CCCCCC"> it</font><font color="#E5E5E5"> but you can also for</font>

624
00:28:19,429 --> 00:28:23,090
example<font color="#E5E5E5"> use this for</font><font color="#CCCCCC"> training your</font>

625
00:28:21,169 --> 00:28:24,919
network<font color="#E5E5E5"> and make your network resilient</font>

626
00:28:23,090 --> 00:28:28,220
so there's always an upside and a

627
00:28:24,919 --> 00:28:29,919
downside<font color="#E5E5E5"> something entirely else now I'd</font>

628
00:28:28,220 --> 00:28:32,539
<font color="#E5E5E5">like</font><font color="#CCCCCC"> to show you</font><font color="#E5E5E5"> something about text a</font>

629
00:28:29,919 --> 00:28:35,090
words<font color="#E5E5E5"> language model I want to generate</font>

630
00:28:32,539 --> 00:28:37,730
sentences<font color="#E5E5E5"> for my podcast</font><font color="#CCCCCC"> I have a</font>

631
00:28:35,090 --> 00:28:40,459
<font color="#E5E5E5">network</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> gives me a word and then if</font>

632
00:28:37,730 --> 00:28:42,320
I want to<font color="#CCCCCC"> somehow get</font><font color="#E5E5E5"> the next work in a</font>

633
00:28:40,460 --> 00:28:44,720
sentence<font color="#E5E5E5"> I also need to</font><font color="#CCCCCC"> consider this</font>

634
00:28:42,320 --> 00:28:46,939
work<font color="#E5E5E5"> so another network architecture</font>

635
00:28:44,720 --> 00:28:49,220
<font color="#E5E5E5">quite interestingly</font><font color="#CCCCCC"> just takes the</font>

636
00:28:46,940 --> 00:28:51,320
hidden<font color="#E5E5E5"> states of the network and uses</font>

637
00:28:49,220 --> 00:28:53,690
them as the input for the same network

638
00:28:51,320 --> 00:28:57,189
<font color="#E5E5E5">so that in the next</font><font color="#CCCCCC"> iteration we still</font>

639
00:28:53,690 --> 00:29:00,110
know what we did in the previous step<font color="#CCCCCC"> I</font>

640
00:28:57,190 --> 00:29:03,740
<font color="#CCCCCC">try to train a network that generates</font>

641
00:29:00,110 --> 00:29:05,719
podcast episodes for my podcasts didn't

642
00:29:03,740 --> 00:29:08,000
work<font color="#E5E5E5"> what I learned is I don't have</font>

643
00:29:05,720 --> 00:29:10,370
<font color="#CCCCCC">enough training data</font><font color="#E5E5E5"> I really need to</font>

644
00:29:08,000 --> 00:29:13,850
<font color="#E5E5E5">produce more podcast episodes in order</font>

645
00:29:10,370 --> 00:29:16,309
to train a model<font color="#CCCCCC"> -</font><font color="#E5E5E5"> yeah do my job</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> me</font>

646
00:29:13,850 --> 00:29:20,168
<font color="#E5E5E5">and this is very important a very</font>

647
00:29:16,309 --> 00:29:23,658
<font color="#CCCCCC">crucial point</font><font color="#E5E5E5"> training data we need</font>

648
00:29:20,169 --> 00:29:25,789
<font color="#E5E5E5">shitloads of training data and actually</font>

649
00:29:23,659 --> 00:29:27,470
the more complicated<font color="#E5E5E5"> our model and our</font>

650
00:29:25,789 --> 00:29:29,929
<font color="#E5E5E5">training process becomes the more</font>

651
00:29:27,470 --> 00:29:32,389
training<font color="#CCCCCC"> data we need I started with a</font>

652
00:29:29,929 --> 00:29:35,149
supervised case the really<font color="#E5E5E5"> simple case</font>

653
00:29:32,389 --> 00:29:37,729
were<font color="#CCCCCC"> we</font><font color="#E5E5E5"> really simple the really simple</font>

654
00:29:35,149 --> 00:29:40,399
<font color="#E5E5E5">case where we have a picture and a label</font>

655
00:29:37,730 --> 00:29:42,500
<font color="#CCCCCC">that corresponds to that</font><font color="#E5E5E5"> picture or a</font>

656
00:29:40,399 --> 00:29:45,469
representation of the pictures showing

657
00:29:42,500 --> 00:29:47,990
entirely what I wanted to learn<font color="#CCCCCC"> but we</font>

658
00:29:45,470 --> 00:29:50,540
also saw a more complex<font color="#E5E5E5"> task where I had</font>

659
00:29:47,990 --> 00:29:52,550
two pictures horses and zebras

660
00:29:50,540 --> 00:29:55,399
that are from two<font color="#CCCCCC"> different domains but</font>

661
00:29:52,550 --> 00:29:57,139
domains but with no direct mapping<font color="#E5E5E5"> what</font>

662
00:29:55,400 --> 00:30:00,050
can also<font color="#E5E5E5"> happen and actually happens</font>

663
00:29:57,140 --> 00:30:02,440
<font color="#CCCCCC">quite a lot is week weekly annotated</font>

664
00:30:00,050 --> 00:30:05,960
data<font color="#E5E5E5"> so data</font><font color="#CCCCCC"> that is not precisely</font>

665
00:30:02,440 --> 00:30:08,450
annotated<font color="#E5E5E5"> where we can't rely on the</font>

666
00:30:05,960 --> 00:30:10,040
information<font color="#E5E5E5"> we get or even</font><font color="#CCCCCC"> more</font>

667
00:30:08,450 --> 00:30:12,650
complicated something<font color="#E5E5E5"> called</font>

668
00:30:10,040 --> 00:30:15,590
reinforcement<font color="#CCCCCC"> learning</font><font color="#E5E5E5"> where we perform</font>

669
00:30:12,650 --> 00:30:17,410
a sequence of<font color="#E5E5E5"> actions and then in the</font>

670
00:30:15,590 --> 00:30:20,629
<font color="#E5E5E5">end are told yeah that was great</font>

671
00:30:17,410 --> 00:30:23,210
which is often<font color="#CCCCCC"> not</font><font color="#E5E5E5"> enough information to</font>

672
00:30:20,630 --> 00:30:24,740
really perform proper training<font color="#E5E5E5"> but of</font>

673
00:30:23,210 --> 00:30:27,260
<font color="#E5E5E5">course there</font><font color="#CCCCCC"> are also methods</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> that</font>

674
00:30:24,740 --> 00:30:30,010
<font color="#E5E5E5">as well as there</font><font color="#CCCCCC"> are methods for the</font>

675
00:30:27,260 --> 00:30:33,200
unsupervised case where we don't have

676
00:30:30,010 --> 00:30:37,129
annotations<font color="#E5E5E5"> labor data</font><font color="#CCCCCC"> no ground truth</font>

677
00:30:33,200 --> 00:30:41,090
at all just<font color="#E5E5E5"> the picture itself well I</font>

678
00:30:37,130 --> 00:30:43,190
talked about<font color="#CCCCCC"> pictures I told you that we</font>

679
00:30:41,090 --> 00:30:45,020
can learn features and create<font color="#E5E5E5"> images</font>

680
00:30:43,190 --> 00:30:48,380
from<font color="#CCCCCC"> them</font><font color="#E5E5E5"> and we can use them</font><font color="#CCCCCC"> for</font>

681
00:30:45,020 --> 00:30:51,350
classification<font color="#CCCCCC"> and for this there exist</font>

682
00:30:48,380 --> 00:30:54,320
many databases<font color="#E5E5E5"> there are public</font><font color="#CCCCCC"> datasets</font>

683
00:30:51,350 --> 00:30:56,419
<font color="#E5E5E5">we can use often</font><font color="#CCCCCC"> they refer to for</font>

684
00:30:54,320 --> 00:30:59,120
example Flickr<font color="#E5E5E5"> they're just hyperlinks</font>

685
00:30:56,420 --> 00:31:00,590
which is also<font color="#E5E5E5"> why I didn't</font><font color="#CCCCCC"> show you many</font>

686
00:30:59,120 --> 00:31:02,479
pictures right<font color="#CCCCCC"> here because</font><font color="#E5E5E5"> I am</font>

687
00:31:00,590 --> 00:31:05,090
honestly not<font color="#CCCCCC"> sure about the</font><font color="#E5E5E5"> copyright in</font>

688
00:31:02,480 --> 00:31:06,920
those<font color="#E5E5E5"> cases but</font><font color="#CCCCCC"> there are also</font>

689
00:31:05,090 --> 00:31:09,350
<font color="#CCCCCC">challenged datasets where</font><font color="#E5E5E5"> you can just</font>

690
00:31:06,920 --> 00:31:12,890
<font color="#E5E5E5">sign up get</font><font color="#CCCCCC"> some for example medical</font>

691
00:31:09,350 --> 00:31:16,010
data sets and then compete against other

692
00:31:12,890 --> 00:31:18,140
researchers<font color="#E5E5E5"> and of course</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> those</font>

693
00:31:16,010 --> 00:31:21,530
<font color="#E5E5E5">companies</font><font color="#CCCCCC"> that just have lots of data</font>

694
00:31:18,140 --> 00:31:24,050
<font color="#E5E5E5">and those companies also have</font><font color="#CCCCCC"> the means</font>

695
00:31:21,530 --> 00:31:27,350
the capacity to<font color="#E5E5E5"> perform</font><font color="#CCCCCC"> intense</font>

696
00:31:24,050 --> 00:31:29,690
computations<font color="#E5E5E5"> and those are also often</font>

697
00:31:27,350 --> 00:31:34,370
the companies you hear from<font color="#E5E5E5"> in terms of</font>

698
00:31:29,690 --> 00:31:36,860
innovation<font color="#E5E5E5"> for deep learning well this</font>

699
00:31:34,370 --> 00:31:38,899
was mostly<font color="#E5E5E5"> to tell you that you can</font>

700
00:31:36,860 --> 00:31:40,520
process<font color="#E5E5E5"> images quite well with deep</font>

701
00:31:38,900 --> 00:31:44,210
learning<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> have enough training</font>

702
00:31:40,520 --> 00:31:46,340
data if you have<font color="#E5E5E5"> proper training process</font>

703
00:31:44,210 --> 00:31:48,500
<font color="#CCCCCC">and also a little</font><font color="#E5E5E5"> if you know what</font>

704
00:31:46,340 --> 00:31:52,340
you're doing but<font color="#E5E5E5"> you can also process</font>

705
00:31:48,500 --> 00:31:55,670
<font color="#E5E5E5">text you can process audio and time</font>

706
00:31:52,340 --> 00:31:58,340
<font color="#E5E5E5">series like prices or</font><font color="#CCCCCC"> Stack Exchange</font>

707
00:31:55,670 --> 00:32:00,470
<font color="#E5E5E5">stuff like that you can</font><font color="#CCCCCC"> process almost</font>

708
00:31:58,340 --> 00:32:02,510
<font color="#E5E5E5">everything if you make it</font><font color="#CCCCCC"> and codable</font><font color="#E5E5E5"> to</font>

709
00:32:00,470 --> 00:32:03,890
in your network<font color="#E5E5E5"> sounds like a dream come</font>

710
00:32:02,510 --> 00:32:06,290
<font color="#CCCCCC">true</font><font color="#E5E5E5"> but</font>

711
00:32:03,890 --> 00:32:10,280
as<font color="#E5E5E5"> I already told you</font><font color="#CCCCCC"> unit data</font><font color="#E5E5E5"> a lot of</font>

712
00:32:06,290 --> 00:32:13,399
it<font color="#CCCCCC"> I told you about</font><font color="#E5E5E5"> those companies that</font>

713
00:32:10,280 --> 00:32:15,379
<font color="#E5E5E5">have lots of data sets and the publicly</font>

714
00:32:13,400 --> 00:32:17,240
<font color="#CCCCCC">available data</font><font color="#E5E5E5"> sets which you can</font>

715
00:32:15,380 --> 00:32:21,380
actually<font color="#E5E5E5"> use to</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> started</font><font color="#CCCCCC"> with your</font>

716
00:32:17,240 --> 00:32:23,000
<font color="#CCCCCC">own experiments</font><font color="#E5E5E5"> but that also makes it a</font>

717
00:32:21,380 --> 00:32:25,370
little dangerous because deep learning

718
00:32:23,000 --> 00:32:27,580
<font color="#E5E5E5">still is a black box</font><font color="#CCCCCC"> to us I</font><font color="#E5E5E5"> told you</font>

719
00:32:25,370 --> 00:32:31,820
what happens<font color="#E5E5E5"> inside the black</font><font color="#CCCCCC"> box on a</font>

720
00:32:27,580 --> 00:32:35,449
level that teaches you<font color="#E5E5E5"> how we learn</font><font color="#CCCCCC"> and</font>

721
00:32:31,820 --> 00:32:38,240
<font color="#E5E5E5">how</font><font color="#CCCCCC"> the network</font><font color="#E5E5E5"> is structured but not</font>

722
00:32:35,450 --> 00:32:41,810
<font color="#E5E5E5">really what the network learned it is</font>

723
00:32:38,240 --> 00:32:44,150
for<font color="#E5E5E5"> us computer vision</font><font color="#CCCCCC"> engineers really</font>

724
00:32:41,810 --> 00:32:47,389
nice that<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> visualize the first</font>

725
00:32:44,150 --> 00:32:49,910
layers of a neural network<font color="#CCCCCC"> and see what</font>

726
00:32:47,390 --> 00:32:51,680
is<font color="#CCCCCC"> actually encoded</font><font color="#E5E5E5"> in those first</font>

727
00:32:49,910 --> 00:32:53,750
layers what information the network

728
00:32:51,680 --> 00:32:55,850
looks at but you can't really

729
00:32:53,750 --> 00:32:58,280
mathematically prove what happens in a

730
00:32:55,850 --> 00:33:00,080
network which is one major downside<font color="#E5E5E5"> and</font>

731
00:32:58,280 --> 00:33:01,850
so if you want<font color="#E5E5E5"> to use it the numbers may</font>

732
00:33:00,080 --> 00:33:05,330
be really great but<font color="#E5E5E5"> be sure</font><font color="#CCCCCC"> to properly</font>

733
00:33:01,850 --> 00:33:08,179
evaluate<font color="#E5E5E5"> them</font><font color="#CCCCCC"> in summary I call that</font>

734
00:33:05,330 --> 00:33:10,129
easy to learn<font color="#E5E5E5"> everyone</font><font color="#CCCCCC"> every single one</font>

735
00:33:08,180 --> 00:33:12,890
of you<font color="#CCCCCC"> can just start with deep learning</font>

736
00:33:10,130 --> 00:33:14,830
<font color="#E5E5E5">right the way you</font><font color="#CCCCCC"> don't need to do much</font>

737
00:33:12,890 --> 00:33:18,650
work you don't<font color="#E5E5E5"> need to do much learning</font>

738
00:33:14,830 --> 00:33:20,990
the model learns<font color="#E5E5E5"> for you but they're</font>

739
00:33:18,650 --> 00:33:23,810
hard to<font color="#CCCCCC"> master in a way that makes them</font>

740
00:33:20,990 --> 00:33:26,510
useful for production use<font color="#CCCCCC"> cases for</font>

741
00:33:23,810 --> 00:33:29,750
example<font color="#E5E5E5"> so if you want to use deep</font>

742
00:33:26,510 --> 00:33:32,180
<font color="#CCCCCC">learning for something if you really</font>

743
00:33:29,750 --> 00:33:34,250
<font color="#CCCCCC">want to seriously</font><font color="#E5E5E5"> use it make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that</font>

744
00:33:32,180 --> 00:33:36,470
it really does what you wanted to and

745
00:33:34,250 --> 00:33:38,870
doesn't<font color="#CCCCCC"> learn something else which also</font>

746
00:33:36,470 --> 00:33:40,580
happens pretty sure you saw some talks

747
00:33:38,870 --> 00:33:42,949
about deep learning fails which is not

748
00:33:40,580 --> 00:33:44,419
what this talk<font color="#CCCCCC"> is about they're quite</font>

749
00:33:42,950 --> 00:33:46,700
funny<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look at just make sure that</font>

750
00:33:44,420 --> 00:33:49,910
they don't<font color="#CCCCCC"> happen to you</font><font color="#E5E5E5"> if you</font><font color="#CCCCCC"> do that</font>

751
00:33:46,700 --> 00:33:52,670
<font color="#E5E5E5">though you'll achieve</font><font color="#CCCCCC"> great things</font><font color="#E5E5E5"> with</font>

752
00:33:49,910 --> 00:33:56,950
deep learning<font color="#E5E5E5"> I'm sure and that was</font>

753
00:33:52,670 --> 00:33:56,950
introduction<font color="#E5E5E5"> to deep learning thank you</font>

754
00:34:07,919 --> 00:34:14,290
so now it's<font color="#CCCCCC"> question and answer time so</font>

755
00:34:11,560 --> 00:34:18,130
if you<font color="#CCCCCC"> have a question please line up at</font>

756
00:34:14,290 --> 00:34:20,710
the mics we have in total<font color="#CCCCCC"> eight so it</font>

757
00:34:18,130 --> 00:34:24,040
shouldn't<font color="#E5E5E5"> be far from you say here in</font>

758
00:34:20,710 --> 00:34:27,940
the corridors<font color="#E5E5E5"> and on the sides</font><font color="#CCCCCC"> please</font>

759
00:34:24,040 --> 00:34:30,790
line up for everybody<font color="#CCCCCC"> a questions</font>

760
00:34:27,940 --> 00:34:33,490
consists of one sentence was<font color="#CCCCCC"> to</font><font color="#E5E5E5"> question</font>

761
00:34:30,790 --> 00:34:36,909
mark<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the end not three minutes of</font>

762
00:34:33,489 --> 00:34:39,729
rambling<font color="#E5E5E5"> and also if you go to the</font>

763
00:34:36,909 --> 00:34:48,370
microphone<font color="#CCCCCC"> speak into the microphone</font><font color="#E5E5E5"> so</font>

764
00:34:39,730 --> 00:34:54,790
<font color="#E5E5E5">Willie get close to it okay where do we</font>

765
00:34:48,370 --> 00:35:01,200
<font color="#CCCCCC">have</font><font color="#E5E5E5"> number seven we start with Mike</font>

766
00:34:54,790 --> 00:35:06,910
<font color="#E5E5E5">number seven hello hello my question is</font>

767
00:35:01,200 --> 00:35:11,410
<font color="#E5E5E5">you with how did you compute the example</font>

768
00:35:06,910 --> 00:35:18,009
for<font color="#E5E5E5"> the fonts</font><font color="#CCCCCC"> V numbers I didn't</font><font color="#E5E5E5"> really</font>

769
00:35:11,410 --> 00:35:20,259
understand it<font color="#CCCCCC"> usual</font><font color="#E5E5E5"> said it was made</font>

770
00:35:18,010 --> 00:35:23,110
<font color="#E5E5E5">from white noise</font>

771
00:35:20,260 --> 00:35:25,930
I'll give you<font color="#CCCCCC"> really</font><font color="#E5E5E5"> brief recap</font><font color="#CCCCCC"> of what</font>

772
00:35:23,110 --> 00:35:28,360
I<font color="#E5E5E5"> did</font><font color="#CCCCCC"> I showed you that</font><font color="#E5E5E5"> we have a model</font>

773
00:35:25,930 --> 00:35:31,149
that<font color="#CCCCCC"> Maps image to some meaningful</font>

774
00:35:28,360 --> 00:35:33,640
<font color="#E5E5E5">values that an image can be encoded in</font>

775
00:35:31,150 --> 00:35:36,160
just a<font color="#E5E5E5"> few values whatever happens here</font>

776
00:35:33,640 --> 00:35:40,240
is exactly<font color="#CCCCCC"> the</font><font color="#E5E5E5"> other way around</font><font color="#CCCCCC"> we have</font>

777
00:35:36,160 --> 00:35:42,520
some values just<font color="#CCCCCC"> some arbitrary values</font>

778
00:35:40,240 --> 00:35:45,459
we actually know nothing<font color="#CCCCCC"> about</font><font color="#E5E5E5"> we can</font>

779
00:35:42,520 --> 00:35:47,470
generate pictures<font color="#CCCCCC"> out of those so I</font>

780
00:35:45,460 --> 00:35:51,520
<font color="#CCCCCC">train this model to just take some</font>

781
00:35:47,470 --> 00:35:54,009
<font color="#CCCCCC">random values and show the pictures</font>

782
00:35:51,520 --> 00:36:00,070
generated from the model the training

783
00:35:54,010 --> 00:36:03,280
process was this<font color="#CCCCCC"> min max game as</font><font color="#E5E5E5"> it's</font>

784
00:36:00,070 --> 00:36:05,530
called<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have two networks that try to</font>

785
00:36:03,280 --> 00:36:08,320
compete against each other<font color="#E5E5E5"> one network</font>

786
00:36:05,530 --> 00:36:10,600
trying to distinguish whether a picture

787
00:36:08,320 --> 00:36:12,550
it sees is real or one of those fake

788
00:36:10,600 --> 00:36:15,910
pictures and the network<font color="#E5E5E5"> that actually</font>

789
00:36:12,550 --> 00:36:18,520
<font color="#E5E5E5">generates those pictures and in training</font>

790
00:36:15,910 --> 00:36:20,200
the network<font color="#E5E5E5"> that is able to distinguish</font>

791
00:36:18,520 --> 00:36:22,900
between<font color="#E5E5E5"> those we</font>

792
00:36:20,200 --> 00:36:25,118
can also get information<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the</font>

793
00:36:22,900 --> 00:36:28,329
training<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the network that</font><font color="#E5E5E5"> generates</font>

794
00:36:25,119 --> 00:36:30,310
the pictures so the videos you saw

795
00:36:28,329 --> 00:36:32,890
<font color="#CCCCCC">purchased</font><font color="#E5E5E5"> animations of what happens</font>

796
00:36:30,310 --> 00:36:35,950
<font color="#E5E5E5">during this training</font><font color="#CCCCCC"> process at</font><font color="#E5E5E5"> first if</font>

797
00:36:32,890 --> 00:36:38,379
we<font color="#E5E5E5"> input noise we get noise but as the</font>

798
00:36:35,950 --> 00:36:40,899
network is able<font color="#CCCCCC"> to better and better</font>

799
00:36:38,380 --> 00:36:43,690
recreate those images from the data set

800
00:36:40,900 --> 00:36:46,349
<font color="#CCCCCC">we used as input in this case pictures</font>

801
00:36:43,690 --> 00:36:50,050
of handwritten digits<font color="#E5E5E5"> the output</font><font color="#CCCCCC"> also</font>

802
00:36:46,349 --> 00:36:53,859
became more<font color="#E5E5E5"> look-alike to those numbers</font>

803
00:36:50,050 --> 00:36:59,369
<font color="#E5E5E5">these handwritten digits hope that</font>

804
00:36:53,859 --> 00:36:59,369
helped now we go<font color="#E5E5E5"> to the Internet</font>

805
00:37:04,230 --> 00:37:09,390
can we get sound for the signal<font color="#CCCCCC"> angel</font>

806
00:37:06,750 --> 00:37:25,710
please<font color="#CCCCCC"> Sonics so great now we go to the</font>

807
00:37:09,390 --> 00:37:30,029
<font color="#CCCCCC">internet</font><font color="#E5E5E5"> yeah I of course am very biased</font>

808
00:37:25,710 --> 00:37:32,630
<font color="#E5E5E5">to recommend what I use</font><font color="#CCCCCC"> every day but I</font>

809
00:37:30,030 --> 00:37:37,190
also<font color="#E5E5E5"> think that it is a great start</font>

810
00:37:32,630 --> 00:37:39,720
<font color="#E5E5E5">basically use Python and use PI torch</font>

811
00:37:37,190 --> 00:37:42,210
<font color="#E5E5E5">many people will disagree with</font><font color="#CCCCCC"> me and</font>

812
00:37:39,720 --> 00:37:44,669
<font color="#CCCCCC">tell you</font><font color="#E5E5E5"> tensor flow is better it might</font>

813
00:37:42,210 --> 00:37:47,520
<font color="#E5E5E5">be in my opinion</font><font color="#CCCCCC"> not for</font><font color="#E5E5E5"> getting</font><font color="#CCCCCC"> started</font>

814
00:37:44,670 --> 00:37:50,160
and there are also some nice tutorials

815
00:37:47,520 --> 00:37:53,309
on the<font color="#E5E5E5"> PI</font><font color="#CCCCCC"> Taj website what you</font><font color="#E5E5E5"> can also</font>

816
00:37:50,160 --> 00:37:55,770
do is look at websites like open<font color="#CCCCCC"> AI</font>

817
00:37:53,309 --> 00:37:58,530
where they have a gym to get you started

818
00:37:55,770 --> 00:38:02,430
<font color="#CCCCCC">with some training exercises where</font><font color="#E5E5E5"> you</font>

819
00:37:58,530 --> 00:38:05,270
already<font color="#CCCCCC"> have data sets yeah basically</font><font color="#E5E5E5"> my</font>

820
00:38:02,430 --> 00:38:08,609
recommendation is get used to<font color="#E5E5E5"> Python and</font>

821
00:38:05,270 --> 00:38:10,920
start with<font color="#E5E5E5"> a PI touch tutorial see where</font>

822
00:38:08,609 --> 00:38:13,589
to go from<font color="#CCCCCC"> there often there also some</font>

823
00:38:10,920 --> 00:38:16,170
github repositories linked with many

824
00:38:13,589 --> 00:38:18,540
<font color="#CCCCCC">examples for already established network</font>

825
00:38:16,170 --> 00:38:22,079
architectures like<font color="#E5E5E5"> the cycle</font><font color="#CCCCCC"> can or</font>

826
00:38:18,540 --> 00:38:26,130
<font color="#CCCCCC">degan itself or basically everything</font>

827
00:38:22,079 --> 00:38:30,089
<font color="#E5E5E5">else there will be repo you can use to</font>

828
00:38:26,130 --> 00:38:35,359
get<font color="#E5E5E5"> started</font><font color="#CCCCCC"> ok we stay with the internet</font>

829
00:38:30,089 --> 00:38:35,359
<font color="#E5E5E5">says some more questions I heard yes</font>

830
00:38:36,030 --> 00:38:40,320
have you ever come across an example of

831
00:38:38,100 --> 00:38:45,930
a neural network<font color="#CCCCCC"> that deals with audio</font>

832
00:38:40,320 --> 00:38:47,840
instead<font color="#E5E5E5"> of images me personally no at</font>

833
00:38:45,930 --> 00:38:50,910
least<font color="#CCCCCC"> not</font><font color="#E5E5E5"> directly I've heard about</font>

834
00:38:47,840 --> 00:38:54,030
<font color="#E5E5E5">examples like</font><font color="#CCCCCC"> where you can</font><font color="#E5E5E5"> change the</font>

835
00:38:50,910 --> 00:38:56,339
voice to sound<font color="#E5E5E5"> like another person but</font>

836
00:38:54,030 --> 00:38:59,160
there's<font color="#E5E5E5"> not much I can reliably tell</font>

837
00:38:56,340 --> 00:39:04,650
about that<font color="#CCCCCC"> my expertise really</font><font color="#E5E5E5"> is an</font>

838
00:38:59,160 --> 00:39:08,460
image<font color="#E5E5E5"> processing I'm sorry and I think</font>

839
00:39:04,650 --> 00:39:10,020
we have time for one<font color="#CCCCCC"> more question</font><font color="#E5E5E5"> we</font>

840
00:39:08,460 --> 00:39:15,710
have one at<font color="#CCCCCC"> number 8</font>

841
00:39:10,020 --> 00:39:20,820
microphone number<font color="#CCCCCC"> it is the current</font>

842
00:39:15,710 --> 00:39:23,880
condition for example<font color="#E5E5E5"> iPhone X is it</font>

843
00:39:20,820 --> 00:39:27,450
also<font color="#E5E5E5"> a deep learning algorithms or is it</font>

844
00:39:23,880 --> 00:39:32,120
something<font color="#E5E5E5"> more simple</font><font color="#CCCCCC"> do you have as far</font>

845
00:39:27,450 --> 00:39:36,089
<font color="#E5E5E5">as I know yes that's all I can reliably</font>

846
00:39:32,120 --> 00:39:38,759
<font color="#E5E5E5">tell you about that but it is</font><font color="#CCCCCC"> not only</font>

847
00:39:36,090 --> 00:39:41,720
<font color="#E5E5E5">based on images but also uses other</font>

848
00:39:38,760 --> 00:39:46,020
information I<font color="#E5E5E5"> think distance information</font>

849
00:39:41,720 --> 00:39:48,240
<font color="#CCCCCC">encoded with some infrared</font><font color="#E5E5E5"> signals</font><font color="#CCCCCC"> I</font>

850
00:39:46,020 --> 00:39:51,030
don't really<font color="#E5E5E5"> know exactly how it works</font>

851
00:39:48,240 --> 00:39:53,250
but<font color="#E5E5E5"> at least iPhones already have a</font>

852
00:39:51,030 --> 00:39:55,950
neural processing<font color="#CCCCCC"> neural network</font>

853
00:39:53,250 --> 00:39:57,870
processing engine built in so<font color="#CCCCCC"> a chip</font>

854
00:39:55,950 --> 00:40:01,080
dedicated to just<font color="#E5E5E5"> doing those</font>

855
00:39:57,870 --> 00:40:03,089
computations<font color="#CCCCCC"> you saw that many of</font><font color="#E5E5E5"> those</font>

856
00:40:01,080 --> 00:40:05,430
things can<font color="#CCCCCC"> be parallelized and this is</font>

857
00:40:03,090 --> 00:40:08,490
what those hardware architectures make

858
00:40:05,430 --> 00:40:12,029
use of so I'm pretty<font color="#E5E5E5"> confident in saying</font>

859
00:40:08,490 --> 00:40:15,330
yes they also do it there how exactly<font color="#CCCCCC"> no</font>

860
00:40:12,030 --> 00:40:18,120
clue<font color="#CCCCCC"> okay I have myself have a last</font>

861
00:40:15,330 --> 00:40:20,069
completely unrelated questions did you

862
00:40:18,120 --> 00:40:25,170
<font color="#CCCCCC">create</font><font color="#E5E5E5"> the design of the slides yourself</font>

863
00:40:20,070 --> 00:40:28,980
<font color="#CCCCCC">I had some</font><font color="#E5E5E5"> help we have a really great</font>

864
00:40:25,170 --> 00:40:32,510
<font color="#E5E5E5">Congress design and I used</font><font color="#CCCCCC"> that as an</font>

865
00:40:28,980 --> 00:40:35,190
inspiration<font color="#CCCCCC"> to create their slides yes</font>

866
00:40:32,510 --> 00:40:38,190
<font color="#E5E5E5">okay yeah because that's a really</font>

867
00:40:35,190 --> 00:40:39,990
<font color="#E5E5E5">amazing</font><font color="#CCCCCC"> I love them thank you</font><font color="#E5E5E5"> okay thank</font>

868
00:40:38,190 --> 00:40:46,650
<font color="#CCCCCC">you</font><font color="#E5E5E5"> very much Toby</font>

869
00:40:39,990 --> 00:40:46,649
[Applause]

870
00:40:46,840 --> 00:40:55,990
[Music]

871
00:40:53,930 --> 00:40:55,990
you

872
00:40:56,080 --> 00:41:08,739
[Music]

