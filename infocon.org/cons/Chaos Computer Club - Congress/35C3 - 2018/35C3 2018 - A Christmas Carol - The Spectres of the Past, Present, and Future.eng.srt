1
00:00:02,830 --> 00:00:24,259
[Music]

2
00:00:18,800 --> 00:00:28,948
you may<font color="#E5E5E5"> heard about</font><font color="#CCCCCC"> meltdown and spectra</font>

3
00:00:24,260 --> 00:00:31,859
<font color="#E5E5E5">inspector to inspector ng and</font><font color="#CCCCCC"> Specter</font>

4
00:00:28,949 --> 00:00:34,380
<font color="#E5E5E5">RSP inspector what the to bring</font>

5
00:00:31,859 --> 00:00:37,320
light into this mess<font color="#CCCCCC"> Moret</font><font color="#E5E5E5"> slip</font><font color="#CCCCCC"> Michael</font>

6
00:00:34,380 --> 00:00:39,870
<font color="#E5E5E5">Schwartz Daniel</font><font color="#CCCCCC"> goose and Claudio</font>

7
00:00:37,320 --> 00:00:42,930
<font color="#CCCCCC">kanella will give us an overview</font><font color="#E5E5E5"> of all</font>

8
00:00:39,870 --> 00:00:44,820
proposed medications and show us<font color="#E5E5E5"> that an</font>

9
00:00:42,930 --> 00:00:46,890
attacker still can run an attack

10
00:00:44,820 --> 00:00:49,829
<font color="#E5E5E5">desperate counter measurements please</font>

11
00:00:46,890 --> 00:00:52,550
welcome on stage<font color="#CCCCCC"> moguls meteor</font><font color="#E5E5E5"> Danielle</font>

12
00:00:49,829 --> 00:00:52,550
and Claudio

13
00:01:00,170 --> 00:01:14,040
<font color="#CCCCCC">I'll</font><font color="#E5E5E5"> talk with</font><font color="#CCCCCC"> the video and</font><font color="#E5E5E5"> for that</font>

14
00:01:02,880 --> 00:01:16,430
<font color="#CCCCCC">we've got offstage can we turn the</font>

15
00:01:14,040 --> 00:01:16,430
lights<font color="#E5E5E5"> off</font>

16
00:01:19,610 --> 00:01:45,450
[Music]

17
00:01:34,750 --> 00:01:50,649
Oh<font color="#CCCCCC"> Christmas</font>

18
00:01:45,450 --> 00:01:53,900
[Music]

19
00:01:50,649 --> 00:01:55,470
<font color="#CCCCCC">Just Cause</font><font color="#E5E5E5"> some fear</font>

20
00:01:53,900 --> 00:02:20,350
Oh

21
00:01:55,470 --> 00:02:22,350
[Music]

22
00:02:20,350 --> 00:02:22,350
Oh

23
00:03:04,950 --> 00:03:15,069
[Applause]

24
00:03:07,180 --> 00:03:15,069
[Music]

25
00:03:18,620 --> 00:03:24,950
<font color="#E5E5E5">welcome welcome to my little talk about</font>

26
00:03:22,599 --> 00:03:27,790
<font color="#E5E5E5">performance</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> computers I like fast</font>

27
00:03:24,950 --> 00:03:31,399
computers who else likes fast computers

28
00:03:27,790 --> 00:03:33,650
who bought a new computer<font color="#CCCCCC"> this year yes</font>

29
00:03:31,400 --> 00:03:35,900
and we want all our<font color="#E5E5E5"> computers</font><font color="#CCCCCC"> to be</font>

30
00:03:33,650 --> 00:03:38,150
super fast<font color="#E5E5E5"> and of course we used in our</font>

31
00:03:35,900 --> 00:03:39,769
<font color="#E5E5E5">talk we have some materials from other</font>

32
00:03:38,150 --> 00:03:43,519
people<font color="#E5E5E5"> and we acknowledge them here and</font>

33
00:03:39,769 --> 00:03:45,530
we also present results here research

34
00:03:43,519 --> 00:03:47,390
results where we collaborated with a lot

35
00:03:45,530 --> 00:03:49,970
<font color="#E5E5E5">of people and of</font><font color="#CCCCCC"> course this was</font>

36
00:03:47,390 --> 00:03:52,190
pondered by different parties for the

37
00:03:49,970 --> 00:03:54,799
full<font color="#CCCCCC"> acknowledgment see the papers</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I</font>

38
00:03:52,190 --> 00:03:56,030
will start with performance<font color="#E5E5E5"> is awesome</font>

39
00:03:54,799 --> 00:03:58,220
and this<font color="#E5E5E5"> is what this talk</font><font color="#CCCCCC"> is about</font>

40
00:03:56,030 --> 00:04:02,900
<font color="#E5E5E5">performance is awesome</font><font color="#CCCCCC"> and for me</font><font color="#E5E5E5"> when I</font>

41
00:03:58,220 --> 00:04:04,640
was a bit younger<font color="#CCCCCC"> the Pentium Pro 1995</font>

42
00:04:02,900 --> 00:04:07,099
this was quite<font color="#CCCCCC"> awesome because</font><font color="#E5E5E5"> this</font>

43
00:04:04,640 --> 00:04:11,720
<font color="#CCCCCC">machine had</font><font color="#E5E5E5"> 150 megahertz</font>

44
00:04:07,099 --> 00:04:15,260
quite nice<font color="#E5E5E5"> and it</font><font color="#CCCCCC"> was the first Intel</font>

45
00:04:11,720 --> 00:04:19,370
processor<font color="#E5E5E5"> that was a risk emulating</font><font color="#CCCCCC"> sisk</font>

46
00:04:15,260 --> 00:04:21,709
<font color="#E5E5E5">which is quite nice</font><font color="#CCCCCC"> because this</font><font color="#E5E5E5"> allows</font>

47
00:04:19,370 --> 00:04:24,830
you to<font color="#E5E5E5"> do something which I will have</font><font color="#CCCCCC"> in</font>

48
00:04:21,709 --> 00:04:27,380
the<font color="#CCCCCC"> next point but also it had</font><font color="#E5E5E5"> 256</font>

49
00:04:24,830 --> 00:04:29,270
kilobyte level<font color="#E5E5E5"> 2 cache integrated into</font>

50
00:04:27,380 --> 00:04:31,400
the CPU<font color="#E5E5E5"> so it was not separately on the</font>

51
00:04:29,270 --> 00:04:34,430
<font color="#CCCCCC">mainboard</font><font color="#E5E5E5"> but in the processor itself</font>

52
00:04:31,400 --> 00:04:37,130
very nice and branch prediction<font color="#CCCCCC"> Brown we</font>

53
00:04:34,430 --> 00:04:39,080
<font color="#CCCCCC">loved branch prediction</font><font color="#E5E5E5"> and out of order</font>

54
00:04:37,130 --> 00:04:41,630
<font color="#CCCCCC">execution</font><font color="#E5E5E5"> this is what we get here from</font>

55
00:04:39,080 --> 00:04:43,909
these<font color="#CCCCCC"> RISC</font><font color="#E5E5E5"> emulating</font><font color="#CCCCCC"> sees out of order</font>

56
00:04:41,630 --> 00:04:47,479
<font color="#CCCCCC">execution now we can schedule</font><font color="#E5E5E5"> small bits</font>

57
00:04:43,910 --> 00:04:49,700
of code on the actual processor so the

58
00:04:47,479 --> 00:04:51,830
future<font color="#E5E5E5"> also</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be fast because</font>

59
00:04:49,700 --> 00:04:53,570
we are getting faster and<font color="#CCCCCC"> faster more</font>

60
00:04:51,830 --> 00:04:57,169
and<font color="#CCCCCC"> more performance for instance</font><font color="#E5E5E5"> Apple</font>

61
00:04:53,570 --> 00:04:59,210
in the new iPhone introduced 16 kilobyte

62
00:04:57,169 --> 00:05:00,950
<font color="#E5E5E5">pages as the standard page size the</font>

63
00:04:59,210 --> 00:05:04,159
minimum page size and that allows them

64
00:05:00,950 --> 00:05:06,620
<font color="#CCCCCC">to introduce 128 kilo byte level 1</font>

65
00:05:04,160 --> 00:05:09,380
caches<font color="#E5E5E5"> that's larger</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> the 11 1</font>

66
00:05:06,620 --> 00:05:12,370
caches<font color="#E5E5E5"> in Intel processors so caches</font>

67
00:05:09,380 --> 00:05:12,370
<font color="#E5E5E5">super nice</font>

68
00:05:17,010 --> 00:05:25,010
<font color="#E5E5E5">okay and probably you see you only want</font>

69
00:05:22,470 --> 00:05:28,590
performance but<font color="#CCCCCC"> that's not everything</font>

70
00:05:25,010 --> 00:05:30,990
<font color="#CCCCCC">the chunks of</font><font color="#E5E5E5"> it so for instance imagine</font>

71
00:05:28,590 --> 00:05:33,960
<font color="#E5E5E5">a program no</font><font color="#CCCCCC"> box at all no</font>

72
00:05:30,990 --> 00:05:35,940
<font color="#CCCCCC">vulnerabilities but apparently</font><font color="#E5E5E5"> this does</font>

73
00:05:33,960 --> 00:05:39,109
not<font color="#E5E5E5"> mean that the software that</font><font color="#CCCCCC"> is</font>

74
00:05:35,940 --> 00:05:41,940
executed<font color="#E5E5E5"> is actually safe because</font>

75
00:05:39,110 --> 00:05:44,130
<font color="#E5E5E5">information can leak from</font><font color="#CCCCCC"> the underlying</font>

76
00:05:41,940 --> 00:05:48,240
<font color="#CCCCCC">hardware from</font><font color="#E5E5E5"> your performance</font>

77
00:05:44,130 --> 00:05:49,500
improvements that<font color="#E5E5E5"> you celebrate here not</font>

78
00:05:48,240 --> 00:05:53,430
if you<font color="#CCCCCC"> don't have any software backs</font>

79
00:05:49,500 --> 00:05:55,650
<font color="#CCCCCC">right</font><font color="#E5E5E5"> that's not the case because you</font>

80
00:05:53,430 --> 00:05:58,230
can exploit this leakage through side

81
00:05:55,650 --> 00:06:00,780
channels<font color="#E5E5E5"> for instance you can look at</font>

82
00:05:58,230 --> 00:06:02,640
the power consumption or the<font color="#CCCCCC"> execution</font>

83
00:06:00,780 --> 00:06:04,080
time of<font color="#E5E5E5"> your algorithm yeah sure then</font>

84
00:06:02,640 --> 00:06:05,700
<font color="#CCCCCC">you know</font><font color="#E5E5E5"> that it consumes a bit more</font>

85
00:06:04,080 --> 00:06:08,580
power what do you learn<font color="#CCCCCC"> from that</font><font color="#E5E5E5"> I mean</font>

86
00:06:05,700 --> 00:06:14,159
whatever<font color="#CCCCCC"> a lot as we will see and also</font>

87
00:06:08,580 --> 00:06:15,960
CPU caches but more importantly<font color="#E5E5E5"> before</font>

88
00:06:14,160 --> 00:06:17,390
we dive into those topics<font color="#CCCCCC"> is to</font>

89
00:06:15,960 --> 00:06:20,729
understand the difference between

90
00:06:17,390 --> 00:06:23,250
architecture and microarchitecture<font color="#E5E5E5"> all</font>

91
00:06:20,730 --> 00:06:27,210
of us know instruction set architecture

92
00:06:23,250 --> 00:06:29,610
like<font color="#CCCCCC"> on v8 x86</font><font color="#E5E5E5"> and this is just an</font>

93
00:06:27,210 --> 00:06:32,520
abstract model<font color="#E5E5E5"> of a computer but</font>

94
00:06:29,610 --> 00:06:36,600
actually<font color="#CCCCCC"> there is</font><font color="#E5E5E5"> an interface</font><font color="#CCCCCC"> between</font>

95
00:06:32,520 --> 00:06:39,090
<font color="#CCCCCC">hardware and the software and how</font><font color="#E5E5E5"> those</font>

96
00:06:36,600 --> 00:06:41,580
instructions are implemented is defined

97
00:06:39,090 --> 00:06:43,830
by the<font color="#CCCCCC"> microarchitecture and</font><font color="#E5E5E5"> this is</font>

98
00:06:41,580 --> 00:06:45,659
where things get interesting<font color="#E5E5E5"> yeah yeah</font>

99
00:06:43,830 --> 00:06:48,180
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> what I made</font><font color="#E5E5E5"> with the risk and</font>

100
00:06:45,660 --> 00:06:53,160
<font color="#CCCCCC">sisk stuff</font><font color="#E5E5E5"> right yeah because we all</font>

101
00:06:48,180 --> 00:06:55,470
know AMD<font color="#CCCCCC"> athlon Rison</font><font color="#E5E5E5"> Co I 7 C on and so</font>

102
00:06:53,160 --> 00:06:57,390
<font color="#CCCCCC">on and they all I'd be different and</font>

103
00:06:55,470 --> 00:06:59,610
they are<font color="#E5E5E5"> quite fast they like them yeah</font>

104
00:06:57,390 --> 00:07:02,969
that's true<font color="#CCCCCC"> but this also is a problem</font>

105
00:06:59,610 --> 00:07:04,620
sometimes<font color="#CCCCCC"> and all</font><font color="#E5E5E5"> of them have many</font>

106
00:07:02,970 --> 00:07:07,530
<font color="#E5E5E5">elements</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> order to improve performance</font>

107
00:07:04,620 --> 00:07:10,380
<font color="#CCCCCC">in order to</font><font color="#E5E5E5"> achieve different tasks</font>

108
00:07:07,530 --> 00:07:13,409
efficiently<font color="#E5E5E5"> so they contain multiple</font>

109
00:07:10,380 --> 00:07:16,200
micro architectural elements for

110
00:07:13,410 --> 00:07:18,030
instance<font color="#CCCCCC"> patience and buffers different</font>

111
00:07:16,200 --> 00:07:20,610
predictors like the branch predictor<font color="#E5E5E5"> 10</font>

112
00:07:18,030 --> 00:07:23,039
even<font color="#E5E5E5"> mentioned and so on and the nice</font>

113
00:07:20,610 --> 00:07:24,660
<font color="#CCCCCC">thing is they make everything faster</font>

114
00:07:23,040 --> 00:07:27,420
<font color="#E5E5E5">that's nothing</font>

115
00:07:24,660 --> 00:07:29,250
antia transparent for the<font color="#E5E5E5"> programmer so</font>

116
00:07:27,420 --> 00:07:30,920
he doesn't notice<font color="#E5E5E5"> at all he runs the</font>

117
00:07:29,250 --> 00:07:32,670
same program on a different

118
00:07:30,920 --> 00:07:36,390
microarchitecture<font color="#CCCCCC"> and everything is</font>

119
00:07:32,670 --> 00:07:39,720
faster but since everything<font color="#CCCCCC"> is faster in</font>

120
00:07:36,390 --> 00:07:41,940
<font color="#CCCCCC">some cases we have timing optimizations</font>

121
00:07:39,720 --> 00:07:43,650
and<font color="#E5E5E5"> therefore timing differences and as</font>

122
00:07:41,940 --> 00:07:46,380
we've learned<font color="#E5E5E5"> earlier those timing</font>

123
00:07:43,650 --> 00:07:48,239
differences aside<font color="#E5E5E5"> channel</font><font color="#CCCCCC"> leakage and we</font>

124
00:07:46,380 --> 00:07:50,460
can exploit but no one knows<font color="#E5E5E5"> what you</font>

125
00:07:48,240 --> 00:07:52,890
can learn<font color="#E5E5E5"> with that right</font><font color="#CCCCCC"> now a lot and</font>

126
00:07:50,460 --> 00:07:54,630
actually<font color="#CCCCCC"> enjoyed</font><font color="#E5E5E5"> I also optimized</font>

127
00:07:52,890 --> 00:07:57,289
something during<font color="#E5E5E5"> the Christmas holidays</font>

128
00:07:54,630 --> 00:08:00,630
<font color="#E5E5E5">because I needed to cook something</font>

129
00:07:57,290 --> 00:08:02,730
cooking is nicer<font color="#E5E5E5"> so I wanted to cook</font>

130
00:08:00,630 --> 00:08:05,150
<font color="#CCCCCC">something</font><font color="#E5E5E5"> I prepared the board</font>

131
00:08:02,730 --> 00:08:08,190
<font color="#E5E5E5">everything to cut and then I figured out</font>

132
00:08:05,150 --> 00:08:11,700
damn<font color="#E5E5E5"> I'm missing the vegetables I'm</font>

133
00:08:08,190 --> 00:08:13,890
missing the tomatoes the bell peppers<font color="#E5E5E5"> so</font>

134
00:08:11,700 --> 00:08:16,289
I need to go to the supermarket<font color="#E5E5E5"> and this</font>

135
00:08:13,890 --> 00:08:18,599
takes a lot<font color="#CCCCCC"> of time and then I come back</font>

136
00:08:16,290 --> 00:08:20,760
now I have my<font color="#CCCCCC"> tomatoes on the bell</font>

137
00:08:18,600 --> 00:08:23,310
<font color="#E5E5E5">peppers so I can start cutting and then</font>

138
00:08:20,760 --> 00:08:25,680
I figure<font color="#E5E5E5"> out I wanted to cook some</font>

139
00:08:23,310 --> 00:08:28,380
spinach so what do I do

140
00:08:25,680 --> 00:08:30,120
I go again to the<font color="#CCCCCC"> supermarket this takes</font>

141
00:08:28,380 --> 00:08:33,000
a lot<font color="#E5E5E5"> of time everything everyone</font><font color="#CCCCCC"> is</font>

142
00:08:30,120 --> 00:08:35,520
hungry<font color="#CCCCCC"> so this sucks but</font><font color="#E5E5E5"> then I can</font>

143
00:08:33,000 --> 00:08:37,559
continue cooking so what I did<font color="#CCCCCC"> I</font>

144
00:08:35,520 --> 00:08:41,069
<font color="#E5E5E5">invented something and it's amazing</font>

145
00:08:37,559 --> 00:08:43,319
<font color="#CCCCCC">because what I</font><font color="#E5E5E5"> did I</font><font color="#CCCCCC"> used things you do</font>

146
00:08:41,070 --> 00:08:46,050
in the processes and apply them to

147
00:08:43,320 --> 00:08:49,500
everyday<font color="#E5E5E5"> life for cooking so I invented</font>

148
00:08:46,050 --> 00:08:52,560
a food cache and it's amazing because

149
00:08:49,500 --> 00:08:53,880
<font color="#CCCCCC">now I can store everything</font><font color="#E5E5E5"> there and I</font>

150
00:08:52,560 --> 00:08:54,420
do<font color="#E5E5E5"> not</font><font color="#CCCCCC"> have to go to the supermarket</font>

151
00:08:53,880 --> 00:08:57,000
again

152
00:08:54,420 --> 00:09:01,099
<font color="#E5E5E5">did you just explain process or caches</font>

153
00:08:57,000 --> 00:09:05,490
by cooking<font color="#E5E5E5"> yeah because it's relevant</font>

154
00:09:01,100 --> 00:09:07,230
<font color="#CCCCCC">no</font><font color="#E5E5E5"> so actually since</font><font color="#CCCCCC"> I'm the specter of</font>

155
00:09:05,490 --> 00:09:10,620
<font color="#E5E5E5">the past I've</font><font color="#CCCCCC"> been here two years ago</font>

156
00:09:07,230 --> 00:09:13,950
and I've told you<font color="#E5E5E5"> something then in a</font>

157
00:09:10,620 --> 00:09:16,230
<font color="#E5E5E5">different talk about x86 my crack addict</font>

158
00:09:13,950 --> 00:09:19,950
sure and some of the<font color="#E5E5E5"> part</font><font color="#CCCCCC"> you didn't</font>

159
00:09:16,230 --> 00:09:22,620
listen to<font color="#E5E5E5"> apparently so</font><font color="#CCCCCC"> will repeat so</font>

160
00:09:19,950 --> 00:09:25,700
for CPU caches<font color="#E5E5E5"> imagine you have a</font>

161
00:09:22,620 --> 00:09:28,080
<font color="#E5E5E5">variable I and you want to</font><font color="#CCCCCC"> access it so</font>

162
00:09:25,700 --> 00:09:29,880
<font color="#CCCCCC">it's not in</font><font color="#E5E5E5"> the cache</font><font color="#CCCCCC"> so you have a</font>

163
00:09:28,080 --> 00:09:32,760
cache miss and<font color="#E5E5E5"> then you have to do a</font>

164
00:09:29,880 --> 00:09:34,380
lookup in the main memory<font color="#E5E5E5"> and</font><font color="#CCCCCC"> thus take</font>

165
00:09:32,760 --> 00:09:36,839
some time<font color="#CCCCCC"> you send a request</font><font color="#E5E5E5"> there the</font>

166
00:09:34,380 --> 00:09:38,189
main<font color="#E5E5E5"> memory will respond and the value</font>

167
00:09:36,839 --> 00:09:41,070
will<font color="#CCCCCC"> be loaded</font><font color="#E5E5E5"> into the cache</font>

168
00:09:38,190 --> 00:09:43,580
so the second time when you want<font color="#E5E5E5"> to use</font>

169
00:09:41,070 --> 00:09:47,340
this variable<font color="#CCCCCC"> it's already</font><font color="#E5E5E5"> in the cache</font>

170
00:09:43,580 --> 00:09:50,250
<font color="#CCCCCC">so if we have a cache miss</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> need to do</font>

171
00:09:47,340 --> 00:09:52,290
a<font color="#CCCCCC"> DRM</font><font color="#E5E5E5"> access so everything is slow but</font>

172
00:09:50,250 --> 00:09:54,150
<font color="#E5E5E5">on the other</font><font color="#CCCCCC"> hand if we do not need</font><font color="#E5E5E5"> a</font>

173
00:09:52,290 --> 00:09:57,180
<font color="#E5E5E5">tearoom access because the value</font><font color="#CCCCCC"> is</font>

174
00:09:54,150 --> 00:09:58,980
already cache<font color="#E5E5E5"> it's fast and it's doing</font>

175
00:09:57,180 --> 00:10:00,449
<font color="#CCCCCC">exactly what it's supposed</font><font color="#E5E5E5"> to do and it</font>

176
00:09:58,980 --> 00:10:02,430
makes<font color="#E5E5E5"> everything better</font>

177
00:10:00,450 --> 00:10:05,040
yeah but don't you<font color="#E5E5E5"> see a problem here</font><font color="#CCCCCC"> I</font>

178
00:10:02,430 --> 00:10:06,329
don't<font color="#CCCCCC"> see a problem</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> saying faster</font>

179
00:10:05,040 --> 00:10:09,300
<font color="#E5E5E5">and more efficient</font>

180
00:10:06,330 --> 00:10:11,580
that's true<font color="#E5E5E5"> but imagine if an attacker</font>

181
00:10:09,300 --> 00:10:14,160
can<font color="#E5E5E5"> measure that</font><font color="#CCCCCC"> it just has a</font><font color="#E5E5E5"> high</font>

182
00:10:11,580 --> 00:10:16,890
<font color="#E5E5E5">resolution timer measures the access</font>

183
00:10:14,160 --> 00:10:19,530
time<font color="#E5E5E5"> to memory address and if it's in</font>

184
00:10:16,890 --> 00:10:21,600
the<font color="#E5E5E5"> cache it's pretty fast but on the</font>

185
00:10:19,530 --> 00:10:24,959
other<font color="#CCCCCC"> hand if it's not in the cache</font><font color="#E5E5E5"> it's</font>

186
00:10:21,600 --> 00:10:26,700
much slower<font color="#E5E5E5"> as we've seen so what an</font>

187
00:10:24,960 --> 00:10:29,310
attacker can do he<font color="#E5E5E5"> can figure out a</font>

188
00:10:26,700 --> 00:10:30,930
<font color="#E5E5E5">fresh hold in between to distinguish if</font>

189
00:10:29,310 --> 00:10:33,300
a<font color="#E5E5E5"> variable has been</font><font color="#CCCCCC"> loaded into the</font>

190
00:10:30,930 --> 00:10:36,150
cache<font color="#E5E5E5"> or not</font><font color="#CCCCCC"> and he can build powerful</font>

191
00:10:33,300 --> 00:10:38,339
<font color="#E5E5E5">attacks with that for instance the flash</font>

192
00:10:36,150 --> 00:10:40,470
<font color="#E5E5E5">and reload attack imagine the address</font>

193
00:10:38,340 --> 00:10:41,940
space<font color="#CCCCCC"> of an</font><font color="#E5E5E5"> attacker on the left and the</font>

194
00:10:40,470 --> 00:10:44,220
address space<font color="#CCCCCC"> of the victim on the right</font>

195
00:10:41,940 --> 00:10:46,770
and to use some shared memory like a

196
00:10:44,220 --> 00:10:50,040
shared library<font color="#CCCCCC"> this means an address</font>

197
00:10:46,770 --> 00:10:52,860
from<font color="#E5E5E5"> the shared library is cached for</font>

198
00:10:50,040 --> 00:10:54,959
both the attacker<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the victim what</font>

199
00:10:52,860 --> 00:10:57,570
the attacker<font color="#E5E5E5"> now can do he can use an</font>

200
00:10:54,960 --> 00:11:00,210
unprivileged<font color="#E5E5E5"> instruction on x86 the</font>

201
00:10:57,570 --> 00:11:03,540
steal flash instruction to remove<font color="#E5E5E5"> this</font>

202
00:11:00,210 --> 00:11:05,520
data from<font color="#E5E5E5"> the cache this means the data</font>

203
00:11:03,540 --> 00:11:08,880
<font color="#E5E5E5">is not</font><font color="#CCCCCC"> in the cache for both the victim</font>

204
00:11:05,520 --> 00:11:12,420
and<font color="#E5E5E5"> the attacker</font><font color="#CCCCCC"> of course now the</font>

205
00:11:08,880 --> 00:11:15,180
<font color="#CCCCCC">victim is scheduled he can either</font><font color="#E5E5E5"> access</font>

206
00:11:12,420 --> 00:11:17,370
the<font color="#CCCCCC"> address in this case he does which</font>

207
00:11:15,180 --> 00:11:19,650
will transparently load back the value

208
00:11:17,370 --> 00:11:22,500
<font color="#E5E5E5">into the cache and what the attacker can</font>

209
00:11:19,650 --> 00:11:24,510
do now he can again access the measure

210
00:11:22,500 --> 00:11:26,790
up measure the access time of this

211
00:11:24,510 --> 00:11:29,970
variable and figure out<font color="#E5E5E5"> if the victim</font>

212
00:11:26,790 --> 00:11:32,699
<font color="#CCCCCC">has accessed the</font><font color="#E5E5E5"> address or not and this</font>

213
00:11:29,970 --> 00:11:34,290
<font color="#E5E5E5">is very nice as an attacker because</font><font color="#CCCCCC"> you</font>

214
00:11:32,700 --> 00:11:36,270
can<font color="#E5E5E5"> build powerful attacks with that</font>

215
00:11:34,290 --> 00:11:38,699
really really what can<font color="#CCCCCC"> you beat with</font>

216
00:11:36,270 --> 00:11:40,829
<font color="#CCCCCC">that so for</font><font color="#E5E5E5"> instance what you could do</font>

217
00:11:38,700 --> 00:11:43,890
but<font color="#E5E5E5"> just looking at cache hits and</font>

218
00:11:40,830 --> 00:11:46,490
misses<font color="#CCCCCC"> you can leak AES keys from the</font>

219
00:11:43,890 --> 00:11:49,500
cache<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> just academic attacks right</font>

220
00:11:46,490 --> 00:11:50,960
<font color="#E5E5E5">can't really do</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can also look</font>

221
00:11:49,500 --> 00:11:54,140
<font color="#CCCCCC">at keystroke timings with</font>

222
00:11:50,960 --> 00:11:56,360
cash<font color="#CCCCCC"> or built a covet channel using</font><font color="#E5E5E5"> the</font>

223
00:11:54,140 --> 00:11:58,550
cash<font color="#E5E5E5"> to transmit some data from one</font>

224
00:11:56,360 --> 00:12:01,850
<font color="#CCCCCC">Android application to the other</font><font color="#E5E5E5"> so the</font>

225
00:11:58,550 --> 00:12:04,430
academics say yeah<font color="#CCCCCC"> and you can choose in</font>

226
00:12:01,850 --> 00:12:06,110
the browser<font color="#E5E5E5"> and the cloud and trusted</font>

227
00:12:04,430 --> 00:12:08,300
<font color="#CCCCCC">execution environments like try</font><font color="#E5E5E5"> you</font>

228
00:12:06,110 --> 00:12:11,630
<font color="#CCCCCC">can't prove that</font><font color="#E5E5E5"> it actually works</font><font color="#CCCCCC"> oh I</font>

229
00:12:08,300 --> 00:12:14,839
do because I have<font color="#CCCCCC"> a demo with me so here</font>

230
00:12:11,630 --> 00:12:17,240
we see a<font color="#E5E5E5"> Samsung Galaxy s6 and the</font>

231
00:12:14,840 --> 00:12:19,730
<font color="#E5E5E5">victim opens his favorite messenger and</font>

232
00:12:17,240 --> 00:12:22,070
tries<font color="#CCCCCC"> to send a message</font><font color="#E5E5E5"> and despite</font>

233
00:12:19,730 --> 00:12:24,560
occasional need any permissions in

234
00:12:22,070 --> 00:12:26,900
privileges on<font color="#CCCCCC"> the system which has used</font>

235
00:12:24,560 --> 00:12:28,819
the<font color="#CCCCCC"> cache</font><font color="#E5E5E5"> to figure out</font><font color="#CCCCCC"> whenever the</font>

236
00:12:26,900 --> 00:12:31,520
victim typed something<font color="#CCCCCC"> and he can</font>

237
00:12:28,820 --> 00:12:33,440
distinguish between<font color="#E5E5E5"> alphabet letters</font><font color="#CCCCCC"> to</font>

238
00:12:31,520 --> 00:12:36,350
space the backspace figure out the

239
00:12:33,440 --> 00:12:39,110
length<font color="#E5E5E5"> of the words seriously</font><font color="#CCCCCC"> yes this</font>

240
00:12:36,350 --> 00:12:41,990
is just<font color="#E5E5E5"> metadata</font><font color="#CCCCCC"> you're interrupting</font><font color="#E5E5E5"> my</font>

241
00:12:39,110 --> 00:12:44,750
talk on performance for metadata<font color="#CCCCCC"> go</font>

242
00:12:41,990 --> 00:12:48,250
<font color="#CCCCCC">offstage</font><font color="#E5E5E5"> come on</font><font color="#CCCCCC"> go offstage I I want to</font>

243
00:12:44,750 --> 00:12:51,860
continue with my talk on fast computers

244
00:12:48,250 --> 00:12:53,630
so I talked about the Apple<font color="#E5E5E5"> and there</font>

245
00:12:51,860 --> 00:12:57,050
are actually more interesting<font color="#E5E5E5"> features</font>

246
00:12:53,630 --> 00:12:58,760
for instance<font color="#CCCCCC"> intel since long time</font><font color="#E5E5E5"> is</font>

247
00:12:57,050 --> 00:13:00,410
improving more and more on out of<font color="#E5E5E5"> order</font>

248
00:12:58,760 --> 00:13:02,600
parallelism and<font color="#E5E5E5"> they also announced</font>

249
00:13:00,410 --> 00:13:05,449
something<font color="#E5E5E5"> new there and to understand</font>

250
00:13:02,600 --> 00:13:07,370
that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> want to explain</font><font color="#CCCCCC"> out of order</font>

251
00:13:05,450 --> 00:13:08,570
execution and<font color="#E5E5E5"> that's again</font><font color="#CCCCCC"> because more</font>

252
00:13:07,370 --> 00:13:10,610
that's<font color="#E5E5E5"> already talked about cooking</font>

253
00:13:08,570 --> 00:13:13,730
<font color="#E5E5E5">maybe we should also talk about cooking</font>

254
00:13:10,610 --> 00:13:15,500
<font color="#E5E5E5">we all cook make cookies during</font><font color="#CCCCCC"> the</font>

255
00:13:13,730 --> 00:13:17,750
<font color="#E5E5E5">Christmas holidays or before the</font>

256
00:13:15,500 --> 00:13:20,960
<font color="#E5E5E5">Christmas holidays and usually we want</font>

257
00:13:17,750 --> 00:13:22,460
<font color="#E5E5E5">them</font><font color="#CCCCCC"> to look like</font><font color="#E5E5E5"> this and usually what</font>

258
00:13:20,960 --> 00:13:25,760
we start with<font color="#E5E5E5"> looks like this and</font>

259
00:13:22,460 --> 00:13:28,040
there's some way<font color="#E5E5E5"> in between and usually</font>

260
00:13:25,760 --> 00:13:30,830
it<font color="#E5E5E5"> involves stirring</font><font color="#CCCCCC"> everything and</font>

261
00:13:28,040 --> 00:13:32,810
forming<font color="#E5E5E5"> small balls and then pressing</font>

262
00:13:30,830 --> 00:13:35,900
them flat<font color="#E5E5E5"> and putting them in the oven</font>

263
00:13:32,810 --> 00:13:38,089
<font color="#CCCCCC">and afterwards you want to dip them into</font>

264
00:13:35,900 --> 00:13:40,040
chocolate<font color="#E5E5E5"> but the problem is if you wait</font>

265
00:13:38,090 --> 00:13:43,040
until the<font color="#CCCCCC"> cookies</font><font color="#E5E5E5"> are already done</font>

266
00:13:40,040 --> 00:13:45,230
you're losing some time<font color="#CCCCCC"> so actually you</font>

267
00:13:43,040 --> 00:13:46,449
can<font color="#E5E5E5"> save some time by now</font><font color="#CCCCCC"> while the</font>

268
00:13:45,230 --> 00:13:48,620
cookies<font color="#CCCCCC"> are in the oven</font>

269
00:13:46,450 --> 00:13:49,850
preparing the hot<font color="#CCCCCC"> chocolate and then</font>

270
00:13:48,620 --> 00:13:51,890
dipping them into<font color="#E5E5E5"> the hot chocolate</font>

271
00:13:49,850 --> 00:13:54,020
<font color="#E5E5E5">afterwards when they are ready and the</font>

272
00:13:51,890 --> 00:13:56,150
hot chocolate<font color="#E5E5E5"> is ready</font><font color="#CCCCCC"> so everything's</font>

273
00:13:54,020 --> 00:13:58,400
perfect<font color="#E5E5E5"> and everything's faster I saved</font>

274
00:13:56,150 --> 00:14:02,079
a lot<font color="#CCCCCC"> of time here so this is great</font><font color="#E5E5E5"> and</font>

275
00:13:58,400 --> 00:14:02,079
we can<font color="#CCCCCC"> do the</font><font color="#E5E5E5"> same thing in computers</font>

276
00:14:03,760 --> 00:14:12,399
don't you listen<font color="#E5E5E5"> to the specters of the</font>

277
00:14:06,589 --> 00:14:12,399
past<font color="#E5E5E5"> it's me Michael Specter from the</font>

278
00:14:14,110 --> 00:14:19,300
<font color="#E5E5E5">presence here don't you see you kind of</font>

279
00:14:17,089 --> 00:14:22,010
<font color="#E5E5E5">opening the box of</font><font color="#CCCCCC"> pantora with that</font>

280
00:14:19,300 --> 00:14:25,130
that's that's<font color="#CCCCCC"> not good what you are</font>

281
00:14:22,010 --> 00:14:27,370
doing order here<font color="#E5E5E5"> it's it's a kind of</font>

282
00:14:25,130 --> 00:14:30,399
<font color="#E5E5E5">romantic performance optimization</font>

283
00:14:27,370 --> 00:14:33,950
imagine you burn the cookies in the oven

284
00:14:30,399 --> 00:14:38,740
and then<font color="#CCCCCC"> you can't dip them in the</font>

285
00:14:33,950 --> 00:14:38,740
<font color="#CCCCCC">chocolate</font><font color="#E5E5E5"> so if someone sees the</font>

286
00:14:40,089 --> 00:14:44,630
apparently it's true<font color="#CCCCCC"> that really</font><font color="#E5E5E5"> you're</font>

287
00:14:43,040 --> 00:14:47,810
trying<font color="#CCCCCC"> to explain me that they learn</font>

288
00:14:44,630 --> 00:14:50,540
that<font color="#E5E5E5"> I try to bake cookies yes</font>

289
00:14:47,810 --> 00:14:54,500
that's again metadata right<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> no it's</font>

290
00:14:50,540 --> 00:14:57,040
quite more<font color="#E5E5E5"> than metadata we can do a lot</font>

291
00:14:54,500 --> 00:14:59,270
more<font color="#E5E5E5"> of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> let's look at it on an</font>

292
00:14:57,040 --> 00:15:01,670
computer science<font color="#E5E5E5"> level so we have an</font>

293
00:14:59,270 --> 00:15:04,069
simple program here<font color="#CCCCCC"> that has some</font>

294
00:15:01,670 --> 00:15:07,130
variables and calculates the diagonal

295
00:15:04,070 --> 00:15:09,830
and<font color="#E5E5E5"> the area of some geometric figure</font>

296
00:15:07,130 --> 00:15:12,200
<font color="#CCCCCC">and if you look at</font><font color="#E5E5E5"> that we go</font><font color="#CCCCCC"> through it</font>

297
00:15:09,830 --> 00:15:15,110
line by line usually<font color="#E5E5E5"> but the computer</font>

298
00:15:12,200 --> 00:15:16,940
could do an optimized variant of that<font color="#CCCCCC"> by</font>

299
00:15:15,110 --> 00:15:19,520
<font color="#E5E5E5">figuring out what the</font><font color="#CCCCCC"> dependencies are</font>

300
00:15:16,940 --> 00:15:21,230
of the code lines<font color="#E5E5E5"> and what it could</font>

301
00:15:19,520 --> 00:15:23,240
paralyze<font color="#E5E5E5"> so this is just what I</font>

302
00:15:21,230 --> 00:15:24,589
explained right<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> thing you do</font>

303
00:15:23,240 --> 00:15:28,820
with<font color="#E5E5E5"> cookies the computer just with</font>

304
00:15:24,589 --> 00:15:30,980
<font color="#CCCCCC">kotor we illustrated here as code in if</font>

305
00:15:28,820 --> 00:15:33,680
we actually<font color="#E5E5E5"> look at the hardware level</font>

306
00:15:30,980 --> 00:15:36,140
it's<font color="#E5E5E5"> not the code lines but we go down</font>

307
00:15:33,680 --> 00:15:40,370
to instruction level<font color="#E5E5E5"> so it's basically</font>

308
00:15:36,140 --> 00:15:42,980
more<font color="#E5E5E5"> a kitchen in your cpu this is the</font>

309
00:15:40,370 --> 00:15:44,870
out of<font color="#CCCCCC"> order execution</font><font color="#E5E5E5"> and it looks a</font>

310
00:15:42,980 --> 00:15:46,810
bit<font color="#E5E5E5"> more complicated in your kitchen and</font>

311
00:15:44,870 --> 00:15:49,579
there's a lot<font color="#E5E5E5"> of more things in parallel</font>

312
00:15:46,810 --> 00:15:51,560
<font color="#CCCCCC">see</font><font color="#E5E5E5"> if the instruction stream from the</font>

313
00:15:49,579 --> 00:15:52,819
application<font color="#E5E5E5"> going in the all the</font>

314
00:15:51,560 --> 00:15:55,130
instructions are fetched and then

315
00:15:52,820 --> 00:15:57,170
decoded<font color="#E5E5E5"> in the front end and then with</font>

316
00:15:55,130 --> 00:15:59,630
dispatch it<font color="#E5E5E5"> to</font><font color="#CCCCCC"> it back end with some</font>

317
00:15:57,170 --> 00:16:01,790
scheduling there<font color="#E5E5E5"> and then we have a lot</font>

318
00:15:59,630 --> 00:16:05,060
of execution units that can do a<font color="#E5E5E5"> lot of</font>

319
00:16:01,790 --> 00:16:07,010
things like an<font color="#E5E5E5"> oven and they are</font>

320
00:16:05,060 --> 00:16:10,130
processed by<font color="#E5E5E5"> the individual execution</font>

321
00:16:07,010 --> 00:16:12,410
units<font color="#E5E5E5"> I was about to explain all this in</font>

322
00:16:10,130 --> 00:16:15,140
<font color="#CCCCCC">my performance talk what what what do</font>

323
00:16:12,410 --> 00:16:16,310
<font color="#CCCCCC">you want to tell me here yes</font><font color="#E5E5E5"> so you</font>

324
00:16:15,140 --> 00:16:17,660
still<font color="#E5E5E5"> don't see your problem</font>

325
00:16:16,310 --> 00:16:20,959
<font color="#E5E5E5">if that it's a nice performance</font>

326
00:16:17,660 --> 00:16:23,770
optimization<font color="#E5E5E5"> I agree with that but still</font>

327
00:16:20,960 --> 00:16:27,650
<font color="#E5E5E5">there's a problem</font><font color="#CCCCCC"> I did an experiment</font>

328
00:16:23,770 --> 00:16:30,680
<font color="#E5E5E5">look at my</font><font color="#CCCCCC"> code here</font><font color="#E5E5E5"> so I wrote two</font>

329
00:16:27,650 --> 00:16:32,990
lines of<font color="#E5E5E5"> code really you're accessing in</font>

330
00:16:30,680 --> 00:16:35,660
a pointer yes

331
00:16:32,990 --> 00:16:37,630
it's a<font color="#E5E5E5"> problem are you expecting this to</font>

332
00:16:35,660 --> 00:16:43,819
do anything<font color="#E5E5E5"> useful</font>

333
00:16:37,630 --> 00:16:45,589
you<font color="#E5E5E5"> expected ticklish right that yeah I</font>

334
00:16:43,820 --> 00:16:48,080
mean<font color="#E5E5E5"> first I</font><font color="#CCCCCC"> tried to compile it</font>

335
00:16:45,589 --> 00:16:51,890
my compiler wasn't so happy<font color="#E5E5E5"> about it</font>

336
00:16:48,080 --> 00:16:54,950
<font color="#E5E5E5">what is</font><font color="#CCCCCC"> surprise my static code analyzer</font>

337
00:16:51,890 --> 00:16:56,360
wasn't happy either<font color="#CCCCCC"> I said it's a</font>

338
00:16:54,950 --> 00:16:59,150
dereference of a null<font color="#CCCCCC"> pointer it will</font>

339
00:16:56,360 --> 00:17:00,830
crash here<font color="#E5E5E5"> so use</font><font color="#CCCCCC"> that the same it will</font>

340
00:16:59,150 --> 00:17:03,079
crash after the<font color="#E5E5E5"> first line second line</font>

341
00:17:00,830 --> 00:17:06,500
this access to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> memory will never</font><font color="#E5E5E5"> be</font>

342
00:17:03,080 --> 00:17:09,260
executed<font color="#E5E5E5"> so that's what what do you</font>

343
00:17:06,500 --> 00:17:13,220
think what it<font color="#CCCCCC"> compiler</font><font color="#E5E5E5"> things but it</font>

344
00:17:09,260 --> 00:17:15,800
righted of course<font color="#E5E5E5"> and what happens I do</font>

345
00:17:13,220 --> 00:17:18,380
a<font color="#E5E5E5"> flash and reload attack like the</font>

346
00:17:15,800 --> 00:17:20,180
<font color="#E5E5E5">specter of the past told you and I can</font>

347
00:17:18,380 --> 00:17:23,630
see<font color="#E5E5E5"> that the memory axis</font><font color="#CCCCCC"> actually</font>

348
00:17:20,180 --> 00:17:25,040
happened<font color="#E5E5E5"> so</font><font color="#CCCCCC"> this line was executed</font>

349
00:17:23,630 --> 00:17:27,230
although it should have crashed before

350
00:17:25,040 --> 00:17:28,879
but that's fine it's just<font color="#CCCCCC"> running in</font>

351
00:17:27,230 --> 00:17:31,580
parallel<font color="#E5E5E5"> and this does</font><font color="#CCCCCC"> not leak any</font>

352
00:17:28,880 --> 00:17:33,860
<font color="#E5E5E5">information</font><font color="#CCCCCC"> so is it's out of</font><font color="#E5E5E5"> order</font>

353
00:17:31,580 --> 00:17:37,699
<font color="#CCCCCC">execution and it's fine</font><font color="#E5E5E5"> yeah and I can't</font>

354
00:17:33,860 --> 00:17:39,320
<font color="#E5E5E5">abuse that for anything</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> it's</font>

355
00:17:37,700 --> 00:17:41,000
<font color="#E5E5E5">not a problem that they leave kind of</font>

356
00:17:39,320 --> 00:17:42,409
traces if you do things out of order<font color="#E5E5E5"> and</font>

357
00:17:41,000 --> 00:17:44,980
<font color="#E5E5E5">you leave traces like chocolate for</font>

358
00:17:42,410 --> 00:17:48,320
<font color="#E5E5E5">burnt cookies not a problem</font>

359
00:17:44,980 --> 00:17:49,840
when<font color="#E5E5E5"> we can see them in the</font>

360
00:17:48,320 --> 00:17:52,639
microarchitecture<font color="#CCCCCC"> and all these elements</font>

361
00:17:49,840 --> 00:17:54,110
<font color="#E5E5E5">then we give them a name</font><font color="#CCCCCC"> Colin trends in</font>

362
00:17:52,640 --> 00:17:59,120
executions we have something to<font color="#E5E5E5"> talk</font>

363
00:17:54,110 --> 00:18:01,280
about<font color="#E5E5E5"> and then we can see this execution</font>

364
00:17:59,120 --> 00:18:03,260
<font color="#CCCCCC">of you're out of aura instructions</font><font color="#E5E5E5"> and</font>

365
00:18:01,280 --> 00:18:05,960
if you now think<font color="#CCCCCC"> about how it actually</font>

366
00:18:03,260 --> 00:18:08,510
<font color="#CCCCCC">works</font><font color="#E5E5E5"> if you reference</font><font color="#CCCCCC"> an address</font><font color="#E5E5E5"> if you</font>

367
00:18:05,960 --> 00:18:10,340
<font color="#CCCCCC">load something</font><font color="#E5E5E5"> from the memory then we</font>

368
00:18:08,510 --> 00:18:12,320
try<font color="#E5E5E5"> to read an address then we have the</font>

369
00:18:10,340 --> 00:18:14,659
memory management unit<font color="#E5E5E5"> translating the</font>

370
00:18:12,320 --> 00:18:16,490
addresses checking<font color="#E5E5E5"> this bits the</font>

371
00:18:14,660 --> 00:18:19,310
permission pets<font color="#E5E5E5"> whether we can</font><font color="#CCCCCC"> actually</font>

372
00:18:16,490 --> 00:18:22,130
read that if the permission bits are

373
00:18:19,310 --> 00:18:24,649
fine everything is<font color="#CCCCCC"> ok ok and we get the</font>

374
00:18:22,130 --> 00:18:26,510
data<font color="#E5E5E5"> from this</font><font color="#CCCCCC"> address but</font><font color="#E5E5E5"> if you don't</font>

375
00:18:24,650 --> 00:18:29,400
have<font color="#E5E5E5"> permission to read that for example</font>

376
00:18:26,510 --> 00:18:32,040
because we try<font color="#E5E5E5"> to read privileged memory</font>

377
00:18:29,400 --> 00:18:36,090
the memory management unit tells us nope

378
00:18:32,040 --> 00:18:39,450
<font color="#E5E5E5">and kills the application so we're gone</font>

379
00:18:36,090 --> 00:18:40,980
<font color="#CCCCCC">that's what's supposed</font><font color="#E5E5E5"> to happen but let</font>

380
00:18:39,450 --> 00:18:43,440
and that's what happens here right

381
00:18:40,980 --> 00:18:45,710
<font color="#E5E5E5">that's what happens</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> but let's get</font>

382
00:18:43,440 --> 00:18:49,200
<font color="#CCCCCC">back to</font><font color="#E5E5E5"> my experiment and combine that</font>

383
00:18:45,710 --> 00:18:51,330
so before<font color="#CCCCCC"> that I had this null pointer</font>

384
00:18:49,200 --> 00:18:54,300
dereference<font color="#E5E5E5"> which doesn't make a lot</font><font color="#CCCCCC"> of</font>

385
00:18:51,330 --> 00:18:56,790
sense<font color="#E5E5E5"> but if I replace the XS to the</font>

386
00:18:54,300 --> 00:18:59,129
null pointer with an access to kernel

387
00:18:56,790 --> 00:19:01,980
address some privileged memory<font color="#E5E5E5"> I'm not</font>

388
00:18:59,130 --> 00:19:05,130
supposed to read<font color="#CCCCCC"> it will still crash it</font>

389
00:19:01,980 --> 00:19:08,040
will<font color="#CCCCCC"> crash I agree</font><font color="#E5E5E5"> but then I use this</font>

390
00:19:05,130 --> 00:19:11,690
data which I do<font color="#E5E5E5"> not get according to you</font>

391
00:19:08,040 --> 00:19:15,990
and use<font color="#E5E5E5"> that as an index to an array and</font>

392
00:19:11,690 --> 00:19:18,360
<font color="#CCCCCC">access the memory there and then I check</font>

393
00:19:15,990 --> 00:19:21,660
whether<font color="#E5E5E5"> any part of the array is</font>

394
00:19:18,360 --> 00:19:26,159
actually cached<font color="#E5E5E5"> but I can see any access</font>

395
00:19:21,660 --> 00:19:30,540
<font color="#CCCCCC">to this array and if I do</font><font color="#E5E5E5"> that huh</font>

396
00:19:26,160 --> 00:19:32,970
I get a cache hit<font color="#CCCCCC"> and</font><font color="#E5E5E5"> exactly this array</font>

397
00:19:30,540 --> 00:19:36,030
index which corresponds to the data

398
00:19:32,970 --> 00:19:40,170
<font color="#E5E5E5">which I was not supposed to read yeah</font>

399
00:19:36,030 --> 00:19:42,840
that's bad that's bad<font color="#E5E5E5"> because</font><font color="#CCCCCC"> the</font>

400
00:19:40,170 --> 00:19:44,160
<font color="#CCCCCC">Venetian check but but I mean you're</font>

401
00:19:42,840 --> 00:19:46,409
<font color="#CCCCCC">sure you're showing mentally showing</font>

402
00:19:44,160 --> 00:19:48,870
<font color="#CCCCCC">Lots here and this is from some academic</font>

403
00:19:46,410 --> 00:19:51,840
paper<font color="#E5E5E5"> this does not work in in in</font>

404
00:19:48,870 --> 00:19:54,479
<font color="#CCCCCC">practice right oh if if we do that we</font>

405
00:19:51,840 --> 00:19:56,070
can<font color="#E5E5E5"> actually read data</font><font color="#CCCCCC"> from the con</font><font color="#E5E5E5"> you</font>

406
00:19:54,480 --> 00:19:58,860
<font color="#E5E5E5">can read any data that's stored</font>

407
00:19:56,070 --> 00:20:01,379
currently in memory<font color="#CCCCCC"> well</font><font color="#E5E5E5"> it's even quite</font>

408
00:19:58,860 --> 00:20:04,320
fast<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> the fastest but</font><font color="#E5E5E5"> I can read</font>

409
00:20:01,380 --> 00:20:06,600
all your secrets you browser history for

410
00:20:04,320 --> 00:20:10,200
example<font color="#CCCCCC"> okay okay like that I guess yeah</font>

411
00:20:06,600 --> 00:20:12,419
this is<font color="#E5E5E5"> quite bad but I think we can do</font>

412
00:20:10,200 --> 00:20:15,630
something<font color="#E5E5E5"> against that right yeah so</font>

413
00:20:12,420 --> 00:20:21,480
that's<font color="#E5E5E5"> what we call</font><font color="#CCCCCC"> meltdown and</font><font color="#E5E5E5"> you</font>

414
00:20:15,630 --> 00:20:22,950
<font color="#CCCCCC">create this is actually quite</font><font color="#E5E5E5"> bad some</font>

415
00:20:21,480 --> 00:20:25,679
other attacks which you can<font color="#E5E5E5"> look up in</font>

416
00:20:22,950 --> 00:20:27,540
<font color="#E5E5E5">the talk which we linked earlier but the</font>

417
00:20:25,679 --> 00:20:29,100
issue<font color="#E5E5E5"> is quite obvious what you're doing</font>

418
00:20:27,540 --> 00:20:32,129
is you're accessing<font color="#E5E5E5"> and current address</font>

419
00:20:29,100 --> 00:20:36,360
<font color="#CCCCCC">while you're running in user space so</font>

420
00:20:32,130 --> 00:20:38,990
obviously this is<font color="#E5E5E5"> a huge</font><font color="#CCCCCC"> problem so why</font>

421
00:20:36,360 --> 00:20:42,399
don't we just take those<font color="#E5E5E5"> addresses and</font>

422
00:20:38,990 --> 00:20:45,110
remove them if we do not need them

423
00:20:42,400 --> 00:20:46,970
because the<font color="#E5E5E5"> user-accessible</font><font color="#CCCCCC"> check in</font>

424
00:20:45,110 --> 00:20:49,459
<font color="#E5E5E5">hardware which you explained</font><font color="#CCCCCC"> to us</font>

425
00:20:46,970 --> 00:20:51,799
obviously<font color="#CCCCCC"> does not work and is not</font>

426
00:20:49,460 --> 00:20:59,740
<font color="#E5E5E5">reliable</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> every case if you can mount</font>

427
00:20:51,799 --> 00:21:05,299
such an attack it will<font color="#E5E5E5"> learn eventually</font>

428
00:20:59,740 --> 00:21:07,610
<font color="#E5E5E5">so how can we mitigate meltdown we just</font>

429
00:21:05,299 --> 00:21:10,789
start<font color="#CCCCCC"> unwrapping</font><font color="#E5E5E5"> the kernel while we are</font>

430
00:21:07,610 --> 00:21:12,649
<font color="#CCCCCC">running in user space</font><font color="#E5E5E5"> and then the</font>

431
00:21:10,789 --> 00:21:15,379
kernel addresses are no longer present

432
00:21:12,650 --> 00:21:17,659
<font color="#CCCCCC">and if they are no longer present no one</font>

433
00:21:15,380 --> 00:21:19,820
can access them because<font color="#CCCCCC"> the memory which</font>

434
00:21:17,659 --> 00:21:23,210
<font color="#CCCCCC">is not mapped cannot be</font><font color="#E5E5E5"> accessed at all</font>

435
00:21:19,820 --> 00:21:26,000
and actually this<font color="#E5E5E5"> is what we implemented</font>

436
00:21:23,210 --> 00:21:29,000
in our<font color="#CCCCCC"> Keizer patch</font><font color="#E5E5E5"> which is now ported</font>

437
00:21:26,000 --> 00:21:31,570
to Linux Windows Mac OS in a much better

438
00:21:29,000 --> 00:21:35,090
fashion<font color="#E5E5E5"> but basically what</font><font color="#CCCCCC"> it does</font><font color="#E5E5E5"> is</font>

439
00:21:31,570 --> 00:21:37,220
imagine you have the user space on the

440
00:21:35,090 --> 00:21:39,520
<font color="#E5E5E5">left with</font><font color="#CCCCCC"> the applications and</font><font color="#E5E5E5"> the</font>

441
00:21:37,220 --> 00:21:42,860
kernel on the right and you mention<font color="#E5E5E5"> this</font>

442
00:21:39,520 --> 00:21:45,289
process<font color="#CCCCCC"> isolation</font><font color="#E5E5E5"> has a huge wall and no</font>

443
00:21:42,860 --> 00:21:47,270
application can<font color="#CCCCCC"> grab through this wall</font>

444
00:21:45,289 --> 00:21:50,059
to access the data but<font color="#E5E5E5"> with meltdown</font>

445
00:21:47,270 --> 00:21:52,399
<font color="#E5E5E5">they can so what we do now is by</font>

446
00:21:50,059 --> 00:21:55,158
changing<font color="#E5E5E5"> the</font><font color="#CCCCCC"> way the operating</font><font color="#E5E5E5"> system is</font>

447
00:21:52,399 --> 00:21:59,360
working when we<font color="#CCCCCC"> are running</font><font color="#E5E5E5"> in the</font>

448
00:21:55,159 --> 00:22:02,029
kernel mode the<font color="#CCCCCC"> user space</font><font color="#E5E5E5"> is there but</font>

449
00:21:59,360 --> 00:22:04,219
when we<font color="#E5E5E5"> are running in user mode and</font><font color="#CCCCCC"> T</font>

450
00:22:02,029 --> 00:22:06,679
<font color="#CCCCCC">attacker tries to</font><font color="#E5E5E5"> mount the same attack</font>

451
00:22:04,220 --> 00:22:07,340
<font color="#E5E5E5">punching</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> the wall nothing is</font>

452
00:22:06,679 --> 00:22:09,860
behind it

453
00:22:07,340 --> 00:22:15,649
and this is nice<font color="#CCCCCC"> because the melton</font>

454
00:22:09,860 --> 00:22:17,449
doesn't work<font color="#CCCCCC"> okay yeah but then this</font>

455
00:22:15,649 --> 00:22:21,770
<font color="#E5E5E5">problem is solved and we can think of</font>

456
00:22:17,450 --> 00:22:25,399
<font color="#E5E5E5">other things</font><font color="#CCCCCC"> maybe performance this just</font>

457
00:22:21,770 --> 00:22:28,039
fixes the<font color="#E5E5E5"> meltdown vulnerability but</font>

458
00:22:25,399 --> 00:22:31,189
actually there's more similar thing than

459
00:22:28,039 --> 00:22:34,039
<font color="#CCCCCC">that</font><font color="#E5E5E5"> okay you think about virtual</font>

460
00:22:31,190 --> 00:22:35,690
machines virtual<font color="#CCCCCC"> machines</font><font color="#E5E5E5"> yes sure we</font>

461
00:22:34,039 --> 00:22:37,940
<font color="#E5E5E5">are talking about native code but there</font>

462
00:22:35,690 --> 00:22:38,299
<font color="#CCCCCC">are no</font><font color="#E5E5E5"> real machines so no real problems</font>

463
00:22:37,940 --> 00:22:39,970
right now

464
00:22:38,299 --> 00:22:42,560
<font color="#CCCCCC">yeah</font>

465
00:22:39,970 --> 00:22:45,100
we still have virtual machines<font color="#CCCCCC"> and we</font>

466
00:22:42,560 --> 00:22:47,750
use them all<font color="#CCCCCC"> the time and of course</font>

467
00:22:45,100 --> 00:22:50,240
<font color="#CCCCCC">because we use them</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> the time we have</font>

468
00:22:47,750 --> 00:22:52,430
a lot of performance optimizations<font color="#E5E5E5"> for</font>

469
00:22:50,240 --> 00:22:54,710
virtual machines<font color="#CCCCCC"> like for the address</font>

470
00:22:52,430 --> 00:22:56,480
translation<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that we can do and more</font>

471
00:22:54,710 --> 00:22:58,400
efficient<font color="#E5E5E5"> address translation from</font>

472
00:22:56,480 --> 00:23:00,770
virtual machines<font color="#E5E5E5"> to actual physical</font>

473
00:22:58,400 --> 00:23:02,930
<font color="#CCCCCC">memory and that perfectly makes sense</font>

474
00:23:00,770 --> 00:23:05,660
and<font color="#E5E5E5"> that</font><font color="#CCCCCC"> makes sense to make</font><font color="#E5E5E5"> it faster</font>

475
00:23:02,930 --> 00:23:08,900
<font color="#E5E5E5">but again we might have a small</font><font color="#CCCCCC"> problem</font>

476
00:23:05,660 --> 00:23:11,720
here<font color="#E5E5E5"> so if we for example are in a</font>

477
00:23:08,900 --> 00:23:13,640
<font color="#E5E5E5">virtual machine like VirtualBox</font><font color="#CCCCCC"> and then</font>

478
00:23:11,720 --> 00:23:16,190
we have some page table that references

479
00:23:13,640 --> 00:23:18,410
some physical page and<font color="#CCCCCC"> its present</font><font color="#E5E5E5"> of</font>

480
00:23:16,190 --> 00:23:20,510
<font color="#E5E5E5">course then we can</font><font color="#CCCCCC"> dereferences</font><font color="#E5E5E5"> and</font>

481
00:23:18,410 --> 00:23:22,700
access the<font color="#CCCCCC"> memory there we have this</font>

482
00:23:20,510 --> 00:23:24,620
small<font color="#E5E5E5"> step</font><font color="#CCCCCC"> in between</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> that these</font>

483
00:23:22,700 --> 00:23:27,290
addresses in the virtual<font color="#E5E5E5"> machine</font><font color="#CCCCCC"> are</font>

484
00:23:24,620 --> 00:23:29,510
translated to<font color="#E5E5E5"> actual physical addresses</font>

485
00:23:27,290 --> 00:23:32,210
and these physical addresses then

486
00:23:29,510 --> 00:23:34,040
reference on physical page and we get

487
00:23:32,210 --> 00:23:36,260
the data<font color="#E5E5E5"> from the physical page and of</font>

488
00:23:34,040 --> 00:23:38,840
course we do a lookup with the physical

489
00:23:36,260 --> 00:23:40,820
<font color="#E5E5E5">address so that we can check where it's</font>

490
00:23:38,840 --> 00:23:42,919
<font color="#CCCCCC">already</font><font color="#E5E5E5"> the cache</font><font color="#CCCCCC"> to performance</font>

491
00:23:40,820 --> 00:23:47,330
optimization and get the data<font color="#E5E5E5"> from that</font>

492
00:23:42,920 --> 00:23:49,700
<font color="#E5E5E5">faster but what happens if we try to</font>

493
00:23:47,330 --> 00:23:55,429
<font color="#E5E5E5">dereference an address in a virtual</font>

494
00:23:49,700 --> 00:23:57,470
<font color="#E5E5E5">machine which is not present probably it</font>

495
00:23:55,430 --> 00:24:00,260
won't access anything<font color="#CCCCCC"> which makes</font><font color="#E5E5E5"> sense</font>

496
00:23:57,470 --> 00:24:05,240
<font color="#E5E5E5">yes then we don't have</font><font color="#CCCCCC"> to do this guest</font>

497
00:24:00,260 --> 00:24:08,629
host translation<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> and what some</font>

498
00:24:05,240 --> 00:24:11,420
processes might do is then it just<font color="#E5E5E5"> to</font>

499
00:24:08,630 --> 00:24:13,010
<font color="#E5E5E5">the cache look up which</font><font color="#CCCCCC"> it shouldn't</font><font color="#E5E5E5"> do</font>

500
00:24:11,420 --> 00:24:14,810
and it because they don't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> a</font>

501
00:24:13,010 --> 00:24:17,270
<font color="#CCCCCC">physical address</font><font color="#E5E5E5"> with the virtual</font>

502
00:24:14,810 --> 00:24:19,490
<font color="#CCCCCC">address and the virtual address</font><font color="#E5E5E5"> is</font>

503
00:24:17,270 --> 00:24:22,070
controlled by the<font color="#E5E5E5"> virtual machine</font><font color="#CCCCCC"> so by</font>

504
00:24:19,490 --> 00:24:25,100
the user<font color="#E5E5E5"> so</font><font color="#CCCCCC"> they can basically read</font>

505
00:24:22,070 --> 00:24:27,620
everything<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the level 1 cache yeah</font>

506
00:24:25,100 --> 00:24:29,840
that's also<font color="#E5E5E5"> quite bad but</font><font color="#CCCCCC"> intel</font><font color="#E5E5E5"> actually</font>

507
00:24:27,620 --> 00:24:31,280
said they fixed<font color="#CCCCCC"> that they said they fix</font>

508
00:24:29,840 --> 00:24:34,010
that so what are you still doing on

509
00:24:31,280 --> 00:24:36,410
<font color="#E5E5E5">stage here go go away so let</font><font color="#CCCCCC"> me continue</font>

510
00:24:34,010 --> 00:24:38,900
<font color="#E5E5E5">about performance this is about this</font>

511
00:24:36,410 --> 00:24:41,270
talk is<font color="#CCCCCC"> about performance and I will get</font>

512
00:24:38,900 --> 00:24:44,510
<font color="#E5E5E5">back to this slide so inter introduced</font>

513
00:24:41,270 --> 00:24:46,670
more ports more parallelism<font color="#E5E5E5"> and larger</font>

514
00:24:44,510 --> 00:24:48,560
reorder buffers<font color="#E5E5E5"> and this is all great</font>

515
00:24:46,670 --> 00:24:48,920
because it makes our computers more if

516
00:24:48,560 --> 00:24:54,010
they

517
00:24:48,920 --> 00:24:56,150
effective more efficient and<font color="#E5E5E5"> faster</font><font color="#CCCCCC"> so</font>

518
00:24:54,010 --> 00:24:59,720
let's look at other windows maybe

519
00:24:56,150 --> 00:25:02,240
AMD AMD introduced<font color="#E5E5E5"> a new perceptron</font>

520
00:24:59,720 --> 00:25:04,790
based prediction mechanism<font color="#E5E5E5"> for branches</font>

521
00:25:02,240 --> 00:25:06,410
<font color="#E5E5E5">this is also quite nice</font><font color="#CCCCCC"> and to</font>

522
00:25:04,790 --> 00:25:10,600
understand how branch prediction

523
00:25:06,410 --> 00:25:12,770
<font color="#CCCCCC">actually works</font><font color="#E5E5E5"> we again take some</font><font color="#CCCCCC"> energy</font>

524
00:25:10,600 --> 00:25:15,709
<font color="#CCCCCC">because it's Christmas of course</font><font color="#E5E5E5"> we</font>

525
00:25:12,770 --> 00:25:18,020
<font color="#E5E5E5">always thought always thought how Santa</font>

526
00:25:15,710 --> 00:25:20,180
manages to have all the Christmas

527
00:25:18,020 --> 00:25:22,730
<font color="#E5E5E5">presents ready just in time right</font>

528
00:25:20,180 --> 00:25:24,770
<font color="#E5E5E5">because Sandra doesn't know who gets the</font>

529
00:25:22,730 --> 00:25:31,100
present and who doesn't<font color="#E5E5E5"> because there is</font>

530
00:25:24,770 --> 00:25:34,070
this surah<font color="#CCCCCC"> incidents file and Santa</font>

531
00:25:31,100 --> 00:25:36,020
doesn't<font color="#E5E5E5"> know who is going to enter su-ro</font>

532
00:25:34,070 --> 00:25:39,020
although he's<font color="#E5E5E5"> not in the pseudo</font><font color="#CCCCCC"> Oz file</font>

533
00:25:36,020 --> 00:25:41,600
one day<font color="#E5E5E5"> before Christmas so what Santa</font>

534
00:25:39,020 --> 00:25:43,310
does<font color="#E5E5E5"> is</font><font color="#CCCCCC"> Center</font><font color="#E5E5E5"> of course wants to get</font>

535
00:25:41,600 --> 00:25:46,669
rid of bottlenecks<font color="#E5E5E5"> and have more</font>

536
00:25:43,310 --> 00:25:48,980
efficiency<font color="#E5E5E5"> there so Santa will use the</font>

537
00:25:46,670 --> 00:25:50,660
naughty/nice list<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the last year</font>

538
00:25:48,980 --> 00:25:52,850
<font color="#E5E5E5">because probably if you didn't enter</font>

539
00:25:50,660 --> 00:25:55,040
<font color="#CCCCCC">sudo</font><font color="#E5E5E5"> and is on a machine where</font><font color="#CCCCCC"> you don't</font>

540
00:25:52,850 --> 00:25:56,629
have sudo is right right you probably

541
00:25:55,040 --> 00:25:59,320
<font color="#CCCCCC">won't do it this year right that's</font>

542
00:25:56,630 --> 00:26:03,770
perfectly<font color="#E5E5E5"> made perfectly make sense yeah</font>

543
00:25:59,320 --> 00:26:05,929
<font color="#E5E5E5">and then the evening before Christmas</font>

544
00:26:03,770 --> 00:26:06,410
<font color="#CCCCCC">Santa checks</font><font color="#E5E5E5"> were the</font><font color="#CCCCCC"> predictions</font>

545
00:26:05,930 --> 00:26:09,140
<font color="#E5E5E5">correct</font>

546
00:26:06,410 --> 00:26:11,210
<font color="#E5E5E5">did the user behave the same</font><font color="#CCCCCC"> way as the</font>

547
00:26:09,140 --> 00:26:13,430
year before and then the user gets<font color="#E5E5E5"> the</font>

548
00:26:11,210 --> 00:26:14,720
present and if not then well then we

549
00:26:13,430 --> 00:26:17,300
have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> throw away the</font><font color="#CCCCCC"> wrongly</font>

550
00:26:14,720 --> 00:26:21,050
manufactured presence<font color="#E5E5E5"> and we can correct</font>

551
00:26:17,300 --> 00:26:22,970
<font color="#E5E5E5">the predictions</font><font color="#CCCCCC"> in and all the</font>

552
00:26:21,050 --> 00:26:28,159
<font color="#CCCCCC">predictions that</font><font color="#E5E5E5"> were correct result in</font>

553
00:26:22,970 --> 00:26:29,960
free time<font color="#E5E5E5"> that's perfectly fine</font><font color="#CCCCCC"> I don't</font>

554
00:26:28,160 --> 00:26:32,060
know so<font color="#E5E5E5"> many things that can go</font><font color="#CCCCCC"> wrong</font>

555
00:26:29,960 --> 00:26:35,300
<font color="#E5E5E5">here so many things this is without</font>

556
00:26:32,060 --> 00:26:36,919
Christmas<font color="#E5E5E5"> and presents what</font><font color="#CCCCCC"> KO wrong</font>

557
00:26:35,300 --> 00:26:40,970
what can<font color="#E5E5E5"> go wrong</font>

558
00:26:36,920 --> 00:26:43,880
have you heard about<font color="#CCCCCC"> spectre they</font>

559
00:26:40,970 --> 00:26:48,260
<font color="#E5E5E5">actually exploit this optimization you</font>

560
00:26:43,880 --> 00:26:50,660
invented for Santa<font color="#E5E5E5"> and how do you do</font>

561
00:26:48,260 --> 00:26:52,910
that so<font color="#E5E5E5"> talking about now computer</font>

562
00:26:50,660 --> 00:26:55,400
science again because<font color="#E5E5E5"> all your Christmas</font>

563
00:26:52,910 --> 00:26:57,920
performance<font color="#E5E5E5"> the thing is let's talk</font>

564
00:26:55,400 --> 00:26:59,840
<font color="#CCCCCC">about computer science</font><font color="#E5E5E5"> so we have some</font>

565
00:26:57,920 --> 00:27:01,200
code here<font color="#CCCCCC"> we have some data in memory</font>

566
00:26:59,840 --> 00:27:03,600
<font color="#E5E5E5">and</font>

567
00:27:01,200 --> 00:27:06,059
kind of<font color="#E5E5E5"> an array and we can</font><font color="#CCCCCC"> access some</font>

568
00:27:03,600 --> 00:27:07,649
data there which we<font color="#E5E5E5"> can access which</font>

569
00:27:06,059 --> 00:27:09,178
<font color="#CCCCCC">will be allowed to exit like the text</font>

570
00:27:07,649 --> 00:27:10,979
before<font color="#E5E5E5"> and then in memory we have</font>

571
00:27:09,179 --> 00:27:13,080
something<font color="#E5E5E5"> else like a secret crypto key</font>

572
00:27:10,980 --> 00:27:16,080
which we are not allowed to access for

573
00:27:13,080 --> 00:27:18,059
obvious reasons<font color="#E5E5E5"> and the user can now</font>

574
00:27:16,080 --> 00:27:19,769
provide us some index of this<font color="#E5E5E5"> memory</font>

575
00:27:18,059 --> 00:27:23,428
<font color="#E5E5E5">which he wants to</font><font color="#CCCCCC"> access to</font><font color="#E5E5E5"> bring some</font>

576
00:27:19,769 --> 00:27:25,889
string for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> and then because we</font>

577
00:27:23,429 --> 00:27:27,929
write good code<font color="#E5E5E5"> we check whether this</font>

578
00:27:25,889 --> 00:27:30,269
index<font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually in the range of</font><font color="#E5E5E5"> this</font>

579
00:27:27,929 --> 00:27:32,580
array and if it's fine if we<font color="#CCCCCC"> can only</font>

580
00:27:30,269 --> 00:27:35,639
access the<font color="#E5E5E5"> first four characters</font><font color="#CCCCCC"> of this</font>

581
00:27:32,580 --> 00:27:37,590
data<font color="#E5E5E5"> then we do some look up in a lookup</font>

582
00:27:35,639 --> 00:27:41,820
table because for example<font color="#CCCCCC"> if you want</font><font color="#E5E5E5"> to</font>

583
00:27:37,590 --> 00:27:44,459
convert<font color="#CCCCCC"> it to uppercase so if the user</font>

584
00:27:41,820 --> 00:27:47,189
access<font color="#CCCCCC"> somebody's characters</font><font color="#E5E5E5"> it's fine</font>

585
00:27:44,460 --> 00:27:50,220
it will<font color="#E5E5E5"> be in this index but you already</font>

586
00:27:47,190 --> 00:27:52,950
speculate whether this<font color="#E5E5E5"> condition will be</font>

587
00:27:50,220 --> 00:27:54,840
true<font color="#E5E5E5"> or not so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have no idea where</font>

588
00:27:52,950 --> 00:27:57,419
this<font color="#CCCCCC"> condition will be true</font><font color="#E5E5E5"> but you just</font>

589
00:27:54,840 --> 00:28:00,629
<font color="#CCCCCC">speculatin</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> i have no idea but i</font>

590
00:27:57,419 --> 00:28:03,389
guess it will be<font color="#E5E5E5"> wrong and</font><font color="#CCCCCC"> I mean</font>

591
00:28:00,630 --> 00:28:05,039
<font color="#E5E5E5">reality it's correct so after you</font>

592
00:28:03,389 --> 00:28:05,850
<font color="#E5E5E5">actually execute</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> whether it</font>

593
00:28:05,039 --> 00:28:08,010
was<font color="#E5E5E5"> correct or not</font>

594
00:28:05,850 --> 00:28:11,070
and you remember that<font color="#E5E5E5"> like the list from</font>

595
00:28:08,010 --> 00:28:13,408
Santa Santa you remember the outcome of

596
00:28:11,070 --> 00:28:15,059
<font color="#E5E5E5">this condition the last time one next</font>

597
00:28:13,409 --> 00:28:17,610
<font color="#E5E5E5">time the</font><font color="#CCCCCC"> user asked for some character</font>

598
00:28:15,059 --> 00:28:20,279
next one is also<font color="#E5E5E5"> valid one</font><font color="#CCCCCC"> you said it</font>

599
00:28:17,610 --> 00:28:21,870
was<font color="#E5E5E5"> okay in the past this if was true in</font>

600
00:28:20,279 --> 00:28:25,380
the<font color="#CCCCCC"> past</font><font color="#E5E5E5"> so it will be true again</font>

601
00:28:21,870 --> 00:28:27,418
<font color="#E5E5E5">because why would anything change in</font>

602
00:28:25,380 --> 00:28:29,659
<font color="#CCCCCC">span you</font><font color="#E5E5E5"> speculate that you already do</font>

603
00:28:27,419 --> 00:28:32,250
this memory accesses speculatively<font color="#CCCCCC"> and</font>

604
00:28:29,659 --> 00:28:34,409
then you see it was correct<font color="#E5E5E5"> we already</font>

605
00:28:32,250 --> 00:28:37,409
done and all<font color="#CCCCCC"> the same time that's great</font>

606
00:28:34,409 --> 00:28:40,200
<font color="#CCCCCC">and you saved a lot of time so it's fine</font>

607
00:28:37,409 --> 00:28:43,500
as<font color="#E5E5E5"> long as the user</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a good user and</font>

608
00:28:40,200 --> 00:28:45,570
doesn't try to do anything illegal<font color="#CCCCCC"> then</font>

609
00:28:43,500 --> 00:28:48,480
<font color="#E5E5E5">he uses us let's try to read something</font>

610
00:28:45,570 --> 00:28:52,019
<font color="#E5E5E5">I'm not supposed to read like this key</font>

611
00:28:48,480 --> 00:28:55,049
here and the user<font color="#E5E5E5"> provides net and index</font>

612
00:28:52,019 --> 00:28:59,159
<font color="#E5E5E5">as out</font><font color="#CCCCCC"> of bounds and would</font><font color="#E5E5E5"> reference</font>

613
00:28:55,049 --> 00:29:02,668
some of<font color="#E5E5E5"> this secret values there use</font>

614
00:28:59,159 --> 00:29:04,370
<font color="#CCCCCC">that</font><font color="#E5E5E5"> in the past or if condition was</font>

615
00:29:02,669 --> 00:29:08,370
always true so<font color="#CCCCCC"> it will be true again</font>

616
00:29:04,370 --> 00:29:10,529
<font color="#E5E5E5">speculate to a memory access again but</font>

617
00:29:08,370 --> 00:29:12,750
now with this data which the users not

618
00:29:10,529 --> 00:29:14,549
allowed to<font color="#CCCCCC"> access or I</font><font color="#E5E5E5"> do the memory</font>

619
00:29:12,750 --> 00:29:14,909
<font color="#E5E5E5">access we can do the flash and reload</font>

620
00:29:14,549 --> 00:29:17,460
again

621
00:29:14,909 --> 00:29:20,340
and learn a secret value<font color="#E5E5E5"> and</font><font color="#CCCCCC"> a zero</font>

622
00:29:17,460 --> 00:29:23,309
<font color="#CCCCCC">what's wrong whatever</font><font color="#E5E5E5"> execute else</font>

623
00:29:20,340 --> 00:29:25,199
branch discard everything<font color="#E5E5E5"> else but the</font>

624
00:29:23,309 --> 00:29:27,989
<font color="#E5E5E5">microarchitecture</font><font color="#CCCCCC"> state already</font><font color="#E5E5E5"> changed</font>

625
00:29:25,200 --> 00:29:31,940
<font color="#CCCCCC">so you</font><font color="#E5E5E5"> leak the values from it</font><font color="#CCCCCC"> just by</font>

626
00:29:27,989 --> 00:29:34,619
predicting and simple<font color="#CCCCCC"> if condition and</font>

627
00:29:31,940 --> 00:29:36,720
then<font color="#E5E5E5"> continuous</font><font color="#CCCCCC"> and user can read</font>

628
00:29:34,619 --> 00:29:38,549
basically<font color="#E5E5E5"> arbitrary</font><font color="#CCCCCC"> memory you update</font>

629
00:29:36,720 --> 00:29:40,139
the prediction a bit but<font color="#CCCCCC"> say in most</font>

630
00:29:38,549 --> 00:29:42,450
case it was true so it will always<font color="#CCCCCC"> be</font>

631
00:29:40,139 --> 00:29:45,359
<font color="#E5E5E5">true it's for sure</font><font color="#CCCCCC"> but who would write</font>

632
00:29:42,450 --> 00:29:48,690
code<font color="#CCCCCC"> like that</font><font color="#E5E5E5"> yeah no one does bounds</font>

633
00:29:45,359 --> 00:29:52,109
checking for array<font color="#E5E5E5"> accesses who does</font>

634
00:29:48,690 --> 00:29:53,309
<font color="#E5E5E5">that right and that's not the only thing</font>

635
00:29:52,109 --> 00:29:56,699
<font color="#CCCCCC">you try to predict</font>

636
00:29:53,309 --> 00:29:59,940
so if our CPU<font color="#E5E5E5"> is trying not to only</font>

637
00:29:56,700 --> 00:30:02,429
predict if conditions but also calls for

638
00:29:59,940 --> 00:30:05,700
example if you write C++ you have some

639
00:30:02,429 --> 00:30:07,799
classes<font color="#CCCCCC"> some of our</font><font color="#E5E5E5"> shield functions and</font>

640
00:30:05,700 --> 00:30:09,499
then you have some object<font color="#E5E5E5"> with function</font>

641
00:30:07,799 --> 00:30:14,369
and you<font color="#CCCCCC"> have an</font><font color="#E5E5E5"> animal and it's a bird</font>

642
00:30:09,499 --> 00:30:18,299
<font color="#E5E5E5">and it</font><font color="#CCCCCC"> has a move function and it could</font>

643
00:30:14,369 --> 00:30:20,178
fly or swim but usually a bird flies<font color="#E5E5E5"> so</font>

644
00:30:18,299 --> 00:30:23,759
you predict something<font color="#E5E5E5"> think of a duck</font>

645
00:30:20,179 --> 00:30:26,869
yeah but usually not all the time and

646
00:30:23,759 --> 00:30:30,119
then you execute the fly function and

647
00:30:26,869 --> 00:30:32,459
you the CPU remembers that<font color="#CCCCCC"> and next time</font>

648
00:30:30,119 --> 00:30:35,249
you call the move functionality<font color="#E5E5E5"> it cost</font>

649
00:30:32,460 --> 00:30:37,379
<font color="#E5E5E5">it speculates on the fly but if we</font><font color="#CCCCCC"> then</font>

650
00:30:35,249 --> 00:30:39,570
change the<font color="#E5E5E5"> instance of the</font><font color="#CCCCCC"> object</font><font color="#E5E5E5"> to</font>

651
00:30:37,379 --> 00:30:43,649
<font color="#E5E5E5">something else like</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> fish and a fish</font>

652
00:30:39,570 --> 00:30:46,019
usually<font color="#E5E5E5"> doesn't fly then you still</font>

653
00:30:43,649 --> 00:30:47,609
speculate on<font color="#E5E5E5"> the fly because it was the</font>

654
00:30:46,019 --> 00:30:51,229
same in the<font color="#CCCCCC"> past and you have basically</font>

655
00:30:47,609 --> 00:30:54,090
<font color="#E5E5E5">a speculative type confusion here and</font>

656
00:30:51,229 --> 00:30:57,379
something was executed with<font color="#E5E5E5"> the wrong</font>

657
00:30:54,090 --> 00:30:59,849
data<font color="#E5E5E5"> of some instance of an object</font><font color="#CCCCCC"> and</font>

658
00:30:57,379 --> 00:31:02,279
because<font color="#E5E5E5"> this is still not enough we have</font>

659
00:30:59,849 --> 00:31:05,700
more predictions in our<font color="#CCCCCC"> cpu to break</font>

660
00:31:02,279 --> 00:31:09,359
more<font color="#CCCCCC"> things like returns give some</font>

661
00:31:05,700 --> 00:31:11,759
victim some attacker<font color="#E5E5E5"> and the victim has</font>

662
00:31:09,359 --> 00:31:15,059
some secret<font color="#E5E5E5"> value like a secret</font><font color="#CCCCCC"> crypto</font>

663
00:31:11,759 --> 00:31:17,159
key and attack us nothing and if the

664
00:31:15,059 --> 00:31:18,779
<font color="#E5E5E5">victim calls some function with some</font>

665
00:31:17,159 --> 00:31:20,669
short running code and the attacker

666
00:31:18,779 --> 00:31:23,580
calls the same function with<font color="#E5E5E5"> some long</font>

667
00:31:20,669 --> 00:31:26,309
<font color="#E5E5E5">running code then we have this return</font>

668
00:31:23,580 --> 00:31:28,710
stack buffer where the<font color="#E5E5E5"> CPU remembers</font>

669
00:31:26,309 --> 00:31:31,470
where the last call came<font color="#CCCCCC"> from</font>

670
00:31:28,710 --> 00:31:34,350
and now the first<font color="#E5E5E5"> a code that will</font>

671
00:31:31,470 --> 00:31:36,419
<font color="#E5E5E5">return is the victim because that's the</font>

672
00:31:34,350 --> 00:31:38,399
short running function<font color="#E5E5E5"> but it will take</font>

673
00:31:36,419 --> 00:31:40,769
the address<font color="#E5E5E5"> speculatively from the</font>

674
00:31:38,399 --> 00:31:43,350
returns<font color="#E5E5E5"> tech buffer and return in today</font>

675
00:31:40,769 --> 00:31:45,600
attackers code and then<font color="#E5E5E5"> attacker can</font>

676
00:31:43,350 --> 00:31:47,189
again use speculatively<font color="#E5E5E5"> the secrets from</font>

677
00:31:45,600 --> 00:31:50,279
<font color="#E5E5E5">the victim because we're in the wrong</font>

678
00:31:47,190 --> 00:31:52,919
control flow here until it sees<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> no</font>

679
00:31:50,279 --> 00:31:54,690
what's wrong<font color="#E5E5E5"> just discard everything but</font>

680
00:31:52,919 --> 00:31:56,460
we leaked all the values<font color="#E5E5E5"> through the</font>

681
00:31:54,690 --> 00:31:57,960
<font color="#E5E5E5">Mike for architectural elements yes and</font>

682
00:31:56,460 --> 00:31:59,879
all<font color="#E5E5E5"> the time you're explaining this with</font>

683
00:31:57,960 --> 00:32:01,740
data<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> memory</font><font color="#E5E5E5"> exists this is all</font>

684
00:31:59,879 --> 00:32:03,299
just<font color="#E5E5E5"> the same like</font><font color="#CCCCCC"> melt</font><font color="#E5E5E5"> inspector this</font>

685
00:32:01,740 --> 00:32:06,929
is all the same<font color="#E5E5E5"> oh no that's not the</font>

686
00:32:03,299 --> 00:32:10,980
<font color="#CCCCCC">same</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> are different texts and</font>

687
00:32:06,929 --> 00:32:12,840
different problems in our CPUs<font color="#E5E5E5"> so if</font>

688
00:32:10,980 --> 00:32:15,330
you're talking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> Specter text with</font>

689
00:32:12,840 --> 00:32:17,509
some<font color="#E5E5E5"> operation here and at some point we</font>

690
00:32:15,330 --> 00:32:21,689
predict something<font color="#E5E5E5"> CPU predict something</font>

691
00:32:17,509 --> 00:32:24,179
and it predicts the<font color="#E5E5E5"> control flow or some</font>

692
00:32:21,690 --> 00:32:26,639
data flow<font color="#E5E5E5"> depending on what</font><font color="#CCCCCC"> kind of spec</font>

693
00:32:24,179 --> 00:32:29,100
<font color="#E5E5E5">detect</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> are talking about and this all</font>

694
00:32:26,639 --> 00:32:30,600
happens then transiently<font color="#E5E5E5"> so doesn't know</font>

695
00:32:29,100 --> 00:32:34,498
<font color="#E5E5E5">whether it's correct or not it might</font>

696
00:32:30,600 --> 00:32:36,559
<font color="#E5E5E5">discard it and at some point the</font>

697
00:32:34,499 --> 00:32:40,470
<font color="#E5E5E5">operations retire so they are actually</font>

698
00:32:36,559 --> 00:32:42,330
<font color="#E5E5E5">executed and done</font><font color="#CCCCCC"> and at this point</font><font color="#E5E5E5"> the</font>

699
00:32:40,470 --> 00:32:44,669
CPU knows where the prediction<font color="#E5E5E5"> was</font>

700
00:32:42,330 --> 00:32:47,658
correct or not<font color="#E5E5E5"> and</font><font color="#CCCCCC"> can discard it</font><font color="#E5E5E5"> or</font>

701
00:32:44,669 --> 00:32:51,749
keep<font color="#E5E5E5"> it so it saved a lot of time</font>

702
00:32:47,659 --> 00:32:54,299
this is<font color="#E5E5E5"> Specter but for meltdown with</font>

703
00:32:51,749 --> 00:32:57,480
awesome operation and another operation

704
00:32:54,299 --> 00:32:59,970
that accesses<font color="#E5E5E5"> data and another operation</font>

705
00:32:57,480 --> 00:33:02,970
with a data dependency<font color="#CCCCCC"> so it needs the</font>

706
00:32:59,970 --> 00:33:06,679
data<font color="#E5E5E5"> from the previous instruction and</font>

707
00:33:02,970 --> 00:33:09,210
this is fine but if this second

708
00:33:06,679 --> 00:33:12,960
<font color="#E5E5E5">instruction has some exception because</font>

709
00:33:09,210 --> 00:33:15,299
<font color="#CCCCCC">it was not</font><font color="#E5E5E5"> allowed to use this data then</font>

710
00:33:12,960 --> 00:33:16,889
everything that<font color="#E5E5E5"> happens</font><font color="#CCCCCC"> afterward is a</font>

711
00:33:15,299 --> 00:33:19,950
transient execution it should<font color="#E5E5E5"> never</font>

712
00:33:16,889 --> 00:33:21,689
happen because that's not supposed to

713
00:33:19,950 --> 00:33:24,059
happen<font color="#CCCCCC"> nothing is supposed</font><font color="#E5E5E5"> to happen</font>

714
00:33:21,690 --> 00:33:26,190
after<font color="#E5E5E5"> an exception but exception cannot</font>

715
00:33:24,059 --> 00:33:30,059
be raised<font color="#E5E5E5"> immediately but only at</font>

716
00:33:26,190 --> 00:33:32,190
<font color="#CCCCCC">retirement</font><font color="#E5E5E5"> so the correct thing would be</font>

717
00:33:30,059 --> 00:33:34,860
to discard the data of the instruction

718
00:33:32,190 --> 00:33:39,080
<font color="#CCCCCC">and give the</font><font color="#E5E5E5"> data dependent in operation</font>

719
00:33:34,860 --> 00:33:43,689
<font color="#E5E5E5">just some dummy data like null or random</font>

720
00:33:39,080 --> 00:33:45,980
but if you optimize<font color="#E5E5E5"> this step out of</font>

721
00:33:43,690 --> 00:33:49,249
discarding the value you get<font color="#E5E5E5"> the</font>

722
00:33:45,980 --> 00:33:51,860
meltdown<font color="#CCCCCC"> and then you can leak the</font>

723
00:33:49,249 --> 00:33:54,259
<font color="#CCCCCC">privilege data</font><font color="#E5E5E5"> so there are there are</font>

724
00:33:51,860 --> 00:33:56,479
quite a few differences<font color="#E5E5E5"> okay okay so so</font>

725
00:33:54,259 --> 00:33:59,600
<font color="#E5E5E5">there are two vulnerabilities</font><font color="#CCCCCC"> Spectre</font>

726
00:33:56,480 --> 00:34:01,279
<font color="#E5E5E5">and Mary down and</font><font color="#CCCCCC"> Inter already fixed</font>

727
00:33:59,600 --> 00:34:03,439
them we know and the<font color="#CCCCCC"> other is fixed with</font>

728
00:34:01,279 --> 00:34:06,730
the<font color="#E5E5E5"> software patch</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> I can now continue</font>

729
00:34:03,440 --> 00:34:14,210
<font color="#CCCCCC">with my talk on performance right can I</font>

730
00:34:06,730 --> 00:34:17,869
you can try yep okay let's continue with

731
00:34:14,210 --> 00:34:22,000
performance so<font color="#E5E5E5"> AMD this prediction based</font>

732
00:34:17,869 --> 00:34:24,290
mechanisms they are really quite nice

733
00:34:22,000 --> 00:34:26,149
<font color="#E5E5E5">you still haven't learned anything from</font>

734
00:34:24,290 --> 00:34:27,440
the<font color="#CCCCCC"> spectres</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> policy</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> another</font>

735
00:34:26,149 --> 00:34:29,230
ghost<font color="#CCCCCC"> yes</font>

736
00:34:27,440 --> 00:34:31,940
so let me<font color="#E5E5E5"> because you haven't learned</font>

737
00:34:29,230 --> 00:34:34,099
anything now<font color="#E5E5E5"> that need aspect of the</font>

738
00:34:31,940 --> 00:34:36,889
future<font color="#CCCCCC"> tell you what will happen</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> you</font>

739
00:34:34,099 --> 00:34:40,069
don't stray from your<font color="#CCCCCC"> path so you say</font>

740
00:34:36,889 --> 00:34:43,730
you like optimization what will normally

741
00:34:40,069 --> 00:34:47,750
<font color="#CCCCCC">have on you need normally do to update</font>

742
00:34:43,730 --> 00:34:56,349
<font color="#E5E5E5">the access rights of a page you would</font>

743
00:34:47,750 --> 00:34:59,089
have to normally you would have<font color="#CCCCCC"> to to</font>

744
00:34:56,349 --> 00:35:00,680
<font color="#CCCCCC">context switch but that's fine yeah you</font>

745
00:34:59,089 --> 00:35:03,650
need to<font color="#CCCCCC"> into a context switch but you</font>

746
00:35:00,680 --> 00:35:05,750
also have<font color="#E5E5E5"> to modify the page table entry</font>

747
00:35:03,650 --> 00:35:08,839
<font color="#CCCCCC">flash the TLB and that is slow</font>

748
00:35:05,750 --> 00:35:11,089
you hate slow right so yeah we have a

749
00:35:08,839 --> 00:35:12,890
new technology<font color="#CCCCCC"> called</font><font color="#E5E5E5"> Intel</font><font color="#CCCCCC"> and PK</font>

750
00:35:11,089 --> 00:35:14,359
memory protection<font color="#E5E5E5"> keys I mean the</font>

751
00:35:12,890 --> 00:35:16,970
<font color="#CCCCCC">protection key you can</font><font color="#E5E5E5"> assign a</font>

752
00:35:14,359 --> 00:35:19,130
protection key to a group of pages<font color="#CCCCCC"> you</font>

753
00:35:16,970 --> 00:35:21,709
can<font color="#E5E5E5"> use the four bits in the PT that</font>

754
00:35:19,130 --> 00:35:23,210
were not used<font color="#E5E5E5"> so far</font><font color="#CCCCCC"> and that allows you</font>

755
00:35:21,710 --> 00:35:25,520
to<font color="#E5E5E5"> do a quick update</font><font color="#CCCCCC"> because you can do</font>

756
00:35:23,210 --> 00:35:28,309
it<font color="#E5E5E5"> for a whole</font><font color="#CCCCCC"> range</font><font color="#E5E5E5"> of addresses</font><font color="#CCCCCC"> okay</font>

757
00:35:25,520 --> 00:35:30,230
that's nice<font color="#E5E5E5"> sounds nice right</font><font color="#CCCCCC"> it's one</font>

758
00:35:28,309 --> 00:35:32,420
yeah<font color="#CCCCCC"> I like the performance but</font><font color="#E5E5E5"> what</font>

759
00:35:30,230 --> 00:35:36,799
happens if we see the same problem that

760
00:35:32,420 --> 00:35:41,000
<font color="#CCCCCC">we see before we've because we can also</font>

761
00:35:36,799 --> 00:35:43,910
see meltdown even with<font color="#CCCCCC"> mpk because the</font>

762
00:35:41,000 --> 00:35:46,040
protection keys are lazily enforced so

763
00:35:43,910 --> 00:35:50,480
the data that<font color="#E5E5E5"> we protect with it is</font>

764
00:35:46,040 --> 00:35:52,200
<font color="#E5E5E5">actually forwarded to the to the</font>

765
00:35:50,480 --> 00:35:54,000
transitive instructions

766
00:35:52,200 --> 00:35:56,990
as the specter of the<font color="#E5E5E5"> past has told you</font>

767
00:35:54,000 --> 00:36:00,680
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can observe the value in the cash</font>

768
00:35:56,990 --> 00:36:04,529
that's<font color="#E5E5E5"> bad it's bad right you know so</font>

769
00:36:00,680 --> 00:36:09,118
what if a different<font color="#CCCCCC"> thing is</font><font color="#E5E5E5"> we have we</font>

770
00:36:04,530 --> 00:36:10,890
all perform bound control we have but it

771
00:36:09,119 --> 00:36:13,050
would be nice to<font color="#E5E5E5"> have</font><font color="#CCCCCC"> something that</font><font color="#E5E5E5"> we</font>

772
00:36:10,890 --> 00:36:15,240
that<font color="#E5E5E5"> would do this automatically so we</font>

773
00:36:13,050 --> 00:36:18,300
have an<font color="#E5E5E5"> instruction for that</font><font color="#CCCCCC"> yeah x86</font>

774
00:36:15,240 --> 00:36:21,060
gives us an instruction<font color="#E5E5E5"> like that and if</font>

775
00:36:18,300 --> 00:36:24,180
we exceed<font color="#E5E5E5"> the accepted range we get a</font>

776
00:36:21,060 --> 00:36:26,460
bound range exceeded exception but<font color="#E5E5E5"> then</font>

777
00:36:24,180 --> 00:36:30,540
we also have here<font color="#E5E5E5"> come the data is</font><font color="#CCCCCC"> used</font>

778
00:36:26,460 --> 00:36:32,940
in the<font color="#CCCCCC"> transient execution and we can</font>

779
00:36:30,540 --> 00:36:35,130
<font color="#CCCCCC">extend use flash reload to observed</font>

780
00:36:32,940 --> 00:36:37,710
<font color="#E5E5E5">value in the cache</font><font color="#CCCCCC"> so this is too new</font>

781
00:36:35,130 --> 00:36:41,880
made on<font color="#CCCCCC"> variance</font><font color="#E5E5E5"> yes these are two new</font>

782
00:36:37,710 --> 00:36:43,440
<font color="#CCCCCC">mountain parents and if you</font><font color="#E5E5E5"> remember AMD</font>

783
00:36:41,880 --> 00:36:45,000
always<font color="#E5E5E5"> claimed that they are not</font>

784
00:36:43,440 --> 00:36:47,430
affected by<font color="#CCCCCC"> math the way they are not</font>

785
00:36:45,000 --> 00:36:50,940
affected right<font color="#E5E5E5"> well let's look at this</font>

786
00:36:47,430 --> 00:36:51,990
<font color="#E5E5E5">they said back then okay</font><font color="#CCCCCC"> we are not</font>

787
00:36:50,940 --> 00:36:54,660
affected by<font color="#E5E5E5"> meltdown</font>

788
00:36:51,990 --> 00:36:57,839
so if you're running<font color="#E5E5E5"> Linux on an AMD</font>

789
00:36:54,660 --> 00:37:01,399
<font color="#CCCCCC">processor</font><font color="#E5E5E5"> we just</font><font color="#CCCCCC"> disable</font><font color="#E5E5E5"> everything</font>

790
00:36:57,839 --> 00:37:07,319
that is related to<font color="#E5E5E5"> come to Kaiser and</font>

791
00:37:01,400 --> 00:37:09,150
they<font color="#E5E5E5"> said this back in 2017 and the</font>

792
00:37:07,319 --> 00:37:11,190
problem is here now this new<font color="#E5E5E5"> version of</font>

793
00:37:09,150 --> 00:37:13,560
meltdown<font color="#E5E5E5"> is actually first mount an</font>

794
00:37:11,190 --> 00:37:16,050
attack on AMD<font color="#E5E5E5"> so you cannot escape</font>

795
00:37:13,560 --> 00:37:21,029
<font color="#E5E5E5">meltdown</font><font color="#CCCCCC"> but just switching</font><font color="#E5E5E5"> the meander</font>

796
00:37:16,050 --> 00:37:22,980
<font color="#E5E5E5">and we can see here</font><font color="#CCCCCC"> that you cannot even</font>

797
00:37:21,030 --> 00:37:25,950
switch to arm or<font color="#CCCCCC"> something else because</font>

798
00:37:22,980 --> 00:37:28,470
we have<font color="#E5E5E5"> two new variants here with</font>

799
00:37:25,950 --> 00:37:32,098
<font color="#CCCCCC">Melton and</font><font color="#E5E5E5"> PK and PR that work on Intel</font>

800
00:37:28,470 --> 00:37:35,098
and with PR that works on<font color="#E5E5E5"> AMD and we</font>

801
00:37:32,099 --> 00:37:37,349
have also observed so many different or

802
00:37:35,099 --> 00:37:39,780
tested so<font color="#CCCCCC"> many different versions with</font>

803
00:37:37,349 --> 00:37:43,710
different<font color="#CCCCCC"> thoughts that we do not that</font>

804
00:37:39,780 --> 00:37:46,079
<font color="#E5E5E5">do not work</font><font color="#CCCCCC"> eat on</font><font color="#E5E5E5"> Intel arm or AMD but</font>

805
00:37:43,710 --> 00:37:48,690
but<font color="#CCCCCC"> are you</font><font color="#E5E5E5"> certain that</font><font color="#CCCCCC"> they don't work</font>

806
00:37:46,079 --> 00:37:51,390
<font color="#E5E5E5">or might they work in the future we</font><font color="#CCCCCC"> are</font>

807
00:37:48,690 --> 00:37:54,030
fairly soon<font color="#CCCCCC"> so we tested them</font><font color="#E5E5E5"> but who</font>

808
00:37:51,390 --> 00:37:58,578
knows maybe our experiments failed<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> we</font>

809
00:37:54,030 --> 00:37:58,579
have still human or you are still young

810
00:38:00,390 --> 00:38:06,240
but let's talk about<font color="#CCCCCC"> defenses we can</font>

811
00:38:03,599 --> 00:38:09,119
categorize<font color="#E5E5E5"> mouth on defenses in two</font>

812
00:38:06,240 --> 00:38:12,629
groups<font color="#E5E5E5"> the first one is we try to</font>

813
00:38:09,119 --> 00:38:14,670
eliminate the<font color="#CCCCCC"> T</font><font color="#E5E5E5"> in data that</font><font color="#CCCCCC"> is</font>

814
00:38:12,630 --> 00:38:17,880
architectural<font color="#CCCCCC"> access</font><font color="#E5E5E5"> inaccessible</font>

815
00:38:14,670 --> 00:38:19,980
<font color="#E5E5E5">shouldn't be acting accessible in</font><font color="#CCCCCC"> the in</font>

816
00:38:17,880 --> 00:38:23,339
the<font color="#CCCCCC"> micro architectural level</font><font color="#E5E5E5"> so if we</font>

817
00:38:19,980 --> 00:38:25,500
<font color="#E5E5E5">can't</font><font color="#CCCCCC"> cannot do</font><font color="#E5E5E5"> that we are fine the</font>

818
00:38:23,339 --> 00:38:26,820
different thing is we can simply prevent

819
00:38:25,500 --> 00:38:31,890
your<font color="#E5E5E5"> currents of false if there's no</font>

820
00:38:26,820 --> 00:38:34,380
fault we don't get meltdown and the

821
00:38:31,890 --> 00:38:36,990
<font color="#CCCCCC">spectre of the</font><font color="#E5E5E5"> of the present also told</font>

822
00:38:34,380 --> 00:38:39,780
you about<font color="#E5E5E5"> foreshadow or melt on P as we</font>

823
00:38:36,990 --> 00:38:43,890
call it<font color="#E5E5E5"> and you said that Intel claims</font>

824
00:38:39,780 --> 00:38:47,250
well that's soft<font color="#E5E5E5"> everything but let's</font>

825
00:38:43,890 --> 00:38:48,569
<font color="#E5E5E5">look at how</font><font color="#CCCCCC"> they try</font><font color="#E5E5E5"> to solve that we</font>

826
00:38:47,250 --> 00:38:50,460
can simply clear the physical address

827
00:38:48,570 --> 00:38:53,099
field because if we don't<font color="#E5E5E5"> have the</font>

828
00:38:50,460 --> 00:38:55,560
<font color="#E5E5E5">address field of the unmapped</font><font color="#CCCCCC"> Pte</font><font color="#E5E5E5"> then</font>

829
00:38:53,099 --> 00:38:57,180
we cannot read data from<font color="#E5E5E5"> the from the</font>

830
00:38:55,560 --> 00:39:00,210
cache because<font color="#E5E5E5"> it doesn't access anymore</font>

831
00:38:57,180 --> 00:39:01,950
<font color="#E5E5E5">and when we switch to protection</font><font color="#CCCCCC"> to main</font>

832
00:39:00,210 --> 00:39:04,109
we can simply flush the other one

833
00:39:01,950 --> 00:39:12,240
because if there's no data in there<font color="#E5E5E5"> what</font>

834
00:39:04,109 --> 00:39:14,490
can we leak the future apparently but we

835
00:39:12,240 --> 00:39:17,790
are still<font color="#CCCCCC"> in the past</font><font color="#E5E5E5"> yes that's right</font><font color="#CCCCCC"> I</font>

836
00:39:14,490 --> 00:39:21,689
doubt<font color="#CCCCCC"> that this actually works oh oh it</font>

837
00:39:17,790 --> 00:39:24,390
it does so what your thing<font color="#CCCCCC"> is you can so</font>

838
00:39:21,690 --> 00:39:28,380
first of all<font color="#E5E5E5"> is your system fully</font>

839
00:39:24,390 --> 00:39:31,589
updated<font color="#CCCCCC"> I</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> updated</font><font color="#CCCCCC"> Ubuntu</font><font color="#E5E5E5"> 18.4</font>

840
00:39:28,380 --> 00:39:33,900
I guess<font color="#CCCCCC"> ok and so my software</font><font color="#E5E5E5"> is</font>

841
00:39:31,589 --> 00:39:37,529
<font color="#CCCCCC">up-to-date</font><font color="#E5E5E5"> and I have this</font><font color="#CCCCCC"> VirtualBox</font>

842
00:39:33,900 --> 00:39:40,260
running and I implemented this<font color="#E5E5E5"> for</font>

843
00:39:37,530 --> 00:39:42,599
<font color="#CCCCCC">shadow exploit I really</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> that and we</font>

844
00:39:40,260 --> 00:39:44,700
were<font color="#CCCCCC"> talking about</font><font color="#E5E5E5"> Santa</font><font color="#CCCCCC"> and Santa of</font>

845
00:39:42,599 --> 00:39:46,740
<font color="#CCCCCC">course as this nice not least but it's a</font>

846
00:39:44,700 --> 00:39:49,710
huge list<font color="#E5E5E5"> everyone does</font><font color="#CCCCCC"> sudo without</font>

847
00:39:46,740 --> 00:39:54,479
being rude<font color="#CCCCCC"> right so he needs a nice</font>

848
00:39:49,710 --> 00:39:58,920
naughty list manager to<font color="#E5E5E5"> keep track of of</font>

849
00:39:54,480 --> 00:40:03,150
all<font color="#E5E5E5"> the nice and and naughty people and</font>

850
00:39:58,920 --> 00:40:04,680
and now I want<font color="#E5E5E5"> to use my washing</font><font color="#CCCCCC"> machine</font>

851
00:40:03,150 --> 00:40:06,809
it's just a washing<font color="#CCCCCC"> machine it can't</font>

852
00:40:04,680 --> 00:40:08,129
<font color="#E5E5E5">escape</font><font color="#CCCCCC"> if you have an escape from</font>

853
00:40:06,809 --> 00:40:11,279
<font color="#CCCCCC">immersion pack</font><font color="#E5E5E5"> that's really bad</font>

854
00:40:08,130 --> 00:40:14,970
we're just using this for<font color="#CCCCCC"> shadow</font><font color="#E5E5E5"> to read</font>

855
00:40:11,279 --> 00:40:17,390
the password entry from this nice

856
00:40:14,970 --> 00:40:20,220
naughty list manager in real time here

857
00:40:17,390 --> 00:40:21,598
so<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> Shadow</font><font color="#E5E5E5"> we've seen</font>

858
00:40:20,220 --> 00:40:24,919
before<font color="#E5E5E5"> we can read everything that's in</font>

859
00:40:21,599 --> 00:40:28,049
the cache<font color="#E5E5E5"> so what is currently used and</font>

860
00:40:24,920 --> 00:40:30,960
this nice naughty list<font color="#CCCCCC"> mantra has some</font>

861
00:40:28,049 --> 00:40:33,059
nice features<font color="#E5E5E5"> because it gives me some</font>

862
00:40:30,960 --> 00:40:34,859
address where I can actually read that

863
00:40:33,059 --> 00:40:36,750
so I don't<font color="#CCCCCC"> have to look through the</font>

864
00:40:34,859 --> 00:40:38,880
<font color="#E5E5E5">whole cache and then you want time for</font>

865
00:40:36,750 --> 00:40:41,549
<font color="#CCCCCC">that you want</font><font color="#E5E5E5"> to read the password</font><font color="#CCCCCC"> that</font>

866
00:40:38,880 --> 00:40:43,380
send her enters yes<font color="#E5E5E5"> but we don't know</font>

867
00:40:41,549 --> 00:40:45,569
<font color="#E5E5E5">the password</font><font color="#CCCCCC"> we don't know how to</font><font color="#E5E5E5"> pass</font>

868
00:40:43,380 --> 00:40:47,039
yeah that's a flaw<font color="#CCCCCC"> right we didn't think</font>

869
00:40:45,569 --> 00:40:50,069
that<font color="#E5E5E5"> through does anyone know the</font>

870
00:40:47,039 --> 00:40:54,420
password<font color="#CCCCCC"> of Santa</font><font color="#E5E5E5"> any ideas what</font><font color="#CCCCCC"> the</font>

871
00:40:50,069 --> 00:40:58,259
password<font color="#E5E5E5"> could be pseudo pseudo okay</font>

872
00:40:54,420 --> 00:41:00,720
<font color="#E5E5E5">okay and that's let's see oh I can in</font>

873
00:40:58,260 --> 00:41:02,960
real<font color="#E5E5E5"> time</font><font color="#CCCCCC"> leak it here</font><font color="#E5E5E5"> in my box</font>

874
00:41:00,720 --> 00:41:06,209
whatever<font color="#E5E5E5"> Santa enters</font>

875
00:41:02,960 --> 00:41:06,210
[Music]

876
00:41:10,910 --> 00:41:17,339
so I can do whatever I want can spy on

877
00:41:13,920 --> 00:41:20,130
<font color="#CCCCCC">everything so yeah future might fix that</font>

878
00:41:17,339 --> 00:41:23,400
but we<font color="#E5E5E5"> are still in the present</font><font color="#CCCCCC"> where</font>

879
00:41:20,130 --> 00:41:25,700
<font color="#E5E5E5">this is not fixed wait why is this not</font>

880
00:41:23,400 --> 00:41:29,310
fixed<font color="#E5E5E5"> it should be fixed right</font><font color="#CCCCCC"> Oh No</font>

881
00:41:25,700 --> 00:41:31,770
yeah it should be<font color="#CCCCCC"> fixed but it has so</font>

882
00:41:29,310 --> 00:41:35,339
high performance overhead<font color="#E5E5E5"> that nobody</font>

883
00:41:31,770 --> 00:41:37,079
<font color="#CCCCCC">actually tested now I lost you lost</font><font color="#E5E5E5"> the</font>

884
00:41:35,339 --> 00:41:40,410
presentation I<font color="#E5E5E5"> lost the presentation</font>

885
00:41:37,079 --> 00:41:42,300
<font color="#E5E5E5">yeah that's not but we can look a</font><font color="#CCCCCC"> bit</font>

886
00:41:40,410 --> 00:41:47,339
more<font color="#E5E5E5"> at</font><font color="#CCCCCC"> the demo it is also</font><font color="#E5E5E5"> very nice</font>

887
00:41:42,300 --> 00:41:54,720
it's a nice<font color="#CCCCCC"> centre it we need some</font>

888
00:41:47,339 --> 00:42:00,980
<font color="#CCCCCC">jeopardy</font><font color="#E5E5E5"> sounds here yes that's good</font>

889
00:41:54,720 --> 00:42:00,980
louder<font color="#E5E5E5"> oh no</font><font color="#CCCCCC"> candy</font><font color="#E5E5E5"> wrong</font>

890
00:42:02,550 --> 00:42:11,340
yes yeah<font color="#E5E5E5"> now we're at the beginning</font>

891
00:42:06,390 --> 00:42:14,779
<font color="#CCCCCC">again</font><font color="#E5E5E5"> in case</font><font color="#CCCCCC"> you missed something</font><font color="#E5E5E5"> yeah</font>

892
00:42:11,340 --> 00:42:14,780
we<font color="#CCCCCC"> will start from from the beginning</font>

893
00:42:15,590 --> 00:42:21,680
<font color="#CCCCCC">yeah click somewhere</font><font color="#E5E5E5"> there that will be</font>

894
00:42:17,850 --> 00:42:29,490
fine I think<font color="#E5E5E5"> it's just no come on</font>

895
00:42:21,680 --> 00:42:31,020
yeah nearly so a short recap<font color="#E5E5E5"> can't do it</font>

896
00:42:29,490 --> 00:42:33,419
no fast<font color="#E5E5E5"> forward we need more performance</font>

897
00:42:31,020 --> 00:42:38,730
<font color="#E5E5E5">optimizations if it's slow here</font><font color="#CCCCCC"> it's</font>

898
00:42:33,420 --> 00:42:41,820
still if you're<font color="#E5E5E5"> already too</font><font color="#CCCCCC"> far oh ok</font>

899
00:42:38,730 --> 00:42:49,440
there we<font color="#E5E5E5"> need more performances ok but</font>

900
00:42:41,820 --> 00:42:52,680
now you can leave<font color="#E5E5E5"> this</font><font color="#CCCCCC"> day so let's</font>

901
00:42:49,440 --> 00:42:55,560
continue<font color="#CCCCCC"> so we have we have this</font>

902
00:42:52,680 --> 00:42:57,180
transient<font color="#E5E5E5"> cause we can classify all</font>

903
00:42:55,560 --> 00:42:59,790
these attacks that<font color="#CCCCCC"> we call trance and</font>

904
00:42:57,180 --> 00:43:02,069
execution attacks some with some some

905
00:42:59,790 --> 00:43:02,759
simple<font color="#CCCCCC"> questions</font><font color="#E5E5E5"> if we</font><font color="#CCCCCC"> have a</font><font color="#E5E5E5"> picture we</font>

906
00:43:02,070 --> 00:43:04,760
<font color="#E5E5E5">are Spector</font>

907
00:43:02,760 --> 00:43:12,750
if we have a fault<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> Melton and</font>

908
00:43:04,760 --> 00:43:14,940
then we<font color="#CCCCCC"> already saw these versions but</font>

909
00:43:12,750 --> 00:43:17,220
what if<font color="#CCCCCC"> if we what is if we can miss</font>

910
00:43:14,940 --> 00:43:20,700
train<font color="#E5E5E5"> the prediction in a different</font>

911
00:43:17,220 --> 00:43:22,259
place<font color="#CCCCCC"> so far we've seen</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> we do that</font>

912
00:43:20,700 --> 00:43:25,049
we'll miss trains in<font color="#CCCCCC"> the same place</font>

913
00:43:22,260 --> 00:43:27,120
respect the v1 yeah<font color="#CCCCCC"> yes but what is if</font>

914
00:43:25,050 --> 00:43:28,890
we can miss<font color="#CCCCCC"> Janet</font><font color="#E5E5E5"> and a different</font>

915
00:43:27,120 --> 00:43:31,589
address<font color="#E5E5E5"> but but why would I do that</font>

916
00:43:28,890 --> 00:43:33,270
<font color="#E5E5E5">because it allows</font><font color="#CCCCCC"> an attack to do to</font>

917
00:43:31,590 --> 00:43:37,020
<font color="#CCCCCC">your target</font><font color="#E5E5E5"> to something else it's bad</font>

918
00:43:33,270 --> 00:43:39,180
<font color="#E5E5E5">or even worse what</font><font color="#CCCCCC"> is if we because the</font>

919
00:43:37,020 --> 00:43:41,340
flash<font color="#E5E5E5"> protection state is shared what is</font>

920
00:43:39,180 --> 00:43:44,009
if we can do<font color="#E5E5E5"> it from a different place</font>

921
00:43:41,340 --> 00:43:46,970
<font color="#E5E5E5">or externally that's</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> not a</font>

922
00:43:44,010 --> 00:43:50,160
<font color="#E5E5E5">process for instance or on the operating</font>

923
00:43:46,970 --> 00:43:54,109
so we have these new<font color="#CCCCCC"> Miss training</font>

924
00:43:50,160 --> 00:43:56,940
strategies and we can<font color="#E5E5E5"> we analyze</font><font color="#CCCCCC"> them so</font>

925
00:43:54,110 --> 00:43:58,620
we have<font color="#E5E5E5"> for Intel we were able to show</font>

926
00:43:56,940 --> 00:44:02,460
<font color="#E5E5E5">that our new</font><font color="#CCCCCC"> Miss</font><font color="#E5E5E5"> training strategies</font>

927
00:43:58,620 --> 00:44:06,420
worked very well for<font color="#E5E5E5"> armed some worked</font>

928
00:44:02,460 --> 00:44:07,760
<font color="#E5E5E5">some did</font><font color="#CCCCCC"> not yet work and for AMD the</font>

929
00:44:06,420 --> 00:44:10,650
same as for<font color="#E5E5E5"> armed</font>

930
00:44:07,760 --> 00:44:11,700
<font color="#E5E5E5">ok but with all these variants isn't</font>

931
00:44:10,650 --> 00:44:13,710
there anything where we<font color="#E5E5E5"> can say</font>

932
00:44:11,700 --> 00:44:15,750
<font color="#E5E5E5">something</font><font color="#CCCCCC"> like we can eliminate all the</font>

933
00:44:13,710 --> 00:44:18,210
out of<font color="#E5E5E5"> place attacks or some</font>

934
00:44:15,750 --> 00:44:20,870
thing<font color="#E5E5E5"> where all the attacks in general</font>

935
00:44:18,210 --> 00:44:24,300
<font color="#E5E5E5">well we have an optimal solution</font>

936
00:44:20,870 --> 00:44:26,910
we call it the<font color="#E5E5E5"> trilling template</font><font color="#CCCCCC"> if you</font>

937
00:44:24,300 --> 00:44:28,890
drill at exactly<font color="#CCCCCC"> don't know indicate if</font>

938
00:44:26,910 --> 00:44:31,830
<font color="#E5E5E5">you have any great do you have any</font>

939
00:44:28,890 --> 00:44:33,540
<font color="#E5E5E5">serious countermeasures</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> if you want</font>

940
00:44:31,830 --> 00:44:37,259
serious countermeasures<font color="#E5E5E5"> let's talk about</font>

941
00:44:33,540 --> 00:44:39,870
serious confirmations just well as with

942
00:44:37,260 --> 00:44:42,600
meltdown<font color="#E5E5E5"> we can categorize it into three</font>

943
00:44:39,870 --> 00:44:44,040
<font color="#CCCCCC">different categories</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can mitigate or</font>

944
00:44:42,600 --> 00:44:46,290
reduce the accuracy of our cover

945
00:44:44,040 --> 00:44:49,520
<font color="#E5E5E5">channels so we can observe the data we</font>

946
00:44:46,290 --> 00:44:51,900
can mitigate the<font color="#CCCCCC"> or abort speculation or</font>

947
00:44:49,520 --> 00:44:53,730
we can ensure that<font color="#E5E5E5"> there are secret data</font>

948
00:44:51,900 --> 00:44:54,690
cannot be<font color="#E5E5E5"> reached at all because it</font>

949
00:44:53,730 --> 00:44:58,530
cannot<font color="#E5E5E5"> be reached</font>

950
00:44:54,690 --> 00:45:02,250
<font color="#CCCCCC">it cannot be leaked and we can see here</font>

951
00:44:58,530 --> 00:45:04,770
we<font color="#E5E5E5"> have so many different defenses</font><font color="#CCCCCC"> why</font>

952
00:45:02,250 --> 00:45:08,190
<font color="#CCCCCC">is this so empty I mean are we</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> this</font>

953
00:45:04,770 --> 00:45:10,410
completely lost<font color="#E5E5E5"> or no because so most of</font>

954
00:45:08,190 --> 00:45:12,830
the<font color="#E5E5E5"> defenses don't consider all Mike</font>

955
00:45:10,410 --> 00:45:15,779
architectural elements<font color="#E5E5E5"> and if you don't</font>

956
00:45:12,830 --> 00:45:19,259
if it<font color="#E5E5E5"> don't consider it then it might</font>

957
00:45:15,780 --> 00:45:22,320
still<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to it be exploited just by</font>

958
00:45:19,260 --> 00:45:25,320
using a different um just be<font color="#E5E5E5"> using a</font>

959
00:45:22,320 --> 00:45:27,270
different<font color="#CCCCCC"> microbial element so foresight</font>

960
00:45:25,320 --> 00:45:30,110
isolation we saw a lot<font color="#E5E5E5"> of boxes color</font>

961
00:45:27,270 --> 00:45:33,090
yes we saw a lot of<font color="#E5E5E5"> box of colored and</font>

962
00:45:30,110 --> 00:45:36,180
what is scientist<font color="#CCCCCC"> Latian</font><font color="#E5E5E5"> well we execute</font>

963
00:45:33,090 --> 00:45:38,640
<font color="#E5E5E5">each side in its own process this limits</font>

964
00:45:36,180 --> 00:45:42,480
the amount of<font color="#E5E5E5"> data that we can that is</font>

965
00:45:38,640 --> 00:45:45,629
exposed<font color="#E5E5E5"> and so far it is</font><font color="#CCCCCC"> the default in</font>

966
00:45:42,480 --> 00:45:48,360
<font color="#E5E5E5">chrome 67 and Firefox is working on it</font>

967
00:45:45,630 --> 00:45:49,770
so you're basically reducing<font color="#CCCCCC"> specter</font><font color="#E5E5E5"> to</font>

968
00:45:48,360 --> 00:45:52,650
make it on and if I have a<font color="#CCCCCC"> mate</font><font color="#E5E5E5"> on</font>

969
00:45:49,770 --> 00:45:56,280
<font color="#E5E5E5">defense then it's secure</font><font color="#CCCCCC"> okay yes</font><font color="#E5E5E5"> it</font>

970
00:45:52,650 --> 00:45:58,260
<font color="#E5E5E5">sounds reasonably and then we can look</font>

971
00:45:56,280 --> 00:46:00,660
at a different medication<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> look at</font>

972
00:45:58,260 --> 00:46:04,080
serialization if we insert instructions

973
00:46:00,660 --> 00:46:06,660
<font color="#E5E5E5">that simply stop</font><font color="#CCCCCC"> the speculation then we</font>

974
00:46:04,080 --> 00:46:08,670
should be fine<font color="#CCCCCC"> and we insert it off</font>

975
00:46:06,660 --> 00:46:11,850
every<font color="#E5E5E5"> bounds check but this disables</font>

976
00:46:08,670 --> 00:46:15,690
speculative execution<font color="#CCCCCC"> and we have this</font>

977
00:46:11,850 --> 00:46:19,618
on x86 x86 and unarmed

978
00:46:15,690 --> 00:46:22,200
and not a more serious attempt to stop

979
00:46:19,619 --> 00:46:25,170
<font color="#CCCCCC">Spectre its invisus back</font><font color="#E5E5E5"> if we make the</font>

980
00:46:22,200 --> 00:46:27,480
<font color="#CCCCCC">T</font><font color="#E5E5E5"> transient load invisible at all how</font>

981
00:46:25,170 --> 00:46:29,640
can<font color="#CCCCCC"> we leak data by simply using</font><font color="#E5E5E5"> a</font>

982
00:46:27,480 --> 00:46:31,650
speculative buffer and if we have the

983
00:46:29,640 --> 00:46:33,598
correct correct prediction we load the

984
00:46:31,650 --> 00:46:34,980
data<font color="#CCCCCC"> into the</font><font color="#E5E5E5"> cache and if it is wrong</font>

985
00:46:33,599 --> 00:46:36,480
we just throw it away

986
00:46:34,980 --> 00:46:38,430
but this<font color="#CCCCCC"> isn't hardware we don't have</font>

987
00:46:36,480 --> 00:46:40,440
<font color="#CCCCCC">this</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> hardware yes yeah yeah but I</font>

988
00:46:38,430 --> 00:46:46,078
can't install that in my computer<font color="#E5E5E5"> no you</font>

989
00:46:40,440 --> 00:46:48,089
can't so how do we have some analysis of

990
00:46:46,079 --> 00:46:51,150
<font color="#CCCCCC">that well</font><font color="#E5E5E5"> we have so many different</font>

991
00:46:48,089 --> 00:46:54,690
<font color="#CCCCCC">versions and</font><font color="#E5E5E5"> we analysis we</font><font color="#CCCCCC"> looked at</font>

992
00:46:51,150 --> 00:46:56,640
them for<font color="#CCCCCC"> all</font><font color="#E5E5E5"> vendors and</font><font color="#CCCCCC"> we can see that</font>

993
00:46:54,690 --> 00:46:59,490
<font color="#CCCCCC">for instance in the suspect sales back</font>

994
00:46:56,640 --> 00:47:02,400
we can theoretically<font color="#E5E5E5"> argument that they</font>

995
00:46:59,490 --> 00:47:05,220
do not work<font color="#E5E5E5"> another slug</font><font color="#CCCCCC"> site desolation</font>

996
00:47:02,400 --> 00:47:06,750
<font color="#E5E5E5">does not work in all cases and but it</font>

997
00:47:05,220 --> 00:47:10,140
works in some case it<font color="#CCCCCC"> works in some</font>

998
00:47:06,750 --> 00:47:13,440
<font color="#CCCCCC">cases yes so</font><font color="#E5E5E5"> we all have done this for</font>

999
00:47:10,140 --> 00:47:16,879
<font color="#E5E5E5">inter arm and AMD it's all pretty</font>

1000
00:47:13,440 --> 00:47:20,130
similar<font color="#E5E5E5"> yes they're pretty similar and</font>

1001
00:47:16,880 --> 00:47:23,730
we can also have<font color="#CCCCCC"> or we have another</font>

1002
00:47:20,130 --> 00:47:26,130
<font color="#CCCCCC">problem</font><font color="#E5E5E5"> with that because some because</font>

1003
00:47:23,730 --> 00:47:28,079
they only<font color="#E5E5E5"> defend against some</font><font color="#CCCCCC"> of the</font>

1004
00:47:26,130 --> 00:47:29,910
cases that's quite bad right so I have

1005
00:47:28,079 --> 00:47:32,339
to combine them yes you need<font color="#E5E5E5"> a</font>

1006
00:47:29,910 --> 00:47:36,839
combination<font color="#E5E5E5"> of different medications</font><font color="#CCCCCC"> and</font>

1007
00:47:32,339 --> 00:47:40,470
each one<font color="#E5E5E5"> costs performance so with this</font>

1008
00:47:36,839 --> 00:47:42,990
we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> seen</font><font color="#CCCCCC"> in recent weeks</font><font color="#E5E5E5"> that STR</font><font color="#CCCCCC"> BP</font>

1009
00:47:40,470 --> 00:47:45,209
for instance has been<font color="#E5E5E5"> introduced but</font>

1010
00:47:42,990 --> 00:47:49,529
because of<font color="#E5E5E5"> the performance impact it was</font>

1011
00:47:45,210 --> 00:47:51,630
<font color="#E5E5E5">thrown out again and with Linux</font><font color="#CCCCCC"> 420</font><font color="#E5E5E5"> it</font>

1012
00:47:49,529 --> 00:47:54,690
can be enabled<font color="#E5E5E5"> but it is off by default</font>

1013
00:47:51,630 --> 00:47:57,990
<font color="#E5E5E5">so how much you use do you have of the</font>

1014
00:47:54,690 --> 00:48:01,410
defense that is not enabled let's<font color="#E5E5E5"> return</font>

1015
00:47:57,990 --> 00:48:04,439
to our classification we have we have

1016
00:48:01,410 --> 00:48:06,750
already<font color="#E5E5E5"> seen this part we have discussed</font>

1017
00:48:04,440 --> 00:48:09,210
the<font color="#CCCCCC"> missed training strategies and in</font>

1018
00:48:06,750 --> 00:48:11,819
previous<font color="#E5E5E5"> work we have from this can all</font>

1019
00:48:09,210 --> 00:48:14,250
we have seen<font color="#E5E5E5"> these versions so there are</font>

1020
00:48:11,819 --> 00:48:16,589
some obvious gaps here are there yes

1021
00:48:14,250 --> 00:48:18,539
because this are our new miss<font color="#E5E5E5"> training</font>

1022
00:48:16,589 --> 00:48:21,960
strategies where we<font color="#CCCCCC"> show that these work</font>

1023
00:48:18,539 --> 00:48:25,529
as well<font color="#E5E5E5"> and in melton we have the same</font>

1024
00:48:21,960 --> 00:48:27,240
thing we have seen some that work<font color="#E5E5E5"> and we</font>

1025
00:48:25,529 --> 00:48:28,350
have<font color="#E5E5E5"> those that we showed that did not</font>

1026
00:48:27,240 --> 00:48:31,649
work

1027
00:48:28,350 --> 00:48:34,290
some that we<font color="#CCCCCC"> already knew and some that</font>

1028
00:48:31,650 --> 00:48:43,200
<font color="#E5E5E5">we did not know yet but who did not work</font>

1029
00:48:34,290 --> 00:48:44,970
and those<font color="#E5E5E5"> that works okay many</font><font color="#CCCCCC"> attacks</font>

1030
00:48:43,200 --> 00:48:48,899
<font color="#E5E5E5">but how did we</font><font color="#CCCCCC"> end up here</font>

1031
00:48:44,970 --> 00:48:52,350
I think I'm outnumbered<font color="#CCCCCC"> more ghosts in</font>

1032
00:48:48,900 --> 00:48:54,330
you so apparently we have ignored<font color="#E5E5E5"> micro</font>

1033
00:48:52,350 --> 00:48:56,880
<font color="#E5E5E5">architectural attacks for a long long</font>

1034
00:48:54,330 --> 00:48:58,710
<font color="#E5E5E5">time</font><font color="#CCCCCC"> I mean two years</font><font color="#E5E5E5"> ago I told you</font>

1035
00:48:56,880 --> 00:49:02,040
<font color="#E5E5E5">about some attacks and nothing has been</font>

1036
00:48:58,710 --> 00:49:05,820
<font color="#E5E5E5">done and the things are we showed the</font>

1037
00:49:02,040 --> 00:49:08,610
<font color="#CCCCCC">taxon crypto have a software</font><font color="#E5E5E5"> should be</font>

1038
00:49:05,820 --> 00:49:09,810
<font color="#CCCCCC">fix that was everybody</font><font color="#E5E5E5"> said</font><font color="#CCCCCC"> that so fix</font>

1039
00:49:08,610 --> 00:49:12,630
the software<font color="#CCCCCC"> don't care</font><font color="#E5E5E5"> about the</font>

1040
00:49:09,810 --> 00:49:16,680
<font color="#E5E5E5">sanctions but how about the</font><font color="#CCCCCC"> tax on</font>

1041
00:49:12,630 --> 00:49:20,010
there's a lot is Lars<font color="#E5E5E5"> dead anyways</font><font color="#CCCCCC"> Aysen</font>

1042
00:49:16,680 --> 00:49:21,870
<font color="#E5E5E5">are for a useful countermeasure</font>

1043
00:49:20,010 --> 00:49:26,910
<font color="#E5E5E5">it's broken anyway we don't care about</font>

1044
00:49:21,870 --> 00:49:30,150
<font color="#E5E5E5">it</font><font color="#CCCCCC"> I use ASL</font><font color="#E5E5E5"> art but how about trusted</font>

1045
00:49:26,910 --> 00:49:32,190
execution violence I mean attacks on<font color="#CCCCCC"> FGX</font>

1046
00:49:30,150 --> 00:49:34,170
or trust zone<font color="#E5E5E5"> where say I put my</font>

1047
00:49:32,190 --> 00:49:36,240
software<font color="#E5E5E5"> and</font><font color="#CCCCCC"> everything is secure well</font>

1048
00:49:34,170 --> 00:49:39,680
<font color="#E5E5E5">those they</font><font color="#CCCCCC"> are they are</font><font color="#E5E5E5"> not part of the</font>

1049
00:49:36,240 --> 00:49:41,220
fat model so you<font color="#E5E5E5"> can't consider those I</font>

1050
00:49:39,680 --> 00:49:43,770
wouldn't<font color="#E5E5E5"> say so</font>

1051
00:49:41,220 --> 00:49:45,779
<font color="#CCCCCC">and how about draw hammer I mean some of</font>

1052
00:49:43,770 --> 00:49:48,420
those attacks improve<font color="#E5E5E5"> to row him an</font>

1053
00:49:45,780 --> 00:49:51,570
attack and you can just flip arbitrary

1054
00:49:48,420 --> 00:49:53,430
bits get rude well those<font color="#E5E5E5"> only</font><font color="#CCCCCC"> effect</font>

1055
00:49:51,570 --> 00:49:55,680
some cheap modules<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> profit the</font>

1056
00:49:53,430 --> 00:50:00,990
prevalence<font color="#CCCCCC"> that is that 80% do you say</font>

1057
00:49:55,680 --> 00:50:04,500
80%<font color="#E5E5E5"> is some cheap modules</font><font color="#CCCCCC"> yes</font><font color="#E5E5E5"> I I think</font>

1058
00:50:00,990 --> 00:50:06,390
<font color="#E5E5E5">I think</font><font color="#CCCCCC"> I realize more and more that for</font>

1059
00:50:04,500 --> 00:50:08,760
years we solely optimized for

1060
00:50:06,390 --> 00:50:10,859
performance<font color="#E5E5E5"> and maybe this was not all</font>

1061
00:50:08,760 --> 00:50:12,120
good I mean<font color="#CCCCCC"> you were standing here and</font>

1062
00:50:10,860 --> 00:50:14,430
saying performance performance

1063
00:50:12,120 --> 00:50:21,859
performance now<font color="#E5E5E5"> I can't remember that</font>

1064
00:50:14,430 --> 00:50:21,859
<font color="#E5E5E5">okay so apparently</font>

1065
00:50:22,510 --> 00:50:26,730
[Music]

1066
00:50:24,200 --> 00:50:27,899
optimisations<font color="#E5E5E5"> always come with the costs</font>

1067
00:50:26,730 --> 00:50:29,940
on the one hand<font color="#E5E5E5"> you're optimizing</font>

1068
00:50:27,900 --> 00:50:31,530
something which<font color="#E5E5E5"> makes sense as we've</font>

1069
00:50:29,940 --> 00:50:34,080
seen with all those<font color="#E5E5E5"> optimizations that</font>

1070
00:50:31,530 --> 00:50:35,820
we've seen but<font color="#E5E5E5"> on the other hand in</font><font color="#CCCCCC"> some</font>

1071
00:50:34,080 --> 00:50:39,960
of those corner cases<font color="#E5E5E5"> you leak some</font>

1072
00:50:35,820 --> 00:50:42,780
information<font color="#CCCCCC"> and that can be</font><font color="#E5E5E5"> crucial we</font>

1073
00:50:39,960 --> 00:50:45,089
need to combine a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> them and we get</font>

1074
00:50:42,780 --> 00:50:47,730
a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> performance overhead and it</font>

1075
00:50:45,089 --> 00:50:49,859
costs so much performance<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> even</font>

1076
00:50:47,730 --> 00:50:51,990
lose more performance<font color="#CCCCCC"> than we</font><font color="#E5E5E5"> actually</font>

1077
00:50:49,859 --> 00:50:54,598
<font color="#E5E5E5">gained with the feature implemented in</font>

1078
00:50:51,990 --> 00:50:57,240
the first hand<font color="#E5E5E5"> so that's also a huge</font>

1079
00:50:54,599 --> 00:51:00,330
<font color="#E5E5E5">problem</font><font color="#CCCCCC"> here and because so many of the</font>

1080
00:50:57,240 --> 00:51:02,669
<font color="#E5E5E5">defenses don't work or can be</font><font color="#CCCCCC"> bypassed</font>

1081
00:51:00,330 --> 00:51:04,680
<font color="#E5E5E5">we need we learned that we or we know</font>

1082
00:51:02,670 --> 00:51:08,300
that<font color="#E5E5E5"> the transient execution attacks</font>

1083
00:51:04,680 --> 00:51:10,770
<font color="#E5E5E5">will keep us busy for</font><font color="#CCCCCC"> very long</font><font color="#E5E5E5"> time</font>

1084
00:51:08,300 --> 00:51:12,730
yeah<font color="#E5E5E5"> thanks</font>

1085
00:51:10,770 --> 00:51:16,080
[Applause]

1086
00:51:12,730 --> 00:51:21,500
[Music]

1087
00:51:16,080 --> 00:51:30,689
[Applause]

1088
00:51:21,500 --> 00:51:30,689
[Music]

1089
00:51:38,080 --> 00:51:43,540
<font color="#E5E5E5">next</font><font color="#CCCCCC"> models</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> here Dania and Claudio I</font>

1090
00:51:40,930 --> 00:51:47,339
think we have<font color="#E5E5E5"> about</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> minutes for Q&A</font>

1091
00:51:43,540 --> 00:51:51,279
so<font color="#CCCCCC"> please ask your questions</font>

1092
00:51:47,340 --> 00:51:54,820
there's microphone number<font color="#CCCCCC"> one</font><font color="#E5E5E5"> two three</font>

1093
00:51:51,280 --> 00:51:56,590
<font color="#E5E5E5">four and five</font><font color="#CCCCCC"> and I hope I</font><font color="#E5E5E5"> see the</font>

1094
00:51:54,820 --> 00:51:59,290
signal angel<font color="#CCCCCC"> yes</font>

1095
00:51:56,590 --> 00:52:03,040
so microphone number<font color="#E5E5E5"> one please thank</font>

1096
00:51:59,290 --> 00:52:04,690
you and<font color="#CCCCCC"> thanks</font><font color="#E5E5E5"> for the talk</font><font color="#CCCCCC"> you hinge it</font>

1097
00:52:03,040 --> 00:52:06,640
at some<font color="#CCCCCC"> point that you can turn off</font>

1098
00:52:04,690 --> 00:52:09,460
<font color="#CCCCCC">prediction so if you have a check like</font>

1099
00:52:06,640 --> 00:52:11,049
you can else<font color="#E5E5E5"> and want to get</font><font color="#CCCCCC"> rid of</font>

1100
00:52:09,460 --> 00:52:13,120
predicting<font color="#E5E5E5"> there's something you could</font>

1101
00:52:11,050 --> 00:52:15,820
do<font color="#E5E5E5"> but you didn't say what as though</font>

1102
00:52:13,120 --> 00:52:20,830
what can you do to get rid<font color="#CCCCCC"> of prediction</font>

1103
00:52:15,820 --> 00:52:23,920
there so you mean in software yeah<font color="#E5E5E5"> so</font>

1104
00:52:20,830 --> 00:52:26,049
you can introduce instructions<font color="#E5E5E5"> that</font>

1105
00:52:23,920 --> 00:52:28,660
where the processor<font color="#E5E5E5"> won't speculate at</font>

1106
00:52:26,050 --> 00:52:31,120
<font color="#CCCCCC">Rustom</font><font color="#E5E5E5"> because the processor can't for</font>

1107
00:52:28,660 --> 00:52:33,609
instance<font color="#E5E5E5"> undefined instructions for</font>

1108
00:52:31,120 --> 00:52:35,529
instance<font color="#CCCCCC"> cpuid</font><font color="#E5E5E5"> there are instructions</font>

1109
00:52:33,610 --> 00:52:39,010
where the processor goes B does not<font color="#E5E5E5"> go</font>

1110
00:52:35,530 --> 00:52:40,300
beyond also<font color="#E5E5E5"> Intel initially said you</font>

1111
00:52:39,010 --> 00:52:44,380
should use something<font color="#CCCCCC"> like a fence</font>

1112
00:52:40,300 --> 00:52:47,230
<font color="#E5E5E5">because the processor won't issue memory</font>

1113
00:52:44,380 --> 00:52:50,080
loads after<font color="#CCCCCC"> an elephant's during</font>

1114
00:52:47,230 --> 00:52:53,310
speculative execution<font color="#CCCCCC"> similar</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> csdb</font>

1115
00:52:50,080 --> 00:52:58,450
<font color="#CCCCCC">on arm ok thank you</font>

1116
00:52:53,310 --> 00:53:02,170
cool microphone number<font color="#E5E5E5"> two I think how</font>

1117
00:52:58,450 --> 00:53:06,600
much how much slower<font color="#E5E5E5"> are the processors</font>

1118
00:53:02,170 --> 00:53:18,040
after a<font color="#E5E5E5"> software or</font><font color="#CCCCCC"> a hardware patch</font>

1119
00:53:06,600 --> 00:53:20,740
<font color="#CCCCCC">roundabout or meta</font><font color="#E5E5E5"> for example we have</font>

1120
00:53:18,040 --> 00:53:23,320
this<font color="#CCCCCC"> Kaiser patch</font><font color="#E5E5E5"> also known as kpti on</font>

1121
00:53:20,740 --> 00:53:26,620
<font color="#CCCCCC">linux and it really depends on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> work</font>

1122
00:53:23,320 --> 00:53:29,260
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have so on a normal</font><font color="#E5E5E5"> consumer</font><font color="#CCCCCC"> PC</font>

1123
00:53:26,620 --> 00:53:31,450
<font color="#CCCCCC">we'll use some internet and office you</font>

1124
00:53:29,260 --> 00:53:34,390
get<font color="#E5E5E5"> around below</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> percent performance</font>

1125
00:53:31,450 --> 00:53:37,390
<font color="#E5E5E5">over headsets it's fine but we have seen</font>

1126
00:53:34,390 --> 00:53:39,730
performance overheads<font color="#CCCCCC"> for computation</font>

1127
00:53:37,390 --> 00:53:42,730
heavy like we've seen<font color="#E5E5E5"> I worked with</font>

1128
00:53:39,730 --> 00:53:45,430
Netflix<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> Brendan Greg you know</font>

1129
00:53:42,730 --> 00:53:46,809
from Netflix yeah yeah if you have a lot

1130
00:53:45,430 --> 00:53:49,209
of Cisco's per second

1131
00:53:46,809 --> 00:53:50,799
that's bad<font color="#CCCCCC"> and it also really depends in</font>

1132
00:53:49,209 --> 00:53:52,959
the<font color="#E5E5E5"> CPU that</font><font color="#CCCCCC"> you have so if you</font><font color="#E5E5E5"> have a</font>

1133
00:53:50,799 --> 00:53:54,939
newer endless<font color="#E5E5E5"> CPU with</font><font color="#CCCCCC"> PC ID for</font>

1134
00:53:52,959 --> 00:53:58,118
instance you also have a lower overhead

1135
00:53:54,939 --> 00:54:00,729
and<font color="#CCCCCC"> with other CPUs</font><font color="#E5E5E5"> and for instance</font><font color="#CCCCCC"> our</font>

1136
00:53:58,119 --> 00:54:02,619
<font color="#E5E5E5">because I mentioned STP that was</font>

1137
00:54:00,729 --> 00:54:05,828
recently chopped<font color="#E5E5E5"> it was reported that</font>

1138
00:54:02,619 --> 00:54:09,749
<font color="#E5E5E5">that did cost about 20 percent in of</font>

1139
00:54:05,829 --> 00:54:13,269
performance<font color="#CCCCCC"> so that's quite a</font><font color="#E5E5E5"> lot</font>

1140
00:54:09,749 --> 00:54:17,618
<font color="#CCCCCC">Thanks I think</font><font color="#E5E5E5"> microphone</font><font color="#CCCCCC"> number four is</font>

1141
00:54:13,269 --> 00:54:22,058
a question yeah<font color="#E5E5E5"> hi thanks for the</font><font color="#CCCCCC"> talk</font>

1142
00:54:17,619 --> 00:54:25,029
I was wondering if you only spoke about

1143
00:54:22,059 --> 00:54:27,279
<font color="#E5E5E5">the reading data but what about writing</font>

1144
00:54:25,029 --> 00:54:30,459
<font color="#CCCCCC">data maybe not in the main memory</font><font color="#E5E5E5"> but</font>

1145
00:54:27,279 --> 00:54:34,299
only<font color="#E5E5E5"> in the cache data that would</font><font color="#CCCCCC"> be</font>

1146
00:54:30,459 --> 00:54:38,799
<font color="#CCCCCC">used</font><font color="#E5E5E5"> after bad by the kernel or another</font>

1147
00:54:34,299 --> 00:54:40,239
process so there's one<font color="#CCCCCC"> Spector attack</font>

1148
00:54:38,799 --> 00:54:43,288
where you have like a speculative

1149
00:54:40,239 --> 00:54:46,179
<font color="#E5E5E5">Buffalo buffer overflow where you could</font>

1150
00:54:43,289 --> 00:54:48,339
<font color="#E5E5E5">override the</font><font color="#CCCCCC"> return address and this is</font>

1151
00:54:46,179 --> 00:54:50,019
what would<font color="#E5E5E5"> be executed speculatively</font><font color="#CCCCCC"> so</font>

1152
00:54:48,339 --> 00:54:52,209
you can do that but we haven't<font color="#E5E5E5"> seen</font>

1153
00:54:50,019 --> 00:54:55,328
anything where you persistently write

1154
00:54:52,209 --> 00:54:57,819
the data for row handler for instance

1155
00:54:55,329 --> 00:55:01,809
you can flip a bit in the DRAM<font color="#E5E5E5"> and this</font>

1156
00:54:57,819 --> 00:55:09,308
bit flip will be persistent<font color="#CCCCCC"> it can be</font>

1157
00:55:01,809 --> 00:55:11,039
person it<font color="#E5E5E5"> can be yeah yeah question</font><font color="#CCCCCC"> from</font>

1158
00:55:09,309 --> 00:55:13,659
the interwebs

1159
00:55:11,039 --> 00:55:16,269
are there any architectures that are

1160
00:55:13,659 --> 00:55:21,009
<font color="#CCCCCC">vulnerable to</font><font color="#E5E5E5"> the attack types you</font>

1161
00:55:16,269 --> 00:55:22,988
mentioned yes so<font color="#CCCCCC"> for arm there are some</font>

1162
00:55:21,009 --> 00:55:25,869
architectures which are not vulnerable

1163
00:55:22,989 --> 00:55:28,449
<font color="#CCCCCC">for instance to melt are some of the</font>

1164
00:55:25,869 --> 00:55:30,279
custom<font color="#CCCCCC"> course of some companies like the</font>

1165
00:55:28,449 --> 00:55:34,140
Samsung core which they have<font color="#E5E5E5"> it's</font>

1166
00:55:30,279 --> 00:55:39,579
<font color="#E5E5E5">vulnerable for arm itself it's only</font><font color="#CCCCCC"> da</font>

1167
00:55:34,140 --> 00:55:41,890
73 I guess<font color="#E5E5E5"> 75 now 75 sorry and also some</font>

1168
00:55:39,579 --> 00:55:44,109
<font color="#CCCCCC">other ones which do not have branch</font>

1169
00:55:41,890 --> 00:55:45,098
prediction at all<font color="#E5E5E5"> so obviously they are</font>

1170
00:55:44,109 --> 00:55:46,449
<font color="#E5E5E5">not affected yeah</font>

1171
00:55:45,099 --> 00:55:48,640
if you don't have<font color="#CCCCCC"> if</font><font color="#E5E5E5"> the processor</font>

1172
00:55:46,449 --> 00:55:51,450
<font color="#E5E5E5">doesn't have the feature</font><font color="#CCCCCC"> usually it's</font>

1173
00:55:48,640 --> 00:55:54,660
<font color="#CCCCCC">very small processors they won't</font><font color="#E5E5E5"> ever</font>

1174
00:55:51,450 --> 00:55:56,879
they usually don't<font color="#E5E5E5"> have broccoli</font><font color="#CCCCCC"> or ASIC</font>

1175
00:55:54,660 --> 00:56:01,620
<font color="#E5E5E5">yes so they are fine but there was a</font>

1176
00:55:56,880 --> 00:56:04,470
paper from from<font color="#CCCCCC"> johan work and he showed</font>

1177
00:56:01,620 --> 00:56:07,140
<font color="#CCCCCC">that even</font><font color="#E5E5E5"> for a very small micro</font>

1178
00:56:04,470 --> 00:56:10,439
controller<font color="#E5E5E5"> if it has some secure domain</font>

1179
00:56:07,140 --> 00:56:13,230
<font color="#CCCCCC">if</font><font color="#E5E5E5"> there's some security sense in the</font>

1180
00:56:10,440 --> 00:56:17,730
system<font color="#E5E5E5"> there might be made on type</font>

1181
00:56:13,230 --> 00:56:20,130
effects thank you and microphone<font color="#E5E5E5"> number</font>

1182
00:56:17,730 --> 00:56:22,830
<font color="#E5E5E5">five please</font><font color="#CCCCCC"> yes sir</font>

1183
00:56:20,130 --> 00:56:25,890
<font color="#E5E5E5">these are</font><font color="#CCCCCC"> attacks</font><font color="#E5E5E5"> actually been seen in</font>

1184
00:56:22,830 --> 00:56:27,840
the wild<font color="#CCCCCC"> I don't know if we would be the</font>

1185
00:56:25,890 --> 00:56:31,230
first<font color="#CCCCCC"> to know that</font><font color="#E5E5E5"> I think you would</font>

1186
00:56:27,840 --> 00:56:32,910
<font color="#CCCCCC">have</font><font color="#E5E5E5"> to ask that</font><font color="#CCCCCC"> someone else so we</font>

1187
00:56:31,230 --> 00:56:36,900
haven't heard of any attacks<font color="#E5E5E5"> in the</font>

1188
00:56:32,910 --> 00:56:39,480
white<font color="#E5E5E5"> thanks and microphone number one</font>

1189
00:56:36,900 --> 00:56:42,810
please<font color="#E5E5E5"> sorry if it's a stupid question</font>

1190
00:56:39,480 --> 00:56:51,480
<font color="#E5E5E5">but you showed those circles squares and</font>

1191
00:56:42,810 --> 00:56:54,029
stars<font color="#CCCCCC"> in some slides stand for well if</font>

1192
00:56:51,480 --> 00:56:56,070
it's a square it means that if it's full

1193
00:56:54,030 --> 00:56:58,290
then<font color="#CCCCCC"> we can theoretically</font><font color="#E5E5E5"> argue</font><font color="#CCCCCC"> okay</font>

1194
00:56:56,070 --> 00:57:00,060
<font color="#E5E5E5">this defense works if it's empty</font>

1195
00:56:58,290 --> 00:57:02,640
then we<font color="#E5E5E5"> figure ethically argue it</font>

1196
00:57:00,060 --> 00:57:05,190
doesn't<font color="#CCCCCC"> not work if it's a start and</font>

1197
00:57:02,640 --> 00:57:08,640
it's something<font color="#E5E5E5"> that we showed</font><font color="#CCCCCC"> you know</font>

1198
00:57:05,190 --> 00:57:14,310
<font color="#E5E5E5">you know we should research paper if</font>

1199
00:57:08,640 --> 00:57:17,160
it's we<font color="#E5E5E5"> have to slide</font><font color="#CCCCCC"> right and if we</font>

1200
00:57:14,310 --> 00:57:20,790
<font color="#E5E5E5">have this symbol it just means this is</font>

1201
00:57:17,160 --> 00:57:22,109
<font color="#E5E5E5">not applicable for for this attack we</font>

1202
00:57:20,790 --> 00:57:24,719
didn't want to<font color="#E5E5E5"> put the legend there</font>

1203
00:57:22,110 --> 00:57:29,170
because it's<font color="#CCCCCC"> quite</font><font color="#E5E5E5"> long</font>

1204
00:57:24,719 --> 00:57:30,819
but you can see the paper you can<font color="#E5E5E5"> see</font>

1205
00:57:29,170 --> 00:57:39,729
the paper that you will find<font color="#E5E5E5"> before</font>

1206
00:57:30,819 --> 00:57:47,709
legend thank you and the last<font color="#CCCCCC"> question</font>

1207
00:57:39,729 --> 00:57:50,769
because<font color="#CCCCCC"> number</font><font color="#E5E5E5"> one I'm one of the rare</font>

1208
00:57:47,709 --> 00:57:54,519
people that<font color="#E5E5E5"> ran exotic architectures and</font>

1209
00:57:50,769 --> 00:57:57,098
I'm running<font color="#CCCCCC"> PowerPC at</font><font color="#E5E5E5"> home on the</font><font color="#CCCCCC"> Telos</font>

1210
00:57:54,519 --> 00:58:01,089
machine and I was<font color="#E5E5E5"> wondering if there is</font>

1211
00:57:57,099 --> 00:58:04,329
<font color="#E5E5E5">any tool set to test these</font>

1212
00:58:01,089 --> 00:58:08,140
vulnerabilities on other architecture

1213
00:58:04,329 --> 00:58:12,069
and see<font color="#CCCCCC"> if I</font><font color="#E5E5E5"> am affected because I'm not</font>

1214
00:58:08,140 --> 00:58:15,759
sure<font color="#E5E5E5"> if IBM is gonna fund like Intel any</font>

1215
00:58:12,069 --> 00:58:17,859
day so I don't<font color="#CCCCCC"> know generally IBM</font>

1216
00:58:15,759 --> 00:58:19,420
processors are also affected we know

1217
00:58:17,859 --> 00:58:22,209
<font color="#CCCCCC">about the power eight</font>

1218
00:58:19,420 --> 00:58:26,229
for instance<font color="#E5E5E5"> power nine I think</font><font color="#CCCCCC"> both are</font>

1219
00:58:22,209 --> 00:58:28,719
<font color="#E5E5E5">power</font><font color="#CCCCCC"> nine and they also have quite a</font>

1220
00:58:26,229 --> 00:58:33,038
heavy performance loss if you<font color="#E5E5E5"> enable the</font>

1221
00:58:28,719 --> 00:58:35,499
mitigations but<font color="#E5E5E5"> so we ordered</font><font color="#CCCCCC"> IBM</font>

1222
00:58:33,039 --> 00:58:38,309
machines but<font color="#E5E5E5"> we didn't receive them so</font>

1223
00:58:35,499 --> 00:58:41,979
far<font color="#E5E5E5"> so we couldn't run any tests on them</font>

1224
00:58:38,309 --> 00:58:44,949
<font color="#CCCCCC">but generally</font><font color="#E5E5E5"> most of our experiments</font>

1225
00:58:41,979 --> 00:58:47,589
are written mostly<font color="#E5E5E5"> in C code you would</font>

1226
00:58:44,949 --> 00:58:50,019
<font color="#E5E5E5">have to replace maybe a few bits to</font>

1227
00:58:47,589 --> 00:58:52,538
adapt them to IBM<font color="#E5E5E5"> but generally the</font>

1228
00:58:50,019 --> 00:58:54,640
attack approach should<font color="#CCCCCC"> be very similar</font>

1229
00:58:52,539 --> 00:58:59,769
<font color="#E5E5E5">because the idea</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the underlying</font>

1230
00:58:54,640 --> 00:59:03,578
architecture so<font color="#CCCCCC"> similar things answer I</font>

1231
00:58:59,769 --> 00:59:07,899
<font color="#CCCCCC">will do this</font><font color="#E5E5E5"> and publish research but I</font>

1232
00:59:03,579 --> 00:59:09,969
have another question please<font color="#E5E5E5"> anyone so</font>

1233
00:59:07,900 --> 00:59:10,690
the very<font color="#CCCCCC"> last one</font><font color="#E5E5E5"> because we have two</font>

1234
00:59:09,969 --> 00:59:12,960
minutes<font color="#E5E5E5"> left</font>

1235
00:59:10,690 --> 00:59:15,420
and I<font color="#E5E5E5"> think the</font>

1236
00:59:12,960 --> 00:59:16,770
<font color="#CCCCCC">gentleman with a</font><font color="#E5E5E5"> white coat</font><font color="#CCCCCC"> no he</font>

1237
00:59:15,420 --> 00:59:19,290
doesn't so<font color="#CCCCCC"> much phone</font><font color="#E5E5E5"> number two is</font>

1238
00:59:16,770 --> 00:59:22,950
<font color="#E5E5E5">waving yep thank you thanks for the talk</font>

1239
00:59:19,290 --> 00:59:25,380
you showed a<font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> new</font><font color="#E5E5E5"> and you variants</font>

1240
00:59:22,950 --> 00:59:29,430
<font color="#E5E5E5">of the attack and as we understand it is</font>

1241
00:59:25,380 --> 00:59:31,230
not<font color="#E5E5E5"> under embargo</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so are the</font>

1242
00:59:29,430 --> 00:59:33,600
mitigations<font color="#CCCCCC"> against them</font><font color="#E5E5E5"> currently</font>

1243
00:59:31,230 --> 00:59:37,950
developed or we are just<font color="#CCCCCC"> waiting for</font>

1244
00:59:33,600 --> 00:59:43,710
<font color="#E5E5E5">proof of</font><font color="#CCCCCC"> concept exploit I mean how many</font>

1245
00:59:37,950 --> 00:59:49,580
CPUs support<font color="#CCCCCC"> mpk yes</font>

1246
00:59:43,710 --> 00:59:53,700
<font color="#E5E5E5">they're not real</font><font color="#CCCCCC"> medications being</font>

1247
00:59:49,580 --> 00:59:55,590
provided<font color="#E5E5E5"> by pilot vendors but they say</font>

1248
00:59:53,700 --> 00:59:57,629
it's basically yet it's so similar just

1249
00:59:55,590 --> 01:00:07,320
fix your software<font color="#CCCCCC"> so that</font><font color="#E5E5E5"> you don't have</font>

1250
00:59:57,630 --> 01:00:09,000
ifs in your<font color="#E5E5E5"> software for example</font><font color="#CCCCCC"> or</font>

1251
01:00:07,320 --> 01:00:11,310
<font color="#CCCCCC">developers should</font><font color="#E5E5E5"> fix their software</font>

1252
01:00:09,000 --> 01:00:13,980
<font color="#E5E5E5">because you could write software for</font>

1253
01:00:11,310 --> 01:00:16,200
<font color="#CCCCCC">many of the variants</font><font color="#E5E5E5"> in a way that they</font>

1254
01:00:13,980 --> 01:00:18,840
can't be<font color="#E5E5E5"> exploited anymore with of</font>

1255
01:00:16,200 --> 01:00:21,180
course a performance impact<font color="#CCCCCC"> and we don't</font>

1256
01:00:18,840 --> 01:00:22,710
have real patches yet for them<font color="#CCCCCC"> it's also</font>

1257
01:00:21,180 --> 01:00:25,020
a bit<font color="#CCCCCC"> of risk management because where</font>

1258
01:00:22,710 --> 01:00:26,730
do you run untrusted code<font color="#E5E5E5"> primarily in</font>

1259
01:00:25,020 --> 01:00:29,430
your browser and<font color="#E5E5E5"> JavaScript and there we</font>

1260
01:00:26,730 --> 01:00:32,400
have<font color="#CCCCCC"> side isolation and in other</font><font color="#E5E5E5"> places</font>

1261
01:00:29,430 --> 01:00:35,569
<font color="#E5E5E5">so we are disabling the</font><font color="#CCCCCC"> SD IBP patches</font>

1262
01:00:32,400 --> 01:00:39,240
by default now for for most<font color="#E5E5E5"> applications</font>

1263
01:00:35,570 --> 01:00:40,950
<font color="#E5E5E5">so we are turning the patches off</font>

1264
01:00:39,240 --> 01:00:43,560
<font color="#CCCCCC">because they cost too much performance</font>

1265
01:00:40,950 --> 01:00:45,299
<font color="#E5E5E5">and the risk is</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> so high currently</font>

1266
01:00:43,560 --> 01:00:47,820
probably<font color="#CCCCCC"> this will</font><font color="#E5E5E5"> change with the first</font>

1267
01:00:45,300 --> 01:00:50,400
real word exploits and then people<font color="#E5E5E5"> will</font>

1268
01:00:47,820 --> 01:00:53,670
say enable<font color="#CCCCCC"> the patches by default but</font>

1269
01:00:50,400 --> 01:00:57,470
that's how security works<font color="#CCCCCC"> we never care</font>

1270
01:00:53,670 --> 01:00:57,470
<font color="#CCCCCC">about security</font><font color="#E5E5E5"> before something happens</font>

1271
01:00:57,670 --> 01:01:02,900
[Applause]

1272
01:00:59,870 --> 01:01:03,279
[Music]

1273
01:01:02,900 --> 01:01:15,290
[Applause]

1274
01:01:03,280 --> 01:01:15,290
[Music]

1275
01:01:17,360 --> 01:01:30,030
[Music]

