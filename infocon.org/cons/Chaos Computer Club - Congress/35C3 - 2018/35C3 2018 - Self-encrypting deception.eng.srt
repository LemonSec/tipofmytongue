1
00:00:02,830 --> 00:00:15,470
[Music]

2
00:00:17,300 --> 00:00:22,920
one of the major<font color="#CCCCCC"> pitfalls</font><font color="#E5E5E5"> in any</font>

3
00:00:20,039 --> 00:00:25,800
security solution is usability and one

4
00:00:22,920 --> 00:00:28,109
way to deal<font color="#CCCCCC"> with that</font><font color="#E5E5E5"> the market decided</font>

5
00:00:25,800 --> 00:00:30,210
is self encrypting devices you might

6
00:00:28,109 --> 00:00:32,820
have come across<font color="#CCCCCC"> them</font><font color="#E5E5E5"> it's usually</font>

7
00:00:30,210 --> 00:00:35,309
external drives that do all<font color="#E5E5E5"> the crypto</font>

8
00:00:32,820 --> 00:00:37,320
<font color="#CCCCCC">stuff for you</font><font color="#E5E5E5"> but what do you</font><font color="#CCCCCC"> do if</font>

9
00:00:35,309 --> 00:00:40,890
these<font color="#E5E5E5"> devices are broken and have weak</font>

10
00:00:37,320 --> 00:00:43,140
crypto<font color="#E5E5E5"> well it gets even worse</font><font color="#CCCCCC"> if you</font>

11
00:00:40,890 --> 00:00:45,000
have<font color="#E5E5E5"> an operating system like Microsoft</font>

12
00:00:43,140 --> 00:00:45,989
Windows<font color="#E5E5E5"> and the detects you're using</font>

13
00:00:45,000 --> 00:00:48,030
<font color="#E5E5E5">such a device</font>

14
00:00:45,989 --> 00:00:50,550
BitLocker for instance will

15
00:00:48,030 --> 00:00:53,550
automatically use<font color="#E5E5E5"> that device instead</font>

16
00:00:50,550 --> 00:00:56,010
<font color="#E5E5E5">possibly stronger software crypto here</font>

17
00:00:53,550 --> 00:00:58,339
to tell us<font color="#CCCCCC"> more about that is Carlos</font>

18
00:00:56,010 --> 00:00:58,339
<font color="#E5E5E5">Meyer</font>

19
00:01:04,680 --> 00:01:11,520
<font color="#E5E5E5">all right thanks so who is this guy</font><font color="#CCCCCC"> well</font>

20
00:01:09,510 --> 00:01:15,090
I'm a PhD student at Radford University

21
00:01:11,520 --> 00:01:17,640
in<font color="#E5E5E5"> MA my focus is on like cryptographic</font>

22
00:01:15,090 --> 00:01:21,840
stuff in the wild so basically<font color="#E5E5E5"> breaking</font>

23
00:01:17,640 --> 00:01:24,720
stuff that's<font color="#E5E5E5"> blackbox</font><font color="#CCCCCC"> you might know me</font>

24
00:01:21,840 --> 00:01:28,250
for<font color="#E5E5E5"> cryptographic attacks on my fret</font>

25
00:01:24,720 --> 00:01:30,870
classic like the patched one and some

26
00:01:28,250 --> 00:01:33,450
algorithms in for generating passwords

27
00:01:30,870 --> 00:01:36,210
<font color="#CCCCCC">in Wi-Fi routers</font><font color="#E5E5E5"> and this year about</font>

28
00:01:33,450 --> 00:01:38,820
<font color="#E5E5E5">self encrypting drives if my research</font>

29
00:01:36,210 --> 00:01:41,520
appeals to you then<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> hire me as a</font>

30
00:01:38,820 --> 00:01:45,720
<font color="#E5E5E5">consultant at midnight blue labs</font><font color="#CCCCCC"> if you</font>

31
00:01:41,520 --> 00:01:48,030
want to and first<font color="#E5E5E5"> I'll start</font><font color="#CCCCCC"> off with</font><font color="#E5E5E5"> a</font>

32
00:01:45,720 --> 00:01:49,710
<font color="#CCCCCC">few acknowledgments like I can't thank</font>

33
00:01:48,030 --> 00:01:52,140
<font color="#CCCCCC">Phillip Goering enough for his research</font>

34
00:01:49,710 --> 00:01:54,750
on the<font color="#E5E5E5"> Samsung 840 Evo like it really</font>

35
00:01:52,140 --> 00:01:56,280
contributed to mine<font color="#CCCCCC"> so thanks if you</font>

36
00:01:54,750 --> 00:01:58,740
<font color="#CCCCCC">want to get</font><font color="#E5E5E5"> involved</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> his reverse</font>

37
00:01:56,280 --> 00:02:03,990
engineering<font color="#E5E5E5"> stuff you should it's it's</font>

38
00:01:58,740 --> 00:02:07,399
<font color="#E5E5E5">awesome it's amazing so yeah</font><font color="#CCCCCC"> cliche</font>

39
00:02:03,990 --> 00:02:09,630
what's the self encrypting<font color="#CCCCCC"> drive</font><font color="#E5E5E5"> so</font>

40
00:02:07,399 --> 00:02:11,459
<font color="#E5E5E5">traditional Christian is like</font><font color="#CCCCCC"> you have a</font>

41
00:02:09,630 --> 00:02:14,910
<font color="#CCCCCC">plaintext you have an algorithm</font><font color="#E5E5E5"> and a</font>

42
00:02:11,459 --> 00:02:16,950
key<font color="#E5E5E5"> and combined you get some ciphertext</font>

43
00:02:14,910 --> 00:02:18,660
<font color="#E5E5E5">at you that that means nothing to you</font>

44
00:02:16,950 --> 00:02:21,149
<font color="#CCCCCC">and</font><font color="#E5E5E5"> can only be decrypted if you have</font>

45
00:02:18,660 --> 00:02:24,030
the same key and<font color="#CCCCCC"> that ends up in</font><font color="#E5E5E5"> a</font>

46
00:02:21,150 --> 00:02:26,100
storage device<font color="#CCCCCC"> now</font><font color="#E5E5E5"> there's also the</font>

47
00:02:24,030 --> 00:02:27,900
<font color="#E5E5E5">hardware style which basically</font>

48
00:02:26,100 --> 00:02:30,150
integrates<font color="#CCCCCC"> everything into a single</font>

49
00:02:27,900 --> 00:02:31,980
<font color="#CCCCCC">device so both the equip ssin and you</font>

50
00:02:30,150 --> 00:02:34,140
should you just basically<font color="#E5E5E5"> give to drive</font>

51
00:02:31,980 --> 00:02:35,940
the data and the key and it<font color="#E5E5E5"> will do</font>

52
00:02:34,140 --> 00:02:38,299
<font color="#CCCCCC">everything for</font><font color="#E5E5E5"> you now that sounds</font>

53
00:02:35,940 --> 00:02:41,730
<font color="#CCCCCC">convenient</font><font color="#E5E5E5"> but there's there are caveats</font>

54
00:02:38,300 --> 00:02:45,420
<font color="#CCCCCC">that's that's</font><font color="#E5E5E5"> probably why</font><font color="#CCCCCC"> you think I'm</font>

55
00:02:41,730 --> 00:02:47,850
here<font color="#E5E5E5"> so basically these things encrypt</font>

56
00:02:45,420 --> 00:02:49,829
<font color="#CCCCCC">everything and they always encrypt</font>

57
00:02:47,850 --> 00:02:51,600
everything<font color="#E5E5E5"> so even if you don't set a</font>

58
00:02:49,830 --> 00:02:53,640
<font color="#CCCCCC">password the moment that you</font><font color="#E5E5E5"> set a</font>

59
00:02:51,600 --> 00:02:55,109
password<font color="#CCCCCC"> basically use that password</font><font color="#E5E5E5"> to</font>

60
00:02:53,640 --> 00:02:56,760
encrypt the key so the encryption<font color="#E5E5E5"> is</font>

61
00:02:55,110 --> 00:03:03,060
then instant<font color="#E5E5E5"> so you don't have to be</font>

62
00:02:56,760 --> 00:03:04,739
encrypt<font color="#CCCCCC"> everything so basically if you</font>

63
00:03:03,060 --> 00:03:07,890
<font color="#CCCCCC">look up the spec sheets of</font><font color="#E5E5E5"> these things</font>

64
00:03:04,739 --> 00:03:12,510
<font color="#E5E5E5">these aren't like magical chips</font><font color="#CCCCCC"> they're</font>

65
00:03:07,890 --> 00:03:15,089
just<font color="#E5E5E5"> ARM cores and there's another so</font>

66
00:03:12,510 --> 00:03:17,829
there's firmware it's basically software

67
00:03:15,090 --> 00:03:20,410
<font color="#CCCCCC">if you if you dive deep enough</font>

68
00:03:17,830 --> 00:03:22,150
there's if you look at a PCB<font color="#E5E5E5"> then you</font>

69
00:03:20,410 --> 00:03:24,579
might wonder what these these pins are

70
00:03:22,150 --> 00:03:26,110
<font color="#E5E5E5">and they're actually</font><font color="#CCCCCC"> JTAG</font><font color="#E5E5E5"> so you can</font>

71
00:03:24,580 --> 00:03:29,320
actually<font color="#CCCCCC"> debug these things and there's</font>

72
00:03:26,110 --> 00:03:33,250
another<font color="#CCCCCC"> example of one so yeah that's</font>

73
00:03:29,320 --> 00:03:35,109
where the fun starts<font color="#CCCCCC"> so well these these</font>

74
00:03:33,250 --> 00:03:37,230
<font color="#CCCCCC">self encrypting drives haven't been like</font>

75
00:03:35,110 --> 00:03:39,700
theoretically proven but they've been

76
00:03:37,230 --> 00:03:41,590
democratically proven in a sense that

77
00:03:39,700 --> 00:03:43,570
yeah there's<font color="#E5E5E5"> there's is all this</font>

78
00:03:41,590 --> 00:03:46,710
marketing fluff around<font color="#E5E5E5"> it and well</font>

79
00:03:43,570 --> 00:03:49,840
<font color="#CCCCCC">basically the the takeaway note is</font>

80
00:03:46,710 --> 00:03:50,680
software<font color="#E5E5E5"> encryption is way inferior to</font>

81
00:03:49,840 --> 00:03:53,610
hardware encryption

82
00:03:50,680 --> 00:03:55,540
there's even<font color="#CCCCCC"> studies</font><font color="#E5E5E5"> released about it</font>

83
00:03:53,610 --> 00:03:59,590
it's all it's great

84
00:03:55,540 --> 00:04:01,650
<font color="#CCCCCC">so even BitLocker</font><font color="#E5E5E5"> trust these</font><font color="#CCCCCC"> things by</font>

85
00:03:59,590 --> 00:04:06,550
default<font color="#CCCCCC"> if your</font><font color="#E5E5E5"> drive actually</font>

86
00:04:01,650 --> 00:04:07,810
advertises support for this so I kind<font color="#E5E5E5"> of</font>

87
00:04:06,550 --> 00:04:10,270
wonder what like what are the actual

88
00:04:07,810 --> 00:04:12,460
security<font color="#E5E5E5"> guarantees of these things well</font>

89
00:04:10,270 --> 00:04:16,030
just<font color="#E5E5E5"> taking theoretical approach we're</font>

90
00:04:12,460 --> 00:04:18,430
going to dive into the practice later<font color="#CCCCCC"> so</font>

91
00:04:16,029 --> 00:04:19,539
there<font color="#E5E5E5"> are three</font><font color="#CCCCCC"> tackle models and we're</font>

92
00:04:18,430 --> 00:04:22,690
just<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to play</font><font color="#E5E5E5"> the attacker model</font>

93
00:04:19,540 --> 00:04:24,280
game so either machine is on and the

94
00:04:22,690 --> 00:04:28,150
attacker has physical access<font color="#CCCCCC"> to a</font>

95
00:04:24,280 --> 00:04:30,489
powered on machine<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is very bad</font><font color="#E5E5E5"> when</font>

96
00:04:28,150 --> 00:04:32,320
you're using software encryption either

97
00:04:30,490 --> 00:04:34,750
the<font color="#E5E5E5"> machine is off</font><font color="#CCCCCC"> and there is no</font>

98
00:04:32,320 --> 00:04:36,310
<font color="#E5E5E5">awareness of the the victim that the</font>

99
00:04:34,750 --> 00:04:39,100
attacker has actually physically

100
00:04:36,310 --> 00:04:41,200
physical access to the machine<font color="#CCCCCC"> and</font><font color="#E5E5E5"> or</font>

101
00:04:39,100 --> 00:04:43,300
the victim is actually<font color="#E5E5E5"> aware that there</font>

102
00:04:41,200 --> 00:04:46,000
<font color="#E5E5E5">is that there has been physical access</font>

103
00:04:43,300 --> 00:04:48,640
to the machine<font color="#CCCCCC"> so then you</font><font color="#E5E5E5"> should that</font>

104
00:04:46,000 --> 00:04:50,350
you should consider the device<font color="#E5E5E5"> tainted</font>

105
00:04:48,640 --> 00:04:52,210
and therefore you shouldn't enter<font color="#CCCCCC"> a</font>

106
00:04:50,350 --> 00:04:53,919
password into it anymore so you're just

107
00:04:52,210 --> 00:04:55,930
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to assume that from the from the</font>

108
00:04:53,919 --> 00:04:57,940
physical encounter onward there is no

109
00:04:55,930 --> 00:04:59,560
you won't get anything<font color="#CCCCCC"> from the victim</font>

110
00:04:57,940 --> 00:05:01,930
anymore<font color="#E5E5E5"> so no password secrets</font>

111
00:04:59,560 --> 00:05:06,130
whatsoever<font color="#E5E5E5"> so let's focus on the first</font>

112
00:05:01,930 --> 00:05:08,350
<font color="#E5E5E5">one first so software encryption keeps a</font>

113
00:05:06,130 --> 00:05:11,169
secret<font color="#E5E5E5"> key in RAM it's needed</font><font color="#CCCCCC"> it needs</font>

114
00:05:08,350 --> 00:05:12,850
that to operate so that<font color="#CCCCCC"> has inherent</font>

115
00:05:11,169 --> 00:05:15,490
weaknesses so you can extract<font color="#CCCCCC"> that key</font>

116
00:05:12,850 --> 00:05:17,770
from<font color="#CCCCCC"> RAM</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> the cold boot attack for</font>

117
00:05:15,490 --> 00:05:20,470
example<font color="#CCCCCC"> I won't go into this in too</font><font color="#E5E5E5"> much</font>

118
00:05:17,770 --> 00:05:23,770
<font color="#E5E5E5">detail but basically you load a custom</font>

119
00:05:20,470 --> 00:05:27,490
OS and then basically<font color="#E5E5E5"> you extract it</font>

120
00:05:23,770 --> 00:05:29,979
from<font color="#E5E5E5"> its previous previous state or you</font>

121
00:05:27,490 --> 00:05:31,669
could do DMA attack for example<font color="#E5E5E5"> through</font>

122
00:05:29,979 --> 00:05:34,370
<font color="#E5E5E5">thunder to turn</font>

123
00:05:31,669 --> 00:05:36,889
or firewire<font color="#E5E5E5"> and that kind of stuff and</font>

124
00:05:34,370 --> 00:05:40,699
so<font color="#CCCCCC"> hardware encryption</font><font color="#E5E5E5"> is supposedly</font>

125
00:05:36,889 --> 00:05:43,090
immune but so actually the key is<font color="#E5E5E5"> kept</font>

126
00:05:40,699 --> 00:05:46,159
<font color="#E5E5E5">in RAM</font><font color="#CCCCCC"> and that</font><font color="#E5E5E5"> is in order</font><font color="#CCCCCC"> to support</font>

127
00:05:43,090 --> 00:05:48,888
<font color="#CCCCCC">standby mode</font><font color="#E5E5E5"> so if you if you put your</font>

128
00:05:46,159 --> 00:05:51,560
PC in standby mode<font color="#CCCCCC"> it turns it off all</font>

129
00:05:48,889 --> 00:05:53,629
the peripheral devices and therefore

130
00:05:51,560 --> 00:05:55,729
when you<font color="#E5E5E5"> resume it again the drives</font>

131
00:05:53,629 --> 00:05:57,530
needs to be unlocked<font color="#CCCCCC"> again and you</font><font color="#E5E5E5"> don't</font>

132
00:05:55,729 --> 00:05:59,870
have to enter a password<font color="#E5E5E5"> so guess where</font>

133
00:05:57,530 --> 00:06:03,919
that password came from<font color="#E5E5E5"> so it's actually</font>

134
00:05:59,870 --> 00:06:06,169
kept in RAM all the time and also<font color="#E5E5E5"> a key</font>

135
00:06:03,919 --> 00:06:08,599
is kept in storage controller<font color="#E5E5E5"> because it</font>

136
00:06:06,169 --> 00:06:10,188
needs<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> it for encryption</font><font color="#E5E5E5"> and a</font>

137
00:06:08,599 --> 00:06:12,469
storage controller is not<font color="#E5E5E5"> a secure</font>

138
00:06:10,189 --> 00:06:14,689
device by any standard<font color="#E5E5E5"> so there's</font>

139
00:06:12,469 --> 00:06:16,250
actually<font color="#CCCCCC"> in on</font><font color="#E5E5E5"> many of them as we saw in</font>

140
00:06:14,689 --> 00:06:18,169
a<font color="#CCCCCC"> previous</font><font color="#E5E5E5"> slide</font><font color="#CCCCCC"> there's debugging</font>

141
00:06:16,250 --> 00:06:21,529
interfaces on them<font color="#E5E5E5"> so you can just use</font>

142
00:06:18,169 --> 00:06:23,000
that<font color="#E5E5E5"> and take the</font><font color="#CCCCCC"> key out and</font><font color="#E5E5E5"> given that</font>

143
00:06:21,529 --> 00:06:26,029
the adversary is physical access you can

144
00:06:23,000 --> 00:06:29,180
<font color="#E5E5E5">basically just hop plug the device so in</font>

145
00:06:26,029 --> 00:06:31,159
this scenario<font color="#CCCCCC"> self encrypting</font><font color="#E5E5E5"> drives are</font>

146
00:06:29,180 --> 00:06:34,639
definitely not<font color="#E5E5E5"> superior to software</font>

147
00:06:31,159 --> 00:06:37,610
<font color="#E5E5E5">encryption so we take a look at the</font>

148
00:06:34,639 --> 00:06:40,430
second attacker model<font color="#E5E5E5"> so the machines</font>

149
00:06:37,610 --> 00:06:43,009
off<font color="#E5E5E5"> and the and the the</font><font color="#CCCCCC"> the victim</font>

150
00:06:40,430 --> 00:06:45,409
<font color="#CCCCCC">hasn't noticed that there has been</font><font color="#E5E5E5"> a</font>

151
00:06:43,009 --> 00:06:48,379
physical<font color="#CCCCCC"> encounter then that's what we</font>

152
00:06:45,409 --> 00:06:51,259
call the<font color="#E5E5E5"> ego made attack so basically</font>

153
00:06:48,379 --> 00:06:53,300
you're<font color="#E5E5E5"> in</font><font color="#CCCCCC"> your out and your laptop</font><font color="#E5E5E5"> is in</font>

154
00:06:51,259 --> 00:06:54,650
a<font color="#E5E5E5"> hotel room and the and</font><font color="#CCCCCC"> evil</font><font color="#E5E5E5"> mate comes</font>

155
00:06:53,300 --> 00:06:55,550
there<font color="#CCCCCC"> and</font><font color="#E5E5E5"> install some backdoor</font>

156
00:06:54,650 --> 00:06:57,378
functionality

157
00:06:55,550 --> 00:06:58,909
so basically installed a<font color="#E5E5E5"> backdoor</font>

158
00:06:57,379 --> 00:07:00,110
functionality you wait for the<font color="#E5E5E5"> victim</font><font color="#CCCCCC"> to</font>

159
00:06:58,909 --> 00:07:02,750
<font color="#E5E5E5">end your secret key and then you</font>

160
00:07:00,110 --> 00:07:05,539
<font color="#E5E5E5">excavate the data or the key or whatever</font>

161
00:07:02,750 --> 00:07:08,240
you want<font color="#CCCCCC"> and so this can</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> Hardware key</font>

162
00:07:05,539 --> 00:07:10,068
logger<font color="#E5E5E5"> and there's not really</font><font color="#CCCCCC"> meaningful</font>

163
00:07:08,240 --> 00:07:11,810
<font color="#E5E5E5">defense this can be back door in the</font>

164
00:07:10,069 --> 00:07:15,080
bootloader<font color="#E5E5E5"> well you can</font><font color="#CCCCCC"> actually defend</font>

165
00:07:11,810 --> 00:07:17,330
against<font color="#E5E5E5"> this with TPMS or</font><font color="#CCCCCC"> or secure boot</font>

166
00:07:15,080 --> 00:07:19,520
but when<font color="#E5E5E5"> our hardware encryption enters</font>

167
00:07:17,330 --> 00:07:21,529
the game<font color="#E5E5E5"> it doesn't</font><font color="#CCCCCC"> change anything</font>

168
00:07:19,520 --> 00:07:24,680
<font color="#E5E5E5">so it's still equivalent it's not</font>

169
00:07:21,529 --> 00:07:27,770
superior and then we end up at our last

170
00:07:24,680 --> 00:07:30,050
scenario<font color="#E5E5E5"> it's when the</font><font color="#CCCCCC"> monitor when the</font>

171
00:07:27,770 --> 00:07:32,779
thing<font color="#E5E5E5"> is powered off or when you lose it</font>

172
00:07:30,050 --> 00:07:34,490
or when your device<font color="#CCCCCC"> gets</font><font color="#E5E5E5"> stolen then</font><font color="#CCCCCC"> and</font>

173
00:07:32,779 --> 00:07:37,310
the attacker has physical access<font color="#CCCCCC"> to it</font>

174
00:07:34,490 --> 00:07:39,439
then<font color="#E5E5E5"> software encryption actually</font>

175
00:07:37,310 --> 00:07:42,030
provides proper security<font color="#CCCCCC"> given</font><font color="#E5E5E5"> that</font>

176
00:07:39,439 --> 00:07:44,820
<font color="#E5E5E5">implementation is sound and</font>

177
00:07:42,030 --> 00:07:46,739
if you use open<font color="#CCCCCC"> source</font><font color="#E5E5E5"> software which is</font>

178
00:07:44,820 --> 00:07:49,050
<font color="#E5E5E5">audited by independent experts</font><font color="#CCCCCC"> you have</font>

179
00:07:46,740 --> 00:07:52,050
<font color="#E5E5E5">you have a pretty safe</font><font color="#CCCCCC"> bet</font><font color="#E5E5E5"> that your</font>

180
00:07:49,050 --> 00:07:54,600
data<font color="#E5E5E5"> is secure</font><font color="#CCCCCC"> or if you</font><font color="#E5E5E5"> use a</font>

181
00:07:52,050 --> 00:07:56,430
proprietary<font color="#E5E5E5"> software with some</font>

182
00:07:54,600 --> 00:07:59,130
implementation details that are public

183
00:07:56,430 --> 00:08:01,110
and independently<font color="#E5E5E5"> audited</font><font color="#CCCCCC"> then you</font>

184
00:07:59,130 --> 00:08:03,050
probably<font color="#CCCCCC"> fine as well</font><font color="#E5E5E5"> or you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> just</font>

185
00:08:01,110 --> 00:08:05,310
live on the edge and use a<font color="#E5E5E5"> black box</font>

186
00:08:03,050 --> 00:08:07,860
implementation and hope for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> best</font><font color="#CCCCCC"> I</font>

187
00:08:05,310 --> 00:08:09,200
mean<font color="#CCCCCC"> I wouldn't prefer</font><font color="#E5E5E5"> it but it's your</font>

188
00:08:07,860 --> 00:08:11,640
choice<font color="#CCCCCC"> and you have</font><font color="#E5E5E5"> that choice for</font>

189
00:08:09,200 --> 00:08:14,760
<font color="#CCCCCC">hardware encryption you just you only</font>

190
00:08:11,640 --> 00:08:17,430
have<font color="#E5E5E5"> that choice so and it's</font><font color="#CCCCCC"> moreover</font>

191
00:08:14,760 --> 00:08:18,659
it's extremely hard<font color="#CCCCCC"> to audit and there's</font>

192
00:08:17,430 --> 00:08:20,730
even additional pitfalls in the

193
00:08:18,660 --> 00:08:22,200
implementation<font color="#CCCCCC"> that apply</font><font color="#E5E5E5"> only to</font>

194
00:08:20,730 --> 00:08:25,620
hardware encryption<font color="#E5E5E5"> and not</font><font color="#CCCCCC"> of software</font>

195
00:08:22,200 --> 00:08:27,630
<font color="#E5E5E5">so basically to take away message</font>

196
00:08:25,620 --> 00:08:32,640
security guarantees are equivalent<font color="#CCCCCC"> at</font>

197
00:08:27,630 --> 00:08:34,770
best and probably<font color="#E5E5E5"> worse so with that</font>

198
00:08:32,640 --> 00:08:37,530
I'll guide<font color="#CCCCCC"> you through some standards</font>

199
00:08:34,770 --> 00:08:39,210
for<font color="#E5E5E5"> self encrypting drives</font><font color="#CCCCCC"> so there's</font>

200
00:08:37,530 --> 00:08:42,120
actually two widely used standards so

201
00:08:39,210 --> 00:08:44,280
it's 88 security feature set and<font color="#CCCCCC"> dcgo</font>

202
00:08:42,120 --> 00:08:46,140
pal<font color="#E5E5E5"> it's a security feature set is</font>

203
00:08:44,280 --> 00:08:50,130
<font color="#CCCCCC">actually something</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> just designed</font>

204
00:08:46,140 --> 00:08:52,170
<font color="#E5E5E5">for access</font><font color="#CCCCCC"> control</font><font color="#E5E5E5"> and so it actually</font>

205
00:08:50,130 --> 00:08:54,090
predated the self encrypting<font color="#CCCCCC"> drive era</font>

206
00:08:52,170 --> 00:08:56,670
and then manufacturers decided to

207
00:08:54,090 --> 00:08:58,440
basically<font color="#E5E5E5"> take</font><font color="#CCCCCC"> that and use it for use</font>

208
00:08:56,670 --> 00:09:01,439
the incoming password as a key for

209
00:08:58,440 --> 00:09:04,380
encrypting the stuff<font color="#CCCCCC"> and</font><font color="#E5E5E5"> TCO pal is</font>

210
00:09:01,440 --> 00:09:07,140
actually designed for for use<font color="#CCCCCC"> for usage</font>

211
00:09:04,380 --> 00:09:09,360
in self encrypting drives so let's take

212
00:09:07,140 --> 00:09:10,920
a look at the first well<font color="#E5E5E5"> before we do</font>

213
00:09:09,360 --> 00:09:12,660
that<font color="#E5E5E5"> suppose</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you have to implement</font>

214
00:09:10,920 --> 00:09:14,010
it<font color="#CCCCCC"> yourself like it'll probably</font><font color="#E5E5E5"> look</font>

215
00:09:12,660 --> 00:09:16,860
something<font color="#CCCCCC"> like this so</font><font color="#E5E5E5"> you get an</font>

216
00:09:14,010 --> 00:09:19,890
incoming user supplied password and some

217
00:09:16,860 --> 00:09:21,990
keyed hash which you use<font color="#E5E5E5"> combined with</font>

218
00:09:19,890 --> 00:09:23,670
the password<font color="#E5E5E5"> and a salt and then you get</font>

219
00:09:21,990 --> 00:09:26,790
<font color="#CCCCCC">a hash result and you compare that</font><font color="#E5E5E5"> to</font>

220
00:09:23,670 --> 00:09:28,140
some hash output and if that matches<font color="#E5E5E5"> you</font>

221
00:09:26,790 --> 00:09:30,000
take another keyed hash with another

222
00:09:28,140 --> 00:09:32,670
salt<font color="#E5E5E5"> with the same password and</font><font color="#CCCCCC"> that</font>

223
00:09:30,000 --> 00:09:36,360
will be your<font color="#E5E5E5"> key at this this is</font><font color="#CCCCCC"> how I</font>

224
00:09:32,670 --> 00:09:39,000
would<font color="#E5E5E5"> probably implement this so so far</font>

225
00:09:36,360 --> 00:09:43,110
this<font color="#E5E5E5"> is easy and so now if we</font><font color="#CCCCCC"> go back to</font>

226
00:09:39,000 --> 00:09:46,170
<font color="#CCCCCC">88 standard as I</font><font color="#E5E5E5"> said is it's predated</font>

227
00:09:43,110 --> 00:09:49,080
the sed era and so encryption is not

228
00:09:46,170 --> 00:09:51,829
<font color="#E5E5E5">mentioned anywhere at all and there's</font>

229
00:09:49,080 --> 00:09:55,200
two<font color="#E5E5E5"> types of password user master</font><font color="#CCCCCC"> and</font>

230
00:09:51,830 --> 00:09:55,889
both are<font color="#E5E5E5"> user settable actually but the</font>

231
00:09:55,200 --> 00:09:57,980
master password

232
00:09:55,889 --> 00:10:00,839
set in during the manufacturing process

233
00:09:57,980 --> 00:10:03,389
<font color="#CCCCCC">so there's some setting it's called the</font>

234
00:10:00,839 --> 00:10:06,449
master<font color="#CCCCCC"> password capability bit and it's</font>

235
00:10:03,389 --> 00:10:08,850
either high or maximum and so<font color="#CCCCCC"> high means</font>

236
00:10:06,449 --> 00:10:12,059
both user and master password have

237
00:10:08,850 --> 00:10:13,919
access to the drives contents and<font color="#CCCCCC"> max</font>

238
00:10:12,059 --> 00:10:15,899
means only<font color="#E5E5E5"> the user can unlock to drive</font>

239
00:10:13,919 --> 00:10:17,879
but<font color="#E5E5E5"> the master may actually erase the</font>

240
00:10:15,899 --> 00:10:19,769
drive<font color="#E5E5E5"> so I didn't come up with these</font>

241
00:10:17,879 --> 00:10:23,040
<font color="#CCCCCC">terms but high doesn't</font><font color="#E5E5E5"> seem that high</font>

242
00:10:19,769 --> 00:10:25,799
security to me so<font color="#E5E5E5"> bottom line you should</font>

243
00:10:23,040 --> 00:10:29,160
either<font color="#E5E5E5"> always</font><font color="#CCCCCC"> change the master password</font>

244
00:10:25,799 --> 00:10:33,540
<font color="#E5E5E5">or set this thing</font><font color="#CCCCCC"> to max</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> face the</font>

245
00:10:29,160 --> 00:10:36,238
<font color="#CCCCCC">consequences so so this</font><font color="#E5E5E5"> is how I would</font>

246
00:10:33,540 --> 00:10:38,579
likely implement this so you have<font color="#E5E5E5"> two of</font>

247
00:10:36,239 --> 00:10:39,809
these data<font color="#E5E5E5"> structures and basically you</font>

248
00:10:38,579 --> 00:10:41,339
<font color="#E5E5E5">have the same thing for checking the</font>

249
00:10:39,809 --> 00:10:44,699
password so you have an incoming<font color="#CCCCCC"> keyed</font>

250
00:10:41,339 --> 00:10:46,619
incoming user password and you you<font color="#E5E5E5"> put</font>

251
00:10:44,699 --> 00:10:48,299
<font color="#E5E5E5">that through keyed hash with a salt and</font>

252
00:10:46,619 --> 00:10:49,919
then you get<font color="#CCCCCC"> a hash result and you check</font>

253
00:10:48,299 --> 00:10:52,290
whether the hash will<font color="#E5E5E5"> whether the</font>

254
00:10:49,919 --> 00:10:55,679
<font color="#E5E5E5">incoming password was valid and if so</font>

255
00:10:52,290 --> 00:10:58,108
then you<font color="#CCCCCC"> use another salt</font><font color="#E5E5E5"> to generate a</font>

256
00:10:55,679 --> 00:11:00,119
key which then decrypt an entry in this

257
00:10:58,109 --> 00:11:01,860
<font color="#E5E5E5">data structure which</font><font color="#CCCCCC"> then decrypt</font>

258
00:11:00,119 --> 00:11:03,809
<font color="#E5E5E5">another entry in this data structure and</font>

259
00:11:01,860 --> 00:11:05,579
the reason for<font color="#CCCCCC"> it is</font><font color="#E5E5E5"> that if you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to</font>

260
00:11:03,809 --> 00:11:12,509
erase the drive<font color="#E5E5E5"> that you don't need both</font>

261
00:11:05,579 --> 00:11:15,540
passwords so<font color="#E5E5E5"> dcgo pal it's a it's</font><font color="#CCCCCC"> like</font>

262
00:11:12,509 --> 00:11:17,069
more modern<font color="#CCCCCC"> they say and so it's</font>

263
00:11:15,540 --> 00:11:18,230
actually a de facto<font color="#CCCCCC"> standard for</font><font color="#E5E5E5"> these</font>

264
00:11:17,069 --> 00:11:20,639
kind of<font color="#E5E5E5"> things</font>

265
00:11:18,230 --> 00:11:23,730
<font color="#E5E5E5">there so there's a</font><font color="#CCCCCC"> notion of multiple</font>

266
00:11:20,639 --> 00:11:24,989
partitions which<font color="#E5E5E5"> we call locking ranges</font>

267
00:11:23,730 --> 00:11:26,699
<font color="#E5E5E5">and there's a notion of multiple</font>

268
00:11:24,989 --> 00:11:29,999
passwords which they call credentials

269
00:11:26,699 --> 00:11:32,819
<font color="#CCCCCC">and a single credential</font><font color="#E5E5E5"> has the ability</font>

270
00:11:29,999 --> 00:11:34,410
to unlock<font color="#E5E5E5"> multiple ranges and a single</font>

271
00:11:32,819 --> 00:11:37,410
<font color="#CCCCCC">range can be unlocked by multiple</font>

272
00:11:34,410 --> 00:11:39,449
credentials<font color="#CCCCCC"> and so in database terms</font>

273
00:11:37,410 --> 00:11:41,999
this is<font color="#CCCCCC"> many-to-many</font><font color="#E5E5E5"> so this is</font>

274
00:11:39,449 --> 00:11:44,819
<font color="#E5E5E5">something that has</font><font color="#CCCCCC"> to be supported</font><font color="#E5E5E5"> if</font>

275
00:11:41,999 --> 00:11:48,629
you implement<font color="#CCCCCC"> this</font><font color="#E5E5E5"> so any password any</font>

276
00:11:44,819 --> 00:11:50,368
range and<font color="#CCCCCC"> many-to-many</font><font color="#E5E5E5"> so imagine that</font>

277
00:11:48,629 --> 00:11:52,799
<font color="#E5E5E5">you had to implement this like it</font>

278
00:11:50,369 --> 00:11:55,919
shouldn't come<font color="#CCCCCC"> as a surprise that people</font>

279
00:11:52,799 --> 00:11:57,749
make mistakes with this and oh by the

280
00:11:55,919 --> 00:11:59,549
way you also need<font color="#E5E5E5"> to be able to scramble</font>

281
00:11:57,749 --> 00:12:02,069
<font color="#E5E5E5">a single range independent of all the</font>

282
00:11:59,549 --> 00:12:06,360
others and<font color="#E5E5E5"> also not knowing all the</font>

283
00:12:02,069 --> 00:12:07,738
passwords<font color="#CCCCCC"> that unlock it so this</font><font color="#E5E5E5"> is</font>

284
00:12:06,360 --> 00:12:09,610
fully trusted by BitLocker<font color="#CCCCCC"> BitLocker</font>

285
00:12:07,739 --> 00:12:13,630
<font color="#E5E5E5">doesn't use the ATA standard it</font>

286
00:12:09,610 --> 00:12:15,730
uses<font color="#E5E5E5"> this so well there's a couple of</font>

287
00:12:13,630 --> 00:12:17,700
typical pitfalls in<font color="#CCCCCC"> this in the</font>

288
00:12:15,730 --> 00:12:21,310
implementation<font color="#CCCCCC"> of these things</font><font color="#E5E5E5"> so</font>

289
00:12:17,700 --> 00:12:25,120
pitfall number<font color="#E5E5E5"> one in yeah this is like</font>

290
00:12:21,310 --> 00:12:27,239
<font color="#E5E5E5">the stupidest so you have an incoming</font>

291
00:12:25,120 --> 00:12:29,920
password coming from the host<font color="#E5E5E5"> PC and</font>

292
00:12:27,240 --> 00:12:31,810
everything<font color="#E5E5E5"> that ends up in the inner</font>

293
00:12:29,920 --> 00:12:34,329
drives flash<font color="#E5E5E5"> chips</font><font color="#CCCCCC"> gets encrypted with</font>

294
00:12:31,810 --> 00:12:39,449
some key<font color="#E5E5E5"> so and in the middle there's a</font>

295
00:12:34,329 --> 00:12:42,040
black box<font color="#E5E5E5"> that basically that</font><font color="#CCCCCC"> basically</font>

296
00:12:39,450 --> 00:12:44,860
links one to another<font color="#E5E5E5"> but you don't know</font>

297
00:12:42,040 --> 00:12:46,390
how<font color="#CCCCCC"> that works</font><font color="#E5E5E5"> and you don't even know</font>

298
00:12:44,860 --> 00:12:49,750
whether these things<font color="#E5E5E5"> are</font><font color="#CCCCCC"> related at all</font>

299
00:12:46,390 --> 00:12:51,220
<font color="#CCCCCC">so if not then then basically</font><font color="#E5E5E5"> all the</font>

300
00:12:49,750 --> 00:12:52,870
secrets that<font color="#E5E5E5"> you need in order to access</font>

301
00:12:51,220 --> 00:12:57,610
<font color="#E5E5E5">the data are already stored in the drive</font>

302
00:12:52,870 --> 00:13:01,089
<font color="#E5E5E5">so this happens and so it pitfall number</font>

303
00:12:57,610 --> 00:13:02,769
<font color="#E5E5E5">two is supposed you naively implement</font>

304
00:13:01,089 --> 00:13:05,560
<font color="#CCCCCC">this scheme then you probably</font><font color="#E5E5E5"> take a</font>

305
00:13:02,769 --> 00:13:07,120
single<font color="#E5E5E5"> key in order to access all</font><font color="#CCCCCC"> two in</font>

306
00:13:05,560 --> 00:13:08,709
<font color="#E5E5E5">order to encrypt all the data and then</font>

307
00:13:07,120 --> 00:13:12,519
use different passwords to encrypt that

308
00:13:08,709 --> 00:13:14,739
key so this<font color="#E5E5E5"> means the weakest password</font>

309
00:13:12,519 --> 00:13:17,260
will allow access<font color="#CCCCCC"> to everything it's</font>

310
00:13:14,740 --> 00:13:18,399
it's you can you can you<font color="#CCCCCC"> can lock that</font>

311
00:13:17,260 --> 00:13:21,610
down in<font color="#E5E5E5"> software but it's not</font>

312
00:13:18,399 --> 00:13:23,620
cryptographically enforced<font color="#E5E5E5"> and so if</font>

313
00:13:21,610 --> 00:13:26,519
statements<font color="#E5E5E5"> which you can basically do</font>

314
00:13:23,620 --> 00:13:30,070
away with if you modify<font color="#CCCCCC"> the firmware so</font>

315
00:13:26,519 --> 00:13:32,470
in in this case<font color="#E5E5E5"> even BitLocker leaves a</font>

316
00:13:30,070 --> 00:13:35,199
single range<font color="#E5E5E5"> on unprotected where the</font>

317
00:13:32,470 --> 00:13:36,850
partition table is<font color="#E5E5E5"> stored so if you</font>

318
00:13:35,199 --> 00:13:38,829
would use this scheme<font color="#E5E5E5"> then you would</font>

319
00:13:36,850 --> 00:13:40,810
basically need<font color="#E5E5E5"> no password</font><font color="#CCCCCC"> because that</font>

320
00:13:38,829 --> 00:13:45,279
range has to be able<font color="#E5E5E5"> to be to become</font>

321
00:13:40,810 --> 00:13:49,420
<font color="#E5E5E5">decrypted so in this case yeah</font>

322
00:13:45,279 --> 00:13:51,189
everything's compromised so obviously

323
00:13:49,420 --> 00:13:52,569
there's there's this randomness problem

324
00:13:51,190 --> 00:13:55,089
because there's no way to<font color="#CCCCCC"> directly</font>

325
00:13:52,570 --> 00:13:57,339
influence these keys you need to<font color="#E5E5E5"> somehow</font>

326
00:13:55,089 --> 00:13:59,470
make them<font color="#CCCCCC"> trigger a regeneration of them</font>

327
00:13:57,339 --> 00:14:02,890
and so<font color="#E5E5E5"> you don't</font><font color="#CCCCCC"> know how the randomness</font>

328
00:13:59,470 --> 00:14:05,050
is obtained and so yeah these things<font color="#CCCCCC"> in</font>

329
00:14:02,890 --> 00:14:08,920
<font color="#E5E5E5">embedded devices tend to be badly</font>

330
00:14:05,050 --> 00:14:11,880
<font color="#E5E5E5">implemented</font><font color="#CCCCCC"> and there's a</font><font color="#E5E5E5"> we're leveling</font>

331
00:14:08,920 --> 00:14:14,670
issue which is kind of<font color="#E5E5E5"> interesting so</font>

332
00:14:11,880 --> 00:14:16,570
multiple<font color="#E5E5E5"> writes the same logical sector</font>

333
00:14:14,670 --> 00:14:18,939
<font color="#CCCCCC">trigger writes</font><font color="#E5E5E5"> to different physical</font>

334
00:14:16,570 --> 00:14:20,709
<font color="#E5E5E5">sectors that's basically in order to to</font>

335
00:14:18,940 --> 00:14:22,720
<font color="#CCCCCC">make sure that that the flash tape</font>

336
00:14:20,709 --> 00:14:23,900
<font color="#E5E5E5">doesn't wear down</font><font color="#CCCCCC"> too stupid</font><font color="#E5E5E5"> too quickly</font>

337
00:14:22,720 --> 00:14:27,590
<font color="#CCCCCC">so</font>

338
00:14:23,900 --> 00:14:29,840
you have a finite<font color="#CCCCCC"> number of writing</font>

339
00:14:27,590 --> 00:14:32,450
erase a cycles<font color="#E5E5E5"> that a single block can</font>

340
00:14:29,840 --> 00:14:33,920
actually handle and in order to you want

341
00:14:32,450 --> 00:14:36,200
to<font color="#E5E5E5"> spread that</font><font color="#CCCCCC"> out as</font><font color="#E5E5E5"> much as you can</font>

342
00:14:33,920 --> 00:14:37,550
<font color="#E5E5E5">over the entire chip in order to make to</font>

343
00:14:36,200 --> 00:14:39,920
make<font color="#E5E5E5"> the service life as long as</font>

344
00:14:37,550 --> 00:14:42,620
possible<font color="#CCCCCC"> so therefore there is algorithm</font>

345
00:14:39,920 --> 00:14:44,780
<font color="#E5E5E5">in between that</font><font color="#CCCCCC"> Maps</font><font color="#E5E5E5"> logical sectors to</font>

346
00:14:42,620 --> 00:14:46,400
physical sectors and if you write<font color="#CCCCCC"> to</font>

347
00:14:44,780 --> 00:14:48,890
successive times to the<font color="#E5E5E5"> same physical</font>

348
00:14:46,400 --> 00:14:51,079
sectors<font color="#E5E5E5"> chances are that they end up at</font>

349
00:14:48,890 --> 00:14:52,819
<font color="#E5E5E5">the to the same logical sector</font><font color="#CCCCCC"> chances</font>

350
00:14:51,080 --> 00:14:54,710
<font color="#CCCCCC">are that</font><font color="#E5E5E5"> that they end up in a different</font>

351
00:14:52,820 --> 00:14:56,150
physical sector so the old data<font color="#E5E5E5"> are</font>

352
00:14:54,710 --> 00:14:58,160
still there if you overwrite the

353
00:14:56,150 --> 00:15:01,310
original so if you get the drive from

354
00:14:58,160 --> 00:15:03,069
<font color="#E5E5E5">the factory then obviously the key is in</font>

355
00:15:01,310 --> 00:15:05,239
there but it's stored unprotected and

356
00:15:03,070 --> 00:15:08,120
suppose that<font color="#E5E5E5"> you'd enter the password</font>

357
00:15:05,240 --> 00:15:09,850
and then<font color="#CCCCCC"> you overwrite the original key</font>

358
00:15:08,120 --> 00:15:11,960
<font color="#E5E5E5">with an encrypted</font><font color="#CCCCCC"> variant</font><font color="#E5E5E5"> it's</font>

359
00:15:09,850 --> 00:15:13,970
oversimplification but<font color="#E5E5E5"> this space it's a</font>

360
00:15:11,960 --> 00:15:15,650
<font color="#E5E5E5">basic idea but</font><font color="#CCCCCC"> if you if there's we're</font>

361
00:15:13,970 --> 00:15:17,750
leveling then the<font color="#E5E5E5"> original data may</font>

362
00:15:15,650 --> 00:15:19,370
still be there and<font color="#E5E5E5"> therefore all you</font>

363
00:15:17,750 --> 00:15:23,240
need and<font color="#CCCCCC"> to in</font><font color="#E5E5E5"> order to encrypt all the</font>

364
00:15:19,370 --> 00:15:25,430
data is also<font color="#E5E5E5"> still there so yeah that's</font>

365
00:15:23,240 --> 00:15:27,620
basically what I<font color="#E5E5E5"> just said</font>

366
00:15:25,430 --> 00:15:31,030
pitfall number<font color="#CCCCCC"> five</font><font color="#E5E5E5"> in fact this is the</font>

367
00:15:27,620 --> 00:15:33,710
final one<font color="#E5E5E5"> there's</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> deftly mode and</font>

368
00:15:31,030 --> 00:15:37,520
this basically means<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to some power</font>

369
00:15:33,710 --> 00:15:39,740
saving<font color="#CCCCCC"> state</font><font color="#E5E5E5"> so host</font><font color="#CCCCCC"> PC sends a definite</font>

370
00:15:37,520 --> 00:15:41,449
signal to the<font color="#CCCCCC"> Stowers</font><font color="#E5E5E5"> controller and the</font>

371
00:15:39,740 --> 00:15:44,060
<font color="#E5E5E5">storage controller</font><font color="#CCCCCC"> basically there's so</font>

372
00:15:41,450 --> 00:15:46,510
there's there's no specified way in

373
00:15:44,060 --> 00:15:49,400
<font color="#E5E5E5">order how it is that defines how this</font>

374
00:15:46,510 --> 00:15:52,310
power saving is to be<font color="#E5E5E5"> achieved so it can</font>

375
00:15:49,400 --> 00:15:54,199
be it can<font color="#E5E5E5"> be</font><font color="#CCCCCC"> achieved</font><font color="#E5E5E5"> any way so the</font>

376
00:15:52,310 --> 00:15:56,270
storage<font color="#CCCCCC"> controller may decide</font><font color="#E5E5E5"> to dump</font>

377
00:15:54,200 --> 00:16:00,260
its ram into non-volatile storage<font color="#E5E5E5"> and</font>

378
00:15:56,270 --> 00:16:01,370
then turn off its<font color="#CCCCCC"> RAM so it may do that</font>

379
00:16:00,260 --> 00:16:05,360
<font color="#E5E5E5">it's not</font><font color="#CCCCCC"> specified</font>

380
00:16:01,370 --> 00:16:07,700
so in that case<font color="#CCCCCC"> secret</font><font color="#E5E5E5"> keys may also end</font>

381
00:16:05,360 --> 00:16:09,980
up in non-volatile storage<font color="#E5E5E5"> and it's</font>

382
00:16:07,700 --> 00:16:14,030
<font color="#E5E5E5">crucial that these things are erased on</font>

383
00:16:09,980 --> 00:16:15,560
resumption or or not being<font color="#E5E5E5"> used</font>

384
00:16:14,030 --> 00:16:18,290
<font color="#E5E5E5">it may not being stored in non-volatile</font>

385
00:16:15,560 --> 00:16:20,260
storage at all<font color="#E5E5E5"> so yeah there's a couple</font>

386
00:16:18,290 --> 00:16:23,150
<font color="#E5E5E5">of scenarios</font><font color="#CCCCCC"> where we looked at</font><font color="#E5E5E5"> this and</font>

387
00:16:20,260 --> 00:16:25,250
finally<font color="#E5E5E5"> there's a general implementation</font>

388
00:16:23,150 --> 00:16:26,780
issues that<font color="#E5E5E5"> also apply to software that</font>

389
00:16:25,250 --> 00:16:28,100
still apply in<font color="#CCCCCC"> Hardware so stuff like</font>

390
00:16:26,780 --> 00:16:31,430
mode of operations

391
00:16:28,100 --> 00:16:34,730
this probably rings a bell<font color="#CCCCCC"> sorry annals</font>

392
00:16:31,430 --> 00:16:37,890
key derivation etc<font color="#E5E5E5"> that's all still</font>

393
00:16:34,730 --> 00:16:40,320
there so what's our methodology

394
00:16:37,890 --> 00:16:42,420
so<font color="#CCCCCC"> a</font><font color="#E5E5E5"> general approach it's it's actually</font>

395
00:16:40,320 --> 00:16:44,940
<font color="#CCCCCC">it's pretty ad-hoc</font><font color="#E5E5E5"> the stuff that we did</font>

396
00:16:42,420 --> 00:16:47,430
and there's that<font color="#E5E5E5"> I mean you can't really</font>

397
00:16:44,940 --> 00:16:50,700
<font color="#E5E5E5">fit it into a single model but we tried</font>

398
00:16:47,430 --> 00:16:53,479
<font color="#CCCCCC">to</font><font color="#E5E5E5"> make it as generic as possible</font><font color="#CCCCCC"> so</font>

399
00:16:50,700 --> 00:16:56,250
like there's<font color="#E5E5E5"> this</font><font color="#CCCCCC"> three-step program</font>

400
00:16:53,480 --> 00:16:57,779
<font color="#CCCCCC">obtaining a</font><font color="#E5E5E5"> firmware image</font><font color="#CCCCCC"> gaining</font>

401
00:16:56,250 --> 00:16:59,399
low-level control<font color="#CCCCCC"> over the device or</font>

402
00:16:57,779 --> 00:17:01,950
actually that<font color="#E5E5E5"> means debugging it or</font>

403
00:16:59,399 --> 00:17:04,349
getting<font color="#E5E5E5"> code execution or and then</font>

404
00:17:01,950 --> 00:17:06,360
analyze the<font color="#E5E5E5"> firmware</font><font color="#CCCCCC"> and see if you can</font>

405
00:17:04,349 --> 00:17:11,879
find some some crypto implementation

406
00:17:06,359 --> 00:17:14,520
<font color="#CCCCCC">false</font><font color="#E5E5E5"> yeah so</font><font color="#CCCCCC"> obtain</font><font color="#E5E5E5"> the firmware image</font>

407
00:17:11,880 --> 00:17:16,380
and<font color="#CCCCCC"> that like that that seems easy</font>

408
00:17:14,520 --> 00:17:18,270
<font color="#CCCCCC">download it</font><font color="#E5E5E5"> but that can</font><font color="#CCCCCC"> be harder than</font>

409
00:17:16,380 --> 00:17:20,880
<font color="#CCCCCC">seams</font><font color="#E5E5E5"> because there's usually</font>

410
00:17:18,270 --> 00:17:23,160
obfuscation applied so you need some

411
00:17:20,880 --> 00:17:25,829
vendor<font color="#E5E5E5"> to from</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> from the manufacturer</font>

412
00:17:23,160 --> 00:17:29,520
that uses SSL so you need to strip<font color="#CCCCCC"> that</font>

413
00:17:25,829 --> 00:17:31,080
and then then probably there's another

414
00:17:29,520 --> 00:17:33,330
layer of crypto<font color="#CCCCCC"> applied just for</font>

415
00:17:31,080 --> 00:17:35,100
obfuscation just to piss<font color="#CCCCCC"> you off</font><font color="#E5E5E5"> and so</font>

416
00:17:33,330 --> 00:17:37,860
this is<font color="#E5E5E5"> example of the Samsung magician</font>

417
00:17:35,100 --> 00:17:40,020
which uses<font color="#CCCCCC"> some some AES key that's hard</font>

418
00:17:37,860 --> 00:17:42,719
coded and<font color="#E5E5E5"> but it's not in the body of</font>

419
00:17:40,020 --> 00:17:45,049
<font color="#E5E5E5">the filter of the executables you need</font>

420
00:17:42,720 --> 00:17:47,429
to reverse that<font color="#E5E5E5"> and it's annoying</font><font color="#CCCCCC"> and</font>

421
00:17:45,049 --> 00:17:51,299
<font color="#E5E5E5">any image itself may also be encrypted</font>

422
00:17:47,429 --> 00:17:53,280
<font color="#E5E5E5">and</font><font color="#CCCCCC"> if the decryption is performed on</font>

423
00:17:51,299 --> 00:17:54,480
<font color="#CCCCCC">the unit itself then there's</font><font color="#E5E5E5"> that's a</font>

424
00:17:53,280 --> 00:17:56,460
dead end<font color="#E5E5E5"> because you don't have the keys</font>

425
00:17:54,480 --> 00:17:58,190
<font color="#CCCCCC">if it's</font><font color="#E5E5E5"> not on the host</font><font color="#CCCCCC"> PC and obviously</font>

426
00:17:56,460 --> 00:18:02,040
you can perform the decryption yourself

427
00:17:58,190 --> 00:18:04,440
<font color="#E5E5E5">and so in that case you</font><font color="#CCCCCC"> have to pull the</font>

428
00:18:02,040 --> 00:18:07,379
firmware<font color="#E5E5E5"> from</font><font color="#CCCCCC"> ram to JTAG for example</font>

429
00:18:04,440 --> 00:18:12,030
but that's not it's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> a given</font><font color="#E5E5E5"> that</font>

430
00:18:07,380 --> 00:18:13,919
<font color="#CCCCCC">that's available so yeah let's let's</font>

431
00:18:12,030 --> 00:18:16,190
let's take<font color="#E5E5E5"> a deeper look</font><font color="#CCCCCC"> into that so</font>

432
00:18:13,919 --> 00:18:20,910
JTAG allows you to control<font color="#E5E5E5"> the device</font>

433
00:18:16,190 --> 00:18:23,490
like completely so so you can help<font color="#E5E5E5"> the</font>

434
00:18:20,910 --> 00:18:25,320
cpu set registers read or write to the

435
00:18:23,490 --> 00:18:27,990
<font color="#CCCCCC">address space basically</font><font color="#E5E5E5"> you control the</font>

436
00:18:25,320 --> 00:18:30,299
whole<font color="#CCCCCC"> thing and some models</font><font color="#E5E5E5"> have the</font>

437
00:18:27,990 --> 00:18:32,940
<font color="#CCCCCC">plaintiff in plain sight so for</font><font color="#E5E5E5"> example</font>

438
00:18:30,299 --> 00:18:35,668
this one<font color="#E5E5E5"> it's a 14 standardized pin</font>

439
00:18:32,940 --> 00:18:37,470
layout<font color="#E5E5E5"> others need some figuring out we</font>

440
00:18:35,669 --> 00:18:39,270
use this<font color="#E5E5E5"> board called the jtagulator for</font>

441
00:18:37,470 --> 00:18:42,660
it just basically<font color="#E5E5E5"> brute force just</font><font color="#CCCCCC"> a pin</font>

442
00:18:39,270 --> 00:18:44,340
layout<font color="#CCCCCC"> and if it's not there it can</font><font color="#E5E5E5"> be</font>

443
00:18:42,660 --> 00:18:46,530
turned off in many for many<font color="#E5E5E5"> of these</font>

444
00:18:44,340 --> 00:18:49,199
controllers<font color="#E5E5E5"> then you need some code</font>

445
00:18:46,530 --> 00:18:51,690
execution<font color="#E5E5E5"> to be achieved so how do you</font>

446
00:18:49,200 --> 00:18:54,929
do<font color="#E5E5E5"> that well some vendors have undock</font>

447
00:18:51,690 --> 00:18:56,580
commands that allow<font color="#E5E5E5"> this</font><font color="#CCCCCC"> some have</font>

448
00:18:54,929 --> 00:18:57,960
<font color="#CCCCCC">phoner abilities in their firmware but</font>

449
00:18:56,580 --> 00:18:59,100
like it's kind of a chicken<font color="#CCCCCC"> and egg</font>

450
00:18:57,960 --> 00:19:00,419
<font color="#CCCCCC">problem because if you don't</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> the</font>

451
00:18:59,100 --> 00:19:03,719
firmware<font color="#E5E5E5"> image</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> you can find these</font>

452
00:19:00,419 --> 00:19:05,340
obviously<font color="#CCCCCC"> some have some code</font><font color="#E5E5E5"> stored in</font>

453
00:19:03,720 --> 00:19:07,230
memory chips like the firmware<font color="#E5E5E5"> image</font>

454
00:19:05,340 --> 00:19:08,730
itself stored in some memory<font color="#E5E5E5"> tape that</font>

455
00:19:07,230 --> 00:19:12,480
you may modify with<font color="#E5E5E5"> external equipment</font>

456
00:19:08,730 --> 00:19:14,460
<font color="#CCCCCC">and/or like if you want</font><font color="#E5E5E5"> to go really</font>

457
00:19:12,480 --> 00:19:15,870
<font color="#CCCCCC">hardcore you can bypass</font><font color="#E5E5E5"> cryptographic</font>

458
00:19:14,460 --> 00:19:21,149
signature checks with fault injection

459
00:19:15,870 --> 00:19:22,979
for example<font color="#CCCCCC"> so now</font><font color="#E5E5E5"> yeah this is</font>

460
00:19:21,149 --> 00:19:25,110
analyzing<font color="#E5E5E5"> the firmware it's basically</font>

461
00:19:22,980 --> 00:19:26,580
looking<font color="#CCCCCC"> at how it's implemented that's</font>

462
00:19:25,110 --> 00:19:29,309
<font color="#E5E5E5">more of an art than a science but I'll</font>

463
00:19:26,580 --> 00:19:32,309
give you<font color="#CCCCCC"> a</font><font color="#E5E5E5"> couple of a couple of hints</font>

464
00:19:29,309 --> 00:19:35,879
<font color="#E5E5E5">that that you probably want to want to</font>

465
00:19:32,309 --> 00:19:37,559
<font color="#E5E5E5">take away so first if you have the</font><font color="#CCCCCC"> image</font>

466
00:19:35,879 --> 00:19:40,559
you want<font color="#E5E5E5"> to figure out</font><font color="#CCCCCC"> its section</font>

467
00:19:37,559 --> 00:19:42,539
information<font color="#CCCCCC"> so you want to see what what</font>

468
00:19:40,559 --> 00:19:45,360
pages are<font color="#E5E5E5"> mapped where in the actual</font>

469
00:19:42,539 --> 00:19:46,649
<font color="#E5E5E5">address space</font><font color="#CCCCCC"> so you take</font><font color="#E5E5E5"> that from the</font>

470
00:19:45,360 --> 00:19:48,330
image header sometimes it's obvious

471
00:19:46,649 --> 00:19:51,570
<font color="#E5E5E5">sometimes you need a little bit of</font>

472
00:19:48,330 --> 00:19:53,250
<font color="#E5E5E5">reverse</font><font color="#CCCCCC"> engineering</font><font color="#E5E5E5"> and then load the</font>

473
00:19:51,570 --> 00:19:55,559
image into<font color="#E5E5E5"> this assembler we use either</font>

474
00:19:53,250 --> 00:19:58,169
<font color="#CCCCCC">Pro for this and then figure out the</font>

475
00:19:55,559 --> 00:20:00,840
firmware does now it seems it's it's

476
00:19:58,169 --> 00:20:02,519
easier said<font color="#E5E5E5"> than done</font><font color="#CCCCCC"> so like one of the</font>

477
00:20:00,840 --> 00:20:05,639
things<font color="#E5E5E5"> that you probably want to look at</font>

478
00:20:02,519 --> 00:20:07,679
is finding<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ATA dispatch table so</font>

479
00:20:05,639 --> 00:20:11,100
basically it's a table<font color="#CCCCCC"> of structures</font>

480
00:20:07,679 --> 00:20:13,919
<font color="#CCCCCC">that has at least</font><font color="#E5E5E5"> an opcode and a</font>

481
00:20:11,100 --> 00:20:15,840
function<font color="#CCCCCC"> pointer</font><font color="#E5E5E5"> that can that contains</font>

482
00:20:13,919 --> 00:20:18,509
the implementation of that<font color="#E5E5E5"> command</font><font color="#CCCCCC"> and</font>

483
00:20:15,840 --> 00:20:20,189
so basically that<font color="#CCCCCC"> I haven't seen any a</font>

484
00:20:18,509 --> 00:20:22,830
manufacturer that<font color="#E5E5E5"> doesn't do it</font><font color="#CCCCCC"> this way</font>

485
00:20:20,190 --> 00:20:24,990
<font color="#E5E5E5">so if you find that table</font><font color="#CCCCCC"> then you can</font>

486
00:20:22,830 --> 00:20:26,490
actually<font color="#E5E5E5"> look up any</font><font color="#CCCCCC"> ath</font><font color="#E5E5E5"> standard what</font>

487
00:20:24,990 --> 00:20:28,110
every of one of<font color="#E5E5E5"> these function</font>

488
00:20:26,490 --> 00:20:29,820
implements and that's<font color="#E5E5E5"> really convenient</font>

489
00:20:28,110 --> 00:20:31,830
<font color="#CCCCCC">so if you want to go</font><font color="#E5E5E5"> target it</font><font color="#CCCCCC"> and you</font>

490
00:20:29,820 --> 00:20:34,830
want<font color="#E5E5E5"> to see what I what kind what kind</font>

491
00:20:31,830 --> 00:20:37,918
of implementation<font color="#E5E5E5"> is used for certain</font>

492
00:20:34,830 --> 00:20:40,259
<font color="#E5E5E5">commands then go hunt for that table</font><font color="#CCCCCC"> and</font>

493
00:20:37,919 --> 00:20:43,440
<font color="#E5E5E5">yeah you'll probably find it in a couple</font>

494
00:20:40,259 --> 00:20:45,029
<font color="#CCCCCC">of days so yeah look through function</font>

495
00:20:43,440 --> 00:20:46,500
with interesting op codes like this can

496
00:20:45,029 --> 00:20:49,860
be vendor<font color="#CCCCCC"> specific though it's</font><font color="#E5E5E5"> those</font>

497
00:20:46,500 --> 00:20:53,039
tend to be<font color="#CCCCCC"> really interesting so without</font>

498
00:20:49,860 --> 00:20:55,379
<font color="#E5E5E5">further ado I will I will go into the</font>

499
00:20:53,039 --> 00:20:57,990
case studies<font color="#CCCCCC"> so the first one</font><font color="#E5E5E5"> is the</font>

500
00:20:55,379 --> 00:20:59,250
crucial<font color="#E5E5E5"> MX 100 it has some</font><font color="#CCCCCC"> Marvell</font>

501
00:20:57,990 --> 00:21:02,100
controller there's no<font color="#E5E5E5"> documentation</font>

502
00:20:59,250 --> 00:21:04,590
whatsoever so we<font color="#E5E5E5"> used reverse</font>

503
00:21:02,100 --> 00:21:05,418
engineering<font color="#E5E5E5"> for all of it and it has a</font>

504
00:21:04,590 --> 00:21:07,399
dual core

505
00:21:05,419 --> 00:21:09,709
yeah basically<font color="#E5E5E5"> arm controller it's some</font>

506
00:21:07,399 --> 00:21:10,820
<font color="#CCCCCC">proprietary design I believe</font><font color="#E5E5E5"> and of</font>

507
00:21:09,709 --> 00:21:14,029
course it has a hardware crypto

508
00:21:10,820 --> 00:21:16,218
processor in<font color="#E5E5E5"> order to cope with the</font>

509
00:21:14,029 --> 00:21:17,929
bandwidth of<font color="#E5E5E5"> a</font><font color="#CCCCCC"> TA because this thing</font>

510
00:21:16,219 --> 00:21:19,609
obviously<font color="#CCCCCC"> isn't powerful enough although</font>

511
00:21:17,929 --> 00:21:22,820
<font color="#E5E5E5">it's quite powerful it's like in the</font>

512
00:21:19,609 --> 00:21:24,978
range<font color="#E5E5E5"> of a Raspberry Pi so</font><font color="#CCCCCC"> further</font>

513
00:21:22,820 --> 00:21:27,708
<font color="#E5E5E5">images they come as bootable ISO images</font>

514
00:21:24,979 --> 00:21:28,999
<font color="#E5E5E5">so you can just yeah you</font><font color="#CCCCCC"> can just</font><font color="#E5E5E5"> take</font>

515
00:21:27,709 --> 00:21:31,639
the<font color="#E5E5E5"> firmware image out and it's</font>

516
00:21:28,999 --> 00:21:33,589
<font color="#CCCCCC">plaintext everything's there there</font>

517
00:21:31,639 --> 00:21:36,498
cryptographically signed<font color="#CCCCCC"> oh so you can</font>

518
00:21:33,589 --> 00:21:38,839
just modify it and then flash it<font color="#E5E5E5"> but it</font>

519
00:21:36,499 --> 00:21:42,200
has a JTAG debugger so you can if you

520
00:21:38,839 --> 00:21:45,349
<font color="#E5E5E5">want you can still flash it by but</font><font color="#CCCCCC"> by</font>

521
00:21:42,200 --> 00:21:47,659
breaking<font color="#E5E5E5"> the signature checks so the</font>

522
00:21:45,349 --> 00:21:49,549
<font color="#E5E5E5">findings on these drives is well the</font>

523
00:21:47,659 --> 00:21:51,700
incoming<font color="#CCCCCC"> ATA password if you're using</font>

524
00:21:49,549 --> 00:21:54,259
<font color="#E5E5E5">ATA in order to encrypt your data</font>

525
00:21:51,700 --> 00:21:56,749
it's basically hashed<font color="#E5E5E5"> compared to some</font>

526
00:21:54,259 --> 00:22:00,229
other hash and then not used further on

527
00:21:56,749 --> 00:22:02,289
anywhere<font color="#E5E5E5"> so basically that's it</font><font color="#CCCCCC"> remove</font>

528
00:22:00,229 --> 00:22:04,729
the check<font color="#E5E5E5"> and then access the data</font>

529
00:22:02,289 --> 00:22:05,989
<font color="#E5E5E5">that's enough</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> that's sufficient</font>

530
00:22:04,729 --> 00:22:09,129
in order<font color="#E5E5E5"> to break the encryption if</font>

531
00:22:05,989 --> 00:22:12,259
you're using ATA security on this<font color="#CCCCCC"> drive</font>

532
00:22:09,129 --> 00:22:16,849
now with TCO pal you probably expect

533
00:22:12,259 --> 00:22:19,999
better but now then<font color="#E5E5E5"> again so same story</font>

534
00:22:16,849 --> 00:22:21,950
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> is the same</font><font color="#E5E5E5"> and there's some</font>

535
00:22:19,999 --> 00:22:23,809
<font color="#E5E5E5">interesting vendor commands but you need</font>

536
00:22:21,950 --> 00:22:26,419
<font color="#E5E5E5">to unlock</font><font color="#CCCCCC"> them first so</font><font color="#E5E5E5"> you need just</font>

537
00:22:23,809 --> 00:22:28,789
<font color="#E5E5E5">like this this this</font><font color="#CCCCCC"> quirky command set</font>

538
00:22:26,419 --> 00:22:30,649
some LBA to some magic<font color="#CCCCCC"> value and use</font>

539
00:22:28,789 --> 00:22:33,469
this feature code and this<font color="#E5E5E5"> ATA opcode</font>

540
00:22:30,649 --> 00:22:35,389
and then all of a sudden<font color="#E5E5E5"> the big unlock</font>

541
00:22:33,469 --> 00:22:37,639
the the vendor commands are unlocked and

542
00:22:35,389 --> 00:22:41,418
<font color="#E5E5E5">you can use different</font><font color="#CCCCCC"> commands</font><font color="#E5E5E5"> so one</font><font color="#CCCCCC"> of</font>

543
00:22:37,639 --> 00:22:44,389
them<font color="#E5E5E5"> is to read a page in</font><font color="#CCCCCC"> SPI or erase</font>

544
00:22:41,419 --> 00:22:46,700
or write it to it and the SPI flash

545
00:22:44,389 --> 00:22:49,668
actually<font color="#E5E5E5"> contains like the serial number</font>

546
00:22:46,700 --> 00:22:51,679
or some diagnostic stuff but also the

547
00:22:49,669 --> 00:22:54,049
bootloader<font color="#E5E5E5"> so you can actually get code</font>

548
00:22:51,679 --> 00:22:55,609
execution with this from the host PC

549
00:22:54,049 --> 00:22:58,579
which<font color="#CCCCCC"> is interesting</font><font color="#E5E5E5"> if you're</font>

550
00:22:55,609 --> 00:23:00,849
developing malware for example but even

551
00:22:58,579 --> 00:23:03,259
<font color="#CCCCCC">they thought this was kind</font><font color="#E5E5E5"> of</font>

552
00:23:00,849 --> 00:23:06,279
inefficient so they also<font color="#E5E5E5"> included the</font>

553
00:23:03,259 --> 00:23:06,279
arbitrary right

554
00:23:10,750 --> 00:23:18,550
so so<font color="#CCCCCC"> summarizing the above it's great</font>

555
00:23:15,800 --> 00:23:18,550
you'll see

556
00:23:18,760 --> 00:23:25,370
so the the MX 200 is basically the

557
00:23:22,640 --> 00:23:27,290
successor to this thing<font color="#E5E5E5"> the</font><font color="#CCCCCC"> JTAG pins</font>

558
00:23:25,370 --> 00:23:29,689
have moved so<font color="#E5E5E5"> it's kind of annoying</font><font color="#CCCCCC"> to</font>

559
00:23:27,290 --> 00:23:31,159
solder on them now so<font color="#E5E5E5"> yeah that that</font>

560
00:23:29,690 --> 00:23:34,040
that's basically<font color="#E5E5E5"> the</font><font color="#CCCCCC"> challenge that you</font>

561
00:23:31,160 --> 00:23:35,990
get<font color="#E5E5E5"> but everything else is</font><font color="#CCCCCC"> the same</font>

562
00:23:34,040 --> 00:23:38,300
so same vulnerabilities same everything

563
00:23:35,990 --> 00:23:42,260
same vendor<font color="#E5E5E5"> commands everything so yeah</font>

564
00:23:38,300 --> 00:23:44,690
create the MX 300 though they<font color="#E5E5E5"> really</font>

565
00:23:42,260 --> 00:23:46,220
<font color="#CCCCCC">upped their</font><font color="#E5E5E5"> game</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> they move to to a</font>

566
00:23:44,690 --> 00:23:48,080
different<font color="#E5E5E5"> kind of memory which is not</font>

567
00:23:46,220 --> 00:23:52,570
really relevant<font color="#E5E5E5"> in security but</font><font color="#CCCCCC"> I</font>

568
00:23:48,080 --> 00:23:57,020
thought<font color="#E5E5E5"> I tell you anyway</font><font color="#CCCCCC"> new controller</font>

569
00:23:52,570 --> 00:23:58,850
<font color="#E5E5E5">and they turned off the JTAG and they</font>

570
00:23:57,020 --> 00:24:02,960
also completely rewritten the security

571
00:23:58,850 --> 00:24:04,639
code<font color="#E5E5E5"> so oh yeah by the way the vendor</font>

572
00:24:02,960 --> 00:24:07,280
commands are still in there but now you

573
00:24:04,640 --> 00:24:09,080
don't<font color="#CCCCCC"> need this magic you can't use this</font>

574
00:24:07,280 --> 00:24:11,149
magic<font color="#E5E5E5"> unlock command anymore they use</font>

575
00:24:09,080 --> 00:24:12,290
cryptographic signatures and obviously

576
00:24:11,150 --> 00:24:14,810
we don't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> the key because it's</font>

577
00:24:12,290 --> 00:24:17,240
<font color="#CCCCCC">asymmetric</font><font color="#E5E5E5"> so bad and there's some</font>

578
00:24:14,810 --> 00:24:19,490
buffer overflows and none of the numerix

579
00:24:17,240 --> 00:24:22,430
exploitable though at least<font color="#CCCCCC"> I couldn't</font>

580
00:24:19,490 --> 00:24:24,080
exploit them<font color="#E5E5E5"> so how do we get code</font>

581
00:24:22,430 --> 00:24:26,090
execution on this thing<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we need</font>

582
00:24:24,080 --> 00:24:28,070
that<font color="#E5E5E5"> in order to well it makes</font>

583
00:24:26,090 --> 00:24:30,199
researching this thing easier and<font color="#E5E5E5"> also</font>

584
00:24:28,070 --> 00:24:33,200
you want you want code execution order

585
00:24:30,200 --> 00:24:35,180
to exploit<font color="#CCCCCC"> some</font><font color="#E5E5E5"> creative bugs so for</font>

586
00:24:33,200 --> 00:24:37,700
that we looked<font color="#CCCCCC"> at the boot process</font><font color="#E5E5E5"> so on</font>

587
00:24:35,180 --> 00:24:39,620
the left you<font color="#CCCCCC"> see a rom which is</font><font color="#E5E5E5"> embedded</font>

588
00:24:37,700 --> 00:24:41,560
<font color="#CCCCCC">into</font><font color="#E5E5E5"> the controller which then</font><font color="#CCCCCC"> loads</font>

589
00:24:39,620 --> 00:24:44,389
some code from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> spi</font><font color="#E5E5E5"> flash and</font>

590
00:24:41,560 --> 00:24:49,669
basically<font color="#E5E5E5"> that loads the firmware from</font>

591
00:24:44,390 --> 00:24:51,290
<font color="#E5E5E5">nand so yeah this</font><font color="#CCCCCC"> is like if you</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font>

592
00:24:49,670 --> 00:24:53,360
<font color="#E5E5E5">take off the</font><font color="#CCCCCC"> nand and</font><font color="#E5E5E5"> modify the</font>

593
00:24:51,290 --> 00:24:56,240
firmware in<font color="#CCCCCC"> NAND that's</font><font color="#E5E5E5"> really annoying</font>

594
00:24:53,360 --> 00:24:59,689
<font color="#CCCCCC">like there's it's a BGA chip</font><font color="#E5E5E5"> like over</font><font color="#CCCCCC"> a</font>

595
00:24:56,240 --> 00:25:02,600
<font color="#CCCCCC">hundred</font><font color="#E5E5E5"> pins so how about we look at the</font>

596
00:24:59,690 --> 00:25:04,400
<font color="#E5E5E5">SPI flash because that's only eight pins</font>

597
00:25:02,600 --> 00:25:08,419
and the pins are exposed<font color="#E5E5E5"> in the outside</font>

598
00:25:04,400 --> 00:25:10,730
and it's located there on the board so

599
00:25:08,420 --> 00:25:13,250
that's what we did<font color="#CCCCCC"> you connected a</font>

600
00:25:10,730 --> 00:25:16,460
reader<font color="#E5E5E5"> to this thing so some</font><font color="#CCCCCC"> wire is</font>

601
00:25:13,250 --> 00:25:18,410
<font color="#E5E5E5">going on and convenient header and so</font>

602
00:25:16,460 --> 00:25:20,230
first what<font color="#CCCCCC"> you do is</font><font color="#E5E5E5"> connect an SPI</font>

603
00:25:18,410 --> 00:25:22,270
<font color="#E5E5E5">reader device</font>

604
00:25:20,230 --> 00:25:25,480
and make a backup obviously of this

605
00:25:22,270 --> 00:25:26,889
thing then craft some code<font color="#CCCCCC"> that removes</font>

606
00:25:25,480 --> 00:25:30,130
the signature checks from<font color="#E5E5E5"> the firmware</font>

607
00:25:26,890 --> 00:25:33,130
<font color="#CCCCCC">so once the</font><font color="#E5E5E5"> firmware is loaded and but</font>

608
00:25:30,130 --> 00:25:35,500
not not yet jumped<font color="#E5E5E5"> to then you patch it</font>

609
00:25:33,130 --> 00:25:39,280
<font color="#CCCCCC">that's that's some some code that you</font>

610
00:25:35,500 --> 00:25:42,400
inject<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> SPI flash</font><font color="#E5E5E5"> so yeah that</font>

611
00:25:39,280 --> 00:25:44,950
and then flash this modified stage<font color="#CCCCCC"> two</font>

612
00:25:42,400 --> 00:25:46,600
of<font color="#E5E5E5"> the boot process and then the drive</font>

613
00:25:44,950 --> 00:25:49,270
will accept arbitrary firmware with

614
00:25:46,600 --> 00:25:51,459
invalid signatures<font color="#CCCCCC"> so then you</font><font color="#E5E5E5"> take a</font>

615
00:25:49,270 --> 00:25:53,799
<font color="#E5E5E5">firmware image and add some features</font>

616
00:25:51,460 --> 00:25:57,520
<font color="#E5E5E5">like arbitrary read write and execute</font>

617
00:25:53,799 --> 00:25:59,200
and then you flash it<font color="#CCCCCC"> as if you would</font>

618
00:25:57,520 --> 00:26:02,070
flash<font color="#E5E5E5"> a normal firmware update to send</font>

619
00:25:59,200 --> 00:26:05,380
it<font color="#E5E5E5"> through some ata command</font>

620
00:26:02,070 --> 00:26:07,510
so I'll do that<font color="#E5E5E5"> later actually I'll</font>

621
00:26:05,380 --> 00:26:09,190
demonstrate that<font color="#E5E5E5"> so on with the key</font>

622
00:26:07,510 --> 00:26:10,270
derivation scheme so we reverse

623
00:26:09,190 --> 00:26:12,490
engineered<font color="#CCCCCC"> all of it</font>

624
00:26:10,270 --> 00:26:14,679
basically there<font color="#CCCCCC"> is now binding between</font>

625
00:26:12,490 --> 00:26:16,690
<font color="#CCCCCC">the</font><font color="#E5E5E5"> actual password and the actual key</font>

626
00:26:14,679 --> 00:26:19,299
that's being used<font color="#CCCCCC"> eventually for</font>

627
00:26:16,690 --> 00:26:22,540
<font color="#E5E5E5">encrypting your data but and that's a</font>

628
00:26:19,299 --> 00:26:25,929
big but basically this incoming password

629
00:26:22,540 --> 00:26:28,030
is used<font color="#E5E5E5"> to encrypt one key and every</font>

630
00:26:25,929 --> 00:26:29,980
password basically yields<font color="#E5E5E5"> that same key</font>

631
00:26:28,030 --> 00:26:33,340
<font color="#E5E5E5">and that key is then used to decrypt</font>

632
00:26:29,980 --> 00:26:37,270
some range key so basically if you<font color="#E5E5E5"> have</font>

633
00:26:33,340 --> 00:26:40,480
that key which they refer<font color="#CCCCCC"> to</font><font color="#E5E5E5"> as the RTS</font>

634
00:26:37,270 --> 00:26:42,340
key then you have actually access to

635
00:26:40,480 --> 00:26:47,350
everything<font color="#E5E5E5"> everything else is</font><font color="#CCCCCC"> just if</font>

636
00:26:42,340 --> 00:26:48,820
statements so yeah this<font color="#E5E5E5"> is prevented</font><font color="#CCCCCC"> by</font>

637
00:26:47,350 --> 00:26:50,559
the firmware<font color="#E5E5E5"> but it's not actually</font>

638
00:26:48,820 --> 00:26:52,059
cryptographic reinforced<font color="#E5E5E5"> but you still</font>

639
00:26:50,559 --> 00:26:53,860
need a single<font color="#CCCCCC"> password in order to</font>

640
00:26:52,059 --> 00:26:55,270
access<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the ranges and all the keys</font>

641
00:26:53,860 --> 00:26:57,159
for<font color="#E5E5E5"> the all</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> all the unprotected</font>

642
00:26:55,270 --> 00:26:59,740
ranges are actually stored in plain text

643
00:26:57,160 --> 00:27:04,030
so they don't then you<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> get the RTS</font>

644
00:26:59,740 --> 00:27:05,740
key from them so this could<font color="#E5E5E5"> work</font><font color="#CCCCCC"> at</font>

645
00:27:04,030 --> 00:27:07,510
least like you<font color="#CCCCCC"> need a</font><font color="#E5E5E5"> single</font><font color="#CCCCCC"> password</font>

646
00:27:05,740 --> 00:27:10,570
which like in it let's be honest like

647
00:27:07,510 --> 00:27:11,679
that's the<font color="#E5E5E5"> only reasonable</font><font color="#CCCCCC"> scenario that</font>

648
00:27:10,570 --> 00:27:13,330
<font color="#E5E5E5">you're going</font><font color="#CCCCCC"> to use</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> in you're not</font>

649
00:27:11,679 --> 00:27:17,350
<font color="#E5E5E5">going to use multiple passwords multiple</font>

650
00:27:13,330 --> 00:27:20,168
ranges<font color="#E5E5E5"> so but we still found a way</font>

651
00:27:17,350 --> 00:27:21,939
<font color="#CCCCCC">around it so consider the password</font>

652
00:27:20,169 --> 00:27:24,490
<font color="#E5E5E5">protection function so they call it</font>

653
00:27:21,940 --> 00:27:27,370
protect password and from the name you

654
00:27:24,490 --> 00:27:29,860
<font color="#CCCCCC">probably</font><font color="#E5E5E5"> think this thing just generates</font>

655
00:27:27,370 --> 00:27:31,989
a hash but it does<font color="#E5E5E5"> more than that it</font>

656
00:27:29,860 --> 00:27:33,789
actually<font color="#E5E5E5"> the</font><font color="#CCCCCC"> output actually</font><font color="#E5E5E5"> contains</font>

657
00:27:31,990 --> 00:27:36,970
you<font color="#E5E5E5"> already</font><font color="#CCCCCC"> ascii encrypted with</font>

658
00:27:33,789 --> 00:27:38,649
your password<font color="#E5E5E5"> so you shouldn't really</font><font color="#CCCCCC"> be</font>

659
00:27:36,970 --> 00:27:43,899
throwing around the output of this thing

660
00:27:38,649 --> 00:27:47,559
<font color="#CCCCCC">so actually we looked</font><font color="#E5E5E5"> at so we injected</font>

661
00:27:43,899 --> 00:27:50,168
some code into<font color="#CCCCCC"> the firmware</font><font color="#E5E5E5"> on some on</font>

662
00:27:47,559 --> 00:27:51,940
some<font color="#E5E5E5"> within some functions and we</font>

663
00:27:50,169 --> 00:27:54,629
changed the behavior<font color="#E5E5E5"> such that it just</font>

664
00:27:51,940 --> 00:27:57,399
does the<font color="#CCCCCC"> original</font><font color="#E5E5E5"> behavior and also just</font>

665
00:27:54,629 --> 00:28:00,158
puts it puts the fact that<font color="#E5E5E5"> it's been</font>

666
00:27:57,399 --> 00:28:02,469
called into<font color="#E5E5E5"> a log file</font><font color="#CCCCCC"> so with its</font>

667
00:28:00,159 --> 00:28:05,200
parameters so what you get<font color="#E5E5E5"> from that is</font>

668
00:28:02,470 --> 00:28:07,509
this fancy log file<font color="#E5E5E5"> and it basically it</font>

669
00:28:05,200 --> 00:28:10,330
says protect password and the password

670
00:28:07,509 --> 00:28:12,489
<font color="#CCCCCC">is a</font><font color="#E5E5E5"> zero buffer and in flag for storing</font>

671
00:28:10,330 --> 00:28:14,559
the<font color="#E5E5E5"> RDS</font><font color="#CCCCCC"> key is</font><font color="#E5E5E5"> yes please store the RDS</font>

672
00:28:12,489 --> 00:28:17,200
key in some slot<font color="#E5E5E5"> number in some table</font>

673
00:28:14,559 --> 00:28:20,649
and then that entry gets copied to<font color="#CCCCCC"> a lot</font>

674
00:28:17,200 --> 00:28:22,629
of<font color="#E5E5E5"> other slots so eventually this RDS</font>

675
00:28:20,649 --> 00:28:24,820
key encrypted with a<font color="#E5E5E5"> zero buffer ends up</font>

676
00:28:22,629 --> 00:28:27,609
in all<font color="#E5E5E5"> of these slots except for 15</font>

677
00:28:24,820 --> 00:28:31,509
which is overwritten later and the

678
00:28:27,609 --> 00:28:33,340
decryption<font color="#E5E5E5"> key is a zero buffer so as an</font>

679
00:28:31,509 --> 00:28:36,070
attack strategy you would flash<font color="#E5E5E5"> this</font>

680
00:28:33,340 --> 00:28:38,168
modified firmware image then craft some

681
00:28:36,070 --> 00:28:40,059
code that<font color="#E5E5E5"> recovers the</font><font color="#CCCCCC"> RTS key from slot</font>

682
00:28:38,169 --> 00:28:42,849
1 basically decrypting it<font color="#E5E5E5"> with the zero</font>

683
00:28:40,059 --> 00:28:45,549
buffer execute that code on the device

684
00:28:42,849 --> 00:28:47,019
and<font color="#E5E5E5"> then you have the</font><font color="#CCCCCC"> RTS key but you're</font>

685
00:28:45,549 --> 00:28:48,999
<font color="#E5E5E5">still up the</font><font color="#CCCCCC"> air yet because</font><font color="#E5E5E5"> there's</font>

686
00:28:47,019 --> 00:28:50,529
still some some access control in the

687
00:28:48,999 --> 00:28:52,690
way so you need to remove<font color="#E5E5E5"> that so</font>

688
00:28:50,529 --> 00:28:54,399
there's a password verification function

689
00:28:52,690 --> 00:28:57,609
that<font color="#E5E5E5"> basically checks a hash that</font><font color="#CCCCCC"> you</font>

690
00:28:54,399 --> 00:28:59,469
have to nullify<font color="#E5E5E5"> and then unlock any</font>

691
00:28:57,609 --> 00:29:03,609
desired range with an arbitrary<font color="#E5E5E5"> password</font>

692
00:28:59,470 --> 00:29:18,519
<font color="#E5E5E5">so now I'm going to demo this let's pray</font>

693
00:29:03,609 --> 00:29:24,090
to the<font color="#E5E5E5"> Democrats so yeah sorry so let me</font>

694
00:29:18,519 --> 00:29:24,090
see I had this one<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> flash</font><font color="#E5E5E5"> one</font>

695
00:29:26,620 --> 00:29:30,969
yeah so<font color="#E5E5E5"> it detected my flash so it's</font>

696
00:29:29,110 --> 00:29:33,309
actually it's<font color="#CCCCCC"> actually on</font><font color="#E5E5E5"> the desk here</font>

697
00:29:30,970 --> 00:29:38,799
could someone please the team<font color="#CCCCCC"> set</font><font color="#E5E5E5"> camera</font>

698
00:29:33,309 --> 00:29:43,149
maybe<font color="#E5E5E5"> yeah so this is my USB</font><font color="#CCCCCC"> SPI reader</font>

699
00:29:38,799 --> 00:29:46,360
device and this<font color="#E5E5E5"> is the crucial MX 300</font>

700
00:29:43,150 --> 00:29:48,460
and it's actually connected<font color="#E5E5E5"> and there's</font>

701
00:29:46,360 --> 00:29:50,620
this board in between<font color="#E5E5E5"> and it's a it's a</font>

702
00:29:48,460 --> 00:29:59,710
fancy jtagulator but it's just<font color="#E5E5E5"> there</font><font color="#CCCCCC"> to</font>

703
00:29:50,620 --> 00:30:03,959
supply<font color="#E5E5E5"> voltage sorry so so yeah</font><font color="#CCCCCC"> I</font>

704
00:29:59,710 --> 00:30:06,010
created a cheat sheet<font color="#E5E5E5"> though so</font>

705
00:30:03,960 --> 00:30:07,690
basically what I'm going<font color="#E5E5E5"> to do now is</font>

706
00:30:06,010 --> 00:30:09,190
generate this

707
00:30:07,690 --> 00:30:16,570
I already made a<font color="#CCCCCC"> backup of</font><font color="#E5E5E5"> this thing</font>

708
00:30:09,190 --> 00:30:18,460
obviously<font color="#E5E5E5"> so I'm just gonna okay so yeah</font>

709
00:30:16,570 --> 00:30:19,779
this<font color="#E5E5E5"> is by make file that</font><font color="#CCCCCC"> tells</font>

710
00:30:18,460 --> 00:30:23,500
<font color="#E5E5E5">everything and it patches the firmware</font>

711
00:30:19,779 --> 00:30:26,409
<font color="#E5E5E5">and now basically the firmware</font><font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of</font>

712
00:30:23,500 --> 00:30:29,710
SPI flash<font color="#CCCCCC"> image is patched now so I have</font>

713
00:30:26,409 --> 00:30:32,260
this this thing here and I'm going to

714
00:30:29,710 --> 00:30:41,309
flash it<font color="#CCCCCC"> so I'm going</font><font color="#E5E5E5"> to look it up in</font>

715
00:30:32,260 --> 00:30:44,110
<font color="#E5E5E5">my cheat sheet</font><font color="#CCCCCC"> okay so now it's flashing</font>

716
00:30:41,309 --> 00:30:45,668
<font color="#E5E5E5">so that will take Wow</font><font color="#CCCCCC"> and amou I'll show</font>

717
00:30:44,110 --> 00:30:48,250
you video<font color="#CCCCCC"> if the stuff</font><font color="#E5E5E5"> that I did</font>

718
00:30:45,669 --> 00:30:51,610
earlier<font color="#CCCCCC"> so</font><font color="#E5E5E5"> this is basically the</font>

719
00:30:48,250 --> 00:30:53,529
BitLocker<font color="#E5E5E5"> setup phase so the drive is</font>

720
00:30:51,610 --> 00:30:56,678
<font color="#CCCCCC">connected to the</font><font color="#E5E5E5"> PC for the first time</font>

721
00:30:53,529 --> 00:30:59,850
and it attacks it<font color="#E5E5E5"> and let's create an</font>

722
00:30:56,679 --> 00:30:59,850
empty partition table

723
00:31:05,970 --> 00:31:11,309
new volume<font color="#E5E5E5"> NTFS everything default</font>

724
00:31:24,300 --> 00:31:28,770
and then we enable BitLocker

725
00:31:29,040 --> 00:31:38,260
so spoiler alert

726
00:31:30,970 --> 00:31:41,410
the password is<font color="#E5E5E5"> HD f HD f as you can see</font>

727
00:31:38,260 --> 00:31:42,700
there's no<font color="#E5E5E5"> dialogue asking</font><font color="#CCCCCC"> you to -</font>

728
00:31:41,410 --> 00:31:46,500
would you like hardware encryption

729
00:31:42,700 --> 00:31:54,750
whatsoever<font color="#CCCCCC"> it's just</font><font color="#E5E5E5"> just uses</font><font color="#CCCCCC"> it and</font>

730
00:31:46,500 --> 00:31:56,920
now<font color="#E5E5E5"> drive</font><font color="#CCCCCC"> encryption is enabled okay</font>

731
00:31:54,750 --> 00:31:59,910
let's see if the flashing<font color="#CCCCCC"> is finished</font>

732
00:31:56,920 --> 00:31:59,910
<font color="#E5E5E5">verifying flash</font>

733
00:32:57,790 --> 00:33:01,820
yeah

734
00:32:59,000 --> 00:33:03,970
<font color="#E5E5E5">okay so that's probably this is not</font>

735
00:33:01,820 --> 00:33:06,530
within<font color="#CCCCCC"> the range</font><font color="#E5E5E5"> that I that I actually</font>

736
00:33:03,970 --> 00:33:12,740
modified so it's okay it's<font color="#CCCCCC"> just some</font>

737
00:33:06,530 --> 00:33:21,370
some glitch so now I<font color="#CCCCCC"> will remove this</font>

738
00:33:12,740 --> 00:33:21,370
<font color="#CCCCCC">and</font><font color="#E5E5E5"> remove the reader and plug this in</font>

739
00:33:27,970 --> 00:33:37,660
<font color="#E5E5E5">okay so oh wow</font>

740
00:33:34,400 --> 00:33:37,660
<font color="#CCCCCC">like we're not panicked</font>

741
00:34:17,310 --> 00:34:23,400
so while the laptops rebooting<font color="#CCCCCC"> our beady</font>

742
00:34:19,980 --> 00:34:27,150
metaphorical chicken to be<font color="#E5E5E5"> butchered to</font>

743
00:34:23,400 --> 00:34:32,690
appraise the<font color="#CCCCCC"> gods who here had a demo</font>

744
00:34:27,150 --> 00:34:32,690
crash on<font color="#E5E5E5"> stage hands up</font>

745
00:34:34,320 --> 00:34:41,850
[Applause]

746
00:34:34,860 --> 00:34:48,300
[Music]

747
00:34:41,850 --> 00:34:53,850
of those<font color="#E5E5E5"> was it hardware yeah</font>

748
00:34:48,300 --> 00:34:56,380
was it software<font color="#E5E5E5"> oh well</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> how's it</font>

749
00:34:53,850 --> 00:34:59,150
going back right<font color="#E5E5E5"> yes</font>

750
00:34:56,380 --> 00:35:05,039
[Applause]

751
00:34:59,150 --> 00:35:05,039
[Music]

752
00:35:05,080 --> 00:35:08,490
can I<font color="#E5E5E5"> get a picture maybe</font>

753
00:35:30,930 --> 00:35:46,230
ah there we are

754
00:35:37,079 --> 00:35:48,000
great great so<font color="#E5E5E5"> okay now that the the SPR</font>

755
00:35:46,230 --> 00:35:50,700
is flashed<font color="#E5E5E5"> it should I accept</font><font color="#CCCCCC"> our</font>

756
00:35:48,000 --> 00:35:55,619
<font color="#CCCCCC">observed firmware images</font><font color="#E5E5E5"> so I'm going to</font>

757
00:35:50,700 --> 00:35:59,009
make an<font color="#CCCCCC"> arbitrary favor image and it's</font>

758
00:35:55,619 --> 00:36:00,720
over there<font color="#CCCCCC"> and now I'm going</font><font color="#E5E5E5"> to flash</font>

759
00:35:59,010 --> 00:36:02,910
that<font color="#E5E5E5"> so this is the command for flashing</font>

760
00:36:00,720 --> 00:36:09,709
<font color="#E5E5E5">it HD parm yes I know what I'm doing</font>

761
00:36:02,910 --> 00:36:15,819
please destroy my<font color="#E5E5E5"> drive</font><font color="#CCCCCC"> how great</font>

762
00:36:09,710 --> 00:36:27,640
<font color="#E5E5E5">doesn't work</font><font color="#CCCCCC"> SDC yeah okay</font>

763
00:36:15,820 --> 00:36:39,609
[Applause]

764
00:36:27,640 --> 00:36:43,578
<font color="#E5E5E5">okay so now okay so now I'm going to</font>

765
00:36:39,609 --> 00:36:46,069
<font color="#E5E5E5">compile some code</font><font color="#CCCCCC"> recover our DES key</font>

766
00:36:43,579 --> 00:36:50,450
<font color="#E5E5E5">oh it's already there and then I'm going</font>

767
00:36:46,069 --> 00:36:54,589
<font color="#CCCCCC">to</font><font color="#E5E5E5"> use my tool tinker</font><font color="#CCCCCC"> in order to to</font>

768
00:36:50,450 --> 00:37:00,859
write that into<font color="#CCCCCC"> Ram of the drive</font><font color="#E5E5E5"> so by</font>

769
00:36:54,589 --> 00:37:07,819
the way<font color="#E5E5E5"> let's read out the RDS key</font><font color="#CCCCCC"> oh oh</font>

770
00:37:00,859 --> 00:37:13,369
wait<font color="#E5E5E5"> uh-huh yes do you</font><font color="#CCCCCC"> see this</font><font color="#E5E5E5"> thing is</font>

771
00:37:07,819 --> 00:37:16,490
zero<font color="#E5E5E5"> so it's not loaded and so then you</font>

772
00:37:13,369 --> 00:37:22,220
stinker to write this code<font color="#E5E5E5"> into</font><font color="#CCCCCC"> the</font>

773
00:37:16,490 --> 00:37:31,520
address<font color="#E5E5E5"> space then SDC yeah all right</font>

774
00:37:22,220 --> 00:37:36,439
successful okay<font color="#E5E5E5"> now run it in folk jump</font>

775
00:37:31,520 --> 00:37:42,600
successful and now<font color="#E5E5E5"> redraw it again</font><font color="#CCCCCC"> oh I</font>

776
00:37:36,440 --> 00:37:45,750
can<font color="#CCCCCC"> use this the RDS keys there okay so</font>

777
00:37:42,600 --> 00:37:48,868
[Applause]

778
00:37:45,750 --> 00:37:48,869
[Music]

779
00:37:49,040 --> 00:37:58,070
cryptographically<font color="#E5E5E5"> we won now though we</font>

780
00:37:53,420 --> 00:38:02,810
have to unlock the drive<font color="#E5E5E5"> so I'm going to</font>

781
00:37:58,070 --> 00:38:09,340
use<font color="#E5E5E5"> this just make a four byte 0 0 byte</font>

782
00:38:02,810 --> 00:38:09,340
file and then upload that to the drive

783
00:38:10,510 --> 00:38:17,030
do you see<font color="#CCCCCC"> okay and now I should be able</font>

784
00:38:14,000 --> 00:38:34,440
<font color="#CCCCCC">to</font><font color="#E5E5E5"> unlock this</font><font color="#CCCCCC"> thing with any password</font>

785
00:38:17,030 --> 00:38:41,590
<font color="#CCCCCC">oh you're right there we go</font>

786
00:38:34,440 --> 00:38:45,830
[Applause]

787
00:38:41,590 --> 00:38:47,400
[Music]

788
00:38:45,830 --> 00:38:51,130
[Applause]

789
00:38:47,400 --> 00:38:51,130
[Music]

790
00:38:51,509 --> 00:38:54,509
<font color="#E5E5E5">okay</font>

791
00:39:03,940 --> 00:39:11,150
that one's sort of<font color="#E5E5E5"> okay so they claim</font>

792
00:39:09,050 --> 00:39:14,510
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is the best-in-class hardware</font>

793
00:39:11,150 --> 00:39:17,300
encryption<font color="#CCCCCC"> yeah I'll leave</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> up to</font>

794
00:39:14,510 --> 00:39:19,220
you whether that's<font color="#E5E5E5"> true</font><font color="#CCCCCC"> so there's</font>

795
00:39:17,300 --> 00:39:20,960
there's also<font color="#CCCCCC"> they've also obviously</font>

796
00:39:19,220 --> 00:39:23,180
implement the<font color="#CCCCCC"> 80</font><font color="#E5E5E5"> a security feature set</font>

797
00:39:20,960 --> 00:39:26,180
<font color="#E5E5E5">and they it by default it</font><font color="#CCCCCC"> has an empty</font>

798
00:39:23,180 --> 00:39:27,950
<font color="#E5E5E5">master password so you need to change</font>

799
00:39:26,180 --> 00:39:30,950
<font color="#E5E5E5">that or set the master</font><font color="#CCCCCC"> password</font>

800
00:39:27,950 --> 00:39:34,279
capability set<font color="#CCCCCC"> to max as I as you know</font>

801
00:39:30,950 --> 00:39:36,529
so for<font color="#CCCCCC"> Amex</font><font color="#E5E5E5"> 300</font><font color="#CCCCCC"> its insufficient because</font>

802
00:39:34,280 --> 00:39:38,450
if you have<font color="#E5E5E5"> this custom firmware you you</font>

803
00:39:36,530 --> 00:39:40,490
can basically set that<font color="#CCCCCC"> variable in RAM</font>

804
00:39:38,450 --> 00:39:45,560
to 0 and then downgrade to high and

805
00:39:40,490 --> 00:39:49,040
unlock it<font color="#E5E5E5"> with an empty string</font><font color="#CCCCCC"> so I'm</font>

806
00:39:45,560 --> 00:39:51,170
not going to<font color="#E5E5E5"> demo that though so on with</font>

807
00:39:49,040 --> 00:39:53,120
<font color="#CCCCCC">the</font><font color="#E5E5E5"> Samsung 840 Evo it's actually the</font>

808
00:39:51,170 --> 00:39:55,460
first<font color="#CCCCCC"> samsung drive that supports the</font>

809
00:39:53,120 --> 00:39:58,160
teach gol standard<font color="#E5E5E5"> it's a tweak or</font>

810
00:39:55,460 --> 00:40:01,490
<font color="#E5E5E5">cortex all three for Omega L it's pretty</font>

811
00:39:58,160 --> 00:40:03,529
powerful<font color="#CCCCCC"> firmware updates are pushed</font>

812
00:40:01,490 --> 00:40:07,069
<font color="#CCCCCC">through magician or a bootable ISO image</font>

813
00:40:03,530 --> 00:40:09,980
<font color="#E5E5E5">and it's cryptographically signed and it</font>

814
00:40:07,070 --> 00:40:14,000
has a JW debugger so this is their

815
00:40:09,980 --> 00:40:15,590
scheme so bear with me<font color="#E5E5E5"> so on the left</font>

816
00:40:14,000 --> 00:40:18,650
you have a<font color="#E5E5E5"> password coming from the user</font>

817
00:40:15,590 --> 00:40:21,710
<font color="#E5E5E5">and actually they take some salt in some</font>

818
00:40:18,650 --> 00:40:24,290
table which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> crunching table</font><font color="#E5E5E5"> so</font>

819
00:40:21,710 --> 00:40:27,110
there's in total there's<font color="#CCCCCC"> 14 credentials</font>

820
00:40:24,290 --> 00:40:29,029
<font color="#E5E5E5">you can define 14 credentials and it</font>

821
00:40:27,110 --> 00:40:31,280
takes a password<font color="#CCCCCC"> takes the first salt</font>

822
00:40:29,030 --> 00:40:33,020
and then puts<font color="#E5E5E5"> that through keyed hash</font>

823
00:40:31,280 --> 00:40:35,270
and then you<font color="#E5E5E5"> get a hash you know and you</font>

824
00:40:33,020 --> 00:40:37,190
verify<font color="#CCCCCC"> that</font><font color="#E5E5E5"> hash and if it's if it</font>

825
00:40:35,270 --> 00:40:39,170
matches then you take the second salt

826
00:40:37,190 --> 00:40:41,420
with<font color="#CCCCCC"> the key and you get a key and that</font>

827
00:40:39,170 --> 00:40:45,380
key is used to decrypt an entry in a

828
00:40:41,420 --> 00:40:49,250
table<font color="#CCCCCC"> that tables</font><font color="#E5E5E5"> 14 times</font><font color="#CCCCCC"> 9 entries</font>

829
00:40:45,380 --> 00:40:51,350
wide<font color="#E5E5E5"> so for every 14 credentials</font><font color="#CCCCCC"> it has</font>

830
00:40:49,250 --> 00:40:54,380
an entry for<font color="#CCCCCC"> all the nine ranges that</font>

831
00:40:51,350 --> 00:40:56,360
<font color="#CCCCCC">are possible and it takes that one entry</font>

832
00:40:54,380 --> 00:40:58,640
and uses it to decrypt<font color="#E5E5E5"> that entry entry</font>

833
00:40:56,360 --> 00:41:01,490
<font color="#E5E5E5">and with that you get another key which</font>

834
00:40:58,640 --> 00:41:03,890
is then<font color="#CCCCCC"> used to decrypt</font><font color="#E5E5E5"> these lists did</font>

835
00:41:01,490 --> 00:41:07,339
an entry in this encrypted disk

836
00:41:03,890 --> 00:41:10,580
encryption key<font color="#E5E5E5"> tables so this is how you</font>

837
00:41:07,340 --> 00:41:14,510
probably implement<font color="#E5E5E5"> Oh pal so they</font>

838
00:41:10,580 --> 00:41:16,770
actually<font color="#E5E5E5"> use</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> 64 K</font><font color="#CCCCCC"> blob</font><font color="#E5E5E5"> in order to</font>

839
00:41:14,510 --> 00:41:19,440
store all of<font color="#E5E5E5"> this data</font>

840
00:41:16,770 --> 00:41:23,369
and then you get<font color="#E5E5E5"> all of the the proper</font>

841
00:41:19,440 --> 00:41:27,090
cryptographically enforced properties so

842
00:41:23,369 --> 00:41:30,930
congrats to<font color="#E5E5E5"> Samsung they did it</font><font color="#CCCCCC"> on the</font>

843
00:41:27,090 --> 00:41:33,240
88 security feature set though the<font color="#E5E5E5"> dek</font>

844
00:41:30,930 --> 00:41:34,980
only depends on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> password</font><font color="#E5E5E5"> in max mode</font>

845
00:41:33,240 --> 00:41:36,600
<font color="#E5E5E5">so if you use high mode</font>

846
00:41:34,980 --> 00:41:38,190
there's no cryptographic binding<font color="#CCCCCC"> they're</font>

847
00:41:36,600 --> 00:41:40,430
not there the password<font color="#E5E5E5"> and the key is</font>

848
00:41:38,190 --> 00:41:43,710
not<font color="#E5E5E5"> related at all so you can just</font>

849
00:41:40,430 --> 00:41:45,710
remove the password check and and do

850
00:41:43,710 --> 00:41:50,310
whatever you want

851
00:41:45,710 --> 00:41:53,640
so this<font color="#CCCCCC"> 64k bit blob is stored</font><font color="#E5E5E5"> somewhere</font>

852
00:41:50,310 --> 00:41:56,369
and it's actually<font color="#E5E5E5"> stored in where</font><font color="#CCCCCC"> left</font>

853
00:41:53,640 --> 00:41:58,859
<font color="#E5E5E5">of memory so you can just scan</font><font color="#CCCCCC"> through</font>

854
00:41:56,369 --> 00:42:01,350
the<font color="#CCCCCC"> NAND</font><font color="#E5E5E5"> and find an earlier copy of it</font>

855
00:41:58,860 --> 00:42:03,030
if you're lucky there's a plaintext key

856
00:42:01,350 --> 00:42:04,529
in there and you can<font color="#E5E5E5"> use that to</font><font color="#CCCCCC"> unlock</font>

857
00:42:03,030 --> 00:42:06,240
the drive and we actually<font color="#E5E5E5"> did</font><font color="#CCCCCC"> the same</font>

858
00:42:04,530 --> 00:42:09,000
<font color="#E5E5E5">practice although it's pretty unlikely</font>

859
00:42:06,240 --> 00:42:12,149
that you're gonna find<font color="#E5E5E5"> this but if you</font>

860
00:42:09,000 --> 00:42:15,150
find it then you're there<font color="#E5E5E5"> and it</font><font color="#CCCCCC"> effects</font>

861
00:42:12,150 --> 00:42:17,310
<font color="#CCCCCC">obviously both both opal and TCL</font><font color="#E5E5E5"> and</font>

862
00:42:15,150 --> 00:42:21,480
<font color="#CCCCCC">80's security because it's in the same</font>

863
00:42:17,310 --> 00:42:23,700
<font color="#E5E5E5">data structure so on with the 850</font><font color="#CCCCCC"> it's a</font>

864
00:42:21,480 --> 00:42:26,130
success to be a<font color="#E5E5E5"> 40 of course and it uses</font>

865
00:42:23,700 --> 00:42:28,169
<font color="#CCCCCC">a</font><font color="#E5E5E5"> new</font><font color="#CCCCCC"> go controller and different</font>

866
00:42:26,130 --> 00:42:30,119
firmware obfuscation routines but that's

867
00:42:28,170 --> 00:42:33,030
sophistication it's all done<font color="#E5E5E5"> it's all</font>

868
00:42:30,119 --> 00:42:34,680
undone<font color="#E5E5E5"> on the host PC but this one</font>

869
00:42:33,030 --> 00:42:35,970
supports deaf sleep and that the me that

870
00:42:34,680 --> 00:42:37,940
made it interesting because<font color="#E5E5E5"> we</font><font color="#CCCCCC"> wanna</font>

871
00:42:35,970 --> 00:42:41,939
<font color="#CCCCCC">take a look</font><font color="#E5E5E5"> at their sleep as well</font><font color="#CCCCCC"> and</font>

872
00:42:37,940 --> 00:42:44,850
<font color="#CCCCCC">8:40 didn't have that</font><font color="#E5E5E5"> everything is</font>

873
00:42:41,940 --> 00:42:46,740
pretty different<font color="#E5E5E5"> and they did why they</font>

874
00:42:44,850 --> 00:42:48,420
made<font color="#E5E5E5"> quite some changes except for the</font>

875
00:42:46,740 --> 00:42:50,580
crypto implementation that's built on

876
00:42:48,420 --> 00:42:53,670
the same implementation so it's

877
00:42:50,580 --> 00:42:56,359
basically all<font color="#CCCCCC"> of the same except for the</font>

878
00:42:53,670 --> 00:43:00,510
<font color="#E5E5E5">wear leveling issue they they fix that</font>

879
00:42:56,359 --> 00:43:02,520
so now the<font color="#CCCCCC"> t3</font><font color="#E5E5E5"> portable it's it's a</font>

880
00:43:00,510 --> 00:43:04,410
portable<font color="#E5E5E5"> drive</font><font color="#CCCCCC"> based</font><font color="#E5E5E5"> on the 850 it's</font>

881
00:43:02,520 --> 00:43:07,520
actually the exact same thing it's just

882
00:43:04,410 --> 00:43:10,200
<font color="#CCCCCC">with a USB SATA convertor in front of it</font>

883
00:43:07,520 --> 00:43:11,609
we're the t3 specific firmware<font color="#CCCCCC"> that you</font>

884
00:43:10,200 --> 00:43:14,790
can download<font color="#E5E5E5"> but you can pull it from</font>

885
00:43:11,609 --> 00:43:16,980
<font color="#CCCCCC">JTAG so it has a</font><font color="#E5E5E5"> proprietary security</font>

886
00:43:14,790 --> 00:43:21,090
command set so no ETA and no<font color="#CCCCCC"> Opel</font>

887
00:43:16,980 --> 00:43:24,900
proprietary stuff and aes-256 is a big

888
00:43:21,090 --> 00:43:27,119
part of its marketing<font color="#E5E5E5"> and so there's</font>

889
00:43:24,900 --> 00:43:29,490
this<font color="#CCCCCC"> configuration tool that they ship</font>

890
00:43:27,119 --> 00:43:31,680
it actually sports<font color="#E5E5E5"> Android I think it's</font>

891
00:43:29,490 --> 00:43:34,979
kind of cool if it if you properly

892
00:43:31,680 --> 00:43:36,899
secured your your data<font color="#CCCCCC"> this thing is</font>

893
00:43:34,980 --> 00:43:38,670
actually the implementation<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> D</font>

894
00:43:36,900 --> 00:43:40,619
<font color="#E5E5E5">secure these proprietary commands are</font>

895
00:43:38,670 --> 00:43:43,049
actually<font color="#E5E5E5"> based on the ATA security</font>

896
00:43:40,619 --> 00:43:45,599
implementation<font color="#E5E5E5"> with the the master</font>

897
00:43:43,049 --> 00:43:47,309
password<font color="#E5E5E5"> capability sets</font><font color="#CCCCCC"> a high so no</font>

898
00:43:45,599 --> 00:43:49,019
cryptographic binding whatsoever you

899
00:43:47,309 --> 00:43:54,029
just<font color="#CCCCCC"> can't you can</font><font color="#E5E5E5"> just remove the</font>

900
00:43:49,019 --> 00:43:59,629
<font color="#E5E5E5">password check so yeah hopefully going</font>

901
00:43:54,029 --> 00:43:59,630
to<font color="#E5E5E5"> them with this as well so VirtualBox</font>

902
00:44:02,470 --> 00:44:05,580
[Music]

903
00:44:22,700 --> 00:44:33,299
<font color="#E5E5E5">okay so access security enabled so yeah</font>

904
00:44:30,869 --> 00:44:37,469
if I go into<font color="#E5E5E5"> here</font><font color="#CCCCCC"> there as far</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> I know</font>

905
00:44:33,299 --> 00:44:43,670
<font color="#E5E5E5">this yeah this</font><font color="#CCCCCC"> thing's</font><font color="#E5E5E5"> connected yeah</font>

906
00:44:37,469 --> 00:44:47,759
it's not<font color="#E5E5E5"> there so if I took this yes</font>

907
00:44:43,670 --> 00:44:50,729
then security set to enabled<font color="#CCCCCC"> so if I now</font>

908
00:44:47,759 --> 00:44:52,410
<font color="#CCCCCC">want to disable security</font><font color="#E5E5E5"> I'm just going</font>

909
00:44:50,729 --> 00:44:55,879
to go for<font color="#E5E5E5"> an arbitrary password and</font>

910
00:44:52,410 --> 00:45:04,368
that's incorrect<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so far so</font><font color="#CCCCCC"> good</font>

911
00:44:55,880 --> 00:45:04,369
<font color="#CCCCCC">let's try something wait</font>

912
00:45:08,269 --> 00:45:17,629
of course I have a cheat sheet<font color="#CCCCCC"> there we</font>

913
00:45:13,950 --> 00:45:17,629
go<font color="#E5E5E5"> so this address</font>

914
00:45:17,930 --> 00:45:22,910
wait<font color="#E5E5E5"> no CT</font>

915
00:45:35,300 --> 00:45:39,150
<font color="#E5E5E5">okay</font>

916
00:45:36,480 --> 00:45:50,220
<font color="#E5E5E5">Gitex connected so now should be able to</font>

917
00:45:39,150 --> 00:45:59,250
<font color="#E5E5E5">do this hang on okay</font><font color="#CCCCCC"> so these are</font><font color="#E5E5E5"> the</font>

918
00:45:50,220 --> 00:46:01,020
<font color="#CCCCCC">course</font><font color="#E5E5E5"> can now help CPU dump registers</font>

919
00:45:59,250 --> 00:46:03,870
all of that it's<font color="#E5E5E5"> amazing</font>

920
00:46:01,020 --> 00:46:04,380
okay so let's<font color="#E5E5E5"> put a breakpoint at this</font>

921
00:46:03,870 --> 00:46:08,819
address

922
00:46:04,380 --> 00:46:11,900
so<font color="#E5E5E5"> two</font><font color="#CCCCCC"> Hardware resume</font><font color="#E5E5E5"> okay</font>

923
00:46:08,820 --> 00:46:16,580
so now if I enter an arbitrary password

924
00:46:11,900 --> 00:46:25,410
it will stumble upon that<font color="#E5E5E5"> breakpoint and</font>

925
00:46:16,580 --> 00:46:34,680
oh wait so I will now remove<font color="#E5E5E5"> that</font><font color="#CCCCCC"> drape</font>

926
00:46:25,410 --> 00:46:37,620
that check now so you remove the

927
00:46:34,680 --> 00:46:37,980
breakpoint and then resume and there we

928
00:46:37,620 --> 00:46:39,980
go

929
00:46:37,980 --> 00:46:45,120
security disabled

930
00:46:39,980 --> 00:46:49,330
[Applause]

931
00:46:45,120 --> 00:46:50,990
[Music]

932
00:46:49,330 --> 00:46:55,100
[Applause]

933
00:46:50,990 --> 00:46:55,100
[Music]

934
00:46:58,480 --> 00:47:02,470
so yeah that<font color="#E5E5E5"> works</font>

935
00:47:04,329 --> 00:47:13,630
<font color="#E5E5E5">okay so apparently this</font><font color="#CCCCCC"> thing is tough</font>

936
00:47:09,950 --> 00:47:16,250
to crack so some some very impressive

937
00:47:13,630 --> 00:47:19,060
<font color="#CCCCCC">shock resistant exterior this thing has</font>

938
00:47:16,250 --> 00:47:22,910
and of course<font color="#CCCCCC"> hardware is</font><font color="#E5E5E5"> 256</font><font color="#CCCCCC"> encryption</font>

939
00:47:19,060 --> 00:47:28,730
<font color="#E5E5E5">so yeah</font><font color="#CCCCCC"> I hope the exterior does a</font>

940
00:47:22,910 --> 00:47:31,339
<font color="#E5E5E5">better</font><font color="#CCCCCC"> job so on with the t5 it's</font>

941
00:47:28,730 --> 00:47:34,280
basically a t3 with<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> actually with a</font>

942
00:47:31,339 --> 00:47:37,759
different<font color="#CCCCCC"> converter so rather than USB</font>

943
00:47:34,280 --> 00:47:39,500
3.1 gen2 on it supports<font color="#CCCCCC"> Gen</font><font color="#E5E5E5"> 2 but</font>

944
00:47:37,760 --> 00:47:41,599
actually the hard way behind it<font color="#CCCCCC"> it's</font>

945
00:47:39,500 --> 00:47:43,310
pretty<font color="#CCCCCC"> similar so it's equally</font>

946
00:47:41,599 --> 00:47:46,190
vulnerable<font color="#CCCCCC"> they just</font><font color="#E5E5E5"> switched off the</font>

947
00:47:43,310 --> 00:47:50,390
JTAG so it's<font color="#E5E5E5"> just harder to exploit so</font>

948
00:47:46,190 --> 00:47:52,220
the same thing<font color="#CCCCCC"> in conclusion so most of</font>

949
00:47:50,390 --> 00:47:55,040
these self encrypting drives have some

950
00:47:52,220 --> 00:47:56,810
severe weaknesses<font color="#CCCCCC"> best-case</font><font color="#E5E5E5"> scenario</font>

951
00:47:55,040 --> 00:47:59,270
<font color="#CCCCCC">it's going to be it's going to</font><font color="#E5E5E5"> be</font>

952
00:47:56,810 --> 00:48:02,410
equivalent<font color="#E5E5E5"> to software not better</font><font color="#CCCCCC"> and</font>

953
00:47:59,270 --> 00:48:06,670
worst<font color="#E5E5E5"> case it's it's all down the</font><font color="#CCCCCC"> drain</font>

954
00:48:02,410 --> 00:48:09,710
<font color="#E5E5E5">so on a further note teach the old pals</font>

955
00:48:06,670 --> 00:48:13,760
<font color="#CCCCCC">terrible</font><font color="#E5E5E5"> so so</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> act is really</font>

956
00:48:09,710 --> 00:48:15,730
<font color="#CCCCCC">over-engineered</font><font color="#E5E5E5"> and they they had all of</font>

957
00:48:13,760 --> 00:48:18,410
<font color="#E5E5E5">these kinds of</font><font color="#CCCCCC"> features that</font><font color="#E5E5E5"> nobody uses</font>

958
00:48:15,730 --> 00:48:21,349
<font color="#E5E5E5">security goals are not clear like what</font>

959
00:48:18,410 --> 00:48:22,700
what's the benefit and<font color="#E5E5E5"> there's no</font>

960
00:48:21,349 --> 00:48:25,339
reference implementation<font color="#E5E5E5"> of this thing</font>

961
00:48:22,700 --> 00:48:28,160
and implementation is<font color="#CCCCCC"> not even</font><font color="#E5E5E5"> part of</font>

962
00:48:25,339 --> 00:48:30,740
its compliance<font color="#E5E5E5"> test whatsoever so yeah</font>

963
00:48:28,160 --> 00:48:33,410
<font color="#E5E5E5">there's structural</font><font color="#CCCCCC"> changes needed</font><font color="#E5E5E5"> so</font>

964
00:48:30,740 --> 00:48:34,609
with that<font color="#E5E5E5"> if you have any questions I'm</font>

965
00:48:33,410 --> 00:48:38,178
happy to take<font color="#E5E5E5"> them</font>

966
00:48:34,610 --> 00:48:38,179
[Applause]

967
00:48:40,840 --> 00:48:44,199
[Music]

968
00:48:50,550 --> 00:48:54,640
<font color="#E5E5E5">okay we have microphones in</font><font color="#CCCCCC"> the hall</font>

969
00:48:53,140 --> 00:48:56,230
here please line up behind<font color="#E5E5E5"> the</font>

970
00:48:54,640 --> 00:48:58,299
<font color="#CCCCCC">microphones if</font><font color="#E5E5E5"> you have any questions</font>

971
00:48:56,230 --> 00:49:01,030
and<font color="#E5E5E5"> keep your question to</font><font color="#CCCCCC"> one sentence</font>

972
00:48:58,300 --> 00:49:03,300
and for all<font color="#E5E5E5"> of you to spare you</font><font color="#CCCCCC"> there</font>

973
00:49:01,030 --> 00:49:05,530
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much for the</font><font color="#CCCCCC"> sexy</font><font color="#E5E5E5"> talk</font>

974
00:49:03,300 --> 00:49:10,230
<font color="#CCCCCC">we'll</font><font color="#E5E5E5"> start with</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> signal angel</font>

975
00:49:05,530 --> 00:49:10,230
<font color="#E5E5E5">referring questions from the internet</font>

976
00:49:16,420 --> 00:49:25,460
so do<font color="#CCCCCC"> I are familiar issues and it's 508</font>

977
00:49:22,040 --> 00:49:27,619
<font color="#CCCCCC">is</font><font color="#E5E5E5"> crucial tries one can try</font><font color="#CCCCCC"> today the</font>

978
00:49:25,460 --> 00:49:30,830
<font color="#E5E5E5">MX 500 in particular</font><font color="#CCCCCC"> I didn't take a</font>

979
00:49:27,619 --> 00:49:34,610
look at it<font color="#E5E5E5"> because</font><font color="#CCCCCC"> actually the MX 100</font>

980
00:49:30,830 --> 00:49:36,830
200<font color="#CCCCCC"> and 300 they they use some</font><font color="#E5E5E5"> Marvel</font>

981
00:49:34,610 --> 00:49:38,750
controller and the AMEX 500<font color="#CCCCCC"> it's from a</font>

982
00:49:36,830 --> 00:49:41,299
different manufacturer and it's not<font color="#E5E5E5"> even</font>

983
00:49:38,750 --> 00:49:43,460
based on<font color="#E5E5E5"> arm and so it's really annoying</font>

984
00:49:41,300 --> 00:49:46,030
<font color="#CCCCCC">for me to</font><font color="#E5E5E5"> reverse and so therefore I</font>

985
00:49:43,460 --> 00:49:46,030
left it at that

986
00:49:48,040 --> 00:49:55,190
great talk can I ask you if<font color="#E5E5E5"> that</font>

987
00:49:52,150 --> 00:49:57,590
<font color="#E5E5E5">hardware encryption can be disabled for</font>

988
00:49:55,190 --> 00:49:59,869
<font color="#E5E5E5">BitLocker and what if I don't use</font>

989
00:49:57,590 --> 00:50:03,160
BitLocker use another software<font color="#E5E5E5"> or</font>

990
00:49:59,869 --> 00:50:06,710
another operating<font color="#E5E5E5"> system</font><font color="#CCCCCC"> does it use</font>

991
00:50:03,160 --> 00:50:08,390
<font color="#E5E5E5">encryption so with BitLocker</font>

992
00:50:06,710 --> 00:50:11,840
so the question was can<font color="#CCCCCC"> I disable the</font>

993
00:50:08,390 --> 00:50:16,029
the the BitLocker encryption<font color="#CCCCCC"> dedicating</font>

994
00:50:11,840 --> 00:50:18,050
it to<font color="#CCCCCC"> the drive</font><font color="#E5E5E5"> and how is</font><font color="#CCCCCC"> it this</font><font color="#E5E5E5"> thing</font>

995
00:50:16,030 --> 00:50:20,119
<font color="#E5E5E5">what's happening with other operating</font>

996
00:50:18,050 --> 00:50:21,619
systems so BitLocker can be you<font color="#E5E5E5"> can</font>

997
00:50:20,119 --> 00:50:23,770
actually<font color="#E5E5E5"> tell BitLocker not to use this</font>

998
00:50:21,619 --> 00:50:26,980
you<font color="#E5E5E5"> can change some group policy setting</font>

999
00:50:23,770 --> 00:50:29,900
<font color="#E5E5E5">there's an advisory</font><font color="#CCCCCC"> set</font><font color="#E5E5E5"> up by Microsoft</font>

1000
00:50:26,980 --> 00:50:31,430
<font color="#E5E5E5">that tells you how to do this and with</font>

1001
00:50:29,900 --> 00:50:34,400
other operating systems they basically

1002
00:50:31,430 --> 00:50:37,759
don't<font color="#CCCCCC"> do</font><font color="#E5E5E5"> this so so if you use like</font>

1003
00:50:34,400 --> 00:50:40,869
Linux or Mac<font color="#CCCCCC"> OS X file</font><font color="#E5E5E5"> vault</font><font color="#CCCCCC"> it doesn't</font>

1004
00:50:37,760 --> 00:50:44,540
matter<font color="#E5E5E5"> so particularly with BitLocker</font>

1005
00:50:40,869 --> 00:50:46,190
<font color="#E5E5E5">yeah they basically BitLocker is the</font>

1006
00:50:44,540 --> 00:50:48,619
only<font color="#E5E5E5"> thing that does is except if you</font>

1007
00:50:46,190 --> 00:50:53,720
use it to all that<font color="#E5E5E5"> advertisers like hey</font>

1008
00:50:48,619 --> 00:50:57,500
we're using the hardware crypto what

1009
00:50:53,720 --> 00:51:00,529
about the<font color="#E5E5E5"> newest versions like 960 and</font>

1010
00:50:57,500 --> 00:51:03,410
860<font color="#E5E5E5"> I haven't taken a</font><font color="#CCCCCC"> look at</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> so</font>

1011
00:51:00,530 --> 00:51:06,920
actually<font color="#CCCCCC"> I've taken a</font><font color="#E5E5E5"> look at the 950</font>

1012
00:51:03,410 --> 00:51:10,160
and it's<font color="#E5E5E5"> pretty similar to the 850 the</font>

1013
00:51:06,920 --> 00:51:12,230
point is so they didn't screw up<font color="#CCCCCC"> Oh pal</font>

1014
00:51:10,160 --> 00:51:15,470
<font color="#E5E5E5">they screwed up 80 a security and with</font>

1015
00:51:12,230 --> 00:51:18,590
the 950 that the 950 is an nvme<font color="#CCCCCC"> drive</font>

1016
00:51:15,470 --> 00:51:20,720
right so but they still support 80<font color="#E5E5E5"> a</font>

1017
00:51:18,590 --> 00:51:22,790
security and nobody in their right<font color="#CCCCCC"> mind</font>

1018
00:51:20,720 --> 00:51:25,759
would use that but they support<font color="#E5E5E5"> it</font><font color="#CCCCCC"> and</font>

1019
00:51:22,790 --> 00:51:26,880
you can<font color="#CCCCCC"> actually use it so but I don't</font>

1020
00:51:25,760 --> 00:51:29,250
<font color="#CCCCCC">think it's it's</font><font color="#E5E5E5"> a</font>

1021
00:51:26,880 --> 00:51:31,019
<font color="#E5E5E5">really interesting</font><font color="#CCCCCC"> to look</font><font color="#E5E5E5"> at all of</font>

1022
00:51:29,250 --> 00:51:33,299
<font color="#E5E5E5">these</font><font color="#CCCCCC"> Samsung drives like we're</font><font color="#E5E5E5"> trying</font>

1023
00:51:31,019 --> 00:51:35,250
<font color="#E5E5E5">to make a scientific approach here so</font>

1024
00:51:33,299 --> 00:51:37,559
we're taking a<font color="#E5E5E5"> couple of samples we</font>

1025
00:51:35,250 --> 00:51:39,390
don't want to take too much<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these</font>

1026
00:51:37,559 --> 00:51:41,339
convenient samples like okay this<font color="#E5E5E5"> is</font>

1027
00:51:39,390 --> 00:51:43,140
probably<font color="#E5E5E5"> similar to that and</font><font color="#CCCCCC"> therefore</font>

1028
00:51:41,339 --> 00:51:45,690
it's just another driver<font color="#E5E5E5"> that we can add</font>

1029
00:51:43,140 --> 00:51:48,990
to<font color="#CCCCCC"> our collection</font><font color="#E5E5E5"> we want to make it a</font>

1030
00:51:45,690 --> 00:51:52,440
bit more more broad<font color="#CCCCCC"> so we want to make</font>

1031
00:51:48,990 --> 00:51:54,140
the sample<font color="#CCCCCC"> that we have</font><font color="#E5E5E5"> as accurate as</font>

1032
00:51:52,440 --> 00:51:58,170
possible

1033
00:51:54,140 --> 00:52:01,680
<font color="#CCCCCC">microphone optics how hard would it be</font>

1034
00:51:58,170 --> 00:52:05,880
to implement<font color="#CCCCCC"> security on self encrypting</font>

1035
00:52:01,680 --> 00:52:08,879
<font color="#E5E5E5">drives correctly and is it</font><font color="#CCCCCC"> reasonable</font>

1036
00:52:05,880 --> 00:52:14,940
that that could<font color="#CCCCCC"> be</font><font color="#E5E5E5"> done in</font><font color="#CCCCCC"> an open</font>

1037
00:52:08,880 --> 00:52:17,490
source<font color="#E5E5E5"> I mean there</font><font color="#CCCCCC"> are efforts</font><font color="#E5E5E5"> for open</font>

1038
00:52:14,940 --> 00:52:21,509
source<font color="#E5E5E5"> firmware on these drives</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> they</font>

1039
00:52:17,490 --> 00:52:24,689
didn't get far<font color="#CCCCCC"> as of yet</font><font color="#E5E5E5"> so yet I mean</font>

1040
00:52:21,509 --> 00:52:27,779
you probably<font color="#E5E5E5"> want</font><font color="#CCCCCC"> that and but then if I</font>

1041
00:52:24,690 --> 00:52:29,549
made like why would<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want self</font>

1042
00:52:27,779 --> 00:52:31,650
encrypting drives like they're not in

1043
00:52:29,549 --> 00:52:33,990
any way better just<font color="#E5E5E5"> use software</font>

1044
00:52:31,650 --> 00:52:35,819
encryption<font color="#CCCCCC"> it's fine and</font><font color="#E5E5E5"> like even for</font>

1045
00:52:33,990 --> 00:52:37,979
performance<font color="#E5E5E5"> you have these AES</font>

1046
00:52:35,819 --> 00:52:41,299
instructions that everyone has now so

1047
00:52:37,980 --> 00:52:45,089
for performance<font color="#E5E5E5"> it's it's negligible so</font>

1048
00:52:41,299 --> 00:52:47,038
you can you can<font color="#CCCCCC"> do this properly Samsung</font>

1049
00:52:45,089 --> 00:52:49,799
<font color="#E5E5E5">did this with</font><font color="#CCCCCC"> opal as far</font><font color="#E5E5E5"> as I know</font>

1050
00:52:47,039 --> 00:52:51,980
because<font color="#CCCCCC"> like if</font><font color="#E5E5E5"> I am I'm not a wizard</font><font color="#CCCCCC"> I</font>

1051
00:52:49,799 --> 00:52:55,319
don't know everything

1052
00:52:51,980 --> 00:52:59,759
so yeah you<font color="#E5E5E5"> probably could implement</font>

1053
00:52:55,319 --> 00:53:03,079
<font color="#E5E5E5">this correctly but even if you did then</font>

1054
00:52:59,759 --> 00:53:05,789
it doesn't give you any<font color="#E5E5E5"> benefit</font>

1055
00:53:03,079 --> 00:53:08,309
microphone<font color="#CCCCCC"> number two please</font><font color="#E5E5E5"> thanks for</font>

1056
00:53:05,789 --> 00:53:10,380
your research<font color="#CCCCCC"> what about your</font>

1057
00:53:08,309 --> 00:53:13,529
<font color="#E5E5E5">communication with vendors</font><font color="#CCCCCC"> did you do</font>

1058
00:53:10,380 --> 00:53:15,779
responsible disclosure<font color="#CCCCCC"> yes in April we</font>

1059
00:53:13,529 --> 00:53:18,450
actually<font color="#CCCCCC"> gather</font><font color="#E5E5E5"> together</font><font color="#CCCCCC"> with Samsung</font>

1060
00:53:15,779 --> 00:53:20,039
<font color="#E5E5E5">and so we set</font><font color="#CCCCCC"> up a meeting and we</font>

1061
00:53:18,450 --> 00:53:23,689
actually demonstrated all this stuff and

1062
00:53:20,039 --> 00:53:27,900
then so they<font color="#E5E5E5"> they</font><font color="#CCCCCC"> were</font><font color="#E5E5E5"> really kind to us</font>

1063
00:53:23,690 --> 00:53:28,559
so and<font color="#CCCCCC"> also we contacted crucial for</font>

1064
00:53:27,900 --> 00:53:31,559
this

1065
00:53:28,559 --> 00:53:33,390
it's<font color="#E5E5E5"> just that yeah basically they</font>

1066
00:53:31,559 --> 00:53:35,309
responded they obviously they<font color="#E5E5E5"> weren't</font>

1067
00:53:33,390 --> 00:53:36,990
happy<font color="#E5E5E5"> with what we found but</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> they</font>

1068
00:53:35,309 --> 00:53:39,839
were very<font color="#CCCCCC"> happy the way we reported it</font>

1069
00:53:36,990 --> 00:53:40,660
so yeah I mean I don't<font color="#E5E5E5"> know what what</font>

1070
00:53:39,839 --> 00:53:43,660
<font color="#E5E5E5">can I say</font>

1071
00:53:40,660 --> 00:53:46,750
it's a responsible disclosure<font color="#CCCCCC"> Thanks</font>

1072
00:53:43,660 --> 00:53:49,750
number four<font color="#E5E5E5"> please I thanks for a great</font>

1073
00:53:46,750 --> 00:53:52,740
talk<font color="#CCCCCC"> my question would be did you happen</font>

1074
00:53:49,750 --> 00:53:56,710
to take<font color="#E5E5E5"> a look at</font><font color="#CCCCCC"> mdme drives and if yes</font>

1075
00:53:52,740 --> 00:53:58,930
<font color="#E5E5E5">did things improve on that front</font><font color="#CCCCCC"> so as I</font>

1076
00:53:56,710 --> 00:54:01,450
<font color="#E5E5E5">said before we did take a look at the</font>

1077
00:53:58,930 --> 00:54:03,339
950<font color="#CCCCCC"> so that's a</font><font color="#E5E5E5"> Samsung nvme drive and</font>

1078
00:54:01,450 --> 00:54:05,529
it's basically the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> thing just we</font>

1079
00:54:03,340 --> 00:54:07,210
didn't<font color="#E5E5E5"> added nvme</font><font color="#CCCCCC"> sauce</font><font color="#E5E5E5"> so the core of</font>

1080
00:54:05,530 --> 00:54:09,930
the implementation<font color="#CCCCCC"> of everything is</font><font color="#E5E5E5"> the</font>

1081
00:54:07,210 --> 00:54:12,670
same<font color="#E5E5E5"> just the interface</font><font color="#CCCCCC"> has changed</font><font color="#E5E5E5"> so</font>

1082
00:54:09,930 --> 00:54:14,710
but we did<font color="#E5E5E5"> it included in our</font><font color="#CCCCCC"> final</font>

1083
00:54:12,670 --> 00:54:16,840
research report because that's that's

1084
00:54:14,710 --> 00:54:18,580
basically we're not<font color="#E5E5E5"> trying to</font>

1085
00:54:16,840 --> 00:54:22,380
cherry-pick drives that<font color="#E5E5E5"> are likely for</font>

1086
00:54:18,580 --> 00:54:25,210
<font color="#E5E5E5">honorable whatsoever so number one</font><font color="#CCCCCC"> is</font>

1087
00:54:22,380 --> 00:54:27,400
<font color="#CCCCCC">how</font><font color="#E5E5E5"> common are firmer updates for this</font>

1088
00:54:25,210 --> 00:54:29,530
class of devices<font color="#E5E5E5"> are they distributed by</font>

1089
00:54:27,400 --> 00:54:32,590
<font color="#E5E5E5">Windows updates or similar measures or</font>

1090
00:54:29,530 --> 00:54:36,670
are they<font color="#CCCCCC"> only available if</font><font color="#E5E5E5"> you install</font>

1091
00:54:32,590 --> 00:54:39,190
<font color="#E5E5E5">them manually so for for Samsung you</font>

1092
00:54:36,670 --> 00:54:42,190
have this tool called<font color="#E5E5E5"> magician</font><font color="#CCCCCC"> that</font>

1093
00:54:39,190 --> 00:54:44,070
checks for<font color="#E5E5E5"> firmware updates</font><font color="#CCCCCC"> definitely</font>

1094
00:54:42,190 --> 00:54:47,200
not through<font color="#CCCCCC"> Windows Update though so</font>

1095
00:54:44,070 --> 00:54:50,050
<font color="#E5E5E5">yeah I think I</font><font color="#CCCCCC"> think like it depends on</font>

1096
00:54:47,200 --> 00:54:52,000
your manufacturer but all of them do

1097
00:54:50,050 --> 00:54:54,040
offer some some<font color="#E5E5E5"> kind of centralized</font>

1098
00:54:52,000 --> 00:54:56,500
distribution platform for firmware

1099
00:54:54,040 --> 00:54:58,210
<font color="#E5E5E5">images but if you don't run Windows then</font>

1100
00:54:56,500 --> 00:55:01,360
you're basically<font color="#CCCCCC"> on your own you have</font><font color="#E5E5E5"> to</font>

1101
00:54:58,210 --> 00:55:07,300
<font color="#CCCCCC">download</font><font color="#E5E5E5"> them from the website number</font>

1102
00:55:01,360 --> 00:55:09,640
two please hi almost<font color="#CCCCCC"> as these there is a</font>

1103
00:55:07,300 --> 00:55:12,040
function<font color="#CCCCCC"> to calmly completely</font><font color="#E5E5E5"> wipe the</font>

1104
00:55:09,640 --> 00:55:14,799
drive by removing the key<font color="#E5E5E5"> have you</font>

1105
00:55:12,040 --> 00:55:18,009
looked into<font color="#E5E5E5"> this case and have you tried</font>

1106
00:55:14,800 --> 00:55:21,780
to recover the<font color="#CCCCCC"> data</font><font color="#E5E5E5"> after wiping the</font>

1107
00:55:18,010 --> 00:55:25,390
drive well not not deeply enough<font color="#CCCCCC"> I'd say</font>

1108
00:55:21,780 --> 00:55:27,130
<font color="#E5E5E5">well of course we did look at at some of</font>

1109
00:55:25,390 --> 00:55:29,520
these implementations like<font color="#E5E5E5"> is the key</font>

1110
00:55:27,130 --> 00:55:32,440
actually written<font color="#E5E5E5"> with random data and</font>

1111
00:55:29,520 --> 00:55:35,770
where does<font color="#CCCCCC"> that data come from so yeah</font>

1112
00:55:32,440 --> 00:55:37,150
yeah we<font color="#E5E5E5"> did that but like like for</font>

1113
00:55:35,770 --> 00:55:40,150
<font color="#E5E5E5">example</font><font color="#CCCCCC"> if there's</font><font color="#E5E5E5"> we're leveling you</font>

1114
00:55:37,150 --> 00:55:42,730
can probably still get the key out<font color="#CCCCCC"> but</font>

1115
00:55:40,150 --> 00:55:46,720
then again<font color="#E5E5E5"> all the tables like</font><font color="#CCCCCC"> probably</font>

1116
00:55:42,730 --> 00:55:48,790
the the<font color="#E5E5E5"> dfdl so the the the the</font><font color="#CCCCCC"> physical</font>

1117
00:55:46,720 --> 00:55:50,980
<font color="#CCCCCC">to</font><font color="#E5E5E5"> logical mapping tables probably</font>

1118
00:55:48,790 --> 00:55:52,930
destroyed and you get all that that kind

1119
00:55:50,980 --> 00:55:54,190
<font color="#E5E5E5">of stuff so it will be really hard</font><font color="#CCCCCC"> to</font>

1120
00:55:52,930 --> 00:55:57,580
recover data from<font color="#CCCCCC"> this thing</font>

1121
00:55:54,190 --> 00:56:03,430
even if you had<font color="#E5E5E5"> the key again microphone</font>

1122
00:55:57,580 --> 00:56:06,970
<font color="#CCCCCC">to please</font><font color="#E5E5E5"> yeah thanks for your clear yet</font>

1123
00:56:03,430 --> 00:56:11,140
<font color="#CCCCCC">a kind</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> radical statement about self</font>

1124
00:56:06,970 --> 00:56:14,470
encrypting drives I'm wondering working

1125
00:56:11,140 --> 00:56:17,009
in an Research Institute were<font color="#E5E5E5"> I find</font>

1126
00:56:14,470 --> 00:56:20,859
more<font color="#CCCCCC"> and more</font><font color="#E5E5E5"> people going to</font><font color="#CCCCCC"> use or</font>

1127
00:56:17,010 --> 00:56:23,830
demand<font color="#E5E5E5"> these self encrypting drives for</font>

1128
00:56:20,860 --> 00:56:25,840
<font color="#E5E5E5">as they say practical reasons of data</font>

1129
00:56:23,830 --> 00:56:29,310
<font color="#E5E5E5">protection while working in</font><font color="#CCCCCC"> the field</font>

1130
00:56:25,840 --> 00:56:34,120
and<font color="#E5E5E5"> now I have learned just now that it</font>

1131
00:56:29,310 --> 00:56:37,960
<font color="#E5E5E5">software encryption is superior what do</font>

1132
00:56:34,120 --> 00:56:42,250
you recommend<font color="#E5E5E5"> in a practical usage</font>

1133
00:56:37,960 --> 00:56:45,490
scenario for the three<font color="#E5E5E5"> ecosystems Linux</font>

1134
00:56:42,250 --> 00:56:47,800
<font color="#CCCCCC">Windows as a software</font><font color="#E5E5E5"> and a solution</font>

1135
00:56:45,490 --> 00:56:48,729
<font color="#CCCCCC">that is definitely superior to</font><font color="#E5E5E5"> surfing</font>

1136
00:56:47,800 --> 00:56:54,070
cryptic drives

1137
00:56:48,730 --> 00:56:56,940
I'd say<font color="#CCCCCC"> veracrypt ok thank</font><font color="#E5E5E5"> you are there</font>

1138
00:56:54,070 --> 00:56:56,940
<font color="#CCCCCC">any more</font><font color="#E5E5E5"> questions</font>

1139
00:56:57,590 --> 00:57:06,030
[Applause]

1140
00:57:03,610 --> 00:57:08,500
no more questions from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> internet oh</font>

1141
00:57:06,030 --> 00:57:11,770
we have<font color="#E5E5E5"> one question for at microphone</font>

1142
00:57:08,500 --> 00:57:13,770
<font color="#CCCCCC">number two yeah thanks for</font><font color="#E5E5E5"> your research</font>

1143
00:57:11,770 --> 00:57:16,030
you said you actually<font color="#E5E5E5"> disclose these</font>

1144
00:57:13,770 --> 00:57:18,100
problems to the vendors did they

1145
00:57:16,030 --> 00:57:21,220
<font color="#CCCCCC">actually fix it</font>

1146
00:57:18,100 --> 00:57:24,069
so actually Samsung really released a

1147
00:57:21,220 --> 00:57:25,959
statement and basically<font color="#E5E5E5"> saying if you're</font>

1148
00:57:24,070 --> 00:57:27,610
using an internal drive<font color="#E5E5E5"> and you're</font>

1149
00:57:25,960 --> 00:57:31,050
dependent on<font color="#E5E5E5"> the hardware encryption</font>

1150
00:57:27,610 --> 00:57:33,490
<font color="#E5E5E5">please switch</font><font color="#CCCCCC"> to software which is I</font>

1151
00:57:31,050 --> 00:57:36,460
think it's kind<font color="#E5E5E5"> of radical because I</font>

1152
00:57:33,490 --> 00:57:40,060
think<font color="#E5E5E5"> as far as I have seen the open</font>

1153
00:57:36,460 --> 00:57:42,730
instrumentation is solid<font color="#E5E5E5"> for crucial</font>

1154
00:57:40,060 --> 00:57:45,430
they basically told everybody<font color="#E5E5E5"> yeah we</font>

1155
00:57:42,730 --> 00:57:47,500
released firmware updates<font color="#CCCCCC"> I haven't</font>

1156
00:57:45,430 --> 00:57:49,690
looked<font color="#CCCCCC"> into the MX 300 firmware update</font>

1157
00:57:47,500 --> 00:57:51,640
but for the MX 100 and 200<font color="#E5E5E5"> they</font>

1158
00:57:49,690 --> 00:57:54,010
basically<font color="#E5E5E5"> just switch off the JTAG and</font>

1159
00:57:51,640 --> 00:57:56,830
remove some<font color="#E5E5E5"> vendor commands that</font><font color="#CCCCCC"> allow</font>

1160
00:57:54,010 --> 00:57:59,170
for<font color="#E5E5E5"> the arbitrary</font><font color="#CCCCCC"> write and and</font><font color="#E5E5E5"> also</font>

1161
00:57:56,830 --> 00:58:01,690
<font color="#E5E5E5">obviously not make it able to downgrade</font>

1162
00:57:59,170 --> 00:58:03,250
<font color="#CCCCCC">but if you find some alternative</font><font color="#E5E5E5"> means</font>

1163
00:58:01,690 --> 00:58:07,540
<font color="#CCCCCC">to get code execution on this thing</font>

1164
00:58:03,250 --> 00:58:09,490
you're back on in the<font color="#E5E5E5"> same boat</font><font color="#CCCCCC"> I think</font>

1165
00:58:07,540 --> 00:58:10,759
<font color="#CCCCCC">we're all out of time</font><font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very</font>

1166
00:58:09,490 --> 00:58:16,279
much Oscar<font color="#E5E5E5"> Mayer</font>

1167
00:58:10,760 --> 00:58:29,690
[Applause]

1168
00:58:16,280 --> 00:58:29,690
[Music]

1169
00:58:31,760 --> 00:58:44,420
[Music]

