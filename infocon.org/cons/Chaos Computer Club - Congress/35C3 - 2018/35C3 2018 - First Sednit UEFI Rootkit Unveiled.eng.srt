1
00:00:02,830 --> 00:00:15,470
[Music]

2
00:00:17,510 --> 00:00:22,590
okay so our next<font color="#E5E5E5"> talk is given by</font>

3
00:00:20,760 --> 00:00:34,230
<font color="#CCCCCC">Frederick</font><font color="#E5E5E5"> Vishal</font><font color="#CCCCCC"> so please give him a</font>

4
00:00:22,590 --> 00:00:37,950
warm<font color="#E5E5E5"> round of applause okay</font>

5
00:00:34,230 --> 00:00:40,230
so hello<font color="#E5E5E5"> everyone</font><font color="#CCCCCC"> thank you for having</font>

6
00:00:37,950 --> 00:00:43,290
me today I'm really<font color="#E5E5E5"> happy to be</font><font color="#CCCCCC"> to be</font>

7
00:00:40,230 --> 00:00:45,809
here<font color="#CCCCCC"> so today I'm gonna talk about</font><font color="#E5E5E5"> a</font>

8
00:00:43,290 --> 00:00:48,809
research that a<font color="#E5E5E5"> colleague of mine</font>

9
00:00:45,809 --> 00:00:51,709
<font color="#E5E5E5">Ryan buta and I did earlier this year</font>

10
00:00:48,809 --> 00:00:55,410
and which led us<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the discovery of a</font>

11
00:00:51,710 --> 00:00:57,239
UEFI rootkit so very quickly

12
00:00:55,410 --> 00:01:00,989
my name is Frederick<font color="#CCCCCC"> vassal I'm a</font>

13
00:00:57,239 --> 00:01:01,530
malware researcher at ESET and<font color="#CCCCCC"> I've been</font>

14
00:01:00,989 --> 00:01:03,409
<font color="#E5E5E5">over yet</font>

15
00:01:01,530 --> 00:01:06,210
working there for the<font color="#E5E5E5"> last two years</font><font color="#CCCCCC"> and</font>

16
00:01:03,409 --> 00:01:10,260
for the<font color="#CCCCCC"> last year or so I've been really</font>

17
00:01:06,210 --> 00:01:13,798
<font color="#CCCCCC">focused focusing on</font><font color="#E5E5E5"> boot level threats</font>

18
00:01:10,260 --> 00:01:15,409
and UEFI for more reverse engineering<font color="#E5E5E5"> so</font>

19
00:01:13,799 --> 00:01:17,490
let's look at the<font color="#CCCCCC"> agenda for this talk</font>

20
00:01:15,409 --> 00:01:20,450
<font color="#CCCCCC">so the first thing I want to</font><font color="#E5E5E5"> talk about</font>

21
00:01:17,490 --> 00:01:23,490
is what<font color="#CCCCCC"> is setting it very</font><font color="#E5E5E5"> very quickly</font>

22
00:01:20,450 --> 00:01:26,159
<font color="#E5E5E5">then I'll talk about LoJack</font><font color="#CCCCCC"> which is a</font>

23
00:01:23,490 --> 00:01:28,770
<font color="#CCCCCC">ninja test software</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> pass research</font>

24
00:01:26,159 --> 00:01:31,350
related<font color="#CCCCCC"> to this software and</font><font color="#E5E5E5"> the reason</font>

25
00:01:28,770 --> 00:01:33,479
<font color="#E5E5E5">for that is that the you if I</font><font color="#CCCCCC"> relive</font>

26
00:01:31,350 --> 00:01:35,899
that<font color="#CCCCCC"> I'll talk</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> really mimics the</font>

27
00:01:33,479 --> 00:01:39,150
architecture of<font color="#E5E5E5"> this legitimate software</font>

28
00:01:35,900 --> 00:01:40,770
then we'll move on and I'll talk a

29
00:01:39,150 --> 00:01:43,590
little<font color="#E5E5E5"> bit about compromise LoJack</font>

30
00:01:40,770 --> 00:01:46,170
<font color="#E5E5E5">agents that were found</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the wild</font>

31
00:01:43,590 --> 00:01:49,229
and finally I'll jump into the you if<font color="#CCCCCC"> I</font>

32
00:01:46,170 --> 00:01:51,509
<font color="#E5E5E5">rootkit</font><font color="#CCCCCC"> will where I'll talk about the</font>

33
00:01:49,229 --> 00:01:55,710
tools around<font color="#E5E5E5"> the efi rootkit and efi</font>

34
00:01:51,509 --> 00:01:57,750
rootkit itself so<font color="#CCCCCC"> sitting it said that</font>

35
00:01:55,710 --> 00:02:02,070
<font color="#E5E5E5">is an espionage group active since the</font>

36
00:01:57,750 --> 00:02:05,490
early 2000s and it is known<font color="#E5E5E5"> also known</font>

37
00:02:02,070 --> 00:02:08,038
as<font color="#E5E5E5"> fancy bear</font><font color="#CCCCCC"> a PT 28 and strontium so</font>

38
00:02:05,490 --> 00:02:12,090
maybe you know this<font color="#E5E5E5"> group by one of</font>

39
00:02:08,038 --> 00:02:13,500
these alternative names and<font color="#E5E5E5"> and</font><font color="#CCCCCC"> sendeth</font>

40
00:02:12,090 --> 00:02:17,640
is the name<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> that we</font>

41
00:02:13,500 --> 00:02:20,490
at a tea set<font color="#E5E5E5"> so this group was very</font>

42
00:02:17,640 --> 00:02:23,369
visible<font color="#E5E5E5"> in the past few</font><font color="#CCCCCC"> years as being</font>

43
00:02:20,490 --> 00:02:25,980
<font color="#E5E5E5">allegedly behind some pretty</font><font color="#CCCCCC"> notorious</font>

44
00:02:23,370 --> 00:02:28,230
hacks<font color="#E5E5E5"> like the hack against the</font>

45
00:02:25,980 --> 00:02:31,709
Democratic National<font color="#CCCCCC"> Committee didn't see</font>

46
00:02:28,230 --> 00:02:32,940
where some emails were leaked online<font color="#E5E5E5"> the</font>

47
00:02:31,710 --> 00:02:36,210
hack against the world anti-doping

48
00:02:32,940 --> 00:02:38,850
agency as well<font color="#CCCCCC"> as</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> AK against the</font>

49
00:02:36,210 --> 00:02:41,220
French<font color="#E5E5E5"> Broadcasting Network</font><font color="#CCCCCC"> TV 5 mounted</font>

50
00:02:38,850 --> 00:02:42,600
but he said when we're talking<font color="#E5E5E5"> about</font>

51
00:02:41,220 --> 00:02:45,000
setting<font color="#CCCCCC"> it we're really talking about</font>

52
00:02:42,600 --> 00:02:46,980
<font color="#E5E5E5">the tools and the different campaigns</font>

53
00:02:45,000 --> 00:02:49,380
that were that were led using these

54
00:02:46,980 --> 00:02:52,500
tools<font color="#E5E5E5"> and we're not talking about the</font>

55
00:02:49,380 --> 00:02:54,990
<font color="#CCCCCC">people who are</font><font color="#E5E5E5"> operating these this</font>

56
00:02:52,500 --> 00:02:56,610
malware<font color="#E5E5E5"> because we don't</font><font color="#CCCCCC"> have the</font>

57
00:02:54,990 --> 00:03:02,250
<font color="#CCCCCC">information necessary to</font><font color="#E5E5E5"> draw such</font>

58
00:02:56,610 --> 00:03:05,280
conclusions however in July 2018<font color="#E5E5E5"> the US</font>

59
00:03:02,250 --> 00:03:08,220
Department of Justice<font color="#CCCCCC"> named the</font><font color="#E5E5E5"> group as</font>

60
00:03:05,280 --> 00:03:10,260
<font color="#CCCCCC">being responsible</font><font color="#E5E5E5"> for the</font><font color="#CCCCCC"> Democratic</font>

61
00:03:08,220 --> 00:03:12,120
National<font color="#E5E5E5"> Committee</font><font color="#CCCCCC"> hacked</font><font color="#E5E5E5"> in this</font>

62
00:03:10,260 --> 00:03:15,060
specific indictment<font color="#CCCCCC"> and what's</font>

63
00:03:12,120 --> 00:03:19,160
<font color="#E5E5E5">interesting is that the tools that we</font>

64
00:03:15,060 --> 00:03:23,550
analyzed<font color="#E5E5E5"> were are named in this specific</font>

65
00:03:19,160 --> 00:03:27,540
indictment<font color="#CCCCCC"> and they they also mentioned</font>

66
00:03:23,550 --> 00:03:32,670
who's who's the authors of these of

67
00:03:27,540 --> 00:03:36,090
these malware<font color="#E5E5E5"> and also early not earlier</font>

68
00:03:32,670 --> 00:03:38,429
but closer from from now in<font color="#E5E5E5"> October 2018</font>

69
00:03:36,090 --> 00:03:40,440
<font color="#E5E5E5">the Department of Justice issued another</font>

70
00:03:38,430 --> 00:03:43,410
indictment<font color="#E5E5E5"> naming pretty much the same</font>

71
00:03:40,440 --> 00:03:48,600
same people related<font color="#E5E5E5"> to the world</font>

72
00:03:43,410 --> 00:03:50,790
anti-doping agency<font color="#CCCCCC"> hacked and the way</font>

73
00:03:48,600 --> 00:03:53,100
that<font color="#E5E5E5"> Senate will usually have infect</font>

74
00:03:50,790 --> 00:03:55,109
their targets is by<font color="#E5E5E5"> sending phishing</font>

75
00:03:53,100 --> 00:03:57,780
emails so<font color="#CCCCCC"> sometime they will</font><font color="#E5E5E5"> contain</font>

76
00:03:55,110 --> 00:04:02,100
malicious links and<font color="#CCCCCC"> some other time</font>

77
00:03:57,780 --> 00:04:04,790
Malchus attachments<font color="#E5E5E5"> okay so now let's</font>

78
00:04:02,100 --> 00:04:06,780
talk a<font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit about LoJack</font><font color="#CCCCCC"> so</font>

79
00:04:04,790 --> 00:04:08,820
<font color="#CCCCCC">project an entity F software as I</font>

80
00:04:06,780 --> 00:04:10,440
mentioned<font color="#CCCCCC"> it was previously</font><font color="#E5E5E5"> known</font><font color="#CCCCCC"> as</font>

81
00:04:08,820 --> 00:04:12,420
computer<font color="#CCCCCC"> ace so maybe you know</font><font color="#E5E5E5"> hi you</font>

82
00:04:10,440 --> 00:04:16,019
know the<font color="#E5E5E5"> solution by by this name</font>

83
00:04:12,420 --> 00:04:21,899
instead<font color="#E5E5E5"> and it is made by absolute</font>

84
00:04:16,019 --> 00:04:24,470
software so yeah and this solution<font color="#E5E5E5"> is</font>

85
00:04:21,899 --> 00:04:27,109
built in many laptops

86
00:04:24,470 --> 00:04:29,330
but<font color="#E5E5E5"> an</font><font color="#CCCCCC"> anti-death software needs to be</font>

87
00:04:27,110 --> 00:04:32,510
<font color="#E5E5E5">as persistent as possible if you want</font><font color="#CCCCCC"> it</font>

88
00:04:29,330 --> 00:04:35,570
to be<font color="#E5E5E5"> reliable</font><font color="#CCCCCC"> it needs to be to survive</font>

89
00:04:32,510 --> 00:04:38,270
an operating system<font color="#E5E5E5"> or install or a hard</font>

90
00:04:35,570 --> 00:04:40,940
disk replacement<font color="#E5E5E5"> so to</font><font color="#CCCCCC"> achieve</font><font color="#E5E5E5"> this what</font>

91
00:04:38,270 --> 00:04:46,940
absolute software did is that they added

92
00:04:40,940 --> 00:04:48,320
<font color="#E5E5E5">a</font><font color="#CCCCCC"> module in the UEFI bias itself yeah</font>

93
00:04:46,940 --> 00:04:52,100
and the solution<font color="#E5E5E5"> needs to be activated</font>

94
00:04:48,320 --> 00:04:53,840
in the<font color="#CCCCCC"> bias</font><font color="#E5E5E5"> setup so with persistence</font>

95
00:04:52,100 --> 00:04:55,040
mechanism like that<font color="#E5E5E5"> coming</font><font color="#CCCCCC"> from the</font>

96
00:04:53,840 --> 00:04:57,500
firmware<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> attracted the</font>

97
00:04:55,040 --> 00:04:59,270
attention of<font color="#CCCCCC"> security researchers who</font>

98
00:04:57,500 --> 00:05:02,210
looked<font color="#CCCCCC"> into this</font><font color="#E5E5E5"> in two days to find</font>

99
00:04:59,270 --> 00:05:05,840
vulnerabilities basically and at

100
00:05:02,210 --> 00:05:09,109
blackhat in 2009 there<font color="#E5E5E5"> was a talk there</font>

101
00:05:05,840 --> 00:05:12,469
where the<font color="#E5E5E5"> architecture of the solution</font>

102
00:05:09,110 --> 00:05:15,380
was destroyed and several design

103
00:05:12,470 --> 00:05:17,750
vulnerabilities in<font color="#CCCCCC"> the agent</font><font color="#E5E5E5"> were also</font>

104
00:05:15,380 --> 00:05:21,800
described there so let's look at the

105
00:05:17,750 --> 00:05:24,940
<font color="#E5E5E5">architecture of hello jack Bogdan so the</font>

106
00:05:21,800 --> 00:05:29,150
first thing that<font color="#CCCCCC"> we have here</font><font color="#E5E5E5"> is a</font>

107
00:05:24,940 --> 00:05:31,490
module in the UEFI bias and this module

108
00:05:29,150 --> 00:05:33,799
<font color="#E5E5E5">will write a file to</font><font color="#CCCCCC"> windows partition</font>

109
00:05:31,490 --> 00:05:35,900
<font color="#E5E5E5">so this file is called to check that X Z</font>

110
00:05:33,800 --> 00:05:39,500
<font color="#CCCCCC">so it replaces</font><font color="#E5E5E5"> the legitimate</font><font color="#CCCCCC"> AutoCheck</font>

111
00:05:35,900 --> 00:05:41,659
that<font color="#E5E5E5"> is e whose job is</font><font color="#CCCCCC"> to perform file</font>

112
00:05:39,500 --> 00:05:46,060
system integrity<font color="#E5E5E5"> check</font><font color="#CCCCCC"> during early</font>

113
00:05:41,660 --> 00:05:48,830
Windows boot so by<font color="#E5E5E5"> replacing this agent</font>

114
00:05:46,060 --> 00:05:52,010
during<font color="#E5E5E5"> early Windows boot it will be</font>

115
00:05:48,830 --> 00:05:54,440
<font color="#E5E5E5">executed and from there it will drop our</font>

116
00:05:52,010 --> 00:05:57,380
<font color="#E5E5E5">PC net Peter</font><font color="#CCCCCC"> digsy which</font><font color="#E5E5E5"> is the small</font>

117
00:05:54,440 --> 00:06:00,080
agent<font color="#E5E5E5"> and</font><font color="#CCCCCC"> will install a</font><font color="#E5E5E5"> service and</font>

118
00:05:57,380 --> 00:06:02,930
when<font color="#CCCCCC"> Windows will will run it will run</font>

119
00:06:00,080 --> 00:06:05,419
this service and<font color="#CCCCCC"> our PC</font><font color="#E5E5E5"> net</font><font color="#CCCCCC"> P will</font><font color="#E5E5E5"> be a</font>

120
00:06:02,930 --> 00:06:08,900
lunch at this point and<font color="#E5E5E5"> we will inject</font>

121
00:06:05,419 --> 00:06:10,430
itself into<font color="#E5E5E5"> SVC OS and then from there</font>

122
00:06:08,900 --> 00:06:12,289
it will inject itself into Internet

123
00:06:10,430 --> 00:06:14,630
Explorer which is<font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> interesting</font>

124
00:06:12,290 --> 00:06:16,460
<font color="#CCCCCC">because it's very shady</font><font color="#E5E5E5"> and that's</font>

125
00:06:14,630 --> 00:06:18,890
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that we see</font><font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> much all</font>

126
00:06:16,460 --> 00:06:22,070
the<font color="#CCCCCC"> time in malware but not</font><font color="#E5E5E5"> often in</font>

127
00:06:18,890 --> 00:06:23,599
legitimate<font color="#E5E5E5"> software and the firm</font>

128
00:06:22,070 --> 00:06:24,979
Internet Explorer it will then

129
00:06:23,600 --> 00:06:28,729
communicate with the command and control

130
00:06:24,979 --> 00:06:34,010
server and it will download the full

131
00:06:28,729 --> 00:06:36,320
recovery agent so now let's look<font color="#E5E5E5"> at some</font>

132
00:06:34,010 --> 00:06:37,880
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> issues that the researchers found</font>

133
00:06:36,320 --> 00:06:41,360
with<font color="#E5E5E5"> this</font>

134
00:06:37,880 --> 00:06:43,340
in this<font color="#CCCCCC"> solution so one of the</font>

135
00:06:41,360 --> 00:06:45,080
vulnerabilities they found is<font color="#E5E5E5"> a very</font>

136
00:06:43,340 --> 00:06:47,810
<font color="#E5E5E5">interesting for us and in fact that's</font>

137
00:06:45,080 --> 00:06:50,260
<font color="#CCCCCC">really the only</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> matters</font><font color="#CCCCCC"> for for</font>

138
00:06:47,810 --> 00:06:53,390
this talk and it is a configuration file

139
00:06:50,260 --> 00:06:55,760
vulnerability so the<font color="#CCCCCC"> configuration is</font>

140
00:06:53,390 --> 00:06:58,430
embedded<font color="#E5E5E5"> into our PC net Peter</font><font color="#CCCCCC"> digsy and</font>

141
00:06:55,760 --> 00:07:00,770
it is<font color="#E5E5E5"> encrypted but it is ring encrypted</font>

142
00:06:58,430 --> 00:07:04,100
with a very wicked garden<font color="#E5E5E5"> so it is in</font>

143
00:07:00,770 --> 00:07:08,030
single<font color="#CCCCCC"> bite Zhora key and it is not</font>

144
00:07:04,100 --> 00:07:10,760
<font color="#E5E5E5">authenticated whatsoever and what's in</font>

145
00:07:08,030 --> 00:07:14,179
this configuration file<font color="#E5E5E5"> well well that's</font>

146
00:07:10,760 --> 00:07:17,120
where you can<font color="#E5E5E5"> find the the</font><font color="#CCCCCC"> servers of</font>

147
00:07:14,180 --> 00:07:18,920
the command<font color="#E5E5E5"> and control server so in</font>

148
00:07:17,120 --> 00:07:21,490
attacker can just change this

149
00:07:18,920 --> 00:07:26,300
configuration<font color="#E5E5E5"> to point to its own</font>

150
00:07:21,490 --> 00:07:28,010
ethical control server so<font color="#CCCCCC"> we knew that</font>

151
00:07:26,300 --> 00:07:32,060
<font color="#E5E5E5">this vulnerability existed for a</font><font color="#CCCCCC"> while</font>

152
00:07:28,010 --> 00:07:34,330
which<font color="#E5E5E5"> was back in 2009 but we had no</font>

153
00:07:32,060 --> 00:07:38,360
evidence of it<font color="#CCCCCC"> being used in the wild</font>

154
00:07:34,330 --> 00:07:41,120
<font color="#E5E5E5">until earlier</font><font color="#CCCCCC"> this year when arbor</font>

155
00:07:38,360 --> 00:07:43,820
<font color="#E5E5E5">networks polish</font><font color="#CCCCCC"> a blog</font><font color="#E5E5E5"> post where</font><font color="#CCCCCC"> they</font>

156
00:07:41,120 --> 00:07:46,370
<font color="#CCCCCC">described some modified small</font><font color="#E5E5E5"> agent with</font>

157
00:07:43,820 --> 00:07:48,280
modified configuration where the<font color="#E5E5E5"> domains</font>

158
00:07:46,370 --> 00:07:52,790
<font color="#E5E5E5">that were embedded in this configuration</font>

159
00:07:48,280 --> 00:07:56,119
<font color="#E5E5E5">were linked to old set nets old set net</font>

160
00:07:52,790 --> 00:07:58,610
domains so let's go<font color="#CCCCCC"> back to the LoJack</font>

161
00:07:56,120 --> 00:08:01,220
architecture<font color="#E5E5E5"> and look at where this</font>

162
00:07:58,610 --> 00:08:05,290
attack<font color="#CCCCCC"> type took place</font><font color="#E5E5E5"> so to place at</font>

163
00:08:01,220 --> 00:08:05,290
this level<font color="#E5E5E5"> here</font>

164
00:08:11,240 --> 00:08:19,320
so from there we we did some detection

165
00:08:14,430 --> 00:08:22,410
for for this malware<font color="#E5E5E5"> and it was and we</font>

166
00:08:19,320 --> 00:08:25,320
we hunted to gather as much samples as

167
00:08:22,410 --> 00:08:27,240
as we could and it<font color="#CCCCCC"> was fairly simple</font>

168
00:08:25,320 --> 00:08:31,590
<font color="#CCCCCC">because they always modified the same</font>

169
00:08:27,240 --> 00:08:33,900
exact version of the of the agent<font color="#E5E5E5"> and</font>

170
00:08:31,590 --> 00:08:37,409
they modified so that's what we can<font color="#E5E5E5"> see</font>

171
00:08:33,900 --> 00:08:39,750
<font color="#CCCCCC">here they modified the the the</font><font color="#E5E5E5"> command</font>

172
00:08:37,409 --> 00:08:42,419
<font color="#CCCCCC">control server and here we see the</font>

173
00:08:39,750 --> 00:08:44,850
encrypted<font color="#E5E5E5"> version of course so by</font>

174
00:08:42,419 --> 00:08:48,480
looking<font color="#E5E5E5"> at this we will</font><font color="#CCCCCC"> look at ESET</font>

175
00:08:44,850 --> 00:08:50,670
symmetry<font color="#E5E5E5"> and found out</font><font color="#CCCCCC"> that there was a</font>

176
00:08:48,480 --> 00:08:53,100
few<font color="#E5E5E5"> organization that were hit mostly in</font>

177
00:08:50,670 --> 00:08:56,130
the Balkans in Central Europe as well<font color="#CCCCCC"> as</font>

178
00:08:53,100 --> 00:08:58,980
<font color="#E5E5E5">in Eastern Europe these were military</font>

179
00:08:56,130 --> 00:09:01,370
and diplomatic<font color="#E5E5E5"> organizations and what's</font>

180
00:08:58,980 --> 00:09:06,660
interesting is that we also found<font color="#E5E5E5"> other</font>

181
00:09:01,370 --> 00:09:08,610
<font color="#E5E5E5">Sedna tools in the same organization so</font>

182
00:09:06,660 --> 00:09:11,279
at this point we wondered<font color="#CCCCCC"> how this this</font>

183
00:09:08,610 --> 00:09:13,440
malware<font color="#E5E5E5"> got there but since there was</font>

184
00:09:11,279 --> 00:09:15,300
other backdoors of<font color="#E5E5E5"> setting it in the</font>

185
00:09:13,440 --> 00:09:17,820
<font color="#E5E5E5">organization we thought it might be</font><font color="#CCCCCC"> the</font>

186
00:09:15,300 --> 00:09:18,930
infection<font color="#E5E5E5"> vector but by digging a little</font>

187
00:09:17,820 --> 00:09:21,270
bit deeper

188
00:09:18,930 --> 00:09:24,000
we found another<font color="#CCCCCC"> interesting component</font>

189
00:09:21,270 --> 00:09:26,760
and if we go<font color="#CCCCCC"> back to the LoJack</font>

190
00:09:24,000 --> 00:09:30,209
architecture the component<font color="#E5E5E5"> that we found</font>

191
00:09:26,760 --> 00:09:31,680
is at this this step here<font color="#E5E5E5"> so at this</font>

192
00:09:30,209 --> 00:09:34,410
<font color="#E5E5E5">step in the</font><font color="#CCCCCC"> law in the logic</font>

193
00:09:31,680 --> 00:09:36,750
architecture<font color="#E5E5E5"> it's to check that eggsy</font>

194
00:09:34,410 --> 00:09:39,000
that lives there<font color="#CCCCCC"> but what we found is</font>

195
00:09:36,750 --> 00:09:41,370
<font color="#CCCCCC">not a file called Auto</font><font color="#E5E5E5"> cheat that exist</font>

196
00:09:39,000 --> 00:09:43,339
<font color="#E5E5E5">instead of other check and it does</font>

197
00:09:41,370 --> 00:09:47,400
pretty much<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same thing so it also</font>

198
00:09:43,339 --> 00:09:49,950
installs<font color="#E5E5E5"> a service and it also drops our</font>

199
00:09:47,400 --> 00:09:52,040
<font color="#E5E5E5">PC</font><font color="#CCCCCC"> NAT periodically but it is the RPC</font>

200
00:09:49,950 --> 00:09:55,290
<font color="#E5E5E5">native version that has a modified</font>

201
00:09:52,040 --> 00:09:58,620
server in it so sitting it's our domain

202
00:09:55,290 --> 00:10:00,599
basically<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we continue to look</font><font color="#E5E5E5"> what</font>

203
00:09:58,620 --> 00:10:03,750
we can<font color="#E5E5E5"> find</font><font color="#CCCCCC"> in these organization and we</font>

204
00:10:00,600 --> 00:10:06,540
we<font color="#E5E5E5"> found another tool which is called</font>

205
00:10:03,750 --> 00:10:08,820
info<font color="#E5E5E5"> EFI that XZ and that allows us to</font>

206
00:10:06,540 --> 00:10:11,790
drop<font color="#CCCCCC"> to</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> dump a lot</font><font color="#E5E5E5"> of information</font>

207
00:10:08,820 --> 00:10:15,779
<font color="#CCCCCC">about very low level settings of the the</font>

208
00:10:11,790 --> 00:10:18,360
<font color="#CCCCCC">machine and this</font><font color="#E5E5E5"> tool uses</font><font color="#CCCCCC"> read/write</font>

209
00:10:15,779 --> 00:10:21,270
everything's driver and read/write

210
00:10:18,360 --> 00:10:22,670
everything is a software<font color="#CCCCCC"> that</font><font color="#E5E5E5"> allows</font><font color="#CCCCCC"> you</font>

211
00:10:21,270 --> 00:10:24,920
<font color="#CCCCCC">to manipulate very low level</font>

212
00:10:22,670 --> 00:10:26,900
setting of<font color="#CCCCCC"> your machine so using this</font>

213
00:10:24,920 --> 00:10:28,699
tool you<font color="#E5E5E5"> can read and write</font><font color="#CCCCCC"> to PCI</font>

214
00:10:26,900 --> 00:10:31,730
configuration register to memory mapped

215
00:10:28,700 --> 00:10:34,430
i/o<font color="#E5E5E5"> s to i/o port space and you can</font><font color="#CCCCCC"> also</font>

216
00:10:31,730 --> 00:10:37,370
access<font color="#E5E5E5"> physical memory and this tool</font>

217
00:10:34,430 --> 00:10:38,599
<font color="#E5E5E5">uses a kernel driver of course if you</font>

218
00:10:37,370 --> 00:10:41,510
want<font color="#E5E5E5"> to do those</font><font color="#CCCCCC"> things you need a</font>

219
00:10:38,600 --> 00:10:43,700
kernel driver and this kernel driver is

220
00:10:41,510 --> 00:10:47,770
properly signed so that<font color="#CCCCCC"> you can push it</font>

221
00:10:43,700 --> 00:10:50,330
on even a recent<font color="#CCCCCC"> version of</font><font color="#E5E5E5"> Windows and</font>

222
00:10:47,770 --> 00:10:55,550
so<font color="#E5E5E5"> yeah that's the driver that was used</font>

223
00:10:50,330 --> 00:10:57,380
by<font color="#CCCCCC"> info efi here and by googling</font><font color="#E5E5E5"> a</font>

224
00:10:55,550 --> 00:11:00,199
little bit around what we<font color="#E5E5E5"> found out is</font>

225
00:10:57,380 --> 00:11:02,240
<font color="#CCCCCC">that this specific driver was used in</font>

226
00:11:00,200 --> 00:11:04,550
the<font color="#E5E5E5"> past by security</font><font color="#CCCCCC"> researchers to</font>

227
00:11:02,240 --> 00:11:09,290
exploit vulnerabilities<font color="#E5E5E5"> at the firmware</font>

228
00:11:04,550 --> 00:11:12,410
<font color="#CCCCCC">level</font><font color="#E5E5E5"> so yeah the last thing that was</font>

229
00:11:09,290 --> 00:11:17,360
<font color="#E5E5E5">missing here to mimic the whole LoJack</font>

230
00:11:12,410 --> 00:11:21,100
solution<font color="#E5E5E5"> was a UEFI</font><font color="#CCCCCC"> bios module so this</font>

231
00:11:17,360 --> 00:11:24,590
point<font color="#E5E5E5"> wonder did</font><font color="#CCCCCC"> they did they get there</font>

232
00:11:21,100 --> 00:11:26,060
<font color="#E5E5E5">so because of the the tool dumping</font>

233
00:11:24,590 --> 00:11:28,010
information about the bias<font color="#E5E5E5"> that I just</font>

234
00:11:26,060 --> 00:11:29,719
spoke about<font color="#E5E5E5"> we were pretty confident</font>

235
00:11:28,010 --> 00:11:33,800
that<font color="#E5E5E5"> something more was happening there</font>

236
00:11:29,720 --> 00:11:35,870
and by digging<font color="#E5E5E5"> a little bit deeper</font><font color="#CCCCCC"> we</font>

237
00:11:33,800 --> 00:11:40,250
found other tools that<font color="#CCCCCC"> strengthen our</font>

238
00:11:35,870 --> 00:11:43,460
suspicions<font color="#E5E5E5"> so the first tool is called</font>

239
00:11:40,250 --> 00:11:46,850
re writer<font color="#E5E5E5"> read and it is it will use to</font>

240
00:11:43,460 --> 00:11:49,700
<font color="#E5E5E5">dump the content of the SPI flash memory</font>

241
00:11:46,850 --> 00:11:51,880
and it also uses<font color="#CCCCCC"> readwrite everything</font>

242
00:11:49,700 --> 00:11:55,370
<font color="#CCCCCC">this driver</font><font color="#E5E5E5"> and it uses these specific</font>

243
00:11:51,880 --> 00:11:57,830
IO control codes<font color="#CCCCCC"> so it's all I was</font>

244
00:11:55,370 --> 00:11:59,990
<font color="#E5E5E5">allowed to read and write to memory</font>

245
00:11:57,830 --> 00:12:03,530
mapped i/o space<font color="#E5E5E5"> as well as</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> write</font>

246
00:11:59,990 --> 00:12:06,140
to PCI configuration registers what's

247
00:12:03,530 --> 00:12:07,819
interesting for us<font color="#E5E5E5"> as reverse engineer</font>

248
00:12:06,140 --> 00:12:09,500
is that this tool contains a lot of

249
00:12:07,820 --> 00:12:11,240
debug<font color="#CCCCCC"> strings which really made our job</font>

250
00:12:09,500 --> 00:12:14,530
easier

251
00:12:11,240 --> 00:12:16,580
<font color="#CCCCCC">and consists</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> following</font><font color="#E5E5E5"> operations</font>

252
00:12:14,530 --> 00:12:19,370
so the first thing it will do<font color="#E5E5E5"> is that it</font>

253
00:12:16,580 --> 00:12:22,430
<font color="#E5E5E5">will log information on the bias control</font>

254
00:12:19,370 --> 00:12:25,010
register and we'll talk<font color="#E5E5E5"> a lot of detail</font>

255
00:12:22,430 --> 00:12:27,620
about<font color="#E5E5E5"> this register a little bit later</font>

256
00:12:25,010 --> 00:12:31,790
in this talk then it locates the bias

257
00:12:27,620 --> 00:12:34,390
<font color="#E5E5E5">region base address and finally</font><font color="#CCCCCC"> it reads</font>

258
00:12:31,790 --> 00:12:36,790
the UEFI firmware content and dump it<font color="#E5E5E5"> to</font>

259
00:12:34,390 --> 00:12:39,230
<font color="#E5E5E5">to a file</font>

260
00:12:36,790 --> 00:12:41,660
so another tool<font color="#E5E5E5"> that we we</font><font color="#CCCCCC"> found is</font>

261
00:12:39,230 --> 00:12:44,140
really<font color="#CCCCCC"> complementary to</font><font color="#E5E5E5"> the tool to re</font>

262
00:12:41,660 --> 00:12:47,329
<font color="#E5E5E5">write</font><font color="#CCCCCC"> or read and it is</font><font color="#E5E5E5"> called re writer</font>

263
00:12:44,140 --> 00:12:50,390
<font color="#CCCCCC">binary so it also contains a</font><font color="#E5E5E5"> lot of</font>

264
00:12:47,330 --> 00:12:53,510
debug strings it also<font color="#E5E5E5"> uses</font><font color="#CCCCCC"> RW</font>

265
00:12:50,390 --> 00:12:56,630
<font color="#E5E5E5">everything's driver and now that the</font>

266
00:12:53,510 --> 00:12:58,760
UEFI firmware is dumped into memory<font color="#E5E5E5"> the</font>

267
00:12:56,630 --> 00:13:00,710
next<font color="#CCCCCC"> step is to add the root key to the</font>

268
00:12:58,760 --> 00:13:02,150
<font color="#CCCCCC">firmware and to write it back to the SPI</font>

269
00:13:00,710 --> 00:13:06,080
flash memory<font color="#E5E5E5"> and that's exactly what</font>

270
00:13:02,150 --> 00:13:08,630
this tool does<font color="#CCCCCC"> ok so now let's talk</font>

271
00:13:06,080 --> 00:13:11,090
about<font color="#E5E5E5"> the patching of the UEFI firmware</font>

272
00:13:08,630 --> 00:13:12,410
but before<font color="#E5E5E5"> we dig into</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> subjects</font>

273
00:13:11,090 --> 00:13:14,150
there are a<font color="#E5E5E5"> couple things</font><font color="#CCCCCC"> that I</font><font color="#E5E5E5"> wanted</font>

274
00:13:12,410 --> 00:13:16,339
<font color="#E5E5E5">to</font><font color="#CCCCCC"> introduce here just to make sure that</font>

275
00:13:14,150 --> 00:13:18,640
we're on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same page</font><font color="#E5E5E5"> so the first</font>

276
00:13:16,340 --> 00:13:20,840
thing<font color="#E5E5E5"> I want to talk about is UEFI and</font>

277
00:13:18,640 --> 00:13:23,210
UEFI stands<font color="#E5E5E5"> for unified extensible</font>

278
00:13:20,840 --> 00:13:24,740
firmware interface<font color="#E5E5E5"> and it is a</font>

279
00:13:23,210 --> 00:13:26,900
<font color="#E5E5E5">standardized specification that defines</font>

280
00:13:24,740 --> 00:13:30,440
the interface that exists between<font color="#CCCCCC"> the</font>

281
00:13:26,900 --> 00:13:34,550
operating system and the firmware<font color="#E5E5E5"> it is</font>

282
00:13:30,440 --> 00:13:37,070
kind of replacing for the legacy<font color="#E5E5E5"> bias so</font>

283
00:13:34,550 --> 00:13:39,920
a UEFI compliant firmware will provide a

284
00:13:37,070 --> 00:13:42,110
set of services to UEFI applications and

285
00:13:39,920 --> 00:13:44,449
here read<font color="#CCCCCC"> the operating system loader</font>

286
00:13:42,110 --> 00:13:47,180
<font color="#CCCCCC">there are other UEFI applications which</font>

287
00:13:44,450 --> 00:13:50,720
usually<font color="#E5E5E5"> it's the operating system loader</font>

288
00:13:47,180 --> 00:13:53,479
that that runs so<font color="#CCCCCC"> the first set of</font>

289
00:13:50,720 --> 00:13:55,370
services<font color="#E5E5E5"> has called the boot services</font>

290
00:13:53,480 --> 00:13:57,410
and these are services<font color="#E5E5E5"> that are</font>

291
00:13:55,370 --> 00:13:59,330
available<font color="#CCCCCC"> during the</font><font color="#E5E5E5"> firmware lifetime</font>

292
00:13:57,410 --> 00:14:01,810
but once the<font color="#E5E5E5"> operating system is loaded</font>

293
00:13:59,330 --> 00:14:04,460
<font color="#CCCCCC">these services are not available</font><font color="#E5E5E5"> anymore</font>

294
00:14:01,810 --> 00:14:07,250
and they<font color="#E5E5E5"> argue runtime services</font><font color="#CCCCCC"> that are</font>

295
00:14:04,460 --> 00:14:09,710
also available during firmware lifetime

296
00:14:07,250 --> 00:14:11,120
but once the operating the operating

297
00:14:09,710 --> 00:14:13,280
system is loaded<font color="#E5E5E5"> they are still</font>

298
00:14:11,120 --> 00:14:15,190
available<font color="#CCCCCC"> so that a kernel driver for</font>

299
00:14:13,280 --> 00:14:18,829
instance can make<font color="#CCCCCC"> calling these services</font>

300
00:14:15,190 --> 00:14:20,930
<font color="#CCCCCC">an</font><font color="#E5E5E5"> example of these services allows the</font>

301
00:14:18,830 --> 00:14:23,960
operating<font color="#E5E5E5"> system to read and write to</font>

302
00:14:20,930 --> 00:14:26,540
UEFI variables and what's<font color="#E5E5E5"> interesting</font>

303
00:14:23,960 --> 00:14:28,190
with<font color="#E5E5E5"> UEFI is that there's no more Master</font>

304
00:14:26,540 --> 00:14:31,040
Boot Record<font color="#E5E5E5"> and volume Boot Record</font>

305
00:14:28,190 --> 00:14:33,580
<font color="#E5E5E5">involved in the boot process meaning</font>

306
00:14:31,040 --> 00:14:38,120
that there<font color="#CCCCCC"> is no easy way to</font><font color="#E5E5E5"> hijack the</font>

307
00:14:33,580 --> 00:14:40,790
early boot<font color="#E5E5E5"> control flow so the second</font>

308
00:14:38,120 --> 00:14:43,460
<font color="#CCCCCC">thing I want to introduce here are the</font>

309
00:14:40,790 --> 00:14:45,949
driver execution environment drivers<font color="#CCCCCC"> so</font>

310
00:14:43,460 --> 00:14:47,660
the<font color="#E5E5E5"> dixie drivers so the XE drivers</font><font color="#CCCCCC"> RPE</font>

311
00:14:45,950 --> 00:14:49,620
cough images meaning that they<font color="#CCCCCC"> are</font>

312
00:14:47,660 --> 00:14:52,949
basically<font color="#CCCCCC"> windows</font><font color="#E5E5E5"> execute</font>

313
00:14:49,620 --> 00:14:55,320
and they are kind<font color="#CCCCCC"> of the core of a UEFI</font>

314
00:14:52,950 --> 00:14:57,060
firmware so they can do many things<font color="#CCCCCC"> some</font>

315
00:14:55,320 --> 00:14:58,890
of<font color="#E5E5E5"> them will be used abstract</font><font color="#CCCCCC"> D Hardware</font>

316
00:14:57,060 --> 00:15:01,229
<font color="#CCCCCC">some of them will be used to produce the</font>

317
00:14:58,890 --> 00:15:03,199
UEFI<font color="#E5E5E5"> standard interface of the</font><font color="#CCCCCC"> boot</font>

318
00:15:01,230 --> 00:15:05,400
services<font color="#E5E5E5"> and the runtime</font><font color="#CCCCCC"> services and</font>

319
00:15:03,200 --> 00:15:09,120
they can also<font color="#E5E5E5"> be used</font><font color="#CCCCCC"> by firmware</font>

320
00:15:05,400 --> 00:15:11,310
vendors or<font color="#CCCCCC"> OAM to extend the firmware by</font>

321
00:15:09,120 --> 00:15:14,480
registering new<font color="#E5E5E5"> services the</font><font color="#CCCCCC"> so-called</font>

322
00:15:11,310 --> 00:15:16,890
protocols<font color="#E5E5E5"> in the UEFI specification and</font>

323
00:15:14,480 --> 00:15:18,090
the<font color="#CCCCCC"> Dixie</font><font color="#E5E5E5"> drivers</font><font color="#CCCCCC"> are loaded during</font><font color="#E5E5E5"> the</font>

324
00:15:16,890 --> 00:15:20,220
next<font color="#E5E5E5"> phase</font><font color="#CCCCCC"> of the platform</font>

325
00:15:18,090 --> 00:15:23,100
initialization<font color="#CCCCCC"> and they are</font><font color="#E5E5E5"> loaded by</font>

326
00:15:20,220 --> 00:15:28,020
<font color="#CCCCCC">the exe dispatcher that will</font><font color="#E5E5E5"> also refer</font>

327
00:15:23,100 --> 00:15:30,060
to<font color="#E5E5E5"> as the DEXA core</font><font color="#CCCCCC"> the last thing</font><font color="#E5E5E5"> that</font>

328
00:15:28,020 --> 00:15:32,910
<font color="#CCCCCC">I</font><font color="#E5E5E5"> want to do I want</font><font color="#CCCCCC"> to introduce for for</font>

329
00:15:30,060 --> 00:15:35,130
now is the<font color="#E5E5E5"> UEFI firmware layout so the</font>

330
00:15:32,910 --> 00:15:39,329
UEFI firmware is located in the bias

331
00:15:35,130 --> 00:15:41,310
region<font color="#E5E5E5"> of the spi flash memory and this</font>

332
00:15:39,330 --> 00:15:42,960
<font color="#CCCCCC">region will contain multiple volume but</font>

333
00:15:41,310 --> 00:15:45,869
let's<font color="#E5E5E5"> look at it and it with a little</font>

334
00:15:42,960 --> 00:15:48,810
bit more detail in this<font color="#E5E5E5"> tool here which</font>

335
00:15:45,870 --> 00:15:50,700
is UEFI tool that is an open source

336
00:15:48,810 --> 00:15:54,660
<font color="#CCCCCC">software that</font><font color="#E5E5E5"> allows you</font><font color="#CCCCCC"> to manipulate</font>

337
00:15:50,700 --> 00:15:56,190
UEFI firmware images<font color="#E5E5E5"> so here unloaded</font>

338
00:15:54,660 --> 00:15:58,709
the typical content of a<font color="#E5E5E5"> spi flash</font>

339
00:15:56,190 --> 00:16:00,900
memory dump in this tool and let's look

340
00:15:58,710 --> 00:16:03,360
<font color="#E5E5E5">at what we have so the first thing that</font>

341
00:16:00,900 --> 00:16:04,829
<font color="#E5E5E5">we see</font><font color="#CCCCCC"> here is the descriptor region</font><font color="#E5E5E5"> so</font>

342
00:16:03,360 --> 00:16:07,440
it<font color="#E5E5E5"> contains this region</font><font color="#CCCCCC"> contains</font>

343
00:16:04,830 --> 00:16:10,500
metadata<font color="#E5E5E5"> about how the remaining data</font>

344
00:16:07,440 --> 00:16:12,930
<font color="#E5E5E5">and the</font><font color="#CCCCCC"> SPI flash</font><font color="#E5E5E5"> memory is laid</font><font color="#CCCCCC"> out the</font>

345
00:16:10,500 --> 00:16:14,310
<font color="#CCCCCC">scan region that we find here is the ME</font>

346
00:16:12,930 --> 00:16:16,859
region which contains the<font color="#E5E5E5"> Intel</font>

347
00:16:14,310 --> 00:16:18,420
management<font color="#E5E5E5"> in China firmware and finally</font>

348
00:16:16,860 --> 00:16:20,640
we have the bias region<font color="#E5E5E5"> which is really</font>

349
00:16:18,420 --> 00:16:24,260
the main interest<font color="#CCCCCC"> the main thing that we</font>

350
00:16:20,640 --> 00:16:27,720
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> look at today so the bias region</font>

351
00:16:24,260 --> 00:16:30,270
<font color="#E5E5E5">contains multiple volumes so let's look</font>

352
00:16:27,720 --> 00:16:32,580
<font color="#E5E5E5">at one</font><font color="#CCCCCC"> volume a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> more detail</font>

353
00:16:30,270 --> 00:16:35,250
so<font color="#CCCCCC"> here we have a volume</font><font color="#E5E5E5"> of type</font>

354
00:16:32,580 --> 00:16:37,860
<font color="#E5E5E5">firmware file system version 2 and this</font>

355
00:16:35,250 --> 00:16:40,170
volume<font color="#E5E5E5"> contains multiple files and these</font>

356
00:16:37,860 --> 00:16:41,400
<font color="#E5E5E5">files are identified by</font><font color="#CCCCCC"> GU 'its so</font>

357
00:16:40,170 --> 00:16:44,880
that's what we can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> under the name</font>

358
00:16:41,400 --> 00:16:48,600
column here<font color="#E5E5E5"> and F file</font><font color="#CCCCCC"> doesn't contain</font>

359
00:16:44,880 --> 00:16:51,240
<font color="#E5E5E5">directly the UEFI executable but it it</font>

360
00:16:48,600 --> 00:16:53,820
it is composed of<font color="#E5E5E5"> multiple sections and</font>

361
00:16:51,240 --> 00:16:56,040
one of these section is the actual UEFI

362
00:16:53,820 --> 00:16:57,750
executable<font color="#E5E5E5"> but there are other section</font>

363
00:16:56,040 --> 00:16:59,280
<font color="#E5E5E5">and in this case we see a</font><font color="#CCCCCC"> DEXA</font>

364
00:16:57,750 --> 00:17:02,250
dependency<font color="#CCCCCC"> section that</font><font color="#E5E5E5"> allows to define</font>

365
00:16:59,280 --> 00:17:03,089
dependencies for this specific UEFI

366
00:17:02,250 --> 00:17:06,269
<font color="#CCCCCC">image</font>

367
00:17:03,089 --> 00:17:07,949
and we also see a version section<font color="#E5E5E5"> in a</font>

368
00:17:06,269 --> 00:17:09,990
user interface<font color="#CCCCCC"> section which allows to</font>

369
00:17:07,949 --> 00:17:12,959
<font color="#E5E5E5">gives a human readable</font><font color="#CCCCCC"> name for this</font>

370
00:17:09,990 --> 00:17:16,079
file<font color="#E5E5E5"> instead of the gooood which is very</font>

371
00:17:12,959 --> 00:17:20,220
pretty difficult to to<font color="#CCCCCC"> remember for</font>

372
00:17:16,079 --> 00:17:22,648
humans<font color="#CCCCCC"> okay so now that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have all this</font>

373
00:17:20,220 --> 00:17:25,230
in mind<font color="#E5E5E5"> let's go back to re-write or</font>

374
00:17:22,648 --> 00:17:27,178
<font color="#E5E5E5">binary so what are you</font><font color="#CCCCCC"> writer binary</font>

375
00:17:25,230 --> 00:17:29,450
will do is that it<font color="#CCCCCC"> will parse all of the</font>

376
00:17:27,179 --> 00:17:32,610
firmware volumes that<font color="#E5E5E5"> it can find</font>

377
00:17:29,450 --> 00:17:35,820
looking for for<font color="#E5E5E5"> specific files so it</font>

378
00:17:32,610 --> 00:17:39,449
looks<font color="#E5E5E5"> for IP for</font><font color="#CCCCCC"> Dex see</font><font color="#E5E5E5"> NTFS</font><font color="#CCCCCC"> Lexi SMI</font>

379
00:17:35,820 --> 00:17:41,279
flash and the next Accord so why does<font color="#CCCCCC"> it</font>

380
00:17:39,450 --> 00:17:44,129
look<font color="#E5E5E5"> for</font><font color="#CCCCCC"> ID for</font><font color="#E5E5E5"> Dex in the DEXA core</font>

381
00:17:41,279 --> 00:17:46,259
well these files will look for to<font color="#CCCCCC"> find</font>

382
00:17:44,129 --> 00:17:49,110
<font color="#E5E5E5">the firmware volume where to install the</font>

383
00:17:46,259 --> 00:17:51,659
<font color="#E5E5E5">UEFI rootkit so usually in UEFI</font>

384
00:17:49,110 --> 00:17:55,080
firmwares all of the exe drivers are in

385
00:17:51,659 --> 00:17:58,139
<font color="#CCCCCC">the same volume so when the tool</font><font color="#E5E5E5"> will</font>

386
00:17:55,080 --> 00:17:59,549
<font color="#CCCCCC">parse</font><font color="#E5E5E5"> will find in fact</font><font color="#CCCCCC"> ID for deck C it</font>

387
00:17:58,139 --> 00:18:01,289
will known as it is currently<font color="#E5E5E5"> parsing</font>

388
00:17:59,549 --> 00:18:03,809
the volume with all of the deck<font color="#E5E5E5"> C</font>

389
00:18:01,289 --> 00:18:05,490
drivers in it and it<font color="#E5E5E5"> will keep it as a</font>

390
00:18:03,809 --> 00:18:07,499
candidate<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the EFI routine</font>

391
00:18:05,490 --> 00:18:08,820
installation and it looks<font color="#E5E5E5"> for the</font>

392
00:18:07,499 --> 00:18:12,059
<font color="#CCCCCC">texture core basically for the</font><font color="#E5E5E5"> same</font>

393
00:18:08,820 --> 00:18:14,158
reason but sometimes the<font color="#CCCCCC"> the deck C core</font>

394
00:18:12,059 --> 00:18:16,470
is in a different volume so when it will

395
00:18:14,159 --> 00:18:18,240
find it it will keep the<font color="#E5E5E5"> volume as</font>

396
00:18:16,470 --> 00:18:20,909
another candidate<font color="#CCCCCC"> for the if I</font><font color="#E5E5E5"> rootkit</font>

397
00:18:18,240 --> 00:18:22,679
installation and the chosen<font color="#E5E5E5"> volume will</font>

398
00:18:20,909 --> 00:18:28,169
be<font color="#E5E5E5"> the one with</font><font color="#CCCCCC"> enough free space</font>

399
00:18:22,679 --> 00:18:30,090
<font color="#CCCCCC">available in</font><font color="#E5E5E5"> it now NTFS deck C so NTFS</font>

400
00:18:28,169 --> 00:18:33,899
deck C is the American Megatron

401
00:18:30,090 --> 00:18:36,869
<font color="#CCCCCC">incorporated ntfs driver and if the tool</font>

402
00:18:33,899 --> 00:18:40,168
finds it it will remove it and the

403
00:18:36,869 --> 00:18:43,199
reason<font color="#CCCCCC"> for that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that the UEFI rootkit</font>

404
00:18:40,169 --> 00:18:45,899
embeds its own<font color="#E5E5E5"> NTFS a driver so to avoid</font>

405
00:18:43,200 --> 00:18:50,730
<font color="#CCCCCC">any conflict with</font><font color="#E5E5E5"> another ntfs driver</font><font color="#CCCCCC"> it</font>

406
00:18:45,899 --> 00:18:54,418
just removes it<font color="#CCCCCC"> and now SMI flash so SMI</font>

407
00:18:50,730 --> 00:18:56,490
flash is looked for and you<font color="#CCCCCC"> know the</font>

408
00:18:54,419 --> 00:18:58,049
tool will if the tool finds that it will

409
00:18:56,490 --> 00:18:59,999
keep some metadata about<font color="#E5E5E5"> it in a</font>

410
00:18:58,049 --> 00:19:02,179
structure but in the<font color="#E5E5E5"> version of the tool</font>

411
00:18:59,999 --> 00:19:05,340
<font color="#CCCCCC">that we analyzed</font><font color="#E5E5E5"> it's not used anywhere</font>

412
00:19:02,179 --> 00:19:08,369
<font color="#E5E5E5">but interestingly SMI flash is a non</font>

413
00:19:05,340 --> 00:19:09,658
vulnerable exe driver<font color="#E5E5E5"> so what we believe</font>

414
00:19:08,369 --> 00:19:11,369
is that<font color="#E5E5E5"> Sydney it might have been</font>

415
00:19:09,659 --> 00:19:13,590
fiddling in another version of the tool

416
00:19:11,369 --> 00:19:16,070
with some exploit for this for this

417
00:19:13,590 --> 00:19:18,290
driver in order to<font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to bypass</font>

418
00:19:16,070 --> 00:19:22,189
protection mechanisms to the bias region

419
00:19:18,290 --> 00:19:25,490
of the<font color="#CCCCCC"> spi</font><font color="#E5E5E5"> flash memory so now</font><font color="#CCCCCC"> that it</font>

420
00:19:22,190 --> 00:19:29,090
has found the<font color="#CCCCCC"> volume were to install the</font>

421
00:19:25,490 --> 00:19:30,410
rootkit<font color="#E5E5E5"> it will</font><font color="#CCCCCC"> ask the rootkit right</font><font color="#E5E5E5"> so</font>

422
00:19:29,090 --> 00:19:32,659
the<font color="#E5E5E5"> first thing it</font><font color="#CCCCCC"> does is that</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> will</font>

423
00:19:30,410 --> 00:19:35,240
<font color="#E5E5E5">create a firmware file system file</font>

424
00:19:32,660 --> 00:19:38,120
header then it will happen the rootkit

425
00:19:35,240 --> 00:19:41,120
file which is a compressed section that

426
00:19:38,120 --> 00:19:44,270
contains<font color="#E5E5E5"> two other sections one of one</font>

427
00:19:41,120 --> 00:19:47,959
<font color="#E5E5E5">of these is the actual UEFI rootkit</font>

428
00:19:44,270 --> 00:19:50,270
image<font color="#E5E5E5"> and the other one is the user is a</font>

429
00:19:47,960 --> 00:19:53,060
user interface<font color="#E5E5E5"> section defining the name</font>

430
00:19:50,270 --> 00:19:57,470
for this rootkit which is<font color="#CCCCCC"> SEC exe as</font>

431
00:19:53,060 --> 00:19:59,419
insecure elixir and then I will take

432
00:19:57,470 --> 00:20:01,580
<font color="#E5E5E5">this blob of data and write it at the</font>

433
00:19:59,420 --> 00:20:13,490
end of the firmware volume that that was

434
00:20:01,580 --> 00:20:16,070
chosen<font color="#E5E5E5"> so</font><font color="#CCCCCC"> now the d efi rootkit is</font>

435
00:20:13,490 --> 00:20:18,200
inside the firmware into memory<font color="#E5E5E5"> the</font><font color="#CCCCCC"> next</font>

436
00:20:16,070 --> 00:20:20,689
step is to write<font color="#CCCCCC"> it back to the spi</font>

437
00:20:18,200 --> 00:20:21,950
flash memory<font color="#E5E5E5"> and once</font><font color="#CCCCCC"> again there's a</font>

438
00:20:20,690 --> 00:20:24,860
<font color="#E5E5E5">couple things that I want to introduce</font>

439
00:20:21,950 --> 00:20:27,380
here so I want to<font color="#E5E5E5"> talk about bias</font><font color="#CCCCCC"> write</font>

440
00:20:24,860 --> 00:20:29,990
protection<font color="#E5E5E5"> mechanisms so the chipset</font>

441
00:20:27,380 --> 00:20:32,630
exposes write protection mechanisms that

442
00:20:29,990 --> 00:20:34,460
need to<font color="#E5E5E5"> be properly configured by the</font>

443
00:20:32,630 --> 00:20:38,060
<font color="#E5E5E5">firmware so there are no such thing as</font>

444
00:20:34,460 --> 00:20:39,920
<font color="#E5E5E5">you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> bias read protection mechanism</font>

445
00:20:38,060 --> 00:20:42,740
enable by default<font color="#E5E5E5"> it's really the job of</font>

446
00:20:39,920 --> 00:20:44,450
<font color="#E5E5E5">the firmware to do that</font><font color="#CCCCCC"> and today</font><font color="#E5E5E5"> will</font>

447
00:20:42,740 --> 00:20:47,720
only cover relevant protections<font color="#CCCCCC"> to our</font>

448
00:20:44,450 --> 00:20:49,790
research<font color="#CCCCCC"> so only the prediction</font>

449
00:20:47,720 --> 00:20:54,740
<font color="#E5E5E5">mechanism that are looked for bar by re</font>

450
00:20:49,790 --> 00:20:56,270
writer<font color="#E5E5E5"> binary and yeah the production</font>

451
00:20:54,740 --> 00:20:58,550
<font color="#CCCCCC">we'll talk about are exposed via</font><font color="#E5E5E5"> the</font>

452
00:20:56,270 --> 00:21:02,450
bias control<font color="#E5E5E5"> register that we we've</font><font color="#CCCCCC"> seen</font>

453
00:20:58,550 --> 00:21:04,010
a little<font color="#E5E5E5"> bit earlier in this talk so</font><font color="#CCCCCC"> if</font>

454
00:21:02,450 --> 00:21:05,480
you're a kernel driver and you want to

455
00:21:04,010 --> 00:21:07,610
<font color="#E5E5E5">write</font><font color="#CCCCCC"> to the bias region</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> SPI</font>

456
00:21:05,480 --> 00:21:10,130
flash memory what you need to do first

457
00:21:07,610 --> 00:21:12,199
is<font color="#E5E5E5"> you need</font><font color="#CCCCCC"> to set the bias</font><font color="#E5E5E5"> right enable</font>

458
00:21:10,130 --> 00:21:16,400
<font color="#CCCCCC">field of the bias control</font><font color="#E5E5E5"> register to</font><font color="#CCCCCC"> 1</font>

459
00:21:12,200 --> 00:21:19,010
and then you're<font color="#CCCCCC"> able to write</font><font color="#E5E5E5"> to the DSP</font>

460
00:21:16,400 --> 00:21:21,350
flash memory but of<font color="#CCCCCC"> course you</font><font color="#E5E5E5"> don't</font>

461
00:21:19,010 --> 00:21:23,810
want<font color="#E5E5E5"> any current any kernel driver to be</font>

462
00:21:21,350 --> 00:21:25,760
able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> modify your UEFI firmware and</font>

463
00:21:23,810 --> 00:21:27,200
potentially<font color="#E5E5E5"> break your machine</font><font color="#CCCCCC"> so</font>

464
00:21:25,760 --> 00:21:28,760
<font color="#E5E5E5">there's a protection mechanism there</font>

465
00:21:27,200 --> 00:21:30,350
<font color="#E5E5E5">which is another field in</font>

466
00:21:28,760 --> 00:21:34,370
<font color="#E5E5E5">by a central register and this feels</font>

467
00:21:30,350 --> 00:21:38,780
called bias<font color="#CCCCCC"> lock enable and it allows to</font>

468
00:21:34,370 --> 00:21:42,620
lock bias<font color="#E5E5E5"> right enable</font><font color="#CCCCCC"> 2 to 0</font><font color="#E5E5E5"> and this</font>

469
00:21:38,780 --> 00:21:45,110
field is readable<font color="#CCCCCC"> and wll Welo means</font>

470
00:21:42,620 --> 00:21:46,939
<font color="#E5E5E5">right lock once and what it means is</font>

471
00:21:45,110 --> 00:21:48,199
that once the firmware<font color="#CCCCCC"> has said this bit</font>

472
00:21:46,940 --> 00:21:49,790
there's no other way<font color="#CCCCCC"> to set</font><font color="#E5E5E5"> it back to</font>

473
00:21:48,200 --> 00:21:55,610
<font color="#CCCCCC">zero</font><font color="#E5E5E5"> than performing a full platform</font>

474
00:21:49,790 --> 00:21:58,330
reset but there's a problem here<font color="#E5E5E5"> and it</font>

475
00:21:55,610 --> 00:22:02,090
lies in<font color="#CCCCCC"> the fact that bias lock enable</font>

476
00:21:58,330 --> 00:22:06,080
implementation is<font color="#E5E5E5"> vulnerable so how it</font>

477
00:22:02,090 --> 00:22:09,020
works is<font color="#E5E5E5"> that when bias right are</font>

478
00:22:06,080 --> 00:22:11,030
enabled is set<font color="#E5E5E5"> to</font><font color="#CCCCCC"> 2 1 it's value will</font>

479
00:22:09,020 --> 00:22:12,950
actually change in the bias control

480
00:22:11,030 --> 00:22:15,710
<font color="#E5E5E5">register for a small amount of time and</font>

481
00:22:12,950 --> 00:22:17,540
then the the platform<font color="#CCCCCC"> which issue</font>

482
00:22:15,710 --> 00:22:20,690
<font color="#CCCCCC">assessment is the system management</font>

483
00:22:17,540 --> 00:22:23,360
interrupt<font color="#E5E5E5"> and the SMI handler will set</font>

484
00:22:20,690 --> 00:22:25,640
by us write enable back<font color="#CCCCCC"> to to 0</font>

485
00:22:23,360 --> 00:22:28,129
but<font color="#E5E5E5"> yeah the firmware must implement</font>

486
00:22:25,640 --> 00:22:32,870
this<font color="#E5E5E5"> SMI otherwise this mechanism is</font>

487
00:22:28,130 --> 00:22:34,700
totally use<font color="#E5E5E5"> this but maybe you've</font>

488
00:22:32,870 --> 00:22:37,340
guessed it<font color="#E5E5E5"> but what</font><font color="#CCCCCC"> happens if</font><font color="#E5E5E5"> we write</font>

489
00:22:34,700 --> 00:22:39,110
to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> SPI flash</font><font color="#E5E5E5"> memory before</font><font color="#CCCCCC"> the SMI</font>

490
00:22:37,340 --> 00:22:41,750
handler sets bias<font color="#CCCCCC"> write</font><font color="#E5E5E5"> enable</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> to</font>

491
00:22:39,110 --> 00:22:44,929
<font color="#E5E5E5">to 0 so there's a race condition</font>

492
00:22:41,750 --> 00:22:47,000
vulnerability here<font color="#E5E5E5"> and there's a paper</font>

493
00:22:44,930 --> 00:22:49,490
about<font color="#E5E5E5"> it which</font><font color="#CCCCCC"> is called</font><font color="#E5E5E5"> a speed racer</font>

494
00:22:47,000 --> 00:22:51,440
<font color="#E5E5E5">and to exploit this what you need</font><font color="#CCCCCC"> to do</font>

495
00:22:49,490 --> 00:22:53,960
is in a<font color="#CCCCCC"> 1 thread</font><font color="#E5E5E5"> that continuously set</font>

496
00:22:51,440 --> 00:22:56,720
bias write enable to<font color="#E5E5E5"> 1 while another</font>

497
00:22:53,960 --> 00:22:58,970
<font color="#CCCCCC">thread</font><font color="#E5E5E5"> tries to write the data</font><font color="#CCCCCC"> to the</font>

498
00:22:56,720 --> 00:23:01,040
<font color="#E5E5E5">SPI flash memory</font><font color="#CCCCCC"> and according to</font><font color="#E5E5E5"> this</font>

499
00:22:58,970 --> 00:23:03,080
paper it works on<font color="#E5E5E5"> multi-core processors</font>

500
00:23:01,040 --> 00:23:07,010
as<font color="#CCCCCC"> well as on single core processor with</font>

501
00:23:03,080 --> 00:23:09,199
<font color="#CCCCCC">hyper threading</font><font color="#E5E5E5"> enable so Intel came up</font>

502
00:23:07,010 --> 00:23:10,430
with a fix for this issue<font color="#E5E5E5"> and was</font>

503
00:23:09,200 --> 00:23:12,860
<font color="#E5E5E5">introduced in the platform controller</font>

504
00:23:10,430 --> 00:23:16,340
hub family<font color="#CCCCCC"> Wintel chipsets</font><font color="#E5E5E5"> around 2008</font>

505
00:23:12,860 --> 00:23:18,490
and what they did is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> they added a</font>

506
00:23:16,340 --> 00:23:21,409
field in the bias<font color="#E5E5E5"> control register and</font>

507
00:23:18,490 --> 00:23:24,320
this<font color="#E5E5E5"> fields call</font><font color="#CCCCCC"> SMM bias write</font><font color="#E5E5E5"> protect</font>

508
00:23:21,410 --> 00:23:26,330
<font color="#CCCCCC">disable and did the name is a</font><font color="#E5E5E5"> little bit</font>

509
00:23:24,320 --> 00:23:29,720
misleading<font color="#E5E5E5"> but if you remove disable</font>

510
00:23:26,330 --> 00:23:33,020
that's actually what it<font color="#E5E5E5"> does and if this</font>

511
00:23:29,720 --> 00:23:34,880
<font color="#CCCCCC">mechanism is activated there will be no</font>

512
00:23:33,020 --> 00:23:38,350
other<font color="#CCCCCC"> way to write to the SPX</font><font color="#E5E5E5"> to the</font>

513
00:23:34,880 --> 00:23:40,910
bias<font color="#E5E5E5"> region of the</font><font color="#CCCCCC"> SPI flash memory</font><font color="#E5E5E5"> then</font>

514
00:23:38,350 --> 00:23:42,519
<font color="#CCCCCC">if you don't</font><font color="#E5E5E5"> have all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the cores of</font>

515
00:23:40,910 --> 00:23:45,200
your processor running into it

516
00:23:42,519 --> 00:23:47,779
meaning that<font color="#E5E5E5"> the job</font><font color="#CCCCCC"> of writing</font><font color="#E5E5E5"> to the</font>

517
00:23:45,200 --> 00:23:51,769
<font color="#CCCCCC">spi</font><font color="#E5E5E5"> flash memory is now only available</font>

518
00:23:47,779 --> 00:23:54,110
<font color="#E5E5E5">to system management</font><font color="#CCCCCC"> mode and once again</font>

519
00:23:51,769 --> 00:23:57,100
<font color="#E5E5E5">the firmware must set this bit otherwise</font>

520
00:23:54,110 --> 00:24:02,508
it is otherwise this<font color="#E5E5E5"> mechanism is not</font>

521
00:23:57,100 --> 00:24:04,340
it's<font color="#CCCCCC"> not activated</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> ok so let's go</font>

522
00:24:02,509 --> 00:24:05,870
back to<font color="#E5E5E5"> re write your binary so of</font>

523
00:24:04,340 --> 00:24:07,309
course<font color="#E5E5E5"> if I</font><font color="#CCCCCC"> talk about</font><font color="#E5E5E5"> all of these</font>

524
00:24:05,870 --> 00:24:09,500
mechanism<font color="#CCCCCC"> it's because I</font><font color="#E5E5E5"> rewrite their</font>

525
00:24:07,309 --> 00:24:11,658
binary<font color="#E5E5E5"> checks for them so it will check</font>

526
00:24:09,500 --> 00:24:15,529
in the platform is properly<font color="#E5E5E5"> configured</font>

527
00:24:11,659 --> 00:24:17,320
and it implements<font color="#CCCCCC"> the exploit for the</font>

528
00:24:15,529 --> 00:24:19,480
<font color="#CCCCCC">rate condition</font><font color="#E5E5E5"> that I just spoke about</font>

529
00:24:17,320 --> 00:24:23,210
<font color="#E5E5E5">so let's look at the writing process</font>

530
00:24:19,480 --> 00:24:26,360
<font color="#E5E5E5">decision tree so the first thing that it</font>

531
00:24:23,210 --> 00:24:28,970
<font color="#E5E5E5">will look for is if</font><font color="#CCCCCC"> bias right enable is</font>

532
00:24:26,360 --> 00:24:30,289
set and if bias right enable is set

533
00:24:28,970 --> 00:24:34,820
there and then there's<font color="#E5E5E5"> nothing stopping</font>

534
00:24:30,289 --> 00:24:37,340
<font color="#E5E5E5">it from writing the UEFI image but if it</font>

535
00:24:34,820 --> 00:24:40,399
is not set<font color="#E5E5E5"> then it will check oh is bias</font>

536
00:24:37,340 --> 00:24:42,830
lock enable activated<font color="#E5E5E5"> and this if this</font>

537
00:24:40,399 --> 00:24:45,559
mechanism is not activated<font color="#E5E5E5"> then it will</font>

538
00:24:42,830 --> 00:24:48,980
just<font color="#E5E5E5"> flip</font><font color="#CCCCCC"> bias</font><font color="#E5E5E5"> right enable to 1 and</font>

539
00:24:45,559 --> 00:24:50,330
then it will<font color="#E5E5E5"> write the UEFI image but if</font>

540
00:24:48,980 --> 00:24:54,279
it is activated the last thing it will

541
00:24:50,330 --> 00:24:57,230
check<font color="#E5E5E5"> for is is</font><font color="#CCCCCC"> SMM bias right</font><font color="#E5E5E5"> protect</font>

542
00:24:54,279 --> 00:24:58,820
set<font color="#E5E5E5"> and if it is not</font><font color="#CCCCCC"> set then it will</font>

543
00:24:57,230 --> 00:25:02,389
exploit the race condition that we<font color="#E5E5E5"> spoke</font>

544
00:24:58,820 --> 00:25:05,928
<font color="#CCCCCC">about and if it is not</font><font color="#E5E5E5"> if it is set then</font>

545
00:25:02,389 --> 00:25:09,289
the tool will<font color="#CCCCCC"> just fail so the tool only</font>

546
00:25:05,929 --> 00:25:12,470
<font color="#E5E5E5">works if the platform</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> misconfigure</font>

547
00:25:09,289 --> 00:25:15,649
and we spoke<font color="#E5E5E5"> about SMI flash the</font>

548
00:25:12,470 --> 00:25:17,690
vulnerable next<font color="#CCCCCC"> to driver so yeah what</font>

549
00:25:15,649 --> 00:25:19,789
we think is that by being able to

550
00:25:17,690 --> 00:25:22,070
<font color="#E5E5E5">exploit this vulnerability</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> would</font>

551
00:25:19,789 --> 00:25:25,220
have been able<font color="#E5E5E5"> to have a tool that that</font>

552
00:25:22,070 --> 00:25:28,129
works<font color="#E5E5E5"> even when when the platform is</font>

553
00:25:25,220 --> 00:25:33,259
properly<font color="#E5E5E5"> configured so</font><font color="#CCCCCC"> which it's a</font><font color="#E5E5E5"> very</font>

554
00:25:28,129 --> 00:25:34,820
<font color="#E5E5E5">good example</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> I mean if for more</font>

555
00:25:33,259 --> 00:25:37,340
<font color="#CCCCCC">vendors would have done their job</font>

556
00:25:34,820 --> 00:25:40,250
<font color="#E5E5E5">correctly here this tool would have fail</font>

557
00:25:37,340 --> 00:25:42,649
at flashing the UEFI firmware so that's

558
00:25:40,250 --> 00:25:46,850
a great<font color="#CCCCCC"> example of how you know what</font><font color="#E5E5E5"> for</font>

559
00:25:42,649 --> 00:25:49,668
<font color="#CCCCCC">more security</font><font color="#E5E5E5"> is so here let's just take</font>

560
00:25:46,850 --> 00:25:51,320
a<font color="#E5E5E5"> step</font><font color="#CCCCCC"> back and look at what we have so</font>

561
00:25:49,669 --> 00:25:53,299
what we have is a software

562
00:25:51,320 --> 00:25:56,149
implementation<font color="#CCCCCC"> to flash the firmware</font>

563
00:25:53,299 --> 00:25:58,430
remotely post exploitation<font color="#E5E5E5"> meaning</font>

564
00:25:56,150 --> 00:26:02,090
that as an attacker I can you know in

565
00:25:58,430 --> 00:26:03,560
fact my my target the way I usually<font color="#E5E5E5"> do</font>

566
00:26:02,090 --> 00:26:05,570
let's say by sending a phishing email

567
00:26:03,560 --> 00:26:07,340
<font color="#CCCCCC">and once I have a foothold on</font><font color="#E5E5E5"> the</font>

568
00:26:05,570 --> 00:26:09,950
<font color="#E5E5E5">machine I can use this tool to deploy</font>

569
00:26:07,340 --> 00:26:12,620
the UEFI rootkit<font color="#E5E5E5"> and when we knew about</font>

570
00:26:09,950 --> 00:26:15,740
<font color="#E5E5E5">in the past was hacking teams UEFI a</font>

571
00:26:12,620 --> 00:26:19,129
rootkit<font color="#CCCCCC"> and it needed</font><font color="#E5E5E5"> physical access to</font>

572
00:26:15,740 --> 00:26:21,530
be to be deployed so it's so<font color="#E5E5E5"> much more</font>

573
00:26:19,130 --> 00:26:24,980
convenient to<font color="#E5E5E5"> be able to do it remotely</font>

574
00:26:21,530 --> 00:26:27,350
<font color="#CCCCCC">and let's not</font><font color="#E5E5E5"> here that there's no proof</font>

575
00:26:24,980 --> 00:26:30,230
<font color="#E5E5E5">of hacking teams rootkit being used in a</font>

576
00:26:27,350 --> 00:26:32,540
an actual<font color="#CCCCCC"> cyberattack</font><font color="#E5E5E5"> it has never</font><font color="#CCCCCC"> been</font>

577
00:26:30,230 --> 00:26:35,210
found<font color="#E5E5E5"> on a victim's machine or at least</font>

578
00:26:32,540 --> 00:26:37,909
it was if it had it hasn't<font color="#E5E5E5"> been publicly</font>

579
00:26:35,210 --> 00:26:40,310
disclosed<font color="#E5E5E5"> so what we did at</font><font color="#CCCCCC"> this point</font>

580
00:26:37,910 --> 00:26:42,800
is<font color="#E5E5E5"> that we extracted the UEFI rootkit</font>

581
00:26:40,310 --> 00:26:44,450
from the tool and we looked at ESET<font color="#CCCCCC"> CBF</font>

582
00:26:42,800 --> 00:26:47,840
<font color="#CCCCCC">eye scanner</font><font color="#E5E5E5"> telemetry to see if we can</font>

583
00:26:44,450 --> 00:26:50,000
<font color="#E5E5E5">find something when it turns out that we</font>

584
00:26:47,840 --> 00:26:53,540
found<font color="#CCCCCC"> the if I rootkit in the SPI flash</font>

585
00:26:50,000 --> 00:26:55,310
memory of a<font color="#CCCCCC"> victims machine making it</font>

586
00:26:53,540 --> 00:27:00,220
<font color="#E5E5E5">the first publicly known UEFI root kit</font>

587
00:26:55,310 --> 00:27:11,139
to be used in a in an actual cyberattack

588
00:27:00,220 --> 00:27:15,860
<font color="#CCCCCC">ok so now</font><font color="#E5E5E5"> let's look at the UEFI rootkit</font>

589
00:27:11,140 --> 00:27:17,900
itself so the UEFI rootkit<font color="#E5E5E5"> is a taxi</font>

590
00:27:15,860 --> 00:27:19,580
<font color="#CCCCCC">driver</font><font color="#E5E5E5"> so it is loaded by the</font><font color="#CCCCCC"> Dex</font>

591
00:27:17,900 --> 00:27:22,970
<font color="#E5E5E5">dispatcher every time that the machine</font>

592
00:27:19,580 --> 00:27:25,520
will boot<font color="#CCCCCC"> its filename is sexy as we've</font>

593
00:27:22,970 --> 00:27:28,670
<font color="#E5E5E5">seen earlier</font><font color="#CCCCCC"> and here's the file good</font>

594
00:27:25,520 --> 00:27:32,540
for future reference so let's look<font color="#E5E5E5"> at</font>

595
00:27:28,670 --> 00:27:34,160
the UEFI at the UEFI rootkit workflow so

596
00:27:32,540 --> 00:27:36,409
a UEFI firmware will go through multiple

597
00:27:34,160 --> 00:27:38,600
<font color="#E5E5E5">phases when it boots the first phase is</font>

598
00:27:36,410 --> 00:27:41,060
<font color="#CCCCCC">the security phase the second one is the</font>

599
00:27:38,600 --> 00:27:42,889
pre fi initialization phase and then

600
00:27:41,060 --> 00:27:44,270
there's the<font color="#E5E5E5"> drive execution environment</font>

601
00:27:42,890 --> 00:27:47,570
phase and<font color="#E5E5E5"> that's where it begins to be</font>

602
00:27:44,270 --> 00:27:49,330
interesting for for this rootkit so

603
00:27:47,570 --> 00:27:52,159
that's where the<font color="#E5E5E5"> DEXA dispatcher lives</font>

604
00:27:49,330 --> 00:27:55,100
<font color="#E5E5E5">so that's when all of</font><font color="#CCCCCC"> the Dexy drivers</font>

605
00:27:52,160 --> 00:27:58,700
will<font color="#CCCCCC"> be loaded so at some</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> the UEFI</font>

606
00:27:55,100 --> 00:28:00,260
<font color="#E5E5E5">rootkit will be will be loaded and what</font>

607
00:27:58,700 --> 00:28:03,010
what will happen is that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Rickett</font>

608
00:28:00,260 --> 00:28:05,750
will create an event<font color="#E5E5E5"> attached to efi</font>

609
00:28:03,010 --> 00:28:09,370
<font color="#CCCCCC">group ready to boot and it will bind a</font>

610
00:28:05,750 --> 00:28:12,070
notify function to this to this<font color="#E5E5E5"> Evan</font>

611
00:28:09,370 --> 00:28:13,810
so in the next<font color="#E5E5E5"> phase when the boot</font>

612
00:28:12,070 --> 00:28:16,300
manager will run at some point it<font color="#E5E5E5"> will</font>

613
00:28:13,810 --> 00:28:21,610
it will<font color="#E5E5E5"> signal this event and the notify</font>

614
00:28:16,300 --> 00:28:24,190
function will be will<font color="#CCCCCC"> be called so the</font>

615
00:28:21,610 --> 00:28:26,199
notify function does three<font color="#CCCCCC"> things</font><font color="#E5E5E5"> the</font>

616
00:28:24,190 --> 00:28:29,560
first<font color="#CCCCCC"> thing is that it will</font><font color="#E5E5E5"> install ntfs</font>

617
00:28:26,200 --> 00:28:33,040
driver then it will drop<font color="#E5E5E5"> but to cheetah</font>

618
00:28:29,560 --> 00:28:35,409
<font color="#CCCCCC">XZ and</font><font color="#E5E5E5"> RPC net</font><font color="#CCCCCC"> peta digsy using this</font>

619
00:28:33,040 --> 00:28:40,360
ntfs driver<font color="#CCCCCC"> and finally</font><font color="#E5E5E5"> will patch a</font>

620
00:28:35,410 --> 00:28:42,400
value in the Windows<font color="#CCCCCC"> registry</font><font color="#E5E5E5"> so the</font>

621
00:28:40,360 --> 00:28:43,990
intestine<font color="#E5E5E5"> the ntfs driver is needed to</font>

622
00:28:42,400 --> 00:28:48,760
get file based<font color="#CCCCCC"> access to Windows</font>

623
00:28:43,990 --> 00:28:51,100
partition<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Senate separator did not</font>

624
00:28:48,760 --> 00:28:53,350
write their own<font color="#E5E5E5"> ntfs driver</font><font color="#CCCCCC"> what they</font>

625
00:28:51,100 --> 00:28:59,310
did is that<font color="#CCCCCC"> they they use hacking teams</font>

626
00:28:53,350 --> 00:29:01,719
ntfs driver from<font color="#CCCCCC"> acting teams leaked and</font>

627
00:28:59,310 --> 00:29:03,790
yeah so here's<font color="#E5E5E5"> the called responsible</font>

628
00:29:01,720 --> 00:29:05,980
for dropping the<font color="#E5E5E5"> file so as we can see</font>

629
00:29:03,790 --> 00:29:08,830
<font color="#E5E5E5">here</font><font color="#CCCCCC"> this dropping our PC net</font><font color="#E5E5E5"> Peter</font>

630
00:29:05,980 --> 00:29:13,030
<font color="#CCCCCC">digsy and here it is</font><font color="#E5E5E5"> dropping</font><font color="#CCCCCC"> a Tucci</font>

631
00:29:08,830 --> 00:29:16,090
<font color="#E5E5E5">that that agree and the last step is</font><font color="#CCCCCC"> to</font>

632
00:29:13,030 --> 00:29:17,889
patch the Windows<font color="#E5E5E5"> registry so how it</font>

633
00:29:16,090 --> 00:29:21,040
does that<font color="#CCCCCC"> is that it will open the file</font>

634
00:29:17,890 --> 00:29:23,530
backing the<font color="#CCCCCC"> htlm system registry</font><font color="#E5E5E5"> hive</font>

635
00:29:21,040 --> 00:29:26,920
<font color="#E5E5E5">and it doesn't have all the logic to</font>

636
00:29:23,530 --> 00:29:29,050
parse Windows registry<font color="#E5E5E5"> structures so it</font>

637
00:29:26,920 --> 00:29:30,970
will only look for a textual pattern and

638
00:29:29,050 --> 00:29:33,159
the textual pattern will<font color="#E5E5E5"> look for is to</font>

639
00:29:30,970 --> 00:29:36,250
<font color="#CCCCCC">check out to check star and it will</font>

640
00:29:33,160 --> 00:29:38,410
change it<font color="#CCCCCC"> to check to chi star and it</font>

641
00:29:36,250 --> 00:29:41,950
happens to<font color="#CCCCCC"> be modifying</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> buddha</font>

642
00:29:38,410 --> 00:29:44,080
execute key so the buddha execute key is

643
00:29:41,950 --> 00:29:46,330
the key responsible for launching<font color="#CCCCCC"> or to</font>

644
00:29:44,080 --> 00:29:50,290
<font color="#E5E5E5">check that exceed during</font><font color="#CCCCCC"> Windows early</font>

645
00:29:46,330 --> 00:29:52,389
boot<font color="#E5E5E5"> so by modifying it to</font><font color="#CCCCCC"> Auto Chi</font>

646
00:29:50,290 --> 00:29:54,129
instead of<font color="#CCCCCC"> auto check that's to</font><font color="#E5E5E5"> cheat</font>

647
00:29:52,390 --> 00:29:57,610
<font color="#CCCCCC">exceeded</font><font color="#E5E5E5"> will be executed instead of</font>

648
00:29:54,130 --> 00:30:00,190
<font color="#E5E5E5">auto check and so here if</font><font color="#CCCCCC"> we go back</font><font color="#E5E5E5"> to</font>

649
00:29:57,610 --> 00:30:02,770
the UEFI<font color="#E5E5E5"> rootkits workflow</font><font color="#CCCCCC"> when the</font>

650
00:30:00,190 --> 00:30:04,630
operating<font color="#E5E5E5"> system</font><font color="#CCCCCC"> will run then it will I</font>

651
00:30:02,770 --> 00:30:06,310
will<font color="#CCCCCC"> be the</font><font color="#E5E5E5"> cuter to cheated eggsy</font>

652
00:30:04,630 --> 00:30:08,320
when<font color="#E5E5E5"> otoshi</font><font color="#CCCCCC"> Alexa</font><font color="#E5E5E5"> will will drop the</font>

653
00:30:06,310 --> 00:30:11,379
small<font color="#CCCCCC"> agent the RPC net periodically and</font>

654
00:30:08,320 --> 00:30:14,080
so on<font color="#E5E5E5"> but what's interesting here is</font>

655
00:30:11,380 --> 00:30:15,280
<font color="#CCCCCC">that it will revert back the</font>

656
00:30:14,080 --> 00:30:19,090
modification in the<font color="#E5E5E5"> Windows registry</font>

657
00:30:15,280 --> 00:30:21,820
<font color="#E5E5E5">from a to cheat to auto check so that</font><font color="#CCCCCC"> as</font>

658
00:30:19,090 --> 00:30:23,020
a Windows user for<font color="#E5E5E5"> instance if I look</font><font color="#CCCCCC"> in</font>

659
00:30:21,820 --> 00:30:25,090
the Windows registry

660
00:30:23,020 --> 00:30:28,090
I won't find that<font color="#E5E5E5"> anything any</font>

661
00:30:25,090 --> 00:30:30,250
modification occurred there so that's a

662
00:30:28,090 --> 00:30:32,080
pretty<font color="#E5E5E5"> interesting stealth technique</font>

663
00:30:30,250 --> 00:30:36,179
that is enabled by the<font color="#CCCCCC"> fact that the</font>

664
00:30:32,080 --> 00:30:36,178
malware<font color="#E5E5E5"> is coming from from the firmware</font>

665
00:30:36,480 --> 00:30:43,809
<font color="#CCCCCC">okay so the last thing</font><font color="#E5E5E5"> that I want</font><font color="#CCCCCC"> to</font>

666
00:30:40,000 --> 00:30:47,920
talk about now is prevention<font color="#CCCCCC"> and</font>

667
00:30:43,809 --> 00:30:49,450
remediation so what can<font color="#E5E5E5"> you do if in</font>

668
00:30:47,920 --> 00:30:52,030
fact<font color="#CCCCCC"> one can you do to</font><font color="#E5E5E5"> protect yourself</font>

669
00:30:49,450 --> 00:30:54,700
<font color="#E5E5E5">against this kind this kind</font><font color="#CCCCCC"> of attack</font>

670
00:30:52,030 --> 00:30:56,379
<font color="#CCCCCC">and</font><font color="#E5E5E5"> if ever you</font><font color="#CCCCCC"> were you find</font><font color="#E5E5E5"> out that</font>

671
00:30:54,700 --> 00:31:00,330
<font color="#E5E5E5">you you have a UEFI rootkit in your</font>

672
00:30:56,380 --> 00:31:04,090
machine<font color="#E5E5E5"> what what can you do</font>

673
00:31:00,330 --> 00:31:07,449
so<font color="#E5E5E5"> prevention so the first thing in the</font>

674
00:31:04,090 --> 00:31:10,750
most important thing which is<font color="#CCCCCC"> also the</font>

675
00:31:07,450 --> 00:31:13,450
<font color="#E5E5E5">most accessible thing thankfully is that</font>

676
00:31:10,750 --> 00:31:15,670
you should keep your UEFI firmware of

677
00:31:13,450 --> 00:31:17,770
today to make sure<font color="#CCCCCC"> that if you know</font>

678
00:31:15,670 --> 00:31:21,690
security<font color="#E5E5E5"> researchers</font><font color="#CCCCCC"> found some issues</font>

679
00:31:17,770 --> 00:31:25,000
<font color="#E5E5E5">with with your firmware and they</font>

680
00:31:21,690 --> 00:31:26,740
disclosed it and the firm or vendor

681
00:31:25,000 --> 00:31:29,320
<font color="#E5E5E5">fixed them you want to</font><font color="#CCCCCC"> make sure that</font>

682
00:31:26,740 --> 00:31:32,559
you have the latest patches<font color="#CCCCCC"> available on</font>

683
00:31:29,320 --> 00:31:34,600
your<font color="#E5E5E5"> and your machine then the second</font>

684
00:31:32,559 --> 00:31:36,730
thing<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that you should really enable</font>

685
00:31:34,600 --> 00:31:38,770
secure boot<font color="#E5E5E5"> but let's not</font><font color="#CCCCCC"> hear</font><font color="#E5E5E5"> that</font>

686
00:31:36,730 --> 00:31:40,870
secure boot itself would<font color="#CCCCCC"> not have</font>

687
00:31:38,770 --> 00:31:42,879
predicted<font color="#CCCCCC"> you against this specific</font>

688
00:31:40,870 --> 00:31:45,129
<font color="#E5E5E5">attack and the reason</font><font color="#CCCCCC"> for that</font><font color="#E5E5E5"> is that</font>

689
00:31:42,880 --> 00:31:47,860
<font color="#E5E5E5">secure boot takes the content of the</font><font color="#CCCCCC"> SPI</font>

690
00:31:45,130 --> 00:31:50,440
flash<font color="#E5E5E5"> memory as its root of trust</font>

691
00:31:47,860 --> 00:31:54,669
meaning that<font color="#E5E5E5"> what's inside the</font><font color="#CCCCCC"> SPI flash</font>

692
00:31:50,440 --> 00:31:57,550
memory is not subject for validation<font color="#E5E5E5"> so</font>

693
00:31:54,670 --> 00:31:59,530
what does it validates then right well

694
00:31:57,550 --> 00:32:01,300
secure boot will check what's coming

695
00:31:59,530 --> 00:32:03,240
from<font color="#CCCCCC"> outside of the SPI flash memory</font>

696
00:32:01,300 --> 00:32:05,590
<font color="#CCCCCC">meaning</font><font color="#E5E5E5"> is the PCI option roms and</font>

697
00:32:03,240 --> 00:32:07,420
probably the most important thing<font color="#CCCCCC"> the</font>

698
00:32:05,590 --> 00:32:09,820
operating<font color="#E5E5E5"> system our</font><font color="#CCCCCC"> loaders so it's</font>

699
00:32:07,420 --> 00:32:12,250
really a mechanism<font color="#E5E5E5"> that checks that the</font>

700
00:32:09,820 --> 00:32:14,830
operating system loader<font color="#E5E5E5"> hasn't it hasn't</font>

701
00:32:12,250 --> 00:32:17,200
been<font color="#CCCCCC"> tampered with so what can we do</font>

702
00:32:14,830 --> 00:32:19,600
then right well what we need is<font color="#CCCCCC"> a</font>

703
00:32:17,200 --> 00:32:22,150
<font color="#E5E5E5">hardware root of trust so we need to</font>

704
00:32:19,600 --> 00:32:23,919
move the root of trust<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> SPI</font>

705
00:32:22,150 --> 00:32:27,160
flash memory into some<font color="#CCCCCC"> some piece of</font>

706
00:32:23,920 --> 00:32:30,610
hardware so it must be<font color="#E5E5E5"> in a you know one</font>

707
00:32:27,160 --> 00:32:32,500
time for<font color="#CCCCCC"> grama Bowl chip that</font><font color="#E5E5E5"> is that is</font>

708
00:32:30,610 --> 00:32:36,649
<font color="#CCCCCC">programmed</font><font color="#E5E5E5"> during manufacturing time and</font>

709
00:32:32,500 --> 00:32:41,330
that cannot be<font color="#E5E5E5"> written to ever after</font>

710
00:32:36,650 --> 00:32:43,190
and example of this exists a<font color="#E5E5E5"> technology</font>

711
00:32:41,330 --> 00:32:47,389
like Intel<font color="#CCCCCC"> boot guard implements this</font>

712
00:32:43,190 --> 00:32:50,930
<font color="#E5E5E5">and also</font><font color="#CCCCCC"> Apple t2 security chip has a</font>

713
00:32:47,390 --> 00:32:53,210
hardware root of<font color="#CCCCCC"> trust and then</font><font color="#E5E5E5"> you kind</font>

714
00:32:50,930 --> 00:32:55,090
of need<font color="#CCCCCC"> to hope</font><font color="#E5E5E5"> that your firmware</font>

715
00:32:53,210 --> 00:32:57,770
configures the<font color="#E5E5E5"> security mechanisms</font>

716
00:32:55,090 --> 00:32:59,800
<font color="#E5E5E5">properly and there's not much</font><font color="#CCCCCC"> you can do</font>

717
00:32:57,770 --> 00:33:02,600
about<font color="#CCCCCC"> it if your firmware</font><font color="#E5E5E5"> is up to date</font>

718
00:32:59,800 --> 00:33:04,639
<font color="#E5E5E5">but thankfully there</font><font color="#CCCCCC"> are for</font><font color="#E5E5E5"> more</font>

719
00:33:02,600 --> 00:33:07,149
security assessment tool available out

720
00:33:04,640 --> 00:33:11,450
there<font color="#CCCCCC"> and an</font><font color="#E5E5E5"> example of that is Intel</font>

721
00:33:07,150 --> 00:33:13,640
chipset<font color="#E5E5E5"> so with Intel chips</font><font color="#CCCCCC"> which is an</font>

722
00:33:11,450 --> 00:33:16,940
<font color="#E5E5E5">open source software</font><font color="#CCCCCC"> - so you can just</font>

723
00:33:13,640 --> 00:33:19,790
<font color="#CCCCCC">download this</font><font color="#E5E5E5"> this tool put it in a USB</font>

724
00:33:16,940 --> 00:33:21,650
key boot<font color="#E5E5E5"> from it and then this tool will</font>

725
00:33:19,790 --> 00:33:23,450
check for<font color="#E5E5E5"> all of the security mechanism</font>

726
00:33:21,650 --> 00:33:25,190
that we spoke<font color="#CCCCCC"> about today</font><font color="#E5E5E5"> we'll check if</font>

727
00:33:23,450 --> 00:33:27,650
they<font color="#CCCCCC"> are properly configured</font><font color="#E5E5E5"> and it also</font>

728
00:33:25,190 --> 00:33:31,940
checks for a bunch<font color="#E5E5E5"> more</font><font color="#CCCCCC"> a bunch more</font>

729
00:33:27,650 --> 00:33:35,300
<font color="#E5E5E5">stuff and now also chips tech checks if</font>

730
00:33:31,940 --> 00:33:38,690
your<font color="#E5E5E5"> firmware has this LoJack LoJack's</font>

731
00:33:35,300 --> 00:33:41,090
rootkit so if you want to know if your

732
00:33:38,690 --> 00:33:42,650
firmware properly configures<font color="#CCCCCC"> the</font>

733
00:33:41,090 --> 00:33:50,000
security mechanism that's really the way

734
00:33:42,650 --> 00:33:53,450
to go now about remediation so this

735
00:33:50,000 --> 00:33:55,250
slide<font color="#E5E5E5"> is kind of kind of short and the</font>

736
00:33:53,450 --> 00:33:57,260
reason<font color="#CCCCCC"> for that is that if you</font><font color="#E5E5E5"> find out</font>

737
00:33:55,250 --> 00:34:00,320
<font color="#E5E5E5">that your you have a UEFI rootkit in</font>

738
00:33:57,260 --> 00:34:01,879
your<font color="#E5E5E5"> new</font><font color="#CCCCCC"> spi</font><font color="#E5E5E5"> flash</font><font color="#CCCCCC"> there's not pretty</font>

739
00:34:00,320 --> 00:34:04,760
much<font color="#E5E5E5"> you can do you really need to</font>

740
00:34:01,880 --> 00:34:06,590
reflash your UEFI firmware<font color="#E5E5E5"> and that's</font>

741
00:34:04,760 --> 00:34:10,550
definitely<font color="#CCCCCC"> not something that is easy to</font>

742
00:34:06,590 --> 00:34:12,379
<font color="#E5E5E5">do for anybody and well if it's not an</font>

743
00:34:10,550 --> 00:34:15,679
<font color="#E5E5E5">option for</font><font color="#CCCCCC"> you then you kind of need to</font>

744
00:34:12,379 --> 00:34:18,379
<font color="#E5E5E5">get rid of your motherboard or your</font>

745
00:34:15,679 --> 00:34:20,149
laptop<font color="#E5E5E5"> and get a new</font><font color="#CCCCCC"> one basically so</font>

746
00:34:18,379 --> 00:34:24,710
that's<font color="#E5E5E5"> how serious this kind of attack</font>

747
00:34:20,149 --> 00:34:29,179
<font color="#E5E5E5">is now our conclusion</font>

748
00:34:24,710 --> 00:34:31,250
so our<font color="#E5E5E5"> research shows that UEFI root</font>

749
00:34:29,179 --> 00:34:34,460
kits are not<font color="#E5E5E5"> only toys for researchers</font>

750
00:34:31,250 --> 00:34:34,940
<font color="#CCCCCC">to play with but</font><font color="#E5E5E5"> they are real word</font>

751
00:34:34,460 --> 00:34:38,510
<font color="#CCCCCC">threats</font>

752
00:34:34,940 --> 00:34:40,668
<font color="#E5E5E5">used in actual</font><font color="#CCCCCC"> cyberattacks</font><font color="#E5E5E5"> so it might</font>

753
00:34:38,510 --> 00:34:44,149
<font color="#E5E5E5">be something that you want to keep in</font>

754
00:34:40,668 --> 00:34:47,290
mind<font color="#CCCCCC"> when you'll be</font><font color="#E5E5E5"> defining your threat</font>

755
00:34:44,149 --> 00:34:49,730
<font color="#CCCCCC">model also</font><font color="#E5E5E5"> we won't stress this enough</font>

756
00:34:47,290 --> 00:34:50,239
<font color="#CCCCCC">firmware must be built with security in</font>

757
00:34:49,730 --> 00:34:53,330
mind

758
00:34:50,239 --> 00:34:54,589
from from the bottom up and<font color="#CCCCCC"> things are</font>

759
00:34:53,330 --> 00:34:55,940
<font color="#CCCCCC">getting better because there are more</font>

760
00:34:54,590 --> 00:34:59,630
<font color="#E5E5E5">and more security researchers looking</font>

761
00:34:55,940 --> 00:35:03,770
<font color="#E5E5E5">into this but</font><font color="#CCCCCC"> there still work to do and</font>

762
00:34:59,630 --> 00:35:05,540
<font color="#CCCCCC">then hopefully our research helped share</font>

763
00:35:03,770 --> 00:35:10,820
knowledge<font color="#E5E5E5"> about how to prevent and</font>

764
00:35:05,540 --> 00:35:14,060
<font color="#E5E5E5">mitigate UEFI</font><font color="#CCCCCC"> Bay's threats so that is</font>

765
00:35:10,820 --> 00:35:16,670
pretty much<font color="#E5E5E5"> it</font><font color="#CCCCCC"> for me today</font>

766
00:35:14,060 --> 00:35:17,840
<font color="#E5E5E5">so thank</font><font color="#CCCCCC"> you for for</font><font color="#E5E5E5"> having me and if</font>

767
00:35:16,670 --> 00:35:20,540
ever you're interested to know more

768
00:35:17,840 --> 00:35:22,550
<font color="#CCCCCC">details about about this research</font><font color="#E5E5E5"> the</font>

769
00:35:20,540 --> 00:35:24,820
white paper<font color="#E5E5E5"> is available</font><font color="#CCCCCC"> at we live</font>

770
00:35:22,550 --> 00:35:27,550
security<font color="#CCCCCC"> comm and you can grab a copy</font>

771
00:35:24,820 --> 00:35:28,060
there<font color="#CCCCCC"> so</font><font color="#E5E5E5"> thanks</font>

772
00:35:27,550 --> 00:35:34,429
[Applause]

773
00:35:28,060 --> 00:35:34,429
[Music]

774
00:35:37,300 --> 00:35:40,379
[Music]

775
00:35:57,250 --> 00:36:01,990
in this case well that's kind of the

776
00:35:59,230 --> 00:36:05,140
<font color="#E5E5E5">pretty much the only one were aware of</font>

777
00:36:01,990 --> 00:36:07,930
apart from hacking teams<font color="#CCCCCC"> UV fi rootkit</font>

778
00:36:05,140 --> 00:36:10,210
<font color="#E5E5E5">and this one only works on the windows</font>

779
00:36:07,930 --> 00:36:13,480
so we<font color="#E5E5E5"> have no we don't know</font><font color="#CCCCCC"> about any</font>

780
00:36:10,210 --> 00:36:15,570
other that the targets<font color="#CCCCCC"> linux or mac</font><font color="#E5E5E5"> OS</font>

781
00:36:13,480 --> 00:36:18,070
<font color="#E5E5E5">pointers</font>

782
00:36:15,570 --> 00:36:19,980
please refrain from walking in<font color="#E5E5E5"> front of</font>

783
00:36:18,070 --> 00:36:21,210
the cameras when you leave me thank you

784
00:36:19,980 --> 00:36:23,440
[Music]

785
00:36:21,210 --> 00:36:25,680
could we get microphone number<font color="#CCCCCC"> two</font>

786
00:36:23,440 --> 00:36:25,680
please

787
00:36:36,820 --> 00:36:47,050
it's called UEFI<font color="#CCCCCC"> too</font><font color="#E5E5E5"> so you can find it</font>

788
00:36:42,339 --> 00:36:49,990
on github as the<font color="#E5E5E5"> internet</font><font color="#CCCCCC"> please</font>

789
00:36:47,050 --> 00:36:53,349
<font color="#E5E5E5">well thank you just the route could</font><font color="#CCCCCC"> kit</font>

790
00:36:49,990 --> 00:37:00,160
also<font color="#E5E5E5"> work when the you</font><font color="#CCCCCC"> efe is in bios</font>

791
00:36:53,349 --> 00:37:05,800
legacy mode that is a pretty<font color="#E5E5E5"> good</font>

792
00:37:00,160 --> 00:37:07,180
question<font color="#CCCCCC"> I think it should but</font><font color="#E5E5E5"> I I'm not</font>

793
00:37:05,800 --> 00:37:10,960
sure<font color="#E5E5E5"> about it that's a that's a good</font>

794
00:37:07,180 --> 00:37:14,490
<font color="#CCCCCC">question</font><font color="#E5E5E5"> I I'd have to look into this to</font>

795
00:37:10,960 --> 00:37:18,250
have a a an<font color="#E5E5E5"> answer I'm 100% sure about</font>

796
00:37:14,490 --> 00:37:23,740
sorry for that microphone<font color="#CCCCCC"> on the screen</font>

797
00:37:18,250 --> 00:37:28,180
please<font color="#E5E5E5"> it's you in</font><font color="#CCCCCC"> the back</font><font color="#E5E5E5"> I you know</font>

798
00:37:23,740 --> 00:37:34,680
that's<font color="#CCCCCC"> fall I'm sorry so that's the</font><font color="#E5E5E5"> you</font>

799
00:37:28,180 --> 00:37:35,830
if you I think<font color="#CCCCCC"> it's the</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> enabled</font><font color="#CCCCCC"> I</font>

800
00:37:34,680 --> 00:37:39,430
know

801
00:37:35,830 --> 00:37:42,490
oh yeah yeah yeah we test death no it<font color="#CCCCCC"> it</font>

802
00:37:39,430 --> 00:37:47,140
doesn't<font color="#E5E5E5"> work if BitLocker is enabled so</font>

803
00:37:42,490 --> 00:37:50,410
it doesn't wait for<font color="#E5E5E5"> the the for</font>

804
00:37:47,140 --> 00:37:52,720
<font color="#CCCCCC">BitLocker to</font><font color="#E5E5E5"> have decrypted all of the</font>

805
00:37:50,410 --> 00:37:58,560
data<font color="#E5E5E5"> so now it doesn't work if the</font>

806
00:37:52,720 --> 00:37:58,560
<font color="#CCCCCC">clickers enabled number one place</font>

807
00:38:11,500 --> 00:38:16,130
I'm not sure I heard all<font color="#CCCCCC"> of the question</font>

808
00:38:14,119 --> 00:38:24,819
but if it works<font color="#E5E5E5"> if there's oldest</font>

809
00:38:16,130 --> 00:38:28,279
encryption is it the question<font color="#E5E5E5"> right</font><font color="#CCCCCC"> I</font>

810
00:38:24,819 --> 00:38:30,589
think it should<font color="#CCCCCC"> be because the LoJack</font>

811
00:38:28,279 --> 00:38:33,650
<font color="#E5E5E5">software is legitimate one the NT test</font>

812
00:38:30,589 --> 00:38:36,769
solution<font color="#E5E5E5"> they are able to make it work</font>

813
00:38:33,650 --> 00:38:39,230
even<font color="#E5E5E5"> if BitLocker is is enabled or full</font>

814
00:38:36,769 --> 00:38:43,308
full disk encryption so yeah it should

815
00:38:39,230 --> 00:38:45,500
<font color="#CCCCCC">be possible to</font><font color="#E5E5E5"> do so one more</font><font color="#CCCCCC"> Internet</font>

816
00:38:43,309 --> 00:38:48,200
<font color="#E5E5E5">question please thank you</font>

817
00:38:45,500 --> 00:38:51,849
what if<font color="#E5E5E5"> a rootkit doesn't fit in the</font><font color="#CCCCCC"> SPI</font>

818
00:38:48,200 --> 00:38:56,750
<font color="#CCCCCC">flash is filling up the</font><font color="#E5E5E5"> spi flash space</font>

819
00:38:51,849 --> 00:38:58,839
<font color="#E5E5E5">completely a valid prevention no I don't</font>

820
00:38:56,750 --> 00:39:01,880
know we could<font color="#CCCCCC"> really call it a</font>

821
00:38:58,839 --> 00:39:03,950
prevention mechanism but yeah if there's

822
00:39:01,880 --> 00:39:08,440
not enough free space available<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font>

823
00:39:03,950 --> 00:39:08,439
firmware volumes<font color="#E5E5E5"> the tool will just fail</font>

824
00:39:08,769 --> 00:39:16,038
number<font color="#E5E5E5"> two please hi</font><font color="#CCCCCC"> you said there is</font>

825
00:39:12,980 --> 00:39:17,660
no a real possibility to secure

826
00:39:16,039 --> 00:39:20,359
everything<font color="#E5E5E5"> but what are your daily</font>

827
00:39:17,660 --> 00:39:24,308
<font color="#E5E5E5">choices that you use like on your</font>

828
00:39:20,359 --> 00:39:32,839
personal computer<font color="#E5E5E5"> to be fully secured</font>

829
00:39:24,309 --> 00:39:37,220
well I could say<font color="#CCCCCC"> Sandahl but yeah if you</font>

830
00:39:32,839 --> 00:39:39,680
have a modern<font color="#E5E5E5"> Intel CPU and you have</font>

831
00:39:37,220 --> 00:39:43,069
secure boot<font color="#E5E5E5"> enabled and you have you</font>

832
00:39:39,680 --> 00:39:45,980
<font color="#CCCCCC">know all of</font><font color="#E5E5E5"> the latest UEFI for more</font>

833
00:39:43,069 --> 00:39:49,640
updates<font color="#E5E5E5"> that's kind of the best</font><font color="#CCCCCC"> you can</font>

834
00:39:45,980 --> 00:39:51,260
<font color="#E5E5E5">you can do</font><font color="#CCCCCC"> to to be safe Franky</font><font color="#E5E5E5"> I guess</font>

835
00:39:49,640 --> 00:39:56,109
that kind of<font color="#E5E5E5"> may have</font>

836
00:39:51,260 --> 00:39:56,110
like this number one<font color="#CCCCCC"> in peace</font>

837
00:39:57,070 --> 00:40:04,020
the configuration<font color="#E5E5E5"> file is the</font>

838
00:40:06,390 --> 00:40:12,310
no no the configure in fact<font color="#CCCCCC"> it's there</font>

839
00:40:09,880 --> 00:40:15,670
it's<font color="#E5E5E5"> not a separate configuration file</font>

840
00:40:12,310 --> 00:40:17,950
the<font color="#E5E5E5"> configuration is embedded inside the</font>

841
00:40:15,670 --> 00:40:22,330
executable<font color="#CCCCCC"> so it is</font><font color="#E5E5E5"> embedded into</font><font color="#CCCCCC"> our be</font>

842
00:40:17,950 --> 00:40:25,330
seen at<font color="#E5E5E5"> periodically and fortunately we</font>

843
00:40:22,330 --> 00:40:26,600
are already out of<font color="#E5E5E5"> time so please thank</font>

844
00:40:25,330 --> 00:40:32,090
<font color="#E5E5E5">our speaker again</font>

845
00:40:26,600 --> 00:40:32,089
[Applause]

846
00:40:32,280 --> 00:40:39,449
[Music]

847
00:40:41,520 --> 00:40:54,179
[Music]

