1
00:00:02,830 --> 00:00:15,470
[Music]

2
00:00:17,359 --> 00:00:22,590
the next talk is by<font color="#CCCCCC"> Hannah's minute you</font>

3
00:00:21,270 --> 00:00:24,900
can see him here already

4
00:00:22,590 --> 00:00:29,820
it's called transmission<font color="#E5E5E5"> control</font>

5
00:00:24,900 --> 00:00:32,009
protocol<font color="#E5E5E5"> also known as TCP and Hannah's</font>

6
00:00:29,820 --> 00:00:34,110
<font color="#CCCCCC">me networks</font><font color="#E5E5E5"> at a nonprofit organization</font>

7
00:00:32,009 --> 00:00:37,170
<font color="#E5E5E5">in Berlin it's called</font><font color="#CCCCCC"> Centre for</font><font color="#E5E5E5"> the</font>

8
00:00:34,110 --> 00:00:41,309
<font color="#CCCCCC">cultivation of Technology and he also</font>

9
00:00:37,170 --> 00:00:45,780
works<font color="#E5E5E5"> on an on an open know what is</font>

10
00:00:41,309 --> 00:00:48,269
<font color="#CCCCCC">Mirage OS if you don't know it</font><font color="#E5E5E5"> maybe you</font>

11
00:00:45,780 --> 00:00:51,840
can find out what it is<font color="#CCCCCC"> and</font><font color="#E5E5E5"> here we</font>

12
00:00:48,270 --> 00:00:55,050
<font color="#CCCCCC">researchers in</font><font color="#E5E5E5"> several engineering areas</font>

13
00:00:51,840 --> 00:00:58,170
such as programming languages<font color="#CCCCCC"> network</font>

14
00:00:55,050 --> 00:01:00,809
protocols<font color="#E5E5E5"> security protocols and many</font>

15
00:00:58,170 --> 00:01:02,320
many more<font color="#E5E5E5"> so give him a warm applause</font>

16
00:01:00,809 --> 00:01:02,750
for his talk

17
00:01:02,320 --> 00:01:09,810
[Applause]

18
00:01:02,750 --> 00:01:13,120
[Music]

19
00:01:09,810 --> 00:01:15,550
thank you yes<font color="#CCCCCC"> today I want to talk a bit</font>

20
00:01:13,120 --> 00:01:18,730
about the<font color="#E5E5E5"> transmission</font><font color="#CCCCCC"> control protocol</font>

21
00:01:15,550 --> 00:01:21,729
and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Internet Protocol suite</font><font color="#E5E5E5"> so what</font>

22
00:01:18,730 --> 00:01:25,750
is it all about<font color="#CCCCCC"> its foundation talk here</font>

23
00:01:21,730 --> 00:01:28,780
so if you already know tcp/ip by heart

24
00:01:25,750 --> 00:01:31,690
then maybe only<font color="#E5E5E5"> the last five minutes</font>

25
00:01:28,780 --> 00:01:34,420
<font color="#CCCCCC">will be of</font><font color="#E5E5E5"> interest for you otherwise so</font>

26
00:01:31,690 --> 00:01:36,280
if you if you want<font color="#E5E5E5"> to connect your</font>

27
00:01:34,420 --> 00:01:39,670
<font color="#CCCCCC">laptop or if</font><font color="#E5E5E5"> you want to browse</font><font color="#CCCCCC"> to a</font>

28
00:01:36,280 --> 00:01:42,460
<font color="#CCCCCC">website somewhere</font><font color="#E5E5E5"> you want</font><font color="#CCCCCC"> to read their</font>

29
00:01:39,670 --> 00:01:45,340
website it<font color="#E5E5E5"> is that the client on your</font>

30
00:01:42,460 --> 00:01:48,729
<font color="#E5E5E5">laptop</font><font color="#CCCCCC"> so the web browser that sends an</font>

31
00:01:45,340 --> 00:01:52,300
HTTP request<font color="#CCCCCC"> to the web</font><font color="#E5E5E5"> server host so</font>

32
00:01:48,730 --> 00:01:56,890
<font color="#CCCCCC">sends an HTTP request which is specified</font>

33
00:01:52,300 --> 00:02:01,420
<font color="#CCCCCC">by</font><font color="#E5E5E5"> the HTTP protocol</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> maybe get slash</font>

34
00:01:56,890 --> 00:02:05,260
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> a common method of getting the main</font>

35
00:02:01,420 --> 00:02:07,990
page of<font color="#CCCCCC"> a website</font><font color="#E5E5E5"> but how is this</font>

36
00:02:05,260 --> 00:02:10,030
information<font color="#CCCCCC"> actually transmitted to</font><font color="#E5E5E5"> the</font>

37
00:02:07,990 --> 00:02:12,310
server<font color="#E5E5E5"> that is the question and the</font>

38
00:02:10,030 --> 00:02:16,510
motivation for this talk<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that is</font>

39
00:02:12,310 --> 00:02:18,700
something I<font color="#E5E5E5"> want to go deep into into</font>

40
00:02:16,510 --> 00:02:20,799
<font color="#E5E5E5">that into the answer for the question</font><font color="#CCCCCC"> so</font>

41
00:02:18,700 --> 00:02:23,530
let's look a bit about the at the

42
00:02:20,800 --> 00:02:26,320
network<font color="#CCCCCC"> top</font><font color="#E5E5E5"> topology so on the left hand</font>

43
00:02:23,530 --> 00:02:28,870
side we have<font color="#E5E5E5"> the laptop which sends to</font>

44
00:02:26,320 --> 00:02:31,720
some server<font color="#E5E5E5"> a get request you can see</font>

45
00:02:28,870 --> 00:02:33,940
that by the dashed arrow and the<font color="#E5E5E5"> laptop</font>

46
00:02:31,720 --> 00:02:37,420
itself is connected likely we are

47
00:02:33,940 --> 00:02:39,100
wireless network to the<font color="#CCCCCC"> Internet but</font>

48
00:02:37,420 --> 00:02:42,309
what is actually<font color="#CCCCCC"> the Internet well the</font>

49
00:02:39,100 --> 00:02:45,670
<font color="#E5E5E5">Internet is a collection of computers</font>

50
00:02:42,310 --> 00:02:47,920
<font color="#E5E5E5">and your laptop or anyone's mobile phone</font>

51
00:02:45,670 --> 00:02:52,988
is<font color="#CCCCCC"> slightly connected to a router router</font>

52
00:02:47,920 --> 00:02:55,630
is just a normal computer which has<font color="#E5E5E5"> some</font>

53
00:02:52,989 --> 00:02:57,760
knowledge<font color="#E5E5E5"> about the network and that</font>

54
00:02:55,630 --> 00:03:00,700
router is<font color="#CCCCCC"> slightly connected we are</font>

55
00:02:57,760 --> 00:03:03,730
<font color="#E5E5E5">fiber or satellite or any other link</font>

56
00:03:00,700 --> 00:03:07,000
like can also be in<font color="#E5E5E5"> a band cable to</font>

57
00:03:03,730 --> 00:03:15,820
another router or to several routers and

58
00:03:07,000 --> 00:03:18,370
this then<font color="#E5E5E5"> this in this picture you can</font>

59
00:03:15,820 --> 00:03:20,650
only see<font color="#E5E5E5"> two routers</font><font color="#CCCCCC"> in the router a and</font>

60
00:03:18,370 --> 00:03:23,200
rota<font color="#E5E5E5"> B but there may be any number of</font>

61
00:03:20,650 --> 00:03:25,959
<font color="#CCCCCC">routers or nearly any number of</font><font color="#E5E5E5"> rod</font>

62
00:03:23,200 --> 00:03:28,119
in<font color="#E5E5E5"> between you and the server so here</font>

63
00:03:25,959 --> 00:03:31,330
the<font color="#CCCCCC"> rota</font><font color="#E5E5E5"> B is connected</font><font color="#CCCCCC"> via</font><font color="#E5E5E5"> ethernet</font>

64
00:03:28,120 --> 00:03:33,790
<font color="#E5E5E5">which is just a physical cable to the</font>

65
00:03:31,330 --> 00:03:39,040
server and<font color="#E5E5E5"> Ethernet is a protocol which</font>

66
00:03:33,790 --> 00:03:42,250
has talked over<font color="#E5E5E5"> the cable so I won't go</font>

67
00:03:39,040 --> 00:03:46,319
<font color="#E5E5E5">into the physical network connectivity</font>

68
00:03:42,250 --> 00:03:51,069
like fibers and satellite<font color="#CCCCCC"> in Dedham and</font>

69
00:03:46,319 --> 00:03:54,280
cables<font color="#E5E5E5"> and copper cables in this talk at</font>

70
00:03:51,069 --> 00:03:58,958
<font color="#E5E5E5">all but I will start with the layer</font>

71
00:03:54,280 --> 00:04:01,780
which<font color="#CCCCCC"> is on top</font><font color="#E5E5E5"> of the physical medium</font>

72
00:03:58,959 --> 00:04:04,290
so the first one<font color="#CCCCCC"> is a data link</font><font color="#E5E5E5"> layer</font>

73
00:04:01,780 --> 00:04:08,769
<font color="#E5E5E5">and well what is the data link layer</font>

74
00:04:04,290 --> 00:04:13,510
<font color="#CCCCCC">what</font><font color="#E5E5E5"> task it is is it has a scope of a</font>

75
00:04:08,769 --> 00:04:16,149
network and<font color="#CCCCCC"> it's only spent of the local</font>

76
00:04:13,510 --> 00:04:18,070
network<font color="#CCCCCC"> to which a host is connected</font><font color="#E5E5E5"> so</font>

77
00:04:16,149 --> 00:04:21,010
in this picture<font color="#CCCCCC"> only the laptop and</font><font color="#E5E5E5"> the</font>

78
00:04:18,070 --> 00:04:24,310
router<font color="#CCCCCC"> is she had the same data link</font>

79
00:04:21,010 --> 00:04:27,760
layer as well as the router<font color="#E5E5E5"> B and</font><font color="#CCCCCC"> rota a</font>

80
00:04:24,310 --> 00:04:29,919
they shared the same data link layer

81
00:04:27,760 --> 00:04:32,050
it's also the<font color="#E5E5E5"> case that route a B and</font>

82
00:04:29,919 --> 00:04:35,590
the server shared the same data link

83
00:04:32,050 --> 00:04:37,570
layer what is the task of<font color="#E5E5E5"> the data link</font>

84
00:04:35,590 --> 00:04:39,820
layer well it's<font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> easy address</font>

85
00:04:37,570 --> 00:04:42,030
<font color="#CCCCCC">moose internet layer packets</font><font color="#E5E5E5"> between two</font>

86
00:04:39,820 --> 00:04:46,120
different hosts at say on the same link

87
00:04:42,030 --> 00:04:49,388
so the data link layers<font color="#E5E5E5"> really</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> only</font>

88
00:04:46,120 --> 00:04:52,960
purpose<font color="#E5E5E5"> is</font><font color="#CCCCCC"> to provide an abstraction</font>

89
00:04:49,389 --> 00:04:55,000
<font color="#E5E5E5">over the physical thing and how many</font>

90
00:04:52,960 --> 00:04:59,349
bytes you<font color="#E5E5E5"> can transport on the physical</font>

91
00:04:55,000 --> 00:05:02,979
media over<font color="#E5E5E5"> the link so the next layer is</font>

92
00:04:59,350 --> 00:05:05,590
<font color="#CCCCCC">already the internet layer or the yeah</font>

93
00:05:02,979 --> 00:05:07,719
the internet layer which task is to

94
00:05:05,590 --> 00:05:10,869
transport packets across multiple

95
00:05:07,720 --> 00:05:13,750
networks<font color="#CCCCCC"> so as you have</font><font color="#E5E5E5"> seen</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> in</font>

96
00:05:10,870 --> 00:05:15,849
the diagram there<font color="#E5E5E5"> are</font><font color="#CCCCCC"> rota a</font><font color="#E5E5E5"> and wrote a</font>

97
00:05:13,750 --> 00:05:17,919
bead they are both<font color="#E5E5E5"> connected to</font><font color="#CCCCCC"> several</font>

98
00:05:15,849 --> 00:05:20,770
data link layers and they used the

99
00:05:17,919 --> 00:05:24,479
internet layer in<font color="#E5E5E5"> order to transport</font>

100
00:05:20,770 --> 00:05:27,250
packets across<font color="#E5E5E5"> them the internet layer</font>

101
00:05:24,479 --> 00:05:31,659
<font color="#E5E5E5">solves already the issue of addressing</font>

102
00:05:27,250 --> 00:05:33,940
<font color="#E5E5E5">by providing for every host and IP</font>

103
00:05:31,659 --> 00:05:35,810
address IP address is actually<font color="#E5E5E5"> the</font>

104
00:05:33,940 --> 00:05:38,600
Internet Protocol address

105
00:05:35,810 --> 00:05:41,420
and the internet layer provides<font color="#E5E5E5"> another</font>

106
00:05:38,600 --> 00:05:44,480
task<font color="#E5E5E5"> or</font><font color="#CCCCCC"> salt another task which is</font>

107
00:05:41,420 --> 00:05:47,660
routing so it forwards packets to<font color="#CCCCCC"> the</font>

108
00:05:44,480 --> 00:05:50,380
next router<font color="#E5E5E5"> which is hopefully closer to</font>

109
00:05:47,660 --> 00:05:53,600
the<font color="#E5E5E5"> final destination that is</font><font color="#CCCCCC"> so toxic</font>

110
00:05:50,380 --> 00:05:57,889
the internet layer<font color="#E5E5E5"> also</font><font color="#CCCCCC"> has support for</font>

111
00:05:53,600 --> 00:06:00,590
fragmentation<font color="#CCCCCC"> so if you are higher layer</font>

112
00:05:57,889 --> 00:06:03,290
sends<font color="#E5E5E5"> something which is way too big for</font>

113
00:06:00,590 --> 00:06:05,840
<font color="#CCCCCC">the data link layer then the internet</font>

114
00:06:03,290 --> 00:06:09,890
layer can fragment that and the other

115
00:06:05,840 --> 00:06:12,739
side<font color="#E5E5E5"> has</font><font color="#CCCCCC"> to reassemble</font><font color="#E5E5E5"> it what is on top</font>

116
00:06:09,890 --> 00:06:16,370
<font color="#E5E5E5">of the internet layer is the transport</font>

117
00:06:12,740 --> 00:06:19,000
layer<font color="#E5E5E5"> so the transport layer establishes</font>

118
00:06:16,370 --> 00:06:21,860
host-to-host connectivity<font color="#E5E5E5"> it does</font>

119
00:06:19,000 --> 00:06:24,500
multiplexing usually using source and

120
00:06:21,860 --> 00:06:27,650
destination ports<font color="#E5E5E5"> and there are two</font>

121
00:06:24,500 --> 00:06:29,840
widely<font color="#CCCCCC"> used transport layer protocols</font>

122
00:06:27,650 --> 00:06:32,690
<font color="#E5E5E5">which I will go into</font><font color="#CCCCCC"> more detail in this</font>

123
00:06:29,840 --> 00:06:35,150
talk which<font color="#CCCCCC"> is the user data bit user</font>

124
00:06:32,690 --> 00:06:37,910
Datagram protocol<font color="#E5E5E5"> and the transmission</font>

125
00:06:35,150 --> 00:06:43,549
control<font color="#E5E5E5"> protocol that's UDP and TCP and</font>

126
00:06:37,910 --> 00:06:48,560
they have different<font color="#E5E5E5"> properties so UDP is</font>

127
00:06:43,550 --> 00:06:50,930
unreliable<font color="#CCCCCC"> and it is not ordered and it</font>

128
00:06:48,560 --> 00:06:54,410
is only<font color="#E5E5E5"> an abstraction over</font><font color="#CCCCCC"> datagrams</font>

129
00:06:50,930 --> 00:06:57,110
<font color="#E5E5E5">and it has on the advantage side it has</font>

130
00:06:54,410 --> 00:07:01,729
a very low overhead<font color="#CCCCCC"> but as TCP</font><font color="#E5E5E5"> is</font>

131
00:06:57,110 --> 00:07:06,650
reliable and Woodards<font color="#E5E5E5"> byte stream so you</font>

132
00:07:01,729 --> 00:07:08,539
have a you<font color="#CCCCCC"> have a reliable byte stream</font>

133
00:07:06,650 --> 00:07:12,020
which you can work<font color="#E5E5E5"> on the downside of</font>

134
00:07:08,539 --> 00:07:14,840
TCP is that<font color="#E5E5E5"> its connection establishment</font>

135
00:07:12,020 --> 00:07:18,020
and teardown<font color="#E5E5E5"> is slightly more complex</font>

136
00:07:14,840 --> 00:07:20,090
<font color="#E5E5E5">and UDP you just don't have to establish</font>

137
00:07:18,020 --> 00:07:24,650
<font color="#CCCCCC">a connection and</font><font color="#E5E5E5"> tear down and connect</font>

138
00:07:20,090 --> 00:07:30,109
but on TCP you have to synchronize the

139
00:07:24,650 --> 00:07:31,370
two<font color="#E5E5E5"> hosts then on top of the transport</font>

140
00:07:30,110 --> 00:07:33,500
layer we<font color="#CCCCCC"> have the</font><font color="#E5E5E5"> application layer</font>

141
00:07:31,370 --> 00:07:35,990
level and the plication layer<font color="#E5E5E5"> just</font>

142
00:07:33,500 --> 00:07:38,600
exchanges application data over the

143
00:07:35,990 --> 00:07:42,260
transport layer<font color="#E5E5E5"> so some examples for</font>

144
00:07:38,600 --> 00:07:45,740
<font color="#CCCCCC">application layers are HTTP or TLS or</font>

145
00:07:42,260 --> 00:07:49,370
DNS<font color="#E5E5E5"> so in the first example we saw there</font>

146
00:07:45,740 --> 00:07:53,120
was HTTP and HTTP

147
00:07:49,370 --> 00:07:55,310
was used<font color="#E5E5E5"> to send the get breakfast so</font>

148
00:07:53,120 --> 00:07:58,760
that is all<font color="#E5E5E5"> application</font><font color="#CCCCCC"> layer which I</font>

149
00:07:55,310 --> 00:08:00,740
<font color="#E5E5E5">won't focus in this talk at all for the</font>

150
00:07:58,760 --> 00:08:03,440
lower layers<font color="#E5E5E5"> the application layers</font>

151
00:08:00,740 --> 00:08:07,729
<font color="#E5E5E5">dressed payload so it's just some</font>

152
00:08:03,440 --> 00:08:10,250
arbitrary<font color="#E5E5E5"> data so if we look again</font><font color="#CCCCCC"> at</font>

153
00:08:07,729 --> 00:08:14,210
<font color="#CCCCCC">that picture and</font><font color="#E5E5E5"> we draw the different</font>

154
00:08:10,250 --> 00:08:16,760
<font color="#E5E5E5">layers which</font><font color="#CCCCCC"> are supported</font><font color="#E5E5E5"> or which I</font>

155
00:08:14,210 --> 00:08:19,909
use by the different devices<font color="#CCCCCC"> we end up</font>

156
00:08:16,760 --> 00:08:22,789
<font color="#E5E5E5">with diagram similar to that so here on</font>

157
00:08:19,910 --> 00:08:26,870
the Left we have<font color="#E5E5E5"> the laptop again which</font>

158
00:08:22,789 --> 00:08:28,490
has all<font color="#E5E5E5"> four all four layers and then we</font>

159
00:08:26,870 --> 00:08:30,710
have the routers in<font color="#CCCCCC"> the middle which</font>

160
00:08:28,490 --> 00:08:34,039
only which<font color="#E5E5E5"> are only using the data link</font>

161
00:08:30,710 --> 00:08:35,659
<font color="#E5E5E5">and the internet layer and then on the</font>

162
00:08:34,039 --> 00:08:39,039
right hand<font color="#CCCCCC"> side we have</font><font color="#E5E5E5"> the server which</font>

163
00:08:35,659 --> 00:08:42,229
also has all four<font color="#E5E5E5"> layers so</font><font color="#CCCCCC"> the</font>

164
00:08:39,039 --> 00:08:45,650
transport layers really<font color="#E5E5E5"> hosts two hosts</font>

165
00:08:42,229 --> 00:08:48,080
so the<font color="#CCCCCC"> TCP we saw earlier</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> TCP is</font>

166
00:08:45,650 --> 00:08:51,319
establish establishing a connection<font color="#CCCCCC"> from</font>

167
00:08:48,080 --> 00:08:53,300
the<font color="#E5E5E5"> laptop to the server and on top of</font>

168
00:08:51,320 --> 00:08:56,170
TCP so on top of<font color="#E5E5E5"> the transport layer</font>

169
00:08:53,300 --> 00:08:58,699
<font color="#E5E5E5">there's the process to process</font>

170
00:08:56,170 --> 00:09:01,370
<font color="#CCCCCC">communication so the application layer</font>

171
00:08:58,700 --> 00:09:04,640
<font color="#CCCCCC">which is the web browser talking to the</font>

172
00:09:01,370 --> 00:09:08,510
web server so<font color="#E5E5E5"> only on the highest</font><font color="#CCCCCC"> layer</font>

173
00:09:04,640 --> 00:09:12,380
here<font color="#E5E5E5"> we have the get request and the</font>

174
00:09:08,510 --> 00:09:14,990
routers<font color="#CCCCCC"> in the middle</font><font color="#E5E5E5"> they don't have to</font>

175
00:09:12,380 --> 00:09:16,760
inspect<font color="#E5E5E5"> or they don't have to use</font>

176
00:09:14,990 --> 00:09:22,480
<font color="#E5E5E5">information of the transport or</font>

177
00:09:16,760 --> 00:09:26,029
application layer from the laptop<font color="#CCCCCC"> odds</font>

178
00:09:22,480 --> 00:09:29,630
so the routers just<font color="#E5E5E5"> for using the</font>

179
00:09:26,029 --> 00:09:31,820
internet layer they forward packets<font color="#E5E5E5"> to</font>

180
00:09:29,630 --> 00:09:32,570
the next router<font color="#CCCCCC"> what with the final</font>

181
00:09:31,820 --> 00:09:37,990
<font color="#CCCCCC">destination</font>

182
00:09:32,570 --> 00:09:41,300
so the laptop first<font color="#E5E5E5"> sends the whole TCP</font>

183
00:09:37,990 --> 00:09:43,580
segment or a<font color="#E5E5E5"> TCP packet to the rotor and</font>

184
00:09:41,300 --> 00:09:46,969
<font color="#CCCCCC">the rotor</font><font color="#E5E5E5"> a decides oh yeah I've</font>

185
00:09:43,580 --> 00:09:49,130
forwarded<font color="#E5E5E5"> to router</font><font color="#CCCCCC"> be-because rata</font><font color="#E5E5E5"> B is</font>

186
00:09:46,970 --> 00:09:52,370
more closer<font color="#E5E5E5"> to the final destination</font>

187
00:09:49,130 --> 00:09:54,620
than myself<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> rotor B says oh yeah</font>

188
00:09:52,370 --> 00:09:57,050
well I actually know<font color="#E5E5E5"> and I'm connected</font>

189
00:09:54,620 --> 00:09:59,770
<font color="#CCCCCC">via ethernet</font><font color="#E5E5E5"> to the final destination so</font>

190
00:09:57,050 --> 00:10:03,670
I will just forwarded to the server

191
00:09:59,770 --> 00:10:07,990
<font color="#E5E5E5">that's how the data flow of such</font>

192
00:10:03,670 --> 00:10:11,229
action would look like<font color="#CCCCCC"> how</font><font color="#E5E5E5"> does the</font>

193
00:10:07,990 --> 00:10:13,390
packet actually look<font color="#CCCCCC"> like</font><font color="#E5E5E5"> so we have</font>

194
00:10:11,230 --> 00:10:15,340
seen that the application layer we<font color="#CCCCCC"> have</font>

195
00:10:13,390 --> 00:10:18,819
the<font color="#E5E5E5"> application data which is here in</font>

196
00:10:15,340 --> 00:10:20,590
blue<font color="#CCCCCC"> and that one is just the get</font>

197
00:10:18,820 --> 00:10:23,470
request<font color="#E5E5E5"> and then the transport layer</font>

198
00:10:20,590 --> 00:10:26,340
actually prefixes<font color="#E5E5E5"> the application data</font>

199
00:10:23,470 --> 00:10:29,980
with a header which is<font color="#CCCCCC"> a common header</font>

200
00:10:26,340 --> 00:10:34,590
that encodes some data<font color="#E5E5E5"> we will look into</font>

201
00:10:29,980 --> 00:10:38,890
the TCP header<font color="#CCCCCC"> in more detail</font><font color="#E5E5E5"> soon then</font>

202
00:10:34,590 --> 00:10:42,280
<font color="#E5E5E5">the internet layer also</font><font color="#CCCCCC"> adds a header</font><font color="#E5E5E5"> a</font>

203
00:10:38,890 --> 00:10:45,280
prefix the IP<font color="#CCCCCC"> header which is just put</font>

204
00:10:42,280 --> 00:10:47,100
in front<font color="#CCCCCC"> of the TCP header</font><font color="#E5E5E5"> and then the</font>

205
00:10:45,280 --> 00:10:49,780
data link layer of all that is the

206
00:10:47,100 --> 00:10:53,410
<font color="#E5E5E5">lowest layer we we actually care about</font>

207
00:10:49,780 --> 00:10:56,760
<font color="#E5E5E5">and</font><font color="#CCCCCC"> that one will likely</font><font color="#E5E5E5"> prevent the</font>

208
00:10:53,410 --> 00:10:59,110
header and<font color="#E5E5E5"> append the food in order to</font>

209
00:10:56,760 --> 00:11:01,960
synchronize or to make sure<font color="#CCCCCC"> that the</font>

210
00:10:59,110 --> 00:11:06,160
physical wire<font color="#E5E5E5"> only has only sees a</font>

211
00:11:01,960 --> 00:11:08,590
single packet at time so as you can<font color="#E5E5E5"> see</font>

212
00:11:06,160 --> 00:11:11,410
<font color="#E5E5E5">from the layering from those two</font>

213
00:11:08,590 --> 00:11:15,130
<font color="#E5E5E5">pictures on the bond side you have the</font>

214
00:11:11,410 --> 00:11:17,350
bottom<font color="#CCCCCC"> to up layer</font><font color="#E5E5E5"> and every layer if</font>

215
00:11:15,130 --> 00:11:19,000
<font color="#CCCCCC">you go down from the application to the</font>

216
00:11:17,350 --> 00:11:21,610
transport to the<font color="#CCCCCC"> Internet</font><font color="#E5E5E5"> you directly</font>

217
00:11:19,000 --> 00:11:24,100
they<font color="#E5E5E5"> basically add some header</font>

218
00:11:21,610 --> 00:11:27,790
information<font color="#E5E5E5"> and the internet layer for</font>

219
00:11:24,100 --> 00:11:29,710
example<font color="#E5E5E5"> that takes the TCP</font><font color="#CCCCCC"> header so the</font>

220
00:11:27,790 --> 00:11:33,130
transport<font color="#CCCCCC"> layer</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> application</font>

221
00:11:29,710 --> 00:11:36,220
layer<font color="#CCCCCC"> as payload so it doesn't care that</font>

222
00:11:33,130 --> 00:11:40,689
<font color="#E5E5E5">it is TCP it could as well be UDP in</font>

223
00:11:36,220 --> 00:11:43,420
this case so what is actually<font color="#CCCCCC"> in the</font>

224
00:11:40,690 --> 00:11:47,920
<font color="#E5E5E5">serval not go into the data link layer</font>

225
00:11:43,420 --> 00:11:53,170
details at all<font color="#E5E5E5"> but here's is the</font><font color="#CCCCCC"> header</font>

226
00:11:47,920 --> 00:11:56,729
of an IP version 4 frame or packet<font color="#E5E5E5"> and</font>

227
00:11:53,170 --> 00:12:01,089
that<font color="#E5E5E5"> one is at least 20 bytes</font><font color="#CCCCCC"> it</font>

228
00:11:56,730 --> 00:12:04,480
contains of various fields<font color="#CCCCCC"> the first one</font>

229
00:12:01,090 --> 00:12:08,560
is a<font color="#E5E5E5"> 4 bit version which usually is</font>

230
00:12:04,480 --> 00:12:12,370
version 4<font color="#E5E5E5"> in our current world then it</font>

231
00:12:08,560 --> 00:12:15,000
has a 4 bytes<font color="#CCCCCC"> 4 bits</font><font color="#E5E5E5"> header length which</font>

232
00:12:12,370 --> 00:12:18,930
is header length<font color="#E5E5E5"> in words</font>

233
00:12:15,000 --> 00:12:23,069
in multiples of 32 bits<font color="#E5E5E5"> then it has some</font>

234
00:12:18,930 --> 00:12:25,769
not really<font color="#E5E5E5"> used or stuff I went deal</font>

235
00:12:23,069 --> 00:12:28,529
<font color="#E5E5E5">with in this talk</font><font color="#CCCCCC"> it has a total length</font>

236
00:12:25,769 --> 00:12:33,149
<font color="#E5E5E5">field which is 16 bits</font><font color="#CCCCCC"> and it</font><font color="#E5E5E5"> describes</font>

237
00:12:28,529 --> 00:12:35,670
how long the<font color="#E5E5E5"> the entire IP frame is then</font>

238
00:12:33,149 --> 00:12:40,110
it has an identification<font color="#CCCCCC"> which is also a</font>

239
00:12:35,670 --> 00:12:43,139
<font color="#E5E5E5">16 bit unique number and 16 bits for</font>

240
00:12:40,110 --> 00:12:45,629
fragmentation<font color="#CCCCCC"> Flags and offset</font><font color="#E5E5E5"> and that</font>

241
00:12:43,139 --> 00:12:48,089
is crucial<font color="#CCCCCC"> so if the IP header decides</font>

242
00:12:45,629 --> 00:12:50,160
oh yeah well the<font color="#CCCCCC"> take of you the</font>

243
00:12:48,089 --> 00:12:51,990
<font color="#E5E5E5">application data you sent me is way too</font>

244
00:12:50,160 --> 00:12:54,719
big<font color="#CCCCCC"> for this data link</font><font color="#E5E5E5"> I need to</font>

245
00:12:51,990 --> 00:12:56,819
fragment<font color="#E5E5E5"> it then it will just reuse the</font>

246
00:12:54,720 --> 00:12:59,149
very same<font color="#E5E5E5"> identification number and then</font>

247
00:12:56,819 --> 00:13:01,560
use here the<font color="#CCCCCC"> 16 bits in the fragment</font>

248
00:12:59,149 --> 00:13:05,910
<font color="#E5E5E5">fragmentation flags and offset in order</font>

249
00:13:01,560 --> 00:13:09,029
to portion that application data into

250
00:13:05,910 --> 00:13:13,680
multiple IP fragments then it has<font color="#E5E5E5"> some</font>

251
00:13:09,029 --> 00:13:17,129
field which is 8 by 8 bits<font color="#E5E5E5"> so 16 so one</font>

252
00:13:13,680 --> 00:13:19,079
entire byte<font color="#E5E5E5"> it's the time to live and</font>

253
00:13:17,129 --> 00:13:22,189
it's actually<font color="#E5E5E5"> not</font><font color="#CCCCCC"> the time stamp but</font>

254
00:13:19,079 --> 00:13:26,969
it's<font color="#E5E5E5"> only a count so how many routers</font>

255
00:13:22,189 --> 00:13:29,420
<font color="#E5E5E5">should this Packard live how long should</font>

256
00:13:26,970 --> 00:13:33,509
this packet live and every router

257
00:13:29,420 --> 00:13:36,079
<font color="#E5E5E5">decreases that time to live by one then</font>

258
00:13:33,509 --> 00:13:39,689
<font color="#CCCCCC">it has a one byte protocol field</font><font color="#E5E5E5"> which</font>

259
00:13:36,079 --> 00:13:42,959
specifies what is the type of the

260
00:13:39,689 --> 00:13:45,959
payload carried by this<font color="#E5E5E5"> up</font><font color="#CCCCCC"> he</font><font color="#E5E5E5"> version</font>

261
00:13:42,959 --> 00:13:49,550
<font color="#CCCCCC">four packets don't has a</font><font color="#E5E5E5"> 16 bit header</font>

262
00:13:45,959 --> 00:13:53,369
checksum which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> a CSE checksum to</font>

263
00:13:49,550 --> 00:13:57,149
avoid that some bits got flipped in the

264
00:13:53,370 --> 00:13:59,550
<font color="#E5E5E5">on the transport then we can see the</font>

265
00:13:57,149 --> 00:14:03,269
source<font color="#E5E5E5"> IP address and the</font><font color="#CCCCCC"> destination IP</font>

266
00:13:59,550 --> 00:14:05,160
address<font color="#E5E5E5"> which is yeah very I mean it the</font>

267
00:14:03,269 --> 00:14:07,230
<font color="#E5E5E5">false IP address is the IP address of my</font>

268
00:14:05,160 --> 00:14:10,740
<font color="#E5E5E5">laptop and the destination IP address is</font>

269
00:14:07,230 --> 00:14:14,129
the IP<font color="#E5E5E5"> address of the</font><font color="#CCCCCC"> server</font><font color="#E5E5E5"> and then</font>

270
00:14:10,740 --> 00:14:17,339
after<font color="#E5E5E5"> after those 20 bytes you have</font>

271
00:14:14,129 --> 00:14:22,740
either<font color="#E5E5E5"> IP options if the header length</font>

272
00:14:17,339 --> 00:14:26,189
was more than 20 bytes<font color="#CCCCCC"> or you have</font>

273
00:14:22,740 --> 00:14:28,380
<font color="#E5E5E5">directly the payload now for the</font>

274
00:14:26,189 --> 00:14:31,140
protocol field here

275
00:14:28,380 --> 00:14:33,840
there are various types<font color="#E5E5E5"> and various</font>

276
00:14:31,140 --> 00:14:35,819
types<font color="#E5E5E5"> are predefined one is ICMP which</font>

277
00:14:33,840 --> 00:14:39,080
is the<font color="#E5E5E5"> internet control message protocol</font>

278
00:14:35,820 --> 00:14:42,270
<font color="#E5E5E5">I will talk a bit about that which is</font>

279
00:14:39,080 --> 00:14:45,030
the product<font color="#E5E5E5"> field near the</font><font color="#CCCCCC"> numbers set</font>

280
00:14:42,270 --> 00:14:48,420
<font color="#E5E5E5">of one then for TCP it's set to</font><font color="#CCCCCC"> six and</font>

281
00:14:45,030 --> 00:14:51,810
for UDP<font color="#E5E5E5"> it's 17 we have other protocols</font>

282
00:14:48,420 --> 00:14:55,079
which can be carried of an IP frame or

283
00:14:51,810 --> 00:14:57,599
an IP packet<font color="#E5E5E5"> but I won't go into the</font>

284
00:14:55,080 --> 00:14:59,460
details here<font color="#CCCCCC"> as you</font><font color="#E5E5E5"> can see there are at</font>

285
00:14:57,600 --> 00:15:01,620
least two hundred<font color="#E5E5E5"> fifty five numbers</font>

286
00:14:59,460 --> 00:15:07,050
here<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> products fields so because</font>

287
00:15:01,620 --> 00:15:12,420
it's a bit long you can store up<font color="#CCCCCC"> to 256</font>

288
00:15:07,050 --> 00:15:15,329
different<font color="#E5E5E5"> numbers</font><font color="#CCCCCC"> in there so ICMP is a</font>

289
00:15:12,420 --> 00:15:18,300
protocol<font color="#E5E5E5"> I haven't talked about at all</font>

290
00:15:15,330 --> 00:15:21,930
but it<font color="#E5E5E5"> is the Internet control message</font>

291
00:15:18,300 --> 00:15:24,449
protocol so<font color="#CCCCCC"> it sits on</font><font color="#E5E5E5"> top</font><font color="#CCCCCC"> of IP</font><font color="#E5E5E5"> and its</font>

292
00:15:21,930 --> 00:15:27,569
purpose<font color="#E5E5E5"> is on the one side to deliver</font>

293
00:15:24,450 --> 00:15:30,570
<font color="#E5E5E5">error messages such as destination host</font>

294
00:15:27,570 --> 00:15:32,700
unreachable<font color="#E5E5E5"> or time to live exceeded</font><font color="#CCCCCC"> and</font>

295
00:15:30,570 --> 00:15:35,930
on the<font color="#E5E5E5"> other side it also can carry</font>

296
00:15:32,700 --> 00:15:39,480
operational information<font color="#CCCCCC"> like</font><font color="#E5E5E5"> Diagnostics</font>

297
00:15:35,930 --> 00:15:42,479
there's one program which you may know

298
00:15:39,480 --> 00:15:45,480
which is called ping and ping the the

299
00:15:42,480 --> 00:15:48,000
purpose of ping is to send an ICMP echo

300
00:15:45,480 --> 00:15:50,520
request to a remote host<font color="#E5E5E5"> and the remote</font>

301
00:15:48,000 --> 00:15:53,730
<font color="#E5E5E5">host is then supposed to send them to</font>

302
00:15:50,520 --> 00:15:57,030
send very same packet with<font color="#CCCCCC"> only one</font>

303
00:15:53,730 --> 00:15:58,680
single<font color="#E5E5E5"> bit flipped and send that</font><font color="#CCCCCC"> back to</font>

304
00:15:57,030 --> 00:16:02,310
you and that<font color="#E5E5E5"> is an ICMP</font>

305
00:15:58,680 --> 00:16:06,390
issue reply and<font color="#E5E5E5"> if you can successfully</font>

306
00:16:02,310 --> 00:16:08,550
ping another host<font color="#E5E5E5"> you can verify that</font>

307
00:16:06,390 --> 00:16:14,610
<font color="#E5E5E5">the other host has at least IP</font>

308
00:16:08,550 --> 00:16:16,949
connectivity<font color="#CCCCCC"> up and online</font><font color="#E5E5E5"> okay let's</font>

309
00:16:14,610 --> 00:16:20,790
look<font color="#CCCCCC"> into the next</font><font color="#E5E5E5"> layer which is the</font>

310
00:16:16,950 --> 00:16:24,060
transport<font color="#CCCCCC"> layer and at</font><font color="#E5E5E5"> first we will</font>

311
00:16:20,790 --> 00:16:26,400
look into a<font color="#E5E5E5"> UDP header a UDP had as only</font>

312
00:16:24,060 --> 00:16:29,069
<font color="#CCCCCC">eight bytes</font><font color="#E5E5E5"> it contains it consists of a</font>

313
00:16:26,400 --> 00:16:32,250
source port destination port then the

314
00:16:29,070 --> 00:16:35,520
<font color="#E5E5E5">length of the entire UDP frame and the</font>

315
00:16:32,250 --> 00:16:40,710
checksum the checksum<font color="#E5E5E5"> is again 16-bit</font>

316
00:16:35,520 --> 00:16:42,810
field<font color="#CCCCCC"> that's computed its computed over</font>

317
00:16:40,710 --> 00:16:46,980
<font color="#E5E5E5">the entire payload and the header plus</font>

318
00:16:42,810 --> 00:16:49,800
some IP pseudo header so with this

319
00:16:46,980 --> 00:16:52,170
actually carries the information<font color="#CCCCCC"> of the</font>

320
00:16:49,800 --> 00:16:53,420
source and destination IP address<font color="#E5E5E5"> inside</font>

321
00:16:52,170 --> 00:16:56,099
of itself

322
00:16:53,420 --> 00:16:59,640
UDP<font color="#E5E5E5"> as I mentioned</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> this angry bot</font>

323
00:16:56,100 --> 00:17:02,310
unreliable unordered<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's advantage</font>

324
00:16:59,640 --> 00:17:05,550
<font color="#CCCCCC">is that's low overhead datagrams</font>

325
00:17:02,310 --> 00:17:10,260
as you can see it's it it's<font color="#E5E5E5"> eight bytes</font>

326
00:17:05,550 --> 00:17:13,859
to the<font color="#E5E5E5"> to the payload</font><font color="#CCCCCC"> various IP already</font>

327
00:17:10,260 --> 00:17:17,579
added 20 bytes to the payload here's a

328
00:17:13,859 --> 00:17:19,889
simple<font color="#CCCCCC"> Yonex program which is a UDP</font>

329
00:17:17,579 --> 00:17:21,929
client<font color="#E5E5E5"> this program does not compile</font>

330
00:17:19,890 --> 00:17:24,960
<font color="#CCCCCC">because</font><font color="#E5E5E5"> I left out some bits but in</font>

331
00:17:21,930 --> 00:17:28,560
order to<font color="#E5E5E5"> see what how do you actually</font>

332
00:17:24,960 --> 00:17:30,660
use this whole IP stack so the IP stack

333
00:17:28,560 --> 00:17:34,590
the tcp/ip stack<font color="#E5E5E5"> is usually embedded in</font>

334
00:17:30,660 --> 00:17:38,880
the kernel and as a programmer as an API

335
00:17:34,590 --> 00:17:42,480
program you have<font color="#E5E5E5"> the</font><font color="#CCCCCC"> API provided by the</font>

336
00:17:38,880 --> 00:17:45,900
<font color="#E5E5E5">UNIX</font><font color="#CCCCCC"> sockets API and that one usually</font>

337
00:17:42,480 --> 00:17:48,900
contains of the very same<font color="#CCCCCC"> five or seven</font>

338
00:17:45,900 --> 00:17:52,440
<font color="#CCCCCC">functions which is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> first one is</font>

339
00:17:48,900 --> 00:17:54,930
socket socket<font color="#E5E5E5"> opens or creates a file</font>

340
00:17:52,440 --> 00:17:58,800
descriptor<font color="#CCCCCC"> and you specify</font><font color="#E5E5E5"> the address</font>

341
00:17:54,930 --> 00:18:02,250
family<font color="#E5E5E5"> and the socket type so this is</font>

342
00:17:58,800 --> 00:18:04,770
the<font color="#E5E5E5"> address family</font><font color="#CCCCCC"> Internet and the</font>

343
00:18:02,250 --> 00:18:10,230
socket is a Datagram socket<font color="#CCCCCC"> it's called</font>

344
00:18:04,770 --> 00:18:13,950
D Grayman<font color="#CCCCCC"> UNIX once that is created</font><font color="#E5E5E5"> then</font>

345
00:18:10,230 --> 00:18:17,340
you for<font color="#CCCCCC"> a UDP</font><font color="#E5E5E5"> flow and you just say oh I</font>

346
00:18:13,950 --> 00:18:20,340
will use the function<font color="#CCCCCC"> send - which takes</font>

347
00:18:17,340 --> 00:18:22,409
a socket file descriptor<font color="#CCCCCC"> so just a file</font>

348
00:18:20,340 --> 00:18:25,260
descriptor<font color="#CCCCCC"> and then some data and will</font>

349
00:18:22,410 --> 00:18:28,250
just send it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the other side since</font>

350
00:18:25,260 --> 00:18:32,640
it's unreliable<font color="#CCCCCC"> it just fire and forget</font>

351
00:18:28,250 --> 00:18:35,640
<font color="#E5E5E5">then afterwards we close the socket</font><font color="#CCCCCC"> file</font>

352
00:18:32,640 --> 00:18:38,460
descriptor because we are nice here and

353
00:18:35,640 --> 00:18:40,800
we<font color="#E5E5E5"> try to</font><font color="#CCCCCC"> penalize the other side so if</font>

354
00:18:38,460 --> 00:18:43,440
<font color="#CCCCCC">you don't have a UDP client but if you</font>

355
00:18:40,800 --> 00:18:46,560
want to implement a UDP<font color="#E5E5E5"> server or a UDP</font>

356
00:18:43,440 --> 00:18:48,510
listener what do you do is<font color="#CCCCCC"> you again</font>

357
00:18:46,560 --> 00:18:51,120
create a socket<font color="#CCCCCC"> then you have</font><font color="#E5E5E5"> the</font>

358
00:18:48,510 --> 00:18:52,350
function which<font color="#E5E5E5"> is called</font><font color="#CCCCCC"> bind bind</font>

359
00:18:51,120 --> 00:18:54,600
<font color="#CCCCCC">binds</font><font color="#E5E5E5"> into</font>

360
00:18:52,350 --> 00:18:58,879
can bind<font color="#CCCCCC"> into a specific IP address on</font>

361
00:18:54,600 --> 00:19:02,280
your server or on your network stack

362
00:18:58,880 --> 00:19:04,830
then you say<font color="#E5E5E5"> receive from receive from</font>

363
00:19:02,280 --> 00:19:07,289
takes the socket file descriptor and<font color="#E5E5E5"> the</font>

364
00:19:04,830 --> 00:19:12,510
buffer<font color="#E5E5E5"> and some maximum size</font><font color="#CCCCCC"> and an</font>

365
00:19:07,289 --> 00:19:15,299
offset<font color="#CCCCCC"> and yeah</font><font color="#E5E5E5"> you just receive from</font>

366
00:19:12,510 --> 00:19:19,289
will only return once you actually

367
00:19:15,299 --> 00:19:24,179
<font color="#E5E5E5">receive</font><font color="#CCCCCC"> the UDP frame on that IP address</font>

368
00:19:19,289 --> 00:19:26,940
and port<font color="#CCCCCC"> and then you then we print out</font>

369
00:19:24,179 --> 00:19:28,890
<font color="#CCCCCC">that we received some packets and we</font>

370
00:19:26,940 --> 00:19:34,679
close the socket<font color="#CCCCCC"> false Krypton</font>

371
00:19:28,890 --> 00:19:37,409
so that's your EP<font color="#E5E5E5"> you DB is used for a</font>

372
00:19:34,679 --> 00:19:40,980
variety of<font color="#CCCCCC"> protocols</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> crucial to</font>

373
00:19:37,409 --> 00:19:44,010
have<font color="#CCCCCC"> it tcp on the other hand is a</font><font color="#E5E5E5"> bit</font>

374
00:19:40,980 --> 00:19:47,490
bigger<font color="#CCCCCC"> so instead</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> 8 bytes</font><font color="#E5E5E5"> header tcp</font>

375
00:19:44,010 --> 00:19:49,320
ads and other<font color="#E5E5E5"> 20 bytes of header what</font>

376
00:19:47,490 --> 00:19:51,780
does the TCP header<font color="#E5E5E5"> contained</font>

377
00:19:49,320 --> 00:19:54,600
well similar to UDP it contains source

378
00:19:51,780 --> 00:19:58,289
port<font color="#E5E5E5"> and destination port</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> again 16</font>

379
00:19:54,600 --> 00:20:00,449
bits<font color="#CCCCCC"> then it contains 2 sequence numbers</font>

380
00:19:58,289 --> 00:20:02,520
one is the sequence<font color="#E5E5E5"> number itself</font><font color="#CCCCCC"> it's a</font>

381
00:20:00,450 --> 00:20:05,610
32-bit number<font color="#CCCCCC"> and one is the</font>

382
00:20:02,520 --> 00:20:08,820
acknowledgement number<font color="#E5E5E5"> which is the last</font>

383
00:20:05,610 --> 00:20:13,020
<font color="#E5E5E5">sequence number we have seen from the</font>

384
00:20:08,820 --> 00:20:14,850
other<font color="#E5E5E5"> side</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> TCP contains data offset</font>

385
00:20:13,020 --> 00:20:20,429
<font color="#E5E5E5">that offset is similar to the header</font>

386
00:20:14,850 --> 00:20:23,789
length field so<font color="#E5E5E5"> TCP a TCP segment may</font>

387
00:20:20,429 --> 00:20:26,100
also contain some options<font color="#E5E5E5"> so the header</font>

388
00:20:23,789 --> 00:20:28,200
may contain options<font color="#CCCCCC"> before a payload</font>

389
00:20:26,100 --> 00:20:31,020
that's why we need a data of<font color="#E5E5E5"> set fields</font>

390
00:20:28,200 --> 00:20:34,280
in<font color="#E5E5E5"> order to be able</font><font color="#CCCCCC"> to find out via</font><font color="#E5E5E5"> this</font>

391
00:20:31,020 --> 00:20:37,620
<font color="#E5E5E5">actual payload start then TCP has</font>

392
00:20:34,280 --> 00:20:40,080
certain flags<font color="#E5E5E5"> and some of these flags I</font>

393
00:20:37,620 --> 00:20:43,139
<font color="#CCCCCC">know some flags are just single</font><font color="#E5E5E5"> bits</font>

394
00:20:40,080 --> 00:20:45,120
<font color="#E5E5E5">values and some of them I mentioned down</font>

395
00:20:43,140 --> 00:20:48,020
here which I<font color="#E5E5E5"> will go into more detail</font>

396
00:20:45,120 --> 00:20:51,629
later which is<font color="#E5E5E5"> acknowledgment or arc</font>

397
00:20:48,020 --> 00:20:54,210
synchronize or soon and finished<font color="#CCCCCC"> orphan</font>

398
00:20:51,630 --> 00:20:57,480
there's also reset and some urgent stuff

399
00:20:54,210 --> 00:20:59,610
<font color="#CCCCCC">I will not go into detail of that then</font>

400
00:20:57,480 --> 00:21:04,200
we<font color="#CCCCCC"> have a 16-bit field which is</font><font color="#E5E5E5"> the</font>

401
00:20:59,610 --> 00:21:06,258
window size which is the size of the

402
00:21:04,200 --> 00:21:09,899
receive buffer

403
00:21:06,259 --> 00:21:11,669
then we have again<font color="#CCCCCC"> a 16-bit field</font><font color="#E5E5E5"> check</font>

404
00:21:09,899 --> 00:21:15,059
them and then we<font color="#E5E5E5"> have some space for the</font>

405
00:21:11,669 --> 00:21:18,059
<font color="#E5E5E5">original stuff I</font><font color="#CCCCCC"> will not go into detail</font>

406
00:21:15,059 --> 00:21:22,710
<font color="#E5E5E5">it is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> big client if</font><font color="#CCCCCC"> you program</font><font color="#E5E5E5"> it in</font>

407
00:21:18,059 --> 00:21:25,620
the<font color="#E5E5E5"> UNIX way you have a very similar API</font>

408
00:21:22,710 --> 00:21:28,500
as we have<font color="#E5E5E5"> seen in the UDP so we first</font>

409
00:21:25,620 --> 00:21:32,370
call<font color="#E5E5E5"> the first create a file descriptor</font>

410
00:21:28,500 --> 00:21:35,250
<font color="#CCCCCC">using the socket system call which we</font>

411
00:21:32,370 --> 00:21:40,080
give again the<font color="#E5E5E5"> address family</font><font color="#CCCCCC"> eyelets</font>

412
00:21:35,250 --> 00:21:43,470
<font color="#E5E5E5">and the sock stream which is the since</font>

413
00:21:40,080 --> 00:21:48,059
<font color="#E5E5E5">we are stream oriented it's a it's the</font>

414
00:21:43,470 --> 00:21:52,440
name of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> TCP it's</font><font color="#CCCCCC"> a name</font><font color="#E5E5E5"> of for TCP</font>

415
00:21:48,059 --> 00:21:55,049
socket<font color="#E5E5E5"> then as a TC geek fly and we</font>

416
00:21:52,440 --> 00:21:58,980
<font color="#E5E5E5">connects using the socket file</font>

417
00:21:55,049 --> 00:22:01,049
descriptor<font color="#E5E5E5"> to a remote host and then</font>

418
00:21:58,980 --> 00:22:04,289
once we are connected so connect will

419
00:22:01,049 --> 00:22:08,820
only return once<font color="#E5E5E5"> TCP session has been</font>

420
00:22:04,289 --> 00:22:11,039
<font color="#E5E5E5">established then we say here receive so</font>

421
00:22:08,820 --> 00:22:13,559
we receive on the socket file descriptor

422
00:22:11,039 --> 00:22:15,629
<font color="#E5E5E5">the specific buffer buffer then we</font>

423
00:22:13,559 --> 00:22:24,240
printed and<font color="#E5E5E5"> then we close the sock</font><font color="#CCCCCC"> false</font>

424
00:22:15,629 --> 00:22:28,590
<font color="#E5E5E5">good again the</font><font color="#CCCCCC"> tcp listener is very</font>

425
00:22:24,240 --> 00:22:31,590
similar<font color="#E5E5E5"> so well first we create a socket</font>

426
00:22:28,590 --> 00:22:34,350
then we bind it and<font color="#E5E5E5"> bind specifies the</font>

427
00:22:31,590 --> 00:22:37,918
IP address and<font color="#E5E5E5"> also the port number then</font>

428
00:22:34,350 --> 00:22:41,399
we use a function<font color="#E5E5E5"> called</font><font color="#CCCCCC"> listen on the</font>

429
00:22:37,919 --> 00:22:47,429
socket file descriptor<font color="#E5E5E5"> and then we enter</font>

430
00:22:41,399 --> 00:22:49,889
<font color="#CCCCCC">a loop</font><font color="#E5E5E5"> and so now we wait for client</font>

431
00:22:47,429 --> 00:22:52,320
connections which appear at some point

432
00:22:49,889 --> 00:22:54,360
<font color="#E5E5E5">and for every client connection we well</font>

433
00:22:52,320 --> 00:22:56,960
we call accept and accept returns

434
00:22:54,360 --> 00:23:02,330
whenever there was<font color="#CCCCCC"> a</font><font color="#E5E5E5"> client which</font>

435
00:22:56,960 --> 00:23:05,580
successfully<font color="#E5E5E5"> established TCP connection</font>

436
00:23:02,330 --> 00:23:08,699
what accept<font color="#E5E5E5"> returns is a new file</font>

437
00:23:05,580 --> 00:23:11,490
descriptor<font color="#CCCCCC"> so another file descriptor</font>

438
00:23:08,700 --> 00:23:14,070
<font color="#CCCCCC">not the same</font><font color="#E5E5E5"> as a sacrifice descriptor</font>

439
00:23:11,490 --> 00:23:17,129
so the socket file descriptor we call

440
00:23:14,070 --> 00:23:19,409
again<font color="#CCCCCC"> accept on it's at a later point</font>

441
00:23:17,129 --> 00:23:21,659
<font color="#E5E5E5">usually you then handle</font>

442
00:23:19,410 --> 00:23:23,760
any work on<font color="#E5E5E5"> the client connection on</font>

443
00:23:21,660 --> 00:23:26,880
this new FD<font color="#E5E5E5"> you handle that</font><font color="#CCCCCC"> in a</font>

444
00:23:23,760 --> 00:23:29,460
separate process<font color="#E5E5E5"> or set a separate</font>

445
00:23:26,880 --> 00:23:31,710
thread or a separate<font color="#E5E5E5"> task in order</font><font color="#CCCCCC"> to</font>

446
00:23:29,460 --> 00:23:33,960
enable the server to accept<font color="#CCCCCC"> another</font>

447
00:23:31,710 --> 00:23:39,300
connection while you are<font color="#E5E5E5"> handling the</font>

448
00:23:33,960 --> 00:23:43,380
the one<font color="#E5E5E5"> client connection then we just</font>

449
00:23:39,300 --> 00:23:46,889
do some printf output and we send<font color="#CCCCCC"> hello</font>

450
00:23:43,380 --> 00:23:48,450
<font color="#CCCCCC">world to</font><font color="#E5E5E5"> the client to the client</font>

451
00:23:46,890 --> 00:23:52,080
connection so to this new file

452
00:23:48,450 --> 00:23:54,630
descriptor then we close it and<font color="#E5E5E5"> we start</font>

453
00:23:52,080 --> 00:23:59,070
from the<font color="#E5E5E5"> while one and we accept a new</font>

454
00:23:54,630 --> 00:24:02,040
client socket<font color="#E5E5E5"> so that is TCP listener as</font>

455
00:23:59,070 --> 00:24:08,909
<font color="#E5E5E5">we have seen it and as</font><font color="#CCCCCC"> you will see it</font>

456
00:24:02,040 --> 00:24:12,600
in in in any<font color="#CCCCCC"> network program now</font><font color="#E5E5E5"> TCP as</font>

457
00:24:08,910 --> 00:24:15,270
I mentioned<font color="#E5E5E5"> that it has to do some work</font>

458
00:24:12,600 --> 00:24:19,320
<font color="#CCCCCC">in order</font><font color="#E5E5E5"> to establish a</font><font color="#CCCCCC"> section session</font>

459
00:24:15,270 --> 00:24:21,600
<font color="#E5E5E5">and to tear down</font><font color="#CCCCCC"> the main work which</font>

460
00:24:19,320 --> 00:24:24,899
needs<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be done is to synchronize the</font>

461
00:24:21,600 --> 00:24:26,699
initial<font color="#CCCCCC"> sequence numbers because we have</font>

462
00:24:24,900 --> 00:24:30,000
seen in the header<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we have this</font>

463
00:24:26,700 --> 00:24:31,680
sequence<font color="#E5E5E5"> number and</font><font color="#CCCCCC"> somehow we need</font><font color="#E5E5E5"> to</font>

464
00:24:30,000 --> 00:24:35,760
<font color="#CCCCCC">transport that information to the other</font>

465
00:24:31,680 --> 00:24:38,040
side so yes the<font color="#E5E5E5"> TCP state machine were</font>

466
00:24:35,760 --> 00:24:40,680
just which has<font color="#E5E5E5"> initially been part of</font>

467
00:24:38,040 --> 00:24:44,639
the RFC<font color="#E5E5E5"> which is the specification for</font>

468
00:24:40,680 --> 00:24:47,130
<font color="#E5E5E5">TCP and also duplicated and books like</font>

469
00:24:44,640 --> 00:24:50,340
<font color="#CCCCCC">Stevens design and implementation of the</font>

470
00:24:47,130 --> 00:24:52,200
of<font color="#CCCCCC"> TCP IP and TCP IP Illustrated and</font><font color="#E5E5E5"> so</font>

471
00:24:50,340 --> 00:24:55,470
on

472
00:24:52,200 --> 00:24:57,510
so<font color="#E5E5E5"> you can see it is</font><font color="#CCCCCC"> test year one</font>

473
00:24:55,470 --> 00:25:00,030
specific state which is listen and

474
00:24:57,510 --> 00:25:01,710
listen is as we've seen in<font color="#E5E5E5"> the server</font>

475
00:25:00,030 --> 00:25:04,710
implementation if you call<font color="#E5E5E5"> listen then</font>

476
00:25:01,710 --> 00:25:09,600
<font color="#CCCCCC">you are in</font><font color="#E5E5E5"> the listen stem in the listen</font>

477
00:25:04,710 --> 00:25:11,610
<font color="#CCCCCC">State and you always start</font><font color="#E5E5E5"> well you</font>

478
00:25:09,600 --> 00:25:15,560
always<font color="#E5E5E5"> end up in</font><font color="#CCCCCC"> the in the close</font><font color="#E5E5E5"> state</font>

479
00:25:11,610 --> 00:25:19,290
after<font color="#E5E5E5"> you've called</font><font color="#CCCCCC"> close basically I</font>

480
00:25:15,560 --> 00:25:22,290
will<font color="#E5E5E5"> go into more detail of connection</font>

481
00:25:19,290 --> 00:25:23,879
establishment and teardown<font color="#CCCCCC"> right now</font><font color="#E5E5E5"> so</font>

482
00:25:22,290 --> 00:25:27,090
on the connection establishment we have

483
00:25:23,880 --> 00:25:31,380
seen on the client side we start<font color="#E5E5E5"> with</font>

484
00:25:27,090 --> 00:25:33,250
<font color="#CCCCCC">the socket in the close</font><font color="#E5E5E5"> state then we</font>

485
00:25:31,380 --> 00:25:37,650
say the<font color="#CCCCCC"> UNIX</font>

486
00:25:33,250 --> 00:25:42,070
connect on that<font color="#E5E5E5"> socket and that connect</font>

487
00:25:37,650 --> 00:25:45,070
<font color="#E5E5E5">does</font><font color="#CCCCCC"> does send an initial TCP segment to</font>

488
00:25:42,070 --> 00:25:49,240
the server side which has the

489
00:25:45,070 --> 00:25:52,960
<font color="#E5E5E5">synchronize flag set to true or</font><font color="#CCCCCC"> said one</font>

490
00:25:49,240 --> 00:25:57,570
<font color="#E5E5E5">and the sequence number is some</font>

491
00:25:52,960 --> 00:26:02,160
artificial<font color="#E5E5E5"> number some random</font><font color="#CCCCCC"> 32-bit</font>

492
00:25:57,570 --> 00:26:07,060
integer number<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I just call it</font><font color="#CCCCCC"> a here</font>

493
00:26:02,160 --> 00:26:11,050
the state of the file descriptor goes

494
00:26:07,060 --> 00:26:14,409
from closed<font color="#E5E5E5"> to</font><font color="#CCCCCC"> sin sent and soon</font><font color="#E5E5E5"> send</font>

495
00:26:11,050 --> 00:26:18,850
yeah well we just<font color="#CCCCCC"> have sent out the the</font>

496
00:26:14,410 --> 00:26:21,220
<font color="#E5E5E5">synchronized segment so TCP segment</font>

497
00:26:18,850 --> 00:26:24,699
<font color="#E5E5E5">which doesn't carry any data but only</font>

498
00:26:21,220 --> 00:26:28,650
the TCP<font color="#CCCCCC"> header on the server side</font><font color="#E5E5E5"> we had</font>

499
00:26:24,700 --> 00:26:31,390
prepared previously we started in a

500
00:26:28,650 --> 00:26:34,390
<font color="#E5E5E5">closed state</font><font color="#CCCCCC"> then we called listen then</font>

501
00:26:31,390 --> 00:26:37,920
we end<font color="#E5E5E5"> up in a listen</font><font color="#CCCCCC"> state now in the</font>

502
00:26:34,390 --> 00:26:41,560
<font color="#CCCCCC">listened States we call accept and</font>

503
00:26:37,920 --> 00:26:43,450
accept blocks until<font color="#E5E5E5"> the sin is received</font>

504
00:26:41,560 --> 00:26:45,639
and once the sin has received a new

505
00:26:43,450 --> 00:26:49,450
socket is a new file descriptor spawned

506
00:26:45,640 --> 00:26:53,440
<font color="#E5E5E5">and that one ends up in the sin received</font>

507
00:26:49,450 --> 00:26:56,170
<font color="#CCCCCC">state the server sends out the TCP</font>

508
00:26:53,440 --> 00:26:58,090
segment<font color="#CCCCCC"> again without</font><font color="#E5E5E5"> any data but the</font>

509
00:26:56,170 --> 00:26:59,920
sin<font color="#CCCCCC"> and acknowledgement</font><font color="#E5E5E5"> flags are said</font>

510
00:26:58,090 --> 00:27:03,010
<font color="#CCCCCC">and the sequence</font><font color="#E5E5E5"> number said to</font><font color="#CCCCCC"> Sam B</font>

511
00:26:59,920 --> 00:27:05,310
and the<font color="#CCCCCC"> acknowledgement</font><font color="#E5E5E5"> numbers</font><font color="#CCCCCC"> set to a</font>

512
00:27:03,010 --> 00:27:07,870
plus<font color="#E5E5E5"> one so the acknowledgement number</font>

513
00:27:05,310 --> 00:27:13,480
acknowledges that the sin was received

514
00:27:07,870 --> 00:27:16,120
with<font color="#CCCCCC"> the sequence number</font><font color="#E5E5E5"> a plus one upon</font>

515
00:27:13,480 --> 00:27:18,970
the<font color="#E5E5E5"> client</font><font color="#CCCCCC"> receiving that sin and arc</font><font color="#E5E5E5"> it</font>

516
00:27:16,120 --> 00:27:22,479
<font color="#E5E5E5">is in the</font><font color="#CCCCCC"> Select state and it will send</font>

517
00:27:18,970 --> 00:27:25,000
out an<font color="#E5E5E5"> acknowledgment segment so that</font>

518
00:27:22,480 --> 00:27:28,960
the other<font color="#E5E5E5"> side the server knows oh yeah</font>

519
00:27:25,000 --> 00:27:31,030
<font color="#E5E5E5">my segment has</font><font color="#CCCCCC"> been received</font><font color="#E5E5E5"> and that</font>

520
00:27:28,960 --> 00:27:33,340
<font color="#E5E5E5">one is sent with the sequence number</font><font color="#CCCCCC"> of</font>

521
00:27:31,030 --> 00:27:38,470
a plus one because<font color="#E5E5E5"> a was already used</font>

522
00:27:33,340 --> 00:27:41,760
here and the syn flag consumes one one

523
00:27:38,470 --> 00:27:44,679
byte or one in the<font color="#CCCCCC"> sequence</font><font color="#E5E5E5"> number range</font>

524
00:27:41,760 --> 00:27:46,660
and the acknowledgement<font color="#CCCCCC"> number is also</font>

525
00:27:44,679 --> 00:27:47,080
<font color="#E5E5E5">said</font><font color="#CCCCCC"> to be plus 1 so that</font><font color="#E5E5E5"> is the</font>

526
00:27:46,660 --> 00:27:51,100
sequence

527
00:27:47,080 --> 00:27:53,350
<font color="#CCCCCC">premiere</font><font color="#E5E5E5"> plus one once that has received</font>

528
00:27:51,100 --> 00:27:57,908
the server ends<font color="#E5E5E5"> up in the established</font>

529
00:27:53,350 --> 00:27:59,620
state sequence numbers<font color="#CCCCCC"> yeah well</font><font color="#E5E5E5"> it's a</font>

530
00:27:57,909 --> 00:28:01,600
good<font color="#E5E5E5"> idea of both house</font><font color="#CCCCCC"> take a random</font>

531
00:27:59,620 --> 00:28:03,820
<font color="#E5E5E5">initial sequence number for each</font>

532
00:28:01,600 --> 00:28:07,779
connection<font color="#E5E5E5"> otherwise we can get into</font>

533
00:28:03,820 --> 00:28:09,939
<font color="#E5E5E5">some nasty attacks the acknowledgement</font>

534
00:28:07,779 --> 00:28:13,059
number<font color="#E5E5E5"> is the next sequence number from</font>

535
00:28:09,940 --> 00:28:15,610
the other hosts and the sequence numbers

536
00:28:13,059 --> 00:28:18,460
always increased for each part of data

537
00:28:15,610 --> 00:28:21,100
<font color="#E5E5E5">and for the sin and Finan flags which</font>

538
00:28:18,460 --> 00:28:22,779
are only<font color="#E5E5E5"> single bits each sequence</font>

539
00:28:21,100 --> 00:28:25,719
number must be<font color="#E5E5E5"> not acknowledged and each</font>

540
00:28:22,779 --> 00:28:28,210
<font color="#CCCCCC">sent occurred is retransmitted unless it</font>

541
00:28:25,720 --> 00:28:31,690
is<font color="#E5E5E5"> acknowledged after a certain time</font><font color="#CCCCCC"> odd</font>

542
00:28:28,210 --> 00:28:34,809
and<font color="#CCCCCC"> after a</font><font color="#E5E5E5"> certain retransmit time</font>

543
00:28:31,690 --> 00:28:38,710
<font color="#E5E5E5">after trying it several times at some</font>

544
00:28:34,809 --> 00:28:40,418
point the TCP<font color="#E5E5E5"> stack gives up the tiara</font>

545
00:28:38,710 --> 00:28:44,169
<font color="#E5E5E5">and since I'm a bit</font><font color="#CCCCCC"> short on time I will</font>

546
00:28:40,419 --> 00:28:46,450
<font color="#E5E5E5">skip</font><font color="#CCCCCC"> that this me provides us with the</font>

547
00:28:44,169 --> 00:28:49,750
flow control<font color="#E5E5E5"> what does that mean well</font>

548
00:28:46,450 --> 00:28:52,179
every<font color="#E5E5E5"> network stag has received so the</font>

549
00:28:49,750 --> 00:28:54,880
colonel has a receive<font color="#E5E5E5"> buffer for each</font>

550
00:28:52,179 --> 00:28:57,580
TCP connection and that<font color="#CCCCCC"> buffer is size</font>

551
00:28:54,880 --> 00:29:00,820
limited to avoid kernel memory

552
00:28:57,580 --> 00:29:03,460
exhaustion which means that whenever the

553
00:29:00,820 --> 00:29:06,490
<font color="#CCCCCC">application so the web server or the</font><font color="#E5E5E5"> web</font>

554
00:29:03,460 --> 00:29:11,049
browser<font color="#CCCCCC"> is reading data some buffer</font>

555
00:29:06,490 --> 00:29:14,820
space is reclaimed<font color="#E5E5E5"> and when TCP segments</font>

556
00:29:11,049 --> 00:29:17,889
are arriving<font color="#E5E5E5"> some of that buffer is</font>

557
00:29:14,820 --> 00:29:19,928
consumed<font color="#E5E5E5"> it's a sliding</font><font color="#CCCCCC"> window and we</font>

558
00:29:17,889 --> 00:29:22,570
have seen in the<font color="#CCCCCC"> TCP Haddad's</font><font color="#E5E5E5"> window</font>

559
00:29:19,929 --> 00:29:24,669
<font color="#E5E5E5">slice so there's a</font><font color="#CCCCCC"> 16-bit field called</font>

560
00:29:22,570 --> 00:29:29,649
window size which specifies how many

561
00:29:24,669 --> 00:29:35,559
<font color="#E5E5E5">more bytes my my TCP stack has for</font>

562
00:29:29,649 --> 00:29:41,590
receiving<font color="#E5E5E5"> data from</font><font color="#CCCCCC"> the other side</font><font color="#E5E5E5"> to</font>

563
00:29:35,559 --> 00:29:44,610
<font color="#CCCCCC">vote dead logs</font><font color="#E5E5E5"> there's also a timer in a</font>

564
00:29:41,590 --> 00:29:46,990
timer called the persist timer which is

565
00:29:44,610 --> 00:29:49,590
started when the window is<font color="#E5E5E5"> when the</font>

566
00:29:46,990 --> 00:29:50,889
window size is zero<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that then at a</font>

567
00:29:49,590 --> 00:29:54,340
<font color="#E5E5E5">timeout</font>

568
00:29:50,889 --> 00:29:56,469
try retransmit<font color="#E5E5E5"> said TCP segment in order</font>

569
00:29:54,340 --> 00:29:59,709
to get<font color="#E5E5E5"> information about the new window</font>

570
00:29:56,470 --> 00:30:00,970
size<font color="#E5E5E5"> from the other side</font><font color="#CCCCCC"> congressional</font>

571
00:29:59,710 --> 00:30:05,229
control<font color="#E5E5E5"> level also</font>

572
00:30:00,970 --> 00:30:07,809
<font color="#E5E5E5">skipper but but the main idea</font><font color="#CCCCCC"> is to</font>

573
00:30:05,229 --> 00:30:11,049
control<font color="#E5E5E5"> the rate</font><font color="#CCCCCC"> of data entering the</font>

574
00:30:07,809 --> 00:30:16,239
network because of you're using<font color="#CCCCCC"> multiple</font>

575
00:30:11,049 --> 00:30:18,399
routers at some point you you may

576
00:30:16,239 --> 00:30:21,999
separate some of<font color="#E5E5E5"> the network links and</font>

577
00:30:18,399 --> 00:30:24,668
that is avoided<font color="#E5E5E5"> and TCP by doing by</font>

578
00:30:21,999 --> 00:30:27,210
applying congestion control<font color="#E5E5E5"> which</font>

579
00:30:24,669 --> 00:30:29,409
<font color="#E5E5E5">measure is for example the time between</font>

580
00:30:27,210 --> 00:30:32,889
<font color="#E5E5E5">segments</font><font color="#CCCCCC"> sent and acknowledgment</font>

581
00:30:29,409 --> 00:30:35,979
received<font color="#E5E5E5"> also</font><font color="#CCCCCC"> has</font><font color="#E5E5E5"> to do</font><font color="#CCCCCC"> with slow start</font>

582
00:30:32,889 --> 00:30:40,570
and how your window size<font color="#CCCCCC"> even given</font><font color="#E5E5E5"> no</font>

583
00:30:35,979 --> 00:30:42,580
buffer<font color="#E5E5E5"> gross acknowledgment well there</font>

584
00:30:40,570 --> 00:30:45,399
are some strategies<font color="#E5E5E5"> the basic one</font><font color="#CCCCCC"> is</font>

585
00:30:42,580 --> 00:30:48,820
every segment<font color="#E5E5E5"> is acknowledged</font>

586
00:30:45,399 --> 00:30:52,149
individually<font color="#E5E5E5"> there's a delayed where you</font>

587
00:30:48,820 --> 00:30:55,479
collect multiple<font color="#E5E5E5"> segments</font><font color="#CCCCCC"> to acknowledge</font>

588
00:30:52,149 --> 00:30:57,699
<font color="#CCCCCC">them at a certain</font><font color="#E5E5E5"> time then you have</font>

589
00:30:55,479 --> 00:31:01,649
<font color="#E5E5E5">also selective acknowledgments where you</font>

590
00:30:57,700 --> 00:31:05,340
can acknowledge discontinuous segments

591
00:31:01,649 --> 00:31:09,899
which helps for lowering<font color="#E5E5E5"> the</font><font color="#CCCCCC"> amount of</font>

592
00:31:05,340 --> 00:31:12,369
retransmissions<font color="#CCCCCC"> TCP also</font><font color="#E5E5E5"> carries some</font>

593
00:31:09,899 --> 00:31:13,959
maximum segment size to avoid

594
00:31:12,369 --> 00:31:16,738
fragmentation actually on the IP<font color="#CCCCCC"> layer</font>

595
00:31:13,960 --> 00:31:18,840
because it<font color="#CCCCCC"> is partially open</font><font color="#E5E5E5"> there's</font>

596
00:31:16,739 --> 00:31:21,629
some struggle because you have

597
00:31:18,840 --> 00:31:25,389
simultaneous<font color="#E5E5E5"> open so what if both</font>

598
00:31:21,629 --> 00:31:27,580
parties want<font color="#E5E5E5"> to open a</font><font color="#CCCCCC"> connection at the</font>

599
00:31:25,389 --> 00:31:29,349
very same<font color="#E5E5E5"> time then you</font><font color="#CCCCCC"> have a flag</font>

600
00:31:27,580 --> 00:31:32,739
which<font color="#CCCCCC"> was called</font><font color="#E5E5E5"> reset in order to</font>

601
00:31:29,349 --> 00:31:34,869
terminate<font color="#E5E5E5"> a connection there are some</font>

602
00:31:32,739 --> 00:31:38,710
extensions like<font color="#CCCCCC"> windows scaling and fast</font>

603
00:31:34,869 --> 00:31:41,499
<font color="#E5E5E5">open to improve the throughput and also</font>

604
00:31:38,710 --> 00:31:43,389
to lower the delay there<font color="#CCCCCC"> are some</font>

605
00:31:41,499 --> 00:31:46,450
attacks<font color="#E5E5E5"> like denial of service so if</font>

606
00:31:43,389 --> 00:31:48,879
your server implementation<font color="#CCCCCC"> accepts</font>

607
00:31:46,450 --> 00:31:51,909
<font color="#E5E5E5">something and allocates a lot of memory</font>

608
00:31:48,879 --> 00:31:55,299
for a<font color="#E5E5E5"> client which doesn't do a</font><font color="#CCCCCC"> lot but</font>

609
00:31:51,909 --> 00:31:57,159
<font color="#CCCCCC">just sending</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> syn frame that is bad and</font>

610
00:31:55,299 --> 00:31:59,259
leads to denial of service connection

611
00:31:57,159 --> 00:32:01,989
<font color="#E5E5E5">hijacking if you can predict the</font>

612
00:31:59,259 --> 00:32:05,679
sequence numbers<font color="#E5E5E5"> then you can</font><font color="#CCCCCC"> hydrect</font>

613
00:32:01,989 --> 00:32:08,019
<font color="#E5E5E5">and</font><font color="#CCCCCC"> omit data into an established</font>

614
00:32:05,679 --> 00:32:09,940
connection<font color="#CCCCCC"> there have</font><font color="#E5E5E5"> been some blind in</font>

615
00:32:08,019 --> 00:32:12,789
window attacks what does that mean<font color="#E5E5E5"> that</font>

616
00:32:09,940 --> 00:32:14,770
even<font color="#CCCCCC"> without</font><font color="#E5E5E5"> knowing</font><font color="#CCCCCC"> the sequence number</font>

617
00:32:12,789 --> 00:32:16,930
you can

618
00:32:14,770 --> 00:32:22,000
do with something<font color="#CCCCCC"> on a established TCP</font>

619
00:32:16,930 --> 00:32:25,750
connection such as<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> sending a reset</font>

620
00:32:22,000 --> 00:32:29,650
or sending a thin frame<font color="#E5E5E5"> and tearing that</font>

621
00:32:25,750 --> 00:32:31,870
<font color="#CCCCCC">connection down</font><font color="#E5E5E5"> the specification for</font>

622
00:32:29,650 --> 00:32:35,470
<font color="#E5E5E5">TCP is written in English</font><font color="#CCCCCC"> truth in</font>

623
00:32:31,870 --> 00:32:38,050
connection of our<font color="#CCCCCC"> C's</font><font color="#E5E5E5"> and there are some</font>

624
00:32:35,470 --> 00:32:41,140
<font color="#E5E5E5">widely deployed implementations during</font>

625
00:32:38,050 --> 00:32:45,240
some research work in Cambridge over the

626
00:32:41,140 --> 00:32:48,010
last<font color="#CCCCCC"> years me</font><font color="#E5E5E5"> and various colleagues</font>

627
00:32:45,240 --> 00:32:49,990
implemented a formal model<font color="#E5E5E5"> developed in</font>

628
00:32:48,010 --> 00:32:52,570
the interactive<font color="#E5E5E5"> theory to valhalla</font><font color="#CCCCCC"> for</font>

629
00:32:49,990 --> 00:32:55,510
which has a precise specification with

630
00:32:52,570 --> 00:32:58,179
implementation<font color="#CCCCCC"> no looseness</font><font color="#E5E5E5"> and we</font>

631
00:32:55,510 --> 00:33:02,350
really use that<font color="#E5E5E5"> as</font><font color="#CCCCCC"> an input</font><font color="#E5E5E5"> so the</font>

632
00:32:58,180 --> 00:33:04,500
sockets<font color="#E5E5E5"> API and interface for getting</font>

633
00:33:02,350 --> 00:33:07,899
the<font color="#CCCCCC"> TCP control</font><font color="#E5E5E5"> block which is the</font>

634
00:33:04,500 --> 00:33:11,800
<font color="#E5E5E5">internal state</font><font color="#CCCCCC"> of the TCP</font><font color="#E5E5E5"> and then the</font>

635
00:33:07,900 --> 00:33:14,380
<font color="#CCCCCC">viand phase which is data received and</font>

636
00:33:11,800 --> 00:33:17,590
send on that and we used<font color="#E5E5E5"> that formal</font>

637
00:33:14,380 --> 00:33:21,490
model to validate itself<font color="#E5E5E5"> as have we used</font>

638
00:33:17,590 --> 00:33:24,370
<font color="#E5E5E5">actual implementations to do that we use</font>

639
00:33:21,490 --> 00:33:26,550
it to draw some diagrams where you can

640
00:33:24,370 --> 00:33:29,560
see the rules which fires on<font color="#CCCCCC"> the</font>

641
00:33:26,550 --> 00:33:31,720
<font color="#E5E5E5">left-hand side when something happened</font>

642
00:33:29,560 --> 00:33:36,550
<font color="#E5E5E5">like there was a connect</font><font color="#CCCCCC"> called and then</font>

643
00:33:31,720 --> 00:33:40,480
<font color="#E5E5E5">the logical rule connect</font><font color="#CCCCCC"> 1 was used in</font>

644
00:33:36,550 --> 00:33:43,030
the<font color="#CCCCCC"> labeled transition system then we</font>

645
00:33:40,480 --> 00:33:47,290
see here<font color="#E5E5E5"> as well some TCP segments which</font>

646
00:33:43,030 --> 00:33:49,899
are out going out and<font color="#E5E5E5"> in what are the</font>

647
00:33:47,290 --> 00:33:54,399
<font color="#E5E5E5">contributions of the network semantics</font>

648
00:33:49,900 --> 00:33:57,190
<font color="#CCCCCC">its we checked we check the model</font><font color="#E5E5E5"> we</font>

649
00:33:54,400 --> 00:34:00,100
validated model by recording traces and

650
00:33:57,190 --> 00:34:01,690
executing them we published a<font color="#CCCCCC"> paper</font>

651
00:34:00,100 --> 00:34:03,550
called<font color="#CCCCCC"> engineering that's an logic</font>

652
00:34:01,690 --> 00:34:05,650
<font color="#E5E5E5">rigorous historical specification and</font>

653
00:34:03,550 --> 00:34:09,310
validation for<font color="#CCCCCC"> tcp/ip and</font><font color="#E5E5E5"> the UNIX</font>

654
00:34:05,650 --> 00:34:12,850
<font color="#E5E5E5">sockets</font><font color="#CCCCCC"> API</font><font color="#E5E5E5"> the specification itself is</font>

655
00:34:09,310 --> 00:34:15,130
typeset in 384 pages<font color="#E5E5E5"> that's all the</font>

656
00:34:12,850 --> 00:34:18,668
transitions you basically need<font color="#CCCCCC"> it's</font>

657
00:34:15,130 --> 00:34:20,260
<font color="#E5E5E5">roughly 10,000 lines of for code and a</font>

658
00:34:18,668 --> 00:34:25,149
lot of comments<font color="#E5E5E5"> will be embedded</font><font color="#CCCCCC"> in lot</font>

659
00:34:20,260 --> 00:34:27,890
of<font color="#E5E5E5"> latest code and the yonex tcp/ip sig</font>

660
00:34:25,149 --> 00:34:30,830
has usually around 15,000

661
00:34:27,889 --> 00:34:35,210
lines of code the<font color="#E5E5E5"> TCP state machine we</font>

662
00:34:30,830 --> 00:34:38,540
saw earlier is here in<font color="#E5E5E5"> this paragraph</font><font color="#CCCCCC"> in</font>

663
00:34:35,210 --> 00:34:41,840
this<font color="#E5E5E5"> diagram and we try to draw a more</font>

664
00:34:38,540 --> 00:34:43,820
correct<font color="#E5E5E5"> TCP state machine which led us</font>

665
00:34:41,840 --> 00:34:44,600
to<font color="#E5E5E5"> this picture</font><font color="#CCCCCC"> which is a bit</font><font color="#E5E5E5"> more</font>

666
00:34:43,820 --> 00:34:47,510
complicated

667
00:34:44,600 --> 00:34:50,659
we<font color="#E5E5E5"> have this state non-existing up here</font>

668
00:34:47,510 --> 00:34:54,050
and we have much more transitions<font color="#E5E5E5"> due to</font>

669
00:34:50,659 --> 00:34:56,600
timers and<font color="#E5E5E5"> so on so the state machine</font>

670
00:34:54,050 --> 00:35:00,050
use and common literature is actually

671
00:34:56,600 --> 00:35:05,029
<font color="#E5E5E5">not complete or</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> precise and we have</font>

672
00:35:00,050 --> 00:35:08,200
a<font color="#E5E5E5"> revision for that conclusion is</font><font color="#CCCCCC"> yeah</font>

673
00:35:05,030 --> 00:35:11,660
<font color="#E5E5E5">well</font><font color="#CCCCCC"> TCP RDS</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> deployed I hoped I</font>

674
00:35:08,200 --> 00:35:14,299
managed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> give you some insight how</font><font color="#CCCCCC"> TCP</font>

675
00:35:11,660 --> 00:35:16,960
<font color="#E5E5E5">IP actually works</font><font color="#CCCCCC"> the layered</font>

676
00:35:14,300 --> 00:35:20,270
<font color="#E5E5E5">architecture which</font><font color="#CCCCCC"> was agnostic of</font>

677
00:35:16,960 --> 00:35:23,870
underlying layers and in the network

678
00:35:20,270 --> 00:35:26,840
semantics working we had an executable

679
00:35:23,870 --> 00:35:29,660
specification that all I have to<font color="#CCCCCC"> say and</font>

680
00:35:26,840 --> 00:35:33,370
I welcome<font color="#E5E5E5"> you</font><font color="#CCCCCC"> to ask any questions</font>

681
00:35:29,660 --> 00:35:33,370
<font color="#E5E5E5">either now or offer</font>

682
00:35:40,110 --> 00:35:46,000
thank you so if you have any questions

683
00:35:43,060 --> 00:35:50,380
<font color="#E5E5E5">just go to the microphones we have two</font>

684
00:35:46,000 --> 00:35:55,290
here and two<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> right side and do we</font>

685
00:35:50,380 --> 00:35:55,290
have<font color="#CCCCCC"> some questions</font><font color="#E5E5E5"> from the</font><font color="#CCCCCC"> Internet no</font>

686
00:35:56,130 --> 00:36:06,090
questions no<font color="#E5E5E5"> more questions</font>

687
00:35:59,550 --> 00:36:09,370
yeah<font color="#CCCCCC"> one</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> come on</font><font color="#E5E5E5"> don't be shy</font>

688
00:36:06,090 --> 00:36:12,070
right hi<font color="#E5E5E5"> thanks it was a very</font>

689
00:36:09,370 --> 00:36:15,370
interesting talk<font color="#E5E5E5"> so your model does it</font>

690
00:36:12,070 --> 00:36:17,200
allow synthesizing a implementation from

691
00:36:15,370 --> 00:36:21,279
<font color="#E5E5E5">the specification or is it used mostly</font>

692
00:36:17,200 --> 00:36:22,810
for validating<font color="#CCCCCC"> it's at the moment useful</font>

693
00:36:21,280 --> 00:36:24,730
validation<font color="#CCCCCC"> because we have the</font>

694
00:36:22,810 --> 00:36:26,620
specification looseness<font color="#CCCCCC"> so we have</font>

695
00:36:24,730 --> 00:36:28,360
implementation looseness<font color="#CCCCCC"> so at some</font>

696
00:36:26,620 --> 00:36:31,600
<font color="#CCCCCC">point in their invitation you have to</font>

697
00:36:28,360 --> 00:36:33,700
choose whether you take one transition

698
00:36:31,600 --> 00:36:35,890
or the<font color="#E5E5E5"> other one so if you go into</font><font color="#CCCCCC"> a</font>

699
00:36:33,700 --> 00:36:38,680
failure<font color="#CCCCCC"> state or if you go into</font><font color="#E5E5E5"> a</font>

700
00:36:35,890 --> 00:36:41,200
success or if<font color="#E5E5E5"> you transmit some piece</font><font color="#CCCCCC"> of</font>

701
00:36:38,680 --> 00:36:42,899
<font color="#E5E5E5">data and</font><font color="#CCCCCC"> go into a success state</font><font color="#E5E5E5"> so we</font>

702
00:36:41,200 --> 00:36:45,490
don't have synthesized<font color="#CCCCCC"> any</font>

703
00:36:42,900 --> 00:36:49,210
implementation<font color="#CCCCCC"> but there's ongoing work</font>

704
00:36:45,490 --> 00:36:52,060
<font color="#CCCCCC">to use it as a implementation as a base</font>

705
00:36:49,210 --> 00:36:54,340
for implement implementation<font color="#E5E5E5"> okay and do</font>

706
00:36:52,060 --> 00:36:56,620
<font color="#E5E5E5">you think</font><font color="#CCCCCC"> that if such a implementation</font>

707
00:36:54,340 --> 00:37:03,510
can<font color="#E5E5E5"> be made</font><font color="#CCCCCC"> can it be made efficient as</font>

708
00:36:56,620 --> 00:37:03,509
well<font color="#E5E5E5"> once synthesized yes okay</font><font color="#CCCCCC"> thanks</font>

709
00:37:03,960 --> 00:37:07,830
[Music]

710
00:37:05,430 --> 00:37:13,149
yeah your question please

711
00:37:07,830 --> 00:37:16,420
<font color="#CCCCCC">thank you how independent</font><font color="#E5E5E5"> is TCP from IP</font>

712
00:37:13,150 --> 00:37:18,790
I mean can you integrate TCP over

713
00:37:16,420 --> 00:37:25,030
<font color="#E5E5E5">different protocols like Bluetooth or</font>

714
00:37:18,790 --> 00:37:28,390
something that since TCP requires for

715
00:37:25,030 --> 00:37:30,580
error messages a bit of ICMP<font color="#CCCCCC"> I'm I</font>

716
00:37:28,390 --> 00:37:36,790
haven't seen any<font color="#E5E5E5"> TCP implementation on</font>

717
00:37:30,580 --> 00:37:39,400
<font color="#CCCCCC">top of any</font><font color="#E5E5E5"> other medium than IP so I</font>

718
00:37:36,790 --> 00:37:44,910
don't know but I can think<font color="#CCCCCC"> of it</font>

719
00:37:39,400 --> 00:37:46,530
<font color="#CCCCCC">good work okay your question please</font>

720
00:37:44,910 --> 00:37:49,740
<font color="#E5E5E5">thank you hello</font>

721
00:37:46,530 --> 00:37:52,900
<font color="#E5E5E5">so you used</font><font color="#CCCCCC"> all four for the</font>

722
00:37:49,740 --> 00:37:55,839
specification<font color="#CCCCCC"> part did</font><font color="#E5E5E5"> you actually need</font>

723
00:37:52,900 --> 00:37:57,100
to the higher-order logic part of<font color="#E5E5E5"> whole</font>

724
00:37:55,840 --> 00:38:06,910
or would it be<font color="#CCCCCC"> possible to just use</font>

725
00:37:57,100 --> 00:38:10,750
predicate logic<font color="#CCCCCC"> see</font><font color="#E5E5E5"> I I will have to</font>

726
00:38:06,910 --> 00:38:13,149
<font color="#CCCCCC">reread I</font><font color="#E5E5E5"> think we need actually some</font>

727
00:38:10,750 --> 00:38:18,100
higher<font color="#CCCCCC"> order logic</font><font color="#E5E5E5"> for it for the host</font>

728
00:38:13,150 --> 00:38:22,030
state<font color="#E5E5E5"> and the transitions would be it</font>

729
00:38:18,100 --> 00:38:23,470
would be<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> to meet and well</font>

730
00:38:22,030 --> 00:38:27,430
the paper has been<font color="#E5E5E5"> published a journal</font>

731
00:38:23,470 --> 00:38:29,500
of<font color="#E5E5E5"> ACM and luckily Sky Harbor is is</font>

732
00:38:27,430 --> 00:38:34,839
available<font color="#CCCCCC"> and you can</font><font color="#E5E5E5"> download it for</font>

733
00:38:29,500 --> 00:38:36,030
free<font color="#E5E5E5"> from there</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> thanks any more</font>

734
00:38:34,840 --> 00:38:40,360
questions

735
00:38:36,030 --> 00:38:41,590
<font color="#E5E5E5">No then thank you</font><font color="#CCCCCC"> Hannah's</font><font color="#E5E5E5"> a warm</font>

736
00:38:40,360 --> 00:38:42,250
applause for Hannah's<font color="#CCCCCC"> plea</font>

737
00:38:41,590 --> 00:38:44,670
[Applause]

738
00:38:42,250 --> 00:38:46,460
[Music]

739
00:38:44,670 --> 00:38:49,749
[Applause]

740
00:38:46,460 --> 00:38:49,749
[Music]

741
00:38:52,480 --> 00:39:14,380
[Music]

