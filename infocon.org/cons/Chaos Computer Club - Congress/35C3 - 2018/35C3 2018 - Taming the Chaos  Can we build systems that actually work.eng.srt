1
00:00:02,830 --> 00:00:15,470
[Music]

2
00:00:17,390 --> 00:00:29,609
okay um<font color="#E5E5E5"> our next</font><font color="#CCCCCC"> speaker will be trying</font>

3
00:00:25,859 --> 00:00:32,130
<font color="#E5E5E5">to tame the chaos</font><font color="#CCCCCC"> Peters fuel</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> the</font>

4
00:00:29,609 --> 00:00:44,120
<font color="#E5E5E5">University of Cambridge</font><font color="#CCCCCC"> a warm round of</font>

5
00:00:32,130 --> 00:00:48,590
applause please<font color="#E5E5E5"> okay here we are</font>

6
00:00:44,120 --> 00:00:51,059
<font color="#CCCCCC">III</font><font color="#E5E5E5"> again with a program full of</font>

7
00:00:48,590 --> 00:00:54,360
<font color="#E5E5E5">fascinating and exciting and cool</font><font color="#CCCCCC"> stuff</font>

8
00:00:51,059 --> 00:00:57,930
<font color="#E5E5E5">and</font><font color="#CCCCCC"> if we look just at the security</font>

9
00:00:54,360 --> 00:00:59,670
talks all manner of interesting things

10
00:00:57,930 --> 00:01:00,500
so I'm gonna go to lots of these you

11
00:00:59,670 --> 00:01:03,420
<font color="#CCCCCC">should too</font>

12
00:01:00,500 --> 00:01:06,720
let's see though<font color="#E5E5E5"> if we read some of the</font>

13
00:01:03,420 --> 00:01:12,270
titles<font color="#E5E5E5"> exploiting kernel memory</font>

14
00:01:06,720 --> 00:01:18,210
corruptions<font color="#E5E5E5"> attacking</font><font color="#CCCCCC"> end-to-end email</font>

15
00:01:12,270 --> 00:01:25,580
encryption what else have<font color="#CCCCCC"> we got modern</font>

16
00:01:18,210 --> 00:01:31,258
<font color="#CCCCCC">Windows user space exploitation</font><font color="#E5E5E5"> hmm</font>

17
00:01:25,580 --> 00:01:33,900
compromising online accounts hmm<font color="#E5E5E5"> okay so</font>

18
00:01:31,259 --> 00:01:36,180
a lot<font color="#CCCCCC"> of these talks as usual</font><font color="#E5E5E5"> they are</font>

19
00:01:33,900 --> 00:01:39,720
<font color="#E5E5E5">explaining to us that computers they're</font>

20
00:01:36,180 --> 00:01:42,720
not doing<font color="#E5E5E5"> what</font><font color="#CCCCCC"> we would like and this as</font>

21
00:01:39,720 --> 00:01:45,329
usual<font color="#CCCCCC"> is the merest</font><font color="#E5E5E5"> tip of a tiny</font>

22
00:01:42,720 --> 00:01:48,929
<font color="#E5E5E5">iceberg right</font><font color="#CCCCCC"> we have a hundreds of</font>

23
00:01:45,329 --> 00:01:51,720
thousands of known vulnerabilities<font color="#CCCCCC"> how</font>

24
00:01:48,930 --> 00:01:53,250
many unknown vulnerabilities<font color="#CCCCCC"> let me do</font>

25
00:01:51,720 --> 00:01:54,390
it's a bit dark<font color="#CCCCCC"> here but</font><font color="#E5E5E5"> let me try some</font>

26
00:01:53,250 --> 00:01:56,610
audience participation

27
00:01:54,390 --> 00:02:02,360
how many of you have in the<font color="#E5E5E5"> last year</font>

28
00:01:56,610 --> 00:02:02,360
<font color="#E5E5E5">written at least a</font><font color="#CCCCCC"> hundred lines of code</font>

29
00:02:02,899 --> 00:02:07,300
and all of those people<font color="#E5E5E5"> keep your hands</font>

30
00:02:06,390 --> 00:02:10,610
up

31
00:02:07,300 --> 00:02:16,640
you are completely<font color="#E5E5E5"> confident that code</font>

32
00:02:10,610 --> 00:02:18,200
<font color="#E5E5E5">does the right thing I would like to</font>

33
00:02:16,640 --> 00:02:21,799
talk<font color="#E5E5E5"> to you later</font>

34
00:02:18,200 --> 00:02:23,510
and so with the people in the

35
00:02:21,800 --> 00:02:28,459
<font color="#E5E5E5">self-driving car that you're probably</font>

36
00:02:23,510 --> 00:02:30,980
engineering so so how many unknown

37
00:02:28,459 --> 00:02:32,780
vulnerabilities then well you can take

38
00:02:30,980 --> 00:02:38,810
what's in your<font color="#E5E5E5"> mind right</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> and</font>

39
00:02:32,780 --> 00:02:43,940
multiply it by oh this doesn't<font color="#E5E5E5"> work very</font>

40
00:02:38,810 --> 00:02:51,260
<font color="#E5E5E5">well no no no computers they do the</font>

41
00:02:43,940 --> 00:02:53,900
wrong thing again<font color="#CCCCCC"> and again and again we</font>

42
00:02:51,260 --> 00:02:55,940
can<font color="#E5E5E5"> multiply by this estimate of about a</font>

43
00:02:53,900 --> 00:02:58,940
<font color="#E5E5E5">hundred million lines of new code</font><font color="#CCCCCC"> each</font>

44
00:02:55,940 --> 00:03:01,730
year all<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so if we take all of this</font>

45
00:02:58,940 --> 00:03:03,920
these<font color="#E5E5E5"> talks these numbers these should</font>

46
00:03:01,730 --> 00:03:07,518
make us not happy and excited<font color="#E5E5E5"> these</font>

47
00:03:03,920 --> 00:03:11,720
should make us sad very sad<font color="#E5E5E5"> and frankly</font>

48
00:03:07,519 --> 00:03:17,900
rather scared of what is going<font color="#CCCCCC"> on</font><font color="#E5E5E5"> in the</font>

49
00:03:11,720 --> 00:03:22,209
world<font color="#CCCCCC"> so what can we do we can</font><font color="#E5E5E5"> option</font>

50
00:03:17,900 --> 00:03:22,209
<font color="#E5E5E5">one give up using computers</font><font color="#CCCCCC"> altogether</font>

51
00:03:24,310 --> 00:03:29,000
in most<font color="#CCCCCC"> audiences this will be a</font><font color="#E5E5E5"> hard</font>

52
00:03:26,840 --> 00:03:34,850
<font color="#CCCCCC">sell but here I'm sure you're all happy</font>

53
00:03:29,000 --> 00:03:37,989
<font color="#E5E5E5">to just turn them off now or we can</font>

54
00:03:34,850 --> 00:03:48,829
throw our hands in the air<font color="#CCCCCC"> and</font><font color="#E5E5E5"> collapse</font>

55
00:03:37,989 --> 00:03:53,540
<font color="#E5E5E5">in some kind of pit of despair well</font>

56
00:03:48,829 --> 00:03:56,450
maybe maybe<font color="#CCCCCC"> not</font><font color="#E5E5E5"> my task today is to</font><font color="#CCCCCC"> give</font>

57
00:03:53,540 --> 00:03:59,239
<font color="#CCCCCC">you a tiny smidgen a very tall a very</font>

58
00:03:56,450 --> 00:04:01,820
small<font color="#E5E5E5"> amount of hope that it may be</font>

59
00:03:59,239 --> 00:04:02,959
<font color="#CCCCCC">possible to</font><font color="#E5E5E5"> do slightly better if we</font>

60
00:04:01,820 --> 00:04:06,940
want<font color="#CCCCCC"> to do better</font><font color="#E5E5E5"> we first have to</font>

61
00:04:02,959 --> 00:04:06,940
understand why things<font color="#E5E5E5"> are so bad</font>

62
00:04:07,040 --> 00:04:11,328
if we look at<font color="#E5E5E5"> our aeronautical</font>

63
00:04:08,959 --> 00:04:13,940
engineering colleagues<font color="#E5E5E5"> for example they</font>

64
00:04:11,329 --> 00:04:16,190
can<font color="#CCCCCC"> make planes</font><font color="#E5E5E5"> which very</font><font color="#CCCCCC"> rarely</font><font color="#E5E5E5"> fall</font>

65
00:04:13,940 --> 00:04:18,829
<font color="#E5E5E5">out of the sky why is it that they</font><font color="#CCCCCC"> can</font>

66
00:04:16,190 --> 00:04:20,000
do that and we<font color="#CCCCCC"> are so at making</font>

67
00:04:18,829 --> 00:04:23,510
computers

68
00:04:20,000 --> 00:04:26,230
well I'm gonna reuse a picture that I

69
00:04:23,510 --> 00:04:28,640
used it<font color="#E5E5E5"> 31 c3 which is still the best</font>

70
00:04:26,230 --> 00:04:31,010
description I can<font color="#E5E5E5"> find of the stack of</font>

71
00:04:28,640 --> 00:04:33,430
hardware<font color="#E5E5E5"> and</font><font color="#CCCCCC"> software that</font><font color="#E5E5E5"> we live above</font>

72
00:04:31,010 --> 00:04:36,289
<font color="#E5E5E5">all right here we go</font>

73
00:04:33,430 --> 00:04:39,980
it's and there's so much information

74
00:04:36,290 --> 00:04:41,870
this is just ace<font color="#CCCCCC"> so we see down here</font><font color="#E5E5E5"> all</font>

75
00:04:39,980 --> 00:04:44,360
<font color="#E5E5E5">of this transparent silicon it's the</font>

76
00:04:41,870 --> 00:04:47,750
hardware<font color="#E5E5E5"> we live above we</font><font color="#CCCCCC"> see a stack of</font>

77
00:04:44,360 --> 00:04:51,140
phases of a<font color="#E5E5E5"> C compiler we see all kinds</font>

78
00:04:47,750 --> 00:04:52,700
<font color="#CCCCCC">of other other bits and pieces</font><font color="#E5E5E5"> it might</font>

79
00:04:51,140 --> 00:04:57,219
be a slightly hostile wireless

80
00:04:52,700 --> 00:04:57,219
environment<font color="#CCCCCC"> in this room for some reason</font>

81
00:04:57,430 --> 00:05:02,060
if we<font color="#E5E5E5"> look at this and think about the</font>

82
00:05:00,200 --> 00:05:05,120
root causes<font color="#CCCCCC"> for why our systems are so</font>

83
00:05:02,060 --> 00:05:07,400
bad<font color="#CCCCCC"> we can see several</font><font color="#E5E5E5"> things so</font><font color="#CCCCCC"> the</font>

84
00:05:05,120 --> 00:05:09,530
first<font color="#CCCCCC"> is</font><font color="#E5E5E5"> obviously there's a lot of</font>

85
00:05:07,400 --> 00:05:12,320
<font color="#E5E5E5">legacy complexity that we're really</font>

86
00:05:09,530 --> 00:05:14,150
stuck<font color="#CCCCCC"> with all</font><font color="#E5E5E5"> right if you pull out one</font>

87
00:05:12,320 --> 00:05:15,290
of those pieces from<font color="#E5E5E5"> the middle and try</font>

88
00:05:14,150 --> 00:05:17,690
and replace it<font color="#CCCCCC"> with something</font><font color="#E5E5E5"> which is</font>

89
00:05:15,290 --> 00:05:19,150
<font color="#CCCCCC">not exactly</font><font color="#E5E5E5"> the same</font><font color="#CCCCCC"> shape the whole</font>

90
00:05:17,690 --> 00:05:21,350
pile will collapse

91
00:05:19,150 --> 00:05:24,669
<font color="#E5E5E5">so we somehow need</font><font color="#CCCCCC"> to find an</font>

92
00:05:21,350 --> 00:05:27,950
incremental path to a<font color="#E5E5E5"> better world</font><font color="#CCCCCC"> and</font>

93
00:05:24,669 --> 00:05:30,020
<font color="#CCCCCC">then this is the most fundamental reason</font>

94
00:05:27,950 --> 00:05:32,780
that these<font color="#E5E5E5"> are not like airplanes these</font>

95
00:05:30,020 --> 00:05:35,719
<font color="#E5E5E5">systems are discrete not continuous if</font>

96
00:05:32,780 --> 00:05:38,090
you take a an honest<font color="#CCCCCC"> girder</font><font color="#E5E5E5"> made out of</font>

97
00:05:35,720 --> 00:05:40,390
a piece<font color="#CCCCCC"> of</font><font color="#E5E5E5"> steel and you push on</font><font color="#CCCCCC"> it a</font>

98
00:05:38,090 --> 00:05:43,130
<font color="#E5E5E5">little bit it moves a little</font><font color="#CCCCCC"> bit</font>

99
00:05:40,390 --> 00:05:45,789
basically in proportion if it's<font color="#CCCCCC"> one</font>

100
00:05:43,130 --> 00:05:48,680
<font color="#CCCCCC">percent</font><font color="#E5E5E5"> too strong one percent too weak</font>

101
00:05:45,790 --> 00:05:51,250
<font color="#E5E5E5">basically it doesn't</font><font color="#CCCCCC"> matter hmm but in</font>

102
00:05:48,680 --> 00:05:53,960
these things<font color="#E5E5E5"> one line of code can mean</font>

103
00:05:51,250 --> 00:05:59,000
you are open to<font color="#CCCCCC"> a catastrophic exploit</font>

104
00:05:53,960 --> 00:06:03,370
and one line in many many million<font color="#E5E5E5"> okay</font>

105
00:05:59,000 --> 00:06:03,370
next<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> really doesn't work</font>

106
00:06:04,720 --> 00:06:09,680
they're<font color="#E5E5E5"> very complicated but the scary</font>

107
00:06:07,580 --> 00:06:11,990
thing<font color="#E5E5E5"> is not the static complexity of</font>

108
00:06:09,680 --> 00:06:13,490
those lines of lines of code<font color="#E5E5E5"> and the</font>

109
00:06:11,990 --> 00:06:15,200
number of components<font color="#CCCCCC"> although that's</font>

110
00:06:13,490 --> 00:06:17,990
pretty<font color="#E5E5E5"> intimidating the really scary</font>

111
00:06:15,200 --> 00:06:21,200
<font color="#E5E5E5">thing is the exponential number of</font>

112
00:06:17,990 --> 00:06:23,870
<font color="#E5E5E5">states and execution paths so these two</font>

113
00:06:21,200 --> 00:06:26,090
<font color="#CCCCCC">together</font><font color="#E5E5E5"> they mean</font><font color="#CCCCCC"> that the testing that</font>

114
00:06:23,870 --> 00:06:27,290
<font color="#CCCCCC">we rely on testing is the</font><font color="#E5E5E5"> only way we</font>

115
00:06:26,090 --> 00:06:30,650
<font color="#E5E5E5">have to build</font><font color="#CCCCCC"> systems which are</font><font color="#E5E5E5"> not</font>

116
00:06:27,290 --> 00:06:35,660
instantly broken testing<font color="#E5E5E5"> can never save</font>

117
00:06:30,650 --> 00:06:39,080
us from these exploitable errors<font color="#E5E5E5"> and</font>

118
00:06:35,660 --> 00:06:41,720
that means<font color="#E5E5E5"> ultimately we need to do</font>

119
00:06:39,080 --> 00:06:45,169
proof<font color="#E5E5E5"> my honest machine checked</font>

120
00:06:41,720 --> 00:06:46,610
<font color="#E5E5E5">mathematical proof and it also tells us</font>

121
00:06:45,170 --> 00:06:50,300
<font color="#CCCCCC">that we need to</font><font color="#E5E5E5"> arrange for our systems</font>

122
00:06:46,610 --> 00:06:52,580
to be secure for simple reasons<font color="#E5E5E5"> that do</font>

123
00:06:50,300 --> 00:06:56,300
<font color="#E5E5E5">not depend on the correctness of all of</font>

124
00:06:52,580 --> 00:06:58,430
those hundred<font color="#E5E5E5"> billion lines of code then</font>

125
00:06:56,300 --> 00:07:01,190
another<font color="#E5E5E5"> thing that we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> all</font>

126
00:06:58,430 --> 00:07:04,610
<font color="#E5E5E5">these interfaces the architecture</font>

127
00:07:01,190 --> 00:07:06,980
interface<font color="#E5E5E5"> the C language interface the</font>

128
00:07:04,610 --> 00:07:10,190
sockets API interface the TCP<font color="#E5E5E5"> Y</font>

129
00:07:06,980 --> 00:07:12,380
interface<font color="#E5E5E5"> all of these we will rely on</font>

130
00:07:10,190 --> 00:07:14,150
to let different parts of the system<font color="#E5E5E5"> be</font>

131
00:07:12,380 --> 00:07:19,760
engineered by different<font color="#CCCCCC"> organizations</font>

132
00:07:14,150 --> 00:07:24,440
but they're all really<font color="#CCCCCC"> badly described</font>

133
00:07:19,760 --> 00:07:27,800
and badly defined so what you find is

134
00:07:24,440 --> 00:07:29,660
for each<font color="#CCCCCC"> of these typically</font><font color="#E5E5E5"> a prose book</font>

135
00:07:27,800 --> 00:07:33,560
varying in<font color="#CCCCCC"> thickness between about that</font>

136
00:07:29,660 --> 00:07:37,010
and about that full<font color="#E5E5E5"> of text well we</font>

137
00:07:33,560 --> 00:07:39,740
still rely<font color="#CCCCCC"> on testing limited though it</font>

138
00:07:37,010 --> 00:07:43,550
is but you can never<font color="#E5E5E5"> test anything</font>

139
00:07:39,740 --> 00:07:45,950
against<font color="#E5E5E5"> those books</font><font color="#CCCCCC"> so we need</font><font color="#E5E5E5"> instead</font>

140
00:07:43,550 --> 00:07:48,770
interface descriptions definition

141
00:07:45,950 --> 00:07:52,120
specifications<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are more rigorous</font>

142
00:07:48,770 --> 00:07:54,380
mathematically rigorous<font color="#E5E5E5"> and that are</font>

143
00:07:52,120 --> 00:07:55,790
executable<font color="#E5E5E5"> not in the normal sense of</font>

144
00:07:54,380 --> 00:07:58,400
executable as an implementation<font color="#CCCCCC"> but</font>

145
00:07:55,790 --> 00:08:01,070
executable<font color="#E5E5E5"> as a test Oracle</font><font color="#CCCCCC"> so you can</font>

146
00:07:58,400 --> 00:08:03,799
compute whether some observed<font color="#E5E5E5"> behavior</font>

147
00:08:01,070 --> 00:08:05,870
is allowed or not<font color="#E5E5E5"> and not have to read</font>

148
00:08:03,800 --> 00:08:07,760
the book<font color="#CCCCCC"> and argue on the internet and</font>

149
00:08:05,870 --> 00:08:13,270
we also need interface definitions<font color="#E5E5E5"> that</font>

150
00:08:07,760 --> 00:08:13,270
support this proof<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> need and then</font>

151
00:08:15,669 --> 00:08:23,180
all of this stuff<font color="#E5E5E5"> was made up in</font><font color="#CCCCCC"> the</font>

152
00:08:18,080 --> 00:08:25,430
<font color="#E5E5E5">1970s</font><font color="#CCCCCC"> or the</font><font color="#E5E5E5"> sixties and in 70s in the</font>

153
00:08:23,180 --> 00:08:26,930
60s<font color="#CCCCCC"> the world was a happy place and</font>

154
00:08:25,430 --> 00:08:30,760
<font color="#E5E5E5">people walked around with flowers in</font>

155
00:08:26,930 --> 00:08:33,529
their hair<font color="#E5E5E5"> and nothing</font><font color="#CCCCCC"> bad ever happened</font>

156
00:08:30,760 --> 00:08:35,960
and that<font color="#E5E5E5"> is no longer the case</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

157
00:08:33,529 --> 00:08:37,429
so we need defensive design<font color="#E5E5E5"> but we need</font>

158
00:08:35,960 --> 00:08:39,830
defensive design<font color="#CCCCCC"> that is somehow</font>

159
00:08:37,429 --> 00:08:41,718
compatible or can be<font color="#E5E5E5"> made enough</font>

160
00:08:39,830 --> 00:08:45,650
compatible with this legacy<font color="#E5E5E5"> investment</font>

161
00:08:41,719 --> 00:08:47,089
<font color="#E5E5E5">so that's quite hard and then I can't</font>

162
00:08:45,650 --> 00:08:48,620
say very<font color="#CCCCCC"> much</font><font color="#E5E5E5"> about this but we have at</font>

163
00:08:47,089 --> 00:08:50,570
the<font color="#CCCCCC"> moment very bad</font><font color="#E5E5E5"> incentives because</font>

164
00:08:48,620 --> 00:08:52,610
<font color="#E5E5E5">we have a very strong</font><font color="#CCCCCC"> incentive to</font><font color="#E5E5E5"> make</font>

165
00:08:50,570 --> 00:08:54,680
things that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> more complex that we can</font>

166
00:08:52,610 --> 00:08:58,250
possibly<font color="#E5E5E5"> handle or understand</font><font color="#CCCCCC"> all right</font>

167
00:08:54,680 --> 00:08:59,989
<font color="#E5E5E5">we make things we add features we make a</font>

168
00:08:58,250 --> 00:09:02,240
thing which<font color="#E5E5E5"> is</font><font color="#CCCCCC"> just about shippable</font><font color="#E5E5E5"> and</font>

169
00:08:59,990 --> 00:09:05,990
then we ship it<font color="#E5E5E5"> and then we go</font><font color="#CCCCCC"> on to the</font>

170
00:09:02,240 --> 00:09:08,330
next<font color="#CCCCCC"> thing mm-hm so we need</font><font color="#E5E5E5"> economic and</font>

171
00:09:05,990 --> 00:09:10,880
legal incentives for simplicity and for

172
00:09:08,330 --> 00:09:12,529
<font color="#CCCCCC">security that we do not</font><font color="#E5E5E5"> yet have but</font>

173
00:09:10,880 --> 00:09:16,850
it's hard<font color="#E5E5E5"> to talk about those until we</font>

174
00:09:12,529 --> 00:09:19,640
have the<font color="#E5E5E5"> technical means to react to</font>

175
00:09:16,850 --> 00:09:21,860
<font color="#E5E5E5">those incentives okay so what I'm</font><font color="#CCCCCC"> gonna</font>

176
00:09:19,640 --> 00:09:23,449
<font color="#E5E5E5">do now I'm gonna talk</font><font color="#CCCCCC"> about two of these</font>

177
00:09:21,860 --> 00:09:25,940
<font color="#CCCCCC">interfaces the</font><font color="#E5E5E5"> architecture interface</font>

178
00:09:23,450 --> 00:09:27,550
and the C language interface and see

179
00:09:25,940 --> 00:09:32,360
what we can do to make<font color="#E5E5E5"> things better</font><font color="#CCCCCC"> a</font>

180
00:09:27,550 --> 00:09:34,790
lot<font color="#CCCCCC"> of this has to do with memory</font><font color="#E5E5E5"> so</font>

181
00:09:32,360 --> 00:09:35,779
whoever it was that<font color="#CCCCCC"> picked the subtitle</font>

182
00:09:34,790 --> 00:09:38,660
for this<font color="#E5E5E5"> meeting</font>

183
00:09:35,779 --> 00:09:43,250
refreshing memories<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> cuz it's</font>

184
00:09:38,660 --> 00:09:45,709
great<font color="#E5E5E5"> I love</font><font color="#CCCCCC"> it let's</font><font color="#E5E5E5"> refresh your</font>

185
00:09:43,250 --> 00:09:47,570
memory quite away<font color="#E5E5E5"> all right so I invite</font>

186
00:09:45,709 --> 00:09:52,910
you<font color="#CCCCCC"> to think</font><font color="#E5E5E5"> back to when you were very</font>

187
00:09:47,570 --> 00:09:55,279
<font color="#E5E5E5">very young in about 1837 when cool</font>

188
00:09:52,910 --> 00:09:58,550
hacking was going on<font color="#E5E5E5"> Charles Babbage was</font>

189
00:09:55,279 --> 00:10:01,100
designing<font color="#CCCCCC"> the analytical engine and even</font>

190
00:09:58,550 --> 00:10:03,319
<font color="#CCCCCC">then you see there was this</font><font color="#E5E5E5"> dichotomy</font>

191
00:10:01,100 --> 00:10:08,120
between<font color="#E5E5E5"> a mill performing operations and</font>

192
00:10:03,320 --> 00:10:10,850
a store holding numbers<font color="#E5E5E5"> this is a plan</font>

193
00:10:08,120 --> 00:10:13,279
view of the analytical engine<font color="#CCCCCC"> well it</font>

194
00:10:10,850 --> 00:10:15,200
was<font color="#E5E5E5"> vaporware but a design from the</font>

195
00:10:13,279 --> 00:10:17,510
analytical<font color="#E5E5E5"> engine</font><font color="#CCCCCC"> and you see here</font><font color="#E5E5E5"> these</font>

196
00:10:15,200 --> 00:10:21,140
circles these are columns of numbers

197
00:10:17,510 --> 00:10:23,600
<font color="#CCCCCC">each made out of a stack of maybe</font>

198
00:10:21,140 --> 00:10:24,720
a 50 digit decimal number<font color="#E5E5E5"> in each of</font>

199
00:10:23,600 --> 00:10:28,860
those<font color="#E5E5E5"> columns</font>

200
00:10:24,720 --> 00:10:31,560
<font color="#E5E5E5">hmm and this array really he imagined it</font>

201
00:10:28,860 --> 00:10:34,949
going on out to an over there<font color="#E5E5E5"> somewhere</font>

202
00:10:31,560 --> 00:10:37,378
<font color="#CCCCCC">with</font><font color="#E5E5E5"> about a thousand numbers so so even</font>

203
00:10:34,949 --> 00:10:42,180
then you have<font color="#CCCCCC"> a memory</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is an array</font>

204
00:10:37,379 --> 00:10:44,220
of<font color="#E5E5E5"> numbers</font><font color="#CCCCCC"> I think these were</font><font color="#E5E5E5"> not I</font>

205
00:10:42,180 --> 00:10:46,410
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> you could do address</font>

206
00:10:44,220 --> 00:10:48,660
computation<font color="#E5E5E5"> on these things I think</font>

207
00:10:46,410 --> 00:10:53,699
addresses<font color="#E5E5E5"> were only constants but still</font>

208
00:10:48,660 --> 00:10:56,069
basically an array<font color="#CCCCCC"> of</font><font color="#E5E5E5"> numbers so okay</font>

209
00:10:53,699 --> 00:10:59,490
what<font color="#CCCCCC"> do we got now let's look a bit at</font>

210
00:10:56,069 --> 00:11:01,079
see<font color="#CCCCCC"> how many of those</font><font color="#E5E5E5"> people</font><font color="#CCCCCC"> were</font>

211
00:10:59,490 --> 00:11:07,079
programmed 100 lines of code how many<font color="#E5E5E5"> of</font>

212
00:11:01,079 --> 00:11:10,378
you were<font color="#CCCCCC"> C programmers a few or maybe</font>

213
00:11:07,079 --> 00:11:12,149
you're just<font color="#E5E5E5"> embarrassed</font><font color="#CCCCCC"> oh I forgot</font><font color="#E5E5E5"> to</font>

214
00:11:10,379 --> 00:11:13,410
say yeah<font color="#E5E5E5"> all of those that didn't put</font>

215
00:11:12,149 --> 00:11:17,639
<font color="#E5E5E5">your hands up</font><font color="#CCCCCC"> for that for</font><font color="#E5E5E5"> this question</font>

216
00:11:13,410 --> 00:11:19,920
<font color="#E5E5E5">you</font><font color="#CCCCCC"> should feel proud</font><font color="#E5E5E5"> and you should</font>

217
00:11:17,639 --> 00:11:23,879
glory<font color="#CCCCCC"> in your innocence</font><font color="#E5E5E5"> while you still</font>

218
00:11:19,920 --> 00:11:29,069
have<font color="#E5E5E5"> it</font><font color="#CCCCCC"> you are not yet complicit in</font>

219
00:11:23,879 --> 00:11:30,569
this train wreck<font color="#CCCCCC"> it worked then okay</font><font color="#E5E5E5"> so</font>

220
00:11:29,069 --> 00:11:32,069
here's a<font color="#E5E5E5"> little piece of C code which I</font>

221
00:11:30,569 --> 00:11:34,949
so explain I still explain it in several

222
00:11:32,069 --> 00:11:41,059
<font color="#E5E5E5">different ways</font><font color="#CCCCCC"> so it we start out it</font>

223
00:11:34,949 --> 00:11:51,300
creates<font color="#E5E5E5"> two locations</font><font color="#CCCCCC"> X and secret</font><font color="#E5E5E5"> that</font>

224
00:11:41,059 --> 00:11:54,180
this<font color="#E5E5E5"> is so bad creates X storing one and</font>

225
00:11:51,300 --> 00:11:58,439
secret<font color="#CCCCCC"> key which stores</font><font color="#E5E5E5"> I might get this</font>

226
00:11:54,180 --> 00:12:00,000
wrong<font color="#E5E5E5"> your PIN</font><font color="#CCCCCC"> and then there's some</font>

227
00:11:58,439 --> 00:12:02,849
computation which is supposed<font color="#E5E5E5"> to only</font>

228
00:12:00,000 --> 00:12:07,110
operate<font color="#CCCCCC"> on X but maybe it's a teensy bit</font>

229
00:12:02,850 --> 00:12:11,819
buggy or corrupted by somebody and then

230
00:12:07,110 --> 00:12:14,069
<font color="#E5E5E5">we try</font><font color="#CCCCCC"> and we make a pointer to</font><font color="#E5E5E5"> X okay</font>

231
00:12:11,819 --> 00:12:16,439
and in this execution<font color="#CCCCCC"> X just</font><font color="#E5E5E5"> happened to</font>

232
00:12:14,069 --> 00:12:20,240
be allocated<font color="#E5E5E5"> at 14 this pointer contains</font>

233
00:12:16,439 --> 00:12:23,760
the number 14 and

234
00:12:20,240 --> 00:12:25,260
we add<font color="#E5E5E5"> one to that pointer it's C so</font>

235
00:12:23,760 --> 00:12:27,330
actually<font color="#CCCCCC"> that adding one to</font><font color="#E5E5E5"> the pointer</font>

236
00:12:25,260 --> 00:12:29,640
it really means<font color="#CCCCCC"> add</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> four bytes which</font>

237
00:12:27,330 --> 00:12:35,790
are the size of<font color="#E5E5E5"> that thing</font>

238
00:12:29,640 --> 00:12:37,470
<font color="#E5E5E5">so we add</font><font color="#CCCCCC"> four to</font><font color="#E5E5E5"> 14 and we get 18 okay</font>

239
00:12:35,790 --> 00:12:40,290
and then we try and<font color="#E5E5E5"> read the thing which</font>

240
00:12:37,470 --> 00:12:42,720
is<font color="#E5E5E5"> pointed to okay hey what's going to</font>

241
00:12:40,290 --> 00:12:48,630
happen<font color="#E5E5E5"> let me compile this and run it in</font>

242
00:12:42,720 --> 00:12:52,230
the conventional way<font color="#CCCCCC"> oh it printed</font><font color="#E5E5E5"> the</font>

243
00:12:48,630 --> 00:12:54,360
secret key bad<font color="#E5E5E5"> this program rather</font>

244
00:12:52,230 --> 00:12:56,340
distressingly<font color="#E5E5E5"> this is characteristic by</font>

245
00:12:54,360 --> 00:12:58,860
no means of all security<font color="#E5E5E5"> flaws but a</font>

246
00:12:56,340 --> 00:13:00,960
very disturbingly large fraction of all

247
00:12:58,860 --> 00:13:07,470
the<font color="#CCCCCC"> security flaws are basically doing</font>

248
00:13:00,960 --> 00:13:13,740
<font color="#E5E5E5">this okay</font><font color="#CCCCCC"> so so does C really let you do</font>

249
00:13:07,470 --> 00:13:15,840
that yes and no so if you look at the C

250
00:13:13,740 --> 00:13:19,950
standard which<font color="#CCCCCC"> is one</font><font color="#E5E5E5"> of these beautiful</font>

251
00:13:15,840 --> 00:13:21,510
books<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> it says you have to read</font>

252
00:13:19,950 --> 00:13:24,290
moderately carefully to understand this

253
00:13:21,510 --> 00:13:26,700
but it says<font color="#E5E5E5"> that this program has</font>

254
00:13:24,290 --> 00:13:28,709
undefined behavior<font color="#CCCCCC"> now many of you will</font>

255
00:13:26,700 --> 00:13:31,740
<font color="#CCCCCC">know what that means but</font><font color="#E5E5E5"> other swing but</font>

256
00:13:28,710 --> 00:13:34,640
<font color="#E5E5E5">so so that means as far as the standard</font>

257
00:13:31,740 --> 00:13:37,410
is concerned for programs<font color="#E5E5E5"> like that</font>

258
00:13:34,640 --> 00:13:41,130
<font color="#E5E5E5">there is</font><font color="#CCCCCC"> no constraint on the behavior</font>

259
00:13:37,410 --> 00:13:42,480
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the implementation</font><font color="#CCCCCC"> at all or said</font>

260
00:13:41,130 --> 00:13:47,939
<font color="#E5E5E5">another way and maybe a more</font><font color="#CCCCCC"> usefully</font>

261
00:13:42,480 --> 00:13:50,610
<font color="#E5E5E5">way the standard</font><font color="#CCCCCC"> lets implementation so</font>

262
00:13:47,940 --> 00:13:55,950
<font color="#E5E5E5">C compilers assume that programs don't</font>

263
00:13:50,610 --> 00:13:58,050
<font color="#E5E5E5">have this kind of stuff and it's the</font>

264
00:13:55,950 --> 00:14:02,490
programmers responsibility to ensure

265
00:13:58,050 --> 00:14:04,170
that now in<font color="#E5E5E5"> about 1970 75 maybe in 1980</font>

266
00:14:02,490 --> 00:14:06,240
<font color="#E5E5E5">this was a really good idea it gives</font>

267
00:14:04,170 --> 00:14:09,050
compilers a lot of flexibility to<font color="#E5E5E5"> do</font>

268
00:14:06,240 --> 00:14:15,270
efficient implementation all right now

269
00:14:09,050 --> 00:14:17,910
not so much how does this work in the

270
00:14:15,270 --> 00:14:20,250
definition so the<font color="#E5E5E5"> standard somehow has</font>

271
00:14:17,910 --> 00:14:23,100
to<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to look at this</font><font color="#CCCCCC"> program and</font>

272
00:14:20,250 --> 00:14:29,730
identify<font color="#CCCCCC"> it as</font><font color="#E5E5E5"> having this undefined</font>

273
00:14:23,100 --> 00:14:33,220
<font color="#E5E5E5">behavior and indeed well if we just</font>

274
00:14:29,730 --> 00:14:37,149
think about<font color="#E5E5E5"> the numbers in memory</font>

275
00:14:33,220 --> 00:14:40,990
this<font color="#E5E5E5"> 18 it points to a perfectly</font>

276
00:14:37,149 --> 00:14:42,220
legitimate<font color="#CCCCCC"> storage location and that +1</font>

277
00:14:40,990 --> 00:14:45,879
was also something<font color="#CCCCCC"> that you're</font>

278
00:14:42,220 --> 00:14:48,189
definitely<font color="#E5E5E5"> allowed to do in C so the</font>

279
00:14:45,879 --> 00:14:50,740
<font color="#CCCCCC">only way that</font><font color="#E5E5E5"> we can know that</font><font color="#CCCCCC"> this is</font>

280
00:14:48,189 --> 00:14:53,800
undefined<font color="#CCCCCC"> behavior is to</font><font color="#E5E5E5"> keep track of</font>

281
00:14:50,740 --> 00:14:55,480
the original allocation<font color="#E5E5E5"> of this pointer</font>

282
00:14:53,800 --> 00:14:58,839
and here I've got<font color="#CCCCCC"> these allocation</font>

283
00:14:55,480 --> 00:15:00,579
identifiers at<font color="#CCCCCC"> 3</font><font color="#E5E5E5"> at 4 at 5 and you see</font>

284
00:14:58,839 --> 00:15:02,829
here I've still got in this pointer

285
00:15:00,579 --> 00:15:05,559
<font color="#E5E5E5">despite the fact that I added 4</font><font color="#CCCCCC"> to it I</font>

286
00:15:02,829 --> 00:15:07,628
still remembered the allocation ID<font color="#E5E5E5"> so</font>

287
00:15:05,559 --> 00:15:10,360
then I<font color="#E5E5E5"> can check well the standard can</font>

288
00:15:07,629 --> 00:15:12,879
check when we<font color="#E5E5E5"> try</font><font color="#CCCCCC"> and read</font><font color="#E5E5E5"> from this</font>

289
00:15:10,360 --> 00:15:15,610
whether that address is<font color="#CCCCCC"> within the</font>

290
00:15:12,879 --> 00:15:17,529
footprint of<font color="#E5E5E5"> that original allocation</font><font color="#CCCCCC"> ie</font>

291
00:15:15,610 --> 00:15:18,970
<font color="#E5E5E5">is within there and in fact it's not</font>

292
00:15:17,529 --> 00:15:21,670
it's over here it's<font color="#E5E5E5"> not within there at</font>

293
00:15:18,970 --> 00:15:25,360
all<font color="#E5E5E5"> so this program is deemed to</font><font color="#CCCCCC"> have</font>

294
00:15:21,670 --> 00:15:27,569
<font color="#E5E5E5">one fine</font><font color="#CCCCCC"> haveá-- just to clarify</font>

295
00:15:25,360 --> 00:15:30,670
something<font color="#E5E5E5"> people often get confused</font><font color="#CCCCCC"> so</font>

296
00:15:27,569 --> 00:15:32,680
we detect undefined behavior here<font color="#E5E5E5"> but it</font>

297
00:15:30,670 --> 00:15:34,139
<font color="#E5E5E5">isn't really a temporal thing the fact</font>

298
00:15:32,680 --> 00:15:36,849
<font color="#E5E5E5">that there is an undefined behavior</font>

299
00:15:34,139 --> 00:15:39,360
<font color="#E5E5E5">anywhere in the execution means the</font>

300
00:15:36,850 --> 00:15:42,279
whole program is toast

301
00:15:39,360 --> 00:15:44,829
<font color="#CCCCCC">ok but this is really interesting</font>

302
00:15:42,279 --> 00:15:46,540
<font color="#E5E5E5">because we're relying for this critical</font>

303
00:15:44,829 --> 00:15:50,229
part of the standard<font color="#E5E5E5"> on some information</font>

304
00:15:46,540 --> 00:15:52,420
<font color="#CCCCCC">which is not there</font><font color="#E5E5E5"> at runtime in a</font>

305
00:15:50,230 --> 00:15:54,339
conventional implementation so just to

306
00:15:52,420 --> 00:15:59,110
emphasize that<font color="#E5E5E5"> point if I compile this</font>

307
00:15:54,339 --> 00:16:02,110
<font color="#CCCCCC">program</font><font color="#E5E5E5"> let's say</font><font color="#CCCCCC"> to arm</font><font color="#E5E5E5"> assembly</font>

308
00:15:59,110 --> 00:16:04,750
language<font color="#CCCCCC"> I get a sequence of store and</font>

309
00:16:02,110 --> 00:16:08,680
load<font color="#CCCCCC"> an add instruction store load add</font>

310
00:16:04,750 --> 00:16:11,160
store load load and if I look<font color="#E5E5E5"> at what</font>

311
00:16:08,680 --> 00:16:15,128
<font color="#CCCCCC">the ARM architecture says can happen</font>

312
00:16:11,160 --> 00:16:17,199
these blue transitions<font color="#E5E5E5"> one thing to</font>

313
00:16:15,129 --> 00:16:18,939
notice is that we can perfectly well do

314
00:16:17,199 --> 00:16:21,490
some things out<font color="#CCCCCC"> of</font><font color="#E5E5E5"> order</font><font color="#CCCCCC"> at this point</font>

315
00:16:18,939 --> 00:16:24,339
<font color="#CCCCCC">we</font><font color="#E5E5E5"> could either do this load or we could</font>

316
00:16:21,490 --> 00:16:26,860
do that store yeah<font color="#E5E5E5"> that would</font><font color="#CCCCCC"> be a whole</font>

317
00:16:24,339 --> 00:16:30,160
other talk<font color="#E5E5E5"> let's stick with</font><font color="#CCCCCC"> the</font>

318
00:16:26,860 --> 00:16:32,589
<font color="#E5E5E5">sequential execution for now what I want</font>

319
00:16:30,160 --> 00:16:34,839
<font color="#E5E5E5">to emphasize</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> these this load of</font>

320
00:16:32,589 --> 00:16:36,339
<font color="#E5E5E5">this address really was loading a 64-bit</font>

321
00:16:34,839 --> 00:16:40,689
<font color="#E5E5E5">number which was the</font><font color="#CCCCCC"> address of X</font><font color="#E5E5E5"> and</font>

322
00:16:36,339 --> 00:16:44,379
adding<font color="#E5E5E5"> 4</font><font color="#CCCCCC"> to it and then loading from</font>

323
00:16:40,689 --> 00:16:46,030
that address the secret key<font color="#E5E5E5"> so there's</font>

324
00:16:44,379 --> 00:16:54,880
no trace of these

325
00:16:46,030 --> 00:17:01,390
allocation IDs no trace<font color="#CCCCCC"> at all</font><font color="#E5E5E5"> okay let</font>

326
00:16:54,880 --> 00:17:03,850
me<font color="#E5E5E5"> step back</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit so</font><font color="#CCCCCC"> I've</font><font color="#E5E5E5"> been</font>

327
00:17:01,390 --> 00:17:07,540
showing you some screenshots of<font color="#CCCCCC"> sea</font>

328
00:17:03,850 --> 00:17:10,839
behavior and<font color="#CCCCCC"> armed behavior</font><font color="#E5E5E5"> and I claim</font>

329
00:17:07,540 --> 00:17:14,920
<font color="#E5E5E5">that these are actually showing you all</font>

330
00:17:10,839 --> 00:17:17,198
of<font color="#CCCCCC"> the behaviors allowed by what one</font>

331
00:17:14,920 --> 00:17:20,350
would like the standards<font color="#E5E5E5"> to be for these</font>

332
00:17:17,199 --> 00:17:24,209
two<font color="#E5E5E5"> things and really what I've been</font>

333
00:17:20,349 --> 00:17:26,948
<font color="#CCCCCC">showing you</font><font color="#E5E5E5"> are gooeys attached to</font>

334
00:17:24,209 --> 00:17:28,870
mathematical models that<font color="#CCCCCC"> we've</font><font color="#E5E5E5"> built in</font>

335
00:17:26,949 --> 00:17:31,660
a big research project<font color="#CCCCCC"> for the last</font><font color="#E5E5E5"> many</font>

336
00:17:28,870 --> 00:17:32,979
years<font color="#CCCCCC"> REMS</font><font color="#E5E5E5"> rigorous engineering</font><font color="#CCCCCC"> and</font>

337
00:17:31,660 --> 00:17:35,190
mainstream system sounds good

338
00:17:32,980 --> 00:17:38,740
aspirational title<font color="#E5E5E5"> I think I would say</font>

339
00:17:35,190 --> 00:17:41,500
and in that we've built<font color="#E5E5E5"> semantics</font>

340
00:17:38,740 --> 00:17:44,410
<font color="#E5E5E5">so mathematical models defining the</font>

341
00:17:41,500 --> 00:17:46,900
envelope<font color="#E5E5E5"> of all allowed behavior for a</font>

342
00:17:44,410 --> 00:17:49,300
quite big fragment<font color="#E5E5E5"> of C and for the</font>

343
00:17:46,900 --> 00:17:52,750
concurrency architecture of major

344
00:17:49,300 --> 00:17:55,120
<font color="#E5E5E5">processes arm and x86 and</font><font color="#CCCCCC"> risk v and IBM</font>

345
00:17:52,750 --> 00:17:57,010
<font color="#E5E5E5">power and also for the instruction set</font>

346
00:17:55,120 --> 00:17:59,290
architecture of these<font color="#E5E5E5"> processors the</font>

347
00:17:57,010 --> 00:18:03,250
details of how individual instructions

348
00:17:59,290 --> 00:18:05,560
execute<font color="#CCCCCC"> and in each</font><font color="#E5E5E5"> case these are specs</font>

349
00:18:03,250 --> 00:18:07,870
that are executable as test Oracle's you

350
00:18:05,560 --> 00:18:09,550
can compare algorithmically<font color="#E5E5E5"> some</font>

351
00:18:07,870 --> 00:18:11,739
observed behavior against what whether

352
00:18:09,550 --> 00:18:13,510
the spec says it's allowed or<font color="#CCCCCC"> not</font><font color="#E5E5E5"> all</font>

353
00:18:11,740 --> 00:18:16,840
<font color="#CCCCCC">right</font><font color="#E5E5E5"> which you can't do with</font><font color="#CCCCCC"> those</font>

354
00:18:13,510 --> 00:18:19,650
books<font color="#E5E5E5"> so this is an idiot simple idea</font>

355
00:18:16,840 --> 00:18:22,419
but<font color="#CCCCCC"> for some reason the industry has</font><font color="#E5E5E5"> not</font>

356
00:18:19,650 --> 00:18:26,010
taken<font color="#E5E5E5"> it on</font><font color="#CCCCCC"> board</font><font color="#E5E5E5"> any time in the last</font>

357
00:18:22,420 --> 00:18:28,690
<font color="#E5E5E5">five decades it's not that hard</font><font color="#CCCCCC"> to do</font>

358
00:18:26,010 --> 00:18:30,550
these<font color="#E5E5E5"> are also mathematical models I'll</font>

359
00:18:28,690 --> 00:18:32,200
come back to that<font color="#CCCCCC"> later but another</font>

360
00:18:30,550 --> 00:18:34,120
thing<font color="#E5E5E5"> I want to emphasize here is that</font>

361
00:18:32,200 --> 00:18:36,190
in each<font color="#CCCCCC"> of these</font><font color="#E5E5E5"> cases especially these</font>

362
00:18:34,120 --> 00:18:39,399
<font color="#CCCCCC">first two when you start looking really</font>

363
00:18:36,190 --> 00:18:41,680
closely<font color="#E5E5E5"> then you learn that what you</font>

364
00:18:39,400 --> 00:18:43,210
have to do is not build a nice clean

365
00:18:41,680 --> 00:18:45,870
mathematical model of<font color="#E5E5E5"> something which is</font>

366
00:18:43,210 --> 00:18:49,600
well understood what you learn is that

367
00:18:45,870 --> 00:18:51,250
<font color="#E5E5E5">there are real open questions for</font>

368
00:18:49,600 --> 00:18:54,189
example<font color="#CCCCCC"> within the C</font><font color="#E5E5E5"> Standards Committee</font>

369
00:18:51,250 --> 00:18:57,330
<font color="#E5E5E5">and within arm a few years ago</font><font color="#CCCCCC"> about</font>

370
00:18:54,190 --> 00:18:59,799
exactly<font color="#E5E5E5"> what these things even were</font>

371
00:18:57,330 --> 00:19:01,710
and that is a bit<font color="#CCCCCC"> disturbing given that</font>

372
00:18:59,799 --> 00:19:04,900
these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> the foundations for all of our</font>

373
00:19:01,710 --> 00:19:06,490
<font color="#E5E5E5">information infrastructure it's also a</font>

374
00:19:04,900 --> 00:19:08,830
<font color="#E5E5E5">lot of other work going on with other</font>

375
00:19:06,490 --> 00:19:11,020
<font color="#E5E5E5">people within this room's project on</font>

376
00:19:08,830 --> 00:19:13,960
<font color="#CCCCCC">webassembly and javascript and file</font>

377
00:19:11,020 --> 00:19:14,799
systems and<font color="#E5E5E5"> other concurrency not don't</font>

378
00:19:13,960 --> 00:19:17,380
have time to talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> those but</font>

379
00:19:14,799 --> 00:19:19,330
<font color="#CCCCCC">Hannah's Maynard he's going to talk a</font>

380
00:19:17,380 --> 00:19:21,039
<font color="#E5E5E5">little bit about TCP later today you</font>

381
00:19:19,330 --> 00:19:22,449
should go for<font color="#E5E5E5"> that talk to if you like</font>

382
00:19:21,039 --> 00:19:27,039
this<font color="#E5E5E5"> one if you don't like this one</font><font color="#CCCCCC"> you</font>

383
00:19:22,450 --> 00:19:32,350
should<font color="#CCCCCC"> still go to that talk okay so</font>

384
00:19:27,039 --> 00:19:34,770
this is doing somewhat<font color="#E5E5E5"> better certainly</font>

385
00:19:32,350 --> 00:19:37,809
<font color="#E5E5E5">more rigorous</font><font color="#CCCCCC"> engineering of</font>

386
00:19:34,770 --> 00:19:41,770
specifications<font color="#E5E5E5"> but so far only</font><font color="#CCCCCC"> for</font>

387
00:19:37,809 --> 00:19:46,500
existing infrastructure<font color="#E5E5E5"> right for this C</font>

388
00:19:41,770 --> 00:19:49,629
language<font color="#CCCCCC"> ARM architecture what have you</font>

389
00:19:46,500 --> 00:19:51,970
so what if we try<font color="#CCCCCC"> and do better what if</font>

390
00:19:49,630 --> 00:19:54,789
we try<font color="#E5E5E5"> and build better security in so</font>

391
00:19:51,970 --> 00:19:56,890
the architectures that<font color="#E5E5E5"> we have really</font>

392
00:19:54,789 --> 00:19:58,840
they date back<font color="#CCCCCC"> to the 1970s</font><font color="#E5E5E5"> or even</font>

393
00:19:56,890 --> 00:20:01,870
<font color="#CCCCCC">sixties with the idea of virtual</font><font color="#E5E5E5"> memory</font>

394
00:19:58,840 --> 00:20:03,189
<font color="#E5E5E5">and that gives you I don't</font><font color="#CCCCCC"> need to go</font>

395
00:20:01,870 --> 00:20:06,549
<font color="#E5E5E5">into what it is but that gives you very</font>

396
00:20:03,190 --> 00:20:09,159
<font color="#CCCCCC">coarse grain protection you</font><font color="#E5E5E5"> can have</font>

397
00:20:06,549 --> 00:20:11,080
your separate processes isolated from

398
00:20:09,159 --> 00:20:13,230
<font color="#E5E5E5">each other and on a good day</font><font color="#CCCCCC"> you could</font>

399
00:20:11,080 --> 00:20:15,129
might have separate browser<font color="#E5E5E5"> tabs</font>

400
00:20:13,230 --> 00:20:17,470
<font color="#E5E5E5">isolated from each other in some</font>

401
00:20:15,130 --> 00:20:21,850
<font color="#CCCCCC">browsers sometimes</font><font color="#E5E5E5"> but it doesn't scale</font>

402
00:20:17,470 --> 00:20:24,580
<font color="#E5E5E5">right it's</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> too expensive</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can't</font>

403
00:20:21,850 --> 00:20:25,299
have<font color="#E5E5E5"> lots of little compartments one</font>

404
00:20:24,580 --> 00:20:27,100
thing we could<font color="#E5E5E5"> do</font>

405
00:20:25,299 --> 00:20:32,230
we<font color="#CCCCCC"> can't</font><font color="#E5E5E5"> certainly design much better</font>

406
00:20:27,100 --> 00:20:33,969
programming languages than<font color="#E5E5E5"> C</font><font color="#CCCCCC"> but all of</font>

407
00:20:32,230 --> 00:20:37,210
<font color="#CCCCCC">that legacy</font><font color="#E5E5E5"> code that's got a massive</font>

408
00:20:33,970 --> 00:20:39,429
inertia<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> so an obvious question</font>

409
00:20:37,210 --> 00:20:41,740
<font color="#E5E5E5">is whether we</font><font color="#CCCCCC"> can build in</font><font color="#E5E5E5"> better</font>

410
00:20:39,429 --> 00:20:44,110
security<font color="#E5E5E5"> into the hardware that doesn't</font>

411
00:20:41,740 --> 00:20:46,090
need some kind of massive pervasive

412
00:20:44,110 --> 00:20:50,620
change<font color="#E5E5E5"> to all the software we ever wrote</font>

413
00:20:46,090 --> 00:20:52,840
<font color="#CCCCCC">and that's</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> question that a different</font>

414
00:20:50,620 --> 00:20:54,820
large project the cherry project has

415
00:20:52,840 --> 00:20:57,010
been<font color="#E5E5E5"> addressing so this is something has</font>

416
00:20:54,820 --> 00:21:00,340
been<font color="#CCCCCC"> going</font><font color="#E5E5E5"> on for last eight years or so</font>

417
00:20:57,010 --> 00:21:02,350
mostly at Fri<font color="#CCCCCC"> and a</font><font color="#E5E5E5"> Cambridge funded by</font>

418
00:21:00,340 --> 00:21:04,990
DARPA and the<font color="#E5E5E5"> EPS</font><font color="#CCCCCC"> irk and arm and</font><font color="#E5E5E5"> other</font>

419
00:21:02,350 --> 00:21:07,149
people mostly led by Robert Watson Simon

420
00:21:04,990 --> 00:21:08,000
<font color="#CCCCCC">more Peter Newman</font><font color="#E5E5E5"> and a cast of</font>

421
00:21:07,150 --> 00:21:14,690
thousands

422
00:21:08,000 --> 00:21:16,820
and me a tiny bit so<font color="#CCCCCC"> do that</font><font color="#E5E5E5"> I should</font>

423
00:21:14,690 --> 00:21:20,960
learn<font color="#CCCCCC"> to stop</font><font color="#E5E5E5"> pushing this button</font><font color="#CCCCCC"> it's</font>

424
00:21:16,820 --> 00:21:22,790
very hard<font color="#CCCCCC"> to</font><font color="#E5E5E5"> not push the one so here's</font>

425
00:21:20,960 --> 00:21:24,800
the question<font color="#CCCCCC"> in a more focused way that</font>

426
00:21:22,790 --> 00:21:28,430
cherry is asking right can we<font color="#CCCCCC"> build</font>

427
00:21:24,800 --> 00:21:32,389
<font color="#E5E5E5">hardware support which is both efficient</font>

428
00:21:28,430 --> 00:21:35,420
enough and deployable enough<font color="#E5E5E5"> that gives</font>

429
00:21:32,390 --> 00:21:37,400
us<font color="#E5E5E5"> both fine</font><font color="#CCCCCC"> grained memory protection</font>

430
00:21:35,420 --> 00:21:38,840
to<font color="#E5E5E5"> prevent that kind of bug that</font><font color="#CCCCCC"> we were</font>

431
00:21:37,400 --> 00:21:41,920
<font color="#CCCCCC">talking about</font><font color="#E5E5E5"> earlier</font><font color="#CCCCCC"> well that kind of</font>

432
00:21:38,840 --> 00:21:43,580
<font color="#E5E5E5">leak at least and also scalable</font>

433
00:21:41,920 --> 00:21:45,740
compartmentalization so you can take

434
00:21:43,580 --> 00:21:47,870
bits of untrusted<font color="#CCCCCC"> codes and put them in</font>

435
00:21:45,740 --> 00:21:51,250
safe boxes and know that nothing bad<font color="#E5E5E5"> is</font>

436
00:21:47,870 --> 00:21:55,070
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> get out that was the question</font>

437
00:21:51,250 --> 00:21:56,570
<font color="#CCCCCC">the answer so the basic idea</font><font color="#E5E5E5"> of the</font>

438
00:21:55,070 --> 00:21:58,970
answer is<font color="#E5E5E5"> pretty simple and it</font><font color="#CCCCCC"> also</font>

439
00:21:56,570 --> 00:22:00,080
dates back to the 70s<font color="#CCCCCC"> is to add hardware</font>

440
00:21:58,970 --> 00:22:03,740
support for<font color="#E5E5E5"> what people call</font>

441
00:22:00,080 --> 00:22:06,320
capabilities<font color="#E5E5E5"> and we'll see</font><font color="#CCCCCC"> that working</font>

442
00:22:03,740 --> 00:22:08,600
<font color="#CCCCCC">in a few moments the idea is that this</font>

443
00:22:06,320 --> 00:22:10,700
will let programmers exercise the

444
00:22:08,600 --> 00:22:12,980
principle of<font color="#E5E5E5"> least privilege</font><font color="#CCCCCC"> so with</font>

445
00:22:10,700 --> 00:22:15,230
each<font color="#E5E5E5"> little bit of code having only the</font>

446
00:22:12,980 --> 00:22:18,590
permissions it needs to do its job<font color="#E5E5E5"> and</font>

447
00:22:15,230 --> 00:22:20,270
<font color="#E5E5E5">also the principle of intentional use so</font>

448
00:22:18,590 --> 00:22:25,820
with each little bit of code when it

449
00:22:20,270 --> 00:22:28,370
uses<font color="#CCCCCC"> one of</font><font color="#E5E5E5"> those</font><font color="#CCCCCC"> capabilities will</font>

450
00:22:25,820 --> 00:22:30,439
require it to explicitly<font color="#E5E5E5"> use it rather</font>

451
00:22:28,370 --> 00:22:33,860
than implicitly so the intention of the

452
00:22:30,440 --> 00:22:35,480
code has<font color="#CCCCCC"> to be made plain</font><font color="#E5E5E5"> so let's see</font>

453
00:22:33,860 --> 00:22:39,740
how this works<font color="#CCCCCC"> so these capabilities</font>

454
00:22:35,480 --> 00:22:43,010
<font color="#E5E5E5">they're basically replacing some or</font>

455
00:22:39,740 --> 00:22:45,440
maybe<font color="#E5E5E5"> all of the pointers in your code</font>

456
00:22:43,010 --> 00:22:49,070
<font color="#E5E5E5">so if we take this</font><font color="#CCCCCC"> example again all</font>

457
00:22:45,440 --> 00:22:51,680
<font color="#E5E5E5">right I so see we had an address and in</font>

458
00:22:49,070 --> 00:22:52,939
<font color="#E5E5E5">the standard well the standard is not</font>

459
00:22:51,680 --> 00:22:54,980
very clear about this<font color="#E5E5E5"> but we're trying</font>

460
00:22:52,940 --> 00:22:58,970
<font color="#E5E5E5">to make it</font><font color="#CCCCCC"> more clear</font><font color="#E5E5E5"> an allocation ID</font>

461
00:22:54,980 --> 00:23:01,550
something like it now in<font color="#CCCCCC"> Cherry</font><font color="#E5E5E5"> C we can</font>

462
00:22:58,970 --> 00:23:03,830
run the<font color="#CCCCCC"> same code but we might represent</font>

463
00:23:01,550 --> 00:23:06,080
<font color="#CCCCCC">this pointer</font><font color="#E5E5E5"> not just with</font><font color="#CCCCCC"> that number</font>

464
00:23:03,830 --> 00:23:10,939
at runtime but<font color="#E5E5E5"> with something that</font>

465
00:23:06,080 --> 00:23:13,189
contains that number and the base<font color="#E5E5E5"> of the</font>

466
00:23:10,940 --> 00:23:14,900
original allocation<font color="#CCCCCC"> and the length of</font>

467
00:23:13,190 --> 00:23:17,330
<font color="#E5E5E5">the original allocation</font><font color="#CCCCCC"> and some</font>

468
00:23:14,900 --> 00:23:19,670
permissions<font color="#E5E5E5"> and having all of those in</font>

469
00:23:17,330 --> 00:23:20,939
<font color="#E5E5E5">the pointer means that we can do the</font>

470
00:23:19,670 --> 00:23:23,789
hardware<font color="#E5E5E5"> can do</font>

471
00:23:20,940 --> 00:23:27,869
at<font color="#CCCCCC"> runtime at access time a very</font>

472
00:23:23,789 --> 00:23:31,080
efficient check that this is within this

473
00:23:27,869 --> 00:23:34,639
<font color="#CCCCCC">region of memory</font><font color="#E5E5E5"> and if it's not it</font><font color="#CCCCCC"> can</font>

474
00:23:31,080 --> 00:23:36,928
fail stop and trap<font color="#E5E5E5"> no information leak</font>

475
00:23:34,639 --> 00:23:39,178
<font color="#E5E5E5">then you need a bit more machinery to</font>

476
00:23:36,929 --> 00:23:40,259
<font color="#E5E5E5">make this actually work right</font><font color="#CCCCCC"> so it</font>

477
00:23:39,179 --> 00:23:43,769
would be nice if<font color="#CCCCCC"> all of these were</font>

478
00:23:40,259 --> 00:23:45,570
<font color="#E5E5E5">64-bit numbers but then you get a 256</font>

479
00:23:43,769 --> 00:23:47,970
bit pointer<font color="#E5E5E5"> and that's a bit expensive</font>

480
00:23:45,570 --> 00:23:50,700
so<font color="#E5E5E5"> there's a clever compression scheme</font>

481
00:23:47,970 --> 00:23:55,799
<font color="#E5E5E5">that squeezes all this down into one to</font>

482
00:23:50,700 --> 00:23:59,159
eight bits with enough accuracy and then

483
00:23:55,799 --> 00:24:04,649
you need to design<font color="#E5E5E5"> the instruction set</font>

484
00:23:59,159 --> 00:24:06,149
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the CPU carefully</font><font color="#E5E5E5"> to ensure that you</font>

485
00:24:04,649 --> 00:24:08,428
<font color="#E5E5E5">can never Forge one of these</font>

486
00:24:06,149 --> 00:24:08,998
capabilities<font color="#CCCCCC"> with a normal instruction</font>

487
00:24:08,429 --> 00:24:12,029
<font color="#CCCCCC">all</font><font color="#E5E5E5"> right</font>

488
00:24:08,999 --> 00:24:13,799
you can never<font color="#CCCCCC"> just</font><font color="#E5E5E5"> magic one up out of a</font>

489
00:24:12,029 --> 00:24:17,399
bunch<font color="#E5E5E5"> of bits that</font><font color="#CCCCCC"> you happen to find</font>

490
00:24:13,799 --> 00:24:20,009
lying around<font color="#E5E5E5"> so all the capability</font>

491
00:24:17,399 --> 00:24:23,728
manipulating instructions<font color="#E5E5E5"> they're going</font>

492
00:24:20,009 --> 00:24:27,539
<font color="#E5E5E5">to take a valid capability and construct</font>

493
00:24:23,729 --> 00:24:30,119
<font color="#CCCCCC">another possibly smaller in memory</font>

494
00:24:27,539 --> 00:24:32,220
extent<font color="#E5E5E5"> or possibly with less permissions</font>

495
00:24:30,119 --> 00:24:33,928
<font color="#E5E5E5">new capability</font><font color="#CCCCCC"> they're never</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

496
00:24:32,220 --> 00:24:38,809
grow<font color="#E5E5E5"> the memory extent or add</font>

497
00:24:33,929 --> 00:24:41,609
permissions when the hardware<font color="#CCCCCC"> starts at</font>

498
00:24:38,809 --> 00:24:43,168
<font color="#CCCCCC">Hardware</font><font color="#E5E5E5"> initialization time the</font>

499
00:24:41,609 --> 00:24:46,470
hardware will hand to the software<font color="#CCCCCC"> a</font>

500
00:24:43,169 --> 00:24:48,989
capability<font color="#E5E5E5"> to everything and then as the</font>

501
00:24:46,470 --> 00:24:53,190
operating system works and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> linker</font>

502
00:24:48,989 --> 00:24:55,259
works<font color="#CCCCCC"> and the C language</font><font color="#E5E5E5"> allocator works</font>

503
00:24:53,190 --> 00:24:58,710
<font color="#CCCCCC">these</font><font color="#E5E5E5"> capabilities will</font><font color="#CCCCCC"> be chopped up</font>

504
00:24:55,259 --> 00:25:02,820
into ever finer and smaller pieces<font color="#CCCCCC"> right</font>

505
00:24:58,710 --> 00:25:07,049
<font color="#E5E5E5">to be handed out to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> right places and</font>

506
00:25:02,820 --> 00:25:08,879
then you need one<font color="#E5E5E5"> more little thing so</font>

507
00:25:07,049 --> 00:25:11,309
this<font color="#E5E5E5"> is C language world we're living in</font>

508
00:25:08,879 --> 00:25:13,799
<font color="#E5E5E5">here or really a</font><font color="#CCCCCC"> machine code language</font>

509
00:25:11,309 --> 00:25:18,029
world<font color="#E5E5E5"> so there's nothing stopping code</font>

510
00:25:13,799 --> 00:25:19,859
writing<font color="#E5E5E5"> bytes of stuff so you have to</font>

511
00:25:18,029 --> 00:25:24,119
somehow protect<font color="#E5E5E5"> these</font><font color="#CCCCCC"> capabilities</font>

512
00:25:19,859 --> 00:25:26,489
against being forged<font color="#E5E5E5"> by</font><font color="#CCCCCC"> the code either</font>

513
00:25:24,119 --> 00:25:29,309
on purpose or accidentally writing bytes

514
00:25:26,489 --> 00:25:31,270
<font color="#CCCCCC">over the top you need to preserve their</font>

515
00:25:29,309 --> 00:25:34,500
<font color="#CCCCCC">integrity</font>

516
00:25:31,270 --> 00:25:37,270
that's done<font color="#E5E5E5"> by adding for each of these</font>

517
00:25:34,500 --> 00:25:41,559
128 bit sized and aligned units of

518
00:25:37,270 --> 00:25:44,170
memory<font color="#CCCCCC"> oh just a one extra bit but holds</font>

519
00:25:41,559 --> 00:25:45,940
a tag and<font color="#CCCCCC"> that tag records whether this</font>

520
00:25:44,170 --> 00:25:56,140
memory holds a currently valid

521
00:25:45,940 --> 00:25:58,360
capability or not it's all the the

522
00:25:56,140 --> 00:26:00,340
capability manipulating instructions<font color="#CCCCCC"> if</font>

523
00:25:58,360 --> 00:26:03,070
they're given a valid capability with

524
00:26:00,340 --> 00:26:06,580
<font color="#E5E5E5">the tag set then the result will still</font>

525
00:26:03,070 --> 00:26:11,710
have the tag set and but if you<font color="#CCCCCC"> write</font>

526
00:26:06,580 --> 00:26:14,379
<font color="#E5E5E5">say you just wrote that byte there which</font>

527
00:26:11,710 --> 00:26:18,160
might<font color="#CCCCCC"> change the base then</font><font color="#E5E5E5"> the hardware</font>

528
00:26:14,380 --> 00:26:20,440
will clear that tag and<font color="#CCCCCC"> these tanks</font>

529
00:26:18,160 --> 00:26:22,750
they're not conventionally addressable

530
00:26:20,440 --> 00:26:25,300
<font color="#E5E5E5">right they don't have addresses</font><font color="#CCCCCC"> that</font>

531
00:26:22,750 --> 00:26:27,610
just<font color="#CCCCCC"> stop there in the memory system of</font>

532
00:26:25,300 --> 00:26:30,520
the hardware<font color="#E5E5E5"> so there is no way</font><font color="#CCCCCC"> that</font>

533
00:26:27,610 --> 00:26:34,800
<font color="#E5E5E5">software can futz with ease</font><font color="#CCCCCC"> so this is</font>

534
00:26:30,520 --> 00:26:37,960
<font color="#E5E5E5">really cool right we've taken what in</font>

535
00:26:34,800 --> 00:26:40,690
<font color="#E5E5E5">ISO was undefined behavior</font><font color="#CCCCCC"> in the</font>

536
00:26:37,960 --> 00:26:42,910
standard<font color="#E5E5E5"> and in implementations was a</font>

537
00:26:40,690 --> 00:26:45,520
memory leak<font color="#CCCCCC"> and we've turned it into</font>

538
00:26:42,910 --> 00:26:47,710
something<font color="#CCCCCC"> that in charity is in both the</font>

539
00:26:45,520 --> 00:26:51,220
<font color="#E5E5E5">specification and the implementation is</font>

540
00:26:47,710 --> 00:26:55,990
guaranteed<font color="#CCCCCC"> to trap to fail stop and not</font>

541
00:26:51,220 --> 00:26:57,370
<font color="#E5E5E5">leak that information so there's not a</font>

542
00:26:55,990 --> 00:26:59,650
few things about the design<font color="#E5E5E5"> that I</font>

543
00:26:57,370 --> 00:27:02,500
should<font color="#E5E5E5"> mention I think all these blue</font>

544
00:26:59,650 --> 00:27:05,530
things<font color="#CCCCCC"> I think I've talked about but</font>

545
00:27:02,500 --> 00:27:07,570
then a lot<font color="#E5E5E5"> of care has gone</font><font color="#CCCCCC"> in to make</font>

546
00:27:05,530 --> 00:27:10,210
<font color="#E5E5E5">this be very flexible to make it</font>

547
00:27:07,570 --> 00:27:12,340
possible to<font color="#E5E5E5"> adopt it so you can use</font>

548
00:27:10,210 --> 00:27:16,660
capabilities for all pointers if you

549
00:27:12,340 --> 00:27:18,790
want to or just<font color="#CCCCCC"> at some interfaces you</font>

550
00:27:16,660 --> 00:27:22,240
might for example<font color="#E5E5E5"> use them at the kernel</font>

551
00:27:18,790 --> 00:27:24,760
<font color="#E5E5E5">user space interface it coexists very</font>

552
00:27:22,240 --> 00:27:27,100
nicely with existing<font color="#E5E5E5"> CNN C++ you don't</font>

553
00:27:24,760 --> 00:27:29,230
need to change<font color="#E5E5E5"> the source code very much</font>

554
00:27:27,100 --> 00:27:32,919
at all<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we'll see some tiny bit of</font>

555
00:27:29,230 --> 00:27:35,980
data about this<font color="#E5E5E5"> to make these to start</font>

556
00:27:32,920 --> 00:27:38,380
<font color="#E5E5E5">using these it coexists with the</font>

557
00:27:35,980 --> 00:27:40,690
existing virtual<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> machinery</font><font color="#E5E5E5"> so you</font>

558
00:27:38,380 --> 00:27:43,059
can use both<font color="#E5E5E5"> capabilities and virtual</font>

559
00:27:40,690 --> 00:27:44,940
memory<font color="#E5E5E5"> if you want or you can just use</font>

560
00:27:43,059 --> 00:27:48,049
capabilities<font color="#E5E5E5"> if you want or</font><font color="#CCCCCC"> just</font>

561
00:27:44,940 --> 00:27:50,340
virtual memory<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> mm-hmm</font>

562
00:27:48,049 --> 00:27:51,749
and then there's<font color="#CCCCCC"> a</font><font color="#E5E5E5"> more machinery which</font>

563
00:27:50,340 --> 00:27:53,879
I'm<font color="#E5E5E5"> not going to talk about for doing</font>

564
00:27:51,749 --> 00:27:55,409
this secure encapsulation stuff what

565
00:27:53,879 --> 00:27:57,478
I've talked about<font color="#E5E5E5"> so far is</font><font color="#CCCCCC"> basically</font>

566
00:27:55,409 --> 00:27:59,940
the the<font color="#E5E5E5"> fine grain memory protection</font>

567
00:27:57,479 --> 00:28:04,200
story<font color="#E5E5E5"> and I should say the focus so far</font>

568
00:27:59,940 --> 00:28:05,940
<font color="#E5E5E5">is on spatial memory safety so that's</font>

569
00:28:04,200 --> 00:28:09,239
not<font color="#E5E5E5"> in the first instance protecting</font>

570
00:28:05,940 --> 00:28:11,820
against reuse of an old capability<font color="#E5E5E5"> in a</font>

571
00:28:09,239 --> 00:28:14,519
bad way<font color="#E5E5E5"> but</font><font color="#CCCCCC"> their area schemes for</font>

572
00:28:11,820 --> 00:28:21,090
supporting temporal<font color="#CCCCCC"> memory safety</font><font color="#E5E5E5"> with</font>

573
00:28:14,519 --> 00:28:23,399
basically<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same set</font><font color="#E5E5E5"> up okay so so had</font>

574
00:28:21,090 --> 00:28:24,869
we okay<font color="#E5E5E5"> so this is some kind</font><font color="#CCCCCC"> of a</font>

575
00:28:23,399 --> 00:28:28,768
<font color="#E5E5E5">high-level idea how do we know that</font><font color="#CCCCCC"> it</font>

576
00:28:24,869 --> 00:28:32,879
can<font color="#CCCCCC"> be made to work</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> anyway is to</font>

577
00:28:28,769 --> 00:28:35,549
<font color="#CCCCCC">actually build it and see and this has</font>

578
00:28:32,879 --> 00:28:36,658
been a really<font color="#CCCCCC"> interesting process</font><font color="#E5E5E5"> right</font>

579
00:28:35,549 --> 00:28:38,609
because mostly when you're building

580
00:28:36,659 --> 00:28:40,889
<font color="#E5E5E5">something either in</font><font color="#CCCCCC"> academia or</font><font color="#E5E5E5"> an</font>

581
00:28:38,609 --> 00:28:44,549
<font color="#E5E5E5">industry you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to keep most of the</font>

582
00:28:40,889 --> 00:28:46,709
part fixed<font color="#CCCCCC"> I mean you're not routinely</font>

583
00:28:44,549 --> 00:28:48,929
changing both the<font color="#E5E5E5"> processor and the</font>

584
00:28:46,710 --> 00:28:51,090
operating<font color="#E5E5E5"> system because</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> just</font>

585
00:28:48,929 --> 00:28:53,190
<font color="#E5E5E5">be</font><font color="#CCCCCC"> too scary</font><font color="#E5E5E5"> but here we have been doing</font>

586
00:28:51,090 --> 00:28:56,899
<font color="#CCCCCC">that and</font><font color="#E5E5E5"> indeed we've really been doing</font>

587
00:28:53,190 --> 00:29:00,029
<font color="#E5E5E5">a three-way three-way</font><font color="#CCCCCC"> co.design</font><font color="#E5E5E5"> of</font>

588
00:28:56,899 --> 00:29:01,590
building hardware<font color="#E5E5E5"> and building an</font>

589
00:29:00,029 --> 00:29:03,989
adapting software to run above it and

590
00:29:01,590 --> 00:29:08,099
also<font color="#CCCCCC"> building</font><font color="#E5E5E5"> these mathematical</font><font color="#CCCCCC"> models</font>

591
00:29:03,989 --> 00:29:09,869
<font color="#E5E5E5">all at the same</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> this is well hey</font>

592
00:29:08,099 --> 00:29:11,369
it's a<font color="#E5E5E5"> lot of fun cuz you can often</font><font color="#CCCCCC"> get</font>

593
00:29:09,869 --> 00:29:14,519
groups of people together that<font color="#E5E5E5"> can do</font>

594
00:29:11,369 --> 00:29:18,809
all<font color="#CCCCCC"> of those things but be is</font><font color="#E5E5E5"> really</font>

595
00:29:14,519 --> 00:29:22,139
effective so what we've produced<font color="#E5E5E5"> then is</font>

596
00:29:18,809 --> 00:29:23,460
an architecture specification<font color="#CCCCCC"> in fact</font>

597
00:29:22,139 --> 00:29:27,899
extending MIPS because it was

598
00:29:23,460 --> 00:29:29,820
conveniently free of IP concerns and

599
00:29:27,899 --> 00:29:32,639
that<font color="#CCCCCC"> specification is one of these</font>

600
00:29:29,820 --> 00:29:33,960
mathematically rigorous<font color="#E5E5E5"> things expressed</font>

601
00:29:32,639 --> 00:29:36,389
in a domain-specific language

602
00:29:33,960 --> 00:29:38,159
<font color="#E5E5E5">specifically for writing instruction set</font>

603
00:29:36,389 --> 00:29:40,168
architecture<font color="#E5E5E5"> specifications and we've</font>

604
00:29:38,159 --> 00:29:42,599
designed<font color="#E5E5E5"> and implemented actually two of</font>

605
00:29:40,169 --> 00:29:44,220
those and then there are<font color="#E5E5E5"> Hardware</font>

606
00:29:42,599 --> 00:29:46,739
processor implementations to actually

607
00:29:44,220 --> 00:29:48,749
run on FPGA is and a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> horror</font>

608
00:29:46,739 --> 00:29:51,090
research<font color="#E5E5E5"> devoted to making</font><font color="#CCCCCC"> this go fast</font>

609
00:29:48,749 --> 00:29:54,179
<font color="#E5E5E5">and be efficient despite these extra</font>

610
00:29:51,090 --> 00:29:57,449
tags and whatnot<font color="#E5E5E5"> and then there's a big</font>

611
00:29:54,179 --> 00:29:58,840
software<font color="#E5E5E5"> stack adapted to run</font><font color="#CCCCCC"> on over</font>

612
00:29:57,450 --> 00:30:00,760
<font color="#CCCCCC">this stuff</font><font color="#E5E5E5"> right</font>

613
00:29:58,840 --> 00:30:03,790
including playing and the<font color="#E5E5E5"> FreeBSD kernel</font>

614
00:30:00,760 --> 00:30:06,610
and FreeBSD<font color="#E5E5E5"> user space and WebKit and</font>

615
00:30:03,790 --> 00:30:09,040
<font color="#E5E5E5">all kinds of pieces so this is a very</font>

616
00:30:06,610 --> 00:30:12,250
major<font color="#E5E5E5"> evaluation effort that one is not</font>

617
00:30:09,040 --> 00:30:13,899
normally able<font color="#E5E5E5"> to do this is why</font><font color="#CCCCCC"> this</font>

618
00:30:12,250 --> 00:30:17,070
<font color="#E5E5E5">combination of</font><font color="#CCCCCC"> things is why that list</font>

619
00:30:13,900 --> 00:30:19,810
of<font color="#E5E5E5"> people up</font><font color="#CCCCCC"> there was about</font><font color="#E5E5E5"> 40</font><font color="#CCCCCC"> people I</font>

620
00:30:17,070 --> 00:30:22,600
say this<font color="#E5E5E5"> is based on MIPS but the ideas</font>

621
00:30:19,810 --> 00:30:24,520
are<font color="#CCCCCC"> not specific to MIT's narrow</font><font color="#E5E5E5"> ongoing</font>

622
00:30:22,600 --> 00:30:28,149
<font color="#E5E5E5">research projects to see if this can</font><font color="#CCCCCC"> be</font>

623
00:30:24,520 --> 00:30:29,730
<font color="#CCCCCC">adapted to the arm</font><font color="#E5E5E5"> application class</font>

624
00:30:28,150 --> 00:30:32,530
<font color="#CCCCCC">architecture and the arm microcontroller</font>

625
00:30:29,730 --> 00:30:32,950
<font color="#CCCCCC">architecture under risk</font><font color="#E5E5E5"> 5 we'll see how</font>

626
00:30:32,530 --> 00:30:39,520
that<font color="#CCCCCC"> goes</font>

627
00:30:32,950 --> 00:30:41,920
in<font color="#CCCCCC"> due course</font><font color="#E5E5E5"> ok so then with all of</font>

628
00:30:39,520 --> 00:30:45,100
<font color="#E5E5E5">these pieces we can evaluate whether it</font>

629
00:30:41,920 --> 00:30:46,930
<font color="#CCCCCC">actually works</font><font color="#E5E5E5"> and that's still an</font>

630
00:30:45,100 --> 00:30:50,379
ongoing process<font color="#CCCCCC"> but the data</font><font color="#E5E5E5"> that we've</font>

631
00:30:46,930 --> 00:31:01,210
got so far<font color="#CCCCCC"> is pretty encouraging</font><font color="#E5E5E5"> so we</font>

632
00:30:50,380 --> 00:31:04,530
see here first performance<font color="#E5E5E5"> so you see</font>

633
00:31:01,210 --> 00:31:09,040
maybe a percent or two<font color="#E5E5E5"> in many cases of</font>

634
00:31:04,530 --> 00:31:10,450
<font color="#E5E5E5">runtime overhead there are workloads</font>

635
00:31:09,040 --> 00:31:12,100
where<font color="#E5E5E5"> it performs badly if you have</font>

636
00:31:10,450 --> 00:31:15,190
something<font color="#CCCCCC"> that's very point</font><font color="#E5E5E5"> too heavy</font>

637
00:31:12,100 --> 00:31:17,409
then the extra pressure from those

638
00:31:15,190 --> 00:31:20,080
larger pointers<font color="#E5E5E5"> will be a bit annoying</font>

639
00:31:17,410 --> 00:31:21,360
but really it seems to be surprisingly

640
00:31:20,080 --> 00:31:24,460
good<font color="#CCCCCC"> mm-hmm</font>

641
00:31:21,360 --> 00:31:26,740
then is it<font color="#CCCCCC"> something that</font><font color="#E5E5E5"> can work</font>

642
00:31:24,460 --> 00:31:32,230
without massive adaption<font color="#CCCCCC"> to the existing</font>

643
00:31:26,740 --> 00:31:34,150
code well in this port of the<font color="#CCCCCC"> freebsd</font>

644
00:31:32,230 --> 00:31:37,290
user space so<font color="#E5E5E5"> you know all the programs</font>

645
00:31:34,150 --> 00:31:39,610
that all the normal programs that run

646
00:31:37,290 --> 00:31:42,970
there was something like<font color="#E5E5E5"> 20,000 files</font>

647
00:31:39,610 --> 00:31:47,860
<font color="#CCCCCC">and only</font><font color="#E5E5E5"> 200 of those needed a change</font>

648
00:31:42,970 --> 00:31:50,860
<font color="#CCCCCC">and that's been done by one or two</font>

649
00:31:47,860 --> 00:31:53,229
people in not<font color="#E5E5E5"> all that large an amount</font>

650
00:31:50,860 --> 00:31:55,780
of time some<font color="#CCCCCC"> of the other code</font><font color="#E5E5E5"> that's</font>

651
00:31:53,230 --> 00:31:58,240
more and more like an<font color="#E5E5E5"> operating system</font>

652
00:31:55,780 --> 00:32:01,560
<font color="#E5E5E5">needs a bit more invasive change but</font>

653
00:31:58,240 --> 00:32:01,560
<font color="#E5E5E5">still it seems to be viable</font>

654
00:32:01,580 --> 00:32:08,810
is it actually more secure<font color="#E5E5E5"> how are you</font>

655
00:32:06,020 --> 00:32:10,310
gonna measure<font color="#CCCCCC"> that we like</font><font color="#E5E5E5"> measuring</font>

656
00:32:08,810 --> 00:32:13,970
things as a<font color="#E5E5E5"> whole we try and do science</font>

657
00:32:10,310 --> 00:32:17,149
<font color="#CCCCCC">where</font><font color="#E5E5E5"> we can can we measure that not</font>

658
00:32:13,970 --> 00:32:19,790
really<font color="#CCCCCC"> but it</font><font color="#E5E5E5"> certainly does the whole</font>

659
00:32:17,150 --> 00:32:23,090
<font color="#E5E5E5">set up certainly does mitigate against</font>

660
00:32:19,790 --> 00:32:24,350
<font color="#E5E5E5">quite a large family</font><font color="#CCCCCC"> of known attacks I</font>

661
00:32:23,090 --> 00:32:27,350
mean if you try and<font color="#E5E5E5"> run heartbleed</font>

662
00:32:24,350 --> 00:32:32,629
<font color="#E5E5E5">you'll get a trap</font><font color="#CCCCCC"> it will say trap I</font>

663
00:32:27,350 --> 00:32:35,570
think it will say signal 34<font color="#CCCCCC"> in fact so</font>

664
00:32:32,630 --> 00:32:38,360
that's pretty<font color="#E5E5E5"> good</font><font color="#CCCCCC"> and if you think</font>

665
00:32:35,570 --> 00:32:42,320
about attacks very many of<font color="#E5E5E5"> them involve</font>

666
00:32:38,360 --> 00:32:45,530
a chain of<font color="#E5E5E5"> multiple floors</font><font color="#CCCCCC"> put</font><font color="#E5E5E5"> together</font>

667
00:32:42,320 --> 00:32:48,080
by an ingenious member of the c3

668
00:32:45,530 --> 00:32:51,800
community or somebody else and very

669
00:32:48,080 --> 00:32:56,899
often at least<font color="#E5E5E5"> one of those is some kind</font>

670
00:32:51,800 --> 00:33:00,710
of memory access permission floor of

671
00:32:56,900 --> 00:33:02,180
some kind or<font color="#E5E5E5"> other</font><font color="#CCCCCC"> okay so this is nice</font>

672
00:33:00,710 --> 00:33:04,990
but I was<font color="#E5E5E5"> talking a lot</font><font color="#CCCCCC"> in the first</font>

673
00:33:02,180 --> 00:33:10,600
<font color="#E5E5E5">part of talk about rigorous engineering</font>

674
00:33:04,990 --> 00:33:12,920
<font color="#CCCCCC">so here we've got formally defined</font>

675
00:33:10,600 --> 00:33:15,199
definitions of the architecture<font color="#E5E5E5"> and</font>

676
00:33:12,920 --> 00:33:17,660
that's<font color="#E5E5E5"> been really</font><font color="#CCCCCC"> useful for testing</font>

677
00:33:15,200 --> 00:33:20,930
against and<font color="#E5E5E5"> for doing test generation on</font>

678
00:33:17,660 --> 00:33:24,470
the basis of and doing<font color="#E5E5E5"> specification</font>

679
00:33:20,930 --> 00:33:26,500
coverage<font color="#E5E5E5"> in an automated way but surely</font>

680
00:33:24,470 --> 00:33:28,850
<font color="#E5E5E5">we</font><font color="#CCCCCC"> should be able to do more than that</font>

681
00:33:26,500 --> 00:33:33,080
<font color="#E5E5E5">so this formal definition of the</font>

682
00:33:28,850 --> 00:33:35,480
architecture<font color="#E5E5E5"> once it looked like so for</font>

683
00:33:33,080 --> 00:33:39,080
each<font color="#CCCCCC"> instruction of this</font><font color="#E5E5E5"> cherry MIPS</font>

684
00:33:35,480 --> 00:33:41,060
processor there's a<font color="#E5E5E5"> definition on</font><font color="#CCCCCC"> that</font>

685
00:33:39,080 --> 00:33:42,260
<font color="#E5E5E5">definition it looks a bit like normal</font>

686
00:33:41,060 --> 00:33:47,030
code<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so here's</font><font color="#CCCCCC"> the definition</font>

687
00:33:42,260 --> 00:33:50,780
<font color="#E5E5E5">of how the instruction for capability</font>

688
00:33:47,030 --> 00:33:52,190
increment<font color="#E5E5E5"> cursor immediate goes so this</font>

689
00:33:50,780 --> 00:33:55,430
is a thing<font color="#CCCCCC"> that takes a</font><font color="#E5E5E5"> capability</font>

690
00:33:52,190 --> 00:33:57,530
register<font color="#E5E5E5"> and an immediate value</font><font color="#CCCCCC"> and it</font>

691
00:33:55,430 --> 00:34:00,410
tries to add something on to the cursor

692
00:33:57,530 --> 00:34:03,290
of that capability<font color="#CCCCCC"> and what you see here</font>

693
00:34:00,410 --> 00:34:05,150
is some code looks like code that

694
00:34:03,290 --> 00:34:06,560
<font color="#CCCCCC">defines exactly</font><font color="#E5E5E5"> what happens and also</font>

695
00:34:05,150 --> 00:34:09,380
define exactly<font color="#E5E5E5"> what happens if something</font>

696
00:34:06,560 --> 00:34:11,659
<font color="#E5E5E5">goes</font><font color="#CCCCCC"> wrong you can</font><font color="#E5E5E5"> see there's some</font><font color="#CCCCCC"> kind</font>

697
00:34:09,380 --> 00:34:14,370
made an exception case there<font color="#E5E5E5"> that's a</font>

698
00:34:11,659 --> 00:34:16,500
processor<font color="#E5E5E5"> no that's a</font>

699
00:34:14,370 --> 00:34:20,489
yeah that's a row using our processor

700
00:34:16,500 --> 00:34:23,190
exception so it looks like code<font color="#E5E5E5"> but from</font>

701
00:34:20,489 --> 00:34:26,159
this we can generate both reasonably

702
00:34:23,190 --> 00:34:28,530
high performance emulators reasonably in

703
00:34:26,159 --> 00:34:30,810
<font color="#E5E5E5">C and</font><font color="#CCCCCC"> you know camel</font><font color="#E5E5E5"> and also</font>

704
00:34:28,530 --> 00:34:33,240
mathematical models in the theorem

705
00:34:30,810 --> 00:34:34,799
provers<font color="#E5E5E5"> so three of the main theorem</font>

706
00:34:33,239 --> 00:34:38,339
provers in the world<font color="#E5E5E5"> are called</font><font color="#CCCCCC"> Isabel</font>

707
00:34:34,800 --> 00:34:41,610
<font color="#CCCCCC">and Hall and clock and we generate</font>

708
00:34:38,340 --> 00:34:43,380
definitions<font color="#E5E5E5"> in all of those so then</font>

709
00:34:41,610 --> 00:34:46,170
we've got a mathematical<font color="#CCCCCC"> definition of</font>

710
00:34:43,380 --> 00:34:49,050
<font color="#E5E5E5">the architecture then finally we can</font>

711
00:34:46,170 --> 00:34:50,730
start stating some properties so<font color="#E5E5E5"> chary</font>

712
00:34:49,050 --> 00:34:53,040
is designed with some kind<font color="#E5E5E5"> of vague</font>

713
00:34:50,730 --> 00:34:56,250
security goals in mind from<font color="#E5E5E5"> the</font>

714
00:34:53,040 --> 00:34:58,710
<font color="#E5E5E5">beginning but</font><font color="#CCCCCC"> now we can take</font><font color="#E5E5E5"> let's say</font>

715
00:34:56,250 --> 00:35:04,380
<font color="#E5E5E5">one</font><font color="#CCCCCC"> of those goals</font><font color="#E5E5E5"> and make it into a</font>

716
00:34:58,710 --> 00:35:06,960
precise thing so this<font color="#E5E5E5"> is a kind of a</font>

717
00:35:04,380 --> 00:35:08,430
secure encapsulation<font color="#E5E5E5"> kind of a thing not</font>

718
00:35:06,960 --> 00:35:12,210
exactly the memory leak<font color="#E5E5E5"> that we were</font>

719
00:35:08,430 --> 00:35:14,009
looking<font color="#CCCCCC"> at before</font><font color="#E5E5E5"> sorry the the the</font>

720
00:35:12,210 --> 00:35:16,230
secret<font color="#CCCCCC"> leak</font><font color="#E5E5E5"> that we were looking at so</font>

721
00:35:14,010 --> 00:35:18,390
let's take imagine some cherry

722
00:35:16,230 --> 00:35:21,000
compartment<font color="#E5E5E5"> haven't told you exactly</font>

723
00:35:18,390 --> 00:35:23,040
<font color="#E5E5E5">what that means but let's suppose</font><font color="#CCCCCC"> that</font>

724
00:35:21,000 --> 00:35:24,840
that's understood<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that that's an</font>

725
00:35:23,040 --> 00:35:26,759
inside that component compartment

726
00:35:24,840 --> 00:35:31,770
<font color="#E5E5E5">there's a piece of</font><font color="#CCCCCC"> software running and</font>

727
00:35:26,760 --> 00:35:35,100
that<font color="#E5E5E5"> might be maybe a video codec</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> a</font>

728
00:35:31,770 --> 00:35:39,770
web browser<font color="#CCCCCC"> or maybe even a data</font>

729
00:35:35,100 --> 00:35:43,890
structure implementation<font color="#CCCCCC"> maybe or</font><font color="#E5E5E5"> a C++</font>

730
00:35:39,770 --> 00:35:45,950
class and all of its objects<font color="#CCCCCC"> maybe so</font>

731
00:35:43,890 --> 00:35:48,930
imagine that<font color="#E5E5E5"> compartment</font><font color="#CCCCCC"> running and</font>

732
00:35:45,950 --> 00:35:51,120
imagine the initial capabilities<font color="#E5E5E5"> that it</font>

733
00:35:48,930 --> 00:35:54,509
has access<font color="#E5E5E5"> to by registers and memory</font>

734
00:35:51,120 --> 00:35:56,460
<font color="#E5E5E5">and via all the capabilities</font><font color="#CCCCCC"> that has</font>

735
00:35:54,510 --> 00:35:58,560
access<font color="#CCCCCC"> to via the memory that it has</font>

736
00:35:56,460 --> 00:36:01,350
access<font color="#E5E5E5"> to and so on recursively so</font>

737
00:35:58,560 --> 00:36:03,990
imagine all<font color="#CCCCCC"> of those capabilities so the</font>

738
00:36:01,350 --> 00:36:07,589
theorem<font color="#CCCCCC"> says no</font><font color="#E5E5E5"> matter how this code</font>

739
00:36:03,990 --> 00:36:12,870
executes<font color="#E5E5E5"> whatever it does however</font>

740
00:36:07,590 --> 00:36:15,900
compromised or buggy it was in that in

741
00:36:12,870 --> 00:36:19,200
an execution<font color="#CCCCCC"> up</font><font color="#E5E5E5"> until any point at which</font>

742
00:36:15,900 --> 00:36:23,940
it wrote is a an exception or<font color="#E5E5E5"> makes an</font>

743
00:36:19,200 --> 00:36:26,310
inter compartment call it can't make any

744
00:36:23,940 --> 00:36:27,780
access which<font color="#CCCCCC"> is not allowed by those</font>

745
00:36:26,310 --> 00:36:30,360
initial caper

746
00:36:27,780 --> 00:36:32,010
Bilitis and you have to<font color="#E5E5E5"> exclude</font>

747
00:36:30,360 --> 00:36:34,050
exceptions<font color="#E5E5E5"> and into compartment calls</font>

748
00:36:32,010 --> 00:36:37,170
<font color="#E5E5E5">because by the by design they do</font>

749
00:36:34,050 --> 00:36:40,560
introduce new capabilities into<font color="#E5E5E5"> the into</font>

750
00:36:37,170 --> 00:36:44,520
the execution<font color="#CCCCCC"> but until that point you</font>

751
00:36:40,560 --> 00:36:46,380
get this<font color="#CCCCCC"> guarantee and</font><font color="#E5E5E5"> this is something</font>

752
00:36:44,520 --> 00:36:48,870
that<font color="#E5E5E5"> we've proved that's the</font><font color="#CCCCCC"> Kindle an</font>

753
00:36:46,380 --> 00:36:51,810
<font color="#CCCCCC">in-house approved with a machine check</font>

754
00:36:48,870 --> 00:36:56,700
proof<font color="#CCCCCC"> in in fact</font><font color="#E5E5E5"> the Isabelle theorem</font>

755
00:36:51,810 --> 00:36:59,580
prover so this is a fact which<font color="#CCCCCC"> is about</font>

756
00:36:56,700 --> 00:37:03,089
as solidly known as any facts<font color="#E5E5E5"> of human</font>

757
00:36:59,580 --> 00:37:05,660
<font color="#E5E5E5">race knows these provers they're</font>

758
00:37:03,090 --> 00:37:10,500
checking<font color="#CCCCCC"> a mathematical proof in</font>

759
00:37:05,660 --> 00:37:12,089
exceedingly great detail with great<font color="#E5E5E5"> care</font>

760
00:37:10,500 --> 00:37:13,470
<font color="#CCCCCC">and attention</font><font color="#E5E5E5"> and they're structured in</font>

761
00:37:12,090 --> 00:37:16,050
such a way that<font color="#E5E5E5"> the soundness of the</font>

762
00:37:13,470 --> 00:37:21,270
prover depends only on some tiny little

763
00:37:16,050 --> 00:37:22,860
<font color="#E5E5E5">kernel so conceivably</font><font color="#CCCCCC"> cosmic rays hit</font>

764
00:37:21,270 --> 00:37:26,130
the transistors at all<font color="#E5E5E5"> the wrong points</font>

765
00:37:22,860 --> 00:37:32,970
but basically we know this for<font color="#CCCCCC"> sure I</font>

766
00:37:26,130 --> 00:37:34,290
emphasize this is a security property we

767
00:37:32,970 --> 00:37:36,839
have not proved we certainly wouldn't

768
00:37:34,290 --> 00:37:39,420
change approved that cherry<font color="#E5E5E5"> is secure</font>

769
00:37:36,840 --> 00:37:41,310
<font color="#E5E5E5">and there are all kinds of other kinds</font>

770
00:37:39,420 --> 00:37:43,710
of<font color="#E5E5E5"> attack</font><font color="#CCCCCC"> that this statement doesn't</font>

771
00:37:41,310 --> 00:37:47,279
<font color="#E5E5E5">even address but at least this one</font>

772
00:37:43,710 --> 00:37:49,580
property we know it<font color="#E5E5E5"> for real so that's</font>

773
00:37:47,280 --> 00:37:51,840
<font color="#CCCCCC">kind of comforting and not a thing that</font>

774
00:37:49,580 --> 00:37:54,150
conventional computer science and

775
00:37:51,840 --> 00:38:02,280
engineering has been<font color="#CCCCCC"> able to do</font><font color="#E5E5E5"> on the</font>

776
00:37:54,150 --> 00:38:09,630
whole<font color="#CCCCCC"> ok so so</font><font color="#E5E5E5"> I I'll be taming the</font>

777
00:38:02,280 --> 00:38:11,450
chaos then well<font color="#E5E5E5"> no sorry</font><font color="#CCCCCC"> but I've shown</font>

778
00:38:09,630 --> 00:38:14,040
you two kinds<font color="#E5E5E5"> of</font><font color="#CCCCCC"> things so the first was</font>

779
00:38:11,450 --> 00:38:16,620
showing how we<font color="#E5E5E5"> can do somewhat more</font>

780
00:38:14,040 --> 00:38:19,230
rigorous engineering<font color="#E5E5E5"> for that existing</font>

781
00:38:16,620 --> 00:38:22,049
infrastructure<font color="#E5E5E5"> it's now feasible</font><font color="#CCCCCC"> to do</font>

782
00:38:19,230 --> 00:38:25,170
that and in<font color="#CCCCCC"> fact I believe</font><font color="#E5E5E5"> it has been</font>

783
00:38:22,050 --> 00:38:27,600
<font color="#E5E5E5">feasible to build specifications which</font>

784
00:38:25,170 --> 00:38:29,760
you can use as<font color="#E5E5E5"> test Oracle's for many</font>

785
00:38:27,600 --> 00:38:31,710
<font color="#CCCCCC">decades we</font><font color="#E5E5E5"> haven't needed any super</font>

786
00:38:29,760 --> 00:38:34,080
fancy new tech for that we've just

787
00:38:31,710 --> 00:38:39,440
needed to focus<font color="#CCCCCC"> on that</font><font color="#E5E5E5"> idea all right</font>

788
00:38:34,080 --> 00:38:40,930
<font color="#CCCCCC">and then so</font><font color="#E5E5E5"> that's for existing</font>

789
00:38:39,440 --> 00:38:42,579
infrastructure

790
00:38:40,930 --> 00:38:46,509
and then cherry is a relatively

791
00:38:42,579 --> 00:38:49,059
lightweight change<font color="#E5E5E5"> that does build in</font>

792
00:38:46,510 --> 00:38:52,119
improve security<font color="#E5E5E5"> and we think it's</font>

793
00:38:49,059 --> 00:38:54,730
demonstrably<font color="#E5E5E5"> deployable</font><font color="#CCCCCC"> at least in</font>

794
00:38:52,119 --> 00:38:56,710
principle is it deployable in practice

795
00:38:54,730 --> 00:38:59,470
are we<font color="#E5E5E5"> gonna have in all of our phones</font>

796
00:38:56,710 --> 00:39:03,839
<font color="#E5E5E5">five years from</font><font color="#CCCCCC"> now we'll ease all be</font>

797
00:38:59,470 --> 00:39:06,098
cherry in Dane balls<font color="#CCCCCC"> well</font><font color="#E5E5E5"> I can't say I</font>

798
00:39:03,839 --> 00:39:07,750
think<font color="#E5E5E5"> it is plausible that that should</font>

799
00:39:06,099 --> 00:39:10,000
<font color="#CCCCCC">happen and</font><font color="#E5E5E5"> we're exploring various</font>

800
00:39:07,750 --> 00:39:16,089
<font color="#CCCCCC">routes</font><font color="#E5E5E5"> that might mean that that happens</font>

801
00:39:10,000 --> 00:39:20,290
and<font color="#E5E5E5"> we'll see how that goes okay so so</font>

802
00:39:16,089 --> 00:39:23,290
with that<font color="#CCCCCC"> I ain't to have given</font><font color="#E5E5E5"> you at</font>

803
00:39:20,290 --> 00:39:25,630
least not<font color="#CCCCCC"> a whole lot of</font><font color="#E5E5E5"> hope but just a</font>

804
00:39:23,290 --> 00:39:28,660
<font color="#CCCCCC">little bit of hope that the world can be</font>

805
00:39:25,630 --> 00:39:29,740
<font color="#CCCCCC">made a better place and I encourage you</font>

806
00:39:28,660 --> 00:39:33,098
<font color="#CCCCCC">to think</font><font color="#E5E5E5"> about ways</font><font color="#CCCCCC"> to do it</font>

807
00:39:29,740 --> 00:39:36,399
<font color="#CCCCCC">where cuz lord he knows we</font><font color="#E5E5E5"> need it</font><font color="#CCCCCC"> but</font>

808
00:39:33,099 --> 00:39:40,569
<font color="#E5E5E5">maybe you can at</font><font color="#CCCCCC"> least dream for a few</font>

809
00:39:36,400 --> 00:39:45,400
moments of living in a better<font color="#E5E5E5"> world</font><font color="#CCCCCC"> and</font>

810
00:39:40,569 --> 00:39:56,480
with that I thank<font color="#E5E5E5"> you for your attention</font>

811
00:39:45,400 --> 00:40:00,180
[Applause]

812
00:39:56,480 --> 00:40:06,600
thanks very<font color="#CCCCCC"> much and with that we're</font>

813
00:40:00,180 --> 00:40:08,399
you'll head straight into<font color="#CCCCCC"> the Q&A we'll</font>

814
00:40:06,600 --> 00:40:13,799
<font color="#E5E5E5">just start with Mike number one which I</font>

815
00:40:08,400 --> 00:40:16,170
can see right<font color="#CCCCCC"> now</font><font color="#E5E5E5"> cover to talk and I</font>

816
00:40:13,800 --> 00:40:18,450
have a question about<font color="#E5E5E5"> how to secure the</font>

817
00:40:16,170 --> 00:40:21,240
path below<font color="#CCCCCC"> that so the theory that we</font>

818
00:40:18,450 --> 00:40:24,000
stated assumes that the<font color="#E5E5E5"> measure</font>

819
00:40:21,240 --> 00:40:26,700
<font color="#E5E5E5">description matches the hardware</font><font color="#CCCCCC"> at</font>

820
00:40:24,000 --> 00:40:29,310
least<font color="#CCCCCC"> as it describes</font><font color="#E5E5E5"> the Hydra</font>

821
00:40:26,700 --> 00:40:31,919
accurately but are there any attempts to

822
00:40:29,310 --> 00:40:32,580
check that the hardware<font color="#CCCCCC"> actually works</font>

823
00:40:31,920 --> 00:40:35,430
<font color="#E5E5E5">like that</font>

824
00:40:32,580 --> 00:40:37,440
that the<font color="#E5E5E5"> hoods in the hardware</font><font color="#CCCCCC"> said some</font>

825
00:40:35,430 --> 00:40:39,210
combination of<font color="#CCCCCC"> meshing</font><font color="#E5E5E5"> commands work</font>

826
00:40:37,440 --> 00:40:42,540
differently or a lot<font color="#E5E5E5"> of memory access</font>

827
00:40:39,210 --> 00:40:45,960
<font color="#E5E5E5">that is not in the model so</font><font color="#CCCCCC"> is it</font>

828
00:40:42,540 --> 00:40:48,029
possible<font color="#E5E5E5"> to</font><font color="#CCCCCC"> use hardware</font><font color="#E5E5E5"> designs and</font>

829
00:40:45,960 --> 00:40:52,380
check that matches the spec<font color="#E5E5E5"> and will</font>

830
00:40:48,030 --> 00:40:54,750
<font color="#E5E5E5">Intel or AMD</font><font color="#CCCCCC"> try to check their models</font>

831
00:40:52,380 --> 00:40:58,770
against that spec<font color="#CCCCCC"> okay so the question</font>

832
00:40:54,750 --> 00:41:01,200
is<font color="#E5E5E5"> basically can we do provably correct</font>

833
00:40:58,770 --> 00:41:05,400
<font color="#CCCCCC">hardware underneath this architectural</font>

834
00:41:01,200 --> 00:41:07,649
abstraction<font color="#E5E5E5"> and the answer is so it's a</font>

835
00:41:05,400 --> 00:41:10,620
<font color="#E5E5E5">good question people are working on that</font>

836
00:41:07,650 --> 00:41:16,500
<font color="#E5E5E5">and it can</font><font color="#CCCCCC"> be done I</font><font color="#E5E5E5"> think on a at least</font>

837
00:41:10,620 --> 00:41:21,170
a modest academic scale trying to do

838
00:41:16,500 --> 00:41:23,580
that<font color="#E5E5E5"> in in it sort of full glory for a</font>

839
00:41:21,170 --> 00:41:27,030
<font color="#E5E5E5">industrial superscalar processor design</font>

840
00:41:23,580 --> 00:41:28,350
<font color="#E5E5E5">I think</font><font color="#CCCCCC"> is right now out</font><font color="#E5E5E5"> of reach but</font>

841
00:41:27,030 --> 00:41:30,300
it's certainly<font color="#E5E5E5"> something one would like</font>

842
00:41:28,350 --> 00:41:35,910
to<font color="#CCCCCC"> be able to do I think we</font><font color="#E5E5E5"> will get</font>

843
00:41:30,300 --> 00:41:41,700
there<font color="#E5E5E5"> maybe in a decade also</font><font color="#CCCCCC"> a decade is</font>

844
00:41:35,910 --> 00:41:44,700
quick well things like<font color="#E5E5E5"> number four</font><font color="#CCCCCC"> is</font>

845
00:41:41,700 --> 00:41:49,270
empty<font color="#E5E5E5"> again</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so we'll take the</font>

846
00:41:44,700 --> 00:41:52,839
<font color="#CCCCCC">internet where is the</font><font color="#E5E5E5"> Internet</font>

847
00:41:49,270 --> 00:41:55,840
<font color="#E5E5E5">here and everywhere</font><font color="#CCCCCC"> so ruminate would</font>

848
00:41:52,840 --> 00:41:58,810
like to know is the effort and cost of

849
00:41:55,840 --> 00:42:00,510
<font color="#CCCCCC">building in security to hardware as</font>

850
00:41:58,810 --> 00:42:03,700
you've described<font color="#E5E5E5"> in your talk</font>

851
00:42:00,510 --> 00:42:05,950
significantly greater or less<font color="#CCCCCC"> than the</font>

852
00:42:03,700 --> 00:42:10,660
effort and cost of porting software to

853
00:42:05,950 --> 00:42:12,700
more secure languages so so is the

854
00:42:10,660 --> 00:42:15,520
effort of building<font color="#E5E5E5"> new hardware</font><font color="#CCCCCC"> more or</font>

855
00:42:12,700 --> 00:42:19,540
<font color="#E5E5E5">less than the cost of porting existing</font>

856
00:42:15,520 --> 00:42:25,420
software<font color="#E5E5E5"> to better languages</font><font color="#CCCCCC"> I think the</font>

857
00:42:19,540 --> 00:42:28,330
answer<font color="#CCCCCC"> has to be yes it is less and the</font>

858
00:42:25,420 --> 00:42:29,920
difficulty with porting software is all

859
00:42:28,330 --> 00:42:30,940
of you and all of<font color="#CCCCCC"> your colleagues</font><font color="#E5E5E5"> and</font>

860
00:42:29,920 --> 00:42:32,800
<font color="#E5E5E5">all of your friends and all of</font><font color="#CCCCCC"> your</font>

861
00:42:30,940 --> 00:42:35,440
<font color="#E5E5E5">enemies have been beavering away writing</font>

862
00:42:32,800 --> 00:42:38,620
lines of code<font color="#E5E5E5"> for you know 50 years</font>

863
00:42:35,440 --> 00:42:42,490
<font color="#E5E5E5">really</font><font color="#CCCCCC"> I don't know I want to</font><font color="#E5E5E5"> say</font>

864
00:42:38,620 --> 00:42:43,690
<font color="#E5E5E5">effectively really numerously</font><font color="#CCCCCC"> there's an</font>

865
00:42:42,490 --> 00:42:45,759
awful lot<font color="#CCCCCC"> of it there's a really</font>

866
00:42:43,690 --> 00:42:50,020
<font color="#E5E5E5">terrifying amount of code out there it's</font>

867
00:42:45,760 --> 00:42:52,560
<font color="#E5E5E5">very hard to get</font><font color="#CCCCCC"> people to rewrite it ok</font>

868
00:42:50,020 --> 00:42:52,560
Mike<font color="#CCCCCC"> to</font>

869
00:43:06,650 --> 00:43:09,780
[Music]

870
00:43:18,600 --> 00:43:23,339
[Music]

871
00:43:25,850 --> 00:43:32,670
so this<font color="#E5E5E5"> question if I paraphrase it is</font>

872
00:43:29,250 --> 00:43:38,190
can we<font color="#E5E5E5"> use this hardware implementation</font>

873
00:43:32,670 --> 00:43:41,340
really as the perfect sanitizer<font color="#E5E5E5"> and I</font>

874
00:43:38,190 --> 00:43:45,030
think<font color="#E5E5E5"> I think there is scope for doing</font>

875
00:43:41,340 --> 00:43:47,730
that and you can even<font color="#CCCCCC"> imagine</font><font color="#E5E5E5"> running</font>

876
00:43:45,030 --> 00:43:49,980
<font color="#CCCCCC">this</font><font color="#E5E5E5"> not on actual silicon hardware but</font>

877
00:43:47,730 --> 00:43:52,770
in like a<font color="#CCCCCC"> QEMU implementation which we</font>

878
00:43:49,980 --> 00:43:55,020
have in<font color="#CCCCCC"> order to do that</font><font color="#E5E5E5"> and I</font><font color="#CCCCCC"> think</font>

879
00:43:52,770 --> 00:43:58,369
<font color="#CCCCCC">that for that</font><font color="#E5E5E5"> purpose it could already</font>

880
00:43:55,020 --> 00:44:00,780
be a pretty<font color="#E5E5E5"> effective bug finding tool I</font>

881
00:43:58,369 --> 00:44:03,750
think that would<font color="#CCCCCC"> be worth doing</font><font color="#E5E5E5"> but you</font>

882
00:44:00,780 --> 00:44:05,670
would like I mean<font color="#E5E5E5"> as for any testing it</font>

883
00:44:03,750 --> 00:44:07,920
will<font color="#CCCCCC"> only explore a very tiny fraction</font>

884
00:44:05,670 --> 00:44:12,230
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the possible paths</font><font color="#CCCCCC"> so we would like</font>

885
00:44:07,920 --> 00:44:12,230
<font color="#CCCCCC">to</font><font color="#E5E5E5"> have it</font><font color="#CCCCCC"> always on if we possibly can</font>

886
00:44:12,859 --> 00:44:37,830
<font color="#E5E5E5">okay the</font><font color="#CCCCCC"> internet I think for that</font>

887
00:44:34,380 --> 00:44:40,320
<font color="#CCCCCC">question</font><font color="#E5E5E5"> for a real answer</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> that</font>

888
00:44:37,830 --> 00:44:43,410
question you<font color="#CCCCCC"> would need one of</font><font color="#E5E5E5"> my more</font>

889
00:44:40,320 --> 00:44:48,800
Hardware colleagues what I can say is

890
00:44:43,410 --> 00:44:48,799
they make nasty<font color="#CCCCCC"> faces</font><font color="#E5E5E5"> when you say MPX</font>

891
00:44:50,600 --> 00:44:58,109
well that's that<font color="#CCCCCC"> mic number one somewhat</font>

892
00:44:55,260 --> 00:45:00,300
<font color="#CCCCCC">inherent ear hole construction was this</font>

893
00:44:58,109 --> 00:45:03,060
<font color="#CCCCCC">idea of having an unchangeable bits</font>

894
00:45:00,300 --> 00:45:06,450
<font color="#E5E5E5">which describes whether your pointer</font>

895
00:45:03,060 --> 00:45:08,279
contents have been<font color="#E5E5E5"> changed</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> this even</font>

896
00:45:06,450 --> 00:45:08,950
<font color="#E5E5E5">something something that can be done in</font>

897
00:45:08,280 --> 00:45:10,630
software or

898
00:45:08,950 --> 00:45:14,828
do you have to construct a whole extra

899
00:45:10,630 --> 00:45:16,690
<font color="#CCCCCC">room or something so so you can't do it</font>

900
00:45:14,829 --> 00:45:22,599
exclusively<font color="#E5E5E5"> in software because you need</font>

901
00:45:16,690 --> 00:45:24,040
to protect<font color="#E5E5E5"> it</font><font color="#CCCCCC"> in the hardware</font>

902
00:45:22,599 --> 00:45:26,079
implementations that<font color="#E5E5E5"> my colleagues</font><font color="#CCCCCC"> have</font>

903
00:45:24,040 --> 00:45:28,960
built it's done in a reasonably

904
00:45:26,079 --> 00:45:31,119
efficient way and<font color="#CCCCCC"> it's so you know it's</font>

905
00:45:28,960 --> 00:45:33,550
it's cached and managed in clever ways

906
00:45:31,119 --> 00:45:36,480
<font color="#E5E5E5">to ensure that it's not terribly</font>

907
00:45:33,550 --> 00:45:38,950
expensive to do but you know you do need

908
00:45:36,480 --> 00:45:41,650
slightly wider data<font color="#E5E5E5"> piles in your cache</font>

909
00:45:38,950 --> 00:45:52,299
protocol and things like that<font color="#CCCCCC"> to manage</font>

910
00:45:41,650 --> 00:45:54,550
it<font color="#CCCCCC"> ok a Mike</font><font color="#E5E5E5"> 7 have secured their</font>

911
00:45:52,300 --> 00:45:57,550
control for integrity compared to other

912
00:45:54,550 --> 00:46:01,150
<font color="#E5E5E5">systems like how to anticipate the flow</font>

913
00:45:57,550 --> 00:46:07,180
into isolation or code<font color="#E5E5E5"> point</font><font color="#CCCCCC"> 8 equity</font>

914
00:46:01,150 --> 00:46:08,410
arm<font color="#E5E5E5"> now well that's another question</font>

915
00:46:07,180 --> 00:46:11,740
<font color="#E5E5E5">which is a bit hard</font><font color="#CCCCCC"> to answer because</font>

916
00:46:08,410 --> 00:46:16,629
then then it<font color="#E5E5E5"> depends somewhat on on how</font>

917
00:46:11,740 --> 00:46:21,098
you're<font color="#E5E5E5"> using the</font><font color="#CCCCCC"> capabilities so you can</font>

918
00:46:16,630 --> 00:46:23,770
arrange here for each say each C

919
00:46:21,099 --> 00:46:25,780
language<font color="#E5E5E5"> allocation is independently</font>

920
00:46:23,770 --> 00:46:28,900
protected and indeed you<font color="#E5E5E5"> can also</font>

921
00:46:25,780 --> 00:46:30,970
arrange<font color="#CCCCCC"> that each where this is</font><font color="#E5E5E5"> sensible</font>

922
00:46:28,900 --> 00:46:33,520
that each<font color="#CCCCCC"> sub-object is independently</font>

923
00:46:30,970 --> 00:46:36,009
protected and those protections are

924
00:46:33,520 --> 00:46:38,530
going to give you protection against

925
00:46:36,010 --> 00:46:40,470
<font color="#CCCCCC">thrashing bits of the stack because</font>

926
00:46:38,530 --> 00:46:49,589
<font color="#CCCCCC">they'll</font><font color="#E5E5E5"> restrict the capability to just</font>

927
00:46:40,470 --> 00:46:49,589
those objects<font color="#CCCCCC"> ok the</font><font color="#E5E5E5"> internet again</font>

928
00:46:50,900 --> 00:46:58,970
Twitter would like to know<font color="#E5E5E5"> is it</font>

929
00:46:54,530 --> 00:47:03,530
possible<font color="#CCCCCC"> to run cherries say without</font>

930
00:46:58,970 --> 00:47:05,689
custom hardware so can<font color="#CCCCCC"> you</font><font color="#E5E5E5"> run charity</font>

931
00:47:03,530 --> 00:47:09,320
without custom hardware<font color="#E5E5E5"> and the answer</font>

932
00:47:05,690 --> 00:47:13,910
is you<font color="#E5E5E5"> can run it in emulation above</font>

933
00:47:09,320 --> 00:47:16,820
this<font color="#CCCCCC"> QE</font><font color="#E5E5E5"> new that works pretty fast I</font>

934
00:47:13,910 --> 00:47:19,149
mean<font color="#E5E5E5"> fast enough for debugging and as</font>

935
00:47:16,820 --> 00:47:24,710
the earlier question was talking about

936
00:47:19,150 --> 00:47:29,480
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> imagine you</font><font color="#E5E5E5"> know somewhat faster</font>

937
00:47:24,710 --> 00:47:31,220
emulations of that not clear<font color="#E5E5E5"> how much</font>

938
00:47:29,480 --> 00:47:34,220
it's<font color="#CCCCCC"> worth going</font><font color="#E5E5E5"> down that route I mean</font>

939
00:47:31,220 --> 00:47:36,618
the the<font color="#E5E5E5"> real potential big win is to</font>

940
00:47:34,220 --> 00:47:43,580
have this be<font color="#CCCCCC"> always on and that's what</font>

941
00:47:36,619 --> 00:47:46,490
<font color="#E5E5E5">we would</font><font color="#CCCCCC"> like to</font><font color="#E5E5E5"> have okay like one do</font>

942
00:47:43,580 --> 00:47:48,529
you<font color="#E5E5E5"> have sorry do you have some</font><font color="#CCCCCC"> examples</font>

943
00:47:46,490 --> 00:47:51,200
of the kinds of code changes that you

944
00:47:48,530 --> 00:47:54,890
need<font color="#E5E5E5"> to the operating system</font><font color="#CCCCCC"> and use a</font>

945
00:47:51,200 --> 00:47:57,319
<font color="#E5E5E5">line that you mentioned so okay so what</font>

946
00:47:54,890 --> 00:48:05,799
kind of changes<font color="#CCCCCC"> do you need to adapt</font>

947
00:47:57,320 --> 00:48:08,450
code to<font color="#E5E5E5"> cherry so if you look at C code</font>

948
00:48:05,800 --> 00:48:10,339
there is<font color="#E5E5E5"> this e standard that deems a</font>

949
00:48:08,450 --> 00:48:13,819
whole lot of<font color="#E5E5E5"> things to be undefined</font>

950
00:48:10,339 --> 00:48:17,869
behavior and then if you look<font color="#E5E5E5"> at actual</font>

951
00:48:13,820 --> 00:48:20,570
C code<font color="#E5E5E5"> you find that very very</font><font color="#CCCCCC"> much of</font>

952
00:48:17,869 --> 00:48:25,040
it does depend on<font color="#E5E5E5"> some idiom that the</font><font color="#CCCCCC"> C</font>

953
00:48:20,570 --> 00:48:29,359
standard does not<font color="#E5E5E5"> approve</font><font color="#CCCCCC"> of so there is</font>

954
00:48:25,040 --> 00:48:32,509
for<font color="#CCCCCC"> example there are quite a lot of</font>

955
00:48:29,359 --> 00:48:35,480
instances<font color="#E5E5E5"> of codes that constructs a</font>

956
00:48:32,510 --> 00:48:38,960
pointer by doing a more than<font color="#E5E5E5"> one more</font>

957
00:48:35,480 --> 00:48:43,580
<font color="#E5E5E5">than plus one offset and then brings it</font>

958
00:48:38,960 --> 00:48:46,280
back<font color="#E5E5E5"> within range</font><font color="#CCCCCC"> before you use it</font><font color="#E5E5E5"> so</font>

959
00:48:43,580 --> 00:48:48,650
in fact in<font color="#CCCCCC"> cherry see many</font><font color="#E5E5E5"> of those</font>

960
00:48:46,280 --> 00:48:53,810
cases<font color="#CCCCCC"> are allowed but not</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of them</font>

961
00:48:48,650 --> 00:48:56,900
more exotic<font color="#CCCCCC"> cases</font><font color="#E5E5E5"> were you know there's</font>

962
00:48:53,810 --> 00:48:59,390
really some crazy<font color="#E5E5E5"> into objects stuff</font>

963
00:48:56,900 --> 00:49:02,100
going<font color="#CCCCCC"> on or where</font>

964
00:48:59,390 --> 00:49:03,540
pointer arithmetic between objects which

965
00:49:02,100 --> 00:49:06,930
the<font color="#CCCCCC"> CIE standard is certainly quite</font><font color="#E5E5E5"> down</font>

966
00:49:03,540 --> 00:49:09,390
on but which does happen<font color="#CCCCCC"> and code which</font>

967
00:49:06,930 --> 00:49:11,399
is say manipulating the<font color="#CCCCCC"> low-order</font><font color="#E5E5E5"> bits</font>

968
00:49:09,390 --> 00:49:13,650
<font color="#E5E5E5">of a pointer to store some data in it</font>

969
00:49:11,400 --> 00:49:15,210
that's pretty common<font color="#CCCCCC"> you can do it in</font>

970
00:49:13,650 --> 00:49:17,970
<font color="#CCCCCC">carry C but</font><font color="#E5E5E5"> you might have to adapt the</font>

971
00:49:15,210 --> 00:49:20,280
code a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> other cases are more</font>

972
00:49:17,970 --> 00:49:22,439
fundamental<font color="#E5E5E5"> so say in operating system</font>

973
00:49:20,280 --> 00:49:25,140
code if you swap out a page to disk and

974
00:49:22,440 --> 00:49:27,720
<font color="#E5E5E5">then you swap</font><font color="#CCCCCC"> it back</font><font color="#E5E5E5"> in then somehow</font>

975
00:49:25,140 --> 00:49:32,160
<font color="#E5E5E5">the operating system has</font><font color="#CCCCCC"> to reconstruct</font>

976
00:49:27,720 --> 00:49:34,859
new capabilities from a large capability

977
00:49:32,160 --> 00:49:39,210
which it kept for the purpose so that

978
00:49:34,860 --> 00:49:41,730
<font color="#CCCCCC">needs a bit more work so it's kind of a</font>

979
00:49:39,210 --> 00:49:44,550
combination<font color="#E5E5E5"> some things you would regard</font>

980
00:49:41,730 --> 00:49:49,170
as good changes to the code anyway<font color="#CCCCCC"> and</font>

981
00:49:44,550 --> 00:49:55,290
others<font color="#E5E5E5"> are more radical</font><font color="#CCCCCC"> okay another one</font>

982
00:49:49,170 --> 00:50:00,600
from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> internet the last one yep the</font>

983
00:49:55,290 --> 00:50:03,660
<font color="#E5E5E5">Internet has</font><font color="#CCCCCC"> gone quiet last</font><font color="#E5E5E5"> question</font>

984
00:50:00,600 --> 00:50:06,930
from the<font color="#CCCCCC"> internet dot any plans to</font>

985
00:50:03,660 --> 00:50:11,790
impact<font color="#CCCCCC"> tests on Linux or</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> three B</font>

986
00:50:06,930 --> 00:50:16,470
<font color="#E5E5E5">estate if anyone has a good number of</font>

987
00:50:11,790 --> 00:50:20,009
spare minutes then that would be lovely

988
00:50:16,470 --> 00:50:23,160
<font color="#E5E5E5">to try the impact on Linux not just</font>

989
00:50:20,010 --> 00:50:26,790
<font color="#E5E5E5">FreeBSD the BSD code base is simpler and</font>

990
00:50:23,160 --> 00:50:28,379
<font color="#E5E5E5">may be cleaner and my</font><font color="#CCCCCC"> systemc colleagues</font>

991
00:50:26,790 --> 00:50:29,970
are already<font color="#CCCCCC"> familiar with</font><font color="#E5E5E5"> it so it's the</font>

992
00:50:28,380 --> 00:50:32,060
<font color="#CCCCCC">obvious target and for an academic</font>

993
00:50:29,970 --> 00:50:34,890
<font color="#CCCCCC">project</font><font color="#E5E5E5"> doing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is already a</font>

994
00:50:32,060 --> 00:50:38,279
humongous amount of work<font color="#CCCCCC"> so I think</font><font color="#E5E5E5"> we</font>

995
00:50:34,890 --> 00:50:40,109
would love<font color="#CCCCCC"> to</font><font color="#E5E5E5"> know how Linux and</font>

996
00:50:38,280 --> 00:50:41,790
especially<font color="#E5E5E5"> how Android could be</font><font color="#CCCCCC"> adapted</font>

997
00:50:40,110 --> 00:50:49,800
but<font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> that we have the</font>

998
00:50:41,790 --> 00:50:52,140
resource<font color="#E5E5E5"> to do at the</font><font color="#CCCCCC"> moment how likely</font>

999
00:50:49,800 --> 00:50:57,000
<font color="#E5E5E5">or danger</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> Mike number one is not</font>

1000
00:50:52,140 --> 00:50:59,100
<font color="#E5E5E5">working how likely or dangerous do you</font>

1001
00:50:57,000 --> 00:51:01,580
think it is<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a programmer to</font><font color="#E5E5E5"> screw up</font>

1002
00:50:59,100 --> 00:51:05,299
the<font color="#CCCCCC"> capabilities he specifies</font>

1003
00:51:01,580 --> 00:51:07,520
so so how often<font color="#E5E5E5"> will the programmer</font>

1004
00:51:05,300 --> 00:51:10,820
screw up the<font color="#CCCCCC"> capabilities</font><font color="#E5E5E5"> so in many</font>

1005
00:51:07,520 --> 00:51:14,210
<font color="#CCCCCC">cases the programmer</font><font color="#E5E5E5"> is just doing an</font>

1006
00:51:10,820 --> 00:51:16,720
access with a C or<font color="#CCCCCC"> C++ pointer or a C++</font>

1007
00:51:14,210 --> 00:51:19,940
object<font color="#E5E5E5"> in a normal way they're not</font>

1008
00:51:16,720 --> 00:51:22,060
manually constructing these things<font color="#E5E5E5"> and</font>

1009
00:51:19,940 --> 00:51:24,740
so a lot of<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to just work</font>

1010
00:51:22,060 --> 00:51:27,770
if you're<font color="#CCCCCC"> building some particular</font>

1011
00:51:24,740 --> 00:51:31,009
secure encapsulation<font color="#CCCCCC"> setup you have to</font>

1012
00:51:27,770 --> 00:51:33,590
<font color="#E5E5E5">be a bit careful but on the whole I</font>

1013
00:51:31,010 --> 00:51:37,330
<font color="#E5E5E5">think this is a small risk compared to</font>

1014
00:51:33,590 --> 00:51:37,330
the state of software as we have it<font color="#E5E5E5"> now</font>

1015
00:51:44,140 --> 00:51:47,279
[Music]

1016
00:51:50,160 --> 00:51:53,359
[Music]

1017
00:52:01,570 --> 00:52:13,750
to replace or supplement<font color="#E5E5E5"> these meshes</font><font color="#CCCCCC"> I</font>

1018
00:52:13,900 --> 00:52:19,820
think if if you so if again it<font color="#E5E5E5"> depends a</font>

1019
00:52:18,410 --> 00:52:23,529
bit<font color="#E5E5E5"> how you use it</font><font color="#CCCCCC"> so if you have</font>

1020
00:52:19,820 --> 00:52:29,510
capabilities really everywhere<font color="#E5E5E5"> then</font>

1021
00:52:23,530 --> 00:52:32,830
there's not much need<font color="#E5E5E5"> for address space</font>

1022
00:52:29,510 --> 00:52:35,960
layout randomization or<font color="#CCCCCC"> Canaries to</font>

1023
00:52:32,830 --> 00:52:41,299
<font color="#CCCCCC">protect against explicit information</font>

1024
00:52:35,960 --> 00:52:43,910
<font color="#E5E5E5">leaks</font><font color="#CCCCCC"> I I imagine that you might still</font>

1025
00:52:41,300 --> 00:52:47,870
<font color="#E5E5E5">want randomization to</font><font color="#CCCCCC"> protect against</font>

1026
00:52:43,910 --> 00:52:49,460
some<font color="#E5E5E5"> side channel flows but canary is</font>

1027
00:52:47,870 --> 00:52:51,410
not so<font color="#E5E5E5"> much and whether you</font><font color="#CCCCCC"> actually do</font>

1028
00:52:49,460 --> 00:52:53,920
<font color="#CCCCCC">foresight and</font><font color="#E5E5E5"> flows</font><font color="#CCCCCC"> I don't know it's a</font>

1029
00:52:51,410 --> 00:52:53,920
good<font color="#CCCCCC"> question</font>

1030
00:53:01,029 --> 00:53:06,430
a system of verifying existing<font color="#CCCCCC"> SI</font>

1031
00:53:03,819 --> 00:53:11,140
software sort of post hoc and improving

1032
00:53:06,430 --> 00:53:12,969
its security via<font color="#E5E5E5"> hmm improving or</font>

1033
00:53:11,140 --> 00:53:16,900
proving improving yes

1034
00:53:12,969 --> 00:53:19,539
improving nice<font color="#E5E5E5"> yes</font><font color="#CCCCCC"> so what's your</font>

1035
00:53:16,900 --> 00:53:21,609
opinion<font color="#E5E5E5"> on the viability of using a</font>

1036
00:53:19,539 --> 00:53:25,680
static<font color="#CCCCCC"> analysis and static verification</font>

1037
00:53:21,609 --> 00:53:28,538
<font color="#E5E5E5">for that would it be</font><font color="#CCCCCC"> possible to somehow</font>

1038
00:53:25,680 --> 00:53:30,819
<font color="#E5E5E5">analyze software that already exists and</font>

1039
00:53:28,539 --> 00:53:33,009
<font color="#E5E5E5">is written in these unsafe languages and</font>

1040
00:53:30,819 --> 00:53:35,769
show that it nevertheless has some

1041
00:53:33,009 --> 00:53:38,619
<font color="#CCCCCC">security properties</font><font color="#E5E5E5"> without writing all</font>

1042
00:53:35,769 --> 00:53:42,788
the proofs manually in like hall or

1043
00:53:38,619 --> 00:53:46,719
<font color="#CCCCCC">Isabel</font><font color="#E5E5E5"> well so if you want to analyze</font>

1044
00:53:42,789 --> 00:53:48,849
existing<font color="#CCCCCC"> software so static analysis is</font>

1045
00:53:46,719 --> 00:53:51,390
already useful for finding<font color="#E5E5E5"> bugs in</font>

1046
00:53:48,849 --> 00:53:54,910
existing software<font color="#CCCCCC"> if you want to have</font>

1047
00:53:51,390 --> 00:53:57,549
assurance<font color="#E5E5E5"> from static analysis that's</font>

1048
00:53:54,910 --> 00:54:00,190
<font color="#E5E5E5">really very tough so you certainly</font>

1049
00:53:57,549 --> 00:54:02,710
<font color="#E5E5E5">wouldn't want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> manually write proofs</font>

1050
00:54:00,190 --> 00:54:06,809
<font color="#E5E5E5">in terms of the you know</font><font color="#CCCCCC"> the definition</font>

1051
00:54:02,710 --> 00:54:09,279
<font color="#CCCCCC">or C semantics you would need</font>

1052
00:54:06,809 --> 00:54:10,269
<font color="#CCCCCC">intermediate infrastructure</font><font color="#E5E5E5"> and if you</font>

1053
00:54:09,279 --> 00:54:12,910
look at the<font color="#E5E5E5"> people who have done</font>

1054
00:54:10,269 --> 00:54:15,700
verified software so verified compilers

1055
00:54:12,910 --> 00:54:18,489
and<font color="#E5E5E5"> verified hypervisors and verified</font>

1056
00:54:15,700 --> 00:54:24,700
operating systems all<font color="#E5E5E5"> of those are now</font>

1057
00:54:18,489 --> 00:54:27,460
possible<font color="#CCCCCC"> on significant scales</font><font color="#E5E5E5"> but they</font>

1058
00:54:24,700 --> 00:54:29,499
<font color="#CCCCCC">they use whole layers of proof and</font>

1059
00:54:27,460 --> 00:54:32,049
verification infrastructure for doing

1060
00:54:29,499 --> 00:54:35,019
<font color="#CCCCCC">that they're</font><font color="#E5E5E5"> not writing proofs by hand</font>

1061
00:54:32,049 --> 00:54:37,210
for every<font color="#E5E5E5"> little detail and some of</font>

1062
00:54:35,019 --> 00:54:39,689
those verification methods you know

1063
00:54:37,210 --> 00:54:42,249
either<font color="#E5E5E5"> are you</font><font color="#CCCCCC"> can imagine them being</font>

1064
00:54:39,690 --> 00:54:44,680
basically like static analysis you would

1065
00:54:42,249 --> 00:54:47,769
<font color="#E5E5E5">might use a static analysis to prove</font>

1066
00:54:44,680 --> 00:54:50,319
some relatively simple facts about the

1067
00:54:47,769 --> 00:54:54,189
code<font color="#E5E5E5"> and then stitch those together into</font>

1068
00:54:50,319 --> 00:54:56,589
<font color="#E5E5E5">a larger assembly I think I could cook</font>

1069
00:54:54,190 --> 00:54:58,210
any kind<font color="#E5E5E5"> of more complete thing I think</font>

1070
00:54:56,589 --> 00:55:00,160
it's hard to<font color="#CCCCCC"> imagine I mean and these</font>

1071
00:54:58,210 --> 00:55:02,950
analysis tools mostly<font color="#E5E5E5"> they rely on</font>

1072
00:55:00,160 --> 00:55:05,769
<font color="#E5E5E5">making some approximation in order to be</font>

1073
00:55:02,950 --> 00:55:09,100
able<font color="#E5E5E5"> to do their thing at all so it's</font>

1074
00:55:05,769 --> 00:55:16,370
hard<font color="#E5E5E5"> to get assurance out of some</font>

1075
00:55:09,100 --> 00:55:18,830
okay<font color="#E5E5E5"> Mike one you said you modified and</font>

1076
00:55:16,370 --> 00:55:21,680
MIPS architecture to add some logic<font color="#CCCCCC"> to</font>

1077
00:55:18,830 --> 00:55:24,190
check<font color="#E5E5E5"> their capabilities do you know</font>

1078
00:55:21,680 --> 00:55:29,419
what the cost of this<font color="#E5E5E5"> and now regarding</font>

1079
00:55:24,190 --> 00:55:31,640
constitutional or<font color="#E5E5E5"> energetic</font><font color="#CCCCCC"> poor supply</font>

1080
00:55:29,420 --> 00:55:34,310
<font color="#E5E5E5">sorry can you</font><font color="#CCCCCC"> repeat the</font><font color="#E5E5E5"> last</font><font color="#CCCCCC"> part of</font>

1081
00:55:31,640 --> 00:55:35,980
that<font color="#CCCCCC"> what's the cost</font><font color="#E5E5E5"> of this</font>

1082
00:55:34,310 --> 00:55:39,080
<font color="#CCCCCC">modification or guarding</font><font color="#E5E5E5"> your</font>

1083
00:55:35,980 --> 00:55:42,050
computational power and power

1084
00:55:39,080 --> 00:55:43,880
consumption<font color="#CCCCCC"> so so what's the energy cost</font>

1085
00:55:42,050 --> 00:55:46,130
<font color="#CCCCCC">so I</font><font color="#E5E5E5"> gave you a performance cost</font><font color="#CCCCCC"> I</font>

1086
00:55:43,880 --> 00:55:48,770
didn't give you<font color="#CCCCCC"> I carefully didn't give</font>

1087
00:55:46,130 --> 00:55:51,320
you an<font color="#E5E5E5"> energy cost estimate because it's</font>

1088
00:55:48,770 --> 00:55:55,759
really<font color="#E5E5E5"> hard to do in a scientifically</font>

1089
00:55:51,320 --> 00:55:57,050
credible way<font color="#E5E5E5"> without making a more or</font>

1090
00:55:55,760 --> 00:55:59,990
less production<font color="#E5E5E5"> superscalar</font>

1091
00:55:57,050 --> 00:56:01,510
implementation and we are sadly not<font color="#E5E5E5"> in a</font>

1092
00:55:59,990 --> 00:56:04,430
<font color="#E5E5E5">position to do</font><font color="#CCCCCC"> that although if you have</font>

1093
00:56:01,510 --> 00:56:13,670
<font color="#E5E5E5">10 or</font><font color="#CCCCCC"> 20 million</font><font color="#E5E5E5"> pounds and I would be</font>

1094
00:56:04,430 --> 00:56:15,470
happy<font color="#CCCCCC"> to accept it please I</font><font color="#E5E5E5"> how does the</font>

1095
00:56:13,670 --> 00:56:17,890
class of problems<font color="#CCCCCC"> that you can address</font>

1096
00:56:15,470 --> 00:56:21,500
with cherry compared<font color="#E5E5E5"> to the class of</font>

1097
00:56:17,890 --> 00:56:27,080
<font color="#E5E5E5">problems that are</font><font color="#CCCCCC"> excluded by for</font>

1098
00:56:21,500 --> 00:56:29,180
example<font color="#CCCCCC"> the</font><font color="#E5E5E5"> rust programming language so</font>

1099
00:56:27,080 --> 00:56:30,500
how does the problems of cherry relate

1100
00:56:29,180 --> 00:56:32,180
to the problems<font color="#E5E5E5"> sorry the problems</font>

1101
00:56:30,500 --> 00:56:36,280
excluded by cherry relate to the

1102
00:56:32,180 --> 00:56:36,279
problems excluded by rust

1103
00:56:37,549 --> 00:56:43,249
so if you are<font color="#E5E5E5"> happy to write all of</font><font color="#CCCCCC"> your</font>

1104
00:56:40,519 --> 00:56:51,408
code in rust<font color="#CCCCCC"> without ever using the word</font>

1105
00:56:43,249 --> 00:56:54,109
on the safe then maybe there would be no

1106
00:56:51,409 --> 00:56:56,259
<font color="#E5E5E5">point in cherry at all are you happy to</font>

1107
00:56:54,109 --> 00:56:56,259
do that

1108
00:56:56,630 --> 00:57:10,309
I think someone shakes their head

1109
00:57:00,109 --> 00:57:12,949
<font color="#E5E5E5">sideways</font><font color="#CCCCCC"> ya know like</font><font color="#E5E5E5"> number one what do</font>

1110
00:57:10,309 --> 00:57:14,989
you think<font color="#CCCCCC"> about the following</font><font color="#E5E5E5"> seasons we</font>

1111
00:57:12,949 --> 00:57:17,779
are building a whole<font color="#E5E5E5"> system of things</font>

1112
00:57:14,989 --> 00:57:20,719
with artificial<font color="#CCCCCC"> intelligence and</font>

1113
00:57:17,779 --> 00:57:23,599
something<font color="#CCCCCC"> like that that is above this</font>

1114
00:57:20,719 --> 00:57:29,719
technical level<font color="#E5E5E5"> and is building another</font>

1115
00:57:23,599 --> 00:57:30,849
<font color="#CCCCCC">chaos that isn't healing with with those</font>

1116
00:57:29,719 --> 00:57:34,659
things

1117
00:57:30,849 --> 00:57:34,659
it's dreadful isn't it

1118
00:57:35,900 --> 00:57:39,059
[Applause]

1119
00:57:42,520 --> 00:57:46,730
<font color="#E5E5E5">if there are so you might in fact some</font>

1120
00:57:45,619 --> 00:57:49,660
of<font color="#CCCCCC"> my colleagues</font><font color="#E5E5E5"> are interested in this</font>

1121
00:57:46,730 --> 00:57:53,720
question<font color="#CCCCCC"> if you you might well want to</font>

1122
00:57:49,660 --> 00:57:58,578
bound<font color="#E5E5E5"> what your artificial intelligence</font>

1123
00:57:53,720 --> 00:58:00,078
can access or touch<font color="#CCCCCC"> and for that</font><font color="#E5E5E5"> you</font>

1124
00:57:58,579 --> 00:58:03,170
might want this<font color="#E5E5E5"> kind of technology but</font>

1125
00:58:00,079 --> 00:58:04,430
<font color="#E5E5E5">this is not you know we are with machine</font>

1126
00:58:03,170 --> 00:58:06,170
learning<font color="#CCCCCC"> systems we're intrinsically</font>

1127
00:58:04,430 --> 00:58:08,569
building things<font color="#E5E5E5"> that we on</font><font color="#CCCCCC"> the whole</font>

1128
00:58:06,170 --> 00:58:11,059
don't understand<font color="#CCCCCC"> and that will have edge</font>

1129
00:58:08,569 --> 00:58:15,799
cases<font color="#E5E5E5"> that go wrong and this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> not</font>

1130
00:58:11,059 --> 00:58:18,339
speaking to<font color="#CCCCCC"> that in any way okay</font>

1131
00:58:15,799 --> 00:58:23,359
<font color="#CCCCCC">does</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> internet have a question no</font>

1132
00:58:18,339 --> 00:58:26,770
good<font color="#CCCCCC"> I don't see anyone else so let's</font>

1133
00:58:23,359 --> 00:58:28,500
conclude<font color="#E5E5E5"> this thank you</font><font color="#CCCCCC"> very much okay</font>

1134
00:58:26,770 --> 00:58:31,820
thank you

1135
00:58:28,500 --> 00:58:31,820
[Applause]

1136
00:58:31,990 --> 00:58:39,169
[Music]

1137
00:58:41,240 --> 00:58:53,910
[Music]

