1
00:00:00,030 --> 00:00:23,939
I was looking at media dot<font color="#E5E5E5"> C CC dot de</font>

2
00:00:21,330 --> 00:00:26,070
today and to check out<font color="#E5E5E5"> how many</font><font color="#CCCCCC"> talks of</font>

3
00:00:23,939 --> 00:00:28,830
console hacking we already had<font color="#E5E5E5"> at the</font>

4
00:00:26,070 --> 00:00:32,159
Congress and it it's quite<font color="#CCCCCC"> a</font><font color="#E5E5E5"> long list</font>

5
00:00:28,830 --> 00:00:36,360
<font color="#E5E5E5">actually so we had the Xbox 360</font>

6
00:00:32,159 --> 00:00:39,269
Playstation 3<font color="#E5E5E5"> 823 C 3 we had PlayStation</font>

7
00:00:36,360 --> 00:00:42,600
Portable<font color="#E5E5E5"> at 24 C 3 we had a lot more</font>

8
00:00:39,270 --> 00:00:44,640
<font color="#E5E5E5">it's a really really long list and I'm</font>

9
00:00:42,600 --> 00:00:47,789
really excited<font color="#E5E5E5"> to</font><font color="#CCCCCC"> have Ethan Lou and</font>

10
00:00:44,640 --> 00:00:49,980
<font color="#E5E5E5">Davey here today and they're gonna tell</font>

11
00:00:47,789 --> 00:00:54,539
<font color="#CCCCCC">us a little bit about the hack of</font><font color="#E5E5E5"> the</font>

12
00:00:49,980 --> 00:00:56,459
PlayStation Vita<font color="#E5E5E5"> and yeah</font><font color="#CCCCCC"> let's see how</font>

13
00:00:54,539 --> 00:01:00,739
<font color="#CCCCCC">the heck it please give a warm applause</font>

14
00:00:56,460 --> 00:01:00,739
to even and<font color="#CCCCCC"> Davey</font>

15
00:01:06,950 --> 00:01:13,350
so thanks<font color="#E5E5E5"> I remember coming</font><font color="#CCCCCC"> today so I</font>

16
00:01:11,340 --> 00:01:14,820
know some of you did this<font color="#E5E5E5"> already but</font>

17
00:01:13,350 --> 00:01:19,080
show of hands<font color="#E5E5E5"> how many of</font><font color="#CCCCCC"> you own a</font>

18
00:01:14,820 --> 00:01:22,429
PlayStation Vita<font color="#E5E5E5"> okay that's a few of</font>

19
00:01:19,080 --> 00:01:27,210
you how many<font color="#E5E5E5"> of you own a Nintendo</font><font color="#CCCCCC"> 3ds</font>

20
00:01:22,430 --> 00:01:28,920
<font color="#E5E5E5">okay so that's the yeah well I'm hoping</font>

21
00:01:27,210 --> 00:01:34,949
by the end<font color="#CCCCCC"> of this talk I can convince</font>

22
00:01:28,920 --> 00:01:39,180
<font color="#E5E5E5">you to</font><font color="#CCCCCC"> come to the better console so who</font>

23
00:01:34,950 --> 00:01:44,430
<font color="#E5E5E5">are we we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> team molecule this</font><font color="#CCCCCC"> is our</font>

24
00:01:39,180 --> 00:01:47,759
mascot<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Davi</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> Yvonne</font><font color="#E5E5E5"> for the</font>

25
00:01:44,430 --> 00:01:51,350
lawyers I'm<font color="#E5E5E5"> XYZ and there's also Proxima</font>

26
00:01:47,759 --> 00:01:55,080
who is not here<font color="#E5E5E5"> today</font>

27
00:01:51,350 --> 00:01:58,559
we've been hacking places<font color="#CCCCCC"> in Vedas</font><font color="#E5E5E5"> since</font>

28
00:01:55,080 --> 00:01:59,460
the very<font color="#CCCCCC"> beginning and we've done</font><font color="#E5E5E5"> a lot</font>

29
00:01:58,560 --> 00:02:03,450
<font color="#CCCCCC">of stuff on</font><font color="#E5E5E5"> it</font>

30
00:01:59,460 --> 00:02:06,240
so overview of the<font color="#E5E5E5"> talk today so this</font><font color="#CCCCCC"> is</font>

31
00:02:03,450 --> 00:02:08,580
<font color="#CCCCCC">a foundational talk so we wanted</font><font color="#E5E5E5"> to</font>

32
00:02:06,240 --> 00:02:10,440
focus<font color="#CCCCCC"> more on the techniques that we</font>

33
00:02:08,580 --> 00:02:12,240
develop<font color="#E5E5E5"> rather than just show the</font>

34
00:02:10,440 --> 00:02:14,190
<font color="#E5E5E5">results so some of the parts you know</font>

35
00:02:12,240 --> 00:02:16,170
for those<font color="#E5E5E5"> of you more experienced might</font>

36
00:02:14,190 --> 00:02:20,010
find it a little<font color="#E5E5E5"> bit tedious</font><font color="#CCCCCC"> but I'm</font>

37
00:02:16,170 --> 00:02:22,049
hoping that<font color="#E5E5E5"> oh you</font><font color="#CCCCCC"> know you'll like go</font>

38
00:02:20,010 --> 00:02:27,750
through<font color="#CCCCCC"> it and learn something</font>

39
00:02:22,050 --> 00:02:31,350
anyways so day you'll be presenting the

40
00:02:27,750 --> 00:02:34,980
software side and I<font color="#E5E5E5"> will come back later</font>

41
00:02:31,350 --> 00:02:39,560
<font color="#CCCCCC">on</font><font color="#E5E5E5"> and enlighten you with some hardware</font>

42
00:02:34,980 --> 00:02:39,560
stuff and here's<font color="#CCCCCC"> Devi</font>

43
00:02:39,770 --> 00:02:46,110
hello<font color="#E5E5E5"> so I'm going to be talking about</font>

44
00:02:43,620 --> 00:02:48,240
the software side of<font color="#E5E5E5"> hacking the</font>

45
00:02:46,110 --> 00:02:49,980
PlayStation<font color="#E5E5E5"> video</font><font color="#CCCCCC"> and specifically I'm</font>

46
00:02:48,240 --> 00:02:51,900
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> be talking</font><font color="#CCCCCC"> about a certain</font>

47
00:02:49,980 --> 00:02:53,280
subset<font color="#E5E5E5"> of the visa and that's their</font>

48
00:02:51,900 --> 00:02:57,959
security<font color="#CCCCCC"> code</font>

49
00:02:53,280 --> 00:02:59,250
yeah<font color="#E5E5E5"> security</font><font color="#CCCCCC"> coprocessor so first thing</font>

50
00:02:57,959 --> 00:03:01,500
I need to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about first is the</font>

51
00:02:59,250 --> 00:03:04,470
<font color="#E5E5E5">software the security</font><font color="#CCCCCC"> architecture of</font>

52
00:03:01,500 --> 00:03:06,480
the PlayStation Vita<font color="#E5E5E5"> it kind of looks</font>

53
00:03:04,470 --> 00:03:09,959
like this<font color="#E5E5E5"> these are</font><font color="#CCCCCC"> the basic privilege</font>

54
00:03:06,480 --> 00:03:11,640
levels for the the console and we've

55
00:03:09,959 --> 00:03:13,590
already worked<font color="#E5E5E5"> on the place each</font><font color="#CCCCCC"> of you</font>

56
00:03:11,640 --> 00:03:16,890
for<font color="#E5E5E5"> a long</font><font color="#CCCCCC"> time there it was released in</font>

57
00:03:13,590 --> 00:03:19,380
2012 so we're<font color="#E5E5E5"> already up to the</font>

58
00:03:16,890 --> 00:03:22,708
<font color="#E5E5E5">some level yeah what's quite interesting</font>

59
00:03:19,380 --> 00:03:26,190
<font color="#CCCCCC">about Russell</font><font color="#E5E5E5"> on the Vita is it's not</font>

60
00:03:22,709 --> 00:03:29,010
actually trusted at<font color="#E5E5E5"> all by Sony it only</font>

61
00:03:26,190 --> 00:03:31,319
works as a<font color="#CCCCCC"> proxy to the</font><font color="#E5E5E5"> security</font>

62
00:03:29,010 --> 00:03:36,090
<font color="#E5E5E5">coprocessor so we can simplify</font><font color="#CCCCCC"> this</font>

63
00:03:31,319 --> 00:03:38,730
<font color="#E5E5E5">privilege level down</font><font color="#CCCCCC"> to this so really</font>

64
00:03:36,090 --> 00:03:41,670
what I want<font color="#CCCCCC"> to talk about</font><font color="#E5E5E5"> today is how</font>

65
00:03:38,730 --> 00:03:44,450
I'm going to<font color="#E5E5E5"> go about breaking into the</font>

66
00:03:41,670 --> 00:03:48,179
foot kernel<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> fidlow target levels</font>

67
00:03:44,450 --> 00:03:51,690
so should I just said that what is<font color="#CCCCCC"> it</font>

68
00:03:48,180 --> 00:03:54,060
<font color="#E5E5E5">it's a security coprocessor and it's a</font>

69
00:03:51,690 --> 00:03:56,370
special<font color="#E5E5E5"> processor in that it's running a</font>

70
00:03:54,060 --> 00:03:58,110
proprietary instruction set<font color="#E5E5E5"> we'll come</font>

71
00:03:56,370 --> 00:03:59,970
<font color="#E5E5E5">back to the actual details of the</font>

72
00:03:58,110 --> 00:04:01,769
hardware<font color="#CCCCCC"> itself but</font><font color="#E5E5E5"> let's first talk</font>

73
00:03:59,970 --> 00:04:06,359
about<font color="#E5E5E5"> the two privilege levels I was</font>

74
00:04:01,769 --> 00:04:08,010
talking about the<font color="#E5E5E5"> fit kernel is the DRM</font>

75
00:04:06,360 --> 00:04:10,830
layer of the system and make<font color="#CCCCCC"> sure the</font>

76
00:04:08,010 --> 00:04:13,230
games and firmware updates are<font color="#E5E5E5"> properly</font>

77
00:04:10,830 --> 00:04:17,370
authenticated and<font color="#E5E5E5"> non-authorized code is</font>

78
00:04:13,230 --> 00:04:21,450
run<font color="#E5E5E5"> the fed loader it's more like the</font>

79
00:04:17,370 --> 00:04:22,950
<font color="#CCCCCC">bit loader</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> startup sequence</font><font color="#E5E5E5"> and</font>

80
00:04:21,450 --> 00:04:27,000
it just makes<font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that the food kernel</font>

81
00:04:22,950 --> 00:04:28,830
<font color="#CCCCCC">itself is valid so if we want to</font><font color="#E5E5E5"> break</font>

82
00:04:27,000 --> 00:04:32,880
into<font color="#E5E5E5"> these we need to think of a plan on</font>

83
00:04:28,830 --> 00:04:35,849
<font color="#CCCCCC">how to attack this and with a</font>

84
00:04:32,880 --> 00:04:38,180
proprietary processor we really need to

85
00:04:35,850 --> 00:04:40,530
start getting<font color="#E5E5E5"> more information</font><font color="#CCCCCC"> on it so</font>

86
00:04:38,180 --> 00:04:45,180
<font color="#CCCCCC">first thing</font><font color="#E5E5E5"> we need</font><font color="#CCCCCC"> to look at is the</font>

87
00:04:40,530 --> 00:04:46,950
hardware<font color="#CCCCCC"> architecture behind</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> then</font>

88
00:04:45,180 --> 00:04:48,900
afterwards we're probably going to<font color="#CCCCCC"> have</font>

89
00:04:46,950 --> 00:04:50,700
<font color="#E5E5E5">to look at the software that's actually</font>

90
00:04:48,900 --> 00:04:52,919
<font color="#E5E5E5">running on the</font><font color="#CCCCCC"> processor and from</font><font color="#E5E5E5"> that</font>

91
00:04:50,700 --> 00:04:58,050
we<font color="#E5E5E5"> can start to</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> of a plan</font><font color="#CCCCCC"> of</font>

92
00:04:52,919 --> 00:05:00,000
action<font color="#CCCCCC"> to</font><font color="#E5E5E5"> break into</font><font color="#CCCCCC"> it so first I'm</font>

93
00:04:58,050 --> 00:05:02,789
going to talk<font color="#CCCCCC"> about the architecture of</font>

94
00:05:00,000 --> 00:05:05,330
the<font color="#CCCCCC"> system</font><font color="#E5E5E5"> this is the</font><font color="#CCCCCC"> block diagram</font><font color="#E5E5E5"> for</font>

95
00:05:02,789 --> 00:05:09,240
the main system on chip for<font color="#E5E5E5"> the Vita</font>

96
00:05:05,330 --> 00:05:11,789
<font color="#E5E5E5">this is called Kermit actually named</font>

97
00:05:09,240 --> 00:05:15,330
<font color="#E5E5E5">after the</font><font color="#CCCCCC"> Frog they so they tend to name</font>

98
00:05:11,789 --> 00:05:18,510
their systems the main processors and

99
00:05:15,330 --> 00:05:19,979
stuff off of<font color="#E5E5E5"> in this case on the Vita</font>

100
00:05:18,510 --> 00:05:22,438
<font color="#E5E5E5">they named after the Muppets there's</font>

101
00:05:19,979 --> 00:05:24,519
also Ernie

102
00:05:22,439 --> 00:05:28,419
there's no<font color="#E5E5E5"> Bert though which</font><font color="#CCCCCC"> is</font>

103
00:05:24,519 --> 00:05:32,819
disappointing<font color="#CCCCCC"> on the PSP</font><font color="#E5E5E5"> for example</font>

104
00:05:28,419 --> 00:05:35,649
they had a Kirk and Spock<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Paul so</font>

105
00:05:32,819 --> 00:05:37,719
only those two on<font color="#E5E5E5"> this and we don't</font>

106
00:05:35,649 --> 00:05:40,019
<font color="#E5E5E5">really care about the rest here the CPU</font>

107
00:05:37,719 --> 00:05:42,939
<font color="#CCCCCC">the GPU we really want</font><font color="#E5E5E5"> to focus on food</font>

108
00:05:40,019 --> 00:05:46,749
and you can see<font color="#E5E5E5"> inside food there's the</font>

109
00:05:42,939 --> 00:05:50,649
<font color="#E5E5E5">MEP c5 processor</font><font color="#CCCCCC"> map is actually a</font>

110
00:05:46,749 --> 00:05:52,569
custom<font color="#CCCCCC"> risk from Toshiba and I'll talk</font>

111
00:05:50,649 --> 00:05:57,579
about<font color="#E5E5E5"> the name food we actually got that</font>

112
00:05:52,569 --> 00:05:59,679
<font color="#E5E5E5">from the elf headers of executables</font>

113
00:05:57,579 --> 00:06:03,159
built for the<font color="#E5E5E5"> Met platform</font><font color="#CCCCCC"> you see the</font>

114
00:05:59,679 --> 00:06:05,469
elf identifier is<font color="#E5E5E5"> F 0</font><font color="#CCCCCC"> 0 D so we just ran</font>

115
00:06:03,159 --> 00:06:09,729
<font color="#E5E5E5">with that name</font><font color="#CCCCCC"> date food and it's been</font>

116
00:06:05,469 --> 00:06:12,639
<font color="#E5E5E5">history since the met processors are</font>

117
00:06:09,729 --> 00:06:16,329
normally used<font color="#E5E5E5"> in parking assist cameras</font>

118
00:06:12,639 --> 00:06:18,009
or security solutions but in this case

119
00:06:16,329 --> 00:06:20,919
<font color="#E5E5E5">they</font><font color="#CCCCCC"> sort of decided</font><font color="#E5E5E5"> to use it for the</font>

120
00:06:18,009 --> 00:06:22,419
security<font color="#E5E5E5"> coprocessor yeah there's a</font>

121
00:06:20,919 --> 00:06:24,369
bunch of other stuff belonging<font color="#E5E5E5"> to food</font>

122
00:06:22,419 --> 00:06:27,489
such as<font color="#CCCCCC"> the</font><font color="#E5E5E5"> crypto engine and the key</font>

123
00:06:24,369 --> 00:06:29,819
slots<font color="#E5E5E5"> not very important for this talk</font>

124
00:06:27,489 --> 00:06:34,328
but there it also has its own private

125
00:06:29,819 --> 00:06:37,569
memory the secure SRAM here only<font color="#E5E5E5"> 128</font>

126
00:06:34,329 --> 00:06:39,519
kilobytes but it cannot be<font color="#CCCCCC"> accessed from</font>

127
00:06:37,569 --> 00:06:44,610
<font color="#CCCCCC">Armour in fact any other</font><font color="#E5E5E5"> subsystem in</font>

128
00:06:39,519 --> 00:06:46,959
the system so with a custom risk here

129
00:06:44,610 --> 00:06:49,569
<font color="#CCCCCC">how do</font><font color="#E5E5E5"> we find out information about it</font>

130
00:06:46,959 --> 00:06:53,439
well<font color="#E5E5E5"> it's pretty much the same as</font>

131
00:06:49,569 --> 00:06:55,709
anything<font color="#E5E5E5"> else you google it and what</font>

132
00:06:53,439 --> 00:06:58,539
<font color="#E5E5E5">that turns out is a bunch of data sheets</font>

133
00:06:55,709 --> 00:07:00,789
<font color="#E5E5E5">somewhere in English most are in</font>

134
00:06:58,539 --> 00:07:06,818
Japanese<font color="#E5E5E5"> so Google translates your best</font>

135
00:07:00,789 --> 00:07:09,568
friend there yes so following that<font color="#E5E5E5"> a</font>

136
00:07:06,819 --> 00:07:12,549
couple<font color="#E5E5E5"> of Google searches gives you the</font>

137
00:07:09,569 --> 00:07:14,229
<font color="#E5E5E5">date sheets so from there we can our</font>

138
00:07:12,549 --> 00:07:16,769
learn about the instruction set we can

139
00:07:14,229 --> 00:07:19,360
<font color="#CCCCCC">learn about some of the quirks</font><font color="#E5E5E5"> and</font>

140
00:07:16,769 --> 00:07:21,849
thankfully<font color="#CCCCCC"> Red Hat have already</font><font color="#E5E5E5"> poured</font>

141
00:07:19,360 --> 00:07:23,709
the<font color="#CCCCCC"> map platform to GCC and binutils so</font>

142
00:07:21,849 --> 00:07:26,188
straight off the bat we've got compiler

143
00:07:23,709 --> 00:07:30,219
we've got tools to analyze<font color="#E5E5E5"> elf files</font>

144
00:07:26,189 --> 00:07:32,829
<font color="#E5E5E5">perfect but really we we want to learn</font>

145
00:07:30,219 --> 00:07:34,760
more and the best way to learn for us at

146
00:07:32,829 --> 00:07:38,060
least<font color="#E5E5E5"> is to get a little hands-on</font>

147
00:07:34,760 --> 00:07:40,010
so<font color="#E5E5E5"> we</font><font color="#CCCCCC"> felt</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> Ida plugin for it</font><font color="#E5E5E5"> we've</font>

148
00:07:38,060 --> 00:07:41,420
<font color="#E5E5E5">built an emulator which was really</font>

149
00:07:40,010 --> 00:07:43,580
<font color="#CCCCCC">useful because it helped us</font><font color="#E5E5E5"> learn some</font>

150
00:07:41,420 --> 00:07:45,710
<font color="#CCCCCC">of the weird quirks behind it and we</font>

151
00:07:43,580 --> 00:07:49,130
<font color="#CCCCCC">even have</font><font color="#E5E5E5"> addy comply or D compiler for</font>

152
00:07:45,710 --> 00:07:51,590
<font color="#E5E5E5">this so overall what we've learned about</font>

153
00:07:49,130 --> 00:07:55,010
<font color="#E5E5E5">the hardware is that the destruction set</font>

154
00:07:51,590 --> 00:07:57,679
is heavily<font color="#E5E5E5"> inspired by MIPS it doesn't</font>

155
00:07:55,010 --> 00:08:00,200
have any of the weird<font color="#CCCCCC"> like the lace law</font>

156
00:07:57,680 --> 00:08:01,940
or anything like<font color="#E5E5E5"> that but the actual</font>

157
00:08:00,200 --> 00:08:02,740
instruction format is pretty<font color="#CCCCCC"> much the</font>

158
00:08:01,940 --> 00:08:05,900
same

159
00:08:02,740 --> 00:08:08,180
there's no virtual memory<font color="#CCCCCC"> and there's no</font>

160
00:08:05,900 --> 00:08:10,909
memory protection whatsoever so it runs

161
00:08:08,180 --> 00:08:13,010
purely on physical memory<font color="#E5E5E5"> it it's not</font>

162
00:08:10,910 --> 00:08:13,610
<font color="#CCCCCC">harden</font><font color="#E5E5E5"> for security so this is very</font>

163
00:08:13,010 --> 00:08:16,250
<font color="#E5E5E5">interesting</font>

164
00:08:13,610 --> 00:08:19,160
<font color="#E5E5E5">there's no</font><font color="#CCCCCC"> ASLR there's no no execute</font>

165
00:08:16,250 --> 00:08:21,380
bits or choice for a security cool

166
00:08:19,160 --> 00:08:26,450
processor we thought that it wasn't<font color="#E5E5E5"> very</font>

167
00:08:21,380 --> 00:08:27,860
secure<font color="#CCCCCC"> so however next</font><font color="#E5E5E5"> thing we're going</font>

168
00:08:26,450 --> 00:08:31,670
to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about is the actual software</font>

169
00:08:27,860 --> 00:08:34,130
<font color="#E5E5E5">running on food and at</font><font color="#CCCCCC"> run time on the</font>

170
00:08:31,670 --> 00:08:36,430
<font color="#CCCCCC">Play Station view there's</font><font color="#E5E5E5"> this secure</font>

171
00:08:34,130 --> 00:08:39,099
kernel<font color="#E5E5E5"> that's running at all times</font><font color="#CCCCCC"> and</font>

172
00:08:36,429 --> 00:08:43,039
the main purpose<font color="#E5E5E5"> of that is to load</font>

173
00:08:39,099 --> 00:08:44,660
applets which are execute that

174
00:08:43,039 --> 00:08:47,480
encapsulate some sort of functionality

175
00:08:44,660 --> 00:08:50,750
<font color="#E5E5E5">on the system examples of this or</font>

176
00:08:47,480 --> 00:08:53,180
<font color="#E5E5E5">encryption signature checks DRM and</font>

177
00:08:50,750 --> 00:08:55,610
<font color="#E5E5E5">whatever you want to use like some of</font>

178
00:08:53,180 --> 00:09:00,739
feature that<font color="#CCCCCC"> needs</font><font color="#E5E5E5"> to be authenticated</font>

179
00:08:55,610 --> 00:09:02,390
what<font color="#E5E5E5"> what you do is you load it and once</font>

180
00:09:00,740 --> 00:09:06,560
<font color="#E5E5E5">you look</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> then do some sort of</font>

181
00:09:02,390 --> 00:09:08,090
RPC<font color="#E5E5E5"> calls</font><font color="#CCCCCC"> to think do some calculations</font>

182
00:09:06,560 --> 00:09:11,180
or<font color="#CCCCCC"> a decryption</font><font color="#E5E5E5"> or authentication or</font>

183
00:09:08,090 --> 00:09:13,760
whatever and then afterwards<font color="#E5E5E5"> you unload</font>

184
00:09:11,180 --> 00:09:15,709
<font color="#CCCCCC">it because this the applets follow a</font>

185
00:09:13,760 --> 00:09:18,050
life<font color="#E5E5E5"> cycle where you you load an applet</font>

186
00:09:15,710 --> 00:09:21,280
you do your stuff<font color="#E5E5E5"> you unload it</font><font color="#CCCCCC"> and only</font>

187
00:09:18,050 --> 00:09:24,469
<font color="#E5E5E5">single applet can be loaded at once and</font>

188
00:09:21,280 --> 00:09:26,209
unfortunately for<font color="#E5E5E5"> us say the applets are</font>

189
00:09:24,470 --> 00:09:28,160
something that<font color="#E5E5E5"> encrypted so we can't</font>

190
00:09:26,210 --> 00:09:31,850
<font color="#E5E5E5">just create a room one load it and then</font>

191
00:09:28,160 --> 00:09:33,980
<font color="#CCCCCC">I have access</font><font color="#E5E5E5"> to the food so let's look</font>

192
00:09:31,850 --> 00:09:35,900
at the<font color="#CCCCCC"> like take a little</font><font color="#E5E5E5"> bit more</font>

193
00:09:33,980 --> 00:09:40,310
detail specifically we'll start with

194
00:09:35,900 --> 00:09:43,010
applet loading<font color="#E5E5E5"> so you see here there's</font>

195
00:09:40,310 --> 00:09:46,550
three regions<font color="#E5E5E5"> here you see</font><font color="#CCCCCC"> armed</font><font color="#E5E5E5"> trust</font>

196
00:09:43,010 --> 00:09:48,740
<font color="#E5E5E5">zone and</font><font color="#CCCCCC"> third as I mentioned</font><font color="#E5E5E5"> trust</font><font color="#CCCCCC"> owns</font>

197
00:09:46,550 --> 00:09:51,050
mostly useless<font color="#CCCCCC"> it only works as a pro</font>

198
00:09:48,740 --> 00:09:53,089
save between<font color="#E5E5E5"> arm and foot so we can</font>

199
00:09:51,050 --> 00:09:56,569
simplify this model down<font color="#E5E5E5"> and we can</font>

200
00:09:53,089 --> 00:09:59,270
start talking<font color="#E5E5E5"> about how the applet</font>

201
00:09:56,570 --> 00:10:01,610
loading works between arm and food<font color="#E5E5E5"> so</font>

202
00:09:59,270 --> 00:10:03,500
arm will start off it will read<font color="#CCCCCC"> the</font>

203
00:10:01,610 --> 00:10:06,890
applet into memory<font color="#E5E5E5"> and will then</font>

204
00:10:03,500 --> 00:10:09,290
transfer that applet over to food then

205
00:10:06,890 --> 00:10:11,089
in foot<font color="#E5E5E5"> it will then check the signature</font>

206
00:10:09,290 --> 00:10:12,829
<font color="#CCCCCC">of it make sure it's a valid applet and</font>

207
00:10:11,089 --> 00:10:15,230
then it will start decrypting and

208
00:10:12,830 --> 00:10:16,760
loading it<font color="#E5E5E5"> once done it will return the</font>

209
00:10:15,230 --> 00:10:20,600
result<font color="#E5E5E5"> whether that was successful it</font>

210
00:10:16,760 --> 00:10:23,209
failed or something else for a blue<font color="#E5E5E5"> RPC</font>

211
00:10:20,600 --> 00:10:25,910
<font color="#E5E5E5">it's is mostly the</font><font color="#CCCCCC"> same power in here it</font>

212
00:10:23,209 --> 00:10:28,609
formats<font color="#E5E5E5"> a request sends that over to the</font>

213
00:10:25,910 --> 00:10:32,630
<font color="#E5E5E5">foot secure kernel secure kernel will</font>

214
00:10:28,610 --> 00:10:35,000
then forward<font color="#E5E5E5"> that to the applet then the</font>

215
00:10:32,630 --> 00:10:38,200
applet will run<font color="#CCCCCC"> wherever</font><font color="#E5E5E5"> commands needed</font>

216
00:10:35,000 --> 00:10:40,430
<font color="#E5E5E5">and the resolve is sent back to arm</font>

217
00:10:38,200 --> 00:10:42,649
<font color="#CCCCCC">unloading pretty</font><font color="#E5E5E5"> much the same thing as</font>

218
00:10:40,430 --> 00:10:44,599
you'd expect what happens is<font color="#E5E5E5"> that the</font>

219
00:10:42,649 --> 00:10:46,820
<font color="#E5E5E5">request is unloaded you you request an</font>

220
00:10:44,600 --> 00:10:47,810
unload<font color="#E5E5E5"> food will oblige and you'll get</font>

221
00:10:46,820 --> 00:10:51,560
the result back<font color="#E5E5E5"> whether that was</font>

222
00:10:47,810 --> 00:10:53,390
successful<font color="#E5E5E5"> so</font><font color="#CCCCCC"> knowing this we need to</font>

223
00:10:51,560 --> 00:10:57,079
<font color="#CCCCCC">start</font><font color="#E5E5E5"> thinking how can we</font><font color="#CCCCCC"> actually go</font>

224
00:10:53,390 --> 00:10:59,930
about attacking<font color="#E5E5E5"> this so let's summarize</font>

225
00:10:57,079 --> 00:11:02,239
<font color="#CCCCCC">what we know</font><font color="#E5E5E5"> first we can control all</font>

226
00:10:59,930 --> 00:11:05,689
the impure into food and importantly

227
00:11:02,240 --> 00:11:07,910
<font color="#E5E5E5">none of this</font><font color="#CCCCCC"> inputs checked at all trust</font>

228
00:11:05,690 --> 00:11:10,390
on doesn't do it so we<font color="#E5E5E5"> can pass in as</font>

229
00:11:07,910 --> 00:11:12,860
much or<font color="#E5E5E5"> as little malicious</font><font color="#CCCCCC"> D as we want</font>

230
00:11:10,390 --> 00:11:15,140
and we know the memory layer of it this

231
00:11:12,860 --> 00:11:18,020
<font color="#CCCCCC">is</font><font color="#E5E5E5"> mostly inferred from the data sheets</font>

232
00:11:15,140 --> 00:11:20,589
we got<font color="#E5E5E5"> but also interestingly the</font>

233
00:11:18,020 --> 00:11:22,970
applets have an elf header<font color="#E5E5E5"> and they have</font>

234
00:11:20,589 --> 00:11:24,890
segment headers in there which say which

235
00:11:22,970 --> 00:11:26,420
address it looks too so we could we can

236
00:11:24,890 --> 00:11:30,140
<font color="#E5E5E5">build a pretty good model of what</font><font color="#CCCCCC"> the</font>

237
00:11:26,420 --> 00:11:32,870
internal<font color="#E5E5E5"> memory looks like the security</font>

238
00:11:30,140 --> 00:11:37,699
<font color="#CCCCCC">code processor has no security features</font>

239
00:11:32,870 --> 00:11:39,560
whatsoever so that's really<font color="#E5E5E5"> handy we we</font>

240
00:11:37,700 --> 00:11:41,240
know what<font color="#E5E5E5"> the app lifecycle is we know</font>

241
00:11:39,560 --> 00:11:47,149
<font color="#E5E5E5">that they're loaded we know we can then</font>

242
00:11:41,240 --> 00:11:49,130
do some RPC calls and then we can then

243
00:11:47,149 --> 00:11:52,160
<font color="#CCCCCC">Squier those RPC calls for any sort</font><font color="#E5E5E5"> of</font>

244
00:11:49,130 --> 00:11:55,279
issues what we need to watch out for<font color="#E5E5E5"> is</font>

245
00:11:52,160 --> 00:11:57,469
there's a<font color="#E5E5E5"> sign to X cube also we can</font>

246
00:11:55,279 --> 00:11:59,029
modify any<font color="#E5E5E5"> of these executables</font>

247
00:11:57,470 --> 00:12:01,970
<font color="#E5E5E5">otherwise we'll get</font><font color="#CCCCCC"> thrown back with an</font>

248
00:11:59,029 --> 00:12:04,920
error we<font color="#CCCCCC"> can</font>

249
00:12:01,970 --> 00:12:07,290
we can read these excuse they're all

250
00:12:04,920 --> 00:12:10,439
<font color="#CCCCCC">encrypted so we can't do any analysis of</font>

251
00:12:07,290 --> 00:12:14,130
them beforehand<font color="#CCCCCC"> and this basically makes</font>

252
00:12:10,440 --> 00:12:16,230
<font color="#E5E5E5">the</font><font color="#CCCCCC"> system of black box here</font><font color="#E5E5E5"> so ideally</font>

253
00:12:14,130 --> 00:12:18,090
what we're after<font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to proceed</font><font color="#CCCCCC"> any</font>

254
00:12:16,230 --> 00:12:20,670
further is some sort of read primitive

255
00:12:18,090 --> 00:12:23,670
that<font color="#E5E5E5"> will allow us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> go ahead inspect</font>

256
00:12:20,670 --> 00:12:25,079
<font color="#E5E5E5">the food private memory and then from</font>

257
00:12:23,670 --> 00:12:28,229
there we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> start looking at the code</font>

258
00:12:25,080 --> 00:12:31,650
<font color="#CCCCCC">and we could establish a more precise</font>

259
00:12:28,230 --> 00:12:32,850
attack on it so I'm going<font color="#CCCCCC"> to go</font><font color="#E5E5E5"> back to</font>

260
00:12:31,650 --> 00:12:34,350
applet loading here<font color="#CCCCCC"> and we're</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

261
00:12:32,850 --> 00:12:38,400
<font color="#E5E5E5">try and discuss in detail what's</font>

262
00:12:34,350 --> 00:12:39,750
happening it's because specifically<font color="#E5E5E5"> we</font>

263
00:12:38,400 --> 00:12:41,699
know that the<font color="#CCCCCC"> applets read</font><font color="#E5E5E5"> into memory</font>

264
00:12:39,750 --> 00:12:44,430
<font color="#E5E5E5">and is transferred over to food where it</font>

265
00:12:41,700 --> 00:12:46,530
does a signature check and then does the

266
00:12:44,430 --> 00:12:50,239
rest<font color="#E5E5E5"> of the loading but what happens for</font>

267
00:12:46,530 --> 00:12:54,000
this<font color="#E5E5E5"> little bit in</font><font color="#CCCCCC"> between here and</font>

268
00:12:50,240 --> 00:12:56,940
<font color="#E5E5E5">there's</font><font color="#CCCCCC"> two problems</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> first one is</font>

269
00:12:54,000 --> 00:13:01,350
the arm<font color="#E5E5E5"> operates with virtual memory and</font>

270
00:12:56,940 --> 00:13:03,150
food does not so this has<font color="#E5E5E5"> this is a</font>

271
00:13:01,350 --> 00:13:05,280
problem because virtual memory is not

272
00:13:03,150 --> 00:13:08,189
guaranteed to be<font color="#E5E5E5"> backed by contiguous</font>

273
00:13:05,280 --> 00:13:09,870
physical memory<font color="#E5E5E5"> so whenever we want to</font>

274
00:13:08,190 --> 00:13:12,540
send<font color="#E5E5E5"> data</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> food we're going to have to</font>

275
00:13:09,870 --> 00:13:14,760
make<font color="#E5E5E5"> sure that it's either copied to</font>

276
00:13:12,540 --> 00:13:16,020
that or that<font color="#CCCCCC"> the memory that we don't</font>

277
00:13:14,760 --> 00:13:18,569
use virtual memory which is<font color="#E5E5E5"> getting</font>

278
00:13:16,020 --> 00:13:20,850
ridiculous<font color="#E5E5E5"> so there there needs to be a</font>

279
00:13:18,570 --> 00:13:21,960
better<font color="#E5E5E5"> way and and so they have better</font>

280
00:13:20,850 --> 00:13:25,800
way for doing<font color="#E5E5E5"> this and we'll come</font><font color="#CCCCCC"> to</font>

281
00:13:21,960 --> 00:13:26,970
<font color="#CCCCCC">that shortly so this is virtual memory</font>

282
00:13:25,800 --> 00:13:28,620
<font color="#CCCCCC">and this</font><font color="#E5E5E5"> is physical memory you could</font>

283
00:13:26,970 --> 00:13:31,410
see that we have page<font color="#CCCCCC"> one through to</font>

284
00:13:28,620 --> 00:13:32,940
page<font color="#E5E5E5"> seven and if you look at the</font>

285
00:13:31,410 --> 00:13:35,069
<font color="#E5E5E5">physical memory site you</font><font color="#CCCCCC"> can see</font><font color="#E5E5E5"> that</font>

286
00:13:32,940 --> 00:13:37,050
the<font color="#CCCCCC"> pages aren't</font><font color="#E5E5E5"> in order so if we were</font>

287
00:13:35,070 --> 00:13:39,750
to pass page<font color="#CCCCCC"> ones physical</font><font color="#E5E5E5"> address to</font>

288
00:13:37,050 --> 00:13:41,790
fit it won't<font color="#E5E5E5"> receive</font><font color="#CCCCCC"> the right they are</font>

289
00:13:39,750 --> 00:13:45,000
<font color="#E5E5E5">will receive page one some unknown data</font>

290
00:13:41,790 --> 00:13:47,550
page for page three not intended what

291
00:13:45,000 --> 00:13:50,580
<font color="#E5E5E5">Sony do here is they add a physical</font>

292
00:13:47,550 --> 00:13:51,569
address list<font color="#E5E5E5"> this</font><font color="#CCCCCC"> P</font><font color="#E5E5E5"> adder list instead</font>

293
00:13:50,580 --> 00:13:53,340
of passing the<font color="#CCCCCC"> data</font>

294
00:13:51,570 --> 00:13:57,690
all it does<font color="#CCCCCC"> is you</font><font color="#E5E5E5"> pass the P at our</font>

295
00:13:53,340 --> 00:14:00,480
list of<font color="#E5E5E5"> it and it will query it will</font>

296
00:13:57,690 --> 00:14:02,730
query<font color="#CCCCCC"> the list which has the first</font>

297
00:14:00,480 --> 00:14:04,320
element is<font color="#CCCCCC"> the location</font><font color="#E5E5E5"> of the page</font><font color="#CCCCCC"> we</font>

298
00:14:02,730 --> 00:14:07,590
<font color="#E5E5E5">want so you</font><font color="#CCCCCC"> can see the first element</font>

299
00:14:04,320 --> 00:14:12,120
here points to page<font color="#E5E5E5"> one</font><font color="#CCCCCC"> the second</font>

300
00:14:07,590 --> 00:14:13,710
element in that<font color="#CCCCCC"> list</font><font color="#E5E5E5"> is the size so what</font>

301
00:14:12,120 --> 00:14:14,880
food will do when it<font color="#E5E5E5"> wants to read</font><font color="#CCCCCC"> next</font>

302
00:14:13,710 --> 00:14:17,580
<font color="#CCCCCC">curable is it</font>

303
00:14:14,880 --> 00:14:20,580
walk this list<font color="#E5E5E5"> and build the model up</font>

304
00:14:17,580 --> 00:14:23,430
from<font color="#E5E5E5"> inside and this is the way they can</font>

305
00:14:20,580 --> 00:14:27,090
<font color="#CCCCCC">get around</font><font color="#E5E5E5"> having</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> copy</font><font color="#CCCCCC"> virtual</font><font color="#E5E5E5"> memory</font>

306
00:14:23,430 --> 00:14:29,010
to<font color="#CCCCCC"> contiguous block so applying this to</font>

307
00:14:27,090 --> 00:14:31,980
food<font color="#E5E5E5"> and to the applet specifically the</font>

308
00:14:29,010 --> 00:14:33,840
<font color="#CCCCCC">food module is an applet what you can</font>

309
00:14:31,980 --> 00:14:36,420
see here<font color="#CCCCCC"> is that the</font><font color="#E5E5E5"> first three bytes</font>

310
00:14:33,840 --> 00:14:39,120
of this food module is represented by

311
00:14:36,420 --> 00:14:41,790
<font color="#E5E5E5">the first entry</font><font color="#CCCCCC"> if the</font><font color="#E5E5E5"> P adder list</font><font color="#CCCCCC"> the</font>

312
00:14:39,120 --> 00:14:43,440
second<font color="#E5E5E5"> is the second</font><font color="#CCCCCC"> in the piano</font><font color="#E5E5E5"> list</font>

313
00:14:41,790 --> 00:14:46,980
and so forth<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can see that all these</font>

314
00:14:43,440 --> 00:14:49,950
data is backed in DRAM this solution

315
00:14:46,980 --> 00:14:51,300
<font color="#E5E5E5">fixes the copying and then we've learned</font>

316
00:14:49,950 --> 00:14:54,660
how a date<font color="#E5E5E5"> has passed the food and this</font>

317
00:14:51,300 --> 00:15:01,469
is consistent<font color="#E5E5E5"> throughout transverse</font><font color="#CCCCCC"> the</font>

318
00:14:54,660 --> 00:15:03,270
food<font color="#CCCCCC"> there's a problem</font><font color="#E5E5E5"> though if we go</font>

319
00:15:01,470 --> 00:15:05,520
back<font color="#E5E5E5"> to this model here and we</font><font color="#CCCCCC"> can see</font>

320
00:15:03,270 --> 00:15:08,189
<font color="#E5E5E5">that all the data is backed in DRAM what</font>

321
00:15:05,520 --> 00:15:10,470
happens if we modify one of<font color="#E5E5E5"> these P</font>

322
00:15:08,190 --> 00:15:16,160
adder list entries to then point to<font color="#E5E5E5"> the</font>

323
00:15:10,470 --> 00:15:18,690
food private memory well as it turns out

324
00:15:16,160 --> 00:15:27,750
it does not blacklist its own private

325
00:15:18,690 --> 00:15:30,030
memory<font color="#E5E5E5"> useful maybe not here</font><font color="#CCCCCC"> because the</font>

326
00:15:27,750 --> 00:15:31,740
<font color="#E5E5E5">internal memory if it keeps all this</font>

327
00:15:30,030 --> 00:15:37,100
data internal so it doesn't copy

328
00:15:31,740 --> 00:15:37,100
<font color="#E5E5E5">anything with this header so no leak but</font>

329
00:15:37,460 --> 00:15:41,310
there is also a signature<font color="#E5E5E5"> check the</font>

330
00:15:39,870 --> 00:15:43,410
applet is also going to<font color="#E5E5E5"> be checked so</font>

331
00:15:41,310 --> 00:15:47,430
this makes<font color="#E5E5E5"> it useless right because</font>

332
00:15:43,410 --> 00:15:48,870
we're passing in<font color="#E5E5E5"> two unknown data it's</font>

333
00:15:47,430 --> 00:15:53,310
doing a signature jackets office is just

334
00:15:48,870 --> 00:15:55,200
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> fail or is it</font><font color="#CCCCCC"> because if</font><font color="#E5E5E5"> we make</font>

335
00:15:53,310 --> 00:15:58,500
an assumption right<font color="#CCCCCC"> if the day we're</font>

336
00:15:55,200 --> 00:16:01,320
point to an SRAM<font color="#E5E5E5"> matches the expected</font>

337
00:15:58,500 --> 00:16:02,940
data that we have in the applet<font color="#CCCCCC"> we'd</font>

338
00:16:01,320 --> 00:16:05,970
<font color="#E5E5E5">expect the signature check to succeed</font>

339
00:16:02,940 --> 00:16:08,940
<font color="#E5E5E5">and then we can make a deduction here</font>

340
00:16:05,970 --> 00:16:12,750
that if that signature<font color="#E5E5E5"> check succeeds</font><font color="#CCCCCC"> we</font>

341
00:16:08,940 --> 00:16:15,150
know the contents<font color="#E5E5E5"> of the SRAM so let's</font>

342
00:16:12,750 --> 00:16:16,860
do this<font color="#E5E5E5"> a bit better here if we reduce</font>

343
00:16:15,150 --> 00:16:19,939
the P<font color="#E5E5E5"> adder list entry point into the</font>

344
00:16:16,860 --> 00:16:22,620
private memory<font color="#E5E5E5"> to one byte and then</font>

345
00:16:19,940 --> 00:16:24,750
simplify the P adder list with the

346
00:16:22,620 --> 00:16:27,610
module to look more<font color="#E5E5E5"> like</font><font color="#CCCCCC"> this where you</font>

347
00:16:24,750 --> 00:16:31,089
have<font color="#E5E5E5"> the first entry that</font><font color="#CCCCCC"> is</font>

348
00:16:27,610 --> 00:16:32,980
the first part file the one element<font color="#E5E5E5"> for</font>

349
00:16:31,089 --> 00:16:36,100
the this point the<font color="#E5E5E5"> food private memory</font>

350
00:16:32,980 --> 00:16:38,080
is the zero<font color="#CCCCCC"> zero byte</font><font color="#E5E5E5"> so we're</font>

351
00:16:36,100 --> 00:16:39,880
<font color="#E5E5E5">interested in finding in fit private</font>

352
00:16:38,080 --> 00:16:45,910
memory<font color="#E5E5E5"> where all the zero</font><font color="#CCCCCC"> zero bytes are</font>

353
00:16:39,880 --> 00:16:48,579
so every time we pass in this<font color="#CCCCCC"> P</font><font color="#E5E5E5"> at our</font>

354
00:16:45,910 --> 00:16:51,069
list what we would expect<font color="#E5E5E5"> is whenever</font>

355
00:16:48,579 --> 00:16:54,339
<font color="#E5E5E5">there's a zero</font><font color="#CCCCCC"> zero point two in this</font>

356
00:16:51,070 --> 00:16:57,010
element<font color="#E5E5E5"> here that's in SRAM and</font><font color="#CCCCCC"> that the</font>

357
00:16:54,339 --> 00:17:00,100
signature check would succeed<font color="#E5E5E5"> so if we</font>

358
00:16:57,010 --> 00:17:01,750
start by going<font color="#CCCCCC"> through this so we have</font>

359
00:17:00,100 --> 00:17:05,410
the element point in it the first byte

360
00:17:01,750 --> 00:17:08,199
<font color="#CCCCCC">in the private memory and we can then</font>

361
00:17:05,410 --> 00:17:09,550
pass it into<font color="#E5E5E5"> food it fails the</font><font color="#CCCCCC"> cedar</font>

362
00:17:08,199 --> 00:17:13,120
check fails so what we've learned here

363
00:17:09,550 --> 00:17:15,970
<font color="#CCCCCC">is that that byte in memory is not zero</font>

364
00:17:13,119 --> 00:17:19,178
<font color="#CCCCCC">zero we can</font><font color="#E5E5E5"> go on we can go to the next</font>

365
00:17:15,970 --> 00:17:21,670
byte and query<font color="#E5E5E5"> that also not zero</font><font color="#CCCCCC"> and we</font>

366
00:17:19,179 --> 00:17:24,240
could do this so on and so on and so on

367
00:17:21,670 --> 00:17:27,520
until eventually<font color="#E5E5E5"> we should expect to</font><font color="#CCCCCC"> see</font>

368
00:17:24,240 --> 00:17:28,449
<font color="#E5E5E5">a success so the module was loaded and</font>

369
00:17:27,520 --> 00:17:31,690
what we've learned<font color="#E5E5E5"> from that is that</font>

370
00:17:28,449 --> 00:17:35,230
<font color="#CCCCCC">byte there is</font><font color="#E5E5E5"> zero zero it matches the</font>

371
00:17:31,690 --> 00:17:36,550
one in fit<font color="#CCCCCC"> the food applet so yeah we've</font>

372
00:17:35,230 --> 00:17:38,320
learned that<font color="#CCCCCC"> that's zero zero we can</font>

373
00:17:36,550 --> 00:17:39,970
then go<font color="#CCCCCC"> ahead and</font><font color="#E5E5E5"> apply this all the way</font>

374
00:17:38,320 --> 00:17:42,399
through<font color="#CCCCCC"> the rest of it</font><font color="#E5E5E5"> private memory</font>

375
00:17:39,970 --> 00:17:45,640
and there we go we've built up a model

376
00:17:42,400 --> 00:17:47,860
where all the<font color="#E5E5E5"> zeros are so we</font><font color="#CCCCCC"> learned</font>

377
00:17:45,640 --> 00:17:49,990
where the<font color="#E5E5E5"> zeros are not very useful what</font>

378
00:17:47,860 --> 00:17:54,159
we want to do now<font color="#CCCCCC"> is</font><font color="#E5E5E5"> look for is your</font>

379
00:17:49,990 --> 00:17:55,929
ones<font color="#E5E5E5"> so if we then rearrange the P</font><font color="#CCCCCC"> adder</font>

380
00:17:54,160 --> 00:17:58,360
<font color="#E5E5E5">list so the missing byte in</font><font color="#CCCCCC"> the food</font>

381
00:17:55,929 --> 00:18:00,790
applet is<font color="#CCCCCC"> 0-1</font><font color="#E5E5E5"> we can then do the same</font>

382
00:17:58,360 --> 00:18:03,939
<font color="#CCCCCC">thing again we point our entry into the</font>

383
00:18:00,790 --> 00:18:07,629
food private memory<font color="#E5E5E5"> to the start we</font>

384
00:18:03,940 --> 00:18:11,260
start querying eventually hope we<font color="#E5E5E5"> find</font>

385
00:18:07,630 --> 00:18:13,000
another one keep going keep going

386
00:18:11,260 --> 00:18:15,129
we don't<font color="#E5E5E5"> need to</font><font color="#CCCCCC"> created the</font><font color="#E5E5E5"> zeros we</font>

387
00:18:13,000 --> 00:18:17,320
already know they're there<font color="#CCCCCC"> then</font><font color="#E5E5E5"> we get</font>

388
00:18:15,130 --> 00:18:19,480
here again and we<font color="#E5E5E5"> find another one then</font>

389
00:18:17,320 --> 00:18:20,980
you could<font color="#E5E5E5"> do the same</font><font color="#CCCCCC"> thing again apply</font>

390
00:18:19,480 --> 00:18:24,940
all the way down to the end of memory

391
00:18:20,980 --> 00:18:27,280
and you find all the ones so imagine

392
00:18:24,940 --> 00:18:29,500
we've built this model<font color="#E5E5E5"> so what we want</font>

393
00:18:27,280 --> 00:18:32,320
<font color="#E5E5E5">to do now is then apply</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> to all the</font>

394
00:18:29,500 --> 00:18:33,820
<font color="#CCCCCC">zero to s then all the zero 3s and</font><font color="#E5E5E5"> all</font>

395
00:18:32,320 --> 00:18:35,530
the zero<font color="#CCCCCC"> 4s and all the</font><font color="#E5E5E5"> zero fives all</font>

396
00:18:33,820 --> 00:18:37,830
the way up to the ffs<font color="#CCCCCC"> and</font><font color="#E5E5E5"> once we've</font>

397
00:18:35,530 --> 00:18:39,580
<font color="#CCCCCC">done that you build a model of the food</font>

398
00:18:37,830 --> 00:18:40,989
<font color="#CCCCCC">SRAM</font>

399
00:18:39,580 --> 00:18:41,520
and you get the plain text<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

400
00:18:40,989 --> 00:18:42,540
<font color="#E5E5E5">colonel</font>

401
00:18:41,520 --> 00:18:49,950
[Applause]

402
00:18:42,540 --> 00:18:53,470
[Music]

403
00:18:49,950 --> 00:19:01,050
this is what we're calling<font color="#E5E5E5"> the octopus</font>

404
00:18:53,470 --> 00:19:03,670
<font color="#E5E5E5">exploit don't ask why</font><font color="#CCCCCC"> so with this we</font>

405
00:19:01,050 --> 00:19:05,320
now have the<font color="#CCCCCC"> food Colonel we we cannot</font>

406
00:19:03,670 --> 00:19:07,870
read<font color="#CCCCCC"> axis we</font><font color="#E5E5E5"> can then do some further</font>

407
00:19:05,320 --> 00:19:09,879
analysis<font color="#E5E5E5"> we could start looking</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> more</font>

408
00:19:07,870 --> 00:19:12,600
precise vulnerabilities we won't go into

409
00:19:09,880 --> 00:19:16,230
<font color="#CCCCCC">that but we've got the food kernels so</font>

410
00:19:12,600 --> 00:19:19,240
what's<font color="#CCCCCC"> next is the the food</font><font color="#E5E5E5"> loader and</font>

411
00:19:16,230 --> 00:19:23,080
the<font color="#E5E5E5"> food loader is the boot stage and</font>

412
00:19:19,240 --> 00:19:24,040
because it's the boot stage it<font color="#E5E5E5"> doesn't</font>

413
00:19:23,080 --> 00:19:27,220
last very long

414
00:19:24,040 --> 00:19:28,840
it doesn't<font color="#E5E5E5"> persist through</font><font color="#CCCCCC"> run time</font><font color="#E5E5E5"> and</font>

415
00:19:27,220 --> 00:19:32,650
that makes<font color="#E5E5E5"> the software attack surface</font>

416
00:19:28,840 --> 00:19:34,780
very small so to deal with that what

417
00:19:32,650 --> 00:19:36,280
we're<font color="#CCCCCC"> gonna have to</font><font color="#E5E5E5"> do is look at</font>

418
00:19:34,780 --> 00:19:38,480
hardware<font color="#E5E5E5"> and I'm gonna pass you back to</font>

419
00:19:36,280 --> 00:19:39,149
Ethan and<font color="#CCCCCC"> thank you very much</font>

420
00:19:38,480 --> 00:19:42,609
[Applause]

421
00:19:39,150 --> 00:19:42,609
[Music]

422
00:19:44,220 --> 00:19:50,850
<font color="#CCCCCC">I told</font><font color="#E5E5E5"> you I would be back so you know</font>

423
00:19:48,330 --> 00:19:53,250
we ran to<font color="#E5E5E5"> the situation where the you</font>

424
00:19:50,850 --> 00:19:55,080
know<font color="#E5E5E5"> weak little software hackers have</font>

425
00:19:53,250 --> 00:20:00,960
to be rescued<font color="#CCCCCC"> by the hardware</font><font color="#E5E5E5"> master</font>

426
00:19:55,080 --> 00:20:03,178
<font color="#E5E5E5">race so I'm gonna focus on</font><font color="#CCCCCC"> today is</font>

427
00:20:00,960 --> 00:20:05,190
glitching and<font color="#E5E5E5"> I know you know that</font><font color="#CCCCCC"> word</font>

428
00:20:03,179 --> 00:20:06,720
is kind of<font color="#E5E5E5"> a buzzword these days many of</font>

429
00:20:05,190 --> 00:20:08,429
you have heard it I think even at

430
00:20:06,720 --> 00:20:11,100
Congress there were a couple<font color="#E5E5E5"> of talks on</font>

431
00:20:08,429 --> 00:20:13,169
it but instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> just saying hey we</font>

432
00:20:11,100 --> 00:20:14,610
glitched it<font color="#E5E5E5"> I want to kind of go into</font>

433
00:20:13,169 --> 00:20:17,309
the details<font color="#E5E5E5"> of you know what is</font>

434
00:20:14,610 --> 00:20:22,199
glitching<font color="#E5E5E5"> how does it work and why does</font>

435
00:20:17,309 --> 00:20:25,440
<font color="#CCCCCC">it work so in short a a Ace Hardware</font>

436
00:20:22,200 --> 00:20:28,370
glitch<font color="#E5E5E5"> allows you to create a software</font>

437
00:20:25,440 --> 00:20:31,530
vulnerability when none exists<font color="#CCCCCC"> and</font>

438
00:20:28,370 --> 00:20:32,908
there's many ways of<font color="#CCCCCC"> doing so</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> we're</font>

439
00:20:31,530 --> 00:20:35,340
really<font color="#E5E5E5"> gonna focus on one of these</font>

440
00:20:32,909 --> 00:20:37,770
methods<font color="#CCCCCC"> today which is voltage glitching</font>

441
00:20:35,340 --> 00:20:40,230
and the reason is<font color="#CCCCCC"> because the other ways</font>

442
00:20:37,770 --> 00:20:42,000
<font color="#CCCCCC">are much more</font><font color="#E5E5E5"> difficult and</font><font color="#CCCCCC"> expensive to</font>

443
00:20:40,230 --> 00:20:46,890
pull off and some of them are only

444
00:20:42,000 --> 00:20:50,520
theoretical<font color="#E5E5E5"> so to show</font><font color="#CCCCCC"> an concrete</font>

445
00:20:46,890 --> 00:20:52,440
example I have a bit of<font color="#E5E5E5"> C code so this</font>

446
00:20:50,520 --> 00:20:54,570
code you know just does a size check and

447
00:20:52,440 --> 00:20:57,840
then that processes data<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> check</font>

448
00:20:54,570 --> 00:21:00,720
passes<font color="#CCCCCC"> and I went ahead and</font><font color="#E5E5E5"> compiled</font>

449
00:20:57,840 --> 00:21:02,520
<font color="#E5E5E5">into MIT by simply so if you haven't</font>

450
00:21:00,720 --> 00:21:05,909
seen it<font color="#CCCCCC"> but simply before and why would</font>

451
00:21:02,520 --> 00:21:07,918
<font color="#E5E5E5">you this is what it looks like and then</font>

452
00:21:05,909 --> 00:21:11,880
you know I will<font color="#E5E5E5"> just execute it for you</font>

453
00:21:07,919 --> 00:21:15,320
as the computer so<font color="#E5E5E5"> you know here we load</font>

454
00:21:11,880 --> 00:21:19,740
the size value<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> SLT u3o</font>

455
00:21:15,320 --> 00:21:22,830
basically is less than unsigned<font color="#E5E5E5"> and it</font>

456
00:21:19,740 --> 00:21:26,820
sets<font color="#CCCCCC"> r0 to the result of that so here's</font>

457
00:21:22,830 --> 00:21:29,399
set to<font color="#CCCCCC"> 0 because it was not less than</font>

458
00:21:26,820 --> 00:21:32,309
and because of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we jumped to the</font>

459
00:21:29,400 --> 00:21:34,230
error branch<font color="#E5E5E5"> and there's you know</font><font color="#CCCCCC"> it's</font>

460
00:21:32,309 --> 00:21:38,309
fully secure there's no way of hacking

461
00:21:34,230 --> 00:21:42,360
<font color="#E5E5E5">it just give up but if we</font><font color="#CCCCCC"> introduce a</font>

462
00:21:38,309 --> 00:21:45,049
voltage glitch at this point<font color="#E5E5E5"> what we do</font>

463
00:21:42,360 --> 00:21:50,039
what what happens is<font color="#CCCCCC"> that this will</font>

464
00:21:45,049 --> 00:21:52,889
create a mistake in the computation<font color="#CCCCCC"> so</font>

465
00:21:50,039 --> 00:21:54,690
<font color="#CCCCCC">as you can see here r0</font><font color="#E5E5E5"> is supposed to be</font>

466
00:21:52,890 --> 00:21:56,559
set<font color="#CCCCCC"> to zero but because of the voltage</font>

467
00:21:54,690 --> 00:21:58,840
glitch<font color="#E5E5E5"> it's now</font>

468
00:21:56,559 --> 00:22:00,490
one which propagates the next

469
00:21:58,840 --> 00:22:02,949
instruction when we're taking<font color="#CCCCCC"> a branch</font>

470
00:22:00,490 --> 00:22:07,809
<font color="#E5E5E5">based off of</font><font color="#CCCCCC"> that result</font><font color="#E5E5E5"> and we managed</font>

471
00:22:02,950 --> 00:22:10,899
to bypass<font color="#E5E5E5"> this check why does it work</font>

472
00:22:07,809 --> 00:22:12,970
though this is something<font color="#E5E5E5"> that's near and</font>

473
00:22:10,899 --> 00:22:15,399
<font color="#CCCCCC">dear to my heart because I'm the kind of</font>

474
00:22:12,970 --> 00:22:17,830
person<font color="#CCCCCC"> who you know you can</font><font color="#E5E5E5"> tell</font><font color="#CCCCCC"> me the</font>

475
00:22:15,399 --> 00:22:19,689
<font color="#E5E5E5">high level ideas but I'm not really</font>

476
00:22:17,830 --> 00:22:22,629
<font color="#CCCCCC">satisfied until I know the low level</font>

477
00:22:19,690 --> 00:22:24,070
details<font color="#CCCCCC"> so to</font><font color="#E5E5E5"> explain that we</font>

478
00:22:22,629 --> 00:22:29,230
<font color="#CCCCCC">unfortunately have to look at</font>

479
00:22:24,070 --> 00:22:30,610
transistors<font color="#E5E5E5"> and logic gates so if you</font>

480
00:22:29,230 --> 00:22:35,230
don't remember<font color="#E5E5E5"> this</font>

481
00:22:30,610 --> 00:22:40,418
don't worry I'll explain<font color="#E5E5E5"> it as well</font><font color="#CCCCCC"> so</font>

482
00:22:35,230 --> 00:22:43,990
this is<font color="#CCCCCC"> NAND or not not and and here's a</font>

483
00:22:40,419 --> 00:22:46,210
truth table<font color="#E5E5E5"> and we are going to</font>

484
00:22:43,990 --> 00:22:49,470
implement this in modern<font color="#E5E5E5"> transistor</font>

485
00:22:46,210 --> 00:22:51,700
technologies or<font color="#E5E5E5"> CMOS</font><font color="#CCCCCC"> it's a</font>

486
00:22:49,470 --> 00:22:53,139
<font color="#E5E5E5">complimentary transistor technology what</font>

487
00:22:51,700 --> 00:22:55,809
that means is there's two different

488
00:22:53,139 --> 00:23:02,529
<font color="#CCCCCC">types of transistors that</font><font color="#E5E5E5"> implements the</font>

489
00:22:55,809 --> 00:23:04,990
gate<font color="#E5E5E5"> one is as you see on top is used on</font>

490
00:23:02,529 --> 00:23:06,490
<font color="#E5E5E5">the I guess the</font><font color="#CCCCCC"> top part of the diagram</font>

491
00:23:04,990 --> 00:23:09,460
<font color="#CCCCCC">I'll show you that granulator will make</font>

492
00:23:06,490 --> 00:23:13,269
more<font color="#E5E5E5"> sense but basically this acts as I</font>

493
00:23:09,460 --> 00:23:15,850
switch the gate activates<font color="#E5E5E5"> and then the</font>

494
00:23:13,269 --> 00:23:18,399
current<font color="#CCCCCC"> will flow from</font><font color="#E5E5E5"> the source to the</font>

495
00:23:15,850 --> 00:23:20,529
drain<font color="#E5E5E5"> so kind of like a light</font><font color="#CCCCCC"> switch but</font>

496
00:23:18,399 --> 00:23:22,389
<font color="#E5E5E5">instead of you</font><font color="#CCCCCC"> know using your fingers</font>

497
00:23:20,529 --> 00:23:24,519
it's controlled by<font color="#E5E5E5"> the</font><font color="#CCCCCC"> voltage</font><font color="#E5E5E5"> at the</font>

498
00:23:22,389 --> 00:23:27,820
gate<font color="#E5E5E5"> the</font><font color="#CCCCCC"> only difference between these</font>

499
00:23:24,519 --> 00:23:31,149
two is that<font color="#E5E5E5"> the voltage to turn on the</font>

500
00:23:27,820 --> 00:23:33,189
top gate is low<font color="#E5E5E5"> so when there's no</font>

501
00:23:31,149 --> 00:23:35,258
voltage<font color="#E5E5E5"> that top gate turns on and on</font>

502
00:23:33,190 --> 00:23:37,570
the bottom one it turns on when it's

503
00:23:35,259 --> 00:23:39,039
high so when there<font color="#E5E5E5"> is voltage it turns</font>

504
00:23:37,570 --> 00:23:41,740
on and that's what make them

505
00:23:39,039 --> 00:23:45,009
<font color="#CCCCCC">complementary because one must always be</font>

506
00:23:41,740 --> 00:23:48,429
<font color="#CCCCCC">on when the other</font><font color="#E5E5E5"> ones off so here's</font>

507
00:23:45,009 --> 00:23:50,619
what<font color="#E5E5E5"> the NAND gate looks like so you see</font>

508
00:23:48,429 --> 00:23:53,919
the bottom gates are off the top gates

509
00:23:50,619 --> 00:23:55,840
are on<font color="#E5E5E5"> because zero nan</font><font color="#CCCCCC"> zero is one and</font>

510
00:23:53,919 --> 00:24:01,210
you<font color="#CCCCCC"> see current flowing from</font><font color="#E5E5E5"> the source</font>

511
00:23:55,840 --> 00:24:03,340
<font color="#CCCCCC">to the output now one nan zero is</font><font color="#E5E5E5"> still</font>

512
00:24:01,210 --> 00:24:05,110
<font color="#E5E5E5">one and the way that works is</font><font color="#CCCCCC"> that one</font>

513
00:24:03,340 --> 00:24:07,299
<font color="#E5E5E5">of the top gates is turned off but the</font>

514
00:24:05,110 --> 00:24:09,820
other one is<font color="#CCCCCC"> still on so it's still</font>

515
00:24:07,299 --> 00:24:10,509
flowing through the bottom one<font color="#CCCCCC"> one of</font>

516
00:24:09,820 --> 00:24:12,189
them is turned

517
00:24:10,509 --> 00:24:14,259
but that doesn't matter<font color="#E5E5E5"> because the</font>

518
00:24:12,190 --> 00:24:18,690
second one is turned off<font color="#E5E5E5"> so the you know</font>

519
00:24:14,259 --> 00:24:22,809
it doesn't<font color="#E5E5E5"> leak down to the bottom port</font>

520
00:24:18,690 --> 00:24:25,539
now<font color="#CCCCCC"> one and one is zero</font><font color="#E5E5E5"> and you can see</font>

521
00:24:22,809 --> 00:24:27,609
it's because the<font color="#E5E5E5"> two are turned off</font><font color="#CCCCCC"> now</font>

522
00:24:25,539 --> 00:24:31,869
why are the bottom two turned on because

523
00:24:27,609 --> 00:24:34,208
<font color="#E5E5E5">you know like a like when you turn</font><font color="#CCCCCC"> off a</font>

524
00:24:31,869 --> 00:24:35,918
faucet<font color="#E5E5E5"> sometimes</font><font color="#CCCCCC"> there's water that</font>

525
00:24:34,209 --> 00:24:39,699
<font color="#E5E5E5">drips down right so you need something</font>

526
00:24:35,919 --> 00:24:43,089
to collect that so what happens when<font color="#E5E5E5"> we</font>

527
00:24:39,699 --> 00:24:46,690
<font color="#E5E5E5">glitch it right so here's we know back</font>

528
00:24:43,089 --> 00:24:49,899
<font color="#CCCCCC">to the one</font><font color="#E5E5E5"> and zero example when we say</font>

529
00:24:46,690 --> 00:24:51,940
we<font color="#E5E5E5"> introduced a glitch what we are a</font>

530
00:24:49,899 --> 00:24:54,158
voltage glitch what we do is we

531
00:24:51,940 --> 00:24:58,269
essentially connect the voltage source

532
00:24:54,159 --> 00:25:01,629
<font color="#CCCCCC">down</font><font color="#E5E5E5"> to ground or zero volts essentially</font>

533
00:24:58,269 --> 00:25:05,259
<font color="#CCCCCC">you're you know you're you're disabling</font>

534
00:25:01,629 --> 00:25:06,998
the power source<font color="#E5E5E5"> and immediately that</font>

535
00:25:05,259 --> 00:25:08,819
doesn't do<font color="#E5E5E5"> anything so you can see here</font>

536
00:25:06,999 --> 00:25:13,389
there's still<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of leakage</font>

537
00:25:08,819 --> 00:25:15,849
current flowing to the output and<font color="#E5E5E5"> that's</font>

538
00:25:13,389 --> 00:25:17,619
because you know like I said<font color="#E5E5E5"> you know</font>

539
00:25:15,849 --> 00:25:19,149
it's like a<font color="#E5E5E5"> faucet right you turn it off</font>

540
00:25:17,619 --> 00:25:21,009
and<font color="#CCCCCC"> it doesn't immediately all get</font>

541
00:25:19,149 --> 00:25:24,849
drained<font color="#E5E5E5"> so it's still flowing a little</font>

542
00:25:21,009 --> 00:25:28,239
<font color="#CCCCCC">bit but like a tiny</font><font color="#E5E5E5"> moment later then</font>

543
00:25:24,849 --> 00:25:30,489
the<font color="#CCCCCC"> output goes to zero and</font><font color="#E5E5E5"> that is</font>

544
00:25:28,239 --> 00:25:33,009
incorrect<font color="#CCCCCC"> right because one and zero</font>

545
00:25:30,489 --> 00:25:35,259
should<font color="#E5E5E5"> be one however here's the</font>

546
00:25:33,009 --> 00:25:38,609
important part<font color="#CCCCCC"> right you have to then</font>

547
00:25:35,259 --> 00:25:41,229
turn it back<font color="#CCCCCC"> on and restore the value</font>

548
00:25:38,609 --> 00:25:42,489
otherwise if you keep it off then all

549
00:25:41,229 --> 00:25:44,229
the<font color="#E5E5E5"> transistors in this is we're going</font>

550
00:25:42,489 --> 00:25:46,719
<font color="#E5E5E5">to turn off and your system</font><font color="#CCCCCC"> just powers</font>

551
00:25:44,229 --> 00:25:52,449
down<font color="#CCCCCC"> and you can't do</font><font color="#E5E5E5"> anything useful</font>

552
00:25:46,719 --> 00:25:55,839
<font color="#E5E5E5">so the key</font><font color="#CCCCCC"> here is that we have you</font><font color="#E5E5E5"> know</font>

553
00:25:52,449 --> 00:25:56,619
<font color="#E5E5E5">an incorrect output</font><font color="#CCCCCC"> but only for a small</font>

554
00:25:55,839 --> 00:25:58,479
<font color="#CCCCCC">amount of time</font>

555
00:25:56,619 --> 00:26:01,658
<font color="#E5E5E5">because we have to turn it we can't get</font>

556
00:25:58,479 --> 00:26:03,429
away<font color="#E5E5E5"> it was leaving it off</font><font color="#CCCCCC"> and because</font>

557
00:26:01,659 --> 00:26:08,079
if we you know<font color="#CCCCCC"> leave</font><font color="#E5E5E5"> it off for</font><font color="#CCCCCC"> too long</font>

558
00:26:03,429 --> 00:26:11,440
then it<font color="#E5E5E5"> turns off but not all hope is</font>

559
00:26:08,079 --> 00:26:13,389
<font color="#E5E5E5">lost because that mistake for</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> tiny</font>

560
00:26:11,440 --> 00:26:17,229
amount<font color="#E5E5E5"> of</font><font color="#CCCCCC"> time will</font><font color="#E5E5E5"> actually propagate</font>

561
00:26:13,389 --> 00:26:20,019
if if it's done at<font color="#CCCCCC"> the right place</font><font color="#E5E5E5"> so</font>

562
00:26:17,229 --> 00:26:21,789
here's you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> like a tree built from</font>

563
00:26:20,019 --> 00:26:24,129
multiple NAND gates

564
00:26:21,789 --> 00:26:25,899
and you know let's say<font color="#E5E5E5"> the</font><font color="#CCCCCC"> voltage</font>

565
00:26:24,129 --> 00:26:28,359
<font color="#E5E5E5">glitch caused this output to</font><font color="#CCCCCC"> be</font>

566
00:26:25,899 --> 00:26:30,039
incorrect<font color="#E5E5E5"> but that's an input for these</font>

567
00:26:28,359 --> 00:26:31,869
two<font color="#E5E5E5"> gays right which is</font><font color="#CCCCCC"> input for these</font>

568
00:26:30,039 --> 00:26:34,658
two<font color="#E5E5E5"> and these two our inputs for that</font>

569
00:26:31,869 --> 00:26:38,049
one<font color="#E5E5E5"> so you effectively</font><font color="#CCCCCC"> you know created</font>

570
00:26:34,659 --> 00:26:40,450
mistakes and about half the circuit<font color="#E5E5E5"> but</font>

571
00:26:38,049 --> 00:26:42,639
that's the ideal case in<font color="#CCCCCC"> reality</font><font color="#E5E5E5"> you</font>

572
00:26:40,450 --> 00:26:44,619
know it's it's a lot harder to<font color="#E5E5E5"> determine</font>

573
00:26:42,639 --> 00:26:46,418
like how the<font color="#CCCCCC"> air is</font><font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> propagate</font>

574
00:26:44,619 --> 00:26:49,389
because<font color="#E5E5E5"> if you think about the truth</font>

575
00:26:46,419 --> 00:26:54,669
table<font color="#CCCCCC"> for NAND logic it's there's only</font>

576
00:26:49,389 --> 00:26:57,549
one way<font color="#CCCCCC"> of getting a a one way of</font>

577
00:26:54,669 --> 00:27:04,090
getting<font color="#E5E5E5"> a one in</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> ways of getting</font><font color="#CCCCCC"> a</font>

578
00:26:57,549 --> 00:27:07,049
zero<font color="#E5E5E5"> or the other way around but my</font>

579
00:27:04,090 --> 00:27:10,959
point is<font color="#CCCCCC"> that you know it's</font><font color="#E5E5E5"> not even</font>

580
00:27:07,049 --> 00:27:14,918
<font color="#E5E5E5">even to get the right output</font><font color="#CCCCCC"> that you</font>

581
00:27:10,960 --> 00:27:18,779
want the you know the the upshot though

582
00:27:14,919 --> 00:27:22,059
is that<font color="#CCCCCC"> we can cause an incorrect output</font>

583
00:27:18,779 --> 00:27:25,090
for short amount of<font color="#E5E5E5"> time we have</font><font color="#CCCCCC"> to wait</font>

584
00:27:22,059 --> 00:27:27,639
<font color="#E5E5E5">for the propagate and like I explained</font>

585
00:27:25,090 --> 00:27:30,580
<font color="#CCCCCC">before because the like you know</font><font color="#E5E5E5"> these</font>

586
00:27:27,639 --> 00:27:32,709
logic gates<font color="#E5E5E5"> aren't completely symmetric</font>

587
00:27:30,580 --> 00:27:35,259
it's easier to reach one state than the

588
00:27:32,710 --> 00:27:38,169
other<font color="#E5E5E5"> the system can correct itself</font><font color="#CCCCCC"> and</font>

589
00:27:35,259 --> 00:27:39,849
this<font color="#E5E5E5"> is actually by digital system</font>

590
00:27:38,169 --> 00:27:42,609
design one of<font color="#E5E5E5"> the reasons why your</font>

591
00:27:39,849 --> 00:27:45,970
<font color="#E5E5E5">computer is so robust is because it can</font>

592
00:27:42,609 --> 00:27:49,439
<font color="#CCCCCC">correct mistakes</font><font color="#E5E5E5"> like this like we are</font>

593
00:27:45,970 --> 00:27:52,269
<font color="#E5E5E5">injecting a voltage glitch manually but</font>

594
00:27:49,440 --> 00:27:55,090
<font color="#E5E5E5">glitches are a known thing in digital</font>

595
00:27:52,269 --> 00:27:58,059
logic<font color="#E5E5E5"> and it a lot of times it happens</font>

596
00:27:55,090 --> 00:28:00,759
without<font color="#E5E5E5"> any external sources so circuits</font>

597
00:27:58,059 --> 00:28:03,580
are<font color="#E5E5E5"> designed to correct itself which is</font>

598
00:28:00,759 --> 00:28:06,519
why<font color="#E5E5E5"> we need to find specific targets</font>

599
00:28:03,580 --> 00:28:10,779
<font color="#E5E5E5">with voltage glitch to actually get them</font>

600
00:28:06,519 --> 00:28:13,029
to<font color="#E5E5E5"> really do what we want and the ideal</font>

601
00:28:10,779 --> 00:28:15,580
case is that you know one error

602
00:28:13,029 --> 00:28:18,570
propagates through much of the circuitry

603
00:28:15,580 --> 00:28:21,340
<font color="#E5E5E5">and exam so examples of that includes</font>

604
00:28:18,570 --> 00:28:23,619
<font color="#E5E5E5">arithmetic instructions a yes hardware</font>

605
00:28:21,340 --> 00:28:25,209
like you know branching like in

606
00:28:23,619 --> 00:28:27,789
processors anything where you can

607
00:28:25,210 --> 00:28:30,009
<font color="#CCCCCC">imagine</font><font color="#E5E5E5"> like changing the input a little</font>

608
00:28:27,789 --> 00:28:33,560
bit will create a lot<font color="#E5E5E5"> of you know gears</font>

609
00:28:30,009 --> 00:28:38,020
turning<font color="#E5E5E5"> metaphorically</font>

610
00:28:33,560 --> 00:28:38,020
<font color="#E5E5E5">result in like widely different output</font>

611
00:28:38,080 --> 00:28:43,370
so that's a theory you guys can wake up

612
00:28:40,670 --> 00:28:46,940
<font color="#CCCCCC">now we're gonna get</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the actual</font>

613
00:28:43,370 --> 00:28:50,239
<font color="#E5E5E5">practical part which includes you know</font>

614
00:28:46,940 --> 00:28:53,210
<font color="#E5E5E5">finding out where to attack what to</font>

615
00:28:50,240 --> 00:28:55,400
attack and a little bit of automation

616
00:28:53,210 --> 00:28:59,180
and<font color="#E5E5E5"> that'll make more sense when</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> get</font>

617
00:28:55,400 --> 00:29:02,570
to<font color="#E5E5E5"> it so what</font><font color="#CCCCCC"> do I mean by where to</font>

618
00:28:59,180 --> 00:29:05,540
attack<font color="#E5E5E5"> so this here is an image of the</font>

619
00:29:02,570 --> 00:29:11,360
PCB where the Vita's main system<font color="#E5E5E5"> chip</font>

620
00:29:05,540 --> 00:29:13,820
<font color="#CCCCCC">Kermit is laid on top of and was</font>

621
00:29:11,360 --> 00:29:16,790
anything<font color="#E5E5E5"> as complicated as this there's</font>

622
00:29:13,820 --> 00:29:18,350
dozens of different voltage rails<font color="#CCCCCC"> that</font>

623
00:29:16,790 --> 00:29:21,950
power different parts of the chip

624
00:29:18,350 --> 00:29:26,000
including<font color="#E5E5E5"> like DRAM and</font><font color="#CCCCCC"> i/o pads and so</font>

625
00:29:21,950 --> 00:29:29,030
on but we only care about<font color="#E5E5E5"> the the power</font>

626
00:29:26,000 --> 00:29:31,910
pins that<font color="#CCCCCC"> go directly</font><font color="#E5E5E5"> to the transistors</font>

627
00:29:29,030 --> 00:29:35,330
so we need to find which pin that

628
00:29:31,910 --> 00:29:37,850
corresponds to to make things<font color="#E5E5E5"> worse</font>

629
00:29:35,330 --> 00:29:39,439
each<font color="#E5E5E5"> power rail voltage rail is actually</font>

630
00:29:37,850 --> 00:29:41,780
connected<font color="#CCCCCC"> to dozens of pins so it's not</font>

631
00:29:39,440 --> 00:29:46,460
<font color="#CCCCCC">just like one pin corresponding to a one</font>

632
00:29:41,780 --> 00:29:51,320
thing<font color="#E5E5E5"> and there's you know</font><font color="#CCCCCC"> 724 pins but</font>

633
00:29:46,460 --> 00:29:55,700
I can show you<font color="#E5E5E5"> a</font><font color="#CCCCCC"> way that we can go</font>

634
00:29:51,320 --> 00:30:00,409
<font color="#E5E5E5">through this like manually it's not easy</font>

635
00:29:55,700 --> 00:30:05,540
<font color="#CCCCCC">per se but it's doable and it's doable</font>

636
00:30:00,410 --> 00:30:07,700
<font color="#E5E5E5">over a weekend or two and it's it's a</font>

637
00:30:05,540 --> 00:30:13,070
<font color="#CCCCCC">process that involves mapping out the</font>

638
00:30:07,700 --> 00:30:15,290
pins on on a PCB<font color="#E5E5E5"> and so to back up</font><font color="#CCCCCC"> of</font>

639
00:30:13,070 --> 00:30:16,639
course we don't have<font color="#E5E5E5"> a datasheet</font><font color="#CCCCCC"> I think</font>

640
00:30:15,290 --> 00:30:18,920
it's a lot<font color="#CCCCCC"> easier if</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have like a</font>

641
00:30:16,640 --> 00:30:20,840
commodity chip where you can<font color="#E5E5E5"> just look</font>

642
00:30:18,920 --> 00:30:22,340
up<font color="#CCCCCC"> the datasheet and</font><font color="#E5E5E5"> see like where each</font>

643
00:30:20,840 --> 00:30:24,350
pin corresponds to but if you have a

644
00:30:22,340 --> 00:30:29,330
system was a<font color="#E5E5E5"> completely custom design</font>

645
00:30:24,350 --> 00:30:31,480
chip<font color="#E5E5E5"> you won't have that resource</font><font color="#CCCCCC"> so one</font>

646
00:30:29,330 --> 00:30:34,340
<font color="#E5E5E5">thing that you have to</font><font color="#CCCCCC"> do though is</font>

647
00:30:31,480 --> 00:30:36,250
what's called PCB D layering<font color="#E5E5E5"> and I think</font>

648
00:30:34,340 --> 00:30:39,139
there's been talks about in the past

649
00:30:36,250 --> 00:30:43,580
<font color="#E5E5E5">which I think I recommend you guys look</font>

650
00:30:39,140 --> 00:30:46,050
up but the the<font color="#E5E5E5"> the takeaway</font><font color="#CCCCCC"> is that it's</font>

651
00:30:43,580 --> 00:30:48,750
relatively<font color="#CCCCCC"> inexpensive and</font>

652
00:30:46,050 --> 00:30:52,500
<font color="#E5E5E5">one can do in their own home was the</font>

653
00:30:48,750 --> 00:30:56,640
right tool fortunately someone by the

654
00:30:52,500 --> 00:31:00,720
<font color="#E5E5E5">name of bite</font><font color="#CCCCCC"> ful uploaded full PCB scans</font>

655
00:30:56,640 --> 00:31:03,000
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Vita's board and that's fortunate</font>

656
00:31:00,720 --> 00:31:06,060
<font color="#E5E5E5">for</font><font color="#CCCCCC"> me because</font><font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> have to breathe</font>

657
00:31:03,000 --> 00:31:10,680
the<font color="#CCCCCC"> fibreglass particles when you start</font>

658
00:31:06,060 --> 00:31:14,580
removing the solder mask<font color="#E5E5E5"> so with the</font>

659
00:31:10,680 --> 00:31:17,010
solder mask<font color="#E5E5E5"> gone you you see the copper</font>

660
00:31:14,580 --> 00:31:20,100
layer corresponding to the the different

661
00:31:17,010 --> 00:31:22,590
pins here<font color="#CCCCCC"> and one thing I want</font><font color="#E5E5E5"> to point</font>

662
00:31:20,100 --> 00:31:24,870
<font color="#E5E5E5">out here</font><font color="#CCCCCC"> is you can see that some of the</font>

663
00:31:22,590 --> 00:31:27,169
pins<font color="#CCCCCC"> look like pins</font><font color="#E5E5E5"> and other ones look</font>

664
00:31:24,870 --> 00:31:32,570
<font color="#E5E5E5">like you know like they're part of a</font>

665
00:31:27,170 --> 00:31:38,570
<font color="#E5E5E5">sausage</font><font color="#CCCCCC"> or what</font><font color="#E5E5E5"> do you guys</font><font color="#CCCCCC"> call it here</font>

666
00:31:32,570 --> 00:31:42,659
<font color="#CCCCCC">anyways the the ones near the center is</font>

667
00:31:38,570 --> 00:31:44,700
more likely to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> power-related because</font>

668
00:31:42,660 --> 00:31:46,380
if you<font color="#CCCCCC"> think</font><font color="#E5E5E5"> about like designing a chip</font>

669
00:31:44,700 --> 00:31:47,730
right like you want to put<font color="#CCCCCC"> your power</font>

670
00:31:46,380 --> 00:31:52,770
sources near the center so they<font color="#E5E5E5"> can</font>

671
00:31:47,730 --> 00:31:55,280
dissipate<font color="#CCCCCC"> evenly and oh and it's</font><font color="#E5E5E5"> the</font>

672
00:31:52,770 --> 00:31:59,850
distance<font color="#E5E5E5"> to each component should be</font>

673
00:31:55,280 --> 00:32:02,220
relatively close<font color="#E5E5E5"> so what we want to do</font>

674
00:31:59,850 --> 00:32:05,280
is we want to take like<font color="#E5E5E5"> one random pin</font>

675
00:32:02,220 --> 00:32:07,080
<font color="#CCCCCC">and we want to see where</font><font color="#E5E5E5"> it is connected</font>

676
00:32:05,280 --> 00:32:09,420
like where what power source is

677
00:32:07,080 --> 00:32:12,090
<font color="#CCCCCC">connected to</font><font color="#E5E5E5"> and what other pins is</font>

678
00:32:09,420 --> 00:32:14,490
associated<font color="#CCCCCC"> with it and to do that we</font>

679
00:32:12,090 --> 00:32:16,439
just<font color="#E5E5E5"> you know we mark the pin so the</font>

680
00:32:14,490 --> 00:32:19,020
<font color="#E5E5E5">convention I'm gonna be using is I will</font>

681
00:32:16,440 --> 00:32:20,730
be marking one layer in red and then I

682
00:32:19,020 --> 00:32:23,310
will go down another layer and<font color="#CCCCCC"> then I</font>

683
00:32:20,730 --> 00:32:26,880
will<font color="#E5E5E5"> use orange to show a new marking on</font>

684
00:32:23,310 --> 00:32:30,750
that layer<font color="#E5E5E5"> so here you</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> a bunch of</font>

685
00:32:26,880 --> 00:32:33,750
these small dark<font color="#CCCCCC"> holes these are called</font>

686
00:32:30,750 --> 00:32:36,750
vias<font color="#E5E5E5"> they're used to connect</font><font color="#CCCCCC"> the metal</font>

687
00:32:33,750 --> 00:32:38,490
layers<font color="#E5E5E5"> the two metal layers together so</font>

688
00:32:36,750 --> 00:32:40,860
when you have a via that means there's

689
00:32:38,490 --> 00:32:43,290
an<font color="#E5E5E5"> electrical connection from one layer</font>

690
00:32:40,860 --> 00:32:47,310
<font color="#CCCCCC">to the other and for that specific</font>

691
00:32:43,290 --> 00:32:49,230
copper pad so we go<font color="#E5E5E5"> down one more</font><font color="#CCCCCC"> and</font>

692
00:32:47,310 --> 00:32:50,970
you see the you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> the vias on this</font>

693
00:32:49,230 --> 00:32:53,310
layer are a bit bigger than<font color="#CCCCCC"> the last one</font>

694
00:32:50,970 --> 00:32:57,120
and then<font color="#E5E5E5"> we can just keep</font><font color="#CCCCCC"> going down</font>

695
00:32:53,310 --> 00:32:59,590
<font color="#E5E5E5">until eventually we reach a copper</font>

696
00:32:57,120 --> 00:33:03,008
playing that this<font color="#CCCCCC"> via is connected</font>

697
00:32:59,590 --> 00:33:06,639
<font color="#E5E5E5">- and I'll put an outline</font><font color="#CCCCCC"> around it so</font>

698
00:33:03,009 --> 00:33:11,590
it's<font color="#E5E5E5"> more clear</font><font color="#CCCCCC"> so this is where the</font>

699
00:33:06,639 --> 00:33:15,100
source for that<font color="#E5E5E5"> power pin comes from and</font>

700
00:33:11,590 --> 00:33:18,459
<font color="#E5E5E5">I'm not going to show you like the</font>

701
00:33:15,100 --> 00:33:21,189
actual<font color="#CCCCCC"> I guess the actual power</font><font color="#E5E5E5"> the chip</font>

702
00:33:18,460 --> 00:33:23,730
<font color="#CCCCCC">that powers that plane</font><font color="#E5E5E5"> because it's off</font>

703
00:33:21,190 --> 00:33:27,700
this image<font color="#E5E5E5"> what's important here</font><font color="#CCCCCC"> is that</font>

704
00:33:23,730 --> 00:33:31,179
<font color="#E5E5E5">there's many of these other vias on this</font>

705
00:33:27,700 --> 00:33:33,039
plane<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I've highlighted in red so</font>

706
00:33:31,179 --> 00:33:35,679
all<font color="#CCCCCC"> of these</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> connected together on</font>

707
00:33:33,039 --> 00:33:39,369
this layer<font color="#CCCCCC"> now we can</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> backwards and</font>

708
00:33:35,679 --> 00:33:41,200
do the same thing<font color="#E5E5E5"> and basically</font><font color="#CCCCCC"> fine you</font>

709
00:33:39,369 --> 00:33:43,629
know where it's connected<font color="#CCCCCC"> each time and</font>

710
00:33:41,200 --> 00:33:48,249
highlight the copper that's associated

711
00:33:43,629 --> 00:33:50,529
<font color="#E5E5E5">with and then we get to the top and we</font>

712
00:33:48,249 --> 00:33:55,029
see that<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of these those sausages are</font>

713
00:33:50,529 --> 00:33:58,720
connected together<font color="#E5E5E5"> and this these are 35</font>

714
00:33:55,029 --> 00:34:03,100
<font color="#CCCCCC">pins that are</font><font color="#E5E5E5"> corresponds to one voltage</font>

715
00:33:58,720 --> 00:34:08,980
rail<font color="#E5E5E5"> and that means we only</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> 600</font>

716
00:34:03,100 --> 00:34:10,750
<font color="#CCCCCC">more to go but the good news 245 of them</font>

717
00:34:08,980 --> 00:34:12,909
are not connected and you can just see

718
00:34:10,750 --> 00:34:17,770
<font color="#CCCCCC">that by looking at like layer 1 to layer</font>

719
00:34:12,909 --> 00:34:20,710
2 there's like no connections<font color="#CCCCCC"> 175 of</font>

720
00:34:17,770 --> 00:34:22,810
them are ground which means on the first

721
00:34:20,710 --> 00:34:25,179
or second layer<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> just easily see</font>

722
00:34:22,810 --> 00:34:27,310
they connect to the<font color="#E5E5E5"> large copper pad</font>

723
00:34:25,179 --> 00:34:30,609
that like most other things<font color="#CCCCCC"> are</font>

724
00:34:27,310 --> 00:34:35,739
connected<font color="#E5E5E5"> to which so really there's</font>

725
00:34:30,609 --> 00:34:38,500
only 269 pins left it's it's not you

726
00:34:35,739 --> 00:34:41,469
<font color="#CCCCCC">know the the best</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> to be doing</font><font color="#E5E5E5"> on a</font>

727
00:34:38,500 --> 00:34:46,389
Friday<font color="#CCCCCC"> afternoon but</font><font color="#E5E5E5"> you know if you're</font>

728
00:34:41,469 --> 00:34:49,388
me what else do you<font color="#E5E5E5"> have right so this</font>

729
00:34:46,389 --> 00:34:51,550
<font color="#E5E5E5">is what the chip looks like fully mapped</font>

730
00:34:49,389 --> 00:34:54,210
<font color="#E5E5E5">out the the red ones are the different</font>

731
00:34:51,550 --> 00:34:56,109
voltage rails the different shades

732
00:34:54,210 --> 00:34:59,980
<font color="#E5E5E5">corresponds to the different voltage</font>

733
00:34:56,109 --> 00:35:02,650
rail<font color="#CCCCCC"> and the other colors are data pins</font>

734
00:34:59,980 --> 00:35:07,930
<font color="#E5E5E5">that</font><font color="#CCCCCC"> are not</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> relevant here I just</font>

735
00:35:02,650 --> 00:35:10,270
<font color="#CCCCCC">did it for extra credit so</font><font color="#E5E5E5"> we found nine</font>

736
00:35:07,930 --> 00:35:13,270
<font color="#E5E5E5">different voltage rails how do we know</font>

737
00:35:10,270 --> 00:35:17,230
<font color="#E5E5E5">which one's the right one</font><font color="#CCCCCC"> and to do</font>

738
00:35:13,270 --> 00:35:20,050
<font color="#E5E5E5">to find out we just basically try each</font>

739
00:35:17,230 --> 00:35:24,520
one<font color="#E5E5E5"> you know brute-forcing nine things</font>

740
00:35:20,050 --> 00:35:26,890
isn't<font color="#E5E5E5"> that bad</font><font color="#CCCCCC"> we write a counter that</font>

741
00:35:24,520 --> 00:35:30,610
<font color="#CCCCCC">increments like five different registers</font>

742
00:35:26,890 --> 00:35:33,520
and then we just you know<font color="#E5E5E5"> hook it up to</font>

743
00:35:30,610 --> 00:35:37,410
the computer<font color="#E5E5E5"> and we just try</font>

744
00:35:33,520 --> 00:35:40,960
voltage glitching<font color="#E5E5E5"> each one</font><font color="#CCCCCC"> until we see</font>

745
00:35:37,410 --> 00:35:43,149
one<font color="#CCCCCC"> of these counters change</font><font color="#E5E5E5"> so why does</font>

746
00:35:40,960 --> 00:35:47,170
that<font color="#E5E5E5"> work well remember when we create a</font>

747
00:35:43,150 --> 00:35:49,990
voltage glitch<font color="#E5E5E5"> it effectively you</font><font color="#CCCCCC"> know</font>

748
00:35:47,170 --> 00:35:52,900
creates a mistake in some<font color="#E5E5E5"> computation</font><font color="#CCCCCC"> so</font>

749
00:35:49,990 --> 00:35:55,509
here<font color="#E5E5E5"> because like the most because</font><font color="#CCCCCC"> of</font>

750
00:35:52,900 --> 00:35:57,340
how tight<font color="#CCCCCC"> that loop is most of the work</font>

751
00:35:55,510 --> 00:35:59,230
the<font color="#CCCCCC"> processors doing is going</font><font color="#E5E5E5"> to be</font>

752
00:35:57,340 --> 00:36:02,710
increment or incrementing or

753
00:35:59,230 --> 00:36:04,570
decrementing these counters<font color="#E5E5E5"> and when you</font>

754
00:36:02,710 --> 00:36:07,930
know when the glitch hits it will

755
00:36:04,570 --> 00:36:11,020
probably like hit one of<font color="#E5E5E5"> the ALU</font>

756
00:36:07,930 --> 00:36:17,890
operations which will<font color="#E5E5E5"> cause a mistake</font>

757
00:36:11,020 --> 00:36:20,640
<font color="#E5E5E5">like this so you know we have this tool</font>

758
00:36:17,890 --> 00:36:23,740
this tool that<font color="#CCCCCC"> we found</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is a</font>

759
00:36:20,640 --> 00:36:28,600
voltage glitch<font color="#E5E5E5"> we found the right power</font>

760
00:36:23,740 --> 00:36:33,069
rail we can arbitrarily<font color="#E5E5E5"> create mistakes</font>

761
00:36:28,600 --> 00:36:37,120
<font color="#E5E5E5">in the computation but what can we do is</font>

762
00:36:33,070 --> 00:36:41,680
it<font color="#E5E5E5"> so from you know previous talks and</font>

763
00:36:37,120 --> 00:36:45,279
from other resources<font color="#CCCCCC"> the clear way to go</font>

764
00:36:41,680 --> 00:36:47,980
is to<font color="#E5E5E5"> bypass signature checks however on</font>

765
00:36:45,280 --> 00:36:50,530
the<font color="#E5E5E5"> Vita</font><font color="#CCCCCC"> that's a bit hard for</font><font color="#E5E5E5"> us to do</font>

766
00:36:47,980 --> 00:36:52,750
and some<font color="#E5E5E5"> of the reasons include we don't</font>

767
00:36:50,530 --> 00:36:54,820
really have examples of what what the

768
00:36:52,750 --> 00:36:55,930
boot loaders look like decrypt is so we

769
00:36:54,820 --> 00:36:57,970
don't<font color="#CCCCCC"> really even know where this</font>

770
00:36:55,930 --> 00:36:59,620
signature is<font color="#E5E5E5"> and we don't know if</font>

771
00:36:57,970 --> 00:37:01,720
there's<font color="#E5E5E5"> like other kinds of checks like</font>

772
00:36:59,620 --> 00:37:04,660
and like<font color="#E5E5E5"> sha hashing or anything like</font>

773
00:37:01,720 --> 00:37:06,910
<font color="#E5E5E5">that</font><font color="#CCCCCC"> so it was it's</font><font color="#E5E5E5"> just hard for us to</font>

774
00:37:04,660 --> 00:37:08,710
tell if our glitch worked and it

775
00:37:06,910 --> 00:37:10,810
<font color="#E5E5E5">bypassed the signature but something</font>

776
00:37:08,710 --> 00:37:14,740
else failed<font color="#E5E5E5"> or if the glitches didn't</font>

777
00:37:10,810 --> 00:37:17,680
work instead we looked at something

778
00:37:14,740 --> 00:37:20,379
<font color="#E5E5E5">that's that's easier to understand which</font>

779
00:37:17,680 --> 00:37:23,500
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the boot partition headers and the</font>

780
00:37:20,380 --> 00:37:26,110
<font color="#CCCCCC">boot partition</font><font color="#E5E5E5"> contains the boot loaders</font>

781
00:37:23,500 --> 00:37:29,170
it's a special partition format that's

782
00:37:26,110 --> 00:37:32,440
not standard<font color="#E5E5E5"> however it is easy to</font>

783
00:37:29,170 --> 00:37:35,860
understand<font color="#CCCCCC"> it's unencrypted unsigned</font><font color="#E5E5E5"> and</font>

784
00:37:32,440 --> 00:37:37,480
the fields<font color="#CCCCCC"> you know you are not</font><font color="#E5E5E5"> that</font>

785
00:37:35,860 --> 00:37:41,770
many<font color="#E5E5E5"> and you can kind of guess what they</font>

786
00:37:37,480 --> 00:37:44,620
mean we'll<font color="#CCCCCC"> just focus</font><font color="#E5E5E5"> on looking at the</font>

787
00:37:41,770 --> 00:37:50,050
header size field because spoilers it

788
00:37:44,620 --> 00:37:54,460
worked and the size<font color="#E5E5E5"> field is checked to</font>

789
00:37:50,050 --> 00:37:58,810
be less than<font color="#E5E5E5"> zero</font><font color="#CCCCCC"> xde blocks we found</font>

790
00:37:54,460 --> 00:38:02,950
this out<font color="#E5E5E5"> through basically</font><font color="#CCCCCC"> tron error</font><font color="#E5E5E5"> so</font>

791
00:37:58,810 --> 00:38:05,140
we<font color="#E5E5E5"> tried writing you know 0xff and it</font>

792
00:38:02,950 --> 00:38:07,870
didn't boo<font color="#E5E5E5"> it up then we tried writing</font>

793
00:38:05,140 --> 00:38:10,750
you know 0<font color="#CCCCCC"> x 4 0</font><font color="#E5E5E5"> and it worked then we</font>

794
00:38:07,870 --> 00:38:12,279
try writing you know<font color="#E5E5E5"> 0 x e0 and it</font>

795
00:38:10,750 --> 00:38:15,220
didn't<font color="#CCCCCC"> work and</font><font color="#E5E5E5"> then through this like</font>

796
00:38:12,280 --> 00:38:17,530
kind<font color="#E5E5E5"> of a like manual binary search kind</font>

797
00:38:15,220 --> 00:38:22,680
of thing we found that this was<font color="#CCCCCC"> the</font>

798
00:38:17,530 --> 00:38:22,680
largest<font color="#E5E5E5"> value before it doesn't boot up</font>

799
00:38:23,640 --> 00:38:31,240
if you know if the check<font color="#E5E5E5"> fails it halts</font>

800
00:38:27,100 --> 00:38:35,020
<font color="#E5E5E5">and if it passes then we can see that</font>

801
00:38:31,240 --> 00:38:39,250
<font color="#E5E5E5">the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> actual boot loaders are read</font>

802
00:38:35,020 --> 00:38:42,190
from<font color="#CCCCCC"> the storage</font><font color="#E5E5E5"> so what happens if we</font>

803
00:38:39,250 --> 00:38:45,520
<font color="#E5E5E5">managed to bypass</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> size check well</font>

804
00:38:42,190 --> 00:38:48,670
the theory<font color="#E5E5E5"> is that it will overflow some</font>

805
00:38:45,520 --> 00:38:51,070
buffer because you know why will you why

806
00:38:48,670 --> 00:38:57,880
do you<font color="#E5E5E5"> check the size if you don't have</font>

807
00:38:51,070 --> 00:39:01,930
a static buffer<font color="#E5E5E5"> right so the plan</font><font color="#CCCCCC"> is we</font>

808
00:38:57,880 --> 00:39:05,020
need to sniff the the storage controller

809
00:39:01,930 --> 00:39:08,919
traffic<font color="#E5E5E5"> and that's you</font><font color="#CCCCCC"> know just some</font>

810
00:39:05,020 --> 00:39:10,960
external<font color="#E5E5E5"> pins</font><font color="#CCCCCC"> we have a MOSFET</font><font color="#E5E5E5"> which is</font>

811
00:39:08,920 --> 00:39:14,620
basically just<font color="#CCCCCC"> a electrically controlled</font>

812
00:39:10,960 --> 00:39:19,930
switch that will do the shorting that we

813
00:39:14,620 --> 00:39:22,299
discussed earlier<font color="#CCCCCC"> and for we need a</font><font color="#E5E5E5"> fpga</font>

814
00:39:19,930 --> 00:39:25,529
to control that MOSFET because<font color="#E5E5E5"> we need</font>

815
00:39:22,300 --> 00:39:30,160
very precise<font color="#E5E5E5"> like nanosecond level</font>

816
00:39:25,530 --> 00:39:33,730
<font color="#CCCCCC">timing and the reason why is because so</font>

817
00:39:30,160 --> 00:39:36,250
this is you know the the<font color="#E5E5E5"> process to find</font>

818
00:39:33,730 --> 00:39:39,520
the<font color="#CCCCCC"> the right parameters</font><font color="#E5E5E5"> of glitch with</font>

819
00:39:36,250 --> 00:39:39,880
the the important thing<font color="#CCCCCC"> here is you know</font>

820
00:39:39,520 --> 00:39:42,009
we

821
00:39:39,880 --> 00:39:44,830
until that boot partition<font color="#E5E5E5"> headers</font><font color="#CCCCCC"> read</font>

822
00:39:42,010 --> 00:39:47,200
and we know that<font color="#E5E5E5"> at some</font><font color="#CCCCCC"> time some short</font>

823
00:39:44,830 --> 00:39:50,319
amount<font color="#CCCCCC"> of time</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> the header is read</font>

824
00:39:47,200 --> 00:39:51,580
it will do<font color="#CCCCCC"> that size check</font><font color="#E5E5E5"> but we don't</font>

825
00:39:50,320 --> 00:39:54,850
know when that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> so that's what</font>

826
00:39:51,580 --> 00:39:57,549
parameter n represents is the the offset

827
00:39:54,850 --> 00:40:02,140
<font color="#E5E5E5">from reading the packet</font><font color="#CCCCCC"> to when the</font><font color="#E5E5E5"> size</font>

828
00:39:57,550 --> 00:40:05,830
check is done then<font color="#E5E5E5"> we do the glitch and</font>

829
00:40:02,140 --> 00:40:10,049
we you know<font color="#E5E5E5"> hold the power off we we</font>

830
00:40:05,830 --> 00:40:13,690
short it for a<font color="#CCCCCC"> M amount of time and</font>

831
00:40:10,050 --> 00:40:17,710
basically<font color="#E5E5E5"> the</font><font color="#CCCCCC"> reason why we vary</font><font color="#E5E5E5"> M is</font>

832
00:40:13,690 --> 00:40:19,450
because remember when when we're

833
00:40:17,710 --> 00:40:22,270
glitching we don't really<font color="#E5E5E5"> know what</font>

834
00:40:19,450 --> 00:40:25,660
results were causing so the longer<font color="#E5E5E5"> you</font>

835
00:40:22,270 --> 00:40:29,020
hold a glitch the the the results vary

836
00:40:25,660 --> 00:40:32,049
wildly<font color="#E5E5E5"> and if you hold it for too long</font>

837
00:40:29,020 --> 00:40:34,780
<font color="#E5E5E5">then the system shuts down so</font><font color="#CCCCCC"> we</font>

838
00:40:32,050 --> 00:40:38,020
basically<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> just have a script</font>

839
00:40:34,780 --> 00:40:42,960
that looks at every possible<font color="#E5E5E5"> N and M</font>

840
00:40:38,020 --> 00:40:46,270
value and you know try different<font color="#E5E5E5"> ones</font><font color="#CCCCCC"> so</font>

841
00:40:42,960 --> 00:40:50,440
<font color="#CCCCCC">how do</font><font color="#E5E5E5"> we actually</font><font color="#CCCCCC"> implement this</font><font color="#E5E5E5"> um so</font>

842
00:40:46,270 --> 00:40:54,190
I use the chip<font color="#CCCCCC"> whisperer which is a open</font>

843
00:40:50,440 --> 00:40:56,410
<font color="#E5E5E5">source hardware hacking platform and one</font>

844
00:40:54,190 --> 00:40:58,450
of the reasons why it's so<font color="#E5E5E5"> nice is</font>

845
00:40:56,410 --> 00:41:01,359
because<font color="#CCCCCC"> you can use Python to</font><font color="#E5E5E5"> the script</font>

846
00:40:58,450 --> 00:41:05,620
<font color="#CCCCCC">all that uh process that I talked about</font>

847
00:41:01,360 --> 00:41:08,680
earlier<font color="#E5E5E5"> has an FPGA and</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> MOSFET which</font>

848
00:41:05,620 --> 00:41:12,279
is the only<font color="#E5E5E5"> thing you really</font><font color="#CCCCCC"> need and we</font>

849
00:41:08,680 --> 00:41:17,529
added a custom trigger for<font color="#E5E5E5"> monitoring</font>

850
00:41:12,280 --> 00:41:21,400
<font color="#E5E5E5">the storage traffic also we had a we</font>

851
00:41:17,530 --> 00:41:24,160
designed a custom<font color="#E5E5E5"> board and the the only</font>

852
00:41:21,400 --> 00:41:26,530
<font color="#CCCCCC">reason why is really to manage all the</font>

853
00:41:24,160 --> 00:41:29,500
wires<font color="#E5E5E5"> because you know we there's all</font>

854
00:41:26,530 --> 00:41:31,780
the wires to the the different pins for

855
00:41:29,500 --> 00:41:35,020
the storage controller<font color="#E5E5E5"> and then there's</font>

856
00:41:31,780 --> 00:41:36,790
a<font color="#E5E5E5"> couple of GPIO s for like status</font>

857
00:41:35,020 --> 00:41:40,500
indicator and stuff<font color="#E5E5E5"> so it's easier to</font>

858
00:41:36,790 --> 00:41:43,800
<font color="#E5E5E5">just put them all</font><font color="#CCCCCC"> on a board</font><font color="#E5E5E5"> and we also</font>

859
00:41:40,500 --> 00:41:49,400
use this board<font color="#CCCCCC"> to dump and flash the</font>

860
00:41:43,800 --> 00:41:51,470
<font color="#CCCCCC">storage to you know put our payload on</font>

861
00:41:49,400 --> 00:41:54,380
and it connects directly to<font color="#E5E5E5"> the chip</font>

862
00:41:51,470 --> 00:41:57,790
whisperer here's what it looks like

863
00:41:54,380 --> 00:42:02,270
hooked up<font color="#E5E5E5"> I made very liberal use of</font>

864
00:41:57,790 --> 00:42:04,370
transparent tape<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I one thing I want</font>

865
00:42:02,270 --> 00:42:07,100
to<font color="#E5E5E5"> point out here</font><font color="#CCCCCC"> that haven't mentioned</font>

866
00:42:04,370 --> 00:42:10,880
before is<font color="#CCCCCC"> that we actually</font><font color="#E5E5E5"> connected</font>

867
00:42:07,100 --> 00:42:13,790
we removed the<font color="#CCCCCC"> the clock of this of the</font>

868
00:42:10,880 --> 00:42:15,950
<font color="#CCCCCC">Vida and we connected it</font><font color="#E5E5E5"> directly to the</font>

869
00:42:13,790 --> 00:42:16,610
chip<font color="#E5E5E5"> whisperer and the reason why is</font>

870
00:42:15,950 --> 00:42:18,980
that

871
00:42:16,610 --> 00:42:21,380
we<font color="#CCCCCC"> found that if you synchronize the two</font>

872
00:42:18,980 --> 00:42:23,450
clocks the<font color="#E5E5E5"> devices clock and the chip</font>

873
00:42:21,380 --> 00:42:26,990
<font color="#CCCCCC">wizard clock then when we are searching</font>

874
00:42:23,450 --> 00:42:30,950
<font color="#E5E5E5">for those</font><font color="#CCCCCC"> m and n parameters the there's</font>

875
00:42:26,990 --> 00:42:35,479
less drift<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it makes the results more</font>

876
00:42:30,950 --> 00:42:38,509
<font color="#CCCCCC">repeatable so the the fuss so this is</font>

877
00:42:35,480 --> 00:42:44,570
what it looks up hooked up<font color="#E5E5E5"> once again I</font>

878
00:42:38,510 --> 00:42:47,450
love tape<font color="#E5E5E5"> and so the the final the final</font>

879
00:42:44,570 --> 00:42:51,980
<font color="#E5E5E5">piece that put that we had to put</font>

880
00:42:47,450 --> 00:42:55,189
<font color="#E5E5E5">together was actually help from someone</font>

881
00:42:51,980 --> 00:42:58,310
in the<font color="#E5E5E5"> ex switch hacking community</font><font color="#CCCCCC"> who</font>

882
00:42:55,190 --> 00:43:00,560
told us to<font color="#E5E5E5"> slow down the clock even more</font>

883
00:42:58,310 --> 00:43:02,480
than what we<font color="#CCCCCC"> already did</font><font color="#E5E5E5"> and it turns</font>

884
00:43:00,560 --> 00:43:05,810
out you<font color="#E5E5E5"> know if you're running a clock</font>

885
00:43:02,480 --> 00:43:08,390
too fast<font color="#E5E5E5"> it creates too much noise</font><font color="#CCCCCC"> and</font>

886
00:43:05,810 --> 00:43:11,750
<font color="#E5E5E5">that could disturb the glitching process</font>

887
00:43:08,390 --> 00:43:14,750
so you know take<font color="#CCCCCC"> away if it's not</font>

888
00:43:11,750 --> 00:43:17,060
<font color="#CCCCCC">working try slowing</font><font color="#E5E5E5"> down the clock so</font>

889
00:43:14,750 --> 00:43:20,570
ran this all night<font color="#E5E5E5"> and woke up the</font><font color="#CCCCCC"> next</font>

890
00:43:17,060 --> 00:43:24,880
morning<font color="#E5E5E5"> looked at the logs and we found</font>

891
00:43:20,570 --> 00:43:27,940
a vulnerability<font color="#E5E5E5"> and this is the boot ROM</font>

892
00:43:24,880 --> 00:43:27,940
sha-256 hash

893
00:43:36,510 --> 00:43:45,580
so state of the Vita<font color="#CCCCCC"> in 2018 we managed</font>

894
00:43:42,520 --> 00:43:47,980
<font color="#E5E5E5">to dump every part of it</font>

895
00:43:45,580 --> 00:43:49,990
the bootrom unfortunately is not too

896
00:43:47,980 --> 00:43:54,310
interesting they don't have any keys in

897
00:43:49,990 --> 00:43:57,040
<font color="#E5E5E5">it they don't have anything that's the</font>

898
00:43:54,310 --> 00:43:59,500
attack surface is<font color="#E5E5E5"> just so tiny</font><font color="#CCCCCC"> they</font>

899
00:43:57,040 --> 00:44:05,759
don't have like a USB<font color="#E5E5E5"> stack in it</font>

900
00:43:59,500 --> 00:44:09,130
because that's<font color="#E5E5E5"> crazy right and you know</font>

901
00:44:05,760 --> 00:44:13,270
<font color="#E5E5E5">we've managed to dump all the code we</font>

902
00:44:09,130 --> 00:44:16,560
can find on the system so what have<font color="#CCCCCC"> we</font>

903
00:44:13,270 --> 00:44:19,290
learned<font color="#E5E5E5"> so let me get a little</font>

904
00:44:16,560 --> 00:44:23,440
<font color="#CCCCCC">philosophical for a moment sony</font><font color="#E5E5E5"> has a</font>

905
00:44:19,290 --> 00:44:26,220
history of crypto failures<font color="#CCCCCC"> and i think</font>

906
00:44:23,440 --> 00:44:30,310
most of<font color="#E5E5E5"> you here know about all of these</font>

907
00:44:26,220 --> 00:44:32,859
<font color="#E5E5E5">but if not you know history lesson</font>

908
00:44:30,310 --> 00:44:37,380
PSP<font color="#E5E5E5"> didn't check code signing</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

909
00:44:32,860 --> 00:44:42,160
<font color="#E5E5E5">beginning ps3 the infamous</font><font color="#CCCCCC"> fel</font><font color="#E5E5E5"> overflow</font>

910
00:44:37,380 --> 00:44:44,860
ECDSA factoring and recently<font color="#E5E5E5"> we</font><font color="#CCCCCC"> found on</font>

911
00:44:42,160 --> 00:44:46,990
the playstation classic they shipped<font color="#E5E5E5"> the</font>

912
00:44:44,860 --> 00:44:51,850
private keys for the firmware<font color="#E5E5E5"> updates on</font>

913
00:44:46,990 --> 00:44:58,089
every single<font color="#E5E5E5"> device but the Vita is</font>

914
00:44:51,850 --> 00:45:00,790
actually a very nice<font color="#E5E5E5"> you know work in</font>

915
00:44:58,090 --> 00:45:03,820
terms<font color="#E5E5E5"> of security unfortunately you know</font>

916
00:45:00,790 --> 00:45:09,390
<font color="#E5E5E5">can speak to amount of games or market</font>

917
00:45:03,820 --> 00:45:12,880
share<font color="#E5E5E5"> the key reasons includes the this</font>

918
00:45:09,390 --> 00:45:15,759
the boot surf the the secure boot is

919
00:45:12,880 --> 00:45:19,060
pretty simple<font color="#CCCCCC"> all there you know</font>

920
00:45:15,760 --> 00:45:23,040
cryptographic stuff is relatively<font color="#CCCCCC"> simple</font>

921
00:45:19,060 --> 00:45:25,500
compared to you<font color="#CCCCCC"> know other Sony devices</font>

922
00:45:23,040 --> 00:45:28,240
<font color="#E5E5E5">we didn't really touch on the ARM</font>

923
00:45:25,500 --> 00:45:31,030
processor at all the main one<font color="#CCCCCC"> that your</font>

924
00:45:28,240 --> 00:45:33,729
games run on but they do implement<font color="#CCCCCC"> most</font>

925
00:45:31,030 --> 00:45:37,540
modern exploit mitigation and this was

926
00:45:33,730 --> 00:45:41,860
back<font color="#CCCCCC"> in 2012 which we're you know a</font><font color="#E5E5E5"> lot</font>

927
00:45:37,540 --> 00:45:44,020
of<font color="#E5E5E5"> stuff like</font><font color="#CCCCCC"> kasl are or kernel random</font>

928
00:45:41,860 --> 00:45:46,210
address space<font color="#E5E5E5"> realization is in standard</font>

929
00:45:44,020 --> 00:45:48,310
<font color="#E5E5E5">they implemented</font><font color="#CCCCCC"> that you know way back</font>

930
00:45:46,210 --> 00:45:50,410
in 2012

931
00:45:48,310 --> 00:45:53,080
and they you know<font color="#E5E5E5"> instead of trusting</font>

932
00:45:50,410 --> 00:45:59,520
trust<font color="#E5E5E5"> stone they</font><font color="#CCCCCC"> have a dedicated</font><font color="#E5E5E5"> crypto</font>

933
00:45:53,080 --> 00:45:59,520
processor but not everyone is<font color="#CCCCCC"> perfect</font>

934
00:45:59,790 --> 00:46:06,279
there is a slight issue is how they

935
00:46:03,460 --> 00:46:10,420
chose their bootloader description<font color="#E5E5E5"> keys</font>

936
00:46:06,280 --> 00:46:14,740
<font color="#CCCCCC">and to be clear</font><font color="#E5E5E5"> this key protects every</font>

937
00:46:10,420 --> 00:46:17,800
other key in the system now<font color="#CCCCCC"> after we</font>

938
00:46:14,740 --> 00:46:23,770
<font color="#CCCCCC">dumped the</font><font color="#E5E5E5"> boot ROM naturally the next</font>

939
00:46:17,800 --> 00:46:29,500
<font color="#CCCCCC">thing we did</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> find this key and it is</font>

940
00:46:23,770 --> 00:46:31,690
a<font color="#E5E5E5"> single</font><font color="#CCCCCC"> byte</font><font color="#E5E5E5"> repeating but here's</font>

941
00:46:29,500 --> 00:46:34,480
here's<font color="#E5E5E5"> a little like let me pull back</font>

942
00:46:31,690 --> 00:46:36,340
the cartoons a little<font color="#E5E5E5"> before we</font><font color="#CCCCCC"> dump</font><font color="#E5E5E5"> the</font>

943
00:46:34,480 --> 00:46:38,470
<font color="#CCCCCC">viewer</font><font color="#E5E5E5"> I'm a couple of months before our</font>

944
00:46:36,340 --> 00:46:41,740
friend<font color="#CCCCCC"> XYZ</font>

945
00:46:38,470 --> 00:46:45,069
now you can decide<font color="#CCCCCC"> if he has</font><font color="#E5E5E5"> 9 IQ or 9</font>

946
00:46:41,740 --> 00:46:51,520
million IQ exercise<font color="#CCCCCC"> I</font><font color="#E5E5E5"> decided</font><font color="#CCCCCC"> to brute</font>

947
00:46:45,070 --> 00:46:57,100
<font color="#CCCCCC">force the aes-128 key</font><font color="#E5E5E5"> and for legal</font>

948
00:46:51,520 --> 00:47:00,160
<font color="#CCCCCC">reasons we won't</font><font color="#E5E5E5"> share with you but</font>

949
00:46:57,100 --> 00:47:03,690
let's<font color="#E5E5E5"> just show you an unrelated picture</font>

950
00:47:00,160 --> 00:47:03,690
I found on Amazon

951
00:47:15,970 --> 00:47:24,500
so lots of<font color="#E5E5E5"> people to think these</font><font color="#CCCCCC"> are</font>

952
00:47:20,119 --> 00:47:28,309
<font color="#E5E5E5">just a few</font><font color="#CCCCCC"> I wanted a special shout</font><font color="#E5E5E5"> out</font>

953
00:47:24,500 --> 00:47:30,230
to Murphy who managed to get Linux

954
00:47:28,309 --> 00:47:33,680
running<font color="#E5E5E5"> on the Vita last week which was</font>

955
00:47:30,230 --> 00:47:36,289
<font color="#E5E5E5">very impressive</font><font color="#CCCCCC"> and now they're trying</font>

956
00:47:33,680 --> 00:47:38,089
<font color="#CCCCCC">to like write all the drivers for it so</font>

957
00:47:36,289 --> 00:47:41,240
if any of<font color="#CCCCCC"> you are interested in</font><font color="#E5E5E5"> that</font>

958
00:47:38,089 --> 00:47:44,619
when<font color="#CCCCCC"> wanna</font><font color="#E5E5E5"> help</font><font color="#CCCCCC"> I can put you in touch</font>

959
00:47:41,240 --> 00:47:50,689
<font color="#E5E5E5">with with him if you check us out at the</font>

960
00:47:44,619 --> 00:47:53,359
Linton<font color="#CCCCCC"> bros assembly later on everything</font>

961
00:47:50,690 --> 00:47:56,420
I talked about<font color="#E5E5E5"> will be posted on github</font>

962
00:47:53,359 --> 00:47:59,450
<font color="#CCCCCC">if you want to know more about Vita</font>

963
00:47:56,420 --> 00:48:02,269
hacking and reverse engineering<font color="#E5E5E5"> the hint</font>

964
00:47:59,450 --> 00:48:05,868
<font color="#CCCCCC">kaku wiki is a good</font><font color="#E5E5E5"> resource and if you</font>

965
00:48:02,269 --> 00:48:10,220
want to write<font color="#E5E5E5"> Vita</font><font color="#CCCCCC"> homebrew the Vita</font><font color="#E5E5E5"> SDK</font>

966
00:48:05,869 --> 00:48:14,150
<font color="#E5E5E5">which we helped with early on is a good</font>

967
00:48:10,220 --> 00:48:15,930
resource<font color="#E5E5E5"> was that I would like to</font><font color="#CCCCCC"> open</font>

968
00:48:14,150 --> 00:48:22,310
<font color="#E5E5E5">up the questions</font>

969
00:48:15,930 --> 00:48:23,790
[Applause]

970
00:48:22,310 --> 00:48:28,450
[Music]

971
00:48:23,790 --> 00:48:30,340
<font color="#E5E5E5">hey great thanks a lot</font><font color="#CCCCCC"> great to</font><font color="#E5E5E5"> see how</font>

972
00:48:28,450 --> 00:48:33,640
much<font color="#E5E5E5"> fun you guys had hacking the thing</font>

973
00:48:30,340 --> 00:48:35,470
<font color="#E5E5E5">really</font><font color="#CCCCCC"> cool we have five to seven</font>

974
00:48:33,640 --> 00:48:38,680
<font color="#CCCCCC">minutes</font><font color="#E5E5E5"> for Q&A so</font><font color="#CCCCCC"> please line up at the</font>

975
00:48:35,470 --> 00:48:43,419
microphones<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we have some</font><font color="#CCCCCC"> questions</font>

976
00:48:38,680 --> 00:48:44,020
probably so so I think microphone<font color="#E5E5E5"> number</font>

977
00:48:43,420 --> 00:48:51,190
five

978
00:48:44,020 --> 00:48:53,440
I see somebody is the singer yeah<font color="#E5E5E5"> so the</font>

979
00:48:51,190 --> 00:48:58,480
<font color="#E5E5E5">topple I asked her would key for the</font>

980
00:48:53,440 --> 00:49:02,730
<font color="#CCCCCC">boot loot or</font><font color="#E5E5E5"> is this a</font><font color="#CCCCCC"> joke</font><font color="#E5E5E5"> since it's</font>

981
00:48:58,480 --> 00:49:05,980
totally not effective at all in my mean

982
00:49:02,730 --> 00:49:08,590
yeah this was interesting<font color="#CCCCCC"> so at first</font>

983
00:49:05,980 --> 00:49:11,320
<font color="#E5E5E5">when we found this we thought for</font><font color="#CCCCCC"> a long</font>

984
00:49:08,590 --> 00:49:14,290
time that we we<font color="#CCCCCC"> actually so we</font><font color="#E5E5E5"> thought</font>

985
00:49:11,320 --> 00:49:15,790
we accidentally had a debug build so<font color="#E5E5E5"> we</font>

986
00:49:14,290 --> 00:49:17,980
thought we they accidentally shipped a

987
00:49:15,790 --> 00:49:20,259
debug build<font color="#E5E5E5"> or something and that's</font>

988
00:49:17,980 --> 00:49:23,290
where the key was<font color="#E5E5E5"> from but turns out</font>

989
00:49:20,260 --> 00:49:26,770
it's it's it is the<font color="#E5E5E5"> bootloader that is</font>

990
00:49:23,290 --> 00:49:30,310
used on retail devices<font color="#CCCCCC"> I think the</font>

991
00:49:26,770 --> 00:49:34,800
reason why it slipped<font color="#E5E5E5"> like out of checks</font>

992
00:49:30,310 --> 00:49:38,710
is because they<font color="#E5E5E5"> only ever use this key</font>

993
00:49:34,800 --> 00:49:41,590
<font color="#CCCCCC">encrypted and like you know</font><font color="#E5E5E5"> get the they</font>

994
00:49:38,710 --> 00:49:43,450
have a crypto processor so in addition

995
00:49:41,590 --> 00:49:45,640
<font color="#E5E5E5">to food there's a separate crypto</font>

996
00:49:43,450 --> 00:49:49,600
processor that only food can communicate

997
00:49:45,640 --> 00:49:52,960
with and it's the<font color="#E5E5E5"> one that that does all</font>

998
00:49:49,600 --> 00:49:56,620
the encryption<font color="#E5E5E5"> so this key is never</font>

999
00:49:52,960 --> 00:49:59,740
found in<font color="#E5E5E5"> any like text</font><font color="#CCCCCC"> pages or anything</font>

1000
00:49:56,620 --> 00:50:03,580
<font color="#E5E5E5">or any code</font><font color="#CCCCCC"> it's only available in this</font>

1001
00:49:59,740 --> 00:50:07,479
secret<font color="#CCCCCC"> hardware crypto processor so</font>

1002
00:50:03,580 --> 00:50:09,850
maybe you know someone<font color="#E5E5E5"> accidentally left</font>

1003
00:50:07,480 --> 00:50:13,170
the wrong key<font color="#CCCCCC"> and or whatever and nobody</font>

1004
00:50:09,850 --> 00:50:15,190
found<font color="#E5E5E5"> out because it was hidden so well</font>

1005
00:50:13,170 --> 00:50:17,950
great we<font color="#E5E5E5"> have a question</font><font color="#CCCCCC"> from the</font>

1006
00:50:15,190 --> 00:50:21,400
<font color="#CCCCCC">internet signal angel please thank you</font>

1007
00:50:17,950 --> 00:50:28,629
can you findings be reused in some ways

1008
00:50:21,400 --> 00:50:31,180
<font color="#E5E5E5">for the ps4 probably no no it's I think</font>

1009
00:50:28,630 --> 00:50:34,060
<font color="#CCCCCC">the</font><font color="#E5E5E5"> design here</font><font color="#CCCCCC"> is mostly exclusive to</font>

1010
00:50:31,180 --> 00:50:36,558
the PlayStation<font color="#CCCCCC"> View here it's I think</font>

1011
00:50:34,060 --> 00:50:38,930
<font color="#CCCCCC">the ps4 has some sort</font><font color="#E5E5E5"> of</font>

1012
00:50:36,559 --> 00:50:44,209
<font color="#CCCCCC">a similar Sakura</font><font color="#E5E5E5"> coprocessor but it's</font>

1013
00:50:38,930 --> 00:50:46,489
it's<font color="#E5E5E5"> not the same</font><font color="#CCCCCC"> for doesn't implement</font>

1014
00:50:44,209 --> 00:50:51,078
<font color="#CCCCCC">as many security mitigations as Aveda</font>

1015
00:50:46,489 --> 00:50:53,089
<font color="#E5E5E5">does great microphone one please for</font>

1016
00:50:51,079 --> 00:50:55,279
<font color="#E5E5E5">your work and for your talk you talked</font>

1017
00:50:53,089 --> 00:50:57,109
<font color="#CCCCCC">about do</font><font color="#E5E5E5"> you control the</font><font color="#CCCCCC"> clock on the</font>

1018
00:50:55,279 --> 00:51:00,619
process of you touch it<font color="#CCCCCC"> Prospero</font><font color="#E5E5E5"> that</font>

1019
00:50:57,109 --> 00:51:02,119
you also try<font color="#CCCCCC"> to clock legit sorry what</font>

1020
00:51:00,619 --> 00:51:03,049
was<font color="#CCCCCC"> the last part yeah did you try to</font>

1021
00:51:02,119 --> 00:51:08,089
clock legit

1022
00:51:03,049 --> 00:51:09,469
so I guess<font color="#CCCCCC"> okay I did I</font><font color="#E5E5E5"> didn't want to</font>

1023
00:51:08,089 --> 00:51:11,749
<font color="#E5E5E5">talk into this because it's a bit</font>

1024
00:51:09,469 --> 00:51:15,049
technical but<font color="#E5E5E5"> a clock glitching actually</font>

1025
00:51:11,749 --> 00:51:16,968
doesn't<font color="#CCCCCC"> work on most modern processors</font>

1026
00:51:15,049 --> 00:51:19,788
<font color="#E5E5E5">because they use something</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> a</font>

1027
00:51:16,969 --> 00:51:22,459
phase lock loop or PLL which derives the

1028
00:51:19,789 --> 00:51:24,979
internal clocks<font color="#E5E5E5"> and when you glitch the</font>

1029
00:51:22,459 --> 00:51:28,249
external clock it will be filtered<font color="#CCCCCC"> out</font>

1030
00:51:24,979 --> 00:51:30,410
<font color="#E5E5E5">by the PLL so most modern devices have a</font>

1031
00:51:28,249 --> 00:51:33,859
PLL now which makes clock glitching not

1032
00:51:30,410 --> 00:51:38,689
really useful<font color="#CCCCCC"> it's thanks</font><font color="#E5E5E5"> microphone</font><font color="#CCCCCC"> 3</font>

1033
00:51:33,859 --> 00:51:40,959
please<font color="#E5E5E5"> a question is very similar and</font>

1034
00:51:38,689 --> 00:51:44,959
I'm not quite<font color="#CCCCCC"> sure whether my</font>

1035
00:51:40,959 --> 00:51:47,529
<font color="#E5E5E5">understanding of pls is wrong but as far</font>

1036
00:51:44,959 --> 00:51:50,779
<font color="#CCCCCC">as I understand they only do clock</font>

1037
00:51:47,529 --> 00:51:53,209
multiplication and division so if you

1038
00:51:50,779 --> 00:51:56,059
change the<font color="#E5E5E5"> external clock then the</font>

1039
00:51:53,209 --> 00:52:00,078
internal clock<font color="#CCCCCC"> clock should also change</font>

1040
00:51:56,059 --> 00:52:03,650
<font color="#E5E5E5">and I was just curious</font><font color="#CCCCCC"> by how</font><font color="#E5E5E5"> much you</font>

1041
00:52:00,079 --> 00:52:07,160
changed the clock<font color="#E5E5E5"> right so</font><font color="#CCCCCC"> though so</font>

1042
00:52:03,650 --> 00:52:10,130
there's actually<font color="#E5E5E5"> it that is true but if</font>

1043
00:52:07,160 --> 00:52:13,279
you look at like<font color="#E5E5E5"> the you know</font><font color="#CCCCCC"> the very</font>

1044
00:52:10,130 --> 00:52:16,130
precise like response function the

1045
00:52:13,279 --> 00:52:18,019
transfer function of<font color="#E5E5E5"> most PLL there is</font>

1046
00:52:16,130 --> 00:52:20,809
something I<font color="#E5E5E5"> don't remember the technical</font>

1047
00:52:18,019 --> 00:52:23,149
name but it's like a delay<font color="#E5E5E5"> response so</font>

1048
00:52:20,809 --> 00:52:25,939
your changes in<font color="#CCCCCC"> the frequency</font><font color="#E5E5E5"> is not</font>

1049
00:52:23,150 --> 00:52:29,660
instantaneous<font color="#CCCCCC"> and most PLL's are</font>

1050
00:52:25,939 --> 00:52:32,538
designed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> not change quickly was a was</font>

1051
00:52:29,660 --> 00:52:34,759
the clock frequency and it's a feature

1052
00:52:32,539 --> 00:52:36,769
<font color="#CCCCCC">that they call filtering out jitters</font>

1053
00:52:34,759 --> 00:52:38,539
because sometimes your<font color="#E5E5E5"> external clock</font>

1054
00:52:36,769 --> 00:52:40,910
can<font color="#CCCCCC"> be a bit noisy and</font><font color="#E5E5E5"> you don't want</font>

1055
00:52:38,539 --> 00:52:43,309
your<font color="#E5E5E5"> internal clock to follow that</font><font color="#CCCCCC"> noise</font>

1056
00:52:40,910 --> 00:52:46,489
so most PLL's are also designed

1057
00:52:43,309 --> 00:52:48,120
<font color="#E5E5E5">specifically to</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> respond quickly to</font>

1058
00:52:46,489 --> 00:52:51,780
frequency changes

1059
00:52:48,120 --> 00:52:54,000
on the outside thank you we<font color="#E5E5E5"> continue</font>

1060
00:52:51,780 --> 00:52:55,830
with microphone<font color="#E5E5E5"> one please</font>

1061
00:52:54,000 --> 00:52:58,530
since the hardware and<font color="#E5E5E5"> software is</font>

1062
00:52:55,830 --> 00:53:00,810
similar to the<font color="#CCCCCC"> bow okay sorry</font>

1063
00:52:58,530 --> 00:53:03,480
since the hardware and<font color="#E5E5E5"> software is</font>

1064
00:53:00,810 --> 00:53:06,029
really similar<font color="#E5E5E5"> does visas apply to the</font>

1065
00:53:03,480 --> 00:53:09,720
PlayStation TV - or just<font color="#CCCCCC"> a PlayStation</font>

1066
00:53:06,030 --> 00:53:14,130
Vita because PlayStation TV has HDMI

1067
00:53:09,720 --> 00:53:17,390
<font color="#E5E5E5">output and USB input output well big I</font>

1068
00:53:14,130 --> 00:53:24,090
<font color="#E5E5E5">don't know all just wait</font><font color="#CCCCCC"> on that</font>

1069
00:53:17,390 --> 00:53:27,330
insulting<font color="#E5E5E5"> sake you repeat</font><font color="#CCCCCC"> again yeah</font>

1070
00:53:24,090 --> 00:53:29,940
yeah yeah it's it's all the same yeah

1071
00:53:27,330 --> 00:53:32,670
it's just<font color="#E5E5E5"> the same device yeah because I</font>

1072
00:53:29,940 --> 00:53:35,520
have<font color="#E5E5E5"> both and I just so like there is</font>

1073
00:53:32,670 --> 00:53:39,110
the<font color="#E5E5E5"> arrow</font><font color="#CCCCCC"> scene sometimes</font><font color="#E5E5E5"> when you with</font>

1074
00:53:35,520 --> 00:53:39,110
<font color="#E5E5E5">the PlayStation TiVo even if it doesn't</font>

1075
00:53:40,490 --> 00:53:44,580
come to<font color="#CCCCCC"> their</font><font color="#E5E5E5"> assembly later we can okay</font>

1076
00:53:43,470 --> 00:53:46,980
okay<font color="#E5E5E5"> I will I will</font>

1077
00:53:44,580 --> 00:53:51,569
okay so invitation to the assembly<font color="#CCCCCC"> later</font>

1078
00:53:46,980 --> 00:53:54,290
we go to microphone<font color="#E5E5E5"> 3 please hi thank</font>

1079
00:53:51,570 --> 00:53:57,300
you<font color="#CCCCCC"> for the talk I'm very interesting</font>

1080
00:53:54,290 --> 00:54:03,120
would you care to<font color="#E5E5E5"> explain why it's</font>

1081
00:53:57,300 --> 00:54:04,020
called the octopus exploit I'll give two

1082
00:54:03,120 --> 00:54:07,080
quick explanation

1083
00:54:04,020 --> 00:54:10,860
I'll give<font color="#CCCCCC"> XYZ who found the X ray his</font>

1084
00:54:07,080 --> 00:54:14,069
original<font color="#CCCCCC"> explanation is that</font><font color="#E5E5E5"> an octopus</font>

1085
00:54:10,860 --> 00:54:15,990
<font color="#E5E5E5">has three hearts</font><font color="#CCCCCC"> and somehow</font><font color="#E5E5E5"> you know</font>

1086
00:54:14,070 --> 00:54:21,000
when we have these three little<font color="#E5E5E5"> like</font>

1087
00:54:15,990 --> 00:54:22,830
pieces<font color="#CCCCCC"> of the of the</font><font color="#E5E5E5"> P address evil one</font>

1088
00:54:21,000 --> 00:54:26,040
like you know one piece<font color="#E5E5E5"> pointing</font>

1089
00:54:22,830 --> 00:54:27,420
correctly one piece pointing to the the

1090
00:54:26,040 --> 00:54:31,170
<font color="#E5E5E5">food private memory and one piece</font>

1091
00:54:27,420 --> 00:54:33,540
pointing to the correct<font color="#E5E5E5"> data that's like</font>

1092
00:54:31,170 --> 00:54:34,110
three hearts that doesn't make<font color="#E5E5E5"> any sense</font>

1093
00:54:33,540 --> 00:54:37,800
<font color="#E5E5E5">to me</font>

1094
00:54:34,110 --> 00:54:38,790
<font color="#CCCCCC">i retconned an explanation</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> the</font>

1095
00:54:37,800 --> 00:54:40,560
<font color="#CCCCCC">p a dualist</font>

1096
00:54:38,790 --> 00:54:42,690
is kind of like<font color="#E5E5E5"> eight octopus legs</font>

1097
00:54:40,560 --> 00:54:45,750
grabbing<font color="#E5E5E5"> onto the</font><font color="#CCCCCC"> erm which makes more</font>

1098
00:54:42,690 --> 00:54:47,700
sense to<font color="#CCCCCC"> me so you see the</font><font color="#E5E5E5"> P etter list</font>

1099
00:54:45,750 --> 00:54:51,810
here that's<font color="#E5E5E5"> supposed to</font><font color="#CCCCCC"> be the three</font>

1100
00:54:47,700 --> 00:54:54,589
hearts<font color="#E5E5E5"> yeah tell those makes total sense</font>

1101
00:54:51,810 --> 00:54:57,720
right you get makes<font color="#E5E5E5"> two</font><font color="#CCCCCC"> I'm sorry</font>

1102
00:54:54,589 --> 00:55:00,270
microphone<font color="#CCCCCC"> number</font><font color="#E5E5E5"> two please yes so my</font>

1103
00:54:57,720 --> 00:55:01,799
question is the initial bootloader of

1104
00:55:00,270 --> 00:55:06,960
the food process and way I said actually

1105
00:55:01,799 --> 00:55:08,849
board is it like<font color="#CCCCCC"> in</font><font color="#E5E5E5"> oh</font><font color="#CCCCCC"> wait I</font><font color="#E5E5E5"> said this</font>

1106
00:55:06,960 --> 00:55:11,609
is<font color="#CCCCCC"> actually a very</font><font color="#E5E5E5"> interesting question</font>

1107
00:55:08,849 --> 00:55:14,099
<font color="#E5E5E5">I</font><font color="#CCCCCC"> don't want to get into it but the boot</font>

1108
00:55:11,609 --> 00:55:17,250
<font color="#CCCCCC">rom is never mapped anywhere in memory</font>

1109
00:55:14,099 --> 00:55:20,910
so what the Vita does is on boot up it

1110
00:55:17,250 --> 00:55:23,970
copies the the instructions for the

1111
00:55:20,910 --> 00:55:26,220
initial you know<font color="#E5E5E5"> boot stuff from some</font>

1112
00:55:23,970 --> 00:55:29,430
secret<font color="#CCCCCC"> hardware area that's never</font>

1113
00:55:26,220 --> 00:55:32,759
accessible through memory into<font color="#E5E5E5"> the SRAM</font>

1114
00:55:29,430 --> 00:55:35,578
<font color="#E5E5E5">and then as the boot as the boot</font><font color="#CCCCCC"> ROM we</font>

1115
00:55:32,760 --> 00:55:38,970
call it boot<font color="#CCCCCC"> Ram starts up</font><font color="#E5E5E5"> it's like</font>

1116
00:55:35,579 --> 00:55:41,309
slowly wipes<font color="#CCCCCC"> each part like of the key</font>

1117
00:55:38,970 --> 00:55:44,578
derivation and other stuff<font color="#E5E5E5"> as</font><font color="#CCCCCC"> its</font>

1118
00:55:41,309 --> 00:55:47,940
executing so yeah it's it was kind of a

1119
00:55:44,579 --> 00:55:49,770
pain to<font color="#E5E5E5"> get Wow interesting less</font>

1120
00:55:47,940 --> 00:55:51,540
question microphone number<font color="#E5E5E5"> one please so</font>

1121
00:55:49,770 --> 00:55:53,549
while<font color="#E5E5E5"> taking apart the hardware did you</font>

1122
00:55:51,540 --> 00:55:56,069
figure out<font color="#E5E5E5"> what the top right port on</font>

1123
00:55:53,549 --> 00:55:59,790
the original Vita is for is it used

1124
00:55:56,069 --> 00:56:02,790
anywhere<font color="#CCCCCC"> it's actually</font><font color="#E5E5E5"> just a USB host</font>

1125
00:55:59,790 --> 00:56:06,869
for a<font color="#E5E5E5"> USB eh</font><font color="#CCCCCC"> di port was a custom</font>

1126
00:56:02,790 --> 00:56:09,840
connector<font color="#CCCCCC"> thanks yeah</font><font color="#E5E5E5"> great thank you</font>

1127
00:56:06,869 --> 00:56:10,360
<font color="#E5E5E5">again great applause for even</font><font color="#CCCCCC"> lewin baby</font>

1128
00:56:09,840 --> 00:56:12,780
[Music]

1129
00:56:10,360 --> 00:56:23,090
[Applause]

1130
00:56:12,780 --> 00:56:23,090
[Music]

1131
00:56:25,160 --> 00:56:37,830
[Music]

