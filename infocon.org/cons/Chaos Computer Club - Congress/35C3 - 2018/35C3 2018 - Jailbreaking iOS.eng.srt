1
00:00:02,830 --> 00:00:15,489
[Music]

2
00:00:17,300 --> 00:00:22,050
<font color="#E5E5E5">all right let's start</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> our next</font><font color="#CCCCCC"> talk</font>

3
00:00:19,770 --> 00:00:24,060
<font color="#E5E5E5">in the security track of the cranes</font>

4
00:00:22,050 --> 00:00:26,880
communications<font color="#CCCCCC"> Congress the talk is</font>

5
00:00:24,060 --> 00:00:29,880
called is<font color="#E5E5E5"> called jailbreaking iOS from</font>

6
00:00:26,880 --> 00:00:34,079
past to present<font color="#E5E5E5"> done by</font><font color="#CCCCCC"> James Joe he</font>

7
00:00:29,880 --> 00:00:36,989
spoke at the<font color="#E5E5E5"> 32nd</font><font color="#CCCCCC"> c3 already</font><font color="#E5E5E5"> and</font>

8
00:00:34,079 --> 00:00:39,030
researched on several drill breaks<font color="#E5E5E5"> like</font>

9
00:00:36,989 --> 00:00:41,790
the<font color="#E5E5E5"> Phoenix or the angelic time for</font>

10
00:00:39,030 --> 00:00:43,980
Apple watch<font color="#E5E5E5"> and he's gonna talk about</font>

11
00:00:41,790 --> 00:00:47,039
the history of jailbreaks<font color="#E5E5E5"> he's gonna</font>

12
00:00:43,980 --> 00:00:50,849
familiarize you with the terminology<font color="#CCCCCC"> of</font>

13
00:00:47,039 --> 00:00:52,350
jailbreaking<font color="#E5E5E5"> and about</font><font color="#CCCCCC"> explore</font>

14
00:00:50,850 --> 00:00:54,329
mitigations and how you can circumvent

15
00:00:52,350 --> 00:00:56,310
these mitigations please welcome<font color="#CCCCCC"> with a</font>

16
00:00:54,329 --> 00:01:03,530
huge round of thoughts

17
00:00:56,310 --> 00:01:06,420
[Applause]

18
00:01:03,530 --> 00:01:09,119
thank you very<font color="#E5E5E5"> much so hello everyone I</font>

19
00:01:06,420 --> 00:01:11,340
am<font color="#CCCCCC"> team sir and as I said I'm</font><font color="#E5E5E5"> going to</font>

20
00:01:09,119 --> 00:01:14,369
talk<font color="#CCCCCC"> about jailbreaking iOS from past</font>

21
00:01:11,340 --> 00:01:17,220
<font color="#CCCCCC">present and</font><font color="#E5E5E5"> the topics I'm gonna cover</font>

22
00:01:14,369 --> 00:01:21,149
is what is Jerry King I'm a given all of

23
00:01:17,220 --> 00:01:24,420
<font color="#CCCCCC">hyun-jae knurl</font><font color="#E5E5E5"> I'm introduce you to how</font>

24
00:01:21,149 --> 00:01:26,550
jailbreak started how they got into<font color="#CCCCCC"> the</font>

25
00:01:24,420 --> 00:01:28,950
phone at first and how all of these

26
00:01:26,550 --> 00:01:31,920
progressed<font color="#E5E5E5"> I'm introducing to you the</font>

27
00:01:28,950 --> 00:01:33,840
terminology which<font color="#CCCCCC"> is tethered</font><font color="#E5E5E5"> untethered</font>

28
00:01:31,920 --> 00:01:37,770
simi<font color="#E5E5E5"> tether simi untethered jailbreak</font>

29
00:01:33,840 --> 00:01:39,660
<font color="#CCCCCC">s-- like stuff you</font><font color="#E5E5E5"> probably heard but</font>

30
00:01:37,770 --> 00:01:41,460
some of you don't know<font color="#E5E5E5"> what what that</font>

31
00:01:39,660 --> 00:01:43,229
means I'm gonna<font color="#E5E5E5"> talk a bit about</font>

32
00:01:41,460 --> 00:01:46,770
<font color="#CCCCCC">Hardware mitigations which were</font>

33
00:01:43,229 --> 00:01:49,679
introduced by Apple which is<font color="#CCCCCC"> kpp ITR and</font>

34
00:01:46,770 --> 00:01:52,408
a little bit about<font color="#CCCCCC"> pact</font><font color="#E5E5E5"> I'm gonna talk</font>

35
00:01:49,679 --> 00:01:55,860
about<font color="#CCCCCC"> the general</font><font color="#E5E5E5"> goals of about the</font>

36
00:01:52,409 --> 00:01:57,750
technical<font color="#E5E5E5"> goals of Jerry King and the</font>

37
00:01:55,860 --> 00:02:01,140
kernel patches and what you want to do

38
00:01:57,750 --> 00:02:04,500
with those<font color="#E5E5E5"> and brief overview how Jerry</font>

39
00:02:01,140 --> 00:02:07,679
<font color="#E5E5E5">King could look like in future so Who am</font>

40
00:02:04,500 --> 00:02:11,430
I I'm<font color="#CCCCCC"> team sir I got</font><font color="#E5E5E5"> my first</font><font color="#CCCCCC"> ipod touch</font>

41
00:02:07,679 --> 00:02:14,520
with iOS 5.1<font color="#E5E5E5"> and since then I pretty</font>

42
00:02:11,430 --> 00:02:16,319
<font color="#E5E5E5">much played with</font><font color="#CCCCCC"> jrx</font><font color="#E5E5E5"> and then I got</font>

43
00:02:14,520 --> 00:02:18,720
really<font color="#CCCCCC"> interested into that and started</font>

44
00:02:16,319 --> 00:02:21,030
<font color="#CCCCCC">doing my own research eventually</font><font color="#E5E5E5"> started</font>

45
00:02:18,720 --> 00:02:23,190
doing my<font color="#E5E5E5"> own</font><font color="#CCCCCC"> jrx</font><font color="#E5E5E5"> kind of started with</font>

46
00:02:21,030 --> 00:02:25,980
down<font color="#E5E5E5"> raiding so I've been here two years</font>

47
00:02:23,190 --> 00:02:27,599
ago<font color="#E5E5E5"> with</font><font color="#CCCCCC"> my presentation downgrading iOS</font>

48
00:02:25,980 --> 00:02:30,238
down<font color="#CCCCCC"> reading from past</font><font color="#E5E5E5"> to present and</font>

49
00:02:27,599 --> 00:02:31,950
kept hacking since then so back then<font color="#E5E5E5"> I</font>

50
00:02:30,239 --> 00:02:34,290
kind of talked about the projects and

51
00:02:31,950 --> 00:02:36,988
made and related to down writing<font color="#E5E5E5"> which</font>

52
00:02:34,290 --> 00:02:39,269
was CSS<font color="#E5E5E5"> checker</font><font color="#CCCCCC"> Futurist or</font><font color="#E5E5E5"> IMG for tool</font>

53
00:02:36,989 --> 00:02:40,980
probably heard<font color="#E5E5E5"> have heard of that and</font>

54
00:02:39,270 --> 00:02:43,709
<font color="#E5E5E5">since then I was working on several</font>

55
00:02:40,980 --> 00:02:47,010
jailbreaking tools ranging from<font color="#E5E5E5"> Iowa's</font>

56
00:02:43,709 --> 00:02:50,190
<font color="#CCCCCC">eight</font><font color="#E5E5E5"> four one two ten</font><font color="#CCCCCC"> three three among</font>

57
00:02:47,010 --> 00:02:53,429
those 32-bit generates<font color="#E5E5E5"> untethered</font><font color="#CCCCCC"> Eric's</font>

58
00:02:50,190 --> 00:02:58,050
remote generates like<font color="#CCCCCC"> Jarek me and</font><font color="#E5E5E5"> the</font>

59
00:02:53,430 --> 00:03:00,480
<font color="#E5E5E5">jailbreak for the Apple watch so what is</font>

60
00:02:58,050 --> 00:03:03,450
this<font color="#E5E5E5"> Jerry King I'm talking about so</font>

61
00:03:00,480 --> 00:03:05,730
basically the goal is<font color="#CCCCCC"> to get control</font>

62
00:03:03,450 --> 00:03:09,030
over<font color="#CCCCCC"> the</font><font color="#E5E5E5"> device you own you want to</font>

63
00:03:05,730 --> 00:03:12,689
escape<font color="#CCCCCC"> the sandbox</font><font color="#E5E5E5"> with the apps are put</font>

64
00:03:09,030 --> 00:03:13,280
in you want to<font color="#E5E5E5"> elevate</font><font color="#CCCCCC"> the privileges</font><font color="#E5E5E5"> to</font>

65
00:03:12,689 --> 00:03:15,829
<font color="#E5E5E5">route</font>

66
00:03:13,280 --> 00:03:16,459
<font color="#CCCCCC">and eventually</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> Colonel you want to</font>

67
00:03:15,830 --> 00:03:19,220
disable

68
00:03:16,459 --> 00:03:21,440
<font color="#CCCCCC">code-signing</font><font color="#E5E5E5"> because all applications on</font>

69
00:03:19,220 --> 00:03:23,480
iOS a<font color="#E5E5E5"> code signed and you cannot run</font>

70
00:03:21,440 --> 00:03:25,670
unsigned binary<font color="#E5E5E5"> so you pretty much want</font>

71
00:03:23,480 --> 00:03:28,519
<font color="#E5E5E5">to disable</font><font color="#CCCCCC"> that to run unsigned binaries</font>

72
00:03:25,670 --> 00:03:32,269
<font color="#CCCCCC">and</font><font color="#E5E5E5"> the most popular while people are</font>

73
00:03:28,520 --> 00:03:35,180
jailbreak is to install tweaks<font color="#E5E5E5"> and also</font>

74
00:03:32,270 --> 00:03:37,040
a lot of people install<font color="#CCCCCC"> a</font><font color="#E5E5E5"> jailbreak or</font>

75
00:03:35,180 --> 00:03:38,630
directly devices for doing security

76
00:03:37,040 --> 00:03:41,359
analysis for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> if you want to pan</font>

77
00:03:38,630 --> 00:03:43,819
test your application<font color="#E5E5E5"> see how an attack</font>

78
00:03:41,360 --> 00:03:45,500
goes for the you<font color="#CCCCCC"> you want to</font><font color="#E5E5E5"> like debug</font>

79
00:03:43,819 --> 00:03:48,260
that stuff and you<font color="#E5E5E5"> want to have</font><font color="#CCCCCC"> a</font>

80
00:03:45,500 --> 00:03:51,290
jailbroken phone for that so what are

81
00:03:48,260 --> 00:03:53,899
these tweaks<font color="#E5E5E5"> tweaks are usually</font>

82
00:03:51,290 --> 00:03:56,239
modifications of<font color="#CCCCCC"> built-in</font><font color="#E5E5E5"> user space</font>

83
00:03:53,900 --> 00:03:57,890
programs for<font color="#CCCCCC"> example one of the programs</font>

84
00:03:56,239 --> 00:03:59,750
<font color="#CCCCCC">to springboard so</font><font color="#E5E5E5"> spring mode is what</font>

85
00:03:57,890 --> 00:04:01,518
you see if<font color="#E5E5E5"> you turn</font><font color="#CCCCCC"> on your phone this</font>

86
00:03:59,750 --> 00:04:04,610
is where<font color="#CCCCCC"> all the icons are at and</font>

87
00:04:01,519 --> 00:04:07,459
usually you can<font color="#E5E5E5"> install tweaks to</font><font color="#CCCCCC"> add on</font>

88
00:04:04,610 --> 00:04:10,190
or modify the look<font color="#E5E5E5"> the behavior add</font>

89
00:04:07,459 --> 00:04:12,380
functionality just<font color="#CCCCCC"> this customization</font>

90
00:04:10,190 --> 00:04:16,700
this is what it's how it started with

91
00:04:12,380 --> 00:04:18,500
<font color="#CCCCCC">jacking well you also</font><font color="#E5E5E5"> what is usually</font>

92
00:04:16,700 --> 00:04:23,000
bundled when<font color="#CCCCCC"> you're in so Derek</font><font color="#E5E5E5"> is Cydia</font>

93
00:04:18,500 --> 00:04:25,820
<font color="#E5E5E5">so you install dpkg and apt which is the</font>

94
00:04:23,000 --> 00:04:28,450
<font color="#CCCCCC">debian package</font><font color="#E5E5E5"> manager and you also get</font>

95
00:04:25,820 --> 00:04:32,320
<font color="#CCCCCC">Cydia which is to</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> friendly</font>

96
00:04:28,450 --> 00:04:34,690
<font color="#E5E5E5">graphical user interface</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the</font>

97
00:04:32,320 --> 00:04:37,610
decentralized or centralized package

98
00:04:34,690 --> 00:04:39,380
installer package system<font color="#CCCCCC"> so I'm</font><font color="#E5E5E5"> saying</font>

99
00:04:37,610 --> 00:04:41,090
centralized because it's<font color="#E5E5E5"> pretty much all</font>

100
00:04:39,380 --> 00:04:43,310
in one spot you<font color="#E5E5E5"> just open the app</font><font color="#CCCCCC"> and</font>

101
00:04:41,090 --> 00:04:45,320
you<font color="#CCCCCC"> can get all your tweaks</font><font color="#E5E5E5"> or it's also</font>

102
00:04:43,310 --> 00:04:47,840
decentralized because you can<font color="#E5E5E5"> just add</font>

103
00:04:45,320 --> 00:04:52,039
<font color="#CCCCCC">up your own repo you can make your own</font>

104
00:04:47,840 --> 00:04:54,619
repo you can add other repos and so<font color="#CCCCCC"> you</font>

105
00:04:52,039 --> 00:04:57,979
not kind of<font color="#E5E5E5"> tied to one spot where you</font>

106
00:04:54,620 --> 00:04:59,360
get the tweaks from like when the<font color="#CCCCCC"> app</font>

107
00:04:57,979 --> 00:05:00,740
<font color="#CCCCCC">store</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can only download it from the</font>

108
00:04:59,360 --> 00:05:02,600
App Store<font color="#CCCCCC"> but with Cydia you can pretty</font>

109
00:05:00,740 --> 00:05:05,539
<font color="#E5E5E5">much</font><font color="#CCCCCC"> download from everywhere</font><font color="#E5E5E5"> you're</font>

110
00:05:02,600 --> 00:05:09,140
probably familiar with<font color="#CCCCCC"> Debian and it's</font>

111
00:05:05,539 --> 00:05:11,140
pretty<font color="#E5E5E5"> much</font><font color="#CCCCCC"> the same</font><font color="#E5E5E5"> so this talk is</font>

112
00:05:09,140 --> 00:05:15,380
pretty<font color="#E5E5E5"> much structured</font><font color="#CCCCCC"> around this tweet</font>

113
00:05:11,140 --> 00:05:17,510
<font color="#CCCCCC">the ages of Jerry</font><font color="#E5E5E5"> King so as</font><font color="#CCCCCC"> the user</font>

114
00:05:15,380 --> 00:05:20,450
<font color="#E5E5E5">say do we get like the Golden Age the</font>

115
00:05:17,510 --> 00:05:22,700
<font color="#CCCCCC">bootrom the Industrial Age and the post</font>

116
00:05:20,450 --> 00:05:25,159
<font color="#CCCCCC">apocalyptic</font><font color="#E5E5E5"> age and I kind of agree with</font>

117
00:05:22,700 --> 00:05:27,180
<font color="#E5E5E5">that</font><font color="#CCCCCC"> so this is why I decided to</font>

118
00:05:25,159 --> 00:05:29,310
structure<font color="#E5E5E5"> my chalk</font><font color="#CCCCCC"> around</font>

119
00:05:27,180 --> 00:05:32,460
and walk you through<font color="#CCCCCC"> the different</font><font color="#E5E5E5"> ages</font>

120
00:05:29,310 --> 00:05:35,070
<font color="#E5E5E5">of gyrating so starting with the first</font>

121
00:05:32,460 --> 00:05:39,630
<font color="#CCCCCC">iPhone OS JRA</font><font color="#E5E5E5"> back then was actually</font>

122
00:05:35,070 --> 00:05:42,540
<font color="#E5E5E5">called iPhone OS not iOS</font><font color="#CCCCCC"> was not the</font>

123
00:05:39,630 --> 00:05:45,570
<font color="#E5E5E5">boot</font><font color="#CCCCCC"> ROM yet so the first was a buffer</font>

124
00:05:42,540 --> 00:05:48,570
overflow and the iPhones<font color="#CCCCCC"> lib tip library</font>

125
00:05:45,570 --> 00:05:51,719
and this is an image<font color="#E5E5E5"> parsing library and</font>

126
00:05:48,570 --> 00:05:54,960
was exploited through<font color="#E5E5E5"> Safari and used as</font>

127
00:05:51,720 --> 00:05:56,699
an entry point<font color="#CCCCCC"> to get code execution</font><font color="#E5E5E5"> it</font>

128
00:05:54,960 --> 00:06:00,000
was the first time<font color="#CCCCCC"> that</font><font color="#E5E5E5"> non</font><font color="#CCCCCC"> apple</font>

129
00:05:56,699 --> 00:06:02,820
software was run on<font color="#CCCCCC"> an iPhone and people</font>

130
00:06:00,000 --> 00:06:05,970
installed applications like installer

131
00:06:02,820 --> 00:06:08,400
<font color="#E5E5E5">app tab which were stores similar to</font>

132
00:06:05,970 --> 00:06:10,560
Cydia<font color="#E5E5E5"> back then and those were used to</font>

133
00:06:08,400 --> 00:06:12,210
install apps or games because for the

134
00:06:10,560 --> 00:06:15,449
<font color="#CCCCCC">first I phone West there was no way to</font>

135
00:06:12,210 --> 00:06:20,669
install<font color="#E5E5E5"> applications anyhow so the apps</font>

136
00:06:15,449 --> 00:06:23,130
<font color="#CCCCCC">trigger</font><font color="#E5E5E5"> introduced with iOS 2 so then</font>

137
00:06:20,669 --> 00:06:25,560
going<font color="#E5E5E5"> to the Golden Age</font><font color="#CCCCCC"> the attention</font>

138
00:06:23,130 --> 00:06:27,419
kind of shifted to the boot<font color="#CCCCCC"> rom people</font>

139
00:06:25,560 --> 00:06:31,050
started<font color="#E5E5E5"> looking at the boot process</font><font color="#CCCCCC"> and</font>

140
00:06:27,419 --> 00:06:36,090
I found this<font color="#E5E5E5"> device from where upgrade</font>

141
00:06:31,050 --> 00:06:39,450
mode which is a part of ROM which yeah

142
00:06:36,090 --> 00:06:42,840
so the most<font color="#E5E5E5"> famous boot</font><font color="#CCCCCC"> rom exploit was</font>

143
00:06:39,450 --> 00:06:45,570
lime rain by jihad<font color="#E5E5E5"> it was a</font><font color="#CCCCCC"> bug</font><font color="#E5E5E5"> in</font>

144
00:06:42,840 --> 00:06:49,260
hardware and<font color="#E5E5E5"> was</font><font color="#CCCCCC"> unpayable</font><font color="#E5E5E5"> with software</font>

145
00:06:45,570 --> 00:06:52,860
<font color="#CCCCCC">so this book was used</font><font color="#E5E5E5"> to jailbreak</font>

146
00:06:49,260 --> 00:06:55,080
devices<font color="#CCCCCC"> up to the iPhone 4 there were</font>

147
00:06:52,860 --> 00:06:56,940
also several other<font color="#CCCCCC"> jerax we didn't rely</font>

148
00:06:55,080 --> 00:06:58,530
on that one but this one like once you

149
00:06:56,940 --> 00:07:00,389
discovered you can use it over<font color="#E5E5E5"> and over</font>

150
00:06:58,530 --> 00:07:03,000
<font color="#E5E5E5">again and you there's no way to patch</font>

151
00:07:00,389 --> 00:07:05,930
that so this was later patch in a new

152
00:07:03,000 --> 00:07:10,289
hardware<font color="#E5E5E5"> revision which is the iPhone 4s</font>

153
00:07:05,930 --> 00:07:12,300
so with that boot<font color="#E5E5E5"> ROM</font><font color="#CCCCCC"> bug this is how</font>

154
00:07:10,289 --> 00:07:12,840
kind of<font color="#E5E5E5"> tattered</font><font color="#CCCCCC"> jailbreaks became a</font>

155
00:07:12,300 --> 00:07:16,620
thing

156
00:07:12,840 --> 00:07:20,219
so lime rain exploits<font color="#CCCCCC"> a buck in the DFU</font>

157
00:07:16,620 --> 00:07:23,760
mode which<font color="#E5E5E5"> allows you to load unsigned</font>

158
00:07:20,220 --> 00:07:25,889
software through use beef however when

159
00:07:23,760 --> 00:07:29,250
you reboot the device a computer is

160
00:07:25,889 --> 00:07:32,760
required to re-explore<font color="#CCCCCC"> and again load</font>

161
00:07:29,250 --> 00:07:36,150
your unsigned code and then load the

162
00:07:32,760 --> 00:07:38,760
boot loaders load the patch kernel<font color="#CCCCCC"> and</font>

163
00:07:36,150 --> 00:07:40,140
<font color="#CCCCCC">thus the jailbreak was kind of tethered</font>

164
00:07:38,760 --> 00:07:40,740
to the computer because whenever<font color="#E5E5E5"> you</font>

165
00:07:40,140 --> 00:07:42,210
<font color="#E5E5E5">shut down</font>

166
00:07:40,740 --> 00:07:46,560
need to be back at a computer to boot

167
00:07:42,210 --> 00:07:49,409
your phone up so<font color="#E5E5E5"> hysterically a tethered</font>

168
00:07:46,560 --> 00:07:51,990
jailbreak phone<font color="#E5E5E5"> does not boot without</font><font color="#CCCCCC"> a</font>

169
00:07:49,410 --> 00:07:55,919
<font color="#E5E5E5">computer at all and the reason for that</font>

170
00:07:51,990 --> 00:07:58,289
is<font color="#E5E5E5"> because the</font><font color="#CCCCCC"> jarek's</font><font color="#E5E5E5"> would modify</font><font color="#CCCCCC"> the</font>

171
00:07:55,919 --> 00:08:02,190
<font color="#E5E5E5">kernel and</font><font color="#CCCCCC"> the boot loaders on the</font><font color="#E5E5E5"> file</font>

172
00:07:58,289 --> 00:08:03,960
<font color="#CCCCCC">system for performance reasons so when</font>

173
00:08:02,190 --> 00:08:06,360
you do the actual tethered boot you

174
00:08:03,960 --> 00:08:09,090
would need to upload<font color="#E5E5E5"> a very tiny payload</font>

175
00:08:06,360 --> 00:08:11,069
via USB<font color="#E5E5E5"> which then in turn would load</font>

176
00:08:09,090 --> 00:08:14,159
<font color="#E5E5E5">everything else from the file system</font>

177
00:08:11,069 --> 00:08:16,530
<font color="#CCCCCC">itself but this results in a broken</font>

178
00:08:14,159 --> 00:08:18,599
chain of trust when the<font color="#E5E5E5"> normal boot</font>

179
00:08:16,530 --> 00:08:20,039
process runs and the<font color="#E5E5E5"> bootloader checks</font>

180
00:08:18,599 --> 00:08:22,889
the signature of the<font color="#CCCCCC"> first-stage</font>

181
00:08:20,039 --> 00:08:24,780
<font color="#E5E5E5">bootloader that would be invalid so the</font>

182
00:08:22,889 --> 00:08:26,789
bootloader would refuse<font color="#CCCCCC"> to boot</font><font color="#E5E5E5"> that and</font>

183
00:08:24,780 --> 00:08:31,619
it would<font color="#CCCCCC"> end up at the fu</font><font color="#E5E5E5"> mode so</font>

184
00:08:26,789 --> 00:08:34,979
basically<font color="#E5E5E5"> a phone won't boot some time</font>

185
00:08:31,620 --> 00:08:36,659
<font color="#E5E5E5">around then the idea of a semi tethered</font>

186
00:08:34,979 --> 00:08:39,450
jailbreak came up and the<font color="#E5E5E5"> idea behind</font>

187
00:08:36,659 --> 00:08:41,399
that<font color="#CCCCCC"> is very simple</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> don't break the</font>

188
00:08:39,450 --> 00:08:44,730
<font color="#CCCCCC">chain of</font><font color="#E5E5E5"> trust for</font><font color="#CCCCCC"> tethered jailbreaks</font>

189
00:08:41,399 --> 00:08:47,730
so what you<font color="#E5E5E5"> would do differently</font><font color="#CCCCCC"> is you</font>

190
00:08:44,730 --> 00:08:48,450
do not modify the kernel<font color="#E5E5E5"> on the</font>

191
00:08:47,730 --> 00:08:51,029
<font color="#CCCCCC">filesystem</font>

192
00:08:48,450 --> 00:08:53,339
don't touch the<font color="#E5E5E5"> Bullers at all and then</font>

193
00:08:51,029 --> 00:08:55,890
you<font color="#CCCCCC"> when you would do tethered you would</font>

194
00:08:53,339 --> 00:08:57,360
need to upload all the boot loaders like

195
00:08:55,890 --> 00:08:59,579
the<font color="#CCCCCC"> first stage boot ordered and a</font>

196
00:08:57,360 --> 00:09:03,029
second stage<font color="#CCCCCC"> boot loader</font><font color="#E5E5E5"> which is I boot</font>

197
00:08:59,579 --> 00:09:05,310
and then the kernel via USB<font color="#E5E5E5"> to</font><font color="#CCCCCC"> boot into</font>

198
00:09:03,029 --> 00:09:08,430
<font color="#CCCCCC">general mode however when you reboot you</font>

199
00:09:05,310 --> 00:09:09,989
could boot<font color="#CCCCCC"> all those components in from</font>

200
00:09:08,430 --> 00:09:12,709
the file<font color="#CCCCCC"> system so you could actually</font>

201
00:09:09,990 --> 00:09:16,320
boot your phone<font color="#E5E5E5"> into non-jailbroken mode</font>

202
00:09:12,709 --> 00:09:18,779
if you don't install any tweaks or

203
00:09:16,320 --> 00:09:20,459
modifications which modify critical

204
00:09:18,779 --> 00:09:23,070
system components because if you<font color="#CCCCCC"> tamper</font>

205
00:09:20,459 --> 00:09:24,839
with for<font color="#CCCCCC"> example the signature of the</font>

206
00:09:23,070 --> 00:09:30,390
mount binary<font color="#E5E5E5"> the system obviously cannot</font>

207
00:09:24,839 --> 00:09:33,180
boot in<font color="#E5E5E5"> non-jailbroken mode so this is</font>

208
00:09:30,390 --> 00:09:36,660
kind of the<font color="#CCCCCC"> golden age so let's continue</font>

209
00:09:33,180 --> 00:09:40,920
<font color="#E5E5E5">with the industrial age so with the</font>

210
00:09:36,660 --> 00:09:44,880
release of the<font color="#CCCCCC"> iPhone 4s</font><font color="#E5E5E5"> and the and iOS</font>

211
00:09:40,920 --> 00:09:47,399
5<font color="#CCCCCC"> Apple fixed the boot ROM back and</font>

212
00:09:44,880 --> 00:09:50,250
essentially killed lime rain<font color="#E5E5E5"> they also</font>

213
00:09:47,399 --> 00:09:54,420
introduced<font color="#CCCCCC"> ap tickets</font><font color="#E5E5E5"> and nonsense to</font>

214
00:09:50,250 --> 00:09:56,339
boot loaders which just<font color="#E5E5E5"> I mentioned</font>

215
00:09:54,420 --> 00:09:59,209
because it's kind of<font color="#E5E5E5"> throwback for down</font>

216
00:09:56,339 --> 00:10:01,860
<font color="#CCCCCC">rating before</font><font color="#E5E5E5"> that you can have a phone</font>

217
00:09:59,209 --> 00:10:04,290
<font color="#CCCCCC">if you update to the latest</font><font color="#E5E5E5"> firmware and</font>

218
00:10:01,860 --> 00:10:06,060
before you saved your sh sh<font color="#CCCCCC"> blobs</font><font color="#E5E5E5"> you</font>

219
00:10:04,290 --> 00:10:08,339
could just downgrade and then jailbreak

220
00:10:06,060 --> 00:10:09,660
again which<font color="#CCCCCC"> wasn't a big deal</font><font color="#E5E5E5"> but with</font>

221
00:10:08,339 --> 00:10:12,420
that they<font color="#E5E5E5"> also add a downgrade</font>

222
00:10:09,660 --> 00:10:15,899
protection so Jerry King became harder

223
00:10:12,420 --> 00:10:18,599
if you<font color="#E5E5E5"> want to know more about how the</font>

224
00:10:15,899 --> 00:10:20,490
boot process works what<font color="#E5E5E5"> sh sh blobs are</font>

225
00:10:18,600 --> 00:10:22,860
what<font color="#E5E5E5"> ap tickets are you should check out</font>

226
00:10:20,490 --> 00:10:25,829
my talk form<font color="#E5E5E5"> two years ago I go</font><font color="#CCCCCC"> in-depth</font>

227
00:10:22,860 --> 00:10:29,459
on<font color="#CCCCCC"> how all of that works</font><font color="#E5E5E5"> so I'm skipping</font>

228
00:10:25,829 --> 00:10:31,229
<font color="#E5E5E5">that for this talk</font><font color="#CCCCCC"> so the binary</font><font color="#E5E5E5"> is the</font>

229
00:10:29,459 --> 00:10:33,750
phone booths<font color="#E5E5E5"> are encrypted</font>

230
00:10:31,230 --> 00:10:35,880
so the<font color="#CCCCCC"> bootloader is</font><font color="#E5E5E5"> are encrypted and</font>

231
00:10:33,750 --> 00:10:38,430
until recently<font color="#CCCCCC"> the</font><font color="#E5E5E5"> kernel used to be</font>

232
00:10:35,880 --> 00:10:41,820
<font color="#CCCCCC">encrypted as well and the key encryption</font>

233
00:10:38,430 --> 00:10:43,410
key is fused<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> devices and it is</font>

234
00:10:41,820 --> 00:10:45,870
impossible<font color="#CCCCCC"> to get</font><font color="#E5E5E5"> through</font><font color="#CCCCCC"> hardware</font>

235
00:10:43,410 --> 00:10:49,380
<font color="#E5E5E5">attacks</font><font color="#CCCCCC"> at least</font><font color="#E5E5E5"> there's no public case</font>

236
00:10:45,870 --> 00:10:52,440
where somebody actually got that

237
00:10:49,380 --> 00:10:56,250
recovered<font color="#CCCCCC"> their keys so but probably</font>

238
00:10:52,440 --> 00:11:00,209
<font color="#E5E5E5">impossible</font><font color="#CCCCCC"> nobody has done it</font><font color="#E5E5E5"> yet so all</font>

239
00:10:56,250 --> 00:11:04,589
boot files are decrypted<font color="#CCCCCC"> at boot by the</font>

240
00:11:00,209 --> 00:11:07,890
previous<font color="#E5E5E5"> bootloader</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> before the</font>

241
00:11:04,589 --> 00:11:12,000
<font color="#E5E5E5">iPhone 4s you could actually just talk</font>

242
00:11:07,890 --> 00:11:14,040
to the hardware<font color="#CCCCCC"> is</font><font color="#E5E5E5"> engine as soon as you</font>

243
00:11:12,000 --> 00:11:15,690
got kernel level<font color="#E5E5E5"> code execution but with</font>

244
00:11:14,040 --> 00:11:17,699
the iPhone 4s they introduced the

245
00:11:15,690 --> 00:11:19,920
feature<font color="#E5E5E5"> where before the kernel would</font>

246
00:11:17,699 --> 00:11:22,500
boot<font color="#E5E5E5"> they would like shut off the</font><font color="#CCCCCC"> is</font>

247
00:11:19,920 --> 00:11:23,719
engine by<font color="#CCCCCC"> Hardware so there's no way to</font>

248
00:11:22,500 --> 00:11:26,130
decrypt

249
00:11:23,720 --> 00:11:28,860
<font color="#CCCCCC">bootloader files</font><font color="#E5E5E5"> anymore so easily</font>

250
00:11:26,130 --> 00:11:31,040
<font color="#CCCCCC">unless you get code execution</font><font color="#E5E5E5"> in the</font>

251
00:11:28,860 --> 00:11:33,329
<font color="#CCCCCC">boot order and self</font>

252
00:11:31,040 --> 00:11:37,469
so<font color="#CCCCCC"> yeah decrypting boot loaders</font><font color="#E5E5E5"> is a</font>

253
00:11:33,329 --> 00:11:40,109
struggle<font color="#E5E5E5"> from now on so I think kind of</font>

254
00:11:37,470 --> 00:11:44,040
because of<font color="#E5E5E5"> that the attention shifted to</font>

255
00:11:40,110 --> 00:11:47,190
user land and from now the<font color="#CCCCCC"> jerax</font><font color="#E5E5E5"> kinda</font>

256
00:11:44,040 --> 00:11:49,469
had<font color="#CCCCCC"> to be untethered so</font><font color="#E5E5E5"> untethered he</font>

257
00:11:47,190 --> 00:11:52,500
means<font color="#E5E5E5"> that if you jailbreak your device</font>

258
00:11:49,470 --> 00:11:55,199
<font color="#CCCCCC">you turn it off you boot it again then</font>

259
00:11:52,500 --> 00:11:57,870
the device is<font color="#E5E5E5"> still</font><font color="#CCCCCC"> general and this</font><font color="#E5E5E5"> is</font>

260
00:11:55,199 --> 00:12:00,479
<font color="#CCCCCC">usually achieved through re exploitation</font>

261
00:11:57,870 --> 00:12:02,490
<font color="#E5E5E5">at some point in the boot process so you</font>

262
00:12:00,480 --> 00:12:04,050
can't<font color="#E5E5E5"> just like patch the kernel on</font>

263
00:12:02,490 --> 00:12:06,329
<font color="#CCCCCC">filesystem because</font><font color="#E5E5E5"> that would invalidate</font>

264
00:12:04,050 --> 00:12:07,439
<font color="#E5E5E5">the signatures</font><font color="#CCCCCC"> so instead</font><font color="#E5E5E5"> you would I</font>

265
00:12:06,329 --> 00:12:09,510
don't<font color="#CCCCCC"> know</font>

266
00:12:07,440 --> 00:12:12,390
at some configuration<font color="#CCCCCC"> file to some</font>

267
00:12:09,510 --> 00:12:15,180
demons which would trigger box and then

268
00:12:12,390 --> 00:12:17,610
exploit so<font color="#CCCCCC"> jailbreaks then</font><font color="#E5E5E5"> chain many</font>

269
00:12:15,180 --> 00:12:20,459
<font color="#CCCCCC">bugs</font><font color="#E5E5E5"> together sometimes six or more</font>

270
00:12:17,610 --> 00:12:24,710
bucks to get initial code execution

271
00:12:20,460 --> 00:12:27,150
<font color="#E5E5E5">kernel code execution and persistence</font>

272
00:12:24,710 --> 00:12:28,950
this<font color="#E5E5E5"> somewhat changed when Apple</font>

273
00:12:27,150 --> 00:12:31,620
introduced free developer accounts

274
00:12:28,950 --> 00:12:34,200
<font color="#E5E5E5">around</font><font color="#CCCCCC"> the time they released iOS</font><font color="#E5E5E5"> 9</font>

275
00:12:31,620 --> 00:12:37,170
so<font color="#E5E5E5"> these developer accounts allow</font>

276
00:12:34,200 --> 00:12:39,330
everybody<font color="#CCCCCC"> who has Apple ID</font><font color="#E5E5E5"> to get a</font>

277
00:12:37,170 --> 00:12:42,449
valid<font color="#E5E5E5"> signing certificates for seven</font>

278
00:12:39,330 --> 00:12:44,910
days<font color="#E5E5E5"> for free so you can actually create</font>

279
00:12:42,450 --> 00:12:47,460
<font color="#E5E5E5">an Xcode project and run your app on</font>

280
00:12:44,910 --> 00:12:49,890
your<font color="#CCCCCC"> physical device</font><font color="#E5E5E5"> before that that</font>

281
00:12:47,460 --> 00:12:53,190
was<font color="#E5E5E5"> not possible so the</font><font color="#CCCCCC"> only way</font><font color="#E5E5E5"> to run</font>

282
00:12:49,890 --> 00:12:55,500
<font color="#CCCCCC">your own code on your</font><font color="#E5E5E5"> device</font><font color="#CCCCCC"> was to buy</font>

283
00:12:53,190 --> 00:12:57,620
a paid developer account<font color="#E5E5E5"> which is like</font>

284
00:12:55,500 --> 00:13:01,670
$100 per year if you buy personal

285
00:12:57,620 --> 00:13:04,110
<font color="#E5E5E5">developer account</font><font color="#CCCCCC"> but now you can just</font>

286
00:13:01,670 --> 00:13:06,660
<font color="#E5E5E5">get that for free and</font><font color="#CCCCCC"> after seven days</font>

287
00:13:04,110 --> 00:13:08,310
<font color="#CCCCCC">they certificate expires</font><font color="#E5E5E5"> but you can</font>

288
00:13:06,660 --> 00:13:10,860
just<font color="#E5E5E5"> for free you request another one</font>

289
00:13:08,310 --> 00:13:14,849
and keep<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> that which is totally</font>

290
00:13:10,860 --> 00:13:17,160
<font color="#CCCCCC">enough if you develop apps so this kind</font>

291
00:13:14,850 --> 00:13:19,350
of led to<font color="#E5E5E5"> see me untethered jailbreak</font>

292
00:13:17,160 --> 00:13:21,329
<font color="#E5E5E5">because initial code execution was</font><font color="#CCCCCC"> not</font>

293
00:13:19,350 --> 00:13:24,420
an issue<font color="#CCCCCC"> anymore anybody could just get</font>

294
00:13:21,330 --> 00:13:26,820
<font color="#E5E5E5">that free certificate</font><font color="#CCCCCC"> sign apps and run</font>

295
00:13:24,420 --> 00:13:30,810
some kind<font color="#E5E5E5"> of code that</font><font color="#CCCCCC"> which was sent</font>

296
00:13:26,820 --> 00:13:33,600
most so<font color="#CCCCCC"> Jarek focus shifted to more</font>

297
00:13:30,810 --> 00:13:36,180
<font color="#E5E5E5">powerful kernel</font><font color="#CCCCCC"> bugs which were</font>

298
00:13:33,600 --> 00:13:38,250
reachable from sandbox so you had<font color="#CCCCCC"> jerax</font>

299
00:13:36,180 --> 00:13:41,010
using just one single<font color="#CCCCCC"> buck or maybe just</font>

300
00:13:38,250 --> 00:13:43,260
<font color="#E5E5E5">two bucks and the</font><font color="#CCCCCC"> jerax then were</font>

301
00:13:41,010 --> 00:13:44,160
distributed as an IPA which is an

302
00:13:43,260 --> 00:13:46,860
installable

303
00:13:44,160 --> 00:13:49,380
app people<font color="#CCCCCC"> would download sign there's</font>

304
00:13:46,860 --> 00:13:52,760
sign themselves<font color="#CCCCCC"> put on a phone and just</font>

305
00:13:49,380 --> 00:13:57,030
run the<font color="#E5E5E5"> app so</font><font color="#CCCCCC"> Seanie untethered means</font>

306
00:13:52,760 --> 00:13:59,490
you can reboot<font color="#E5E5E5"> into non-jailbroken mode</font>

307
00:13:57,030 --> 00:14:04,050
however<font color="#E5E5E5"> you can get two jailbroken mode</font>

308
00:13:59,490 --> 00:14:06,680
easily by<font color="#CCCCCC"> just pressing an app and over</font>

309
00:14:04,050 --> 00:14:10,500
the years<font color="#CCCCCC"> apple stepped up its game</font>

310
00:14:06,680 --> 00:14:12,750
<font color="#CCCCCC">constantly</font><font color="#E5E5E5"> so what i OS</font><font color="#CCCCCC"> v the introduced</font>

311
00:14:10,500 --> 00:14:15,840
a<font color="#CCCCCC"> slower address space layout</font>

312
00:14:12,750 --> 00:14:19,920
randomization with our<font color="#E5E5E5"> six</font><font color="#CCCCCC"> headed kernel</font>

313
00:14:15,840 --> 00:14:21,290
<font color="#CCCCCC">a SLR with the introduction of the</font>

314
00:14:19,920 --> 00:14:24,769
iPhone<font color="#E5E5E5"> 5s</font>

315
00:14:21,290 --> 00:14:27,199
they added 64-bit CPUs which isn't

316
00:14:24,769 --> 00:14:31,880
really security mitigation it's just

317
00:14:27,199 --> 00:14:34,699
<font color="#CCCCCC">chained</font><font color="#E5E5E5"> but how would exploit so the</font>

318
00:14:31,880 --> 00:14:38,149
real deal came with started to come with

319
00:14:34,699 --> 00:14:40,939
iOS 9<font color="#E5E5E5"> where</font><font color="#CCCCCC"> they're first introduced</font>

320
00:14:38,149 --> 00:14:43,100
kernel patch<font color="#E5E5E5"> protection</font><font color="#CCCCCC"> an attempt to</font>

321
00:14:40,940 --> 00:14:47,750
make<font color="#E5E5E5"> the kernel immutable and not</font>

322
00:14:43,100 --> 00:14:49,970
patchable<font color="#E5E5E5"> and they stepped up</font><font color="#CCCCCC"> that with</font>

323
00:14:47,750 --> 00:14:52,339
the iPhone 7 where<font color="#CCCCCC"> they introduce</font>

324
00:14:49,970 --> 00:14:56,750
Colonel text<font color="#E5E5E5"> read-only region also known</font>

325
00:14:52,339 --> 00:14:59,480
as<font color="#CCCCCC"> KT RR so with I was</font><font color="#E5E5E5"> 11 they remove</font>

326
00:14:56,750 --> 00:15:03,019
32-bit libraries which I<font color="#E5E5E5"> think has very</font>

327
00:14:59,480 --> 00:15:05,959
<font color="#E5E5E5">little to no impact on</font><font color="#CCCCCC"> exploitation as</font>

328
00:15:03,019 --> 00:15:08,959
mainly<font color="#E5E5E5"> in the list</font><font color="#CCCCCC"> speakers up to</font><font color="#E5E5E5"> that</font>

329
00:15:05,959 --> 00:15:10,880
<font color="#E5E5E5">point Cydia was compiled as a 32-bit</font>

330
00:15:08,959 --> 00:15:15,790
<font color="#E5E5E5">binary and that stopped working that's</font>

331
00:15:10,880 --> 00:15:19,310
<font color="#CCCCCC">why that had to be recompiled</font><font color="#E5E5E5"> for 64-bit</font>

332
00:15:15,790 --> 00:15:24,079
<font color="#E5E5E5">which took someone to do until you could</font>

333
00:15:19,310 --> 00:15:26,719
get a working<font color="#E5E5E5"> cydia on 64-bit iOS 11 so</font>

334
00:15:24,079 --> 00:15:29,149
with the<font color="#E5E5E5"> iPhone</font><font color="#CCCCCC"> access which came out</font><font color="#E5E5E5"> is</font>

335
00:15:26,720 --> 00:15:31,459
recently they introduced<font color="#CCCCCC"> point their</font>

336
00:15:29,149 --> 00:15:33,649
authentication<font color="#E5E5E5"> codes and</font><font color="#CCCCCC"> I'm gonna</font><font color="#E5E5E5"> go</font>

337
00:15:31,459 --> 00:15:37,579
more in detail into<font color="#E5E5E5"> these Hardware</font>

338
00:15:33,649 --> 00:15:39,440
mitigations<font color="#CCCCCC"> in the next few slides</font><font color="#E5E5E5"> so</font>

339
00:15:37,579 --> 00:15:42,529
let's start with kernel patch protection

340
00:15:39,440 --> 00:15:45,139
so when people say<font color="#CCCCCC"> kpp</font><font color="#E5E5E5"> they usually</font>

341
00:15:42,529 --> 00:15:47,569
<font color="#CCCCCC">refer to</font><font color="#E5E5E5"> what Apple calls Watchtower</font>

342
00:15:45,139 --> 00:15:50,800
<font color="#E5E5E5">so Watchtower as the name suggests</font>

343
00:15:47,569 --> 00:15:53,870
watches over the kernel<font color="#CCCCCC"> and panics when</font>

344
00:15:50,800 --> 00:15:55,939
modifications are detected and it

345
00:15:53,870 --> 00:15:59,389
prevents<font color="#E5E5E5"> the kernel</font><font color="#CCCCCC"> from being patched</font>

346
00:15:55,940 --> 00:16:00,769
<font color="#CCCCCC">at least that's the idea of it doesn't</font>

347
00:15:59,389 --> 00:16:03,260
<font color="#CCCCCC">really prevent it because it's broken</font>

348
00:16:00,769 --> 00:16:05,569
<font color="#E5E5E5">but when they engineer it it should</font>

349
00:16:03,260 --> 00:16:06,639
prevent you<font color="#CCCCCC"> from patching the kernel</font><font color="#E5E5E5"> so</font>

350
00:16:05,569 --> 00:16:09,349
how does it<font color="#CCCCCC"> work</font>

351
00:16:06,639 --> 00:16:11,420
<font color="#CCCCCC">Watchtower</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a piece of software which</font>

352
00:16:09,350 --> 00:16:14,180
<font color="#E5E5E5">runs</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> neo 3 which is the arm</font>

353
00:16:11,420 --> 00:16:17,000
exception level 3 so exception levels

354
00:16:14,180 --> 00:16:20,000
are kind of<font color="#E5E5E5"> privileged</font><font color="#CCCCCC"> operations well 3</font>

355
00:16:17,000 --> 00:16:23,660
is<font color="#CCCCCC"> the highest and 0 is lowest</font><font color="#E5E5E5"> and you</font>

356
00:16:20,000 --> 00:16:26,630
can kind trigger an exception to call

357
00:16:23,660 --> 00:16:28,790
handler code in<font color="#CCCCCC"> high levels</font><font color="#E5E5E5"> so the idea</font>

358
00:16:26,630 --> 00:16:32,360
of watchtowers that recurring events

359
00:16:28,790 --> 00:16:34,290
which is<font color="#E5E5E5"> FPU usage trigger</font><font color="#CCCCCC"> Watchtower</font>

360
00:16:32,360 --> 00:16:35,970
expection of the kernel

361
00:16:34,290 --> 00:16:40,680
you cannot really<font color="#E5E5E5"> turn it off because</font>

362
00:16:35,970 --> 00:16:42,509
<font color="#E5E5E5">you</font><font color="#CCCCCC"> do need the</font><font color="#E5E5E5"> fu so if you picture how</font>

363
00:16:40,680 --> 00:16:44,579
it<font color="#E5E5E5"> looks like we have</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> watch</font><font color="#CCCCCC"> charged</font>

364
00:16:42,509 --> 00:16:48,600
to the left<font color="#E5E5E5"> which totally looks like a</font>

365
00:16:44,579 --> 00:16:50,459
lighthouse<font color="#E5E5E5"> and the applications at the</font>

366
00:16:48,600 --> 00:16:52,500
right so in the middle<font color="#CCCCCC"> and</font><font color="#E5E5E5"> L</font><font color="#CCCCCC"> one we have</font>

367
00:16:50,459 --> 00:16:54,449
the<font color="#E5E5E5"> kernel and recent studies revealed</font>

368
00:16:52,500 --> 00:16:57,170
that this<font color="#E5E5E5"> is exactly how the</font><font color="#CCCCCC"> X a new</font>

369
00:16:54,449 --> 00:16:57,170
kernel looks like

370
00:16:58,759 --> 00:17:05,880
so how kbp works<font color="#CCCCCC"> an event occurs from</font>

371
00:17:03,630 --> 00:17:07,919
time to time which is from<font color="#E5E5E5"> using an</font>

372
00:17:05,880 --> 00:17:11,160
<font color="#CCCCCC">application for example javascript makes</font>

373
00:17:07,919 --> 00:17:13,679
heavy use of floating points and the

374
00:17:11,160 --> 00:17:15,720
event would<font color="#E5E5E5"> then go to</font><font color="#CCCCCC"> the kernel and</font>

375
00:17:13,679 --> 00:17:18,929
<font color="#E5E5E5">the kernel will then trigger Watchtower</font>

376
00:17:15,720 --> 00:17:23,640
as<font color="#E5E5E5"> a try so narrowly a few Watchtower</font>

377
00:17:18,929 --> 00:17:25,169
would scan the kernel<font color="#E5E5E5"> and then if</font>

378
00:17:23,640 --> 00:17:27,299
<font color="#E5E5E5">everything is fine it would transition</font>

379
00:17:25,169 --> 00:17:29,840
execution back into the kernel<font color="#E5E5E5"> which</font>

380
00:17:27,299 --> 00:17:34,010
then in turn would transition<font color="#E5E5E5"> back into</font>

381
00:17:29,840 --> 00:17:36,600
<font color="#E5E5E5">user space which can then use the fu</font>

382
00:17:34,010 --> 00:17:39,600
however with a modified kernel

383
00:17:36,600 --> 00:17:44,219
when Watchtower scans the kernel in the

384
00:17:39,600 --> 00:17:46,620
text modification<font color="#E5E5E5"> it would just panic so</font>

385
00:17:44,220 --> 00:17:49,290
the idea is that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> kernel is forced to</font>

386
00:17:46,620 --> 00:17:52,229
call<font color="#CCCCCC"> Watchtower because the</font><font color="#E5E5E5"> fu is</font>

387
00:17:49,290 --> 00:17:54,210
blocked otherwise but the problem at<font color="#E5E5E5"> the</font>

388
00:17:52,230 --> 00:17:57,000
same time is that<font color="#CCCCCC"> the kernel is in</font>

389
00:17:54,210 --> 00:17:59,880
control<font color="#E5E5E5"> before it calls Watchtower and</font>

390
00:17:57,000 --> 00:18:04,530
this thing was fully<font color="#E5E5E5"> defeated by QWERTY</font>

391
00:17:59,880 --> 00:18:05,429
<font color="#E5E5E5">in yellow 10 - so how Curry's kpv</font>

392
00:18:04,530 --> 00:18:08,340
passwords

393
00:18:05,429 --> 00:18:11,750
the idea is you copy the kernel in

394
00:18:08,340 --> 00:18:15,270
memory and you<font color="#E5E5E5"> modify the copied kernel</font>

395
00:18:11,750 --> 00:18:18,870
<font color="#E5E5E5">then you would modify the page tables to</font>

396
00:18:15,270 --> 00:18:23,220
use the patch kernel and whenever the

397
00:18:18,870 --> 00:18:25,830
FPU triggers and watched<font color="#E5E5E5"> our inspection</font>

398
00:18:23,220 --> 00:18:27,559
before<font color="#E5E5E5"> actually calling Watchtower you</font>

399
00:18:25,830 --> 00:18:31,590
would switch back<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> unmodified</font>

400
00:18:27,559 --> 00:18:33,480
<font color="#E5E5E5">kernel and then let</font><font color="#CCCCCC"> it run let it check</font>

401
00:18:31,590 --> 00:18:35,600
the unmodified kernel when that returns

402
00:18:33,480 --> 00:18:39,059
<font color="#CCCCCC">you would go back to</font><font color="#E5E5E5"> the modified kernel</font>

403
00:18:35,600 --> 00:18:42,449
so this<font color="#E5E5E5"> what it looks like we copy the</font>

404
00:18:39,059 --> 00:18:45,629
kernel<font color="#E5E5E5"> and memory we patch the modified</font>

405
00:18:42,450 --> 00:18:48,220
copy<font color="#E5E5E5"> we switch the page tables</font><font color="#CCCCCC"> to</font>

406
00:18:45,630 --> 00:18:51,970
<font color="#E5E5E5">actually use the modified copy</font>

407
00:18:48,220 --> 00:18:55,269
and when we have the FPU event<font color="#E5E5E5"> we would</font>

408
00:18:51,970 --> 00:18:56,799
just switch<font color="#CCCCCC"> to page tables back make a</font>

409
00:18:55,269 --> 00:19:00,070
forward<font color="#CCCCCC"> to call to</font><font color="#E5E5E5"> watchtower</font>

410
00:18:56,799 --> 00:19:02,620
make then<font color="#CCCCCC"> Watchtower scan the unmodified</font>

411
00:19:00,070 --> 00:19:08,230
<font color="#CCCCCC">kernel and after the scan we would just</font>

412
00:19:02,620 --> 00:19:10,209
return<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> patched kernel so the</font>

413
00:19:08,230 --> 00:19:13,600
problem<font color="#E5E5E5"> here is time of check time of</font>

414
00:19:10,210 --> 00:19:16,360
use a classical<font color="#CCCCCC"> talk - and this works on</font>

415
00:19:13,600 --> 00:19:20,610
<font color="#E5E5E5">the iPhone 5s the iPhone 6 and the</font>

416
00:19:16,360 --> 00:19:23,590
iPhone 6s<font color="#CCCCCC"> and it's not really patchable</font>

417
00:19:20,610 --> 00:19:26,889
however with the iPhone 7<font color="#E5E5E5"> Apple</font>

418
00:19:23,590 --> 00:19:30,309
<font color="#CCCCCC">introduced KTR which kind of proves that</font>

419
00:19:26,889 --> 00:19:33,879
and they really managed to do an

420
00:19:30,309 --> 00:19:38,019
unmatchable kernel so how does<font color="#CCCCCC"> Katie our</font>

421
00:19:33,879 --> 00:19:40,240
work so kernel text<font color="#CCCCCC"> read-only region I'm</font>

422
00:19:38,019 --> 00:19:43,179
gonna present<font color="#E5E5E5"> as described by Z</font><font color="#CCCCCC"> goose'</font>

423
00:19:40,240 --> 00:19:46,779
in his<font color="#CCCCCC"> blog adds an</font><font color="#E5E5E5"> extra memory</font>

424
00:19:43,179 --> 00:19:51,330
controller which<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> MCC which traps</font>

425
00:19:46,779 --> 00:19:55,059
all rights to<font color="#CCCCCC"> read-only region</font><font color="#E5E5E5"> and</font>

426
00:19:51,330 --> 00:19:57,850
there's extra<font color="#E5E5E5"> CPU registers which mark</font>

427
00:19:55,059 --> 00:20:00,850
an executable range which are the<font color="#CCCCCC"> KTR</font>

428
00:19:57,850 --> 00:20:03,459
registers and they obviously mark is

429
00:20:00,850 --> 00:20:06,399
subsection of the<font color="#E5E5E5"> read-only region so</font>

430
00:20:03,460 --> 00:20:10,019
<font color="#E5E5E5">you have hardware at forcement</font><font color="#CCCCCC"> at boot</font>

431
00:20:06,399 --> 00:20:13,059
time<font color="#E5E5E5"> for a read-only memory region and</font>

432
00:20:10,019 --> 00:20:16,450
<font color="#E5E5E5">hardware forcement</font><font color="#CCCCCC"> at boot time for an</font>

433
00:20:13,059 --> 00:20:18,789
executable memory region so this is the

434
00:20:16,450 --> 00:20:21,429
<font color="#CCCCCC">CPU you this is the memory at the bottom</font>

435
00:20:18,789 --> 00:20:24,879
you would set the read-only region at

436
00:20:21,429 --> 00:20:26,379
boot and since that's<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> but a</font>

437
00:20:24,879 --> 00:20:28,719
<font color="#E5E5E5">hardware memory</font><font color="#CCCCCC"> controller</font><font color="#E5E5E5"> everything</font>

438
00:20:26,379 --> 00:20:32,168
inside<font color="#CCCCCC"> that region is not writable and</font>

439
00:20:28,720 --> 00:20:37,120
<font color="#E5E5E5">everything outside that region is not is</font>

440
00:20:32,169 --> 00:20:39,059
writable<font color="#E5E5E5"> and the CPU got</font><font color="#CCCCCC"> KTR registers</font>

441
00:20:37,120 --> 00:20:42,580
which<font color="#E5E5E5"> marked begin and end</font>

442
00:20:39,059 --> 00:20:45,730
so the executable region is a subsection

443
00:20:42,580 --> 00:20:48,629
of the read-only region everything

444
00:20:45,730 --> 00:20:51,730
<font color="#CCCCCC">outside there cannot be executed</font><font color="#E5E5E5"> by CPU</font>

445
00:20:48,629 --> 00:20:54,639
everything inside the read-only region

446
00:20:51,730 --> 00:20:58,210
<font color="#E5E5E5">cannot be modified and this has not been</font>

447
00:20:54,639 --> 00:21:01,299
truly bypassed<font color="#E5E5E5"> yet there's been</font><font color="#CCCCCC"> a bypass</font>

448
00:20:58,210 --> 00:21:01,990
but that actually targeted how that

449
00:21:01,299 --> 00:21:04,420
thing gets

450
00:21:01,990 --> 00:21:06,730
set up but that's fixed and now<font color="#E5E5E5"> it's</font>

451
00:21:04,420 --> 00:21:10,750
<font color="#E5E5E5">probably setting up everything</font><font color="#CCCCCC"> and so</font>

452
00:21:06,730 --> 00:21:12,309
far it hasn't been bypassed so<font color="#CCCCCC"> genrich's</font>

453
00:21:10,750 --> 00:21:14,920
<font color="#E5E5E5">are still around so what they are doing</font>

454
00:21:12,309 --> 00:21:17,770
<font color="#E5E5E5">well they</font><font color="#CCCCCC"> just walk around</font><font color="#E5E5E5"> Colonel</font>

455
00:21:14,920 --> 00:21:21,730
patches and this is when<font color="#E5E5E5"> KP</font><font color="#CCCCCC"> PGR</font><font color="#E5E5E5"> brakes</font>

456
00:21:17,770 --> 00:21:24,429
evolved<font color="#CCCCCC"> which means yeah well they just</font>

457
00:21:21,730 --> 00:21:26,650
don't patch the<font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> but before we</font>

458
00:21:24,429 --> 00:21:29,679
dive into that<font color="#E5E5E5"> let's take a look what</font>

459
00:21:26,650 --> 00:21:33,460
previous<font color="#CCCCCC"> Gerak's</font><font color="#E5E5E5"> actually did patch in</font>

460
00:21:29,679 --> 00:21:36,040
the kernel<font color="#E5E5E5"> so the general goals are to</font>

461
00:21:33,460 --> 00:21:38,920
<font color="#E5E5E5">disable</font><font color="#CCCCCC"> code-signing</font><font color="#E5E5E5"> to disable the</font>

462
00:21:36,040 --> 00:21:42,190
sandbox<font color="#E5E5E5"> to make the root filesystem</font>

463
00:21:38,920 --> 00:21:45,100
writable and<font color="#CCCCCC"> to somehow</font><font color="#E5E5E5"> make tweaks work</font>

464
00:21:42,190 --> 00:21:47,140
which involves<font color="#CCCCCC"> making mobile substrate</font>

465
00:21:45,100 --> 00:21:51,040
or lip substitute work which is<font color="#E5E5E5"> the</font>

466
00:21:47,140 --> 00:21:53,650
library for hooking<font color="#E5E5E5"> and I was about to</font>

467
00:21:51,040 --> 00:21:55,629
make a list of kernel patches which you

468
00:21:53,650 --> 00:22:00,130
could simply apply however the

469
00:21:55,630 --> 00:22:02,050
techniques<font color="#E5E5E5"> and patches vary across</font>

470
00:22:00,130 --> 00:22:03,760
individual<font color="#CCCCCC"> jerrick so much that I</font>

471
00:22:02,050 --> 00:22:06,270
couldn't<font color="#E5E5E5"> even come</font><font color="#CCCCCC"> up with the list of</font>

472
00:22:03,760 --> 00:22:09,280
kernel patches<font color="#E5E5E5"> among the different</font>

473
00:22:06,270 --> 00:22:11,650
<font color="#CCCCCC">Derrick's I worked on</font><font color="#E5E5E5"> so there's no</font>

474
00:22:09,280 --> 00:22:13,629
<font color="#CCCCCC">general set</font><font color="#E5E5E5"> of patches some prefer</font><font color="#CCCCCC"> to do</font>

475
00:22:11,650 --> 00:22:16,750
it<font color="#E5E5E5"> that way some prefer</font><font color="#CCCCCC"> to that way so</font>

476
00:22:13,630 --> 00:22:19,480
instead<font color="#CCCCCC"> of doing a kind</font><font color="#E5E5E5"> of fullest and</font>

477
00:22:16,750 --> 00:22:23,230
just show<font color="#E5E5E5"> you what the helix jailbreak</font>

478
00:22:19,480 --> 00:22:26,950
does patch so the helix jailbreak first

479
00:22:23,230 --> 00:22:29,980
<font color="#E5E5E5">patches the I</font><font color="#CCCCCC"> Can Has</font><font color="#E5E5E5"> debugger which is</font>

480
00:22:26,950 --> 00:22:31,990
a boot<font color="#E5E5E5"> arc it's a variable in the kernel</font>

481
00:22:29,980 --> 00:22:35,110
<font color="#E5E5E5">and if you set that to true that would</font>

482
00:22:31,990 --> 00:22:37,000
relax the sandbox<font color="#E5E5E5"> so to relax the</font>

483
00:22:35,110 --> 00:22:40,449
sandbox or<font color="#E5E5E5"> to disable code signing</font>

484
00:22:37,000 --> 00:22:43,030
usually involves multiple steps<font color="#CCCCCC"> also</font>

485
00:22:40,450 --> 00:22:46,570
<font color="#CCCCCC">since iOS</font><font color="#E5E5E5"> 7 you need to patch mount</font>

486
00:22:43,030 --> 00:22:49,030
<font color="#E5E5E5">because there's actual hard-coded that</font>

487
00:22:46,570 --> 00:22:52,629
the root file system cannot be mounted

488
00:22:49,030 --> 00:22:54,460
as<font color="#CCCCCC"> readwrite since I was ten point three</font>

489
00:22:52,630 --> 00:22:56,320
there's also hard-coded that you cannot

490
00:22:54,460 --> 00:22:59,260
mount<font color="#E5E5E5"> the root file system without the</font>

491
00:22:56,320 --> 00:23:02,020
<font color="#CCCCCC">know suet flag</font><font color="#E5E5E5"> so you probably want to</font>

492
00:22:59,260 --> 00:23:04,240
patch that out as well and then if you

493
00:23:02,020 --> 00:23:05,770
patch both these you can remount<font color="#E5E5E5"> the</font>

494
00:23:04,240 --> 00:23:08,620
root<font color="#E5E5E5"> filesystem as read</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> write</font>

495
00:23:05,770 --> 00:23:11,139
<font color="#E5E5E5">however you cannot</font><font color="#CCCCCC"> actually write to the</font>

496
00:23:08,620 --> 00:23:13,899
files on a root filesystem<font color="#E5E5E5"> unless you</font>

497
00:23:11,140 --> 00:23:15,610
patch like<font color="#E5E5E5"> that volume manager which you</font>

498
00:23:13,900 --> 00:23:19,030
also<font color="#E5E5E5"> only need to do in</font>

499
00:23:15,610 --> 00:23:21,040
<font color="#E5E5E5">nine up to iOS</font><font color="#CCCCCC"> ten point three</font><font color="#E5E5E5"> later</font>

500
00:23:19,030 --> 00:23:24,460
when<font color="#E5E5E5"> they're switched to a PFS you don't</font>

501
00:23:21,040 --> 00:23:26,799
actually need<font color="#CCCCCC"> that anymore</font><font color="#E5E5E5"> also there's</font>

502
00:23:24,460 --> 00:23:31,150
a variable called proc<font color="#E5E5E5"> and</font><font color="#CCCCCC"> force</font><font color="#E5E5E5"> you</font>

503
00:23:26,799 --> 00:23:33,190
said that<font color="#E5E5E5"> to zero to do disable</font>

504
00:23:31,150 --> 00:23:35,910
<font color="#CCCCCC">code-signing</font><font color="#E5E5E5"> which is one of the things</font>

505
00:23:33,190 --> 00:23:39,220
you need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do to</font><font color="#CCCCCC"> disable code</font><font color="#E5E5E5"> signing</font>

506
00:23:35,910 --> 00:23:43,540
another flag is CS enforcement<font color="#CCCCCC"> disable</font>

507
00:23:39,220 --> 00:23:47,140
set that to<font color="#E5E5E5"> one</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> to disable code</font>

508
00:23:43,540 --> 00:23:51,570
signing so<font color="#CCCCCC"> amfi which is Apple mobile</font>

509
00:23:47,140 --> 00:23:55,030
file integrity<font color="#E5E5E5"> you seek</font><font color="#CCCCCC"> ax which handles</font>

510
00:23:51,570 --> 00:23:58,899
<font color="#E5E5E5">the</font><font color="#CCCCCC"> code signing checks</font><font color="#E5E5E5"> so in that tax</font>

511
00:23:55,030 --> 00:24:01,210
<font color="#E5E5E5">there its imports the mem copy function</font>

512
00:23:58,900 --> 00:24:04,600
<font color="#CCCCCC">so there's a stub and</font><font color="#E5E5E5"> one of the patches</font>

513
00:24:01,210 --> 00:24:08,230
<font color="#E5E5E5">is to patch that</font><font color="#CCCCCC"> stop to always return</font>

514
00:24:04,600 --> 00:24:10,178
<font color="#CCCCCC">zero by some</font><font color="#E5E5E5"> simple gadget so what this</font>

515
00:24:08,230 --> 00:24:12,790
<font color="#E5E5E5">does</font><font color="#CCCCCC"> is whenever it</font><font color="#E5E5E5"> compares something</font>

516
00:24:10,179 --> 00:24:15,340
in the code it would just always compare

517
00:24:12,790 --> 00:24:18,190
say that this the compare succeeds and

518
00:24:15,340 --> 00:24:21,178
is equal<font color="#E5E5E5"> I'm not entirely sure what it</font>

519
00:24:18,190 --> 00:24:23,919
does<font color="#CCCCCC"> so this patch dates back to Yahoo</font>

520
00:24:21,179 --> 00:24:25,809
<font color="#CCCCCC">but like</font><font color="#E5E5E5"> just applying the patch helps</font>

521
00:24:23,919 --> 00:24:29,559
killing code signing so that's why it's

522
00:24:25,809 --> 00:24:32,649
in there<font color="#E5E5E5"> another thing he makes this is</font>

523
00:24:29,559 --> 00:24:35,649
it adds the get<font color="#CCCCCC"> task low entitlement to</font>

524
00:24:32,650 --> 00:24:38,799
every process and this<font color="#E5E5E5"> is for allowing</font>

525
00:24:35,650 --> 00:24:41,250
retrial executable mappings<font color="#E5E5E5"> and this is</font>

526
00:24:38,799 --> 00:24:45,160
what you want for<font color="#E5E5E5"> mobile substrate weeks</font>

527
00:24:41,250 --> 00:24:46,840
so<font color="#E5E5E5"> initially these this entitlement is</font>

528
00:24:45,160 --> 00:24:49,750
used for debugging<font color="#E5E5E5"> because there you</font>

529
00:24:46,840 --> 00:24:53,020
also need to<font color="#CCCCCC"> be able to modify code at</font>

530
00:24:49,750 --> 00:24:56,470
<font color="#E5E5E5">runtime for setting breakpoints what we</font>

531
00:24:53,020 --> 00:24:59,260
use it for<font color="#E5E5E5"> getting tweaks to work since</font>

532
00:24:56,470 --> 00:25:01,799
I was<font color="#E5E5E5"> ten point three there's helix also</font>

533
00:24:59,260 --> 00:25:06,160
patches label update exact<font color="#E5E5E5"> ve patch</font>

534
00:25:01,799 --> 00:25:08,500
<font color="#E5E5E5">label apps update exit</font><font color="#CCCCCC"> via function</font><font color="#E5E5E5"> so</font>

535
00:25:06,160 --> 00:25:10,419
the idea<font color="#E5E5E5"> of that patch was to fix the</font>

536
00:25:08,500 --> 00:25:12,970
process<font color="#E5E5E5"> X like the night while I</font>

537
00:25:10,419 --> 00:25:15,190
updating label error message in<font color="#CCCCCC"> cydia</font>

538
00:25:12,970 --> 00:25:17,590
and several other process<font color="#E5E5E5"> well that</font>

539
00:25:15,190 --> 00:25:19,870
seems<font color="#E5E5E5"> to completely new to sandbox and</font>

540
00:25:17,590 --> 00:25:22,750
also<font color="#CCCCCC"> break sandbox containers so this is</font>

541
00:25:19,870 --> 00:25:25,330
also<font color="#E5E5E5"> the reason while</font><font color="#CCCCCC"> why if you jur</font>

542
00:25:22,750 --> 00:25:28,240
<font color="#E5E5E5">broke with helix apps would save their</font>

543
00:25:25,330 --> 00:25:29,240
data in the global directory instead<font color="#E5E5E5"> of</font>

544
00:25:28,240 --> 00:25:33,020
their sandbox content

545
00:25:29,240 --> 00:25:37,010
and you also kill a bunch of checks in

546
00:25:33,020 --> 00:25:40,520
<font color="#CCCCCC">Mack or policy</font><font color="#E5E5E5"> make policy ops to relax</font>

547
00:25:37,010 --> 00:25:42,320
the sandbox so if you want to check<font color="#E5E5E5"> out</font>

548
00:25:40,520 --> 00:25:44,658
how<font color="#E5E5E5"> that works yourself</font>

549
00:25:42,320 --> 00:25:46,010
unfortunately<font color="#CCCCCC"> Hilux itself is not on</font>

550
00:25:44,659 --> 00:25:49,159
source and I have no plans of

551
00:25:46,010 --> 00:25:51,559
<font color="#E5E5E5">outsourcing that but there's two very</font>

552
00:25:49,159 --> 00:25:54,440
<font color="#E5E5E5">very closely related projects which are</font>

553
00:25:51,559 --> 00:25:58,090
open<font color="#E5E5E5"> source which is double helix</font><font color="#CCCCCC"> this</font>

554
00:25:54,440 --> 00:26:02,510
is pretty much<font color="#E5E5E5"> exactly</font><font color="#CCCCCC"> the same but 460</font>

555
00:25:58,090 --> 00:26:04,879
<font color="#CCCCCC">64-bit devices which does include the</font>

556
00:26:02,510 --> 00:26:09,110
<font color="#CCCCCC">kpp bypass so it also patches the</font><font color="#E5E5E5"> kernel</font>

557
00:26:04,880 --> 00:26:12,169
and job rack time which is the watcher

558
00:26:09,110 --> 00:26:14,449
<font color="#E5E5E5">was jailbreak but he'll helix is for</font>

559
00:26:12,169 --> 00:26:17,750
<font color="#CCCCCC">iowa's</font><font color="#E5E5E5"> 10 and the</font><font color="#CCCCCC"> watch OS jailbreak is</font>

560
00:26:14,450 --> 00:26:20,179
kind of the<font color="#CCCCCC"> I 11</font><font color="#E5E5E5"> equivalent but it</font>

561
00:26:17,750 --> 00:26:21,679
shares like most of the<font color="#E5E5E5"> code so most of</font>

562
00:26:20,179 --> 00:26:25,720
the patch code is the same if you<font color="#E5E5E5"> want</font>

563
00:26:21,679 --> 00:26:29,270
to<font color="#E5E5E5"> check that out</font><font color="#CCCCCC"> check these out so</font>

564
00:26:25,720 --> 00:26:31,940
<font color="#CCCCCC">kbps Gerak's</font><font color="#E5E5E5"> so the</font><font color="#CCCCCC"> idea is don't patch</font>

565
00:26:29,270 --> 00:26:35,270
the kernel code but instead<font color="#E5E5E5"> patch the</font>

566
00:26:31,940 --> 00:26:36,919
data so for an<font color="#CCCCCC"> example we go for</font>

567
00:26:35,270 --> 00:26:38,990
remounting the root filesystem we know

568
00:26:36,919 --> 00:26:40,510
we have<font color="#CCCCCC"> hard-coded</font><font color="#E5E5E5"> checks which forbid</font>

569
00:26:38,990 --> 00:26:43,789
us<font color="#CCCCCC"> to mount the root filesystem</font>

570
00:26:40,510 --> 00:26:46,010
<font color="#CCCCCC">readwrite but what we can do is in the</font>

571
00:26:43,789 --> 00:26:48,470
kernel there's a structure representing

572
00:26:46,010 --> 00:26:50,870
<font color="#E5E5E5">a root filesystem and we can patch that</font>

573
00:26:48,470 --> 00:26:52,580
structure moving the flag<font color="#E5E5E5"> saying that</font>

574
00:26:50,870 --> 00:26:55,879
this structure<font color="#E5E5E5"> represents the root</font>

575
00:26:52,580 --> 00:26:58,549
filesystem<font color="#CCCCCC"> and we</font><font color="#E5E5E5"> simply remove that and</font>

576
00:26:55,880 --> 00:26:59,179
<font color="#E5E5E5">then</font><font color="#CCCCCC"> we can call remount</font><font color="#E5E5E5"> on the root</font>

577
00:26:58,549 --> 00:27:01,879
filesystem

578
00:26:59,179 --> 00:27:04,510
and then we put back in the flag<font color="#E5E5E5"> so we</font>

579
00:27:01,880 --> 00:27:07,940
kind of bypassed the<font color="#E5E5E5"> hard-coded check</font>

580
00:27:04,510 --> 00:27:09,020
for disabling code signing<font color="#E5E5E5"> and savings</font>

581
00:27:07,940 --> 00:27:11,990
and box

582
00:27:09,020 --> 00:27:13,820
there's several<font color="#E5E5E5"> approaches so when the</font>

583
00:27:11,990 --> 00:27:17,480
kernel there's a trust cache so usually

584
00:27:13,820 --> 00:27:19,039
MV handles the code signing the daemon

585
00:27:17,480 --> 00:27:21,710
<font color="#CCCCCC">user space handles the code signing</font>

586
00:27:19,039 --> 00:27:23,120
requests but the demon<font color="#E5E5E5"> itself also needs</font>

587
00:27:21,710 --> 00:27:24,860
<font color="#CCCCCC">to be called saying so you have the</font>

588
00:27:23,120 --> 00:27:27,918
chicken<font color="#CCCCCC"> and egg problem that's why in</font>

589
00:27:24,860 --> 00:27:30,139
the kernel there is a list of hashes<font color="#E5E5E5"> of</font>

590
00:27:27,919 --> 00:27:32,779
binaries which<font color="#E5E5E5"> are allowed to execute</font>

591
00:27:30,140 --> 00:27:34,700
and this thing is actually writable

592
00:27:32,779 --> 00:27:36,559
because when you<font color="#E5E5E5"> mount the developer</font>

593
00:27:34,700 --> 00:27:39,500
disk image<font color="#E5E5E5"> it actually adds some</font>

594
00:27:36,559 --> 00:27:41,539
debugging<font color="#E5E5E5"> things</font><font color="#CCCCCC"> to it so you</font><font color="#E5E5E5"> can simply</font>

595
00:27:39,500 --> 00:27:42,980
inject<font color="#E5E5E5"> your own hash into the trust</font>

596
00:27:41,539 --> 00:27:46,370
cache making by an

597
00:27:42,980 --> 00:27:49,880
<font color="#E5E5E5">we trusted another</font><font color="#CCCCCC"> approach taken by</font>

598
00:27:46,370 --> 00:27:52,850
<font color="#CCCCCC">Jarek D in the latest electric is to</font>

599
00:27:49,880 --> 00:27:56,600
have a process in this case Jarek D

600
00:27:52,850 --> 00:27:58,639
which would<font color="#E5E5E5"> patch the processes on</font>

601
00:27:56,600 --> 00:28:00,350
creation so when you spawn a process

602
00:27:58,640 --> 00:28:04,070
that thing would immediately stop the

603
00:28:00,350 --> 00:28:06,949
<font color="#E5E5E5">process go into the kernel look up the</font>

604
00:28:04,070 --> 00:28:10,639
structure and say and remove the flags

605
00:28:06,950 --> 00:28:12,200
<font color="#E5E5E5">saying kill this process when the code</font>

606
00:28:10,640 --> 00:28:14,780
signature<font color="#E5E5E5"> becomes involved and it will</font>

607
00:28:12,200 --> 00:28:18,169
<font color="#CCCCCC">invalid and</font><font color="#E5E5E5"> it would also add the get</font>

608
00:28:14,780 --> 00:28:20,240
<font color="#CCCCCC">task low entitlement</font><font color="#E5E5E5"> and then after it's</font>

609
00:28:18,169 --> 00:28:22,490
done that<font color="#E5E5E5"> it would resume the process</font>

610
00:28:20,240 --> 00:28:23,929
and then the<font color="#E5E5E5"> process won't get killed</font>

611
00:28:22,490 --> 00:28:28,760
<font color="#CCCCCC">anymore because</font><font color="#E5E5E5"> it's kind of already</font>

612
00:28:23,929 --> 00:28:32,660
trusted and the third<font color="#CCCCCC"> approach taken or</font>

613
00:28:28,760 --> 00:28:35,960
demoed by<font color="#CCCCCC"> Bizet</font><font color="#E5E5E5"> was to take over MPD in</font>

614
00:28:32,660 --> 00:28:40,520
<font color="#CCCCCC">userspace</font><font color="#E5E5E5"> completely so if you can get a</font>

615
00:28:35,960 --> 00:28:42,980
<font color="#CCCCCC">Mac port to launch D or</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> AM VD you can</font>

616
00:28:40,520 --> 00:28:46,850
impersonate that<font color="#E5E5E5"> and whenever the kernel</font>

617
00:28:42,980 --> 00:28:48,620
asks and<font color="#CCCCCC"> fee is that is that</font><font color="#E5E5E5"> trusted you</font>

618
00:28:46,850 --> 00:28:50,840
would reply okay yeah that's trusted

619
00:28:48,620 --> 00:28:53,500
it's fine you<font color="#E5E5E5"> can run it so that way you</font>

620
00:28:50,840 --> 00:28:59,270
don't<font color="#CCCCCC"> need to go for the</font><font color="#E5E5E5"> kernel at all</font>

621
00:28:53,500 --> 00:29:02,120
so future<font color="#CCCCCC"> Gerak's</font><font color="#E5E5E5"> kernel patches are not</font>

622
00:28:59,270 --> 00:29:04,549
really<font color="#CCCCCC"> possible anymore</font><font color="#E5E5E5"> and they're not</font>

623
00:29:02,120 --> 00:29:08,570
even<font color="#E5E5E5"> required because</font><font color="#CCCCCC"> we can still patch</font>

624
00:29:04,549 --> 00:29:12,770
the kernel data or not go for the kernel

625
00:29:08,570 --> 00:29:15,439
at all<font color="#E5E5E5"> while we're still not done yet we</font>

626
00:29:12,770 --> 00:29:19,629
still didn't go for<font color="#CCCCCC"> post apocalyptic and</font>

627
00:29:15,440 --> 00:29:22,340
<font color="#CCCCCC">post apocalyptic</font><font color="#E5E5E5"> or short pack</font>

628
00:29:19,630 --> 00:29:25,100
well<font color="#E5E5E5"> actually pack stands for</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> out</font>

629
00:29:22,340 --> 00:29:27,320
education code but you<font color="#CCCCCC"> get</font><font color="#E5E5E5"> a joke so</font>

630
00:29:25,100 --> 00:29:30,620
point authentication codes were

631
00:29:27,320 --> 00:29:32,840
introduced<font color="#CCCCCC"> with the iPhone</font><font color="#E5E5E5"> XS and we</font>

632
00:29:30,620 --> 00:29:36,439
<font color="#CCCCCC">called</font><font color="#E5E5E5"> Qualcomm this is a stronger</font>

633
00:29:32,840 --> 00:29:38,840
version of stack protection and pointer

634
00:29:36,440 --> 00:29:41,570
<font color="#E5E5E5">identification codes are similar to</font>

635
00:29:38,840 --> 00:29:43,280
message authentication codes<font color="#E5E5E5"> but for</font>

636
00:29:41,570 --> 00:29:47,270
pointers if<font color="#CCCCCC"> you're familiar with</font><font color="#E5E5E5"> that</font>

637
00:29:43,280 --> 00:29:52,190
and the<font color="#E5E5E5"> idea of that</font><font color="#CCCCCC"> is to</font><font color="#E5E5E5"> protect data</font>

638
00:29:47,270 --> 00:29:54,650
<font color="#E5E5E5">in</font><font color="#CCCCCC"> memory in relation to a context with</font>

639
00:29:52,190 --> 00:29:56,750
a secret<font color="#E5E5E5"> key so the data and memory</font>

640
00:29:54,650 --> 00:29:58,670
<font color="#E5E5E5">could be the return value</font>

641
00:29:56,750 --> 00:30:01,490
the context<font color="#E5E5E5"> could be the stack pointer</font>

642
00:29:58,670 --> 00:30:03,650
or data<font color="#E5E5E5"> memory could be a function</font>

643
00:30:01,490 --> 00:30:09,290
pointer<font color="#E5E5E5"> and the context could be a</font><font color="#CCCCCC"> V</font>

644
00:30:03,650 --> 00:30:11,950
table so if we take<font color="#E5E5E5"> a look how</font><font color="#CCCCCC"> PAC is</font>

645
00:30:09,290 --> 00:30:15,050
implemented<font color="#CCCCCC"> so at the left you can</font><font color="#E5E5E5"> see</font>

646
00:30:11,950 --> 00:30:16,880
<font color="#CCCCCC">function entry and like function Prolog</font>

647
00:30:15,050 --> 00:30:19,370
and<font color="#E5E5E5"> function</font><font color="#CCCCCC"> epilogue without</font><font color="#E5E5E5"> PAC and</font>

648
00:30:16,880 --> 00:30:22,660
<font color="#E5E5E5">would pack the only thing that really</font>

649
00:30:19,370 --> 00:30:26,169
<font color="#CCCCCC">changes is</font><font color="#E5E5E5"> when you enter a function</font>

650
00:30:22,660 --> 00:30:28,940
<font color="#E5E5E5">before actually doing</font><font color="#CCCCCC"> anything inside</font><font color="#E5E5E5"> it</font>

651
00:30:26,170 --> 00:30:31,580
<font color="#CCCCCC">you would normally store the return</font>

652
00:30:28,940 --> 00:30:34,430
value on<font color="#CCCCCC"> the stack but</font><font color="#E5E5E5"> when doing that</font>

653
00:30:31,580 --> 00:30:39,260
you would first authenticate the pointer

654
00:30:34,430 --> 00:30:41,390
<font color="#E5E5E5">with the context and then kind of create</font>

655
00:30:39,260 --> 00:30:43,340
a signature<font color="#E5E5E5"> and store it inside the</font>

656
00:30:41,390 --> 00:30:45,920
pointer<font color="#CCCCCC"> and then put it on</font><font color="#E5E5E5"> the stack and</font>

657
00:30:43,340 --> 00:30:48,350
<font color="#E5E5E5">then when you leave the function you</font>

658
00:30:45,920 --> 00:30:51,560
<font color="#E5E5E5">would just take back the pointer again</font>

659
00:30:48,350 --> 00:30:54,139
calculate<font color="#CCCCCC"> the signature and see if these</font>

660
00:30:51,560 --> 00:30:56,780
both thing that the signatures matches

661
00:30:54,140 --> 00:30:58,730
and if they do then just<font color="#E5E5E5"> return and if</font>

662
00:30:56,780 --> 00:31:03,889
the signature is invalid you would just

663
00:30:58,730 --> 00:31:07,310
throw a hardware fault so this is how it

664
00:31:03,890 --> 00:31:12,260
looks<font color="#E5E5E5"> like for 64-bit pointers you don't</font>

665
00:31:07,310 --> 00:31:15,110
<font color="#E5E5E5">really use all of the available bits so</font>

666
00:31:12,260 --> 00:31:17,540
<font color="#E5E5E5">I usually</font><font color="#CCCCCC"> use 48 bits for virtual</font><font color="#E5E5E5"> memory</font>

667
00:31:15,110 --> 00:31:20,659
which is<font color="#E5E5E5"> more than enough</font><font color="#CCCCCC"> so you have if</font>

668
00:31:17,540 --> 00:31:22,790
you use memory tagging<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> seven</font>

669
00:31:20,660 --> 00:31:26,120
bits<font color="#E5E5E5"> left for putting in the signature</font>

670
00:31:22,790 --> 00:31:29,300
or<font color="#E5E5E5"> if you do not use memory tagging you</font>

671
00:31:26,120 --> 00:31:35,239
can use up to<font color="#E5E5E5"> 15 bits for the point</font>

672
00:31:29,300 --> 00:31:39,470
authentication code<font color="#E5E5E5"> so the basic</font><font color="#CCCCCC"> idea of</font>

673
00:31:35,240 --> 00:31:42,620
<font color="#CCCCCC">PAC is to kill wrap like code reuse</font>

674
00:31:39,470 --> 00:31:44,570
attacks<font color="#E5E5E5"> you cannot simply smash the</font>

675
00:31:42,620 --> 00:31:49,939
stack and create a<font color="#E5E5E5"> wrap chain because</font>

676
00:31:44,570 --> 00:31:52,399
every return would have an instruction

677
00:31:49,940 --> 00:31:54,950
verifying the signature of<font color="#E5E5E5"> the return</font>

678
00:31:52,400 --> 00:31:58,220
value and that<font color="#CCCCCC"> nee means you would need</font>

679
00:31:54,950 --> 00:32:01,130
to sign everything every<font color="#E5E5E5"> single of these</font>

680
00:31:58,220 --> 00:32:05,150
pointers<font color="#E5E5E5"> and since you don't know the</font>

681
00:32:01,130 --> 00:32:07,730
key you can't do<font color="#CCCCCC"> that in advance so</font><font color="#E5E5E5"> you</font>

682
00:32:05,150 --> 00:32:10,640
cannot modify<font color="#E5E5E5"> a return value and you</font>

683
00:32:07,730 --> 00:32:14,270
cannot swap<font color="#CCCCCC"> two signed values and</font>

684
00:32:10,640 --> 00:32:20,870
unless the stake pointer is the same for

685
00:32:14,270 --> 00:32:24,530
both<font color="#E5E5E5"> can we bypass it maybe I don't know</font>

686
00:32:20,870 --> 00:32:28,250
<font color="#E5E5E5">but we can take a look at how</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> thing</font>

687
00:32:24,530 --> 00:32:32,480
is implemented<font color="#E5E5E5"> so if we take a look at</font>

688
00:32:28,250 --> 00:32:35,690
the arm slides<font color="#E5E5E5"> you can see that pack</font><font color="#CCCCCC"> is</font>

689
00:32:32,480 --> 00:32:38,240
basically<font color="#E5E5E5"> derived from a pointer and a</font>

690
00:32:35,690 --> 00:32:41,000
64-bit context value<font color="#E5E5E5"> and the key and we</font>

691
00:32:38,240 --> 00:32:44,570
put all of that<font color="#E5E5E5"> in the algorithm P and</font>

692
00:32:41,000 --> 00:32:45,710
<font color="#E5E5E5">that gives us the</font><font color="#CCCCCC"> pack</font><font color="#E5E5E5"> which we store in</font>

693
00:32:44,570 --> 00:32:49,280
the unused bits

694
00:32:45,710 --> 00:32:51,680
so the algorithm P can either be karma

695
00:32:49,280 --> 00:32:56,840
<font color="#E5E5E5">or it can be something completely custom</font>

696
00:32:51,680 --> 00:32:59,800
and the instructions<font color="#E5E5E5"> the arm instruction</font>

697
00:32:56,840 --> 00:33:04,490
kind of hide the<font color="#CCCCCC"> implementation details</font>

698
00:32:59,800 --> 00:33:08,840
so if we would go for attacking<font color="#E5E5E5"> pack</font>

699
00:33:04,490 --> 00:33:12,590
<font color="#E5E5E5">there's two ways of attack strategies we</font>

700
00:33:08,840 --> 00:33:15,110
<font color="#CCCCCC">can either try</font><font color="#E5E5E5"> and go straight</font><font color="#CCCCCC"> for the</font>

701
00:33:12,590 --> 00:33:18,649
<font color="#E5E5E5">cryptographic primitive like take a look</font>

702
00:33:15,110 --> 00:33:21,169
what cipher that<font color="#E5E5E5"> is or how that cipher</font>

703
00:33:18,650 --> 00:33:24,650
is implement or maybe it's weak<font color="#E5E5E5"> or we</font>

704
00:33:21,170 --> 00:33:27,710
can go<font color="#E5E5E5"> and attack the implementation so</font>

705
00:33:24,650 --> 00:33:29,930
if we go and attack<font color="#E5E5E5"> the</font><font color="#CCCCCC"> implementation</font>

706
00:33:27,710 --> 00:33:33,230
we could look for signing primitives

707
00:33:29,930 --> 00:33:37,330
<font color="#E5E5E5">which could be like small gadgets we</font>

708
00:33:33,230 --> 00:33:40,700
could jump<font color="#E5E5E5"> to somehow somehow execute to</font>

709
00:33:37,330 --> 00:33:42,830
sign<font color="#E5E5E5"> it to sign a value which could be</font>

710
00:33:40,700 --> 00:33:47,000
either<font color="#E5E5E5"> an arbitrary</font><font color="#CCCCCC"> contact</font><font color="#E5E5E5"> signing</font>

711
00:33:42,830 --> 00:33:50,449
gadgets<font color="#E5E5E5"> or maybe a fixed context signing</font>

712
00:33:47,000 --> 00:33:53,180
gadget we could also<font color="#E5E5E5"> look for an</font>

713
00:33:50,450 --> 00:33:57,110
authenticated code for<font color="#CCCCCC"> example I</font><font color="#E5E5E5"> imagine</font>

714
00:33:53,180 --> 00:33:59,690
the code which sets up pack itself<font color="#E5E5E5"> is</font>

715
00:33:57,110 --> 00:34:03,469
probably<font color="#E5E5E5"> not protected by</font><font color="#CCCCCC"> pact</font><font color="#E5E5E5"> because</font>

716
00:33:59,690 --> 00:34:04,610
you can't sign<font color="#E5E5E5"> the pointer if the key is</font>

717
00:34:03,470 --> 00:34:07,850
<font color="#E5E5E5">not set up yet</font>

718
00:34:04,610 --> 00:34:10,279
maybe that code is still accessible<font color="#CCCCCC"> we</font>

719
00:34:07,850 --> 00:34:14,929
could look for<font color="#E5E5E5"> something</font><font color="#CCCCCC"> like that we</font>

720
00:34:10,280 --> 00:34:18,710
could also<font color="#E5E5E5"> try to replace pointers which</font>

721
00:34:14,929 --> 00:34:22,699
share<font color="#CCCCCC"> the same context it's probably not</font>

722
00:34:18,710 --> 00:34:24,109
feasible<font color="#E5E5E5"> for return values on the stack</font>

723
00:34:22,699 --> 00:34:26,888
but maybe that's fees

724
00:34:24,109 --> 00:34:29,839
<font color="#E5E5E5">before swapping pointers in</font><font color="#CCCCCC"> the B table</font>

725
00:34:26,889 --> 00:34:32,269
<font color="#E5E5E5">or maybe you come up</font><font color="#CCCCCC"> with your own</font>

726
00:34:29,839 --> 00:34:36,679
clever idea or how to<font color="#E5E5E5"> you bypass that</font>

727
00:34:32,268 --> 00:34:39,589
this is<font color="#E5E5E5"> just like some ideas so I want</font>

728
00:34:36,679 --> 00:34:42,769
<font color="#E5E5E5">to make a point here</font><font color="#CCCCCC"> that in my opinion</font>

729
00:34:39,589 --> 00:34:45,980
it<font color="#E5E5E5"> doesn't make much</font><font color="#CCCCCC"> sense to</font><font color="#E5E5E5"> try to</font>

730
00:34:42,768 --> 00:34:50,598
attack<font color="#E5E5E5"> the underlying cryptography</font>

731
00:34:45,980 --> 00:34:52,009
unpack<font color="#E5E5E5"> so I think that if we go for</font>

732
00:34:50,599 --> 00:34:55,190
attacking<font color="#E5E5E5"> peg it makes much more sense</font>

733
00:34:52,009 --> 00:34:57,200
to<font color="#E5E5E5"> look</font><font color="#CCCCCC"> for implementation</font><font color="#E5E5E5"> attacks and</font>

734
00:34:55,190 --> 00:35:00,710
not attacking<font color="#E5E5E5"> to cryptography in next</font>

735
00:34:57,200 --> 00:35:04,368
few slides<font color="#E5E5E5"> are just there to explain why</font>

736
00:35:00,710 --> 00:35:07,910
I<font color="#CCCCCC"> think</font><font color="#E5E5E5"> that so if we take a look at</font>

737
00:35:04,369 --> 00:35:10,249
<font color="#CCCCCC">karma which was proposed by armed as</font>

738
00:35:07,910 --> 00:35:14,509
being one of the possible ways<font color="#E5E5E5"> of</font>

739
00:35:10,249 --> 00:35:16,609
implementing<font color="#E5E5E5"> pak pak</font><font color="#CCCCCC"> karma is a</font>

740
00:35:14,509 --> 00:35:19,539
tweakable block cipher so it takes an

741
00:35:16,609 --> 00:35:22,670
input<font color="#E5E5E5"> a tweak and gives you an output</font>

742
00:35:19,539 --> 00:35:25,339
<font color="#E5E5E5">which kind of fits perfectly for</font><font color="#CCCCCC"> what we</font>

743
00:35:22,670 --> 00:35:29,690
want and then<font color="#E5E5E5"> I started looking at</font><font color="#CCCCCC"> pak</font>

744
00:35:25,339 --> 00:35:32,690
at Karma and came up come<font color="#E5E5E5"> up with ideas</font>

745
00:35:29,690 --> 00:35:34,640
how<font color="#E5E5E5"> you could maybe attack that cipher</font>

746
00:35:32,690 --> 00:35:38,390
and at some point I realized<font color="#CCCCCC"> that</font>

747
00:35:34,640 --> 00:35:40,549
practical crypto attacks on<font color="#CCCCCC"> karma if</font>

748
00:35:38,390 --> 00:35:43,460
there will be any in the<font color="#E5E5E5"> future</font><font color="#CCCCCC"> will</font>

749
00:35:40,549 --> 00:35:47,509
probably<font color="#E5E5E5"> that's what I think completely</font>

750
00:35:43,460 --> 00:35:51,980
<font color="#E5E5E5">irrelevant to the pack security so why</font>

751
00:35:47,509 --> 00:35:53,900
is that if we<font color="#E5E5E5"> define so just so you know</font>

752
00:35:51,980 --> 00:35:57,499
the<font color="#E5E5E5"> next few slides gonna bore</font><font color="#CCCCCC"> you with</font>

753
00:35:53,900 --> 00:36:01,190
some math<font color="#E5E5E5"> but it's not too complex so if</font>

754
00:35:57,499 --> 00:36:05,988
we define<font color="#CCCCCC"> pack as a function which takes</font>

755
00:36:01,190 --> 00:36:10,640
a<font color="#E5E5E5"> 120 bits input and</font><font color="#CCCCCC"> a 120 bit</font><font color="#E5E5E5"> key and</font>

756
00:36:05,989 --> 00:36:12,710
maps it<font color="#CCCCCC"> to 15 bits outputs</font><font color="#E5E5E5"> or we can</font>

757
00:36:10,640 --> 00:36:15,259
more realistically define it as a

758
00:36:12,710 --> 00:36:20,420
<font color="#E5E5E5">function which takes 96 bits input with</font>

759
00:36:15,259 --> 00:36:22,999
the 128-bit key because<font color="#E5E5E5"> we have 48 bits</font>

760
00:36:20,420 --> 00:36:24,619
pointer because the other ones we can't

761
00:36:22,999 --> 00:36:27,348
use<font color="#CCCCCC"> because that's</font><font color="#E5E5E5"> where we store</font><font color="#CCCCCC"> the</font>

762
00:36:24,619 --> 00:36:30,319
signature and we most likely using<font color="#E5E5E5"> the</font>

763
00:36:27,349 --> 00:36:34,009
stack pointer as a context so<font color="#CCCCCC"> that one</font>

764
00:36:30,319 --> 00:36:37,220
<font color="#E5E5E5">will</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> only use 48 bit pointers 48</font>

765
00:36:34,009 --> 00:36:39,950
bits so then

766
00:36:37,220 --> 00:36:42,680
we have a<font color="#CCCCCC"> pact as a</font><font color="#E5E5E5"> contract so then we</font>

767
00:36:39,950 --> 00:36:45,020
define the<font color="#E5E5E5"> attacker with following</font>

768
00:36:42,680 --> 00:36:48,649
capabilities<font color="#CCCCCC"> the attacker</font><font color="#E5E5E5"> is allowed to</font>

769
00:36:45,020 --> 00:36:51,050
observe some<font color="#E5E5E5"> pointer and signature pairs</font>

770
00:36:48,650 --> 00:36:52,970
<font color="#CCCCCC">and I assume that</font><font color="#E5E5E5"> you can get there</font>

771
00:36:51,050 --> 00:36:55,069
<font color="#CCCCCC">through some info lease for example you</font>

772
00:36:52,970 --> 00:36:57,649
have some<font color="#E5E5E5"> buck in the code which lets</font>

773
00:36:55,069 --> 00:37:01,339
you dump<font color="#E5E5E5"> a portion of the stack which</font>

774
00:36:57,650 --> 00:37:04,730
with a bunch of sign pointers this<font color="#E5E5E5"> is</font>

775
00:37:01,339 --> 00:37:07,130
why I can observe<font color="#CCCCCC"> some not all but he</font>

776
00:37:04,730 --> 00:37:11,060
can see some and I would also love to

777
00:37:07,130 --> 00:37:13,520
<font color="#E5E5E5">have the attacker</font><font color="#CCCCCC"> be able to slightly</font>

778
00:37:11,060 --> 00:37:15,920
<font color="#E5E5E5">modify</font><font color="#CCCCCC"> the context and</font><font color="#E5E5E5"> what I mean</font><font color="#CCCCCC"> by</font>

779
00:37:13,520 --> 00:37:18,589
<font color="#CCCCCC">that</font><font color="#E5E5E5"> is I</font><font color="#CCCCCC"> imagine a scenario where you</font>

780
00:37:15,920 --> 00:37:21,530
the attacker could maybe shift the stack

781
00:37:18,589 --> 00:37:24,259
<font color="#E5E5E5">maybe through more nested function calls</font>

782
00:37:21,530 --> 00:37:28,700
before<font color="#E5E5E5"> executing the</font><font color="#CCCCCC"> leak which will</font>

783
00:37:24,260 --> 00:37:30,380
give you actually two signatures for<font color="#CCCCCC"> the</font>

784
00:37:28,700 --> 00:37:31,460
same pointer but with a different

785
00:37:30,380 --> 00:37:35,569
context

786
00:37:31,460 --> 00:37:38,599
<font color="#E5E5E5">maybe that's</font><font color="#CCCCCC"> somehow</font><font color="#E5E5E5"> helpful but so we</font>

787
00:37:35,569 --> 00:37:41,890
realize<font color="#E5E5E5"> that the attacker is the</font>

788
00:37:38,599 --> 00:37:45,829
<font color="#E5E5E5">cryptographic attacker is super weak</font><font color="#CCCCCC"> so</font>

789
00:37:41,890 --> 00:37:49,040
the only other cryptographic problem

790
00:37:45,829 --> 00:37:51,220
there could be is collisions<font color="#E5E5E5"> and for</font>

791
00:37:49,040 --> 00:37:54,770
those<font color="#CCCCCC"> of you who've seen</font><font color="#E5E5E5"> my last talk</font>

792
00:37:51,220 --> 00:37:58,970
they probably<font color="#E5E5E5"> know I love collisions so</font>

793
00:37:54,770 --> 00:38:03,829
we have<font color="#CCCCCC"> 48 bit pointer 48 bit context</font>

794
00:37:58,970 --> 00:38:07,160
and<font color="#CCCCCC"> 198 bit key</font><font color="#E5E5E5"> we sum</font><font color="#CCCCCC"> that up and we</font>

795
00:38:03,829 --> 00:38:13,160
divide<font color="#CCCCCC"> that by the 15 bit of output we</font>

796
00:38:07,160 --> 00:38:16,339
get from<font color="#E5E5E5"> PAC which gives us</font><font color="#CCCCCC"> to you ^</font><font color="#E5E5E5"> 209</font>

797
00:38:13,160 --> 00:38:19,549
possible collisions because we map so

798
00:38:16,339 --> 00:38:22,150
many bits<font color="#E5E5E5"> to so little bits</font><font color="#CCCCCC"> but even if</font>

799
00:38:19,550 --> 00:38:26,900
we reduce the pointers<font color="#CCCCCC"> because</font>

800
00:38:22,150 --> 00:38:30,170
practically probably less than<font color="#E5E5E5"> 34 bit of</font>

801
00:38:26,900 --> 00:38:35,210
a pointer are really used we still get

802
00:38:30,170 --> 00:38:37,520
to you ^ 181 collisions which is a lot

803
00:38:35,210 --> 00:38:40,220
of collisions<font color="#E5E5E5"> but the bad thing here is</font>

804
00:38:37,520 --> 00:38:43,750
random collisions are<font color="#CCCCCC"> not very useful to</font>

805
00:38:40,220 --> 00:38:46,129
us<font color="#CCCCCC"> unless we</font><font color="#E5E5E5"> can predict them somehow</font>

806
00:38:43,750 --> 00:38:48,770
so let's take a look how a

807
00:38:46,130 --> 00:38:51,140
cryptographically secure Mac is defined

808
00:38:48,770 --> 00:38:53,509
<font color="#E5E5E5">so a Mac is defined as fall</font>

809
00:38:51,140 --> 00:38:56,720
let P be a<font color="#E5E5E5"> Mac with following components</font>

810
00:38:53,510 --> 00:39:00,260
<font color="#E5E5E5">and those are basically gen Mac and</font>

811
00:38:56,720 --> 00:39:02,060
verify so<font color="#CCCCCC"> Jan</font><font color="#E5E5E5"> just somehow generates the</font>

812
00:39:00,260 --> 00:39:05,240
key it's only here for<font color="#CCCCCC"> the sake of</font>

813
00:39:02,060 --> 00:39:08,060
mathematical completeness<font color="#E5E5E5"> just assume we</font>

814
00:39:05,240 --> 00:39:11,839
generate the key by<font color="#E5E5E5"> randomly choosing</font><font color="#CCCCCC"> n</font>

815
00:39:08,060 --> 00:39:15,320
<font color="#E5E5E5">bits or however how much bits the key</font>

816
00:39:11,840 --> 00:39:20,120
needs<font color="#E5E5E5"> and Mac is just a</font><font color="#CCCCCC"> function where</font>

817
00:39:15,320 --> 00:39:23,390
we put in an N bit message<font color="#E5E5E5"> column and it</font>

818
00:39:20,120 --> 00:39:25,520
gives us<font color="#E5E5E5"> a signature T and I'm gonna say</font>

819
00:39:23,390 --> 00:39:28,129
signature but<font color="#CCCCCC"> already I mean a message</font>

820
00:39:25,520 --> 00:39:30,500
authentication code<font color="#E5E5E5"> and the third</font>

821
00:39:28,130 --> 00:39:33,410
<font color="#CCCCCC">function is verify you give it a message</font>

822
00:39:30,500 --> 00:39:35,180
<font color="#E5E5E5">and a</font><font color="#CCCCCC"> signature and it just returns true</font>

823
00:39:33,410 --> 00:39:37,609
<font color="#CCCCCC">if that</font><font color="#E5E5E5"> signature is valid for the</font>

824
00:39:35,180 --> 00:39:41,270
message or false if it's not

825
00:39:37,610 --> 00:39:43,160
<font color="#E5E5E5">and when cryptographers prove that</font>

826
00:39:41,270 --> 00:39:45,620
<font color="#E5E5E5">something is secure there like to play</font>

827
00:39:43,160 --> 00:39:49,520
games<font color="#CCCCCC"> so I'm gonna show you</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> favorite</font>

828
00:39:45,620 --> 00:39:51,500
<font color="#E5E5E5">game which is Mac forge game so the game</font>

829
00:39:49,520 --> 00:39:53,900
<font color="#CCCCCC">is pretty</font><font color="#E5E5E5"> simple</font><font color="#CCCCCC"> you have to the left</font>

830
00:39:51,500 --> 00:39:57,740
<font color="#E5E5E5">the game master which is playing with</font>

831
00:39:53,900 --> 00:40:00,860
<font color="#E5E5E5">forge and to the right</font><font color="#CCCCCC"> the attacker so</font>

832
00:39:57,740 --> 00:40:03,229
the game starts<font color="#CCCCCC"> when the Mac forge game</font>

833
00:40:00,860 --> 00:40:05,060
<font color="#CCCCCC">uh certain forms the the attacker how</font>

834
00:40:03,230 --> 00:40:07,400
much<font color="#E5E5E5"> bits are we playing so this is</font><font color="#CCCCCC"> the</font>

835
00:40:05,060 --> 00:40:10,340
first<font color="#E5E5E5"> one to the</font><font color="#CCCCCC"> power of n basically</font>

836
00:40:07,400 --> 00:40:10,820
<font color="#E5E5E5">means hey we're having Mac forge with I</font>

837
00:40:10,340 --> 00:40:13,610
don't<font color="#CCCCCC"> know</font>

838
00:40:10,820 --> 00:40:16,460
<font color="#CCCCCC">64-bit</font><font color="#E5E5E5"> messages so the attacker knows</font>

839
00:40:13,610 --> 00:40:21,380
the size then the game<font color="#E5E5E5"> master generates</font>

840
00:40:16,460 --> 00:40:26,510
the key and then<font color="#E5E5E5"> the attacker can choose</font>

841
00:40:21,380 --> 00:40:29,660
up to Q messages of<font color="#E5E5E5"> n bit length and</font>

842
00:40:26,510 --> 00:40:32,780
send them over<font color="#CCCCCC"> to the game master the</font>

843
00:40:29,660 --> 00:40:35,200
game<font color="#CCCCCC"> has</font><font color="#E5E5E5"> come will generate signatures</font>

844
00:40:32,780 --> 00:40:38,660
and send<font color="#CCCCCC"> them</font><font color="#E5E5E5"> back so then the attacker</font>

845
00:40:35,200 --> 00:40:42,140
can absorb all the messages he<font color="#E5E5E5"> generated</font>

846
00:40:38,660 --> 00:40:44,180
and all the matching signatures so what

847
00:40:42,140 --> 00:40:46,549
the attacker needs<font color="#E5E5E5"> to do then is to</font>

848
00:40:44,180 --> 00:40:49,910
choose another message which he did<font color="#E5E5E5"> not</font>

849
00:40:46,550 --> 00:40:54,620
send over yet and somehow come up with

850
00:40:49,910 --> 00:40:56,660
the ballot<font color="#E5E5E5"> with a valid signature</font><font color="#CCCCCC"> and if</font>

851
00:40:54,620 --> 00:41:00,140
he can manage<font color="#E5E5E5"> to do that</font><font color="#CCCCCC"> he sends it</font>

852
00:40:56,660 --> 00:41:02,839
over and if that's<font color="#E5E5E5"> actually valid</font>

853
00:41:00,140 --> 00:41:05,020
signature for the message then he wins

854
00:41:02,840 --> 00:41:09,250
the game<font color="#CCCCCC"> otherwise he loses</font><font color="#E5E5E5"> the</font>

855
00:41:05,020 --> 00:41:12,109
so we say a<font color="#E5E5E5"> Mac is secure</font><font color="#CCCCCC"> if the</font>

856
00:41:09,250 --> 00:41:14,960
probability<font color="#CCCCCC"> that an attacker can</font><font color="#E5E5E5"> somehow</font>

857
00:41:12,109 --> 00:41:16,670
win this is negligible

858
00:41:14,960 --> 00:41:18,770
Sargon is<font color="#CCCCCC"> very</font><font color="#E5E5E5"> the mathematical</font>

859
00:41:16,670 --> 00:41:21,710
<font color="#CCCCCC">definition of what negligible means but</font>

860
00:41:18,770 --> 00:41:23,270
like just<font color="#E5E5E5"> guessing or trying means that</font>

861
00:41:21,710 --> 00:41:28,339
it's<font color="#E5E5E5"> still secure if that's the best</font>

862
00:41:23,270 --> 00:41:32,740
attack so as you can<font color="#CCCCCC"> see as a Mac which</font>

863
00:41:28,339 --> 00:41:36,980
is<font color="#CCCCCC"> secure needs to withstand</font><font color="#E5E5E5"> this but</font>

864
00:41:32,740 --> 00:41:40,609
for our<font color="#CCCCCC"> PAC</font><font color="#E5E5E5"> attacker</font><font color="#CCCCCC"> we do</font><font color="#E5E5E5"> not even have</font>

865
00:41:36,980 --> 00:41:42,980
<font color="#E5E5E5">this Oracle so our attacker for</font><font color="#CCCCCC"> PAC is</font>

866
00:41:40,609 --> 00:41:45,740
even<font color="#E5E5E5"> weaker than</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so why do we not</font>

867
00:41:42,980 --> 00:41:49,810
<font color="#CCCCCC">have</font><font color="#E5E5E5"> this Oracle well simple if</font><font color="#CCCCCC"> we allow</font>

868
00:41:45,740 --> 00:41:53,660
the attacker to<font color="#E5E5E5"> sign arbitrary messages</font>

869
00:41:49,810 --> 00:41:56,349
<font color="#CCCCCC">the attacker wouldn't even need to try</font>

870
00:41:53,660 --> 00:41:58,910
to somehow<font color="#E5E5E5"> get the key of forged message</font>

871
00:41:56,349 --> 00:42:00,980
<font color="#E5E5E5">because then we could</font><font color="#CCCCCC"> just send over all</font>

872
00:41:58,910 --> 00:42:03,710
<font color="#E5E5E5">the messages all the pointers he wants</font>

873
00:42:00,980 --> 00:42:05,570
to sign get back<font color="#E5E5E5"> sign pointers and you</font>

874
00:42:03,710 --> 00:42:08,839
wouldn't need to<font color="#E5E5E5"> bother about breaking</font>

875
00:42:05,570 --> 00:42:11,089
the crypto at all so basically the point

876
00:42:08,839 --> 00:42:13,779
<font color="#E5E5E5">I'm trying to make here is</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> PAC</font>

877
00:42:11,089 --> 00:42:18,109
attacker is weaker than<font color="#E5E5E5"> a Mac attacker</font>

878
00:42:13,780 --> 00:42:21,800
<font color="#E5E5E5">so every secure Mac we know is also a</font>

879
00:42:18,109 --> 00:42:25,190
secure PAC<font color="#E5E5E5"> but even an insecure Mac</font>

880
00:42:21,800 --> 00:42:30,290
might still be sufficiently secure for

881
00:42:25,190 --> 00:42:33,560
PAC<font color="#E5E5E5"> so secure Mac's have been around for</font>

882
00:42:30,290 --> 00:42:36,490
a while<font color="#E5E5E5"> and this in my</font><font color="#CCCCCC"> opinion I think</font>

883
00:42:33,560 --> 00:42:41,240
if somebody who knows what<font color="#CCCCCC"> he's doing is</font>

884
00:42:36,490 --> 00:42:45,618
to design a PAC algorithm today<font color="#CCCCCC"> it will</font>

885
00:42:41,240 --> 00:42:48,680
<font color="#E5E5E5">likely be secure</font><font color="#CCCCCC"> so instead of</font><font color="#E5E5E5"> going for</font>

886
00:42:45,619 --> 00:42:50,630
the<font color="#E5E5E5"> crypto I think we should rather go</font>

887
00:42:48,680 --> 00:42:52,669
for implementation attacks<font color="#E5E5E5"> instead</font>

888
00:42:50,630 --> 00:42:55,550
because<font color="#E5E5E5"> they</font><font color="#CCCCCC"> also be around</font><font color="#E5E5E5"> forever and</font>

889
00:42:52,670 --> 00:42:58,210
<font color="#E5E5E5">by that I mean well you can either see</font>

890
00:42:55,550 --> 00:43:01,700
how the crypto itself is implemented<font color="#E5E5E5"> but</font>

891
00:42:58,210 --> 00:43:05,030
<font color="#CCCCCC">I</font><font color="#E5E5E5"> mean especially by that is you could</font>

892
00:43:01,700 --> 00:43:08,540
see how the pack is<font color="#CCCCCC"> used in the actual</font>

893
00:43:05,030 --> 00:43:11,030
couch maybe you can find signing<font color="#E5E5E5"> records</font>

894
00:43:08,540 --> 00:43:13,279
maybe you can find<font color="#CCCCCC"> an authenticated code</font>

895
00:43:11,030 --> 00:43:16,609
<font color="#CCCCCC">I think this is where we need to go if</font>

896
00:43:13,280 --> 00:43:21,200
we<font color="#CCCCCC"> want to bypass back somehow</font>

897
00:43:16,609 --> 00:43:26,009
so just to recap where we're coming from

898
00:43:21,200 --> 00:43:30,899
<font color="#E5E5E5">future</font><font color="#CCCCCC"> iPhone hacks</font><font color="#E5E5E5"> probably gonna not</font>

899
00:43:26,009 --> 00:43:33,839
try to bypass<font color="#CCCCCC"> KTR and I think they will</font>

900
00:43:30,900 --> 00:43:35,789
<font color="#E5E5E5">not try to patch kernel code because</font><font color="#CCCCCC"> we</font>

901
00:43:33,839 --> 00:43:38,759
can achieve<font color="#E5E5E5"> pretty much all the things</font>

902
00:43:35,789 --> 00:43:41,279
<font color="#CCCCCC">we want to</font><font color="#E5E5E5"> achieve for end-user</font>

903
00:43:38,759 --> 00:43:46,799
jailbreak without having to patch the

904
00:43:41,279 --> 00:43:49,200
kernel<font color="#CCCCCC"> so far and I think people will go</font>

905
00:43:46,799 --> 00:43:53,640
<font color="#E5E5E5">in a struggle a bit at least a bit when</font>

906
00:43:49,200 --> 00:43:56,069
exploiting with<font color="#CCCCCC"> pact because</font><font color="#E5E5E5"> that kind</font>

907
00:43:53,640 --> 00:43:58,259
of will either make some bucks on

908
00:43:56,069 --> 00:44:03,630
exploitable<font color="#E5E5E5"> or really really hard to</font>

909
00:43:58,259 --> 00:44:06,390
exploit<font color="#CCCCCC"> also maybe we're gonna avoid the</font>

910
00:44:03,630 --> 00:44:09,900
kernel doll as bastard has demoed the

911
00:44:06,390 --> 00:44:11,848
userland<font color="#E5E5E5"> only</font><font color="#CCCCCC"> Gerak's are possible maybe</font>

912
00:44:09,900 --> 00:44:14,460
<font color="#E5E5E5">gonna recalculate what the low-hanging</font>

913
00:44:11,849 --> 00:44:17,250
<font color="#E5E5E5">fruits are maybe just go back to your</font>

914
00:44:14,460 --> 00:44:21,839
boot or look for<font color="#E5E5E5"> what other thing is</font>

915
00:44:17,250 --> 00:44:23,380
<font color="#CCCCCC">interesting so that was about it thank</font>

916
00:44:21,839 --> 00:44:23,880
you<font color="#CCCCCC"> very much for</font><font color="#E5E5E5"> your attention</font>

917
00:44:23,380 --> 00:44:26,120
[Applause]

918
00:44:23,880 --> 00:44:28,600
[Music]

919
00:44:26,120 --> 00:44:30,609
[Applause]

920
00:44:28,600 --> 00:44:36,250
[Music]

921
00:44:30,610 --> 00:44:37,810
[Applause]

922
00:44:36,250 --> 00:44:39,940
if you would like<font color="#E5E5E5"> to ask a</font><font color="#CCCCCC"> question</font>

923
00:44:37,810 --> 00:44:46,420
please line up on the microphones in<font color="#E5E5E5"> the</font>

924
00:44:39,940 --> 00:44:49,630
<font color="#E5E5E5">room</font><font color="#CCCCCC"> we do not have a</font><font color="#E5E5E5"> question form</font>

925
00:44:46,420 --> 00:44:53,320
<font color="#E5E5E5">Internet</font><font color="#CCCCCC"> where one question over</font><font color="#E5E5E5"> there</font>

926
00:44:49,630 --> 00:44:56,110
<font color="#E5E5E5">yes please okay hi</font><font color="#CCCCCC"> I would like to be</font>

927
00:44:53,320 --> 00:44:58,000
interested what<font color="#CCCCCC"> your comment is on the</font>

928
00:44:56,110 --> 00:44:59,710
statement<font color="#CCCCCC"> from Zurich that basically</font>

929
00:44:58,000 --> 00:45:01,810
trade<font color="#E5E5E5"> breaking is not a thing anymore</font>

930
00:44:59,710 --> 00:45:04,090
because you're<font color="#E5E5E5"> breaking so much security</font>

931
00:45:01,810 --> 00:45:07,570
<font color="#E5E5E5">features</font><font color="#CCCCCC"> that makes the phone basically</font>

932
00:45:04,090 --> 00:45:13,140
<font color="#E5E5E5">more insecure than the former reasons of</font>

933
00:45:07,570 --> 00:45:16,540
doing it right<font color="#CCCCCC"> breaker</font><font color="#E5E5E5"> II allow for well</font>

934
00:45:13,140 --> 00:45:19,299
jailbreaking<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> think gyrating</font>

935
00:45:16,540 --> 00:45:21,759
itself nowadays<font color="#E5E5E5"> makes the phone really</font>

936
00:45:19,300 --> 00:45:23,950
insecure<font color="#CCCCCC"> so of course</font><font color="#E5E5E5"> if you patch the</font>

937
00:45:21,760 --> 00:45:27,280
kernel and disable all<font color="#CCCCCC"> the security</font>

938
00:45:23,950 --> 00:45:29,109
features<font color="#CCCCCC"> that will</font><font color="#E5E5E5"> be less secure but if</font>

939
00:45:27,280 --> 00:45:31,930
you take a look what<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> with</font>

940
00:45:29,110 --> 00:45:34,510
<font color="#E5E5E5">the unpassable kernel I think the main</font>

941
00:45:31,930 --> 00:45:36,930
downside of being jailbroken is the fact

942
00:45:34,510 --> 00:45:40,420
that you cannot go to<font color="#E5E5E5"> the latest</font>

943
00:45:36,930 --> 00:45:44,609
software version<font color="#E5E5E5"> because you want the</font>

944
00:45:40,420 --> 00:45:44,610
box to<font color="#CCCCCC"> be in there to have the jailbreak</font>

945
00:45:44,640 --> 00:45:51,940
so I don't<font color="#E5E5E5"> really think if you have like</font>

946
00:45:48,460 --> 00:45:53,740
a<font color="#CCCCCC"> KTR</font><font color="#E5E5E5"> device the jailbreak itself makes</font>

947
00:45:51,940 --> 00:45:56,410
it less secure<font color="#E5E5E5"> just the fact that you're</font>

948
00:45:53,740 --> 00:46:01,000
not on the latest firmware is the the

949
00:45:56,410 --> 00:46:03,520
insecure part of it<font color="#E5E5E5"> all right thank you</font>

950
00:46:01,000 --> 00:46:05,740
microphone number<font color="#CCCCCC"> two your question hi</font>

951
00:46:03,520 --> 00:46:09,270
good talk<font color="#CCCCCC"> could you go back to the</font>

952
00:46:05,740 --> 00:46:09,270
capabilities<font color="#CCCCCC"> of the bursaries please</font>

953
00:46:10,590 --> 00:46:15,850
yeah so you said you can do<font color="#E5E5E5"> basically</font>

954
00:46:13,480 --> 00:46:17,290
two<font color="#E5E5E5"> things right</font><font color="#CCCCCC"> this one yeah</font><font color="#E5E5E5"> yeah it</font>

955
00:46:15,850 --> 00:46:19,930
can observe<font color="#CCCCCC"> some pointers and some</font>

956
00:46:17,290 --> 00:46:24,430
signatures pairs<font color="#E5E5E5"> but why is this not an</font>

957
00:46:19,930 --> 00:46:26,140
Oracle<font color="#CCCCCC"> because you cannot choose your</font>

958
00:46:24,430 --> 00:46:28,569
message yourself<font color="#CCCCCC"> you message yourself</font>

959
00:46:26,140 --> 00:46:31,120
<font color="#CCCCCC">and you have also an Oracle that says if</font>

960
00:46:28,570 --> 00:46:33,550
the signature is valid for us<font color="#E5E5E5"> chosen</font>

961
00:46:31,120 --> 00:46:36,910
message<font color="#E5E5E5"> well yeah but this is if you</font>

962
00:46:33,550 --> 00:46:39,280
<font color="#E5E5E5">take a look at the game in</font><font color="#CCCCCC"> this game</font><font color="#E5E5E5"> for</font>

963
00:46:36,910 --> 00:46:42,549
<font color="#E5E5E5">a secure Mac the attacker can choose up</font>

964
00:46:39,280 --> 00:46:44,230
to<font color="#CCCCCC"> Q messages</font><font color="#E5E5E5"> sending over like he can</font>

965
00:46:42,550 --> 00:46:45,180
do whatever he<font color="#CCCCCC"> wants with</font><font color="#E5E5E5"> that messages</font>

966
00:46:44,230 --> 00:46:48,630
and get

967
00:46:45,180 --> 00:46:51,960
signature while the<font color="#E5E5E5"> package hacker can</font>

968
00:46:48,630 --> 00:46:55,829
see a few very limited<font color="#E5E5E5"> amount of</font>

969
00:46:51,960 --> 00:46:58,770
messages<font color="#E5E5E5"> and their matching signature</font>

970
00:46:55,829 --> 00:47:04,290
and he has little<font color="#E5E5E5"> to no influence on</font>

971
00:46:58,770 --> 00:47:06,599
these messages right<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so it's a bit</font>

972
00:47:04,290 --> 00:47:10,259
weaker but so yeah that's the point<font color="#CCCCCC"> is</font>

973
00:47:06,599 --> 00:47:17,339
<font color="#CCCCCC">just that it's weaker Thanks do we</font><font color="#E5E5E5"> have</font>

974
00:47:10,260 --> 00:47:24,960
<font color="#E5E5E5">a question from the internet okay</font><font color="#CCCCCC"> just</font>

975
00:47:17,339 --> 00:47:28,170
<font color="#E5E5E5">please all right then I don't</font><font color="#CCCCCC"> see anyone</font>

976
00:47:24,960 --> 00:47:30,750
<font color="#CCCCCC">else being lined</font><font color="#E5E5E5"> up and these</font><font color="#CCCCCC"> people</font>

977
00:47:28,170 --> 00:47:31,440
gives a lot<font color="#E5E5E5"> of applause</font><font color="#CCCCCC"> to team stuff</font>

978
00:47:30,750 --> 00:47:32,450
<font color="#CCCCCC">force</font><font color="#E5E5E5"> awesome Joe</font>

979
00:47:31,440 --> 00:47:34,340
[Music]

980
00:47:32,450 --> 00:47:45,009
[Applause]

981
00:47:34,340 --> 00:47:45,010
[Music]

982
00:47:47,080 --> 00:47:59,739
[Music]

