1
00:00:02,830 --> 00:00:22,380
[Music]

2
00:00:18,470 --> 00:00:23,910
mem said that's<font color="#E5E5E5"> the next</font><font color="#CCCCCC"> title of the</font>

3
00:00:22,380 --> 00:00:27,019
title of<font color="#E5E5E5"> the next talk</font>

4
00:00:23,910 --> 00:00:29,640
why cleaning memory is hard<font color="#CCCCCC"> Ilia</font>

5
00:00:27,019 --> 00:00:33,269
functional is a security researcher who

6
00:00:29,640 --> 00:00:35,670
loves to<font color="#E5E5E5"> find out new things and he</font>

7
00:00:33,270 --> 00:00:38,989
found out<font color="#CCCCCC"> that it's quite hard to get</font>

8
00:00:35,670 --> 00:00:42,480
<font color="#E5E5E5">rid of sensitive content in the memory</font>

9
00:00:38,989 --> 00:00:44,849
yes<font color="#CCCCCC"> so</font><font color="#E5E5E5"> today he's gonna give</font><font color="#CCCCCC"> us an</font>

10
00:00:42,480 --> 00:00:55,440
overview presentation<font color="#E5E5E5"> please give a warm</font>

11
00:00:44,850 --> 00:00:58,320
<font color="#E5E5E5">round of applause</font><font color="#CCCCCC"> - yeah oh yeah</font>

12
00:00:55,440 --> 00:00:59,820
<font color="#E5E5E5">perfect yeah so as as the</font><font color="#CCCCCC"> Harrell just</font>

13
00:00:58,320 --> 00:01:04,799
explained my presentation is called<font color="#CCCCCC"> mem</font>

14
00:00:59,820 --> 00:01:07,950
sad<font color="#CCCCCC"> whine clearing memory is hard before</font>

15
00:01:04,799 --> 00:01:13,380
<font color="#CCCCCC">I</font><font color="#E5E5E5"> dive in that once upon a time that</font><font color="#CCCCCC"> was</font>

16
00:01:07,950 --> 00:01:16,530
me a lot more hair a<font color="#E5E5E5"> lot less fat this</font>

17
00:01:13,380 --> 00:01:22,229
is my<font color="#CCCCCC"> seventeen</font><font color="#E5E5E5"> Congress</font><font color="#CCCCCC"> you have</font>

18
00:01:16,530 --> 00:01:24,750
<font color="#CCCCCC">pot-kettle</font><font color="#E5E5E5"> here buddy this is my 72</font>

19
00:01:22,229 --> 00:01:27,150
<font color="#E5E5E5">Congress in a row</font><font color="#CCCCCC"> I've spoken your</font>

20
00:01:24,750 --> 00:01:30,540
number times before<font color="#CCCCCC"> I haven't</font><font color="#E5E5E5"> had a 35</font>

21
00:01:27,150 --> 00:01:32,520
<font color="#E5E5E5">in there yet but</font><font color="#CCCCCC"> obviously that's should</font>

22
00:01:30,540 --> 00:01:35,130
be<font color="#E5E5E5"> there as well</font><font color="#CCCCCC"> I work</font><font color="#E5E5E5"> for a company</font>

23
00:01:32,520 --> 00:01:37,798
called ioactive<font color="#E5E5E5"> I am the director of</font>

24
00:01:35,130 --> 00:01:39,949
<font color="#E5E5E5">penetration testing but that really just</font>

25
00:01:37,799 --> 00:01:43,759
<font color="#E5E5E5">means that I lead teams with pen testers</font>

26
00:01:39,950 --> 00:01:45,720
<font color="#E5E5E5">no no double entendre dare</font>

27
00:01:43,759 --> 00:01:47,369
obviously we're<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> good</font><font color="#CCCCCC"> to two people</font>

28
00:01:45,720 --> 00:01:50,460
<font color="#CCCCCC">so if you're interested</font><font color="#E5E5E5"> come talk to me</font>

29
00:01:47,369 --> 00:01:53,369
<font color="#E5E5E5">afterwards I like looking at low level</font>

30
00:01:50,460 --> 00:01:55,309
stuff<font color="#CCCCCC"> kernels drivers hypervisors that</font>

31
00:01:53,369 --> 00:01:57,920
type of stuff and<font color="#E5E5E5"> I</font><font color="#CCCCCC"> enjoy reading code</font>

32
00:01:55,310 --> 00:01:59,969
<font color="#CCCCCC">okay enough enough about me</font>

33
00:01:57,920 --> 00:02:03,240
what's the kind<font color="#CCCCCC"> of audience that I think</font>

34
00:01:59,969 --> 00:02:05,429
would<font color="#CCCCCC"> enjoy this pretty all-around</font>

35
00:02:03,240 --> 00:02:06,899
<font color="#E5E5E5">security</font><font color="#CCCCCC"> people equipped Oh</font><font color="#E5E5E5"> people if</font>

36
00:02:05,430 --> 00:02:08,660
you like code review if you like

37
00:02:06,899 --> 00:02:11,790
compiler stuff and if you're<font color="#E5E5E5"> just</font>

38
00:02:08,660 --> 00:02:14,069
generally curious about technology<font color="#CCCCCC"> I</font>

39
00:02:11,790 --> 00:02:17,760
think<font color="#CCCCCC"> you might enjoy</font><font color="#E5E5E5"> this</font>

40
00:02:14,069 --> 00:02:20,339
in terms of the<font color="#CCCCCC"> knowledge required the</font>

41
00:02:17,760 --> 00:02:22,950
<font color="#E5E5E5">first half of these slides is relatively</font>

42
00:02:20,340 --> 00:02:25,739
basic<font color="#E5E5E5"> and so if you have a basic</font>

43
00:02:22,950 --> 00:02:27,119
<font color="#CCCCCC">technology understanding you should be</font>

44
00:02:25,739 --> 00:02:30,180
able<font color="#E5E5E5"> to understand most of the</font><font color="#CCCCCC"> first</font>

45
00:02:27,120 --> 00:02:32,489
<font color="#E5E5E5">half</font><font color="#CCCCCC"> if you have some C background that</font>

46
00:02:30,180 --> 00:02:36,750
<font color="#CCCCCC">would be nice and then as I move</font><font color="#E5E5E5"> forward</font>

47
00:02:32,489 --> 00:02:40,049
past<font color="#E5E5E5"> the first half</font><font color="#CCCCCC"> it things become a</font>

48
00:02:36,750 --> 00:02:43,290
bit more<font color="#E5E5E5"> advanced</font><font color="#CCCCCC"> but if you just you</font>

49
00:02:40,049 --> 00:02:48,060
<font color="#E5E5E5">know only grasp the first half I think</font>

50
00:02:43,290 --> 00:02:52,019
that will still be useful<font color="#E5E5E5"> right so what</font>

51
00:02:48,060 --> 00:02:54,750
does<font color="#E5E5E5"> this talk about basically it's one</font>

52
00:02:52,019 --> 00:02:57,000
very simple easy<font color="#E5E5E5"> to explain crypto</font>

53
00:02:54,750 --> 00:02:58,620
implementation problem and the<font color="#E5E5E5"> reason</font>

54
00:02:57,000 --> 00:03:00,959
I've dedicated<font color="#E5E5E5"> entire talk about it is</font>

55
00:02:58,620 --> 00:03:03,480
because<font color="#CCCCCC"> well the problem is easy the</font>

56
00:03:00,959 --> 00:03:05,159
solution is not there's a<font color="#E5E5E5"> lot of moving</font>

57
00:03:03,480 --> 00:03:07,500
parts<font color="#CCCCCC"> there's a lot</font><font color="#E5E5E5"> of subtlety a lot of</font>

58
00:03:05,159 --> 00:03:10,530
nuance<font color="#E5E5E5"> and I'll get into that in</font><font color="#CCCCCC"> a</font>

59
00:03:07,500 --> 00:03:14,069
little<font color="#CCCCCC"> bit now I can hear some of</font><font color="#E5E5E5"> you</font>

60
00:03:10,530 --> 00:03:16,349
thinking well<font color="#CCCCCC"> Ilya WTF at 2018 why the</font>

61
00:03:14,069 --> 00:03:19,858
hell are you talking<font color="#E5E5E5"> about this this</font><font color="#CCCCCC"> is</font>

62
00:03:16,349 --> 00:03:22,470
very very<font color="#E5E5E5"> very well known today I say</font>

63
00:03:19,859 --> 00:03:24,840
well because<font color="#CCCCCC"> this stuff is still</font>

64
00:03:22,470 --> 00:03:26,730
everywhere<font color="#E5E5E5"> and I will show that in the</font>

65
00:03:24,840 --> 00:03:29,340
slides<font color="#E5E5E5"> I will</font><font color="#CCCCCC"> show this with data I wish</font>

66
00:03:26,730 --> 00:03:31,459
I will show this with bugs<font color="#CCCCCC"> but the</font>

67
00:03:29,340 --> 00:03:33,859
driver of this talk the<font color="#CCCCCC"> reason why I</font>

68
00:03:31,459 --> 00:03:36,989
<font color="#CCCCCC">started making</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> presentation is that</font>

69
00:03:33,859 --> 00:03:38,940
this year alone I did engagements for

70
00:03:36,989 --> 00:03:40,760
<font color="#E5E5E5">three different customers on three</font>

71
00:03:38,940 --> 00:03:43,829
entirely different software projects

72
00:03:40,760 --> 00:03:47,190
where they all had this exact same type

73
00:03:43,829 --> 00:03:48,750
of<font color="#E5E5E5"> bug</font><font color="#CCCCCC"> and you know you tell</font><font color="#E5E5E5"> them about</font>

74
00:03:47,190 --> 00:03:51,209
<font color="#E5E5E5">the bug and a customer comes back and</font>

75
00:03:48,750 --> 00:03:53,250
says<font color="#E5E5E5"> okay well yeah that's that's great</font>

76
00:03:51,209 --> 00:03:56,730
we understand<font color="#E5E5E5"> now tell us how</font><font color="#CCCCCC"> to fix</font>

77
00:03:53,250 --> 00:03:59,940
this in a portable<font color="#E5E5E5"> way</font><font color="#CCCCCC"> and that is not</font>

78
00:03:56,730 --> 00:04:01,518
<font color="#E5E5E5">very easy</font><font color="#CCCCCC"> the other thing is that even</font>

79
00:03:59,940 --> 00:04:05,040
<font color="#CCCCCC">though this problem is sort</font><font color="#E5E5E5"> of known</font>

80
00:04:01,519 --> 00:04:08,400
conceptually<font color="#CCCCCC"> like you know</font><font color="#E5E5E5"> people kind</font>

81
00:04:05,040 --> 00:04:17,519
of blase about it practically<font color="#E5E5E5"> not many</font>

82
00:04:08,400 --> 00:04:19,649
people<font color="#E5E5E5"> understand how how pervasive this</font>

83
00:04:17,519 --> 00:04:21,478
problem is how realistic<font color="#E5E5E5"> it is it isn't</font>

84
00:04:19,649 --> 00:04:24,510
<font color="#CCCCCC">just like oh well</font><font color="#E5E5E5"> the compiler might do</font>

85
00:04:21,478 --> 00:04:26,729
this<font color="#CCCCCC"> no the compiler will do this and it</font>

86
00:04:24,510 --> 00:04:27,789
does it everywhere<font color="#CCCCCC"> and this this</font><font color="#E5E5E5"> is</font>

87
00:04:26,729 --> 00:04:30,520
<font color="#E5E5E5">these bug</font>

88
00:04:27,790 --> 00:04:32,650
do show<font color="#CCCCCC"> up everywhere even though</font>

89
00:04:30,520 --> 00:04:34,299
because<font color="#CCCCCC"> it doesn't it's hard to tell</font>

90
00:04:32,650 --> 00:04:35,620
<font color="#CCCCCC">from the coat that it is there if</font><font color="#E5E5E5"> you</font>

91
00:04:34,300 --> 00:04:38,140
look at the<font color="#E5E5E5"> binary if you look at what</font>

92
00:04:35,620 --> 00:04:42,670
the compiler emits<font color="#E5E5E5"> you see that it's</font>

93
00:04:38,140 --> 00:04:43,719
<font color="#E5E5E5">there</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then the third is given that</font>

94
00:04:42,670 --> 00:04:46,150
<font color="#E5E5E5">one</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> teams of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> Congress this</font>

95
00:04:43,720 --> 00:04:48,070
<font color="#CCCCCC">year is foundations and to talk</font><font color="#E5E5E5"> about</font>

96
00:04:46,150 --> 00:04:51,719
you know things<font color="#E5E5E5"> don't necessarily new</font>

97
00:04:48,070 --> 00:04:55,360
<font color="#CCCCCC">but sort of try and</font><font color="#E5E5E5"> help bring the</font>

98
00:04:51,720 --> 00:04:57,640
subject<font color="#CCCCCC"> to the next generation this</font><font color="#E5E5E5"> I</font>

99
00:04:55,360 --> 00:05:01,900
think<font color="#E5E5E5"> this fits in perfectly</font><font color="#CCCCCC"> in the</font>

100
00:04:57,640 --> 00:05:04,390
concept of foundations<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so before</font><font color="#CCCCCC"> I</font>

101
00:05:01,900 --> 00:05:05,830
dive in there's a<font color="#E5E5E5"> couple of</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> or</font>

102
00:05:04,390 --> 00:05:08,380
<font color="#CCCCCC">actually a long list of people that</font><font color="#E5E5E5"> sort</font>

103
00:05:05,830 --> 00:05:09,849
<font color="#E5E5E5">of help me</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> as I said</font><font color="#CCCCCC"> this the</font>

104
00:05:08,380 --> 00:05:11,770
problem<font color="#E5E5E5"> is well-known it's been well</font>

105
00:05:09,850 --> 00:05:13,750
known for at least<font color="#CCCCCC"> twenty or thirty</font>

106
00:05:11,770 --> 00:05:15,460
years<font color="#CCCCCC"> and so many many</font><font color="#E5E5E5"> many people have</font>

107
00:05:13,750 --> 00:05:17,710
<font color="#CCCCCC">published papers and presentations about</font>

108
00:05:15,460 --> 00:05:19,690
<font color="#E5E5E5">this and I don't know all</font><font color="#CCCCCC"> of them</font>

109
00:05:17,710 --> 00:05:21,070
<font color="#CCCCCC">personally and</font><font color="#E5E5E5"> and I wish I could</font>

110
00:05:19,690 --> 00:05:23,320
include them<font color="#E5E5E5"> all</font><font color="#CCCCCC"> but the people</font><font color="#E5E5E5"> have</font>

111
00:05:21,070 --> 00:05:25,870
included in here<font color="#CCCCCC"> or sort</font><font color="#E5E5E5"> of the you know</font>

112
00:05:23,320 --> 00:05:30,670
one or two away<font color="#CCCCCC"> from me</font><font color="#E5E5E5"> that have had</font>

113
00:05:25,870 --> 00:05:32,890
some<font color="#E5E5E5"> kind of impact</font><font color="#CCCCCC"> in these slides some</font>

114
00:05:30,670 --> 00:05:35,890
of you are sitting<font color="#E5E5E5"> in this audience</font><font color="#CCCCCC"> your</font>

115
00:05:32,890 --> 00:05:40,120
and your help has been<font color="#CCCCCC"> appreciated okay</font>

116
00:05:35,890 --> 00:05:42,250
<font color="#CCCCCC">so let's let's let's actually</font><font color="#E5E5E5"> start now</font>

117
00:05:40,120 --> 00:05:44,500
let's say you're<font color="#E5E5E5"> gonna write some piece</font>

118
00:05:42,250 --> 00:05:45,880
of<font color="#E5E5E5"> code right and it's going to be doing</font>

119
00:05:44,500 --> 00:05:48,730
<font color="#CCCCCC">something and it's</font><font color="#E5E5E5"> gonna be handling</font>

120
00:05:45,880 --> 00:05:51,150
<font color="#E5E5E5">sensitive data you know</font><font color="#CCCCCC"> beat at keys or</font>

121
00:05:48,730 --> 00:05:54,760
<font color="#CCCCCC">decrypted plaintext recession tokens</font><font color="#E5E5E5"> or</font>

122
00:05:51,150 --> 00:05:56,140
<font color="#E5E5E5">passwords or password hashes or anything</font>

123
00:05:54,760 --> 00:05:59,800
<font color="#CCCCCC">that</font><font color="#E5E5E5"> could be considered sensitive right</font>

124
00:05:56,140 --> 00:06:02,169
<font color="#CCCCCC">now</font><font color="#E5E5E5"> if you're a smart security conscious</font>

125
00:05:59,800 --> 00:06:04,630
person right<font color="#CCCCCC"> the moment you are</font><font color="#E5E5E5"> done</font>

126
00:06:02,170 --> 00:06:06,840
with<font color="#CCCCCC"> that sensitive</font><font color="#E5E5E5"> data you want to</font>

127
00:06:04,630 --> 00:06:08,350
dispose<font color="#E5E5E5"> of it right you want to purge</font><font color="#CCCCCC"> it</font>

128
00:06:06,840 --> 00:06:10,330
from memory

129
00:06:08,350 --> 00:06:13,750
right now why do you<font color="#E5E5E5"> want to do this</font>

130
00:06:10,330 --> 00:06:15,940
well because<font color="#CCCCCC"> otherwise if there's some</font>

131
00:06:13,750 --> 00:06:18,580
<font color="#E5E5E5">kind of info leak that is discovered</font>

132
00:06:15,940 --> 00:06:21,130
later on then<font color="#E5E5E5"> whatever secrets or</font>

133
00:06:18,580 --> 00:06:22,870
lingering memory<font color="#E5E5E5"> could be used in your</font>

134
00:06:21,130 --> 00:06:25,600
<font color="#E5E5E5">info leak and all of a sudden you know</font>

135
00:06:22,870 --> 00:06:28,090
<font color="#E5E5E5">your tokens or your keys or leaked out</font>

136
00:06:25,600 --> 00:06:29,890
right<font color="#E5E5E5"> and and I mean that</font><font color="#CCCCCC"> may sound like</font>

137
00:06:28,090 --> 00:06:32,679
a stretch but you<font color="#E5E5E5"> know things like</font>

138
00:06:29,890 --> 00:06:34,990
heartbleed<font color="#E5E5E5"> you know to happen right</font><font color="#CCCCCC"> so</font>

139
00:06:32,680 --> 00:06:38,800
it's this<font color="#E5E5E5"> is very practical this can</font>

140
00:06:34,990 --> 00:06:40,780
<font color="#E5E5E5">really happen</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> for a move on</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> would</font>

141
00:06:38,800 --> 00:06:42,670
say<font color="#E5E5E5"> if if you make if you</font>

142
00:06:40,780 --> 00:06:44,650
you think and make the step where you

143
00:06:42,670 --> 00:06:46,630
say okay I need<font color="#CCCCCC"> to dispose</font><font color="#E5E5E5"> of sensitive</font>

144
00:06:44,650 --> 00:06:49,450
material once I'm done with<font color="#CCCCCC"> it</font><font color="#E5E5E5"> that</font>

145
00:06:46,630 --> 00:06:51,610
that's really<font color="#E5E5E5"> big right most software</font>

146
00:06:49,450 --> 00:06:54,099
<font color="#E5E5E5">that deals with you know sensitive</font>

147
00:06:51,610 --> 00:06:56,910
material does<font color="#CCCCCC"> not do this so if you make</font>

148
00:06:54,100 --> 00:07:01,720
this step<font color="#E5E5E5"> thinking I need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> purge this</font>

149
00:06:56,910 --> 00:07:03,940
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> ahead of</font><font color="#E5E5E5"> the curve right so now</font>

150
00:07:01,720 --> 00:07:06,040
<font color="#CCCCCC">concretely</font><font color="#E5E5E5"> it would look something like</font>

151
00:07:03,940 --> 00:07:08,500
this<font color="#E5E5E5"> right you would write it</font><font color="#CCCCCC"> a little</font>

152
00:07:06,040 --> 00:07:09,760
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a sample code</font><font color="#E5E5E5"> I have that</font>

153
00:07:08,500 --> 00:07:11,830
basically<font color="#E5E5E5"> generates a little key and</font>

154
00:07:09,760 --> 00:07:13,750
<font color="#CCCCCC">it's a</font><font color="#E5E5E5"> function you give it and you're</font>

155
00:07:11,830 --> 00:07:16,750
given a key pointer and this thing

156
00:07:13,750 --> 00:07:19,240
declares a local variable<font color="#CCCCCC"> that searcher</font>

157
00:07:16,750 --> 00:07:22,330
<font color="#CCCCCC">bytes goes and reads bunch of random</font>

158
00:07:19,240 --> 00:07:24,850
bits puts it in<font color="#CCCCCC"> K copies k2 key and then</font>

159
00:07:22,330 --> 00:07:26,320
before<font color="#E5E5E5"> it returns because K is about to</font>

160
00:07:24,850 --> 00:07:29,350
go<font color="#E5E5E5"> out</font><font color="#CCCCCC"> of scope</font><font color="#E5E5E5"> and it contains</font>

161
00:07:26,320 --> 00:07:31,450
sensitive key material<font color="#CCCCCC"> you go and say</font>

162
00:07:29,350 --> 00:07:35,760
<font color="#CCCCCC">mem set and then you clear the thing</font><font color="#E5E5E5"> and</font>

163
00:07:31,450 --> 00:07:39,669
then<font color="#E5E5E5"> you</font><font color="#CCCCCC"> return</font><font color="#E5E5E5"> right perfect</font>

164
00:07:35,760 --> 00:07:42,639
you you you run this<font color="#E5E5E5"> you compile</font><font color="#CCCCCC"> it you</font>

165
00:07:39,669 --> 00:07:44,349
add a main<font color="#CCCCCC"> yeah and it does</font><font color="#E5E5E5"> exactly what</font>

166
00:07:42,639 --> 00:07:48,610
it's supposed<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> you look at the</font>

167
00:07:44,350 --> 00:07:51,580
assembly and it's all perfect<font color="#CCCCCC"> problem</font>

168
00:07:48,610 --> 00:07:54,280
<font color="#CCCCCC">there is what you're doing is not</font><font color="#E5E5E5"> that's</font>

169
00:07:51,580 --> 00:07:57,729
<font color="#E5E5E5">not that's that's</font><font color="#CCCCCC"> not release based code</font>

170
00:07:54,280 --> 00:08:00,130
right when you sort of make code ready

171
00:07:57,729 --> 00:08:02,919
to be released<font color="#CCCCCC"> you sort of tell the</font>

172
00:08:00,130 --> 00:08:04,990
compiler that<font color="#CCCCCC"> it should enable the</font>

173
00:08:02,919 --> 00:08:07,560
optimizer right you'll you'll give<font color="#CCCCCC"> itto</font>

174
00:08:04,990 --> 00:08:09,880
<font color="#CCCCCC">SRO to those are the most</font><font color="#E5E5E5"> common ones</font>

175
00:08:07,560 --> 00:08:11,530
<font color="#E5E5E5">you sometimes you</font><font color="#CCCCCC"> see oh three when</font>

176
00:08:09,880 --> 00:08:15,400
people want<font color="#E5E5E5"> to live on the edge but</font>

177
00:08:11,530 --> 00:08:17,890
usually<font color="#CCCCCC"> Oh two or OS</font><font color="#E5E5E5"> now if you look at</font>

178
00:08:15,400 --> 00:08:20,049
the assembly again you know you get a

179
00:08:17,890 --> 00:08:22,240
whole different<font color="#CCCCCC"> picture of what what's</font>

180
00:08:20,050 --> 00:08:23,890
<font color="#CCCCCC">going on and I want to do illustrate</font>

181
00:08:22,240 --> 00:08:27,910
this and there's a<font color="#E5E5E5"> website called</font>

182
00:08:23,890 --> 00:08:29,680
compiler Explorer which<font color="#CCCCCC"> is beautiful it</font>

183
00:08:27,910 --> 00:08:32,560
integrates a whole bunch<font color="#E5E5E5"> of compilers</font>

184
00:08:29,680 --> 00:08:34,360
and<font color="#E5E5E5"> it has on the left it shows you the</font>

185
00:08:32,559 --> 00:08:36,369
C code and the right shows<font color="#CCCCCC"> you the</font>

186
00:08:34,360 --> 00:08:38,169
assembly<font color="#CCCCCC"> and it's very any hat is like</font>

187
00:08:36,370 --> 00:08:40,839
<font color="#E5E5E5">color based and it's easy</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make</font>

188
00:08:38,169 --> 00:08:43,809
connections so it let's let's take<font color="#E5E5E5"> our</font>

189
00:08:40,839 --> 00:08:45,130
little<font color="#E5E5E5"> example</font><font color="#CCCCCC"> and on the Left we</font><font color="#E5E5E5"> see</font>

190
00:08:43,809 --> 00:08:46,900
generate key and on the right we see<font color="#CCCCCC"> the</font>

191
00:08:45,130 --> 00:08:48,550
compiler and sure enough<font color="#E5E5E5"> if you follow</font>

192
00:08:46,900 --> 00:08:50,650
the<font color="#E5E5E5"> colors and left and right</font><font color="#CCCCCC"> you can</font>

193
00:08:48,550 --> 00:08:52,839
<font color="#E5E5E5">see what</font><font color="#CCCCCC"> C Co translates to which</font>

194
00:08:50,650 --> 00:08:55,680
assembly right to make<font color="#E5E5E5"> it a bit a little</font>

195
00:08:52,839 --> 00:08:59,680
<font color="#E5E5E5">bit easier</font><font color="#CCCCCC"> that memset</font>

196
00:08:55,680 --> 00:09:01,449
that meant<font color="#E5E5E5"> that clearly gets translated</font>

197
00:08:59,680 --> 00:09:04,000
to assembly right<font color="#E5E5E5"> now</font><font color="#CCCCCC"> that is when you</font>

198
00:09:01,450 --> 00:09:05,320
do - o0 which is<font color="#E5E5E5"> the default which is</font>

199
00:09:04,000 --> 00:09:06,970
<font color="#E5E5E5">what you would do if you're developing</font>

200
00:09:05,320 --> 00:09:09,190
code and<font color="#E5E5E5"> you're and you and you want to</font>

201
00:09:06,970 --> 00:09:11,920
debug<font color="#E5E5E5"> this stuff right now</font>

202
00:09:09,190 --> 00:09:13,330
once you<font color="#E5E5E5"> you're done developing and</font>

203
00:09:11,920 --> 00:09:16,930
you're about to ship this thing<font color="#E5E5E5"> you do -</font>

204
00:09:13,330 --> 00:09:19,120
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> one for example</font><font color="#CCCCCC"> and this this this</font>

205
00:09:16,930 --> 00:09:20,589
<font color="#E5E5E5">little</font><font color="#CCCCCC"> disc a the optimizer kicks in and</font>

206
00:09:19,120 --> 00:09:22,750
<font color="#E5E5E5">all</font><font color="#CCCCCC"> the sudden your assembly looks a</font>

207
00:09:20,589 --> 00:09:25,540
whole<font color="#CCCCCC"> lot different you'll</font><font color="#E5E5E5"> notice it's</font>

208
00:09:22,750 --> 00:09:28,089
shorter<font color="#E5E5E5"> you'll notice that all of a</font>

209
00:09:25,540 --> 00:09:30,670
sudden you know<font color="#CCCCCC"> the the color of your</font>

210
00:09:28,089 --> 00:09:34,000
memset changed whereas<font color="#CCCCCC"> in o0 it was the</font>

211
00:09:30,670 --> 00:09:37,599
sort of<font color="#E5E5E5"> red ish and old sudden it became</font>

212
00:09:34,000 --> 00:09:42,070
white and it's nowhere to<font color="#CCCCCC"> be found in</font>

213
00:09:37,600 --> 00:09:44,620
<font color="#E5E5E5">your assembly</font><font color="#CCCCCC"> right it</font><font color="#E5E5E5"> just does</font><font color="#CCCCCC"> not</font>

214
00:09:42,070 --> 00:09:50,709
show up right that's<font color="#CCCCCC"> the problem okay</font>

215
00:09:44,620 --> 00:09:56,500
<font color="#CCCCCC">well what</font><font color="#E5E5E5"> happens right let's let's yeah</font>

216
00:09:50,709 --> 00:09:59,709
<font color="#CCCCCC">I still I stole that</font><font color="#E5E5E5"> so what happened is</font>

217
00:09:56,500 --> 00:10:02,440
a thing called dead store optimization

218
00:09:59,709 --> 00:10:04,719
or<font color="#E5E5E5"> Det store elimination</font><font color="#CCCCCC"> and so</font>

219
00:10:02,440 --> 00:10:06,399
<font color="#E5E5E5">basically that meant it at the end that</font>

220
00:10:04,720 --> 00:10:08,980
what you're doing is you<font color="#CCCCCC"> are writing</font>

221
00:10:06,399 --> 00:10:11,260
into<font color="#CCCCCC"> a</font><font color="#E5E5E5"> buffer that is never ever going</font>

222
00:10:08,980 --> 00:10:13,300
<font color="#CCCCCC">to</font><font color="#E5E5E5"> get used again and an optimizing</font>

223
00:10:11,260 --> 00:10:15,520
compiler looks at that and says hey you

224
00:10:13,300 --> 00:10:17,079
<font color="#CCCCCC">know I could just</font><font color="#E5E5E5"> take</font><font color="#CCCCCC"> that memset out</font>

225
00:10:15,520 --> 00:10:20,079
and I<font color="#CCCCCC"> just saved</font><font color="#E5E5E5"> you a couple</font><font color="#CCCCCC"> of cycles</font>

226
00:10:17,079 --> 00:10:22,029
<font color="#CCCCCC">and you have a smaller binary huge win</font>

227
00:10:20,079 --> 00:10:24,189
<font color="#CCCCCC">and</font><font color="#E5E5E5"> because it doesn't really change</font>

228
00:10:22,029 --> 00:10:26,170
what the program does<font color="#CCCCCC"> it's fully</font>

229
00:10:24,190 --> 00:10:30,790
compliant with oldest as the the

230
00:10:26,170 --> 00:10:32,589
<font color="#E5E5E5">relevant language standards right so</font>

231
00:10:30,790 --> 00:10:36,219
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> essentially that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> in a</font><font color="#E5E5E5"> nutshell</font>

232
00:10:32,589 --> 00:10:38,790
our problem<font color="#E5E5E5"> right</font><font color="#CCCCCC"> and so one of things I</font>

233
00:10:36,220 --> 00:10:42,190
want to do is I want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look at all</font>

234
00:10:38,790 --> 00:10:44,319
common compilers and<font color="#E5E5E5"> see for which of</font>

235
00:10:42,190 --> 00:10:48,339
these I can<font color="#CCCCCC"> get it to</font><font color="#E5E5E5"> effectively</font>

236
00:10:44,320 --> 00:10:51,070
practically optimize out<font color="#E5E5E5"> Amen set like</font>

237
00:10:48,339 --> 00:10:53,410
this<font color="#E5E5E5"> and I had</font><font color="#CCCCCC"> with some of them it</font><font color="#E5E5E5"> was</font>

238
00:10:51,070 --> 00:10:55,450
easy some of it was harder might fill

239
00:10:53,410 --> 00:10:56,770
around<font color="#E5E5E5"> with it</font><font color="#CCCCCC"> for some straight-up</font>

240
00:10:55,450 --> 00:10:58,959
<font color="#E5E5E5">memset works for others I had to like</font>

241
00:10:56,770 --> 00:11:02,170
kind of twiddle and make a for loop or

242
00:10:58,959 --> 00:11:03,760
you know kind<font color="#CCCCCC"> of jump</font><font color="#E5E5E5"> around a bit but</font>

243
00:11:02,170 --> 00:11:06,099
essentially<font color="#E5E5E5"> that these are lists of Tang</font>

244
00:11:03,760 --> 00:11:08,290
compilers I test it<font color="#CCCCCC"> I try to get</font><font color="#E5E5E5"> my</font>

245
00:11:06,100 --> 00:11:10,959
hands<font color="#E5E5E5"> on the IBM compiler but</font>

246
00:11:08,290 --> 00:11:14,469
I don't have $20,000<font color="#CCCCCC"> so I couldn't do</font>

247
00:11:10,959 --> 00:11:17,469
that<font color="#CCCCCC"> but</font><font color="#E5E5E5"> these are the ones that I did</font>

248
00:11:14,470 --> 00:11:19,479
test and then so the first five<font color="#E5E5E5"> were the</font>

249
00:11:17,470 --> 00:11:21,669
first<font color="#E5E5E5"> four you will know you know the</font>

250
00:11:19,479 --> 00:11:24,009
<font color="#E5E5E5">GCC and clang and the Intel compiler</font>

251
00:11:21,669 --> 00:11:25,749
know Microsoft compiler<font color="#CCCCCC"> and</font><font color="#E5E5E5"> they're all</font>

252
00:11:24,009 --> 00:11:27,669
<font color="#E5E5E5">also on the compile</font><font color="#CCCCCC"> Explorer so it was</font>

253
00:11:25,749 --> 00:11:30,489
easy to<font color="#E5E5E5"> test those and it was very easy</font>

254
00:11:27,669 --> 00:11:33,220
to<font color="#E5E5E5"> get those two to optimize out mem</font>

255
00:11:30,489 --> 00:11:35,470
sets<font color="#E5E5E5"> and then I moved on</font><font color="#CCCCCC"> downloaded</font>

256
00:11:33,220 --> 00:11:40,029
<font color="#E5E5E5">much others you know the Sun Studio</font>

257
00:11:35,470 --> 00:11:42,220
compiler and the Embarcadero<font color="#E5E5E5"> C++ builder</font>

258
00:11:40,029 --> 00:11:44,709
and the arm compiler and a bunch of

259
00:11:42,220 --> 00:11:47,739
<font color="#E5E5E5">others</font><font color="#CCCCCC"> and out of these ten I was able</font>

260
00:11:44,709 --> 00:11:50,679
<font color="#CCCCCC">to get</font><font color="#E5E5E5"> eight to optimize it out right</font>

261
00:11:47,739 --> 00:11:53,379
<font color="#CCCCCC">eighty percent of most of the most</font>

262
00:11:50,679 --> 00:11:54,910
common compilers do this in any in a

263
00:11:53,379 --> 00:11:57,609
practical sense so that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> isn't just</font>

264
00:11:54,910 --> 00:12:01,449
<font color="#E5E5E5">like a theoretical thing this really</font>

265
00:11:57,609 --> 00:12:04,449
happens<font color="#CCCCCC"> a funny note I tried really hard</font>

266
00:12:01,449 --> 00:12:06,699
<font color="#E5E5E5">to get the PGI compiler to do it</font><font color="#CCCCCC"> in fact</font>

267
00:12:04,449 --> 00:12:09,819
it has it<font color="#E5E5E5"> has a switch called</font>

268
00:12:06,699 --> 00:12:11,469
debts or elimination<font color="#CCCCCC"> and of course I</font>

269
00:12:09,819 --> 00:12:12,608
<font color="#CCCCCC">claimed</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> and I tried it</font><font color="#E5E5E5"> and I spent</font>

270
00:12:11,470 --> 00:12:15,160
<font color="#E5E5E5">over an hour trying to get it to</font>

271
00:12:12,609 --> 00:12:17,949
optimize<font color="#E5E5E5"> out my memset</font><font color="#CCCCCC"> god</font><font color="#E5E5E5"> damn thing</font>

272
00:12:15,160 --> 00:12:19,480
<font color="#E5E5E5">wouldn't move I don't know what I don't</font>

273
00:12:17,949 --> 00:12:23,229
<font color="#CCCCCC">know what</font><font color="#E5E5E5"> it's doing</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> I couldn't</font>

274
00:12:19,480 --> 00:12:25,660
<font color="#E5E5E5">get it to do anything but basically most</font>

275
00:12:23,230 --> 00:12:28,389
compilers if you asked<font color="#E5E5E5"> them to do</font>

276
00:12:25,660 --> 00:12:32,319
optimization will gladly optimize out a

277
00:12:28,389 --> 00:12:35,259
lot of sets<font color="#E5E5E5"> right so the next question</font>

278
00:12:32,319 --> 00:12:39,160
is how common is it<font color="#E5E5E5"> to actually</font><font color="#CCCCCC"> see a</font>

279
00:12:35,259 --> 00:12:41,379
<font color="#CCCCCC">project's use optimization right and</font>

280
00:12:39,160 --> 00:12:44,350
this sort of<font color="#E5E5E5"> stems from a conversation</font><font color="#CCCCCC"> I</font>

281
00:12:41,379 --> 00:12:46,209
had earlier this year with a<font color="#E5E5E5"> couple</font><font color="#CCCCCC"> of</font>

282
00:12:44,350 --> 00:12:49,509
<font color="#E5E5E5">colleagues where a bunch of people said</font>

283
00:12:46,209 --> 00:12:50,319
well<font color="#CCCCCC"> you know I don't co2 or</font><font color="#E5E5E5"> o1 or OS</font>

284
00:12:49,509 --> 00:12:52,269
all that often

285
00:12:50,319 --> 00:12:55,569
I don't think optimization is<font color="#E5E5E5"> all that</font>

286
00:12:52,269 --> 00:12:57,699
common<font color="#CCCCCC"> and so I</font><font color="#E5E5E5"> start looking</font><font color="#CCCCCC"> around</font><font color="#E5E5E5"> and</font>

287
00:12:55,569 --> 00:12:59,919
<font color="#CCCCCC">I said</font><font color="#E5E5E5"> okay well where can I</font><font color="#CCCCCC"> get some</font>

288
00:12:57,699 --> 00:13:01,329
data<font color="#E5E5E5"> and the first thing I was so I was</font>

289
00:12:59,919 --> 00:13:03,579
<font color="#CCCCCC">ok well I go to obscure at</font><font color="#E5E5E5"> apple.com and</font>

290
00:13:01,329 --> 00:13:05,258
<font color="#CCCCCC">that lists about 200</font><font color="#E5E5E5"> projects and I'll</font>

291
00:13:03,579 --> 00:13:07,959
just go<font color="#CCCCCC"> through all</font><font color="#E5E5E5"> their make files and</font>

292
00:13:05,259 --> 00:13:09,609
look for Oh<font color="#E5E5E5"> two or</font><font color="#CCCCCC"> os and so on and</font>

293
00:13:07,959 --> 00:13:12,099
there's<font color="#E5E5E5"> about</font><font color="#CCCCCC"> a hundred out of</font><font color="#E5E5E5"> there and</font>

294
00:13:09,609 --> 00:13:13,539
then I realized<font color="#CCCCCC"> that they actually don't</font>

295
00:13:12,100 --> 00:13:16,089
use make files they have<font color="#E5E5E5"> a really</font>

296
00:13:13,539 --> 00:13:18,549
bizarre<font color="#CCCCCC"> build system</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that built</font>

297
00:13:16,089 --> 00:13:20,109
system by default<font color="#CCCCCC"> uses OS</font><font color="#E5E5E5"> so even though</font>

298
00:13:18,549 --> 00:13:22,480
it says 100 out of<font color="#E5E5E5"> 200 it's probably</font>

299
00:13:20,109 --> 00:13:25,070
<font color="#CCCCCC">close to the</font><font color="#E5E5E5"> 200 out</font><font color="#CCCCCC"> of 2</font>

300
00:13:22,480 --> 00:13:27,800
and then I don't hold this to<font color="#CCCCCC"> programs</font><font color="#E5E5E5"> I</font>

301
00:13:25,070 --> 00:13:30,050
<font color="#E5E5E5">want to test in like FreeBSD</font><font color="#CCCCCC"> and Ubuntu</font>

302
00:13:27,800 --> 00:13:32,060
<font color="#CCCCCC">and a bunch of</font><font color="#E5E5E5"> Linux distros but that's</font>

303
00:13:30,050 --> 00:13:35,329
pretty<font color="#E5E5E5"> boring and</font><font color="#CCCCCC"> I ran out of time so I</font>

304
00:13:32,060 --> 00:13:37,939
kind of<font color="#E5E5E5"> stopped there</font><font color="#CCCCCC"> but these numbers</font>

305
00:13:35,330 --> 00:13:40,760
<font color="#CCCCCC">should be</font><font color="#E5E5E5"> good</font><font color="#CCCCCC"> enough in addition if</font><font color="#E5E5E5"> you</font>

306
00:13:37,940 --> 00:13:43,190
look at the common<font color="#E5E5E5"> IDs a particular</font>

307
00:13:40,760 --> 00:13:46,040
feature studio<font color="#E5E5E5"> and Xcode</font><font color="#CCCCCC"> when you tell</font>

308
00:13:43,190 --> 00:13:50,540
them<font color="#CCCCCC"> to build</font><font color="#E5E5E5"> a project in release mode</font>

309
00:13:46,040 --> 00:13:53,060
for your<font color="#E5E5E5"> studio by default</font><font color="#CCCCCC"> da so</font><font color="#E5E5E5"> 2x code</font>

310
00:13:50,540 --> 00:13:55,430
by default<font color="#E5E5E5"> da 0 s right so the fact that</font>

311
00:13:53,060 --> 00:13:58,040
these tools by default give you

312
00:13:55,430 --> 00:14:00,199
optimization<font color="#CCCCCC"> should should make you</font>

313
00:13:58,040 --> 00:14:02,300
confident off<font color="#E5E5E5"> in knowing</font><font color="#CCCCCC"> that yes in</font>

314
00:14:00,200 --> 00:14:04,370
fact<font color="#E5E5E5"> optimization is incredibly common</font>

315
00:14:02,300 --> 00:14:06,770
in release builds it

316
00:14:04,370 --> 00:14:11,990
it isn't everywhere<font color="#CCCCCC"> but it is</font><font color="#E5E5E5"> almost</font>

317
00:14:06,770 --> 00:14:13,490
everywhere<font color="#E5E5E5"> right so now that we know the</font>

318
00:14:11,990 --> 00:14:15,290
problem and<font color="#E5E5E5"> now that we</font><font color="#CCCCCC"> know it isn't</font>

319
00:14:13,490 --> 00:14:18,250
<font color="#CCCCCC">just theoretical and that we know it's</font>

320
00:14:15,290 --> 00:14:22,810
practical and that in fact<font color="#E5E5E5"> it does occur</font>

321
00:14:18,250 --> 00:14:25,580
<font color="#CCCCCC">very very often and with most compilers</font>

322
00:14:22,810 --> 00:14:29,060
<font color="#CCCCCC">in fact basically</font><font color="#E5E5E5"> it's a real problem</font>

323
00:14:25,580 --> 00:14:32,170
<font color="#CCCCCC">how do we fix this right and</font><font color="#E5E5E5"> this is</font>

324
00:14:29,060 --> 00:14:32,170
sort of where things<font color="#E5E5E5"> get difficult</font>

325
00:14:32,650 --> 00:14:38,810
<font color="#CCCCCC">there are many sort of solutions</font>

326
00:14:36,500 --> 00:14:41,180
nothing is portable<font color="#E5E5E5"> right it's sort of</font>

327
00:14:38,810 --> 00:14:42,439
<font color="#E5E5E5">the okay well this solution works if you</font>

328
00:14:41,180 --> 00:14:44,689
<font color="#CCCCCC">use this compiler</font><font color="#E5E5E5"> and this solution</font>

329
00:14:42,440 --> 00:14:46,460
<font color="#E5E5E5">works if you use this</font><font color="#CCCCCC"> Lipsy and this</font>

330
00:14:44,690 --> 00:14:48,560
solution<font color="#E5E5E5"> works if you</font><font color="#CCCCCC"> use this OS and</font>

331
00:14:46,460 --> 00:14:50,330
this solution<font color="#E5E5E5"> works with this</font><font color="#CCCCCC"> version</font><font color="#E5E5E5"> of</font>

332
00:14:48,560 --> 00:14:51,979
the language<font color="#E5E5E5"> spec and this solution</font>

333
00:14:50,330 --> 00:14:56,900
<font color="#E5E5E5">works</font><font color="#CCCCCC"> if you have this particular</font>

334
00:14:51,980 --> 00:14:59,030
executable file format<font color="#E5E5E5"> right so and</font>

335
00:14:56,900 --> 00:15:00,590
<font color="#E5E5E5">before I dive in any of those let's</font>

336
00:14:59,030 --> 00:15:03,620
first talk about the<font color="#E5E5E5"> elf in the room</font>

337
00:15:00,590 --> 00:15:05,180
don't just roll<font color="#E5E5E5"> your own I have seen</font>

338
00:15:03,620 --> 00:15:07,700
people do this<font color="#CCCCCC"> wedding</font><font color="#E5E5E5"> like oh well you</font>

339
00:15:05,180 --> 00:15:09,050
know<font color="#E5E5E5"> I'll I'll</font><font color="#CCCCCC"> just I'll fight what a</font>

340
00:15:07,700 --> 00:15:10,340
compiler<font color="#E5E5E5"> I know what I'm doing and</font>

341
00:15:09,050 --> 00:15:12,439
they'll<font color="#CCCCCC"> just you know they'll real</font>

342
00:15:10,340 --> 00:15:14,810
they're kind of Leroy Jenkins this and

343
00:15:12,440 --> 00:15:17,440
they'll totally screw it up<font color="#CCCCCC"> and</font><font color="#E5E5E5"> they'll</font>

344
00:15:14,810 --> 00:15:20,150
come up<font color="#CCCCCC"> with you know</font><font color="#E5E5E5"> some really stupid</font>

345
00:15:17,440 --> 00:15:21,290
<font color="#E5E5E5">idea</font><font color="#CCCCCC"> when I once I heard</font><font color="#E5E5E5"> it was</font><font color="#CCCCCC"> like oh</font>

346
00:15:20,150 --> 00:15:22,730
well I'll just<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> what I'll just</font>

347
00:15:21,290 --> 00:15:25,219
<font color="#E5E5E5">do i/o with the buffer and edits and</font>

348
00:15:22,730 --> 00:15:27,860
then<font color="#E5E5E5"> it's cool yeah you could do that</font>

349
00:15:25,220 --> 00:15:31,790
but then you're doing<font color="#CCCCCC"> I you're right for</font>

350
00:15:27,860 --> 00:15:33,350
<font color="#E5E5E5">no reason</font><font color="#CCCCCC"> so don't just roll your own</font>

351
00:15:31,790 --> 00:15:35,099
<font color="#E5E5E5">eye you're gonna come up with a solution</font>

352
00:15:33,350 --> 00:15:37,560
<font color="#E5E5E5">that's probably stupid</font>

353
00:15:35,100 --> 00:15:39,620
you're gonna look<font color="#E5E5E5"> really stupid</font><font color="#CCCCCC"> and</font>

354
00:15:37,560 --> 00:15:43,380
<font color="#CCCCCC">it'll be one</font><font color="#E5E5E5"> of these things</font><font color="#CCCCCC"> where okay</font>

355
00:15:39,620 --> 00:15:44,310
<font color="#E5E5E5">you're sort of your bad solution might</font>

356
00:15:43,380 --> 00:15:46,500
work<font color="#CCCCCC"> for this</font><font color="#E5E5E5"> particular version</font>

357
00:15:44,310 --> 00:15:49,229
compiler<font color="#CCCCCC"> but if you</font><font color="#E5E5E5"> don't stand that the</font>

358
00:15:46,500 --> 00:15:50,310
concepts behind<font color="#E5E5E5"> it then chances are the</font>

359
00:15:49,230 --> 00:15:53,340
<font color="#CCCCCC">next version to compiler that</font><font color="#E5E5E5"> is</font>

360
00:15:50,310 --> 00:15:57,150
somewhat slightly<font color="#E5E5E5"> smarter</font><font color="#CCCCCC"> will sort</font><font color="#E5E5E5"> of</font>

361
00:15:53,340 --> 00:15:59,280
just bypass<font color="#CCCCCC"> whatever you implement it so</font>

362
00:15:57,150 --> 00:16:01,199
so<font color="#E5E5E5"> don't roll you or if you want to roll</font>

363
00:15:59,280 --> 00:16:05,370
<font color="#CCCCCC">your</font><font color="#E5E5E5"> own at least listen</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the advice</font>

364
00:16:01,200 --> 00:16:07,440
of the next<font color="#CCCCCC"> ten</font><font color="#E5E5E5"> and then base your your</font>

365
00:16:05,370 --> 00:16:09,540
solution on at<font color="#E5E5E5"> least some</font><font color="#CCCCCC"> of the advice</font>

366
00:16:07,440 --> 00:16:13,170
<font color="#CCCCCC">that I'll be giving out next</font><font color="#E5E5E5"> couple of</font>

367
00:16:09,540 --> 00:16:15,870
slides<font color="#E5E5E5"> right so let's let with that</font>

368
00:16:13,170 --> 00:16:18,569
let's move<font color="#CCCCCC"> on to</font><font color="#E5E5E5"> actual solutions the</font>

369
00:16:15,870 --> 00:16:22,260
first<font color="#CCCCCC"> one is as a loop see function</font>

370
00:16:18,570 --> 00:16:24,120
called explicit<font color="#CCCCCC"> B 0 and this</font><font color="#E5E5E5"> is not part</font>

371
00:16:22,260 --> 00:16:29,280
of any standard as<font color="#CCCCCC"> far</font><font color="#E5E5E5"> as I can tell at</font>

372
00:16:24,120 --> 00:16:32,580
the present<font color="#CCCCCC"> time but this was this was</font>

373
00:16:29,280 --> 00:16:35,160
sort of<font color="#E5E5E5"> concocted in May 2014 by the</font>

374
00:16:32,580 --> 00:16:37,470
OpenBSD guys<font color="#CCCCCC"> if you'll note the date</font>

375
00:16:35,160 --> 00:16:40,620
it's pretty close<font color="#E5E5E5"> to</font><font color="#CCCCCC"> an hardly happened</font>

376
00:16:37,470 --> 00:16:42,360
it's a few months later<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think that may</font>

377
00:16:40,620 --> 00:16:46,440
<font color="#CCCCCC">have some relation</font>

378
00:16:42,360 --> 00:16:49,260
anyway this function basically does a be

379
00:16:46,440 --> 00:16:51,270
0 but explicitly guarantees that<font color="#E5E5E5"> it does</font>

380
00:16:49,260 --> 00:16:52,980
not get optimized out<font color="#CCCCCC"> and what</font><font color="#E5E5E5"> that</font>

381
00:16:51,270 --> 00:16:54,420
<font color="#CCCCCC">means</font><font color="#E5E5E5"> is that when</font><font color="#CCCCCC"> R does or doesn't</font>

382
00:16:52,980 --> 00:16:56,760
it's no longer your<font color="#CCCCCC"> problem</font>

383
00:16:54,420 --> 00:16:58,709
it's the<font color="#CCCCCC"> Latisse problem because they've</font>

384
00:16:56,760 --> 00:17:00,870
<font color="#CCCCCC">dave garand</font><font color="#E5E5E5"> they made the guarantee so</font>

385
00:16:58,710 --> 00:17:01,770
now it's on them<font color="#E5E5E5"> right so that's really</font>

386
00:17:00,870 --> 00:17:04,950
nice

387
00:17:01,770 --> 00:17:06,720
don't mute at first and then net<font color="#E5E5E5"> bsd</font>

388
00:17:04,950 --> 00:17:08,460
said you know that's a great<font color="#CCCCCC"> idea and</font>

389
00:17:06,720 --> 00:17:10,440
we're gonna steal it<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we're gonna</font>

390
00:17:08,460 --> 00:17:12,420
rename it though<font color="#E5E5E5"> so they changed the</font>

391
00:17:10,440 --> 00:17:14,550
<font color="#E5E5E5">name</font><font color="#CCCCCC"> to exclusive memset but it's</font>

392
00:17:12,420 --> 00:17:16,620
essentially the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> thing and then</font>

393
00:17:14,550 --> 00:17:19,560
about<font color="#E5E5E5"> two years and change ago freebsd</font>

394
00:17:16,619 --> 00:17:23,250
came up sort of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same</font><font color="#CCCCCC"> thing and then</font>

395
00:17:19,560 --> 00:17:25,980
almost<font color="#E5E5E5"> two years ago the GFC guys came</font>

396
00:17:23,250 --> 00:17:30,120
up<font color="#E5E5E5"> with</font><font color="#CCCCCC"> this too and then</font><font color="#E5E5E5"> diet</font><font color="#CCCCCC"> Lipsy</font>

397
00:17:25,980 --> 00:17:36,870
supports this<font color="#CCCCCC"> - OSX however does not</font>

398
00:17:30,120 --> 00:17:39,120
support<font color="#E5E5E5"> it</font><font color="#CCCCCC"> so if your peers if your</font>

399
00:17:36,870 --> 00:17:42,360
limited those platforms<font color="#CCCCCC"> explicit b0 is a</font>

400
00:17:39,120 --> 00:17:45,959
perfect solution<font color="#CCCCCC"> similarly if</font><font color="#E5E5E5"> you are</font>

401
00:17:42,360 --> 00:17:47,370
<font color="#E5E5E5">developing for</font><font color="#CCCCCC"> the windows</font><font color="#E5E5E5"> world</font><font color="#CCCCCC"> there</font>

402
00:17:45,960 --> 00:17:48,929
is an<font color="#CCCCCC"> api called</font><font color="#E5E5E5"> secure zero</font><font color="#CCCCCC"> memory</font>

403
00:17:47,370 --> 00:17:50,998
which basically is

404
00:17:48,929 --> 00:17:52,799
Microsoft saying<font color="#E5E5E5"> we guarantee</font><font color="#CCCCCC"> that this</font>

405
00:17:50,999 --> 00:17:55,619
<font color="#E5E5E5">thing doesn't</font><font color="#CCCCCC"> get optimized out and if</font>

406
00:17:52,799 --> 00:17:57,960
you want<font color="#CCCCCC"> to securely clear sensitive</font>

407
00:17:55,619 --> 00:18:00,090
material<font color="#CCCCCC"> just use this API</font>

408
00:17:57,960 --> 00:18:02,519
MSDN says it will ensure<font color="#CCCCCC"> that your</font><font color="#E5E5E5"> data</font>

409
00:18:00,090 --> 00:18:04,080
<font color="#E5E5E5">will be overwritten promptly</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it's</font>

410
00:18:02,519 --> 00:18:06,860
one<font color="#E5E5E5"> of the cases where Microsoft was</font>

411
00:18:04,080 --> 00:18:09,210
ahead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> curve by</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> 15 years</font>

412
00:18:06,860 --> 00:18:11,908
<font color="#CCCCCC">they've had this thing since the early</font>

413
00:18:09,210 --> 00:18:14,279
2000s<font color="#E5E5E5"> it was</font><font color="#CCCCCC"> in XP and it was in Windows</font>

414
00:18:11,909 --> 00:18:19,950
2003<font color="#E5E5E5"> both operating systems are no</font>

415
00:18:14,279 --> 00:18:22,379
<font color="#E5E5E5">longer supported but the API is</font><font color="#CCCCCC"> okay so</font>

416
00:18:19,950 --> 00:18:25,230
now there's not<font color="#E5E5E5"> a function called memset</font>

417
00:18:22,379 --> 00:18:26,639
underscore s and it<font color="#E5E5E5"> guarantees it</font>

418
00:18:25,230 --> 00:18:28,830
doesn't get<font color="#CCCCCC"> optimized out and it's</font>

419
00:18:26,639 --> 00:18:31,049
<font color="#E5E5E5">guaranteed by spec it's guaranteed by</font>

420
00:18:28,830 --> 00:18:34,019
the the<font color="#E5E5E5"> language spec it is standardized</font>

421
00:18:31,049 --> 00:18:38,070
it<font color="#E5E5E5"> is in</font><font color="#CCCCCC"> C 11 it</font><font color="#E5E5E5"> is wonderful it is</font>

422
00:18:34,019 --> 00:18:39,240
great<font color="#E5E5E5"> except it's not great because</font><font color="#CCCCCC"> even</font>

423
00:18:38,070 --> 00:18:41,279
though it's in<font color="#CCCCCC"> the standard and it's</font>

424
00:18:39,240 --> 00:18:44,850
there it's in what's called<font color="#E5E5E5"> the optional</font>

425
00:18:41,279 --> 00:18:46,710
annex<font color="#E5E5E5"> K and if you read the spec and</font>

426
00:18:44,850 --> 00:18:48,658
it's a lot it's<font color="#CCCCCC"> like pages</font><font color="#E5E5E5"> and pages of</font>

427
00:18:46,710 --> 00:18:51,600
boring crap but if you end up to end up

428
00:18:48,659 --> 00:18:52,340
reading the<font color="#CCCCCC"> k2 it's it says optional</font>

429
00:18:51,600 --> 00:18:54,539
extension

430
00:18:52,340 --> 00:18:57,600
<font color="#E5E5E5">what does optional extension mean it</font>

431
00:18:54,539 --> 00:19:01,320
means<font color="#E5E5E5"> you can be entirely</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> 11 compliant</font>

432
00:18:57,600 --> 00:19:03,689
<font color="#E5E5E5">and not offer mem said s so it's kind of</font>

433
00:19:01,320 --> 00:19:07,249
this as<font color="#CCCCCC"> reverend lovejoy</font><font color="#E5E5E5"> would say yes</font>

434
00:19:03,690 --> 00:19:10,860
but if no<font color="#E5E5E5"> it</font><font color="#CCCCCC"> ibattz</font>

435
00:19:07,249 --> 00:19:13,409
<font color="#CCCCCC">so if it's there great</font><font color="#E5E5E5"> if it's not it's</font>

436
00:19:10,860 --> 00:19:15,209
it<font color="#E5E5E5"> doesn't it has the potential of being</font>

437
00:19:13,409 --> 00:19:24,629
this<font color="#E5E5E5"> great portable solution and then it</font>

438
00:19:15,210 --> 00:19:27,149
isn't right<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then of course the sort</font>

439
00:19:24,629 --> 00:19:30,149
of obvious choice but somehow a lot<font color="#CCCCCC"> of</font>

440
00:19:27,149 --> 00:19:31,469
<font color="#E5E5E5">people seem to miss this is if your end</font>

441
00:19:30,149 --> 00:19:34,110
up doing something<font color="#E5E5E5"> with sensitive</font>

442
00:19:31,470 --> 00:19:35,789
material chances are you using a crypto

443
00:19:34,110 --> 00:19:38,129
library<font color="#E5E5E5"> and if you're using crypto</font>

444
00:19:35,789 --> 00:19:41,669
library chances are the crypto library

445
00:19:38,129 --> 00:19:44,820
offers you an API to do secure<font color="#E5E5E5"> memory</font>

446
00:19:41,669 --> 00:19:47,220
cleaning and so I listed the the common

447
00:19:44,820 --> 00:19:49,918
ones<font color="#CCCCCC"> using open SL there's open SSL</font>

448
00:19:47,220 --> 00:19:51,629
cleanse and open SSL guarantees they

449
00:19:49,919 --> 00:19:53,999
don't get up to<font color="#E5E5E5"> myself if you use glue</font>

450
00:19:51,629 --> 00:19:56,580
TLS there's<font color="#E5E5E5"> a gluteal</font><font color="#CCCCCC"> mm set same thing</font>

451
00:19:53,999 --> 00:19:59,070
<font color="#CCCCCC">duty</font><font color="#E5E5E5"> less guarantees does not get</font>

452
00:19:56,580 --> 00:20:01,109
optimized out<font color="#E5E5E5"> after using</font><font color="#CCCCCC"> leap sodium</font>

453
00:19:59,070 --> 00:20:03,320
which is<font color="#E5E5E5"> one of</font><font color="#CCCCCC"> the newer ones they have</font>

454
00:20:01,109 --> 00:20:06,449
sodium m0

455
00:20:03,320 --> 00:20:11,300
same thing day<font color="#E5E5E5"> they guarantee doesn't</font>

456
00:20:06,450 --> 00:20:13,830
get up to<font color="#E5E5E5"> myself and</font><font color="#CCCCCC"> I get</font><font color="#E5E5E5"> down a minute</font>

457
00:20:11,300 --> 00:20:16,889
so those are<font color="#E5E5E5"> this is basically up</font><font color="#CCCCCC"> until</font>

458
00:20:13,830 --> 00:20:19,439
here<font color="#CCCCCC"> I've sort of given you a list of</font>

459
00:20:16,890 --> 00:20:20,760
<font color="#CCCCCC">okay well here are specific</font><font color="#E5E5E5"> API</font>

460
00:20:19,440 --> 00:20:23,480
<font color="#E5E5E5">functions you can call if you're using</font>

461
00:20:20,760 --> 00:20:25,830
this library<font color="#CCCCCC"> or using this</font><font color="#E5E5E5"> OS use this</font>

462
00:20:23,480 --> 00:20:28,170
<font color="#E5E5E5">the next sort of solutions are sort of</font><font color="#CCCCCC"> D</font>

463
00:20:25,830 --> 00:20:30,179
<font color="#E5E5E5">okay well what if you can't rely on the</font>

464
00:20:28,170 --> 00:20:33,720
api's<font color="#E5E5E5"> maybe we can get something outta</font>

465
00:20:30,180 --> 00:20:36,450
<font color="#E5E5E5">to compiler right</font><font color="#CCCCCC"> the first</font><font color="#E5E5E5"> solution is</font>

466
00:20:33,720 --> 00:20:38,280
and<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is this isn't portable but most</font>

467
00:20:36,450 --> 00:20:40,350
compilers have<font color="#E5E5E5"> this or something like it</font>

468
00:20:38,280 --> 00:20:44,790
<font color="#CCCCCC">where you can go to</font><font color="#E5E5E5"> the compiler and say</font>

469
00:20:40,350 --> 00:20:46,860
hey<font color="#E5E5E5"> don't use the built-in memset just</font>

470
00:20:44,790 --> 00:20:49,470
use the one<font color="#CCCCCC"> from Lipsy and what that</font>

471
00:20:46,860 --> 00:20:51,300
means is you tell the compiler<font color="#CCCCCC"> that it</font>

472
00:20:49,470 --> 00:20:56,040
shouldn't assume that<font color="#E5E5E5"> it knows what</font><font color="#CCCCCC"> a</font>

473
00:20:51,300 --> 00:20:59,659
memset does<font color="#E5E5E5"> and if you do that then sure</font>

474
00:20:56,040 --> 00:21:02,430
enough memset won't get optimized out

475
00:20:59,660 --> 00:21:04,110
<font color="#CCCCCC">GCC</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> original you</font><font color="#E5E5E5"> see specific</font>

476
00:21:02,430 --> 00:21:06,720
and then the Intel compiler supports it

477
00:21:04,110 --> 00:21:09,209
too<font color="#E5E5E5"> and then clang supports a</font><font color="#CCCCCC"> two but up</font>

478
00:21:06,720 --> 00:21:12,240
<font color="#CCCCCC">until the</font><font color="#E5E5E5"> deal and this is true up until</font>

479
00:21:09,210 --> 00:21:13,560
clang<font color="#CCCCCC"> 3.7 which is maybe</font><font color="#E5E5E5"> two years old</font>

480
00:21:12,240 --> 00:21:16,140
<font color="#E5E5E5">it's not that old</font>

481
00:21:13,560 --> 00:21:17,399
clang basically you know support it<font color="#CCCCCC"> F no</font>

482
00:21:16,140 --> 00:21:18,510
built-in<font color="#E5E5E5"> memset and then what they did</font>

483
00:21:17,400 --> 00:21:22,890
<font color="#CCCCCC">is they</font><font color="#E5E5E5"> kind of dropped</font><font color="#CCCCCC"> it on the</font><font color="#E5E5E5"> floor</font>

484
00:21:18,510 --> 00:21:24,870
<font color="#CCCCCC">and it</font><font color="#E5E5E5"> got optimized out anyway</font><font color="#CCCCCC"> so it's</font>

485
00:21:22,890 --> 00:21:26,880
kind of annoying<font color="#CCCCCC"> it kind of wrecked</font><font color="#E5E5E5"> it</font>

486
00:21:24,870 --> 00:21:29,639
kind of ruins the<font color="#CCCCCC"> whole</font><font color="#E5E5E5"> use this because</font>

487
00:21:26,880 --> 00:21:30,920
it's because it<font color="#E5E5E5"> works because except if</font>

488
00:21:29,640 --> 00:21:34,080
<font color="#E5E5E5">you're using an older</font><font color="#CCCCCC"> version of clang</font>

489
00:21:30,920 --> 00:21:35,940
<font color="#CCCCCC">and also you know it's</font><font color="#E5E5E5"> not overly</font>

490
00:21:34,080 --> 00:21:38,370
portable but but it's a solution<font color="#CCCCCC"> that</font>

491
00:21:35,940 --> 00:21:40,290
works<font color="#CCCCCC"> other things might still get</font>

492
00:21:38,370 --> 00:21:42,479
optimized out if you if you have some

493
00:21:40,290 --> 00:21:44,100
<font color="#E5E5E5">kind of for loop</font><font color="#CCCCCC"> that clears memory that</font>

494
00:21:42,480 --> 00:21:45,630
might<font color="#E5E5E5"> still get optimized out but at</font>

495
00:21:44,100 --> 00:21:47,879
least if you use memset<font color="#CCCCCC"> and you're using</font>

496
00:21:45,630 --> 00:21:50,760
no<font color="#E5E5E5"> built-in memset then you have a</font>

497
00:21:47,880 --> 00:21:58,380
pretty<font color="#CCCCCC"> strong guarantee that it should</font>

498
00:21:50,760 --> 00:22:02,220
get optimized out so another<font color="#E5E5E5"> sort of</font>

499
00:21:58,380 --> 00:22:06,060
<font color="#E5E5E5">solution is you know just don't use</font>

500
00:22:02,220 --> 00:22:07,680
optimization<font color="#CCCCCC"> that works</font><font color="#E5E5E5"> go you're</font>

501
00:22:06,060 --> 00:22:11,330
guaranteed not to get code to get

502
00:22:07,680 --> 00:22:11,330
optimized if you don't use the optimizer

503
00:22:12,050 --> 00:22:17,750
<font color="#CCCCCC">obviously you know that isn't</font><font color="#E5E5E5"> perfect</font>

504
00:22:15,620 --> 00:22:19,189
through 145 sewers doesn't work if you

505
00:22:17,750 --> 00:22:21,140
<font color="#E5E5E5">don't use optimization</font><font color="#CCCCCC"> so if you want to</font>

506
00:22:19,190 --> 00:22:23,870
<font color="#E5E5E5">use</font><font color="#CCCCCC"> for device source</font><font color="#E5E5E5"> you have to use</font>

507
00:22:21,140 --> 00:22:25,370
<font color="#CCCCCC">optimization</font><font color="#E5E5E5"> you know</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> of course</font>

508
00:22:23,870 --> 00:22:27,049
<font color="#CCCCCC">that</font><font color="#E5E5E5"> yeah you're gonna change your build</font>

509
00:22:25,370 --> 00:22:29,389
<font color="#E5E5E5">environment</font><font color="#CCCCCC"> okay</font>

510
00:22:27,049 --> 00:22:32,418
it's I<font color="#E5E5E5"> mean</font><font color="#CCCCCC"> it's not overly</font><font color="#E5E5E5"> I guess it's</font>

511
00:22:29,390 --> 00:22:33,860
not portable<font color="#E5E5E5"> but then again</font><font color="#CCCCCC"> I most</font>

512
00:22:32,419 --> 00:22:36,409
compilers will have some way<font color="#E5E5E5"> to tell it</font>

513
00:22:33,860 --> 00:22:37,969
<font color="#CCCCCC">to not optimize</font><font color="#E5E5E5"> anything</font><font color="#CCCCCC"> but obviously</font>

514
00:22:36,409 --> 00:22:40,279
the<font color="#CCCCCC"> reason</font><font color="#E5E5E5"> you don't want to use this</font>

515
00:22:37,970 --> 00:22:42,770
particular<font color="#E5E5E5"> solution is</font><font color="#CCCCCC"> because you know</font>

516
00:22:40,279 --> 00:22:47,840
you don't<font color="#E5E5E5"> get the optimizer so your</font>

517
00:22:42,770 --> 00:22:50,510
<font color="#E5E5E5">product will probably be slower</font><font color="#CCCCCC"> sort of</font>

518
00:22:47,840 --> 00:22:54,020
a<font color="#CCCCCC"> spin-off</font><font color="#E5E5E5"> of this is some compilers in</font>

519
00:22:50,510 --> 00:22:57,350
particular<font color="#E5E5E5"> Microsoft one and then GCC</font>

520
00:22:54,020 --> 00:23:02,779
<font color="#E5E5E5">also kind of supports it is where you</font>

521
00:22:57,350 --> 00:23:05,539
can localize optimizations based<font color="#CCCCCC"> on</font>

522
00:23:02,779 --> 00:23:10,510
scopes and functions<font color="#CCCCCC"> and so you can say</font>

523
00:23:05,539 --> 00:23:10,510
oh you know<font color="#CCCCCC"> for</font><font color="#E5E5E5"> this function</font><font color="#CCCCCC"> duo zero</font>

524
00:23:10,899 --> 00:23:18,020
<font color="#CCCCCC">it seems it's</font><font color="#E5E5E5"> not a commonly used</font>

525
00:23:14,390 --> 00:23:20,740
feature<font color="#E5E5E5"> it seems like it might</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> some</font>

526
00:23:18,020 --> 00:23:23,149
side effects<font color="#E5E5E5"> and it doesn't</font><font color="#CCCCCC"> support all</font>

527
00:23:20,740 --> 00:23:26,090
switches<font color="#E5E5E5"> that the compiler generally</font>

528
00:23:23,149 --> 00:23:28,879
does<font color="#E5E5E5"> i've seems recommend by a few</font>

529
00:23:26,090 --> 00:23:33,289
<font color="#E5E5E5">people</font><font color="#CCCCCC"> i played around</font><font color="#E5E5E5"> with it it seems</font>

530
00:23:28,880 --> 00:23:36,950
to<font color="#CCCCCC"> work but</font><font color="#E5E5E5"> i it doesn't seem to be a</font>

531
00:23:33,289 --> 00:23:38,149
sort of commonly adopting things<font color="#CCCCCC"> the</font>

532
00:23:36,950 --> 00:23:40,520
other thing<font color="#E5E5E5"> of course is again this</font><font color="#CCCCCC"> is</font>

533
00:23:38,149 --> 00:23:42,620
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> i mean these these are progress</font>

534
00:23:40,520 --> 00:23:50,360
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is very very compiler specific</font>

535
00:23:42,620 --> 00:23:53,629
stuff<font color="#E5E5E5"> another solution is using what's</font>

536
00:23:50,360 --> 00:23:57,080
called<font color="#E5E5E5"> weak symbols</font><font color="#CCCCCC"> anybody familiar</font>

537
00:23:53,630 --> 00:24:00,380
with weak symbols<font color="#CCCCCC"> oh yeah</font><font color="#E5E5E5"> a little bit</font>

538
00:23:57,080 --> 00:24:02,059
<font color="#E5E5E5">oh I'll try to sort of very briefly get</font>

539
00:24:00,380 --> 00:24:04,760
into this so the elf file format

540
00:24:02,059 --> 00:24:07,090
<font color="#E5E5E5">basically is a format</font><font color="#CCCCCC"> that specifies how</font>

541
00:24:04,760 --> 00:24:10,190
to have an executable<font color="#CCCCCC"> that can run on</font>

542
00:24:07,090 --> 00:24:12,110
<font color="#CCCCCC">lessons that</font><font color="#E5E5E5"> support this file format so</font>

543
00:24:10,190 --> 00:24:13,539
<font color="#E5E5E5">LS if it's compiled for example for</font>

544
00:24:12,110 --> 00:24:18,229
<font color="#E5E5E5">Linux it'll be in this particular</font><font color="#CCCCCC"> format</font>

545
00:24:13,539 --> 00:24:20,289
and one<font color="#E5E5E5"> of the obviously</font><font color="#CCCCCC"> a Sparta format</font>

546
00:24:18,230 --> 00:24:24,429
you can source symbols for things like

547
00:24:20,289 --> 00:24:26,780
<font color="#E5E5E5">functions and variables and so</font><font color="#CCCCCC"> on and</font>

548
00:24:24,429 --> 00:24:29,600
generally a symbol is what's called a

549
00:24:26,780 --> 00:24:33,470
strong<font color="#E5E5E5"> symbol you can mark one as weak</font>

550
00:24:29,600 --> 00:24:37,070
and what week means is<font color="#CCCCCC"> that a symbol may</font>

551
00:24:33,470 --> 00:24:41,780
change in<font color="#E5E5E5"> run time</font><font color="#CCCCCC"> and what that means</font>

552
00:24:37,070 --> 00:24:43,610
is if you declare a function<font color="#E5E5E5"> or a symbol</font>

553
00:24:41,780 --> 00:24:47,889
<font color="#E5E5E5">of a function as week</font>

554
00:24:43,610 --> 00:24:50,570
that means at compile time<font color="#CCCCCC"> the compiler</font>

555
00:24:47,890 --> 00:24:54,430
would have a very<font color="#CCCCCC"> hard time</font><font color="#E5E5E5"> to reason</font>

556
00:24:50,570 --> 00:24:56,480
<font color="#CCCCCC">about what</font><font color="#E5E5E5"> that thing does</font><font color="#CCCCCC"> because</font>

557
00:24:54,430 --> 00:25:00,350
because<font color="#CCCCCC"> of this your</font><font color="#E5E5E5"> fact that you've</font>

558
00:24:56,480 --> 00:25:02,780
declared it as week<font color="#CCCCCC"> and in fact this</font>

559
00:25:00,350 --> 00:25:05,090
<font color="#CCCCCC">this particular solution is what open me</font>

560
00:25:02,780 --> 00:25:10,010
as the users in their implementation of

561
00:25:05,090 --> 00:25:12,620
<font color="#CCCCCC">exclusive b0 and what I really like</font>

562
00:25:10,010 --> 00:25:15,260
about this<font color="#E5E5E5"> is that this is</font><font color="#CCCCCC"> the commit</font>

563
00:25:12,620 --> 00:25:16,939
message for<font color="#CCCCCC"> do</font><font color="#E5E5E5"> music is and they they're</font>

564
00:25:15,260 --> 00:25:19,760
they're<font color="#CCCCCC"> very pragmatic about</font><font color="#E5E5E5"> if they say</font>

565
00:25:16,940 --> 00:25:21,670
well you know the<font color="#E5E5E5"> we think our solution</font>

566
00:25:19,760 --> 00:25:24,530
is pretty<font color="#E5E5E5"> clever</font><font color="#CCCCCC"> but it's not foolproof</font>

567
00:25:21,670 --> 00:25:26,720
<font color="#E5E5E5">there are still two ways to defeat this</font>

568
00:25:24,530 --> 00:25:30,050
and they list you know a bunch<font color="#E5E5E5"> of ways</font>

569
00:25:26,720 --> 00:25:31,550
to<font color="#CCCCCC"> do this in</font><font color="#E5E5E5"> particular you know well</font>

570
00:25:30,050 --> 00:25:33,860
you know<font color="#CCCCCC"> the compiler could</font><font color="#E5E5E5"> omit runtime</font>

571
00:25:31,550 --> 00:25:36,590
code that checks<font color="#E5E5E5"> what this thing</font><font color="#CCCCCC"> is in</font>

572
00:25:33,860 --> 00:25:38,810
<font color="#CCCCCC">runtime right</font><font color="#E5E5E5"> before it's called and</font>

573
00:25:36,590 --> 00:25:42,709
then you could still optimize it out if

574
00:25:38,810 --> 00:25:44,990
the thing matches or doesn't match<font color="#E5E5E5"> and</font>

575
00:25:42,710 --> 00:25:46,340
but then they go on<font color="#E5E5E5"> and say well in the</font>

576
00:25:44,990 --> 00:25:50,540
foreseeable<font color="#CCCCCC"> future we</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> that's</font>

577
00:25:46,340 --> 00:25:52,280
<font color="#CCCCCC">going to happen but</font><font color="#E5E5E5"> it's possible that</font>

578
00:25:50,540 --> 00:25:55,040
<font color="#E5E5E5">at some</font><font color="#CCCCCC"> point down the road this might</font>

579
00:25:52,280 --> 00:25:56,300
happen<font color="#CCCCCC"> and so I</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> the I like</font><font color="#E5E5E5"> their</font>

580
00:25:55,040 --> 00:25:58,040
way of reasoning<font color="#E5E5E5"> about this</font><font color="#CCCCCC"> we're</font>

581
00:25:56,300 --> 00:25:59,960
<font color="#CCCCCC">absolutely speeding clever but it's not</font>

582
00:25:58,040 --> 00:26:02,350
foolproof<font color="#E5E5E5"> it may at</font><font color="#CCCCCC"> some point in the</font>

583
00:25:59,960 --> 00:26:06,430
<font color="#E5E5E5">future break but at the present time</font>

584
00:26:02,350 --> 00:26:10,370
<font color="#CCCCCC">it's a fairly</font><font color="#E5E5E5"> good solution I think</font>

585
00:26:06,430 --> 00:26:14,090
<font color="#E5E5E5">right so another solution</font><font color="#CCCCCC"> is to use</font>

586
00:26:10,370 --> 00:26:15,590
memory<font color="#E5E5E5"> barriers does that how</font><font color="#CCCCCC"> many</font>

587
00:26:14,090 --> 00:26:19,520
<font color="#E5E5E5">people know what a memory</font><font color="#CCCCCC"> Berry</font><font color="#E5E5E5"> is or</font>

588
00:26:15,590 --> 00:26:22,629
what it<font color="#CCCCCC"> does</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> the same number</font>

589
00:26:19,520 --> 00:26:25,660
hands<font color="#E5E5E5"> okay let me try</font><font color="#CCCCCC"> to very briefly</font>

590
00:26:22,630 --> 00:26:28,340
<font color="#CCCCCC">sort of explain what a memory barrier is</font>

591
00:26:25,660 --> 00:26:30,110
<font color="#CCCCCC">and bear with me here because</font><font color="#E5E5E5"> it's and</font>

592
00:26:28,340 --> 00:26:33,050
I'm gonna oversimplify because it's not

593
00:26:30,110 --> 00:26:35,990
a particularly simple concept if you've

594
00:26:33,050 --> 00:26:37,669
never heard of<font color="#E5E5E5"> it</font><font color="#CCCCCC"> but ok</font><font color="#E5E5E5"> let's say let's</font>

595
00:26:35,990 --> 00:26:39,560
say<font color="#E5E5E5"> you have a piece of code</font><font color="#CCCCCC"> two global</font>

596
00:26:37,670 --> 00:26:42,050
<font color="#CCCCCC">variables a and B and you</font><font color="#E5E5E5"> assign a value</font>

597
00:26:39,560 --> 00:26:43,250
you say a equals something<font color="#CCCCCC"> and B equals</font>

598
00:26:42,050 --> 00:26:45,290
something<font color="#E5E5E5"> right and there's no</font>

599
00:26:43,250 --> 00:26:47,740
relation between a<font color="#CCCCCC"> and B right what that</font>

600
00:26:45,290 --> 00:26:51,500
means is<font color="#E5E5E5"> boat</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> compiler into</font><font color="#CCCCCC"> hardware</font>

601
00:26:47,740 --> 00:26:54,350
<font color="#E5E5E5">because they have no relation</font><font color="#CCCCCC"> the both</font>

602
00:26:51,500 --> 00:26:55,730
of<font color="#E5E5E5"> them are allowed to reorder it so B</font>

603
00:26:54,350 --> 00:26:57,080
can<font color="#E5E5E5"> be assigned first and then a can be</font>

604
00:26:55,730 --> 00:26:59,660
a site later<font color="#E5E5E5"> because there's no</font>

605
00:26:57,080 --> 00:27:00,860
correlation<font color="#E5E5E5"> that's perfectly</font><font color="#CCCCCC"> valid now</font>

606
00:26:59,660 --> 00:27:03,950
let's say you have<font color="#CCCCCC"> a second thread</font>

607
00:27:00,860 --> 00:27:07,790
somewhere<font color="#CCCCCC"> and your second thread says ok</font>

608
00:27:03,950 --> 00:27:11,750
<font color="#CCCCCC">you know while not be spin and then once</font>

609
00:27:07,790 --> 00:27:13,250
B is set you use a right<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is sort of</font>

610
00:27:11,750 --> 00:27:14,840
where you're<font color="#E5E5E5"> basically waiting on</font>

611
00:27:13,250 --> 00:27:17,300
<font color="#E5E5E5">something to be set and the idea is that</font>

612
00:27:14,840 --> 00:27:20,929
<font color="#E5E5E5">you're you wrote your code</font><font color="#CCCCCC"> so that</font><font color="#E5E5E5"> B is</font>

613
00:27:17,300 --> 00:27:24,080
set<font color="#E5E5E5"> after a is set and that seems</font>

614
00:27:20,930 --> 00:27:25,400
logical and<font color="#CCCCCC"> that would work except if</font>

615
00:27:24,080 --> 00:27:27,379
the<font color="#E5E5E5"> compiled and</font><font color="#CCCCCC"> hardware don't know</font>

616
00:27:25,400 --> 00:27:29,360
there's a relation between your loop on

617
00:27:27,380 --> 00:27:32,080
one<font color="#CCCCCC"> end and your Simon on</font><font color="#E5E5E5"> the other and</font>

618
00:27:29,360 --> 00:27:35,389
either the<font color="#CCCCCC"> hardware or the</font><font color="#E5E5E5"> compiler</font>

619
00:27:32,080 --> 00:27:38,899
reorders it and sets B before it sets a

620
00:27:35,390 --> 00:27:40,280
really really nasty<font color="#CCCCCC"> things happen this</font>

621
00:27:38,900 --> 00:27:42,320
<font color="#CCCCCC">is this is and</font><font color="#E5E5E5"> this has been the sewers</font>

622
00:27:40,280 --> 00:27:47,810
of numerous<font color="#CCCCCC"> security bugs</font><font color="#E5E5E5"> very very</font>

623
00:27:42,320 --> 00:27:50,629
subtle stuff the case and and<font color="#E5E5E5"> T</font><font color="#CCCCCC"> San kind</font>

624
00:27:47,810 --> 00:27:52,460
of stuff we've seen<font color="#E5E5E5"> kernel last couple</font>

625
00:27:50,630 --> 00:27:56,540
years<font color="#CCCCCC"> bunch</font><font color="#E5E5E5"> that is</font><font color="#CCCCCC"> related to these</font>

626
00:27:52,460 --> 00:27:58,910
kind<font color="#E5E5E5"> of bugs</font><font color="#CCCCCC"> and so the way the way that</font>

627
00:27:56,540 --> 00:28:01,129
you fix this is you introduce what's

628
00:27:58,910 --> 00:28:02,870
called a memory barrier<font color="#E5E5E5"> and that</font><font color="#CCCCCC"> is</font>

629
00:28:01,130 --> 00:28:04,820
<font color="#E5E5E5">basically when you write your code</font><font color="#CCCCCC"> you</font>

630
00:28:02,870 --> 00:28:06,590
say a<font color="#E5E5E5"> equals something and then before</font>

631
00:28:04,820 --> 00:28:08,330
<font color="#E5E5E5">you say</font><font color="#CCCCCC"> B</font><font color="#E5E5E5"> quill something you basically</font>

632
00:28:06,590 --> 00:28:10,189
in the middle say memory<font color="#CCCCCC"> barrier and</font>

633
00:28:08,330 --> 00:28:13,189
then you say B equals something<font color="#E5E5E5"> and what</font>

634
00:28:10,190 --> 00:28:14,540
that means<font color="#E5E5E5"> is it gives a signal to the</font>

635
00:28:13,190 --> 00:28:17,450
heart<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> into the compiler and it</font>

636
00:28:14,540 --> 00:28:19,310
says whatever<font color="#E5E5E5"> happens before this and</font>

637
00:28:17,450 --> 00:28:21,560
<font color="#CCCCCC">after this you are not allowed to</font>

638
00:28:19,310 --> 00:28:23,210
reorder this there is a correlation

639
00:28:21,560 --> 00:28:23,570
<font color="#CCCCCC">there that I know that you're</font><font color="#E5E5E5"> not aware</font>

640
00:28:23,210 --> 00:28:26,900
<font color="#CCCCCC">of</font>

641
00:28:23,570 --> 00:28:30,620
so don't reorder it<font color="#E5E5E5"> and I hope I</font>

642
00:28:26,900 --> 00:28:33,320
explained it well and this<font color="#E5E5E5"> usually takes</font>

643
00:28:30,620 --> 00:28:34,669
a lot longer to explain<font color="#E5E5E5"> but I hope I got</font>

644
00:28:33,320 --> 00:28:37,460
the<font color="#E5E5E5"> message across well enough to sort</font>

645
00:28:34,670 --> 00:28:39,350
of give you an<font color="#E5E5E5"> idea what a memory</font>

646
00:28:37,460 --> 00:28:43,190
<font color="#CCCCCC">barriers and now the cool thing about</font>

647
00:28:39,350 --> 00:28:45,350
memory barriers is that it's a way for<font color="#E5E5E5"> a</font>

648
00:28:43,190 --> 00:28:47,900
programmer<font color="#CCCCCC"> to tell the</font><font color="#E5E5E5"> hardware or</font><font color="#CCCCCC"> the</font>

649
00:28:45,350 --> 00:28:50,740
compiler<font color="#CCCCCC"> I know something</font><font color="#E5E5E5"> about this</font>

650
00:28:47,900 --> 00:28:53,330
<font color="#E5E5E5">memory you don't stay</font><font color="#CCCCCC"> away don't touch</font>

651
00:28:50,740 --> 00:28:55,740
<font color="#E5E5E5">and because of I mean it works for</font>

652
00:28:53,330 --> 00:28:57,240
<font color="#E5E5E5">reordering but it also</font>

653
00:28:55,740 --> 00:28:59,280
it's<font color="#E5E5E5"> really well to not get something</font>

654
00:28:57,240 --> 00:29:01,650
<font color="#E5E5E5">optimized out right</font>

655
00:28:59,280 --> 00:29:03,720
the idea is you could<font color="#E5E5E5"> basically just do</font>

656
00:29:01,650 --> 00:29:05,490
your memset<font color="#E5E5E5"> and then on the</font><font color="#CCCCCC"> the thing</font>

657
00:29:03,720 --> 00:29:08,910
<font color="#CCCCCC">you mem said it you basically</font><font color="#E5E5E5"> do a</font>

658
00:29:05,490 --> 00:29:10,530
memory barrier<font color="#CCCCCC"> and that tells the</font>

659
00:29:08,910 --> 00:29:13,440
compiler or not to optimize it out

660
00:29:10,530 --> 00:29:17,040
<font color="#E5E5E5">it and I know the</font><font color="#CCCCCC"> concept sounds</font>

661
00:29:13,440 --> 00:29:18,990
complicated but<font color="#E5E5E5"> it's it's pretty clever</font>

662
00:29:17,040 --> 00:29:21,750
and and<font color="#E5E5E5"> there's I've</font><font color="#CCCCCC"> oversimplified this</font>

663
00:29:18,990 --> 00:29:26,190
because it's<font color="#E5E5E5"> relatively complicated</font>

664
00:29:21,750 --> 00:29:29,190
subject<font color="#E5E5E5"> but this works really well and</font>

665
00:29:26,190 --> 00:29:33,300
this is<font color="#CCCCCC"> used by dial-up</font><font color="#E5E5E5"> C and it's used</font>

666
00:29:29,190 --> 00:29:35,130
by<font color="#CCCCCC"> Cheil obscene and nginx recently had</font>

667
00:29:33,300 --> 00:29:38,030
a fix where they have their own explicit

668
00:29:35,130 --> 00:29:40,770
<font color="#CCCCCC">MZ row and it also uses</font><font color="#E5E5E5"> a memory barrier</font>

669
00:29:38,030 --> 00:29:45,840
<font color="#E5E5E5">so this is this is</font><font color="#CCCCCC"> a tried and</font><font color="#E5E5E5"> tested</font>

670
00:29:40,770 --> 00:29:47,700
concept and it works<font color="#CCCCCC"> so those are</font><font color="#E5E5E5"> kind</font>

671
00:29:45,840 --> 00:29:50,550
of solutions<font color="#CCCCCC"> that are known and</font><font color="#E5E5E5"> that</font>

672
00:29:47,700 --> 00:29:53,790
<font color="#E5E5E5">work or and have been tried and tested</font>

673
00:29:50,550 --> 00:29:56,970
by various fairly<font color="#CCCCCC"> well-known pieces of</font>

674
00:29:53,790 --> 00:29:58,678
software<font color="#CCCCCC"> if none of those things if</font>

675
00:29:56,970 --> 00:30:00,780
somehow you're in an environment

676
00:29:58,679 --> 00:30:03,420
<font color="#CCCCCC">somewhere</font><font color="#E5E5E5"> and none of this is available</font>

677
00:30:00,780 --> 00:30:05,040
<font color="#E5E5E5">to you or it's not portable enough and</font>

678
00:30:03,420 --> 00:30:07,920
you're looking for a solution<font color="#E5E5E5"> that works</font>

679
00:30:05,040 --> 00:30:10,170
everywhere<font color="#CCCCCC"> the best you can</font><font color="#E5E5E5"> do is fall</font>

680
00:30:07,920 --> 00:30:12,330
back on constructs that are<font color="#E5E5E5"> known in the</font>

681
00:30:10,170 --> 00:30:15,570
<font color="#E5E5E5">C language and this is</font><font color="#CCCCCC"> basically use of</font>

682
00:30:12,330 --> 00:30:18,510
the volatile<font color="#E5E5E5"> keyword</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> I call just a</font>

683
00:30:15,570 --> 00:30:20,010
<font color="#E5E5E5">fallback so people often go well I'll</font>

684
00:30:18,510 --> 00:30:22,890
just<font color="#E5E5E5"> use volatile and then that solves</font>

685
00:30:20,010 --> 00:30:24,990
<font color="#CCCCCC">the problem and it turns out optimizers</font>

686
00:30:22,890 --> 00:30:27,030
can be very<font color="#E5E5E5"> clever and very tricky and</font>

687
00:30:24,990 --> 00:30:29,790
even when you<font color="#CCCCCC"> use volatile</font><font color="#E5E5E5"> there are</font>

688
00:30:27,030 --> 00:30:34,379
cases<font color="#E5E5E5"> there's cases that can be made</font>

689
00:30:29,790 --> 00:30:37,020
where the optimizer<font color="#E5E5E5"> is clever</font><font color="#CCCCCC"> enough use</font>

690
00:30:34,380 --> 00:30:38,520
data may still get<font color="#E5E5E5"> optimized out so the</font>

691
00:30:37,020 --> 00:30:43,139
default<font color="#E5E5E5"> I solutions I sort of</font>

692
00:30:38,520 --> 00:30:45,150
<font color="#CCCCCC">best-effort fallback solutions</font><font color="#E5E5E5"> and</font>

693
00:30:43,140 --> 00:30:47,100
they're<font color="#CCCCCC"> sort of two variants</font><font color="#E5E5E5"> of this one</font>

694
00:30:45,150 --> 00:30:48,300
is a volatile pointer right<font color="#E5E5E5"> I mean</font>

695
00:30:47,100 --> 00:30:49,949
<font color="#E5E5E5">that's one of</font><font color="#CCCCCC"> the that's the</font><font color="#E5E5E5"> fallback</font>

696
00:30:48,300 --> 00:30:52,678
solution in the lip sodium<font color="#E5E5E5"> and the other</font>

697
00:30:49,950 --> 00:30:55,140
one is a volatile memset function

698
00:30:52,679 --> 00:30:56,460
pointer which is what<font color="#CCCCCC"> opensl uses</font><font color="#E5E5E5"> and</font>

699
00:30:55,140 --> 00:30:59,520
here's what that<font color="#E5E5E5"> looks</font><font color="#CCCCCC"> like this</font><font color="#E5E5E5"> is the</font>

700
00:30:56,460 --> 00:31:01,740
lip<font color="#CCCCCC"> sodium fallback and this looks like</font>

701
00:30:59,520 --> 00:31:03,059
<font color="#E5E5E5">you know</font><font color="#CCCCCC"> fall time sturdy you know you</font>

702
00:31:01,740 --> 00:31:05,400
tell the compiler hey you know I know

703
00:31:03,059 --> 00:31:07,800
something<font color="#CCCCCC"> about this you don't accept</font><font color="#E5E5E5"> it</font>

704
00:31:05,400 --> 00:31:09,059
and this<font color="#E5E5E5"> is where it gets</font><font color="#CCCCCC"> very language</font>

705
00:31:07,800 --> 00:31:13,510
<font color="#CCCCCC">eat</font>

706
00:31:09,059 --> 00:31:15,700
language<font color="#CCCCCC"> Lori</font><font color="#E5E5E5"> if you look at the</font><font color="#CCCCCC"> speck</font>

707
00:31:13,510 --> 00:31:19,149
it says something<font color="#E5E5E5"> along</font><font color="#CCCCCC"> the lines of the</font>

708
00:31:15,700 --> 00:31:21,399
access object something something<font color="#CCCCCC"> and</font>

709
00:31:19,149 --> 00:31:24,039
<font color="#E5E5E5">that they're describing the actual</font>

710
00:31:21,399 --> 00:31:24,639
<font color="#CCCCCC">memory volatile</font><font color="#E5E5E5"> not just the pointer</font>

711
00:31:24,039 --> 00:31:27,760
<font color="#CCCCCC">l-value</font>

712
00:31:24,639 --> 00:31:30,250
and so if the compiler<font color="#CCCCCC"> looks at this</font>

713
00:31:27,760 --> 00:31:32,649
code and<font color="#CCCCCC"> it can trace and it</font><font color="#E5E5E5"> can prove</font>

714
00:31:30,250 --> 00:31:34,720
<font color="#E5E5E5">that wherever</font><font color="#CCCCCC"> PN T came from</font><font color="#E5E5E5"> and if that</font>

715
00:31:32,649 --> 00:31:36,070
isn't<font color="#CCCCCC"> actually volatile then this</font>

716
00:31:34,720 --> 00:31:40,029
volatile doesn't really mean all<font color="#CCCCCC"> that</font>

717
00:31:36,070 --> 00:31:41,799
much and it can still<font color="#E5E5E5"> optimize it out</font>

718
00:31:40,029 --> 00:31:43,980
that sounds very theoretical<font color="#E5E5E5"> and I don't</font>

719
00:31:41,799 --> 00:31:46,240
<font color="#CCCCCC">know if that actually happens but a</font>

720
00:31:43,980 --> 00:31:48,460
number<font color="#E5E5E5"> of people smarter than me or that</font>

721
00:31:46,240 --> 00:31:50,380
know more<font color="#E5E5E5"> about the sort</font><font color="#CCCCCC"> of this needy</font>

722
00:31:48,460 --> 00:31:53,830
greedy little<font color="#E5E5E5"> C language things have</font>

723
00:31:50,380 --> 00:31:55,360
told me<font color="#E5E5E5"> that yes in</font><font color="#CCCCCC"> fact you would be</font>

724
00:31:53,830 --> 00:31:58,539
allowed<font color="#E5E5E5"> to do that if you're a very</font>

725
00:31:55,360 --> 00:32:01,000
smart optimizing compiler in fact that

726
00:31:58,539 --> 00:32:02,679
it's a fallback solution for sodium<font color="#CCCCCC"> and</font>

727
00:32:01,000 --> 00:32:06,490
<font color="#CCCCCC">a few others</font><font color="#E5E5E5"> leads me to believe that it</font>

728
00:32:02,679 --> 00:32:08,590
probably<font color="#CCCCCC"> doesn't but it could right and</font>

729
00:32:06,490 --> 00:32:10,330
so this this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a solution</font>

730
00:32:08,590 --> 00:32:12,490
<font color="#CCCCCC">to</font><font color="#E5E5E5"> open cell</font><font color="#CCCCCC"> users which also use</font>

731
00:32:10,330 --> 00:32:15,010
volatile<font color="#E5E5E5"> doesn't do a pointer right but</font>

732
00:32:12,490 --> 00:32:17,110
instead<font color="#E5E5E5"> it creates a volatile function</font>

733
00:32:15,010 --> 00:32:18,639
pointer that points to<font color="#E5E5E5"> memset and it</font>

734
00:32:17,110 --> 00:32:21,309
sort of<font color="#E5E5E5"> gives you you get the same</font>

735
00:32:18,639 --> 00:32:23,379
concept<font color="#E5E5E5"> more or less as with the weak</font>

736
00:32:21,309 --> 00:32:25,120
symbols the<font color="#E5E5E5"> idea being is that</font><font color="#CCCCCC"> your</font>

737
00:32:23,380 --> 00:32:27,279
<font color="#CCCCCC">fault a function pointer can change it</font>

738
00:32:25,120 --> 00:32:29,860
<font color="#E5E5E5">any</font><font color="#CCCCCC"> time without the</font><font color="#E5E5E5"> compiler knowing</font>

739
00:32:27,279 --> 00:32:35,470
about it<font color="#CCCCCC"> and that</font><font color="#E5E5E5"> seems like</font><font color="#CCCCCC"> a pretty</font>

740
00:32:29,860 --> 00:32:38,289
<font color="#E5E5E5">good solution</font><font color="#CCCCCC"> except you</font><font color="#E5E5E5"> when you one</font>

741
00:32:35,470 --> 00:32:43,630
way of in theory getting around<font color="#E5E5E5"> this is</font>

742
00:32:38,289 --> 00:32:45,700
if the compiler<font color="#CCCCCC"> emits runtime code that</font>

743
00:32:43,630 --> 00:32:48,909
right before<font color="#E5E5E5"> the</font><font color="#CCCCCC"> function when it gets</font>

744
00:32:45,700 --> 00:32:51,460
called<font color="#CCCCCC"> it looks and goes well like he</font>

745
00:32:48,909 --> 00:32:53,260
captures it and<font color="#CCCCCC"> then goes is</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> mem</font>

746
00:32:51,460 --> 00:32:55,240
<font color="#CCCCCC">set or is it something else</font><font color="#E5E5E5"> if it's</font>

747
00:32:53,260 --> 00:32:57,730
<font color="#CCCCCC">something</font><font color="#E5E5E5"> else then</font><font color="#CCCCCC"> we call it</font><font color="#E5E5E5"> if it's</font>

748
00:32:55,240 --> 00:32:59,950
memset we just return and then you

749
00:32:57,730 --> 00:33:03,100
<font color="#E5E5E5">optimize out the runtime and save a few</font>

750
00:32:59,950 --> 00:33:04,840
<font color="#CCCCCC">cycles in theory the compiler is allowed</font>

751
00:33:03,100 --> 00:33:07,330
<font color="#CCCCCC">to do that</font><font color="#E5E5E5"> in a mid coat like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I</font>

752
00:33:04,840 --> 00:33:12,370
don't<font color="#CCCCCC"> know if that</font><font color="#E5E5E5"> actually happens</font>

753
00:33:07,330 --> 00:33:13,600
anywhere<font color="#CCCCCC"> but it's a</font><font color="#E5E5E5"> possibility</font><font color="#CCCCCC"> so think</font>

754
00:33:12,370 --> 00:33:16,959
of these laughter solutions as<font color="#CCCCCC"> a</font>

755
00:33:13,600 --> 00:33:20,629
<font color="#CCCCCC">fallback they may</font><font color="#E5E5E5"> not work in theory in</font>

756
00:33:16,960 --> 00:33:24,740
in reality<font color="#CCCCCC"> they probably do</font>

757
00:33:20,630 --> 00:33:27,620
<font color="#E5E5E5">earth right so this is sort of the</font>

758
00:33:24,740 --> 00:33:30,490
second the<font color="#E5E5E5"> first half of my presentation</font>

759
00:33:27,620 --> 00:33:34,280
and I'm perfectly on time which is great

760
00:33:30,490 --> 00:33:36,740
<font color="#CCCCCC">so now there isn't</font><font color="#E5E5E5"> one portable solution</font>

761
00:33:34,280 --> 00:33:38,240
<font color="#CCCCCC">and this</font><font color="#E5E5E5"> is why this</font><font color="#CCCCCC"> is my clear</font>

762
00:33:36,740 --> 00:33:41,210
memories heart right the<font color="#E5E5E5"> problem is well</font>

763
00:33:38,240 --> 00:33:42,830
<font color="#CCCCCC">understood but if you're looking for</font>

764
00:33:41,210 --> 00:33:45,290
<font color="#E5E5E5">like an all-around solution that works</font>

765
00:33:42,830 --> 00:33:47,659
everywhere<font color="#CCCCCC"> regardless of compilers and</font>

766
00:33:45,290 --> 00:33:51,560
<font color="#E5E5E5">the operating systems and so on</font><font color="#CCCCCC"> it's</font>

767
00:33:47,660 --> 00:33:52,820
very<font color="#CCCCCC"> hard to have a good solution and</font>

768
00:33:51,560 --> 00:33:54,590
this<font color="#E5E5E5"> is what we're it customers come</font>

769
00:33:52,820 --> 00:33:56,120
<font color="#CCCCCC">back to me</font><font color="#E5E5E5"> and said give</font><font color="#CCCCCC"> me a portable</font>

770
00:33:54,590 --> 00:33:59,629
<font color="#CCCCCC">solution I need something better</font><font color="#E5E5E5"> than</font>

771
00:33:56,120 --> 00:34:02,750
this or that<font color="#CCCCCC"> and so the</font><font color="#E5E5E5"> best</font><font color="#CCCCCC"> solution I</font>

772
00:33:59,630 --> 00:34:06,320
have<font color="#E5E5E5"> for this is sort</font><font color="#CCCCCC"> of you know apply</font>

773
00:34:02,750 --> 00:34:08,000
all of<font color="#CCCCCC"> the above as best as possible and</font>

774
00:34:06,320 --> 00:34:09,380
my initial<font color="#CCCCCC"> idea</font><font color="#E5E5E5"> was I'll just write a</font>

775
00:34:08,000 --> 00:34:11,929
<font color="#E5E5E5">little function that does this and put</font>

776
00:34:09,380 --> 00:34:16,850
it<font color="#E5E5E5"> on</font><font color="#CCCCCC"> github and people can</font><font color="#E5E5E5"> use it but</font>

777
00:34:11,929 --> 00:34:18,259
if you look at lip sodium and then yeah

778
00:34:16,850 --> 00:34:20,299
you see I mean I'm not<font color="#CCCCCC"> gonna click on it</font>

779
00:34:18,260 --> 00:34:21,890
<font color="#E5E5E5">now but that's a link</font><font color="#CCCCCC"> if if you download</font>

780
00:34:20,300 --> 00:34:23,270
the slides later<font color="#E5E5E5"> you'll see</font><font color="#CCCCCC"> it it points</font>

781
00:34:21,889 --> 00:34:26,659
to github<font color="#CCCCCC"> and it shows you the</font><font color="#E5E5E5"> actual</font>

782
00:34:23,270 --> 00:34:28,730
<font color="#CCCCCC">implementation</font><font color="#E5E5E5"> lip sodium's</font><font color="#CCCCCC"> mems zeroes</font>

783
00:34:26,659 --> 00:34:31,219
is really<font color="#CCCCCC"> well-written and it's</font>

784
00:34:28,730 --> 00:34:33,710
beautiful and<font color="#E5E5E5"> it sort of has this fairly</font>

785
00:34:31,219 --> 00:34:36,919
<font color="#E5E5E5">elegant you</font><font color="#CCCCCC"> know if you know this this</font>

786
00:34:33,710 --> 00:34:41,090
and this<font color="#E5E5E5"> or if this then</font><font color="#CCCCCC"> do this</font>

787
00:34:36,920 --> 00:34:43,130
solution L if you know this<font color="#E5E5E5"> particular</font>

788
00:34:41,090 --> 00:34:45,350
<font color="#CCCCCC">setup</font><font color="#E5E5E5"> then do this solution and it does</font>

789
00:34:43,130 --> 00:34:47,750
has this<font color="#CCCCCC"> four six or seven of</font><font color="#E5E5E5"> the cases</font>

790
00:34:45,350 --> 00:34:49,520
I've covered<font color="#CCCCCC"> it's really nice it's</font>

791
00:34:47,750 --> 00:34:52,820
really<font color="#E5E5E5"> elegant</font><font color="#CCCCCC"> if you're looking for</font>

792
00:34:49,520 --> 00:34:56,210
inspiration<font color="#CCCCCC"> point people to</font><font color="#E5E5E5"> lip sodium I</font>

793
00:34:52,820 --> 00:35:02,180
think it's it's a<font color="#E5E5E5"> good portable ish way</font>

794
00:34:56,210 --> 00:35:04,190
of solving this problem<font color="#E5E5E5"> right okay so</font>

795
00:35:02,180 --> 00:35:07,609
that now we've discovered we've talked

796
00:35:04,190 --> 00:35:10,640
about<font color="#E5E5E5"> the problem we've talked we have</font>

797
00:35:07,610 --> 00:35:14,150
some<font color="#E5E5E5"> solutions okay well I want</font>

798
00:35:10,640 --> 00:35:17,029
detection<font color="#E5E5E5"> when does this really happen I</font>

799
00:35:14,150 --> 00:35:18,890
want<font color="#E5E5E5"> to see this right and I want</font>

800
00:35:17,030 --> 00:35:21,260
compilers<font color="#CCCCCC"> to tell me this</font><font color="#E5E5E5"> like why</font>

801
00:35:18,890 --> 00:35:23,060
doesn't GCC tell me it's not<font color="#E5E5E5"> optimizing</font>

802
00:35:21,260 --> 00:35:25,790
something out like if it has security

803
00:35:23,060 --> 00:35:27,620
consequences<font color="#CCCCCC"> it should</font><font color="#E5E5E5"> tell me I want</font>

804
00:35:25,790 --> 00:35:31,160
why are they not<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> this I don't</font>

805
00:35:27,620 --> 00:35:34,100
understand so I set out and I modified

806
00:35:31,160 --> 00:35:35,870
GCC<font color="#E5E5E5"> I looked at a decimal elimination</font>

807
00:35:34,100 --> 00:35:40,000
and I<font color="#E5E5E5"> came</font><font color="#CCCCCC"> up with</font><font color="#E5E5E5"> this patch and</font>

808
00:35:35,870 --> 00:35:42,200
instead<font color="#CCCCCC"> of the this is this is your</font>

809
00:35:40,000 --> 00:35:44,780
<font color="#CCCCCC">there tree yes to say deaths or</font>

810
00:35:42,200 --> 00:35:48,109
elimination pass and when it calls

811
00:35:44,780 --> 00:35:52,910
<font color="#E5E5E5">delete dead call I sort of take</font><font color="#CCCCCC"> that out</font>

812
00:35:48,110 --> 00:35:56,750
<font color="#CCCCCC">and say if you know</font><font color="#E5E5E5"> it's a built in them</font>

813
00:35:52,910 --> 00:35:59,750
set before you call delete call<font color="#E5E5E5"> emit</font>

814
00:35:56,750 --> 00:36:05,000
this warning<font color="#CCCCCC"> tell me to</font><font color="#E5E5E5"> file and tell me</font>

815
00:35:59,750 --> 00:36:07,070
the line number<font color="#CCCCCC"> and then do still</font>

816
00:36:05,000 --> 00:36:08,990
<font color="#E5E5E5">optimize the downs</font><font color="#CCCCCC"> and what</font><font color="#E5E5E5"> this means</font>

817
00:36:07,070 --> 00:36:13,640
is every<font color="#E5E5E5"> time and Memphis gets optimized</font>

818
00:36:08,990 --> 00:36:15,379
out<font color="#CCCCCC"> I GCC now tells me</font><font color="#E5E5E5"> and this sort of</font>

819
00:36:13,640 --> 00:36:19,460
this is very interesting<font color="#CCCCCC"> because</font><font color="#E5E5E5"> I not</font>

820
00:36:15,380 --> 00:36:22,610
only get get you know<font color="#CCCCCC"> detection for my</font>

821
00:36:19,460 --> 00:36:25,850
own code<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a great way to get</font><font color="#CCCCCC"> to</font>

822
00:36:22,610 --> 00:36:27,680
get really cheap fast<font color="#E5E5E5"> zero day</font><font color="#CCCCCC"> and in</font>

823
00:36:25,850 --> 00:36:29,690
fact<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> what I did</font>

824
00:36:27,680 --> 00:36:34,009
I downloaded a whole bunch of very

825
00:36:29,690 --> 00:36:35,770
well-known<font color="#E5E5E5"> open source projects and I</font>

826
00:36:34,010 --> 00:36:40,600
ran him through a modified version of

827
00:36:35,770 --> 00:36:49,160
GCC<font color="#CCCCCC"> and I came up with a list of things</font>

828
00:36:40,600 --> 00:36:52,160
<font color="#E5E5E5">awesome thank you so</font><font color="#CCCCCC"> I know of this</font>

829
00:36:49,160 --> 00:36:56,390
particular<font color="#CCCCCC"> problem it in like</font>

830
00:36:52,160 --> 00:37:02,210
practically affecting<font color="#CCCCCC"> open SSL MIT curb</font>

831
00:36:56,390 --> 00:37:05,180
<font color="#CCCCCC">heimdal matrix SSL PHP</font><font color="#E5E5E5"> DHCP bind squid</font>

832
00:37:02,210 --> 00:37:09,050
<font color="#E5E5E5">cache and the list goes on I have our</font>

833
00:37:05,180 --> 00:37:12,080
sink as<font color="#CCCCCC"> well and there's more</font><font color="#E5E5E5"> so we know</font>

834
00:37:09,050 --> 00:37:14,090
this<font color="#E5E5E5"> problem is very widespread but if</font>

835
00:37:12,080 --> 00:37:16,610
the stuff we all rely on the stuff thing

836
00:37:14,090 --> 00:37:18,980
that is built on has these problems<font color="#CCCCCC"> that</font>

837
00:37:16,610 --> 00:37:20,180
means your code<font color="#CCCCCC"> probably has</font><font color="#E5E5E5"> this as</font>

838
00:37:18,980 --> 00:37:22,130
well

839
00:37:20,180 --> 00:37:26,419
and of<font color="#E5E5E5"> course I'm just giving names out</font>

840
00:37:22,130 --> 00:37:28,600
here but let's give you guys<font color="#CCCCCC"> some</font><font color="#E5E5E5"> zero</font>

841
00:37:26,420 --> 00:37:28,600
<font color="#E5E5E5">day</font>

842
00:37:28,880 --> 00:37:36,320
that's<font color="#E5E5E5"> MIT curb that</font><font color="#CCCCCC"> mem sets optimized</font>

843
00:37:31,640 --> 00:37:37,680
out that's<font color="#E5E5E5"> a PHP that</font><font color="#CCCCCC"> mem sets optimised</font>

844
00:37:36,320 --> 00:37:43,769
out

845
00:37:37,680 --> 00:37:46,239
<font color="#CCCCCC">ah this I think is</font><font color="#E5E5E5"> matrix SSL that</font>

846
00:37:43,769 --> 00:37:47,828
decrypted plain text gets<font color="#CCCCCC"> mem said it</font>

847
00:37:46,239 --> 00:37:52,809
that<font color="#CCCCCC"> gets optimized out that's lingers</font>

848
00:37:47,829 --> 00:37:55,089
<font color="#CCCCCC">around</font><font color="#E5E5E5"> memory</font><font color="#CCCCCC"> this is open SSL</font><font color="#E5E5E5"> that a</font>

849
00:37:52,809 --> 00:38:00,039
crypto extended<font color="#E5E5E5"> data that doesn't get</font>

850
00:37:55,089 --> 00:38:02,288
optimized out<font color="#CCCCCC"> this is nginx</font><font color="#E5E5E5"> that</font>

851
00:38:00,039 --> 00:38:10,150
password<font color="#E5E5E5"> that men</font><font color="#CCCCCC"> zero gets optimized</font>

852
00:38:02,289 --> 00:38:14,640
out<font color="#CCCCCC"> this is a bind and DHCP that</font><font color="#E5E5E5"> mem set</font>

853
00:38:10,150 --> 00:38:14,640
of private key data gets optimized out

854
00:38:15,539 --> 00:38:24,489
<font color="#CCCCCC">this is squid that it goes to</font><font color="#E5E5E5"> LDAP and</font>

855
00:38:21,309 --> 00:38:26,259
gets creds<font color="#E5E5E5"> and basically it tries to</font>

856
00:38:24,489 --> 00:38:32,140
<font color="#E5E5E5">clear the creds</font><font color="#CCCCCC"> and then that gets</font>

857
00:38:26,259 --> 00:38:34,269
optimized out<font color="#E5E5E5"> yeah well I had to play</font>

858
00:38:32,140 --> 00:38:37,569
<font color="#E5E5E5">around with</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> play around with powerful</font>

859
00:38:34,269 --> 00:38:40,629
in a little bit<font color="#E5E5E5"> so and then same thing</font>

860
00:38:37,569 --> 00:38:43,599
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is a key that gets optimized out</font>

861
00:38:40,630 --> 00:38:46,599
and then this is<font color="#E5E5E5"> our sink</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> these are</font>

862
00:38:43,599 --> 00:38:48,009
<font color="#CCCCCC">sort credentials in a file and</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> can</font>

863
00:38:46,599 --> 00:38:50,709
<font color="#CCCCCC">surrender</font><font color="#E5E5E5"> memory and those</font><font color="#CCCCCC"> memset s--</font>

864
00:38:48,009 --> 00:38:54,160
<font color="#E5E5E5">get optimized out so that's nine bugs</font>

865
00:38:50,709 --> 00:38:57,698
right there<font color="#CCCCCC"> and</font><font color="#E5E5E5"> all it took</font><font color="#CCCCCC"> was five</font>

866
00:38:54,160 --> 00:38:59,859
lines of code change in<font color="#CCCCCC"> GCC and i ate</font>

867
00:38:57,699 --> 00:39:04,180
<font color="#CCCCCC">just GC just told me</font><font color="#E5E5E5"> just gave me all</font>

868
00:38:59,859 --> 00:39:09,299
these<font color="#E5E5E5"> bugs the other thing about seeing</font>

869
00:39:04,180 --> 00:39:09,299
exactly what thank you

870
00:39:14,140 --> 00:39:18,680
the other thing that<font color="#E5E5E5"> was</font><font color="#CCCCCC"> really nice</font>

871
00:39:16,460 --> 00:39:23,290
<font color="#E5E5E5">about getting</font><font color="#CCCCCC"> the data back from GCC</font>

872
00:39:18,680 --> 00:39:26,000
isn't just that it gave me bugs<font color="#CCCCCC"> it also</font>

873
00:39:23,290 --> 00:39:30,650
showed<font color="#CCCCCC"> me things</font><font color="#E5E5E5"> had optimized out that</font>

874
00:39:26,000 --> 00:39:33,140
I<font color="#CCCCCC"> thought</font><font color="#E5E5E5"> it wouldn't obviously what I</font>

875
00:39:30,650 --> 00:39:34,369
was expecting is you know<font color="#E5E5E5"> a variable</font>

876
00:39:33,140 --> 00:39:36,440
<font color="#E5E5E5">that's about to go out of scope</font><font color="#CCCCCC"> and that</font>

877
00:39:34,369 --> 00:39:39,349
you mem said that would get optimized

878
00:39:36,440 --> 00:39:42,619
out<font color="#E5E5E5"> obviously but what</font><font color="#CCCCCC"> I also</font><font color="#E5E5E5"> noticed</font>

879
00:39:39,349 --> 00:39:45,440
was that<font color="#E5E5E5"> you know when you there's a</font>

880
00:39:42,619 --> 00:39:46,820
common code pattern when<font color="#CCCCCC"> you just what</font>

881
00:39:45,440 --> 00:39:48,230
<font color="#E5E5E5">you just malloc something</font><font color="#CCCCCC"> you declare</font>

882
00:39:46,820 --> 00:39:49,940
<font color="#E5E5E5">something on the stack and the first</font>

883
00:39:48,230 --> 00:39:52,400
thing you do is mem set to clear the

884
00:39:49,940 --> 00:39:55,150
whole thing<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> you move on</font><font color="#CCCCCC"> it</font>

885
00:39:52,400 --> 00:39:59,720
turns out that in a<font color="#E5E5E5"> number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> cases that</font>

886
00:39:55,150 --> 00:40:02,570
<font color="#E5E5E5">also gets optimized out</font><font color="#CCCCCC"> the idea is that</font>

887
00:39:59,720 --> 00:40:05,598
if the compiler<font color="#E5E5E5"> it only gets optimized</font>

888
00:40:02,570 --> 00:40:07,400
out if the<font color="#E5E5E5"> compiler can prove that every</font>

889
00:40:05,599 --> 00:40:12,200
element in destructor that the whole

890
00:40:07,400 --> 00:40:15,589
field gets filled in<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> not sure if</font>

891
00:40:12,200 --> 00:40:19,069
that's entirely true<font color="#CCCCCC"> and we were</font><font color="#E5E5E5"> talking</font>

892
00:40:15,589 --> 00:40:22,420
about<font color="#E5E5E5"> this earlier</font><font color="#CCCCCC"> but what</font><font color="#E5E5E5"> about you</font>

893
00:40:19,070 --> 00:40:25,760
<font color="#E5E5E5">know things like structure padding or</font>

894
00:40:22,420 --> 00:40:31,730
maybe enums or you know something<font color="#CCCCCC"> like</font>

895
00:40:25,760 --> 00:40:35,119
<font color="#CCCCCC">that or you know</font><font color="#E5E5E5"> unions I mean that I'm</font>

896
00:40:31,730 --> 00:40:36,740
<font color="#E5E5E5">not quite sure how that works</font><font color="#CCCCCC"> I suspect</font>

897
00:40:35,119 --> 00:40:38,570
I haven't dug into it<font color="#CCCCCC"> because</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> I</font>

898
00:40:36,740 --> 00:40:40,459
I ran it I found this yeah<font color="#CCCCCC"> I mean I</font>

899
00:40:38,570 --> 00:40:43,000
wrote<font color="#CCCCCC"> this</font><font color="#E5E5E5"> patch yesterday right these</font>

900
00:40:40,460 --> 00:40:46,670
these bugs<font color="#E5E5E5"> are like they're fresh</font>

901
00:40:43,000 --> 00:40:48,800
so I don't know exactly<font color="#CCCCCC"> how much</font>

902
00:40:46,670 --> 00:40:51,490
potential there<font color="#E5E5E5"> is here but it smells</font>

903
00:40:48,800 --> 00:40:54,200
like<font color="#E5E5E5"> there's there's room for bugs here</font>

904
00:40:51,490 --> 00:40:58,160
<font color="#E5E5E5">so I I was I was surprised to see</font><font color="#CCCCCC"> this</font>

905
00:40:54,200 --> 00:41:01,490
and some more<font color="#E5E5E5"> researchers need it so if</font>

906
00:40:58,160 --> 00:41:03,080
anybody wants<font color="#CCCCCC"> to</font><font color="#E5E5E5"> feel free and then the</font>

907
00:41:01,490 --> 00:41:06,200
other thing I sort of noticed<font color="#CCCCCC"> is that</font>

908
00:41:03,080 --> 00:41:07,460
<font color="#CCCCCC">you obviously</font><font color="#E5E5E5"> the common case what I was</font>

909
00:41:06,200 --> 00:41:09,379
looking for in terms<font color="#E5E5E5"> of bugs was</font>

910
00:41:07,460 --> 00:41:11,930
something that was sensitive material

911
00:41:09,380 --> 00:41:15,040
and then obviously I saw a whole bunch

912
00:41:11,930 --> 00:41:17,690
<font color="#E5E5E5">of things where non sensitive material</font>

913
00:41:15,040 --> 00:41:19,190
was being<font color="#CCCCCC"> memset</font><font color="#E5E5E5"> it and then freed</font><font color="#CCCCCC"> and</font>

914
00:41:17,690 --> 00:41:21,710
then that member said we<font color="#E5E5E5"> get optimized</font>

915
00:41:19,190 --> 00:41:24,560
out as well<font color="#CCCCCC"> and that struck me as odd at</font>

916
00:41:21,710 --> 00:41:25,490
the beginning but<font color="#E5E5E5"> then</font><font color="#CCCCCC"> obviously there's</font>

917
00:41:24,560 --> 00:41:28,190
a common

918
00:41:25,490 --> 00:41:30,049
<font color="#E5E5E5">sort of coding pattern that I've seen</font>

919
00:41:28,190 --> 00:41:33,980
where you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> anytime somebody does a</font>

920
00:41:30,050 --> 00:41:38,330
<font color="#E5E5E5">malloc and then before using doesn't</font>

921
00:41:33,980 --> 00:41:40,700
memset<font color="#E5E5E5"> nil or when a free right before</font>

922
00:41:38,330 --> 00:41:42,230
they do<font color="#E5E5E5"> a</font><font color="#CCCCCC"> memset</font><font color="#E5E5E5"> zero</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> because they</font>

923
00:41:40,700 --> 00:41:44,118
<font color="#E5E5E5">want to clear sensitive material but</font>

924
00:41:42,230 --> 00:41:45,350
because they always they might have a

925
00:41:44,119 --> 00:41:48,260
guarantee they always start from<font color="#E5E5E5"> a clean</font>

926
00:41:45,350 --> 00:41:51,080
slate<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so they ended up building code</font>

927
00:41:48,260 --> 00:41:54,140
that ends<font color="#CCCCCC"> up working for</font><font color="#E5E5E5"> something that</font>

928
00:41:51,080 --> 00:41:55,790
always has a clean slate<font color="#E5E5E5"> right</font><font color="#CCCCCC"> and if</font>

929
00:41:54,140 --> 00:41:58,359
that if<font color="#CCCCCC"> that meant that gets optimized</font>

930
00:41:55,790 --> 00:42:03,080
out then those guarantees no longer hold

931
00:41:58,360 --> 00:42:04,880
<font color="#CCCCCC">and so code that works around to sort</font><font color="#E5E5E5"> of</font>

932
00:42:03,080 --> 00:42:06,350
well we always<font color="#CCCCCC"> have a clean</font><font color="#E5E5E5"> slate when</font>

933
00:42:04,880 --> 00:42:09,950
we you know<font color="#CCCCCC"> when we get</font><font color="#E5E5E5"> a fresh piece of</font>

934
00:42:06,350 --> 00:42:12,500
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> that is no longer true and so I I</font>

935
00:42:09,950 --> 00:42:17,210
<font color="#E5E5E5">think that coding pattern doesn't jive</font>

936
00:42:12,500 --> 00:42:18,980
well with<font color="#CCCCCC"> compiler optimization again</font>

937
00:42:17,210 --> 00:42:21,230
<font color="#E5E5E5">this is the sort</font><font color="#CCCCCC"> of realization I</font><font color="#E5E5E5"> made</font>

938
00:42:18,980 --> 00:42:23,119
yesterday<font color="#CCCCCC"> I don't have all</font><font color="#E5E5E5"> the facts on</font>

939
00:42:21,230 --> 00:42:25,250
this yet<font color="#CCCCCC"> but it seemed interesting</font><font color="#E5E5E5"> and I</font>

940
00:42:23,119 --> 00:42:29,200
think<font color="#E5E5E5"> there's some room for research</font>

941
00:42:25,250 --> 00:42:32,630
here<font color="#CCCCCC"> the other thing I</font><font color="#E5E5E5"> noticed is that</font>

942
00:42:29,200 --> 00:42:34,910
sort<font color="#E5E5E5"> of close</font><font color="#CCCCCC"> to the medicines that</font><font color="#E5E5E5"> were</font>

943
00:42:32,630 --> 00:42:39,830
optimized out I noticed<font color="#CCCCCC"> like other bugs</font>

944
00:42:34,910 --> 00:42:41,629
<font color="#CCCCCC">and this is kind of like you know it</font>

945
00:42:39,830 --> 00:42:44,600
made me<font color="#E5E5E5"> think is</font><font color="#CCCCCC"> that well bad code</font>

946
00:42:41,630 --> 00:42:45,980
attracts other bad code<font color="#CCCCCC"> so one of them</font>

947
00:42:44,600 --> 00:42:48,470
was moldy<font color="#E5E5E5"> refs and</font><font color="#CCCCCC"> the other was</font><font color="#E5E5E5"> they</font>

948
00:42:45,980 --> 00:42:51,200
use after free<font color="#E5E5E5"> where you</font><font color="#CCCCCC"> know instead</font><font color="#E5E5E5"> of</font>

949
00:42:48,470 --> 00:42:53,660
<font color="#CCCCCC">doing mem</font><font color="#E5E5E5"> set free the code was doing</font>

950
00:42:51,200 --> 00:42:58,850
free mem sets<font color="#E5E5E5"> right and then obviously</font>

951
00:42:53,660 --> 00:43:01,129
<font color="#E5E5E5">easily use after free so this is a case</font>

952
00:42:58,850 --> 00:43:03,830
<font color="#CCCCCC">of a</font><font color="#E5E5E5"> new graph where basically a malloc</font>

953
00:43:01,130 --> 00:43:05,780
happens and then<font color="#E5E5E5"> the</font><font color="#CCCCCC"> mendel happens and</font>

954
00:43:03,830 --> 00:43:08,270
then there's a check to see if the

955
00:43:05,780 --> 00:43:09,380
variable<font color="#CCCCCC"> that was allocated is null</font>

956
00:43:08,270 --> 00:43:13,130
right

957
00:43:09,380 --> 00:43:14,990
obviously that memset<font color="#E5E5E5"> if the values dual</font>

958
00:43:13,130 --> 00:43:17,359
that<font color="#CCCCCC"> mem so that meant that would cause</font>

959
00:43:14,990 --> 00:43:19,970
a<font color="#E5E5E5"> little</font><font color="#CCCCCC"> DRF</font><font color="#E5E5E5"> except the</font><font color="#CCCCCC"> Memphis gives</font>

960
00:43:17,359 --> 00:43:24,549
<font color="#CCCCCC">optimize out so it never generates the</font>

961
00:43:19,970 --> 00:43:29,680
<font color="#E5E5E5">new</font><font color="#CCCCCC"> DRF a kind of</font><font color="#E5E5E5"> a catch-22 there but</font>

962
00:43:24,550 --> 00:43:29,680
that that<font color="#E5E5E5"> construct is clearly broken</font>

963
00:43:33,370 --> 00:43:39,890
so now<font color="#E5E5E5"> I mostly spoke about memset but</font>

964
00:43:37,820 --> 00:43:42,980
really<font color="#E5E5E5"> there's a thousand variations</font>

965
00:43:39,890 --> 00:43:44,750
<font color="#E5E5E5">that clear memory and sort of comes out</font>

966
00:43:42,980 --> 00:43:47,000
the same<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> right obviously you can</font>

967
00:43:44,750 --> 00:43:49,790
do a for loop<font color="#CCCCCC"> or</font><font color="#E5E5E5"> you can use</font><font color="#CCCCCC"> other api's</font>

968
00:43:47,000 --> 00:43:53,480
or you can like roll your own<font color="#E5E5E5"> and do</font>

969
00:43:49,790 --> 00:43:56,810
something very<font color="#E5E5E5"> exotic</font><font color="#CCCCCC"> and then there's</font>

970
00:43:53,480 --> 00:44:00,170
<font color="#E5E5E5">C++ and which there's a</font><font color="#CCCCCC"> gazillion ways</font>

971
00:43:56,810 --> 00:44:03,020
of doing it<font color="#CCCCCC"> you can have like weird</font>

972
00:44:00,170 --> 00:44:05,480
classes with like a constructor<font color="#E5E5E5"> and like</font>

973
00:44:03,020 --> 00:44:09,080
you know inheritance<font color="#E5E5E5"> multiple objects</font>

974
00:44:05,480 --> 00:44:12,770
and like virtual it gets really<font color="#E5E5E5"> crazy</font>

975
00:44:09,080 --> 00:44:14,779
<font color="#E5E5E5">once</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> C++ comes in the mix and so</font>

976
00:44:12,770 --> 00:44:16,850
basically it<font color="#E5E5E5"> all kind of looks different</font>

977
00:44:14,780 --> 00:44:18,590
<font color="#E5E5E5">but it all does the same thing it has</font>

978
00:44:16,850 --> 00:44:21,650
the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> route cost is the same</font><font color="#E5E5E5"> problem</font>

979
00:44:18,590 --> 00:44:24,790
<font color="#CCCCCC">and the thing</font><font color="#E5E5E5"> is when you</font><font color="#CCCCCC"> look at this</font>

980
00:44:21,650 --> 00:44:27,230
from just a code<font color="#E5E5E5"> perspective is that</font>

981
00:44:24,790 --> 00:44:31,100
sometimes the optimizer is smart<font color="#CCCCCC"> enough</font>

982
00:44:27,230 --> 00:44:34,460
to see it<font color="#CCCCCC"> sometimes the optimizer is not</font>

983
00:44:31,100 --> 00:44:36,470
but it could<font color="#E5E5E5"> in the future be smart</font>

984
00:44:34,460 --> 00:44:37,490
<font color="#CCCCCC">enough to</font><font color="#E5E5E5"> see it</font><font color="#CCCCCC"> so it's one of</font><font color="#E5E5E5"> these</font>

985
00:44:36,470 --> 00:44:39,290
<font color="#E5E5E5">things where if you're looking at a</font>

986
00:44:37,490 --> 00:44:43,879
piece<font color="#CCCCCC"> of code and you're</font><font color="#E5E5E5"> doing some kind</font>

987
00:44:39,290 --> 00:44:47,960
<font color="#CCCCCC">of</font><font color="#E5E5E5"> security assessments and</font><font color="#CCCCCC"> you see this</font>

988
00:44:43,880 --> 00:44:50,540
in like should you<font color="#CCCCCC"> should you report</font><font color="#E5E5E5"> the</font>

989
00:44:47,960 --> 00:44:52,550
bug should you not<font color="#CCCCCC"> I think you</font><font color="#E5E5E5"> should</font>

990
00:44:50,540 --> 00:44:55,160
because<font color="#E5E5E5"> even if the compiler doesn't</font>

991
00:44:52,550 --> 00:45:00,860
optimize now today<font color="#E5E5E5"> it may very well</font>

992
00:44:55,160 --> 00:45:04,730
optimized it out<font color="#CCCCCC"> tomorrow right okay so</font>

993
00:45:00,860 --> 00:45:07,070
now oldest talk has been about<font color="#E5E5E5"> C and</font>

994
00:45:04,730 --> 00:45:08,780
when you write it and see<font color="#E5E5E5"> well what what</font>

995
00:45:07,070 --> 00:45:12,170
<font color="#E5E5E5">if you're not writing C code what if</font>

996
00:45:08,780 --> 00:45:18,980
you're using other languages<font color="#E5E5E5"> non</font><font color="#CCCCCC"> native</font>

997
00:45:12,170 --> 00:45:24,800
<font color="#E5E5E5">languages you know any go Russ Objective</font>

998
00:45:18,980 --> 00:45:26,660
C C sharp<font color="#E5E5E5"> Java flavor of the month</font><font color="#CCCCCC"> and</font>

999
00:45:24,800 --> 00:45:29,690
really<font color="#CCCCCC"> I wanted to spend more time on</font>

1000
00:45:26,660 --> 00:45:31,580
<font color="#CCCCCC">this but then there's my slides</font><font color="#E5E5E5"> would</font>

1001
00:45:29,690 --> 00:45:35,090
have gotten so long I<font color="#E5E5E5"> couldn't totally</font>

1002
00:45:31,580 --> 00:45:37,340
have one slide on<font color="#E5E5E5"> on C but it I I spend</font>

1003
00:45:35,090 --> 00:45:39,020
a little bit time on this in<font color="#CCCCCC"> C sharp or</font>

1004
00:45:37,340 --> 00:45:42,050
<font color="#E5E5E5">something called secure string which is</font>

1005
00:45:39,020 --> 00:45:45,770
<font color="#CCCCCC">supposed to hold</font><font color="#E5E5E5"> a string in a safe way</font>

1006
00:45:42,050 --> 00:45:48,560
<font color="#E5E5E5">and the problem</font><font color="#CCCCCC"> I have</font><font color="#E5E5E5"> with secure</font>

1007
00:45:45,770 --> 00:45:50,480
isn't the implementation<font color="#CCCCCC"> it's how do I</font>

1008
00:45:48,560 --> 00:45:51,650
<font color="#E5E5E5">get something securely into secure</font>

1009
00:45:50,480 --> 00:45:53,540
string<font color="#E5E5E5"> and how do I get something</font>

1010
00:45:51,650 --> 00:45:56,450
securely<font color="#E5E5E5"> out of it</font>

1011
00:45:53,540 --> 00:45:59,420
and then in terms of Java there's a<font color="#E5E5E5"> Java</font>

1012
00:45:56,450 --> 00:46:01,220
crypto guide which basically says it

1013
00:45:59,420 --> 00:46:03,200
recommends<font color="#E5E5E5"> not using strings to hold</font>

1014
00:46:01,220 --> 00:46:06,470
sensitive material but to<font color="#CCCCCC"> use a byte</font>

1015
00:46:03,200 --> 00:46:09,230
<font color="#CCCCCC">array instead</font><font color="#E5E5E5"> and this</font><font color="#CCCCCC"> okay there</font><font color="#E5E5E5"> was</font>

1016
00:46:06,470 --> 00:46:13,399
<font color="#E5E5E5">some reason</font><font color="#CCCCCC"> behind</font><font color="#E5E5E5"> I don't remember</font><font color="#CCCCCC"> but</font>

1017
00:46:09,230 --> 00:46:18,500
the idea is<font color="#CCCCCC"> basically this most manage</font>

1018
00:46:13,400 --> 00:46:22,640
languages<font color="#E5E5E5"> don't really offer any decent</font>

1019
00:46:18,500 --> 00:46:25,040
way to<font color="#E5E5E5"> clear memory or to hold sensitive</font>

1020
00:46:22,640 --> 00:46:27,980
material in memory<font color="#CCCCCC"> without</font><font color="#E5E5E5"> it leaking</font>

1021
00:46:25,040 --> 00:46:30,110
<font color="#CCCCCC">and</font><font color="#E5E5E5"> it will leak and it'll kind of</font>

1022
00:46:27,980 --> 00:46:33,410
<font color="#E5E5E5">happen behind your back because you</font>

1023
00:46:30,110 --> 00:46:35,720
wouldn't know it leaked<font color="#CCCCCC"> especially you</font>

1024
00:46:33,410 --> 00:46:37,940
<font color="#E5E5E5">know when you're dealing</font><font color="#CCCCCC"> with like</font>

1025
00:46:35,720 --> 00:46:40,100
garbage collection where something can

1026
00:46:37,940 --> 00:46:42,140
get reallocated without you ever knowing

1027
00:46:40,100 --> 00:46:43,490
<font color="#E5E5E5">and all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> sudden before you know it</font>

1028
00:46:42,140 --> 00:46:47,270
there's like five<font color="#E5E5E5"> different copies of</font>

1029
00:46:43,490 --> 00:46:48,890
<font color="#E5E5E5">your key spray it all over memory</font><font color="#CCCCCC"> most</font>

1030
00:46:47,270 --> 00:46:51,350
of these languages<font color="#E5E5E5"> as far as I can tell</font>

1031
00:46:48,890 --> 00:46:54,560
they don't have the infrastructure in

1032
00:46:51,350 --> 00:46:56,270
<font color="#CCCCCC">place to deal with</font><font color="#E5E5E5"> sensitive material</font><font color="#CCCCCC"> it</font>

1033
00:46:54,560 --> 00:46:59,090
seems to<font color="#E5E5E5"> be entirely missing in a lot of</font>

1034
00:46:56,270 --> 00:47:03,530
places<font color="#E5E5E5"> and other places it's kind of</font>

1035
00:46:59,090 --> 00:47:07,160
like you know<font color="#CCCCCC"> a</font><font color="#E5E5E5"> shoehorn Don or bolted</font>

1036
00:47:03,530 --> 00:47:09,590
on<font color="#E5E5E5"> with some varying degrees of success</font>

1037
00:47:07,160 --> 00:47:11,660
I remember seeing there was an some

1038
00:47:09,590 --> 00:47:13,490
impatient<font color="#CCCCCC"> for go but it had been in</font>

1039
00:47:11,660 --> 00:47:16,970
revision<font color="#E5E5E5"> three or four because there was</font>

1040
00:47:13,490 --> 00:47:19,220
always something wrong with it<font color="#CCCCCC"> and so</font>

1041
00:47:16,970 --> 00:47:21,680
<font color="#E5E5E5">again I wish I had more time than</font><font color="#CCCCCC"> I</font>

1042
00:47:19,220 --> 00:47:24,200
<font color="#E5E5E5">could elaborate on this</font><font color="#CCCCCC"> for what I saw</font>

1043
00:47:21,680 --> 00:47:28,250
<font color="#E5E5E5">is</font><font color="#CCCCCC"> that it's a pretty sad</font><font color="#E5E5E5"> state of</font>

1044
00:47:24,200 --> 00:47:30,200
affairs<font color="#CCCCCC"> in not see that</font><font color="#E5E5E5"> most people</font>

1045
00:47:28,250 --> 00:47:33,400
<font color="#CCCCCC">haven't tried</font><font color="#E5E5E5"> and those who have have</font>

1046
00:47:30,200 --> 00:47:33,399
not tried hard<font color="#CCCCCC"> enough</font>

1047
00:47:36,200 --> 00:47:44,850
so now that I've<font color="#E5E5E5"> sort of run through all</font>

1048
00:47:42,480 --> 00:47:48,030
of this<font color="#CCCCCC"> sort of you know</font><font color="#E5E5E5"> related</font><font color="#CCCCCC"> issue</font>

1049
00:47:44,850 --> 00:47:51,839
<font color="#E5E5E5">sort of you know memset problems and had</font>

1050
00:47:48,030 --> 00:47:58,220
a clear memory<font color="#CCCCCC"> I want to sort</font><font color="#E5E5E5"> of talk</font>

1051
00:47:51,840 --> 00:48:00,510
about<font color="#E5E5E5"> some related issues</font><font color="#CCCCCC"> first of</font><font color="#E5E5E5"> all</font>

1052
00:47:58,220 --> 00:48:03,149
when I said initially<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that you know</font>

1053
00:48:00,510 --> 00:48:05,490
when<font color="#E5E5E5"> people make this step and go oh</font>

1054
00:48:03,150 --> 00:48:06,870
well<font color="#CCCCCC"> I should</font><font color="#E5E5E5"> clear this memory because</font>

1055
00:48:05,490 --> 00:48:10,100
it's sensitive

1056
00:48:06,870 --> 00:48:14,069
I said that's huge<font color="#E5E5E5"> because it really is</font>

1057
00:48:10,100 --> 00:48:16,220
most code<font color="#E5E5E5"> doesn't even try</font><font color="#CCCCCC"> there is an</font>

1058
00:48:14,070 --> 00:48:18,720
unbelievable<font color="#CCCCCC"> amount</font><font color="#E5E5E5"> of code and just</font>

1059
00:48:16,220 --> 00:48:21,299
keeps keys in memory<font color="#E5E5E5"> and</font><font color="#CCCCCC"> sensitive</font>

1060
00:48:18,720 --> 00:48:23,580
material and it goes out<font color="#CCCCCC"> of scope and it</font>

1061
00:48:21,300 --> 00:48:26,130
never gets cleared and it just ends up

1062
00:48:23,580 --> 00:48:28,529
lingering on<font color="#E5E5E5"> the stack or</font><font color="#CCCCCC"> the heap</font><font color="#E5E5E5"> I</font>

1063
00:48:26,130 --> 00:48:31,080
mean often<font color="#E5E5E5"> it would get overwritten fast</font>

1064
00:48:28,530 --> 00:48:33,770
<font color="#CCCCCC">but sometimes it could linger around</font><font color="#E5E5E5"> and</font>

1065
00:48:31,080 --> 00:48:37,560
sit there for<font color="#CCCCCC"> a very very long</font><font color="#E5E5E5"> time</font>

1066
00:48:33,770 --> 00:48:39,230
<font color="#CCCCCC">problem with this is that</font><font color="#E5E5E5"> it's it's hard</font>

1067
00:48:37,560 --> 00:48:41,790
<font color="#E5E5E5">to find in any kind of automated fashion</font>

1068
00:48:39,230 --> 00:48:44,130
<font color="#E5E5E5">because it's the you're</font><font color="#CCCCCC"> looking for the</font>

1069
00:48:41,790 --> 00:48:45,450
absence of something<font color="#E5E5E5"> right so that means</font>

1070
00:48:44,130 --> 00:48:48,360
the<font color="#CCCCCC"> only way you can</font><font color="#E5E5E5"> really find these</font>

1071
00:48:45,450 --> 00:48:51,210
kinds of<font color="#CCCCCC"> bugs</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> manual</font><font color="#E5E5E5"> look at it</font>

1072
00:48:48,360 --> 00:48:53,460
and go oh<font color="#E5E5E5"> this is sensitive material you</font>

1073
00:48:51,210 --> 00:48:58,380
didn't know<font color="#E5E5E5"> no effort was made to clear</font>

1074
00:48:53,460 --> 00:49:00,330
this<font color="#CCCCCC"> a second</font><font color="#E5E5E5"> issue</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is this is</font>

1075
00:48:58,380 --> 00:49:03,540
really<font color="#E5E5E5"> cute actually so when you call</font>

1076
00:49:00,330 --> 00:49:07,799
<font color="#E5E5E5">memset the the way it's done there</font><font color="#CCCCCC"> that</font>

1077
00:49:03,540 --> 00:49:09,509
<font color="#E5E5E5">that that's wrong</font><font color="#CCCCCC"> the length and the</font>

1078
00:49:07,800 --> 00:49:12,090
<font color="#E5E5E5">bite you want to mem sit with or</font>

1079
00:49:09,510 --> 00:49:13,110
transposed<font color="#E5E5E5"> the</font><font color="#CCCCCC"> zero should be the second</font>

1080
00:49:12,090 --> 00:49:15,090
argument<font color="#CCCCCC"> a lens</font><font color="#E5E5E5"> should</font><font color="#CCCCCC"> be the third</font>

1081
00:49:13,110 --> 00:49:19,230
<font color="#E5E5E5">argument so what that really</font><font color="#CCCCCC"> does is a</font>

1082
00:49:15,090 --> 00:49:21,630
no op it basically says<font color="#E5E5E5"> mem sets and</font>

1083
00:49:19,230 --> 00:49:23,640
then use lend us the<font color="#E5E5E5"> pattern and then</font>

1084
00:49:21,630 --> 00:49:25,260
<font color="#CCCCCC">the pattern is used as the</font><font color="#E5E5E5"> length in</font>

1085
00:49:23,640 --> 00:49:27,779
<font color="#E5E5E5">this</font><font color="#CCCCCC"> guy's</font><font color="#E5E5E5"> the in this case</font><font color="#CCCCCC"> the pattern</font>

1086
00:49:25,260 --> 00:49:31,200
is zero so a mem<font color="#CCCCCC"> set of zero which</font>

1087
00:49:27,780 --> 00:49:35,280
becomes a no op<font color="#CCCCCC"> and what's really</font><font color="#E5E5E5"> cool</font>

1088
00:49:31,200 --> 00:49:38,129
<font color="#CCCCCC">is that GCC</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> hat you can tell GC</font>

1089
00:49:35,280 --> 00:49:39,840
to<font color="#E5E5E5"> emit a warning for this</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> what I</font>

1090
00:49:38,130 --> 00:49:41,490
one of<font color="#CCCCCC"> these I want</font><font color="#E5E5E5"> to do is I wanted</font><font color="#CCCCCC"> to</font>

1091
00:49:39,840 --> 00:49:44,310
run<font color="#E5E5E5"> through</font><font color="#CCCCCC"> all the same code I had</font>

1092
00:49:41,490 --> 00:49:46,319
tested before and have enabled<font color="#E5E5E5"> a warning</font>

1093
00:49:44,310 --> 00:49:49,020
and then sort<font color="#E5E5E5"> of show it on a list of</font>

1094
00:49:46,320 --> 00:49:49,770
bugs<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I kind of ran out</font><font color="#E5E5E5"> of time</font><font color="#CCCCCC"> but I</font>

1095
00:49:49,020 --> 00:49:51,480
strongly<font color="#E5E5E5"> suspect</font>

1096
00:49:49,770 --> 00:49:52,670
if you use this<font color="#E5E5E5"> morning and you go</font>

1097
00:49:51,480 --> 00:49:55,650
download<font color="#CCCCCC"> a whole</font><font color="#E5E5E5"> bunch of like</font>

1098
00:49:52,670 --> 00:49:57,300
well-known open source code and<font color="#E5E5E5"> you run</font>

1099
00:49:55,650 --> 00:50:07,080
it through<font color="#E5E5E5"> you'll end up with a very</font>

1100
00:49:57,300 --> 00:50:09,750
similar list of bugs so another list of

1101
00:50:07,080 --> 00:50:11,640
sort of related bugs<font color="#E5E5E5"> and related in</font><font color="#CCCCCC"> the</font>

1102
00:50:09,750 --> 00:50:15,869
sense<font color="#CCCCCC"> that no log</font><font color="#E5E5E5"> clearing secrets but</font>

1103
00:50:11,640 --> 00:50:18,540
<font color="#E5E5E5">related in a sense that</font><font color="#CCCCCC"> optimization was</font>

1104
00:50:15,869 --> 00:50:20,430
involved<font color="#E5E5E5"> that is to say if</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> optimized</font>

1105
00:50:18,540 --> 00:50:23,040
it wasn't<font color="#E5E5E5"> turned on a security bug</font>

1106
00:50:20,430 --> 00:50:25,529
wouldn't have occurred<font color="#E5E5E5"> right or would</font>

1107
00:50:23,040 --> 00:50:27,270
<font color="#E5E5E5">have been less severe right</font><font color="#CCCCCC"> as there are</font>

1108
00:50:25,530 --> 00:50:29,730
sort of<font color="#E5E5E5"> three cases of bugs that sort of</font>

1109
00:50:27,270 --> 00:50:32,250
ran<font color="#E5E5E5"> into and I I think</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> somewhat</font>

1110
00:50:29,730 --> 00:50:33,840
relevant<font color="#E5E5E5"> and then I sort of want</font><font color="#CCCCCC"> to talk</font>

1111
00:50:32,250 --> 00:50:37,710
about so the first one is<font color="#E5E5E5"> what's</font><font color="#CCCCCC"> called</font>

1112
00:50:33,840 --> 00:50:39,320
pointer overflow it turns out if you

1113
00:50:37,710 --> 00:50:42,000
let's say<font color="#E5E5E5"> let's say you have this code</font>

1114
00:50:39,320 --> 00:50:43,890
<font color="#CCCCCC">PTR and</font><font color="#E5E5E5"> then and then there's a Len and</font>

1115
00:50:42,000 --> 00:50:45,630
the Len is untrusted right<font color="#E5E5E5"> the idea is</font>

1116
00:50:43,890 --> 00:50:48,779
that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to validate at</font><font color="#CCCCCC"> PDR Plus</font>

1117
00:50:45,630 --> 00:50:50,700
lend isn't beyond the end<font color="#E5E5E5"> of your buffer</font>

1118
00:50:48,780 --> 00:50:52,260
<font color="#E5E5E5">but before you do</font><font color="#CCCCCC"> that you also</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font>

1119
00:50:50,700 --> 00:50:55,049
make sure<font color="#E5E5E5"> that</font><font color="#CCCCCC"> PBR</font><font color="#E5E5E5"> plus Len</font><font color="#CCCCCC"> doesn't</font>

1120
00:50:52,260 --> 00:50:58,200
overflow<font color="#E5E5E5"> right</font><font color="#CCCCCC"> and so you would do coat</font>

1121
00:50:55,050 --> 00:50:59,820
like<font color="#CCCCCC"> PTR</font><font color="#E5E5E5"> plus LAN is smaller than PTR if</font>

1122
00:50:58,200 --> 00:51:02,540
that's the case then the pointer

1123
00:50:59,820 --> 00:51:05,480
<font color="#E5E5E5">overflowed and you bail out right</font>

1124
00:51:02,540 --> 00:51:07,770
<font color="#E5E5E5">problem is according</font><font color="#CCCCCC"> to C standard</font>

1125
00:51:05,480 --> 00:51:10,560
<font color="#E5E5E5">pointer overflow can't happen and so</font>

1126
00:51:07,770 --> 00:51:12,720
that is<font color="#E5E5E5"> undefined behavior and the</font>

1127
00:51:10,560 --> 00:51:15,359
optimizer sees that and goes oh I'm

1128
00:51:12,720 --> 00:51:17,399
<font color="#E5E5E5">gonna find behavior optimized out gone</font>

1129
00:51:15,359 --> 00:51:21,029
<font color="#E5E5E5">so you're bound check</font><font color="#CCCCCC"> just got optimized</font>

1130
00:51:17,400 --> 00:51:23,010
out<font color="#E5E5E5"> that is a relatively common</font><font color="#CCCCCC"> bug to</font>

1131
00:51:21,030 --> 00:51:25,230
see if you<font color="#E5E5E5"> don't know it's on the</font><font color="#CCCCCC"> find</font>

1132
00:51:23,010 --> 00:51:27,660
behavior if you<font color="#E5E5E5"> don't know the compiler</font>

1133
00:51:25,230 --> 00:51:29,970
can optimize<font color="#E5E5E5"> it out you would just read</font>

1134
00:51:27,660 --> 00:51:31,350
<font color="#CCCCCC">over it but once</font><font color="#E5E5E5"> you know like you start</font>

1135
00:51:29,970 --> 00:51:35,368
reading code and you'll see you'll see

1136
00:51:31,350 --> 00:51:37,589
<font color="#E5E5E5">it everywhere</font><font color="#CCCCCC"> also the way</font><font color="#E5E5E5"> to fix this</font>

1137
00:51:35,369 --> 00:51:39,090
<font color="#E5E5E5">is basically to cast your pointer to an</font>

1138
00:51:37,590 --> 00:51:41,910
integer type that's big<font color="#CCCCCC"> enough to hold a</font>

1139
00:51:39,090 --> 00:51:44,340
pointer and all the sudden<font color="#E5E5E5"> the optimizer</font>

1140
00:51:41,910 --> 00:51:46,950
<font color="#E5E5E5">can no longer optimize it out and it'll</font>

1141
00:51:44,340 --> 00:51:49,530
it'll be it it'll be in your<font color="#E5E5E5"> code</font><font color="#CCCCCC"> so</font>

1142
00:51:46,950 --> 00:51:52,290
<font color="#CCCCCC">that's the first one</font><font color="#E5E5E5"> the second one is a</font>

1143
00:51:49,530 --> 00:51:57,000
lot<font color="#E5E5E5"> more subtle this has to do</font><font color="#CCCCCC"> with a</font>

1144
00:51:52,290 --> 00:51:58,560
switch case optimization<font color="#E5E5E5"> so you know</font>

1145
00:51:57,000 --> 00:52:01,440
<font color="#CCCCCC">though when when you have a switch and C</font>

1146
00:51:58,560 --> 00:52:02,940
and<font color="#CCCCCC"> you translate</font><font color="#E5E5E5"> to assembly you know</font>

1147
00:52:01,440 --> 00:52:07,140
you could just<font color="#E5E5E5"> do</font><font color="#CCCCCC"> it</font>

1148
00:52:02,940 --> 00:52:10,890
<font color="#E5E5E5">one one</font><font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of translation but if you</font>

1149
00:52:07,140 --> 00:52:11,700
have if<font color="#E5E5E5"> you use the optimizer</font><font color="#CCCCCC"> one of two</font>

1150
00:52:10,890 --> 00:52:13,950
<font color="#CCCCCC">things</font><font color="#E5E5E5"> will happen</font>

1151
00:52:11,700 --> 00:52:16,500
either you know it'll<font color="#E5E5E5"> generate a binary</font>

1152
00:52:13,950 --> 00:52:19,828
tree<font color="#CCCCCC"> that's generally observed in the</font>

1153
00:52:16,500 --> 00:52:21,930
Microsoft compiler if you look at GCC

1154
00:52:19,829 --> 00:52:25,730
<font color="#E5E5E5">and clang what they do is they'll create</font>

1155
00:52:21,930 --> 00:52:28,710
a jump<font color="#E5E5E5"> table</font><font color="#CCCCCC"> and what that</font><font color="#E5E5E5"> means is</font>

1156
00:52:25,730 --> 00:52:30,990
they'll look at<font color="#E5E5E5"> the value to compare and</font>

1157
00:52:28,710 --> 00:52:33,030
then<font color="#E5E5E5"> if the</font><font color="#CCCCCC"> compare certain number they</font>

1158
00:52:30,990 --> 00:52:36,558
<font color="#E5E5E5">get the value again and they use that</font>

1159
00:52:33,030 --> 00:52:39,359
<font color="#CCCCCC">value as an offset in</font><font color="#E5E5E5"> a jump table and</font>

1160
00:52:36,559 --> 00:52:41,190
<font color="#E5E5E5">and that usually</font><font color="#CCCCCC"> isn't</font><font color="#E5E5E5"> the problem and</font>

1161
00:52:39,359 --> 00:52:42,650
<font color="#CCCCCC">that's an abstraction</font><font color="#E5E5E5"> and most people</font>

1162
00:52:41,190 --> 00:52:45,599
don't care about<font color="#E5E5E5"> any more situations</font>

1163
00:52:42,650 --> 00:52:47,609
<font color="#E5E5E5">except if you're dealing with a shared</font>

1164
00:52:45,599 --> 00:52:50,520
memory trust boundary<font color="#E5E5E5"> because all</font><font color="#CCCCCC"> of a</font>

1165
00:52:47,609 --> 00:52:52,920
<font color="#E5E5E5">sudden there is a subtle double fetch</font>

1166
00:52:50,520 --> 00:52:54,359
that was emitted<font color="#CCCCCC"> by the compiler behind</font>

1167
00:52:52,920 --> 00:52:57,299
<font color="#E5E5E5">your back that</font><font color="#CCCCCC"> doesn't show</font><font color="#E5E5E5"> up in the</font>

1168
00:52:54,359 --> 00:52:59,880
<font color="#E5E5E5">actual</font><font color="#CCCCCC"> C code and these are situations</font>

1169
00:52:57,299 --> 00:53:01,589
<font color="#E5E5E5">like you know a hypervisor trust</font>

1170
00:52:59,880 --> 00:53:05,460
boundary right<font color="#E5E5E5"> these are very very</font>

1171
00:53:01,589 --> 00:53:07,078
<font color="#E5E5E5">strong trust boundaries and</font><font color="#CCCCCC"> and that</font>

1172
00:53:05,460 --> 00:53:08,940
thing<font color="#E5E5E5"> is actually a link if you look and</font>

1173
00:53:07,079 --> 00:53:10,920
if you<font color="#CCCCCC"> and if once I publish the slides</font>

1174
00:53:08,940 --> 00:53:13,950
if you<font color="#E5E5E5"> click</font><font color="#CCCCCC"> on it it links to a blog</font>

1175
00:53:10,920 --> 00:53:17,369
post<font color="#CCCCCC"> that shows just that it's it's a</font>

1176
00:53:13,950 --> 00:53:21,180
VirtualBox guest host<font color="#CCCCCC"> previous collation</font>

1177
00:53:17,369 --> 00:53:25,319
because of a switch case a jump table

1178
00:53:21,180 --> 00:53:27,808
optimization and and so the<font color="#E5E5E5"> the debug</font>

1179
00:53:25,319 --> 00:53:29,190
there basically is that when you fetch

1180
00:53:27,809 --> 00:53:31,230
the<font color="#E5E5E5"> first time you do to compare it's</font>

1181
00:53:29,190 --> 00:53:33,690
fine and then two instructions later you

1182
00:53:31,230 --> 00:53:36,420
fetch<font color="#CCCCCC"> again to do the jump table between</font>

1183
00:53:33,690 --> 00:53:38,010
<font color="#CCCCCC">his</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> and second fetch</font><font color="#E5E5E5"> the guy on</font>

1184
00:53:36,420 --> 00:53:40,680
the<font color="#CCCCCC"> other end</font><font color="#E5E5E5"> of the shared memory could</font>

1185
00:53:38,010 --> 00:53:42,329
change it and all the<font color="#E5E5E5"> sudden you can</font>

1186
00:53:40,680 --> 00:53:46,109
jump outside<font color="#CCCCCC"> of</font><font color="#E5E5E5"> your jump</font><font color="#CCCCCC"> table and</font>

1187
00:53:42,329 --> 00:53:49,039
basically<font color="#E5E5E5"> cause an arbitrary jump which</font>

1188
00:53:46,109 --> 00:53:49,038
obviously is bad

1189
00:53:51,349 --> 00:53:57,329
yeah<font color="#E5E5E5"> not gonna cover this this okay</font><font color="#CCCCCC"> I</font>

1190
00:53:55,039 --> 00:53:59,549
<font color="#CCCCCC">gotta</font><font color="#E5E5E5"> wrap it</font><font color="#CCCCCC"> up I</font><font color="#E5E5E5"> got three more</font><font color="#CCCCCC"> slides</font>

1191
00:53:57,329 --> 00:54:00,960
and<font color="#E5E5E5"> then we can get</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> questions this</font>

1192
00:53:59,549 --> 00:54:03,089
this is<font color="#E5E5E5"> actually this</font><font color="#CCCCCC"> is very important</font>

1193
00:54:00,960 --> 00:54:05,430
so now<font color="#E5E5E5"> after</font><font color="#CCCCCC"> everything I've covered</font>

1194
00:54:03,089 --> 00:54:07,619
we're good we know what<font color="#CCCCCC"> the problem is</font>

1195
00:54:05,430 --> 00:54:10,740
we know what<font color="#E5E5E5"> the solutions are we know</font>

1196
00:54:07,619 --> 00:54:13,300
there's real-world problems<font color="#CCCCCC"> but we</font><font color="#E5E5E5"> have</font>

1197
00:54:10,740 --> 00:54:16,839
a good grasp of it now right

1198
00:54:13,300 --> 00:54:19,850
<font color="#E5E5E5">okay turns out I kind of lied to you</font>

1199
00:54:16,840 --> 00:54:21,200
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is not the</font><font color="#CCCCCC"> whole problem if it was</font>

1200
00:54:19,850 --> 00:54:24,799
no problem that'd be great

1201
00:54:21,200 --> 00:54:26,750
we know how to fix that<font color="#E5E5E5"> more or</font><font color="#CCCCCC"> less it</font>

1202
00:54:24,800 --> 00:54:29,510
turns out<font color="#E5E5E5"> that compiled optimization is</font>

1203
00:54:26,750 --> 00:54:31,850
really really clever<font color="#CCCCCC"> and it does many</font>

1204
00:54:29,510 --> 00:54:33,080
many clever things<font color="#E5E5E5"> and they're all</font><font color="#CCCCCC"> very</font>

1205
00:54:31,850 --> 00:54:34,009
<font color="#E5E5E5">subtle and a lot of</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> are</font>

1206
00:54:33,080 --> 00:54:36,650
<font color="#CCCCCC">architecture-specific</font>

1207
00:54:34,010 --> 00:54:39,920
<font color="#CCCCCC">and here's a scenario of things that can</font>

1208
00:54:36,650 --> 00:54:42,290
<font color="#CCCCCC">occur right you'll have the optimizer</font>

1209
00:54:39,920 --> 00:54:44,470
will do<font color="#E5E5E5"> things like oh well</font><font color="#CCCCCC"> you're</font>

1210
00:54:42,290 --> 00:54:47,420
handling this string of a certain kind

1211
00:54:44,470 --> 00:54:48,740
you know what we'll do<font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> just shove</font>

1212
00:54:47,420 --> 00:54:51,800
it<font color="#E5E5E5"> into a bunch of</font><font color="#CCCCCC"> register so it'll be</font>

1213
00:54:48,740 --> 00:54:53,540
faster<font color="#E5E5E5"> and then you know</font><font color="#CCCCCC"> I pass or</font>

1214
00:54:51,800 --> 00:54:55,610
<font color="#CCCCCC">something and then old son the optimize</font>

1215
00:54:53,540 --> 00:54:57,710
it goes<font color="#E5E5E5"> oh you know what</font><font color="#CCCCCC"> you don't have</font>

1216
00:54:55,610 --> 00:54:58,760
enough registers<font color="#E5E5E5"> it's okay what I'll do</font>

1217
00:54:57,710 --> 00:55:00,440
<font color="#E5E5E5">is I'll</font><font color="#CCCCCC"> take</font><font color="#E5E5E5"> whatever is in the register</font>

1218
00:54:58,760 --> 00:55:03,320
and<font color="#E5E5E5"> I'll dump it on the stack and then</font>

1219
00:55:00,440 --> 00:55:05,750
<font color="#CCCCCC">we'll you will go from</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> and all the</font>

1220
00:55:03,320 --> 00:55:07,430
sudden<font color="#E5E5E5"> what happened is you leaky</font>

1221
00:55:05,750 --> 00:55:09,980
material in registers and then<font color="#E5E5E5"> if you</font>

1222
00:55:07,430 --> 00:55:15,200
<font color="#CCCCCC">leak them on the stack</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> this stuff</font>

1223
00:55:09,980 --> 00:55:16,490
happens throughout and secrets<font color="#E5E5E5"> leak out</font>

1224
00:55:15,200 --> 00:55:19,939
it just<font color="#E5E5E5"> happens</font>

1225
00:55:16,490 --> 00:55:24,410
and it is because of optimization<font color="#CCCCCC"> even</font>

1226
00:55:19,940 --> 00:55:27,020
if you try really really hard<font color="#CCCCCC"> by trying</font>

1227
00:55:24,410 --> 00:55:29,029
<font color="#E5E5E5">to do</font><font color="#CCCCCC"> too really hard to do the</font><font color="#E5E5E5"> right</font>

1228
00:55:27,020 --> 00:55:31,460
thing and<font color="#CCCCCC"> they compile it and</font><font color="#E5E5E5"> the</font>

1229
00:55:29,030 --> 00:55:32,480
optimizer<font color="#E5E5E5"> just it just they just screw</font>

1230
00:55:31,460 --> 00:55:33,890
you<font color="#E5E5E5"> right</font>

1231
00:55:32,480 --> 00:55:36,800
and it's promised echoed in<font color="#E5E5E5"> a blog post</font>

1232
00:55:33,890 --> 00:55:40,009
<font color="#CCCCCC">by Colin Percival who used to be the</font>

1233
00:55:36,800 --> 00:55:41,960
<font color="#CCCCCC">security high FreeBSD</font><font color="#E5E5E5"> now has I think a</font>

1234
00:55:40,010 --> 00:55:45,080
cloud storage<font color="#E5E5E5"> company very very smart</font>

1235
00:55:41,960 --> 00:55:47,120
<font color="#E5E5E5">security guy who had and I would</font>

1236
00:55:45,080 --> 00:55:49,970
<font color="#E5E5E5">recommend reading that blog post that</font>

1237
00:55:47,120 --> 00:55:52,339
this is this problem was<font color="#E5E5E5"> also echoed in</font>

1238
00:55:49,970 --> 00:55:55,160
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Linux man page</font><font color="#E5E5E5"> exposed to</font><font color="#CCCCCC"> the B</font><font color="#E5E5E5"> 0</font>

1239
00:55:52,340 --> 00:55:58,490
and<font color="#CCCCCC"> a map page</font><font color="#E5E5E5"> basically says well yes</font>

1240
00:55:55,160 --> 00:56:01,700
<font color="#CCCCCC">this is</font><font color="#E5E5E5"> a fundamental problem</font><font color="#CCCCCC"> we still</font>

1241
00:55:58,490 --> 00:56:05,390
recommend using<font color="#CCCCCC"> us as B 0</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> our our</font>

1242
00:56:01,700 --> 00:56:07,850
hope our thought process is<font color="#CCCCCC"> that towards</font>

1243
00:56:05,390 --> 00:56:10,310
<font color="#CCCCCC">the future to</font><font color="#E5E5E5"> comply we will have a way</font>

1244
00:56:07,850 --> 00:56:12,860
<font color="#E5E5E5">to get the compilers to</font><font color="#CCCCCC"> not do</font><font color="#E5E5E5"> this and</font>

1245
00:56:10,310 --> 00:56:16,430
we<font color="#E5E5E5"> can move on</font><font color="#CCCCCC"> but at the present time</font>

1246
00:56:12,860 --> 00:56:18,220
there's no good fix for this<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is</font>

1247
00:56:16,430 --> 00:56:20,720
<font color="#E5E5E5">my zoom I'm the first statement I</font><font color="#CCCCCC"> have</font>

1248
00:56:18,220 --> 00:56:23,299
that I<font color="#E5E5E5"> want to make is that at the</font>

1249
00:56:20,720 --> 00:56:25,490
<font color="#E5E5E5">present time optimizing compiles in</font>

1250
00:56:23,300 --> 00:56:26,599
cryptography<font color="#CCCCCC"> are mutually exclusive you</font>

1251
00:56:25,490 --> 00:56:29,569
<font color="#E5E5E5">can have one</font>

1252
00:56:26,599 --> 00:56:34,309
the other you cannot have boat<font color="#CCCCCC"> it does</font>

1253
00:56:29,569 --> 00:56:38,599
not work<font color="#E5E5E5"> at the present time okay before</font>

1254
00:56:34,309 --> 00:56:40,430
<font color="#CCCCCC">I get to my conclusion</font><font color="#E5E5E5"> I want to rant a</font>

1255
00:56:38,599 --> 00:56:44,779
bit<font color="#E5E5E5"> about optimization as if I</font><font color="#CCCCCC"> haven't</font>

1256
00:56:40,430 --> 00:56:46,519
<font color="#E5E5E5">already</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> basically I mean I get that</font>

1257
00:56:44,779 --> 00:56:49,519
optimization<font color="#E5E5E5"> is great and it gives you</font>

1258
00:56:46,519 --> 00:56:50,839
all these things<font color="#E5E5E5"> and things get faster</font>

1259
00:56:49,519 --> 00:56:54,109
but I have a real problem with

1260
00:56:50,839 --> 00:56:57,890
optimization<font color="#CCCCCC"> because</font><font color="#E5E5E5"> look if you're a</font>

1261
00:56:54,109 --> 00:56:59,239
developer<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> write code and you're</font>

1262
00:56:57,890 --> 00:57:00,499
pretty<font color="#E5E5E5"> smart you can reason about your</font>

1263
00:56:59,239 --> 00:57:04,039
code because<font color="#CCCCCC"> you wrote it</font><font color="#E5E5E5"> and you know</font>

1264
00:57:00,499 --> 00:57:05,479
what it does<font color="#CCCCCC"> but if if you</font><font color="#E5E5E5"> didn't</font>

1265
00:57:04,039 --> 00:57:08,180
compile it and<font color="#E5E5E5"> it's gone through</font><font color="#CCCCCC"> an</font>

1266
00:57:05,479 --> 00:57:10,160
optimization pass<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can no longer</font>

1267
00:57:08,180 --> 00:57:13,609
reason<font color="#E5E5E5"> about</font><font color="#CCCCCC"> it because you</font><font color="#E5E5E5"> don't know</font>

1268
00:57:10,160 --> 00:57:15,170
what the optimizer did<font color="#E5E5E5"> right and that</font>

1269
00:57:13,609 --> 00:57:19,098
<font color="#E5E5E5">that is I that is I think a fundamental</font>

1270
00:57:15,170 --> 00:57:21,200
<font color="#CCCCCC">problem and sort of what I want people</font>

1271
00:57:19,099 --> 00:57:23,869
<font color="#E5E5E5">to sort of think about is whenever they</font>

1272
00:57:21,200 --> 00:57:25,399
do -<font color="#E5E5E5"> oh is the and I'm not saying you</font>

1273
00:57:23,869 --> 00:57:30,859
shouldn't use<font color="#E5E5E5"> the optimizer because it</font>

1274
00:57:25,400 --> 00:57:33,529
hasn't<font color="#E5E5E5"> many many many pros but don't be</font>

1275
00:57:30,859 --> 00:57:37,670
like blase about it right before<font color="#CCCCCC"> you</font>

1276
00:57:33,529 --> 00:57:41,210
<font color="#E5E5E5">type - oh really think what it means do</font>

1277
00:57:37,670 --> 00:57:44,119
what it means to do<font color="#CCCCCC"> that because it will</font>

1278
00:57:41,210 --> 00:57:45,920
introduce all sorts of things<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

1279
00:57:44,119 --> 00:57:50,059
<font color="#E5E5E5">weren't sure about or that suddenly</font>

1280
00:57:45,920 --> 00:57:52,969
changes the<font color="#CCCCCC"> meaning of something</font><font color="#E5E5E5"> so and</font>

1281
00:57:50,059 --> 00:57:55,190
<font color="#E5E5E5">what I really want for the compiler</font>

1282
00:57:52,969 --> 00:57:56,299
people and maybe the language<font color="#E5E5E5"> people to</font>

1283
00:57:55,190 --> 00:57:58,339
implement<font color="#CCCCCC"> this so the</font><font color="#E5E5E5"> compiler people</font>

1284
00:57:56,299 --> 00:57:59,779
can do it<font color="#E5E5E5"> is I want strong</font>

1285
00:57:58,339 --> 00:58:02,150
<font color="#CCCCCC">accountability and control of the</font>

1286
00:57:59,779 --> 00:58:03,680
optimizer<font color="#E5E5E5"> right that is if I compile</font>

1287
00:58:02,150 --> 00:58:04,940
<font color="#E5E5E5">something I want to be able</font><font color="#CCCCCC"> to compile I</font>

1288
00:58:03,680 --> 00:58:09,319
want to be able to<font color="#E5E5E5"> go to compiler and</font>

1289
00:58:04,940 --> 00:58:11,210
say hey<font color="#CCCCCC"> before you do anything</font><font color="#E5E5E5"> I want</font>

1290
00:58:09,319 --> 00:58:13,308
you<font color="#E5E5E5"> to give me a detailed list</font><font color="#CCCCCC"> of</font>

1291
00:58:11,210 --> 00:58:15,950
everything<font color="#E5E5E5"> you're about</font><font color="#CCCCCC"> to do in terms</font>

1292
00:58:13,309 --> 00:58:17,839
<font color="#E5E5E5">of optimization</font><font color="#CCCCCC"> so that I can take it</font>

1293
00:58:15,950 --> 00:58:20,299
<font color="#E5E5E5">out take</font><font color="#CCCCCC"> that list and look</font><font color="#E5E5E5"> at my code</font>

1294
00:58:17,839 --> 00:58:22,788
and then with that<font color="#CCCCCC"> list</font><font color="#E5E5E5"> of my code I can</font>

1295
00:58:20,299 --> 00:58:25,788
now reason again about what<font color="#E5E5E5"> the binary</font>

1296
00:58:22,789 --> 00:58:27,680
is<font color="#E5E5E5"> gonna do without</font><font color="#CCCCCC"> having that kind</font><font color="#E5E5E5"> of</font>

1297
00:58:25,789 --> 00:58:30,589
<font color="#CCCCCC">accountability</font><font color="#E5E5E5"> you just you can't reason</font>

1298
00:58:27,680 --> 00:58:32,450
about your binary<font color="#E5E5E5"> and the other thing is</font>

1299
00:58:30,589 --> 00:58:35,328
control right<font color="#E5E5E5"> I want to have fine fine</font>

1300
00:58:32,450 --> 00:58:37,669
grained control over optimization<font color="#CCCCCC"> and</font>

1301
00:58:35,329 --> 00:58:39,739
what I mean<font color="#CCCCCC"> by that</font><font color="#E5E5E5"> is you know</font><font color="#CCCCCC"> like the</font>

1302
00:58:37,670 --> 00:58:40,220
localized stuff that I mentioned before

1303
00:58:39,739 --> 00:58:42,560
<font color="#CCCCCC">that</font>

1304
00:58:40,220 --> 00:58:45,649
<font color="#CCCCCC">my</font><font color="#E5E5E5"> compiler for example has or I want to</font>

1305
00:58:42,560 --> 00:58:48,230
<font color="#E5E5E5">be able to go and say this particular</font>

1306
00:58:45,650 --> 00:58:49,970
scope<font color="#CCCCCC"> door</font><font color="#E5E5E5"> and optimizer this particular</font>

1307
00:58:48,230 --> 00:58:53,119
scope<font color="#E5E5E5"> don't do this particular</font>

1308
00:58:49,970 --> 00:58:56,029
optimization<font color="#E5E5E5"> I would like to see</font>

1309
00:58:53,119 --> 00:58:58,280
<font color="#E5E5E5">something like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and then I'll just</font>

1310
00:58:56,030 --> 00:59:00,320
<font color="#CCCCCC">skip this so</font><font color="#E5E5E5"> okay here's my conclusion</font>

1311
00:58:58,280 --> 00:59:04,070
<font color="#E5E5E5">right we know what the problem is the</font>

1312
00:59:00,320 --> 00:59:07,099
original<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> and then I have some</font>

1313
00:59:04,070 --> 00:59:08,780
solutions<font color="#E5E5E5"> and then in retrospect</font><font color="#CCCCCC"> they're</font>

1314
00:59:07,099 --> 00:59:11,180
at just partial solutions but they're

1315
00:59:08,780 --> 00:59:14,599
<font color="#E5E5E5">still kind of solutions</font><font color="#CCCCCC"> okay</font>

1316
00:59:11,180 --> 00:59:15,830
and then I also have a call to<font color="#CCCCCC"> action of</font>

1317
00:59:14,599 --> 00:59:17,690
things I think<font color="#CCCCCC"> should happen</font>

1318
00:59:15,830 --> 00:59:23,240
<font color="#E5E5E5">oh and hopefully will happen</font><font color="#CCCCCC"> at some</font>

1319
00:59:17,690 --> 00:59:29,300
<font color="#CCCCCC">point in the future the problem as I've</font>

1320
00:59:23,240 --> 00:59:32,330
Illustrated I think is rampant<font color="#CCCCCC"> right and</font>

1321
00:59:29,300 --> 00:59:35,300
so basically<font color="#E5E5E5"> III would like people to</font>

1322
00:59:32,330 --> 00:59:37,880
use that<font color="#CCCCCC"> juicy patch</font><font color="#E5E5E5"> that I've shown or</font>

1323
00:59:35,300 --> 00:59:40,910
or create a<font color="#E5E5E5"> better one and you know go</font>

1324
00:59:37,880 --> 00:59:44,990
<font color="#E5E5E5">find some bugs or better yet go fix some</font>

1325
00:59:40,910 --> 00:59:47,868
bugs<font color="#CCCCCC"> in terms of compilers as I</font><font color="#E5E5E5"> just</font>

1326
00:59:44,990 --> 00:59:50,299
<font color="#E5E5E5">mentioned what I want is optimization</font>

1327
00:59:47,869 --> 00:59:51,770
accountability in control<font color="#E5E5E5"> right it's</font>

1328
00:59:50,300 --> 00:59:54,260
kind of the wild wild west in terms of

1329
00:59:51,770 --> 00:59:57,290
optimization<font color="#E5E5E5"> where the compilers just go</font>

1330
00:59:54,260 --> 00:59:59,660
and do all these things and I mean<font color="#CCCCCC"> we</font>

1331
00:59:57,290 --> 01:00:01,670
have<font color="#CCCCCC"> we have some</font><font color="#E5E5E5"> flags but they're</font>

1332
00:59:59,660 --> 01:00:03,080
there<font color="#E5E5E5"> there's not enough control and</font>

1333
01:00:01,670 --> 01:00:05,210
there's<font color="#E5E5E5"> not enough</font><font color="#CCCCCC"> accountability</font>

1334
01:00:03,080 --> 01:00:07,910
there's not enough transparency<font color="#CCCCCC"> you just</font>

1335
01:00:05,210 --> 01:00:09,740
<font color="#E5E5E5">don't know what's going</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> and some</font>

1336
01:00:07,910 --> 01:00:12,799
problem if like a<font color="#CCCCCC"> dump functionality</font>

1337
01:00:09,740 --> 01:00:16,098
<font color="#E5E5E5">where it's like it's like a needle in a</font>

1338
01:00:12,800 --> 01:00:18,530
haystack<font color="#E5E5E5"> you want something that's easy</font>

1339
01:00:16,099 --> 01:00:20,990
<font color="#CCCCCC">to work with</font><font color="#E5E5E5"> easy to</font><font color="#CCCCCC"> read</font><font color="#E5E5E5"> or easy to</font>

1340
01:00:18,530 --> 01:00:23,570
parse<font color="#E5E5E5"> and that tells you exactly all the</font>

1341
01:00:20,990 --> 01:00:26,390
<font color="#E5E5E5">optimization steps you're doing</font><font color="#CCCCCC"> and</font>

1342
01:00:23,570 --> 01:00:27,920
ideally<font color="#E5E5E5"> we would like I'd like the the</font>

1343
01:00:26,390 --> 01:00:29,720
the<font color="#CCCCCC"> language people</font><font color="#E5E5E5"> to get</font><font color="#CCCCCC"> involved in</font>

1344
01:00:27,920 --> 01:00:31,910
the<font color="#CCCCCC"> standardize on this</font><font color="#E5E5E5"> because if they</font>

1345
01:00:29,720 --> 01:00:35,480
do we can now demand<font color="#E5E5E5"> this of all the</font>

1346
01:00:31,910 --> 01:00:39,020
compilers<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then lastly sort of the</font>

1347
01:00:35,480 --> 01:00:43,700
you know<font color="#E5E5E5"> coming</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> to my</font><font color="#CCCCCC"> nazi acidity</font>

1348
01:00:39,020 --> 01:00:48,230
well what about<font color="#CCCCCC"> Nazi</font><font color="#E5E5E5"> Ruby Python Perl go</font>

1349
01:00:43,700 --> 01:00:51,490
Russ and so on<font color="#CCCCCC"> it smells bad it looks</font>

1350
01:00:48,230 --> 01:00:53,720
bad<font color="#E5E5E5"> especially</font><font color="#CCCCCC"> winter</font><font color="#E5E5E5"> runtimes involved</font>

1351
01:00:51,490 --> 01:00:55,250
<font color="#CCCCCC">this is probably worthy of</font>

1352
01:00:53,720 --> 01:01:00,140
presentation<font color="#E5E5E5"> of its own or multiple</font>

1353
01:00:55,250 --> 01:01:05,180
presentations but<font color="#CCCCCC"> I I I wish I had done</font>

1354
01:01:00,140 --> 01:01:06,950
more there<font color="#CCCCCC"> that is essentially it I hope</font>

1355
01:01:05,180 --> 01:01:07,589
you enjoyed<font color="#E5E5E5"> it</font>

1356
01:01:06,950 --> 01:01:10,709
[Applause]

1357
01:01:07,590 --> 01:01:10,709
[Music]

1358
01:01:15,260 --> 01:01:25,570
[Music]

1359
01:01:27,630 --> 01:01:40,300
[Music]

