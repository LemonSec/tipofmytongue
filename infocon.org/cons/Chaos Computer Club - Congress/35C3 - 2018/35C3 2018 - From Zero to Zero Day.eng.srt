1
00:00:02,830 --> 00:00:15,470
[Music]

2
00:00:17,690 --> 00:00:22,500
<font color="#CCCCCC">Jonason wonderful good morning</font><font color="#E5E5E5"> you're</font>

3
00:00:20,699 --> 00:00:25,710
<font color="#E5E5E5">gonna tell us about the last 12 months</font>

4
00:00:22,500 --> 00:00:27,948
<font color="#CCCCCC">on what you have</font><font color="#E5E5E5"> done so your talk is</font>

5
00:00:25,710 --> 00:00:31,380
<font color="#E5E5E5">called from zero to zero day</font>

6
00:00:27,949 --> 00:00:34,620
this is Jonathan<font color="#CCCCCC"> Jay from the nsrc</font><font color="#E5E5E5"> in</font>

7
00:00:31,380 --> 00:00:39,019
Israel<font color="#CCCCCC"> a division</font><font color="#E5E5E5"> of Microsoft and the</font>

8
00:00:34,620 --> 00:00:39,019
stage is yours<font color="#CCCCCC"> and that</font><font color="#E5E5E5"> is your applause</font>

9
00:00:45,680 --> 00:00:51,930
so hi<font color="#E5E5E5"> everyone my name is</font><font color="#CCCCCC"> Jonathan</font><font color="#E5E5E5"> and</font>

10
00:00:49,559 --> 00:00:55,199
I'm a<font color="#CCCCCC"> security researcher</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> an MSR seen</font>

11
00:00:51,930 --> 00:00:57,809
in Israel<font color="#E5E5E5"> on my free</font><font color="#CCCCCC"> time I play</font><font color="#E5E5E5"> CTF</font>

12
00:00:55,199 --> 00:01:00,870
<font color="#E5E5E5">with team perfect blue and I also do</font>

13
00:00:57,809 --> 00:01:02,459
<font color="#CCCCCC">research</font><font color="#E5E5E5"> on my own I'm just an</font><font color="#CCCCCC"> eighteen</font>

14
00:01:00,870 --> 00:01:05,009
year<font color="#CCCCCC"> old</font><font color="#E5E5E5"> and I started doing security</font>

15
00:01:02,460 --> 00:01:06,689
related<font color="#E5E5E5"> stuff last year so the first</font>

16
00:01:05,010 --> 00:01:08,850
<font color="#CCCCCC">part of this talk is going</font><font color="#E5E5E5"> to be about</font>

17
00:01:06,689 --> 00:01:09,509
what I learned in the past<font color="#E5E5E5"> year and how</font>

18
00:01:08,850 --> 00:01:10,890
I learned it

19
00:01:09,510 --> 00:01:14,040
so if you're<font color="#CCCCCC"> just</font><font color="#E5E5E5"> starting off in</font>

20
00:01:10,890 --> 00:01:16,229
security and<font color="#E5E5E5"> you want to learn</font><font color="#CCCCCC"> what to</font>

21
00:01:14,040 --> 00:01:18,869
<font color="#CCCCCC">pick up what I did and learn from what</font>

22
00:01:16,229 --> 00:01:21,000
what I did<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> a this</font><font color="#E5E5E5"> could be</font>

23
00:01:18,869 --> 00:01:22,799
<font color="#CCCCCC">helpful for you and for the more</font>

24
00:01:21,000 --> 00:01:24,600
experienced security researchers in the

25
00:01:22,799 --> 00:01:26,880
audience<font color="#CCCCCC"> the second part of this talk is</font>

26
00:01:24,600 --> 00:01:30,329
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be about a</font><font color="#CCCCCC"> zero-day I found in</font>

27
00:01:26,880 --> 00:01:32,189
chakra a JIT type confusion so we're

28
00:01:30,329 --> 00:01:34,408
gonna die<font color="#CCCCCC"> and we're</font><font color="#E5E5E5"> gonna dive deep into</font>

29
00:01:32,189 --> 00:01:36,270
<font color="#E5E5E5">that and even if you're just starting in</font>

30
00:01:34,409 --> 00:01:37,920
security a<font color="#E5E5E5"> basic understanding in</font>

31
00:01:36,270 --> 00:01:39,658
programming is probably<font color="#E5E5E5"> going to be</font>

32
00:01:37,920 --> 00:01:41,430
enough to follow up there's<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be a</font>

33
00:01:39,659 --> 00:01:43,950
lot of code but it's fine it's<font color="#CCCCCC"> not too</font>

34
00:01:41,430 --> 00:01:45,899
complex<font color="#E5E5E5"> and last but not least we're</font>

35
00:01:43,950 --> 00:01:48,869
<font color="#E5E5E5">gonna finish up with a demo hopefully</font>

36
00:01:45,899 --> 00:01:51,619
working<font color="#E5E5E5"> one so yeah let's let's</font><font color="#CCCCCC"> start</font>

37
00:01:48,869 --> 00:01:53,970
off<font color="#E5E5E5"> so why vulnerability research</font>

38
00:01:51,619 --> 00:01:56,549
<font color="#E5E5E5">vulnerabilities are for me some sort of</font>

39
00:01:53,970 --> 00:01:58,320
riddles there is some sort of very

40
00:01:56,549 --> 00:02:00,869
<font color="#CCCCCC">challenging riddles that we have to find</font>

41
00:01:58,320 --> 00:02:03,360
some flaws that<font color="#CCCCCC"> the developers did not</font>

42
00:02:00,869 --> 00:02:04,920
<font color="#E5E5E5">consider this is very challenging</font><font color="#CCCCCC"> and</font>

43
00:02:03,360 --> 00:02:09,030
very interesting for<font color="#E5E5E5"> me</font><font color="#CCCCCC"> at least and I</font>

44
00:02:04,920 --> 00:02:10,530
<font color="#E5E5E5">found it awesome to to do so what is a</font>

45
00:02:09,030 --> 00:02:12,620
<font color="#CCCCCC">vulnerability</font><font color="#E5E5E5"> there are a lot of</font>

46
00:02:10,530 --> 00:02:13,849
definitions<font color="#CCCCCC"> to it and when when you</font>

47
00:02:12,620 --> 00:02:15,920
<font color="#CCCCCC">want to understand something you</font><font color="#E5E5E5"> started</font>

48
00:02:13,849 --> 00:02:17,720
up<font color="#E5E5E5"> on Wikipedia there are a lot of</font>

49
00:02:15,920 --> 00:02:19,940
definitions<font color="#CCCCCC"> that you can see it's some</font>

50
00:02:17,720 --> 00:02:21,799
more weird like the probability<font color="#CCCCCC"> that an</font>

51
00:02:19,940 --> 00:02:24,530
asset will be<font color="#E5E5E5"> unable</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> resist the</font>

52
00:02:21,799 --> 00:02:25,510
<font color="#CCCCCC">actions of a threat</font><font color="#E5E5E5"> agent</font><font color="#CCCCCC"> I don't know</font>

53
00:02:24,530 --> 00:02:28,129
what that means

54
00:02:25,510 --> 00:02:30,260
yeah for me a vulnerability<font color="#CCCCCC"> is some sort</font>

55
00:02:28,129 --> 00:02:33,349
<font color="#E5E5E5">of flaw in a program that allows</font><font color="#CCCCCC"> you to</font>

56
00:02:30,260 --> 00:02:36,319
change<font color="#E5E5E5"> the intended flow of the of the</font>

57
00:02:33,349 --> 00:02:38,390
program that's what I consider as a

58
00:02:36,319 --> 00:02:40,040
vulnerability<font color="#E5E5E5"> and the definitions we've</font>

59
00:02:38,390 --> 00:02:41,540
just seen<font color="#E5E5E5"> do not really tell me how I</font>

60
00:02:40,040 --> 00:02:44,480
find them so how<font color="#CCCCCC"> do we find</font>

61
00:02:41,540 --> 00:02:46,700
<font color="#CCCCCC">vulnerabilities so when I started I had</font>

62
00:02:44,480 --> 00:02:48,470
<font color="#E5E5E5">some knowledge</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> programming I wasn't</font>

63
00:02:46,700 --> 00:02:50,780
<font color="#E5E5E5">I wasn't</font><font color="#CCCCCC"> the best developer out there I</font>

64
00:02:48,470 --> 00:02:53,930
was just<font color="#CCCCCC"> a decent one another good level</font>

65
00:02:50,780 --> 00:02:55,730
and<font color="#E5E5E5"> see an assembling and all internals</font>

66
00:02:53,930 --> 00:02:59,090
to understand how things actually work

67
00:02:55,730 --> 00:03:00,768
<font color="#E5E5E5">in Python to actually write some code so</font>

68
00:02:59,090 --> 00:03:03,890
I<font color="#E5E5E5"> wasn't even the best developer but I</font>

69
00:03:00,769 --> 00:03:05,510
had some knowledge<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> I read</font>

70
00:03:03,890 --> 00:03:08,059
<font color="#E5E5E5">the C programming language</font><font color="#CCCCCC"> which is a</font>

71
00:03:05,510 --> 00:03:09,739
great book<font color="#E5E5E5"> and will give you all that C</font>

72
00:03:08,060 --> 00:03:12,940
knowledge you need<font color="#CCCCCC"> to know in order to</font>

73
00:03:09,739 --> 00:03:15,620
<font color="#E5E5E5">actually get into vulnerability research</font>

74
00:03:12,940 --> 00:03:17,630
the next<font color="#CCCCCC"> thing I did</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> to expose</font>

75
00:03:15,620 --> 00:03:20,840
myself<font color="#E5E5E5"> to vulnerability research basics</font>

76
00:03:17,630 --> 00:03:22,370
so<font color="#E5E5E5"> I read online about some basic</font>

77
00:03:20,840 --> 00:03:24,769
vulnerabilities like classic<font color="#E5E5E5"> stock</font>

78
00:03:22,370 --> 00:03:27,859
buffer<font color="#E5E5E5"> overflows like integer overflows</font>

79
00:03:24,769 --> 00:03:30,470
and so on and then I try to<font color="#CCCCCC"> practice my</font>

80
00:03:27,859 --> 00:03:32,150
knowledge and that<font color="#E5E5E5"> was through war games</font>

81
00:03:30,470 --> 00:03:34,370
war games are some challenges that<font color="#E5E5E5"> are</font>

82
00:03:32,150 --> 00:03:36,560
offline<font color="#E5E5E5"> and you can try to solve them</font>

83
00:03:34,370 --> 00:03:38,389
there are security related<font color="#E5E5E5"> challenges</font>

84
00:03:36,560 --> 00:03:41,060
like you have to find some vulnerability

85
00:03:38,389 --> 00:03:44,449
and exploit it<font color="#CCCCCC"> so that's what I</font><font color="#E5E5E5"> did next</font>

86
00:03:41,060 --> 00:03:46,040
and at first<font color="#E5E5E5"> I</font><font color="#CCCCCC"> failed like badly but</font>

87
00:03:44,449 --> 00:03:47,840
it's<font color="#CCCCCC"> okay because</font><font color="#E5E5E5"> I've read the</font>

88
00:03:46,040 --> 00:03:49,370
solutions I read the write-ups and I

89
00:03:47,840 --> 00:03:50,930
learned how<font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> approach the</font>

90
00:03:49,370 --> 00:03:53,449
solutions and actually how<font color="#CCCCCC"> to solve them</font>

91
00:03:50,930 --> 00:03:56,510
<font color="#E5E5E5">so it comes with time and it's</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> to</font>

92
00:03:53,449 --> 00:03:59,569
fail because<font color="#CCCCCC"> we all do the next</font><font color="#E5E5E5"> thing I</font>

93
00:03:56,510 --> 00:04:02,660
did<font color="#E5E5E5"> was</font><font color="#CCCCCC"> to expose myself to CD f's</font><font color="#E5E5E5"> now</font>

94
00:03:59,569 --> 00:04:04,940
CTF star<font color="#CCCCCC"> capture-the-flag contests and</font>

95
00:04:02,660 --> 00:04:06,500
<font color="#E5E5E5">they're basically competitions where you</font>

96
00:04:04,940 --> 00:04:08,329
have to solve<font color="#E5E5E5"> some challenges and</font>

97
00:04:06,500 --> 00:04:10,099
compete against other<font color="#CCCCCC"> teams this is a</font>

98
00:04:08,329 --> 00:04:12,859
team effort<font color="#CCCCCC"> and you play with other</font>

99
00:04:10,099 --> 00:04:15,560
<font color="#E5E5E5">players your friends and this is how I</font>

100
00:04:12,859 --> 00:04:17,570
<font color="#E5E5E5">met my teammates</font><font color="#CCCCCC"> so we met through CTF</font>

101
00:04:15,560 --> 00:04:20,659
through IRC and we<font color="#CCCCCC"> played</font><font color="#E5E5E5"> together</font><font color="#CCCCCC"> and</font>

102
00:04:17,570 --> 00:04:23,060
sometimes<font color="#CCCCCC"> we fail like miserably</font><font color="#E5E5E5"> but</font>

103
00:04:20,659 --> 00:04:25,360
sometimes we<font color="#CCCCCC"> actually do well and we got</font>

104
00:04:23,060 --> 00:04:26,740
to qualify<font color="#CCCCCC"> to some finals</font>

105
00:04:25,360 --> 00:04:28,300
and we actually got to<font color="#E5E5E5"> travel the</font><font color="#CCCCCC"> world</font>

106
00:04:26,740 --> 00:04:30,699
because when you qualified<font color="#E5E5E5"> to finals</font>

107
00:04:28,300 --> 00:04:33,060
they sometimes pay for the trip<font color="#CCCCCC"> so we</font>

108
00:04:30,699 --> 00:04:36,789
actually<font color="#E5E5E5"> got to see some cool places and</font>

109
00:04:33,060 --> 00:04:38,770
<font color="#E5E5E5">yeah that was awesome and I actually</font>

110
00:04:36,789 --> 00:04:43,750
think<font color="#E5E5E5"> city</font><font color="#CCCCCC"> apps</font><font color="#E5E5E5"> are a great way to get</font>

111
00:04:38,770 --> 00:04:46,419
into<font color="#E5E5E5"> security so next</font><font color="#CCCCCC"> thing I did</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> I</font>

112
00:04:43,750 --> 00:04:48,009
dove into the deep<font color="#CCCCCC"> waters</font><font color="#E5E5E5"> so once you</font>

113
00:04:46,419 --> 00:04:49,599
know<font color="#CCCCCC"> the basics it's important to not</font>

114
00:04:48,009 --> 00:04:52,539
stay there<font color="#E5E5E5"> for too long you have to</font>

115
00:04:49,599 --> 00:04:54,729
expose yourself<font color="#CCCCCC"> to harder things I try I</font>

116
00:04:52,539 --> 00:04:57,099
was afraid<font color="#CCCCCC"> to see and try to solve</font><font color="#E5E5E5"> the</font>

117
00:04:54,729 --> 00:04:59,770
harder challenges at first but with time

118
00:04:57,099 --> 00:05:02,378
I managed<font color="#E5E5E5"> to understand that</font><font color="#CCCCCC"> nothing too</font>

119
00:04:59,770 --> 00:05:04,180
bad would happen<font color="#CCCCCC"> even if I fail</font><font color="#E5E5E5"> so I try</font>

120
00:05:02,379 --> 00:05:06,550
to solve<font color="#CCCCCC"> challenges and I failed but</font>

121
00:05:04,180 --> 00:05:08,500
with time<font color="#E5E5E5"> I managed to pick up the</font>

122
00:05:06,550 --> 00:05:11,199
tricks<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the ways</font><font color="#E5E5E5"> to solve to solve</font>

123
00:05:08,500 --> 00:05:12,939
<font color="#E5E5E5">the harder challenges and I think</font><font color="#CCCCCC"> this</font>

124
00:05:11,199 --> 00:05:15,009
is<font color="#CCCCCC"> very important to</font><font color="#E5E5E5"> not be afraid to</font>

125
00:05:12,939 --> 00:05:17,110
solve things<font color="#E5E5E5"> because even if you fail</font>

126
00:05:15,009 --> 00:05:18,849
you learn from others<font color="#E5E5E5"> other people's</font>

127
00:05:17,110 --> 00:05:22,569
solutions and it's fine it's totally

128
00:05:18,849 --> 00:05:24,669
<font color="#CCCCCC">okay a great tweet by Life overflow</font>

129
00:05:22,569 --> 00:05:26,379
which also should<font color="#CCCCCC"> be</font><font color="#E5E5E5"> in the audience or</font>

130
00:05:24,669 --> 00:05:28,930
in the top in the conference and

131
00:05:26,379 --> 00:05:31,389
<font color="#E5E5E5">basically says what I really believe</font><font color="#CCCCCC"> in</font>

132
00:05:28,930 --> 00:05:33,490
which is<font color="#E5E5E5"> move away</font><font color="#CCCCCC"> from the basics as</font>

133
00:05:31,389 --> 00:05:35,050
soon as possible<font color="#E5E5E5"> and expose yourself</font><font color="#CCCCCC"> to</font>

134
00:05:33,490 --> 00:05:37,360
harder things which we don't understand

135
00:05:35,050 --> 00:05:38,830
<font color="#E5E5E5">this will make you understand things</font>

136
00:05:37,360 --> 00:05:42,370
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you thought you</font><font color="#E5E5E5"> understood but you</font>

137
00:05:38,830 --> 00:05:43,930
actually<font color="#CCCCCC"> didn't and</font><font color="#E5E5E5"> also it's important</font>

138
00:05:42,370 --> 00:05:45,339
<font color="#E5E5E5">to learn</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> resources this</font>

139
00:05:43,930 --> 00:05:48,159
way you learn different<font color="#E5E5E5"> tricks and</font>

140
00:05:45,339 --> 00:05:49,659
different<font color="#CCCCCC"> ways</font><font color="#E5E5E5"> to approach problem</font>

141
00:05:48,159 --> 00:05:53,229
<font color="#CCCCCC">solving and</font><font color="#E5E5E5"> it's very important in my</font>

142
00:05:49,659 --> 00:05:55,000
<font color="#CCCCCC">opinion so yeah</font><font color="#E5E5E5"> life water flows also</font>

143
00:05:53,229 --> 00:05:57,039
has a great<font color="#CCCCCC"> youtube channel which</font><font color="#E5E5E5"> I also</font>

144
00:05:55,000 --> 00:05:59,289
watch and he talks about vulnerability

145
00:05:57,039 --> 00:06:02,469
and security research and I really

146
00:05:59,289 --> 00:06:05,620
<font color="#CCCCCC">recommend</font><font color="#E5E5E5"> watching his videos as well</font><font color="#CCCCCC"> so</font>

147
00:06:02,469 --> 00:06:09,279
after<font color="#CCCCCC"> I had some knowledge and</font><font color="#E5E5E5"> pumping</font>

148
00:06:05,620 --> 00:06:11,020
<font color="#E5E5E5">like CTF sand war games I practiced</font><font color="#CCCCCC"> and</font>

149
00:06:09,279 --> 00:06:12,879
<font color="#CCCCCC">I practiced a lot</font><font color="#E5E5E5"> so it's really</font>

150
00:06:11,020 --> 00:06:15,008
important<font color="#E5E5E5"> to practice and solve</font>

151
00:06:12,879 --> 00:06:18,939
challenges on your own because<font color="#CCCCCC"> this way</font>

152
00:06:15,009 --> 00:06:20,529
you actually<font color="#E5E5E5"> get to pick up those tricks</font>

153
00:06:18,939 --> 00:06:22,240
that<font color="#CCCCCC"> you have to understand in</font><font color="#E5E5E5"> order to</font>

154
00:06:20,529 --> 00:06:24,039
<font color="#E5E5E5">solve some challenges so some</font>

155
00:06:22,240 --> 00:06:26,589
vulnerabilities have<font color="#E5E5E5"> patterns in them</font>

156
00:06:24,039 --> 00:06:28,900
and the way<font color="#CCCCCC"> you catch on those patterns</font>

157
00:06:26,589 --> 00:06:31,719
is by seeing<font color="#E5E5E5"> them quite a few</font><font color="#CCCCCC"> times and</font>

158
00:06:28,900 --> 00:06:34,280
a great way to do<font color="#E5E5E5"> that and to pick that</font>

159
00:06:31,719 --> 00:06:37,010
up is by solving<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> challenges</font>

160
00:06:34,280 --> 00:06:39,289
um this is where also<font color="#E5E5E5"> expose myself to</font>

161
00:06:37,010 --> 00:06:41,570
actual<font color="#CCCCCC"> real world vulnerabilities I did</font>

162
00:06:39,290 --> 00:06:43,790
that through like<font color="#E5E5E5"> a lot of websites</font>

163
00:06:41,570 --> 00:06:45,440
<font color="#E5E5E5">there's the project zero bug tracker</font>

164
00:06:43,790 --> 00:06:48,050
which you have you can read the

165
00:06:45,440 --> 00:06:51,080
vulnerabilities<font color="#CCCCCC"> and about</font><font color="#E5E5E5"> exploits and</font>

166
00:06:48,050 --> 00:06:52,430
and all and so on so did this is where<font color="#E5E5E5"> I</font>

167
00:06:51,080 --> 00:06:54,830
also<font color="#E5E5E5"> explore myself to</font><font color="#CCCCCC"> real world</font>

168
00:06:52,430 --> 00:06:57,220
vulnerabilities<font color="#E5E5E5"> and I also realized that</font>

169
00:06:54,830 --> 00:06:59,810
there<font color="#CCCCCC"> is a great</font><font color="#E5E5E5"> connection between</font>

170
00:06:57,220 --> 00:07:02,450
vulnerabilities<font color="#E5E5E5"> in CTF</font><font color="#CCCCCC"> and in real world</font>

171
00:06:59,810 --> 00:07:05,960
so vulnerabilities are essentially<font color="#CCCCCC"> bugs</font>

172
00:07:02,450 --> 00:07:10,070
<font color="#E5E5E5">and they exist both in CTFs and in real</font>

173
00:07:05,960 --> 00:07:12,739
<font color="#E5E5E5">life and the main problem</font><font color="#CCCCCC"> that you think</font>

174
00:07:10,070 --> 00:07:14,810
you have<font color="#E5E5E5"> when you actually try to do</font>

175
00:07:12,740 --> 00:07:16,940
<font color="#CCCCCC">real-world research is</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> think</font>

176
00:07:14,810 --> 00:07:19,010
that<font color="#E5E5E5"> the code base</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> huge and stuff</font>

177
00:07:16,940 --> 00:07:21,020
<font color="#E5E5E5">like that but even</font><font color="#CCCCCC"> if the code</font><font color="#E5E5E5"> base is</font>

178
00:07:19,010 --> 00:07:23,210
<font color="#E5E5E5">your bugs are</font><font color="#CCCCCC"> still out there so don't</font>

179
00:07:21,020 --> 00:07:25,430
be afraid<font color="#E5E5E5"> to look at it because the odds</font>

180
00:07:23,210 --> 00:07:26,570
of vulnerability is running out just

181
00:07:25,430 --> 00:07:29,360
when you're<font color="#E5E5E5"> starting to look at</font>

182
00:07:26,570 --> 00:07:31,909
<font color="#CCCCCC">something are very low</font><font color="#E5E5E5"> so you can start</font>

183
00:07:29,360 --> 00:07:33,680
to try and solve things and by<font color="#E5E5E5"> solving</font>

184
00:07:31,910 --> 00:07:36,860
things I mean looking at<font color="#E5E5E5"> actual code</font>

185
00:07:33,680 --> 00:07:38,780
bases after doing some<font color="#CCCCCC"> practice I</font>

186
00:07:36,860 --> 00:07:41,419
realized that how do we<font color="#E5E5E5"> find</font>

187
00:07:38,780 --> 00:07:44,510
<font color="#CCCCCC">vulnerabilities</font><font color="#E5E5E5"> and once we</font><font color="#CCCCCC"> actually</font>

188
00:07:41,419 --> 00:07:46,219
start and repeat<font color="#E5E5E5"> the process of solving</font>

189
00:07:44,510 --> 00:07:48,110
challenges and practicing we noticed

190
00:07:46,220 --> 00:07:50,150
<font color="#CCCCCC">that vulnerability</font><font color="#E5E5E5"> research is about</font>

191
00:07:48,110 --> 00:07:52,760
<font color="#E5E5E5">identifying bugs and we do that by</font>

192
00:07:50,150 --> 00:07:54,950
looking<font color="#CCCCCC"> at code so looking at code is</font>

193
00:07:52,760 --> 00:07:56,450
essentially understanding the<font color="#E5E5E5"> code and</font>

194
00:07:54,950 --> 00:07:58,010
we have to find<font color="#E5E5E5"> vulnerabilities in it</font>

195
00:07:56,450 --> 00:08:01,400
right<font color="#E5E5E5"> because we want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> find them and</font>

196
00:07:58,010 --> 00:08:03,229
that's through actually auditing the

197
00:08:01,400 --> 00:08:05,260
code and<font color="#E5E5E5"> that comes with practice so</font>

198
00:08:03,229 --> 00:08:08,090
practice is<font color="#E5E5E5"> really important in</font>

199
00:08:05,260 --> 00:08:09,800
vulnerability research and once we must

200
00:08:08,090 --> 00:08:11,929
we master that even though I'm not a

201
00:08:09,800 --> 00:08:15,850
master<font color="#E5E5E5"> and I'm not near they were that I</font>

202
00:08:11,930 --> 00:08:17,810
still<font color="#E5E5E5"> think</font><font color="#CCCCCC"> that practice is important</font>

203
00:08:15,850 --> 00:08:19,930
<font color="#E5E5E5">so how do we actually fund from the</font>

204
00:08:17,810 --> 00:08:21,770
abilities<font color="#E5E5E5"> so after as I said before</font>

205
00:08:19,930 --> 00:08:23,390
vulnerabilities<font color="#CCCCCC"> have patterns in them</font>

206
00:08:21,770 --> 00:08:26,780
and patterns are something that you

207
00:08:23,390 --> 00:08:28,370
<font color="#E5E5E5">catch up with time and we might I wasn't</font>

208
00:08:26,780 --> 00:08:30,590
doing that for so long<font color="#E5E5E5"> I'm doing it just</font>

209
00:08:28,370 --> 00:08:32,690
for<font color="#E5E5E5"> years so how did I catch it up that</font>

210
00:08:30,590 --> 00:08:34,939
was<font color="#E5E5E5"> basically through a practice</font><font color="#CCCCCC"> as I</font>

211
00:08:32,690 --> 00:08:36,560
said before practice can<font color="#CCCCCC"> be taken cover</font>

212
00:08:34,940 --> 00:08:37,159
<font color="#CCCCCC">at</font><font color="#E5E5E5"> the time that you're</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> doing that</font>

213
00:08:36,559 --> 00:08:39,919
<font color="#CCCCCC">for so long</font>

214
00:08:37,159 --> 00:08:41,659
<font color="#E5E5E5">so I</font><font color="#CCCCCC"> net I manage to notice that couple</font>

215
00:08:39,919 --> 00:08:44,000
abilities have patterns in them<font color="#E5E5E5"> for</font>

216
00:08:41,659 --> 00:08:47,060
example programming errors like integer

217
00:08:44,000 --> 00:08:47,990
overflows and and<font color="#CCCCCC"> sickness issue that</font>

218
00:08:47,060 --> 00:08:49,939
these are bugs

219
00:08:47,990 --> 00:08:52,430
actually<font color="#E5E5E5"> exists because people</font><font color="#CCCCCC"> make</font>

220
00:08:49,940 --> 00:08:54,800
mistakes and<font color="#E5E5E5"> we're all humans and humans</font>

221
00:08:52,430 --> 00:08:56,810
<font color="#CCCCCC">make mistakes</font><font color="#E5E5E5"> we're not perfect</font><font color="#CCCCCC"> a great</font>

222
00:08:54,800 --> 00:08:59,449
<font color="#CCCCCC">example for such mistake</font><font color="#E5E5E5"> is the</font>

223
00:08:56,810 --> 00:09:02,540
following code<font color="#E5E5E5"> so on the third line</font><font color="#CCCCCC"> we</font>

224
00:08:59,450 --> 00:09:05,029
<font color="#E5E5E5">have an integer overflow which a lot of</font>

225
00:09:02,540 --> 00:09:06,800
<font color="#E5E5E5">developers know and know about existence</font>

226
00:09:05,029 --> 00:09:09,200
<font color="#E5E5E5">of this vulnerability</font><font color="#CCCCCC"> yet they</font><font color="#E5E5E5"> still</font>

227
00:09:06,800 --> 00:09:10,699
make this mistake<font color="#E5E5E5"> it's it's I said</font>

228
00:09:09,200 --> 00:09:13,330
before it's<font color="#E5E5E5"> about it's because we are</font>

229
00:09:10,700 --> 00:09:16,279
all humans and<font color="#E5E5E5"> human make mistakes so</font>

230
00:09:13,330 --> 00:09:17,930
don't be afraid<font color="#E5E5E5"> to look at actual code</font>

231
00:09:16,279 --> 00:09:20,990
bases because<font color="#E5E5E5"> these discounted bugs</font>

232
00:09:17,930 --> 00:09:23,599
<font color="#CCCCCC">actually exist in actual code bases</font><font color="#E5E5E5"> not</font>

233
00:09:20,990 --> 00:09:26,720
<font color="#E5E5E5">only in city</font><font color="#CCCCCC"> F's</font><font color="#E5E5E5"> so don't be afraid to</font>

234
00:09:23,600 --> 00:09:29,800
look<font color="#E5E5E5"> at actual vulnerabilities</font><font color="#CCCCCC"> you can</font>

235
00:09:26,720 --> 00:09:32,140
find simple ones as well

236
00:09:29,800 --> 00:09:35,149
so<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a great difference between</font>

237
00:09:32,140 --> 00:09:37,250
CTFs and<font color="#E5E5E5"> real-world vulnerabilities in</font>

238
00:09:35,149 --> 00:09:38,959
<font color="#E5E5E5">CTF usually when you find</font><font color="#CCCCCC"> the</font>

239
00:09:37,250 --> 00:09:40,279
vulnerability<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> what you need to</font>

240
00:09:38,959 --> 00:09:41,660
do with it<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> you have to</font>

241
00:09:40,279 --> 00:09:44,300
progress<font color="#CCCCCC"> with it you know</font><font color="#E5E5E5"> what you need</font>

242
00:09:41,660 --> 00:09:46,250
to have what you<font color="#E5E5E5"> need to exploit how you</font>

243
00:09:44,300 --> 00:09:47,810
need to exploit it<font color="#E5E5E5"> so sometimes</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have</font>

244
00:09:46,250 --> 00:09:49,850
a stock<font color="#E5E5E5"> buffer overflow so you need to</font>

245
00:09:47,810 --> 00:09:51,800
override some variable the return

246
00:09:49,850 --> 00:09:55,010
address or<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can override a function</font>

247
00:09:51,800 --> 00:09:56,689
<font color="#E5E5E5">pointer there you mostly when you see a</font>

248
00:09:55,010 --> 00:09:59,000
vulnerability in CTF you know what you

249
00:09:56,690 --> 00:10:01,820
need to do with<font color="#CCCCCC"> it</font><font color="#E5E5E5"> in real</font><font color="#CCCCCC"> world you</font>

250
00:09:59,000 --> 00:10:03,800
usually have a set of weird<font color="#CCCCCC"> states a set</font>

251
00:10:01,820 --> 00:10:06,410
of primitives that<font color="#E5E5E5"> you have primitives</font>

252
00:10:03,800 --> 00:10:09,020
are essentially capabilities we have<font color="#CCCCCC"> as</font>

253
00:10:06,410 --> 00:10:11,120
attackers<font color="#E5E5E5"> so you usually have some</font>

254
00:10:09,020 --> 00:10:13,430
primitives<font color="#CCCCCC"> that we can chain together to</font>

255
00:10:11,120 --> 00:10:16,550
do something greater and<font color="#CCCCCC"> that can later</font>

256
00:10:13,430 --> 00:10:17,839
lead to<font color="#E5E5E5"> vulnerability and</font><font color="#CCCCCC"> a such example</font>

257
00:10:16,550 --> 00:10:20,029
<font color="#E5E5E5">of that will</font><font color="#CCCCCC"> be the vulnerability I</font>

258
00:10:17,839 --> 00:10:21,740
found in chakra which is basically a

259
00:10:20,029 --> 00:10:25,120
<font color="#E5E5E5">bunch of primitives together</font><font color="#CCCCCC"> chained</font>

260
00:10:21,740 --> 00:10:27,800
together to make an actual vulnerability

261
00:10:25,120 --> 00:10:30,279
so this is basically<font color="#E5E5E5"> everything I knew</font>

262
00:10:27,800 --> 00:10:32,300
about vulnerability research and

263
00:10:30,279 --> 00:10:34,480
security research before I started

264
00:10:32,300 --> 00:10:38,180
looking in chakra

265
00:10:34,480 --> 00:10:40,760
so yeah let's dive into some<font color="#E5E5E5"> JavaScript</font>

266
00:10:38,180 --> 00:10:42,670
<font color="#E5E5E5">so</font><font color="#CCCCCC"> javascript engines I didn't say I</font>

267
00:10:40,760 --> 00:10:45,020
learned<font color="#E5E5E5"> JavaScript because</font><font color="#CCCCCC"> I didn't and</font>

268
00:10:42,670 --> 00:10:47,500
<font color="#CCCCCC">JavaScript is a very readable language</font>

269
00:10:45,020 --> 00:10:49,699
<font color="#CCCCCC">it's so once you have learned a few</font>

270
00:10:47,500 --> 00:10:52,100
<font color="#E5E5E5">programming languages reading JavaScript</font>

271
00:10:49,700 --> 00:10:54,620
would probably be more smooth<font color="#CCCCCC"> and more</font>

272
00:10:52,100 --> 00:10:55,490
smooth<font color="#CCCCCC"> process</font><font color="#E5E5E5"> so doing that would not</font>

273
00:10:54,620 --> 00:10:58,459
be too hard

274
00:10:55,490 --> 00:11:00,829
now<font color="#E5E5E5"> jet engines are basically what's</font>

275
00:10:58,459 --> 00:11:01,449
capable<font color="#E5E5E5"> of running the code that you</font>

276
00:11:00,829 --> 00:11:04,599
<font color="#E5E5E5">write as a</font>

277
00:11:01,450 --> 00:11:07,870
developer<font color="#CCCCCC"> they have a lot of parts</font><font color="#E5E5E5"> to</font>

278
00:11:04,600 --> 00:11:10,330
them and then one the most important one

279
00:11:07,870 --> 00:11:12,820
<font color="#CCCCCC">for us</font><font color="#E5E5E5"> is the JIT compiler now JIT</font>

280
00:11:10,330 --> 00:11:14,860
stands for just-in-time compiler what it

281
00:11:12,820 --> 00:11:16,870
essentially does<font color="#E5E5E5"> is when some function</font>

282
00:11:14,860 --> 00:11:19,690
gets hot<font color="#E5E5E5"> and it's being called a lot of</font>

283
00:11:16,870 --> 00:11:22,120
<font color="#E5E5E5">times it compiles this function to</font>

284
00:11:19,690 --> 00:11:25,930
machine code<font color="#E5E5E5"> to improve performance</font>

285
00:11:22,120 --> 00:11:28,390
now<font color="#CCCCCC"> this compilation is this job this</font>

286
00:11:25,930 --> 00:11:31,150
JIT compiler is also<font color="#E5E5E5"> incapable</font><font color="#CCCCCC"> or is</font>

287
00:11:28,390 --> 00:11:33,340
also<font color="#E5E5E5"> responsible off doing optimizations</font>

288
00:11:31,150 --> 00:11:35,319
for<font color="#CCCCCC"> the code it it</font><font color="#E5E5E5"> has a lot</font><font color="#CCCCCC"> of</font>

289
00:11:33,340 --> 00:11:37,410
assumptions<font color="#CCCCCC"> about the code and doesn't</font>

290
00:11:35,320 --> 00:11:40,750
want assumptions to be broken

291
00:11:37,410 --> 00:11:42,400
<font color="#CCCCCC">so we'll see just how that</font><font color="#E5E5E5"> works later</font>

292
00:11:40,750 --> 00:11:45,070
and about<font color="#E5E5E5"> about JIT compiler</font>

293
00:11:42,400 --> 00:11:47,920
vulnerabilities so about<font color="#E5E5E5"> JavaScript</font>

294
00:11:45,070 --> 00:11:50,920
basics<font color="#E5E5E5"> so Java C is a dynamically typed</font>

295
00:11:47,920 --> 00:11:52,750
language and it's<font color="#CCCCCC"> totally</font><font color="#E5E5E5"> readable you</font>

296
00:11:50,920 --> 00:11:54,069
can make arrays in different ways you

297
00:11:52,750 --> 00:11:57,040
have you can<font color="#CCCCCC"> have a race with</font><font color="#E5E5E5"> different</font>

298
00:11:54,070 --> 00:12:00,700
types of<font color="#CCCCCC"> elements and you can have</font>

299
00:11:57,040 --> 00:12:03,339
console logs you actually print<font color="#E5E5E5"> stuff so</font>

300
00:12:00,700 --> 00:12:06,790
<font color="#E5E5E5">JavaScript</font><font color="#CCCCCC"> has prototypes</font><font color="#E5E5E5"> prototypes</font><font color="#CCCCCC"> are</font>

301
00:12:03,340 --> 00:12:08,740
essentially something<font color="#E5E5E5"> that you can in</font>

302
00:12:06,790 --> 00:12:11,079
some way you can inherit features from

303
00:12:08,740 --> 00:12:12,640
<font color="#E5E5E5">other objects so for example in our case</font>

304
00:12:11,080 --> 00:12:15,550
we have a parent object<font color="#CCCCCC"> and a child</font>

305
00:12:12,640 --> 00:12:17,080
object<font color="#CCCCCC"> so the child object</font><font color="#E5E5E5"> if if if it</font>

306
00:12:15,550 --> 00:12:19,180
the<font color="#CCCCCC"> prototype</font><font color="#E5E5E5"> of it is the parent object</font>

307
00:12:17,080 --> 00:12:23,830
<font color="#E5E5E5">then it will inherit some features in</font>

308
00:12:19,180 --> 00:12:25,959
<font color="#CCCCCC">this case</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> properties</font><font color="#E5E5E5"> x and y so this</font>

309
00:12:23,830 --> 00:12:27,910
actually<font color="#CCCCCC"> is very</font><font color="#E5E5E5"> fairly important to us</font>

310
00:12:25,960 --> 00:12:30,520
in<font color="#E5E5E5"> the exploit and the vulnerability I</font>

311
00:12:27,910 --> 00:12:34,110
found and you can<font color="#E5E5E5"> modify the prototype</font>

312
00:12:30,520 --> 00:12:37,750
<font color="#E5E5E5">by accessing the proto the proto</font>

313
00:12:34,110 --> 00:12:40,990
property<font color="#CCCCCC"> javascript also has</font><font color="#E5E5E5"> something</font>

314
00:12:37,750 --> 00:12:43,690
called proxy now proxy is an object<font color="#E5E5E5"> that</font>

315
00:12:40,990 --> 00:12:46,480
can wrap another object and redefine

316
00:12:43,690 --> 00:12:49,390
basic basic operations like getters and

317
00:12:46,480 --> 00:12:52,090
setters<font color="#E5E5E5"> so in our case we</font><font color="#CCCCCC"> redefined</font><font color="#E5E5E5"> the</font>

318
00:12:49,390 --> 00:12:54,790
<font color="#CCCCCC">getter</font><font color="#E5E5E5"> so we really find together in</font>

319
00:12:52,090 --> 00:12:58,000
which we're supposed to get X to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> 1 3</font>

320
00:12:54,790 --> 00:13:00,430
3<font color="#CCCCCC"> 7</font><font color="#E5E5E5"> but due to the fact that the proxy</font>

321
00:12:58,000 --> 00:13:01,960
redefines the<font color="#E5E5E5"> behavior what happens is</font>

322
00:13:00,430 --> 00:13:02,380
the getter handler is actually being

323
00:13:01,960 --> 00:13:04,570
<font color="#E5E5E5">called</font>

324
00:13:02,380 --> 00:13:07,570
so we<font color="#CCCCCC"> redefine the basic the</font><font color="#E5E5E5"> basic</font>

325
00:13:04,570 --> 00:13:10,270
operation of together<font color="#E5E5E5"> and in this way we</font>

326
00:13:07,570 --> 00:13:13,800
actually<font color="#E5E5E5"> tracked a function the</font><font color="#CCCCCC"> function</font>

327
00:13:10,270 --> 00:13:15,520
call to<font color="#CCCCCC"> the getter of this object so</font>

328
00:13:13,800 --> 00:13:18,370
<font color="#CCCCCC">JavaScript has</font><font color="#E5E5E5"> already</font>

329
00:13:15,520 --> 00:13:20,110
as we've seen but<font color="#E5E5E5"> chakra has raised with</font>

330
00:13:18,370 --> 00:13:21,610
types so<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> type we're going to</font>

331
00:13:20,110 --> 00:13:24,790
talk<font color="#CCCCCC"> about is called the javascript</font>

332
00:13:21,610 --> 00:13:27,640
<font color="#E5E5E5">native enter a and it is the way chakra</font>

333
00:13:24,790 --> 00:13:30,069
calls<font color="#E5E5E5"> integer</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> basically it's an array</font>

334
00:13:27,640 --> 00:13:33,069
<font color="#CCCCCC">that stores integer which</font><font color="#E5E5E5"> are which are</font>

335
00:13:30,070 --> 00:13:35,620
<font color="#CCCCCC">four bytes per</font><font color="#E5E5E5"> element and they're</font>

336
00:13:33,070 --> 00:13:37,240
basically<font color="#E5E5E5"> integers</font><font color="#CCCCCC"> Java</font><font color="#E5E5E5"> C also has an</font>

337
00:13:35,620 --> 00:13:40,000
<font color="#E5E5E5">eggy float array which</font><font color="#CCCCCC"> is essentially</font>

338
00:13:37,240 --> 00:13:41,920
floats<font color="#CCCCCC"> and</font><font color="#E5E5E5"> unlike this</font><font color="#CCCCCC"> C definition for</font>

339
00:13:40,000 --> 00:13:44,500
float this this float<font color="#CCCCCC"> is actually eight</font>

340
00:13:41,920 --> 00:13:46,780
bytes<font color="#E5E5E5"> and they store floats and</font><font color="#CCCCCC"> they're</font>

341
00:13:44,500 --> 00:13:49,330
<font color="#CCCCCC">eight by pail</font><font color="#E5E5E5"> elements and we have</font>

342
00:13:46,780 --> 00:13:51,449
JavaScript arrays which are<font color="#E5E5E5"> object they</font>

343
00:13:49,330 --> 00:13:55,510
store objects essentially pointers and

344
00:13:51,450 --> 00:13:58,600
they are also<font color="#E5E5E5"> eight bytes per element</font><font color="#CCCCCC"> so</font>

345
00:13:55,510 --> 00:14:00,880
let's see about<font color="#CCCCCC"> about how we can convert</font>

346
00:13:58,600 --> 00:14:04,060
<font color="#E5E5E5">between the types so if</font><font color="#CCCCCC"> we start off</font>

347
00:14:00,880 --> 00:14:05,050
<font color="#E5E5E5">with an array of integers</font><font color="#CCCCCC"> and we</font><font color="#E5E5E5"> add a</font>

348
00:14:04,060 --> 00:14:07,270
flow to<font color="#CCCCCC"> it</font>

349
00:14:05,050 --> 00:14:10,270
what happens is we convert the array to

350
00:14:07,270 --> 00:14:11,949
a folder<font color="#E5E5E5"> and if we add a object to it</font>

351
00:14:10,270 --> 00:14:14,470
the conversion that<font color="#E5E5E5"> takes place is a</font>

352
00:14:11,950 --> 00:14:17,260
conversion<font color="#E5E5E5"> to a JavaScript array if you</font>

353
00:14:14,470 --> 00:14:21,250
have both<font color="#E5E5E5"> floats and integers the</font>

354
00:14:17,260 --> 00:14:24,580
outcome is a float array so if we have

355
00:14:21,250 --> 00:14:26,620
both<font color="#E5E5E5"> floats and integers and some sort</font>

356
00:14:24,580 --> 00:14:28,240
and objects and mixed array what happens

357
00:14:26,620 --> 00:14:31,120
is this array<font color="#E5E5E5"> is considered to be</font><font color="#CCCCCC"> a</font>

358
00:14:28,240 --> 00:14:33,280
JavaScript<font color="#CCCCCC"> array and the most weird</font>

359
00:14:31,120 --> 00:14:35,350
conversion that takes place is this one

360
00:14:33,280 --> 00:14:36,910
and you usually<font color="#E5E5E5"> don't see this when you</font>

361
00:14:35,350 --> 00:14:39,160
see about conversions in JavaScript

362
00:14:36,910 --> 00:14:42,430
engines but this is very<font color="#CCCCCC"> crucial for our</font>

363
00:14:39,160 --> 00:14:44,560
talk<font color="#E5E5E5"> so when you have two arrays and you</font>

364
00:14:42,430 --> 00:14:47,439
assign one<font color="#CCCCCC"> of them to</font><font color="#E5E5E5"> be the prototype</font>

365
00:14:44,560 --> 00:14:49,300
<font color="#CCCCCC">of another one the prototype one is</font>

366
00:14:47,440 --> 00:14:52,060
directly<font color="#E5E5E5"> converted to a JavaScript array</font>

367
00:14:49,300 --> 00:14:54,209
<font color="#E5E5E5">now this is going</font><font color="#CCCCCC"> to be very important</font>

368
00:14:52,060 --> 00:14:56,650
to<font color="#E5E5E5"> us later so</font><font color="#CCCCCC"> keep that in mind and</font>

369
00:14:54,210 --> 00:14:59,200
this<font color="#CCCCCC"> is basically</font><font color="#E5E5E5"> the conversion takes</font>

370
00:14:56,650 --> 00:15:02,650
<font color="#CCCCCC">place</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> when this what right when</font>

371
00:14:59,200 --> 00:15:04,780
the assignment<font color="#E5E5E5"> takes place so let's see</font>

372
00:15:02,650 --> 00:15:06,910
<font color="#CCCCCC">about how array layout actually</font><font color="#E5E5E5"> looks</font>

373
00:15:04,780 --> 00:15:08,589
<font color="#E5E5E5">like in memory so when we have an array</font>

374
00:15:06,910 --> 00:15:11,110
for<font color="#CCCCCC"> example in this</font><font color="#E5E5E5"> case a JavaScript</font>

375
00:15:08,590 --> 00:15:12,940
array<font color="#CCCCCC"> it has some flags which indicates</font>

376
00:15:11,110 --> 00:15:14,230
some some<font color="#E5E5E5"> things about the array and</font>

377
00:15:12,940 --> 00:15:16,450
<font color="#E5E5E5">it's called the very flags we have the</font>

378
00:15:14,230 --> 00:15:18,670
<font color="#E5E5E5">length of the array and we</font><font color="#CCCCCC"> have the head</font>

379
00:15:16,450 --> 00:15:22,090
<font color="#E5E5E5">now a head is a pointer essentially to</font>

380
00:15:18,670 --> 00:15:24,760
an<font color="#E5E5E5"> segment and a segment is a continuous</font>

381
00:15:22,090 --> 00:15:26,770
memory region which has<font color="#E5E5E5"> elements in this</font>

382
00:15:24,760 --> 00:15:28,730
so it<font color="#E5E5E5"> has some of the elements in the</font>

383
00:15:26,770 --> 00:15:31,189
array<font color="#CCCCCC"> and it</font><font color="#E5E5E5"> stores another point</font>

384
00:15:28,730 --> 00:15:33,459
to the next<font color="#E5E5E5"> segment</font><font color="#CCCCCC"> so what</font><font color="#E5E5E5"> what comes</font>

385
00:15:31,190 --> 00:15:35,600
out is essentially<font color="#E5E5E5"> a</font><font color="#CCCCCC"> length list of</font>

386
00:15:33,459 --> 00:15:39,319
segments that<font color="#E5E5E5"> start off with the head</font>

387
00:15:35,600 --> 00:15:40,790
pointer in the<font color="#E5E5E5"> JavaScript array so let's</font>

388
00:15:39,320 --> 00:15:43,730
see how<font color="#CCCCCC"> that actually</font><font color="#E5E5E5"> looks in</font><font color="#CCCCCC"> memories</font>

389
00:15:40,790 --> 00:15:46,040
we have this<font color="#CCCCCC"> simple example we have two</font>

390
00:15:43,730 --> 00:15:48,050
point two two values in this case

391
00:15:46,040 --> 00:15:51,019
integers and we<font color="#CCCCCC"> have an array with two</font>

392
00:15:48,050 --> 00:15:52,969
<font color="#CCCCCC">values so</font><font color="#E5E5E5"> and let's see how it actually</font>

393
00:15:51,019 --> 00:15:55,070
<font color="#E5E5E5">looks</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> in memory so in red we have</font>

394
00:15:52,970 --> 00:15:58,250
the<font color="#E5E5E5"> JavaScript array properties so we</font>

395
00:15:55,070 --> 00:16:01,430
<font color="#CCCCCC">can see the initial array value which is</font>

396
00:15:58,250 --> 00:16:03,829
the array<font color="#E5E5E5"> flags volume and we have in in</font>

397
00:16:01,430 --> 00:16:05,388
green we have<font color="#CCCCCC"> the actual</font><font color="#E5E5E5"> segments so we</font>

398
00:16:03,829 --> 00:16:08,089
can see<font color="#E5E5E5"> the segment has the length and</font>

399
00:16:05,389 --> 00:16:09,980
the size<font color="#E5E5E5"> and in blue we can actually see</font>

400
00:16:08,089 --> 00:16:12,440
the<font color="#E5E5E5"> memory layout of the segment and if</font>

401
00:16:09,980 --> 00:16:15,079
you notice<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the right bottom we have</font>

402
00:16:12,440 --> 00:16:17,839
the two elements we<font color="#E5E5E5"> defined so we</font>

403
00:16:15,079 --> 00:16:21,829
<font color="#CCCCCC">actually can see</font><font color="#E5E5E5"> this in</font><font color="#CCCCCC"> memory</font><font color="#E5E5E5"> and this</font>

404
00:16:17,839 --> 00:16:23,240
<font color="#E5E5E5">is how it looks like so what is the</font>

405
00:16:21,829 --> 00:16:25,880
array flags<font color="#E5E5E5"> that was just talking about</font>

406
00:16:23,240 --> 00:16:28,550
<font color="#E5E5E5">so red flags basically some flags that</font>

407
00:16:25,880 --> 00:16:30,470
indicate some things about the array in

408
00:16:28,550 --> 00:16:33,829
our case it's and<font color="#E5E5E5"> it's defining it as an</font>

409
00:16:30,470 --> 00:16:37,760
enum and the interesting field for us is

410
00:16:33,829 --> 00:16:40,910
there has no missing values<font color="#E5E5E5"> the flag and</font>

411
00:16:37,760 --> 00:16:43,160
so if we for for<font color="#E5E5E5"> those of you who</font>

412
00:16:40,910 --> 00:16:45,560
noticed the the<font color="#CCCCCC"> initial</font><font color="#E5E5E5"> very value that</font>

413
00:16:43,160 --> 00:16:47,959
was defined as our array<font color="#CCCCCC"> flags</font><font color="#E5E5E5"> is</font>

414
00:16:45,560 --> 00:16:50,540
actually composed<font color="#E5E5E5"> of two different</font><font color="#CCCCCC"> flags</font>

415
00:16:47,959 --> 00:16:52,729
<font color="#CCCCCC">it's composed of the array object array</font>

416
00:16:50,540 --> 00:16:56,149
<font color="#E5E5E5">Flags tag and it has no missing values</font>

417
00:16:52,730 --> 00:16:58,310
tag<font color="#CCCCCC"> so the first</font><font color="#E5E5E5"> one is</font><font color="#CCCCCC"> not really</font>

418
00:16:56,149 --> 00:17:00,470
<font color="#E5E5E5">important for our talk so we'll focus on</font>

419
00:16:58,310 --> 00:17:02,689
the second one which basically<font color="#CCCCCC"> means</font>

420
00:17:00,470 --> 00:17:05,929
that<font color="#E5E5E5"> the array doesn't have any holes in</font>

421
00:17:02,690 --> 00:17:08,299
it now what does the hole mean<font color="#E5E5E5"> so we can</font>

422
00:17:05,929 --> 00:17:10,339
create<font color="#E5E5E5"> an array and have some values</font>

423
00:17:08,299 --> 00:17:12,199
between<font color="#CCCCCC"> the like we have before in this</font>

424
00:17:10,339 --> 00:17:15,349
case we have three<font color="#E5E5E5"> elements but the</font>

425
00:17:12,199 --> 00:17:17,510
middle<font color="#E5E5E5"> one is missing so it's important</font>

426
00:17:15,349 --> 00:17:19,399
<font color="#E5E5E5">to say that the values I put there are</font>

427
00:17:17,510 --> 00:17:22,579
the way the way they're represented in

428
00:17:19,400 --> 00:17:24,380
memory<font color="#E5E5E5"> is by those constants and I try I</font>

429
00:17:22,579 --> 00:17:26,899
chose them because<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> be easier</font><font color="#CCCCCC"> for</font>

430
00:17:24,380 --> 00:17:28,220
<font color="#E5E5E5">us to detect to see them to actually</font>

431
00:17:26,900 --> 00:17:31,190
<font color="#E5E5E5">notice them</font><font color="#CCCCCC"> when we see the memory</font>

432
00:17:28,220 --> 00:17:32,809
<font color="#E5E5E5">layout as we've seen before so as you</font>

433
00:17:31,190 --> 00:17:34,910
can<font color="#CCCCCC"> see this one</font><font color="#E5E5E5"> has a hole and the</font>

434
00:17:32,809 --> 00:17:38,710
array<font color="#CCCCCC"> Flags</font><font color="#E5E5E5"> doesn't have there has no</font>

435
00:17:34,910 --> 00:17:40,950
missing values on<font color="#CCCCCC"> which means we have a</font>

436
00:17:38,710 --> 00:17:43,860
hole<font color="#CCCCCC"> in the array</font>

437
00:17:40,950 --> 00:17:46,080
and things actually<font color="#E5E5E5"> make sense but when</font>

438
00:17:43,860 --> 00:17:48,659
we look at<font color="#E5E5E5"> the memory layout we see some</font>

439
00:17:46,080 --> 00:17:51,330
weird thing<font color="#E5E5E5"> so as you can</font><font color="#CCCCCC"> see we have</font>

440
00:17:48,660 --> 00:17:53,280
the dead beef and the<font color="#E5E5E5"> 41 but between</font>

441
00:17:51,330 --> 00:17:57,050
<font color="#E5E5E5">them where the missing value where the</font>

442
00:17:53,280 --> 00:17:59,399
hole was<font color="#E5E5E5"> we have some magic constant now</font>

443
00:17:57,050 --> 00:18:01,800
<font color="#CCCCCC">makes sense that this constant would</font>

444
00:17:59,400 --> 00:18:04,110
represent a missing value<font color="#CCCCCC"> or a hole in</font>

445
00:18:01,800 --> 00:18:08,240
the<font color="#CCCCCC"> array</font><font color="#E5E5E5"> but as we've seen before the</font>

446
00:18:04,110 --> 00:18:08,240
there's already something<font color="#E5E5E5"> that</font>

447
00:18:08,780 --> 00:18:13,440
represents there has no missing<font color="#CCCCCC"> value</font>

448
00:18:10,890 --> 00:18:15,330
<font color="#CCCCCC">slag</font><font color="#E5E5E5"> so we know that there is</font><font color="#CCCCCC"> one way to</font>

449
00:18:13,440 --> 00:18:17,460
indicate<font color="#E5E5E5"> holes in your</font><font color="#CCCCCC"> way and it's</font><font color="#E5E5E5"> the</font>

450
00:18:15,330 --> 00:18:18,810
flag we've seen before<font color="#CCCCCC"> but it seems like</font>

451
00:18:17,460 --> 00:18:20,840
there<font color="#CCCCCC"> is another way to tell if there</font>

452
00:18:18,810 --> 00:18:23,100
<font color="#CCCCCC">was a hole in the</font><font color="#E5E5E5"> dirt hole didn't erase</font>

453
00:18:20,840 --> 00:18:26,490
<font color="#E5E5E5">so that's kind of weird that raises a</font>

454
00:18:23,100 --> 00:18:28,740
lot of questions<font color="#CCCCCC"> we have recently have</font>

455
00:18:26,490 --> 00:18:31,050
here we potentially can have here two

456
00:18:28,740 --> 00:18:33,330
<font color="#E5E5E5">things that indicates should indicate</font>

457
00:18:31,050 --> 00:18:34,800
the same state<font color="#CCCCCC"> we have the flag of the</font>

458
00:18:33,330 --> 00:18:37,290
array<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is there has no missing</font>

459
00:18:34,800 --> 00:18:39,300
values flag and we have the content of

460
00:18:37,290 --> 00:18:45,210
the array<font color="#E5E5E5"> which we've seen before and is</font>

461
00:18:39,300 --> 00:18:47,580
the<font color="#CCCCCC"> FFF constant so if we can what what</font>

462
00:18:45,210 --> 00:18:50,040
happens with if they're if they're like

463
00:18:47,580 --> 00:18:52,679
mismatched<font color="#E5E5E5"> what if what happens when if</font>

464
00:18:50,040 --> 00:18:55,110
<font color="#E5E5E5">we can if we can do that yet</font>

465
00:18:52,680 --> 00:18:57,150
they has<font color="#CCCCCC"> no missing values to be set</font><font color="#E5E5E5"> to</font>

466
00:18:55,110 --> 00:19:00,090
<font color="#CCCCCC">true and therefore says that we don't</font>

467
00:18:57,150 --> 00:19:03,540
<font color="#E5E5E5">have any holes but we actually have a</font>

468
00:19:00,090 --> 00:19:05,610
missing<font color="#CCCCCC"> value in the array</font><font color="#E5E5E5"> also we mix</font>

469
00:19:03,540 --> 00:19:07,649
<font color="#CCCCCC">with some</font><font color="#E5E5E5"> sort of mixed data and</font>

470
00:19:05,610 --> 00:19:09,629
metadata<font color="#E5E5E5"> together because if the</font>

471
00:19:07,650 --> 00:19:11,940
constant is being used in a control flow

472
00:19:09,630 --> 00:19:15,000
<font color="#E5E5E5">that could be that</font><font color="#CCCCCC"> could be interesting</font>

473
00:19:11,940 --> 00:19:17,100
<font color="#CCCCCC">for</font><font color="#E5E5E5"> us see if we can fake it</font><font color="#CCCCCC"> and it</font>

474
00:19:15,000 --> 00:19:19,260
actually<font color="#E5E5E5"> is very interesting and we</font><font color="#CCCCCC"> can</font>

475
00:19:17,100 --> 00:19:21,000
it turns out that we can actually<font color="#E5E5E5"> fake a</font>

476
00:19:19,260 --> 00:19:22,710
missing<font color="#CCCCCC"> value and this was if all</font>

477
00:19:21,000 --> 00:19:24,330
nobility<font color="#CCCCCC"> find by</font><font color="#E5E5E5"> lucky heart and soul in</font>

478
00:19:22,710 --> 00:19:26,640
my<font color="#CCCCCC"> bed and got CVE</font>

479
00:19:24,330 --> 00:19:29,429
for it<font color="#E5E5E5"> so basically</font><font color="#CCCCCC"> what they did</font><font color="#E5E5E5"> is</font>

480
00:19:26,640 --> 00:19:31,740
they<font color="#E5E5E5"> faked</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> missing value</font><font color="#CCCCCC"> by putting</font>

481
00:19:29,430 --> 00:19:35,460
the constant we've just seen before into

482
00:19:31,740 --> 00:19:37,110
a float array so we could<font color="#E5E5E5"> beforehand the</font>

483
00:19:35,460 --> 00:19:38,610
value was not the same one that we've

484
00:19:37,110 --> 00:19:42,090
seen<font color="#CCCCCC"> and it</font><font color="#E5E5E5"> was something that you</font><font color="#CCCCCC"> could</font>

485
00:19:38,610 --> 00:19:44,310
<font color="#CCCCCC">actually represent as a valid float</font>

486
00:19:42,090 --> 00:19:45,750
number so you could actually put<font color="#CCCCCC"> that in</font>

487
00:19:44,310 --> 00:19:48,300
and this<font color="#E5E5E5"> could be turned to a</font>

488
00:19:45,750 --> 00:19:50,610
vulnerability<font color="#E5E5E5"> now this was mitigated in</font>

489
00:19:48,300 --> 00:19:52,290
a few ways<font color="#E5E5E5"> and it the constant changed</font>

490
00:19:50,610 --> 00:19:54,929
<font color="#E5E5E5">so you couldn't represent</font>

491
00:19:52,290 --> 00:19:57,780
as is and what how<font color="#E5E5E5"> also happen is they</font>

492
00:19:54,930 --> 00:20:01,230
added<font color="#CCCCCC"> a few more checks to</font><font color="#E5E5E5"> harden to</font>

493
00:19:57,780 --> 00:20:04,320
<font color="#E5E5E5">harden things so we'll talk about how</font>

494
00:20:01,230 --> 00:20:06,210
this<font color="#E5E5E5"> can be turned into it this weird</font>

495
00:20:04,320 --> 00:20:07,679
state can be turned into vulnerability

496
00:20:06,210 --> 00:20:11,550
and we care and<font color="#E5E5E5"> how we can actually</font>

497
00:20:07,680 --> 00:20:13,110
exploit it<font color="#CCCCCC"> but before that we actually</font>

498
00:20:11,550 --> 00:20:16,260
want to talk<font color="#E5E5E5"> about something</font><font color="#CCCCCC"> interesting</font>

499
00:20:13,110 --> 00:20:17,850
so as I<font color="#E5E5E5"> just said the the exploit</font><font color="#CCCCCC"> the</font>

500
00:20:16,260 --> 00:20:20,070
<font color="#CCCCCC">vote the vulnerability so</font><font color="#E5E5E5"> my bad and</font>

501
00:20:17,850 --> 00:20:23,550
long<font color="#E5E5E5"> here I found was in native</font><font color="#CCCCCC"> float</font>

502
00:20:20,070 --> 00:20:26,460
<font color="#CCCCCC">array so apparently JavaScript arrays</font>

503
00:20:23,550 --> 00:20:28,530
<font color="#CCCCCC">don't store floats</font><font color="#E5E5E5"> as native as actual</font>

504
00:20:26,460 --> 00:20:32,040
floats<font color="#E5E5E5"> they first do something called</font>

505
00:20:28,530 --> 00:20:34,290
boxing<font color="#E5E5E5"> so they first XOR these values</font>

506
00:20:32,040 --> 00:20:36,180
with this constant<font color="#E5E5E5"> you can see here</font><font color="#CCCCCC"> so</font>

507
00:20:34,290 --> 00:20:39,149
before<font color="#E5E5E5"> you put the float into</font><font color="#CCCCCC"> the array</font>

508
00:20:36,180 --> 00:20:41,490
<font color="#CCCCCC">this value</font><font color="#E5E5E5"> is being XOR with the flows</font>

509
00:20:39,150 --> 00:20:43,530
you're trying to put in so the questions

510
00:20:41,490 --> 00:20:45,120
<font color="#E5E5E5">that comes up</font><font color="#CCCCCC"> next is whether we</font><font color="#E5E5E5"> can</font>

511
00:20:43,530 --> 00:20:48,030
actually have missing values in

512
00:20:45,120 --> 00:20:50,310
<font color="#CCCCCC">javascript array</font><font color="#E5E5E5"> and if so does the</font>

513
00:20:48,030 --> 00:20:52,770
constant change because as we see here

514
00:20:50,310 --> 00:20:55,050
<font color="#E5E5E5">we change the way we represent values</font>

515
00:20:52,770 --> 00:20:58,290
and therefore<font color="#E5E5E5"> we can represent new</font>

516
00:20:55,050 --> 00:21:01,260
values so theoretically we<font color="#CCCCCC"> should</font><font color="#E5E5E5"> be</font>

517
00:20:58,290 --> 00:21:03,450
able<font color="#CCCCCC"> that eclis the engine should change</font>

518
00:21:01,260 --> 00:21:05,430
the constant<font color="#CCCCCC"> otherwise we could</font>

519
00:21:03,450 --> 00:21:08,850
potentially get there and actually

520
00:21:05,430 --> 00:21:11,730
represent it and it turns<font color="#E5E5E5"> out that the</font>

521
00:21:08,850 --> 00:21:13,350
constant does not<font color="#E5E5E5"> change therefore we</font>

522
00:21:11,730 --> 00:21:16,310
can<font color="#CCCCCC"> actually represent it by</font><font color="#E5E5E5"> first</font>

523
00:21:13,350 --> 00:21:20,580
boxing it<font color="#E5E5E5"> so what we did is we first</font>

524
00:21:16,310 --> 00:21:24,270
boxed it and<font color="#CCCCCC"> sort the constant with the</font>

525
00:21:20,580 --> 00:21:26,850
FFF we've just seen here<font color="#E5E5E5"> so that that</font>

526
00:21:24,270 --> 00:21:29,610
<font color="#E5E5E5">that in turn gives us the ability to</font>

527
00:21:26,850 --> 00:21:32,159
<font color="#E5E5E5">have the constant as the</font><font color="#CCCCCC"> original</font>

528
00:21:29,610 --> 00:21:34,590
constant value while you're wondering

529
00:21:32,160 --> 00:21:37,470
<font color="#E5E5E5">because this property of XOR so when you</font>

530
00:21:34,590 --> 00:21:39,149
have<font color="#E5E5E5"> XOR</font><font color="#CCCCCC"> of three elements and</font><font color="#E5E5E5"> two of</font>

531
00:21:37,470 --> 00:21:40,950
them are<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same then they cancel out</font>

532
00:21:39,150 --> 00:21:45,170
<font color="#E5E5E5">and they give you the first the</font><font color="#CCCCCC"> other</font>

533
00:21:40,950 --> 00:21:47,580
<font color="#E5E5E5">one so if we have two of them to</font><font color="#CCCCCC"> be the</font>

534
00:21:45,170 --> 00:21:50,790
if you have two<font color="#E5E5E5"> of them to</font><font color="#CCCCCC"> be the</font><font color="#E5E5E5"> this</font>

535
00:21:47,580 --> 00:21:53,460
value<font color="#E5E5E5"> so and they want of them to be the</font>

536
00:21:50,790 --> 00:21:55,170
<font color="#E5E5E5">magic value what happens is we</font><font color="#CCCCCC"> actually</font>

537
00:21:53,460 --> 00:21:57,300
get in turn the magic value<font color="#E5E5E5"> and</font>

538
00:21:55,170 --> 00:21:59,490
therefore we actually can represent it

539
00:21:57,300 --> 00:22:01,919
<font color="#E5E5E5">and this is exactly</font><font color="#CCCCCC"> the vulnerability I</font>

540
00:21:59,490 --> 00:22:03,770
found it which is truly truly have

541
00:22:01,920 --> 00:22:05,750
heavily relies on the fact

542
00:22:03,770 --> 00:22:08,510
we have basic understanding of

543
00:22:05,750 --> 00:22:10,070
JavaScript engines<font color="#E5E5E5"> this boxing is one</font><font color="#CCCCCC"> of</font>

544
00:22:08,510 --> 00:22:12,170
the first things we learn when we learn

545
00:22:10,070 --> 00:22:15,399
about JavaScript engines<font color="#E5E5E5"> so we use this</font>

546
00:22:12,170 --> 00:22:17,270
idea of boxing things<font color="#E5E5E5"> and turned in</font>

547
00:22:15,400 --> 00:22:21,559
supposedly unexploited

548
00:22:17,270 --> 00:22:23,990
<font color="#E5E5E5">state to be a vulnerability</font><font color="#CCCCCC"> so basically</font>

549
00:22:21,559 --> 00:22:25,850
what we<font color="#E5E5E5"> did is as you can</font><font color="#CCCCCC"> see here</font><font color="#E5E5E5"> we</font>

550
00:22:23,990 --> 00:22:28,790
first box it and then we<font color="#E5E5E5"> put it into an</font>

551
00:22:25,850 --> 00:22:32,809
array<font color="#CCCCCC"> that has that</font><font color="#E5E5E5"> is a JavaScript</font>

552
00:22:28,790 --> 00:22:35,629
array and not a floater<font color="#CCCCCC"> II so how do</font><font color="#E5E5E5"> we</font>

553
00:22:32,809 --> 00:22:39,080
turn this<font color="#CCCCCC"> one this weird state into a</font>

554
00:22:35,630 --> 00:22:40,809
vulnerability<font color="#E5E5E5"> so when what what happens</font>

555
00:22:39,080 --> 00:22:43,850
first<font color="#E5E5E5"> thing we need to understand is</font><font color="#CCCCCC"> how</font>

556
00:22:40,809 --> 00:22:46,540
vulnerabilities look like so JIT stands

557
00:22:43,850 --> 00:22:49,189
for<font color="#CCCCCC"> just-in-time as I already explained</font>

558
00:22:46,540 --> 00:22:51,379
bugs<font color="#CCCCCC"> are</font><font color="#E5E5E5"> usually what we see</font><font color="#CCCCCC"> today</font><font color="#E5E5E5"> are</font>

559
00:22:49,190 --> 00:22:53,000
usually<font color="#CCCCCC"> top infusions so type infusions</font>

560
00:22:51,380 --> 00:22:55,970
<font color="#E5E5E5">are essentially confusion between two</font>

561
00:22:53,000 --> 00:22:57,920
<font color="#E5E5E5">types that the the the program thinks</font>

562
00:22:55,970 --> 00:23:00,800
something is of one type<font color="#CCCCCC"> but actually</font>

563
00:22:57,920 --> 00:23:03,230
over<font color="#E5E5E5"> other type so you're talking</font>

564
00:23:00,800 --> 00:23:05,330
<font color="#CCCCCC">through the most</font><font color="#E5E5E5"> common ones are due to</font>

565
00:23:03,230 --> 00:23:07,580
side effects now side effects are some

566
00:23:05,330 --> 00:23:10,159
things that<font color="#E5E5E5"> take</font><font color="#CCCCCC"> place in the JTED code</font>

567
00:23:07,580 --> 00:23:13,399
now<font color="#E5E5E5"> did that code</font><font color="#CCCCCC"> I refer to the machine</font>

568
00:23:10,160 --> 00:23:17,270
code that<font color="#E5E5E5"> is emitted when the JIT</font>

569
00:23:13,400 --> 00:23:20,210
compiler compiles<font color="#E5E5E5"> the hot function so in</font>

570
00:23:17,270 --> 00:23:22,250
our case in<font color="#CCCCCC"> the usual case I mean what</font>

571
00:23:20,210 --> 00:23:25,010
happens is you have<font color="#E5E5E5"> some function let's</font>

572
00:23:22,250 --> 00:23:27,200
<font color="#E5E5E5">call it foo which changes</font><font color="#CCCCCC"> a type of</font><font color="#E5E5E5"> some</font>

573
00:23:25,010 --> 00:23:30,050
some object<font color="#E5E5E5"> let's let's</font><font color="#CCCCCC"> think of</font><font color="#E5E5E5"> it as</font>

574
00:23:27,200 --> 00:23:31,730
an array<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> the function that got</font>

575
00:23:30,050 --> 00:23:32,840
 doesn't know about this

576
00:23:31,730 --> 00:23:35,360
conversion<font color="#E5E5E5"> so he thinks that</font>

577
00:23:32,840 --> 00:23:38,000
<font color="#E5E5E5">everything's still the same and nothing</font>

578
00:23:35,360 --> 00:23:40,550
<font color="#E5E5E5">has changed so it's gonna work with it</font>

579
00:23:38,000 --> 00:23:42,740
<font color="#E5E5E5">as as if we as if as it did before and</font>

580
00:23:40,550 --> 00:23:45,230
this leads to<font color="#CCCCCC"> attack</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> fission so let's</font>

581
00:23:42,740 --> 00:23:47,270
look at an example<font color="#CCCCCC"> so first thing</font><font color="#E5E5E5"> we do</font>

582
00:23:45,230 --> 00:23:48,710
when we<font color="#E5E5E5"> have such vulnerability is we</font>

583
00:23:47,270 --> 00:23:51,080
make the function<font color="#E5E5E5"> hot as I explained</font>

584
00:23:48,710 --> 00:23:52,790
before<font color="#E5E5E5"> to make the function be compiled</font>

585
00:23:51,080 --> 00:23:55,699
<font color="#E5E5E5">into machine code we first has</font><font color="#CCCCCC"> to make</font>

586
00:23:52,790 --> 00:23:57,770
it hot we do that by calling<font color="#E5E5E5"> the</font>

587
00:23:55,700 --> 00:24:00,200
function<font color="#E5E5E5"> a lot of times and this is this</font>

588
00:23:57,770 --> 00:24:02,240
<font color="#E5E5E5">can be done by</font><font color="#CCCCCC"> a simple loop and the</font>

589
00:24:00,200 --> 00:24:05,179
next thing okay so<font color="#E5E5E5"> also it's important</font>

590
00:24:02,240 --> 00:24:07,429
to to say<font color="#E5E5E5"> that JIT the JIT compiler has</font>

591
00:24:05,179 --> 00:24:10,100
<font color="#CCCCCC">a lot of</font><font color="#E5E5E5"> assumptions these assumptions</font>

592
00:24:07,429 --> 00:24:12,320
are on some types on some things<font color="#E5E5E5"> that</font>

593
00:24:10,100 --> 00:24:14,659
take<font color="#CCCCCC"> place during the execution of the</font>

594
00:24:12,320 --> 00:24:15,610
<font color="#CCCCCC">function so for instance when we</font><font color="#E5E5E5"> call</font>

595
00:24:14,660 --> 00:24:17,590
foo

596
00:24:15,610 --> 00:24:19,959
and it thinks<font color="#CCCCCC"> that food</font><font color="#E5E5E5"> doesn't do</font>

597
00:24:17,590 --> 00:24:22,480
anything it knows<font color="#CCCCCC"> that it doesn't need</font>

598
00:24:19,960 --> 00:24:24,489
<font color="#E5E5E5">to check things again because if food</font>

599
00:24:22,480 --> 00:24:26,649
doesn't<font color="#E5E5E5"> change any state of the program</font>

600
00:24:24,489 --> 00:24:28,330
<font color="#CCCCCC">why would we check something again</font>

601
00:24:26,649 --> 00:24:30,639
because that<font color="#CCCCCC"> would make</font><font color="#E5E5E5"> the function way</font>

602
00:24:28,330 --> 00:24:34,239
<font color="#E5E5E5">more slower and JIT compilers are all</font>

603
00:24:30,639 --> 00:24:36,580
about making<font color="#E5E5E5"> things faster so it has a</font>

604
00:24:34,239 --> 00:24:40,090
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> assumptions that are there to</font>

605
00:24:36,580 --> 00:24:42,519
<font color="#E5E5E5">improve performance</font><font color="#CCCCCC"> so once we do that</font>

606
00:24:40,090 --> 00:24:44,799
<font color="#CCCCCC">and we have</font><font color="#E5E5E5"> something that</font><font color="#CCCCCC"> breaks</font><font color="#E5E5E5"> the</font>

607
00:24:42,519 --> 00:24:47,559
<font color="#E5E5E5">assumption we</font><font color="#CCCCCC"> can we can eventually get</font>

608
00:24:44,799 --> 00:24:49,059
to a weird<font color="#CCCCCC"> states where states and from</font>

609
00:24:47,559 --> 00:24:51,249
<font color="#E5E5E5">there we can turn this into a phone bill</font>

610
00:24:49,059 --> 00:24:53,080
T so in this<font color="#E5E5E5"> case once we call the</font>

611
00:24:51,249 --> 00:24:55,179
function<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> make</font><font color="#E5E5E5"> it completely</font>

612
00:24:53,080 --> 00:24:57,399
compiled into machine code<font color="#CCCCCC"> and we</font>

613
00:24:55,179 --> 00:24:58,989
actually<font color="#E5E5E5"> call the function</font><font color="#CCCCCC"> again but</font>

614
00:24:57,399 --> 00:25:01,238
this<font color="#E5E5E5"> time we want</font><font color="#CCCCCC"> to trigger the type</font>

615
00:24:58,989 --> 00:25:02,919
confusion so what happens<font color="#CCCCCC"> here is who</font>

616
00:25:01,239 --> 00:25:05,169
will change<font color="#E5E5E5"> the type of the</font><font color="#CCCCCC"> array and</font>

617
00:25:02,919 --> 00:25:07,989
therefore the<font color="#E5E5E5"> assumption that food</font>

618
00:25:05,169 --> 00:25:12,100
<font color="#CCCCCC">doesn't change anything</font><font color="#E5E5E5"> breaks that this</font>

619
00:25:07,989 --> 00:25:14,049
gives us the ability<font color="#E5E5E5"> to to have the JIT</font>

620
00:25:12,100 --> 00:25:16,178
compiler think that nothing<font color="#E5E5E5"> happened but</font>

621
00:25:14,049 --> 00:25:18,340
we actually<font color="#E5E5E5"> change something this is</font>

622
00:25:16,179 --> 00:25:21,309
very important<font color="#CCCCCC"> because JIT compiler bugs</font>

623
00:25:18,340 --> 00:25:24,189
are very<font color="#E5E5E5"> complex sometimes and this one</font>

624
00:25:21,309 --> 00:25:27,369
is not<font color="#E5E5E5"> too complex</font><font color="#CCCCCC"> what happens here</font><font color="#E5E5E5"> we</font>

625
00:25:24,190 --> 00:25:30,549
<font color="#E5E5E5">essentially made the way digit compilers</font>

626
00:25:27,369 --> 00:25:32,499
for<font color="#E5E5E5"> yet dot to not know about the the</font>

627
00:25:30,549 --> 00:25:35,190
conversion<font color="#E5E5E5"> that</font><font color="#CCCCCC"> happened so if foo</font>

628
00:25:32,499 --> 00:25:38,350
converts<font color="#E5E5E5"> array to a JavaScript</font><font color="#CCCCCC"> array</font>

629
00:25:35,190 --> 00:25:40,029
<font color="#CCCCCC">something</font><font color="#E5E5E5"> happened but the JIT compiler</font>

630
00:25:38,350 --> 00:25:42,248
doesn't<font color="#CCCCCC"> know about</font><font color="#E5E5E5"> it so it's very</font>

631
00:25:40,029 --> 00:25:44,859
<font color="#CCCCCC">crucial to understand that and the</font>

632
00:25:42,249 --> 00:25:46,450
assumption essentially break because<font color="#E5E5E5"> we</font>

633
00:25:44,859 --> 00:25:49,178
<font color="#E5E5E5">change something in the function that we</font>

634
00:25:46,450 --> 00:25:51,369
called so this<font color="#E5E5E5"> is basically about</font><font color="#CCCCCC"> your</font>

635
00:25:49,179 --> 00:25:53,169
<font color="#CCCCCC">type</font><font color="#E5E5E5"> confusions we have we essentially</font>

636
00:25:51,369 --> 00:25:55,619
have some function to make it hot<font color="#E5E5E5"> and</font>

637
00:25:53,169 --> 00:25:58,600
then we have another<font color="#CCCCCC"> function</font><font color="#E5E5E5"> which gets</font>

638
00:25:55,619 --> 00:26:01,480
<font color="#E5E5E5">gets emitted to machine code and in that</font>

639
00:25:58,600 --> 00:26:03,158
function<font color="#E5E5E5"> we</font><font color="#CCCCCC"> call some other</font><font color="#E5E5E5"> function</font>

640
00:26:01,480 --> 00:26:05,139
<font color="#CCCCCC">which will have side</font><font color="#E5E5E5"> effects side</font>

641
00:26:03,159 --> 00:26:09,759
effects are things that the JIT compiler

642
00:26:05,139 --> 00:26:13,178
is not<font color="#E5E5E5"> aware</font><font color="#CCCCCC"> of so let's</font><font color="#E5E5E5"> actually move</font>

643
00:26:09,759 --> 00:26:15,940
on to my vulnerability<font color="#E5E5E5"> so to turn the</font>

644
00:26:13,179 --> 00:26:17,980
<font color="#CCCCCC">the mismatch between the flags if you</font>

645
00:26:15,940 --> 00:26:20,019
remember we had a flag that indicates

646
00:26:17,980 --> 00:26:22,179
<font color="#E5E5E5">that has no missing values and we also</font>

647
00:26:20,019 --> 00:26:24,009
<font color="#CCCCCC">had the array content</font><font color="#E5E5E5"> so once we have</font>

648
00:26:22,179 --> 00:26:27,159
the mismatch and<font color="#E5E5E5"> we actually</font><font color="#CCCCCC"> managed to</font>

649
00:26:24,009 --> 00:26:28,460
fake a missing value<font color="#E5E5E5"> to turn that into a</font>

650
00:26:27,159 --> 00:26:30,769
vulnerability<font color="#CCCCCC"> its</font>

651
00:26:28,460 --> 00:26:33,320
quite interesting<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> lucky</font><font color="#E5E5E5"> heart</font>

652
00:26:30,769 --> 00:26:34,970
and so my bed did that was basically

653
00:26:33,320 --> 00:26:39,590
through calling this function concat

654
00:26:34,970 --> 00:26:41,690
which had<font color="#CCCCCC"> an ass</font><font color="#E5E5E5"> which relied on has no</font>

655
00:26:39,590 --> 00:26:43,399
missing values and<font color="#E5E5E5"> also relied on the</font>

656
00:26:41,690 --> 00:26:47,210
content<font color="#E5E5E5"> of the array</font>

657
00:26:43,399 --> 00:26:49,189
this allowed the mismatch to be<font color="#CCCCCC"> to to</font>

658
00:26:47,210 --> 00:26:51,710
<font color="#E5E5E5">get us the into a weird</font><font color="#CCCCCC"> States which</font>

659
00:26:49,190 --> 00:26:54,559
shouldn't happen<font color="#CCCCCC"> because in normal</font><font color="#E5E5E5"> case</font>

660
00:26:51,710 --> 00:26:57,559
<font color="#E5E5E5">why would we have the the missing values</font>

661
00:26:54,559 --> 00:27:00,320
and the content<font color="#E5E5E5"> of the array to</font><font color="#CCCCCC"> have not</font>

662
00:26:57,559 --> 00:27:02,720
met a mismatch between<font color="#E5E5E5"> them so in our</font>

663
00:27:00,320 --> 00:27:05,840
<font color="#E5E5E5">case in in locking hearts case they got</font>

664
00:27:02,720 --> 00:27:07,909
the array<font color="#E5E5E5"> flags</font><font color="#CCCCCC"> tag they got</font><font color="#E5E5E5"> the red</font>

665
00:27:05,840 --> 00:27:09,918
flags to<font color="#CCCCCC"> be mismatched</font><font color="#E5E5E5"> with the content</font>

666
00:27:07,909 --> 00:27:12,200
of<font color="#E5E5E5"> the array and they called concat now</font>

667
00:27:09,919 --> 00:27:14,090
the way concat was called was<font color="#E5E5E5"> once we</font>

668
00:27:12,200 --> 00:27:17,809
make a fake array let's call it buggy

669
00:27:14,090 --> 00:27:20,389
<font color="#E5E5E5">and the buggy has a fake missing value</font>

670
00:27:17,809 --> 00:27:22,249
in it but the flag that<font color="#E5E5E5"> indicates if</font>

671
00:27:20,389 --> 00:27:25,428
there are any missing values is not<font color="#E5E5E5"> set</font>

672
00:27:22,249 --> 00:27:27,440
<font color="#CCCCCC">to true</font><font color="#E5E5E5"> so we set this fake array and we</font>

673
00:27:25,429 --> 00:27:29,659
call concat with it now the first thing

674
00:27:27,440 --> 00:27:32,149
that<font color="#E5E5E5"> happens when</font><font color="#CCCCCC"> we call concat is we</font>

675
00:27:29,659 --> 00:27:34,100
<font color="#E5E5E5">get</font><font color="#CCCCCC"> to dis code now this is the</font><font color="#E5E5E5"> part</font>

676
00:27:32,149 --> 00:27:36,199
with that where we<font color="#E5E5E5"> are</font><font color="#CCCCCC"> after a lot of</font>

677
00:27:34,100 --> 00:27:38,689
<font color="#E5E5E5">code now bear</font><font color="#CCCCCC"> with me it's not too hard</font>

678
00:27:36,200 --> 00:27:40,820
<font color="#E5E5E5">it's just a lot</font><font color="#CCCCCC"> of code</font><font color="#E5E5E5"> so first thing</font>

679
00:27:38,690 --> 00:27:42,440
we get is<font color="#E5E5E5"> we get to this function this</font>

680
00:27:40,820 --> 00:27:45,259
<font color="#E5E5E5">function essentially is called concat</font>

681
00:27:42,440 --> 00:27:48,320
args<font color="#E5E5E5"> and a item in this case is the</font><font color="#CCCCCC"> fake</font>

682
00:27:45,259 --> 00:27:50,690
<font color="#CCCCCC">irate</font><font color="#E5E5E5"> the buggy we have it's called we</font>

683
00:27:48,320 --> 00:27:52,970
invoke is<font color="#CCCCCC"> fill</font><font color="#E5E5E5"> from photo types and we</font>

684
00:27:50,690 --> 00:27:54,860
would essentially want fill phone

685
00:27:52,970 --> 00:27:57,889
prototypes<font color="#E5E5E5"> to return false</font><font color="#CCCCCC"> in order to</font>

686
00:27:54,860 --> 00:27:59,389
get<font color="#E5E5E5"> into that if statement now is throw</font>

687
00:27:57,889 --> 00:28:01,129
from prototypes<font color="#E5E5E5"> essentially checks the</font>

688
00:27:59,389 --> 00:28:03,110
following things first thing it checks

689
00:28:01,129 --> 00:28:05,389
<font color="#E5E5E5">is that there is only one segment in the</font>

690
00:28:03,110 --> 00:28:07,369
array<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that check is through the fact</font>

691
00:28:05,389 --> 00:28:09,199
that<font color="#E5E5E5"> it checks that the next the</font><font color="#CCCCCC"> next</font>

692
00:28:07,369 --> 00:28:12,408
segment of the header<font color="#CCCCCC"> hat segment is</font>

693
00:28:09,200 --> 00:28:14,539
null and the another<font color="#E5E5E5"> thing that they</font>

694
00:28:12,409 --> 00:28:16,369
checks is that the length of the array

695
00:28:14,539 --> 00:28:18,230
is equal to the length of<font color="#CCCCCC"> the segment</font>

696
00:28:16,369 --> 00:28:21,709
<font color="#E5E5E5">therefore this segment is the only</font>

697
00:28:18,230 --> 00:28:23,210
segment<font color="#CCCCCC"> in the array so these are the</font>

698
00:28:21,710 --> 00:28:24,350
<font color="#E5E5E5">first this is the</font><font color="#CCCCCC"> first thing that it</font>

699
00:28:23,210 --> 00:28:26,570
<font color="#E5E5E5">checks and the second thing that it</font>

700
00:28:24,350 --> 00:28:28,998
<font color="#E5E5E5">checks is that the flag has no missing</font>

701
00:28:26,570 --> 00:28:30,619
values is set to true<font color="#E5E5E5"> now this can be</font>

702
00:28:28,999 --> 00:28:32,600
<font color="#E5E5E5">easily bypassed because we've already</font>

703
00:28:30,619 --> 00:28:35,539
seen that we can fake and missing value

704
00:28:32,600 --> 00:28:37,248
and set the flag to true<font color="#CCCCCC"> by doing that</font>

705
00:28:35,539 --> 00:28:39,799
we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> actually get</font><font color="#CCCCCC"> as well from</font>

706
00:28:37,249 --> 00:28:41,960
prototypes to return<font color="#E5E5E5"> false and we can</font>

707
00:28:39,799 --> 00:28:44,629
actually<font color="#E5E5E5"> successfully get and get into</font>

708
00:28:41,960 --> 00:28:47,720
the<font color="#CCCCCC"> if-statement next thing we reach is</font>

709
00:28:44,630 --> 00:28:51,740
this elf statement which calls copyright

710
00:28:47,720 --> 00:28:53,980
elements<font color="#E5E5E5"> with our array as an argument</font>

711
00:28:51,740 --> 00:28:56,000
<font color="#CCCCCC">as</font><font color="#E5E5E5"> you can see it's the PRM array</font>

712
00:28:53,980 --> 00:28:57,860
what's<font color="#E5E5E5"> first copy</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> our elements is</font>

713
00:28:56,000 --> 00:29:00,049
essentially copying an internal function

714
00:28:57,860 --> 00:29:02,240
and which does the<font color="#CCCCCC"> following</font><font color="#E5E5E5"> now this</font>

715
00:29:00,049 --> 00:29:05,450
part is very it's very<font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> for</font>

716
00:29:02,240 --> 00:29:07,659
<font color="#CCCCCC">us</font><font color="#E5E5E5"> so first thing that happens is they</font>

717
00:29:05,450 --> 00:29:10,250
make an enumerator out of the array

718
00:29:07,659 --> 00:29:13,190
enumerator will<font color="#E5E5E5"> enumerate every single</font>

719
00:29:10,250 --> 00:29:15,559
<font color="#CCCCCC">element in the array</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> will increase</font>

720
00:29:13,190 --> 00:29:19,340
<font color="#E5E5E5">the counter one every time is it engages</font>

721
00:29:15,559 --> 00:29:21,860
<font color="#E5E5E5">in you element now let's see how this</font>

722
00:29:19,340 --> 00:29:23,330
enumerator<font color="#E5E5E5"> is actually implemented so</font>

723
00:29:21,860 --> 00:29:25,668
this<font color="#E5E5E5"> is a code</font><font color="#CCCCCC"> for the move next</font>

724
00:29:23,330 --> 00:29:29,389
function and as we can<font color="#CCCCCC"> see on the red</font>

725
00:29:25,669 --> 00:29:31,850
box<font color="#E5E5E5"> when we encounter an a value that</font><font color="#CCCCCC"> is</font>

726
00:29:29,390 --> 00:29:34,789
actually a missing value<font color="#E5E5E5"> we actually</font>

727
00:29:31,850 --> 00:29:39,049
skip it so what happened here is<font color="#E5E5E5"> that</font>

728
00:29:34,789 --> 00:29:40,370
<font color="#E5E5E5">every time we got into the sorry every</font>

729
00:29:39,049 --> 00:29:42,620
time we got<font color="#E5E5E5"> into the while loop and</font>

730
00:29:40,370 --> 00:29:45,529
there was a missing<font color="#CCCCCC"> value it's kept it</font>

731
00:29:42,620 --> 00:29:47,570
there for<font color="#E5E5E5"> the count</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we had there is</font>

732
00:29:45,529 --> 00:29:50,779
not equal to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> amount of</font><font color="#CCCCCC"> elements in</font>

733
00:29:47,570 --> 00:29:53,740
the array<font color="#CCCCCC"> this is because</font><font color="#E5E5E5"> every time</font>

734
00:29:50,779 --> 00:29:55,730
<font color="#CCCCCC">when</font><font color="#E5E5E5"> we get we find a missing</font><font color="#CCCCCC"> value it</font>

735
00:29:53,740 --> 00:29:58,279
doesn't<font color="#CCCCCC"> increase the</font><font color="#E5E5E5"> counter and</font>

736
00:29:55,730 --> 00:30:00,649
therefore we can<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> get into this</font>

737
00:29:58,279 --> 00:30:04,880
<font color="#CCCCCC">safe statement</font><font color="#E5E5E5"> and call internal</font><font color="#CCCCCC"> fill</font>

738
00:30:00,649 --> 00:30:07,029
<font color="#CCCCCC">from</font><font color="#E5E5E5"> prototypes now this also is a very</font>

739
00:30:04,880 --> 00:30:09,620
interesting function for<font color="#E5E5E5"> us because it</font>

740
00:30:07,029 --> 00:30:11,510
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> thing it does is loop</font>

741
00:30:09,620 --> 00:30:13,010
through the prototype chain<font color="#CCCCCC"> now if you</font>

742
00:30:11,510 --> 00:30:15,408
<font color="#CCCCCC">remember</font><font color="#E5E5E5"> the prototype chain is</font>

743
00:30:13,010 --> 00:30:18,110
basically if a prototype is<font color="#E5E5E5"> basically</font>

744
00:30:15,409 --> 00:30:21,200
some object<font color="#E5E5E5"> that we inherit features</font>

745
00:30:18,110 --> 00:30:22,850
from so we can have our prototype to

746
00:30:21,200 --> 00:30:26,299
have another prototype and therefore we

747
00:30:22,850 --> 00:30:28,129
<font color="#CCCCCC">Forge a</font><font color="#E5E5E5"> prototype chain so this thing</font>

748
00:30:26,299 --> 00:30:31,760
this function first loops through the

749
00:30:28,130 --> 00:30:34,190
prototype<font color="#CCCCCC"> chain and then what it</font><font color="#E5E5E5"> does it</font>

750
00:30:31,760 --> 00:30:38,299
called<font color="#E5E5E5"> it calls this long function name</font>

751
00:30:34,190 --> 00:30:40,039
<font color="#E5E5E5">with our prototype as an argument so if</font>

752
00:30:38,299 --> 00:30:41,990
you remember<font color="#CCCCCC"> prototype is actually</font>

753
00:30:40,039 --> 00:30:43,908
directly<font color="#E5E5E5"> converted into a JavaScript</font>

754
00:30:41,990 --> 00:30:46,669
<font color="#E5E5E5">array when assigning a prototype</font>

755
00:30:43,909 --> 00:30:48,919
remember from the<font color="#E5E5E5"> converting slide so</font>

756
00:30:46,669 --> 00:30:51,529
essentially what happens here it know is

757
00:30:48,919 --> 00:30:53,929
that the prototypes should know that the

758
00:30:51,529 --> 00:30:55,280
photo type is a JavaScript array<font color="#E5E5E5"> and we</font>

759
00:30:53,929 --> 00:30:57,500
loop through<font color="#E5E5E5"> it</font>

760
00:30:55,280 --> 00:31:00,290
so every<font color="#E5E5E5"> time we get in here what</font>

761
00:30:57,500 --> 00:31:03,740
happens is the prototype is being passed

762
00:31:00,290 --> 00:31:06,139
through<font color="#E5E5E5"> the object argument and is then</font>

763
00:31:03,740 --> 00:31:09,110
<font color="#E5E5E5">converted to</font><font color="#CCCCCC"> a JavaScript array through</font>

764
00:31:06,140 --> 00:31:11,120
the<font color="#CCCCCC"> ensure non-native array so as you</font>

765
00:31:09,110 --> 00:31:14,020
<font color="#E5E5E5">can</font><font color="#CCCCCC"> yes infinity very</font><font color="#E5E5E5"> basically ensures</font>

766
00:31:11,120 --> 00:31:16,389
the<font color="#E5E5E5"> array is not</font><font color="#CCCCCC"> of a negative type</font>

767
00:31:14,020 --> 00:31:19,580
<font color="#CCCCCC">therefore it's a</font><font color="#E5E5E5"> JavaScript array and</font>

768
00:31:16,390 --> 00:31:22,340
this is the interesting<font color="#E5E5E5"> part</font><font color="#CCCCCC"> for us so</font>

769
00:31:19,580 --> 00:31:24,439
what<font color="#CCCCCC"> we've seen so far</font><font color="#E5E5E5"> is so</font><font color="#CCCCCC"> to quick</font>

770
00:31:22,340 --> 00:31:28,189
recap<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so what will happen so far is</font>

771
00:31:24,440 --> 00:31:31,880
we managed to get concat to convert some

772
00:31:28,190 --> 00:31:33,230
array into a JavaScript<font color="#CCCCCC"> array and there</font>

773
00:31:31,880 --> 00:31:36,430
is<font color="#E5E5E5"> nothing</font><font color="#CCCCCC"> that indicates this</font>

774
00:31:33,230 --> 00:31:39,650
conversion<font color="#E5E5E5"> it's important to know that</font>

775
00:31:36,430 --> 00:31:42,350
once<font color="#E5E5E5"> we fake in a missing value</font><font color="#CCCCCC"> and we</font>

776
00:31:39,650 --> 00:31:44,780
call the prototype we call the<font color="#E5E5E5"> concat</font>

777
00:31:42,350 --> 00:31:47,060
<font color="#CCCCCC">that all</font><font color="#E5E5E5"> of the prototype chain is being</font>

778
00:31:44,780 --> 00:31:48,620
converted<font color="#E5E5E5"> to JavaScript array now as</font>

779
00:31:47,060 --> 00:31:51,290
we've seen<font color="#E5E5E5"> before prototypes in the</font>

780
00:31:48,620 --> 00:31:54,020
<font color="#E5E5E5">prototype chain are not native types so</font>

781
00:31:51,290 --> 00:31:56,480
<font color="#E5E5E5">we shouldn't be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> put there any</font>

782
00:31:54,020 --> 00:31:59,030
<font color="#E5E5E5">type because it should be JavaScript</font>

783
00:31:56,480 --> 00:32:02,450
array so it<font color="#E5E5E5"> turns out that we actually</font>

784
00:31:59,030 --> 00:32:04,879
<font color="#E5E5E5">can do that so remember proxy proxy can</font>

785
00:32:02,450 --> 00:32:07,190
wrap a an existing<font color="#E5E5E5"> functionality and</font>

786
00:32:04,880 --> 00:32:10,340
redefine its functionality<font color="#E5E5E5"> in our case</font>

787
00:32:07,190 --> 00:32:13,010
we can<font color="#CCCCCC"> and it's pretty fun that we</font><font color="#E5E5E5"> can</font>

788
00:32:10,340 --> 00:32:15,439
do that is we can redefine the

789
00:32:13,010 --> 00:32:18,080
functionality of get prototype<font color="#E5E5E5"> so what</font>

790
00:32:15,440 --> 00:32:21,650
this<font color="#E5E5E5"> allows us is whenever we call yet</font>

791
00:32:18,080 --> 00:32:24,139
prototype<font color="#E5E5E5"> we redefine a behavior so</font>

792
00:32:21,650 --> 00:32:26,240
remember that<font color="#E5E5E5"> prototype chain so what we</font>

793
00:32:24,140 --> 00:32:29,690
do<font color="#CCCCCC"> here is basically</font><font color="#E5E5E5"> we redefine this</font>

794
00:32:26,240 --> 00:32:32,000
prototype chain loop and<font color="#CCCCCC"> by</font><font color="#E5E5E5"> doing</font><font color="#CCCCCC"> so we</font>

795
00:32:29,690 --> 00:32:33,950
allow us to<font color="#E5E5E5"> return</font><font color="#CCCCCC"> to call an arbitrary</font>

796
00:32:32,000 --> 00:32:35,840
function<font color="#CCCCCC"> now if we call an arbitrary</font>

797
00:32:33,950 --> 00:32:39,680
function<font color="#E5E5E5"> of our choice</font><font color="#CCCCCC"> for example in</font>

798
00:32:35,840 --> 00:32:41,419
any function<font color="#CCCCCC"> what</font><font color="#E5E5E5"> happens is the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> JIT</font>

799
00:32:39,680 --> 00:32:44,060
compiler checks if this<font color="#CCCCCC"> function is</font>

800
00:32:41,420 --> 00:32:45,710
marked as<font color="#CCCCCC"> having side effects</font><font color="#E5E5E5"> or not if</font>

801
00:32:44,060 --> 00:32:47,510
the function is<font color="#E5E5E5"> marked as having side</font>

802
00:32:45,710 --> 00:32:49,430
<font color="#E5E5E5">effects the whole function that got</font>

803
00:32:47,510 --> 00:32:51,320
<font color="#E5E5E5">jetted is marked as having side</font><font color="#CCCCCC"> effects</font>

804
00:32:49,430 --> 00:32:53,840
and it's not good for<font color="#CCCCCC"> us because we</font>

805
00:32:51,320 --> 00:32:56,270
don't want the JIT compiler to know that

806
00:32:53,840 --> 00:32:58,580
some side effect to place because<font color="#E5E5E5"> we</font>

807
00:32:56,270 --> 00:33:00,830
<font color="#E5E5E5">wanted</font><font color="#CCCCCC"> to get a target fusion so what we</font>

808
00:32:58,580 --> 00:33:03,379
do is we use an existing function which

809
00:33:00,830 --> 00:33:05,750
is called value<font color="#CCCCCC"> off and is marked as not</font>

810
00:33:03,380 --> 00:33:08,830
having side effects<font color="#CCCCCC"> this basically</font>

811
00:33:05,750 --> 00:33:11,470
allows<font color="#CCCCCC"> us to return</font><font color="#E5E5E5"> any object in the</font>

812
00:33:08,830 --> 00:33:12,760
<font color="#CCCCCC">type chain by calling yet prototype</font><font color="#E5E5E5"> so</font>

813
00:33:11,470 --> 00:33:15,010
let's see an example for<font color="#CCCCCC"> that this</font><font color="#E5E5E5"> is</font>

814
00:33:12,760 --> 00:33:17,110
<font color="#CCCCCC">the proof of concept code and we'll go</font>

815
00:33:15,010 --> 00:33:18,940
<font color="#CCCCCC">through every single</font><font color="#E5E5E5"> part of it and I'll</font>

816
00:33:17,110 --> 00:33:20,529
<font color="#CCCCCC">explain everything so first thing we do</font>

817
00:33:18,940 --> 00:33:22,870
as I<font color="#E5E5E5"> explained</font><font color="#CCCCCC"> before we loop through</font>

818
00:33:20,529 --> 00:33:25,269
the tail we loop through<font color="#E5E5E5"> this first</font><font color="#CCCCCC"> loop</font>

819
00:33:22,870 --> 00:33:27,039
to make<font color="#E5E5E5"> the</font><font color="#CCCCCC"> function hot</font><font color="#E5E5E5"> and therefore</font>

820
00:33:25,269 --> 00:33:30,100
<font color="#E5E5E5">yet it gets compiled to machine code</font>

821
00:33:27,039 --> 00:33:32,529
<font color="#E5E5E5">next</font><font color="#CCCCCC"> thing we do is really</font><font color="#E5E5E5"> fine to erase</font>

822
00:33:30,100 --> 00:33:34,750
<font color="#CCCCCC">buggy array which is going to be the</font>

823
00:33:32,529 --> 00:33:37,330
array we fake a missing value<font color="#E5E5E5"> inside of</font>

824
00:33:34,750 --> 00:33:39,429
it<font color="#E5E5E5"> and an array which</font><font color="#CCCCCC"> is called</font><font color="#E5E5E5"> error</font>

825
00:33:37,330 --> 00:33:41,289
and is going<font color="#E5E5E5"> to be our target for</font><font color="#CCCCCC"> attack</font>

826
00:33:39,429 --> 00:33:43,539
confusion<font color="#E5E5E5"> now it's important</font><font color="#CCCCCC"> to notice</font>

827
00:33:41,289 --> 00:33:45,908
<font color="#CCCCCC">that</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> target which will be</font><font color="#E5E5E5"> converted</font>

828
00:33:43,539 --> 00:33:49,990
to a JavaScript<font color="#E5E5E5"> array is</font><font color="#CCCCCC"> not buggy</font><font color="#E5E5E5"> its</font>

829
00:33:45,909 --> 00:33:52,600
array<font color="#E5E5E5"> so notice</font><font color="#CCCCCC"> that next</font><font color="#E5E5E5"> thing we do</font><font color="#CCCCCC"> is</font>

830
00:33:49,990 --> 00:33:54,850
we<font color="#E5E5E5"> really find that yet prototype</font><font color="#CCCCCC"> off</font><font color="#E5E5E5"> so</font>

831
00:33:52,600 --> 00:33:57,428
yet prototype off is basically the get

832
00:33:54,850 --> 00:33:59,379
prototype function and by doing by

833
00:33:57,429 --> 00:34:02,409
calling by redefining<font color="#E5E5E5"> it to be value of</font>

834
00:33:59,380 --> 00:34:06,159
whenever<font color="#E5E5E5"> the function get prototype is</font>

835
00:34:02,409 --> 00:34:08,560
called on<font color="#CCCCCC"> aor we redefine if the</font>

836
00:34:06,159 --> 00:34:10,960
<font color="#E5E5E5">implementation and get it to return the</font>

837
00:34:08,560 --> 00:34:13,000
error<font color="#E5E5E5"> itself</font><font color="#CCCCCC"> this allows us to</font><font color="#E5E5E5"> return</font>

838
00:34:10,960 --> 00:34:15,369
error whenever get prototype is called

839
00:34:13,000 --> 00:34:18,070
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> huge because if we define a</font>

840
00:34:15,369 --> 00:34:22,060
proxy what happens is we essentially

841
00:34:18,070 --> 00:34:24,790
made the<font color="#CCCCCC"> yet for the type loop to return</font>

842
00:34:22,060 --> 00:34:27,580
us a javascript native float array<font color="#E5E5E5"> so if</font>

843
00:34:24,790 --> 00:34:29,379
you notice on<font color="#CCCCCC"> the line before</font><font color="#E5E5E5"> whenever</font>

844
00:34:27,580 --> 00:34:31,659
get prototype is called we call value

845
00:34:29,379 --> 00:34:33,639
<font color="#E5E5E5">off and if we loop through</font><font color="#CCCCCC"> the polar</font>

846
00:34:31,659 --> 00:34:35,980
type chain and value off is the get

847
00:34:33,639 --> 00:34:38,109
prototype the return the<font color="#E5E5E5"> return value</font><font color="#CCCCCC"> is</font>

848
00:34:35,980 --> 00:34:40,260
going to be error which is<font color="#E5E5E5"> a javascript</font>

849
00:34:38,109 --> 00:34:43,690
native float array as you can see here

850
00:34:40,260 --> 00:34:46,119
this<font color="#E5E5E5"> allows</font><font color="#CCCCCC"> us to event essentially have</font>

851
00:34:43,690 --> 00:34:47,740
a native float array<font color="#E5E5E5"> even though there</font>

852
00:34:46,119 --> 00:34:49,929
shouldn't be any of those in the

853
00:34:47,739 --> 00:34:52,719
<font color="#E5E5E5">prototype chain next thing we do is</font><font color="#CCCCCC"> we</font>

854
00:34:49,929 --> 00:34:55,330
redefine<font color="#E5E5E5"> we define the missing value</font>

855
00:34:52,719 --> 00:34:57,549
constant<font color="#CCCCCC"> and by doing</font><font color="#E5E5E5"> so we still have</font>

856
00:34:55,330 --> 00:34:59,710
there has no missing values flag for

857
00:34:57,550 --> 00:35:01,359
buggy<font color="#E5E5E5"> set to true this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font>

858
00:34:59,710 --> 00:35:03,640
interesting part<font color="#CCCCCC"> because this is where</font>

859
00:35:01,359 --> 00:35:06,250
the mismatch takes place so we<font color="#E5E5E5"> have a</font>

860
00:35:03,640 --> 00:35:09,160
missing value<font color="#E5E5E5"> but we don't have the flag</font>

861
00:35:06,250 --> 00:35:12,190
set to true so<font color="#CCCCCC"> the next</font><font color="#E5E5E5"> thing we do is</font>

862
00:35:09,160 --> 00:35:15,098
<font color="#E5E5E5">we call the</font><font color="#CCCCCC"> JTED function so this is the</font>

863
00:35:12,190 --> 00:35:17,170
<font color="#CCCCCC">the key part here so when</font><font color="#E5E5E5"> we call this</font>

864
00:35:15,099 --> 00:35:20,740
<font color="#CCCCCC">function</font><font color="#E5E5E5"> what happens</font><font color="#CCCCCC"> is this function</font>

865
00:35:17,170 --> 00:35:22,150
is this code is being granted so first

866
00:35:20,740 --> 00:35:24,368
thing we do is<font color="#E5E5E5"> read the</font>

867
00:35:22,150 --> 00:35:27,309
<font color="#CCCCCC">find the temporary and we</font><font color="#E5E5E5"> define the</font>

868
00:35:24,369 --> 00:35:30,490
first element of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> array object</font><font color="#E5E5E5"> the</font>

869
00:35:27,309 --> 00:35:33,430
array array to<font color="#CCCCCC"> be a a float</font>

870
00:35:30,490 --> 00:35:35,379
this makes the<font color="#CCCCCC"> JIT know that whenever</font><font color="#E5E5E5"> it</font>

871
00:35:33,430 --> 00:35:37,299
gives us array and no conversions

872
00:35:35,380 --> 00:35:40,359
happened<font color="#CCCCCC"> it still</font><font color="#E5E5E5"> thinks it's a</font>

873
00:35:37,299 --> 00:35:42,490
<font color="#CCCCCC">JavaScript filtering</font><font color="#E5E5E5"> and then we call</font>

874
00:35:40,359 --> 00:35:44,950
the temp we call the<font color="#CCCCCC"> concat function and</font>

875
00:35:42,490 --> 00:35:47,288
we give<font color="#CCCCCC"> it the buggy as an argument</font>

876
00:35:44,950 --> 00:35:49,480
this will essentially loop through<font color="#CCCCCC"> all</font>

877
00:35:47,289 --> 00:35:51,670
of the prototype chain<font color="#CCCCCC"> and one of the</font>

878
00:35:49,480 --> 00:35:54,130
prototype in<font color="#E5E5E5"> the prototype chain is the</font>

879
00:35:51,670 --> 00:35:55,869
proxy as we can see here and when<font color="#E5E5E5"> we</font>

880
00:35:54,130 --> 00:35:58,480
call the neck the get prototype for the

881
00:35:55,869 --> 00:36:00,730
proxy<font color="#E5E5E5"> we get the ARR and when we call</font>

882
00:35:58,480 --> 00:36:02,680
the get prototype for the<font color="#E5E5E5"> mr we get wait</font>

883
00:36:00,730 --> 00:36:05,770
sorry<font color="#CCCCCC"> when we get we call the prototype</font>

884
00:36:02,680 --> 00:36:07,180
for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> buggy we get proxy</font><font color="#E5E5E5"> when we go we</font>

885
00:36:05,770 --> 00:36:10,119
<font color="#CCCCCC">can</font><font color="#E5E5E5"> only get for the time for the proxy</font>

886
00:36:07,180 --> 00:36:12,390
<font color="#CCCCCC">we invoke the get prototype for</font><font color="#E5E5E5"> ARR</font>

887
00:36:10,119 --> 00:36:15,130
which will return us the<font color="#CCCCCC"> ARR and</font>

888
00:36:12,390 --> 00:36:16,629
therefore what happens<font color="#CCCCCC"> is</font><font color="#E5E5E5"> AR is</font>

889
00:36:15,130 --> 00:36:18,609
converted<font color="#CCCCCC"> to a</font><font color="#E5E5E5"> JavaScript array</font>

890
00:36:16,630 --> 00:36:21,700
whenever the prototype chain<font color="#CCCCCC"> loop</font><font color="#E5E5E5"> takes</font>

891
00:36:18,609 --> 00:36:24,400
place afterwards<font color="#E5E5E5"> in the last line of the</font>

892
00:36:21,700 --> 00:36:26,710
<font color="#E5E5E5">JIT function we basically write some</font>

893
00:36:24,400 --> 00:36:29,589
value into<font color="#CCCCCC"> the array</font><font color="#E5E5E5"> and therefore make</font>

894
00:36:26,710 --> 00:36:31,390
<font color="#E5E5E5">write a float into some array that was</font>

895
00:36:29,589 --> 00:36:34,000
converted<font color="#CCCCCC"> to</font><font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> float</font>

896
00:36:31,390 --> 00:36:35,828
<font color="#CCCCCC">JavaScript</font><font color="#E5E5E5"> array so array is</font><font color="#CCCCCC"> the same</font>

897
00:36:34,000 --> 00:36:38,230
array that<font color="#CCCCCC"> is in a</font><font color="#E5E5E5"> prototype chain and</font>

898
00:36:35,829 --> 00:36:42,039
therefore<font color="#E5E5E5"> we still overwrite we</font>

899
00:36:38,230 --> 00:36:46,180
overwrite some pointers with a float

900
00:36:42,039 --> 00:36:48,400
which in our case is<font color="#CCCCCC"> 1 2 3</font><font color="#E5E5E5"> 4 so last</font>

901
00:36:46,180 --> 00:36:51,609
thing<font color="#E5E5E5"> we do is call console.log and we</font>

902
00:36:48,400 --> 00:36:53,650
crash<font color="#E5E5E5"> because we have a object which is</font>

903
00:36:51,609 --> 00:36:56,220
defined for this address<font color="#E5E5E5"> and it's not</font>

904
00:36:53,650 --> 00:36:58,720
mapped so this is essentially<font color="#E5E5E5"> the</font>

905
00:36:56,220 --> 00:37:01,270
proof-of-concept code and what we do

906
00:36:58,720 --> 00:37:03,459
<font color="#E5E5E5">here is fairly simple</font><font color="#CCCCCC"> with first thing</font>

907
00:37:01,270 --> 00:37:05,230
we do is we make<font color="#E5E5E5"> a function hot and by</font>

908
00:37:03,460 --> 00:37:08,020
<font color="#E5E5E5">doing</font><font color="#CCCCCC"> so we make it can't be compiled</font>

909
00:37:05,230 --> 00:37:12,279
<font color="#E5E5E5">into machine code next thing we do is we</font>

910
00:37:08,020 --> 00:37:14,410
redefine the the behavior<font color="#CCCCCC"> of the yet</font>

911
00:37:12,279 --> 00:37:17,140
prototype function and we allow it to

912
00:37:14,410 --> 00:37:20,379
<font color="#E5E5E5">return an arbitrary</font><font color="#CCCCCC"> object whenever</font><font color="#E5E5E5"> we</font>

913
00:37:17,140 --> 00:37:22,779
call<font color="#CCCCCC"> yet prototype</font><font color="#E5E5E5"> then we invoke the</font>

914
00:37:20,380 --> 00:37:24,760
jet would then we fake a missing<font color="#CCCCCC"> value</font>

915
00:37:22,779 --> 00:37:28,089
and we call the jet digital function

916
00:37:24,760 --> 00:37:31,599
which in turn allows us<font color="#CCCCCC"> to convert in</font>

917
00:37:28,089 --> 00:37:34,509
all of the prototype chain<font color="#CCCCCC"> to be some</font>

918
00:37:31,599 --> 00:37:35,890
JavaScript arrays<font color="#CCCCCC"> now even though one of</font>

919
00:37:34,510 --> 00:37:38,200
<font color="#E5E5E5">most of them are</font>

920
00:37:35,890 --> 00:37:41,230
<font color="#E5E5E5">JavaScript arrays one of them the array</font>

921
00:37:38,200 --> 00:37:43,720
one is not because we<font color="#E5E5E5"> redefined that the</font>

922
00:37:41,230 --> 00:37:46,000
<font color="#E5E5E5">implementation</font><font color="#CCCCCC"> forget prototype this</font><font color="#E5E5E5"> in</font>

923
00:37:43,720 --> 00:37:48,549
<font color="#CCCCCC">terms allow this</font><font color="#E5E5E5"> in turn allows us to</font>

924
00:37:46,000 --> 00:37:51,220
have a<font color="#E5E5E5"> JavaScript float array convert it</font>

925
00:37:48,549 --> 00:37:53,619
to<font color="#E5E5E5"> a JavaScript array and we</font><font color="#CCCCCC"> can still</font>

926
00:37:51,220 --> 00:37:55,450
act with it still operate with it as if

927
00:37:53,619 --> 00:37:58,089
it were a<font color="#E5E5E5"> JavaScript float array and</font>

928
00:37:55,450 --> 00:38:00,848
therefore the<font color="#E5E5E5"> last line here allows</font><font color="#CCCCCC"> us</font>

929
00:37:58,089 --> 00:38:02,558
<font color="#E5E5E5">to write a point in number as a pointer</font>

930
00:38:00,849 --> 00:38:05,589
and<font color="#E5E5E5"> therefore we have what we call</font><font color="#CCCCCC"> in</font>

931
00:38:02,559 --> 00:38:07,119
<font color="#E5E5E5">the beginning a type confusion so we</font>

932
00:38:05,589 --> 00:38:10,150
essentially had a<font color="#E5E5E5"> type confusion between</font>

933
00:38:07,119 --> 00:38:12,910
a float<font color="#E5E5E5"> and a pointer because the jet</font>

934
00:38:10,150 --> 00:38:15,819
did not understand that<font color="#E5E5E5"> some conversion</font>

935
00:38:12,910 --> 00:38:19,089
<font color="#E5E5E5">took place now this is essentially the</font>

936
00:38:15,819 --> 00:38:21,160
bug and to exploit it we<font color="#E5E5E5"> actually had to</font>

937
00:38:19,089 --> 00:38:25,599
do a<font color="#E5E5E5"> few things so first thing we did</font>

938
00:38:21,160 --> 00:38:27,460
was we targeted a<font color="#E5E5E5"> fake object primitive</font>

939
00:38:25,599 --> 00:38:29,740
now what is the fake off derivative<font color="#E5E5E5"> this</font>

940
00:38:27,460 --> 00:38:32,079
thing we've just seen was<font color="#CCCCCC"> that we faked</font>

941
00:38:29,740 --> 00:38:33,250
an object at an arbitrary address in<font color="#E5E5E5"> our</font>

942
00:38:32,079 --> 00:38:35,349
case it was faked

943
00:38:33,250 --> 00:38:38,170
in<font color="#E5E5E5"> the Attis one two</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> four as seen</font>

944
00:38:35,349 --> 00:38:39,880
<font color="#CCCCCC">here but the thing is we actually can</font>

945
00:38:38,170 --> 00:38:42,789
fake an object at an arbitrary address

946
00:38:39,880 --> 00:38:45,309
the object we decided to fake was a date

947
00:38:42,789 --> 00:38:48,160
<font color="#E5E5E5">of your object which has some fields of</font>

948
00:38:45,309 --> 00:38:51,160
it which are a pointer<font color="#E5E5E5"> you can read from</font>

949
00:38:48,160 --> 00:38:53,920
and write to this in terms gives us a

950
00:38:51,160 --> 00:38:56,410
<font color="#CCCCCC">readwrite primitive and from there what</font>

951
00:38:53,920 --> 00:38:59,319
<font color="#CCCCCC">we did was to use</font><font color="#E5E5E5"> a known trick which is</font>

952
00:38:56,410 --> 00:39:03,069
<font color="#E5E5E5">to find a stack address and</font><font color="#CCCCCC"> override it</font>

953
00:38:59,319 --> 00:39:04,960
to run to execute our code in Rob<font color="#E5E5E5"> so to</font>

954
00:39:03,069 --> 00:39:07,420
do all that we used a great<font color="#E5E5E5"> level which</font>

955
00:39:04,960 --> 00:39:09,640
is<font color="#E5E5E5"> called</font><font color="#CCCCCC"> pond Jes and we used</font><font color="#E5E5E5"> that we</font>

956
00:39:07,420 --> 00:39:11,559
<font color="#CCCCCC">had to</font><font color="#E5E5E5"> fix a few things</font><font color="#CCCCCC"> but it it</font><font color="#E5E5E5"> did</font>

957
00:39:09,640 --> 00:39:14,710
most of the work<font color="#CCCCCC"> what it did</font><font color="#E5E5E5"> was</font>

958
00:39:11,559 --> 00:39:16,390
basically do what we explained we it it

959
00:39:14,710 --> 00:39:19,480
<font color="#E5E5E5">requires us to have a</font><font color="#CCCCCC"> readwrite</font>

960
00:39:16,390 --> 00:39:22,690
primitive<font color="#E5E5E5"> and then what it does</font><font color="#CCCCCC"> is to</font>

961
00:39:19,480 --> 00:39:24,849
scan the the program to find a stack

962
00:39:22,690 --> 00:39:28,180
pointer from there it overwrites<font color="#E5E5E5"> the</font>

963
00:39:24,849 --> 00:39:30,609
stack with whatever we want<font color="#CCCCCC"> because we</font>

964
00:39:28,180 --> 00:39:32,649
got an arbitrary readwrite primitive and

965
00:39:30,609 --> 00:39:35,259
then what happens is we<font color="#CCCCCC"> can execute code</font>

966
00:39:32,650 --> 00:39:39,450
<font color="#CCCCCC">in</font><font color="#E5E5E5"> Rob now we first exploited it on edge</font>

967
00:39:35,259 --> 00:39:42,609
<font color="#CCCCCC">but to actually</font><font color="#E5E5E5"> execute our own code</font>

968
00:39:39,450 --> 00:39:44,620
what - sorry<font color="#CCCCCC"> well when we actually</font>

969
00:39:42,609 --> 00:39:47,770
<font color="#CCCCCC">execute our own code we</font>

970
00:39:44,620 --> 00:39:50,049
we<font color="#E5E5E5"> executed it in the sandbox context so</font>

971
00:39:47,770 --> 00:39:51,880
which wasn't any nice for a demo<font color="#E5E5E5"> because</font>

972
00:39:50,050 --> 00:39:55,030
it would not<font color="#CCCCCC"> allow us to pop a</font>

973
00:39:51,880 --> 00:39:57,220
calculator<font color="#E5E5E5"> or something</font><font color="#CCCCCC"> but so what we</font>

974
00:39:55,030 --> 00:39:59,830
<font color="#E5E5E5">did was we actually compiled</font><font color="#CCCCCC"> chakra core</font>

975
00:39:57,220 --> 00:40:02,109
<font color="#E5E5E5">for Linux and we</font><font color="#CCCCCC"> exploited it for</font><font color="#E5E5E5"> Linux</font>

976
00:39:59,830 --> 00:40:03,880
<font color="#E5E5E5">the exploit for Linux was similar</font>

977
00:40:02,110 --> 00:40:05,920
because<font color="#E5E5E5"> we still overwrite this</font><font color="#CCCCCC"> overall</font>

978
00:40:03,880 --> 00:40:08,740
<font color="#E5E5E5">the stack with some things we controlled</font>

979
00:40:05,920 --> 00:40:11,530
as we had a<font color="#CCCCCC"> read/write</font><font color="#E5E5E5"> primitive and</font>

980
00:40:08,740 --> 00:40:14,890
from there we basically executed code

981
00:40:11,530 --> 00:40:18,160
<font color="#E5E5E5">and Rob so that's basically what we did</font>

982
00:40:14,890 --> 00:40:21,370
<font color="#E5E5E5">to get a POC a crashing proof of concept</font>

983
00:40:18,160 --> 00:40:24,910
to<font color="#CCCCCC"> actually execute our own code</font><font color="#E5E5E5"> so</font>

984
00:40:21,370 --> 00:40:42,630
let's<font color="#CCCCCC"> see a demo for</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> let's hope it</font>

985
00:40:24,910 --> 00:40:42,629
actually works one second sorry second

986
00:40:43,080 --> 00:40:53,569
Oh<font color="#E5E5E5"> No</font>

987
00:40:49,550 --> 00:40:57,330
so let's let's hope everything<font color="#E5E5E5"> works so</font>

988
00:40:53,570 --> 00:40:59,250
basically this we have<font color="#CCCCCC"> chopped</font><font color="#E5E5E5"> record</font>

989
00:40:57,330 --> 00:41:01,259
compiled for Linux<font color="#E5E5E5"> and this is how it</font>

990
00:40:59,250 --> 00:41:03,540
looks<font color="#CCCCCC"> like</font><font color="#E5E5E5"> so to execute it we actually</font>

991
00:41:01,260 --> 00:41:05,100
<font color="#CCCCCC">have to give it a source file so in our</font>

992
00:41:03,540 --> 00:41:07,380
<font color="#E5E5E5">case we'll give it an exploit and our</font>

993
00:41:05,100 --> 00:41:09,630
exploit<font color="#E5E5E5"> so notice this is going to be</font>

994
00:41:07,380 --> 00:41:10,830
<font color="#E5E5E5">very fast to exploit because chakra is</font>

995
00:41:09,630 --> 00:41:14,490
super fast and it has super

996
00:41:10,830 --> 00:41:18,350
optimizations because why not<font color="#CCCCCC"> so it's</font>

997
00:41:14,490 --> 00:41:22,759
going to<font color="#E5E5E5"> be super fast so beware and</font>

998
00:41:18,350 --> 00:41:22,759
therefore we have okay we have a shell

999
00:41:28,940 --> 00:41:34,620
so to prove them we actually got code

1000
00:41:31,980 --> 00:41:43,830
execution let's draw rest let's run a

1001
00:41:34,620 --> 00:41:45,930
calculator<font color="#E5E5E5"> oops oops and we have a child</font>

1002
00:41:43,830 --> 00:41:48,299
who later as well so we actually can

1003
00:41:45,930 --> 00:41:52,470
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> execute code and everything</font>

1004
00:41:48,300 --> 00:41:59,060
works as expected<font color="#CCCCCC"> so a few</font><font color="#E5E5E5"> things about</font>

1005
00:41:52,470 --> 00:42:05,310
let's<font color="#E5E5E5"> get back to</font><font color="#CCCCCC"> this talk oops</font><font color="#E5E5E5"> wait no</font>

1006
00:41:59,060 --> 00:42:07,350
sorry<font color="#E5E5E5"> so what we've seen here sorry what</font>

1007
00:42:05,310 --> 00:42:11,130
we've seen<font color="#E5E5E5"> here was basically we had</font>

1008
00:42:07,350 --> 00:42:15,270
some code<font color="#CCCCCC"> we okay so the demo shows us</font><font color="#E5E5E5"> a</font>

1009
00:42:11,130 --> 00:42:17,550
very<font color="#E5E5E5"> simple thing we first did what we</font>

1010
00:42:15,270 --> 00:42:20,430
<font color="#E5E5E5">did in</font><font color="#CCCCCC"> a proof of concept we got the JIT</font>

1011
00:42:17,550 --> 00:42:22,620
compiler to not be<font color="#E5E5E5"> to not be Newton to</font>

1012
00:42:20,430 --> 00:42:25,169
not know that some<font color="#CCCCCC"> side-effect took</font>

1013
00:42:22,620 --> 00:42:27,029
place this side<font color="#E5E5E5"> effect in our case was</font>

1014
00:42:25,170 --> 00:42:29,310
some conversion that allowed us<font color="#CCCCCC"> to</font>

1015
00:42:27,030 --> 00:42:32,270
<font color="#E5E5E5">convert some array into JavaScript array</font>

1016
00:42:29,310 --> 00:42:35,970
and then in turn allows<font color="#CCCCCC"> us to write</font>

1017
00:42:32,270 --> 00:42:37,950
<font color="#E5E5E5">floats as poor as pointers and this</font>

1018
00:42:35,970 --> 00:42:40,350
basically<font color="#E5E5E5"> gave us a top confusion</font>

1019
00:42:37,950 --> 00:42:43,290
primitive which we exploited by having

1020
00:42:40,350 --> 00:42:45,000
by faking an object which gives us a

1021
00:42:43,290 --> 00:42:48,840
read/write primitive and therefore we

1022
00:42:45,000 --> 00:42:51,030
<font color="#CCCCCC">continue to write our code and</font><font color="#E5E5E5"> Rob</font><font color="#CCCCCC"> so I</font>

1023
00:42:48,840 --> 00:42:53,100
really hope<font color="#E5E5E5"> that my talk was helpful for</font>

1024
00:42:51,030 --> 00:42:54,870
<font color="#E5E5E5">so</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> those of</font><font color="#CCCCCC"> you who want to</font><font color="#E5E5E5"> get into</font>

1025
00:42:53,100 --> 00:42:56,580
security research and I hope it was

1026
00:42:54,870 --> 00:42:58,830
<font color="#E5E5E5">entertaining for those of you just</font><font color="#CCCCCC"> one</font>

1027
00:42:56,580 --> 00:43:00,180
to hear about<font color="#E5E5E5"> the technical stuff</font><font color="#CCCCCC"> and I</font>

1028
00:42:58,830 --> 00:43:03,080
want to thank everyone<font color="#E5E5E5"> who helped me out</font>

1029
00:43:00,180 --> 00:43:05,879
with the talk<font color="#E5E5E5"> and with the slides and</font>

1030
00:43:03,080 --> 00:43:07,470
for you to come<font color="#E5E5E5"> for you for coming here</font>

1031
00:43:05,880 --> 00:43:09,870
<font color="#CCCCCC">and seeing</font><font color="#E5E5E5"> my talk I know there's a</font>

1032
00:43:07,470 --> 00:43:11,939
great competition<font color="#E5E5E5"> and there's way cool</font>

1033
00:43:09,870 --> 00:43:15,690
talks probably but<font color="#E5E5E5"> you still came to</font>

1034
00:43:11,940 --> 00:43:18,770
mine so thank you for<font color="#CCCCCC"> that and yeah</font>

1035
00:43:15,690 --> 00:43:18,770
thanks<font color="#CCCCCC"> for</font><font color="#E5E5E5"> coming</font>

1036
00:43:25,340 --> 00:43:30,140
Jonathan do we have some time<font color="#CCCCCC"> for</font>

1037
00:43:27,650 --> 00:43:31,850
questions yeah<font color="#CCCCCC"> okay was it the first</font>

1038
00:43:30,140 --> 00:43:35,720
talk you have<font color="#E5E5E5"> for such a big audience</font>

1039
00:43:31,850 --> 00:43:38,740
<font color="#CCCCCC">yeah I never thought</font><font color="#E5E5E5"> for Christ's sake</font>

1040
00:43:35,720 --> 00:43:38,740
that was good

1041
00:43:38,780 --> 00:43:44,840
[Music]

1042
00:43:42,530 --> 00:43:46,760
we have a couple<font color="#E5E5E5"> of microphones over</font>

1043
00:43:44,840 --> 00:43:48,950
<font color="#E5E5E5">here so if you have questions for John</font>

1044
00:43:46,760 --> 00:43:51,530
ISM<font color="#E5E5E5"> please line up over there and shoot</font>

1045
00:43:48,950 --> 00:43:53,240
the questions we could start<font color="#E5E5E5"> with one</font>

1046
00:43:51,530 --> 00:43:58,190
from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> internet</font>

1047
00:43:53,240 --> 00:44:01,540
do we have one<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> okay</font>

1048
00:43:58,190 --> 00:44:07,340
don't we have<font color="#E5E5E5"> any</font><font color="#CCCCCC"> questions over here</font>

1049
00:44:01,540 --> 00:44:08,980
people are<font color="#CCCCCC"> get</font><font color="#E5E5E5"> where's here number</font><font color="#CCCCCC"> five</font>

1050
00:44:07,340 --> 00:44:12,830
<font color="#E5E5E5">here we go</font>

1051
00:44:08,980 --> 00:44:16,010
so thank<font color="#E5E5E5"> you for the excellent talk</font><font color="#CCCCCC"> I</font>

1052
00:44:12,830 --> 00:44:20,750
was surprised to see<font color="#CCCCCC"> that the JavaScript</font>

1053
00:44:16,010 --> 00:44:23,120
<font color="#CCCCCC">engine</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> ads was</font><font color="#E5E5E5"> open source so is</font>

1054
00:44:20,750 --> 00:44:26,480
this<font color="#E5E5E5"> something that they're moving</font>

1055
00:44:23,120 --> 00:44:29,240
towards more open<font color="#E5E5E5"> source components</font><font color="#CCCCCC"> I</font>

1056
00:44:26,480 --> 00:44:31,010
think that the open sourcing is cool but

1057
00:44:29,240 --> 00:44:34,370
<font color="#E5E5E5">I don't</font><font color="#CCCCCC"> know how actually how the future</font>

1058
00:44:31,010 --> 00:44:39,650
will will be<font color="#CCCCCC"> and if</font><font color="#E5E5E5"> we'll open source</font>

1059
00:44:34,370 --> 00:44:43,150
more things<font color="#CCCCCC"> actually don't know then we</font>

1060
00:44:39,650 --> 00:44:46,750
continue<font color="#CCCCCC"> with microphone number two</font><font color="#E5E5E5"> hey</font>

1061
00:44:43,150 --> 00:44:53,600
thanks for<font color="#E5E5E5"> your very</font><font color="#CCCCCC"> interesting talk</font>

1062
00:44:46,750 --> 00:44:57,410
so obviously JIT compilers<font color="#CCCCCC"> appertained</font>

1063
00:44:53,600 --> 00:44:59,980
of<font color="#E5E5E5"> the subject so my question is when</font>

1064
00:44:57,410 --> 00:45:03,440
<font color="#CCCCCC">you get started</font><font color="#E5E5E5"> with all this how much</font>

1065
00:44:59,980 --> 00:45:04,040
<font color="#E5E5E5">prior domain knowledge of did compilers</font>

1066
00:45:03,440 --> 00:45:06,500
and

1067
00:45:04,040 --> 00:45:10,400
language<font color="#CCCCCC"> 1 times that</font><font color="#E5E5E5"> you have and when</font>

1068
00:45:06,500 --> 00:45:12,350
<font color="#CCCCCC">you then</font><font color="#E5E5E5"> go</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> chapter</font><font color="#CCCCCC"> call how much you</font>

1069
00:45:10,400 --> 00:45:15,290
have to<font color="#E5E5E5"> just read through the whole</font>

1070
00:45:12,350 --> 00:45:18,319
<font color="#E5E5E5">thing before you could actually start</font>

1071
00:45:15,290 --> 00:45:21,170
looking<font color="#CCCCCC"> for vulnerability in there</font><font color="#E5E5E5"> so</font>

1072
00:45:18,320 --> 00:45:23,570
what I did<font color="#E5E5E5"> was when I started to get</font>

1073
00:45:21,170 --> 00:45:25,220
into chakra<font color="#E5E5E5"> I read a lot of reports and</font>

1074
00:45:23,570 --> 00:45:27,980
<font color="#CCCCCC">I</font><font color="#E5E5E5"> I've</font><font color="#CCCCCC"> seen</font><font color="#E5E5E5"> that there's plenty of</font>

1075
00:45:25,220 --> 00:45:29,299
vulnerabilities there<font color="#E5E5E5"> so I read most not</font>

1076
00:45:27,980 --> 00:45:31,310
every one of them<font color="#E5E5E5"> but I read a lot of</font>

1077
00:45:29,300 --> 00:45:33,440
<font color="#E5E5E5">them and I tried to understand what they</font>

1078
00:45:31,310 --> 00:45:36,830
do and<font color="#CCCCCC"> why they exist and</font><font color="#E5E5E5"> this is</font>

1079
00:45:33,440 --> 00:45:39,830
basically what<font color="#E5E5E5"> got me into looking for</font>

1080
00:45:36,830 --> 00:45:41,930
<font color="#E5E5E5">my own bug as well</font><font color="#CCCCCC"> so basically I had</font>

1081
00:45:39,830 --> 00:45:43,970
understanding<font color="#CCCCCC"> of JavaScript engines in</font>

1082
00:45:41,930 --> 00:45:45,859
<font color="#CCCCCC">general and then I read about how chakra</font>

1083
00:45:43,970 --> 00:45:50,029
works and read about<font color="#CCCCCC"> one specific</font>

1084
00:45:45,860 --> 00:45:54,050
vulnerabilities in chakra and over<font color="#CCCCCC"> to</font>

1085
00:45:50,030 --> 00:45:56,000
microphone one please<font color="#CCCCCC"> you mentioned the</font>

1086
00:45:54,050 --> 00:46:00,530
process<font color="#CCCCCC"> in Windows</font><font color="#E5E5E5"> servants in a sandbox</font>

1087
00:45:56,000 --> 00:46:04,610
so you<font color="#CCCCCC"> weren't</font><font color="#E5E5E5"> able to out later which</font>

1088
00:46:00,530 --> 00:46:07,400
this<font color="#E5E5E5"> exploit in</font><font color="#CCCCCC"> the wild or is there a</font>

1089
00:46:04,610 --> 00:46:10,160
way<font color="#E5E5E5"> this could be dangerous</font><font color="#CCCCCC"> even in the</font>

1090
00:46:07,400 --> 00:46:12,650
sandbox<font color="#CCCCCC"> so to actually</font><font color="#E5E5E5"> execute your</font>

1091
00:46:10,160 --> 00:46:15,200
arbitrary code you have<font color="#CCCCCC"> 2x</font><font color="#E5E5E5"> Kate's escape</font>

1092
00:46:12,650 --> 00:46:16,760
the sandbox<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> things you can do</font>

1093
00:46:15,200 --> 00:46:17,990
with the sandbox<font color="#E5E5E5"> but they're pretty</font>

1094
00:46:16,760 --> 00:46:20,210
limited

1095
00:46:17,990 --> 00:46:22,459
I didn't exploit I didn't find<font color="#E5E5E5"> a sandbox</font>

1096
00:46:20,210 --> 00:46:25,460
<font color="#E5E5E5">escape yet I</font><font color="#CCCCCC"> hope I will find one day</font>

1097
00:46:22,460 --> 00:46:27,320
but to<font color="#E5E5E5"> actually execute interesting</font>

1098
00:46:25,460 --> 00:46:28,870
stuff you need to<font color="#CCCCCC"> do a sandbox escape</font>

1099
00:46:27,320 --> 00:46:31,310
because<font color="#E5E5E5"> there's plenty</font><font color="#CCCCCC"> of mitigations</font>

1100
00:46:28,870 --> 00:46:34,790
nowadays and specifically for<font color="#E5E5E5"> edge does</font>

1101
00:46:31,310 --> 00:46:36,560
<font color="#E5E5E5">a lot and</font><font color="#CCCCCC"> I don't know specifically</font><font color="#E5E5E5"> if</font>

1102
00:46:34,790 --> 00:46:38,390
you could do anything<font color="#E5E5E5"> you could do</font>

1103
00:46:36,560 --> 00:46:39,920
<font color="#E5E5E5">anything interesting</font><font color="#CCCCCC"> without a sandbox</font>

1104
00:46:38,390 --> 00:46:41,810
<font color="#E5E5E5">escape but you could actually run code</font>

1105
00:46:39,920 --> 00:46:43,700
so you<font color="#E5E5E5"> could do it</font><font color="#CCCCCC"> you could do stuff</font>

1106
00:46:41,810 --> 00:46:45,950
<font color="#CCCCCC">I'm not sure if it's interesting enough</font>

1107
00:46:43,700 --> 00:46:50,560
<font color="#E5E5E5">to to to actually do</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> in the</font>

1108
00:46:45,950 --> 00:46:54,730
<font color="#CCCCCC">wild and</font><font color="#E5E5E5"> over to microphone number two a</font>

1109
00:46:50,560 --> 00:46:54,730
great research and

1110
00:46:54,779 --> 00:47:05,640
how much time did you<font color="#CCCCCC"> walk on it so I</font>

1111
00:47:00,190 --> 00:47:08,049
worked on chakra for about<font color="#E5E5E5"> I think from</font>

1112
00:47:05,640 --> 00:47:09,848
July I<font color="#CCCCCC"> think I when I started I</font><font color="#E5E5E5"> started</font>

1113
00:47:08,049 --> 00:47:11,559
<font color="#E5E5E5">reading about chakra in July but I had</font>

1114
00:47:09,849 --> 00:47:13,809
to understand I had some knowledge about

1115
00:47:11,559 --> 00:47:17,829
JavaScript engines before<font color="#E5E5E5"> for about</font><font color="#CCCCCC"> like</font>

1116
00:47:13,809 --> 00:47:20,380
<font color="#CCCCCC">two</font><font color="#E5E5E5"> two months I think so not not for I</font>

1117
00:47:17,829 --> 00:47:23,380
mean the more important part for<font color="#CCCCCC"> me was</font>

1118
00:47:20,380 --> 00:47:26,319
to actually read<font color="#CCCCCC"> about examples</font><font color="#E5E5E5"> and see</font>

1119
00:47:23,380 --> 00:47:28,329
examples<font color="#E5E5E5"> more than spending</font><font color="#CCCCCC"> a lot of</font>

1120
00:47:26,319 --> 00:47:30,190
time on it like<font color="#E5E5E5"> I think it comes with</font>

1121
00:47:28,329 --> 00:47:32,650
practice<font color="#E5E5E5"> as I explained before what I do</font>

1122
00:47:30,190 --> 00:47:34,480
<font color="#E5E5E5">believe in is practice</font><font color="#CCCCCC"> and my practice</font>

1123
00:47:32,650 --> 00:47:37,049
<font color="#E5E5E5">was through reading a lot of research</font>

1124
00:47:34,480 --> 00:47:40,869
and a lot<font color="#CCCCCC"> of internal stuff about chakra</font>

1125
00:47:37,049 --> 00:47:46,359
so it's about<font color="#E5E5E5"> I think from July and but</font>

1126
00:47:40,869 --> 00:47:48,519
maybe two<font color="#E5E5E5"> months before all right</font>

1127
00:47:46,359 --> 00:47:52,980
nobody's<font color="#CCCCCC"> queueing up on the</font><font color="#E5E5E5"> microphones</font>

1128
00:47:48,519 --> 00:47:57,788
<font color="#E5E5E5">or have</font><font color="#CCCCCC"> I over seen someone Jonathan who</font>

1129
00:47:52,980 --> 00:48:00,269
excellent<font color="#E5E5E5"> thank that's it that's your</font>

1130
00:47:57,789 --> 00:48:00,269
<font color="#CCCCCC">clause</font>

1131
00:48:01,000 --> 00:48:07,410
that was<font color="#CCCCCC"> Jonathan Jade</font><font color="#E5E5E5"> from zero to zero</font>

1132
00:48:04,150 --> 00:48:07,410
day<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very much</font>

1133
00:48:08,070 --> 00:48:15,250
[Music]

1134
00:48:17,320 --> 00:48:29,979
[Music]

