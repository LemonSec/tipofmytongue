1
00:00:02,830 --> 00:00:23,039
[Music]

2
00:00:19,640 --> 00:00:27,390
ladies and gentlemen on this very last

3
00:00:23,039 --> 00:00:30,119
day of this<font color="#E5E5E5"> conference I have the honor</font>

4
00:00:27,390 --> 00:00:33,000
and<font color="#E5E5E5"> the pleasure to bring to you two</font>

5
00:00:30,119 --> 00:00:36,269
guys here<font color="#E5E5E5"> Jeff delaio and and the</font>

6
00:00:33,000 --> 00:00:40,129
<font color="#CCCCCC">awesome who are going to take</font><font color="#E5E5E5"> care about</font>

7
00:00:36,270 --> 00:00:44,700
<font color="#E5E5E5">the lecture called</font><font color="#CCCCCC"> Colonel tracing with</font>

8
00:00:40,129 --> 00:00:46,468
<font color="#CCCCCC">B be F so</font><font color="#E5E5E5"> for the ones who don't</font>

9
00:00:44,700 --> 00:00:48,780
understand<font color="#E5E5E5"> this extended Berkeley</font>

10
00:00:46,469 --> 00:00:50,850
<font color="#CCCCCC">brackets filter</font><font color="#E5E5E5"> and what they're going</font>

11
00:00:48,780 --> 00:00:55,190
<font color="#E5E5E5">to do is actually introduce you to the</font>

12
00:00:50,850 --> 00:00:59,070
<font color="#E5E5E5">functionality of it of the Linux kernel</font>

13
00:00:55,190 --> 00:01:01,170
<font color="#E5E5E5">so they will cover some practical</font><font color="#CCCCCC"> uses</font>

14
00:00:59,070 --> 00:01:04,290
of<font color="#E5E5E5"> the technology beyond</font><font color="#CCCCCC"> mer code</font>

15
00:01:01,170 --> 00:01:08,220
profiling<font color="#E5E5E5"> and for me most interesting is</font>

16
00:01:04,290 --> 00:01:09,390
<font color="#CCCCCC">actually that</font><font color="#E5E5E5"> they're gonna play</font><font color="#CCCCCC"> a</font>

17
00:01:08,220 --> 00:01:12,780
little<font color="#CCCCCC"> bit goths</font>

18
00:01:09,390 --> 00:01:16,229
here on stage is<font color="#CCCCCC"> that only only</font><font color="#E5E5E5"> a little</font>

19
00:01:12,780 --> 00:01:19,380
<font color="#E5E5E5">mad with power</font><font color="#CCCCCC"> a little bit</font><font color="#E5E5E5"> I don't know</font>

20
00:01:16,229 --> 00:01:21,810
what kind of<font color="#E5E5E5"> God</font><font color="#CCCCCC"> may be the spaghetti</font>

21
00:01:19,380 --> 00:01:25,908
monster will be aroused<font color="#E5E5E5"> least stages</font>

22
00:01:21,810 --> 00:01:25,909
yours<font color="#E5E5E5"> give them a warm welcome</font><font color="#CCCCCC"> thank you</font>

23
00:01:30,899 --> 00:01:37,140
welcome<font color="#CCCCCC"> I'm Jeff this</font><font color="#E5E5E5"> is Andy we're</font>

24
00:01:34,740 --> 00:01:38,850
security consultants at NCC group so we

25
00:01:37,140 --> 00:01:40,259
hack things for a<font color="#E5E5E5"> living and find bugs</font>

26
00:01:38,850 --> 00:01:41,788
and tell<font color="#CCCCCC"> people</font><font color="#E5E5E5"> how to fix them</font><font color="#CCCCCC"> and</font>

27
00:01:40,259 --> 00:01:43,560
stuff and one of the things that we've

28
00:01:41,789 --> 00:01:50,159
been<font color="#E5E5E5"> playing around with recently is</font>

29
00:01:43,560 --> 00:01:53,369
this<font color="#E5E5E5"> e</font><font color="#CCCCCC"> b PF stuff so ebf is extended</font><font color="#E5E5E5"> BPF</font>

30
00:01:50,159 --> 00:01:54,659
but what what is b PF so<font color="#CCCCCC"> b</font><font color="#E5E5E5"> PF for those</font>

31
00:01:53,369 --> 00:01:56,549
of you who<font color="#CCCCCC"> don't know</font><font color="#E5E5E5"> although maybe</font>

32
00:01:54,659 --> 00:01:58,880
everyone does know is<font color="#CCCCCC"> Berkley packet</font>

33
00:01:56,549 --> 00:02:02,429
filter which<font color="#CCCCCC"> is a bytecode and vm</font>

34
00:01:58,880 --> 00:02:04,380
<font color="#E5E5E5">designed for being run in a kernel</font><font color="#CCCCCC"> to</font>

35
00:02:02,429 --> 00:02:07,319
process<font color="#CCCCCC"> network packet Network packets</font>

36
00:02:04,380 --> 00:02:10,318
really really fast<font color="#E5E5E5"> and do filtering</font><font color="#CCCCCC"> EB</font>

37
00:02:07,319 --> 00:02:13,079
<font color="#CCCCCC">PF is this sort</font><font color="#E5E5E5"> of completely unrelated</font>

38
00:02:10,318 --> 00:02:16,260
language that was<font color="#CCCCCC"> designed in the linux</font>

39
00:02:13,079 --> 00:02:18,450
kernel<font color="#E5E5E5"> as its own thing</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> nearly kind</font>

40
00:02:16,260 --> 00:02:20,730
of<font color="#E5E5E5"> took the name</font><font color="#CCCCCC"> it's designed to</font><font color="#E5E5E5"> be</font>

41
00:02:18,450 --> 00:02:23,790
<font color="#E5E5E5">jaded</font><font color="#CCCCCC"> with sort of a direct</font><font color="#E5E5E5"> mapping to</font>

42
00:02:20,730 --> 00:02:26,429
x86 64 and other modern CPU

43
00:02:23,790 --> 00:02:29,040
architectures<font color="#CCCCCC"> it's sort of</font><font color="#E5E5E5"> designed</font>

44
00:02:26,430 --> 00:02:31,799
around<font color="#E5E5E5"> transpiling a sort of restricted</font>

45
00:02:29,040 --> 00:02:34,109
<font color="#CCCCCC">C limited language</font><font color="#E5E5E5"> subset into this code</font>

46
00:02:31,799 --> 00:02:35,819
so it can<font color="#E5E5E5"> run</font><font color="#CCCCCC"> very fast</font><font color="#E5E5E5"> and it's being</font>

47
00:02:34,110 --> 00:02:37,440
applied<font color="#CCCCCC"> to anything</font><font color="#E5E5E5"> and everything</font><font color="#CCCCCC"> in</font>

48
00:02:35,819 --> 00:02:39,420
the kernel<font color="#CCCCCC"> that might benefit from</font>

49
00:02:37,440 --> 00:02:42,299
<font color="#E5E5E5">having programmatic logic being applied</font>

50
00:02:39,420 --> 00:02:45,839
to<font color="#E5E5E5"> it you interact</font><font color="#CCCCCC"> with it</font><font color="#E5E5E5"> through this</font>

51
00:02:42,299 --> 00:02:47,099
<font color="#E5E5E5">BPF assist call and basically you send</font>

52
00:02:45,840 --> 00:02:48,690
<font color="#E5E5E5">it some code you</font><font color="#CCCCCC"> send it some</font><font color="#E5E5E5"> other</font>

53
00:02:47,099 --> 00:02:51,388
metadata<font color="#E5E5E5"> about what you want it to be</font>

54
00:02:48,690 --> 00:02:52,709
doing<font color="#CCCCCC"> and if it likes it it gives</font><font color="#E5E5E5"> you a</font>

55
00:02:51,389 --> 00:02:55,470
file descriptor if it doesn't it gives

56
00:02:52,709 --> 00:02:57,720
you an<font color="#E5E5E5"> error so basically the real power</font>

57
00:02:55,470 --> 00:03:01,859
of this stuff<font color="#E5E5E5"> is what you can apply it</font>

58
00:02:57,720 --> 00:03:03,900
to so what does it<font color="#E5E5E5"> look like</font><font color="#CCCCCC"> well this</font>

59
00:03:01,859 --> 00:03:06,870
is one form of it<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a horrific</font>

60
00:03:03,900 --> 00:03:08,310
<font color="#E5E5E5">form of it a macro hell and see that</font>

61
00:03:06,870 --> 00:03:12,859
basically<font color="#CCCCCC"> no</font><font color="#E5E5E5"> one should ever be writing</font>

62
00:03:08,310 --> 00:03:17,040
<font color="#E5E5E5">this but basically what is BPF</font><font color="#CCCCCC"> e BPF</font>

63
00:03:12,859 --> 00:03:18,630
<font color="#CCCCCC">it's basically a</font><font color="#E5E5E5"> BPF implementation that</font>

64
00:03:17,040 --> 00:03:21,030
<font color="#E5E5E5">just</font><font color="#CCCCCC"> threw ever all the rules aside</font>

65
00:03:18,630 --> 00:03:24,269
added a bunch<font color="#E5E5E5"> of registers added a bunch</font>

66
00:03:21,030 --> 00:03:25,829
<font color="#E5E5E5">of functionality to</font><font color="#CCCCCC"> call</font><font color="#E5E5E5"> arbitrary sort</font>

67
00:03:24,269 --> 00:03:28,380
of kernel functions that are registered

68
00:03:25,829 --> 00:03:30,299
<font color="#E5E5E5">into it and it's just applied</font><font color="#CCCCCC"> to all</font>

69
00:03:28,380 --> 00:03:32,489
sorts of<font color="#E5E5E5"> things it has</font><font color="#CCCCCC"> a bytecode</font>

70
00:03:30,299 --> 00:03:34,139
verifier<font color="#CCCCCC"> that we're going to henceforth</font>

71
00:03:32,489 --> 00:03:36,120
refer to as the validator because it's

72
00:03:34,139 --> 00:03:38,810
not really good at verifying<font color="#E5E5E5"> nor</font>

73
00:03:36,120 --> 00:03:41,700
validating for that matter but it does

74
00:03:38,810 --> 00:03:43,560
<font color="#E5E5E5">and the main functionality</font><font color="#CCCCCC"> of e BPF</font>

75
00:03:41,700 --> 00:03:44,549
really is the helper functions that are

76
00:03:43,560 --> 00:03:47,160
exposed to it depend

77
00:03:44,550 --> 00:03:49,650
the context of what<font color="#E5E5E5"> you're doing</font><font color="#CCCCCC"> so you</font>

78
00:03:47,160 --> 00:03:50,820
<font color="#CCCCCC">know</font><font color="#E5E5E5"> your socket filtering</font><font color="#CCCCCC"> EBP F isn't</font>

79
00:03:49,650 --> 00:03:54,330
going to be able<font color="#E5E5E5"> to read arbitrary</font>

80
00:03:50,820 --> 00:03:57,959
kernel memory<font color="#E5E5E5"> but</font><font color="#CCCCCC"> your k-pro BBP F is so</font>

81
00:03:54,330 --> 00:04:00,750
<font color="#E5E5E5">why ye</font><font color="#CCCCCC"> BP f high performance in plain</font>

82
00:03:57,960 --> 00:04:01,920
packet processing<font color="#CCCCCC"> safe</font><font color="#E5E5E5"> sorry safe high</font>

83
00:04:00,750 --> 00:04:04,500
performance in plain packet processing

84
00:04:01,920 --> 00:04:07,500
with<font color="#E5E5E5"> network tunneling and custom IP</font>

85
00:04:04,500 --> 00:04:11,220
tables rules<font color="#CCCCCC"> and</font><font color="#E5E5E5"> cysts safe high</font>

86
00:04:07,500 --> 00:04:14,400
performance<font color="#E5E5E5"> in kernel programmatic</font>

87
00:04:11,220 --> 00:04:16,560
operations<font color="#E5E5E5"> with</font><font color="#CCCCCC"> syscall filtering to</font>

88
00:04:14,400 --> 00:04:19,980
reduce the need for buggy kernel modules

89
00:04:16,560 --> 00:04:22,520
or all kernel modules<font color="#CCCCCC"> with a firewall</font>

90
00:04:19,980 --> 00:04:26,010
sub sit<font color="#CCCCCC"> okay wait what</font>

91
00:04:22,520 --> 00:04:27,690
so<font color="#CCCCCC"> as EVP F has sort</font><font color="#E5E5E5"> of gained all of</font>

92
00:04:26,010 --> 00:04:30,599
<font color="#E5E5E5">these features</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> why keeps changing</font>

93
00:04:27,690 --> 00:04:33,540
and people<font color="#E5E5E5"> find</font><font color="#CCCCCC"> new reasons to like it</font>

94
00:04:30,600 --> 00:04:34,410
so what why really<font color="#E5E5E5"> so it depends on what</font>

95
00:04:33,540 --> 00:04:36,630
you're doing

96
00:04:34,410 --> 00:04:38,970
<font color="#CCCCCC">we like to hook all of the things</font>

97
00:04:36,630 --> 00:04:40,680
especially<font color="#E5E5E5"> the Linux kernel</font><font color="#CCCCCC"> so this</font>

98
00:04:38,970 --> 00:04:42,360
gives us<font color="#E5E5E5"> the ability</font><font color="#CCCCCC"> to do that</font><font color="#E5E5E5"> without</font>

99
00:04:40,680 --> 00:04:44,340
<font color="#E5E5E5">risking crashing the kernel which</font>

100
00:04:42,360 --> 00:04:47,640
happens when<font color="#E5E5E5"> you start writing kernel</font>

101
00:04:44,340 --> 00:04:50,310
modules<font color="#E5E5E5"> in C the talk is about kernel</font>

102
00:04:47,640 --> 00:04:52,050
tracing after all so<font color="#CCCCCC"> EB PF is</font>

103
00:04:50,310 --> 00:04:54,030
interesting to us because<font color="#E5E5E5"> it has</font><font color="#CCCCCC"> a</font>

104
00:04:52,050 --> 00:04:56,250
potential<font color="#CCCCCC"> to give D trace which is sort</font>

105
00:04:54,030 --> 00:05:00,570
of<font color="#E5E5E5"> the dynamic instrumentation framework</font>

106
00:04:56,250 --> 00:05:03,030
for<font color="#E5E5E5"> Solaris and</font><font color="#CCCCCC"> FreeBSD and MacOS a good</font>

107
00:05:00,570 --> 00:05:05,010
run for<font color="#E5E5E5"> its money maybe not in the power</font>

108
00:05:03,030 --> 00:05:07,320
<font color="#E5E5E5">of the things that it provides you</font>

109
00:05:05,010 --> 00:05:09,570
metadata for as sources<font color="#CCCCCC"> of events which</font>

110
00:05:07,320 --> 00:05:11,640
<font color="#CCCCCC">Linux is probably not going</font><font color="#E5E5E5"> to get to</font>

111
00:05:09,570 --> 00:05:14,010
<font color="#E5E5E5">that level of unified design</font><font color="#CCCCCC"> anytime</font>

112
00:05:11,640 --> 00:05:16,320
soon<font color="#CCCCCC"> but it's more programmatic and</font>

113
00:05:14,010 --> 00:05:18,750
focused on<font color="#E5E5E5"> lower level operations and</font>

114
00:05:16,320 --> 00:05:20,730
taking like C code and<font color="#E5E5E5"> compiling it to</font>

115
00:05:18,750 --> 00:05:23,790
this and then using the fact that you've

116
00:05:20,730 --> 00:05:26,760
basically<font color="#CCCCCC"> written C code to operate on C</font>

117
00:05:23,790 --> 00:05:29,040
code in the kernel<font color="#E5E5E5"> so</font><font color="#CCCCCC"> dtrace is focused</font>

118
00:05:26,760 --> 00:05:32,340
on like one-off<font color="#CCCCCC"> human-based command line</font>

119
00:05:29,040 --> 00:05:33,840
types of operations but<font color="#CCCCCC"> EBP F enables</font>

120
00:05:32,340 --> 00:05:36,239
you to do all<font color="#CCCCCC"> sorts of crazy</font><font color="#E5E5E5"> wacky</font>

121
00:05:33,840 --> 00:05:40,830
things so let's talk a<font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit about</font>

122
00:05:36,240 --> 00:05:45,120
tracing<font color="#CCCCCC"> tracing is basically</font><font color="#E5E5E5"> very fancy</font>

123
00:05:40,830 --> 00:05:47,070
logging<font color="#E5E5E5"> of program execution</font><font color="#CCCCCC"> that</font>

124
00:05:45,120 --> 00:05:48,630
doesn't<font color="#E5E5E5"> really mean</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> we don't</font>

125
00:05:47,070 --> 00:05:52,080
<font color="#CCCCCC">really</font><font color="#E5E5E5"> care about the logging so much we</font>

126
00:05:48,630 --> 00:05:53,490
care about<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know getting</font><font color="#E5E5E5"> at things</font>

127
00:05:52,080 --> 00:05:55,690
and hooking things and<font color="#CCCCCC"> making them do</font>

128
00:05:53,490 --> 00:05:58,420
<font color="#E5E5E5">things and observing things</font>

129
00:05:55,690 --> 00:06:00,880
so we care about dynamic tracing so what

130
00:05:58,420 --> 00:06:02,710
is dynamic tracing<font color="#CCCCCC"> there are two main</font>

131
00:06:00,880 --> 00:06:03,940
kinds there's the<font color="#E5E5E5"> kind where you enable</font>

132
00:06:02,710 --> 00:06:05,469
and disable<font color="#E5E5E5"> existing logging</font>

133
00:06:03,940 --> 00:06:07,180
functionality which we<font color="#E5E5E5"> don't really</font><font color="#CCCCCC"> care</font>

134
00:06:05,470 --> 00:06:08,890
<font color="#E5E5E5">about and then there is the kind where</font>

135
00:06:07,180 --> 00:06:11,410
<font color="#E5E5E5">you add arbitrary functionality that</font>

136
00:06:08,890 --> 00:06:12,820
wasn't there<font color="#E5E5E5"> before</font><font color="#CCCCCC"> we care</font><font color="#E5E5E5"> about the</font>

137
00:06:11,410 --> 00:06:15,150
<font color="#CCCCCC">latter</font><font color="#E5E5E5"> but we also still don't care</font>

138
00:06:12,820 --> 00:06:18,849
about the word logging we care about

139
00:06:15,150 --> 00:06:20,409
dynamic instrumentation so the two main

140
00:06:18,850 --> 00:06:22,240
<font color="#CCCCCC">kinds of dynamic instrumentation</font>

141
00:06:20,410 --> 00:06:24,250
depending on your perspective<font color="#CCCCCC"> there's</font>

142
00:06:22,240 --> 00:06:26,550
things like function hooking and things

143
00:06:24,250 --> 00:06:28,420
like instruction instrumentation<font color="#E5E5E5"> and</font>

144
00:06:26,550 --> 00:06:30,640
depending on<font color="#E5E5E5"> what you're doing and what</font>

145
00:06:28,420 --> 00:06:31,930
you're targeting<font color="#E5E5E5"> for your hooking maybe</font>

146
00:06:30,640 --> 00:06:35,229
you're hooking is actually implemented

147
00:06:31,930 --> 00:06:37,210
with instruction instrumentation<font color="#E5E5E5"> and you</font>

148
00:06:35,230 --> 00:06:39,430
know EBP F is basically like that so

149
00:06:37,210 --> 00:06:41,919
<font color="#E5E5E5">what's the the alternate title of this</font>

150
00:06:39,430 --> 00:06:43,390
talk is instrumenting<font color="#CCCCCC"> Linux with EBP F</font>

151
00:06:41,920 --> 00:06:45,220
for fun<font color="#E5E5E5"> profit a title that we</font>

152
00:06:43,390 --> 00:06:48,760
<font color="#CCCCCC">definitely not get accepted in 2018 had</font>

153
00:06:45,220 --> 00:06:50,320
we submitted with this so<font color="#E5E5E5"> so let's let's</font>

154
00:06:48,760 --> 00:06:53,890
go in the history<font color="#CCCCCC"> of Linux just a little</font>

155
00:06:50,320 --> 00:06:55,810
bit on<font color="#CCCCCC"> its tracing</font><font color="#E5E5E5"> technologies so the</font>

156
00:06:53,890 --> 00:06:58,060
most important<font color="#E5E5E5"> thing is K probes which</font>

157
00:06:55,810 --> 00:07:00,550
are over a decade old<font color="#E5E5E5"> but they've gotten</font>

158
00:06:58,060 --> 00:07:04,600
faster recently<font color="#E5E5E5"> and basically nowadays</font>

159
00:07:00,550 --> 00:07:06,490
<font color="#CCCCCC">they allow you</font><font color="#E5E5E5"> to hook eseni instruction</font>

160
00:07:04,600 --> 00:07:09,550
in the kernel really but if you try<font color="#E5E5E5"> to</font>

161
00:07:06,490 --> 00:07:12,220
hook a function at its entry

162
00:07:09,550 --> 00:07:14,650
<font color="#E5E5E5">it'll have extra</font><font color="#CCCCCC"> logic around seeing</font><font color="#E5E5E5"> it</font>

163
00:07:12,220 --> 00:07:16,060
to completion<font color="#E5E5E5"> on a return and so it'll</font>

164
00:07:14,650 --> 00:07:17,890
try to analyze it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> determine whether</font>

165
00:07:16,060 --> 00:07:19,270
or<font color="#E5E5E5"> not it can do the fast path and if</font>

166
00:07:17,890 --> 00:07:21,969
for whatever reason<font color="#CCCCCC"> it can't do a fast</font>

167
00:07:19,270 --> 00:07:23,109
path of finding all the exits it will

168
00:07:21,970 --> 00:07:24,640
essentially<font color="#CCCCCC"> just use a breakpoint in</font>

169
00:07:23,110 --> 00:07:27,960
single step<font color="#E5E5E5"> through which is slow and</font>

170
00:07:24,640 --> 00:07:30,430
<font color="#E5E5E5">you don't want to do that</font><font color="#CCCCCC"> F trace</font><font color="#E5E5E5"> is a</font>

171
00:07:27,960 --> 00:07:32,260
basically<font color="#CCCCCC"> filesystem API</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> adding</font>

172
00:07:30,430 --> 00:07:34,090
things like K probes into<font color="#E5E5E5"> the</font><font color="#CCCCCC"> kernel and</font>

173
00:07:32,260 --> 00:07:36,760
and<font color="#E5E5E5"> doing all sorts</font><font color="#CCCCCC"> of other stuff it's</font>

174
00:07:34,090 --> 00:07:39,969
not<font color="#E5E5E5"> super important</font><font color="#CCCCCC"> from our perspective</font>

175
00:07:36,760 --> 00:07:42,070
<font color="#E5E5E5">but it is used as part</font><font color="#CCCCCC"> of EPB F / 5 ents</font>

176
00:07:39,970 --> 00:07:43,750
<font color="#E5E5E5">is a whole bunch of crazy profiling</font>

177
00:07:42,070 --> 00:07:46,210
stuff but one of<font color="#E5E5E5"> the key features</font><font color="#CCCCCC"> is a</font>

178
00:07:43,750 --> 00:07:47,800
very fast ring buffer<font color="#E5E5E5"> for copying data</font>

179
00:07:46,210 --> 00:07:50,500
from the kernel to user space very

180
00:07:47,800 --> 00:07:53,110
quickly<font color="#E5E5E5"> trace points are essentially</font>

181
00:07:50,500 --> 00:07:54,910
<font color="#E5E5E5">that former kind of dynamic tracing</font>

182
00:07:53,110 --> 00:07:57,010
where the functionality was already

183
00:07:54,910 --> 00:07:59,980
there<font color="#E5E5E5"> and</font><font color="#CCCCCC"> new probes are essentially K</font>

184
00:07:57,010 --> 00:08:02,349
probes for user space<font color="#CCCCCC"> memory an e</font><font color="#E5E5E5"> BPF is</font>

185
00:07:59,980 --> 00:08:05,789
this fancy combining robot that plugs

186
00:08:02,350 --> 00:08:07,570
all the things together<font color="#E5E5E5"> so EBP F</font>

187
00:08:05,789 --> 00:08:09,310
basically integrates with<font color="#E5E5E5"> all these</font>

188
00:08:07,570 --> 00:08:10,570
different<font color="#E5E5E5"> kernel technologies and</font>

189
00:08:09,310 --> 00:08:12,340
the core concept<font color="#CCCCCC"> when using</font><font color="#E5E5E5"> it for</font>

190
00:08:10,570 --> 00:08:14,890
tracing is that you have your<font color="#CCCCCC"> eb</font><font color="#E5E5E5"> PF</font>

191
00:08:12,340 --> 00:08:17,530
program and you plug<font color="#E5E5E5"> it</font><font color="#CCCCCC"> in to some sort</font>

192
00:08:14,890 --> 00:08:20,770
of data source using<font color="#E5E5E5"> one of two api is</font>

193
00:08:17,530 --> 00:08:22,989
currently<font color="#E5E5E5"> then you use something like</font>

194
00:08:20,770 --> 00:08:26,409
<font color="#E5E5E5">the perfect ring</font><font color="#CCCCCC"> buffer or a</font><font color="#E5E5E5"> memory map</font>

195
00:08:22,990 --> 00:08:29,140
<font color="#CCCCCC">EP PF map</font><font color="#E5E5E5"> as your output to</font><font color="#CCCCCC"> user space</font>

196
00:08:26,410 --> 00:08:30,610
the<font color="#CCCCCC"> latter actually can</font><font color="#E5E5E5"> take is a</font>

197
00:08:29,140 --> 00:08:33,039
bi-directional mapping between<font color="#E5E5E5"> user</font>

198
00:08:30,610 --> 00:08:34,539
space and<font color="#CCCCCC"> in kernel space so the user</font>

199
00:08:33,039 --> 00:08:37,360
space can actually update that and<font color="#E5E5E5"> send</font>

200
00:08:34,539 --> 00:08:38,679
input to the kernel<font color="#E5E5E5"> so the sources that</font>

201
00:08:37,360 --> 00:08:40,180
<font color="#CCCCCC">we're working</font><font color="#E5E5E5"> on generally are your</font><font color="#CCCCCC"> k</font>

202
00:08:38,679 --> 00:08:41,620
probes your u probes your<font color="#E5E5E5"> trace points</font>

203
00:08:40,179 --> 00:08:45,010
and rot trace points which<font color="#E5E5E5"> are basically</font>

204
00:08:41,620 --> 00:08:47,110
trace points<font color="#CCCCCC"> the way</font><font color="#E5E5E5"> that this works is</font>

205
00:08:45,010 --> 00:08:48,790
that<font color="#CCCCCC"> you make a whole</font><font color="#E5E5E5"> bunch of crazy</font>

206
00:08:47,110 --> 00:08:50,800
syscalls and chain them together so<font color="#E5E5E5"> you</font>

207
00:08:48,790 --> 00:08:53,589
start with<font color="#CCCCCC"> your BPF</font><font color="#E5E5E5"> syscall to actually</font>

208
00:08:50,800 --> 00:08:57,310
make your program<font color="#CCCCCC"> then you use</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> F</font>

209
00:08:53,590 --> 00:08:59,290
trace API in<font color="#E5E5E5"> sisyphus to basically make</font>

210
00:08:57,310 --> 00:09:02,079
a<font color="#CCCCCC"> k' probe and then get an ID for it</font>

211
00:08:59,290 --> 00:09:05,860
then you<font color="#E5E5E5"> get a perfect by calling</font><font color="#CCCCCC"> perfe</font>

212
00:09:02,080 --> 00:09:07,750
<font color="#E5E5E5">open and you pass it in the the value</font>

213
00:09:05,860 --> 00:09:10,210
that you<font color="#E5E5E5"> got out the ID of the</font><font color="#CCCCCC"> k probe</font>

214
00:09:07,750 --> 00:09:12,970
<font color="#E5E5E5">and then after that you've made that you</font>

215
00:09:10,210 --> 00:09:15,280
attach the BPF program to it and then

216
00:09:12,970 --> 00:09:16,720
you enable it<font color="#CCCCCC"> that's the old format in</font>

217
00:09:15,280 --> 00:09:18,880
more<font color="#E5E5E5"> recent kernels there's a slightly</font>

218
00:09:16,720 --> 00:09:21,640
different<font color="#E5E5E5"> form where you</font><font color="#CCCCCC"> can skip the</font>

219
00:09:18,880 --> 00:09:23,560
<font color="#E5E5E5">the F trace trace FS entirely but in</font>

220
00:09:21,640 --> 00:09:26,230
practice it still<font color="#E5E5E5"> ends up</font><font color="#CCCCCC"> getting used</font>

221
00:09:23,560 --> 00:09:29,920
because this magic<font color="#E5E5E5"> number of</font><font color="#CCCCCC"> 6</font><font color="#E5E5E5"> on the</font>

222
00:09:26,230 --> 00:09:32,680
slide here is actually generally<font color="#E5E5E5"> gotten</font>

223
00:09:29,920 --> 00:09:34,329
through<font color="#CCCCCC"> it but</font><font color="#E5E5E5"> you don't need that so</font>

224
00:09:32,680 --> 00:09:36,489
everything else basically<font color="#E5E5E5"> follows the</font>

225
00:09:34,330 --> 00:09:39,040
same api's except for the<font color="#E5E5E5"> rod trace</font>

226
00:09:36,490 --> 00:09:43,510
points which leads the perf open

227
00:09:39,040 --> 00:09:46,329
entirely so how not to use<font color="#E5E5E5"> EPF is to do</font>

228
00:09:43,510 --> 00:09:47,920
is do not<font color="#E5E5E5"> is you know how how system D</font>

229
00:09:46,330 --> 00:09:50,950
is apparently using it which is by

230
00:09:47,920 --> 00:09:52,599
assembly by hand<font color="#E5E5E5"> it's really hard</font><font color="#CCCCCC"> it's</font>

231
00:09:50,950 --> 00:09:54,940
<font color="#CCCCCC">basically impossible</font><font color="#E5E5E5"> to do anything</font>

232
00:09:52,600 --> 00:09:56,830
complicated<font color="#CCCCCC"> or fancy and it's also</font>

233
00:09:54,940 --> 00:09:59,470
highly<font color="#E5E5E5"> error-prone I'd be very surprised</font>

234
00:09:56,830 --> 00:10:01,060
if<font color="#CCCCCC"> that</font><font color="#E5E5E5"> code was correct</font><font color="#CCCCCC"> so what should</font>

235
00:09:59,470 --> 00:10:04,030
you do<font color="#E5E5E5"> you should use this thing called</font>

236
00:10:01,060 --> 00:10:07,750
<font color="#E5E5E5">BCC</font><font color="#CCCCCC"> it's basically a framework for</font>

237
00:10:04,030 --> 00:10:09,040
compiling<font color="#CCCCCC"> C</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be PF</font><font color="#E5E5E5"> or EBP F and then</font>

238
00:10:07,750 --> 00:10:11,770
hooking it up<font color="#CCCCCC"> to all of</font><font color="#E5E5E5"> those fancy</font>

239
00:10:09,040 --> 00:10:14,949
sources this talk<font color="#E5E5E5"> I'd like</font><font color="#CCCCCC"> to clarify is</font>

240
00:10:11,770 --> 00:10:16,840
not really about BCC but we basically

241
00:10:14,950 --> 00:10:18,640
<font color="#E5E5E5">end up using it for everything</font><font color="#CCCCCC"> because</font>

242
00:10:16,840 --> 00:10:20,770
it's essentially the<font color="#CCCCCC"> only consumer</font><font color="#E5E5E5"> of</font>

243
00:10:18,640 --> 00:10:23,140
the kernel<font color="#E5E5E5"> API which is</font><font color="#CCCCCC"> also the case</font>

244
00:10:20,770 --> 00:10:25,029
because the<font color="#E5E5E5"> people developing BCC</font>

245
00:10:23,140 --> 00:10:27,970
also the<font color="#CCCCCC"> people writing</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> colonel code</font>

246
00:10:25,029 --> 00:10:29,589
for the<font color="#CCCCCC"> BPF so essentially the writing</font>

247
00:10:27,970 --> 00:10:30,790
their own<font color="#CCCCCC"> api's for them</font><font color="#E5E5E5"> which are</font>

248
00:10:29,589 --> 00:10:33,790
otherwise essentially completely

249
00:10:30,790 --> 00:10:35,500
undocumented<font color="#CCCCCC"> and where they are</font>

250
00:10:33,790 --> 00:10:37,510
documented it's completely lacking<font color="#E5E5E5"> and</font>

251
00:10:35,500 --> 00:10:38,890
none of<font color="#CCCCCC"> that multi call multi syscalls</font>

252
00:10:37,510 --> 00:10:40,240
stuff is really documented<font color="#E5E5E5"> anywhere I</font>

253
00:10:38,890 --> 00:10:42,160
got that from<font color="#E5E5E5"> reverse engineering how</font>

254
00:10:40,240 --> 00:10:44,980
this stuff works

255
00:10:42,160 --> 00:10:47,860
<font color="#E5E5E5">some BPF</font><font color="#CCCCCC"> BCC is the only real option for</font>

256
00:10:44,980 --> 00:10:50,980
<font color="#E5E5E5">doing this hooking so how do you write a</font>

257
00:10:47,860 --> 00:10:52,930
tracer with<font color="#E5E5E5"> BCC well but generally</font>

258
00:10:50,980 --> 00:10:54,700
<font color="#E5E5E5">you're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use the Python API that</font>

259
00:10:52,930 --> 00:10:56,199
it provides and you're going to

260
00:10:54,700 --> 00:10:58,209
<font color="#CCCCCC">unfortunately have to write it as a</font>

261
00:10:56,200 --> 00:10:59,649
single<font color="#E5E5E5"> Python file so the bigger this</font>

262
00:10:58,209 --> 00:11:03,189
code<font color="#CCCCCC"> gets the</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> complicated and</font>

263
00:10:59,649 --> 00:11:04,420
harder<font color="#E5E5E5"> it is to</font><font color="#CCCCCC"> write it and your C code</font>

264
00:11:03,190 --> 00:11:07,450
you're generally<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> store in a Python</font>

265
00:11:04,420 --> 00:11:09,370
<font color="#E5E5E5">string and then the structure the this</font>

266
00:11:07,450 --> 00:11:10,690
is the sort of<font color="#E5E5E5"> a big ultimate structure</font>

267
00:11:09,370 --> 00:11:12,790
<font color="#E5E5E5">but the really important thing here is</font>

268
00:11:10,690 --> 00:11:15,279
<font color="#CCCCCC">you have</font><font color="#E5E5E5"> your string you tell BCC to</font>

269
00:11:12,790 --> 00:11:18,519
<font color="#E5E5E5">compile it to</font><font color="#CCCCCC"> BPF and you tell it to</font>

270
00:11:15,279 --> 00:11:22,329
register<font color="#CCCCCC"> it to events like Kay probes</font>

271
00:11:18,519 --> 00:11:25,149
and and your<font color="#CCCCCC"> Maps</font><font color="#E5E5E5"> for i/o and an event</font>

272
00:11:22,329 --> 00:11:26,620
handler callback functions and and

273
00:11:25,149 --> 00:11:28,149
<font color="#E5E5E5">everything just works</font>

274
00:11:26,620 --> 00:11:30,850
the single Python file is<font color="#CCCCCC"> actually</font>

275
00:11:28,149 --> 00:11:32,290
because of<font color="#E5E5E5"> a weird limitation in it that</font>

276
00:11:30,850 --> 00:11:34,120
<font color="#E5E5E5">probably will get fixed</font><font color="#CCCCCC"> at some</font><font color="#E5E5E5"> point</font>

277
00:11:32,290 --> 00:11:37,110
but<font color="#CCCCCC"> right now it's</font><font color="#E5E5E5"> sort of annoying to</font>

278
00:11:34,120 --> 00:11:42,100
<font color="#E5E5E5">get around it so let's write some code</font>

279
00:11:37,110 --> 00:11:45,220
<font color="#CCCCCC">this is what a very simple EBP f-k probe</font>

280
00:11:42,100 --> 00:11:47,500
looks like when using<font color="#CCCCCC"> B</font><font color="#E5E5E5"> CC BCC</font><font color="#CCCCCC"> has a lot</font>

281
00:11:45,220 --> 00:11:49,660
of<font color="#E5E5E5"> code generation going</font><font color="#CCCCCC"> on behind</font><font color="#E5E5E5"> the</font>

282
00:11:47,500 --> 00:11:52,329
<font color="#E5E5E5">scenes so</font><font color="#CCCCCC"> this fancy kay probe</font>

283
00:11:49,660 --> 00:11:54,010
underscore underscore<font color="#E5E5E5"> syntax basically</font>

284
00:11:52,329 --> 00:11:57,130
lets it know<font color="#E5E5E5"> that there's a cape that</font>

285
00:11:54,010 --> 00:11:59,920
you want to use<font color="#E5E5E5"> a</font><font color="#CCCCCC"> k' probe on</font><font color="#E5E5E5"> this open</font>

286
00:11:57,130 --> 00:12:03,100
which is<font color="#E5E5E5"> the kernel side for the open</font>

287
00:11:59,920 --> 00:12:04,719
sis call<font color="#E5E5E5"> this the name of this changes</font>

288
00:12:03,100 --> 00:12:06,339
between kernel versions at least

289
00:12:04,720 --> 00:12:08,589
recently<font color="#E5E5E5"> there was a change it has</font><font color="#CCCCCC"> a</font>

290
00:12:06,339 --> 00:12:11,470
slightly different<font color="#E5E5E5"> syntax now but it</font>

291
00:12:08,589 --> 00:12:13,420
works the<font color="#CCCCCC"> same way</font><font color="#E5E5E5"> so we hook this</font><font color="#CCCCCC"> thing</font>

292
00:12:11,470 --> 00:12:15,730
and then we<font color="#CCCCCC"> just call</font><font color="#E5E5E5"> a print</font><font color="#CCCCCC"> K which is</font>

293
00:12:13,420 --> 00:12:17,019
<font color="#CCCCCC">sort of similar to your generic print K</font>

294
00:12:15,730 --> 00:12:20,470
if you've ever done kernel module

295
00:12:17,019 --> 00:12:22,630
<font color="#E5E5E5">development and then we run it and we</font>

296
00:12:20,470 --> 00:12:27,399
<font color="#CCCCCC">get nothing</font><font color="#E5E5E5"> why do we get nothing</font>

297
00:12:22,630 --> 00:12:32,050
<font color="#CCCCCC">oh yeah G libs</font><font color="#E5E5E5"> C piece of crap</font><font color="#CCCCCC"> so G Lib</font>

298
00:12:27,399 --> 00:12:33,760
C has for the past<font color="#CCCCCC"> while basically made</font>

299
00:12:32,050 --> 00:12:36,349
all of<font color="#E5E5E5"> your attempts in C code to call</font>

300
00:12:33,760 --> 00:12:39,560
<font color="#E5E5E5">open actually go to the open axis</font>

301
00:12:36,350 --> 00:12:42,140
call instead<font color="#E5E5E5"> so we need to actually hook</font>

302
00:12:39,560 --> 00:12:43,520
open<font color="#E5E5E5"> at and so once we do</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> start</font>

303
00:12:42,140 --> 00:12:46,699
seeing<font color="#CCCCCC"> all of the events all over</font><font color="#E5E5E5"> the</font>

304
00:12:43,520 --> 00:12:48,260
<font color="#E5E5E5">system but let's generalize the code bit</font>

305
00:12:46,700 --> 00:12:49,730
because<font color="#E5E5E5"> why</font><font color="#CCCCCC"> should we have two K probes</font>

306
00:12:48,260 --> 00:12:51,530
when we really<font color="#E5E5E5"> just want one piece of</font>

307
00:12:49,730 --> 00:12:53,300
functionality<font color="#E5E5E5"> because</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> it turns out</font>

308
00:12:51,530 --> 00:12:55,730
both open and<font color="#E5E5E5"> open at go to the same</font>

309
00:12:53,300 --> 00:12:57,560
place<font color="#CCCCCC"> do sis</font><font color="#E5E5E5"> open which is the</font>

310
00:12:55,730 --> 00:12:59,960
<font color="#E5E5E5">underlying implementation in the kernel</font>

311
00:12:57,560 --> 00:13:02,689
<font color="#E5E5E5">for them and so we can now hook them at</font>

312
00:12:59,960 --> 00:13:04,640
once<font color="#E5E5E5"> and in the print</font><font color="#CCCCCC"> k we now put</font><font color="#E5E5E5"> a</font>

313
00:13:02,690 --> 00:13:06,110
<font color="#E5E5E5">percent s and we'll try and print out</font>

314
00:13:04,640 --> 00:13:07,819
what the path name is and we start

315
00:13:06,110 --> 00:13:09,500
<font color="#E5E5E5">seeing all these random proc FS things</font>

316
00:13:07,820 --> 00:13:11,900
and system the journal<font color="#E5E5E5"> D is doing all</font>

317
00:13:09,500 --> 00:13:14,990
sorts of wacky<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> and system D to its</font>

318
00:13:11,900 --> 00:13:16,520
<font color="#E5E5E5">really scary stuff but</font><font color="#CCCCCC"> print K is the</font>

319
00:13:14,990 --> 00:13:19,280
trace print<font color="#E5E5E5"> K is</font><font color="#CCCCCC"> actually considered</font>

320
00:13:16,520 --> 00:13:21,079
harmful<font color="#CCCCCC"> and the reason for</font><font color="#E5E5E5"> this is that</font>

321
00:13:19,280 --> 00:13:22,850
it's a lot<font color="#E5E5E5"> like</font><font color="#CCCCCC"> f trace and that there's</font>

322
00:13:21,080 --> 00:13:25,070
one log buffer shared<font color="#E5E5E5"> across</font><font color="#CCCCCC"> the whole</font>

323
00:13:22,850 --> 00:13:26,810
system<font color="#E5E5E5"> which means that messages from</font>

324
00:13:25,070 --> 00:13:28,550
different<font color="#E5E5E5"> active tracers are kind of</font>

325
00:13:26,810 --> 00:13:32,030
running<font color="#E5E5E5"> into each other and no one knows</font>

326
00:13:28,550 --> 00:13:33,829
who<font color="#CCCCCC"> belong what belongs to</font><font color="#E5E5E5"> who</font><font color="#CCCCCC"> your EBP</font>

327
00:13:32,030 --> 00:13:37,670
<font color="#CCCCCC">F programs also</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> a race condition in</font>

328
00:13:33,830 --> 00:13:39,680
them with this<font color="#E5E5E5"> because the way the EBP</font><font color="#CCCCCC"> F</font>

329
00:13:37,670 --> 00:13:41,930
is safe is<font color="#E5E5E5"> that it's anchored to the</font>

330
00:13:39,680 --> 00:13:44,329
executing process that has created<font color="#E5E5E5"> the</font>

331
00:13:41,930 --> 00:13:48,170
object<font color="#E5E5E5"> or maintains control of the file</font>

332
00:13:44,330 --> 00:13:49,820
descriptor<font color="#CCCCCC"> and so essentially when your</font>

333
00:13:48,170 --> 00:13:53,510
last<font color="#E5E5E5"> remaining process with a handle in</font>

334
00:13:49,820 --> 00:13:55,610
that FD dies<font color="#CCCCCC"> the EBP</font><font color="#E5E5E5"> F gets unloaded and</font>

335
00:13:53,510 --> 00:13:57,860
<font color="#E5E5E5">then it unloads from the the K probes</font>

336
00:13:55,610 --> 00:13:59,240
that<font color="#E5E5E5"> it may be traced attached to so</font>

337
00:13:57,860 --> 00:14:01,220
there's a weird<font color="#E5E5E5"> race condition because</font>

338
00:13:59,240 --> 00:14:03,080
you terminate but if your<font color="#E5E5E5"> K probe is</font>

339
00:14:01,220 --> 00:14:06,020
still registered and hits then it<font color="#CCCCCC"> runs</font>

340
00:14:03,080 --> 00:14:07,670
the code it tries to<font color="#E5E5E5"> log but your K</font>

341
00:14:06,020 --> 00:14:08,990
probe in gets detach afterward but<font color="#E5E5E5"> there</font>

342
00:14:07,670 --> 00:14:10,910
was also no client to receive the

343
00:14:08,990 --> 00:14:12,920
message<font color="#E5E5E5"> the</font><font color="#CCCCCC"> messages</font><font color="#E5E5E5"> just stick around</font>

344
00:14:10,910 --> 00:14:14,900
until someone decides to read them<font color="#E5E5E5"> so</font>

345
00:14:12,920 --> 00:14:16,699
the next person<font color="#E5E5E5"> next</font><font color="#CCCCCC"> process to try and</font>

346
00:14:14,900 --> 00:14:18,199
trace this stuff<font color="#E5E5E5"> doing print K is</font>

347
00:14:16,700 --> 00:14:20,480
immediately<font color="#E5E5E5"> going to cease messages from</font>

348
00:14:18,200 --> 00:14:22,940
other people<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> a problem</font><font color="#CCCCCC"> so</font>

349
00:14:20,480 --> 00:14:24,800
<font color="#CCCCCC">instead what you have to do is you have</font>

350
00:14:22,940 --> 00:14:26,600
<font color="#CCCCCC">to rewrite the</font><font color="#E5E5E5"> whole thing to use your</font>

351
00:14:24,800 --> 00:14:29,990
own sort of custom data passing

352
00:14:26,600 --> 00:14:32,780
mechanism<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so in this the way</font><font color="#CCCCCC"> that we</font>

353
00:14:29,990 --> 00:14:34,850
do this is we use<font color="#E5E5E5"> the perf output / v</font>

354
00:14:32,780 --> 00:14:37,730
ents<font color="#E5E5E5"> ring buffer</font><font color="#CCCCCC"> and so we use this</font>

355
00:14:34,850 --> 00:14:42,320
fancy macro that basically<font color="#CCCCCC"> bcc provides</font>

356
00:14:37,730 --> 00:14:45,260
us to our C code<font color="#CCCCCC"> and then we also set up</font>

357
00:14:42,320 --> 00:14:48,470
a scratch<font color="#E5E5E5"> space because the EBP F buffer</font>

358
00:14:45,260 --> 00:14:49,730
stack is 512 bytes<font color="#E5E5E5"> and we're operating</font>

359
00:14:48,470 --> 00:14:51,320
on paths

360
00:14:49,730 --> 00:14:53,990
that are being<font color="#CCCCCC"> opened and</font><font color="#E5E5E5"> pals have a</font>

361
00:14:51,320 --> 00:14:56,180
max length of<font color="#E5E5E5"> 4096 on Linux and so</font>

362
00:14:53,990 --> 00:14:58,370
that's not<font color="#E5E5E5"> going to fit so we need to</font>

363
00:14:56,180 --> 00:15:00,680
have some off stack scratch<font color="#E5E5E5"> space to put</font>

364
00:14:58,370 --> 00:15:02,600
it in so we<font color="#E5E5E5"> use this per CPU array that</font>

365
00:15:00,680 --> 00:15:06,680
<font color="#CCCCCC">is entirely safe as long you stay within</font>

366
00:15:02,600 --> 00:15:09,529
<font color="#E5E5E5">the one thread of execution</font><font color="#CCCCCC"> and so we do</font>

367
00:15:06,680 --> 00:15:11,479
this<font color="#CCCCCC"> and then we</font><font color="#E5E5E5"> just have this sort of</font>

368
00:15:09,529 --> 00:15:13,010
<font color="#CCCCCC">annotation for how we access the field</font>

369
00:15:11,480 --> 00:15:14,329
in it we only have one<font color="#CCCCCC"> element in it</font>

370
00:15:13,010 --> 00:15:16,040
it's always<font color="#E5E5E5"> going to be there this is</font>

371
00:15:14,329 --> 00:15:18,920
never going to<font color="#E5E5E5"> fail but we have to put</font>

372
00:15:16,040 --> 00:15:20,870
it<font color="#E5E5E5"> in to please the</font><font color="#CCCCCC"> ebps</font><font color="#E5E5E5"> validator after</font>

373
00:15:18,920 --> 00:15:22,430
this we<font color="#CCCCCC"> just copy all of</font><font color="#E5E5E5"> the data in</font>

374
00:15:20,870 --> 00:15:25,579
from the call<font color="#E5E5E5"> in to the scratch space</font>

375
00:15:22,430 --> 00:15:27,649
<font color="#E5E5E5">and then we permit it which copies it</font><font color="#CCCCCC"> to</font>

376
00:15:25,579 --> 00:15:29,000
the fast buffer for for<font color="#CCCCCC"> sharing this</font><font color="#E5E5E5"> is</font>

377
00:15:27,649 --> 00:15:30,589
a lot of copies unfortunately there are

378
00:15:29,000 --> 00:15:33,110
ways to<font color="#CCCCCC"> optimize this</font><font color="#E5E5E5"> but we're not</font>

379
00:15:30,589 --> 00:15:34,970
<font color="#E5E5E5">getting into them right now so</font><font color="#CCCCCC"> on the</font>

380
00:15:33,110 --> 00:15:35,870
<font color="#CCCCCC">Python side if you're familiar</font><font color="#E5E5E5"> with</font>

381
00:15:34,970 --> 00:15:38,149
Python<font color="#CCCCCC"> c-types</font>

382
00:15:35,870 --> 00:15:40,790
it's an API that<font color="#E5E5E5"> essentially allows you</font>

383
00:15:38,149 --> 00:15:42,199
to interface with native code<font color="#E5E5E5"> so we</font>

384
00:15:40,790 --> 00:15:44,959
define<font color="#CCCCCC"> this</font><font color="#E5E5E5"> structure that basically</font>

385
00:15:42,199 --> 00:15:47,990
mimics our<font color="#CCCCCC"> C structure and then we</font>

386
00:15:44,959 --> 00:15:49,550
register a handler function<font color="#CCCCCC"> to that will</font>

387
00:15:47,990 --> 00:15:52,459
get<font color="#E5E5E5"> called every time</font><font color="#CCCCCC"> the perf submit</font>

388
00:15:49,550 --> 00:15:54,829
happens and we register it to the<font color="#E5E5E5"> table</font>

389
00:15:52,459 --> 00:15:58,250
named output which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the table that we</font>

390
00:15:54,829 --> 00:15:59,630
defined in<font color="#E5E5E5"> the C code then inside the</font>

391
00:15:58,250 --> 00:16:02,690
handler we do some<font color="#E5E5E5"> casting and then we</font>

392
00:15:59,630 --> 00:16:04,910
print the<font color="#CCCCCC"> data then at the end</font><font color="#E5E5E5"> we set up</font>

393
00:16:02,690 --> 00:16:08,209
this<font color="#CCCCCC"> kay probe pool call</font><font color="#E5E5E5"> on the BPF</font>

394
00:16:04,910 --> 00:16:09,680
objects that<font color="#CCCCCC"> BCC provides us and the</font>

395
00:16:08,209 --> 00:16:11,268
<font color="#E5E5E5">naming of this has</font><font color="#CCCCCC"> actually changed in</font>

396
00:16:09,680 --> 00:16:13,459
one of the more<font color="#CCCCCC"> recent versions of BCC</font>

397
00:16:11,269 --> 00:16:14,540
but it's still it's<font color="#CCCCCC"> still</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it</font>

398
00:16:13,459 --> 00:16:17,300
<font color="#CCCCCC">basically pulls for all of the</font>

399
00:16:14,540 --> 00:16:21,439
performance for<font color="#CCCCCC"> us so how does this</font><font color="#E5E5E5"> all</font>

400
00:16:17,300 --> 00:16:23,709
actually<font color="#CCCCCC"> work well let's just go into</font><font color="#E5E5E5"> a</font>

401
00:16:21,440 --> 00:16:26,720
<font color="#E5E5E5">little</font><font color="#CCCCCC"> bit of cleaned up s trace output</font>

402
00:16:23,709 --> 00:16:29,869
<font color="#CCCCCC">so the main thing</font><font color="#E5E5E5"> this to focus on here</font>

403
00:16:26,720 --> 00:16:31,670
is this BPF<font color="#E5E5E5"> prog load up at the top with</font>

404
00:16:29,870 --> 00:16:34,610
a type<font color="#E5E5E5"> K</font><font color="#CCCCCC"> Pro</font><font color="#E5E5E5"> because we want to make</font><font color="#CCCCCC"> a</font>

405
00:16:31,670 --> 00:16:37,279
probe<font color="#E5E5E5"> we get a file descriptor of</font><font color="#CCCCCC"> 5 for</font>

406
00:16:34,610 --> 00:16:41,860
that<font color="#E5E5E5"> then all of the cisterna</font><font color="#CCCCCC"> Lugg</font>

407
00:16:37,279 --> 00:16:45,019
tracing stuff is the<font color="#E5E5E5"> API for F trace the</font>

408
00:16:41,860 --> 00:16:46,279
<font color="#CCCCCC">missive s</font><font color="#E5E5E5"> and the way that you interact</font>

409
00:16:45,019 --> 00:16:47,930
<font color="#CCCCCC">the way that you create a K probe</font>

410
00:16:46,279 --> 00:16:50,660
through it is you write something<font color="#CCCCCC"> to it</font>

411
00:16:47,930 --> 00:16:53,870
<font color="#E5E5E5">and then you probe at the ID number that</font>

412
00:16:50,660 --> 00:16:57,230
<font color="#CCCCCC">you set to get</font><font color="#E5E5E5"> the actual ID value for</font>

413
00:16:53,870 --> 00:16:58,970
it then<font color="#E5E5E5"> you open a perfect on to that ID</font>

414
00:16:57,230 --> 00:17:01,490
passing it is the config it's a very

415
00:16:58,970 --> 00:17:02,640
flexible<font color="#E5E5E5"> call sequence so some config</font>

416
00:17:01,490 --> 00:17:04,140
maybe one of anything

417
00:17:02,640 --> 00:17:05,549
depending on what<font color="#E5E5E5"> type</font><font color="#CCCCCC"> of thing</font><font color="#E5E5E5"> you're</font>

418
00:17:04,140 --> 00:17:10,350
actually doing<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> very much like an</font>

419
00:17:05,549 --> 00:17:12,629
<font color="#CCCCCC">IEEE octal that</font><font color="#E5E5E5"> then we take</font><font color="#CCCCCC"> that and we</font>

420
00:17:10,349 --> 00:17:14,579
call an<font color="#CCCCCC"> IEEE octal actually on that</font><font color="#E5E5E5"> file</font>

421
00:17:12,630 --> 00:17:17,339
descriptor and then we actually<font color="#CCCCCC"> use that</font>

422
00:17:14,579 --> 00:17:20,849
<font color="#E5E5E5">to</font><font color="#CCCCCC"> attach the EBP</font><font color="#E5E5E5"> F program to it then</font>

423
00:17:17,339 --> 00:17:22,349
we enable it that way<font color="#E5E5E5"> re</font><font color="#CCCCCC"> BPF program is</font>

424
00:17:20,849 --> 00:17:26,399
<font color="#CCCCCC">actually associated with the K probe</font>

425
00:17:22,349 --> 00:17:28,949
through the perfet so what does this<font color="#CCCCCC"> BPF</font>

426
00:17:26,400 --> 00:17:32,040
<font color="#CCCCCC">perf output thing actually do fancy</font>

427
00:17:28,950 --> 00:17:33,720
macro actually doesn't do anything if

428
00:17:32,040 --> 00:17:36,389
<font color="#E5E5E5">you look at it it just sets up</font><font color="#CCCCCC"> a it</font>

429
00:17:33,720 --> 00:17:38,160
creates<font color="#CCCCCC"> a dynamic struct type and then</font>

430
00:17:36,390 --> 00:17:40,080
creates an<font color="#E5E5E5"> instance of it but it never</font>

431
00:17:38,160 --> 00:17:43,020
actually fills in the fields that's a

432
00:17:40,080 --> 00:17:43,770
bit weird<font color="#CCCCCC"> because basically it</font><font color="#E5E5E5"> doesn't</font>

433
00:17:43,020 --> 00:17:44,940
do anything it's fake

434
00:17:43,770 --> 00:17:46,980
the whole thing is just<font color="#E5E5E5"> completely fake</font>

435
00:17:44,940 --> 00:17:48,900
<font color="#CCCCCC">it's mocked out code</font><font color="#E5E5E5"> that's going to be</font>

436
00:17:46,980 --> 00:17:51,510
replaced<font color="#E5E5E5"> with code generation anyway so</font>

437
00:17:48,900 --> 00:17:54,000
it just<font color="#E5E5E5"> needs to pass like the compiler</font>

438
00:17:51,510 --> 00:17:56,160
<font color="#E5E5E5">you know quick check and then it gets</font>

439
00:17:54,000 --> 00:18:00,059
replaced this is actually pretty common

440
00:17:56,160 --> 00:18:01,919
<font color="#E5E5E5">way to do</font><font color="#CCCCCC"> code gen 8 based</font><font color="#E5E5E5"> api's so what</font>

441
00:18:00,059 --> 00:18:05,010
<font color="#CCCCCC">exactly</font><font color="#E5E5E5"> is going on when we call this</font>

442
00:18:01,919 --> 00:18:07,710
perf submit over<font color="#E5E5E5"> here well it turns out</font>

443
00:18:05,010 --> 00:18:10,890
<font color="#E5E5E5">that this gets replaced with a</font><font color="#CCCCCC"> BPF</font><font color="#E5E5E5"> perf</font>

444
00:18:07,710 --> 00:18:12,360
of an output<font color="#E5E5E5"> helper function call</font><font color="#CCCCCC"> and</font>

445
00:18:10,890 --> 00:18:14,250
<font color="#CCCCCC">the important</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> about this other</font>

446
00:18:12,360 --> 00:18:16,949
<font color="#E5E5E5">than that it passes all the arguments in</font>

447
00:18:14,250 --> 00:18:19,470
is that it passes<font color="#E5E5E5"> in a flag</font><font color="#CCCCCC"> called</font>

448
00:18:16,950 --> 00:18:21,510
current<font color="#CCCCCC"> CPU</font><font color="#E5E5E5"> identifier and what this</font>

449
00:18:19,470 --> 00:18:24,419
does<font color="#E5E5E5"> when it's passed that is it</font>

450
00:18:21,510 --> 00:18:28,500
attempts<font color="#CCCCCC"> to pull a</font><font color="#E5E5E5"> perfect object on the</font>

451
00:18:24,419 --> 00:18:31,770
kernel side<font color="#E5E5E5"> out of a perfect array</font><font color="#CCCCCC"> using</font>

452
00:18:28,500 --> 00:18:32,970
<font color="#CCCCCC">the</font><font color="#E5E5E5"> current CPU as the index the reason</font>

453
00:18:31,770 --> 00:18:34,770
that there is a<font color="#E5E5E5"> per phone</font>

454
00:18:32,970 --> 00:18:36,960
there is because back in<font color="#E5E5E5"> that s trace</font>

455
00:18:34,770 --> 00:18:40,168
output<font color="#E5E5E5"> we had a couple of these BPF map</font>

456
00:18:36,960 --> 00:18:42,570
update Elam's BPF<font color="#CCCCCC"> syscalls</font><font color="#E5E5E5"> which set</font>

457
00:18:40,169 --> 00:18:45,000
index<font color="#E5E5E5"> 0</font><font color="#CCCCCC"> &</font><font color="#E5E5E5"> 1 with some perfect file</font>

458
00:18:42,570 --> 00:18:46,168
descriptors<font color="#E5E5E5"> so at the beginning</font><font color="#CCCCCC"> of this</font>

459
00:18:45,000 --> 00:18:48,270
<font color="#CCCCCC">whole thing the first</font><font color="#E5E5E5"> thing we</font><font color="#CCCCCC"> actually</font>

460
00:18:46,169 --> 00:18:50,429
do is we<font color="#E5E5E5"> create that perfec array and</font>

461
00:18:48,270 --> 00:18:53,220
then<font color="#E5E5E5"> we get a file descriptor of</font><font color="#CCCCCC"> 3 back</font>

462
00:18:50,429 --> 00:18:55,860
for it<font color="#E5E5E5"> then towards</font><font color="#CCCCCC"> the end</font><font color="#E5E5E5"> we start</font>

463
00:18:53,220 --> 00:18:59,510
opening<font color="#CCCCCC"> up these /</font><font color="#E5E5E5"> 5 ents and in green</font>

464
00:18:55,860 --> 00:19:02,189
is 0<font color="#E5E5E5"> & 1 these</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> actually the CPU</font>

465
00:18:59,510 --> 00:19:05,280
<font color="#E5E5E5">indexes and then we get</font><font color="#CCCCCC"> back for it a</font>

466
00:19:02,190 --> 00:19:07,980
file descriptor<font color="#E5E5E5"> then what we do is</font><font color="#CCCCCC"> we</font>

467
00:19:05,280 --> 00:19:09,780
call this update<font color="#CCCCCC"> LM and we use the file</font>

468
00:19:07,980 --> 00:19:12,120
descriptor from the perf of n<font color="#CCCCCC"> Turay and</font>

469
00:19:09,780 --> 00:19:13,410
then we pass in this<font color="#E5E5E5"> key thing and</font><font color="#CCCCCC"> this</font>

470
00:19:12,120 --> 00:19:15,300
value thing that are these weird hex

471
00:19:13,410 --> 00:19:16,200
numbers these<font color="#E5E5E5"> are actually pointers so</font>

472
00:19:15,300 --> 00:19:18,840
key is that

473
00:19:16,200 --> 00:19:21,720
<font color="#E5E5E5">see the pointer to the zero value</font><font color="#CCCCCC"> for</font>

474
00:19:18,840 --> 00:19:23,370
the CPU<font color="#E5E5E5"> zero and value is actually</font><font color="#CCCCCC"> a</font>

475
00:19:21,720 --> 00:19:27,240
pointer to<font color="#E5E5E5"> the eight and then vice versa</font>

476
00:19:23,370 --> 00:19:29,610
at the bottom where<font color="#CCCCCC"> key is one and then</font>

477
00:19:27,240 --> 00:19:31,289
the value is<font color="#CCCCCC"> nine then we just start</font>

478
00:19:29,610 --> 00:19:34,830
pulling<font color="#E5E5E5"> on these file descriptors</font><font color="#CCCCCC"> and</font>

479
00:19:31,289 --> 00:19:37,649
<font color="#E5E5E5">everything is great so let's switch</font>

480
00:19:34,830 --> 00:19:40,769
switch gears a little<font color="#E5E5E5"> bit let's talk</font>

481
00:19:37,649 --> 00:19:45,510
<font color="#CCCCCC">about the UPF validator</font><font color="#E5E5E5"> hell it's a very</font>

482
00:19:40,769 --> 00:19:48,269
very painful place to be in to make<font color="#CCCCCC"> EBP</font>

483
00:19:45,510 --> 00:19:49,830
<font color="#CCCCCC">F safe because</font><font color="#E5E5E5"> otherwise it's doing all</font>

484
00:19:48,269 --> 00:19:51,899
sorts of<font color="#CCCCCC"> wacky things in the kernel it</font>

485
00:19:49,830 --> 00:19:53,760
potentially<font color="#CCCCCC"> has real code when it calls</font>

486
00:19:51,899 --> 00:19:55,979
functions<font color="#E5E5E5"> that can read and write</font><font color="#CCCCCC"> memory</font>

487
00:19:53,760 --> 00:19:58,010
it just takes values and things right it

488
00:19:55,980 --> 00:20:00,059
needs<font color="#E5E5E5"> to be safe so</font><font color="#CCCCCC"> Linux kernel</font>

489
00:19:58,010 --> 00:20:02,519
attempts<font color="#E5E5E5"> to validate all of the code</font>

490
00:20:00,059 --> 00:20:04,139
<font color="#CCCCCC">before actually loading it so you know</font>

491
00:20:02,519 --> 00:20:05,250
various things are you know your simple

492
00:20:04,139 --> 00:20:07,709
kind of checks that<font color="#E5E5E5"> everyone's aware</font><font color="#CCCCCC"> of</font>

493
00:20:05,250 --> 00:20:09,809
it<font color="#E5E5E5"> is not allowed</font><font color="#CCCCCC"> to loop</font><font color="#E5E5E5"> or jump</font>

494
00:20:07,710 --> 00:20:11,519
backwards<font color="#E5E5E5"> to prevent infinite loops</font>

495
00:20:09,809 --> 00:20:13,559
<font color="#E5E5E5">because this stuff runs straight in line</font>

496
00:20:11,519 --> 00:20:16,919
<font color="#CCCCCC">in the kernel</font><font color="#E5E5E5"> this stuff doesn't get</font>

497
00:20:13,559 --> 00:20:18,480
like preempted or broken out<font color="#CCCCCC"> of if this</font>

498
00:20:16,919 --> 00:20:20,159
<font color="#CCCCCC">thing manages to</font><font color="#E5E5E5"> get in an infinite loop</font>

499
00:20:18,480 --> 00:20:22,440
the whole kernel hangs at least on<font color="#CCCCCC"> that</font>

500
00:20:20,159 --> 00:20:23,850
one thread<font color="#CCCCCC"> but even if your code doesn't</font>

501
00:20:22,440 --> 00:20:25,850
<font color="#E5E5E5">have any loops the validator may reject</font>

502
00:20:23,850 --> 00:20:28,889
it<font color="#CCCCCC"> for a whole host</font><font color="#E5E5E5"> of reasons</font>

503
00:20:25,850 --> 00:20:31,019
<font color="#CCCCCC">you know you could have calls that</font>

504
00:20:28,889 --> 00:20:33,029
<font color="#E5E5E5">aren't static in line and then you're</font>

505
00:20:31,019 --> 00:20:34,320
technically jumping either forward to it

506
00:20:33,029 --> 00:20:35,909
and then when it returns you're jumping

507
00:20:34,320 --> 00:20:38,490
back<font color="#E5E5E5"> or maybe the function is defined</font>

508
00:20:35,909 --> 00:20:39,990
<font color="#E5E5E5">before you and then you're actually</font>

509
00:20:38,490 --> 00:20:44,070
<font color="#E5E5E5">jumping back</font><font color="#CCCCCC"> to call and it doesn't like</font>

510
00:20:39,990 --> 00:20:46,320
<font color="#CCCCCC">that</font><font color="#E5E5E5"> and so then we you know</font><font color="#CCCCCC"> we start</font>

511
00:20:44,070 --> 00:20:47,939
unrolling all of our loops to you know

512
00:20:46,320 --> 00:20:49,950
get around that<font color="#E5E5E5"> but then you have weird</font>

513
00:20:47,940 --> 00:20:51,570
compiler optimizations<font color="#E5E5E5"> to kick in so</font>

514
00:20:49,950 --> 00:20:54,899
sometimes your code was<font color="#CCCCCC"> actually wrong</font>

515
00:20:51,570 --> 00:20:57,120
to begin<font color="#CCCCCC"> with but</font><font color="#E5E5E5"> the compiler</font><font color="#CCCCCC"> BCC uses</font>

516
00:20:54,899 --> 00:20:59,580
an optimized compiler pass and so

517
00:20:57,120 --> 00:21:01,139
through clang<font color="#CCCCCC"> LVM</font><font color="#E5E5E5"> and so sometimes</font>

518
00:20:59,580 --> 00:21:04,139
you're wrong code if it<font color="#E5E5E5"> uses a small</font>

519
00:21:01,139 --> 00:21:04,500
<font color="#E5E5E5">enough I identify as a max operation</font>

520
00:21:04,139 --> 00:21:06,029
count

521
00:21:04,500 --> 00:21:08,399
it'll just<font color="#E5E5E5"> inline the</font><font color="#CCCCCC"> whole thing in a</font>

522
00:21:06,029 --> 00:21:09,690
loop<font color="#E5E5E5"> and unroll it</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> depending on what</font>

523
00:21:08,399 --> 00:21:11,399
<font color="#CCCCCC">you do</font><font color="#E5E5E5"> elsewhere in your code and</font><font color="#CCCCCC"> you</font>

524
00:21:09,690 --> 00:21:13,260
start adding features slowly but surely

525
00:21:11,399 --> 00:21:15,120
<font color="#CCCCCC">maybe something about the</font><font color="#E5E5E5"> optimization</font>

526
00:21:13,260 --> 00:21:16,830
changes and it's no<font color="#E5E5E5"> longer able to do</font>

527
00:21:15,120 --> 00:21:18,209
<font color="#E5E5E5">that and then you get an error</font><font color="#CCCCCC"> that</font>

528
00:21:16,830 --> 00:21:19,980
doesn't make any<font color="#CCCCCC"> sense because</font><font color="#E5E5E5"> the part</font>

529
00:21:18,210 --> 00:21:21,299
of the code<font color="#CCCCCC"> that you changed has nothing</font>

530
00:21:19,980 --> 00:21:24,299
to do<font color="#CCCCCC"> with where the error</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> coming</font>

531
00:21:21,299 --> 00:21:25,950
from so the validator also tries to

532
00:21:24,299 --> 00:21:27,389
ensure<font color="#E5E5E5"> that all of</font><font color="#CCCCCC"> your calls to</font><font color="#E5E5E5"> those</font>

533
00:21:25,950 --> 00:21:29,940
helper functions<font color="#E5E5E5"> are</font><font color="#CCCCCC"> passed</font><font color="#E5E5E5"> safe</font>

534
00:21:27,389 --> 00:21:32,459
arguments but<font color="#E5E5E5"> the lodge</font>

535
00:21:29,940 --> 00:21:34,220
for this is kind of bad<font color="#CCCCCC"> there are all</font>

536
00:21:32,460 --> 00:21:36,990
<font color="#E5E5E5">sorts of things that when you're clearly</font>

537
00:21:34,220 --> 00:21:38,610
have bounds<font color="#E5E5E5"> that you're not breaking out</font>

538
00:21:36,990 --> 00:21:40,379
<font color="#CCCCCC">of</font><font color="#E5E5E5"> everything is fine the validator just</font>

539
00:21:38,610 --> 00:21:42,269
doesn't realize<font color="#CCCCCC"> it doesn't</font><font color="#E5E5E5"> pick up on it</font>

540
00:21:40,379 --> 00:21:44,340
the reason<font color="#CCCCCC"> for this</font><font color="#E5E5E5"> is usually that the</font>

541
00:21:42,269 --> 00:21:46,169
optimizer<font color="#E5E5E5"> has actually cut</font><font color="#CCCCCC"> them out</font><font color="#E5E5E5"> and</font>

542
00:21:44,340 --> 00:21:48,090
the compiler is smarter than<font color="#E5E5E5"> the</font>

543
00:21:46,169 --> 00:21:51,179
validator is<font color="#E5E5E5"> and this leads to a lot</font><font color="#CCCCCC"> of</font>

544
00:21:48,090 --> 00:21:55,350
problems<font color="#CCCCCC"> so the more code you try to add</font>

545
00:21:51,179 --> 00:21:57,269
to<font color="#CCCCCC"> make your code obviously</font><font color="#E5E5E5"> safe with</font>

546
00:21:55,350 --> 00:21:59,668
bounds checks the more the compiler

547
00:21:57,269 --> 00:22:01,320
aggressively optimizes them out<font color="#CCCCCC"> and so</font>

548
00:21:59,669 --> 00:22:04,230
then the validator is<font color="#CCCCCC"> left with nothing</font>

549
00:22:01,320 --> 00:22:06,480
<font color="#E5E5E5">so you need to play really crazy tricks</font>

550
00:22:04,230 --> 00:22:08,549
<font color="#E5E5E5">to prevent the optimizer from a leading</font>

551
00:22:06,480 --> 00:22:10,529
out the checks<font color="#E5E5E5"> so the validator can know</font>

552
00:22:08,549 --> 00:22:12,149
that<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> doing them and then</font>

553
00:22:10,529 --> 00:22:14,850
additionally but turning<font color="#E5E5E5"> on the updates</font>

554
00:22:12,149 --> 00:22:16,408
to<font color="#E5E5E5"> either BCC</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> Linux kernel you may</font>

555
00:22:14,850 --> 00:22:18,539
have valid code that becomes invalid or

556
00:22:16,409 --> 00:22:19,789
invalid code that becomes valid<font color="#E5E5E5"> anything</font>

557
00:22:18,539 --> 00:22:21,690
can<font color="#E5E5E5"> happen</font>

558
00:22:19,789 --> 00:22:24,779
sometimes<font color="#CCCCCC"> something's valid error is a</font>

559
00:22:21,690 --> 00:22:26,309
really creepy<font color="#E5E5E5"> like we've had code that</font>

560
00:22:24,779 --> 00:22:28,259
<font color="#E5E5E5">was rejected</font><font color="#CCCCCC"> or accepted based on</font>

561
00:22:26,309 --> 00:22:31,230
whether<font color="#E5E5E5"> or</font><font color="#CCCCCC"> not a function returned a</font>

562
00:22:28,259 --> 00:22:36,720
bool or a size T that was<font color="#E5E5E5"> either 0 or 1</font>

563
00:22:31,230 --> 00:22:38,220
<font color="#E5E5E5">it was being stored in a you int</font><font color="#CCCCCC"> 8 T and</font>

564
00:22:36,720 --> 00:22:40,110
depending<font color="#E5E5E5"> on other parts of the code</font>

565
00:22:38,220 --> 00:22:41,460
that<font color="#CCCCCC"> we would</font><font color="#E5E5E5"> change or like comments</font>

566
00:22:40,110 --> 00:22:44,250
out one line somewhere else in the<font color="#E5E5E5"> code</font>

567
00:22:41,460 --> 00:22:45,960
<font color="#E5E5E5">the bull was accepted or the size T was</font>

568
00:22:44,250 --> 00:22:47,490
accepted we just commented<font color="#E5E5E5"> that one of</font>

569
00:22:45,960 --> 00:22:51,809
them be accepted the other rejected<font color="#E5E5E5"> made</font>

570
00:22:47,490 --> 00:22:54,899
no sense at all so we at a certain point

571
00:22:51,809 --> 00:22:57,299
I got really<font color="#CCCCCC"> mad and I wrote this kernel</font>

572
00:22:54,899 --> 00:23:00,000
module that just really<font color="#CCCCCC"> Hackel e hooks</font>

573
00:22:57,299 --> 00:23:01,200
into the<font color="#E5E5E5"> validator</font><font color="#CCCCCC"> to bypass</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> lot of</font>

574
00:23:00,000 --> 00:23:04,340
the checks so I could<font color="#CCCCCC"> just write code</font>

575
00:23:01,200 --> 00:23:07,769
when I need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> write damn validator</font>

576
00:23:04,340 --> 00:23:09,570
<font color="#E5E5E5">doesn't know what bounds are so I will</font>

577
00:23:07,769 --> 00:23:13,679
tell it what the bounds are<font color="#CCCCCC"> they're all</font>

578
00:23:09,570 --> 00:23:16,019
safe so it turns<font color="#E5E5E5"> out the validator</font><font color="#CCCCCC"> is</font>

579
00:23:13,679 --> 00:23:17,909
actually super like<font color="#E5E5E5"> tightly coupled to</font>

580
00:23:16,019 --> 00:23:20,610
<font color="#E5E5E5">the interpreter in fact you can't just</font>

581
00:23:17,909 --> 00:23:22,769
turn<font color="#E5E5E5"> it off</font><font color="#CCCCCC"> because as it processes</font>

582
00:23:20,610 --> 00:23:24,299
through the code<font color="#CCCCCC"> it sets all of these</font>

583
00:23:22,769 --> 00:23:25,919
<font color="#E5E5E5">fields on parts of the code</font><font color="#CCCCCC"> that are</font>

584
00:23:24,299 --> 00:23:28,500
necessary for<font color="#CCCCCC"> it to actually load and</font>

585
00:23:25,919 --> 00:23:30,990
run so you can't you have to<font color="#E5E5E5"> put in</font>

586
00:23:28,500 --> 00:23:33,120
these really<font color="#E5E5E5"> careful hooks into it to</font>

587
00:23:30,990 --> 00:23:35,519
skip<font color="#CCCCCC"> certain checks and then set up fake</font>

588
00:23:33,120 --> 00:23:38,008
bounds<font color="#E5E5E5"> on other parts after they've been</font>

589
00:23:35,519 --> 00:23:42,480
set before<font color="#E5E5E5"> with bad values so you don't</font>

590
00:23:38,009 --> 00:23:43,470
<font color="#E5E5E5">get over overruled so we have this hacky</font>

591
00:23:42,480 --> 00:23:47,460
kernel mod

592
00:23:43,470 --> 00:23:50,460
<font color="#CCCCCC">you'll</font><font color="#E5E5E5"> POC called Yolo</font><font color="#CCCCCC"> EBP F of course</font>

593
00:23:47,460 --> 00:23:52,559
of course<font color="#CCCCCC"> it implements its own custom</font>

594
00:23:50,460 --> 00:23:55,320
function hooking implementation<font color="#CCCCCC"> because</font>

595
00:23:52,559 --> 00:23:57,960
it's<font color="#E5E5E5"> useful in weird cases where we have</font>

596
00:23:55,320 --> 00:23:59,399
EBP<font color="#E5E5E5"> F but we don't have like F trace API</font>

597
00:23:57,960 --> 00:24:01,429
available<font color="#CCCCCC"> because someone modified</font>

598
00:23:59,400 --> 00:24:04,740
something in<font color="#E5E5E5"> their</font><font color="#CCCCCC"> kernel configure</font>

599
00:24:01,429 --> 00:24:07,470
<font color="#CCCCCC">caveat sexy super x86 64 only like very</font>

600
00:24:04,740 --> 00:24:11,940
specifically<font color="#E5E5E5"> I have just</font><font color="#CCCCCC"> shellcode in</font>

601
00:24:07,470 --> 00:24:12,809
there in like strings and arrays<font color="#CCCCCC"> and it</font>

602
00:24:11,940 --> 00:24:14,370
probably<font color="#E5E5E5"> doesn't work with kernel</font>

603
00:24:12,809 --> 00:24:16,289
current kernel versions almost<font color="#E5E5E5"> certainly</font>

604
00:24:14,370 --> 00:24:19,620
not<font color="#CCCCCC"> 420 which dropped a</font><font color="#E5E5E5"> couple days ago</font>

605
00:24:16,289 --> 00:24:21,090
<font color="#CCCCCC">and you know</font><font color="#E5E5E5"> if you have unsafe EBP F</font>

606
00:24:19,620 --> 00:24:23,219
Cody could get it could very well crash

607
00:24:21,090 --> 00:24:24,990
your kernel we were<font color="#E5E5E5"> going to make this</font>

608
00:24:23,220 --> 00:24:26,010
code<font color="#CCCCCC"> available more</font><font color="#E5E5E5"> to prove a point</font>

609
00:24:24,990 --> 00:24:28,380
than anything<font color="#E5E5E5"> else no one should</font>

610
00:24:26,010 --> 00:24:30,720
actually<font color="#CCCCCC"> use</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> we have a</font><font color="#E5E5E5"> link</font><font color="#CCCCCC"> to our</font>

611
00:24:28,380 --> 00:24:32,490
<font color="#E5E5E5">repo at the end of the slides</font><font color="#CCCCCC"> will</font>

612
00:24:30,720 --> 00:24:37,620
actually be<font color="#E5E5E5"> making it public</font><font color="#CCCCCC"> right after</font>

613
00:24:32,490 --> 00:24:40,080
the talk<font color="#E5E5E5"> so if you don't have the</font><font color="#CCCCCC"> luxury</font>

614
00:24:37,620 --> 00:24:42,600
of such a hacky kernel module what can

615
00:24:40,080 --> 00:24:44,220
you do well<font color="#E5E5E5"> there are a couple of things</font>

616
00:24:42,600 --> 00:24:46,590
<font color="#CCCCCC">that you</font><font color="#E5E5E5"> need to do to appease the</font>

617
00:24:44,220 --> 00:24:49,440
validator<font color="#E5E5E5"> one is to initialize your</font>

618
00:24:46,590 --> 00:24:51,240
<font color="#E5E5E5">stack memory now this is actually a</font>

619
00:24:49,440 --> 00:24:52,830
generic sort of vulnerability<font color="#E5E5E5"> in</font>

620
00:24:51,240 --> 00:24:54,690
networking kernel service is anything

621
00:24:52,830 --> 00:24:56,490
<font color="#E5E5E5">that</font><font color="#CCCCCC"> crosses a trust boundary where if</font>

622
00:24:54,690 --> 00:24:57,330
you have a struct<font color="#CCCCCC"> on your stack or</font>

623
00:24:56,490 --> 00:24:59,100
anywhere else<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you haven't</font>

624
00:24:57,330 --> 00:25:00,899
initialized the memory and it has

625
00:24:59,100 --> 00:25:02,908
padding spaces between the fields and

626
00:25:00,900 --> 00:25:04,830
you try<font color="#E5E5E5"> to do something</font><font color="#CCCCCC"> like mem copy it</font>

627
00:25:02,909 --> 00:25:06,450
or just write it over<font color="#CCCCCC"> to somewhere else</font>

628
00:25:04,830 --> 00:25:08,520
<font color="#E5E5E5">you're going to copy what's in those</font>

629
00:25:06,450 --> 00:25:11,520
padding fields which is<font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> what</font>

630
00:25:08,520 --> 00:25:13,918
you<font color="#E5E5E5"> meant to do so the EPF really gets</font>

631
00:25:11,520 --> 00:25:15,539
mad at<font color="#E5E5E5"> this for no real reason because</font>

632
00:25:13,919 --> 00:25:16,799
like you're super privileged when you're

633
00:25:15,539 --> 00:25:18,990
doing this and<font color="#E5E5E5"> you're already</font>

634
00:25:16,799 --> 00:25:20,158
intentionally leaking kernel<font color="#CCCCCC"> memory so</font>

635
00:25:18,990 --> 00:25:22,830
it doesn't<font color="#E5E5E5"> really make sense that it</font>

636
00:25:20,159 --> 00:25:24,150
gets mad<font color="#CCCCCC"> about you doing</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> but you</font>

637
00:25:22,830 --> 00:25:25,620
basically<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to do everything that</font><font color="#E5E5E5"> you</font>

638
00:25:24,150 --> 00:25:29,850
<font color="#CCCCCC">can if</font><font color="#E5E5E5"> you're copying something from the</font>

639
00:25:25,620 --> 00:25:31,379
stack<font color="#E5E5E5"> to basically just not have those</font>

640
00:25:29,850 --> 00:25:33,389
padding fields<font color="#E5E5E5"> there are so many things</font>

641
00:25:31,380 --> 00:25:35,909
you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> do next you want to implement</font>

642
00:25:33,390 --> 00:25:39,570
<font color="#CCCCCC">your loops so a lot of pragma unroll</font>

643
00:25:35,909 --> 00:25:41,940
through clang<font color="#CCCCCC"> LLVM</font><font color="#E5E5E5"> api to statically</font>

644
00:25:39,570 --> 00:25:43,889
unroll any static bound bloop loops and

645
00:25:41,940 --> 00:25:47,820
then everything is basically<font color="#E5E5E5"> static</font>

646
00:25:43,890 --> 00:25:50,309
inline function calls any newer kernels

647
00:25:47,820 --> 00:25:51,539
support not having that<font color="#E5E5E5"> but also no</font>

648
00:25:50,309 --> 00:25:55,350
<font color="#E5E5E5">one's on those new kernels yet so it</font>

649
00:25:51,539 --> 00:25:57,360
doesn't matter<font color="#E5E5E5"> then a lot</font><font color="#CCCCCC"> of kernel code</font>

650
00:25:55,350 --> 00:25:59,219
<font color="#E5E5E5">even if it is static in</font>

651
00:25:57,360 --> 00:26:00,840
functions that are in headers that<font color="#CCCCCC"> are</font>

652
00:25:59,220 --> 00:26:02,760
<font color="#CCCCCC">aim that</font><font color="#E5E5E5"> are aimed towards helping you</font>

653
00:26:00,840 --> 00:26:05,760
parse various pieces of<font color="#CCCCCC"> Colonel data</font>

654
00:26:02,760 --> 00:26:08,970
structures<font color="#CCCCCC"> they don't really</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> that</font>

655
00:26:05,760 --> 00:26:10,770
<font color="#CCCCCC">well in BCC sometimes because BCC every</font>

656
00:26:08,970 --> 00:26:13,440
time it does<font color="#CCCCCC"> a pointer to a reference to</font>

657
00:26:10,770 --> 00:26:15,870
memory<font color="#CCCCCC"> that's not in the</font><font color="#E5E5E5"> BPF memory</font>

658
00:26:13,440 --> 00:26:18,360
region<font color="#E5E5E5"> it will actually instrument that</font>

659
00:26:15,870 --> 00:26:20,699
<font color="#E5E5E5">it'll it'll just code gen it to be this</font>

660
00:26:18,360 --> 00:26:22,500
call to a helper function called<font color="#E5E5E5"> BPF</font>

661
00:26:20,700 --> 00:26:25,890
probe read that will actually<font color="#E5E5E5"> pull the</font>

662
00:26:22,500 --> 00:26:28,410
data<font color="#E5E5E5"> out and so it's not great at</font>

663
00:26:25,890 --> 00:26:30,870
converting<font color="#E5E5E5"> kind of chained calls and</font>

664
00:26:28,410 --> 00:26:33,000
anything<font color="#E5E5E5"> within weird scoping contexts</font>

665
00:26:30,870 --> 00:26:35,899
<font color="#E5E5E5">in</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> and so some of that will</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> fail</font>

666
00:26:33,000 --> 00:26:38,010
<font color="#CCCCCC">to convert and and it just won't work</font><font color="#E5E5E5"> so</font>

667
00:26:35,900 --> 00:26:39,480
<font color="#CCCCCC">basically there are</font><font color="#E5E5E5"> a lot of kernel</font>

668
00:26:38,010 --> 00:26:41,910
functions where you're<font color="#CCCCCC"> dealing with</font>

669
00:26:39,480 --> 00:26:42,960
things<font color="#E5E5E5"> like the task struct or anything</font>

670
00:26:41,910 --> 00:26:44,429
<font color="#CCCCCC">that you want to</font><font color="#E5E5E5"> get out of that you're</font>

671
00:26:42,960 --> 00:26:46,500
gonna have to call BPF probe read

672
00:26:44,429 --> 00:26:48,990
manually and pull it out piece<font color="#CCCCCC"> by piece</font>

673
00:26:46,500 --> 00:26:51,660
which is<font color="#CCCCCC"> really annoying</font>

674
00:26:48,990 --> 00:26:53,160
then<font color="#E5E5E5"> you've depending on what you're</font>

675
00:26:51,660 --> 00:26:55,860
doing<font color="#CCCCCC"> if you're trying</font><font color="#E5E5E5"> to go for super</font>

676
00:26:53,160 --> 00:26:57,570
high performance<font color="#E5E5E5"> you may need to sort of</font>

677
00:26:55,860 --> 00:26:59,549
implement<font color="#CCCCCC"> your</font><font color="#E5E5E5"> own ring buffer</font><font color="#CCCCCC"> to</font>

678
00:26:57,570 --> 00:27:02,189
conservatively send data<font color="#E5E5E5"> down to</font><font color="#CCCCCC"> user</font>

679
00:26:59,549 --> 00:27:04,350
space with as<font color="#E5E5E5"> minimal amount of copying</font>

680
00:27:02,190 --> 00:27:05,610
<font color="#E5E5E5">as possible if you try to do</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> you</font>

681
00:27:04,350 --> 00:27:07,620
need<font color="#E5E5E5"> to actually have some sort you</font>

682
00:27:05,610 --> 00:27:09,750
can't loop<font color="#E5E5E5"> so you need to have a switch</font>

683
00:27:07,620 --> 00:27:11,820
<font color="#CCCCCC">that gets called every time that</font>

684
00:27:09,750 --> 00:27:14,429
attempts to update a synchronized

685
00:27:11,820 --> 00:27:17,340
counter variable<font color="#CCCCCC"> and then at the end</font><font color="#E5E5E5"> of</font>

686
00:27:14,429 --> 00:27:19,080
it it needs to roll back<font color="#CCCCCC"> over</font><font color="#E5E5E5"> this is</font>

687
00:27:17,340 --> 00:27:22,199
actually<font color="#CCCCCC"> very carefully</font><font color="#E5E5E5"> written code</font>

688
00:27:19,080 --> 00:27:25,230
that appeases<font color="#E5E5E5"> the validator if in this</font>

689
00:27:22,200 --> 00:27:27,299
particular<font color="#E5E5E5"> case we're just</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> 0</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> 1</font>

690
00:27:25,230 --> 00:27:30,690
if<font color="#E5E5E5"> 2 happens we're supposed to cut back</font>

691
00:27:27,299 --> 00:27:33,389
over to<font color="#CCCCCC"> 0 so if you</font><font color="#E5E5E5"> tried to</font><font color="#CCCCCC"> actually</font>

692
00:27:30,690 --> 00:27:34,919
<font color="#E5E5E5">put a case 2 in here DB v validator</font>

693
00:27:33,390 --> 00:27:37,230
would just not accept it<font color="#E5E5E5"> for whatever</font>

694
00:27:34,919 --> 00:27:38,850
reason<font color="#CCCCCC"> so you need to you need to</font><font color="#E5E5E5"> have</font>

695
00:27:37,230 --> 00:27:40,710
<font color="#E5E5E5">the default case</font><font color="#CCCCCC"> actually flip it over</font>

696
00:27:38,850 --> 00:27:45,360
and you can't have another case<font color="#CCCCCC"> actually</font>

697
00:27:40,710 --> 00:27:47,100
flip it over<font color="#CCCCCC"> for whatever reason so and</font>

698
00:27:45,360 --> 00:27:49,678
then a lot<font color="#CCCCCC"> of the kernel data structures</font>

699
00:27:47,100 --> 00:27:50,850
<font color="#E5E5E5">are actually very dynamic not in the</font>

700
00:27:49,679 --> 00:27:52,620
sense that they're<font color="#E5E5E5"> just pointers to</font>

701
00:27:50,850 --> 00:27:53,760
pointers to pointers<font color="#E5E5E5"> but in the sense</font>

702
00:27:52,620 --> 00:27:55,918
that<font color="#E5E5E5"> they're actually</font><font color="#CCCCCC"> ease crammed</font>

703
00:27:53,760 --> 00:27:57,840
structs that are just byte copied<font color="#E5E5E5"> into</font>

704
00:27:55,919 --> 00:28:00,000
each other all ham-fisted

705
00:27:57,840 --> 00:28:01,830
and if you want to pull things out of

706
00:28:00,000 --> 00:28:04,290
<font color="#E5E5E5">them you need to essentially walk</font>

707
00:28:01,830 --> 00:28:06,449
dynamic structures of pointers to<font color="#E5E5E5"> things</font>

708
00:28:04,290 --> 00:28:07,678
and pull them out and do<font color="#E5E5E5"> stuff and EBP</font><font color="#CCCCCC"> F</font>

709
00:28:06,450 --> 00:28:09,809
doesn't like loops so you need to do

710
00:28:07,679 --> 00:28:11,640
that statically with both unrolled loops

711
00:28:09,809 --> 00:28:13,590
and<font color="#CCCCCC"> Static inline fun</font>

712
00:28:11,640 --> 00:28:14,700
and so you just<font color="#E5E5E5"> need to be</font><font color="#CCCCCC"> very careful</font>

713
00:28:13,590 --> 00:28:16,830
if you want to do it it's<font color="#CCCCCC"> very tricky</font>

714
00:28:14,700 --> 00:28:18,420
<font color="#CCCCCC">but it'll work usually the most</font>

715
00:28:16,830 --> 00:28:21,090
important thing when<font color="#CCCCCC"> doing this though</font>

716
00:28:18,420 --> 00:28:24,090
is actually<font color="#E5E5E5"> to know when you don't have</font>

717
00:28:21,090 --> 00:28:26,129
enough<font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of unrolled loops to fully</font>

718
00:28:24,090 --> 00:28:27,809
count out all the data and you need to

719
00:28:26,130 --> 00:28:30,000
you need to<font color="#CCCCCC"> Bale gracefully when</font><font color="#E5E5E5"> you do</font>

720
00:28:27,809 --> 00:28:34,530
this<font color="#E5E5E5"> know that</font><font color="#CCCCCC"> you're you're truncating</font>

721
00:28:30,000 --> 00:28:36,870
the data somehow<font color="#E5E5E5"> and then lastly are not</font>

722
00:28:34,530 --> 00:28:37,950
quite lastly but one of the more super

723
00:28:36,870 --> 00:28:40,139
important things<font color="#E5E5E5"> when you're when</font><font color="#CCCCCC"> you're</font>

724
00:28:37,950 --> 00:28:41,400
doing<font color="#E5E5E5"> things in the kernel</font><font color="#CCCCCC"> ebf</font><font color="#E5E5E5"> the</font>

725
00:28:40,140 --> 00:28:43,140
reason you do it<font color="#E5E5E5"> is</font><font color="#CCCCCC"> because you want it</font>

726
00:28:41,400 --> 00:28:44,760
<font color="#E5E5E5">to be fast otherwise</font><font color="#CCCCCC"> you just use audit</font>

727
00:28:43,140 --> 00:28:45,929
<font color="#CCCCCC">D for those things</font><font color="#E5E5E5"> so you want to</font>

728
00:28:44,760 --> 00:28:47,400
actually be<font color="#CCCCCC"> doing a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of</font>

729
00:28:45,929 --> 00:28:49,500
<font color="#E5E5E5">pre-processing</font><font color="#CCCCCC"> in the kernel to do</font>

730
00:28:47,400 --> 00:28:50,370
<font color="#CCCCCC">filtering but to do that</font><font color="#E5E5E5"> filtering you</font>

731
00:28:49,500 --> 00:28:52,260
need to<font color="#CCCCCC"> actually do things</font><font color="#E5E5E5"> like</font>

732
00:28:50,370 --> 00:28:54,510
comparisons and other things<font color="#E5E5E5"> like that</font>

733
00:28:52,260 --> 00:28:56,460
<font color="#CCCCCC">and if you need</font><font color="#E5E5E5"> to determine that app it</font>

734
00:28:54,510 --> 00:29:00,150
was<font color="#CCCCCC"> within a set</font><font color="#E5E5E5"> how are</font><font color="#CCCCCC"> you going</font><font color="#E5E5E5"> to do</font>

735
00:28:56,460 --> 00:29:02,580
that<font color="#CCCCCC"> without recursion</font><font color="#E5E5E5"> or loops well</font>

736
00:29:00,150 --> 00:29:05,790
what you can do is you can do something

737
00:29:02,580 --> 00:29:08,340
<font color="#CCCCCC">like have a balanced binary search</font><font color="#E5E5E5"> tree</font>

738
00:29:05,790 --> 00:29:10,350
<font color="#E5E5E5">in user space walk through it and code</font>

739
00:29:08,340 --> 00:29:13,918
<font color="#CCCCCC">gen out what the comparison</font><font color="#E5E5E5"> would be</font>

740
00:29:10,350 --> 00:29:17,250
statically<font color="#CCCCCC"> for the e BPF code this</font><font color="#E5E5E5"> works</font>

741
00:29:13,919 --> 00:29:18,750
<font color="#E5E5E5">actually quite well and then lastly one</font>

742
00:29:17,250 --> 00:29:21,360
<font color="#E5E5E5">of the things that the EPF</font><font color="#CCCCCC"> eb</font><font color="#E5E5E5"> PF</font>

743
00:29:18,750 --> 00:29:23,730
validator really hates is dynamic length

744
00:29:21,360 --> 00:29:25,110
<font color="#E5E5E5">byte copies where the length comes from</font>

745
00:29:23,730 --> 00:29:26,220
<font color="#E5E5E5">something that you read from somewhere</font>

746
00:29:25,110 --> 00:29:28,199
<font color="#CCCCCC">else</font>

747
00:29:26,220 --> 00:29:30,000
<font color="#E5E5E5">mostly because the compiler will</font>

748
00:29:28,200 --> 00:29:30,480
<font color="#CCCCCC">optimize things</font><font color="#E5E5E5"> and it'll be left in the</font>

749
00:29:30,000 --> 00:29:31,950
<font color="#CCCCCC">lurch</font>

750
00:29:30,480 --> 00:29:34,980
without enough information<font color="#CCCCCC"> to</font><font color="#E5E5E5"> know</font>

751
00:29:31,950 --> 00:29:36,960
what's going on so<font color="#CCCCCC"> the way that</font><font color="#E5E5E5"> we got</font>

752
00:29:34,980 --> 00:29:38,700
<font color="#E5E5E5">around this was to basically use a weird</font>

753
00:29:36,960 --> 00:29:40,830
static<font color="#E5E5E5"> inline function that would kind</font>

754
00:29:38,700 --> 00:29:45,890
<font color="#CCCCCC">of</font><font color="#E5E5E5"> break up the logic</font><font color="#CCCCCC"> and then finally</font>

755
00:29:40,830 --> 00:29:48,780
it<font color="#E5E5E5"> started passing this stuff is crazy</font>

756
00:29:45,890 --> 00:29:50,580
<font color="#CCCCCC">and then one of the</font><font color="#E5E5E5"> most helpful</font><font color="#CCCCCC"> things</font>

757
00:29:48,780 --> 00:29:52,590
that you can do for<font color="#E5E5E5"> BCC at least is</font>

758
00:29:50,580 --> 00:29:55,230
<font color="#CCCCCC">enable</font><font color="#E5E5E5"> a full debug output that will</font>

759
00:29:52,590 --> 00:29:58,110
<font color="#CCCCCC">actually dump out all of the BB</font><font color="#E5E5E5"> PF</font>

760
00:29:55,230 --> 00:30:01,559
instructions<font color="#E5E5E5"> but will also dump out the</font>

761
00:29:58,110 --> 00:30:04,350
<font color="#E5E5E5">C code sort of</font><font color="#CCCCCC"> pre processed already</font>

762
00:30:01,559 --> 00:30:05,668
that is being<font color="#E5E5E5"> implemented with those</font>

763
00:30:04,350 --> 00:30:07,379
instructions so when you get an error

764
00:30:05,669 --> 00:30:08,760
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can actually</font><font color="#E5E5E5"> look back at that and</font>

765
00:30:07,380 --> 00:30:13,549
<font color="#E5E5E5">figure out where in the assembly</font>

766
00:30:08,760 --> 00:30:13,549
something went wrong<font color="#E5E5E5"> good luck</font>

767
00:30:13,600 --> 00:30:23,779
that's easy right pass it over

768
00:30:18,890 --> 00:30:23,779
[Music]

769
00:30:25,470 --> 00:30:32,380
so since<font color="#CCCCCC"> four security consultants we</font>

770
00:30:29,440 --> 00:30:37,570
had to ask<font color="#E5E5E5"> ourselves</font><font color="#CCCCCC"> kenny BPF be used</font>

771
00:30:32,380 --> 00:30:41,050
for defensive measures<font color="#E5E5E5"> we said why</font><font color="#CCCCCC"> not I</font>

772
00:30:37,570 --> 00:30:42,580
mean<font color="#E5E5E5"> EPP</font><font color="#CCCCCC"> F is really</font><font color="#E5E5E5"> fast and you know</font>

773
00:30:41,050 --> 00:30:46,300
if we're<font color="#CCCCCC"> successful we could</font><font color="#E5E5E5"> improve the</font>

774
00:30:42,580 --> 00:30:50,500
state<font color="#CCCCCC"> of auditing so yeah yeah let's</font>

775
00:30:46,300 --> 00:30:53,080
let's do it so what<font color="#E5E5E5"> does security</font>

776
00:30:50,500 --> 00:30:56,260
<font color="#E5E5E5">monitoring software do basically it just</font>

777
00:30:53,080 --> 00:30:58,379
<font color="#E5E5E5">watches everything program executions</font>

778
00:30:56,260 --> 00:31:02,920
file accesses network traffic

779
00:30:58,380 --> 00:31:06,100
<font color="#E5E5E5">administrative operations and hey</font><font color="#CCCCCC"> eb p</font>

780
00:31:02,920 --> 00:31:09,400
<font color="#CCCCCC">FK probes can</font><font color="#E5E5E5"> do all this so what would</font>

781
00:31:06,100 --> 00:31:11,169
<font color="#E5E5E5">make this a good fit well tracing EPP</font><font color="#CCCCCC"> f</font>

782
00:31:09,400 --> 00:31:14,050
programs<font color="#E5E5E5"> they can see everything</font><font color="#CCCCCC"> and</font>

783
00:31:11,170 --> 00:31:16,900
they can hook into any internal kernel

784
00:31:14,050 --> 00:31:20,919
function and we<font color="#E5E5E5"> can observe all the</font>

785
00:31:16,900 --> 00:31:23,800
kernel and user space memory<font color="#E5E5E5"> so start</font>

786
00:31:20,920 --> 00:31:27,040
off<font color="#E5E5E5"> let's implement some example you</font>

787
00:31:23,800 --> 00:31:33,940
know monitoring tasks<font color="#E5E5E5"> we're gonna begin</font>

788
00:31:27,040 --> 00:31:36,040
<font color="#CCCCCC">with</font><font color="#E5E5E5"> hooking the exec ve call and just</font>

789
00:31:33,940 --> 00:31:38,350
keep it<font color="#E5E5E5"> nice and simple nice refresher</font>

790
00:31:36,040 --> 00:31:42,909
<font color="#CCCCCC">I forgot</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> k</font><font color="#E5E5E5"> pro underscore underscore</font>

791
00:31:38,350 --> 00:31:46,209
and then sis exec<font color="#CCCCCC"> fee it's just a nice</font>

792
00:31:42,910 --> 00:31:48,310
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> try Sprint K</font><font color="#E5E5E5"> all these examples</font>

793
00:31:46,210 --> 00:31:52,300
<font color="#CCCCCC">just going to keep</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> that not</font><font color="#E5E5E5"> to be</font>

794
00:31:48,310 --> 00:31:56,879
confusing so now let's do something<font color="#CCCCCC"> more</font>

795
00:31:52,300 --> 00:32:01,210
<font color="#CCCCCC">interesting we</font><font color="#E5E5E5"> can compare the file path</font>

796
00:31:56,880 --> 00:32:04,330
<font color="#E5E5E5">with known standard directories where</font>

797
00:32:01,210 --> 00:32:08,610
<font color="#CCCCCC">miners would be so for example bin or</font>

798
00:32:04,330 --> 00:32:13,990
these are<font color="#E5E5E5"> local bin</font><font color="#CCCCCC"> and we could do this</font>

799
00:32:08,610 --> 00:32:17,939
just by checking the<font color="#CCCCCC"> filename parameter</font>

800
00:32:13,990 --> 00:32:23,590
<font color="#E5E5E5">via the</font><font color="#CCCCCC"> syscall so we have it set there</font>

801
00:32:17,940 --> 00:32:25,779
we have our directory prefect set for

802
00:32:23,590 --> 00:32:28,658
<font color="#E5E5E5">this one we're just going to check bin</font>

803
00:32:25,779 --> 00:32:31,179
just too<font color="#E5E5E5"> complicated for EP</font><font color="#CCCCCC"> PPF to check</font>

804
00:32:28,659 --> 00:32:34,299
all that<font color="#E5E5E5"> all the other directories and</font>

805
00:32:31,179 --> 00:32:37,149
we have our unrolled loop there<font color="#E5E5E5"> we're</font>

806
00:32:34,299 --> 00:32:39,340
<font color="#E5E5E5">just going to check by by</font><font color="#CCCCCC"> bite</font><font color="#E5E5E5"> and see</font>

807
00:32:37,149 --> 00:32:44,498
if it's in bin or not and if<font color="#E5E5E5"> not we're</font>

808
00:32:39,340 --> 00:32:46,389
just<font color="#CCCCCC"> gonna let the user know so</font><font color="#E5E5E5"> another</font>

809
00:32:44,499 --> 00:32:49,330
thought<font color="#CCCCCC"> that</font><font color="#E5E5E5"> came out of</font><font color="#CCCCCC"> this was</font><font color="#E5E5E5"> if we</font>

810
00:32:46,389 --> 00:32:50,590
have a web app would we be able<font color="#CCCCCC"> to know</font>

811
00:32:49,330 --> 00:32:52,749
<font color="#CCCCCC">if it's executing stuff it's</font><font color="#E5E5E5"> not</font>

812
00:32:50,590 --> 00:32:55,389
supposed to be so I mean<font color="#CCCCCC"> we can imagine</font>

813
00:32:52,749 --> 00:32:58,119
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we have a web app that you know</font>

814
00:32:55,389 --> 00:33:02,109
it's just<font color="#E5E5E5"> a front-end to ping takes an</font>

815
00:32:58,119 --> 00:33:05,259
IP address<font color="#E5E5E5"> user input you know usual</font>

816
00:33:02,109 --> 00:33:07,269
<font color="#E5E5E5">stuff</font><font color="#CCCCCC"> and we want</font><font color="#E5E5E5"> to know if it's</font>

817
00:33:05,259 --> 00:33:12,479
executing<font color="#E5E5E5"> anything other than pain</font>

818
00:33:07,269 --> 00:33:16,719
so right here<font color="#CCCCCC"> we just have the C</font><font color="#E5E5E5"> and</font>

819
00:33:12,479 --> 00:33:21,099
same<font color="#E5E5E5"> thing hooking this exactly</font><font color="#CCCCCC"> e the if</font>

820
00:33:16,719 --> 00:33:24,999
<font color="#CCCCCC">Ted if def pig is assigned</font><font color="#E5E5E5"> via Python we</font>

821
00:33:21,099 --> 00:33:27,399
had a define using<font color="#CCCCCC"> argh parse and if</font>

822
00:33:24,999 --> 00:33:29,499
it's not equal<font color="#CCCCCC"> to the pit of</font><font color="#E5E5E5"> our web</font>

823
00:33:27,399 --> 00:33:31,928
application then just<font color="#E5E5E5"> don't continue</font>

824
00:33:29,499 --> 00:33:35,589
checking anything<font color="#E5E5E5"> so we're copying the</font>

825
00:33:31,929 --> 00:33:37,779
file path<font color="#E5E5E5"> to a temporary buffer so we</font>

826
00:33:35,589 --> 00:33:41,229
can get<font color="#E5E5E5"> the length of it</font><font color="#CCCCCC"> and then we're</font>

827
00:33:37,779 --> 00:33:43,539
<font color="#CCCCCC">doing a</font><font color="#E5E5E5"> quick exit</font><font color="#CCCCCC"> if the stuff not the</font>

828
00:33:41,229 --> 00:33:46,059
<font color="#E5E5E5">same length but if it is the same length</font>

829
00:33:43,539 --> 00:33:50,619
<font color="#CCCCCC">we're gonna make sure that it's not ping</font>

830
00:33:46,059 --> 00:33:53,700
and<font color="#E5E5E5"> then let's use it up so now we're</font>

831
00:33:50,619 --> 00:33:57,399
successfully monitoring file executions

832
00:33:53,700 --> 00:34:02,200
yeah<font color="#E5E5E5"> next we can watch for file opens</font>

833
00:33:57,399 --> 00:34:04,748
from certain directories<font color="#CCCCCC"> okay again nice</font>

834
00:34:02,200 --> 00:34:11,949
and<font color="#E5E5E5"> simple straightforward</font><font color="#CCCCCC"> you're gonna</font>

835
00:34:04,749 --> 00:34:15,819
hook do sis open but to<font color="#CCCCCC"> make this</font>

836
00:34:11,949 --> 00:34:17,739
somewhat useful we're gonna see what if

837
00:34:15,819 --> 00:34:23,339
something is accessed<font color="#CCCCCC"> under the root</font>

838
00:34:17,739 --> 00:34:27,368
directory<font color="#E5E5E5"> and same</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> you have the</font>

839
00:34:23,339 --> 00:34:30,578
path set unroll the loop and then<font color="#E5E5E5"> just</font>

840
00:34:27,369 --> 00:34:36,010
check<font color="#E5E5E5"> by by byte if it's actually in</font><font color="#CCCCCC"> the</font>

841
00:34:30,579 --> 00:34:37,649
root<font color="#CCCCCC"> directory</font><font color="#E5E5E5"> but we just have to let</font>

842
00:34:36,010 --> 00:34:42,059
you<font color="#E5E5E5"> know something</font>

843
00:34:37,649 --> 00:34:45,509
all these<font color="#E5E5E5"> examples are insecure</font>

844
00:34:42,059 --> 00:34:45,510
<font color="#E5E5E5">dangerously insecure</font>

845
00:34:45,590 --> 00:34:50,790
just because<font color="#CCCCCC"> EPP F</font><font color="#E5E5E5"> makes sure that it's</font>

846
00:34:49,290 --> 00:34:52,710
not going to affect<font color="#E5E5E5"> the</font><font color="#CCCCCC"> colonel doesn't</font>

847
00:34:50,790 --> 00:34:55,949
mean that the stuff it's running is safe

848
00:34:52,710 --> 00:34:57,960
and in fact the limitations<font color="#E5E5E5"> make it</font>

849
00:34:55,949 --> 00:35:01,500
extremely difficult<font color="#E5E5E5"> to write security</font>

850
00:34:57,960 --> 00:35:05,480
<font color="#CCCCCC">PDF code one of the things we noticed</font>

851
00:35:01,500 --> 00:35:05,480
was<font color="#CCCCCC"> a time of check the time of use and</font>

852
00:35:05,960 --> 00:35:11,970
<font color="#E5E5E5">we noticed this when UK probe assist</font>

853
00:35:09,270 --> 00:35:16,400
call so the user supplied data that you

854
00:35:11,970 --> 00:35:19,109
get<font color="#CCCCCC"> from the hooked</font><font color="#E5E5E5"> syscall can change</font>

855
00:35:16,400 --> 00:35:20,790
from the time when you copy<font color="#CCCCCC"> it to when</font>

856
00:35:19,110 --> 00:35:23,490
the<font color="#E5E5E5"> colonel copies in and</font><font color="#CCCCCC"> actually</font>

857
00:35:20,790 --> 00:35:26,310
performs this call<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is</font>

858
00:35:23,490 --> 00:35:27,930
<font color="#E5E5E5">relatively easy</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> test for so we'll</font>

859
00:35:26,310 --> 00:35:29,460
just<font color="#E5E5E5"> start with</font><font color="#CCCCCC"> a two</font><font color="#E5E5E5"> threaded program</font>

860
00:35:27,930 --> 00:35:31,109
where the first thread copies two

861
00:35:29,460 --> 00:35:33,480
different file paths into one character

862
00:35:31,110 --> 00:35:38,970
away<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right and then the second one</font>

863
00:35:33,480 --> 00:35:41,040
just opens that<font color="#E5E5E5"> and we see here some</font>

864
00:35:38,970 --> 00:35:45,299
nice<font color="#CCCCCC"> output we got that everything just</font>

865
00:35:41,040 --> 00:35:47,730
<font color="#E5E5E5">is all mixed and how do we avoid this</font>

866
00:35:45,300 --> 00:35:49,290
problem well our recommendation is<font color="#CCCCCC"> to</font>

867
00:35:47,730 --> 00:35:53,010
hook internal kernel functions instead

868
00:35:49,290 --> 00:35:55,050
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the syscalls preferably where the</font>

869
00:35:53,010 --> 00:35:59,250
<font color="#CCCCCC">value is already</font><font color="#E5E5E5"> copied into kernel</font>

870
00:35:55,050 --> 00:36:01,500
memory so there's some<font color="#CCCCCC"> things that we</font>

871
00:35:59,250 --> 00:36:03,390
have to take it to<font color="#E5E5E5"> account and make sure</font>

872
00:36:01,500 --> 00:36:06,600
that we<font color="#CCCCCC"> think about when we're creating</font>

873
00:36:03,390 --> 00:36:10,770
<font color="#E5E5E5">these things such as how far names work</font>

874
00:36:06,600 --> 00:36:13,200
<font color="#CCCCCC">so what if it's not access by the</font>

875
00:36:10,770 --> 00:36:17,100
<font color="#E5E5E5">absolute path from inside the directory</font>

876
00:36:13,200 --> 00:36:19,620
<font color="#E5E5E5">from a relative path and can we fix</font>

877
00:36:17,100 --> 00:36:21,540
<font color="#E5E5E5">those well I mean we could attempt to by</font>

878
00:36:19,620 --> 00:36:24,060
comparing the value or attempting to

879
00:36:21,540 --> 00:36:26,070
canonicalize it<font color="#CCCCCC"> ourselves but Linux</font>

880
00:36:24,060 --> 00:36:28,529
internal structure just complicated to

881
00:36:26,070 --> 00:36:32,700
parse and it's just way<font color="#E5E5E5"> too complicated</font>

882
00:36:28,530 --> 00:36:34,320
<font color="#E5E5E5">for what EBP</font><font color="#CCCCCC"> F was designed for or we</font>

883
00:36:32,700 --> 00:36:38,370
can try to find<font color="#E5E5E5"> an internal function</font>

884
00:36:34,320 --> 00:36:42,270
<font color="#E5E5E5">later on that has it but for this</font>

885
00:36:38,370 --> 00:36:45,029
<font color="#CCCCCC">example it it didn't get</font><font color="#E5E5E5"> the it just</font>

886
00:36:42,270 --> 00:36:48,960
gets the same exact<font color="#E5E5E5"> value as</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> assist</font>

887
00:36:45,030 --> 00:36:51,870
call gets so we notice that<font color="#E5E5E5"> VC C has</font>

888
00:36:48,960 --> 00:36:54,480
example code for network monitoring and

889
00:36:51,870 --> 00:36:56,990
we also noticed<font color="#CCCCCC"> that it didn't properly</font>

890
00:36:54,480 --> 00:36:58,779
calculate IP error<font color="#E5E5E5"> IP header offsets</font>

891
00:36:56,990 --> 00:37:00,968
pacifically<font color="#E5E5E5"> it did not</font>

892
00:36:58,779 --> 00:37:03,939
account for<font color="#CCCCCC"> the fact that TCP</font><font color="#E5E5E5"> options</font>

893
00:37:00,969 --> 00:37:07,659
are<font color="#E5E5E5"> variable</font><font color="#CCCCCC"> lengths so it was possible</font>

894
00:37:03,939 --> 00:37:12,098
<font color="#CCCCCC">to spoof a TCP header so we sent</font><font color="#E5E5E5"> them a</font>

895
00:37:07,659 --> 00:37:14,589
<font color="#CCCCCC">POC and of course a patch</font><font color="#E5E5E5"> and here we</font>

896
00:37:12,099 --> 00:37:18,640
have the<font color="#E5E5E5"> diff of that patch where we're</font>

897
00:37:14,589 --> 00:37:22,179
now checking<font color="#CCCCCC"> the IP header length in</font>

898
00:37:18,640 --> 00:37:25,328
general<font color="#CCCCCC"> make sure you're requiring</font>

899
00:37:22,179 --> 00:37:27,429
strict validation because<font color="#CCCCCC"> II</font><font color="#E5E5E5"> BPF doesn't</font>

900
00:37:25,329 --> 00:37:30,459
have a copy from user so you<font color="#CCCCCC"> basically</font>

901
00:37:27,429 --> 00:37:34,269
<font color="#E5E5E5">could be tricked into reading kernel</font>

902
00:37:30,459 --> 00:37:40,509
memory<font color="#E5E5E5"> that was supplied</font><font color="#CCCCCC"> by a</font><font color="#E5E5E5"> user</font><font color="#CCCCCC"> use</font>

903
00:37:34,269 --> 00:37:43,419
the space pointer and then just<font color="#E5E5E5"> manually</font>

904
00:37:40,509 --> 00:37:44,679
verify<font color="#E5E5E5"> the pointers so we ask the</font>

905
00:37:43,419 --> 00:37:47,319
<font color="#E5E5E5">question</font><font color="#CCCCCC"> again can it be used</font><font color="#E5E5E5"> for</font>

906
00:37:44,679 --> 00:37:48,900
defense not directly<font color="#E5E5E5"> the limitations</font>

907
00:37:47,319 --> 00:37:52,469
make it hard to<font color="#CCCCCC"> use it in this</font><font color="#E5E5E5"> fashion</font>

908
00:37:48,900 --> 00:37:54,880
<font color="#CCCCCC">and instead it's much</font><font color="#E5E5E5"> more useful to</font>

909
00:37:52,469 --> 00:37:58,059
observe the data<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that flows</font><font color="#CCCCCC"> through</font>

910
00:37:54,880 --> 00:38:00,189
the system<font color="#E5E5E5"> so we have UNIX thumb which</font>

911
00:37:58,059 --> 00:38:03,339
is basically TCP dump but for UNIX

912
00:38:00,189 --> 00:38:05,348
domain sockets<font color="#CCCCCC"> it demonstrates our</font>

913
00:38:03,339 --> 00:38:09,279
<font color="#E5E5E5">successful fight against the validator</font>

914
00:38:05,349 --> 00:38:12,549
<font color="#E5E5E5">and the link for that will be at the end</font>

915
00:38:09,279 --> 00:38:14,349
<font color="#E5E5E5">of slides</font><font color="#CCCCCC"> so this basically</font><font color="#E5E5E5"> just hooks</font>

916
00:38:12,549 --> 00:38:16,569
the<font color="#CCCCCC"> stream send message and Datagram</font>

917
00:38:14,349 --> 00:38:18,969
<font color="#CCCCCC">send message and retrieves a message</font>

918
00:38:16,569 --> 00:38:20,890
header contents from<font color="#E5E5E5"> it</font><font color="#CCCCCC"> and we use</font>

919
00:38:18,969 --> 00:38:24,669
Python like Jeff mentioned<font color="#E5E5E5"> before to</font>

920
00:38:20,890 --> 00:38:27,519
dynamically<font color="#CCCCCC"> generate C code so this is</font>

921
00:38:24,669 --> 00:38:30,969
used<font color="#E5E5E5"> to tweak the EBP</font><font color="#CCCCCC"> F program at</font>

922
00:38:27,519 --> 00:38:33,578
runtime<font color="#CCCCCC"> in quotes and</font><font color="#E5E5E5"> also helps us get</font>

923
00:38:30,969 --> 00:38:35,769
<font color="#CCCCCC">around the loop restrictions so here's</font>

924
00:38:33,579 --> 00:38:42,459
the<font color="#CCCCCC"> binary search tree that</font><font color="#E5E5E5"> Jeff was</font>

925
00:38:35,769 --> 00:38:44,769
mentioned<font color="#CCCCCC"> before and the per</font><font color="#E5E5E5"> CPU array</font>

926
00:38:42,459 --> 00:38:47,589
which keeps track<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> ring buffer</font>

927
00:38:44,769 --> 00:38:49,658
slot<font color="#E5E5E5"> because we can't loop we have</font><font color="#CCCCCC"> to</font>

928
00:38:47,589 --> 00:38:51,369
<font color="#CCCCCC">generate the switch that Jeff also</font>

929
00:38:49,659 --> 00:38:54,939
mentioned before and<font color="#E5E5E5"> this is the code</font>

930
00:38:51,369 --> 00:38:58,479
for<font color="#CCCCCC"> that and we have</font><font color="#E5E5E5"> to make sure we're</font>

931
00:38:54,939 --> 00:39:00,578
checking the values in the kernel space

932
00:38:58,479 --> 00:39:04,118
<font color="#E5E5E5">and user space because there's a race</font>

933
00:39:00,579 --> 00:39:05,559
<font color="#CCCCCC">condition where</font><font color="#E5E5E5"> C might might</font><font color="#CCCCCC"> overwrite</font>

934
00:39:04,119 --> 00:39:07,479
what<font color="#E5E5E5"> Python</font><font color="#CCCCCC"> has because it doesn't know</font>

935
00:39:05,559 --> 00:39:11,919
<font color="#E5E5E5">that</font><font color="#CCCCCC"> Python is finished with that value</font>

936
00:39:07,479 --> 00:39:12,470
<font color="#CCCCCC">so we make sure that</font><font color="#E5E5E5"> C knows not to</font><font color="#CCCCCC"> use</font>

937
00:39:11,919 --> 00:39:17,810
the value

938
00:39:12,470 --> 00:39:20,180
it's still in use though<font color="#E5E5E5"> if</font><font color="#CCCCCC"> V</font><font color="#E5E5E5"> BPF isn't</font>

939
00:39:17,810 --> 00:39:24,920
that good<font color="#E5E5E5"> defense what else can we</font><font color="#CCCCCC"> use</font>

940
00:39:20,180 --> 00:39:27,440
it for<font color="#E5E5E5"> let's talk about offense so you</font>

941
00:39:24,920 --> 00:39:29,240
know let's assume someone bad get some

942
00:39:27,440 --> 00:39:31,369
privileges in a modern<font color="#CCCCCC"> Linux system</font>

943
00:39:29,240 --> 00:39:34,098
<font color="#E5E5E5">maybe like cap sysadmin</font><font color="#CCCCCC"> in a container</font>

944
00:39:31,369 --> 00:39:34,630
<font color="#E5E5E5">because containers are safe right not</font>

945
00:39:34,099 --> 00:39:37,820
really

946
00:39:34,630 --> 00:39:38,650
what could they do with<font color="#CCCCCC"> EPP F a lot</font>

947
00:39:37,820 --> 00:39:41,420
actually

948
00:39:38,650 --> 00:39:43,760
all that tracing stuff can not only see

949
00:39:41,420 --> 00:39:47,240
everything<font color="#E5E5E5"> it can also write user space</font>

950
00:39:43,760 --> 00:39:51,650
memory<font color="#CCCCCC"> I repeat</font><font color="#E5E5E5"> it can also write user</font>

951
00:39:47,240 --> 00:39:54,649
space<font color="#E5E5E5"> memory so</font><font color="#CCCCCC"> BP f probe</font><font color="#E5E5E5"> right user is</font>

952
00:39:51,650 --> 00:39:57,770
the the<font color="#E5E5E5"> magic call that we can make from</font>

953
00:39:54,650 --> 00:39:59,420
all these tracers<font color="#CCCCCC"> it allows us to write</font>

954
00:39:57,770 --> 00:40:00,740
<font color="#CCCCCC">only two writable user</font><font color="#E5E5E5"> space memory so</font>

955
00:39:59,420 --> 00:40:02,750
unfortunately<font color="#E5E5E5"> we can't write</font><font color="#CCCCCC"> to the text</font>

956
00:40:00,740 --> 00:40:04,459
<font color="#CCCCCC">section we can write everything else</font>

957
00:40:02,750 --> 00:40:06,800
<font color="#CCCCCC">basically though</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> what's it anything</font>

958
00:40:04,460 --> 00:40:10,880
<font color="#E5E5E5">useful in these in these regions well</font>

959
00:40:06,800 --> 00:40:12,740
<font color="#E5E5E5">buffers for reading writing data you</font>

960
00:40:10,880 --> 00:40:15,170
know<font color="#E5E5E5"> coming through the Siskel's maybe</font>

961
00:40:12,740 --> 00:40:16,609
there's a you know<font color="#E5E5E5"> some sensitive stuff</font>

962
00:40:15,170 --> 00:40:18,290
being read on<font color="#CCCCCC"> a sensitive</font><font color="#E5E5E5"> file</font>

963
00:40:16,609 --> 00:40:20,240
descriptor<font color="#E5E5E5"> maybe codes being executed</font>

964
00:40:18,290 --> 00:40:22,009
from<font color="#E5E5E5"> it you know</font><font color="#CCCCCC"> maybe there's a</font>

965
00:40:20,240 --> 00:40:26,180
privileged process doing<font color="#E5E5E5"> that I wonder</font>

966
00:40:22,010 --> 00:40:29,300
oh yeah cron cron so we wrote I wrote

967
00:40:26,180 --> 00:40:33,259
<font color="#E5E5E5">this</font><font color="#CCCCCC"> thing called con job which spoofs</font>

968
00:40:29,300 --> 00:40:35,270
cron jobs<font color="#CCCCCC"> it is the cron</font><font color="#E5E5E5"> Auto poner it</font>

969
00:40:33,260 --> 00:40:39,470
hooks<font color="#E5E5E5"> all of the stat family of sis</font>

970
00:40:35,270 --> 00:40:41,359
calls and basically whenever I you know

971
00:40:39,470 --> 00:40:42,770
cron is looking to get information<font color="#E5E5E5"> to</font>

972
00:40:41,359 --> 00:40:45,109
<font color="#E5E5E5">know whether or not it needs to reload</font>

973
00:40:42,770 --> 00:40:47,720
<font color="#E5E5E5">Etsy crontab it stats them and looks at</font>

974
00:40:45,109 --> 00:40:50,180
the last modified<font color="#CCCCCC"> date so we just update</font>

975
00:40:47,720 --> 00:40:52,580
that<font color="#CCCCCC"> to make it very recent so it</font><font color="#E5E5E5"> always</font>

976
00:40:50,180 --> 00:40:54,770
loads the file and then we hook<font color="#E5E5E5"> open at</font>

977
00:40:52,580 --> 00:40:58,250
and close as<font color="#CCCCCC"> anytime that file is opened</font>

978
00:40:54,770 --> 00:40:59,900
<font color="#E5E5E5">we save the FD that's going to be used</font>

979
00:40:58,250 --> 00:41:02,660
for<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and we store</font><font color="#CCCCCC"> it somewhere else</font>

980
00:40:59,900 --> 00:41:04,790
<font color="#E5E5E5">for later and if it's closed we stopped</font>

981
00:41:02,660 --> 00:41:08,690
keeping<font color="#CCCCCC"> track of</font><font color="#E5E5E5"> it and then we hook</font>

982
00:41:04,790 --> 00:41:10,520
read for that FD<font color="#CCCCCC"> and if we see a read in</font>

983
00:41:08,690 --> 00:41:13,040
there then in the<font color="#CCCCCC"> kate rep probe return</font>

984
00:41:10,520 --> 00:41:14,660
we actually stomp<font color="#E5E5E5"> over what the the</font>

985
00:41:13,040 --> 00:41:16,970
contents of<font color="#E5E5E5"> the file was actually</font>

986
00:41:14,660 --> 00:41:21,560
supposed<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be with</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> own little</font><font color="#E5E5E5"> you</font>

987
00:41:16,970 --> 00:41:24,129
know<font color="#CCCCCC"> root</font><font color="#E5E5E5"> command as one does so it's</font>

988
00:41:21,560 --> 00:41:24,130
brief demo

989
00:41:24,980 --> 00:41:29,990
this is actually running<font color="#CCCCCC"> Tanner</font><font color="#E5E5E5"> it's</font>

990
00:41:26,810 --> 00:41:32,090
it's<font color="#E5E5E5"> slightly tweaked</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> docker</font>

991
00:41:29,990 --> 00:41:35,540
happened to update their<font color="#E5E5E5"> app</font><font color="#CCCCCC"> Armour</font>

992
00:41:32,090 --> 00:41:37,220
profile<font color="#CCCCCC"> a little bit</font><font color="#E5E5E5"> before</font><font color="#CCCCCC"> Avila after</font>

993
00:41:35,540 --> 00:41:39,050
after we made this and<font color="#E5E5E5"> it killed one of</font>

994
00:41:37,220 --> 00:41:41,930
<font color="#E5E5E5">the vectors</font><font color="#CCCCCC"> of how this ran so we we</font>

995
00:41:39,050 --> 00:41:45,200
weakened it a little bit more<font color="#E5E5E5"> but but</font>

996
00:41:41,930 --> 00:41:48,350
now we've basically<font color="#E5E5E5"> just updated this to</font>

997
00:41:45,200 --> 00:41:50,750
you know do the attack<font color="#E5E5E5"> so as we see in</font>

998
00:41:48,350 --> 00:41:54,009
<font color="#E5E5E5">here this route you know command is</font>

999
00:41:50,750 --> 00:41:57,380
injected right at the top<font color="#E5E5E5"> of crontab so</font>

1000
00:41:54,010 --> 00:41:59,300
that's cool<font color="#CCCCCC"> but</font><font color="#E5E5E5"> you know what's what</font>

1001
00:41:57,380 --> 00:42:01,220
else is fun about this<font color="#E5E5E5"> so we use some</font>

1002
00:41:59,300 --> 00:42:03,140
per<font color="#E5E5E5"> CPU</font><font color="#CCCCCC"> maps</font><font color="#E5E5E5"> to have all of this stuff</font>

1003
00:42:01,220 --> 00:42:04,819
communicate safely with each other<font color="#E5E5E5"> then</font>

1004
00:42:03,140 --> 00:42:06,650
we use some hash maps to pass them

1005
00:42:04,820 --> 00:42:07,730
between the pairs<font color="#CCCCCC"> of those things and</font><font color="#E5E5E5"> we</font>

1006
00:42:06,650 --> 00:42:09,230
also happen<font color="#CCCCCC"> to use this nifty helper</font>

1007
00:42:07,730 --> 00:42:10,610
function that<font color="#CCCCCC"> allows us</font><font color="#E5E5E5"> to keep</font>

1008
00:42:09,230 --> 00:42:13,460
incrementing the time forward<font color="#E5E5E5"> without</font>

1009
00:42:10,610 --> 00:42:15,560
having go back to user space so what

1010
00:42:13,460 --> 00:42:18,920
<font color="#E5E5E5">else can we do with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> EBP</font><font color="#CCCCCC"> F we're</font>

1011
00:42:15,560 --> 00:42:21,320
gonna go for broke if you<font color="#E5E5E5"> recall we can</font>

1012
00:42:18,920 --> 00:42:23,990
write to<font color="#E5E5E5"> the stack the stack has</font>

1013
00:42:21,320 --> 00:42:26,750
<font color="#CCCCCC">returned addresses we can also read the</font>

1014
00:42:23,990 --> 00:42:28,370
<font color="#CCCCCC">stack in all of user space</font><font color="#E5E5E5"> memory we can</font>

1015
00:42:26,750 --> 00:42:30,680
scan for the text section and share

1016
00:42:28,370 --> 00:42:33,319
libraries<font color="#CCCCCC"> I think I</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> people see</font>

1017
00:42:30,680 --> 00:42:36,109
where this is<font color="#E5E5E5"> going</font><font color="#CCCCCC"> so wrote this thing</font>

1018
00:42:33,320 --> 00:42:40,220
called G Lib<font color="#E5E5E5"> C pone which is the system</font>

1019
00:42:36,110 --> 00:42:43,400
de<font color="#CCCCCC"> Auto</font><font color="#E5E5E5"> poner so basically it scans Pig</font>

1020
00:42:40,220 --> 00:42:46,759
one memory for Lib C it backs up the

1021
00:42:43,400 --> 00:42:48,380
stack content<font color="#E5E5E5"> then injects</font><font color="#CCCCCC"> wrap chain</font>

1022
00:42:46,760 --> 00:42:51,500
into the process<font color="#E5E5E5"> right where it's about</font>

1023
00:42:48,380 --> 00:42:55,070
to<font color="#E5E5E5"> return to the Rob chain basically</font>

1024
00:42:51,500 --> 00:42:57,620
<font color="#E5E5E5">runs a deal open on a path that</font><font color="#CCCCCC"> we</font>

1025
00:42:55,070 --> 00:42:59,600
provide we load<font color="#CCCCCC"> our malicious library</font>

1026
00:42:57,620 --> 00:43:04,130
into<font color="#CCCCCC"> pig 1 and then we clean up</font><font color="#E5E5E5"> after</font>

1027
00:42:59,600 --> 00:43:05,480
ourselves all nice and clean so to<font color="#CCCCCC"> talk</font>

1028
00:43:04,130 --> 00:43:10,970
<font color="#CCCCCC">about what's going on</font>

1029
00:43:05,480 --> 00:43:14,530
not this one<font color="#CCCCCC"> ok so we have this piece</font><font color="#E5E5E5"> of</font>

1030
00:43:10,970 --> 00:43:18,770
it called<font color="#E5E5E5"> find you</font><font color="#CCCCCC"> Lib</font><font color="#E5E5E5"> see this guy</font>

1031
00:43:14,530 --> 00:43:21,890
<font color="#E5E5E5">absurd</font><font color="#CCCCCC"> basically dumps us out return</font>

1032
00:43:18,770 --> 00:43:23,530
<font color="#CCCCCC">address and</font><font color="#E5E5E5"> add the base of Lib C and</font>

1033
00:43:21,890 --> 00:43:26,690
then we plug it<font color="#E5E5E5"> into the pone Lib C</font>

1034
00:43:23,530 --> 00:43:28,640
function that<font color="#E5E5E5"> basically goes and does</font>

1035
00:43:26,690 --> 00:43:31,970
the wrap chain which<font color="#E5E5E5"> I assembled by hand</font>

1036
00:43:28,640 --> 00:43:34,910
based on Lib<font color="#E5E5E5"> C G Lib C which has lots of</font>

1037
00:43:31,970 --> 00:43:37,819
<font color="#E5E5E5">fancy gadgets all very useful</font><font color="#CCCCCC"> and so we</font>

1038
00:43:34,910 --> 00:43:41,569
<font color="#E5E5E5">run this and then eventually every</font>

1039
00:43:37,820 --> 00:43:44,300
and<font color="#CCCCCC"> he'll</font><font color="#E5E5E5"> run both loads are our shared</font>

1040
00:43:41,570 --> 00:43:45,950
library which if you see this<font color="#E5E5E5"> C code is</font>

1041
00:43:44,300 --> 00:43:47,630
actually<font color="#CCCCCC"> what</font><font color="#E5E5E5"> was there so it's going to</font>

1042
00:43:45,950 --> 00:43:50,060
do a syslog and<font color="#E5E5E5"> then it's gonna run ID</font>

1043
00:43:47,630 --> 00:43:52,130
and output it to temp evil temp evil is

1044
00:43:50,060 --> 00:43:54,620
now filled with with<font color="#E5E5E5"> root and we've also</font>

1045
00:43:52,130 --> 00:43:57,940
seen a log coming from<font color="#CCCCCC"> pit</font><font color="#E5E5E5"> one system D</font>

1046
00:43:54,620 --> 00:43:57,940
hello<font color="#CCCCCC"> 35 C 3</font>

1047
00:43:57,980 --> 00:44:02,130
[Applause]

1048
00:43:59,060 --> 00:44:02,130
[Music]

1049
00:44:04,210 --> 00:44:07,540
but<font color="#E5E5E5"> I have a lot</font><font color="#CCCCCC"> of time but to briefly</font>

1050
00:44:06,250 --> 00:44:10,510
go over how this whole thing works

1051
00:44:07,540 --> 00:44:13,300
<font color="#E5E5E5">essentially we hook on timer FD set time</font>

1052
00:44:10,510 --> 00:44:14,740
because in all of<font color="#E5E5E5"> system D basically</font>

1053
00:44:13,300 --> 00:44:17,800
<font color="#E5E5E5">calls this thing once a minute</font>

1054
00:44:14,740 --> 00:44:19,689
guaranteed<font color="#E5E5E5"> and it's very reliable</font>

1055
00:44:17,800 --> 00:44:22,359
we then scan forward from the<font color="#E5E5E5"> stack</font>

1056
00:44:19,690 --> 00:44:23,710
<font color="#E5E5E5">based struck that it passes forward so</font>

1057
00:44:22,359 --> 00:44:26,500
that<font color="#CCCCCC"> we can find the</font><font color="#E5E5E5"> return address and</font>

1058
00:44:23,710 --> 00:44:28,720
then<font color="#E5E5E5"> we part we basically scan for</font>

1059
00:44:26,500 --> 00:44:30,839
return addresses<font color="#E5E5E5"> back into the</font><font color="#CCCCCC"> siskel</font>

1060
00:44:28,720 --> 00:44:33,459
stub<font color="#E5E5E5"> because we know what's in there</font>

1061
00:44:30,839 --> 00:44:35,500
<font color="#CCCCCC">it's gonna set you know our ax to the</font>

1062
00:44:33,460 --> 00:44:37,450
<font color="#E5E5E5">right the right ID number and then do a</font>

1063
00:44:35,500 --> 00:44:38,770
<font color="#E5E5E5">sis call instruction so we keep parsing</font>

1064
00:44:37,450 --> 00:44:42,009
forward until<font color="#E5E5E5"> we find it and then once</font>

1065
00:44:38,770 --> 00:44:43,990
we find<font color="#CCCCCC"> it we use we find where the</font><font color="#E5E5E5"> sis</font>

1066
00:44:42,010 --> 00:44:46,000
call stub is we use the offset<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we</font>

1067
00:44:43,990 --> 00:44:47,589
know from the<font color="#CCCCCC"> beginning of Lib C and we</font>

1068
00:44:46,000 --> 00:44:50,320
return<font color="#E5E5E5"> both the return address pointer</font>

1069
00:44:47,589 --> 00:44:51,609
and this after we made this we then

1070
00:44:50,320 --> 00:44:53,380
realize that<font color="#E5E5E5"> there was a hacky way to</font>

1071
00:44:51,609 --> 00:44:55,900
<font color="#CCCCCC">actually get all of the registers</font>

1072
00:44:53,380 --> 00:44:57,760
<font color="#E5E5E5">associate of</font><font color="#CCCCCC"> the process</font><font color="#E5E5E5"> because EBP</font><font color="#CCCCCC"> F</font>

1073
00:44:55,900 --> 00:44:59,260
in BCC doesn't normally<font color="#E5E5E5"> provide it to</font>

1074
00:44:57,760 --> 00:45:01,839
<font color="#E5E5E5">you you have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> scan memory to get it</font>

1075
00:44:59,260 --> 00:45:06,790
but so this<font color="#E5E5E5"> is still useful for other</font>

1076
00:45:01,839 --> 00:45:10,349
<font color="#CCCCCC">things though then we hook</font><font color="#E5E5E5"> timer FD</font>

1077
00:45:06,790 --> 00:45:13,420
again and in the return value for<font color="#E5E5E5"> this</font>

1078
00:45:10,349 --> 00:45:15,099
we actually<font color="#E5E5E5"> then go and we back up the</font>

1079
00:45:13,420 --> 00:45:17,820
stack<font color="#E5E5E5"> for safekeeping</font><font color="#CCCCCC"> then we write the</font>

1080
00:45:15,099 --> 00:45:20,380
<font color="#CCCCCC">wrap chain in</font><font color="#E5E5E5"> then we return user space</font>

1081
00:45:17,820 --> 00:45:21,820
<font color="#CCCCCC">the timer if the set time then returns</font>

1082
00:45:20,380 --> 00:45:23,589
right<font color="#E5E5E5"> into you know right after where</font>

1083
00:45:21,820 --> 00:45:26,619
the<font color="#CCCCCC"> sis</font><font color="#E5E5E5"> call instruction</font><font color="#CCCCCC"> was then it</font>

1084
00:45:23,589 --> 00:45:28,390
returns<font color="#CCCCCC"> into our op chain our wrap chain</font>

1085
00:45:26,619 --> 00:45:30,160
<font color="#E5E5E5">sets up all the all the point all the</font>

1086
00:45:28,390 --> 00:45:33,190
variables all<font color="#CCCCCC"> the all the arguments it</font>

1087
00:45:30,160 --> 00:45:35,379
then calls<font color="#E5E5E5"> the</font><font color="#CCCCCC"> DL open after it's</font><font color="#E5E5E5"> done</font>

1088
00:45:33,190 --> 00:45:36,609
with that<font color="#E5E5E5"> we we don't want our module to</font>

1089
00:45:35,380 --> 00:45:37,960
have to clean up after<font color="#CCCCCC"> this whole thing</font>

1090
00:45:36,609 --> 00:45:39,609
so we<font color="#CCCCCC"> actually do is we have the wrap</font>

1091
00:45:37,960 --> 00:45:41,859
chain clean up after<font color="#E5E5E5"> itself so we</font>

1092
00:45:39,609 --> 00:45:43,990
actually<font color="#E5E5E5"> call closed with a magic</font>

1093
00:45:41,859 --> 00:45:45,460
negative value that<font color="#CCCCCC"> otherwise is not</font>

1094
00:45:43,990 --> 00:45:47,290
<font color="#E5E5E5">going to do anything in the current hold</font>

1095
00:45:45,460 --> 00:45:51,550
the<font color="#CCCCCC"> kernels</font><font color="#E5E5E5"> not going to care but we</font>

1096
00:45:47,290 --> 00:45:54,009
actually<font color="#E5E5E5"> in our hook on clothes use that</font>

1097
00:45:51,550 --> 00:45:55,660
as a<font color="#E5E5E5"> signaling value when that is hit we</font>

1098
00:45:54,010 --> 00:45:57,339
actually<font color="#E5E5E5"> write back most of the</font><font color="#CCCCCC"> original</font>

1099
00:45:55,660 --> 00:45:59,560
stack except for the last remaining

1100
00:45:57,339 --> 00:46:01,180
gadget then we write a new wrap chain

1101
00:45:59,560 --> 00:46:02,920
<font color="#CCCCCC">past the end of</font><font color="#E5E5E5"> where the stack</font>

1102
00:46:01,180 --> 00:46:05,230
originally was<font color="#E5E5E5"> the reason we do it</font><font color="#CCCCCC"> in</font>

1103
00:46:02,920 --> 00:46:06,700
two<font color="#E5E5E5"> parts is because the DL open itself</font>

1104
00:46:05,230 --> 00:46:08,020
could potentially use up a large<font color="#CCCCCC"> amount</font>

1105
00:46:06,700 --> 00:46:10,359
of stack space<font color="#E5E5E5"> and it would have convert</font>

1106
00:46:08,020 --> 00:46:12,550
anything<font color="#E5E5E5"> that we put</font><font color="#CCCCCC"> there then we</font>

1107
00:46:10,359 --> 00:46:14,650
<font color="#E5E5E5">return user space into our the</font><font color="#CCCCCC"> last part</font>

1108
00:46:12,550 --> 00:46:16,690
of our<font color="#E5E5E5"> whole drop chain the last gadget</font>

1109
00:46:14,650 --> 00:46:18,490
shifts<font color="#CCCCCC"> our SP forward to the new</font><font color="#E5E5E5"> Rob</font>

1110
00:46:16,690 --> 00:46:20,920
chain the new<font color="#CCCCCC"> wrap chain</font>

1111
00:46:18,490 --> 00:46:22,118
then just<font color="#E5E5E5"> rights back over the the</font><font color="#CCCCCC"> the</font>

1112
00:46:20,920 --> 00:46:24,190
<font color="#E5E5E5">last remaining parts of the old Rob</font>

1113
00:46:22,119 --> 00:46:25,869
chain with the original values and then

1114
00:46:24,190 --> 00:46:27,790
it clears<font color="#E5E5E5"> our ax so that it looks like</font>

1115
00:46:25,869 --> 00:46:29,950
the<font color="#E5E5E5"> time</font><font color="#CCCCCC"> RFD call that we finally</font>

1116
00:46:27,790 --> 00:46:33,130
<font color="#CCCCCC">eventually repaired back to seems</font><font color="#E5E5E5"> to</font>

1117
00:46:29,950 --> 00:46:35,430
have<font color="#E5E5E5"> succeeded so julep</font><font color="#CCCCCC"> C is actually</font>

1118
00:46:33,130 --> 00:46:38,260
<font color="#CCCCCC">super stable like all of these gadgets</font>

1119
00:46:35,430 --> 00:46:40,569
work across<font color="#CCCCCC"> multiple versions of Lib C</font>

1120
00:46:38,260 --> 00:46:43,450
across<font color="#E5E5E5"> different Linux distros it's all</font>

1121
00:46:40,570 --> 00:46:45,490
great like this is<font color="#E5E5E5"> super important the</font>

1122
00:46:43,450 --> 00:46:47,980
<font color="#CCCCCC">the specific offsets</font><font color="#E5E5E5"> but they're all</font>

1123
00:46:45,490 --> 00:46:53,250
basically the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> gadgets</font><font color="#CCCCCC"> so what else</font>

1124
00:46:47,980 --> 00:46:56,140
can we do<font color="#CCCCCC"> with EB</font><font color="#E5E5E5"> PF use it as intended</font>

1125
00:46:53,250 --> 00:46:58,420
so you know once<font color="#CCCCCC"> your what's your</font>

1126
00:46:56,140 --> 00:47:00,910
running that<font color="#CCCCCC"> K Pro you know</font><font color="#E5E5E5"> but you</font>

1127
00:46:58,420 --> 00:47:02,380
shouldn't<font color="#CCCCCC"> let anyone</font><font color="#E5E5E5"> stop you right you</font>

1128
00:47:00,910 --> 00:47:04,839
know you can prevent processes from

1129
00:47:02,380 --> 00:47:07,150
interacting<font color="#E5E5E5"> with the kernel for example</font>

1130
00:47:04,839 --> 00:47:10,299
you can prevent processes from listing

1131
00:47:07,150 --> 00:47:12,730
<font color="#CCCCCC">eb PF programs and</font><font color="#E5E5E5"> k probes you</font><font color="#CCCCCC"> can stop</font>

1132
00:47:10,300 --> 00:47:14,200
them<font color="#CCCCCC"> from creating eb</font><font color="#E5E5E5"> pfk probes you can</font>

1133
00:47:12,730 --> 00:47:17,339
stop them from<font color="#CCCCCC"> loading kernel modules</font>

1134
00:47:14,200 --> 00:47:21,040
and<font color="#E5E5E5"> you can stop them from phoning home</font>

1135
00:47:17,339 --> 00:47:23,410
so this is important<font color="#CCCCCC"> because the</font><font color="#E5E5E5"> BPF</font>

1136
00:47:21,040 --> 00:47:25,210
probe right user<font color="#E5E5E5"> actually when it's</font>

1137
00:47:23,410 --> 00:47:27,399
loading when the<font color="#CCCCCC"> BPF program is compiled</font>

1138
00:47:25,210 --> 00:47:29,020
loaded<font color="#CCCCCC"> this</font><font color="#E5E5E5"> has a bit</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> logic in the</font>

1139
00:47:27,400 --> 00:47:30,580
kernel<font color="#E5E5E5"> that sends out a</font><font color="#CCCCCC"> d-- message</font>

1140
00:47:29,020 --> 00:47:32,440
warning<font color="#E5E5E5"> that this is in use and</font><font color="#CCCCCC"> they</font>

1141
00:47:30,580 --> 00:47:35,049
corrupt<font color="#E5E5E5"> things so that's a it's a pretty</font>

1142
00:47:32,440 --> 00:47:37,599
good warning<font color="#E5E5E5"> sign but you have a weird</font>

1143
00:47:35,050 --> 00:47:40,359
race condition because anyone reading<font color="#CCCCCC"> d</font>

1144
00:47:37,599 --> 00:47:42,460
message has<font color="#CCCCCC"> to read from</font><font color="#E5E5E5"> it and then if</font>

1145
00:47:40,359 --> 00:47:44,290
they attempt<font color="#CCCCCC"> to use any</font><font color="#E5E5E5"> sis calls to</font>

1146
00:47:42,460 --> 00:47:45,700
phone home you can stop those<font color="#E5E5E5"> so they</font>

1147
00:47:44,290 --> 00:47:48,609
need<font color="#E5E5E5"> to basically already have something</font>

1148
00:47:45,700 --> 00:47:50,618
like<font color="#CCCCCC"> d PDK to do non sis call direct</font>

1149
00:47:48,609 --> 00:47:52,839
<font color="#E5E5E5">memory mapped packet</font><font color="#CCCCCC"> IO to a network</font>

1150
00:47:50,619 --> 00:47:54,460
device so<font color="#E5E5E5"> that you can't catch them but</font>

1151
00:47:52,839 --> 00:47:55,570
even then there are<font color="#E5E5E5"> all sorts of</font><font color="#CCCCCC"> wacky</font>

1152
00:47:54,460 --> 00:47:57,550
things<font color="#E5E5E5"> you could do</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> stop them from</font>

1153
00:47:55,570 --> 00:47:59,770
phoning home and there's also this magic

1154
00:47:57,550 --> 00:48:01,900
<font color="#E5E5E5">VP f4 to override return and helper that</font>

1155
00:47:59,770 --> 00:48:03,310
we had problems<font color="#CCCCCC"> getting</font><font color="#E5E5E5"> to work but it's</font>

1156
00:48:01,900 --> 00:48:06,580
<font color="#E5E5E5">supposed to be able to just stop assist</font>

1157
00:48:03,310 --> 00:48:09,400
<font color="#E5E5E5">call from happening so you know the one</font>

1158
00:48:06,580 --> 00:48:12,279
downside of<font color="#E5E5E5"> all this is that we need</font><font color="#CCCCCC"> to</font>

1159
00:48:09,400 --> 00:48:14,109
keep<font color="#E5E5E5"> our EVPs process alive right</font>

1160
00:48:12,280 --> 00:48:16,510
<font color="#E5E5E5">because once it once it dies you know</font>

1161
00:48:14,109 --> 00:48:17,770
the whole thing<font color="#CCCCCC"> goes</font><font color="#E5E5E5"> with it what if we</font>

1162
00:48:16,510 --> 00:48:20,560
could make<font color="#CCCCCC"> our Eve you have K probes</font>

1163
00:48:17,770 --> 00:48:22,810
basically immortal you know<font color="#E5E5E5"> we've</font>

1164
00:48:20,560 --> 00:48:25,330
already<font color="#E5E5E5"> taken over</font><font color="#CCCCCC"> pid'</font><font color="#E5E5E5"> one you know so</font>

1165
00:48:22,810 --> 00:48:27,910
why not just run our like you know other

1166
00:48:25,330 --> 00:48:30,220
eb<font color="#CCCCCC"> pfk probes from pid'</font><font color="#E5E5E5"> one itself once</font>

1167
00:48:27,910 --> 00:48:32,140
we're inside this means we stay<font color="#CCCCCC"> alive</font>

1168
00:48:30,220 --> 00:48:33,939
until<font color="#CCCCCC"> the system</font><font color="#E5E5E5"> shuts down</font>

1169
00:48:32,140 --> 00:48:36,210
vice<font color="#CCCCCC"> versa if paid</font><font color="#E5E5E5"> ones the system goes</font>

1170
00:48:33,940 --> 00:48:38,410
<font color="#E5E5E5">the system goes down with it you know</font>

1171
00:48:36,210 --> 00:48:40,270
<font color="#E5E5E5">hey which is great for</font><font color="#CCCCCC"> us because Pig</font>

1172
00:48:38,410 --> 00:48:41,500
<font color="#CCCCCC">one is now system D for the most part</font><font color="#E5E5E5"> so</font>

1173
00:48:40,270 --> 00:48:42,730
everyone you<font color="#E5E5E5"> know knows that thing is</font>

1174
00:48:41,500 --> 00:48:44,020
just falling<font color="#CCCCCC"> apart all over the place</font>

1175
00:48:42,730 --> 00:48:46,240
they're<font color="#CCCCCC"> not even gonna think they're</font>

1176
00:48:44,020 --> 00:48:50,970
being<font color="#CCCCCC"> attacked by you know Spacey AG</font><font color="#E5E5E5"> BPF</font>

1177
00:48:46,240 --> 00:48:53,589
rootkits so<font color="#CCCCCC"> EVP f is useful for everyone</font>

1178
00:48:50,970 --> 00:48:56,950
<font color="#E5E5E5">except people trying to build IDs on top</font>

1179
00:48:53,590 --> 00:48:58,270
of it which makes<font color="#CCCCCC"> no sense</font><font color="#E5E5E5"> you know it</font>

1180
00:48:56,950 --> 00:48:59,830
needs<font color="#E5E5E5"> to get a lot better at</font><font color="#CCCCCC"> supporting</font>

1181
00:48:58,270 --> 00:49:03,640
that use case to<font color="#E5E5E5"> be honest and right now</font>

1182
00:48:59,830 --> 00:49:05,259
it<font color="#CCCCCC"> just it</font><font color="#E5E5E5"> isn't there so a plea to</font>

1183
00:49:03,640 --> 00:49:07,660
<font color="#CCCCCC">kernel developers who might be writing</font>

1184
00:49:05,260 --> 00:49:09,850
<font color="#E5E5E5">these things you really</font><font color="#CCCCCC"> need a copy from</font>

1185
00:49:07,660 --> 00:49:11,529
user so that<font color="#E5E5E5"> no ever not everyone has to</font>

1186
00:49:09,850 --> 00:49:14,710
check<font color="#E5E5E5"> the pointer is manually that</font>

1187
00:49:11,530 --> 00:49:18,070
someone didn't try and<font color="#E5E5E5"> open a path that</font>

1188
00:49:14,710 --> 00:49:20,110
<font color="#E5E5E5">is actually a kernel address and you</font>

1189
00:49:18,070 --> 00:49:21,840
<font color="#E5E5E5">know you also maybe you</font><font color="#CCCCCC"> want to provide</font>

1190
00:49:20,110 --> 00:49:24,160
helpers for<font color="#E5E5E5"> all these trickier file</font>

1191
00:49:21,840 --> 00:49:25,480
structures and things<font color="#E5E5E5"> like that so</font>

1192
00:49:24,160 --> 00:49:27,460
<font color="#CCCCCC">people can actually</font><font color="#E5E5E5"> get full paths out</font>

1193
00:49:25,480 --> 00:49:29,290
of them maybe give some<font color="#E5E5E5"> direct memory</font>

1194
00:49:27,460 --> 00:49:31,600
comparison operations so we<font color="#E5E5E5"> don't have</font>

1195
00:49:29,290 --> 00:49:33,130
<font color="#E5E5E5">to do these weird things and also memset</font>

1196
00:49:31,600 --> 00:49:34,569
<font color="#E5E5E5">please memset</font><font color="#CCCCCC"> i don't like to have</font><font color="#E5E5E5"> to</font>

1197
00:49:33,130 --> 00:49:38,920
waste my my limited amount of

1198
00:49:34,570 --> 00:49:40,840
instruction bytes performing<font color="#CCCCCC"> a memset</font><font color="#E5E5E5"> so</font>

1199
00:49:38,920 --> 00:49:42,130
just some<font color="#E5E5E5"> greets out to people the VCC</font>

1200
00:49:40,840 --> 00:49:44,260
developer has been super helpful<font color="#E5E5E5"> they're</font>

1201
00:49:42,130 --> 00:49:45,400
building<font color="#E5E5E5"> really cool tooling all this</font>

1202
00:49:44,260 --> 00:49:46,050
stuff is<font color="#CCCCCC"> just getting better</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> better</font>

1203
00:49:45,400 --> 00:49:48,790
<font color="#CCCCCC">every day</font>

1204
00:49:46,050 --> 00:49:50,410
<font color="#CCCCCC">Julie Evans has great blog post on how</font>

1205
00:49:48,790 --> 00:49:52,690
Cape robes and<font color="#E5E5E5"> all this stuff works</font>

1206
00:49:50,410 --> 00:49:55,180
same with<font color="#E5E5E5"> Brendan Greg and</font><font color="#CCCCCC"> Jesse Frisell</font>

1207
00:49:52,690 --> 00:49:57,850
is has been building this thing<font color="#E5E5E5"> called</font>

1208
00:49:55,180 --> 00:50:00,069
<font color="#CCCCCC">BP FD which is almost</font><font color="#E5E5E5"> certainly going to</font>

1209
00:49:57,850 --> 00:50:03,360
be<font color="#E5E5E5"> the thing</font><font color="#CCCCCC"> that I would want to inject</font>

1210
00:50:00,070 --> 00:50:06,460
<font color="#E5E5E5">into</font><font color="#CCCCCC"> pid'</font><font color="#E5E5E5"> one as my rootkit manager</font>

1211
00:50:03,360 --> 00:50:08,650
definitely because it<font color="#CCCCCC"> manages all the</font>

1212
00:50:06,460 --> 00:50:11,330
<font color="#E5E5E5">things you can't hide from the future</font>

1213
00:50:08,650 --> 00:50:21,140
are there any questions

1214
00:50:11,330 --> 00:50:24,409
[Applause]

1215
00:50:21,140 --> 00:50:24,408
[Music]

1216
00:50:25,499 --> 00:50:30,669
so instead of<font color="#E5E5E5"> going into the</font><font color="#CCCCCC"> godmothers</font>

1217
00:50:28,660 --> 00:50:34,259
we went into the<font color="#CCCCCC"> Flying Spaghetti</font>

1218
00:50:30,670 --> 00:50:38,079
<font color="#CCCCCC">Monster Morgenson isn't it</font><font color="#E5E5E5"> questions</font>

1219
00:50:34,259 --> 00:50:39,459
ladies gentlemen<font color="#CCCCCC"> number two</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> Jew hey</font>

1220
00:50:38,079 --> 00:50:41,170
<font color="#CCCCCC">there great talk</font>

1221
00:50:39,459 --> 00:50:43,089
can you just turn off compiler

1222
00:50:41,170 --> 00:50:45,339
optimizations<font color="#E5E5E5"> and</font><font color="#CCCCCC"> vpf and save yourself</font>

1223
00:50:43,089 --> 00:50:47,349
a lot of trouble in the<font color="#E5E5E5"> validator um if</font>

1224
00:50:45,339 --> 00:50:49,359
you want to go modify the piece of<font color="#E5E5E5"> the</font>

1225
00:50:47,349 --> 00:50:51,910
code<font color="#CCCCCC"> that does it</font><font color="#E5E5E5"> that whole part</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

1226
00:50:49,359 --> 00:50:54,190
code is<font color="#CCCCCC"> in C++ because</font><font color="#E5E5E5"> it's all</font><font color="#CCCCCC"> whole of</font>

1227
00:50:51,910 --> 00:50:56,979
<font color="#CCCCCC">VM based and so you'd have</font><font color="#E5E5E5"> to rebuild</font>

1228
00:50:54,190 --> 00:50:59,140
<font color="#CCCCCC">VCC</font><font color="#E5E5E5"> to do it I</font><font color="#CCCCCC"> think there are there</font><font color="#E5E5E5"> are</font>

1229
00:50:56,979 --> 00:51:01,269
there<font color="#E5E5E5"> are the ability to set other</font><font color="#CCCCCC"> flags</font>

1230
00:50:59,140 --> 00:51:03,069
<font color="#CCCCCC">onto it but</font><font color="#E5E5E5"> I'm not sure if when where</font>

1231
00:51:01,269 --> 00:51:04,328
it does<font color="#E5E5E5"> the injection into it if it's</font>

1232
00:51:03,069 --> 00:51:07,380
before<font color="#E5E5E5"> or after and you could then</font>

1233
00:51:04,329 --> 00:51:11,079
<font color="#E5E5E5">override the optimization thank you</font>

1234
00:51:07,380 --> 00:51:13,930
number<font color="#E5E5E5"> three</font><font color="#CCCCCC"> um what</font><font color="#E5E5E5"> kind of version</font>

1235
00:51:11,079 --> 00:51:15,789
have you tested with okay<font color="#CCCCCC"> what bargain</font>

1236
00:51:13,930 --> 00:51:17,049
which<font color="#CCCCCC"> can our version of</font><font color="#E5E5E5"> you try this</font>

1237
00:51:15,789 --> 00:51:21,039
<font color="#CCCCCC">Way's because there is a lot of</font>

1238
00:51:17,049 --> 00:51:23,410
<font color="#E5E5E5">improvement in</font><font color="#CCCCCC"> every C's so so a lot of</font>

1239
00:51:21,039 --> 00:51:25,959
this we've been basing on primarily<font color="#E5E5E5"> two</font>

1240
00:51:23,410 --> 00:51:30,670
<font color="#E5E5E5">kernels</font><font color="#CCCCCC"> I think for 15 from a boon to</font>

1241
00:51:25,959 --> 00:51:35,649
1804<font color="#E5E5E5"> for 18 from 1918 to 10 and I want</font>

1242
00:51:30,670 --> 00:51:38,920
<font color="#CCCCCC">to say 16 or 17 from Kali Linux thanks D</font>

1243
00:51:35,650 --> 00:51:41,199
number<font color="#CCCCCC"> to seeing that it's easy to</font>

1244
00:51:38,920 --> 00:51:42,880
inject<font color="#E5E5E5"> stuff with if you f how kind of</font>

1245
00:51:41,199 --> 00:51:43,959
prevent it to be<font color="#E5E5E5"> one in the first place</font>

1246
00:51:42,880 --> 00:51:49,479
<font color="#CCCCCC">and if I need it</font>

1247
00:51:43,959 --> 00:51:52,419
anyway<font color="#CCCCCC"> I I see that</font><font color="#E5E5E5"> I'd need a PF in a</font>

1248
00:51:49,479 --> 00:51:55,359
kernel for<font color="#E5E5E5"> a base stuff like firewall</font>

1249
00:51:52,420 --> 00:51:59,440
stuff<font color="#E5E5E5"> and on but how do I</font><font color="#CCCCCC"> stop as a user</font>

1250
00:51:55,359 --> 00:52:04,239
to<font color="#CCCCCC"> like</font><font color="#E5E5E5"> scripts I'm installing to inject</font>

1251
00:51:59,440 --> 00:52:06,969
more EPF stuff in<font color="#CCCCCC"> mine Colonel sir sorry</font>

1252
00:52:04,239 --> 00:52:10,509
can you say that once<font color="#E5E5E5"> more how to make</font>

1253
00:52:06,969 --> 00:52:13,029
it hard for unknown scripts to inject

1254
00:52:10,509 --> 00:52:14,499
more EPF in<font color="#CCCCCC"> my</font><font color="#E5E5E5"> kernel</font><font color="#CCCCCC"> oh you need you</font>

1255
00:52:13,029 --> 00:52:17,979
need caps this admin to do most of<font color="#E5E5E5"> this</font>

1256
00:52:14,499 --> 00:52:20,109
stuff<font color="#E5E5E5"> and at least on containers</font><font color="#CCCCCC"> there</font>

1257
00:52:17,979 --> 00:52:21,609
are a lot of operations that<font color="#E5E5E5"> are in like</font>

1258
00:52:20,109 --> 00:52:23,348
<font color="#CCCCCC">Apple armor profiles and selinux</font>

1259
00:52:21,609 --> 00:52:25,479
<font color="#E5E5E5">stopping people from interacting</font><font color="#CCCCCC"> with</font>

1260
00:52:23,349 --> 00:52:26,979
the<font color="#E5E5E5"> CFS that is used for a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this</font>

1261
00:52:25,479 --> 00:52:28,808
<font color="#E5E5E5">the problem is is that in the newer</font>

1262
00:52:26,979 --> 00:52:30,729
kernels they've implemented another way

1263
00:52:28,809 --> 00:52:33,330
<font color="#E5E5E5">around this that just involves using</font>

1264
00:52:30,729 --> 00:52:36,419
either the<font color="#E5E5E5"> direct BPF</font>

1265
00:52:33,330 --> 00:52:38,190
or<font color="#E5E5E5"> the perf open without going through</font>

1266
00:52:36,420 --> 00:52:39,690
the Sisyphus<font color="#E5E5E5"> so that's going</font><font color="#CCCCCC"> to</font>

1267
00:52:38,190 --> 00:52:45,240
completely<font color="#CCCCCC"> bypass that protection</font>

1268
00:52:39,690 --> 00:52:47,310
<font color="#E5E5E5">probably right sir number two do you</font>

1269
00:52:45,240 --> 00:52:50,669
<font color="#E5E5E5">know if any like cloud providers which</font>

1270
00:52:47,310 --> 00:52:54,690
offer like container is like as a

1271
00:52:50,670 --> 00:52:56,400
service<font color="#E5E5E5"> vulnerable um haven't looked um</font>

1272
00:52:54,690 --> 00:52:58,190
if they're giving you<font color="#CCCCCC"> cap sysadmin for</font>

1273
00:52:56,400 --> 00:53:01,020
real<font color="#CCCCCC"> that</font><font color="#E5E5E5"> isn't used</font><font color="#CCCCCC"> user names based</font>

1274
00:52:58,190 --> 00:53:03,420
<font color="#CCCCCC">they've gotten</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> problems</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> from</font>

1275
00:53:01,020 --> 00:53:05,790
caps this<font color="#E5E5E5"> admin a full route is like</font>

1276
00:53:03,420 --> 00:53:07,830
it's more<font color="#E5E5E5"> of a neat party trick it's not</font>

1277
00:53:05,790 --> 00:53:09,450
<font color="#CCCCCC">really like a full privilege escalation</font>

1278
00:53:07,830 --> 00:53:10,920
but<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> happen to do it in something</font>

1279
00:53:09,450 --> 00:53:12,120
<font color="#CCCCCC">where if someone is</font><font color="#E5E5E5"> trying to apply all</font>

1280
00:53:10,920 --> 00:53:13,680
these other restrictions on your

1281
00:53:12,120 --> 00:53:14,009
container<font color="#CCCCCC"> and you happen to find a way</font>

1282
00:53:13,680 --> 00:53:15,720
<font color="#E5E5E5">out</font>

1283
00:53:14,010 --> 00:53:17,160
that would be bad<font color="#CCCCCC"> but also they probably</font>

1284
00:53:15,720 --> 00:53:21,450
shouldn't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> given you caps this admin</font>

1285
00:53:17,160 --> 00:53:23,250
in<font color="#CCCCCC"> the first place straight to</font><font color="#E5E5E5"> someone</font>

1286
00:53:21,450 --> 00:53:29,540
out<font color="#E5E5E5"> there in on the internet with</font>

1287
00:53:23,250 --> 00:53:34,290
<font color="#E5E5E5">regression someone else new new new new</font>

1288
00:53:29,540 --> 00:53:37,800
well Jeff Jeff and Andy<font color="#E5E5E5"> Andy</font><font color="#CCCCCC"> alts</font><font color="#E5E5E5"> on</font>

1289
00:53:34,290 --> 00:53:41,140
<font color="#CCCCCC">Jeff delay oh</font><font color="#E5E5E5"> we're going to shut it</font>

1290
00:53:37,800 --> 00:53:44,489
<font color="#CCCCCC">down here give them a</font><font color="#E5E5E5"> war applause</font>

1291
00:53:41,140 --> 00:53:44,489
[Applause]

1292
00:53:47,790 --> 00:53:54,969
[Music]

1293
00:53:57,040 --> 00:54:06,770
[Music]

1294
00:54:04,760 --> 00:54:09,710
you

1295
00:54:06,770 --> 00:54:09,710
[Music]

