1
00:00:02,830 --> 00:00:25,009
[Music]

2
00:00:19,880 --> 00:00:30,359
<font color="#CCCCCC">open-source</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> so open</font><font color="#E5E5E5"> source firmware</font>

3
00:00:25,010 --> 00:00:34,920
<font color="#E5E5E5">it is a very important part of the</font>

4
00:00:30,359 --> 00:00:38,010
<font color="#CCCCCC">open-source movement</font><font color="#E5E5E5"> and increasingly it</font>

5
00:00:34,920 --> 00:00:40,850
will become important for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> buzzword</font>

6
00:00:38,010 --> 00:00:44,760
of<font color="#CCCCCC"> the day</font><font color="#E5E5E5"> the Internet of Things IOT</font>

7
00:00:40,850 --> 00:00:47,660
<font color="#CCCCCC">Philip</font><font color="#E5E5E5"> will will tell us about</font>

8
00:00:44,760 --> 00:00:51,780
development of<font color="#CCCCCC"> open</font><font color="#E5E5E5"> source firmware and</font>

9
00:00:47,660 --> 00:00:53,489
also give an<font color="#CCCCCC"> outlook on to the future</font>

10
00:00:51,780 --> 00:00:54,960
what we can expect in the<font color="#CCCCCC"> future and I</font>

11
00:00:53,489 --> 00:00:59,550
think<font color="#E5E5E5"> it's going to be a very</font>

12
00:00:54,960 --> 00:01:03,239
interesting talk I'm as I'm glad to see

13
00:00:59,550 --> 00:01:14,610
you<font color="#CCCCCC"> all here and let's help him</font><font color="#E5E5E5"> and give</font>

14
00:01:03,239 --> 00:01:16,530
a warm hand to the to the speaker<font color="#CCCCCC"> ok so</font>

15
00:01:14,610 --> 00:01:19,170
we<font color="#CCCCCC"> talk about</font><font color="#E5E5E5"> open source firmware today</font>

16
00:01:16,530 --> 00:01:21,299
a love story<font color="#E5E5E5"> the slides are</font><font color="#CCCCCC"> in English</font>

17
00:01:19,170 --> 00:01:23,159
I'm sorry I tried<font color="#CCCCCC"> to</font><font color="#E5E5E5"> translate them into</font>

18
00:01:21,299 --> 00:01:24,780
German<font color="#E5E5E5"> and but it doesn't really work so</font>

19
00:01:23,159 --> 00:01:27,900
open source<font color="#E5E5E5"> firmware or firmware</font>

20
00:01:24,780 --> 00:01:31,439
<font color="#E5E5E5">development is mostly dependent</font><font color="#CCCCCC"> on</font>

21
00:01:27,900 --> 00:01:33,240
<font color="#CCCCCC">english terms and to</font><font color="#E5E5E5"> translate them</font>

22
00:01:31,439 --> 00:01:36,298
really hurts<font color="#E5E5E5"> and</font><font color="#CCCCCC"> nobody is going to</font>

23
00:01:33,240 --> 00:01:42,750
understand them<font color="#E5E5E5"> in German so I</font><font color="#CCCCCC"> talked</font>

24
00:01:36,299 --> 00:01:46,320
<font color="#CCCCCC">about me I'm head of head of 9 element</font>

25
00:01:42,750 --> 00:01:47,280
<font color="#E5E5E5">cyber security we made the open source</font>

26
00:01:46,320 --> 00:01:50,630
firmware conference

27
00:01:47,280 --> 00:01:55,009
<font color="#E5E5E5">I'm cobalt and Linux boot project member</font>

28
00:01:50,630 --> 00:01:58,380
and<font color="#E5E5E5"> also in the leadership there</font><font color="#CCCCCC"> maybe</font>

29
00:01:55,009 --> 00:02:00,390
some of<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> me from the</font><font color="#E5E5E5"> well not</font>

30
00:01:58,380 --> 00:02:02,610
the<font color="#CCCCCC"> hex</font><font color="#E5E5E5"> Center but from the</font><font color="#CCCCCC"> cobalt</font>

31
00:02:00,390 --> 00:02:06,299
flashing<font color="#E5E5E5"> and I'll do that on Congress</font>

32
00:02:02,610 --> 00:02:08,639
for a few years I'm active<font color="#E5E5E5"> in the hacker</font>

33
00:02:06,299 --> 00:02:11,400
space I do a<font color="#CCCCCC"> to security I've</font><font color="#E5E5E5"> been doing</font>

34
00:02:08,639 --> 00:02:13,709
it for 10 10 years and for<font color="#CCCCCC"> 5 years I've</font>

35
00:02:11,400 --> 00:02:16,290
<font color="#CCCCCC">been firmware developer and</font>

36
00:02:13,710 --> 00:02:18,840
<font color="#E5E5E5">you can contact</font><font color="#CCCCCC"> me via Twitter or my</font>

37
00:02:16,290 --> 00:02:21,690
<font color="#E5E5E5">company</font><font color="#CCCCCC"> email</font><font color="#E5E5E5"> so but what's the</font>

38
00:02:18,840 --> 00:02:25,790
motivation<font color="#E5E5E5"> why do I do this</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I wanted</font>

39
00:02:21,690 --> 00:02:27,900
to<font color="#E5E5E5"> do something wanted to do talk about</font>

40
00:02:25,790 --> 00:02:29,400
<font color="#CCCCCC">firmware development to people who</font><font color="#E5E5E5"> don't</font>

41
00:02:27,900 --> 00:02:31,680
know<font color="#E5E5E5"> anything about</font><font color="#CCCCCC"> that because</font><font color="#E5E5E5"> we want</font>

42
00:02:29,400 --> 00:02:33,510
to<font color="#E5E5E5"> have new developers because it's very</font>

43
00:02:31,680 --> 00:02:36,510
important and and one<font color="#E5E5E5"> of the things is</font>

44
00:02:33,510 --> 00:02:38,609
<font color="#CCCCCC">that a lot of that is under NDA it's</font>

45
00:02:36,510 --> 00:02:40,350
very complex and<font color="#CCCCCC"> people say oh my</font><font color="#E5E5E5"> god</font>

46
00:02:38,610 --> 00:02:42,900
firmware<font color="#E5E5E5"> that's even</font><font color="#CCCCCC"> more complex</font><font color="#E5E5E5"> than</font>

47
00:02:40,350 --> 00:02:45,380
the Linux kernel development<font color="#CCCCCC"> and yes</font>

48
00:02:42,900 --> 00:02:48,570
there was one<font color="#E5E5E5"> of reasons</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> other was</font>

49
00:02:45,380 --> 00:02:50,190
everybody says BIOS and BIOS is basic

50
00:02:48,570 --> 00:02:54,390
input/output system<font color="#E5E5E5"> and that</font><font color="#CCCCCC"> has been</font>

51
00:02:50,190 --> 00:02:57,840
<font color="#E5E5E5">dead since</font><font color="#CCCCCC"> the year 2000 and it means we</font>

52
00:02:54,390 --> 00:03:01,559
<font color="#E5E5E5">talk about more modern things and the</font>

53
00:02:57,840 --> 00:03:03,030
<font color="#E5E5E5">other the</font><font color="#CCCCCC"> other story is why is</font><font color="#E5E5E5"> open</font>

54
00:03:01,560 --> 00:03:04,920
source<font color="#E5E5E5"> firmware development important</font>

55
00:03:03,030 --> 00:03:08,040
and there's this nice guy maybe you've

56
00:03:04,920 --> 00:03:12,299
seen him<font color="#CCCCCC"> that's many and he works with</font>

57
00:03:08,040 --> 00:03:14,820
<font color="#CCCCCC">Google</font><font color="#E5E5E5"> and when he was</font><font color="#CCCCCC"> Atlas Los Alamos</font>

58
00:03:12,300 --> 00:03:18,180
<font color="#CCCCCC">National Laboratories</font><font color="#E5E5E5"> they had a CPU</font>

59
00:03:14,820 --> 00:03:20,310
cluster<font color="#E5E5E5"> about 1,024 pcs there was a long</font>

60
00:03:18,180 --> 00:03:22,620
time<font color="#E5E5E5"> ago and there wasn't a lot</font><font color="#CCCCCC"> of</font>

61
00:03:20,310 --> 00:03:25,170
special hardware and very low level and

62
00:03:22,620 --> 00:03:26,700
<font color="#E5E5E5">so and they had set them up and started</font>

63
00:03:25,170 --> 00:03:29,369
them and<font color="#E5E5E5"> helped that the</font><font color="#CCCCCC"> cluster would</font>

64
00:03:26,700 --> 00:03:31,799
that the cluster<font color="#E5E5E5"> would go online with</font>

65
00:03:29,370 --> 00:03:33,450
all these computers<font color="#E5E5E5"> and they found after</font>

66
00:03:31,800 --> 00:03:39,570
<font color="#CCCCCC">five minutes that nothing was happening</font>

67
00:03:33,450 --> 00:03:42,119
<font color="#CCCCCC">so and then they sent an intern to look</font>

68
00:03:39,570 --> 00:03:43,890
at the display and to connect<font color="#CCCCCC"> to display</font>

69
00:03:42,120 --> 00:03:46,800
<font color="#E5E5E5">and see what happened and they said all</font>

70
00:03:43,890 --> 00:03:49,049
said press f2 to continue and with

71
00:03:46,800 --> 00:03:52,410
service that's not really the<font color="#CCCCCC"> best</font>

72
00:03:49,050 --> 00:03:56,700
solution<font color="#E5E5E5"> if</font><font color="#CCCCCC"> the firmware requires a</font>

73
00:03:52,410 --> 00:03:58,620
manual input and in in the end<font color="#CCCCCC"> it</font>

74
00:03:56,700 --> 00:04:01,440
prevents one from from starting<font color="#E5E5E5"> the</font>

75
00:03:58,620 --> 00:04:03,330
systems and they really fought with<font color="#E5E5E5"> that</font>

76
00:04:01,440 --> 00:04:04,950
for<font color="#E5E5E5"> years the interns always had to</font>

77
00:04:03,330 --> 00:04:07,500
restart the computers and they always

78
00:04:04,950 --> 00:04:10,380
<font color="#E5E5E5">had to press f2</font><font color="#CCCCCC"> and it wasn't</font><font color="#E5E5E5"> very nice</font>

79
00:04:07,500 --> 00:04:13,860
<font color="#CCCCCC">and that's</font><font color="#E5E5E5"> one of the reasons a good</font>

80
00:04:10,380 --> 00:04:16,519
story why why in the<font color="#CCCCCC"> end we should think</font>

81
00:04:13,860 --> 00:04:20,640
<font color="#CCCCCC">about open source firmware</font><font color="#E5E5E5"> at first</font>

82
00:04:16,519 --> 00:04:23,340
let's talk about some<font color="#E5E5E5"> hardware</font><font color="#CCCCCC"> it's all</font>

83
00:04:20,640 --> 00:04:27,060
starts with hardware and<font color="#E5E5E5"> after that we</font>

84
00:04:23,340 --> 00:04:29,219
look at what what what is firmware

85
00:04:27,060 --> 00:04:31,290
and about what<font color="#CCCCCC"> firmware are we talking</font>

86
00:04:29,220 --> 00:04:33,840
this<font color="#E5E5E5"> is bought by Facebook it's called</font>

87
00:04:31,290 --> 00:04:36,930
the open<font color="#E5E5E5"> cellular it's really an</font>

88
00:04:33,840 --> 00:04:39,299
<font color="#CCCCCC">open-source base station or it's an open</font>

89
00:04:36,930 --> 00:04:41,910
<font color="#E5E5E5">hardware base station they really do</font>

90
00:04:39,300 --> 00:04:43,800
open hardware<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can download the the</font>

91
00:04:41,910 --> 00:04:46,139
<font color="#CCCCCC">boards of the</font><font color="#E5E5E5"> circuit</font><font color="#CCCCCC"> board layouts</font><font color="#E5E5E5"> and</font>

92
00:04:43,800 --> 00:04:49,260
everything is there<font color="#CCCCCC"> and you can do that</font>

93
00:04:46,139 --> 00:04:51,620
at github<font color="#E5E5E5"> it took that as an example and</font>

94
00:04:49,260 --> 00:04:54,210
this thing<font color="#CCCCCC"> also has</font><font color="#E5E5E5"> open source firmware</font>

95
00:04:51,620 --> 00:04:55,950
<font color="#E5E5E5">but if you look at a block diagram</font><font color="#CCCCCC"> these</font>

96
00:04:54,210 --> 00:04:58,710
days what's what's in it there are

97
00:04:55,950 --> 00:05:00,360
several circuit boards that are<font color="#E5E5E5"> stacked</font>

98
00:04:58,710 --> 00:05:02,609
upon each<font color="#E5E5E5"> other it's</font><font color="#CCCCCC"> not everything</font><font color="#E5E5E5"> on</font>

99
00:05:00,360 --> 00:05:06,300
<font color="#E5E5E5">one board but there are several boards</font>

100
00:05:02,610 --> 00:05:06,930
for various reasons<font color="#E5E5E5"> one is the host</font>

101
00:05:06,300 --> 00:05:08,690
processor

102
00:05:06,930 --> 00:05:12,450
there's the power supply<font color="#E5E5E5"> the front panel</font>

103
00:05:08,690 --> 00:05:14,760
<font color="#E5E5E5">and there's that also</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> part of the</font>

104
00:05:12,450 --> 00:05:16,979
<font color="#CCCCCC">mainboard it's a huge block diagram</font>

105
00:05:14,760 --> 00:05:20,340
there<font color="#E5E5E5"> are several components and it's</font>

106
00:05:16,979 --> 00:05:22,590
<font color="#CCCCCC">always</font><font color="#E5E5E5"> it's all quite complex</font><font color="#CCCCCC"> and if one</font>

107
00:05:20,340 --> 00:05:26,489
takes a look<font color="#E5E5E5"> in some more detail there</font>

108
00:05:22,590 --> 00:05:28,919
<font color="#E5E5E5">will find that down there is</font><font color="#CCCCCC"> T var and</font>

109
00:05:26,490 --> 00:05:30,660
there's Intel Atom<font color="#E5E5E5"> and there's some</font>

110
00:05:28,919 --> 00:05:34,049
thing<font color="#CCCCCC"> about a power controller and</font>

111
00:05:30,660 --> 00:05:37,530
there's a<font color="#CCCCCC"> DPM</font><font color="#E5E5E5"> and they all have firmware</font>

112
00:05:34,050 --> 00:05:39,210
and if we have a<font color="#E5E5E5"> laptop or something</font>

113
00:05:37,530 --> 00:05:41,690
<font color="#E5E5E5">like that a think pad or something like</font>

114
00:05:39,210 --> 00:05:44,340
<font color="#CCCCCC">that</font><font color="#E5E5E5"> there are 15</font><font color="#CCCCCC"> different processors</font>

115
00:05:41,690 --> 00:05:46,080
some of them are microcontrollers but

116
00:05:44,340 --> 00:05:48,989
some are<font color="#CCCCCC"> really faster than their</font>

117
00:05:46,080 --> 00:05:52,260
there's some<font color="#CCCCCC"> ARM cores or maybe even</font><font color="#E5E5E5"> x86</font>

118
00:05:48,990 --> 00:05:53,940
and there's firmware everywhere these

119
00:05:52,260 --> 00:05:55,349
days<font color="#E5E5E5"> you just don't see them you think</font>

120
00:05:53,940 --> 00:05:58,289
<font color="#E5E5E5">you have one processor and there's a</font>

121
00:05:55,350 --> 00:06:01,289
BIOS firmware or something well<font color="#E5E5E5"> no not</font>

122
00:05:58,289 --> 00:06:03,210
really there's there's really<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> more</font>

123
00:06:01,289 --> 00:06:04,889
<font color="#CCCCCC">there's firmware everywhere</font><font color="#E5E5E5"> and what we</font>

124
00:06:03,210 --> 00:06:07,200
<font color="#CCCCCC">talked about</font><font color="#E5E5E5"> today is the host processor</font>

125
00:06:04,889 --> 00:06:09,030
firmware<font color="#E5E5E5"> because if you talk</font><font color="#CCCCCC"> about all</font>

126
00:06:07,200 --> 00:06:12,000
the<font color="#E5E5E5"> firmware</font><font color="#CCCCCC"> that it will be too</font><font color="#E5E5E5"> much</font>

127
00:06:09,030 --> 00:06:13,859
and<font color="#CCCCCC"> would take days to</font><font color="#E5E5E5"> get through in</font>

128
00:06:12,000 --> 00:06:17,580
general you can<font color="#CCCCCC"> say that hardware is</font>

129
00:06:13,860 --> 00:06:21,270
made by OEMs or ODMs<font color="#E5E5E5"> original design or</font>

130
00:06:17,580 --> 00:06:25,560
<font color="#CCCCCC">original equipment manufacturer this</font><font color="#E5E5E5"> is</font>

131
00:06:21,270 --> 00:06:27,120
for<font color="#E5E5E5"> example in over Dell or HP they they</font>

132
00:06:25,560 --> 00:06:30,930
don't<font color="#E5E5E5"> make the hardware themselves they</font>

133
00:06:27,120 --> 00:06:33,539
they subcontract<font color="#E5E5E5"> ODMs for example</font>

134
00:06:30,930 --> 00:06:36,510
<font color="#CCCCCC">Western or quanta to make the hardware</font>

135
00:06:33,539 --> 00:06:38,789
<font color="#E5E5E5">and they also design the layouts and</font>

136
00:06:36,510 --> 00:06:40,570
<font color="#E5E5E5">Lenovo only</font><font color="#CCCCCC"> subcontracts these and then</font>

137
00:06:38,789 --> 00:06:43,419
<font color="#E5E5E5">sells the hardware to</font><font color="#CCCCCC"> the customer</font>

138
00:06:40,570 --> 00:06:45,849
these OEM<font color="#E5E5E5"> or</font><font color="#CCCCCC"> ODM</font><font color="#E5E5E5"> they're also the</font>

139
00:06:43,420 --> 00:06:48,220
customers by the sub vendors and the

140
00:06:45,850 --> 00:06:51,280
system on a chip vendors<font color="#CCCCCC"> for example</font>

141
00:06:48,220 --> 00:06:53,350
<font color="#E5E5E5">Intel AMD Qualcomm</font><font color="#CCCCCC"> caveum and other CPU</font>

142
00:06:51,280 --> 00:06:56,849
manufacturers that<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> Intel's</font>

143
00:06:53,350 --> 00:07:00,970
customers are not we we are<font color="#E5E5E5"> not but in</font>

144
00:06:56,850 --> 00:07:02,830
reality<font color="#E5E5E5"> Lenovo and HP are that</font><font color="#CCCCCC"> produce</font>

145
00:07:00,970 --> 00:07:04,630
<font color="#E5E5E5">the hardware our Intel's customers and</font>

146
00:07:02,830 --> 00:07:07,150
what's also important is<font color="#E5E5E5"> that most of</font>

147
00:07:04,630 --> 00:07:09,640
these OEMs don't really like to write

148
00:07:07,150 --> 00:07:12,840
the firmware themselves because but this

149
00:07:09,640 --> 00:07:16,680
Hardware requires firmware so they go<font color="#CCCCCC"> to</font>

150
00:07:12,840 --> 00:07:18,849
independent BIOS vendors it's not a nice

151
00:07:16,680 --> 00:07:20,980
not a nice<font color="#E5E5E5"> label they should be called</font>

152
00:07:18,850 --> 00:07:24,280
independent firmware vendors but<font color="#CCCCCC"> they're</font>

153
00:07:20,980 --> 00:07:26,980
companies that that make the firmware on

154
00:07:24,280 --> 00:07:28,359
<font color="#CCCCCC">contract from</font><font color="#E5E5E5"> the manufacturer and they</font>

155
00:07:26,980 --> 00:07:30,700
boot up<font color="#CCCCCC"> the hardware</font><font color="#E5E5E5"> and make everything</font>

156
00:07:28,360 --> 00:07:34,210
run and in<font color="#E5E5E5"> the end that's really the</font>

157
00:07:30,700 --> 00:07:36,490
logic behind it so what we<font color="#CCCCCC"> look at</font><font color="#E5E5E5"> today</font>

158
00:07:34,210 --> 00:07:39,580
is<font color="#CCCCCC"> the host processor firmware that's a</font>

159
00:07:36,490 --> 00:07:43,270
flash chip there's a red<font color="#CCCCCC"> dot on it to</font>

160
00:07:39,580 --> 00:07:48,820
<font color="#E5E5E5">identify it not always but sometimes is</font>

161
00:07:43,270 --> 00:07:51,070
a<font color="#E5E5E5"> CP engine APU to there's a header and</font>

162
00:07:48,820 --> 00:07:53,230
you<font color="#CCCCCC"> can read out the flesh and these</font>

163
00:07:51,070 --> 00:07:54,909
flash chips are everywhere in most

164
00:07:53,230 --> 00:07:57,430
systems<font color="#E5E5E5"> on routers and desktops laptops</font>

165
00:07:54,910 --> 00:07:59,230
and servers everywhere are these flash

166
00:07:57,430 --> 00:08:03,670
chips<font color="#E5E5E5"> sometimes they have a different</font>

167
00:07:59,230 --> 00:08:04,600
form this is specific<font color="#CCCCCC"> and there's also V</font>

168
00:08:03,670 --> 00:08:09,370
<font color="#CCCCCC">zone</font><font color="#E5E5E5"> or something</font>

169
00:08:04,600 --> 00:08:12,220
other packaging and<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> that's what we</font>

170
00:08:09,370 --> 00:08:13,990
<font color="#E5E5E5">talked</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> today if we look</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> look</font>

171
00:08:12,220 --> 00:08:15,760
at this<font color="#E5E5E5"> fresh memory there's no</font><font color="#CCCCCC"> flash</font>

172
00:08:13,990 --> 00:08:18,760
what I talked<font color="#CCCCCC"> about that</font><font color="#E5E5E5"> I showed you</font>

173
00:08:15,760 --> 00:08:23,469
<font color="#E5E5E5">and there's is connected to the</font><font color="#CCCCCC"> spi bus</font>

174
00:08:18,760 --> 00:08:25,990
is<font color="#E5E5E5"> very fast</font><font color="#CCCCCC"> it's very expensive because</font>

175
00:08:23,470 --> 00:08:28,450
<font color="#CCCCCC">you have to put it</font><font color="#E5E5E5"> onto the circuit</font>

176
00:08:25,990 --> 00:08:30,820
board in<font color="#E5E5E5"> addition it's quite easy</font><font color="#CCCCCC"> to</font>

177
00:08:28,450 --> 00:08:32,620
integrate the bus<font color="#E5E5E5"> protocol isn't very</font>

178
00:08:30,820 --> 00:08:36,909
complicated<font color="#CCCCCC"> and their drivers for</font>

179
00:08:32,620 --> 00:08:41,140
<font color="#E5E5E5">everything and it's it's quite easy then</font>

180
00:08:36,909 --> 00:08:42,939
there's<font color="#CCCCCC"> also a MMC</font><font color="#E5E5E5"> and sometimes it is</font>

181
00:08:41,140 --> 00:08:46,720
<font color="#E5E5E5">used for firmware it has some problems</font>

182
00:08:42,940 --> 00:08:49,710
<font color="#CCCCCC">though for</font><font color="#E5E5E5"> example it's quite slow</font><font color="#CCCCCC"> and</font>

183
00:08:46,720 --> 00:08:53,600
<font color="#CCCCCC">although it's quite</font><font color="#E5E5E5"> cheap</font><font color="#CCCCCC"> it's really</font>

184
00:08:49,710 --> 00:08:54,949
complicated<font color="#CCCCCC"> to initialize it</font><font color="#E5E5E5"> but</font>

185
00:08:53,600 --> 00:08:57,680
means the<font color="#E5E5E5"> phone where has a lot</font><font color="#CCCCCC"> of work</font>

186
00:08:54,949 --> 00:09:02,000
to get<font color="#E5E5E5"> everything running and to get</font>

187
00:08:57,680 --> 00:09:05,388
<font color="#E5E5E5">started</font><font color="#CCCCCC"> some some notebooks have that</font>

188
00:09:02,000 --> 00:09:07,040
but usually<font color="#E5E5E5"> it's it's nor flesh and then</font>

189
00:09:05,389 --> 00:09:09,230
there are those microcontrollers they

190
00:09:07,040 --> 00:09:12,469
usually have internal flash memory<font color="#E5E5E5"> with</font>

191
00:09:09,230 --> 00:09:15,699
just<font color="#CCCCCC"> a small memory just a few kilobytes</font>

192
00:09:12,470 --> 00:09:18,740
<font color="#E5E5E5">but not really megabytes or gigabytes</font>

193
00:09:15,699 --> 00:09:21,290
and so you can see here there's an

194
00:09:18,740 --> 00:09:24,050
external flash programmer<font color="#E5E5E5"> which you need</font>

195
00:09:21,290 --> 00:09:25,969
<font color="#CCCCCC">to read</font><font color="#E5E5E5"> to read it and the operating</font>

196
00:09:24,050 --> 00:09:28,579
system<font color="#E5E5E5"> doesn't support that and</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> you</font>

197
00:09:25,970 --> 00:09:31,279
want to write it<font color="#E5E5E5"> and this this</font><font color="#CCCCCC"> bought</font>

198
00:09:28,579 --> 00:09:35,599
with<font color="#E5E5E5"> the with a clamp there that you can</font>

199
00:09:31,279 --> 00:09:38,720
also buy and the the size of the nor

200
00:09:35,600 --> 00:09:42,980
<font color="#E5E5E5">flesh has increased in recent years in</font>

201
00:09:38,720 --> 00:09:44,899
times of<font color="#CCCCCC"> where around</font><font color="#E5E5E5"> 2000 there wasn't</font>

202
00:09:42,980 --> 00:09:48,009
a lot there<font color="#CCCCCC"> was maybe five hundred of</font>

203
00:09:44,899 --> 00:09:50,569
kilobytes<font color="#E5E5E5"> or maybe one megabyte today in</font>

204
00:09:48,009 --> 00:09:54,740
current laptops there's<font color="#CCCCCC"> sixteen</font>

205
00:09:50,569 --> 00:09:57,500
megabytes<font color="#E5E5E5"> of memory</font><font color="#CCCCCC"> and Google last week</font>

206
00:09:54,740 --> 00:10:00,920
they had<font color="#CCCCCC"> a coreboot tree and they went</font>

207
00:09:57,500 --> 00:10:02,899
up<font color="#E5E5E5"> to 32 megabytes it's the first first</font>

208
00:10:00,920 --> 00:10:06,380
one with 32 megabytes nor<font color="#E5E5E5"> flash and it's</font>

209
00:10:02,899 --> 00:10:09,439
going<font color="#E5E5E5"> to be more and some already</font><font color="#CCCCCC"> have</font>

210
00:10:06,380 --> 00:10:11,509
512 megabytes and with<font color="#CCCCCC"> five and twelve</font>

211
00:10:09,439 --> 00:10:13,099
megabytes there's a lot<font color="#CCCCCC"> you can do you</font>

212
00:10:11,509 --> 00:10:16,850
have<font color="#E5E5E5"> in addition to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> firmware there</font>

213
00:10:13,100 --> 00:10:19,819
you can<font color="#E5E5E5"> have a</font><font color="#CCCCCC"> Lim's firmware and and</font>

214
00:10:16,850 --> 00:10:24,439
and the<font color="#E5E5E5"> next server and nodejs</font>

215
00:10:19,819 --> 00:10:26,449
and whatever you want<font color="#E5E5E5"> okay and that</font>

216
00:10:24,439 --> 00:10:30,410
means the firmware running on<font color="#E5E5E5"> our</font>

217
00:10:26,449 --> 00:10:32,180
systems is is<font color="#E5E5E5"> growing is growing without</font>

218
00:10:30,410 --> 00:10:34,100
end there's more and<font color="#E5E5E5"> more</font><font color="#CCCCCC"> memory and</font>

219
00:10:32,180 --> 00:10:37,310
we'll have more and<font color="#E5E5E5"> more firmware and</font>

220
00:10:34,100 --> 00:10:47,149
it's really uncool if it were all closed

221
00:10:37,310 --> 00:10:50,930
source<font color="#E5E5E5"> so let's talk about</font><font color="#CCCCCC"> ibv before</font>

222
00:10:47,149 --> 00:10:56,420
you saw<font color="#E5E5E5"> it on the</font><font color="#CCCCCC"> screen there's also</font>

223
00:10:50,930 --> 00:10:58,638
<font color="#E5E5E5">phoenix technology inside many more many</font>

224
00:10:56,420 --> 00:11:02,269
<font color="#CCCCCC">more of them are actually</font><font color="#E5E5E5"> selling the</font>

225
00:10:58,639 --> 00:11:05,449
<font color="#CCCCCC">software</font><font color="#E5E5E5"> as well as a product and</font>

226
00:11:02,269 --> 00:11:07,400
they're producing<font color="#E5E5E5"> sorts but some of them</font>

227
00:11:05,449 --> 00:11:13,280
are also producing

228
00:11:07,400 --> 00:11:20,360
<font color="#E5E5E5">no source family for a</font><font color="#CCCCCC"> few projects like</font>

229
00:11:13,280 --> 00:11:24,560
huge<font color="#CCCCCC"> corporates so some of them are</font>

230
00:11:20,360 --> 00:11:29,000
delivered as with royalty<font color="#E5E5E5"> fees and some</font>

231
00:11:24,560 --> 00:11:36,020
are<font color="#CCCCCC"> just giving us SDK courts and</font>

232
00:11:29,000 --> 00:11:37,910
<font color="#E5E5E5">they're getting this as so the SDK is</font>

233
00:11:36,020 --> 00:11:40,850
maybe<font color="#E5E5E5"> about</font><font color="#CCCCCC"> 20,000 euros</font><font color="#E5E5E5"> or even more</font>

234
00:11:37,910 --> 00:11:43,730
expensive<font color="#E5E5E5"> and in addition to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> there</font>

235
00:11:40,850 --> 00:11:48,680
<font color="#E5E5E5">there be royalty fees</font><font color="#CCCCCC"> which means that</font>

236
00:11:43,730 --> 00:11:50,870
it's something<font color="#E5E5E5"> like usage fees so if you</font>

237
00:11:48,680 --> 00:11:54,140
go<font color="#E5E5E5"> there and and want to sell hardware</font>

238
00:11:50,870 --> 00:11:58,670
then for<font color="#CCCCCC"> every hardware you have to pave</font>

239
00:11:54,140 --> 00:12:01,580
maybe<font color="#E5E5E5"> 50 euros a usage fee and 50</font><font color="#CCCCCC"> year</font>

240
00:11:58,670 --> 00:12:03,800
50 euros per device and if you sell a

241
00:12:01,580 --> 00:12:06,860
few<font color="#E5E5E5"> 10,000 100,000 that's a lot of money</font>

242
00:12:03,800 --> 00:12:09,920
and<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> so open source firmware is a</font>

243
00:12:06,860 --> 00:12:13,310
lot<font color="#E5E5E5"> cooler maybe so here's an</font><font color="#CCCCCC"> IDE</font>

244
00:12:09,920 --> 00:12:14,780
<font color="#E5E5E5">example they have a service page for</font>

245
00:12:13,310 --> 00:12:18,800
converting services there<font color="#CCCCCC"> are some that</font>

246
00:12:14,780 --> 00:12:20,810
are those<font color="#E5E5E5"> are mostly the good guys</font><font color="#CCCCCC"> but</font>

247
00:12:18,800 --> 00:12:24,699
they're<font color="#E5E5E5"> not really great but it's better</font>

248
00:12:20,810 --> 00:12:30,260
than the<font color="#CCCCCC"> old conservative</font><font color="#E5E5E5"> development</font>

249
00:12:24,700 --> 00:12:32,150
and so let's see how<font color="#E5E5E5"> firmware actually</font>

250
00:12:30,260 --> 00:12:34,250
works there's a flash chip<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> a</font>

251
00:12:32,150 --> 00:12:35,240
host processor firmware and how<font color="#CCCCCC"> does</font>

252
00:12:34,250 --> 00:12:40,460
<font color="#CCCCCC">that</font><font color="#E5E5E5"> work</font>

253
00:12:35,240 --> 00:12:43,490
most just press the power switch and at

254
00:12:40,460 --> 00:12:45,590
one<font color="#E5E5E5"> time Linux is booted and or the boot</font>

255
00:12:43,490 --> 00:12:47,270
loader<font color="#E5E5E5"> and then Linux and so that you</font>

256
00:12:45,590 --> 00:12:49,070
can understand how<font color="#CCCCCC"> that</font><font color="#E5E5E5"> works you can't</font>

257
00:12:47,270 --> 00:12:50,600
just easily categorize it firmware is

258
00:12:49,070 --> 00:12:52,820
different<font color="#E5E5E5"> even open source firmware is</font>

259
00:12:50,600 --> 00:12:55,910
different not<font color="#E5E5E5"> everything's implemented</font>

260
00:12:52,820 --> 00:12:59,050
the same way but<font color="#CCCCCC"> they're always always</font><font color="#E5E5E5"> a</font>

261
00:12:55,910 --> 00:13:02,150
<font color="#E5E5E5">few things that are the same so at first</font>

262
00:12:59,050 --> 00:13:05,240
there's an initial code<font color="#E5E5E5"> the reset vector</font>

263
00:13:02,150 --> 00:13:07,610
is executed<font color="#CCCCCC"> so there's some initial</font><font color="#E5E5E5"> code</font>

264
00:13:05,240 --> 00:13:10,070
in the firmware which is executed by the

265
00:13:07,610 --> 00:13:11,900
<font color="#CCCCCC">so called reset vector</font><font color="#E5E5E5"> and then SRAM and</font>

266
00:13:10,070 --> 00:13:15,710
cache Ram is being initialized or used

267
00:13:11,900 --> 00:13:17,720
then<font color="#CCCCCC"> the system main memory is set up</font>

268
00:13:15,710 --> 00:13:19,610
then many drivers are loaded you<font color="#CCCCCC"> can see</font>

269
00:13:17,720 --> 00:13:20,600
it in Linux drivers it loads a lot of

270
00:13:19,610 --> 00:13:23,269
<font color="#E5E5E5">drivers</font>

271
00:13:20,600 --> 00:13:26,480
<font color="#CCCCCC">initialization and then some mechanisms</font>

272
00:13:23,269 --> 00:13:28,459
<font color="#CCCCCC">I</font><font color="#E5E5E5"> executed which are used for the</font>

273
00:13:26,480 --> 00:13:30,319
operating<font color="#CCCCCC"> system needed</font><font color="#E5E5E5"> by the operating</font>

274
00:13:28,459 --> 00:13:32,119
<font color="#E5E5E5">system</font><font color="#CCCCCC"> which has some requirements and</font>

275
00:13:30,319 --> 00:13:35,089
then<font color="#E5E5E5"> the bootloader inside the</font><font color="#CCCCCC"> firmware</font>

276
00:13:32,120 --> 00:13:35,779
is being loaded<font color="#E5E5E5"> if there is one and then</font>

277
00:13:35,089 --> 00:13:38,000
the bootloader

278
00:13:35,779 --> 00:13:40,160
<font color="#CCCCCC">in the</font><font color="#E5E5E5"> operating system is being loaded</font>

279
00:13:38,000 --> 00:13:43,220
and then<font color="#E5E5E5"> the bridge the operating system</font>

280
00:13:40,160 --> 00:13:45,350
<font color="#E5E5E5">itself and we look at that in some more</font>

281
00:13:43,220 --> 00:13:48,560
detail but that's roughly what<font color="#CCCCCC"> it does</font>

282
00:13:45,350 --> 00:13:51,440
<font color="#E5E5E5">so let's look at the flash chip first</font>

283
00:13:48,560 --> 00:13:53,750
the flash<font color="#E5E5E5"> chip can have partition tables</font>

284
00:13:51,440 --> 00:13:56,839
<font color="#E5E5E5">some manufacturers thought it would be a</font>

285
00:13:53,750 --> 00:14:00,139
nice idea<font color="#CCCCCC"> if they already</font><font color="#E5E5E5"> tell people or</font>

286
00:13:56,839 --> 00:14:02,899
the IB<font color="#E5E5E5"> V's how to partition it and there</font>

287
00:14:00,139 --> 00:14:05,600
are<font color="#E5E5E5"> some</font><font color="#CCCCCC"> reasons why for example Intel</font>

288
00:14:02,899 --> 00:14:08,360
there's this<font color="#E5E5E5"> inter firmware descript</font>

289
00:14:05,600 --> 00:14:10,250
descriptor why<font color="#E5E5E5"> they do it the</font>

290
00:14:08,360 --> 00:14:12,680
partitioning is usually in<font color="#E5E5E5"> four</font>

291
00:14:10,250 --> 00:14:16,490
partitions<font color="#E5E5E5"> for internal systems and the</font>

292
00:14:12,680 --> 00:14:23,719
flash<font color="#E5E5E5"> chip is used as a configuration</font>

293
00:14:16,490 --> 00:14:27,439
<font color="#E5E5E5">source for the for the</font><font color="#CCCCCC"> IFD and off for</font>

294
00:14:23,720 --> 00:14:30,589
<font color="#E5E5E5">the it's a big it's a big theme they</font>

295
00:14:27,439 --> 00:14:34,040
have in there's the partition table

296
00:14:30,589 --> 00:14:36,860
header<font color="#E5E5E5"> it's and then there's one that's</font>

297
00:14:34,040 --> 00:14:39,620
<font color="#CCCCCC">called GBE</font><font color="#E5E5E5"> and the partition that's the</font>

298
00:14:36,860 --> 00:14:43,100
data it used is required for the Gigabit

299
00:14:39,620 --> 00:14:45,230
Ethernet so the LAN adapter they and

300
00:14:43,100 --> 00:14:46,939
their configuration data for the MAC

301
00:14:45,230 --> 00:14:49,399
<font color="#CCCCCC">address it's there then then this the</font>

302
00:14:46,939 --> 00:14:51,680
<font color="#CCCCCC">AMIA that's the Southbridge firmware for</font>

303
00:14:49,399 --> 00:14:53,899
example and<font color="#E5E5E5"> after there there's the</font><font color="#CCCCCC"> bios</font>

304
00:14:51,680 --> 00:14:55,630
the the real the actual firmware<font color="#CCCCCC"> that</font>

305
00:14:53,899 --> 00:14:58,670
does the<font color="#CCCCCC"> initialization of the platform</font>

306
00:14:55,630 --> 00:15:00,620
and<font color="#E5E5E5"> it's not always the case and it's</font>

307
00:14:58,670 --> 00:15:03,079
really just with Intel systems<font color="#E5E5E5"> with arm</font>

308
00:15:00,620 --> 00:15:04,880
or AMD systems or others other

309
00:15:03,079 --> 00:15:09,019
architectures that<font color="#CCCCCC"> it's usually</font><font color="#E5E5E5"> not done</font>

310
00:15:04,880 --> 00:15:12,920
their firmware does that by itself<font color="#E5E5E5"> then</font>

311
00:15:09,019 --> 00:15:16,670
there's<font color="#CCCCCC"> rom CC it's a strange name</font><font color="#E5E5E5"> it's</font>

312
00:15:12,920 --> 00:15:18,560
compiler<font color="#E5E5E5"> whatever whenever</font><font color="#CCCCCC"> it is CC</font>

313
00:15:16,670 --> 00:15:22,040
<font color="#E5E5E5">that's usually compiler and this</font>

314
00:15:18,560 --> 00:15:24,529
compiler<font color="#CCCCCC"> what it does is it's legacy in</font>

315
00:15:22,040 --> 00:15:28,969
the end it it compiles an initial code

316
00:15:24,529 --> 00:15:31,329
from the firmware<font color="#E5E5E5"> and it was owned was</font>

317
00:15:28,970 --> 00:15:34,130
only done with x86 legacy platforms and

318
00:15:31,329 --> 00:15:36,439
Intel x86 platforms

319
00:15:34,130 --> 00:15:38,959
and it was created by<font color="#CCCCCC"> Eric bidelman and</font>

320
00:15:36,440 --> 00:15:41,060
it's one huge<font color="#CCCCCC"> sea fire with</font><font color="#E5E5E5"> 21 thousand</font>

321
00:15:38,959 --> 00:15:43,638
lines of code it's it's a real monster<font color="#CCCCCC"> I</font>

322
00:15:41,060 --> 00:15:45,829
looked at some of<font color="#E5E5E5"> the ASCII art there</font>

323
00:15:43,639 --> 00:15:47,540
and whatever<font color="#E5E5E5"> whenever there's ASCII art</font>

324
00:15:45,829 --> 00:15:50,508
it's it's it's never a<font color="#E5E5E5"> good sign if</font>

325
00:15:47,540 --> 00:15:52,430
there's ASCII art inside code and what

326
00:15:50,509 --> 00:15:54,980
the thing does<font color="#E5E5E5"> is you have to</font><font color="#CCCCCC"> know that</font>

327
00:15:52,430 --> 00:15:57,739
<font color="#CCCCCC">with old Intel systems</font><font color="#E5E5E5"> there's no</font>

328
00:15:54,980 --> 00:15:59,810
there's<font color="#CCCCCC"> no main memory in the beginning</font>

329
00:15:57,740 --> 00:16:02,750
there's nothing absolutely nothing so if

330
00:15:59,810 --> 00:16:03,859
you don't have<font color="#E5E5E5"> cash on your memory so</font>

331
00:16:02,750 --> 00:16:05,569
how do you do memory<font color="#CCCCCC"> in</font><font color="#E5E5E5"> memory</font>

332
00:16:03,860 --> 00:16:08,690
management<font color="#E5E5E5"> and what you do is you use</font>

333
00:16:05,569 --> 00:16:10,639
<font color="#E5E5E5">registers so we have CPU</font><font color="#CCCCCC"> registers they</font>

334
00:16:08,690 --> 00:16:14,180
are there from<font color="#E5E5E5"> the beginning and the</font>

335
00:16:10,639 --> 00:16:16,220
compiler uses<font color="#E5E5E5"> CPU registers and uses</font>

336
00:16:14,180 --> 00:16:19,699
that<font color="#E5E5E5"> as</font><font color="#CCCCCC"> memory but</font><font color="#E5E5E5"> there's some some</font>

337
00:16:16,220 --> 00:16:22,009
problems with that<font color="#CCCCCC"> so if you if you nest</font>

338
00:16:19,699 --> 00:16:23,149
<font color="#E5E5E5">functions too deeply then the registers</font>

339
00:16:22,009 --> 00:16:25,910
<font color="#CCCCCC">are full and there's a stack overflow</font>

340
00:16:23,149 --> 00:16:27,740
<font color="#CCCCCC">and in this case</font><font color="#E5E5E5"> not a stack overflow</font>

341
00:16:25,910 --> 00:16:32,149
button<font color="#E5E5E5"> register overflow and this is</font>

342
00:16:27,740 --> 00:16:35,509
<font color="#E5E5E5">really in the end what happens</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> it's</font>

343
00:16:32,149 --> 00:16:37,790
an invention of coreboot<font color="#E5E5E5"> and the code is</font>

344
00:16:35,509 --> 00:16:40,939
<font color="#E5E5E5">still there and some old systems still</font>

345
00:16:37,790 --> 00:16:42,769
use that<font color="#E5E5E5"> it's it's you can't do that in</font>

346
00:16:40,939 --> 00:16:45,199
any different way<font color="#E5E5E5"> and with modern</font>

347
00:16:42,769 --> 00:16:47,930
systems there's there's SRAM<font color="#E5E5E5"> or</font><font color="#CCCCCC"> cache</font>

348
00:16:45,199 --> 00:16:50,899
less<font color="#CCCCCC"> ram that's the platform</font><font color="#E5E5E5"> itself the</font>

349
00:16:47,930 --> 00:16:52,969
system on a chip<font color="#E5E5E5"> already supplies or</font>

350
00:16:50,899 --> 00:16:54,560
provides memories so you have some<font color="#E5E5E5"> sort</font>

351
00:16:52,970 --> 00:16:56,480
of<font color="#E5E5E5"> memory it's not really main memory</font>

352
00:16:54,560 --> 00:16:59,540
but it's it's some kind of memory<font color="#CCCCCC"> it's</font>

353
00:16:56,480 --> 00:17:01,189
just a few megabytes<font color="#E5E5E5"> caches Ram can can</font>

354
00:16:59,540 --> 00:17:04,309
everybody everybody can imagine<font color="#E5E5E5"> that</font>

355
00:17:01,189 --> 00:17:06,230
it's<font color="#CCCCCC"> it's CPU caches</font><font color="#E5E5E5"> this may be one or</font>

356
00:17:04,309 --> 00:17:08,359
two megabytes<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can use that as my</font>

357
00:17:06,230 --> 00:17:10,760
memory<font color="#CCCCCC"> it's great yeah it's easy to</font>

358
00:17:08,359 --> 00:17:12,649
initialize and then you have at least

359
00:17:10,760 --> 00:17:14,750
<font color="#E5E5E5">you have a few megabytes of memory in</font>

360
00:17:12,650 --> 00:17:16,520
the beginning so you can use a normal

361
00:17:14,750 --> 00:17:18,829
compiler<font color="#CCCCCC"> if you have a stack and the</font>

362
00:17:16,520 --> 00:17:21,289
heap<font color="#CCCCCC"> you can use the</font><font color="#E5E5E5"> GCC or</font><font color="#CCCCCC"> a key or</font>

363
00:17:18,829 --> 00:17:24,049
<font color="#E5E5E5">ceiling or something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> that but</font>

364
00:17:21,289 --> 00:17:26,629
caches<font color="#E5E5E5"> Ram is is very specific</font><font color="#CCCCCC"> for x86</font>

365
00:17:24,049 --> 00:17:29,360
platforms if you look at this<font color="#E5E5E5"> picture</font>

366
00:17:26,630 --> 00:17:32,090
<font color="#CCCCCC">you have a system on a chip</font><font color="#E5E5E5"> and the CPU</font>

367
00:17:29,360 --> 00:17:34,850
the<font color="#CCCCCC"> processor</font><font color="#E5E5E5"> and there's the the</font><font color="#CCCCCC"> IBB</font>

368
00:17:32,090 --> 00:17:39,020
the initial the<font color="#CCCCCC"> initial code it's in the</font>

369
00:17:34,850 --> 00:17:41,090
in the flesh<font color="#E5E5E5"> and it has to be put into</font>

370
00:17:39,020 --> 00:17:43,580
the SRAM somehow it's copied there into

371
00:17:41,090 --> 00:17:46,189
the SRAM<font color="#E5E5E5"> and then later it is</font><font color="#CCCCCC"> also</font>

372
00:17:43,580 --> 00:17:47,120
copied<font color="#E5E5E5"> into</font><font color="#CCCCCC"> the main memory</font><font color="#E5E5E5"> initially</font>

373
00:17:46,190 --> 00:17:49,279
and

374
00:17:47,120 --> 00:17:53,469
that's how all<font color="#E5E5E5"> this this booting</font>

375
00:17:49,279 --> 00:17:57,710
mechanism works<font color="#CCCCCC"> at the very beginning</font>

376
00:17:53,470 --> 00:18:01,880
<font color="#CCCCCC">the reset is happening the initial code</font>

377
00:17:57,710 --> 00:18:05,240
block is going to be<font color="#E5E5E5"> copied in to some</font>

378
00:18:01,880 --> 00:18:07,940
form of memory<font color="#E5E5E5"> somewhere it has</font><font color="#CCCCCC"> to be at</font>

379
00:18:05,240 --> 00:18:12,919
a<font color="#CCCCCC"> very</font><font color="#E5E5E5"> specific position and this is</font>

380
00:18:07,940 --> 00:18:15,710
<font color="#E5E5E5">very specific</font><font color="#CCCCCC"> to the platform</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> there's</font>

381
00:18:12,919 --> 00:18:18,320
a<font color="#CCCCCC"> platform specific address for the</font><font color="#E5E5E5"> CPU</font>

382
00:18:15,710 --> 00:18:20,899
is jumping in<font color="#E5E5E5"> up on the reset and no</font>

383
00:18:18,320 --> 00:18:26,210
more whatever<font color="#E5E5E5"> what it is the CPU is</font>

384
00:18:20,899 --> 00:18:28,580
<font color="#CCCCCC">going to execute and the CPU is just</font>

385
00:18:26,210 --> 00:18:32,750
jumping<font color="#CCCCCC"> to this address it is just going</font>

386
00:18:28,580 --> 00:18:35,689
<font color="#E5E5E5">to</font><font color="#CCCCCC"> jump to it for x86 this address and</font>

387
00:18:32,750 --> 00:18:38,539
then<font color="#E5E5E5"> the code is</font><font color="#CCCCCC"> executed there this is</font>

388
00:18:35,690 --> 00:18:40,159
just how<font color="#E5E5E5"> the initialization</font><font color="#CCCCCC"> of the</font>

389
00:18:38,539 --> 00:18:44,120
platform is working it's actually quite

390
00:18:40,159 --> 00:18:47,120
<font color="#E5E5E5">easy</font><font color="#CCCCCC"> so the memory is somewhere</font>

391
00:18:44,120 --> 00:18:50,149
available the memory is mapped and the

392
00:18:47,120 --> 00:18:53,029
<font color="#E5E5E5">MMU is just pointing the IP to</font><font color="#CCCCCC"> where it</font>

393
00:18:50,149 --> 00:18:59,689
has to<font color="#E5E5E5"> go so this initial code that I</font>

394
00:18:53,029 --> 00:19:02,080
talked about<font color="#E5E5E5"> so this distribution is a</font>

395
00:18:59,690 --> 00:19:05,360
little bit

396
00:19:02,080 --> 00:19:10,428
following the<font color="#CCCCCC"> Corbitt so there is</font>

397
00:19:05,360 --> 00:19:13,340
<font color="#CCCCCC">initial that is executed by the initial</font>

398
00:19:10,429 --> 00:19:15,289
code vector<font color="#E5E5E5"> it is initially in</font>

399
00:19:13,340 --> 00:19:17,678
<font color="#E5E5E5">programmed in assembly but today</font><font color="#CCCCCC"> in C</font>

400
00:19:15,289 --> 00:19:21,020
but the additional thing that<font color="#CCCCCC"> you do is</font>

401
00:19:17,679 --> 00:19:23,590
to do cache<font color="#E5E5E5"> SRAM or you're using</font>

402
00:19:21,020 --> 00:19:26,658
directly<font color="#E5E5E5"> the SRAM that is available</font><font color="#CCCCCC"> but</font>

403
00:19:23,590 --> 00:19:31,760
<font color="#CCCCCC">it's also doing</font><font color="#E5E5E5"> we also have an SPI</font>

404
00:19:26,659 --> 00:19:35,809
flash<font color="#E5E5E5"> so where the boot data is it is</font>

405
00:19:31,760 --> 00:19:39,740
using<font color="#CCCCCC"> an SPI driver and a system driver</font>

406
00:19:35,809 --> 00:19:42,440
in the<font color="#CCCCCC"> SPI to load</font><font color="#E5E5E5"> more code so this</font>

407
00:19:39,740 --> 00:19:44,929
initial<font color="#E5E5E5"> code it's going</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> reloaded</font>

408
00:19:42,440 --> 00:19:54,169
afterwards after some initial code is

409
00:19:44,929 --> 00:19:56,480
executed in the<font color="#CCCCCC"> from the reset</font><font color="#E5E5E5"> this is</font>

410
00:19:54,169 --> 00:19:59,840
automatically executed<font color="#E5E5E5"> that several</font>

411
00:19:56,480 --> 00:20:03,000
couples<font color="#E5E5E5"> are getting executed afterwards</font>

412
00:19:59,840 --> 00:20:08,250
<font color="#CCCCCC">but specifically but</font><font color="#E5E5E5"> the debugging is</font>

413
00:20:03,000 --> 00:20:17,430
difficult so as a car boat this initial

414
00:20:08,250 --> 00:20:21,420
code is also so<font color="#E5E5E5"> this initial code uses</font>

415
00:20:17,430 --> 00:20:25,470
the<font color="#E5E5E5"> caches RAM or SRAM and then next</font>

416
00:20:21,420 --> 00:20:26,910
stage is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> rom stage</font><font color="#E5E5E5"> so we have caches</font>

417
00:20:25,470 --> 00:20:29,040
<font color="#CCCCCC">r-mo</font><font color="#E5E5E5"> SRAM that's just</font><font color="#CCCCCC"> two or three</font>

418
00:20:26,910 --> 00:20:30,600
megabytes it's not a lot<font color="#E5E5E5"> so but we want</font>

419
00:20:29,040 --> 00:20:35,030
to have<font color="#CCCCCC"> more memory we want to have the</font>

420
00:20:30,600 --> 00:20:39,060
real<font color="#E5E5E5"> memory so we have to</font><font color="#CCCCCC"> Train the</font><font color="#E5E5E5"> RAM</font>

421
00:20:35,030 --> 00:20:41,639
<font color="#CCCCCC">so</font><font color="#E5E5E5"> maybe I could put I could put in</font><font color="#CCCCCC"> ten</font>

422
00:20:39,060 --> 00:20:45,270
<font color="#CCCCCC">ten slides about Ram training but may</font>

423
00:20:41,640 --> 00:20:47,990
basically if the main<font color="#E5E5E5"> memory doesn't</font>

424
00:20:45,270 --> 00:20:52,980
work initially<font color="#E5E5E5"> it has timings and if the</font>

425
00:20:47,990 --> 00:20:56,760
the not all the lines are the<font color="#CCCCCC"> same</font>

426
00:20:52,980 --> 00:20:59,520
length and you have to do some software

427
00:20:56,760 --> 00:21:01,890
for training it<font color="#CCCCCC"> so for timings</font><font color="#E5E5E5"> and there</font>

428
00:20:59,520 --> 00:21:05,190
are some static values from the

429
00:21:01,890 --> 00:21:08,460
manufacturer or<font color="#E5E5E5"> you calculate this in</font>

430
00:21:05,190 --> 00:21:10,290
the firmware<font color="#E5E5E5"> so you have fixed RAM</font>

431
00:21:08,460 --> 00:21:12,630
that's sold it on and you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> remnant</font>

432
00:21:10,290 --> 00:21:16,590
you can remove memory and<font color="#E5E5E5"> maybe there's</font>

433
00:21:12,630 --> 00:21:18,930
<font color="#CCCCCC">additional</font><font color="#E5E5E5"> information in in the memory</font>

434
00:21:16,590 --> 00:21:21,750
modules and these training data that<font color="#E5E5E5"> we</font>

435
00:21:18,930 --> 00:21:25,050
calculate they are usually cached so<font color="#E5E5E5"> in</font>

436
00:21:21,750 --> 00:21:28,560
the firmware in the flesh<font color="#E5E5E5"> you store them</font>

437
00:21:25,050 --> 00:21:30,510
because<font color="#E5E5E5"> this</font><font color="#CCCCCC"> training for so for example</font>

438
00:21:28,560 --> 00:21:32,820
<font color="#CCCCCC">in t'lie Paulo platform</font><font color="#E5E5E5"> that's an</font>

439
00:21:30,510 --> 00:21:34,950
embedded system it takes 10 seconds to

440
00:21:32,820 --> 00:21:37,260
<font color="#CCCCCC">train the main</font><font color="#E5E5E5"> memory and if you do that</font>

441
00:21:34,950 --> 00:21:39,930
with every start then and then the

442
00:21:37,260 --> 00:21:41,760
firmware has to boot<font color="#E5E5E5"> more and they the</font>

443
00:21:39,930 --> 00:21:43,440
initial boot takes 20 seconds<font color="#E5E5E5"> and nobody</font>

444
00:21:41,760 --> 00:21:46,890
wants<font color="#CCCCCC"> that so</font><font color="#E5E5E5"> this data is being cached</font>

445
00:21:43,440 --> 00:21:50,070
and<font color="#CCCCCC"> the next start they are</font><font color="#E5E5E5"> reused and</font>

446
00:21:46,890 --> 00:21:52,350
another important<font color="#E5E5E5"> thing is</font><font color="#CCCCCC"> for example</font>

447
00:21:50,070 --> 00:21:54,720
<font color="#CCCCCC">the this is the page table setup</font><font color="#E5E5E5"> if you</font>

448
00:21:52,350 --> 00:21:57,330
have more more memory than 4 gigabytes

449
00:21:54,720 --> 00:21:59,970
<font color="#E5E5E5">then you need page tables you can look</font>

450
00:21:57,330 --> 00:22:01,740
at the Linux<font color="#E5E5E5"> code for that the memory</font>

451
00:21:59,970 --> 00:22:04,140
management unit has to be<font color="#E5E5E5"> activated but</font>

452
00:22:01,740 --> 00:22:06,900
it doesn't activate<font color="#E5E5E5"> all of it not all</font>

453
00:22:04,140 --> 00:22:09,270
firmware in initializes<font color="#E5E5E5"> there and 32-bit</font>

454
00:22:06,900 --> 00:22:11,430
systems you can't really<font color="#E5E5E5"> use that and in</font>

455
00:22:09,270 --> 00:22:13,030
in<font color="#CCCCCC"> firmware there's always only</font><font color="#E5E5E5"> less</font>

456
00:22:11,430 --> 00:22:14,620
<font color="#CCCCCC">than 4 gigabytes</font><font color="#E5E5E5"> but</font>

457
00:22:13,030 --> 00:22:17,170
<font color="#CCCCCC">what's important is that you need</font><font color="#E5E5E5"> CPU</font>

458
00:22:14,620 --> 00:22:19,840
caching and<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> really an important</font>

459
00:22:17,170 --> 00:22:23,050
<font color="#E5E5E5">part if the the CPU caches have been</font>

460
00:22:19,840 --> 00:22:24,370
used as main memory but now they<font color="#CCCCCC"> had</font>

461
00:22:23,050 --> 00:22:27,190
they have to be used<font color="#E5E5E5"> to communicate</font><font color="#CCCCCC"> with</font>

462
00:22:24,370 --> 00:22:29,610
with the main memories so CPU<font color="#CCCCCC"> caches</font>

463
00:22:27,190 --> 00:22:32,380
<font color="#CCCCCC">communicate with main memory to</font><font color="#E5E5E5"> get it</font>

464
00:22:29,610 --> 00:22:33,520
faster and<font color="#E5E5E5"> otherwise the CPU would have</font>

465
00:22:32,380 --> 00:22:36,240
to access<font color="#E5E5E5"> the main memory directly</font>

466
00:22:33,520 --> 00:22:37,960
<font color="#E5E5E5">that's that's quite slow it's not very</font>

467
00:22:36,240 --> 00:22:40,240
<font color="#E5E5E5">high-performance and that has to be</font>

468
00:22:37,960 --> 00:22:42,520
<font color="#CCCCCC">activated and and another</font><font color="#E5E5E5"> thing is many</font>

469
00:22:40,240 --> 00:22:45,150
of these<font color="#CCCCCC"> firmwares have their own memory</font>

470
00:22:42,520 --> 00:22:49,270
<font color="#CCCCCC">management</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> with with</font>

471
00:22:45,150 --> 00:22:53,860
<font color="#CCCCCC">Korderas</font><font color="#E5E5E5"> there are some features</font><font color="#CCCCCC"> in in</font>

472
00:22:49,270 --> 00:22:56,320
in programming languages<font color="#CCCCCC"> and there's</font>

473
00:22:53,860 --> 00:22:59,379
also an<font color="#E5E5E5"> alligator pool and they allocate</font>

474
00:22:56,320 --> 00:23:01,149
memory and and release it<font color="#CCCCCC"> again and in</font>

475
00:22:59,380 --> 00:23:04,390
this<font color="#CCCCCC"> rom stage everything like that is</font>

476
00:23:01,150 --> 00:23:10,540
initialized and after that we have main

477
00:23:04,390 --> 00:23:12,730
memory<font color="#CCCCCC"> finally and that means now we can</font>

478
00:23:10,540 --> 00:23:15,159
to all<font color="#CCCCCC"> the other funny things that we</font>

479
00:23:12,730 --> 00:23:18,610
need<font color="#E5E5E5"> to do and in this stage it's</font>

480
00:23:15,160 --> 00:23:21,850
usually the case<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> have the PCI</font>

481
00:23:18,610 --> 00:23:24,520
device tree enumeration<font color="#E5E5E5"> so if you have</font>

482
00:23:21,850 --> 00:23:27,250
PCI devices<font color="#E5E5E5"> so everybody has been using</font>

483
00:23:24,520 --> 00:23:29,530
PCI if you have lots<font color="#E5E5E5"> of</font><font color="#CCCCCC"> device then you</font>

484
00:23:27,250 --> 00:23:33,040
<font color="#E5E5E5">have a bus with x86 it's it's a standard</font>

485
00:23:29,530 --> 00:23:35,020
feature<font color="#E5E5E5"> and you have to travel along the</font>

486
00:23:33,040 --> 00:23:36,430
bus<font color="#E5E5E5"> it looks like a tree and</font><font color="#CCCCCC"> there are</font>

487
00:23:35,020 --> 00:23:39,879
<font color="#CCCCCC">devices and you</font><font color="#E5E5E5"> can turn them on and</font><font color="#CCCCCC"> off</font>

488
00:23:36,430 --> 00:23:43,510
and in the bias you can also turn them

489
00:23:39,880 --> 00:23:45,460
on and off and specific devices<font color="#E5E5E5"> you can</font>

490
00:23:43,510 --> 00:23:47,830
activate them or deactivate them and and

491
00:23:45,460 --> 00:23:49,660
that is being done<font color="#E5E5E5"> there so the native</font>

492
00:23:47,830 --> 00:23:52,990
<font color="#E5E5E5">graphics will be initialized and if you</font>

493
00:23:49,660 --> 00:23:54,220
want to see and something<font color="#E5E5E5"> that you want</font>

494
00:23:52,990 --> 00:23:57,160
<font color="#CCCCCC">to see what your firm with us the new</font>

495
00:23:54,220 --> 00:24:00,850
traffic's<font color="#E5E5E5"> and option roms of LAN</font>

496
00:23:57,160 --> 00:24:02,770
adapters or Wi-Fi<font color="#E5E5E5"> or whatever they have</font>

497
00:24:00,850 --> 00:24:04,719
option roms<font color="#CCCCCC"> they have to be</font><font color="#E5E5E5"> loaded then</font>

498
00:24:02,770 --> 00:24:07,120
<font color="#CCCCCC">their</font><font color="#E5E5E5"> multiprocessor initialization has</font>

499
00:24:04,720 --> 00:24:09,130
to be done there<font color="#E5E5E5"> are things</font><font color="#CCCCCC"> that are</font>

500
00:24:07,120 --> 00:24:11,560
being done<font color="#E5E5E5"> in this stage you can't do it</font>

501
00:24:09,130 --> 00:24:15,130
earlier but it's it's it's<font color="#E5E5E5"> not always</font>

502
00:24:11,560 --> 00:24:17,740
<font color="#E5E5E5">the case there's an</font><font color="#CCCCCC"> EI xx table and then</font>

503
00:24:15,130 --> 00:24:19,810
there<font color="#CCCCCC"> will</font><font color="#E5E5E5"> be device drivers a huge</font>

504
00:24:17,740 --> 00:24:22,120
number<font color="#CCCCCC"> of device drivers all the things</font>

505
00:24:19,810 --> 00:24:23,679
<font color="#E5E5E5">that Linux initializes as devices that's</font>

506
00:24:22,120 --> 00:24:26,560
quite important and then there are

507
00:24:23,680 --> 00:24:29,350
firmware interface is well yeah

508
00:24:26,560 --> 00:24:31,149
in<font color="#CCCCCC"> general</font><font color="#E5E5E5"> you have to</font><font color="#CCCCCC"> say that</font><font color="#E5E5E5"> that the</font>

509
00:24:29,350 --> 00:24:33,990
<font color="#CCCCCC">last part</font><font color="#E5E5E5"> of the firmware is the</font>

510
00:24:31,150 --> 00:24:38,170
bootloader and the bootloader<font color="#E5E5E5"> is really</font>

511
00:24:33,990 --> 00:24:40,390
it's<font color="#E5E5E5"> an own implementation and uses the</font>

512
00:24:38,170 --> 00:24:42,520
device drivers that<font color="#CCCCCC"> are there and uses</font>

513
00:24:40,390 --> 00:24:44,260
and tries to<font color="#E5E5E5"> load another bootloader or</font>

514
00:24:42,520 --> 00:24:46,450
the operating<font color="#E5E5E5"> system safe so the</font>

515
00:24:44,260 --> 00:24:48,879
firmware<font color="#CCCCCC"> already has a bootloader and</font>

516
00:24:46,450 --> 00:24:50,800
before that<font color="#E5E5E5"> is a bootloader</font><font color="#CCCCCC"> and the</font>

517
00:24:48,880 --> 00:24:53,050
operating system is<font color="#E5E5E5"> one so its duplicate</font>

518
00:24:50,800 --> 00:24:55,780
<font color="#E5E5E5">code but well that's really</font><font color="#CCCCCC"> the case</font>

519
00:24:53,050 --> 00:24:57,129
<font color="#E5E5E5">there so boot loader already uses main</font>

520
00:24:55,780 --> 00:25:00,070
memory<font color="#E5E5E5"> because we already have that</font>

521
00:24:57,130 --> 00:25:05,110
<font color="#E5E5E5">right so overall the</font><font color="#CCCCCC"> firmware has as</font>

522
00:25:00,070 --> 00:25:08,230
three parts<font color="#CCCCCC"> pre ram driver layer and so</font>

523
00:25:05,110 --> 00:25:10,600
pre<font color="#E5E5E5"> roms IBB on ROM driver layer</font><font color="#CCCCCC"> is the</font>

524
00:25:08,230 --> 00:25:13,540
REM<font color="#CCCCCC"> stage and</font><font color="#E5E5E5"> that's huge</font>

525
00:25:10,600 --> 00:25:15,419
drivers<font color="#E5E5E5"> device drivers I huge in</font>

526
00:25:13,540 --> 00:25:18,340
firmware and the<font color="#E5E5E5"> bootloader</font>

527
00:25:15,420 --> 00:25:20,160
the pre<font color="#CCCCCC"> Ram is usually small</font><font color="#E5E5E5"> because</font>

528
00:25:18,340 --> 00:25:24,909
there's little memory available<font color="#CCCCCC"> and</font>

529
00:25:20,160 --> 00:25:27,190
let's talk about open source<font color="#E5E5E5"> firmware so</font>

530
00:25:24,910 --> 00:25:30,310
there are really three people who have

531
00:25:27,190 --> 00:25:32,230
<font color="#E5E5E5">invented or</font><font color="#CCCCCC"> founded open</font><font color="#E5E5E5"> source firmware</font>

532
00:25:30,310 --> 00:25:34,750
<font color="#E5E5E5">that's different I know</font><font color="#CCCCCC"> a Vulcan tank</font>

533
00:25:32,230 --> 00:25:37,180
and<font color="#CCCCCC"> rollin Millie on and</font><font color="#E5E5E5"> mini</font><font color="#CCCCCC"> in</font>

534
00:25:34,750 --> 00:25:38,950
<font color="#CCCCCC">Stepford</font><font color="#E5E5E5"> I know I have worked on Linux</font>

535
00:25:37,180 --> 00:25:42,820
by its and it's called<font color="#CCCCCC"> coreboot these</font>

536
00:25:38,950 --> 00:25:46,360
days yes started in<font color="#E5E5E5"> 1999 so</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> 20th</font>

537
00:25:42,820 --> 00:25:49,629
<font color="#E5E5E5">anniversary next year it was mostly x86</font>

538
00:25:46,360 --> 00:25:53,620
architecture and today we support huge

539
00:25:49,630 --> 00:25:56,830
<font color="#CCCCCC">few more and you boot used to be called</font>

540
00:25:53,620 --> 00:25:59,830
<font color="#E5E5E5">PPC boot and was supporting PowerPC that</font>

541
00:25:56,830 --> 00:26:02,290
was<font color="#CCCCCC"> Falcon tank and</font><font color="#E5E5E5"> renamed it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> you</font>

542
00:25:59,830 --> 00:26:05,710
<font color="#E5E5E5">board for universal bootloader and start</font>

543
00:26:02,290 --> 00:26:07,810
at the same time as<font color="#E5E5E5"> core boots as 1999</font>

544
00:26:05,710 --> 00:26:09,760
and now there<font color="#E5E5E5"> are these two project and</font>

545
00:26:07,810 --> 00:26:11,800
that those were the beginnings of the

546
00:26:09,760 --> 00:26:13,690
open<font color="#E5E5E5"> source firmware development and if</font>

547
00:26:11,800 --> 00:26:15,250
you look at<font color="#E5E5E5"> this timeline in the</font>

548
00:26:13,690 --> 00:26:17,680
beginning there was<font color="#E5E5E5"> the first bias this</font>

549
00:26:15,250 --> 00:26:20,590
was that was<font color="#E5E5E5"> 1981 there</font><font color="#CCCCCC"> was a long time</font>

550
00:26:17,680 --> 00:26:22,450
<font color="#E5E5E5">ago then there were lots of closed</font>

551
00:26:20,590 --> 00:26:24,490
source<font color="#CCCCCC"> firmwares I didn't list all of</font>

552
00:26:22,450 --> 00:26:29,500
them there<font color="#E5E5E5"> are too many of those and</font>

553
00:26:24,490 --> 00:26:31,750
around 1998<font color="#E5E5E5"> Apple received Intel from</font>

554
00:26:29,500 --> 00:26:34,330
<font color="#E5E5E5">EFI that's not the UEFI that you have</font>

555
00:26:31,750 --> 00:26:38,230
today<font color="#CCCCCC"> but there was a pre version as a</font>

556
00:26:34,330 --> 00:26:41,080
fork so they could make the<font color="#E5E5E5"> FI stuff in</font>

557
00:26:38,230 --> 00:26:43,059
in 1999<font color="#E5E5E5"> there was core board</font><font color="#CCCCCC"> a new board</font>

558
00:26:41,080 --> 00:26:47,110
<font color="#E5E5E5">there was the open</font><font color="#CCCCCC"> source ephemeral</font>

559
00:26:43,059 --> 00:26:49,809
community and they<font color="#E5E5E5"> have been annoyed by</font>

560
00:26:47,110 --> 00:26:54,010
open saw my closest firmware and 2006 by

561
00:26:49,809 --> 00:26:56,410
Intel made UEFI<font color="#E5E5E5"> open source later and</font>

562
00:26:54,010 --> 00:26:59,950
some part<font color="#CCCCCC"> of</font><font color="#E5E5E5"> implementations have been</font>

563
00:26:56,410 --> 00:27:02,850
open sourced by Intel in 2008<font color="#E5E5E5"> and after</font>

564
00:26:59,950 --> 00:27:05,380
<font color="#CCCCCC">that there was 2014 hosted by IBM</font><font color="#E5E5E5"> for</font>

565
00:27:02,850 --> 00:27:10,240
<font color="#CCCCCC">power pcs and we'll look at that later</font>

566
00:27:05,380 --> 00:27:13,630
<font color="#E5E5E5">and today 2018 there was Linux boot and</font>

567
00:27:10,240 --> 00:27:15,100
if you look at that<font color="#E5E5E5"> there are more and</font>

568
00:27:13,630 --> 00:27:17,020
<font color="#CCCCCC">more open source</font><font color="#E5E5E5"> firmware</font><font color="#CCCCCC"> they are more</font>

569
00:27:15,100 --> 00:27:18,520
than<font color="#E5E5E5"> I have listed</font><font color="#CCCCCC"> here but why do we</font>

570
00:27:17,020 --> 00:27:20,830
want open source firmware<font color="#CCCCCC"> there are a</font>

571
00:27:18,520 --> 00:27:23,650
few reasons one is that<font color="#CCCCCC"> there are many</font>

572
00:27:20,830 --> 00:27:26,949
small companies<font color="#E5E5E5"> such as in the open</font>

573
00:27:23,650 --> 00:27:29,740
<font color="#E5E5E5">hardware Association they open source</font>

574
00:27:26,950 --> 00:27:31,570
hardware<font color="#E5E5E5"> Association their work on open</font>

575
00:27:29,740 --> 00:27:33,400
hardware<font color="#E5E5E5"> and of course they need open</font>

576
00:27:31,570 --> 00:27:37,330
<font color="#E5E5E5">source firmware it wouldn't make in a</font>

577
00:27:33,400 --> 00:27:41,290
lot of<font color="#E5E5E5"> sense otherwise and also many</font>

578
00:27:37,330 --> 00:27:42,850
closed source companies<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

579
00:27:41,290 --> 00:27:48,159
<font color="#E5E5E5">open saw closed source firmware is</font>

580
00:27:42,850 --> 00:27:51,850
programmed<font color="#E5E5E5"> badly and and managers to</font>

581
00:27:48,160 --> 00:27:53,530
<font color="#E5E5E5">reviews and they shove paths</font><font color="#CCCCCC"> back and</font>

582
00:27:51,850 --> 00:27:56,320
forth as zip files<font color="#E5E5E5"> and that's really a</font>

583
00:27:53,530 --> 00:27:57,668
<font color="#E5E5E5">bad standard concerning software</font>

584
00:27:56,320 --> 00:27:59,530
development there<font color="#E5E5E5"> are no quality</font>

585
00:27:57,669 --> 00:28:02,620
assurance<font color="#E5E5E5"> and no tests and everything</font>

586
00:27:59,530 --> 00:28:04,540
<font color="#E5E5E5">for example if if big companies want</font><font color="#CCCCCC"> to</font>

587
00:28:02,620 --> 00:28:06,370
have flexible solutions<font color="#E5E5E5"> especially if</font>

588
00:28:04,540 --> 00:28:08,980
you if you have a<font color="#E5E5E5"> fragmented firmware</font>

589
00:28:06,370 --> 00:28:11,080
landscape for example if<font color="#CCCCCC"> Facebook has a</font>

590
00:28:08,980 --> 00:28:12,640
million service they are<font color="#CCCCCC"> already</font><font color="#E5E5E5"> but all</font>

591
00:28:11,080 --> 00:28:14,230
by<font color="#CCCCCC"> different manufacturers they all</font><font color="#E5E5E5"> have</font>

592
00:28:12,640 --> 00:28:15,700
different<font color="#CCCCCC"> firmware they all have</font>

593
00:28:14,230 --> 00:28:18,520
different update mechanisms they all

594
00:28:15,700 --> 00:28:22,000
have different bugs<font color="#E5E5E5"> and nobody wants</font>

595
00:28:18,520 --> 00:28:25,120
that<font color="#E5E5E5"> so different</font><font color="#CCCCCC"> interface</font><font color="#E5E5E5"> is how the</font>

596
00:28:22,000 --> 00:28:27,309
boot is progressing and software

597
00:28:25,120 --> 00:28:31,449
debugging is is<font color="#E5E5E5"> hell really to debug</font>

598
00:28:27,309 --> 00:28:33,399
firmware<font color="#E5E5E5"> it's not really easy and and</font>

599
00:28:31,450 --> 00:28:35,799
<font color="#E5E5E5">also there</font><font color="#CCCCCC"> you can share features</font>

600
00:28:33,400 --> 00:28:37,540
<font color="#CCCCCC">between companies and if I implement</font>

601
00:28:35,799 --> 00:28:40,418
something<font color="#E5E5E5"> in our company then for</font>

602
00:28:37,540 --> 00:28:43,149
<font color="#E5E5E5">example</font><font color="#CCCCCC"> Google</font><font color="#E5E5E5"> can use that there's open</font>

603
00:28:40,419 --> 00:28:45,309
continuous integration<font color="#CCCCCC"> there's open</font>

604
00:28:43,150 --> 00:28:48,600
Quality Assurance<font color="#E5E5E5"> open code reviews it's</font>

605
00:28:45,309 --> 00:28:53,370
not perfect but it helps a lot

606
00:28:48,600 --> 00:28:55,260
and there's also you can you can you<font color="#CCCCCC"> can</font>

607
00:28:53,370 --> 00:28:57,330
employ<font color="#E5E5E5"> lots of open-source developers in</font>

608
00:28:55,260 --> 00:28:59,370
your company which is a good<font color="#E5E5E5"> thing and</font>

609
00:28:57,330 --> 00:29:03,240
<font color="#E5E5E5">in the end there's by the free software</font>

610
00:28:59,370 --> 00:29:05,489
<font color="#E5E5E5">licenses such as GPL there's a companies</font>

611
00:29:03,240 --> 00:29:08,790
can<font color="#CCCCCC"> really be pushed to to</font><font color="#E5E5E5"> releasing the</font>

612
00:29:05,490 --> 00:29:10,920
sauce to their firmware<font color="#CCCCCC"> and so let's</font>

613
00:29:08,790 --> 00:29:12,360
<font color="#CCCCCC">talk</font><font color="#E5E5E5"> about security security</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> huge</font>

614
00:29:10,920 --> 00:29:15,450
problem<font color="#CCCCCC"> because most of the security</font>

615
00:29:12,360 --> 00:29:17,189
<font color="#E5E5E5">features should be audible auditable you</font>

616
00:29:15,450 --> 00:29:18,630
should be able<font color="#E5E5E5"> to look at that there</font>

617
00:29:17,190 --> 00:29:21,420
should<font color="#E5E5E5"> be documentation usually there</font>

618
00:29:18,630 --> 00:29:23,610
isn't any<font color="#CCCCCC"> four security</font><font color="#E5E5E5"> features the</font>

619
00:29:21,420 --> 00:29:28,260
reverse<font color="#E5E5E5"> engineering</font><font color="#CCCCCC"> of the firmware</font>

620
00:29:23,610 --> 00:29:33,030
<font color="#E5E5E5">isn't really what you want to do and</font>

621
00:29:28,260 --> 00:29:37,200
there is with<font color="#E5E5E5"> the measured boot</font>

622
00:29:33,030 --> 00:29:39,210
functionality<font color="#CCCCCC"> if you look at you you</font>

623
00:29:37,200 --> 00:29:42,120
create some some hashes but you don't

624
00:29:39,210 --> 00:29:43,950
really<font color="#E5E5E5"> know what you are hashing</font><font color="#CCCCCC"> there's</font>

625
00:29:42,120 --> 00:29:46,080
a kernel output what what kinds of

626
00:29:43,950 --> 00:29:47,880
hashes there are and it<font color="#CCCCCC"> doesn't really</font>

627
00:29:46,080 --> 00:29:49,889
tell<font color="#CCCCCC"> me anything</font><font color="#E5E5E5"> about the firmware you</font>

628
00:29:47,880 --> 00:29:52,350
can get some information<font color="#CCCCCC"> about that but</font>

629
00:29:49,890 --> 00:29:54,000
it's<font color="#CCCCCC"> very</font><font color="#E5E5E5"> hard to</font><font color="#CCCCCC"> see what what has been</font>

630
00:29:52,350 --> 00:29:57,629
measured there especially<font color="#CCCCCC"> if there are</font>

631
00:29:54,000 --> 00:30:00,180
lots of blobs<font color="#E5E5E5"> fixing security issues is</font>

632
00:29:57,630 --> 00:30:02,460
it's very hard<font color="#E5E5E5"> with closed clusters</font>

633
00:30:00,180 --> 00:30:05,430
firmware and it's never done it's<font color="#E5E5E5"> not</font>

634
00:30:02,460 --> 00:30:08,040
always<font color="#CCCCCC"> done right there Tramell</font><font color="#E5E5E5"> Hudson</font>

635
00:30:05,430 --> 00:30:09,630
talks<font color="#E5E5E5"> about really some issues there</font><font color="#CCCCCC"> but</font>

636
00:30:08,040 --> 00:30:13,020
you can you<font color="#CCCCCC"> should</font><font color="#E5E5E5"> really look at that</font>

637
00:30:09,630 --> 00:30:15,120
<font color="#CCCCCC">and we have really been</font><font color="#E5E5E5"> fighting against</font>

638
00:30:13,020 --> 00:30:17,970
blobs I didn't really want to say the

639
00:30:15,120 --> 00:30:19,649
word<font color="#CCCCCC"> but these are binary</font><font color="#E5E5E5"> large objects</font>

640
00:30:17,970 --> 00:30:21,990
they<font color="#CCCCCC"> have all you've all heard about it</font>

641
00:30:19,650 --> 00:30:24,450
<font color="#E5E5E5">it's code including intellectual</font>

642
00:30:21,990 --> 00:30:27,090
property which includes<font color="#CCCCCC"> some knowledge</font>

643
00:30:24,450 --> 00:30:28,710
about by the company which they think

644
00:30:27,090 --> 00:30:30,990
they need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> protect it's just being</font>

645
00:30:28,710 --> 00:30:32,400
compiled and it's an executable<font color="#CCCCCC"> and from</font>

646
00:30:30,990 --> 00:30:34,770
the<font color="#CCCCCC"> opt source firmware this has to be</font>

647
00:30:32,400 --> 00:30:38,970
executed<font color="#CCCCCC"> for example there's an API for</font>

648
00:30:34,770 --> 00:30:42,750
that and the<font color="#CCCCCC"> whole</font><font color="#E5E5E5"> thing is really only</font>

649
00:30:38,970 --> 00:30:46,170
for<font color="#E5E5E5"> modern platforms except risk 5 and</font>

650
00:30:42,750 --> 00:30:48,470
open power there<font color="#E5E5E5"> are no there's no open</font>

651
00:30:46,170 --> 00:30:50,850
source firmware that<font color="#E5E5E5"> doesn't have blobs</font>

652
00:30:48,470 --> 00:30:53,760
so all the manufacturers<font color="#E5E5E5"> have his IP</font>

653
00:30:50,850 --> 00:30:56,340
code<font color="#CCCCCC"> and put it in and that's a huge</font>

654
00:30:53,760 --> 00:30:58,710
<font color="#E5E5E5">problem most of the manufacturers don't</font>

655
00:30:56,340 --> 00:31:00,780
really know why<font color="#CCCCCC"> they do it it's just</font>

656
00:30:58,710 --> 00:31:02,650
they've always been<font color="#E5E5E5"> doing it like</font><font color="#CCCCCC"> that</font>

657
00:31:00,780 --> 00:31:06,600
and in this<font color="#E5E5E5"> picture you</font><font color="#CCCCCC"> can see</font><font color="#E5E5E5"> there</font>

658
00:31:02,650 --> 00:31:09,070
<font color="#CCCCCC">FSP</font><font color="#E5E5E5"> M&F</font><font color="#CCCCCC"> SPS</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> corwood</font><font color="#E5E5E5"> those are blobs</font>

659
00:31:06,600 --> 00:31:11,500
<font color="#E5E5E5">at different points in time they have to</font>

660
00:31:09,070 --> 00:31:14,409
be loaded<font color="#E5E5E5"> by by the firmware and there's</font>

661
00:31:11,500 --> 00:31:16,330
there's more than that and all these

662
00:31:14,410 --> 00:31:18,700
blobs are loaded in the program

663
00:31:16,330 --> 00:31:23,169
environment<font color="#E5E5E5"> and most of these will</font><font color="#CCCCCC"> be</font>

664
00:31:18,700 --> 00:31:25,360
loaded<font color="#E5E5E5"> in the previous</font><font color="#CCCCCC"> usually under NDA</font>

665
00:31:23,170 --> 00:31:26,500
there's<font color="#E5E5E5"> it's from different</font><font color="#CCCCCC"> companies</font>

666
00:31:25,360 --> 00:31:30,189
and they don't<font color="#CCCCCC"> even make it themselves</font>

667
00:31:26,500 --> 00:31:32,130
<font color="#CCCCCC">they have secret bits that inside that</font>

668
00:31:30,190 --> 00:31:35,980
and<font color="#E5E5E5"> they have to don't don't need to</font>

669
00:31:32,130 --> 00:31:37,570
<font color="#E5E5E5">disclose those and sometimes you can</font>

670
00:31:35,980 --> 00:31:40,750
break the hardware if you do something

671
00:31:37,570 --> 00:31:43,210
<font color="#CCCCCC">wrong and</font><font color="#E5E5E5"> every documentation by Intel</font>

672
00:31:40,750 --> 00:31:45,220
is is by<font color="#E5E5E5"> default is it is confidential</font>

673
00:31:43,210 --> 00:31:47,080
there's no real open documentation

674
00:31:45,220 --> 00:31:49,270
there's some of it but<font color="#E5E5E5"> if Intel makes</font>

675
00:31:47,080 --> 00:31:51,939
<font color="#E5E5E5">hardware documentation that's all that's</font>

676
00:31:49,270 --> 00:31:54,070
<font color="#E5E5E5">always protected under</font><font color="#CCCCCC"> 9da there's some</font>

677
00:31:51,940 --> 00:31:56,170
advantages<font color="#E5E5E5"> to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> but they have a</font><font color="#CCCCCC"> very</font>

678
00:31:54,070 --> 00:31:58,990
restrictive management<font color="#CCCCCC"> and they have</font>

679
00:31:56,170 --> 00:32:01,060
legal departments they are not really<font color="#E5E5E5"> at</font>

680
00:31:58,990 --> 00:32:03,280
the height of<font color="#E5E5E5"> the time it's</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> really</font>

681
00:32:01,060 --> 00:32:05,050
evil<font color="#E5E5E5"> but that's just how it</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> and we</font>

682
00:32:03,280 --> 00:32:09,030
<font color="#E5E5E5">have been fighting like that for for</font>

683
00:32:05,050 --> 00:32:09,030
<font color="#E5E5E5">about 20</font><font color="#CCCCCC"> years or something like that</font>

684
00:32:09,450 --> 00:32:14,290
for 20<font color="#E5E5E5"> years we have</font><font color="#CCCCCC"> been fighting</font>

685
00:32:11,800 --> 00:32:16,419
<font color="#CCCCCC">against this lockdown of</font><font color="#E5E5E5"> November but</font>

686
00:32:14,290 --> 00:32:18,340
there are many problems coming<font color="#E5E5E5"> with the</font>

687
00:32:16,420 --> 00:32:19,900
<font color="#CCCCCC">blopps</font><font color="#E5E5E5"> if you're using them</font><font color="#CCCCCC"> it's coat</font>

688
00:32:18,340 --> 00:32:22,179
application and you have<font color="#CCCCCC"> the</font>

689
00:32:19,900 --> 00:32:24,580
fragmentation<font color="#CCCCCC"> implantation</font><font color="#E5E5E5"> coreboot and</font>

690
00:32:22,180 --> 00:32:27,520
then in the<font color="#E5E5E5"> blob you cannot fix it there</font>

691
00:32:24,580 --> 00:32:29,560
is no debugging everything is not

692
00:32:27,520 --> 00:32:37,840
available<font color="#E5E5E5"> documentation is under in the</font>

693
00:32:29,560 --> 00:32:40,060
a lot of interfaces for instance the

694
00:32:37,840 --> 00:32:42,129
blob is sometimes done and then you<font color="#CCCCCC"> can</font>

695
00:32:40,060 --> 00:32:45,040
continue but you have no<font color="#E5E5E5"> idea what is</font>

696
00:32:42,130 --> 00:32:46,660
<font color="#CCCCCC">happening in there but with a free</font>

697
00:32:45,040 --> 00:32:48,850
software license there is a problem<font color="#E5E5E5"> in</font>

698
00:32:46,660 --> 00:32:50,590
<font color="#E5E5E5">using this one so then you have to send</font>

699
00:32:48,850 --> 00:32:54,189
this to<font color="#CCCCCC"> legal and whether you can use</font>

700
00:32:50,590 --> 00:32:56,199
this and so it's not so very<font color="#E5E5E5"> nice to use</font>

701
00:32:54,190 --> 00:32:58,600
these blobs<font color="#E5E5E5"> and the support of the</font>

702
00:32:56,200 --> 00:33:01,300
vendors for these blow-ups<font color="#CCCCCC"> is very often</font>

703
00:32:58,600 --> 00:33:03,899
<font color="#E5E5E5">not existing</font><font color="#CCCCCC"> so you ask them and you</font>

704
00:33:01,300 --> 00:33:06,399
might get an<font color="#CCCCCC"> answer within</font><font color="#E5E5E5"> three months</font>

705
00:33:03,900 --> 00:33:08,620
many of the blobs have to be reworked

706
00:33:06,400 --> 00:33:10,270
<font color="#E5E5E5">and so code wrappers have to be</font>

707
00:33:08,620 --> 00:33:13,500
<font color="#E5E5E5">implemented</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is not actually</font>

708
00:33:10,270 --> 00:33:16,799
<font color="#E5E5E5">what you want to do with source firmware</font>

709
00:33:13,500 --> 00:33:19,620
so if you have a look what is<font color="#CCCCCC"> going to</font>

710
00:33:16,799 --> 00:33:22,379
be required for<font color="#CCCCCC"> blopps</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> Intel</font>

711
00:33:19,620 --> 00:33:25,080
<font color="#CCCCCC">Architecture</font><font color="#E5E5E5"> you see on the right so</font>

712
00:33:22,380 --> 00:33:28,980
there is a diagram<font color="#CCCCCC"> of what's</font><font color="#E5E5E5"> needed you</font>

713
00:33:25,080 --> 00:33:32,039
have<font color="#CCCCCC"> Michael</font><font color="#E5E5E5"> Cove up take FS</font><font color="#CCCCCC"> PM memory</font>

714
00:33:28,980 --> 00:33:34,559
in it<font color="#CCCCCC"> FS PF that's</font><font color="#E5E5E5"> the part of the REM</font>

715
00:33:32,039 --> 00:33:39,150
<font color="#CCCCCC">stage part so the inter management</font>

716
00:33:34,559 --> 00:33:42,000
engine<font color="#CCCCCC"> audio</font><font color="#E5E5E5"> blah so you are loading</font>

717
00:33:39,150 --> 00:33:43,530
<font color="#CCCCCC">basically a plethora of different flops</font>

718
00:33:42,000 --> 00:33:45,780
and this is not actually<font color="#E5E5E5"> what you want</font>

719
00:33:43,530 --> 00:33:46,530
<font color="#E5E5E5">to do this makes everything very</font>

720
00:33:45,780 --> 00:33:49,200
difficult

721
00:33:46,530 --> 00:33:51,389
so let's come to the more<font color="#E5E5E5"> interesting</font>

722
00:33:49,200 --> 00:33:53,820
and good things so there are many open

723
00:33:51,390 --> 00:33:55,650
source<font color="#CCCCCC"> projects in for example</font><font color="#E5E5E5"> Cobb</font><font color="#CCCCCC"> wood</font>

724
00:33:53,820 --> 00:33:59,100
I mentioned them several times<font color="#CCCCCC"> because</font>

725
00:33:55,650 --> 00:34:02,429
I'm working<font color="#E5E5E5"> there so it is for a lot of</font>

726
00:33:59,100 --> 00:34:04,770
<font color="#E5E5E5">different architectures whatever so</font>

727
00:34:02,429 --> 00:34:08,639
there is not<font color="#CCCCCC"> a good documentation</font><font color="#E5E5E5"> but we</font>

728
00:34:04,770 --> 00:34:10,050
are<font color="#E5E5E5"> a very big community and you have in</font>

729
00:34:08,639 --> 00:34:14,940
the<font color="#CCCCCC"> I received channel very often about</font>

730
00:34:10,050 --> 00:34:17,369
<font color="#E5E5E5">300 people 200 developers so we have a</font>

731
00:34:14,940 --> 00:34:21,359
public in continuous integration we have

732
00:34:17,369 --> 00:34:22,010
<font color="#E5E5E5">code reviews and soon some real quality</font>

733
00:34:21,359 --> 00:34:28,710
assurance

734
00:34:22,010 --> 00:34:30,270
so once<font color="#CCCCCC"> code is generated</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> will be</font>

735
00:34:28,710 --> 00:34:33,060
pushed<font color="#E5E5E5"> to the hardware and</font><font color="#CCCCCC"> test it</font>

736
00:34:30,270 --> 00:34:35,940
<font color="#CCCCCC">corbett is</font><font color="#E5E5E5"> actually not a</font><font color="#CCCCCC"> bootloader but</font>

737
00:34:33,060 --> 00:34:38,759
<font color="#E5E5E5">it's can actually load a bootloader it</font>

738
00:34:35,940 --> 00:34:42,918
can<font color="#E5E5E5"> actually load other boot loaders so</font>

739
00:34:38,760 --> 00:34:45,419
actually it is there to deploy a second

740
00:34:42,918 --> 00:34:48,118
secondary<font color="#E5E5E5"> bootloader you boot is another</font>

741
00:34:45,418 --> 00:34:51,179
community<font color="#E5E5E5"> project it's quite similar</font><font color="#CCCCCC"> it</font>

742
00:34:48,119 --> 00:34:54,359
is<font color="#E5E5E5"> supporting</font><font color="#CCCCCC"> the similar architectures</font>

743
00:34:51,179 --> 00:34:56,129
as coreboot<font color="#E5E5E5"> the documentation is a</font>

744
00:34:54,359 --> 00:34:58,319
little bit better it has<font color="#E5E5E5"> also very big</font>

745
00:34:56,129 --> 00:35:00,180
<font color="#CCCCCC">community also</font><font color="#E5E5E5"> has</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> public CI and</font>

746
00:34:58,320 --> 00:35:04,040
review they have their own<font color="#CCCCCC"> bootloader</font>

747
00:35:00,180 --> 00:35:07,230
implementation and they can also support

748
00:35:04,040 --> 00:35:11,940
efi runtime so the enhanced fender

749
00:35:07,230 --> 00:35:14,070
interface<font color="#E5E5E5"> reload implementation so this</font>

750
00:35:11,940 --> 00:35:16,230
can<font color="#CCCCCC"> be actually</font><font color="#E5E5E5"> used to mirror the</font><font color="#CCCCCC"> UFE</font>

751
00:35:14,070 --> 00:35:19,109
implementations<font color="#E5E5E5"> so it can actually</font>

752
00:35:16,230 --> 00:35:23,490
mirror the complete<font color="#CCCCCC"> implementation for</font>

753
00:35:19,109 --> 00:35:27,270
<font color="#CCCCCC">Windows to access the Tobias County core</font>

754
00:35:23,490 --> 00:35:31,709
is yet another one

755
00:35:27,270 --> 00:35:35,800
<font color="#E5E5E5">that is helping their arm is they're</font>

756
00:35:31,710 --> 00:35:39,910
<font color="#E5E5E5">very active now so they went there and</font>

757
00:35:35,800 --> 00:35:42,280
<font color="#CCCCCC">said yes we want</font><font color="#E5E5E5"> to do this for arm 64</font>

758
00:35:39,910 --> 00:35:43,330
<font color="#E5E5E5">but we are a very small</font><font color="#CCCCCC"> community but we</font>

759
00:35:42,280 --> 00:35:47,590
are<font color="#CCCCCC"> very conservative</font>

760
00:35:43,330 --> 00:35:51,400
we have no<font color="#E5E5E5"> Qi QA no public CI but for</font>

761
00:35:47,590 --> 00:35:53,110
some month there Stefano satola<font color="#E5E5E5"> and he</font>

762
00:35:51,400 --> 00:35:54,520
is doing<font color="#CCCCCC"> the</font><font color="#E5E5E5"> community management so</font>

763
00:35:53,110 --> 00:36:04,000
they are going to<font color="#E5E5E5"> improving in</font><font color="#CCCCCC"> their</font>

764
00:35:54,520 --> 00:36:06,250
<font color="#E5E5E5">improving so they have so also Microsoft</font>

765
00:36:04,000 --> 00:36:08,170
bought into this and they are going to

766
00:36:06,250 --> 00:36:11,830
<font color="#CCCCCC">use this they are going to</font><font color="#E5E5E5"> they're</font>

767
00:36:08,170 --> 00:36:14,710
calling it proactively<font color="#E5E5E5"> then there's also</font>

768
00:36:11,830 --> 00:36:19,420
<font color="#E5E5E5">host boot by IBM that's for open power</font>

769
00:36:14,710 --> 00:36:21,220
systems<font color="#E5E5E5"> it's the really most open</font>

770
00:36:19,420 --> 00:36:23,050
architecture<font color="#CCCCCC"> vacuum</font><font color="#E5E5E5"> find from the</font>

771
00:36:21,220 --> 00:36:26,200
firmware<font color="#E5E5E5"> point of view there are no</font>

772
00:36:23,050 --> 00:36:29,530
<font color="#E5E5E5">blobs</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> almost no blobs and</font><font color="#CCCCCC"> it's really</font>

773
00:36:26,200 --> 00:36:31,270
<font color="#E5E5E5">only PowerPC it's really only supporting</font>

774
00:36:29,530 --> 00:36:34,150
PowerPC and<font color="#E5E5E5"> it's exactly for their</font>

775
00:36:31,270 --> 00:36:36,670
<font color="#E5E5E5">hardware but they also have a payload</font>

776
00:36:34,150 --> 00:36:38,830
mechanism such<font color="#CCCCCC"> as like core boot and</font>

777
00:36:36,670 --> 00:36:40,300
they have a good documentation<font color="#E5E5E5"> and IBM</font>

778
00:36:38,830 --> 00:36:42,130
makes lots of documentation<font color="#E5E5E5"> you know</font>

779
00:36:40,300 --> 00:36:47,650
about that<font color="#CCCCCC"> they've been known for</font><font color="#E5E5E5"> that</font>

780
00:36:42,130 --> 00:36:53,050
<font color="#CCCCCC">and there's no public CIL QA and you can</font>

781
00:36:47,650 --> 00:36:57,400
<font color="#E5E5E5">look at</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> at github</font><font color="#CCCCCC"> open power and then</font>

782
00:36:53,050 --> 00:37:00,040
there's trusted firmware and slim

783
00:36:57,400 --> 00:37:01,780
bootloader<font color="#E5E5E5"> open BMC you BMC sound open</font>

784
00:37:00,040 --> 00:37:03,730
<font color="#E5E5E5">firm a project there are so many others</font>

785
00:37:01,780 --> 00:37:06,100
so many other<font color="#E5E5E5"> firmware so you can take a</font>

786
00:37:03,730 --> 00:37:08,620
look<font color="#CCCCCC"> at all those</font><font color="#E5E5E5"> I listed</font><font color="#CCCCCC"> some of</font><font color="#E5E5E5"> those</font>

787
00:37:06,100 --> 00:37:10,360
and if you<font color="#E5E5E5"> really look for it you'll</font>

788
00:37:08,620 --> 00:37:14,140
find more<font color="#E5E5E5"> and more and</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> and more</font>

789
00:37:10,360 --> 00:37:15,160
<font color="#E5E5E5">people are</font><font color="#CCCCCC"> getting involved about</font>

790
00:37:14,140 --> 00:37:18,549
security<font color="#CCCCCC"> Filmworks</font>

791
00:37:15,160 --> 00:37:21,670
frameworks<font color="#CCCCCC"> there this something</font>

792
00:37:18,550 --> 00:37:24,190
<font color="#E5E5E5">everything is we reused reprogrammed</font>

793
00:37:21,670 --> 00:37:26,710
<font color="#E5E5E5">newly programmed for firmware</font><font color="#CCCCCC"> that</font>

794
00:37:24,190 --> 00:37:30,430
there's no reuse of existing<font color="#E5E5E5"> things</font><font color="#CCCCCC"> and</font>

795
00:37:26,710 --> 00:37:32,380
this UEFI secure boot<font color="#E5E5E5"> most of that is</font>

796
00:37:30,430 --> 00:37:33,970
from<font color="#CCCCCC"> Microsoft Windows there's a good</font>

797
00:37:32,380 --> 00:37:36,700
<font color="#E5E5E5">documentation it has measured boot</font>

798
00:37:33,970 --> 00:37:38,500
support<font color="#E5E5E5"> but it's really only by UEFI</font>

799
00:37:36,700 --> 00:37:40,390
there's no library that you can<font color="#CCCCCC"> use</font>

800
00:37:38,500 --> 00:37:44,980
<font color="#E5E5E5">independently but it has an end user</font>

801
00:37:40,390 --> 00:37:49,299
model so<font color="#E5E5E5"> end-users can really load their</font>

802
00:37:44,980 --> 00:37:51,849
own keys into<font color="#E5E5E5"> the firmware and the it</font>

803
00:37:49,299 --> 00:37:54,460
all depends on<font color="#E5E5E5"> flash protection</font>

804
00:37:51,849 --> 00:37:58,240
<font color="#E5E5E5">mechanisms of the security and you can</font>

805
00:37:54,460 --> 00:38:00,779
tell them you can tell<font color="#E5E5E5"> it to to protect</font>

806
00:37:58,240 --> 00:38:04,299
parts of the flesh<font color="#E5E5E5"> and there's x.509</font>

807
00:38:00,779 --> 00:38:06,640
certificates and there's another

808
00:38:04,299 --> 00:38:09,940
<font color="#E5E5E5">security framework it's called</font><font color="#CCCCCC"> Google</font>

809
00:38:06,640 --> 00:38:13,210
<font color="#E5E5E5">verified boot it is used by</font><font color="#CCCCCC"> a core</font><font color="#E5E5E5"> board</font>

810
00:38:09,940 --> 00:38:15,760
<font color="#E5E5E5">you boot and open BMC but some some of</font>

811
00:38:13,210 --> 00:38:17,260
it is not complete it<font color="#CCCCCC"> has a library</font><font color="#E5E5E5"> but</font>

812
00:38:15,760 --> 00:38:20,079
is there's no better boot support

813
00:38:17,260 --> 00:38:22,980
<font color="#E5E5E5">there's poor documentation</font><font color="#CCCCCC"> and it's</font>

814
00:38:20,079 --> 00:38:25,210
really<font color="#E5E5E5"> adapted to Google and Chrome OS</font>

815
00:38:22,980 --> 00:38:27,460
it's mostly it has been developed<font color="#CCCCCC"> for</font>

816
00:38:25,210 --> 00:38:31,420
Chrome OS and there are multiple slots

817
00:38:27,460 --> 00:38:35,170
in firmware in the flesh<font color="#CCCCCC"> there's</font>

818
00:38:31,420 --> 00:38:40,450
something<font color="#E5E5E5"> like failure system and you</font>

819
00:38:35,170 --> 00:38:42,609
you can this one<font color="#E5E5E5"> read only copy and so</font>

820
00:38:40,450 --> 00:38:45,460
there's this a<font color="#E5E5E5"> B or</font><font color="#CCCCCC"> ABC</font><font color="#E5E5E5"> update scheme</font>

821
00:38:42,609 --> 00:38:47,740
it's it's really<font color="#E5E5E5"> done very</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> and in</font>

822
00:38:45,460 --> 00:38:49,569
the<font color="#E5E5E5"> end it's really just a library which</font>

823
00:38:47,740 --> 00:38:51,220
has protection<font color="#E5E5E5"> mechanisms and the</font>

824
00:38:49,569 --> 00:38:54,910
protection mechanisms are based on the

825
00:38:51,220 --> 00:38:57,368
flesh<font color="#E5E5E5"> so you don't expect you</font><font color="#CCCCCC"> to use</font>

826
00:38:54,910 --> 00:39:00,009
<font color="#E5E5E5">such mechanisms but you will really</font><font color="#CCCCCC"> want</font>

827
00:38:57,369 --> 00:39:02,529
to have the SPI protection directly

828
00:39:00,009 --> 00:39:03,670
there's an SPI no flash protection<font color="#E5E5E5"> so</font>

829
00:39:02,529 --> 00:39:05,680
the chip has its own protection

830
00:39:03,670 --> 00:39:08,650
mechanisms<font color="#E5E5E5"> it's based on cryptographic</font>

831
00:39:05,680 --> 00:39:11,950
keys<font color="#E5E5E5"> so really normal</font><font color="#CCCCCC"> Keys no no</font>

832
00:39:08,650 --> 00:39:14,049
certificates<font color="#E5E5E5"> so well and the last part</font>

833
00:39:11,950 --> 00:39:14,730
now is about<font color="#E5E5E5"> an old idea for a new</font>

834
00:39:14,049 --> 00:39:19,210
approach

835
00:39:14,730 --> 00:39:20,710
so Linux port I didn't<font color="#E5E5E5"> mention that most</font>

836
00:39:19,210 --> 00:39:23,140
<font color="#E5E5E5">of you have</font><font color="#CCCCCC"> probably heard</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> that it</font>

837
00:39:20,710 --> 00:39:26,259
was in the news it's it's very<font color="#CCCCCC"> well</font>

838
00:39:23,140 --> 00:39:29,890
liked and what it's about is that Linux

839
00:39:26,259 --> 00:39:32,289
boot<font color="#E5E5E5"> in this project it was a Google</font>

840
00:39:29,890 --> 00:39:35,170
<font color="#E5E5E5">project it's it's it's under the GPL v2</font>

841
00:39:32,289 --> 00:39:37,480
and BSD licenses<font color="#E5E5E5"> and the idea is that</font>

842
00:39:35,170 --> 00:39:39,910
<font color="#E5E5E5">the parts of the firmware</font><font color="#CCCCCC"> are being</font>

843
00:39:37,480 --> 00:39:42,160
replaced by<font color="#E5E5E5"> the Linux kernel so the</font>

844
00:39:39,910 --> 00:39:44,379
<font color="#CCCCCC">tribe</font><font color="#E5E5E5"> the driver layer that you know you</font>

845
00:39:42,160 --> 00:39:46,149
can replace<font color="#E5E5E5"> that</font><font color="#CCCCCC"> with a unique</font><font color="#E5E5E5"> Linux</font>

846
00:39:44,380 --> 00:39:49,269
kernel<font color="#CCCCCC"> because it already has drivers</font>

847
00:39:46,150 --> 00:39:51,400
<font color="#E5E5E5">the current really is only drivers so so</font>

848
00:39:49,269 --> 00:39:53,439
many so many<font color="#CCCCCC"> drivers as the the Lynx</font>

849
00:39:51,400 --> 00:39:54,280
drivers<font color="#E5E5E5"> know no other kernel has that so</font>

850
00:39:53,440 --> 00:39:56,710
you can

851
00:39:54,280 --> 00:40:00,030
replace the driver layer completely and

852
00:39:56,710 --> 00:40:02,200
you can more easily find developers

853
00:40:00,030 --> 00:40:05,050
<font color="#CCCCCC">Lim's developers are easy to find</font>

854
00:40:02,200 --> 00:40:07,779
<font color="#E5E5E5">firmware developers are far away and if</font>

855
00:40:05,050 --> 00:40:09,910
you and far between<font color="#E5E5E5"> and the very few</font>

856
00:40:07,780 --> 00:40:11,860
code duplication<font color="#CCCCCC"> there are well tested</font>

857
00:40:09,910 --> 00:40:15,520
drivers<font color="#E5E5E5"> which means they have been</font><font color="#CCCCCC"> very</font>

858
00:40:11,860 --> 00:40:18,550
<font color="#E5E5E5">well</font><font color="#CCCCCC"> tested</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> if well tested</font><font color="#E5E5E5"> but</font>

859
00:40:15,520 --> 00:40:21,270
better than<font color="#E5E5E5"> those and firmware and you</font>

860
00:40:18,550 --> 00:40:24,070
can also replace the<font color="#CCCCCC"> boot loader</font><font color="#E5E5E5"> so you</font>

861
00:40:21,270 --> 00:40:27,220
really<font color="#E5E5E5"> don't need the system boot loader</font>

862
00:40:24,070 --> 00:40:29,230
<font color="#E5E5E5">you can use replace the firmware</font><font color="#CCCCCC"> boot</font>

863
00:40:27,220 --> 00:40:31,270
<font color="#CCCCCC">loader</font><font color="#E5E5E5"> so here's what it likes it looks</font>

864
00:40:29,230 --> 00:40:32,800
like you have a pre rim<font color="#CCCCCC"> you just cross</font>

865
00:40:31,270 --> 00:40:34,810
out the driver layer and replace it<font color="#E5E5E5"> by</font>

866
00:40:32,800 --> 00:40:36,430
the<font color="#E5E5E5"> Linux kernel and strike out the boot</font>

867
00:40:34,810 --> 00:40:38,830
<font color="#E5E5E5">loader and replace it by a Linux user</font>

868
00:40:36,430 --> 00:40:41,169
space<font color="#E5E5E5"> so how does that work</font><font color="#CCCCCC"> everybody</font>

869
00:40:38,830 --> 00:40:44,799
knows<font color="#CCCCCC"> the Linux kernel</font><font color="#E5E5E5"> so you know in a</font>

870
00:40:41,170 --> 00:40:47,260
drama<font color="#E5E5E5"> fest that</font><font color="#CCCCCC"> the Linux user space and</font>

871
00:40:44,800 --> 00:40:49,720
Linux kernel<font color="#E5E5E5"> is the Linux</font><font color="#CCCCCC"> kernel and you</font>

872
00:40:47,260 --> 00:40:53,380
take<font color="#E5E5E5"> a complete links kernel you put an</font>

873
00:40:49,720 --> 00:40:57,640
<font color="#E5E5E5">inner drama fest and it'll just run it</font>

874
00:40:53,380 --> 00:40:59,800
sounds easy<font color="#CCCCCC"> is not quite as easy but</font><font color="#E5E5E5"> if</font>

875
00:40:57,640 --> 00:41:01,569
<font color="#E5E5E5">you really look at it at the top there's</font>

876
00:40:59,800 --> 00:41:03,820
a firmware<font color="#CCCCCC"> core what you would join a</font>

877
00:41:01,570 --> 00:41:06,700
<font color="#CCCCCC">core host boot and there's the Linux</font>

878
00:41:03,820 --> 00:41:08,230
kernel<font color="#E5E5E5"> stuff there and it works but</font>

879
00:41:06,700 --> 00:41:10,990
there are some<font color="#E5E5E5"> limitations there</font><font color="#CCCCCC"> are</font>

880
00:41:08,230 --> 00:41:13,860
some<font color="#CCCCCC"> - dues that have to be</font><font color="#E5E5E5"> done one is</font>

881
00:41:10,990 --> 00:41:16,180
<font color="#CCCCCC">the</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> piece psi device enumeration</font>

882
00:41:13,860 --> 00:41:20,650
isn't yet activated<font color="#E5E5E5"> it's there but it's</font>

883
00:41:16,180 --> 00:41:23,290
<font color="#E5E5E5">not not in there they the system</font>

884
00:41:20,650 --> 00:41:27,250
management mode<font color="#E5E5E5"> isn't their native</font>

885
00:41:23,290 --> 00:41:28,660
graphic initialization already works<font color="#E5E5E5"> the</font>

886
00:41:27,250 --> 00:41:31,120
Linux kernel already initializes the

887
00:41:28,660 --> 00:41:33,100
graphics<font color="#E5E5E5"> and works and you can</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> that</font>

888
00:41:31,120 --> 00:41:36,850
in the firmware including<font color="#E5E5E5"> 3d</font>

889
00:41:33,100 --> 00:41:40,180
acceleration<font color="#E5E5E5"> it's it's great the only</font>

890
00:41:36,850 --> 00:41:42,250
problem is really<font color="#CCCCCC"> SPI tables and II 820</font>

891
00:41:40,180 --> 00:41:43,540
tables it's a requirement for the kernel

892
00:41:42,250 --> 00:41:45,430
they are not there you have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> think</font>

893
00:41:43,540 --> 00:41:48,160
about<font color="#CCCCCC"> that we're</font><font color="#E5E5E5"> not quite sure yet</font><font color="#CCCCCC"> and</font>

894
00:41:45,430 --> 00:41:53,319
there's only<font color="#E5E5E5"> one bootlid implementation</font>

895
00:41:48,160 --> 00:41:55,210
and unfortunately so the<font color="#E5E5E5"> interim FS is</font>

896
00:41:53,320 --> 00:41:57,850
about the lymphs kernel we take the

897
00:41:55,210 --> 00:42:01,630
standard<font color="#CCCCCC"> linux kernel in Ramah faces do</font>

898
00:41:57,850 --> 00:42:04,270
<font color="#CCCCCC">root and it's an its uses</font><font color="#E5E5E5"> : in a drama</font>

899
00:42:01,630 --> 00:42:08,109
fest generator it works like busybox can

900
00:42:04,270 --> 00:42:13,440
add binary binaries

901
00:42:08,109 --> 00:42:17,078
and you can use and it supports

902
00:42:13,440 --> 00:42:20,229
<font color="#CCCCCC">multi-boot v1</font><font color="#E5E5E5"> kxx support and you can</font>

903
00:42:17,079 --> 00:42:23,739
use any operating system<font color="#CCCCCC"> bsd</font><font color="#E5E5E5"> Windows</font>

904
00:42:20,229 --> 00:42:27,819
<font color="#E5E5E5">Linux whatever and there's a UEFI</font>

905
00:42:23,739 --> 00:42:31,450
tooling and<font color="#E5E5E5"> and there's a core board</font>

906
00:42:27,819 --> 00:42:32,680
interface support and system<font color="#CCCCCC"> boots the</font>

907
00:42:31,450 --> 00:42:35,109
<font color="#E5E5E5">bootloader</font><font color="#CCCCCC"> about which I have been</font>

908
00:42:32,680 --> 00:42:37,239
talking<font color="#CCCCCC"> it's completely implemented</font><font color="#E5E5E5"> in</font>

909
00:42:35,109 --> 00:42:39,249
golang the first bootloader and go along

910
00:42:37,239 --> 00:42:41,769
I<font color="#E5E5E5"> don't think there's any</font><font color="#CCCCCC"> other and all</font>

911
00:42:39,249 --> 00:42:42,669
that is based on you root and this

912
00:42:41,769 --> 00:42:45,910
busybox

913
00:42:42,670 --> 00:42:49,809
<font color="#CCCCCC">minute ID in</font><font color="#E5E5E5"> it ID</font><font color="#CCCCCC"> generator and from</font>

914
00:42:45,910 --> 00:42:53,828
the hard disk you<font color="#CCCCCC"> can use grub and grub</font>

915
00:42:49,809 --> 00:42:57,459
to assist<font color="#E5E5E5"> Linux or</font><font color="#CCCCCC"> to find out both DHCP</font>

916
00:42:53,829 --> 00:42:59,559
and you just do a KX<font color="#E5E5E5"> ik and boot into</font>

917
00:42:57,459 --> 00:43:03,519
the<font color="#E5E5E5"> operating</font><font color="#CCCCCC"> system there's a very</font>

918
00:42:59,559 --> 00:43:06,640
vital<font color="#CCCCCC"> boot</font><font color="#E5E5E5"> firmware variables only</font><font color="#CCCCCC"> for</font>

919
00:43:03,519 --> 00:43:07,868
<font color="#E5E5E5">coreboot not for UEFI but if you're</font>

920
00:43:06,640 --> 00:43:10,779
<font color="#E5E5E5">interested in there look at that it's</font>

921
00:43:07,869 --> 00:43:15,279
<font color="#CCCCCC">just easy it's</font><font color="#E5E5E5"> all go</font><font color="#CCCCCC"> lang and it's it's</font>

922
00:43:10,779 --> 00:43:17,829
<font color="#E5E5E5">quite nice and you can maybe do graphics</font>

923
00:43:15,279 --> 00:43:20,469
<font color="#CCCCCC">output or whatever it's it's not it's</font>

924
00:43:17,829 --> 00:43:22,059
<font color="#CCCCCC">not too hard</font><font color="#E5E5E5"> well the conclusion is</font>

925
00:43:20,469 --> 00:43:24,130
there's a lot of<font color="#E5E5E5"> open source firmware</font>

926
00:43:22,059 --> 00:43:24,999
<font color="#E5E5E5">hardware the Open Compute Project that's</font>

927
00:43:24,130 --> 00:43:28,630
a huge project

928
00:43:24,999 --> 00:43:29,589
they've<font color="#E5E5E5"> open source hardware with core</font>

929
00:43:28,630 --> 00:43:31,869
<font color="#E5E5E5">boots</font>

930
00:43:29,589 --> 00:43:34,538
<font color="#E5E5E5">there's the Facebook open cellular I've</font>

931
00:43:31,869 --> 00:43:36,339
talked about<font color="#CCCCCC"> that there's purism</font><font color="#E5E5E5"> they</font>

932
00:43:34,539 --> 00:43:39,789
make laptops with<font color="#CCCCCC"> coreboot Google</font>

933
00:43:36,339 --> 00:43:43,839
Chromebooks<font color="#CCCCCC"> there's also all open source</font>

934
00:43:39,789 --> 00:43:47,769
firmware<font color="#E5E5E5"> and PC engines APU it's around</font>

935
00:43:43,839 --> 00:43:50,529
<font color="#E5E5E5">90 you 90 euros coreboot</font><font color="#CCCCCC"> the scale way a</font>

936
00:43:47,769 --> 00:43:53,229
hosting provider has changed<font color="#E5E5E5"> over</font><font color="#CCCCCC"> to</font>

937
00:43:50,529 --> 00:43:56,109
<font color="#CCCCCC">coreboot to excise on</font><font color="#E5E5E5"> the x86 systems</font>

938
00:43:53,229 --> 00:43:59,049
<font color="#CCCCCC">rep the computing system tell us they</font>

939
00:43:56,109 --> 00:44:00,640
have<font color="#CCCCCC"> the open PowerPC</font><font color="#E5E5E5"> they also don't</font>

940
00:43:59,049 --> 00:44:02,650
have<font color="#E5E5E5"> pcs they also have servers they are</font>

941
00:44:00,640 --> 00:44:04,868
still quite<font color="#CCCCCC"> expensive buy they are</font>

942
00:44:02,650 --> 00:44:06,969
around a thousand euros<font color="#CCCCCC"> know now for the</font>

943
00:44:04,869 --> 00:44:08,999
main<font color="#E5E5E5"> board it's</font><font color="#CCCCCC"> um you can almost afford</font>

944
00:44:06,969 --> 00:44:12,910
it then there's the Microsoft Surface

945
00:44:08,999 --> 00:44:15,848
uses<font color="#E5E5E5"> the open source firmware and lots</font>

946
00:44:12,910 --> 00:44:18,489
of embedded<font color="#CCCCCC"> BOTS and</font><font color="#E5E5E5"> if you want to do</font>

947
00:44:15,849 --> 00:44:20,710
something with open firmware just just

948
00:44:18,489 --> 00:44:23,200
do it right

949
00:44:20,710 --> 00:44:28,450
all these<font color="#E5E5E5"> already are supported by open</font>

950
00:44:23,200 --> 00:44:30,370
source firmware<font color="#E5E5E5"> then so I found it the</font>

951
00:44:28,450 --> 00:44:34,299
open source<font color="#CCCCCC"> firmware conference</font><font color="#E5E5E5"> it was</font>

952
00:44:30,370 --> 00:44:34,839
<font color="#E5E5E5">there</font><font color="#CCCCCC"> last year and Google interface</font>

953
00:44:34,300 --> 00:44:37,990
<font color="#CCCCCC">book</font>

954
00:44:34,840 --> 00:44:40,690
<font color="#E5E5E5">openSUSE 150 attendees it was an airline</font>

955
00:44:37,990 --> 00:44:43,870
<font color="#CCCCCC">and in Germany and</font><font color="#E5E5E5"> Kabul Linux port was</font>

956
00:44:40,690 --> 00:44:45,430
<font color="#CCCCCC">also there and this year</font><font color="#E5E5E5"> it will</font><font color="#CCCCCC"> be in</font>

957
00:44:43,870 --> 00:44:48,250
Silicon<font color="#CCCCCC"> Valley if you want to go there</font>

958
00:44:45,430 --> 00:44:51,160
and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> for developers and students</font>

959
00:44:48,250 --> 00:44:52,900
and<font color="#E5E5E5"> we can also get those people</font><font color="#CCCCCC"> there</font>

960
00:44:51,160 --> 00:44:55,180
<font color="#E5E5E5">it's it's planned for for the mid of</font>

961
00:44:52,900 --> 00:44:58,270
September next year and<font color="#E5E5E5"> it'll be a bit</font>

962
00:44:55,180 --> 00:45:01,960
bigger<font color="#CCCCCC"> and here's the last slide please</font>

963
00:44:58,270 --> 00:45:04,540
visit visit our assembly<font color="#CCCCCC"> we have an</font>

964
00:45:01,960 --> 00:45:08,860
assembly<font color="#CCCCCC"> just</font><font color="#E5E5E5"> like we did two previous</font>

965
00:45:04,540 --> 00:45:10,480
years<font color="#E5E5E5"> 30 30 seats you</font><font color="#CCCCCC"> can have your</font>

966
00:45:08,860 --> 00:45:12,430
<font color="#E5E5E5">Hardware fleshed if it is</font><font color="#CCCCCC"> supported</font>

967
00:45:10,480 --> 00:45:14,860
<font color="#CCCCCC">we'll have workshops</font><font color="#E5E5E5"> or you can ask</font>

968
00:45:12,430 --> 00:45:18,190
<font color="#CCCCCC">people who will</font><font color="#E5E5E5"> help you we have a demo</font>

969
00:45:14,860 --> 00:45:20,800
<font color="#CCCCCC">set up to play</font><font color="#E5E5E5"> around with and we do</font>

970
00:45:18,190 --> 00:45:24,480
that for coreboot<font color="#E5E5E5"> Tiano core you boot</font>

971
00:45:20,800 --> 00:45:28,000
Linux boot and system boot you wrote so

972
00:45:24,480 --> 00:45:38,530
just drop by and<font color="#CCCCCC"> take a</font><font color="#E5E5E5"> look</font>

973
00:45:28,000 --> 00:45:38,530
[Applause]

974
00:45:39,880 --> 00:45:48,290
I'm I'm<font color="#CCCCCC"> furthered I don't have to boot</font>

975
00:45:46,520 --> 00:45:50,000
<font color="#E5E5E5">anymore with toggle switches are there</font>

976
00:45:48,290 --> 00:45:52,400
any<font color="#CCCCCC"> questions after this very</font>

977
00:45:50,000 --> 00:45:54,890
interesting<font color="#E5E5E5"> in my presentation it was</font>

978
00:45:52,400 --> 00:45:57,080
very interesting<font color="#CCCCCC"> and very educational</font>

979
00:45:54,890 --> 00:45:59,629
please come<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the microphones we have</font>

980
00:45:57,080 --> 00:46:02,120
<font color="#E5E5E5">one two three</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> five different</font>

981
00:45:59,630 --> 00:46:10,820
microphones<font color="#E5E5E5"> there's already one</font>

982
00:46:02,120 --> 00:46:13,130
microphone for a question<font color="#CCCCCC"> as is a</font>

983
00:46:10,820 --> 00:46:18,500
sentence with<font color="#E5E5E5"> a question marks</font>

984
00:46:13,130 --> 00:46:23,060
afterwards<font color="#CCCCCC"> so question</font><font color="#E5E5E5"> doesn't include</font>

985
00:46:18,500 --> 00:46:29,390
your life story how is this integrated

986
00:46:23,060 --> 00:46:33,020
with risk<font color="#E5E5E5"> v2 here have some so there are</font>

987
00:46:29,390 --> 00:46:36,410
different<font color="#E5E5E5"> ways you boot has support for</font>

988
00:46:33,020 --> 00:46:39,590
risk<font color="#CCCCCC"> five</font><font color="#E5E5E5"> risk</font><font color="#CCCCCC"> V almost</font><font color="#E5E5E5"> five core boot</font>

989
00:46:36,410 --> 00:46:41,509
has risk<font color="#CCCCCC"> five support and if you have if</font>

990
00:46:39,590 --> 00:46:44,450
<font color="#E5E5E5">you</font><font color="#CCCCCC"> want to talk to play around</font><font color="#E5E5E5"> with</font>

991
00:46:41,510 --> 00:46:46,100
<font color="#E5E5E5">that you just get cobalt or maybe you</font>

992
00:46:44,450 --> 00:46:47,990
boot takes a bit longer you can<font color="#E5E5E5"> you can</font>

993
00:46:46,100 --> 00:46:50,630
<font color="#E5E5E5">play around with it they are just doing</font>

994
00:46:47,990 --> 00:46:54,799
it with with these two<font color="#E5E5E5"> platforms there</font>

995
00:46:50,630 --> 00:46:56,150
are there's<font color="#CCCCCC"> really support there's the</font>

996
00:46:54,800 --> 00:47:02,090
question I'm<font color="#CCCCCC"> picking from one I'm</font>

997
00:46:56,150 --> 00:47:04,490
interested this is integrated with<font color="#E5E5E5"> the</font>

998
00:47:02,090 --> 00:47:06,350
consumer<font color="#E5E5E5"> products for examples they</font>

999
00:47:04,490 --> 00:47:09,259
think pants<font color="#E5E5E5"> you mentioned so the new</font>

1000
00:47:06,350 --> 00:47:12,610
ones<font color="#E5E5E5"> might</font><font color="#CCCCCC"> have a problem with the</font>

1001
00:47:09,260 --> 00:47:16,550
interpret<font color="#CCCCCC"> card so you cannot</font><font color="#E5E5E5"> simply add</font>

1002
00:47:12,610 --> 00:47:19,730
<font color="#E5E5E5">coreboot there so how does it</font><font color="#CCCCCC"> work</font>

1003
00:47:16,550 --> 00:47:21,740
so don't with newer laptops with<font color="#CCCCCC"> core</font>

1004
00:47:19,730 --> 00:47:24,740
<font color="#CCCCCC">board or something like</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> the thing</font>

1005
00:47:21,740 --> 00:47:26,979
is the modern laptops have<font color="#CCCCCC"> feature</font><font color="#E5E5E5"> by</font>

1006
00:47:24,740 --> 00:47:30,859
<font color="#E5E5E5">Intel which is called root</font><font color="#CCCCCC"> Guard and</font>

1007
00:47:26,980 --> 00:47:32,720
Intel Dell Lenovo and and HP that can

1008
00:47:30,860 --> 00:47:34,610
protect the firmware<font color="#E5E5E5"> with that from</font>

1009
00:47:32,720 --> 00:47:37,160
modifications by a secure world

1010
00:47:34,610 --> 00:47:38,630
mechanism from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Southbridge so we</font>

1011
00:47:37,160 --> 00:47:40,910
can't<font color="#E5E5E5"> get around that</font><font color="#CCCCCC"> but there</font><font color="#E5E5E5"> are</font>

1012
00:47:38,630 --> 00:47:43,400
laptops where that has been<font color="#CCCCCC"> switched off</font>

1013
00:47:40,910 --> 00:47:47,029
because the manufacturers say we want

1014
00:47:43,400 --> 00:47:49,640
<font color="#E5E5E5">want</font><font color="#CCCCCC"> car-boot installed so you can buy</font>

1015
00:47:47,030 --> 00:47:52,400
from<font color="#E5E5E5"> tourism for example</font>

1016
00:47:49,640 --> 00:47:55,240
and you can buy<font color="#E5E5E5"> chromebox they they all</font>

1017
00:47:52,400 --> 00:47:58,819
have this and there you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> the</font>

1018
00:47:55,240 --> 00:48:00,379
<font color="#E5E5E5">possibility to do things like</font><font color="#CCCCCC"> that so</font>

1019
00:47:58,819 --> 00:48:02,680
the so far<font color="#E5E5E5"> we have no questions from</font><font color="#CCCCCC"> the</font>

1020
00:48:00,380 --> 00:48:07,130
<font color="#E5E5E5">internet</font><font color="#CCCCCC"> microphone number three place</font>

1021
00:48:02,680 --> 00:48:11,299
the<font color="#E5E5E5"> question to the workflow</font><font color="#CCCCCC"> when I</font><font color="#E5E5E5"> use</font>

1022
00:48:07,130 --> 00:48:14,059
Linux boot<font color="#E5E5E5"> as a</font><font color="#CCCCCC"> member when I'm</font><font color="#E5E5E5"> working</font>

1023
00:48:11,299 --> 00:48:18,680
with<font color="#E5E5E5"> Linux boot is the corner that is</font>

1024
00:48:14,059 --> 00:48:22,539
<font color="#E5E5E5">working as a member so</font><font color="#CCCCCC"> that I'm using as</font>

1025
00:48:18,680 --> 00:48:25,069
the starting the<font color="#E5E5E5"> machine is it the same</font>

1026
00:48:22,539 --> 00:48:27,950
<font color="#E5E5E5">that I'm actually running the operating</font>

1027
00:48:25,069 --> 00:48:32,269
system or<font color="#E5E5E5"> am i replacing it with a</font>

1028
00:48:27,950 --> 00:48:34,460
<font color="#CCCCCC">different corner</font><font color="#E5E5E5"> so with Linux</font><font color="#CCCCCC"> boot</font><font color="#E5E5E5"> the</font>

1029
00:48:32,269 --> 00:48:36,529
kernel is being replaced by a<font color="#CCCCCC"> new kernel</font>

1030
00:48:34,460 --> 00:48:37,490
so the<font color="#E5E5E5"> lean sport kernel is only far</font><font color="#CCCCCC"> too</font>

1031
00:48:36,529 --> 00:48:39,769
initialization

1032
00:48:37,490 --> 00:48:42,259
because it should be small<font color="#E5E5E5"> so</font><font color="#CCCCCC"> they're</font>

1033
00:48:39,769 --> 00:48:44,990
still<font color="#E5E5E5"> restricted memory on the nor</font><font color="#CCCCCC"> flash</font>

1034
00:48:42,260 --> 00:48:49,849
so it shouldn't be<font color="#E5E5E5"> too</font><font color="#CCCCCC"> big</font><font color="#E5E5E5"> and later it</font>

1035
00:48:44,990 --> 00:48:59,390
leads by a<font color="#E5E5E5"> KX seek a new kernel yes</font><font color="#CCCCCC"> are</font>

1036
00:48:49,849 --> 00:49:02,930
there<font color="#E5E5E5"> further questions</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> please</font>

1037
00:48:59,390 --> 00:49:12,650
thank me to think<font color="#CCCCCC"> Phillip for this</font>

1038
00:49:02,930 --> 00:49:14,480
<font color="#E5E5E5">ingenious talk so there are now standing</font>

1039
00:49:12,650 --> 00:49:18,069
<font color="#CCCCCC">ovation</font><font color="#E5E5E5"> see in the front and thank you</font>

1040
00:49:14,480 --> 00:49:18,069
yes thank<font color="#CCCCCC"> you very much</font>

1041
00:49:18,790 --> 00:49:25,969
[Music]

1042
00:49:28,040 --> 00:49:40,699
[Music]

