1
00:00:01,500 --> 00:00:03,789
Welcome to my presentation
about cross-layer attacks and

2
00:00:03,800 --> 00:00:06,789
how to use them for DNS cache
poisoning, device tracking and

3
00:00:06,800 --> 00:00:07,099
more.

4
00:00:07,500 --> 00:00:10,389
I am Amit Klein from Bar-Ilan
University and this research is

5
00:00:10,400 --> 00:00:12,789
part of my PhD thesis
supervised by Professor Benny

6
00:00:12,800 --> 00:00:13,699
Pinkas.

7
00:00:14,300 --> 00:00:16,199
Cross layer attacks

8
00:00:16,200 --> 00:00:20,289
use one network layer such as
IPv6, to attack another network

9
00:00:20,300 --> 00:00:23,388
layer such as UDP. We
demonstrate these attacks on

10
00:00:23,400 --> 00:00:26,488
the Linux kernel which is used
by Linux servers, Linux

11
00:00:26,500 --> 00:00:30,599
desktops, Linux laptops and by
Android devices.

12
00:00:32,900 --> 00:00:36,789
prandom_u32() is a Linux kernel
pseudo-random number generator,

13
00:00:36,800 --> 00:00:39,799
which is used in over 100 files
of the Linux kernel.

14
00:00:39,800 --> 00:00:43,189
We focus on the use of
prandom_u32() to populate

15
00:00:43,200 --> 00:00:47,989
network protocol header fields,
such as the TCP IPv4 ID field,

16
00:00:48,000 --> 00:00:52,789
the TCP IPv6 flow label field
and the UDP source port field,

17
00:00:52,800 --> 00:00:55,299
which is used in both IPv4 and
IPv6.

18
00:00:57,200 --> 00:01:01,289
prandom_u32() is a Tauseworthe
generator with a state of four

19
00:01:01,300 --> 00:01:02,498
32-bit words -

20
00:01:02,600 --> 00:01:04,998
altogether 128 bits.

21
00:01:05,600 --> 00:01:06,399
in a PRNG

22
00:01:06,400 --> 00:01:09,389
step, a linear matrix is
applied to the existing state

23
00:01:09,400 --> 00:01:11,699
vector to form the new state
vector.

24
00:01:12,100 --> 00:01:17,588
This matrix has a rank of 113,
so the state is effectively 113

25
00:01:17,600 --> 00:01:17,999
bits.

26
00:01:18,300 --> 00:01:20,099
The matrix is fixed, known,

27
00:01:20,400 --> 00:01:23,599
and it operates on the state
vector on a word-by-word basis.

28
00:01:23,800 --> 00:01:27,088
So each word is actually
advanced independently of the

29
00:01:27,100 --> 00:01:27,798
other words,

30
00:01:28,400 --> 00:01:31,288
The output of prandom_u32() is
obtained by applying exclusive

31
00:01:31,300 --> 00:01:34,399
OR to the four words of the state

32
00:01:34,400 --> 00:01:34,799
vector,

33
00:01:35,300 --> 00:01:39,088
Each prandom_u32() bit is a
linear combination of the state

34
00:01:39,100 --> 00:01:42,488
vector bits, thus providing one
linear equation on the state

35
00:01:42,500 --> 00:01:43,199
vector.

36
00:01:43,700 --> 00:01:45,999
Using linear equation solving
with enough

37
00:01:46,000 --> 00:01:48,889
prandom_u32() bits, the
attacker can reconstruct the

38
00:01:48,900 --> 00:01:50,299
entire state vector,

39
00:01:52,700 --> 00:01:55,889
prandom_u32() to has an
instance/state per logical CPU

40
00:01:55,900 --> 00:01:56,799
core.

41
00:01:57,100 --> 00:02:00,389
When a kernel thread invokes
prandom_u32(), the code uses

42
00:02:00,400 --> 00:02:04,189
the instance that belongs to
the core on which it currently

43
00:02:04,200 --> 00:02:08,089
runs. The initial seeding has
all four words populated with

44
00:02:08,100 --> 00:02:11,789
random data, but reseeding,
which takes place every 40 to

45
00:02:11,800 --> 00:02:12,899
80 seconds.

46
00:02:13,000 --> 00:02:16,389
Overrides only the first state
word - nominally, 32 bits and

47
00:02:16,400 --> 00:02:17,799
effectively, 31

48
00:02:18,300 --> 00:02:19,499
state bits.

49
00:02:20,300 --> 00:02:22,299
The implementation is
thread-safe, but not interrupt-

50
00:02:22,400 --> 00:02:23,099
safe.

51
00:02:24,700 --> 00:02:26,988
In across layer attack, the
attacker extracts the

52
00:02:27,000 --> 00:02:31,099
prandom_u32() state from one
layer and predicts, or matches

53
00:02:31,100 --> 00:02:34,388
the next values of
prandom_u32() that are used by

54
00:02:34,400 --> 00:02:35,399
another layer.

55
00:02:35,600 --> 00:02:39,099
Our first use case is effective
DNS cache poisoning attack.

56
00:02:39,500 --> 00:02:41,689
In a straightforward brute
force attack, the attacker

57
00:02:41,700 --> 00:02:46,289
tries all combinations of over
28,000 UDP source ports with

58
00:02:46,300 --> 00:02:48,399
64K DNS transaction

59
00:02:48,400 --> 00:02:51,789
IDs - a total of almost two
billion packets. With our

60
00:02:51,800 --> 00:02:55,399
attack, the attacker extracts
the prandom_u32()

61
00:02:55,400 --> 00:02:59,399
state from the TCP IPv6 flow
label field at layer 3.

62
00:02:59,400 --> 00:03:02,589
And with this state, the
attacker can predict the next

63
00:03:02,600 --> 00:03:06,989
UDP source port at layer 4,
used for the DNS query, so the

64
00:03:07,000 --> 00:03:10,499
attacker has to go over only
64K DNS transaction

65
00:03:10,500 --> 00:03:13,399
IDs - a total of only 64K
packets.

66
00:03:13,400 --> 00:03:18,189
This amounts to a huge saving
in both attack time and packets

67
00:03:18,200 --> 00:03:20,399
used. In real-life experiment.

68
00:03:20,400 --> 00:03:23,489
we demonstrated average
time-to-poison of less than 30

69
00:03:23,500 --> 00:03:24,399
seconds,

70
00:03:24,400 --> 00:03:27,299
instead of almost two days with
a brute force attack.

71
00:03:28,100 --> 00:03:30,399
Our second use case is device
tracking

72
00:03:30,900 --> 00:03:34,689
in which the attacker extracts
the prandom_u32() state from a

73
00:03:34,700 --> 00:03:37,888
network protocol field and
matches it to a recorded state

74
00:03:37,900 --> 00:03:40,299
from a previous visit of the
device.

75
00:03:41,100 --> 00:03:44,789
In this way, the attacker can
track devices across IPv4 and

76
00:03:44,800 --> 00:03:46,199
IPv6 networks

77
00:03:46,600 --> 00:03:48,999
and across TCP and UDP
connections.

78
00:03:50,100 --> 00:03:53,299
Let's take a closer look at
efficient DNS cache poisoning.

79
00:03:54,700 --> 00:03:56,899
The attack target is a Linux
server.

80
00:03:56,900 --> 00:04:00,299
For example, one that runs SMTP
service over TCP IPv6 and uses

81
00:04:00,310 --> 00:04:04,089
public DNS services, such as
Google public DNS, Cloudflare,

82
00:04:04,100 --> 00:04:08,989
IBM Quad9, etc. We ran an
auxiliary experiment with

83
00:04:09,000 --> 00:04:13,289
Alexa's Top 1 Million domains
and found that between 24% and

84
00:04:13,300 --> 00:04:18,699
37% of enterprise managed SMTP
servers use public DNS service.

85
00:04:18,700 --> 00:04:20,798
So, this is a very realistic
scenario.

86
00:04:20,800 --> 00:04:24,099
The attack's goal is to poison
the server's stub resolver DNS

87
00:04:24,110 --> 00:04:24,499
cache.

88
00:04:26,100 --> 00:04:29,299
The impact is extensive:
hijacking emails

89
00:04:29,300 --> 00:04:32,499
(this is an SMTP server after
all), hijacking HTTP traffic.

90
00:04:32,500 --> 00:04:34,989
If such traffic is emitted by
the machine. Poisoning HTTP

91
00:04:35,000 --> 00:04:37,689
proxy cache if the target
machine doubles as an HTTP

92
00:04:37,700 --> 00:04:41,188
proxy cache, and poisoning DNS
records, which are used for

93
00:04:41,200 --> 00:04:44,188
anti-spyware and anti-malware
services, like DNS blacklisting,

94
00:04:44,200 --> 00:04:47,199
sender policy framework and so
forth.

95
00:04:47,900 --> 00:04:50,789
NTP relies on DNS, so the
target's clock can be

96
00:04:50,800 --> 00:04:54,499
manipulated, and ironically,
strict transport security (STS)

97
00:04:54,600 --> 00:04:58,099
bootstraps using DNS so it can
be suppressed.

98
00:05:00,200 --> 00:05:02,498
The attack starts with the
attacker

99
00:05:02,500 --> 00:05:06,089
probing the target machine over
TCP/IPv6, collecting flow label

100
00:05:06,100 --> 00:05:09,689
values and extracting the
prandom_u32() state. Then the

101
00:05:09,700 --> 00:05:12,099
attacker starts another SMTP
session

102
00:05:12,100 --> 00:05:15,399
that triggers a DNS query. This
can be done using DKIM,

103
00:05:15,400 --> 00:05:18,489
for example. The target stub
resolver starts the DNS

104
00:05:18,500 --> 00:05:21,289
resolution process by sending a
DNS query to the recursive

105
00:05:21,300 --> 00:05:22,099
resolver.

106
00:05:22,100 --> 00:05:25,489
And that opens the attack
window for the attacker who

107
00:05:25,500 --> 00:05:28,489
sends spoof DNS answers as if
coming from the recursive

108
00:05:28,500 --> 00:05:32,189
resolver using the extracted
state to replicate the UDP

109
00:05:32,200 --> 00:05:35,299
source port used in the
original query.

110
00:05:35,800 --> 00:05:38,299
The recursive resolver resolves
the DNS query,

111
00:05:39,300 --> 00:05:41,999
and sends the genuine answer to
the target machine,

112
00:05:42,300 --> 00:05:44,899
at which time the attack
becomes ineffective,

113
00:05:47,900 --> 00:05:51,289
because the dtub resolver uses
the first answer that matches

114
00:05:51,300 --> 00:05:53,599
the query and drops subsequent
queries.

115
00:05:54,000 --> 00:05:55,899
So the attacker can halt the
attack.

116
00:05:56,700 --> 00:05:59,199
And that concludes single
attack attempt cycle.

117
00:06:00,700 --> 00:06:03,289
One challenge of this technique
is a race condition. The

118
00:06:03,300 --> 00:06:06,799
attacker's spoofed response
must arrive to the target

119
00:06:07,000 --> 00:06:09,299
before the recursive resolver's
genuine answer

120
00:06:09,700 --> 00:06:12,989
Ubuntu, which is the most
popular Linux distribution uses

121
00:06:13,000 --> 00:06:15,799
by default stub resolver called
Systemd-Resolved,

122
00:06:16,100 --> 00:06:18,399
that employs a record-based
caching policy.

123
00:06:19,000 --> 00:06:21,699
This policy makes the attack
much more effective because the

124
00:06:21,710 --> 00:06:24,698
attacker can trigger DNS query
to the attackers domain.

125
00:06:24,900 --> 00:06:29,799
In this example, it's dummy123.
attacker.site. This may sound a

126
00:06:29,810 --> 00:06:30,399
bit counterintuitive.

127
00:06:31,100 --> 00:06:33,299
I'll explain why it works in a
moment.

128
00:06:33,700 --> 00:06:35,498
The attacker's authoritative
name server

129
00:06:35,700 --> 00:06:38,489
delays the answer - this
extends the attack window for

130
00:06:38,500 --> 00:06:39,299
the attacker.

131
00:06:39,800 --> 00:06:40,399
Finally.

132
00:06:41,900 --> 00:06:44,888
the attacker's spoofed answer
contains a CNAME chain that

133
00:06:44,900 --> 00:06:47,888
ends with a poisonous DNS
record, mapping an arbitrary,

134
00:06:47,900 --> 00:06:50,498
hostname www.target.site

135
00:06:50,500 --> 00:06:51,999
in our example

136
00:06:52,300 --> 00:06:53,699
to an arbitrary address

137
00:06:54,000 --> 00:06:56,199
6.6.6.6 in our example.

138
00:06:56,600 --> 00:06:58,999
since Systemd-Resolved caches
by record,

139
00:06:59,300 --> 00:07:02,389
it caches this poisonous record
on its own, overriding any

140
00:07:02,400 --> 00:07:06,188
previously cached record (if
such exists), and serves it for

141
00:07:06,200 --> 00:07:10,789
any subsequent query for this
hostname, www.target.site in

142
00:07:10,800 --> 00:07:11,299
this example.

143
00:07:12,200 --> 00:07:13,498
Thus the attacker achieves

144
00:07:13,800 --> 00:07:17,489
cache poisoning for arbitrary
hostname with arbitrary data,

145
00:07:17,500 --> 00:07:19,499
per the attacker's choice.

146
00:07:22,600 --> 00:07:25,489
Another challenge is accurately
predicting the UDP source port

147
00:07:25,500 --> 00:07:27,799
when the target machine is
multi-core.

148
00:07:29,000 --> 00:07:31,699
I remind you that if the DNS
query is sent from a different

149
00:07:31,710 --> 00:07:36,099
core from the one that attacker
probed - the attack fails.

150
00:07:36,800 --> 00:07:38,899
So in order to improve the
attack's odds

151
00:07:39,300 --> 00:07:43,399
the attacker sandwiches the DNS
query with a post-DNS probe.

152
00:07:43,900 --> 00:07:46,688
If the flow label from the
post-DNS probe matches the

153
00:07:46,700 --> 00:07:49,389
sequence of flow labels
predicted from the state the

154
00:07:49,400 --> 00:07:52,399
attacker extracted, the
attacker can assume that The

155
00:07:52,410 --> 00:07:55,299
DNS query was emitted from the
same core as well,

156
00:07:55,700 --> 00:07:58,498
and the attacker may proceed to
attack the target.

157
00:07:58,900 --> 00:08:02,188
Otherwise, the attacker can
skip this attack and thus save

158
00:08:02,200 --> 00:08:03,899
a lot of time and packets.

159
00:08:05,400 --> 00:08:07,789
We tested this attack on a
machine with 4 logical cores

160
00:08:07,800 --> 00:08:10,799
that runs Ubuntu Linux with
Systemd-Resolved

161
00:08:10,800 --> 00:08:11,799
stub resolver

162
00:08:12,100 --> 00:08:14,199
and Exim SMTP server software.

163
00:08:14,700 --> 00:08:17,199
We configured it to use 2 DNS
servers,

164
00:08:17,500 --> 00:08:20,789
and the attack took place from
over 3,000 kilometers away with

165
00:08:20,800 --> 00:08:23,399
a modest bandwidth and a very
typical RTT.

166
00:08:23,900 --> 00:08:27,299
So this experiment represents a
very realistic scenario.

167
00:08:27,600 --> 00:08:30,389
We obtained an average
time-to-poison of a bit less

168
00:08:30,400 --> 00:08:34,798
than 29 seconds vs. almost two
days with a brute force attack.

169
00:08:36,100 --> 00:08:39,565
Our attack is therefore 5,000
times faster than a brute force

170
00:08:39,566 --> 00:08:41,298
attack.

171
00:08:42,900 --> 00:08:45,799
Our second use case is remote
device tracking.

172
00:08:46,800 --> 00:08:49,399
The idea here is to be able to
track a device

173
00:08:50,500 --> 00:08:53,589
across websites and across time
without using common

174
00:08:53,600 --> 00:08:56,289
infrastructure because common
infrastructure is easily

175
00:08:56,300 --> 00:08:57,998
detected and blocked.

176
00:08:58,900 --> 00:09:02,389
The concept is that each site
embeds an HTML snippet with

177
00:09:02,400 --> 00:09:05,389
Javascript. This Javascript
sends multiple TCP or UDP

178
00:09:05,400 --> 00:09:07,999
packets to a first-party
tracking server.

179
00:09:08,000 --> 00:09:10,699
So each site runs its own
tracking

180
00:09:10,700 --> 00:09:14,789
server. WebRTC can be used to
send such packets. The attack

181
00:09:14,800 --> 00:09:18,689
can use all combinations of TCP
and UDP over IPv4 and IPv6. In

182
00:09:18,700 --> 00:09:20,499
our experiments,

183
00:09:20,500 --> 00:09:22,499
we used IPv4 UDP source port.

184
00:09:22,500 --> 00:09:25,789
The tracking server extract
states from as many cores as

185
00:09:25,800 --> 00:09:28,889
possible and then the tracking
server can roll these states

186
00:09:28,900 --> 00:09:32,189
backwards to match earlier
measurements collected from the

187
00:09:32,200 --> 00:09:34,999
same device when it visited one
of those sites.

188
00:09:35,900 --> 00:09:37,889
The attacker can use the
baby-steps giant-steps

189
00:09:37,900 --> 00:09:40,199
technique to reduce the
processing time.

190
00:09:40,700 --> 00:09:43,399
The extracted state is not
site-specific. Rather,

191
00:09:43,400 --> 00:09:46,799
it is device-specific, or more
accurately - kernel-specific.

192
00:09:47,100 --> 00:09:50,389
So the attack works across
browsers, across containers,

193
00:09:50,400 --> 00:09:52,989
across network switching,
including some VPNs ,and of

194
00:09:53,000 --> 00:09:54,699
course OS sleep.

195
00:09:55,200 --> 00:09:57,199
It does not, however, survive a
reboot.

196
00:09:59,600 --> 00:10:01,799
One challenge of this attack is
reseeding.

197
00:10:02,200 --> 00:10:04,889
However, recall that reseeding
is only applied to the first

198
00:10:04,900 --> 00:10:08,699
32-bit word, and each word is
advanced separately.

199
00:10:08,800 --> 00:10:11,299
Therefore, the remaining three
words are untouched.

200
00:10:11,400 --> 00:10:14,689
So there are 82 state bits
there that are not affected by

201
00:10:14,700 --> 00:10:15,499
reseeding.

202
00:10:16,100 --> 00:10:19,089
Another challenge is obtaining
prandom_u32() bits from UDP

203
00:10:19,100 --> 00:10:21,199
source port observations.

204
00:10:21,900 --> 00:10:24,889
the prandom_u32() bits are not
simply copied into the UDP

205
00:10:24,900 --> 00:10:25,999
source port.

206
00:10:26,100 --> 00:10:27,899
Instead, the formula in this
page

207
00:10:28,200 --> 00:10:31,789
is used. However, if we only
look at the most significant,

208
00:10:31,800 --> 00:10:35,789
say, 8 bits of prandom_u32(),
then these bits are determined

209
00:10:35,800 --> 00:10:38,598
fairly accurately by the port
value.

210
00:10:38,800 --> 00:10:40,988
Therefore the attacker can
still collect enough port

211
00:10:41,000 --> 00:10:44,299
values to get prandom_u32()
bits and extract the state.

212
00:10:45,200 --> 00:10:47,499
The third challenge is the
issue of drift.

213
00:10:47,600 --> 00:10:49,789
Wherein the PRNG state
occasionally being updated

214
00:10:49,800 --> 00:10:53,089
simultaneously when the kernel
thread runs and then an

215
00:10:53,100 --> 00:10:54,099
interrupt occurs.

216
00:10:54,600 --> 00:10:58,099
In such case, since the state
cannot be updated

217
00:10:58,500 --> 00:10:59,599
atomically,

218
00:11:00,100 --> 00:11:02,889
the result is that the first
two words and the last words

219
00:11:02,900 --> 00:11:04,799
get a bit out of sync.

220
00:11:05,300 --> 00:11:07,899
This needs to be taken into
consideration

221
00:11:07,900 --> 00:11:09,899
when the attacker applies the
baby-step

222
00:11:10,200 --> 00:11:11,499
giant-step technique.

223
00:11:15,500 --> 00:11:19,089
We tested Android devices from
Google, HTC Huawei, OnePlus,

224
00:11:19,100 --> 00:11:23,199
Pocophone and Samsung as well
as a Linux Dell laptop

225
00:11:23,200 --> 00:11:25,699
running Ubuntu. In the Linux
Dell laptop

226
00:11:25,700 --> 00:11:29,489
we demonstrated cross-browser
tracking between Google Chrome

227
00:11:29,500 --> 00:11:30,599
and Mozilla Firefox.

228
00:11:31,200 --> 00:11:34,089
We also demonstrated
cross-layer tracking with UDP

229
00:11:34,100 --> 00:11:38,999
source port which is Layer 4 vs.
IPv4 ID which is Layer 3.

230
00:11:41,200 --> 00:11:46,689
The workarounds for DNS cache
poisoning include using DNSSEC,

231
00:11:46,700 --> 00:11:49,799
DNS over TLS, DNS over HTTPS
and TSIG,

232
00:11:50,100 --> 00:11:52,899
but all these technologies are
not widely enough deployed.

233
00:11:53,700 --> 00:11:55,599
Using 0x20 bit encoding

234
00:11:55,600 --> 00:11:57,989
queries is not effective when
the target is a record-based

235
00:11:58,000 --> 00:12:01,989
resolver, like Systemd-Resolved
because the query arrives at

236
00:12:02,000 --> 00:12:03,899
the attacker's authoritative
name server.

237
00:12:04,500 --> 00:12:06,489
And then of course it's
possible to switch to a stub

238
00:12:06,500 --> 00:12:09,399
resolver that randomizes it's
UDP source ports

239
00:12:09,700 --> 00:12:11,499
instead of delegating their
selection to the operating

240
00:12:11,510 --> 00:12:12,499
system.

241
00:12:13,500 --> 00:12:15,489
The workaround for device
tracking is using a shared

242
00:12:15,500 --> 00:12:16,299
forward

243
00:12:16,300 --> 00:12:18,598
HTTP proxy server or TOR,

244
00:12:19,400 --> 00:12:21,799
but the real solution of course,
is to change

245
00:12:21,800 --> 00:12:24,988
prandom_u32()'s implementation
into a stronger one, which is

246
00:12:25,000 --> 00:12:27,389
exactly what the Linux kernel
team did for Linux kernel

247
00:12:27,400 --> 00:12:30,789
version 5.10 and back-ported it
to all the long-term support

248
00:12:30,800 --> 00:12:31,799
branches.

249
00:12:34,700 --> 00:12:35,499
To conclude

250
00:12:36,600 --> 00:12:38,599
Using weak crypto for network
protocol

251
00:12:38,600 --> 00:12:40,199
header fields is a bad idea.

252
00:12:40,800 --> 00:12:43,299
Industrial-strength crypto
should be used instead.

253
00:12:44,500 --> 00:12:47,489
Using the same PRNG instance
for multiple consumers is not

254
00:12:47,500 --> 00:12:48,599
recommended.

255
00:12:48,900 --> 00:12:51,589
Having a PRNG instance per
consumer is better, especially

256
00:12:51,600 --> 00:12:53,699
with respect to containers.

257
00:12:54,900 --> 00:12:57,598
Partial-only reseeding is
potentially insecure.

258
00:12:58,300 --> 00:12:59,899
The secure procedure is full

259
00:12:59,900 --> 00:13:00,598
reseeding.

260
00:13:02,000 --> 00:13:05,589
And an interesting outcome of
this research is that the PRNG

261
00:13:05,600 --> 00:13:08,899
state itself can be used for
device tracking.

262
00:13:09,000 --> 00:13:12,799
So, sometimes a simple counter
is better than weak crypto.

263
00:13:13,800 --> 00:13:14,998
Thank you.

