1
00:00:02,480 --> 00:00:03,679
hello everyone

2
00:00:03,679 --> 00:00:06,560
here i'm very glad to present our paper

3
00:00:06,560 --> 00:00:07,680
entitled

4
00:00:07,680 --> 00:00:10,240
helper on packing android apps while a

5
00:00:10,240 --> 00:00:12,799
hardware assisted approach

6
00:00:12,799 --> 00:00:14,960
and it is a joint work with the hong

7
00:00:14,960 --> 00:00:16,880
kong polytechnic university

8
00:00:16,880 --> 00:00:20,160
xiojiang university tanji university

9
00:00:20,160 --> 00:00:23,600
texas a m university southern university

10
00:00:23,600 --> 00:00:25,519
of science and technology

11
00:00:25,519 --> 00:00:29,119
and the university of hong kong

12
00:00:29,119 --> 00:00:31,760
here i will first introduce what is atp

13
00:00:31,760 --> 00:00:32,399
packing

14
00:00:32,399 --> 00:00:35,920
and app unpacking ap packing is a

15
00:00:35,920 --> 00:00:36,559
technique

16
00:00:36,559 --> 00:00:38,800
that is widely adopted by both

17
00:00:38,800 --> 00:00:40,079
legitimate apps

18
00:00:40,079 --> 00:00:43,280
and malicious apps and the main purpose

19
00:00:43,280 --> 00:00:46,000
of ap packing or packers is to prevent

20
00:00:46,000 --> 00:00:47,840
the buy code of the pep app

21
00:00:47,840 --> 00:00:50,960
from being accessed specifically hackers

22
00:00:50,960 --> 00:00:52,000
usually first

23
00:00:52,000 --> 00:00:54,559
hide the original buy code of apps and

24
00:00:54,559 --> 00:00:56,320
then release the hidden by code to

25
00:00:56,320 --> 00:00:58,480
memory at runtime

26
00:00:58,480 --> 00:01:01,359
for example to hide the buy code some

27
00:01:01,359 --> 00:01:02,719
packers will replace

28
00:01:02,719 --> 00:01:05,840
original buy code with fake ones as

29
00:01:05,840 --> 00:01:06,400
shown in

30
00:01:06,400 --> 00:01:09,600
figure the original buy code is replaced

31
00:01:09,600 --> 00:01:13,600
with snob instructions the opposite of

32
00:01:13,600 --> 00:01:16,640
packing is unpacking and its purpose

33
00:01:16,640 --> 00:01:19,280
is to recover the original buy code of

34
00:01:19,280 --> 00:01:20,960
the pack app

35
00:01:20,960 --> 00:01:22,799
since the original buy code will be

36
00:01:22,799 --> 00:01:24,880
released to memory at runtime

37
00:01:24,880 --> 00:01:28,159
on collect the released code to achieve

38
00:01:28,159 --> 00:01:30,960
the purpose of unpacking

39
00:01:30,960 --> 00:01:33,920
note that in order to prevent the pad

40
00:01:33,920 --> 00:01:34,320
apps

41
00:01:34,320 --> 00:01:36,799
from being unpacked or be analyzed by

42
00:01:36,799 --> 00:01:37,920
unpackers

43
00:01:37,920 --> 00:01:40,000
and repackers will also adopt

44
00:01:40,000 --> 00:01:42,240
anti-advancing methods

45
00:01:42,240 --> 00:01:44,240
with the anti-analysis methods on

46
00:01:44,240 --> 00:01:46,479
paragus cannot collect the release by

47
00:01:46,479 --> 00:01:46,960
code

48
00:01:46,960 --> 00:01:51,520
and then filling to unpack the pack apps

49
00:01:51,920 --> 00:01:54,159
investigating android packers is very

50
00:01:54,159 --> 00:01:55,119
important

51
00:01:55,119 --> 00:01:57,119
as it has been noticed by security

52
00:01:57,119 --> 00:01:58,719
researchers that

53
00:01:58,719 --> 00:02:00,880
commercial packers are increasingly

54
00:02:00,880 --> 00:02:03,680
abused by malwa

55
00:02:03,680 --> 00:02:06,159
meanwhile it has been reported that pact

56
00:02:06,159 --> 00:02:08,239
malware can easily invade

57
00:02:08,239 --> 00:02:11,440
detection and sneak into app markets

58
00:02:11,440 --> 00:02:14,560
even to google play

59
00:02:14,720 --> 00:02:17,040
to defense against packed malware

60
00:02:17,040 --> 00:02:18,800
various app unpackers

61
00:02:18,800 --> 00:02:20,640
have been proposed from both the

62
00:02:20,640 --> 00:02:23,440
academia and the industry

63
00:02:23,440 --> 00:02:25,280
depending on how these packets are

64
00:02:25,280 --> 00:02:26,959
implemented we divide them into the

65
00:02:26,959 --> 00:02:29,520
following four categories

66
00:02:29,520 --> 00:02:32,400
first the debugger based on packer such

67
00:02:32,400 --> 00:02:33,920
as kids case

68
00:02:33,920 --> 00:02:37,120
it is a petri is based on hacker

69
00:02:37,120 --> 00:02:39,200
second the emulator based on packets

70
00:02:39,200 --> 00:02:40,800
such as droid unpack

71
00:02:40,800 --> 00:02:44,640
and it is a cumulative unpacker

72
00:02:44,640 --> 00:02:46,560
third the dynamic instrumentation

73
00:02:46,560 --> 00:02:48,480
framework based on packers

74
00:02:48,480 --> 00:02:51,440
such as dj droid and pekka green which

75
00:02:51,440 --> 00:02:52,640
are built upon the

76
00:02:52,640 --> 00:02:55,200
dynamic entrantation framework exposed

77
00:02:55,200 --> 00:02:57,920
and available respectively

78
00:02:57,920 --> 00:03:01,280
force the custom system based on packers

79
00:03:01,280 --> 00:03:04,480
such as spare and clearer and

80
00:03:04,480 --> 00:03:07,200
they will still statically instrument

81
00:03:07,200 --> 00:03:08,239
the

82
00:03:08,239 --> 00:03:10,400
demo interpreter or the up runtime

83
00:03:10,400 --> 00:03:11,519
android framework

84
00:03:11,519 --> 00:03:13,760
to build a custom android system as the

85
00:03:13,760 --> 00:03:16,319
unpacker

86
00:03:16,400 --> 00:03:19,200
however since these tools make pet apps

87
00:03:19,200 --> 00:03:20,000
run in

88
00:03:20,000 --> 00:03:23,120
special analysis environment they can be

89
00:03:23,120 --> 00:03:24,560
easily

90
00:03:24,560 --> 00:03:27,120
detected by packers and thus they learn

91
00:03:27,120 --> 00:03:28,720
too effectively on pack pad

92
00:03:28,720 --> 00:03:32,000
apps accordingly in this work we propose

93
00:03:32,000 --> 00:03:35,200
a hardware assisted approach

94
00:03:35,200 --> 00:03:38,959
helper which is much harder for packers

95
00:03:38,959 --> 00:03:39,280
to

96
00:03:39,280 --> 00:03:43,680
detect it and this is the agenda for the

97
00:03:43,680 --> 00:03:46,400
presentation and in the following i will

98
00:03:46,400 --> 00:03:48,319
first introduce hardware features used

99
00:03:48,319 --> 00:03:50,000
by hepa

100
00:03:50,000 --> 00:03:52,000
then i will briefly elaborate

101
00:03:52,000 --> 00:03:53,200
architecture overview

102
00:03:53,200 --> 00:03:56,080
of hepa and the technical problems we

103
00:03:56,080 --> 00:03:59,680
met and approached in implementing hepa

104
00:03:59,680 --> 00:04:02,400
subsequently i will simply present the

105
00:04:02,400 --> 00:04:03,439
packing behavior we

106
00:04:03,439 --> 00:04:06,560
identified in commercial android packers

107
00:04:06,560 --> 00:04:09,200
followed by the experiment results of

108
00:04:09,200 --> 00:04:10,879
hepa

109
00:04:10,879 --> 00:04:13,599
and last i will make a summary about our

110
00:04:13,599 --> 00:04:15,840
work

111
00:04:18,959 --> 00:04:22,079
to unpack pad apps helper first

112
00:04:22,079 --> 00:04:24,479
scrutinize the packing behaviors of pad

113
00:04:24,479 --> 00:04:25,199
apps

114
00:04:25,199 --> 00:04:27,440
and then choose the proper points to

115
00:04:27,440 --> 00:04:29,840
collect the release by code accordingly

116
00:04:29,840 --> 00:04:32,320
by leveraging three hardware features of

117
00:04:32,320 --> 00:04:33,600
the

118
00:04:33,600 --> 00:04:36,240
version a platform including embedded

119
00:04:36,240 --> 00:04:37,600
trace microsoft

120
00:04:37,600 --> 00:04:39,840
hardware breakpoints and the memory

121
00:04:39,840 --> 00:04:42,560
management unit

122
00:04:42,560 --> 00:04:45,360
more specifically pepper uses embedded

123
00:04:45,360 --> 00:04:46,639
trees microself

124
00:04:46,639 --> 00:04:50,000
or shortfall etm to trace the executed

125
00:04:50,000 --> 00:04:51,040
instructions

126
00:04:51,040 --> 00:04:55,199
of pep app with no additional overhead

127
00:04:55,199 --> 00:04:57,520
meanwhile it uses hardware breakpoints

128
00:04:57,520 --> 00:04:59,440
and the memory management unit

129
00:04:59,440 --> 00:05:02,720
short for mmu to interrupt the normal

130
00:05:02,720 --> 00:05:04,560
execution of pad apps

131
00:05:04,560 --> 00:05:06,639
and then retrieve the demanded memory

132
00:05:06,639 --> 00:05:08,880
data in order to identify

133
00:05:08,880 --> 00:05:11,039
the packer's packing behaviors and

134
00:05:11,039 --> 00:05:12,400
collect the release of buy

135
00:05:12,400 --> 00:05:16,560
code for unpacking the pack app

136
00:05:18,400 --> 00:05:20,639
this figure shows the high level

137
00:05:20,639 --> 00:05:22,880
overview of helper

138
00:05:22,880 --> 00:05:25,520
a helper consists of two parts an arm

139
00:05:25,520 --> 00:05:26,080
platform

140
00:05:26,080 --> 00:05:28,080
placed at the left side of the figure

141
00:05:28,080 --> 00:05:29,919
and a whole computer placed on the right

142
00:05:29,919 --> 00:05:30,320
side

143
00:05:30,320 --> 00:05:33,199
of the figure the arm platform is

144
00:05:33,199 --> 00:05:34,080
responsible

145
00:05:34,080 --> 00:05:36,639
for monitoring runtime behaviors and

146
00:05:36,639 --> 00:05:38,240
retrieving runtime information

147
00:05:38,240 --> 00:05:40,880
of the pack app including the executing

148
00:05:40,880 --> 00:05:41,840
instructions

149
00:05:41,840 --> 00:05:44,160
access the memory data and the release

150
00:05:44,160 --> 00:05:46,720
by code

151
00:05:46,880 --> 00:05:49,520
the host computer takes the charge of

152
00:05:49,520 --> 00:05:51,520
controlling behaviors monitoring

153
00:05:51,520 --> 00:05:54,639
and unpacking tasks specifically

154
00:05:54,639 --> 00:05:57,360
it instructs the on platform to retrieve

155
00:05:57,360 --> 00:06:00,160
runtime information of the pep app

156
00:06:00,160 --> 00:06:02,479
in addition the host computer will also

157
00:06:02,479 --> 00:06:04,319
analyze the data retrieved by the arm

158
00:06:04,319 --> 00:06:05,440
platform

159
00:06:05,440 --> 00:06:07,680
to identify the packing behaviors of

160
00:06:07,680 --> 00:06:08,560
packers

161
00:06:08,560 --> 00:06:11,280
meanwhile it unpacks the pack apps by

162
00:06:11,280 --> 00:06:13,520
assembling the buy code collected by the

163
00:06:13,520 --> 00:06:16,240
arm platform

164
00:06:16,720 --> 00:06:20,000
we meet several typing problems

165
00:06:20,000 --> 00:06:22,880
uh during implementing hepa first we

166
00:06:22,880 --> 00:06:23,840
meet two problems

167
00:06:23,840 --> 00:06:26,000
in tracking the security instructions of

168
00:06:26,000 --> 00:06:27,600
pad apps

169
00:06:27,600 --> 00:06:30,479
first the on track on chip buffer is too

170
00:06:30,479 --> 00:06:32,479
small to store the etm string

171
00:06:32,479 --> 00:06:34,639
which contains the trace elements that

172
00:06:34,639 --> 00:06:36,400
hold the target addresses of the

173
00:06:36,400 --> 00:06:38,479
security indirect branch instructions

174
00:06:38,479 --> 00:06:41,840
of all running processes second

175
00:06:41,840 --> 00:06:44,080
since the security instructions of all

176
00:06:44,080 --> 00:06:46,000
running processes will be recorded by

177
00:06:46,000 --> 00:06:48,800
ntms by default the atm string contains

178
00:06:48,800 --> 00:06:50,639
many redundant trace elements

179
00:06:50,639 --> 00:06:53,360
now the relevant to determine the

180
00:06:53,360 --> 00:06:54,560
packing behaviors

181
00:06:54,560 --> 00:06:57,199
but handles that redundant data increase

182
00:06:57,199 --> 00:06:59,840
obvious additional hat

183
00:06:59,840 --> 00:07:02,240
according to taco the first problem we

184
00:07:02,240 --> 00:07:04,080
use a dedicated off-chip

185
00:07:04,080 --> 00:07:07,360
hardware with a four gigabyte hub buffer

186
00:07:07,360 --> 00:07:09,360
to store the etm string

187
00:07:09,360 --> 00:07:11,360
and then to tackle the second problem we

188
00:07:11,360 --> 00:07:13,680
configure etm to make it just

189
00:07:13,680 --> 00:07:15,440
track the executed branch instructions

190
00:07:15,440 --> 00:07:17,120
target addresses of the

191
00:07:17,120 --> 00:07:19,680
target app

192
00:07:20,240 --> 00:07:23,440
we also encounter a problem in solving

193
00:07:23,440 --> 00:07:25,599
atm stream

194
00:07:25,599 --> 00:07:28,479
existing ecm string resolvers only focus

195
00:07:28,479 --> 00:07:30,240
on pressing the visual addresses of the

196
00:07:30,240 --> 00:07:31,680
track instructions

197
00:07:31,680 --> 00:07:33,919
however detecting packing behavior also

198
00:07:33,919 --> 00:07:36,240
require high-level schematic information

199
00:07:36,240 --> 00:07:38,400
such as framework and native method

200
00:07:38,400 --> 00:07:39,919
invocations

201
00:07:39,919 --> 00:07:42,319
and there is a schematic gap between the

202
00:07:42,319 --> 00:07:43,440
packing behaviors

203
00:07:43,440 --> 00:07:45,680
and the track information results by the

204
00:07:45,680 --> 00:07:47,919
existing resolvers

205
00:07:47,919 --> 00:07:50,639
and to bridge the schematic gap we

206
00:07:50,639 --> 00:07:51,199
designed

207
00:07:51,199 --> 00:07:54,319
a new etm string resolver to resolve

208
00:07:54,319 --> 00:07:56,160
instruction level information from

209
00:07:56,160 --> 00:07:58,720
internal string and then map them

210
00:07:58,720 --> 00:08:00,879
to the native level and the framework

211
00:08:00,879 --> 00:08:02,720
method level information

212
00:08:02,720 --> 00:08:04,960
by pressing the information from the

213
00:08:04,960 --> 00:08:06,800
loading system libraries

214
00:08:06,800 --> 00:08:12,160
and android frameworks o80 files

215
00:08:12,160 --> 00:08:14,160
we also come across two ramp two

216
00:08:14,160 --> 00:08:16,720
problems in fetching the memory data

217
00:08:16,720 --> 00:08:19,440
for identifying packing paper behaviors

218
00:08:19,440 --> 00:08:21,840
and unpacking pad apps

219
00:08:21,840 --> 00:08:26,000
first unlike self-hosted analysis tools

220
00:08:26,000 --> 00:08:29,120
or software based on packers that run a

221
00:08:29,120 --> 00:08:30,879
long ways the target process

222
00:08:30,879 --> 00:08:32,640
affects the memory data from visual

223
00:08:32,640 --> 00:08:34,159
memory of the process

224
00:08:34,159 --> 00:08:37,200
hyper works as an external debugger so

225
00:08:37,200 --> 00:08:38,640
it can just

226
00:08:38,640 --> 00:08:41,120
retrieve the memory data from physical

227
00:08:41,120 --> 00:08:43,039
memory

228
00:08:43,039 --> 00:08:45,200
second not all the data mapped in visual

229
00:08:45,200 --> 00:08:47,440
memory is loaded into physical memory

230
00:08:47,440 --> 00:08:50,160
by the operating system synchronously

231
00:08:50,160 --> 00:08:50,959
for example

232
00:08:50,959 --> 00:08:54,480
if a process uses a map to load a file

233
00:08:54,480 --> 00:08:57,519
into visual memory its content is just

234
00:08:57,519 --> 00:08:59,440
actually loaded into physical memory

235
00:08:59,440 --> 00:09:00,000
when

236
00:09:00,000 --> 00:09:03,279
being accessed and to solve the first

237
00:09:03,279 --> 00:09:03,839
problem

238
00:09:03,839 --> 00:09:06,399
we leverage mmu to get the physical

239
00:09:06,399 --> 00:09:07,040
address

240
00:09:07,040 --> 00:09:09,839
of the demanded data's visual address

241
00:09:09,839 --> 00:09:12,480
and to solve the second problem

242
00:09:12,480 --> 00:09:14,959
we insert additional instructions to

243
00:09:14,959 --> 00:09:17,279
force the operating system to completely

244
00:09:17,279 --> 00:09:19,040
load the demanded data such as the

245
00:09:19,040 --> 00:09:19,920
dynamic release

246
00:09:19,920 --> 00:09:22,240
text file into physical memory before

247
00:09:22,240 --> 00:09:24,959
hepa retrieves them

248
00:09:24,959 --> 00:09:26,880
currently hepa supports the

249
00:09:26,880 --> 00:09:29,120
identification of 17 packing behaviors

250
00:09:29,120 --> 00:09:30,720
in 10 categories

251
00:09:30,720 --> 00:09:32,959
and the table is the 10 calories of

252
00:09:32,959 --> 00:09:35,760
packing behaviors and their descriptions

253
00:09:35,760 --> 00:09:38,399
the top five categories in the table are

254
00:09:38,399 --> 00:09:40,000
anti-analysis behaviors

255
00:09:40,000 --> 00:09:42,880
which are employed by packers to prevent

256
00:09:42,880 --> 00:09:43,839
the pad apps

257
00:09:43,839 --> 00:09:45,839
from being analyzed and unpacked by

258
00:09:45,839 --> 00:09:47,279
packers

259
00:09:47,279 --> 00:09:50,720
for example packers adopt anti-debugging

260
00:09:50,720 --> 00:09:51,920
method to check

261
00:09:51,920 --> 00:09:55,200
the presence of debuggers such as ptrace

262
00:09:55,200 --> 00:09:59,200
to detect debugger based on packers

263
00:09:59,200 --> 00:10:01,839
moreover packers can examine the time

264
00:10:01,839 --> 00:10:03,760
delays incurred by dynamic analysis

265
00:10:03,760 --> 00:10:04,399
tools

266
00:10:04,399 --> 00:10:07,200
to detect dynamic instrumentation

267
00:10:07,200 --> 00:10:09,839
framework based on packers

268
00:10:09,839 --> 00:10:12,160
in addition some packers will hook

269
00:10:12,160 --> 00:10:14,240
debugging or unpacking related system

270
00:10:14,240 --> 00:10:15,440
library functions

271
00:10:15,440 --> 00:10:17,600
such as the functions related to android

272
00:10:17,600 --> 00:10:19,839
lockhead to make them invalid

273
00:10:19,839 --> 00:10:22,399
and thus it can prevent custom system

274
00:10:22,399 --> 00:10:23,839
based on packers

275
00:10:23,839 --> 00:10:25,839
which commonly call the system library

276
00:10:25,839 --> 00:10:29,920
functions to complete the unpacking task

277
00:10:30,000 --> 00:10:31,839
the remaining five categories in the

278
00:10:31,839 --> 00:10:34,560
table are bi-code hiding behaviors

279
00:10:34,560 --> 00:10:36,640
and packers use them to hide the

280
00:10:36,640 --> 00:10:38,720
original buy code of the pet ants

281
00:10:38,720 --> 00:10:40,640
and prevent them from being easily

282
00:10:40,640 --> 00:10:43,279
retrieved by unpackers

283
00:10:43,279 --> 00:10:46,720
for example packers commonly dynamically

284
00:10:46,720 --> 00:10:49,600
load the hidden text file into memory

285
00:10:49,600 --> 00:10:52,399
it's worth to note that among these 27

286
00:10:52,399 --> 00:10:53,440
packing behaviors

287
00:10:53,440 --> 00:10:55,680
17 of them are vertical by us with the

288
00:10:55,680 --> 00:10:56,880
help of pepper

289
00:10:56,880 --> 00:10:59,440
moreover we design a domain specific

290
00:10:59,440 --> 00:11:00,160
language

291
00:11:00,160 --> 00:11:02,320
for analysis to extend hepa for

292
00:11:02,320 --> 00:11:04,240
supporting the identification of new

293
00:11:04,240 --> 00:11:06,720
packing behaviors

294
00:11:06,720 --> 00:11:08,720
we have applied helper to analyzing the

295
00:11:08,720 --> 00:11:10,480
packing behaviors of 12 commercial

296
00:11:10,480 --> 00:11:11,279
packers

297
00:11:11,279 --> 00:11:12,800
including the free online packing

298
00:11:12,800 --> 00:11:14,399
services provided by

299
00:11:14,399 --> 00:11:18,240
ali by du chi ho banco and etc

300
00:11:18,240 --> 00:11:20,640
from these commercial packers all the 17

301
00:11:20,640 --> 00:11:22,880
packing behaviors are found

302
00:11:22,880 --> 00:11:25,279
we have also applied hepa to studying

303
00:11:25,279 --> 00:11:27,760
the packing behaviors of more than 24

304
00:11:27,760 --> 00:11:28,160
000

305
00:11:28,160 --> 00:11:32,399
legitimate apps among these apps 1710 of

306
00:11:32,399 --> 00:11:34,880
them had at least one packing behaviors

307
00:11:34,880 --> 00:11:38,079
and all the these packed legitimate apps

308
00:11:38,079 --> 00:11:41,680
had bike hiding behaviors additionally

309
00:11:41,680 --> 00:11:44,240
we have applied hepa to studying the

310
00:11:44,240 --> 00:11:45,839
packing behaviors of more than

311
00:11:45,839 --> 00:11:47,760
one thousand and seven hundred malicious

312
00:11:47,760 --> 00:11:49,120
apps and detecting

313
00:11:49,120 --> 00:11:50,560
two hundred and fourteen packs of

314
00:11:50,560 --> 00:11:53,120
malware besides having vital hiding

315
00:11:53,120 --> 00:11:53,839
heavies

316
00:11:53,839 --> 00:11:56,000
we discovered that more than three

317
00:11:56,000 --> 00:11:57,519
quarters of packed

318
00:11:57,519 --> 00:12:02,240
malware has anti-analysis behaviors

319
00:12:03,760 --> 00:12:06,320
the table presents the statistical

320
00:12:06,320 --> 00:12:07,040
information

321
00:12:07,040 --> 00:12:09,600
about the packing behaviors adopted by

322
00:12:09,600 --> 00:12:13,200
the identified path legitimate apps

323
00:12:13,200 --> 00:12:15,600
from the table we observed that dynamic

324
00:12:15,600 --> 00:12:17,600
design loading is the most commonly

325
00:12:17,600 --> 00:12:19,040
adopted by code

326
00:12:19,040 --> 00:12:22,240
hiding behaviors meanwhile

327
00:12:22,240 --> 00:12:24,480
anti-analysis methods are adopted by

328
00:12:24,480 --> 00:12:26,560
more than a course of type 20 gtm

329
00:12:26,560 --> 00:12:29,600
apps an amount of five previously

330
00:12:29,600 --> 00:12:31,600
introduced antennas behaviors

331
00:12:31,600 --> 00:12:33,760
time checking and city library cooking

332
00:12:33,760 --> 00:12:39,040
are the top two popular ones

333
00:12:39,040 --> 00:12:41,440
this table lists the statistical

334
00:12:41,440 --> 00:12:42,240
information

335
00:12:42,240 --> 00:12:44,639
about the packing behaviors adopted by

336
00:12:44,639 --> 00:12:45,839
the identified

337
00:12:45,839 --> 00:12:48,720
packed malicious apps and similarly

338
00:12:48,720 --> 00:12:51,279
dynamic desk file loading is the most

339
00:12:51,279 --> 00:12:55,519
employed by co-hiding method

340
00:12:55,760 --> 00:12:57,920
besides spiker hiding behaviors

341
00:12:57,920 --> 00:13:00,160
anti-analysis methods are also commonly

342
00:13:00,160 --> 00:13:01,200
implemented

343
00:13:01,200 --> 00:13:04,079
by pet malware and we discovered that

344
00:13:04,079 --> 00:13:05,279
more than three quarters

345
00:13:05,279 --> 00:13:07,360
of identified pad malware has

346
00:13:07,360 --> 00:13:09,920
anti-analysis behaviors

347
00:13:09,920 --> 00:13:12,320
among the anti-debugging and system

348
00:13:12,320 --> 00:13:13,120
library hooking

349
00:13:13,120 --> 00:13:17,839
are the most too commonly employed ones

350
00:13:19,040 --> 00:13:21,920
helper can also help the analysis of pet

351
00:13:21,920 --> 00:13:22,560
malware

352
00:13:22,560 --> 00:13:24,959
and we have applied helper to unpack the

353
00:13:24,959 --> 00:13:26,279
identified

354
00:13:26,279 --> 00:13:29,120
214 pattern malicious apps

355
00:13:29,120 --> 00:13:31,760
as shown in the table before unpacking

356
00:13:31,760 --> 00:13:33,680
of snow sensitive

357
00:13:33,680 --> 00:13:37,279
apis are found in 207

358
00:13:37,279 --> 00:13:40,959
also 214 pack malware which implies that

359
00:13:40,959 --> 00:13:42,639
pepsi malware can invade the

360
00:13:42,639 --> 00:13:45,199
anti-malware detection

361
00:13:45,199 --> 00:13:48,240
however from the recovered by code many

362
00:13:48,240 --> 00:13:48,880
sensitive

363
00:13:48,880 --> 00:13:52,240
apis are detected which indicates that

364
00:13:52,240 --> 00:13:54,079
hepa recovers the malicious code of

365
00:13:54,079 --> 00:13:56,560
malware therefore it is

366
00:13:56,560 --> 00:14:00,560
very useful to network analysis

367
00:14:01,680 --> 00:14:05,120
and last i will summary our work

368
00:14:05,120 --> 00:14:07,920
and in this work we propose the first

369
00:14:07,920 --> 00:14:09,760
hardware assisted approach

370
00:14:09,760 --> 00:14:12,720
to scrutinizing the packing behaviors

371
00:14:12,720 --> 00:14:13,360
and then

372
00:14:13,360 --> 00:14:17,120
unpacking the pad apps accordingly

373
00:14:17,120 --> 00:14:20,480
and we have developed a new unpacker

374
00:14:20,480 --> 00:14:22,959
named hepa after approaching several

375
00:14:22,959 --> 00:14:25,839
technical problems

376
00:14:26,240 --> 00:14:28,160
and we have conducted extensive

377
00:14:28,160 --> 00:14:30,320
experiments on hepa

378
00:14:30,320 --> 00:14:32,880
and results and the results show that

379
00:14:32,880 --> 00:14:33,760
hepa can

380
00:14:33,760 --> 00:14:36,480
effectively identify packing behaviors

381
00:14:36,480 --> 00:14:37,519
or packers

382
00:14:37,519 --> 00:14:39,920
and then recover the original buy code

383
00:14:39,920 --> 00:14:42,639
of pet apps

384
00:14:43,600 --> 00:14:51,199
and thanks for listening

