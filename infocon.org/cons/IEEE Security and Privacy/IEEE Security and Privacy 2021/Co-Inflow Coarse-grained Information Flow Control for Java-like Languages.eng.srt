1
00:00:00,400 --> 00:00:05,040
Hello everyone. My name is Jian Xiang. I'm
a Postdoc at Harvard University. Today I'm

2
00:00:05,040 --> 00:00:09,680
going to present Co-Inflow: a coarse-grained
information flow control for Java-like languages.

3
00:00:10,240 --> 00:00:13,280
This is a joint work with my supervisor: Professor
Stephen Chong.

4
00:00:14,400 --> 00:00:17,040
The broad motivation for 
this work is to investigate 

5
00:00:17,040 --> 00:00:19,360
how to add information flow control mechanisms

6
00:00:19,360 --> 00:00:25,360
to existing programs. Many existing programs
handle sensitive information. IFC mechanisms

7
00:00:25,360 --> 00:00:30,240
track the flow of sensitive data through a
system and stop programs from violating security

8
00:00:30,240 --> 00:00:36,480
policies. A lot of effort have been put to
IFC mechanisms. These mechanisms may be static

9
00:00:36,480 --> 00:00:41,760
or dynamic. Static mechanisms are often called
secure type systems, which use type checking

10
00:00:41,760 --> 00:00:47,199
to ensure no information leak of high security
contents to low security channels. The benefits

11
00:00:47,200 --> 00:00:53,120
of static mechanisms include reduced runtime
overhead and fewer runtime failures. On the

12
00:00:53,120 --> 00:00:59,040
contrary, dynamic methods track how information
propagate and enforce security policies at

13
00:00:59,040 --> 00:01:04,640
runtime. Dynamic mechanisms are often more
flexible in dealing with runtime data and

14
00:01:04,640 --> 00:01:11,600
policy change. From another point of view,
IFC mechanisms can be categorized as fine-grained

15
00:01:11,600 --> 00:01:16,880
or coarse-grained. Fine-grained mechanisms
associate security labels with variables and

16
00:01:16,880 --> 00:01:21,759
values, while coarse-grained mechanisms often
associate labels with computational containers,

17
00:01:22,320 --> 00:01:25,839
for example, a lexically or dynamically scoped
section of code.

18
00:01:27,360 --> 00:01:30,000
Compared with fine-grained 
mechanisms, coarse-grained 

19
00:01:30,000 --> 00:01:32,720
mechanisms are often less intrusive. They

20
00:01:32,720 --> 00:01:37,760
require less changes to existing programs
and pose relatively smaller run-time overhead,

21
00:01:37,760 --> 00:01:40,320
since fewer entities are tracked.

22
00:01:40,320 --> 00:01:45,279
We believe that coarse-grained dynamic IFC
is a good match for an imperative OO programming

23
00:01:45,280 --> 00:01:49,840
language such as Java.
Our Co-Inflow tool makes it easy to add IFC

24
00:01:49,840 --> 00:01:55,920
to existing Java programs, with good precision,
low user-effort, and low overhead. It does

25
00:01:55,920 --> 00:02:02,000
this by aligning coarse-grained IFC concepts
with existing Java abstractions: method calls

26
00:02:02,000 --> 00:02:07,520
are natural computational containers; objects
are natural data containers. As such, Java

27
00:02:07,520 --> 00:02:13,120
can be cleanly extended with coarse-grained
dynamic IFC without requiring significantly

28
00:02:13,120 --> 00:02:18,640
different design patterns, or excessive security
annotations, and without excessive performance

29
00:02:18,640 --> 00:02:19,140
overhead.

30
00:02:20,560 --> 00:02:26,720
Let’s briefly go over a few concepts in
Co-Inflow, we will present some examples later.

31
00:02:26,720 --> 00:02:33,680
First, we talk about computational containers
and context label. Coarse-grained IFC is based

32
00:02:33,680 --> 00:02:38,000
on the idea of computational containers, which
are contexts where computation happens. 

33
00:02:38,640 --> 00:02:42,799
In Co-Inflow, every method invocation creates
a new computational container,  

34
00:02:42,800 --> 00:02:45,600
so every stack frame is a 
container and has a context label.

35
00:02:45,600 --> 00:02:48,320
A method call will add a container on top 

36
00:02:48,320 --> 00:02:54,239
of the current stack of containers, and a 
container is destroyed when a method call returns.

37
00:02:55,520 --> 00:03:01,120
Every computational container has a context label:
it is a security label that is an upper bound on  

38
00:03:01,120 --> 00:03:05,840
all information that has flowed into the 
container. (Context label is also called  

39
00:03:05,840 --> 00:03:11,920
a floating label, a current label, or a program 
counter (pc) in related work.) As more information  

40
00:03:11,920 --> 00:03:17,839
enters the container, the context label is 
increased in order to remain an upper bound.

41
00:03:18,560 --> 00:03:24,640
The third concept is field label, designed for 
objects. Every object has a field label that  

42
00:03:24,640 --> 00:03:30,880
is an upper bound of the information stored in 
its fields. If an object’s field label is l,  

43
00:03:30,880 --> 00:03:36,640
when data is read from a field of the object, 
it is treated as information with label l.  

44
00:03:37,600 --> 00:03:44,239
Field labels of objects do not automatically 
float upwards. In Co-Inflow, programmers can  

45
00:03:44,240 --> 00:03:49,600
use a special operator to raise the field label 
of an object under a certain security condition.

46
00:03:51,280 --> 00:03:57,200
The fourth concept is labeled values. A labeled
value is a pair of a value v and a security  

47
00:03:57,200 --> 00:04:01,280
label l that is an upper bound on 
the information on which v depends.  

48
00:04:02,160 --> 00:04:07,359
Labeled values are used often in 
dynamic IFC mechanisms, such as LIO. 

49
00:04:07,920 --> 00:04:13,530
Intuitively, a labeled value can be passed around 
by a container without the container’s context  

50
00:04:13,531 --> 00:04:18,480
label being raised so long as the container 
does not examine or compute on the value v.

51
00:04:19,200 --> 00:04:24,000
A container can unlabel a labeled value, 
which raises the context label to at 

52
00:04:24,000 --> 00:04:27,840
least l and allows the container 
to compute with value v.

53
00:04:30,400 --> 00:04:33,520
Another key concept is opaque labeled values.  

54
00:04:33,520 --> 00:04:38,880
Opaque labeled values are special labeled values 
which Co-Inflow implicitly, automatically,  

55
00:04:38,880 --> 00:04:44,320
and securely inserts into programs to relieve 
programmers from their annotation burden.

56
00:04:46,880 --> 00:04:52,640
Now, let’s see how some of these concepts work 
with an example. Please note that we mainly use  

57
00:04:52,640 --> 00:04:56,800
this example to show how computational
container and context label work.  

58
00:04:57,520 --> 00:05:02,320
The example doesn’t demonstrate how 
Co-Inflow works, we will get to it later.

59
00:05:03,600 --> 00:05:07,920
This code snippet on the left 
is a main method that retrieves,  

60
00:05:07,920 --> 00:05:12,960
formats, and updates Alice and Bob’s 
phone numbers. A class named Person is  

61
00:05:12,960 --> 00:05:18,799
used here. It has a field called phoneNum 
and getter/setter methods for the field. A 

62
00:05:18,800 --> 00:05:22,800
static method formatNum() is used to 
format Alice and Bob’s phone numbers.

63
00:05:23,600 --> 00:05:27,440
As shown on the right, the execution of 
the program starts with a computational  

64
00:05:27,440 --> 00:05:33,120
container for the main method. Two objects: 
alice and bob are used in this example.

65
00:05:34,720 --> 00:05:38,720
Assume that initially the context 
label of the main container is bottom,  

66
00:05:38,720 --> 00:05:41,040
which is the most permissive security label,  

67
00:05:41,680 --> 00:05:47,840
the field label of object alice is L_Alice, 
and the field label of object bob is L_Bob.

68
00:05:49,120 --> 00:05:53,680
The method call alice.getPhoneNum() 
creates a new computational container,  

69
00:05:53,680 --> 00:05:57,600
and its initial context label is 
also bottom, the same as the caller.

70
00:05:58,720 --> 00:06:01,200
Now we are inside the callee’s container. 

71
00:06:01,200 --> 00:06:04,800
The left side of the screen shows 
the definition of class Person,  

72
00:06:04,800 --> 00:06:10,000
including the body of getPhoneNum().
The method accesses the field of object alice,

73
00:06:10,880 --> 00:06:16,560
Reading a field of object alice means information 
with label L_Alice flows into the container.

74
00:06:17,120 --> 00:06:21,680
The context label increases to 
L_Alice to maintain an upper bound.

75
00:06:22,480 --> 00:06:26,960
Then, the callee container finishes 
execution and returns to the caller.

76
00:06:28,240 --> 00:06:33,360
After the callee finishes, its return 
value flows back to the caller container.

77
00:06:33,360 --> 00:06:38,480
Then its context label increases from bottom 
to L_Alice to maintain an upper bound.

78
00:06:39,680 --> 00:06:44,160
Then, the method formatNum() is called, 
which creates a new computational container.  

79
00:06:44,960 --> 00:06:49,120
Its initial context label is 
L_Alice, the same as the caller,  

80
00:06:49,120 --> 00:06:52,320
since information flows from 
the caller to the callee.

81
00:06:53,520 --> 00:06:56,400
Inside the callee container, 
no new information is read.

82
00:06:57,120 --> 00:07:00,160
Its context label stays at 
L_Alice when it returns.

83
00:07:01,440 --> 00:07:06,560
Return to the caller side, the callee 
returns with context label of L_Alice.

84
00:07:06,560 --> 00:07:09,120
The caller’s context label 
is already an upper bound.

85
00:07:10,240 --> 00:07:14,800
Continue execution, alice.setPhoneNum() 
is called to update the phone number,

86
00:07:15,440 --> 00:07:19,280
it creates a new container 
with context label L_Alice .

87
00:07:19,280 --> 00:07:24,239
Inside the callee’s container. The method call 
tries to store the newly formatted phone number  

88
00:07:24,240 --> 00:07:29,200
into a field of object alice.
When data is stored into a field,  

89
00:07:29,200 --> 00:07:34,400
the object’s field label must be an 
upper bound of the context label. Here,  

90
00:07:34,400 --> 00:07:40,799
the field label of object alice is L_Alice. The context label is also L_Alice.

91
00:07:40,800 --> 00:07:44,000
The field write succeeds, 
and the method call returns.

92
00:07:45,040 --> 00:07:46,720
Return to the caller side,  

93
00:07:46,720 --> 00:07:52,080
no new information flows in, so the caller’s 
context label stays the same after the call.

94
00:07:53,120 --> 00:07:58,160
Now we format bob’s phone number. Similar 
to alice.getPhoneNum(), the method 

95
00:07:58,160 --> 00:08:02,720
call bob.getPhoneNum() 
accesses data with label L_Bob. 

96
00:08:05,120 --> 00:08:10,480
So the context label of the callee is the 
join of L_Alice and L_Bob when it returns.

97
00:08:11,600 --> 00:08:13,120
When the callee returns,  

98
00:08:13,120 --> 00:08:19,280
the caller’s context label increases to the join 
of L_Alice and L_Bob to maintain an upper bound.

99
00:08:20,080 --> 00:08:23,359
The method formatNum() is called 
again to format Bob’s phone number.

100
00:08:23,920 --> 00:08:28,800
The callee doesn’t read new information, so 
it returns with context label of the join  

101
00:08:28,800 --> 00:08:33,440
of L_Alice and L_Bob. The caller’s 
context label is already an upper bound.

102
00:08:34,400 --> 00:08:39,840
Next, the call bob.setPhoneNum() is 
invoked to update Bob’s phone number.

103
00:08:40,720 --> 00:08:45,520
Inside the callee container, the method 
call tries to update a field of object bob.  

104
00:08:46,320 --> 00:08:50,960
Remember that the field label of 
an object doesn't float upwards,  

105
00:08:50,960 --> 00:08:57,440
so because the context label: the join of 
L_Alice and L_Bob does not flow to L_Bob,  

106
00:08:58,000 --> 00:09:03,520
the field write failed, to indicate a possible 
security violation, and the program halts.

107
00:09:04,480 --> 00:09:09,920
This example demonstrates how computational 
container and context label work. Context labels  

108
00:09:09,920 --> 00:09:13,120
can soundly track and control the flow
of information.

109
00:09:13,120 --> 00:09:19,680
However, in some cases it is imprecise. That 
is what happened here: the data written to the  

110
00:09:19,680 --> 00:09:24,880
field of object bob depends only on information 
with label L_Bob, but the context label was the  

111
00:09:24,880 --> 00:09:29,360
join of L_Alice and L_Bob before
updating Bob’s phone number.  

112
00:09:29,360 --> 00:09:32,480
This program unnecessarily halts 
due to such imprecise tracking.

113
00:09:33,840 --> 00:09:37,840
The precision of coarse-grained information-flow 
tracking can be improved through the use of  

114
00:09:37,840 --> 00:09:42,720
labeled values. As mentioned, a labeled value 
is a pair of a value and a security label.

115
00:09:43,280 --> 00:09:46,319
In Co-Inflow, the class Labeled 
implements labeled values

116
00:09:46,880 --> 00:09:50,400
Expression toLabeled(e; l) creates 
a new computational container  

117
00:09:50,400 --> 00:09:55,120
to evaluate expression e and protects its 
result with label value l, allowing the 

118
00:09:55,120 --> 00:10:00,400
programmer to control unnecessary increase of the 
context label, known as the “label creep” problem.

119
00:10:01,200 --> 00:10:05,360
The operator fieldLabelOf() retrieves 
the field label of the argument object.

120
00:10:06,480 --> 00:10:10,640
This example shows a modified version 
of previous example by using labeled  

121
00:10:10,640 --> 00:10:15,120
values. Let’s see how it works.
Here, we construct a labeled value  

122
00:10:15,120 --> 00:10:20,640
using the toLabeled operator for the method call 
getPhoneNum() and the field label of object alice.

123
00:10:21,440 --> 00:10:27,760
The callee container accesses Alice’s phone number 
and its context label is L_Alice when it returns.

124
00:10:28,720 --> 00:10:32,400
The toLabeled operator packs the 
return value into a labeled value,  

125
00:10:32,400 --> 00:10:35,040
and protects it with the label of L_Alice.

126
00:10:36,000 --> 00:10:42,080
The context label of the caller doesn’t need to be 
increased, since it has not read the information.

127
00:10:43,200 --> 00:10:47,520
Then, we use toLabeled operator to run 
the method call formatNum()  

128
00:10:47,520 --> 00:10:49,600
and send the labeled value to the callee.

129
00:10:52,000 --> 00:10:56,080
Inside the callee container, we access 
the labeled value with another primitive 

130
00:10:56,080 --> 00:11:00,880
operator unlabel(). It reads the 
value inside a labeled value, and  

131
00:11:00,880 --> 00:11:05,280
raises the context label to at least 
the label of the labeled value.

132
00:11:06,160 --> 00:11:08,000
In this case, L_Alice.

133
00:11:08,560 --> 00:11:12,479
The rest of the method body doesn’t read 
new information until the method returns.

134
00:11:13,680 --> 00:11:19,760
Return to the caller side, the return value of 
formatNum() is again packed into a labeled value,  

135
00:11:19,760 --> 00:11:25,040
and the context label of the main container 
doesn’t need to be increased, and stays at bottom.

136
00:11:25,680 --> 00:11:30,880
The same situation applies for the subsequent 
calls, the context label of the main container  

137
00:11:30,880 --> 00:11:33,200
remains bottom throughout the execution,

138
00:11:34,480 --> 00:11:38,800
Now, let’s look again at what happens 
in the call bob.setPhoneNum(b1).

139
00:11:39,440 --> 00:11:41,840
A new container is created for the call,  

140
00:11:41,840 --> 00:11:46,800
and the labeled value b1 is passed 
to the callee. Its label is L_Bob.

141
00:11:48,000 --> 00:11:52,640
Inside the callee, the input labeled 
value is opened by the unlabel operator,

142
00:11:53,360 --> 00:11:58,000
Context label increases to L_Bob, which 
is the label of the input labeled value.

143
00:11:59,040 --> 00:12:04,480
Then, the field write check if context label 
flows to the field label of object bob.

144
00:12:04,480 --> 00:12:08,000
This time, it succeeds. The 
program continues execution.

145
00:12:08,960 --> 00:12:13,600
As shown by this example, labeled 
values enabled more precise tracking  

146
00:12:13,600 --> 00:12:15,360
and control of information flow.

147
00:12:16,400 --> 00:12:20,319
The use of labeled values can improve precision,
however, there are issues.

148
00:12:20,960 --> 00:12:24,960
First, it requires significant programmer
effort to add toLabeled annotations.

149
00:12:25,840 --> 00:12:30,400
Second, it reduces readability.
Third, it may require changing many method

150
00:12:30,400 --> 00:12:32,880
signatures to pass and return labeled values.

151
00:12:34,640 --> 00:12:39,600
To address these problems, the Co-Inflow runtime
essentially inserts toLabeled and unlabel

152
00:12:39,600 --> 00:12:42,560
annotations automatically, without burdening
the programmers.

153
00:12:43,120 --> 00:12:47,600
Intuitively, Co-Inflow’s vision is that,
the programs look like the left one,

154
00:12:47,600 --> 00:12:49,600
but they execute as the right one.

155
00:12:49,600 --> 00:12:55,360
So the program on the left is Java code, but
when treated as Co-Inflow program, the implicit

156
00:12:55,360 --> 00:12:59,440
insertion of labeled values ensures that the
runtime behavior is almost the same as the

157
00:12:59,440 --> 00:13:04,560
program on the right, but without the need
for programmer annotations or changed signatures.

158
00:13:04,560 --> 00:13:08,400
The implicitly added labeled values are called
opaque labeled values.

159
00:13:09,200 --> 00:13:12,320
There are differences between opaque labeled values
and labeled values.

160
00:13:13,920 --> 00:13:19,920
In particular, for every computational container,
Co-Inflow creates an opaque labeled value

161
00:13:19,920 --> 00:13:25,040
for its result. The opaque labeled values
are then dynamically tracked in subsequent

162
00:13:25,040 --> 00:13:30,640
computations. Typically, in coarse-grained
IFC languages such as LIO, the programmer

163
00:13:30,640 --> 00:13:37,280
must supply a label to toLabeled operator.
Co-Inflow removes this annotation burden by

164
00:13:37,280 --> 00:13:40,720
using the context label as the label for opaque
labeled values.

165
00:13:41,520 --> 00:13:46,560
The label of an opaque labeled value may itself
reveal information. To prevent this covert

166
00:13:46,560 --> 00:13:52,000
channel, Co-Inflow does not allow code to
inspect labels of opaque labeled values (which

167
00:13:52,000 --> 00:13:53,280
is why we call them opaque).

168
00:13:54,320 --> 00:13:59,120
In addition to method calls, Co-Inflow implicitly
creates new computational containers for field

169
00:13:59,120 --> 00:14:05,440
reads. That is, every field read is executed
in its own container, which helps prevent

170
00:14:05,440 --> 00:14:07,760
unnecessary increase of context labels.

171
00:14:08,560 --> 00:14:11,359
We summarize the main results produced by
this work.

172
00:14:11,360 --> 00:14:16,080
On the theory side, we model the essential
parts of Co-Inflow with a calculus and prove

173
00:14:16,080 --> 00:14:18,800
that it satisfies security 
property: timing-insensitive 

174
00:14:18,800 --> 00:14:21,599
non-interference. The 
calculus and non-interference

175
00:14:21,600 --> 00:14:24,000
proof are mechanized in Coq.

176
00:14:24,560 --> 00:14:28,800
On the practical side, we implement a Co-Inflow
prototype which supports most features of

177
00:14:28,800 --> 00:14:29,920
Java 8.

178
00:14:29,920 --> 00:14:34,479
To evaluate the feasibility and efficacy of
Co-Inflow, we use the prototype to conduct

179
00:14:34,480 --> 00:14:39,200
several case studies, and the results indicate
that Co-Inflow is able to enforce information

180
00:14:39,200 --> 00:14:44,960
flow policies in existing Java applications
with very few annotations and reasonable overhead.

181
00:14:45,520 --> 00:14:50,880
We also evaluate the precision of Co-Inflow
with an information flow benchmark. The results

182
00:14:50,880 --> 00:14:56,240
show that Co-Inflow is as precise as other
tools, and its precision can be improved with

183
00:14:56,240 --> 00:14:57,040
more annotations.

184
00:14:57,600 --> 00:15:02,160
One limitation of Co-Inflow is that we cannot
precisely track information flow caused by

185
00:15:02,160 --> 00:15:04,400
exceptions. We leave that to future work.

186
00:15:04,960 --> 00:15:10,560
To conclude, we introduce Co-Inflow, a language
that demonstrates coarse-grained dynamic IFC

187
00:15:10,560 --> 00:15:13,839
is a good match for imperative OO languages
such as Java.

188
00:15:14,560 --> 00:15:19,359
That’s all for the talk. Due to time limits
of the presentation, we gloss over a lot of

189
00:15:19,360 --> 00:15:24,160
details. Please find out more information in our
paper, and we are happy to chat offline.

