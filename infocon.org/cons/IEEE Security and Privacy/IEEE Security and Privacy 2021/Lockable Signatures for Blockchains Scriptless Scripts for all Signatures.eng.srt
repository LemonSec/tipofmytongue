1
00:00:00,340 --> 00:00:01,340
Welcome everyone.

2
00:00:01,340 --> 00:00:05,310
I am Sri Aravinda Krishnan Thyagarajan and
I will be presenting our work on Lockable

3
00:00:05,310 --> 00:00:08,500
Signatures for Blockchains: Scriptless scripts
for all signatures.

4
00:00:08,500 --> 00:00:12,280
Its a joint work with Giulio Malavolta

5
00:00:12,280 --> 00:00:15,639
Consider the case where Alice wants to buy
a TV from Bob.

6
00:00:15,639 --> 00:00:17,860
The cost is 1 Bitcoin.

7
00:00:17,860 --> 00:00:21,990
Alice makes a cryptocurrency payment by sending
a signed transaction that pays Bob

8
00:00:21,990 --> 00:00:25,650
, to be posted on the blockchain.

9
00:00:25,650 --> 00:00:31,209
Consider another scenario where Alice wants
to use some service from Bob and Bob requires

10
00:00:31,210 --> 00:00:36,760
payment of 1 bitcoin for every minute that
Alice uses the service.

11
00:00:36,760 --> 00:00:41,050
In a naive way, Alice will post a transaction
every minute on the blockchain.

12
00:00:41,050 --> 00:00:47,230
But this is bad for scalability, as the transaction
processing power of the blockchain is limited.

13
00:00:47,230 --> 00:00:53,078
Payment channels were proposed as a solution
to this scalability problem.

14
00:00:53,079 --> 00:00:57,010
Alice and Bob open a channel, which is a shared
public key.

15
00:00:57,010 --> 00:01:02,640
The channel has a capacity of 30 coins and
is set to expire at time T. This means that

16
00:01:02,640 --> 00:01:09,030
till time T, consent from both Alice and Bob
is required to spend the coins from this channel.

17
00:01:09,030 --> 00:01:12,180
After time T, Alice can herself spend the
coins from the channel.

18
00:01:12,180 --> 00:01:15,520
She does not require Bob's consent anymore.

19
00:01:15,520 --> 00:01:20,479
Alice can make payments from the channel to
Bob, but none of these payments are yet posted

20
00:01:20,479 --> 00:01:21,939
on chain.

21
00:01:21,939 --> 00:01:27,759
Eventually, once Alice stops using the service,
Bob can post any of the payment transaction

22
00:01:27,760 --> 00:01:35,140
on the chain after generating a valid signature
on it, before time T. This way, in this example,

23
00:01:35,140 --> 00:01:40,259
Alice can make up to 30 payments to Bob with
one additional coin in successive payments.

24
00:01:40,259 --> 00:01:46,210
Now Consider another case where Alice wants
to buy a TV from Bob.

25
00:01:46,210 --> 00:01:51,029
Bob wants one ether in payment, but Alice
only has a bitcoin.

26
00:01:51,029 --> 00:01:53,988
In such a cross currency payment scenario,

27
00:01:53,989 --> 00:01:59,529
if Carol and Dave show up, where Carol wants
a bitcoin and is ready to give a litecoin,

28
00:01:59,529 --> 00:02:02,990
and Dave wants a litecoin and is ready to
give a ether,

29
00:02:02,990 --> 00:02:09,609
a chain of cross currency payments helps Alice
pay Bob 1 ether

30
00:02:09,610 --> 00:02:14,810
This kind of cross currency payment is facilitated
if users have payment channels between them.

31
00:02:14,810 --> 00:02:19,459
A network of payment channels that we have
in this case is referred to as payment channel

32
00:02:19,459 --> 00:02:23,129
network or PCN for short.

33
00:02:23,129 --> 00:02:29,970
Such PCN protocols are possible using special
scripts like Hash timelock contracts or HTLC,

34
00:02:29,970 --> 00:02:34,040
and if you don't want to use special scripts,
you have other techniques like Scriptless

35
00:02:34,040 --> 00:02:35,040
scripts

36
00:02:35,040 --> 00:02:41,489
However, both approaches have a common template
as to how the payments are routed through.

37
00:02:41,490 --> 00:02:45,599
Parties set up the payment transactions that
are not yet valid to be posted on chain.

38
00:02:45,599 --> 00:02:48,488
And there is a secret key available with Alice.

39
00:02:48,489 --> 00:02:50,459
She gives this key to Bob

40
00:02:50,459 --> 00:02:54,469
Using which Bob can validate his payment from
Dave

41
00:02:54,469 --> 00:03:00,570
This payment validation by Bob itself reveals
the key to Dave, who validates the payment

42
00:03:00,570 --> 00:03:01,570
from Carol

43
00:03:01,570 --> 00:03:05,890
The same happens with the payment from Alice
to carol.

44
00:03:05,890 --> 00:03:10,719
The current state of affairs is such that
the HTLC approach is not compatible with currencies

45
00:03:10,719 --> 00:03:13,840
that do not have special scripting capabilities.

46
00:03:13,840 --> 00:03:17,990
On the other hand, for the Scriptless script
approach, we only know of protocols that are

47
00:03:17,990 --> 00:03:23,260
compatible with currencies that use Schnorr-like
signature schemes for authentication.

48
00:03:23,260 --> 00:03:28,170
Both these factors exclude a large fraction
of existing and future currencies because

49
00:03:28,170 --> 00:03:31,018
they do not meet the script requirements.

50
00:03:31,019 --> 00:03:35,090
That is, either they do not support HTLCs,
or they use a different signature scheme to

51
00:03:35,090 --> 00:03:40,709
authenticate transactions, like BLS, hash
based signature schemes or any other scheme

52
00:03:40,709 --> 00:03:44,639
that does not resemble the schnorr signature
scheme.

53
00:03:44,639 --> 00:03:46,540
We address this problem in this work.

54
00:03:46,540 --> 00:03:52,390
We propose the first generic PCN protocol
that has state of the art privacy guarantees,

55
00:03:52,390 --> 00:03:57,809
does not require special scripts, and is compatible
with all signature schemes.

56
00:03:57,810 --> 00:04:03,049
We also give a highly efficient protocol tailored
for the case of BLS signatures, that are of

57
00:04:03,049 --> 00:04:06,680
immense interest in the cryptocurrency space.

58
00:04:06,680 --> 00:04:12,989
As a consequence, we can have cross-currency
payments across all currencies as long as

59
00:04:12,989 --> 00:04:17,899
they have the ability to verify signatures
on transactions and can verify time stamps

60
00:04:17,899 --> 00:04:18,899
on transactions.

61
00:04:18,899 --> 00:04:24,590
For example, Payments can be made across currencies,
where a currency that supports BLS signatures,

62
00:04:24,590 --> 00:04:30,060
a currency that uses a post quantum secure
signature scheme and a currency that uses

63
00:04:30,060 --> 00:04:32,620
hash based signatures.

64
00:04:32,620 --> 00:04:37,650
This means when you develop a new currency,
do not worry about including special scripts

65
00:04:37,650 --> 00:04:39,909
just to support payment channel networks.

66
00:04:39,910 --> 00:04:43,650
Our protocol will work for your currency as
well.

67
00:04:43,650 --> 00:04:47,950
In the rest of the presentation, I will first
talk about why existing approaches fail to

68
00:04:47,950 --> 00:04:53,060
extend PCN for all signatures, followed by
the techniques that we introduce to bridge

69
00:04:53,060 --> 00:04:54,060
this gap.

70
00:04:54,060 --> 00:04:58,940
Finally, I give an overview of our generic
and BLS-based PCN protocol.

71
00:04:58,940 --> 00:05:06,050
We first see why the Scriptless script PCN
protocol from Malavolta et al., does not extend

72
00:05:06,050 --> 00:05:09,060
to signature schemes other than schnorr-like
signatures.

73
00:05:09,060 --> 00:05:13,480
Typically these approaches have the signatures
on the payment transactions to be blinded

74
00:05:13,480 --> 00:05:16,120
with some randomness from the sender.

75
00:05:16,120 --> 00:05:21,699
The payments cannot be validated yet, as these
blinded signatures are not valid signatures.

76
00:05:21,699 --> 00:05:25,650
Alice who has the unblinding key, gives it
to Bob

77
00:05:25,650 --> 00:05:29,690
Who can unblind his signature and validate
the payment from Dave

78
00:05:29,690 --> 00:05:33,599
Using this information Dave can unblind his
signature, and

79
00:05:33,599 --> 00:05:36,560
Carol can do the same as well.

80
00:05:36,560 --> 00:05:41,300
A crucial factor why this works is because
Alice can input some randomness into each

81
00:05:41,300 --> 00:05:43,310
of these blinded signatures.

82
00:05:43,310 --> 00:05:48,970
However, in some cases like BLS signatures
where the signatures are unique and there

83
00:05:48,970 --> 00:05:52,520
is no randomness, without Alice'АЩs initiation,

84
00:05:52,520 --> 00:05:56,849
Carol and Dave can themselves unblind their
payment signature

85
00:05:56,849 --> 00:06:01,750
And Carol as a result can do so for the payment
from Alice.

86
00:06:01,750 --> 00:06:06,349
This effectively means that Alice has paid
to Dave, and not Bob.

87
00:06:06,349 --> 00:06:10,000
In other words, the payment does not reach
Bob.

88
00:06:10,000 --> 00:06:13,060
This gives us a clue as to what the missing
pieces are.

89
00:06:13,060 --> 00:06:19,800
We need a generic blinding-unblinding procedure
that does not depend on the structure of the

90
00:06:19,800 --> 00:06:21,120
signature schemes.

91
00:06:21,120 --> 00:06:27,050
We also need a way for Alice to control each
unblinding in the payment path so that intermediate

92
00:06:27,050 --> 00:06:31,090
parties cannot trigger payment release by
themselves.

93
00:06:31,090 --> 00:06:35,060
We address the first issue at the cryptographic
layer and the second one at the transaction

94
00:06:35,060 --> 00:06:36,060
layer.

95
00:06:36,060 --> 00:06:41,780
At the cryptographic layer, we introduce a
new tool that we call lockable signatures.

96
00:06:41,780 --> 00:06:43,650
We describe this tool now.

97
00:06:43,650 --> 00:06:46,030
We have two message-key tuple.

98
00:06:46,030 --> 00:06:49,750
Both the tuples are input into a lock algorithm,
that outputs a lock.

99
00:06:49,750 --> 00:06:54,810
A signature sigma tilde that is valid on the
message m tilde

100
00:06:54,810 --> 00:07:00,440
And the lock can be input into the unlock
algorithm to output a signature sigma that

101
00:07:00,440 --> 00:07:01,689
is valid on the message m.

102
00:07:01,689 --> 00:07:08,750
We refer to sigma tilde as the locking signature
and to sigma as the locked signature.

103
00:07:08,750 --> 00:07:10,889
In terms of security, we want hiding.

104
00:07:10,889 --> 00:07:15,979
This property intuitively says that the lock
reveals no information about either the locking

105
00:07:15,979 --> 00:07:18,070
or the locked signature.

106
00:07:18,070 --> 00:07:22,979
This is captured via a simulation style definition
as shown here

107
00:07:22,979 --> 00:07:28,599
The other security notion we want from lockable
signatures is that of unlockability.

108
00:07:28,599 --> 00:07:34,919
This property says that an adversary cannot
output a correctly generated lock and a valid

109
00:07:34,919 --> 00:07:36,930
locking signature, such that

110
00:07:36,930 --> 00:07:41,120
The unlock procedure outputs an invalid locked
signature.

111
00:07:41,120 --> 00:07:48,830
We show here the generic construction of lockable
signatures based on any signature scheme.

112
00:07:48,830 --> 00:07:54,109
The idea is simply to one-time pad the locked
signature with the hash of the locking signature

113
00:07:54,110 --> 00:07:55,969
as the key.

114
00:07:55,969 --> 00:08:00,919
The unlock procedure is similar to the decryption
of the one-time pad.

115
00:08:00,919 --> 00:08:05,969
The lock in case of BLS signatures is the
aggregate of the locking and the locked signature.

116
00:08:05,969 --> 00:08:12,150
We can do this by exploiting the structure
of the signature scheme as shown here.

117
00:08:12,150 --> 00:08:17,258
The unlocking is simply the de-aggregation
of the two signatures, if you know the locking

118
00:08:17,259 --> 00:08:18,259
signature.

119
00:08:18,259 --> 00:08:23,979
We have weak hiding, which is the search variant
of the hiding property of lockable signatures.

120
00:08:23,979 --> 00:08:28,258
This construction satisfies weak hiding following
from the difficulty of extracting one of the

121
00:08:28,259 --> 00:08:33,210
aggregated signatures only given the aggregate
signature.

122
00:08:33,210 --> 00:08:38,360
The recent impossibility result regarding
BLS signature and PCN is about building a

123
00:08:38,360 --> 00:08:41,840
primitive where we want to generate the lock
without knowing the witness.

124
00:08:41,840 --> 00:08:48,010
We are able to bypass this impossibility result,
because lockable signatures are a weaker primitive

125
00:08:48,010 --> 00:08:52,189
where to generate locks, you need the witness
which here are the secret keys

126
00:08:52,190 --> 00:08:58,331
We deal with the issue of sender control in
unblinding, at the transaction layer, with

127
00:08:58,331 --> 00:09:02,090
a new technique that we call local 3-party
channel.

128
00:09:02,090 --> 00:09:06,040
Consider the payment channel between Carol
and Dave.

129
00:09:06,040 --> 00:09:09,980
They transform their channel into a 3-party
channel in the following way.

130
00:09:09,980 --> 00:09:15,030
They generate a setup transaction, that simply
transfers the coins from this channel to another

131
00:09:15,030 --> 00:09:19,600
channel that is additionally controlled by
Alice, who in our case is the sender.

132
00:09:19,600 --> 00:09:25,560
To spend from this new channel, Carol and
Dave additionally require consent from Alice,

133
00:09:25,560 --> 00:09:28,439
therefore the 3-party channel.

134
00:09:28,440 --> 00:09:34,130
Importantly, the setup transaction is kept
local, and not posted on chain.

135
00:09:34,130 --> 00:09:39,270
With these tools, our generic PCN protocol
proceeds in three phases.

136
00:09:39,270 --> 00:09:41,300
StartIng with a setup phase,

137
00:09:41,300 --> 00:09:47,280
Where parties establish the local 3-party
channels with Alice being the third party.

138
00:09:47,280 --> 00:09:50,520
We now only work with the 3-party channels

139
00:09:50,520 --> 00:09:58,120
We then have the payment lock phase, parties
set up payment transactions that spend from

140
00:09:58,120 --> 00:10:00,950
the corresponding 3-party channels.

141
00:10:00,950 --> 00:10:01,960
After this,

142
00:10:01,960 --> 00:10:04,831
Payment locks are established, first between
Alice and Carol.

143
00:10:04,831 --> 00:10:08,350
Carol is the user who has the lock.

144
00:10:08,350 --> 00:10:13,010
Followed by Carol and Dave, with Dave having
the lock

145
00:10:13,010 --> 00:10:16,430
And then Dave and Bob, with Bob having the
lock.

146
00:10:16,430 --> 00:10:20,640
All the locks are generated via general purpose
MPC protocols.

147
00:10:20,640 --> 00:10:22,140
More precisely,

148
00:10:22,140 --> 00:10:28,220
Alice, Carol and Dave participate in a MPC
protocol to generate the first lock that Carol

149
00:10:28,220 --> 00:10:29,980
receives.

150
00:10:29,980 --> 00:10:35,760
Followed by another MPC between Alice, Carol,
Dave and Bob to generate the lock that Dave

151
00:10:35,760 --> 00:10:36,760
receives.

152
00:10:36,760 --> 00:10:43,950
Finally, Alice, Dave and Bob run a MPC to
generate the lock that Bob receives

153
00:10:43,950 --> 00:10:48,870
For doing this, we only require MPC protocols
that are secure with aborts.

154
00:10:48,870 --> 00:10:54,870
We do not require fairness or guaranteed output
delivery because if the adversary aborts at

155
00:10:54,870 --> 00:11:02,260
any point of the payment lock phase, the honest
parties can simply refuse to participate further.

156
00:11:02,260 --> 00:11:05,250
This at best results in the lock phase to
fail.

157
00:11:05,250 --> 00:11:10,190
But the adversary does not get any advantage
in stealing the coins of the honest parties

158
00:11:10,190 --> 00:11:12,730
in the path.

159
00:11:12,730 --> 00:11:18,260
And in terms of functionality, the MPC protocols
must also internally check the consistency

160
00:11:18,260 --> 00:11:22,540
between the locking and the locked signature
of consecutive locks.

161
00:11:22,540 --> 00:11:26,319
This will be crucial for the next phase.

162
00:11:26,320 --> 00:11:28,230
Alice initiates the payment release,

163
00:11:28,230 --> 00:11:33,540
by generating the signature sigma-star with
Bob'АЩs help

164
00:11:33,540 --> 00:11:34,540
Now,

165
00:11:34,540 --> 00:11:40,490
Bob can unlock the valid payment signature
on the payment,

166
00:11:40,490 --> 00:11:41,820
And so does Dave,

167
00:11:41,820 --> 00:11:44,130
Followed by Carol.

168
00:11:44,130 --> 00:11:45,800
The payment is thus concluded.

169
00:11:45,800 --> 00:11:51,630
To finalize the payment on-chain, parties
post the setup transaction along with the

170
00:11:51,630 --> 00:11:53,040
payment transaction.

171
00:11:53,040 --> 00:11:57,849
Recall that the setup transaction was kept
locally until now.

172
00:11:57,850 --> 00:12:02,250
Security of the protocol intuitively follows
from the security of the lockable signatures.

173
00:12:02,250 --> 00:12:05,770
On a high level, there are two attack scenarios

174
00:12:05,770 --> 00:12:08,860
Carol can get paid before she pays Dave.

175
00:12:08,860 --> 00:12:12,060
This is prevented by the hiding property of
the locks

176
00:12:12,060 --> 00:12:16,640
The second scenario is that Carol pays Dave,
but cannot get paid from Alice.

177
00:12:16,640 --> 00:12:20,310
And intuitively this is prevented by the unlockability
property of the locks.

178
00:12:20,310 --> 00:12:23,410
I refer you to the paper for formal arguments

179
00:12:23,410 --> 00:12:29,630
Our BLS-based construction follows the blueprint
of our generic protocol.

180
00:12:29,630 --> 00:12:34,570
However, the payment lock procedure in the
BLS based construction does not use general

181
00:12:34,570 --> 00:12:36,380
purpose MPC.

182
00:12:36,380 --> 00:12:40,880
Instead we give an efficient instantiation
as shown here for the case of lock generation

183
00:12:40,880 --> 00:12:42,670
for Dave.

184
00:12:42,670 --> 00:12:47,920
Carol and Bob send their signatures on the
respective payment transactions to Dave

185
00:12:47,920 --> 00:12:53,270
Followed by Alice sending the aggregate signature,
as shown here

186
00:12:53,270 --> 00:12:58,870
Dave can simply compute the lock himself,
which is the aggregate of all the relevant

187
00:12:58,870 --> 00:13:02,550
signatures sent by others and his own signatures.

188
00:13:02,550 --> 00:13:07,410
The computational steps involved are only
signing, verification, and aggregate verification,

189
00:13:07,410 --> 00:13:13,170
which are the standard interfaces of the BLS
signature scheme.

190
00:13:13,170 --> 00:13:16,189
Security for the first attack scenario

191
00:13:16,190 --> 00:13:19,600
where Carol gets paid before she pays Dave,

192
00:13:19,600 --> 00:13:21,180
follows from the weak hiding property

193
00:13:21,180 --> 00:13:30,739
And For the second attack case where Carol
cannot unlock a valid locked signature

194
00:13:30,740 --> 00:13:36,310
This case is impossible given that BLS signatures
are unique with respect to the message and

195
00:13:36,310 --> 00:13:38,180
the public key.

196
00:13:38,180 --> 00:13:43,810
As you can see, our BLS based protocol performs
quite well compared to the schnorr and ECDSA

197
00:13:43,810 --> 00:13:46,099
counterparts, both in speed and communication.

198
00:13:46,100 --> 00:13:51,940
This is because, we exploit the fact that
BLS signatures are unique and also that the

199
00:13:51,940 --> 00:13:56,950
signature and keys can be non-interactively
aggregated.

200
00:13:56,950 --> 00:14:02,080
In conclusion, we give the first cross currency
payment protocol that is compatible with all

201
00:14:02,080 --> 00:14:04,120
signature schemes.

202
00:14:04,120 --> 00:14:08,920
This protocol can be viewed as a blueprint
to develop efficient protocols for specific

203
00:14:08,920 --> 00:14:11,740
signature schemes of interest.

204
00:14:11,740 --> 00:14:17,160
Also the new tools introduced in this work
can be used to develop newer applications.

205
00:14:17,160 --> 00:14:21,870
Other interesting open problems that arise
from our work are if we can have dynamic routing

206
00:14:21,870 --> 00:14:26,760
of payments for all signatures, where the
sender does not know the intermediaries ahead

207
00:14:26,760 --> 00:14:32,970
of time, and also if we can have efficient
protocols for other signature schemes of interest.

208
00:14:32,970 --> 00:14:39,120
Thanks for listening, and do read our paper
and feel free to get in touch with us if you

209
00:14:39,120 --> 00:14:39,620
are interested.

