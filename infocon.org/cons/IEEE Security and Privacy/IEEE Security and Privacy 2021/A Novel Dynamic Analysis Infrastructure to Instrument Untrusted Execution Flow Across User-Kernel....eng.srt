1
00:00:02,080 --> 00:00:03,280
hi i'm jacqui

2
00:00:03,280 --> 00:00:06,080
from singapore management university

3
00:00:06,080 --> 00:00:07,919
today i'm going to present

4
00:00:07,919 --> 00:00:11,040
a joint work with my supervisor

5
00:00:11,040 --> 00:00:13,759
in this work we deliver a dynamic

6
00:00:13,759 --> 00:00:14,559
analysis

7
00:00:14,559 --> 00:00:17,680
infrastructure to instrument untrusted

8
00:00:17,680 --> 00:00:18,960
execution flow

9
00:00:18,960 --> 00:00:23,279
across user to kernel spaces

10
00:00:23,840 --> 00:00:26,080
there are two primary approaches in

11
00:00:26,080 --> 00:00:26,880
dynamic

12
00:00:26,880 --> 00:00:29,599
material analysis systems called

13
00:00:29,599 --> 00:00:30,560
instrumentation

14
00:00:30,560 --> 00:00:33,760
and hardware based event trapping

15
00:00:33,760 --> 00:00:36,239
code instrumentation makes the analysis

16
00:00:36,239 --> 00:00:36,800
code

17
00:00:36,800 --> 00:00:39,680
in the target code into one binary

18
00:00:39,680 --> 00:00:40,160
either

19
00:00:40,160 --> 00:00:43,440
statically or dynamically

20
00:00:43,440 --> 00:00:46,320
because of the code mixture the analyzer

21
00:00:46,320 --> 00:00:47,120
and target

22
00:00:47,120 --> 00:00:49,280
share the execution flow and also the

23
00:00:49,280 --> 00:00:52,000
address base at runtime

24
00:00:52,000 --> 00:00:54,320
due to the address based sharing the

25
00:00:54,320 --> 00:00:55,199
analyzer

26
00:00:55,199 --> 00:00:57,920
has native control towards the target

27
00:00:57,920 --> 00:00:58,879
it's convenient

28
00:00:58,879 --> 00:01:02,079
for the analyzer to introspect or modify

29
00:01:02,079 --> 00:01:03,600
the target

30
00:01:03,600 --> 00:01:05,760
where the downside is there's no

31
00:01:05,760 --> 00:01:08,880
transparency or security protection

32
00:01:08,880 --> 00:01:12,320
the target is easy to detect

33
00:01:12,320 --> 00:01:15,119
or even attack the analyzer which are

34
00:01:15,119 --> 00:01:15,600
proved

35
00:01:15,600 --> 00:01:18,880
by reason box

36
00:01:19,040 --> 00:01:21,360
on the other hand hardware-based

37
00:01:21,360 --> 00:01:22,080
approach

38
00:01:22,080 --> 00:01:24,960
relies on hardware events to trap the

39
00:01:24,960 --> 00:01:25,759
target to an

40
00:01:25,759 --> 00:01:28,640
isolated and more privileged environment

41
00:01:28,640 --> 00:01:31,119
for example the famous root mode or

42
00:01:31,119 --> 00:01:33,920
i'm secure words because the analyzer

43
00:01:33,920 --> 00:01:36,400
runs in a higher privileged environment

44
00:01:36,400 --> 00:01:38,799
so this approach guarantees strong

45
00:01:38,799 --> 00:01:40,640
security and transparency

46
00:01:40,640 --> 00:01:42,960
and often used for transparent kernel

47
00:01:42,960 --> 00:01:44,240
analysis

48
00:01:44,240 --> 00:01:46,640
while the cons is the analyzer is not

49
00:01:46,640 --> 00:01:49,200
flexible to control or introspect

50
00:01:49,200 --> 00:01:51,439
the target due to the isolated

51
00:01:51,439 --> 00:01:52,240
environment

52
00:01:52,240 --> 00:01:56,399
and semantic gap so the question we want

53
00:01:56,399 --> 00:01:56,719
to

54
00:01:56,719 --> 00:02:00,000
answer is can we combine the advantages

55
00:02:00,000 --> 00:02:01,520
of the two approaches

56
00:02:01,520 --> 00:02:04,719
without their drawbacks

57
00:02:05,759 --> 00:02:08,318
we propose excursion flow

58
00:02:08,318 --> 00:02:09,280
instrumentation

59
00:02:09,280 --> 00:02:11,840
to interleave instruction strings

60
00:02:11,840 --> 00:02:13,680
without mixing the code

61
00:02:13,680 --> 00:02:17,440
to be more specific the analyzer choose

62
00:02:17,440 --> 00:02:19,200
the site of instruction flow

63
00:02:19,200 --> 00:02:20,239
interleaving

64
00:02:20,239 --> 00:02:23,040
when the target sqs to the site the

65
00:02:23,040 --> 00:02:26,080
control flow is diverted to the analyzer

66
00:02:26,080 --> 00:02:29,280
where the analyzer runs in a shared

67
00:02:29,280 --> 00:02:30,080
address space

68
00:02:30,080 --> 00:02:32,080
which is different from the address base

69
00:02:32,080 --> 00:02:34,560
where the target excuse in

70
00:02:34,560 --> 00:02:37,519
in this shared address space it contains

71
00:02:37,519 --> 00:02:39,680
mappings not only to the analyzer's

72
00:02:39,680 --> 00:02:40,239
memory

73
00:02:40,239 --> 00:02:43,200
but also to the target's memory so this

74
00:02:43,200 --> 00:02:43,760
one-way

75
00:02:43,760 --> 00:02:46,000
address-based sharing allows the

76
00:02:46,000 --> 00:02:47,280
analyzer to have

77
00:02:47,280 --> 00:02:49,360
native access to the target while

78
00:02:49,360 --> 00:02:51,680
prevents the target from looking into

79
00:02:51,680 --> 00:02:53,680
the analyzer

80
00:02:53,680 --> 00:02:56,879
so we achieve secure transparent and

81
00:02:56,879 --> 00:03:00,080
native access goals the efi approach

82
00:03:00,080 --> 00:03:02,720
can be applied on a target spread

83
00:03:02,720 --> 00:03:05,599
running in both user and kernel mode

84
00:03:05,599 --> 00:03:10,239
so we also achieve cross space analysis

85
00:03:10,239 --> 00:03:12,800
we rely on hardware virtualization

86
00:03:12,800 --> 00:03:14,480
technology to develop

87
00:03:14,480 --> 00:03:18,879
an oasis infrastructure to support efi

88
00:03:18,879 --> 00:03:21,920
the big picture is ois is set up an

89
00:03:21,920 --> 00:03:24,239
on-site environment where the target

90
00:03:24,239 --> 00:03:25,040
spread

91
00:03:25,040 --> 00:03:28,400
is exported from its original guest vm

92
00:03:28,400 --> 00:03:28,720
to

93
00:03:28,720 --> 00:03:30,480
on-site environment to continue

94
00:03:30,480 --> 00:03:32,080
execution and

95
00:03:32,080 --> 00:03:34,480
the host application analyzer is also

96
00:03:34,480 --> 00:03:35,599
exported to

97
00:03:35,599 --> 00:03:39,040
onsite environment to run on the same

98
00:03:39,040 --> 00:03:42,640
cpu core as the target threat

99
00:03:42,640 --> 00:03:44,799
for the analyzer running in on-site

100
00:03:44,799 --> 00:03:45,680
environments

101
00:03:45,680 --> 00:03:48,239
oasis provides three capabilities to

102
00:03:48,239 --> 00:03:50,239
each

103
00:03:50,239 --> 00:03:52,720
the first native target access with

104
00:03:52,720 --> 00:03:54,480
isolation capability

105
00:03:54,480 --> 00:03:57,280
is achieved in this way the onsite

106
00:03:57,280 --> 00:03:58,799
environment has two

107
00:03:58,799 --> 00:04:00,959
different paging hierarchies to

108
00:04:00,959 --> 00:04:02,879
establish two address space

109
00:04:02,879 --> 00:04:05,280
for the target spread and for the

110
00:04:05,280 --> 00:04:06,560
analyzer thread

111
00:04:06,560 --> 00:04:09,439
to execute respectively the core

112
00:04:09,439 --> 00:04:12,560
technique here is to twist in the ept

113
00:04:12,560 --> 00:04:14,799
to read the red mappings for guest page

114
00:04:14,799 --> 00:04:16,238
table pages

115
00:04:16,238 --> 00:04:19,120
we do not copy any of the targets or

116
00:04:19,120 --> 00:04:21,358
analyzers coding data pages

117
00:04:21,358 --> 00:04:24,400
to onsite environment so to be more

118
00:04:24,400 --> 00:04:25,360
specific

119
00:04:25,360 --> 00:04:28,560
when the target runs on-site

120
00:04:28,560 --> 00:04:31,280
root pml for page table entries are set

121
00:04:31,280 --> 00:04:32,160
in the apt

122
00:04:32,160 --> 00:04:35,360
to point to the target's original paging

123
00:04:35,360 --> 00:04:36,160
hierarchies

124
00:04:36,160 --> 00:04:39,360
used in the guest vm so in this way

125
00:04:39,360 --> 00:04:42,160
a target address space is established in

126
00:04:42,160 --> 00:04:44,560
onsite

127
00:04:44,560 --> 00:04:47,919
when the analyzer runs except those

128
00:04:47,919 --> 00:04:50,720
entries occupied by the target memory

129
00:04:50,720 --> 00:04:53,280
one unused entry in the root payment for

130
00:04:53,280 --> 00:04:56,080
page is redirected in the ept

131
00:04:56,080 --> 00:04:58,080
to point to the analyzer's paging

132
00:04:58,080 --> 00:05:00,240
hierarchy in the host

133
00:05:00,240 --> 00:05:03,120
so a shared analyzer and target address

134
00:05:03,120 --> 00:05:03,520
space

135
00:05:03,520 --> 00:05:05,919
is established for the analyzer to

136
00:05:05,919 --> 00:05:07,120
execute

137
00:05:07,120 --> 00:05:08,960
where the analyzer can have native

138
00:05:08,960 --> 00:05:10,880
access to the attacking memory

139
00:05:10,880 --> 00:05:14,160
to facilitate the introspection

140
00:05:14,160 --> 00:05:16,479
the switches between these two

141
00:05:16,479 --> 00:05:17,360
hierarchies

142
00:05:17,360 --> 00:05:19,440
are achieved by using venn func

143
00:05:19,440 --> 00:05:22,000
instruction

144
00:05:22,000 --> 00:05:24,800
the second capability is on demand

145
00:05:24,800 --> 00:05:26,880
instruction flow interleaving

146
00:05:26,880 --> 00:05:29,919
the analyzer use software probe to

147
00:05:29,919 --> 00:05:30,560
divert

148
00:05:30,560 --> 00:05:33,919
the target control flow to the exit

149
00:05:33,919 --> 00:05:34,639
gauge

150
00:05:34,639 --> 00:05:36,880
which switches the paging hierarchy for

151
00:05:36,880 --> 00:05:38,000
the analyzer

152
00:05:38,000 --> 00:05:42,400
using vm func instruction after analysis

153
00:05:42,400 --> 00:05:44,960
analyzer jumps to the entry gate which

154
00:05:44,960 --> 00:05:47,360
switches the paging hierarchy for the

155
00:05:47,360 --> 00:05:48,240
package

156
00:05:48,240 --> 00:05:51,039
there is no vm transition or cpu mode

157
00:05:51,039 --> 00:05:53,039
and privilege changes during this

158
00:05:53,039 --> 00:05:55,680
analyzer target switches

159
00:05:55,680 --> 00:05:58,400
with this capability analyzer can

160
00:05:58,400 --> 00:06:00,639
instrument the target

161
00:06:00,639 --> 00:06:03,919
execution flow always this library

162
00:06:03,919 --> 00:06:04,639
provides

163
00:06:04,639 --> 00:06:08,240
two probes junk probe and entry proof

164
00:06:08,240 --> 00:06:11,360
the jump probe is multiply loan which

165
00:06:11,360 --> 00:06:12,720
can be

166
00:06:12,720 --> 00:06:14,880
temporarily installed in the target to

167
00:06:14,880 --> 00:06:16,160
trace the target

168
00:06:16,160 --> 00:06:19,520
execution where the in-3 probe can be

169
00:06:19,520 --> 00:06:22,080
permanently installed in the target as a

170
00:06:22,080 --> 00:06:22,960
breakpoint

171
00:06:22,960 --> 00:06:27,198
to monitor its function invocation

172
00:06:29,440 --> 00:06:32,840
the third capability is transparent os

173
00:06:32,840 --> 00:06:36,160
services the analyzer is initially a

174
00:06:36,160 --> 00:06:37,520
host application

175
00:06:37,520 --> 00:06:39,919
when it's executes in the on-site

176
00:06:39,919 --> 00:06:40,800
environment

177
00:06:40,800 --> 00:06:43,280
we deliver its system calls and

178
00:06:43,280 --> 00:06:44,319
exceptions

179
00:06:44,319 --> 00:06:47,680
to the host os to handle so in this way

180
00:06:47,680 --> 00:06:48,000
we

181
00:06:48,000 --> 00:06:50,960
relieve the constraints on the analyzer

182
00:06:50,960 --> 00:06:51,759
it can be

183
00:06:51,759 --> 00:06:55,039
developed as a normal coc plus plus

184
00:06:55,039 --> 00:06:55,840
program

185
00:06:55,840 --> 00:06:58,720
which enjoys the os services and can

186
00:06:58,720 --> 00:06:59,440
invoke

187
00:06:59,440 --> 00:07:03,840
fancy existing helper libraries

188
00:07:05,520 --> 00:07:08,560
because oasis is a new system so we

189
00:07:08,560 --> 00:07:09,280
developed

190
00:07:09,280 --> 00:07:14,080
three tools to showcase its capabilities

191
00:07:14,479 --> 00:07:17,840
the first analysis tool is a cross space

192
00:07:17,840 --> 00:07:19,440
control flow tracer

193
00:07:19,440 --> 00:07:22,720
in this tool the analyzer continuously

194
00:07:22,720 --> 00:07:26,080
placed a jump probe at the next

195
00:07:26,080 --> 00:07:28,720
branch instruction of the target along

196
00:07:28,720 --> 00:07:30,560
with the target execution

197
00:07:30,560 --> 00:07:33,199
so for targets every basic block

198
00:07:33,199 --> 00:07:34,080
transport

199
00:07:34,080 --> 00:07:36,400
the execution will be diverted to the

200
00:07:36,400 --> 00:07:37,919
analyzer

201
00:07:37,919 --> 00:07:41,039
we apply this tracer tool on four

202
00:07:41,039 --> 00:07:42,800
different target programs

203
00:07:42,800 --> 00:07:44,960
across their user and kernel space

204
00:07:44,960 --> 00:07:46,080
execution

205
00:07:46,080 --> 00:07:48,560
and record their total number of system

206
00:07:48,560 --> 00:07:49,599
call events

207
00:07:49,599 --> 00:07:52,879
page fraud exceptions and basic block

208
00:07:52,879 --> 00:07:56,000
control transfers we also

209
00:07:56,000 --> 00:07:58,560
compare the performance of efi tracer

210
00:07:58,560 --> 00:07:59,599
with mods

211
00:07:59,599 --> 00:08:02,400
which relies on hardware to trap the

212
00:08:02,400 --> 00:08:03,120
target

213
00:08:03,120 --> 00:08:06,000
into smm mode on every basic block

214
00:08:06,000 --> 00:08:06,800
transport

215
00:08:06,800 --> 00:08:10,080
efi tracer includes less times

216
00:08:10,080 --> 00:08:13,520
of slowdown than much on all the test

217
00:08:13,520 --> 00:08:16,000
cases

218
00:08:17,520 --> 00:08:20,479
we also developed two efi tourists two

219
00:08:20,479 --> 00:08:21,759
working together

220
00:08:21,759 --> 00:08:24,400
with a popular kernel fighting tour sees

221
00:08:24,400 --> 00:08:25,520
color

222
00:08:25,520 --> 00:08:27,759
this color relies on source code

223
00:08:27,759 --> 00:08:29,199
instrumentation to

224
00:08:29,199 --> 00:08:31,520
record and validate kernel runtime

225
00:08:31,520 --> 00:08:32,799
behaviors

226
00:08:32,799 --> 00:08:36,080
in this column the cis father generates

227
00:08:36,080 --> 00:08:39,440
inputs to the css quilter the input

228
00:08:39,440 --> 00:08:41,599
is a sequence of system calls with

229
00:08:41,599 --> 00:08:42,880
arguments

230
00:08:42,880 --> 00:08:45,920
then the system invoke those system

231
00:08:45,920 --> 00:08:46,720
codes

232
00:08:46,720 --> 00:08:50,000
aimed to trigger kernel vulnerability if

233
00:08:50,000 --> 00:08:52,560
a kernel vulnerability is triggered a

234
00:08:52,560 --> 00:08:54,480
crash report is generated

235
00:08:54,480 --> 00:08:57,600
but upon a kernel crash report it made

236
00:08:57,600 --> 00:09:00,080
lack of sufficient information for

237
00:09:00,080 --> 00:09:01,680
fine-grained analysis

238
00:09:01,680 --> 00:09:04,959
to reason about the crash secondly

239
00:09:04,959 --> 00:09:07,920
it is not able to handle proprietary

240
00:09:07,920 --> 00:09:08,800
drivers

241
00:09:08,800 --> 00:09:11,200
without source called instrumentation or

242
00:09:11,200 --> 00:09:12,399
malicious modules

243
00:09:12,399 --> 00:09:16,000
equipped with anti-instrument techniques

244
00:09:16,000 --> 00:09:18,800
so we developed two efi tourists to

245
00:09:18,800 --> 00:09:20,720
complement it

246
00:09:20,720 --> 00:09:23,279
in both of the case studies the css

247
00:09:23,279 --> 00:09:23,920
skills

248
00:09:23,920 --> 00:09:26,720
is exported to onsite environment to

249
00:09:26,720 --> 00:09:27,360
undergo

250
00:09:27,360 --> 00:09:30,560
efi analysis

251
00:09:31,360 --> 00:09:34,000
in this dynamic post-modern analysis

252
00:09:34,000 --> 00:09:34,399
case

253
00:09:34,399 --> 00:09:37,440
study this scholar reports a crash

254
00:09:37,440 --> 00:09:40,000
caused by a page fraud in the kernel

255
00:09:40,000 --> 00:09:40,640
function

256
00:09:40,640 --> 00:09:44,160
when it accesses an array element

257
00:09:44,160 --> 00:09:47,600
we develop an efi analyzer to collect

258
00:09:47,600 --> 00:09:50,080
runtime data in order to reason about

259
00:09:50,080 --> 00:09:51,360
the page vote

260
00:09:51,360 --> 00:09:54,480
so this is done in two phase

261
00:09:54,480 --> 00:09:56,959
in the preprocessing phase we use

262
00:09:56,959 --> 00:09:59,279
backward slicing upon the field

263
00:09:59,279 --> 00:10:00,160
instruction

264
00:10:00,160 --> 00:10:02,720
to determine the size to install efi

265
00:10:02,720 --> 00:10:03,600
jump probe

266
00:10:03,600 --> 00:10:06,480
then at runtime the analyzer installs an

267
00:10:06,480 --> 00:10:08,959
in-3 probe at the target

268
00:10:08,959 --> 00:10:11,279
interesting function to monitor its

269
00:10:11,279 --> 00:10:12,720
invocation

270
00:10:12,720 --> 00:10:15,120
when the function is invoked then the

271
00:10:15,120 --> 00:10:16,320
analyzer

272
00:10:16,320 --> 00:10:18,720
installs jump probe at the slice

273
00:10:18,720 --> 00:10:19,600
instruction

274
00:10:19,600 --> 00:10:22,480
the jump rope at each size instruction

275
00:10:22,480 --> 00:10:23,760
would pass the

276
00:10:23,760 --> 00:10:27,200
control to the analyzer so that it can

277
00:10:27,200 --> 00:10:28,880
fetches the

278
00:10:28,880 --> 00:10:31,279
necessary kernel objects using native

279
00:10:31,279 --> 00:10:34,560
kernel introspection

280
00:10:35,040 --> 00:10:38,000
with the runtime collected data we found

281
00:10:38,000 --> 00:10:38,800
out that

282
00:10:38,800 --> 00:10:41,920
the code incrementing the array index

283
00:10:41,920 --> 00:10:44,800
is never executed which leads to an

284
00:10:44,800 --> 00:10:48,399
autobound memory reference

285
00:10:49,600 --> 00:10:52,640
in this exploration of untrusted driver

286
00:10:52,640 --> 00:10:53,680
case study

287
00:10:53,680 --> 00:10:56,399
we developed an efi tool to work

288
00:10:56,399 --> 00:10:57,440
together with

289
00:10:57,440 --> 00:10:59,920
this color to uncover the heightened

290
00:10:59,920 --> 00:11:00,800
behaviors

291
00:11:00,800 --> 00:11:04,880
of an uninstrumented kernel space driver

292
00:11:04,880 --> 00:11:08,240
so we customize a rookie from github

293
00:11:08,240 --> 00:11:10,959
by hiding its malicious behaviors in a

294
00:11:10,959 --> 00:11:12,160
heightened path

295
00:11:12,160 --> 00:11:15,120
and also adjusts it to equip an

296
00:11:15,120 --> 00:11:17,040
anti-instrument technique

297
00:11:17,040 --> 00:11:21,120
to against f3s login then at runtime

298
00:11:21,120 --> 00:11:24,079
this color generates fuzzy input to

299
00:11:24,079 --> 00:11:25,680
trigger the height and pass

300
00:11:25,680 --> 00:11:28,480
while the efi analyzer records the

301
00:11:28,480 --> 00:11:30,720
malicious drivers behaviors

302
00:11:30,720 --> 00:11:33,440
including the control flow transfers

303
00:11:33,440 --> 00:11:34,560
within the driver

304
00:11:34,560 --> 00:11:37,600
itself and also its invocation to kernel

305
00:11:37,600 --> 00:11:40,160
functions

306
00:11:41,680 --> 00:11:44,839
we implement an oasis prototype on an

307
00:11:44,839 --> 00:11:50,079
x64 platform running linux kernel 3.13

308
00:11:50,079 --> 00:11:52,560
we also run some micro and macro

309
00:11:52,560 --> 00:11:54,560
benchmark testing to evaluate the

310
00:11:54,560 --> 00:11:55,519
performance

311
00:11:55,519 --> 00:11:57,839
and also some benchmark testing to

312
00:11:57,839 --> 00:12:01,360
evaluate the transparency

313
00:12:01,519 --> 00:12:03,920
we compare the round-trip transition

314
00:12:03,920 --> 00:12:05,680
time between the analyzer

315
00:12:05,680 --> 00:12:08,800
and to target with spider which

316
00:12:08,800 --> 00:12:12,000
traps the target into hypervisor

317
00:12:12,000 --> 00:12:15,600
and mods which traps the target into smm

318
00:12:15,600 --> 00:12:16,560
mode

319
00:12:16,560 --> 00:12:19,839
the efi jump probe is three times faster

320
00:12:19,839 --> 00:12:20,720
than

321
00:12:20,720 --> 00:12:25,279
spider and 32 times faster than mod

322
00:12:25,279 --> 00:12:28,639
to evaluate the os's impact on the guest

323
00:12:28,639 --> 00:12:29,200
vm

324
00:12:29,200 --> 00:12:32,160
hosting the target program we run rm

325
00:12:32,160 --> 00:12:32,720
bench

326
00:12:32,720 --> 00:12:36,079
in the guest vm and continuously capture

327
00:12:36,079 --> 00:12:39,040
its spread to on-site environment for

328
00:12:39,040 --> 00:12:39,600
efi

329
00:12:39,600 --> 00:12:42,880
trace the highest overhead

330
00:12:42,880 --> 00:12:45,600
is on the file system latency where the

331
00:12:45,600 --> 00:12:46,639
efi trace

332
00:12:46,639 --> 00:12:51,440
includes 10 overhead on it

333
00:12:51,600 --> 00:12:54,639
we also evaluate the transparency of

334
00:12:54,639 --> 00:12:55,600
oasis

335
00:12:55,600 --> 00:12:58,720
by applying efi tracer on several

336
00:12:58,720 --> 00:12:59,680
benchmarks

337
00:12:59,680 --> 00:13:02,000
to see whether those benchmarks can

338
00:13:02,000 --> 00:13:02,880
detect

339
00:13:02,880 --> 00:13:05,680
the system environment or software state

340
00:13:05,680 --> 00:13:06,560
change

341
00:13:06,560 --> 00:13:09,839
the first is an anti-debugging benchmark

342
00:13:09,839 --> 00:13:12,639
named pangu which is equipped with

343
00:13:12,639 --> 00:13:14,800
several popular anti-debugging

344
00:13:14,800 --> 00:13:15,760
techniques

345
00:13:15,760 --> 00:13:18,560
the second is a self-checksum program

346
00:13:18,560 --> 00:13:18,959
which

347
00:13:18,959 --> 00:13:21,920
calculates a hash digest of is as good

348
00:13:21,920 --> 00:13:22,399
ball

349
00:13:22,399 --> 00:13:24,800
and read-only data memory and an

350
00:13:24,800 --> 00:13:26,880
anti-instrument benchmark tool

351
00:13:26,880 --> 00:13:29,440
which detects address-based change and

352
00:13:29,440 --> 00:13:30,480
so on

353
00:13:30,480 --> 00:13:34,160
finally we apply efi tracer on a upx

354
00:13:34,160 --> 00:13:37,279
packed share command program you name

355
00:13:37,279 --> 00:13:40,240
among all experiments only one technique

356
00:13:40,240 --> 00:13:41,279
in pango

357
00:13:41,279 --> 00:13:44,959
which uses rdtsc to measure its

358
00:13:44,959 --> 00:13:47,760
execution time for loop detects the

359
00:13:47,760 --> 00:13:49,440
tracing analysis

360
00:13:49,440 --> 00:13:52,079
due to the prolonged execution time of

361
00:13:52,079 --> 00:13:54,000
the other transparency testing

362
00:13:54,000 --> 00:13:56,560
are passed

363
00:13:57,680 --> 00:14:00,880
as a summary we propose efi which

364
00:14:00,880 --> 00:14:01,760
combines the

365
00:14:01,760 --> 00:14:04,480
benefits of two main string analysis

366
00:14:04,480 --> 00:14:05,519
approaches

367
00:14:05,519 --> 00:14:08,320
we design and implement oasis to support

368
00:14:08,320 --> 00:14:10,160
efi

369
00:14:10,160 --> 00:14:12,720
analyzer running in on-site environment

370
00:14:12,720 --> 00:14:13,760
is easy to

371
00:14:13,760 --> 00:14:16,399
instrument and also introspect the

372
00:14:16,399 --> 00:14:17,680
target's rates

373
00:14:17,680 --> 00:14:19,920
with security and transparency

374
00:14:19,920 --> 00:14:21,199
protection

375
00:14:21,199 --> 00:14:23,760
oasis system has the potential to

376
00:14:23,760 --> 00:14:26,720
support a wide range of applications

377
00:14:26,720 --> 00:14:29,120
such as to deal with malware equipped

378
00:14:29,120 --> 00:14:31,600
with anti-analysis techniques

379
00:14:31,600 --> 00:14:34,399
like forensics at attacker science and

380
00:14:34,399 --> 00:14:37,279
complicated kernel analysis

381
00:14:37,279 --> 00:14:40,399
oasis can also be exported to arm

382
00:14:40,399 --> 00:14:41,120
platform

383
00:14:41,120 --> 00:14:43,920
but in that case trapping to hypervisor

384
00:14:43,920 --> 00:14:45,760
might be unavoidable

385
00:14:45,760 --> 00:14:49,120
because the lack of equivalent vm func

386
00:14:49,120 --> 00:14:52,560
instruction in arm we made the

387
00:14:52,560 --> 00:14:56,560
source code available at github

388
00:14:56,720 --> 00:15:01,760
thank you for coming any questions

