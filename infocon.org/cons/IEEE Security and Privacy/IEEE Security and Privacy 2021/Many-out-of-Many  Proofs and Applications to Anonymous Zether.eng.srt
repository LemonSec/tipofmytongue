1
00:00:00,799 --> 00:00:02,879
hello i'm benjamin diamond and i will be

2
00:00:02,879 --> 00:00:03,520
presenting

3
00:00:03,520 --> 00:00:05,440
many out of many proofs and applications

4
00:00:05,440 --> 00:00:08,560
to anonymous ether

5
00:00:09,200 --> 00:00:12,240
so let me start with a widely known fact

6
00:00:12,240 --> 00:00:13,599
which is that standard issue

7
00:00:13,599 --> 00:00:15,679
cryptocurrencies like bitcoin

8
00:00:15,679 --> 00:00:18,000
lack privacy and of course don't have

9
00:00:18,000 --> 00:00:18,800
formally

10
00:00:18,800 --> 00:00:21,840
articulated privacy guarantees

11
00:00:21,840 --> 00:00:24,400
i can point to the sort of regular

12
00:00:24,400 --> 00:00:26,080
manifestations of this fact

13
00:00:26,080 --> 00:00:30,800
in the media and concurrently

14
00:00:30,800 --> 00:00:34,000
there are various efforts underway

15
00:00:34,000 --> 00:00:36,160
to make cryptocurrencies with better

16
00:00:36,160 --> 00:00:38,000
privacy properties

17
00:00:38,000 --> 00:00:40,879
um for example monero and zcash among a

18
00:00:40,879 --> 00:00:42,480
number of other efforts

19
00:00:42,480 --> 00:00:47,200
and um these have been successful

20
00:00:47,200 --> 00:00:49,520
what i want to argue in this talk is

21
00:00:49,520 --> 00:00:50,320
that

22
00:00:50,320 --> 00:00:53,199
these currencies have focused largely on

23
00:00:53,199 --> 00:00:55,039
making transaction sizes

24
00:00:55,039 --> 00:00:57,680
be really small and they've succeeded in

25
00:00:57,680 --> 00:00:58,399
this

26
00:00:58,399 --> 00:01:01,920
um bringing the transaction size down to

27
00:01:01,920 --> 00:01:03,440
just a couple kilobytes

28
00:01:03,440 --> 00:01:06,080
and leading to reasonably sized blocks

29
00:01:06,080 --> 00:01:06,479
but

30
00:01:06,479 --> 00:01:08,880
that in focusing so much on transaction

31
00:01:08,880 --> 00:01:10,320
size

32
00:01:10,320 --> 00:01:12,400
most efforts in private payment have

33
00:01:12,400 --> 00:01:14,640
actually neglected a further factor

34
00:01:14,640 --> 00:01:18,320
which has arguably been more operative

35
00:01:18,320 --> 00:01:20,080
in preventing these things from getting

36
00:01:20,080 --> 00:01:21,920
used in practice and

37
00:01:21,920 --> 00:01:24,720
that is the feasibility for use with

38
00:01:24,720 --> 00:01:26,640
mobile devices

39
00:01:26,640 --> 00:01:29,680
and the reason is that the way these

40
00:01:29,680 --> 00:01:30,560
currencies work

41
00:01:30,560 --> 00:01:33,600
in order to run a wallet you wind up

42
00:01:33,600 --> 00:01:35,680
incurring a substantial bandwidth

43
00:01:35,680 --> 00:01:38,799
and cpu burden and

44
00:01:38,799 --> 00:01:40,720
the reason why is that in order to even

45
00:01:40,720 --> 00:01:42,720
know what funds are yours

46
00:01:42,720 --> 00:01:45,680
um or which transactions are to you you

47
00:01:45,680 --> 00:01:47,439
essentially need to scan through every

48
00:01:47,439 --> 00:01:49,600
transaction posted to the blockchain

49
00:01:49,600 --> 00:01:51,840
you need to download every block and

50
00:01:51,840 --> 00:01:53,520
moreover you need to cryptographically

51
00:01:53,520 --> 00:01:54,079
process

52
00:01:54,079 --> 00:01:56,560
each transaction which shows up in the

53
00:01:56,560 --> 00:01:57,759
blocks

54
00:01:57,759 --> 00:02:01,040
and this issue is not just theoretical

55
00:02:01,040 --> 00:02:01,759
but

56
00:02:01,759 --> 00:02:05,119
has practically affected

57
00:02:05,119 --> 00:02:06,960
the efforts which have been made to make

58
00:02:06,960 --> 00:02:10,318
wallets for these currencies

59
00:02:10,318 --> 00:02:12,640
so into this picture arrives a new

60
00:02:12,640 --> 00:02:14,720
protocol

61
00:02:14,720 --> 00:02:16,480
described in in a recent paper of

62
00:02:16,480 --> 00:02:18,800
benedict boone's shashank agrawal

63
00:02:18,800 --> 00:02:21,360
madisomani and dan bonnet called zether

64
00:02:21,360 --> 00:02:22,000
and

65
00:02:22,000 --> 00:02:24,000
zether is interesting for a number of

66
00:02:24,000 --> 00:02:25,680
reasons um

67
00:02:25,680 --> 00:02:27,760
but among them is that it essentially

68
00:02:27,760 --> 00:02:31,360
solves this bandwidth and cpu issue

69
00:02:31,360 --> 00:02:34,879
and what that means is that my my wallet

70
00:02:34,879 --> 00:02:36,319
my phone

71
00:02:36,319 --> 00:02:38,879
can be offered offline for any amount of

72
00:02:38,879 --> 00:02:39,840
time

73
00:02:39,840 --> 00:02:43,599
and when i come back when i come back

74
00:02:43,599 --> 00:02:46,400
online if i want to say know my account

75
00:02:46,400 --> 00:02:47,120
balance

76
00:02:47,120 --> 00:02:49,680
i can learn that just by querying some

77
00:02:49,680 --> 00:02:50,160
small

78
00:02:50,160 --> 00:02:53,280
constant amount of data and

79
00:02:53,280 --> 00:02:55,120
this is true regardless of how long i

80
00:02:55,120 --> 00:02:56,400
was offline for

81
00:02:56,400 --> 00:02:59,760
right similarly if i want to send funds

82
00:02:59,760 --> 00:03:02,480
i can learn all i need to know to do

83
00:03:02,480 --> 00:03:02,879
that

84
00:03:02,879 --> 00:03:04,879
just by downloading some small constant

85
00:03:04,879 --> 00:03:05,920
amount of state

86
00:03:05,920 --> 00:03:08,720
from the blockchain again regardless of

87
00:03:08,720 --> 00:03:09,200
how long

88
00:03:09,200 --> 00:03:11,680
i was offline for so this is really

89
00:03:11,680 --> 00:03:13,760
important

90
00:03:13,760 --> 00:03:15,519
by way of background i will quickly

91
00:03:15,519 --> 00:03:18,159
explain how anonymous ether works

92
00:03:18,159 --> 00:03:20,319
so the idea is that um within your

93
00:03:20,319 --> 00:03:21,760
global ethereum state

94
00:03:21,760 --> 00:03:23,280
of course anonymous ether could be a

95
00:03:23,280 --> 00:03:25,040
standalone cryptocurrency

96
00:03:25,040 --> 00:03:28,640
um but boons and all uh at all

97
00:03:28,640 --> 00:03:31,840
uh didn't envisioned it as as a contract

98
00:03:31,840 --> 00:03:34,560
in ethereum and i do the same

99
00:03:34,560 --> 00:03:36,879
so beginning with a pre-existing erc20

100
00:03:36,879 --> 00:03:38,879
contract you could use wrapped ether or

101
00:03:38,879 --> 00:03:41,519
you could just use ether um

102
00:03:41,519 --> 00:03:44,640
but you you can deploy

103
00:03:44,640 --> 00:03:46,720
a linked anonymous ether contract with

104
00:03:46,720 --> 00:03:48,799
sort of on and off ramps for funds

105
00:03:48,799 --> 00:03:51,519
and the actual private payment happens

106
00:03:51,519 --> 00:03:53,040
within the contract

107
00:03:53,040 --> 00:03:55,680
the way this is done is by storing a

108
00:03:55,680 --> 00:03:56,959
global table

109
00:03:56,959 --> 00:03:59,519
which takes public keys and maps those

110
00:03:59,519 --> 00:04:01,360
to encrypted account balances

111
00:04:01,360 --> 00:04:03,040
where each account balance is encrypted

112
00:04:03,040 --> 00:04:04,480
under its own key

113
00:04:04,480 --> 00:04:07,760
and to send funds the sender should

114
00:04:07,760 --> 00:04:11,200
select some subset or ring of this

115
00:04:11,200 --> 00:04:13,680
global table which contains the sender

116
00:04:13,680 --> 00:04:15,760
and receiver and also contains

117
00:04:15,760 --> 00:04:17,600
some amount of other accounts called

118
00:04:17,600 --> 00:04:18,959
decoys and

119
00:04:18,959 --> 00:04:22,479
um the sender should encrypt the amounts

120
00:04:22,479 --> 00:04:23,360
by which

121
00:04:23,360 --> 00:04:25,840
the center wants to change the balances

122
00:04:25,840 --> 00:04:27,520
right so for example negative 10 for the

123
00:04:27,520 --> 00:04:28,240
sender

124
00:04:28,240 --> 00:04:30,400
positive 10 for the recipient and of

125
00:04:30,400 --> 00:04:32,800
course zero for the decoys

126
00:04:32,800 --> 00:04:34,320
the sender should then attach zero

127
00:04:34,320 --> 00:04:36,240
knowledge proof which asserts that

128
00:04:36,240 --> 00:04:39,199
this transaction takes the right form um

129
00:04:39,199 --> 00:04:41,360
we'll talk more about this in a bit

130
00:04:41,360 --> 00:04:43,840
and the idea is that if the proof passes

131
00:04:43,840 --> 00:04:45,600
the contract can apply the

132
00:04:45,600 --> 00:04:48,000
transfer using the sort of homomorphic

133
00:04:48,000 --> 00:04:49,520
property of this encryption scheme

134
00:04:49,520 --> 00:04:52,320
right you can see that the accounts have

135
00:04:52,320 --> 00:04:53,520
been overwritten

136
00:04:53,520 --> 00:04:56,560
now with new values where the transfer

137
00:04:56,560 --> 00:04:57,120
got

138
00:04:57,120 --> 00:05:00,240
effectuated and the key property is that

139
00:05:00,240 --> 00:05:03,600
you know i a user can

140
00:05:03,600 --> 00:05:05,360
sort of sit back while this happens

141
00:05:05,360 --> 00:05:07,120
arbitrarily many times

142
00:05:07,120 --> 00:05:08,800
and whenever i want to come back and

143
00:05:08,800 --> 00:05:10,160
check my account balance

144
00:05:10,160 --> 00:05:12,560
i just look up my own table entry and i

145
00:05:12,560 --> 00:05:13,280
can do that

146
00:05:13,280 --> 00:05:15,199
right away regardless of how many times

147
00:05:15,199 --> 00:05:16,800
this has happened in the intervening

148
00:05:16,800 --> 00:05:19,039
time

149
00:05:19,360 --> 00:05:21,199
so zooming into the zero knowledge proof

150
00:05:21,199 --> 00:05:23,199
let's talk a bit about what it should

151
00:05:23,199 --> 00:05:24,720
show

152
00:05:24,720 --> 00:05:26,720
and intuitively we want to show that the

153
00:05:26,720 --> 00:05:28,320
transaction takes

154
00:05:28,320 --> 00:05:30,240
the form here right so for example each

155
00:05:30,240 --> 00:05:31,440
element should be

156
00:05:31,440 --> 00:05:33,360
a well-formed cipher text under the

157
00:05:33,360 --> 00:05:34,720
right public key

158
00:05:34,720 --> 00:05:37,759
in practice we use elgamal there should

159
00:05:37,759 --> 00:05:40,080
be two among these which encrypt exactly

160
00:05:40,080 --> 00:05:43,840
opposite amounts under their keys

161
00:05:44,080 --> 00:05:46,880
whichever of those is negative the the

162
00:05:46,880 --> 00:05:48,800
sender should have authority to s

163
00:05:48,800 --> 00:05:51,360
to spend from that account and moreover

164
00:05:51,360 --> 00:05:52,240
this transaction

165
00:05:52,240 --> 00:05:53,840
shouldn't cause that account to become

166
00:05:53,840 --> 00:05:56,560
negative so that's overdraft protection

167
00:05:56,560 --> 00:05:58,880
and of course all of the remaining

168
00:05:58,880 --> 00:06:00,720
accounts should encrypt zero

169
00:06:00,720 --> 00:06:03,280
right this is crucial or otherwise the

170
00:06:03,280 --> 00:06:05,280
sender could sort of change around

171
00:06:05,280 --> 00:06:07,919
arbitrary bystanders account balances in

172
00:06:07,919 --> 00:06:11,120
the course of the transaction

173
00:06:14,080 --> 00:06:17,759
okay so what this paper does

174
00:06:17,759 --> 00:06:20,400
is propose a zero knowledge proof

175
00:06:20,400 --> 00:06:21,919
protocol for this

176
00:06:21,919 --> 00:06:24,560
idea um which moreover has good

177
00:06:24,560 --> 00:06:26,639
asymptotic and concrete performance

178
00:06:26,639 --> 00:06:29,120
now the thing to keep in mind with

179
00:06:29,120 --> 00:06:31,039
anonymous ether is that you pay for

180
00:06:31,039 --> 00:06:32,880
privacy in a certain sense right in the

181
00:06:32,880 --> 00:06:34,319
sense that um

182
00:06:34,319 --> 00:06:36,960
the bigger your anonymity sets get the

183
00:06:36,960 --> 00:06:38,160
better privacy you get

184
00:06:38,160 --> 00:06:41,280
but also performance will degrade in in

185
00:06:41,280 --> 00:06:42,479
some sense and then the

186
00:06:42,479 --> 00:06:43,759
the question is what is the nature of

187
00:06:43,759 --> 00:06:45,600
that relationship well

188
00:06:45,600 --> 00:06:48,639
in this paper um the protocol i propose

189
00:06:48,639 --> 00:06:50,720
the proofs grow only logarithmically

190
00:06:50,720 --> 00:06:53,599
in the size n of the anonymity set the

191
00:06:53,599 --> 00:06:56,000
prover's runtime grows quasi-linearly

192
00:06:56,000 --> 00:07:00,080
so n login the verifiers does too

193
00:07:00,080 --> 00:07:01,919
and the transaction size of course is

194
00:07:01,919 --> 00:07:03,440
linear because you have to include this

195
00:07:03,440 --> 00:07:04,080
array

196
00:07:04,080 --> 00:07:06,880
of ciphertexts but um nonetheless has

197
00:07:06,880 --> 00:07:08,960
reasonable size and practice

198
00:07:08,960 --> 00:07:11,520
the uh and then finally we use only

199
00:07:11,520 --> 00:07:14,840
standard assumptions and have no trusted

200
00:07:14,840 --> 00:07:17,840
setup

201
00:07:18,639 --> 00:07:20,319
okay so for the remainder of the talk i

202
00:07:20,319 --> 00:07:22,160
will go into how this actually gets

203
00:07:22,160 --> 00:07:23,599
achieved in practice

204
00:07:23,599 --> 00:07:25,759
and the first starting point is a paper

205
00:07:25,759 --> 00:07:26,880
of jen's groth and

206
00:07:26,880 --> 00:07:29,840
markwood called ice called one out of

207
00:07:29,840 --> 00:07:30,960
many proofs

208
00:07:30,960 --> 00:07:32,800
what this paper does is take a public

209
00:07:32,800 --> 00:07:34,240
list of commitments

210
00:07:34,240 --> 00:07:36,160
which both the proofer and verifier know

211
00:07:36,160 --> 00:07:37,919
the prover knows an opening of one of

212
00:07:37,919 --> 00:07:40,960
these elements to zero

213
00:07:40,960 --> 00:07:43,360
and what the proof shows is knowledge of

214
00:07:43,360 --> 00:07:45,360
both of these data points right so first

215
00:07:45,360 --> 00:07:46,639
the secret index

216
00:07:46,639 --> 00:07:49,280
and then the secret randomness and the

217
00:07:49,280 --> 00:07:50,240
key property

218
00:07:50,240 --> 00:07:53,199
is that uh beyond being sound is that in

219
00:07:53,199 --> 00:07:55,280
the eye of the verifier the index where

220
00:07:55,280 --> 00:07:57,280
this commitment to zero resides

221
00:07:57,280 --> 00:08:00,400
should stay secret

222
00:08:00,400 --> 00:08:03,440
so in this protocol paper

223
00:08:03,440 --> 00:08:05,199
i introduced many out of many proofs

224
00:08:05,199 --> 00:08:06,720
which is a direct

225
00:08:06,720 --> 00:08:08,560
generalization of one out of many proofs

226
00:08:08,560 --> 00:08:10,000
and one way to think about how this

227
00:08:10,000 --> 00:08:10,479
works

228
00:08:10,479 --> 00:08:13,120
is that um instead of pointing to a

229
00:08:13,120 --> 00:08:14,479
single secret element

230
00:08:14,479 --> 00:08:16,800
the prover can point to a secret subset

231
00:08:16,800 --> 00:08:18,080
of a list

232
00:08:18,080 --> 00:08:20,479
where both the contents of that subset

233
00:08:20,479 --> 00:08:21,520
and the order

234
00:08:21,520 --> 00:08:23,599
are are secret right so this is actually

235
00:08:23,599 --> 00:08:24,879
an ordered subset

236
00:08:24,879 --> 00:08:27,520
and then argue that this ordered subset

237
00:08:27,520 --> 00:08:28,560
whatever it is

238
00:08:28,560 --> 00:08:31,680
satisfies some linear equations

239
00:08:31,680 --> 00:08:34,240
so just pointing to a concrete example

240
00:08:34,240 --> 00:08:35,200
what we show

241
00:08:35,200 --> 00:08:37,679
is that after going through this known

242
00:08:37,679 --> 00:08:39,039
list in some

243
00:08:39,039 --> 00:08:42,240
secret order that um

244
00:08:42,240 --> 00:08:44,320
you wind up with a reordered list where

245
00:08:44,320 --> 00:08:46,080
linear equations are satisfied

246
00:08:46,080 --> 00:08:49,040
right so for example um these top two

247
00:08:49,040 --> 00:08:50,240
elements

248
00:08:50,240 --> 00:08:52,080
uh should add to zero and the rest

249
00:08:52,080 --> 00:08:53,519
should be zero right

250
00:08:53,519 --> 00:08:55,120
of course this is exactly what we want

251
00:08:55,120 --> 00:08:57,680
to show in anonymous ether

252
00:08:57,680 --> 00:09:00,320
um and the key property is that it it

253
00:09:00,320 --> 00:09:02,399
remains secret to the verifier what that

254
00:09:02,399 --> 00:09:03,680
reordering was

255
00:09:03,680 --> 00:09:05,440
which caused these linear equations to

256
00:09:05,440 --> 00:09:08,959
get satisfied

257
00:09:08,959 --> 00:09:10,720
in this particular case that amounts to

258
00:09:10,720 --> 00:09:12,560
saying that the indices where the center

259
00:09:12,560 --> 00:09:13,279
and receiver

260
00:09:13,279 --> 00:09:15,279
reside should remain secret which is

261
00:09:15,279 --> 00:09:18,000
exactly what we want to show

262
00:09:18,000 --> 00:09:19,760
so how does this work technically well

263
00:09:19,760 --> 00:09:21,519
going back to regular one out of many

264
00:09:21,519 --> 00:09:22,080
proofs

265
00:09:22,080 --> 00:09:23,920
the way these get done is that the

266
00:09:23,920 --> 00:09:25,600
prover chooses and

267
00:09:25,600 --> 00:09:27,600
in some sense commits to a linear sized

268
00:09:27,600 --> 00:09:28,959
array of polynomials

269
00:09:28,959 --> 00:09:30,080
and the key property of these

270
00:09:30,080 --> 00:09:31,839
polynomials has to do with their degrees

271
00:09:31,839 --> 00:09:32,399
so

272
00:09:32,399 --> 00:09:35,120
only at the secret index is this

273
00:09:35,120 --> 00:09:36,640
polynomial of high degree

274
00:09:36,640 --> 00:09:39,279
its degree m where m is log of the

275
00:09:39,279 --> 00:09:40,640
length of a list

276
00:09:40,640 --> 00:09:42,800
and manic and the rest of these are of

277
00:09:42,800 --> 00:09:43,839
lower degree

278
00:09:43,839 --> 00:09:46,800
and um when when the verifier sends a

279
00:09:46,800 --> 00:09:48,399
challenge the prover can convey to the

280
00:09:48,399 --> 00:09:50,080
verifier the evaluations of these

281
00:09:50,080 --> 00:09:51,279
polynomials at

282
00:09:51,279 --> 00:09:54,000
the challenge first of all the verifier

283
00:09:54,000 --> 00:09:55,680
at this point is sort of convinced

284
00:09:55,680 --> 00:09:57,279
that these take the right form that

285
00:09:57,279 --> 00:09:58,800
they're indeed evaluations

286
00:09:58,800 --> 00:10:00,160
of polynomials which have the right

287
00:10:00,160 --> 00:10:02,480
structure

288
00:10:02,480 --> 00:10:04,079
you know one is of high degree and the

289
00:10:04,079 --> 00:10:06,399
rest are not and moreover the prover can

290
00:10:06,399 --> 00:10:07,920
convey this information in sort of

291
00:10:07,920 --> 00:10:09,760
log and communication which is a

292
00:10:09,760 --> 00:10:11,279
non-obvious fact

293
00:10:11,279 --> 00:10:14,320
described in in the original paper

294
00:10:14,320 --> 00:10:16,160
and the idea is that if the verifier

295
00:10:16,160 --> 00:10:17,920
takes the dot product between this

296
00:10:17,920 --> 00:10:18,560
vector of

297
00:10:18,560 --> 00:10:20,720
of commitments and the vector of scalars

298
00:10:20,720 --> 00:10:23,040
then by construction of the polynomials

299
00:10:23,040 --> 00:10:26,240
the verifier ends up with exactly the

300
00:10:26,240 --> 00:10:26,880
desired

301
00:10:26,880 --> 00:10:29,600
secret element raised to a high power of

302
00:10:29,600 --> 00:10:30,160
x

303
00:10:30,160 --> 00:10:32,720
and then plus sort of lower order terms

304
00:10:32,720 --> 00:10:34,640
which depend on lower powers of x

305
00:10:34,640 --> 00:10:37,200
and the prover can anticipate these in

306
00:10:37,200 --> 00:10:38,000
advance

307
00:10:38,000 --> 00:10:39,519
and sort of send the appropriate

308
00:10:39,519 --> 00:10:43,279
correction terms before seeing x

309
00:10:43,279 --> 00:10:45,040
now there's a powerful technique here

310
00:10:45,040 --> 00:10:46,880
which is being left on the table which

311
00:10:46,880 --> 00:10:48,560
is that

312
00:10:48,560 --> 00:10:50,959
at this point once the verifier has

313
00:10:50,959 --> 00:10:54,880
access to this vector of a special form

314
00:10:54,880 --> 00:10:56,800
though the verifier by design knows

315
00:10:56,800 --> 00:10:58,880
nothing about which index contains the

316
00:10:58,880 --> 00:11:00,320
high degree polynomial

317
00:11:00,320 --> 00:11:02,000
the verifier can nonetheless permute

318
00:11:02,000 --> 00:11:04,480
this vector in a predetermined way

319
00:11:04,480 --> 00:11:07,200
and get a good idea of what kind of path

320
00:11:07,200 --> 00:11:07,760
can be

321
00:11:07,760 --> 00:11:09,680
traced through the vector by this

322
00:11:09,680 --> 00:11:11,839
element as these permutations are

323
00:11:11,839 --> 00:11:15,040
conducted right and then redo the dot

324
00:11:15,040 --> 00:11:15,920
product each time

325
00:11:15,920 --> 00:11:19,600
roughly speaking right so um again

326
00:11:19,600 --> 00:11:22,000
for example we start with a familiar

327
00:11:22,000 --> 00:11:23,680
picture just like in regular one out of

328
00:11:23,680 --> 00:11:25,519
many proofs and take a dot product

329
00:11:25,519 --> 00:11:27,600
wind up with some element but then we

330
00:11:27,600 --> 00:11:28,640
permute this vector

331
00:11:28,640 --> 00:11:30,480
in this example there is a two-step

332
00:11:30,480 --> 00:11:32,240
circular shift permutation

333
00:11:32,240 --> 00:11:34,240
and then do a second dot product and we

334
00:11:34,240 --> 00:11:35,920
end up with something else which

335
00:11:35,920 --> 00:11:38,959
is is equally not known but it we know

336
00:11:38,959 --> 00:11:41,279
how it relates to the first one it's

337
00:11:41,279 --> 00:11:43,839
it's just down by two possibly with a

338
00:11:43,839 --> 00:11:44,800
wrap around

339
00:11:44,800 --> 00:11:46,640
and keep doing this and permuting the

340
00:11:46,640 --> 00:11:48,000
vector

341
00:11:48,000 --> 00:11:49,279
until we've cycled through the whole

342
00:11:49,279 --> 00:11:51,279
vector and what we get

343
00:11:51,279 --> 00:11:54,959
is a a subset of the original vector of

344
00:11:54,959 --> 00:11:56,320
a very specific kind

345
00:11:56,320 --> 00:11:58,639
but whose contents and order are both

346
00:11:58,639 --> 00:11:59,440
secret

347
00:11:59,440 --> 00:12:03,360
um plus of course lower order terms um

348
00:12:03,360 --> 00:12:05,200
which which can be cancelled out by the

349
00:12:05,200 --> 00:12:07,600
prover in a similar way

350
00:12:07,600 --> 00:12:10,720
and what we can then show is that this

351
00:12:10,720 --> 00:12:11,360
subset

352
00:12:11,360 --> 00:12:13,760
satisfies some linear equations either

353
00:12:13,760 --> 00:12:16,079
they are all zero or they reside in some

354
00:12:16,079 --> 00:12:19,120
known hyperplane or something like that

355
00:12:19,120 --> 00:12:20,800
and we can see why this is a

356
00:12:20,800 --> 00:12:22,240
generalization of regular one out of

357
00:12:22,240 --> 00:12:24,079
many proofs right so that

358
00:12:24,079 --> 00:12:25,839
instance corresponds to the case where

359
00:12:25,839 --> 00:12:27,920
the permutation is the sort of identity

360
00:12:27,920 --> 00:12:28,720
permutation

361
00:12:28,720 --> 00:12:30,720
so you just get the one element and then

362
00:12:30,720 --> 00:12:32,800
the map is the identity map on

363
00:12:32,800 --> 00:12:35,680
one variable right to satisfy that map

364
00:12:35,680 --> 00:12:36,839
just means to be

365
00:12:36,839 --> 00:12:39,839
zero

366
00:12:40,079 --> 00:12:42,320
okay so just one point about um

367
00:12:42,320 --> 00:12:43,680
efficiency in practice

368
00:12:43,680 --> 00:12:46,800
is that uh if you unwind these sort of

369
00:12:46,800 --> 00:12:48,480
constructions what you wind up with

370
00:12:48,480 --> 00:12:51,600
is writing down this vector of pi's in

371
00:12:51,600 --> 00:12:53,200
the top row of a matrix and then

372
00:12:53,200 --> 00:12:54,720
obtaining the subsequent rows of the

373
00:12:54,720 --> 00:12:56,720
matrix by permeating the top row

374
00:12:56,720 --> 00:13:00,079
and in the case that this permutation is

375
00:13:00,079 --> 00:13:01,519
a shift permutation

376
00:13:01,519 --> 00:13:03,360
and i argue in the paper that this in

377
00:13:03,360 --> 00:13:06,000
some sense is the canonical case then

378
00:13:06,000 --> 00:13:06,880
this matrix

379
00:13:06,880 --> 00:13:09,839
is a circulant matrix and the

380
00:13:09,839 --> 00:13:11,120
multiplication

381
00:13:11,120 --> 00:13:14,000
which is now a convolution can be done

382
00:13:14,000 --> 00:13:16,240
in log n time using the number theoretic

383
00:13:16,240 --> 00:13:16,880
transform

384
00:13:16,880 --> 00:13:18,639
so this is a way to get really good

385
00:13:18,639 --> 00:13:20,880
performance for the

386
00:13:20,880 --> 00:13:24,639
prover and verifier okay so this gives

387
00:13:24,639 --> 00:13:26,000
you some really nice

388
00:13:26,000 --> 00:13:29,440
applications in practice for example

389
00:13:29,440 --> 00:13:32,000
given any vector of commitments i can

390
00:13:32,000 --> 00:13:34,240
argue that i know how to open those to a

391
00:13:34,240 --> 00:13:35,839
standard basis vector but without

392
00:13:35,839 --> 00:13:37,680
telling you which standard bases vector

393
00:13:37,680 --> 00:13:39,199
right so one is one and the rest are

394
00:13:39,199 --> 00:13:43,199
zero but you don't know which one is one

395
00:13:43,199 --> 00:13:46,320
for example i can show that given

396
00:13:46,320 --> 00:13:48,720
a the vector of messages after getting

397
00:13:48,720 --> 00:13:50,720
shifted by some secret offset would then

398
00:13:50,720 --> 00:13:52,399
reside in a hyperplane

399
00:13:52,399 --> 00:13:55,199
but not tell you what that offset is i

400
00:13:55,199 --> 00:13:55,680
can

401
00:13:55,680 --> 00:13:59,040
uh for example i can argue that either

402
00:13:59,040 --> 00:13:59,600
all of the

403
00:13:59,600 --> 00:14:02,800
even indexed permutations commitments i

404
00:14:02,800 --> 00:14:04,160
can open to zero or

405
00:14:04,160 --> 00:14:06,160
the odd indexed ones but not tell you

406
00:14:06,160 --> 00:14:07,839
which of those

407
00:14:07,839 --> 00:14:09,519
so these are all sort of much richer

408
00:14:09,519 --> 00:14:11,440
statements than you can prove

409
00:14:11,440 --> 00:14:14,839
using just regular one-out-of-many

410
00:14:14,839 --> 00:14:16,399
proofs

411
00:14:16,399 --> 00:14:19,360
okay so i've fully implemented anonymous

412
00:14:19,360 --> 00:14:19,839
ether

413
00:14:19,839 --> 00:14:21,600
you can find the implementation in my

414
00:14:21,600 --> 00:14:23,600
github it's also mirrored in consensus's

415
00:14:23,600 --> 00:14:24,240
github

416
00:14:24,240 --> 00:14:28,079
and you can see that the performance is

417
00:14:28,079 --> 00:14:30,079
more or less comparable or competitive

418
00:14:30,079 --> 00:14:32,959
to classic standalone private payment

419
00:14:32,959 --> 00:14:36,079
uh cryptocurrencies uh even though you

420
00:14:36,079 --> 00:14:37,519
know on the one hand this runs entirely

421
00:14:37,519 --> 00:14:38,959
within a smart contract

422
00:14:38,959 --> 00:14:42,320
and moreover um obviously has these nice

423
00:14:42,320 --> 00:14:44,480
wallet properties

424
00:14:44,480 --> 00:14:46,560
gas use on the ethereum network is is

425
00:14:46,560 --> 00:14:47,680
fairly high

426
00:14:47,680 --> 00:14:49,680
around 7 million so this might make it

427
00:14:49,680 --> 00:14:51,360
prohibitive for use now

428
00:14:51,360 --> 00:14:54,320
because of fees but perhaps when

429
00:14:54,320 --> 00:14:56,399
ethereum 2 comes out this would be

430
00:14:56,399 --> 00:15:00,320
more feasible in any case that is my

431
00:15:00,320 --> 00:15:01,959
time so thank you very much for

432
00:15:01,959 --> 00:15:04,959
listening

