1
00:00:01,439 --> 00:00:03,520
hello everyone i'm winton

2
00:00:03,520 --> 00:00:05,680
today i'm going to introduce microsquare

3
00:00:05,680 --> 00:00:08,240
a low latency transparency log system

4
00:00:08,240 --> 00:00:10,960
this is a joint work with kian harika

5
00:00:10,960 --> 00:00:14,080
sanjin and reluca

6
00:00:14,080 --> 00:00:16,880
to put our work into context let's first

7
00:00:16,880 --> 00:00:18,480
consider the problem with

8
00:00:18,480 --> 00:00:21,439
untrusted servers in encrypted systems

9
00:00:21,439 --> 00:00:22,240
so in such

10
00:00:22,240 --> 00:00:24,880
system they usually will have a pcas

11
00:00:24,880 --> 00:00:26,480
server which manages

12
00:00:26,480 --> 00:00:29,519
users public keys so for example bob

13
00:00:29,519 --> 00:00:31,599
will put his public key on this pki

14
00:00:31,599 --> 00:00:32,238
server

15
00:00:32,238 --> 00:00:34,160
and later if alice wants to send the

16
00:00:34,160 --> 00:00:35,360
message to bob

17
00:00:35,360 --> 00:00:38,239
alice will download this public key from

18
00:00:38,239 --> 00:00:40,800
the pca server and use it to encrypt the

19
00:00:40,800 --> 00:00:42,079
message

20
00:00:42,079 --> 00:00:45,120
however because the server is untrusted

21
00:00:45,120 --> 00:00:48,480
it might be compromised by an attacker

22
00:00:48,480 --> 00:00:51,600
so when alice look up bob's public key

23
00:00:51,600 --> 00:00:54,399
the server may reply with a malicious

24
00:00:54,399 --> 00:00:55,600
key to alice

25
00:00:55,600 --> 00:00:57,920
and if alice used this malicious public

26
00:00:57,920 --> 00:00:59,680
key to encrypt the message

27
00:00:59,680 --> 00:01:02,800
the attacker might be able to decrypt

28
00:01:02,800 --> 00:01:06,798
and read the secrets in the message

29
00:01:08,799 --> 00:01:11,280
to solve this problem people proposed

30
00:01:11,280 --> 00:01:12,400
transparency logs

31
00:01:12,400 --> 00:01:14,799
so transparency logs allow users and

32
00:01:14,799 --> 00:01:17,200
auditors to monitor the states and the

33
00:01:17,200 --> 00:01:18,159
behavior

34
00:01:18,159 --> 00:01:20,720
on an untrusted servers and there are

35
00:01:20,720 --> 00:01:23,280
many adoptions in nowadays system

36
00:01:23,280 --> 00:01:26,080
the most famous one is the certificate

37
00:01:26,080 --> 00:01:27,280
transparency which

38
00:01:27,280 --> 00:01:29,520
is used to monitor the website

39
00:01:29,520 --> 00:01:30,479
certificate

40
00:01:30,479 --> 00:01:32,560
and it turns out that the certificate

41
00:01:32,560 --> 00:01:35,520
transparency can help users to detect

42
00:01:35,520 --> 00:01:38,400
malicious certificates in nowadays

43
00:01:38,400 --> 00:01:39,600
internet

44
00:01:39,600 --> 00:01:41,280
and there are some other transparency

45
00:01:41,280 --> 00:01:43,439
logs such as the key transparency and

46
00:01:43,439 --> 00:01:46,880
the software transparency

47
00:01:47,439 --> 00:01:50,320
okay now okay now let me introduce the

48
00:01:50,320 --> 00:01:52,159
systems architecture

49
00:01:52,159 --> 00:01:54,320
i will use one of the prior work as a

50
00:01:54,320 --> 00:01:55,600
representative

51
00:01:55,600 --> 00:01:58,399
so in such system the pki server will

52
00:01:58,399 --> 00:01:59,439
periodically

53
00:01:59,439 --> 00:02:01,840
upload a digest which summarize the

54
00:02:01,840 --> 00:02:02,719
current state

55
00:02:02,719 --> 00:02:05,439
to the auditors so the pki server will

56
00:02:05,439 --> 00:02:07,360
divide the time into the epoch

57
00:02:07,360 --> 00:02:10,000
and the end of each epoch the pki server

58
00:02:10,000 --> 00:02:12,400
will publish the digest to the auditor

59
00:02:12,400 --> 00:02:14,640
and the auditors will gossip this digest

60
00:02:14,640 --> 00:02:15,840
with each other

61
00:02:15,840 --> 00:02:18,560
to avoid the equivocation and suppose

62
00:02:18,560 --> 00:02:19,280
the users

63
00:02:19,280 --> 00:02:22,080
append a new public key to the server it

64
00:02:22,080 --> 00:02:22,640
will be

65
00:02:22,640 --> 00:02:24,959
summarized in the digest of the next

66
00:02:24,959 --> 00:02:25,840
airport and

67
00:02:25,840 --> 00:02:28,319
also will be sent to the auditors and

68
00:02:28,319 --> 00:02:29,440
when alice

69
00:02:29,440 --> 00:02:31,840
retrieve bob's public key from the pks

70
00:02:31,840 --> 00:02:32,480
server

71
00:02:32,480 --> 00:02:34,720
the server will also provide a local

72
00:02:34,720 --> 00:02:36,000
proof and

73
00:02:36,000 --> 00:02:38,160
addis will also download the latest

74
00:02:38,160 --> 00:02:39,920
address from the auditors

75
00:02:39,920 --> 00:02:42,319
and by checking the local proof and all

76
00:02:42,319 --> 00:02:43,280
the digest

77
00:02:43,280 --> 00:02:46,480
alice can ensure this is the public key

78
00:02:46,480 --> 00:02:48,959
of bob

79
00:02:49,760 --> 00:02:52,319
and one important mechanism in

80
00:02:52,319 --> 00:02:54,400
transparency logs is monitoring

81
00:02:54,400 --> 00:02:57,120
so each data owner in the transparency

82
00:02:57,120 --> 00:02:57,519
logs

83
00:02:57,519 --> 00:03:00,080
is responsible for monitoring their own

84
00:03:00,080 --> 00:03:00,720
data

85
00:03:00,720 --> 00:03:03,280
so for example the bob will periodically

86
00:03:03,280 --> 00:03:03,840
look up

87
00:03:03,840 --> 00:03:06,959
its own public key on the pks server and

88
00:03:06,959 --> 00:03:09,360
by checking the lookup proof and the

89
00:03:09,360 --> 00:03:11,040
digest from the auditors

90
00:03:11,040 --> 00:03:14,319
bob is ensured that its own

91
00:03:14,319 --> 00:03:17,360
his own public keys remains unchanged

92
00:03:17,360 --> 00:03:20,400
on the pca server and because the pi

93
00:03:20,400 --> 00:03:21,760
server will publish

94
00:03:21,760 --> 00:03:25,599
multiple digest so each data owner will

95
00:03:25,599 --> 00:03:28,080
monitor every single address published

96
00:03:28,080 --> 00:03:29,280
by the server

97
00:03:29,280 --> 00:03:32,640
and this incurs a very heavy overhead on

98
00:03:32,640 --> 00:03:33,040
both

99
00:03:33,040 --> 00:03:35,920
user and the server side so for example

100
00:03:35,920 --> 00:03:38,080
let's assume the epoch interval is one

101
00:03:38,080 --> 00:03:38,959
second

102
00:03:38,959 --> 00:03:42,000
then the bob will download 65 gigabyte

103
00:03:42,000 --> 00:03:44,159
per year just for monitoring its own

104
00:03:44,159 --> 00:03:45,760
public key

105
00:03:45,760 --> 00:03:48,720
and also because there are multiple

106
00:03:48,720 --> 00:03:50,239
users in the system

107
00:03:50,239 --> 00:03:52,159
so for example if there are 1 billion

108
00:03:52,159 --> 00:03:54,480
users then the server need to provide

109
00:03:54,480 --> 00:03:58,080
65 gigabyte for each of these users

110
00:03:58,080 --> 00:04:01,200
to monitor their data so

111
00:04:01,200 --> 00:04:04,000
to reduce the monitoring costs the prior

112
00:04:04,000 --> 00:04:05,040
system

113
00:04:05,040 --> 00:04:07,840
usually assume the epoch interval to be

114
00:04:07,840 --> 00:04:08,799
long enough

115
00:04:08,799 --> 00:04:11,840
such as one hour or one day

116
00:04:11,840 --> 00:04:14,640
however this epoch interval will affect

117
00:04:14,640 --> 00:04:14,959
the

118
00:04:14,959 --> 00:04:18,320
updated latency of transparency logs

119
00:04:18,320 --> 00:04:21,279
because the server's new state will not

120
00:04:21,279 --> 00:04:22,880
be visible to the user

121
00:04:22,880 --> 00:04:26,479
unless it publish a new digest

122
00:04:26,479 --> 00:04:29,040
so the low latency and the low latency

123
00:04:29,040 --> 00:04:29,520
updates

124
00:04:29,520 --> 00:04:31,040
is very important for both

125
00:04:31,040 --> 00:04:34,000
responsiveness and the user experience

126
00:04:34,000 --> 00:04:36,639
so for example the user may not want to

127
00:04:36,639 --> 00:04:38,000
wait for an hour

128
00:04:38,000 --> 00:04:40,320
or a day to revoke their compromised

129
00:04:40,320 --> 00:04:41,520
public key

130
00:04:41,520 --> 00:04:44,000
and also this update latency will affect

131
00:04:44,000 --> 00:04:46,639
the actual latency in the application

132
00:04:46,639 --> 00:04:49,280
so for example in the iot system the

133
00:04:49,280 --> 00:04:50,720
user may want to deploy

134
00:04:50,720 --> 00:04:54,560
their iot devices as soon as possible

135
00:04:54,560 --> 00:04:57,120
and how to reduce this monitoring cost

136
00:04:57,120 --> 00:04:57,919
is actually

137
00:04:57,919 --> 00:05:00,800
remains a challenging point a problem in

138
00:05:00,800 --> 00:05:01,919
the literature

139
00:05:01,919 --> 00:05:04,240
so many prior work are trying to reduce

140
00:05:04,240 --> 00:05:05,520
the monitoring costs

141
00:05:05,520 --> 00:05:08,639
but they either result in high overhead

142
00:05:08,639 --> 00:05:14,080
auditors or high-appended memory costs

143
00:05:14,080 --> 00:05:17,039
so marco square is a low-latency

144
00:05:17,039 --> 00:05:18,800
transparency log system

145
00:05:18,800 --> 00:05:22,080
which simultaneously provides efficient

146
00:05:22,080 --> 00:05:24,400
monitoring and low latency updates

147
00:05:24,400 --> 00:05:27,280
and at the same time it will maintain

148
00:05:27,280 --> 00:05:28,639
the efficiency of

149
00:05:28,639 --> 00:05:31,759
panned and lookup

150
00:05:31,919 --> 00:05:34,960
before introducing microsquare's design

151
00:05:34,960 --> 00:05:37,280
let me first introduce the use of merkle

152
00:05:37,280 --> 00:05:39,280
tree in transparency logs

153
00:05:39,280 --> 00:05:42,080
and there are two types of mogul trees

154
00:05:42,080 --> 00:05:43,759
in the literature

155
00:05:43,759 --> 00:05:45,360
and let me first explain the

156
00:05:45,360 --> 00:05:48,400
chronological tree

157
00:05:50,880 --> 00:05:53,360
transparency log is responsible for

158
00:05:53,360 --> 00:05:55,120
managing key value pairs

159
00:05:55,120 --> 00:05:57,039
and to avoid the confusion with

160
00:05:57,039 --> 00:05:58,720
cryptographic keys

161
00:05:58,720 --> 00:06:01,680
i will refer it as id values in the rest

162
00:06:01,680 --> 00:06:04,319
of the talk

163
00:06:04,479 --> 00:06:07,199
suppose there are four id values in the

164
00:06:07,199 --> 00:06:08,160
system

165
00:06:08,160 --> 00:06:10,000
then they will be added into the

166
00:06:10,000 --> 00:06:11,360
chronological tree

167
00:06:11,360 --> 00:06:14,080
according to the when they are added

168
00:06:14,080 --> 00:06:15,919
into the system

169
00:06:15,919 --> 00:06:21,840
as shown in the following example

170
00:06:28,560 --> 00:06:30,960
and finally the digest will be the root

171
00:06:30,960 --> 00:06:33,039
hash of the whole tree

172
00:06:33,039 --> 00:06:35,039
the benefit of the chronicle tree is

173
00:06:35,039 --> 00:06:36,960
that it's very easy to prove

174
00:06:36,960 --> 00:06:39,440
a pen only of those leaves between

175
00:06:39,440 --> 00:06:40,800
digest transitions

176
00:06:40,800 --> 00:06:42,639
that's because there is a chronological

177
00:06:42,639 --> 00:06:44,479
order among these leaves

178
00:06:44,479 --> 00:06:46,880
however on the other hand it's very hard

179
00:06:46,880 --> 00:06:48,240
to look up by id

180
00:06:48,240 --> 00:06:50,560
efficiently but because there is no

181
00:06:50,560 --> 00:06:52,880
order according to the id

182
00:06:52,880 --> 00:06:55,599
of the leaf

183
00:06:56,960 --> 00:07:00,319
so prefix tree will manage the data in a

184
00:07:00,319 --> 00:07:01,280
different way

185
00:07:01,280 --> 00:07:04,000
so prefix tree will first give an index

186
00:07:04,000 --> 00:07:05,120
for each id

187
00:07:05,120 --> 00:07:07,680
those index can just be the hash of the

188
00:07:07,680 --> 00:07:08,639
id

189
00:07:08,639 --> 00:07:11,120
and the leave anxiety values will be

190
00:07:11,120 --> 00:07:13,759
added into the prefix tree according to

191
00:07:13,759 --> 00:07:15,120
this index function

192
00:07:15,120 --> 00:07:18,639
as shown in this example

193
00:07:24,479 --> 00:07:26,880
and if there are multiple values for the

194
00:07:26,880 --> 00:07:27,759
same id

195
00:07:27,759 --> 00:07:30,000
then they will be added into the same

196
00:07:30,000 --> 00:07:33,840
leaf node of the previous tree

197
00:07:35,520 --> 00:07:37,599
and finally the digest will be the root

198
00:07:37,599 --> 00:07:40,000
hash of the whole prefix tree

199
00:07:40,000 --> 00:07:42,400
and the benefit is that it can support a

200
00:07:42,400 --> 00:07:43,440
efficient lookup

201
00:07:43,440 --> 00:07:47,120
id according to this index design

202
00:07:47,120 --> 00:07:49,360
but the downside is that it's very hard

203
00:07:49,360 --> 00:07:51,840
to prove the append only property

204
00:07:51,840 --> 00:07:54,160
among between the digest transition

205
00:07:54,160 --> 00:07:54,960
because there is

206
00:07:54,960 --> 00:07:58,560
no chronological order

207
00:07:58,560 --> 00:08:02,560
so ideally what we really want is

208
00:08:02,560 --> 00:08:04,800
to preserve the properties or the

209
00:08:04,800 --> 00:08:07,599
advantages of both two trees

210
00:08:07,599 --> 00:08:09,360
so some prior work are trying to

211
00:08:09,360 --> 00:08:11,759
maintain both trees at the same time

212
00:08:11,759 --> 00:08:14,400
however the prior works still need to

213
00:08:14,400 --> 00:08:16,720
verify the relationship between two

214
00:08:16,720 --> 00:08:17,280
trees

215
00:08:17,280 --> 00:08:19,919
and finally the result in roughly as

216
00:08:19,919 --> 00:08:21,039
expensive as

217
00:08:21,039 --> 00:08:24,479
using these trees alone

218
00:08:25,199 --> 00:08:27,440
in contrast motor square leverage a

219
00:08:27,440 --> 00:08:28,960
different data structure

220
00:08:28,960 --> 00:08:31,520
it leverages a two layer design which is

221
00:08:31,520 --> 00:08:33,440
inspired by the multi-dimensional data

222
00:08:33,440 --> 00:08:34,240
structure

223
00:08:34,240 --> 00:08:36,000
as the outer layer is still the

224
00:08:36,000 --> 00:08:37,519
conjugate tree which

225
00:08:37,519 --> 00:08:40,080
the leaf are organized in conjunction

226
00:08:40,080 --> 00:08:40,719
order

227
00:08:40,719 --> 00:08:42,719
and in the inner layer is the privilege

228
00:08:42,719 --> 00:08:45,040
tree and the hash of the the privilege

229
00:08:45,040 --> 00:08:46,800
tree will be stored into

230
00:08:46,800 --> 00:08:50,080
the internal node of the cloud tree and

231
00:08:50,080 --> 00:08:52,240
each internal node of the cloud tree

232
00:08:52,240 --> 00:08:54,800
will store a hash of different prefix

233
00:08:54,800 --> 00:08:57,120
trees

234
00:08:58,080 --> 00:09:00,880
now let's look at the detail so this is

235
00:09:00,880 --> 00:09:04,160
the usual conjugal tree

236
00:09:04,160 --> 00:09:06,160
and the difference is that in the mocha

237
00:09:06,160 --> 00:09:07,360
square the cro

238
00:09:07,360 --> 00:09:09,440
each internal node of the chronological

239
00:09:09,440 --> 00:09:12,160
tree will also store a root hash of the

240
00:09:12,160 --> 00:09:14,959
prefix tree

241
00:09:17,360 --> 00:09:20,080
now let me introduce how to construct

242
00:09:20,080 --> 00:09:21,360
the privilege tree

243
00:09:21,360 --> 00:09:24,320
so each periphery will be constructed

244
00:09:24,320 --> 00:09:25,600
using the leaves

245
00:09:25,600 --> 00:09:28,399
inside the subtree of the chronic tree

246
00:09:28,399 --> 00:09:29,600
so for example

247
00:09:29,600 --> 00:09:32,800
this specific prefigure tree will use

248
00:09:32,800 --> 00:09:33,440
the first

249
00:09:33,440 --> 00:09:36,480
and the second id values to construct

250
00:09:36,480 --> 00:09:40,720
because they are inside the subtree of

251
00:09:40,720 --> 00:09:44,560
inside this specific sub tree

252
00:09:45,600 --> 00:09:48,800
and similarly the prefix tree associated

253
00:09:48,800 --> 00:09:49,519
with the

254
00:09:49,519 --> 00:09:51,839
root node of the claudia tree will use

255
00:09:51,839 --> 00:09:53,120
all the id values

256
00:09:53,120 --> 00:09:56,160
to construct because all

257
00:09:56,160 --> 00:09:59,040
the sub this subtree covers all the id

258
00:09:59,040 --> 00:10:01,600
values in the system

259
00:10:01,600 --> 00:10:05,279
but of this data structure is that it

260
00:10:05,279 --> 00:10:07,680
preserves the advantages of both two

261
00:10:07,680 --> 00:10:08,399
trees as

262
00:10:08,399 --> 00:10:11,360
i was shown in the later protocol and

263
00:10:11,360 --> 00:10:11,760
also

264
00:10:11,760 --> 00:10:14,800
each values is only in log and prefix

265
00:10:14,800 --> 00:10:15,519
trees

266
00:10:15,519 --> 00:10:17,600
and the storage appended can also be

267
00:10:17,600 --> 00:10:19,760
proven to be very efficient

268
00:10:19,760 --> 00:10:21,839
but please refer to our paper for more

269
00:10:21,839 --> 00:10:24,320
details

270
00:10:24,560 --> 00:10:27,200
so now let me explain the monitoring

271
00:10:27,200 --> 00:10:28,880
protocol in muggle square

272
00:10:28,880 --> 00:10:30,880
so auditor in mocha square is

273
00:10:30,880 --> 00:10:32,160
responsible for

274
00:10:32,160 --> 00:10:34,959
monitoring the digest transition so

275
00:10:34,959 --> 00:10:37,120
whenever the server provides a new

276
00:10:37,120 --> 00:10:37,920
digest

277
00:10:37,920 --> 00:10:40,959
it will also provide an extension proof

278
00:10:40,959 --> 00:10:44,079
which allows the auditor to compute this

279
00:10:44,079 --> 00:10:44,959
new digest

280
00:10:44,959 --> 00:10:47,440
using the old digest and the extension

281
00:10:47,440 --> 00:10:48,000
proof

282
00:10:48,000 --> 00:10:50,399
and only if the auditors can recompute

283
00:10:50,399 --> 00:10:53,200
this new digest the auditor will

284
00:10:53,200 --> 00:10:55,839
accept this digest transition and this

285
00:10:55,839 --> 00:10:56,800
extension proof

286
00:10:56,800 --> 00:11:00,160
can be proven to have sites please also

287
00:11:00,160 --> 00:11:02,079
please refer to our paper for more

288
00:11:02,079 --> 00:11:03,519
details

289
00:11:03,519 --> 00:11:06,320
so the benefit of this auditor

290
00:11:06,320 --> 00:11:07,600
monitoring is that

291
00:11:07,600 --> 00:11:09,600
it will preserve the patent-only

292
00:11:09,600 --> 00:11:11,760
property of the prefix trees

293
00:11:11,760 --> 00:11:13,920
so that means that prefix trees that

294
00:11:13,920 --> 00:11:16,480
exist in an earlier epoch will remain

295
00:11:16,480 --> 00:11:18,959
the same for all future epochs

296
00:11:18,959 --> 00:11:21,120
but the downside is that the auditor

297
00:11:21,120 --> 00:11:22,560
does not actually

298
00:11:22,560 --> 00:11:25,360
check the content in the privileges and

299
00:11:25,360 --> 00:11:25,760
this

300
00:11:25,760 --> 00:11:28,720
may allow the attacker to add malicious

301
00:11:28,720 --> 00:11:31,200
content

302
00:11:31,279 --> 00:11:33,120
so to solve this problem we also

303
00:11:33,120 --> 00:11:35,200
leverage the owner monitoring

304
00:11:35,200 --> 00:11:38,560
so each data owner in our system

305
00:11:38,560 --> 00:11:40,959
will also check the prefix trees that

306
00:11:40,959 --> 00:11:42,000
are supposed to

307
00:11:42,000 --> 00:11:45,120
store its data so for example let's

308
00:11:45,120 --> 00:11:45,760
assume

309
00:11:45,760 --> 00:11:48,959
bob wants to monitor its own data

310
00:11:48,959 --> 00:11:51,040
then it will go through the path from

311
00:11:51,040 --> 00:11:52,079
the root to

312
00:11:52,079 --> 00:11:55,279
that leaf and check all the prefix trees

313
00:11:55,279 --> 00:11:58,320
in this path so the bob will check these

314
00:11:58,320 --> 00:12:01,200
prefix trees actually contain the bob's

315
00:12:01,200 --> 00:12:04,320
value and also those privileges

316
00:12:04,320 --> 00:12:07,120
are indeed included in the whole gradual

317
00:12:07,120 --> 00:12:07,839
tree

318
00:12:07,839 --> 00:12:10,160
and this proof is of size logan square

319
00:12:10,160 --> 00:12:11,920
because they are at most

320
00:12:11,920 --> 00:12:14,240
logins such prefectures and each

321
00:12:14,240 --> 00:12:16,320
privilege may cause login for the

322
00:12:16,320 --> 00:12:17,839
monitoring

323
00:12:17,839 --> 00:12:20,800
the benefit of this owner monitoring

324
00:12:20,800 --> 00:12:21,920
mechanism is that

325
00:12:21,920 --> 00:12:24,639
the attacker cannot hide the data

326
00:12:24,639 --> 00:12:26,079
owner's values

327
00:12:26,079 --> 00:12:29,200
without being detected and also due to

328
00:12:29,200 --> 00:12:30,720
the auditor monitoring

329
00:12:30,720 --> 00:12:33,440
the append only property is enforced for

330
00:12:33,440 --> 00:12:34,560
the previous tree

331
00:12:34,560 --> 00:12:36,720
so each data owner only needs to check

332
00:12:36,720 --> 00:12:38,800
those prefix trees once throughout the

333
00:12:38,800 --> 00:12:40,880
throughout the system life

334
00:12:40,880 --> 00:12:42,880
but there's still some problem uh

335
00:12:42,880 --> 00:12:44,000
because the

336
00:12:44,000 --> 00:12:45,920
data owner does not check all the

337
00:12:45,920 --> 00:12:47,839
privileges so there's still

338
00:12:47,839 --> 00:12:50,160
a possibility for the attacker to add

339
00:12:50,160 --> 00:12:51,519
malicious content

340
00:12:51,519 --> 00:12:53,680
so to solve this problem we introduced

341
00:12:53,680 --> 00:12:55,839
the signature chain code design

342
00:12:55,839 --> 00:12:58,320
but due to the time limit please also

343
00:12:58,320 --> 00:13:02,399
refer to our paper for more details

344
00:13:02,480 --> 00:13:05,519
okay finally nami introduced how to look

345
00:13:05,519 --> 00:13:06,959
up in our system

346
00:13:06,959 --> 00:13:09,839
so suppose alice still want to have

347
00:13:09,839 --> 00:13:11,360
bob's public key

348
00:13:11,360 --> 00:13:13,279
and the pki server will maintain a

349
00:13:13,279 --> 00:13:15,200
multi-square's data structure

350
00:13:15,200 --> 00:13:18,800
which will contain a forest of conjugal

351
00:13:18,800 --> 00:13:19,600
trees

352
00:13:19,600 --> 00:13:22,079
and there might be multiple bobs public

353
00:13:22,079 --> 00:13:23,360
key in the system

354
00:13:23,360 --> 00:13:25,360
and what alice really wants is the

355
00:13:25,360 --> 00:13:27,680
latest one because all the previous

356
00:13:27,680 --> 00:13:30,800
public key are revoked by bob and

357
00:13:30,800 --> 00:13:33,440
the what alice will check is that the

358
00:13:33,440 --> 00:13:34,160
alley

359
00:13:34,160 --> 00:13:37,200
alice will check this is indeed the

360
00:13:37,200 --> 00:13:40,000
bob's public key so which is included in

361
00:13:40,000 --> 00:13:41,440
the system

362
00:13:41,440 --> 00:13:44,480
and also it will check there is no other

363
00:13:44,480 --> 00:13:46,560
public key is appended after

364
00:13:46,560 --> 00:13:48,800
this public key so it will check in the

365
00:13:48,800 --> 00:13:50,079
chronological order this

366
00:13:50,079 --> 00:13:52,800
is the latest value for bob and this

367
00:13:52,800 --> 00:13:53,199
proof

368
00:13:53,199 --> 00:13:55,760
uh can be proven to have size logan

369
00:13:55,760 --> 00:13:56,320
square

370
00:13:56,320 --> 00:13:58,000
because there are multi there are at

371
00:13:58,000 --> 00:13:59,839
most logan chronograph tree in the

372
00:13:59,839 --> 00:14:00,560
forest

373
00:14:00,560 --> 00:14:02,560
and each privilege tree may cause the

374
00:14:02,560 --> 00:14:04,800
login for the lookup

375
00:14:04,800 --> 00:14:06,880
and we all made some details of the

376
00:14:06,880 --> 00:14:08,000
signature chains

377
00:14:08,000 --> 00:14:10,160
please also refer to our paper for more

378
00:14:10,160 --> 00:14:12,240
details

379
00:14:12,240 --> 00:14:15,040
finally let me give you some evaluation

380
00:14:15,040 --> 00:14:16,160
results we

381
00:14:16,160 --> 00:14:18,079
implement motor square using the go

382
00:14:18,079 --> 00:14:20,000
language and then benchmark it on the

383
00:14:20,000 --> 00:14:22,880
amazon ec2 instances

384
00:14:22,880 --> 00:14:27,040
and we compare microsquare with conics

385
00:14:27,040 --> 00:14:28,880
according to how many users can be

386
00:14:28,880 --> 00:14:30,880
supported by a single server

387
00:14:30,880 --> 00:14:34,320
under a real-world workload and it turns

388
00:14:34,320 --> 00:14:34,880
out that

389
00:14:34,880 --> 00:14:37,120
merkle square's performance are not

390
00:14:37,120 --> 00:14:38,560
affected by the epoch

391
00:14:38,560 --> 00:14:41,279
interval and when the epoch interval is

392
00:14:41,279 --> 00:14:42,240
one second

393
00:14:42,240 --> 00:14:44,880
it turns out that mockup square can

394
00:14:44,880 --> 00:14:47,760
support 100 times more users than the

395
00:14:47,760 --> 00:14:52,560
conics so in conclusion moco square is a

396
00:14:52,560 --> 00:14:54,720
low latency transparency log system

397
00:14:54,720 --> 00:14:57,279
built on top of a new authenticated data

398
00:14:57,279 --> 00:14:58,240
structure

399
00:14:58,240 --> 00:15:00,160
and the mock squares technique can be

400
00:15:00,160 --> 00:15:02,560
used to build a trustworthy pki

401
00:15:02,560 --> 00:15:05,600
or certificating structure for a lot of

402
00:15:05,600 --> 00:15:08,320
encrypted system so much for this thank

403
00:15:08,320 --> 00:15:10,800
you

