1
00:00:01,680 --> 00:00:03,360
hi everyone thanks for tuning in i'm

2
00:00:03,360 --> 00:00:04,560
going to talk about our work

3
00:00:04,560 --> 00:00:06,879
on scalable rsa modulus generation with

4
00:00:06,879 --> 00:00:08,240
the dishonest majority

5
00:00:08,240 --> 00:00:10,639
this is joint work with megan chen

6
00:00:10,639 --> 00:00:12,400
karmith hazar yuvalu shai

7
00:00:12,400 --> 00:00:16,960
yuri kashnikov daniele machanchio

8
00:00:19,520 --> 00:00:22,000
what's in rsa models it's simply a

9
00:00:22,000 --> 00:00:23,760
product of two primes

10
00:00:23,760 --> 00:00:26,880
also referred to as by prime

11
00:00:26,880 --> 00:00:28,960
since its inception for designing the

12
00:00:28,960 --> 00:00:30,160
first public key

13
00:00:30,160 --> 00:00:32,640
encryption rsa has found use in several

14
00:00:32,640 --> 00:00:34,160
cryptographic primitives

15
00:00:34,160 --> 00:00:36,719
most recent of which has been for the

16
00:00:36,719 --> 00:00:39,040
design of verifiable delay functions

17
00:00:39,040 --> 00:00:45,600
and more recently zero knowledge snarks

18
00:00:45,600 --> 00:00:47,760
i'm going to talk about verifiable delay

19
00:00:47,760 --> 00:00:48,960
functions as this has been the

20
00:00:48,960 --> 00:00:50,480
motivation for

21
00:00:50,480 --> 00:00:53,280
our work introduced by reverse shamir

22
00:00:53,280 --> 00:00:53,600
and

23
00:00:53,600 --> 00:00:55,440
wagner a related primitive called

24
00:00:55,440 --> 00:00:56,960
inherently sequential

25
00:00:56,960 --> 00:00:59,359
functions requires that a function be

26
00:00:59,359 --> 00:01:00,160
only

27
00:01:00,160 --> 00:01:02,559
computable sequentially no matter what

28
00:01:02,559 --> 00:01:03,520
space you have

29
00:01:03,520 --> 00:01:05,280
the only way is to compute it

30
00:01:05,280 --> 00:01:06,880
sequentially so consider this function

31
00:01:06,880 --> 00:01:08,640
where you're repeatedly squaring

32
00:01:08,640 --> 00:01:11,439
mod n where n is a y prime the only way

33
00:01:11,439 --> 00:01:12,080
to do it

34
00:01:12,080 --> 00:01:15,600
is to do it in t steps where you square

35
00:01:15,600 --> 00:01:18,720
g repeatedly three times and this was

36
00:01:18,720 --> 00:01:20,640
conjectured by reverse shamir

37
00:01:20,640 --> 00:01:23,280
and wagner more recently this inherently

38
00:01:23,280 --> 00:01:25,119
sequential function has been

39
00:01:25,119 --> 00:01:27,200
enhanced to also get the verifiable

40
00:01:27,200 --> 00:01:29,759
property by two excellent uh

41
00:01:29,759 --> 00:01:32,000
works by pure track and vesilowski

42
00:01:32,000 --> 00:01:32,960
independently

43
00:01:32,960 --> 00:01:35,600
they showed that once a you know a

44
00:01:35,600 --> 00:01:37,600
function is computed at a certain point

45
00:01:37,600 --> 00:01:39,520
you can also attach a short proof that

46
00:01:39,520 --> 00:01:41,360
can be verified very quickly

47
00:01:41,360 --> 00:01:45,040
of its validity

48
00:01:45,200 --> 00:01:48,479
so this works if uh

49
00:01:48,479 --> 00:01:51,360
this this inherently sequential property

50
00:01:51,360 --> 00:01:52,399
works only

51
00:01:52,399 --> 00:01:54,960
if this by prime n is of the form that

52
00:01:54,960 --> 00:01:55,680
no one knows

53
00:01:55,680 --> 00:01:59,360
its its prime factors

54
00:01:59,360 --> 00:02:01,600
so the goal for us in this work is for

55
00:02:01,600 --> 00:02:02,560
you know

56
00:02:02,560 --> 00:02:05,520
for for the world to have an

57
00:02:05,520 --> 00:02:07,119
instantiation of a verifiable delay

58
00:02:07,119 --> 00:02:09,520
function based on an rsa bike run

59
00:02:09,520 --> 00:02:11,280
so the goal is to sample a buy prime and

60
00:02:11,280 --> 00:02:13,040
where the factorization is hidden

61
00:02:13,040 --> 00:02:14,640
and we're going to use an approach that

62
00:02:14,640 --> 00:02:16,400
is you know time tested for

63
00:02:16,400 --> 00:02:18,000
doing such an approach i mean short of

64
00:02:18,000 --> 00:02:19,920
having some secure hardware do this

65
00:02:19,920 --> 00:02:22,239
the only approach we know of is to use a

66
00:02:22,239 --> 00:02:24,080
secure multi-party computation

67
00:02:24,080 --> 00:02:28,160
or npc so what's the decider that we

68
00:02:28,160 --> 00:02:31,519
you know uh put forth for uh for this

69
00:02:31,519 --> 00:02:34,080
for this setup ceremony to generate a

70
00:02:34,080 --> 00:02:35,599
buy prime

71
00:02:35,599 --> 00:02:38,160
so we wanted to generate a modulus of

72
00:02:38,160 --> 00:02:40,000
size 20 48 bits

73
00:02:40,000 --> 00:02:42,160
for a threshold of n minus one

74
00:02:42,160 --> 00:02:44,160
corruption meaning an active adversary

75
00:02:44,160 --> 00:02:45,920
can corrupt all but one

76
00:02:45,920 --> 00:02:48,720
of the parties we want to scale it to

77
00:02:48,720 --> 00:02:50,400
over a thousand parties i should say

78
00:02:50,400 --> 00:02:50,800
that

79
00:02:50,800 --> 00:02:53,120
in this dishonest majority setting no

80
00:02:53,120 --> 00:02:54,959
one has i mean there hasn't been any

81
00:02:54,959 --> 00:02:57,120
work that has scaled any non-trivial npc

82
00:02:57,120 --> 00:02:58,720
at this scale

83
00:02:58,720 --> 00:03:02,000
we wanted the parties to be lightweight

84
00:03:02,000 --> 00:03:04,480
and their bandwidth to be uh to be small

85
00:03:04,480 --> 00:03:06,000
and we will tell you a little bit on

86
00:03:06,000 --> 00:03:07,360
what uh

87
00:03:07,360 --> 00:03:09,599
what in our implementation what kind how

88
00:03:09,599 --> 00:03:11,040
we instantiated these

89
00:03:11,040 --> 00:03:13,280
the parties and finally we set the

90
00:03:13,280 --> 00:03:15,200
statistical security parameter to be 60

91
00:03:15,200 --> 00:03:15,680
bits

92
00:03:15,680 --> 00:03:18,000
and the computational security to be 128

93
00:03:18,000 --> 00:03:19,519
bits

94
00:03:19,519 --> 00:03:21,280
so here is our protocol blueprint to

95
00:03:21,280 --> 00:03:23,680
design a secure multiparty computation

96
00:03:23,680 --> 00:03:26,159
for the distributed generation of an rsa

97
00:03:26,159 --> 00:03:27,040
modulus

98
00:03:27,040 --> 00:03:29,440
so this is a popular and you know most

99
00:03:29,440 --> 00:03:30,480
common approach to

100
00:03:30,480 --> 00:03:32,319
design concretely efficient mpc

101
00:03:32,319 --> 00:03:33,599
protocols first you design

102
00:03:33,599 --> 00:03:36,480
a passive protocol and then you enhance

103
00:03:36,480 --> 00:03:47,839
it to get an active protocol

104
00:03:51,760 --> 00:03:54,239
so let me walk through this steps where

105
00:03:54,239 --> 00:03:55,920
you know i'll tell you how we design our

106
00:03:55,920 --> 00:03:57,920
passive protocol and then follow it with

107
00:03:57,920 --> 00:04:01,360
our active protocol

108
00:04:01,360 --> 00:04:02,959
so we need a passive protocol that

109
00:04:02,959 --> 00:04:05,040
scales and as i mentioned to over a

110
00:04:05,040 --> 00:04:06,480
thousand parties

111
00:04:06,480 --> 00:04:08,319
and let me tell you that this is and you

112
00:04:08,319 --> 00:04:11,200
know a very uh thriving area of research

113
00:04:11,200 --> 00:04:12,799
in this problem was introduced in the

114
00:04:12,799 --> 00:04:14,480
seminal work of bonnie and franklin in

115
00:04:14,480 --> 00:04:15,280
97

116
00:04:15,280 --> 00:04:18,079
of precisely this task giving an mpc

117
00:04:18,079 --> 00:04:19,358
protocol to

118
00:04:19,358 --> 00:04:22,400
sample an rsa modulus and there have

119
00:04:22,400 --> 00:04:24,639
been several words improving uh you know

120
00:04:24,639 --> 00:04:25,520
in different

121
00:04:25,520 --> 00:04:28,479
in different scenarios we are interested

122
00:04:28,479 --> 00:04:29,360
in the dishonest

123
00:04:29,360 --> 00:04:30,960
majority setting and here you can see

124
00:04:30,960 --> 00:04:33,360
the work of hazai at all

125
00:04:33,360 --> 00:04:35,919
and the work of chennai all work in this

126
00:04:35,919 --> 00:04:37,280
and i should point out that only the

127
00:04:37,280 --> 00:04:38,800
work of fazayatol in fact

128
00:04:38,800 --> 00:04:42,160
implemented any npc to generate an

129
00:04:42,160 --> 00:04:45,040
rsa modulus but our work will be more

130
00:04:45,040 --> 00:04:46,639
close to the work of

131
00:04:46,639 --> 00:04:48,400
chen atoll who introduced really you

132
00:04:48,400 --> 00:04:49,759
know

133
00:04:49,759 --> 00:04:51,759
a very nice idea to improve the

134
00:04:51,759 --> 00:04:54,000
efficiency of this protocols among other

135
00:04:54,000 --> 00:04:55,360
things

136
00:04:55,360 --> 00:04:58,080
so here is the bonnet franklin framework

137
00:04:58,080 --> 00:05:00,160
besides maybe one previous work

138
00:05:00,160 --> 00:05:01,919
all the others follow the bonnet

139
00:05:01,919 --> 00:05:03,520
franklin framework which roughly

140
00:05:03,520 --> 00:05:04,400
proceeds as

141
00:05:04,400 --> 00:05:07,360
in three steps the first step you sample

142
00:05:07,360 --> 00:05:09,039
numbers you sample numbers

143
00:05:09,039 --> 00:05:11,919
for prime candidates okay so basically

144
00:05:11,919 --> 00:05:14,800
parties added choose additive shares for

145
00:05:14,800 --> 00:05:16,720
for prime candidates then in a second

146
00:05:16,720 --> 00:05:18,240
step they multiply these prime

147
00:05:18,240 --> 00:05:19,440
candidates to

148
00:05:19,440 --> 00:05:22,080
uh to get candidate by primes and in the

149
00:05:22,080 --> 00:05:23,360
third step they test

150
00:05:23,360 --> 00:05:25,280
whether these are by primes now to

151
00:05:25,280 --> 00:05:26,560
improve efficiency even

152
00:05:26,560 --> 00:05:28,400
starting from the original work they

153
00:05:28,400 --> 00:05:30,240
considered some some

154
00:05:30,240 --> 00:05:32,160
versions where they can you know

155
00:05:32,160 --> 00:05:34,560
eliminate certain prime candidates just

156
00:05:34,560 --> 00:05:36,080
easily like if they were a you know

157
00:05:36,080 --> 00:05:37,520
product if there were a multiple of two

158
00:05:37,520 --> 00:05:38,160
or three or

159
00:05:38,160 --> 00:05:40,880
small primes okay we are going to follow

160
00:05:40,880 --> 00:05:41,440
the chen

161
00:05:41,440 --> 00:05:44,720
at all's blueprint which is based on the

162
00:05:44,720 --> 00:05:46,400
bonnet franklin blueprint but you know

163
00:05:46,400 --> 00:05:48,240
they do a very clever modification of

164
00:05:48,240 --> 00:05:49,440
the first step

165
00:05:49,440 --> 00:05:52,880
instead of sampling prime candidates and

166
00:05:52,880 --> 00:05:54,000
saving them

167
00:05:54,000 --> 00:05:55,840
for removing those divisible by small

168
00:05:55,840 --> 00:05:58,080
prime factors they gave a mechanism

169
00:05:58,080 --> 00:06:00,880
by considering these numbers in the crt

170
00:06:00,880 --> 00:06:02,639
representation chinese remainder theorem

171
00:06:02,639 --> 00:06:04,400
representation

172
00:06:04,400 --> 00:06:06,720
to automatically sample candidates that

173
00:06:06,720 --> 00:06:08,880
are already not divisible by

174
00:06:08,880 --> 00:06:11,919
you know the small primes so this just

175
00:06:11,919 --> 00:06:13,600
you know improves the complexity and

176
00:06:13,600 --> 00:06:16,400
increases our chances of sampling a

177
00:06:16,400 --> 00:06:18,800
prime number

178
00:06:18,800 --> 00:06:21,759
another thing that was uh you know uh

179
00:06:21,759 --> 00:06:23,520
crystallized in the work of chen at all

180
00:06:23,520 --> 00:06:24,160
is that

181
00:06:24,160 --> 00:06:26,960
essentially to design a protocol in this

182
00:06:26,960 --> 00:06:27,520
framework

183
00:06:27,520 --> 00:06:29,360
all you need to do is you can reduce it

184
00:06:29,360 --> 00:06:31,280
to designing just the secure

185
00:06:31,280 --> 00:06:32,400
multiplication

186
00:06:32,400 --> 00:06:33,919
functionality in fact all these three

187
00:06:33,919 --> 00:06:35,680
steps can be reduced to secure

188
00:06:35,680 --> 00:06:36,880
multiplication

189
00:06:36,880 --> 00:06:38,400
especially in the passive but they also

190
00:06:38,400 --> 00:06:40,639
have a similar theorem of the active

191
00:06:40,639 --> 00:06:42,240
version but we are going to focus first

192
00:06:42,240 --> 00:06:44,000
on the passive version and

193
00:06:44,000 --> 00:06:46,080
the the by-primality testing

194
00:06:46,080 --> 00:06:47,759
additionally requires a distributed

195
00:06:47,759 --> 00:06:48,880
version of the

196
00:06:48,880 --> 00:06:52,240
the jacobi test which doesn't require

197
00:06:52,240 --> 00:06:54,400
secure multiplication but it just works

198
00:06:54,400 --> 00:06:56,479
and which is used by you know all

199
00:06:56,479 --> 00:06:58,000
previous works

200
00:06:58,000 --> 00:06:59,039
okay so what is the secure

201
00:06:59,039 --> 00:07:00,639
multiplication functionality in fact

202
00:07:00,639 --> 00:07:02,000
it's an extension of what is called

203
00:07:02,000 --> 00:07:05,120
oblivious linear evaluation which is a

204
00:07:05,120 --> 00:07:07,280
generalization of oblivious transfer for

205
00:07:07,280 --> 00:07:08,319
arbitrary fields

206
00:07:08,319 --> 00:07:09,919
so what does the secure multiplication

207
00:07:09,919 --> 00:07:12,000
function do well parties have

208
00:07:12,000 --> 00:07:14,319
shares for two numbers a and b ais and

209
00:07:14,319 --> 00:07:15,120
bis

210
00:07:15,120 --> 00:07:16,880
which they want to com and they want to

211
00:07:16,880 --> 00:07:18,880
compute the product of

212
00:07:18,880 --> 00:07:21,599
summation ai and summation bi and obtain

213
00:07:21,599 --> 00:07:22,080
shares

214
00:07:22,080 --> 00:07:25,120
for the product okay this

215
00:07:25,120 --> 00:07:27,680
is an extension of the ole functionality

216
00:07:27,680 --> 00:07:29,280
that i mentioned

217
00:07:29,280 --> 00:07:30,639
so how does one implement secure

218
00:07:30,639 --> 00:07:32,639
multiplication functionality well you

219
00:07:32,639 --> 00:07:34,479
can reduce it to ole which is a

220
00:07:34,479 --> 00:07:36,080
two-party functionality

221
00:07:36,080 --> 00:07:38,240
but the main drawback of reducing it to

222
00:07:38,240 --> 00:07:39,680
oily is that

223
00:07:39,680 --> 00:07:41,280
then your protocol is going to scale

224
00:07:41,280 --> 00:07:43,199
quadratic because every pair of parties

225
00:07:43,199 --> 00:07:44,160
need to

226
00:07:44,160 --> 00:07:47,520
to use this a better alternative is to

227
00:07:47,520 --> 00:07:49,280
use the threshold additively homomorphic

228
00:07:49,280 --> 00:07:50,720
encryption which actually scales

229
00:07:50,720 --> 00:07:52,800
linearly in the number of parties

230
00:07:52,800 --> 00:07:54,080
we're going to use the threshold

231
00:07:54,080 --> 00:07:55,440
additively homomorphic encryption but

232
00:07:55,440 --> 00:07:56,560
with a twist we're going to

233
00:07:56,560 --> 00:07:58,479
introduce some an additional party that

234
00:07:58,479 --> 00:08:00,000
we call a coordinator

235
00:08:00,000 --> 00:08:02,720
okay this coordinator is going to to

236
00:08:02,720 --> 00:08:04,479
facilitate the parties being

237
00:08:04,479 --> 00:08:07,120
lightweight on their spec okay which

238
00:08:07,120 --> 00:08:08,080
means that this

239
00:08:08,080 --> 00:08:10,479
this coordinator in fact is going to

240
00:08:10,479 --> 00:08:11,120
take

241
00:08:11,120 --> 00:08:13,039
you know some of the heavy part of the

242
00:08:13,039 --> 00:08:16,000
computation as well as the communication

243
00:08:16,000 --> 00:08:18,560
and the uh you don't this this

244
00:08:18,560 --> 00:08:20,479
coordinator doesn't have to be trusted

245
00:08:20,479 --> 00:08:22,000
in fact it will be a verifiable

246
00:08:22,000 --> 00:08:23,280
coordinator we can

247
00:08:23,280 --> 00:08:26,000
publish and we can you know just have

248
00:08:26,000 --> 00:08:27,039
the entire view

249
00:08:27,039 --> 00:08:29,919
of this coordinator open so that you

250
00:08:29,919 --> 00:08:30,400
know

251
00:08:30,400 --> 00:08:32,080
you can test you can check whether you

252
00:08:32,080 --> 00:08:33,440
know it proceeded correctly

253
00:08:33,440 --> 00:08:36,559
uh during the protocol and what this

254
00:08:36,559 --> 00:08:38,159
what this allows is that now the per

255
00:08:38,159 --> 00:08:40,159
party communication actually scales

256
00:08:40,159 --> 00:08:41,839
logarithmically in the number of parties

257
00:08:41,839 --> 00:08:43,599
and this is like truly makes our

258
00:08:43,599 --> 00:08:45,920
protocol scalable

259
00:08:45,920 --> 00:08:47,360
the second step as we mentioned is to

260
00:08:47,360 --> 00:08:49,200
compile the full security and a lot of

261
00:08:49,200 --> 00:08:50,080
in the past

262
00:08:50,080 --> 00:08:52,720
decade there's been several works on

263
00:08:52,720 --> 00:08:53,600
doing this step

264
00:08:53,600 --> 00:08:55,680
and improving the efficiency moving from

265
00:08:55,680 --> 00:08:57,519
passive to passive to active they're

266
00:08:57,519 --> 00:08:59,279
being like really beautiful techniques

267
00:08:59,279 --> 00:09:00,480
but what we're going to do is we're

268
00:09:00,480 --> 00:09:02,000
going to revisit the classics and we're

269
00:09:02,000 --> 00:09:02,640
going to say

270
00:09:02,640 --> 00:09:05,519
we are going to try to use the classic

271
00:09:05,519 --> 00:09:07,920
gmw paradigm which roughly proceeds as

272
00:09:07,920 --> 00:09:09,200
follows you have a

273
00:09:09,200 --> 00:09:11,360
multi-party computation protocol you

274
00:09:11,360 --> 00:09:12,959
first commit to your input and

275
00:09:12,959 --> 00:09:14,480
randomness and then

276
00:09:14,480 --> 00:09:17,279
you supply a zero knowledge proof at

277
00:09:17,279 --> 00:09:19,360
every step of the protocol

278
00:09:19,360 --> 00:09:22,080
okay now this is traditionally you know

279
00:09:22,080 --> 00:09:23,760
this has been at least in the concrete

280
00:09:23,760 --> 00:09:24,640
efficiency

281
00:09:24,640 --> 00:09:26,720
uh literature this has been this

282
00:09:26,720 --> 00:09:28,320
approach has been dismissed primarily

283
00:09:28,320 --> 00:09:29,200
because

284
00:09:29,200 --> 00:09:31,519
uh you know the zero knowledge proofs

285
00:09:31,519 --> 00:09:33,040
are really heavy i mean even with the

286
00:09:33,040 --> 00:09:34,399
improvements in zero knowledge like

287
00:09:34,399 --> 00:09:37,360
doing this in every step is going to be

288
00:09:37,360 --> 00:09:39,360
nevertheless we show that this approach

289
00:09:39,360 --> 00:09:41,120
in fact can be applied to

290
00:09:41,120 --> 00:09:43,120
the the protocol the passive protocol

291
00:09:43,120 --> 00:09:44,399
that we are doing

292
00:09:44,399 --> 00:09:46,240
and we want to observe two things first

293
00:09:46,240 --> 00:09:47,760
there are no inputs in this there is

294
00:09:47,760 --> 00:09:49,200
only randomness because you're just

295
00:09:49,200 --> 00:09:50,880
sampling by primes or sampling

296
00:09:50,880 --> 00:09:53,120
candidates and the second thing is it's

297
00:09:53,120 --> 00:09:54,640
enough to attach one zero knowledge

298
00:09:54,640 --> 00:09:56,320
proof at the end of the protocol this is

299
00:09:56,320 --> 00:09:57,600
because

300
00:09:57,600 --> 00:10:01,040
you know even if during the protocol

301
00:10:01,040 --> 00:10:02,880
someone deviates they can violate

302
00:10:02,880 --> 00:10:04,480
privacy at best they will learn the

303
00:10:04,480 --> 00:10:05,920
other party's randomness

304
00:10:05,920 --> 00:10:07,680
but will be caught at the zero knowledge

305
00:10:07,680 --> 00:10:09,279
at the end so you know if this happens

306
00:10:09,279 --> 00:10:11,120
you identify this party kick this party

307
00:10:11,120 --> 00:10:12,800
out and restart the computation

308
00:10:12,800 --> 00:10:15,839
there is no private inputs privacy that

309
00:10:15,839 --> 00:10:17,680
is violated because there isn't

310
00:10:17,680 --> 00:10:20,240
there aren't any private inputs as we

311
00:10:20,240 --> 00:10:21,440
mentioned before we're going to

312
00:10:21,440 --> 00:10:22,880
introduce a new party called the

313
00:10:22,880 --> 00:10:23,760
coordinator

314
00:10:23,760 --> 00:10:25,760
this coordinator only performs public

315
00:10:25,760 --> 00:10:27,440
operations that's why it's verifiable

316
00:10:27,440 --> 00:10:28,880
like i can publish everything that this

317
00:10:28,880 --> 00:10:30,560
coordinator is doing and a third party

318
00:10:30,560 --> 00:10:32,399
can come and audit it later

319
00:10:32,399 --> 00:10:33,920
and then we're going to have every party

320
00:10:33,920 --> 00:10:35,839
sign every message and finally we can

321
00:10:35,839 --> 00:10:37,440
put the entire

322
00:10:37,440 --> 00:10:39,279
transcript on a bulletin board and this

323
00:10:39,279 --> 00:10:41,360
additionally also gives a public

324
00:10:41,360 --> 00:10:43,040
verifiability feature

325
00:10:43,040 --> 00:10:45,040
of our protocol imagine that we generate

326
00:10:45,040 --> 00:10:47,040
another rsa modulus this year

327
00:10:47,040 --> 00:10:48,480
next year someone else would say like i

328
00:10:48,480 --> 00:10:50,320
am not sure like you know how did you

329
00:10:50,320 --> 00:10:51,600
generate it and they can go to the

330
00:10:51,600 --> 00:10:52,320
transcript

331
00:10:52,320 --> 00:10:54,000
they can see the identities of who all

332
00:10:54,000 --> 00:10:55,600
participated and can verify the

333
00:10:55,600 --> 00:10:56,480
computation

334
00:10:56,480 --> 00:10:58,720
to make sure that in fact the prime the

335
00:10:58,720 --> 00:11:00,399
by prime that was sampled is indeed a

336
00:11:00,399 --> 00:11:01,360
byproduct

337
00:11:01,360 --> 00:11:03,680
so now let me just uh fill in some of

338
00:11:03,680 --> 00:11:04,880
the details on

339
00:11:04,880 --> 00:11:06,800
how we instantiate our primitives let's

340
00:11:06,800 --> 00:11:08,079
talk about the threshold additively

341
00:11:08,079 --> 00:11:08,800
homomorphic

342
00:11:08,800 --> 00:11:11,440
uh encryption you know there are several

343
00:11:11,440 --> 00:11:12,000
choices

344
00:11:12,000 --> 00:11:14,160
we chose the ring lwe because it

345
00:11:14,160 --> 00:11:15,760
supports packing we can do several

346
00:11:15,760 --> 00:11:16,720
multiplications

347
00:11:16,720 --> 00:11:19,120
in parallel as well as it has a very

348
00:11:19,120 --> 00:11:20,000
easy setup

349
00:11:20,000 --> 00:11:22,880
for you know key generation this is the

350
00:11:22,880 --> 00:11:23,440
most

351
00:11:23,440 --> 00:11:26,640
efficient construction the the zero

352
00:11:26,640 --> 00:11:28,320
knowledge constraints that uh

353
00:11:28,320 --> 00:11:30,480
you know we had to use in enforcing like

354
00:11:30,480 --> 00:11:32,240
i just wanted to kind of say that

355
00:11:32,240 --> 00:11:34,160
you know this was a complicated zero

356
00:11:34,160 --> 00:11:35,519
knowledge statement that we wanted to

357
00:11:35,519 --> 00:11:36,000
prove

358
00:11:36,000 --> 00:11:38,480
it it had ring operations this is from

359
00:11:38,480 --> 00:11:39,519
the lattice

360
00:11:39,519 --> 00:11:41,440
from the lattice space then we need to

361
00:11:41,440 --> 00:11:43,440
to consume the triples but these were

362
00:11:43,440 --> 00:11:45,839
triples mod several prime numbers so it

363
00:11:45,839 --> 00:11:47,680
was not just over a single field

364
00:11:47,680 --> 00:11:49,200
and finally we had to also prove some

365
00:11:49,200 --> 00:11:50,880
correctness in the jacobi test

366
00:11:50,880 --> 00:11:54,800
which was modulo some

367
00:11:54,959 --> 00:11:58,399
the the target rsa modulus

368
00:11:58,399 --> 00:12:00,639
so what zero knowledge protocol uh did

369
00:12:00,639 --> 00:12:02,240
we use well you know

370
00:12:02,240 --> 00:12:03,839
uh we needed something that was memory

371
00:12:03,839 --> 00:12:05,040
efficient because we wanted a

372
00:12:05,040 --> 00:12:05,839
lightweight group

373
00:12:05,839 --> 00:12:07,360
the parties had to prove their actions

374
00:12:07,360 --> 00:12:08,480
and we needed something that was

375
00:12:08,480 --> 00:12:10,160
communication efficient so we used

376
00:12:10,160 --> 00:12:12,320
a sublinear transparent zero knowledge

377
00:12:12,320 --> 00:12:14,160
not we instantiated with the hero

378
00:12:14,160 --> 00:12:15,760
because it had some nice properties for

379
00:12:15,760 --> 00:12:16,399
you know

380
00:12:16,399 --> 00:12:17,760
when you have several repeated

381
00:12:17,760 --> 00:12:19,680
computations the the hero system has

382
00:12:19,680 --> 00:12:20,480
some nice

383
00:12:20,480 --> 00:12:23,279
nice features but we also had to attach

384
00:12:23,279 --> 00:12:25,560
another protocol which is efficient for

385
00:12:25,560 --> 00:12:27,680
exponentiations in the rsa group and

386
00:12:27,680 --> 00:12:29,440
this was a sigma protocol due to

387
00:12:29,440 --> 00:12:32,160
shu so and then we had to combine these

388
00:12:32,160 --> 00:12:32,480
two

389
00:12:32,480 --> 00:12:34,000
to make sure that you know the witness

390
00:12:34,000 --> 00:12:35,519
there were witnesses that spanned both

391
00:12:35,519 --> 00:12:36,560
these zero knowledge

392
00:12:36,560 --> 00:12:38,000
and we had to prove some stitching

393
00:12:38,000 --> 00:12:40,480
constraints

394
00:12:40,480 --> 00:12:44,160
so this is uh you know i just wanted to

395
00:12:44,160 --> 00:12:45,360
tell you some of the features of our

396
00:12:45,360 --> 00:12:47,440
protocol we got security with abort

397
00:12:47,440 --> 00:12:49,360
up to n minus one party corruptions and

398
00:12:49,360 --> 00:12:50,480
the coordinator

399
00:12:50,480 --> 00:12:53,360
uh you know by an active adversary and

400
00:12:53,360 --> 00:12:55,360
our coordinator is verifiable so

401
00:12:55,360 --> 00:12:57,440
you know we don't have to trust the

402
00:12:57,440 --> 00:12:59,600
coordinator finally we have identifiable

403
00:12:59,600 --> 00:13:00,959
abort because it's based on zero

404
00:13:00,959 --> 00:13:02,639
knowledge anyone who fails their zero

405
00:13:02,639 --> 00:13:04,320
knowledge we can identify and kick them

406
00:13:04,320 --> 00:13:04,959
out

407
00:13:04,959 --> 00:13:06,639
and also again we get public

408
00:13:06,639 --> 00:13:08,639
verifiability just by using

409
00:13:08,639 --> 00:13:11,519
by party signing their messages so let

410
00:13:11,519 --> 00:13:13,120
me talk a little bit about our

411
00:13:13,120 --> 00:13:14,959
implementation we instantiated our

412
00:13:14,959 --> 00:13:16,320
parties with

413
00:13:16,320 --> 00:13:18,560
you know a t3 small instance from aws

414
00:13:18,560 --> 00:13:20,480
which has two cpu threads

415
00:13:20,480 --> 00:13:23,120
um and a coordinator you know we we use

416
00:13:23,120 --> 00:13:25,120
the best machine because this you know

417
00:13:25,120 --> 00:13:27,200
uh this is verifiable it's okay to you

418
00:13:27,200 --> 00:13:29,440
know and we just need one person if we

419
00:13:29,440 --> 00:13:31,440
are running the ceremony we could have

420
00:13:31,440 --> 00:13:34,480
you know a coordinator to uh you know we

421
00:13:34,480 --> 00:13:36,240
can we can choose the spec of the

422
00:13:36,240 --> 00:13:38,240
coordinator so we used one with 96

423
00:13:38,240 --> 00:13:38,720
threads

424
00:13:38,720 --> 00:13:41,839
and close to a terabyte of ram and

425
00:13:41,839 --> 00:13:44,160
you know we we we had some uh you know

426
00:13:44,160 --> 00:13:46,480
we used the fhe standardization to

427
00:13:46,480 --> 00:13:48,240
you know select the parameters for the

428
00:13:48,240 --> 00:13:50,079
for the ring lwe and a public key

429
00:13:50,079 --> 00:13:52,959
infrastructure for signing every message

430
00:13:52,959 --> 00:13:54,720
so let me tell you quickly about our

431
00:13:54,720 --> 00:13:57,120
performance so for two parties

432
00:13:57,120 --> 00:13:59,360
we the passive took 20 seconds and the

433
00:13:59,360 --> 00:14:00,240
active took

434
00:14:00,240 --> 00:14:03,279
uh 10 minutes and if you notice that

435
00:14:03,279 --> 00:14:05,360
you know as the we increase the number

436
00:14:05,360 --> 00:14:06,880
of parties the passive and active

437
00:14:06,880 --> 00:14:08,880
you know scale really nicely like in

438
00:14:08,880 --> 00:14:11,120
fact these numbers should not change

439
00:14:11,120 --> 00:14:12,800
i mean they increase slightly but then

440
00:14:12,800 --> 00:14:14,160
after you can see that

441
00:14:14,160 --> 00:14:16,079
it actually you know goes high so if you

442
00:14:16,079 --> 00:14:17,600
look at thousand parties

443
00:14:17,600 --> 00:14:20,800
you know we took uh about six to seven

444
00:14:20,800 --> 00:14:21,360
minutes

445
00:14:21,360 --> 00:14:23,600
for the passive part and about 20

446
00:14:23,600 --> 00:14:24,880
minutes uh

447
00:14:24,880 --> 00:14:27,440
20-25 minutes for the active part and i

448
00:14:27,440 --> 00:14:28,880
want to point out that actually the

449
00:14:28,880 --> 00:14:30,480
bottleneck here is not the parties

450
00:14:30,480 --> 00:14:31,040
because

451
00:14:31,040 --> 00:14:32,560
the party's computation and

452
00:14:32,560 --> 00:14:34,639
communication doesn't change with the

453
00:14:34,639 --> 00:14:36,320
increasing the number of parties

454
00:14:36,320 --> 00:14:38,160
it's the coordinator and we use the best

455
00:14:38,160 --> 00:14:39,519
machine on amazon and

456
00:14:39,519 --> 00:14:41,839
in fact if we considered a distributed

457
00:14:41,839 --> 00:14:43,760
set of coordinators that could

458
00:14:43,760 --> 00:14:46,160
distribute the load all these numbers

459
00:14:46,160 --> 00:14:46,959
would go

460
00:14:46,959 --> 00:14:50,560
very close to the two-party setting so

461
00:14:50,560 --> 00:14:52,480
the bottleneck here is the coordinator

462
00:14:52,480 --> 00:14:54,800
which is a nice thing

463
00:14:54,800 --> 00:14:57,279
so in summary we you know designed the

464
00:14:57,279 --> 00:14:58,959
first scalable multi-party computation

465
00:14:58,959 --> 00:15:00,639
with a dishonest majority

466
00:15:00,639 --> 00:15:02,480
and a practical implementation of the

467
00:15:02,480 --> 00:15:04,959
generic gmw paradigm

468
00:15:04,959 --> 00:15:06,639
uh i wanted to point out that from

469
00:15:06,639 --> 00:15:08,399
passive to active our computational

470
00:15:08,399 --> 00:15:10,079
overhead was like four to eight times

471
00:15:10,079 --> 00:15:11,279
because we just attached a zero

472
00:15:11,279 --> 00:15:12,560
knowledge group and again the

473
00:15:12,560 --> 00:15:14,399
communication is just twice because

474
00:15:14,399 --> 00:15:16,880
we used a sublinear zero knowledge proof

475
00:15:16,880 --> 00:15:18,480
system

476
00:15:18,480 --> 00:15:20,399
and the bottleneck is the coordinator

477
00:15:20,399 --> 00:15:22,160
spec

478
00:15:22,160 --> 00:15:24,560
and we also had a new kind of

479
00:15:24,560 --> 00:15:25,760
functionality to

480
00:15:25,760 --> 00:15:29,199
to give us a modular proof of security

481
00:15:29,199 --> 00:15:35,439
thank you

