1
00:00:01,680 --> 00:00:03,360
hi everyone and thanks for attending

2
00:00:03,360 --> 00:00:04,400
this talk

3
00:00:04,400 --> 00:00:06,240
i'm benjamin erickson and this is a

4
00:00:06,240 --> 00:00:08,480
joint work with giancarlo pellegrino and

5
00:00:08,480 --> 00:00:08,880
andre

6
00:00:08,880 --> 00:00:12,799
sobelfeld so web applications

7
00:00:12,799 --> 00:00:15,440
are growing in complexity and they have

8
00:00:15,440 --> 00:00:16,480
more interaction

9
00:00:16,480 --> 00:00:18,800
bigger code base and even third-party

10
00:00:18,800 --> 00:00:20,480
code that needs to be considered when

11
00:00:20,480 --> 00:00:22,240
looking for vulnerabilities

12
00:00:22,240 --> 00:00:24,080
and this all makes it harder to find

13
00:00:24,080 --> 00:00:25,599
vulnerabilities

14
00:00:25,599 --> 00:00:28,160
at the same time a few years ago google

15
00:00:28,160 --> 00:00:30,000
awarded over a million dollars in

16
00:00:30,000 --> 00:00:31,920
bounties just for cross-site scripting

17
00:00:31,920 --> 00:00:33,200
bugs

18
00:00:33,200 --> 00:00:34,719
at the same time if we look at the

19
00:00:34,719 --> 00:00:37,200
number of cvs from cross-site scripting

20
00:00:37,200 --> 00:00:39,760
we can see that between the years 2015

21
00:00:39,760 --> 00:00:41,280
and 2019

22
00:00:41,280 --> 00:00:43,360
compared to the previous five years they

23
00:00:43,360 --> 00:00:47,200
have increased with almost 79 percent

24
00:00:47,200 --> 00:00:49,200
this makes cross-site scripting an

25
00:00:49,200 --> 00:00:52,399
important topic to study

26
00:00:52,399 --> 00:00:53,520
so how can we actually find

27
00:00:53,520 --> 00:00:55,840
vulnerabilities in these applications

28
00:00:55,840 --> 00:00:58,000
well we can use a black box approach and

29
00:00:58,000 --> 00:00:59,600
the benefit here is that we don't need

30
00:00:59,600 --> 00:01:01,520
the source code of the applications that

31
00:01:01,520 --> 00:01:03,039
we are analyzing

32
00:01:03,039 --> 00:01:05,438
instead we dynamically interact with the

33
00:01:05,438 --> 00:01:06,159
application

34
00:01:06,159 --> 00:01:08,080
to figure out where the vulnerabilities

35
00:01:08,080 --> 00:01:10,320
might reside

36
00:01:10,320 --> 00:01:12,720
so here's an example and the first thing

37
00:01:12,720 --> 00:01:14,320
we need to think about is how we

38
00:01:14,320 --> 00:01:16,400
navigate a web application

39
00:01:16,400 --> 00:01:18,320
so we can follow a link between two

40
00:01:18,320 --> 00:01:20,320
pages we might submit a form with a

41
00:01:20,320 --> 00:01:21,920
username and password

42
00:01:21,920 --> 00:01:24,720
then perhaps clicking on a button to

43
00:01:24,720 --> 00:01:26,080
generate a dynamic

44
00:01:26,080 --> 00:01:28,880
form where we later can add a user for

45
00:01:28,880 --> 00:01:30,640
example

46
00:01:30,640 --> 00:01:32,320
now we need to also think about how we

47
00:01:32,320 --> 00:01:33,840
traverse the application

48
00:01:33,840 --> 00:01:36,079
because where we inject the user might

49
00:01:36,079 --> 00:01:38,320
be different from where we then can see

50
00:01:38,320 --> 00:01:41,600
where this user is reflected so we might

51
00:01:41,600 --> 00:01:43,280
need to go back to the index page and

52
00:01:43,280 --> 00:01:44,479
continue

53
00:01:44,479 --> 00:01:47,360
crawling the application until we find

54
00:01:47,360 --> 00:01:49,040
the user that we inserted

55
00:01:49,040 --> 00:01:51,920
and then we can infer this interstate

56
00:01:51,920 --> 00:01:52,720
dependency

57
00:01:52,720 --> 00:01:55,119
between the view user page and the admin

58
00:01:55,119 --> 00:01:57,680
page in this case

59
00:01:57,680 --> 00:01:59,280
but of course we want a scanner to be

60
00:01:59,280 --> 00:02:01,520
able to do this autonomously

61
00:02:01,520 --> 00:02:04,640
to follow links to submit forms

62
00:02:04,640 --> 00:02:06,560
to click on javascript events or

63
00:02:06,560 --> 00:02:08,160
javascript buttons

64
00:02:08,160 --> 00:02:12,080
add users and then continue crawling

65
00:02:12,080 --> 00:02:16,319
until it finds these inserted values

66
00:02:16,319 --> 00:02:18,800
and when it does also be able to infer

67
00:02:18,800 --> 00:02:20,560
the interstate dependencies between

68
00:02:20,560 --> 00:02:23,840
different parts of the application

69
00:02:24,000 --> 00:02:26,720
so the main challenges we identify is

70
00:02:26,720 --> 00:02:27,599
navigation

71
00:02:27,599 --> 00:02:31,839
traversing and interstate dependencies

72
00:02:33,200 --> 00:02:35,280
and navigation is about which

73
00:02:35,280 --> 00:02:37,840
interaction methods we need to consider

74
00:02:37,840 --> 00:02:41,040
so for example links form submissions

75
00:02:41,040 --> 00:02:43,760
are those simple http requests or can we

76
00:02:43,760 --> 00:02:44,640
model them as

77
00:02:44,640 --> 00:02:47,599
forms javascript events how do we model

78
00:02:47,599 --> 00:02:48,560
these

79
00:02:48,560 --> 00:02:52,800
and then how do we interact with these

80
00:02:52,800 --> 00:02:56,319
objects traversing

81
00:02:56,319 --> 00:02:58,159
is about how we handle the complex

82
00:02:58,159 --> 00:02:59,840
workflows in applications

83
00:02:59,840 --> 00:03:01,680
which might include chaining different

84
00:03:01,680 --> 00:03:04,239
actions so for example we might first

85
00:03:04,239 --> 00:03:05,599
need to upload a picture

86
00:03:05,599 --> 00:03:08,159
before we can comment on the picture and

87
00:03:08,159 --> 00:03:09,760
it's in this comment section

88
00:03:09,760 --> 00:03:13,200
where the vulnerability might be

89
00:03:13,680 --> 00:03:15,599
and finally where should we look for our

90
00:03:15,599 --> 00:03:18,080
payload once it has been injected

91
00:03:18,080 --> 00:03:20,159
and as we saw in the example injecting

92
00:03:20,159 --> 00:03:21,760
something in the admin page might

93
00:03:21,760 --> 00:03:23,920
actually end up being reflected on some

94
00:03:23,920 --> 00:03:26,480
other page

95
00:03:27,120 --> 00:03:29,280
and previous works have focused on

96
00:03:29,280 --> 00:03:30,159
improving

97
00:03:30,159 --> 00:03:32,879
one of these methods in isolation so for

98
00:03:32,879 --> 00:03:34,720
example pellegrino and i'll improve the

99
00:03:34,720 --> 00:03:36,720
modeling of javascript events

100
00:03:36,720 --> 00:03:39,120
while dupietal in enemy of the state

101
00:03:39,120 --> 00:03:41,360
focused on traversing applications with

102
00:03:41,360 --> 00:03:43,920
respect to the server-side state

103
00:03:43,920 --> 00:03:46,720
and to sheena with the liger scanner was

104
00:03:46,720 --> 00:03:48,480
able to use reverse engineering

105
00:03:48,480 --> 00:03:50,480
to try to identify interstate

106
00:03:50,480 --> 00:03:53,120
dependencies

107
00:03:53,120 --> 00:03:55,280
and our key idea is to combine the

108
00:03:55,280 --> 00:03:57,439
advantages of all of these methods

109
00:03:57,439 --> 00:04:00,959
into one approach so

110
00:04:00,959 --> 00:04:03,920
to handle navigation we treat the nodes

111
00:04:03,920 --> 00:04:04,560
in the graph

112
00:04:04,560 --> 00:04:07,120
as client-side states and the edges

113
00:04:07,120 --> 00:04:08,319
between these nodes

114
00:04:08,319 --> 00:04:10,640
are the action needed to move between

115
00:04:10,640 --> 00:04:12,560
these states

116
00:04:12,560 --> 00:04:14,799
so for example on the index page we

117
00:04:14,799 --> 00:04:16,079
might have a simple link

118
00:04:16,079 --> 00:04:18,000
that we can just follow to the login

119
00:04:18,000 --> 00:04:19,358
page

120
00:04:19,358 --> 00:04:22,240
but on the login page we actually submit

121
00:04:22,240 --> 00:04:24,400
the whole form so we don't treat it as a

122
00:04:24,400 --> 00:04:26,639
simple request which we just replay

123
00:04:26,639 --> 00:04:28,720
instead we re-render the form and we add

124
00:04:28,720 --> 00:04:30,800
the values and then we submit this form

125
00:04:30,800 --> 00:04:33,919
enable to log into the admin page

126
00:04:33,919 --> 00:04:36,479
for javascript events we model all of

127
00:04:36,479 --> 00:04:37,199
the

128
00:04:37,199 --> 00:04:39,520
javascript events and we execute them in

129
00:04:39,520 --> 00:04:40,400
a real browser

130
00:04:40,400 --> 00:04:42,960
so we actually click on these buttons or

131
00:04:42,960 --> 00:04:43,840
type text

132
00:04:43,840 --> 00:04:48,880
to to trigger on change events

133
00:04:50,080 --> 00:04:52,320
so for traversing it's important to

134
00:04:52,320 --> 00:04:53,440
ensure that

135
00:04:53,440 --> 00:04:55,280
the scanner or the application is in a

136
00:04:55,280 --> 00:04:57,600
good state before we add any values

137
00:04:57,600 --> 00:04:59,520
so if we're now on the right here want

138
00:04:59,520 --> 00:05:02,000
to inject a new user

139
00:05:02,000 --> 00:05:04,160
we would first have to go back to what

140
00:05:04,160 --> 00:05:06,479
we consider a save state

141
00:05:06,479 --> 00:05:09,120
and this is get request in this case and

142
00:05:09,120 --> 00:05:10,800
then the scanner would resubmit the

143
00:05:10,800 --> 00:05:12,080
login form

144
00:05:12,080 --> 00:05:14,560
click to generate element and only then

145
00:05:14,560 --> 00:05:15,120
do we

146
00:05:15,120 --> 00:05:17,919
insert this new value and this is to try

147
00:05:17,919 --> 00:05:19,440
to ensure that the

148
00:05:19,440 --> 00:05:21,360
server is in a good state before we try

149
00:05:21,360 --> 00:05:22,960
to inject any values

150
00:05:22,960 --> 00:05:27,680
as we re-execute the workflows if needed

151
00:05:30,400 --> 00:05:32,720
for interstate dependencies it's where

152
00:05:32,720 --> 00:05:34,080
the data is inserted

153
00:05:34,080 --> 00:05:37,039
can differ from where it's reflected and

154
00:05:37,039 --> 00:05:39,280
to detect these sources and syncs we

155
00:05:39,280 --> 00:05:39,919
insert

156
00:05:39,919 --> 00:05:42,479
random tokens so here on the bottom

157
00:05:42,479 --> 00:05:44,479
right we want to add a user

158
00:05:44,479 --> 00:05:46,080
so the username we pick here could be

159
00:05:46,080 --> 00:05:47,520
some random string like

160
00:05:47,520 --> 00:05:51,360
frc vw and so this is injected into the

161
00:05:51,360 --> 00:05:52,479
application

162
00:05:52,479 --> 00:05:54,720
and might be reflected on another page

163
00:05:54,720 --> 00:05:56,080
in the application

164
00:05:56,080 --> 00:05:58,800
so we continue to crawl and for every

165
00:05:58,800 --> 00:06:00,560
page we look for all of these tokens

166
00:06:00,560 --> 00:06:02,639
that we have inserted

167
00:06:02,639 --> 00:06:05,360
and when we find one we can infer this

168
00:06:05,360 --> 00:06:06,240
relationship

169
00:06:06,240 --> 00:06:08,160
between the admin page and the view user

170
00:06:08,160 --> 00:06:09,600
page in this case

171
00:06:09,600 --> 00:06:11,280
and this is very important for when we

172
00:06:11,280 --> 00:06:12,880
start fussing because

173
00:06:12,880 --> 00:06:15,120
imagine that instead of adding a user we

174
00:06:15,120 --> 00:06:17,120
simply update the username

175
00:06:17,120 --> 00:06:19,199
in that case if we don't make sure to

176
00:06:19,199 --> 00:06:20,240
check the sink

177
00:06:20,240 --> 00:06:22,080
for every payload we inject on the

178
00:06:22,080 --> 00:06:24,240
source it might be the case

179
00:06:24,240 --> 00:06:27,120
that we only see the final payload once

180
00:06:27,120 --> 00:06:27,840
we

181
00:06:27,840 --> 00:06:30,080
continue crawling so what we do is for

182
00:06:30,080 --> 00:06:31,680
everything we inject in the source we

183
00:06:31,680 --> 00:06:35,199
also check the sink

184
00:06:35,199 --> 00:06:38,000
so we want to evaluate if black widow

185
00:06:38,000 --> 00:06:39,919
can handle the complexity of real

186
00:06:39,919 --> 00:06:41,039
applications

187
00:06:41,039 --> 00:06:42,720
and here we look at both the code

188
00:06:42,720 --> 00:06:45,199
coverage so the number of lines of code

189
00:06:45,199 --> 00:06:47,120
being executed on the server side

190
00:06:47,120 --> 00:06:49,120
as well as the number of vulnerabilities

191
00:06:49,120 --> 00:06:50,400
we can detect

192
00:06:50,400 --> 00:06:52,000
and we do this for 10 different web

193
00:06:52,000 --> 00:06:53,840
applications

194
00:06:53,840 --> 00:06:55,840
and further we divide these into

195
00:06:55,840 --> 00:06:57,280
reference applications

196
00:06:57,280 --> 00:06:59,039
so these are applications running old

197
00:06:59,039 --> 00:07:01,120
versions with known vulnerabilities

198
00:07:01,120 --> 00:07:02,960
and more importantly that have been used

199
00:07:02,960 --> 00:07:04,800
in previous papers so we can compare

200
00:07:04,800 --> 00:07:05,919
with those

201
00:07:05,919 --> 00:07:08,160
but we also look at six modern

202
00:07:08,160 --> 00:07:10,240
applications running the latest version

203
00:07:10,240 --> 00:07:11,599
so here we have latest version of

204
00:07:11,599 --> 00:07:14,479
wordpress and prestashop and drupal

205
00:07:14,479 --> 00:07:17,840
hotcrap etc

206
00:07:18,319 --> 00:07:20,880
but we're also interested in how black

207
00:07:20,880 --> 00:07:22,400
widow performs compared to other

208
00:07:22,400 --> 00:07:23,360
scanners

209
00:07:23,360 --> 00:07:25,599
so for each of these applications we

210
00:07:25,599 --> 00:07:26,880
compare black widow

211
00:07:26,880 --> 00:07:28,800
with seven other scanners so we have

212
00:07:28,800 --> 00:07:30,800
arachne enemy of the state

213
00:07:30,800 --> 00:07:33,919
jack scapefish we also have wget but

214
00:07:33,919 --> 00:07:35,599
that is just for comparing coverage

215
00:07:35,599 --> 00:07:36,880
since that is not a vulnerability

216
00:07:36,880 --> 00:07:39,280
scanner

217
00:07:40,560 --> 00:07:42,240
so the first result we look at is the

218
00:07:42,240 --> 00:07:44,000
coverage so this is the number of lines

219
00:07:44,000 --> 00:07:45,680
of code being executed on the server

220
00:07:45,680 --> 00:07:46,400
side

221
00:07:46,400 --> 00:07:48,560
and we compare black widow to all the

222
00:07:48,560 --> 00:07:49,919
other scanners as you can see in the

223
00:07:49,919 --> 00:07:51,759
bottom so with enemy of the state with

224
00:07:51,759 --> 00:07:53,759
wget with sap

225
00:07:53,759 --> 00:07:55,759
and we pair these up for every

226
00:07:55,759 --> 00:07:56,800
application

227
00:07:56,800 --> 00:07:58,800
so in the first case we have black widow

228
00:07:58,800 --> 00:08:00,400
versus enemy of the state

229
00:08:00,400 --> 00:08:03,520
on the web application os commerce and

230
00:08:03,520 --> 00:08:05,120
so we look at the lines of code being

231
00:08:05,120 --> 00:08:07,680
executed by both of these scanners

232
00:08:07,680 --> 00:08:10,000
and then we see how many are uniquely

233
00:08:10,000 --> 00:08:12,400
found by one of the scanners so here in

234
00:08:12,400 --> 00:08:13,919
blue you can see black widow

235
00:08:13,919 --> 00:08:16,800
uniquely finds about 90 percent of the

236
00:08:16,800 --> 00:08:18,319
lines of code

237
00:08:18,319 --> 00:08:21,039
in common they find about 10 of the

238
00:08:21,039 --> 00:08:22,240
lines of code

239
00:08:22,240 --> 00:08:24,879
and in the case of os commerce enemy of

240
00:08:24,879 --> 00:08:26,639
the state only finds a few lines of code

241
00:08:26,639 --> 00:08:29,280
that black widow does not find

242
00:08:29,280 --> 00:08:30,560
and then we do this for all the

243
00:08:30,560 --> 00:08:33,120
applications and all the scanners

244
00:08:33,120 --> 00:08:35,200
and what we can see here or the main

245
00:08:35,200 --> 00:08:36,399
takeaway should be that

246
00:08:36,399 --> 00:08:38,559
the blue area is much larger than the

247
00:08:38,559 --> 00:08:40,240
red area showing that

248
00:08:40,240 --> 00:08:42,399
we find a lot more unique lines of code

249
00:08:42,399 --> 00:08:44,480
compared to the other scanners

250
00:08:44,480 --> 00:08:47,440
and we also compare our coverage with

251
00:08:47,440 --> 00:08:49,440
the union of all the other scanners per

252
00:08:49,440 --> 00:08:50,480
application

253
00:08:50,480 --> 00:08:52,240
and we see that our improvement ranges

254
00:08:52,240 --> 00:08:53,760
from a 63

255
00:08:53,760 --> 00:08:56,480
improvement all the way to 280 for some

256
00:08:56,480 --> 00:08:59,120
applications

257
00:09:00,160 --> 00:09:01,360
but we're also interested in

258
00:09:01,360 --> 00:09:03,519
vulnerabilities and starting with the

259
00:09:03,519 --> 00:09:04,800
reference applications

260
00:09:04,800 --> 00:09:06,880
we see that most scanners are quite good

261
00:09:06,880 --> 00:09:09,040
at finding reflected xss

262
00:09:09,040 --> 00:09:11,279
almost all of them are able to do that

263
00:09:11,279 --> 00:09:13,120
but where we really try to improve

264
00:09:13,120 --> 00:09:15,600
is on the stored xss and as we can see

265
00:09:15,600 --> 00:09:16,399
already in the

266
00:09:16,399 --> 00:09:18,560
reference application we are able to

267
00:09:18,560 --> 00:09:20,080
find way more

268
00:09:20,080 --> 00:09:21,920
vulnerabilities compared to the other

269
00:09:21,920 --> 00:09:23,839
scanners

270
00:09:23,839 --> 00:09:25,440
and we can see that they struggle more

271
00:09:25,440 --> 00:09:28,560
with this stored xss

272
00:09:28,560 --> 00:09:30,160
and moving over to the modern

273
00:09:30,160 --> 00:09:31,680
applications we see that we are actually

274
00:09:31,680 --> 00:09:34,000
the only scanner that is able to find

275
00:09:34,000 --> 00:09:35,760
any vulnerabilities in this modern

276
00:09:35,760 --> 00:09:37,440
application and this is both for

277
00:09:37,440 --> 00:09:41,040
reflected access and stored xss

278
00:09:41,040 --> 00:09:42,560
and if we look at the total column we

279
00:09:42,560 --> 00:09:44,399
see that we are also finding more of

280
00:09:44,399 --> 00:09:45,040
course

281
00:09:45,040 --> 00:09:47,200
but more importantly is that the other

282
00:09:47,200 --> 00:09:49,200
scanners do not find any vulnerability

283
00:09:49,200 --> 00:09:50,080
that we do not

284
00:09:50,080 --> 00:09:52,000
find so we don't have any false

285
00:09:52,000 --> 00:09:53,839
negatives in this

286
00:09:53,839 --> 00:09:57,200
in this empirical study at least

287
00:09:58,320 --> 00:10:01,120
but to better understand why we are

288
00:10:01,120 --> 00:10:02,399
finding vulnerabilities

289
00:10:02,399 --> 00:10:05,200
we do a feature attribution so we look

290
00:10:05,200 --> 00:10:05,680
at

291
00:10:05,680 --> 00:10:08,320
which feature in this case navigation

292
00:10:08,320 --> 00:10:10,959
traversing or interstate dependencies

293
00:10:10,959 --> 00:10:14,320
and really was the main reason for

294
00:10:14,320 --> 00:10:15,920
finding the vulnerability

295
00:10:15,920 --> 00:10:17,839
so we see six vulnerabilities here that

296
00:10:17,839 --> 00:10:19,760
only black widow finds that none of the

297
00:10:19,760 --> 00:10:20,959
other scanners find

298
00:10:20,959 --> 00:10:23,600
were due to being better at one of these

299
00:10:23,600 --> 00:10:24,240
features

300
00:10:24,240 --> 00:10:26,800
and just a single feature so a concrete

301
00:10:26,800 --> 00:10:29,120
example here is vanilla for example

302
00:10:29,120 --> 00:10:31,120
where we just needed interstate

303
00:10:31,120 --> 00:10:32,320
dependency analysis

304
00:10:32,320 --> 00:10:35,360
to be able to find the vulnerability but

305
00:10:35,360 --> 00:10:37,040
we see that the real power comes from

306
00:10:37,040 --> 00:10:39,120
combining multiple features

307
00:10:39,120 --> 00:10:41,040
so for example if we improve both the

308
00:10:41,040 --> 00:10:42,959
navigation and traversing

309
00:10:42,959 --> 00:10:44,800
or navigation and interstate

310
00:10:44,800 --> 00:10:46,000
dependencies then we're able

311
00:10:46,000 --> 00:10:48,560
to find eight vulnerabilities and an

312
00:10:48,560 --> 00:10:50,320
example here is prestashop where

313
00:10:50,320 --> 00:10:52,880
are we required a combination of both

314
00:10:52,880 --> 00:10:53,839
navigation

315
00:10:53,839 --> 00:10:57,600
and traversing and there's also one case

316
00:10:57,600 --> 00:10:59,279
where we needed to combine all three of

317
00:10:59,279 --> 00:11:01,839
them in order to find the vulnerability

318
00:11:01,839 --> 00:11:04,079
so this was in wordpress where we needed

319
00:11:04,079 --> 00:11:07,040
to combine all of them

320
00:11:07,600 --> 00:11:09,040
and we have reported this and it's

321
00:11:09,040 --> 00:11:12,839
already fixed in hot crap as well as

322
00:11:12,839 --> 00:11:14,000
prestashop

323
00:11:14,000 --> 00:11:16,480
another positive feature with black

324
00:11:16,480 --> 00:11:17,120
widow

325
00:11:17,120 --> 00:11:19,360
is that we have no false positives in

326
00:11:19,360 --> 00:11:20,560
this empirical study

327
00:11:20,560 --> 00:11:22,720
and in general a very low false positive

328
00:11:22,720 --> 00:11:24,959
rate and this is because we use dynamic

329
00:11:24,959 --> 00:11:25,839
verification

330
00:11:25,839 --> 00:11:29,440
together with unique payload ids so

331
00:11:29,440 --> 00:11:31,279
other scanners were struggling with this

332
00:11:31,279 --> 00:11:32,959
in our empirical study

333
00:11:32,959 --> 00:11:34,959
for example enemy of the state at some

334
00:11:34,959 --> 00:11:36,079
point injects an

335
00:11:36,079 --> 00:11:38,079
eval statement that tries to print a

336
00:11:38,079 --> 00:11:40,399
string and then it finds this string

337
00:11:40,399 --> 00:11:43,519
in the response and so it deems this to

338
00:11:43,519 --> 00:11:45,279
be a vulnerability because it thinks

339
00:11:45,279 --> 00:11:46,079
that the eval

340
00:11:46,079 --> 00:11:48,880
print was executed so here we see the

341
00:11:48,880 --> 00:11:50,480
kind of the need for dynamically

342
00:11:50,480 --> 00:11:51,200
verifying

343
00:11:51,200 --> 00:11:54,399
that code is actually executed

344
00:11:54,399 --> 00:11:56,800
iraq can used dynamic verification but

345
00:11:56,800 --> 00:11:59,040
they reuse payloads and at one point

346
00:11:59,040 --> 00:12:00,480
they were able to inject

347
00:12:00,480 --> 00:12:03,760
a payload into the page title and this

348
00:12:03,760 --> 00:12:04,959
means that this payload would be

349
00:12:04,959 --> 00:12:06,880
triggered for every page load

350
00:12:06,880 --> 00:12:07,920
so it thought that it found

351
00:12:07,920 --> 00:12:10,240
vulnerabilities in every input after

352
00:12:10,240 --> 00:12:12,480
being able to inject the title

353
00:12:12,480 --> 00:12:14,880
so in our case by combining both the

354
00:12:14,880 --> 00:12:16,079
dynamic verification

355
00:12:16,079 --> 00:12:18,480
and unique payloads we are able to keep

356
00:12:18,480 --> 00:12:21,920
false positives to a minimum

357
00:12:22,079 --> 00:12:24,240
so to conclude our key idea is to

358
00:12:24,240 --> 00:12:26,399
combine navigation traversing and

359
00:12:26,399 --> 00:12:28,000
interstate dependencies

360
00:12:28,000 --> 00:12:31,519
in one into one approach and we see that

361
00:12:31,519 --> 00:12:34,320
this improves coverage by between 63 and

362
00:12:34,320 --> 00:12:36,399
280

363
00:12:36,399 --> 00:12:38,240
compared to the union of all the other

364
00:12:38,240 --> 00:12:40,320
scanners across all the applications we

365
00:12:40,320 --> 00:12:42,720
tested

366
00:12:42,800 --> 00:12:44,399
and we are also able to find more

367
00:12:44,399 --> 00:12:45,920
vulnerabilities in the reference

368
00:12:45,920 --> 00:12:46,720
applications

369
00:12:46,720 --> 00:12:48,720
as well as finding modern or

370
00:12:48,720 --> 00:12:53,040
vulnerabilities in modern applications

371
00:12:53,040 --> 00:12:55,440
and due to our combination of dynamic

372
00:12:55,440 --> 00:12:57,680
verification and unique payload ids

373
00:12:57,680 --> 00:12:59,680
we also keep false positives to a

374
00:12:59,680 --> 00:13:01,839
minimum

375
00:13:01,839 --> 00:13:03,680
and blackwidow is also open source and

376
00:13:03,680 --> 00:13:05,440
available on github so make sure to

377
00:13:05,440 --> 00:13:07,040
check that out

378
00:13:07,040 --> 00:13:08,560
so yeah i thank you all for attending

379
00:13:08,560 --> 00:13:10,560
this talk and i'm looking forward to the

380
00:13:10,560 --> 00:13:12,160
questions in the qea

381
00:13:12,160 --> 00:13:15,120
thank you

