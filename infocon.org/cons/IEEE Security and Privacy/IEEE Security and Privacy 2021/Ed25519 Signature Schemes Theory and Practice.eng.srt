1
00:00:00,250 --> 00:00:06,784
Hello everyone! Welcome to our talk: the provable security of Ed25519: Theory and Practice

2
00:00:08,425 --> 00:00:13,376
Nowadays, one of the most popular digital signature scheme is EdDSA.

3
00:00:15,425 --> 00:00:23,450
By virtue of high efficiency, the Ed25519 instantiation, has been widely deployed in various practical protocols.

4
00:00:24,325 --> 00:00:31,049
However, it turns out that the implementions differ substantially and the devil is in the details.

5
00:00:33,000 --> 00:00:41,725
Among them, three of the most significant ones are the original Ed25519, and its IETF and Libsodium variants.

6
00:00:43,875 --> 00:00:48,192
In this talk, we focus on four topics around Ed25519.

7
00:00:48,950 --> 00:00:57,850
First, we explore the differences between these three implementations - the Ed25519 Original, IETF, and Libsodium versions,

8
00:00:58,375 --> 00:01:02,425
and figure out the impacts of the differences on their security guarantees.

9
00:01:03,850 --> 00:01:06,975
The next topic is related to unforgeability.

10
00:01:07,525 --> 00:01:16,725
Surprisingly, since the release of Ed25519, no proof for unforgeability has ever been given for any Ed25519 variant.

11
00:01:17,475 --> 00:01:21,675
In our paper, we close this gap by providing the first proof.

12
00:01:23,050 --> 00:01:26,655
Moreover, in some applications such as SSH,

13
00:01:27,232 --> 00:01:32,250
the underlying Ed25519 scheme is even assumed to be strong unforgeabie.

14
00:01:32,975 --> 00:01:40,399
The third topic in our paper is to investigate the strong unforgeability for each of these three variants.

15
00:01:41,975 --> 00:01:47,649
Finally, let’s have a close look at the resilience to key substitution attacks,

16
00:01:48,225 --> 00:01:54,824
which are outside the traditional notions but have great significances for practical usage.

17
00:01:56,800 --> 00:02:00,675
Now, we start to recall the basic definition of the digital signature.

18
00:02:01,200 --> 00:02:04,050
Upon a signing key sk and a message m,

19
00:02:04,450 --> 00:02:09,750
the signer Alice can execute the signing algorithm to produce a signature sigma

20
00:02:10,250 --> 00:02:14,375
and send both message and signature to the verifier Bob.

21
00:02:15,700 --> 00:02:20,799
Upon the corresponding verification key and the transcript received from Alice,

22
00:02:21,400 --> 00:02:26,925
Bob is expected to pass this verification by outputting the boolean value True.

23
00:02:29,200 --> 00:02:31,500
In the unforgeability experiments,

24
00:02:31,825 --> 00:02:39,167
the signer Alice is simulated by a signing oracle that inputs a message m and outputs a real signature sigma.

25
00:02:40,125 --> 00:02:47,350
The adversary Eve has access to such signing oracle and finally outputs a pair of message and signature.

26
00:02:49,375 --> 00:02:55,725
The existential unforgeability under chosen message attacks, we say unforgeability for short,

27
00:02:56,250 --> 00:03:08,400
require the verification algorithm executed by Bob to output False if the forged message m’ is unequal to any message m that has been queried to the signing oracle.

28
00:03:09,750 --> 00:03:16,032
The strong unforgeability, requires Bob to reject any forged message-signature pair,

29
00:03:16,300 --> 00:03:21,750
which is unequal to any pair derived from the interaction between Eve and the signing oracle.

30
00:03:23,025 --> 00:03:34,976
In particular, Eve can win the strong unforgeability experiment by forging a new signature sigma’ for a message m’ = m that has already been queried.

31
00:03:37,425 --> 00:03:45,050
To investigate the Unforgability of Ed25519, we first recall its basic construction.

32
00:03:46,275 --> 00:03:52,384
The Ed25519 is designed on the twisted Edwards Curve TEd25519.

33
00:03:53,450 --> 00:03:56,899
Regarding this curve, there are two important points.

34
00:03:57,975 --> 00:04:05,700
The one is the point at infinity O, which equals 0P for all point P on TEd25519.

35
00:04:07,275 --> 00:04:23,300
The other is the selected base point B with order L. Here, the order of point B, denoted by the absolute value, defines the smallest positive integer n such that nB equals the point at infinity.

36
00:04:25,825 --> 00:04:29,625
The Ed25519-Original consists of three algorithms.

37
00:04:30,250 --> 00:04:38,025
The key generation algorithm inputs public parameter and samples a key with length 256 bits.

38
00:04:39,400 --> 00:04:46,349
Next, it derives a 512 bits long value h by applying a hash function to this k.

39
00:04:47,875 --> 00:04:56,175
Then, it derives s from the second 256 bits of h and computes A = sB.

40
00:04:57,450 --> 00:05:02,875
Here, this value A is the verification key and the sampled k is the signing key.

41
00:05:04,775 --> 00:05:09,424
The signing algorithm inputs a secret key k and a message m.

42
00:05:10,450 --> 00:05:15,800
The signer first recomputes the value h and s as in the key generation algorithm.

43
00:05:16,975 --> 00:05:24,275
Then it derives a value r from the message m and the first 256 bits of h

44
00:05:25,575 --> 00:05:41,950
Finally, it computes R = rB and S = r + H(R, A, m) s mod L, and outputs (R,S) as signature.

45
00:05:43,850 --> 00:05:54,100
The verification algorithm upon verification key A, a message m, a signature sigma denoted by a pair of (R, S),

46
00:05:54,675 --> 00:06:01,325
first checks whether points R and A both are on the curve TEd25519.

47
00:06:02,800 --> 00:06:07,875
Next, it checks whether S is 256 bits long.

48
00:06:09,275 --> 00:06:28,224
Finally, it checks whether the equation, 8SB = 8R + 8H(R, A, m)A holds, and outputs True if all checks succeed and false otherwise.

49
00:06:30,300 --> 00:06:36,650
In our paper, we formally prove that the basic paradigm of Ed25519 is unforgeable.

50
00:06:37,100 --> 00:06:44,650
This indicates that the Original, IETF, and Libsodium versions all are EUF-CMA secure.

51
00:06:46,625 --> 00:06:50,700
Regarding strong unforgettability, the case becomes different.

52
00:06:51,675 --> 00:06:56,625
When querying signing oracle on message m for a signature (R,S),

53
00:06:57,650 --> 00:07:07,525
the adversary can forge a new signature upon the same message m by replacing S by S’, which equals S + L

54
00:07:09,150 --> 00:07:12,650
It’s straightforward that the first and third checks are passed

55
00:07:12,650 --> 00:07:21,024
because the point R and A both are honestly generated and the base point B has order L.

56
00:07:22,800 --> 00:07:32,475
Then, the adversary wins if S’ is 256 bits long, which occurs with non-negligible probability,

57
00:07:33,375 --> 00:07:38,496
and indicates that Ed25519-Original is not strong unforgeable.

58
00:07:40,600 --> 00:07:46,975
However, the IETF and Libsodium versions additionally involve the bound checking.

59
00:07:48,150 --> 00:07:58,599
In addition to the signature validation check, these two versions also ensure the value S in the range from 0 to L - 1.

60
00:08:00,925 --> 00:08:09,300
Hence, we can observe that Ed25519 Original differs from IETF and Libsodium versions in bound checking.

61
00:08:10,600 --> 00:08:16,650
While the original version checks whether S is 256 bits long,

62
00:08:17,675 --> 00:08:24,950
the IETF and Libsodium versions check whether S is in the range from 0 to L - 1

63
00:08:26,300 --> 00:08:31,575
The relation between these three variants is depicted in the Venn diagram right side.

64
00:08:33,625 --> 00:08:44,025
Consequently, we prove that both IETF and Libsodium versions achieve SUF-CMA security, namely strong unforgeability.

65
00:08:46,150 --> 00:08:50,150
Other than classical security notions such as unforgeability,

66
00:08:50,700 --> 00:09:02,450
the key substitution attacks also have great significance especially in some specific realms including digital currency and email authentication.

67
00:09:03,525 --> 00:09:15,675
Roughly speaking, the key substitution attacks aim to forge a new verification key or a new message that can pass the verification upon some real signatures.

68
00:09:17,325 --> 00:09:27,900
A digital signature scheme without resilience to key substitution attacks directly loses the non-repudiation property,

69
00:09:28,475 --> 00:09:35,850
that is, a user that has signed some message cannot at a later time deny having signed it.

70
00:09:37,050 --> 00:09:40,175
In our paper, we introduce three variants.

71
00:09:40,800 --> 00:09:59,400
The first one, strong universal exclusive ownership requires the verification algorithm to output false upon a forged verification key that differs from the original one, a forged message, and an honestly generated message-signature pair.

72
00:10:01,125 --> 00:10:19,525
Moreover, we say a signature scheme has message bound signatures if the verification algorithm cannot pass upon the same verification key and signature and two distinct messages output by an adversary.

73
00:10:20,975 --> 00:10:38,250
Finally, the malicious strong universal exclusive ownership ensures that no adversary can forge two distinct verification keys vk and vk’, a signature sigma, two messages m and m’

74
00:10:38,650 --> 00:10:46,750
such that the verification on vk, m, sigma and on vk’, m’, sigma both hold.

75
00:10:49,325 --> 00:11:01,125
In terms of the key substitution attacks, our first theorem reveals that all these three Ed25519 variants have strong universal exclusive ownership.

76
00:11:03,800 --> 00:11:08,000
The analysis for message bound signatures is however not the case

77
00:11:09,150 --> 00:11:18,775
An adversary can output verification key A, signature (R, S), and two messages m and m’ such that,

78
00:11:18,775 --> 00:11:30,350
the points A and R both are on TEd25519, and the positive S is less than L, then pass the first and second checks.

79
00:11:31,425 --> 00:11:47,007
Additionally, the point A also has low order 8, which means, 8A = O = 0B, and that SB equals R.

80
00:11:47,700 --> 00:11:50,275
Then, the third check also succeeds.

81
00:11:52,025 --> 00:11:58,600
Therefore, the adversary can win for arbitrary distinct messages m and m’,

82
00:11:59,200 --> 00:12:04,175
which indicates that the IETF version does not have MBS.

83
00:12:06,650 --> 00:12:11,675
The Libsodium variant prevents this attack by low order point checking.

84
00:12:12,625 --> 00:12:21,875
In addition to bound checking, the Libsodium version rejects the points A and R which have order small than L.

85
00:12:23,975 --> 00:12:28,525
Now, we can easily find the differences between these three implementations.

86
00:12:29,350 --> 00:12:37,125
Compared to Ed25519-Original, the IETF and Libsodium versions involve bound checking,

87
00:12:37,525 --> 00:12:46,475
namely, the IETF and Libsodium versions check whether the value S is in the range from 0 to L - 1.

88
00:12:47,500 --> 00:12:54,200
Further, the Libsodium version additionally involves low order point checking,

89
00:12:54,775 --> 00:13:03,975
namely, the Libsodium version also checks whether the points A and R both have order greater than or equal L.

90
00:13:05,375 --> 00:13:11,300
The relation between these three variants is depicted in the Venn diagram right side.

91
00:13:13,325 --> 00:13:18,650
Consequently, we prove that the Libsodium version has message bound signatures.

92
00:13:19,900 --> 00:13:26,150
Similarly, we also prove that it achieves malicious strong universal exclusive ownership.

93
00:13:27,750 --> 00:13:31,475
In the end, we would like to provide a summary for this talk.

94
00:13:32,100 --> 00:13:38,725
We compare the implementations of three representative variants of Ed25519.

95
00:13:39,300 --> 00:13:50,199
Besides, we disclose the different security guarantees achieved by these three variants, including unforgeability and resilience to key substitution attacks.

96
00:13:51,925 --> 00:13:59,599
Based on these conclusions, We recommend users to choose suitable variants according their different purpose of usage.

97
00:14:00,350 --> 00:14:07,600
And to base their protocols on the suitable security assumptions of their underlying Ed25519 variants.

98
00:14:09,375 --> 00:14:12,425
That is all of our talk. Thanks for your attention.

99
00:14:12,425 --> 00:14:15,295
If you are interested in the details of our work,

100
00:14:15,296 --> 00:14:21,675
please read our paper, the provable security of Ed25519: Theory and Practice.

