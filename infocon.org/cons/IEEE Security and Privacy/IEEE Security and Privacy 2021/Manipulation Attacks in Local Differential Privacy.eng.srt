1
00:00:01,920 --> 00:00:03,120
i'm albert chu

2
00:00:03,120 --> 00:00:04,960
and i will talk about manipulation tax

3
00:00:04,960 --> 00:00:07,279
and local differential privacy

4
00:00:07,279 --> 00:00:08,960
this is joint work of adam smith and

5
00:00:08,960 --> 00:00:11,599
john allman

6
00:00:12,400 --> 00:00:14,880
in local differential privacy users take

7
00:00:14,880 --> 00:00:16,560
it upon themselves to ensure

8
00:00:16,560 --> 00:00:19,119
their privacy they compute randomized

9
00:00:19,119 --> 00:00:20,960
messages using their data

10
00:00:20,960 --> 00:00:23,680
and send these messages to an activator

11
00:00:23,680 --> 00:00:25,519
the aggregator recovers the mean or

12
00:00:25,519 --> 00:00:27,439
classifier or some of the information

13
00:00:27,439 --> 00:00:30,960
from the messages because the users want

14
00:00:30,960 --> 00:00:32,000
privacy

15
00:00:32,000 --> 00:00:33,760
each message should not reveal much

16
00:00:33,760 --> 00:00:36,239
information of the user who made it

17
00:00:36,239 --> 00:00:38,160
it is by now well known that sending

18
00:00:38,160 --> 00:00:39,360
private messages

19
00:00:39,360 --> 00:00:42,000
can only lead to worse estimates than

20
00:00:42,000 --> 00:00:46,399
trusting the actuator to privatize

21
00:00:46,399 --> 00:00:48,399
but now work we consider a different

22
00:00:48,399 --> 00:00:51,280
flaw of the model

23
00:00:51,920 --> 00:00:54,000
in our threat model the goal of an

24
00:00:54,000 --> 00:00:55,840
adversary is to skew the aggregator's

25
00:00:55,840 --> 00:00:57,360
output

26
00:00:57,360 --> 00:00:59,440
the adversary controls a gamma fraction

27
00:00:59,440 --> 00:01:01,120
of the users

28
00:01:01,120 --> 00:01:04,720
who report arbitrary messages

29
00:01:04,720 --> 00:01:07,360
the rest of the users are honest and run

30
00:01:07,360 --> 00:01:09,760
the local randomizer

31
00:01:09,760 --> 00:01:13,840
the aggregator computes on all messages

32
00:01:14,000 --> 00:01:16,560
our work shows that only a small gamma

33
00:01:16,560 --> 00:01:17,439
is necessary

34
00:01:17,439 --> 00:01:20,880
to control the aggregator's output

35
00:01:20,880 --> 00:01:22,400
attacks in this model were considered in

36
00:01:22,400 --> 00:01:25,200
prior and concurrent work

37
00:01:25,200 --> 00:01:27,360
but in our work we expose that powerful

38
00:01:27,360 --> 00:01:30,240
attacks are inherent in the model

39
00:01:30,240 --> 00:01:32,400
the output of any locally private

40
00:01:32,400 --> 00:01:34,640
protocol can be manipulated by corrupt

41
00:01:34,640 --> 00:01:36,640
users

42
00:01:36,640 --> 00:01:38,960
in such a way that the error grows with

43
00:01:38,960 --> 00:01:40,000
the privacy level

44
00:01:40,000 --> 00:01:43,759
and domain size we also show that

45
00:01:43,759 --> 00:01:46,640
optimally robust protocols exist

46
00:01:46,640 --> 00:01:48,399
no attack can do more damage to them

47
00:01:48,399 --> 00:01:51,200
than our attack

48
00:01:52,159 --> 00:01:53,840
the core example is distribution

49
00:01:53,840 --> 00:01:55,439
estimation

50
00:01:55,439 --> 00:01:58,560
if we get data from a distribution

51
00:01:58,560 --> 00:02:00,560
and we want to estimate it in the l1

52
00:02:00,560 --> 00:02:02,719
norm

53
00:02:02,719 --> 00:02:04,960
corrupt users can introduce error at

54
00:02:04,960 --> 00:02:06,159
least as large

55
00:02:06,159 --> 00:02:10,399
as square d over epsilon

56
00:02:13,360 --> 00:02:15,760
to be more precise of our definitions

57
00:02:15,760 --> 00:02:17,520
we're going to focus on randomizers that

58
00:02:17,520 --> 00:02:17,760
are

59
00:02:17,760 --> 00:02:20,640
epsilon locally private which means that

60
00:02:20,640 --> 00:02:22,879
any pair of inputs results in a pair of

61
00:02:22,879 --> 00:02:24,800
output distributions

62
00:02:24,800 --> 00:02:28,319
that are close up to an epsilon factor

63
00:02:28,319 --> 00:02:30,000
by this i mean the distributions are

64
00:02:30,000 --> 00:02:32,080
multiplicatively close

65
00:02:32,080 --> 00:02:36,640
point wise the closeness factor is e to

66
00:02:36,640 --> 00:02:37,840
the epsilon

67
00:02:37,840 --> 00:02:39,440
but we'll think of this as one plus

68
00:02:39,440 --> 00:02:41,599
epsilon

69
00:02:41,599 --> 00:02:43,200
we'll treat epsilon as a value less than

70
00:02:43,200 --> 00:02:45,120
one to simplify presentation

71
00:02:45,120 --> 00:02:46,640
but our results will for larger epsilon

72
00:02:46,640 --> 00:02:50,640
as well

73
00:02:50,640 --> 00:02:52,959
as i said before they are gamma corrupt

74
00:02:52,959 --> 00:02:53,760
users

75
00:02:53,760 --> 00:02:55,440
and we show that their influence on any

76
00:02:55,440 --> 00:02:56,959
estimation protocol

77
00:02:56,959 --> 00:03:00,879
scales of root d over epsilon

78
00:03:01,200 --> 00:03:04,720
prime work focused on specific protocols

79
00:03:04,720 --> 00:03:07,360
randomized response and work by ambenus

80
00:03:07,360 --> 00:03:09,120
jacobson and litma

81
00:03:09,120 --> 00:03:12,000
and miranda noor then histograms and

82
00:03:12,000 --> 00:03:15,840
heavy hitters by kao jiang gong

83
00:03:15,840 --> 00:03:18,319
our work gives attack against any

84
00:03:18,319 --> 00:03:19,440
protocol

85
00:03:19,440 --> 00:03:22,159
for this problem

86
00:03:24,239 --> 00:03:26,239
one attack that you may consider is

87
00:03:26,239 --> 00:03:28,000
input manipulation

88
00:03:28,000 --> 00:03:29,840
this applies to any protocol in any

89
00:03:29,840 --> 00:03:31,920
model and the gamma fraction can

90
00:03:31,920 --> 00:03:34,560
introduce only gamma error

91
00:03:34,560 --> 00:03:36,159
on the other hand our attacks are

92
00:03:36,159 --> 00:03:37,599
tailored to local dp

93
00:03:37,599 --> 00:03:39,280
and get worse with dimension and privacy

94
00:03:39,280 --> 00:03:41,680
guarantee

95
00:03:45,120 --> 00:03:47,120
the core idea of our attack is the

96
00:03:47,120 --> 00:03:49,200
following observation

97
00:03:49,200 --> 00:03:51,840
an accurate aggregator must be sensitive

98
00:03:51,840 --> 00:03:52,959
to small changes

99
00:03:52,959 --> 00:03:56,319
in the message distribution

100
00:03:56,319 --> 00:03:59,120
so to set up we'll draw the set of data

101
00:03:59,120 --> 00:04:00,000
distributions as

102
00:04:00,000 --> 00:04:03,200
a circle now suppose there are two

103
00:04:03,200 --> 00:04:04,879
distributions on data

104
00:04:04,879 --> 00:04:08,159
that are far apart for example uniform

105
00:04:08,159 --> 00:04:12,319
over some set or far from uniform

106
00:04:12,319 --> 00:04:14,239
ideally the protocol is good at

107
00:04:14,239 --> 00:04:16,478
estimating distributions

108
00:04:16,478 --> 00:04:18,720
so its estimates should live in these

109
00:04:18,720 --> 00:04:19,918
two regions

110
00:04:19,918 --> 00:04:24,079
close to the true distributions

111
00:04:24,320 --> 00:04:27,360
but the evidence in a local protocol

112
00:04:27,360 --> 00:04:30,880
does not operate on the raw data

113
00:04:30,880 --> 00:04:33,280
it instead gets messages from a local

114
00:04:33,280 --> 00:04:35,520
randomizer

115
00:04:35,520 --> 00:04:39,040
and the definition of local privacy

116
00:04:39,040 --> 00:04:41,440
means that the two input distributions

117
00:04:41,440 --> 00:04:42,479
must be mapped

118
00:04:42,479 --> 00:04:44,320
close together in this message

119
00:04:44,320 --> 00:04:47,280
distribution space

120
00:04:51,680 --> 00:04:54,160
so in order to be accurate the editor

121
00:04:54,160 --> 00:04:55,360
has to be sensitive

122
00:04:55,360 --> 00:04:58,479
to the signals from the messages

123
00:04:58,479 --> 00:05:01,120
we'll exploit this sensitivity in our

124
00:05:01,120 --> 00:05:03,520
attacks

125
00:05:04,720 --> 00:05:07,919
crop users will send messages that shift

126
00:05:07,919 --> 00:05:11,840
this distribution

127
00:05:13,759 --> 00:05:15,919
to make this more concrete let's explore

128
00:05:15,919 --> 00:05:18,400
binary mean estimation

129
00:05:18,400 --> 00:05:20,479
here everyone has assigned bit drawn

130
00:05:20,479 --> 00:05:21,919
from rada machimu

131
00:05:21,919 --> 00:05:23,680
and we like to know mu under local

132
00:05:23,680 --> 00:05:25,759
privacy

133
00:05:25,759 --> 00:05:28,560
where rada macro mu is the distribution

134
00:05:28,560 --> 00:05:30,160
over plus minus 1

135
00:05:30,160 --> 00:05:33,600
with mean mu and mu uniquely identifies

136
00:05:33,600 --> 00:05:38,400
the distribution

137
00:05:38,400 --> 00:05:40,000
the standard solution for locally

138
00:05:40,000 --> 00:05:41,600
private mean estimation

139
00:05:41,600 --> 00:05:45,039
is randomized response here

140
00:05:45,039 --> 00:05:46,479
each user flips their bit with

141
00:05:46,479 --> 00:05:49,600
probability close to half

142
00:05:49,600 --> 00:05:52,080
the aggregator collects the messages and

143
00:05:52,080 --> 00:05:52,880
can compute

144
00:05:52,880 --> 00:05:56,000
an unbiased estimate

145
00:05:59,440 --> 00:06:01,520
a baseline attack is to just change the

146
00:06:01,520 --> 00:06:03,600
inputs to the randomizer

147
00:06:03,600 --> 00:06:06,080
this incurs error gamma so no useful

148
00:06:06,080 --> 00:06:06,960
estimate

149
00:06:06,960 --> 00:06:11,039
if gamma is large like one half

150
00:06:13,600 --> 00:06:15,440
but notice that this aggregator is

151
00:06:15,440 --> 00:06:18,479
rescaling by epsilon

152
00:06:18,479 --> 00:06:21,199
this means that when a corrupted user

153
00:06:21,199 --> 00:06:23,120
sends a message that is fixed to b plus

154
00:06:23,120 --> 00:06:23,759
1

155
00:06:23,759 --> 00:06:27,600
it gets inflated to 1 over epsilon

156
00:06:27,759 --> 00:06:30,479
that means a gamma fraction of users

157
00:06:30,479 --> 00:06:31,199
introduces

158
00:06:31,199 --> 00:06:34,319
gamma over epsilon error

159
00:06:34,319 --> 00:06:36,160
so we have no useful estimate if gamma

160
00:06:36,160 --> 00:06:37,360
is near epsilon

161
00:06:37,360 --> 00:06:41,280
not near a constant like before

162
00:06:45,919 --> 00:06:47,840
our work shows that every locally

163
00:06:47,840 --> 00:06:49,919
private solution for this problem

164
00:06:49,919 --> 00:06:51,680
not just randomized response and not

165
00:06:51,680 --> 00:06:53,520
just this aggregator

166
00:06:53,520 --> 00:06:56,960
has this level of vulnerability

167
00:07:00,479 --> 00:07:02,880
to prove this theorem we will focus

168
00:07:02,880 --> 00:07:05,440
first on randomized response

169
00:07:05,440 --> 00:07:08,479
but with an arbitrary aggregator

170
00:07:08,479 --> 00:07:10,240
we will generalize to other randomizers

171
00:07:10,240 --> 00:07:12,720
later on

172
00:07:13,440 --> 00:07:16,319
we will construct two worlds in one

173
00:07:16,319 --> 00:07:16,960
world

174
00:07:16,960 --> 00:07:19,520
there are no crop users and the mean of

175
00:07:19,520 --> 00:07:20,080
data

176
00:07:20,080 --> 00:07:23,520
is some mu in the other world

177
00:07:23,520 --> 00:07:26,000
a gamma fraction are corrupt and the

178
00:07:26,000 --> 00:07:27,360
mean of user data

179
00:07:27,360 --> 00:07:30,560
is zero

180
00:07:30,560 --> 00:07:33,440
because data is binary we'll visualize

181
00:07:33,440 --> 00:07:35,440
our distributions as points on a number

182
00:07:35,440 --> 00:07:37,759
line

183
00:07:38,880 --> 00:07:40,400
notice that when we have accurate

184
00:07:40,400 --> 00:07:42,560
estimates we can distinguish the two

185
00:07:42,560 --> 00:07:43,759
worlds

186
00:07:43,759 --> 00:07:46,960
these sets are destroyed

187
00:07:47,919 --> 00:07:50,080
our goal is to attack the protocol in a

188
00:07:50,080 --> 00:07:52,720
way that makes distinguishing impossible

189
00:07:52,720 --> 00:07:54,879
which in turn means error must be at

190
00:07:54,879 --> 00:07:56,000
least

191
00:07:56,000 --> 00:08:01,120
mu over two sp large

192
00:08:03,280 --> 00:08:05,360
let's consider world one an honest

193
00:08:05,360 --> 00:08:06,879
execution

194
00:08:06,879 --> 00:08:08,639
the data has drawn iid from a

195
00:08:08,639 --> 00:08:11,039
distribution of mean mu

196
00:08:11,039 --> 00:08:13,120
and it's not difficult to show that the

197
00:08:13,120 --> 00:08:14,720
message from any user

198
00:08:14,720 --> 00:08:19,120
is a bit of mean epsilon times mu

199
00:08:19,360 --> 00:08:23,440
local privacy contracts the mean towards

200
00:08:24,840 --> 00:08:27,199
zero

201
00:08:27,199 --> 00:08:28,960
for reasons that will become clear we

202
00:08:28,960 --> 00:08:30,639
will choose mu to be gamma over 2

203
00:08:30,639 --> 00:08:32,719
epsilon

204
00:08:32,719 --> 00:08:35,039
so that the message distribution has

205
00:08:35,039 --> 00:08:40,799
mean gamma over 2.

206
00:08:40,799 --> 00:08:42,958
now let's consider world two a corrupted

207
00:08:42,958 --> 00:08:44,800
execution

208
00:08:44,800 --> 00:08:48,959
the mean here is zero so honest users

209
00:08:48,959 --> 00:08:52,839
like user n will send messages with mean

210
00:08:52,839 --> 00:08:54,880
zero

211
00:08:54,880 --> 00:08:57,040
our adversary will corrupt each user

212
00:08:57,040 --> 00:08:58,800
independently with probability gamma

213
00:08:58,800 --> 00:09:00,399
over two

214
00:09:00,399 --> 00:09:02,240
this has the effect of corrupting a mos

215
00:09:02,240 --> 00:09:03,519
gamma fraction

216
00:09:03,519 --> 00:09:08,000
a very high probability

217
00:09:08,000 --> 00:09:11,120
these corrupted users all execute m

218
00:09:11,120 --> 00:09:13,360
and this m strategy is just output

219
00:09:13,360 --> 00:09:16,399
message plus one

220
00:09:16,720 --> 00:09:18,640
so the crop distribution has mean plus

221
00:09:18,640 --> 00:09:21,760
one as opposed to mean zero

222
00:09:21,760 --> 00:09:23,040
but a corruption that happens with

223
00:09:23,040 --> 00:09:25,120
probably gamma over 2.

224
00:09:25,120 --> 00:09:28,560
so this means any message in world 2

225
00:09:28,560 --> 00:09:31,839
has mean gamma over 2.

226
00:09:34,959 --> 00:09:36,080
but this is exactly the same

227
00:09:36,080 --> 00:09:39,600
distribution as in world one

228
00:09:39,600 --> 00:09:42,080
this means no tests can distinguish the

229
00:09:42,080 --> 00:09:43,920
two worlds

230
00:09:43,920 --> 00:09:46,720
and in turn no aggregator can have

231
00:09:46,720 --> 00:09:51,839
overly accurate estimates

232
00:09:54,480 --> 00:09:57,120
to handle other randomizers we'll

233
00:09:57,120 --> 00:09:58,320
essentially reduce the randomized

234
00:09:58,320 --> 00:10:00,399
response

235
00:10:00,399 --> 00:10:01,839
this is done by using the following

236
00:10:01,839 --> 00:10:04,720
number by carriers and ombudsman

237
00:10:04,720 --> 00:10:06,800
any locally private randomizer can be

238
00:10:06,800 --> 00:10:08,640
expressed as a post-processing

239
00:10:08,640 --> 00:10:12,480
p a randomized response

240
00:10:14,560 --> 00:10:16,959
before we just flipped a bit of some

241
00:10:16,959 --> 00:10:18,640
probability

242
00:10:18,640 --> 00:10:21,839
but now more generally we will run p

243
00:10:21,839 --> 00:10:24,800
on the flipped bit

244
00:10:25,600 --> 00:10:28,880
to attack randomized response crop users

245
00:10:28,880 --> 00:10:32,640
send plus one in a more general case

246
00:10:32,640 --> 00:10:36,399
corrupted users will send p of plus one

247
00:10:36,399 --> 00:10:40,000
the proof directly carries over

248
00:10:43,680 --> 00:10:45,120
so we have shown that every locally

249
00:10:45,120 --> 00:10:47,040
private particle has manipulation error

250
00:10:47,040 --> 00:10:48,079
gamma over epsilon

251
00:10:48,079 --> 00:10:51,440
in the binary case randomized response

252
00:10:51,440 --> 00:10:53,120
gives a matching upper bound to this

253
00:10:53,120 --> 00:10:55,519
result

254
00:10:56,480 --> 00:10:59,279
when the dimensionality is d we want to

255
00:10:59,279 --> 00:11:00,880
show that the error now scales with root

256
00:11:00,880 --> 00:11:02,320
d

257
00:11:02,320 --> 00:11:04,480
so there's no useful estimation if an

258
00:11:04,480 --> 00:11:06,079
epsilon over root d fraction is

259
00:11:06,079 --> 00:11:08,640
corrupted

260
00:11:08,720 --> 00:11:10,720
as with the binary case the lower bound

261
00:11:10,720 --> 00:11:12,480
is tight there is a protocol whose error

262
00:11:12,480 --> 00:11:15,839
is at most root d over epsilon

263
00:11:16,880 --> 00:11:18,560
we will adapt our original attack to

264
00:11:18,560 --> 00:11:21,040
larger dimensions

265
00:11:21,040 --> 00:11:22,480
because messages are not always

266
00:11:22,480 --> 00:11:24,959
one-dimensional we'll instead use a ball

267
00:11:24,959 --> 00:11:26,480
to visualize the set

268
00:11:26,480 --> 00:11:30,240
of all possible message distributions

269
00:11:30,399 --> 00:11:33,279
r of one will be one point in this ball

270
00:11:33,279 --> 00:11:34,959
where r of one

271
00:11:34,959 --> 00:11:37,279
is the message distribution when the

272
00:11:37,279 --> 00:11:39,680
input is one

273
00:11:39,680 --> 00:11:45,440
same for r2 r3 and so on until r of d

274
00:11:45,440 --> 00:11:47,680
we can also define r of u which is the

275
00:11:47,680 --> 00:11:48,800
distribution

276
00:11:48,800 --> 00:11:52,160
of the message when the user has a

277
00:11:52,160 --> 00:11:57,040
uniformly random value

278
00:11:57,040 --> 00:11:58,560
local privacy means that all of the

279
00:11:58,560 --> 00:12:02,639
randomizer's message distributions

280
00:12:02,639 --> 00:12:06,560
are all epsilon close to r of u

281
00:12:06,560 --> 00:12:08,639
these distributions need to be similar

282
00:12:08,639 --> 00:12:11,839
to be private

283
00:12:13,680 --> 00:12:16,399
so how does our attack work we prove the

284
00:12:16,399 --> 00:12:18,000
following lemma

285
00:12:18,000 --> 00:12:21,200
there is a special distribution g

286
00:12:21,200 --> 00:12:22,839
that is far from being the uniform

287
00:12:22,839 --> 00:12:25,040
distribution

288
00:12:25,040 --> 00:12:28,079
but the message distributions r of g and

289
00:12:28,079 --> 00:12:28,959
r of u

290
00:12:28,959 --> 00:12:32,320
are close they are epsilon over

291
00:12:32,320 --> 00:12:35,200
d close together

292
00:12:35,600 --> 00:12:38,000
after finding this g the adversary

293
00:12:38,000 --> 00:12:38,959
adapts the attack

294
00:12:38,959 --> 00:12:42,000
from the binary case

295
00:12:43,200 --> 00:12:46,560
specifically we consider two worlds

296
00:12:46,560 --> 00:12:48,320
in one world the data is drawn from a

297
00:12:48,320 --> 00:12:49,920
mixture between u

298
00:12:49,920 --> 00:12:52,560
and g in the other world the data is

299
00:12:52,560 --> 00:12:54,800
drawn from uniform

300
00:12:54,800 --> 00:12:57,680
due to privacy the message distribution

301
00:12:57,680 --> 00:12:59,120
in the first world

302
00:12:59,120 --> 00:13:02,079
experiences contraction while in the

303
00:13:02,079 --> 00:13:03,120
second world

304
00:13:03,120 --> 00:13:04,800
messages from honest users have

305
00:13:04,800 --> 00:13:07,839
distribution rvu

306
00:13:08,480 --> 00:13:10,320
and the corrupted users shift the

307
00:13:10,320 --> 00:13:11,839
message distribution

308
00:13:11,839 --> 00:13:14,959
to down the first world

309
00:13:15,600 --> 00:13:18,320
the special property g has is that the

310
00:13:18,320 --> 00:13:19,519
message distribution

311
00:13:19,519 --> 00:13:24,720
r of g is epsilon over d close to r of u

312
00:13:26,800 --> 00:13:29,040
this construction directly parallels the

313
00:13:29,040 --> 00:13:31,760
randomized response construction

314
00:13:31,760 --> 00:13:35,360
where if the closeness is epsilon

315
00:13:35,360 --> 00:13:39,839
l then the error is one over epsilon l

316
00:13:40,880 --> 00:13:43,920
now back to our high dimensional attack

317
00:13:43,920 --> 00:13:46,399
this epsilon l term is actually epsilon

318
00:13:46,399 --> 00:13:47,680
over d

319
00:13:47,680 --> 00:13:51,680
so now our error has this root d term

320
00:13:55,040 --> 00:13:57,680
to sum up we've shown that attacks are

321
00:13:57,680 --> 00:13:59,199
more powerful

322
00:13:59,199 --> 00:14:01,040
with stronger privacy and bigger

323
00:14:01,040 --> 00:14:03,279
dimension

324
00:14:03,279 --> 00:14:06,160
if implementations require local dp

325
00:14:06,160 --> 00:14:07,839
attention should be paid to the optimum

326
00:14:07,839 --> 00:14:11,760
particles we identify in our paper

327
00:14:11,839 --> 00:14:15,680
otherwise other models hold promise

328
00:14:15,680 --> 00:14:17,360
we could simulate centrally private

329
00:14:17,360 --> 00:14:19,199
algorithms with secure multi-party

330
00:14:19,199 --> 00:14:21,680
computation

331
00:14:21,680 --> 00:14:23,680
as a special case of that we can

332
00:14:23,680 --> 00:14:24,800
consider the recent

333
00:14:24,800 --> 00:14:28,399
shuffle and secure aggregation models

334
00:14:28,399 --> 00:14:30,240
there has not been as much research into

335
00:14:30,240 --> 00:14:33,199
manipulation attacks in these two models

336
00:14:33,199 --> 00:14:35,760
at least as much as in the local model

337
00:14:35,760 --> 00:14:39,199
so it is right for investigation

338
00:14:40,560 --> 00:14:42,839
this concludes the talk thank you for

339
00:14:42,839 --> 00:14:45,839
watching

