1
00:00:00,160 --> 00:00:02,480
hello everyone my name is jojang i'm

2
00:00:02,480 --> 00:00:04,160
going to present our research

3
00:00:04,160 --> 00:00:06,560
work osprey a technique to recover

4
00:00:06,560 --> 00:00:08,240
variable and data structure from

5
00:00:08,240 --> 00:00:10,000
stripped binary

6
00:00:10,000 --> 00:00:11,519
recovering variable in the data

7
00:00:11,519 --> 00:00:13,280
structure information from stripped

8
00:00:13,280 --> 00:00:13,920
binary

9
00:00:13,920 --> 00:00:15,839
is a critical challenge in binary

10
00:00:15,839 --> 00:00:17,199
program analysis

11
00:00:17,199 --> 00:00:18,960
it has many downstream security

12
00:00:18,960 --> 00:00:21,600
applications including bug detection

13
00:00:21,600 --> 00:00:24,480
malware analysis and automatic exploit

14
00:00:24,480 --> 00:00:25,760
generation

15
00:00:25,760 --> 00:00:28,400
however it is not an easy task

16
00:00:28,400 --> 00:00:30,720
compilation is a nasty procedure

17
00:00:30,720 --> 00:00:32,880
where high-level semantic information

18
00:00:32,880 --> 00:00:34,960
especially the user-defined structure

19
00:00:34,960 --> 00:00:36,800
information is lost

20
00:00:36,800 --> 00:00:39,600
variables and data structure information

21
00:00:39,600 --> 00:00:39,920
are

22
00:00:39,920 --> 00:00:42,399
translated to plane registers and the

23
00:00:42,399 --> 00:00:44,000
memory location without

24
00:00:44,000 --> 00:00:46,960
any structure or type information

25
00:00:46,960 --> 00:00:48,559
recovery of variable in the data

26
00:00:48,559 --> 00:00:50,079
structure is to recover

27
00:00:50,079 --> 00:00:52,399
those misinformation from the plane of

28
00:00:52,399 --> 00:00:53,440
the money code

29
00:00:53,440 --> 00:00:56,719
which is uncertain by its nature next

30
00:00:56,719 --> 00:00:58,640
first use an example to illustrate the

31
00:00:58,640 --> 00:00:59,520
limitation of

32
00:00:59,520 --> 00:01:02,320
existing work and motivate our technique

33
00:01:02,320 --> 00:01:04,640
the code on the right side presents the

34
00:01:04,640 --> 00:01:06,479
source code of a function named

35
00:01:06,479 --> 00:01:09,680
hoofed build in gzip it is substantially

36
00:01:09,680 --> 00:01:12,159
simplified for the illustration purpose

37
00:01:12,159 --> 00:01:14,880
we also introduce a craft main function

38
00:01:14,880 --> 00:01:16,400
which use a predicate of

39
00:01:16,400 --> 00:01:19,439
a random number to present that the

40
00:01:19,439 --> 00:01:21,360
likelihood of reaching the function

41
00:01:21,360 --> 00:01:23,280
through random test input generation is

42
00:01:23,280 --> 00:01:24,400
small

43
00:01:24,400 --> 00:01:27,200
in that code line one two four defines a

44
00:01:27,200 --> 00:01:28,640
structure element t

45
00:01:28,640 --> 00:01:31,759
consisting of two fields x and y

46
00:01:31,759 --> 00:01:34,079
inside the function nine eleven declares

47
00:01:34,079 --> 00:01:36,400
p as a pointer to another t

48
00:01:36,400 --> 00:01:39,439
and we as a stack ignite element

49
00:01:39,439 --> 00:01:42,399
the conditional statement at 9 13 has

50
00:01:42,399 --> 00:01:43,520
two branches

51
00:01:43,520 --> 00:01:46,399
with the true branches stating p to the

52
00:01:46,399 --> 00:01:46,960
address

53
00:01:46,960 --> 00:01:49,360
of weight and the fourth branches

54
00:01:49,360 --> 00:01:51,600
allocating a piece of hip memory

55
00:01:51,600 --> 00:01:54,000
and the storing way to the annotated

56
00:01:54,000 --> 00:01:55,439
space

57
00:01:55,439 --> 00:01:58,799
and finally knight 20 outputs the field

58
00:01:58,799 --> 00:02:02,320
x and y of the structure pointed by p

59
00:02:02,320 --> 00:02:04,799
so in this case from the compiled

60
00:02:04,799 --> 00:02:05,759
executable

61
00:02:05,759 --> 00:02:08,318
we are trying to recover the structure

62
00:02:08,318 --> 00:02:09,919
of element t

63
00:02:09,919 --> 00:02:12,400
the fact that p is a pointer point to

64
00:02:12,400 --> 00:02:13,599
element

65
00:02:13,599 --> 00:02:16,319
and the fact that way is an element t

66
00:02:16,319 --> 00:02:18,640
located on the stack

67
00:02:18,640 --> 00:02:20,160
so we are going to talk about some

68
00:02:20,160 --> 00:02:23,040
limitations of existing technique

69
00:02:23,040 --> 00:02:25,360
the state-of-the-art static analysis

70
00:02:25,360 --> 00:02:27,360
tools are gitra and ida

71
00:02:27,360 --> 00:02:29,440
these techniques are based on specific

72
00:02:29,440 --> 00:02:30,720
code pattern

73
00:02:30,720 --> 00:02:32,640
however there are some limitations of

74
00:02:32,640 --> 00:02:34,879
this static analysis based

75
00:02:34,879 --> 00:02:38,080
tools first of all they are unreliable

76
00:02:38,080 --> 00:02:39,440
due to uncertainty

77
00:02:39,440 --> 00:02:42,319
which leads to contradicting results

78
00:02:42,319 --> 00:02:44,560
recall that combination is a nuclear

79
00:02:44,560 --> 00:02:45,680
procedure

80
00:02:45,680 --> 00:02:48,000
and hence reverse engineering is

81
00:02:48,000 --> 00:02:50,160
uncertain by its nature

82
00:02:50,160 --> 00:02:52,080
they also cannot handle complex

83
00:02:52,080 --> 00:02:54,160
structures in this case

84
00:02:54,160 --> 00:02:56,879
917 stores weight to the memory pointed

85
00:02:56,879 --> 00:02:57,599
by p

86
00:02:57,599 --> 00:03:00,879
whose assembly code consists of a

87
00:03:00,879 --> 00:03:04,959
move dqa and move ups instruction pair

88
00:03:04,959 --> 00:03:06,879
the instruction pair denotes a floating

89
00:03:06,879 --> 00:03:08,400
point venue movement

90
00:03:08,400 --> 00:03:11,360
hence typically ida and the ghetto will

91
00:03:11,360 --> 00:03:12,159
think that p

92
00:03:12,159 --> 00:03:14,800
point to a floating point variable

93
00:03:14,800 --> 00:03:15,760
unfortunately

94
00:03:15,760 --> 00:03:18,560
in this case the two instructions are

95
00:03:18,560 --> 00:03:19,519
not related

96
00:03:19,519 --> 00:03:22,560
to the floating point value but

97
00:03:22,560 --> 00:03:25,599
they are general data movement as such

98
00:03:25,599 --> 00:03:27,680
either and the girl made a wrong guess

99
00:03:27,680 --> 00:03:28,799
about p

100
00:03:28,799 --> 00:03:31,519
besides such gas will additionally cause

101
00:03:31,519 --> 00:03:33,760
conflicts with i20

102
00:03:33,760 --> 00:03:35,920
where two integer fields of p are

103
00:03:35,920 --> 00:03:37,120
accessed

104
00:03:37,120 --> 00:03:40,159
as a result ida and ghetto recover the

105
00:03:40,159 --> 00:03:41,200
wrong structure

106
00:03:41,200 --> 00:03:44,159
due to such conflicts howard is a

107
00:03:44,159 --> 00:03:45,519
dynamic technique

108
00:03:45,519 --> 00:03:47,920
it used dynamic analysis to collect

109
00:03:47,920 --> 00:03:49,280
program behaviors

110
00:03:49,280 --> 00:03:52,080
besides to handle complex structures it

111
00:03:52,080 --> 00:03:52,799
defines

112
00:03:52,799 --> 00:03:55,599
multiple sophisticated rules and example

113
00:03:55,599 --> 00:03:57,360
heroistic is that

114
00:03:57,360 --> 00:03:59,840
the field access are performed by first

115
00:03:59,840 --> 00:04:01,840
noting the base address of data

116
00:04:01,840 --> 00:04:02,480
structure

117
00:04:02,480 --> 00:04:06,159
then of city however as it is dynamic

118
00:04:06,159 --> 00:04:07,280
analysis

119
00:04:07,280 --> 00:04:09,599
it relies on high quality inputs to

120
00:04:09,599 --> 00:04:11,439
achieve good code coverage

121
00:04:11,439 --> 00:04:13,599
in our example the likelihood of

122
00:04:13,599 --> 00:04:15,439
reaching the hoofed build function

123
00:04:15,439 --> 00:04:17,358
through random test input generation is

124
00:04:17,358 --> 00:04:18,560
very small

125
00:04:18,560 --> 00:04:20,560
hence the corresponding variable and the

126
00:04:20,560 --> 00:04:22,880
field axis cannot be recovered by whole

127
00:04:22,880 --> 00:04:23,919
world

128
00:04:23,919 --> 00:04:26,560
another limitation is that the heroistic

129
00:04:26,560 --> 00:04:28,160
may not always hold

130
00:04:28,160 --> 00:04:31,120
for example at 9 11 the initialization

131
00:04:31,120 --> 00:04:32,960
of weight is achieved by directly

132
00:04:32,960 --> 00:04:34,080
writing the memory

133
00:04:34,080 --> 00:04:36,320
without noting the base address of

134
00:04:36,320 --> 00:04:37,360
structure

135
00:04:37,360 --> 00:04:39,840
as a result even though the hoof build

136
00:04:39,840 --> 00:04:42,080
function can be covered by some input

137
00:04:42,080 --> 00:04:44,720
during execution the stack in that

138
00:04:44,720 --> 00:04:46,320
structure weight cannot be

139
00:04:46,320 --> 00:04:49,360
correctly recovered our technique

140
00:04:49,360 --> 00:04:52,240
is driven by two key observations the

141
00:04:52,240 --> 00:04:54,080
first observation is that

142
00:04:54,080 --> 00:04:56,400
while existing techniques mostly focus

143
00:04:56,400 --> 00:04:58,000
on memory access pattern

144
00:04:58,000 --> 00:05:00,479
to identify structures there are many

145
00:05:00,479 --> 00:05:02,080
other program behaviors

146
00:05:02,080 --> 00:05:04,479
that can serve as hint to recover data

147
00:05:04,479 --> 00:05:05,520
structure

148
00:05:05,520 --> 00:05:08,000
in the example we present four kinds of

149
00:05:08,000 --> 00:05:10,000
hints we can leverage

150
00:05:10,000 --> 00:05:12,639
the first one is called allocation hint

151
00:05:12,639 --> 00:05:13,759
intuitively

152
00:05:13,759 --> 00:05:16,639
for heap allocated variable it is likely

153
00:05:16,639 --> 00:05:18,639
to be a structure or an array of

154
00:05:18,639 --> 00:05:20,000
structures

155
00:05:20,000 --> 00:05:23,680
for example at line 16 p point to a heap

156
00:05:23,680 --> 00:05:26,400
allocated memory denoting start p

157
00:05:26,400 --> 00:05:29,840
is likely to be a structure the second

158
00:05:29,840 --> 00:05:32,000
hint is called data flow hint

159
00:05:32,000 --> 00:05:34,880
that is said if there is a direct data

160
00:05:34,880 --> 00:05:37,120
flow between two memory regions

161
00:05:37,120 --> 00:05:39,440
these regions may be of the same data

162
00:05:39,440 --> 00:05:40,479
structure

163
00:05:40,479 --> 00:05:44,000
for example at 917 there is a direct

164
00:05:44,000 --> 00:05:46,639
data flow from the stack ignite

165
00:05:46,639 --> 00:05:47,600
structure way

166
00:05:47,600 --> 00:05:50,320
to a memory allocated structure start p

167
00:05:50,320 --> 00:05:51,600
which indicates

168
00:05:51,600 --> 00:05:54,639
they may be of the same data structure

169
00:05:54,639 --> 00:05:57,199
the third kind of hint is named

170
00:05:57,199 --> 00:05:58,319
point2hint

171
00:05:58,319 --> 00:06:01,280
it is said if a pointer may point to two

172
00:06:01,280 --> 00:06:02,560
memory regions

173
00:06:02,560 --> 00:06:04,319
this region may be of the same data

174
00:06:04,319 --> 00:06:06,560
structure in this example

175
00:06:06,560 --> 00:06:08,960
pointer p may point to a stack inline

176
00:06:08,960 --> 00:06:10,560
variable at 940

177
00:06:10,560 --> 00:06:13,600
or a heap allocated variable at 960

178
00:06:13,600 --> 00:06:15,600
suggesting they may be of the same data

179
00:06:15,600 --> 00:06:16,960
structure

180
00:06:16,960 --> 00:06:19,199
the nasa hint we present here is called

181
00:06:19,199 --> 00:06:20,240
unified

182
00:06:20,240 --> 00:06:23,520
assessed hint it is a new memory access

183
00:06:23,520 --> 00:06:25,919
pattern other than base addresses and

184
00:06:25,919 --> 00:06:27,039
offset value

185
00:06:27,039 --> 00:06:30,000
it is said if an instruction may access

186
00:06:30,000 --> 00:06:31,440
two memory regions

187
00:06:31,440 --> 00:06:33,440
they are likely to be of the same data

188
00:06:33,440 --> 00:06:34,479
structure

189
00:06:34,479 --> 00:06:38,240
at 19 20 the hint comes from the fact

190
00:06:38,240 --> 00:06:38,880
that

191
00:06:38,880 --> 00:06:41,600
the hip structure and the stack

192
00:06:41,600 --> 00:06:42,240
structure

193
00:06:42,240 --> 00:06:46,160
are accessed by the same instructions

194
00:06:46,160 --> 00:06:48,880
we also developed other hints details

195
00:06:48,880 --> 00:06:50,800
can be found in our paper

196
00:06:50,800 --> 00:06:53,120
observe that many hints require accurate

197
00:06:53,120 --> 00:06:54,639
data no analysis

198
00:06:54,639 --> 00:06:56,960
choosing a suitable underlying analysis

199
00:06:56,960 --> 00:07:00,319
is essential for our technique

200
00:07:00,319 --> 00:07:03,039
so we use an advanced data flow analysis

201
00:07:03,039 --> 00:07:04,240
named pda

202
00:07:04,240 --> 00:07:06,000
which is a good fit for structure

203
00:07:06,000 --> 00:07:08,000
recovery in short

204
00:07:08,000 --> 00:07:10,639
bda is a past sampling driven purpose

205
00:07:10,639 --> 00:07:13,199
abstract interpretation techniques

206
00:07:13,199 --> 00:07:16,000
for giving sample paths bda ignores the

207
00:07:16,000 --> 00:07:17,120
past possibility

208
00:07:17,120 --> 00:07:19,280
and abstract interprets the program

209
00:07:19,280 --> 00:07:20,800
follow the path

210
00:07:20,800 --> 00:07:22,479
hint can be connected during the

211
00:07:22,479 --> 00:07:24,560
abstract interpretation

212
00:07:24,560 --> 00:07:27,120
more importantly bda use precise

213
00:07:27,120 --> 00:07:28,319
symbolic values

214
00:07:28,319 --> 00:07:30,880
as it interprets individual paths

215
00:07:30,880 --> 00:07:32,080
separately

216
00:07:32,080 --> 00:07:34,160
which makes it different from other

217
00:07:34,160 --> 00:07:36,080
abstract interpretation techniques

218
00:07:36,080 --> 00:07:39,039
like value state analysis additionally

219
00:07:39,039 --> 00:07:40,560
pda uses a complex

220
00:07:40,560 --> 00:07:43,039
path sampling algorithm so that the

221
00:07:43,039 --> 00:07:44,720
different parts of the program

222
00:07:44,720 --> 00:07:47,520
can be sampled uniformly note that

223
00:07:47,520 --> 00:07:49,039
simply tossed a fair

224
00:07:49,039 --> 00:07:51,280
coin at each predicate leads to a

225
00:07:51,280 --> 00:07:52,319
distribution

226
00:07:52,319 --> 00:07:54,639
that is substantially biased towards

227
00:07:54,639 --> 00:07:56,080
short pass

228
00:07:56,080 --> 00:07:58,800
for example on the right side we present

229
00:07:58,800 --> 00:08:00,800
a simple control flow graph

230
00:08:00,800 --> 00:08:03,360
if we use the naive sampling algorithm

231
00:08:03,360 --> 00:08:05,840
each branch would have 50 percent

232
00:08:05,840 --> 00:08:08,800
probability to be sampled as a result

233
00:08:08,800 --> 00:08:09,759
the short path

234
00:08:09,759 --> 00:08:13,360
b1 b3 is more likely to be sampled

235
00:08:13,360 --> 00:08:15,759
bdf proposed a uniform sampling which

236
00:08:15,759 --> 00:08:16,800
allows

237
00:08:16,800 --> 00:08:19,759
exploring a lot more paths more details

238
00:08:19,759 --> 00:08:20,479
can be found

239
00:08:20,479 --> 00:08:23,919
in our bda paper ok so let's come back

240
00:08:23,919 --> 00:08:25,759
to our observations

241
00:08:25,759 --> 00:08:27,840
although there are many useful hints

242
00:08:27,840 --> 00:08:29,840
they are uncertain by their nature

243
00:08:29,840 --> 00:08:32,080
in other words this hint can be wrong

244
00:08:32,080 --> 00:08:34,240
sometimes how can we handle such kind of

245
00:08:34,240 --> 00:08:36,640
uncertainty let's move to our second

246
00:08:36,640 --> 00:08:38,000
observation

247
00:08:38,000 --> 00:08:40,000
the second observation is that the

248
00:08:40,000 --> 00:08:41,519
various kind of hint

249
00:08:41,519 --> 00:08:43,440
can be integrated in a more

250
00:08:43,440 --> 00:08:45,200
sophisticated manner

251
00:08:45,200 --> 00:08:47,760
using probabilistic inference engine

252
00:08:47,760 --> 00:08:48,640
specifically

253
00:08:48,640 --> 00:08:51,120
we first assign some probability to all

254
00:08:51,120 --> 00:08:52,640
collected hints

255
00:08:52,640 --> 00:08:55,200
these probabilities denote how strong

256
00:08:55,200 --> 00:08:56,640
these hints are

257
00:08:56,640 --> 00:08:58,480
this hint are then fed into a

258
00:08:58,480 --> 00:09:02,160
probability inference engine

259
00:09:02,320 --> 00:09:05,360
where they are propagated and aggregated

260
00:09:05,360 --> 00:09:07,920
after that the inference engine outputs

261
00:09:07,920 --> 00:09:10,160
the posterior marginal probability for

262
00:09:10,160 --> 00:09:11,839
each variable

263
00:09:11,839 --> 00:09:14,720
for example in the inversed source code

264
00:09:14,720 --> 00:09:15,040
p

265
00:09:15,040 --> 00:09:17,680
is more likely to point to an element t

266
00:09:17,680 --> 00:09:19,600
instead of an unit

267
00:09:19,600 --> 00:09:22,800
note that the p1 and p2 does not denote

268
00:09:22,800 --> 00:09:24,080
two variables

269
00:09:24,080 --> 00:09:27,360
but there are two possible inverse

270
00:09:27,360 --> 00:09:29,360
type for the original pointer p

271
00:09:29,360 --> 00:09:31,279
similarly way is likely to be a

272
00:09:31,279 --> 00:09:33,519
structure instead of being splitted into

273
00:09:33,519 --> 00:09:36,000
two individual variables

274
00:09:36,000 --> 00:09:38,240
in a probabilistic inference engine

275
00:09:38,240 --> 00:09:40,160
there are two types of components

276
00:09:40,160 --> 00:09:42,160
random variables and probability

277
00:09:42,160 --> 00:09:43,200
constraints

278
00:09:43,200 --> 00:09:44,959
random variables are introduced to

279
00:09:44,959 --> 00:09:46,959
describe the probability

280
00:09:46,959 --> 00:09:49,600
the properties of variable types and

281
00:09:49,600 --> 00:09:51,680
structures

282
00:09:51,680 --> 00:09:54,160
so for example a primitive variable

283
00:09:54,160 --> 00:09:55,760
denotes a memory region at

284
00:09:55,760 --> 00:09:58,959
address a with size s is

285
00:09:58,959 --> 00:10:01,680
a primitive variable a field of variable

286
00:10:01,680 --> 00:10:03,680
denotes a memory region at a1

287
00:10:03,680 --> 00:10:06,880
with size s is the field of a structure

288
00:10:06,880 --> 00:10:10,160
at address a2 a homo reading variable

289
00:10:10,160 --> 00:10:12,079
denotes a memory region starting from

290
00:10:12,079 --> 00:10:12,880
address a1

291
00:10:12,880 --> 00:10:17,200
and a2 our homogeneous structure

292
00:10:17,200 --> 00:10:19,279
besides random variables we also have

293
00:10:19,279 --> 00:10:21,279
probabilistic constraints

294
00:10:21,279 --> 00:10:23,839
they denote the function over the random

295
00:10:23,839 --> 00:10:24,720
variables

296
00:10:24,720 --> 00:10:27,519
these constraints are used to correlated

297
00:10:27,519 --> 00:10:28,560
random variables

298
00:10:28,560 --> 00:10:30,839
and calculate the posterior marginal

299
00:10:30,839 --> 00:10:33,600
probabilities

300
00:10:33,600 --> 00:10:37,040
so for example a data flowing on address

301
00:10:37,040 --> 00:10:38,720
a1 and a2 with size

302
00:10:38,720 --> 00:10:41,680
s may lead to a homo region variable

303
00:10:41,680 --> 00:10:42,640
note that this

304
00:10:42,640 --> 00:10:45,519
rule is not deterministic so we can

305
00:10:45,519 --> 00:10:48,399
assign a probability 0.6

306
00:10:48,399 --> 00:10:51,279
additionally we may also have a field of

307
00:10:51,279 --> 00:10:52,640
variable for a1 at

308
00:10:52,640 --> 00:10:55,760
a2 note that it means the offset is a1

309
00:10:55,760 --> 00:10:57,360
minus a2

310
00:10:57,360 --> 00:10:59,440
we may also have a homo region variable

311
00:10:59,440 --> 00:11:01,279
for a2 and a3

312
00:11:01,279 --> 00:11:04,320
based on these two observations or hint

313
00:11:04,320 --> 00:11:06,000
we can determine another field of

314
00:11:06,000 --> 00:11:07,360
variable based on

315
00:11:07,360 --> 00:11:11,519
s3 with an offset a1 minus a2

316
00:11:11,519 --> 00:11:14,640
more details can be found in our paper

317
00:11:14,640 --> 00:11:17,040
based on the two observations we built

318
00:11:17,040 --> 00:11:18,000
osprey

319
00:11:18,000 --> 00:11:20,240
giving a stripped binary we first use

320
00:11:20,240 --> 00:11:21,360
bda to connect

321
00:11:21,360 --> 00:11:24,320
basic facts about program behaviors

322
00:11:24,320 --> 00:11:25,600
taking those facts as

323
00:11:25,600 --> 00:11:28,000
observation probably basic influence is

324
00:11:28,000 --> 00:11:31,680
performed to get the recovered structure

325
00:11:31,680 --> 00:11:34,160
okay so next i will talk about some

326
00:11:34,160 --> 00:11:35,519
evaluation results

327
00:11:35,519 --> 00:11:39,040
to assess the effectiveness of osprey

328
00:11:39,040 --> 00:11:41,440
we perform two set of experiments using

329
00:11:41,440 --> 00:11:42,160
a benchmark

330
00:11:42,160 --> 00:11:44,959
provided by ti and whole world the first

331
00:11:44,959 --> 00:11:46,240
one is

332
00:11:46,240 --> 00:11:49,600
call utils while another one is the pro

333
00:11:49,600 --> 00:11:51,360
the benchmark provided by the whole

334
00:11:51,360 --> 00:11:53,519
world project the combination flags are

335
00:11:53,519 --> 00:11:55,279
0 and o3

336
00:11:55,279 --> 00:11:56,880
we compiled the program into two

337
00:11:56,880 --> 00:11:58,720
versions a version with debug

338
00:11:58,720 --> 00:12:00,880
information used as the ground truth

339
00:12:00,880 --> 00:12:03,360
and a strict version used for evaluation

340
00:12:03,360 --> 00:12:05,360
due to time limitation we discussed two

341
00:12:05,360 --> 00:12:06,560
experiments here

342
00:12:06,560 --> 00:12:09,440
much more can be found in our paper the

343
00:12:09,440 --> 00:12:11,519
first experiment is to quantify

344
00:12:11,519 --> 00:12:13,920
our result on complex variables we

345
00:12:13,920 --> 00:12:16,000
perform it on core utils

346
00:12:16,000 --> 00:12:17,920
we inspect individual variables

347
00:12:17,920 --> 00:12:19,120
specifically

348
00:12:19,120 --> 00:12:21,680
if it is a pointer type we inspect the

349
00:12:21,680 --> 00:12:24,399
structure that is being pointed to

350
00:12:24,399 --> 00:12:26,959
compare complex variables including

351
00:12:26,959 --> 00:12:28,160
structures

352
00:12:28,160 --> 00:12:30,800
unions arrays and pointers pointed to

353
00:12:30,800 --> 00:12:32,240
structure and unions

354
00:12:32,240 --> 00:12:34,240
we compare with iodine integral the

355
00:12:34,240 --> 00:12:36,240
upper figure shows the precision

356
00:12:36,240 --> 00:12:39,040
of the complex variable recovery and the

357
00:12:39,040 --> 00:12:40,720
number one shows the recall

358
00:12:40,720 --> 00:12:42,800
the horizontal noise shows the average

359
00:12:42,800 --> 00:12:45,920
number where the bonus are for osprey

360
00:12:45,920 --> 00:12:47,839
the red lines are for ghetto and the

361
00:12:47,839 --> 00:12:50,399
genotypes are for ida pro

362
00:12:50,399 --> 00:12:53,440
observe that the recoil of osprey is

363
00:12:53,440 --> 00:12:55,440
more than two times higher than gidran

364
00:12:55,440 --> 00:12:58,639
ida the pronunciation of osprey also

365
00:12:58,639 --> 00:13:01,120
ought to perform schedule and ida pro we

366
00:13:01,120 --> 00:13:01,920
inspect why

367
00:13:01,920 --> 00:13:04,399
such improvement and the main reason is

368
00:13:04,399 --> 00:13:06,639
that iodine gidra do not perform

369
00:13:06,639 --> 00:13:09,040
complex analysis and recover user

370
00:13:09,040 --> 00:13:10,240
defined structures

371
00:13:10,240 --> 00:13:12,560
while most complex variables are

372
00:13:12,560 --> 00:13:13,279
structures

373
00:13:13,279 --> 00:13:16,160
and pointers to structures the

374
00:13:16,160 --> 00:13:18,079
combination translates the low level

375
00:13:18,079 --> 00:13:19,200
binary code

376
00:13:19,200 --> 00:13:22,480
to high level human readable programs

377
00:13:22,480 --> 00:13:25,519
the readability of the compiled code

378
00:13:25,519 --> 00:13:27,680
relies on the recovery of variable in

379
00:13:27,680 --> 00:13:29,040
the data structure

380
00:13:29,040 --> 00:13:31,279
to investigate how authority improves

381
00:13:31,279 --> 00:13:32,800
the combination result

382
00:13:32,800 --> 00:13:35,839
we take a case study the first graph the

383
00:13:35,839 --> 00:13:36,480
second

384
00:13:36,480 --> 00:13:38,720
graph and the third graph denotes the

385
00:13:38,720 --> 00:13:40,399
combination result

386
00:13:40,399 --> 00:13:42,880
for ida pro always debug information

387
00:13:42,880 --> 00:13:44,399
without debug information

388
00:13:44,399 --> 00:13:47,279
and with our tool respectively we can

389
00:13:47,279 --> 00:13:48,000
say either can

390
00:13:48,000 --> 00:13:50,959
precisely recover some primary variables

391
00:13:50,959 --> 00:13:52,880
for example the result variable at

392
00:13:52,880 --> 00:13:54,560
knife4 and the wave 3 at

393
00:13:54,560 --> 00:13:57,760
i5 but it fails to recover the complex

394
00:13:57,760 --> 00:13:58,959
data structures

395
00:13:58,959 --> 00:14:02,000
for example the v4 at 96 which is a

396
00:14:02,000 --> 00:14:04,720
pointer to a server socket structure

397
00:14:04,720 --> 00:14:07,279
osprey can successfully recover server

398
00:14:07,279 --> 00:14:08,800
circuit structures

399
00:14:08,800 --> 00:14:11,120
such recovery can substantially improve

400
00:14:11,120 --> 00:14:14,000
the readability of the

401
00:14:14,000 --> 00:14:18,320
decompiled code c9 19 to 20

402
00:14:18,320 --> 00:14:20,720
without the recovered information we can

403
00:14:20,720 --> 00:14:21,600
only know that

404
00:14:21,600 --> 00:14:25,279
there is memory access with contacts

405
00:14:25,279 --> 00:14:26,160
addressing

406
00:14:26,160 --> 00:14:28,959
with the recovered field and the array

407
00:14:28,959 --> 00:14:30,079
accesses

408
00:14:30,079 --> 00:14:32,079
we can have much more semantic

409
00:14:32,079 --> 00:14:34,560
information

410
00:14:35,199 --> 00:14:37,600
we also have many related work but due

411
00:14:37,600 --> 00:14:39,199
to time limitation we

412
00:14:39,199 --> 00:14:42,480
skip them here at the conclusion

413
00:14:42,480 --> 00:14:45,040
we develop a normal probability variable

414
00:14:45,040 --> 00:14:47,199
in the data structure recovery technique

415
00:14:47,199 --> 00:14:49,839
for stripped binaries it enabled gpda

416
00:14:49,839 --> 00:14:51,760
and features a novel probabilistic

417
00:14:51,760 --> 00:14:52,720
analysis

418
00:14:52,720 --> 00:14:55,519
it outperforms the existing technique

419
00:14:55,519 --> 00:14:56,240
okay

420
00:14:56,240 --> 00:14:58,399
so it is the end of my presentation

421
00:14:58,399 --> 00:15:02,079
thank you for your time

