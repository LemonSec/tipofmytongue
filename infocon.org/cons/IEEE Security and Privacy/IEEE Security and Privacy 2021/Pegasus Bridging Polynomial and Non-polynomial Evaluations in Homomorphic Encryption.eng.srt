1
00:00:00,799 --> 00:00:03,360
hi everyone my name is wan gilu from

2
00:00:03,360 --> 00:00:04,319
gemini lab

3
00:00:04,319 --> 00:00:07,759
alibaba group today we present our work

4
00:00:07,759 --> 00:00:09,920
pegasus bridging polynomial and

5
00:00:09,920 --> 00:00:11,679
non-polynomial evaluations in

6
00:00:11,679 --> 00:00:13,040
homomorphic encryption

7
00:00:13,040 --> 00:00:15,759
this is co-work with my colleagues huang

8
00:00:15,759 --> 00:00:16,480
ching hao

9
00:00:16,480 --> 00:00:19,119
yaping ma and hunter tube let's consider

10
00:00:19,119 --> 00:00:21,279
this general-to-party scenario of

11
00:00:21,279 --> 00:00:22,000
privacy

12
00:00:22,000 --> 00:00:25,359
preserving computation a private model

13
00:00:25,359 --> 00:00:27,840
f such as a decision tree is held by a

14
00:00:27,840 --> 00:00:29,279
model holder

15
00:00:29,279 --> 00:00:31,760
she want to cooperate with a data holder

16
00:00:31,760 --> 00:00:34,399
and jointly compute the evaluation of

17
00:00:34,399 --> 00:00:36,719
fx without revealing the private

18
00:00:36,719 --> 00:00:39,360
information of the model and data

19
00:00:39,360 --> 00:00:41,360
homomorphic encryption is one of the

20
00:00:41,360 --> 00:00:43,520
tools to solve this problem

21
00:00:43,520 --> 00:00:45,600
by letting the model holder encrypt the

22
00:00:45,600 --> 00:00:48,000
model using her private key

23
00:00:48,000 --> 00:00:49,840
and by letting the data holder to

24
00:00:49,840 --> 00:00:52,320
evaluate the model homomorphically

25
00:00:52,320 --> 00:00:54,719
finally the model holder can decrypt the

26
00:00:54,719 --> 00:00:55,600
response

27
00:00:55,600 --> 00:00:57,920
and obtain the evaluation without seeing

28
00:00:57,920 --> 00:01:00,480
the data

29
00:01:00,719 --> 00:01:02,399
different types of homomorphic

30
00:01:02,399 --> 00:01:04,319
encryption support pretty different

31
00:01:04,319 --> 00:01:06,240
styles of functionality

32
00:01:06,240 --> 00:01:08,159
for example we have lookup table

33
00:01:08,159 --> 00:01:10,640
homomorphic encryption of one kind

34
00:01:10,640 --> 00:01:12,799
the other kind of homomorphic encryption

35
00:01:12,799 --> 00:01:14,159
can allow to add

36
00:01:14,159 --> 00:01:17,360
and multiply encrypted values

37
00:01:17,360 --> 00:01:20,479
on one hand when using lhe

38
00:01:20,479 --> 00:01:22,560
arbitrary boolean function can be

39
00:01:22,560 --> 00:01:24,560
privately evaluated

40
00:01:24,560 --> 00:01:27,200
however the price for evaluating large

41
00:01:27,200 --> 00:01:29,759
fun in arithmetic computation in boolean

42
00:01:29,759 --> 00:01:31,600
circuit is high

43
00:01:31,600 --> 00:01:33,840
on the other hand we can use the packing

44
00:01:33,840 --> 00:01:35,200
techniques to accelerate

45
00:01:35,200 --> 00:01:37,920
large fun and arithmetic computation if

46
00:01:37,920 --> 00:01:40,159
we use the ahe

47
00:01:40,159 --> 00:01:42,799
also approximations seem inevitable for

48
00:01:42,799 --> 00:01:45,520
evaluating non-polynomial functions

49
00:01:45,520 --> 00:01:48,720
such as division can we use h e to

50
00:01:48,720 --> 00:01:50,240
evaluate polynomial

51
00:01:50,240 --> 00:01:51,960
and non-polynomial functions

52
00:01:51,960 --> 00:01:53,520
simultaneously

53
00:01:53,520 --> 00:01:56,159
some approaches do provide us a way to

54
00:01:56,159 --> 00:01:58,000
evaluate both polynomial

55
00:01:58,000 --> 00:02:01,360
and and polynomial functions using h e

56
00:02:01,360 --> 00:02:04,159
g and etl propose a specified method to

57
00:02:04,159 --> 00:02:05,520
compute mean max

58
00:02:05,520 --> 00:02:08,318
of encrypted values using an arithmetic

59
00:02:08,318 --> 00:02:09,598
h e scheme

60
00:02:09,598 --> 00:02:12,640
named herein on the other hand michaen

61
00:02:12,640 --> 00:02:13,959
sioux's method uses

62
00:02:13,959 --> 00:02:17,440
fhew scheme to compute lookup table

63
00:02:17,440 --> 00:02:21,680
on small integers also the fhew allows

64
00:02:21,680 --> 00:02:23,440
only to add cipher text

65
00:02:23,440 --> 00:02:25,840
and multiplication of cipher texts is

66
00:02:25,840 --> 00:02:28,239
not supported by this scheme

67
00:02:28,239 --> 00:02:30,400
the most promising previous art is from

68
00:02:30,400 --> 00:02:31,920
bra etl

69
00:02:31,920 --> 00:02:34,959
they present a framework called chimera

70
00:02:34,959 --> 00:02:36,720
which allows much more flexible

71
00:02:36,720 --> 00:02:39,760
polynomial and non-polynomial evaluation

72
00:02:39,760 --> 00:02:43,120
using homomorphic encryption but chimera

73
00:02:43,120 --> 00:02:45,280
can suffer from a huge key size and

74
00:02:45,280 --> 00:02:47,120
heavy computation

75
00:02:47,120 --> 00:02:49,120
we still lack of practical methods to

76
00:02:49,120 --> 00:02:50,560
evaluate both

77
00:02:50,560 --> 00:02:53,920
polynomial and non-polynomial functions

78
00:02:53,920 --> 00:02:57,519
homomorphically and effectively

79
00:02:57,519 --> 00:03:00,400
in this work we propose pegasus a

80
00:03:00,400 --> 00:03:02,879
framework that bridges the hen scheme

81
00:03:02,879 --> 00:03:06,560
and the fhew scheme to evaluate both

82
00:03:06,560 --> 00:03:09,120
polynomial and non-polynomial functions

83
00:03:09,120 --> 00:03:10,800
on encrypted values

84
00:03:10,800 --> 00:03:13,519
by doing so we can efficiently evaluate

85
00:03:13,519 --> 00:03:16,000
polynomial function in the heian mode

86
00:03:16,000 --> 00:03:18,239
and switch to fhew mode for

87
00:03:18,239 --> 00:03:19,920
non-polynomial function

88
00:03:19,920 --> 00:03:23,040
using lookup table pegasus is shipped

89
00:03:23,040 --> 00:03:24,959
with a more efficient scheme switching

90
00:03:24,959 --> 00:03:25,599
method

91
00:03:25,599 --> 00:03:27,840
and our key size is significantly

92
00:03:27,840 --> 00:03:29,760
smaller than that of chimera

93
00:03:29,760 --> 00:03:32,560
we implement pegasus on top of microsoft

94
00:03:32,560 --> 00:03:33,680
seal library

95
00:03:33,680 --> 00:03:36,640
and our codes are publicly available

96
00:03:36,640 --> 00:03:39,280
pegasus consists of three main building

97
00:03:39,280 --> 00:03:40,080
blocks

98
00:03:40,080 --> 00:03:42,480
including the scheme switching methods

99
00:03:42,480 --> 00:03:44,720
and a homomorphic lookup table

100
00:03:44,720 --> 00:03:47,200
here we talk about the last two building

101
00:03:47,200 --> 00:03:49,599
blocks

102
00:03:50,319 --> 00:03:53,120
we first introduce the basic idea of

103
00:03:53,120 --> 00:03:54,480
switching fhe

104
00:03:54,480 --> 00:03:57,280
w cipher text to valid here in cipher

105
00:03:57,280 --> 00:03:58,400
text

106
00:03:58,400 --> 00:04:01,760
one f h fhew cipher encrypts one integer

107
00:04:01,760 --> 00:04:04,080
its decryption formula requires to

108
00:04:04,080 --> 00:04:06,879
compute the inner product or vectors

109
00:04:06,879 --> 00:04:10,400
f2h converts a batch of fhew ciphers to

110
00:04:10,400 --> 00:04:12,480
apache and cipher

111
00:04:12,480 --> 00:04:14,720
to perform f2h we need to

112
00:04:14,720 --> 00:04:17,519
homomorphically decrypt these fhew

113
00:04:17,519 --> 00:04:19,199
ciphertext

114
00:04:19,199 --> 00:04:21,759
by rewriting the fhe w decryption

115
00:04:21,759 --> 00:04:22,639
formula

116
00:04:22,639 --> 00:04:24,720
we can convert the computation as a

117
00:04:24,720 --> 00:04:26,800
matrix vector multiplication

118
00:04:26,800 --> 00:04:29,919
given the encrypted secret vector s

119
00:04:29,919 --> 00:04:32,160
by recasting the problem to matrix

120
00:04:32,160 --> 00:04:33,919
vector multiplication

121
00:04:33,919 --> 00:04:36,000
it can help reducing the key size

122
00:04:36,000 --> 00:04:37,520
significantly

123
00:04:37,520 --> 00:04:39,440
however current approaches for the

124
00:04:39,440 --> 00:04:41,520
matrix vector multiplication

125
00:04:41,520 --> 00:04:43,520
can only handle the short matrix

126
00:04:43,520 --> 00:04:44,960
properly that is

127
00:04:44,960 --> 00:04:47,199
they assume the matrix should contain

128
00:04:47,199 --> 00:04:50,000
less number of rows than the columns

129
00:04:50,000 --> 00:04:53,040
but the opposite case indicates a large

130
00:04:53,040 --> 00:04:54,960
fan in computation in here

131
00:04:54,960 --> 00:04:56,639
which is crucial to achieve a good

132
00:04:56,639 --> 00:05:00,000
amortized efficiency

133
00:05:03,600 --> 00:05:05,919
we now present the proposed matrix

134
00:05:05,919 --> 00:05:07,680
vector multiplication

135
00:05:07,680 --> 00:05:11,039
which is used in f2h switching here

136
00:05:11,039 --> 00:05:13,759
the matrix a is given in plane and the

137
00:05:13,759 --> 00:05:14,240
vector

138
00:05:14,240 --> 00:05:17,280
s is encrypted our idea is to first

139
00:05:17,280 --> 00:05:18,720
tiling the matrix a

140
00:05:18,720 --> 00:05:21,759
into a square matrix then we apply haley

141
00:05:21,759 --> 00:05:23,919
this diagonal trick to compute to matrix

142
00:05:23,919 --> 00:05:25,440
multiplication

143
00:05:25,440 --> 00:05:28,000
we observe that only a few subset of the

144
00:05:28,000 --> 00:05:29,600
diagonals are needed

145
00:05:29,600 --> 00:05:32,720
due to the self-duplication by doing so

146
00:05:32,720 --> 00:05:35,600
the computation cost is greatly improved

147
00:05:35,600 --> 00:05:37,919
particularly when the number of rows is

148
00:05:37,919 --> 00:05:40,160
far larger than the number of columns

149
00:05:40,160 --> 00:05:42,800
also this tiling approach can cover the

150
00:05:42,800 --> 00:05:44,240
short matrix case

151
00:05:44,240 --> 00:05:47,919
with a logarithmic overhead

152
00:05:48,160 --> 00:05:50,960
next we will talk about how to evaluate

153
00:05:50,960 --> 00:05:53,759
lookup table homomorphically in pegasus

154
00:05:53,759 --> 00:05:56,400
indeed previous methods have presented

155
00:05:56,400 --> 00:05:59,440
how to evaluate lookup table on fhew

156
00:05:59,440 --> 00:06:02,800
cipher text one of them uses jinx he

157
00:06:02,800 --> 00:06:05,280
accumulator to compute the fhew

158
00:06:05,280 --> 00:06:08,000
decryption formula homomorphically

159
00:06:08,000 --> 00:06:10,400
however it demands the ciphertext

160
00:06:10,400 --> 00:06:12,639
modulus q to be a factor of the lattice

161
00:06:12,639 --> 00:06:14,000
dimension n

162
00:06:14,000 --> 00:06:16,319
because the dimension n is usually a few

163
00:06:16,319 --> 00:06:17,520
10 bits

164
00:06:17,520 --> 00:06:20,080
as a result previous homomorphic lookup

165
00:06:20,080 --> 00:06:23,199
table can only handle quite small inputs

166
00:06:23,199 --> 00:06:26,080
our idea to release this constraint is

167
00:06:26,080 --> 00:06:27,759
to convert the mod q to mod

168
00:06:27,759 --> 00:06:29,680
n by rounding the cipher text to

169
00:06:29,680 --> 00:06:31,919
multiples off to times n

170
00:06:31,919 --> 00:06:33,919
then we feed the rounding values with a

171
00:06:33,919 --> 00:06:35,680
modified lookup table t

172
00:06:35,680 --> 00:06:39,120
tilde to the h e accumulator the side

173
00:06:39,120 --> 00:06:41,120
effect of this rounding is introducing

174
00:06:41,120 --> 00:06:43,199
some approximation error

175
00:06:43,199 --> 00:06:45,680
so example this figure demonstrates the

176
00:06:45,680 --> 00:06:47,600
error for the sigmoid function

177
00:06:47,600 --> 00:06:50,639
computed using homomorphic lookup table

178
00:06:50,639 --> 00:06:53,039
by using a larger dimension n we can

179
00:06:53,039 --> 00:06:54,720
reduce this error

180
00:06:54,720 --> 00:06:57,360
moreover we use a special prime gadget

181
00:06:57,360 --> 00:06:59,440
technique to improve the performance the

182
00:06:59,440 --> 00:07:00,400
accumulator

183
00:07:00,400 --> 00:07:02,960
for example pegasus takes about one

184
00:07:02,960 --> 00:07:05,360
second to evaluate a lookup table while

185
00:07:05,360 --> 00:07:07,280
chimera needs about one minute

186
00:07:07,280 --> 00:07:10,160
according to the public code of chimera

187
00:07:10,160 --> 00:07:10,880
also

188
00:07:10,880 --> 00:07:12,960
a key switching step is required to

189
00:07:12,960 --> 00:07:16,080
change the fhew dimension to smaller n

190
00:07:16,080 --> 00:07:18,400
but we omit the detail in this talk we

191
00:07:18,400 --> 00:07:20,400
now show some timing results of our

192
00:07:20,400 --> 00:07:22,560
pegasus implementation

193
00:07:22,560 --> 00:07:24,800
in our experiments we use a large

194
00:07:24,800 --> 00:07:26,319
parameter for herein

195
00:07:26,319 --> 00:07:28,560
so that we can perform large fun in

196
00:07:28,560 --> 00:07:30,240
polynomial function

197
00:07:30,240 --> 00:07:32,960
we use the same dimension n as chimera

198
00:07:32,960 --> 00:07:34,800
for the lookup table

199
00:07:34,800 --> 00:07:37,520
on our test bed the h2f switching took

200
00:07:37,520 --> 00:07:40,479
about 20 milliseconds per cipher text

201
00:07:40,479 --> 00:07:42,479
while chimera might took about four

202
00:07:42,479 --> 00:07:43,599
seconds

203
00:07:43,599 --> 00:07:46,000
our homomorphic lookup table took about

204
00:07:46,000 --> 00:07:47,520
one second to compute

205
00:07:47,520 --> 00:07:49,840
which also is more faster than chimera's

206
00:07:49,840 --> 00:07:51,360
implementation

207
00:07:51,360 --> 00:07:54,400
moreover the proposed f2h converts more

208
00:07:54,400 --> 00:07:55,039
than four

209
00:07:55,039 --> 00:07:58,560
thousands fhe w cipher text to a packed

210
00:07:58,560 --> 00:07:58,800
he

211
00:07:58,800 --> 00:08:02,800
and cipher text within one minute

212
00:08:04,080 --> 00:08:06,319
interestingly recent improvements that

213
00:08:06,319 --> 00:08:08,639
from seal can even reduce these timing

214
00:08:08,639 --> 00:08:09,919
by 40

215
00:08:09,919 --> 00:08:14,080
without any changing to pegasus code

216
00:08:14,080 --> 00:08:16,800
pointwise functions can evaluated by one

217
00:08:16,800 --> 00:08:17,840
lookup table

218
00:08:17,840 --> 00:08:20,879
such as sigmoid and square root

219
00:08:20,879 --> 00:08:22,720
we benchmarked the throughput of these

220
00:08:22,720 --> 00:08:25,759
functions which was about 1.06 per

221
00:08:25,759 --> 00:08:27,120
machine core

222
00:08:27,120 --> 00:08:29,599
we also evaluate functions that consists

223
00:08:29,599 --> 00:08:31,440
of multiple lookup tables

224
00:08:31,440 --> 00:08:33,839
including the mean index and by tonic

225
00:08:33,839 --> 00:08:34,880
sort

226
00:08:34,880 --> 00:08:37,279
to compare with the previous methods our

227
00:08:37,279 --> 00:08:38,880
mean index took about one

228
00:08:38,880 --> 00:08:41,839
zero seconds that is about 24 times

229
00:08:41,839 --> 00:08:44,000
faster than chian's method

230
00:08:44,000 --> 00:08:46,160
on the other hand to sort 60 for

231
00:08:46,160 --> 00:08:47,440
encrypted integers

232
00:08:47,440 --> 00:08:49,760
it took about seven minutes which was

233
00:08:49,760 --> 00:08:52,240
about six times faster than the previous

234
00:08:52,240 --> 00:08:52,880
method

235
00:08:52,880 --> 00:08:54,959
that evaluate a boolean circuit

236
00:08:54,959 --> 00:08:57,839
homomorphically

237
00:08:57,920 --> 00:09:01,440
we now present to use cases of pegasus

238
00:09:01,440 --> 00:09:03,440
the first one is to compute the minimum

239
00:09:03,440 --> 00:09:06,000
values in an encrypted array

240
00:09:06,000 --> 00:09:08,240
the basic block is to find the mean of

241
00:09:08,240 --> 00:09:09,680
two values

242
00:09:09,680 --> 00:09:12,240
in our experiments we use this absolute

243
00:09:12,240 --> 00:09:13,040
formula

244
00:09:13,040 --> 00:09:14,800
since the homomorphic addition and

245
00:09:14,800 --> 00:09:18,160
subtraction are supported by fhew scheme

246
00:09:18,160 --> 00:09:19,920
this formula which needs to look up

247
00:09:19,920 --> 00:09:23,120
tables to evaluate then by stacking this

248
00:09:23,120 --> 00:09:25,600
basic block int a binary tree

249
00:09:25,600 --> 00:09:27,600
we can find out the minimum encrypted

250
00:09:27,600 --> 00:09:28,640
value

251
00:09:28,640 --> 00:09:31,360
in our testbed to find the mean from 16

252
00:09:31,360 --> 00:09:34,640
encrypted values took about 14 seconds

253
00:09:34,640 --> 00:09:36,880
also we know that the cost of mean after

254
00:09:36,880 --> 00:09:39,200
can be reduced by half using the new

255
00:09:39,200 --> 00:09:41,279
formula

256
00:09:41,279 --> 00:09:43,360
the previous case need no switching

257
00:09:43,360 --> 00:09:45,839
between hen and fhew

258
00:09:45,839 --> 00:09:48,399
we now show a different case doing k

259
00:09:48,399 --> 00:09:50,000
means clustering on encrypted

260
00:09:50,000 --> 00:09:52,720
data points the k-mean clustering is an

261
00:09:52,720 --> 00:09:54,320
iterative algorithm

262
00:09:54,320 --> 00:09:56,720
in each update we first calculate the

263
00:09:56,720 --> 00:09:58,080
square order distance

264
00:09:58,080 --> 00:10:00,640
between each data points and centroids

265
00:10:00,640 --> 00:10:03,040
this step can be done using a polynomial

266
00:10:03,040 --> 00:10:05,600
function then we assign the data points

267
00:10:05,600 --> 00:10:06,560
to its closest

268
00:10:06,560 --> 00:10:09,440
centroid we turn to a non-polynomial

269
00:10:09,440 --> 00:10:10,160
function

270
00:10:10,160 --> 00:10:13,600
mean index in this step the h2f kick

271
00:10:13,600 --> 00:10:16,399
in the mean index gives us the sequences

272
00:10:16,399 --> 00:10:18,880
of binary values indicating which

273
00:10:18,880 --> 00:10:21,040
centroid should assign to

274
00:10:21,040 --> 00:10:23,680
finally we update each centroid using

275
00:10:23,680 --> 00:10:25,519
the average of the data points that

276
00:10:25,519 --> 00:10:26,560
assigned

277
00:10:26,560 --> 00:10:28,800
in order to take the average we need f

278
00:10:28,800 --> 00:10:32,320
to h to switching fhew back to him

279
00:10:32,320 --> 00:10:35,360
after the f2h we can update the centroid

280
00:10:35,360 --> 00:10:37,760
using homomorphic multiplication on he

281
00:10:37,760 --> 00:10:38,560
and cipher

282
00:10:38,560 --> 00:10:42,000
x empirically we can perform one update

283
00:10:42,000 --> 00:10:42,320
on

284
00:10:42,320 --> 00:10:45,519
4k data points within 52 minutes using

285
00:10:45,519 --> 00:10:48,160
20 machine cores

286
00:10:48,160 --> 00:10:50,480
switching cipher texts of different he

287
00:10:50,480 --> 00:10:51,200
schemes

288
00:10:51,200 --> 00:10:52,880
can extend the feasibility of

289
00:10:52,880 --> 00:10:54,640
homomorphic encryption

290
00:10:54,640 --> 00:10:56,720
practical scheme switching methods are

291
00:10:56,720 --> 00:10:58,480
necessary to do so

292
00:10:58,480 --> 00:11:00,959
if allows some approximation errors it

293
00:11:00,959 --> 00:11:02,959
can bring a huge improvement to

294
00:11:02,959 --> 00:11:04,000
efficiency

295
00:11:04,000 --> 00:11:06,000
but it is still challenging to switching

296
00:11:06,000 --> 00:11:08,240
between exact arithmetic homomorphic

297
00:11:08,240 --> 00:11:08,959
encryption

298
00:11:08,959 --> 00:11:12,480
such as the bgv scheme and exact lookup

299
00:11:12,480 --> 00:11:20,240
table homomorphic encryption efficiently

