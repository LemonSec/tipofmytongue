1
00:00:03,520 --> 00:00:04,560
hello everyone

2
00:00:04,560 --> 00:00:06,000
today i'll be telling you about our

3
00:00:06,000 --> 00:00:07,839
systematization of knowledge paper

4
00:00:07,839 --> 00:00:10,080
on how we can use computer aided tools

5
00:00:10,080 --> 00:00:12,400
to better develop cryptography

6
00:00:12,400 --> 00:00:13,840
this is joint work with the many

7
00:00:13,840 --> 00:00:17,920
wonderful co-authors listed here

8
00:00:18,960 --> 00:00:20,480
so we should all be familiar with how

9
00:00:20,480 --> 00:00:22,080
difficult it is to get cryptography

10
00:00:22,080 --> 00:00:23,039
right

11
00:00:23,039 --> 00:00:24,880
widely deployed protocols often have

12
00:00:24,880 --> 00:00:26,880
high profile design flaws

13
00:00:26,880 --> 00:00:28,720
heavily scrutinized libraries regularly

14
00:00:28,720 --> 00:00:30,000
have bugs

15
00:00:30,000 --> 00:00:31,679
and otherwise secure and correct code

16
00:00:31,679 --> 00:00:34,079
can leak secrets through side channels

17
00:00:34,079 --> 00:00:35,760
and all this is to say that cryptography

18
00:00:35,760 --> 00:00:38,160
presents a very large attack surface

19
00:00:38,160 --> 00:00:39,280
and the current methods we use to

20
00:00:39,280 --> 00:00:40,960
protect against these attacks are pretty

21
00:00:40,960 --> 00:00:42,879
hard pressed to do so

22
00:00:42,879 --> 00:00:45,440
unfortunately today we tend to rely on a

23
00:00:45,440 --> 00:00:47,360
select few cryptography experts who are

24
00:00:47,360 --> 00:00:49,120
armed with rudimentary tooling

25
00:00:49,120 --> 00:00:50,399
to vouch for the security and

26
00:00:50,399 --> 00:00:51,760
correctness of the world's most

27
00:00:51,760 --> 00:00:53,600
important cryptography

28
00:00:53,600 --> 00:00:55,360
in this modest operandi simply can't

29
00:00:55,360 --> 00:00:57,039
keep up with the rate of innovation and

30
00:00:57,039 --> 00:00:58,000
development in our

31
00:00:58,000 --> 00:01:00,320
field

32
00:01:01,920 --> 00:01:03,440
this brings us to computer ada

33
00:01:03,440 --> 00:01:05,519
cryptography which is an active area of

34
00:01:05,519 --> 00:01:06,799
research that aims to address these

35
00:01:06,799 --> 00:01:08,000
challenges

36
00:01:08,000 --> 00:01:09,600
but what exactly do we mean by computer

37
00:01:09,600 --> 00:01:11,439
aided after all we've long used

38
00:01:11,439 --> 00:01:13,680
computers to develop cryptography

39
00:01:13,680 --> 00:01:16,080
so by computer aided we're referring to

40
00:01:16,080 --> 00:01:16,720
formal

41
00:01:16,720 --> 00:01:19,119
machine checkable approaches to help in

42
00:01:19,119 --> 00:01:19,840
the design

43
00:01:19,840 --> 00:01:21,360
analysis and implementation of

44
00:01:21,360 --> 00:01:23,040
photography

45
00:01:23,040 --> 00:01:25,040
and one of the main goals is to improve

46
00:01:25,040 --> 00:01:26,960
security without sacrificing the things

47
00:01:26,960 --> 00:01:28,640
we care about such as interoperability

48
00:01:28,640 --> 00:01:31,360
and performance

49
00:01:32,799 --> 00:01:34,400
and how exactly can computer aided

50
00:01:34,400 --> 00:01:36,640
crypto help well there are a variety of

51
00:01:36,640 --> 00:01:38,000
tools available that address different

52
00:01:38,000 --> 00:01:39,759
parts of the problem space

53
00:01:39,759 --> 00:01:41,119
we've broken it down to the three

54
00:01:41,119 --> 00:01:43,840
following layers design level security

55
00:01:43,840 --> 00:01:45,439
functional correctness and

56
00:01:45,439 --> 00:01:48,720
implementation level security

57
00:01:50,640 --> 00:01:53,200
for design level security today security

58
00:01:53,200 --> 00:01:55,040
analysis is primarily done on pen and

59
00:01:55,040 --> 00:01:55,840
paper

60
00:01:55,840 --> 00:01:57,520
which is highly error prone and makes

61
00:01:57,520 --> 00:01:58,960
double checking security analyses

62
00:01:58,960 --> 00:02:00,880
extremely tedious

63
00:02:00,880 --> 00:02:02,479
in addition pen and paper security

64
00:02:02,479 --> 00:02:04,000
proofs often only consider

65
00:02:04,000 --> 00:02:06,640
pared-down cores of protocols to

66
00:02:06,640 --> 00:02:08,959
simplify their analysis

67
00:02:08,959 --> 00:02:10,959
but with computer-aided tools we can

68
00:02:10,959 --> 00:02:12,640
formally specify designs and

69
00:02:12,640 --> 00:02:13,840
automatically check

70
00:02:13,840 --> 00:02:15,840
that they enjoy important invariants or

71
00:02:15,840 --> 00:02:19,280
otherwise discover new attacks

72
00:02:21,120 --> 00:02:24,080
using tls as an example before version

73
00:02:24,080 --> 00:02:25,040
1.3

74
00:02:25,040 --> 00:02:26,879
the protocol's design phases didn't

75
00:02:26,879 --> 00:02:28,080
involve computer

76
00:02:28,080 --> 00:02:30,800
analysis but instead the process was

77
00:02:30,800 --> 00:02:32,560
highly reactive which led to an endless

78
00:02:32,560 --> 00:02:35,519
cycle of attacks and patches

79
00:02:35,519 --> 00:02:38,000
and given the complexity of the protocol

80
00:02:38,000 --> 00:02:39,680
early analyses considered only highly

81
00:02:39,680 --> 00:02:41,040
simplified cores

82
00:02:41,040 --> 00:02:42,959
but once the academic community started

83
00:02:42,959 --> 00:02:44,480
considering more detailed aspects of the

84
00:02:44,480 --> 00:02:45,280
protocol

85
00:02:45,280 --> 00:02:48,800
many many new attacks were discovered

86
00:02:49,200 --> 00:02:50,800
luckily this changed during the

87
00:02:50,800 --> 00:02:53,920
proactive design process of tls 1.3

88
00:02:53,920 --> 00:02:56,000
the academic community provided analysis

89
00:02:56,000 --> 00:02:57,920
throughout developing multiple drafts

90
00:02:57,920 --> 00:02:59,760
and in studies using symbolic analysis

91
00:02:59,760 --> 00:03:02,000
tools such as pro verify tamarin

92
00:03:02,000 --> 00:03:04,480
the process of verifying tls actually

93
00:03:04,480 --> 00:03:06,159
even just formally specifying it

94
00:03:06,159 --> 00:03:08,000
revealed flaws led to protocol

95
00:03:08,000 --> 00:03:09,920
improvements and otherwise clarified the

96
00:03:09,920 --> 00:03:13,440
documentation of security guarantees

97
00:03:13,440 --> 00:03:15,680
the t11.3 specification was also a

98
00:03:15,680 --> 00:03:17,040
rapidly moving target

99
00:03:17,040 --> 00:03:18,720
with large changes being affected on a

100
00:03:18,720 --> 00:03:20,480
pretty regular basis

101
00:03:20,480 --> 00:03:22,080
and as changes were made between a total

102
00:03:22,080 --> 00:03:24,400
of 28 drafts previous analyses were

103
00:03:24,400 --> 00:03:26,000
often rendered still within the space of

104
00:03:26,000 --> 00:03:26,879
a few months

105
00:03:26,879 --> 00:03:28,400
and this required new analyses and new

106
00:03:28,400 --> 00:03:30,319
proofs

107
00:03:30,319 --> 00:03:32,239
so another important benefit of machine

108
00:03:32,239 --> 00:03:33,599
check analysis and proofs

109
00:03:33,599 --> 00:03:35,599
over their manual counterparts is that

110
00:03:35,599 --> 00:03:37,280
they can be more easily and reliably

111
00:03:37,280 --> 00:03:37,920
updated

112
00:03:37,920 --> 00:03:39,519
from draft to draft as the protocol

113
00:03:39,519 --> 00:03:41,040
evolves

114
00:03:41,040 --> 00:03:42,640
and on top of this machine checked

115
00:03:42,640 --> 00:03:44,400
analyses and proofs can ensure that new

116
00:03:44,400 --> 00:03:45,680
flaws aren't introduced

117
00:03:45,680 --> 00:03:48,879
as components are changed

118
00:03:49,040 --> 00:03:51,200
for correctness today's solution for

119
00:03:51,200 --> 00:03:52,720
avoiding implantation bugs include

120
00:03:52,720 --> 00:03:54,400
co-testing and auditing

121
00:03:54,400 --> 00:03:56,159
but testing is pretty unlikely to catch

122
00:03:56,159 --> 00:03:57,680
the kinds of correctness issues we deal

123
00:03:57,680 --> 00:03:58,319
with today

124
00:03:58,319 --> 00:04:00,159
and code oddity can be expensive in both

125
00:04:00,159 --> 00:04:02,159
time and expertise

126
00:04:02,159 --> 00:04:04,000
but with computer aided tools we can

127
00:04:04,000 --> 00:04:06,000
formally verify that code is free from

128
00:04:06,000 --> 00:04:07,439
memory errors and then it behaves

129
00:04:07,439 --> 00:04:08,480
according to some

130
00:04:08,480 --> 00:04:12,399
design specification on all possible

131
00:04:12,840 --> 00:04:14,720
inputs for example

132
00:04:14,720 --> 00:04:16,798
openssl has had a long history of bugs

133
00:04:16,798 --> 00:04:18,720
which probably isn't surprising given

134
00:04:18,720 --> 00:04:21,279
the demand for highly optimized code

135
00:04:21,279 --> 00:04:23,040
for performance developers are often

136
00:04:23,040 --> 00:04:24,880
required to multiplex implementations by

137
00:04:24,880 --> 00:04:25,520
hand

138
00:04:25,520 --> 00:04:27,600
for each combination of algorithm

139
00:04:27,600 --> 00:04:28,720
parameter choices

140
00:04:28,720 --> 00:04:30,560
and hardware platform which increases

141
00:04:30,560 --> 00:04:33,919
the risk of introducing bugs

142
00:04:34,560 --> 00:04:36,000
luckily things are starting to look

143
00:04:36,000 --> 00:04:37,680
different today for example

144
00:04:37,680 --> 00:04:39,680
recent work from the project evers team

145
00:04:39,680 --> 00:04:41,440
prevents a new methodology

146
00:04:41,440 --> 00:04:43,280
in which developers can write generic

147
00:04:43,280 --> 00:04:45,759
code in a verification friendly language

148
00:04:45,759 --> 00:04:47,360
check that it enjoys certain properties

149
00:04:47,360 --> 00:04:49,280
such as memory safety correctness and

150
00:04:49,280 --> 00:04:51,600
constant time

151
00:04:51,600 --> 00:04:53,280
and compile the code to different

152
00:04:53,280 --> 00:04:54,479
platforms that support vector

153
00:04:54,479 --> 00:04:55,680
instructions

154
00:04:55,680 --> 00:04:57,120
and this significantly reduces the

155
00:04:57,120 --> 00:04:58,479
manual effort needed to add new

156
00:04:58,479 --> 00:05:00,320
implementations and minimizes the room

157
00:05:00,320 --> 00:05:02,800
for error

158
00:05:03,039 --> 00:05:04,880
we also want to point out that verified

159
00:05:04,880 --> 00:05:06,080
implementations are now as

160
00:05:06,080 --> 00:05:08,840
fast or faster than their unverified

161
00:05:08,840 --> 00:05:10,320
counterparts

162
00:05:10,320 --> 00:05:11,919
through decades of research in formal

163
00:05:11,919 --> 00:05:13,919
verification it was pretty commonly

164
00:05:13,919 --> 00:05:15,440
accepted that the proof burden

165
00:05:15,440 --> 00:05:17,440
in verifying complex optimized code was

166
00:05:17,440 --> 00:05:18,479
exorbitant

167
00:05:18,479 --> 00:05:19,919
and that verified code would be pretty

168
00:05:19,919 --> 00:05:22,840
hard pressed to compete with unverified

169
00:05:22,840 --> 00:05:24,400
code

170
00:05:24,400 --> 00:05:26,400
but various projects in the cryptography

171
00:05:26,400 --> 00:05:28,320
domain have challenged the position

172
00:05:28,320 --> 00:05:29,680
and we're now seeing verified

173
00:05:29,680 --> 00:05:31,039
implementations that meet the

174
00:05:31,039 --> 00:05:32,720
performance of the fastest unverified

175
00:05:32,720 --> 00:05:34,320
implementations

176
00:05:34,320 --> 00:05:35,680
and this leads us to believe that

177
00:05:35,680 --> 00:05:38,080
there's currently note conceptual or

178
00:05:38,080 --> 00:05:39,360
technological barrier

179
00:05:39,360 --> 00:05:41,440
that prevents us from verifying the fast

180
00:05:41,440 --> 00:05:42,800
implementations available

181
00:05:42,800 --> 00:05:44,479
although more verification effort is

182
00:05:44,479 --> 00:05:46,800
certainly expected

183
00:05:46,800 --> 00:05:48,880
and as a small case study we looked at

184
00:05:48,880 --> 00:05:50,880
curve 25519

185
00:05:50,880 --> 00:05:52,560
which is a widely used elliptic curve

186
00:05:52,560 --> 00:05:54,080
that's received considerable interest

187
00:05:54,080 --> 00:05:55,840
from the applied cryptography community

188
00:05:55,840 --> 00:05:57,919
in setting new speed records and also

189
00:05:57,919 --> 00:05:59,440
the formal methods community

190
00:05:59,440 --> 00:06:00,800
in verifying that high speed

191
00:06:00,800 --> 00:06:03,759
implementations are correct and secure

192
00:06:03,759 --> 00:06:05,360
so we compared a number of

193
00:06:05,360 --> 00:06:07,120
implementations which comprise

194
00:06:07,120 --> 00:06:09,199
some of the fast available verified and

195
00:06:09,199 --> 00:06:10,639
unverified implementations

196
00:06:10,639 --> 00:06:13,199
written in c assembly or a combination

197
00:06:13,199 --> 00:06:14,880
of both

198
00:06:14,880 --> 00:06:17,120
here verified implementations have blue

199
00:06:17,120 --> 00:06:18,080
bars while

200
00:06:18,080 --> 00:06:20,720
unverified implementations have red bars

201
00:06:20,720 --> 00:06:22,560
and we report the number of cpu cycles

202
00:06:22,560 --> 00:06:22,880
to

203
00:06:22,880 --> 00:06:24,800
perform scale and multiplication so here

204
00:06:24,800 --> 00:06:26,479
lower is better

205
00:06:26,479 --> 00:06:28,160
and as we can see verified

206
00:06:28,160 --> 00:06:29,680
implementations achieve best in class

207
00:06:29,680 --> 00:06:30,400
performance

208
00:06:30,400 --> 00:06:35,759
for both c and assembly implementations

209
00:06:35,759 --> 00:06:37,520
finally for implementation level

210
00:06:37,520 --> 00:06:39,600
security today in order to protect

211
00:06:39,600 --> 00:06:41,360
against timing side channels

212
00:06:41,360 --> 00:06:43,120
developers need to apply tricky constant

213
00:06:43,120 --> 00:06:44,479
time coding recipes

214
00:06:44,479 --> 00:06:45,759
and hope that they haven't missed any

215
00:06:45,759 --> 00:06:48,319
vulnerable code and these recipes

216
00:06:48,319 --> 00:06:49,759
prohibit control flow

217
00:06:49,759 --> 00:06:52,160
memory access patterns and variable time

218
00:06:52,160 --> 00:06:53,759
operations that depend on any secret

219
00:06:53,759 --> 00:06:55,360
data

220
00:06:55,360 --> 00:06:57,919
but with computer aided tools developers

221
00:06:57,919 --> 00:06:59,120
can automatically check

222
00:06:59,120 --> 00:07:00,400
whether or not their code is constant

223
00:07:00,400 --> 00:07:02,720
time or even automatically transform

224
00:07:02,720 --> 00:07:04,319
variable time code into constant time

225
00:07:04,319 --> 00:07:06,560
code

226
00:07:08,880 --> 00:07:10,000
and so it turns out that writing

227
00:07:10,000 --> 00:07:11,520
constant time code really is pretty

228
00:07:11,520 --> 00:07:13,440
unnatural and difficult to do

229
00:07:13,440 --> 00:07:14,800
a botched patch for a timing

230
00:07:14,800 --> 00:07:17,280
vulnerability in tls led to the lucky 13

231
00:07:17,280 --> 00:07:19,680
timing vulnerability to open the cell

232
00:07:19,680 --> 00:07:21,520
and in turn the lucky 13 patch led to

233
00:07:21,520 --> 00:07:24,720
yet another timing vulnerability

234
00:07:24,720 --> 00:07:26,960
fortunately today there are many tools

235
00:07:26,960 --> 00:07:28,560
that let developers annotate program

236
00:07:28,560 --> 00:07:30,639
inputs as either public or secret

237
00:07:30,639 --> 00:07:32,000
and then automatically check that the

238
00:07:32,000 --> 00:07:34,000
program has constant time

239
00:07:34,000 --> 00:07:35,280
and these have already been applied to

240
00:07:35,280 --> 00:07:37,599
many real world libraries for example

241
00:07:37,599 --> 00:07:39,919
portions of the assembly code in openssl

242
00:07:39,919 --> 00:07:42,000
have to verify using veil

243
00:07:42,000 --> 00:07:43,840
high speed implementations of shot 3 and

244
00:07:43,840 --> 00:07:45,759
tls 1.3 cypher suites have been verified

245
00:07:45,759 --> 00:07:47,360
using jasmine

246
00:07:47,360 --> 00:07:49,199
and various off-the-shelf libraries have

247
00:07:49,199 --> 00:07:51,919
been analyzed using flow tracker

248
00:07:51,919 --> 00:07:53,520
moreover quite a bit of recent work

249
00:07:53,520 --> 00:07:55,039
including several papers at this

250
00:07:55,039 --> 00:07:55,680
conference

251
00:07:55,680 --> 00:07:57,120
have begun tackling the problem of

252
00:07:57,120 --> 00:07:59,039
protecting cryptographic code against

253
00:07:59,039 --> 00:08:01,599
microarchitectural side channel attacks

254
00:08:01,599 --> 00:08:03,199
for example work by jill barth and

255
00:08:03,199 --> 00:08:05,039
others shows how to verify the protect

256
00:08:05,039 --> 00:08:06,720
cryptographic implementations

257
00:08:06,720 --> 00:08:08,560
against various spectre-style attacks

258
00:08:08,560 --> 00:08:10,879
with only a modest performance penalty

259
00:08:10,879 --> 00:08:12,639
and we expect formal reasoning about

260
00:08:12,639 --> 00:08:14,240
micro architectural side channels

261
00:08:14,240 --> 00:08:16,319
to be an exciting area of computer aided

262
00:08:16,319 --> 00:08:19,680
crypto research in the coming years

263
00:08:19,680 --> 00:08:21,680
so that's how computer aided crypto can

264
00:08:21,680 --> 00:08:23,199
be used to help with design level

265
00:08:23,199 --> 00:08:23,919
security

266
00:08:23,919 --> 00:08:25,440
functional correctness and

267
00:08:25,440 --> 00:08:27,360
implementation level security

268
00:08:27,360 --> 00:08:28,879
but at this point it's also important to

269
00:08:28,879 --> 00:08:31,280
emphasize that computer aided crypto is

270
00:08:31,280 --> 00:08:32,000
not just

271
00:08:32,000 --> 00:08:34,320
academic crypto but it really is real

272
00:08:34,320 --> 00:08:36,159
world crypto

273
00:08:36,159 --> 00:08:39,279
i've already touched on tls 1.3 for

274
00:08:39,279 --> 00:08:40,080
which there were

275
00:08:40,080 --> 00:08:42,159
many substantial efforts in verifying

276
00:08:42,159 --> 00:08:43,360
implementations

277
00:08:43,360 --> 00:08:45,279
and analyzing security using both

278
00:08:45,279 --> 00:08:48,160
symbolic and computational tools

279
00:08:48,160 --> 00:08:49,600
but there are many other examples of

280
00:08:49,600 --> 00:08:51,200
computer agent crypto artifacts being

281
00:08:51,200 --> 00:08:53,519
widely deployed in practice

282
00:08:53,519 --> 00:08:55,920
for example amazon web services key

283
00:08:55,920 --> 00:08:57,519
management service has a machine checked

284
00:08:57,519 --> 00:09:00,240
security proof and easy crypt

285
00:09:00,240 --> 00:09:02,000
the hackle star and hackl n projects

286
00:09:02,000 --> 00:09:03,600
born out of project everest

287
00:09:03,600 --> 00:09:05,279
have delivered verified primitives that

288
00:09:05,279 --> 00:09:07,360
are being used in firefox

289
00:09:07,360 --> 00:09:08,800
the fiat cryptography project has

290
00:09:08,800 --> 00:09:10,480
delivered verified elliptic curve code

291
00:09:10,480 --> 00:09:12,160
that's being used in google sporting a

292
00:09:12,160 --> 00:09:13,600
cell library

293
00:09:13,600 --> 00:09:15,600
and more recently the project ever ever

294
00:09:15,600 --> 00:09:17,600
 project has delivered verified

295
00:09:17,600 --> 00:09:18,959
primitives that are being used in the

296
00:09:18,959 --> 00:09:23,680
linux kernel's built-in vpn

297
00:09:23,680 --> 00:09:25,279
even though these success stories are

298
00:09:25,279 --> 00:09:27,519
great in order to fully appreciate the

299
00:09:27,519 --> 00:09:29,519
benefits of computer aided crypto

300
00:09:29,519 --> 00:09:31,279
it's also important to acknowledge that

301
00:09:31,279 --> 00:09:32,800
formal guarantees do come with

302
00:09:32,800 --> 00:09:34,000
limitations

303
00:09:34,000 --> 00:09:35,839
namely that to make formal analysis

304
00:09:35,839 --> 00:09:37,760
tractable formal models

305
00:09:37,760 --> 00:09:39,600
are almost always a simplification of

306
00:09:39,600 --> 00:09:41,360
the real world

307
00:09:41,360 --> 00:09:43,360
and so for design level security this

308
00:09:43,360 --> 00:09:45,040
means that protocol models are often

309
00:09:45,040 --> 00:09:46,080
simplified

310
00:09:46,080 --> 00:09:48,399
into cryptographic cores that ignore

311
00:09:48,399 --> 00:09:50,000
many details about designs and

312
00:09:50,000 --> 00:09:53,600
attacker capabilities for correctness

313
00:09:53,600 --> 00:09:55,200
there may be gaps between what's being

314
00:09:55,200 --> 00:09:57,760
verified and the output machine code

315
00:09:57,760 --> 00:09:59,600
for example verification might be

316
00:09:59,600 --> 00:10:01,680
carried out on a verification friendly

317
00:10:01,680 --> 00:10:03,120
representation of the source code rather

318
00:10:03,120 --> 00:10:05,279
than on the source code itself

319
00:10:05,279 --> 00:10:07,040
or if verification is performed on c

320
00:10:07,040 --> 00:10:08,959
code we have to trust mainstream c

321
00:10:08,959 --> 00:10:09,839
compilers which

322
00:10:09,839 --> 00:10:11,839
frequently have bugs and even if the

323
00:10:11,839 --> 00:10:13,440
code they produce is correct

324
00:10:13,440 --> 00:10:15,040
they might introduce side channels that

325
00:10:15,040 --> 00:10:16,839
weren't present in the original source

326
00:10:16,839 --> 00:10:18,560
code

327
00:10:18,560 --> 00:10:20,880
and for implementation level security

328
00:10:20,880 --> 00:10:22,720
formal models simply can't capture all

329
00:10:22,720 --> 00:10:24,000
physically observable effects of

330
00:10:24,000 --> 00:10:25,760
hardware which leaves room for

331
00:10:25,760 --> 00:10:27,920
unaccounted side channels

332
00:10:27,920 --> 00:10:29,519
to make matters worse new micro

333
00:10:29,519 --> 00:10:30,959
architectural side channels

334
00:10:30,959 --> 00:10:32,800
such as spectre have revealed gaps

335
00:10:32,800 --> 00:10:34,240
between what we think is being leaked

336
00:10:34,240 --> 00:10:37,519
and what's actually being leaked

337
00:10:37,519 --> 00:10:39,519
on top of it all in order to carry

338
00:10:39,519 --> 00:10:40,640
formal guarantees

339
00:10:40,640 --> 00:10:42,560
all the way down the stack we have to

340
00:10:42,560 --> 00:10:44,160
make sure that we haven't left any gaps

341
00:10:44,160 --> 00:10:46,000
in our modeling between layers

342
00:10:46,000 --> 00:10:47,440
and it's in these gaps that we really

343
00:10:47,440 --> 00:10:50,640
need to focus our attention

344
00:10:52,000 --> 00:10:53,839
but closing these gaps does leave many

345
00:10:53,839 --> 00:10:55,200
exciting research challenges for the

346
00:10:55,200 --> 00:10:56,399
future

347
00:10:56,399 --> 00:10:57,760
for example an important lesson we

348
00:10:57,760 --> 00:10:59,680
learned from tls 1.3

349
00:10:59,680 --> 00:11:02,000
is that standardization processes can

350
00:11:02,000 --> 00:11:03,440
embrace design changes

351
00:11:03,440 --> 00:11:05,120
that simplify security arguments and

352
00:11:05,120 --> 00:11:07,200
help modular reasoning

353
00:11:07,200 --> 00:11:09,600
the tls 1.3 design incorporated many

354
00:11:09,600 --> 00:11:10,320
suggestions

355
00:11:10,320 --> 00:11:11,920
from the academic community that

356
00:11:11,920 --> 00:11:14,079
simplified automated analysis

357
00:11:14,079 --> 00:11:16,320
for example this included changes to

358
00:11:16,320 --> 00:11:17,279
this key schedule

359
00:11:17,279 --> 00:11:19,360
that helped with key separation which

360
00:11:19,360 --> 00:11:21,360
simplified modular proofs

361
00:11:21,360 --> 00:11:23,120
and also including more transcript

362
00:11:23,120 --> 00:11:24,560
information in exchanges

363
00:11:24,560 --> 00:11:27,519
which simplified consistency proofs

364
00:11:27,519 --> 00:11:29,120
these changes overall had negligible

365
00:11:29,120 --> 00:11:29,760
impact

366
00:11:29,760 --> 00:11:31,839
on the performance of the protocol but

367
00:11:31,839 --> 00:11:33,680
helped make analyzing such a complex

368
00:11:33,680 --> 00:11:36,640
protocol feasible

369
00:11:37,440 --> 00:11:38,959
to carry correctness guarantees down to

370
00:11:38,959 --> 00:11:41,279
machine code they can be established at

371
00:11:41,279 --> 00:11:42,800
source level and compiled using a

372
00:11:42,800 --> 00:11:44,000
verified compiler

373
00:11:44,000 --> 00:11:47,120
such as comcert but today's verified

374
00:11:47,120 --> 00:11:48,160
compilers produce

375
00:11:48,160 --> 00:11:50,399
pretty slow code so important future

376
00:11:50,399 --> 00:11:51,519
work is to incorporate more

377
00:11:51,519 --> 00:11:52,720
optimizations

378
00:11:52,720 --> 00:11:55,440
including support for cmd instructions

379
00:11:55,440 --> 00:11:56,639
and alternatively there's a lot to be

380
00:11:56,639 --> 00:11:58,320
gained if we focus more efforts

381
00:11:58,320 --> 00:12:00,079
on scalably verifying assembly code

382
00:12:00,079 --> 00:12:02,160
directly which currently requires quite

383
00:12:02,160 --> 00:12:03,760
a bit more work than verifying

384
00:12:03,760 --> 00:12:06,639
say c code

385
00:12:07,040 --> 00:12:09,040
and finally to achieve a sound formal

386
00:12:09,040 --> 00:12:10,399
treatment of protecting against side

387
00:12:10,399 --> 00:12:11,680
channel attacks

388
00:12:11,680 --> 00:12:13,360
guru jerome and heiser have argued the

389
00:12:13,360 --> 00:12:15,120
need for a new security oriented

390
00:12:15,120 --> 00:12:16,959
hardware software contract

391
00:12:16,959 --> 00:12:19,279
the work by marco guarnieri and others

392
00:12:19,279 --> 00:12:20,720
on hardware software contracts for

393
00:12:20,720 --> 00:12:22,240
secure speculation

394
00:12:22,240 --> 00:12:23,920
which is appearing at this conference

395
00:12:23,920 --> 00:12:25,200
make some headway in this general

396
00:12:25,200 --> 00:12:26,320
direction

397
00:12:26,320 --> 00:12:28,480
but the problem with today's isas is

398
00:12:28,480 --> 00:12:29,760
that they describe

399
00:12:29,760 --> 00:12:31,279
what a developer needs to know to write

400
00:12:31,279 --> 00:12:33,040
a functionally correct program

401
00:12:33,040 --> 00:12:34,720
but they're an insufficient

402
00:12:34,720 --> 00:12:36,160
specification when it comes to writing

403
00:12:36,160 --> 00:12:38,639
secure programs

404
00:12:38,639 --> 00:12:40,079
so in order to carry side channel

405
00:12:40,079 --> 00:12:41,839
counter measures at the software level

406
00:12:41,839 --> 00:12:43,920
down to hardware we need isas that

407
00:12:43,920 --> 00:12:45,440
capture for example the temporal

408
00:12:45,440 --> 00:12:46,000
behavior

409
00:12:46,000 --> 00:12:49,440
program to fix this

410
00:12:49,440 --> 00:12:51,200
researchers have called on new isa

411
00:12:51,200 --> 00:12:53,120
designs that expose for example

412
00:12:53,120 --> 00:12:55,200
the temporal behaviors of hardware which

413
00:12:55,200 --> 00:12:56,480
can lend to reasoning about them in

414
00:12:56,480 --> 00:12:57,920
software

415
00:12:57,920 --> 00:12:59,360
this of course poses challenging and

416
00:12:59,360 --> 00:13:00,800
competing requirements for hardware

417
00:13:00,800 --> 00:13:01,680
architects

418
00:13:01,680 --> 00:13:03,519
but we do believe that developing formal

419
00:13:03,519 --> 00:13:05,120
foundations for verification and

420
00:13:05,120 --> 00:13:06,639
reasoning about security at the hardware

421
00:13:06,639 --> 00:13:08,560
software interface can help

422
00:13:08,560 --> 00:13:10,320
and this line of work seems also to be

423
00:13:10,320 --> 00:13:12,399
the only path that can lead towards a

424
00:13:12,399 --> 00:13:13,839
sound formal treatment of

425
00:13:13,839 --> 00:13:17,519
microarchitectural side handle attacks

426
00:13:18,240 --> 00:13:19,760
and finally to bridge any gaps between

427
00:13:19,760 --> 00:13:21,920
layers we encourage more efforts focused

428
00:13:21,920 --> 00:13:24,399
on consolidating all of these guarantees

429
00:13:24,399 --> 00:13:26,480
the holy grail of computer aided crypto

430
00:13:26,480 --> 00:13:27,760
would be to deliver

431
00:13:27,760 --> 00:13:29,760
guarantees on machine code that match

432
00:13:29,760 --> 00:13:31,519
the strength and elegance of guarantees

433
00:13:31,519 --> 00:13:35,839
on cryptographic designs

434
00:13:35,839 --> 00:13:37,440
so now that you're all a little bit more

435
00:13:37,440 --> 00:13:39,199
familiar with computer aided crypto

436
00:13:39,199 --> 00:13:40,639
let's think about what computer aided

437
00:13:40,639 --> 00:13:42,240
tools might change in the grand scheme

438
00:13:42,240 --> 00:13:43,600
of things

439
00:13:43,600 --> 00:13:44,800
even though we've made some great

440
00:13:44,800 --> 00:13:46,800
strides in the past few years alone

441
00:13:46,800 --> 00:13:48,480
i think the answer is that it's not

442
00:13:48,480 --> 00:13:50,320
totally clear yet

443
00:13:50,320 --> 00:13:52,160
you know will computer 80 crypto fulfill

444
00:13:52,160 --> 00:13:53,680
its promises and put graphic designers

445
00:13:53,680 --> 00:13:54,800
out of work

446
00:13:54,800 --> 00:13:56,560
well it's only recently been deployed in

447
00:13:56,560 --> 00:13:58,399
the wild so it remains to be seen how

448
00:13:58,399 --> 00:14:01,360
well formal guarantees actually hold up

449
00:14:01,360 --> 00:14:02,959
but it's important to remember that

450
00:14:02,959 --> 00:14:04,800
security isn't about being perfect

451
00:14:04,800 --> 00:14:07,519
but rather raising the bar for attackers

452
00:14:07,519 --> 00:14:09,199
so maybe we shouldn't expect a world

453
00:14:09,199 --> 00:14:11,360
with no high profile vulnerabilities

454
00:14:11,360 --> 00:14:13,360
but maybe just a few per year instead of

455
00:14:13,360 --> 00:14:14,880
10 per year

456
00:14:14,880 --> 00:14:16,240
what i do know for sure is that this

457
00:14:16,240 --> 00:14:17,760
will be an exciting area of research for

458
00:14:17,760 --> 00:14:20,480
many years to come

459
00:14:21,519 --> 00:14:23,040
and so with that i hope i've picked your

460
00:14:23,040 --> 00:14:25,120
interest in computer aided crypto

461
00:14:25,120 --> 00:14:26,480
if you want to learn more i hope that

462
00:14:26,480 --> 00:14:28,320
you'll check out our full slk paper

463
00:14:28,320 --> 00:14:29,360
which includes

464
00:14:29,360 --> 00:14:31,680
in-depth tool comparisons more research

465
00:14:31,680 --> 00:14:33,839
challenges and various case studies

466
00:14:33,839 --> 00:14:35,040
thanks for listening and i'll be happy

467
00:14:35,040 --> 00:14:40,160
to take any of your questions

