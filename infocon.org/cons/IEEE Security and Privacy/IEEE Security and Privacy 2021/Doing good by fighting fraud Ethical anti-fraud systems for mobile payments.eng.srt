1
00:00:01,040 --> 00:00:03,600
hello everyone i'm zane from uc davis

2
00:00:03,600 --> 00:00:04,400
and today

3
00:00:04,400 --> 00:00:06,240
i will tell you about our paper doing

4
00:00:06,240 --> 00:00:07,520
goodbye fighting fraud

5
00:00:07,520 --> 00:00:09,679
our work on ethical anti-fraud systems

6
00:00:09,679 --> 00:00:12,080
for mobile payments

7
00:00:12,080 --> 00:00:13,679
smartphones and apps are everywhere and

8
00:00:13,679 --> 00:00:15,120
can be used for anything from food

9
00:00:15,120 --> 00:00:16,800
deliveries to money transfer to bookings

10
00:00:16,800 --> 00:00:18,960
to banking and much more

11
00:00:18,960 --> 00:00:21,279
however this ubiquity has also led to

12
00:00:21,279 --> 00:00:23,119
new classes of attacks like payment

13
00:00:23,119 --> 00:00:23,600
fraud

14
00:00:23,600 --> 00:00:27,279
identity theft money laundering etc

15
00:00:27,279 --> 00:00:29,039
concretely let's take an example of

16
00:00:29,039 --> 00:00:31,039
payment fraud attackers carry out

17
00:00:31,039 --> 00:00:31,840
payment fraud

18
00:00:31,840 --> 00:00:33,920
by acquiring sold payment card

19
00:00:33,920 --> 00:00:35,040
information online

20
00:00:35,040 --> 00:00:36,480
and then this information is used to

21
00:00:36,480 --> 00:00:38,160
make purchases with these apps without

22
00:00:38,160 --> 00:00:40,480
possessing the physical card

23
00:00:40,480 --> 00:00:42,320
for instance the attackers could pay for

24
00:00:42,320 --> 00:00:43,920
drug runs on ride sharing apps with

25
00:00:43,920 --> 00:00:45,600
these stolen cars

26
00:00:45,600 --> 00:00:47,440
or they could act as agent service

27
00:00:47,440 --> 00:00:49,200
offering goods to legitimate users at a

28
00:00:49,200 --> 00:00:50,000
discount

29
00:00:50,000 --> 00:00:52,399
while paying the app with stolen cards

30
00:00:52,399 --> 00:00:53,840
in the example on the slide

31
00:00:53,840 --> 00:00:55,360
the user pays five dollars to the

32
00:00:55,360 --> 00:00:58,000
attacker for a burger

33
00:00:58,000 --> 00:00:59,680
the attacker places an order with the

34
00:00:59,680 --> 00:01:01,280
app on behalf of the user

35
00:01:01,280 --> 00:01:02,719
paying the full ten dollars with the

36
00:01:02,719 --> 00:01:04,640
stolen cards while pocketing the five

37
00:01:04,640 --> 00:01:07,119
dollars from the user

38
00:01:07,119 --> 00:01:08,560
the app treats this as normal

39
00:01:08,560 --> 00:01:10,240
transaction delivers the burger to the

40
00:01:10,240 --> 00:01:10,799
user

41
00:01:10,799 --> 00:01:12,720
who effectively gets it at a discounted

42
00:01:12,720 --> 00:01:14,720
price

43
00:01:14,720 --> 00:01:16,240
meanwhile when the real owner of the

44
00:01:16,240 --> 00:01:17,840
stolen card sees this transaction on

45
00:01:17,840 --> 00:01:18,960
their bank statement

46
00:01:18,960 --> 00:01:20,880
they dispute the transaction upon

47
00:01:20,880 --> 00:01:22,479
investigation if the bank finds this

48
00:01:22,479 --> 00:01:24,080
transaction as fraudulent

49
00:01:24,080 --> 00:01:27,520
they'll issue a charge back to the app

50
00:01:27,520 --> 00:01:29,200
the app will have to pay back the money

51
00:01:29,200 --> 00:01:30,799
to the real owner of the card

52
00:01:30,799 --> 00:01:32,320
and an additional dispute fee to the

53
00:01:32,320 --> 00:01:34,079
credit card company so not only does the

54
00:01:34,079 --> 00:01:35,119
app lose money

55
00:01:35,119 --> 00:01:36,720
but it's also being used for illegal

56
00:01:36,720 --> 00:01:38,840
activities like drug runs as mentioned

57
00:01:38,840 --> 00:01:41,520
before this process can also be abused

58
00:01:41,520 --> 00:01:42,079
to

59
00:01:42,079 --> 00:01:45,759
move money around naturally it's no

60
00:01:45,759 --> 00:01:47,759
surprise that apps take fraud seriously

61
00:01:47,759 --> 00:01:49,360
and commission data scientists to build

62
00:01:49,360 --> 00:01:51,600
fraud prediction models

63
00:01:51,600 --> 00:01:53,200
fraud engineers can use features from

64
00:01:53,200 --> 00:01:55,040
the transaction or the user

65
00:01:55,040 --> 00:01:56,719
together with the chargeback data to

66
00:01:56,719 --> 00:01:58,719
train fraud prediction models

67
00:01:58,719 --> 00:02:00,479
the chargeback labels from the bank

68
00:02:00,479 --> 00:02:02,000
serve as the ground truth for the

69
00:02:02,000 --> 00:02:04,719
transactions

70
00:02:04,960 --> 00:02:07,520
however chargeback data takes a lot of

71
00:02:07,520 --> 00:02:09,520
time in some cases up to 90 days to

72
00:02:09,520 --> 00:02:10,239
accumulate

73
00:02:10,239 --> 00:02:12,959
also users may not flag a transaction as

74
00:02:12,959 --> 00:02:14,560
fraudulent in which case the transaction

75
00:02:14,560 --> 00:02:16,480
is mislabeled

76
00:02:16,480 --> 00:02:17,760
additionally in the training data if

77
00:02:17,760 --> 00:02:19,440
there's bias towards a certain attribute

78
00:02:19,440 --> 00:02:20,959
or an attribute correlated with a

79
00:02:20,959 --> 00:02:22,400
protected attribute this can lead to

80
00:02:22,400 --> 00:02:24,560
discrimination

81
00:02:24,560 --> 00:02:26,720
now companies need to block fraud to

82
00:02:26,720 --> 00:02:27,680
keep costs down

83
00:02:27,680 --> 00:02:29,680
or else low income populations can't

84
00:02:29,680 --> 00:02:31,599
afford the service

85
00:02:31,599 --> 00:02:33,760
but algorithmic bias in the anti-fraud

86
00:02:33,760 --> 00:02:35,360
models might block them anyway for

87
00:02:35,360 --> 00:02:36,959
instance if there is bias in the

88
00:02:36,959 --> 00:02:38,959
historical data pertaining to zip code

89
00:02:38,959 --> 00:02:40,879
the fraud decision engine could amplify

90
00:02:40,879 --> 00:02:42,560
that bias by predicting more fraud for

91
00:02:42,560 --> 00:02:43,519
that attribute

92
00:02:43,519 --> 00:02:45,040
and this data then gets fed into the

93
00:02:45,040 --> 00:02:47,120
training pipeline again creating a

94
00:02:47,120 --> 00:02:48,720
positive feedback loop

95
00:02:48,720 --> 00:02:50,560
this is just one example and there are

96
00:02:50,560 --> 00:02:52,640
multiple ways in which bias can creep

97
00:02:52,640 --> 00:02:55,519
into the decision engines

98
00:02:55,519 --> 00:02:58,000
so this is an ethical cache 22 like what

99
00:02:58,000 --> 00:03:00,080
do we do

100
00:03:00,080 --> 00:03:02,159
to reduce the impact of mistakes by

101
00:03:02,159 --> 00:03:03,840
fraud algorithms apps have developed

102
00:03:03,840 --> 00:03:05,599
user-facing challenges where the app

103
00:03:05,599 --> 00:03:07,440
requires suspicious users to pass a

104
00:03:07,440 --> 00:03:08,239
challenge

105
00:03:08,239 --> 00:03:09,760
instead of suspending the user or

106
00:03:09,760 --> 00:03:11,360
blocking the transaction

107
00:03:11,360 --> 00:03:13,040
so even if the algorithm has bias these

108
00:03:13,040 --> 00:03:14,720
challenges provide an avenue for making

109
00:03:14,720 --> 00:03:18,000
sure that everyone can access the app

110
00:03:18,000 --> 00:03:20,000
like uber's card scan where a suspicious

111
00:03:20,000 --> 00:03:21,599
user is asked to scan their card to

112
00:03:21,599 --> 00:03:23,120
prove possession

113
00:03:23,120 --> 00:03:26,480
or junior's id and liveness check

114
00:03:26,480 --> 00:03:29,280
so then the question is is this it are

115
00:03:29,280 --> 00:03:30,879
user-centric challenges the silver

116
00:03:30,879 --> 00:03:32,319
bullet

117
00:03:32,319 --> 00:03:34,080
to answer this question we performed a

118
00:03:34,080 --> 00:03:35,440
measurement study of boxer

119
00:03:35,440 --> 00:03:38,560
and open source anti-fraud sdk

120
00:03:38,560 --> 00:03:40,000
based on our measurements we found that

121
00:03:40,000 --> 00:03:41,920
boxer doesn't perform well on resource

122
00:03:41,920 --> 00:03:43,280
constrained devices as opposed to

123
00:03:43,280 --> 00:03:44,400
well-provisioned ones

124
00:03:44,400 --> 00:03:46,720
for instance there is a 105x performance

125
00:03:46,720 --> 00:03:48,720
difference between iphone 11 pro max

126
00:03:48,720 --> 00:03:51,200
and samsung j320 and this has the

127
00:03:51,200 --> 00:03:52,080
potential

128
00:03:52,080 --> 00:03:54,080
of reinforcing existing bias against at

129
00:03:54,080 --> 00:03:56,640
risk populations

130
00:03:56,640 --> 00:03:58,080
these user-facing challenges need to

131
00:03:58,080 --> 00:03:59,680
work for all users otherwise

132
00:03:59,680 --> 00:04:02,959
they are self-defeating later on in the

133
00:04:02,959 --> 00:04:04,480
presentation i'll introduce our system

134
00:04:04,480 --> 00:04:06,640
that empowers these challenges to run on

135
00:04:06,640 --> 00:04:08,959
wide range of devices

136
00:04:08,959 --> 00:04:10,239
in the remainder of the presentation

137
00:04:10,239 --> 00:04:11,599
i'll first talk about our measurement

138
00:04:11,599 --> 00:04:12,879
study of boxer

139
00:04:12,879 --> 00:04:15,360
and the implications from the results

140
00:04:15,360 --> 00:04:16,798
i'll then introduce our new system

141
00:04:16,798 --> 00:04:17,600
daredevil

142
00:04:17,600 --> 00:04:19,440
that provides an equitable framework for

143
00:04:19,440 --> 00:04:21,199
user-centric challenges

144
00:04:21,199 --> 00:04:22,720
this will be followed by the evaluation

145
00:04:22,720 --> 00:04:24,479
of daredevil in a production environment

146
00:04:24,479 --> 00:04:27,680
and afterwards i will conclude

147
00:04:27,680 --> 00:04:29,199
in this paper we conducted the first

148
00:04:29,199 --> 00:04:30,479
large-scale measurement study of a

149
00:04:30,479 --> 00:04:32,000
security challenge using deep learning

150
00:04:32,000 --> 00:04:34,000
on mobile devices

151
00:04:34,000 --> 00:04:36,080
our measurements focus on boxer a widely

152
00:04:36,080 --> 00:04:37,440
deployed state-of-the-art

153
00:04:37,440 --> 00:04:39,360
open source card scanner which is used

154
00:04:39,360 --> 00:04:42,400
as part of an anti-fraud sdk

155
00:04:42,400 --> 00:04:43,840
so the way it works is given a payment

156
00:04:43,840 --> 00:04:45,759
card image the card scanner uses deep

157
00:04:45,759 --> 00:04:47,280
learning models to extract the card

158
00:04:47,280 --> 00:04:49,680
information from the image

159
00:04:49,680 --> 00:04:51,120
the first question we wanted to answer

160
00:04:51,120 --> 00:04:53,120
with our study was what is the raw

161
00:04:53,120 --> 00:04:54,800
performance of the system

162
00:04:54,800 --> 00:04:56,800
what percentage of users can use the

163
00:04:56,800 --> 00:04:59,040
system successfully

164
00:04:59,040 --> 00:05:00,479
and then is the performance correlated

165
00:05:00,479 --> 00:05:02,000
with any measurable factors in other

166
00:05:02,000 --> 00:05:03,680
words if we want to improve the system

167
00:05:03,680 --> 00:05:06,880
where can we begin with these goals in

168
00:05:06,880 --> 00:05:07,520
mind we

169
00:05:07,520 --> 00:05:09,680
instrumented the boxer sdk and shipped

170
00:05:09,680 --> 00:05:11,199
it in 496

171
00:05:11,199 --> 00:05:13,440
apps we report the anonymous statistics

172
00:05:13,440 --> 00:05:14,639
sent by these apps

173
00:05:14,639 --> 00:05:18,880
from july 2019 to november 2020.

174
00:05:18,960 --> 00:05:21,919
our instrumented android sdk ran on over

175
00:05:21,919 --> 00:05:24,320
300 000 android devices spanning 611

176
00:05:24,320 --> 00:05:25,600
device types whereas

177
00:05:25,600 --> 00:05:28,560
our ios sdk ran on over 3 million ios

178
00:05:28,560 --> 00:05:31,199
devices spanning 27 device types

179
00:05:31,199 --> 00:05:33,120
we measured two key performance metrics

180
00:05:33,120 --> 00:05:34,720
the first one was success rate which we

181
00:05:34,720 --> 00:05:36,479
defined as the ratio of the number of

182
00:05:36,479 --> 00:05:37,520
devices

183
00:05:37,520 --> 00:05:39,199
where the card scanner was able to

184
00:05:39,199 --> 00:05:41,120
extract the card information correctly

185
00:05:41,120 --> 00:05:44,320
to the total number of devices and frame

186
00:05:44,320 --> 00:05:46,240
rates which we define as the number of

187
00:05:46,240 --> 00:05:47,600
frames from the camera

188
00:05:47,600 --> 00:05:49,120
processed by the deep learning models of

189
00:05:49,120 --> 00:05:51,600
the card scanner per second

190
00:05:51,600 --> 00:05:53,280
here are the results the figure shows

191
00:05:53,280 --> 00:05:55,199
the variation in success rate plotted

192
00:05:55,199 --> 00:05:56,960
against frame rate for ios

193
00:05:56,960 --> 00:05:58,800
the xx uses the frame rate whereas the y

194
00:05:58,800 --> 00:06:00,639
axis is the success rate

195
00:06:00,639 --> 00:06:02,800
each point represents the average for a

196
00:06:02,800 --> 00:06:04,639
specific device type

197
00:06:04,639 --> 00:06:06,639
it is clear that improving the frame

198
00:06:06,639 --> 00:06:09,039
rates increases the success rates so

199
00:06:09,039 --> 00:06:10,639
investing in efficient machine learning

200
00:06:10,639 --> 00:06:13,280
inference impacts the end-to-end results

201
00:06:13,280 --> 00:06:15,039
from an end user as well as from a

202
00:06:15,039 --> 00:06:17,680
business perspective

203
00:06:17,680 --> 00:06:19,199
however when we plot the results for

204
00:06:19,199 --> 00:06:20,800
android unfortunately it doesn't paint a

205
00:06:20,800 --> 00:06:22,639
rosy picture we see that both success

206
00:06:22,639 --> 00:06:24,479
and frame rates are significantly lower

207
00:06:24,479 --> 00:06:25,919
despite using the same machine learning

208
00:06:25,919 --> 00:06:28,880
models and algorithms as ios

209
00:06:28,880 --> 00:06:30,479
in fact there is a precipitous drop in

210
00:06:30,479 --> 00:06:32,160
success rates as frame rates drop below

211
00:06:32,160 --> 00:06:34,960
1 to 2 fps

212
00:06:34,960 --> 00:06:36,639
here are the aggregate results for ios

213
00:06:36,639 --> 00:06:38,319
and android for context higher success

214
00:06:38,319 --> 00:06:40,319
rates means better system

215
00:06:40,319 --> 00:06:42,000
and you can see that while the success

216
00:06:42,000 --> 00:06:43,919
rates for ios is 88.60

217
00:06:43,919 --> 00:06:45,199
the success rate for android is much

218
00:06:45,199 --> 00:06:48,080
lower at 46.72

219
00:06:48,080 --> 00:06:49,440
to further analyze the results on

220
00:06:49,440 --> 00:06:50,960
android we group the success rates by

221
00:06:50,960 --> 00:06:51,599
frame rate

222
00:06:51,599 --> 00:06:53,120
we can see that the significant portion

223
00:06:53,120 --> 00:06:55,120
of the devices operate at frame rates

224
00:06:55,120 --> 00:06:56,960
less than 1 fps and exhibit very low

225
00:06:56,960 --> 00:06:59,360
success rates

226
00:06:59,360 --> 00:07:00,880
one interesting point to note in all of

227
00:07:00,880 --> 00:07:02,479
this is that if the aggregate ios and

228
00:07:02,479 --> 00:07:04,479
android results we see that boxer works

229
00:07:04,479 --> 00:07:05,520
well on 93

230
00:07:05,520 --> 00:07:07,520
of the devices in other words boxer is a

231
00:07:07,520 --> 00:07:08,960
successful system overall

232
00:07:08,960 --> 00:07:10,880
and solves the app's business problem

233
00:07:10,880 --> 00:07:12,479
since boxer will recover most of the

234
00:07:12,479 --> 00:07:14,560
people that the app flags incorrectly

235
00:07:14,560 --> 00:07:16,400
which is inspired me purpose right to

236
00:07:16,400 --> 00:07:18,720
unblock users

237
00:07:18,720 --> 00:07:20,880
however by blocking devices that are

238
00:07:20,880 --> 00:07:22,800
unable to run boxer models fast enough

239
00:07:22,800 --> 00:07:24,720
it runs the risk of denying at risk

240
00:07:24,720 --> 00:07:27,360
populations

241
00:07:27,360 --> 00:07:28,800
to understand why frame rates and

242
00:07:28,800 --> 00:07:30,080
success rates are related here's a

243
00:07:30,080 --> 00:07:32,160
simple thought experiment

244
00:07:32,160 --> 00:07:34,400
say we have a fast phone and a slow

245
00:07:34,400 --> 00:07:36,240
phone the ml models on the fast phone

246
00:07:36,240 --> 00:07:37,919
can process 10 frames per second whereas

247
00:07:37,919 --> 00:07:39,520
the ml models on the slow phone can only

248
00:07:39,520 --> 00:07:42,479
process 0.5 frames per second

249
00:07:42,479 --> 00:07:44,319
so if a user scans for 10 seconds and

250
00:07:44,319 --> 00:07:46,080
then gives up the fast phone processes

251
00:07:46,080 --> 00:07:47,680
100 frames while the slow phone process

252
00:07:47,680 --> 00:07:49,759
is only 5 frames

253
00:07:49,759 --> 00:07:50,879
in other words the machine learning

254
00:07:50,879 --> 00:07:52,800
models on the fast phone will see 20

255
00:07:52,800 --> 00:07:54,000
times more data

256
00:07:54,000 --> 00:07:55,759
than the ones in the slow phone for the

257
00:07:55,759 --> 00:07:58,000
same amount of time

258
00:07:58,000 --> 00:07:59,520
in case of a security challenge this can

259
00:07:59,520 --> 00:08:01,280
lead to blocking of an end user simply

260
00:08:01,280 --> 00:08:04,800
because they have an inexpensive device

261
00:08:04,800 --> 00:08:07,120
now if the security challenge never runs

262
00:08:07,120 --> 00:08:08,479
through the limited resources on the end

263
00:08:08,479 --> 00:08:10,080
device the decision engine will not have

264
00:08:10,080 --> 00:08:13,680
the data needed to unblock the user

265
00:08:13,680 --> 00:08:15,840
and we cannot merely rely on algorithmic

266
00:08:15,840 --> 00:08:17,280
notion of fairness since it cannot

267
00:08:17,280 --> 00:08:19,599
account for the lack of this data

268
00:08:19,599 --> 00:08:22,479
we need the n data from the end user and

269
00:08:22,479 --> 00:08:23,840
to this end we present

270
00:08:23,840 --> 00:08:26,160
daredevil which is our system for

271
00:08:26,160 --> 00:08:27,680
running card scanning and verification

272
00:08:27,680 --> 00:08:29,360
on full range of devices one is likely

273
00:08:29,360 --> 00:08:30,960
to see in practice today

274
00:08:30,960 --> 00:08:32,559
we believe that daredevil is a more

275
00:08:32,559 --> 00:08:36,080
equitable framework for fighting fraud

276
00:08:36,080 --> 00:08:37,679
due to the time constraint i will not be

277
00:08:37,679 --> 00:08:39,200
able to go into the inner workings of

278
00:08:39,200 --> 00:08:40,640
our system and i encourage you to read

279
00:08:40,640 --> 00:08:42,479
our paper for more details however

280
00:08:42,479 --> 00:08:43,919
i do want to briefly talk about some

281
00:08:43,919 --> 00:08:45,360
high level principles that were useful

282
00:08:45,360 --> 00:08:46,720
in designing the system

283
00:08:46,720 --> 00:08:48,399
there are basically two key areas where

284
00:08:48,399 --> 00:08:49,760
we focused most of our time

285
00:08:49,760 --> 00:08:50,959
the first one was the design of the

286
00:08:50,959 --> 00:08:52,640
machine learning models given the kind

287
00:08:52,640 --> 00:08:54,000
of hardware these models would run

288
00:08:54,000 --> 00:08:56,720
on and the other one was how and when to

289
00:08:56,720 --> 00:08:57,760
run these models

290
00:08:57,760 --> 00:09:00,480
uh to maximize efficiency and accuracy

291
00:09:00,480 --> 00:09:02,080
in other words the design of the optimal

292
00:09:02,080 --> 00:09:04,160
system pipeline

293
00:09:04,160 --> 00:09:05,680
in designing our machine learning models

294
00:09:05,680 --> 00:09:07,040
our first guiding design principle was

295
00:09:07,040 --> 00:09:08,480
to optimize for resource constraint

296
00:09:08,480 --> 00:09:08,959
devices

297
00:09:08,959 --> 00:09:10,640
machine learning optimizations for

298
00:09:10,640 --> 00:09:12,399
resource constrained devices translates

299
00:09:12,399 --> 00:09:14,080
to well-provisioned devices as well

300
00:09:14,080 --> 00:09:15,600
but the reverse is not true in other

301
00:09:15,600 --> 00:09:18,240
words if a system is efficient for a cpu

302
00:09:18,240 --> 00:09:20,240
it will also perform reasonably well on

303
00:09:20,240 --> 00:09:23,040
custom hardware but the reverse may or

304
00:09:23,040 --> 00:09:25,839
may not be true

305
00:09:25,839 --> 00:09:27,519
our second principle was to optimize for

306
00:09:27,519 --> 00:09:29,360
the most common car designs we observed

307
00:09:29,360 --> 00:09:31,200
that to support complex car designs we

308
00:09:31,200 --> 00:09:32,560
needed to add complex

309
00:09:32,560 --> 00:09:34,640
auxiliary layers to our models

310
00:09:34,640 --> 00:09:36,080
significantly increasing the inference

311
00:09:36,080 --> 00:09:37,680
time and every car design will have to

312
00:09:37,680 --> 00:09:39,279
pay this extra inference cost

313
00:09:39,279 --> 00:09:41,519
so we decided to natively support only

314
00:09:41,519 --> 00:09:43,279
the most common car designs

315
00:09:43,279 --> 00:09:45,040
and employ a gated pipeline for more

316
00:09:45,040 --> 00:09:46,399
complex car designs keeping the

317
00:09:46,399 --> 00:09:49,600
influence efficient for the common case

318
00:09:49,600 --> 00:09:51,120
from the system design point of view our

319
00:09:51,120 --> 00:09:52,399
principles revolve around the

320
00:09:52,399 --> 00:09:54,080
composition of the tasks this has two

321
00:09:54,080 --> 00:09:56,480
benefits the first one is efficiency

322
00:09:56,480 --> 00:09:58,000
say you have a task that requires

323
00:09:58,000 --> 00:10:00,080
running a complex machine learning model

324
00:10:00,080 --> 00:10:01,839
you also need to know when to run this

325
00:10:01,839 --> 00:10:03,279
task because if you run this task all

326
00:10:03,279 --> 00:10:04,800
the time it'll just waste computation

327
00:10:04,800 --> 00:10:06,800
in other words this task needs to be

328
00:10:06,800 --> 00:10:08,160
broken into two sub-tasks

329
00:10:08,160 --> 00:10:10,399
the first task is whether to run the

330
00:10:10,399 --> 00:10:12,000
task and the second one

331
00:10:12,000 --> 00:10:15,200
is running the actual task so

332
00:10:15,200 --> 00:10:16,480
both can be accomplished by machine

333
00:10:16,480 --> 00:10:18,240
learning models one simple one complex

334
00:10:18,240 --> 00:10:20,000
where the complex model

335
00:10:20,000 --> 00:10:22,079
gates the execution where the simple

336
00:10:22,079 --> 00:10:23,519
model gets the execution the complex

337
00:10:23,519 --> 00:10:26,640
model keeping the pipeline efficient

338
00:10:26,640 --> 00:10:28,480
decomposition also creates opportunities

339
00:10:28,480 --> 00:10:30,160
for redundancy providing more avenues

340
00:10:30,160 --> 00:10:31,600
for error correction and overall

341
00:10:31,600 --> 00:10:32,000
improved

342
00:10:32,000 --> 00:10:35,040
accuracy for instance if you have one

343
00:10:35,040 --> 00:10:36,880
model that extracts the digits from the

344
00:10:36,880 --> 00:10:37,839
payment card

345
00:10:37,839 --> 00:10:39,360
and the other model that identifies

346
00:10:39,360 --> 00:10:40,959
design elements these two models can

347
00:10:40,959 --> 00:10:42,560
reinforce each other where the first

348
00:10:42,560 --> 00:10:43,200
model

349
00:10:43,200 --> 00:10:45,120
can be sure that the digits belong to an

350
00:10:45,120 --> 00:10:48,800
actual card and not some random string

351
00:10:48,800 --> 00:10:50,800
to evaluate daredevil we conducted a

352
00:10:50,800 --> 00:10:52,399
similar experiment as our measurement

353
00:10:52,399 --> 00:10:53,760
study we shipped the card scanner part

354
00:10:53,760 --> 00:10:56,240
of the daredell sdk in 114 apps and we

355
00:10:56,240 --> 00:10:57,120
report the

356
00:10:57,120 --> 00:10:58,800
anonymous statistics sent by these apps

357
00:10:58,800 --> 00:11:02,079
from december 2018 to november 2020.

358
00:11:02,079 --> 00:11:04,720
our android sdk ran on close to 500 000

359
00:11:04,720 --> 00:11:07,200
android devices spanning 722 uh device

360
00:11:07,200 --> 00:11:07,680
types

361
00:11:07,680 --> 00:11:08,959
the detailed breakdown is mentioned in

362
00:11:08,959 --> 00:11:11,839
the paper and our ios sdk ran on 1

363
00:11:11,839 --> 00:11:13,920
million ios devices

364
00:11:13,920 --> 00:11:15,680
ran on over 1 million ios devices

365
00:11:15,680 --> 00:11:17,279
spanning 28 device types ranging from

366
00:11:17,279 --> 00:11:20,399
iphone 5s to iphone 11 pro max

367
00:11:20,399 --> 00:11:22,320
as before we defined success rate as the

368
00:11:22,320 --> 00:11:23,920
ratio of the number of devices where the

369
00:11:23,920 --> 00:11:25,360
card scanner was able to extract the

370
00:11:25,360 --> 00:11:26,720
card information correctly

371
00:11:26,720 --> 00:11:29,040
to the total number of devices and frame

372
00:11:29,040 --> 00:11:30,320
rate has the number of frames from the

373
00:11:30,320 --> 00:11:31,839
camera processed by the deep learning

374
00:11:31,839 --> 00:11:34,959
models of the card scanner per second

375
00:11:34,959 --> 00:11:36,640
the figure shows variation in success

376
00:11:36,640 --> 00:11:38,320
rates plotted against frame rate the x

377
00:11:38,320 --> 00:11:39,760
axis represents the frame rate and the y

378
00:11:39,760 --> 00:11:41,680
axis represents the success rate

379
00:11:41,680 --> 00:11:43,200
each point represents the average for a

380
00:11:43,200 --> 00:11:44,720
specific device type

381
00:11:44,720 --> 00:11:46,240
we plot these results for daredevil

382
00:11:46,240 --> 00:11:48,320
deployed on indoor and ios against boxer

383
00:11:48,320 --> 00:11:50,560
on ios

384
00:11:50,560 --> 00:11:52,160
as we can see there those improvements

385
00:11:52,160 --> 00:11:53,760
increase the success rates on android to

386
00:11:53,760 --> 00:11:57,839
closely match the success rates on boxer

387
00:12:09,040 --> 00:12:10,480
we also see that daredevil android

388
00:12:10,480 --> 00:12:12,000
increases the average success rates from

389
00:12:12,000 --> 00:12:13,200
46.72

390
00:12:13,200 --> 00:12:15,360
to 88.46 percent closely matching the

391
00:12:15,360 --> 00:12:18,240
success rates on boxer ios

392
00:12:18,240 --> 00:12:19,600
to further analyze the results on

393
00:12:19,600 --> 00:12:21,279
daredevil android we group the success

394
00:12:21,279 --> 00:12:23,519
rate by frame rate

395
00:12:23,519 --> 00:12:24,959
and compared to boxer daredevil's

396
00:12:24,959 --> 00:12:26,240
architecture reduces the number of

397
00:12:26,240 --> 00:12:27,680
devices that operate at frame rates

398
00:12:27,680 --> 00:12:30,000
below 1 fps from 44.61

399
00:12:30,000 --> 00:12:34,320
to 4.88 like boxer with daredevil we see

400
00:12:34,320 --> 00:12:35,519
that the success rates for android

401
00:12:35,519 --> 00:12:37,279
devices with frame rates less than one

402
00:12:37,279 --> 00:12:37,600
is

403
00:12:37,600 --> 00:12:40,800
lower than average however the

404
00:12:40,800 --> 00:12:43,360
overall increase in the number of

405
00:12:43,360 --> 00:12:44,880
devices that can run daredevil at

406
00:12:44,880 --> 00:12:46,639
greater than one to two fps leads to

407
00:12:46,639 --> 00:12:49,519
higher overall success rates

408
00:12:49,519 --> 00:12:50,959
in addition to extracting card

409
00:12:50,959 --> 00:12:52,480
information we also evaluated

410
00:12:52,480 --> 00:12:54,240
daredevil's ability to stop fraud in

411
00:12:54,240 --> 00:12:54,880
real time

412
00:12:54,880 --> 00:12:56,560
and we report the results from a large

413
00:12:56,560 --> 00:12:59,279
international app deploying our sdk

414
00:12:59,279 --> 00:13:00,880
for a period of three months the app

415
00:13:00,880 --> 00:13:03,279
flagged 12 474 transactions and

416
00:13:03,279 --> 00:13:04,639
suspicious and challenged them with

417
00:13:04,639 --> 00:13:05,680
daredevil

418
00:13:05,680 --> 00:13:08,560
to verify their payment method there

419
00:13:08,560 --> 00:13:10,959
they will pass 7612 transactions and

420
00:13:10,959 --> 00:13:15,200
block the remaining 4862 transactions

421
00:13:15,200 --> 00:13:18,480
off the 6612 transactions passed by data

422
00:13:18,480 --> 00:13:20,399
level only 12 resulted in chargebacks

423
00:13:20,399 --> 00:13:22,560
leading to a false negative rate of 0.16

424
00:13:22,560 --> 00:13:23,519
percent

425
00:13:23,519 --> 00:13:25,040
the app didn't share the false positive

426
00:13:25,040 --> 00:13:26,560
data with us so we're unable to report

427
00:13:26,560 --> 00:13:28,399
the false positive rate however

428
00:13:28,399 --> 00:13:31,200
we ran an in-lab experiment evaluating

429
00:13:31,200 --> 00:13:32,959
uh daredevil's false policy rate please

430
00:13:32,959 --> 00:13:34,480
refer to our paper for more details on

431
00:13:34,480 --> 00:13:36,560
the experiment

432
00:13:36,560 --> 00:13:38,079
to answer the question of whether our

433
00:13:38,079 --> 00:13:39,680
fraud decisions are correlated with

434
00:13:39,680 --> 00:13:41,519
frame rate frame rate being our proxy

435
00:13:41,519 --> 00:13:43,279
for resource constraint devices

436
00:13:43,279 --> 00:13:44,639
we analyze the performance

437
00:13:44,639 --> 00:13:46,839
characteristics of the past and block

438
00:13:46,839 --> 00:13:48,399
devices

439
00:13:48,399 --> 00:13:50,160
the average frame rate of devices that

440
00:13:50,160 --> 00:13:52,480
daredevil passed was 1.84 fps and the

441
00:13:52,480 --> 00:13:53,920
average frame rate of the devices that

442
00:13:53,920 --> 00:13:54,399
data

443
00:13:54,399 --> 00:13:58,000
blocked was 1.94 fps indicating the

444
00:13:58,000 --> 00:13:59,199
frame rates for the two groups is

445
00:13:59,199 --> 00:14:01,360
roughly the same

446
00:14:01,360 --> 00:14:02,959
to visualize the results better here's

447
00:14:02,959 --> 00:14:04,560
the cdf of the percentage of devices

448
00:14:04,560 --> 00:14:06,320
versus frame rate for the past and

449
00:14:06,320 --> 00:14:07,360
blocked groups

450
00:14:07,360 --> 00:14:09,120
the plots look very similar indicating

451
00:14:09,120 --> 00:14:10,240
that the frame rate is not a

452
00:14:10,240 --> 00:14:11,519
discriminating factor

453
00:14:11,519 --> 00:14:13,360
between blocked and past groups further

454
00:14:13,360 --> 00:14:14,880
demonstrating the equitable nature of

455
00:14:14,880 --> 00:14:17,040
data

456
00:14:17,040 --> 00:14:18,720
to conclude we investigated the

457
00:14:18,720 --> 00:14:20,000
implications of deep learning-based

458
00:14:20,000 --> 00:14:21,760
security challenges in the context of

459
00:14:21,760 --> 00:14:23,199
apps

460
00:14:23,199 --> 00:14:25,680
with data from over 5 million devices we

461
00:14:25,680 --> 00:14:27,519
first demonstrated the disproportionate

462
00:14:27,519 --> 00:14:29,279
performance impact where user-centric

463
00:14:29,279 --> 00:14:30,079
challenges

464
00:14:30,079 --> 00:14:32,240
can solve the app's business problem but

465
00:14:32,240 --> 00:14:33,440
also have the potential to

466
00:14:33,440 --> 00:14:34,959
disproportionately block users from

467
00:14:34,959 --> 00:14:37,600
lower socioeconomic tiers

468
00:14:37,600 --> 00:14:39,600
we then designed deployed and

469
00:14:39,600 --> 00:14:41,199
demonstrated the equitable nature of our

470
00:14:41,199 --> 00:14:42,399
system daredevil

471
00:14:42,399 --> 00:14:43,920
by empowering these challenges to

472
00:14:43,920 --> 00:14:45,920
function uniformly on a wide range of

473
00:14:45,920 --> 00:14:47,920
devices

474
00:14:47,920 --> 00:14:49,279
that's it from us if you have any

475
00:14:49,279 --> 00:14:51,040
questions please email your questions

476
00:14:51,040 --> 00:14:52,320
the email address is mentioned on the

477
00:14:52,320 --> 00:14:52,880
slide

478
00:14:52,880 --> 00:14:56,959
thank you for your attention

