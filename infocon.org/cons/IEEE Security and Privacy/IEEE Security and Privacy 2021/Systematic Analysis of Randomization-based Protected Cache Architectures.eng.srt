1
00:00:00,080 --> 00:00:02,159
hello and welcome to this talk about our

2
00:00:02,159 --> 00:00:04,000
paper systematic analysis of

3
00:00:04,000 --> 00:00:05,920
randomization based protected cache

4
00:00:05,920 --> 00:00:07,440
architectures

5
00:00:07,440 --> 00:00:09,360
my name is anton pirinal and i'll be

6
00:00:09,360 --> 00:00:11,360
presenting joint work with lucas guiner

7
00:00:11,360 --> 00:00:13,440
and daniel grouse from grad's university

8
00:00:13,440 --> 00:00:14,639
of technology

9
00:00:14,639 --> 00:00:16,000
as well as inhibited for bowed and

10
00:00:16,000 --> 00:00:19,359
myself from i make cossack at kuler

11
00:00:19,359 --> 00:00:21,199
now one of the reasons why this talk is

12
00:00:21,199 --> 00:00:23,119
the way it is is because of a curve

13
00:00:23,119 --> 00:00:26,160
like this and i'm not talking

14
00:00:26,160 --> 00:00:28,320
about the elephant in the room and i'm

15
00:00:28,320 --> 00:00:30,160
also not referring to a few other

16
00:00:30,160 --> 00:00:32,719
recent events but maybe when you know

17
00:00:32,719 --> 00:00:33,680
that there's actually

18
00:00:33,680 --> 00:00:35,920
two curves that they originate around

19
00:00:35,920 --> 00:00:36,960
the 60s

20
00:00:36,960 --> 00:00:38,640
and that the important bit is the gap

21
00:00:38,640 --> 00:00:40,480
between the curves then you might

22
00:00:40,480 --> 00:00:42,840
suspect that what's being depicted here

23
00:00:42,840 --> 00:00:44,399
is

24
00:00:44,399 --> 00:00:46,800
the performance gap between cpu and

25
00:00:46,800 --> 00:00:47,600
memory

26
00:00:47,600 --> 00:00:50,239
yes indeed to bridge this gap modern

27
00:00:50,239 --> 00:00:52,960
cpus are equipped with a cache hierarchy

28
00:00:52,960 --> 00:00:55,199
which makes programs run faster by

29
00:00:55,199 --> 00:00:57,280
avoiding many round trips to memory

30
00:00:57,280 --> 00:00:59,440
but it also endows them with the ability

31
00:00:59,440 --> 00:01:00,879
of spying on one another

32
00:01:00,879 --> 00:01:03,680
through a timing side channel one line

33
00:01:03,680 --> 00:01:05,519
of work that aims to tackle this problem

34
00:01:05,519 --> 00:01:08,159
is that of randomized caches now let's

35
00:01:08,159 --> 00:01:10,400
have a look at what exactly is being

36
00:01:10,400 --> 00:01:11,760
randomized

37
00:01:11,760 --> 00:01:14,000
nowadays caches are typically set

38
00:01:14,000 --> 00:01:15,200
associative

39
00:01:15,200 --> 00:01:16,720
meaning that they're organized as an

40
00:01:16,720 --> 00:01:20,159
array of cache lines along sets and ways

41
00:01:20,159 --> 00:01:22,159
typically the number of sets is a power

42
00:01:22,159 --> 00:01:23,520
of two

43
00:01:23,520 --> 00:01:25,759
each memory block can only be installed

44
00:01:25,759 --> 00:01:26,960
in one set

45
00:01:26,960 --> 00:01:29,439
and this set is chosen by slicing a

46
00:01:29,439 --> 00:01:31,119
portion of the memory address called the

47
00:01:31,119 --> 00:01:31,520
set

48
00:01:31,520 --> 00:01:34,640
index within the set the line can be

49
00:01:34,640 --> 00:01:36,400
installed in any of the ways

50
00:01:36,400 --> 00:01:38,400
and lines mapped to the same set are

51
00:01:38,400 --> 00:01:40,400
called congruent

52
00:01:40,400 --> 00:01:42,960
first generation randomized caches like

53
00:01:42,960 --> 00:01:44,960
caesar or tsc

54
00:01:44,960 --> 00:01:46,880
preserve the set associative structure

55
00:01:46,880 --> 00:01:48,240
of the cache

56
00:01:48,240 --> 00:01:50,880
and when an address a1 comes in the set

57
00:01:50,880 --> 00:01:53,040
index for this address is derived by a

58
00:01:53,040 --> 00:01:55,520
randomization mapping

59
00:01:55,520 --> 00:01:57,280
to avoid the mapping being learned over

60
00:01:57,280 --> 00:01:59,759
time it's equipped with a key

61
00:01:59,759 --> 00:02:01,759
which changes over time through a

62
00:02:01,759 --> 00:02:04,159
process called re-keying

63
00:02:04,159 --> 00:02:05,840
and when the key changes the mapping

64
00:02:05,840 --> 00:02:08,399
changes and the same address gets mapped

65
00:02:08,399 --> 00:02:10,560
to a different set

66
00:02:10,560 --> 00:02:12,879
unfortunately these designs are insecure

67
00:02:12,879 --> 00:02:14,800
in light of new advances in finding

68
00:02:14,800 --> 00:02:16,480
congruent addresses

69
00:02:16,480 --> 00:02:18,000
meaning that re-keying would have to be

70
00:02:18,000 --> 00:02:20,879
performed impractically often

71
00:02:20,879 --> 00:02:22,720
to overcome this problem two

72
00:02:22,720 --> 00:02:24,640
concurrently proposed designs add an

73
00:02:24,640 --> 00:02:28,160
extra layer of unpredictability caesar s

74
00:02:28,160 --> 00:02:30,080
divides cache sets in two or more

75
00:02:30,080 --> 00:02:31,360
partitions

76
00:02:31,360 --> 00:02:33,040
and adopts a different randomization

77
00:02:33,040 --> 00:02:35,599
mapping in each partition

78
00:02:35,599 --> 00:02:37,120
when an address is installed in the

79
00:02:37,120 --> 00:02:39,599
cache one of the partitions is randomly

80
00:02:39,599 --> 00:02:40,560
selected

81
00:02:40,560 --> 00:02:42,319
and the address is indexed in this

82
00:02:42,319 --> 00:02:44,319
partition according to the output of the

83
00:02:44,319 --> 00:02:46,000
mapping

84
00:02:46,000 --> 00:02:47,840
scatter cache operates in a similar

85
00:02:47,840 --> 00:02:50,000
fashion but maximizes the number of

86
00:02:50,000 --> 00:02:51,680
partitions by computing an

87
00:02:51,680 --> 00:02:55,200
independent index for every way

88
00:02:55,200 --> 00:02:57,599
prior analysis of caesar s and scatter

89
00:02:57,599 --> 00:02:59,120
cache claims to tolerate

90
00:02:59,120 --> 00:03:01,200
years or days of continuous attacks

91
00:03:01,200 --> 00:03:02,400
respectively

92
00:03:02,400 --> 00:03:04,159
before an attacker can construct a

93
00:03:04,159 --> 00:03:06,319
single useful eviction set

94
00:03:06,319 --> 00:03:08,480
and we'll get to what exactly that means

95
00:03:08,480 --> 00:03:10,080
later

96
00:03:10,080 --> 00:03:12,239
in our work we invalidate these claims

97
00:03:12,239 --> 00:03:14,319
by proposing a generic technique

98
00:03:14,319 --> 00:03:17,040
called prime prune probe to efficiently

99
00:03:17,040 --> 00:03:18,000
produce eviction

100
00:03:18,000 --> 00:03:21,280
sets in randomized caches

101
00:03:21,280 --> 00:03:23,280
the remainder of this talk is organized

102
00:03:23,280 --> 00:03:24,560
in three parts

103
00:03:24,560 --> 00:03:27,760
and at the end you'll know how to

104
00:03:27,760 --> 00:03:29,519
generalize traditional cache attack

105
00:03:29,519 --> 00:03:32,799
concepts to randomized caches

106
00:03:32,799 --> 00:03:35,120
how prime print probe works and how it

107
00:03:35,120 --> 00:03:37,360
maximizes the probability of catching

108
00:03:37,360 --> 00:03:39,440
victim cache activity

109
00:03:39,440 --> 00:03:41,519
and finally why the randomization

110
00:03:41,519 --> 00:03:42,560
mapping itself

111
00:03:42,560 --> 00:03:45,040
is of crucial importance to the security

112
00:03:45,040 --> 00:03:47,280
of the entire design

113
00:03:47,280 --> 00:03:49,680
let's start by defining the system along

114
00:03:49,680 --> 00:03:50,640
with some useful

115
00:03:50,640 --> 00:03:53,920
objectives for the attacker the core

116
00:03:53,920 --> 00:03:55,599
of the randomized cache is the

117
00:03:55,599 --> 00:03:57,120
randomization mapping

118
00:03:57,120 --> 00:03:58,879
which is a deterministic but random

119
00:03:58,879 --> 00:04:00,720
looking function that takes an

120
00:04:00,720 --> 00:04:03,599
input address and produces a randomized

121
00:04:03,599 --> 00:04:05,360
output to index the address

122
00:04:05,360 --> 00:04:08,400
into the cache now it actually produces

123
00:04:08,400 --> 00:04:09,280
not one but

124
00:04:09,280 --> 00:04:12,480
p outputs one for each partition

125
00:04:12,480 --> 00:04:14,159
and if a partition contains more than

126
00:04:14,159 --> 00:04:16,160
one way the replacement policy

127
00:04:16,160 --> 00:04:18,079
determines which line in the set is to

128
00:04:18,079 --> 00:04:19,759
be replaced

129
00:04:19,759 --> 00:04:22,960
in this work we consider random and lru

130
00:04:22,960 --> 00:04:25,600
replacement policies

131
00:04:25,600 --> 00:04:27,520
the unpredictability of the mapping is

132
00:04:27,520 --> 00:04:29,840
provided by a secret input k

133
00:04:29,840 --> 00:04:31,840
which can be changed at runtime through

134
00:04:31,840 --> 00:04:33,840
a process called re-keying

135
00:04:33,840 --> 00:04:37,280
when a specific condition has been met

136
00:04:37,280 --> 00:04:39,680
importantly some designs also feature a

137
00:04:39,680 --> 00:04:42,800
security domain input to the mapping s

138
00:04:42,800 --> 00:04:44,639
which ensures that different security

139
00:04:44,639 --> 00:04:47,120
domains experience a different mapping

140
00:04:47,120 --> 00:04:49,840
even when indexing the same address as

141
00:04:49,840 --> 00:04:51,840
in the case of shared memory

142
00:04:51,840 --> 00:04:53,759
duplicating shared memory in the cache

143
00:04:53,759 --> 00:04:55,919
like this eliminates shared memory

144
00:04:55,919 --> 00:04:59,840
attacks like flush and reload by design

145
00:04:59,840 --> 00:05:02,160
we first study this model generically

146
00:05:02,160 --> 00:05:04,160
before instantiating it to specific

147
00:05:04,160 --> 00:05:05,520
designs like caesar s

148
00:05:05,520 --> 00:05:08,639
and scatter cache our focus will lie on

149
00:05:08,639 --> 00:05:10,320
partitioned caches

150
00:05:10,320 --> 00:05:12,240
with attacker and victim in different

151
00:05:12,240 --> 00:05:13,680
security domains

152
00:05:13,680 --> 00:05:16,000
which is the strongest operating mode in

153
00:05:16,000 --> 00:05:18,479
this model

154
00:05:18,479 --> 00:05:21,919
now what can an attacker do in this case

155
00:05:21,919 --> 00:05:24,240
well the cache is still shared so an

156
00:05:24,240 --> 00:05:26,000
attacker can still measure contention

157
00:05:26,000 --> 00:05:26,800
with the victim

158
00:05:26,800 --> 00:05:30,479
for cash resources in traditional caches

159
00:05:30,479 --> 00:05:32,160
an attacker typically doesn't monitor

160
00:05:32,160 --> 00:05:33,360
the whole cache

161
00:05:33,360 --> 00:05:35,120
but narrows it down to a smaller

162
00:05:35,120 --> 00:05:36,479
contention domain

163
00:05:36,479 --> 00:05:39,680
like a set to do this

164
00:05:39,680 --> 00:05:42,000
she first finds an eviction set

165
00:05:42,000 --> 00:05:42,800
containing

166
00:05:42,800 --> 00:05:45,360
addresses mapped to the same cash set

167
00:05:45,360 --> 00:05:46,960
and by measuring the time it takes to

168
00:05:46,960 --> 00:05:49,120
access the elements of this eviction set

169
00:05:49,120 --> 00:05:51,199
an attacker can learn whether the victim

170
00:05:51,199 --> 00:05:55,039
has also accessed a congruent address

171
00:05:55,039 --> 00:05:57,120
let's see if we can transpose this

172
00:05:57,120 --> 00:05:58,880
strategy in any way to

173
00:05:58,880 --> 00:06:02,240
randomized caches

174
00:06:02,639 --> 00:06:04,960
consider a victim address x on which the

175
00:06:04,960 --> 00:06:07,199
attacker wants to spy

176
00:06:07,199 --> 00:06:09,280
she could try to find addresses that are

177
00:06:09,280 --> 00:06:10,639
congruent with x in

178
00:06:10,639 --> 00:06:13,199
all partitions simultaneously but the

179
00:06:13,199 --> 00:06:14,880
probability of this happening plummets

180
00:06:14,880 --> 00:06:15,759
exponentially

181
00:06:15,759 --> 00:06:18,840
making it completely infeasible

182
00:06:18,840 --> 00:06:22,080
instead vienna at al generalized

183
00:06:22,080 --> 00:06:22,720
eviction

184
00:06:22,720 --> 00:06:25,759
using partially congruent addresses

185
00:06:25,759 --> 00:06:27,919
which collide with the target address x

186
00:06:27,919 --> 00:06:30,000
in one partition only

187
00:06:30,000 --> 00:06:32,880
so in this example g1 contains addresses

188
00:06:32,880 --> 00:06:34,080
that collide with the target

189
00:06:34,080 --> 00:06:36,720
in the blue partition g2 for the orange

190
00:06:36,720 --> 00:06:38,560
and g3 for the brown

191
00:06:38,560 --> 00:06:40,720
and this means that if x is currently

192
00:06:40,720 --> 00:06:42,479
cached in the blue partition

193
00:06:42,479 --> 00:06:44,400
the only addresses that have a shot at

194
00:06:44,400 --> 00:06:47,600
evicting it will come from g1

195
00:06:47,600 --> 00:06:50,880
this is generalized eviction generalized

196
00:06:50,880 --> 00:06:51,599
eviction

197
00:06:51,599 --> 00:06:54,960
is probabilistic in the paper

198
00:06:54,960 --> 00:06:57,120
we derive the success probability as

199
00:06:57,120 --> 00:06:59,680
function of the randomized cash instance

200
00:06:59,680 --> 00:07:01,919
but for this talk suffice it to say that

201
00:07:01,919 --> 00:07:03,599
generalized eviction can be made

202
00:07:03,599 --> 00:07:04,880
reliable enough

203
00:07:04,880 --> 00:07:08,560
by sizing the set appropriately

204
00:07:08,560 --> 00:07:10,240
in the second part of this talk we

205
00:07:10,240 --> 00:07:11,680
explore how to collect

206
00:07:11,680 --> 00:07:14,720
such partially congruent addresses

207
00:07:14,720 --> 00:07:17,039
as a baseline an attacker could modify

208
00:07:17,039 --> 00:07:19,199
prime and probe from traditional caches

209
00:07:19,199 --> 00:07:22,400
and prime one guess address wait for the

210
00:07:22,400 --> 00:07:24,160
victim access to a target x

211
00:07:24,160 --> 00:07:27,440
and then probe it if she's lucky then

212
00:07:27,440 --> 00:07:29,360
x will evict the prime guess and she

213
00:07:29,360 --> 00:07:30,960
will observe this through a high

214
00:07:30,960 --> 00:07:34,639
excess latency if she's unlucky

215
00:07:34,639 --> 00:07:37,199
then the guess is no good and if she's

216
00:07:37,199 --> 00:07:38,800
very unlucky then the guess

217
00:07:38,800 --> 00:07:41,280
actually is partially congruent with x

218
00:07:41,280 --> 00:07:43,199
but x is assigned to another partition

219
00:07:43,199 --> 00:07:46,240
in which it's not congruent this

220
00:07:46,240 --> 00:07:48,080
approach has several issues

221
00:07:48,080 --> 00:07:51,039
the first being that it's very slow for

222
00:07:51,039 --> 00:07:53,360
random replacement every time the victim

223
00:07:53,360 --> 00:07:54,160
axis occurs

224
00:07:54,160 --> 00:07:55,680
the attacker is only lucky with

225
00:07:55,680 --> 00:07:57,520
probability 1 over n

226
00:07:57,520 --> 00:07:59,680
where n is the total number of lines in

227
00:07:59,680 --> 00:08:01,039
the cache

228
00:08:01,039 --> 00:08:03,919
the second issue is that in the worst

229
00:08:03,919 --> 00:08:05,759
case the probability of catching the

230
00:08:05,759 --> 00:08:07,120
victim event

231
00:08:07,120 --> 00:08:10,319
or being lucky is zero

232
00:08:10,319 --> 00:08:13,199
for instance for lru replacement even if

233
00:08:13,199 --> 00:08:14,879
the victim access is mapped to the same

234
00:08:14,879 --> 00:08:15,280
set

235
00:08:15,280 --> 00:08:17,360
in the same partition as the guess the

236
00:08:17,360 --> 00:08:20,000
attacker will not observe it

237
00:08:20,000 --> 00:08:22,000
so we would like to prime more than one

238
00:08:22,000 --> 00:08:23,440
guess every time

239
00:08:23,440 --> 00:08:26,800
let's say we're priming k gasses

240
00:08:26,800 --> 00:08:29,360
at first sight this is also flawed

241
00:08:29,360 --> 00:08:30,240
because as k

242
00:08:30,240 --> 00:08:33,360
grows the attacker's guesses will

243
00:08:33,360 --> 00:08:36,399
self-evict and an attacker probe cannot

244
00:08:36,399 --> 00:08:38,320
distinguish whether a cache miss truly

245
00:08:38,320 --> 00:08:40,240
results from a victim axis

246
00:08:40,240 --> 00:08:42,240
or spuriously because of this

247
00:08:42,240 --> 00:08:44,000
self-eviction

248
00:08:44,000 --> 00:08:45,839
to eliminate this source of false

249
00:08:45,839 --> 00:08:48,160
positives we propose the concept of

250
00:08:48,160 --> 00:08:49,200
pruning

251
00:08:49,200 --> 00:08:51,360
giving rise to the prime prune probe

252
00:08:51,360 --> 00:08:53,040
technique

253
00:08:53,040 --> 00:08:55,200
after priming the cache the attacker

254
00:08:55,200 --> 00:08:57,440
keeps accessing the prime lines

255
00:08:57,440 --> 00:08:59,440
until they no longer exhibit

256
00:08:59,440 --> 00:09:01,120
self-eviction

257
00:09:01,120 --> 00:09:03,200
and this keeps the guesses that were not

258
00:09:03,200 --> 00:09:05,279
self-evicted in place

259
00:09:05,279 --> 00:09:07,360
while the self-evicted addresses are

260
00:09:07,360 --> 00:09:08,880
forced to be installed again

261
00:09:08,880 --> 00:09:12,240
at a potentially different location

262
00:09:12,240 --> 00:09:14,959
after some time the cache state settles

263
00:09:14,959 --> 00:09:15,360
and

264
00:09:15,360 --> 00:09:17,839
if it doesn't pruning can become more

265
00:09:17,839 --> 00:09:19,920
aggressive and remove the self-defeated

266
00:09:19,920 --> 00:09:20,959
lines

267
00:09:20,959 --> 00:09:23,120
and after the prune step the attacker

268
00:09:23,120 --> 00:09:24,959
occupies

269
00:09:24,959 --> 00:09:27,839
k prime say lines in the cache and the

270
00:09:27,839 --> 00:09:30,399
probability of catching the victim axis

271
00:09:30,399 --> 00:09:33,680
is much higher than before prime probe

272
00:09:33,680 --> 00:09:35,680
continues in iterations

273
00:09:35,680 --> 00:09:37,600
starting from an empty set and

274
00:09:37,600 --> 00:09:39,920
incrementally adding addresses that have

275
00:09:39,920 --> 00:09:41,519
demonstrated contention

276
00:09:41,519 --> 00:09:44,160
with this victim address x and this

277
00:09:44,160 --> 00:09:45,680
continues until enough

278
00:09:45,680 --> 00:09:47,519
partially congruent addresses have been

279
00:09:47,519 --> 00:09:49,200
obtained

280
00:09:49,200 --> 00:09:51,360
the paper features a quite extensive

281
00:09:51,360 --> 00:09:53,519
statistical and experimental analysis of

282
00:09:53,519 --> 00:09:55,040
this prime prune probe

283
00:09:55,040 --> 00:09:56,959
but in the interest of time we state the

284
00:09:56,959 --> 00:09:58,880
main takeaways and refer to the paper

285
00:09:58,880 --> 00:10:01,040
for details

286
00:10:01,040 --> 00:10:03,760
for one the target line x can already be

287
00:10:03,760 --> 00:10:04,560
cached

288
00:10:04,560 --> 00:10:06,480
which complicates catching further

289
00:10:06,480 --> 00:10:08,079
accesses to it

290
00:10:08,079 --> 00:10:09,600
we explore whether the attacker should

291
00:10:09,600 --> 00:10:11,519
expend effort to evict it first

292
00:10:11,519 --> 00:10:13,839
or to just continue prime print probe as

293
00:10:13,839 --> 00:10:15,279
usual

294
00:10:15,279 --> 00:10:17,440
we also discuss optimizations to prime

295
00:10:17,440 --> 00:10:19,360
print probe and in particular

296
00:10:19,360 --> 00:10:21,200
how to accelerate the search for new

297
00:10:21,200 --> 00:10:23,120
addresses using the ones that are

298
00:10:23,120 --> 00:10:25,120
already found

299
00:10:25,120 --> 00:10:27,279
we also cover how the number of

300
00:10:27,279 --> 00:10:28,800
invocations of the victim

301
00:10:28,800 --> 00:10:30,720
can be significantly reduced by

302
00:10:30,720 --> 00:10:33,760
pre-selecting candidate guesses

303
00:10:33,760 --> 00:10:35,680
and finally as a data point for an

304
00:10:35,680 --> 00:10:36,880
end-to-end attack

305
00:10:36,880 --> 00:10:38,880
we mount the well-known first-round

306
00:10:38,880 --> 00:10:41,279
attack on ast tables

307
00:10:41,279 --> 00:10:43,120
which is a challenging target in a

308
00:10:43,120 --> 00:10:44,320
randomized cache

309
00:10:44,320 --> 00:10:46,320
as there are many sensitive cache lines

310
00:10:46,320 --> 00:10:47,680
that should be distinguished from one

311
00:10:47,680 --> 00:10:48,320
another

312
00:10:48,320 --> 00:10:50,560
and they each encode only statistical

313
00:10:50,560 --> 00:10:51,920
information

314
00:10:51,920 --> 00:10:54,160
to overcome this challenge we rely on

315
00:10:54,160 --> 00:10:55,760
specially crafted inputs

316
00:10:55,760 --> 00:10:57,839
and recover the half keys in the order

317
00:10:57,839 --> 00:10:59,440
of minutes

318
00:10:59,440 --> 00:11:01,440
to test the efficiency of prime prune

319
00:11:01,440 --> 00:11:03,040
probe we consider an

320
00:11:03,040 --> 00:11:05,760
8 megabyte 16 way set associative cache

321
00:11:05,760 --> 00:11:07,040
as an example

322
00:11:07,040 --> 00:11:08,800
which is a representative instance for

323
00:11:08,800 --> 00:11:11,120
modern last level caches

324
00:11:11,120 --> 00:11:13,920
the horizontal axis covers the instances

325
00:11:13,920 --> 00:11:14,959
of our model

326
00:11:14,959 --> 00:11:16,800
and the y-axis represents the total

327
00:11:16,800 --> 00:11:19,120
number of cache accesses required in log

328
00:11:19,120 --> 00:11:19,920
scale

329
00:11:19,920 --> 00:11:22,079
where n is the total number of lines in

330
00:11:22,079 --> 00:11:23,120
the cache

331
00:11:23,120 --> 00:11:25,360
the total number of cache accesses is

332
00:11:25,360 --> 00:11:27,279
estimated as the number of accesses by

333
00:11:27,279 --> 00:11:28,160
the attacker

334
00:11:28,160 --> 00:11:30,240
as well as those by a mostly sized

335
00:11:30,240 --> 00:11:32,320
victim program which we assume performs

336
00:11:32,320 --> 00:11:34,160
around the thousand accesses

337
00:11:34,160 --> 00:11:36,160
for caesar s we can see that three

338
00:11:36,160 --> 00:11:38,320
instances are proposed that re-key

339
00:11:38,320 --> 00:11:39,440
respectively

340
00:11:39,440 --> 00:11:41,519
every hundred and two hundred n or a

341
00:11:41,519 --> 00:11:43,920
thousand n cash accesses

342
00:11:43,920 --> 00:11:46,399
the thousand and instance which is the

343
00:11:46,399 --> 00:11:48,000
least conservative one

344
00:11:48,000 --> 00:11:50,240
claims a resistance of sixty eight years

345
00:11:50,240 --> 00:11:51,440
of continuous attacks

346
00:11:51,440 --> 00:11:54,000
based on full congruence but with prime

347
00:11:54,000 --> 00:11:55,200
print probe we can find

348
00:11:55,200 --> 00:11:57,680
high quality generalized eviction sets

349
00:11:57,680 --> 00:11:58,560
well within

350
00:11:58,560 --> 00:12:01,279
the re-king period if an attacker can

351
00:12:01,279 --> 00:12:03,200
live with less accurate sets than ninety

352
00:12:03,200 --> 00:12:06,160
percent or fifty percent eviction rates

353
00:12:06,160 --> 00:12:07,920
the number of accesses for prime print

354
00:12:07,920 --> 00:12:10,320
probe drops even further

355
00:12:10,320 --> 00:12:12,000
scatter cache does not propose a

356
00:12:12,000 --> 00:12:14,000
specific re-keying period

357
00:12:14,000 --> 00:12:16,079
but prime print probe outperforms their

358
00:12:16,079 --> 00:12:19,440
analysis by a few orders of magnitude

359
00:12:19,440 --> 00:12:21,680
note that caesar s and scatter cache can

360
00:12:21,680 --> 00:12:23,839
still be made secure by selecting a

361
00:12:23,839 --> 00:12:26,000
conservative raking period

362
00:12:26,000 --> 00:12:28,000
but prime print probe significantly

363
00:12:28,000 --> 00:12:30,720
reduces the security margin

364
00:12:30,720 --> 00:12:32,720
the final part of this talk explores the

365
00:12:32,720 --> 00:12:34,639
randomization mapping itself

366
00:12:34,639 --> 00:12:36,800
for which some designs have proposed a

367
00:12:36,800 --> 00:12:39,360
custom function for low latency

368
00:12:39,360 --> 00:12:41,200
i will now illustrate the pitfalls of

369
00:12:41,200 --> 00:12:43,040
this approach through a case study of

370
00:12:43,040 --> 00:12:44,480
caesar and caesar s

371
00:12:44,480 --> 00:12:47,839
ultimately leading to a full break

372
00:12:47,839 --> 00:12:49,760
the mapping in question is a four round

373
00:12:49,760 --> 00:12:51,040
feistel network

374
00:12:51,040 --> 00:12:53,040
where the round function f is composed

375
00:12:53,040 --> 00:12:55,680
of source and bitwise permutations

376
00:12:55,680 --> 00:12:58,079
which is very hardware friendly but also

377
00:12:58,079 --> 00:12:59,360
linear

378
00:12:59,360 --> 00:13:01,360
and if the round function is linear then

379
00:13:01,360 --> 00:13:03,440
the whole construction is linear

380
00:13:03,440 --> 00:13:05,279
which makes it especially vulnerable to

381
00:13:05,279 --> 00:13:08,399
the propagation of differences

382
00:13:08,399 --> 00:13:10,000
so if we take the difference between two

383
00:13:10,000 --> 00:13:11,519
inputs and define

384
00:13:11,519 --> 00:13:13,680
delta functions that describe how these

385
00:13:13,680 --> 00:13:15,440
differences propagate through the run

386
00:13:15,440 --> 00:13:16,639
function

387
00:13:16,639 --> 00:13:18,079
we can propagate them all the way to the

388
00:13:18,079 --> 00:13:19,920
output leading to an expression which we

389
00:13:19,920 --> 00:13:22,480
call the shortcut equation

390
00:13:22,480 --> 00:13:24,240
and this equation permits to find

391
00:13:24,240 --> 00:13:26,880
eviction sets without any accesses

392
00:13:26,880 --> 00:13:28,880
because well when are two addresses

393
00:13:28,880 --> 00:13:30,000
congruent

394
00:13:30,000 --> 00:13:32,000
when they have the same output index

395
00:13:32,000 --> 00:13:34,079
bits or in other words when the

396
00:13:34,079 --> 00:13:36,959
difference of these bits is zero with

397
00:13:36,959 --> 00:13:38,800
this equation we know which differences

398
00:13:38,800 --> 00:13:40,160
to apply to the input

399
00:13:40,160 --> 00:13:43,920
to obtain a zero output difference

400
00:13:43,920 --> 00:13:46,320
importantly this equation is independent

401
00:13:46,320 --> 00:13:47,199
of the key

402
00:13:47,199 --> 00:13:48,560
which means that evictions that's

403
00:13:48,560 --> 00:13:50,639
constructed in this way are immune to

404
00:13:50,639 --> 00:13:52,240
re-keying

405
00:13:52,240 --> 00:13:54,160
the equation is also independent of the

406
00:13:54,160 --> 00:13:56,240
input itself it only depends on the

407
00:13:56,240 --> 00:13:57,839
input differences

408
00:13:57,839 --> 00:14:00,480
so an eviction set for one target can be

409
00:14:00,480 --> 00:14:02,320
trivially transposed to an eviction set

410
00:14:02,320 --> 00:14:04,320
for any target

411
00:14:04,320 --> 00:14:07,279
and finally in cesar s each partition

412
00:14:07,279 --> 00:14:08,639
uses the same mapping

413
00:14:08,639 --> 00:14:11,519
but with a different key but due to our

414
00:14:11,519 --> 00:14:12,959
key independence

415
00:14:12,959 --> 00:14:14,720
actually addresses congruent in one

416
00:14:14,720 --> 00:14:16,240
partition are congruent in all

417
00:14:16,240 --> 00:14:17,360
partitions

418
00:14:17,360 --> 00:14:19,440
and we've moved right back from partial

419
00:14:19,440 --> 00:14:20,639
congruence to

420
00:14:20,639 --> 00:14:23,680
full congruence all of this goes to show

421
00:14:23,680 --> 00:14:25,199
that even though the randomization

422
00:14:25,199 --> 00:14:26,720
mapping is mostly hidden from the

423
00:14:26,720 --> 00:14:27,519
attacker

424
00:14:27,519 --> 00:14:30,000
its instantiation is crucial as

425
00:14:30,000 --> 00:14:32,000
otherwise the security properties of the

426
00:14:32,000 --> 00:14:34,880
design can quickly collapse

427
00:14:34,880 --> 00:14:37,199
to conclude we proposed prime prime

428
00:14:37,199 --> 00:14:39,440
probe as a generic technique to find

429
00:14:39,440 --> 00:14:42,079
probabilistic but reliable eviction sets

430
00:14:42,079 --> 00:14:44,240
in the presence of randomness

431
00:14:44,240 --> 00:14:46,000
we also showed an end-to-end attack on

432
00:14:46,000 --> 00:14:48,880
aes and highlighted the vital importance

433
00:14:48,880 --> 00:14:49,839
of a proper

434
00:14:49,839 --> 00:14:52,720
randomization mapping thank you for your

435
00:14:52,720 --> 00:14:53,920
interest in our work

436
00:14:53,920 --> 00:14:56,000
and for more information please check

437
00:14:56,000 --> 00:14:58,440
out our paper that appears at s p

438
00:14:58,440 --> 00:15:01,440
2021

