1
00:00:04,319 --> 00:00:05,440
hello everyone

2
00:00:05,440 --> 00:00:08,240
in this talk we will be presenting diane

3
00:00:08,240 --> 00:00:10,160
which is a facing technique for iot

4
00:00:10,160 --> 00:00:10,800
devices

5
00:00:10,800 --> 00:00:12,799
that works by identifying fuzzing

6
00:00:12,799 --> 00:00:14,320
triggers in companion

7
00:00:14,320 --> 00:00:16,640
apps so this is a joint work from

8
00:00:16,640 --> 00:00:17,680
researchers

9
00:00:17,680 --> 00:00:19,359
from university of california santa

10
00:00:19,359 --> 00:00:21,600
barbara univ university of 20

11
00:00:21,600 --> 00:00:23,760
and purdue university i am arvind

12
00:00:23,760 --> 00:00:25,920
mercury i will be presenting

13
00:00:25,920 --> 00:00:29,119
our work so

14
00:00:29,119 --> 00:00:32,238
iot devices are inherently hard to fuzz

15
00:00:32,238 --> 00:00:34,880
using traditional methods for instance

16
00:00:34,880 --> 00:00:36,000
using grey box

17
00:00:36,000 --> 00:00:38,800
techniques is hard because it requires

18
00:00:38,800 --> 00:00:39,760
access to the first

19
00:00:39,760 --> 00:00:42,239
programs which is hard for iot devices

20
00:00:42,239 --> 00:00:44,719
because they're usually closed at source

21
00:00:44,719 --> 00:00:46,559
and it's hard to get firmware from these

22
00:00:46,559 --> 00:00:48,640
devices similarly

23
00:00:48,640 --> 00:00:50,320
black box techniques such as network

24
00:00:50,320 --> 00:00:52,239
fuzzers although they

25
00:00:52,239 --> 00:00:54,160
help in generating data to these iot

26
00:00:54,160 --> 00:00:57,039
devices but they fail to generate data

27
00:00:57,039 --> 00:01:00,640
in the format expected by these devices

28
00:01:00,640 --> 00:01:03,520
and finally emulation of the firmware of

29
00:01:03,520 --> 00:01:05,199
these iot devices is still an

30
00:01:05,199 --> 00:01:09,760
open problem however a recently

31
00:01:09,760 --> 00:01:12,240
proposed idea iot fuzzer makes a novel

32
00:01:12,240 --> 00:01:13,200
observation that

33
00:01:13,200 --> 00:01:15,920
most of these iot devices come with the

34
00:01:15,920 --> 00:01:17,119
companion app

35
00:01:17,119 --> 00:01:19,520
that helps in communicating with these

36
00:01:19,520 --> 00:01:20,560
devices

37
00:01:20,560 --> 00:01:23,680
okay so these companion apps

38
00:01:23,680 --> 00:01:25,680
have usually have a ui that is exposed

39
00:01:25,680 --> 00:01:28,640
to users when users use this ui

40
00:01:28,640 --> 00:01:31,200
to modify certain attributes of the iot

41
00:01:31,200 --> 00:01:31,840
device

42
00:01:31,840 --> 00:01:34,960
or to control the iot device and these

43
00:01:34,960 --> 00:01:38,159
ui actions gets translated

44
00:01:38,159 --> 00:01:41,680
to messages which

45
00:01:41,680 --> 00:01:44,799
iot which the companion apps packs into

46
00:01:44,799 --> 00:01:45,600
the format

47
00:01:45,600 --> 00:01:47,759
as expected by the id device and then

48
00:01:47,759 --> 00:01:49,840
eventually the message

49
00:01:49,840 --> 00:01:52,399
in this required format will be sent to

50
00:01:52,399 --> 00:01:53,759
the iot device

51
00:01:53,759 --> 00:01:57,600
so based on this observation iot fuzzer

52
00:01:57,600 --> 00:02:00,799
finds ui elements that generate network

53
00:02:00,799 --> 00:02:01,680
traffic

54
00:02:01,680 --> 00:02:03,439
and then it finds the functions that

55
00:02:03,439 --> 00:02:05,680
retrieve data from these ui elements

56
00:02:05,680 --> 00:02:08,639
finally these identified functions will

57
00:02:08,639 --> 00:02:09,520
be first

58
00:02:09,520 --> 00:02:12,239
by modifying the arguments that these

59
00:02:12,239 --> 00:02:14,000
functions

60
00:02:14,000 --> 00:02:17,440
accept so we call this method ui level

61
00:02:17,440 --> 00:02:18,160
fuzzing

62
00:02:18,160 --> 00:02:20,160
where the fuzzing is driven by

63
00:02:20,160 --> 00:02:21,200
identifying

64
00:02:21,200 --> 00:02:24,400
methods that take data directly from the

65
00:02:24,400 --> 00:02:26,879
ui elements

66
00:02:26,879 --> 00:02:28,800
but if we look at companion apps

67
00:02:28,800 --> 00:02:29,920
companion apps

68
00:02:29,920 --> 00:02:32,080
usually have two phases the first phase

69
00:02:32,080 --> 00:02:34,000
is input sanitization

70
00:02:34,000 --> 00:02:37,519
where they sanitize all the inputs that

71
00:02:37,519 --> 00:02:39,840
app user interface provides in order to

72
00:02:39,840 --> 00:02:41,680
drop any invalid inputs

73
00:02:41,680 --> 00:02:44,000
and finally all the valid inputs will be

74
00:02:44,000 --> 00:02:45,599
packed into the format

75
00:02:45,599 --> 00:02:47,519
expected by the iot device by the

76
00:02:47,519 --> 00:02:50,480
network serialization component

77
00:02:50,480 --> 00:02:53,840
ui level fuzzing tries to first the iot

78
00:02:53,840 --> 00:02:54,560
device

79
00:02:54,560 --> 00:02:57,280
by looking at the beginning of the app

80
00:02:57,280 --> 00:02:57,680
by

81
00:02:57,680 --> 00:03:00,560
looking at the layer which directly

82
00:03:00,560 --> 00:03:01,760
consumes

83
00:03:01,760 --> 00:03:04,879
the data from the ui elements and the

84
00:03:04,879 --> 00:03:06,400
network fuzzing works at the other

85
00:03:06,400 --> 00:03:07,200
extreme

86
00:03:07,200 --> 00:03:09,920
where it directly sends data to the iot

87
00:03:09,920 --> 00:03:11,920
device

88
00:03:11,920 --> 00:03:14,400
but what we want is to first at the

89
00:03:14,400 --> 00:03:15,360
sweet spot

90
00:03:15,360 --> 00:03:19,519
because ui level fuzzing although

91
00:03:19,519 --> 00:03:23,599
it generates well formatted input it is

92
00:03:23,599 --> 00:03:26,480
limited by the input sanitization within

93
00:03:26,480 --> 00:03:28,000
the apps code

94
00:03:28,000 --> 00:03:30,480
on the other hand network level fuzzing

95
00:03:30,480 --> 00:03:32,400
although it has no constraints on the

96
00:03:32,400 --> 00:03:33,840
input that is

97
00:03:33,840 --> 00:03:36,080
provided to the iot device but it fails

98
00:03:36,080 --> 00:03:36,959
to generate

99
00:03:36,959 --> 00:03:40,159
data in the required format ideally what

100
00:03:40,159 --> 00:03:41,680
we want

101
00:03:41,680 --> 00:03:44,480
is an ability to generate data in the

102
00:03:44,480 --> 00:03:45,519
required format

103
00:03:45,519 --> 00:03:47,680
at the same time we should not be

104
00:03:47,680 --> 00:03:50,159
limited by the sanitization routines

105
00:03:50,159 --> 00:03:52,640
in the companion apps this is the basic

106
00:03:52,640 --> 00:03:54,480
idea of ban

107
00:03:54,480 --> 00:03:58,000
let's see how dan works so dan uses

108
00:03:58,000 --> 00:03:59,200
bottom-up approach

109
00:03:59,200 --> 00:04:02,319
it has four phases in the first phase we

110
00:04:02,319 --> 00:04:02,879
find

111
00:04:02,879 --> 00:04:04,959
the functions that send messages to

112
00:04:04,959 --> 00:04:06,400
these iot devices

113
00:04:06,400 --> 00:04:08,720
we call these methods send message

114
00:04:08,720 --> 00:04:10,319
methods

115
00:04:10,319 --> 00:04:12,159
and then we find the functions that

116
00:04:12,159 --> 00:04:15,280
transform the data accepted by these

117
00:04:15,280 --> 00:04:17,199
send message functions we call these

118
00:04:17,199 --> 00:04:18,399
methods that are

119
00:04:18,399 --> 00:04:21,440
transforming methods and then the

120
00:04:21,440 --> 00:04:22,880
dominator of

121
00:04:22,880 --> 00:04:24,720
in denominator of these data

122
00:04:24,720 --> 00:04:26,000
transforming methods

123
00:04:26,000 --> 00:04:28,160
we call them fuzzing triggers which will

124
00:04:28,160 --> 00:04:30,400
be first

125
00:04:30,400 --> 00:04:33,680
and which enables us to generate

126
00:04:33,680 --> 00:04:37,280
properly formatted data on the same

127
00:04:37,280 --> 00:04:41,520
and also input that is not constrained

128
00:04:41,520 --> 00:04:44,080
let's see how each of our phases work

129
00:04:44,080 --> 00:04:44,960
the first phase

130
00:04:44,960 --> 00:04:48,000
is identifying send message functions

131
00:04:48,000 --> 00:04:50,800
our method is based on two intuitions

132
00:04:50,800 --> 00:04:52,080
send message functions

133
00:04:52,080 --> 00:04:54,720
are usually border functions that sit

134
00:04:54,720 --> 00:04:56,560
between the apps code

135
00:04:56,560 --> 00:04:59,440
and they interact with java framework

136
00:04:59,440 --> 00:05:00,000
methods

137
00:05:00,000 --> 00:05:02,800
for instance the code shown on the slide

138
00:05:02,800 --> 00:05:04,000
is a border function

139
00:05:04,000 --> 00:05:06,479
because it directly interacts with the

140
00:05:06,479 --> 00:05:08,000
output stream dot write

141
00:05:08,000 --> 00:05:10,960
which is a method in java your package

142
00:05:10,960 --> 00:05:12,639
and another intuition is that

143
00:05:12,639 --> 00:05:14,400
these send message functions when

144
00:05:14,400 --> 00:05:17,600
invoked usually generate network traffic

145
00:05:17,600 --> 00:05:19,440
based on these two intuitions we develop

146
00:05:19,440 --> 00:05:20,639
a method

147
00:05:20,639 --> 00:05:22,160
using a combination of static and

148
00:05:22,160 --> 00:05:24,400
dynamic analysis first

149
00:05:24,400 --> 00:05:26,720
given a companion app we use static

150
00:05:26,720 --> 00:05:27,440
analysis

151
00:05:27,440 --> 00:05:30,000
to identify all the border functions

152
00:05:30,000 --> 00:05:31,680
basically these are the functions

153
00:05:31,680 --> 00:05:34,400
that invoke jni or android network

154
00:05:34,400 --> 00:05:35,840
related functions

155
00:05:35,840 --> 00:05:38,000
once these functions are identified we

156
00:05:38,000 --> 00:05:41,199
mark them as send message candidates

157
00:05:41,199 --> 00:05:43,199
and then we dynamically hook each of

158
00:05:43,199 --> 00:05:44,880
these send message candidates

159
00:05:44,880 --> 00:05:48,000
we let the user use the app to

160
00:05:48,000 --> 00:05:48,880
communicate

161
00:05:48,880 --> 00:05:52,000
with the iot device and then for each of

162
00:05:52,000 --> 00:05:53,759
these send message candidates

163
00:05:53,759 --> 00:05:56,960
we record the time delta between the app

164
00:05:56,960 --> 00:05:57,840
indication

165
00:05:57,840 --> 00:06:00,960
and the time at which a network

166
00:06:00,960 --> 00:06:04,880
message is sent okay and we repeat this

167
00:06:04,880 --> 00:06:06,960
for 10 times for each of these send

168
00:06:06,960 --> 00:06:08,639
message candidates

169
00:06:08,639 --> 00:06:10,400
then we compute the mean standard

170
00:06:10,400 --> 00:06:12,080
deviation and mode for each of our

171
00:06:12,080 --> 00:06:13,280
measurements

172
00:06:13,280 --> 00:06:15,600
finally we use k means clustering to

173
00:06:15,600 --> 00:06:17,039
cluster these methods

174
00:06:17,039 --> 00:06:20,479
based on the mean that we computed

175
00:06:20,479 --> 00:06:24,319
and at the end we take the cluster

176
00:06:24,319 --> 00:06:26,639
that has the minimum mean and all the

177
00:06:26,639 --> 00:06:27,520
functions

178
00:06:27,520 --> 00:06:30,080
within the cluster will be considered as

179
00:06:30,080 --> 00:06:32,880
send message functions

180
00:06:32,880 --> 00:06:34,639
the next phase is identifying data

181
00:06:34,639 --> 00:06:36,479
transforming functions

182
00:06:36,479 --> 00:06:39,680
here to remind these

183
00:06:39,680 --> 00:06:41,280
these are the functions that transform

184
00:06:41,280 --> 00:06:42,880
user data

185
00:06:42,880 --> 00:06:45,520
in in the format accepted by the iot

186
00:06:45,520 --> 00:06:47,759
device

187
00:06:47,759 --> 00:06:49,680
and an observation of these data

188
00:06:49,680 --> 00:06:51,280
transforming functions is that

189
00:06:51,280 --> 00:06:53,039
these data transforming functions

190
00:06:53,039 --> 00:06:55,680
usually increase the entropy of the data

191
00:06:55,680 --> 00:06:58,960
because they do pack the input data

192
00:06:58,960 --> 00:07:01,199
so they necessarily increase the entropy

193
00:07:01,199 --> 00:07:03,360
of the data

194
00:07:03,360 --> 00:07:05,520
so to identify these functions starting

195
00:07:05,520 --> 00:07:06,639
from the c

196
00:07:06,639 --> 00:07:08,000
send message functions that we

197
00:07:08,000 --> 00:07:10,240
identified before we perform

198
00:07:10,240 --> 00:07:14,840
backward slice up to the ui layer of the

199
00:07:14,840 --> 00:07:16,400
application

200
00:07:16,400 --> 00:07:18,479
we identify all the functions that are

201
00:07:18,479 --> 00:07:19,440
traversed

202
00:07:19,440 --> 00:07:22,720
within this backward slice and then we

203
00:07:22,720 --> 00:07:23,840
dynamically hook

204
00:07:23,840 --> 00:07:26,000
all the travels all the functions within

205
00:07:26,000 --> 00:07:27,520
this backward slice

206
00:07:27,520 --> 00:07:29,919
and we calculate the shannon entropy

207
00:07:29,919 --> 00:07:31,039
introduced by

208
00:07:31,039 --> 00:07:34,080
each of these methods

209
00:07:34,240 --> 00:07:37,680
and the methods which introduce

210
00:07:37,680 --> 00:07:39,919
entropy is more than certain threshold

211
00:07:39,919 --> 00:07:41,840
we considered those methods

212
00:07:41,840 --> 00:07:45,280
as our data transforming functions

213
00:07:45,280 --> 00:07:47,759
for our experiments we use the threshold

214
00:07:47,759 --> 00:07:49,919
to be 2.

215
00:07:49,919 --> 00:07:51,599
the next phase is identifying fuzzing

216
00:07:51,599 --> 00:07:53,520
triggers so here

217
00:07:53,520 --> 00:07:55,120
for each of the data transforming

218
00:07:55,120 --> 00:07:56,720
functions that we identified

219
00:07:56,720 --> 00:07:59,199
we compute the dominance tree which

220
00:07:59,199 --> 00:08:01,759
includes only the functions

221
00:08:01,759 --> 00:08:03,280
which are in the data which are

222
00:08:03,280 --> 00:08:05,360
considered as data transforming

223
00:08:05,360 --> 00:08:08,000
and then the root of each dominance tree

224
00:08:08,000 --> 00:08:10,240
will be considered as a fuzzing trigger

225
00:08:10,240 --> 00:08:13,840
so here in this case there are

226
00:08:13,840 --> 00:08:16,960
three there are two dominance trees

227
00:08:16,960 --> 00:08:19,039
and the root of the dominant series is

228
00:08:19,039 --> 00:08:20,560
d1 and d3

229
00:08:20,560 --> 00:08:24,840
which will be considered as fuzzing

230
00:08:24,840 --> 00:08:26,240
triggers

231
00:08:26,240 --> 00:08:29,280
as an example let's here

232
00:08:29,280 --> 00:08:32,559
set device name is the ui level function

233
00:08:32,559 --> 00:08:34,159
and then send to device is a send

234
00:08:34,159 --> 00:08:36,240
message function

235
00:08:36,240 --> 00:08:38,559
and c is the data accepted by the send

236
00:08:38,559 --> 00:08:39,440
to device

237
00:08:39,440 --> 00:08:40,799
function which is a send message

238
00:08:40,799 --> 00:08:42,559
function first we perform backward

239
00:08:42,559 --> 00:08:43,679
slicing

240
00:08:43,679 --> 00:08:45,600
which helps us identify all the

241
00:08:45,600 --> 00:08:48,080
functions within the backward slice

242
00:08:48,080 --> 00:08:51,279
and then we calculate entropy introduced

243
00:08:51,279 --> 00:08:52,880
by each of these functions

244
00:08:52,880 --> 00:08:54,880
and we filter out the functions which

245
00:08:54,880 --> 00:08:57,600
doesn't introduce enough entropy

246
00:08:57,600 --> 00:09:00,800
and we only

247
00:09:00,800 --> 00:09:03,040
identify or we only consider those

248
00:09:03,040 --> 00:09:04,800
functions where the introduced entropy

249
00:09:04,800 --> 00:09:06,160
is more than the threshold

250
00:09:06,160 --> 00:09:08,000
here in our case encode is such a

251
00:09:08,000 --> 00:09:10,560
function so we have only one data

252
00:09:10,560 --> 00:09:12,320
transforming function encode and

253
00:09:12,320 --> 00:09:14,000
eventually since there are no other data

254
00:09:14,000 --> 00:09:15,440
transforming functions

255
00:09:15,440 --> 00:09:16,959
encode function becomes our fuzzing

256
00:09:16,959 --> 00:09:19,279
trigger so this is how fuzzing triggers

257
00:09:19,279 --> 00:09:20,480
are identified

258
00:09:20,480 --> 00:09:22,080
by identifying data transforming

259
00:09:22,080 --> 00:09:24,480
functions

260
00:09:24,880 --> 00:09:26,800
once fuzzing once fuzzing triggers are

261
00:09:26,800 --> 00:09:27,920
identified

262
00:09:27,920 --> 00:09:32,880
we fuzz and monitor for device crashes

263
00:09:32,880 --> 00:09:35,680
so the way we do it is we hook all the

264
00:09:35,680 --> 00:09:36,800
fuzzing triggers

265
00:09:36,800 --> 00:09:40,160
and run the companion app so whenever

266
00:09:40,160 --> 00:09:42,160
the fuzzing trigger function is invoked

267
00:09:42,160 --> 00:09:43,920
we mutate

268
00:09:43,920 --> 00:09:45,760
the set of input variables that are

269
00:09:45,760 --> 00:09:48,000
accepted by these fuzzing triggers

270
00:09:48,000 --> 00:09:51,120
we support fuzzing both primitive types

271
00:09:51,120 --> 00:09:53,839
such as hint string so on and so forth

272
00:09:53,839 --> 00:09:55,760
we also support

273
00:09:55,760 --> 00:09:59,519
objects of different classes

274
00:10:00,399 --> 00:10:03,600
however after fuzzing

275
00:10:03,600 --> 00:10:06,000
identifying whether device crashed or

276
00:10:06,000 --> 00:10:06,720
not

277
00:10:06,720 --> 00:10:09,200
is known to be a hard problem especially

278
00:10:09,200 --> 00:10:10,880
when the firmware of the device is not

279
00:10:10,880 --> 00:10:12,560
available

280
00:10:12,560 --> 00:10:15,600
so to handle this before starting the

281
00:10:15,600 --> 00:10:16,720
fuzzing campaign

282
00:10:16,720 --> 00:10:18,320
we register the amount of traffic

283
00:10:18,320 --> 00:10:19,760
generated by each

284
00:10:19,760 --> 00:10:23,200
clean run of the app we also

285
00:10:23,200 --> 00:10:26,320
measure the delay

286
00:10:26,560 --> 00:10:29,839
that is for that is i

287
00:10:29,839 --> 00:10:32,399
experience it for each ping message sent

288
00:10:32,399 --> 00:10:33,920
to the app

289
00:10:33,920 --> 00:10:35,680
once we record these numbers while

290
00:10:35,680 --> 00:10:37,279
fuzzing we monitor the net

291
00:10:37,279 --> 00:10:40,399
network traffic and we also measure the

292
00:10:40,399 --> 00:10:40,959
delay

293
00:10:40,959 --> 00:10:43,279
in device response to ping messages and

294
00:10:43,279 --> 00:10:45,120
we raise an alert

295
00:10:45,120 --> 00:10:48,320
if the device generated significantly

296
00:10:48,320 --> 00:10:49,440
less traffic

297
00:10:49,440 --> 00:10:51,920
or if there is a significant delay in

298
00:10:51,920 --> 00:10:54,000
device response to ping messages

299
00:10:54,000 --> 00:10:57,279
in either of these cases we considered

300
00:10:57,279 --> 00:11:00,560
we consider that device has experienced

301
00:11:00,560 --> 00:11:05,839
an alert mostly device crashed

302
00:11:06,320 --> 00:11:09,279
so to evaluate our approach we used 11

303
00:11:09,279 --> 00:11:10,399
iot devices

304
00:11:10,399 --> 00:11:14,000
out of 30 most popular and amazon

305
00:11:14,000 --> 00:11:16,240
30 most popular devices on amazon we

306
00:11:16,240 --> 00:11:18,000
could not find other devices

307
00:11:18,000 --> 00:11:20,800
because they were too expensive to be

308
00:11:20,800 --> 00:11:22,079
bought

309
00:11:22,079 --> 00:11:24,240
and we evaluated against three

310
00:11:24,240 --> 00:11:25,920
evaluation criteria

311
00:11:25,920 --> 00:11:28,320
first is ability of band to find fuzzing

312
00:11:28,320 --> 00:11:29,360
triggers

313
00:11:29,360 --> 00:11:31,279
and second is the ability of band to

314
00:11:31,279 --> 00:11:33,760
find bugs and finally

315
00:11:33,760 --> 00:11:36,720
the efficiency of dan compared to other

316
00:11:36,720 --> 00:11:38,800
related work specifically ui level

317
00:11:38,800 --> 00:11:39,600
fuzzing

318
00:11:39,600 --> 00:11:43,040
and network level fuzzers

319
00:11:43,040 --> 00:11:46,240
so these are the devices that are used

320
00:11:46,240 --> 00:11:48,480
in our evaluation as you can see these

321
00:11:48,480 --> 00:11:50,639
devices belong to different categories

322
00:11:50,639 --> 00:11:53,440
such as smart cameras smart locks smart

323
00:11:53,440 --> 00:11:56,800
bulbs so on and so forth

324
00:11:56,800 --> 00:12:00,399
and as you can see the fuzzing triggers

325
00:12:00,399 --> 00:12:02,079
and there is the the results on the

326
00:12:02,079 --> 00:12:03,680
slide shows the

327
00:12:03,680 --> 00:12:04,959
efficiency of fuzzing trigger

328
00:12:04,959 --> 00:12:06,880
identification first thing

329
00:12:06,880 --> 00:12:09,120
that we can see is that most of these

330
00:12:09,120 --> 00:12:10,160
apps at least seven

331
00:12:10,160 --> 00:12:13,680
of seven out of 11 apps have

332
00:12:13,680 --> 00:12:16,079
at least one sanitization function this

333
00:12:16,079 --> 00:12:16,800
this

334
00:12:16,800 --> 00:12:19,920
shows that in all these apps on

335
00:12:19,920 --> 00:12:22,320
all these iot devices the ui level

336
00:12:22,320 --> 00:12:24,320
fuzzing will be ineffective because

337
00:12:24,320 --> 00:12:27,120
the input will be sanitized by the

338
00:12:27,120 --> 00:12:28,240
sanitizer

339
00:12:28,240 --> 00:12:30,959
input sanitization phase and then one

340
00:12:30,959 --> 00:12:32,079
thing to note here is

341
00:12:32,079 --> 00:12:35,040
in all our techniques we have no false

342
00:12:35,040 --> 00:12:36,240
negatives

343
00:12:36,240 --> 00:12:37,680
so although we have false positives

344
00:12:37,680 --> 00:12:40,000
which is fine because

345
00:12:40,000 --> 00:12:42,959
i didn't find false positives we may

346
00:12:42,959 --> 00:12:44,880
just spend more time in fuzzing these

347
00:12:44,880 --> 00:12:46,160
useless functions

348
00:12:46,160 --> 00:12:48,000
whereas since we do not have false

349
00:12:48,000 --> 00:12:49,360
negatives

350
00:12:49,360 --> 00:12:51,680
we never miss a function that is a

351
00:12:51,680 --> 00:12:53,360
possible send message or a possible

352
00:12:53,360 --> 00:12:54,720
fusing triggers

353
00:12:54,720 --> 00:12:57,120
and finally even identifying fuzzing

354
00:12:57,120 --> 00:12:58,880
triggers we were able to identify

355
00:12:58,880 --> 00:13:00,639
with very less false positive which is

356
00:13:00,639 --> 00:13:03,600
just which is almost 10 percent

357
00:13:03,600 --> 00:13:06,240
and also our effectiveness doesn't

358
00:13:06,240 --> 00:13:08,399
depend on the size of these apps because

359
00:13:08,399 --> 00:13:09,680
the size of these apps

360
00:13:09,680 --> 00:13:13,040
varied from 4000 lines to 22 000 lines

361
00:13:13,040 --> 00:13:14,240
of code

362
00:13:14,240 --> 00:13:17,120
but the efficiency or the precision of

363
00:13:17,120 --> 00:13:20,079
our technique remain the same

364
00:13:20,079 --> 00:13:21,600
and finally for the vulnerability

365
00:13:21,600 --> 00:13:23,519
detection we were able to find various

366
00:13:23,519 --> 00:13:24,160
bugs

367
00:13:24,160 --> 00:13:26,720
in different iot devices and out of

368
00:13:26,720 --> 00:13:27,360
which

369
00:13:27,360 --> 00:13:29,839
three of these devices had zero day

370
00:13:29,839 --> 00:13:31,360
vulnerabilities

371
00:13:31,360 --> 00:13:32,800
and we were able to efficiently find

372
00:13:32,800 --> 00:13:34,639
these box

373
00:13:34,639 --> 00:13:36,480
where most of the triggers were found

374
00:13:36,480 --> 00:13:38,320
most of the bugs were found within

375
00:13:38,320 --> 00:13:40,959
10 hours of fuzzing compared with the

376
00:13:40,959 --> 00:13:42,880
related work which is the ui level

377
00:13:42,880 --> 00:13:44,560
fuzzer the iot device

378
00:13:44,560 --> 00:13:48,000
found only four bucks compared to

379
00:13:48,000 --> 00:13:50,800
11 bugs found by our technique and the

380
00:13:50,800 --> 00:13:52,399
network level first were completely

381
00:13:52,399 --> 00:13:53,360
ineffective

382
00:13:53,360 --> 00:13:56,399
because most of these iot devices they

383
00:13:56,399 --> 00:13:57,279
expect data

384
00:13:57,279 --> 00:14:00,320
in a very specific format which

385
00:14:00,320 --> 00:14:02,399
the network fuzzers are unable to

386
00:14:02,399 --> 00:14:03,600
produce

387
00:14:03,600 --> 00:14:05,120
and we reported all our findings to

388
00:14:05,120 --> 00:14:08,079
vendors and 10 bugs were confirmed and

389
00:14:08,079 --> 00:14:09,440
they are being fixed

390
00:14:09,440 --> 00:14:11,120
and one of the bug is still being

391
00:14:11,120 --> 00:14:13,360
investigated

392
00:14:13,360 --> 00:14:16,880
uh thank you for attending our

