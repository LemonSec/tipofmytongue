1
00:00:02,080 --> 00:00:04,840
Thank you for attending our presentation.

2
00:00:05,040 --> 00:00:12,719
on “An I/O Separation Model for Formal Verification
of Kernel Implementations”. I am Miao Yu.

3
00:00:13,840 --> 00:00:16,880
The goal of the I/O separation model is to authorize

4
00:00:17,080 --> 00:00:23,479
I/O transfers to isolated applications and their drivers.

5
00:00:24,080 --> 00:00:29,439
An I/O transfer can be informally viewed as an ordered association of one or more devices

6
00:00:29,640 --> 00:00:33,800
to one or more driver objects. For example, a USB device

7
00:00:34,000 --> 00:00:41,240
can transfer data to its associated buffer.
And a GPU device can display its

8
00:00:41,440 --> 00:00:47,320
associated framebuffers of several isolated application drivers.

9
00:00:47,520 --> 00:00:50,480
An I/O transfer is authorized if drivers

10
00:00:50,680 --> 00:00:56,320
cannot bypass or modify a device’s association with its object,

11
00:00:56,520 --> 00:01:03,120
or misconfigure the device to violate the associated R/W permissions.

12
00:01:03,320 --> 00:01:06,880
For example, if a device is associated

13
00:01:07,080 --> 00:01:12,480
with an object of a specific driver, then the driver cannot change

14
00:01:12,680 --> 00:01:18,880
that association to an object
of a different driver or application.

15
00:01:19,120 --> 00:01:27,320
To be useful, the model is to be I/O
hardware, OS, and application-isolation agnostic.

16
00:01:27,520 --> 00:01:30,880
This means that it must apply to all I/O

17
00:01:31,080 --> 00:01:37,440
hardware designs, OS kernels, and application-isolation mechanisms.

18
00:01:37,640 --> 00:01:40,800
Why is this a challenge?
As I will show next,

19
00:01:41,000 --> 00:01:48,360
most I/O hardware fails to authorize transfers.
Most I/O kernels aim to separate

20
00:01:48,560 --> 00:01:53,640
I/O transfers but fail to do so with any degree of implementation assurance.

21
00:01:56,320 --> 00:01:58,199
And most Trusted Execution Environments

22
00:01:58,400 --> 00:02:03,480
provide some application isolation but fail to separate

23
00:02:03,680 --> 00:02:09,400
the I/O transfers of otherwise-isolated applications.

24
00:02:10,639 --> 00:02:17,760
Many I/O hardware designs fail to provide adequate transfer authorization.

25
00:02:18,680 --> 00:02:24,920
Thus, a malicious driver can manipulate is
non-malicious device to bypass

26
00:02:25,120 --> 00:02:30,400
device-object association or RW permissions.

27
00:02:31,640 --> 00:02:36,679
Some I/O HW provides no authorization at all.

28
00:02:36,880 --> 00:02:42,400
For example, a conventional PCI device can
issue peer-to-peer (P2P) transfers

29
00:02:42,600 --> 00:02:48,519
to another device without
providing the sender device's ID.

30
00:02:48,720 --> 00:02:51,920
Thus, the sender device can spoof host controllers

31
00:02:52,120 --> 00:02:57,920
to access a target device of a driver in a different application,

32
00:02:58,120 --> 00:03:03,400
thereby violating driver/application isolation.

33
00:03:05,400 --> 00:03:10,360
Some I/O hardware provides only non-selective authorization.

34
00:03:10,560 --> 00:03:23,140
For example, IOMMUs authorize transfers at the granularity of PCIe-PCI bridges, but not for individual PCI devices underneath.

35
00:03:25,080 --> 00:03:27,480
Other hardware provides selective authorization,

36
00:03:27,680 --> 00:03:32,640
but OSes end up violating it to improve performance,

37
00:03:32,840 --> 00:03:38,080
as I’ll show it in the next slide.

38
00:03:39,720 --> 00:03:42,040
Here we illustrate four attacks

39
00:03:42,240 --> 00:03:47,840
that violate I/O separation
when using inadequate I/O hardware.

40
00:03:49,680 --> 00:03:52,640
Recall that conventional PCI devices can

41
00:03:52,840 --> 00:03:57,720
issue peer-to-peer transfers to other
devices without providing the sender

42
00:03:57,920 --> 00:04:01,760
devices' IDs.
Because of this, a malicious driver i

43
00:04:01,960 --> 00:04:10,280
can configure device i to access
device j without any authorization.

44
00:04:10,560 --> 00:04:16,440
This enables unauthorized direct transfers.

45
00:04:17,200 --> 00:04:24,680
Further, the red driver i can enable unauthorized indirect transfers.

46
00:04:24,880 --> 00:04:32,080
The red driver writes to device i as before but configures it differently.

47
00:04:33,440 --> 00:04:38,280
The configuration enables p2p accesses from device i to h,

48
00:04:38,480 --> 00:04:44,920
which further enables p2p accesses from device h to j.

49
00:04:45,560 --> 00:04:50,640
This shows that only identifying the target device in the first p2p access

50
00:04:50,840 --> 00:04:58,159
is insufficient to prevent
unauthorized indirect transfers.

51
00:04:59,760 --> 00:05:02,880
Next, recall that IOMMUs

52
00:05:03,080 --> 00:05:08,240
authorize transfers at the granularity of PCIe-PCI bridges,

53
00:05:08,440 --> 00:05:13,960
but not for the individual
PCI devices underneath.

54
00:05:14,160 --> 00:05:20,360
Because of this, device i can access not only the red DMA memory,

55
00:05:20,560 --> 00:05:23,360
but also the green DMA memory.

56
00:05:23,560 --> 00:05:27,720
The IOMMU allows this access because

57
00:05:27,920 --> 00:05:34,600
it associates the transfer with the bridge not individual PCI devices.

58
00:05:36,520 --> 00:05:38,120
The last example

59
00:05:38,320 --> 00:05:45,360
shows a selective-authorization failure resulting from a performance optimization.

60
00:05:46,640 --> 00:05:54,400
Recall that IOMMUs separate DMA transfers selectively via different page tables.

61
00:05:54,600 --> 00:05:59,640
And to improve access performance they must use IOTLBs,

62
00:05:59,840 --> 00:06:04,119
which must be cleared upon page-table switches.

63
00:06:04,880 --> 00:06:15,000
However, commodity OSes defer IOTLB clearing to decrease switching time between different device transfers.

64
00:06:15,200 --> 00:06:25,599
For example, in the figure, this causes deferral of the green IOTLB entries deletion even after they are no longer used.

65
00:06:25,960 --> 00:06:31,840
so when a device moves to the red partition on-demand,
the red driver can still

66
00:06:32,040 --> 00:06:39,960
configure it to access green DMA memory,
via the undeleted IOTLB entry.

67
00:06:42,680 --> 00:06:47,520
In summary, these
examples show that.

68
00:06:47,720 --> 00:06:53,880
First, address-space separation is insufficient for I/O transfer separation.

69
00:06:54,080 --> 00:07:05,240
Second, a malicious driver can violate I/O transfer separation by manipulating its non-malicious device to bypass transfer authorization.

70
00:07:07,680 --> 00:07:16,360
Currently, many different OSes, I/O kernels, and trusted execution environments provide application isolation.

71
00:07:16,560 --> 00:07:28,920
For example, a micro-hypervisor and a Wimpy Kernel enforce on-demand I/O separation for isolated applications and their USB devices.

72
00:07:29,440 --> 00:07:38,160
and separation kernels establish isolated partitions and statically allocate devices to these partitions.

73
00:07:38,600 --> 00:07:47,480
Commodity OS kernels enforce intra-OS protection to separate a DMA memory pool from a non-DMA memory pool.

74
00:07:47,680 --> 00:07:54,480
Then they transfer data to and from the separate pools to isolated applications.

75
00:07:58,240 --> 00:08:04,000
To ensure that our formal model is applicable to all I/O hardware, kernels and TEEs,

76
00:08:04,200 --> 00:08:08,599
we use a layered modelling approach.

77
00:08:08,800 --> 00:08:17,720
The abstract model layer specifies key device and driver components and operations, formalizes the notion of I/O partitions

78
00:08:17,920 --> 00:08:22,600
and specifies I/O authorization and properties.

79
00:08:24,160 --> 00:08:29,920
Then we successively refine the abstract model to obtain lower-layer models

80
00:08:30,120 --> 00:08:36,880
that apply to real commodity I/O hardware,
I/O kernels and TEEs.

81
00:08:37,400 --> 00:08:48,000
These lower-layer models both add I/O HW details and extend model applicability to all other I/O kernels.

82
00:08:48,200 --> 00:08:57,520
For example, concrete models add hardware authorization capabilities and specific I/O separation policies.

83
00:08:57,720 --> 00:09:03,880
and kernel designs add details of different device classes.

84
00:09:04,080 --> 00:09:10,880
and kernel implementations add details of device registers and data structures.

85
00:09:11,080 --> 00:09:20,200
The implementation specifications can then automatically generate code of running I/O kernels.

86
00:09:22,360 --> 00:09:27,840
So why does one need 3 refinement layers?

87
00:09:28,920 --> 00:09:35,280
The concrete models are needed because they could be general for multiple I/O kernels.

88
00:09:35,480 --> 00:09:41,800
For example, the concrete model shown here is general for various on-demand I/O separation kernels,

89
00:09:42,000 --> 00:09:48,640
including wimpy kernel and GPU separation kernel.

90
00:09:50,040 --> 00:09:53,319
Kernel design models are needed because they:

91
00:09:53,520 --> 00:09:59,920
(1) enable early discovery of kernel design vulnerabilities,

92
00:10:00,040 --> 00:10:07,640
(2) allow kernel composition of different device types and significantly reduce code-composition proof effort, and

93
00:10:07,840 --> 00:10:20,520
(3) enable kernel design reuse between similar device types. For example, an I/O kernel of USB 3 is similar with the one of USB 2.

94
00:10:23,120 --> 00:10:34,720
The abstract I/O separation model can also be refined to separation kernels and commodity OS kernels, as informally discussed in our paper.

95
00:10:35,240 --> 00:10:45,960
Due to time limitations, I’ll only illustrate the abstract I/O separation model in the next few slides and then conclude the talk.

96
00:10:48,440 --> 00:10:56,640
The I/O separation model consists of three I/O components: subjects, objects, and partitions.

97
00:10:56,840 --> 00:10:59,000
Subjects consist of drivers and devices.

98
00:10:59,200 --> 00:11:08,960
The figure on the right shows the mappings from real drivers and devices to I/O components in the model.

99
00:11:10,080 --> 00:11:16,400
Objects consist of data objects, function descriptors, and transfer descriptors.

100
00:11:16,600 --> 00:11:23,040
Data objects store devices’ input and output data, like the framebuffers in the figure.

101
00:11:23,240 --> 00:11:33,400
Function descriptors define configurations of device functions other than I/O transfers, like the power control register.

102
00:11:34,200 --> 00:11:39,640
Transfer descriptors define direct I/O transfers to be issued by devices,

103
00:11:39,840 --> 00:11:46,160
like the frame buffer base register defines a read to a data object.

104
00:11:47,120 --> 00:11:52,040
The subjects and objects belong to different partitions.

105
00:11:52,240 --> 00:12:02,600
Thus, I/O separation is defined as: 
“No I/O transfers can cross a partition”, and 
“No mutable objects can be reused in a new partition”

106
00:12:04,120 --> 00:12:14,480
However, I/O hardware with inadequate transfer authorization poses a challenge in authorizing indirect transfers by devices.

107
00:12:15,000 --> 00:12:27,960
That is, once drivers write to TDs to initiate indirect transfers, I/O hardware cannot prevent these transfers from crossing partitions.

108
00:12:29,320 --> 00:12:38,680
To prevent such transfers, the model calculates a transitive closure of TD state whenever a driver modifies a TD.

109
00:12:41,880 --> 00:12:46,520
Then the model checks that the transitive closure does not include cross-partition transfers.

110
00:12:47,480 --> 00:12:55,800
The bottom figure shows the TD state right after the red driver writes to the TD i of device i.

111
00:12:57,000 --> 00:13:03,360
The new TD i defines a direct transfer to the TD h of device h.

112
00:13:05,240 --> 00:13:13,800
The computation discovers that the leftmost TD state enables a direct write from device i to TD h.

113
00:13:14,000 --> 00:13:19,160
This write results in a new TD state and modifies TD h.

114
00:13:21,080 --> 00:13:29,640
Though the new TD h defines a cross-partition transfer to TD j, the algorithm has not discovered it yet.

115
00:13:30,960 --> 00:13:40,760
Then the computation discovers that the middle TD state enables a direct write from device h to TD j.

116
00:13:41,040 --> 00:13:48,760
Now the algorithm discovers an unauthorized transfer in the transitive closure.

117
00:13:50,000 --> 00:13:55,960
Thus, the model must deny the red driver i from writing the device i,

118
00:13:56,160 --> 00:14:01,439
because this write could lead to indirect cross-partition transfers.

119
00:14:04,120 --> 00:14:07,480
The I/O separation model defines 12 operations in total.

120
00:14:07,680 --> 00:14:11,800
4 operations for “Driver/Device read and write”.

121
00:14:12,000 --> 00:14:15,360
2 operations for “Empty partition create and destroy”.

122
00:14:15,560 --> 00:14:21,760
And 6 operations for “Subjects/Objects activation and deactivation”.

123
00:14:22,440 --> 00:14:31,840
In summary, 
we defined an I/O separation model that can be applied to different I/O hardware designs, I/O kernels and TEEs.

124
00:14:32,040 --> 00:14:36,280
We specified and verified the Wimpy Kernel’s design and implementation.

125
00:14:36,480 --> 00:14:43,280
These specifications helped us to discover vulnerabilities in the original wimpy kernel.

126
00:14:43,880 --> 00:14:54,360
The overall level of effort is 4.5 person-years, in which 2.5 person-years are for sound wimpy kernel design and implementation.

127
00:14:54,560 --> 00:14:58,280
And the models can be reused for future I/O kernel development.

128
00:14:58,480 --> 00:15:02,760
Reusing the abstract model can save about 1 person-year.

129
00:15:02,960 --> 00:15:07,400
Reusing both the abstract and concrete model can save about 2 person-years.

130
00:15:07,600 --> 00:15:12,400
And reusing existing lemmas and proof structure can save about a half person-year.

131
00:15:12,600 --> 00:15:13,800
So that's all.
Thank you.

