1
00:00:00,640 --> 00:00:03,360
hi i'm riyad i'm going to tell you about

2
00:00:03,360 --> 00:00:04,880
a new cryptographic primitive that my

3
00:00:04,880 --> 00:00:06,319
co-authors and i constructed

4
00:00:06,319 --> 00:00:08,400
that gives a super compact super

5
00:00:08,400 --> 00:00:10,240
efficient way to verify that many

6
00:00:10,240 --> 00:00:12,480
parties agree on a fact

7
00:00:12,480 --> 00:00:14,559
for example imagine that many computers

8
00:00:14,559 --> 00:00:16,239
on the internet all see an attack

9
00:00:16,239 --> 00:00:18,800
originating from the same ip address or

10
00:00:18,800 --> 00:00:20,880
maybe many different people see a rare

11
00:00:20,880 --> 00:00:21,439
event

12
00:00:21,439 --> 00:00:23,519
like a huge meteor streaking across the

13
00:00:23,519 --> 00:00:24,640
sky

14
00:00:24,640 --> 00:00:26,480
or maybe many different players on a

15
00:00:26,480 --> 00:00:28,400
blockchain all have some notion in their

16
00:00:28,400 --> 00:00:28,960
head

17
00:00:28,960 --> 00:00:31,679
of the chain's state in all of these

18
00:00:31,679 --> 00:00:32,238
cases

19
00:00:32,238 --> 00:00:34,000
it would be great if these parties could

20
00:00:34,000 --> 00:00:35,840
collectively attest to their common

21
00:00:35,840 --> 00:00:36,800
knowledge

22
00:00:36,800 --> 00:00:38,320
in other words the parties want to

23
00:00:38,320 --> 00:00:39,840
generate a certificate that

24
00:00:39,840 --> 00:00:41,840
say a majority of them agree on some

25
00:00:41,840 --> 00:00:43,280
event

26
00:00:43,280 --> 00:00:45,520
naively we might just ask each party to

27
00:00:45,520 --> 00:00:47,039
generate a digital signature

28
00:00:47,039 --> 00:00:49,039
and then collect all of those signatures

29
00:00:49,039 --> 00:00:51,199
into one certificate

30
00:00:51,199 --> 00:00:53,120
unfortunately the problem is that as the

31
00:00:53,120 --> 00:00:54,800
number of parties grows

32
00:00:54,800 --> 00:00:57,280
this approach gives us huge certificates

33
00:00:57,280 --> 00:01:00,079
that are extremely expensive to check

34
00:01:00,079 --> 00:01:02,640
instead what we want is a certificate

35
00:01:02,640 --> 00:01:03,120
that is

36
00:01:03,120 --> 00:01:05,438
small and easy to check even if the

37
00:01:05,438 --> 00:01:06,479
number of parties

38
00:01:06,479 --> 00:01:08,960
is huge but we want some stronger

39
00:01:08,960 --> 00:01:10,720
properties too

40
00:01:10,720 --> 00:01:12,320
maybe it's not just that there are many

41
00:01:12,320 --> 00:01:14,640
parties maybe some of the parties are

42
00:01:14,640 --> 00:01:16,640
more credible than others so we assign

43
00:01:16,640 --> 00:01:18,720
their opinions different weights

44
00:01:18,720 --> 00:01:21,040
so a supercomputer might get a lot more

45
00:01:21,040 --> 00:01:22,400
weight than the gaming rig in your

46
00:01:22,400 --> 00:01:23,920
basement

47
00:01:23,920 --> 00:01:25,920
or maybe we might worry that some of the

48
00:01:25,920 --> 00:01:27,280
parties are faulty

49
00:01:27,280 --> 00:01:29,119
for example we might worry that when

50
00:01:29,119 --> 00:01:30,560
some people see a meteor

51
00:01:30,560 --> 00:01:33,520
they actually think that it's a ufo or

52
00:01:33,520 --> 00:01:34,479
even worse

53
00:01:34,479 --> 00:01:36,560
some of the parties could be malicious

54
00:01:36,560 --> 00:01:38,240
for example maybe the person in the

55
00:01:38,240 --> 00:01:39,119
threatening hoodie

56
00:01:39,119 --> 00:01:40,960
tries to convince us that actually they

57
00:01:40,960 --> 00:01:43,040
own all the money

58
00:01:43,040 --> 00:01:45,200
to solve these problems we introduce a

59
00:01:45,200 --> 00:01:46,799
new cryptographic primitive called a

60
00:01:46,799 --> 00:01:48,560
compact certificate scheme

61
00:01:48,560 --> 00:01:50,159
and we give an efficient construction

62
00:01:50,159 --> 00:01:52,159
that is general purpose supports many

63
00:01:52,159 --> 00:01:53,439
parties of different weights

64
00:01:53,439 --> 00:01:55,600
and doesn't require trusting the parties

65
00:01:55,600 --> 00:01:56,960
or the person who creates the

66
00:01:56,960 --> 00:01:58,399
certificate

67
00:01:58,399 --> 00:02:00,640
our evaluation shows that at one million

68
00:02:00,640 --> 00:02:02,399
parties our construction gives

69
00:02:02,399 --> 00:02:05,040
certificates that are 50 to 280 times

70
00:02:05,040 --> 00:02:05,920
smaller

71
00:02:05,920 --> 00:02:09,119
and 300 to 4 000 times easier to verify

72
00:02:09,119 --> 00:02:11,680
than the naive alternative and we show

73
00:02:11,680 --> 00:02:13,360
how this construction can be deployed in

74
00:02:13,360 --> 00:02:14,560
a distributed setting

75
00:02:14,560 --> 00:02:16,640
namely a blockchain with stake weighted

76
00:02:16,640 --> 00:02:18,640
voting

77
00:02:18,640 --> 00:02:20,000
in the rest of the talk i'll define

78
00:02:20,000 --> 00:02:22,080
compact certificates tell you about our

79
00:02:22,080 --> 00:02:22,959
construction

80
00:02:22,959 --> 00:02:24,400
and then show you some evaluation

81
00:02:24,400 --> 00:02:26,239
results

82
00:02:26,239 --> 00:02:27,599
for starters let's talk about the

83
00:02:27,599 --> 00:02:29,599
setting throughout the talk i'm going to

84
00:02:29,599 --> 00:02:31,360
be using the running example of many

85
00:02:31,360 --> 00:02:31,920
parties

86
00:02:31,920 --> 00:02:33,680
signing the same message m though

87
00:02:33,680 --> 00:02:35,440
remember compact certificates

88
00:02:35,440 --> 00:02:38,319
apply to any np statement we'll call

89
00:02:38,319 --> 00:02:39,599
these parties a testers

90
00:02:39,599 --> 00:02:41,440
and we assume that each a tester is

91
00:02:41,440 --> 00:02:43,040
assigned a weight

92
00:02:43,040 --> 00:02:44,400
the attesters in this picture for

93
00:02:44,400 --> 00:02:46,239
example have weights ranging from one to

94
00:02:46,239 --> 00:02:47,760
nine

95
00:02:47,760 --> 00:02:49,599
remember the idea here is that we want

96
00:02:49,599 --> 00:02:51,760
to be convinced that many attesters

97
00:02:51,760 --> 00:02:54,319
signed the message m in particular we'll

98
00:02:54,319 --> 00:02:56,000
say that we want signatures totaling

99
00:02:56,000 --> 00:02:56,400
some

100
00:02:56,400 --> 00:02:58,239
target weight which i'll denote capital

101
00:02:58,239 --> 00:02:59,440
t

102
00:02:59,440 --> 00:03:02,080
for example say our target weight t is

103
00:03:02,080 --> 00:03:03,519
greater than 21

104
00:03:03,519 --> 00:03:05,200
then we would be satisfied if we were

105
00:03:05,200 --> 00:03:07,120
convinced that say the left three people

106
00:03:07,120 --> 00:03:08,319
in the picture signed

107
00:03:08,319 --> 00:03:11,120
since in total their weight is 22. of

108
00:03:11,120 --> 00:03:12,800
course any other combination of signers

109
00:03:12,800 --> 00:03:15,519
with sufficient weight would also work

110
00:03:15,519 --> 00:03:17,519
to solve this problem we defined compact

111
00:03:17,519 --> 00:03:18,640
certificates

112
00:03:18,640 --> 00:03:21,120
cryptographic protocols between approver

113
00:03:21,120 --> 00:03:21,840
which i'll write

114
00:03:21,840 --> 00:03:24,480
blackboard bold p and a verifier which

115
00:03:24,480 --> 00:03:26,799
i'll write blackboard bold v

116
00:03:26,799 --> 00:03:28,879
in this protocol the prover knows all of

117
00:03:28,879 --> 00:03:30,319
the attester's public keys

118
00:03:30,319 --> 00:03:32,159
and their assigned weights and the

119
00:03:32,159 --> 00:03:34,239
verifier knows a short commitment to the

120
00:03:34,239 --> 00:03:35,599
keys and weights

121
00:03:35,599 --> 00:03:37,440
the provers goal is to convince the

122
00:03:37,440 --> 00:03:38,640
verifier that it knows

123
00:03:38,640 --> 00:03:40,720
signatures on a message m whose total

124
00:03:40,720 --> 00:03:43,920
weight is greater than some value t

125
00:03:43,920 --> 00:03:45,680
a compact certificate scheme has two

126
00:03:45,680 --> 00:03:47,440
properties first

127
00:03:47,440 --> 00:03:49,680
compact completeness means that if the

128
00:03:49,680 --> 00:03:50,879
prover indeed knows

129
00:03:50,879 --> 00:03:52,799
sufficiently weighty signatures it can

130
00:03:52,799 --> 00:03:54,560
convince the verifier of this fact using

131
00:03:54,560 --> 00:03:56,560
a certificate that is very short

132
00:03:56,560 --> 00:03:58,720
in particular at most poly logarithmic

133
00:03:58,720 --> 00:04:00,959
in the total number of a testers

134
00:04:00,959 --> 00:04:03,040
second proof of knowledge informally

135
00:04:03,040 --> 00:04:04,959
means that any prover who generates a

136
00:04:04,959 --> 00:04:06,239
convincing certificate

137
00:04:06,239 --> 00:04:08,159
actually knows a sufficiently weighty

138
00:04:08,159 --> 00:04:09,519
set of signatures

139
00:04:09,519 --> 00:04:11,200
here knowledge is defined in the usual

140
00:04:11,200 --> 00:04:15,439
way in terms of an extractor algorithm

141
00:04:15,439 --> 00:04:16,880
now our goal is to construct a

142
00:04:16,880 --> 00:04:19,440
concretely efficient scheme

143
00:04:19,440 --> 00:04:21,199
we'll build this scheme based on merkle

144
00:04:21,199 --> 00:04:23,600
trees the high level idea here is that

145
00:04:23,600 --> 00:04:25,199
the prover creates a merkle tree that

146
00:04:25,199 --> 00:04:25,840
contains

147
00:04:25,840 --> 00:04:27,919
all of the attester's signatures and

148
00:04:27,919 --> 00:04:29,680
sends the verifier the root of the

149
00:04:29,680 --> 00:04:31,199
signature tree

150
00:04:31,199 --> 00:04:33,120
then the verifier challenges the prover

151
00:04:33,120 --> 00:04:35,199
to reveal a few random signatures

152
00:04:35,199 --> 00:04:38,000
and it checks though pictorially the

153
00:04:38,000 --> 00:04:39,600
prover starts with some signatures

154
00:04:39,600 --> 00:04:41,280
and constructs the signature merkle tree

155
00:04:41,280 --> 00:04:43,600
whose root is capital r

156
00:04:43,600 --> 00:04:46,000
it sends r to the verifier who chooses a

157
00:04:46,000 --> 00:04:46,960
set of challenges

158
00:04:46,960 --> 00:04:49,600
and sends them to the prover the prover

159
00:04:49,600 --> 00:04:51,280
responds with the signatures in the

160
00:04:51,280 --> 00:04:53,199
leaves corresponding to each challenge

161
00:04:53,199 --> 00:04:55,280
plus the merkle path authenticating that

162
00:04:55,280 --> 00:04:57,199
leap against the root r

163
00:04:57,199 --> 00:04:59,120
and finally the verifier checks all of

164
00:04:59,120 --> 00:05:00,320
the signatures and all of the

165
00:05:00,320 --> 00:05:02,800
authenticating paths

166
00:05:02,800 --> 00:05:04,479
this description glosses over two

167
00:05:04,479 --> 00:05:06,000
important details

168
00:05:06,000 --> 00:05:08,240
first how does the verifier learn the

169
00:05:08,240 --> 00:05:09,759
public keys corresponding to each

170
00:05:09,759 --> 00:05:10,800
signature

171
00:05:10,800 --> 00:05:12,639
and second how can the verifier

172
00:05:12,639 --> 00:05:14,400
efficiently sample the challenge leaves

173
00:05:14,400 --> 00:05:15,120
it requests

174
00:05:15,120 --> 00:05:17,280
from the prover i'll answer each of

175
00:05:17,280 --> 00:05:19,120
these in turn

176
00:05:19,120 --> 00:05:21,120
first let's talk about public keys

177
00:05:21,120 --> 00:05:22,160
remember from the setup that the

178
00:05:22,160 --> 00:05:24,240
verifier does not know all a tester

179
00:05:24,240 --> 00:05:25,520
weights and public keys

180
00:05:25,520 --> 00:05:28,080
just a short commitment to them in this

181
00:05:28,080 --> 00:05:28,880
construction

182
00:05:28,880 --> 00:05:30,400
that commitment is the root of a merkle

183
00:05:30,400 --> 00:05:32,400
tree whose leaves contain the weights

184
00:05:32,400 --> 00:05:34,240
and public keys corresponding to each

185
00:05:34,240 --> 00:05:35,360
attester

186
00:05:35,360 --> 00:05:37,759
we'll call this the attesters tree with

187
00:05:37,759 --> 00:05:39,919
root capital a

188
00:05:39,919 --> 00:05:41,759
this means that for each signature that

189
00:05:41,759 --> 00:05:43,440
the prover sends to the verifier

190
00:05:43,440 --> 00:05:45,520
it also sends the corresponding weight

191
00:05:45,520 --> 00:05:46,560
and public key

192
00:05:46,560 --> 00:05:48,160
plus an authenticating path in the

193
00:05:48,160 --> 00:05:50,000
attesters tree

194
00:05:50,000 --> 00:05:51,919
it's important to note that since the

195
00:05:51,919 --> 00:05:53,120
attestors tree is

196
00:05:53,120 --> 00:05:55,360
ground truth it needs to be computed

197
00:05:55,360 --> 00:05:57,360
ahead of time either by the verifier

198
00:05:57,360 --> 00:06:01,360
or by a party that the verifier trusts

199
00:06:01,360 --> 00:06:03,360
so that takes care of public keys now

200
00:06:03,360 --> 00:06:04,639
let's think about how the verifier

201
00:06:04,639 --> 00:06:06,080
samples challenges

202
00:06:06,080 --> 00:06:08,160
the problem here is we might have a huge

203
00:06:08,160 --> 00:06:10,240
number of testers with very tiny weights

204
00:06:10,240 --> 00:06:12,160
and a small handful with very heavy

205
00:06:12,160 --> 00:06:14,160
weights so if the verifier samples

206
00:06:14,160 --> 00:06:15,919
uniformly from the attesters

207
00:06:15,919 --> 00:06:17,759
it needs to get very lucky for any of

208
00:06:17,759 --> 00:06:19,280
its samples to have high weight

209
00:06:19,280 --> 00:06:21,360
and therefore it needs a lot of samples

210
00:06:21,360 --> 00:06:23,600
and a big certificate

211
00:06:23,600 --> 00:06:25,520
intuitively what we want instead is for

212
00:06:25,520 --> 00:06:27,120
the verifier to sample a tester's

213
00:06:27,120 --> 00:06:27,919
signatures

214
00:06:27,919 --> 00:06:30,400
in proportion to their weight

215
00:06:30,400 --> 00:06:31,199
specifically

216
00:06:31,199 --> 00:06:33,199
to find capital s to be the total weight

217
00:06:33,199 --> 00:06:34,319
of signatures on the message

218
00:06:34,319 --> 00:06:37,280
m that the prover knows now we partition

219
00:06:37,280 --> 00:06:38,800
the range from 0 to s

220
00:06:38,800 --> 00:06:40,960
into sub ranges one for each a tester

221
00:06:40,960 --> 00:06:43,120
who signed the message m

222
00:06:43,120 --> 00:06:44,960
pictorially we have the range 0 to s

223
00:06:44,960 --> 00:06:46,720
divided into segments whose length

224
00:06:46,720 --> 00:06:48,000
corresponds to the weights

225
00:06:48,000 --> 00:06:50,960
of the attesters now the verifier can

226
00:06:50,960 --> 00:06:52,000
sample a value z

227
00:06:52,000 --> 00:06:54,240
in the range 0 to s and request the

228
00:06:54,240 --> 00:06:55,599
signature that corresponds to the

229
00:06:55,599 --> 00:06:58,479
attester whose sub-range z falls into

230
00:06:58,479 --> 00:07:00,479
for example if the verifier chooses the

231
00:07:00,479 --> 00:07:02,080
value of z i've drawn here

232
00:07:02,080 --> 00:07:03,520
then it would request the signature from

233
00:07:03,520 --> 00:07:06,800
the attester whose public key is pk3

234
00:07:06,800 --> 00:07:09,280
but there's an issue here remember the

235
00:07:09,280 --> 00:07:11,199
verifier is only allowed to receive

236
00:07:11,199 --> 00:07:13,039
a tiny amount of information from the

237
00:07:13,039 --> 00:07:15,120
prover certainly not enough

238
00:07:15,120 --> 00:07:17,280
to write down all of the sub-ranges of

239
00:07:17,280 --> 00:07:18,720
all of the testers

240
00:07:18,720 --> 00:07:21,039
so how can the verifier execute the

241
00:07:21,039 --> 00:07:22,400
sampling procedure that i've just

242
00:07:22,400 --> 00:07:24,319
described

243
00:07:24,319 --> 00:07:26,560
the idea is the prover commits to those

244
00:07:26,560 --> 00:07:27,360
sub-ranges

245
00:07:27,360 --> 00:07:30,319
as part of the signature merkle tree

246
00:07:30,319 --> 00:07:31,120
specifically

247
00:07:31,120 --> 00:07:32,960
let's denote the lower end of each a

248
00:07:32,960 --> 00:07:34,479
tester sub range as

249
00:07:34,479 --> 00:07:38,400
capital l so capital l sub 1 is 0

250
00:07:38,400 --> 00:07:42,840
l sub 2 is w1 l sub 3 is w1 plus w2

251
00:07:42,840 --> 00:07:45,520
etc now to generate the signature merkle

252
00:07:45,520 --> 00:07:46,000
tree

253
00:07:46,000 --> 00:07:48,160
the prover commits to both a signature

254
00:07:48,160 --> 00:07:50,319
and a sub-range starting point

255
00:07:50,319 --> 00:07:53,360
in each leaf of the tree

256
00:07:53,360 --> 00:07:55,520
when the prover opens a leaf in response

257
00:07:55,520 --> 00:07:56,720
to a challenge z

258
00:07:56,720 --> 00:07:58,720
the verifier checks the signature just

259
00:07:58,720 --> 00:08:01,199
as before but it also checks that the

260
00:08:01,199 --> 00:08:02,080
committed range

261
00:08:02,080 --> 00:08:05,199
actually covers z that is that z is

262
00:08:05,199 --> 00:08:05,680
between

263
00:08:05,680 --> 00:08:08,400
l sub i and l sub i plus w sub i which

264
00:08:08,400 --> 00:08:10,000
is the attester's weight

265
00:08:10,000 --> 00:08:11,520
recall from a few slides ago that the

266
00:08:11,520 --> 00:08:13,360
verifier can learn that from the

267
00:08:13,360 --> 00:08:16,160
attesters tree

268
00:08:16,240 --> 00:08:18,160
this might be slightly surprising it

269
00:08:18,160 --> 00:08:20,160
means that the verifier does not need to

270
00:08:20,160 --> 00:08:21,759
check that the prover generated all of

271
00:08:21,759 --> 00:08:23,680
the sub-ranges honestly

272
00:08:23,680 --> 00:08:27,199
so we might ask wait why does this work

273
00:08:27,199 --> 00:08:29,039
well in essence if the prover

274
00:08:29,039 --> 00:08:30,479
exaggerates the value of

275
00:08:30,479 --> 00:08:32,479
s in other words if it claims that it

276
00:08:32,479 --> 00:08:34,320
knows more total signed weight than it

277
00:08:34,320 --> 00:08:35,760
actually does

278
00:08:35,760 --> 00:08:37,679
this means that the prover must commit

279
00:08:37,679 --> 00:08:39,599
to at least one leaf in the signature

280
00:08:39,599 --> 00:08:40,080
tree

281
00:08:40,080 --> 00:08:42,880
that the verifier would reject more

282
00:08:42,880 --> 00:08:44,560
specifically there must be some

283
00:08:44,560 --> 00:08:47,600
index i such that the value l sub i plus

284
00:08:47,600 --> 00:08:49,440
the corresponding attester's weight

285
00:08:49,440 --> 00:08:52,560
w sub i is less than the value l sub i

286
00:08:52,560 --> 00:08:53,440
plus 1

287
00:08:53,440 --> 00:08:56,640
the next sub range start

288
00:08:56,640 --> 00:08:58,560
this means that if the verifier sends a

289
00:08:58,560 --> 00:09:00,880
challenge z that is greater than l sub i

290
00:09:00,880 --> 00:09:02,000
plus w sub i

291
00:09:02,000 --> 00:09:05,200
and less than l sub i plus 1 there's

292
00:09:05,200 --> 00:09:07,519
simply no leaf in the signature tree

293
00:09:07,519 --> 00:09:10,480
that would cause the verifier to accept

294
00:09:10,480 --> 00:09:12,640
so in sum if the prover is dishonest

295
00:09:12,640 --> 00:09:14,240
about any of the sub-ranges

296
00:09:14,240 --> 00:09:15,519
then with the sufficient number of

297
00:09:15,519 --> 00:09:18,240
queries the verifier will detect

298
00:09:18,240 --> 00:09:21,600
and reject now we can write down the

299
00:09:21,600 --> 00:09:23,279
full protocol

300
00:09:23,279 --> 00:09:24,800
the prover starts with knowledge of

301
00:09:24,800 --> 00:09:26,480
signatures having total weight at least

302
00:09:26,480 --> 00:09:27,040
s

303
00:09:27,040 --> 00:09:28,640
and all of the attester's public keys

304
00:09:28,640 --> 00:09:31,360
and weights the verifier knows the

305
00:09:31,360 --> 00:09:32,399
message to be signed

306
00:09:32,399 --> 00:09:34,399
the root of the attester's tree and the

307
00:09:34,399 --> 00:09:36,560
target weight t

308
00:09:36,560 --> 00:09:38,880
the prover builds a merkle tree of a

309
00:09:38,880 --> 00:09:40,720
tester signatures and sub-range lower

310
00:09:40,720 --> 00:09:41,760
bounds

311
00:09:41,760 --> 00:09:43,920
then the prover sends the root of the

312
00:09:43,920 --> 00:09:45,680
signature tree and the claimed total

313
00:09:45,680 --> 00:09:47,519
weight s to the verifier

314
00:09:47,519 --> 00:09:50,000
whose samples challenges z sub i from

315
00:09:50,000 --> 00:09:50,640
the range

316
00:09:50,640 --> 00:09:54,000
0 to s and sends them to the prover

317
00:09:54,000 --> 00:09:55,760
the prover sends the corresponding

318
00:09:55,760 --> 00:09:57,519
leaves in the signature and a tester

319
00:09:57,519 --> 00:09:58,080
trees

320
00:09:58,080 --> 00:10:00,720
along with their authenticating pads and

321
00:10:00,720 --> 00:10:02,240
the verifier checks

322
00:10:02,240 --> 00:10:04,320
everything the claim total weight is at

323
00:10:04,320 --> 00:10:05,680
least the target weight

324
00:10:05,680 --> 00:10:07,200
all the signatures and merkle paths are

325
00:10:07,200 --> 00:10:09,040
valid and all the challenges are

326
00:10:09,040 --> 00:10:10,959
correctly covered by the sub-range lower

327
00:10:10,959 --> 00:10:11,440
bounds

328
00:10:11,440 --> 00:10:14,880
and a tester weights finally

329
00:10:14,880 --> 00:10:16,800
since this protocol is public coin it

330
00:10:16,800 --> 00:10:18,240
can be made non-interactive

331
00:10:18,240 --> 00:10:21,760
via the fiat shimmer heuristic

332
00:10:22,160 --> 00:10:23,760
in the paper we show that this protocol

333
00:10:23,760 --> 00:10:26,000
is a non-interactive random oracle proof

334
00:10:26,000 --> 00:10:27,519
of knowledge as defined in the work of

335
00:10:27,519 --> 00:10:29,519
bensasson kiesa and spooner from tcc

336
00:10:29,519 --> 00:10:31,040
2016.

337
00:10:31,040 --> 00:10:32,880
more specifically we show that for

338
00:10:32,880 --> 00:10:34,560
lambda bit security the number of

339
00:10:34,560 --> 00:10:36,399
queries is proportional to lambda

340
00:10:36,399 --> 00:10:38,720
and inversely proportional to the log of

341
00:10:38,720 --> 00:10:40,560
the ratio between the total signed

342
00:10:40,560 --> 00:10:41,200
weight

343
00:10:41,200 --> 00:10:43,839
and the verifier's target weight

344
00:10:43,839 --> 00:10:44,800
interestingly

345
00:10:44,800 --> 00:10:46,800
this means that the more signatures the

346
00:10:46,800 --> 00:10:47,839
prover knows

347
00:10:47,839 --> 00:10:50,399
the shorter a certificate it can create

348
00:10:50,399 --> 00:10:52,160
we'll see the effect of this concretely

349
00:10:52,160 --> 00:10:55,120
in just a moment this also means that

350
00:10:55,120 --> 00:10:56,720
the certificate size is indeed

351
00:10:56,720 --> 00:10:58,240
poly logarithmic in the number of

352
00:10:58,240 --> 00:11:00,160
testers as required by the compact

353
00:11:00,160 --> 00:11:01,600
completeness property

354
00:11:01,600 --> 00:11:03,519
in practice the size of the certificate

355
00:11:03,519 --> 00:11:05,440
is dominated by the authenticating paths

356
00:11:05,440 --> 00:11:07,839
for the merkle trees

357
00:11:07,839 --> 00:11:09,360
with that in mind let's take a quick

358
00:11:09,360 --> 00:11:11,839
look at concrete performance

359
00:11:11,839 --> 00:11:13,680
we implement our scheme in 1200 lines of

360
00:11:13,680 --> 00:11:15,760
go including several optimizations that

361
00:11:15,760 --> 00:11:17,440
we describe in the paper

362
00:11:17,440 --> 00:11:20,720
signatures use ed25519 uh

363
00:11:20,720 --> 00:11:24,079
the hash is shot 512 truncated to 256

364
00:11:24,079 --> 00:11:24,800
bits

365
00:11:24,800 --> 00:11:26,839
and we use message pack for

366
00:11:26,839 --> 00:11:29,120
serialization in our evaluation we

367
00:11:29,120 --> 00:11:30,959
compare against the naive bayes line i

368
00:11:30,959 --> 00:11:31,920
described earlier

369
00:11:31,920 --> 00:11:33,839
namely bundling together signatures

370
00:11:33,839 --> 00:11:35,040
whose total weight

371
00:11:35,040 --> 00:11:38,720
is the verifier's target t

372
00:11:38,720 --> 00:11:40,480
in the first experiment i'll describe we

373
00:11:40,480 --> 00:11:42,399
explore the effective target weight t

374
00:11:42,399 --> 00:11:44,800
and total signed weight s on certificate

375
00:11:44,800 --> 00:11:45,440
size

376
00:11:45,440 --> 00:11:48,240
for 1 million of testers and 128 bit

377
00:11:48,240 --> 00:11:49,920
security

378
00:11:49,920 --> 00:11:52,480
as the target weight t goes up so does

379
00:11:52,480 --> 00:11:54,560
the size of the certificate

380
00:11:54,560 --> 00:11:56,959
meanwhile as the total signed weight

381
00:11:56,959 --> 00:11:58,000
that the prover knows

382
00:11:58,000 --> 00:12:01,839
goes up the certificate size shrinks

383
00:12:01,839 --> 00:12:04,000
concretely certificate sizes range from

384
00:12:04,000 --> 00:12:05,680
under 100 kilobytes

385
00:12:05,680 --> 00:12:08,320
to roughly 900 kilobytes for target

386
00:12:08,320 --> 00:12:09,920
weights ranging from ten to seventy

387
00:12:09,920 --> 00:12:10,639
percent

388
00:12:10,639 --> 00:12:13,279
and total signed weights ranging from

389
00:12:13,279 --> 00:12:14,959
five percent greater than the target

390
00:12:14,959 --> 00:12:15,680
weight

391
00:12:15,680 --> 00:12:18,800
to one hundred percent i.e all a testers

392
00:12:18,800 --> 00:12:22,720
signing in contrast naive certificates

393
00:12:22,720 --> 00:12:26,079
range from 11 to 77 megabytes depending

394
00:12:26,079 --> 00:12:27,680
on the target weight

395
00:12:27,680 --> 00:12:30,880
in other words about 50 to 280 times

396
00:12:30,880 --> 00:12:31,440
larger

397
00:12:31,440 --> 00:12:34,720
than a compact certificate

398
00:12:34,800 --> 00:12:36,720
in the second experiment i'll mention we

399
00:12:36,720 --> 00:12:39,279
look at certificate verification time

400
00:12:39,279 --> 00:12:40,880
fixing the target weight at fifty

401
00:12:40,880 --> 00:12:42,880
percent and varying the number of

402
00:12:42,880 --> 00:12:44,560
attesters from one hundred to one

403
00:12:44,560 --> 00:12:45,200
million

404
00:12:45,200 --> 00:12:47,279
and the total signed weight from fifty

405
00:12:47,279 --> 00:12:50,079
five to one hundred percent

406
00:12:50,079 --> 00:12:52,240
as the total signed weight goes up the

407
00:12:52,240 --> 00:12:53,920
number of verifier challenges

408
00:12:53,920 --> 00:12:55,839
and thus the number of signatures that

409
00:12:55,839 --> 00:12:57,360
the verifier must check

410
00:12:57,360 --> 00:13:00,000
goes down with correspondingly reduced

411
00:13:00,000 --> 00:13:02,079
verification time

412
00:13:02,079 --> 00:13:04,240
interestingly the verification times for

413
00:13:04,240 --> 00:13:06,959
10 000 and for one million attesters are

414
00:13:06,959 --> 00:13:08,639
essentially the same

415
00:13:08,639 --> 00:13:10,480
the main difference is in the cost to

416
00:13:10,480 --> 00:13:12,000
verify merkle paths

417
00:13:12,000 --> 00:13:14,800
and that's low order concretely

418
00:13:14,800 --> 00:13:16,639
verification time ranges from slightly

419
00:13:16,639 --> 00:13:18,959
under 10 milliseconds to just about 80

420
00:13:18,959 --> 00:13:19,760
milliseconds

421
00:13:19,760 --> 00:13:23,200
across this parameter range in contrast

422
00:13:23,200 --> 00:13:24,880
for the naive bayes line checking a

423
00:13:24,880 --> 00:13:26,480
certificate made by 100

424
00:13:26,480 --> 00:13:29,519
testers is slightly faster but checking

425
00:13:29,519 --> 00:13:32,399
one for 10 000 and especially for 1

426
00:13:32,399 --> 00:13:33,680
million attesters

427
00:13:33,680 --> 00:13:36,639
is much much slower for 1 million

428
00:13:36,639 --> 00:13:38,480
attesters the difference in performance

429
00:13:38,480 --> 00:13:40,240
is a factor of 300

430
00:13:40,240 --> 00:13:44,320
to 4 000. as a final note

431
00:13:44,320 --> 00:13:46,079
the cost of generating a compact

432
00:13:46,079 --> 00:13:48,480
certificate which i haven't shown here

433
00:13:48,480 --> 00:13:50,959
is also pretty reasonable for one

434
00:13:50,959 --> 00:13:51,920
million testers

435
00:13:51,920 --> 00:13:54,720
the cost is under 60 seconds on a single

436
00:13:54,720 --> 00:13:56,000
thread

437
00:13:56,000 --> 00:13:58,399
the predominant cost is verifying all of

438
00:13:58,399 --> 00:13:59,760
the attesters signatures

439
00:13:59,760 --> 00:14:01,600
in order to determine the total signed

440
00:14:01,600 --> 00:14:02,959
weight and this

441
00:14:02,959 --> 00:14:06,480
is easily parallelized in total

442
00:14:06,480 --> 00:14:08,639
generating a compact certificate is at

443
00:14:08,639 --> 00:14:09,680
most a factor of

444
00:14:09,680 --> 00:14:11,839
two more expensive than the naive

445
00:14:11,839 --> 00:14:14,399
baseline

446
00:14:14,959 --> 00:14:17,600
to quickly recap in this work we defined

447
00:14:17,600 --> 00:14:19,040
a new cryptographic primitive

448
00:14:19,040 --> 00:14:22,000
called a compact certificate scheme we

449
00:14:22,000 --> 00:14:23,760
gave a concretely efficient construction

450
00:14:23,760 --> 00:14:25,360
for merkle trees

451
00:14:25,360 --> 00:14:27,040
for one million of testers this

452
00:14:27,040 --> 00:14:28,560
construction gives certificates that are

453
00:14:28,560 --> 00:14:30,959
50 to 280 times smaller

454
00:14:30,959 --> 00:14:34,639
and 300 to 4 000 times faster to verify

455
00:14:34,639 --> 00:14:37,360
than the natural baseline and although i

456
00:14:37,360 --> 00:14:39,600
haven't had time to talk about it today

457
00:14:39,600 --> 00:14:41,120
in the paper we discussed the use of

458
00:14:41,120 --> 00:14:43,199
compact certificates in a distributed

459
00:14:43,199 --> 00:14:43,680
setting

460
00:14:43,680 --> 00:14:45,839
namely for blockchains with stake

461
00:14:45,839 --> 00:14:48,560
weighted voting

462
00:14:48,800 --> 00:14:54,560
thanks very much for your attention

