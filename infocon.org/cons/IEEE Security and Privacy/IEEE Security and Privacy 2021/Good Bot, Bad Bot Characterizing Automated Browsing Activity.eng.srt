1
00:00:00,880 --> 00:00:03,360
i'm shiga lee i'll be happy to present

2
00:00:03,360 --> 00:00:03,919
our work

3
00:00:03,919 --> 00:00:06,560
good bot bedbot characterizing automated

4
00:00:06,560 --> 00:00:07,919
browsing activity

5
00:00:07,919 --> 00:00:10,639
on behalf of babak amin nazad amir

6
00:00:10,639 --> 00:00:11,360
ramati

7
00:00:11,360 --> 00:00:14,400
and nick nikki varakus

8
00:00:14,400 --> 00:00:16,720
web bots are programs that perform web

9
00:00:16,720 --> 00:00:17,440
requests

10
00:00:17,440 --> 00:00:20,000
and interact with websites or even users

11
00:00:20,000 --> 00:00:22,000
on the internet

12
00:00:22,000 --> 00:00:24,400
bots are everywhere on the internet in

13
00:00:24,400 --> 00:00:26,960
2019 there are nearly 40

14
00:00:26,960 --> 00:00:29,119
activities on the internet belong to web

15
00:00:29,119 --> 00:00:31,599
bots malicious spots are responsible for

16
00:00:31,599 --> 00:00:33,280
more than 60 percent of bot

17
00:00:33,280 --> 00:00:36,160
traffic but detection has been a problem

18
00:00:36,160 --> 00:00:38,160
with the evolution of bot detection

19
00:00:38,160 --> 00:00:38,879
techniques

20
00:00:38,879 --> 00:00:41,680
and their evasion techniques bots can be

21
00:00:41,680 --> 00:00:43,440
used for benign purposes

22
00:00:43,440 --> 00:00:45,600
they can be used for providing indexing

23
00:00:45,600 --> 00:00:47,600
services like search engine bots

24
00:00:47,600 --> 00:00:50,000
or creating content previews like slack

25
00:00:50,000 --> 00:00:50,879
or twitter

26
00:00:50,879 --> 00:00:52,960
or they can be used for academic or

27
00:00:52,960 --> 00:00:54,960
industry purposes

28
00:00:54,960 --> 00:00:57,120
on the other hand bots can be used for a

29
00:00:57,120 --> 00:00:59,520
variety of malicious purposes

30
00:00:59,520 --> 00:01:01,440
they can be used to perform credential

31
00:01:01,440 --> 00:01:02,640
stuffing attacks

32
00:01:02,640 --> 00:01:04,879
steal sensitive files or probe web

33
00:01:04,879 --> 00:01:05,760
applications

34
00:01:05,760 --> 00:01:09,040
for vulnerabilities now we understand

35
00:01:09,040 --> 00:01:11,119
that bots are irritating sometimes and

36
00:01:11,119 --> 00:01:12,880
we don't want these malicious spots

37
00:01:12,880 --> 00:01:15,439
access our website there are several

38
00:01:15,439 --> 00:01:17,520
ways to block bots but the underlying

39
00:01:17,520 --> 00:01:20,799
assumption is that we can detect them

40
00:01:20,799 --> 00:01:23,200
there is a wide variety of automated

41
00:01:23,200 --> 00:01:25,200
browsing software and environments and

42
00:01:25,200 --> 00:01:27,200
making bot detection difficult

43
00:01:27,200 --> 00:01:28,960
these web bots can be in the form of

44
00:01:28,960 --> 00:01:31,119
basic crawlers like curl or python

45
00:01:31,119 --> 00:01:31,920
requests

46
00:01:31,920 --> 00:01:34,479
or can be advanced as automated browsers

47
00:01:34,479 --> 00:01:36,960
such as firefox or chrome controlled by

48
00:01:36,960 --> 00:01:38,000
selenium

49
00:01:38,000 --> 00:01:40,799
the web bot can also be as fast as zmapp

50
00:01:40,799 --> 00:01:42,799
scanning the whole internet within a few

51
00:01:42,799 --> 00:01:43,520
minutes

52
00:01:43,520 --> 00:01:45,360
or they can be a combination of all

53
00:01:45,360 --> 00:01:48,240
above this makes bot detection difficult

54
00:01:48,240 --> 00:01:49,840
because people have to address new

55
00:01:49,840 --> 00:01:52,840
features for each new browsing

56
00:01:52,840 --> 00:01:54,320
environment

57
00:01:54,320 --> 00:01:56,399
there are also various evasion

58
00:01:56,399 --> 00:01:58,479
techniques that make bot detection even

59
00:01:58,479 --> 00:01:59,360
harder

60
00:01:59,360 --> 00:02:01,520
for example web bots can change their

61
00:02:01,520 --> 00:02:03,520
user agent headers to pretend to be

62
00:02:03,520 --> 00:02:04,560
human users

63
00:02:04,560 --> 00:02:06,079
they can also browse in with an

64
00:02:06,079 --> 00:02:08,239
automated browser to simulate clicking

65
00:02:08,239 --> 00:02:10,000
or navigating behavior

66
00:02:10,000 --> 00:02:12,560
or use a proxy to constantly change ip

67
00:02:12,560 --> 00:02:13,360
addresses

68
00:02:13,360 --> 00:02:16,879
preventing the ip based blocking

69
00:02:16,879 --> 00:02:19,360
current research mostly study on public

70
00:02:19,360 --> 00:02:20,560
web server traffic

71
00:02:20,560 --> 00:02:22,560
where it is difficult to label mixed

72
00:02:22,560 --> 00:02:24,319
human and bot traffic

73
00:02:24,319 --> 00:02:26,239
and there is no public data set of

74
00:02:26,239 --> 00:02:27,760
purebots available

75
00:02:27,760 --> 00:02:29,920
moreover there is not much study on the

76
00:02:29,920 --> 00:02:33,440
bot impact toward normal websites

77
00:02:33,440 --> 00:02:35,920
our paper answers these questions how

78
00:02:35,920 --> 00:02:38,080
can we build a bot only data set

79
00:02:38,080 --> 00:02:40,239
and what is the population and types of

80
00:02:40,239 --> 00:02:42,400
behavior of malicious spots

81
00:02:42,400 --> 00:02:44,720
and how do bot activities affect web

82
00:02:44,720 --> 00:02:47,599
server security

83
00:02:47,599 --> 00:02:50,080
we answer these questions by introducing

84
00:02:50,080 --> 00:02:52,160
a technique that avoid the issue of

85
00:02:52,160 --> 00:02:54,319
differentiating between users and bots

86
00:02:54,319 --> 00:02:56,720
through the concept of honey sites

87
00:02:56,720 --> 00:02:59,200
we design and build array stairs a

88
00:02:59,200 --> 00:03:01,519
system that provides flexible deployment

89
00:03:01,519 --> 00:03:04,159
and management of honey sites the

90
00:03:04,159 --> 00:03:05,360
honeysights are high

91
00:03:05,360 --> 00:03:07,440
interaction honeypots with real web

92
00:03:07,440 --> 00:03:09,760
applications and full functionality

93
00:03:09,760 --> 00:03:11,120
equipped with a theory of

94
00:03:11,120 --> 00:03:12,800
state-of-the-art fingerprint

95
00:03:12,800 --> 00:03:15,840
and identification techniques based on

96
00:03:15,840 --> 00:03:17,760
the data we capture in a seven month

97
00:03:17,760 --> 00:03:18,400
period

98
00:03:18,400 --> 00:03:20,560
we present a systematic study on the

99
00:03:20,560 --> 00:03:23,680
internet bot traffic

100
00:03:24,239 --> 00:03:26,720
here's the overview of arrays days it

101
00:03:26,720 --> 00:03:27,360
consists

102
00:03:27,360 --> 00:03:29,599
of three parts the first part is

103
00:03:29,599 --> 00:03:30,959
honeyside management

104
00:03:30,959 --> 00:03:32,879
which provides flexible honeysuck

105
00:03:32,879 --> 00:03:35,280
creation the second part is log

106
00:03:35,280 --> 00:03:36,159
aggregation

107
00:03:36,159 --> 00:03:37,840
it has a central server which

108
00:03:37,840 --> 00:03:40,080
periodically collecting log files from

109
00:03:40,080 --> 00:03:41,280
honeysites

110
00:03:41,280 --> 00:03:43,920
the last part is about traffic analysis

111
00:03:43,920 --> 00:03:44,799
it consists

112
00:03:44,799 --> 00:03:46,879
a series of analyzing scripts in order

113
00:03:46,879 --> 00:03:49,360
to extract information from log files

114
00:03:49,360 --> 00:03:52,720
and identify bot activities

115
00:03:52,720 --> 00:03:54,879
the control center determines when and

116
00:03:54,879 --> 00:03:56,640
how to create honey sites

117
00:03:56,640 --> 00:03:58,879
according to the list of domains control

118
00:03:58,879 --> 00:04:02,799
center spawn honey sites using the aws

119
00:04:02,799 --> 00:04:05,280
the next part is our honey site honey

120
00:04:05,280 --> 00:04:06,480
sites are aws

121
00:04:06,480 --> 00:04:08,799
instances populated and distributed

122
00:04:08,799 --> 00:04:10,640
around the world by scripts

123
00:04:10,640 --> 00:04:12,879
installed with real web application and

124
00:04:12,879 --> 00:04:14,000
equipped with various

125
00:04:14,000 --> 00:04:16,160
fingerprinting techniques in the next

126
00:04:16,160 --> 00:04:18,880
page we will introduce what is inside a

127
00:04:18,880 --> 00:04:21,519
single honey site

128
00:04:21,519 --> 00:04:23,440
on the top level the honey site is

129
00:04:23,440 --> 00:04:24,800
running one of the five

130
00:04:24,800 --> 00:04:27,520
web applications currently we selected

131
00:04:27,520 --> 00:04:28,400
wordpress

132
00:04:28,400 --> 00:04:31,840
joomla drupal phpmyadmin and webmin

133
00:04:31,840 --> 00:04:33,919
in order to capture as much information

134
00:04:33,919 --> 00:04:35,360
from bots as possible

135
00:04:35,360 --> 00:04:37,040
we created three levels of

136
00:04:37,040 --> 00:04:40,080
fingerprinting techniques

137
00:04:40,080 --> 00:04:42,320
for browser fingerprinting we created a

138
00:04:42,320 --> 00:04:43,840
variety of tests

139
00:04:43,840 --> 00:04:46,560
for example when we set content security

140
00:04:46,560 --> 00:04:48,880
policy to only allow resources from root

141
00:04:48,880 --> 00:04:49,520
domain

142
00:04:49,520 --> 00:04:51,919
and we ask clients to load the resource

143
00:04:51,919 --> 00:04:53,520
from a random subdomain

144
00:04:53,520 --> 00:04:55,520
clients that honoring the csp will

145
00:04:55,520 --> 00:04:58,080
refuse to load and send csp report

146
00:04:58,080 --> 00:05:01,199
back to our servers in the behavioral

147
00:05:01,199 --> 00:05:02,479
fingerprint part

148
00:05:02,479 --> 00:05:04,560
we test whether the clients have certain

149
00:05:04,560 --> 00:05:06,479
behaviors for example

150
00:05:06,479 --> 00:05:08,160
whether the client is still loading

151
00:05:08,160 --> 00:05:10,080
customized for all four pages when

152
00:05:10,080 --> 00:05:12,560
requested resource is invalid

153
00:05:12,560 --> 00:05:14,639
we inject these four four pages with

154
00:05:14,639 --> 00:05:16,880
javascripts and image resources

155
00:05:16,880 --> 00:05:19,120
if they are loaded it means the client

156
00:05:19,120 --> 00:05:21,120
is not ignoring the error page when the

157
00:05:21,120 --> 00:05:23,360
request is invalid

158
00:05:23,360 --> 00:05:24,960
the caching and resource sharing

159
00:05:24,960 --> 00:05:27,280
behavior is another aspect of behavioral

160
00:05:27,280 --> 00:05:28,560
fingerprinting

161
00:05:28,560 --> 00:05:30,400
in order to make sure that clients are

162
00:05:30,400 --> 00:05:31,919
not sending the same url

163
00:05:31,919 --> 00:05:34,400
over and over again we utilize the cache

164
00:05:34,400 --> 00:05:35,840
breaker

165
00:05:35,840 --> 00:05:38,320
on the bottom level we apply the tos

166
00:05:38,320 --> 00:05:39,600
fingerprinting techniques

167
00:05:39,600 --> 00:05:42,160
on the os and network stack different

168
00:05:42,160 --> 00:05:43,360
tos libraries

169
00:05:43,360 --> 00:05:45,600
have different characteristics which can

170
00:05:45,600 --> 00:05:47,840
allow us to later attribute requests

171
00:05:47,840 --> 00:05:50,560
back to the same software or the machine

172
00:05:50,560 --> 00:05:52,720
the passive attribute is particularly

173
00:05:52,720 --> 00:05:53,600
important

174
00:05:53,600 --> 00:05:56,000
because later we will see if a bot does

175
00:05:56,000 --> 00:05:58,160
not support javascript our system will

176
00:05:58,160 --> 00:05:59,680
not be able to collect browser

177
00:05:59,680 --> 00:06:00,960
fingerprints

178
00:06:00,960 --> 00:06:02,960
for example from the cipher suite

179
00:06:02,960 --> 00:06:04,240
signature algorithm

180
00:06:04,240 --> 00:06:06,800
e curves and extensions we can find from

181
00:06:06,800 --> 00:06:08,080
our signature database

182
00:06:08,080 --> 00:06:10,560
that this tls handshake is initiated

183
00:06:10,560 --> 00:06:11,440
from the basic

184
00:06:11,440 --> 00:06:16,720
go language http request go http client

185
00:06:16,720 --> 00:06:19,120
for the second part of log aggregation

186
00:06:19,120 --> 00:06:21,600
the logs are stored into elasticsearch

187
00:06:21,600 --> 00:06:25,600
clusters for later processing

188
00:06:25,680 --> 00:06:28,160
for our experiment we registered 100

189
00:06:28,160 --> 00:06:28,880
domains

190
00:06:28,880 --> 00:06:30,479
and make sure they are not registered

191
00:06:30,479 --> 00:06:32,800
ever before to eliminate the effect of

192
00:06:32,800 --> 00:06:34,000
residual trust

193
00:06:34,000 --> 00:06:36,160
then we deploy these domains and not

194
00:06:36,160 --> 00:06:37,759
publicly advertise them

195
00:06:37,759 --> 00:06:40,160
so we will be able to capture a bot only

196
00:06:40,160 --> 00:06:41,520
data set

197
00:06:41,520 --> 00:06:44,240
we used a central server to collect logs

198
00:06:44,240 --> 00:06:46,319
from all 100 honey sites

199
00:06:46,319 --> 00:06:48,639
in the next part we present our data

200
00:06:48,639 --> 00:06:50,800
that captured from the seven-month-long

201
00:06:50,800 --> 00:06:53,280
experiment

202
00:06:53,280 --> 00:06:55,599
our data set contains seven month period

203
00:06:55,599 --> 00:06:57,759
of data from january 24th

204
00:06:57,759 --> 00:07:01,639
to august 24 2020. the data set contains

205
00:07:01,639 --> 00:07:03,680
26.4 million requests

206
00:07:03,680 --> 00:07:08,319
with 287 000 unique ip addresses

207
00:07:08,319 --> 00:07:10,880
the total amount of data is over 200

208
00:07:10,880 --> 00:07:13,199
gigabytes

209
00:07:13,199 --> 00:07:15,599
from our data set we continue to observe

210
00:07:15,599 --> 00:07:18,000
new traffic from newly emerged about ip

211
00:07:18,000 --> 00:07:18,639
addresses

212
00:07:18,639 --> 00:07:21,039
even after seven months the daily

213
00:07:21,039 --> 00:07:23,199
requests are gradually increasing as

214
00:07:23,199 --> 00:07:24,400
more bots discover

215
00:07:24,400 --> 00:07:28,479
our website we also interested on how

216
00:07:28,479 --> 00:07:29,440
they found us

217
00:07:29,440 --> 00:07:32,160
so we are analyzed about host header

218
00:07:32,160 --> 00:07:34,560
there are 44 percent of bots visit us

219
00:07:34,560 --> 00:07:36,560
through a dip address that could be

220
00:07:36,560 --> 00:07:38,800
originated from ipspace scanning

221
00:07:38,800 --> 00:07:41,520
or network monitoring there are 26

222
00:07:41,520 --> 00:07:43,919
percent of bots visit us through domain

223
00:07:43,919 --> 00:07:46,160
we could be scanning the dns zone files

224
00:07:46,160 --> 00:07:48,800
or certificate transparency logs there

225
00:07:48,800 --> 00:07:50,879
are 30 percent of bots do not present

226
00:07:50,879 --> 00:07:53,840
any host header

227
00:07:54,080 --> 00:07:56,319
in this part we present on the resources

228
00:07:56,319 --> 00:07:57,520
but interested

229
00:07:57,520 --> 00:07:59,599
the numbers in each cell represent a

230
00:07:59,599 --> 00:08:01,919
specific url distribution over five

231
00:08:01,919 --> 00:08:02,560
different web

232
00:08:02,560 --> 00:08:05,840
applications moreover the icon on each

233
00:08:05,840 --> 00:08:06,240
cell

234
00:08:06,240 --> 00:08:08,240
indicates the availability of a certain

235
00:08:08,240 --> 00:08:10,800
resource a tick mark means the resource

236
00:08:10,800 --> 00:08:11,599
exists

237
00:08:11,599 --> 00:08:14,080
a cross mark means it does not and the

238
00:08:14,080 --> 00:08:15,759
forbidden mark means the resource

239
00:08:15,759 --> 00:08:18,240
exists on the server but not accessible

240
00:08:18,240 --> 00:08:19,840
for clients

241
00:08:19,840 --> 00:08:22,080
as we can see from heat map these

242
00:08:22,080 --> 00:08:24,400
requests are not evenly distributed

243
00:08:24,400 --> 00:08:27,039
which means bots are mostly application

244
00:08:27,039 --> 00:08:28,400
specific

245
00:08:28,400 --> 00:08:30,319
for example thoughts found the website

246
00:08:30,319 --> 00:08:31,680
is running the wordpress

247
00:08:31,680 --> 00:08:33,679
then they start targeting the login page

248
00:08:33,679 --> 00:08:35,519
of wplogin.php

249
00:08:35,519 --> 00:08:40,880
wp admin and xmrpc.php

250
00:08:40,880 --> 00:08:43,279
we found that most popular uris are

251
00:08:43,279 --> 00:08:46,560
login endpoints for each web application

252
00:08:46,560 --> 00:08:48,680
another interesting observation is the

253
00:08:48,680 --> 00:08:50,320
changelog.txt requests

254
00:08:50,320 --> 00:08:52,959
are only on drupal instances but it does

255
00:08:52,959 --> 00:08:55,360
not exist on our instances

256
00:08:55,360 --> 00:08:57,839
this is because the file exists on an

257
00:08:57,839 --> 00:08:59,279
older version of drupal

258
00:08:59,279 --> 00:09:01,120
and this action is about trying to

259
00:09:01,120 --> 00:09:02,800
fingerprint our applications

260
00:09:02,800 --> 00:09:07,199
to determine the exact version of drupal

261
00:09:07,440 --> 00:09:09,680
in the aspect of body intention we

262
00:09:09,680 --> 00:09:11,440
categorize both as benign

263
00:09:11,440 --> 00:09:14,000
malicious and gray by their intention

264
00:09:14,000 --> 00:09:15,680
and activities

265
00:09:15,680 --> 00:09:17,600
benign buds are asking for valid

266
00:09:17,600 --> 00:09:20,080
resources similar to a normal browser

267
00:09:20,080 --> 00:09:21,839
where malicious bots are sending

268
00:09:21,839 --> 00:09:24,399
unsolicited post requests toward login

269
00:09:24,399 --> 00:09:27,040
endpoints or they send invalid requests

270
00:09:27,040 --> 00:09:29,600
trying to exploit vulnerabilities

271
00:09:29,600 --> 00:09:31,680
when they cannot be categorized either

272
00:09:31,680 --> 00:09:33,279
benign or malicious

273
00:09:33,279 --> 00:09:36,399
they fall into the gray category overall

274
00:09:36,399 --> 00:09:37,920
we have 57

275
00:09:37,920 --> 00:09:40,640
of malicious requests 1.3 percent of

276
00:09:40,640 --> 00:09:41,760
benign requests

277
00:09:41,760 --> 00:09:46,080
and 41.7 of gray requests

278
00:09:46,720 --> 00:09:48,800
benign bots are mostly search engine

279
00:09:48,800 --> 00:09:51,440
bots academic and industry scanners like

280
00:09:51,440 --> 00:09:52,320
google bot

281
00:09:52,320 --> 00:09:55,120
bing bot or internet archive we used

282
00:09:55,120 --> 00:09:57,839
reverse dns verification to verify their

283
00:09:57,839 --> 00:10:00,240
identity

284
00:10:00,240 --> 00:10:02,560
the malicious bots on the other hand

285
00:10:02,560 --> 00:10:04,640
including credential boot force attempts

286
00:10:04,640 --> 00:10:06,320
and reconnaissance attempts which

287
00:10:06,320 --> 00:10:08,800
includes application fingerprinting

288
00:10:08,800 --> 00:10:11,040
exploitation attempts scanning for

289
00:10:11,040 --> 00:10:12,720
public reachable backdoors

290
00:10:12,720 --> 00:10:15,839
or unprotected sensitive files

291
00:10:15,839 --> 00:10:18,640
there are 50 of the ip addresses only

292
00:10:18,640 --> 00:10:19,920
sent a single request

293
00:10:19,920 --> 00:10:22,000
and did not exhibit any obviously

294
00:10:22,000 --> 00:10:23,440
malicious behavior

295
00:10:23,440 --> 00:10:26,079
which require future explorations about

296
00:10:26,079 --> 00:10:28,720
their identity

297
00:10:28,720 --> 00:10:31,279
we also compared our malicious ip lists

298
00:10:31,279 --> 00:10:33,279
to several public online block list

299
00:10:33,279 --> 00:10:36,079
databases we collect information about

300
00:10:36,079 --> 00:10:38,560
malicious ip addresses from nine popular

301
00:10:38,560 --> 00:10:40,160
ip block lists

302
00:10:40,160 --> 00:10:42,640
unfortunately there are only 13 percent

303
00:10:42,640 --> 00:10:44,240
of malicious ip addresses

304
00:10:44,240 --> 00:10:46,640
from our data set appeared in any of the

305
00:10:46,640 --> 00:10:48,240
online databases

306
00:10:48,240 --> 00:10:50,480
this demonstrates the limited coverage

307
00:10:50,480 --> 00:10:53,600
of existing block lists

308
00:10:53,600 --> 00:10:55,519
to better understand the nature of these

309
00:10:55,519 --> 00:10:58,399
bots we use the ip2 location database to

310
00:10:58,399 --> 00:11:00,800
obtain the type of location of all ip

311
00:11:00,800 --> 00:11:02,800
addresses in our data set

312
00:11:02,800 --> 00:11:04,880
contrary to our expectation that bots

313
00:11:04,880 --> 00:11:07,120
will be located in data centers

314
00:11:07,120 --> 00:11:09,200
a large portion of bots are actually

315
00:11:09,200 --> 00:11:12,399
located in the residential ip space

316
00:11:12,399 --> 00:11:14,800
in the aspect of javascript support we

317
00:11:14,800 --> 00:11:17,040
found only 0.63

318
00:11:17,040 --> 00:11:19,760
of bots are actually executed javascript

319
00:11:19,760 --> 00:11:21,200
we provided

320
00:11:21,200 --> 00:11:22,800
this shows a limitation of

321
00:11:22,800 --> 00:11:24,480
javascript-based fingerprinting

322
00:11:24,480 --> 00:11:25,200
techniques

323
00:11:25,200 --> 00:11:29,120
which relies on the client capabilities

324
00:11:29,120 --> 00:11:31,360
on the other hand tls fingerprinting

325
00:11:31,360 --> 00:11:33,600
provides us very useful information of

326
00:11:33,600 --> 00:11:34,720
bots

327
00:11:34,720 --> 00:11:38,240
overall we have 558 unique tls

328
00:11:38,240 --> 00:11:38,959
fingerprint

329
00:11:38,959 --> 00:11:42,079
in total 10 million tls fingerprints

330
00:11:42,079 --> 00:11:43,600
most popular fingerprints are

331
00:11:43,600 --> 00:11:45,680
categorized to 14 tools

332
00:11:45,680 --> 00:11:48,399
and a total of 14 tools covered more

333
00:11:48,399 --> 00:11:49,920
than 97 percent

334
00:11:49,920 --> 00:11:53,120
of ti's fingerprints note that

335
00:11:53,120 --> 00:11:55,279
bots only need to support https

336
00:11:55,279 --> 00:11:58,160
connection compared to 0.63 percent of

337
00:11:58,160 --> 00:12:00,959
bots are capable of executing javascript

338
00:12:00,959 --> 00:12:03,839
35 percent of bots use the https

339
00:12:03,839 --> 00:12:04,639
connection

340
00:12:04,639 --> 00:12:08,000
even though it's optional

341
00:12:08,399 --> 00:12:10,560
in order to prove the effectiveness of

342
00:12:10,560 --> 00:12:11,920
tos fingerprinting

343
00:12:11,920 --> 00:12:14,000
we use the ground truth search engine

344
00:12:14,000 --> 00:12:16,399
box to verify the accuracy of tos

345
00:12:16,399 --> 00:12:17,680
fingerprinting

346
00:12:17,680 --> 00:12:19,360
the results show that the tls

347
00:12:19,360 --> 00:12:21,040
fingerprint can identify

348
00:12:21,040 --> 00:12:23,440
all search engine bots then we searched

349
00:12:23,440 --> 00:12:24,639
for our requests

350
00:12:24,639 --> 00:12:26,800
in our data set and we found several

351
00:12:26,800 --> 00:12:29,120
mismatched in their stated user agents

352
00:12:29,120 --> 00:12:32,560
and the trs fingerprints let's take a

353
00:12:32,560 --> 00:12:34,720
look at an example of cloaking and

354
00:12:34,720 --> 00:12:35,760
evasion

355
00:12:35,760 --> 00:12:37,680
these requests have the gold language

356
00:12:37,680 --> 00:12:38,880
http request

357
00:12:38,880 --> 00:12:41,600
tos fingerprint but it says in the user

358
00:12:41,600 --> 00:12:42,399
agent

359
00:12:42,399 --> 00:12:46,160
i am a firefox browser on ubuntu

360
00:12:46,160 --> 00:12:49,440
this is not a special case overall we

361
00:12:49,440 --> 00:12:49,959
found

362
00:12:49,959 --> 00:12:53,279
86.2 percent of bots claim to be firefox

363
00:12:53,279 --> 00:12:54,560
or chrome browsers

364
00:12:54,560 --> 00:12:57,680
but actually they're not for example

365
00:12:57,680 --> 00:13:00,639
on the bot claiming to be chrome 82 of

366
00:13:00,639 --> 00:13:00,959
them

367
00:13:00,959 --> 00:13:03,440
are actually not chrome only 20 percent

368
00:13:03,440 --> 00:13:05,440
of them are from rio chrome

369
00:13:05,440 --> 00:13:08,800
similarly 98 of firefox requests are

370
00:13:08,800 --> 00:13:11,120
actually not from firefox browsers

371
00:13:11,120 --> 00:13:14,000
they are either from golang http request

372
00:13:14,000 --> 00:13:17,120
or perl requests

373
00:13:17,200 --> 00:13:19,600
on the security vulnerability aspect we

374
00:13:19,600 --> 00:13:21,519
found that public vulnerabilities are

375
00:13:21,519 --> 00:13:23,279
quickly being abused

376
00:13:23,279 --> 00:13:25,839
for example a vulnerability of netgear

377
00:13:25,839 --> 00:13:28,399
router is released on march 18th

378
00:13:28,399 --> 00:13:30,560
and we immediately observed it just a

379
00:13:30,560 --> 00:13:32,720
few hours it went public

380
00:13:32,720 --> 00:13:34,720
there is another exploit that went

381
00:13:34,720 --> 00:13:36,480
public on june 30th

382
00:13:36,480 --> 00:13:39,839
that was abused at the same day

383
00:13:39,839 --> 00:13:42,480
overall we observed requests that try to

384
00:13:42,480 --> 00:13:43,120
exploit

385
00:13:43,120 --> 00:13:44,959
five remote command execution

386
00:13:44,959 --> 00:13:46,720
vulnerabilities short after the

387
00:13:46,720 --> 00:13:48,800
vulnerability went public

388
00:13:48,800 --> 00:13:51,120
the short period of weaponizing public

389
00:13:51,120 --> 00:13:51,839
employees

390
00:13:51,839 --> 00:13:54,320
remind us that even if you host an

391
00:13:54,320 --> 00:13:55,839
unpopular website

392
00:13:55,839 --> 00:13:58,079
deciding to patch on vulnerability over

393
00:13:58,079 --> 00:14:02,639
the weekend may already be too late

394
00:14:02,639 --> 00:14:04,959
in summary we have these takeaways

395
00:14:04,959 --> 00:14:06,880
firstly from the statistics

396
00:14:06,880 --> 00:14:08,959
we found that any online website will

397
00:14:08,959 --> 00:14:10,880
receive more than a thousand requests

398
00:14:10,880 --> 00:14:11,680
per day

399
00:14:11,680 --> 00:14:14,720
only 3 of them can be clearly identified

400
00:14:14,720 --> 00:14:16,079
as benign

401
00:14:16,079 --> 00:14:18,560
secondly bots are highly selective

402
00:14:18,560 --> 00:14:21,839
targeting the easy to exploit endpoints

403
00:14:21,839 --> 00:14:24,399
we also found 97 percent of bots are

404
00:14:24,399 --> 00:14:26,399
rudimentary http requests

405
00:14:26,399 --> 00:14:28,639
by pretending to be browsers

406
00:14:28,639 --> 00:14:30,560
unfortunately only 13

407
00:14:30,560 --> 00:14:33,040
of bot ip addresses appeared in online

408
00:14:33,040 --> 00:14:34,000
block lists

409
00:14:34,000 --> 00:14:36,800
which indicates their limited coverage

410
00:14:36,800 --> 00:14:38,800
while most bots are not capable of

411
00:14:38,800 --> 00:14:40,399
executing javascripts

412
00:14:40,399 --> 00:14:42,720
tos fingerprinting are effective against

413
00:14:42,720 --> 00:14:44,959
bot cloaking and evasion

414
00:14:44,959 --> 00:14:46,880
on the security exploits they are

415
00:14:46,880 --> 00:14:48,160
quickly being abused

416
00:14:48,160 --> 00:14:51,120
as fast as the same day in order to

417
00:14:51,120 --> 00:14:53,199
contribute about detection research

418
00:14:53,199 --> 00:14:55,040
we made our data set available to

419
00:14:55,040 --> 00:14:56,880
researchers upon request

420
00:14:56,880 --> 00:14:58,760
thank you for listening to our

421
00:14:58,760 --> 00:15:01,760
presentation

