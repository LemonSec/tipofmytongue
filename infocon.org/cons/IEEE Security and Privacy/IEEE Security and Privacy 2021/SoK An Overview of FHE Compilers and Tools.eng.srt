1
00:00:00,160 --> 00:00:01,920
hi i'm alex and i'm going to talk about

2
00:00:01,920 --> 00:00:03,679
our work on tools to facilitate the

3
00:00:03,679 --> 00:00:05,120
development of fully homomorphic

4
00:00:05,120 --> 00:00:06,560
encryption applications

5
00:00:06,560 --> 00:00:08,559
this is joint work with particle both

6
00:00:08,559 --> 00:00:10,160
also from eth0rig

7
00:00:10,160 --> 00:00:12,320
fully morphing encryption or fha allows

8
00:00:12,320 --> 00:00:13,840
a third party to perform arbitrary

9
00:00:13,840 --> 00:00:15,599
computations on encrypted data

10
00:00:15,599 --> 00:00:16,880
that means the user can encrypt some

11
00:00:16,880 --> 00:00:18,560
values and send them to the cloud which

12
00:00:18,560 --> 00:00:20,080
can then perform computations over the

13
00:00:20,080 --> 00:00:21,840
ciphertext without learning the inputs

14
00:00:21,840 --> 00:00:23,439
or the computation results

15
00:00:23,439 --> 00:00:25,039
of course the client can still equip the

16
00:00:25,039 --> 00:00:26,560
resulting ciphertext to retrieve the

17
00:00:26,560 --> 00:00:27,920
computation result

18
00:00:27,920 --> 00:00:30,240
effectively using fhe we can delegate

19
00:00:30,240 --> 00:00:31,760
data processing without having to give

20
00:00:31,760 --> 00:00:33,200
away data access

21
00:00:33,200 --> 00:00:35,120
efficient is a major leap towards a

22
00:00:35,120 --> 00:00:36,880
private digital world and enables a wide

23
00:00:36,880 --> 00:00:38,399
variety of applications

24
00:00:38,399 --> 00:00:40,239
for example outsourcing medical data

25
00:00:40,239 --> 00:00:42,079
currently requires expensive dedicated

26
00:00:42,079 --> 00:00:42,800
setups

27
00:00:42,800 --> 00:00:44,960
using fhe one could use cheaper standard

28
00:00:44,960 --> 00:00:46,800
cloud services while still protecting

29
00:00:46,800 --> 00:00:48,320
the sensitive and highly regulated

30
00:00:48,320 --> 00:00:49,280
patient data

31
00:00:49,280 --> 00:00:51,199
fhe can also be used to accelerate

32
00:00:51,199 --> 00:00:52,719
common secure computation tasks like

33
00:00:52,719 --> 00:00:54,160
private set intersection

34
00:00:54,160 --> 00:00:56,160
here fhe is now being deployed in

35
00:00:56,160 --> 00:00:58,160
microsoft's edge browser

36
00:00:58,160 --> 00:00:59,920
another example is privacy preserving

37
00:00:59,920 --> 00:01:01,280
machine learning as a service

38
00:01:01,280 --> 00:01:02,800
where a platform can offer predictions

39
00:01:02,800 --> 00:01:04,239
and classifications of our clients

40
00:01:04,239 --> 00:01:06,080
encrypted data without having to share

41
00:01:06,080 --> 00:01:08,000
their proprietary model

42
00:01:08,000 --> 00:01:09,600
here we see many activities from

43
00:01:09,600 --> 00:01:11,920
startups big players and governments

44
00:01:11,920 --> 00:01:13,280
given this and the wide range of

45
00:01:13,280 --> 00:01:14,080
applications

46
00:01:14,080 --> 00:01:16,159
why are we only now starting to see fhe

47
00:01:16,159 --> 00:01:18,080
appear in real-world deployments

48
00:01:18,080 --> 00:01:19,920
while fhe has been proposed under a

49
00:01:19,920 --> 00:01:21,520
slightly different name as far back as

50
00:01:21,520 --> 00:01:22,320
78

51
00:01:22,320 --> 00:01:24,000
it remained an unachievable goal for

52
00:01:24,000 --> 00:01:26,400
many decades while partially monomorphic

53
00:01:26,400 --> 00:01:28,000
schemes have been known for decades

54
00:01:28,000 --> 00:01:29,360
progress towards fully ammo of

55
00:01:29,360 --> 00:01:30,799
encryption really only started to

56
00:01:30,799 --> 00:01:32,799
accelerate in the 2000s

57
00:01:32,799 --> 00:01:34,320
even then it wasn't until the

58
00:01:34,320 --> 00:01:35,680
breakthrough resolved by quick generate

59
00:01:35,680 --> 00:01:36,799
in 2009

60
00:01:36,799 --> 00:01:38,320
that we had schemes that could support

61
00:01:38,320 --> 00:01:40,320
arbitrary computations gentry's initial

62
00:01:40,320 --> 00:01:42,079
scheme was asymptotically efficient but

63
00:01:42,079 --> 00:01:43,600
practically unimplementable

64
00:01:43,600 --> 00:01:45,280
however follow-up work soon allowed a

65
00:01:45,280 --> 00:01:47,439
first implementation nevertheless these

66
00:01:47,439 --> 00:01:48,720
first generation schemes still took

67
00:01:48,720 --> 00:01:50,320
around half an hour to perform a single

68
00:01:50,320 --> 00:01:51,200
multiplication

69
00:01:51,200 --> 00:01:52,720
a slowdown of over a trillion times

70
00:01:52,720 --> 00:01:54,079
compared to a standard cpu

71
00:01:54,079 --> 00:01:55,759
multiplication instruction

72
00:01:55,759 --> 00:01:57,280
second generation schemes emerge and

73
00:01:57,280 --> 00:01:58,399
trade off some theoretical

74
00:01:58,399 --> 00:02:00,079
expressiveness for impressive practical

75
00:02:00,079 --> 00:02:00,960
performance gain

76
00:02:00,960 --> 00:02:02,640
bringing multiplication times down to

77
00:02:02,640 --> 00:02:04,320
seconds rather in minutes

78
00:02:04,320 --> 00:02:06,240
finally recent third generation schemes

79
00:02:06,240 --> 00:02:07,759
have brought multiplication times down

80
00:02:07,759 --> 00:02:08,000
into

81
00:02:08,000 --> 00:02:10,239
the range of a few tens of milliseconds

82
00:02:10,239 --> 00:02:12,560
today fhe is practical for a wide set of

83
00:02:12,560 --> 00:02:13,440
applications

84
00:02:13,440 --> 00:02:15,040
and performance is no longer the major

85
00:02:15,040 --> 00:02:16,480
barrier to adoption

86
00:02:16,480 --> 00:02:18,239
given this what are the remaining

87
00:02:18,239 --> 00:02:20,800
obstacles on the path to adoption

88
00:02:20,800 --> 00:02:22,640
going from the complex underlying math

89
00:02:22,640 --> 00:02:24,239
behind modern effigy schemes to a

90
00:02:24,239 --> 00:02:25,920
practical deployment still requires a

91
00:02:25,920 --> 00:02:27,840
significant amount of expertise and

92
00:02:27,840 --> 00:02:29,920
poses a wide variety of challenges

93
00:02:29,920 --> 00:02:31,360
while some are common issues of working

94
00:02:31,360 --> 00:02:33,360
with crypto many are unique challenges

95
00:02:33,360 --> 00:02:34,720
inherent to fha

96
00:02:34,720 --> 00:02:36,319
as a result we see non-experts

97
00:02:36,319 --> 00:02:38,080
frequently struggle to develop fhe

98
00:02:38,080 --> 00:02:39,440
solutions that are both secure and

99
00:02:39,440 --> 00:02:40,160
efficient

100
00:02:40,160 --> 00:02:42,000
with naive approaches often lacking many

101
00:02:42,000 --> 00:02:43,599
orders of magnitude behind expert

102
00:02:43,599 --> 00:02:46,160
written state-of-the-art solutions

103
00:02:46,160 --> 00:02:48,080
the fhe community is trying to close

104
00:02:48,080 --> 00:02:49,920
this gap by providing tools that assist

105
00:02:49,920 --> 00:02:51,840
developers in translating their ideas

106
00:02:51,840 --> 00:02:53,840
into fhe applications securely and

107
00:02:53,840 --> 00:02:55,360
efficiently

108
00:02:55,360 --> 00:02:57,200
recently we've seen a flurry of work in

109
00:02:57,200 --> 00:02:59,519
this space which motivated this soc

110
00:02:59,519 --> 00:03:01,599
we wanted to answer questions about what

111
00:03:01,599 --> 00:03:03,599
makes developing fhe applications so

112
00:03:03,599 --> 00:03:04,480
hard

113
00:03:04,480 --> 00:03:06,480
compare the design decisions taken in

114
00:03:06,480 --> 00:03:08,319
existing tools and how they address some

115
00:03:08,319 --> 00:03:10,080
of fhe's complexities

116
00:03:10,080 --> 00:03:12,080
highlight where barriers to entry have

117
00:03:12,080 --> 00:03:13,440
already been lowered and where they

118
00:03:13,440 --> 00:03:14,319
still remain

119
00:03:14,319 --> 00:03:16,400
and finally outline future directions

120
00:03:16,400 --> 00:03:18,480
for fhe tool development

121
00:03:18,480 --> 00:03:20,000
in addition we want to provide

122
00:03:20,000 --> 00:03:21,599
developers with a guide to both the

123
00:03:21,599 --> 00:03:22,640
existing tools

124
00:03:22,640 --> 00:03:24,480
and more general aspects of fhe

125
00:03:24,480 --> 00:03:26,239
development ideally

126
00:03:26,239 --> 00:03:28,799
our paper should help non-experts decide

127
00:03:28,799 --> 00:03:30,560
how to approach development of fhe

128
00:03:30,560 --> 00:03:31,680
applications

129
00:03:31,680 --> 00:03:34,319
including when to use which tool in

130
00:03:34,319 --> 00:03:36,000
order to evaluate the different tools

131
00:03:36,000 --> 00:03:36,560
however

132
00:03:36,560 --> 00:03:37,920
we first need to understand the

133
00:03:37,920 --> 00:03:39,120
challenges that they're trying to

134
00:03:39,120 --> 00:03:40,879
address

135
00:03:40,879 --> 00:03:43,360
while fha poses a lot of challenges we

136
00:03:43,360 --> 00:03:45,120
can roughly categorize them into two

137
00:03:45,120 --> 00:03:46,080
groups

138
00:03:46,080 --> 00:03:48,000
first we have cryptographic challenges

139
00:03:48,000 --> 00:03:49,440
that are closely related to the

140
00:03:49,440 --> 00:03:51,680
specifics of current fhe schemes

141
00:03:51,680 --> 00:03:53,599
for example selecting parameters that

142
00:03:53,599 --> 00:03:54,959
are both secure and efficient for the

143
00:03:54,959 --> 00:03:56,560
given application

144
00:03:56,560 --> 00:03:58,400
on the other hand we have higher level

145
00:03:58,400 --> 00:04:00,159
challenges that arise due to the unusual

146
00:04:00,159 --> 00:04:01,840
computation model that is inherent in

147
00:04:01,840 --> 00:04:03,760
the definition of effigy

148
00:04:03,760 --> 00:04:05,120
these include the lack of branching

149
00:04:05,120 --> 00:04:06,879
instructions and the need to exploit

150
00:04:06,879 --> 00:04:08,959
clever approximations and optimizations

151
00:04:08,959 --> 00:04:11,200
to achieve the full potential of effigy

152
00:04:11,200 --> 00:04:13,200
in terms of tools libraries tend to

153
00:04:13,200 --> 00:04:15,040
focus on the first group for example by

154
00:04:15,040 --> 00:04:16,720
implementing the various transformations

155
00:04:16,720 --> 00:04:18,320
required to efficiently compute

156
00:04:18,320 --> 00:04:19,759
multiplications between large

157
00:04:19,759 --> 00:04:22,479
ciphertexts compilers meanwhile

158
00:04:22,479 --> 00:04:24,080
generally focus on helping developers

159
00:04:24,080 --> 00:04:25,360
deal with the translation between

160
00:04:25,360 --> 00:04:27,199
standard imperative programming

161
00:04:27,199 --> 00:04:29,280
and fag's more circuit-based computation

162
00:04:29,280 --> 00:04:30,320
model

163
00:04:30,320 --> 00:04:32,000
while we can't explore all challenges in

164
00:04:32,000 --> 00:04:34,320
detail today i want to briefly highlight

165
00:04:34,320 --> 00:04:36,240
the crypto side before diving into the

166
00:04:36,240 --> 00:04:38,720
computational model of fhe

167
00:04:38,720 --> 00:04:40,560
all current fha schemes share a common

168
00:04:40,560 --> 00:04:42,479
cryptographic structure with security

169
00:04:42,479 --> 00:04:43,919
based on a learning with errors

170
00:04:43,919 --> 00:04:44,880
assumption

171
00:04:44,880 --> 00:04:47,600
here we specifically consider ring lwe

172
00:04:47,600 --> 00:04:49,600
which operates over polynomials which we

173
00:04:49,600 --> 00:04:51,120
will abstract to simple vectors

174
00:04:51,120 --> 00:04:52,639
and for now even just a single vector

175
00:04:52,639 --> 00:04:55,120
slot to encrypt we take not just a

176
00:04:55,120 --> 00:04:56,160
random mask a

177
00:04:56,160 --> 00:04:58,160
times the secret key s but also some

178
00:04:58,160 --> 00:04:59,919
small noise e which is essential for

179
00:04:59,919 --> 00:05:00,960
security

180
00:05:00,960 --> 00:05:02,960
adding this up with the message m gives

181
00:05:02,960 --> 00:05:05,280
us a freshly encrypted ciphertext

182
00:05:05,280 --> 00:05:06,720
as we go and perform homomorphic

183
00:05:06,720 --> 00:05:08,960
operations the noise increases

184
00:05:08,960 --> 00:05:11,520
linearly when we add two ciphertexts and

185
00:05:11,520 --> 00:05:13,840
quadratically when we multiply

186
00:05:13,840 --> 00:05:16,080
eventually the noise will grow too large

187
00:05:16,080 --> 00:05:17,840
and decryption will fail

188
00:05:17,840 --> 00:05:20,000
to prevent this an operation known as

189
00:05:20,000 --> 00:05:20,880
bootstrapping

190
00:05:20,880 --> 00:05:22,639
can homomorphically reduce the noise

191
00:05:22,639 --> 00:05:24,479
back down this however

192
00:05:24,479 --> 00:05:27,360
comes at significant computational costs

193
00:05:27,360 --> 00:05:28,240
as a result

194
00:05:28,240 --> 00:05:30,080
developers need to constantly balance

195
00:05:30,080 --> 00:05:31,919
future noise growth against the cost of

196
00:05:31,919 --> 00:05:32,880
bootstrapping

197
00:05:32,880 --> 00:05:34,479
the interaction between computation and

198
00:05:34,479 --> 00:05:36,400
noise growth also means that parameters

199
00:05:36,400 --> 00:05:37,759
must be carefully chosen per

200
00:05:37,759 --> 00:05:39,919
application developers must ensure that

201
00:05:39,919 --> 00:05:41,520
the parameters chosen are large enough

202
00:05:41,520 --> 00:05:43,120
to ensure security and print noise

203
00:05:43,120 --> 00:05:43,919
overflow

204
00:05:43,919 --> 00:05:46,160
at the same time parameters should be as

205
00:05:46,160 --> 00:05:48,400
small as possible for efficiency

206
00:05:48,400 --> 00:05:50,000
finding the smallest possible parameters

207
00:05:50,000 --> 00:05:52,080
for a given application is non-trivial

208
00:05:52,080 --> 00:05:54,160
and tool generated parameters tend to be

209
00:05:54,160 --> 00:05:56,400
secure but highly inefficient

210
00:05:56,400 --> 00:05:58,400
however rather than finding the best

211
00:05:58,400 --> 00:05:59,840
point in that right triangle

212
00:05:59,840 --> 00:06:01,360
it is frequently more important to

213
00:06:01,360 --> 00:06:02,880
optimize the program in a way

214
00:06:02,880 --> 00:06:04,560
that limits noise growth and brings down

215
00:06:04,560 --> 00:06:06,560
the entire area

216
00:06:06,560 --> 00:06:08,000
this leads us to the engineering

217
00:06:08,000 --> 00:06:09,840
challenges of actually designing and

218
00:06:09,840 --> 00:06:11,039
writing a program for

219
00:06:11,039 --> 00:06:13,120
fha in standard imperative programming

220
00:06:13,120 --> 00:06:14,880
we rely heavily on branching based

221
00:06:14,880 --> 00:06:16,319
control for statements

222
00:06:16,319 --> 00:06:18,800
however if a and b are encrypted the

223
00:06:18,800 --> 00:06:20,479
security properties guarantee that the

224
00:06:20,479 --> 00:06:21,840
server learns nothing about the

225
00:06:21,840 --> 00:06:22,639
computation

226
00:06:22,639 --> 00:06:24,319
not even the single bit required for

227
00:06:24,319 --> 00:06:26,639
branching as we can no longer truly

228
00:06:26,639 --> 00:06:27,199
branch

229
00:06:27,199 --> 00:06:29,120
we have to evaluate both branches

230
00:06:29,120 --> 00:06:30,880
compute the condition on the encryption

231
00:06:30,880 --> 00:06:32,840
and then multiplex between the two

232
00:06:32,840 --> 00:06:34,000
results

233
00:06:34,000 --> 00:06:35,600
we lose the performance benefits of

234
00:06:35,600 --> 00:06:37,360
branching by always evaluating both

235
00:06:37,360 --> 00:06:38,080
branches

236
00:06:38,080 --> 00:06:39,520
and we actually incur an even more

237
00:06:39,520 --> 00:06:41,199
significant overhead here since

238
00:06:41,199 --> 00:06:42,880
comparisons aren't polynomial

239
00:06:42,880 --> 00:06:44,560
and therefore cannot be expressed easily

240
00:06:44,560 --> 00:06:46,560
as operations over integers

241
00:06:46,560 --> 00:06:48,319
instead of encrypting the ins a and b

242
00:06:48,319 --> 00:06:49,919
into one ciphertext each

243
00:06:49,919 --> 00:06:51,440
we now have to encrypt each of their

244
00:06:51,440 --> 00:06:53,039
bits individually and use

245
00:06:53,039 --> 00:06:55,680
fhe operations mod 2 to emulate binary

246
00:06:55,680 --> 00:06:57,680
comparison addition and multiplication

247
00:06:57,680 --> 00:06:59,039
circuits

248
00:06:59,039 --> 00:07:00,880
while the number of compilers assist in

249
00:07:00,880 --> 00:07:02,880
doing this translation automatically

250
00:07:02,880 --> 00:07:04,560
the circus they generate are frequently

251
00:07:04,560 --> 00:07:07,520
too naive and therefore inefficient

252
00:07:07,520 --> 00:07:08,880
loops where the length depends on the

253
00:07:08,880 --> 00:07:11,120
secret input obviously run into similar

254
00:07:11,120 --> 00:07:12,160
issues

255
00:07:12,160 --> 00:07:14,240
we can apply the multiplexing trick but

256
00:07:14,240 --> 00:07:15,919
we have to evaluate the loop as many

257
00:07:15,919 --> 00:07:17,520
times as theoretically possible

258
00:07:17,520 --> 00:07:19,360
the multiplicative depth of this kind of

259
00:07:19,360 --> 00:07:21,120
circuit quickly explodes and therefore

260
00:07:21,120 --> 00:07:22,479
many schemes cannot perform

261
00:07:22,479 --> 00:07:24,319
any meaningful data dependent looping in

262
00:07:24,319 --> 00:07:26,240
practice while a few compilers support

263
00:07:26,240 --> 00:07:27,919
this kind of loop unrolling the heavy

264
00:07:27,919 --> 00:07:29,840
performance penalty means that it's only

265
00:07:29,840 --> 00:07:31,680
really useful when there's a non-trivial

266
00:07:31,680 --> 00:07:33,680
upper bound on the loop length

267
00:07:33,680 --> 00:07:35,680
however all these restrictions of course

268
00:07:35,680 --> 00:07:37,280
only apply to loops that depend on a

269
00:07:37,280 --> 00:07:39,280
secret input

270
00:07:39,280 --> 00:07:41,120
other loops can of course be trivially

271
00:07:41,120 --> 00:07:43,360
unrolled for loops like this that apply

272
00:07:43,360 --> 00:07:45,520
the same operation to each ciphertext we

273
00:07:45,520 --> 00:07:46,639
can do even better

274
00:07:46,639 --> 00:07:48,479
and use a single fhe operation to

275
00:07:48,479 --> 00:07:50,000
perform the operations in a single

276
00:07:50,000 --> 00:07:53,280
instruction multiple data fashion or cmd

277
00:07:53,280 --> 00:07:54,800
instead of putting the array elements

278
00:07:54,800 --> 00:07:56,560
into individual ciphertext

279
00:07:56,560 --> 00:07:58,639
we can reinterpret a single ciphertext

280
00:07:58,639 --> 00:08:00,160
as an n-dimensional vector

281
00:08:00,160 --> 00:08:02,240
using the chinese remainder theorem

282
00:08:02,240 --> 00:08:03,919
combined with homomorphic rotations of

283
00:08:03,919 --> 00:08:04,720
the slots

284
00:08:04,720 --> 00:08:06,400
we can apply this technique much more

285
00:08:06,400 --> 00:08:08,160
widely but it becomes highly non-trivial

286
00:08:08,160 --> 00:08:10,639
to find the most efficient solution

287
00:08:10,639 --> 00:08:12,560
quite a few compilers support batching

288
00:08:12,560 --> 00:08:14,400
but generally require the developer to

289
00:08:14,400 --> 00:08:16,479
vectorize the algorithm themselves

290
00:08:16,479 --> 00:08:18,160
we're starting to see initial work on

291
00:08:18,160 --> 00:08:19,599
automation in this area

292
00:08:19,599 --> 00:08:21,280
however existing solutions are limited

293
00:08:21,280 --> 00:08:23,759
to certain domain specific tasks

294
00:08:23,759 --> 00:08:25,840
as we can see a lot of challenges remain

295
00:08:25,840 --> 00:08:26,960
to be solved

296
00:08:26,960 --> 00:08:28,720
libraries accelerate fast and efficient

297
00:08:28,720 --> 00:08:30,479
implementations of the underlying fhe

298
00:08:30,479 --> 00:08:31,199
schemes

299
00:08:31,199 --> 00:08:33,440
however parameter selection remains an

300
00:08:33,440 --> 00:08:34,880
open question

301
00:08:34,880 --> 00:08:36,640
compilers meanwhile provide some

302
00:08:36,640 --> 00:08:37,760
assistance with the different

303
00:08:37,760 --> 00:08:39,039
computational model

304
00:08:39,039 --> 00:08:40,958
but of course cannot completely insulate

305
00:08:40,958 --> 00:08:43,599
developers from these considerations

306
00:08:43,599 --> 00:08:45,600
later in our evaluation we will see the

307
00:08:45,600 --> 00:08:47,839
significant impact that optimizations

308
00:08:47,839 --> 00:08:49,519
approximations and the use of simply

309
00:08:49,519 --> 00:08:51,519
batching have on performance

310
00:08:51,519 --> 00:08:53,519
but first i want to talk about how

311
00:08:53,519 --> 00:08:55,040
compilers actually work

312
00:08:55,040 --> 00:08:57,200
the term compiler is used very loosely

313
00:08:57,200 --> 00:08:59,120
in fhe since many are technically

314
00:08:59,120 --> 00:09:00,880
interpreters or libraries

315
00:09:00,880 --> 00:09:02,720
however they all follow the same pattern

316
00:09:02,720 --> 00:09:04,240
of taking a high level program as an

317
00:09:04,240 --> 00:09:05,680
input and spitting out at least

318
00:09:05,680 --> 00:09:06,560
conceptually

319
00:09:06,560 --> 00:09:08,640
an arithmetic circuit ready for fhe

320
00:09:08,640 --> 00:09:10,000
evaluation

321
00:09:10,000 --> 00:09:11,920
therefore the first choice you have to

322
00:09:11,920 --> 00:09:13,760
make is which kind of input language you

323
00:09:13,760 --> 00:09:14,959
want to target

324
00:09:14,959 --> 00:09:16,800
here i don't mean things like c plus

325
00:09:16,800 --> 00:09:19,040
versus java but the level of extraction

326
00:09:19,040 --> 00:09:21,360
you want to offer

327
00:09:21,360 --> 00:09:23,519
for example this is what writing a toy

328
00:09:23,519 --> 00:09:24,959
machine learning model looks like in

329
00:09:24,959 --> 00:09:27,760
seal an fhe library by microsoft

330
00:09:27,760 --> 00:09:29,519
we can compare this to an implementation

331
00:09:29,519 --> 00:09:32,560
in eva a general purpose fhe compiler

332
00:09:32,560 --> 00:09:34,240
consider the code for the activation

333
00:09:34,240 --> 00:09:36,160
function which we approximate it with a

334
00:09:36,160 --> 00:09:38,160
simple polynomial squaring

335
00:09:38,160 --> 00:09:40,160
eva provides operator overloads and

336
00:09:40,160 --> 00:09:41,440
abstracts away the ciphertext

337
00:09:41,440 --> 00:09:42,560
maintenance operations

338
00:09:42,560 --> 00:09:44,560
making it significantly more concise and

339
00:09:44,560 --> 00:09:45,920
readable

340
00:09:45,920 --> 00:09:48,000
this starts to add up as we can see from

341
00:09:48,000 --> 00:09:50,000
the matrix vector product function

342
00:09:50,000 --> 00:09:52,240
this is the eva implementation where the

343
00:09:52,240 --> 00:09:54,240
seal equivalent has been omitted since

344
00:09:54,240 --> 00:09:56,399
it would fill the entire slide

345
00:09:56,399 --> 00:09:58,399
while eva already offers a dramatic

346
00:09:58,399 --> 00:09:59,920
improvement readability

347
00:09:59,920 --> 00:10:01,920
we can go even further when we consider

348
00:10:01,920 --> 00:10:05,680
domain specific tools ngrfhe for example

349
00:10:05,680 --> 00:10:08,079
offers an fhe backend for tensorflow and

350
00:10:08,079 --> 00:10:10,160
we can use tensorflow's functional api

351
00:10:10,160 --> 00:10:12,720
to specify custom fhe specific parts we

352
00:10:12,720 --> 00:10:14,000
can go to an even higher level

353
00:10:14,000 --> 00:10:14,959
presentation

354
00:10:14,959 --> 00:10:16,800
with c-line allowing us to stay in the

355
00:10:16,800 --> 00:10:18,880
keras model description language

356
00:10:18,880 --> 00:10:20,959
this is the most concise program yet but

357
00:10:20,959 --> 00:10:22,800
here we start to lose expressiveness

358
00:10:22,800 --> 00:10:24,720
being limited to predefined model layers

359
00:10:24,720 --> 00:10:26,480
and activation functions

360
00:10:26,480 --> 00:10:28,399
more generally we see a false dichotomy

361
00:10:28,399 --> 00:10:29,839
between powerful assembly style

362
00:10:29,839 --> 00:10:30,480
languages

363
00:10:30,480 --> 00:10:32,399
and restricted domain-specific languages

364
00:10:32,399 --> 00:10:34,000
when there's no inherent reason against

365
00:10:34,000 --> 00:10:35,920
having both types of api available in

366
00:10:35,920 --> 00:10:36,959
one tool

367
00:10:36,959 --> 00:10:38,480
we also see libraries generally

368
00:10:38,480 --> 00:10:39,920
addressing experts and compilers

369
00:10:39,920 --> 00:10:41,680
targeting mostly non-experts

370
00:10:41,680 --> 00:10:43,839
however experts also stand to benefit

371
00:10:43,839 --> 00:10:45,440
from tools that automate tedious work

372
00:10:45,440 --> 00:10:47,600
and reduce time to solution

373
00:10:47,600 --> 00:10:49,120
finally while working with these tools

374
00:10:49,120 --> 00:10:50,880
we noticed a variety of user experience

375
00:10:50,880 --> 00:10:52,800
issues around setup and configuration

376
00:10:52,800 --> 00:10:54,640
and we hope that as these tools mature

377
00:10:54,640 --> 00:10:56,000
we see these issues fade into the

378
00:10:56,000 --> 00:10:57,200
background

379
00:10:57,200 --> 00:10:58,880
now that we know what fhe programs look

380
00:10:58,880 --> 00:11:00,800
like we can look at how compilers

381
00:11:00,800 --> 00:11:02,000
transform them

382
00:11:02,000 --> 00:11:03,120
there are three stages of

383
00:11:03,120 --> 00:11:05,519
transformations and optimizations

384
00:11:05,519 --> 00:11:07,760
first program optimizations can be

385
00:11:07,760 --> 00:11:09,839
static analyses like loop unrolling

386
00:11:09,839 --> 00:11:11,200
which are applied where we still have

387
00:11:11,200 --> 00:11:13,600
high level semantic information

388
00:11:13,600 --> 00:11:15,440
some compilers instead skip straight to

389
00:11:15,440 --> 00:11:16,640
circuit generation

390
00:11:16,640 --> 00:11:18,160
where the program is turned at least

391
00:11:18,160 --> 00:11:20,480
conceptually into a circuit of gates and

392
00:11:20,480 --> 00:11:21,440
wires

393
00:11:21,440 --> 00:11:22,880
this is also where compilers would

394
00:11:22,880 --> 00:11:25,120
insert binary relations for operations

395
00:11:25,120 --> 00:11:27,040
like comparisons

396
00:11:27,040 --> 00:11:29,120
finally the circuit can be optimized

397
00:11:29,120 --> 00:11:31,040
further for example by trying to find a

398
00:11:31,040 --> 00:11:32,640
semantically equivalent circuit

399
00:11:32,640 --> 00:11:35,440
that has lower noise growth again not

400
00:11:35,440 --> 00:11:37,360
all compilers do this and instead many

401
00:11:37,360 --> 00:11:39,200
simply use the generated circuit without

402
00:11:39,200 --> 00:11:41,200
further modification

403
00:11:41,200 --> 00:11:43,360
as we can see there are many different

404
00:11:43,360 --> 00:11:45,600
choices when and what to optimize

405
00:11:45,600 --> 00:11:47,279
and of course different tools have ended

406
00:11:47,279 --> 00:11:48,959
up choosing different approaches

407
00:11:48,959 --> 00:11:50,720
we can see that while optimizations in

408
00:11:50,720 --> 00:11:52,800
general purpose fha compilers cover all

409
00:11:52,800 --> 00:11:54,399
stages of compilation

410
00:11:54,399 --> 00:11:56,399
each individual tool tends to focus on

411
00:11:56,399 --> 00:11:58,560
one specific optimization

412
00:11:58,560 --> 00:12:00,240
some focus on rewriting the input

413
00:12:00,240 --> 00:12:02,160
program using static analysis

414
00:12:02,160 --> 00:12:03,760
and then translate the resulting program

415
00:12:03,760 --> 00:12:05,760
into a circuit fairly directly

416
00:12:05,760 --> 00:12:07,920
others take the input program as is

417
00:12:07,920 --> 00:12:09,680
directly convert it into a circuit

418
00:12:09,680 --> 00:12:12,240
and then start optimizing that circuit

419
00:12:12,240 --> 00:12:12,880
meanwhile

420
00:12:12,880 --> 00:12:14,639
some substitute in handwritten efficient

421
00:12:14,639 --> 00:12:15,920
circuits for binary adders and

422
00:12:15,920 --> 00:12:16,880
multipliers

423
00:12:16,880 --> 00:12:18,560
rather than generating naive ones and

424
00:12:18,560 --> 00:12:21,040
then optimizing the entire circuit

425
00:12:21,040 --> 00:12:22,639
this is also done by machine learning

426
00:12:22,639 --> 00:12:24,720
focus compilers which take this concept

427
00:12:24,720 --> 00:12:26,079
significantly further

428
00:12:26,079 --> 00:12:27,680
since they can provide custom circuit

429
00:12:27,680 --> 00:12:29,360
designs for all possible operations

430
00:12:29,360 --> 00:12:32,079
their more limited input languages allow

431
00:12:32,079 --> 00:12:34,800
in our evaluation we wanted to see which

432
00:12:34,800 --> 00:12:36,320
of these approaches offers the best

433
00:12:36,320 --> 00:12:38,399
performance for common applications

434
00:12:38,399 --> 00:12:39,920
as a first case study application we

435
00:12:39,920 --> 00:12:41,839
consider a modified chi-square test

436
00:12:41,839 --> 00:12:43,839
specifically we consider a variant used

437
00:12:43,839 --> 00:12:45,600
in genome-wide association studies

438
00:12:45,600 --> 00:12:47,279
which can be rearranged into terms that

439
00:12:47,279 --> 00:12:49,680
require only additional multiplication

440
00:12:49,680 --> 00:12:51,519
we compare a variety of compilers

441
00:12:51,519 --> 00:12:53,440
against both a naive baseline

442
00:12:53,440 --> 00:12:55,519
and a manually optimized implementation

443
00:12:55,519 --> 00:12:57,279
both written directly against an fhe

444
00:12:57,279 --> 00:12:58,160
library

445
00:12:58,160 --> 00:13:00,079
we distinguish between tools emulating

446
00:13:00,079 --> 00:13:01,680
binary addition and multiplication

447
00:13:01,680 --> 00:13:02,320
circuits

448
00:13:02,320 --> 00:13:03,839
and those working directly over the

449
00:13:03,839 --> 00:13:05,839
integers with some tools supporting both

450
00:13:05,839 --> 00:13:06,480
modes

451
00:13:06,480 --> 00:13:08,320
we see significant differences even

452
00:13:08,320 --> 00:13:10,240
among similar tools which are due to a

453
00:13:10,240 --> 00:13:11,519
variety of reasons

454
00:13:11,519 --> 00:13:13,279
like less efficient underlying fhe

455
00:13:13,279 --> 00:13:15,440
implementations or inefficient automatic

456
00:13:15,440 --> 00:13:17,360
parameter choices

457
00:13:17,360 --> 00:13:19,680
only the eva compiler manages to achieve

458
00:13:19,680 --> 00:13:21,360
the same performance as our expert

459
00:13:21,360 --> 00:13:22,399
implementation

460
00:13:22,399 --> 00:13:24,639
however eva actually targets approximate

461
00:13:24,639 --> 00:13:25,920
aj over scalars

462
00:13:25,920 --> 00:13:27,680
while approximate he with sufficient

463
00:13:27,680 --> 00:13:29,440
precision worked great here

464
00:13:29,440 --> 00:13:30,959
this might not be the case for all

465
00:13:30,959 --> 00:13:32,720
applications

466
00:13:32,720 --> 00:13:34,560
of course if you work in a specific

467
00:13:34,560 --> 00:13:35,760
domain like ml

468
00:13:35,760 --> 00:13:37,360
you have more do main focus tools to

469
00:13:37,360 --> 00:13:39,360
consider too our second case study

470
00:13:39,360 --> 00:13:41,120
therefore focuses on neural networks for

471
00:13:41,120 --> 00:13:41,760
mnist

472
00:13:41,760 --> 00:13:44,160
handwritten digit recognition tasks we

473
00:13:44,160 --> 00:13:46,480
consider both toy mlp models and more

474
00:13:46,480 --> 00:13:48,480
realistic convolutional neural networks

475
00:13:48,480 --> 00:13:50,720
like the specific cryptonets or the

476
00:13:50,720 --> 00:13:52,639
standard linux 5 model

477
00:13:52,639 --> 00:13:54,240
all models were trained on plain text

478
00:13:54,240 --> 00:13:56,399
data replacing activation functions with

479
00:13:56,399 --> 00:13:58,480
squaring as is common in fhe

480
00:13:58,480 --> 00:14:00,320
this works surprisingly well and we were

481
00:14:00,320 --> 00:14:01,839
able to achieve accuracies close to

482
00:14:01,839 --> 00:14:03,839
those of unmodified networks

483
00:14:03,839 --> 00:14:05,680
we compared the latency for encrypted

484
00:14:05,680 --> 00:14:07,199
inference for the various compilers and

485
00:14:07,199 --> 00:14:08,160
models

486
00:14:08,160 --> 00:14:09,680
despite requiring significant

487
00:14:09,680 --> 00:14:11,279
engineering effort our manual

488
00:14:11,279 --> 00:14:13,040
implementation was easily outperformed

489
00:14:13,040 --> 00:14:15,120
by angra fhe and eva

490
00:14:15,120 --> 00:14:17,120
angra from a3 is by far the easiest way

491
00:14:17,120 --> 00:14:18,320
to work with fhe

492
00:14:18,320 --> 00:14:20,000
while eva handles even real-world

493
00:14:20,000 --> 00:14:22,800
networks like linux 5 with ease

494
00:14:22,800 --> 00:14:24,480
learning from these it seems clear that

495
00:14:24,480 --> 00:14:26,079
if you want to see broader adoption of

496
00:14:26,079 --> 00:14:26,800
fha

497
00:14:26,800 --> 00:14:28,399
this must happen through higher level

498
00:14:28,399 --> 00:14:30,160
tools like these

499
00:14:30,160 --> 00:14:32,160
we believe that right now is a crucial

500
00:14:32,160 --> 00:14:33,839
time to set up future generations of

501
00:14:33,839 --> 00:14:35,360
tools for success

502
00:14:35,360 --> 00:14:36,959
we need to automate the remaining

503
00:14:36,959 --> 00:14:39,199
challenges of fha including parameter

504
00:14:39,199 --> 00:14:40,720
selection but also the translation

505
00:14:40,720 --> 00:14:42,880
between the different computation models

506
00:14:42,880 --> 00:14:44,880
at the same time we need to work on the

507
00:14:44,880 --> 00:14:46,560
user experience of these tools

508
00:14:46,560 --> 00:14:48,240
we should not have to choose between

509
00:14:48,240 --> 00:14:49,600
powerful but complex

510
00:14:49,600 --> 00:14:51,920
or easy to use but restricted tools

511
00:14:51,920 --> 00:14:54,000
instead we should be able to smoothly

512
00:14:54,000 --> 00:14:55,839
transition between abstraction levels as

513
00:14:55,839 --> 00:14:57,199
needed

514
00:14:57,199 --> 00:14:58,639
and while current tools are usually

515
00:14:58,639 --> 00:15:00,560
standalone real-world deployments

516
00:15:00,560 --> 00:15:02,240
frequently require combining many

517
00:15:02,240 --> 00:15:03,920
different components into complex

518
00:15:03,920 --> 00:15:04,800
solutions

519
00:15:04,800 --> 00:15:06,480
we need the ability to combine both

520
00:15:06,480 --> 00:15:08,560
different fhe tools but also secure

521
00:15:08,560 --> 00:15:10,800
computation tools more generally

522
00:15:10,800 --> 00:15:12,480
future tools should be able to target

523
00:15:12,480 --> 00:15:14,639
and combine a wide variety of techniques

524
00:15:14,639 --> 00:15:17,600
depending on the application scenario

525
00:15:17,600 --> 00:15:19,120
please check out the paper for more

526
00:15:19,120 --> 00:15:20,240
details

527
00:15:20,240 --> 00:15:22,800
in addition our repo contains code

528
00:15:22,800 --> 00:15:24,240
detailed tool descriptions

529
00:15:24,240 --> 00:15:26,079
and ready to run docker images for each

530
00:15:26,079 --> 00:15:27,360
of the tools

531
00:15:27,360 --> 00:15:30,560
thank you for your attention

