1
00:00:00,719 --> 00:00:02,480
hi my name is john stevens and i'm going

2
00:00:02,480 --> 00:00:03,520
to tell you about a tool called

3
00:00:03,520 --> 00:00:04,880
smartphones which was developed with

4
00:00:04,880 --> 00:00:06,720
costas verlez benjamin mariano

5
00:00:06,720 --> 00:00:09,679
schwandulahiri and initial dilly

6
00:00:09,679 --> 00:00:11,679
so cryptocurrencies and smart contracts

7
00:00:11,679 --> 00:00:13,280
have become increasingly popular over

8
00:00:13,280 --> 00:00:14,799
the last couple of years

9
00:00:14,799 --> 00:00:16,160
in the last couple of months even we've

10
00:00:16,160 --> 00:00:18,000
seen nfts becoming

11
00:00:18,000 --> 00:00:20,640
popular in pop culture cryptocurrencies

12
00:00:20,640 --> 00:00:22,320
including ethereum hitting an all-time

13
00:00:22,320 --> 00:00:23,519
high in price

14
00:00:23,519 --> 00:00:25,599
and users having the ability to pay for

15
00:00:25,599 --> 00:00:26,720
more and more goods using

16
00:00:26,720 --> 00:00:28,080
cryptocurrencies

17
00:00:28,080 --> 00:00:30,160
however this has come at a cost as buggy

18
00:00:30,160 --> 00:00:31,760
and malicious contracts have become

19
00:00:31,760 --> 00:00:34,000
increasingly impactful so over the last

20
00:00:34,000 --> 00:00:36,160
couple of years we've seen

21
00:00:36,160 --> 00:00:37,920
hacks such as the doubt hack and the

22
00:00:37,920 --> 00:00:39,680
parity hack and each one of these has

23
00:00:39,680 --> 00:00:41,520
cost to users millions of dollars

24
00:00:41,520 --> 00:00:43,920
worth of crypto or worth of ethereum in

25
00:00:43,920 --> 00:00:46,320
this case

26
00:00:46,320 --> 00:00:48,320
at the same time we've also seen a

27
00:00:48,320 --> 00:00:50,320
number of bugs within smart contracts

28
00:00:50,320 --> 00:00:51,039
which

29
00:00:51,039 --> 00:00:53,680
may freeze currency within that contract

30
00:00:53,680 --> 00:00:54,079
and

31
00:00:54,079 --> 00:00:56,079
the users therefore don't have access to

32
00:00:56,079 --> 00:00:57,199
a currency that they should

33
00:00:57,199 --> 00:01:00,480
otherwise be able to access so we can

34
00:01:00,480 --> 00:01:02,399
group these bugs together based off of

35
00:01:02,399 --> 00:01:03,440
the type of

36
00:01:03,440 --> 00:01:05,360
property that they violate namely if

37
00:01:05,360 --> 00:01:07,040
they violate a safety or a liveness

38
00:01:07,040 --> 00:01:09,040
property and as you can see in the past

39
00:01:09,040 --> 00:01:12,000
both have both types of violations have

40
00:01:12,000 --> 00:01:13,360
occurred

41
00:01:13,360 --> 00:01:15,360
so safety property states something bad

42
00:01:15,360 --> 00:01:16,880
never happens whereas a liveness

43
00:01:16,880 --> 00:01:18,479
property typically states something

44
00:01:18,479 --> 00:01:19,920
or something along the lines of

45
00:01:19,920 --> 00:01:22,400
something good will eventually happen

46
00:01:22,400 --> 00:01:24,320
and so the real difference between a

47
00:01:24,320 --> 00:01:25,680
safety and a lifeness property

48
00:01:25,680 --> 00:01:27,520
is the safety property is violated in

49
00:01:27,520 --> 00:01:29,520
finite time whereas a liveness property

50
00:01:29,520 --> 00:01:30,400
is violated in

51
00:01:30,400 --> 00:01:33,200
infinite time so an example of a safety

52
00:01:33,200 --> 00:01:34,320
property would be

53
00:01:34,320 --> 00:01:36,079
the highest bidder in an auction can

54
00:01:36,079 --> 00:01:37,840
never collect a refund whereas a

55
00:01:37,840 --> 00:01:39,600
liveness property would be

56
00:01:39,600 --> 00:01:41,920
if i'm outbid i can eventually collect a

57
00:01:41,920 --> 00:01:42,640
refund

58
00:01:42,640 --> 00:01:44,159
and this is a liveness property just

59
00:01:44,159 --> 00:01:46,560
because even though i haven't been able

60
00:01:46,560 --> 00:01:47,040
to

61
00:01:47,040 --> 00:01:48,720
collect a refund in the past doesn't

62
00:01:48,720 --> 00:01:51,360
mean i won't be able to in the future

63
00:01:51,360 --> 00:01:52,960
and so the problem that we run into is

64
00:01:52,960 --> 00:01:55,680
there are many automatic tools to

65
00:01:55,680 --> 00:01:58,079
check safety properties in smart

66
00:01:58,079 --> 00:01:59,680
contracts but no automatic tools to

67
00:01:59,680 --> 00:02:01,040
check the liveness properties

68
00:02:01,040 --> 00:02:03,280
and smart contracts this is where smart

69
00:02:03,280 --> 00:02:04,240
pulse comes in

70
00:02:04,240 --> 00:02:06,399
so in order to use smart pulse users

71
00:02:06,399 --> 00:02:07,520
will specify

72
00:02:07,520 --> 00:02:09,280
the property that they wish to check in

73
00:02:09,280 --> 00:02:11,440
our smart ltl specification language

74
00:02:11,440 --> 00:02:13,280
and they'll provide the solidity program

75
00:02:13,280 --> 00:02:14,560
that they wish to check

76
00:02:14,560 --> 00:02:16,160
and then smart pulse is going to check

77
00:02:16,160 --> 00:02:18,160
the conformance of that program to the

78
00:02:18,160 --> 00:02:19,920
smart ltl specification

79
00:02:19,920 --> 00:02:22,800
and eventually say yes this property

80
00:02:22,800 --> 00:02:25,440
holds or no it doesn't and here's why

81
00:02:25,440 --> 00:02:27,680
and it does so using two generic steps

82
00:02:27,680 --> 00:02:28,959
the first step is to instrument the

83
00:02:28,959 --> 00:02:29,440
program

84
00:02:29,440 --> 00:02:31,519
and the second step is to check the

85
00:02:31,519 --> 00:02:33,120
instrumented program using a software

86
00:02:33,120 --> 00:02:34,959
model checker

87
00:02:34,959 --> 00:02:36,400
so let's take a look at an example

88
00:02:36,400 --> 00:02:37,760
auction which we'll continue to look at

89
00:02:37,760 --> 00:02:39,519
throughout this presentation

90
00:02:39,519 --> 00:02:42,319
so here the auction allows the users to

91
00:02:42,319 --> 00:02:43,440
bid in the auction

92
00:02:43,440 --> 00:02:44,800
and the option will keep track of the

93
00:02:44,800 --> 00:02:46,640
current highest bidder the amount that

94
00:02:46,640 --> 00:02:47,440
they bid

95
00:02:47,440 --> 00:02:50,000
and any users that need to be refunded

96
00:02:50,000 --> 00:02:51,840
because they have been outbid

97
00:02:51,840 --> 00:02:54,800
in addition the owner can decide to

98
00:02:54,800 --> 00:02:56,000
close the auction

99
00:02:56,000 --> 00:02:57,360
and then the owner can also issue

100
00:02:57,360 --> 00:03:00,720
refunds to everyone who is outbid

101
00:03:00,720 --> 00:03:02,239
so something that a user might wish to

102
00:03:02,239 --> 00:03:04,159
know is if they

103
00:03:04,159 --> 00:03:06,000
bid in this auction and are eventually

104
00:03:06,000 --> 00:03:08,640
outbid will they eventually be refunded

105
00:03:08,640 --> 00:03:10,959
after the auction is closed and this is

106
00:03:10,959 --> 00:03:12,800
the liveness property

107
00:03:12,800 --> 00:03:14,159
so if they want to use smart pulse in

108
00:03:14,159 --> 00:03:15,840
order to check this property they would

109
00:03:15,840 --> 00:03:17,440
first have to specify the property in

110
00:03:17,440 --> 00:03:18,720
smart ltl

111
00:03:18,720 --> 00:03:19,840
so that's what we're going to look at

112
00:03:19,840 --> 00:03:21,280
right now so the first thing that they

113
00:03:21,280 --> 00:03:22,239
have to do is

114
00:03:22,239 --> 00:03:25,760
specify an equation or they have to

115
00:03:25,760 --> 00:03:27,840
write an equation in our specific or in

116
00:03:27,840 --> 00:03:30,400
our smart ltl specification language

117
00:03:30,400 --> 00:03:32,080
and so this language has the normal

118
00:03:32,080 --> 00:03:33,840
temporal operators that you would expect

119
00:03:33,840 --> 00:03:34,319
to see

120
00:03:34,319 --> 00:03:36,959
from ltl including next always

121
00:03:36,959 --> 00:03:37,599
eventually

122
00:03:37,599 --> 00:03:39,840
and until however when we start to look

123
00:03:39,840 --> 00:03:41,599
at atoms things look a little bit

124
00:03:41,599 --> 00:03:42,239
different

125
00:03:42,239 --> 00:03:45,280
namely you see these functions that take

126
00:03:45,280 --> 00:03:48,480
two arguments in general

127
00:03:48,480 --> 00:03:50,239
or generally the first argument is going

128
00:03:50,239 --> 00:03:52,000
to be the name of a function

129
00:03:52,000 --> 00:03:53,680
and the second argument is going to be a

130
00:03:53,680 --> 00:03:56,720
constraint that the user wishes to hold

131
00:03:56,720 --> 00:03:58,319
and we'll talk about how each one of

132
00:03:58,319 --> 00:04:01,360
those is evaluated a little bit later on

133
00:04:01,360 --> 00:04:02,959
but the constraints of the program can

134
00:04:02,959 --> 00:04:05,200
be specified in first order

135
00:04:05,200 --> 00:04:09,920
quantifier free logic

136
00:04:09,920 --> 00:04:12,480
and in addition to the normal operators

137
00:04:12,480 --> 00:04:13,760
that you would expect to see there

138
00:04:13,760 --> 00:04:16,320
we include a couple of functions which

139
00:04:16,320 --> 00:04:17,759
is supposed to aid the user

140
00:04:17,759 --> 00:04:20,880
in writing

141
00:04:20,880 --> 00:04:23,440
certain types of specifications namely

142
00:04:23,440 --> 00:04:24,160
we provide

143
00:04:24,160 --> 00:04:26,240
a csun method which will take the sum of

144
00:04:26,240 --> 00:04:27,680
a collection like a map

145
00:04:27,680 --> 00:04:30,000
or an array and an f sum method which

146
00:04:30,000 --> 00:04:31,440
will take the sum of the value

147
00:04:31,440 --> 00:04:34,160
over time so now let's go back to that

148
00:04:34,160 --> 00:04:35,360
specification that we looked at

149
00:04:35,360 --> 00:04:36,400
previously

150
00:04:36,400 --> 00:04:37,919
and this is how we would write that

151
00:04:37,919 --> 00:04:40,240
specification in smart ltl

152
00:04:40,240 --> 00:04:42,880
namely what the specification says is if

153
00:04:42,880 --> 00:04:45,199
i successfully bid a value of x

154
00:04:45,199 --> 00:04:47,840
and eventually the option closes and i

155
00:04:47,840 --> 00:04:48,800
am not the winner

156
00:04:48,800 --> 00:04:50,639
then i should eventually be sent an

157
00:04:50,639 --> 00:04:54,160
amount of money equal to my bid

158
00:04:54,160 --> 00:04:55,919
so the way that we're going to use smart

159
00:04:55,919 --> 00:04:57,360
ltl is

160
00:04:57,360 --> 00:04:59,919
we are going to individually check

161
00:04:59,919 --> 00:05:01,840
traces within the program to see

162
00:05:01,840 --> 00:05:04,479
if that individual trace conforms to the

163
00:05:04,479 --> 00:05:05,520
specification

164
00:05:05,520 --> 00:05:08,479
or not and so let's take a look at how

165
00:05:08,479 --> 00:05:10,160
that would work

166
00:05:10,160 --> 00:05:11,440
so here you can see a trace through the

167
00:05:11,440 --> 00:05:13,360
program where the user calls bid

168
00:05:13,360 --> 00:05:15,759
then eventually the owner calls close

169
00:05:15,759 --> 00:05:16,720
and

170
00:05:16,720 --> 00:05:21,280
tries to refund everyone who was outbid

171
00:05:21,280 --> 00:05:24,160
so what we're going to do is we're going

172
00:05:24,160 --> 00:05:26,320
to take each one of those atoms

173
00:05:26,320 --> 00:05:29,120
and those atoms specify a particular

174
00:05:29,120 --> 00:05:30,720
point in the program where we want to

175
00:05:30,720 --> 00:05:31,840
check the constraint

176
00:05:31,840 --> 00:05:34,479
for example the finished bid atom

177
00:05:34,479 --> 00:05:36,800
specifies that once bid has successfully

178
00:05:36,800 --> 00:05:38,320
executed we want to check

179
00:05:38,320 --> 00:05:40,160
the constraints that the message value

180
00:05:40,160 --> 00:05:42,320
is equal to x and the message sender is

181
00:05:42,320 --> 00:05:42,800
equal to

182
00:05:42,800 --> 00:05:46,479
l and it's the same for the finish of

183
00:05:46,479 --> 00:05:46,960
close

184
00:05:46,960 --> 00:05:49,919
and the send constraints and so what

185
00:05:49,919 --> 00:05:51,120
we're going to do

186
00:05:51,120 --> 00:05:54,880
is we're going to iterate through all

187
00:05:54,880 --> 00:05:56,800
the programs within

188
00:05:56,800 --> 00:05:58,800
or iterate through all the traces within

189
00:05:58,800 --> 00:06:00,800
the program and if all of them conform

190
00:06:00,800 --> 00:06:02,240
to the specification then we have

191
00:06:02,240 --> 00:06:03,759
verified that it holds

192
00:06:03,759 --> 00:06:06,319
and if we find a trace that does not

193
00:06:06,319 --> 00:06:07,840
conform to the specification

194
00:06:07,840 --> 00:06:11,280
we found violation so let's take a look

195
00:06:11,280 --> 00:06:12,800
now that we know what the inputs are

196
00:06:12,800 --> 00:06:14,479
let's take a look at the steps

197
00:06:14,479 --> 00:06:17,199
used to do this so the first step is to

198
00:06:17,199 --> 00:06:18,880
instrument the program

199
00:06:18,880 --> 00:06:22,080
so in this talk we're only going to look

200
00:06:22,080 --> 00:06:22,479
at

201
00:06:22,479 --> 00:06:24,479
this instrument station step which is

202
00:06:24,479 --> 00:06:26,880
converting smart ltl to ltl

203
00:06:26,880 --> 00:06:28,319
and this step is going to take in a

204
00:06:28,319 --> 00:06:30,720
program and a smart ltl specification

205
00:06:30,720 --> 00:06:32,800
it's going to produce a modified program

206
00:06:32,800 --> 00:06:35,440
and an ltl spec

207
00:06:35,440 --> 00:06:37,120
so the way that we're going to do this

208
00:06:37,120 --> 00:06:39,280
is we're going to take in a smart ltl

209
00:06:39,280 --> 00:06:40,400
specification

210
00:06:40,400 --> 00:06:42,319
and we're first going to instrument the

211
00:06:42,319 --> 00:06:44,479
program with fresh boolean variables

212
00:06:44,479 --> 00:06:46,600
and these boolean variables indicate the

213
00:06:46,600 --> 00:06:48,240
satisfiability of

214
00:06:48,240 --> 00:06:50,720
a particular atom within our smart ltm

215
00:06:50,720 --> 00:06:51,840
specification

216
00:06:51,840 --> 00:06:53,759
in particular if you look at the

217
00:06:53,759 --> 00:06:55,120
highlighted atom

218
00:06:55,120 --> 00:06:56,960
this is how we would instrument that

219
00:06:56,960 --> 00:06:58,160
into the program

220
00:06:58,160 --> 00:06:59,759
so basically we would create a fresh

221
00:06:59,759 --> 00:07:02,000
boolean variable and we would

222
00:07:02,000 --> 00:07:04,960
set that the we would set the value of

223
00:07:04,960 --> 00:07:06,560
the boolean variable to be equal to the

224
00:07:06,560 --> 00:07:07,440
constraint

225
00:07:07,440 --> 00:07:10,160
specified by the user but then we

226
00:07:10,160 --> 00:07:11,919
immediately set the boolean variable to

227
00:07:11,919 --> 00:07:12,479
false

228
00:07:12,479 --> 00:07:14,720
and the reason why we do this is because

229
00:07:14,720 --> 00:07:16,479
we're going to instrument it

230
00:07:16,479 --> 00:07:20,319
into a location where

231
00:07:20,319 --> 00:07:22,000
where where the constraint is only

232
00:07:22,000 --> 00:07:24,160
checked if bid has finished executing

233
00:07:24,160 --> 00:07:25,599
successfully

234
00:07:25,599 --> 00:07:27,280
and so this means that everywhere in the

235
00:07:27,280 --> 00:07:29,039
program besides

236
00:07:29,039 --> 00:07:32,160
that one particular point the

237
00:07:32,160 --> 00:07:33,440
this boolean variable is going to

238
00:07:33,440 --> 00:07:35,599
evaluate to false and this is the way

239
00:07:35,599 --> 00:07:36,720
that we want

240
00:07:36,720 --> 00:07:39,599
uh that atom to behave so the next thing

241
00:07:39,599 --> 00:07:40,800
that we're going to do

242
00:07:40,800 --> 00:07:44,720
is we're going to express our smart ltl

243
00:07:44,720 --> 00:07:45,919
specification

244
00:07:45,919 --> 00:07:48,160
in terms of these instrumented variables

245
00:07:48,160 --> 00:07:50,160
and if we do that we get a typical

246
00:07:50,160 --> 00:07:52,639
lcl specification so the rest of these

247
00:07:52,639 --> 00:07:53,919
variables that you see there

248
00:07:53,919 --> 00:07:56,080
are similar to the ones that i showed

249
00:07:56,080 --> 00:07:59,680
above but for each one of those atoms

250
00:07:59,680 --> 00:08:01,039
so the next thing that we're going to do

251
00:08:01,039 --> 00:08:03,199
is we're going to send this

252
00:08:03,199 --> 00:08:06,240
to a typical software model checker

253
00:08:06,240 --> 00:08:08,479
in particular we're going to use a cigar

254
00:08:08,479 --> 00:08:09,440
based method

255
00:08:09,440 --> 00:08:12,080
like the one used by ultimate automizer

256
00:08:12,080 --> 00:08:14,080
in order to

257
00:08:14,080 --> 00:08:16,800
get particular example traces and then

258
00:08:16,800 --> 00:08:18,560
we're going to evaluate

259
00:08:18,560 --> 00:08:20,560
whether or not the specification holds

260
00:08:20,560 --> 00:08:22,400
on that trace

261
00:08:22,400 --> 00:08:25,039
and so the way this is going to work is

262
00:08:25,039 --> 00:08:26,800
we're first going to take in a program

263
00:08:26,800 --> 00:08:28,160
and a specification

264
00:08:28,160 --> 00:08:29,680
and then we're going to construct a

265
00:08:29,680 --> 00:08:32,240
bukit automata by combining the program

266
00:08:32,240 --> 00:08:33,599
and the specification

267
00:08:33,599 --> 00:08:36,640
so essentially any path through this

268
00:08:36,640 --> 00:08:40,000
new bukit automata is going to

269
00:08:40,000 --> 00:08:43,279
consist of paths

270
00:08:43,279 --> 00:08:48,480
that might violate our specification

271
00:08:48,480 --> 00:08:50,480
and so if we end up finding that our

272
00:08:50,480 --> 00:08:52,080
bukit automata has

273
00:08:52,080 --> 00:08:53,279
so the first thing that we're going to

274
00:08:53,279 --> 00:08:54,640
do is we're going to check to see if our

275
00:08:54,640 --> 00:08:56,480
bukit automata has any such paths that

276
00:08:56,480 --> 00:08:59,839
might violate our specification

277
00:08:59,839 --> 00:09:03,600
if it and we're going to do that using

278
00:09:03,600 --> 00:09:04,880
an emptiness check so

279
00:09:04,880 --> 00:09:08,000
if the emptiness of our or

280
00:09:08,000 --> 00:09:10,160
if our bukit automata is not empty then

281
00:09:10,160 --> 00:09:11,920
we're first going to get a path

282
00:09:11,920 --> 00:09:13,839
from that automata and then we're going

283
00:09:13,839 --> 00:09:16,000
to check if that path is terminating

284
00:09:16,000 --> 00:09:17,839
if it is non-terminating we found a

285
00:09:17,839 --> 00:09:19,360
valid counter example because we found

286
00:09:19,360 --> 00:09:20,880
an infinite trace

287
00:09:20,880 --> 00:09:22,959
if it is terminating however then we can

288
00:09:22,959 --> 00:09:24,800
simply remove that path

289
00:09:24,800 --> 00:09:27,279
from our bukit automata and we're going

290
00:09:27,279 --> 00:09:28,480
to keep doing this

291
00:09:28,480 --> 00:09:30,560
until eventually our bukit tampa becomes

292
00:09:30,560 --> 00:09:32,320
empty or we have no more paths that

293
00:09:32,320 --> 00:09:34,320
could violate the specification

294
00:09:34,320 --> 00:09:36,399
in which case we have successfully

295
00:09:36,399 --> 00:09:38,320
verified the program

296
00:09:38,320 --> 00:09:41,760
so in addition to this we have modified

297
00:09:41,760 --> 00:09:44,240
the cigar-based approach in order to

298
00:09:44,240 --> 00:09:45,360
simplify

299
00:09:45,360 --> 00:09:48,480
these two checks within

300
00:09:48,480 --> 00:09:53,200
the uh within the verification algorithm

301
00:09:53,200 --> 00:09:55,279
namely we use domain specific knowledge

302
00:09:55,279 --> 00:09:56,640
to help us

303
00:09:56,640 --> 00:09:58,880
check whether a particular path is

304
00:09:58,880 --> 00:10:00,800
non-terminating or terminating and if

305
00:10:00,800 --> 00:10:02,160
you'd like more information on this i

306
00:10:02,160 --> 00:10:03,360
would encourage you to go and read our

307
00:10:03,360 --> 00:10:05,519
paper

308
00:10:05,519 --> 00:10:06,800
so now let's take a look at our

309
00:10:06,800 --> 00:10:08,720
evaluation so

310
00:10:08,720 --> 00:10:10,240
in order to evaluate this we want to

311
00:10:10,240 --> 00:10:11,839
answer a couple of research questions

312
00:10:11,839 --> 00:10:13,519
the first of which is can smartphones

313
00:10:13,519 --> 00:10:15,040
actually buy or verify

314
00:10:15,040 --> 00:10:17,440
license properties so in order to check

315
00:10:17,440 --> 00:10:19,360
this we gathered a number of

316
00:10:19,360 --> 00:10:22,880
smart contracts from uh

317
00:10:22,880 --> 00:10:26,000
from prior work from important

318
00:10:26,000 --> 00:10:27,920
repositories like open zeppelin

319
00:10:27,920 --> 00:10:30,839
and from the blockchain and then we

320
00:10:30,839 --> 00:10:32,320
constructed

321
00:10:32,320 --> 00:10:34,640
a number of properties that we would

322
00:10:34,640 --> 00:10:36,000
expect that con

323
00:10:36,000 --> 00:10:38,560
to hold within that contract for example

324
00:10:38,560 --> 00:10:40,079
the property that you see here

325
00:10:40,079 --> 00:10:44,839
is one that we checked which says if

326
00:10:44,839 --> 00:10:46,880
a if a

327
00:10:46,880 --> 00:10:49,920
crowd fund is finalized then

328
00:10:49,920 --> 00:10:53,040
eventually a user should be sent an

329
00:10:53,040 --> 00:10:53,839
amount of money

330
00:10:53,839 --> 00:10:57,040
equal to the sum of the tokens that they

331
00:10:57,040 --> 00:10:58,079
bought

332
00:10:58,079 --> 00:11:00,480
and this in particular is if a crowd

333
00:11:00,480 --> 00:11:03,519
fund failed to be funded

334
00:11:03,519 --> 00:11:06,480
so we checked a number of contracts we

335
00:11:06,480 --> 00:11:08,560
checked nine contracts against 34 total

336
00:11:08,560 --> 00:11:09,440
properties

337
00:11:09,440 --> 00:11:12,800
and we were able to verify 26 of those

338
00:11:12,800 --> 00:11:13,360
properties

339
00:11:13,360 --> 00:11:16,079
and falsify six of them and it took on

340
00:11:16,079 --> 00:11:18,160
average about 10 minutes

341
00:11:18,160 --> 00:11:20,640
so all together smart pulse was able to

342
00:11:20,640 --> 00:11:21,920
verify or falsify

343
00:11:21,920 --> 00:11:23,920
94 of the liveness properties that we

344
00:11:23,920 --> 00:11:25,839
looked at

345
00:11:25,839 --> 00:11:27,120
the next research question that we

346
00:11:27,120 --> 00:11:29,279
wanted to look for to consider was how

347
00:11:29,279 --> 00:11:31,680
do smart pulse compare against existing

348
00:11:31,680 --> 00:11:33,200
verifiers

349
00:11:33,200 --> 00:11:36,320
and so we took a look at two particular

350
00:11:36,320 --> 00:11:37,839
tools that are available

351
00:11:37,839 --> 00:11:41,839
to um check safety properties within

352
00:11:41,839 --> 00:11:42,959
smart contracts

353
00:11:42,959 --> 00:11:46,560
namely varex and kvm so varex

354
00:11:46,560 --> 00:11:51,360
takes in a a safety temporal property

355
00:11:51,360 --> 00:11:54,560
and it uses um user provided predicates

356
00:11:54,560 --> 00:11:56,000
to aid in verification

357
00:11:56,000 --> 00:11:59,519
so we checked ver verax against uh

358
00:11:59,519 --> 00:12:02,160
a variant that uses these user provided

359
00:12:02,160 --> 00:12:04,079
predicates and a variant that uses

360
00:12:04,079 --> 00:12:06,160
no user provided predicates to see if

361
00:12:06,160 --> 00:12:07,120
they can or

362
00:12:07,120 --> 00:12:10,240
how well they can verify properties

363
00:12:10,240 --> 00:12:11,920
automatically

364
00:12:11,920 --> 00:12:14,800
in addition we also checked smart pulse

365
00:12:14,800 --> 00:12:15,839
against

366
00:12:15,839 --> 00:12:19,040
a tool that uses

367
00:12:19,040 --> 00:12:21,839
kevm's ethereum blockchain formalization

368
00:12:21,839 --> 00:12:23,279
in order to verify

369
00:12:23,279 --> 00:12:25,200
method pre and post conditions and we

370
00:12:25,200 --> 00:12:28,399
call that kevm fair

371
00:12:28,399 --> 00:12:30,480
and so our first comparison against

372
00:12:30,480 --> 00:12:32,959
varax evaluates smart pulse against all

373
00:12:32,959 --> 00:12:34,650
of the

374
00:12:34,650 --> 00:12:36,079
[Music]

375
00:12:36,079 --> 00:12:37,839
against all of these smart contracts and

376
00:12:37,839 --> 00:12:39,200
properties that

377
00:12:39,200 --> 00:12:42,000
varex evaluated against in their paper

378
00:12:42,000 --> 00:12:43,680
and we found that smart pulse was able

379
00:12:43,680 --> 00:12:44,720
to verify

380
00:12:44,720 --> 00:12:47,600
more properties than both the version of

381
00:12:47,600 --> 00:12:48,880
varix that uses

382
00:12:48,880 --> 00:12:51,600
user-provided predicates and varex

383
00:12:51,600 --> 00:12:52,079
without

384
00:12:52,079 --> 00:12:54,720
any user-provided predicates so smart

385
00:12:54,720 --> 00:12:56,639
pulse is able to verify more properties

386
00:12:56,639 --> 00:12:59,040
in similar time

387
00:12:59,040 --> 00:13:01,680
in addition when we evaluated against

388
00:13:01,680 --> 00:13:02,880
kevm

389
00:13:02,880 --> 00:13:07,360
we checked 151 erc contracts using

390
00:13:07,360 --> 00:13:11,120
kvn's formal specification of the erc20

391
00:13:11,120 --> 00:13:12,480
contract

392
00:13:12,480 --> 00:13:14,800
and so each one or the formal

393
00:13:14,800 --> 00:13:15,600
specification

394
00:13:15,600 --> 00:13:17,680
contains 12 properties and so we checked

395
00:13:17,680 --> 00:13:20,079
a total of 1812

396
00:13:20,079 --> 00:13:23,120
properties and we found that kvm

397
00:13:23,120 --> 00:13:26,880
was able to verify fewer or verify and

398
00:13:26,880 --> 00:13:28,160
falsify

399
00:13:28,160 --> 00:13:31,600
fewer properties than smart pulse

400
00:13:31,600 --> 00:13:35,040
and so in total smart poles verify 233

401
00:13:35,040 --> 00:13:38,800
more properties in less time

402
00:13:38,800 --> 00:13:41,199
our final research question was can

403
00:13:41,199 --> 00:13:42,720
smart pulse generate a tax

404
00:13:42,720 --> 00:13:44,800
against multiple contracts because smart

405
00:13:44,800 --> 00:13:46,160
pulse will generate

406
00:13:46,160 --> 00:13:48,079
a counter example we want to make sure

407
00:13:48,079 --> 00:13:49,920
that those counter examples can

408
00:13:49,920 --> 00:13:53,279
be used as legitimate attacks

409
00:13:53,279 --> 00:13:54,639
so here is the auction that we

410
00:13:54,639 --> 00:13:56,800
considered earlier and so now let's see

411
00:13:56,800 --> 00:13:58,320
what a counter example to this would

412
00:13:58,320 --> 00:13:59,839
look like

413
00:13:59,839 --> 00:14:02,800
so here's a trace that we might get from

414
00:14:02,800 --> 00:14:03,199
uh

415
00:14:03,199 --> 00:14:05,440
from smartphones first an auction is

416
00:14:05,440 --> 00:14:07,600
created with an owner equal to bob

417
00:14:07,600 --> 00:14:09,440
and then eve is going to bid a value of

418
00:14:09,440 --> 00:14:11,920
15. then alice is going to come in

419
00:14:11,920 --> 00:14:14,639
and bid a value of 16. and finally

420
00:14:14,639 --> 00:14:16,079
claire is going to come in

421
00:14:16,079 --> 00:14:18,959
and bid a value of 17. and then finally

422
00:14:18,959 --> 00:14:19,360
bob

423
00:14:19,360 --> 00:14:21,680
is going to close the auction and then

424
00:14:21,680 --> 00:14:23,199
because bob is a nice guy

425
00:14:23,199 --> 00:14:26,639
he's going to try to refund everyone who

426
00:14:26,639 --> 00:14:30,240
had bid within the auction however

427
00:14:30,240 --> 00:14:32,639
and so bob is going to iterate through

428
00:14:32,639 --> 00:14:34,560
all the bidders and try to send them

429
00:14:34,560 --> 00:14:38,399
the money that they are owed however

430
00:14:38,399 --> 00:14:42,160
when he tries to transfer money to eve

431
00:14:42,160 --> 00:14:45,199
eve reverts which essentially causes

432
00:14:45,199 --> 00:14:49,040
uh in the way that the ethereum

433
00:14:49,040 --> 00:14:49,680
blockchain

434
00:14:49,680 --> 00:14:52,079
works is if a revert occurs then it's

435
00:14:52,079 --> 00:14:54,320
going to revert all of the changes made

436
00:14:54,320 --> 00:14:55,519
during that transaction

437
00:14:55,519 --> 00:14:58,480
so basically it will be as if this

438
00:14:58,480 --> 00:14:59,760
refund call

439
00:14:59,760 --> 00:15:03,440
never happened and so that ends up

440
00:15:03,440 --> 00:15:04,079
causing

441
00:15:04,079 --> 00:15:06,240
the entire transaction to revert and

442
00:15:06,240 --> 00:15:08,639
therefore no one got their refund

443
00:15:08,639 --> 00:15:11,279
and then if we try executing that entire

444
00:15:11,279 --> 00:15:12,320
sequence again

445
00:15:12,320 --> 00:15:14,959
because eve is always going to revert

446
00:15:14,959 --> 00:15:18,079
that entire transaction will avert

447
00:15:18,079 --> 00:15:19,839
no matter how many times it's called and

448
00:15:19,839 --> 00:15:22,560
so we found an infinite counter example

449
00:15:22,560 --> 00:15:24,720
and so smart pulse counter examples can

450
00:15:24,720 --> 00:15:26,480
correspond to attacks from prior work

451
00:15:26,480 --> 00:15:27,519
and we're able to

452
00:15:27,519 --> 00:15:29,120
get smart pulse to generate attacks

453
00:15:29,120 --> 00:15:31,600
corresponding to reentrancy

454
00:15:31,600 --> 00:15:33,600
gas denial of service and overflow

455
00:15:33,600 --> 00:15:35,519
attacks

456
00:15:35,519 --> 00:15:37,600
in summation smart pulse is the first

457
00:15:37,600 --> 00:15:39,120
tool to check liveness properties and

458
00:15:39,120 --> 00:15:40,079
smart contracts

459
00:15:40,079 --> 00:15:42,240
automatically it can verify safety

460
00:15:42,240 --> 00:15:44,000
properties better than prior work

461
00:15:44,000 --> 00:15:46,160
and counter examples can demonstrate

462
00:15:46,160 --> 00:15:48,399
attacks on smart contracts

463
00:15:48,399 --> 00:15:50,800
and that is the end of my talk i

464
00:15:50,800 --> 00:15:52,880
encourage you to all read the paper

465
00:15:52,880 --> 00:15:55,839
thank you

