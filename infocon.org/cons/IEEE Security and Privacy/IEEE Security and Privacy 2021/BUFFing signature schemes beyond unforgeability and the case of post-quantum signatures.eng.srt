1
00:00:01,360 --> 00:00:04,000
hi everybody my name is rooney fielder

2
00:00:04,000 --> 00:00:05,520
i will convince you that there is more

3
00:00:05,520 --> 00:00:07,919
to signatures than just unforgeability

4
00:00:07,919 --> 00:00:09,760
how you can buff your signature schemes

5
00:00:09,760 --> 00:00:11,280
beyond unforgeability

6
00:00:11,280 --> 00:00:13,200
and what this means for post-quantum

7
00:00:13,200 --> 00:00:14,320
signatures

8
00:00:14,320 --> 00:00:16,320
this is joint work with cascaremas

9
00:00:16,320 --> 00:00:18,320
summer dussley mark fischling and

10
00:00:18,320 --> 00:00:20,400
christian yanson

11
00:00:20,400 --> 00:00:22,320
so you may have heard of signatures

12
00:00:22,320 --> 00:00:23,680
before

13
00:00:23,680 --> 00:00:26,080
signatures have plenty of applications

14
00:00:26,080 --> 00:00:28,160
you can use them to sign messages

15
00:00:28,160 --> 00:00:30,480
to authenticate software updates and as

16
00:00:30,480 --> 00:00:32,320
a building block for bigger protocols

17
00:00:32,320 --> 00:00:34,399
such as the key exchange protocol

18
00:00:34,399 --> 00:00:36,880
all in all they are a fairly important

19
00:00:36,880 --> 00:00:39,360
cryptographic primitive

20
00:00:39,360 --> 00:00:41,760
the security notion that signatures are

21
00:00:41,760 --> 00:00:42,960
usually measured against

22
00:00:42,960 --> 00:00:46,239
is called existential unforgeability

23
00:00:46,239 --> 00:00:47,920
an attacker against existential

24
00:00:47,920 --> 00:00:50,559
unforgibility has to output a forgery

25
00:00:50,559 --> 00:00:52,719
for a fresh message

26
00:00:52,719 --> 00:00:54,960
this security definition has stood the

27
00:00:54,960 --> 00:00:57,039
test of time for several decades

28
00:00:57,039 --> 00:00:58,719
hence the results are used for the nist

29
00:00:58,719 --> 00:01:02,079
competition on post-quantum cryptography

30
00:01:02,079 --> 00:01:03,760
however this definition is only

31
00:01:03,760 --> 00:01:05,600
concerned with honestly generated public

32
00:01:05,600 --> 00:01:07,040
keys

33
00:01:07,040 --> 00:01:09,360
but what about maliciously generated

34
00:01:09,360 --> 00:01:11,040
public keys

35
00:01:11,040 --> 00:01:13,119
in this presentation i will tackle four

36
00:01:13,119 --> 00:01:14,640
questions

37
00:01:14,640 --> 00:01:17,040
can maliciously generated public keys

38
00:01:17,040 --> 00:01:20,240
actually break real world protocols

39
00:01:20,240 --> 00:01:22,320
how can we formalize the notions of

40
00:01:22,320 --> 00:01:25,040
maliciously generated public keys

41
00:01:25,040 --> 00:01:26,960
and once we've formalized the attacker

42
00:01:26,960 --> 00:01:28,880
model how can we achieve security

43
00:01:28,880 --> 00:01:30,640
against maliciously generated public

44
00:01:30,640 --> 00:01:32,400
keys

45
00:01:32,400 --> 00:01:35,600
and lastly do their nist finalists

46
00:01:35,600 --> 00:01:37,439
actually achieve security against

47
00:01:37,439 --> 00:01:40,720
maliciously generated public keys

48
00:01:40,720 --> 00:01:42,320
then let's have a look at a real world

49
00:01:42,320 --> 00:01:44,320
protocol

50
00:01:44,320 --> 00:01:46,320
this is about let's encrypt let's

51
00:01:46,320 --> 00:01:47,439
encrypt is a

52
00:01:47,439 --> 00:01:50,159
certificate authority from which you can

53
00:01:50,159 --> 00:01:51,520
get a certificate

54
00:01:51,520 --> 00:01:54,399
for your website in order to get a

55
00:01:54,399 --> 00:01:55,200
certificate

56
00:01:55,200 --> 00:01:57,200
you need to convince let's encrypt that

57
00:01:57,200 --> 00:01:58,719
you are the rightful owner of the

58
00:01:58,719 --> 00:02:00,320
website

59
00:02:00,320 --> 00:02:01,920
and this is can be done with the

60
00:02:01,920 --> 00:02:04,880
following protocol

61
00:02:04,880 --> 00:02:06,880
it begins with the owner of the website

62
00:02:06,880 --> 00:02:08,639
who has a key pair

63
00:02:08,639 --> 00:02:11,360
and tells let's encrypt that it that he

64
00:02:11,360 --> 00:02:13,599
would like to register his website

65
00:02:13,599 --> 00:02:15,840
that's encrypt will generate a challenge

66
00:02:15,840 --> 00:02:16,640
token

67
00:02:16,640 --> 00:02:19,120
and send it back to the owner the

68
00:02:19,120 --> 00:02:20,640
attacker will then use

69
00:02:20,640 --> 00:02:23,840
his secret key to generate a signature

70
00:02:23,840 --> 00:02:26,160
on the challenge token

71
00:02:26,160 --> 00:02:28,959
and then the owner will update the dns

72
00:02:28,959 --> 00:02:29,760
record

73
00:02:29,760 --> 00:02:32,560
for his website such that if you query

74
00:02:32,560 --> 00:02:33,840
this website

75
00:02:33,840 --> 00:02:36,879
you will get the signature as a return

76
00:02:36,879 --> 00:02:39,200
value

77
00:02:39,200 --> 00:02:41,760
our next let's encrypt will precisely

78
00:02:41,760 --> 00:02:44,239
query this dns record

79
00:02:44,239 --> 00:02:47,840
to get the signature and this

80
00:02:47,840 --> 00:02:51,200
dns record can only be changed

81
00:02:51,200 --> 00:02:53,040
by the rightful owner of the website

82
00:02:53,040 --> 00:02:54,560
that is how let's encrypt

83
00:02:54,560 --> 00:02:56,800
is convinced if the signature actually

84
00:02:56,800 --> 00:02:57,920
verifies

85
00:02:57,920 --> 00:02:59,519
which is what lets encrypt checks in the

86
00:02:59,519 --> 00:03:02,159
next step

87
00:03:02,480 --> 00:03:05,440
and if the signature verifies the

88
00:03:05,440 --> 00:03:07,440
challenge token the last encrypt issued

89
00:03:07,440 --> 00:03:08,400
in the beginning

90
00:03:08,400 --> 00:03:10,879
let's encrypt is convinced and issues a

91
00:03:10,879 --> 00:03:14,000
certificate to the owner

92
00:03:14,000 --> 00:03:16,560
now this is how the an honest execution

93
00:03:16,560 --> 00:03:19,120
of the protocol looks like

94
00:03:19,120 --> 00:03:20,800
we are in the setting that an honest

95
00:03:20,800 --> 00:03:22,800
execution has taken place

96
00:03:22,800 --> 00:03:25,760
and now an attacker enters the stage the

97
00:03:25,760 --> 00:03:26,799
attacker

98
00:03:26,799 --> 00:03:29,680
wants to get a certificate for the very

99
00:03:29,680 --> 00:03:31,280
same website

100
00:03:31,280 --> 00:03:33,200
and starts another execution of the

101
00:03:33,200 --> 00:03:35,360
protocol with let's encrypt

102
00:03:35,360 --> 00:03:37,440
that syncr will then however generate a

103
00:03:37,440 --> 00:03:38,959
new challenge token

104
00:03:38,959 --> 00:03:41,280
and sends it to the attacker the

105
00:03:41,280 --> 00:03:42,000
attacker

106
00:03:42,000 --> 00:03:44,720
somehow finds a new public key let's not

107
00:03:44,720 --> 00:03:46,000
concern ourselves with

108
00:03:46,000 --> 00:03:47,920
how it does this but it finds a new

109
00:03:47,920 --> 00:03:49,040
public key

110
00:03:49,040 --> 00:03:51,360
such that the previous signature

111
00:03:51,360 --> 00:03:52,560
verifies

112
00:03:52,560 --> 00:03:56,000
this new challenge token then it tells

113
00:03:56,000 --> 00:03:57,840
slots to encrypt oh by the way i got a

114
00:03:57,840 --> 00:04:00,640
new public key just so you know

115
00:04:00,640 --> 00:04:03,200
next let's encrypt the once more query

116
00:04:03,200 --> 00:04:05,599
the dns record for this website

117
00:04:05,599 --> 00:04:07,680
and get the same signature as before

118
00:04:07,680 --> 00:04:10,560
which was honestly generated

119
00:04:10,560 --> 00:04:12,879
now let's encrypt will check if this

120
00:04:12,879 --> 00:04:15,360
signature which was honestly

121
00:04:15,360 --> 00:04:17,120
generated in the previous protocol

122
00:04:17,120 --> 00:04:19,839
execution verifies the new challenge

123
00:04:19,839 --> 00:04:20,639
token

124
00:04:20,639 --> 00:04:23,759
under the new public key and since it

125
00:04:23,759 --> 00:04:24,639
does

126
00:04:24,639 --> 00:04:27,199
it accepts and issues a certificate for

127
00:04:27,199 --> 00:04:29,199
the attacker

128
00:04:29,199 --> 00:04:31,840
at this point there are two problems

129
00:04:31,840 --> 00:04:33,360
first

130
00:04:33,360 --> 00:04:35,440
now the attacker has a certificate for a

131
00:04:35,440 --> 00:04:37,840
website which it does not own

132
00:04:37,840 --> 00:04:40,080
and second something strange happened

133
00:04:40,080 --> 00:04:41,600
with the signature scheme

134
00:04:41,600 --> 00:04:42,960
it didn't break existential

135
00:04:42,960 --> 00:04:45,360
unforgeability but something happened

136
00:04:45,360 --> 00:04:45,759
that

137
00:04:45,759 --> 00:04:48,479
intuitively should not have happened how

138
00:04:48,479 --> 00:04:50,960
can we formalize what we have just seen

139
00:04:50,960 --> 00:04:53,840
to get a definition for this type of

140
00:04:53,840 --> 00:04:57,120
maliciously generated public key

141
00:04:57,120 --> 00:04:59,919
let's think about what just happened

142
00:04:59,919 --> 00:05:00,720
there is a

143
00:05:00,720 --> 00:05:03,759
honestly generated public key and a

144
00:05:03,759 --> 00:05:05,680
message

145
00:05:05,680 --> 00:05:07,520
and then there is an honestly generated

146
00:05:07,520 --> 00:05:10,560
signature that verifies this message

147
00:05:10,560 --> 00:05:14,080
under the honestly generated public key

148
00:05:14,080 --> 00:05:15,840
and all three of these values are known

149
00:05:15,840 --> 00:05:17,520
to the attacker

150
00:05:17,520 --> 00:05:20,000
and the attacker then produces a new

151
00:05:20,000 --> 00:05:21,600
public key

152
00:05:21,600 --> 00:05:24,800
such that the old signature the original

153
00:05:24,800 --> 00:05:25,759
signature

154
00:05:25,759 --> 00:05:28,960
verifies a different message under this

155
00:05:28,960 --> 00:05:31,600
new public key

156
00:05:31,600 --> 00:05:33,600
and that is a flavor of exclusive

157
00:05:33,600 --> 00:05:35,520
ownership

158
00:05:35,520 --> 00:05:37,520
more specifically this flavor is called

159
00:05:37,520 --> 00:05:40,240
strong destructive exclusive ownership

160
00:05:40,240 --> 00:05:41,680
you can find out more about the other

161
00:05:41,680 --> 00:05:43,600
flavours of exclusive ownership

162
00:05:43,600 --> 00:05:47,120
in our paper and there's two more

163
00:05:47,120 --> 00:05:48,000
notions

164
00:05:48,000 --> 00:05:49,759
of security against maliciously

165
00:05:49,759 --> 00:05:51,759
generated public keys

166
00:05:51,759 --> 00:05:53,680
the first one is called message bound

167
00:05:53,680 --> 00:05:54,960
signatures

168
00:05:54,960 --> 00:05:57,199
which deals with whether a signature is

169
00:05:57,199 --> 00:05:58,560
bound to message

170
00:05:58,560 --> 00:06:00,960
so an attacker against message bound

171
00:06:00,960 --> 00:06:01,919
signatures

172
00:06:01,919 --> 00:06:04,720
has to output a public key to messages

173
00:06:04,720 --> 00:06:06,080
and a signature

174
00:06:06,080 --> 00:06:08,720
such that the signature verifies either

175
00:06:08,720 --> 00:06:09,440
message

176
00:06:09,440 --> 00:06:12,479
under this public key and the third

177
00:06:12,479 --> 00:06:15,600
notion is called non-resignability

178
00:06:15,600 --> 00:06:18,400
here we once more start with an honestly

179
00:06:18,400 --> 00:06:20,479
generated public key

180
00:06:20,479 --> 00:06:22,880
some message and an honestly generated

181
00:06:22,880 --> 00:06:24,639
signature on this message

182
00:06:24,639 --> 00:06:27,759
the attacker will then get the key

183
00:06:27,759 --> 00:06:30,880
and the signature but not the message

184
00:06:30,880 --> 00:06:33,680
and the attacker is required to output a

185
00:06:33,680 --> 00:06:34,000
new

186
00:06:34,000 --> 00:06:37,280
public key and a signature such that the

187
00:06:37,280 --> 00:06:38,160
signature

188
00:06:38,160 --> 00:06:40,800
verifies the message which the attacker

189
00:06:40,800 --> 00:06:42,000
does not know

190
00:06:42,000 --> 00:06:45,280
under the new public key

191
00:06:45,520 --> 00:06:48,720
all of these security notions in

192
00:06:48,720 --> 00:06:49,840
combination

193
00:06:49,840 --> 00:06:51,520
are what we call the beyond

194
00:06:51,520 --> 00:06:54,319
unforgeability features

195
00:06:54,319 --> 00:06:56,400
so that is the flavors of exclusive

196
00:06:56,400 --> 00:06:58,639
ownership message bound signatures and

197
00:06:58,639 --> 00:07:01,440
on resignability

198
00:07:01,440 --> 00:07:03,280
all of these notions are independent of

199
00:07:03,280 --> 00:07:05,599
each other and the proofs for that you

200
00:07:05,599 --> 00:07:08,800
can find in the paper

201
00:07:09,120 --> 00:07:12,080
so how can we achieve security against

202
00:07:12,080 --> 00:07:15,599
these maliciously generated public keys

203
00:07:15,599 --> 00:07:17,680
of course for any specific signature

204
00:07:17,680 --> 00:07:18,639
scheme

205
00:07:18,639 --> 00:07:20,880
you can try to find a proof specific for

206
00:07:20,880 --> 00:07:21,759
this scheme

207
00:07:21,759 --> 00:07:23,759
for some schemes this may be easy and

208
00:07:23,759 --> 00:07:25,039
has been done already

209
00:07:25,039 --> 00:07:27,919
and for other schemes this is infeasible

210
00:07:27,919 --> 00:07:31,039
and specifically for the second case

211
00:07:31,039 --> 00:07:33,120
we are proud to present the buff

212
00:07:33,120 --> 00:07:34,240
transformation

213
00:07:34,240 --> 00:07:36,240
which achieves security against all

214
00:07:36,240 --> 00:07:39,919
beyond unforgeability features

215
00:07:40,319 --> 00:07:44,000
how does this work we start off with

216
00:07:44,000 --> 00:07:46,080
a signature scheme that does not yet

217
00:07:46,080 --> 00:07:47,840
provide the beyond unforgeability

218
00:07:47,840 --> 00:07:48,879
features

219
00:07:48,879 --> 00:07:51,840
and a hash function the key generation

220
00:07:51,840 --> 00:07:53,919
algorithm stays the same

221
00:07:53,919 --> 00:07:55,360
however we have to apply some

222
00:07:55,360 --> 00:07:58,319
modifications to the signing algorithm

223
00:07:58,319 --> 00:08:00,560
first we compute the hash of the public

224
00:08:00,560 --> 00:08:02,560
key and the message

225
00:08:02,560 --> 00:08:04,800
then we sign this digest with the

226
00:08:04,800 --> 00:08:07,280
signing algorithm of the original scheme

227
00:08:07,280 --> 00:08:09,199
that is we just plug in the digest

228
00:08:09,199 --> 00:08:11,440
instead of the message

229
00:08:11,440 --> 00:08:13,840
then the signing algorithm returns the

230
00:08:13,840 --> 00:08:16,240
digest and the signature

231
00:08:16,240 --> 00:08:18,400
so a signature of the modified scheme

232
00:08:18,400 --> 00:08:20,000
has a modus size increase

233
00:08:20,000 --> 00:08:23,280
of one hash digest

234
00:08:23,280 --> 00:08:25,599
the verification algorithm also needs to

235
00:08:25,599 --> 00:08:28,878
be changed accordingly

236
00:08:29,199 --> 00:08:31,520
first we check that the hash digest that

237
00:08:31,520 --> 00:08:33,360
is included in the signature

238
00:08:33,360 --> 00:08:35,360
matches the hash of the public key and

239
00:08:35,360 --> 00:08:36,958
the message

240
00:08:36,958 --> 00:08:38,799
then we invoke the verification

241
00:08:38,799 --> 00:08:40,958
algorithm of the original scheme

242
00:08:40,958 --> 00:08:43,599
with a hash digest as message if both

243
00:08:43,599 --> 00:08:45,279
conditions hold the signature is

244
00:08:45,279 --> 00:08:47,519
accepted

245
00:08:47,519 --> 00:08:50,240
as you can see the overhead in terms of

246
00:08:50,240 --> 00:08:51,760
computation time

247
00:08:51,760 --> 00:08:54,720
is a hash function evaluation in both

248
00:08:54,720 --> 00:08:57,440
the signing and verification algorithm

249
00:08:57,440 --> 00:09:01,120
which is usually negligible the security

250
00:09:01,120 --> 00:09:03,120
of the buffer transformation reduces to

251
00:09:03,120 --> 00:09:05,760
security properties of the hash function

252
00:09:05,760 --> 00:09:08,000
the crucial point here is the extra step

253
00:09:08,000 --> 00:09:09,920
in the verification algorithm

254
00:09:09,920 --> 00:09:11,360
where we check the digest in the

255
00:09:11,360 --> 00:09:14,399
signature this ensures that a signature

256
00:09:14,399 --> 00:09:18,480
is bound to one public key message pair

257
00:09:18,480 --> 00:09:20,640
a successful attacker against exclusive

258
00:09:20,640 --> 00:09:23,360
ownership or message bound signatures

259
00:09:23,360 --> 00:09:26,000
produces a signature that verifies under

260
00:09:26,000 --> 00:09:27,519
several public keys

261
00:09:27,519 --> 00:09:30,800
or for several messages if a signature

262
00:09:30,800 --> 00:09:33,120
verifies with two public key message

263
00:09:33,120 --> 00:09:33,839
pairs

264
00:09:33,839 --> 00:09:36,160
then both public key message pairs need

265
00:09:36,160 --> 00:09:37,920
to have the same digest

266
00:09:37,920 --> 00:09:40,080
in order for the verification algorithm

267
00:09:40,080 --> 00:09:41,839
to accept

268
00:09:41,839 --> 00:09:44,240
hence an attacker produces a collision

269
00:09:44,240 --> 00:09:46,560
in the hash function

270
00:09:46,560 --> 00:09:47,959
the security argument for

271
00:09:47,959 --> 00:09:49,839
non-resignability is slightly more

272
00:09:49,839 --> 00:09:50,560
involved

273
00:09:50,560 --> 00:09:52,000
so i leave it for you to find in the

274
00:09:52,000 --> 00:09:53,839
paper

275
00:09:53,839 --> 00:09:56,800
so as we've just seen it's quite doable

276
00:09:56,800 --> 00:09:59,360
to achieve these security notions

277
00:09:59,360 --> 00:10:01,760
and let's dive into the nest finalists

278
00:10:01,760 --> 00:10:03,120
do they actually

279
00:10:03,120 --> 00:10:05,200
achieve security against maliciously

280
00:10:05,200 --> 00:10:07,839
generated public keys

281
00:10:07,839 --> 00:10:09,839
we have analyzed the signature schemes

282
00:10:09,839 --> 00:10:11,839
as they were submitted to round three of

283
00:10:11,839 --> 00:10:13,600
the nist competition

284
00:10:13,600 --> 00:10:16,160
as you can see in this table some do

285
00:10:16,160 --> 00:10:18,079
some don't

286
00:10:18,079 --> 00:10:20,560
a tick means that the security property

287
00:10:20,560 --> 00:10:21,360
is achieved

288
00:10:21,360 --> 00:10:23,360
so the lithium and picnic achieve all

289
00:10:23,360 --> 00:10:26,320
the security notions

290
00:10:26,320 --> 00:10:28,480
and an x means that we have found and

291
00:10:28,480 --> 00:10:30,000
given an attack which you can find in

292
00:10:30,000 --> 00:10:32,000
the full paper

293
00:10:32,000 --> 00:10:34,880
so ficon and rainbow are so-so while

294
00:10:34,880 --> 00:10:35,519
james

295
00:10:35,519 --> 00:10:37,839
is has a lot of potential for

296
00:10:37,839 --> 00:10:39,200
improvement

297
00:10:39,200 --> 00:10:42,959
as for sphinx plus we couldn't give

298
00:10:42,959 --> 00:10:45,279
attacks or proofs for exclusive

299
00:10:45,279 --> 00:10:48,959
ownership and non-resignability

300
00:10:50,079 --> 00:10:52,720
so this with this you might say okay how

301
00:10:52,720 --> 00:10:54,480
can i achieve all of these security

302
00:10:54,480 --> 00:10:56,079
notions didn't you just introduce

303
00:10:56,079 --> 00:10:58,640
some cool transformation yes you are

304
00:10:58,640 --> 00:10:59,279
right

305
00:10:59,279 --> 00:11:01,040
you can straight apply our buff

306
00:11:01,040 --> 00:11:02,959
transformation to achieve

307
00:11:02,959 --> 00:11:06,479
all of these security notions

308
00:11:06,720 --> 00:11:09,440
and another advantage the signature size

309
00:11:09,440 --> 00:11:11,279
hardly increases

310
00:11:11,279 --> 00:11:13,200
specifically their relative signature

311
00:11:13,200 --> 00:11:14,959
sizes stay the same

312
00:11:14,959 --> 00:11:17,360
so for falcon you may want to apply the

313
00:11:17,360 --> 00:11:19,200
buff transformation to achieve all the

314
00:11:19,200 --> 00:11:20,720
security notions

315
00:11:20,720 --> 00:11:22,399
however after applying the buff

316
00:11:22,399 --> 00:11:24,560
transformation falcon signatures are

317
00:11:24,560 --> 00:11:26,839
still shorter than the lithium

318
00:11:26,839 --> 00:11:28,959
signatures so what have we seen in the

319
00:11:28,959 --> 00:11:30,880
last couple of minutes

320
00:11:30,880 --> 00:11:33,440
we have seen that maliciously generated

321
00:11:33,440 --> 00:11:35,519
public keys can be a serious problem to

322
00:11:35,519 --> 00:11:37,760
reveal protocols

323
00:11:37,760 --> 00:11:39,040
we have seen that there are several

324
00:11:39,040 --> 00:11:41,360
types of maliciously generated public

325
00:11:41,360 --> 00:11:42,480
keys

326
00:11:42,480 --> 00:11:44,399
and we call the combination of all these

327
00:11:44,399 --> 00:11:46,720
security notions beyond unforgivability

328
00:11:46,720 --> 00:11:48,079
features

329
00:11:48,079 --> 00:11:50,000
then we introduce a generic

330
00:11:50,000 --> 00:11:51,600
transformation to achieve

331
00:11:51,600 --> 00:11:53,200
all of the beyond unforgivability

332
00:11:53,200 --> 00:11:55,040
features which is

333
00:11:55,040 --> 00:11:58,079
quite efficient and has a modest

334
00:11:58,079 --> 00:12:00,480
increase in signature size only

335
00:12:00,480 --> 00:12:02,880
lastly we looked at the signature at the

336
00:12:02,880 --> 00:12:05,200
nist finalists

337
00:12:05,200 --> 00:12:07,040
and saw that not all of them achieved

338
00:12:07,040 --> 00:12:08,720
the security guarantees which are

339
00:12:08,720 --> 00:12:10,160
nowadays already

340
00:12:10,160 --> 00:12:13,120
quite easy to achieve if you're

341
00:12:13,120 --> 00:12:13,839
interested

342
00:12:13,839 --> 00:12:16,160
please have a look at our full paper

343
00:12:16,160 --> 00:12:18,160
which you can find on eprint

344
00:12:18,160 --> 00:12:24,399
and i'll be happy to take any questions

