1
00:00:00,860 --> 00:00:05,980
Hello, everyone, I'm Chengbin Pang from Nanjing University. My advisor is Prof. Bing Mao.

2
00:00:06,370 --> 00:00:15,290
This work is finished when I visited Stevens Institute of Technology, under the supervision of Prof. Jun Xu and Professor Eric Koskinen.

3
00:00:16,250 --> 00:00:19,570
It's my honor to present our sok work on:

4
00:00:20,320 --> 00:00:27,760
All You Ever Wanted to Know About X86/X64 Binary Disassembly But Were Afraid to Ask.

5
00:00:29,220 --> 00:00:33,900
It's a joint work by Ruotong Yu from Stevens Institute of Technology.

6
00:00:34,350 --> 00:00:41,870
Yaohui Chen from Facebook,  Eric Koskinen, Georgios Portokalidis and Jun Xu from Stevens Institute of Technology.

7
00:00:42,630 --> 00:00:44,670
And Bing Mao from Nanjing University.

8
00:00:48,400 --> 00:00:52,300
In practice, we do not have access to the source code of many software systems 

9
00:00:52,300 --> 00:00:55,800
such as commercial software, legacy software and third-party software.

10
00:00:57,200 --> 00:00:59,900
However, not surprisingly,

11
00:00:59,900 --> 00:01:03,100
such software systems also contain vulnerabilities, 

12
00:01:03,100 --> 00:01:08,900
and we definitely need to provide mitigations against those vulnerabilities.

13
00:01:10,400 --> 00:01:15,900
When you have source code, you can analyze their syntax, grammar and semantics 

14
00:01:16,000 --> 00:01:20,000
by converting the source code to abstract syntax tree or control flow graph.

15
00:01:20,500 --> 00:01:27,000
And all the code, functions and execution flows are available for you.

16
00:01:27,000 --> 00:01:28,600
With the help of this information, 

17
00:01:28,600 --> 00:01:35,399
you can perform all kinds of analysis or make changes as needed by using the infrastructure of compiler.

18
00:01:35,400 --> 00:01:38,700
However, when you only have binary code.

19
00:01:38,700 --> 00:01:42,700
Literally, you only have a sequence of 0-1 bits, 

20
00:01:42,700 --> 00:01:45,600
and it is only readable for machine.

21
00:01:45,600 --> 00:01:49,000
You have no syntax, no grammar, no semantics, no code, 

22
00:01:50,000 --> 00:01:51,200
no functions, no incution flows, and so on.

23
00:01:51,200 --> 00:01:55,500
no functions, no execution flows, and so on.

24
00:01:57,500 --> 00:02:01,000
In order to analyze the binary code, we need to

25
00:02:01,000 --> 00:02:05,500
recover more structured information from the sequence of 0-1 bits. 

26
00:02:05,500 --> 00:02:08,699
that what binary disassembly does.

27
00:02:08,699 --> 00:02:11,300
Binary disassembly is a task that 

28
00:02:11,300 --> 00:02:15,000
translates the binary code to assembly language, 

29
00:02:15,000 --> 00:02:19,200
which is the inverse operation to that of an assembler.

30
00:02:19,200 --> 00:02:24,500
More specifically, binary disassemblers recovery instructions firstly, 

31
00:02:24,500 --> 00:02:28,500
and then mark the function entry at specific location.

32
00:02:28,500 --> 00:02:33,400
Furthermore, some disassemblers reconstruct the execution flows 

33
00:02:33,400 --> 00:02:35,800
to better analyze the binary code.

34
00:02:35,800 --> 00:02:38,400
With the help of binary disassembly,

35
00:02:38,400 --> 00:02:42,200
we could apply various security measures at binary code.

36
00:02:42,200 --> 00:02:51,399
That is to say, binary disassembly is foundations of mitigating availabilities in binary code.

37
00:02:52,100 --> 00:02:58,000
binary disassembly has seen remarkable advancements in the past twenty years.

38
00:02:58,800 --> 00:03:03,300
awarding researchers and developers with a variety of tools and frameworks, 

39
00:03:03,300 --> 00:03:08,500
under both open source and commercial license.

40
00:03:08,500 --> 00:03:12,300
When you want to do binary disassembly, you have so many choices, 

41
00:03:12,300 --> 00:03:15,500
but which tools to use.

42
00:03:15,500 --> 00:03:19,600
In order to answer this question, we present this sok work.

43
00:03:19,600 --> 00:03:24,500
Specifically, we want to answer the following two questions.

44
00:03:24,500 --> 00:03:27,000
The first one is how do the tools work, 

45
00:03:27,000 --> 00:03:31,500
and the second one is how well do the tools perform.

46
00:03:33,000 --> 00:03:39,500
To answer the first question, we need to learn the details of disassemblers.

47
00:03:39,500 --> 00:03:47,000
To achieve this goal, we could read the documentation and papers of the targeted disassemblers.

48
00:03:47,100 --> 00:03:50,799
Or search, corresponding blogs from web,

49
00:03:50,900 --> 00:03:57,700
extract incomplete technical details among comments, questions and even debit from forum.

50
00:03:57,700 --> 00:04:04,700
However, some of the documentation, papers, blogs or discussions, are missing or incomplete.

51
00:04:04,700 --> 00:04:10,200
Moreover, due to the rapid development of actively maintained tools,

52
00:04:10,200 --> 00:04:15,000
some of the descriptions from web or documentation are out of date.

53
00:04:15,700 --> 00:04:22,800
So it is very hard for us to learn the technical details from ways mentioned above.

54
00:04:22,800 --> 00:04:28,800
To better understand the details of implementations in open-source disassemblers, 

55
00:04:28,800 --> 00:04:32,900
we choose the distinct but effectively way: read their source code. 

56
00:04:32,900 --> 00:04:38,400
Specifically, we download the source code from their website or github,

57
00:04:38,400 --> 00:04:43,900
read their source code and summarize strategies used by these tools.

58
00:04:44,000 --> 00:04:49,500
After reading their source code and summarize their strategies used to disassemble,

59
00:04:49,900 --> 00:04:56,000
We know how the tools work. Specifically, we focus on following four tasks:

60
00:04:56,000 --> 00:05:01,300
Recover instructions, functions, execution flows and pointers.

61
00:05:01,300 --> 00:05:08,700
And we summarize their strategies into two categories, algorithms and heuristics.

62
00:05:08,700 --> 00:05:15,500
Algorithms, typically produce results with some correctness guarantees

63
00:05:15,600 --> 00:05:22,000
They mostly leverage knowledge from binary or use convincing analysis,

64
00:05:22,000 --> 00:05:24,400
such as value set analysis.

65
00:05:24,400 --> 00:05:28,299
Heuristics are based on common patterns, 

66
00:05:28,300 --> 00:05:33,000
for example, summarize signatures of function starts.

67
00:05:33,300 --> 00:05:37,900
These strategies do not offer assurance of correctness.

68
00:05:37,900 --> 00:05:43,000
The right part, shows the result of our summary 

69
00:05:43,000 --> 00:05:47,800
numbers with rings, mean that the strategies are algorithms.

70
00:05:47,800 --> 00:05:52,900
Numbers with disks mean that the strategies are heuristics.

71
00:05:52,900 --> 00:05:56,299
We do not show the details in this presentation. 

72
00:05:56,300 --> 00:06:00,600
If you are interested, welcome to read our paper.

73
00:06:00,900 --> 00:06:06,799
In summary, we found that there are 15 principled algorithm strategies

74
00:06:06,800 --> 00:06:09,900
 which could guarantee the correctness in theory.

75
00:06:09,900 --> 00:06:15,799
And 29 heuristics which do not offer any guarantee

76
00:06:15,800 --> 00:06:19,100
 through this way, we answered the question one:

77
00:06:19,100 --> 00:06:25,000
how the tools work.

78
00:06:25,000 --> 00:06:29,900
Next I'm going to share some interesting findings when we survey these tools.

79
00:06:29,900 --> 00:06:37,000
The first finding is that some tools combine recursive descend disassembling and linear sweep disassembling.

80
00:06:37,000 --> 00:06:43,600
As we know, linear sweep disassembling continuously scans pre-selected code ranges, 

81
00:06:43,600 --> 00:06:47,600
and dissaemble each instruction one by one.

82
00:06:47,600 --> 00:06:50,800
That leads to high coverage, 

83
00:06:50,800 --> 00:06:57,500
but it may scan all the data in code and dissemble them, so it caused low precision.

84
00:06:57,500 --> 00:07:04,200
In contrast, recursive descend dissembling starts with a given code address

85
00:07:04,200 --> 00:07:09,000
and disassemble instructions following the control flow

86
00:07:09,000 --> 00:07:14,500
that leads to high precision. But some complex structures, 

87
00:07:14,500 --> 00:07:19,900
such as function starts, jump tables and etc make the coverage low.

88
00:07:22,900 --> 00:07:29,000
We found that angr combines recursive descend disassembling and linear sweep dissembling together.

89
00:07:29,000 --> 00:07:34,000
tries to disassemble the code with high coverage and high precision.

90
00:07:35,000 --> 00:07:39,600
Specifically, it's start recursive descend disassembling firstly,

91
00:07:39,600 --> 00:07:48,800
and tries to scan the possible instructions among the gaps left after recursive descend disassembling.

92
00:07:50,800 --> 00:07:57,100
The next finding is that some tools leverage exception information to identify function entry.

93
00:07:57,100 --> 00:08:07,100
To support the exception handling, the compiler generates the unwinding table into binary by default according to the system V ABI.

94
00:08:07,100 --> 00:08:13,800
With this example, I'll show how exception handling handled with the help of a unwinding table.

95
00:08:13,800 --> 00:08:21,900
In this example, when the program executes at line 3, it throws an exception.

96
00:08:21,900 --> 00:08:27,799
To find the proper exception handler, it needs to walk the call frames

97
00:08:27,800 --> 00:08:36,000
and check if current frame contains proper exception handler meanwhile.

98
00:08:36,000 --> 00:08:42,799
It is worth noting that the API utilizes unwinding table to walk the call frames.

99
00:08:42,799 --> 00:08:47,900
 Specifically, every function has a corresponding entry in the unwinding table.

100
00:08:47,900 --> 00:08:53,699
And pc_start and pc_range are included in each entry, 

101
00:08:53,700 --> 00:08:57,900
which represents the function start and function size.

102
00:08:57,900 --> 00:09:04,000
So the exception information gives clues of function entry and

103
00:09:04,000 --> 00:09:09,500
Ghidra and Angr leverage this information to mark the possible function start.

104
00:09:10,500 --> 00:09:16,700
The last finding I'm going to present is the conditional non-return function.

105
00:09:16,700 --> 00:09:22,700
Non-return function is the function that terminates execution at runtime.

106
00:09:22,700 --> 00:09:30,200
As compilers know which function is non-return function, compilers do not insert fall through edge after calling non-return function.

107
00:09:31,700 --> 00:09:40,000
In this example, the left part shows the ground truth. In line 2, it calls no-return function "error".

108
00:09:40,200 --> 00:09:45,200
And there is no fall through edge at between line 2 and line 3.

109
00:09:45,200 --> 00:09:52,800
However, if the disassembler can't identify the non-return function at line 2.

110
00:09:52,800 --> 00:10:02,699
The recursive descend disassembler will dissemble the following instructions after line 3, which are bad instructions. 

111
00:10:02,700 --> 00:10:08,400
So it is important to identify non-return functions when disassembling.

112
00:10:08,400 --> 00:10:15,199
And we found one interesting category of non-return function, conditional non-return.

113
00:10:16,200 --> 00:10:21,800
For example, for "error" and "error_at_line" function:

114
00:10:21,800 --> 00:10:27,000
The first parameter is "status", it is the integer type. 

115
00:10:27,000 --> 00:10:31,600
When the value is zero, It prints error message to standard error,

116
00:10:31,600 --> 00:10:41,400
 and when the value is non-zero, it prints error message to standard error first and then call exit() with value of status.

117
00:10:41,400 --> 00:10:48,199
That means these functions are non-return function or not depending on the value of their arguments.

118
00:10:50,700 --> 00:10:59,000
And we found that all the disassemblers we surveyed do not handle this kind of non-return functions correctly.

119
00:11:00,600 --> 00:11:08,800
To answer the second question, we do a large evaluation. Firstly, we built about 4000 binaries from scratch.

120
00:11:08,800 --> 00:11:15,900
These binaries include programs and libraries of diverse functionality and complexity.

121
00:11:15,900 --> 00:11:24,699
Written in C/C++, and containing handwritten assembly and hand-coded binary code. 

122
00:11:24,700 --> 00:11:31,300
To obtain the ground truth automatically, we trace the competition step by step.

123
00:11:31,300 --> 00:11:34,599
And collect necessary information into binaries.

124
00:11:34,600 --> 00:11:41,000
Lastly, we evaluate each tool and strategy separately.

125
00:11:41,200 --> 00:11:50,200
For every task, we showed the results in three aspects. The first is overall result.

126
00:11:50,200 --> 00:11:54,700
We show the coverage and accuracy of each tool as a whole in that part.

127
00:11:54,700 --> 00:11:57,600
The next is dissected result.

128
00:11:57,600 --> 00:12:01,800
As we know every strategy used in each tool,

129
00:12:01,800 --> 00:12:07,300
so we also present coverage and accuracy contributed by each strategy.

130
00:12:07,300 --> 00:12:13,000
The last aspect is analyzes of errors. 

131
00:12:13,000 --> 00:12:19,200
In this part, we analyze errors of each tool introduced by each strategy.

132
00:12:19,200 --> 00:12:24,000
For this evaluation results, we answered the question 2.

133
00:12:24,000 --> 00:12:28,000
We know performance of each disassembler.

134
00:12:28,500 --> 00:12:34,100
You can not only know overall results from our evaluation, 

135
00:12:34,100 --> 00:12:37,400
but also learn more detailed results.

136
00:12:37,400 --> 00:12:43,500
In this example, sub-figure(a) is a evaluation result from Usenix Security 16'

137
00:12:43,500 --> 00:12:46,300
about instruction recovery.

138
00:12:46,300 --> 00:12:49,500
It only shows the overall result.

139
00:12:49,500 --> 00:12:55,100
In our evaluation, we not only present overall result, as shown in sub-figure(b).

140
00:12:55,100 --> 00:13:01,700
But also shows the result of instruction recovery without heuristics.

141
00:13:01,700 --> 00:13:07,200
From those results, you can conclude more detailed information,

142
00:13:07,200 --> 00:13:12,300
Such as how many instructions are introduced by heuristics strategies?

143
00:13:14,300 --> 00:13:20,699
In our evaluation, we found that every tool make mistakes more or less in every task.

144
00:13:20,700 --> 00:13:28,000
That is because the disassemblers use many heuristics strategies to reach high coverage.

145
00:13:28,000 --> 00:13:33,700
There exists a trade off between high accuracy and high coverage.

146
00:13:35,800 --> 00:13:39,000
Now we can learn the following lessons from our work. 

147
00:13:39,000 --> 00:13:45,300
The first is every tool misses cases or make mistakes in each task.

148
00:13:45,300 --> 00:13:49,300
That is to say nothing is perfect. 

149
00:13:49,300 --> 00:13:56,000
The second is principal algorithms and heuristics compete for coverage and accuracy.

150
00:13:56,000 --> 00:13:58,300
 That is a trade off.

151
00:13:59,300 --> 00:14:06,199
The last is today's binary disassembly falls short for vulnerability mitigations.

152
00:14:06,200 --> 00:14:13,100
At the end, we would appreciate Vector 35 inc.

153
00:14:13,100 --> 00:14:18,700
for providing us free license of BINARYNINJA after reading our paper. Thanks.

154
00:14:20,700 --> 00:14:24,800
Thank you for listening. I'm ready to answer the questions.

