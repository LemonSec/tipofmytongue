1
00:00:04,080 --> 00:00:06,560
this paper studies the following problem

2
00:00:06,560 --> 00:00:08,240
say that mozilla or some other browser

3
00:00:08,240 --> 00:00:10,400
vendor wants to know which urls

4
00:00:10,400 --> 00:00:12,639
crash the browser most often so there's

5
00:00:12,639 --> 00:00:14,160
millions of clients each client has a

6
00:00:14,160 --> 00:00:14,880
url

7
00:00:14,880 --> 00:00:17,039
and mozilla wants to know which urls are

8
00:00:17,039 --> 00:00:18,880
most popular essentially

9
00:00:18,880 --> 00:00:20,640
so today the way they would solve this

10
00:00:20,640 --> 00:00:22,080
problem is with non-private data

11
00:00:22,080 --> 00:00:22,800
collection

12
00:00:22,800 --> 00:00:24,960
so each client would just send the url

13
00:00:24,960 --> 00:00:26,800
when a crash happens to mozilla

14
00:00:26,800 --> 00:00:28,400
and then mozilla does whatever data

15
00:00:28,400 --> 00:00:30,080
analysis it's going to do

16
00:00:30,080 --> 00:00:31,359
the problem with this is of course a

17
00:00:31,359 --> 00:00:34,000
privacy one mozilla learns which client

18
00:00:34,000 --> 00:00:36,640
has been visiting which url

19
00:00:36,640 --> 00:00:38,160
in this paper we show that mozilla can

20
00:00:38,160 --> 00:00:40,480
learn the most often reported urls

21
00:00:40,480 --> 00:00:42,079
without actually learning which client

22
00:00:42,079 --> 00:00:44,160
reported which url

23
00:00:44,160 --> 00:00:45,920
and for this to work we'll need two

24
00:00:45,920 --> 00:00:47,600
servers now instead of one

25
00:00:47,600 --> 00:00:49,760
and security will hold as long as at

26
00:00:49,760 --> 00:00:51,920
least one server is honest

27
00:00:51,920 --> 00:00:54,079
and under this assumption the only thing

28
00:00:54,079 --> 00:00:55,520
that mozilla will learn

29
00:00:55,520 --> 00:00:57,600
is the set of urls that caused many

30
00:00:57,600 --> 00:00:59,840
crashes

31
00:00:59,840 --> 00:01:01,440
we call this the private heavy hitters

32
00:01:01,440 --> 00:01:03,280
problem and this problem has been

33
00:01:03,280 --> 00:01:04,319
studied extensively

34
00:01:04,319 --> 00:01:06,159
in the context of local differential

35
00:01:06,159 --> 00:01:08,720
privacy and prior work

36
00:01:08,720 --> 00:01:10,320
in our variant of this problem there are

37
00:01:10,320 --> 00:01:12,080
millions of clients where each client

38
00:01:12,080 --> 00:01:14,080
holds an nbit string think of these

39
00:01:14,080 --> 00:01:16,880
strings as being say 256 bits long

40
00:01:16,880 --> 00:01:18,080
and there's going to be two data

41
00:01:18,080 --> 00:01:20,159
collection servers and the servers are

42
00:01:20,159 --> 00:01:21,680
trying to learn the set of strings that

43
00:01:21,680 --> 00:01:22,240
most

44
00:01:22,240 --> 00:01:24,720
t clients hold where t is a threshold of

45
00:01:24,720 --> 00:01:27,840
the system

46
00:01:28,479 --> 00:01:30,159
we'll provide privacy against one

47
00:01:30,159 --> 00:01:31,840
malicious server

48
00:01:31,840 --> 00:01:33,840
even if that server colludes with many

49
00:01:33,840 --> 00:01:34,880
malicious clients

50
00:01:34,880 --> 00:01:36,479
and the privacy property here we provide

51
00:01:36,479 --> 00:01:38,159
is actually kind of subtle so i'll point

52
00:01:38,159 --> 00:01:40,560
you to the paper for details

53
00:01:40,560 --> 00:01:42,320
we provide correctness against malicious

54
00:01:42,320 --> 00:01:43,840
clients in the sense that the worst a

55
00:01:43,840 --> 00:01:45,280
malicious client can do

56
00:01:45,280 --> 00:01:47,520
is lie about the value of its private

57
00:01:47,520 --> 00:01:49,839
string

58
00:01:50,479 --> 00:01:52,159
while aiming to achieve the security

59
00:01:52,159 --> 00:01:53,920
properties we also try to minimize the

60
00:01:53,920 --> 00:01:55,680
communication computation costs for the

61
00:01:55,680 --> 00:01:56,560
clients

62
00:01:56,560 --> 00:01:58,159
and support say hundreds of submissions

63
00:01:58,159 --> 00:01:59,600
per second on a

64
00:01:59,600 --> 00:02:02,640
commodity server and in doing so

65
00:02:02,640 --> 00:02:04,560
we want to be much much faster and much

66
00:02:04,560 --> 00:02:06,159
much more bandwidth efficient than

67
00:02:06,159 --> 00:02:08,000
general purpose multi-party computation

68
00:02:08,000 --> 00:02:10,720
techniques there are a number of

69
00:02:10,720 --> 00:02:12,000
applications of

70
00:02:12,000 --> 00:02:14,160
this this system to private data

71
00:02:14,160 --> 00:02:15,920
collection problems so for example you

72
00:02:15,920 --> 00:02:16,879
might want to learn

73
00:02:16,879 --> 00:02:18,720
which passwords are most popular among

74
00:02:18,720 --> 00:02:20,400
your users without learning which user

75
00:02:20,400 --> 00:02:23,599
has which password

76
00:02:23,599 --> 00:02:25,120
so that's the problem we're trying to

77
00:02:25,120 --> 00:02:26,879
solve i'm now going to talk about the

78
00:02:26,879 --> 00:02:28,560
tools that we use to solve it

79
00:02:28,560 --> 00:02:31,840
and to start i want to describe a

80
00:02:31,840 --> 00:02:33,599
simple kind of warm-up scheme that

81
00:02:33,599 --> 00:02:35,920
describes the main idea

82
00:02:35,920 --> 00:02:37,360
and also motivates our technical

83
00:02:37,360 --> 00:02:40,080
contributions

84
00:02:40,480 --> 00:02:42,000
so in this private heavy hitter system

85
00:02:42,000 --> 00:02:43,680
there's going to be these two servers

86
00:02:43,680 --> 00:02:45,920
and many clients and i'll just look at

87
00:02:45,920 --> 00:02:48,879
the actions of one client for now

88
00:02:48,879 --> 00:02:52,000
so this client has a three bit string so

89
00:02:52,000 --> 00:02:53,840
the client's private string is zero one

90
00:02:53,840 --> 00:02:54,800
one

91
00:02:54,800 --> 00:02:56,720
and what the client does is the first

92
00:02:56,720 --> 00:02:59,440
step is to prepare a binary tree

93
00:02:59,440 --> 00:03:03,120
with ones along the path to the

94
00:03:03,120 --> 00:03:05,440
s-i-f leaf of the tree where s-i is the

95
00:03:05,440 --> 00:03:06,720
client's private string

96
00:03:06,720 --> 00:03:09,920
so here there's ones on the path to the

97
00:03:09,920 --> 00:03:13,040
node the leaf zero one one in this tree

98
00:03:13,040 --> 00:03:16,239
and zero is everywhere else

99
00:03:16,319 --> 00:03:20,080
the client then additively secret shares

100
00:03:20,080 --> 00:03:20,800
the value

101
00:03:20,800 --> 00:03:23,680
on each node of this tree to get two

102
00:03:23,680 --> 00:03:24,640
shares

103
00:03:24,640 --> 00:03:28,080
of a tree and the client then sends

104
00:03:28,080 --> 00:03:30,319
one of these shares to each of the two

105
00:03:30,319 --> 00:03:32,239
servers so there's a single message in

106
00:03:32,239 --> 00:03:33,680
our protocol from the client to the

107
00:03:33,680 --> 00:03:34,720
servers

108
00:03:34,720 --> 00:03:37,440
so each server now is holding secret

109
00:03:37,440 --> 00:03:37,920
shares

110
00:03:37,920 --> 00:03:40,159
of the values on each node in this tree

111
00:03:40,159 --> 00:03:42,879
from the client

112
00:03:44,640 --> 00:03:46,560
as more clients come online and interact

113
00:03:46,560 --> 00:03:47,920
with the system each client does the

114
00:03:47,920 --> 00:03:49,680
same thing they prepare this tree

115
00:03:49,680 --> 00:03:51,599
they secret share it and they send the

116
00:03:51,599 --> 00:03:54,798
shares to each of the servers

117
00:03:55,040 --> 00:03:57,200
after each client has participated the

118
00:03:57,200 --> 00:03:59,200
servers then sum up these shares on the

119
00:03:59,200 --> 00:04:00,080
tree nodes

120
00:04:00,080 --> 00:04:02,159
to get these aggregate shares that

121
00:04:02,159 --> 00:04:03,200
incorporate the

122
00:04:03,200 --> 00:04:06,640
the values from each client

123
00:04:07,360 --> 00:04:09,760
the last step is that the servers then

124
00:04:09,760 --> 00:04:11,920
publish a subset of their these tree

125
00:04:11,920 --> 00:04:12,879
shares

126
00:04:12,879 --> 00:04:15,680
to find the head hitters so for example

127
00:04:15,680 --> 00:04:17,040
if the threshold

128
00:04:17,040 --> 00:04:19,040
is three here so the servers are looking

129
00:04:19,040 --> 00:04:20,720
for strings that more than three clients

130
00:04:20,720 --> 00:04:21,600
hold

131
00:04:21,600 --> 00:04:23,520
what they do is they start at the root

132
00:04:23,520 --> 00:04:24,880
and they publish their shares of the

133
00:04:24,880 --> 00:04:26,479
root value

134
00:04:26,479 --> 00:04:27,840
and what the servers learn is that

135
00:04:27,840 --> 00:04:30,000
there's six six clients

136
00:04:30,000 --> 00:04:32,880
whose strings begin with the uh empty

137
00:04:32,880 --> 00:04:34,880
symbol

138
00:04:34,880 --> 00:04:36,479
so then the servers progress down the

139
00:04:36,479 --> 00:04:38,479
tree they publish the shares of the

140
00:04:38,479 --> 00:04:41,520
the first level nodes and they see that

141
00:04:41,520 --> 00:04:43,600
there's two clients whose strings begin

142
00:04:43,600 --> 00:04:44,160
with the

143
00:04:44,160 --> 00:04:46,560
the symbol zero and four clients whose

144
00:04:46,560 --> 00:04:48,639
strings begin with the symbol one

145
00:04:48,639 --> 00:04:50,479
so now the servers prune the left

146
00:04:50,479 --> 00:04:52,639
subtree and continue down the right

147
00:04:52,639 --> 00:04:53,360
subtree

148
00:04:53,360 --> 00:04:55,120
now they find that there's four clients

149
00:04:55,120 --> 00:04:56,479
whose strings begin with

150
00:04:56,479 --> 00:04:59,120
one zero and zero clients whose strings

151
00:04:59,120 --> 00:05:00,240
begin with one one

152
00:05:00,240 --> 00:05:01,600
and so this just prune again and then

153
00:05:01,600 --> 00:05:03,280
continue down until they find

154
00:05:03,280 --> 00:05:05,199
this heavy hitter which is the string

155
00:05:05,199 --> 00:05:06,400
one zero one

156
00:05:06,400 --> 00:05:10,000
where one zero one are kind of the the

157
00:05:10,000 --> 00:05:12,800
um the symbols on the path to this this

158
00:05:12,800 --> 00:05:15,039
leaf

159
00:05:16,160 --> 00:05:17,680
so this is an example with one heavy

160
00:05:17,680 --> 00:05:19,199
hitter there could be more than one

161
00:05:19,199 --> 00:05:21,759
one heavy hitter in the tree but the

162
00:05:21,759 --> 00:05:22,639
breadth first search

163
00:05:22,639 --> 00:05:26,080
works almost the same so this simple

164
00:05:26,080 --> 00:05:27,360
scheme already has some useful

165
00:05:27,360 --> 00:05:29,280
properties the servers find exactly the

166
00:05:29,280 --> 00:05:31,199
set of heavy hitters there's no error

167
00:05:31,199 --> 00:05:34,000
whatsoever and there's some privacy

168
00:05:34,000 --> 00:05:35,520
property here already which is that if

169
00:05:35,520 --> 00:05:37,600
one of the servers is honest

170
00:05:37,600 --> 00:05:40,080
the malicious server only learns the set

171
00:05:40,080 --> 00:05:40,639
of

172
00:05:40,639 --> 00:05:43,840
heavy prefixes in this tree

173
00:05:43,840 --> 00:05:47,280
so again the full privacy definition all

174
00:05:47,280 --> 00:05:48,720
is in the paper so i'll point you there

175
00:05:48,720 --> 00:05:50,400
if you're interested

176
00:05:50,400 --> 00:05:51,840
but it turns out that we're not even

177
00:05:51,840 --> 00:05:54,000
close to done so there's a couple of

178
00:05:54,000 --> 00:05:55,520
technical challenges left here so the

179
00:05:55,520 --> 00:05:56,400
first is that

180
00:05:56,400 --> 00:05:59,199
if this these each client string is is

181
00:05:59,199 --> 00:06:00,960
large say 256 bits

182
00:06:00,960 --> 00:06:02,720
then this tree is huge exponentially

183
00:06:02,720 --> 00:06:04,720
large in fact which especially matters

184
00:06:04,720 --> 00:06:06,400
when we're dealing with urls

185
00:06:06,400 --> 00:06:08,880
or locations or passwords as the strings

186
00:06:08,880 --> 00:06:10,639
that the clients are holding

187
00:06:10,639 --> 00:06:12,080
and this tree is so big that the client

188
00:06:12,080 --> 00:06:14,560
can't actually materialize it

189
00:06:14,560 --> 00:06:16,080
so i'll describe how we solve this

190
00:06:16,080 --> 00:06:18,400
problem in a minute using a tool a new

191
00:06:18,400 --> 00:06:20,080
tool called an incremental distributed

192
00:06:20,080 --> 00:06:20,960
point function

193
00:06:20,960 --> 00:06:22,639
which essentially gives a succinct way

194
00:06:22,639 --> 00:06:24,800
to secret share the node values on a

195
00:06:24,800 --> 00:06:28,240
tree with a non-zero path

196
00:06:28,240 --> 00:06:30,000
the second technical challenge is that

197
00:06:30,000 --> 00:06:32,000
clients can cheat and send malformed

198
00:06:32,000 --> 00:06:33,039
secret shares

199
00:06:33,039 --> 00:06:35,759
which would lead to data corruption and

200
00:06:35,759 --> 00:06:37,360
for this we use a new technique

201
00:06:37,360 --> 00:06:39,520
called malicious secure sketching which

202
00:06:39,520 --> 00:06:40,800
allows the servers to

203
00:06:40,800 --> 00:06:42,720
test whether a secret shared vector is

204
00:06:42,720 --> 00:06:44,960
non-zero and a single coordinate

205
00:06:44,960 --> 00:06:46,960
and we get malicious security against

206
00:06:46,960 --> 00:06:48,639
both the servers and

207
00:06:48,639 --> 00:06:51,440
against the client

208
00:06:51,919 --> 00:06:53,039
so let me talk about this first

209
00:06:53,039 --> 00:06:54,960
contribution incremental distributed

210
00:06:54,960 --> 00:06:56,160
point functions

211
00:06:56,160 --> 00:06:58,080
so in the warm-up scheme that i just

212
00:06:58,080 --> 00:07:00,000
described the client prepares this

213
00:07:00,000 --> 00:07:02,080
binary tree its secret shares the values

214
00:07:02,080 --> 00:07:03,440
on the nodes of the tree and sends a

215
00:07:03,440 --> 00:07:05,199
share to each server

216
00:07:05,199 --> 00:07:07,680
and as i mentioned when the string is is

217
00:07:07,680 --> 00:07:09,120
n bits the size

218
00:07:09,120 --> 00:07:10,880
of this tree is something like 2 to the

219
00:07:10,880 --> 00:07:13,039
n

220
00:07:13,360 --> 00:07:15,280
with an incremental dpf what the client

221
00:07:15,280 --> 00:07:16,960
can do is it prepares

222
00:07:16,960 --> 00:07:22,000
a pair of succinct cryptographic keys

223
00:07:22,000 --> 00:07:24,720
that we'll call dpf keys and instead of

224
00:07:24,720 --> 00:07:26,240
sending these secret shares of this

225
00:07:26,240 --> 00:07:27,919
entire tree explicitly the client just

226
00:07:27,919 --> 00:07:28,560
sends these

227
00:07:28,560 --> 00:07:30,880
these keys to the servers in our

228
00:07:30,880 --> 00:07:33,039
construction the keys have size linear

229
00:07:33,039 --> 00:07:34,560
essentially linear in the length of the

230
00:07:34,560 --> 00:07:36,960
client string

231
00:07:36,960 --> 00:07:38,639
you can also solve this problem using a

232
00:07:38,639 --> 00:07:40,400
standard distributed point function but

233
00:07:40,400 --> 00:07:42,240
the key size there would be quadratic in

234
00:07:42,240 --> 00:07:44,400
the length of the client string

235
00:07:44,400 --> 00:07:47,199
so what the servers do given these dpf

236
00:07:47,199 --> 00:07:47,759
keys

237
00:07:47,759 --> 00:07:51,120
is they can actually evaluate run this

238
00:07:51,120 --> 00:07:53,520
breadth first earth algorithm as before

239
00:07:53,520 --> 00:07:55,840
and to do so they kind of evaluate these

240
00:07:55,840 --> 00:07:57,120
dpf keys

241
00:07:57,120 --> 00:07:59,199
at each point in the tree going down the

242
00:07:59,199 --> 00:08:01,199
tree and

243
00:08:01,199 --> 00:08:02,639
it turns out with our construction

244
00:08:02,639 --> 00:08:04,240
evaluating the keys on

245
00:08:04,240 --> 00:08:06,080
on a single path down the tree only

246
00:08:06,080 --> 00:08:07,440
takes a linear number

247
00:08:07,440 --> 00:08:09,520
of aes operations in the depth of the

248
00:08:09,520 --> 00:08:12,080
tree whereas this using standard dpfs

249
00:08:12,080 --> 00:08:14,240
would require quadratically many aes

250
00:08:14,240 --> 00:08:16,560
operations and the reason for that is

251
00:08:16,560 --> 00:08:18,400
that using a standard dpf you'd kind of

252
00:08:18,400 --> 00:08:19,919
need to send a dpf

253
00:08:19,919 --> 00:08:22,560
key for each layer in the tree and this

254
00:08:22,560 --> 00:08:24,000
is where the quadratic cost would come

255
00:08:24,000 --> 00:08:25,520
from

256
00:08:25,520 --> 00:08:27,039
so i'm not going to say much more about

257
00:08:27,039 --> 00:08:28,720
the construction we're essentially

258
00:08:28,720 --> 00:08:30,400
building on the dpf construction of

259
00:08:30,400 --> 00:08:32,320
prior work that just requires symmetric

260
00:08:32,320 --> 00:08:33,760
key operations

261
00:08:33,760 --> 00:08:36,799
and the prior dpf construction already

262
00:08:36,799 --> 00:08:38,080
kind of uses the tree structure

263
00:08:38,080 --> 00:08:39,599
internally

264
00:08:39,599 --> 00:08:41,679
our our contribution is just to expose

265
00:08:41,679 --> 00:08:44,159
this structure explicitly

266
00:08:44,159 --> 00:08:45,519
so that's how we solve the the

267
00:08:45,519 --> 00:08:47,200
communication problem we use this new

268
00:08:47,200 --> 00:08:48,000
tool called an

269
00:08:48,000 --> 00:08:50,480
incremental distributed point function

270
00:08:50,480 --> 00:08:52,480
the second problem is that clients can

271
00:08:52,480 --> 00:08:56,080
can can behave so in this

272
00:08:56,080 --> 00:08:57,680
warm-up scheme i mentioned the client

273
00:08:57,680 --> 00:09:00,080
can send garbage or random values

274
00:09:00,080 --> 00:09:01,680
instead of this kind of carefully

275
00:09:01,680 --> 00:09:03,120
structured tree that the client should

276
00:09:03,120 --> 00:09:03,920
have sent

277
00:09:03,920 --> 00:09:08,320
and um

278
00:09:08,320 --> 00:09:11,680
the servers can't detect this

279
00:09:12,399 --> 00:09:15,839
so our approach is to use this uh this

280
00:09:15,839 --> 00:09:18,080
this new tool called malicious secure

281
00:09:18,080 --> 00:09:19,120
sketching

282
00:09:19,120 --> 00:09:21,120
so the observation here is that honest

283
00:09:21,120 --> 00:09:22,800
clients will send shares of a tree that

284
00:09:22,800 --> 00:09:24,560
only has a single one at each level of

285
00:09:24,560 --> 00:09:25,440
the tree

286
00:09:25,440 --> 00:09:27,120
so each client can essentially only vote

287
00:09:27,120 --> 00:09:29,680
for one string

288
00:09:29,680 --> 00:09:31,680
what we can do is have the servers run a

289
00:09:31,680 --> 00:09:34,000
protocol on each client's key at each

290
00:09:34,000 --> 00:09:35,680
layer of the tree to check that this

291
00:09:35,680 --> 00:09:36,959
invariant holds

292
00:09:36,959 --> 00:09:40,080
before continuing processing further

293
00:09:40,080 --> 00:09:41,680
so this protocol of the server's run

294
00:09:41,680 --> 00:09:43,440
checks that the servers are holding a

295
00:09:43,440 --> 00:09:45,040
secret sharing of a vector

296
00:09:45,040 --> 00:09:48,080
of hamming weight one so as the servers

297
00:09:48,080 --> 00:09:49,440
kind of progress down the tree

298
00:09:49,440 --> 00:09:53,200
using this breadth-first search approach

299
00:09:53,200 --> 00:09:54,800
they run this protocol at each layer of

300
00:09:54,800 --> 00:09:56,880
the tree across all the shares that

301
00:09:56,880 --> 00:09:57,920
they're

302
00:09:57,920 --> 00:10:01,279
that they're holding and they check

303
00:10:01,279 --> 00:10:03,680
that there's a single non-zero value in

304
00:10:03,680 --> 00:10:05,360
this

305
00:10:05,360 --> 00:10:06,959
in the in the secret shared vector that

306
00:10:06,959 --> 00:10:08,800
their shares represent

307
00:10:08,800 --> 00:10:10,480
and if that invariant holds down the

308
00:10:10,480 --> 00:10:12,079
tree the clients will continue

309
00:10:12,079 --> 00:10:13,600
otherwise they'll reject the the

310
00:10:13,600 --> 00:10:16,959
client's submission is invalid

311
00:10:17,360 --> 00:10:20,320
so prior work solves this problem using

312
00:10:20,320 --> 00:10:23,279
a number of different techniques

313
00:10:23,279 --> 00:10:27,040
and those prior prior um protocols

314
00:10:27,040 --> 00:10:28,480
either get security only against

315
00:10:28,480 --> 00:10:30,160
semi-honest

316
00:10:30,160 --> 00:10:31,680
servers so when the servers execute the

317
00:10:31,680 --> 00:10:34,079
protocol correctly or

318
00:10:34,079 --> 00:10:35,760
require interaction with the client in

319
00:10:35,760 --> 00:10:37,680
the servers or require additional

320
00:10:37,680 --> 00:10:39,040
non-colluding servers

321
00:10:39,040 --> 00:10:40,320
and our technique avoids these

322
00:10:40,320 --> 00:10:43,519
limitations the basic idea is to convert

323
00:10:43,519 --> 00:10:45,680
a semi-honest secure scheme

324
00:10:45,680 --> 00:10:48,399
for this testing whether a secret shared

325
00:10:48,399 --> 00:10:49,920
vector has hemingway one into a

326
00:10:49,920 --> 00:10:51,200
malicious secure one

327
00:10:51,200 --> 00:10:52,880
using an idea from the multi-party

328
00:10:52,880 --> 00:10:54,480
computation literature

329
00:10:54,480 --> 00:10:55,920
called an algebraic manipulation

330
00:10:55,920 --> 00:10:58,640
detection code this is how we solve the

331
00:10:58,640 --> 00:11:00,160
second challenge at a very very

332
00:11:00,160 --> 00:11:03,440
high level so i want to talk now about

333
00:11:03,440 --> 00:11:04,480
our implementation

334
00:11:04,480 --> 00:11:07,279
and evaluation of the system we

335
00:11:07,279 --> 00:11:09,200
implemented the full system and roughly

336
00:11:09,200 --> 00:11:11,839
3 500 lines of rus code our

337
00:11:11,839 --> 00:11:13,519
implementation is open source at this

338
00:11:13,519 --> 00:11:14,240
link

339
00:11:14,240 --> 00:11:16,720
and google has also implemented our

340
00:11:16,720 --> 00:11:17,440
incremental

341
00:11:17,440 --> 00:11:20,160
dpf primitive and open sourced it as

342
00:11:20,160 --> 00:11:22,320
well

343
00:11:22,320 --> 00:11:24,160
for our experiments we put two servers

344
00:11:24,160 --> 00:11:26,079
on opposite sides of the us and amazon

345
00:11:26,079 --> 00:11:26,959
data centers

346
00:11:26,959 --> 00:11:29,519
and we have a simulated client machine

347
00:11:29,519 --> 00:11:30,240
in in

348
00:11:30,240 --> 00:11:32,560
the on the east coast data center and we

349
00:11:32,560 --> 00:11:35,839
use 36 core servers

350
00:11:36,160 --> 00:11:39,040
our first evaluation result is to show

351
00:11:39,040 --> 00:11:41,519
that incremental dpf save computation

352
00:11:41,519 --> 00:11:43,279
over what you could do with prior

353
00:11:43,279 --> 00:11:44,959
approaches so

354
00:11:44,959 --> 00:11:47,040
i'm showing the line here for a standard

355
00:11:47,040 --> 00:11:49,519
dpf which has this quadratic cost

356
00:11:49,519 --> 00:11:52,480
and for a scheme based on succinct

357
00:11:52,480 --> 00:11:54,000
sketches from prior work

358
00:11:54,000 --> 00:11:56,000
for solving a similar similar problem to

359
00:11:56,000 --> 00:11:57,600
the hot private heavy repeaters problems

360
00:11:57,600 --> 00:11:58,000
that

361
00:11:58,000 --> 00:12:00,240
that we're solving and you'll see that

362
00:12:00,240 --> 00:12:02,320
this incremental dpf has a very low

363
00:12:02,320 --> 00:12:04,160
absolute cost and also the cost

364
00:12:04,160 --> 00:12:05,920
grows linearly although you can't see it

365
00:12:05,920 --> 00:12:10,399
because it's growing so slowly in terms

366
00:12:10,399 --> 00:12:12,639
of communication incremental dpfs

367
00:12:12,639 --> 00:12:14,399
also give a linear cost instead of the

368
00:12:14,399 --> 00:12:18,320
quadratic one of the standard dpf

369
00:12:18,320 --> 00:12:21,040
in terms of total cost this is this is

370
00:12:21,040 --> 00:12:22,240
the cost for

371
00:12:22,240 --> 00:12:24,480
the servers to search for the top 900

372
00:12:24,480 --> 00:12:25,440
heavy hitters

373
00:12:25,440 --> 00:12:27,680
when the clients are holding 256 bit

374
00:12:27,680 --> 00:12:29,040
strings

375
00:12:29,040 --> 00:12:31,360
so for something like 400 000 clients

376
00:12:31,360 --> 00:12:33,360
the computation time at the servers

377
00:12:33,360 --> 00:12:35,360
is a bit under an hour and the total

378
00:12:35,360 --> 00:12:36,480
bandwidth required

379
00:12:36,480 --> 00:12:38,800
between the servers is something like 26

380
00:12:38,800 --> 00:12:40,079
gigabytes

381
00:12:40,079 --> 00:12:41,279
and i'll emphasize here that the

382
00:12:41,279 --> 00:12:42,800
computation here is completely

383
00:12:42,800 --> 00:12:44,959
paralyzable so if you needed

384
00:12:44,959 --> 00:12:46,480
the wall clock time to go down you could

385
00:12:46,480 --> 00:12:50,000
just throw more cores at the problem

386
00:12:50,000 --> 00:12:52,639
so while this this amount of computation

387
00:12:52,639 --> 00:12:54,480
is non-trivial it's still something that

388
00:12:54,480 --> 00:12:55,839
could be totally feasible for an

389
00:12:55,839 --> 00:12:57,680
application where you're you're latency

390
00:12:57,680 --> 00:12:58,959
tolerant like these telemetry

391
00:12:58,959 --> 00:13:01,599
applications

392
00:13:02,560 --> 00:13:04,399
so in this technique in this paper we

393
00:13:04,399 --> 00:13:06,240
give new techniques for solving this

394
00:13:06,240 --> 00:13:08,880
private heavy hitters problem and as i

395
00:13:08,880 --> 00:13:10,639
mentioned with 400 000 clients

396
00:13:10,639 --> 00:13:12,320
the server-side computation takes less

397
00:13:12,320 --> 00:13:14,959
than an hour over the wide area network

398
00:13:14,959 --> 00:13:16,959
the system provides privacy against a

399
00:13:16,959 --> 00:13:18,000
malicious server

400
00:13:18,000 --> 00:13:19,600
and correctness against malicious

401
00:13:19,600 --> 00:13:22,320
clients and we get an npc style privacy

402
00:13:22,320 --> 00:13:23,360
guarantee

403
00:13:23,360 --> 00:13:25,680
so this is in contrast to the prior

404
00:13:25,680 --> 00:13:28,160
systems that typically used

405
00:13:28,160 --> 00:13:30,800
a local differential privacy approach

406
00:13:30,800 --> 00:13:32,720
our new techniques include more powerful

407
00:13:32,720 --> 00:13:34,639
types of distributed point functions i

408
00:13:34,639 --> 00:13:36,320
talked about incremental dpfs there's

409
00:13:36,320 --> 00:13:37,760
another type of dpf called an

410
00:13:37,760 --> 00:13:39,600
extractable dpf that we introduced in

411
00:13:39,600 --> 00:13:40,720
the paper

412
00:13:40,720 --> 00:13:43,040
and we give new tools for providing

413
00:13:43,040 --> 00:13:44,800
malicious security and systems using

414
00:13:44,800 --> 00:13:46,720
secret sharing

415
00:13:46,720 --> 00:13:49,600
and these tools we hope will have

416
00:13:49,600 --> 00:13:51,040
application to other private data

417
00:13:51,040 --> 00:13:52,320
collection problems

418
00:13:52,320 --> 00:13:54,399
and we sketch one in the paper as well

419
00:13:54,399 --> 00:13:56,639
so our paper is on eprintz and the code

420
00:13:56,639 --> 00:13:57,279
is

421
00:13:57,279 --> 00:14:00,480
on github so please check

422
00:14:00,480 --> 00:14:03,839
check them out thanks

