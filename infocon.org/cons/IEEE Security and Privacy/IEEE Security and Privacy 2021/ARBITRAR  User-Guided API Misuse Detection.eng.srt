1
00:00:01,120 --> 00:00:03,040
hello everyone i am enzyang

2
00:00:03,040 --> 00:00:04,560
a current phd student from the

3
00:00:04,560 --> 00:00:06,399
university of pennsylvania

4
00:00:06,399 --> 00:00:08,160
welcome to my talk on our paper

5
00:00:08,160 --> 00:00:10,240
arbitrary user-guided apm is used

6
00:00:10,240 --> 00:00:11,679
detection

7
00:00:11,679 --> 00:00:13,920
software apis exhibit reach diversity

8
00:00:13,920 --> 00:00:14,880
and complexity

9
00:00:14,880 --> 00:00:16,560
which not only renders them a common

10
00:00:16,560 --> 00:00:18,160
source of programming errors but also

11
00:00:18,160 --> 00:00:19,680
hinders program analysis tools for

12
00:00:19,680 --> 00:00:20,880
checking them

13
00:00:20,880 --> 00:00:23,039
according to a recent study 17 percent

14
00:00:23,039 --> 00:00:25,760
of a bug stem from abm's uses

15
00:00:25,760 --> 00:00:28,320
these misuses can of course have serious

16
00:00:28,320 --> 00:00:30,080
security impact

17
00:00:30,080 --> 00:00:32,719
let's look at one example api open and

18
00:00:32,719 --> 00:00:34,480
you will see how such a commonly used

19
00:00:34,480 --> 00:00:34,960
api

20
00:00:34,960 --> 00:00:37,440
posed great challenge to an apm is used

21
00:00:37,440 --> 00:00:38,559
detector

22
00:00:38,559 --> 00:00:40,559
so open returns an integer file

23
00:00:40,559 --> 00:00:43,120
descriptor a success the return value is

24
00:00:43,120 --> 00:00:44,079
non-negative

25
00:00:44,079 --> 00:00:46,719
otherwise the user must handle the error

26
00:00:46,719 --> 00:00:48,239
when the call succeeded

27
00:00:48,239 --> 00:00:50,399
subsequent read might be called and the

28
00:00:50,399 --> 00:00:51,440
file descriptor

29
00:00:51,440 --> 00:00:53,920
must be closed at the end the above

30
00:00:53,920 --> 00:00:55,760
example shows the correct usage

31
00:00:55,760 --> 00:00:58,879
as it contains all of the above

32
00:00:58,879 --> 00:01:01,280
but this example shows the misuse as the

33
00:01:01,280 --> 00:01:02,960
file descriptor is not being checked and

34
00:01:02,960 --> 00:01:05,119
therefore error won't be handled

35
00:01:05,119 --> 00:01:07,360
in this case the user does some check on

36
00:01:07,360 --> 00:01:08,560
fd but the check

37
00:01:08,560 --> 00:01:10,840
itself is incorrect according to the

38
00:01:10,840 --> 00:01:12,000
specification

39
00:01:12,000 --> 00:01:14,880
the fd on success will be non-negative

40
00:01:14,880 --> 00:01:16,240
but not non-null

41
00:01:16,240 --> 00:01:19,600
and this is again an abm is used

42
00:01:19,600 --> 00:01:21,920
this time we show another check of fd

43
00:01:21,920 --> 00:01:23,040
which compares to

44
00:01:23,040 --> 00:01:25,119
zero with predicate greater than or

45
00:01:25,119 --> 00:01:26,159
equal to

46
00:01:26,159 --> 00:01:27,520
although different than the first

47
00:01:27,520 --> 00:01:29,280
example this one is actually

48
00:01:29,280 --> 00:01:32,400
a correct check as this eve then branch

49
00:01:32,400 --> 00:01:34,799
is a success branch the real problem

50
00:01:34,799 --> 00:01:36,079
with this code snippet

51
00:01:36,079 --> 00:01:38,240
is that the file descriptor is not been

52
00:01:38,240 --> 00:01:39,200
closed

53
00:01:39,200 --> 00:01:42,880
hence another misuse what could further

54
00:01:42,880 --> 00:01:46,079
complicate this api is this last example

55
00:01:46,079 --> 00:01:48,159
now the result of open is being stored

56
00:01:48,159 --> 00:01:49,600
into a config struct

57
00:01:49,600 --> 00:01:51,520
after a correct error handling the

58
00:01:51,520 --> 00:01:53,600
config struct is being returned

59
00:01:53,600 --> 00:01:56,320
and the ownership of fdu is being passed

60
00:01:56,320 --> 00:01:58,159
to a parent context

61
00:01:58,159 --> 00:02:00,159
although there's no call to function

62
00:02:00,159 --> 00:02:02,240
close this could pretty much be a

63
00:02:02,240 --> 00:02:03,200
correct usage

64
00:02:03,200 --> 00:02:05,119
as we can expect the caller to close

65
00:02:05,119 --> 00:02:07,840
this file descriptor

66
00:02:07,840 --> 00:02:09,598
hope you see that there are many ways

67
00:02:09,598 --> 00:02:12,319
which the api usage could be

68
00:02:12,319 --> 00:02:14,560
correct or incorrect and sometimes even

69
00:02:14,560 --> 00:02:15,840
in between

70
00:02:15,840 --> 00:02:17,920
they all contain subtle details that

71
00:02:17,920 --> 00:02:21,599
differentiate one from another

72
00:02:21,840 --> 00:02:24,080
next let's look at a less commonly used

73
00:02:24,080 --> 00:02:26,480
function png destroy right struct

74
00:02:26,480 --> 00:02:28,800
this function is a dialycular function

75
00:02:28,800 --> 00:02:29,920
provided in leap

76
00:02:29,920 --> 00:02:32,640
png people usually use this api in the

77
00:02:32,640 --> 00:02:33,760
following way

78
00:02:33,760 --> 00:02:36,319
first the user creates a png struct

79
00:02:36,319 --> 00:02:36,800
using

80
00:02:36,800 --> 00:02:40,000
png create write struct and then

81
00:02:40,000 --> 00:02:42,560
by passing in the png pointer people

82
00:02:42,560 --> 00:02:43,280
call

83
00:02:43,280 --> 00:02:45,599
png create info struct to create an info

84
00:02:45,599 --> 00:02:46,959
pointer

85
00:02:46,959 --> 00:02:50,160
at the end people free both the png

86
00:02:50,160 --> 00:02:51,599
pointer and the info pointer

87
00:02:51,599 --> 00:02:52,959
simultaneously

88
00:02:52,959 --> 00:02:56,720
using the png destroy right struct

89
00:02:56,720 --> 00:02:58,800
also it is okay for the user to pass in

90
00:02:58,800 --> 00:03:00,319
null for the second argument

91
00:03:00,319 --> 00:03:02,319
in that case nothing will be done to the

92
00:03:02,319 --> 00:03:03,680
info struct

93
00:03:03,680 --> 00:03:05,840
in this code snippet there are two calls

94
00:03:05,840 --> 00:03:08,080
to png destroy right struct

95
00:03:08,080 --> 00:03:09,760
the first one happens when the call to

96
00:03:09,760 --> 00:03:12,080
png create infrastructure fails

97
00:03:12,080 --> 00:03:14,400
in this case we don't have to we don't

98
00:03:14,400 --> 00:03:16,480
have an a valid info pointer therefore

99
00:03:16,480 --> 00:03:19,599
we passing null as a second argument

100
00:03:19,599 --> 00:03:21,920
on line 8 on the other hand we can

101
00:03:21,920 --> 00:03:24,400
assume both png pointer and info pointer

102
00:03:24,400 --> 00:03:25,840
are valid

103
00:03:25,840 --> 00:03:28,080
therefore we should pass in info pointer

104
00:03:28,080 --> 00:03:29,519
as the second argument

105
00:03:29,519 --> 00:03:31,519
but unfortunately it fails to do so

106
00:03:31,519 --> 00:03:32,560
which results

107
00:03:32,560 --> 00:03:36,000
in info pointer not being freed hence a

108
00:03:36,000 --> 00:03:37,200
memory leak

109
00:03:37,200 --> 00:03:39,040
notice that the second usage is called

110
00:03:39,040 --> 00:03:41,040
with exactly the same arguments as the

111
00:03:41,040 --> 00:03:41,840
first one

112
00:03:41,840 --> 00:03:44,720
yet is still an api misuse this suggests

113
00:03:44,720 --> 00:03:46,720
that the analysis of api issues have to

114
00:03:46,720 --> 00:03:47,120
have

115
00:03:47,120 --> 00:03:48,720
very detailed information about the

116
00:03:48,720 --> 00:03:51,680
calling context

117
00:03:52,159 --> 00:03:54,159
let's then talk about the existing tools

118
00:03:54,159 --> 00:03:55,519
on finding those api

119
00:03:55,519 --> 00:03:58,080
uses we can roughly divide them into two

120
00:03:58,080 --> 00:03:58,959
categories

121
00:03:58,959 --> 00:04:02,239
category a assumes api usage follows

122
00:04:02,239 --> 00:04:04,799
simple idioms that can be mined from the

123
00:04:04,799 --> 00:04:05,599
code

124
00:04:05,599 --> 00:04:08,640
for example api send will scan

125
00:04:08,640 --> 00:04:10,720
multiple code bases and collect all of

126
00:04:10,720 --> 00:04:12,640
the usages of one particular

127
00:04:12,640 --> 00:04:15,519
api function given a predefined pattern

128
00:04:15,519 --> 00:04:17,199
you will find among those usages

129
00:04:17,199 --> 00:04:19,918
the majority and the minority if there

130
00:04:19,918 --> 00:04:21,279
is statistically

131
00:04:21,279 --> 00:04:23,680
significant minority these minorities

132
00:04:23,680 --> 00:04:26,160
will be reported as alarms

133
00:04:26,160 --> 00:04:29,040
these tools are very easy to use the

134
00:04:29,040 --> 00:04:30,960
user don't need to know anything about

135
00:04:30,960 --> 00:04:33,520
tool nor about the api since the

136
00:04:33,520 --> 00:04:36,240
specifications are mined for code

137
00:04:36,240 --> 00:04:38,320
therefore the users are usually just one

138
00:04:38,320 --> 00:04:41,360
command away from the bug report

139
00:04:41,360 --> 00:04:43,680
but the problem now is that they assume

140
00:04:43,680 --> 00:04:45,919
we have large corpus of code and a clear

141
00:04:45,919 --> 00:04:47,520
majority and minority

142
00:04:47,520 --> 00:04:49,680
this does not usually hold simply

143
00:04:49,680 --> 00:04:51,840
because of a complexity of the real life

144
00:04:51,840 --> 00:04:54,080
apis we just showed earlier

145
00:04:54,080 --> 00:04:57,040
if this is applied to that png destroy

146
00:04:57,040 --> 00:04:58,560
right struct function we mentioned

147
00:04:58,560 --> 00:04:59,280
earlier

148
00:04:59,280 --> 00:05:01,919
api 7 won't work because there is no

149
00:05:01,919 --> 00:05:04,240
huge corpus of code to mine in the first

150
00:05:04,240 --> 00:05:05,280
place

151
00:05:05,280 --> 00:05:07,840
also it relies on predefined patterns to

152
00:05:07,840 --> 00:05:10,000
perform statistical reasoning which

153
00:05:10,000 --> 00:05:11,840
could make it hard to generalize to

154
00:05:11,840 --> 00:05:14,960
arbitrary api specifications

155
00:05:14,960 --> 00:05:17,520
on the other hand of the spectrum we

156
00:05:17,520 --> 00:05:18,960
have

157
00:05:18,960 --> 00:05:20,560
tools that give the end user full

158
00:05:20,560 --> 00:05:22,320
control that is writing

159
00:05:22,320 --> 00:05:25,600
the api specifications examples of those

160
00:05:25,600 --> 00:05:26,080
include

161
00:05:26,080 --> 00:05:29,199
saml sys and im checker usually these

162
00:05:29,199 --> 00:05:31,120
tools provide domain specific language

163
00:05:31,120 --> 00:05:32,080
for the user

164
00:05:32,080 --> 00:05:35,120
to write specifications

165
00:05:35,120 --> 00:05:36,960
these tools are very powerful as the

166
00:05:36,960 --> 00:05:38,639
user can write quite complex

167
00:05:38,639 --> 00:05:39,759
specifications

168
00:05:39,759 --> 00:05:41,840
but the problem is also quite obvious is

169
00:05:41,840 --> 00:05:43,840
that writing the specification requires

170
00:05:43,840 --> 00:05:46,560
expertise and time

171
00:05:46,560 --> 00:05:48,720
meanwhile if an api is less commonly

172
00:05:48,720 --> 00:05:50,080
used people might not

173
00:05:50,080 --> 00:05:52,720
find it worth it to invest time writing

174
00:05:52,720 --> 00:05:54,160
specifications

175
00:05:54,160 --> 00:05:56,479
that also implies that the effectiveness

176
00:05:56,479 --> 00:05:57,840
of these tools depends

177
00:05:57,840 --> 00:05:59,919
on the quality of the specifications

178
00:05:59,919 --> 00:06:02,720
written by the human

179
00:06:02,720 --> 00:06:05,440
while meanwhile although having lots of

180
00:06:05,440 --> 00:06:06,080
differences

181
00:06:06,080 --> 00:06:08,240
these tools from both categories are

182
00:06:08,240 --> 00:06:10,720
used in the same following way

183
00:06:10,720 --> 00:06:12,639
the mine idioms or user written

184
00:06:12,639 --> 00:06:14,639
specifications are passed to an api

185
00:06:14,639 --> 00:06:15,840
misuse checker

186
00:06:15,840 --> 00:06:18,720
and the checker then produce a bug

187
00:06:18,720 --> 00:06:19,360
report

188
00:06:19,360 --> 00:06:21,039
the user needs to investigate the whole

189
00:06:21,039 --> 00:06:23,360
bug report and see if any of the alarms

190
00:06:23,360 --> 00:06:25,520
are real bugs if the false positive

191
00:06:25,520 --> 00:06:27,039
rates are very high

192
00:06:27,039 --> 00:06:29,199
this investigation process is very

193
00:06:29,199 --> 00:06:31,919
frustrating for the end user

194
00:06:31,919 --> 00:06:34,240
so now we raise the question can we

195
00:06:34,240 --> 00:06:36,720
enable regular programmers to find apm

196
00:06:36,720 --> 00:06:37,520
issues

197
00:06:37,520 --> 00:06:40,720
for arbitrary apis we list

198
00:06:40,720 --> 00:06:43,520
our three key ideas the first one being

199
00:06:43,520 --> 00:06:44,000
that

200
00:06:44,000 --> 00:06:46,880
looking at a usage regular developers

201
00:06:46,880 --> 00:06:48,080
can easily determine

202
00:06:48,080 --> 00:06:50,960
its validity

203
00:06:51,120 --> 00:06:54,319
the key idea too is that we can actually

204
00:06:54,319 --> 00:06:56,319
leverage users investigation of those

205
00:06:56,319 --> 00:06:57,280
bug report

206
00:06:57,280 --> 00:06:59,280
and learn from the user feedback by

207
00:06:59,280 --> 00:07:02,400
using machine learning models

208
00:07:02,400 --> 00:07:04,720
the final key idea is that we can use

209
00:07:04,720 --> 00:07:05,759
active learning

210
00:07:05,759 --> 00:07:08,479
to actively propose new api usages

211
00:07:08,479 --> 00:07:09,680
allowing the users

212
00:07:09,680 --> 00:07:13,440
to find bug even faster

213
00:07:13,759 --> 00:07:16,479
so we propose our solution user guided

214
00:07:16,479 --> 00:07:18,880
api misuse detection

215
00:07:18,880 --> 00:07:21,919
our solution arbitrar is an interactive

216
00:07:21,919 --> 00:07:23,120
tool for finding

217
00:07:23,120 --> 00:07:25,840
api misuse bugs it operates in a

218
00:07:25,840 --> 00:07:27,280
two-phase mode

219
00:07:27,280 --> 00:07:30,400
the first one being analysis and

220
00:07:30,400 --> 00:07:33,199
that that phase produces api usage

221
00:07:33,199 --> 00:07:35,440
databases containing a lot of program

222
00:07:35,440 --> 00:07:36,160
traces

223
00:07:36,160 --> 00:07:39,440
around the api and secondly

224
00:07:39,440 --> 00:07:42,160
we enter a user interaction phase that

225
00:07:42,160 --> 00:07:43,759
allows users to

226
00:07:43,759 --> 00:07:47,919
participate and find apim's use bugs

227
00:07:47,919 --> 00:07:50,080
with this design we have the following

228
00:07:50,080 --> 00:07:51,280
four goals

229
00:07:51,280 --> 00:07:53,440
the first one is efficient trace

230
00:07:53,440 --> 00:07:54,800
generation

231
00:07:54,800 --> 00:07:57,360
our arbitrage should work on large

232
00:07:57,360 --> 00:07:58,319
projects such as

233
00:07:58,319 --> 00:08:01,440
linux kernel secondly it should have

234
00:08:01,440 --> 00:08:03,680
generic trace representation

235
00:08:03,680 --> 00:08:06,000
this is to deal with arbitrary api with

236
00:08:06,000 --> 00:08:07,199
diverse specs

237
00:08:07,199 --> 00:08:09,599
and this representation should enable

238
00:08:09,599 --> 00:08:11,680
the machine learning model to learn api

239
00:08:11,680 --> 00:08:13,759
usages from scratch

240
00:08:13,759 --> 00:08:16,240
and third we should have real-time user

241
00:08:16,240 --> 00:08:18,080
interaction because interacting with the

242
00:08:18,080 --> 00:08:18,800
user

243
00:08:18,800 --> 00:08:21,199
should be quick and responsive so that

244
00:08:21,199 --> 00:08:23,360
user doesn't get frustrated when finding

245
00:08:23,360 --> 00:08:25,199
the bugs

246
00:08:25,199 --> 00:08:27,440
last but not least we should have very

247
00:08:27,440 --> 00:08:29,680
accurate alarm identification

248
00:08:29,680 --> 00:08:31,919
we should active accurately identify

249
00:08:31,919 --> 00:08:33,360
buggy api usages

250
00:08:33,360 --> 00:08:35,519
so that the user can confirm an apm is

251
00:08:35,519 --> 00:08:37,200
used within just a few rounds of

252
00:08:37,200 --> 00:08:38,080
interaction

253
00:08:38,080 --> 00:08:40,320
and the last point is actually the most

254
00:08:40,320 --> 00:08:43,440
important one among this floor

255
00:08:43,440 --> 00:08:47,760
so how do we do it um the first space

256
00:08:47,760 --> 00:08:50,640
is arbitrary analyzer it's basically

257
00:08:50,640 --> 00:08:52,839
performs under constrained symbolic

258
00:08:52,839 --> 00:08:55,200
execution to produce a database

259
00:08:55,200 --> 00:08:57,600
containing symbolic traces

260
00:08:57,600 --> 00:08:59,760
we only need source code and a target

261
00:08:59,760 --> 00:09:00,640
api name

262
00:09:00,640 --> 00:09:03,519
to collect all of the symbolic traces

263
00:09:03,519 --> 00:09:07,120
around this target api

264
00:09:07,600 --> 00:09:09,920
the traces symbolic traces are then

265
00:09:09,920 --> 00:09:10,959
passed into

266
00:09:10,959 --> 00:09:13,120
feature extractor to produce boolean

267
00:09:13,120 --> 00:09:14,000
features

268
00:09:14,000 --> 00:09:16,240
the feature extractor analyzes the

269
00:09:16,240 --> 00:09:17,120
traces

270
00:09:17,120 --> 00:09:19,120
and extracts information regarding a

271
00:09:19,120 --> 00:09:20,959
function call and its context

272
00:09:20,959 --> 00:09:23,839
for example return.checked is a feature

273
00:09:23,839 --> 00:09:25,680
telling whether the return value of the

274
00:09:25,680 --> 00:09:27,519
target function call is being used in a

275
00:09:27,519 --> 00:09:28,880
branch condition

276
00:09:28,880 --> 00:09:31,760
another example invoked before lock

277
00:09:31,760 --> 00:09:33,360
being true suggests that

278
00:09:33,360 --> 00:09:35,839
a lock function is being called before

279
00:09:35,839 --> 00:09:38,000
our target api call

280
00:09:38,000 --> 00:09:40,000
while this set of features is able to

281
00:09:40,000 --> 00:09:41,600
cover most of the known api

282
00:09:41,600 --> 00:09:43,120
specifications

283
00:09:43,120 --> 00:09:46,240
this is easily extensible the boolean

284
00:09:46,240 --> 00:09:48,240
features are then passed into binary

285
00:09:48,240 --> 00:09:49,040
encoding

286
00:09:49,040 --> 00:09:50,959
and gets turned into a fixed dimensional

287
00:09:50,959 --> 00:09:53,519
vector containing only zero and ones

288
00:09:53,519 --> 00:09:55,839
now this representation is relaxed from

289
00:09:55,839 --> 00:09:56,880
the logical domain

290
00:09:56,880 --> 00:09:58,480
into numerical domain and could be

291
00:09:58,480 --> 00:09:59,839
easily used by machine learning

292
00:09:59,839 --> 00:10:02,399
algorithms

293
00:10:02,640 --> 00:10:05,040
in our final step we feed the encoded

294
00:10:05,040 --> 00:10:06,640
traces into our active learning

295
00:10:06,640 --> 00:10:07,279
algorithm

296
00:10:07,279 --> 00:10:09,440
and starts the interactive process with

297
00:10:09,440 --> 00:10:10,560
a user

298
00:10:10,560 --> 00:10:12,720
at each iteration our active learning

299
00:10:12,720 --> 00:10:13,760
algorithm picks

300
00:10:13,760 --> 00:10:16,880
a trace with api usage presented to the

301
00:10:16,880 --> 00:10:17,519
user and

302
00:10:17,519 --> 00:10:20,720
asks for user feedback the user will see

303
00:10:20,720 --> 00:10:23,279
pure code showing the trace and provide

304
00:10:23,279 --> 00:10:23,920
simple

305
00:10:23,920 --> 00:10:26,480
bug or non-bug feedback basically just

306
00:10:26,480 --> 00:10:28,079
yes or no feedbacks

307
00:10:28,079 --> 00:10:29,600
the learning algorithm will learn from

308
00:10:29,600 --> 00:10:31,360
the user feedback and propose the next

309
00:10:31,360 --> 00:10:32,000
trace

310
00:10:32,000 --> 00:10:35,120
and thus staying inside the loop

311
00:10:35,120 --> 00:10:37,279
recall that our goal here is to propose

312
00:10:37,279 --> 00:10:38,959
buggy api usages

313
00:10:38,959 --> 00:10:41,279
as quickly as possible so how does the

314
00:10:41,279 --> 00:10:42,959
active learning algorithm pick a trace

315
00:10:42,959 --> 00:10:44,640
to achieve that

316
00:10:44,640 --> 00:10:47,360
let's first assume p the set of positive

317
00:10:47,360 --> 00:10:49,279
traces labeled by the user

318
00:10:49,279 --> 00:10:52,240
and the set of negative traces and u the

319
00:10:52,240 --> 00:10:52,720
set of

320
00:10:52,720 --> 00:10:55,360
unlabeled traces initially all of the

321
00:10:55,360 --> 00:10:56,160
traces are

322
00:10:56,160 --> 00:10:59,120
unlabeled so u will be the full input

323
00:10:59,120 --> 00:11:00,160
data set and p

324
00:11:00,160 --> 00:11:02,640
and n will be empty sets as the user

325
00:11:02,640 --> 00:11:04,320
provide more and more feedback

326
00:11:04,320 --> 00:11:07,040
the sets p and n will be gradually

327
00:11:07,040 --> 00:11:09,200
populated

328
00:11:09,200 --> 00:11:12,000
to select the most likely bug we do a

329
00:11:12,000 --> 00:11:13,279
very simple thing

330
00:11:13,279 --> 00:11:15,839
that is select the unlabeled trace that

331
00:11:15,839 --> 00:11:17,839
is the closest to the box

332
00:11:17,839 --> 00:11:21,120
and furthest from the num box

333
00:11:21,120 --> 00:11:23,839
this is simply reflected in the formula

334
00:11:23,839 --> 00:11:25,920
below the function g here is a scoring

335
00:11:25,920 --> 00:11:27,360
function that gives each

336
00:11:27,360 --> 00:11:29,760
unlabeled trace a score based on the

337
00:11:29,760 --> 00:11:31,279
null and positive traces

338
00:11:31,279 --> 00:11:34,160
and negative traces for each reiteration

339
00:11:34,160 --> 00:11:35,839
we simply select the x from

340
00:11:35,839 --> 00:11:40,399
u that has the maximum score g

341
00:11:40,399 --> 00:11:42,560
note that the difference between closest

342
00:11:42,560 --> 00:11:43,920
and furthest

343
00:11:43,920 --> 00:11:46,640
estimates the maximum discrepancy which

344
00:11:46,640 --> 00:11:47,200
we call

345
00:11:47,200 --> 00:11:49,519
md while the k function inside the

346
00:11:49,519 --> 00:11:51,920
formula is the kernel density estimation

347
00:11:51,920 --> 00:11:55,279
which is kde hence we get our algorithm

348
00:11:55,279 --> 00:11:58,880
name mdkde

349
00:11:59,120 --> 00:12:01,040
this table shows an actual run-through

350
00:12:01,040 --> 00:12:03,040
of our active learning algorithm

351
00:12:03,040 --> 00:12:05,040
in this example we want to find apme's

352
00:12:05,040 --> 00:12:06,720
uses with the function

353
00:12:06,720 --> 00:12:09,360
png destroy read struct in the first

354
00:12:09,360 --> 00:12:10,240
iteration

355
00:12:10,240 --> 00:12:12,800
our algorithm randomly picked a trace

356
00:12:12,800 --> 00:12:14,320
marked in the blue triangle

357
00:12:14,320 --> 00:12:16,800
and the user labeled it numbug suggested

358
00:12:16,800 --> 00:12:19,279
by the green cross on the second plot

359
00:12:19,279 --> 00:12:21,360
immediately in the second iteration our

360
00:12:21,360 --> 00:12:22,720
algorithm encountered an

361
00:12:22,720 --> 00:12:24,639
actual bug by picking the one that is

362
00:12:24,639 --> 00:12:26,240
the furthest from the first

363
00:12:26,240 --> 00:12:30,480
num bug that is indicated by this

364
00:12:30,480 --> 00:12:33,920
red plus sign in the third graph

365
00:12:33,920 --> 00:12:35,760
in the third iteration our algorithm

366
00:12:35,760 --> 00:12:37,600
picks the one that is the closest to the

367
00:12:37,600 --> 00:12:38,000
previous

368
00:12:38,000 --> 00:12:41,200
bug getting us the second bug

369
00:12:41,200 --> 00:12:43,279
and this process goes on until users

370
00:12:43,279 --> 00:12:46,000
just stop

371
00:12:47,360 --> 00:12:50,079
finally we come to our evaluations this

372
00:12:50,079 --> 00:12:51,440
table shows that within just

373
00:12:51,440 --> 00:12:53,920
five rounds of the iterations per api

374
00:12:53,920 --> 00:12:54,720
method

375
00:12:54,720 --> 00:12:57,360
we are able to find 89 of the box listed

376
00:12:57,360 --> 00:12:57,920
in our

377
00:12:57,920 --> 00:13:00,800
bug benchmark data set which outperforms

378
00:13:00,800 --> 00:13:04,639
api send with a wide margin

379
00:13:04,800 --> 00:13:07,440
this chart shows that the percentage of

380
00:13:07,440 --> 00:13:09,519
bug detected with respect to the number

381
00:13:09,519 --> 00:13:10,800
of iteration

382
00:13:10,800 --> 00:13:13,200
so what you can see is with zero uh

383
00:13:13,200 --> 00:13:14,240
iteration

384
00:13:14,240 --> 00:13:16,320
the user is not able to find any of the

385
00:13:16,320 --> 00:13:18,880
bugs but as we interact with the system

386
00:13:18,880 --> 00:13:19,680
more and more

387
00:13:19,680 --> 00:13:23,279
let's say at um iteration number five we

388
00:13:23,279 --> 00:13:24,160
are able to find

389
00:13:24,160 --> 00:13:27,680
89 of a bucks and with at most

390
00:13:27,680 --> 00:13:30,240
20 iterations our tool finds all of the

391
00:13:30,240 --> 00:13:32,320
bugs listed in our bug benchmark

392
00:13:32,320 --> 00:13:35,120
presented by api send and api mu for

393
00:13:35,120 --> 00:13:37,279
c

394
00:13:39,760 --> 00:13:42,240
then we applied our tool to linus kernel

395
00:13:42,240 --> 00:13:43,199
5.7

396
00:13:43,199 --> 00:13:46,160
open ssl lib png lib bluetooth and many

397
00:13:46,160 --> 00:13:48,079
of their dependent packages

398
00:13:48,079 --> 00:13:50,079
we found 40 bucks in total and on

399
00:13:50,079 --> 00:13:51,839
average we find the first bug

400
00:13:51,839 --> 00:13:54,320
with only three rounds of interactions

401
00:13:54,320 --> 00:13:55,120
per u

402
00:13:55,120 --> 00:13:58,160
per api method

403
00:13:58,320 --> 00:14:00,399
lastly we show that our active learning

404
00:14:00,399 --> 00:14:02,560
algorithm is running at real time

405
00:14:02,560 --> 00:14:05,199
due to the design of our mdkde algorithm

406
00:14:05,199 --> 00:14:07,360
we are able to optimize it to use

407
00:14:07,360 --> 00:14:10,480
rank 1 update which executes in linear

408
00:14:10,480 --> 00:14:13,600
time complexity in each iteration

409
00:14:13,600 --> 00:14:15,440
this enables the user to get real-time

410
00:14:15,440 --> 00:14:17,760
feedback and reduces users wait time as

411
00:14:17,760 --> 00:14:18,639
we see

412
00:14:18,639 --> 00:14:21,920
in many other staggered analysis tools

413
00:14:21,920 --> 00:14:24,160
in conclusion we present arbitrary a

414
00:14:24,160 --> 00:14:26,800
user-guided api mesus detection tool

415
00:14:26,800 --> 00:14:29,920
secondly we propose empty kde a novel

416
00:14:29,920 --> 00:14:32,079
active learning algorithm that is fast

417
00:14:32,079 --> 00:14:34,480
precise and well fitted on their api

418
00:14:34,480 --> 00:14:36,240
misuse detection setting

419
00:14:36,240 --> 00:14:38,079
last but not least we perform an

420
00:14:38,079 --> 00:14:40,399
extensive evaluation of arbitrary

421
00:14:40,399 --> 00:14:42,399
our tool not only outperforms existing

422
00:14:42,399 --> 00:14:44,720
tools but also finds 40 new bugs in

423
00:14:44,720 --> 00:14:46,399
three rounds of user interactions on

424
00:14:46,399 --> 00:14:46,880
average

425
00:14:46,880 --> 00:14:49,839
per api method the source code of our

426
00:14:49,839 --> 00:14:50,160
tool

427
00:14:50,160 --> 00:14:52,480
arbitrary is publicly available at the

428
00:14:52,480 --> 00:14:55,440
following url

429
00:14:55,519 --> 00:14:59,839
thank you

