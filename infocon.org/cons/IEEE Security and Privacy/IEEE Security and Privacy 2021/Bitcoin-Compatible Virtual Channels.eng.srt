1
00:00:01,680 --> 00:00:03,199
welcome to the presentation of the paper

2
00:00:03,199 --> 00:00:04,960
bitcoin compatible virtual channels

3
00:00:04,960 --> 00:00:06,879
my name is andreas ervik and this is

4
00:00:06,879 --> 00:00:09,040
joint work with lucas osan sebastian

5
00:00:09,040 --> 00:00:11,120
christina mateo pedro and siavos

6
00:00:11,120 --> 00:00:12,480
and this will be a joint talk together

7
00:00:12,480 --> 00:00:14,480
with lucas

8
00:00:14,480 --> 00:00:16,400
in this work we achieve an efficient

9
00:00:16,400 --> 00:00:18,000
privacy preserving

10
00:00:18,000 --> 00:00:20,720
cheap and interoperable payment solution

11
00:00:20,720 --> 00:00:22,640
for cryptocurrencies

12
00:00:22,640 --> 00:00:24,880
now to start off with some motivation

13
00:00:24,880 --> 00:00:26,560
most cryptocurrencies nowadays

14
00:00:26,560 --> 00:00:28,080
use as an underlying building block to

15
00:00:28,080 --> 00:00:29,840
blockchain which is a data structure

16
00:00:29,840 --> 00:00:31,519
that collects data in blocks and then

17
00:00:31,519 --> 00:00:33,280
cryptographically connects these blocks

18
00:00:33,280 --> 00:00:36,399
to achieve data integrity now in a

19
00:00:36,399 --> 00:00:37,600
cryptocurrency network

20
00:00:37,600 --> 00:00:39,600
if we have two parties alice and bob and

21
00:00:39,600 --> 00:00:41,280
alice wants to make a payment to bob

22
00:00:41,280 --> 00:00:42,800
she sends a transaction to the

23
00:00:42,800 --> 00:00:44,559
underlying network

24
00:00:44,559 --> 00:00:46,640
and this network will then eventually

25
00:00:46,640 --> 00:00:48,399
include the transaction into the

26
00:00:48,399 --> 00:00:49,120
blockchain

27
00:00:49,120 --> 00:00:51,039
and once this has happened bob can see

28
00:00:51,039 --> 00:00:52,559
the transaction in the blockchain

29
00:00:52,559 --> 00:00:54,000
and he knows that i just made a payment

30
00:00:54,000 --> 00:00:56,160
to him

31
00:00:56,160 --> 00:00:58,480
the blockchain has two characteristics

32
00:00:58,480 --> 00:01:00,239
first it has a fixed block size that

33
00:01:00,239 --> 00:01:02,079
means there can be only so much data

34
00:01:02,079 --> 00:01:04,400
in one block and second there's an

35
00:01:04,400 --> 00:01:05,680
average block time that means there can

36
00:01:05,680 --> 00:01:07,360
be only so many new blocks in a certain

37
00:01:07,360 --> 00:01:08,640
time period

38
00:01:08,640 --> 00:01:10,159
from this results that cryptocurrencies

39
00:01:10,159 --> 00:01:12,000
have a limited transaction throughput

40
00:01:12,000 --> 00:01:14,640
and high transaction fees which is known

41
00:01:14,640 --> 00:01:16,960
as the blockchain scalability problem

42
00:01:16,960 --> 00:01:19,040
and one of the most promising proposals

43
00:01:19,040 --> 00:01:20,640
to solve this problem

44
00:01:20,640 --> 00:01:24,320
are so-called off-chain protocols which

45
00:01:24,320 --> 00:01:25,920
allow to run applications on the

46
00:01:25,920 --> 00:01:27,759
blockchain while

47
00:01:27,759 --> 00:01:29,200
only having minimal interaction with the

48
00:01:29,200 --> 00:01:31,200
blockchain itself

49
00:01:31,200 --> 00:01:33,920
for the application of sending payments

50
00:01:33,920 --> 00:01:35,680
the most promising off-chain solution

51
00:01:35,680 --> 00:01:37,920
are so-called payment channels

52
00:01:37,920 --> 00:01:40,079
which allow two parties else and bob to

53
00:01:40,079 --> 00:01:41,600
make payments without involving the

54
00:01:41,600 --> 00:01:43,280
blockchain at all

55
00:01:43,280 --> 00:01:44,720
ledger payment channels consist of three

56
00:01:44,720 --> 00:01:47,200
procedures create update and close

57
00:01:47,200 --> 00:01:49,040
where if alice and bob want to create a

58
00:01:49,040 --> 00:01:50,720
channel they lock a certain amount of

59
00:01:50,720 --> 00:01:51,920
coins on the blockchain

60
00:01:51,920 --> 00:01:53,680
this process is also called as funding

61
00:01:53,680 --> 00:01:55,360
the channel on the blockchain

62
00:01:55,360 --> 00:01:58,000
and once this is done the channel is uh

63
00:01:58,000 --> 00:01:59,280
considered to be open

64
00:01:59,280 --> 00:02:01,119
with an initial state as zero whereas

65
00:02:01,119 --> 00:02:02,799
for example owns 10 coins and bob owns

66
00:02:02,799 --> 00:02:03,759
10 coins

67
00:02:03,759 --> 00:02:05,119
now ls and bob can make off-chain

68
00:02:05,119 --> 00:02:07,280
payments to each other by updating this

69
00:02:07,280 --> 00:02:08,080
channel to a

70
00:02:08,080 --> 00:02:11,599
new state s1 where alice for example now

71
00:02:11,599 --> 00:02:12,720
owns 15 coins

72
00:02:12,720 --> 00:02:14,800
and bob owns five coins and this can

73
00:02:14,800 --> 00:02:16,400
happen multiple times

74
00:02:16,400 --> 00:02:18,879
until some end state sn where ellis owns

75
00:02:18,879 --> 00:02:20,640
for example 18 coins and bob owns two

76
00:02:20,640 --> 00:02:21,520
coins

77
00:02:21,520 --> 00:02:22,879
now in order to close the channel and

78
00:02:22,879 --> 00:02:24,080
actually receive these coins on the

79
00:02:24,080 --> 00:02:25,040
blockchain

80
00:02:25,040 --> 00:02:28,160
alice and bob send the latest state sn

81
00:02:28,160 --> 00:02:30,319
to the to the blockchain which will then

82
00:02:30,319 --> 00:02:31,680
distribute the coins according to the

83
00:02:31,680 --> 00:02:33,599
latest state

84
00:02:33,599 --> 00:02:35,519
this solution is nice because it allows

85
00:02:35,519 --> 00:02:36,959
for off-chain updates

86
00:02:36,959 --> 00:02:38,640
but it still requires on-chain creation

87
00:02:38,640 --> 00:02:40,800
enclosure which is sub-optimal as

88
00:02:40,800 --> 00:02:42,480
off-chain protocols aim to

89
00:02:42,480 --> 00:02:45,120
reduce the amount of interaction with

90
00:02:45,120 --> 00:02:47,440
the blockchain

91
00:02:47,440 --> 00:02:49,280
in order to improve this solution the

92
00:02:49,280 --> 00:02:50,720
notion of payment channel networks has

93
00:02:50,720 --> 00:02:51,680
been introduced

94
00:02:51,680 --> 00:02:53,040
where we have a network of payment

95
00:02:53,040 --> 00:02:55,599
channels between alice ingrid and bob we

96
00:02:55,599 --> 00:02:57,120
have general's alpha and beta

97
00:02:57,120 --> 00:02:58,560
and now if alice wants to make a payment

98
00:02:58,560 --> 00:03:00,959
to god she can send a payment to ingrid

99
00:03:00,959 --> 00:03:03,040
and then ingrid can forward that payment

100
00:03:03,040 --> 00:03:04,400
to bob

101
00:03:04,400 --> 00:03:06,480
this solution is nice because it works

102
00:03:06,480 --> 00:03:08,159
entirely off chain

103
00:03:08,159 --> 00:03:10,400
but ingrid must be active in each

104
00:03:10,400 --> 00:03:12,879
payment actually has to root the payment

105
00:03:12,879 --> 00:03:14,800
and because of this there's also no

106
00:03:14,800 --> 00:03:16,800
privacy because ingrid runs the content

107
00:03:16,800 --> 00:03:19,360
and the amount of transactions between

108
00:03:19,360 --> 00:03:21,519
alice and bob

109
00:03:21,519 --> 00:03:23,200
and also because ingrid must be active

110
00:03:23,200 --> 00:03:24,799
all the time she

111
00:03:24,799 --> 00:03:28,080
requires a fee for each payment

112
00:03:28,080 --> 00:03:30,080
now finally there has been the the

113
00:03:30,080 --> 00:03:32,080
proposal of virtual channels

114
00:03:32,080 --> 00:03:33,920
where we have again alice ingrid and bob

115
00:03:33,920 --> 00:03:35,519
and general tyler and better

116
00:03:35,519 --> 00:03:37,360
but this time alice and bob used the

117
00:03:37,360 --> 00:03:38,560
channel's iphone better

118
00:03:38,560 --> 00:03:40,239
to create a new channel gamma the

119
00:03:40,239 --> 00:03:42,159
so-called virtual channel that consists

120
00:03:42,159 --> 00:03:43,840
exactly of the same procedures as ledger

121
00:03:43,840 --> 00:03:44,400
channels

122
00:03:44,400 --> 00:03:46,560
so create update and close but with the

123
00:03:46,560 --> 00:03:48,720
difference that even create and close

124
00:03:48,720 --> 00:03:51,120
can be executed of chain so this

125
00:03:51,120 --> 00:03:54,480
protocol is entirely of chain

126
00:03:54,480 --> 00:03:56,080
ingrid is involved only in the creation

127
00:03:56,080 --> 00:03:58,000
enclosure so she's not involved in each

128
00:03:58,000 --> 00:03:59,360
single payment

129
00:03:59,360 --> 00:04:00,799
and therefore we get some privacy

130
00:04:00,799 --> 00:04:03,280
preserving guarantees

131
00:04:03,280 --> 00:04:04,640
but the problem is that existing

132
00:04:04,640 --> 00:04:06,879
solutions so far always require smart

133
00:04:06,879 --> 00:04:07,599
contracts

134
00:04:07,599 --> 00:04:09,280
which are during complete programs that

135
00:04:09,280 --> 00:04:12,640
can be executed on the blockchain

136
00:04:12,640 --> 00:04:14,159
now this is where our contribution comes

137
00:04:14,159 --> 00:04:16,320
into play we provide the first

138
00:04:16,320 --> 00:04:17,839
construction of a virtual channel for

139
00:04:17,839 --> 00:04:19,680
utxo based blockchains

140
00:04:19,680 --> 00:04:21,519
and in particular for blockchains with

141
00:04:21,519 --> 00:04:23,680
only limited scripting functionality

142
00:04:23,680 --> 00:04:25,520
that cannot execute powerful smart

143
00:04:25,520 --> 00:04:26,880
contracts

144
00:04:26,880 --> 00:04:28,560
we give a formalization of the security

145
00:04:28,560 --> 00:04:31,199
properties of virtual channels in the uc

146
00:04:31,199 --> 00:04:33,840
framework we give a uc security proof

147
00:04:33,840 --> 00:04:35,440
and we provide an implementation and

148
00:04:35,440 --> 00:04:38,160
evaluation of our results

149
00:04:38,160 --> 00:04:39,759
as an outline of this talk i gave some

150
00:04:39,759 --> 00:04:41,919
motivation now i will give an overview

151
00:04:41,919 --> 00:04:43,360
of our construction

152
00:04:43,360 --> 00:04:44,960
and then i will briefly talk about the

153
00:04:44,960 --> 00:04:47,199
security properties and in comparison to

154
00:04:47,199 --> 00:04:48,320
previous solutions

155
00:04:48,320 --> 00:04:49,600
and then lucas will talk about the

156
00:04:49,600 --> 00:04:52,720
performance and evaluation

157
00:04:53,520 --> 00:04:56,560
so on a high level how can we uh

158
00:04:56,560 --> 00:04:58,400
build a virtual channel based on

159
00:04:58,400 --> 00:05:00,240
channels half and better

160
00:05:00,240 --> 00:05:02,400
so if we have the setup we have parties

161
00:05:02,400 --> 00:05:03,520
alice ingrid and bob

162
00:05:03,520 --> 00:05:05,120
and general's alpha and beta with states

163
00:05:05,120 --> 00:05:07,759
of s alpha i and s beta i

164
00:05:07,759 --> 00:05:10,320
in order to create a virtual channel the

165
00:05:10,320 --> 00:05:11,680
parties have to update the ledger

166
00:05:11,680 --> 00:05:13,360
payment channel's album better

167
00:05:13,360 --> 00:05:16,240
to a new state that we call as open

168
00:05:16,240 --> 00:05:17,840
where the balances of the parties get

169
00:05:17,840 --> 00:05:18,720
reduced by c

170
00:05:18,720 --> 00:05:21,120
coins and instead these coins get

171
00:05:21,120 --> 00:05:24,240
assigned to a new channel gamma

172
00:05:24,240 --> 00:05:26,639
once this is done the general gamma is

173
00:05:26,639 --> 00:05:27,919
considered to be open

174
00:05:27,919 --> 00:05:30,240
with an initial state as comma 0 where l

175
00:05:30,240 --> 00:05:31,360
is on c coins

176
00:05:31,360 --> 00:05:33,440
pop on c coins and ingrid owns no coins

177
00:05:33,440 --> 00:05:35,120
in the channel but she has a collateral

178
00:05:35,120 --> 00:05:39,199
of two sequence now

179
00:05:39,199 --> 00:05:41,280
this virtual channel can be updated in

180
00:05:41,280 --> 00:05:42,479
exactly the same

181
00:05:42,479 --> 00:05:45,520
way as a ledger channel so alice and bob

182
00:05:45,520 --> 00:05:47,120
can simply update the state of this

183
00:05:47,120 --> 00:05:49,039
channel among each other

184
00:05:49,039 --> 00:05:51,600
multiple times until they reach an end

185
00:05:51,600 --> 00:05:53,280
state as gamma n

186
00:05:53,280 --> 00:05:54,800
where alice for example owns all the

187
00:05:54,800 --> 00:05:56,960
coins in the channel bob owns no coins

188
00:05:56,960 --> 00:06:00,318
and ingrid still has a collateral

189
00:06:00,479 --> 00:06:02,160
now in order to close the channel and

190
00:06:02,160 --> 00:06:03,840
actually receive the coin from the

191
00:06:03,840 --> 00:06:04,639
virtual channel

192
00:06:04,639 --> 00:06:06,479
the parties have to again update the

193
00:06:06,479 --> 00:06:08,240
ledger channels i've been better

194
00:06:08,240 --> 00:06:10,880
to a new state as close which now

195
00:06:10,880 --> 00:06:11,680
reflects

196
00:06:11,680 --> 00:06:13,520
the latest state of the virtual channel

197
00:06:13,520 --> 00:06:15,120
so here we can see alice has now

198
00:06:15,120 --> 00:06:16,560
sequenced more

199
00:06:16,560 --> 00:06:18,960
than before the virtual channel ingrid

200
00:06:18,960 --> 00:06:20,160
has sequenced less

201
00:06:20,160 --> 00:06:22,400
in alpha but he has sequence more in

202
00:06:22,400 --> 00:06:24,880
better and pop sequence less and better

203
00:06:24,880 --> 00:06:26,639
than before the virtual channel so this

204
00:06:26,639 --> 00:06:28,319
is exactly the coin distribution

205
00:06:28,319 --> 00:06:29,840
that we require after the virtual

206
00:06:29,840 --> 00:06:32,880
channel from this high level overview

207
00:06:32,880 --> 00:06:35,440
we can already see that virtual channels

208
00:06:35,440 --> 00:06:35,919
are

209
00:06:35,919 --> 00:06:38,400
fairly similar to ledger channels and in

210
00:06:38,400 --> 00:06:39,039
fact

211
00:06:39,039 --> 00:06:40,880
virtual channels are exactly like ledger

212
00:06:40,880 --> 00:06:42,720
channels with the only difference being

213
00:06:42,720 --> 00:06:43,280
that

214
00:06:43,280 --> 00:06:45,039
virtual channels are not directly funded

215
00:06:45,039 --> 00:06:48,000
on the blockchain

216
00:06:48,000 --> 00:06:49,680
what are some challenges that arise when

217
00:06:49,680 --> 00:06:52,960
we want to build virtual channels

218
00:06:52,960 --> 00:06:55,840
the first challenge is that any party of

219
00:06:55,840 --> 00:06:57,120
alice ingrid and bob

220
00:06:57,120 --> 00:06:59,440
can prevent the closure of the of the

221
00:06:59,440 --> 00:07:00,400
virtual channel

222
00:07:00,400 --> 00:07:03,440
so in our example for example um bob

223
00:07:03,440 --> 00:07:05,680
lost all his coins in the virtual

224
00:07:05,680 --> 00:07:07,599
channel so he has no incentive to

225
00:07:07,599 --> 00:07:08,240
actually

226
00:07:08,240 --> 00:07:10,560
close the virtual channel correctly so

227
00:07:10,560 --> 00:07:12,080
he can for example

228
00:07:12,080 --> 00:07:14,840
just refuse to update the channel better

229
00:07:14,840 --> 00:07:16,160
correctly

230
00:07:16,160 --> 00:07:18,479
in that scenario alice and ingrid need

231
00:07:18,479 --> 00:07:19,440
to have a way

232
00:07:19,440 --> 00:07:20,880
to publish the latest state of the

233
00:07:20,880 --> 00:07:22,560
virtual channel to the blockchain so

234
00:07:22,560 --> 00:07:24,400
that they can still receive their coins

235
00:07:24,400 --> 00:07:27,039
this by itself is quite challenging

236
00:07:27,039 --> 00:07:28,319
because the blockchain doesn't even know

237
00:07:28,319 --> 00:07:28,720
that

238
00:07:28,720 --> 00:07:32,160
the virtual channel gamma exists

239
00:07:32,639 --> 00:07:34,400
another challenge is that two corrupted

240
00:07:34,400 --> 00:07:36,080
parties that collude

241
00:07:36,080 --> 00:07:38,000
um can maliciously update one of the

242
00:07:38,000 --> 00:07:39,280
ledger channels

243
00:07:39,280 --> 00:07:41,759
and thereby revert the state of the

244
00:07:41,759 --> 00:07:42,560
virtual chunk

245
00:07:42,560 --> 00:07:44,479
so for example if ingrid and bob are

246
00:07:44,479 --> 00:07:45,599
malicious and they

247
00:07:45,599 --> 00:07:48,800
simply update their um ledger channel

248
00:07:48,800 --> 00:07:49,440
better

249
00:07:49,440 --> 00:07:51,520
to a new state where again ingrid has

250
00:07:51,520 --> 00:07:52,800
all her coins and bob has

251
00:07:52,800 --> 00:07:54,720
all her all his coins from before the

252
00:07:54,720 --> 00:07:56,400
virtual channel

253
00:07:56,400 --> 00:07:58,400
then alice has no way of receiving

254
00:07:58,400 --> 00:08:00,560
actually her two c coins from the

255
00:08:00,560 --> 00:08:03,360
virtual channel so we need a way that

256
00:08:03,360 --> 00:08:05,440
parties can still receive their coins

257
00:08:05,440 --> 00:08:08,400
even if malicious parties try to prevent

258
00:08:08,400 --> 00:08:10,638
this

259
00:08:11,120 --> 00:08:12,720
how do we solve these challenges the

260
00:08:12,720 --> 00:08:14,319
first challenge that anybody can

261
00:08:14,319 --> 00:08:15,840
prevent for example the closure of the

262
00:08:15,840 --> 00:08:17,919
virtual channel we solve by introducing

263
00:08:17,919 --> 00:08:19,440
a procedure offload

264
00:08:19,440 --> 00:08:21,759
which essentially publishes the opening

265
00:08:21,759 --> 00:08:22,720
states of the

266
00:08:22,720 --> 00:08:25,199
ledger channels to the blockchain now

267
00:08:25,199 --> 00:08:26,319
this is the first time that the

268
00:08:26,319 --> 00:08:27,599
blockchain actually learns about the

269
00:08:27,599 --> 00:08:28,800
virtual channel gamma

270
00:08:28,800 --> 00:08:31,280
because these states include two c coins

271
00:08:31,280 --> 00:08:33,279
that are assigned to gamma

272
00:08:33,279 --> 00:08:35,279
in fact this actually funds the virtual

273
00:08:35,279 --> 00:08:36,719
channel on the blockchain

274
00:08:36,719 --> 00:08:38,559
and since we said that virtual channels

275
00:08:38,559 --> 00:08:40,240
are just ledger channels that are not

276
00:08:40,240 --> 00:08:41,839
funded on the blockchain

277
00:08:41,839 --> 00:08:43,760
this process will actually transform a

278
00:08:43,760 --> 00:08:47,360
virtual channel into a later chunk

279
00:08:47,760 --> 00:08:49,440
the second challenge that two malicious

280
00:08:49,440 --> 00:08:52,160
parties can update the one of the ledger

281
00:08:52,160 --> 00:08:52,959
channels

282
00:08:52,959 --> 00:08:54,959
we address by introducing a punishment

283
00:08:54,959 --> 00:08:56,000
procedure

284
00:08:56,000 --> 00:08:58,880
this procedure is executed if the

285
00:08:58,880 --> 00:09:01,279
offload procedure fails

286
00:09:01,279 --> 00:09:03,360
so for example by because of the

287
00:09:03,360 --> 00:09:05,920
malicious behavior of the two parties

288
00:09:05,920 --> 00:09:08,480
and then the punishment procedure allows

289
00:09:08,480 --> 00:09:10,240
to punish dementia's parties such that

290
00:09:10,240 --> 00:09:12,000
they lose all the coins in their ledger

291
00:09:12,000 --> 00:09:12,560
channel

292
00:09:12,560 --> 00:09:13,839
whereas the honest party gets

293
00:09:13,839 --> 00:09:17,279
financially compensated

294
00:09:17,519 --> 00:09:19,360
i will now briefly talk about security

295
00:09:19,360 --> 00:09:20,720
properties and some comparison to

296
00:09:20,720 --> 00:09:22,080
previous solutions

297
00:09:22,080 --> 00:09:23,680
so informally what we require as

298
00:09:23,680 --> 00:09:25,519
security properties is that ingrid does

299
00:09:25,519 --> 00:09:26,480
not have to be

300
00:09:26,480 --> 00:09:28,560
an intermediary indefinitely so for

301
00:09:28,560 --> 00:09:30,080
example assume that

302
00:09:30,080 --> 00:09:32,320
alice and bob simply never closed their

303
00:09:32,320 --> 00:09:33,279
virtual channel

304
00:09:33,279 --> 00:09:35,279
then ingrid would be stuck as the

305
00:09:35,279 --> 00:09:36,800
intermediary in the virtual channel so

306
00:09:36,800 --> 00:09:38,240
she has to have the guarantee that

307
00:09:38,240 --> 00:09:39,120
eventually

308
00:09:39,120 --> 00:09:40,560
she can lose the role as the

309
00:09:40,560 --> 00:09:43,279
intermediary

310
00:09:43,360 --> 00:09:45,120
second we require balance security for

311
00:09:45,120 --> 00:09:46,560
ingrid that means that if ingrid is

312
00:09:46,560 --> 00:09:47,200
honest

313
00:09:47,200 --> 00:09:49,600
she will never lose any coins so if she

314
00:09:49,600 --> 00:09:51,120
loses some points in one of the ledger

315
00:09:51,120 --> 00:09:51,680
channels

316
00:09:51,680 --> 00:09:53,360
she will gain the same amount of coins

317
00:09:53,360 --> 00:09:55,519
in the other literature

318
00:09:55,519 --> 00:09:57,920
and finally because virtual channels are

319
00:09:57,920 --> 00:09:59,600
just legit channels that are not funded

320
00:09:59,600 --> 00:10:00,560
on the blockchain

321
00:10:00,560 --> 00:10:02,720
virtual trends inherit all the security

322
00:10:02,720 --> 00:10:05,519
properties of ledger channels

323
00:10:05,519 --> 00:10:07,440
for the comparison to previous solutions

324
00:10:07,440 --> 00:10:08,880
i mentioned before already

325
00:10:08,880 --> 00:10:10,880
that previous solutions rely on smart

326
00:10:10,880 --> 00:10:12,399
contract support because

327
00:10:12,399 --> 00:10:14,480
the underlying blockchain needs to be

328
00:10:14,480 --> 00:10:17,279
able to interpret arbitrary messages

329
00:10:17,279 --> 00:10:18,640
and because of this smart contract

330
00:10:18,640 --> 00:10:20,560
support previous solutions do not

331
00:10:20,560 --> 00:10:22,640
require a punishment procedure

332
00:10:22,640 --> 00:10:24,240
because the smart contracts can

333
00:10:24,240 --> 00:10:25,839
guarantee that the offload procedure

334
00:10:25,839 --> 00:10:28,560
actually succeeds

335
00:10:28,560 --> 00:10:31,120
now our solution does not require

336
00:10:31,120 --> 00:10:32,880
powerful smart contracts but it can work

337
00:10:32,880 --> 00:10:34,800
only with limited scripting language

338
00:10:34,800 --> 00:10:36,720
that in fact only supports time block

339
00:10:36,720 --> 00:10:38,000
functionality and

340
00:10:38,000 --> 00:10:41,200
a signature verification this

341
00:10:41,200 --> 00:10:43,920
this scripting functionality is

342
00:10:43,920 --> 00:10:46,240
supported by virtually any blockchain

343
00:10:46,240 --> 00:10:47,680
and therefore we have a high

344
00:10:47,680 --> 00:10:49,440
compatibility with a lot of

345
00:10:49,440 --> 00:10:52,160
cryptocurrencies on the other hand we

346
00:10:52,160 --> 00:10:53,839
need the punishment procedure in case of

347
00:10:53,839 --> 00:10:55,279
malicious behavior like i explained

348
00:10:55,279 --> 00:10:56,640
before

349
00:10:56,640 --> 00:10:58,399
i will now turn it to lucas for the

350
00:10:58,399 --> 00:10:59,760
discussion of our performance and

351
00:10:59,760 --> 00:11:01,120
evaluation

352
00:11:01,120 --> 00:11:02,560
let me talk about the evaluation of the

353
00:11:02,560 --> 00:11:05,120
paper we implemented a proof of concept

354
00:11:05,120 --> 00:11:06,399
that creates the raw bitcoin

355
00:11:06,399 --> 00:11:08,160
transactions needed for the construction

356
00:11:08,160 --> 00:11:10,000
and deployed them on the bit contestant

357
00:11:10,000 --> 00:11:11,200
in order to show the case the

358
00:11:11,200 --> 00:11:13,279
compatibility with the current system

359
00:11:13,279 --> 00:11:14,800
finally we measured the transaction

360
00:11:14,800 --> 00:11:16,480
overhead in terms of

361
00:11:16,480 --> 00:11:18,959
size numbers of transactions and

362
00:11:18,959 --> 00:11:21,519
on-chain fees if there are any

363
00:11:21,519 --> 00:11:23,440
here the results i will not go over them

364
00:11:23,440 --> 00:11:25,040
in detail but instead highlight some key

365
00:11:25,040 --> 00:11:25,600
points

366
00:11:25,600 --> 00:11:28,560
for instance for these three operations

367
00:11:28,560 --> 00:11:30,240
create update and close there are no

368
00:11:30,240 --> 00:11:33,120
on-chain fees

369
00:11:33,200 --> 00:11:34,959
instead for these two other cases to

370
00:11:34,959 --> 00:11:36,560
offload and punish

371
00:11:36,560 --> 00:11:38,959
we have some on chain fees these are the

372
00:11:38,959 --> 00:11:39,920
cases that happen

373
00:11:39,920 --> 00:11:41,760
only in the dispute or if someone wants

374
00:11:41,760 --> 00:11:43,600
to offload the channel

375
00:11:43,600 --> 00:11:46,240
and we point out that for instance for

376
00:11:46,240 --> 00:11:46,959
the punish

377
00:11:46,959 --> 00:11:49,200
this is roughly the same cost as closing

378
00:11:49,200 --> 00:11:50,480
a payment channel

379
00:11:50,480 --> 00:11:51,839
now if we compare this with the current

380
00:11:51,839 --> 00:11:53,920
state of the art so

381
00:11:53,920 --> 00:11:55,760
we say we want to measure the

382
00:11:55,760 --> 00:11:57,360
communication overhead of routing

383
00:11:57,360 --> 00:11:59,680
payments through virtual channels

384
00:11:59,680 --> 00:12:02,639
with the payment with routing payment to

385
00:12:02,639 --> 00:12:04,639
the payment channel network

386
00:12:04,639 --> 00:12:06,000
now what happens in a payment channel

387
00:12:06,000 --> 00:12:07,839
network in a payment let's say alias

388
00:12:07,839 --> 00:12:10,639
wants to pay to bob via ingrid

389
00:12:10,639 --> 00:12:12,160
they coordinate the two underlying

390
00:12:12,160 --> 00:12:14,079
channels in the following way first they

391
00:12:14,079 --> 00:12:15,519
update both of them

392
00:12:15,519 --> 00:12:18,000
and lock the amount cache and once this

393
00:12:18,000 --> 00:12:19,519
has been done they update the channels

394
00:12:19,519 --> 00:12:20,399
once more

395
00:12:20,399 --> 00:12:23,120
in order to unlock the cache again in

396
00:12:23,120 --> 00:12:24,399
the virtual channel

397
00:12:24,399 --> 00:12:26,079
what we do instead is alice and bob

398
00:12:26,079 --> 00:12:27,920
create the virtual channel gamma

399
00:12:27,920 --> 00:12:29,839
and when this is done they can perform

400
00:12:29,839 --> 00:12:31,519
arbitrarily many payments

401
00:12:31,519 --> 00:12:34,240
and finally close the channel again now

402
00:12:34,240 --> 00:12:36,800
in terms of communication overhead

403
00:12:36,800 --> 00:12:39,440
let's say we want to perform in payments

404
00:12:39,440 --> 00:12:41,200
in the payment channel network case

405
00:12:41,200 --> 00:12:44,880
this means 3026 bytes per payment

406
00:12:44,880 --> 00:12:47,440
or n transactions per payment in the

407
00:12:47,440 --> 00:12:50,800
virtual channel case this is 3524

408
00:12:50,800 --> 00:12:54,079
bytes plus 695 times

409
00:12:54,079 --> 00:12:57,920
n again n is the number of payments or

410
00:12:57,920 --> 00:12:59,360
it is 9

411
00:12:59,360 --> 00:13:02,560
plus 2 times n transactions so note that

412
00:13:02,560 --> 00:13:04,240
this constant part on the left is a

413
00:13:04,240 --> 00:13:05,920
one-time cost this is the cost for

414
00:13:05,920 --> 00:13:07,839
opening and closing the virtual channels

415
00:13:07,839 --> 00:13:09,839
while the small part on the right is

416
00:13:09,839 --> 00:13:11,279
actually the one that we need to pay for

417
00:13:11,279 --> 00:13:12,639
every payment

418
00:13:12,639 --> 00:13:14,079
and indeed if we look on the graph on

419
00:13:14,079 --> 00:13:16,399
the right we can actually see

420
00:13:16,399 --> 00:13:17,760
that the virtual channels are already

421
00:13:17,760 --> 00:13:19,440
more efficient for a number of payments

422
00:13:19,440 --> 00:13:21,920
that is greater than one

423
00:13:21,920 --> 00:13:23,920
now let's talk a bit about fees in

424
00:13:23,920 --> 00:13:25,040
payment channel networks

425
00:13:25,040 --> 00:13:26,560
such as for instance in the lightning

426
00:13:26,560 --> 00:13:28,320
network which is one of the

427
00:13:28,320 --> 00:13:31,519
more prominent current solutions um the

428
00:13:31,519 --> 00:13:33,279
following fee is charged so let's say

429
00:13:33,279 --> 00:13:35,040
one payment is routed through english of

430
00:13:35,040 --> 00:13:36,079
amount cash

431
00:13:36,079 --> 00:13:38,959
she charges a base fee plus a fee rate

432
00:13:38,959 --> 00:13:40,160
times

433
00:13:40,160 --> 00:13:42,160
the amount so this base fee is a fixed

434
00:13:42,160 --> 00:13:44,480
amount we can say that is charged for

435
00:13:44,480 --> 00:13:45,680
ingrid being online

436
00:13:45,680 --> 00:13:46,880
and then there's a fee rate that's

437
00:13:46,880 --> 00:13:49,279
proportional and this is charged because

438
00:13:49,279 --> 00:13:51,680
ingrid needs to lock up some money now

439
00:13:51,680 --> 00:13:52,480
if we have n

440
00:13:52,480 --> 00:13:54,560
payments and these payments sum up to a

441
00:13:54,560 --> 00:13:55,839
total amount of cash

442
00:13:55,839 --> 00:13:58,079
ingrid will instead charge n times the

443
00:13:58,079 --> 00:14:00,160
base fee plus again the fee rate

444
00:14:00,160 --> 00:14:02,959
times the total amount so ingrid charges

445
00:14:02,959 --> 00:14:03,920
for every payment

446
00:14:03,920 --> 00:14:07,279
now instead in the virtual channel case

447
00:14:07,279 --> 00:14:09,040
ingrid will only charge for the opening

448
00:14:09,040 --> 00:14:10,480
of a virtual channel

449
00:14:10,480 --> 00:14:12,800
so we can say again this might be this

450
00:14:12,800 --> 00:14:14,880
base fee plus the fee rate times the

451
00:14:14,880 --> 00:14:16,000
total capacity

452
00:14:16,000 --> 00:14:18,160
but then the subsequent payments are for

453
00:14:18,160 --> 00:14:21,120
free actually no fees charge for them

454
00:14:21,120 --> 00:14:23,680
so to sum up we presented in the paper

455
00:14:23,680 --> 00:14:25,199
the virtual channel constructions in the

456
00:14:25,199 --> 00:14:27,120
utxo model with limited scripting

457
00:14:27,120 --> 00:14:28,480
capabilities

458
00:14:28,480 --> 00:14:30,079
we formalized this in the universal

459
00:14:30,079 --> 00:14:32,160
composability model and gave a security

460
00:14:32,160 --> 00:14:32,959
proof

461
00:14:32,959 --> 00:14:34,880
and we did an evaluation and compare

462
00:14:34,880 --> 00:14:37,680
this with payment general networks

463
00:14:37,680 --> 00:14:39,600
for future work one could think about

464
00:14:39,600 --> 00:14:42,160
constructing recursive virtual channels

465
00:14:42,160 --> 00:14:44,320
what this means is the virtual channels

466
00:14:44,320 --> 00:14:45,760
are not constructed on top of two

467
00:14:45,760 --> 00:14:47,600
payment channels but instead

468
00:14:47,600 --> 00:14:50,240
on top of other virtual channels and the

469
00:14:50,240 --> 00:14:51,519
other thing would be

470
00:14:51,519 --> 00:14:53,519
as a to add a support for users going

471
00:14:53,519 --> 00:14:55,279
offline which is also known as a watched

472
00:14:55,279 --> 00:14:56,480
house apart

473
00:14:56,480 --> 00:14:59,600
thank you for your attention

