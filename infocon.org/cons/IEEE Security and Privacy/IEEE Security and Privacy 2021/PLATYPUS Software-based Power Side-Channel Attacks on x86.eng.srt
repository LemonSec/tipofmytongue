1
00:00:01,599 --> 00:00:04,640
hello and welcome to our paper platypus

2
00:00:04,640 --> 00:00:05,600
where we discuss

3
00:00:05,600 --> 00:00:07,839
software-based powerside channel attacks

4
00:00:07,839 --> 00:00:10,480
on x86 cpus

5
00:00:10,480 --> 00:00:12,799
my name is moretzlip and this work has

6
00:00:12,799 --> 00:00:14,480
been a collaboration with andreas

7
00:00:14,480 --> 00:00:17,119
coogler david oswalt michael schwarz

8
00:00:17,119 --> 00:00:19,439
catherine easton claudio carnella and

9
00:00:19,439 --> 00:00:22,000
daniel cruz

10
00:00:22,000 --> 00:00:24,240
in order to save power in your cpu you

11
00:00:24,240 --> 00:00:25,599
can do different things

12
00:00:25,599 --> 00:00:28,480
for instance you can shut down resources

13
00:00:28,480 --> 00:00:30,240
because if something is not running

14
00:00:30,240 --> 00:00:32,960
it doesn't consume any energy you can

15
00:00:32,960 --> 00:00:34,399
also reduce the voltage

16
00:00:34,399 --> 00:00:36,559
supplying your core or the frequency

17
00:00:36,559 --> 00:00:38,480
your core is running on

18
00:00:38,480 --> 00:00:40,000
and there are perfect reasons why you

19
00:00:40,000 --> 00:00:42,079
want to do that first of all

20
00:00:42,079 --> 00:00:43,719
you want to run in the thermal

21
00:00:43,719 --> 00:00:45,440
specifications so that you can

22
00:00:45,440 --> 00:00:47,200
sufficiently cool your cpu

23
00:00:47,200 --> 00:00:49,600
and it doesn't run too hot but you also

24
00:00:49,600 --> 00:00:51,520
might want to be able to limit

25
00:00:51,520 --> 00:00:53,840
the energy consumption overall to save

26
00:00:53,840 --> 00:00:55,840
power for instance to run your laptop

27
00:00:55,840 --> 00:00:57,520
for a longer period of time

28
00:00:57,520 --> 00:01:00,320
or to budget the power and performance

29
00:01:00,320 --> 00:01:01,120
if you are

30
00:01:01,120 --> 00:01:03,680
running service and having different

31
00:01:03,680 --> 00:01:06,239
customers

32
00:01:06,400 --> 00:01:08,960
with intel running average power limits

33
00:01:08,960 --> 00:01:10,320
or short rubble

34
00:01:10,320 --> 00:01:12,880
such a way is provided giving you the

35
00:01:12,880 --> 00:01:14,000
capabilities

36
00:01:14,000 --> 00:01:17,280
of limit the power and also gives you

37
00:01:17,280 --> 00:01:19,680
accurate energy readings to figure out

38
00:01:19,680 --> 00:01:20,720
how much energy

39
00:01:20,720 --> 00:01:24,479
your cpu has consumed on linux

40
00:01:24,479 --> 00:01:26,479
these counters can be accessed using the

41
00:01:26,479 --> 00:01:28,000
power cap framework

42
00:01:28,000 --> 00:01:31,360
from an unprivileged user on mac os or

43
00:01:31,360 --> 00:01:32,159
on windows

44
00:01:32,159 --> 00:01:33,920
you first need to install the driver

45
00:01:33,920 --> 00:01:35,920
from intel so that you can access those

46
00:01:35,920 --> 00:01:37,680
counters

47
00:01:37,680 --> 00:01:40,400
so within rupple we basically have an

48
00:01:40,400 --> 00:01:42,240
unprivileged power meter

49
00:01:42,240 --> 00:01:45,520
inside our cpu where we do not need

50
00:01:45,520 --> 00:01:48,320
physical access to the device because we

51
00:01:48,320 --> 00:01:50,000
can just run software

52
00:01:50,000 --> 00:01:53,600
that gives us those measurements

53
00:01:53,600 --> 00:01:56,320
however in contrast to a classical power

54
00:01:56,320 --> 00:01:57,680
side generatex where you have an

55
00:01:57,680 --> 00:01:58,799
oscilloscope

56
00:01:58,799 --> 00:02:00,960
with this interface we only have a

57
00:02:00,960 --> 00:02:01,840
limited

58
00:02:01,840 --> 00:02:05,040
update rate of those values

59
00:02:05,040 --> 00:02:07,119
so the question and the first one that

60
00:02:07,119 --> 00:02:09,280
we want to tackle in our paper is

61
00:02:09,280 --> 00:02:11,760
what can we actually do with this what

62
00:02:11,760 --> 00:02:13,040
can we measure

63
00:02:13,040 --> 00:02:16,879
from this interface the first example is

64
00:02:16,879 --> 00:02:18,959
that we measure the energy consumption

65
00:02:18,959 --> 00:02:20,800
of different instructions

66
00:02:20,800 --> 00:02:23,280
and as you can see we can distinguish

67
00:02:23,280 --> 00:02:25,040
between different instructions

68
00:02:25,040 --> 00:02:26,640
because they have a different energy

69
00:02:26,640 --> 00:02:28,959
footprint for instance the f-scale

70
00:02:28,959 --> 00:02:29,920
instruction

71
00:02:29,920 --> 00:02:32,480
requires more energy than the rdrant

72
00:02:32,480 --> 00:02:34,640
instruction

73
00:02:34,640 --> 00:02:37,040
but we cannot only distinguish different

74
00:02:37,040 --> 00:02:38,160
instructions

75
00:02:38,160 --> 00:02:40,400
we can also see differences in the

76
00:02:40,400 --> 00:02:41,680
energy consumption

77
00:02:41,680 --> 00:02:44,800
of the same instruction depending

78
00:02:44,800 --> 00:02:47,360
on the operand that is used for the

79
00:02:47,360 --> 00:02:48,720
instruction

80
00:02:48,720 --> 00:02:51,200
for instance here in this plot we see

81
00:02:51,200 --> 00:02:52,959
the measured energy consumption

82
00:02:52,959 --> 00:02:55,440
of the imal instruction where one of the

83
00:02:55,440 --> 00:02:56,160
operands

84
00:02:56,160 --> 00:02:59,120
is fixed and the other varies in its

85
00:02:59,120 --> 00:03:00,239
hamming weight

86
00:03:00,239 --> 00:03:02,640
and as we can see the more bits that are

87
00:03:02,640 --> 00:03:04,000
set in this operand

88
00:03:04,000 --> 00:03:07,360
the higher the energy consumption is

89
00:03:07,360 --> 00:03:10,239
but this is not only limited to operands

90
00:03:10,239 --> 00:03:11,680
of instructions

91
00:03:11,680 --> 00:03:14,480
we can also see here for a load

92
00:03:14,480 --> 00:03:15,680
instruction

93
00:03:15,680 --> 00:03:18,159
a difference in the energy consumption

94
00:03:18,159 --> 00:03:19,200
depending

95
00:03:19,200 --> 00:03:22,000
on the actual value that is stored at a

96
00:03:22,000 --> 00:03:23,680
certain address

97
00:03:23,680 --> 00:03:26,080
as we can see here in this plot

98
00:03:26,080 --> 00:03:26,959
depending

99
00:03:26,959 --> 00:03:30,080
on the hemming weight of the value

100
00:03:30,080 --> 00:03:33,040
and if the most significant bit is set

101
00:03:33,040 --> 00:03:33,680
we see an

102
00:03:33,680 --> 00:03:36,480
increase in the energy consumption so if

103
00:03:36,480 --> 00:03:37,360
we can measure

104
00:03:37,360 --> 00:03:40,640
the energy consumption of an instruction

105
00:03:40,640 --> 00:03:42,640
loading a specific address

106
00:03:42,640 --> 00:03:46,159
we can get some information on the value

107
00:03:46,159 --> 00:03:50,319
that is actually stored at this address

108
00:03:50,319 --> 00:03:52,799
in addition we can see the energy

109
00:03:52,799 --> 00:03:54,720
consumption with the rapple framework

110
00:03:54,720 --> 00:03:57,120
for different domains so we cannot only

111
00:03:57,120 --> 00:03:58,239
measure the core

112
00:03:58,239 --> 00:04:00,400
as we've seen in the previous example we

113
00:04:00,400 --> 00:04:01,360
can also

114
00:04:01,360 --> 00:04:04,640
get energy consumption used in the dram

115
00:04:04,640 --> 00:04:06,400
domain from the memory controller for

116
00:04:06,400 --> 00:04:07,439
instance

117
00:04:07,439 --> 00:04:09,840
and this allows us like in classical

118
00:04:09,840 --> 00:04:11,439
cache side channel attacks

119
00:04:11,439 --> 00:04:14,159
to distinguish between a cache hit and a

120
00:04:14,159 --> 00:04:16,560
cache miss

121
00:04:16,560 --> 00:04:19,040
so with that information we want to

122
00:04:19,040 --> 00:04:20,000
figure out

123
00:04:20,000 --> 00:04:22,560
what the security implications of this

124
00:04:22,560 --> 00:04:24,720
interface are that we can

125
00:04:24,720 --> 00:04:27,600
access from unprivileged user space so

126
00:04:27,600 --> 00:04:28,720
we want to figure out

127
00:04:28,720 --> 00:04:32,240
if we can exploit that the first

128
00:04:32,240 --> 00:04:34,800
scenario i want to present you here is

129
00:04:34,800 --> 00:04:35,520
an attack

130
00:04:35,520 --> 00:04:37,680
on the kernel address space layout

131
00:04:37,680 --> 00:04:38,800
randomization

132
00:04:38,800 --> 00:04:42,639
on kslr where on each boot of the system

133
00:04:42,639 --> 00:04:45,919
the kernel is stored at a different

134
00:04:45,919 --> 00:04:49,199
address in memory so the

135
00:04:49,199 --> 00:04:52,720
location is randomized the idea is

136
00:04:52,720 --> 00:04:55,600
that we want to observe differences in

137
00:04:55,600 --> 00:04:57,120
the energy consumption

138
00:04:57,120 --> 00:04:59,520
between addresses that are mapped so

139
00:04:59,520 --> 00:05:00,720
valid addresses

140
00:05:00,720 --> 00:05:03,360
of the operating system and unmapped

141
00:05:03,360 --> 00:05:04,960
addresses that are not valid

142
00:05:04,960 --> 00:05:08,320
where the kernel is not stored

143
00:05:08,320 --> 00:05:10,479
the idea behind that is that on intel

144
00:05:10,479 --> 00:05:11,680
cpus

145
00:05:11,680 --> 00:05:14,800
if an address is actually mapped you

146
00:05:14,800 --> 00:05:16,800
have a valid address translation

147
00:05:16,800 --> 00:05:19,680
and this translation is called is stored

148
00:05:19,680 --> 00:05:21,680
in the translation loca site buffer or

149
00:05:21,680 --> 00:05:24,000
short tlb

150
00:05:24,000 --> 00:05:25,840
addresses that are not valid are not

151
00:05:25,840 --> 00:05:27,120
cached there

152
00:05:27,120 --> 00:05:30,639
so if we probe different addresses for

153
00:05:30,639 --> 00:05:32,160
the different

154
00:05:32,160 --> 00:05:34,400
options where the kernel can be stored

155
00:05:34,400 --> 00:05:36,560
and measure the energy consumption

156
00:05:36,560 --> 00:05:39,199
we would see an increase or a higher

157
00:05:39,199 --> 00:05:40,479
energy consumption

158
00:05:40,479 --> 00:05:43,199
for pages that are not mapped because we

159
00:05:43,199 --> 00:05:45,360
would trigger

160
00:05:45,360 --> 00:05:48,479
repeatedly page table box

161
00:05:48,479 --> 00:05:52,000
if the address is actually valid the

162
00:05:52,000 --> 00:05:54,800
translation is as i said cached and

163
00:05:54,800 --> 00:05:55,440
therefore

164
00:05:55,440 --> 00:05:58,080
subsequent accesses to the same location

165
00:05:58,080 --> 00:05:59,199
will require

166
00:05:59,199 --> 00:06:01,919
less energy

167
00:06:02,560 --> 00:06:05,199
as we can see here in this demo where we

168
00:06:05,199 --> 00:06:05,840
iterate

169
00:06:05,840 --> 00:06:08,960
over different offsets to probe

170
00:06:08,960 --> 00:06:12,080
where the kernel is stored we see at a

171
00:06:12,080 --> 00:06:13,440
certain address

172
00:06:13,440 --> 00:06:16,080
a drop in the energy consumption and

173
00:06:16,080 --> 00:06:18,080
this actually corresponds

174
00:06:18,080 --> 00:06:20,800
on the system where the kernel is stored

175
00:06:20,800 --> 00:06:23,600
so we successfully

176
00:06:23,600 --> 00:06:27,199
de-randomized kslr but we want to go a

177
00:06:27,199 --> 00:06:28,800
step further we want to attack

178
00:06:28,800 --> 00:06:32,240
cryptographic implementations as well

179
00:06:32,240 --> 00:06:36,160
for instance rsa but

180
00:06:36,160 --> 00:06:39,280
it's quite difficult to just target with

181
00:06:39,280 --> 00:06:40,960
this low update rate

182
00:06:40,960 --> 00:06:44,000
specific parts of the algorithm

183
00:06:44,000 --> 00:06:47,199
so in our case what we wanted to do is

184
00:06:47,199 --> 00:06:49,440
we want to go a step further make things

185
00:06:49,440 --> 00:06:50,560
a bit easier

186
00:06:50,560 --> 00:06:53,680
and attack intel sgx

187
00:06:53,680 --> 00:06:55,680
which is an instruction set extension

188
00:06:55,680 --> 00:06:57,160
that gives you integrity and

189
00:06:57,160 --> 00:06:59,360
confidentiality of code and data

190
00:06:59,360 --> 00:07:02,479
for untrusted environments so

191
00:07:02,479 --> 00:07:04,880
with sgx you can run programs in so

192
00:07:04,880 --> 00:07:07,440
called enclaves using protected areas of

193
00:07:07,440 --> 00:07:08,400
memory

194
00:07:08,400 --> 00:07:10,800
and the interesting aspect here is that

195
00:07:10,800 --> 00:07:14,000
the operating system can be compromised

196
00:07:14,000 --> 00:07:16,560
and we want to use this way as in

197
00:07:16,560 --> 00:07:17,840
privileged attacker

198
00:07:17,840 --> 00:07:21,520
to have more power as an evil operating

199
00:07:21,520 --> 00:07:22,240
system

200
00:07:22,240 --> 00:07:24,800
than a user space attacker because as

201
00:07:24,800 --> 00:07:26,080
the operating system

202
00:07:26,080 --> 00:07:28,960
we can hook for instance sgx enclave's

203
00:07:28,960 --> 00:07:30,400
exit points

204
00:07:30,400 --> 00:07:33,360
and directly read out the rubble values

205
00:07:33,360 --> 00:07:35,120
from the msr stair

206
00:07:35,120 --> 00:07:37,759
and therefore we can save the overhead

207
00:07:37,759 --> 00:07:39,440
the operating system has

208
00:07:39,440 --> 00:07:41,919
if we first need to access the power cap

209
00:07:41,919 --> 00:07:43,759
framework

210
00:07:43,759 --> 00:07:46,240
the key idea is also that we want to

211
00:07:46,240 --> 00:07:48,160
interrupt the victim as often as

212
00:07:48,160 --> 00:07:49,280
possible

213
00:07:49,280 --> 00:07:52,639
so that we just execute parts

214
00:07:52,639 --> 00:07:55,759
of the enclaves code and

215
00:07:55,759 --> 00:07:58,800
what we use here is the sgx state frame

216
00:07:58,800 --> 00:08:00,960
the step framework by joe van bulk which

217
00:08:00,960 --> 00:08:03,280
is an open source linux kernel framework

218
00:08:03,280 --> 00:08:05,680
which allows us to configure epic timer

219
00:08:05,680 --> 00:08:07,039
interrupts

220
00:08:07,039 --> 00:08:09,440
so we can interrupt an enclave after

221
00:08:09,440 --> 00:08:12,000
just executing a single instruction

222
00:08:12,000 --> 00:08:14,479
so like in a debugger we can single step

223
00:08:14,479 --> 00:08:15,919
through the enclave

224
00:08:15,919 --> 00:08:18,240
or we can also zero step it where we

225
00:08:18,240 --> 00:08:19,919
interrupt it while executing an

226
00:08:19,919 --> 00:08:21,599
instruction

227
00:08:21,599 --> 00:08:24,319
the idea is that we combine now intel

228
00:08:24,319 --> 00:08:24,800
apple

229
00:08:24,800 --> 00:08:28,000
with sgx step which allows us more or

230
00:08:28,000 --> 00:08:30,080
less to measure the energy consumption

231
00:08:30,080 --> 00:08:30,319
of

232
00:08:30,319 --> 00:08:32,640
single instructions executed by the

233
00:08:32,640 --> 00:08:34,159
enclave

234
00:08:34,159 --> 00:08:37,039
and by being capable of doing that and

235
00:08:37,039 --> 00:08:38,640
increasing the resolution that we now

236
00:08:38,640 --> 00:08:39,200
have

237
00:08:39,200 --> 00:08:41,120
we want to attack a cryptographic

238
00:08:41,120 --> 00:08:42,559
implementation

239
00:08:42,559 --> 00:08:45,200
for instance here a toy site of rsa

240
00:08:45,200 --> 00:08:46,880
where we implemented a square and

241
00:08:46,880 --> 00:08:48,399
multiply algorithm

242
00:08:48,399 --> 00:08:50,640
where for a key bit of zero we just

243
00:08:50,640 --> 00:08:52,399
compute the square operation

244
00:08:52,399 --> 00:08:55,120
and if the key bit is 1 we have an added

245
00:08:55,120 --> 00:08:56,880
multiplication

246
00:08:56,880 --> 00:08:58,880
so what we would assume is that

247
00:08:58,880 --> 00:09:00,800
depending on the key bit we would see

248
00:09:00,800 --> 00:09:03,440
a different amount of energy because

249
00:09:03,440 --> 00:09:04,640
depending on the key bit

250
00:09:04,640 --> 00:09:06,839
a different number of instructions are

251
00:09:06,839 --> 00:09:09,120
executed

252
00:09:09,120 --> 00:09:12,160
as we can see here in the different

253
00:09:12,160 --> 00:09:13,200
domains

254
00:09:13,200 --> 00:09:16,399
for each key bit we have different

255
00:09:16,399 --> 00:09:19,120
a different footprint of the energy

256
00:09:19,120 --> 00:09:21,040
therefore allowing us to distinguish

257
00:09:21,040 --> 00:09:23,440
between zeros and ones

258
00:09:23,440 --> 00:09:25,760
but in the paper we go a step further

259
00:09:25,760 --> 00:09:27,600
and actually attack

260
00:09:27,600 --> 00:09:29,760
the embed tls square and multiply

261
00:09:29,760 --> 00:09:31,279
algorithm implementation

262
00:09:31,279 --> 00:09:34,480
to extract an rsa key there

263
00:09:34,480 --> 00:09:37,519
has a certain offset from the branch

264
00:09:37,519 --> 00:09:38,320
distinguishing

265
00:09:38,320 --> 00:09:42,320
between a key bit of 0 and 1

266
00:09:42,320 --> 00:09:45,279
either an avx instruction is executed or

267
00:09:45,279 --> 00:09:45,680
not

268
00:09:45,680 --> 00:09:48,839
the avx instruction has a higher energy

269
00:09:48,839 --> 00:09:51,120
consumption

270
00:09:51,120 --> 00:09:53,360
and the number of instructions depend on

271
00:09:53,360 --> 00:09:55,360
the key you will see all the details in

272
00:09:55,360 --> 00:09:56,080
the paper

273
00:09:56,080 --> 00:09:58,560
but what we can actually do we can

274
00:09:58,560 --> 00:09:59,680
profile

275
00:09:59,680 --> 00:10:03,920
the instructions at certain offsets

276
00:10:03,920 --> 00:10:06,079
allowing us therefore to distinguish

277
00:10:06,079 --> 00:10:08,800
if the key bit has been a 0 or 1 and we

278
00:10:08,800 --> 00:10:10,880
can do that for the entire key

279
00:10:10,880 --> 00:10:13,920
allowing us to recover the complete rsa

280
00:10:13,920 --> 00:10:16,160
key

281
00:10:16,240 --> 00:10:18,880
but back to the beginning what would be

282
00:10:18,880 --> 00:10:20,800
really interesting is if we can

283
00:10:20,800 --> 00:10:22,880
exploit this interface even from user

284
00:10:22,880 --> 00:10:24,720
space to attack cryptographic

285
00:10:24,720 --> 00:10:26,320
implementations

286
00:10:26,320 --> 00:10:28,800
but as i said it's quite difficult to

287
00:10:28,800 --> 00:10:29,680
measure paths

288
00:10:29,680 --> 00:10:32,720
without the sjx step framework

289
00:10:32,720 --> 00:10:35,680
but in cases where we can measure over

290
00:10:35,680 --> 00:10:37,760
the overall execution time

291
00:10:37,760 --> 00:10:40,880
an attack might be possible what we

292
00:10:40,880 --> 00:10:42,240
present you in the paper

293
00:10:42,240 --> 00:10:44,959
is a correlation power analysis attack

294
00:10:44,959 --> 00:10:47,200
where we first built a power consumption

295
00:10:47,200 --> 00:10:48,800
model of the device

296
00:10:48,800 --> 00:10:50,880
for instance using the hamming weight

297
00:10:50,880 --> 00:10:52,240
the same as we've seen

298
00:10:52,240 --> 00:10:53,839
in our initial experiments in the

299
00:10:53,839 --> 00:10:55,600
beginning of this presentation

300
00:10:55,600 --> 00:10:57,680
so depending of the number of bits that

301
00:10:57,680 --> 00:11:00,480
are set in the operand or in the data

302
00:11:00,480 --> 00:11:02,240
you see a difference in the energy

303
00:11:02,240 --> 00:11:04,079
consumption so the more bits are set the

304
00:11:04,079 --> 00:11:06,880
higher the energy consumption will be

305
00:11:06,880 --> 00:11:08,800
another model way would be the hamming

306
00:11:08,800 --> 00:11:11,920
distance where between two operations

307
00:11:11,920 --> 00:11:14,240
depending on how many bits flip from one

308
00:11:14,240 --> 00:11:15,680
to zero or zero to one

309
00:11:15,680 --> 00:11:18,560
you would also have an increase in the

310
00:11:18,560 --> 00:11:20,560
energy consumption

311
00:11:20,560 --> 00:11:23,200
what we target in our attack is aes and

312
00:11:23,200 --> 00:11:23,600
i

313
00:11:23,600 --> 00:11:25,360
which is a side channel resilient

314
00:11:25,360 --> 00:11:27,040
instruction set extension

315
00:11:27,040 --> 00:11:30,560
for aes and we target it in a scenario

316
00:11:30,560 --> 00:11:32,320
where we can trigger the encryption or

317
00:11:32,320 --> 00:11:33,200
the decryption

318
00:11:33,200 --> 00:11:35,600
of many many blocks for instance when

319
00:11:35,600 --> 00:11:38,880
you use disk encryption

320
00:11:39,120 --> 00:11:40,959
the idea is that we can control the

321
00:11:40,959 --> 00:11:42,320
plain text

322
00:11:42,320 --> 00:11:45,200
and can observe the ciphertext what we

323
00:11:45,200 --> 00:11:45,680
do is

324
00:11:45,680 --> 00:11:48,000
we measure the energy consumption over

325
00:11:48,000 --> 00:11:50,399
many many many operations

326
00:11:50,399 --> 00:11:53,519
and basically we just guess the key

327
00:11:53,519 --> 00:11:56,720
but the idea is that we use this energy

328
00:11:56,720 --> 00:11:58,079
model like the hemming weight

329
00:11:58,079 --> 00:12:00,160
and or the hamming distance and

330
00:12:00,160 --> 00:12:01,440
calculate all

331
00:12:01,440 --> 00:12:04,480
possible values a key byte can have and

332
00:12:04,480 --> 00:12:05,279
then we

333
00:12:05,279 --> 00:12:07,519
compare it with the actual measurements

334
00:12:07,519 --> 00:12:09,120
that we have recorded

335
00:12:09,120 --> 00:12:11,279
and see where the correlation is the

336
00:12:11,279 --> 00:12:12,160
highest

337
00:12:12,160 --> 00:12:14,480
and with the high probability this is

338
00:12:14,480 --> 00:12:17,360
then our actually key byte

339
00:12:17,360 --> 00:12:19,920
as you can see here in this demo video

340
00:12:19,920 --> 00:12:22,079
where we have recorded traces

341
00:12:22,079 --> 00:12:24,720
in an sjx enclave or also in a linux

342
00:12:24,720 --> 00:12:26,000
kernel module

343
00:12:26,000 --> 00:12:28,480
we see on the right side for a specific

344
00:12:28,480 --> 00:12:30,320
key byte

345
00:12:30,320 --> 00:12:32,880
the plotted correlation and the red dot

346
00:12:32,880 --> 00:12:33,600
marks

347
00:12:33,600 --> 00:12:35,360
our candidate with the highest

348
00:12:35,360 --> 00:12:36,639
correlation

349
00:12:36,639 --> 00:12:38,639
and as you can see the more and more

350
00:12:38,639 --> 00:12:39,680
traces

351
00:12:39,680 --> 00:12:43,360
we feed into our algorithm the higher

352
00:12:43,360 --> 00:12:46,399
the correlation is for our specific key

353
00:12:46,399 --> 00:12:47,600
candidate

354
00:12:47,600 --> 00:12:49,839
which in the end corresponds to the

355
00:12:49,839 --> 00:12:51,200
actual key byte

356
00:12:51,200 --> 00:12:53,760
and on the left you have seen the

357
00:12:53,760 --> 00:12:56,000
current state depending on the traces

358
00:12:56,000 --> 00:12:58,160
for all key bytes that we want to

359
00:12:58,160 --> 00:13:00,320
recover for the round key

360
00:13:00,320 --> 00:13:03,519
and we succeeded

361
00:13:04,320 --> 00:13:06,240
with all those attacks we also need to

362
00:13:06,240 --> 00:13:08,639
think about mitigations to prevent those

363
00:13:08,639 --> 00:13:10,320
attacks from happening

364
00:13:10,320 --> 00:13:12,639
and in the case of the unprivileged

365
00:13:12,639 --> 00:13:13,920
attacker

366
00:13:13,920 --> 00:13:16,880
this is quite easy to mitigate because

367
00:13:16,880 --> 00:13:17,839
we just remove

368
00:13:17,839 --> 00:13:21,440
this unprivileged access to those msrs

369
00:13:21,440 --> 00:13:23,760
to user space and this has been a

370
00:13:23,760 --> 00:13:27,040
one-line batch for the linux curve

371
00:13:27,040 --> 00:13:30,560
however the threat model of sgx

372
00:13:30,560 --> 00:13:32,800
as i said in the beginning allows a

373
00:13:32,800 --> 00:13:35,440
compromised operating system

374
00:13:35,440 --> 00:13:37,680
so there the operating system batch does

375
00:13:37,680 --> 00:13:39,519
not help anymore because you can just

376
00:13:39,519 --> 00:13:41,440
revert it or do as an attack have

377
00:13:41,440 --> 00:13:42,959
whatever you want

378
00:13:42,959 --> 00:13:45,199
in that case microcode updates have been

379
00:13:45,199 --> 00:13:46,480
necessary

380
00:13:46,480 --> 00:13:48,560
and they fall back to just a model of

381
00:13:48,560 --> 00:13:49,760
the energy consumption

382
00:13:49,760 --> 00:13:52,480
so you do not gather the accurate energy

383
00:13:52,480 --> 00:13:54,079
measurements anymore

384
00:13:54,079 --> 00:13:56,320
which does not allow you to distinguish

385
00:13:56,320 --> 00:13:58,639
between data and operands

386
00:13:58,639 --> 00:14:00,720
however you still need constant time

387
00:14:00,720 --> 00:14:02,800
implementations in your enclaves

388
00:14:02,800 --> 00:14:06,320
to be secure as we can see here

389
00:14:06,320 --> 00:14:08,320
on the left where we profile an

390
00:14:08,320 --> 00:14:10,720
instruction with different operands

391
00:14:10,720 --> 00:14:13,440
without the mitigation you observe

392
00:14:13,440 --> 00:14:15,279
different distributions

393
00:14:15,279 --> 00:14:17,120
on the right side with the mitigation

394
00:14:17,120 --> 00:14:18,639
enabled

395
00:14:18,639 --> 00:14:20,399
you cannot distinguish those cases

396
00:14:20,399 --> 00:14:22,240
anymore

397
00:14:22,240 --> 00:14:24,959
so with platypus we showed you

398
00:14:24,959 --> 00:14:27,040
powerslide channel attacks

399
00:14:27,040 --> 00:14:31,120
from software only on modern cpus

400
00:14:31,120 --> 00:14:33,600
the threat model of sjx requires way

401
00:14:33,600 --> 00:14:36,240
more complex mitigations

402
00:14:36,240 --> 00:14:38,399
but the interesting thing is that even

403
00:14:38,399 --> 00:14:40,959
other cpu manufacturers

404
00:14:40,959 --> 00:14:42,720
that you can find in the paper that

405
00:14:42,720 --> 00:14:45,120
provide similar interfaces

406
00:14:45,120 --> 00:14:49,040
that can be explored for similar attacks

407
00:14:49,040 --> 00:14:51,760
so thank you for your attention and i

408
00:14:51,760 --> 00:14:52,800
welcome you to read

409
00:14:52,800 --> 00:14:55,440
our paper to get all the details and if

410
00:14:55,440 --> 00:14:55,920
you have

411
00:14:55,920 --> 00:14:58,959
any questions feel free to ask

412
00:14:58,959 --> 00:15:02,160
thank you

