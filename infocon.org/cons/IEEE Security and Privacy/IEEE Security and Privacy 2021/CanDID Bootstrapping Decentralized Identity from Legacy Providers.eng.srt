1
00:00:01,120 --> 00:00:03,600
hello everyone today the book and i

2
00:00:03,600 --> 00:00:05,839
are going to talk about candid our new

3
00:00:05,839 --> 00:00:08,400
decentralized identity system

4
00:00:08,400 --> 00:00:10,000
this is joint work with authors from

5
00:00:10,000 --> 00:00:13,280
cornell university uiuc and jpmorgan

6
00:00:13,280 --> 00:00:15,519
and all the authors are part of ic3 the

7
00:00:15,519 --> 00:00:16,320
initiative for

8
00:00:16,320 --> 00:00:18,640
cryptocurrencies and contracts let's

9
00:00:18,640 --> 00:00:20,720
begin with a brief introduction to the

10
00:00:20,720 --> 00:00:22,400
motivation behind candid

11
00:00:22,400 --> 00:00:25,279
and decentralized identity more broadly

12
00:00:25,279 --> 00:00:26,400
first of all

13
00:00:26,400 --> 00:00:28,480
existing identity systems are not

14
00:00:28,480 --> 00:00:30,640
necessarily user friendly

15
00:00:30,640 --> 00:00:32,399
consider the case of making an account

16
00:00:32,399 --> 00:00:34,239
for a bitcoin wallet

17
00:00:34,239 --> 00:00:37,040
you need to do kyc that's know your

18
00:00:37,040 --> 00:00:37,920
customer

19
00:00:37,920 --> 00:00:40,559
using video authentication and an id

20
00:00:40,559 --> 00:00:41,120
card

21
00:00:41,120 --> 00:00:42,800
but you actually can't hold it up like

22
00:00:42,800 --> 00:00:44,320
that

23
00:00:44,320 --> 00:00:47,840
or like that this is fine because

24
00:00:47,840 --> 00:00:49,760
you're not covering part of the id card

25
00:00:49,760 --> 00:00:52,640
or part of your face

26
00:00:52,640 --> 00:00:56,000
but it turns out this is also fine

27
00:00:56,000 --> 00:00:57,920
that is a user could find an

28
00:00:57,920 --> 00:00:59,199
off-the-shelf deep

29
00:00:59,199 --> 00:01:01,440
fake software which are only getting

30
00:01:01,440 --> 00:01:03,840
better every day

31
00:01:03,840 --> 00:01:05,600
how about the case of even simpler

32
00:01:05,600 --> 00:01:07,680
systems like authenticating yourself to

33
00:01:07,680 --> 00:01:09,360
an app using oauth

34
00:01:09,360 --> 00:01:11,280
such as using facebook or google

35
00:01:11,280 --> 00:01:12,720
accounts

36
00:01:12,720 --> 00:01:14,560
this offers limited functionality such

37
00:01:14,560 --> 00:01:16,799
as maybe only login

38
00:01:16,799 --> 00:01:18,640
also this data can be controlled by

39
00:01:18,640 --> 00:01:19,840
third parties now

40
00:01:19,840 --> 00:01:21,680
and used for tracking as shown by

41
00:01:21,680 --> 00:01:24,960
engelhardt at all in 2018.

42
00:01:24,960 --> 00:01:26,799
note that these systems require some

43
00:01:26,799 --> 00:01:28,479
sort of issuing authority such as a

44
00:01:28,479 --> 00:01:29,840
stable government

45
00:01:29,840 --> 00:01:31,520
which leads to the exclusion of

46
00:01:31,520 --> 00:01:35,439
vulnerable populations such as refugees

47
00:01:35,439 --> 00:01:38,079
finally storing identity data on

48
00:01:38,079 --> 00:01:39,200
enterprise servers

49
00:01:39,200 --> 00:01:42,399
is a liability as evidenced by countless

50
00:01:42,399 --> 00:01:43,840
breaches and hacks

51
00:01:43,840 --> 00:01:45,520
and the fact that it's our bread and

52
00:01:45,520 --> 00:01:48,159
butter as the security community

53
00:01:48,159 --> 00:01:50,640
notably the indian government's identity

54
00:01:50,640 --> 00:01:53,920
database including over 275 million

55
00:01:53,920 --> 00:01:56,000
people's data was hacked and exposed on

56
00:01:56,000 --> 00:01:58,960
the internet for over two weeks

57
00:01:58,960 --> 00:02:01,439
to summarize the goals for decentralized

58
00:02:01,439 --> 00:02:02,159
identity

59
00:02:02,159 --> 00:02:04,960
are improving user experience reducing

60
00:02:04,960 --> 00:02:05,759
fraud

61
00:02:05,759 --> 00:02:07,439
empowering users to manage their own

62
00:02:07,439 --> 00:02:09,679
data in a flexible way

63
00:02:09,679 --> 00:02:11,200
to provide credentials to

64
00:02:11,200 --> 00:02:13,840
disenfranchised or stateless individuals

65
00:02:13,840 --> 00:02:15,599
and reducing stored personally

66
00:02:15,599 --> 00:02:17,840
identifiable information and as a result

67
00:02:17,840 --> 00:02:20,560
enterprise liability

68
00:02:20,560 --> 00:02:22,959
the basic setup for decentralized

69
00:02:22,959 --> 00:02:24,720
identity goes like this

70
00:02:24,720 --> 00:02:27,680
there's a user alice an issuer such as

71
00:02:27,680 --> 00:02:29,599
the california dmv

72
00:02:29,599 --> 00:02:31,599
alice generates a public private key

73
00:02:31,599 --> 00:02:34,319
pair and the issuer issues an id

74
00:02:34,319 --> 00:02:36,239
and binds it to alice's public key so

75
00:02:36,239 --> 00:02:39,360
she can now use it

76
00:02:40,160 --> 00:02:42,400
now say alice wants to avail a service

77
00:02:42,400 --> 00:02:44,560
such as getting a student loan

78
00:02:44,560 --> 00:02:46,480
she can make claims about herself such

79
00:02:46,480 --> 00:02:47,599
as i'm alice

80
00:02:47,599 --> 00:02:50,000
i'm over 18 years old i'm a california

81
00:02:50,000 --> 00:02:51,280
resident

82
00:02:51,280 --> 00:02:53,200
and she can use her decentralized

83
00:02:53,200 --> 00:02:55,120
identity and secret key

84
00:02:55,120 --> 00:02:57,920
to confirm these claims now the bank

85
00:02:57,920 --> 00:02:59,040
checks this id

86
00:02:59,040 --> 00:03:02,319
and decides to give her a loan

87
00:03:02,480 --> 00:03:04,480
there is existing work on decentralized

88
00:03:04,480 --> 00:03:06,080
identity in fact it's a

89
00:03:06,080 --> 00:03:08,879
fairly active area these days for

90
00:03:08,879 --> 00:03:10,640
example the decentralized identity

91
00:03:10,640 --> 00:03:11,280
foundation

92
00:03:11,280 --> 00:03:12,959
whose members are wide ranging from

93
00:03:12,959 --> 00:03:15,920
banks to digital passports

94
00:03:15,920 --> 00:03:18,959
also w3c is working on a standard and

95
00:03:18,959 --> 00:03:20,879
there's hyperledger indie

96
00:03:20,879 --> 00:03:23,519
evername you board many other startups

97
00:03:23,519 --> 00:03:25,360
the vision is that users will control

98
00:03:25,360 --> 00:03:26,720
their own credentials

99
00:03:26,720 --> 00:03:28,879
digital passports digital diplomas

100
00:03:28,879 --> 00:03:32,640
proofs of age verification etc etc

101
00:03:32,640 --> 00:03:35,280
so why do we need another system to do

102
00:03:35,280 --> 00:03:37,360
decentralized identity

103
00:03:37,360 --> 00:03:39,760
well several problems get swept under

104
00:03:39,760 --> 00:03:42,080
the rug in these systems

105
00:03:42,080 --> 00:03:44,080
first of all we talk about credential

106
00:03:44,080 --> 00:03:45,599
issuers

107
00:03:45,599 --> 00:03:48,480
but where do these issuers come from

108
00:03:48,480 --> 00:03:50,159
without a bunch of issuers

109
00:03:50,159 --> 00:03:52,239
it's not possible to build a robust

110
00:03:52,239 --> 00:03:54,799
decentralized identity ecosystem

111
00:03:54,799 --> 00:03:57,439
but without a decentralized ecosystem

112
00:03:57,439 --> 00:03:58,799
being in place

113
00:03:58,799 --> 00:04:00,400
there's no incentive for issuers to

114
00:04:00,400 --> 00:04:01,920
issue ids

115
00:04:01,920 --> 00:04:03,519
this is the classic chicken and neck

116
00:04:03,519 --> 00:04:05,840
problem

117
00:04:05,840 --> 00:04:07,680
also users are notoriously bad at

118
00:04:07,680 --> 00:04:09,519
managing large keys

119
00:04:09,519 --> 00:04:12,080
an estimated 4 million bitcoin were lost

120
00:04:12,080 --> 00:04:14,480
due to this and this is from 2017

121
00:04:14,480 --> 00:04:17,680
problem is probably much worse now so

122
00:04:17,680 --> 00:04:20,160
you take a nice process of going from

123
00:04:20,160 --> 00:04:21,918
centralized financial systems

124
00:04:21,918 --> 00:04:24,560
to decentralized ones like bitcoin and

125
00:04:24,560 --> 00:04:25,120
then

126
00:04:25,120 --> 00:04:27,759
because users are trusting a service

127
00:04:27,759 --> 00:04:28,160
like

128
00:04:28,160 --> 00:04:30,479
coinbase which is centralized uh with

129
00:04:30,479 --> 00:04:31,280
their keys

130
00:04:31,280 --> 00:04:32,960
you've basically centralized this

131
00:04:32,960 --> 00:04:35,040
financial system all over again

132
00:04:35,040 --> 00:04:37,440
in fact something like 10 of all bitcoin

133
00:04:37,440 --> 00:04:40,160
is held in coinbase

134
00:04:40,160 --> 00:04:43,280
finally we want lots of issuers

135
00:04:43,280 --> 00:04:45,759
but what we don't want is lots of copies

136
00:04:45,759 --> 00:04:47,120
of an individual

137
00:04:47,120 --> 00:04:48,960
for example applications like voting

138
00:04:48,960 --> 00:04:52,560
which require one person one vote

139
00:04:52,560 --> 00:04:54,479
civil resistance is easier without

140
00:04:54,479 --> 00:04:56,800
privacy as with everything

141
00:04:56,800 --> 00:04:59,280
even so it's a hard problem as evidenced

142
00:04:59,280 --> 00:05:01,120
by the research activity on the civil

143
00:05:01,120 --> 00:05:03,280
resistance problem

144
00:05:03,280 --> 00:05:05,520
but you could leverage identifying

145
00:05:05,520 --> 00:05:07,199
information such as social security

146
00:05:07,199 --> 00:05:09,120
numbers

147
00:05:09,120 --> 00:05:11,600
once you do do this though could you get

148
00:05:11,600 --> 00:05:12,960
privacy

149
00:05:12,960 --> 00:05:15,520
and once you can do private civil

150
00:05:15,520 --> 00:05:17,520
resistance could you get accountability

151
00:05:17,520 --> 00:05:20,560
such as against financial crimes

152
00:05:20,560 --> 00:05:23,520
to summarize candid is a decentralized

153
00:05:23,520 --> 00:05:24,240
identity

154
00:05:24,240 --> 00:05:26,880
system which allows bootstrapping

155
00:05:26,880 --> 00:05:29,199
identity using legacy data

156
00:05:29,199 --> 00:05:32,479
key management and civil resistance with

157
00:05:32,479 --> 00:05:34,800
accountability now deepak will discuss

158
00:05:34,800 --> 00:05:36,160
how we do this

159
00:05:36,160 --> 00:05:38,160
hi everyone this is deepak and i'll take

160
00:05:38,160 --> 00:05:39,919
you through the rest of the talk

161
00:05:39,919 --> 00:05:41,600
before i go into candidate i'll first

162
00:05:41,600 --> 00:05:45,039
introduce a building block called delico

163
00:05:45,039 --> 00:05:46,639
i'll explain deco through the following

164
00:05:46,639 --> 00:05:49,360
problem suppose bob here is about to

165
00:05:49,360 --> 00:05:50,880
launch a new token called the bubble

166
00:05:50,880 --> 00:05:51,680
token

167
00:05:51,680 --> 00:05:54,320
and he's going to hold a token sale bob

168
00:05:54,320 --> 00:05:56,080
has the ideas about how to make the sale

169
00:05:56,080 --> 00:05:57,199
responsible

170
00:05:57,199 --> 00:05:58,720
he wants to ensure that his tokens are

171
00:05:58,720 --> 00:06:00,400
fairly distributed

172
00:06:00,400 --> 00:06:03,360
aren't all snapped up by a single person

173
00:06:03,360 --> 00:06:04,240
and that

174
00:06:04,240 --> 00:06:06,080
people who participate can reasonably

175
00:06:06,080 --> 00:06:08,000
afford to do so

176
00:06:08,000 --> 00:06:10,400
so he sets the following rule to buy up

177
00:06:10,400 --> 00:06:11,759
to 100 bubble token

178
00:06:11,759 --> 00:06:13,199
you have to show that you have a bank

179
00:06:13,199 --> 00:06:14,800
account with your name on it

180
00:06:14,800 --> 00:06:16,479
and that it and it should contain at

181
00:06:16,479 --> 00:06:18,800
least five thousand dollars

182
00:06:18,800 --> 00:06:20,479
this makes it hard for people to create

183
00:06:20,479 --> 00:06:23,120
fictitious identities

184
00:06:23,120 --> 00:06:24,720
alice comes along she would like to

185
00:06:24,720 --> 00:06:26,800
participate in this token sale

186
00:06:26,800 --> 00:06:28,880
she has a required amount but how does

187
00:06:28,880 --> 00:06:31,759
she prove this to bob

188
00:06:31,759 --> 00:06:33,600
a first thought could be to simply send

189
00:06:33,600 --> 00:06:36,319
a screenshot of her bank account

190
00:06:36,319 --> 00:06:38,319
but as you all might know it's easy to

191
00:06:38,319 --> 00:06:39,600
modify a screenshot

192
00:06:39,600 --> 00:06:41,280
alice might have no money but still

193
00:06:41,280 --> 00:06:43,199
poses a multi-million error

194
00:06:43,199 --> 00:06:46,080
so this won't work

195
00:06:46,639 --> 00:06:48,560
another idea could be to send the tls

196
00:06:48,560 --> 00:06:49,919
transcript

197
00:06:49,919 --> 00:06:51,919
quite likely alice is interacting with

198
00:06:51,919 --> 00:06:54,560
the bank or a tls connection

199
00:06:54,560 --> 00:06:57,039
at a high level this means the followers

200
00:06:57,039 --> 00:06:59,280
als works in two phases

201
00:06:59,280 --> 00:07:01,199
first alice and bank generate shared

202
00:07:01,199 --> 00:07:03,199
keys in the key exchange phase

203
00:07:03,199 --> 00:07:04,639
next these keys are used to send

204
00:07:04,639 --> 00:07:07,120
messages across in the record layer

205
00:07:07,120 --> 00:07:08,639
we are going to refer to these messages

206
00:07:08,639 --> 00:07:10,400
as the tls transcript

207
00:07:10,400 --> 00:07:12,479
for example the bank balance analyses is

208
00:07:12,479 --> 00:07:14,800
also part of this transcript

209
00:07:14,800 --> 00:07:16,960
so our idea here is that alice can

210
00:07:16,960 --> 00:07:18,960
simply forward this dls transcript to

211
00:07:18,960 --> 00:07:20,240
bob

212
00:07:20,240 --> 00:07:21,840
and perhaps bob can just look at the

213
00:07:21,840 --> 00:07:23,280
transcript and check that the balance is

214
00:07:23,280 --> 00:07:26,159
greater than 5 000

215
00:07:26,240 --> 00:07:27,680
now at first sight this might seem like

216
00:07:27,680 --> 00:07:29,919
a workable solution recall that tls

217
00:07:29,919 --> 00:07:32,160
guarantees transcript integrity

218
00:07:32,160 --> 00:07:34,080
which means that the transcript can't be

219
00:07:34,080 --> 00:07:35,840
forged by a third party

220
00:07:35,840 --> 00:07:37,520
that's sort of how alice is sure that

221
00:07:37,520 --> 00:07:39,440
the data she receives from the bank

222
00:07:39,440 --> 00:07:41,120
is enforced and it's actually coming

223
00:07:41,120 --> 00:07:42,479
from the bank

224
00:07:42,479 --> 00:07:44,400
so perhaps a similar guarantee transfers

225
00:07:44,400 --> 00:07:46,800
to bob as well

226
00:07:46,800 --> 00:07:48,639
the problem with this idea is that the

227
00:07:48,639 --> 00:07:50,319
integrity guarantee is designed to be

228
00:07:50,319 --> 00:07:51,759
useful only for analysts

229
00:07:51,759 --> 00:07:55,280
not to a third party like bob to explain

230
00:07:55,280 --> 00:07:56,000
the problem

231
00:07:56,000 --> 00:07:58,160
tls uses public key crypto or digital

232
00:07:58,160 --> 00:08:00,319
signatures for the key exchange phase

233
00:08:00,319 --> 00:08:02,400
but switches to using symmetric keys for

234
00:08:02,400 --> 00:08:03,840
the record layer

235
00:08:03,840 --> 00:08:06,240
and record layer integrity is provided

236
00:08:06,240 --> 00:08:07,919
through a mac rather than a true digital

237
00:08:07,919 --> 00:08:09,520
signature

238
00:08:09,520 --> 00:08:11,680
essentially alice and bank have a shared

239
00:08:11,680 --> 00:08:13,919
mac key

240
00:08:13,919 --> 00:08:16,160
but what this means for us is that alice

241
00:08:16,160 --> 00:08:18,000
can use this pack key to force a

242
00:08:18,000 --> 00:08:20,879
transcript before forwarding to bob

243
00:08:20,879 --> 00:08:22,000
for example to look like a

244
00:08:22,000 --> 00:08:24,800
multi-millionaire

245
00:08:25,520 --> 00:08:27,199
now there are a few proposals to change

246
00:08:27,199 --> 00:08:29,919
tls for example the tlsn scheme

247
00:08:29,919 --> 00:08:31,759
and the open id standard both allow

248
00:08:31,759 --> 00:08:33,519
signing of data

249
00:08:33,519 --> 00:08:35,440
but changing tls is not a viable

250
00:08:35,440 --> 00:08:37,519
solution in general because it requires

251
00:08:37,519 --> 00:08:39,279
big infrastructural changes

252
00:08:39,279 --> 00:08:40,799
which means that we're basically back at

253
00:08:40,799 --> 00:08:42,958
the bootstrapping problem

254
00:08:42,958 --> 00:08:45,200
the key idea in deco is to withhold the

255
00:08:45,200 --> 00:08:47,360
mac key from alice

256
00:08:47,360 --> 00:08:49,440
essentially alice and bob generate

257
00:08:49,440 --> 00:08:50,800
shared key k

258
00:08:50,800 --> 00:08:52,160
through what we call a three-party

259
00:08:52,160 --> 00:08:55,200
handshake this ensures that alice can't

260
00:08:55,200 --> 00:08:56,640
force the transcript she receives from

261
00:08:56,640 --> 00:08:58,240
the server

262
00:08:58,240 --> 00:09:00,480
but later once the session ends analyst

263
00:09:00,480 --> 00:09:01,920
proves things about the transcript

264
00:09:01,920 --> 00:09:05,279
bob in zero knowledge the cool thing

265
00:09:05,279 --> 00:09:06,800
about all this is that the server

266
00:09:06,800 --> 00:09:08,080
doesn't know this is happening

267
00:09:08,080 --> 00:09:09,839
and as far as the server is concerned

268
00:09:09,839 --> 00:09:11,360
it's interacting with just another web

269
00:09:11,360 --> 00:09:13,680
client

270
00:09:13,680 --> 00:09:15,839
what deco aims to do is liberate web

271
00:09:15,839 --> 00:09:17,200
data so that it can be used in

272
00:09:17,200 --> 00:09:18,800
blockchain systems and elsewhere

273
00:09:18,800 --> 00:09:21,040
specifically we want a user to be able

274
00:09:21,040 --> 00:09:22,000
to log into your website

275
00:09:22,000 --> 00:09:24,000
via tls and then prove statements about

276
00:09:24,000 --> 00:09:25,600
this data to a verifier using zero

277
00:09:25,600 --> 00:09:27,519
knowledge proofs

278
00:09:27,519 --> 00:09:29,360
in our banking example this statement

279
00:09:29,360 --> 00:09:30,720
could be that alice has at least five

280
00:09:30,720 --> 00:09:34,080
thousand dollars in her bank account

281
00:09:34,080 --> 00:09:35,920
i want to again highlight that deco

282
00:09:35,920 --> 00:09:37,760
works without modifying existing tls

283
00:09:37,760 --> 00:09:40,240
servers and deco also supports both pls

284
00:09:40,240 --> 00:09:43,760
versions 1.2 and 1.3

285
00:09:43,839 --> 00:09:47,600
with that i'll move on to candid now

286
00:09:47,600 --> 00:09:49,680
the basic setup in candid is that of a

287
00:09:49,680 --> 00:09:50,880
committee of nodes

288
00:09:50,880 --> 00:09:52,640
and we assume a fraction of them to be

289
00:09:52,640 --> 00:09:54,000
honest

290
00:09:54,000 --> 00:09:55,680
credential issuance in candidate works

291
00:09:55,680 --> 00:09:57,920
as follows

292
00:09:57,920 --> 00:09:59,680
let's say alice wants to get a

293
00:09:59,680 --> 00:10:01,600
credential that says that she's

294
00:10:01,600 --> 00:10:04,560
above 18 years of age now at us first

295
00:10:04,560 --> 00:10:06,320
gets to pick several providers of her

296
00:10:06,320 --> 00:10:07,440
choice

297
00:10:07,440 --> 00:10:09,279
the only restriction on the providers is

298
00:10:09,279 --> 00:10:10,880
that they have a web interface where

299
00:10:10,880 --> 00:10:13,040
they show alice's age that alice can

300
00:10:13,040 --> 00:10:15,200
access

301
00:10:15,200 --> 00:10:17,360
alice uses deco to prove to committee

302
00:10:17,360 --> 00:10:20,079
members that she is over 18

303
00:10:20,079 --> 00:10:21,920
once enough committee members verify the

304
00:10:21,920 --> 00:10:23,360
deco proofs they issue assigned

305
00:10:23,360 --> 00:10:24,880
credentials saying that alice is over

306
00:10:24,880 --> 00:10:27,120
18.

307
00:10:27,120 --> 00:10:28,640
in this process we've essentially

308
00:10:28,640 --> 00:10:30,880
returned any web server that serves web

309
00:10:30,880 --> 00:10:32,079
content via tls

310
00:10:32,079 --> 00:10:35,200
into a credential issuer

311
00:10:35,200 --> 00:10:36,560
other nice credential issuance

312
00:10:36,560 --> 00:10:38,959
properties candidate has include privacy

313
00:10:38,959 --> 00:10:40,399
which is that the committee members

314
00:10:40,399 --> 00:10:41,519
learn only the

315
00:10:41,519 --> 00:10:44,240
adjusted data and nothing more legacy

316
00:10:44,240 --> 00:10:45,200
compatibility

317
00:10:45,200 --> 00:10:47,120
and virtually unlimited attestation

318
00:10:47,120 --> 00:10:49,040
types are supported

319
00:10:49,040 --> 00:10:50,959
i'll move on to key management now

320
00:10:50,959 --> 00:10:52,560
recall that the goal of candid skill

321
00:10:52,560 --> 00:10:54,640
management system is to provide a usable

322
00:10:54,640 --> 00:10:56,240
yet decentralized alternative to

323
00:10:56,240 --> 00:10:58,240
existing ones

324
00:10:58,240 --> 00:10:59,920
roughly we take a similar approach in

325
00:10:59,920 --> 00:11:01,440
key management as out of credential

326
00:11:01,440 --> 00:11:02,560
issuance

327
00:11:02,560 --> 00:11:04,320
alice can back up her secret key with

328
00:11:04,320 --> 00:11:06,079
the committee who store it via standard

329
00:11:06,079 --> 00:11:07,600
secret sharing techniques that ensure

330
00:11:07,600 --> 00:11:10,240
that no individual node learns the key

331
00:11:10,240 --> 00:11:12,880
if ever alice loses her key she goes to

332
00:11:12,880 --> 00:11:14,640
several pre-selected providers of her

333
00:11:14,640 --> 00:11:15,519
choice

334
00:11:15,519 --> 00:11:17,760
provides a proof of login generated by a

335
00:11:17,760 --> 00:11:18,560
deco

336
00:11:18,560 --> 00:11:20,560
and once enough committee members verify

337
00:11:20,560 --> 00:11:22,560
these proofs the key is written back to

338
00:11:22,560 --> 00:11:24,640
alice

339
00:11:24,640 --> 00:11:26,640
you might be wondering why not use oauth

340
00:11:26,640 --> 00:11:28,160
and the reason we do not use more

341
00:11:28,160 --> 00:11:29,839
standard protocols like

342
00:11:29,839 --> 00:11:31,360
is that the leak information that we

343
00:11:31,360 --> 00:11:32,880
think would be undesirable in a

344
00:11:32,880 --> 00:11:34,959
decentralized identity system

345
00:11:34,959 --> 00:11:36,880
for example the committee nodes might

346
00:11:36,880 --> 00:11:38,560
learn user's real world identity

347
00:11:38,560 --> 00:11:40,839
which which could be potentially

348
00:11:40,839 --> 00:11:42,079
undesirable

349
00:11:42,079 --> 00:11:44,560
moving on to civil resistance now recall

350
00:11:44,560 --> 00:11:46,399
from the token sale example before

351
00:11:46,399 --> 00:11:48,320
that we somehow want to ensure that each

352
00:11:48,320 --> 00:11:50,639
user gets only 100 bubble tokens so as

353
00:11:50,639 --> 00:11:53,760
to ensure a fair distribution of tokens

354
00:11:53,760 --> 00:11:55,360
candidate takes two approaches to

355
00:11:55,360 --> 00:11:58,399
providing civil resistance

356
00:11:58,399 --> 00:12:00,320
the first is what i'll call the unique

357
00:12:00,320 --> 00:12:02,399
idea approach where user begins with an

358
00:12:02,399 --> 00:12:03,839
already unique identifier

359
00:12:03,839 --> 00:12:06,320
for example the social security number

360
00:12:06,320 --> 00:12:07,040
the committee

361
00:12:07,040 --> 00:12:10,639
has a prf key and a prf is computed

362
00:12:10,639 --> 00:12:12,720
over the social security number the

363
00:12:12,720 --> 00:12:13,680
output of which

364
00:12:13,680 --> 00:12:14,720
is matched with an existing

365
00:12:14,720 --> 00:12:17,760
deduplication list if no match is found

366
00:12:17,760 --> 00:12:20,959
the user is unique finally the new entry

367
00:12:20,959 --> 00:12:22,480
is added to the list

368
00:12:22,480 --> 00:12:24,320
note that the prf key is secret shared

369
00:12:24,320 --> 00:12:25,600
amongst the committee members

370
00:12:25,600 --> 00:12:28,160
so no individual committee node knows it

371
00:12:28,160 --> 00:12:29,360
the use of prf

372
00:12:29,360 --> 00:12:31,120
essentially ensures that even committee

373
00:12:31,120 --> 00:12:32,880
members don't learn the social security

374
00:12:32,880 --> 00:12:35,600
number essentially what we get out of

375
00:12:35,600 --> 00:12:37,360
this approach is that one id

376
00:12:37,360 --> 00:12:40,560
gets one candid credential a second

377
00:12:40,560 --> 00:12:42,320
approach to civil resistance is what we

378
00:12:42,320 --> 00:12:43,760
call the fuzzy approach

379
00:12:43,760 --> 00:12:45,760
and the motivation here is that several

380
00:12:45,760 --> 00:12:47,839
people lack a unique identifier

381
00:12:47,839 --> 00:12:49,680
this could for example be belonging to

382
00:12:49,680 --> 00:12:52,160
countries that don't provide them and

383
00:12:52,160 --> 00:12:54,800
identification for these people relies

384
00:12:54,800 --> 00:12:57,279
on things like name and address

385
00:12:57,279 --> 00:12:58,880
the problem with these identifiers

386
00:12:58,880 --> 00:13:00,399
though is that they're prone to all

387
00:13:00,399 --> 00:13:01,760
kinds of errors for example

388
00:13:01,760 --> 00:13:04,720
transcription errors

389
00:13:04,720 --> 00:13:07,519
therefore these identifiers require

390
00:13:07,519 --> 00:13:09,040
techniques like edit distance

391
00:13:09,040 --> 00:13:11,839
or more broadly fuzzy matching an

392
00:13:11,839 --> 00:13:13,839
example transcription error is shown in

393
00:13:13,839 --> 00:13:16,240
the picture on the right

394
00:13:16,240 --> 00:13:18,639
as noted before doing fuzzy matching is

395
00:13:18,639 --> 00:13:21,279
easy if privacy was not a concern

396
00:13:21,279 --> 00:13:23,200
the challenge in candid is to do fuzzy

397
00:13:23,200 --> 00:13:25,040
matching while keeping user data hidden

398
00:13:25,040 --> 00:13:26,800
from the committee nodes

399
00:13:26,800 --> 00:13:28,959
in a nutshell and it instantiates a

400
00:13:28,959 --> 00:13:30,639
fuzzy matching technique called sea

401
00:13:30,639 --> 00:13:32,720
shingles using secure mpc

402
00:13:32,720 --> 00:13:34,240
the details of it can be found in the

403
00:13:34,240 --> 00:13:36,079
paper

404
00:13:36,079 --> 00:13:38,240
at a high level what happens is that the

405
00:13:38,240 --> 00:13:40,560
committee holds a database for example

406
00:13:40,560 --> 00:13:42,160
of let's say user names

407
00:13:42,160 --> 00:13:44,320
and when a new user says scrooge mcduck

408
00:13:44,320 --> 00:13:46,079
comes in the committee uses fuzzy

409
00:13:46,079 --> 00:13:47,760
matching techniques to find

410
00:13:47,760 --> 00:13:50,639
if the user belongs to this list not in

411
00:13:50,639 --> 00:13:52,160
particular that the database

412
00:13:52,160 --> 00:13:54,639
is not is held in secret shared form

413
00:13:54,639 --> 00:13:56,480
that is no individual company node knows

414
00:13:56,480 --> 00:13:58,000
it in full

415
00:13:58,000 --> 00:13:59,680
finally it turns out that the same fuzzy

416
00:13:59,680 --> 00:14:01,120
matching techniques are also useful for

417
00:14:01,120 --> 00:14:02,720
accountability let's say to prove that

418
00:14:02,720 --> 00:14:04,880
you're not in a public sanctions list

419
00:14:04,880 --> 00:14:06,560
again we want to cover it in detail in

420
00:14:06,560 --> 00:14:09,360
the interest of time

421
00:14:09,360 --> 00:14:11,040
we implement candid and perform

422
00:14:11,040 --> 00:14:13,040
end-to-end measurements

423
00:14:13,040 --> 00:14:15,120
the credential generation time is less

424
00:14:15,120 --> 00:14:16,160
than 20 seconds

425
00:14:16,160 --> 00:14:18,720
well within the realm of practicality

426
00:14:18,720 --> 00:14:19,360
this time

427
00:14:19,360 --> 00:14:20,800
includes using decode to port

428
00:14:20,800 --> 00:14:22,399
credentials from two websites

429
00:14:22,399 --> 00:14:25,120
ssa and rent cafe and also the time to

430
00:14:25,120 --> 00:14:28,160
perform deduplication

431
00:14:28,160 --> 00:14:30,000
another number i want to discuss is the

432
00:14:30,000 --> 00:14:32,320
sanctions list check time

433
00:14:32,320 --> 00:14:34,000
this check involves using the fuzzy

434
00:14:34,000 --> 00:14:35,120
fuzzy matching techniques we've

435
00:14:35,120 --> 00:14:36,880
developed

436
00:14:36,880 --> 00:14:38,800
as you can see it is somewhat expensive

437
00:14:38,800 --> 00:14:40,720
taking about 25 minutes

438
00:14:40,720 --> 00:14:42,240
but this is one time and there are

439
00:14:42,240 --> 00:14:44,240
opportunities to heavily paralyze it in

440
00:14:44,240 --> 00:14:47,519
order to reduce it further

441
00:14:48,079 --> 00:14:49,680
thank you for listening please visit our

442
00:14:49,680 --> 00:14:53,040
website to learn more

