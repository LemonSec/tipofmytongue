1
00:00:04,220 --> 00:00:06,593
Hi, welcome to this presentation on the

2
00:00:06,593 --> 00:00:08,508
security model and verified implementation

3
00:00:08,508 --> 00:00:11,009
for the IETF QUIC record layer.

4
00:00:11,010 --> 00:00:13,692
This is a joint work between

5
00:00:13,692 --> 00:00:15,033
 Microsoft Research, Carnegie Melon

6
00:00:15,033 --> 00:00:17,148
University and LORIA.

7
00:00:17,150 --> 00:00:19,810
 In essence, the goal of QUIC is to 

8
00:00:19,810 --> 00:00:21,479
 maximize networking performance 

9
00:00:21,480 --> 00:00:23,790
by sacrificing the modularity of

10
00:00:23,790 --> 00:00:26,090
the current network protocol stack.

11
00:00:26,090 --> 00:00:28,490
It achieves this by combining the

12
00:00:28,490 --> 00:00:31,299
core features of TCP like source address

13
00:00:31,300 --> 00:00:32,168
validation, fragmentation,

14
00:00:32,168 --> 00:00:33,470
acknowledgements and retransmission,

15
00:00:33,470 --> 00:00:35,750
with encryption from Transport

16
00:00:35,750 --> 00:00:38,030
layer Security or TLS.

17
00:00:38,030 --> 00:00:40,230
 QUIC even includes features found 

18
00:00:40,230 --> 00:00:42,430
in application protocols such as

19
00:00:42,498 --> 00:00:44,257
multiplexing multiple streams over

20
00:00:44,258 --> 00:00:46,898
a single connection from HTTP 2.

21
00:00:46,900 --> 00:00:49,096
 QUIC is the latest step in the quest 

22
00:00:49,096 --> 00:00:50,559
to lower connection latency.

23
00:00:50,560 --> 00:00:53,143
 Even the zero round trip

24
00:00:53,143 --> 00:00:56,640
 mode of TLS 1.3 has a hidden 

25
00:00:56,640 --> 00:00:58,945
roundtrip for the TCP SYN/ACK handshake

26
00:00:58,950 --> 00:01:00,990
 QUIC is the first truly zero 

27
00:01:00,990 --> 00:01:02,010
 connection latency protocol, 

28
00:01:02,010 --> 00:01:03,977
but it also comes with other

29
00:01:03,978 --> 00:01:06,219
benefits such as the ability to

30
00:01:06,219 --> 00:01:08,363
fine tune parameters like the

31
00:01:08,364 --> 00:01:10,540
retransmission timer or the window

32
00:01:10,540 --> 00:01:12,595
size based on application needs.

33
00:01:12,600 --> 00:01:14,820
 Originally QUIC was developed by Google 

34
00:01:14,820 --> 00:01:17,809
 as a proprietary protocol to communicate 

35
00:01:17,809 --> 00:01:20,204
between Chrome and Google Services.

36
00:01:20,210 --> 00:01:20,592
However,

37
00:01:20,592 --> 00:01:23,266
 Google QUIC was based on a custom 

38
00:01:23,266 --> 00:01:25,412
 key exchange protocol and suffered a 

39
00:01:25,412 --> 00:01:27,164
number of critical vulnerabilities.

40
00:01:27,170 --> 00:01:29,828
 In 2016 the IETF started working 

41
00:01:29,828 --> 00:01:32,609
 on turning QUIC into a standard. 

42
00:01:32,610 --> 00:01:35,361
 So far 34 drafts have been published 

43
00:01:35,361 --> 00:01:38,140
 by the IETF and QUIC has seen

44
00:01:38,140 --> 00:01:39,325
significant adoption from

45
00:01:39,325 --> 00:01:40,905
over 2,000,000 hosts today.

46
00:01:40,910 --> 00:01:43,565
According to an ongoing monitoring

47
00:01:43,565 --> 00:01:45,689
 project by Ruth et al.

48
00:01:45,690 --> 00:01:46,086
Interestingly,

49
00:01:46,086 --> 00:01:48,462
version turnover is measured a much

50
00:01:48,462 --> 00:01:50,330
 faster rate in QUIC than in TLS

51
00:01:50,330 --> 00:01:52,940
and there are also many non

52
00:01:52,940 --> 00:01:55,670
standard versions of QUIC which

53
00:01:55,671 --> 00:01:57,916
are found in the wild.

54
00:01:57,920 --> 00:02:00,629
 When quick was proposed to the IETF, 

55
00:02:00,630 --> 00:02:03,170
the guiding principle for his design was

56
00:02:03,171 --> 00:02:06,429
to build it as a wrapper around standard

57
00:02:06,430 --> 00:02:06,818
TLS 1.3

58
00:02:06,818 --> 00:02:08,758
such that QUIC

59
00:02:08,759 --> 00:02:10,734
 would directly benefit from the 

60
00:02:10,735 --> 00:02:13,010
extensive security analysis done on TLS.

61
00:02:13,010 --> 00:02:13,421
However,

62
00:02:13,421 --> 00:02:15,887
it soon became clear that the

63
00:02:15,887 --> 00:02:18,594
 TLS record layer stood in the 

64
00:02:18,594 --> 00:02:20,458
way of significant optimizations.

65
00:02:20,460 --> 00:02:23,070
Hence the decision was taken to

66
00:02:23,070 --> 00:02:24,810
 have QUIC interface directly 

67
00:02:24,889 --> 00:02:27,289
with the TLS handshake and

68
00:02:27,289 --> 00:02:30,131
 the QUIC record layer would manage all 

69
00:02:30,131 --> 00:02:31,886
 data fragmentation and encryption. 

70
00:02:31,890 --> 00:02:33,386
This raises 2 problems.

71
00:02:33,386 --> 00:02:33,760
First,

72
00:02:33,760 --> 00:02:35,579
existing security analysis

73
00:02:35,580 --> 00:02:37,842
 for TLS applies to the handshake and

74
00:02:37,842 --> 00:02:39,350
 record layer used together. 

75
00:02:39,350 --> 00:02:40,838
While many security models

76
00:02:40,838 --> 00:02:42,326
modularized the handshake,

77
00:02:42,330 --> 00:02:44,635
 it is unclear whether its

78
00:02:44,635 --> 00:02:47,570
used by QUIC is safe.

79
00:02:47,570 --> 00:02:48,370
For instance,

80
00:02:48,370 --> 00:02:49,170
version negotiation, 

81
00:02:49,170 --> 00:02:51,170
which has historically been a

82
00:02:51,170 --> 00:02:52,518
serious weakness in TLS,

83
00:02:52,520 --> 00:02:55,824
is replaced by a new negotiation mechanism.

84
00:02:55,830 --> 00:02:57,660
 The version agnostic document of 

85
00:02:57,660 --> 00:02:59,760
QUIC does not specify a generic

86
00:02:59,760 --> 00:03:01,408
defense against downgrade attacks,

87
00:03:01,410 --> 00:03:02,736
which is concerning.

88
00:03:02,736 --> 00:03:04,946
Given the diversity and turnover

89
00:03:04,946 --> 00:03:07,260
of versions observed on the web.

90
00:03:07,260 --> 00:03:09,432
 Second, the QUIC record layer 

91
00:03:09,432 --> 00:03:10,880
itself introduces new cryptographic

92
00:03:10,942 --> 00:03:12,918
constructions for packet encryption,

93
00:03:12,920 --> 00:03:14,940
which clearly require new analysis.

94
00:03:14,940 --> 00:03:19,564
 We analyze the later problem in this paper. 

95
00:03:19,570 --> 00:03:22,233
 Early QUIC packets for TLS messages 

96
00:03:22,234 --> 00:03:25,449
 and 0RTT data before the handshake is complete 

97
00:03:25,450 --> 00:03:28,137
use long headers, but they switch to short

98
00:03:28,138 --> 00:03:30,581
 headers after the main TLS

99
00:03:30,581 --> 00:03:32,837
 traffic secret is derived. 

100
00:03:32,840 --> 00:03:34,800
Multiple QUIC connections 

101
00:03:34,800 --> 00:03:36,760
can be multiplexed over the

102
00:03:36,834 --> 00:03:39,354
same source or destination address

103
00:03:39,354 --> 00:03:41,370
port using connection identifiers.

104
00:03:41,370 --> 00:03:43,955
Connection IDs also allow migration

105
00:03:43,955 --> 00:03:47,000
 of QUIC sessions across network path. 

106
00:03:47,000 --> 00:03:49,784
 While quick packet numbers

107
00:03:49,784 --> 00:03:53,263
 use 62 bits, senders only

108
00:03:53,270 --> 00:03:55,942
send a choice of 8, 16, 24 or 32 of 

109
00:03:55,942 --> 00:03:58,820
 the least significant bits. 

110
00:04:00,830 --> 00:04:03,188
Furthermore, these beats are also encrypted,

111
00:04:03,190 --> 00:04:04,886
which might seem surprising.

112
00:04:04,886 --> 00:04:08,822
 Normally tne packet number is used to derive 

113
00:04:08,822 --> 00:04:11,456
the AEAD nonce for decrypting the packet. 

114
00:04:11,460 --> 00:04:13,427
 Leaving aside the question or how packet

115
00:04:13,430 --> 00:04:15,410
numbers are encrypted,

116
00:04:15,410 --> 00:04:17,576
It's also interesting to wonder why

117
00:04:17,576 --> 00:04:20,209
they would be in the first place.

118
00:04:20,209 --> 00:04:21,823
 In fact, the QUIC record layer tries

119
00:04:21,824 --> 00:04:23,859
to enforce a new privacy property.

120
00:04:23,860 --> 00:04:25,988
It should be hard for an adversary

121
00:04:25,988 --> 00:04:28,195
to tell if two packets belong

122
00:04:28,195 --> 00:04:30,224
to the same quick connection.

123
00:04:30,230 --> 00:04:32,468
 It seems like connection IDs

124
00:04:32,468 --> 00:04:33,960
 trivially undermines this guarantee, 

125
00:04:33,960 --> 00:04:35,825
 but QUIC actually allows packets 

126
00:04:35,825 --> 00:04:37,690
to change the ID frequently,

127
00:04:37,690 --> 00:04:39,560
or even in every packet.

128
00:04:39,560 --> 00:04:41,048
Therefore packet numbers become

129
00:04:41,048 --> 00:04:42,536
the next best correlator,

130
00:04:42,540 --> 00:04:44,405
especially when sending 32 bits

131
00:04:44,405 --> 00:04:46,270
 on the long lived connection. 

132
00:04:46,270 --> 00:04:49,666
Hence the need to encrypt them.

133
00:04:49,670 --> 00:04:50,998
 To create a QUIC packet

134
00:04:50,998 --> 00:04:52,990
we start from a full packet

135
00:04:53,057 --> 00:04:54,689
number N and the payload M.

136
00:04:54,690 --> 00:04:56,255
The packet number is combined

137
00:04:56,255 --> 00:04:58,170
 with the static IV to form a nonce

138
00:04:58,170 --> 00:05:00,165
used to encrypt M to protect the

139
00:05:00,165 --> 00:05:01,918
integrity of the message headers.

140
00:05:01,920 --> 00:05:04,386
It is also included as additional

141
00:05:04,386 --> 00:05:07,429
 authenticated data in for the encryption of M. 

142
00:05:07,430 --> 00:05:09,368
 To avoid sending H in plaintext, 

143
00:05:09,370 --> 00:05:11,323
 QUIC's idea is to steal a block 

144
00:05:11,323 --> 00:05:12,940
of the payload ciphertext,

145
00:05:12,940 --> 00:05:17,008
 C to use as an input to a PRF. 

146
00:05:17,010 --> 00:05:18,322
 This yields a mask, 

147
00:05:18,322 --> 00:05:20,500
which can be used to encrypt H.

148
00:05:20,500 --> 00:05:20,816
However,

149
00:05:20,816 --> 00:05:23,344
 because H prime must be decrypted before C

150
00:05:23,350 --> 00:05:25,408
it is important that the position

151
00:05:25,408 --> 00:05:27,955
of the sample does not depend on

152
00:05:27,955 --> 00:05:30,157
 Ln when H' and C are concatenated. 

153
00:05:30,160 --> 00:05:31,975
This is easily achieved by

154
00:05:31,975 --> 00:05:34,000
 sampling from the end of C. 

155
00:05:34,000 --> 00:05:34,348
However,

156
00:05:34,348 --> 00:05:36,088
 QUIC does something different instead, 

157
00:05:36,090 --> 00:05:38,890
samples after 32 minus Ln bits of C.

158
00:05:41,530 --> 00:05:44,116
In this paper we address 3

159
00:05:44,116 --> 00:05:45,840
 classes of security properties.

160
00:05:45,840 --> 00:05:47,018
 First functional correctness. 

161
00:05:47,019 --> 00:05:48,984
 We provide exhaustive formal 

162
00:05:48,984 --> 00:05:50,847
 specifications of QUIC packet encryption 

163
00:05:50,848 --> 00:05:53,214
and of the pre conditions under which

164
00:05:53,273 --> 00:05:55,269
 an encrypted packets successfully, 

165
00:05:55,270 --> 00:05:57,669
decrypts to its original payload.

166
00:05:57,670 --> 00:05:59,700
Then we model the cryptographic

167
00:05:59,700 --> 00:06:00,918
security of packets,

168
00:06:00,920 --> 00:06:02,664
stream encryption and reduce

169
00:06:02,664 --> 00:06:04,844
 it using a formally verified 

170
00:06:04,844 --> 00:06:07,009
code-bases proof to standard

171
00:06:07,010 --> 00:06:09,969
PRF and authenticated encryption assumptions.

172
00:06:09,970 --> 00:06:12,135
 Finally, we present a low-level 

173
00:06:12,135 --> 00:06:13,867
implementation that extracts too

174
00:06:13,867 --> 00:06:16,311
 high performance C codes that is

175
00:06:16,311 --> 00:06:18,251
 provably safe and correct with 

176
00:06:18,320 --> 00:06:20,650
respect to our formal specification.

177
00:06:20,650 --> 00:06:22,770
We start with the specification

178
00:06:22,770 --> 00:06:24,466
 of QUIC packet formats. 

179
00:06:24,470 --> 00:06:26,200
 For that we rely on EverParse, a

180
00:06:26,200 --> 00:06:27,930
 library of Verified F* parser

181
00:06:27,993 --> 00:06:29,661
combinators that can express

182
00:06:29,661 --> 00:06:31,746
secure parsers, that is parsers for

183
00:06:31,750 --> 00:06:33,278
 which every valid input has 

184
00:06:33,278 --> 00:06:34,806
 a unique serialization

185
00:06:34,810 --> 00:06:37,030
 Although EverParse combinators are higher 

186
00:06:37,030 --> 00:06:39,303
 order, their compositions

187
00:06:39,303 --> 00:06:41,128
supports inlining and extraction

188
00:06:41,128 --> 00:06:42,849
 to highly efficient zero-copy

189
00:06:42,850 --> 00:06:45,298
parsers in C. 

190
00:06:45,300 --> 00:06:46,560
 To express QUIC formats, 

191
00:06:46,560 --> 00:06:48,848
 we need to extend EverParse with

192
00:06:48,848 --> 00:06:50,846
 new combinators for bit fields and bit

193
00:06:50,846 --> 00:06:52,630
 sum types, which capture bit-level

194
00:06:52,630 --> 00:06:54,440
 dependencies during parsing such 

195
00:06:54,440 --> 00:06:57,322
as the most significant bits of flags

196
00:06:57,322 --> 00:07:00,010
to indicate long or short headers.

197
00:07:00,010 --> 00:07:02,257
 As the first Lemma we prove 

198
00:07:02,257 --> 00:07:03,959
 the correctness of the parser

199
00:07:03,960 --> 00:07:05,897
assuming the packet recipient knows in 

200
00:07:05,898 --> 00:07:08,239
 advance the length of its own connection ID, 

201
00:07:08,240 --> 00:07:10,208
an assumption that may look trivial,

202
00:07:10,210 --> 00:07:12,751
 but in fact rules out some 

203
00:07:12,751 --> 00:07:14,744
 unsafe encodings for connection 

204
00:07:14,744 --> 00:07:17,628
ID lengths, such as NULL termination.

205
00:07:17,630 --> 00:07:20,042
 Then we prove the non-malleability 

206
00:07:20,042 --> 00:07:21,248
of header encoding,

207
00:07:21,250 --> 00:07:22,906
which guarantees uniqueness

208
00:07:22,906 --> 00:07:24,010
of representation.

209
00:07:24,010 --> 00:07:24,478
Surprisingly,

210
00:07:24,478 --> 00:07:27,286
we initially failed to complete this

211
00:07:27,286 --> 00:07:30,803
on draft 13 of the standards 'cause it

212
00:07:30,803 --> 00:07:33,979
 turned out that earlier drafts had a weakness. 

213
00:07:33,980 --> 00:07:35,452
In the previous versions,

214
00:07:35,452 --> 00:07:37,292
 the packet number was 

215
00:07:37,292 --> 00:07:38,318
 encoded as the two most

216
00:07:38,320 --> 00:07:40,683
significant bits of the packet 

217
00:07:40,684 --> 00:07:42,696
 number rather than the two 

218
00:07:42,696 --> 00:07:44,880
least significant bits of the flags.

219
00:07:44,880 --> 00:07:45,193
Remarkably,

220
00:07:45,193 --> 00:07:47,070
 this malleability in the format 

221
00:07:47,071 --> 00:07:48,945
of short headers leads to an

222
00:07:48,945 --> 00:07:50,405
actual attack against the security

223
00:07:50,405 --> 00:07:51,989
of packet number encryption.

224
00:07:51,990 --> 00:07:53,278
Using another weakness that

225
00:07:53,278 --> 00:07:54,888
 we found in earlier drafts

226
00:07:54,890 --> 00:07:57,092
which is the ability for a

227
00:07:57,092 --> 00:07:59,229
man in the middle attack.

228
00:07:59,230 --> 00:08:02,416
 to alter the server Connection ID 

229
00:08:02,416 --> 00:08:05,620
without being detected by the client.

230
00:08:05,620 --> 00:08:07,630
Using this it's possible to truncates

231
00:08:07,630 --> 00:08:09,335
the clients packet number such

232
00:08:09,335 --> 00:08:11,152
 that the server can still decrypt the 

233
00:08:11,153 --> 00:08:13,252
 packet. While this attack was fixed 

234
00:08:13,252 --> 00:08:14,944
by the change to short header format,

235
00:08:14,950 --> 00:08:17,368
 The problem of unauthenticated connection 

236
00:08:17,368 --> 00:08:20,200
ID actually proved a lot harder to fix.

237
00:08:20,200 --> 00:08:22,834
It took some 14 drafts

238
00:08:22,834 --> 00:08:24,590
 to eventually convince the IETF. 

239
00:08:24,590 --> 00:08:27,246
that all connection IDs

240
00:08:27,246 --> 00:08:29,238
should be authentic.

241
00:08:29,240 --> 00:08:31,120
To complete our formal specification,

242
00:08:31,120 --> 00:08:32,995
we prove the main correctness

243
00:08:32,995 --> 00:08:34,495
of full packets decryption,

244
00:08:34,500 --> 00:08:36,294
 not that even legitimately encrypted

245
00:08:36,294 --> 00:08:39,323
 packets may fail to decrypt when

246
00:08:39,323 --> 00:08:41,263
received outside the recipients windows.

247
00:08:41,270 --> 00:08:43,418
Hence the precondition in

248
00:08:43,418 --> 00:08:45,029
the correctness lemma.

249
00:08:45,030 --> 00:08:45,391
Again,

250
00:08:45,391 --> 00:08:47,557
we also initially failed to prove

251
00:08:47,557 --> 00:08:50,193
this lemma because of a mistake in

252
00:08:50,193 --> 00:08:52,058
the QUIC specification allowing an

253
00:08:52,058 --> 00:08:54,100
underflow when computing pn - h

254
00:08:54,100 --> 00:08:56,340
 This was fixed in draft 24 and 

255
00:08:56,340 --> 00:08:58,996
after the fix we were able to

256
00:08:58,996 --> 00:09:00,936
 prove the correctness lemma for 

257
00:09:01,018 --> 00:09:03,988
packet encryption as stated previously.

258
00:09:03,990 --> 00:09:05,190
Moving on from correctness,

259
00:09:05,190 --> 00:09:06,690
 we know try to model

260
00:09:06,690 --> 00:09:08,550
the cryptographic security

261
00:09:08,550 --> 00:09:10,038
of packets encryption.

262
00:09:10,040 --> 00:09:12,040
We follow the Bellare-Rogaway methodology

263
00:09:12,040 --> 00:09:14,516
 of code-based game-playing proofs 

264
00:09:14,517 --> 00:09:16,185
applied to indistinguishability games

265
00:09:16,185 --> 00:09:19,103
where an adversary must guess if he's

266
00:09:19,103 --> 00:09:20,631
 interacting with the real construction 

267
00:09:20,631 --> 00:09:23,660
or with its idealized functionality.

268
00:09:23,660 --> 00:09:25,208
 For instance, a standard definition 

269
00:09:25,208 --> 00:09:26,756
 for authenticated encryption

270
00:09:26,756 --> 00:09:28,688
 security uses a table index by nonce, 

271
00:09:28,690 --> 00:09:30,365
 ciphertext, and header to implement

272
00:09:30,365 --> 00:09:31,370
encryption and decryption.

273
00:09:31,370 --> 00:09:33,729
 We first modify the basic AE definition 

274
00:09:33,729 --> 00:09:36,052
to account for the fact that the

275
00:09:36,052 --> 00:09:38,336
 least significant bits of the nonce are

276
00:09:38,336 --> 00:09:40,406
 now part of the random ciphertext, 

277
00:09:40,410 --> 00:09:42,230
 whereas the most significant bits 

278
00:09:42,230 --> 00:09:44,435
 are now an additional input to 

279
00:09:44,435 --> 00:09:46,337
 the decryption oracle used to find 

280
00:09:46,337 --> 00:09:48,120
 the correct nonce in the table. 

281
00:09:50,480 --> 00:09:52,358
 Pushing this definition further, 

282
00:09:52,360 --> 00:09:54,832
we can now turn that to a stream of

283
00:09:54,832 --> 00:09:56,495
encrypted packets using the states

284
00:09:56,495 --> 00:09:58,457
 of the decryptor to reconstruct the 

285
00:09:58,457 --> 00:10:00,355
most significant bits and the

286
00:10:00,355 --> 00:10:02,240
 counter for generating the nonce.

287
00:10:02,240 --> 00:10:03,820
 It's worth noting that this 

288
00:10:03,820 --> 00:10:05,843
definition is specific to the dynamic

289
00:10:05,843 --> 00:10:08,152
 sliding window method of QUIC for 

290
00:10:08,153 --> 00:10:09,308
 reconstructing packet numbers. 

291
00:10:09,310 --> 00:10:11,428
Fischling et al. have generalized our

292
00:10:11,428 --> 00:10:13,333
definition to capture a broader

293
00:10:13,333 --> 00:10:15,468
class of validity conditions which

294
00:10:15,468 --> 00:10:17,641
can be expressed modularly from

295
00:10:17,642 --> 00:10:19,226
the security of encryption.

296
00:10:19,230 --> 00:10:21,430
The main result of our paper is a

297
00:10:21,430 --> 00:10:23,339
 reduction of QUIC packet encryption

298
00:10:23,340 --> 00:10:25,505
security (parameterized by an AEAD scheme

299
00:10:25,510 --> 00:10:30,165
and a cipher) to standard PRF and AE

300
00:10:30,170 --> 00:10:31,958
 assumptions over its parameters. 

301
00:10:31,958 --> 00:10:34,193
While some nonce-hiding constructions

302
00:10:34,193 --> 00:10:36,319
 appeared in the cryptographic literature, 

303
00:10:36,320 --> 00:10:38,995
including some variants that are

304
00:10:38,995 --> 00:10:42,130
 similar to the QUIC construction in 

305
00:10:42,130 --> 00:10:45,082
a recent paper by Bellare et al. at CRYPTO'19

306
00:10:45,090 --> 00:10:47,155
our result is the first to directly 

307
00:10:47,155 --> 00:10:48,040
apply to quick,

308
00:10:48,040 --> 00:10:50,596
and it's proof is almost entirely

309
00:10:50,596 --> 00:10:51,448
formally verified.

310
00:10:51,450 --> 00:10:53,018
To prove this theorem,

311
00:10:53,018 --> 00:10:54,978
we fully implement the ideal

312
00:10:54,978 --> 00:10:56,950
 functionality of nonce-hiding packets 

313
00:10:56,951 --> 00:10:58,851
stream encryption based on idealized

314
00:10:58,851 --> 00:11:01,040
 PRF and authenticated encryption. 

315
00:11:01,040 --> 00:11:01,575
For instance,

316
00:11:01,576 --> 00:11:03,452
packet decryption starts with a lookup

317
00:11:03,452 --> 00:11:05,506
 in the PRF table over the sample 

318
00:11:05,506 --> 00:11:07,659
 from the ciphertext and if an entry is found

319
00:11:07,660 --> 00:11:10,271
it's turned to a packet number and 

320
00:11:10,271 --> 00:11:12,306
 nonce reconstructed from the states to 

321
00:11:12,307 --> 00:11:14,680
 look up in the AE idealization table

322
00:11:14,680 --> 00:11:16,976
There is however a quirk in the proof

323
00:11:16,980 --> 00:11:19,572
 What if 2 separate ciphertexts have the same sample? 

324
00:11:19,580 --> 00:11:21,248
We must exclude such conditions 

325
00:11:21,248 --> 00:11:22,740
 with up to bad reasoning

326
00:11:22,740 --> 00:11:26,080
 hence the quadratic term in the theorem.

327
00:11:26,080 --> 00:11:28,435
Having specified the construction and

328
00:11:28,435 --> 00:11:30,790
 proven its security and cryptographic 

329
00:11:30,860 --> 00:11:33,492
 safety, the last step is to 

330
00:11:33,492 --> 00:11:34,620
 create a usable implementation. 

331
00:11:34,620 --> 00:11:35,506
For this,

332
00:11:35,506 --> 00:11:38,607
 we rely on the verified EverCrypt

333
00:11:38,607 --> 00:11:41,247
provider which comes with common

334
00:11:41,248 --> 00:11:43,372
 specifications and verified implementations

335
00:11:43,372 --> 00:11:45,988
 in C and assembly for most primitives. 

336
00:11:45,990 --> 00:11:48,270
To use our low level implementation,

337
00:11:48,270 --> 00:11:50,531
we must first allocate the stream

338
00:11:50,532 --> 00:11:52,861
 states starting from the traffic secret

339
00:11:52,861 --> 00:11:55,105
output by the TLS handshake.

340
00:11:55,110 --> 00:11:57,612
 This step involves multiple key 

341
00:11:57,612 --> 00:12:00,216
 derivations to generate the static IV

342
00:12:00,216 --> 00:12:02,808
AEAD and cipher keys from the construction. 

343
00:12:02,810 --> 00:12:05,231
 Then the state can be used to encrypt

344
00:12:05,231 --> 00:12:07,388
and decrypt full packets, represented by

345
00:12:07,390 --> 00:12:09,617
their header and payload.

346
00:12:09,620 --> 00:12:11,225
 Note that to guarantee that 

347
00:12:11,225 --> 00:12:12,188
 our implementation of packet

348
00:12:12,188 --> 00:12:13,699
decryption is constant time,

349
00:12:13,700 --> 00:12:15,772
we use abstract types for the length and 

350
00:12:15,772 --> 00:12:17,780
 value of decrypted packet numbers, 

351
00:12:17,780 --> 00:12:19,664
at least for the purpose of

352
00:12:19,664 --> 00:12:20,606
packet number decryption,

353
00:12:20,610 --> 00:12:22,338
 which proves confidentiality 

354
00:12:22,338 --> 00:12:24,065
by type parametricity.

355
00:12:24,070 --> 00:12:25,258
An interesting technical question

356
00:12:25,258 --> 00:12:27,436
is so how to relate the low

357
00:12:27,436 --> 00:12:29,116
level implementation to the high

358
00:12:29,116 --> 00:12:30,124
level security model?

359
00:12:30,130 --> 00:12:32,790
Which of course uses our formal specification

360
00:12:32,790 --> 00:12:35,569
 as its non idealized construction. 

361
00:12:35,570 --> 00:12:37,520
For this is the first step 

362
00:12:37,520 --> 00:12:39,370
is to preserve the course.

363
00:12:39,370 --> 00:12:41,046
to low level functions, 

364
00:12:41,046 --> 00:12:43,560
but replace secrets arguments with constants.

365
00:12:43,560 --> 00:12:44,290
Of course,

366
00:12:44,290 --> 00:12:46,115
 this breaks functional correctness, 

367
00:12:46,120 --> 00:12:48,576
so it has to be patched by replacing

368
00:12:48,576 --> 00:12:51,347
the return value with the one computed

369
00:12:51,347 --> 00:12:53,437
from calling the pure specification,

370
00:12:53,440 --> 00:12:56,638
which has no observable side effects.

371
00:12:56,640 --> 00:12:58,572
 Then calls to the spec can

372
00:12:58,572 --> 00:13:00,646
 be replaced which calls to the model

373
00:13:00,646 --> 00:13:02,445
with idealization turned off. 

374
00:13:02,450 --> 00:13:05,580
 And finally idealization is enabled. 

375
00:13:05,580 --> 00:13:07,656
On its own an implementation of

376
00:13:07,656 --> 00:13:09,439
 QUIC packet encryption has limited value

377
00:13:09,440 --> 00:13:11,714
Therefore we also implement the rest

378
00:13:11,714 --> 00:13:14,234
 of the QUIC transport in a subset 

379
00:13:14,234 --> 00:13:16,106
 of Dafny that extracts to C++, 

380
00:13:16,110 --> 00:13:18,228
and we formally verify that the

381
00:13:18,228 --> 00:13:19,969
resulting implementation is memory safe.

382
00:13:19,970 --> 00:13:22,427
 We plug in the miTLS handshake

383
00:13:22,430 --> 00:13:23,483
are our verified QUIC

384
00:13:23,483 --> 00:13:25,939
record layer in order to run benchmarks

385
00:13:25,940 --> 00:13:27,464
and test interoperability

386
00:13:27,464 --> 00:13:28,988
with other implementations.

387
00:13:28,990 --> 00:13:32,056
We find that using the VALE

388
00:13:32,060 --> 00:13:36,224
 implementation of AES and AES-GCM

389
00:13:36,230 --> 00:13:37,520
 our verified implementation 

390
00:13:37,520 --> 00:13:38,810
of packet encryption,

391
00:13:38,810 --> 00:13:41,516
 can sustain up to two GB per 

392
00:13:41,516 --> 00:13:44,405
 second of QUIC data throughput

393
00:13:44,405 --> 00:13:47,363
the standard MTU of 1400 bytes.

394
00:13:47,370 --> 00:13:48,344
 In a more concrete

395
00:13:48,344 --> 00:13:50,779
benchmark testing for file transfer 

396
00:13:50,779 --> 00:13:53,268
through the full application stack

397
00:13:53,268 --> 00:13:56,572
 of QUIC, we can achieve 80 

398
00:13:56,572 --> 00:13:59,676
 megabytes per second of throughput.

399
00:13:59,680 --> 00:14:02,000
While this figure may seem low in

400
00:14:02,000 --> 00:14:03,808
comparison to the synthetic test,

401
00:14:03,810 --> 00:14:05,862
Most of the heavy overheads appears

402
00:14:05,862 --> 00:14:07,990
 in the Dafny QUIC implementation. 

403
00:14:07,990 --> 00:14:10,108
And we actually note that even

404
00:14:10,108 --> 00:14:11,949
 native C implementations of QUIC, 

405
00:14:11,950 --> 00:14:13,514
 such as ngtcp2, 

406
00:14:13,514 --> 00:14:15,469
do not actually perform much

407
00:14:15,469 --> 00:14:17,527
better with 100 megabytes per

408
00:14:17,527 --> 00:14:19,915
second at the time of testing.

409
00:14:19,920 --> 00:14:20,483
Of course,

410
00:14:20,484 --> 00:14:23,360
this was an much older draft of the standard,

411
00:14:23,360 --> 00:14:25,820
and we expect more recent

412
00:14:25,820 --> 00:14:27,788
versions to perform better.

413
00:14:27,790 --> 00:14:28,954
So to conclude,

414
00:14:28,954 --> 00:14:30,894
 we have formally specified QUIC

415
00:14:30,894 --> 00:14:33,044
 packet encryption and proved its

416
00:14:33,044 --> 00:14:34,784
correctness and cryptologic security.

417
00:14:34,790 --> 00:14:37,430
We found several important weaknesses and

418
00:14:37,430 --> 00:14:39,738
 vulnerabilities in the QUIC standard

419
00:14:39,740 --> 00:14:41,800
We have a fully verified,

420
00:14:41,800 --> 00:14:42,262
safe,

421
00:14:42,263 --> 00:14:44,578
secure and correct low level

422
00:14:44,578 --> 00:14:46,943
 implementation for packet encryption

423
00:14:46,943 --> 00:14:48,679
and memory safe implementation

424
00:14:48,679 --> 00:14:51,569
 of the rest of QUIC.

425
00:14:51,569 --> 00:14:53,829
Of course all our code is open 

426
00:14:53,830 --> 00:14:56,848
source and available on GitHub.

427
00:14:56,848 --> 00:14:58,192
Thank you.

