1
00:00:00,000 --> 00:00:04,640
hello everyone my name is Eduardo Blázquez and i'm 
going to present our research about FOTA software.  

2
00:00:05,200 --> 00:00:09,360
FOTA is the term given to the software that 
updates the firmware and system components.  

3
00:00:10,080 --> 00:00:13,840
If you have an Android device, you are 
probably familiar with these images.  

4
00:00:13,840 --> 00:00:19,120
Updating is an essential process for every system. 
FOTA or Firmware Over-The-Air is a critical  

5
00:00:19,120 --> 00:00:23,680
application that manages the update process in 
Android. At a first glance, it's not easy to  

6
00:00:23,680 --> 00:00:28,400
know who is responsible for updating the software 
in your phones, leading to an even more fragmented  

7
00:00:28,400 --> 00:00:34,480
ecosystem. The update process affects 
the supply chain making it dynamic. Thus, the  

8
00:00:34,480 --> 00:00:39,440
apps that we might think that are pre-installed, 
could be the result of a posterior system update.  

9
00:00:40,960 --> 00:00:46,240
There are known cases of problems reported both 
in the update software as well as in the  

10
00:00:46,240 --> 00:00:51,440
the android supply chain. For example various 
FOTA apps have been labeled as potentially  

11
00:00:51,440 --> 00:00:57,440
unwanted software for stealing user information 
or installing unwanted apps. Also, the supply chain  

12
00:00:57,440 --> 00:01:03,120
process might suffer from cyber attacks, allowing 
the adversaries to control the update process, for  

13
00:01:03,120 --> 00:01:07,520
example to distribute malware through software 
updates or by corrupted application markets.  

14
00:01:08,880 --> 00:01:12,800
This motivates us to analyze and 
understand the updated ecosystem in Android.  

15
00:01:13,920 --> 00:01:19,600
Concretely, we analyze this ecosystem by first 
providing mechanisms to detect apps with FOTA 

16
00:01:19,600 --> 00:01:24,800
capabilities and second, by analyzing these apps 
and understanding the stakeholders that are  

17
00:01:24,800 --> 00:01:29,520
involved, the capabilities of these apps (with 
a special focus on the Security and Privacy  

18
00:01:29,520 --> 00:01:33,679
implications), and the actual behavior 
observed in the while on real devices.  

19
00:01:35,120 --> 00:01:38,480
It is known that the Android 
supply chain is a complex ecosystem.  

20
00:01:39,280 --> 00:01:44,160
Original Equipment Manufacturers build devices 
combining different System-on-Chip components  

21
00:01:44,160 --> 00:01:49,280
with Android source code, which is publicly 
available. These devices might go through  

22
00:01:49,280 --> 00:01:54,960
third-party entities, who ship devices to final 
users. At each step, different stakeholders can  

23
00:01:54,960 --> 00:01:59,919
pre-install their own software for example to 
update the firmware. Thus, once the devices are  

24
00:01:59,920 --> 00:02:06,960
with the final users, new software versions can be 
distributed. Typically fota software executes when  

25
00:02:06,960 --> 00:02:13,600
the device is in an idle state, charging, and with 
wi-fi connection. It first request information of  

26
00:02:13,600 --> 00:02:19,040
available updates to a server. Commonly the request 
includes the model and the version of the device.  

27
00:02:19,840 --> 00:02:23,520
The server answers to the device 
with information of available updates,  

28
00:02:23,520 --> 00:02:28,640
and also the links to the download servers. If 
an update is available FOTA software might  

29
00:02:28,640 --> 00:02:33,440
notify the user, and in some cases, the user 
can decide to apply them now or postpone it.  

30
00:02:34,960 --> 00:02:40,000
If so, the device will query the download server 
for the update package. And the server answers the  

31
00:02:40,000 --> 00:02:45,680
device with a zip file which contain all necessary 
resources. While not mandatory fota can verify the  

32
00:02:45,680 --> 00:02:50,640
integrity of the update checking its certificate, 
against a set of certificates stored on the device.  

33
00:02:51,520 --> 00:02:56,320
Finally the FOTA applies the update. Depending 
on the actual method used the device  

34
00:02:56,320 --> 00:03:01,440
will need a reboot or not. Please refer to the 
paper for further details of the update process.  

35
00:03:02,960 --> 00:03:07,280
For this research we use two different 
data sets. First FirmwareScanner that  

36
00:03:07,280 --> 00:03:10,960
contains applications obtained from 
the system partition of real devices,  

37
00:03:10,960 --> 00:03:16,560
and also device metadata. This data set is used 
for the static analysis of the applications.  

38
00:03:17,200 --> 00:03:21,359
We refer to the paper by Gamba and others for 
more information of the collection process.  

39
00:03:22,080 --> 00:03:25,520
The second data set contains telemetry 
information from NortonLifeLock,  

40
00:03:26,080 --> 00:03:31,920
in form of reputation and installation logs. This 
data set is used for studying information about  

41
00:03:31,920 --> 00:03:38,000
the actual installs being made by FOTA apps. Since 
the information comes directly from user devices,  

42
00:03:38,000 --> 00:03:44,800
it offers a more reliable picture than running 
the FOTA apps in a sandbox or emulator. In order  

43
00:03:44,800 --> 00:03:49,440
to detect FOTA apps we have developed a static 
analysis tool based on Androguard framework.  

44
00:03:49,440 --> 00:03:53,840
This tool looks for different signals that are 
present in software with installation capabilities.  

45
00:03:54,720 --> 00:04:00,400
Concretely we search for four signals specific of
FOTA software. These are the method used for verifying  

46
00:04:00,400 --> 00:04:05,760
the package, two methods for applying the update 
through Android API and finally the presence of  

47
00:04:05,760 --> 00:04:10,320
a couple of strings that, when 
being used together, are used to apply the update  

48
00:04:10,320 --> 00:04:16,480
manually. The analysis pipeline starts with the 
collection of system partition from users' devices,  

49
00:04:16,480 --> 00:04:22,480
using the FirmwareScanner application. We receive 
and store them, avoiding duplicates by checking the  

50
00:04:22,480 --> 00:04:29,600
applications' hash. This gave us a data set of more 
than 400 000 applications. We then apply our tool,  

51
00:04:29,600 --> 00:04:34,400
FotaFinder, on each one of the applications 
to classify them either as FOTA or other app.  

52
00:04:35,200 --> 00:04:40,159
Also, if the application is only in the pre-compiled 
ODEX format, the file is passed through a

53
00:04:40,160 --> 00:04:45,840
tool named "DEXtripador", which extracts the 
DEX file and returns it back to FotaFinder  

54
00:04:45,840 --> 00:04:51,119
to apply the heuristics. Finally, if the 
tool detects the application as a FOTA

55
00:04:51,120 --> 00:04:57,440
is stored at database together with additional 
metadata from FotaFinder. To validate  

56
00:04:57,440 --> 00:05:01,760
our method, we manually analyzed a subset 
of the discovered FOTAs. We obtained no

57
00:05:01,760 --> 00:05:06,640
false positives in the analysis subset. Thus, 
we ensure that all analyzed apps are indeed  

58
00:05:06,640 --> 00:05:13,520
FOTAs. Attribution issues are harder to tackle in 
pre-installed apps, where no developer metadata is  

59
00:05:13,520 --> 00:05:19,760
found on the app nor in app stores. Besides 
the limitations, to identify FOTA developers  

60
00:05:19,760 --> 00:05:26,560
we analyze both the package 
names and signing certificates of FOTAs, assuming  

61
00:05:26,560 --> 00:05:32,160
that the company that signs the package is the one 
behind its deployment. We followed a semi-manual  

62
00:05:32,160 --> 00:05:38,320
snowball sampling method through web searches 
to classify the companies into four categories:  

63
00:05:38,320 --> 00:05:44,560
Original Equipment Manufacturers, System-on-Chip 
manufacturers, Mobile Network Operators, and Third  

64
00:05:44,560 --> 00:05:50,880
party developers. Here you can see the percentage 
of FOTA apps we discovered from each category.  

65
00:05:50,880 --> 00:05:58,400
We remove from these figures 15% of FOTA apps that 
belong to two popular Google packages. And also,  

66
00:05:58,400 --> 00:06:03,760
12% of FOTA apps that remain uncategorized, 
since we could not find any information from them.  

67
00:06:05,280 --> 00:06:10,960
This figure shows the distribution of FOTA types 
across devices in y-axis you have the number of  

68
00:06:10,960 --> 00:06:17,919
devices in log scale, and in x-axis the different 
distribution of FOTA categories. While most of  

69
00:06:17,920 --> 00:06:24,960
the devices contain just one FOTA, mostly from OEM. 
We found up to five FOTAs in the same device.  

70
00:06:24,960 --> 00:06:30,000
When we dig deeper in these, we observe different 
categories combinations in the plot. This confirms  

71
00:06:30,000 --> 00:06:34,400
that the update ecosystem is more fragmented, 
and also affects the transparency of the supply  

72
00:06:34,400 --> 00:06:40,400
chain, and hinders accountability. Indeed, in cases 
where malicious installations are applied, due to  

73
00:06:40,400 --> 00:06:45,039
the presence of different FOTAs in the device, it 
would be difficult to track which one installed  

74
00:06:45,040 --> 00:06:51,680
the malicious component. The lack of control of 
this ecosystem also leads to security implications.  

75
00:06:52,320 --> 00:06:57,280
During our research we found 40 FOTA apps that 
were signed using publicly available default test  

76
00:06:57,280 --> 00:07:03,440
keys. This vulnerability makes that any application 
signed with this certificate can get the same  

77
00:07:03,440 --> 00:07:09,600
sharedUserID, or even replace packages, 
obtaining the privileged capabilities of a FOTA.

78
00:07:10,400 --> 00:07:14,000
These two tables shows the name of 
affected packages and the brands,  

79
00:07:14,000 --> 00:07:17,200
according to the fingerprint from the 
device where these packages were found.  

80
00:07:18,240 --> 00:07:23,520
Interesting cases of FOTA packages signed with 
test keys are adups and redstone, which have  

81
00:07:23,520 --> 00:07:31,280
been linked in public reports with other security 
abuses. We also wanted to look at the information  

82
00:07:31,280 --> 00:07:37,520
that FOTA apps access and possible send to their 
servers. To do this, we used a pipeline to do taint

83
00:07:37,520 --> 00:07:43,039
analysis based on tools like Flowdroid or Amandroid
for discovering possible data leakages from FOTA

84
00:07:43,040 --> 00:07:49,440
applications. The results shows type of data 
accessed as well as behaviors from FOTA software.

85
00:07:51,600 --> 00:07:57,360
Some of these data fields are necessary for a 
FOTA to offer a specific or targeted updates,  

86
00:07:57,360 --> 00:08:02,800
such as particular software version or current 
country. Other behaviors are used for checking  

87
00:08:02,800 --> 00:08:08,080
if it's possible to request and applied updates, 
for example, those related to network connectivity.  

88
00:08:09,120 --> 00:08:14,160
However, we also observe accesses that 
could be privacy intrusive, for example  

89
00:08:14,160 --> 00:08:21,200
unique identifiers, installed apps or logs, together 
with behaviors like SMS sending or phone calls.

90
00:08:23,440 --> 00:08:29,440
In the last part of our analysis we use NortonLifeLock 
telemetry data from real user devices  

91
00:08:29,440 --> 00:08:36,000
to analyze which applications are installed by 
FOTAs. From the total 2013 FOTA apps we only  

92
00:08:36,000 --> 00:08:39,840
found installation events for 20 FOTAs 
in the reputation and installation logs.  

93
00:08:40,640 --> 00:08:45,040
Since the telemetry is collected through the 
PackageInstaller, the reason of the low coverage  

94
00:08:45,040 --> 00:08:48,880
might be due to the fact that FOTA updates 
are installed through different mechanisms.  

95
00:08:49,440 --> 00:08:52,400
Also, other custom methods for 
installing apps might be used.  

96
00:08:53,360 --> 00:08:58,320
Despite this limitation, using telemetry data is 
an advantage for getting information of FOTAs 

97
00:08:58,320 --> 00:09:03,120
in runtime, and we were able to 
analyze nearly 1 million installation events.  

98
00:09:04,960 --> 00:09:09,360
Indeed, the analysis of these events 
allow us to observe interesting behaviors.  

99
00:09:09,360 --> 00:09:13,360
We found evidence of FOTA software being 
used for intrusive purposes like PPI, 

100
00:09:14,000 --> 00:09:19,760
for example, as part of a commercial agreement 
between OEMs and third-party developers. Due to  

101
00:09:19,760 --> 00:09:24,080
the capabilities of FOTA apps, these installations 
could happen without any user consent.  

102
00:09:24,880 --> 00:09:29,360
From those installations we 
looked for packages considered potentially  

103
00:09:29,360 --> 00:09:34,560
unwanted programs or malware. Concretely, for 
each package we queried VirusTotal and we  

104
00:09:34,560 --> 00:09:41,280
consider malicious packages those flagged by at 
least four Anti-Virus engines. 7 FOTAs out of 20,  

105
00:09:41,280 --> 00:09:47,439
install at least one unwanted application. Here we 
show some interesting cases. As it can be observed,  

106
00:09:47,440 --> 00:09:52,640
packages like com.android.settings or com.qiku.android.ota 
have an alarming high percentage  

107
00:09:52,640 --> 00:09:57,840
of unwanted apps installed, concretely 
35 percent and 92 percent respectively.  

108
00:09:59,600 --> 00:10:05,200
We used AVClass with the malicious installations 
with AV labels available for extracting  

109
00:10:05,200 --> 00:10:13,200
name of the unwanted software families. From PUP we 
found samples from adware, smsred and hiddad used  

110
00:10:13,200 --> 00:10:20,240
commonly for collecting user information. While 
from malware families we found triada, necro and guerilla,  

111
00:10:20,800 --> 00:10:27,599
this last one is able to send sms messages without 
users knowledge. In summary: we see that adding  

112
00:10:27,600 --> 00:10:33,440
stakeholders in FOTA just make the ecosystem more 
complex and fragmented. The use of FOTA apps makes  

113
00:10:33,440 --> 00:10:39,280
the supply chain dynamic during the life cycle 
of the device, since system apps present in a  

114
00:10:39,280 --> 00:10:43,920
device could be pre-installed or installed and 
patched at a later stage as part of an update.  

115
00:10:44,640 --> 00:10:50,319
Our static analysis of the apps allowed us to 
observe potential privacy-intrusive practices. Also  

116
00:10:50,320 --> 00:10:55,440
thanks to the telemetry dataset, we confirmed such 
practices and discovered malicious installations  

117
00:10:55,440 --> 00:11:02,560
on devices being made by some FOTA apps. To wrap 
up, we recall that security updates  

118
00:11:02,560 --> 00:11:08,400
have always been an issue in the Android ecosystem. 
Google is aware of this problem, and in the last  

119
00:11:08,400 --> 00:11:12,959
years it has implemented two projects aimed 
at improving the lifecycle of security updates.  

120
00:11:13,520 --> 00:11:19,439
Project Treble makes a better separation between 
AOSP code and vendor specific components. Project  

121
00:11:19,440 --> 00:11:25,760
Mainline allows to apply AOSP updates directly 
from google play which reduces patching delays.  

122
00:11:27,360 --> 00:11:33,280
we believe this is a step in the right direction 
direction but does not fully solve the issues  

123
00:11:33,280 --> 00:11:38,400
identified in our work, which emerge from the 
complexities of the supply chain and the many  

124
00:11:38,400 --> 00:11:44,880
stakeholders that are involved. While this 
is not an easy to solve problem we have a  

125
00:11:44,880 --> 00:11:50,960
serie of recommendations for improving update 
ecosystem. First, we propose that FOTA developers  

126
00:11:50,960 --> 00:11:55,920
should follow best practices on FOTA development, 
provided in the Android official documentation,  

127
00:11:55,920 --> 00:12:00,800
for example avoiding the use of test keys or 
verifying the packages before they are installed.  

128
00:12:01,680 --> 00:12:06,800
Second, it is needed to increase the 
transparency of FOTA apps. We found that such  

129
00:12:06,800 --> 00:12:12,640
critical updates are commonly implemented by means 
of various FOTA apps installed in the same device,  

130
00:12:12,640 --> 00:12:17,680
with vague attribution signals. This hurts 
accountability in case that bad practices  

131
00:12:17,680 --> 00:12:23,199
are observed, since it makes hard to know where 
the updates come from. Finally, it's important  

132
00:12:23,200 --> 00:12:29,360
to separate system from non-system installation 
capabilities. a FOTA should be focused to  

133
00:12:29,360 --> 00:12:35,680
only update the system partition, leaving 
user level installations to other less privileged  

134
00:12:35,680 --> 00:12:42,880
apps. In order to encourage further research 
in this area we release our tools publicly.  

135
00:12:42,880 --> 00:12:47,760
Also, you can access information of the dataset in 
our webpage. Thank you for your attention and I'll  

136
00:12:47,760 --> 00:12:53,600
be happy to answer any question either online at 
the conference, or by email. Thank you very much.

