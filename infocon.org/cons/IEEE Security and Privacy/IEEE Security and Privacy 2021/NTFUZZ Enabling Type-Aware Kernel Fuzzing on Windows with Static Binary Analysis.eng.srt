1
00:00:01,199 --> 00:00:02,720
hello everyone welcome to my

2
00:00:02,720 --> 00:00:03,840
presentation

3
00:00:03,840 --> 00:00:06,799
i am jason chad from kaist in this talk

4
00:00:06,799 --> 00:00:07,600
i will present

5
00:00:07,600 --> 00:00:10,240
nt files which enables type aware kernel

6
00:00:10,240 --> 00:00:11,440
fuzzing on windows

7
00:00:11,440 --> 00:00:14,559
by using static binary analysis this

8
00:00:14,559 --> 00:00:16,880
is a joint work with my colleagues kansu

9
00:00:16,880 --> 00:00:18,320
kim and dezin li

10
00:00:18,320 --> 00:00:22,080
and my advisor sankir chang

11
00:00:22,080 --> 00:00:24,400
in modern operating systems a user

12
00:00:24,400 --> 00:00:26,560
application does not directly access

13
00:00:26,560 --> 00:00:28,240
hardware resources

14
00:00:28,240 --> 00:00:31,039
instead it makes a request to kernel by

15
00:00:31,039 --> 00:00:32,558
invoking a system call

16
00:00:32,558 --> 00:00:36,160
or cisco insured then the corner code

17
00:00:36,160 --> 00:00:37,840
runs in a privileged mode

18
00:00:37,840 --> 00:00:39,920
to solve the request and interact with

19
00:00:39,920 --> 00:00:41,680
the hardware

20
00:00:41,680 --> 00:00:43,760
now let's think about what would happen

21
00:00:43,760 --> 00:00:45,360
if there is a security bug

22
00:00:45,360 --> 00:00:49,360
in such a privileged corner code

23
00:00:49,840 --> 00:00:52,320
at the very least a malicious attacker

24
00:00:52,320 --> 00:00:53,199
can incur

25
00:00:53,199 --> 00:00:55,680
denial of service by making the kernel

26
00:00:55,680 --> 00:00:57,120
to crash

27
00:00:57,120 --> 00:00:59,199
in the worst case the attacker can

28
00:00:59,199 --> 00:01:00,160
escalate one's

29
00:01:00,160 --> 00:01:03,680
privilege and take over the whole system

30
00:01:03,680 --> 00:01:05,760
because of their security impacts

31
00:01:05,760 --> 00:01:07,119
microsoft and apple

32
00:01:07,119 --> 00:01:09,520
are respectfully offering bounties up to

33
00:01:09,520 --> 00:01:10,560
thirty thousand

34
00:01:10,560 --> 00:01:12,799
and fifteen thousand dollars for colonel

35
00:01:12,799 --> 00:01:14,000
docks

36
00:01:14,000 --> 00:01:16,240
this highlights the importance of kernel

37
00:01:16,240 --> 00:01:18,560
security

38
00:01:18,560 --> 00:01:20,240
therefore there has been a growing

39
00:01:20,240 --> 00:01:22,240
research interest on finding colonel

40
00:01:22,240 --> 00:01:23,439
bugs

41
00:01:23,439 --> 00:01:25,119
there are various methodologies for

42
00:01:25,119 --> 00:01:27,200
finding bugs but in this talk i will

43
00:01:27,200 --> 00:01:28,400
focus on fuzzing

44
00:01:28,400 --> 00:01:30,320
which is a popular technique due to its

45
00:01:30,320 --> 00:01:33,040
simplicity and effectiveness

46
00:01:33,040 --> 00:01:35,600
as i previously mentioned system call is

47
00:01:35,600 --> 00:01:37,759
the primary interface between the user

48
00:01:37,759 --> 00:01:39,280
and the column

49
00:01:39,280 --> 00:01:41,680
therefore kernel photos naturally target

50
00:01:41,680 --> 00:01:43,600
cisco interface

51
00:01:43,600 --> 00:01:45,680
they generate a massive amount of system

52
00:01:45,680 --> 00:01:47,680
course while randomly mutating their

53
00:01:47,680 --> 00:01:49,360
arguments

54
00:01:49,360 --> 00:01:51,520
recently there has been a series of

55
00:01:51,520 --> 00:01:54,479
remarkable researches on cisco fuzzing

56
00:01:54,479 --> 00:01:56,880
however note that most of these fossils

57
00:01:56,880 --> 00:01:57,920
are for linux

58
00:01:57,920 --> 00:02:00,799
which is an open source operating system

59
00:02:00,799 --> 00:02:02,320
in open source oss

60
00:02:02,320 --> 00:02:05,600
cisco type information is publicly known

61
00:02:05,600 --> 00:02:08,080
therefore photos can utilize such type

62
00:02:08,080 --> 00:02:08,959
information

63
00:02:08,959 --> 00:02:10,959
to provide appropriate arguments to

64
00:02:10,959 --> 00:02:12,400
cisco's

65
00:02:12,400 --> 00:02:14,560
many previous studies show that

66
00:02:14,560 --> 00:02:16,000
diverging type information

67
00:02:16,000 --> 00:02:18,640
in cisco fuzzing is indeed crucial for

68
00:02:18,640 --> 00:02:21,279
efficiency

69
00:02:21,360 --> 00:02:23,440
but the problem is how can you first

70
00:02:23,440 --> 00:02:25,920
system course in a closed source os like

71
00:02:25,920 --> 00:02:27,040
windows

72
00:02:27,040 --> 00:02:28,879
this is the research problem that our

73
00:02:28,879 --> 00:02:31,840
paper addresses

74
00:02:31,840 --> 00:02:33,680
first let's take a look at previous

75
00:02:33,680 --> 00:02:36,480
files for closed source oss

76
00:02:36,480 --> 00:02:39,280
in fact most of them targeted a specific

77
00:02:39,280 --> 00:02:42,160
subset of cisco interfaces

78
00:02:42,160 --> 00:02:44,640
first fossils often target publicly

79
00:02:44,640 --> 00:02:46,080
known ciscos

80
00:02:46,080 --> 00:02:48,959
even for cross-source oss certain cisco

81
00:02:48,959 --> 00:02:49,760
interfaces

82
00:02:49,760 --> 00:02:53,440
like ioctr are publicly documented

83
00:02:53,440 --> 00:02:56,640
therefore fossils like imf and ioctr

84
00:02:56,640 --> 00:02:57,200
fossil

85
00:02:57,200 --> 00:03:00,319
target such known ciscos to find bugs

86
00:03:00,319 --> 00:03:02,800
however this limits the generality of

87
00:03:02,800 --> 00:03:04,879
cisco fuzzy

88
00:03:04,879 --> 00:03:07,440
second fossils can rely on manually

89
00:03:07,440 --> 00:03:09,200
written hardness code

90
00:03:09,200 --> 00:03:11,680
in other words a security expert needs

91
00:03:11,680 --> 00:03:13,680
to reverse engineer os code

92
00:03:13,680 --> 00:03:15,920
to figure out how to provide arguments

93
00:03:15,920 --> 00:03:17,120
to a specific

94
00:03:17,120 --> 00:03:20,560
target cisco then the expert should

95
00:03:20,560 --> 00:03:22,400
manually write a harness code which

96
00:03:22,400 --> 00:03:24,959
repeatedly calls the target cisco

97
00:03:24,959 --> 00:03:28,239
with mutated arguments for example

98
00:03:28,239 --> 00:03:31,599
kafl takes this kind of approach

99
00:03:31,599 --> 00:03:33,599
however considering the fact that

100
00:03:33,599 --> 00:03:35,360
windows has more than a thousand of

101
00:03:35,360 --> 00:03:36,400
system cores

102
00:03:36,400 --> 00:03:40,720
such a manual approach is not scalable

103
00:03:40,799 --> 00:03:42,799
our goal is to enable general and

104
00:03:42,799 --> 00:03:45,519
automated cisco fuzzing in windows

105
00:03:45,519 --> 00:03:47,360
in other words we do not target a

106
00:03:47,360 --> 00:03:48,640
specific cisco

107
00:03:48,640 --> 00:03:51,840
but target general system interfaces

108
00:03:51,840 --> 00:03:54,239
also we want our system to run without

109
00:03:54,239 --> 00:03:55,200
harness code

110
00:03:55,200 --> 00:03:58,879
to enable automated cisco fuzzing

111
00:03:58,879 --> 00:04:01,040
to achieve this goal we bridge the

112
00:04:01,040 --> 00:04:02,239
information gap

113
00:04:02,239 --> 00:04:04,640
between the known interface and unknown

114
00:04:04,640 --> 00:04:05,439
interface

115
00:04:05,439 --> 00:04:08,959
by using static analysis

116
00:04:08,959 --> 00:04:11,360
to further explain this idea let's take

117
00:04:11,360 --> 00:04:13,519
a closer look at how user level code

118
00:04:13,519 --> 00:04:15,680
interacts with kernel

119
00:04:15,680 --> 00:04:18,238
normally user applications do not invoke

120
00:04:18,238 --> 00:04:20,238
system codes directly

121
00:04:20,238 --> 00:04:22,320
instead they call documented api

122
00:04:22,320 --> 00:04:24,240
functions provided in the system

123
00:04:24,240 --> 00:04:26,000
libraries

124
00:04:26,000 --> 00:04:28,479
then the api function passes through a

125
00:04:28,479 --> 00:04:30,320
chain of internal functions

126
00:04:30,320 --> 00:04:32,479
and reaches the final functions whereas

127
00:04:32,479 --> 00:04:35,199
score is actually invoked

128
00:04:35,199 --> 00:04:37,520
our key idea is to analyze this function

129
00:04:37,520 --> 00:04:39,120
called chain

130
00:04:39,120 --> 00:04:41,040
by tracing data flows from the

131
00:04:41,040 --> 00:04:42,479
documented apis

132
00:04:42,479 --> 00:04:45,600
to undocumented ciscos we can figure out

133
00:04:45,600 --> 00:04:47,360
which values are passed as cisco

134
00:04:47,360 --> 00:04:50,240
arguments and what they look like

135
00:04:50,240 --> 00:04:52,560
in other words we can infer the types of

136
00:04:52,560 --> 00:04:53,759
z-score arguments

137
00:04:53,759 --> 00:04:56,080
by statically analyzing system library

138
00:04:56,080 --> 00:04:57,360
files

139
00:04:57,360 --> 00:04:59,520
in this talk we will call these library

140
00:04:59,520 --> 00:05:00,560
files as

141
00:05:00,560 --> 00:05:04,400
system binaries note that we can infer

142
00:05:04,400 --> 00:05:06,080
the type of any cisco

143
00:05:06,080 --> 00:05:09,120
invoked from this system binaries so

144
00:05:09,120 --> 00:05:11,600
our approach can target a broad range of

145
00:05:11,600 --> 00:05:13,120
ciscos

146
00:05:13,120 --> 00:05:15,360
also the static analysis process is

147
00:05:15,360 --> 00:05:16,160
automatic

148
00:05:16,160 --> 00:05:19,759
and does not require manual effort

149
00:05:19,759 --> 00:05:22,240
with this idea we design and implement

150
00:05:22,240 --> 00:05:23,199
anti-fast

151
00:05:23,199 --> 00:05:25,680
that enables type aware cisco fusing on

152
00:05:25,680 --> 00:05:26,960
windows

153
00:05:26,960 --> 00:05:29,840
first nt-first takes in system binaries

154
00:05:29,840 --> 00:05:30,080
as

155
00:05:30,080 --> 00:05:33,120
input it analyzes these binaries

156
00:05:33,120 --> 00:05:34,960
and obtains type information about

157
00:05:34,960 --> 00:05:36,560
ciscos

158
00:05:36,560 --> 00:05:38,639
then the forcing module takes in this

159
00:05:38,639 --> 00:05:39,919
type information

160
00:05:39,919 --> 00:05:42,639
together with a set application in order

161
00:05:42,639 --> 00:05:43,360
to perform

162
00:05:43,360 --> 00:05:46,639
mutational fuzzing on cisco payload as a

163
00:05:46,639 --> 00:05:47,840
final result

164
00:05:47,840 --> 00:05:50,000
anti-force outputs are set of corner

165
00:05:50,000 --> 00:05:51,440
blocks

166
00:05:51,440 --> 00:05:54,000
however analyzing system binaries is

167
00:05:54,000 --> 00:05:54,800
challenging

168
00:05:54,800 --> 00:05:57,919
due to their large scale from now on

169
00:05:57,919 --> 00:06:00,240
we will take a closer look at how our

170
00:06:00,240 --> 00:06:01,919
static analysis operates

171
00:06:01,919 --> 00:06:05,199
and deals with this challenge

172
00:06:05,199 --> 00:06:07,440
let's start by considering a real-world

173
00:06:07,440 --> 00:06:09,520
block found by anti-foss

174
00:06:09,520 --> 00:06:11,440
the code is simplified for ease of

175
00:06:11,440 --> 00:06:13,199
explanation

176
00:06:13,199 --> 00:06:15,039
the vulnerable score takes in a

177
00:06:15,039 --> 00:06:16,800
structural pointer as argument

178
00:06:16,800 --> 00:06:19,280
and processes its two fields length and

179
00:06:19,280 --> 00:06:20,800
buffer

180
00:06:20,800 --> 00:06:22,960
note that a system call must sanitize

181
00:06:22,960 --> 00:06:23,919
the inputs

182
00:06:23,919 --> 00:06:25,919
to make sure not to access invalid

183
00:06:25,919 --> 00:06:27,680
memory space

184
00:06:27,680 --> 00:06:29,759
therefore this function checks whether

185
00:06:29,759 --> 00:06:30,720
the length field

186
00:06:30,720 --> 00:06:33,759
is unexpectedly set to an odd number

187
00:06:33,759 --> 00:06:35,680
and whether the buffer points to an

188
00:06:35,680 --> 00:06:38,080
invalid memory range

189
00:06:38,080 --> 00:06:40,160
the problem is that the log error

190
00:06:40,160 --> 00:06:41,840
function at line 5

191
00:06:41,840 --> 00:06:44,960
does not raise an exception or above so

192
00:06:44,960 --> 00:06:46,960
it will continue the execution to line

193
00:06:46,960 --> 00:06:48,000
10 because

194
00:06:48,000 --> 00:06:50,479
the two checks are combined with errors

195
00:06:50,479 --> 00:06:51,280
if closed

196
00:06:51,280 --> 00:06:54,479
at line seven as a result

197
00:06:54,479 --> 00:06:56,160
we can make the corner to access

198
00:06:56,160 --> 00:06:57,919
arbitrary memory and crash

199
00:06:57,919 --> 00:07:01,919
by providing an odd number as rank field

200
00:07:01,919 --> 00:07:04,000
the first point i want to emphasize

201
00:07:04,000 --> 00:07:06,400
is that it is important to recognize the

202
00:07:06,400 --> 00:07:08,400
cisco argument type

203
00:07:08,400 --> 00:07:10,479
if we blindly generate the argument of

204
00:07:10,479 --> 00:07:11,440
this cisco

205
00:07:11,440 --> 00:07:13,599
without considering its type it is

206
00:07:13,599 --> 00:07:16,000
unlikely that the generated value

207
00:07:16,000 --> 00:07:19,759
points to a structure that we desire

208
00:07:19,759 --> 00:07:22,000
another notable point is that system

209
00:07:22,000 --> 00:07:25,599
calls are often related to api functions

210
00:07:25,599 --> 00:07:27,919
for example actually there was a user

211
00:07:27,919 --> 00:07:29,520
level windows api

212
00:07:29,520 --> 00:07:33,039
that internally invokes this system code

213
00:07:33,039 --> 00:07:36,000
therefore we can infer the cisco type by

214
00:07:36,000 --> 00:07:36,639
analyzing

215
00:07:36,639 --> 00:07:38,880
api implementation in the system

216
00:07:38,880 --> 00:07:41,440
binaries

217
00:07:42,000 --> 00:07:43,680
unfortunately there are several

218
00:07:43,680 --> 00:07:45,520
challenges that make this analysis

219
00:07:45,520 --> 00:07:46,879
difficult

220
00:07:46,879 --> 00:07:49,360
first note that our analysis actually

221
00:07:49,360 --> 00:07:51,039
runs in binary level

222
00:07:51,039 --> 00:07:53,039
and it must be able to trace memory

223
00:07:53,039 --> 00:07:56,160
states in addition to resistor values

224
00:07:56,160 --> 00:07:58,879
therefore tools that focus only on cfg

225
00:07:58,879 --> 00:07:59,759
construction

226
00:07:59,759 --> 00:08:03,599
like ida cannot be used for our purpose

227
00:08:03,599 --> 00:08:06,080
moreover note that the previous code was

228
00:08:06,080 --> 00:08:08,080
significantly simplified

229
00:08:08,080 --> 00:08:10,639
and in real binaries data flows often

230
00:08:10,639 --> 00:08:11,199
involve

231
00:08:11,199 --> 00:08:14,479
a chain of function calls for example

232
00:08:14,479 --> 00:08:16,720
this api can call functions to update

233
00:08:16,720 --> 00:08:17,520
memory

234
00:08:17,520 --> 00:08:19,440
or it can pass its data to another

235
00:08:19,440 --> 00:08:21,680
function that internally invokes the

236
00:08:21,680 --> 00:08:23,360
cisco

237
00:08:23,360 --> 00:08:25,599
this means we have to trace data flows

238
00:08:25,599 --> 00:08:27,440
across the function boundaries

239
00:08:27,440 --> 00:08:31,120
and perform an inter-procedural analysis

240
00:08:31,120 --> 00:08:33,679
of course such inter-procedural analysis

241
00:08:33,679 --> 00:08:35,839
is not theoretically impossible

242
00:08:35,839 --> 00:08:38,080
but the real problem is in the large

243
00:08:38,080 --> 00:08:41,039
scale of windows system binaries

244
00:08:41,039 --> 00:08:42,958
even though we carefully examined and

245
00:08:42,958 --> 00:08:46,080
selected a core set of system binaries

246
00:08:46,080 --> 00:08:48,720
we still have to analyze more than 12

247
00:08:48,720 --> 00:08:49,120
000

248
00:08:49,120 --> 00:08:52,320
of functions that are interconnected to

249
00:08:52,320 --> 00:08:55,680
each other to the best of our knowledge

250
00:08:55,680 --> 00:08:57,839
there is no existing binary analysis

251
00:08:57,839 --> 00:08:59,360
tool that can perform

252
00:08:59,360 --> 00:09:03,279
inter-procedural analysis at this scale

253
00:09:03,279 --> 00:09:05,839
so how can we design such a scalable

254
00:09:05,839 --> 00:09:09,120
inter-procedural analysis

255
00:09:09,120 --> 00:09:11,120
to achieve the scalability we use

256
00:09:11,120 --> 00:09:13,040
modular analysis

257
00:09:13,040 --> 00:09:14,959
let's consider this simplified chord

258
00:09:14,959 --> 00:09:17,120
graph where top level functions

259
00:09:17,120 --> 00:09:20,320
represent documented api functions and

260
00:09:20,320 --> 00:09:22,480
bottom level functions represent the

261
00:09:22,480 --> 00:09:23,519
stop functions

262
00:09:23,519 --> 00:09:26,880
where cisco is invoked

263
00:09:27,519 --> 00:09:29,440
let me first introduce the traditional

264
00:09:29,440 --> 00:09:31,279
global analysis

265
00:09:31,279 --> 00:09:33,440
in global analysis we start from the

266
00:09:33,440 --> 00:09:35,440
root node of the core graph

267
00:09:35,440 --> 00:09:37,519
and transitively follow the functions

268
00:09:37,519 --> 00:09:39,760
called by this node

269
00:09:39,760 --> 00:09:42,000
naturally we have to visit and analyze

270
00:09:42,000 --> 00:09:43,120
the same function for

271
00:09:43,120 --> 00:09:45,600
multiple times for example in the case

272
00:09:45,600 --> 00:09:48,560
of f5

273
00:09:48,640 --> 00:09:51,440
in contrast modular analysis starts from

274
00:09:51,440 --> 00:09:54,160
the lyft nodes of the core graph

275
00:09:54,160 --> 00:09:56,640
we analyze each function and compute a

276
00:09:56,640 --> 00:09:58,959
parameterized summary of the function

277
00:09:58,959 --> 00:10:02,320
that can be concretized later then

278
00:10:02,320 --> 00:10:04,399
when we analyze the colors of the

279
00:10:04,399 --> 00:10:06,160
already visited functions

280
00:10:06,160 --> 00:10:08,399
we reuse these summaries instead of

281
00:10:08,399 --> 00:10:11,279
analyzing the queries again

282
00:10:11,279 --> 00:10:13,760
therefore modular analysis can avoid

283
00:10:13,760 --> 00:10:15,360
repetitive computation

284
00:10:15,360 --> 00:10:17,120
but this comes at the price of

285
00:10:17,120 --> 00:10:19,600
sacrificing soundness

286
00:10:19,600 --> 00:10:22,240
for example it cannot soundly summarize

287
00:10:22,240 --> 00:10:23,120
functions

288
00:10:23,120 --> 00:10:26,640
when there is a cycle in the core graph

289
00:10:26,640 --> 00:10:29,360
however note that our purpose is not in

290
00:10:29,360 --> 00:10:30,640
verifying programs

291
00:10:30,640 --> 00:10:32,240
but in finding practical type

292
00:10:32,240 --> 00:10:33,839
information to assist

293
00:10:33,839 --> 00:10:37,200
fuzzing therefore our analysis does not

294
00:10:37,200 --> 00:10:39,360
have to be fully sound

295
00:10:39,360 --> 00:10:41,680
in the evaluation we could confirm that

296
00:10:41,680 --> 00:10:43,120
our analysis can collect

297
00:10:43,120 --> 00:10:45,519
meaningful type information even though

298
00:10:45,519 --> 00:10:46,640
it sacrifices

299
00:10:46,640 --> 00:10:50,399
soundness in certain points

300
00:10:50,959 --> 00:10:53,519
modular analysis itself is not a novel

301
00:10:53,519 --> 00:10:54,240
idea

302
00:10:54,240 --> 00:10:56,480
but applying it at a binary level is

303
00:10:56,480 --> 00:10:57,920
challenging

304
00:10:57,920 --> 00:11:00,160
due to the time limitation i will not

305
00:11:00,160 --> 00:11:02,640
discuss all the details in this talk

306
00:11:02,640 --> 00:11:04,720
so please refer to our paper for more

307
00:11:04,720 --> 00:11:05,680
details about

308
00:11:05,680 --> 00:11:08,320
our novel analysis design and how it

309
00:11:08,320 --> 00:11:09,200
enables

310
00:11:09,200 --> 00:11:13,120
modular analysis on binary code

311
00:11:13,360 --> 00:11:15,519
so far i have described the static

312
00:11:15,519 --> 00:11:18,000
analysis module of ndfas

313
00:11:18,000 --> 00:11:20,399
now i will briefly introduce the fuzzing

314
00:11:20,399 --> 00:11:21,040
module

315
00:11:21,040 --> 00:11:22,959
which reverses the cisco type

316
00:11:22,959 --> 00:11:25,120
information obtained from our static

317
00:11:25,120 --> 00:11:27,440
analyzer

318
00:11:27,440 --> 00:11:29,360
we use hooking-based fuzzing to first

319
00:11:29,360 --> 00:11:31,680
windows kernel with the type information

320
00:11:31,680 --> 00:11:33,440
we obtained

321
00:11:33,440 --> 00:11:36,000
we first launched a set application to

322
00:11:36,000 --> 00:11:39,279
spawn a sequence of well-formed ciscos

323
00:11:39,279 --> 00:11:41,920
then we intercept these ciscos and

324
00:11:41,920 --> 00:11:44,160
perform a type of verimutation

325
00:11:44,160 --> 00:11:46,240
by utilizing the provided type

326
00:11:46,240 --> 00:11:47,680
information

327
00:11:47,680 --> 00:11:50,560
for example on pointer type arguments we

328
00:11:50,560 --> 00:11:52,560
have to traverse into their content

329
00:11:52,560 --> 00:11:56,160
and perform mutation recursively

330
00:11:56,160 --> 00:11:58,320
now i will present the evaluation result

331
00:11:58,320 --> 00:11:59,839
of anti-fast

332
00:11:59,839 --> 00:12:01,680
in this talk i will focus on two

333
00:12:01,680 --> 00:12:03,279
research questions

334
00:12:03,279 --> 00:12:05,680
first we evaluate the impact of type

335
00:12:05,680 --> 00:12:07,760
awareness on fuzzy

336
00:12:07,760 --> 00:12:10,160
second we evaluate how effective is

337
00:12:10,160 --> 00:12:10,880
antifas

338
00:12:10,880 --> 00:12:14,160
in finding previously unknown kernel box

339
00:12:14,160 --> 00:12:16,160
and you can find more experiment results

340
00:12:16,160 --> 00:12:19,760
in the paper if you're interested

341
00:12:19,760 --> 00:12:22,480
to evaluate the impact of type awareness

342
00:12:22,480 --> 00:12:25,000
we used windows 10 released in april

343
00:12:25,000 --> 00:12:26,399
2018

344
00:12:26,399 --> 00:12:28,639
which has more number of confirmed bugs

345
00:12:28,639 --> 00:12:30,959
than the latest version

346
00:12:30,959 --> 00:12:33,600
to see if antifas can find previously

347
00:12:33,600 --> 00:12:34,720
unknown box

348
00:12:34,720 --> 00:12:37,200
we used windows 10 released in january

349
00:12:37,200 --> 00:12:38,560
2020

350
00:12:38,560 --> 00:12:40,720
which was the latest version at the time

351
00:12:40,720 --> 00:12:42,320
of our research

352
00:12:42,320 --> 00:12:44,399
we used eight zip applications for

353
00:12:44,399 --> 00:12:45,920
hooking based fuzzing

354
00:12:45,920 --> 00:12:49,120
and run anti-phos for 48 hours

355
00:12:49,120 --> 00:12:53,120
on each application first we compared

356
00:12:53,120 --> 00:12:54,959
the number of found crashes

357
00:12:54,959 --> 00:12:57,600
with and without type information the

358
00:12:57,600 --> 00:12:59,600
graph shows the number of total and

359
00:12:59,600 --> 00:13:00,800
unique crashes

360
00:13:00,800 --> 00:13:03,279
found over time we repeated the

361
00:13:03,279 --> 00:13:04,880
experiment for five times

362
00:13:04,880 --> 00:13:07,680
and plot the average here we could

363
00:13:07,680 --> 00:13:09,440
confirm that ndfas finds

364
00:13:09,440 --> 00:13:12,800
1.7 times more unique crashes when it

365
00:13:12,800 --> 00:13:13,440
utilized

366
00:13:13,440 --> 00:13:15,200
type information obtained from the

367
00:13:15,200 --> 00:13:18,000
static analysis

368
00:13:18,000 --> 00:13:20,320
next we evaluate the effectiveness of

369
00:13:20,320 --> 00:13:21,120
anti-fast

370
00:13:21,120 --> 00:13:23,600
in the latest windows 10 and compile and

371
00:13:23,600 --> 00:13:26,000
device against other tools

372
00:13:26,000 --> 00:13:27,920
we examined many corner fossils

373
00:13:27,920 --> 00:13:29,360
available for windows

374
00:13:29,360 --> 00:13:31,040
but in the end we could compare

375
00:13:31,040 --> 00:13:33,040
anti-fast against md core

376
00:13:33,040 --> 00:13:36,240
and iota fossil only we manually

377
00:13:36,240 --> 00:13:38,000
classified the found crashes

378
00:13:38,000 --> 00:13:40,320
into unique bugs and counted their

379
00:13:40,320 --> 00:13:41,839
number

380
00:13:41,839 --> 00:13:44,079
when we repeated the experiment for five

381
00:13:44,079 --> 00:13:46,160
times nti first found about

382
00:13:46,160 --> 00:13:48,240
eight unique bugs in average and

383
00:13:48,240 --> 00:13:51,519
outperform other tools

384
00:13:51,519 --> 00:13:53,519
when we collected all the bugs found

385
00:13:53,519 --> 00:13:55,040
during this experiment

386
00:13:55,040 --> 00:13:57,600
antifas found 11 bugs from the latest

387
00:13:57,600 --> 00:13:58,720
windows tab

388
00:13:58,720 --> 00:14:02,160
and 4 of the bugs were assigned cves

389
00:14:02,160 --> 00:14:05,600
moreover these cvs were rewarded with 25

390
00:14:05,600 --> 00:14:08,399
000 dollars of bounties in total due to

391
00:14:08,399 --> 00:14:10,800
their critical security impacts

392
00:14:10,800 --> 00:14:12,800
this highlights the practical impact of

393
00:14:12,800 --> 00:14:15,680
ndfas on real world

394
00:14:15,680 --> 00:14:17,519
we believe there are several promising

395
00:14:17,519 --> 00:14:19,839
directions for future work

396
00:14:19,839 --> 00:14:22,160
first we can integrate the cisco type

397
00:14:22,160 --> 00:14:22,880
information

398
00:14:22,880 --> 00:14:24,959
with generational or coverage based

399
00:14:24,959 --> 00:14:26,959
fuzzing as well

400
00:14:26,959 --> 00:14:29,680
also we can extend our static analysis

401
00:14:29,680 --> 00:14:31,600
to support more complex types

402
00:14:31,600 --> 00:14:35,199
like union lastly in this work we only

403
00:14:35,199 --> 00:14:36,880
analyze user level code

404
00:14:36,880 --> 00:14:38,959
but we can further complement the type

405
00:14:38,959 --> 00:14:39,920
information

406
00:14:39,920 --> 00:14:43,519
by analyzing kernel code as well

407
00:14:43,519 --> 00:14:45,920
to support open science we will release

408
00:14:45,920 --> 00:14:47,600
the source code of ntfos

409
00:14:47,600 --> 00:14:51,199
on github in july if you're interested

410
00:14:51,199 --> 00:14:52,959
please click the stars and watch our

411
00:14:52,959 --> 00:14:56,638
repository for the updates

412
00:14:56,880 --> 00:14:58,800
this is the end of my talk and thank you

413
00:14:58,800 --> 00:15:01,760
for listening

