1
00:00:00,399 --> 00:00:06,319
Hi everyone my name is Thilo Krachenfels and
I will present our work entitled

2
00:00:06,319 --> 00:00:10,160
"Real World Snapshots vs. Theory:
Questioning the t-Probing Security Model"

3
00:00:10,160 --> 00:00:17,680
by Fatemeh Gani, Amir Moradi,
Shahin Tajik, Jean-Pierre Seifert and myself.

4
00:00:17,680 --> 00:00:22,560
Our work shows that assumptions used for
theoretically developing countermeasures

5
00:00:22,560 --> 00:00:28,159
against side channel attacks
do not always reflect the real world.

6
00:00:28,160 --> 00:00:33,120
This talk will be structured as follows:
after a short overview I will present

7
00:00:33,120 --> 00:00:37,519
the necessary background knowledge
and afterward, I will talk about our

8
00:00:37,520 --> 00:00:43,520
approach, the experimental setup
and the results of our experiments.

9
00:00:43,600 --> 00:00:47,840
Making countermeasures have been
developed to provide side-channel

10
00:00:47,840 --> 00:00:54,079
analysis security for cryptographic algorithms,
and they have been used (or are employed)

11
00:00:54,079 --> 00:01:01,359
in, for instance, banking cards for more than a decade.
The security is mathematically proven in

12
00:01:01,359 --> 00:01:08,560
the t-probing security model, which I will
explain in a bit more detail on the next slide.

13
00:01:08,560 --> 00:01:12,880
It's central assumption is that the
number of available

14
00:01:12,880 --> 00:01:19,759
and independent probes is limited.
This is also a realistic assumption when

15
00:01:19,759 --> 00:01:23,280
considering traditional side-channel
attacks, such as

16
00:01:23,280 --> 00:01:26,880
microprobing, power analysis, or
EM analysis.

17
00:01:26,880 --> 00:01:30,079
For instance here, you can see a prober
setup with at most

18
00:01:30,079 --> 00:01:39,520
eight probes or three electromagnetic probes
In our work we show that this assumption of having a

19
00:01:39,520 --> 00:01:45,920
limited number of probes is not realistic when considering
optical side channel analysis techniques,

20
00:01:45,920 --> 00:01:51,520
such as Laser Logic State Imaging. But before
going into more detail about this,

21
00:01:51,520 --> 00:01:57,199
let me give you some details on the
t-probing security model.

22
00:01:57,360 --> 00:02:01,040
Masking countermeasures are built on
the two principles

23
00:02:01,040 --> 00:02:06,159
secret sharing and multiparty computation;
and boolean masking is the most common

24
00:02:06,159 --> 00:02:11,520
scheme to split the inputs
of the algorithm into multiple shares.

25
00:02:11,520 --> 00:02:15,200
Typically all but one share are
random numbers,

26
00:02:15,200 --> 00:02:22,160
and then the final share is the XOR result of
all other shares and the actual secret.

27
00:02:22,160 --> 00:02:30,560
And then the intermediate computation of
the algorithm deals only with the secrets split into

28
00:02:30,560 --> 00:02:36,959
the shares, so computation will never involve the
entire secret (which means

29
00:02:36,959 --> 00:02:42,959
all shares). And in this way, it can be
assured that the adversary can not learn

30
00:02:42,959 --> 00:02:47,840
any sensitive information
from t physical probes when the

31
00:02:47,840 --> 00:02:52,800
implementation uses
t+1 shares. This is also

32
00:02:52,800 --> 00:02:59,280
because of the randomization, which is
used for the secret sharing.

33
00:02:59,760 --> 00:03:04,159
And mainly due to this
randomization,

34
00:03:04,159 --> 00:03:10,239
no measurement repetition is possible.
However one should not forget that

35
00:03:10,239 --> 00:03:14,959
there's also another
kind of requirement in masking schemes,

36
00:03:14,959 --> 00:03:17,840
and that is that
the secret shares and intermediate

37
00:03:17,840 --> 00:03:21,200
results must be stored in registers on
the chip.

38
00:03:21,200 --> 00:03:26,159
This is where our attack technique
comes into play.

39
00:03:26,239 --> 00:03:31,280
As I've mentioned before, the technique
which we are using is Laser Logic State Imaging,

40
00:03:31,280 --> 00:03:35,120
which is an optical probing
technique. It is conducted through a

41
00:03:35,120 --> 00:03:41,200
microscope-based setup where the chip
backside is scanned with a laser,

42
00:03:41,200 --> 00:03:44,879
and since the bulk silicon is
transparent to light

43
00:03:44,879 --> 00:03:48,798
with wavelengths above 1.1 micrometer,
the light can

44
00:03:48,799 --> 00:03:54,080
enter the silicon and is reflected also
back from the chip.

45
00:03:54,080 --> 00:04:02,480
And while the light is inside the chip, it is modulated by
a different carrier concentrations in the chip.

46
00:04:02,480 --> 00:04:09,439
The reflected light is then sensed by a detector,
and for LLSI for instance, is then

47
00:04:09,439 --> 00:04:18,399
fed through a bandpass filter. This leads me
already to EOFM, on which LLSI is based.

48
00:04:18,399 --> 00:04:25,280
EOFM stands for Electro-Optical
Frequency Mapping, and on this schematic

49
00:04:25,280 --> 00:04:30,080
on the right-hand side you can see that
some transistors are switching with a

50
00:04:30,080 --> 00:04:34,560
periodic frequency, in this case 1 MHz

51
00:04:34,560 --> 00:04:38,720
when scanning with the laser. The light
is modulated by those transistors

52
00:04:38,720 --> 00:04:44,000
switching at 1 MHz, and therefore,
the signal can pass a bandpass filter

53
00:04:44,000 --> 00:04:49,040
set to that frequency, which results in
bright spots on the LLSI

54
00:04:49,040 --> 00:04:55,120
response image. You can also see here
that transistors which do not change the

55
00:04:55,120 --> 00:05:00,639
state periodically
cannot be detected by this technique.

56
00:05:01,120 --> 00:05:06,960
However, this is different with LLSI.
The trick is to modulate the supply

57
00:05:06,960 --> 00:05:10,479
voltage of the transistors,
and therefore, transistors which are

58
00:05:10,479 --> 00:05:15,840
switched on will be visible
on the LLSI response image, and

59
00:05:15,840 --> 00:05:19,359
transistors which are switched off, will not.
So basically

60
00:05:19,360 --> 00:05:23,039
on and off states of transistors can be
distinguished, due to

61
00:05:23,039 --> 00:05:29,440
carrier identity differences which
influence the light reflection.

62
00:05:30,000 --> 00:05:33,440
Now let's look at a CMOS memory cell

63
00:05:33,440 --> 00:05:38,320
which is used for instance in FPGA
registers and flip-flops.

64
00:05:38,320 --> 00:05:43,599
These kind of memory cells consist
mainly of two cross-coupled inverters,

65
00:05:43,600 --> 00:05:47,280
where two transistors are switched on,
and two transistors are switched off,

66
00:05:47,280 --> 00:05:54,559
depending on the bit state this memory cell holds.
And therefore, when scanning using LLSI,

67
00:05:54,560 --> 00:05:59,280
in this case the top right and bottom
left transistors are switched on.

68
00:05:59,280 --> 00:06:07,359
These will show up as bright spots on the LLSI
image. Therefore we can extract the bit state.

69
00:06:07,360 --> 00:06:12,319
You can imagine that if the the opposite
bit state is stored in the cell

70
00:06:12,319 --> 00:06:16,240
top left and bottom right transistors
will be switched on and

71
00:06:16,240 --> 00:06:20,400
the response image would be simply
flipped. So to sum up:

72
00:06:20,400 --> 00:06:28,159
LLSI is capable of capturing snapshots of
on-chip memories. For our

73
00:06:28,160 --> 00:06:35,520
attack approach we are considering two scenarios
one scenario where the memory locations

74
00:06:35,520 --> 00:06:40,560
of the key registers are known, and one
scenario where they are unknown.

75
00:06:40,560 --> 00:06:47,600
In the first scenario, which is more simple,
we only capture snapshots of the key registers

76
00:06:47,600 --> 00:06:53,840
and then extract the individual
shares from the images, so the bit values

77
00:06:53,840 --> 00:06:57,440
from the images,
and can obtain the key by simply XOR'ing

78
00:06:57,440 --> 00:07:01,599
the shares.
In the second scenario we don't know in

79
00:07:01,599 --> 00:07:06,240
which registers
of the design the key shares reside,

80
00:07:06,240 --> 00:07:10,560
and therefore, we capture snapshots from
all registers

81
00:07:10,560 --> 00:07:15,840
of the design from different clock cycles,
extract the bit values, and then use a

82
00:07:15,840 --> 00:07:18,880
SAT solver
to find the key register locations, and

83
00:07:18,880 --> 00:07:21,919
therefore, also the key.

84
00:07:22,960 --> 00:07:27,919
As implementation under test we used the
AES-DOM implementation,

85
00:07:27,919 --> 00:07:32,318
which is freely available on the
internet and can be built with

86
00:07:32,319 --> 00:07:37,199
an arbitrary protection order.

87
00:07:37,440 --> 00:07:44,160
For each share of the key, there are
128-bit key registers,

88
00:07:44,160 --> 00:07:49,120
and also state registers for the plaintext
and then ciphertext,

89
00:07:49,120 --> 00:07:53,360
plus there are some extra registers for
intermediate results

90
00:07:53,360 --> 00:07:56,800
and the key schedule and s box
implementation.

91
00:07:56,800 --> 00:08:01,759
But we are mainly targeting the key registers.

92
00:08:02,080 --> 00:08:07,758
Upon start of the encryption operation,
the plaintext and the key are shifted

93
00:08:07,759 --> 00:08:10,960
into state and key registers byte-by-byte.

94
00:08:10,960 --> 00:08:16,000
And this is how it looks like: So if you
have the state registers in the top row

95
00:08:16,000 --> 00:08:18,560
and
key registers in the second row, you can

96
00:08:18,560 --> 00:08:25,680
see that after the 16th clock cycle
(exactly here), all key shares will be

97
00:08:25,680 --> 00:08:28,639
loaded into the key registers. And this is

98
00:08:28,639 --> 00:08:36,479
what we target with our LLSI extraction.
As device under test we used an

99
00:08:36,479 --> 00:08:42,240
Intel Cyclone IV FPGA, which was
manufactured in a 60 nm technology.

100
00:08:42,240 --> 00:08:45,360
Here in the center you can see a
reflected light

101
00:08:45,360 --> 00:08:50,240
light image of the entire chip, and on
the right hand side, a closer look

102
00:08:50,240 --> 00:08:58,880
into the configurable logic blocks.
As first step we analyzed the

103
00:08:58,880 --> 00:09:03,519
target FPGA
and tried to extract the content from a single

104
00:09:03,519 --> 00:09:07,440
memory cell (or flip-flop). Since it's an
FPGA, we could

105
00:09:07,440 --> 00:09:11,120
easily run another program or switch the
register's content

106
00:09:11,120 --> 00:09:18,640
at our will. Here you can see the LLSI
signal overlaid on an optical image,

107
00:09:18,640 --> 00:09:25,360
and for bit value 1 you can see large
spots on top left and bottom right of the image,

108
00:09:25,360 --> 00:09:32,800
whereas for bit value 0 there is a big spot
only on the top right corner of the cell.

109
00:09:32,800 --> 00:09:39,120
When subtracting the two LLSI responses
it gets even more clearly that there

110
00:09:39,120 --> 00:09:43,279
only stays
a signal inside the cell boundaries

111
00:09:43,279 --> 00:09:47,360
(which we have highlighted in yellow here).

112
00:09:47,839 --> 00:09:55,760
So this previous slide has already shown that
subtracting two LLSI images can really

113
00:09:55,760 --> 00:10:02,560
help to read out the content of the registers.
This is an image showing the first byte

114
00:10:02,560 --> 00:10:07,439
of three key shares,
and from the actual LLSI image we have

115
00:10:07,440 --> 00:10:11,519
subtracted an
LLSI image on which all registers store

116
00:10:11,519 --> 00:10:15,600
the bit value 0.
You can see that

117
00:10:15,600 --> 00:10:21,440
the key can easily be extracted.
All cells showing a big difference

118
00:10:21,440 --> 00:10:27,440
contain bit value 1,
and all cells which are only kind of grayish

119
00:10:27,440 --> 00:10:30,800
contain by value 0.

120
00:10:30,959 --> 00:10:36,880
And of course, the extraction can also be
done in an automated fashion

121
00:10:36,880 --> 00:10:41,439
And for this we used classical image
recognition techniques,

122
00:10:41,440 --> 00:10:46,800
by first cutting out each individual
cell. We had to

123
00:10:46,800 --> 00:10:52,160
take into account that every second cell
is flipped, so we had to flip it back.

124
00:10:52,160 --> 00:10:56,000
Then we chose two template images. One
for bit value 1,

125
00:10:56,000 --> 00:10:59,440
and one for bit value 0.

126
00:10:59,519 --> 00:11:02,800
Then we simply calculated the cross-correlation

127
00:11:02,800 --> 00:11:08,959
between each cell and templates. And this
table clearly shows that the correct bit

128
00:11:08,959 --> 00:11:18,560
value can be extracted using this approach.
And it works pretty reliably. We could

129
00:11:18,560 --> 00:11:24,160
extract all 128-bit key shares from a
3-share and even from a 5-share

130
00:11:24,160 --> 00:11:32,719
implementation without any bit errors.
So that was pretty impressive to us.

131
00:11:32,720 --> 00:11:37,360
But now there's still the case where the
key registers are unknown and

132
00:11:37,360 --> 00:11:40,800
simply extracting the memory content
doesn't help to

133
00:11:40,800 --> 00:11:44,719
reveal the secret key. And as I said, for
that we used

134
00:11:44,720 --> 00:11:51,839
SAT solvers to find the set of
key registers within all registers of

135
00:11:51,839 --> 00:11:58,000
the implementation. We first simulated
different masking orders and clock cycles

136
00:11:58,000 --> 00:12:02,079
available to the solver,
and in general, you can see that it

137
00:12:02,079 --> 00:12:05,199
becomes easier
for the solver to reveal the key

138
00:12:05,200 --> 00:12:10,320
registers when snapshots
of more registers are available,

139
00:12:10,320 --> 00:12:15,360
and also for higher masking orders the
minimum number of clock cycles

140
00:12:15,360 --> 00:12:19,920
available as snapshots for the solver
increases.

141
00:12:19,920 --> 00:12:24,399
If you're interested in learning more
details about the SAT solving part,

142
00:12:24,399 --> 00:12:27,920
please take a look at our paper.

143
00:12:28,000 --> 00:12:32,720
To prove that this approach works, we
first extracted all registers from a

144
00:12:32,720 --> 00:12:37,360
2-share implementation
using our automated cross-correlation

145
00:12:37,360 --> 00:12:41,040
based approach.
The design for this 2-share

146
00:12:41,040 --> 00:12:46,319
implementation contains over
720 registers,

147
00:12:46,320 --> 00:12:50,240
and as you can imagine that takes some
time. And it took

148
00:12:50,240 --> 00:12:53,360
24 hours to create all the snapshots
from the

149
00:12:53,360 --> 00:12:59,120
12 different clock cycles.
However, the key extraction using the SAT

150
00:12:59,120 --> 00:13:04,240
solver then only took
1 hour and 47 minutes. And I should also

151
00:13:04,240 --> 00:13:08,079
mention that
the extraction times, so time for

152
00:13:08,079 --> 00:13:15,120
capturing and solving the SAT solver,
increases basically linearly with the

153
00:13:15,120 --> 00:13:21,519
number of registers contained in the design.
To encourage others playing with our

154
00:13:21,519 --> 00:13:27,120
data and trying to improve the key extraction
we made all snapshots and the extracted

155
00:13:27,120 --> 00:13:32,720
bit values of our experiments
available online. The link can also be

156
00:13:32,720 --> 00:13:39,199
found in our paper.
This already leads me to the conclusion.

157
00:13:39,199 --> 00:13:44,880
We have started with the observation that
the probing security models assume a

158
00:13:44,880 --> 00:13:48,880
limited number of probes available to
the attacker.

159
00:13:48,880 --> 00:13:53,279
While this might hold true for classical
side channel attacks, such as

160
00:13:53,279 --> 00:13:57,920
power or EM analysis, with optical
side-channel attacks,

161
00:13:57,920 --> 00:14:03,599
we virtually have an unlimited number of
probes available.

162
00:14:03,600 --> 00:14:09,920
We've shown that we can extract the full AES
keys of masked implementations of AES

163
00:14:09,920 --> 00:14:16,160
with different numbers of shares.
Therefore, our main takeaway of this work is

164
00:14:16,160 --> 00:14:23,199
that cryptography should not rely on the
complexity of physical attacks.

165
00:14:23,760 --> 00:14:27,920
These are the references I used for this
presentation.

166
00:14:27,920 --> 00:14:31,839
Thank you very much for your attention!

