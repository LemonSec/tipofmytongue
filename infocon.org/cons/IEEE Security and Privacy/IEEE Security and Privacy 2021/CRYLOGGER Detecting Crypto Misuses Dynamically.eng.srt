1
00:00:01,260 --> 00:00:06,310
Hi everyone! I’m Luca Piccolboni from Columbia
University and I’m going to talk about CRYLOGGER,

2
00:00:06,310 --> 00:00:11,620
a dynamic tool to detect cryptographic misuses
in Android applications. Before moving on,

3
00:00:11,620 --> 00:00:17,680
let me thank the other authors of this work,
Giuseppe, Luca and Simha.

4
00:00:17,680 --> 00:00:22,630
Android applications use cryptographic libraries
to perform operations such as encryption,

5
00:00:22,630 --> 00:00:28,549
hashing and authentication. Unfortunately,
using these libraries is very complicated.

6
00:00:28,550 --> 00:00:32,789
We need an understanding of cryptography to
know which algorithms and which parameters

7
00:00:32,789 --> 00:00:38,069
to use in a given situation. Suppose, for
example, that an application has to perform

8
00:00:38,069 --> 00:00:43,520
an encryption with AES. The application has
to call an API by passing as parameters the

9
00:00:43,520 --> 00:00:48,980
plaintext and the encryption key in order
to obtain the corresponding ciphertext.

10
00:00:48,980 --> 00:00:53,578
In addition to these parameters, the application
has to specify many other parameters such

11
00:00:53,579 --> 00:00:58,699
as the operation mode or the padding scheme
used for encryption. These parameters are

12
00:00:58,699 --> 00:01:04,309
not as easy to configure. Choosing the correct
values for these parameters is, however, critical

13
00:01:04,309 --> 00:01:09,280
for security. When these parameters are misconfigured,
we say that the corresponding cryptographic

14
00:01:09,280 --> 00:01:13,560
APIs have been misused.

15
00:01:13,560 --> 00:01:18,130
Cryptographic misuses are very common in Android
applications. According to some recent studies

16
00:01:18,130 --> 00:01:23,420
almost 90% of the Android applications make
at least one mistake in using cryptographic

17
00:01:23,420 --> 00:01:27,680
APIs.

18
00:01:27,680 --> 00:01:33,071
The good news is that cryptographic misuses
can be detected with automatic tools. Most

19
00:01:33,071 --> 00:01:37,660
of these tools are static: they analyze the
code of the applications to detect when wrong

20
00:01:37,660 --> 00:01:43,380
parameters are passed to the APIs. A static
tool takes as input the application and a

21
00:01:43,380 --> 00:01:48,560
list of cryptographic rules. An example of
rule is forbidding the use of the operation

22
00:01:48,560 --> 00:01:55,870
mode ECB (electronic codebook) when multiple
blocks of data are encrypted with AES.

23
00:01:55,870 --> 00:02:01,490
Once the tool has analyzed the application,
it reports a list of violations. These violations

24
00:02:01,490 --> 00:02:05,908
have to be treated as security warnings. A
rule violation doesn’t necessarily lead

25
00:02:05,909 --> 00:02:10,568
to an exploit; it is instead a warning that
needs to be further analyzed to make sure

26
00:02:10,568 --> 00:02:14,069
there are no problems for the the application
or its users.

27
00:02:14,069 --> 00:02:19,379
Let’s see now some examples of rules.

28
00:02:19,379 --> 00:02:24,579
Some rules forbid the use of specific configurations
of the cryptographic algorithms. For example,

29
00:02:24,580 --> 00:02:30,719
rule #2 forbids the use of broken encryption
algorithms such as DES. Another example is

30
00:02:30,719 --> 00:02:36,010
rule #20 that forbids the use of RSA without
padding.

31
00:02:36,010 --> 00:02:41,189
Other rules don't let applications use bad
keys or initialization vectors. For example

32
00:02:41,189 --> 00:02:47,569
rule #7 says that we cannot use a static initialization
vector. For instance, using 0 as initialization

33
00:02:47,569 --> 00:02:53,390
vector with the CBC (Cipher block chaining)
mode makes the data vulnerable to certain

34
00:02:53,390 --> 00:02:55,458
attacks.

35
00:02:55,459 --> 00:03:01,139
Other rules focus on random number generation.
For example, rule #17 says that we cannot

36
00:03:01,139 --> 00:03:08,010
use unsafe random number generators. An example
is java.util.Random that shouldn't be used

37
00:03:08,010 --> 00:03:10,870
for cryptographic purposes.

38
00:03:10,870 --> 00:03:15,129
Other rules focus on passwords that are used
for key derivation or for storing sensitive

39
00:03:15,129 --> 00:03:21,108
data. For example, these rules prohibit the
use of weak passwords and black-listed passwords

40
00:03:21,109 --> 00:03:24,760
or the reuse of the same password multiple
times.

41
00:03:24,760 --> 00:03:29,168
Other rules focus on key derivation and the
related parameters. The typical example is

42
00:03:29,169 --> 00:03:35,151
rule #13 that says that we can't use less
than 1000 iterations to generate a key. Using

43
00:03:35,151 --> 00:03:38,579
a lower number of iterations is considered
unsafe.

44
00:03:38,579 --> 00:03:46,359
Finally, some rules are for HTTPS and certificates.
An example is rule #22 that prohibits the

45
00:03:46,359 --> 00:03:49,299
use of HTTP.

46
00:03:49,299 --> 00:03:54,469
To check these rules, we developed CRYLOGGER
a tool that detects cryptographic misuses

47
00:03:54,469 --> 00:04:00,909
by using a dynamic approach. The execution
of CRYLOGGER consists of two steps.

48
00:04:00,909 --> 00:04:07,510
First, we run the Android application. To
do that we use Monkey. Monkey is a tool that

49
00:04:07,510 --> 00:04:12,649
generates random events that trigger actions
on the graphical interface of the application.

50
00:04:12,650 --> 00:04:18,529
An app developer can, of course, use more
sophisticated tests to improve the coverage.

51
00:04:18,529 --> 00:04:22,919
We used Monkey because it was the easiest
way to execute several apps of the Google

52
00:04:22,920 --> 00:04:28,710
Play Store and we were able to detect many
misuses. To log the information about the

53
00:04:28,710 --> 00:04:34,130
crypto APIs, we run the application with instrumented
Java classes. We instrumented, for example,

54
00:04:34,130 --> 00:04:39,740
the class Cipher, the class MessageDigest
and others. In this way, every time one of

55
00:04:39,740 --> 00:04:44,240
the functions of these classes is called,
we can log the most important parameters that

56
00:04:44,240 --> 00:04:49,840
are passed. For example, on the left you can
see that an application that uses the class

57
00:04:49,840 --> 00:04:55,599
Cipher to perform symmetric encryption. When
the function init() is called we store in

58
00:04:55,600 --> 00:05:00,280
a log file information about the algorithm,
the operation mode, the padding scheme and

59
00:05:00,280 --> 00:05:03,440
other relevant parameters.

60
00:05:03,440 --> 00:05:08,460
The second step is done offline. Once we finished
to execute the application we analyze the

61
00:05:08,460 --> 00:05:13,190
log file and report all the violations.

62
00:05:13,190 --> 00:05:18,570
The first step is the instrumentation of the
relevant Java libraries and methods. We instrumented

63
00:05:18,570 --> 00:05:24,530
12 Java classes that belong to the Java Cryptography
Extension (JCE) and the Java Cryptography

64
00:05:24,530 --> 00:05:29,859
Architecture (JCA). These classes provide
a common interface for cryptographic algorithms

65
00:05:29,860 --> 00:05:36,080
to all applications. This interface is implemented
by ‘providers’, which are crypto libraries,

66
00:05:36,080 --> 00:05:42,560
for example BouncyCastle or OpenSSL. By instrumenting
these classes we can monitor the parameters

67
00:05:42,560 --> 00:05:46,370
used by thousands of applications.

68
00:05:46,370 --> 00:05:52,620
An example of class that we instrumented is
MessageDigest. This class implements crypto

69
00:05:52,620 --> 00:05:59,180
hash functions. These functions take as input
an arbitrary amount of data and produce hash

70
00:05:59,180 --> 00:06:04,960
values, called digests. We instrumented the
method digest() so that we can log which particular

71
00:06:04,960 --> 00:06:12,219
algorithm is used to calculate the hash, for
example, SHA1 or SHA256.

72
00:06:12,220 --> 00:06:17,090
We instrumented the other Java classes in
a similar way by determining the relevant

73
00:06:17,090 --> 00:06:20,109
functions and parameters for each class.

74
00:06:20,110 --> 00:06:27,410
After we collected the log file, we need to
analyze it and see if it violates some rules.

75
00:06:27,410 --> 00:06:33,420
To do that, we defined four checking procedures.
Each of these procedures takes as input the

76
00:06:33,420 --> 00:06:39,080
log file that we collected and reports a list
of violations.

77
00:06:39,080 --> 00:06:44,469
The first checking procedure is used to extract
from the log all the values of a parameter

78
00:06:44,470 --> 00:06:50,180
or a combination of parameters and verify
that they can be used for a certain API. All

79
00:06:50,180 --> 00:06:54,200
the values that are collected from the log
are sent to a rule-specific function that

80
00:06:54,200 --> 00:06:59,130
says ‘yes’ if the values are allowed by
the rule or ‘no’ otherwise.

81
00:06:59,130 --> 00:07:04,400
For example, to ensure that we don’t use
any broken algorithm for symmetric encryption,

82
00:07:04,400 --> 00:07:09,799
we check that those algorithms are never used
by the application. If we see one in the log

83
00:07:09,800 --> 00:07:12,360
we report a violation.

84
00:07:12,360 --> 00:07:17,460
As another example, to check that we don’t
use weak passwords, we collect all the passwords

85
00:07:17,460 --> 00:07:22,070
that we find in the log, we evaluate their
strength with an open-source tool, and we

86
00:07:22,070 --> 00:07:26,150
report the violations.

87
00:07:26,150 --> 00:07:31,659
The second checking procedure is used to verify
if a parameter of an API is constant or not.

88
00:07:31,660 --> 00:07:37,500
For instance, we need to ensure that applications
do not use static initialization vectors that

89
00:07:37,500 --> 00:07:43,270
are hard-coded. To verify the rules in this
category, we examine the logs of two executions

90
00:07:43,270 --> 00:07:47,561
of the same application and check that the
values that are found in one of the execution

91
00:07:47,561 --> 00:07:53,669
log are not present in the other one and vice
versa.

92
00:07:53,670 --> 00:07:58,710
The third checking procedure verifies if a
set of values is random or not.

93
00:07:58,710 --> 00:08:03,590
For rule #06, for example, we need to guarantee
that the application uses encryption keys

94
00:08:03,590 --> 00:08:09,030
that have enough randomness. To verify this
rule, we collect all the values of the relevant

95
00:08:09,030 --> 00:08:14,700
parameter and we check if the values have
been generated with a bad method (like java.util.Random).

96
00:08:14,700 --> 00:08:22,591
If they are, we flag a violation, otherwise
we apply the NIST tests for randomness. If

97
00:08:22,591 --> 00:08:28,460
at least one of the tests fails we flag a
violation.

98
00:08:28,460 --> 00:08:35,319
Finally, the last checking procedure checks
if a value or a combination of values is reused

99
00:08:35,320 --> 00:08:37,850
across the same execution of an application.

100
00:08:37,850 --> 00:08:45,210
For instance, for rule #9, we have to ensure
that the same pair (key, IV) is never reused

101
00:08:45,210 --> 00:08:50,300
to encrypt different messages. The checking
procedure collects all the values from the

102
00:08:50,300 --> 00:08:55,319
log and checks if there are duplicates. If
there are duplicates, it means that the app

103
00:08:55,320 --> 00:09:04,110
has used the same key and IV to encrypt different
messages, which should be reported as violation.

104
00:09:04,110 --> 00:09:08,310
Let’s now discuss some experimental results.

105
00:09:08,310 --> 00:09:13,680
We analyzed roughly 1800 Android applications
by using CRYLOGGER on an emulator running

106
00:09:13,680 --> 00:09:20,021
Android 9. We downloaded about 2000 free Android
applications from the Google Play Store. These

107
00:09:20,021 --> 00:09:26,390
are popular free apps of 33 different categories.
We discarded some applications since we did

108
00:09:26,390 --> 00:09:32,699
not detect usage of crypto APIs and some as
they did not work on the Android emulator

109
00:09:32,700 --> 00:09:37,340
either because they kept crashing or they
required libraries that could not be installed

110
00:09:37,340 --> 00:09:40,330
in our environment.

111
00:09:40,330 --> 00:09:45,100
We used Monkey to interact with the graphical
interface of the applications by using 30k

112
00:09:45,100 --> 00:09:50,760
random events, which we saw it was a good
compromise between running time and violations

113
00:09:50,760 --> 00:09:51,760
reported.

114
00:09:51,760 --> 00:09:59,140
So, here are the results of our analysis.
This graph reports the total number of applications

115
00:09:59,140 --> 00:10:05,839
that violate the 26 cryptographic rules checked
by CRYLOGGER. The x-axis reports the number

116
00:10:05,839 --> 00:10:11,050
of the rule, while the y-axis reports the
total number of applications that violate

117
00:10:11,050 --> 00:10:12,329
that rule.

118
00:10:12,330 --> 00:10:15,990
Let’s discuss the results for a few rules.

119
00:10:15,990 --> 00:10:23,520
A very high number of applications use broken
hash algorithms and unsafe random generators.

120
00:10:23,520 --> 00:10:29,050
These numbers are very high because they account
for secure uses of hash algorithms and random

121
00:10:29,050 --> 00:10:34,359
number generators for non-sensitive data.
Unfortunately, it is not easy to discriminate

122
00:10:34,360 --> 00:10:38,940
the unsafe uses from the safe uses in these
situations.

123
00:10:38,940 --> 00:10:44,380
Several applications use bad keys and initialization
vectors which are either constant or they

124
00:10:44,380 --> 00:10:49,140
don’t have enough randomness. Most likely
some of these problems are coming from popular

125
00:10:49,140 --> 00:10:53,330
libraries that are used by many applications.

126
00:10:53,330 --> 00:10:58,960
Many applications use also bad passwords.
Often these passwords are used to obfuscate

127
00:10:58,960 --> 00:11:02,560
the data stored locally on the smartphone.

128
00:11:02,560 --> 00:11:07,250
As mentioned before, each rule violation should
be treated as a security warning. In fact,

129
00:11:07,250 --> 00:11:12,530
a rule violation doesn’t necessarily mean
that an exploit exists. To understand if these

130
00:11:12,530 --> 00:11:17,880
violations correspond to real exploits, we
manually analyzed 28 applications and we collected

131
00:11:17,880 --> 00:11:24,100
the feedback from the developers of 8 applications
and 2 libraries. We discuss now the main lessons

132
00:11:24,100 --> 00:11:27,540
that we learned through this process.

133
00:11:27,540 --> 00:11:32,349
First, developers are interested in real exploits
that have a direct impact on the security

134
00:11:32,350 --> 00:11:37,279
of the applications. Some rules define, for
example, the minimum size of a key or the

135
00:11:37,279 --> 00:11:42,279
minimum number of iterations to use for key
derivation. While these are important rules

136
00:11:42,279 --> 00:11:47,570
to follow their security impact on the particular
usage can be difficult to determine.

137
00:11:47,570 --> 00:11:54,080
Second, sensitive data are sometimes stored
by using poor encryption practices, for example

138
00:11:54,080 --> 00:11:59,839
by employing constant passwords or broken
algorithms. These are reported as violations,

139
00:11:59,839 --> 00:12:04,190
but they are more difficult to exploit by
an attacker. Of course, it is better to always

140
00:12:04,190 --> 00:12:09,570
adopt safe cryptographic practices even when
certain attacks, like privilege escalation,

141
00:12:09,570 --> 00:12:12,070
are considered out of scope.

142
00:12:12,070 --> 00:12:18,710
Third, some violations are raised for non-sensitive
data. For example, using a random generator

143
00:12:18,710 --> 00:12:23,290
that is not safe for cryptographic use is
OK when the values that are generated are

144
00:12:23,290 --> 00:12:29,420
not used as keys. Discriminating this and
similar situations is very challenging and

145
00:12:29,420 --> 00:12:34,870
some rules more than others can suffer of
this problem.

146
00:12:34,870 --> 00:12:39,720
We compared our approach with Cryptoguard,
a state-of-the-art static tool for automatic

147
00:12:39,720 --> 00:12:42,710
detection of cryptographic misuses.

148
00:12:42,710 --> 00:12:47,620
We observed that static tools and dynamic
tools can complement each other. Static tools

149
00:12:47,620 --> 00:12:52,279
are great for analyzing a large number of
applications. But they can report false positives

150
00:12:52,279 --> 00:12:57,330
because they analyze parts of the code that
might never be executed. In addition, they

151
00:12:57,330 --> 00:13:02,660
can produce false negatives as in some cases
they clip the explorations to reduce the execution

152
00:13:02,660 --> 00:13:04,270
time.

153
00:13:04,270 --> 00:13:08,270
On the other hand, a dynamic tool can focus
on the code that is actually executed, but

154
00:13:08,270 --> 00:13:13,980
it can produce false negatives when the application
is not fully explored. It can also produce

155
00:13:13,980 --> 00:13:19,399
false positives, for example, when it is difficult
to distinguish critical from non-critical

156
00:13:19,399 --> 00:13:20,800
contexts.

157
00:13:20,800 --> 00:13:28,329
For future work, we recommend combining static
and dynamic analysis for more accurate results.

158
00:13:28,330 --> 00:13:32,620
The problem of crypto misuses is interesting
and there are static and dynamic approaches

159
00:13:32,620 --> 00:13:37,310
that can detect misuses, but there is still
work to do to understand the real extent of

160
00:13:37,310 --> 00:13:38,579
this problem.

161
00:13:38,580 --> 00:13:43,200
First, we need to improve the analysis of
the applications. For dynamic tools, this

162
00:13:43,200 --> 00:13:48,050
means improving the coverage by using, for
example, test generators that try to trigger

163
00:13:48,050 --> 00:13:53,481
the execution of specific APIs. In our work,
we used Monkey as it was easy to use, but

164
00:13:53,481 --> 00:13:58,410
smarter test generators can guarantee better
results especially for applications that require

165
00:13:58,410 --> 00:14:01,180
information such as login credentials.

166
00:14:01,180 --> 00:14:06,630
Second, we need to improve the accuracy of
rule checking. The safety of using a particular

167
00:14:06,630 --> 00:14:11,370
parameter for an API depends on the context.
For example, a broken hash algorithm can be

168
00:14:11,370 --> 00:14:17,020
used to generate unique IDs for non sensitive
data. To distinguish these situations, we

169
00:14:17,020 --> 00:14:22,160
can log more information on the usage of certain
APIs or exploit static analysis.

170
00:14:22,160 --> 00:14:28,380
In this presentation, I talked about CRYLOGGER,
a dynamic tool to detect cryptographic misuses.

171
00:14:28,380 --> 00:14:33,240
The tool is available on GitHub if you want
to check it out.

172
00:14:33,240 --> 00:14:37,770
We showed that it is possible to analyze thousands
of applications to look for cryptographic

173
00:14:37,770 --> 00:14:43,180
misuses but accuracy must be further improved
to avoid false positives, false negatives

174
00:14:43,180 --> 00:14:47,870
and more in general to make the analysis more
accurate. We suggest combining static and

175
00:14:47,870 --> 00:14:52,950
dynamic approaches as these have unique advantages
that can improve the overall understanding

176
00:14:52,950 --> 00:14:56,850
of crypto misuses when combined.

177
00:14:56,850 --> 00:14:58,420
Thank you for watching this presentation.

