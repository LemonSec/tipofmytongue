1
00:00:01,360 --> 00:00:03,280
hello everyone i'm andrea semmato and

2
00:00:03,280 --> 00:00:04,880
i'm a phd student at evercom

3
00:00:04,880 --> 00:00:06,319
today i'm going to present you our work

4
00:00:06,319 --> 00:00:08,720
trust but verify a longitudinal analysis

5
00:00:08,720 --> 00:00:11,759
of android oem compliance customization

6
00:00:11,759 --> 00:00:13,440
nowadays the android ecosystem consists

7
00:00:13,440 --> 00:00:15,679
of more than 1 300 different vendors

8
00:00:15,679 --> 00:00:17,119
that builds more than twenty four

9
00:00:17,119 --> 00:00:19,840
thousand different devices

10
00:00:19,840 --> 00:00:21,840
however some of the customization made

11
00:00:21,840 --> 00:00:23,920
by the vendors may also introduce

12
00:00:23,920 --> 00:00:25,920
vulnerabilities at the source code level

13
00:00:25,920 --> 00:00:27,680
or may also lower down the security of

14
00:00:27,680 --> 00:00:29,199
the entire device we're changing for

15
00:00:29,199 --> 00:00:31,119
example sensitive configuration file

16
00:00:31,119 --> 00:00:32,079
used to build

17
00:00:32,079 --> 00:00:35,440
native libraries of the kernel component

18
00:00:35,440 --> 00:00:37,280
in order to avoid that this dangerous

19
00:00:37,280 --> 00:00:39,040
customization take place

20
00:00:39,040 --> 00:00:40,719
google start to introduce a set of rules

21
00:00:40,719 --> 00:00:42,320
to follow the first

22
00:00:42,320 --> 00:00:43,440
set of rule takes the name of

23
00:00:43,440 --> 00:00:45,600
compatibility definition document

24
00:00:45,600 --> 00:00:47,200
this document is published for every new

25
00:00:47,200 --> 00:00:49,360
version of android and basically states

26
00:00:49,360 --> 00:00:51,199
what the vendor must do

27
00:00:51,199 --> 00:00:53,199
what the vendor must never do and what

28
00:00:53,199 --> 00:00:54,640
the vendor should do what is strongly

29
00:00:54,640 --> 00:00:56,079
recommended to do when dealing with the

30
00:00:56,079 --> 00:00:58,000
customization of the system

31
00:00:58,000 --> 00:00:59,520
the second set of guidelines takes the

32
00:00:59,520 --> 00:01:01,600
name of security enhancement

33
00:01:01,600 --> 00:01:03,840
the security arrangement basically lists

34
00:01:03,840 --> 00:01:05,199
all the security features and tools that

35
00:01:05,199 --> 00:01:06,720
are at the disposal of the vendor when

36
00:01:06,720 --> 00:01:08,000
dealing with the customization of the

37
00:01:08,000 --> 00:01:09,520
system

38
00:01:09,520 --> 00:01:11,040
compatibility ignition documents are a

39
00:01:11,040 --> 00:01:12,320
set of rules that are written in a

40
00:01:12,320 --> 00:01:13,600
natural language

41
00:01:13,600 --> 00:01:15,840
as we can see here for android 8 the

42
00:01:15,840 --> 00:01:17,520
compatibility deviation document states

43
00:01:17,520 --> 00:01:19,280
that all the kernel must implement stack

44
00:01:19,280 --> 00:01:19,759
buffer

45
00:01:19,759 --> 00:01:21,520
for protection mechanism and this means

46
00:01:21,520 --> 00:01:23,119
that vendor if they want to target

47
00:01:23,119 --> 00:01:24,080
android 8

48
00:01:24,080 --> 00:01:26,080
they must configure their kernel in this

49
00:01:26,080 --> 00:01:28,640
specific configuration

50
00:01:28,640 --> 00:01:30,240
if you look for the security enhancement

51
00:01:30,240 --> 00:01:32,240
however we can see that on top of the

52
00:01:32,240 --> 00:01:32,640
rule

53
00:01:32,640 --> 00:01:35,040
the defender must follow the vendor can

54
00:01:35,040 --> 00:01:36,159
also decide to adopt

55
00:01:36,159 --> 00:01:38,840
other hardening features for example

56
00:01:38,840 --> 00:01:40,640
kslr

57
00:01:40,640 --> 00:01:42,240
in this paper we want to investigate

58
00:01:42,240 --> 00:01:44,000
whether vendor actually respect these

59
00:01:44,000 --> 00:01:45,600
rules

60
00:01:45,600 --> 00:01:47,680
to perform this investigation however we

61
00:01:47,680 --> 00:01:49,439
must first understand how normally a

62
00:01:49,439 --> 00:01:50,720
vendor modify

63
00:01:50,720 --> 00:01:53,360
an android image everything starts from

64
00:01:53,360 --> 00:01:55,040
the original keeper manufacturer that

65
00:01:55,040 --> 00:01:56,880
from now on we will call the vendor that

66
00:01:56,880 --> 00:01:58,320
four core clone a specific

67
00:01:58,320 --> 00:02:00,320
version and a specific release branch

68
00:02:00,320 --> 00:02:02,240
from the north open source project

69
00:02:02,240 --> 00:02:04,479
as we can see for a specific android

70
00:02:04,479 --> 00:02:05,600
version for example

71
00:02:05,600 --> 00:02:07,920
uh diversion nine there might be several

72
00:02:07,920 --> 00:02:10,080
lattice branches

73
00:02:10,080 --> 00:02:11,920
once the codebase is ready then the

74
00:02:11,920 --> 00:02:13,599
customization might take place

75
00:02:13,599 --> 00:02:15,360
as we saw before customization may take

76
00:02:15,360 --> 00:02:16,640
place in several

77
00:02:16,640 --> 00:02:18,319
layers starting from the kernel to the

78
00:02:18,319 --> 00:02:20,480
system up down to the device drive

79
00:02:20,480 --> 00:02:22,160
moreover the vendor can also modify

80
00:02:22,160 --> 00:02:24,560
initialization script sv linux policy on

81
00:02:24,560 --> 00:02:26,000
everything that relates to the graphical

82
00:02:26,000 --> 00:02:27,760
user interface

83
00:02:27,760 --> 00:02:29,360
when the system is fully customized and

84
00:02:29,360 --> 00:02:31,280
ready to be shipped on the device

85
00:02:31,280 --> 00:02:34,160
then the vendor can also decide to

86
00:02:34,160 --> 00:02:34,720
perform

87
00:02:34,720 --> 00:02:36,480
a set of testing that takes the name of

88
00:02:36,480 --> 00:02:38,080
compatibility tests with the manual test

89
00:02:38,080 --> 00:02:39,680
suite

90
00:02:39,680 --> 00:02:41,040
at this point we also want to thank

91
00:02:41,040 --> 00:02:42,640
google for an important clarification

92
00:02:42,640 --> 00:02:43,040
that

93
00:02:43,040 --> 00:02:44,959
at this stage only compatibility test

94
00:02:44,959 --> 00:02:47,120
suite are mandatory for a vendor

95
00:02:47,120 --> 00:02:50,160
and we wrote that also vendor test suite

96
00:02:50,160 --> 00:02:52,400
were needed but we thank google for this

97
00:02:52,400 --> 00:02:54,080
clarification

98
00:02:54,080 --> 00:02:56,800
when compatibility test suite are done

99
00:02:56,800 --> 00:02:58,159
if they are completely passed

100
00:02:58,159 --> 00:03:01,040
then the vendor can also be branded as

101
00:03:01,040 --> 00:03:02,800
android the compatible device

102
00:03:02,800 --> 00:03:04,239
and may also be equipped with the google

103
00:03:04,239 --> 00:03:05,920
mobile services this means

104
00:03:05,920 --> 00:03:08,159
all the mobile application developed by

105
00:03:08,159 --> 00:03:09,680
google starting from gmail

106
00:03:09,680 --> 00:03:12,000
to the google play store otherwise if

107
00:03:12,000 --> 00:03:13,920
the compatibility is sweet or not passed

108
00:03:13,920 --> 00:03:15,920
then the device might not be branded as

109
00:03:15,920 --> 00:03:18,159
android compatible device

110
00:03:18,159 --> 00:03:19,760
so once we know how the customization

111
00:03:19,760 --> 00:03:22,000
normally takes place then we can also

112
00:03:22,000 --> 00:03:22,800
start hunting

113
00:03:22,800 --> 00:03:25,599
for this customization to understand

114
00:03:25,599 --> 00:03:27,680
whether or not they respect this rule

115
00:03:27,680 --> 00:03:29,519
to perform these analysis we decide to

116
00:03:29,519 --> 00:03:31,680
build a pipeline that takes an input

117
00:03:31,680 --> 00:03:33,840
system image in the form of an archive

118
00:03:33,840 --> 00:03:34,959
normally in this archive

119
00:03:34,959 --> 00:03:36,720
we have all the file systems that will

120
00:03:36,720 --> 00:03:38,959
be flashed on the system

121
00:03:38,959 --> 00:03:41,680
once we unpack the archive then we can

122
00:03:41,680 --> 00:03:42,080
mount

123
00:03:42,080 --> 00:03:44,239
all the file system and at this stage we

124
00:03:44,239 --> 00:03:46,159
will have access to all the file that

125
00:03:46,159 --> 00:03:48,239
will be flash on the device

126
00:03:48,239 --> 00:03:50,080
so at this stage we can perform all the

127
00:03:50,080 --> 00:03:51,599
extraction of the data and the feature

128
00:03:51,599 --> 00:03:52,799
that we want to analyze

129
00:03:52,799 --> 00:03:54,720
and for this specific research we want

130
00:03:54,720 --> 00:03:56,319
to focus on a subset

131
00:03:56,319 --> 00:03:58,239
of levels that the vendor normally

132
00:03:58,239 --> 00:04:00,799
modify so for our researcher we decided

133
00:04:00,799 --> 00:04:01,599
to analyze

134
00:04:01,599 --> 00:04:03,920
the kernel modification s linux policy

135
00:04:03,920 --> 00:04:04,640
in script

136
00:04:04,640 --> 00:04:06,400
and the executable in the form of

137
00:04:06,400 --> 00:04:08,000
binaries and lovers

138
00:04:08,000 --> 00:04:09,920
at this stage it is also important to

139
00:04:09,920 --> 00:04:11,920
identify the correct android based image

140
00:04:11,920 --> 00:04:13,120
that was used by the vendor

141
00:04:13,120 --> 00:04:14,879
so to extract the correct version of the

142
00:04:14,879 --> 00:04:17,040
corrector is branch

143
00:04:17,040 --> 00:04:18,720
after that all the data extraction phase

144
00:04:18,720 --> 00:04:20,399
is done we have our own profile so we

145
00:04:20,399 --> 00:04:22,639
have all the features that characterize

146
00:04:22,639 --> 00:04:25,680
a system image modified by the van

147
00:04:25,680 --> 00:04:27,919
then since we were able to identify

148
00:04:27,919 --> 00:04:29,040
correctly the

149
00:04:29,040 --> 00:04:30,720
android version and the android release

150
00:04:30,720 --> 00:04:32,960
branch we can perform

151
00:04:32,960 --> 00:04:35,120
the same initial stage of the vendor so

152
00:04:35,120 --> 00:04:36,800
we clone and compile and generate open

153
00:04:36,800 --> 00:04:37,759
source project

154
00:04:37,759 --> 00:04:39,440
and we extract the same data that we

155
00:04:39,440 --> 00:04:41,199
want that we extracted from the system

156
00:04:41,199 --> 00:04:42,400
image

157
00:04:42,400 --> 00:04:44,160
so at this stage we will also have the

158
00:04:44,160 --> 00:04:45,680
original profile of the android open

159
00:04:45,680 --> 00:04:47,040
source image

160
00:04:47,040 --> 00:04:48,880
this two profile will then allow us to

161
00:04:48,880 --> 00:04:50,800
perform two complementary analysis

162
00:04:50,800 --> 00:04:53,520
the first one relates to compliance this

163
00:04:53,520 --> 00:04:55,280
means that we take the one profile

164
00:04:55,280 --> 00:04:57,600
we analyze if it respects all the rules

165
00:04:57,600 --> 00:04:58,960
defined in the compatibility definition

166
00:04:58,960 --> 00:04:59,919
document

167
00:04:59,919 --> 00:05:01,919
but also a customization analysis this

168
00:05:01,919 --> 00:05:03,360
means that if we have

169
00:05:03,360 --> 00:05:06,160
both the original profile and the

170
00:05:06,160 --> 00:05:08,160
profile modified by the vendor

171
00:05:08,160 --> 00:05:11,039
then we can check by comparing them if

172
00:05:11,039 --> 00:05:13,039
the customization made by the vendor

173
00:05:13,039 --> 00:05:14,880
are in line with the security line of

174
00:05:14,880 --> 00:05:16,639
the android the open source project

175
00:05:16,639 --> 00:05:18,639
or if they are lowering down the overall

176
00:05:18,639 --> 00:05:20,720
security of the system

177
00:05:20,720 --> 00:05:22,800
we use this pipeline to analyze more

178
00:05:22,800 --> 00:05:25,280
than 2 900 different system images

179
00:05:25,280 --> 00:05:27,360
all of which are configured with google

180
00:05:27,360 --> 00:05:28,720
mobile services so

181
00:05:28,720 --> 00:05:30,000
in theory they should have passed

182
00:05:30,000 --> 00:05:32,639
compatibility street

183
00:05:32,639 --> 00:05:35,840
our data set is back from 2009 with the

184
00:05:35,840 --> 00:05:36,479
oldest

185
00:05:36,479 --> 00:05:39,840
android version of 1.6 up to android 9

186
00:05:39,840 --> 00:05:40,479
the lightest

187
00:05:40,479 --> 00:05:44,160
version that we have dates to 2020.

188
00:05:44,160 --> 00:05:47,360
in total we analyze uh system images for

189
00:05:47,360 --> 00:05:50,800
from 42 different vendors so let's now

190
00:05:50,800 --> 00:05:53,919
see how we verify the compliance

191
00:05:53,919 --> 00:05:56,240
we decided to focus our attention on the

192
00:05:56,240 --> 00:05:57,440
compliance analysis for

193
00:05:57,440 --> 00:06:00,240
three specific layers the kernel the ac

194
00:06:00,240 --> 00:06:03,680
linux policies and the binary arm

195
00:06:03,680 --> 00:06:05,360
for the sake of time now we will only

196
00:06:05,360 --> 00:06:07,280
analyze what we did for the kernel but

197
00:06:07,280 --> 00:06:08,479
please keep in mind that also the

198
00:06:08,479 --> 00:06:09,919
analysis for this linux policy and

199
00:06:09,919 --> 00:06:11,039
banner regarding

200
00:06:11,039 --> 00:06:13,680
are completely different analysis and if

201
00:06:13,680 --> 00:06:14,479
you want to see

202
00:06:14,479 --> 00:06:16,880
all the detailed results for these

203
00:06:16,880 --> 00:06:20,080
analysis please refer to the paper

204
00:06:20,080 --> 00:06:22,479
so as we saw before we have access to

205
00:06:22,479 --> 00:06:24,240
the system image from the vendor within

206
00:06:24,240 --> 00:06:25,759
the system image we have the kernel

207
00:06:25,759 --> 00:06:26,880
binary

208
00:06:26,880 --> 00:06:28,479
and as we saw before for the compatible

209
00:06:28,479 --> 00:06:30,240
definition documents the

210
00:06:30,240 --> 00:06:31,680
master rule defines a set of

211
00:06:31,680 --> 00:06:33,520
configuration file the configuration

212
00:06:33,520 --> 00:06:34,000
flags that

213
00:06:34,000 --> 00:06:36,560
must be adopted by the vendor this means

214
00:06:36,560 --> 00:06:37,759
that we have to extract

215
00:06:37,759 --> 00:06:40,240
all the configuration used by the vendor

216
00:06:40,240 --> 00:06:41,600
when configuring the kernel

217
00:06:41,600 --> 00:06:43,039
but at this stage we also decide to

218
00:06:43,039 --> 00:06:45,039
extract the symbols

219
00:06:45,039 --> 00:06:46,560
we extract both of them because there is

220
00:06:46,560 --> 00:06:48,560
a direct mapping between configuration

221
00:06:48,560 --> 00:06:49,919
and symbols

222
00:06:49,919 --> 00:06:51,680
and this means that if you are lacking

223
00:06:51,680 --> 00:06:52,960
of the uh

224
00:06:52,960 --> 00:06:54,560
symbols we can go back to the

225
00:06:54,560 --> 00:06:56,560
configuration and visa verse so we are

226
00:06:56,560 --> 00:06:58,720
trying to extract as much information as

227
00:06:58,720 --> 00:07:00,240
possible

228
00:07:00,240 --> 00:07:01,759
once we have a list of configuration

229
00:07:01,759 --> 00:07:03,520
that the vendor used when configuring

230
00:07:03,520 --> 00:07:04,560
the kernel we can

231
00:07:04,560 --> 00:07:06,960
start the compliance analysis so we take

232
00:07:06,960 --> 00:07:08,560
the kernel we take the configuration

233
00:07:08,560 --> 00:07:10,479
file we take the version of android

234
00:07:10,479 --> 00:07:12,080
we take the corresponding compatibility

235
00:07:12,080 --> 00:07:14,000
deviation document and we check if the

236
00:07:14,000 --> 00:07:15,280
kernel actually respects

237
00:07:15,280 --> 00:07:16,479
all the rules that are defined in this

238
00:07:16,479 --> 00:07:19,360
must and also if the kernel implements

239
00:07:19,360 --> 00:07:20,720
any of the rules that are defined as

240
00:07:20,720 --> 00:07:22,479
strongly recommended on the

241
00:07:22,479 --> 00:07:24,160
compatibility division document for the

242
00:07:24,160 --> 00:07:26,479
specific version of android

243
00:07:26,479 --> 00:07:29,039
however our results show that even with

244
00:07:29,039 --> 00:07:30,720
the compatibility definition document

245
00:07:30,720 --> 00:07:32,400
still eighty percent of the kernel

246
00:07:32,400 --> 00:07:33,919
violated the compatibility definition

247
00:07:33,919 --> 00:07:34,800
document

248
00:07:34,800 --> 00:07:36,240
and the most common violation that we

249
00:07:36,240 --> 00:07:38,560
found on 150 kernel actually

250
00:07:38,560 --> 00:07:40,319
relates to the missing of these two

251
00:07:40,319 --> 00:07:41,759
configuration

252
00:07:41,759 --> 00:07:43,759
flags that marks a sensitive memory

253
00:07:43,759 --> 00:07:45,360
region as a read-only in the kernel for

254
00:07:45,360 --> 00:07:47,520
example

255
00:07:47,520 --> 00:07:49,520
so we saw that eight percent of the

256
00:07:49,520 --> 00:07:51,680
kernel binaries they do not respect the

257
00:07:51,680 --> 00:07:53,680
compatibility definition document

258
00:07:53,680 --> 00:07:55,680
but we also see that for what concern

259
00:07:55,680 --> 00:07:58,800
the s linux policy we still see 29

260
00:07:58,800 --> 00:08:00,319
of the policies that are not in line

261
00:08:00,319 --> 00:08:01,840
which is a set of roots

262
00:08:01,840 --> 00:08:03,680
please keep in mind that at this stage

263
00:08:03,680 --> 00:08:05,039
we analyze the policy that is

264
00:08:05,039 --> 00:08:06,960
retrievable from the

265
00:08:06,960 --> 00:08:08,639
from a static firmware and not from a

266
00:08:08,639 --> 00:08:10,240
running device

267
00:08:10,240 --> 00:08:12,240
and this might slightly change the

268
00:08:12,240 --> 00:08:13,280
result if

269
00:08:13,280 --> 00:08:15,919
you repeat the same analysis on a policy

270
00:08:15,919 --> 00:08:16,800
extracted from

271
00:08:16,800 --> 00:08:20,080
from a device and also for what concern

272
00:08:20,080 --> 00:08:20,879
the binary is

273
00:08:20,879 --> 00:08:22,800
we saw that roughly three percent of the

274
00:08:22,800 --> 00:08:24,560
raw materialize actually have some

275
00:08:24,560 --> 00:08:26,479
relation for what concern the kernel

276
00:08:26,479 --> 00:08:27,360
binary the

277
00:08:27,360 --> 00:08:30,720
binary hardening feature so

278
00:08:30,720 --> 00:08:33,120
after having analyzed the compliance of

279
00:08:33,120 --> 00:08:34,080
the uh

280
00:08:34,080 --> 00:08:36,080
modification made by the vendors so we

281
00:08:36,080 --> 00:08:37,200
also wanted to focus

282
00:08:37,200 --> 00:08:40,240
understanding how dangerous they are and

283
00:08:40,240 --> 00:08:41,679
so we decided to focus uh

284
00:08:41,679 --> 00:08:44,240
at this stage on analyzing how the

285
00:08:44,240 --> 00:08:45,680
customization takes place

286
00:08:45,680 --> 00:08:47,200
and what are the net effect on the

287
00:08:47,200 --> 00:08:49,279
security of the system

288
00:08:49,279 --> 00:08:51,200
we decided to analyze the balance of a

289
00:08:51,200 --> 00:08:52,640
customization for what concerned the

290
00:08:52,640 --> 00:08:55,440
user space binaries yes linux policies

291
00:08:55,440 --> 00:08:57,600
and the initialization script used by

292
00:08:57,600 --> 00:08:59,519
the android system

293
00:08:59,519 --> 00:09:01,200
the same for the compliance for the sake

294
00:09:01,200 --> 00:09:02,720
of time now we will only see the user

295
00:09:02,720 --> 00:09:03,680
space binaries

296
00:09:03,680 --> 00:09:05,680
if you want to see all the details for

297
00:09:05,680 --> 00:09:06,880
the remaining part

298
00:09:06,880 --> 00:09:08,240
of the analysis please refer to the

299
00:09:08,240 --> 00:09:10,560
paper

300
00:09:11,279 --> 00:09:12,720
to analyze the customization of the

301
00:09:12,720 --> 00:09:14,480
binaries we decided to

302
00:09:14,480 --> 00:09:16,880
adopt to complementary approach the

303
00:09:16,880 --> 00:09:18,800
first one is the differential analysis

304
00:09:18,800 --> 00:09:20,480
since we have both the profile of the

305
00:09:20,480 --> 00:09:21,839
system and the android open source

306
00:09:21,839 --> 00:09:22,560
project

307
00:09:22,560 --> 00:09:24,560
then we instruct all the common alphas

308
00:09:24,560 --> 00:09:27,040
that are shared between the two images

309
00:09:27,040 --> 00:09:29,920
at this stage when we have both the

310
00:09:29,920 --> 00:09:30,720
common alphas

311
00:09:30,720 --> 00:09:32,480
that are basically in the same location

312
00:09:32,480 --> 00:09:34,160
of the file system we can start hunting

313
00:09:34,160 --> 00:09:35,360
for modification

314
00:09:35,360 --> 00:09:37,760
the first type of modification we want

315
00:09:37,760 --> 00:09:38,560
to analyze

316
00:09:38,560 --> 00:09:39,920
relates to the modification of the

317
00:09:39,920 --> 00:09:41,760
binaries for example if

318
00:09:41,760 --> 00:09:43,839
some functions are added or removed but

319
00:09:43,839 --> 00:09:45,680
also very interesting to see

320
00:09:45,680 --> 00:09:47,680
how these binaries were modified in

321
00:09:47,680 --> 00:09:49,680
terms of hardening compilation features

322
00:09:49,680 --> 00:09:52,640
used by the vendor once the differential

323
00:09:52,640 --> 00:09:53,680
analysis is done

324
00:09:53,680 --> 00:09:56,320
then we can perform an additional

325
00:09:56,320 --> 00:09:57,760
customization analysis

326
00:09:57,760 --> 00:09:59,440
where this time we only focus on the new

327
00:09:59,440 --> 00:10:01,120
executable elaborates that are added by

328
00:10:01,120 --> 00:10:02,240
the vendor

329
00:10:02,240 --> 00:10:04,320
and we decide to focus our attention

330
00:10:04,320 --> 00:10:06,160
only on the analysis of the android

331
00:10:06,160 --> 00:10:08,560
compiler option at this stage

332
00:10:08,560 --> 00:10:10,000
so let's now see the binary

333
00:10:10,000 --> 00:10:11,760
customization analysis for what concerns

334
00:10:11,760 --> 00:10:13,600
the modification of the shared libraries

335
00:10:13,600 --> 00:10:13,920
and

336
00:10:13,920 --> 00:10:17,360
executables as you can see on the top

337
00:10:17,360 --> 00:10:18,959
part of the graph we have the mean of

338
00:10:18,959 --> 00:10:21,200
percentage of share library that are

339
00:10:21,200 --> 00:10:24,079
modified by the vendors while the lower

340
00:10:24,079 --> 00:10:24,880
part of the graph

341
00:10:24,880 --> 00:10:26,480
shows the mean number of new functions

342
00:10:26,480 --> 00:10:27,600
that are introduced in a shared

343
00:10:27,600 --> 00:10:28,800
elaborate

344
00:10:28,800 --> 00:10:30,320
as we can see starting from roughly

345
00:10:30,320 --> 00:10:32,800
android 15 there is it is almost a

346
00:10:32,800 --> 00:10:34,399
constant thread of roughly 18 new

347
00:10:34,399 --> 00:10:35,760
functionality to 20

348
00:10:35,760 --> 00:10:37,600
of the system libraries this is

349
00:10:37,600 --> 00:10:39,680
particularly bad for what concerns the

350
00:10:39,680 --> 00:10:40,880
application with the patch

351
00:10:40,880 --> 00:10:43,360
because the modifying shared robberies

352
00:10:43,360 --> 00:10:44,720
might made

353
00:10:44,720 --> 00:10:47,200
the application of the patching not

354
00:10:47,200 --> 00:10:47,760
automate

355
00:10:47,760 --> 00:10:49,920
not automatized and also might increase

356
00:10:49,920 --> 00:10:51,680
the time of which these patched

357
00:10:51,680 --> 00:10:55,040
are ported to the system

358
00:10:55,040 --> 00:10:56,959
an additional analysis that we perform

359
00:10:56,959 --> 00:10:58,240
on the compiler

360
00:10:58,240 --> 00:11:02,640
mitigation shows uh on the left

361
00:11:02,640 --> 00:11:04,160
the results that we extracted from the

362
00:11:04,160 --> 00:11:06,000
android open source project while on the

363
00:11:06,000 --> 00:11:06,480
right

364
00:11:06,480 --> 00:11:09,040
on the green side the results that we

365
00:11:09,040 --> 00:11:10,000
extracted from the

366
00:11:10,000 --> 00:11:13,680
vendor binaries as we can see

367
00:11:13,680 --> 00:11:15,519
vendors significantly got behind with

368
00:11:15,519 --> 00:11:17,279
respect to the android open source

369
00:11:17,279 --> 00:11:18,000
project

370
00:11:18,000 --> 00:11:19,120
when dealing with the compiler

371
00:11:19,120 --> 00:11:21,040
mitigation

372
00:11:21,040 --> 00:11:23,519
roughly starting from android 23 24 we

373
00:11:23,519 --> 00:11:25,440
can see how the binaries in android open

374
00:11:25,440 --> 00:11:26,480
source project

375
00:11:26,480 --> 00:11:28,640
completely enable uh security mitigation

376
00:11:28,640 --> 00:11:30,240
like stack cannon is not executable

377
00:11:30,240 --> 00:11:31,680
stock and forklift law

378
00:11:31,680 --> 00:11:33,680
while vendors do not yet adopt all the

379
00:11:33,680 --> 00:11:35,040
mitigation that are provided by

380
00:11:35,040 --> 00:11:35,839
compilers

381
00:11:35,839 --> 00:11:38,959
unlike android open source project so to

382
00:11:38,959 --> 00:11:40,800
sum up the result of these analysis on

383
00:11:40,800 --> 00:11:42,079
the customization

384
00:11:42,079 --> 00:11:43,680
we saw that for the binaries there is

385
00:11:43,680 --> 00:11:45,360
this constant trend of system libraries

386
00:11:45,360 --> 00:11:46,240
modification

387
00:11:46,240 --> 00:11:48,640
and we also saw our vendor use

388
00:11:48,640 --> 00:11:50,240
deprecated function probably due to

389
00:11:50,240 --> 00:11:51,760
legacy code

390
00:11:51,760 --> 00:11:53,440
the answer on the signups policies you

391
00:11:53,440 --> 00:11:54,959
showed that this trend of aggressive

392
00:11:54,959 --> 00:11:55,760
modification

393
00:11:55,760 --> 00:11:58,240
actually is valid also for these uh

394
00:11:58,240 --> 00:11:59,279
analysis here

395
00:11:59,279 --> 00:12:01,120
we saw a vendor aggressively modified

396
00:12:01,120 --> 00:12:02,880
default policy we identify some of the

397
00:12:02,880 --> 00:12:03,360
vendor

398
00:12:03,360 --> 00:12:05,440
uh having policies that are 20 times

399
00:12:05,440 --> 00:12:07,760
bigger than the original one

400
00:12:07,760 --> 00:12:09,120
offered by the android open source

401
00:12:09,120 --> 00:12:11,120
project and we believe that this growing

402
00:12:11,120 --> 00:12:12,639
number of customization might have the

403
00:12:12,639 --> 00:12:14,399
risk of having over a privileged rule

404
00:12:14,399 --> 00:12:14,800
which

405
00:12:14,800 --> 00:12:17,519
of course open uh security issues in the

406
00:12:17,519 --> 00:12:19,120
in the system

407
00:12:19,120 --> 00:12:21,519
and last for what concerning script we

408
00:12:21,519 --> 00:12:23,519
saw that this trend is valid also for

409
00:12:23,519 --> 00:12:25,360
this component we saw a vendor

410
00:12:25,360 --> 00:12:27,200
considerably change initialization

411
00:12:27,200 --> 00:12:27,839
script

412
00:12:27,839 --> 00:12:30,480
to start always growing number of

413
00:12:30,480 --> 00:12:32,639
overprivileged services

414
00:12:32,639 --> 00:12:34,560
we also identified that there might be

415
00:12:34,560 --> 00:12:37,279
several security and repercussion

416
00:12:37,279 --> 00:12:40,480
issues for the device and for the end

417
00:12:40,480 --> 00:12:41,200
user

418
00:12:41,200 --> 00:12:44,240
for example for 18 images that we

419
00:12:44,240 --> 00:12:44,880
analyzed

420
00:12:44,880 --> 00:12:47,120
we identified how the rom uh configured

421
00:12:47,120 --> 00:12:48,160
the services

422
00:12:48,160 --> 00:12:50,399
to start the boot of the system at the

423
00:12:50,399 --> 00:12:51,279
boot of the system

424
00:12:51,279 --> 00:12:54,320
the vendor was starting tcp dump tcp

425
00:12:54,320 --> 00:12:54,800
dump

426
00:12:54,800 --> 00:12:56,320
is particularly bad because it was

427
00:12:56,320 --> 00:12:58,160
listening in uh for

428
00:12:58,160 --> 00:13:01,680
all the uh interfaces exposed by

429
00:13:01,680 --> 00:13:03,519
the device which opens of course a

430
00:13:03,519 --> 00:13:05,040
problem for the privacy because

431
00:13:05,040 --> 00:13:08,480
all the network traffic that is

432
00:13:08,560 --> 00:13:11,200
read by tcp dumper then can be expected

433
00:13:11,200 --> 00:13:12,800
but also we analyzed out this

434
00:13:12,800 --> 00:13:15,920
might also add a security issue because

435
00:13:15,920 --> 00:13:18,720
for some of these uh rom we identify our

436
00:13:18,720 --> 00:13:20,720
diversion of tcp dump was updated

437
00:13:20,720 --> 00:13:24,079
with public uh cvs and also public proof

438
00:13:24,079 --> 00:13:25,200
concepts were available

439
00:13:25,200 --> 00:13:28,079
we were able to test uh one particular

440
00:13:28,079 --> 00:13:29,760
version of tcp dump

441
00:13:29,760 --> 00:13:31,279
with the public profile concept and we

442
00:13:31,279 --> 00:13:32,839
were able actually to replicate the

443
00:13:32,839 --> 00:13:34,639
crash

444
00:13:34,639 --> 00:13:37,200
so to conclude we perform a longitudinal

445
00:13:37,200 --> 00:13:38,720
scale analysis of more than 2

446
00:13:38,720 --> 00:13:42,160
900 different rob we found that many

447
00:13:42,160 --> 00:13:44,160
certified rom actually do not meet the

448
00:13:44,160 --> 00:13:45,519
prerequisites that are defined in the

449
00:13:45,519 --> 00:13:47,199
compatibility definition document

450
00:13:47,199 --> 00:13:49,600
and so they are not compliant and also

451
00:13:49,600 --> 00:13:51,920
we saw how specifically vendor-specific

452
00:13:51,920 --> 00:13:52,639
components

453
00:13:52,639 --> 00:13:54,480
significantly behind with respect to the

454
00:13:54,480 --> 00:13:55,920
security posture of the main android

455
00:13:55,920 --> 00:13:57,199
open source project

456
00:13:57,199 --> 00:13:59,040
i liking how this customization normally

457
00:13:59,040 --> 00:14:00,320
relates to the lack of compiler

458
00:14:00,320 --> 00:14:02,079
mitigation of the configuration

459
00:14:02,079 --> 00:14:03,839
of a privileged services and linux

460
00:14:03,839 --> 00:14:05,760
policy thank you very much for your

461
00:14:05,760 --> 00:14:07,040
attention if you have any question

462
00:14:07,040 --> 00:14:08,160
please feel free to ask

463
00:14:08,160 --> 00:14:10,560
thanks

