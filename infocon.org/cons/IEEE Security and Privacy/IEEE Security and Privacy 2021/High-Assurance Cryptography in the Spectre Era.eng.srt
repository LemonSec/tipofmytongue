1
00:00:02,879 --> 00:00:04,000
hello everyone

2
00:00:04,000 --> 00:00:06,000
today i'll be presenting our work on

3
00:00:06,000 --> 00:00:07,440
protecting formula verified

4
00:00:07,440 --> 00:00:09,280
cryptographic libraries from spectre

5
00:00:09,280 --> 00:00:10,559
style attacks

6
00:00:10,559 --> 00:00:12,160
this is joint work with the many

7
00:00:12,160 --> 00:00:17,119
wonderful co-authors listed here

8
00:00:17,119 --> 00:00:18,240
so it's pretty well known that

9
00:00:18,240 --> 00:00:19,760
cryptography is really difficult to get

10
00:00:19,760 --> 00:00:20,800
right

11
00:00:20,800 --> 00:00:22,480
cryptographic design flaws

12
00:00:22,480 --> 00:00:23,840
implementation bugs

13
00:00:23,840 --> 00:00:25,359
and side channel vulnerabilities are

14
00:00:25,359 --> 00:00:27,599
regularly found even in the most widely

15
00:00:27,599 --> 00:00:29,679
used libraries

16
00:00:29,679 --> 00:00:30,880
and because of their large attack

17
00:00:30,880 --> 00:00:33,280
surface for security

18
00:00:33,280 --> 00:00:34,719
crypto implementations should achieve

19
00:00:34,719 --> 00:00:37,360
what we call the big four guarantees

20
00:00:37,360 --> 00:00:39,520
first they should be memory safe to

21
00:00:39,520 --> 00:00:42,160
prevent leaking seekers held in memory

22
00:00:42,160 --> 00:00:43,280
second they should be functionally

23
00:00:43,280 --> 00:00:45,200
correct with respect to some standard

24
00:00:45,200 --> 00:00:47,360
specification

25
00:00:47,360 --> 00:00:49,120
third they should be provenly secure to

26
00:00:49,120 --> 00:00:51,680
rule out important classes of attacks

27
00:00:51,680 --> 00:00:54,160
and finally they should be constant time

28
00:00:54,160 --> 00:00:55,760
to avoid leaking seizures through timing

29
00:00:55,760 --> 00:00:58,320
side channels

30
00:00:58,320 --> 00:01:00,079
problem is that achieving any one of

31
00:01:00,079 --> 00:01:01,520
these can be difficult let alone

32
00:01:01,520 --> 00:01:03,280
achieving all of them at once

33
00:01:03,280 --> 00:01:05,438
so to help a lot of recent research

34
00:01:05,438 --> 00:01:06,799
looks to using high assurance

35
00:01:06,799 --> 00:01:08,320
cryptography techniques

36
00:01:08,320 --> 00:01:09,680
to develop high performance

37
00:01:09,680 --> 00:01:11,520
implementations with formal machine

38
00:01:11,520 --> 00:01:14,720
checkable guarantees for the big four

39
00:01:14,720 --> 00:01:16,320
although high assurance cryptography has

40
00:01:16,320 --> 00:01:18,479
been hugely successful in producing high

41
00:01:18,479 --> 00:01:19,040
speed

42
00:01:19,040 --> 00:01:20,560
cryptographic software with formally

43
00:01:20,560 --> 00:01:22,320
verified guarantees

44
00:01:22,320 --> 00:01:24,159
the bad news is that these guarantees

45
00:01:24,159 --> 00:01:25,360
can be undermined

46
00:01:25,360 --> 00:01:26,960
by recent microarchitectural side

47
00:01:26,960 --> 00:01:29,200
channel attacks such as spectre

48
00:01:29,200 --> 00:01:31,119
which exploits speculative execution in

49
00:01:31,119 --> 00:01:33,040
modern cpus

50
00:01:33,040 --> 00:01:35,280
in particular spectre style attacks

51
00:01:35,280 --> 00:01:36,079
reveal a gap

52
00:01:36,079 --> 00:01:37,840
between formal guarantees of constant

53
00:01:37,840 --> 00:01:40,159
time which hold for a sequential model

54
00:01:40,159 --> 00:01:41,200
of execution

55
00:01:41,200 --> 00:01:43,280
and practice where processors can

56
00:01:43,280 --> 00:01:45,040
execute instructions speculatively and

57
00:01:45,040 --> 00:01:46,960
out of order

58
00:01:46,960 --> 00:01:48,799
this mismatch combined with spectre

59
00:01:48,799 --> 00:01:50,960
style attacks can cast doubts on the

60
00:01:50,960 --> 00:01:52,399
robustness of high insurance

61
00:01:52,399 --> 00:01:53,520
cryptography

62
00:01:53,520 --> 00:01:55,840
so in this work we set out to study the

63
00:01:55,840 --> 00:01:57,680
impact of speculative execution

64
00:01:57,680 --> 00:02:01,040
on the big four guarantees

65
00:02:02,560 --> 00:02:04,479
our main goal in this work is to extend

66
00:02:04,479 --> 00:02:06,159
the big four guarantees to a setting

67
00:02:06,159 --> 00:02:08,239
with speculative execution

68
00:02:08,239 --> 00:02:11,760
we do this in four parts first we extend

69
00:02:11,760 --> 00:02:13,440
the classical notion of constant time

70
00:02:13,440 --> 00:02:15,360
which holds for a sequential setting

71
00:02:15,360 --> 00:02:17,120
to the notion of speculative constant

72
00:02:17,120 --> 00:02:18,720
time which holds for a speculative

73
00:02:18,720 --> 00:02:20,080
setting

74
00:02:20,080 --> 00:02:22,400
to do this we formalize an adversarial

75
00:02:22,400 --> 00:02:23,840
program semantics for speculative

76
00:02:23,840 --> 00:02:24,800
execution

77
00:02:24,800 --> 00:02:26,640
based on existing work by sanjay one of

78
00:02:26,640 --> 00:02:28,480
our co-authors and others

79
00:02:28,480 --> 00:02:30,319
and use this speculative semantics to

80
00:02:30,319 --> 00:02:32,239
redefine what it means for a program to

81
00:02:32,239 --> 00:02:35,200
be constant time

82
00:02:35,680 --> 00:02:38,000
second we develop a verification method

83
00:02:38,000 --> 00:02:40,640
for checking speculative constant time

84
00:02:40,640 --> 00:02:42,800
to simplify our verification approach we

85
00:02:42,800 --> 00:02:44,400
prove a key property of our semantics

86
00:02:44,400 --> 00:02:46,720
called secure forward consistency

87
00:02:46,720 --> 00:02:48,400
which drastically reduces the number of

88
00:02:48,400 --> 00:02:50,319
execution paths to be considered

89
00:02:50,319 --> 00:02:52,239
and also shows that code proven correct

90
00:02:52,239 --> 00:02:54,560
and secure in a sequential semantics

91
00:02:54,560 --> 00:02:56,080
also enjoys these properties in a

92
00:02:56,080 --> 00:02:59,280
speculative semantics

93
00:02:59,760 --> 00:03:01,840
third we integrate our verification

94
00:03:01,840 --> 00:03:03,519
method into the jasmine verification

95
00:03:03,519 --> 00:03:04,800
framework

96
00:03:04,800 --> 00:03:06,720
prior work has used jasmine to develop

97
00:03:06,720 --> 00:03:08,800
high-speed cryptographic assembly code

98
00:03:08,800 --> 00:03:10,560
that enjoys the big four guarantees in a

99
00:03:10,560 --> 00:03:11,840
sequential setting

100
00:03:11,840 --> 00:03:13,280
but now we've extended jasmine's

101
00:03:13,280 --> 00:03:14,959
capabilities to the speculative setting

102
00:03:14,959 --> 00:03:17,280
as well

103
00:03:17,760 --> 00:03:19,840
finally we use our extensions to the

104
00:03:19,840 --> 00:03:21,120
jasmine framework to develop

105
00:03:21,120 --> 00:03:22,879
spectral protected implementations of

106
00:03:22,879 --> 00:03:25,280
cha cha 20 and poly1305

107
00:03:25,280 --> 00:03:27,200
which are two key primitives used in tls

108
00:03:27,200 --> 00:03:28,799
1.3

109
00:03:28,799 --> 00:03:30,400
we find that the development and

110
00:03:30,400 --> 00:03:32,000
verification effort for adding spectra

111
00:03:32,000 --> 00:03:34,799
protections is not too onerous and that

112
00:03:34,799 --> 00:03:36,480
the performance overhead is relatively

113
00:03:36,480 --> 00:03:38,959
modest

114
00:03:40,640 --> 00:03:42,239
before we dive into things let's first

115
00:03:42,239 --> 00:03:43,519
explain what the classical notion of

116
00:03:43,519 --> 00:03:44,799
constant time is

117
00:03:44,799 --> 00:03:46,239
how it protects against timing side

118
00:03:46,239 --> 00:03:47,920
channels and what changes when

119
00:03:47,920 --> 00:03:49,599
speculative execution comes into the

120
00:03:49,599 --> 00:03:51,440
picture

121
00:03:51,440 --> 00:03:53,680
for crypto code even if it's function

122
00:03:53,680 --> 00:03:55,680
correct it can still leak secrets

123
00:03:55,680 --> 00:03:57,599
through timing side channels

124
00:03:57,599 --> 00:03:59,519
this happens if the code executes for an

125
00:03:59,519 --> 00:04:00,799
observably different time

126
00:04:00,799 --> 00:04:02,319
depending on the value of secret

127
00:04:02,319 --> 00:04:04,080
information

128
00:04:04,080 --> 00:04:06,720
for example in the left code snippet

129
00:04:06,720 --> 00:04:08,480
branching on a secret value can lead to

130
00:04:08,480 --> 00:04:10,319
a measurable timing variation

131
00:04:10,319 --> 00:04:11,840
since the body of the conditional is

132
00:04:11,840 --> 00:04:13,920
only executed if the secret value is

133
00:04:13,920 --> 00:04:15,680
true

134
00:04:15,680 --> 00:04:17,519
the right code snippet is a little more

135
00:04:17,519 --> 00:04:19,199
subtle the first

136
00:04:19,199 --> 00:04:21,199
line loads a byte b from the secret

137
00:04:21,199 --> 00:04:23,199
array and the second line

138
00:04:23,199 --> 00:04:25,040
loads a value from the table array using

139
00:04:25,040 --> 00:04:26,240
b

140
00:04:26,240 --> 00:04:28,080
this secret dependent memory access

141
00:04:28,080 --> 00:04:29,600
leaks secret data

142
00:04:29,600 --> 00:04:31,440
since the lookup to table b will be

143
00:04:31,440 --> 00:04:33,199
brought into cache

144
00:04:33,199 --> 00:04:35,120
an attacker can then infer the value of

145
00:04:35,120 --> 00:04:37,440
b by measuring timing variations when

146
00:04:37,440 --> 00:04:40,840
accessing different indices of the table

147
00:04:40,840 --> 00:04:43,199
array to protect against these timing

148
00:04:43,199 --> 00:04:44,400
side channels

149
00:04:44,400 --> 00:04:45,919
the constant time programming policy

150
00:04:45,919 --> 00:04:47,680
disallows control flow and memory

151
00:04:47,680 --> 00:04:48,320
accesses

152
00:04:48,320 --> 00:04:51,440
that depend on secret values

153
00:04:51,440 --> 00:04:52,960
unfortunately it turns out that applying

154
00:04:52,960 --> 00:04:54,560
constant time coding recipes

155
00:04:54,560 --> 00:04:56,479
to turn secret dependent code into

156
00:04:56,479 --> 00:04:57,840
secret independent code

157
00:04:57,840 --> 00:04:59,440
is pretty unnatural and tricky to do

158
00:04:59,440 --> 00:05:01,440
correctly so there are many existing

159
00:05:01,440 --> 00:05:03,039
tools that let developers annotate

160
00:05:03,039 --> 00:05:04,160
program inputs

161
00:05:04,160 --> 00:05:06,320
as either public or secret and then

162
00:05:06,320 --> 00:05:07,280
automatically check

163
00:05:07,280 --> 00:05:10,320
that the program is constant time

164
00:05:10,320 --> 00:05:11,680
it's worth pointing out though that

165
00:05:11,680 --> 00:05:13,360
essentially all of these tools consider

166
00:05:13,360 --> 00:05:15,600
only a sequential model of execution

167
00:05:15,600 --> 00:05:17,600
in which instructions execute in order

168
00:05:17,600 --> 00:05:20,560
one after another

169
00:05:22,080 --> 00:05:24,400
modern cpus however execute instructions

170
00:05:24,400 --> 00:05:25,199
out of order

171
00:05:25,199 --> 00:05:26,960
and speculatively to increase

172
00:05:26,960 --> 00:05:28,800
performance

173
00:05:28,800 --> 00:05:30,560
for example upon reaching a conditional

174
00:05:30,560 --> 00:05:32,880
branch modern cpus can use a branch

175
00:05:32,880 --> 00:05:33,600
predictor

176
00:05:33,600 --> 00:05:35,120
known as the pattern history table or

177
00:05:35,120 --> 00:05:37,919
pht to speculatively execute one of the

178
00:05:37,919 --> 00:05:39,440
branches before resolving the branch

179
00:05:39,440 --> 00:05:41,120
condition

180
00:05:41,120 --> 00:05:43,280
if the predicted path is correct then

181
00:05:43,280 --> 00:05:44,560
the cpu commits

182
00:05:44,560 --> 00:05:46,400
speculatively computer results to the

183
00:05:46,400 --> 00:05:47,759
architectural state

184
00:05:47,759 --> 00:05:49,280
and this leads to an overall performance

185
00:05:49,280 --> 00:05:51,120
boost

186
00:05:51,120 --> 00:05:52,720
otherwise if the predicted branch is

187
00:05:52,720 --> 00:05:55,280
incorrect the cpu backtracks to the last

188
00:05:55,280 --> 00:05:56,240
correct state

189
00:05:56,240 --> 00:05:58,160
by discarding all speculatively computer

190
00:05:58,160 --> 00:06:00,000
results and this results in performance

191
00:06:00,000 --> 00:06:02,080
similar to idling

192
00:06:02,080 --> 00:06:03,120
so although the results of

193
00:06:03,120 --> 00:06:04,880
misspeculation aren't ever committed to

194
00:06:04,880 --> 00:06:06,800
the architectural state

195
00:06:06,800 --> 00:06:08,080
remnants can still be left in the

196
00:06:08,080 --> 00:06:09,680
microarchitectural state such as the

197
00:06:09,680 --> 00:06:10,479
cache

198
00:06:10,479 --> 00:06:11,919
and this is the root cause of many

199
00:06:11,919 --> 00:06:13,919
recent high profile spectral style

200
00:06:13,919 --> 00:06:16,318
attacks

201
00:06:16,560 --> 00:06:18,479
to make things more concrete this code

202
00:06:18,479 --> 00:06:19,840
snippet which is secure in the

203
00:06:19,840 --> 00:06:20,800
sequential world

204
00:06:20,800 --> 00:06:22,400
is vulnerable to what's called a spectre

205
00:06:22,400 --> 00:06:24,240
phd attack

206
00:06:24,240 --> 00:06:26,080
the first line is a balance check on x

207
00:06:26,080 --> 00:06:27,520
which prevents reading secret memory

208
00:06:27,520 --> 00:06:29,360
outside of array 1.

209
00:06:29,360 --> 00:06:31,280
unfortunately an attacker can supply an

210
00:06:31,280 --> 00:06:33,120
out-of-bounds value for x

211
00:06:33,120 --> 00:06:35,520
such that array 1 of x reads secret

212
00:06:35,520 --> 00:06:37,440
memory outside of array 1

213
00:06:37,440 --> 00:06:39,039
and then mistrain the pht to

214
00:06:39,039 --> 00:06:41,280
speculatively bypass the bounce check

215
00:06:41,280 --> 00:06:42,960
so that a secret value is stored in the

216
00:06:42,960 --> 00:06:45,440
variable i

217
00:06:45,440 --> 00:06:47,360
this happens the third line loads the

218
00:06:47,360 --> 00:06:49,280
secret dependent memory location array

219
00:06:49,280 --> 00:06:50,160
two of i

220
00:06:50,160 --> 00:06:51,919
into the cache leading to a timing

221
00:06:51,919 --> 00:06:54,639
vulnerability

222
00:06:55,199 --> 00:06:56,800
memory fence instructions can in theory

223
00:06:56,800 --> 00:06:58,560
protect against these vulnerabilities

224
00:06:58,560 --> 00:07:00,400
these instructions act as speculation

225
00:07:00,400 --> 00:07:02,479
barriers and prevent further speculative

226
00:07:02,479 --> 00:07:04,080
execution until prior instructions have

227
00:07:04,080 --> 00:07:05,440
completed

228
00:07:05,440 --> 00:07:07,520
for example if we place a fence after

229
00:07:07,520 --> 00:07:09,280
the conditional branch

230
00:07:09,280 --> 00:07:11,199
this prevents the cpu from speculatively

231
00:07:11,199 --> 00:07:12,560
reading from array 1

232
00:07:12,560 --> 00:07:14,560
until the branch condition has resolved

233
00:07:14,560 --> 00:07:16,160
at which point any misspeculation will

234
00:07:16,160 --> 00:07:18,560
have been caught

235
00:07:18,560 --> 00:07:20,800
unfortunately inserting fences after

236
00:07:20,800 --> 00:07:22,639
every conditional to protect against

237
00:07:22,639 --> 00:07:24,960
specter pht and before each load

238
00:07:24,960 --> 00:07:26,479
instruction to protect against a

239
00:07:26,479 --> 00:07:28,560
different variant called spectre stl

240
00:07:28,560 --> 00:07:31,199
really hurts performance on the other

241
00:07:31,199 --> 00:07:31,919
hand

242
00:07:31,919 --> 00:07:33,280
heuristic approaches for inserting

243
00:07:33,280 --> 00:07:34,800
fences leads to shaky security

244
00:07:34,800 --> 00:07:36,800
guarantees

245
00:07:36,800 --> 00:07:38,960
so our solution is to automatically

246
00:07:38,960 --> 00:07:40,880
verify that implementations use fences

247
00:07:40,880 --> 00:07:41,520
correctly

248
00:07:41,520 --> 00:07:43,599
and efficiently to protect against

249
00:07:43,599 --> 00:07:45,039
specter style attacks

250
00:07:45,039 --> 00:07:47,280
specifically the specter pht and spectre

251
00:07:47,280 --> 00:07:50,159
stl variants

252
00:07:51,199 --> 00:07:52,479
in order to form a reason about

253
00:07:52,479 --> 00:07:54,000
speculative execution we first need to

254
00:07:54,000 --> 00:07:56,160
formalize its semantics

255
00:07:56,160 --> 00:07:57,599
i'm only going to choose some of those

256
00:07:57,599 --> 00:07:59,360
high level features of our semantics

257
00:07:59,360 --> 00:08:00,800
but the full details can be found in the

258
00:08:00,800 --> 00:08:03,039
paper

259
00:08:03,039 --> 00:08:04,479
the programs we consider are written in

260
00:08:04,479 --> 00:08:05,759
a core fragment of the jasmine

261
00:08:05,759 --> 00:08:06,800
programming language

262
00:08:06,800 --> 00:08:08,960
which includes commands for assignments

263
00:08:08,960 --> 00:08:10,080
memory loads

264
00:08:10,080 --> 00:08:12,240
memory stores conditionals loops and

265
00:08:12,240 --> 00:08:13,120
importantly

266
00:08:13,120 --> 00:08:15,440
fence instructions the program shown

267
00:08:15,440 --> 00:08:18,479
here is the one from before

268
00:08:19,039 --> 00:08:21,199
program states at a high level include

269
00:08:21,199 --> 00:08:22,080
main memory

270
00:08:22,080 --> 00:08:23,520
which is a mapping from addresses to

271
00:08:23,520 --> 00:08:26,000
values here addresses are pairs

272
00:08:26,000 --> 00:08:28,639
of array names and indices and for the

273
00:08:28,639 --> 00:08:30,560
sake of illustration suppose array 1 at

274
00:08:30,560 --> 00:08:31,360
index 8

275
00:08:31,360 --> 00:08:33,360
which is out of bounds holds a secret

276
00:08:33,360 --> 00:08:35,839
value s

277
00:08:36,479 --> 00:08:38,399
states include a special right buffer

278
00:08:38,399 --> 00:08:40,159
which contains sequences of delayed

279
00:08:40,159 --> 00:08:41,839
write instructions

280
00:08:41,839 --> 00:08:43,440
the right buffer is an essential for

281
00:08:43,440 --> 00:08:45,360
this example which is vulnerable to the

282
00:08:45,360 --> 00:08:47,360
classic spectre pht attack

283
00:08:47,360 --> 00:08:49,519
but in a nutshell we use the right

284
00:08:49,519 --> 00:08:51,760
buffer to model out of order execution

285
00:08:51,760 --> 00:08:53,279
on behalf of the cpu's memory

286
00:08:53,279 --> 00:08:55,519
disambiguator which can be exploited to

287
00:08:55,519 --> 00:08:59,360
perform specter stl vulnerabilities

288
00:09:00,160 --> 00:09:02,720
states also include a register map which

289
00:09:02,720 --> 00:09:04,560
is a mapping from registers to values

290
00:09:04,560 --> 00:09:05,360
and here

291
00:09:05,360 --> 00:09:08,800
the value x is set to zero and finally

292
00:09:08,800 --> 00:09:10,160
states also include

293
00:09:10,160 --> 00:09:12,560
a misspeculation flag which is set to

294
00:09:12,560 --> 00:09:14,399
true if misspeculation has occurred

295
00:09:14,399 --> 00:09:16,000
previously during execution

296
00:09:16,000 --> 00:09:19,040
and false otherwise

297
00:09:20,399 --> 00:09:22,000
our semantics is adversarial in the

298
00:09:22,000 --> 00:09:23,839
sense that program execution

299
00:09:23,839 --> 00:09:25,519
depends on a schedule of directives

300
00:09:25,519 --> 00:09:27,519
issued by the adversary

301
00:09:27,519 --> 00:09:29,680
for example at control flow points the

302
00:09:29,680 --> 00:09:30,560
step directive

303
00:09:30,560 --> 00:09:32,560
shown on the left allows execution to

304
00:09:32,560 --> 00:09:34,000
proceed normally

305
00:09:34,000 --> 00:09:35,440
while the force directive shown on the

306
00:09:35,440 --> 00:09:37,519
right forces execution to follow a

307
00:09:37,519 --> 00:09:40,399
particular branch

308
00:09:41,120 --> 00:09:42,720
and finally our semantics is also

309
00:09:42,720 --> 00:09:44,320
instrumented with observations

310
00:09:44,320 --> 00:09:47,440
to model timing side channel linkage for

311
00:09:47,440 --> 00:09:48,160
example

312
00:09:48,160 --> 00:09:50,080
the adversary can observe the targets of

313
00:09:50,080 --> 00:09:51,760
memory accesses via read and write

314
00:09:51,760 --> 00:09:52,880
observations

315
00:09:52,880 --> 00:09:56,959
and control flow via branch observations

316
00:09:56,959 --> 00:09:58,480
if we run this program on the state

317
00:09:58,480 --> 00:10:01,200
shown using the directive schedule step

318
00:10:01,200 --> 00:10:03,440
the condition with x being 0 evaluates

319
00:10:03,440 --> 00:10:04,399
to true

320
00:10:04,399 --> 00:10:07,279
making a branch true observation the

321
00:10:07,279 --> 00:10:08,160
next line

322
00:10:08,160 --> 00:10:10,240
leaks a read of array one at zero with

323
00:10:10,240 --> 00:10:11,440
value three

324
00:10:11,440 --> 00:10:13,760
and the last line makes a read of array

325
00:10:13,760 --> 00:10:14,640
two

326
00:10:14,640 --> 00:10:17,680
at three with value nine using the

327
00:10:17,680 --> 00:10:18,000
schedule

328
00:10:18,000 --> 00:10:19,839
force true leads to the same

329
00:10:19,839 --> 00:10:22,560
observations

330
00:10:22,560 --> 00:10:24,959
and informally we say that a program is

331
00:10:24,959 --> 00:10:26,640
speculatively constant time

332
00:10:26,640 --> 00:10:29,519
if for every choice of directives leaked

333
00:10:29,519 --> 00:10:31,519
observations do not depend on secret

334
00:10:31,519 --> 00:10:33,279
values

335
00:10:33,279 --> 00:10:34,640
at least in the program executions we've

336
00:10:34,640 --> 00:10:36,800
considered so far no secret values have

337
00:10:36,800 --> 00:10:39,279
been leaked

338
00:10:41,680 --> 00:10:45,279
but suppose the register map has x as 8.

339
00:10:45,279 --> 00:10:46,880
if the adversary chooses the directive

340
00:10:46,880 --> 00:10:48,399
schedule force true

341
00:10:48,399 --> 00:10:51,040
which bypasses the bounds check then the

342
00:10:51,040 --> 00:10:52,800
execution misspeculates

343
00:10:52,800 --> 00:10:54,560
which sets the misspeculation factor

344
00:10:54,560 --> 00:10:56,160
true and

345
00:10:56,160 --> 00:10:59,200
leaks a read of array 1 at 8 with secret

346
00:10:59,200 --> 00:11:00,240
value s

347
00:11:00,240 --> 00:11:03,760
and a read of array 2 at s with value 7.

348
00:11:03,760 --> 00:11:05,360
the secret dependent memory access array

349
00:11:05,360 --> 00:11:07,200
2 of s can lead to a timing

350
00:11:07,200 --> 00:11:08,160
vulnerability

351
00:11:08,160 --> 00:11:09,839
so this program is not speculatively

352
00:11:09,839 --> 00:11:12,480
constant time

353
00:11:13,440 --> 00:11:14,959
we can fix this program by adding a

354
00:11:14,959 --> 00:11:17,360
fence instruction after the conditional

355
00:11:17,360 --> 00:11:19,680
which acts as a speculation barrier and

356
00:11:19,680 --> 00:11:21,440
prevents further speculative execution

357
00:11:21,440 --> 00:11:24,399
until prior instructions have completed

358
00:11:24,399 --> 00:11:26,160
if we run this program on state with

359
00:11:26,160 --> 00:11:28,240
register x as eight

360
00:11:28,240 --> 00:11:30,560
the adversary can issue the force true

361
00:11:30,560 --> 00:11:31,440
directive

362
00:11:31,440 --> 00:11:33,519
which sets the misspeculation flag to

363
00:11:33,519 --> 00:11:37,120
true and leaks a branch true observation

364
00:11:37,120 --> 00:11:38,800
however because there's a fence

365
00:11:38,800 --> 00:11:40,880
instruction in the way the adversary can

366
00:11:40,880 --> 00:11:42,640
only proceed by issuing a backtrack

367
00:11:42,640 --> 00:11:43,680
directive

368
00:11:43,680 --> 00:11:45,360
which checks if misspeculation has

369
00:11:45,360 --> 00:11:48,320
occurred and backtracks if so

370
00:11:48,320 --> 00:11:50,639
since the misspeculation flag is true

371
00:11:50,639 --> 00:11:52,399
execution backtracks and leaks a

372
00:11:52,399 --> 00:11:54,639
backtrack observation

373
00:11:54,639 --> 00:11:56,240
and now the only way for the adversary

374
00:11:56,240 --> 00:11:57,839
to complete the program execution

375
00:11:57,839 --> 00:12:00,079
is by issuing a step directive which

376
00:12:00,079 --> 00:12:01,839
skips the conditional body

377
00:12:01,839 --> 00:12:05,200
leaking a final branch false observation

378
00:12:05,200 --> 00:12:06,560
since the leaked observations don't

379
00:12:06,560 --> 00:12:08,800
depend on secret data this program is

380
00:12:08,800 --> 00:12:12,399
now speculatively constant time

381
00:12:13,279 --> 00:12:14,959
we next developed a verification method

382
00:12:14,959 --> 00:12:16,880
for checking speculative constant time

383
00:12:16,880 --> 00:12:18,480
and we integrated it into the jasmine

384
00:12:18,480 --> 00:12:20,160
verification framework

385
00:12:20,160 --> 00:12:21,839
prior work has verified the big four

386
00:12:21,839 --> 00:12:23,279
guarantees of jasmine programs in a

387
00:12:23,279 --> 00:12:24,480
sequential setting

388
00:12:24,480 --> 00:12:26,560
and i've used jasmine certified compiler

389
00:12:26,560 --> 00:12:28,000
to carry these guarantees all the way

390
00:12:28,000 --> 00:12:29,680
down to assembly

391
00:12:29,680 --> 00:12:32,000
in our work we extend jasmine's support

392
00:12:32,000 --> 00:12:33,440
for verifying the big four

393
00:12:33,440 --> 00:12:35,440
by inserting our speculative analyses

394
00:12:35,440 --> 00:12:38,000
into the compilation process

395
00:12:38,000 --> 00:12:39,920
we also prove a key result called secure

396
00:12:39,920 --> 00:12:41,200
forward consistency

397
00:12:41,200 --> 00:12:42,720
that significantly simplifies our

398
00:12:42,720 --> 00:12:44,959
analysis and it also carries functional

399
00:12:44,959 --> 00:12:46,240
correctness and provable security

400
00:12:46,240 --> 00:12:47,040
guarantees

401
00:12:47,040 --> 00:12:49,040
establishing a sequential setting to the

402
00:12:49,040 --> 00:12:53,839
spectrometer setting quite seamlessly

403
00:12:53,839 --> 00:12:55,760
using our extensions to jasmine we

404
00:12:55,760 --> 00:12:57,200
developed verified scalar

405
00:12:57,200 --> 00:12:59,920
and avx-2 implementations of cha cha 20

406
00:12:59,920 --> 00:13:01,440
and poly1305

407
00:13:01,440 --> 00:13:03,519
which enjoy functional correctness an

408
00:13:03,519 --> 00:13:05,200
extended memory safety property we call

409
00:13:05,200 --> 00:13:06,480
speculative safety

410
00:13:06,480 --> 00:13:09,040
and of course speculative constant time

411
00:13:09,040 --> 00:13:10,959
we compare our verified implementations

412
00:13:10,959 --> 00:13:11,360
with

413
00:13:11,360 --> 00:13:15,360
unverified open ssl implementations

414
00:13:16,000 --> 00:13:17,519
in our performance measurements we

415
00:13:17,519 --> 00:13:19,279
report the cycles per byte

416
00:13:19,279 --> 00:13:20,720
for processing messages of varying

417
00:13:20,720 --> 00:13:23,440
lengths here lower is better

418
00:13:23,440 --> 00:13:25,519
on the left we show the scalar cha cha

419
00:13:25,519 --> 00:13:27,360
20 implementations and on the right we

420
00:13:27,360 --> 00:13:28,639
showed the avx-2

421
00:13:28,639 --> 00:13:31,839
charger implementations the purple lines

422
00:13:31,839 --> 00:13:32,399
in both

423
00:13:32,399 --> 00:13:35,200
are unverified open ssl implementations

424
00:13:35,200 --> 00:13:37,200
the green lines are specter protected

425
00:13:37,200 --> 00:13:38,959
jasmine implementations and the blue

426
00:13:38,959 --> 00:13:40,720
lines are non-spectre protected jasmine

427
00:13:40,720 --> 00:13:42,399
invitations

428
00:13:42,399 --> 00:13:44,000
overall we find that our spectre

429
00:13:44,000 --> 00:13:45,600
protected imputations come with only a

430
00:13:45,600 --> 00:13:49,680
modest performance overhead

431
00:13:49,680 --> 00:13:51,360
in terms of developer and verification

432
00:13:51,360 --> 00:13:52,800
effort we found that

433
00:13:52,800 --> 00:13:54,480
most of the effort was spent in fixing

434
00:13:54,480 --> 00:13:56,480
speculative safety issues

435
00:13:56,480 --> 00:13:58,240
after that there was relatively little

436
00:13:58,240 --> 00:13:59,839
additional work for fixing speculative

437
00:13:59,839 --> 00:14:01,760
time constant time issues

438
00:14:01,760 --> 00:14:03,279
the functional equivalence proofs were

439
00:14:03,279 --> 00:14:05,279
mostly automatic and as part of future

440
00:14:05,279 --> 00:14:06,240
work we plan to

441
00:14:06,240 --> 00:14:08,000
connect our implementations to provable

442
00:14:08,000 --> 00:14:10,000
security guarantees thus completing the

443
00:14:10,000 --> 00:14:12,399
big four

444
00:14:12,399 --> 00:14:14,320
to conclude the key findings of our work

445
00:14:14,320 --> 00:14:16,399
are that one we can lift existing

446
00:14:16,399 --> 00:14:17,839
approaches for the big four to

447
00:14:17,839 --> 00:14:20,320
speculative execution

448
00:14:20,320 --> 00:14:22,000
second the performance overhead of

449
00:14:22,000 --> 00:14:23,279
spectrum protections is relatively

450
00:14:23,279 --> 00:14:24,880
modest

451
00:14:24,880 --> 00:14:26,240
and in the future we hope to adapt our

452
00:14:26,240 --> 00:14:27,440
general approach to other

453
00:14:27,440 --> 00:14:30,000
microarchitectural side channels

454
00:14:30,000 --> 00:14:31,120
if you're interested in learning more i

455
00:14:31,120 --> 00:14:32,399
hope that you'll check out our paper and

456
00:14:32,399 --> 00:14:38,480
i'll be happy to take any questions

