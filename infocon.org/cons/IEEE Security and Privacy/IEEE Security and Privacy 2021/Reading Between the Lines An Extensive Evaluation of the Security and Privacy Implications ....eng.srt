1
00:00:00,690 --> 00:00:01,690
Hello everyone.

2
00:00:01,690 --> 00:00:06,420
I’m Gertjan, I’m a PhD student at DistriNet
at the University of Leuven.

3
00:00:06,420 --> 00:00:11,049
And today, I’m gonna present our paper “Reading
Between the Lines: An Extensive Evaluation

4
00:00:11,049 --> 00:00:15,518
of the Security and Privacy Implications of
EPUB Reading Systems”

5
00:00:15,519 --> 00:00:19,570
But before we get too technical, let me first
give you some context.

6
00:00:19,570 --> 00:00:25,820
Nowadays, almost any book is not only published
in a physical format, but also in a digital

7
00:00:25,820 --> 00:00:27,890
format, so-called e-books.

8
00:00:27,890 --> 00:00:31,760
And since their introduction, e-books have
grown into a multi-billion dollar market.

9
00:00:31,760 --> 00:00:38,510
This, in turn, gave rise to a lot of e-book
formats, each one defining their own architecture.

10
00:00:38,510 --> 00:00:44,739
Now, most of these formats are proprietary. For example, 
owned by a publishing company.

11
00:00:44,739 --> 00:00:49,959
Luckily, in an attempt to promote consensus,
an open e-book format was introduced, as what

12
00:00:49,960 --> 00:00:53,250
is now known as the EPUB technical standard.

13
00:00:53,250 --> 00:00:57,960
Since then EPUB has become very popular, as
now it is one of the most widely supported

14
00:00:57,960 --> 00:01:00,090
e-book formats across devices.

15
00:01:00,090 --> 00:01:03,950
Now let’s have a look at the specification.

16
00:01:03,950 --> 00:01:09,720
Here, I’d like to focus on two main parts,
being the architecture of EPUB files and the

17
00:01:09,720 --> 00:01:13,000
way applications are supposed to render EPUBs.

18
00:01:13,000 --> 00:01:17,200
These applications are called EPUB reading
systems.

19
00:01:17,200 --> 00:01:23,320
The specification describes an EPUB as a ZIP
archive with an internal predefined structure.

20
00:01:23,320 --> 00:01:28,220
This ZIP archive contains all the necessary
information to represent the e-book.

21
00:01:28,221 --> 00:01:33,490
Most importantly: the actual text and imagery included
by the author.

22
00:01:33,490 --> 00:01:35,589
But how is this content represented?

23
00:01:35,590 --> 00:01:42,930
Well, EPUBs primarily consist of XHTML documents,
CSS stylesheets and possibly even JavaScript

24
00:01:42,930 --> 00:01:46,220
code, making EPUBs bear close resemblance
to actual websites.

25
00:01:48,250 --> 00:01:53,990
As for EPUB reading systems, these will render
EPUBs according to the specification.

26
00:01:53,990 --> 00:01:55,920
And why reinvent the wheel here?

27
00:01:55,920 --> 00:02:00,750
For this, EPUB reading systems rely on web
engines, the same components that are used

28
00:02:00,750 --> 00:02:02,450
by web browsers.

29
00:02:02,450 --> 00:02:07,700
And like browsers grant certain capabilities
to loaded web pages, EPUB reading systems

30
00:02:07,700 --> 00:02:12,170
grant certain capabilities to loaded EPUBs.

31
00:02:12,170 --> 00:02:14,839
This brings us to our research questions.

32
00:02:14,840 --> 00:02:20,100
The first question is: what is the state of
freely available EPUB reading systems, on

33
00:02:20,100 --> 00:02:25,680
one hand in terms of capabilities granted
to loaded EPUBs and on the other hand in the

34
00:02:25,680 --> 00:02:28,410
context of upheld security considerations.

35
00:02:28,410 --> 00:02:35,280
Or, simply put, what is an EPUB allowed to
do on the user’s device?

36
00:02:35,280 --> 00:02:39,066
This ecosystem has never been subjected to
a thorough evaluation,

37
00:02:39,066 --> 00:02:44,730
and according to us, this is paramount for providing
the user with more transparency, also taking

38
00:02:44,730 --> 00:02:51,780
into account the rather lenient security considerations
described in the EPUB specification.

39
00:02:51,780 --> 00:02:57,120
For the second question, we focus on the EPUBs
that are being distributed online; are the

40
00:02:57,120 --> 00:03:00,810
identified capabilities already being abused
in the wild.

41
00:03:00,810 --> 00:03:03,330
Here, we consider two threat models.

42
00:03:03,330 --> 00:03:08,760
Can we find find malicious EPUBs that abuse
capabilities to harm, for example an attacker

43
00:03:08,760 --> 00:03:11,390
who tries to hack a user’s device.

44
00:03:11,390 --> 00:03:16,829
And can we find EPUBs that abuse capabilities
to track, for example a publisher who’d

45
00:03:16,830 --> 00:03:21,510
like to know more about the user’s reading
interests.

46
00:03:21,510 --> 00:03:26,720
To answer the first question, we collected
92 of the most popular free reading systems

47
00:03:26,720 --> 00:03:31,900
across 7 different platforms, and additionally
5 physical e-readers.

48
00:03:31,900 --> 00:03:37,640
As a side-note: Amazon reading systems do
not support EPUBs but here we used a conversion

49
00:03:37,640 --> 00:03:42,369
tool to convert the EPUBs to a compatible
format.

50
00:03:42,370 --> 00:03:48,120
When you are to evaluate such a large collection
of applications, you better automate it, right?

51
00:03:48,120 --> 00:03:53,420
So this is what we did as much as possible,
however, crippled by the large variety of different

52
00:03:53,420 --> 00:03:55,690
user interfaces.

53
00:03:55,690 --> 00:04:01,819
To this end, developed a semi-automated testbed
which performs a blackbox evaluation, as shown

54
00:04:01,819 --> 00:04:02,869
on the diagram.

55
00:04:02,870 --> 00:04:08,200
Our crafted EPUBs are embedded with experiments
that probe for certain attack primitives.

56
00:04:08,200 --> 00:04:13,369
When loaded, these experiments would execute
and instruct the EPUB reading system to display

57
00:04:13,370 --> 00:04:20,060
the result, or if allowed by the reading system,
send the result to our local server.

58
00:04:20,060 --> 00:04:22,470
The outcome is then stored for later analysis.

59
00:04:22,470 --> 00:04:26,030
In total, we performed 8 different experiments.

60
00:04:26,030 --> 00:04:32,710
I’ll give a general overview of those experiments,
but for more details I refer to our paper.

61
00:04:32,710 --> 00:04:40,349
First, we checked whether embedded JavaScript
is executed, a rather straightforward experiment.

62
00:04:40,350 --> 00:04:45,900
Then, we inferred whether the EPUB is allowed
to communicate with remote servers, for which

63
00:04:45,900 --> 00:04:49,099
we used a comprehensive collection of mechanisms.

64
00:04:49,100 --> 00:04:53,680
We also checked whether the reading system
requires user consent, which is recommended

65
00:04:53,680 --> 00:04:56,480
by the specification.

66
00:04:56,480 --> 00:05:01,639
The remainder of experiments require JavaScript,
and were only performed for reading systems

67
00:05:01,639 --> 00:05:05,505
which execute embedded JavaScript.

68
00:05:05,505 --> 00:05:11,370
In the third experiment, we investigated whether
the EPUB is granted reading access to the

69
00:05:11,370 --> 00:05:13,330
local file system.

70
00:05:13,330 --> 00:05:18,310
More specifically, can it infer whether a
certain file is present on the file system,

71
00:05:18,310 --> 00:05:25,410
for example through timing attacks? And can
it actually read the contents of this file?

72
00:05:25,410 --> 00:05:31,389
We also evaluated whether the EPUB can store
data, leveraging inherited web engine functionalities

73
00:05:31,389 --> 00:05:38,200
like cookies or the local storage API, and
whether this data persists between reading sessions.

74
00:05:38,200 --> 00:05:42,060
This could be used for tracking purposes.

75
00:05:42,060 --> 00:05:47,740
As you already might know, nowadays web pages
can request the user for access to features

76
00:05:47,740 --> 00:05:51,852
like the device’s microphone, webcam or
even location.

77
00:05:51,852 --> 00:05:58,789
In this experiment, we checked whether this
functionality was inherited from the embedded web engine.

78
00:05:58,789 --> 00:06:03,849
If the reading system supports URI handles,
this can be abused for example to initiate

79
00:06:03,850 --> 00:06:07,380
a phone call, send an e-mail, or download a file.

80
00:06:07,380 --> 00:06:12,980
Here, we tried to open applications leveraging
various handles.

81
00:06:12,980 --> 00:06:18,150
For each reading system, we identified the
embedded web engine, leveraging a web engine

82
00:06:18,150 --> 00:06:20,250
fingerprinting technique.

83
00:06:20,250 --> 00:06:25,299
This way, we checked whether this web engine
was outdated and vulnerable.

84
00:06:25,299 --> 00:06:30,849
And lastly, for smartphones, we also checked
whether the scripts embedded in the EPUB were

85
00:06:30,850 --> 00:06:36,040
able to keep running, even after the user
switched focus to another app.

86
00:06:36,040 --> 00:06:39,780
This could increase the time window for a
potential attack.

87
00:06:40,752 --> 00:06:43,259
OK, let’s move on to the actual results.

88
00:06:43,259 --> 00:06:47,460
Again, I’ll give a general overview of the
most interesting results.

89
00:06:47,460 --> 00:06:51,530
For more details, I refer to our paper.

90
00:06:51,530 --> 00:06:57,070
As is displayed here in this table, almost
half of the evaluated reading systems execute

91
00:06:57,070 --> 00:06:59,010
embedded JavaScript.

92
00:06:59,010 --> 00:07:02,300
This number is the smallest for browser extensions
and e-readers.

93
00:07:02,300 --> 00:07:08,741
With the former, in 7 cases inline scripts
were blocked by an active Content Security Policy.

94
00:07:08,741 --> 00:07:15,187
With the latter, we suspect the engine is
configured not to execute any embedded JavaScript.

95
00:07:15,187 --> 00:07:22,733
Also about half of the reading systems allowed
remote communication, of which only one required user consent.

96
00:07:22,733 --> 00:07:31,988
This means that almost half of the reading
systems are not compliant with the EPUB specification’s security considerations.

97
00:07:31,988 --> 00:07:38,761
Again, the next experiments were only performed
for the reading systems which allow JavaScript execution.

98
00:07:38,761 --> 00:07:44,870
In 16 of those reading systems, a loaded EPUB could
infer the existence of a certain file on the

99
00:07:44,870 --> 00:07:53,614
local file system, and in 8 of those reading systemts it could
also read and thus leak the contents of this file.

100
00:07:53,614 --> 00:07:59,210
Interesting here is that none of the iOS applications
was susceptible to this vulnerability due

101
00:07:59,210 --> 00:08:01,060
to iOS’s strict permission model.

102
00:08:01,060 --> 00:08:07,090
Here, none of the applications requested access
to the file system as a whole, only permission

103
00:08:07,090 --> 00:08:11,270
was requested for the actual EPUB file to
be opened.

104
00:08:11,270 --> 00:08:19,101
Furthermore, for the browser extensions, the
enforced Same-Origin Policy prevented access to local files.

105
00:08:19,101 --> 00:08:25,733
And also interesting: 21 reading systems provide
the means for persistent storage between reading sessions,

106
00:08:25,733 --> 00:08:28,864
which can be leveraged to enable
tracking.

107
00:08:30,000 --> 00:08:35,044
Although the results of our semi-automated
analysis provide a comprehensive picture of

108
00:08:35,044 --> 00:08:40,510
the state of free EPUB reading systems, we
argue that the exposed issues only pose as

109
00:08:40,510 --> 00:08:42,000
a lower bound.

110
00:08:42,000 --> 00:08:46,320
Our framework considers each reading system
as a black box, and performs the same experiments,

111
00:08:46,320 --> 00:08:49,748
essentially pushing the same buttons on each
try.

112
00:08:49,748 --> 00:08:55,250
Most attackers are much more inventive than
this, they examine the application for weaknesses

113
00:08:55,250 --> 00:08:57,480
in order to exploit them.

114
00:08:57,480 --> 00:09:02,610
To demonstrate that this strategy would expose
more issues, we performed a case study on

115
00:09:02,610 --> 00:09:09,010
the most popular reading systems on three
different platforms by manual analysis.

116
00:09:09,010 --> 00:09:12,990
On desktop, this is Apple Books, which comes
pre-installed on MacOS.

117
00:09:12,990 --> 00:09:19,320
Here, we discovered that a symbolic link could
be abused to leak user information or to launch

118
00:09:19,320 --> 00:09:24,700
a persistant Denial of Service attack against
the application.

119
00:09:24,700 --> 00:09:30,200
The second case study involves the EPUBReader
extension for both Chrome and Firefox.

120
00:09:30,200 --> 00:09:35,959
This extension required the <all_urls> permission,
which allows the extension to read responses,

121
00:09:35,959 --> 00:09:37,709
from any website.

122
00:09:37,709 --> 00:09:43,280
By circumventing the Content Security Policy,
we were able to execute our embedded scripts,

123
00:09:43,280 --> 00:09:47,574
which led to a universal cross-site scripting
attack.

124
00:09:47,575 --> 00:09:53,950
And lastly, by reverse-engineering the Amazon
Kindle, the most popular e-reader, we exposed

125
00:09:53,950 --> 00:09:59,660
an input validation issue which enabled otherwise
disabled JavaScript execution.

126
00:09:59,660 --> 00:10:05,290
Because the embedded web engine is an outdated
WebKit version with publicly disclosed vulnerabilities,

127
00:10:05,290 --> 00:10:10,679
we could exploit one of those to leak the
entire library of the user.

128
00:10:12,118 --> 00:10:17,310
Now that we have an idea of the general state of
EPUB reading systems, let’s have a look

129
00:10:17,310 --> 00:10:20,957
at EPUBs in the wild, our second research
question.

130
00:10:20,957 --> 00:10:29,107
Users generally obtain e-books in two distinct ways; 
either through legal channels such as online book stores,

131
00:10:29,107 --> 00:10:33,351
or through illegal channels such as
file sharing platforms.

132
00:10:33,351 --> 00:10:40,718
To evaluate the latter ecosystem we downloaded
a total of 9.000 EPUBs from The Pirate Bay and 4shared.

133
00:10:40,718 --> 00:10:45,269
To check whether any of them were malicious,
we parsed the contents for suspicious elements

134
00:10:45,269 --> 00:10:48,553
such as scripts or references to local files.

135
00:10:48,553 --> 00:10:54,461
This way, we discovered that less than 1%
actually embedded scripts, of which all were benign.

136
00:10:54,461 --> 00:10:57,970
No abuse was detected whatsoever.

137
00:10:57,970 --> 00:11:03,120
As for the legal channels, we downloaded several
free e-books from 5 popular e-book stores.

138
00:11:03,120 --> 00:11:10,387
Again, after manual analysis, we did not find
any indications for tracking, nor malicious intent.

139
00:11:10,387 --> 00:11:15,319
However, to find out whether it would be feasible
to publish a malicious e-book through official

140
00:11:15,320 --> 00:11:20,705
e-book vendors, we also assessed the self-publishing
ecosystem.

141
00:11:20,705 --> 00:11:25,269
 Most vendors nowadays provide a self-publishing service,
which can be used

142
00:11:25,269 --> 00:11:31,097
by smaller writers to publish digital books
without the interposition of a publisher.

143
00:11:31,097 --> 00:11:35,720
Since the manuscript is provided by an untrusted
party, being the writer, it would be good

144
00:11:35,720 --> 00:11:39,089
practice to sanitize before publication.

145
00:11:39,089 --> 00:11:44,100
We evaluated this sanitization process by
submitting our own manuscript to the six most

146
00:11:44,100 --> 00:11:47,769
popular and free self-publishing services.

147
00:11:47,769 --> 00:11:52,670
We checked whether any of our included primitives
were removed from the published version.

148
00:11:52,670 --> 00:11:59,670
This way, we found that out of the 6 self-publishing
services 4 do not sufficiently sanitize submitted

149
00:11:59,670 --> 00:12:06,334
manuscripts before publication, and can be
abused to effectively distribute malicious e-books.

150
00:12:06,335 --> 00:12:10,875
This accounts for 94% of the market share
of sold e-books.

151
00:12:12,000 --> 00:12:17,516
OK, we’ve come to the end of my presentation,
but allow me to recap in a few takeaways.

152
00:12:17,516 --> 00:12:22,740
First, our evaluation demonstrates that almost none
of the JavaScript-supporting reading systems

153
00:12:22,740 --> 00:12:25,630
adhere to the security considerations.

154
00:12:25,630 --> 00:12:32,659
We exposed various flaws, such as for example
file system isolation issues in 16 reading systems.

155
00:12:32,659 --> 00:12:40,052
In total, we contacted the developers of 37 reading systems
as part of our responsible disclosure.

156
00:12:40,052 --> 00:12:44,589
We’re very pleased that, as a result, the
reported issues have been fixed in various

157
00:12:44,589 --> 00:12:49,866
widely-used reading systems such as Apple
Books and the Amazon Kindle.

158
00:12:49,866 --> 00:12:54,470
As a more long-term solution, we propose to
revise the EPUB specification.

159
00:12:54,470 --> 00:12:59,253
Foremost, we urge to make the security considerations
more strict.

160
00:12:59,253 --> 00:13:04,769
For example, the enforcement of the Same-Origin
Policy should be an obligation instead of

161
00:13:04,769 --> 00:13:09,405
a consideration, to safeguard millions of
users.

162
00:13:09,405 --> 00:13:13,790
Furthermore, we argue that the inclusion of
practical developer guidelines for embedding

163
00:13:13,790 --> 00:13:18,319
web engines would greatly benefit the overall
security.

164
00:13:18,320 --> 00:13:24,520
This could prevent the misconfiguration of
important security policies and the unintentional

165
00:13:24,520 --> 00:13:29,281
inheritance of potentially dangerous web engine
functionalities.

166
00:13:29,282 --> 00:13:35,420
Moreover, the specification allows for several
questionable capabilities such as JavaScript

167
00:13:35,420 --> 00:13:39,029
execution and local and remote file access.

168
00:13:39,029 --> 00:13:44,330
Based on our real-world analysis, we argue
that prohibiting these capabilities would

169
00:13:44,330 --> 00:13:50,490
have a minimal usability impact, since adoption
is rare and all EPUBs analyzed in our real-world

170
00:13:50,490 --> 00:13:53,822
study would remain functional.

171
00:13:53,822 --> 00:13:58,727
Fortunately, we did not find any indication
of abuse in the wild, as of yet.

172
00:13:58,727 --> 00:14:05,083
However, we demonstrated that this is very
much possible, even through legal channels.

173
00:14:05,083 --> 00:14:09,781
Then lastly, we have open-sourced the semi-automated
evaluation testbed.

174
00:14:09,782 --> 00:14:14,145
This way, we hope to assist developers in
developing secure reading systems,

175
00:14:14,145 --> 00:14:18,180
but also to provide a level of transparency to end-users.

176
00:14:18,180 --> 00:14:22,737
We intend to maintain this project and welcome
any new contributions.

177
00:14:23,282 --> 00:14:28,366
With this, I conclude my presentation and
I thank you for your interest in our research.

