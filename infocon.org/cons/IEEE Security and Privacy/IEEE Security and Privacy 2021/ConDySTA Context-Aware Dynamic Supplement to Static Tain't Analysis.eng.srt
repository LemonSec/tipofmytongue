1
00:00:02,180 --> 00:00:07,590
Hi everyone, my name is Xueling, I am a PhD
student from UT san Antonio. Today I am going

2
00:00:07,590 --> 00:00:17,930
to talk about our work “ConDySTA: Context-Aware
Dynamic Supplement to Static Taint Analysis”.

3
00:00:17,930 --> 00:00:22,770
Taint Analysis is a data flow analysis technique,
which has been widely used in the security

4
00:00:22,770 --> 00:00:29,500
domain, especially for detecting privacy leak.
It can be used to track how private information

5
00:00:29,500 --> 00:00:34,410
flows through the program and see if it lows
to some untrusted places.

6
00:00:34,410 --> 00:00:40,970
A taint analysis tracks data from predefined
data source to predefined data sink and aims

7
00:00:40,970 --> 00:00:45,800
at discovering the data flow between sources
and sinks.

8
00:00:45,800 --> 00:00:52,069
Source is a resource where the data is accessed,
it could be some device resources like location,

9
00:00:52,070 --> 00:00:58,790
device identifiers, or some data from user’s
input, like email address or password. and

10
00:00:58,790 --> 00:01:07,500
sink is where the data will be written to,
like a local file, or text message message,

11
00:01:07,500 --> 00:01:13,290
This is an example from an android application,
where at line five we have the source data,

12
00:01:13,290 --> 00:01:20,350
where the program get user’s password from
the GUI inputbox, where user can input password

13
00:01:20,350 --> 00:01:26,860
when they login. Then the password is saved
as a string and then, this password string

14
00:01:26,860 --> 00:01:34,090
have been saved into the the class user. Under
the method sendMessage, which is a callback

15
00:01:34,090 --> 00:01:40,420
method, it can be triggered when the user
maybe clicked a button on the screen, then

16
00:01:40,420 --> 00:01:47,979
the program will fetch the password and put
each character to another string called obfpwd,

17
00:01:47,979 --> 00:01:54,840
and this obfpsw was put into another string
called message, and finally this message will

18
00:01:54,840 --> 00:02:03,420
be send out though the API sendTextMessage,
this is the sink point at line 24, where the

19
00:02:03,420 --> 00:02:10,220
password will be sent out though text message.
By looking at this code snippet, we can tell

20
00:02:10,220 --> 00:02:15,489
there’s might be dataflow from the user's
input password to send message.

21
00:02:15,489 --> 00:02:21,689
Well, A static taint analysis tool is able
to detect such data leak by tracing the dataflow

22
00:02:21,689 --> 00:02:26,519
from source to sink.

23
00:02:26,519 --> 00:02:32,900
Static taint analysis is conservative because
it propagate taints on all possible program

24
00:02:32,900 --> 00:02:38,709
paths, leading to the detection of all possible
taint flows with some false positives due

25
00:02:38,709 --> 00:02:41,209
to infeasible paths.

26
00:02:41,209 --> 00:02:46,949
Back to this example, static analyzer still
consider this data flow as a password leak,

27
00:02:46,949 --> 00:02:53,150
however, if the call back method sendMessage
will never be triggered during run time, if

28
00:02:53,150 --> 00:03:00,629
it is an infeasible execution path, then the
password leak will a false positive.

29
00:03:00,629 --> 00:03:07,780
Well, in security and privacy domain, it is
a well known problem that A static code analysis tool

30
00:03:07,780 --> 00:03:12,400
often produce false positive , sometimes
it’s acceptable because we don’t want

31
00:03:12,400 --> 00:03:15,189
to miss any potential leaks.

32
00:03:15,189 --> 00:03:22,078
However, false negative also exists in static
analysis and often been neglected due to the

33
00:03:22,079 --> 00:03:25,549
impression that statis analysis is always
conservative.

34
00:03:25,549 --> 00:03:33,019
Actually, In the real-world application, complicated
and heterogeneous code design often lead to

35
00:03:33,019 --> 00:03:35,719
false negatives in static taint analysis.

36
00:03:35,719 --> 00:03:41,659
these false negatives can come from the interaction
with third-party services, when the data is

37
00:03:41,659 --> 00:03:48,370
sent to a third-party services, the static
analyzer will lose the tracing, the false

38
00:03:48,370 --> 00:03:53,729
negative can also come rom dynamically loaded
code, where the static analyzer does not have

39
00:03:53,729 --> 00:03:59,220
access to. Those are kind of like a blackbox
code for the static analyzer.

40
00:03:59,220 --> 00:04:07,540
Okay, let's take a look at one example of
false negative, on the left, we have the source

41
00:04:07,540 --> 00:04:15,439
data at line 6, and then this source is saved
in a variable called in. then at line 7, we

42
00:04:15,439 --> 00:04:23,610
call the method foo and use in as the argument
, and inside the method foo, at line 2, we

43
00:04:23,610 --> 00:04:32,830
just assign in to out, and then return outback
to line 7, then at line 8, the out has been

44
00:04:32,830 --> 00:04:38,960
passed to the sink point. This data flow is
pretty simple and straightfoward, the static

45
00:04:38,960 --> 00:04:46,320
analyzer can detect such data flow from source
to sink. However, if we have a different definition

46
00:04:46,320 --> 00:04:52,650
of foo, where the variable in was send to
a third-party server, where we don't have

47
00:04:52,650 --> 00:05:00,179
access to their code, at this point, static
analyzer cannot trace this data anymore, and

48
00:05:00,180 --> 00:05:06,009
later when the data comes back from the server,
static analyzer won't be able to tell whether

49
00:05:06,009 --> 00:05:13,599
this is a tatin value or not, because it lose
the tracing of the data. In this case, static

50
00:05:13,599 --> 00:05:19,610
analyzer will miss this data flow and have
false negative, due to the inaccessible code

51
00:05:19,610 --> 00:05:22,189
in the remote server.

52
00:05:22,189 --> 00:05:31,470
We are trying to reduce such false negatives
by identifying the missing trace though dynamic

53
00:05:31,470 --> 00:05:37,289
analysis. Basically, we check the data returned
from the inaccessible code, and check whether

54
00:05:37,289 --> 00:05:46,219
it’s sensitive or not, if its sensitive
data, then we consider it as intermedia source

55
00:05:46,219 --> 00:05:51,509
and apply the intermediates source on the
static taint analysis. So, back to the previous

56
00:05:51,509 --> 00:05:52,509
example

57
00:05:52,509 --> 00:05:58,370
We will check the whether the return value
form the server is a sensitive data or not,

58
00:05:58,370 --> 00:06:05,740
it it is , we will consider the method foo
as an intermediate source, and apply static

59
00:06:05,740 --> 00:06:10,620
analysis on it to see if it’s flows to a
sink point, by doing this, we could detect

60
00:06:10,620 --> 00:06:13,409
the missing data flow. So that's the idea

61
00:06:13,409 --> 00:06:20,919
And in our design, there are two major components
in out approach, dynamic analysis, where we

62
00:06:20,919 --> 00:06:30,270
perform GUI testing to check the return value
and collect intermediate sources, and static

63
00:06:30,270 --> 00:06:36,150
analysis is where we apply static taint analysis
on the intermediate source.

64
00:06:36,150 --> 00:06:41,198
In the first step, When we perform dynamic
analysis to collect the intermediate sources,

65
00:06:41,199 --> 00:06:46,199
we instrument
all methods whose return types are String.

66
00:06:46,199 --> 00:06:49,780
After instrumentation, we rebuild the smali
code back

67
00:06:49,780 --> 00:06:54,378
into APK format for testing. We use the Android
Debug

68
00:06:54,379 --> 00:06:59,370
Bridge (adb) to automatically install the
rebuilt apps onto our test device, and then

69
00:06:59,370 --> 00:07:06,810
we use the predefined user profile to perform
the testing and let, and Monkey [20] to explore

70
00:07:06,810 --> 00:07:10,680
the app for 20
seconds. Monkey is a popular GUI testing tool

71
00:07:10,680 --> 00:07:16,020
that generate random user events on the android
application.

72
00:07:16,020 --> 00:07:20,628
During testing, we utilize the Android system
log

73
00:07:20,629 --> 00:07:24,349
to record the return values and call stacks
of String type

74
00:07:24,349 --> 00:07:28,460
methods. when a method returns a value contains
any

75
00:07:28,460 --> 00:07:33,810
user data that we defined in the user profile,
We consider that method as an

76
00:07:33,810 --> 00:07:35,830
intermediate source

77
00:07:35,830 --> 00:07:41,909
After identifies the intermediate source,
we apply it on FlowDroid to detect additional

78
00:07:41,909 --> 00:07:43,849
taint flows, FlowDroid is a static taint analysis
tool that has been widely studied and applied

79
00:07:43,849 --> 00:07:45,688
in the filed of android static analysis. So
this is our approach and We call this framework

80
00:07:45,689 --> 00:07:46,689
as Dysta,

81
00:07:46,689 --> 00:07:50,430
Then we found there is a problem in DySTA,
that is we didn’t consider the context of

82
00:07:50,430 --> 00:07:57,680
the intermediate source, under different context,
same method can return different values, sensitive

83
00:07:57,680 --> 00:08:01,569
or non-sensitive.
Let’s look at this control flow graph for

84
00:08:01,569 --> 00:08:08,830
a sample program, where we have three methods,
for the first method bar, in line 1, we get

85
00:08:08,830 --> 00:08:17,099
the tatint source, and in line two we call
method foo with the tainted source, and then

86
00:08:17,099 --> 00:08:23,940
in side foo, we call blocker, let’s assume
that blocker will send the source to a remove

87
00:08:23,940 --> 00:08:33,159
server that we don’t have access, and then
it calls foo2, and inside foo2, we get the

88
00:08:33,159 --> 00:08:41,490
data from the remote server though blocker2,
and return this data. our approach DySTA,

89
00:08:41,490 --> 00:08:47,980
will identify this is a sensitive data, and
consider it as an intermediate source. Then

90
00:08:47,980 --> 00:08:56,751
this source will return back to the method
foo and then back to the method bar. Finally

91
00:08:56,751 --> 00:09:02,589
in the method bar, at line 3, the source will
pass to a sink point.

92
00:09:02,589 --> 00:09:10,240
DySTA will identify this data flow and consider
it as a leak. But later, when we have a non-sensitive

93
00:09:10,240 --> 00:09:23,260
value, and then use it to call foo and foo2,
and return this "safe " back to line 5 in

94
00:09:23,260 --> 00:09:33,550
out2, and then it flow to sink at line 6,
since we consider foo2 as source, our framework

95
00:09:33,550 --> 00:09:40,060
DySTA will detect this second flow as a leak,
which is a false positive, right, because

96
00:09:40,060 --> 00:09:47,439
foo here is just returning a non-sensitive
data? The reason for this false positive is

97
00:09:47,440 --> 00:09:53,500
that, when we apply the intermediate source
to static analysis, we didn’t consider its

98
00:09:53,500 --> 00:10:03,399
context. So when the inter here becomes the
source, it will flow back to both line 2 and

99
00:10:03,399 --> 00:10:09,490
line 5.
So, we need to add the context information

100
00:10:09,490 --> 00:10:15,250
for the intermediate source. in this example,
only when the source is under the red context,

101
00:10:15,250 --> 00:10:21,860
it is a valid source, when it's under the
the green context, it's not a valid source.

102
00:10:21,860 --> 00:10:29,430
So, we need to inject calling context into
our approach, and we call this framework as

103
00:10:29,430 --> 00:10:34,479
condysta.
In order to add context information, ConDySTA

104
00:10:34,480 --> 00:10:39,560
takes advantage of a key observation that
the static calling context of an intermediate

105
00:10:39,560 --> 00:10:45,630
source s is always a sub-sequence of the call
stack trace.

106
00:10:45,630 --> 00:10:51,320
In order to match the static calling context
with the stack trace, we converted the dynamic

107
00:10:51,320 --> 00:10:57,290
stack trace into a calling context like this,
for each invocation in the stack trace , we

108
00:10:57,290 --> 00:11:04,189
extract the caller and callee and also the
line number, and then use this extracted calling

109
00:11:04,190 --> 00:11:10,380
context to compare with the static calling
context from flowDroid. If those two context

110
00:11:10,380 --> 00:11:14,829
matches, we consider that as a valid leak.

111
00:11:14,829 --> 00:11:20,758
to evaluate the effectiveness of ConDySTA
on detecting additional taint flows, we applied

112
00:11:20,759 --> 00:11:26,779
ConDySTA on the apps from ReproDroid, so ReproDroid
is a comprehensive benchmark framework for

113
00:11:26,779 --> 00:11:33,079
Android analysis tools. The benchmark apps
covered code features include implicit taint

114
00:11:33,079 --> 00:11:39,479
flows, native code, reflection, and inter
component communication. We applied ConDySTA

115
00:11:39,480 --> 00:11:45,089
on ReproDroid, and it detected 12 taint flows
which were not detected by any of the six

116
00:11:45,089 --> 00:11:49,310
state-of-the-art static taint analyses tool
that included in the ReproDroid. And those

117
00:11:49,310 --> 00:11:52,630
12 tatint flows are all true positives.
The table shows the details of these 12 taint

118
00:11:52,630 --> 00:11:59,149
flows, in flow 124 , the source data has been
converted into an array of Char and copied

119
00:11:59,149 --> 00:12:05,690
back to another string before flowing to the
sink. In flows 191 and 192 (Native code),

120
00:12:05,690 --> 00:12:13,800
native code is used to fulfil part of the
taint flow. In flows 203 and 206-209, part

121
00:12:13,800 --> 00:12:17,300
of the taint flow (sending information through
intents) is fulfilled with method invocations

122
00:12:17,300 --> 00:12:22,939
performed by reflection along with dynamic
generation of class/method signatures used

123
00:12:22,940 --> 00:12:30,509
in reflection. In flows 24, 25, 27 and 32,
the data is transmitted across components

124
00:12:30,509 --> 00:12:31,640
through intents.

125
00:12:31,640 --> 00:12:40,810
ConDySTA detected these 12 flows based on
intermediates sources such as de.ecspride.ImplicitFlow1:

126
00:12:40,810 --> 00:12:50,508
java.lang.String copyIMEI(java.lang.String),
android.content.Intent: java.lang.String getStringExtra(java.lang.String)

127
00:12:50,509 --> 00:12:57,279
To evaluate ConDySTA’s performance on reducing
false positive caused by context insensitivity,

128
00:12:57,279 --> 00:13:04,029
we applied both DySTA and ConDySTA on 43 apps
from ReproDroid that contained at least one

129
00:13:04,029 --> 00:13:12,550
true negative. Among the 186 true negative
dataflow, DySTA mistakenly reported nine of

130
00:13:12,550 --> 00:13:19,469
them, which are false positive. And then With
context matching, ConDySTA did not report

131
00:13:19,470 --> 00:13:24,970
any of them, so it reduced nine false positives
of DySTA to zero

132
00:13:24,970 --> 00:13:32,760
We further applied ConDySTA on 100 popular
Android apps from Google Play. On top of FlowDroid,

133
00:13:32,760 --> 00:13:38,529
ConDySTA was able to detect 39 additional
taint flows from 12 apps.

134
00:13:38,529 --> 00:13:45,439
Some taint flows that were detected by ConDySTA
but missed by FlowDroid, because the data

135
00:13:45,440 --> 00:13:51,410
were sent to remote servers and come back
later, or the data was flowed to local cache

136
00:13:51,410 --> 00:13:54,759
files and later the data was read back.

137
00:13:54,759 --> 00:14:00,449
So the evaluation result shows ConDySTA was
able to handle different types of inaccessible

138
00:14:00,449 --> 00:14:06,740
code in the real-world applications. Also
the idea of using dynamic analysis to reduce

139
00:14:06,740 --> 00:14:12,290
false negatives in static analysis is promising.

140
00:14:12,290 --> 00:14:18,389
Our work presents the following contributions.
• We demonstrated that dynamic taint analysis

141
00:14:18,389 --> 00:14:24,330
results can be used as a supplement to static
taint analysis to reduce false negatives in

142
00:14:24,330 --> 00:14:28,730
practice.
• We developed a novel approach, ConDySTA,

143
00:14:28,730 --> 00:14:31,920
to preserve the context sensitivity of static
taint analysis

144
00:14:31,920 --> 00:14:40,079
We performed evaluations using the ReproDroid
benchmark and 100 popular Android apps from

145
00:14:40,079 --> 00:14:47,519
Google Play, and our evaluation result demonstrates
that ConDySTA can reduce many false negatives

146
00:14:47,519 --> 00:14:51,769
reported by state-of-the-art taint analysis
tools

147
00:14:51,769 --> 00:14:55,170
More details about this work can be found
in our paper.

