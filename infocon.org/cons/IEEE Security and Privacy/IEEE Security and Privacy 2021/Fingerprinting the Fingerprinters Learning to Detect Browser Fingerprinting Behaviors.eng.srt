1
00:00:01,189 --> 00:00:05,230
Hello everyone, my name is Umar, and I am
going to talk about our research on detecting

2
00:00:05,230 --> 00:00:06,230
browser fingerprinting.

3
00:00:06,230 --> 00:00:10,780
I am from the University of Iowa, and this
is a joint work with collaborators from the

4
00:00:10,780 --> 00:00:13,940
Mozilla Corporation and University of California
Davis

5
00:00:13,940 --> 00:00:20,520
Traditionally, trackers have relied on client-side
storage mechanisms like cookies to track users

6
00:00:20,520 --> 00:00:22,580
across websites.

7
00:00:22,580 --> 00:00:27,049
At a fundamental level – trackers assign
a unique cookie to each user and that cookie

8
00:00:27,050 --> 00:00:31,330
is reported as users visit different websites

9
00:00:31,330 --> 00:00:36,399
But what would happen if the users blocked
or removed the cookies from their browsers?

10
00:00:36,399 --> 00:00:42,109
Well, In that case trackers would simply lose
their ability to track users as they won’t

11
00:00:42,109 --> 00:00:46,699
have any cookies to link user’s browsing
history

12
00:00:46,699 --> 00:00:51,149
Cookie blocking is actually one of the mechanisms
that is used by mainstream browsers to protect

13
00:00:51,149 --> 00:00:53,159
against cross site tracking

14
00:00:53,159 --> 00:00:57,879
For example, Safari has started to block all
third-party cookies in their browser

15
00:00:57,879 --> 00:01:02,789
And similarly Firefox has started to block
third party tracking cookies

16
00:01:02,789 --> 00:01:07,900
And even, Chrome has also promised to phase
out third party cookies by 2022

17
00:01:07,900 --> 00:01:12,730
As these browsers are implementing countermeasures
against cookie-based tracking, trackers are

18
00:01:12,730 --> 00:01:18,650
expected to migrate to more opaque tracking
techniques like browser fingerprinting, which

19
00:01:18,650 --> 00:01:22,760
does not require cookies to track users

20
00:01:22,760 --> 00:01:27,010
The key idea in browser fingerprinting is
to create a unique tracking identifier at

21
00:01:27,010 --> 00:01:33,410
runtime by combining the values exposed by
JavaScript APIs and HTTP headers

22
00:01:33,410 --> 00:01:38,750
For example – trackers combine information
exposed with JavaScript APIs and HTTP headers

23
00:01:38,750 --> 00:01:44,170
such the screen size – languages – plugins
– and fonts installed in the browser to

24
00:01:44,170 --> 00:01:46,840
create a fingerprint that is unique to the
user

25
00:01:46,840 --> 00:01:54,000
Overall, the combination of JavaScript API and HTTP
header values form a fingerprint that is then

26
00:01:54,000 --> 00:01:58,670
used to track the user across different websites

27
00:01:58,670 --> 00:02:03,390
Since the fingerprint is dependent on the
user’s machine's hardware and software configurations,

28
00:02:03,390 --> 00:02:08,360
it cannot be easily removed as compared to
cookies - which makes the browser fingerprinting,

29
00:02:08,360 --> 00:02:10,919
way more intrusive and harder to mitigate

30
00:02:10,919 --> 00:02:17,630
Now before I talk about our approach, I want
to give an overview of the state-of-practice

31
00:02:17,630 --> 00:02:25,069
fingerprinting countermeasures, their ineffectiveness,
and also motivate the need for a better solution

32
00:02:25,069 --> 00:02:29,049
Browser fingerprinting detection requires
sophisticated JavaScript analysis, which is

33
00:02:29,050 --> 00:02:33,819
very difficult and time consuming and cannot
be be effectively scaled to detect browser

34
00:02:33,819 --> 00:02:35,589
fingerprinting in the wild

35
00:02:35,590 --> 00:02:41,510
So, existing protection mechanism in browsers,
such as Safari, Firefox, and Brave sidestep

36
00:02:41,510 --> 00:02:48,329
the problem of browser fingerprinting detection
and instead put blanket restrictions on APIs

37
00:02:48,330 --> 00:02:52,910
The goal of putting blanket restriction is
to break the uniqueness of APIs by making

38
00:02:52,910 --> 00:02:55,990
them return the same or random values

39
00:02:55,990 --> 00:03:01,130
For example, several browsers have removed
APIs, such as the battery status API because

40
00:03:01,130 --> 00:03:06,490
of its high browser fingerprinting potential
--- normalized some of the APIs, like the

41
00:03:06,490 --> 00:03:11,740
navigator user agent, to always return the
same value – and have added random noise

42
00:03:11,740 --> 00:03:17,800
to the return values of some of the APIs,
like Canvas, so that the generated values

43
00:03:17,800 --> 00:03:19,640
loose their uniqueness.

44
00:03:19,640 --> 00:03:25,339
However, these restrictions interfere with
the expected functionality of APIs, which

45
00:03:25,340 --> 00:03:31,319
can limit and break the functionality of websites
, even when websites use those APIs for totally

46
00:03:31,319 --> 00:03:34,099
benign reasons.

47
00:03:34,099 --> 00:03:38,880
To address that problem, prior research has
proposed to detect browser fingerprinting

48
00:03:38,880 --> 00:03:41,989
scripts automatically with heuristics

49
00:03:41,989 --> 00:03:46,520
These heuristics are manually crafted and
require the presence of certain APIs with

50
00:03:46,520 --> 00:03:51,530
specific parameters in the execution traces
of scripts to detect them

51
00:03:51,530 --> 00:03:54,360
However, these heuristics have two key limitations:

52
00:03:54,360 --> 00:03:59,599
First, they are narrowly defined. Which means
that they will detect scripts that strictly

53
00:03:59,599 --> 00:04:04,209
match their criteria but miss scripts that
even slightly differ

54
00:04:04,209 --> 00:04:08,440
For instance, in this example, the canvas
fingerprinting script will not be detected

55
00:04:08,440 --> 00:04:13,300
because it calls save and restore method and
the heuristics are designed to look for their

56
00:04:13,300 --> 00:04:14,959
absence

57
00:04:14,959 --> 00:04:19,100
Secondly – these heuristics only work on
execution traces – so they cannot detect

58
00:04:19,100 --> 00:04:23,660
scripts which require some external events
– with user or browser’s action – to

59
00:04:23,660 --> 00:04:24,660
execute –

60
00:04:24,660 --> 00:04:29,440
in case of this example, the fingerprinting
methods are assigned to window object and

61
00:04:29,440 --> 00:04:35,000
can be called later – and that’s why the
heuristics will fail to detect this script.

62
00:04:35,000 --> 00:04:41,740
So, broadly we can conclude that these heuristics
have accuracy and coverage issues.

63
00:04:41,740 --> 00:04:46,470
To address these problems, we propose FP-Inspector,
which is a syntactic-semantic machine learning

64
00:04:46,470 --> 00:04:48,200
approach to detect browser fingerprinting

65
00:04:48,200 --> 00:04:54,909
Our key idea is to use the content and execution
of browser fingerprinting scripts to create

66
00:04:54,910 --> 00:04:59,490
a signature of their behavior and then use
those signatures to train machine learning

67
00:04:59,490 --> 00:05:03,330
classifiers that detect browser fingerprinting

68
00:05:03,330 --> 00:05:07,539
To motivate that insight – I will walk you
through a sample script – In this script,

69
00:05:07,540 --> 00:05:12,080
we can see several calls to JavaScript APIs
with fingerprinting potential – creation

70
00:05:12,080 --> 00:05:16,710
of HTML canvas element – to compute the
canvas font fingerprint – and then sharing

71
00:05:16,710 --> 00:05:20,159
of that fingerprint in a network request

72
00:05:20,160 --> 00:05:24,530
You can see that by analyzing the script,
we are able to observe the script’s internal

73
00:05:24,530 --> 00:05:27,869
and external behavioral context.

74
00:05:27,870 --> 00:05:33,229
The internal context give us a perspective
about the inner workings of the script

75
00:05:33,229 --> 00:05:37,860
Like what combination of APIs are called in
the script –does the script mostly contains

76
00:05:37,860 --> 00:05:42,840
APIs that have fingerprinting potential or
does it have a random combination of APIs;

77
00:05:42,840 --> 00:05:47,489
Whereas the external context, allows us to
observe the script’s interaction with the

78
00:05:47,490 --> 00:05:53,110
webpage through HTML elements and its communication
with external entities through network requests

79
00:05:53,110 --> 00:05:57,980
– which we use as a proxy of script's non-tracking
or tracking functionality;

80
00:05:57,980 --> 00:06:05,139
In FP-Inspector, we use these key insights
to detect browser fingerprinting

81
00:06:05,139 --> 00:06:10,250
FP-Inspector is essentially a syntactic-semantic
machine learning approach that addresses accuracy

82
00:06:10,250 --> 00:06:13,610
and coverage issues in fingerprinting detection

83
00:06:13,610 --> 00:06:17,680
We first create a syntactic-semantic representation
of scripts to capture their behavior

84
00:06:17,680 --> 00:06:22,730
We then use that representation
to train machine learning models that are

85
00:06:22,730 --> 00:06:24,960
used to automatically detect browser fingerprinting

86
00:06:24,960 --> 00:06:30,289
Specifically, we first instrument Firefox
to capture the script source and execution

87
00:06:30,290 --> 00:06:32,600
from the JavaScript layer

88
00:06:32,600 --> 00:06:36,990
we then model the script source to an abstract
representation – called Abstract Syntax

89
00:06:36,990 --> 00:06:42,949
Trees or ASTs – which normalize the scripts
and allows to extract the APIs usage

90
00:06:42,949 --> 00:06:48,729
Similarly, we use the JavaScript execution
to capture the JavaScript API calling frequency

91
00:06:48,729 --> 00:06:51,469
and their higher-level semantics

92
00:06:51,470 --> 00:06:56,479
After that we use both syntactic representation
captured through script source and semantic

93
00:06:56,479 --> 00:07:01,690
representation captured through script execution
to extract distinguishing fingerprinting patterns

94
00:07:01,690 --> 00:07:04,270
– to train machine learning models

95
00:07:04,270 --> 00:07:07,919
we then use the machine learning models to
separates out fingerprinting scripts from

96
00:07:07,919 --> 00:07:14,099
functional ones – and as well as use it
to measure the prevalence of browser fingerprinting

97
00:07:14,100 --> 00:07:18,990
In the next few slides, I will focus on the
modeling of syntactic and semantic representation

98
00:07:18,990 --> 00:07:21,430
of scripts to detect browser fingerprinting

99
00:07:21,430 --> 00:07:28,910
In syntactic representation – we treat script
source as a signal of its functionality - basically

100
00:07:28,910 --> 00:07:32,350
we are trying to interpret what the script
was written to do--

101
00:07:32,350 --> 00:07:36,820
However - people have different coding styles
- Some people add comments, some don't – and

102
00:07:36,820 --> 00:07:40,110
some prefer a particular syntax over another

103
00:07:40,110 --> 00:07:44,780
So before we can interpret the meaning of
scripts - we need to normalize them in a uniform

104
00:07:44,780 --> 00:07:46,130
format -

105
00:07:46,130 --> 00:07:51,300
To do that, we model the script source in
abstract syntax trees – which normalizes

106
00:07:51,300 --> 00:07:54,600
scripts for developer’s coding styles

107
00:07:54,600 --> 00:07:58,590
The example here shows the conversion of a
canvas font fingerprinting script to an AST

108
00:07:58,590 --> 00:08:04,659
– You can see that the AST has abstracted
out the developer's coding styles, like comments,

109
00:08:04,660 --> 00:08:12,490
and has captured the syntactical dependencies
of the APIs over each other in form of a tree

110
00:08:12,490 --> 00:08:13,490
–

111
00:08:13,490 --> 00:08:17,360
The tree representation then allow us to extract
the APIs in the context, they were called,

112
00:08:17,360 --> 00:08:20,009
which we use in two ways:

113
00:08:20,009 --> 00:08:24,880
First – we simply treat the high concentration
of APIs with fingerprinting potential as the

114
00:08:24,880 --> 00:08:27,080
script’s intent to fingerprint

115
00:08:27,080 --> 00:08:32,848
Second, we treat the usage of certain APIs
in a particular context as a signal of fingerprinting

116
00:08:32,849 --> 00:08:40,100
Specifically, in this example, the calling
of MeasureText method in a loop for several

117
00:08:40,100 --> 00:08:41,510
fonts, is a signal of fingerprinting

118
00:08:41,510 --> 00:08:48,000
In Semantic representation we treat script’s
execution as a signal of its functionality

119
00:08:48,000 --> 00:08:55,140
- basically we try to interpret script’s
intent from what it will do if it executed.

120
00:08:55,140 --> 00:08:59,949
In contrast to syntactic representation, in
semantic representation we do not need to

121
00:08:59,950 --> 00:09:05,380
normalize scripts, because the script execution
does not have developer specific signature

122
00:09:05,380 --> 00:09:06,459
in them.

123
00:09:06,459 --> 00:09:11,270
So we simply record the script execution and
parse it to capture the frequency of JavaScript

124
00:09:11,270 --> 00:09:16,410
API calls and as well as their higher-level
semantics - which we infer from the arguments

125
00:09:16,410 --> 00:09:20,360
passed to the APIs and the values returned
by them -

126
00:09:20,360 --> 00:09:25,440
I have an example here that shows the translation
of source code to API calling frequency and

127
00:09:25,440 --> 00:09:27,380
their higher-level semantics

128
00:09:27,380 --> 00:09:31,630
On the left side of the slide, You can see
a canvas font fingerprinting script and on

129
00:09:31,630 --> 00:09:37,820
the right side you can the extracted API calling
frequency and their higher-level semantics

130
00:09:37,820 --> 00:09:43,930
From the API calling frequency, we can infer
that some API methods, like measureText are

131
00:09:43,930 --> 00:09:47,329
called several times, to compute the canvas
font fingerprint.

132
00:09:47,330 --> 00:09:52,380
Whereas with higher-level semantics, we are
able to abstract out specific details and

133
00:09:52,380 --> 00:09:53,380
generalize better –

134
00:09:53,380 --> 00:09:58,760
Specifically, in the case of measureText - the
number of characters passed to the measureText

135
00:09:58,760 --> 00:10:03,660
method are a better signal of the script’s
fingerprinting intent than the exact text

136
00:10:03,660 --> 00:10:05,750
passed to it

137
00:10:05,750 --> 00:10:10,870
We use both syntactic and semantic representation
of scripts because they provide complementary

138
00:10:10,870 --> 00:10:11,870
benefits –

139
00:10:11,870 --> 00:10:17,670
Specifically, in case of obfuscated scripts
– the syntactic representation would fail

140
00:10:17,670 --> 00:10:23,050
because it relies on the script text to interpret
the intent of the script – On the other

141
00:10:23,050 --> 00:10:29,829
hand semantic representation relies on script’s
execution and it is agnostic to any obfuscation

142
00:10:29,830 --> 00:10:34,050
or minification techniques used by the script

143
00:10:34,050 --> 00:10:38,829
Similarly – in cases when scripts require
some sort of user action or browser events

144
00:10:38,830 --> 00:10:43,550
to trigger – the semantic representation
would fail and won’t have any execution

145
00:10:43,550 --> 00:10:49,349
– On the other hand – since syntactic
representation only requires the script text

146
00:10:49,350 --> 00:10:57,769
it would be able to create its tree representation
which can be used to interpret its meaning

147
00:10:57,769 --> 00:11:01,360
This concludes the syntactic and semantic
representation of fingerprinting, now In the

148
00:11:01,360 --> 00:11:05,830
next few slides, I will discuss the usage
of machine learning to automatically detect

149
00:11:05,830 --> 00:11:07,230
and measure browser fingerprinting

150
00:11:07,230 --> 00:11:13,620
To train the machine learning models for fingerprinting
detection – we need a set of trusted ground

151
00:11:13,620 --> 00:11:18,260
truth – and the only thing available to
us are the semi-correct heuristics proposed

152
00:11:18,260 --> 00:11:19,300
by prior research

153
00:11:19,300 --> 00:11:25,310
So, we rely on those heuristics as our ground
truth to train the classifiers

154
00:11:25,310 --> 00:11:29,199
Since we know that these heuristics are only
semi-correct, we create a boosting-based

155
00:11:29,200 --> 00:11:34,310
machine learning framework, which suits weak-supervision classification task.

156
00:11:34,310 --> 00:11:39,310
Specifically, we create a decision tree-based
ensemble in which we iteratively train several

157
00:11:39,310 --> 00:11:43,400
decision trees, and manually re-label the
detections in each iteration

158
00:11:43,400 --> 00:11:51,339
By repeating this process 3 times we are able
to detect 26% more scripts as compared to

159
00:11:51,339 --> 00:11:55,770
pre-defined heuristics – because our classifier
is able to generalize better on the fingerprinting

160
00:11:55,770 --> 00:11:56,770
behavior

161
00:11:56,770 --> 00:12:01,560
Overall, we achieve an accuracy of 99% in
detecting browser fingerprinting

162
00:12:01,560 --> 00:12:10,239
And, by combining syntactic and semantic representation
– we achieve a 10% gain in accuracy of FP-Inspector

163
00:12:10,240 --> 00:12:16,430
– which shows the complementary benefits
of syntactic and semantic representations

164
00:12:16,430 --> 00:12:20,649
Since fingerprinting is comparatively a new
tracking technique – we deploy FP-inspector

165
00:12:20,649 --> 00:12:25,459
to study the prevalence of browser fingerprinting
in the wild and also analyze its appeal to

166
00:12:25,459 --> 00:12:27,979
the trackers

167
00:12:27,980 --> 00:12:33,600
First we find that almost one-third of top
1,000 websites deploy fingerprinting - and - its

168
00:12:33,600 --> 00:12:39,079
deployment has significantly increase in the
last few years – for example in an earlier

169
00:12:39,079 --> 00:12:45,270
study in 2016 it was shown that only ~500
domains served fingerprinting scripts on 1

170
00:12:45,270 --> 00:12:50,910
million websites as compared to now where
almost ~25,00 domains serve fingerprinting

171
00:12:50,910 --> 00:12:56,209
scripts on top 100,000 websites – it shows
that the Fingerprinting is gaining traction

172
00:12:56,209 --> 00:12:57,550
as a viable tracking vector

173
00:12:57,550 --> 00:13:05,479
Second, we analyze the websites where fingerprinting
in deployed – and as expected – they seem

174
00:13:05,480 --> 00:13:11,690
to be on the websites that rely on advertising
for monetization – which confirms that -- fingerprinting

175
00:13:11,690 --> 00:13:13,730
is used in practice for tracking

176
00:13:13,730 --> 00:13:19,519
Specifically, we find that out of all the
websites that deploy fingerprinting, 14% of

177
00:13:19,519 --> 00:13:20,720
those are News websites

178
00:13:20,720 --> 00:13:26,321
Lastly, we also analyze the services that
serve fingerprinting -- and find that the

179
00:13:26,321 --> 00:13:32,480
most prevalent vendors that serve fingerprinting
also provide cross site tracking or anti ad-fraud

180
00:13:32,480 --> 00:13:33,480
services

181
00:13:33,480 --> 00:13:39,450
Specifically, the two top vendors are Double
Verify and Integral Ad Service which are classified

182
00:13:39,450 --> 00:13:41,300
as trackers by the Disconnect's tracking protection list

183
00:13:41,300 --> 00:13:48,329
Now, before concluding - I will mention some
of the key takeaways from the talk:

184
00:13:48,329 --> 00:13:53,380
Overall, I showed that the FP-Inspector improves
the state-of-the-art in browser fingerprinting

185
00:13:53,380 --> 00:13:54,380
detection

186
00:13:54,380 --> 00:14:00,540
Specifically, It improves the detection accuracy
and coverage by incorporating syntactic-semantic

187
00:14:00,540 --> 00:14:02,089
representation

188
00:14:02,089 --> 00:14:09,220
And uses machine learning on the syntactic-semantic
representation for automatic detection of browser fingerprinting

189
00:14:09,220 --> 00:14:14,120
We also used FP-Inspector to measure the prevalence
of browser fingerprinting and showed that

190
00:14:14,120 --> 00:14:17,779
it has significantly increased over time

191
00:14:17,779 --> 00:14:22,640
We also open source the FP-Inspector implementation
and its detections so that the community can

192
00:14:22,640 --> 00:14:24,019
benefit from them.

193
00:14:24,019 --> 00:14:29,400
In fact, our detections are incorporated by
popular filter lists such as Easy privacy,

194
00:14:29,400 --> 00:14:34,800
Disconnect, and DuckDuckGo, which are used
by browsers like Firefox, Safari, and extensions

195
00:14:34,800 --> 00:14:37,139
like Adblock Plus

196
00:14:37,139 --> 00:14:41,430
And as a result of our reporting, EasyPrivacy
has created a dedicated fingerprinting category

197
00:14:41,430 --> 00:14:42,819
in their list.

198
00:14:42,820 --> 00:14:48,649
Lastly, I would like to mention that we conducted
a lot of additional evaluation of FP-Inspector,

199
00:14:48,649 --> 00:14:54,040
like detection of JavaScript APIs with fingerprinting
potential, and I would encourage you to read

200
00:14:54,040 --> 00:14:56,649
the paper to see the results..

201
00:14:56,649 --> 00:14:59,340
With that I conclude and welcome your questions, thank you!

