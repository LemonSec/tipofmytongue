1
00:00:00,719 --> 00:00:08,530
Hello everyone, my name is Yunang and I will
present our paper on protecting data privacy

2
00:00:08,530 --> 00:00:14,700
in trigger-action systems. This is a joint
work between University of Wisconsin Madison

3
00:00:14,700 --> 00:00:23,269
and Chalmers University of Technology.
Today, Internet users are using more and more

4
00:00:23,269 --> 00:00:31,609
online services to manage their digital resources
or cyberphysical IoT devices. However, these

5
00:00:31,609 --> 00:00:38,530
services are built with different APIs that don’t
understand or talk to each other.

6
00:00:38,530 --> 00:00:46,460
Therefore, we now have a special kind of services
which we call the trigger action platform, or

7
00:00:46,460 --> 00:00:53,540
shortened as TAP. TAPs connect functionalities
from different services and perform automatic

8
00:00:53,540 --> 00:01:01,720
tasks. They provide a layer of abstraction
that enables services to develop APIs independently

9
00:01:01,720 --> 00:01:08,390
without worrying about compatibility. Popular
commercial TAPs, such as IFTTT and Zapier,

10
00:01:08,390 --> 00:01:14,970
are connected to lots of online services to
gather the required information to execute

11
00:01:14,970 --> 00:01:20,690
the rules.
In this slide, we show two simple rules that

12
00:01:20,690 --> 00:01:28,509
automatically activate some smart home devices
when certain event happens. These rules can

13
00:01:28,510 --> 00:01:35,560
also get a bit more complicated. The third
example describes a rule that sends a warning

14
00:01:35,560 --> 00:01:42,260
message when there is a suspicious transaction
happening, and it requires a number of condition

15
00:01:42,260 --> 00:01:50,610
checks as well as extracting a phone number
from a string.

16
00:01:50,610 --> 00:01:56,851
However, as always, such convenience comes
with a risk. TAP by nature is a cloud service

17
00:01:56,851 --> 00:02:04,720
and breaches of cloud services are commonplace.
What would happen if these platforms were

18
00:02:04,720 --> 00:02:12,150
compromised? In this case, the attacker will
have access to all kinds of private user data,

19
00:02:12,150 --> 00:02:19,190
such as chat logs, emails, and social networks.
Even worse, they can control your smart home

20
00:02:19,190 --> 00:02:27,120
gadgets, like a smart oven.
We use IFTTT, which is arguably the most popular

21
00:02:27,120 --> 00:02:34,700
TAP, as an example to showcase the security
concerns. First, in IFTTT’s term of use,

22
00:02:34,700 --> 00:02:41,670
it explicitly states that they collect personal
data from third parties and may share them

23
00:02:41,670 --> 00:02:44,769
with other third parties.

24
00:02:44,770 --> 00:02:52,180
And indeed, IFTTT does operate on lots of
sensitive information. Currently it has integrated

25
00:02:52,180 --> 00:03:00,540
with more than 600 services and has more than
20 million users, making it a very attractive

26
00:03:00,540 --> 00:03:07,739
target for attackers.
In addition, previous studies have showed

27
00:03:07,739 --> 00:03:15,730
that the access token acquired by IFTTT from
other services are over-privileged. So if

28
00:03:15,730 --> 00:03:21,420
these tokens are leaked, the attacker can
use them to access personal data even beyond

29
00:03:21,420 --> 00:03:27,450
what the rules require.
Due to such security concerns, service like

30
00:03:27,450 --> 00:03:34,299
Gmail has already removed itself from IFTTT
in the past.

31
00:03:34,300 --> 00:03:40,890
So The problem we want to solve is how to
design a system where the trigger-action automation

32
00:03:40,890 --> 00:03:51,049
rules can be executed securely and privately?
Our solution, eTAP, or encrypted trigger-action

33
00:03:51,050 --> 00:03:59,680
platform, is a re-design of TAP that protects
data privacy and integrity even if it is compromised.

34
00:03:59,680 --> 00:04:06,020
It supports common computations and especially
optimizes for string operations, which is

35
00:04:06,020 --> 00:04:13,220
very prevalent in automation rules. Also,
our protocol is efficient with low overhead.

36
00:04:13,220 --> 00:04:21,260
First, let’s abstract such example rule
into a generalized model, where one trigger

37
00:04:21,260 --> 00:04:28,639
service sends the data to the platform to
trigger the rule, the platform then computes

38
00:04:28,639 --> 00:04:35,440
a predicate function on both the trigger data
and some constant values provided by the user.

39
00:04:35,440 --> 00:04:43,550
If the predicate evaluates to true, TAP will
continue to generate the action data and forward

40
00:04:43,550 --> 00:04:48,960
to the action service.
Our work is under the worst-case assumption

41
00:04:48,960 --> 00:04:56,650
that the attacker has fully compromised the
TAP. That is, in our threat model TAP is a

42
00:04:56,650 --> 00:05:00,969
malicious party that can do whatever it wants
within its capacity.

43
00:05:00,970 --> 00:05:07,130
We don’t want the attacker to learn the
plaintext of the trigger or action data. The

44
00:05:07,130 --> 00:05:11,530
attacker can’t modify or delay the action
data without being detected.

45
00:05:11,530 --> 00:05:18,380
In addition, we want to ensure that the privacy
guarantees in current TAP still hold, which

46
00:05:18,380 --> 00:05:25,271
means the trigger and action services are
honest-but-curious parties where action service

47
00:05:25,271 --> 00:05:32,710
can’t learn trigger data or vice versa and
action service can only learn action data

48
00:05:32,710 --> 00:05:40,340
when the predicate evaluates to true.
Finally, we need to establish a root of trust

49
00:05:40,340 --> 00:05:48,460
somewhere. In line with prior work, we assume
that the user trusts its own client app, which

50
00:05:48,460 --> 00:05:54,789
is used to configure the rules. We imagine
this client app to be maintained separately

51
00:05:54,790 --> 00:06:02,669
from the cloud component of the TAP, and therefore
we can decentralize the trust into each user.

52
00:06:02,669 --> 00:06:08,289
Only the client app should have access to
the user constant.

53
00:06:08,289 --> 00:06:14,650
Some prior works have already provided some
of these security under similar threat models,

54
00:06:14,650 --> 00:06:20,138
our work not only have these additional security
benefits, but also allows computations in

55
00:06:20,139 --> 00:06:25,300
the rules
As usual, security consideration isn’t the

56
00:06:25,300 --> 00:06:31,900
whole story when designing a system. Therefore,
we need to have some practical consideration.

57
00:06:31,900 --> 00:06:37,979
For example, we need to ensure that there
is little changes to the trigger and action

58
00:06:37,979 --> 00:06:44,560
services, otherwise they may not be incentive
to participate. And we need to assume that

59
00:06:44,560 --> 00:06:50,650
the client, which is usually a phone or a
computer, may not be always online.

60
00:06:50,650 --> 00:06:58,400
Our design is based on a cryptographic protocol
called garbled circuit, to provide secure

61
00:06:58,401 --> 00:07:06,479
function evaluation. Garbled circuit is originally
designed for 2 party computation. In a traditional

62
00:07:06,479 --> 00:07:13,199
protocol, one party acts as the circuit generator,
which is responsible for converting functions

63
00:07:13,199 --> 00:07:20,210
to circuit and encoding input data, while
the other party acts as the circuit evaluator,

64
00:07:20,210 --> 00:07:26,919
which is responsible for evaluating the circuit
and decoding output data. We utilize the unique

65
00:07:26,919 --> 00:07:34,180
structure in our system to fit such protocol,
that is, the client and the trigger service

66
00:07:34,180 --> 00:07:40,520
together play the role of the generator, while
the TAP and action service together play the

67
00:07:40,520 --> 00:07:48,849
role of the evaluator. One advantage of using
garbled circuits in this setting is that it

68
00:07:48,850 --> 00:07:56,690
allows us to precompute the circuit before
the input data is available and the actual

69
00:07:56,690 --> 00:08:02,740
evaluation is very computationally efficient
compared to other secure function evaluation

70
00:08:02,740 --> 00:08:12,270
protocols. eTAP extends upon this model to
tailor garbled circuit to satisfy all the

71
00:08:12,270 --> 00:08:19,030
security goals we mentioned earlier. And we
found that this asymmetry in trust assumptions

72
00:08:19,030 --> 00:08:26,469
actually leads to more optimization.
Now I will briefly go through each phase in

73
00:08:26,470 --> 00:08:33,139
a rule’s lifecycle and overview what our
system does at a high-level. First, when the

74
00:08:33,139 --> 00:08:39,568
user first sets up a rule, it needs to go
through an OAuth negotiation with the trigger

75
00:08:39,568 --> 00:08:46,819
and action service to acquire the corresponding
permissions. This is a standard step performed

76
00:08:46,819 --> 00:08:52,862
by every trigger-action platform today. We
extend the OAuth protocol to allow the trusted

77
00:08:52,862 --> 00:08:58,329
client to exchange a secret key with both
the trigger and action service. These keys

78
00:08:58,329 --> 00:09:06,599
will later be used as a basis of our protocol.
Once the rule is setup, the client needs to

79
00:09:06,600 --> 00:09:14,610
periodically garble the function and stream
them to TAP. First, we generated the encoding

80
00:09:14,610 --> 00:09:21,420
information with the trigger secret key and
use it to seed the garbled circuit generation

81
00:09:21,420 --> 00:09:29,248
procedure. This information is also used to
encode the user-provided constant into garbled

82
00:09:29,249 --> 00:09:36,670
constant. Finally, the client applies a symmetric
encryption scheme to protect the decoding

83
00:09:36,670 --> 00:09:42,709
information with action key.
The trusted client needs to periodically stream

84
00:09:42,709 --> 00:09:48,829
the output of this step to the TAP. This is
the trade-off we need to make for using garbled

85
00:09:48,829 --> 00:09:56,290
circuit, since a fresh circuit is needed for
every execution. However, as I will show in

86
00:09:56,290 --> 00:10:02,618
our evaluation, the cost of generating and
sending a garbled circuit is very small.

87
00:10:02,619 --> 00:10:09,739
The last phase is the rule execution. The
trigger service first computes the encoding

88
00:10:09,739 --> 00:10:16,290
information in the same way as the client,
and then uses the encoding information to

89
00:10:16,290 --> 00:10:22,140
encode the trigger data.
The TAP, upon receiving the garbled trigger

90
00:10:22,140 --> 00:10:29,600
data, initiates the garbled circuit evaluation
procedure to compute garbled action data.

91
00:10:29,600 --> 00:10:37,399
The action service can decrypt the decode
blob with its secret key to obtain the original

92
00:10:37,399 --> 00:10:44,319
decoding information, which in turn can be
used to decode action data.

93
00:10:44,319 --> 00:10:50,920
Tailoring garbled circuit in this specific
trigger-action setting comes with many benefits.

94
00:10:50,920 --> 00:10:57,979
For example, we don’t need to use oblivious
transfer since all input data is provided

95
00:10:57,980 --> 00:11:04,819
by parties in the generator. in addition,
since only part of the evaluator is malicious,

96
00:11:04,819 --> 00:11:11,929
we showed that by extending a semi-honest
protocol with authenticity it is enough to

97
00:11:11,929 --> 00:11:18,769
defend against a malicious TAP without resorting
to heavyweight fully malicious protocol.

98
00:11:18,769 --> 00:11:26,480
There are many other interesting details about
our system that I don’t have to time to

99
00:11:26,480 --> 00:11:32,509
talk about. For example, we are able to achieve
garbled circuit authenticity with communication

100
00:11:32,509 --> 00:11:38,980
overhead proportional only to the security
parameter, due to the separation between the

101
00:11:38,980 --> 00:11:45,980
evaluation party and the decoding party. Please
refer to our paper for more details.

102
00:11:45,980 --> 00:11:53,350
Okay, so until now, there is one important
catch I have not talked about yet. In crypto

103
00:11:53,350 --> 00:12:00,660
protocol, every function is represented as
a circuit. In theory, this is achievable.

104
00:12:00,660 --> 00:12:07,069
However, in practice, not every function can
be converted to a circuit efficiently. So

105
00:12:07,070 --> 00:12:13,609
in order to understand how many real-world
rules we can support, we did a crawling of

106
00:12:13,609 --> 00:12:18,860
top IFTTT and Zapier rules to find the commonly
used functions.

107
00:12:18,860 --> 00:12:26,959
Out of these functions, only a few are very
well studied and easy to implement.

108
00:12:26,959 --> 00:12:37,290
The majority of the functions are string operations
which we need to craft our own solution. We

109
00:12:37,290 --> 00:12:42,799
noticed that many of these functions can be
implemented through simple regular expressions,

110
00:12:42,799 --> 00:12:52,429
so the challenge is how can we evaluate regular
expression efficiently in garbled circuits.

111
00:12:52,429 --> 00:12:59,111
Now I will highlight the intuition behind
our approach for string optimization. To evaluate

112
00:12:59,111 --> 00:13:06,739
a regular expression, we need to first convert
it into a DFA, and then compute the DFA state

113
00:13:06,739 --> 00:13:13,760
transition circuit over and over again on
the input string. We notice that if we use

114
00:13:13,760 --> 00:13:21,449
one-hot encoding to represent each state,
then every OR gate in the circuit can be replaced

115
00:13:21,449 --> 00:13:29,660
by XOR gate. In garbled circuit, a well-known
optimization is that every XOR gate can be

116
00:13:29,660 --> 00:13:34,858
computed for free without any communication
overhead.

117
00:13:34,859 --> 00:13:40,029
There are two remaining function that our
approach can’t efficiently support, however,

118
00:13:40,029 --> 00:13:48,019
as we can notice, both of them are purely
for formatting purposes. In summary, eTAP

119
00:13:48,019 --> 00:13:55,869
can support over 93 percent of all Zapier
rules and 100 percent of top IFTTT rules.

120
00:13:55,869 --> 00:14:03,779
For evaluation, we select 8 representatives
rules that cover all the common functions

121
00:14:03,779 --> 00:14:11,980
mentioned before, and found that our system
on average has 55% increase in end-to-end

122
00:14:11,980 --> 00:14:17,790
execution latency and 59% decrease in maximum
throughput.

123
00:14:17,790 --> 00:14:25,579
We also estimate the overhead of the client
with the statistic in prior study, we found

124
00:14:25,579 --> 00:14:31,910
that the client only needs to spend 10 seconds
per day to generate circuits that is enough

125
00:14:31,910 --> 00:14:39,429
for one day of use. And the total size of
these circuits is just over 60 MB, which is

126
00:14:39,429 --> 00:14:45,999
equivalent to uploading 25 images or a 1-minute
video.

127
00:14:45,999 --> 00:14:52,410
In conclusion, trigger-action platforms provide
desirable functionality but pose great security

128
00:14:52,410 --> 00:15:00,219
threat if compromised. We proposed eTAP, which
is a clean-slate design that protect data

129
00:15:00,220 --> 00:15:08,489
privacy and integrity against a malicious
TAP. We utilize the asymmetry in trust assumptions

130
00:15:08,489 --> 00:15:15,160
to optimize garbled circuits and efficiently
support common string operations to ensure

131
00:15:15,160 --> 00:15:23,589
only a modest performance reduction. Thanks
you for listening to the talk, I’m happy

132
00:15:23,589 --> 00:15:24,869
to answer any questions.

