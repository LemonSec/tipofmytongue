1
00:00:00,799 --> 00:00:05,550
Hi, my name is Sekar Kulandaivel and I’m
a PhD student at Carnegie Mellon. This project

2
00:00:05,550 --> 00:00:11,559
was done in collaboration with Bosch Research
in Pittsburgh. I now present our work on CANnon,

3
00:00:11,560 --> 00:00:17,619
a new vulnerability class for in-vehicle networks.
So, with all the advanced electronics and

4
00:00:17,619 --> 00:00:22,869
fancy features that come with a modern car,
remote adversaries have become a real threat.

5
00:00:22,869 --> 00:00:27,960
In this context, remote adversaries aim to
take control of the software for an in-vehicle

6
00:00:27,960 --> 00:00:33,500
ECU through some wireless access point. With
this remote control, an adversary can then

7
00:00:33,500 --> 00:00:38,860
use this compromised ECU to launch further
attacks against the in-vehicle CAN bus. While

8
00:00:38,860 --> 00:00:44,469
attacks that require physical access can only
target a single car, remote attacks can, in

9
00:00:44,469 --> 00:00:49,310
fact, open the door to large-scale attacks,
thus they are a serious concern for the automotive

10
00:00:49,310 --> 00:00:52,969
industry.
Now, one type of attack that’s been a concern

11
00:00:52,969 --> 00:00:58,679
is the remote shutdown attack, where an attacker
uses the compromised software of one ECU to

12
00:00:58,679 --> 00:01:04,569
shut down another victim ECU. While this attack
alone can severely disrupt a vehicle, a shutdown

13
00:01:04,569 --> 00:01:08,750
attack could be used as a stepping-stone for
more advanced attacks, such as a masquerade

14
00:01:08,750 --> 00:01:12,300
attack.
So, of course, the automotive industry has

15
00:01:12,300 --> 00:01:17,229
responded to these shutdown attacks with several
modern defenses. Here, the goal on the defense

16
00:01:17,230 --> 00:01:22,550
side is to detect a shutdown attempt in progress
before the shutdown occurs. In general, there

17
00:01:22,550 --> 00:01:28,149
are three types of defenses. First, we can
use an intrusion detection system, or IDS,

18
00:01:28,150 --> 00:01:33,590
to monitor the bus for anomalies. Or we can
use secure alternatives to the protocol hardware.

19
00:01:33,590 --> 00:01:39,030
And finally, we could monitor the bus voltage
for anomalies to detect a shutdown attempt.

20
00:01:39,030 --> 00:01:43,110
These defenses appear to be sufficient against
shutdown attacks because current shutdown

21
00:01:43,110 --> 00:01:47,060
techniques cannot simultaneously be remote,
reliable and stealthy.

22
00:01:47,060 --> 00:01:52,710
I’ll now clarify our threat model. We assume
the attacker can compromise just a single

23
00:01:52,710 --> 00:01:58,059
ECU. They can modify and re-flash the ECU’s
software application, but they cannot make

24
00:01:58,060 --> 00:02:03,100
physical changes to any hardware. Now for
the attack goals, we essentially want to achieve

25
00:02:03,100 --> 00:02:08,119
the same capabilities of an attacker with
physical access while operating under the

26
00:02:08,119 --> 00:02:13,860
constraints of a remote attacker. Now, since
physical access attacks are considered impractical,

27
00:02:13,860 --> 00:02:18,760
physical attacks have not been prioritized
for state-of-the-art defenses. Thus, if we

28
00:02:18,760 --> 00:02:23,250
could somehow use software to mimic these
physical access attacks, then we could be

29
00:02:23,250 --> 00:02:28,870
stealthy against modern defenses.
In this talk, we introduce a new class of

30
00:02:28,870 --> 00:02:33,830
shutdown attack that uses only compromised
software to mimic and disrupt physical network

31
00:02:33,830 --> 00:02:38,100
signals while bypassing the protocol-compliance
of the CAN hardware.

32
00:02:38,100 --> 00:02:44,130
I now present CANnon, a reliable and stealthy
remote shutdown attack that leverages the

33
00:02:44,130 --> 00:02:50,560
peripheral clock gating feature of unaltered
automotive microcontrollers. This attack operates

34
00:02:50,560 --> 00:02:55,400
using only an ECU’s compromised software,
and it can remain stealthy against both a

35
00:02:55,400 --> 00:03:03,040
monitoring IDS and proposed secure CAN transceivers.
Okay, let’s get into some necessary background.

36
00:03:03,040 --> 00:03:06,880
When looking at the protocol stack for CAN,
there are generally four different layers.

37
00:03:06,880 --> 00:03:12,190
First, the automotive microcontroller (or
MCU) contains the ECU’s software. When the

38
00:03:12,190 --> 00:03:17,260
software wishes to communicate over CAN, it
sends data to the CAN controller, which is

39
00:03:17,260 --> 00:03:22,709
basically a finite state machine that converts
the data into CAN-specific frames. Then, the

40
00:03:22,709 --> 00:03:27,099
CAN transceiver converts the frames into the
proper bus voltage, and the frame is then

41
00:03:27,099 --> 00:03:32,730
sent bit-by-bit onto the CAN bus. Of course,
multiple ECUs communicate on this network,

42
00:03:32,730 --> 00:03:38,819
so the bus is designed as a logical-AND. If
at least one ECU writes a 0-bit, the value

43
00:03:38,819 --> 00:03:43,769
of the bus is a 0-bit as well.
There are a few extra protocol details that

44
00:03:43,770 --> 00:03:49,301
reveal how CAN is vulnerable to shutdown attacks.
To send a CAN frame onto the network, there

45
00:03:49,301 --> 00:03:54,030
are a few steps an ECU will take. We can break
down the CAN frame into different stages,

46
00:03:54,030 --> 00:03:59,520
but the first two are important here. If I
want to transmit on the bus, I send my arbitration

47
00:03:59,520 --> 00:04:05,890
ID and check that no one overwrites me (again,
0-bits overwrites 1-bits). Then, once I’ve

48
00:04:05,890 --> 00:04:10,750
won arbitration, I become the only transmitter
and transmit my data; I just have to make

49
00:04:10,750 --> 00:04:17,339
sure what I send matches what I see on the
bus. Now, if for some reason I send a 1-bit

50
00:04:17,339 --> 00:04:22,089
and see a 0-bit or vice versa, I’ll get
an error thinking that something must be wrong

51
00:04:22,089 --> 00:04:28,210
with my transmission. So I follow the error-handling
protocol for CAN. As we can see from this

52
00:04:28,210 --> 00:04:33,580
state diagram, with enough errors, I can enter
a shutdown state, where I voluntarily remove

53
00:04:33,580 --> 00:04:38,919
myself from the network and stop touching
the CAN bus. Now, this error-handling feature

54
00:04:38,919 --> 00:04:44,710
is what some other shutdown attacks often
exploit. So if an attacker can trick an ECU

55
00:04:44,710 --> 00:04:51,599
into thinking it’s caused so many errors,
it will shut itself off; the attacker wins.

56
00:04:51,599 --> 00:04:56,240
Looking at prior work on shutdown attacks,
one approach uses the compromised ECU to send

57
00:04:56,240 --> 00:05:01,559
out spoofed messages as if these messages
originated from the victim. By forcing certain

58
00:05:01,559 --> 00:05:06,009
bits to mismatch what the victim sends and
by perfectly timing these messages to overwrite

59
00:05:06,009 --> 00:05:11,719
a victim, the attacker can trick a victim
into shutting itself off. However, this approach

60
00:05:11,719 --> 00:05:16,419
isn’t very reliable in practice. And the
automotive industry has built software-based

61
00:05:16,419 --> 00:05:21,150
IDSes that can detect anomalous behaviors
based on timing, content and other features.

62
00:05:21,150 --> 00:05:25,900
In addition, the industry has also proposed
using CAN hardware solutions to detect these

63
00:05:25,900 --> 00:05:30,878
spoofed messages.
Alright, so clearly the prior work on launching

64
00:05:30,879 --> 00:05:35,960
attacks from compromised software can be detected
by modern defenses. What if we could somehow

65
00:05:35,960 --> 00:05:41,239
compromise the physical vehicle? Let’s tap
into the CAN bus and modify signals directly.

66
00:05:41,240 --> 00:05:47,340
Here, we find that IDSes do not produce an
alert even for a voltage-based IDS. However,

67
00:05:47,340 --> 00:05:51,448
this type of attack isn’t taken seriously
by the automotive industry since physical

68
00:05:51,449 --> 00:05:56,021
access isn’t practical. An attacker might
as well cut the brake lines, and they can

69
00:05:56,021 --> 00:06:01,069
only attack one car at a time.
So I’ll now introduce our insight into a

70
00:06:01,069 --> 00:06:06,740
new class of shutdown attacks. Our main insight
comes from a critical change in the design

71
00:06:06,740 --> 00:06:13,370
of modern ECUs, specifically for their microcontrollers.
For the purpose of lowering an ECU’s total

72
00:06:13,370 --> 00:06:18,560
power consumption, designers have implemented
a feature called peripheral clock gating.

73
00:06:18,560 --> 00:06:24,349
This feature allows us to save energy by controlling
when a peripheral is turned on or turned off.

74
00:06:24,349 --> 00:06:29,560
To turn on a device, a microcontroller simply
provides a peripheral with a clock signal,

75
00:06:29,560 --> 00:06:33,949
which allows the peripheral to run. These
peripherals are finite state machines, thus

76
00:06:33,949 --> 00:06:38,419
they run sequential logic that needs a clock
signal to progress. Now, let’s look at how

77
00:06:38,419 --> 00:06:43,859
the architecture had to change to implement
this feature. Originally, ECUs used to have

78
00:06:43,860 --> 00:06:50,369
an automotive microcontroller with a separate
standalone CAN controller chip. But, to implement

79
00:06:50,369 --> 00:06:56,530
clock gating, the CAN controller chip was
moved to be onboard the same chip as the microcontroller.

80
00:06:56,530 --> 00:07:01,729
The key difference here is that, before, there
was only a data line between the microcontroller

81
00:07:01,729 --> 00:07:06,729
and CAN controller, and now there’s an added
clock signal that the microcontroller produces

82
00:07:06,729 --> 00:07:11,310
and passes onto the controller as needed.
By looking at the driver code for an automotive

83
00:07:11,310 --> 00:07:17,520
microcontroller, we found clock control instructions
that are part of the microcontroller’s API.

84
00:07:17,520 --> 00:07:22,589
Normally, a programmer can use this clock
control API to control whether or not the

85
00:07:22,589 --> 00:07:27,580
on-chip CAN controller gets the clock. Now,
of course, if a programmer can write code

86
00:07:27,580 --> 00:07:33,430
to control this clock signal, so can an adversary.
Ultimately, we find this feature is also a

87
00:07:33,430 --> 00:07:38,979
vulnerability that now grants an adversary
the ability to enable and disable the CAN

88
00:07:38,979 --> 00:07:44,110
controller’s clock at-will.
To exploit this vulnerability, I’ll walk

89
00:07:44,110 --> 00:07:49,389
you through two main steps. First, I’ll
show you how a remote adversary can take control

90
00:07:49,389 --> 00:07:54,360
of the CAN clock and perform a basic disruption
of the CAN bus. Then, I’ll show you what

91
00:07:54,360 --> 00:07:59,610
an attacker can do once they refine this attack.
Now let’s go over an example that should

92
00:07:59,610 --> 00:08:04,969
make the implications of this vulnerability
very clear. So let’s say a compromised ECU

93
00:08:04,969 --> 00:08:09,498
is transmitting this set of bits onto the
bus as part of a normal transmission. We have

94
00:08:09,499 --> 00:08:14,719
some 0-bits and some 1-bits, just like a typical
message. Now let’s say the remote adversary

95
00:08:14,719 --> 00:08:19,800
runs a single line of code that disables the
CAN clock right at this 0-bit. If we look

96
00:08:19,800 --> 00:08:25,619
at what the compromised ECU transmits up until
the clock is disabled, the actual output matches

97
00:08:25,619 --> 00:08:31,229
exactly what we expected. However, when we
disable the clock here, the finite state machine

98
00:08:31,229 --> 00:08:36,419
(that is the CAN controller) is essentially
frozen in place. The controller was transmitting

99
00:08:36,419 --> 00:08:41,828
a 0-bit and then it had its clock signal disabled.
Without a clock signal, the controller logic

100
00:08:41,828 --> 00:08:47,040
cannot progress, and it cannot move onto the
next bit. As a result, the remaining bits

101
00:08:47,040 --> 00:08:52,719
that the compromised ECU transmits are all
zeroes. By holding the bus to a dominant 0-bit

102
00:08:52,720 --> 00:08:57,699
state, our attacker by running a single line
of code can disrupt the entire bus and block

103
00:08:57,699 --> 00:09:03,410
any other CAN traffic. Now, in the paper ***, we
discuss details to refine this clock control

104
00:09:03,410 --> 00:09:08,829
and reliably use software to form physical
signals on the CAN bus.

105
00:09:08,830 --> 00:09:13,010
So let’s see how we can exploit this vulnerability
and all that we’ve covered to create our

106
00:09:13,010 --> 00:09:18,870
CANnon attack. Here we give a single CAN message
loaded into the compromised ECU that runs

107
00:09:18,870 --> 00:09:23,990
our CANnon code. This single message is what
will allow us to target and shut down a victim

108
00:09:23,990 --> 00:09:29,870
ECU. First, we load the attack frame into
the compromised ECU’s transmit buffer. Then,

109
00:09:29,870 --> 00:09:36,089
we wait for the inter-frame spacing, basically
when the bus is idle. Then, once we can transmit

110
00:09:36,089 --> 00:09:41,140
this message, we transmit the arbitration
and control fields and then disable the clock.

111
00:09:41,140 --> 00:09:46,120
Two things here: our ID of 0 gives us the
highest priority so we will always win the

112
00:09:46,120 --> 00:09:52,840
bus. Also, after we transmit the ID, the compromised
ECU now believes it is the bus winner, and

113
00:09:52,840 --> 00:09:58,050
all other ECUs stop transmitting. Now, since
the other ECUs see that a message stopped

114
00:09:58,050 --> 00:10:04,439
for some reason, they produce an error. However,
since the compromised ECU has already disabled

115
00:10:04,440 --> 00:10:09,040
the clock when this error frame appears, it
does not see any kind of error and simply

116
00:10:09,040 --> 00:10:15,110
thinks it’s about to send the data payload.
Now that we’ve tricked the compromised ECU

117
00:10:15,110 --> 00:10:19,579
into thinking that it’s still the bus winner,
we can simply keep its CAN clock disabled

118
00:10:19,579 --> 00:10:24,089
until our victim message appears on the bus.
So when the victim message is transmitting

119
00:10:24,089 --> 00:10:29,620
its data, our attacker can now craft an error
frame using a reliable approach that we detail

120
00:10:29,620 --> 00:10:36,430
in the paper. Now with a 64-bit maximum payload
for the CAN frame, we can use a pattern of

121
00:10:36,430 --> 00:10:41,550
alternating 0’s and 1’s, allowing us to
create a total of 32 errors frames from just

122
00:10:41,550 --> 00:10:47,000
a single CAN frame. So what happens after
we inject our first error frame during a victim’s

123
00:10:47,000 --> 00:10:52,970
message? Well, lucky for the attacker, the
victim’s CAN controller will try to re-transmit

124
00:10:52,970 --> 00:10:58,540
the message so we simply have to create more
error frames and target 31 re-transmissions.

125
00:10:58,540 --> 00:11:03,649
So now that we’ve attacked a total of 32
victim messages (that is, the original victim

126
00:11:03,649 --> 00:11:08,870
message and 31 retransmissions), the victim
now shuts itself off as we see from the bus

127
00:11:08,870 --> 00:11:14,440
idle. So of course, this setup is not the
only way to use the clock gating vulnerability

128
00:11:14,440 --> 00:11:19,430
to launch an attack. Our insight gives us
a great amount of flexibility in how we can

129
00:11:19,430 --> 00:11:24,920
produce an attack, and we also offer alternatives
using other parts of the CAN frame. We can

130
00:11:24,920 --> 00:11:30,060
create an attack simply uses the start-of-frame
bit to create an error frame, we can also

131
00:11:30,060 --> 00:11:35,319
use the acknowledgement bit. Both alternatives
use only a single bit and do not require transmitting

132
00:11:35,319 --> 00:11:40,709
any other data onto the bus, giving a powerful
attack with a very small footprint on the

133
00:11:40,709 --> 00:11:45,709
network. We also address how to tackle practical
challenges in the paper.

134
00:11:45,709 --> 00:11:54,119
For our experiments, we target two vehicles:
a 2009 Toyota Prius and a 2017 Ford Focus.

135
00:11:54,120 --> 00:11:58,751
We target ECUs in these vehicles by using
these two automotive microcontrollers. Think

136
00:11:58,751 --> 00:12:03,959
of them as the “compromised ECU” in our
attack. Also, for our prototyping and initial

137
00:12:03,959 --> 00:12:08,439
experiments, we used an Arduino Due board,
which has a similar design as the Microchip

138
00:12:08,440 --> 00:12:12,790
board.
So our first attack, we target the engine

139
00:12:12,790 --> 00:12:17,370
ECU of the Ford Focus using the Microchip
board. We achieve a shutdown attack using

140
00:12:17,370 --> 00:12:21,730
the loading/firing version of the attack we
discussed before, and we can perform a shut

141
00:12:21,730 --> 00:12:27,040
down of the engine ECU in 2ms. The victim
does recover but we can repeat the attack

142
00:12:27,040 --> 00:12:31,009
as needed. We imagine that there could be
some future work that investigates how to

143
00:12:31,009 --> 00:12:36,520
suppress and then stealthily masquerade as
the engine ECU using our work as a launchpad.

144
00:12:36,520 --> 00:12:42,870
In another attack, we target the power steering
ECU of a Prius using the ST board. We achieve

145
00:12:42,870 --> 00:12:48,959
a shutdown in 700ms using the start-of-frame
bit version of our attack. While this attack

146
00:12:48,959 --> 00:12:54,060
has a smaller footprint, it does require more
time to be successful but it still works.

147
00:12:54,060 --> 00:12:59,149
The power steering ECU does not auto-recover
and remains shut down. You could imagine an

148
00:12:59,149 --> 00:13:04,000
attacker launching this attack while the vehicle
is in motion.

149
00:13:04,000 --> 00:13:09,089
We now pit CANnon against three defenses used
by state-of-the-art techniques that successfully

150
00:13:09,089 --> 00:13:14,399
detect other shutdown attacks. First, we build
an IDS software application that checks for

151
00:13:14,399 --> 00:13:19,220
a significant change in message timing. Another
defense we tested was building our own custom

152
00:13:19,220 --> 00:13:25,430
secure transceiver that checks the ID of any
outgoing messages. Finally, we build a frame-level

153
00:13:25,430 --> 00:13:30,899
voltage IDS that looks for a sudden shift
in voltage in the middle of the frame. Well,

154
00:13:30,899 --> 00:13:35,639
CANnon does well against these. It attacks
very fast within a single period, it doesn’t

155
00:13:35,639 --> 00:13:40,910
use full frames so no outgoing ID to block,
and it only induces a small voltage spike

156
00:13:40,910 --> 00:13:46,269
during a victim frame. Now, we also asked
ourselves: well, what if I have a software

157
00:13:46,269 --> 00:13:51,439
IDS? Could I simply push an update to detect
the CANnon attack? Unfortunately, we think

158
00:13:51,439 --> 00:13:55,920
it would be difficult for a software IDS to
differentiate between this attack and a true

159
00:13:55,920 --> 00:14:01,979
fault on an ECU. In our paper, we go over
a couple ideas on how this attack can deceive

160
00:14:01,980 --> 00:14:07,860
even CANnon-aware defenses, forcing a defense
solution to exist not only as software.

161
00:14:07,860 --> 00:14:12,750
Let’s now discuss the important takeaways
for this talk. How can we implement some countermeasures

162
00:14:12,750 --> 00:14:17,529
against this attack? First, we could build
a bit-wise voltage spike detector. We can

163
00:14:17,529 --> 00:14:21,860
monitor for voltage spikes during a frame
transmission. The CANnon attack footprint

164
00:14:21,860 --> 00:14:26,230
won’t be as obvious as the footprint for
other attacks, but it is possible. Likewise,

165
00:14:26,230 --> 00:14:31,670
if you do on-chip power analysis (say for
a host-based IDS), you can monitor for unexpected

166
00:14:31,670 --> 00:14:36,490
changes in power which occurs when the CAN
clock is disabled and enabled, this would

167
00:14:36,490 --> 00:14:41,070
be a great metric we’ve seen in our own
experiments. In terms of prevention, one idea

168
00:14:41,070 --> 00:14:45,720
is to forcibly clear an ECU’s transmit buffers
when the clock is disabled. If the buffers

169
00:14:45,720 --> 00:14:50,550
are cleared, then the attack cannot work.
As we’ve seen, CANnon is a software-based

170
00:14:50,550 --> 00:14:54,849
attack that mimics a physical attack. We do
this by exploiting the peripheral clock gating

171
00:14:54,850 --> 00:14:59,230
feature of modern microcontrollers. It is
clear that modern defenses need to consider

172
00:14:59,230 --> 00:15:04,700
this type of attack, especially since CANnon’s
flexibility could lead to other advanced attacks.

