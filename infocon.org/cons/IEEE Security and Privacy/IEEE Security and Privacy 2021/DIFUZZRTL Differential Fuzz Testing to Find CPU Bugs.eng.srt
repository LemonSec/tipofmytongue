1
00:00:01,000 --> 00:00:02,240
Hi every one.

2
00:00:02,250 --> 00:00:05,250
I’m JaewonHur from Seoul National University of Korea.

3
00:00:05,800 --> 00:00:10,800
Today, I’m going to present DiFuzzRTL, Differential Fuzz Testing to Find CPU Bugs.

4
00:00:11,000 --> 00:00:18,000
This work was done by me, Suhwan Song, Dongup Kwon, Eunjin Baek, Jangwoo Kim, and my advisor, Byoungyoung Lee.

5
00:00:18,024 --> 00:00:25,024
In 1994, the professor Thomas R. Nicely has found the Pentium FDIV bug.

6
00:00:25,048 --> 00:00:31,048
The bug was about the incomplete computation result of Intel Pentium CPUs.

7
00:00:31,072 --> 00:00:41,072
Intel finally admitted the bug and they have recalled all the affected CPUs with the cost of 475 million dollars. A huge amount.

8
00:00:43,000 --> 00:00:57,000
As you can see, since the CPU bugs cannot be fixed after the chip is released, CPU vendors such as Intel, or AMD pour huge time and effort to find possibly existing bugs before they release the chip.

9
00:00:57,024 --> 00:01:06,024
This process is called functional verification, checking the CPU RTL design correctly follows the instruction set architecture.

10
00:01:06,048 --> 00:01:10,048
But, we always find the new bugs after the chip is released.

11
00:01:11,000 --> 00:01:18,000
To name a few, Pentium FDIV bug, Ryzen RDRAND bug, Intel TSX bug and so on.

12
00:01:18,300 --> 00:01:23,300
So, we introduce a brand new technique to find CPU bugs, DiFuzzRTL.

13
00:01:25,240 --> 00:01:35,240
We already opensourced the prototype of DiFuzzRTL which supports three open-source real-world CPUs from OpenRISC and RISCV ISA.

14
00:01:35,264 --> 00:01:46,264
And, we found 16 new CPU bugs where 6 of those were assigned the CVE numbers, illustrating the critical impacts on the security community.

15
00:01:46,288 --> 00:01:51,288
As the name says, DiFuzzRTL fuzzes CPU RTL designs.

16
00:01:51,312 --> 00:02:00,312
With the advent of AFL, the fuzzer has become one of the most famous tools to find bugs in the software programs.

17
00:02:00,336 --> 00:02:03,336
The key idea behind the fuzzer is very simple.

18
00:02:03,360 --> 00:02:09,360
it continuously mutates input and tests the program while increasing the coverage.

19
00:02:09,383 --> 00:02:18,384
So in the compile time, the fuzzer instruments a logic into the program which calculates the runtime information, so-called the coverage.

20
00:02:18,408 --> 00:02:25,408
And in the runtime, the fuzzer continuously mutates the input and tests the program while monitoring the coverage.

21
00:02:25,432 --> 00:02:32,432
So if the coverage increases, it saves the input and reuses it to further increase the coverage.

22
00:02:32,456 --> 00:02:37,456
This process leads to the rigorous verification of the program.

23
00:02:37,480 --> 00:02:44,480
To apply this powerful technique to the CPU RTL verification, we came up with two new requirements.

24
00:02:44,504 --> 00:02:49,504
First, we need a framework to test the CPUs and detect the bugs.

25
00:02:49,528 --> 00:02:54,528
Second, we need a new coverage definition for the RTL designs.

26
00:02:54,552 --> 00:03:00,552
Lots of the bugs in the software program leads to the program crash, making it easier to detect.

27
00:03:00,576 --> 00:03:06,576
and there are lots of sanitizers such ASAN to detect the bugs in the software.

28
00:03:07,000 --> 00:03:13,000
But, the bugs in the CPU do not have any indication, making it hard to detect.

29
00:03:13,024 --> 00:03:21,024
DiFuzzRTL has to find such CPU bug which is an abnormal behavior different from a predefined ISA.

30
00:03:21,048 --> 00:03:28,048
For example of RISCV, misaligned load reserve instruction should not set the reservation.

31
00:03:28,072 --> 00:03:33,072
Whenever a CPU does not follow this behavior, it is definitely a bug.

32
00:03:33,096 --> 00:03:41,096
Like this, given an input, almost always the CPU has to be in a predefined state after executing the input.

33
00:03:41,120 --> 00:03:48,120
But, it is difficult to automatically detect such bugs by testing the CPU RTL design alone.

34
00:03:48,144 --> 00:03:56,144
So, we leveraged the ISA simulator, which is a software implementation of the ISA.

35
00:03:56,168 --> 00:04:08,168
Since the CPU RTL design and the ISA simulator follow the same instruction set architecture, they should return the same results after executing the same input.

36
00:04:08,192 --> 00:04:13,192
Taking this into account, we applied differential testing on the designs.

37
00:04:13,216 --> 00:04:21,216
So, DiFuzzRTL automatically detects the CPU bugs by comparing their results after executing the same input.

38
00:04:21,240 --> 00:04:28,240
But, the CPU RTL design and the ISA simulator have completely different input space.

39
00:04:28,264 --> 00:04:31,264
The RTL design is a hardware implementation.

40
00:04:31,288 --> 00:04:36,288
So it needs input stimuli injected every cycle.

41
00:04:36,312 --> 00:04:42,312
On the other hand, the ISA simulator requires a well defined executable.

42
00:04:42,336 --> 00:04:51,336
So, we define a new input format, called SimInput, which can be used for both the CPU RTL design and the ISA simulator.

43
00:04:51,360 --> 00:04:58,360
SimInput contains the entire CPU input space including instructions, data and the interrupts.

44
00:04:58,384 --> 00:05:09,384
And DiFuzzRTL runs as a testbench for the RTL designs, so that it parses the SimInput and generates the input stimuli every cycle.

45
00:05:09,408 --> 00:05:19,408
Finally, we implemented the testing framework which continuously generates SimInput and tests both CPU RTL design and ISA simulator.

46
00:05:20,800 --> 00:05:27,800
While testing the CPU designs, DiFuzzRTL needs a coverage for the RTL designs.

47
00:05:27,824 --> 00:05:32,824
But we need a completely new coverage definition.

48
00:05:32,848 --> 00:05:37,848
To define such coverage, we first need to know how the RTL designs run.

49
00:05:37,872 --> 00:05:42,872
RTL is an abstraction of the language to describe the hardware implementation.

50
00:05:42,896 --> 00:05:47,896
This is a simple circuit which can be implemented by the RTL languages.

51
00:05:47,920 --> 00:05:55,920
And the hardware designers model the behaviors of these circuits with the finite state machine, so called FSM.

52
00:05:55,944 --> 00:06:06,944
So the finite state machine is constructed from the registers in the circuit and the circuit design runs while transitioning its state in the FSM.

53
00:06:06,968 --> 00:06:17,968
On the other hand, verification engineers try to explore as many states in the FSM as possible, meaning that they rigorously test the design.

54
00:06:17,992 --> 00:06:25,992
As with this goal, we conclude that the coverage for the RTL designs should guide the input to find new states.

55
00:06:26,016 --> 00:06:32,016
However, all the existing coverage measures were not suitable for the RTL fuzzing.

56
00:06:32,040 --> 00:06:39,040
Branch coverage, which monitors the branch statements, is not accurate to capture the finit states.

57
00:06:39,064 --> 00:06:46,064
Mux control coverage monitoring the MUX select signals is not efficient enough to quickly run the fuzzer.

58
00:06:46,088 --> 00:06:55,088
And the FSM coverage, which directly monitors the finite states, is not automatic so it requires the manual efforts from the designers.

59
00:06:55,112 --> 00:07:03,112
So we introduce register coverage, which is a new coverage measure for the RTL designs.

60
00:07:03,136 --> 00:07:07,136
Register coverage can correctly capture the FSM exploration.

61
00:07:07,160 --> 00:07:13,160
And it does incur only 7% runtime overhead which is fast enough to run the fuzzer.

62
00:07:13,184 --> 00:07:22,184
And also, register coverage is fully automated so we do not require any manual effort.

63
00:07:22,400 --> 00:07:32,400
Since the goal of RTL verification is to explore as many states in the FSM, it is quite important to precisely capture the finite states.

64
00:07:32,424 --> 00:07:37,424
And we monitor the registers, which construct the finite state machine.

65
00:07:37,448 --> 00:07:43,448
Given a circuit like this, we add one more register, called regstate to monitor all the registers.

66
00:07:43,472 --> 00:07:47,472
Thus the regstate represents the finite states every cycle.

67
00:07:47,496 --> 00:07:55,496
For example, if the three cycle input is given like this, for the first cycle, regstate represents RFRS.

68
00:07:55,520 --> 00:07:58,520
and second BFPS, and so on.

69
00:08:00,000 --> 00:08:08,000
But, it is almost impossible to monitor all the registers in the design because the CPUs have a huge number of registers.

70
00:08:08,024 --> 00:08:15,024
For example with the three designs we fuzzed, the number of registers ranges from 200 to 5000.

71
00:08:15,048 --> 00:08:20,048
So, we define a new definition, control register.

72
00:08:20,072 --> 00:08:24,072
Control register is a register wired into the MUX select signal.

73
00:08:24,096 --> 00:08:32,096
Here, we focus on the MUXes because they change the control flow of the circuit design, as like the branches in the software.

74
00:08:32,120 --> 00:08:37,120
Whenever a MUX select signal is toggled, the circuit design is activated in different way.

75
00:08:37,144 --> 00:08:43,144
Then, we implemented a static analyzer which identifies all the control registers.

76
00:08:44,680 --> 00:08:51,680
So, given a circuit like this, our static analyzer first identifies all the MUX select signals.

77
00:08:51,704 --> 00:08:56,704
Then, it identifies all the control registers by performing the backward tracing the wires.

78
00:08:57,100 --> 00:09:06,100
With help of this analyzer, we were able to reduce the number of monitored registers to at most one out of ten.

79
00:09:06,124 --> 00:09:13,124
We also want to note that our analyzer is fully automated to identify all the control registers.

80
00:09:13,148 --> 00:09:23,148
While monitoring the control registers, the register coverage has to identify the new state and compute the number of new state explorations.

81
00:09:23,172 --> 00:09:28,172
For that, we introduce a hardware data structure, called coverage map.

82
00:09:28,196 --> 00:09:37,196
Coverage map remembers all the explored states so that we can always identify the new state exploration by checking the coverage map.

83
00:09:37,220 --> 00:09:45,220
Then we introduce the instrumentation method which compute the number of new state explorations.

84
00:09:45,244 --> 00:09:55,244
For example, given an RTL design with three modules like this, we instrument all the modules with three components, regstate, covmap, and covsum.

85
00:09:55,268 --> 00:10:02,268
As I mentioned, regstate monitors all the control registers, and covmap remembers all the explored states.

86
00:10:02,292 --> 00:10:10,292
Then, we summarize the number of new state explorations into the covsum register.

87
00:10:10,316 --> 00:10:17,316
We instrument all the control registers, so that their values are hashed into the regstate every cycle.

88
00:10:17,340 --> 00:10:20,340
Thus regstate represents the finite states.

89
00:10:20,640 --> 00:10:27,640
Then the regstate is used to index and set the corresponding bit in the covmap.

90
00:10:27,664 --> 00:10:36,664
For example, if the value of regstate is 4, then the fourth bit in the covmap is set 1, meaning that the corresponding state is covered.

91
00:10:36,688 --> 00:10:47,688
Before writing one, we check the bit so, if the bit is zero,  we increase the covsum register to indicate that the new state is explored.

92
00:10:47,712 --> 00:10:56,312
The covsum value is maintained in all the modules so they are wired up to parent module and summed until the toplevel output.

93
00:10:56,336 --> 00:11:03,336
We used the toplevel output, the total sum of covsums as the register coverage measure.

94
00:11:03,360 --> 00:11:15,360
We implemented all this procedure into the compiler pass so that our compiler automatically instruments the components and the related logics into the CPU RTL design.

95
00:11:15,384 --> 00:11:23,384
Finally we completed the fuzzer framework, which uses the register coverage to guide the input.

96
00:11:23,408 --> 00:11:33,408
To summarize our work, we introduced DiFuzzRTL which is an accurate, efficient and automatic fuzzer to find CPU bugs.

97
00:11:33,432 --> 00:11:43,432
DiFuzzRTL includes register coverage guided input generation and it automatically tests the CPUs and detects the bugs.

98
00:11:43,456 --> 00:11:55,456
We implemented the prototype of DiFuzzRTL with three real-world open-source CPUs: Mor1kx from OpenRISC, Rocket and Boom from RISCV.

99
00:11:55,480 --> 00:12:03,480
And, DiFuzzRTL supports two RTL testing environments: software simulation and the FPGA prototyping.

100
00:12:05,000 --> 00:12:09,500
Once again, we found 16 new CPU bugs with DiFuzzRTL.

101
00:12:09,524 --> 00:12:15,524
There were a wide range of bugs, from the performance bugs to the decoding bugs.

102
00:12:15,548 --> 00:12:20,548
Some of the bugs we found were even harmful to the security of the system.

103
00:12:20,572 --> 00:12:28,572
For example, the bug found in the Boom was breaking the memory consistency which can trigger the race condition.

104
00:12:28,596 --> 00:12:38,596
Such bugs are much critical than the bugs in software, because it could take much longer time to identify the root cause of the bug.

105
00:12:38,620 --> 00:12:48,620
We also demonstrated the effectiveness of DiFuzzRTL by conducting the case study with newly found bugs, as shown in the second table.

106
00:12:48,644 --> 00:12:51,644
For more details, please check my paper.

107
00:12:51,668 --> 00:13:03,168
As a future use case, we think the idea behind register coverage can also be used to detect the micro-architectural side channels.

108
00:13:03,192 --> 00:13:13,192
And also, the DiFuzzRTL framework can be used to fuzz the entire SoC, finding bugs such as memory consistency bugs.

109
00:13:13,216 --> 00:13:21,216
To conclude my presentation, DiFuzzRTL is an accurate, efficient and automatic fuzzer for the CPU RTL designs.

110
00:13:21,240 --> 00:13:25,240
And, we found several real-world bugs with DiFuzzRTL.

111
00:13:25,264 --> 00:13:27,264
Thank you.

