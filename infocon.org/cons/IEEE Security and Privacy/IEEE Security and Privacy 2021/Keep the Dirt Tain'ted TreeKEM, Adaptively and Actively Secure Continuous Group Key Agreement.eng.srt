1
00:00:00,700 --> 00:00:02,639
Hi everyone, I'm Guille

2
00:00:02,650 --> 00:00:04,640
and in this talk I will give you an overview

3
00:00:04,640 --> 00:00:06,399
of our work on Tainted TreeKEM

4
00:00:06,400 --> 00:00:10,380
an adaptively and actively secure Continuous 
Group Key Agreement (protocol)

5
00:00:10,380 --> 00:00:14,000
I will start with our motivation, which is secure messaging,

6
00:00:14,000 --> 00:00:16,580
where parties that need not be online at the same time

7
00:00:16,580 --> 00:00:18,799
exchange messages by means of a server

8
00:00:18,800 --> 00:00:21,980
that buffers them and relays them to users, as they come online.

9
00:00:21,980 --> 00:00:26,540
The two party case has seen quite a lot of attention
from the academic community,

10
00:00:26,540 --> 00:00:29,450
particularly since the inception of the double ratchet algorithm,

11
00:00:29,500 --> 00:00:32,280
so we can consider this setting well understood.

12
00:00:32,280 --> 00:00:35,940
However, the group setting is not as well understood.

13
00:00:35,940 --> 00:00:39,449
Accordingly, in this talk I will give you an overview

14
00:00:39,450 --> 00:00:42,120
of a primitive called Continuous Group Key Agreement

15
00:00:42,120 --> 00:00:45,489
which is at the core of secure group messaging.

16
00:00:47,490 --> 00:00:51,380
I will present an instantiation of it, which we called Tainted TreeKEM

17
00:00:51,380 --> 00:00:55,200
and discuss its efficiency and security.

18
00:00:55,200 --> 00:01:00,420
Let's start with what we would expect from 
a Continuous Group Key Agreement

19
00:01:00,420 --> 00:01:03,100
or, therefore, from secure group messaging.

20
00:01:03,100 --> 00:01:05,900
The first thing we want is

21
00:01:05,900 --> 00:01:08,370
for it to be able to support dynamic membership

22
00:01:08,370 --> 00:01:11,440
as we want to be able to add and remove users.

23
00:01:11,440 --> 00:01:14,399
Secondly, we want it to be asynchronous,

24
00:01:14,400 --> 00:01:17,610
we don't want to make any assumptions 
on the online behaviour of users.

25
00:01:18,610 --> 00:01:20,860
Third, we want it to be secure.

26
00:01:20,860 --> 00:01:25,380
We assume users will get corrupted throughout 
 the protocol execution

27
00:01:25,450 --> 00:01:27,640
and in this case, we want to ensure

28
00:01:27,640 --> 00:01:30,280
forward secrecy and post-compromise security

29
00:01:30,280 --> 00:01:34,850
Let me take a second to recall what these two notions are

30
00:01:34,850 --> 00:01:38,300
If we imagine a group timeline, from its initialization,

31
00:01:38,300 --> 00:01:40,960
and we suppose there is some compromise window in the middle

32
00:01:40,960 --> 00:01:42,960
where the state of a user leaks

33
00:01:42,960 --> 00:01:46,460
Then, forward secrecy would ensure that

34
00:01:46,460 --> 00:01:50,160
all the keys and messages up to some point in the past
remain secure

35
00:01:50,160 --> 00:01:53,720
whereas post-compromise security ensures that

36
00:01:53,720 --> 00:01:57,100
at some point in the future, after the end of the compromise,

37
00:01:57,100 --> 00:01:59,100
we will regain security.

38
00:01:59,100 --> 00:02:02,199
Of course, you can guess both these notions

39
00:02:02,200 --> 00:02:04,460
need some form of key update functionality.

40
00:02:04,460 --> 00:02:06,890
However, the difference is that

41
00:02:06,890 --> 00:02:08,330
whereas for forward secrecy

42
00:02:08,419 --> 00:02:10,820
one-way, deterministic updates are enough,

43
00:02:10,820 --> 00:02:13,480
post-compromise security needs new randomness.

44
00:02:14,840 --> 00:02:17,260
So, going back for a second,

45
00:02:17,260 --> 00:02:20,040
we mentioned that we know how to

46
00:02:20,040 --> 00:02:22,380
build these protocols in the two party case,

47
00:02:22,380 --> 00:02:26,730
so one could think that one could build a group

48
00:02:26,730 --> 00:02:29,660
by just instantiating this bi-directional channels

49
00:02:29,660 --> 00:02:31,660
between every pair of users.

50
00:02:31,660 --> 00:02:34,840
Indeed this works, the problem is that

51
00:02:34,840 --> 00:02:36,690
if a user wants to update their keys

52
00:02:36,690 --> 00:02:38,240
they need to communicate the new key

53
00:02:38,240 --> 00:02:41,580
to every single user, which has linear communication cost

54
00:02:41,580 --> 00:02:43,580
in the size of the group.

55
00:02:43,580 --> 00:02:46,560
For very big groups, this makes it unfeasible.

56
00:02:48,560 --> 00:02:52,640
So, to our requirements for Continuous Group Key Agreement

57
00:02:52,640 --> 00:02:54,140
we should add a fourth one

58
00:02:54,140 --> 00:02:59,540
which is that key updates can be done efficiently

59
00:02:59,770 --> 00:03:03,220
Here, by efficient we mean logarithmic

60
00:03:03,220 --> 00:03:05,220
This is particularly important

61
00:03:05,220 --> 00:03:07,170
because the more frequently we can update,

62
00:03:07,170 --> 00:03:09,540
the better security we will get.

63
00:03:10,220 --> 00:03:14,130
This brings as to Message Layer Security or MLS, for short,

64
00:03:14,130 --> 00:03:16,540
which is an IETF working group

65
00:03:16,610 --> 00:03:19,450
looking to create a standard for secure group messaging

66
00:03:20,080 --> 00:03:23,880
In particular, they aim to support groups of up to 50.000 users.

67
00:03:24,010 --> 00:03:29,019
So, this efficient key updating mentioned before is extremely important

68
00:03:29,020 --> 00:03:32,100
Their current proposal is called TreeKEM.

69
00:03:32,100 --> 00:03:35,000
So we will now look at how it works.

70
00:03:36,250 --> 00:03:38,720
TreeKEM uses a binary tree

71
00:03:38,720 --> 00:03:40,800
where users are associated to the leaves

72
00:03:40,800 --> 00:03:43,100
each user has a single associated leaf

73
00:03:43,100 --> 00:03:45,700
and each node in the tree has an associated

74
00:03:45,700 --> 00:03:47,700
secret-public key-pair

75
00:03:48,100 --> 00:03:50,140
The edges in this tree mean that

76
00:03:50,140 --> 00:03:52,570
the knowledge of the secret key of the source node

77
00:03:52,570 --> 00:03:55,250
implies knowledge of the secret key of the sink node.

78
00:03:55,250 --> 00:03:57,810
In particular, a user knows the secret keys (for nodes)

79
00:03:57,810 --> 00:03:59,400
on their path to the root.

80
00:03:59,400 --> 00:04:02,640
Indeed, it is the key associated to the root,

81
00:04:02,640 --> 00:04:04,209
also called the group key,

82
00:04:04,210 --> 00:04:06,800
that will later be user to derive keys

83
00:04:06,800 --> 00:04:08,800
used to encrypt the text messages.

84
00:04:08,800 --> 00:04:12,620
Everyone needs to have access to it, and agree on it.

85
00:04:14,050 --> 00:04:17,779
Let's see how a user could update their keys

86
00:04:17,779 --> 00:04:21,010
Let's say Alice belongs to this group of 8 users,

87
00:04:21,010 --> 00:04:23,010
and wants to update her keys.

88
00:04:23,010 --> 00:04:25,480
What she does first is she samples

89
00:04:25,480 --> 00:04:27,380
a new key for her leaf node,

90
00:04:27,380 --> 00:04:29,380
and derives new keys along her path,

91
00:04:29,380 --> 00:04:31,450
by means of a hash evaluation

92
00:04:31,450 --> 00:04:33,450
signalled here with a golden edge.

93
00:04:33,450 --> 00:04:35,969
These new keys she then encrypts

94
00:04:35,970 --> 00:04:38,460
under the public keys of the nodes in the co-path,

95
00:04:38,540 --> 00:04:40,720
So that all users now have access to

96
00:04:40,720 --> 00:04:42,720
the new keys on their path.

97
00:04:42,720 --> 00:04:45,300
For example, if we take this third user here,

98
00:04:45,300 --> 00:04:47,600
they will have access to this secret key*

99
00:04:47,600 --> 00:04:50,520
and therefore will be able to decrypt this ciphertext

100
00:04:50,520 --> 00:04:52,320
gaining access to this key

101
00:04:52,320 --> 00:04:55,250
and, by evaluating the hash, gain access to the new group key.

102
00:04:56,890 --> 00:04:59,419
After this, the old keys are deleted.

103
00:04:59,420 --> 00:05:01,420
What this achieves is that,

104
00:05:01,420 --> 00:05:03,740
had Alice been corrupted before she updates,

105
00:05:03,740 --> 00:05:08,240
all the secrets that would have leaked during that corruption

106
00:05:08,330 --> 00:05:10,729
are now removed from the tree, and therefore useless.

107
00:05:10,730 --> 00:05:14,940
So, we have achieved PCS

108
00:05:16,010 --> 00:05:19,200
The more interesting case, however, is removals.

109
00:05:19,300 --> 00:05:24,810
Let's say Alice wants to remove Henry, the rightmost user.

110
00:05:24,810 --> 00:05:27,760
Intuitively, what she needs to do is,

111
00:05:27,760 --> 00:05:31,060
similarly to the update, rotate the keys

112
00:05:31,060 --> 00:05:33,480
of the nodes on Henry's path.

113
00:05:34,240 --> 00:05:37,130
She could do this as before, as the update.

114
00:05:37,130 --> 00:05:39,969
The issue is that if it is Alice

115
00:05:39,970 --> 00:05:41,970
that samples these new keys,

116
00:05:41,970 --> 00:05:45,450
and she was corrupted while doing so,

117
00:05:45,450 --> 00:05:48,580
then, not only the keys on her path leak,

118
00:05:48,580 --> 00:05:51,400
but also the (new) keys on Henry's path.

119
00:05:51,400 --> 00:05:55,960
So now, if we were to remove Alice in the same way,

120
00:05:56,090 --> 00:05:59,140
the adversary would still have knowledge of this key here

121
00:05:59,210 --> 00:06:02,340
and would be able to decrypt this ciphertext

122
00:06:02,340 --> 00:06:04,340
and gain access to the new group key.

123
00:06:04,580 --> 00:06:06,919
This is not what we would expect.

124
00:06:06,920 --> 00:06:09,760
If we have a corrupt user and we remove them,

125
00:06:09,820 --> 00:06:12,300
we would expect to have security again.

126
00:06:12,300 --> 00:06:14,600
So, how do we solve this?

127
00:06:14,600 --> 00:06:18,770
The approach MLS takes is called "blanking".

128
00:06:18,770 --> 00:06:21,250
Effectively, means that you delete

129
00:06:21,250 --> 00:06:25,780
the keys on the nodes of the removed party's path.

130
00:06:25,780 --> 00:06:29,159
Then act as if those nodes don't exist

131
00:06:29,160 --> 00:06:34,080
and when needing to encrypt a new key to this node,
 for example,

132
00:06:34,080 --> 00:06:37,090
instead of encrypting it to this node that was on Henry's path,

133
00:06:37,090 --> 00:06:38,289
that is now blank,

134
00:06:38,290 --> 00:06:40,810
you encrypt it to the nodes below.

135
00:06:41,520 --> 00:06:43,580
So, to remove a party,

136
00:06:43,580 --> 00:06:48,890
Alice will just create a new group key,

137
00:06:48,890 --> 00:06:51,810
by just effectively generating an update,

138
00:06:51,810 --> 00:06:54,080
and delivering the new keys

139
00:06:54,080 --> 00:06:56,210
to the appropriate nodes in the copath

140
00:06:56,210 --> 00:06:58,210
just as we saw before.

141
00:06:58,210 --> 00:07:01,640
Eventhough we are changing the tree structure,

142
00:07:01,640 --> 00:07:04,650
this is not an issue necessarily,

143
00:07:04,650 --> 00:07:07,719
because as users in the appropriate subtree update,

144
00:07:07,720 --> 00:07:11,570
the blanked nodes will receive new keys,

145
00:07:11,570 --> 00:07:14,290
so we will regain our binary tree structure.

146
00:07:15,050 --> 00:07:16,920
The problem, however, is that

147
00:07:16,920 --> 00:07:19,140
if we do remove a lot of users,

148
00:07:19,140 --> 00:07:21,460
we will create a lot of blanks.

149
00:07:21,460 --> 00:07:25,530
And some given update, like Alice's here,

150
00:07:25,530 --> 00:07:29,039
needs to be encrypted individually to all leaf nodes.

151
00:07:29,040 --> 00:07:32,620
Which brings back the linear communication cost

152
00:07:32,620 --> 00:07:34,620
which we were trying to avoid.

153
00:07:36,240 --> 00:07:39,210
As a potential solution to this,

154
00:07:39,210 --> 00:07:44,330
We propose protocol called Tainted TreeKEM

155
00:07:44,330 --> 00:07:46,289
which is a CGKA variant of TreeKEM

156
00:07:46,290 --> 00:07:48,290
that does not make use of blanking.

157
00:07:48,770 --> 00:07:51,599
In this work, we show that this is more efficient

158
00:07:51,650 --> 00:07:54,659
under some natural distributions of group operations

159
00:07:54,660 --> 00:07:56,730
Furthermore, we prove it secure

160
00:07:56,730 --> 00:07:59,760
against adaptive adversaries that have full network control.

161
00:07:59,840 --> 00:08:02,679
Our proof is the first adaptive proof

162
00:08:02,680 --> 00:08:05,260
for any CGKA or TreeKEM-related protocol

163
00:08:05,260 --> 00:08:07,740
that achieves a polynomial loss.

164
00:08:08,640 --> 00:08:10,659
Let me give you an overview of

165
00:08:10,680 --> 00:08:12,660
how TTKEM differs from TreeKEM

166
00:08:12,660 --> 00:08:14,490
Recall the case from before,

167
00:08:14,490 --> 00:08:16,490
where Alice wants to remove Henry.

168
00:08:16,770 --> 00:08:19,690
There, we said that intuitively, she needed to

169
00:08:19,690 --> 00:08:21,690
rotate the keys (on the nodes) along Henry's path.

170
00:08:21,690 --> 00:08:23,690
What we do in TTKEM

171
00:08:23,690 --> 00:08:28,480
is to allow Alice to sample keys outside her own path

172
00:08:28,810 --> 00:08:30,970
but these nodes now become tainted.

173
00:08:30,970 --> 00:08:34,340
And it is public knowledge that they are tainted.

174
00:08:34,340 --> 00:08:36,409
Everyone keeps track of who was

175
00:08:36,409 --> 00:08:45,010
the last person not on that path, that sampled that node.

176
00:08:45,980 --> 00:08:49,530
Later, if Alice needs to update,

177
00:08:49,530 --> 00:08:51,530
and she has (those) two tainted nodes,

178
00:08:51,530 --> 00:08:55,579
she will also be required to, 
not only update the keys on her path,

179
00:08:55,720 --> 00:08:59,540
but also update the keys on these tainted nodes.

180
00:09:00,170 --> 00:09:02,370
Similarly, if Alice was removed,

181
00:09:02,370 --> 00:09:05,140
not only the keys on her path would be removed (and updated)

182
00:09:05,140 --> 00:09:08,220
but also the ones for all her tainted nodes.

183
00:09:08,220 --> 00:09:10,480
What this ensures is that

184
00:09:10,480 --> 00:09:12,810
all the keys that could potentially

185
00:09:12,850 --> 00:09:14,540
have been in her state or have leaked,

186
00:09:14,540 --> 00:09:17,280
had she been corrupted, are now changed.

187
00:09:18,740 --> 00:09:22,580
I refer you to our paper for the full details of the protocol.

188
00:09:22,740 --> 00:09:26,210
but let me just give you an overview of the efficiency.

189
00:09:26,210 --> 00:09:31,080
At first sight, it's not clear which of the two is more efficient,

190
00:09:31,080 --> 00:09:35,880
as they affect communication (costs) in a different way.

191
00:09:35,880 --> 00:09:40,760
A blank will affect anyone whose co-path contains said blank.

192
00:09:40,760 --> 00:09:44,400
Whenever I need to encrypt to a blank node,

193
00:09:44,400 --> 00:09:46,689
I will instead need to encrypt to more nodes.

194
00:09:47,460 --> 00:09:50,370
A taint, however, affects only the tainter,

195
00:09:50,370 --> 00:09:55,700
since they are the only ones who need to

196
00:09:55,700 --> 00:09:59,160
rotate the key of that tainted node,

197
00:09:59,160 --> 00:10:01,900
but this is irrespective of their position in the tree.

198
00:10:01,900 --> 00:10:06,650
that is, the relative position between the tainter and the tainted node.

199
00:10:06,940 --> 00:10:09,930
The second aspect is healing

200
00:10:09,930 --> 00:10:12,680
A blank can heal

201
00:10:12,680 --> 00:10:14,859
when a user in the appropriate sub-tree

202
00:10:14,860 --> 00:10:16,860
samples a new key for it.

203
00:10:16,860 --> 00:10:18,930
This condition, however, is not enough

204
00:10:18,930 --> 00:10:20,810
for tainting, which also requires that

205
00:10:20,810 --> 00:10:23,260
all its children have been untainted.

206
00:10:23,260 --> 00:10:26,500
So, healing is slower in tainting.

207
00:10:26,500 --> 00:10:34,340
Despite this, in our analysis we show tainting

208
00:10:34,340 --> 00:10:37,740
seems to come out on top on different scenarios.

209
00:10:37,740 --> 00:10:41,080
However, the first hurdle we find when trying

210
00:10:41,080 --> 00:10:44,920
to compare TreeKEM to TTKEM is that

211
00:10:44,940 --> 00:10:47,900
TreeKEM's recent version uses

212
00:10:47,900 --> 00:10:49,900
what is called the Commit framework,

213
00:10:49,900 --> 00:10:52,520
where operations are bundled into batches

214
00:10:52,520 --> 00:10:55,160
and executed at once, together with an update.

215
00:10:56,050 --> 00:10:58,920
Our protocol, TTKEM, does not do this

216
00:10:58,920 --> 00:11:01,930
and instead executes operations one by one.

217
00:11:01,930 --> 00:11:04,290
So what we did is we compared TTKEM

218
00:11:04,290 --> 00:11:06,640
against two dummy variants of TreeKEM

219
00:11:06,640 --> 00:11:08,640
against which this comparison is easier.

220
00:11:08,640 --> 00:11:14,880
The first one, TKEM, in blue in the graphs in the following slides

221
00:11:14,880 --> 00:11:17,210
ignores the update following each Commit.

222
00:11:17,210 --> 00:11:19,650
So, of course, it will be more efficient than TreeKEM,

223
00:11:19,650 --> 00:11:24,220
since we are ignoring this extra work incurred by every Commit.

224
00:11:24,420 --> 00:11:27,040
The second one, TKEM_commit (in orange)

225
00:11:27,040 --> 00:11:30,579
restricts each Commit to contain a single operation

226
00:11:30,820 --> 00:11:33,200
so it will be less efficient than TreeKEM

227
00:11:33,200 --> 00:11:34,970
since it cannot take advantage of,

228
00:11:34,970 --> 00:11:37,810
for example, bundling together several removes.

229
00:11:38,970 --> 00:11:42,620
We compared the two protocols in two different settings.

230
00:11:42,620 --> 00:11:45,250
The first one is that of no administrators,

231
00:11:45,250 --> 00:11:47,210
where we assume that Adds and Removes

232
00:11:47,210 --> 00:11:49,810
are performed by all users uniformly.

233
00:11:49,810 --> 00:11:52,640
Here we distinguish two cases depending on

234
00:11:52,640 --> 00:12:01,730
the distribution representing how often users update
 is a Zipf of an uniform one.

235
00:12:01,730 --> 00:12:05,490
In both cases we get similar results

236
00:12:05,490 --> 00:12:10,160
which show that TTKEM performs better asymptotically

237
00:12:10,700 --> 00:12:13,820
The second setting we consider is that where

238
00:12:13,820 --> 00:12:17,920
Adds and Removes are performed exclusively
by a small set of administrators

239
00:12:18,060 --> 00:12:21,329
and here we assume everyone updates with the same probability.

240
00:12:21,620 --> 00:12:23,960
The overall results are similar

241
00:12:23,960 --> 00:12:26,410
TTKEM still performing better asymptotically

242
00:12:26,410 --> 00:12:28,600
but what's interesting about this case

243
00:12:28,600 --> 00:12:30,600
is that it highlights a tradeoff

244
00:12:30,600 --> 00:12:32,850
between the cost for non-administrators, on the left,

245
00:12:32,850 --> 00:12:35,680
which is much better for Tainted TreeKEM,

246
00:12:35,680 --> 00:12:37,650
versus the cost for administrators

247
00:12:37,650 --> 00:12:40,120
that now bear most of the (work) load.

248
00:12:41,090 --> 00:12:47,580
Let me just give a few words on security, before finishing.

249
00:12:49,580 --> 00:12:53,640
To start, let me describe the adversarial model we consider.

250
00:12:53,640 --> 00:12:57,530
We consider an adversary that controls the protocol execution

251
00:12:57,530 --> 00:12:59,959
and can corrupt users adaptively.

252
00:12:59,960 --> 00:13:04,410
Moreover, corruptions take place during a window

253
00:13:04,410 --> 00:13:06,730
during which, all user's state leaks,

254
00:13:06,730 --> 00:13:10,490
as well as the randomness used during this window.

255
00:13:10,490 --> 00:13:13,720
Third, the adversary is "partially" active,

256
00:13:13,720 --> 00:13:15,720
meaning that they have full network control

257
00:13:15,720 --> 00:13:19,250
and can force parties into inconsistent states,

258
00:13:19,250 --> 00:13:23,380
but we do not allow them to craft messages.

259
00:13:23,380 --> 00:13:27,290
Since we assume implicit authentication, this means

260
00:13:27,290 --> 00:13:31,680
they cannot corrupt the user and send messages in their name.

261
00:13:31,820 --> 00:13:35,120
Security is defined in terms of a challenge

262
00:13:35,120 --> 00:13:37,440
where the adversary must distinguish

263
00:13:37,440 --> 00:13:39,680
a real group key from a random one.

264
00:13:39,680 --> 00:13:43,099
We must ensure this challenge is not trivially solvable

265
00:13:43,100 --> 00:13:44,660
using one of the corrupted keys,

266
00:13:44,660 --> 00:13:47,280
so we must define a safe predicate.

267
00:13:48,530 --> 00:13:51,089
As to the concrete results that we get,

268
00:13:51,090 --> 00:13:53,000
if Q is the number of operations

269
00:13:53,000 --> 00:13:55,460
that take place during the protocol execution,

270
00:13:55,460 --> 00:13:57,460
and n is the number of users,

271
00:13:57,460 --> 00:13:59,460
we get that in the standard model

272
00:13:59,460 --> 00:14:02,770
if we have an encryption scheme that

273
00:14:02,770 --> 00:14:05,380
is epsilon IND-CPA secure and

274
00:14:05,380 --> 00:14:08,689
we model H, this function used in the key derivation,

275
00:14:08,690 --> 00:14:12,140
as a epsilon-secure pseudorandom function

276
00:14:12,140 --> 00:14:16,689
then, TTKEM loses a factor of Q^log(n)

277
00:14:16,690 --> 00:14:20,490
in security compared to the underlying encryption scheme.

278
00:14:20,490 --> 00:14:24,360
In the Random Oracle model, however, the result is better

279
00:14:24,360 --> 00:14:26,360
where the factor is only polynomial.

280
00:14:26,360 --> 00:14:29,360
Q squared, n squared, to the underlying encryption scheme.

281
00:14:29,360 --> 00:14:33,140
And the nice thing is that these results apply to TreeKEM

282
00:14:33,140 --> 00:14:37,480
that at the moment of our work had no adaptive security proof

283
00:14:37,480 --> 00:14:39,480
with sub-exponential loss.

284
00:14:40,680 --> 00:14:43,359
To summarize our results,

285
00:14:43,360 --> 00:14:45,570
We proposed a new variant of TreeKEM

286
00:14:45,570 --> 00:14:47,940
based on tainting instead of blanking,

287
00:14:47,940 --> 00:14:51,080
we show it (to be) more efficient under natural distributions,

288
00:14:51,080 --> 00:14:53,570
and we provide the first adaptive security proof

289
00:14:53,570 --> 00:14:56,360
for any CGKA that only has polynomial loss.

290
00:14:56,920 --> 00:14:59,620
Before finishing, just to outline a few open problems,

291
00:14:59,620 --> 00:15:03,620
the first would be, can we extend security to malicious insiders.

292
00:15:03,620 --> 00:15:07,080
The second one, are the more efficient protocols out there?

293
00:15:07,080 --> 00:15:10,000
Most of the approaches we've seen so far

294
00:15:10,000 --> 00:15:12,620
are based on TreeKEM or variants of it.

295
00:15:12,620 --> 00:15:14,920
But maybe a completely new approach works.

296
00:15:14,920 --> 00:15:17,250
And the third one is

297
00:15:17,250 --> 00:15:20,170
can we getter a better efficiency comparison

298
00:15:20,170 --> 00:15:21,740
using real world access patterns

299
00:15:21,740 --> 00:15:24,560
which we did not have access to when we wrote this paper.

300
00:15:24,560 --> 00:15:26,920
With that, I conclude my talk

301
00:15:26,920 --> 00:15:28,920
And I thank you for you attention!

