1
00:00:01,760 --> 00:00:03,760
hello everyone my name is quan

2
00:00:03,760 --> 00:00:06,000
and today i'll be talking about our work

3
00:00:06,000 --> 00:00:08,080
on building behavior signatures for

4
00:00:08,080 --> 00:00:09,120
javascript

5
00:00:09,120 --> 00:00:12,240
in order to detect a future list evasion

6
00:00:12,240 --> 00:00:13,840
so first let me begin with some

7
00:00:13,840 --> 00:00:16,079
background information on filter lists

8
00:00:16,079 --> 00:00:18,400
so what are future lists well if you

9
00:00:18,400 --> 00:00:20,560
have ever used ad blocking browser

10
00:00:20,560 --> 00:00:21,439
extensions

11
00:00:21,439 --> 00:00:24,080
such as ad block plus you know what such

12
00:00:24,080 --> 00:00:25,840
extensions can do for you

13
00:00:25,840 --> 00:00:28,160
so basically it's going to block all of

14
00:00:28,160 --> 00:00:29,679
our advertisements

15
00:00:29,679 --> 00:00:31,679
and tracking related content from a

16
00:00:31,679 --> 00:00:32,880
website

17
00:00:32,880 --> 00:00:35,280
but behind the scenes how do browser

18
00:00:35,280 --> 00:00:36,079
extensions

19
00:00:36,079 --> 00:00:38,399
such as app blog plus know which

20
00:00:38,399 --> 00:00:40,079
resources to block

21
00:00:40,079 --> 00:00:42,480
well it turns out that they rely on a

22
00:00:42,480 --> 00:00:44,000
set of filter lists

23
00:00:44,000 --> 00:00:46,079
which are basically crowd-sourced

24
00:00:46,079 --> 00:00:47,039
blacklists

25
00:00:47,039 --> 00:00:49,360
of the domains and urls that are known

26
00:00:49,360 --> 00:00:50,320
to serve

27
00:00:50,320 --> 00:00:52,920
privacy homing content but such

28
00:00:52,920 --> 00:00:54,719
futurist-based blocking

29
00:00:54,719 --> 00:00:57,520
is prone to simple evasion attacks from

30
00:00:57,520 --> 00:00:58,079
the

31
00:00:58,079 --> 00:01:01,120
web trackers so for example one of the

32
00:01:01,120 --> 00:01:02,960
things the web trackers can do

33
00:01:02,960 --> 00:01:05,280
is to simply move their contents which

34
00:01:05,280 --> 00:01:06,320
are being blocked

35
00:01:06,320 --> 00:01:08,720
at one location and hosting them on a

36
00:01:08,720 --> 00:01:10,560
different location

37
00:01:10,560 --> 00:01:12,720
and given the crowdsourced nature of the

38
00:01:12,720 --> 00:01:13,600
filter list

39
00:01:13,600 --> 00:01:16,479
it's going to take some time if ever for

40
00:01:16,479 --> 00:01:18,720
those new locations to be blocked as

41
00:01:18,720 --> 00:01:19,759
well

42
00:01:19,759 --> 00:01:22,320
another thing the web trackers can do is

43
00:01:22,320 --> 00:01:23,119
to convince

44
00:01:23,119 --> 00:01:25,360
the website owners to inline their

45
00:01:25,360 --> 00:01:26,320
content

46
00:01:26,320 --> 00:01:29,280
directly into the page so in such cases

47
00:01:29,280 --> 00:01:31,439
there would be no domain or url

48
00:01:31,439 --> 00:01:33,920
for the future lists to target so it

49
00:01:33,920 --> 00:01:36,560
becomes impossible to block them

50
00:01:36,560 --> 00:01:39,119
finally if the web servers want to be

51
00:01:39,119 --> 00:01:40,240
really malicious

52
00:01:40,240 --> 00:01:42,159
they can also merge their tracking

53
00:01:42,159 --> 00:01:44,399
scripts with other behind scripts

54
00:01:44,399 --> 00:01:46,640
that are implementing desirable

55
00:01:46,640 --> 00:01:47,840
functionalities

56
00:01:47,840 --> 00:01:50,960
such as a video player for a website

57
00:01:50,960 --> 00:01:52,799
so this is going to present future

58
00:01:52,799 --> 00:01:54,240
list-based blogging

59
00:01:54,240 --> 00:01:56,799
uh with a loose loose scenario of having

60
00:01:56,799 --> 00:01:57,840
to choose between

61
00:01:57,840 --> 00:02:00,560
either allowing the benign contents or

62
00:02:00,560 --> 00:02:02,719
allowing the privacy harm

63
00:02:02,719 --> 00:02:05,280
so to summarize it is really trivial for

64
00:02:05,280 --> 00:02:06,240
the web trackers

65
00:02:06,240 --> 00:02:08,878
to evade future list blocking but by

66
00:02:08,878 --> 00:02:09,840
comparison

67
00:02:09,840 --> 00:02:12,480
it is significantly more difficult to

68
00:02:12,480 --> 00:02:14,239
even be able to detect

69
00:02:14,239 --> 00:02:17,520
when such evasions are taking place

70
00:02:17,520 --> 00:02:19,760
and therefore our goal in this work is

71
00:02:19,760 --> 00:02:22,000
to detect the future list evasion

72
00:02:22,000 --> 00:02:24,160
and in particular we want to focus on

73
00:02:24,160 --> 00:02:26,480
the executable javascript code

74
00:02:26,480 --> 00:02:29,120
because such contents have the potential

75
00:02:29,120 --> 00:02:31,200
to cause the most privacy harm

76
00:02:31,200 --> 00:02:34,239
simply by virtue of the flexibility of

77
00:02:34,239 --> 00:02:35,120
being able to

78
00:02:35,120 --> 00:02:37,599
execute arbitrary code in the user's

79
00:02:37,599 --> 00:02:38,959
browser

80
00:02:38,959 --> 00:02:41,760
and in terms of methodology we rely on

81
00:02:41,760 --> 00:02:44,239
building identifying behavior signatures

82
00:02:44,239 --> 00:02:46,800
of the privacy harmony scripts and then

83
00:02:46,800 --> 00:02:48,080
based on the signatures

84
00:02:48,080 --> 00:02:51,200
we further built a tool to allow us

85
00:02:51,200 --> 00:02:54,000
to detect future list evasion in the

86
00:02:54,000 --> 00:02:55,280
current web

87
00:02:55,280 --> 00:02:57,840
but in order for us to build behavior

88
00:02:57,840 --> 00:02:58,720
signatures

89
00:02:58,720 --> 00:03:00,879
we first need to know what the scripts

90
00:03:00,879 --> 00:03:03,519
are actually doing during runtime

91
00:03:03,519 --> 00:03:06,000
so for this purpose we rely on a set of

92
00:03:06,000 --> 00:03:06,720
browser

93
00:03:06,720 --> 00:03:09,200
instrumentations which we refer to as

94
00:03:09,200 --> 00:03:10,319
page graph

95
00:03:10,319 --> 00:03:12,560
so page graph has been implemented for

96
00:03:12,560 --> 00:03:13,840
the chromium browser

97
00:03:13,840 --> 00:03:16,239
and what it uh and what page graph does

98
00:03:16,239 --> 00:03:18,000
is that uh it records

99
00:03:18,000 --> 00:03:20,640
the runtime actions taken by the scripts

100
00:03:20,640 --> 00:03:22,640
into a graph

101
00:03:22,640 --> 00:03:25,920
and by script actions we include events

102
00:03:25,920 --> 00:03:29,280
such as dom interaction web api usage

103
00:03:29,280 --> 00:03:31,280
and network requests made by the scripts

104
00:03:31,280 --> 00:03:32,640
during runtime

105
00:03:32,640 --> 00:03:35,040
so all of these are recorded into a

106
00:03:35,040 --> 00:03:35,680
graph

107
00:03:35,680 --> 00:03:38,000
that naturally extends the notion of the

108
00:03:38,000 --> 00:03:38,720
dom tree

109
00:03:38,720 --> 00:03:40,400
which is already maintained by the

110
00:03:40,400 --> 00:03:43,040
browser so in such a graph

111
00:03:43,040 --> 00:03:45,200
the nodes are going to represent the

112
00:03:45,200 --> 00:03:47,680
elements of a web page's environment

113
00:03:47,680 --> 00:03:50,879
such as the dominoes the script units

114
00:03:50,879 --> 00:03:53,280
and the fetched network resources while

115
00:03:53,280 --> 00:03:54,159
the address

116
00:03:54,159 --> 00:03:56,239
represents the interactions among the

117
00:03:56,239 --> 00:03:57,840
nodes

118
00:03:57,840 --> 00:04:00,400
page graph is an effort that's

119
00:04:00,400 --> 00:04:02,799
spearheaded by brave software

120
00:04:02,799 --> 00:04:05,439
which is our collaborator for this work

121
00:04:05,439 --> 00:04:07,840
and brave has also open-sourced the page

122
00:04:07,840 --> 00:04:09,760
graph

123
00:04:09,760 --> 00:04:12,239
and here is a sample page graph which we

124
00:04:12,239 --> 00:04:14,640
recorded for a web page that contains

125
00:04:14,640 --> 00:04:15,599
the open source

126
00:04:15,599 --> 00:04:18,798
fingerprint js2 library

127
00:04:18,798 --> 00:04:20,399
so next i'm going to talk about how we

128
00:04:20,399 --> 00:04:22,960
generate signatures from the actions

129
00:04:22,960 --> 00:04:25,919
recorded by page graph and to do that i

130
00:04:25,919 --> 00:04:28,400
first need to refresh up on the concept

131
00:04:28,400 --> 00:04:30,960
of the javascript even move and this

132
00:04:30,960 --> 00:04:33,120
concept is a consequence of the fact

133
00:04:33,120 --> 00:04:35,120
that javascript has only a single

134
00:04:35,120 --> 00:04:37,440
threaded execution model

135
00:04:37,440 --> 00:04:39,040
so what this means is that for a

136
00:04:39,040 --> 00:04:41,280
different web page only one script on

137
00:04:41,280 --> 00:04:44,400
the page can execute at any given time

138
00:04:44,400 --> 00:04:46,960
and whenever a script is executing it's

139
00:04:46,960 --> 00:04:49,040
going to monopolize the cpu

140
00:04:49,040 --> 00:04:51,680
until either it finishes or otherwise

141
00:04:51,680 --> 00:04:53,120
voluntarily

142
00:04:53,120 --> 00:04:56,400
yields control so in this arrangement

143
00:04:56,400 --> 00:04:59,199
whenever a script is given a chance to

144
00:04:59,199 --> 00:05:00,880
execute on the cpu

145
00:05:00,880 --> 00:05:03,120
we refer to this as the script being

146
00:05:03,120 --> 00:05:04,240
given one term

147
00:05:04,240 --> 00:05:07,520
on the event group and therefore

148
00:05:07,520 --> 00:05:09,840
in order to extract the signatures all

149
00:05:09,840 --> 00:05:10,960
we have to do

150
00:05:10,960 --> 00:05:13,600
is to extract all the actions that

151
00:05:13,600 --> 00:05:14,160
happened

152
00:05:14,160 --> 00:05:16,880
for a script during one turn on the

153
00:05:16,880 --> 00:05:17,840
event loop

154
00:05:17,840 --> 00:05:20,160
and if the script is given multiple

155
00:05:20,160 --> 00:05:21,360
event loop turns

156
00:05:21,360 --> 00:05:24,800
then we will extract multiple signatures

157
00:05:24,800 --> 00:05:27,120
and therefore under this definition an

158
00:05:27,120 --> 00:05:29,440
event loop signature is a sub graph

159
00:05:29,440 --> 00:05:31,600
of an entire page graph that were

160
00:05:31,600 --> 00:05:33,600
recorded for a web page

161
00:05:33,600 --> 00:05:36,240
and here is one such example of a page

162
00:05:36,240 --> 00:05:38,479
of an event loop signature which we

163
00:05:38,479 --> 00:05:39,440
extracted

164
00:05:39,440 --> 00:05:42,400
for a canvas fingerprint script uh so in

165
00:05:42,400 --> 00:05:43,280
this example

166
00:05:43,280 --> 00:05:46,000
we can easily see that during one turn

167
00:05:46,000 --> 00:05:47,280
on the event loop

168
00:05:47,280 --> 00:05:50,160
uh the script first injected a converse

169
00:05:50,160 --> 00:05:51,120
element

170
00:05:51,120 --> 00:05:54,000
and then you use two web apis to operate

171
00:05:54,000 --> 00:05:55,600
on a combust element

172
00:05:55,600 --> 00:05:57,600
in order to derive a fingerprint for the

173
00:05:57,600 --> 00:05:59,759
browser

174
00:05:59,759 --> 00:06:01,759
now we want to make the point that not

175
00:06:01,759 --> 00:06:04,000
all of the event loop signatures

176
00:06:04,000 --> 00:06:06,000
are equally important for detecting

177
00:06:06,000 --> 00:06:07,759
filter list

178
00:06:07,759 --> 00:06:10,240
future list evasion this is because for

179
00:06:10,240 --> 00:06:11,280
such purpose

180
00:06:11,280 --> 00:06:14,080
uh we are only interested in uh the

181
00:06:14,080 --> 00:06:14,960
signatures

182
00:06:14,960 --> 00:06:18,400
which contain privacy related events and

183
00:06:18,400 --> 00:06:21,919
uh in this work we uh did define such

184
00:06:21,919 --> 00:06:22,479
events

185
00:06:22,479 --> 00:06:24,880
to be those that are related to either

186
00:06:24,880 --> 00:06:25,520
storage

187
00:06:25,520 --> 00:06:28,400
accesses or to making net network

188
00:06:28,400 --> 00:06:29,280
requests

189
00:06:29,280 --> 00:06:32,560
so these two types of events are are

190
00:06:32,560 --> 00:06:35,120
important because for example like in

191
00:06:35,120 --> 00:06:36,080
the case of

192
00:06:36,080 --> 00:06:38,560
uh storage events it might be possible

193
00:06:38,560 --> 00:06:39,440
that the script

194
00:06:39,440 --> 00:06:42,479
is trying to persist a tracking id in a

195
00:06:42,479 --> 00:06:43,759
user's browser

196
00:06:43,759 --> 00:06:45,840
while for network events it might be

197
00:06:45,840 --> 00:06:47,199
possible another script

198
00:06:47,199 --> 00:06:49,919
is trying to leak privacy sensitive

199
00:06:49,919 --> 00:06:50,720
information

200
00:06:50,720 --> 00:06:54,000
about a user to third parties

201
00:06:54,000 --> 00:06:56,479
now in order to use our signatures to

202
00:06:56,479 --> 00:06:58,560
detect the future this evasion

203
00:06:58,560 --> 00:07:00,639
we first need to have a notion of ground

204
00:07:00,639 --> 00:07:02,000
truth and for this

205
00:07:02,000 --> 00:07:04,240
purpose we use the scripts which are

206
00:07:04,240 --> 00:07:06,240
currently blocked by ease of list and

207
00:07:06,240 --> 00:07:07,360
easy privacy

208
00:07:07,360 --> 00:07:09,840
as our starting point uh so basically

209
00:07:09,840 --> 00:07:10,960
we're going to crowd

210
00:07:10,960 --> 00:07:14,240
the alexa top 100 000 websites

211
00:07:14,240 --> 00:07:16,960
and then we're going to extract all of

212
00:07:16,960 --> 00:07:18,560
the privacy related

213
00:07:18,560 --> 00:07:20,880
even loop signatures from the ease of

214
00:07:20,880 --> 00:07:24,400
list easy privacy blocked scripts

215
00:07:24,400 --> 00:07:26,479
but then again uh we want to mention

216
00:07:26,479 --> 00:07:28,000
that not all of the

217
00:07:28,000 --> 00:07:30,400
signatures extracted in this manner will

218
00:07:30,400 --> 00:07:32,479
be useful for detecting future list

219
00:07:32,479 --> 00:07:33,520
evasion

220
00:07:33,520 --> 00:07:35,919
this is because in order to reduce false

221
00:07:35,919 --> 00:07:36,800
positives

222
00:07:36,800 --> 00:07:39,360
we have to impose a minimum size on the

223
00:07:39,360 --> 00:07:40,479
signature

224
00:07:40,479 --> 00:07:42,720
and this is necessary because for

225
00:07:42,720 --> 00:07:43,520
example

226
00:07:43,520 --> 00:07:45,680
if the signature is really small let's

227
00:07:45,680 --> 00:07:46,879
say containing only

228
00:07:46,879 --> 00:07:50,240
uh two nodes and one uh one edge uh then

229
00:07:50,240 --> 00:07:52,639
subject signatures will not be uh

230
00:07:52,639 --> 00:07:53,520
specific

231
00:07:53,520 --> 00:07:55,919
and they they will end up matching a lot

232
00:07:55,919 --> 00:07:57,039
of unrelated

233
00:07:57,039 --> 00:08:00,560
scripts so the way we determine the

234
00:08:00,560 --> 00:08:01,599
minimum size

235
00:08:01,599 --> 00:08:04,319
is to use an iterative approach so

236
00:08:04,319 --> 00:08:06,000
basically we're going to start

237
00:08:06,000 --> 00:08:08,400
at a very small minimum size and then

238
00:08:08,400 --> 00:08:11,599
we're going to manually inspect

239
00:08:11,599 --> 00:08:13,759
of the scripts which are matched by us

240
00:08:13,759 --> 00:08:16,080
by the signatures

241
00:08:16,080 --> 00:08:18,879
and if we find the false positive during

242
00:08:18,879 --> 00:08:20,400
this manual inspection

243
00:08:20,400 --> 00:08:22,639
then we're going to increase the minimum

244
00:08:22,639 --> 00:08:24,240
size and then try the whole process

245
00:08:24,240 --> 00:08:25,360
again

246
00:08:25,360 --> 00:08:28,080
so in the end we arrived at the final

247
00:08:28,080 --> 00:08:29,039
minimum size

248
00:08:29,039 --> 00:08:32,879
of 13 edges and four nodes

249
00:08:32,880 --> 00:08:35,519
now for evaluation as i mentioned we

250
00:08:35,519 --> 00:08:36,958
applied our system

251
00:08:36,958 --> 00:08:40,000
to crawling the alexa top 100

252
00:08:40,000 --> 00:08:43,120
000 websites uh so from the scripts

253
00:08:43,120 --> 00:08:45,360
which were encountered during its crowd

254
00:08:45,360 --> 00:08:46,640
uh we generated

255
00:08:46,640 --> 00:08:49,760
uh close to two million instances of

256
00:08:49,760 --> 00:08:51,120
privacy related

257
00:08:51,120 --> 00:08:54,240
uh uh even loop signatures and from

258
00:08:54,240 --> 00:08:55,360
these two million

259
00:08:55,360 --> 00:08:58,720
uh about 400 000 of them are unique

260
00:08:58,720 --> 00:09:01,519
uh so this number is smaller because a

261
00:09:01,519 --> 00:09:02,640
lot of the scripts

262
00:09:02,640 --> 00:09:05,120
are included on multiple websites and

263
00:09:05,120 --> 00:09:06,880
they all end up generating the same

264
00:09:06,880 --> 00:09:08,480
signatures

265
00:09:08,480 --> 00:09:11,040
we also found that the average number of

266
00:09:11,040 --> 00:09:13,600
privacy related signatures per website

267
00:09:13,600 --> 00:09:16,800
is 22.7 and the average number of

268
00:09:16,800 --> 00:09:17,440
private

269
00:09:17,440 --> 00:09:20,480
uh privacy related signatures per script

270
00:09:20,480 --> 00:09:24,480
is 2.54 so next we want to use the

271
00:09:24,480 --> 00:09:26,320
signatures to detect filter this

272
00:09:26,320 --> 00:09:27,120
equation

273
00:09:27,120 --> 00:09:29,600
uh so the first thing we did was to see

274
00:09:29,600 --> 00:09:31,360
how many of the 400

275
00:09:31,360 --> 00:09:34,640
thousand unique ass signatures as we

276
00:09:34,640 --> 00:09:35,440
mentioned

277
00:09:35,440 --> 00:09:37,839
are generated from ease of list easy

278
00:09:37,839 --> 00:09:39,680
privacy blocked scripts

279
00:09:39,680 --> 00:09:42,399
so in total there are about fifty five

280
00:09:42,399 --> 00:09:43,120
hundred

281
00:09:43,120 --> 00:09:45,920
such unique signatures and from these

282
00:09:45,920 --> 00:09:47,360
fifty five hundred

283
00:09:47,360 --> 00:09:49,680
uh about two thousand of them have the

284
00:09:49,680 --> 00:09:51,440
required minimum size

285
00:09:51,440 --> 00:09:54,480
uh which as you recall is 13 edges and

286
00:09:54,480 --> 00:09:55,600
four nodes

287
00:09:55,600 --> 00:09:58,959
uh so we will refer to these uh 2000

288
00:09:58,959 --> 00:10:02,160
as our ground truth signatures

289
00:10:02,160 --> 00:10:04,480
and these are what we'll be using uh to

290
00:10:04,480 --> 00:10:06,880
detect future list evasion

291
00:10:06,880 --> 00:10:10,240
the rest of the 3 500 uh do not have the

292
00:10:10,240 --> 00:10:11,760
required minimum size

293
00:10:11,760 --> 00:10:13,680
so we refer to these as the small

294
00:10:13,680 --> 00:10:14,880
signature set

295
00:10:14,880 --> 00:10:17,519
and we discard them meaning we do not

296
00:10:17,519 --> 00:10:18,000
use them

297
00:10:18,000 --> 00:10:21,920
to detect the future this evasion

298
00:10:21,920 --> 00:10:24,399
in the table here uh we show statistics

299
00:10:24,399 --> 00:10:25,279
for the

300
00:10:25,279 --> 00:10:27,600
uh for the signal for for the scripts

301
00:10:27,600 --> 00:10:28,800
which are matched by

302
00:10:28,800 --> 00:10:30,720
uh the signatures in both of the two

303
00:10:30,720 --> 00:10:32,560
sets i just mentioned

304
00:10:32,560 --> 00:10:35,200
so as you can see here our ground truth

305
00:10:35,200 --> 00:10:36,079
signatures

306
00:10:36,079 --> 00:10:39,680
matched a total of uh 14.8 000

307
00:10:39,680 --> 00:10:42,800
unique scripts and of these 14.8

308
00:10:42,800 --> 00:10:43,440
thousand

309
00:10:43,440 --> 00:10:47,279
uh 11.2 000 of them are blocked by

310
00:10:47,279 --> 00:10:49,519
either list and easy privacy

311
00:10:49,519 --> 00:10:53,440
but we also found about uh 3 000 unique

312
00:10:53,440 --> 00:10:56,640
uh uh external scripts as well as 500

313
00:10:56,640 --> 00:10:57,680
inline scripts

314
00:10:57,680 --> 00:11:00,079
that exhibit the same privacy harming

315
00:11:00,079 --> 00:11:00,880
behaviors

316
00:11:00,880 --> 00:11:03,200
as lows are blocked by easeless and easy

317
00:11:03,200 --> 00:11:04,079
privacy

318
00:11:04,079 --> 00:11:06,640
but currently they are evade filter list

319
00:11:06,640 --> 00:11:08,160
blocking

320
00:11:08,160 --> 00:11:11,360
so in total we found about 3 600

321
00:11:11,360 --> 00:11:14,880
unique evading scripts in a table here

322
00:11:14,880 --> 00:11:15,680
uh

323
00:11:15,680 --> 00:11:18,240
uh for comparison we also show the

324
00:11:18,240 --> 00:11:19,600
corresponding numbers

325
00:11:19,600 --> 00:11:22,000
for the small signature set uh so the

326
00:11:22,000 --> 00:11:23,519
point here is to show

327
00:11:23,519 --> 00:11:26,880
that uh they ended up matching much more

328
00:11:26,880 --> 00:11:27,600
scripts

329
00:11:27,600 --> 00:11:29,839
and this confirms that they are indeed

330
00:11:29,839 --> 00:11:31,200
less specific

331
00:11:31,200 --> 00:11:33,360
and therefore more likely to introduce

332
00:11:33,360 --> 00:11:36,000
false positives

333
00:11:36,000 --> 00:11:38,399
and next we're interested in classifying

334
00:11:38,399 --> 00:11:40,560
each one of the 3600

335
00:11:40,560 --> 00:11:43,120
unique evading scripts which we found in

336
00:11:43,120 --> 00:11:44,160
a previous step

337
00:11:44,160 --> 00:11:47,279
are based on the method that they employ

338
00:11:47,279 --> 00:11:50,480
to evade future list blocking

339
00:11:50,480 --> 00:11:53,200
so for this taxonomy we came up with

340
00:11:53,200 --> 00:11:55,040
four categories in total

341
00:11:55,040 --> 00:11:57,040
and in a table here we show the

342
00:11:57,040 --> 00:11:59,440
categories as well as the number of

343
00:11:59,440 --> 00:12:02,480
unique scripts out of the 3600

344
00:12:02,480 --> 00:12:05,680
for each one of the categories so the

345
00:12:05,680 --> 00:12:07,040
first three categories

346
00:12:07,040 --> 00:12:10,079
are shown here are actually based on

347
00:12:10,079 --> 00:12:12,720
the evasion techniques which i mentioned

348
00:12:12,720 --> 00:12:13,839
earlier in uh

349
00:12:13,839 --> 00:12:16,959
in this talk so the way we classified

350
00:12:16,959 --> 00:12:17,760
cases for

351
00:12:17,760 --> 00:12:19,920
each one of the categories is by

352
00:12:19,920 --> 00:12:22,000
comparing the ast structure

353
00:12:22,000 --> 00:12:24,800
of an evading script against the scripts

354
00:12:24,800 --> 00:12:26,880
which are blocked by israelis and easy

355
00:12:26,880 --> 00:12:28,079
privacy

356
00:12:28,079 --> 00:12:31,519
and also out of the 720 cases are in the

357
00:12:31,519 --> 00:12:32,480
moving code

358
00:12:32,480 --> 00:12:37,040
category uh we also submitted 586 uh

359
00:12:37,040 --> 00:12:37,760
future list

360
00:12:37,760 --> 00:12:40,639
rules based on the scripts urls to

361
00:12:40,639 --> 00:12:41,600
easily list

362
00:12:41,600 --> 00:12:44,079
easy privacy so that those scripts are

363
00:12:44,079 --> 00:12:46,000
now also being blocked at their new

364
00:12:46,000 --> 00:12:48,079
locations

365
00:12:48,079 --> 00:12:50,720
the last category in our taxonomy is the

366
00:12:50,720 --> 00:12:52,320
common code category

367
00:12:52,320 --> 00:12:54,639
and this is intended to be a catch-all

368
00:12:54,639 --> 00:12:56,079
category for the cases

369
00:12:56,079 --> 00:12:58,160
which do not fit in the previous three

370
00:12:58,160 --> 00:12:59,760
categories

371
00:12:59,760 --> 00:13:01,360
so one of the interesting things we

372
00:13:01,360 --> 00:13:03,200
found for the cases here

373
00:13:03,200 --> 00:13:05,440
is that a lot of them are actually

374
00:13:05,440 --> 00:13:06,800
tracking libraries

375
00:13:06,800 --> 00:13:09,360
which are never intended to be used by

376
00:13:09,360 --> 00:13:10,240
themselves

377
00:13:10,240 --> 00:13:12,560
but are instead are included as

378
00:13:12,560 --> 00:13:15,200
dependencies by other tracking scripts

379
00:13:15,200 --> 00:13:17,360
we also found that a lot of the scripts

380
00:13:17,360 --> 00:13:18,560
in this category

381
00:13:18,560 --> 00:13:21,040
are share a significant portion of the

382
00:13:21,040 --> 00:13:21,839
ast

383
00:13:21,839 --> 00:13:24,079
with an easy list easy privacy block

384
00:13:24,079 --> 00:13:25,200
script

385
00:13:25,200 --> 00:13:28,560
so in total there are about 2 300 cases

386
00:13:28,560 --> 00:13:29,680
in this category

387
00:13:29,680 --> 00:13:32,320
now one caveat we want to mention here

388
00:13:32,320 --> 00:13:34,079
is that it is difficult for us to

389
00:13:34,079 --> 00:13:35,839
automatically verify

390
00:13:35,839 --> 00:13:37,600
whether all of the cases in this

391
00:13:37,600 --> 00:13:40,160
category are true positives or not

392
00:13:40,160 --> 00:13:42,160
uh simply due to the complexity of a

393
00:13:42,160 --> 00:13:43,360
javascript code

394
00:13:43,360 --> 00:13:45,680
that is involved uh but i also want to

395
00:13:45,680 --> 00:13:48,160
mention that the false positive rate is

396
00:13:48,160 --> 00:13:49,440
likely very low

397
00:13:49,440 --> 00:13:51,279
because during one of our manual

398
00:13:51,279 --> 00:13:54,000
inspections of more than 100 random

399
00:13:54,000 --> 00:13:55,839
samples from this category

400
00:13:55,839 --> 00:13:59,920
we found only one false positive case

401
00:13:59,920 --> 00:14:02,320
lastly to conclude this talk i would

402
00:14:02,320 --> 00:14:04,000
like to mention some of the directions

403
00:14:04,000 --> 00:14:05,440
for future work

404
00:14:05,440 --> 00:14:07,680
so in this regard one of the first

405
00:14:07,680 --> 00:14:09,519
things we can try to do

406
00:14:09,519 --> 00:14:12,240
is to improve the granularity of the

407
00:14:12,240 --> 00:14:12,959
actions

408
00:14:12,959 --> 00:14:15,440
that are captured by page graph and in

409
00:14:15,440 --> 00:14:16,240
particular

410
00:14:16,240 --> 00:14:18,320
we want to be able to cover more of the

411
00:14:18,320 --> 00:14:20,160
web api access events

412
00:14:20,160 --> 00:14:22,720
and when this is done we can also uh

413
00:14:22,720 --> 00:14:23,360
improve

414
00:14:23,360 --> 00:14:25,680
the granularity of our signatures so

415
00:14:25,680 --> 00:14:26,959
that they become more

416
00:14:26,959 --> 00:14:29,360
specific and therefore we can reduce the

417
00:14:29,360 --> 00:14:32,079
false positive rates even further

418
00:14:32,079 --> 00:14:34,560
another thing we can do here is to

419
00:14:34,560 --> 00:14:35,519
investigate

420
00:14:35,519 --> 00:14:37,760
applying the signature based detection

421
00:14:37,760 --> 00:14:38,639
method

422
00:14:38,639 --> 00:14:41,279
described in this work to real-time

423
00:14:41,279 --> 00:14:43,440
blocking of known privacy harming

424
00:14:43,440 --> 00:14:45,440
behaviors from the scripts

425
00:14:45,440 --> 00:14:48,160
so ideally such mechanisms should run

426
00:14:48,160 --> 00:14:48,880
directly

427
00:14:48,880 --> 00:14:51,360
inside the user's browser so that their

428
00:14:51,360 --> 00:14:53,040
privacy is protected

429
00:14:53,040 --> 00:14:56,320
as they visit the web thank you for your

430
00:14:56,320 --> 00:14:56,959
attention

431
00:14:56,959 --> 00:15:01,839
and i hope to see you at the conference

