1
00:00:01,520 --> 00:00:03,919
hi i'm sherman chao from department of

2
00:00:03,919 --> 00:00:05,680
information engineering

3
00:00:05,680 --> 00:00:08,320
the chinese university of hong kong our

4
00:00:08,320 --> 00:00:10,320
work to be presented is cross-domain

5
00:00:10,320 --> 00:00:12,160
access control encryption

6
00:00:12,160 --> 00:00:14,559
which support apigee policy constant

7
00:00:14,559 --> 00:00:15,679
size cipher test

8
00:00:15,679 --> 00:00:17,760
and bn diffusion to recall our

9
00:00:17,760 --> 00:00:19,760
contribution in these 15 minutes

10
00:00:19,760 --> 00:00:21,840
looked at this adjective start with a c

11
00:00:21,840 --> 00:00:22,960
and e

12
00:00:22,960 --> 00:00:25,439
this is a joy with silhouette wen my

13
00:00:25,439 --> 00:00:26,720
former pc student

14
00:00:26,720 --> 00:00:29,199
who recently joined sust in china as an

15
00:00:29,199 --> 00:00:31,840
associate professor

16
00:00:32,000 --> 00:00:33,520
let's consider the classic access

17
00:00:33,520 --> 00:00:35,840
control model that are sizeable to every

18
00:00:35,840 --> 00:00:36,960
user in the system

19
00:00:36,960 --> 00:00:39,920
such as public or top clearance in this

20
00:00:39,920 --> 00:00:40,559
work

21
00:00:40,559 --> 00:00:43,440
we use an identifier or id to represent

22
00:00:43,440 --> 00:00:44,399
each row

23
00:00:44,399 --> 00:00:46,399
and we use a matrix p for the access

24
00:00:46,399 --> 00:00:48,000
control policy

25
00:00:48,000 --> 00:00:50,559
for example user 1 here can only write

26
00:00:50,559 --> 00:00:52,000
to user 1

27
00:00:52,000 --> 00:00:54,000
while user line here can write to all

28
00:00:54,000 --> 00:00:55,440
users

29
00:00:55,440 --> 00:00:59,199
in general such a p can capture the ssy

30
00:00:59,199 --> 00:01:01,600
between all user players which is what

31
00:01:01,600 --> 00:01:03,280
we meant by arbitrary policy in this

32
00:01:03,280 --> 00:01:05,360
work

33
00:01:05,360 --> 00:01:07,920
to enforce read access we can use

34
00:01:07,920 --> 00:01:08,960
encryption

35
00:01:08,960 --> 00:01:13,520
however y-axis file is to use signature

36
00:01:13,520 --> 00:01:16,400
for example a user sending a message m

37
00:01:16,400 --> 00:01:17,920
needs to sign on m

38
00:01:17,920 --> 00:01:20,320
and the receiver will drop any m if the

39
00:01:20,320 --> 00:01:22,400
selection is invited

40
00:01:22,400 --> 00:01:25,119
does this approach work to answer this

41
00:01:25,119 --> 00:01:25,680
question

42
00:01:25,680 --> 00:01:27,920
we first need to recall why do we want

43
00:01:27,920 --> 00:01:30,000
to enforce access control over white

44
00:01:30,000 --> 00:01:30,960
access

45
00:01:30,960 --> 00:01:33,680
and answer is we want to protect against

46
00:01:33,680 --> 00:01:34,799
malicious writer

47
00:01:34,799 --> 00:01:38,079
from writing or leaking information

48
00:01:38,079 --> 00:01:40,000
so what is a malicious writer referring

49
00:01:40,000 --> 00:01:41,360
to

50
00:01:41,360 --> 00:01:44,159
consider a ceo who is not supposed to

51
00:01:44,159 --> 00:01:46,399
leak top level secret to anyone

52
00:01:46,399 --> 00:01:49,600
say an intern would the ceo

53
00:01:49,600 --> 00:01:52,000
intentionally lick the secret property a

54
00:01:52,000 --> 00:01:53,119
lot

55
00:01:53,119 --> 00:01:56,000
however the program used by the co might

56
00:01:56,000 --> 00:01:58,079
be infected by virus

57
00:01:58,079 --> 00:02:00,240
it will call a home server to report any

58
00:02:00,240 --> 00:02:02,079
gather the secret

59
00:02:02,079 --> 00:02:03,600
with this home server border with a

60
00:02:03,600 --> 00:02:07,600
selector check the answer is low

61
00:02:07,600 --> 00:02:10,878
indeed a malicious writer can simply

62
00:02:10,878 --> 00:02:11,680
just broadcast

63
00:02:11,680 --> 00:02:14,400
get the sequel information in here or

64
00:02:14,400 --> 00:02:16,400
embed it in the randomness of a cipher

65
00:02:16,400 --> 00:02:17,599
test

66
00:02:17,599 --> 00:02:21,599
or by whatever single log with telling

67
00:02:21,599 --> 00:02:25,040
so to guarantee any meaningful

68
00:02:25,040 --> 00:02:28,480
security we actually a sanitizer

69
00:02:28,480 --> 00:02:31,120
or traditionally we need a trusted

70
00:02:31,120 --> 00:02:34,000
reference monitor

71
00:02:34,080 --> 00:02:36,239
ss control is a fundamental keystone in

72
00:02:36,239 --> 00:02:37,360
security

73
00:02:37,360 --> 00:02:39,840
many data breaches can be avoided if we

74
00:02:39,840 --> 00:02:42,239
have secure access control enforced

75
00:02:42,239 --> 00:02:44,879
low metadata is a cryptocurrency wallet

76
00:02:44,879 --> 00:02:46,160
a smartphone app

77
00:02:46,160 --> 00:02:50,480
a running process or a cloud tendon

78
00:02:50,480 --> 00:02:53,519
access control encryption or ace is a

79
00:02:53,519 --> 00:02:54,879
cryptographic solution

80
00:02:54,879 --> 00:02:57,440
for enforcing information flow it is

81
00:02:57,440 --> 00:02:58,800
introduced by them

82
00:02:58,800 --> 00:03:02,800
gal in tc 2016

83
00:03:02,800 --> 00:03:04,800
their work so that cryptography can

84
00:03:04,800 --> 00:03:06,640
actually also help in enforcing right

85
00:03:06,640 --> 00:03:08,000
policies

86
00:03:08,000 --> 00:03:10,400
the sanitizer they assume is honest but

87
00:03:10,400 --> 00:03:11,599
curious

88
00:03:11,599 --> 00:03:13,200
which does not even need to load the

89
00:03:13,200 --> 00:03:15,360
message or the policy of each cipher

90
00:03:15,360 --> 00:03:16,480
test

91
00:03:16,480 --> 00:03:18,000
but it can still synthesize the

92
00:03:18,000 --> 00:03:19,760
communication traffic somehow

93
00:03:19,760 --> 00:03:21,680
according to the hidden policy in a

94
00:03:21,680 --> 00:03:24,560
bright folder manner

95
00:03:24,799 --> 00:03:26,480
since this seminal work there are two

96
00:03:26,480 --> 00:03:28,319
major follow-ups appeared

97
00:03:28,319 --> 00:03:32,720
in pkc's 2017 and acell crypt 2017

98
00:03:32,720 --> 00:03:34,319
we will refer to the latter one study

99
00:03:34,319 --> 00:03:37,760
more frequently in the rest of the talk

100
00:03:37,760 --> 00:03:41,040
acg in ace that's different from

101
00:03:41,040 --> 00:03:43,200
traditional public key encryption

102
00:03:43,200 --> 00:03:45,760
one actually needs to be quant and

103
00:03:45,760 --> 00:03:47,760
encryption key to encrypt

104
00:03:47,760 --> 00:03:49,599
and this cipher test will be sent to the

105
00:03:49,599 --> 00:03:50,799
sanitizer

106
00:03:50,799 --> 00:03:53,120
the sanitizer will apply sanitization

107
00:03:53,120 --> 00:03:53,920
process

108
00:03:53,920 --> 00:03:55,920
and the resulting sanitizer cipher test

109
00:03:55,920 --> 00:03:57,439
will be sent to the receiver

110
00:03:57,439 --> 00:04:00,560
who then decrypt the cipher test we

111
00:04:00,560 --> 00:04:01,040
looked at

112
00:04:01,040 --> 00:04:02,720
it is more desirable for the

113
00:04:02,720 --> 00:04:04,159
sanitization process

114
00:04:04,159 --> 00:04:06,560
to be keyless since we do not want to

115
00:04:06,560 --> 00:04:08,480
store a secret standardization key

116
00:04:08,480 --> 00:04:10,159
in a machine that is practically always

117
00:04:10,159 --> 00:04:12,840
online for sanitizing the outgoing

118
00:04:12,840 --> 00:04:14,720
traffic

119
00:04:14,720 --> 00:04:17,839
so who will generate the keys in acg

120
00:04:17,839 --> 00:04:19,839
a single trusted authority will generate

121
00:04:19,839 --> 00:04:21,120
both the encryption key and the

122
00:04:21,120 --> 00:04:22,079
decryption key

123
00:04:22,079 --> 00:04:24,960
according to the security access control

124
00:04:24,960 --> 00:04:27,199
policy to different users

125
00:04:27,199 --> 00:04:28,720
so there will be an encryption key and

126
00:04:28,720 --> 00:04:30,639
decryption key for errors and likewise

127
00:04:30,639 --> 00:04:31,919
there will be an exclusion key and

128
00:04:31,919 --> 00:04:32,479
decreasing

129
00:04:32,479 --> 00:04:36,400
key for bob the first contribution of

130
00:04:36,400 --> 00:04:37,040
this word

131
00:04:37,040 --> 00:04:39,520
is to propose a new lotion lambda cross

132
00:04:39,520 --> 00:04:41,360
domain acg

133
00:04:41,360 --> 00:04:43,199
where we separate the key generation of

134
00:04:43,199 --> 00:04:44,800
40 into two

135
00:04:44,800 --> 00:04:46,880
the center authority and the receiver

136
00:04:46,880 --> 00:04:48,240
authority

137
00:04:48,240 --> 00:04:50,960
one will only generate an encryption key

138
00:04:50,960 --> 00:04:52,320
and an other will only generate a

139
00:04:52,320 --> 00:04:54,000
decryption key

140
00:04:54,000 --> 00:04:55,360
this better capture real-world

141
00:04:55,360 --> 00:04:58,320
application scenarios

142
00:04:58,320 --> 00:05:00,960
security of ace ac should ensure

143
00:05:00,960 --> 00:05:01,840
low-rise rule

144
00:05:01,840 --> 00:05:04,000
such that any set of cover-up senders

145
00:05:04,000 --> 00:05:05,919
cannot transfer any information to any

146
00:05:05,919 --> 00:05:07,600
sort of co-op receiver

147
00:05:07,600 --> 00:05:09,360
when the communication is forbidden by

148
00:05:09,360 --> 00:05:11,039
the policy p

149
00:05:11,039 --> 00:05:12,600
this is captured by the

150
00:05:12,600 --> 00:05:14,479
indistinguishability between sanitizing

151
00:05:14,479 --> 00:05:16,160
two kinds of cipher tests

152
00:05:16,160 --> 00:05:18,240
one from the adversary and one facility

153
00:05:18,240 --> 00:05:19,600
created

154
00:05:19,600 --> 00:05:22,160
acu should also ensure the low rule

155
00:05:22,160 --> 00:05:22,880
namely

156
00:05:22,880 --> 00:05:25,199
the payload should remain private and no

157
00:05:25,199 --> 00:05:26,080
one should learn

158
00:05:26,080 --> 00:05:29,120
who the center was a weaker version of

159
00:05:29,120 --> 00:05:30,240
standard elementy

160
00:05:30,240 --> 00:05:32,400
only considered such protection against

161
00:05:32,400 --> 00:05:34,960
long receiver

162
00:05:34,960 --> 00:05:37,919
in a last shell aca can enforce access

163
00:05:37,919 --> 00:05:39,840
control by folder

164
00:05:39,840 --> 00:05:41,919
which is very powerful but turns out

165
00:05:41,919 --> 00:05:43,600
existing construction are also very

166
00:05:43,600 --> 00:05:46,240
heavyweight

167
00:05:47,280 --> 00:05:52,639
our result is ace can be made practical

168
00:05:52,639 --> 00:05:55,440
let's see how ac scheme will constructed

169
00:05:55,440 --> 00:05:57,280
it can be roughly classified into

170
00:05:57,280 --> 00:06:00,240
two paradigm the first one starts with

171
00:06:00,240 --> 00:06:03,680
constructing a simple but efficient acg

172
00:06:03,680 --> 00:06:06,319
in the seminal work an ac scheme for one

173
00:06:06,319 --> 00:06:06,880
user

174
00:06:06,880 --> 00:06:08,800
is first built by using algebra

175
00:06:08,800 --> 00:06:10,080
encryption

176
00:06:10,080 --> 00:06:12,720
is homomorphic some help to perform

177
00:06:12,720 --> 00:06:14,560
sanitization

178
00:06:14,560 --> 00:06:17,840
but upgrading the one user scheme

179
00:06:17,840 --> 00:06:20,639
to support arbitrary policy requires

180
00:06:20,639 --> 00:06:23,440
exponentially many copies

181
00:06:23,440 --> 00:06:25,440
we remind that one can also replicate a

182
00:06:25,440 --> 00:06:26,720
symmetric ace

183
00:06:26,720 --> 00:06:30,720
to support range policy ecg

184
00:06:30,720 --> 00:06:33,280
another paradigm directly construct ace

185
00:06:33,280 --> 00:06:34,720
using ventral encryption

186
00:06:34,720 --> 00:06:38,400
or fe recall that in fe a functional key

187
00:06:38,400 --> 00:06:38,639
of

188
00:06:38,639 --> 00:06:43,039
f can decrypt language of m into fm

189
00:06:43,039 --> 00:06:46,000
then l propose an ac scheme using

190
00:06:46,000 --> 00:06:48,599
sanitizable fe which is

191
00:06:48,599 --> 00:06:51,440
instantiated by indistinguishability of

192
00:06:51,440 --> 00:06:52,560
fascication

193
00:06:52,560 --> 00:06:55,680
which is extremely heavyweight

194
00:06:55,680 --> 00:06:58,560
human rules construction use fd for

195
00:06:58,560 --> 00:07:00,560
randomized functionality

196
00:07:00,560 --> 00:07:02,639
the function here first one is vector

197
00:07:02,639 --> 00:07:04,560
verification algorithm

198
00:07:04,560 --> 00:07:06,479
if the selector is spreaded it will

199
00:07:06,479 --> 00:07:08,240
create a new cipher test

200
00:07:08,240 --> 00:07:11,120
under a practical encryption scheme this

201
00:07:11,120 --> 00:07:13,120
construction is still inefficient

202
00:07:13,120 --> 00:07:15,039
since fe for general circuit is still

203
00:07:15,039 --> 00:07:16,960
heavyweight

204
00:07:16,960 --> 00:07:18,639
this word aimed to solve the open

205
00:07:18,639 --> 00:07:20,880
problem left by the terminal work

206
00:07:20,880 --> 00:07:23,440
which is to design some linear ac scheme

207
00:07:23,440 --> 00:07:26,400
with practical efficiency

208
00:07:26,400 --> 00:07:28,880
look that keyman rule's approach uses a

209
00:07:28,880 --> 00:07:32,080
functional key as the synthetization key

210
00:07:32,080 --> 00:07:33,759
they left as an open problem to

211
00:07:33,759 --> 00:07:35,599
construct an ac scheme for general

212
00:07:35,599 --> 00:07:36,479
policy

213
00:07:36,479 --> 00:07:40,400
where the synthetization can be keyless

214
00:07:41,919 --> 00:07:45,280
we solve both problems our solution is

215
00:07:45,280 --> 00:07:47,440
based on structure preserving signature

216
00:07:47,440 --> 00:07:50,240
and identity based broadcast encryption

217
00:07:50,240 --> 00:07:52,240
you may wonder what this lens means or

218
00:07:52,240 --> 00:07:54,000
if you're a cryptographer you may wonder

219
00:07:54,000 --> 00:07:54,319
if

220
00:07:54,319 --> 00:07:57,440
it is a simple construction or not

221
00:07:57,440 --> 00:07:58,720
we would say it is an electrical

222
00:07:58,720 --> 00:08:01,360
solution in hindsight we observe that

223
00:08:01,360 --> 00:08:03,599
supporting arbitrary policy means

224
00:08:03,599 --> 00:08:05,680
encryption to many recipients

225
00:08:05,680 --> 00:08:07,360
it is then natural to use broadcast

226
00:08:07,360 --> 00:08:09,599
encryption in which encrypting to end

227
00:08:09,599 --> 00:08:10,479
recipient

228
00:08:10,479 --> 00:08:13,680
only takes constant size cipher test as

229
00:08:13,680 --> 00:08:15,120
simple as it may seem

230
00:08:15,120 --> 00:08:17,599
will still to address several challenges

231
00:08:17,599 --> 00:08:18,479
or introduce

232
00:08:18,479 --> 00:08:22,560
new ideas in various stage of our design

233
00:08:22,560 --> 00:08:24,800
to start with let's quickly review

234
00:08:24,800 --> 00:08:26,160
keymanwood's ac scheme

235
00:08:26,160 --> 00:08:27,680
and why it fails to support clause

236
00:08:27,680 --> 00:08:29,199
domain feature

237
00:08:29,199 --> 00:08:31,520
the encryption key is merely a structure

238
00:08:31,520 --> 00:08:33,599
on the sender id

239
00:08:33,599 --> 00:08:36,000
it means that the center authority has

240
00:08:36,000 --> 00:08:36,880
low control

241
00:08:36,880 --> 00:08:39,839
who can decrypt it is actually the

242
00:08:39,839 --> 00:08:41,360
receiver authority

243
00:08:41,360 --> 00:08:44,080
who wants the pe system can make the

244
00:08:44,080 --> 00:08:45,040
sole decision

245
00:08:45,040 --> 00:08:48,160
on who can decrypt and by the way for

246
00:08:48,160 --> 00:08:49,360
this construction of

247
00:08:49,360 --> 00:08:51,440
encryption key it makes proving the

248
00:08:51,440 --> 00:08:53,360
coverage of encryption simple

249
00:08:53,360 --> 00:08:56,640
by using these proof

250
00:08:57,120 --> 00:08:59,360
now let's consider how to prove the way

251
00:08:59,360 --> 00:09:03,120
to many permission to the sanitizer

252
00:09:03,680 --> 00:09:05,600
broadcast encryption ciphertext can be

253
00:09:05,600 --> 00:09:07,040
of constant size

254
00:09:07,040 --> 00:09:09,279
since they employ a compact encoding of

255
00:09:09,279 --> 00:09:11,839
all receiver identities

256
00:09:11,839 --> 00:09:14,160
however a complicated structure is a

257
00:09:14,160 --> 00:09:16,000
complicated proof

258
00:09:16,000 --> 00:09:18,720
the proof could be exponentially long

259
00:09:18,720 --> 00:09:19,440
since it's

260
00:09:19,440 --> 00:09:21,440
capturing the right permission to many

261
00:09:21,440 --> 00:09:23,839
many recipients

262
00:09:23,839 --> 00:09:26,880
our approach is to extract the order one

263
00:09:26,880 --> 00:09:28,959
representation of the recipient

264
00:09:28,959 --> 00:09:31,680
set as a group element and we call this

265
00:09:31,680 --> 00:09:32,399
concept

266
00:09:32,399 --> 00:09:36,320
an aggregator in our construction

267
00:09:36,320 --> 00:09:38,560
an encryption key is still a signature

268
00:09:38,560 --> 00:09:39,360
but now

269
00:09:39,360 --> 00:09:42,480
it is silent on the receiver set for

270
00:09:42,480 --> 00:09:42,800
this

271
00:09:42,800 --> 00:09:44,480
we need to use structure preserving

272
00:09:44,480 --> 00:09:46,720
signature since they can sign on a group

273
00:09:46,720 --> 00:09:48,000
element

274
00:09:48,000 --> 00:09:49,360
this also makes the proof in the

275
00:09:49,360 --> 00:09:52,480
ciphertext constant size

276
00:09:52,480 --> 00:09:54,320
the last question is how do we

277
00:09:54,320 --> 00:09:57,360
synthetize without using any secret

278
00:09:57,360 --> 00:09:59,760
indeed the seminal work already said

279
00:09:59,760 --> 00:10:01,760
that a simple approach

280
00:10:01,760 --> 00:10:04,959
we should not use fe but use laser proof

281
00:10:04,959 --> 00:10:07,200
does not work and the reason is that the

282
00:10:07,200 --> 00:10:08,800
sanitizer in this case

283
00:10:08,800 --> 00:10:10,240
needs to load the proper key of the

284
00:10:10,240 --> 00:10:12,480
receiver for randomizing

285
00:10:12,480 --> 00:10:15,920
which means to sanitize the cypher test

286
00:10:15,920 --> 00:10:18,399
and all the fe-based scheme circumvent

287
00:10:18,399 --> 00:10:19,440
this problem

288
00:10:19,440 --> 00:10:21,839
by using a secret functional key to

289
00:10:21,839 --> 00:10:23,920
create a center type ciphertext

290
00:10:23,920 --> 00:10:26,160
instead of literally do the sanitization

291
00:10:26,160 --> 00:10:28,640
over the original cipher test

292
00:10:28,640 --> 00:10:31,200
so how can we solve the original problem

293
00:10:31,200 --> 00:10:33,920
in our design without using fe

294
00:10:33,920 --> 00:10:35,519
that means we are facing with the

295
00:10:35,519 --> 00:10:36,959
following problem

296
00:10:36,959 --> 00:10:39,040
how to enable the sanitizer to

297
00:10:39,040 --> 00:10:40,560
synthesize an order one size

298
00:10:40,560 --> 00:10:42,800
podcast encryption cipher test without

299
00:10:42,800 --> 00:10:46,480
letting it low all the recipients

300
00:10:46,480 --> 00:10:49,200
for here we use a simple prepare ahead

301
00:10:49,200 --> 00:10:50,399
approach

302
00:10:50,399 --> 00:10:53,839
namely the sender is required to prepare

303
00:10:53,839 --> 00:10:56,000
a standardization ciphertext c prime

304
00:10:56,000 --> 00:10:58,560
of message 1 and the payload ciphertext

305
00:10:58,560 --> 00:11:00,560
equivalent to actual payload

306
00:11:00,560 --> 00:11:02,560
both of these components can be proven

307
00:11:02,560 --> 00:11:03,600
to be well-formed

308
00:11:03,600 --> 00:11:06,880
in nick proof with that keyless

309
00:11:06,880 --> 00:11:08,640
sanitization is easy

310
00:11:08,640 --> 00:11:12,560
which is simply a homomorphic operation

311
00:11:12,560 --> 00:11:15,760
finally for decryption any recipient can

312
00:11:15,760 --> 00:11:16,480
decrypt

313
00:11:16,480 --> 00:11:18,560
by operating on the same order structure

314
00:11:18,560 --> 00:11:19,680
in the ciphertext

315
00:11:19,680 --> 00:11:22,560
derived from the aggregator the

316
00:11:22,560 --> 00:11:24,560
encryption does require loading all

317
00:11:24,560 --> 00:11:27,279
other recipient in this way the

318
00:11:27,279 --> 00:11:28,000
recipient

319
00:11:28,000 --> 00:11:30,880
can infer who the center is it means

320
00:11:30,880 --> 00:11:31,279
that

321
00:11:31,279 --> 00:11:33,600
unfortunately our scheme only achieves a

322
00:11:33,600 --> 00:11:36,160
weaker notion of center anonymity

323
00:11:36,160 --> 00:11:38,320
nevertheless it suffice for all the

324
00:11:38,320 --> 00:11:40,839
original application envisioned into ac

325
00:11:40,839 --> 00:11:43,440
literature it also matched the automatic

326
00:11:43,440 --> 00:11:46,000
level of existing ac schemes

327
00:11:46,000 --> 00:11:48,320
and technically this appear to be an

328
00:11:48,320 --> 00:11:49,360
inhuman trade-off

329
00:11:49,360 --> 00:11:53,200
between anonymity and suffering size

330
00:11:53,200 --> 00:11:55,760
so we quickly highlight how do we do

331
00:11:55,760 --> 00:11:56,560
encryption

332
00:11:56,560 --> 00:11:58,399
and synthesization and the equation

333
00:11:58,399 --> 00:12:00,399
efficiency so have we solved all the

334
00:12:00,399 --> 00:12:02,240
problems yet

335
00:12:02,240 --> 00:12:04,399
it turns out that instantiating our

336
00:12:04,399 --> 00:12:06,639
design efficiently and security is still

337
00:12:06,639 --> 00:12:08,079
not that easy

338
00:12:08,079 --> 00:12:10,240
what we mean by security is abductive

339
00:12:10,240 --> 00:12:13,279
security in the standard model

340
00:12:13,279 --> 00:12:16,240
our main scheme is selective secure

341
00:12:16,240 --> 00:12:18,320
which match the security level of human

342
00:12:18,320 --> 00:12:20,160
roots construction

343
00:12:20,160 --> 00:12:21,760
we looked at for achieving adaptive

344
00:12:21,760 --> 00:12:24,480
security we actually need to solve a new

345
00:12:24,480 --> 00:12:26,000
open problem

346
00:12:26,000 --> 00:12:28,480
nevertheless using a system building

347
00:12:28,480 --> 00:12:29,040
block

348
00:12:29,040 --> 00:12:31,040
we managed to propose an imperfect

349
00:12:31,040 --> 00:12:33,279
additive secure ece

350
00:12:33,279 --> 00:12:34,959
the detail of which can be found in the

351
00:12:34,959 --> 00:12:36,959
paper

352
00:12:36,959 --> 00:12:39,920
let's focus on our main instantiation we

353
00:12:39,920 --> 00:12:40,240
use

354
00:12:40,240 --> 00:12:43,440
sakai full coverage ibb scheme

355
00:12:43,440 --> 00:12:45,120
apple and else structure preserving

356
00:12:45,120 --> 00:12:47,760
signatures and fiesta mia heuristic for

357
00:12:47,760 --> 00:12:49,680
the proof

358
00:12:49,680 --> 00:12:52,079
to demonstrate the efficiency of our

359
00:12:52,079 --> 00:12:53,440
instantiation

360
00:12:53,440 --> 00:12:55,440
we use a summer oak computer for

361
00:12:55,440 --> 00:12:57,440
performance testing

362
00:12:57,440 --> 00:12:59,519
our implementation used traffic ppc

363
00:12:59,519 --> 00:13:00,639
library

364
00:13:00,639 --> 00:13:03,839
and 462 bit bn curve

365
00:13:03,839 --> 00:13:05,839
and we didn't do any pre-processing in

366
00:13:05,839 --> 00:13:07,519
our prototype

367
00:13:07,519 --> 00:13:10,000
to get a sense of how fast or how slow

368
00:13:10,000 --> 00:13:11,200
our platform is

369
00:13:11,200 --> 00:13:14,079
here are some simple figures for example

370
00:13:14,079 --> 00:13:16,160
we do all the parent operation without

371
00:13:16,160 --> 00:13:17,760
any special preprocessing

372
00:13:17,760 --> 00:13:21,680
and each of them are one half a second

373
00:13:21,680 --> 00:13:24,079
here are the running time performance

374
00:13:24,079 --> 00:13:25,680
authority setup

375
00:13:25,680 --> 00:13:28,079
encryption key generation and special

376
00:13:28,079 --> 00:13:29,839
helper function for decryption

377
00:13:29,839 --> 00:13:32,000
they are all set size dependent so we

378
00:13:32,000 --> 00:13:33,360
can see that

379
00:13:33,360 --> 00:13:36,399
the runtime increased linearly all the

380
00:13:36,399 --> 00:13:38,079
other algorithms are set size

381
00:13:38,079 --> 00:13:39,199
independent

382
00:13:39,199 --> 00:13:41,440
we can see that all algorithm went in

383
00:13:41,440 --> 00:13:42,880
the order of seconds

384
00:13:42,880 --> 00:13:45,440
even for a thousand of receivers to

385
00:13:45,440 --> 00:13:46,399
conclude

386
00:13:46,399 --> 00:13:48,560
ss control is a fundamental keystone in

387
00:13:48,560 --> 00:13:49,839
security

388
00:13:49,839 --> 00:13:51,680
acg is a cryptographic solution

389
00:13:51,680 --> 00:13:53,279
enforcing information flow

390
00:13:53,279 --> 00:13:55,199
by assuming an honest but curious

391
00:13:55,199 --> 00:13:56,560
sanitizer

392
00:13:56,560 --> 00:13:59,120
long ac design use general purpose

393
00:13:59,120 --> 00:14:00,480
cryptographic primitive

394
00:14:00,480 --> 00:14:03,600
which are weight our work made ac

395
00:14:03,600 --> 00:14:06,639
more practical we also consider ace

396
00:14:06,639 --> 00:14:09,279
in a more elastic cross domain setting

397
00:14:09,279 --> 00:14:10,240
finally

398
00:14:10,240 --> 00:14:12,560
the seminar also adds a second open

399
00:14:12,560 --> 00:14:13,279
problem

400
00:14:13,279 --> 00:14:16,079
namely to construct acg from loyalty

401
00:14:16,079 --> 00:14:17,440
post-quantum assumption

402
00:14:17,440 --> 00:14:20,320
such as learning with error our work to

403
00:14:20,320 --> 00:14:22,079
appear in acns this month

404
00:14:22,079 --> 00:14:23,760
proposed a native space construction

405
00:14:23,760 --> 00:14:25,760
addressing this problem

406
00:14:25,760 --> 00:14:27,519
we can be contacted at this email

407
00:14:27,519 --> 00:14:29,279
address and now

408
00:14:29,279 --> 00:14:32,839
we are happy to take your question thank

409
00:14:32,839 --> 00:14:35,839
you

