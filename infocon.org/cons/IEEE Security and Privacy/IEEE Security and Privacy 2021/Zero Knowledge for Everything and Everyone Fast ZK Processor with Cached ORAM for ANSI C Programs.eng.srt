1
00:00:00,560 --> 00:00:02,960
hi my name is david heath and in this

2
00:00:02,960 --> 00:00:04,000
brief video

3
00:00:04,000 --> 00:00:05,359
i will be giving an overview of our

4
00:00:05,359 --> 00:00:07,279
paper zero knowledge for everything and

5
00:00:07,279 --> 00:00:07,759
everyone

6
00:00:07,759 --> 00:00:09,760
fast dk processor with cached orem for

7
00:00:09,760 --> 00:00:11,040
ncc programs

8
00:00:11,040 --> 00:00:13,120
this paper is joint work done by myself

9
00:00:13,120 --> 00:00:14,160
by ibn yang

10
00:00:14,160 --> 00:00:16,239
david de bessari and by my advisor vlad

11
00:00:16,239 --> 00:00:18,080
kaleznikov the four of us work at

12
00:00:18,080 --> 00:00:21,520
georgia tech in atlanta georgia

13
00:00:21,920 --> 00:00:23,920
i'd like to begin by starting out with a

14
00:00:23,920 --> 00:00:25,760
motivating problem

15
00:00:25,760 --> 00:00:27,920
consider the following scenario let's

16
00:00:27,920 --> 00:00:30,080
suppose that there is a hospital

17
00:00:30,080 --> 00:00:32,320
that has a certified database containing

18
00:00:32,320 --> 00:00:33,280
lots of

19
00:00:33,280 --> 00:00:36,399
sensitive patient data at the same time

20
00:00:36,399 --> 00:00:37,520
there's a researcher

21
00:00:37,520 --> 00:00:39,200
who has a patient study that he would

22
00:00:39,200 --> 00:00:42,000
like to conduct on the database

23
00:00:42,000 --> 00:00:44,079
both parties would like for this patient

24
00:00:44,079 --> 00:00:45,760
study to actually happen

25
00:00:45,760 --> 00:00:47,840
there is a serious value that might come

26
00:00:47,840 --> 00:00:49,280
from this patient's study

27
00:00:49,280 --> 00:00:51,199
but at the same time the hospital might

28
00:00:51,199 --> 00:00:53,199
be unwilling to give patient data

29
00:00:53,199 --> 00:00:55,039
directly to the researcher

30
00:00:55,039 --> 00:00:57,760
after all the patient data is sensitive

31
00:00:57,760 --> 00:00:58,239
and

32
00:00:58,239 --> 00:01:00,160
in fact the hospital might have its hand

33
00:01:00,160 --> 00:01:02,000
type by legislation which prevents it

34
00:01:02,000 --> 00:01:02,640
providing

35
00:01:02,640 --> 00:01:06,000
data directly to the researcher

36
00:01:06,000 --> 00:01:07,840
now one thing we could imagine doing is

37
00:01:07,840 --> 00:01:10,320
have the hospital perform the study

38
00:01:10,320 --> 00:01:13,360
on behalf of the researcher but this is

39
00:01:13,360 --> 00:01:15,200
potentially problematic because the

40
00:01:15,200 --> 00:01:16,640
researcher might not trust

41
00:01:16,640 --> 00:01:19,040
the hospital will conduct the survey

42
00:01:19,040 --> 00:01:20,240
correctly

43
00:01:20,240 --> 00:01:22,400
that is the researcher wants to get the

44
00:01:22,400 --> 00:01:23,680
result of the study

45
00:01:23,680 --> 00:01:25,759
and they want some sort of assurance

46
00:01:25,759 --> 00:01:27,200
that the result of the study has

47
00:01:27,200 --> 00:01:29,119
something to do with the actual patient

48
00:01:29,119 --> 00:01:30,079
database

49
00:01:30,079 --> 00:01:33,119
that the hospital owns

50
00:01:33,119 --> 00:01:35,119
there is a cryptographic technology

51
00:01:35,119 --> 00:01:36,799
called zero knowledge proofs

52
00:01:36,799 --> 00:01:38,640
which can be potentially used to help

53
00:01:38,640 --> 00:01:41,200
solve this motivating problem

54
00:01:41,200 --> 00:01:43,040
in zero knowledge we consider two

55
00:01:43,040 --> 00:01:45,200
parties the so-called verifier

56
00:01:45,200 --> 00:01:47,520
and the so-called prover the prover

57
00:01:47,520 --> 00:01:49,520
would like to demonstrate some fact

58
00:01:49,520 --> 00:01:51,920
to the verifier without leaking some

59
00:01:51,920 --> 00:01:54,640
sort of extra knowledge to the verifier

60
00:01:54,640 --> 00:01:56,880
more precisely the two parties agree on

61
00:01:56,880 --> 00:01:58,399
some formal statement

62
00:01:58,399 --> 00:01:59,840
you can think of this statement as a

63
00:01:59,840 --> 00:02:01,600
proposition that the approver would like

64
00:02:01,600 --> 00:02:02,479
to prove true

65
00:02:02,479 --> 00:02:05,680
to the verifier the prover has some side

66
00:02:05,680 --> 00:02:06,640
information

67
00:02:06,640 --> 00:02:08,560
which we refer to as the witness which

68
00:02:08,560 --> 00:02:09,758
helps the prover to

69
00:02:09,758 --> 00:02:13,040
show that the statement is true

70
00:02:13,040 --> 00:02:14,720
zero knowledge then allows the prover

71
00:02:14,720 --> 00:02:16,160
and verifier to communicate

72
00:02:16,160 --> 00:02:19,040
by some sort of cryptographic protocol

73
00:02:19,040 --> 00:02:20,319
at the end of the protocol

74
00:02:20,319 --> 00:02:22,480
the verifier becomes convinced that the

75
00:02:22,480 --> 00:02:25,120
statement must be true

76
00:02:25,120 --> 00:02:27,200
the crucial point is that beyond

77
00:02:27,200 --> 00:02:28,720
learning the statement is true

78
00:02:28,720 --> 00:02:32,720
the verifier learns nothing at all

79
00:02:32,720 --> 00:02:35,519
zero knowledge proofs give a potentially

80
00:02:35,519 --> 00:02:36,080
elegant

81
00:02:36,080 --> 00:02:39,599
solution to our original dilemma

82
00:02:39,599 --> 00:02:41,680
in particular we can now set the

83
00:02:41,680 --> 00:02:43,840
verifier to be our medical researcher

84
00:02:43,840 --> 00:02:46,959
and the prover to be our hospital

85
00:02:46,959 --> 00:02:48,640
the statement that they will consider is

86
00:02:48,640 --> 00:02:50,239
some formalization

87
00:02:50,239 --> 00:02:53,360
of the medical study and the witness is

88
00:02:53,360 --> 00:02:54,160
the provers

89
00:02:54,160 --> 00:02:57,200
certified database now the two parties

90
00:02:57,200 --> 00:02:58,800
can use a zero knowledge proof

91
00:02:58,800 --> 00:03:00,879
to show that the patient study results

92
00:03:00,879 --> 00:03:04,159
in some particular results

93
00:03:04,159 --> 00:03:06,560
crucially at the end of this study the

94
00:03:06,560 --> 00:03:08,720
verifier will be convinced that it must

95
00:03:08,720 --> 00:03:09,440
be the case

96
00:03:09,440 --> 00:03:11,040
that the results are bound to the

97
00:03:11,040 --> 00:03:13,200
database but at the same time will not

98
00:03:13,200 --> 00:03:14,879
learn anything about the specific

99
00:03:14,879 --> 00:03:16,159
contents of the database

100
00:03:16,159 --> 00:03:17,760
other than whatever is implied by the

101
00:03:17,760 --> 00:03:20,560
study results

102
00:03:20,879 --> 00:03:23,200
unfortunately in practice such

103
00:03:23,200 --> 00:03:25,120
applications are not yet possible for

104
00:03:25,120 --> 00:03:27,519
end users to construct

105
00:03:27,519 --> 00:03:30,400
the problem is that as i said earlier

106
00:03:30,400 --> 00:03:31,519
the statement must be

107
00:03:31,519 --> 00:03:34,640
formalized in some way so far the

108
00:03:34,640 --> 00:03:36,080
systems that cryptographers have

109
00:03:36,080 --> 00:03:36,720
developed

110
00:03:36,720 --> 00:03:38,560
essentially require an expert to

111
00:03:38,560 --> 00:03:41,040
formalize these statements

112
00:03:41,040 --> 00:03:43,920
in this work we address this problem we

113
00:03:43,920 --> 00:03:45,440
allow zero knowledge proofs

114
00:03:45,440 --> 00:03:49,920
to be expressed as regular ncc programs

115
00:03:49,920 --> 00:03:52,000
even end users who don't know anything

116
00:03:52,000 --> 00:03:53,280
about cryptography

117
00:03:53,280 --> 00:03:55,040
can use a language that they already

118
00:03:55,040 --> 00:03:56,640
know namely c

119
00:03:56,640 --> 00:03:58,239
in order to write down zero knowledge

120
00:03:58,239 --> 00:04:00,720
proofs the system is also efficient

121
00:04:00,720 --> 00:04:01,360
enough

122
00:04:01,360 --> 00:04:03,200
by a number of improvements that we make

123
00:04:03,200 --> 00:04:04,480
in our paper

124
00:04:04,480 --> 00:04:06,480
that applications like this particular

125
00:04:06,480 --> 00:04:08,400
one are far more realistic than they

126
00:04:08,400 --> 00:04:11,040
were before

127
00:04:11,680 --> 00:04:13,599
at a very high level our approach to

128
00:04:13,599 --> 00:04:15,360
handling ncc programs

129
00:04:15,360 --> 00:04:18,079
as zero knowledge proofs is as follows

130
00:04:18,079 --> 00:04:21,600
we start from some source ncc program

131
00:04:21,600 --> 00:04:24,240
then we compile the ncc program down to

132
00:04:24,240 --> 00:04:25,840
a custom assembly language

133
00:04:25,840 --> 00:04:28,960
using a custom compiler from here

134
00:04:28,960 --> 00:04:31,280
we host this assembly language on a

135
00:04:31,280 --> 00:04:33,280
virtual machine

136
00:04:33,280 --> 00:04:35,120
this virtual machine can be understood

137
00:04:35,120 --> 00:04:37,360
as a sort of processor

138
00:04:37,360 --> 00:04:39,360
our processor however is not a piece of

139
00:04:39,360 --> 00:04:41,919
hardware rather it is a cryptographic

140
00:04:41,919 --> 00:04:42,639
protocol

141
00:04:42,639 --> 00:04:45,120
that runs between the two parties

142
00:04:45,120 --> 00:04:46,160
therefore each

143
00:04:46,160 --> 00:04:48,240
instruction of the source assembly

144
00:04:48,240 --> 00:04:52,160
language runs inside zero knowledge

145
00:04:52,160 --> 00:04:53,600
by running all of the instructions

146
00:04:53,600 --> 00:04:55,759
inside zero knowledge we essentially

147
00:04:55,759 --> 00:04:57,120
hide the execution

148
00:04:57,120 --> 00:05:00,479
from the program verifier nevertheless

149
00:05:00,479 --> 00:05:02,400
at the end of the execution the verifier

150
00:05:02,400 --> 00:05:03,520
becomes convinced

151
00:05:03,520 --> 00:05:07,280
that the program execution is valid

152
00:05:07,280 --> 00:05:09,120
our work includes improvements to all

153
00:05:09,120 --> 00:05:12,240
parts of this design stack

154
00:05:12,240 --> 00:05:14,240
the cross-cutting concern here is

155
00:05:14,240 --> 00:05:15,840
efficiency

156
00:05:15,840 --> 00:05:17,680
zero knowledge proofs as compared to

157
00:05:17,680 --> 00:05:19,440
clear text computing on a hardware

158
00:05:19,440 --> 00:05:20,160
processor

159
00:05:20,160 --> 00:05:23,440
is very expensive therefore it's crucial

160
00:05:23,440 --> 00:05:25,919
that at each part of this stack we keep

161
00:05:25,919 --> 00:05:28,639
as much performance as possible

162
00:05:28,639 --> 00:05:30,720
therefore each part of this system is

163
00:05:30,720 --> 00:05:31,919
custom designed

164
00:05:31,919 --> 00:05:33,759
for example our zero knowledge machine

165
00:05:33,759 --> 00:05:36,160
is built on top of a custom protocol

166
00:05:36,160 --> 00:05:38,479
in the machine itself is hand tuned to

167
00:05:38,479 --> 00:05:40,160
be as efficient as possible

168
00:05:40,160 --> 00:05:43,520
for the underlying protocol similarly

169
00:05:43,520 --> 00:05:45,520
we did not take an assembly language off

170
00:05:45,520 --> 00:05:47,759
the shelf but rather designed a custom

171
00:05:47,759 --> 00:05:48,720
one

172
00:05:48,720 --> 00:05:50,479
this decision was motivated by

173
00:05:50,479 --> 00:05:52,000
efficiency by choosing

174
00:05:52,000 --> 00:05:54,160
a custom assembly language we can rule

175
00:05:54,160 --> 00:05:55,199
out instructions

176
00:05:55,199 --> 00:05:56,960
which would become too expensive for the

177
00:05:56,960 --> 00:05:58,479
zero knowledge machine

178
00:05:58,479 --> 00:06:00,639
and at the same time we can include new

179
00:06:00,639 --> 00:06:02,479
instructions which happen to be

180
00:06:02,479 --> 00:06:04,960
extremely efficient on our very unique

181
00:06:04,960 --> 00:06:06,479
hardware

182
00:06:06,479 --> 00:06:08,080
the result of this emphasis on

183
00:06:08,080 --> 00:06:10,080
efficiency is that our system can run

184
00:06:10,080 --> 00:06:11,680
off-the-shelf linux programs

185
00:06:11,680 --> 00:06:13,919
inside zero knowledge i'll talk about

186
00:06:13,919 --> 00:06:15,919
performance more at the end of this talk

187
00:06:15,919 --> 00:06:17,440
but our system can run it up to 10

188
00:06:17,440 --> 00:06:19,520
kilohertz and we were able to take

189
00:06:19,520 --> 00:06:20,000
standard

190
00:06:20,000 --> 00:06:22,400
programs like sed and gzip and run them

191
00:06:22,400 --> 00:06:25,280
inside zero knowledge

192
00:06:25,280 --> 00:06:26,800
let's next take a look at how the two

193
00:06:26,800 --> 00:06:28,639
parties actually run

194
00:06:28,639 --> 00:06:32,319
a given program inside zero knowledge

195
00:06:32,319 --> 00:06:34,319
both parties will run the zero knowledge

196
00:06:34,319 --> 00:06:36,240
machine locally on their respective

197
00:06:36,240 --> 00:06:38,400
device

198
00:06:38,400 --> 00:06:40,160
the zero knowledge machine itself is

199
00:06:40,160 --> 00:06:41,759
built from a complex

200
00:06:41,759 --> 00:06:44,720
circuit the circuit holds algebraic

201
00:06:44,720 --> 00:06:46,160
values which are

202
00:06:46,160 --> 00:06:48,160
shared in an authenticated way between

203
00:06:48,160 --> 00:06:51,280
the verifier and the prover

204
00:06:51,280 --> 00:06:53,199
the parties propagate these shares

205
00:06:53,199 --> 00:06:54,800
through gates using a cryptographic

206
00:06:54,800 --> 00:06:57,599
primitive called oblivious transfer

207
00:06:57,599 --> 00:06:59,280
although the low-level actions of the

208
00:06:59,280 --> 00:07:01,120
two players differ from one another

209
00:07:01,120 --> 00:07:02,880
i would like for you to think that the

210
00:07:02,880 --> 00:07:04,319
two parties essentially

211
00:07:04,319 --> 00:07:07,039
operate in lock step that is each one of

212
00:07:07,039 --> 00:07:08,880
them looks at a particular wire

213
00:07:08,880 --> 00:07:12,800
at a particular time by executing a very

214
00:07:12,800 --> 00:07:14,720
large circuit which encodes an entire

215
00:07:14,720 --> 00:07:15,440
processor

216
00:07:15,440 --> 00:07:16,880
the two parties can step through the

217
00:07:16,880 --> 00:07:19,199
program instruction by instruction

218
00:07:19,199 --> 00:07:20,479
and eventually reach the end of the

219
00:07:20,479 --> 00:07:23,599
program i would like to emphasize

220
00:07:23,599 --> 00:07:25,440
that while this is happening the

221
00:07:25,440 --> 00:07:27,759
verifier is completely oblivious to the

222
00:07:27,759 --> 00:07:29,759
values on any of the wires

223
00:07:29,759 --> 00:07:31,840
his shares do not convey any information

224
00:07:31,840 --> 00:07:34,160
about any internal circuit values

225
00:07:34,160 --> 00:07:35,759
only the prover knows the values on the

226
00:07:35,759 --> 00:07:38,000
wires

227
00:07:38,000 --> 00:07:39,759
part of our contribution was to build

228
00:07:39,759 --> 00:07:41,360
very efficient circuits

229
00:07:41,360 --> 00:07:43,599
we did this in a number of ways perhaps

230
00:07:43,599 --> 00:07:45,039
most notably through a

231
00:07:45,039 --> 00:07:48,000
highly efficient ram we showed that by

232
00:07:48,000 --> 00:07:50,000
adding caching to a previous

233
00:07:50,000 --> 00:07:52,400
state-of-the-art zero knowledge ram we

234
00:07:52,400 --> 00:07:55,840
were able to greatly improve performance

235
00:07:55,840 --> 00:07:57,840
representing a large main memory inside

236
00:07:57,840 --> 00:07:59,759
zero knowledge is the single most

237
00:07:59,759 --> 00:08:02,400
expensive component of our system

238
00:08:02,400 --> 00:08:04,160
fortunately our improved caching

239
00:08:04,160 --> 00:08:06,319
technique reduces the cost of ram by

240
00:08:06,319 --> 00:08:09,360
around eight times

241
00:08:09,680 --> 00:08:11,680
recall that our goal is to implement

242
00:08:11,680 --> 00:08:14,000
arbitrary ncc programs

243
00:08:14,000 --> 00:08:16,639
in order to implement ncc we have to

244
00:08:16,639 --> 00:08:18,639
provide a standard library

245
00:08:18,639 --> 00:08:20,400
therefore i'd like to switch topics and

246
00:08:20,400 --> 00:08:22,000
talk a little bit about how it is that

247
00:08:22,000 --> 00:08:23,599
we go about achieving

248
00:08:23,599 --> 00:08:25,520
the c standard library inside zero

249
00:08:25,520 --> 00:08:27,120
knowledge

250
00:08:27,120 --> 00:08:28,960
so for example what does it actually

251
00:08:28,960 --> 00:08:31,360
mean that the program is going to read a

252
00:08:31,360 --> 00:08:31,919
file

253
00:08:31,919 --> 00:08:34,399
inside a zero knowledge protocol zero

254
00:08:34,399 --> 00:08:35,839
knowledge protocols don't have any

255
00:08:35,839 --> 00:08:38,959
notion of files

256
00:08:39,039 --> 00:08:40,479
our answer which we think is very

257
00:08:40,479 --> 00:08:42,880
natural is that we cause the prover to

258
00:08:42,880 --> 00:08:44,720
perform corresponding actions on her

259
00:08:44,720 --> 00:08:45,839
local machine

260
00:08:45,839 --> 00:08:47,519
and then return the answer of that

261
00:08:47,519 --> 00:08:49,279
action back to the zero knowledge

262
00:08:49,279 --> 00:08:51,839
protocol as part of her witness so for

263
00:08:51,839 --> 00:08:52,959
example

264
00:08:52,959 --> 00:08:54,720
when the zero knowledge program

265
00:08:54,720 --> 00:08:56,560
indicates that a file should be read

266
00:08:56,560 --> 00:08:58,399
the proofer will read that file on her

267
00:08:58,399 --> 00:08:59,920
local machine and then

268
00:08:59,920 --> 00:09:01,600
feed the answer as part of her witness

269
00:09:01,600 --> 00:09:05,120
into the zero knowledge protocol

270
00:09:06,240 --> 00:09:08,560
to achieve the standard library and some

271
00:09:08,560 --> 00:09:09,760
other use cases

272
00:09:09,760 --> 00:09:11,519
we implemented a feature that we call

273
00:09:11,519 --> 00:09:13,440
prover oracle calls

274
00:09:13,440 --> 00:09:15,279
a proofer oracle call is a type of

275
00:09:15,279 --> 00:09:16,480
assembly instruction

276
00:09:16,480 --> 00:09:18,800
that behaves quite differently from

277
00:09:18,800 --> 00:09:21,920
other instructions in our language

278
00:09:21,920 --> 00:09:23,200
recall that our system

279
00:09:23,200 --> 00:09:26,160
emulates a processor via a cryptographic

280
00:09:26,160 --> 00:09:27,600
protocol

281
00:09:27,600 --> 00:09:30,080
in normal execution it is instructive to

282
00:09:30,080 --> 00:09:31,200
think of the verifier

283
00:09:31,200 --> 00:09:34,160
improver running this low-level machine

284
00:09:34,160 --> 00:09:35,279
in lock step

285
00:09:35,279 --> 00:09:38,080
instruction by instruction in order to

286
00:09:38,080 --> 00:09:40,080
perform each instruction the two parties

287
00:09:40,080 --> 00:09:40,800
will perform

288
00:09:40,800 --> 00:09:44,080
synchronized operations the actual

289
00:09:44,080 --> 00:09:45,760
lowest level cryptographic details

290
00:09:45,760 --> 00:09:47,519
differ between the two parties

291
00:09:47,519 --> 00:09:49,040
but at this level of abstraction the

292
00:09:49,040 --> 00:09:50,560
parties essentially perform the same

293
00:09:50,560 --> 00:09:51,440
actions

294
00:09:51,440 --> 00:09:53,279
so for example to perform an ad

295
00:09:53,279 --> 00:09:54,959
instruction both parties will look up

296
00:09:54,959 --> 00:09:56,080
values from the

297
00:09:56,080 --> 00:09:57,920
processor registry add the values

298
00:09:57,920 --> 00:09:59,600
together and then store them back to the

299
00:09:59,600 --> 00:10:01,519
registry

300
00:10:01,519 --> 00:10:04,640
oracle calls are different when an

301
00:10:04,640 --> 00:10:06,160
oracle call occurs

302
00:10:06,160 --> 00:10:08,640
the verifier will do nothing in essence

303
00:10:08,640 --> 00:10:10,399
the verifier simply goes to sleep

304
00:10:10,399 --> 00:10:12,959
and waits for the next instruction the

305
00:10:12,959 --> 00:10:14,640
prover on the other hand

306
00:10:14,640 --> 00:10:16,839
performs some meaningful actions

307
00:10:16,839 --> 00:10:18,079
specifically

308
00:10:18,079 --> 00:10:20,079
the prover maintains what we refer to as

309
00:10:20,079 --> 00:10:21,360
the oracle table

310
00:10:21,360 --> 00:10:23,440
this table holds a list of procedures

311
00:10:23,440 --> 00:10:26,000
which can be indexed by some identifier

312
00:10:26,000 --> 00:10:28,640
when the oracle instruction occurs the

313
00:10:28,640 --> 00:10:30,399
prover goes to the table looks up the

314
00:10:30,399 --> 00:10:31,600
corresponding action

315
00:10:31,600 --> 00:10:33,519
and that runs that action on her local

316
00:10:33,519 --> 00:10:35,680
device

317
00:10:35,680 --> 00:10:37,600
the point is that by incorporating this

318
00:10:37,600 --> 00:10:40,240
simple mechanism this single instruction

319
00:10:40,240 --> 00:10:42,079
we have a way by which the prover can

320
00:10:42,079 --> 00:10:44,560
escape the zero knowledge environment

321
00:10:44,560 --> 00:10:46,959
and perform actions that are needed to

322
00:10:46,959 --> 00:10:49,600
implement the standard library

323
00:10:49,600 --> 00:10:50,720
now that we've talked about prover

324
00:10:50,720 --> 00:10:52,800
oracle calls i'd again like to shift

325
00:10:52,800 --> 00:10:54,160
directions and have a look at our

326
00:10:54,160 --> 00:10:56,079
instruction set

327
00:10:56,079 --> 00:10:58,160
on the slide i actually have our entire

328
00:10:58,160 --> 00:10:59,600
instruction set written out

329
00:10:59,600 --> 00:11:01,360
we have instructions that handle algebra

330
00:11:01,360 --> 00:11:03,839
control flow memory operations

331
00:11:03,839 --> 00:11:05,360
and special instructions for handling

332
00:11:05,360 --> 00:11:07,360
the provers witness

333
00:11:07,360 --> 00:11:09,519
as i mentioned earlier this instruction

334
00:11:09,519 --> 00:11:11,760
set is specifically designed with zero

335
00:11:11,760 --> 00:11:13,360
knowledge in mind

336
00:11:13,360 --> 00:11:15,120
for example i'd like you to notice that

337
00:11:15,120 --> 00:11:16,560
conspicuously missing

338
00:11:16,560 --> 00:11:18,480
is any sort of algebraic operation that

339
00:11:18,480 --> 00:11:19,600
performs something like

340
00:11:19,600 --> 00:11:22,800
division this is not limiting because we

341
00:11:22,800 --> 00:11:25,760
have access to prover oracle calls

342
00:11:25,760 --> 00:11:28,079
for technical reasons division inside

343
00:11:28,079 --> 00:11:29,519
the zero knowledge protocol

344
00:11:29,519 --> 00:11:32,320
is quite expensive however we can use

345
00:11:32,320 --> 00:11:33,920
prover oracle calls to divide

346
00:11:33,920 --> 00:11:36,959
numbers quickly using a procedure

347
00:11:36,959 --> 00:11:39,120
in particular the procedure outsources

348
00:11:39,120 --> 00:11:40,720
division to the prover

349
00:11:40,720 --> 00:11:42,560
this outsourcing is achieved by approval

350
00:11:42,560 --> 00:11:44,079
oracle call

351
00:11:44,079 --> 00:11:46,160
when the oracle call occurs the prover

352
00:11:46,160 --> 00:11:47,920
locally divides the two numbers

353
00:11:47,920 --> 00:11:49,600
and feeds the result back into the

354
00:11:49,600 --> 00:11:52,079
machine the answer that the prover feeds

355
00:11:52,079 --> 00:11:53,920
back into the machine can be quickly

356
00:11:53,920 --> 00:11:55,839
checked using the algebraic instructions

357
00:11:55,839 --> 00:11:58,959
that are provided in our instruction set

358
00:11:58,959 --> 00:12:00,480
i'd like to use my last few minutes to

359
00:12:00,480 --> 00:12:03,440
discuss the efficiency of our system

360
00:12:03,440 --> 00:12:05,680
the vast body of prior work on xero

361
00:12:05,680 --> 00:12:07,040
knowledge looks at

362
00:12:07,040 --> 00:12:12,240
circuits not at general purpose programs

363
00:12:12,240 --> 00:12:14,000
it is for this reason that i claimed

364
00:12:14,000 --> 00:12:15,600
earlier that current zero knowledge

365
00:12:15,600 --> 00:12:16,480
state of the art

366
00:12:16,480 --> 00:12:18,959
requires an expert to craft proof

367
00:12:18,959 --> 00:12:19,839
statements

368
00:12:19,839 --> 00:12:21,839
it is difficult to express complicated

369
00:12:21,839 --> 00:12:23,680
statements as circuits

370
00:12:23,680 --> 00:12:26,320
there is some work that also takes a

371
00:12:26,320 --> 00:12:28,399
processor-based approach

372
00:12:28,399 --> 00:12:30,399
however these prior works are very very

373
00:12:30,399 --> 00:12:33,680
slow in comparison to artwork

374
00:12:33,680 --> 00:12:35,839
these processors are able to run at

375
00:12:35,839 --> 00:12:38,480
about 1 hertz or even less and they can

376
00:12:38,480 --> 00:12:41,120
only support small main memories

377
00:12:41,120 --> 00:12:43,040
given that these approaches produce such

378
00:12:43,040 --> 00:12:44,959
weak machines there's no hope to

379
00:12:44,959 --> 00:12:45,519
approach

380
00:12:45,519 --> 00:12:47,519
the level of generality that we take for

381
00:12:47,519 --> 00:12:50,079
standard c

382
00:12:50,399 --> 00:12:52,639
in contrast our system runs about ten

383
00:12:52,639 --> 00:12:54,079
thousand times faster

384
00:12:54,079 --> 00:12:55,760
and can support tens of megabytes of

385
00:12:55,760 --> 00:12:57,760
main memory

386
00:12:57,760 --> 00:12:59,680
we get this performance by a number of

387
00:12:59,680 --> 00:13:01,440
novel zero knowledge improvements that i

388
00:13:01,440 --> 00:13:03,600
mentioned earlier

389
00:13:03,600 --> 00:13:05,680
sensor of a machine is powerful we are

390
00:13:05,680 --> 00:13:06,959
able to support

391
00:13:06,959 --> 00:13:09,760
arbitrary ncc programs of course simply

392
00:13:09,760 --> 00:13:10,480
providing a

393
00:13:10,480 --> 00:13:12,720
powerful enough machine is not enough we

394
00:13:12,720 --> 00:13:14,880
also had to make some design decisions

395
00:13:14,880 --> 00:13:16,399
like the proof of oracle calls that i

396
00:13:16,399 --> 00:13:19,200
described earlier

397
00:13:19,360 --> 00:13:20,560
to give a little more sense of

398
00:13:20,560 --> 00:13:22,000
efficiency i'd like to tell you about

399
00:13:22,000 --> 00:13:23,440
one of the benchmarks we ran on our

400
00:13:23,440 --> 00:13:24,880
system

401
00:13:24,880 --> 00:13:26,480
in this benchmark we show that we can

402
00:13:26,480 --> 00:13:28,800
use our system to allow the prover

403
00:13:28,800 --> 00:13:30,720
to demonstrate to the verifier that

404
00:13:30,720 --> 00:13:33,040
there exists a bug in a particular

405
00:13:33,040 --> 00:13:34,720
program

406
00:13:34,720 --> 00:13:36,880
this bug is triggered by a specific

407
00:13:36,880 --> 00:13:38,959
malformed input

408
00:13:38,959 --> 00:13:41,040
and at the end of the execution the

409
00:13:41,040 --> 00:13:42,880
verifier becomes certain that there is a

410
00:13:42,880 --> 00:13:43,279
bug

411
00:13:43,279 --> 00:13:45,120
but learns nothing about the program

412
00:13:45,120 --> 00:13:46,399
input

413
00:13:46,399 --> 00:13:48,000
the particular benchmark i want to talk

414
00:13:48,000 --> 00:13:51,360
about is a bug that used to exist in the

415
00:13:51,360 --> 00:13:54,800
linux program said essentially this bug

416
00:13:54,800 --> 00:13:55,360
would

417
00:13:55,360 --> 00:13:57,600
on certain inputs trigger an infinite

418
00:13:57,600 --> 00:13:59,600
loop that causes the program to override

419
00:13:59,600 --> 00:14:01,199
all of memory and eventually

420
00:14:01,199 --> 00:14:02,399
on most systems relates to a

421
00:14:02,399 --> 00:14:04,639
segmentation fault

422
00:14:04,639 --> 00:14:06,959
this bug involves executing hundreds of

423
00:14:06,959 --> 00:14:08,560
thousands of instructions

424
00:14:08,560 --> 00:14:10,880
and consumes a large amount of memory

425
00:14:10,880 --> 00:14:11,680
nevertheless

426
00:14:11,680 --> 00:14:13,199
our zero knowledge system was able to

427
00:14:13,199 --> 00:14:14,800
prove the existence of the bug in around

428
00:14:14,800 --> 00:14:17,839
36 seconds

429
00:14:20,399 --> 00:14:22,639
we've now taken a very high level look

430
00:14:22,639 --> 00:14:24,399
at our approach to handling zero

431
00:14:24,399 --> 00:14:26,079
knowledge proofs expressed as ncd

432
00:14:26,079 --> 00:14:27,199
programs

433
00:14:27,199 --> 00:14:28,959
to recap the way that we made this

434
00:14:28,959 --> 00:14:30,880
realistic was by designing a number of

435
00:14:30,880 --> 00:14:32,959
custom urinary components like a custom

436
00:14:32,959 --> 00:14:34,959
protocol custom process architecture and

437
00:14:34,959 --> 00:14:35,920
instruction set

438
00:14:35,920 --> 00:14:37,440
and a custom compiler and standard

439
00:14:37,440 --> 00:14:40,560
library the resulting system is powerful

440
00:14:40,560 --> 00:14:41,839
and efficient it can run tens of

441
00:14:41,839 --> 00:14:43,279
thousands of times faster than prior

442
00:14:43,279 --> 00:14:43,680
work

443
00:14:43,680 --> 00:14:46,639
and can handle a large main memory we

444
00:14:46,639 --> 00:14:48,079
believe that this work will help to

445
00:14:48,079 --> 00:14:48,880
enable

446
00:14:48,880 --> 00:14:50,880
powerful and interesting applications

447
00:14:50,880 --> 00:14:52,639
like the hospital use case i spoke about

448
00:14:52,639 --> 00:14:59,040
at the beginning of this talk

449
00:14:59,040 --> 00:15:01,120
you

