1
00:00:00,640 --> 00:00:03,040
this is the presentation for the paper

2
00:00:03,040 --> 00:00:05,680
woven fast scalable and communication

3
00:00:05,680 --> 00:00:07,359
efficient zero knowledge proofs for

4
00:00:07,359 --> 00:00:09,679
boolean and arithmetic circuits

5
00:00:09,679 --> 00:00:11,679
i'm chiang kai-wong this is a joint work

6
00:00:11,679 --> 00:00:12,799
with kang young

7
00:00:12,799 --> 00:00:16,560
jose cat and xiao wang

8
00:00:16,560 --> 00:00:19,760
what is there knowledge proof a simple

9
00:00:19,760 --> 00:00:21,119
definition is like this

10
00:00:21,119 --> 00:00:23,119
there are two parties approver and a

11
00:00:23,119 --> 00:00:25,519
verifier for public circuit c

12
00:00:25,519 --> 00:00:27,840
known by both parties approval p

13
00:00:27,840 --> 00:00:30,000
convinces the verifier v that it knows

14
00:00:30,000 --> 00:00:30,960
the awareness

15
00:00:30,960 --> 00:00:34,320
w such that cw equals to one

16
00:00:34,320 --> 00:00:36,399
with three properties the completeness

17
00:00:36,399 --> 00:00:38,239
thunders and zero knowledge

18
00:00:38,239 --> 00:00:41,120
completeness means that if the prover

19
00:00:41,120 --> 00:00:43,440
has a correct winning sw then

20
00:00:43,440 --> 00:00:45,920
the circuit takes the input w outputs 1

21
00:00:45,920 --> 00:00:48,079
and the verifier would be convinced

22
00:00:48,079 --> 00:00:50,079
the sound is means that if the prover

23
00:00:50,079 --> 00:00:52,160
does not have a correct witness

24
00:00:52,160 --> 00:00:54,079
then there's a negligible probability

25
00:00:54,079 --> 00:00:56,079
that the circuit would add up to 1 and

26
00:00:56,079 --> 00:00:56,399
the

27
00:00:56,399 --> 00:00:59,600
v would be convinced and

28
00:00:59,600 --> 00:01:01,440
the proof of knowledge is the stronger

29
00:01:01,440 --> 00:01:02,960
property than sound is and

30
00:01:02,960 --> 00:01:05,760
it requires some additional effort the

31
00:01:05,760 --> 00:01:07,520
xero knowledge property means no

32
00:01:07,520 --> 00:01:09,520
information is revealed except for the

33
00:01:09,520 --> 00:01:13,840
output of the circuit

34
00:01:14,799 --> 00:01:16,640
there are many interesting applications

35
00:01:16,640 --> 00:01:18,720
of the downloaded proofs

36
00:01:18,720 --> 00:01:20,640
for example it can be used in a bug

37
00:01:20,640 --> 00:01:22,000
bounty program

38
00:01:22,000 --> 00:01:24,560
for a researcher to improve the

39
00:01:24,560 --> 00:01:26,320
existence of a bug in

40
00:01:26,320 --> 00:01:29,360
their knowledge before it gets a reward

41
00:01:29,360 --> 00:01:31,680
for the machine learning settings it can

42
00:01:31,680 --> 00:01:32,640
be used to

43
00:01:32,640 --> 00:01:35,119
to the private benchmark with either

44
00:01:35,119 --> 00:01:36,640
private dataset or

45
00:01:36,640 --> 00:01:39,759
private model and it can also be used to

46
00:01:39,759 --> 00:01:40,479
demonstrate

47
00:01:40,479 --> 00:01:42,640
data poisoning attacks with some private

48
00:01:42,640 --> 00:01:44,240
data set

49
00:01:44,240 --> 00:01:46,000
also the zero knowledge proof protocol

50
00:01:46,000 --> 00:01:48,560
can be used for some cryptographic

51
00:01:48,560 --> 00:01:50,960
primitives for example to prove the

52
00:01:50,960 --> 00:01:53,200
knowledge of a path in the miracle tree

53
00:01:53,200 --> 00:01:56,399
or to prove secrets for a short integer

54
00:01:56,399 --> 00:01:59,280
solution problem

55
00:02:00,320 --> 00:02:02,560
there are many existing proof systems

56
00:02:02,560 --> 00:02:03,840
for example there are

57
00:02:03,840 --> 00:02:06,479
dk snarks as they are knowledge proof

58
00:02:06,479 --> 00:02:08,878
based on the interactive oracle proofs

59
00:02:08,878 --> 00:02:11,360
a special of verifiable outsourcing

60
00:02:11,360 --> 00:02:13,840
protocol based on the gkr protocols

61
00:02:13,840 --> 00:02:16,000
the mpc in the head paradigm and there

62
00:02:16,000 --> 00:02:17,360
are knowledge proofs from the gabor

63
00:02:17,360 --> 00:02:19,599
circuits

64
00:02:19,599 --> 00:02:21,360
among all these protocols they are

65
00:02:21,360 --> 00:02:22,959
usually the trade-offs

66
00:02:22,959 --> 00:02:26,080
between different resources for example

67
00:02:26,080 --> 00:02:28,800
regarding the run complexity is a

68
00:02:28,800 --> 00:02:31,440
protocol interactive or non-interactive

69
00:02:31,440 --> 00:02:34,160
regarding the proof size and the

70
00:02:34,160 --> 00:02:35,519
verification time

71
00:02:35,519 --> 00:02:38,000
is the protocol succinct or somewhat

72
00:02:38,000 --> 00:02:40,400
succinct or non-succinct

73
00:02:40,400 --> 00:02:42,560
regarding the computational efficiency

74
00:02:42,560 --> 00:02:45,519
despite the computational complexity

75
00:02:45,519 --> 00:02:47,280
we should also pay attention to the

76
00:02:47,280 --> 00:02:49,120
operation needed for gate

77
00:02:49,120 --> 00:02:52,000
to compute each multiplication gate or

78
00:02:52,000 --> 00:02:52,720
and gate

79
00:02:52,720 --> 00:02:55,280
do we need the public key operations or

80
00:02:55,280 --> 00:02:57,680
the fft or entity operations

81
00:02:57,680 --> 00:03:00,080
or just the semantic symmetric key

82
00:03:00,080 --> 00:03:01,040
operations

83
00:03:01,040 --> 00:03:04,239
and for the setup assumption uh

84
00:03:04,239 --> 00:03:06,480
does the protocol need the trustee setup

85
00:03:06,480 --> 00:03:07,280
or not

86
00:03:07,280 --> 00:03:09,760
last but not the least for the memory

87
00:03:09,760 --> 00:03:10,800
efficiency

88
00:03:10,800 --> 00:03:12,879
is the memory usage proportional to the

89
00:03:12,879 --> 00:03:14,400
size of the circuit

90
00:03:14,400 --> 00:03:16,879
or the memory usage is proportional to

91
00:03:16,879 --> 00:03:17,440
the

92
00:03:17,440 --> 00:03:21,040
scenario when the circuit is evaluated

93
00:03:21,040 --> 00:03:23,760
in plain text with no cryptograph

94
00:03:23,760 --> 00:03:26,959
cryptography involved

95
00:03:27,280 --> 00:03:28,959
basically there are two settings of

96
00:03:28,959 --> 00:03:30,720
their knowledge proof

97
00:03:30,720 --> 00:03:33,599
the first day as synchronous protocols

98
00:03:33,599 --> 00:03:35,440
or some protocols which are easier

99
00:03:35,440 --> 00:03:39,040
to be set up as a synchronous setting

100
00:03:39,040 --> 00:03:40,959
these protocols are usually interactive

101
00:03:40,959 --> 00:03:42,080
protocols

102
00:03:42,080 --> 00:03:44,000
they are computationally efficient and

103
00:03:44,000 --> 00:03:45,440
highly scalable

104
00:03:45,440 --> 00:03:47,280
but usually they suffer from wrong

105
00:03:47,280 --> 00:03:48,959
communications and they need

106
00:03:48,959 --> 00:03:52,319
designated verifiers another kind of

107
00:03:52,319 --> 00:03:53,040
protocols

108
00:03:53,040 --> 00:03:55,599
are potentially asynchronous they can be

109
00:03:55,599 --> 00:03:57,120
made non-interactive and

110
00:03:57,120 --> 00:03:59,760
public verifiable and also they tend to

111
00:03:59,760 --> 00:04:01,200
be succinct

112
00:04:01,200 --> 00:04:04,400
with short proofs and fast verification

113
00:04:04,400 --> 00:04:07,760
but their drawback is to have the

114
00:04:07,760 --> 00:04:09,920
loan proof of running time and large

115
00:04:09,920 --> 00:04:11,120
memory overhead

116
00:04:11,120 --> 00:04:12,959
which is proportional to the circuit

117
00:04:12,959 --> 00:04:14,319
size

118
00:04:14,319 --> 00:04:16,238
our protocol falls into the first

119
00:04:16,238 --> 00:04:19,120
category asynchronous protocols are good

120
00:04:19,120 --> 00:04:19,440
but

121
00:04:19,440 --> 00:04:22,400
in some scenarios uh the approver only

122
00:04:22,400 --> 00:04:23,440
needs to prove

123
00:04:23,440 --> 00:04:25,280
knowledge to several designated

124
00:04:25,280 --> 00:04:27,120
verifiers and

125
00:04:27,120 --> 00:04:29,280
these parties can be online at the same

126
00:04:29,280 --> 00:04:31,280
time and the wrong communications that's

127
00:04:31,280 --> 00:04:32,320
allowed

128
00:04:32,320 --> 00:04:35,280
in these situations public verifiability

129
00:04:35,280 --> 00:04:36,800
is not a need

130
00:04:36,800 --> 00:04:38,720
but we need a protocol that is more

131
00:04:38,720 --> 00:04:39,919
efficient and

132
00:04:39,919 --> 00:04:43,280
more scalable here's our result

133
00:04:43,280 --> 00:04:45,120
we designed an interactive xero

134
00:04:45,120 --> 00:04:47,040
knowledge proof protocol for arbitrary

135
00:04:47,040 --> 00:04:49,360
boolean arithmetic circuits

136
00:04:49,360 --> 00:04:52,000
it has a constant run communication with

137
00:04:52,000 --> 00:04:53,040
the interactive

138
00:04:53,040 --> 00:04:56,080
offline phase and almost non-interactive

139
00:04:56,080 --> 00:04:59,280
online phase the running time is linear

140
00:04:59,280 --> 00:05:00,800
to the circuit size

141
00:05:00,800 --> 00:05:03,840
for each multiplication gate or and gate

142
00:05:03,840 --> 00:05:06,720
it only requires the constant number of

143
00:05:06,720 --> 00:05:09,199
aes operation and the constant number of

144
00:05:09,199 --> 00:05:11,759
feed field elements multiplication

145
00:05:11,759 --> 00:05:14,400
and the memory usage is linear to the

146
00:05:14,400 --> 00:05:16,759
memory needed to evaluate the circuit

147
00:05:16,759 --> 00:05:18,720
non-cryptographically

148
00:05:18,720 --> 00:05:20,639
aside from that we also design a

149
00:05:20,639 --> 00:05:22,639
subfield vector oblivious linear

150
00:05:22,639 --> 00:05:24,400
evaluation protocol

151
00:05:24,400 --> 00:05:27,039
it helps to boost our protocol and it

152
00:05:27,039 --> 00:05:27,440
can

153
00:05:27,440 --> 00:05:30,639
also be of independent interest

154
00:05:30,639 --> 00:05:33,039
now let me give you an intuition of our

155
00:05:33,039 --> 00:05:34,160
protocol design

156
00:05:34,160 --> 00:05:36,000
we have already seen the definition of

157
00:05:36,000 --> 00:05:37,440
zero node proofs

158
00:05:37,440 --> 00:05:39,520
now let me remind you the definition of

159
00:05:39,520 --> 00:05:41,120
a two-party computation

160
00:05:41,120 --> 00:05:44,160
in the mpc setting two parties alice and

161
00:05:44,160 --> 00:05:46,720
bob jointly compute flash function f x

162
00:05:46,720 --> 00:05:49,520
y with their private inputs x from alice

163
00:05:49,520 --> 00:05:51,520
and y from bob

164
00:05:51,520 --> 00:05:53,120
they compute this function without

165
00:05:53,120 --> 00:05:55,199
revealing anything beyond the output of

166
00:05:55,199 --> 00:05:56,720
the function

167
00:05:56,720 --> 00:05:58,560
the two-party competition requires the

168
00:05:58,560 --> 00:06:00,160
privacy and correctness

169
00:06:00,160 --> 00:06:02,080
and there are ways to make the protocol

170
00:06:02,080 --> 00:06:05,120
secure against the malicious adversaries

171
00:06:05,120 --> 00:06:07,440
we can immediately see that if we

172
00:06:07,440 --> 00:06:08,960
compute the circuit of

173
00:06:08,960 --> 00:06:12,000
zero node proof with the way we do in

174
00:06:12,000 --> 00:06:13,520
the two-party computation

175
00:06:13,520 --> 00:06:15,680
a lot of requirements would already be

176
00:06:15,680 --> 00:06:17,120
preserved

177
00:06:17,120 --> 00:06:19,680
in the two pc settings there are two

178
00:06:19,680 --> 00:06:22,319
protocols the gmw and global circuits

179
00:06:22,319 --> 00:06:24,319
i've already mentioned they're not proof

180
00:06:24,319 --> 00:06:25,600
based on the garbage circuit

181
00:06:25,600 --> 00:06:28,319
in previous slides and for our protocol

182
00:06:28,319 --> 00:06:28,960
we use

183
00:06:28,960 --> 00:06:33,199
the gmw protocol to build a

184
00:06:33,199 --> 00:06:36,160
there are no improved protocol with less

185
00:06:36,160 --> 00:06:37,360
communication and

186
00:06:37,360 --> 00:06:40,479
chip computation an important building

187
00:06:40,479 --> 00:06:42,639
block of our protocol is the subfield

188
00:06:42,639 --> 00:06:43,199
vector

189
00:06:43,199 --> 00:06:46,400
oblivious linear evaluation or svle

190
00:06:46,400 --> 00:06:49,199
the basic functionality of the svol is

191
00:06:49,199 --> 00:06:50,160
like this

192
00:06:50,160 --> 00:06:52,880
the receiver has a global key delta and

193
00:06:52,880 --> 00:06:54,080
the functionality

194
00:06:54,080 --> 00:06:56,319
inputs the delta and the randomly

195
00:06:56,319 --> 00:06:57,520
sampled two vectors

196
00:06:57,520 --> 00:07:00,639
x and k and computes the vector

197
00:07:00,639 --> 00:07:04,080
m equals to k plus x multiplies with the

198
00:07:04,080 --> 00:07:04,880
delta

199
00:07:04,880 --> 00:07:07,759
it outputs xam to the sender indicates

200
00:07:07,759 --> 00:07:08,960
the receiver

201
00:07:08,960 --> 00:07:11,360
so then the receiver is received a

202
00:07:11,360 --> 00:07:12,880
vector

203
00:07:12,880 --> 00:07:17,440
that's uh correlated the slvolu relies

204
00:07:17,440 --> 00:07:19,039
on the landing parity with noise

205
00:07:19,039 --> 00:07:20,240
assumption

206
00:07:20,240 --> 00:07:23,280
and it basically extends a small number

207
00:07:23,280 --> 00:07:26,080
of base svle correlations into a large

208
00:07:26,080 --> 00:07:26,880
number of

209
00:07:26,880 --> 00:07:31,759
svoi correlations with help of the lpn

210
00:07:31,759 --> 00:07:34,240
the basic element in our protocol is the

211
00:07:34,240 --> 00:07:36,160
authenticated value

212
00:07:36,160 --> 00:07:38,800
and the authenticated values are

213
00:07:38,800 --> 00:07:40,479
authenticated by the information

214
00:07:40,479 --> 00:07:41,120
theoretic

215
00:07:41,120 --> 00:07:44,800
max in this setting the verifier has a

216
00:07:44,800 --> 00:07:46,800
global key delta

217
00:07:46,800 --> 00:07:49,280
when the prover wants to authenticate a

218
00:07:49,280 --> 00:07:50,400
value x

219
00:07:50,400 --> 00:07:53,520
it receives the mac of m x which is the

220
00:07:53,520 --> 00:07:54,400
mx

221
00:07:54,400 --> 00:07:56,560
and the verifier receives the local key

222
00:07:56,560 --> 00:07:58,319
of x which is kx

223
00:07:58,319 --> 00:08:01,599
it satisfies that mx equals to kx plus

224
00:08:01,599 --> 00:08:04,720
x multiplies with delta

225
00:08:04,720 --> 00:08:06,800
all the where values in the circuit will

226
00:08:06,800 --> 00:08:08,479
be encrypted with the

227
00:08:08,479 --> 00:08:11,120
information theoretic max if the

228
00:08:11,120 --> 00:08:11,840
approver

229
00:08:11,840 --> 00:08:15,120
wants to open a value x it sends the x

230
00:08:15,120 --> 00:08:17,440
along with its mac to the verifier

231
00:08:17,440 --> 00:08:19,199
the verifier will check if this

232
00:08:19,199 --> 00:08:22,000
correlation holds

233
00:08:22,000 --> 00:08:24,240
and if a malicious approver wants to

234
00:08:24,240 --> 00:08:25,280
modify

235
00:08:25,280 --> 00:08:28,639
a value x during the circuit computation

236
00:08:28,639 --> 00:08:31,360
there is a negligible probability that

237
00:08:31,360 --> 00:08:33,919
it can provide the verifier with a

238
00:08:33,919 --> 00:08:37,360
correct mac for the value x

239
00:08:37,360 --> 00:08:40,958
with information theoretic max

240
00:08:40,958 --> 00:08:44,080
we denote it by uh

241
00:08:44,080 --> 00:08:46,000
x in a bracket and call it an

242
00:08:46,000 --> 00:08:47,600
authenticated value

243
00:08:47,600 --> 00:08:49,760
there are many nice properties of

244
00:08:49,760 --> 00:08:51,200
authenticated values

245
00:08:51,200 --> 00:08:52,839
for example they are additively

246
00:08:52,839 --> 00:08:54,240
homomorphic

247
00:08:54,240 --> 00:08:56,560
it is free to do addition with a

248
00:08:56,560 --> 00:08:58,480
constant and multiplication with a

249
00:08:58,480 --> 00:08:59,519
constant

250
00:08:59,519 --> 00:09:02,399
and also these authenticated values can

251
00:09:02,399 --> 00:09:03,920
be efficiently generated

252
00:09:03,920 --> 00:09:09,839
by vector oblivious linear evaluation

253
00:09:10,080 --> 00:09:12,560
also operations on authenticated values

254
00:09:12,560 --> 00:09:14,880
are done in the pre-processing model

255
00:09:14,880 --> 00:09:17,200
it means that it's in the pre-processing

256
00:09:17,200 --> 00:09:19,040
phase two parties use the

257
00:09:19,040 --> 00:09:22,640
svoe to jointly output the

258
00:09:22,640 --> 00:09:24,640
large number of random authenticated

259
00:09:24,640 --> 00:09:27,360
values like cylander in this case

260
00:09:27,360 --> 00:09:29,519
in the online phase to authenticate the

261
00:09:29,519 --> 00:09:30,720
new value x

262
00:09:30,720 --> 00:09:33,360
the prover and the verifier fetch the

263
00:09:33,360 --> 00:09:34,560
authenticated

264
00:09:34,560 --> 00:09:37,200
lander and the approval sends a verifier

265
00:09:37,200 --> 00:09:39,360
the difference of x and lambda

266
00:09:39,360 --> 00:09:42,640
two parties can locally um apply

267
00:09:42,640 --> 00:09:45,360
a addition between authenticated value

268
00:09:45,360 --> 00:09:47,040
and a constant number

269
00:09:47,040 --> 00:09:50,240
to get the authenticated x for the

270
00:09:50,240 --> 00:09:52,080
circuit computation

271
00:09:52,080 --> 00:09:54,560
they use the same trick to deal with the

272
00:09:54,560 --> 00:09:57,279
input gate and the multiplication gate

273
00:09:57,279 --> 00:10:00,320
in the pre-processing phase the prover

274
00:10:00,320 --> 00:10:01,440
and the verifier used

275
00:10:01,440 --> 00:10:04,480
as vole to output random authenticated

276
00:10:04,480 --> 00:10:05,760
values lambda i and

277
00:10:05,760 --> 00:10:09,279
si for the input gates the prover

278
00:10:09,279 --> 00:10:12,720
prepares the windows wi and use the

279
00:10:12,720 --> 00:10:14,079
authenticated along the i

280
00:10:14,079 --> 00:10:17,200
to get the authenticated wi for the

281
00:10:17,200 --> 00:10:18,000
multiplication

282
00:10:18,000 --> 00:10:21,040
gate two parties pre prepare the

283
00:10:21,040 --> 00:10:22,880
authenticated si

284
00:10:22,880 --> 00:10:25,040
the approval will locally fetch the

285
00:10:25,040 --> 00:10:26,399
value of

286
00:10:26,399 --> 00:10:29,920
uh w alpha and w beta and compute the

287
00:10:29,920 --> 00:10:33,040
product of them which is the w gamma

288
00:10:33,040 --> 00:10:37,040
and it inputs uh w gamma to get the

289
00:10:37,040 --> 00:10:38,320
authenticated

290
00:10:38,320 --> 00:10:41,519
output of the multiplication gate

291
00:10:41,519 --> 00:10:43,839
for the addition gate this can be done

292
00:10:43,839 --> 00:10:45,040
for free because

293
00:10:45,040 --> 00:10:47,360
the authenticated values are additively

294
00:10:47,360 --> 00:10:48,880
homomorphic

295
00:10:48,880 --> 00:10:51,920
now the only thing left is to ensure

296
00:10:51,920 --> 00:10:52,320
that

297
00:10:52,320 --> 00:10:54,800
the approver does not cheat in the

298
00:10:54,800 --> 00:10:56,320
previous steps

299
00:10:56,320 --> 00:11:00,079
because it can basically input any value

300
00:11:00,079 --> 00:11:02,160
to deviate from the computation of the

301
00:11:02,160 --> 00:11:03,600
circuit

302
00:11:03,600 --> 00:11:05,920
the verifier i have to make sure that

303
00:11:05,920 --> 00:11:07,760
all the multiplication gates are

304
00:11:07,760 --> 00:11:10,800
computed correctly

305
00:11:10,800 --> 00:11:12,079
assume that there are three

306
00:11:12,079 --> 00:11:14,880
multiplication gates in the circuit

307
00:11:14,880 --> 00:11:17,839
then the proven the verifier has the

308
00:11:17,839 --> 00:11:19,360
original triples

309
00:11:19,360 --> 00:11:21,760
then they will conduct a procedure

310
00:11:21,760 --> 00:11:23,839
called the cotton bucketing which is

311
00:11:23,839 --> 00:11:26,560
derived from the cotton shoes

312
00:11:26,560 --> 00:11:29,680
in this procedure they'll generate

313
00:11:29,680 --> 00:11:32,079
l equals to c b plus d additional

314
00:11:32,079 --> 00:11:33,120
triples

315
00:11:33,120 --> 00:11:35,360
and these additional triples will be

316
00:11:35,360 --> 00:11:36,320
sacrificed

317
00:11:36,320 --> 00:11:38,399
to check the correctness of original

318
00:11:38,399 --> 00:11:41,200
triples by a sub procedure called

319
00:11:41,200 --> 00:11:44,160
the check with carefully selected

320
00:11:44,160 --> 00:11:45,360
parameters

321
00:11:45,360 --> 00:11:48,399
the sunless arrows can be controlled

322
00:11:48,399 --> 00:11:50,880
and also there are other optimizations

323
00:11:50,880 --> 00:11:51,600
to

324
00:11:51,600 --> 00:11:54,800
check the multiplication gates when

325
00:11:54,800 --> 00:11:58,160
the large field is used

326
00:11:58,160 --> 00:12:00,560
regarding the performance evaluation we

327
00:12:00,560 --> 00:12:01,440
implement the

328
00:12:01,440 --> 00:12:03,440
downloaded proof protocol for both the

329
00:12:03,440 --> 00:12:06,240
boolean and the arithmetic circuits

330
00:12:06,240 --> 00:12:08,399
for the boolean circuits the execution

331
00:12:08,399 --> 00:12:10,399
time is linear to the b length of

332
00:12:10,399 --> 00:12:13,600
windows and the number of and gates in

333
00:12:13,600 --> 00:12:14,880
the circuit

334
00:12:14,880 --> 00:12:17,440
and the performance is good even in the

335
00:12:17,440 --> 00:12:19,519
low network setting

336
00:12:19,519 --> 00:12:20,959
and for the boolean circuits the

337
00:12:20,959 --> 00:12:23,040
interesting application is to prove

338
00:12:23,040 --> 00:12:24,959
uh the knowledge of a path in the

339
00:12:24,959 --> 00:12:26,079
miracle tree

340
00:12:26,079 --> 00:12:28,160
and the running time is proportional to

341
00:12:28,160 --> 00:12:30,000
the number of nodes in the

342
00:12:30,000 --> 00:12:33,440
merkle tree and the memory usage is very

343
00:12:33,440 --> 00:12:34,800
small because

344
00:12:34,800 --> 00:12:38,639
it is only linear to the the memory that

345
00:12:38,639 --> 00:12:39,680
is used

346
00:12:39,680 --> 00:12:42,279
when the circuit is evaluated

347
00:12:42,279 --> 00:12:44,880
non-cryptographically

348
00:12:44,880 --> 00:12:47,279
also there are many decay enabled

349
00:12:47,279 --> 00:12:49,519
applications like lab deco and this

350
00:12:49,519 --> 00:12:52,880
blend ca there are no proof is used in

351
00:12:52,880 --> 00:12:55,279
their protocols

352
00:12:55,279 --> 00:12:58,959
if our protocol can be applied in their

353
00:12:58,959 --> 00:13:02,000
schemes then they'll it would help for

354
00:13:02,000 --> 00:13:04,839
both the execution time and the

355
00:13:04,839 --> 00:13:06,480
communications

356
00:13:06,480 --> 00:13:09,680
for the arithmetic circuits again

357
00:13:09,680 --> 00:13:11,920
the execution time is linear to the

358
00:13:11,920 --> 00:13:13,200
witness length and

359
00:13:13,200 --> 00:13:15,040
the number of multiplication gates in

360
00:13:15,040 --> 00:13:16,320
the circuit

361
00:13:16,320 --> 00:13:20,160
and when the network is reaching the 5

362
00:13:20,160 --> 00:13:20,800
megabyte

363
00:13:20,800 --> 00:13:24,240
megabits per second the throughput is

364
00:13:24,240 --> 00:13:27,519
nearly 1 million gates per second

365
00:13:27,519 --> 00:13:29,839
we use the matrix multiplication to

366
00:13:29,839 --> 00:13:31,519
benchmark the performance of

367
00:13:31,519 --> 00:13:33,600
multiplication gates

368
00:13:33,600 --> 00:13:36,000
we use the negative way to compute the

369
00:13:36,000 --> 00:13:37,760
matrix multiplication

370
00:13:37,760 --> 00:13:41,120
uh by the complexity of n cube

371
00:13:41,120 --> 00:13:44,160
and the again the number uh the running

372
00:13:44,160 --> 00:13:45,600
time is linear to

373
00:13:45,600 --> 00:13:48,320
the number of multiplication gates and

374
00:13:48,320 --> 00:13:49,600
the memory usage

375
00:13:49,600 --> 00:13:54,079
is very small another example is to

376
00:13:54,079 --> 00:13:54,800
prove

377
00:13:54,800 --> 00:13:57,920
a solution to the sis problem our

378
00:13:57,920 --> 00:13:58,800
protocol is

379
00:13:58,800 --> 00:14:02,000
more than an order of magnitude faster

380
00:14:02,000 --> 00:14:05,199
than previous works in all network

381
00:14:05,199 --> 00:14:08,720
settings the last part is the follow-up

382
00:14:08,720 --> 00:14:09,440
work

383
00:14:09,440 --> 00:14:11,839
after this work we continued to start

384
00:14:11,839 --> 00:14:13,920
studying this line of research

385
00:14:13,920 --> 00:14:15,600
and we designed the quick silver

386
00:14:15,600 --> 00:14:17,519
protocol which applies for both the

387
00:14:17,519 --> 00:14:20,079
circuit-based model and polynomial based

388
00:14:20,079 --> 00:14:20,880
model

389
00:14:20,880 --> 00:14:22,959
for the circuit based model the

390
00:14:22,959 --> 00:14:24,399
communication complexity

391
00:14:24,399 --> 00:14:28,079
is one field element per non-linear gate

392
00:14:28,079 --> 00:14:30,320
there is the huge improvement in both

393
00:14:30,320 --> 00:14:32,480
the computation and the communication

394
00:14:32,480 --> 00:14:35,120
we also designed the protocol to prove a

395
00:14:35,120 --> 00:14:36,959
set of polynomials

396
00:14:36,959 --> 00:14:39,199
uh we can prove t polynomials with

397
00:14:39,199 --> 00:14:42,079
communication complexity linear to

398
00:14:42,079 --> 00:14:44,800
m plus d and n is the size of the

399
00:14:44,800 --> 00:14:45,440
witness

400
00:14:45,440 --> 00:14:47,920
the d is the highest degree of the

401
00:14:47,920 --> 00:14:49,199
polynomials

402
00:14:49,199 --> 00:14:51,600
the communication cost is not related to

403
00:14:51,600 --> 00:14:58,079
the number of polynomials

