1
00:00:01,600 --> 00:00:05,439
hi I'm Yash, and i'll be speaking about 
my joint work with Bernardo Magri,  

2
00:00:05,440 --> 00:00:07,520
Claudio Orlandi, and Omer Shlomovits

3
00:00:09,200 --> 00:00:13,919
in this work we study proactive security 
where only a dishonest majority speaks  

4
00:00:13,920 --> 00:00:17,840
during the refresh phase and the rest stay 
offline and catch up at their own leisure

5
00:00:19,280 --> 00:00:24,000
we formalize the notion of unanimous erasure which 
we argue is the correct one for this setting,  

6
00:00:25,040 --> 00:00:29,040
and in the 2 of n setting we devise a 
novel protocol that's native to the mode  

7
00:00:29,040 --> 00:00:33,600
of operation for wallets and we show that 
it's practical even for threshold ecdsa

8
00:00:34,960 --> 00:00:38,080
in the t of n setting for any t greater than 2 we  

9
00:00:38,080 --> 00:00:43,839
show that it's unfortunately impossible to 
achieve this notion in any standard model

10
00:00:45,120 --> 00:00:51,040
right so let's say bob has some cryptocurrency 
that he would like to send over to Alice

11
00:00:51,040 --> 00:00:55,519
the way he does this is that he takes out his 
laptop on which there lives some signing key  

12
00:00:55,520 --> 00:00:59,520
he pushes a button and produces a signature 
under this key to attest to this fact

13
00:01:00,560 --> 00:01:04,160
if bob's laptop gets hacked an attacker could then  

14
00:01:04,160 --> 00:01:07,200
steal his signing key and 
divert his funds to herself

15
00:01:08,560 --> 00:01:12,000
one way that we could get around this 
is to have bob split his signing key  

16
00:01:12,000 --> 00:01:16,800
into fragments call them sk and sk prime, so 
that even if one of the fragments is stolen  

17
00:01:17,440 --> 00:01:19,759
the signing key in its entirety remains safe

18
00:01:21,200 --> 00:01:24,640
threshold signatures can achieve this notion where  

19
00:01:24,640 --> 00:01:28,400
each of the signing key fragments live 
on different devices and these devices  

20
00:01:28,400 --> 00:01:31,920
must collaborate in order to produce a 
signature under the common public key

21
00:01:32,880 --> 00:01:37,920
an important requirement is 
that the resulting signature  

22
00:01:37,920 --> 00:01:42,320
looks indistinguishable from one that is 
produced by the original signing algorithm

23
00:01:44,640 --> 00:01:48,000
for parameters a 3 of n 
signature scheme should allow  

24
00:01:48,000 --> 00:01:52,160
any three parties in the system to 
produce a signature collaboratively

25
00:01:52,720 --> 00:01:55,679
whereas any two parties should 
be unable to collude in order  

26
00:01:55,680 --> 00:01:58,240
to coerce a third into signing 
a message it doesn't want to

27
00:01:59,840 --> 00:02:01,760
so let's return to our friend bob from earlier

28
00:02:02,480 --> 00:02:05,600
the story doesn't end with the 
compromise of his secret key  

29
00:02:05,600 --> 00:02:07,839
or with the compromise of one of the devices

30
00:02:08,560 --> 00:02:13,120
let's say that the attacker steals his 
signing key fragment on his laptop on a Monday  

31
00:02:13,840 --> 00:02:18,880
and on a Tuesday bob resets his devices so 
that the attacker is kicked out of the laptop

32
00:02:18,880 --> 00:02:22,640
but unfortunately on Wednesday the 
attacker is able to break into his phone  

33
00:02:22,640 --> 00:02:24,959
and steals the other signing key fragment

34
00:02:24,960 --> 00:02:27,760
and now that the attacker has 
both halves of the signing key  

35
00:02:27,760 --> 00:02:31,359
she can forge arbitrary messages 
and this makes bob sad again

36
00:02:33,840 --> 00:02:38,320
so one way to get around this is the 
following: assume that the relation that  

37
00:02:38,320 --> 00:02:42,959
the key fragments have is that sk plus 
sk prime will yield the common secret x

38
00:02:44,480 --> 00:02:47,519
on Tuesday in addition to resetting his devices  

39
00:02:47,520 --> 00:02:52,160
bob also refreshes the shares of the 
signing key that these devices hold  

40
00:02:52,160 --> 00:02:58,400
that is he replaces them with sk_T and sk_T prime 
so that they both add up to the same secret x

41
00:02:59,680 --> 00:03:02,880
and on Wednesday he does 
the same thing so that now  

42
00:03:02,880 --> 00:03:06,160
on Wednesday when his phone gets 
hacked the attacker now gets  

43
00:03:06,160 --> 00:03:11,359
sk_W which is a share that only makes sense on 
wednesday and can't be combined with sk prime

44
00:03:11,920 --> 00:03:17,359
to see why this is the case let's block out the 
things that the attacker doesn't know and we  

45
00:03:17,360 --> 00:03:22,480
can now see that the attacker has two equations in 
three unknowns and so the signing key stays hidden

46
00:03:23,840 --> 00:03:28,320
this notion is called proactive security and 
was first conceived by Ostrovsky and Yung,  

47
00:03:28,320 --> 00:03:32,079
and has seen a variety-- a number of 
follow-ups in a variety of scenarios  

48
00:03:32,080 --> 00:03:35,920
such as those for asynchronous 
networks, threshold signatures,  

49
00:03:35,920 --> 00:03:39,359
in the dishonest majority setting, 
and even with dynamic committees

50
00:03:40,880 --> 00:03:43,120
so where's the gap in the 
literature, what do we address?  

51
00:03:44,240 --> 00:03:49,040
we observe that in all previous works in order 
to make progress, that is in order to run the  

52
00:03:49,040 --> 00:03:54,640
refresh phase either an honest majority must 
speak or everyone in the system comes online

53
00:03:55,840 --> 00:04:02,080
and this is not ideal for threshold wallets for 
instance because if we have the system configured  

54
00:04:02,080 --> 00:04:06,880
to have t people sign but twice as many to 
refresh this could be inconvenient because  

55
00:04:06,880 --> 00:04:12,720
there's a reason that the parameter t was chosen 
to begin with it also induces more risk because  

56
00:04:13,280 --> 00:04:18,160
now that the attacker knows that all the devices 
in the system or 2t devices of the system are  

57
00:04:18,160 --> 00:04:25,040
going to come online at the same time every 
day, it could introduce a new attack surface

58
00:04:27,120 --> 00:04:33,440
so in this work we study how to achieve 
proactivization where only a dishonest majority  

59
00:04:33,440 --> 00:04:40,320
needs to speak we show that the correct definition 
is quite subtle and we give a 2 of n threshold  

60
00:04:40,320 --> 00:04:45,920
signing protocol that achieves this notion in a 
way that is native to the way that wallets operate  

61
00:04:46,560 --> 00:04:50,800
and we show that for t greater than two this 
notion is unfortunately impossible to achieve

62
00:04:53,600 --> 00:04:59,680
coming to the definition we know from 
experience with MPC definitions that  

63
00:05:00,560 --> 00:05:06,960
when there's a dishonest majority involved it's 
impossible to guarantee progress and so a subtle  

64
00:05:06,960 --> 00:05:12,080
aspect of define-- finding the right notion is 
defining how the adversary can fail the protocol

65
00:05:15,040 --> 00:05:20,240
so for-- with some loss of generality let's assume 
that we're looking at a system that employs Shamir  

66
00:05:20,240 --> 00:05:26,960
sharing that is we start by choosing a random 
degree one polynomial over Zq, evaluating it  

67
00:05:26,960 --> 00:05:31,599
at a bunch of points, and giving each device 
in the system an evaluation of this polynomial  

68
00:05:31,600 --> 00:05:37,680
at one point and we define the evaluation of f 
as zero as the common secret the signing key sk

69
00:05:39,120 --> 00:05:44,000
this is a useful configuration because now 
we can sign with the two online devices  

70
00:05:44,640 --> 00:05:49,520
let's say the phone and the laptop and 
in case of some sort of error or a crash  

71
00:05:49,520 --> 00:05:56,560
we can bring the offline server back online and we 
can use its information to now recover the secret

72
00:06:00,400 --> 00:06:04,719
so to see how this works in the context of 
proactivization let's say on Monday everyone  

73
00:06:04,720 --> 00:06:10,560
has shares of polynomial f we will need that on 
Tuesday everyone has shares of a polynomial h  

74
00:06:10,560 --> 00:06:13,680
which is completely independent 
of f with the one constraint  

75
00:06:13,680 --> 00:06:17,280
that they both evaluate to the same 
value with zero that is the secret

76
00:06:19,440 --> 00:06:26,160
so offline refresh protocols should work as 
follows: they employ some sort of interactive  

77
00:06:26,160 --> 00:06:30,160
refresh phase on Monday between the offline 
device-- sorry between the online devices  

78
00:06:31,040 --> 00:06:35,040
and the online devices then send some sort 
of refresh package to the offline device

79
00:06:35,760 --> 00:06:42,400
and go on their merry way and when the offline 
device comes online it's able to read the refresh  

80
00:06:42,400 --> 00:06:47,840
package and apply the refresh so that it has 
a share on the same polynomial h on Tuesday

81
00:06:48,960 --> 00:06:50,000
and this is a success

82
00:06:51,760 --> 00:06:55,520
right so the tricky part is 
defining how failures happen

83
00:06:55,520 --> 00:07:00,159
so let's say that the among the two 
online parties one of them is corrupt  

84
00:07:00,160 --> 00:07:03,680
and decides to fail the protocol-- 
the refresh procedure on Monday  

85
00:07:03,680 --> 00:07:07,040
and and so on Tuesday both online 
parties still have shares of f

86
00:07:08,320 --> 00:07:14,880
but it could be possible for this attacker to send 
some sort of package to the offline device (the  

87
00:07:14,880 --> 00:07:20,080
server in this case) that induces it to, when it 
wakes up, delete its share of f and move to some  

88
00:07:20,800 --> 00:07:27,120
polynomial h, to some value h3 so 
notice that this doesn't really harm  

89
00:07:28,000 --> 00:07:34,160
unforgeability, that is this the secret 
that's encoded in f and h stay hidden  

90
00:07:34,160 --> 00:07:37,200
so the signature scheme that's built on 
top of this would still be unforgeable  

91
00:07:38,640 --> 00:07:43,919
but this creates another problem, that is the same 
device could still be compromised on tuesday which  

92
00:07:43,920 --> 00:07:49,840
means that f2 is basically inaccessible and f1 
and h3 when combined don't really make sense

93
00:07:51,040 --> 00:07:53,360
so this means that the secret key is lost forever

94
00:07:55,040 --> 00:08:00,560
so what we want-- and this could be quite 
bad because in many scenarios this could  

95
00:08:00,560 --> 00:08:04,640
even mean a loss of funds that are tied 
to the public key for the account--

96
00:08:06,000 --> 00:08:11,760
so what we want is for parties to be in 
agreement that is honest parties should always  

97
00:08:11,760 --> 00:08:16,560
be in agreement about whether to erase their 
shares and move to a new sharing or whether the  

98
00:08:17,920 --> 00:08:25,840
refresh procedure failed and so they must retain 
their old shares we call this unanimous erasure

99
00:08:27,440 --> 00:08:30,960
now we construct a protocol that achieves 
this notion in the two of n setting

100
00:08:32,480 --> 00:08:36,720
so the flavour of the problem is as follows 
point-to-point channels can convey information  

101
00:08:36,720 --> 00:08:40,960
privately but can't be verified while public 
channels achieve the exact opposite properties

102
00:08:41,520 --> 00:08:44,800
so our approach is to use the 
point to point channels to convey  

103
00:08:44,800 --> 00:08:49,120
private refresh information and the ledger to 
achieve consensus on whether or not to use them

104
00:08:50,640 --> 00:08:54,000
intuitively we're going to link the 
public and private channels by the  

105
00:08:54,000 --> 00:08:57,920
nonces of the threshold signature and our new 
technique of interleaved threshold signing

106
00:08:59,840 --> 00:09:04,400
so a quick recap of ECDSA and Schnorr signatures, 
they're both based on the hardness of the discrete  

107
00:09:04,400 --> 00:09:13,760
logarithm problem and their public keys comprise 
a group element X which is a point on the curve  

108
00:09:13,760 --> 00:09:20,160
--and a scalar-- the discrete log of which 
is lowercase x which is a scalar in Zq  

109
00:09:20,160 --> 00:09:26,640
and signatures are of the form R comma sigma where 
again R is a curve point and sigma is some scalar  

110
00:09:27,600 --> 00:09:30,000
the important thing is that r is a random nonce

111
00:09:32,160 --> 00:09:37,520
so many threshold ECDSA and Schnorr protocols 
have this nice property in that they can be  

112
00:09:39,840 --> 00:09:42,400
they can be separated into two distinct phases

113
00:09:42,400 --> 00:09:47,840
in phase one this nonce R is produced and in phase 
two the signature is completed to produce sigma

114
00:09:49,440 --> 00:09:55,200
and they have this interesting property where if 
an attacker were to abort the protocol immediately  

115
00:09:55,200 --> 00:10:01,920
after phase one and not run phase two then 
the the induced signature that is the sigma  

116
00:10:02,720 --> 00:10:08,000
that would verify for this nonce R remains 
inaccessible that is the the adversary has  

117
00:10:08,000 --> 00:10:14,240
no advantage in computing the sigma that 
would be the full signature for this nonce R

118
00:10:15,520 --> 00:10:19,280
and this is achieved by most natural 
threshold Schnorr and ECDSA schemes

119
00:10:20,640 --> 00:10:30,000
so collapsing these two phases and into blocks our 
idea is to include some new-- is to generate the  

120
00:10:30,000 --> 00:10:35,440
refresh information in the gap between phases one 
and two that is the refresh information is sigma  

121
00:10:35,440 --> 00:10:41,600
and-- sorry this refresh information is delta and 
we also compute some authentication information  

122
00:10:42,160 --> 00:10:47,000
that binds this delta with this 
R that was created in phase one

123
00:10:47,600 --> 00:10:49,680
so let's put this into its own phase

124
00:10:50,880 --> 00:10:57,200
so the refresh procedure will be as follows: 
the parties run phase one to produce the nonce  

125
00:10:57,200 --> 00:11:04,640
r and then the refresh package will include 
R, delta, and the signature binding them

126
00:11:05,440 --> 00:11:10,000
and then the parties finish running phase two 
to produce the signature itself and then post  

127
00:11:10,000 --> 00:11:16,080
the transaction on the ledger the important 
thing is that the online parties agree to  

128
00:11:16,960 --> 00:11:20,480
complete the refresh procedure and 
apply the update that they just  

129
00:11:20,480 --> 00:11:26,000
generated only after the transaction and the 
corresponding signature appear on the ledger

130
00:11:26,000 --> 00:11:29,936
that is the the important 
thing to match is the nonce R

131
00:11:29,936 --> 00:11:36,400
so when the offline party comes online it 
is going to see-- it is going to wait for  

132
00:11:36,400 --> 00:11:41,840
the nonce R to appear on the ledger 
before before applying this update

133
00:11:43,600 --> 00:11:48,240
and when i say that this is native to the mode of 
operation what i mean is that the transaction is  

134
00:11:48,240 --> 00:11:52,640
unmodified and the signature was also unmodified 
and it's going to go on the ledger anyway

135
00:11:54,400 --> 00:11:58,079
so let's see what power an 
attacker has in this protocol

136
00:11:58,880 --> 00:12:01,280
the attacker could choose to abort the protocol  

137
00:12:01,280 --> 00:12:05,280
after getting just the refresh package 
delta and before running phase two

138
00:12:06,400 --> 00:12:10,000
what this means is that the ledger is 
never going to receive a valid signature  

139
00:12:10,000 --> 00:12:11,920
under R that was created in phase one

140
00:12:13,600 --> 00:12:17,280
right and this means that this refresh 
package is now benign it's useless  

141
00:12:17,280 --> 00:12:20,480
because the adversary has no information in  

142
00:12:20,480 --> 00:12:24,320
completing the signature and so the signature 
is never going to appear on the ledger

143
00:12:26,160 --> 00:12:32,319
the adversary could alternatively finish 
phases one and the refresh package generation  

144
00:12:32,320 --> 00:12:38,000
and complete phase two and keep the signature for 
itself depriving the honest party of the signature

145
00:12:38,000 --> 00:12:43,680
so there are two cases now in the first case the 
adversary could just decide never to post the  

146
00:12:44,240 --> 00:12:48,160
signature on the ledger and this is 
fine because again the refresh package  

147
00:12:48,160 --> 00:12:52,160
is never going to be used by either the 
online honest party or the offline party

148
00:12:52,880 --> 00:12:57,200
and the other case the adversary could actually 
post the transaction and the signature on the  

149
00:12:57,200 --> 00:13:01,760
ledger and this is fine because this is 
almost identical to the honest use case  

150
00:13:02,320 --> 00:13:07,680
because both parties are going to 
delete their old shares and move on  

151
00:13:07,680 --> 00:13:11,359
and apply the refresh package and 
so now we have unanimous erasure

152
00:13:13,680 --> 00:13:21,199
we implement this proactivization scheme to 
proactivize an existing 2 of n threshold ECDSA  

153
00:13:21,200 --> 00:13:29,200
protocol thanks to Jack Doerner for this and also 
threshold ECDSA is more complicated than threshold  

154
00:13:29,200 --> 00:13:34,160
Schnorr it needs some additional machinery 
for multiplication and so we also have to  

155
00:13:34,160 --> 00:13:40,240
construct some multiplier state refresh 
protocols which you'll find in the paper

156
00:13:41,360 --> 00:13:45,680
our experiments showed that there's 
very reasonable overhead for both  

157
00:13:45,680 --> 00:13:47,839
computation and network costs

158
00:13:50,400 --> 00:13:53,680
that's it and for any t greater than two  

159
00:13:54,240 --> 00:13:57,520
unfortunately it turns out that 
this notion is impossible to achieve

160
00:13:58,800 --> 00:14:05,199
it-- there are many details involved and i 
would refer you to the paper to find out more

161
00:14:07,520 --> 00:14:13,360
additionally the paper as i said has more details 
on how to construct the machinery to refresh  

162
00:14:13,920 --> 00:14:16,000
the rest of threshold ECDSA

163
00:14:16,000 --> 00:14:20,240
if you're familiar with beaver's trick for 
rerandomizing OT correlations that's how we do it

164
00:14:21,920 --> 00:14:24,240
and also we have more detailed benchmarks  

165
00:14:25,680 --> 00:14:31,040
for threshold ECDSA and there's a lot of 
nuance in finding the correct definition  

166
00:14:31,040 --> 00:14:35,439
which we discussed in the paper and of course 
we have proofs for all of these statements

167
00:14:37,360 --> 00:14:41,680
thank you for your attention please 
find our paper online which also has  

168
00:14:41,680 --> 00:14:47,040
links to our implementation. thanks!

