1
00:00:00,960 --> 00:00:06,400
Hello everyone, my name is Itay Tsabary 
and I'll present our work titled "MAD-HTLC:  

2
00:00:06,400 --> 00:00:08,480
Because HTLC is Crazy-Cheap to Attack".

3
00:00:09,760 --> 00:00:12,960
HTLCs are smart contracts used 
in many cryptocurrency systems,  

4
00:00:12,960 --> 00:00:14,080
like the Lightning network.

5
00:00:14,720 --> 00:00:18,320
However, they are known to be vulnerable 
to miner bribery attacks on Ethereum.

6
00:00:19,280 --> 00:00:23,360
In this work, we show these attacks are 
simpler, cheaper, and apply even to Bitcoin.

7
00:00:23,920 --> 00:00:30,320
We also propose a solution -- MAD-HTLC, which 
is practical, secure, and incentive-compatible.

8
00:00:30,320 --> 00:00:34,320
This is joint work with Matan Yechieli, 
Alex Manuskin, and Ittay Eyal.

9
00:00:34,320 --> 00:00:35,440
I'll start with some background.

10
00:00:38,320 --> 00:00:44,080
So, cryptocurrency systems facilitate transactions 
of internally-minted tokens among their users.

11
00:00:44,080 --> 00:00:46,160
They use the blockchain as 
the main data structure.

12
00:00:47,040 --> 00:00:51,280
These systems are operated by miners-- 
they include transactions in blocks,  

13
00:00:51,280 --> 00:00:53,040
and in return, receive transaction fees.

14
00:00:54,000 --> 00:00:57,520
The miners are incentivized to 
optimize their transaction choices;  

15
00:00:57,520 --> 00:01:00,880
we call these optimizations 
miner extractable value.

16
00:01:00,880 --> 00:01:03,360
The system tokens are associated with contracts.

17
00:01:03,360 --> 00:01:05,760
These are predicates 
evaluated on transaction data.

18
00:01:06,480 --> 00:01:09,360
A valid transaction must satisfy 
the contract's predicate.

19
00:01:10,080 --> 00:01:13,360
We say a transaction redeems an 
input contract once it's confirmed,  

20
00:01:13,360 --> 00:01:15,600
and each contract can be redeemed only once.

21
00:01:17,680 --> 00:01:23,120
Hash time lock contracts, HTLCs, are contracts 
established by two users, Antman and Batman.

22
00:01:23,680 --> 00:01:28,000
They include a cryptographic hash function's 
output and a timeout T, measured in blocks.

23
00:01:29,200 --> 00:01:33,200
HTLCs are the basic building block 
for many cryptocurrency constructions,  

24
00:01:33,200 --> 00:01:37,200
like off-chain payment channels, atomic 
swaps, contingent payments, and so on.

25
00:01:38,160 --> 00:01:42,320
The HTLC predicate states that 
Antman can get the tokens by  

26
00:01:42,320 --> 00:01:47,279
revealing a matching preimage, or that Batman 
can get the tokens after the timeout elapses.

27
00:01:48,000 --> 00:01:51,120
We refer to these as a hash-lock 
and a time-lock, respectively.

28
00:01:53,040 --> 00:01:56,320
So, consider an HTLC initiated on block X.

29
00:01:57,120 --> 00:02:03,040
Batman can get its tokens starting only at block 
X+T, and only if they hadn't been taken yet.

30
00:02:04,240 --> 00:02:07,839
Recall the miners are those who pick which 
transaction's included, and in which block.

31
00:02:11,120 --> 00:02:14,800
The cryptocurrency constructions that 
use HTLCs make the following assumption:  

32
00:02:15,600 --> 00:02:18,960
If Antman publishes a redeeming 
transaction before the timeout,  

33
00:02:18,960 --> 00:02:22,000
then that transaction is indeed 
included in the blockchain.

34
00:02:22,000 --> 00:02:25,840
There is a known issue here -- this 
assumption neglects miners' incentives,  

35
00:02:25,840 --> 00:02:27,920
specifically, their MEV optimizations.

36
00:02:29,040 --> 00:02:32,799
This misalignment opens a bribery 
attack opportunity for Batman.

37
00:02:32,800 --> 00:02:36,880
He can bribe the miners to exclude Antman's 
transaction until the timeout elapses,  

38
00:02:37,680 --> 00:02:39,600
and then to include his transaction instead.

39
00:02:40,640 --> 00:02:45,040
As an example, assume the HTLC 
contract holds five tokens,  

40
00:02:45,040 --> 00:02:48,720
and Antman's transaction 
offers a single token as a fee.

41
00:02:49,680 --> 00:02:52,880
In the intended scenario, the 
miners include Antman's transaction,  

42
00:02:52,880 --> 00:02:56,720
so Antman gets four tokens, Batman 
gets none, and the miners get one.

43
00:02:57,760 --> 00:03:01,840
However, if Batman decides to offer 
a higher payout, say two tokens,  

44
00:03:02,400 --> 00:03:05,040
then the miners are incentivized 
to take his transaction instead,  

45
00:03:05,680 --> 00:03:09,440
resulting with two tokens for them, 
three for Batman, and none for Antman.

46
00:03:11,760 --> 00:03:15,440
Winzer et al. suggested coordinating a 
bribery attack using smart contracts.

47
00:03:16,480 --> 00:03:19,440
Their suggestion applies only 
to Ethereum, but not a Bitcoin.

48
00:03:20,320 --> 00:03:24,239
It also requires prior deployment, meaning the 
attack has costs regardless of its success.

49
00:03:25,200 --> 00:03:29,679
They analyzed the required bribe to incentivize 
a single miner to support the attack, and show  

50
00:03:29,680 --> 00:03:34,080
that if all other miners also support the attack 
then that cost is independent in the timeout T.

51
00:03:34,960 --> 00:03:37,200
However, if some miners do not support the attack,  

52
00:03:37,200 --> 00:03:39,440
then the required cost is 
exponential in the timeout.

53
00:03:40,400 --> 00:03:42,640
This suggests that longer 
timeouts can mitigate these  

54
00:03:42,640 --> 00:03:45,839
attacks by making them too expensive to execute.

55
00:03:46,800 --> 00:03:48,880
In this work we present a 
simpler attack variation.

56
00:03:49,520 --> 00:03:51,760
We also tighten the result 
regarding the attack cost,  

57
00:03:51,760 --> 00:03:54,720
showing it is independent in the 
timeout if all miners are rational.

58
00:03:55,600 --> 00:03:58,799
Our variation does not require 
a coordination smart contract,  

59
00:03:58,800 --> 00:04:01,040
but simply uses the transaction fee mechanism.

60
00:04:01,760 --> 00:04:05,920
This makes it Bitcoin compatible, and it 
means it requires no prior deployment,  

61
00:04:05,920 --> 00:04:08,000
and therefore has no cost if the attack fails.

62
00:04:09,280 --> 00:04:12,320
For the analysis, we consider the 
game played by all involved parties:  

63
00:04:12,320 --> 00:04:14,320
Antman, Batman and the miners.

64
00:04:14,320 --> 00:04:18,000
We consider rounds, or sub-games, 
describing the creation of the T blocks.

65
00:04:18,959 --> 00:04:23,039
The suitable solution concept for this 
game is subgame perfect equilibrium.

66
00:04:23,040 --> 00:04:24,800
This captures the ongoing decision making  

67
00:04:24,800 --> 00:04:27,840
that all involved parties make 
throughout the game progress.

68
00:04:28,720 --> 00:04:32,640
As an example for SPE analysis, 
consider a game of Tic Tac Toe.

69
00:04:33,440 --> 00:04:37,920
To decide the best action in each turn, the 
player simulates all possible game extensions,  

70
00:04:37,920 --> 00:04:42,400
considers the possible outcomes, and chooses 
the action that leads to the desired result.

71
00:04:43,600 --> 00:04:47,760
Subgame perfect equilibrium is when each player 
is satisfied with the action in each step.

72
00:04:48,560 --> 00:04:52,320
This analysis technique is called 
"backward induction"-- the game results are  

73
00:04:52,320 --> 00:04:55,840
recursively propagated back to the decision point.

74
00:04:57,920 --> 00:05:00,800
Our analysis shows that the 
required bribe is independent in T.

75
00:05:01,520 --> 00:05:04,719
This means that increasing the time 
does not make the attack more expensive.

76
00:05:05,680 --> 00:05:08,800
We also found out multiple instances 
on the Bitcoin network where the  

77
00:05:08,800 --> 00:05:10,880
attack is extremely cheap and highly profitable.

78
00:05:11,600 --> 00:05:15,600
For example, we found several 
HTLCs holding over 26,000 dollars,  

79
00:05:15,600 --> 00:05:17,600
while the required attack costs are only 2.

80
00:05:18,960 --> 00:05:22,159
I should mention that although the 
simplicity and the high profitability,  

81
00:05:22,160 --> 00:05:25,440
we are not aware of this attack 
taking place on Bitcoin as of today.

82
00:05:26,160 --> 00:05:29,680
This is probably due to that current 
MEV optimizations are still immature.

83
00:05:30,800 --> 00:05:35,600
So even though today's miners do not optimize 
for this, that's hardly something to rely on,  

84
00:05:35,600 --> 00:05:37,840
and the obvious question is 
whether we can prevent this attack.

85
00:05:38,640 --> 00:05:41,039
For example, what if Antman counter-bribes?

86
00:05:42,000 --> 00:05:45,040
Well, in this case, Batman 
can counter-counter-bribe,  

87
00:05:45,040 --> 00:05:46,880
and so forth, resulting in a bidding war.

88
00:05:47,520 --> 00:05:51,840
Our analysis shows there is an asymmetry here, 
and that Antman can win this bidding war with a  

89
00:05:51,840 --> 00:05:55,359
fee linear in the secured amount -- 
about %1 for realistic parameters.

90
00:05:56,400 --> 00:05:57,520
But this is very expensive.

91
00:05:58,240 --> 00:06:02,640
Going back to the previous example, 
Antman would have needed a 260 dollar fee,  

92
00:06:02,640 --> 00:06:05,840
which is 10,000 times more than 
what you originally offered.

93
00:06:06,560 --> 00:06:09,040
So, counter bribes are not practical.

94
00:06:09,040 --> 00:06:12,320
We need a systematic solution to 
this problem -- we present MAD-HTLC.

95
00:06:16,000 --> 00:06:20,320
Recall the problem is that HTLC 
doesn't consider miner incentives.

96
00:06:20,320 --> 00:06:21,920
So, let's not do that anymore,  

97
00:06:21,920 --> 00:06:25,360
but actually use them to enforce the 
desired execution and to deter attacks.

98
00:06:26,640 --> 00:06:29,120
Here's a quick overview for 
the remainder of this talk.

99
00:06:30,080 --> 00:06:34,479
First, I'll detail the MAD-HTLC contract, and 
the security and incentive compatibility proofs.

100
00:06:35,280 --> 00:06:37,760
Then, I'll discuss our Bitcoin 
and Ethereum implementations,  

101
00:06:37,760 --> 00:06:40,640
and what happened when we deployed 
them on the main networks.

102
00:06:41,280 --> 00:06:43,760
Finally, I'll present our 
Bitcoin MEV infrastructure.

103
00:06:45,520 --> 00:06:48,880
The design principle of MAD-HTLC 
is "mutual assured destruction".

104
00:06:49,600 --> 00:06:53,520
This is a notion from game theory, 
detailing a scenario where two parties  

105
00:06:53,520 --> 00:06:57,200
refrain from attacking each other, as doing 
so will result with both of them losing.

106
00:06:57,920 --> 00:06:59,600
This is a deterrence mechanism,  

107
00:06:59,600 --> 00:07:03,680
and in MAD-HTLC, if either Antman or 
Batman misbehaves then they both lose.

108
00:07:05,600 --> 00:07:10,480
The contract itself comprises two sub-contracts: 
the Deposit, which carries the main HTLC  

109
00:07:10,480 --> 00:07:15,840
functionality, and the Collateral, which is 
optional, and used only to prevent spitefulness.

110
00:07:16,640 --> 00:07:19,280
The separation is only for Bitcoin compatibility,  

111
00:07:19,280 --> 00:07:21,679
but the subcontracts can be 
consolidated on Ethereum.

112
00:07:22,320 --> 00:07:25,935
The contracts use a time lock, and two hash 
locks, denoted by hash-lock-1 and hash-lock-2.

113
00:07:25,935 --> 00:07:26,000
The time-lock is just like 
the original HTLC time lock,

114
00:07:26,000 --> 00:07:31,920
and hash-lock-1 is just like 
the original hash lock in HTLC.

115
00:07:31,920 --> 00:07:36,240
However, hash-lock-2 is an 
addition for this contract.

116
00:07:37,760 --> 00:07:43,760
The deposit predicate is as follows: either Antman 
gets the tokens by solving the first hash lock.

117
00:07:43,760 --> 00:07:45,520
This is just like the original HTLC.

118
00:07:46,880 --> 00:07:50,240
Or, Batman gets the tokens by 
waiting for the timeout to elapse,  

119
00:07:50,240 --> 00:07:54,880
like in the original HTLC, but now he also must 
provide the preimage for the second hash lock.

120
00:07:56,080 --> 00:08:01,560
Alternatively, anyone can get the tokens by 
providing the two preimages for both hash locks.

121
00:08:02,480 --> 00:08:05,280
When I say anyone, I actually mean any miner.

122
00:08:05,280 --> 00:08:08,239
If a miner sees a transaction 
that reveals both primages,  

123
00:08:08,240 --> 00:08:11,120
she can just create a transaction of 
her own, and take the tokens herself.

124
00:08:11,680 --> 00:08:13,440
This is actually an MEV opportunity.

125
00:08:14,720 --> 00:08:18,240
The collateral predicate uses the same 
lock parameters, but it is a bit different.

126
00:08:18,960 --> 00:08:22,400
Either Batman gets the 
tokens after the timeout, or,  

127
00:08:22,400 --> 00:08:26,000
any miner can get the tokens after the 
timeout by presenting the two preimages.

128
00:08:26,800 --> 00:08:30,480
I'll now show you why MAD-HTLC is 
both secure and incentive-compatible.

129
00:08:32,640 --> 00:08:35,600
Our first step is to list the 
possible interactions that Antman,  

130
00:08:35,600 --> 00:08:38,080
Batman and the miners can 
have with a MAD-HTLC instance.

131
00:08:38,720 --> 00:08:42,480
These include the creation, the initiation, 
and the redeeming of the contract.

132
00:08:43,520 --> 00:08:48,480
For example, we consider that redeeming using 
a hash lock requires the redeeming party to  

133
00:08:48,480 --> 00:08:52,480
have the matching preimage beforehand,
or that miners initially do not have  

134
00:08:52,480 --> 00:08:55,440
the preimages and can only learn them if 
they're published by a different party.

135
00:08:57,440 --> 00:09:00,320
Now we prove these are indeed 
the only possible interactions.

136
00:09:00,320 --> 00:09:04,560
So, we define an ideal functionality 
F detailing them in an ideal world.

137
00:09:05,280 --> 00:09:06,720
We then define a protocol Pi  

138
00:09:06,720 --> 00:09:10,640
that states how a MAD-HTLC instance's 
created, initiated, and redeemed.

139
00:09:11,840 --> 00:09:14,160
This protocol uses the hash 
function and the blockchain,  

140
00:09:14,160 --> 00:09:16,079
which model as global ideal functionalities.

141
00:09:16,800 --> 00:09:19,599
So, we consider the protocol Pi in a hybrid world.

142
00:09:20,480 --> 00:09:22,560
The last step is showing the the hybrid world with  

143
00:09:22,560 --> 00:09:25,520
protocol Pi and the ideal world with 
functionality F are indistinguishable.

144
00:09:28,160 --> 00:09:31,040
The possible interactions with 
the contract give rise to a game,  

145
00:09:31,040 --> 00:09:33,599
played by Antman, Batman, and miners.

146
00:09:33,600 --> 00:09:37,920
We use subgame perfect equilibrium analysis, 
and show MAD-HTLC is incentive compatible. 

147
00:09:37,920 --> 00:09:40,400
This means that no party gains by deviating.

148
00:09:40,400 --> 00:09:41,360
I'll give some intuition.

149
00:09:42,640 --> 00:09:45,040
Consider that only one preimage is published.

150
00:09:45,040 --> 00:09:48,319
Then, the miners do not know the other 
preimage, and can't get the tokens.

151
00:09:48,880 --> 00:09:50,720
This scenario matches the intended behavior.

152
00:09:51,920 --> 00:09:56,640
However, if both preimages are published, 
miners will simply take the tokens themselves.

153
00:09:57,360 --> 00:09:59,920
This scenario describes either 
Antman or Batman attacking.

154
00:10:02,000 --> 00:10:07,280
Also, note that if Antman publishes his preimage 
then Batman is unable to get the deposit tokens.

155
00:10:08,160 --> 00:10:11,120
So, a spiteful Batman might just 
publish the second preimage anyway.

156
00:10:11,760 --> 00:10:14,319
This is where the optional 
collateral contract comes into play--  

157
00:10:14,880 --> 00:10:18,800
if Batman does so, he lose the collateral 
tokens, and if not, he will get to keep them.

158
00:10:19,440 --> 00:10:22,480
I'll now present some implementations 
and main network experiments.

159
00:10:25,760 --> 00:10:29,439
We implement MAD-HTLC using Script 
for Bitcoin and Solidity for Ethereum.

160
00:10:30,480 --> 00:10:33,600
MAD-HTLC is slightly more 
complex than the original HTLC,  

161
00:10:33,600 --> 00:10:35,920
so the interacting transactions 
are slightly more expensive.

162
00:10:36,640 --> 00:10:38,800
In Bitcoin, the additional 
costs are about a few dollars.

163
00:10:39,680 --> 00:10:43,439
For Ethereum, the basic implementation 
has a 150 dollars overhead,  

164
00:10:43,440 --> 00:10:46,560
but this can be reduced to about 10 
dollars for an amortized version.

165
00:10:48,560 --> 00:10:51,359
Please note the overhead is 
independent in the secured amounts,  

166
00:10:51,360 --> 00:10:52,800
which can be thousands of dollars.

167
00:10:53,520 --> 00:10:56,480
Taking as an example the 26,000 
dollars Bitcoin contract,  

168
00:10:57,200 --> 00:11:01,440
5 dollars are way cheaper than the 260 
required for the HTLC counter bribe.

169
00:11:02,480 --> 00:11:04,640
I'll also mention that for 
off-chain payment channels,  

170
00:11:04,640 --> 00:11:09,280
the HTLC, or the MAD-HTLC, is only used 
when unilaterally closing the channel.

171
00:11:10,000 --> 00:11:13,360
This is not the general case, and happens 
only if one of the parties is trying to  

172
00:11:13,360 --> 00:11:18,080
cheat or becomes irresponsive, so even this low 
overhead is incurred only if there is a dispute.

173
00:11:20,720 --> 00:11:23,760
We deployed MAD-HTLC on Bitcoin 
and Ethereum main networks.

174
00:11:23,760 --> 00:11:27,840
On Ethereum, some of our transactions 
were front-run, showcasing MEV in action.

175
00:11:28,560 --> 00:11:31,199
This is expected, as MEV 
on Ethereum is widespread.

176
00:11:31,920 --> 00:11:34,719
On Bitcoin however, all our 
transactions were confirmed.

177
00:11:34,720 --> 00:11:37,600
We didn't observe any related MEV optimizations.

178
00:11:39,440 --> 00:11:43,280
So why don't we see MEV on Bitcoin yet?
Is it because it's too hard?

179
00:11:43,280 --> 00:11:46,319
We show this is not the case by patching 
the popular Bitcoin Core client.

180
00:11:47,520 --> 00:11:52,880
Our first patch is to support the HTLC bribe 
attack, requiring only 150 lines of code.

181
00:11:52,880 --> 00:11:56,480
The code identifies Batman's 
bribe, delays Antman's transaction,  

182
00:11:56,480 --> 00:11:59,440
and includes Batman's transaction 
after the timeout elapses.

183
00:12:00,720 --> 00:12:05,840
We also created a general MEV infrastructure-- 
using RPCs, it exports transaction data to an  

184
00:12:05,840 --> 00:12:09,840
outer Python module, where one can 
implement any MEV logic of choice.

185
00:12:10,560 --> 00:12:13,839
For example, we implemented the 
MAD-HTLC enforcement logic--  

186
00:12:13,840 --> 00:12:17,200
a miner looking for published preimages 
and creating a transaction of her own.

187
00:12:18,000 --> 00:12:20,320
This patch required 350 lines of code.

188
00:12:21,120 --> 00:12:24,320
To conclude: HTLCs are 
vulnerable on Bitcoin as well,  

189
00:12:24,320 --> 00:12:27,120
the required bribes are cheap, 
and the potential reward is high.

190
00:12:27,760 --> 00:12:31,040
The attack relies on MEV, 
which is easily implementable,  

191
00:12:31,040 --> 00:12:32,959
and simply increasing the timeout does not help.

192
00:12:33,520 --> 00:12:35,280
We introduce MAD-HTLC:  

193
00:12:35,280 --> 00:12:39,120
a simple plug-in replacement with minor 
overhead compared to the secured amounts.

194
00:12:39,120 --> 00:12:42,800
It is secure and incentive-compatible, 
it's easily supported by the miners,  

195
00:12:42,800 --> 00:12:44,160
and its code is available online.

196
00:12:44,800 --> 00:12:46,448
Thank you :-)

