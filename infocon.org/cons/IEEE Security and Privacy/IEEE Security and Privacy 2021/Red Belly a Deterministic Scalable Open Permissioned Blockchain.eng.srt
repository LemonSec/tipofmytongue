1
00:00:00,000 --> 00:00:03,000
I am happy to present you Red Belly Blockchain at Oakland’21 today.

2
00:00:04,000 --> 00:00:08,000
I will be more than happy to answer your questions after this video presentation.

3
00:00:09,000 --> 00:00:12,000
This is joint work with Tyler Crain and Chris Natoli.

4
00:00:12,500 --> 00:00:18,000
My name is Vincent Gramoli and this work was done at the University of Sydney and CSIRO's Data61

5
00:00:19,000 --> 00:00:23,000
So the goal of this talk is to ensure security, but what do we mean by "security"?

6
00:00:23,000 --> 00:00:29,000
We want to ensure that if we have machines proposing distinct blocks to the blockchain, 

7
00:00:30,000 --> 00:00:33,500
then they will not be appended at the same index of the chain.

8
00:00:34,000 --> 00:00:41,000
Because otherwise we could have conflicting transactions in a fork.

9
00:00:41,100 --> 00:00:45,000
And if this fork remains for long enough we have a "double spending".

10
00:00:46,000 --> 00:00:51,000
Instead we would like to ensure that all machines reach a consensus

11
00:00:51,000 --> 00:00:55,900
about the uniqueness of the block at each index of the blockchain.

12
00:00:57,000 --> 00:01:04,000
We would like to reach consensus despite arbitrary (or Byzantine) failures...

13
00:01:06,000 --> 00:01:14,000
and despite unexpected delays.

14
00:01:15,000 --> 00:01:23,000
We want to ensure optimal resilience, so we have to tolerate any f=n/3-1 Byzantine processes.

15
00:01:25,000 --> 00:01:34,900
We would also like to ensure fairness such that if a malicious user sends infinitely many transactions, 

16
00:01:35,000 --> 00:01:39,000
then the transaction of the correct user can still be committed.

17
00:01:40,000 --> 00:01:50,000
This property offers censorship resistance and is stronger than blockchain liveness 

18
00:01:50,100 --> 00:01:54,000
that reasons about transactions received by the system.

19
00:01:55,000 --> 00:01:58,000
Here we ensure that a transaction *sent* by the client will be committed.

20
00:01:59,000 --> 00:02:02,000
Finally we want to ensure scalability.

21
00:02:02,000 --> 00:02:08,000
And by that we don't mean 100s of transactions per second (TPS) for 100s of nodes.

22
00:02:09,000 --> 00:02:14,000
We especially don't want that the performance degrades with the system size,

23
00:02:16,000 --> 00:02:22,000
Neither do we want a low throughput maintained as the system size increases.

24
00:02:24,000 --> 00:02:31,500
But we want to have higher throughput as we leverage more resources.

25
00:02:32,000 --> 00:02:39,000
And we expect reaching 1000s of transactions per second at 100s of nodes.

26
00:02:41,000 --> 00:02:44,000
This summarises the three goals we want to achieve.

27
00:02:45,000 --> 00:02:53,000
And before explaining you the contributions, I would like to talk about the context.

28
00:02:54,000 --> 00:02:57,000
You might have heard about the "permissionless" context 

29
00:02:58,000 --> 00:03:04,000
where participants, represented as black dots here, can propose their block to the blockchain.

30
00:03:06,000 --> 00:03:10,000
They don't need permission for their block to be appended.

31
00:03:13,500 --> 00:03:21,000
Similarly, they can issue transactions that can be included in one block.

32
00:03:22,000 --> 00:03:30,000
But all nodes are usually incentivised to propose their block, which is a waste of resources.

33
00:03:30,000 --> 00:03:32,000
So we don't want this model.

34
00:03:33,000 --> 00:03:35,000
You might be familiar with the "permissioned" model.

35
00:03:36,000 --> 00:03:42,000
Where only a subset of nodes have the permission to propose a block that will be appended.

36
00:03:42,000 --> 00:03:48,000
But those that don't have the permission will never have their block appended.

37
00:03:49,000 --> 00:03:57,000
Same thing for transactions: only the nodes with permissions can issue transactions.

38
00:03:59,000 --> 00:04:05,000
So we don't want this model either, because if the permissions are statically defined, then it looks like a centralised system.

39
00:04:06,000 --> 00:04:10,000
We prefer an "open" model:

40
00:04:12,000 --> 00:04:21,000
Nodes don't need permission to send transactions that will be included if correctly signed and non-conflicting.

41
00:04:22,000 --> 00:04:33,000
But we restrict the block decisions to a subset of nodes with temporary permissions that can be given to other nodes.

42
00:04:37,000 --> 00:04:40,000
So any node could decide some block,

43
00:04:41,000 --> 00:04:49,000
a model similar to "community blockchain" between public and consortium/private blockchains.

44
00:04:55,000 --> 00:04:58,900
The first contribution is to remove the leader to achieve fairness.

45
00:04:59,500 --> 00:05:14,900
Most of the BFT consensus protocols have a special replica, the leader, that imposes its proposal.

46
00:05:15,000 --> 00:05:20,000
The replicas have to forward the requests to the leader.

47
00:05:28,000 --> 00:05:32,000
If the leader does not succeed, another leader is elected, and so on.

48
00:05:33,000 --> 00:05:50,000
We propose to rely on the Democratic BFT (DBFT) consensus where each replica can propose directly.

49
00:05:55,000 --> 00:06:05,000
For details you can look at the paper, but note that we use the age of a transaction to propose it.

50
00:06:07,000 --> 00:06:20,000
The age is the time spent in the mempool. The eldest transactions get proposed first, to ensure fairness.

51
00:06:22,000 --> 00:06:32,000
The second contribution is to decide a superblock for the BFT consensus to scale.

52
00:06:36,000 --> 00:06:40,000
First, note that the leader can bottleneck as the system size increases.

53
00:06:41,000 --> 00:07:05,000
Traditional BFT consensus were efficient for LANs on 4 machines but cannot be deployed in a WAN.

54
00:07:15,000 --> 00:07:27,000
Another problem relates to the consensus definition: validity requires to decide one proposed value.

55
00:07:29,000 --> 00:07:37,000
For example, if 4 nodes propose 4 different blocks, then only one block is decided per consensus instance.

56
00:07:40,000 --> 00:07:51,000
On the right hand side, we can see that 4 nodes decide 1 block, 8 block decide 1 block and so on.

57
00:07:59,000 --> 00:08:05,000
We propose the Set Byzantine Consensus definition

58
00:08:05,200 --> 00:08:14,000
where a decided set is a valid non-conflicting subset of the union of proposed sets.

59
00:08:17,000 --> 00:08:23,800
We will try to combine the blocks of all nodes into one superblock.

60
00:08:24,800 --> 00:08:33,000
We will increase the number of blocks decided as we increase the number of nodes.

61
00:08:36,000 --> 00:08:40,000
The non-triviality property simply precludes trivial solutions to this problem.

62
00:08:44,000 --> 00:08:59,000
Concretely, we decide all proposed blocks into one superblock

63
00:09:02,000 --> 00:09:06,000
The third contribution is sharding verification.

64
00:09:10,000 --> 00:09:21,000
Making BFT consensus scale is insufficient to scale your blockchain, due to CPU-intensive cryptographic verifications.

65
00:09:29,000 --> 00:09:36,000
Blockchains generally require all nodes to verify all transaction signatures.

66
00:09:39,000 --> 00:09:55,000
Instead we shard the verification. Note that blockchain and consensus are not sharded.

67
00:10:01,000 --> 00:10:07,000
We assign a subset of nodes to verify each transaction signature.

68
00:10:09,000 --> 00:10:24,000
We simply need to receive f+1 identical verification responses to know whether a transaction is correctly signed.

69
00:10:32,000 --> 00:10:38,000
Of course, if we get different responses, then we may ask for f additional verifications.

70
00:10:39,000 --> 00:10:57,000
As f ~ n/3, we can multiply the performance of the blockchain by 3x, achieving scalability.

71
00:11:00,000 --> 00:11:06,000
We evaluated Red Belly Blockchain in one AWS zone with from 20 to 300 machines.

72
00:11:13,000 --> 00:11:18,000
We fixed f=6 as the largest fault tolerance for 20 machines.

73
00:11:35,000 --> 00:11:39,000
The throughput increases with the number of nodes.

74
00:11:40,000 --> 00:11:56,000
Even though the latency doubled between n=20 and n=300 nodes, the number of blocks was multiplied by 10.

75
00:11:57,000 --> 00:12:02,000
This is why throughput increases with the system size.

76
00:12:03,000 --> 00:12:12,000
The peak throughput we achieved, at around n=300, was about 660,000 TPS.

77
00:12:14,000 --> 00:12:30,000
We also tested the performance on a more realistic setting, with 240 VMs on different continents with less than 8 GB memory.

78
00:12:31,000 --> 00:12:40,000
Red Belly Blockchain outperformed CONS1, based on PBFT with BFT-Smart optimizations.

79
00:12:42,000 --> 00:12:50,000
The latency explodes at much higher throughput in Red Belly Blockchain than in CONS1.

80
00:12:50,500 --> 00:12:56,000
We also compared Red Belly against the randomized alternative HoneyBadger BFT.

81
00:12:57,500 --> 00:13:07,000
HoneyBadger BFT uses error correction codes its CPU load is higher than in Red Belly Blockchain.

82
00:13:15,000 --> 00:13:28,100
After 100 nodes, the experiments were taking too long, whereas the throughput of Red Belly is stable up to 240 nodes.

83
00:13:30,500 --> 00:13:45,000
Finally, we experimented with 1000 VMs on all availability zones across 4 continents.

84
00:13:46,000 --> 00:13:56,000
And we observed 3 second average latency (despite the 300ms round trip time between Sydney and Sao Paulo).

85
00:13:57,500 --> 00:14:17,000
Red Belly is secure: it solves consensus deterministically and its consensus is formally verified.

86
00:14:20,000 --> 00:14:24,500
Red Belly is fair in that it does not need any leader and is censorship resistant.

87
00:14:25,000 --> 00:14:34,000
Red Belly is scalable with its superblock optimization and verification sharding.

88
00:14:35,000 --> 00:14:48,000
Part of the content of this talk is included in a MOOC that explains how to make blockchains scale.

89
00:14:49,000 --> 00:14:52,000
Thank you for your attention.

