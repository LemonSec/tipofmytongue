1
00:00:00,880 --> 00:00:03,360
hello everyone my name is jen lin

2
00:00:03,360 --> 00:00:06,560
i'm from singapore management university

3
00:00:06,560 --> 00:00:09,040
now i will introduce our work called

4
00:00:09,040 --> 00:00:11,519
main function signature recovery with

5
00:00:11,519 --> 00:00:14,400
compiler optimization

6
00:00:14,400 --> 00:00:17,440
as we know an accurate cfi policy is a

7
00:00:17,440 --> 00:00:20,640
pure request to cf enforcement

8
00:00:20,640 --> 00:00:23,680
most approaches rely on the availability

9
00:00:23,680 --> 00:00:24,640
of source code

10
00:00:24,640 --> 00:00:28,320
to get this kind of policy such as

11
00:00:28,320 --> 00:00:33,600
modular a5 pi cfi and the forward cfi

12
00:00:33,600 --> 00:00:36,320
however current battery level c5

13
00:00:36,320 --> 00:00:37,440
techniques

14
00:00:37,440 --> 00:00:39,920
are fake in recovering the set of valid

15
00:00:39,920 --> 00:00:41,040
targets

16
00:00:41,040 --> 00:00:44,559
indirect bond transfers this is because

17
00:00:44,559 --> 00:00:45,520
the campaigner

18
00:00:45,520 --> 00:00:47,840
will not preserve a lot of language

19
00:00:47,840 --> 00:00:49,360
level information

20
00:00:49,360 --> 00:00:51,440
such as the type information in the

21
00:00:51,440 --> 00:00:54,719
process of compilation

22
00:00:54,719 --> 00:00:57,600
two approaches are proposed to recover

23
00:00:57,600 --> 00:01:00,079
the function signatures through static

24
00:01:00,079 --> 00:01:03,520
analytical analysis under the recovered

25
00:01:03,520 --> 00:01:05,519
function signature can be used

26
00:01:05,519 --> 00:01:09,119
to help cfi enforcement

27
00:01:09,119 --> 00:01:12,159
these two approaches are type armor

28
00:01:12,159 --> 00:01:15,200
and tau c5 which recovers the number of

29
00:01:15,200 --> 00:01:16,159
arguments

30
00:01:16,159 --> 00:01:20,960
and risks of argument storing registers

31
00:01:20,960 --> 00:01:23,759
for example for this indirect corner the

32
00:01:23,759 --> 00:01:26,320
recovered number of arguments is

33
00:01:26,320 --> 00:01:29,520
three and the recovered argument base

34
00:01:29,520 --> 00:01:33,680
is certainly bid for each of them

35
00:01:33,680 --> 00:01:35,680
according to the recovery function

36
00:01:35,680 --> 00:01:37,200
signature we can find

37
00:01:37,200 --> 00:01:39,759
the valid target for this entire corner

38
00:01:39,759 --> 00:01:41,520
can only be the first

39
00:01:41,520 --> 00:01:45,759
and the third functions since the

40
00:01:45,759 --> 00:01:48,560
argument was for the second function is

41
00:01:48,560 --> 00:01:48,880
six

42
00:01:48,880 --> 00:01:51,759
four bits which is larger than zero two

43
00:01:51,759 --> 00:01:52,320
bits

44
00:01:52,320 --> 00:01:55,040
it cannot be the valid target of this

45
00:01:55,040 --> 00:01:57,280
interior corner

46
00:01:57,280 --> 00:01:59,759
these two approaches rely on cooling

47
00:01:59,759 --> 00:02:01,680
convention in linux

48
00:02:01,680 --> 00:02:04,320
6 4 bit to recover the function

49
00:02:04,320 --> 00:02:05,520
signature

50
00:02:05,520 --> 00:02:08,639
in which integer arguments are passed

51
00:02:08,639 --> 00:02:11,920
in six argument registers

52
00:02:11,920 --> 00:02:14,480
and they will collect state information

53
00:02:14,480 --> 00:02:15,440
on these six

54
00:02:15,440 --> 00:02:17,840
argument registers at the quality and

55
00:02:17,840 --> 00:02:18,800
the indirect

56
00:02:18,800 --> 00:02:22,319
corner sites specifically

57
00:02:22,319 --> 00:02:25,360
at is a quality site the forward

58
00:02:25,360 --> 00:02:26,160
recursive

59
00:02:26,160 --> 00:02:28,800
analysis is performed from the entry

60
00:02:28,800 --> 00:02:30,239
basic block

61
00:02:30,239 --> 00:02:33,440
and at the indirect corner site

62
00:02:33,440 --> 00:02:37,440
backward analysis is performed

63
00:02:37,440 --> 00:02:39,519
they both assume that the argument

64
00:02:39,519 --> 00:02:42,160
registers are always reset between two

65
00:02:42,160 --> 00:02:43,680
function cores

66
00:02:43,680 --> 00:02:46,560
so the analysis is terminated when a

67
00:02:46,560 --> 00:02:49,440
return age is encountered

68
00:02:49,440 --> 00:02:51,760
i will use an example to show how the

69
00:02:51,760 --> 00:02:53,680
number of arguments and argument

70
00:02:53,680 --> 00:02:57,040
rates are recovered

71
00:02:57,920 --> 00:03:00,720
in this example from the source code we

72
00:03:00,720 --> 00:03:03,519
can find it has four arguments

73
00:03:03,519 --> 00:03:07,360
after compilation from the binary we can

74
00:03:07,360 --> 00:03:08,239
find

75
00:03:08,239 --> 00:03:11,599
six four bits of the first four argument

76
00:03:11,599 --> 00:03:12,640
registers

77
00:03:12,640 --> 00:03:16,080
already so current approaches conclude

78
00:03:16,080 --> 00:03:16,879
that

79
00:03:16,879 --> 00:03:19,599
this colleague has four arguments and

80
00:03:19,599 --> 00:03:20,239
the base

81
00:03:20,239 --> 00:03:23,440
for each argument is six four bits

82
00:03:23,440 --> 00:03:26,080
but from the source code we can find the

83
00:03:26,080 --> 00:03:28,080
type for the first argument is

84
00:03:28,080 --> 00:03:31,920
unsigned inst which is third 32 bits

85
00:03:31,920 --> 00:03:32,720
rather than

86
00:03:32,720 --> 00:03:35,599
6 4 bits

87
00:03:36,000 --> 00:03:38,640
it means the recover function signature

88
00:03:38,640 --> 00:03:39,599
from the banner

89
00:03:39,599 --> 00:03:42,640
is different from the source code this

90
00:03:42,640 --> 00:03:44,560
is because

91
00:03:44,560 --> 00:03:47,360
during the compilation the compiler

92
00:03:47,360 --> 00:03:49,920
optimization has a great impact

93
00:03:49,920 --> 00:03:53,439
on the function signature

94
00:03:53,439 --> 00:03:56,000
we find eight ways in which compiler

95
00:03:56,000 --> 00:03:57,200
optimization will

96
00:03:57,200 --> 00:04:00,879
impact the function signature recovery

97
00:04:00,879 --> 00:04:04,080
we call each of them as a complication

98
00:04:04,080 --> 00:04:05,120
case

99
00:04:05,120 --> 00:04:08,080
due to time limitation i will only

100
00:04:08,080 --> 00:04:10,640
introduce two of them in detail if you

101
00:04:10,640 --> 00:04:11,519
are interested

102
00:04:11,519 --> 00:04:14,640
in other complication cases you can read

103
00:04:14,640 --> 00:04:16,880
our paper to get more details

104
00:04:16,880 --> 00:04:21,600
about them first we find many colleagues

105
00:04:21,600 --> 00:04:22,639
will not use

106
00:04:22,639 --> 00:04:25,919
all of the arguments as shown in this

107
00:04:25,919 --> 00:04:27,280
example we can find

108
00:04:27,280 --> 00:04:29,919
only the second argument is used by this

109
00:04:29,919 --> 00:04:31,120
calling

110
00:04:31,120 --> 00:04:33,759
if we compile this currently without

111
00:04:33,759 --> 00:04:34,720
optimization

112
00:04:34,720 --> 00:04:36,960
from the binary we can find it will

113
00:04:36,960 --> 00:04:39,120
always read the first three argument

114
00:04:39,120 --> 00:04:40,479
registers

115
00:04:40,479 --> 00:04:43,520
so if we use if we perform

116
00:04:43,520 --> 00:04:46,560
analysis for this quality we can always

117
00:04:46,560 --> 00:04:46,880
get

118
00:04:46,880 --> 00:04:49,919
the correct number of arguments but if

119
00:04:49,919 --> 00:04:51,759
we compare this quality with

120
00:04:51,759 --> 00:04:53,280
optimization

121
00:04:53,280 --> 00:04:56,320
we can say only the second argument

122
00:04:56,320 --> 00:04:57,199
register is

123
00:04:57,199 --> 00:05:00,880
read so if we perform analysis for this

124
00:05:00,880 --> 00:05:05,360
optimized calling we can find

125
00:05:05,360 --> 00:05:08,160
this this query only has two arguments

126
00:05:08,160 --> 00:05:11,840
rather than three arguments

127
00:05:11,919 --> 00:05:15,039
another complication is the compiler

128
00:05:15,039 --> 00:05:17,360
prefers to use a smaller size the

129
00:05:17,360 --> 00:05:19,280
register to pass arguments

130
00:05:19,280 --> 00:05:23,039
at the corner side for example when

131
00:05:23,039 --> 00:05:24,639
arguments are constants

132
00:05:24,639 --> 00:05:28,000
both sizes are up to 32 bits arguments

133
00:05:28,000 --> 00:05:28,880
are pointers

134
00:05:28,880 --> 00:05:32,080
point to data section and text sections

135
00:05:32,080 --> 00:05:35,120
and arguments are now pointers

136
00:05:35,120 --> 00:05:37,600
as shown in this example from the source

137
00:05:37,600 --> 00:05:39,039
code we can find

138
00:05:39,039 --> 00:05:42,080
the basis of the second and the third

139
00:05:42,080 --> 00:05:42,880
arguments

140
00:05:42,880 --> 00:05:46,000
are six four bits respectively but

141
00:05:46,000 --> 00:05:49,680
during compilation the compiler finds

142
00:05:49,680 --> 00:05:52,160
the actual value password to zinc and

143
00:05:52,160 --> 00:05:54,560
let's answer two bits

144
00:05:54,560 --> 00:05:58,560
so only 32-bit argument registers will

145
00:05:58,560 --> 00:05:59,199
be used

146
00:05:59,199 --> 00:06:02,400
to set the actual arguments

147
00:06:02,400 --> 00:06:05,039
finally current approaches will conclude

148
00:06:05,039 --> 00:06:07,360
the basis for the second and the third

149
00:06:07,360 --> 00:06:08,080
argument

150
00:06:08,080 --> 00:06:11,440
as third two bits rather than six four

151
00:06:11,440 --> 00:06:13,280
bits

152
00:06:13,280 --> 00:06:17,360
another example is shown like this

153
00:06:17,360 --> 00:06:21,120
that the compiler finds the actual value

154
00:06:21,120 --> 00:06:21,680
passed

155
00:06:21,680 --> 00:06:24,720
to the second argument of this

156
00:06:24,720 --> 00:06:27,360
indirect corner is a now pointer so it

157
00:06:27,360 --> 00:06:28,639
will use

158
00:06:28,639 --> 00:06:31,759
the exclusive or instruction to pass the

159
00:06:31,759 --> 00:06:33,120
second argument

160
00:06:33,120 --> 00:06:36,240
in which only certain bit argument

161
00:06:36,240 --> 00:06:37,840
registers

162
00:06:37,840 --> 00:06:41,280
argument register is set and the current

163
00:06:41,280 --> 00:06:43,440
approach will say the second the base

164
00:06:43,440 --> 00:06:44,160
for the second

165
00:06:44,160 --> 00:06:47,199
argument is certain bit rather than 6 4

166
00:06:47,199 --> 00:06:49,199
bits

167
00:06:49,199 --> 00:06:52,319
we want to know how the 8-complications

168
00:06:52,319 --> 00:06:55,759
were present on real-world programs

169
00:06:55,759 --> 00:06:58,560
so we use applications compiled by cloud

170
00:06:58,560 --> 00:06:58,800
and

171
00:06:58,800 --> 00:07:01,680
gcc with different optimization was to

172
00:07:01,680 --> 00:07:02,960
perform

173
00:07:02,960 --> 00:07:06,000
a detailed analysis

174
00:07:06,000 --> 00:07:09,120
in total there are 552 c

175
00:07:09,120 --> 00:07:12,960
excludables and 792 c

176
00:07:12,960 --> 00:07:16,479
plus plus executables the tool

177
00:07:16,479 --> 00:07:18,880
we will we will perform evaluation

178
00:07:18,880 --> 00:07:19,840
include type

179
00:07:19,840 --> 00:07:22,479
armor testify and a well-known

180
00:07:22,479 --> 00:07:23,120
phenomenon

181
00:07:23,120 --> 00:07:26,960
analysis framework guidra

182
00:07:26,960 --> 00:07:29,840
the metric we used is a likelihood that

183
00:07:29,840 --> 00:07:32,240
the colleagues and the indirect corners

184
00:07:32,240 --> 00:07:34,880
present a complication in the function

185
00:07:34,880 --> 00:07:36,160
signature

186
00:07:36,160 --> 00:07:39,919
recovery due to the time limitation

187
00:07:39,919 --> 00:07:43,360
we only show the evaluation result for

188
00:07:43,360 --> 00:07:46,240
applications compiled by column

189
00:07:46,240 --> 00:07:49,039
if you want to get more details about

190
00:07:49,039 --> 00:07:51,280
the evaluation result you can read

191
00:07:51,280 --> 00:07:54,400
our paper here the x-axis is a

192
00:07:54,400 --> 00:07:55,599
complication

193
00:07:55,599 --> 00:07:58,879
cases we identified and the y-axis

194
00:07:58,879 --> 00:08:01,280
is a likelihood that these complication

195
00:08:01,280 --> 00:08:04,319
cases were present

196
00:08:04,319 --> 00:08:07,360
at the quality site we can find many

197
00:08:07,360 --> 00:08:09,360
colleagues will not use all of their

198
00:08:09,360 --> 00:08:10,960
arguments

199
00:08:10,960 --> 00:08:13,199
which is the biggest contributor that

200
00:08:13,199 --> 00:08:15,199
will impact the function signature

201
00:08:15,199 --> 00:08:16,240
recovery

202
00:08:16,240 --> 00:08:19,039
and it is more heavily in c plus plus

203
00:08:19,039 --> 00:08:20,720
programs

204
00:08:20,720 --> 00:08:24,400
we also find current approaches are more

205
00:08:24,400 --> 00:08:26,400
likely to misidentify

206
00:08:26,400 --> 00:08:28,879
normal functions to value additive while

207
00:08:28,879 --> 00:08:30,319
adding functions

208
00:08:30,319 --> 00:08:32,958
for unoptimized binaries here while

209
00:08:32,958 --> 00:08:34,719
other means

210
00:08:34,719 --> 00:08:38,000
the colleagues can accept overall number

211
00:08:38,000 --> 00:08:38,880
of

212
00:08:38,880 --> 00:08:42,640
arguments and gizra only simply

213
00:08:42,640 --> 00:08:44,399
considers all functions

214
00:08:44,399 --> 00:08:47,760
as non-violent addict functions

215
00:08:47,760 --> 00:08:50,640
we also find the same plus plus programs

216
00:08:50,640 --> 00:08:52,399
are more likely to

217
00:08:52,399 --> 00:08:54,480
store the return value to the third

218
00:08:54,480 --> 00:08:56,399
argument register

219
00:08:56,399 --> 00:09:00,320
which makes et more difficult to

220
00:09:00,320 --> 00:09:02,560
which makes the current approaches to

221
00:09:02,560 --> 00:09:04,160
misidentify the

222
00:09:04,160 --> 00:09:06,240
read operation on the third argument

223
00:09:06,240 --> 00:09:07,440
register is

224
00:09:07,440 --> 00:09:12,160
reading an argument

225
00:09:12,160 --> 00:09:16,399
at the corner side we can find

226
00:09:16,399 --> 00:09:19,519
compiler we can find the argument

227
00:09:19,519 --> 00:09:21,360
registers are commonly used

228
00:09:21,360 --> 00:09:24,480
to store temporary values another

229
00:09:24,480 --> 00:09:26,640
interesting finding is compiler

230
00:09:26,640 --> 00:09:27,519
optimization

231
00:09:27,519 --> 00:09:31,440
caps determine the number of arguments

232
00:09:31,440 --> 00:09:34,480
gizra only and gitra only

233
00:09:34,480 --> 00:09:37,200
analyze the basic block which contains

234
00:09:37,200 --> 00:09:39,360
indirect corner so it will cause

235
00:09:39,360 --> 00:09:41,399
a number of arguments to be

236
00:09:41,399 --> 00:09:44,399
underestimated

237
00:09:44,959 --> 00:09:47,680
for the complication case imm we can

238
00:09:47,680 --> 00:09:49,120
find the likelihood

239
00:09:49,120 --> 00:09:51,600
increases upon the increase of

240
00:09:51,600 --> 00:09:53,360
optimization levels

241
00:09:53,360 --> 00:09:56,240
after the detailed analysis we can find

242
00:09:56,240 --> 00:09:57,680
this is due to

243
00:09:57,680 --> 00:10:00,240
error application of function inlining

244
00:10:00,240 --> 00:10:04,480
and loop unrolling

245
00:10:04,480 --> 00:10:07,200
since the complication cases commonly

246
00:10:07,200 --> 00:10:09,600
present in real world programs

247
00:10:09,600 --> 00:10:12,959
we propose some improved policies to

248
00:10:12,959 --> 00:10:16,560
mitigate zinc due to the time limitation

249
00:10:16,560 --> 00:10:19,200
i will only show some improved policies

250
00:10:19,200 --> 00:10:20,640
if you are

251
00:10:20,640 --> 00:10:22,800
if you want to get more details about

252
00:10:22,800 --> 00:10:24,240
the improved policies

253
00:10:24,240 --> 00:10:27,200
we propose you can read our paper the

254
00:10:27,200 --> 00:10:28,800
first policy is to

255
00:10:28,800 --> 00:10:31,200
identify whether the read operation on

256
00:10:31,200 --> 00:10:33,040
the third argument register

257
00:10:33,040 --> 00:10:36,800
is reading an argument as shown in this

258
00:10:36,800 --> 00:10:38,240
example we can find

259
00:10:38,240 --> 00:10:42,240
the first and third argument registers

260
00:10:42,240 --> 00:10:43,200
are read

261
00:10:43,200 --> 00:10:45,920
but the ground truth is the read

262
00:10:45,920 --> 00:10:48,640
operation on the third argument register

263
00:10:48,640 --> 00:10:50,640
is to lose the return value

264
00:10:50,640 --> 00:10:54,320
from this library call in this case

265
00:10:54,320 --> 00:10:57,200
the policy is if the first read

266
00:10:57,200 --> 00:10:58,079
operation

267
00:10:58,079 --> 00:11:00,320
on the third argument happens after a

268
00:11:00,320 --> 00:11:02,240
call to a library function

269
00:11:02,240 --> 00:11:04,720
we will see this read operation is not

270
00:11:04,720 --> 00:11:06,560
with an argument

271
00:11:06,560 --> 00:11:09,200
so in this case we can conclude this

272
00:11:09,200 --> 00:11:11,200
query only has one argument

273
00:11:11,200 --> 00:11:14,880
rather than three arguments

274
00:11:14,880 --> 00:11:18,079
another improved policy is to identify

275
00:11:18,079 --> 00:11:21,360
whether one argument register is used to

276
00:11:21,360 --> 00:11:23,040
store temporary value

277
00:11:23,040 --> 00:11:25,360
in this case we will also take into

278
00:11:25,360 --> 00:11:26,720
consideration

279
00:11:26,720 --> 00:11:30,000
the reading of registers rather than

280
00:11:30,000 --> 00:11:30,640
justin

281
00:11:30,640 --> 00:11:32,880
check whether one argument register is

282
00:11:32,880 --> 00:11:34,079
set

283
00:11:34,079 --> 00:11:36,880
more specifically if we find an argument

284
00:11:36,880 --> 00:11:38,399
register is moved

285
00:11:38,399 --> 00:11:41,200
to another argument register after a

286
00:11:41,200 --> 00:11:42,560
write operation

287
00:11:42,560 --> 00:11:45,120
we will see this argument register is

288
00:11:45,120 --> 00:11:45,600
used

289
00:11:45,600 --> 00:11:48,320
to store temporary value as shown in

290
00:11:48,320 --> 00:11:49,760
this example

291
00:11:49,760 --> 00:11:52,240
we can find there is a write operation

292
00:11:52,240 --> 00:11:53,200
on the

293
00:11:53,200 --> 00:11:55,760
first argument register and after the

294
00:11:55,760 --> 00:11:57,519
write operation

295
00:11:57,519 --> 00:12:00,240
the first argument register is moved to

296
00:12:00,240 --> 00:12:01,279
another

297
00:12:01,279 --> 00:12:05,120
argument register so we can

298
00:12:05,120 --> 00:12:08,800
see the first argument register is used

299
00:12:08,800 --> 00:12:11,279
to store temporary value and conclude

300
00:12:11,279 --> 00:12:12,959
this indirect corner

301
00:12:12,959 --> 00:12:15,279
only has three arguments rather than

302
00:12:15,279 --> 00:12:17,920
four arguments

303
00:12:17,920 --> 00:12:20,320
we use the same data set and the same

304
00:12:20,320 --> 00:12:20,959
metric

305
00:12:20,959 --> 00:12:24,560
to evaluate our improved policy

306
00:12:24,560 --> 00:12:26,959
at the quality side we can find our

307
00:12:26,959 --> 00:12:29,839
improved policy significantly reduce

308
00:12:29,839 --> 00:12:32,959
chances or misidentify normal functions

309
00:12:32,959 --> 00:12:33,279
to

310
00:12:33,279 --> 00:12:36,240
our addict functions we can also find

311
00:12:36,240 --> 00:12:38,079
our improved policy

312
00:12:38,079 --> 00:12:40,000
can completely mitigate some

313
00:12:40,000 --> 00:12:41,440
complication cases

314
00:12:41,440 --> 00:12:44,399
for example our improved policy can

315
00:12:44,399 --> 00:12:46,800
accurately identify whether the read

316
00:12:46,800 --> 00:12:48,880
operation on the third argument

317
00:12:48,880 --> 00:12:51,920
registers on the third argument register

318
00:12:51,920 --> 00:12:52,160
is

319
00:12:52,160 --> 00:12:56,399
reading an argument at the corner side

320
00:12:56,399 --> 00:12:59,680
we can find our import policy reduces

321
00:12:59,680 --> 00:13:00,000
the

322
00:13:00,000 --> 00:13:02,480
likelihood of overestimation and the

323
00:13:02,480 --> 00:13:05,519
number of arguments

324
00:13:05,519 --> 00:13:07,920
we also find our improved policy

325
00:13:07,920 --> 00:13:08,639
guarantees

326
00:13:08,639 --> 00:13:11,040
that while the corners never

327
00:13:11,040 --> 00:13:12,639
inadvertently blocked

328
00:13:12,639 --> 00:13:15,040
this is because our policy never

329
00:13:15,040 --> 00:13:16,800
underestimated the argument

330
00:13:16,800 --> 00:13:20,079
base we

331
00:13:20,079 --> 00:13:23,360
also perform security evaluation

332
00:13:23,360 --> 00:13:26,880
and the set of colleagues allowed for a

333
00:13:26,880 --> 00:13:30,240
for an indirect corner we choose a

334
00:13:30,240 --> 00:13:31,360
result for six

335
00:13:31,360 --> 00:13:34,480
approaches here at means

336
00:13:34,480 --> 00:13:36,959
allows indirect corners to target any

337
00:13:36,959 --> 00:13:39,279
address taken functions

338
00:13:39,279 --> 00:13:42,079
ifcc is a source level solution with

339
00:13:42,079 --> 00:13:43,440
function signatures

340
00:13:43,440 --> 00:13:47,519
capturing the number of arguments llmc5

341
00:13:47,519 --> 00:13:48,480
is a social

342
00:13:48,480 --> 00:13:50,880
solution with more precise function

343
00:13:50,880 --> 00:13:53,600
signatures

344
00:13:53,600 --> 00:13:56,720
from the result we can find compared to

345
00:13:56,720 --> 00:13:57,600
a t

346
00:13:57,600 --> 00:14:00,000
type amount tossified and our input

347
00:14:00,000 --> 00:14:02,240
policy reduce the number of legal

348
00:14:02,240 --> 00:14:03,839
targets by about

349
00:14:03,839 --> 00:14:09,360
20 percent 49 percent under 54

350
00:14:09,360 --> 00:14:12,320
in conclusion we perform a systematic

351
00:14:12,320 --> 00:14:13,600
study on

352
00:14:13,600 --> 00:14:16,160
on how compiler optimization would

353
00:14:16,160 --> 00:14:19,199
impact the function signature recovery

354
00:14:19,199 --> 00:14:22,079
and will also propose improved policies

355
00:14:22,079 --> 00:14:24,320
to recover function signature more

356
00:14:24,320 --> 00:14:27,040
accurately

357
00:14:27,199 --> 00:14:32,000
that's all about my presentations thank

358
00:14:32,760 --> 00:14:35,760
you

