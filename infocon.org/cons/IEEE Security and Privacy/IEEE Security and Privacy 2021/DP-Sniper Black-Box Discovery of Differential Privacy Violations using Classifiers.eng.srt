1
00:00:00,560 --> 00:00:03,120
welcome to this talk on dp sniper

2
00:00:03,120 --> 00:00:05,200
a tool to automatically discover

3
00:00:05,200 --> 00:00:07,600
violations of differential privacy

4
00:00:07,600 --> 00:00:09,519
my name is benjamin and this is joint

5
00:00:09,519 --> 00:00:11,920
work with samuel ilia and martin

6
00:00:11,920 --> 00:00:15,280
we are all from eth zurich first

7
00:00:15,280 --> 00:00:16,560
let me give you an intuition on

8
00:00:16,560 --> 00:00:19,439
differential privacy in this scenario

9
00:00:19,439 --> 00:00:21,760
a hospital is storing sensitive medical

10
00:00:21,760 --> 00:00:23,279
records in a database

11
00:00:23,279 --> 00:00:25,519
and plans to release statistics on this

12
00:00:25,519 --> 00:00:26,400
database

13
00:00:26,400 --> 00:00:28,480
such as the number of patients with a

14
00:00:28,480 --> 00:00:29,760
certain disease

15
00:00:29,760 --> 00:00:32,079
in this scenario the patients in this

16
00:00:32,079 --> 00:00:34,239
database might be rightfully concerned

17
00:00:34,239 --> 00:00:36,880
about the use of their private data

18
00:00:36,880 --> 00:00:38,640
to produce publicly available

19
00:00:38,640 --> 00:00:40,079
information

20
00:00:40,079 --> 00:00:42,640
differential privacy suggests a solution

21
00:00:42,640 --> 00:00:45,000
to this concern which is

22
00:00:45,000 --> 00:00:47,840
obfuscating the output by adding an

23
00:00:47,840 --> 00:00:49,920
appropriate amount of noise

24
00:00:49,920 --> 00:00:52,160
in this case the output is no longer a

25
00:00:52,160 --> 00:00:54,079
deterministic value but follows a

26
00:00:54,079 --> 00:00:55,440
distribution

27
00:00:55,440 --> 00:00:57,840
and it is now much harder to infer

28
00:00:57,840 --> 00:00:59,920
sensitive information from samples of

29
00:00:59,920 --> 00:01:01,840
this distribution

30
00:01:01,840 --> 00:01:03,760
one of the most common mechanisms to

31
00:01:03,760 --> 00:01:05,600
enforce differential privacy is the

32
00:01:05,600 --> 00:01:07,600
so-called laplace mechanism

33
00:01:07,600 --> 00:01:10,880
which samples laplacian noise

34
00:01:10,880 --> 00:01:14,479
and adds this to the true output

35
00:01:14,479 --> 00:01:16,640
while the laplace mechanism is

36
00:01:16,640 --> 00:01:18,799
differentially private in theory

37
00:01:18,799 --> 00:01:21,520
in practice most implementations suffer

38
00:01:21,520 --> 00:01:24,080
from floating point vulnerabilities

39
00:01:24,080 --> 00:01:26,240
intuitively this is because the least

40
00:01:26,240 --> 00:01:27,520
significant bits

41
00:01:27,520 --> 00:01:30,479
of this floating point value reveal more

42
00:01:30,479 --> 00:01:33,200
information than you would expect if you

43
00:01:33,200 --> 00:01:35,280
analyze this from a theoretical point of

44
00:01:35,280 --> 00:01:36,400
view

45
00:01:36,400 --> 00:01:38,400
even though this attack has been known

46
00:01:38,400 --> 00:01:40,320
for at least 8 years

47
00:01:40,320 --> 00:01:42,640
existing analysis tools cannot discover

48
00:01:42,640 --> 00:01:43,840
it

49
00:01:43,840 --> 00:01:46,560
this means that if you analyze this code

50
00:01:46,560 --> 00:01:47,439
snippet

51
00:01:47,439 --> 00:01:49,600
using existing verification tools for

52
00:01:49,600 --> 00:01:51,040
differential privacy

53
00:01:51,040 --> 00:01:53,520
they would incorrectly claim that this

54
00:01:53,520 --> 00:01:55,759
code is differentially private

55
00:01:55,759 --> 00:01:58,320
similarly if you apply testing tools for

56
00:01:58,320 --> 00:02:00,479
differential privacy they will not find

57
00:02:00,479 --> 00:02:02,000
any violations

58
00:02:02,000 --> 00:02:04,719
leading you again to mistakenly believe

59
00:02:04,719 --> 00:02:05,439
that this

60
00:02:05,439 --> 00:02:08,318
code snippet is differentially private

61
00:02:08,318 --> 00:02:10,160
this among other reasons has been the

62
00:02:10,160 --> 00:02:11,200
inspiration for

63
00:02:11,200 --> 00:02:14,720
this work dp sniper which now correctly

64
00:02:14,720 --> 00:02:16,959
identifies that this code snippet is not

65
00:02:16,959 --> 00:02:18,239
differentially private

66
00:02:18,239 --> 00:02:20,000
due to the discussed floating point

67
00:02:20,000 --> 00:02:21,599
vulnerability

68
00:02:21,599 --> 00:02:24,080
at this point i should point out that dp

69
00:02:24,080 --> 00:02:25,920
sniper is not restricted to floating

70
00:02:25,920 --> 00:02:27,920
point vulnerabilities or floating point

71
00:02:27,920 --> 00:02:28,720
attacks

72
00:02:28,720 --> 00:02:31,440
it also covers other vulnerabilities as

73
00:02:31,440 --> 00:02:33,440
discussed in previous

74
00:02:33,440 --> 00:02:36,319
testing and verification tools now

75
00:02:36,319 --> 00:02:39,440
before we dive into details of dp sniper

76
00:02:39,440 --> 00:02:42,080
let me first provide you with a more

77
00:02:42,080 --> 00:02:43,840
accurate description of differential

78
00:02:43,840 --> 00:02:44,959
privacy

79
00:02:44,959 --> 00:02:46,879
as discussed the differentially private

80
00:02:46,879 --> 00:02:48,720
mechanism produces

81
00:02:48,720 --> 00:02:52,239
a sample from a public value

82
00:02:52,239 --> 00:02:55,280
given a private input however it

83
00:02:55,280 --> 00:02:57,760
protects the privacy of individual users

84
00:02:57,760 --> 00:02:58,720
in the database

85
00:02:58,720 --> 00:03:02,080
as follows if a certain user alice

86
00:03:02,080 --> 00:03:04,720
debates whether or not it's okay for her

87
00:03:04,720 --> 00:03:05,440
to

88
00:03:05,440 --> 00:03:07,840
enter her data into the database she

89
00:03:07,840 --> 00:03:10,319
should compare the two scenarios

90
00:03:10,319 --> 00:03:12,480
one scenario where the mechanism is

91
00:03:12,480 --> 00:03:14,640
being applied with outer data

92
00:03:14,640 --> 00:03:16,959
and another scenario where the mechanism

93
00:03:16,959 --> 00:03:18,720
is being applied on a database that

94
00:03:18,720 --> 00:03:20,400
includes our data

95
00:03:20,400 --> 00:03:22,800
of course the two output distributions

96
00:03:22,800 --> 00:03:24,640
will be slightly different

97
00:03:24,640 --> 00:03:27,519
but differential privacy guarantees that

98
00:03:27,519 --> 00:03:28,959
the distributions

99
00:03:28,959 --> 00:03:30,879
are roughly the same meaning that

100
00:03:30,879 --> 00:03:32,720
intuitively it doesn't really make a

101
00:03:32,720 --> 00:03:34,080
difference whether or not

102
00:03:34,080 --> 00:03:37,040
alice enters her data into the database

103
00:03:37,040 --> 00:03:38,480
or not

104
00:03:38,480 --> 00:03:40,640
more formally differential privacy

105
00:03:40,640 --> 00:03:41,519
ensures

106
00:03:41,519 --> 00:03:44,319
that the probability of obtaining an

107
00:03:44,319 --> 00:03:45,120
output in

108
00:03:45,120 --> 00:03:48,879
any given set s is roughly the same

109
00:03:48,879 --> 00:03:51,040
regardless of whether the database

110
00:03:51,040 --> 00:03:53,200
includes the data of alice

111
00:03:53,200 --> 00:03:57,360
or not in this scenario

112
00:03:57,360 --> 00:04:00,480
the terminology is that m is a mechanism

113
00:04:00,480 --> 00:04:02,000
for example

114
00:04:02,000 --> 00:04:03,680
counting the number of patients with a

115
00:04:03,680 --> 00:04:06,080
disease and adding laplacian noise

116
00:04:06,080 --> 00:04:09,200
and s is being called an attack

117
00:04:09,200 --> 00:04:11,760
because it formalizes an attempt to

118
00:04:11,760 --> 00:04:12,640
infer

119
00:04:12,640 --> 00:04:15,439
whether alice was in the database or not

120
00:04:15,439 --> 00:04:15,760
and

121
00:04:15,760 --> 00:04:18,959
this then this equality or

122
00:04:18,959 --> 00:04:21,120
approximate equality in this case

123
00:04:21,120 --> 00:04:22,000
indicates

124
00:04:22,000 --> 00:04:23,680
that the attacker cannot really

125
00:04:23,680 --> 00:04:28,639
distinguish these two scenarios now even

126
00:04:28,639 --> 00:04:30,720
more formally

127
00:04:30,720 --> 00:04:32,800
we would say that m is epsilon

128
00:04:32,800 --> 00:04:34,880
differentially private often referred to

129
00:04:34,880 --> 00:04:36,400
as epsilon dp

130
00:04:36,400 --> 00:04:40,080
if for all pairs of inputs a and a prime

131
00:04:40,080 --> 00:04:42,240
which are neighbors where this

132
00:04:42,240 --> 00:04:44,400
neighborhood here captures the fact that

133
00:04:44,400 --> 00:04:46,560
a prime is obtained by adding or

134
00:04:46,560 --> 00:04:48,960
removing the data of an individual user

135
00:04:48,960 --> 00:04:52,240
from a and for every attack s

136
00:04:52,240 --> 00:04:54,720
the logarithm of the probability that m

137
00:04:54,720 --> 00:04:56,000
of a lies in s

138
00:04:56,000 --> 00:04:57,840
minus the logarithm of the probability

139
00:04:57,840 --> 00:04:59,840
that m of a prime lies in s

140
00:04:59,840 --> 00:05:02,800
is at most epsilon and as discussed this

141
00:05:02,800 --> 00:05:04,720
intuitively indicates

142
00:05:04,720 --> 00:05:07,600
that these two probabilities are roughly

143
00:05:07,600 --> 00:05:09,759
the same

144
00:05:09,759 --> 00:05:12,080
however in this talk we focus on our

145
00:05:12,080 --> 00:05:13,039
newly coined

146
00:05:13,039 --> 00:05:16,639
term of differential distinguishability

147
00:05:16,639 --> 00:05:19,680
where we would say that m is psi

148
00:05:19,680 --> 00:05:21,680
differentially distinguishable referred

149
00:05:21,680 --> 00:05:23,919
to as x i d idd

150
00:05:23,919 --> 00:05:27,039
if there exists a and a prime and an

151
00:05:27,039 --> 00:05:27,600
attack

152
00:05:27,600 --> 00:05:30,720
s such that this expression here is at

153
00:05:30,720 --> 00:05:31,199
least

154
00:05:31,199 --> 00:05:34,240
psi so differential distinguishability

155
00:05:34,240 --> 00:05:34,560
is

156
00:05:34,560 --> 00:05:36,880
almost the opposite of differential

157
00:05:36,880 --> 00:05:37,840
privacy

158
00:05:37,840 --> 00:05:40,160
except that we have a greater or equal

159
00:05:40,160 --> 00:05:41,039
here

160
00:05:41,039 --> 00:05:44,320
instead of a greater than

161
00:05:44,560 --> 00:05:47,520
so this results in a search problem for

162
00:05:47,520 --> 00:05:49,600
differential distinguishability

163
00:05:49,600 --> 00:05:52,639
namely we want to maximize this term by

164
00:05:52,639 --> 00:05:54,400
as much as possible

165
00:05:54,400 --> 00:05:57,360
and in order to do this we can maximize

166
00:05:57,360 --> 00:05:57,840
over

167
00:05:57,840 --> 00:06:00,639
a possible in neighboring inputs a and a

168
00:06:00,639 --> 00:06:01,199
prime

169
00:06:01,199 --> 00:06:04,240
and possible attacks s and the higher

170
00:06:04,240 --> 00:06:04,960
this value

171
00:06:04,960 --> 00:06:08,240
is the higher the higher is the

172
00:06:08,240 --> 00:06:10,160
differential distinguishability

173
00:06:10,160 --> 00:06:13,680
of our mechanism m

174
00:06:13,680 --> 00:06:16,720
luckily there already exists a ton of

175
00:06:16,720 --> 00:06:17,440
work

176
00:06:17,440 --> 00:06:20,560
on maximizing potential inputs there are

177
00:06:20,560 --> 00:06:22,400
exhaustive approaches sampling

178
00:06:22,400 --> 00:06:24,560
approaches and some heuristics

179
00:06:24,560 --> 00:06:27,199
and in particular in this work we rely

180
00:06:27,199 --> 00:06:28,880
on the previous heuristics

181
00:06:28,880 --> 00:06:30,720
that were already established for the

182
00:06:30,720 --> 00:06:33,280
input search by statip which we cite

183
00:06:33,280 --> 00:06:34,479
here

184
00:06:34,479 --> 00:06:38,080
however maximizing the attack

185
00:06:38,080 --> 00:06:40,080
is much more challenging and is in

186
00:06:40,080 --> 00:06:42,160
particular also needed for floating

187
00:06:42,160 --> 00:06:43,360
point attacks

188
00:06:43,360 --> 00:06:46,080
because finding a strong attack or a

189
00:06:46,080 --> 00:06:47,199
powerful attack

190
00:06:47,199 --> 00:06:50,800
requires finding the requires accounting

191
00:06:50,800 --> 00:06:52,720
for these floating point run abilities

192
00:06:52,720 --> 00:06:53,680
so picking this

193
00:06:53,680 --> 00:06:56,000
s in order to account for floating point

194
00:06:56,000 --> 00:06:57,199
vulnerabilities which

195
00:06:57,199 --> 00:07:00,560
no one does at this point

196
00:07:01,039 --> 00:07:04,400
so in this work we rely on

197
00:07:04,400 --> 00:07:06,400
existing work for this part leaving us

198
00:07:06,400 --> 00:07:07,840
only with the problem

199
00:07:07,840 --> 00:07:11,680
of maximizing the power of a certain

200
00:07:11,680 --> 00:07:12,319
attack

201
00:07:12,319 --> 00:07:15,360
as shown here so the goal of our work is

202
00:07:15,360 --> 00:07:16,000
finding an

203
00:07:16,000 --> 00:07:19,199
optimal attack now how can we achieve

204
00:07:19,199 --> 00:07:20,000
this

205
00:07:20,000 --> 00:07:21,840
first of all we can observe that in

206
00:07:21,840 --> 00:07:24,400
order to maximize this expression here

207
00:07:24,400 --> 00:07:25,919
we would like to minimize this

208
00:07:25,919 --> 00:07:27,280
expression here because it's being

209
00:07:27,280 --> 00:07:28,080
subtracted

210
00:07:28,080 --> 00:07:29,280
which means that we would like to

211
00:07:29,280 --> 00:07:32,800
minimize this probability here

212
00:07:32,800 --> 00:07:35,120
unfortunately we have to be careful here

213
00:07:35,120 --> 00:07:36,960
because if we are too successful in

214
00:07:36,960 --> 00:07:38,880
minimizing this probability and it gets

215
00:07:38,880 --> 00:07:39,919
really tiny

216
00:07:39,919 --> 00:07:42,639
then we will no longer be able to

217
00:07:42,639 --> 00:07:44,080
accurately quantify

218
00:07:44,080 --> 00:07:46,319
this probability because we can only

219
00:07:46,319 --> 00:07:47,280
estimate this and

220
00:07:47,280 --> 00:07:50,080
estimating small probabilities is hard

221
00:07:50,080 --> 00:07:50,960
therefore

222
00:07:50,960 --> 00:07:54,080
we only target a small constant c here

223
00:07:54,080 --> 00:07:56,080
so we try to make this probability as

224
00:07:56,080 --> 00:08:00,400
small as possible but not smaller than c

225
00:08:00,479 --> 00:08:02,560
on the other hand we of course try to

226
00:08:02,560 --> 00:08:04,319
maximize this term

227
00:08:04,319 --> 00:08:06,479
which means that we will have a

228
00:08:06,479 --> 00:08:09,120
trade-off between minimizing this term

229
00:08:09,120 --> 00:08:12,639
and maximizing this term what does this

230
00:08:12,639 --> 00:08:13,039
mean

231
00:08:13,039 --> 00:08:16,080
for a potential attack intuitively we

232
00:08:16,080 --> 00:08:16,879
would like to

233
00:08:16,879 --> 00:08:20,080
compose the attack s of elements

234
00:08:20,080 --> 00:08:23,520
which are likely to result when the

235
00:08:23,520 --> 00:08:24,160
input is

236
00:08:24,160 --> 00:08:27,440
a and unlikely to result when the input

237
00:08:27,440 --> 00:08:29,120
is a prime

238
00:08:29,120 --> 00:08:32,479
this means that an element candidate

239
00:08:32,479 --> 00:08:33,360
element b

240
00:08:33,360 --> 00:08:37,279
of s should be in the set if and only if

241
00:08:37,279 --> 00:08:40,159
the probability that the input was a is

242
00:08:40,159 --> 00:08:41,039
high

243
00:08:41,039 --> 00:08:44,000
given that the output is b this has some

244
00:08:44,000 --> 00:08:45,760
deep connections to the name and pearson

245
00:08:45,760 --> 00:08:46,240
lemma

246
00:08:46,240 --> 00:08:48,080
which is discussed in more detail also

247
00:08:48,080 --> 00:08:50,160
in the publication

248
00:08:50,160 --> 00:08:52,399
so this has been the first key insight

249
00:08:52,399 --> 00:08:54,399
namely that given this posterior

250
00:08:54,399 --> 00:08:57,279
probability we can actually know

251
00:08:57,279 --> 00:09:00,320
which elements that our attacks at s is

252
00:09:00,320 --> 00:09:02,640
optimally consisting of

253
00:09:02,640 --> 00:09:05,279
and the second key inside of our work is

254
00:09:05,279 --> 00:09:06,959
that we can actually estimate this

255
00:09:06,959 --> 00:09:08,000
probability

256
00:09:08,000 --> 00:09:11,519
by trading a classifier so

257
00:09:11,519 --> 00:09:13,839
a note here that we can actually easily

258
00:09:13,839 --> 00:09:14,560
generate

259
00:09:14,560 --> 00:09:16,800
training data automatically as much as

260
00:09:16,800 --> 00:09:17,839
we want by just

261
00:09:17,839 --> 00:09:21,200
running this mechanism m on inputs a and

262
00:09:21,200 --> 00:09:22,160
a prime

263
00:09:22,160 --> 00:09:24,160
and this means that it is fairly easy to

264
00:09:24,160 --> 00:09:25,920
use the standard framework of machine

265
00:09:25,920 --> 00:09:27,600
learning to quantify

266
00:09:27,600 --> 00:09:30,959
this probability now

267
00:09:30,959 --> 00:09:33,360
overall this results in the following

268
00:09:33,360 --> 00:09:35,200
workflow for dp finder

269
00:09:35,200 --> 00:09:38,880
for dp sniper first dp sniper trains a

270
00:09:38,880 --> 00:09:40,080
classifier

271
00:09:40,080 --> 00:09:43,040
for this posterior probability for this

272
00:09:43,040 --> 00:09:45,440
in our evaluation we use neural networks

273
00:09:45,440 --> 00:09:46,800
and logistic regression

274
00:09:46,800 --> 00:09:49,040
so really standard stuff from machine

275
00:09:49,040 --> 00:09:50,399
learning

276
00:09:50,399 --> 00:09:52,720
in a second step we transform this

277
00:09:52,720 --> 00:09:53,680
classifier

278
00:09:53,680 --> 00:09:57,360
into an attack by picking the elements

279
00:09:57,360 --> 00:10:00,640
of of this of the attacks at s

280
00:10:00,640 --> 00:10:04,000
by picking them exactly if the posterior

281
00:10:04,000 --> 00:10:07,519
probability is above some threshold t

282
00:10:07,519 --> 00:10:09,519
so all that remains to do in a third

283
00:10:09,519 --> 00:10:12,079
step is selecting t

284
00:10:12,079 --> 00:10:14,959
and in order to do this we ensure that

285
00:10:14,959 --> 00:10:16,959
this probability is exactly c

286
00:10:16,959 --> 00:10:18,720
as discussed before this probability

287
00:10:18,720 --> 00:10:20,079
should be really small

288
00:10:20,079 --> 00:10:24,399
but not below some value of c

289
00:10:25,440 --> 00:10:27,519
in our publication we derived the

290
00:10:27,519 --> 00:10:28,560
following

291
00:10:28,560 --> 00:10:31,200
guarantee which is informally stated

292
00:10:31,200 --> 00:10:32,000
here

293
00:10:32,000 --> 00:10:34,880
dp sniper finds an approximately optimal

294
00:10:34,880 --> 00:10:36,160
attack

295
00:10:36,160 --> 00:10:39,120
so here approximately is quantified

296
00:10:39,120 --> 00:10:41,200
mathematically here so it's well defined

297
00:10:41,200 --> 00:10:42,399
what this means

298
00:10:42,399 --> 00:10:45,519
however we have two key assumptions

299
00:10:45,519 --> 00:10:48,240
that allow us to make this claim first

300
00:10:48,240 --> 00:10:50,000
of all we assume that we cannot

301
00:10:50,000 --> 00:10:52,640
estimate tiny probabilities as discussed

302
00:10:52,640 --> 00:10:54,560
before this would not be realistic so

303
00:10:54,560 --> 00:10:56,399
this is a reasonable assumption

304
00:10:56,399 --> 00:10:58,000
and second of all we assume that the

305
00:10:58,000 --> 00:11:00,160
learned classifier is perfect

306
00:11:00,160 --> 00:11:02,000
in other words we assume that machine

307
00:11:02,000 --> 00:11:03,600
learning works

308
00:11:03,600 --> 00:11:05,519
of course this is a strong assumption in

309
00:11:05,519 --> 00:11:07,360
practice which is why

310
00:11:07,360 --> 00:11:09,600
we also made sure that our guarantee

311
00:11:09,600 --> 00:11:11,040
degrades gracefully

312
00:11:11,040 --> 00:11:13,279
so we even get strong or interesting

313
00:11:13,279 --> 00:11:14,399
guarantees

314
00:11:14,399 --> 00:11:16,480
in the case where the learned classifier

315
00:11:16,480 --> 00:11:19,440
is imperfect

316
00:11:19,680 --> 00:11:23,440
now in order to discuss related work

317
00:11:23,440 --> 00:11:25,839
let's first consider again our small

318
00:11:25,839 --> 00:11:26,720
example

319
00:11:26,720 --> 00:11:29,200
of this floating point vulnerability

320
00:11:29,200 --> 00:11:30,000
here

321
00:11:30,000 --> 00:11:32,000
what we can learn from this attack is

322
00:11:32,000 --> 00:11:33,839
that black box approaches

323
00:11:33,839 --> 00:11:36,480
are more convenient especially if we are

324
00:11:36,480 --> 00:11:38,959
dealing with floating point arithmetic

325
00:11:38,959 --> 00:11:41,680
this is because if we don't have a black

326
00:11:41,680 --> 00:11:42,000
box

327
00:11:42,000 --> 00:11:43,760
approach and we have an approach that

328
00:11:43,760 --> 00:11:45,839
actually investigates the code here

329
00:11:45,839 --> 00:11:48,000
we need some sort of model in particular

330
00:11:48,000 --> 00:11:50,399
also of this laplace distribution

331
00:11:50,399 --> 00:11:52,320
which will be very hard and probably

332
00:11:52,320 --> 00:11:54,399
incorrect because such a model is likely

333
00:11:54,399 --> 00:11:55,680
to assume idealized

334
00:11:55,680 --> 00:11:58,160
arithmetic instead if we just have a

335
00:11:58,160 --> 00:12:00,160
black box approach

336
00:12:00,160 --> 00:12:02,079
analyzing this code is much simpler we

337
00:12:02,079 --> 00:12:03,839
simply need to run it

338
00:12:03,839 --> 00:12:06,240
now if we look into related work

339
00:12:06,240 --> 00:12:07,920
unfortunately for most

340
00:12:07,920 --> 00:12:10,079
existing testing tools for differential

341
00:12:10,079 --> 00:12:12,240
privacy a black box approach is

342
00:12:12,240 --> 00:12:13,839
insufficient

343
00:12:13,839 --> 00:12:16,480
only for static pedp stochastic tester

344
00:12:16,480 --> 00:12:17,519
and this work

345
00:12:17,519 --> 00:12:21,120
our black box approaches are sufficient

346
00:12:21,120 --> 00:12:23,600
however deep stochastic tester only

347
00:12:23,600 --> 00:12:25,680
supports one-dimensional outputs

348
00:12:25,680 --> 00:12:29,200
so it's not a great fit in general

349
00:12:29,200 --> 00:12:31,760
now stacdp is great out here because

350
00:12:31,760 --> 00:12:33,920
it's only semi-black box but in practice

351
00:12:33,920 --> 00:12:35,680
that's not a big concern we can

352
00:12:35,680 --> 00:12:38,399
consider it as being black box and this

353
00:12:38,399 --> 00:12:39,120
is why in

354
00:12:39,120 --> 00:12:42,560
our evaluation we compared dp sniper to

355
00:12:42,560 --> 00:12:44,399
static p

356
00:12:44,399 --> 00:12:47,600
now looking into the evaluation we

357
00:12:47,600 --> 00:12:51,519
see here on the x axis we see the level

358
00:12:51,519 --> 00:12:53,079
or amount of differential

359
00:12:53,079 --> 00:12:55,839
distinguishability we were able to infer

360
00:12:55,839 --> 00:12:58,160
and on the y-axis we see various

361
00:12:58,160 --> 00:12:59,760
algorithms

362
00:12:59,760 --> 00:13:02,800
now the takeaway message here

363
00:13:02,800 --> 00:13:06,160
is that dp sniper and statip

364
00:13:06,160 --> 00:13:09,279
perform similarly but this is because

365
00:13:09,279 --> 00:13:11,200
all of these algorithms were already

366
00:13:11,200 --> 00:13:13,360
evaluated instead tp

367
00:13:13,360 --> 00:13:17,519
if we move on to a more

368
00:13:17,519 --> 00:13:19,600
to more advanced algorithms such as for

369
00:13:19,600 --> 00:13:22,240
example a rapport or one-time report

370
00:13:22,240 --> 00:13:23,760
these are state-of-the-art

371
00:13:23,760 --> 00:13:26,399
differentially private algorithms then

372
00:13:26,399 --> 00:13:28,160
dp sniper

373
00:13:28,160 --> 00:13:31,760
significantly outperforms tp for example

374
00:13:31,760 --> 00:13:33,279
here in one time

375
00:13:33,279 --> 00:13:35,360
rapport the level of differential

376
00:13:35,360 --> 00:13:37,600
distinguishability of dp sniper is much

377
00:13:37,600 --> 00:13:38,160
better

378
00:13:38,160 --> 00:13:41,920
than that of static p i should point out

379
00:13:41,920 --> 00:13:42,639
here

380
00:13:42,639 --> 00:13:45,360
that we were not able to run stat dp

381
00:13:45,360 --> 00:13:47,279
directly because it doesn't exactly

382
00:13:47,279 --> 00:13:48,000
implement

383
00:13:48,000 --> 00:13:50,839
what is needed to derive a differential

384
00:13:50,839 --> 00:13:52,079
distinguishability

385
00:13:52,079 --> 00:13:54,320
which is why we fixed it in a versions

386
00:13:54,320 --> 00:13:55,600
that tp fixed

387
00:13:55,600 --> 00:13:58,160
and still the fixed version is being

388
00:13:58,160 --> 00:13:59,120
outperformed

389
00:13:59,120 --> 00:14:02,320
by dp sniper

390
00:14:02,320 --> 00:14:04,720
also it's important to note that dp

391
00:14:04,720 --> 00:14:06,800
sniper is 15 times faster

392
00:14:06,800 --> 00:14:09,199
so the increased power of dp sniper does

393
00:14:09,199 --> 00:14:09,839
not come

394
00:14:09,839 --> 00:14:13,760
at an increased cost in runtime

395
00:14:13,760 --> 00:14:16,560
to conclude we have presented a new

396
00:14:16,560 --> 00:14:18,360
approach to discover differential

397
00:14:18,360 --> 00:14:19,839
distinguishability

398
00:14:19,839 --> 00:14:22,000
our approach comes with optimality

399
00:14:22,000 --> 00:14:23,279
guarantees

400
00:14:23,279 --> 00:14:26,320
and our code is publicly available

401
00:14:26,320 --> 00:14:29,040
in our evaluation in addition to showing

402
00:14:29,040 --> 00:14:30,079
that we outperform

403
00:14:30,079 --> 00:14:33,360
statipe or stat tp fixed we also

404
00:14:33,360 --> 00:14:35,360
demonstrate that we can successfully

405
00:14:35,360 --> 00:14:36,160
derive

406
00:14:36,160 --> 00:14:38,000
differential distinguishability in this

407
00:14:38,000 --> 00:14:40,800
case and we are the first to do so

408
00:14:40,800 --> 00:14:45,279
thank you for your attention

