1
00:00:04,069 --> 00:00:10,139
hello everyone welcome to<font color="#CCCCCC"> a talk on a</font>

2
00:00:07,170 --> 00:00:12,119
public and biased<font color="#CCCCCC"> resistant randomness</font>

3
00:00:10,139 --> 00:00:15,000
<font color="#E5E5E5">this is a joint work</font><font color="#CCCCCC"> with a team from</font>

4
00:00:12,119 --> 00:00:18,509
Trinity<font color="#CCCCCC"> College EPFL</font><font color="#E5E5E5"> University of Bonn</font>

5
00:00:15,000 --> 00:00:20,160
<font color="#E5E5E5">and Yale University our total consists</font>

6
00:00:18,510 --> 00:00:22,290
<font color="#E5E5E5">of four main parts first will motivate</font>

7
00:00:20,160 --> 00:00:24,690
our project<font color="#E5E5E5"> then we'll present</font><font color="#CCCCCC"> two</font>

8
00:00:22,290 --> 00:00:26,430
protocols<font color="#E5E5E5"> for</font><font color="#CCCCCC"> random generations we</font>

9
00:00:24,690 --> 00:00:28,680
<font color="#E5E5E5">propose then we'll continue with</font>

10
00:00:26,430 --> 00:00:30,750
implementation<font color="#E5E5E5"> some experiments will</font>

11
00:00:28,680 --> 00:00:33,960
conclude with<font color="#CCCCCC"> a few remarks and a quick</font>

12
00:00:30,750 --> 00:00:35,850
demo first<font color="#E5E5E5"> let me motivate the need for</font>

13
00:00:33,960 --> 00:00:38,660
<font color="#E5E5E5">public randomness and explain why</font>

14
00:00:35,850 --> 00:00:41,220
generating it is actually<font color="#CCCCCC"> very hard</font>

15
00:00:38,660 --> 00:00:43,169
public randomness unlike<font color="#CCCCCC"> ticket</font>

16
00:00:41,220 --> 00:00:44,940
randomness were used to<font color="#E5E5E5"> that we often</font>

17
00:00:43,170 --> 00:00:47,040
use<font color="#CCCCCC"> for secret key generation</font><font color="#E5E5E5"> is</font>

18
00:00:44,940 --> 00:00:49,800
collectively used it has to be

19
00:00:47,040 --> 00:00:51,239
unpredictable<font color="#CCCCCC"> ahead</font><font color="#E5E5E5"> of time however past</font>

20
00:00:49,800 --> 00:00:53,309
a certain point<font color="#E5E5E5"> in time when we</font><font color="#CCCCCC"> are</font>

21
00:00:51,239 --> 00:00:55,769
ready to<font color="#E5E5E5"> use it it</font><font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> have to</font>

22
00:00:53,309 --> 00:00:57,690
remain secret<font color="#CCCCCC"> the</font><font color="#E5E5E5"> many</font><font color="#CCCCCC"> applications of</font>

23
00:00:55,770 --> 00:01:00,840
<font color="#CCCCCC">public randomness they include random</font>

24
00:00:57,690 --> 00:01:04,259
<font color="#E5E5E5">selection lotteries election audit a</font>

25
00:01:00,840 --> 00:01:06,450
game for team assignments<font color="#E5E5E5"> our protocols</font>

26
00:01:04,259 --> 00:01:09,959
for parameters and<font color="#CCCCCC"> scalability and</font>

27
00:01:06,450 --> 00:01:12,060
crypto for<font color="#E5E5E5"> let's say</font><font color="#CCCCCC"> our challenges in</font>

28
00:01:09,959 --> 00:01:15,240
zero knowledge proof<font color="#E5E5E5"> to name adjusting</font>

29
00:01:12,060 --> 00:01:17,909
<font color="#E5E5E5">few unfortunately there are a lot of</font>

30
00:01:15,240 --> 00:01:20,548
<font color="#CCCCCC">real-world examples of width of</font><font color="#E5E5E5"> cell</font>

31
00:01:17,909 --> 00:01:24,090
randomness and consequently read<font color="#E5E5E5"> of</font>

32
00:01:20,549 --> 00:01:26,159
failed public random choices in the

33
00:01:24,090 --> 00:01:27,630
Vietnam War draft lottery<font color="#E5E5E5"> the dates</font>

34
00:01:26,159 --> 00:01:29,789
<font color="#CCCCCC">representing birth dates were not</font>

35
00:01:27,630 --> 00:01:32,548
sufficiently makes<font color="#CCCCCC"> before</font><font color="#E5E5E5"> drawing the</font>

36
00:01:29,789 --> 00:01:34,200
order to<font color="#E5E5E5"> appear for induction</font><font color="#CCCCCC"> I'm hot</font>

37
00:01:32,549 --> 00:01:37,139
<font color="#E5E5E5">and cold walls</font><font color="#CCCCCC"> were used</font><font color="#E5E5E5"> to read</font>

38
00:01:34,200 --> 00:01:39,899
<font color="#E5E5E5">European soccer competitions</font><font color="#CCCCCC"> and finally</font>

39
00:01:37,139 --> 00:01:41,490
an insider heart<font color="#CCCCCC"> a pseudo-random number</font>

40
00:01:39,899 --> 00:01:43,229
generator that<font color="#E5E5E5"> was used to choose</font>

41
00:01:41,490 --> 00:01:46,289
<font color="#E5E5E5">winning numbers for</font><font color="#CCCCCC"> the megabucks</font>

42
00:01:43,229 --> 00:01:48,509
lottery<font color="#E5E5E5"> and it turns out that public</font>

43
00:01:46,289 --> 00:01:50,340
randomness it's not any concept<font color="#E5E5E5"> there</font>

44
00:01:48,509 --> 00:01:53,189
has always been<font color="#CCCCCC"> a need for</font><font color="#E5E5E5"> that and</font>

45
00:01:50,340 --> 00:01:54,959
perhaps<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> past a large book of</font>

46
00:01:53,189 --> 00:01:57,270
random numbers published by a trusted

47
00:01:54,959 --> 00:01:59,789
source was sufficient today it's not

48
00:01:57,270 --> 00:02:02,789
today<font color="#E5E5E5"> generating those numbers is hard</font>

49
00:01:59,789 --> 00:02:05,429
<font color="#E5E5E5">simply</font><font color="#CCCCCC"> because we face</font><font color="#E5E5E5"> big issues of</font>

50
00:02:02,789 --> 00:02:09,000
<font color="#E5E5E5">trust and scale and these two issues</font><font color="#CCCCCC"> are</font>

51
00:02:05,429 --> 00:02:11,340
<font color="#CCCCCC">what we addressed in</font><font color="#E5E5E5"> our work so we set</font>

52
00:02:09,000 --> 00:02:14,250
<font color="#E5E5E5">out set out to achieve a decentralized</font>

53
00:02:11,340 --> 00:02:16,650
public randomness protocol<font color="#E5E5E5"> in very well</font>

54
00:02:14,250 --> 00:02:18,300
understood and commonly<font color="#CCCCCC"> use</font><font color="#E5E5E5"> PL</font><font color="#CCCCCC"> toven</font>

55
00:02:16,650 --> 00:02:21,710
threshold security model

56
00:02:18,300 --> 00:02:24,090
we had<font color="#E5E5E5"> five specific goals in mind first</font>

57
00:02:21,710 --> 00:02:26,100
<font color="#E5E5E5">availability we wanted to ensure</font><font color="#CCCCCC"> a</font>

58
00:02:24,090 --> 00:02:28,850
<font color="#E5E5E5">successful</font><font color="#CCCCCC"> provoke impatient completion</font>

59
00:02:26,100 --> 00:02:31,290
<font color="#E5E5E5">even</font><font color="#CCCCCC"> the presence of dishonest parties</font>

60
00:02:28,850 --> 00:02:33,540
<font color="#E5E5E5">unpredictability</font><font color="#CCCCCC"> we wanted</font><font color="#E5E5E5"> to make sure</font>

61
00:02:31,290 --> 00:02:35,609
<font color="#E5E5E5">that</font><font color="#CCCCCC"> when randomness is not revealed</font>

62
00:02:33,540 --> 00:02:38,970
until<font color="#E5E5E5"> a very well-defined point in the</font>

63
00:02:35,610 --> 00:02:41,160
protocol<font color="#CCCCCC"> unbiased</font><font color="#E5E5E5"> ability such that the</font>

64
00:02:38,970 --> 00:02:43,560
<font color="#CCCCCC">output is distributed uniformly at</font>

65
00:02:41,160 --> 00:02:44,480
random<font color="#CCCCCC"> even in the</font><font color="#E5E5E5"> presence of an active</font>

66
00:02:43,560 --> 00:02:47,460
adversary

67
00:02:44,480 --> 00:02:49,019
verifiability<font color="#E5E5E5"> by third party something</font>

68
00:02:47,460 --> 00:02:52,230
that is<font color="#E5E5E5"> very essential to public</font>

69
00:02:49,020 --> 00:02:54,540
randomness and finally scalability so we

70
00:02:52,230 --> 00:02:58,049
can run our<font color="#CCCCCC"> protocols with potentially</font>

71
00:02:54,540 --> 00:02:59,820
hundreds<font color="#E5E5E5"> of</font><font color="#CCCCCC"> participants there are two</font>

72
00:02:58,050 --> 00:03:02,550
main approaches to public randomness

73
00:02:59,820 --> 00:03:04,829
that<font color="#CCCCCC"> require trusted third parties such</font>

74
00:03:02,550 --> 00:03:08,520
<font color="#CCCCCC">as the</font><font color="#E5E5E5"> list</font><font color="#CCCCCC"> Randleman weaken</font><font color="#E5E5E5"> and they</font>

75
00:03:04,830 --> 00:03:10,950
want without a project without<font color="#E5E5E5"> TPP</font>

76
00:03:08,520 --> 00:03:12,870
include<font color="#E5E5E5"> Bitcoin slow cryptographic hash</font>

77
00:03:10,950 --> 00:03:16,170
functions<font color="#CCCCCC"> lotteries financial data</font>

78
00:03:12,870 --> 00:03:18,690
<font color="#E5E5E5">however those require unusual trust and</font>

79
00:03:16,170 --> 00:03:20,369
hardness assumptions<font color="#E5E5E5"> examples of</font>

80
00:03:18,690 --> 00:03:22,859
approaches<font color="#CCCCCC"> that share our security model</font>

81
00:03:20,370 --> 00:03:25,380
<font color="#E5E5E5">include concluding and distributed key</font>

82
00:03:22,860 --> 00:03:29,340
generation<font color="#E5E5E5"> unfortunately those non scale</font>

83
00:03:25,380 --> 00:03:32,130
<font color="#E5E5E5">past tense of participants so at first</font>

84
00:03:29,340 --> 00:03:35,010
<font color="#E5E5E5">it seemed</font><font color="#CCCCCC"> that choosing random public</font>

85
00:03:32,130 --> 00:03:37,440
random numbers is simple the<font color="#E5E5E5"> most common</font>

86
00:03:35,010 --> 00:03:39,750
approach is to<font color="#E5E5E5"> combine random input from</font>

87
00:03:37,440 --> 00:03:42,120
all participants under the false

88
00:03:39,750 --> 00:03:44,340
assumption that we will<font color="#E5E5E5"> have one on its</font>

89
00:03:42,120 --> 00:03:46,320
party that contributes proper randomness

90
00:03:44,340 --> 00:03:48,750
<font color="#E5E5E5">then</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> output will be</font><font color="#CCCCCC"> sufficiently</font>

91
00:03:46,320 --> 00:03:50,549
random this approach provides no

92
00:03:48,750 --> 00:03:52,950
security because the last null has

93
00:03:50,550 --> 00:03:54,690
complete control<font color="#E5E5E5"> over the output because</font>

94
00:03:52,950 --> 00:03:57,570
they can choose their input after seeing

95
00:03:54,690 --> 00:03:59,520
everyone<font color="#E5E5E5"> else's input we can avoid</font><font color="#CCCCCC"> that</font>

96
00:03:57,570 --> 00:04:01,470
issue by using<font color="#E5E5E5"> commute and we will</font>

97
00:03:59,520 --> 00:04:04,380
approach<font color="#CCCCCC"> to force all the parties to</font>

98
00:04:01,470 --> 00:04:06,240
decide on<font color="#E5E5E5"> their input</font><font color="#CCCCCC"> upfront</font><font color="#E5E5E5"> however we</font>

99
00:04:04,380 --> 00:04:08,600
<font color="#CCCCCC">only get unpredictability out of this</font>

100
00:04:06,240 --> 00:04:11,400
approach because<font color="#CCCCCC"> the</font><font color="#E5E5E5"> last mode can still</font>

101
00:04:08,600 --> 00:04:14,519
the<font color="#E5E5E5"> dishonest node can choose not reveal</font>

102
00:04:11,400 --> 00:04:16,590
and<font color="#CCCCCC"> fourth</font><font color="#E5E5E5"> a protocol</font><font color="#CCCCCC"> we run</font><font color="#E5E5E5"> luckily we</font>

103
00:04:14,520 --> 00:04:19,530
kind of we can fix this<font color="#E5E5E5"> availability</font>

104
00:04:16,589 --> 00:04:22,409
issue with our<font color="#CCCCCC"> seeker trying this works</font>

105
00:04:19,529 --> 00:04:24,270
<font color="#E5E5E5">however it fails to</font><font color="#CCCCCC"> provide full bias</font>

106
00:04:22,410 --> 00:04:27,000
resistance because the<font color="#E5E5E5"> kernel card</font>

107
00:04:24,270 --> 00:04:30,039
parties can distribute bad shirt forcing

108
00:04:27,000 --> 00:04:33,250
honest parties to recover<font color="#E5E5E5"> inconsistent</font>

109
00:04:30,040 --> 00:04:35,320
<font color="#E5E5E5">randomness and this bring us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> rancher</font>

110
00:04:33,250 --> 00:04:37,300
<font color="#CCCCCC">a protocol that</font><font color="#E5E5E5"> applies verifiable</font>

111
00:04:35,320 --> 00:04:39,790
secret<font color="#CCCCCC"> training</font><font color="#E5E5E5"> and a point of no return</font>

112
00:04:37,300 --> 00:04:41,260
strategy<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that is not new and</font>

113
00:04:39,790 --> 00:04:43,750
<font color="#CCCCCC">has been used in the past</font>

114
00:04:41,260 --> 00:04:46,240
<font color="#E5E5E5">this approach achieves</font><font color="#CCCCCC"> the three main</font>

115
00:04:43,750 --> 00:04:48,700
properties<font color="#CCCCCC"> we wanted to achieve</font><font color="#E5E5E5"> however</font>

116
00:04:46,240 --> 00:04:51,160
is only verifiable by the participants

117
00:04:48,700 --> 00:04:59,380
not third parties and again it doesn't

118
00:04:51,160 --> 00:05:01,510
<font color="#E5E5E5">scale well look at our to randomness</font>

119
00:04:59,380 --> 00:05:05,250
protocols<font color="#E5E5E5"> Rand hound and rendered which</font>

120
00:05:01,510 --> 00:05:09,820
target<font color="#CCCCCC"> different deployment scenarios</font>

121
00:05:05,250 --> 00:05:11,980
for<font color="#E5E5E5"> Rand hound we particularly want</font><font color="#CCCCCC"> to</font>

122
00:05:09,820 --> 00:05:14,830
achieve<font color="#E5E5E5"> or improve on top of the</font>

123
00:05:11,980 --> 00:05:16,750
properties<font color="#CCCCCC"> that Rancher provides namely</font>

124
00:05:14,830 --> 00:05:19,060
we want to achieve verifiability by

125
00:05:16,750 --> 00:05:21,640
third parties<font color="#E5E5E5"> and we also want to</font>

126
00:05:19,060 --> 00:05:26,800
<font color="#E5E5E5">improve on the scalability of</font><font color="#CCCCCC"> rancher</font>

127
00:05:21,640 --> 00:05:28,479
which is<font color="#E5E5E5"> cubic so for that Rand hound is</font>

128
00:05:26,800 --> 00:05:31,120
a client and server randomness

129
00:05:28,480 --> 00:05:34,060
scavenging protocol<font color="#E5E5E5"> where an untrusted</font>

130
00:05:31,120 --> 00:05:36,550
client here depicted<font color="#E5E5E5"> in yellow uses a</font>

131
00:05:34,060 --> 00:05:38,770
large set of nearly stateless<font color="#E5E5E5"> and</font>

132
00:05:36,550 --> 00:05:40,720
independent service depicted in<font color="#CCCCCC"> gray to</font>

133
00:05:38,770 --> 00:05:42,880
generate this collective randomness and

134
00:05:40,720 --> 00:05:45,130
what the<font color="#E5E5E5"> client does is he is generating</font>

135
00:05:42,880 --> 00:05:48,010
a<font color="#E5E5E5"> configuration file that contains like</font>

136
00:05:45,130 --> 00:05:50,380
the<font color="#E5E5E5"> list of participants a timestamp</font>

137
00:05:48,010 --> 00:05:52,480
<font color="#CCCCCC">when the protocol run is scheduled</font><font color="#E5E5E5"> and</font>

138
00:05:50,380 --> 00:05:54,640
the purpose of<font color="#E5E5E5"> the output random and</font>

139
00:05:52,480 --> 00:05:58,090
then<font color="#E5E5E5"> he's sending this configuration</font>

140
00:05:54,640 --> 00:06:01,030
<font color="#E5E5E5">file</font><font color="#CCCCCC"> to the to the service initiating</font>

141
00:05:58,090 --> 00:06:04,000
<font color="#E5E5E5">the protocol run randomly the one-shot</font>

142
00:06:01,030 --> 00:06:06,520
approach approach<font color="#E5E5E5"> this means that if the</font>

143
00:06:04,000 --> 00:06:08,770
protocol run fails<font color="#CCCCCC"> the client would need</font>

144
00:06:06,520 --> 00:06:13,030
to regenerate<font color="#E5E5E5"> the configuration file and</font>

145
00:06:08,770 --> 00:06:15,010
<font color="#E5E5E5">start from scratch</font><font color="#CCCCCC"> new as an example</font><font color="#E5E5E5"> you</font>

146
00:06:13,030 --> 00:06:18,760
<font color="#CCCCCC">can take a lottery authority who once</font>

147
00:06:15,010 --> 00:06:22,890
which wants to generate<font color="#E5E5E5"> the winning</font>

148
00:06:18,760 --> 00:06:26,050
numbers by choosing<font color="#E5E5E5"> such a collective</font>

149
00:06:22,890 --> 00:06:27,940
randomness and the<font color="#E5E5E5"> lottery would commit</font>

150
00:06:26,050 --> 00:06:29,980
<font color="#E5E5E5">to the lottery parameters such as time</font>

151
00:06:27,940 --> 00:06:31,960
purpose and participants<font color="#E5E5E5"> and then</font>

152
00:06:29,980 --> 00:06:35,080
execute to the

153
00:06:31,960 --> 00:06:37,180
the protocol and<font color="#E5E5E5"> works together with</font>

154
00:06:35,080 --> 00:06:39,130
these reputable independent parties

155
00:06:37,180 --> 00:06:42,970
which<font color="#E5E5E5"> are the service to generate the</font>

156
00:06:39,130 --> 00:06:44,770
collective randomness<font color="#CCCCCC"> so there</font><font color="#E5E5E5"> are these</font>

157
00:06:42,970 --> 00:06:46,419
two<font color="#E5E5E5"> main properties that we</font><font color="#CCCCCC"> want to</font>

158
00:06:44,770 --> 00:06:48,490
<font color="#CCCCCC">achieve with with rental namely the</font>

159
00:06:46,419 --> 00:06:50,740
first is public<font color="#E5E5E5"> verifiability and how we</font>

160
00:06:48,490 --> 00:06:52,419
do<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> the first</font><font color="#CCCCCC"> building block that</font>

161
00:06:50,740 --> 00:06:54,630
<font color="#CCCCCC">we use is a scheme called public</font>

162
00:06:52,419 --> 00:06:57,969
verifiable secret<font color="#E5E5E5"> sharing which</font>

163
00:06:54,630 --> 00:07:00,130
generates shares that<font color="#E5E5E5"> are encrypted but</font>

164
00:06:57,970 --> 00:07:02,229
can be publicly verified by third

165
00:07:00,130 --> 00:07:05,889
parties thanks to zero knowledge proof

166
00:07:02,229 --> 00:07:08,260
<font color="#E5E5E5">and in particular this allows</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to</font>

167
00:07:05,889 --> 00:07:10,570
implement<font color="#E5E5E5"> a communication pattern where</font>

168
00:07:08,260 --> 00:07:12,400
only<font color="#E5E5E5"> the client</font><font color="#CCCCCC"> and all communication</font>

169
00:07:10,570 --> 00:07:14,800
only<font color="#E5E5E5"> happens exclusively between</font><font color="#CCCCCC"> the</font>

170
00:07:12,400 --> 00:07:17,080
server<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the client and the</font><font color="#CCCCCC"> client</font><font color="#E5E5E5"> and</font>

171
00:07:14,800 --> 00:07:19,389
<font color="#CCCCCC">there is no service to server</font>

172
00:07:17,080 --> 00:07:21,130
communication<font color="#E5E5E5"> another building block</font>

173
00:07:19,389 --> 00:07:24,310
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we are using is collective signing</font>

174
00:07:21,130 --> 00:07:26,139
which allows us<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> that the client</font>

175
00:07:24,310 --> 00:07:27,820
publicly commits to to their choices

176
00:07:26,139 --> 00:07:31,000
<font color="#E5E5E5">which are double-checked by the where</font>

177
00:07:27,820 --> 00:07:33,009
all the service and then the client

178
00:07:31,000 --> 00:07:35,650
since he's like the center<font color="#E5E5E5"> of this</font>

179
00:07:33,009 --> 00:07:37,660
protocol<font color="#E5E5E5"> is collecting all the the</font>

180
00:07:35,650 --> 00:07:39,609
messages during<font color="#E5E5E5"> one protocol run and</font>

181
00:07:37,660 --> 00:07:43,570
from that is creating a protocol

182
00:07:39,610 --> 00:07:45,880
transcript which allows afterwards<font color="#E5E5E5"> to</font>

183
00:07:43,570 --> 00:07:49,240
replay the protocol and thereby verify

184
00:07:45,880 --> 00:07:50,800
the collective randomness the next

185
00:07:49,240 --> 00:07:54,789
<font color="#CCCCCC">property that we</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to achieve is</font>

186
00:07:50,800 --> 00:07:56,710
scalability<font color="#E5E5E5"> when we are using this</font>

187
00:07:54,789 --> 00:07:59,110
secret<font color="#E5E5E5"> sharing scheme where</font><font color="#CCCCCC"> we have now</font>

188
00:07:56,710 --> 00:08:01,060
the problem<font color="#E5E5E5"> that when the number of</font>

189
00:07:59,110 --> 00:08:03,190
<font color="#E5E5E5">service is too big then the secret</font>

190
00:08:01,060 --> 00:08:04,960
sharing<font color="#E5E5E5"> becomes very</font><font color="#CCCCCC"> expensive</font><font color="#E5E5E5"> so what</font>

191
00:08:03,190 --> 00:08:06,820
we are proposing is we shard the

192
00:08:04,960 --> 00:08:09,280
<font color="#E5E5E5">participant into constant</font><font color="#CCCCCC"> size groups</font>

193
00:08:06,820 --> 00:08:13,389
<font color="#E5E5E5">and then only run the secret sharing</font>

194
00:08:09,280 --> 00:08:15,489
<font color="#E5E5E5">within those groups and the collective</font>

195
00:08:13,389 --> 00:08:17,889
randomness is then<font color="#E5E5E5"> that</font><font color="#CCCCCC"> every group</font>

196
00:08:15,490 --> 00:08:20,289
<font color="#E5E5E5">generates an output</font><font color="#CCCCCC"> and we combine all</font>

197
00:08:17,889 --> 00:08:23,620
<font color="#CCCCCC">the outputs of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> groups to</font><font color="#E5E5E5"> finally get</font>

198
00:08:20,289 --> 00:08:26,710
our collective random value the<font color="#E5E5E5"> problem</font>

199
00:08:23,620 --> 00:08:32,110
<font color="#CCCCCC">that we are</font><font color="#E5E5E5"> facing here however is</font><font color="#CCCCCC"> that</font>

200
00:08:26,710 --> 00:08:34,329
how should we<font color="#E5E5E5"> how should we like move</font>

201
00:08:32,110 --> 00:08:36,310
the assign the participants<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

202
00:08:34,330 --> 00:08:38,260
individual groups ideally want to<font color="#E5E5E5"> do so</font>

203
00:08:36,309 --> 00:08:40,319
so randomly<font color="#E5E5E5"> because we have to assume</font>

204
00:08:38,260 --> 00:08:42,610
<font color="#CCCCCC">that some of the</font><font color="#E5E5E5"> servers</font><font color="#CCCCCC"> are malicious</font>

205
00:08:40,320 --> 00:08:44,660
<font color="#CCCCCC">but</font><font color="#E5E5E5"> for that we would</font><font color="#CCCCCC"> need unbias</font>

206
00:08:42,610 --> 00:08:48,110
randomness which we don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> yet</font>

207
00:08:44,660 --> 00:08:51,680
so the approach that<font color="#E5E5E5"> we are proposing</font>

208
00:08:48,110 --> 00:08:54,050
<font color="#CCCCCC">here is the client</font><font color="#E5E5E5"> actually selects the</font>

209
00:08:51,680 --> 00:08:56,660
server grouping<font color="#E5E5E5"> and we designed ran down</font>

210
00:08:54,050 --> 00:08:59,359
in such a way that all<font color="#CCCCCC"> the client can do</font>

211
00:08:56,660 --> 00:09:01,520
is affect its own availability which

212
00:08:59,360 --> 00:09:06,590
means that the most thing that<font color="#E5E5E5"> he can do</font>

213
00:09:01,520 --> 00:09:09,350
is run<font color="#E5E5E5"> a self us attack and the security</font>

214
00:09:06,590 --> 00:09:11,420
we we guarantee the security of the

215
00:09:09,350 --> 00:09:13,790
protocols such that the client<font color="#E5E5E5"> can not</font>

216
00:09:11,420 --> 00:09:17,089
<font color="#E5E5E5">by us for example</font><font color="#CCCCCC"> the output</font><font color="#E5E5E5"> by using</font>

217
00:09:13,790 --> 00:09:19,189
the pigeonhole<font color="#E5E5E5"> principle which allows us</font>

218
00:09:17,090 --> 00:09:21,500
<font color="#E5E5E5">to say that at</font><font color="#CCCCCC"> least one group is</font><font color="#E5E5E5"> not</font>

219
00:09:19,190 --> 00:09:24,920
controlled by the adversary with very

220
00:09:21,500 --> 00:09:26,630
low probability and that<font color="#E5E5E5"> we are using</font>

221
00:09:24,920 --> 00:09:28,670
collective signing which prevents the

222
00:09:26,630 --> 00:09:31,640
client from<font color="#E5E5E5"> equivocating on the output</font>

223
00:09:28,670 --> 00:09:35,449
by letting the<font color="#CCCCCC"> service double-check on</font>

224
00:09:31,640 --> 00:09:38,090
the on the commitment of<font color="#E5E5E5"> the client as a</font>

225
00:09:35,450 --> 00:09:41,900
summary<font color="#CCCCCC"> Rand hound</font><font color="#E5E5E5"> achieves all</font>

226
00:09:38,090 --> 00:09:46,070
properties that we set out to<font color="#E5E5E5"> and it has</font>

227
00:09:41,900 --> 00:09:49,100
a linear<font color="#E5E5E5"> runtime complexity assuming</font>

228
00:09:46,070 --> 00:09:52,280
that<font color="#E5E5E5"> the size of the</font><font color="#CCCCCC"> groups is constant</font>

229
00:09:49,100 --> 00:09:54,350
and in the<font color="#E5E5E5"> next part we'll see how to</font>

230
00:09:52,280 --> 00:09:58,280
further improve on the scalability of

231
00:09:54,350 --> 00:10:00,770
the<font color="#CCCCCC"> renton protocol so in the previous</font>

232
00:09:58,280 --> 00:10:03,079
protocol<font color="#CCCCCC"> we had random generated</font><font color="#E5E5E5"> on</font>

233
00:10:00,770 --> 00:10:05,630
demand<font color="#E5E5E5"> by a client with fully in charge</font>

234
00:10:03,080 --> 00:10:08,930
<font color="#CCCCCC">and fully responsible for a protocol one</font>

235
00:10:05,630 --> 00:10:10,520
<font color="#E5E5E5">now in our second protocol run heard we</font>

236
00:10:08,930 --> 00:10:12,859
would like a continuous stream of

237
00:10:10,520 --> 00:10:15,260
randomness<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a way that doesn't require</font>

238
00:10:12,860 --> 00:10:17,900
any of<font color="#E5E5E5"> the nodes to</font><font color="#CCCCCC"> be fully responsible</font>

239
00:10:15,260 --> 00:10:20,360
for<font color="#E5E5E5"> the process one heard</font><font color="#CCCCCC"> relies on</font><font color="#E5E5E5"> a</font>

240
00:10:17,900 --> 00:10:22,220
leader<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is only</font><font color="#E5E5E5"> traffic with</font>

241
00:10:20,360 --> 00:10:24,830
availability<font color="#E5E5E5"> which means that the leader</font>

242
00:10:22,220 --> 00:10:27,830
simply coordinates the process among all

243
00:10:24,830 --> 00:10:30,260
of the known we also want to improve<font color="#E5E5E5"> on</font>

244
00:10:27,830 --> 00:10:32,510
the verification wonderful education to

245
00:10:30,260 --> 00:10:34,700
<font color="#E5E5E5">be efficient both in terms of the size</font>

246
00:10:32,510 --> 00:10:37,010
of the proof and<font color="#E5E5E5"> the time it takes to do</font>

247
00:10:34,700 --> 00:10:39,710
so we want it<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> single final</font>

248
00:10:37,010 --> 00:10:42,530
signature<font color="#E5E5E5"> finally we want</font><font color="#CCCCCC"> to improve on</font>

249
00:10:39,710 --> 00:10:44,360
the linear performance of one<font color="#E5E5E5"> hand we do</font>

250
00:10:42,530 --> 00:10:47,030
so by design run hard to be a

251
00:10:44,360 --> 00:10:49,670
decentralized<font color="#CCCCCC"> randomness become built as</font>

252
00:10:47,030 --> 00:10:51,589
a collective<font color="#E5E5E5"> Authority Authority which</font>

253
00:10:49,670 --> 00:10:53,510
<font color="#E5E5E5">is a potential large set</font><font color="#CCCCCC"> of servers</font><font color="#E5E5E5"> that</font>

254
00:10:51,590 --> 00:10:57,800
<font color="#E5E5E5">cooperate together in efficient and</font>

255
00:10:53,510 --> 00:10:58,460
publicly verifiable manner<font color="#E5E5E5"> the main idea</font>

256
00:10:57,800 --> 00:11:00,949
behind<font color="#CCCCCC"> run</font>

257
00:10:58,460 --> 00:11:03,590
<font color="#CCCCCC">Hurd is to create our collective</font>

258
00:11:00,950 --> 00:11:05,930
<font color="#E5E5E5">Randleman</font><font color="#CCCCCC"> as a series of collective</font>

259
00:11:03,590 --> 00:11:08,840
<font color="#CCCCCC">small signatures on a series of time</font>

260
00:11:05,930 --> 00:11:11,079
<font color="#CCCCCC">stamps</font><font color="#E5E5E5"> this gives us a small profile and</font>

261
00:11:08,840 --> 00:11:13,670
go to algorithmic complexity

262
00:11:11,080 --> 00:11:16,070
<font color="#E5E5E5">unfortunately we have to address the</font>

263
00:11:13,670 --> 00:11:19,010
<font color="#CCCCCC">variability</font><font color="#E5E5E5"> problem some node might fail</font>

264
00:11:16,070 --> 00:11:21,350
<font color="#E5E5E5">intentionally</font><font color="#CCCCCC"> or otherwise and one we do</font>

265
00:11:19,010 --> 00:11:23,360
the signature<font color="#E5E5E5"> will not be a function of</font>

266
00:11:21,350 --> 00:11:26,690
everyone's input<font color="#E5E5E5"> and that would allow</font>

267
00:11:23,360 --> 00:11:29,420
<font color="#CCCCCC">the adversary</font><font color="#E5E5E5"> to affect the output the</font>

268
00:11:26,690 --> 00:11:32,080
<font color="#CCCCCC">art would</font><font color="#E5E5E5"> not be biased resistance we</font>

269
00:11:29,420 --> 00:11:34,699
address the<font color="#CCCCCC"> problem by applying our</font>

270
00:11:32,080 --> 00:11:36,740
<font color="#E5E5E5">threshold</font><font color="#CCCCCC"> sooner signing which means</font>

271
00:11:34,700 --> 00:11:39,500
that we can create a signature in the

272
00:11:36,740 --> 00:11:41,450
presence of<font color="#E5E5E5"> tea out of and signer which</font>

273
00:11:39,500 --> 00:11:43,970
will allow<font color="#E5E5E5"> us to come to tolerate</font>

274
00:11:41,450 --> 00:11:46,250
failures collective randomness in this

275
00:11:43,970 --> 00:11:48,890
case will be<font color="#CCCCCC"> an aggregate of all of</font>

276
00:11:46,250 --> 00:11:51,290
those collective signatures generated by

277
00:11:48,890 --> 00:11:53,449
the respective groups<font color="#E5E5E5"> the one</font><font color="#CCCCCC"> herd has</font>

278
00:11:51,290 --> 00:11:56,030
two main<font color="#CCCCCC"> parts set up and around</font>

279
00:11:53,450 --> 00:11:58,190
<font color="#E5E5E5">function the goal of the</font><font color="#CCCCCC"> set up is to</font>

280
00:11:56,030 --> 00:12:00,920
<font color="#E5E5E5">set</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> the stage</font><font color="#CCCCCC"> for this continuous</font>

281
00:11:58,190 --> 00:12:03,410
randomness generation<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> setup who</font>

282
00:12:00,920 --> 00:12:05,120
first<font color="#E5E5E5"> elect a temporary leader for</font>

283
00:12:03,410 --> 00:12:06,620
example by choosing a node with<font color="#CCCCCC"> the</font>

284
00:12:05,120 --> 00:12:09,950
lowest<font color="#CCCCCC"> sticker</font><font color="#E5E5E5"> generated using</font>

285
00:12:06,620 --> 00:12:11,960
verifiable random function when that

286
00:12:09,950 --> 00:12:15,500
happens we'll<font color="#E5E5E5"> use the temporary leader</font>

287
00:12:11,960 --> 00:12:18,020
<font color="#E5E5E5">to run run hound</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> protocol</font><font color="#E5E5E5"> to</font>

288
00:12:15,500 --> 00:12:20,750
get good randomness then<font color="#CCCCCC"> that good</font>

289
00:12:18,020 --> 00:12:23,569
random<font color="#CCCCCC"> is will be used to decide servers</font>

290
00:12:20,750 --> 00:12:26,480
into<font color="#CCCCCC"> secure groups and those groups will</font>

291
00:12:23,570 --> 00:12:29,950
run over<font color="#E5E5E5"> on PSS each groups will further</font>

292
00:12:26,480 --> 00:12:33,230
create its<font color="#E5E5E5"> own public collective key and</font>

293
00:12:29,950 --> 00:12:35,270
lastly those group collective<font color="#CCCCCC"> Keys</font><font color="#E5E5E5"> will</font>

294
00:12:33,230 --> 00:12:37,850
<font color="#E5E5E5">be combined together to</font><font color="#CCCCCC"> create</font><font color="#E5E5E5"> the</font>

295
00:12:35,270 --> 00:12:40,220
<font color="#E5E5E5">overall public key for the entire run</font>

296
00:12:37,850 --> 00:12:42,590
<font color="#CCCCCC">heart</font><font color="#E5E5E5"> and that key will</font><font color="#CCCCCC"> be endorsed by</font>

297
00:12:40,220 --> 00:12:46,130
all<font color="#E5E5E5"> the participants</font><font color="#CCCCCC"> in a right of run</font>

298
00:12:42,590 --> 00:12:47,870
of<font color="#CCCCCC"> cosy collective signing and this</font>

299
00:12:46,130 --> 00:12:49,430
brings us to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> main part of run</font>

300
00:12:47,870 --> 00:12:52,520
<font color="#CCCCCC">Hardware the continuous random</font>

301
00:12:49,430 --> 00:12:55,010
generation happens we do so by<font color="#CCCCCC"> having</font>

302
00:12:52,520 --> 00:12:56,800
the<font color="#E5E5E5"> quality leader elected using our</font>

303
00:12:55,010 --> 00:12:59,720
good randomness from run<font color="#E5E5E5"> hound of</font>

304
00:12:56,800 --> 00:13:02,689
broadcast a series of<font color="#E5E5E5"> time stamps those</font>

305
00:12:59,720 --> 00:13:04,910
<font color="#E5E5E5">contestants are collectively</font><font color="#CCCCCC"> signed for</font>

306
00:13:02,690 --> 00:13:07,310
<font color="#CCCCCC">by</font><font color="#E5E5E5"> producing group tional signatures</font>

307
00:13:04,910 --> 00:13:10,459
within those<font color="#E5E5E5"> groups that we securely set</font>

308
00:13:07,310 --> 00:13:11,719
up our previously then those of partial

309
00:13:10,460 --> 00:13:14,389
<font color="#E5E5E5">signatures get combined</font>

310
00:13:11,720 --> 00:13:17,389
and the overall collect the signature of

311
00:13:14,389 --> 00:13:20,120
the entire<font color="#CCCCCC"> run herd is output of the</font>

312
00:13:17,389 --> 00:13:20,660
<font color="#CCCCCC">randomness</font><font color="#E5E5E5"> verification</font><font color="#CCCCCC"> it's nice</font><font color="#E5E5E5"> and</font>

313
00:13:20,120 --> 00:13:22,910
<font color="#E5E5E5">simple</font>

314
00:13:20,660 --> 00:13:25,790
<font color="#E5E5E5">I will random output is CR the</font>

315
00:13:22,910 --> 00:13:27,980
<font color="#E5E5E5">collective</font><font color="#CCCCCC"> non signature on a title can</font>

316
00:13:25,790 --> 00:13:31,420
<font color="#CCCCCC">be checked</font><font color="#E5E5E5"> as a single nor signature</font>

317
00:13:27,980 --> 00:13:34,310
<font color="#E5E5E5">under the collective key of</font><font color="#CCCCCC"> a run</font><font color="#E5E5E5"> hard</font>

318
00:13:31,420 --> 00:13:36,729
this<font color="#E5E5E5"> approach allows us to</font><font color="#CCCCCC"> achieve all</font>

319
00:13:34,310 --> 00:13:39,469
the properties<font color="#CCCCCC"> we set out to achieve</font>

320
00:13:36,730 --> 00:13:41,810
<font color="#CCCCCC">specifically it allows us to get much</font>

321
00:13:39,470 --> 00:13:44,540
better scalability<font color="#CCCCCC"> simply because we</font>

322
00:13:41,810 --> 00:13:48,829
achieved logarithmic performance<font color="#E5E5E5"> given a</font>

323
00:13:44,540 --> 00:13:51,529
constant<font color="#E5E5E5"> group size</font><font color="#CCCCCC"> C okay</font><font color="#E5E5E5"> so in the</font>

324
00:13:48,829 --> 00:13:53,269
next<font color="#CCCCCC"> main part of our talk we will look</font>

325
00:13:51,529 --> 00:13:57,620
at the<font color="#CCCCCC"> implementation and experimental</font>

326
00:13:53,269 --> 00:13:59,269
results<font color="#CCCCCC"> we implemented all the presented</font>

327
00:13:57,620 --> 00:14:02,269
protocols in the<font color="#E5E5E5"> underlying building</font>

328
00:13:59,269 --> 00:14:05,120
blocks in go<font color="#CCCCCC"> and for that we also use</font>

329
00:14:02,269 --> 00:14:07,250
<font color="#E5E5E5">the available data</font><font color="#CCCCCC"> slavery's which you</font>

330
00:14:05,120 --> 00:14:10,879
can check<font color="#E5E5E5"> out on on github</font><font color="#CCCCCC"> under the</font>

331
00:14:07,250 --> 00:14:13,129
depicted link<font color="#E5E5E5"> and for the experiment we</font>

332
00:14:10,879 --> 00:14:17,500
had a little<font color="#CCCCCC"> lab</font><font color="#E5E5E5"> setup or 32 physical</font>

333
00:14:13,129 --> 00:14:20,870
machines and to simulate more real-world

334
00:14:17,500 --> 00:14:22,309
<font color="#CCCCCC">network conditions we</font><font color="#E5E5E5"> restricted in the</font>

335
00:14:20,870 --> 00:14:26,269
network bandwidth and the round-trip

336
00:14:22,309 --> 00:14:28,430
<font color="#CCCCCC">latency for foreign rounds we measure</font>

337
00:14:26,269 --> 00:14:31,309
the time<font color="#CCCCCC"> it takes to</font><font color="#E5E5E5"> generate in verify</font>

338
00:14:28,430 --> 00:14:33,920
randomness for up to 1024 notes of

339
00:14:31,309 --> 00:14:37,250
<font color="#CCCCCC">Warren</font><font color="#E5E5E5"> group sizes as</font><font color="#CCCCCC"> a takeaway</font><font color="#E5E5E5"> it</font>

340
00:14:33,920 --> 00:14:38,959
takes<font color="#CCCCCC"> 200 90 seconds to generate and 160</font>

341
00:14:37,250 --> 00:14:42,170
seconds<font color="#E5E5E5"> to verify randomness in the</font>

342
00:14:38,959 --> 00:14:46,040
setup<font color="#E5E5E5"> of 1025 for notes and</font><font color="#CCCCCC"> a group size</font>

343
00:14:42,170 --> 00:14:48,349
of<font color="#E5E5E5"> 32 in the</font><font color="#CCCCCC"> same scenario we also</font>

344
00:14:46,040 --> 00:14:51,290
measured<font color="#CCCCCC"> the total CPU</font><font color="#E5E5E5"> cost of the</font>

345
00:14:48,350 --> 00:14:55,850
client<font color="#E5E5E5"> and all service and as a takeaway</font>

346
00:14:51,290 --> 00:14:59,120
<font color="#CCCCCC">again with 1024</font><font color="#E5E5E5"> service and a group size</font>

347
00:14:55,850 --> 00:15:02,209
of 32<font color="#E5E5E5"> it takes roughly</font><font color="#CCCCCC"> 10 CPU minutes to</font>

348
00:14:59,120 --> 00:15:06,709
do one<font color="#CCCCCC"> R and Hound</font><font color="#E5E5E5"> run which corresponds</font>

349
00:15:02,209 --> 00:15:09,439
to less than<font color="#CCCCCC"> 2</font><font color="#E5E5E5"> cent on Amazon ec2 for</font><font color="#CCCCCC"> R</font>

350
00:15:06,709 --> 00:15:11,300
<font color="#CCCCCC">and heard we also measure the</font><font color="#E5E5E5"> total</font>

351
00:15:09,439 --> 00:15:14,360
randomness generation time for up to

352
00:15:11,300 --> 00:15:17,089
1024 notes with groups of varying sizes

353
00:15:14,360 --> 00:15:20,059
<font color="#E5E5E5">and again as a takeaway it roughly takes</font>

354
00:15:17,089 --> 00:15:23,809
6 seconds<font color="#CCCCCC"> after a single</font><font color="#E5E5E5"> 10 minutes set</font>

355
00:15:20,059 --> 00:15:25,069
up in a setting with<font color="#E5E5E5"> 1024</font><font color="#CCCCCC"> nodes and</font><font color="#E5E5E5"> a</font>

356
00:15:23,809 --> 00:15:28,699
group size of<font color="#E5E5E5"> 32</font>

357
00:15:25,070 --> 00:15:31,180
this last graph shows<font color="#CCCCCC"> the that Rand</font>

358
00:15:28,700 --> 00:15:35,320
<font color="#CCCCCC">heard indeed achieves this</font><font color="#E5E5E5"> logarithmic</font>

359
00:15:31,180 --> 00:15:39,530
complexity<font color="#E5E5E5"> given a constant group set</font>

360
00:15:35,320 --> 00:15:42,170
finally to<font color="#E5E5E5"> conclude our talk</font><font color="#CCCCCC"> we showed</font>

361
00:15:39,530 --> 00:15:44,689
you that<font color="#CCCCCC"> the generation of public</font>

362
00:15:42,170 --> 00:15:47,660
randomness<font color="#E5E5E5"> faces two main issues</font><font color="#CCCCCC"> namely</font>

363
00:15:44,690 --> 00:15:50,150
<font color="#E5E5E5">trust in scale and we proposed two</font>

364
00:15:47,660 --> 00:15:52,939
protocols<font color="#CCCCCC"> in the T of n threshold</font>

365
00:15:50,150 --> 00:15:55,000
security model which achieve<font color="#E5E5E5"> all the</font>

366
00:15:52,940 --> 00:15:58,340
five properties<font color="#E5E5E5"> that are depicted here</font>

367
00:15:55,000 --> 00:16:00,410
<font color="#E5E5E5">specifically ran</font><font color="#CCCCCC"> down</font><font color="#E5E5E5"> has a complexity</font>

368
00:15:58,340 --> 00:16:02,450
linear complexity assuming constant

369
00:16:00,410 --> 00:16:04,339
group size and<font color="#E5E5E5"> rendered has a</font>

370
00:16:02,450 --> 00:16:05,990
logarithmic complexity<font color="#E5E5E5"> for more</font>

371
00:16:04,340 --> 00:16:11,600
information on the code you can<font color="#CCCCCC"> also</font>

372
00:16:05,990 --> 00:16:13,610
check out our github project so<font color="#E5E5E5"> now in</font>

373
00:16:11,600 --> 00:16:15,770
the<font color="#E5E5E5"> final moments of the talk I want to</font>

374
00:16:13,610 --> 00:16:18,350
show you a small<font color="#CCCCCC"> demo so can we</font><font color="#E5E5E5"> please</font>

375
00:16:15,770 --> 00:16:20,990
go to the website thank you

376
00:16:18,350 --> 00:16:24,170
so here you<font color="#CCCCCC"> see a randomness beacon that</font>

377
00:16:20,990 --> 00:16:27,110
we set up under<font color="#E5E5E5"> the link pulsar</font><font color="#CCCCCC"> dataset</font>

378
00:16:24,170 --> 00:16:29,930
<font color="#CCCCCC">CH which uses the rent hound</font><font color="#E5E5E5"> protocol in</font>

379
00:16:27,110 --> 00:16:32,660
the 64 node<font color="#E5E5E5"> setup and as you can</font><font color="#CCCCCC"> see</font>

380
00:16:29,930 --> 00:16:35,510
there is a bar going<font color="#E5E5E5"> from from left to</font>

381
00:16:32,660 --> 00:16:38,480
right and every 30 seconds<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Java</font>

382
00:16:35,510 --> 00:16:40,310
<font color="#CCCCCC">Script</font><font color="#E5E5E5"> grabs the the generated</font>

383
00:16:38,480 --> 00:16:43,280
randomness from<font color="#E5E5E5"> the service that is</font>

384
00:16:40,310 --> 00:16:44,839
running<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> background</font><font color="#E5E5E5"> and - now can</font>

385
00:16:43,280 --> 00:16:48,230
<font color="#CCCCCC">we</font><font color="#E5E5E5"> please scroll down a</font><font color="#CCCCCC"> bit</font>

386
00:16:44,840 --> 00:16:50,390
<font color="#CCCCCC">Thanks to retrieve and verify the</font>

387
00:16:48,230 --> 00:16:52,550
randomness you<font color="#E5E5E5"> can you have to install</font>

388
00:16:50,390 --> 00:16:54,530
go long and then execute a few<font color="#E5E5E5"> commands</font>

389
00:16:52,550 --> 00:16:56,839
and then you can locally on your

390
00:16:54,530 --> 00:16:59,510
computer<font color="#CCCCCC"> like</font><font color="#E5E5E5"> request randomness and</font>

391
00:16:56,840 --> 00:17:01,640
verify it locally<font color="#CCCCCC"> okay thanks please</font>

392
00:16:59,510 --> 00:17:03,819
back to the slides<font color="#CCCCCC"> okay that's it from</font>

393
00:17:01,640 --> 00:17:03,819
my side

394
00:17:03,890 --> 00:17:18,559
I<font color="#CCCCCC"> leaned Temescal a mighty</font><font color="#E5E5E5"> thanks for</font>

395
00:17:17,480 --> 00:17:21,439
your talk<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think it's a really</font><font color="#CCCCCC"> great</font>

396
00:17:18,559 --> 00:17:22,780
<font color="#E5E5E5">project</font><font color="#CCCCCC"> could you go</font><font color="#E5E5E5"> back to the</font><font color="#CCCCCC"> Rand</font>

397
00:17:21,439 --> 00:17:26,439
<font color="#E5E5E5">hound</font>

398
00:17:22,780 --> 00:17:27,770
<font color="#CCCCCC">slide where you</font><font color="#E5E5E5"> overview your system</font>

399
00:17:26,439 --> 00:17:34,220
<font color="#E5E5E5">okay</font>

400
00:17:27,770 --> 00:17:36,679
particular question both that yeah<font color="#CCCCCC"> so</font>

401
00:17:34,220 --> 00:17:38,600
you said here that<font color="#CCCCCC"> so the client isn't</font>

402
00:17:36,679 --> 00:17:41,330
<font color="#E5E5E5">someone</font><font color="#CCCCCC"> like a</font><font color="#E5E5E5"> lottery right like a</font>

403
00:17:38,600 --> 00:17:43,280
<font color="#CCCCCC">lottery manager</font><font color="#E5E5E5"> so suppose we have this</font>

404
00:17:41,330 --> 00:17:45,559
<font color="#E5E5E5">black box and we can generate randomness</font>

405
00:17:43,280 --> 00:17:48,139
<font color="#E5E5E5">which is a really cool primitive and now</font>

406
00:17:45,559 --> 00:17:51,230
I'm a lottery and I want to use this

407
00:17:48,140 --> 00:17:53,900
black box and prove to<font color="#CCCCCC"> you that I did</font><font color="#E5E5E5"> it</font>

408
00:17:51,230 --> 00:17:56,990
verifiably publicly but it seems<font color="#E5E5E5"> that I</font>

409
00:17:53,900 --> 00:18:00,410
I can still do this<font color="#CCCCCC"> n times</font><font color="#E5E5E5"> until the</font>

410
00:17:56,990 --> 00:18:01,910
result you know I'm pleased<font color="#E5E5E5"> with</font><font color="#CCCCCC"> it and</font>

411
00:18:00,410 --> 00:18:06,169
I<font color="#E5E5E5"> can give the lottery winnings to my</font>

412
00:18:01,910 --> 00:18:07,880
friend<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so it seems that I'm just</font>

413
00:18:06,169 --> 00:18:09,320
saying<font color="#E5E5E5"> maybe a future work is this a</font>

414
00:18:07,880 --> 00:18:11,570
direction that<font color="#E5E5E5"> you guys have considered</font>

415
00:18:09,320 --> 00:18:14,178
how do you prove also that you<font color="#E5E5E5"> only</font>

416
00:18:11,570 --> 00:18:15,950
engaged in this protocol<font color="#CCCCCC"> a limited</font>

417
00:18:14,179 --> 00:18:19,540
<font color="#CCCCCC">amount of times or</font><font color="#E5E5E5"> something like that</font>

418
00:18:15,950 --> 00:18:22,640
so with redhound that's indeed right so

419
00:18:19,540 --> 00:18:24,620
the client could abort the protocol<font color="#E5E5E5"> but</font>

420
00:18:22,640 --> 00:18:26,390
that's<font color="#E5E5E5"> also why we said this is a like a</font>

421
00:18:24,620 --> 00:18:29,629
one-shot approach in the case<font color="#CCCCCC"> of a</font>

422
00:18:26,390 --> 00:18:31,730
<font color="#E5E5E5">lottery if the lottery really fails to</font>

423
00:18:29,630 --> 00:18:34,549
run the finish the protocol and output

424
00:18:31,730 --> 00:18:36,950
the randomness it committed<font color="#E5E5E5"> to</font><font color="#CCCCCC"> and then</font>

425
00:18:34,549 --> 00:18:39,559
like all kinds<font color="#CCCCCC"> of alarm bells of course</font>

426
00:18:36,950 --> 00:18:41,809
should go off I'm<font color="#CCCCCC"> not seeing</font><font color="#E5E5E5"> the board</font>

427
00:18:39,559 --> 00:18:44,120
I'm<font color="#CCCCCC"> saying just finish and then run</font>

428
00:18:41,809 --> 00:18:46,280
again<font color="#E5E5E5"> and then finish and then again</font>

429
00:18:44,120 --> 00:18:48,678
which is basically the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> thing right</font>

430
00:18:46,280 --> 00:18:51,980
so the client can just decide<font color="#E5E5E5"> to abort</font>

431
00:18:48,679 --> 00:18:54,380
<font color="#E5E5E5">and then run it again but at that point</font>

432
00:18:51,980 --> 00:18:56,150
if the if the clients to<font color="#E5E5E5"> the to the</font>

433
00:18:54,380 --> 00:18:57,650
committed time is not delivering<font color="#E5E5E5"> the</font>

434
00:18:56,150 --> 00:18:59,840
randomness then all kinds<font color="#E5E5E5"> of alarm</font>

435
00:18:57,650 --> 00:19:02,960
<font color="#CCCCCC">clocks should go and there are indeed</font>

436
00:18:59,840 --> 00:19:05,659
also approaches that we that we<font color="#CCCCCC"> are</font>

437
00:19:02,960 --> 00:19:07,610
considering<font color="#CCCCCC"> where in the</font><font color="#E5E5E5"> end all the</font>

438
00:19:05,660 --> 00:19:10,160
participants<font color="#E5E5E5"> end up with the same random</font>

439
00:19:07,610 --> 00:19:11,899
<font color="#CCCCCC">stream</font><font color="#E5E5E5"> but this of course is has a much</font>

440
00:19:10,160 --> 00:19:16,900
higher computational complexity than

441
00:19:11,900 --> 00:19:20,110
<font color="#CCCCCC">Rand hound thank you hi</font>

442
00:19:16,900 --> 00:19:22,930
<font color="#CCCCCC">per Union City so my question is again</font>

443
00:19:20,110 --> 00:19:25,270
regarding<font color="#CCCCCC"> line hound</font><font color="#E5E5E5"> I'm kind of similar</font>

444
00:19:22,930 --> 00:19:27,490
<font color="#E5E5E5">but if the client</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> one who's</font><font color="#E5E5E5"> going</font>

445
00:19:25,270 --> 00:19:29,440
to choose a<font color="#E5E5E5"> group can he make</font><font color="#CCCCCC"> sure that</font>

446
00:19:27,490 --> 00:19:31,720
<font color="#CCCCCC">it can</font><font color="#E5E5E5"> there be situation where</font><font color="#CCCCCC"> he want</font>

447
00:19:29,440 --> 00:19:34,660
to<font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that he can take so by</font>

448
00:19:31,720 --> 00:19:37,810
<font color="#CCCCCC">making the</font><font color="#E5E5E5"> groups such that all of them</font>

449
00:19:34,660 --> 00:19:39,520
gives the<font color="#E5E5E5"> randomness as he wants because</font>

450
00:19:37,810 --> 00:19:42,190
the assumption is<font color="#E5E5E5"> you want one group to</font>

451
00:19:39,520 --> 00:19:44,139
be honest but is it<font color="#CCCCCC"> possible that if it</font>

452
00:19:42,190 --> 00:19:45,640
is up to<font color="#CCCCCC"> you if you pick the group so</font>

453
00:19:44,140 --> 00:19:48,670
<font color="#E5E5E5">that no group is honest and then he can</font>

454
00:19:45,640 --> 00:19:50,230
play or something<font color="#E5E5E5"> um so no</font><font color="#CCCCCC"> since the</font>

455
00:19:48,670 --> 00:19:52,870
pigeonhole<font color="#E5E5E5"> principle you can</font><font color="#CCCCCC"> add</font>

456
00:19:50,230 --> 00:19:54,580
yourself<font color="#CCCCCC"> right if you have</font><font color="#E5E5E5"> h nodes and</font>

457
00:19:52,870 --> 00:19:56,860
<font color="#E5E5E5">you have to arrange them into groups try</font>

458
00:19:54,580 --> 00:19:58,720
<font color="#E5E5E5">it at least</font><font color="#CCCCCC"> one group will have higher</font>

459
00:19:56,860 --> 00:20:02,169
than average number of honest nodes and

460
00:19:58,720 --> 00:20:04,870
we set up the threshold recovery to<font color="#E5E5E5"> be</font>

461
00:20:02,170 --> 00:20:07,630
such<font color="#CCCCCC"> that they need that extra honest</font>

462
00:20:04,870 --> 00:20:09,969
node so it will<font color="#E5E5E5"> not be possible and for</font>

463
00:20:07,630 --> 00:20:12,130
us<font color="#E5E5E5"> it's enough that this happens for at</font>

464
00:20:09,970 --> 00:20:14,080
least one group with high<font color="#CCCCCC"> probability it</font>

465
00:20:12,130 --> 00:20:15,520
<font color="#E5E5E5">will hover for more groups but just</font>

466
00:20:14,080 --> 00:20:17,710
<font color="#CCCCCC">because we have the guarantee of a</font>

467
00:20:15,520 --> 00:20:19,780
single uncompromised group this will not

468
00:20:17,710 --> 00:20:21,730
happen<font color="#CCCCCC"> okay so you</font><font color="#E5E5E5"> are doing</font><font color="#CCCCCC"> overall you</font>

469
00:20:19,780 --> 00:20:27,220
still<font color="#CCCCCC"> L on its majority</font><font color="#E5E5E5"> and that's a</font>

470
00:20:21,730 --> 00:20:30,070
random pigeon correct<font color="#E5E5E5"> Matt is the money</font>

471
00:20:27,220 --> 00:20:32,170
from visa research and very nice work

472
00:20:30,070 --> 00:20:33,760
and so I got<font color="#E5E5E5"> a question that so you</font>

473
00:20:32,170 --> 00:20:37,750
mentioned<font color="#E5E5E5"> that the failure probability</font>

474
00:20:33,760 --> 00:20:41,470
<font color="#E5E5E5">is constant so I mean it was like</font>

475
00:20:37,750 --> 00:20:44,590
something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> 8% I</font><font color="#E5E5E5"> mean less than</font>

476
00:20:41,470 --> 00:20:47,260
<font color="#E5E5E5">there's</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> 1% a failure probability so if</font>

477
00:20:44,590 --> 00:20:50,139
we think that like every multiple rounds

478
00:20:47,260 --> 00:20:52,540
of running the generating randomness the

479
00:20:50,140 --> 00:20:55,450
algorithm fails<font color="#E5E5E5"> I mean we probably want</font>

480
00:20:52,540 --> 00:20:57,310
after<font color="#CCCCCC"> that</font><font color="#E5E5E5"> number of rounds so I want to</font>

481
00:20:55,450 --> 00:20:59,410
<font color="#E5E5E5">know how to</font><font color="#CCCCCC"> we probably</font><font color="#E5E5E5"> you need to run</font>

482
00:20:57,310 --> 00:21:03,159
<font color="#CCCCCC">this setup</font><font color="#E5E5E5"> again from scratch everything</font>

483
00:20:59,410 --> 00:21:06,180
is<font color="#E5E5E5"> from scratch what percentage of the</font>

484
00:21:03,160 --> 00:21:09,550
<font color="#E5E5E5">cost that round hand</font><font color="#CCCCCC"> and round hit have</font>

485
00:21:06,180 --> 00:21:11,770
<font color="#E5E5E5">I mean over say</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> hours of running</font>

486
00:21:09,550 --> 00:21:14,080
<font color="#E5E5E5">over this set of brain trying to set up</font>

487
00:21:11,770 --> 00:21:17,200
again<font color="#E5E5E5"> what percentage of the you know</font>

488
00:21:14,080 --> 00:21:22,149
<font color="#E5E5E5">time and</font><font color="#CCCCCC"> expenses will be wasted</font><font color="#E5E5E5"> for</font>

489
00:21:17,200 --> 00:21:24,610
wanting to<font color="#E5E5E5"> set up again and</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> so for</font>

490
00:21:22,150 --> 00:21:26,350
for for rent<font color="#CCCCCC"> hound this is like</font><font color="#E5E5E5"> really</font>

491
00:21:24,610 --> 00:21:28,209
just an<font color="#CCCCCC"> on demand approach right because</font>

492
00:21:26,350 --> 00:21:30,490
you just have<font color="#E5E5E5"> these servers out</font><font color="#CCCCCC"> there</font>

493
00:21:28,210 --> 00:21:32,679
which do not<font color="#E5E5E5"> know of each other</font>

494
00:21:30,490 --> 00:21:35,380
and the client<font color="#CCCCCC"> just comes and grabs the</font>

495
00:21:32,679 --> 00:21:37,840
randomness<font color="#CCCCCC"> per and heard you indeed need</font>

496
00:21:35,380 --> 00:21:41,679
to rerun the<font color="#CCCCCC"> setup and</font><font color="#E5E5E5"> this is like as</font>

497
00:21:37,840 --> 00:21:44,740
we as<font color="#E5E5E5"> we've showed before for 1,000</font>

498
00:21:41,679 --> 00:21:47,050
servers it's roughly<font color="#E5E5E5"> 10</font><font color="#CCCCCC"> minutes to reset</font>

499
00:21:44,740 --> 00:21:50,020
up the whole<font color="#E5E5E5"> process then we assume</font>

500
00:21:47,050 --> 00:21:53,260
<font color="#E5E5E5">since we then have the these groups</font>

501
00:21:50,020 --> 00:21:56,350
assembled<font color="#CCCCCC"> and since they are using a</font>

502
00:21:53,260 --> 00:21:59,080
threshold crypto we allow actually<font color="#CCCCCC"> two</font>

503
00:21:56,350 --> 00:22:03,639
that<font color="#E5E5E5"> some of these service in the groups</font>

504
00:21:59,080 --> 00:22:05,678
fail and and how long can<font color="#CCCCCC"> a Ronde</font><font color="#E5E5E5"> you</font>

505
00:22:03,640 --> 00:22:08,050
said<font color="#E5E5E5"> that's every six minutes minutes</font><font color="#CCCCCC"> I</font>

506
00:22:05,679 --> 00:22:10,990
<font color="#E5E5E5">can generate one</font><font color="#CCCCCC"> second</font><font color="#E5E5E5"> it's the second</font>

507
00:22:08,050 --> 00:22:13,030
second and how so totally around<font color="#CCCCCC"> two</font>

508
00:22:10,990 --> 00:22:14,740
<font color="#E5E5E5">hours you</font><font color="#CCCCCC"> can you can</font><font color="#E5E5E5"> I mean this is</font>

509
00:22:13,030 --> 00:22:17,830
also under the assumption that we<font color="#CCCCCC"> are</font>

510
00:22:14,740 --> 00:22:19,059
facing<font color="#E5E5E5"> an active adversary so if the the</font>

511
00:22:17,830 --> 00:22:21,699
<font color="#E5E5E5">system of course is not under attack</font>

512
00:22:19,059 --> 00:22:25,720
<font color="#E5E5E5">then you can just go and run it all the</font>

513
00:22:21,700 --> 00:22:28,210
<font color="#E5E5E5">time and then maybe let's say you can do</font>

514
00:22:25,720 --> 00:22:31,360
a reset up every week or<font color="#CCCCCC"> so to reshuffle</font>

515
00:22:28,210 --> 00:22:33,309
<font color="#E5E5E5">the groups or like if some</font><font color="#CCCCCC"> servers</font>

516
00:22:31,360 --> 00:22:35,020
failed and are<font color="#CCCCCC"> unresponsive and</font><font color="#E5E5E5"> in the</font>

517
00:22:33,309 --> 00:22:37,210
new<font color="#CCCCCC"> setup you don't</font><font color="#E5E5E5"> want to have them of</font>

518
00:22:35,020 --> 00:22:38,920
course or the new servers appeared and

519
00:22:37,210 --> 00:22:41,440
<font color="#E5E5E5">you want to include them in the</font><font color="#CCCCCC"> next</font><font color="#E5E5E5"> set</font>

520
00:22:38,920 --> 00:22:45,460
<font color="#E5E5E5">of face thank you</font><font color="#CCCCCC"> alright let's</font><font color="#E5E5E5"> all</font>

521
00:22:41,440 --> 00:22:46,050
think of info<font color="#E5E5E5"> and all the others because</font>

522
00:22:45,460 --> 00:22:49,280
<font color="#E5E5E5">new stuff</font>

523
00:22:46,050 --> 00:22:49,280
[Applause]

