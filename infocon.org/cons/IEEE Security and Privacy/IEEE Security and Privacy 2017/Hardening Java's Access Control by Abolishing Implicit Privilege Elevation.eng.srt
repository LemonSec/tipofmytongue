1
00:00:07,520 --> 00:00:10,629
hello everyone my name is<font color="#CCCCCC"> Philip Athena</font>

2
00:00:09,350 --> 00:00:12,219
and I would present hard

3
00:00:10,630 --> 00:00:14,680
<font color="#CCCCCC">Java's</font><font color="#E5E5E5"> access control by abolishing</font>

4
00:00:12,220 --> 00:00:16,750
<font color="#E5E5E5">implicit privilege elevation this is</font>

5
00:00:14,680 --> 00:00:20,410
joint work with Benjamin Johanna<font color="#E5E5E5"> /eric</font>

6
00:00:16,750 --> 00:00:22,990
<font color="#CCCCCC">button and mahogany</font><font color="#E5E5E5"> so Java has been</font>

7
00:00:20,410 --> 00:00:24,190
<font color="#E5E5E5">around for about</font><font color="#CCCCCC"> 20 years</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it was one</font>

8
00:00:22,990 --> 00:00:25,689
of<font color="#CCCCCC"> the first platforms that was</font>

9
00:00:24,190 --> 00:00:27,790
specifically<font color="#CCCCCC"> designed for the secure</font>

10
00:00:25,689 --> 00:00:31,300
execution of untrusted code

11
00:00:27,790 --> 00:00:34,000
however as<font color="#E5E5E5"> Cisco's annual</font><font color="#CCCCCC"> security</font>

12
00:00:31,300 --> 00:00:38,620
reports show it is also<font color="#CCCCCC"> one of the top</font>

13
00:00:34,000 --> 00:00:39,940
attack vectors for web exploits<font color="#CCCCCC"> and we</font>

14
00:00:38,620 --> 00:00:41,980
really want to understand<font color="#CCCCCC"> what</font>

15
00:00:39,940 --> 00:00:43,690
contributes to<font color="#E5E5E5"> Java</font><font color="#CCCCCC"> sin security</font><font color="#E5E5E5"> so that</font>

16
00:00:41,980 --> 00:00:46,449
<font color="#E5E5E5">we also learn for the design the secure</font>

17
00:00:43,690 --> 00:00:48,489
design of other systems as well<font color="#CCCCCC"> before</font>

18
00:00:46,449 --> 00:00:50,620
<font color="#CCCCCC">we dive into</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> details of our study</font>

19
00:00:48,489 --> 00:00:54,940
let's have a brief look<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> basics of</font>

20
00:00:50,620 --> 00:00:59,709
<font color="#E5E5E5">the Java security model</font><font color="#CCCCCC"> the timer</font>

21
00:00:54,940 --> 00:01:00,849
doesn't<font color="#E5E5E5"> work by the way thanks I</font><font color="#CCCCCC"> guess I</font>

22
00:00:59,710 --> 00:01:03,940
just<font color="#E5E5E5"> gained a minute</font>

23
00:01:00,850 --> 00:01:08,020
<font color="#CCCCCC">thanks so the</font><font color="#E5E5E5"> Java</font><font color="#CCCCCC"> runtime environment</font>

24
00:01:03,940 --> 00:01:10,509
is<font color="#E5E5E5"> execute applications and on a high</font>

25
00:01:08,020 --> 00:01:12,420
<font color="#E5E5E5">level it comprises two components on the</font>

26
00:01:10,510 --> 00:01:15,189
one hand<font color="#E5E5E5"> it's the java virtual</font><font color="#CCCCCC"> machine</font>

27
00:01:12,420 --> 00:01:18,100
<font color="#CCCCCC">which</font><font color="#E5E5E5"> provides basic functionality for</font>

28
00:01:15,189 --> 00:01:20,979
program execution including<font color="#E5E5E5"> just-in-time</font>

29
00:01:18,100 --> 00:01:23,020
compilation<font color="#E5E5E5"> memory management and other</font>

30
00:01:20,979 --> 00:01:25,030
basic functionality and on the other

31
00:01:23,020 --> 00:01:28,390
<font color="#E5E5E5">hand it comprises the</font><font color="#CCCCCC"> Java class library</font>

32
00:01:25,030 --> 00:01:31,329
which is mostly<font color="#E5E5E5"> implemented in Java</font><font color="#CCCCCC"> and</font>

33
00:01:28,390 --> 00:01:33,399
it's a<font color="#CCCCCC"> collection of a large number of</font>

34
00:01:31,329 --> 00:01:36,130
system classes that provides common

35
00:01:33,399 --> 00:01:38,500
functionality<font color="#E5E5E5"> like print stream print</font>

36
00:01:36,130 --> 00:01:42,548
for instance<font color="#E5E5E5"> or random nextint and many</font>

37
00:01:38,500 --> 00:01:47,100
many other commonly<font color="#E5E5E5"> used functionality</font>

38
00:01:42,549 --> 00:01:49,479
besides security besides non security

39
00:01:47,100 --> 00:01:50,979
sensitive functionality like printer

40
00:01:49,479 --> 00:01:53,350
next<font color="#E5E5E5"> and there is</font><font color="#CCCCCC"> also security</font>

41
00:01:50,979 --> 00:01:54,969
sensitive functionality like file system

42
00:01:53,350 --> 00:01:57,038
access likes I'll delete in this example

43
00:01:54,969 --> 00:01:59,320
here which should be restricted<font color="#E5E5E5"> to make</font>

44
00:01:57,039 --> 00:02:00,999
sure that untrusted code cannot use such

45
00:01:59,320 --> 00:02:04,389
functionality<font color="#E5E5E5"> to harm</font><font color="#CCCCCC"> allahö host</font>

46
00:02:00,999 --> 00:02:06,729
system so applications are free to call

47
00:02:04,390 --> 00:02:10,449
the<font color="#E5E5E5"> non security critical</font>

48
00:02:06,729 --> 00:02:12,160
functionalities<font color="#CCCCCC"> once they call security</font>

49
00:02:10,449 --> 00:02:15,429
<font color="#CCCCCC">critical functionality like</font><font color="#E5E5E5"> file delete</font>

50
00:02:12,160 --> 00:02:16,840
here<font color="#E5E5E5"> something special happens so the</font>

51
00:02:15,430 --> 00:02:18,730
security critical<font color="#E5E5E5"> functionality</font><font color="#CCCCCC"> will</font>

52
00:02:16,840 --> 00:02:21,190
consult<font color="#E5E5E5"> the security manager in the</font>

53
00:02:18,730 --> 00:02:23,170
class library<font color="#E5E5E5"> to</font><font color="#CCCCCC"> check if access to the</font>

54
00:02:21,190 --> 00:02:24,609
second sentence of functionality shall

55
00:02:23,170 --> 00:02:26,769
be allowed or<font color="#CCCCCC"> not</font>

56
00:02:24,610 --> 00:02:28,420
so the<font color="#CCCCCC"> security manager</font><font color="#E5E5E5"> is in charge of</font>

57
00:02:26,770 --> 00:02:32,200
<font color="#CCCCCC">deciding whether access shall be granted</font>

58
00:02:28,420 --> 00:02:34,869
<font color="#CCCCCC">or not so how does the</font><font color="#E5E5E5"> security manager</font>

59
00:02:32,200 --> 00:02:37,299
<font color="#E5E5E5">decide this</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> this that you suspect</font>

60
00:02:34,870 --> 00:02:41,500
<font color="#E5E5E5">based access control what we see here is</font>

61
00:02:37,300 --> 00:02:43,120
a simple example<font color="#E5E5E5"> of a fort call stack of</font>

62
00:02:41,500 --> 00:02:47,140
an application<font color="#CCCCCC"> that attempts to</font><font color="#E5E5E5"> delete a</font>

63
00:02:43,120 --> 00:02:49,930
file<font color="#E5E5E5"> so when the</font><font color="#CCCCCC"> security manager</font><font color="#E5E5E5"> the</font>

64
00:02:47,140 --> 00:02:52,779
<font color="#E5E5E5">first thing we do is we assign</font>

65
00:02:49,930 --> 00:02:56,500
permissions to our code<font color="#E5E5E5"> as we can see</font>

66
00:02:52,780 --> 00:02:58,450
here<font color="#E5E5E5"> classes that belong to the</font><font color="#CCCCCC"> Java</font>

67
00:02:56,500 --> 00:02:59,680
class<font color="#CCCCCC"> library like file and Security</font>

68
00:02:58,450 --> 00:03:02,950
Manager<font color="#E5E5E5"> are always assigned all</font>

69
00:02:59,680 --> 00:03:07,390
privileges<font color="#E5E5E5"> automatically which is here</font>

70
00:03:02,950 --> 00:03:10,780
indicated by the green checkmark sign<font color="#CCCCCC"> we</font>

71
00:03:07,390 --> 00:03:13,720
can however assign privileges<font color="#E5E5E5"> to code of</font>

72
00:03:10,780 --> 00:03:15,520
application<font color="#CCCCCC"> classes using</font><font color="#E5E5E5"> a customized</font>

73
00:03:13,720 --> 00:03:17,590
policy file in this example here we

74
00:03:15,520 --> 00:03:19,630
<font color="#E5E5E5">decided</font><font color="#CCCCCC"> to grant no privileges to our</font>

75
00:03:17,590 --> 00:03:21,490
application code<font color="#E5E5E5"> at all to make sure</font>

76
00:03:19,630 --> 00:03:24,220
<font color="#E5E5E5">that it is securely contained and cannot</font>

77
00:03:21,490 --> 00:03:26,200
harm our system so<font color="#CCCCCC"> when now the</font><font color="#E5E5E5"> security</font>

78
00:03:24,220 --> 00:03:29,680
manager<font color="#CCCCCC"> is being</font><font color="#E5E5E5"> accessed is being asked</font>

79
00:03:26,200 --> 00:03:31,329
<font color="#E5E5E5">to access to grant or</font><font color="#CCCCCC"> deny access to the</font>

80
00:03:29,680 --> 00:03:34,060
<font color="#CCCCCC">file delete functionality</font><font color="#E5E5E5"> it will</font>

81
00:03:31,330 --> 00:03:36,880
perform a stack walk and the stack walk

82
00:03:34,060 --> 00:03:39,130
is simply checking<font color="#E5E5E5"> for each and every</font>

83
00:03:36,880 --> 00:03:40,840
<font color="#CCCCCC">caller</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> call stack</font><font color="#E5E5E5"> if every caller</font>

84
00:03:39,130 --> 00:03:43,150
is assigned appropriate privileges for

85
00:03:40,840 --> 00:03:45,370
<font color="#CCCCCC">the desired functionality or not in this</font>

86
00:03:43,150 --> 00:03:47,380
example here we<font color="#E5E5E5"> will see that the check</font>

87
00:03:45,370 --> 00:03:50,050
<font color="#E5E5E5">walk will see that the security</font><font color="#CCCCCC"> manager</font>

88
00:03:47,380 --> 00:03:51,910
and file delete are both system classes

89
00:03:50,050 --> 00:03:53,590
and<font color="#CCCCCC"> thus assigned all privileges but at</font>

90
00:03:51,910 --> 00:03:56,440
<font color="#E5E5E5">this point it will see that untrusted</font>

91
00:03:53,590 --> 00:03:57,640
the class of<font color="#E5E5E5"> our application here</font><font color="#CCCCCC"> has</font>

92
00:03:56,440 --> 00:03:59,440
not<font color="#E5E5E5"> been assigned appropriate for</font>

93
00:03:57,640 --> 00:04:01,089
privileges and<font color="#E5E5E5"> in this example here</font>

94
00:03:59,440 --> 00:04:06,280
access to the delete<font color="#CCCCCC"> functionality will</font>

95
00:04:01,090 --> 00:04:08,680
<font color="#CCCCCC">be denied so this is how basically</font>

96
00:04:06,280 --> 00:04:10,570
access control<font color="#CCCCCC"> in Java works and what</font><font color="#E5E5E5"> we</font>

97
00:04:08,680 --> 00:04:12,550
<font color="#E5E5E5">keep in mind now is that sensitive</font>

98
00:04:10,570 --> 00:04:16,358
methods in system classes are guarded by

99
00:04:12,550 --> 00:04:18,549
<font color="#CCCCCC">information checks now until</font><font color="#E5E5E5"> this point</font>

100
00:04:16,358 --> 00:04:20,079
<font color="#E5E5E5">this is very</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> known and this</font><font color="#CCCCCC"> is how</font>

101
00:04:18,548 --> 00:04:21,940
the security<font color="#CCCCCC"> model is supposed to work</font>

102
00:04:20,079 --> 00:04:23,770
<font color="#CCCCCC">what we find in our study is however</font>

103
00:04:21,940 --> 00:04:26,500
<font color="#E5E5E5">that there is a deviation from this</font>

104
00:04:23,770 --> 00:04:29,530
model which is basically implicit

105
00:04:26,500 --> 00:04:31,450
<font color="#E5E5E5">implicit privilege elevation consider</font>

106
00:04:29,530 --> 00:04:33,760
for instance<font color="#CCCCCC"> this hypothetical example</font>

107
00:04:31,450 --> 00:04:35,919
here consider that just suppose that

108
00:04:33,760 --> 00:04:37,090
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> system class here the system</font>

109
00:04:35,919 --> 00:04:39,460
class has

110
00:04:37,090 --> 00:04:42,210
<font color="#E5E5E5">two methods open file and get public</font>

111
00:04:39,460 --> 00:04:45,280
lock<font color="#E5E5E5"> and the open file method</font><font color="#CCCCCC"> receives a</font>

112
00:04:42,210 --> 00:04:47,919
string argument which represents a path

113
00:04:45,280 --> 00:04:50,580
to a file<font color="#E5E5E5"> and it just returns a file</font>

114
00:04:47,919 --> 00:04:53,080
handle<font color="#CCCCCC"> to the file</font><font color="#E5E5E5"> that's all it does</font>

115
00:04:50,580 --> 00:04:55,419
<font color="#CCCCCC">get public lock uses</font><font color="#E5E5E5"> this functionality</font>

116
00:04:53,080 --> 00:04:58,690
<font color="#E5E5E5">to</font><font color="#CCCCCC"> get a file handle to lock</font><font color="#E5E5E5"> dot txt</font>

117
00:04:55,419 --> 00:05:00,370
<font color="#CCCCCC">that's it since open file provides</font>

118
00:04:58,690 --> 00:05:04,330
access to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> file system which we</font>

119
00:05:00,370 --> 00:05:06,100
consider<font color="#E5E5E5"> sensitive we see that here is a</font>

120
00:05:04,330 --> 00:05:09,010
permission check and the permission

121
00:05:06,100 --> 00:05:11,790
<font color="#E5E5E5">check is simply executed by</font><font color="#CCCCCC"> a call to</font>

122
00:05:09,010 --> 00:05:14,860
system<font color="#E5E5E5"> security manager check permission</font>

123
00:05:11,790 --> 00:05:17,169
what we also find<font color="#E5E5E5"> however is this</font>

124
00:05:14,860 --> 00:05:19,389
conditional here<font color="#E5E5E5"> and this is what we</font>

125
00:05:17,169 --> 00:05:22,719
call a shortcut<font color="#E5E5E5"> because this conditional</font>

126
00:05:19,389 --> 00:05:24,160
here guards<font color="#E5E5E5"> the permission check so</font>

127
00:05:22,720 --> 00:05:25,900
under certain circumstances the

128
00:05:24,160 --> 00:05:28,630
<font color="#E5E5E5">permission check will simply be skipped</font>

129
00:05:25,900 --> 00:05:32,080
<font color="#E5E5E5">and not executed at all</font><font color="#CCCCCC"> at all</font>

130
00:05:28,630 --> 00:05:34,960
so in<font color="#CCCCCC"> this example that</font><font color="#E5E5E5"> we see here the</font>

131
00:05:32,080 --> 00:05:37,060
shortcut checks if the immediate<font color="#E5E5E5"> caller</font>

132
00:05:34,960 --> 00:05:39,430
of open file<font color="#E5E5E5"> so the method that</font><font color="#CCCCCC"> calls</font>

133
00:05:37,060 --> 00:05:41,770
<font color="#E5E5E5">open file is part of a system class and</font>

134
00:05:39,430 --> 00:05:44,950
if it is part of<font color="#E5E5E5"> the system class no</font>

135
00:05:41,770 --> 00:05:48,820
permission check will be executed now

136
00:05:44,950 --> 00:05:51,010
this has interesting consequences<font color="#E5E5E5"> if in</font>

137
00:05:48,820 --> 00:05:52,930
our application<font color="#E5E5E5"> we implement for</font>

138
00:05:51,010 --> 00:05:55,930
instance<font color="#E5E5E5"> the exact same functionality</font>

139
00:05:52,930 --> 00:05:57,849
that get public<font color="#E5E5E5"> lock implements then it</font>

140
00:05:55,930 --> 00:05:59,889
depends<font color="#E5E5E5"> if our code has been assigned</font>

141
00:05:57,849 --> 00:06:03,880
privileges or not if it<font color="#E5E5E5"> has not been</font>

142
00:05:59,889 --> 00:06:06,490
<font color="#E5E5E5">assigned privileges access to lock</font><font color="#CCCCCC"> txt</font>

143
00:06:03,880 --> 00:06:07,990
<font color="#E5E5E5">will fail because if we call open</font><font color="#CCCCCC"> file a</font>

144
00:06:06,490 --> 00:06:11,760
commission check will<font color="#CCCCCC"> be executed</font><font color="#E5E5E5"> if</font>

145
00:06:07,990 --> 00:06:14,470
instead however<font color="#E5E5E5"> we call get public lock</font>

146
00:06:11,760 --> 00:06:16,690
then get public lock<font color="#CCCCCC"> we</font><font color="#E5E5E5"> call open file</font>

147
00:06:14,470 --> 00:06:18,970
and since get public lock<font color="#E5E5E5"> as part of</font><font color="#CCCCCC"> the</font>

148
00:06:16,690 --> 00:06:20,560
<font color="#E5E5E5">system class and and it calls open file</font>

149
00:06:18,970 --> 00:06:22,570
<font color="#E5E5E5">a permission check will</font><font color="#CCCCCC"> be skipped</font><font color="#E5E5E5"> and</font>

150
00:06:20,560 --> 00:06:25,090
our<font color="#CCCCCC"> application will be</font><font color="#E5E5E5"> able to access</font>

151
00:06:22,570 --> 00:06:27,340
the<font color="#E5E5E5"> content of locked hght in this way</font>

152
00:06:25,090 --> 00:06:29,260
so<font color="#E5E5E5"> this is a bit counterintuitive</font><font color="#CCCCCC"> so if</font>

153
00:06:27,340 --> 00:06:31,239
we do<font color="#CCCCCC"> something it does not work</font><font color="#E5E5E5"> under</font>

154
00:06:29,260 --> 00:06:32,560
certain circumstances<font color="#E5E5E5"> however</font><font color="#CCCCCC"> if we call</font>

155
00:06:31,240 --> 00:06:34,960
a system<font color="#CCCCCC"> as that does</font><font color="#E5E5E5"> the exact same</font>

156
00:06:32,560 --> 00:06:39,370
<font color="#CCCCCC">thing it always works so we keep that in</font>

157
00:06:34,960 --> 00:06:41,380
mind<font color="#CCCCCC"> for a</font><font color="#E5E5E5"> minute</font><font color="#CCCCCC"> shortcuts prevent like</font>

158
00:06:39,370 --> 00:06:43,389
I just<font color="#E5E5E5"> explained existing permission</font>

159
00:06:41,380 --> 00:06:45,340
checks<font color="#E5E5E5"> depending on certain</font><font color="#CCCCCC"> properties</font>

160
00:06:43,389 --> 00:06:47,050
of<font color="#E5E5E5"> the call stack that could pretty much</font>

161
00:06:45,340 --> 00:06:48,909
<font color="#CCCCCC">be anything in the example we have just</font>

162
00:06:47,050 --> 00:06:50,940
<font color="#E5E5E5">seen it's just the</font><font color="#CCCCCC"> identity of the</font>

163
00:06:48,909 --> 00:06:53,310
immediate caller

164
00:06:50,940 --> 00:06:55,200
the consequence is<font color="#CCCCCC"> that shortcut</font>

165
00:06:53,310 --> 00:06:57,030
containing the colors of shortcut

166
00:06:55,200 --> 00:07:01,140
containing methods<font color="#E5E5E5"> like get public lock</font>

167
00:06:57,030 --> 00:07:05,159
in the example<font color="#CCCCCC"> somehow act as</font><font color="#E5E5E5"> guarantors</font>

168
00:07:01,140 --> 00:07:07,289
<font color="#E5E5E5">which means since the involvement may</font>

169
00:07:05,160 --> 00:07:08,490
prevent the<font color="#CCCCCC"> execution of</font><font color="#E5E5E5"> a permission</font>

170
00:07:07,290 --> 00:07:11,460
check they have to make<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that</font>

171
00:07:08,490 --> 00:07:12,990
<font color="#CCCCCC">whatever they do</font><font color="#E5E5E5"> is also secure even</font><font color="#CCCCCC"> if</font>

172
00:07:11,460 --> 00:07:15,080
called from untrusted<font color="#CCCCCC"> code so that</font><font color="#E5E5E5"> puts</font>

173
00:07:12,990 --> 00:07:17,820
them in a certain responsible position

174
00:07:15,080 --> 00:07:19,560
now<font color="#E5E5E5"> when I presented this to somebody I</font>

175
00:07:17,820 --> 00:07:20,820
<font color="#CCCCCC">would</font><font color="#E5E5E5"> ask why we don't report these</font>

176
00:07:19,560 --> 00:07:23,760
shortcuts<font color="#CCCCCC"> because they are apparently</font>

177
00:07:20,820 --> 00:07:25,170
<font color="#E5E5E5">bugs and have a little</font><font color="#CCCCCC"> system they</font><font color="#E5E5E5"> are</font>

178
00:07:23,760 --> 00:07:27,450
not backed by themselves they were

179
00:07:25,170 --> 00:07:30,180
implemented intentionally to<font color="#CCCCCC"> speed up</font>

180
00:07:27,450 --> 00:07:33,479
permission checks<font color="#E5E5E5"> because every stack</font>

181
00:07:30,180 --> 00:07:36,300
walk is is kind of expensive<font color="#CCCCCC"> and every</font>

182
00:07:33,480 --> 00:07:39,060
stack<font color="#E5E5E5"> walk that we can skip makes our</font>

183
00:07:36,300 --> 00:07:42,870
application faster<font color="#CCCCCC"> so it's not</font><font color="#E5E5E5"> a bug and</font>

184
00:07:39,060 --> 00:07:45,270
also<font color="#E5E5E5"> it's it's not wrong so it's not</font>

185
00:07:42,870 --> 00:07:48,060
<font color="#E5E5E5">giving untrusted code any access that it</font>

186
00:07:45,270 --> 00:07:49,320
shouldn't have in the normal<font color="#CCCCCC"> case as I</font>

187
00:07:48,060 --> 00:07:51,660
<font color="#E5E5E5">will</font><font color="#CCCCCC"> explain</font><font color="#E5E5E5"> in the following however</font>

188
00:07:49,320 --> 00:07:55,020
these shortcuts significantly contribute

189
00:07:51,660 --> 00:07:56,670
to<font color="#CCCCCC"> Java's fragility the first thing we</font>

190
00:07:55,020 --> 00:08:00,990
will consider here<font color="#E5E5E5"> are maintainability</font>

191
00:07:56,670 --> 00:08:04,890
issues<font color="#CCCCCC"> this is now a real example from</font>

192
00:08:00,990 --> 00:08:09,480
Java 7 and as you can see<font color="#E5E5E5"> this method</font>

193
00:08:04,890 --> 00:08:12,539
<font color="#E5E5E5">here check member</font><font color="#CCCCCC"> access</font><font color="#E5E5E5"> performs a</font>

194
00:08:09,480 --> 00:08:15,090
permission check but this permission

195
00:08:12,540 --> 00:08:16,980
check also<font color="#E5E5E5"> is also guarded by a shortcut</font>

196
00:08:15,090 --> 00:08:19,229
here and the<font color="#CCCCCC"> shortcut as you can see</font>

197
00:08:16,980 --> 00:08:20,880
here is a complicated conditional that

198
00:08:19,230 --> 00:08:22,680
makes extensive assumptions about the

199
00:08:20,880 --> 00:08:24,540
call stack<font color="#CCCCCC"> so in this case here about</font>

200
00:08:22,680 --> 00:08:27,240
the length of the call<font color="#E5E5E5"> stack the order</font>

201
00:08:24,540 --> 00:08:28,890
of<font color="#CCCCCC"> colas and also they identity so as</font>

202
00:08:27,240 --> 00:08:30,690
you can imagine it's<font color="#CCCCCC"> very easy</font><font color="#E5E5E5"> to break</font>

203
00:08:28,890 --> 00:08:33,689
the assumptions that are hard-coded<font color="#CCCCCC"> in</font>

204
00:08:30,690 --> 00:08:38,010
this shortcut<font color="#CCCCCC"> and we can find this</font>

205
00:08:33,690 --> 00:08:40,830
actually<font color="#CCCCCC"> documented in classes</font><font color="#E5E5E5"> that make</font>

206
00:08:38,010 --> 00:08:42,510
use of this<font color="#E5E5E5"> method</font><font color="#CCCCCC"> so what we find in</font>

207
00:08:40,830 --> 00:08:44,340
source code<font color="#E5E5E5"> comments is for instance in</font>

208
00:08:42,510 --> 00:08:47,069
method handles this function performs

209
00:08:44,340 --> 00:08:49,440
<font color="#CCCCCC">stack</font><font color="#E5E5E5"> walk magic do not reflector it</font><font color="#CCCCCC"> or</font>

210
00:08:47,070 --> 00:08:51,150
be very careful not to<font color="#E5E5E5"> change the stack</font>

211
00:08:49,440 --> 00:08:53,880
depth of this call for<font color="#CCCCCC"> security reasons</font>

212
00:08:51,150 --> 00:08:55,620
is a source code commenting class or in

213
00:08:53,880 --> 00:08:57,390
the<font color="#E5E5E5"> security</font><font color="#CCCCCC"> manager</font><font color="#E5E5E5"> if this method is</font>

214
00:08:55,620 --> 00:08:58,860
<font color="#CCCCCC">overridden then a</font><font color="#E5E5E5"> call cannot</font><font color="#CCCCCC"> be made as</font>

215
00:08:57,390 --> 00:09:00,330
the default implementation relies on the

216
00:08:58,860 --> 00:09:02,550
code being<font color="#E5E5E5"> checked</font><font color="#CCCCCC"> X</font><font color="#E5E5E5"> stack that's of</font>

217
00:09:00,330 --> 00:09:03,480
<font color="#CCCCCC">four</font><font color="#E5E5E5"> so what I'm trying</font><font color="#CCCCCC"> to say here is</font>

218
00:09:02,550 --> 00:09:06,780
<font color="#CCCCCC">that</font>

219
00:09:03,480 --> 00:09:09,060
the impact of a<font color="#CCCCCC"> short cut</font><font color="#E5E5E5"> at a certain</font>

220
00:09:06,780 --> 00:09:10,470
<font color="#E5E5E5">location in the class</font><font color="#CCCCCC"> library has not</font>

221
00:09:09,060 --> 00:09:12,390
local implications on the

222
00:09:10,470 --> 00:09:14,820
<font color="#E5E5E5">maintainability</font><font color="#CCCCCC"> of the platform but</font>

223
00:09:12,390 --> 00:09:16,470
rather global implications on the<font color="#E5E5E5"> on the</font>

224
00:09:14,820 --> 00:09:17,810
maintainability of<font color="#E5E5E5"> the entire class</font>

225
00:09:16,470 --> 00:09:20,310
library

226
00:09:17,810 --> 00:09:23,099
besides these maintainability issues

227
00:09:20,310 --> 00:09:26,219
there's also security problems directly

228
00:09:23,100 --> 00:09:27,960
enabled by these shortcuts<font color="#CCCCCC"> this is the</font>

229
00:09:26,220 --> 00:09:30,510
exact same example<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> system class</font>

230
00:09:27,960 --> 00:09:32,730
that we've seen<font color="#CCCCCC"> before</font><font color="#E5E5E5"> and now suppose</font>

231
00:09:30,510 --> 00:09:35,580
<font color="#E5E5E5">that the developer of a system class</font>

232
00:09:32,730 --> 00:09:38,580
introduces a very<font color="#E5E5E5"> simple helper method</font>

233
00:09:35,580 --> 00:09:41,340
open<font color="#CCCCCC"> Frye's from root as you can see</font>

234
00:09:38,580 --> 00:09:43,170
this<font color="#CCCCCC"> method does nothing</font><font color="#E5E5E5"> not much it</font>

235
00:09:41,340 --> 00:09:45,180
just<font color="#E5E5E5"> takes</font><font color="#CCCCCC"> a string argument it</font><font color="#E5E5E5"> prevents</font>

236
00:09:43,170 --> 00:09:47,699
<font color="#E5E5E5">the slash and then it uses</font><font color="#CCCCCC"> this argument</font>

237
00:09:45,180 --> 00:09:48,599
<font color="#E5E5E5">to call open file</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a very simple</font>

238
00:09:47,700 --> 00:09:51,900
method

239
00:09:48,600 --> 00:09:55,100
it looks sensible<font color="#E5E5E5"> reasonable</font><font color="#CCCCCC"> and</font>

240
00:09:51,900 --> 00:09:58,590
multiple formats harmful at<font color="#E5E5E5"> all</font><font color="#CCCCCC"> however</font>

241
00:09:55,100 --> 00:10:01,560
<font color="#E5E5E5">this method introduces a major security</font>

242
00:09:58,590 --> 00:10:04,110
defect<font color="#E5E5E5"> because it provides</font><font color="#CCCCCC"> unlimited</font>

243
00:10:01,560 --> 00:10:06,030
access<font color="#E5E5E5"> to the entire file system to all</font>

244
00:10:04,110 --> 00:10:10,320
code<font color="#CCCCCC"> even if</font><font color="#E5E5E5"> it has never been assigned</font>

245
00:10:06,030 --> 00:10:11,550
any privileges<font color="#E5E5E5"> why is that</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> compiled</font>

246
00:10:10,320 --> 00:10:13,800
is our<font color="#E5E5E5"> method here that contains the</font>

247
00:10:11,550 --> 00:10:15,180
<font color="#CCCCCC">shortcut and we know that it skips the</font>

248
00:10:13,800 --> 00:10:17,910
permission check if the immediate caller

249
00:10:15,180 --> 00:10:19,170
is a system class so if from our

250
00:10:17,910 --> 00:10:21,839
<font color="#E5E5E5">application we call this method</font>

251
00:10:19,170 --> 00:10:23,610
immediately<font color="#CCCCCC"> a permission check will be</font>

252
00:10:21,840 --> 00:10:25,140
executed so if we<font color="#CCCCCC"> try to access the</font>

253
00:10:23,610 --> 00:10:27,000
sensitive file on the<font color="#E5E5E5"> file system a</font>

254
00:10:25,140 --> 00:10:28,680
permission check<font color="#E5E5E5"> will find that we don't</font>

255
00:10:27,000 --> 00:10:32,160
have permission<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do so and</font><font color="#CCCCCC"> access will</font>

256
00:10:28,680 --> 00:10:34,380
<font color="#E5E5E5">be denied if</font><font color="#CCCCCC"> however instead we use open</font>

257
00:10:32,160 --> 00:10:37,620
<font color="#E5E5E5">file from route our</font><font color="#CCCCCC"> confused deputy here</font>

258
00:10:34,380 --> 00:10:41,340
and open file from<font color="#CCCCCC"> route</font><font color="#E5E5E5"> will call open</font>

259
00:10:37,620 --> 00:10:45,690
file for us<font color="#E5E5E5"> then a permission check will</font>

260
00:10:41,340 --> 00:10:47,430
<font color="#CCCCCC">be skipped</font><font color="#E5E5E5"> and our application</font><font color="#CCCCCC"> will</font>

261
00:10:45,690 --> 00:10:51,960
actually be granted access to<font color="#E5E5E5"> files</font><font color="#CCCCCC"> that</font>

262
00:10:47,430 --> 00:10:53,910
<font color="#CCCCCC">it</font><font color="#E5E5E5"> shouldn't have access to</font><font color="#CCCCCC"> we reviewed</font>

263
00:10:51,960 --> 00:10:55,740
a sample set of 48 exploits<font color="#E5E5E5"> that were</font>

264
00:10:53,910 --> 00:10:57,660
provided<font color="#E5E5E5"> by a company security</font>

265
00:10:55,740 --> 00:10:59,640
explorations and we actually<font color="#E5E5E5"> found them</font>

266
00:10:57,660 --> 00:11:01,319
<font color="#E5E5E5">for examples of exploits that make use</font>

267
00:10:59,640 --> 00:11:02,939
of such confuse deputies in a way that

268
00:11:01,320 --> 00:11:04,680
we've<font color="#E5E5E5"> just seen so this is not a</font>

269
00:11:02,940 --> 00:11:08,400
<font color="#CCCCCC">theoretical problem</font><font color="#E5E5E5"> it's actually used</font>

270
00:11:04,680 --> 00:11:10,140
by attackers to craft their exploits now

271
00:11:08,400 --> 00:11:12,150
it would<font color="#CCCCCC"> be</font><font color="#E5E5E5"> very easy</font><font color="#CCCCCC"> to blame the</font>

272
00:11:10,140 --> 00:11:14,880
<font color="#CCCCCC">developer that</font><font color="#E5E5E5"> originally introduced to</font>

273
00:11:12,150 --> 00:11:16,689
confuse deputy right<font color="#CCCCCC"> however</font><font color="#E5E5E5"> that would</font>

274
00:11:14,880 --> 00:11:19,430
be fair at<font color="#E5E5E5"> all because</font>

275
00:11:16,690 --> 00:11:21,050
shortcuts<font color="#E5E5E5"> are not visible</font><font color="#CCCCCC"> to callers</font><font color="#E5E5E5"> so</font>

276
00:11:19,430 --> 00:11:23,329
if you don't know the implementation<font color="#E5E5E5"> of</font>

277
00:11:21,050 --> 00:11:24,529
a system method<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> means to</font>

278
00:11:23,330 --> 00:11:25,550
decide whether it would<font color="#CCCCCC"> skip a</font>

279
00:11:24,529 --> 00:11:28,370
<font color="#E5E5E5">permission check under certain</font>

280
00:11:25,550 --> 00:11:29,870
circumstances or not<font color="#CCCCCC"> also</font><font color="#E5E5E5"> just by</font>

281
00:11:28,370 --> 00:11:31,010
looking at the signature<font color="#E5E5E5"> of a message</font>

282
00:11:29,870 --> 00:11:32,779
you<font color="#E5E5E5"> don't know if it would skip a</font>

283
00:11:31,010 --> 00:11:35,120
permission check<font color="#E5E5E5"> so it's really hard to</font>

284
00:11:32,779 --> 00:11:38,920
decide<font color="#E5E5E5"> if your code is affected or</font><font color="#CCCCCC"> not</font>

285
00:11:35,120 --> 00:11:40,760
<font color="#E5E5E5">also another API a usability</font>

286
00:11:38,920 --> 00:11:43,149
consideration is that<font color="#E5E5E5"> developers need</font>

287
00:11:40,760 --> 00:11:45,189
extra effort<font color="#CCCCCC"> to prevent</font><font color="#E5E5E5"> confuse deputies</font>

288
00:11:43,149 --> 00:11:47,630
<font color="#CCCCCC">what we usually</font><font color="#E5E5E5"> want is that</font>

289
00:11:45,190 --> 00:11:49,070
<font color="#E5E5E5">implementing secure code provide needs</font>

290
00:11:47,630 --> 00:11:50,870
less effort<font color="#E5E5E5"> and it's easier than</font>

291
00:11:49,070 --> 00:11:54,709
actually<font color="#E5E5E5"> writing it in an insecure way</font>

292
00:11:50,870 --> 00:11:56,360
we don't<font color="#E5E5E5"> find that here and finally</font><font color="#CCCCCC"> call</font>

293
00:11:54,709 --> 00:11:58,250
<font color="#E5E5E5">us cannot simply refrain from privilege</font>

294
00:11:56,360 --> 00:12:00,200
elevation which violates the principle

295
00:11:58,250 --> 00:12:02,029
of the principle of<font color="#E5E5E5"> least</font><font color="#CCCCCC"> privilege</font><font color="#E5E5E5"> so</font>

296
00:12:00,200 --> 00:12:03,260
there is no way<font color="#CCCCCC"> to say sorry I don't</font>

297
00:12:02,029 --> 00:12:04,880
<font color="#E5E5E5">know what I'm doing please make sure</font>

298
00:12:03,260 --> 00:12:06,680
<font color="#CCCCCC">that my code is running</font><font color="#E5E5E5"> just with the</font>

299
00:12:04,880 --> 00:12:08,420
limiters<font color="#CCCCCC"> the</font><font color="#E5E5E5"> the least amount of</font>

300
00:12:06,680 --> 00:12:11,449
privileges to make sure that I'm<font color="#CCCCCC"> not</font>

301
00:12:08,420 --> 00:12:14,899
accidentally harming the system again<font color="#E5E5E5"> no</font>

302
00:12:11,450 --> 00:12:16,250
way to do<font color="#E5E5E5"> that so we can confidently say</font>

303
00:12:14,899 --> 00:12:20,149
that shortcuts we can Java security

304
00:12:16,250 --> 00:12:21,380
<font color="#E5E5E5">model in practice is that something we</font>

305
00:12:20,149 --> 00:12:25,820
can<font color="#E5E5E5"> do</font><font color="#CCCCCC"> about this to improve the</font>

306
00:12:21,380 --> 00:12:27,649
situation yes there is luckily we can

307
00:12:25,820 --> 00:12:29,480
move from<font color="#E5E5E5"> an implicit model of</font><font color="#CCCCCC"> privilege</font>

308
00:12:27,649 --> 00:12:31,430
elevation to a fully explicit<font color="#E5E5E5"> model of</font>

309
00:12:29,480 --> 00:12:36,550
<font color="#E5E5E5">privilege elevation so what does that</font>

310
00:12:31,430 --> 00:12:39,140
mean<font color="#CCCCCC"> in our</font><font color="#E5E5E5"> example that</font><font color="#CCCCCC"> would mean that</font>

311
00:12:36,550 --> 00:12:41,329
the<font color="#E5E5E5"> first thing we have to</font><font color="#CCCCCC"> do is remove</font>

312
00:12:39,140 --> 00:12:43,430
the<font color="#CCCCCC"> shortcuts so remove the conditionals</font>

313
00:12:41,329 --> 00:12:46,310
<font color="#E5E5E5">that actually prevent a permission check</font>

314
00:12:43,430 --> 00:12:48,140
from being executed<font color="#CCCCCC"> and by this</font><font color="#E5E5E5"> I really</font>

315
00:12:46,310 --> 00:12:51,819
<font color="#E5E5E5">mean literally erasing it so just remove</font>

316
00:12:48,140 --> 00:12:55,480
<font color="#E5E5E5">it from from the method</font><font color="#CCCCCC"> are we done yet</font>

317
00:12:51,820 --> 00:12:57,560
<font color="#CCCCCC">we are not because as we've seen before</font>

318
00:12:55,480 --> 00:12:59,959
<font color="#E5E5E5">untrusted code</font><font color="#CCCCCC"> in before our</font>

319
00:12:57,560 --> 00:13:01,339
modifications<font color="#E5E5E5"> was able to call get</font>

320
00:12:59,959 --> 00:13:03,229
public lock and then actually get the

321
00:13:01,339 --> 00:13:05,420
contents of lock txt<font color="#E5E5E5"> this was intended</font>

322
00:13:03,230 --> 00:13:07,790
functionality<font color="#CCCCCC"> before</font><font color="#E5E5E5"> but after our</font>

323
00:13:05,420 --> 00:13:09,349
modification here this would fail<font color="#CCCCCC"> so</font>

324
00:13:07,790 --> 00:13:11,660
<font color="#E5E5E5">that would be breaking backwards</font>

325
00:13:09,350 --> 00:13:13,940
<font color="#E5E5E5">compatibility so to retain backward</font>

326
00:13:11,660 --> 00:13:16,010
compatibility<font color="#CCCCCC"> we need to modify our</font>

327
00:13:13,940 --> 00:13:18,560
<font color="#E5E5E5">callers such that they explicitly</font>

328
00:13:16,010 --> 00:13:19,910
elevate their privileges<font color="#E5E5E5"> and there is</font>

329
00:13:18,560 --> 00:13:22,790
dedicated functionality in the class

330
00:13:19,910 --> 00:13:24,230
library<font color="#E5E5E5"> to do that now explicit</font>

331
00:13:22,790 --> 00:13:25,670
privilege elevation doesn't doesn't

332
00:13:24,230 --> 00:13:27,350
<font color="#E5E5E5">suffer from the maintainability and</font>

333
00:13:25,670 --> 00:13:29,270
<font color="#E5E5E5">security problems that we've seen before</font>

334
00:13:27,350 --> 00:13:31,940
so this is this<font color="#E5E5E5"> is definitely an</font>

335
00:13:29,270 --> 00:13:35,960
movement here<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we do this</font><font color="#E5E5E5"> to retain</font>

336
00:13:31,940 --> 00:13:40,690
backward compatibility we implemented

337
00:13:35,960 --> 00:13:42,890
our proposed solution<font color="#E5E5E5"> by using</font><font color="#CCCCCC"> a</font>

338
00:13:40,690 --> 00:13:44,600
<font color="#CCCCCC">semi-automatic static analysis</font><font color="#E5E5E5"> approach</font>

339
00:13:42,890 --> 00:13:47,890
to locate the shortcuts in<font color="#CCCCCC"> the class</font>

340
00:13:44,600 --> 00:13:50,600
library<font color="#E5E5E5"> in the first place its</font>

341
00:13:47,890 --> 00:13:53,480
semi-automatic by<font color="#CCCCCC"> semi-automatic</font><font color="#E5E5E5"> I mean</font>

342
00:13:50,600 --> 00:13:55,550
that we automatically search<font color="#CCCCCC"> for a</font>

343
00:13:53,480 --> 00:13:57,380
<font color="#E5E5E5">candidate list of methods that may or</font>

344
00:13:55,550 --> 00:13:59,089
may<font color="#CCCCCC"> not contain a shortcut</font><font color="#E5E5E5"> and we</font>

345
00:13:57,380 --> 00:14:00,470
manually select the methods<font color="#E5E5E5"> that</font>

346
00:13:59,090 --> 00:14:03,320
actually<font color="#CCCCCC"> do contain a shortcut</font>

347
00:14:00,470 --> 00:14:09,050
we then manually<font color="#E5E5E5"> remove the shortcuts of</font>

348
00:14:03,320 --> 00:14:10,910
<font color="#CCCCCC">32 methods in the open JDK</font><font color="#E5E5E5"> 8 and we used</font>

349
00:14:09,050 --> 00:14:13,130
an automatic<font color="#E5E5E5"> bytecode transformation to</font>

350
00:14:10,910 --> 00:14:15,680
adapt all colors and that call the

351
00:14:13,130 --> 00:14:16,970
methods that we modified this<font color="#E5E5E5"> has to be</font>

352
00:14:15,680 --> 00:14:18,589
done<font color="#E5E5E5"> automatically because the number of</font>

353
00:14:16,970 --> 00:14:20,240
<font color="#E5E5E5">colors is</font><font color="#CCCCCC"> so incredibly large that</font><font color="#E5E5E5"> you</font>

354
00:14:18,590 --> 00:14:21,590
<font color="#E5E5E5">just cannot do that manually it's</font><font color="#CCCCCC"> it's</font>

355
00:14:20,240 --> 00:14:22,600
thousands of colors and<font color="#E5E5E5"> you would want</font>

356
00:14:21,590 --> 00:14:25,520
<font color="#E5E5E5">to do that</font>

357
00:14:22,600 --> 00:14:28,400
now<font color="#E5E5E5"> we evaluated our implementation</font>

358
00:14:25,520 --> 00:14:29,780
<font color="#E5E5E5">first in</font><font color="#CCCCCC"> terms</font><font color="#E5E5E5"> of performance</font><font color="#CCCCCC"> because as</font>

359
00:14:28,400 --> 00:14:31,640
I explained before these shortcuts were

360
00:14:29,780 --> 00:14:34,189
presumably<font color="#E5E5E5"> introduced in the first place</font>

361
00:14:31,640 --> 00:14:35,630
to speed<font color="#E5E5E5"> up program execution and we</font>

362
00:14:34,190 --> 00:14:39,170
<font color="#E5E5E5">found in micro bench so we implemented</font>

363
00:14:35,630 --> 00:14:41,030
micro benchmarks<font color="#E5E5E5"> executing every method</font>

364
00:14:39,170 --> 00:14:43,849
<font color="#CCCCCC">that we modified I think 115 million</font>

365
00:14:41,030 --> 00:14:48,650
<font color="#E5E5E5">times and we found that the methods that</font>

366
00:14:43,850 --> 00:14:51,320
we modified actually had a<font color="#E5E5E5"> slowdown of</font><font color="#CCCCCC"> a</font>

367
00:14:48,650 --> 00:14:57,050
few<font color="#E5E5E5"> microseconds what we found</font>

368
00:14:51,320 --> 00:14:58,940
however when assessing the the<font color="#E5E5E5"> execution</font>

369
00:14:57,050 --> 00:15:00,380
<font color="#CCCCCC">speed of rebirth applications we found</font>

370
00:14:58,940 --> 00:15:01,370
that these<font color="#E5E5E5"> needles little slogans just</font>

371
00:15:00,380 --> 00:15:03,860
have no impact on<font color="#CCCCCC"> real-world</font>

372
00:15:01,370 --> 00:15:05,360
<font color="#E5E5E5">applications so the we wrote</font>

373
00:15:03,860 --> 00:15:07,220
applications that we use<font color="#E5E5E5"> here is the doc</font>

374
00:15:05,360 --> 00:15:08,810
hypo benchmark suite<font color="#E5E5E5"> which comprises a</font>

375
00:15:07,220 --> 00:15:10,760
set<font color="#E5E5E5"> of</font><font color="#CCCCCC"> open source applications that</font>

376
00:15:08,810 --> 00:15:13,489
cover a broad range<font color="#E5E5E5"> of possible program</font>

377
00:15:10,760 --> 00:15:16,970
behavior and we found<font color="#E5E5E5"> no performance</font>

378
00:15:13,490 --> 00:15:22,520
slowdown at all backward<font color="#CCCCCC"> compatibility</font>

379
00:15:16,970 --> 00:15:24,320
is retained and it may be<font color="#CCCCCC"> possible that</font>

380
00:15:22,520 --> 00:15:25,760
some applications<font color="#CCCCCC"> may need adjustments</font>

381
00:15:24,320 --> 00:15:27,440
to<font color="#E5E5E5"> their policy file but as we explained</font>

382
00:15:25,760 --> 00:15:29,060
<font color="#CCCCCC">in the</font><font color="#E5E5E5"> paper such</font><font color="#CCCCCC"> adjustment</font><font color="#E5E5E5"> can be done</font>

383
00:15:27,440 --> 00:15:33,320
<font color="#E5E5E5">with little effort and even</font>

384
00:15:29,060 --> 00:15:35,180
<font color="#E5E5E5">automatically in some some cases so what</font>

385
00:15:33,320 --> 00:15:38,080
we can<font color="#E5E5E5"> say that for that can be removed</font>

386
00:15:35,180 --> 00:15:40,020
<font color="#E5E5E5">to increase maintainability</font><font color="#CCCCCC"> and security</font>

387
00:15:38,080 --> 00:15:41,250
<font color="#CCCCCC">there for them</font>

388
00:15:40,020 --> 00:15:43,260
few general lessons that we learn from

389
00:15:41,250 --> 00:15:46,260
<font color="#E5E5E5">this</font><font color="#CCCCCC"> so on the one hand if</font><font color="#E5E5E5"> given the</font>

390
00:15:43,260 --> 00:15:48,420
choice you should<font color="#E5E5E5"> always go for an</font>

391
00:15:46,260 --> 00:15:49,589
explicit way<font color="#E5E5E5"> of</font><font color="#CCCCCC"> privet elevation as</font>

392
00:15:48,420 --> 00:15:50,790
compared<font color="#CCCCCC"> to an implicit</font><font color="#E5E5E5"> way of</font>

393
00:15:49,589 --> 00:15:51,899
<font color="#E5E5E5">privileged elevation because it makes</font>

394
00:15:50,790 --> 00:15:53,730
your life<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> easier</font>

395
00:15:51,899 --> 00:15:56,160
explicit<font color="#CCCCCC"> privilege</font><font color="#E5E5E5"> innovation is much</font>

396
00:15:53,730 --> 00:16:00,450
easier to<font color="#E5E5E5"> reason about</font><font color="#CCCCCC"> and it increases</font>

397
00:15:56,160 --> 00:16:02,520
maintainability<font color="#CCCCCC"> and security also</font><font color="#E5E5E5"> stick</font>

398
00:16:00,450 --> 00:16:04,140
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the security model so the</font><font color="#CCCCCC"> security</font>

399
00:16:02,520 --> 00:16:07,490
model as it has originally been proposed

400
00:16:04,140 --> 00:16:10,319
for<font color="#E5E5E5"> Java</font><font color="#CCCCCC"> did not contain</font><font color="#E5E5E5"> these shortcuts</font>

401
00:16:07,490 --> 00:16:13,110
but as we've seen they weaken the

402
00:16:10,320 --> 00:16:15,209
security model<font color="#E5E5E5"> in practice</font><font color="#CCCCCC"> so my</font><font color="#E5E5E5"> advice</font>

403
00:16:13,110 --> 00:16:16,980
is<font color="#E5E5E5"> if at some point</font><font color="#CCCCCC"> you realize that the</font>

404
00:16:15,209 --> 00:16:19,319
security model<font color="#E5E5E5"> that you designed cannot</font>

405
00:16:16,980 --> 00:16:21,120
be<font color="#E5E5E5"> implemented for whatever reason let</font>

406
00:16:19,320 --> 00:16:23,430
it be performance<font color="#CCCCCC"> reasons then rather</font>

407
00:16:21,120 --> 00:16:27,420
step back and rework<font color="#CCCCCC"> your model instead</font>

408
00:16:23,430 --> 00:16:29,339
of trying to fix your<font color="#E5E5E5"> model by tweaking</font>

409
00:16:27,420 --> 00:16:32,939
your implementation<font color="#E5E5E5"> and this has bad</font>

410
00:16:29,339 --> 00:16:35,820
side effects<font color="#E5E5E5"> possibly also properly</font>

411
00:16:32,940 --> 00:16:38,160
document your trade-offs<font color="#CCCCCC"> we invested</font>

412
00:16:35,820 --> 00:16:40,440
significant significant effort in

413
00:16:38,160 --> 00:16:42,329
actually<font color="#E5E5E5"> showing and being sure that the</font>

414
00:16:40,440 --> 00:16:44,190
shortcuts that we<font color="#CCCCCC"> we discussed</font><font color="#E5E5E5"> we're</font>

415
00:16:42,330 --> 00:16:45,750
actually just introduced for performance

416
00:16:44,190 --> 00:16:47,790
<font color="#CCCCCC">reasons and not</font><font color="#E5E5E5"> for any other reasons</font><font color="#CCCCCC"> if</font>

417
00:16:45,750 --> 00:16:49,649
that would<font color="#E5E5E5"> have</font><font color="#CCCCCC"> been documented clearly</font>

418
00:16:47,790 --> 00:16:53,819
and properly we could have<font color="#E5E5E5"> saved a lot</font>

419
00:16:49,649 --> 00:16:55,110
<font color="#CCCCCC">of effort and finally</font><font color="#E5E5E5"> reevaluate your</font>

420
00:16:53,820 --> 00:16:57,180
performance trade-offs<font color="#E5E5E5"> in regular</font>

421
00:16:55,110 --> 00:16:58,740
<font color="#E5E5E5">intervals</font><font color="#CCCCCC"> after all you hope to gain</font>

422
00:16:57,180 --> 00:17:01,050
something<font color="#E5E5E5"> through and</font><font color="#CCCCCC"> trade off right</font>

423
00:16:58,740 --> 00:17:03,420
but if you<font color="#CCCCCC"> don't gain</font><font color="#E5E5E5"> performance</font>

424
00:17:01,050 --> 00:17:06,359
<font color="#CCCCCC">anymore</font><font color="#E5E5E5"> because after 15 years it's just</font>

425
00:17:03,420 --> 00:17:10,010
<font color="#E5E5E5">a</font><font color="#CCCCCC"> blessin</font><font color="#E5E5E5"> theory anymore all you do is</font>

426
00:17:06,359 --> 00:17:10,010
you weaken<font color="#E5E5E5"> your system by the trade-off</font>

427
00:17:10,040 --> 00:17:16,428
with this I<font color="#CCCCCC"> conclude my</font><font color="#E5E5E5"> talk and I'm</font>

428
00:17:12,720 --> 00:17:16,429
happy<font color="#E5E5E5"> to answer your questions</font>

429
00:17:19,380 --> 00:17:26,520
hi there there's a paper in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ice +</font>

430
00:17:23,109 --> 00:17:34,350
from Shanghai a couple of weeks<font color="#CCCCCC"> ago on</font>

431
00:17:26,520 --> 00:17:37,600
the<font color="#E5E5E5"> Java well essentially unavoidably</font>

432
00:17:34,350 --> 00:17:39,580
<font color="#E5E5E5">the confused deputy problem that you</font>

433
00:17:37,600 --> 00:17:41,139
might want to look at<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> the</font>

434
00:17:39,580 --> 00:17:43,480
cherry<font color="#CCCCCC"> architecture that we've</font><font color="#E5E5E5"> been</font>

435
00:17:41,140 --> 00:17:46,540
<font color="#CCCCCC">doing with</font><font color="#E5E5E5"> SSRI and the University of</font>

436
00:17:43,480 --> 00:17:48,430
<font color="#E5E5E5">Cambridge and so that might</font><font color="#CCCCCC"> be a</font><font color="#E5E5E5"> very</font>

437
00:17:46,540 --> 00:17:50,409
<font color="#E5E5E5">interesting alternative to the way</font>

438
00:17:48,430 --> 00:17:51,430
you're<font color="#CCCCCC"> approaching this ok thanks</font><font color="#E5E5E5"> for</font>

439
00:17:50,410 --> 00:17:52,060
pointing this<font color="#E5E5E5"> out that</font><font color="#CCCCCC"> will certainly</font>

440
00:17:51,430 --> 00:17:55,390
have a look at it

441
00:17:52,060 --> 00:17:57,399
cool thanks<font color="#CCCCCC"> ok so understand that they</font>

442
00:17:55,390 --> 00:17:57,910
<font color="#CCCCCC">richly clean shortcuts for performance</font>

443
00:17:57,400 --> 00:17:59,980
reasons

444
00:17:57,910 --> 00:18:04,540
did you actually<font color="#E5E5E5"> measure whether that</font>

445
00:17:59,980 --> 00:18:07,450
was actually<font color="#CCCCCC"> met really um important</font>

446
00:18:04,540 --> 00:18:09,700
these days<font color="#E5E5E5"> ie if you just remove the</font>

447
00:18:07,450 --> 00:18:13,870
shortcuts<font color="#E5E5E5"> and do things properly</font><font color="#CCCCCC"> or is</font>

448
00:18:09,700 --> 00:18:15,310
<font color="#E5E5E5">Java now fast enough</font><font color="#CCCCCC"> so the question is</font>

449
00:18:13,870 --> 00:18:20,649
is<font color="#E5E5E5"> it still fast enough if you remove</font>

450
00:18:15,310 --> 00:18:22,750
the<font color="#E5E5E5"> four cuts yeah yeah so we can't</font><font color="#CCCCCC"> rely</font>

451
00:18:20,650 --> 00:18:24,640
<font color="#E5E5E5">on performance</font><font color="#CCCCCC"> measurements but</font><font color="#E5E5E5"> it</font>

452
00:18:22,750 --> 00:18:29,110
wasn't<font color="#E5E5E5"> very detail so</font><font color="#CCCCCC"> we performed micro</font>

453
00:18:24,640 --> 00:18:30,790
benchmarks to measure the effects if if

454
00:18:29,110 --> 00:18:33,909
you isolate<font color="#CCCCCC"> the method that we modified</font>

455
00:18:30,790 --> 00:18:35,680
right<font color="#E5E5E5"> all right no not</font><font color="#CCCCCC"> very much not</font><font color="#E5E5E5"> the</font>

456
00:18:33,910 --> 00:18:38,650
<font color="#CCCCCC">method</font><font color="#E5E5E5"> you modified but if you just told</font>

457
00:18:35,680 --> 00:18:40,990
them hey get rid<font color="#CCCCCC"> of your shortcuts you</font>

458
00:18:38,650 --> 00:18:42,310
don't need this perform well you mean

459
00:18:40,990 --> 00:18:44,110
<font color="#E5E5E5">removing the entire method that</font>

460
00:18:42,310 --> 00:18:46,179
<font color="#E5E5E5">contained a shortcut well yeah basically</font>

461
00:18:44,110 --> 00:18:48,010
<font color="#E5E5E5">remove they have them do the proper</font>

462
00:18:46,180 --> 00:18:48,940
things as they<font color="#CCCCCC"> were supposed to do in</font>

463
00:18:48,010 --> 00:18:52,090
the first<font color="#CCCCCC"> place</font>

464
00:18:48,940 --> 00:18:53,530
well in principle doable<font color="#CCCCCC"> however</font><font color="#E5E5E5"> a</font>

465
00:18:52,090 --> 00:18:56,830
<font color="#E5E5E5">chances are that you break backward</font>

466
00:18:53,530 --> 00:19:00,129
compatibility and<font color="#E5E5E5"> backward compatibility</font>

467
00:18:56,830 --> 00:19:01,870
has always been valued<font color="#E5E5E5"> very very high so</font>

468
00:19:00,130 --> 00:19:03,760
it's hard to propose something<font color="#E5E5E5"> that</font>

469
00:19:01,870 --> 00:19:05,530
<font color="#CCCCCC">breaks backward compatibility</font><font color="#E5E5E5"> even if it</font>

470
00:19:03,760 --> 00:19:12,340
<font color="#CCCCCC">improves the system</font><font color="#E5E5E5"> and would be a</font>

471
00:19:05,530 --> 00:19:15,550
cleaner solution<font color="#E5E5E5"> right</font><font color="#CCCCCC"> okay hi</font><font color="#E5E5E5"> Jason</font>

472
00:19:12,340 --> 00:19:17,649
<font color="#E5E5E5">Johnson University of Rochester so my</font>

473
00:19:15,550 --> 00:19:21,250
understanding is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> Java has been</font>

474
00:19:17,650 --> 00:19:23,380
removed from all major web browsers in

475
00:19:21,250 --> 00:19:24,970
the<font color="#E5E5E5"> last couple years and or at least</font>

476
00:19:23,380 --> 00:19:27,550
last one that still has a<font color="#E5E5E5"> distant</font>

477
00:19:24,970 --> 00:19:30,580
Explorer and that's still only being

478
00:19:27,550 --> 00:19:32,649
retained as a compatibility hang so

479
00:19:30,580 --> 00:19:34,178
well do you know<font color="#E5E5E5"> of any other common</font>

480
00:19:32,649 --> 00:19:36,279
scenarios<font color="#CCCCCC"> wherever Java Runtime</font>

481
00:19:34,179 --> 00:19:41,620
environment is still<font color="#E5E5E5"> expected today to</font>

482
00:19:36,279 --> 00:19:43,750
run<font color="#E5E5E5"> untrusted code so I definitely</font>

483
00:19:41,620 --> 00:19:44,489
<font color="#E5E5E5">answer it and I also ask the same</font>

484
00:19:43,750 --> 00:19:47,760
question

485
00:19:44,490 --> 00:19:50,830
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> ask all worker</font><font color="#E5E5E5"> and also they</font>

486
00:19:47,760 --> 00:19:53,320
don't according to what I heard<font color="#CCCCCC"> and they</font>

487
00:19:50,830 --> 00:19:55,809
are also not<font color="#CCCCCC"> 100% sure where or where it</font>

488
00:19:53,320 --> 00:20:01,870
<font color="#E5E5E5">is not used</font><font color="#CCCCCC"> but I could</font><font color="#E5E5E5"> imagine</font><font color="#CCCCCC"> that for</font>

489
00:19:55,809 --> 00:20:04,809
<font color="#E5E5E5">instance in in in a server context where</font>

490
00:20:01,870 --> 00:20:05,889
you're executing<font color="#E5E5E5"> several servlets</font><font color="#CCCCCC"> and at</font>

491
00:20:04,809 --> 00:20:07,360
a time<font color="#E5E5E5"> and you want to make sure that</font>

492
00:20:05,889 --> 00:20:11,199
they<font color="#CCCCCC"> don't influence each other</font><font color="#E5E5E5"> that</font>

493
00:20:07,360 --> 00:20:13,199
might<font color="#E5E5E5"> be a thing</font><font color="#CCCCCC"> however I don't know to</font>

494
00:20:11,200 --> 00:20:16,690
<font color="#E5E5E5">what extent that is actually used or not</font>

495
00:20:13,200 --> 00:20:19,929
so I don't<font color="#CCCCCC"> know and</font><font color="#E5E5E5"> also I'm not so</font><font color="#CCCCCC"> sure</font>

496
00:20:16,690 --> 00:20:22,179
how how to find that out actually<font color="#CCCCCC"> if you</font>

497
00:20:19,929 --> 00:20:27,130
have<font color="#CCCCCC"> a source then I'd be happy to check</font>

498
00:20:22,179 --> 00:20:28,080
<font color="#E5E5E5">it thank you</font><font color="#CCCCCC"> ok let's</font><font color="#E5E5E5"> thank the speaker</font>

499
00:20:27,130 --> 00:20:33,660
<font color="#CCCCCC">again</font>

500
00:20:28,080 --> 00:20:33,659
[Applause]

