1
00:00:09,430 --> 00:00:12,440
thank you for<font color="#E5E5E5"> the introduction</font><font color="#CCCCCC"> again my</font>

2
00:00:11,500 --> 00:00:14,780
name is the

3
00:00:12,440 --> 00:00:16,820
today I want to talk about how we write

4
00:00:14,780 --> 00:00:18,590
<font color="#CCCCCC">the uncertainty</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> college binaries so</font>

5
00:00:16,820 --> 00:00:21,140
<font color="#E5E5E5">that they can</font><font color="#CCCCCC"> enjoy the</font><font color="#E5E5E5"> protections</font><font color="#CCCCCC"> of</font>

6
00:00:18,590 --> 00:00:23,210
rescue only memory<font color="#E5E5E5"> this is a joint work</font>

7
00:00:21,140 --> 00:00:26,540
<font color="#CCCCCC">between Stony Brook University and since</font>

8
00:00:23,210 --> 00:00:28,699
on research America<font color="#CCCCCC"> so the names in</font>

9
00:00:26,540 --> 00:00:31,519
black of<font color="#CCCCCC"> people from</font><font color="#E5E5E5"> Stony Brook namely</font>

10
00:00:28,699 --> 00:00:33,800
me<font color="#CCCCCC"> Donita</font><font color="#E5E5E5"> reach out it might</font><font color="#CCCCCC"> Pfizer</font><font color="#E5E5E5"> Lulu</font>

11
00:00:31,519 --> 00:00:35,780
<font color="#E5E5E5">and</font><font color="#CCCCCC"> the names in blue are people from</font>

12
00:00:33,800 --> 00:00:38,239
stem cell research namely one when I'm

13
00:00:35,780 --> 00:00:42,290
out of<font color="#E5E5E5"> high official</font><font color="#CCCCCC"> Kumar and one</font>

14
00:00:38,239 --> 00:00:45,110
<font color="#E5E5E5">Boston so first of all what</font><font color="#CCCCCC"> is sorry</font>

15
00:00:42,290 --> 00:00:47,809
what is<font color="#CCCCCC"> ask Yannick memory or zone and</font>

16
00:00:45,110 --> 00:00:49,610
why it<font color="#E5E5E5"> is useful</font><font color="#CCCCCC"> so this primitive was</font>

17
00:00:47,809 --> 00:00:51,680
first introduced by researchers from

18
00:00:49,610 --> 00:00:52,160
<font color="#CCCCCC">Stanford</font><font color="#E5E5E5"> and UC</font><font color="#CCCCCC"> Berkeley back in</font>

19
00:00:51,680 --> 00:00:54,440
<font color="#CCCCCC">tinnitus</font>

20
00:00:52,160 --> 00:00:56,538
<font color="#E5E5E5">they say that Co</font><font color="#CCCCCC"> content cannot be</font>

21
00:00:54,440 --> 00:00:59,599
<font color="#CCCCCC">viewed</font><font color="#E5E5E5"> in the memory and around their</font>

22
00:00:56,539 --> 00:01:02,210
time they use<font color="#CCCCCC"> zone to present a software</font>

23
00:00:59,600 --> 00:01:04,430
piracy<font color="#CCCCCC"> and recent years zone has another</font>

24
00:01:02,210 --> 00:01:06,680
<font color="#E5E5E5">calling which is to help defend against</font>

25
00:01:04,430 --> 00:01:09,410
the dynamic<font color="#CCCCCC"> memory disclosure</font><font color="#E5E5E5"> based</font>

26
00:01:06,680 --> 00:01:11,410
<font color="#CCCCCC">correos attacks in which the attacker</font>

27
00:01:09,410 --> 00:01:14,060
<font color="#CCCCCC">firstly kakko pointer and then use a</font>

28
00:01:11,410 --> 00:01:16,759
memory disclosure primitive to

29
00:01:14,060 --> 00:01:18,289
dynamically harvest the<font color="#CCCCCC"> co gadgets so</font>

30
00:01:16,759 --> 00:01:20,780
that without<font color="#CCCCCC"> any</font><font color="#E5E5E5"> a priori knowledge</font>

31
00:01:18,289 --> 00:01:23,240
about binary<font color="#E5E5E5"> layout the attacker can</font>

32
00:01:20,780 --> 00:01:26,630
assemble<font color="#E5E5E5"> these gadgets and then hijack</font>

33
00:01:23,240 --> 00:01:28,280
the control flow so naturally you<font color="#E5E5E5"> will</font>

34
00:01:26,630 --> 00:01:30,348
use them<font color="#CCCCCC"> to</font><font color="#E5E5E5"> prevent the gadgets from</font>

35
00:01:28,280 --> 00:01:33,289
being read we<font color="#E5E5E5"> can stop the attacker at</font>

36
00:01:30,349 --> 00:01:36,289
step<font color="#E5E5E5"> two and recent years however vendor</font>

37
00:01:33,289 --> 00:01:38,959
start to<font color="#E5E5E5"> keep up for</font><font color="#CCCCCC"> example in 836</font><font color="#E5E5E5"> you</font>

38
00:01:36,289 --> 00:01:41,149
have<font color="#E5E5E5"> EPT a memory</font><font color="#CCCCCC"> credential keeps any</font>

39
00:01:38,959 --> 00:01:44,060
<font color="#CCCCCC">answers before</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> zone directly</font>

40
00:01:41,149 --> 00:01:46,009
configurable from<font color="#CCCCCC"> kernel and here is the</font>

41
00:01:44,060 --> 00:01:48,800
earliest kernel patch<font color="#E5E5E5"> that I found that</font>

42
00:01:46,009 --> 00:01:51,110
try<font color="#E5E5E5"> to enable them on arm 64 platforms</font>

43
00:01:48,800 --> 00:01:54,709
you can<font color="#E5E5E5"> see that it dates</font><font color="#CCCCCC"> back to May</font>

44
00:01:51,110 --> 00:01:56,720
2014<font color="#E5E5E5"> which is three years</font><font color="#CCCCCC"> ago so why</font>

45
00:01:54,709 --> 00:01:58,880
after three years<font color="#E5E5E5"> this primitive is</font>

46
00:01:56,720 --> 00:02:00,770
still not massively in use yet

47
00:01:58,880 --> 00:02:04,130
well things well one of the major

48
00:02:00,770 --> 00:02:06,860
reasons is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's non-trivial to</font>

49
00:02:04,130 --> 00:02:07,670
enable zone<font color="#CCCCCC"> or code binaries for</font><font color="#E5E5E5"> example</font>

50
00:02:06,860 --> 00:02:10,038
in this figure

51
00:02:07,670 --> 00:02:12,890
<font color="#E5E5E5">it shows memory layout of the</font><font color="#CCCCCC"> College</font>

52
00:02:10,038 --> 00:02:15,679
binaries and you can see that in this

53
00:02:12,890 --> 00:02:18,529
<font color="#E5E5E5">memory page</font><font color="#CCCCCC"> Eriko and data interleaved</font>

54
00:02:15,680 --> 00:02:20,810
<font color="#E5E5E5">together and because long can only be</font>

55
00:02:18,530 --> 00:02:22,360
enforced<font color="#CCCCCC"> at page granularity that</font><font color="#E5E5E5"> means</font>

56
00:02:20,810 --> 00:02:25,180
<font color="#E5E5E5">all the data inside</font>

57
00:02:22,360 --> 00:02:27,460
<font color="#E5E5E5">memory page are</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> readable which will</font>

58
00:02:25,180 --> 00:02:29,740
break the program<font color="#E5E5E5"> so a very</font><font color="#CCCCCC"> high-level</font>

59
00:02:27,460 --> 00:02:31,810
<font color="#E5E5E5">idea would be first you separate</font><font color="#CCCCCC"> the</font>

60
00:02:29,740 --> 00:02:34,750
<font color="#CCCCCC">code and data</font><font color="#E5E5E5"> into different pages</font><font color="#CCCCCC"> and</font>

61
00:02:31,810 --> 00:02:37,420
then you<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to probably update</font><font color="#CCCCCC"> all the</font>

62
00:02:34,750 --> 00:02:38,860
references<font color="#E5E5E5"> because</font><font color="#CCCCCC"> if you miss any of</font>

63
00:02:37,420 --> 00:02:42,489
the reference<font color="#E5E5E5"> this will break the</font>

64
00:02:38,860 --> 00:02:44,200
<font color="#E5E5E5">program as well</font><font color="#CCCCCC"> let me first explain why</font>

65
00:02:42,490 --> 00:02:46,060
the memory layout looks like that

66
00:02:44,200 --> 00:02:48,369
so<font color="#E5E5E5"> basically this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> legacy issue</font>

67
00:02:46,060 --> 00:02:50,530
<font color="#E5E5E5">back in</font><font color="#CCCCCC"> the old days when people judge</font>

68
00:02:48,370 --> 00:02:53,230
<font color="#CCCCCC">make</font><font color="#E5E5E5"> the elf at the e.l.f file standard</font>

69
00:02:50,530 --> 00:02:54,820
<font color="#CCCCCC">they do not</font><font color="#E5E5E5"> consider re only or as</font>

70
00:02:53,230 --> 00:02:58,140
<font color="#CCCCCC">secure only</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> s queueing as</font>

71
00:02:54,820 --> 00:03:00,970
incompatible<font color="#CCCCCC"> as a result they put those</font>

72
00:02:58,140 --> 00:03:03,790
<font color="#E5E5E5">read-only data sections together with</font>

73
00:03:00,970 --> 00:03:06,670
<font color="#E5E5E5">code contents in order to get a more</font>

74
00:03:03,790 --> 00:03:09,280
compact binary in consequence<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have</font>

75
00:03:06,670 --> 00:03:11,170
those elf headers and<font color="#E5E5E5"> those</font><font color="#CCCCCC"> meta data</font>

76
00:03:09,280 --> 00:03:14,100
sections such as canoe has a place

77
00:03:11,170 --> 00:03:17,589
together<font color="#E5E5E5"> which the</font><font color="#CCCCCC"> codes action such as</font>

78
00:03:14,100 --> 00:03:20,410
<font color="#CCCCCC">PLT and tax notes</font><font color="#E5E5E5"> that they are treating</font>

79
00:03:17,590 --> 00:03:23,350
orange bars inside the text section that

80
00:03:20,410 --> 00:03:25,660
represents<font color="#CCCCCC"> the inline data and after</font>

81
00:03:23,350 --> 00:03:28,209
<font color="#CCCCCC">that hex</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have the rioni</font>

82
00:03:25,660 --> 00:03:30,850
data sections and he<font color="#CCCCCC"> a transactions</font>

83
00:03:28,209 --> 00:03:34,030
there are also<font color="#E5E5E5"> read-only that</font><font color="#CCCCCC"> plays</font>

84
00:03:30,850 --> 00:03:35,829
together with those<font color="#E5E5E5"> contents so other</font>

85
00:03:34,030 --> 00:03:38,890
than the code data locations of

86
00:03:35,830 --> 00:03:41,590
regarding the references for<font color="#E5E5E5"> a normal</font>

87
00:03:38,890 --> 00:03:44,260
elf binary<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> intersection</font>

88
00:03:41,590 --> 00:03:46,660
references<font color="#E5E5E5"> intersection references and</font>

89
00:03:44,260 --> 00:03:49,000
lastly you<font color="#CCCCCC"> have even references from</font>

90
00:03:46,660 --> 00:03:51,700
external<font color="#E5E5E5"> module for example</font><font color="#CCCCCC"> the dynamic</font>

91
00:03:49,000 --> 00:03:53,830
loader we want to<font color="#E5E5E5"> access the Alpha</font>

92
00:03:51,700 --> 00:03:56,950
header and those<font color="#CCCCCC"> meta data sections so</font>

93
00:03:53,830 --> 00:03:59,799
does the<font color="#E5E5E5"> C++ runtime that</font><font color="#CCCCCC"> means by</font><font color="#E5E5E5"> only</font>

94
00:03:56,950 --> 00:04:01,690
examining these are one<font color="#E5E5E5"> of this module</font>

95
00:03:59,799 --> 00:04:04,269
itself you can now comprehensively

96
00:04:01,690 --> 00:04:06,730
resolve all the<font color="#E5E5E5"> references if this</font>

97
00:04:04,269 --> 00:04:08,920
situation<font color="#CCCCCC"> is</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> messy</font><font color="#E5E5E5"> enough for you or</font>

98
00:04:06,730 --> 00:04:10,959
to scare you away from<font color="#E5E5E5"> trying to solve</font>

99
00:04:08,920 --> 00:04:12,670
this what<font color="#E5E5E5"> about there are still some</font>

100
00:04:10,959 --> 00:04:14,860
unknown references from<font color="#CCCCCC"> the external</font>

101
00:04:12,670 --> 00:04:17,228
<font color="#E5E5E5">module for example</font><font color="#CCCCCC"> in our experiments we</font>

102
00:04:14,860 --> 00:04:19,090
<font color="#E5E5E5">found that the Android our runtime wants</font>

103
00:04:17,228 --> 00:04:22,510
to<font color="#CCCCCC"> access three only section of the</font>

104
00:04:19,089 --> 00:04:24,700
title binary<font color="#E5E5E5"> so now let's revisit the</font>

105
00:04:22,510 --> 00:04:27,190
<font color="#CCCCCC">high-level</font><font color="#E5E5E5"> idea again</font><font color="#CCCCCC"> firstly you</font><font color="#E5E5E5"> want</font>

106
00:04:24,700 --> 00:04:29,110
to identify<font color="#CCCCCC"> that cube of data</font><font color="#E5E5E5"> throughout</font>

107
00:04:27,190 --> 00:04:32,530
the talk I<font color="#E5E5E5"> will use a scalable data on</font>

108
00:04:29,110 --> 00:04:33,340
at this<font color="#E5E5E5"> time to refer to</font><font color="#CCCCCC"> all the orange</font>

109
00:04:32,530 --> 00:04:35,739
area in

110
00:04:33,340 --> 00:04:37,989
<font color="#CCCCCC">studies</font><font color="#E5E5E5"> figure so you see that because</font>

111
00:04:35,740 --> 00:04:40,720
<font color="#CCCCCC">in line data are still prevalent in um</font>

112
00:04:37,990 --> 00:04:44,139
binaries<font color="#E5E5E5"> so there are past research</font><font color="#CCCCCC"> has</font>

113
00:04:40,720 --> 00:04:44,830
shown that under such situation<font color="#E5E5E5"> to tell</font>

114
00:04:44,139 --> 00:04:46,930
you data

115
00:04:44,830 --> 00:04:49,210
apart from<font color="#CCCCCC"> code precisely is in</font>

116
00:04:46,930 --> 00:04:51,340
principle<font color="#E5E5E5"> undecidable regarding the</font>

117
00:04:49,210 --> 00:04:54,210
references<font color="#E5E5E5"> hopefully I have convinced</font>

118
00:04:51,340 --> 00:04:55,960
you it's very<font color="#CCCCCC"> hard if not impossible to</font>

119
00:04:54,210 --> 00:04:58,719
comprehensively resolve all these

120
00:04:55,960 --> 00:05:00,250
references so facing<font color="#E5E5E5"> such challenges we</font>

121
00:04:58,720 --> 00:05:02,620
made the following<font color="#E5E5E5"> design goals for</font>

122
00:05:00,250 --> 00:05:04,090
<font color="#CCCCCC">North firstly regarding a code data</font>

123
00:05:02,620 --> 00:05:07,210
separation where you want to have

124
00:05:04,090 --> 00:05:09,729
analysis with very high<font color="#E5E5E5"> precision we</font>

125
00:05:07,210 --> 00:05:12,010
want to make practical trade-offs<font color="#E5E5E5"> which</font>

126
00:05:09,729 --> 00:05:14,169
means that we want<font color="#E5E5E5"> a superset of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> S</font>

127
00:05:12,010 --> 00:05:15,969
cubed data<font color="#E5E5E5"> but</font><font color="#CCCCCC"> only a subset of the</font>

128
00:05:14,169 --> 00:05:18,070
references which<font color="#E5E5E5"> we're resulting</font>

129
00:05:15,970 --> 00:05:19,900
<font color="#E5E5E5">something</font><font color="#CCCCCC"> like this</font><font color="#E5E5E5"> in this figure the</font>

130
00:05:18,070 --> 00:05:22,240
green ring<font color="#CCCCCC"> represent</font><font color="#E5E5E5"> the data collection</font>

131
00:05:19,900 --> 00:05:24,909
result that we want but<font color="#E5E5E5"> on the right</font>

132
00:05:22,240 --> 00:05:28,960
<font color="#CCCCCC">side this small blue green represent</font>

133
00:05:24,910 --> 00:05:30,820
actually the<font color="#CCCCCC"> mixed references so because</font>

134
00:05:28,960 --> 00:05:32,409
of these trade-offs<font color="#E5E5E5"> we also have the</font>

135
00:05:30,820 --> 00:05:34,750
<font color="#CCCCCC">security codes that's there we want to</font>

136
00:05:32,410 --> 00:05:36,639
expose as<font color="#CCCCCC"> Klesko as possible</font><font color="#E5E5E5"> meaning</font>

137
00:05:34,750 --> 00:05:40,150
<font color="#E5E5E5">that this</font><font color="#CCCCCC"> query</font><font color="#E5E5E5"> rings to be very small</font>

138
00:05:36,639 --> 00:05:42,789
<font color="#E5E5E5">and we also want to enforce this runtime</font>

139
00:05:40,150 --> 00:05:45,010
security policy based checks to tell

140
00:05:42,789 --> 00:05:48,099
apart the attackers from<font color="#E5E5E5"> the legitimate</font>

141
00:05:45,010 --> 00:05:50,080
<font color="#E5E5E5">mr. references and we also want</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to be</font>

142
00:05:48,100 --> 00:05:52,510
<font color="#E5E5E5">very practical by having low runtime</font>

143
00:05:50,080 --> 00:05:54,849
memory overhead<font color="#E5E5E5"> and new external be</font>

144
00:05:52,510 --> 00:05:56,620
exclusive<font color="#CCCCCC"> to other code binary hardening</font>

145
00:05:54,849 --> 00:06:00,550
<font color="#CCCCCC">solution such as fine-grained</font>

146
00:05:56,620 --> 00:06:02,650
colonization and<font color="#CCCCCC"> the CFI also North's</font>

147
00:06:00,550 --> 00:06:05,830
binaries to be<font color="#CCCCCC"> d'argo</font><font color="#E5E5E5"> compatible meaning</font>

148
00:06:02,650 --> 00:06:08,229
<font color="#E5E5E5">that the revision binaries they can even</font>

149
00:06:05,830 --> 00:06:10,289
<font color="#E5E5E5">run seamlessly on other unsuitable</font>

150
00:06:08,229 --> 00:06:12,729
platforms even<font color="#E5E5E5"> without</font><font color="#CCCCCC"> nor support and</font>

151
00:06:10,289 --> 00:06:16,960
lastly we<font color="#E5E5E5"> want to enforce</font><font color="#CCCCCC"> loam</font><font color="#E5E5E5"> or</font>

152
00:06:12,729 --> 00:06:20,919
modular<font color="#CCCCCC"> bases so now let me show you the</font>

153
00:06:16,960 --> 00:06:23,020
<font color="#E5E5E5">high-level</font><font color="#CCCCCC"> North's components of and how</font>

154
00:06:20,919 --> 00:06:25,719
they work together<font color="#E5E5E5"> to achieve</font><font color="#CCCCCC"> these</font>

155
00:06:23,020 --> 00:06:27,969
design goals first of all you are<font color="#CCCCCC"> we</font>

156
00:06:25,720 --> 00:06:30,460
<font color="#E5E5E5">have pieces and disassembler which will</font>

157
00:06:27,970 --> 00:06:33,010
<font color="#E5E5E5">collect the</font><font color="#CCCCCC"> supercell LPS</font><font color="#E5E5E5"> cubed data as</font>

158
00:06:30,460 --> 00:06:35,530
well<font color="#E5E5E5"> as</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> intro module references and</font>

159
00:06:33,010 --> 00:06:38,169
then this result<font color="#E5E5E5"> will be fed to a</font>

160
00:06:35,530 --> 00:06:40,469
<font color="#E5E5E5">whistle to an pattern which will</font>

161
00:06:38,169 --> 00:06:43,229
calculate<font color="#E5E5E5"> new binary layouts and</font><font color="#CCCCCC"> then</font>

162
00:06:40,470 --> 00:06:45,540
<font color="#CCCCCC">packaged binary</font><font color="#E5E5E5"> and then this repackage</font>

163
00:06:43,230 --> 00:06:47,520
binary can be loaded<font color="#E5E5E5"> by a</font><font color="#CCCCCC"> loader during</font>

164
00:06:45,540 --> 00:06:50,280
<font color="#CCCCCC">a load time that will update all the</font>

165
00:06:47,520 --> 00:06:52,440
<font color="#E5E5E5">collected references also enable zone or</font>

166
00:06:50,280 --> 00:06:54,419
modular<font color="#E5E5E5"> basis you see that because</font><font color="#CCCCCC"> we</font>

167
00:06:52,440 --> 00:06:56,550
<font color="#CCCCCC">only update the references at load time</font>

168
00:06:54,420 --> 00:06:59,400
<font color="#E5E5E5">is again preserve the</font><font color="#CCCCCC"> drago</font>

169
00:06:56,550 --> 00:07:01,620
compatibility and lastly<font color="#E5E5E5"> during</font><font color="#CCCCCC"> runtime</font>

170
00:06:59,400 --> 00:07:03,570
we have<font color="#E5E5E5"> a monitor as a runtime module</font>

171
00:07:01,620 --> 00:07:06,090
<font color="#E5E5E5">that will handle the mr. references as</font>

172
00:07:03,570 --> 00:07:08,370
<font color="#CCCCCC">well as</font><font color="#E5E5E5"> performing this access policy</font>

173
00:07:06,090 --> 00:07:11,789
checked in this work<font color="#CCCCCC"> wheels android as</font>

174
00:07:08,370 --> 00:07:13,620
our reference<font color="#E5E5E5"> platform</font><font color="#CCCCCC"> before i diving</font>

175
00:07:11,790 --> 00:07:15,000
into how and disassemble the works<font color="#E5E5E5"> I</font>

176
00:07:13,620 --> 00:07:16,830
want<font color="#CCCCCC"> to first share with you some</font>

177
00:07:15,000 --> 00:07:18,480
background so that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can know the</font>

178
00:07:16,830 --> 00:07:21,780
rationale behind and disassemble<font color="#CCCCCC"> it</font>

179
00:07:18,480 --> 00:07:24,210
analysis<font color="#E5E5E5"> first of all</font><font color="#CCCCCC"> II</font><font color="#E5E5E5"> am 64 I thought</font>

180
00:07:21,780 --> 00:07:26,940
they say that the instructions are<font color="#CCCCCC"> all</font>

181
00:07:24,210 --> 00:07:28,919
<font color="#CCCCCC">four by aligned and has fixed</font><font color="#E5E5E5"> sized also</font>

182
00:07:26,940 --> 00:07:31,620
the PC register<font color="#E5E5E5"> is no longer directly</font>

183
00:07:28,920 --> 00:07:33,960
accessible<font color="#E5E5E5"> and the most importantly they</font>

184
00:07:31,620 --> 00:07:36,270
only expose a very limited<font color="#E5E5E5"> set of</font>

185
00:07:33,960 --> 00:07:38,909
instructions<font color="#CCCCCC"> to perform</font><font color="#E5E5E5"> PC relative</font>

186
00:07:36,270 --> 00:07:41,460
addressing and this combined with<font color="#E5E5E5"> the</font>

187
00:07:38,910 --> 00:07:43,980
<font color="#CCCCCC">fact that since Android 5.0 google has</font>

188
00:07:41,460 --> 00:07:46,680
removed the<font color="#CCCCCC"> non-key I loaded from the</font>

189
00:07:43,980 --> 00:07:48,300
<font color="#CCCCCC">dynamic loader which means that if you</font>

190
00:07:46,680 --> 00:07:50,400
<font color="#CCCCCC">have purchased</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> android phone within</font>

191
00:07:48,300 --> 00:07:52,440
<font color="#CCCCCC">the</font><font color="#E5E5E5"> last three years chances are there</font>

192
00:07:50,400 --> 00:07:55,919
<font color="#E5E5E5">or the binary things either form</font><font color="#CCCCCC"> a</font>

193
00:07:52,440 --> 00:07:57,810
position independent<font color="#E5E5E5"> so very mind these</font>

194
00:07:55,919 --> 00:07:59,760
<font color="#CCCCCC">two observations</font><font color="#E5E5E5"> let's see how in this</font>

195
00:07:57,810 --> 00:08:01,890
assembler works<font color="#E5E5E5"> first of all</font><font color="#CCCCCC"> you start</font>

196
00:07:59,760 --> 00:08:04,409
<font color="#CCCCCC">with the linear sweep which will give us</font>

197
00:08:01,890 --> 00:08:07,080
<font color="#E5E5E5">a</font><font color="#CCCCCC"> over approximate set of instructions</font>

198
00:08:04,410 --> 00:08:09,450
<font color="#E5E5E5">represented by the green area and then</font>

199
00:08:07,080 --> 00:08:12,419
it does<font color="#E5E5E5"> this what we call guided data</font>

200
00:08:09,450 --> 00:08:14,430
collection<font color="#E5E5E5"> so remember we observe there</font>

201
00:08:12,419 --> 00:08:16,890
<font color="#E5E5E5">only a</font><font color="#CCCCCC"> limited set of instructions can</font>

202
00:08:14,430 --> 00:08:20,430
<font color="#CCCCCC">be used to collect the</font><font color="#E5E5E5"> obtain the</font>

203
00:08:16,890 --> 00:08:23,490
<font color="#CCCCCC">pc-relative</font><font color="#E5E5E5"> addresses and so we base our</font>

204
00:08:20,430 --> 00:08:25,830
<font color="#E5E5E5">analysis on this limited set</font><font color="#CCCCCC"> of</font>

205
00:08:23,490 --> 00:08:28,800
instructions<font color="#E5E5E5"> namely the</font><font color="#CCCCCC"> LDR literal and</font>

206
00:08:25,830 --> 00:08:30,359
<font color="#CCCCCC">ADRA DRP and we check the data load</font>

207
00:08:28,800 --> 00:08:33,719
<font color="#E5E5E5">operations initiated by these</font>

208
00:08:30,360 --> 00:08:35,940
<font color="#E5E5E5">instructions so this will give us a very</font>

209
00:08:33,719 --> 00:08:37,560
<font color="#E5E5E5">precise set of the data represented by</font>

210
00:08:35,940 --> 00:08:41,339
these<font color="#E5E5E5"> three orange bars in the</font><font color="#CCCCCC"> green</font>

211
00:08:37,559 --> 00:08:43,429
area<font color="#CCCCCC"> and then chances</font><font color="#E5E5E5"> are that this set</font>

212
00:08:41,339 --> 00:08:45,910
<font color="#E5E5E5">of data is still not complete because</font>

213
00:08:43,429 --> 00:08:49,030
<font color="#E5E5E5">while we are checking the</font>

214
00:08:45,910 --> 00:08:51,280
the code if we encounter<font color="#E5E5E5"> some memory</font>

215
00:08:49,030 --> 00:08:53,470
operations or<font color="#E5E5E5"> ingre branching</font><font color="#CCCCCC"> stressors</font>

216
00:08:51,280 --> 00:08:55,990
that<font color="#CCCCCC"> we cannot resolve</font><font color="#E5E5E5"> then we lost the</font>

217
00:08:53,470 --> 00:08:58,300
checked<font color="#E5E5E5"> in such situation</font><font color="#CCCCCC"> we mark the</font>

218
00:08:55,990 --> 00:08:59,770
current<font color="#E5E5E5"> tracking data as unbounded and</font>

219
00:08:58,300 --> 00:09:04,390
then perform this on board<font color="#E5E5E5"> data</font>

220
00:08:59,770 --> 00:09:06,640
expansion which<font color="#E5E5E5"> will extend the current</font>

221
00:09:04,390 --> 00:09:09,130
to check data backwards and forwards<font color="#E5E5E5"> and</font>

222
00:09:06,640 --> 00:09:11,199
<font color="#E5E5E5">you will reach a valid</font><font color="#CCCCCC"> instructions by</font>

223
00:09:09,130 --> 00:09:12,880
valuing instruction<font color="#E5E5E5"> I mean that during</font>

224
00:09:11,200 --> 00:09:15,670
the back<font color="#CCCCCC"> row expansion we stopped at</font>

225
00:09:12,880 --> 00:09:17,980
either<font color="#CCCCCC"> the arrow branching chosen with</font>

226
00:09:15,670 --> 00:09:20,130
the<font color="#E5E5E5"> valid targets or in</font><font color="#CCCCCC"> European</font>

227
00:09:17,980 --> 00:09:23,650
instructions which<font color="#E5E5E5"> we will check the</font>

228
00:09:20,130 --> 00:09:26,470
used<font color="#E5E5E5"> registered certified</font><font color="#CCCCCC"> API property</font>

229
00:09:23,650 --> 00:09:28,660
and during the<font color="#CCCCCC"> full extension we</font><font color="#E5E5E5"> stopped</font>

230
00:09:26,470 --> 00:09:30,640
at either the<font color="#E5E5E5"> targets from evaluator a</font>

231
00:09:28,660 --> 00:09:33,100
branch instruction<font color="#CCCCCC"> available in C</font>

232
00:09:30,640 --> 00:09:34,840
instruction or a<font color="#CCCCCC"> some set of</font><font color="#E5E5E5"> function</font>

233
00:09:33,100 --> 00:09:38,200
starts that we<font color="#CCCCCC"> obtained using static</font>

234
00:09:34,840 --> 00:09:40,110
analysis<font color="#E5E5E5"> so up to this step a superset</font>

235
00:09:38,200 --> 00:09:43,590
of the<font color="#CCCCCC"> executable data are collected</font>

236
00:09:40,110 --> 00:09:46,180
<font color="#E5E5E5">then and assembler will go</font><font color="#CCCCCC"> ahead</font><font color="#E5E5E5"> to</font>

237
00:09:43,590 --> 00:09:48,310
collect the intro module references

238
00:09:46,180 --> 00:09:50,920
<font color="#E5E5E5">which could come from</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> least</font><font color="#CCCCCC"> dis</font>

239
00:09:48,310 --> 00:09:53,020
<font color="#E5E5E5">following list of sections so for the</font>

240
00:09:50,920 --> 00:09:55,060
sake of time I want have<font color="#CCCCCC"> I won't dive</font>

241
00:09:53,020 --> 00:09:58,180
<font color="#E5E5E5">into detail for</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> part but in the</font>

242
00:09:55,060 --> 00:10:00,339
paper we<font color="#E5E5E5"> discussed what kind of program</font>

243
00:09:58,180 --> 00:10:02,829
practice will result in the references

244
00:10:00,340 --> 00:10:04,960
from these<font color="#E5E5E5"> sections so if you are</font>

245
00:10:02,830 --> 00:10:08,410
interesting this detail please refer to

246
00:10:04,960 --> 00:10:10,900
our paper and then this result<font color="#E5E5E5"> is given</font>

247
00:10:08,410 --> 00:10:13,060
to a matcher which will calculate<font color="#E5E5E5"> the</font>

248
00:10:10,900 --> 00:10:15,579
new memory layouts<font color="#E5E5E5"> specifically the new</font>

249
00:10:13,060 --> 00:10:17,380
location of<font color="#CCCCCC"> the edge cubed theta</font><font color="#E5E5E5"> in</font>

250
00:10:15,580 --> 00:10:19,480
which process is also<font color="#CCCCCC"> taking to</font>

251
00:10:17,380 --> 00:10:22,090
<font color="#E5E5E5">consideration the reference</font><font color="#CCCCCC"> address in</font>

252
00:10:19,480 --> 00:10:25,030
<font color="#E5E5E5">wrench and you</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> omit a stop code to</font>

253
00:10:22,090 --> 00:10:28,930
help<font color="#CCCCCC"> access is relocated data this new</font>

254
00:10:25,030 --> 00:10:31,329
data<font color="#E5E5E5"> location if necessary and and then</font>

255
00:10:28,930 --> 00:10:34,209
empecé will append<font color="#E5E5E5"> in noise related</font>

256
00:10:31,330 --> 00:10:36,460
<font color="#E5E5E5">metadata to the end of the elf this</font>

257
00:10:34,210 --> 00:10:39,160
<font color="#E5E5E5">again is to ensure the</font><font color="#CCCCCC"> backhoe</font>

258
00:10:36,460 --> 00:10:41,110
<font color="#CCCCCC">compatibility so the news relating</font>

259
00:10:39,160 --> 00:10:43,569
metadata includes the duplicating line

260
00:10:41,110 --> 00:10:46,540
data the references locations and

261
00:10:43,570 --> 00:10:48,610
displacement<font color="#E5E5E5"> the stop code and lastly</font>

262
00:10:46,540 --> 00:10:52,449
the<font color="#CCCCCC"> north header that can tell a loader</font>

263
00:10:48,610 --> 00:10:54,430
where to locate<font color="#E5E5E5"> this metadata so during</font>

264
00:10:52,450 --> 00:10:58,860
loading a<font color="#E5E5E5"> loader</font><font color="#CCCCCC"> propose</font><font color="#E5E5E5"> three of these</font>

265
00:10:54,430 --> 00:11:01,589
subtasks<font color="#E5E5E5"> that</font><font color="#CCCCCC"> tagged with LD 1 LD 2</font>

266
00:10:58,860 --> 00:11:03,510
history<font color="#E5E5E5"> in hell do you want</font><font color="#CCCCCC"> we set up</font>

267
00:11:01,590 --> 00:11:05,790
the<font color="#CCCCCC"> nose pocketing data which</font><font color="#E5E5E5"> I will</font>

268
00:11:03,510 --> 00:11:07,819
discuss<font color="#CCCCCC"> in the next slide also mapped</font><font color="#E5E5E5"> as</font>

269
00:11:05,790 --> 00:11:11,280
<font color="#CCCCCC">Cuba data to the</font><font color="#E5E5E5"> new location</font>

270
00:11:07,820 --> 00:11:13,410
accordingly and in<font color="#CCCCCC"> ld2 it redirects</font><font color="#E5E5E5"> all</font>

271
00:11:11,280 --> 00:11:15,240
the dynamic load accesses to the<font color="#E5E5E5"> new</font>

272
00:11:13,410 --> 00:11:18,329
read of the location by updating<font color="#E5E5E5"> the</font>

273
00:11:15,240 --> 00:11:20,670
dynamic session and lastly in<font color="#E5E5E5"> LDS</font>

274
00:11:18,330 --> 00:11:23,910
<font color="#E5E5E5">readjust all the references and then</font>

275
00:11:20,670 --> 00:11:26,520
enable<font color="#CCCCCC"> zone or modular faces I want to</font>

276
00:11:23,910 --> 00:11:30,060
<font color="#E5E5E5">show you how unloader works with this</font>

277
00:11:26,520 --> 00:11:32,100
simplified program loading process<font color="#CCCCCC"> so</font>

278
00:11:30,060 --> 00:11:34,920
first of all<font color="#E5E5E5"> you start with as</font><font color="#CCCCCC"> Cuba</font>

279
00:11:32,100 --> 00:11:37,200
loading you<font color="#E5E5E5"> can see we do LD 1 LD to</font>

280
00:11:34,920 --> 00:11:39,390
accordingly<font color="#E5E5E5"> and then the control flow is</font>

281
00:11:37,200 --> 00:11:41,550
transferred to the dynamic loader which

282
00:11:39,390 --> 00:11:44,850
will load all the dependent libraries

283
00:11:41,550 --> 00:11:47,819
and for each one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> them the module we</font>

284
00:11:44,850 --> 00:11:49,440
also do LD 1 LD 2 and after<font color="#E5E5E5"> all the</font>

285
00:11:47,820 --> 00:11:52,380
modules required by the process

286
00:11:49,440 --> 00:11:55,530
appropriate loaded the dynamic loader

287
00:11:52,380 --> 00:11:57,870
will go<font color="#CCCCCC"> ahead</font><font color="#E5E5E5"> to symbol resolution and</font>

288
00:11:55,530 --> 00:12:01,470
relocation<font color="#CCCCCC"> and we do LV 3 at this</font><font color="#E5E5E5"> point</font>

289
00:11:57,870 --> 00:12:03,360
<font color="#CCCCCC">if we do it</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> because some of the</font>

290
00:12:01,470 --> 00:12:06,060
references are only available<font color="#CCCCCC"> during</font>

291
00:12:03,360 --> 00:12:09,600
this time for<font color="#CCCCCC"> example those from the G</font>

292
00:12:06,060 --> 00:12:11,310
<font color="#CCCCCC">ot section</font><font color="#E5E5E5"> and by doing</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> here</font>

293
00:12:09,600 --> 00:12:14,070
we<font color="#E5E5E5"> have a higher coverage on the</font>

294
00:12:11,310 --> 00:12:16,260
references<font color="#E5E5E5"> lastly the program can start</font>

295
00:12:14,070 --> 00:12:18,120
and run so if you have the question<font color="#CCCCCC"> what</font>

296
00:12:16,260 --> 00:12:20,430
if the program load the library<font color="#CCCCCC"> during</font>

297
00:12:18,120 --> 00:12:22,350
<font color="#E5E5E5">runtime you can see that because</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> our</font>

298
00:12:20,430 --> 00:12:23,130
traces<font color="#CCCCCC"> of timing to perform</font><font color="#E5E5E5"> these three</font>

299
00:12:22,350 --> 00:12:25,440
<font color="#E5E5E5">subtasks</font>

300
00:12:23,130 --> 00:12:29,310
this is naturally handled by unloaded by

301
00:12:25,440 --> 00:12:31,770
doing this step<font color="#CCCCCC"> 2 and step</font><font color="#E5E5E5"> 3 again so</font>

302
00:12:29,310 --> 00:12:33,359
during runtime<font color="#CCCCCC"> a</font><font color="#E5E5E5"> monitor will help</font>

303
00:12:31,770 --> 00:12:36,180
resolve these missed

304
00:12:33,360 --> 00:12:39,500
references and also perform<font color="#CCCCCC"> this before</font>

305
00:12:36,180 --> 00:12:42,140
policy checks<font color="#E5E5E5"> policy checks and</font>

306
00:12:39,500 --> 00:12:44,670
currently we have<font color="#E5E5E5"> a default</font><font color="#CCCCCC"> policy</font><font color="#E5E5E5"> of</font>

307
00:12:42,140 --> 00:12:46,949
<font color="#E5E5E5">that we</font><font color="#CCCCCC"> made based on</font><font color="#E5E5E5"> our experience</font>

308
00:12:44,670 --> 00:12:48,780
which we believe is<font color="#CCCCCC"> like a</font><font color="#E5E5E5"> very good</font>

309
00:12:46,950 --> 00:12:51,330
<font color="#CCCCCC">balance between compatibility and</font>

310
00:12:48,780 --> 00:12:54,120
security basically the policy says that

311
00:12:51,330 --> 00:12:56,430
<font color="#E5E5E5">the</font><font color="#CCCCCC"> code can only access is identified</font>

312
00:12:54,120 --> 00:12:58,740
superset of<font color="#CCCCCC"> the SQL they</font><font color="#E5E5E5"> are region also</font>

313
00:12:56,430 --> 00:13:00,839
<font color="#CCCCCC">for the inline data they should only be</font>

314
00:12:58,740 --> 00:13:03,420
<font color="#E5E5E5">allowed</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> your hosting functions which</font>

315
00:13:00,840 --> 00:13:05,430
are<font color="#E5E5E5"> these over approximated ranges that</font>

316
00:13:03,420 --> 00:13:07,890
we<font color="#CCCCCC"> obtain using</font><font color="#E5E5E5"> static analysis and</font>

317
00:13:05,430 --> 00:13:08,719
lastly<font color="#E5E5E5"> for compatibility reason we mark</font>

318
00:13:07,890 --> 00:13:10,550
the convention

319
00:13:08,720 --> 00:13:12,890
by<font color="#E5E5E5"> our headers and those non coal</font>

320
00:13:10,550 --> 00:13:14,750
regions as<font color="#CCCCCC"> ylist before now and the</font>

321
00:13:12,890 --> 00:13:17,689
right side this is the<font color="#E5E5E5"> bookkeeping data</font>

322
00:13:14,750 --> 00:13:20,000
I<font color="#CCCCCC"> mentioned in the</font><font color="#E5E5E5"> last slide</font><font color="#CCCCCC"> so in</font><font color="#E5E5E5"> this</font>

323
00:13:17,690 --> 00:13:23,150
<font color="#CCCCCC">linked</font><font color="#E5E5E5"> list</font><font color="#CCCCCC"> each note is a</font><font color="#E5E5E5"> represent</font>

324
00:13:20,000 --> 00:13:24,640
module in your<font color="#E5E5E5"> process</font><font color="#CCCCCC"> and you can see</font>

325
00:13:23,150 --> 00:13:27,020
that each one<font color="#CCCCCC"> of them has their own</font>

326
00:13:24,640 --> 00:13:30,710
<font color="#E5E5E5">policy and</font><font color="#CCCCCC"> whitelist which we were outer</font>

327
00:13:27,020 --> 00:13:32,720
need to<font color="#CCCCCC"> adjust them if necessary so we</font>

328
00:13:30,710 --> 00:13:34,610
believe this policy does<font color="#CCCCCC"> not hurt</font>

329
00:13:32,720 --> 00:13:37,190
security for the following two reasons

330
00:13:34,610 --> 00:13:40,820
first<font color="#E5E5E5"> of all even the attacker can read</font>

331
00:13:37,190 --> 00:13:42,860
the SQL data<font color="#E5E5E5"> region this are part mostly</font>

332
00:13:40,820 --> 00:13:44,900
contains only<font color="#CCCCCC"> invalid data</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> example</font>

333
00:13:42,860 --> 00:13:48,350
<font color="#E5E5E5">it</font><font color="#CCCCCC"> looks like this</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> are they</font>

334
00:13:44,900 --> 00:13:50,209
cannot be executed<font color="#E5E5E5"> and for the second</font>

335
00:13:48,350 --> 00:13:52,820
reason because<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the policy about</font>

336
00:13:50,210 --> 00:13:55,490
England data<font color="#E5E5E5"> now the attacker needs to</font>

337
00:13:52,820 --> 00:13:57,500
use multiple members disclosure<font color="#CCCCCC"> work in</font>

338
00:13:55,490 --> 00:14:00,860
<font color="#E5E5E5">order to explore the</font><font color="#CCCCCC"> execute data in</font>

339
00:13:57,500 --> 00:14:03,710
different<font color="#E5E5E5"> area</font><font color="#CCCCCC"> so now that I have</font>

340
00:14:00,860 --> 00:14:05,360
<font color="#CCCCCC">finished introducing how north's works I</font>

341
00:14:03,710 --> 00:14:07,730
want to compare you with the set of

342
00:14:05,360 --> 00:14:10,370
related works from the angle<font color="#E5E5E5"> of how to</font>

343
00:14:07,730 --> 00:14:13,220
enable<font color="#E5E5E5"> zone so in the first line of work</font>

344
00:14:10,370 --> 00:14:15,230
they enable zone by recompiling and

345
00:14:13,220 --> 00:14:17,120
we're linking the program so<font color="#E5E5E5"> that the</font>

346
00:14:15,230 --> 00:14:19,400
binary<font color="#E5E5E5"> emitted by the to churn when</font>

347
00:14:17,120 --> 00:14:22,970
loaded will have code and data<font color="#CCCCCC"> separated</font>

348
00:14:19,400 --> 00:14:25,760
<font color="#E5E5E5">nicely</font><font color="#CCCCCC"> but it's required source code on</font>

349
00:14:22,970 --> 00:14:27,970
the second line of work they provide us

350
00:14:25,760 --> 00:14:32,510
very handy data analysis to identify

351
00:14:27,970 --> 00:14:34,310
subset of SQL data which is group a it's

352
00:14:32,510 --> 00:14:35,960
not enough for<font color="#CCCCCC"> our purpose and we</font>

353
00:14:34,310 --> 00:14:38,329
believe the<font color="#E5E5E5"> most comparable work to</font>

354
00:14:35,960 --> 00:14:40,760
<font color="#CCCCCC">northeast</font><font color="#E5E5E5"> hi Dan I then also want</font><font color="#CCCCCC"> to</font>

355
00:14:38,330 --> 00:14:44,210
<font color="#CCCCCC">identify the superset of X cubed theta</font>

356
00:14:40,760 --> 00:14:46,370
<font color="#E5E5E5">and here</font><font color="#CCCCCC"> is how hiding works</font><font color="#E5E5E5"> so this</font>

357
00:14:44,210 --> 00:14:48,380
figure anxiety<font color="#E5E5E5"> grows green rings</font>

358
00:14:46,370 --> 00:14:50,900
represent the function<font color="#CCCCCC"> node of a</font><font color="#E5E5E5"> call</font>

359
00:14:48,380 --> 00:14:52,670
graphs<font color="#E5E5E5"> in that program and</font><font color="#CCCCCC"> hide em</font>

360
00:14:50,900 --> 00:14:55,610
starts<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the entry</font><font color="#E5E5E5"> points and then</font>

361
00:14:52,670 --> 00:14:58,339
from this recursive disassembly and<font color="#E5E5E5"> then</font>

362
00:14:55,610 --> 00:15:00,800
also as well some static analysis to

363
00:14:58,339 --> 00:15:03,290
identify this<font color="#E5E5E5"> subset of the call graph</font>

364
00:15:00,800 --> 00:15:05,479
<font color="#E5E5E5">and then they mark everything else as</font>

365
00:15:03,290 --> 00:15:07,640
data you see that<font color="#E5E5E5"> because of</font><font color="#CCCCCC"> the</font>

366
00:15:05,480 --> 00:15:09,710
limitation of static analysis<font color="#CCCCCC"> being</font><font color="#E5E5E5"> a</font>

367
00:15:07,640 --> 00:15:14,870
vertically will identify<font color="#E5E5E5"> some code as</font>

368
00:15:09,710 --> 00:15:16,390
<font color="#CCCCCC">data so compared with hi them these two</font>

369
00:15:14,870 --> 00:15:19,910
works actually has their own advantages

370
00:15:16,390 --> 00:15:20,720
<font color="#CCCCCC">for</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> in the in the scope of I'm</font>

371
00:15:19,910 --> 00:15:23,810
<font color="#CCCCCC">64</font>

372
00:15:20,720 --> 00:15:26,120
it's more precise<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it's analysis</font>

373
00:15:23,810 --> 00:15:28,729
depends on specific<font color="#E5E5E5"> unsuccessful eyes</font><font color="#CCCCCC"> or</font>

374
00:15:26,120 --> 00:15:30,500
knowledge<font color="#E5E5E5"> but</font><font color="#CCCCCC"> high Liam's approach is</font>

375
00:15:28,730 --> 00:15:32,810
actually architecture<font color="#CCCCCC"> independent on</font>

376
00:15:30,500 --> 00:15:35,390
they can handle other cultures such as

377
00:15:32,810 --> 00:15:37,459
x86<font color="#E5E5E5"> and because of that</font><font color="#CCCCCC"> their</font>

378
00:15:35,390 --> 00:15:39,949
disassembler is also robust<font color="#E5E5E5"> against the</font>

379
00:15:37,460 --> 00:15:41,930
<font color="#CCCCCC">Iranian</font><font color="#E5E5E5"> disassembly which is naturally</font>

380
00:15:39,950 --> 00:15:45,920
not a problem for<font color="#E5E5E5"> insisting</font><font color="#CCCCCC"> for anyway</font>

381
00:15:41,930 --> 00:15:48,500
and the note<font color="#CCCCCC"> is more systematic because</font>

382
00:15:45,920 --> 00:15:51,380
he can handle a has a higher coverage on

383
00:15:48,500 --> 00:15:53,690
the references<font color="#CCCCCC"> and also North is enabled</font>

384
00:15:51,380 --> 00:15:56,000
on<font color="#CCCCCC"> the real world</font><font color="#E5E5E5"> mobile systems so I</font>

385
00:15:53,690 --> 00:15:59,510
want to show you our evaluation results

386
00:15:56,000 --> 00:16:02,450
<font color="#CCCCCC">during our evaluation with</font><font color="#E5E5E5"> three set of</font>

387
00:15:59,510 --> 00:16:05,210
the binaries<font color="#CCCCCC"> in the set as to one in</font>

388
00:16:02,450 --> 00:16:07,610
<font color="#E5E5E5">consists of 313 system would be</font><font color="#CCCCCC"> system</font>

389
00:16:05,210 --> 00:16:09,440
<font color="#CCCCCC">einar's</font><font color="#E5E5E5"> they are all stripped</font><font color="#CCCCCC"> come from</font>

390
00:16:07,610 --> 00:16:12,200
the commercial<font color="#CCCCCC"> phones and we use them to</font>

391
00:16:09,440 --> 00:16:14,060
<font color="#E5E5E5">run our data analysis and learning</font>

392
00:16:12,200 --> 00:16:16,040
<font color="#CCCCCC">except as to with</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> lat 20 of the</font>

393
00:16:14,060 --> 00:16:18,109
critical system binaries and then

394
00:16:16,040 --> 00:16:20,510
convert them and then run our

395
00:16:18,110 --> 00:16:22,640
functionality<font color="#E5E5E5"> tests in the last set we</font>

396
00:16:20,510 --> 00:16:25,040
use UNIX<font color="#CCCCCC"> pants to measure</font><font color="#E5E5E5"> runtime and</font>

397
00:16:22,640 --> 00:16:27,890
memory overhead so regarding<font color="#CCCCCC"> the data</font>

398
00:16:25,040 --> 00:16:31,819
analysis so<font color="#CCCCCC"> we set as one in which</font>

399
00:16:27,890 --> 00:16:34,220
<font color="#E5E5E5">process we observe</font><font color="#CCCCCC"> 132 out of 313</font>

400
00:16:31,820 --> 00:16:36,620
binaries has reported<font color="#CCCCCC"> inline data</font><font color="#E5E5E5"> and</font>

401
00:16:34,220 --> 00:16:38,780
for<font color="#E5E5E5"> this real friend</font><font color="#CCCCCC"> doing the</font><font color="#E5E5E5"> analyzed</font>

402
00:16:36,620 --> 00:16:41,060
process they require this unbound data

403
00:16:38,780 --> 00:16:44,990
expansion which means that the rest<font color="#E5E5E5"> of</font>

404
00:16:41,060 --> 00:16:48,109
<font color="#E5E5E5">the 132 binaries can be analyzed nicely</font>

405
00:16:44,990 --> 00:16:51,980
with the guided data collection in this

406
00:16:48,110 --> 00:16:54,950
process we also observe a<font color="#E5E5E5"> 28 of binary</font>

407
00:16:51,980 --> 00:16:57,560
search<font color="#CCCCCC"> for demo we have identified more</font>

408
00:16:54,950 --> 00:17:00,110
code as data<font color="#E5E5E5"> but regarding</font><font color="#CCCCCC"> the data</font>

409
00:16:57,560 --> 00:17:02,239
<font color="#CCCCCC">missed we do not miss</font><font color="#E5E5E5"> any but this is</font>

410
00:17:00,110 --> 00:17:04,459
after<font color="#E5E5E5"> we are manually</font><font color="#CCCCCC"> filter down</font>

411
00:17:02,240 --> 00:17:06,560
<font color="#CCCCCC">reference</font><font color="#E5E5E5"> data such as the padding's and</font>

412
00:17:04,459 --> 00:17:08,390
signature<font color="#E5E5E5"> strings</font><font color="#CCCCCC"> etc because</font><font color="#E5E5E5"> making</font>

413
00:17:06,560 --> 00:17:10,429
them unreadable will not break the

414
00:17:08,390 --> 00:17:13,160
program<font color="#E5E5E5"> so we do not count them as</font>

415
00:17:10,430 --> 00:17:16,040
<font color="#E5E5E5">forced negatives we also observe that in</font>

416
00:17:13,160 --> 00:17:18,110
this<font color="#CCCCCC"> amongst</font><font color="#E5E5E5"> binary sleep and regard as</font>

417
00:17:16,040 --> 00:17:20,270
we<font color="#E5E5E5"> buy curating and</font><font color="#CCCCCC"> ourselves has</font>

418
00:17:18,109 --> 00:17:21,099
reported much more in line data than

419
00:17:20,270 --> 00:17:24,069
other animals

420
00:17:21,099 --> 00:17:26,319
- regarding the functionality test<font color="#E5E5E5"> we</font>

421
00:17:24,069 --> 00:17:28,659
converted those critical system binaries

422
00:17:26,319 --> 00:17:31,120
including the QC<font color="#CCCCCC"> complete the contour</font>

423
00:17:28,660 --> 00:17:33,520
<font color="#E5E5E5">ivory or and those important system</font>

424
00:17:31,120 --> 00:17:35,590
demons<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you cycles are in studies of</font>

425
00:17:33,520 --> 00:17:37,270
<font color="#E5E5E5">extremely researcher they are used to</font>

426
00:17:35,590 --> 00:17:39,970
support<font color="#E5E5E5"> your day-to-day tasks such as</font>

427
00:17:37,270 --> 00:17:42,100
launching<font color="#CCCCCC"> up</font><font color="#E5E5E5"> new</font><font color="#CCCCCC"> new application making</font>

428
00:17:39,970 --> 00:17:42,640
<font color="#E5E5E5">phone call or render frame buffer et</font>

429
00:17:42,100 --> 00:17:45,459
cetera

430
00:17:42,640 --> 00:17:47,559
we also converted the low-level complex

431
00:17:45,460 --> 00:17:50,559
libraries such as<font color="#CCCCCC"> lips silly</font><font color="#E5E5E5"> pen and</font>

432
00:17:47,559 --> 00:17:52,660
then we enable them<font color="#CCCCCC"> and during</font><font color="#E5E5E5"> our</font>

433
00:17:50,559 --> 00:17:53,850
personality<font color="#CCCCCC"> test week knowledge survey a</font>

434
00:17:52,660 --> 00:17:59,320
failure

435
00:17:53,850 --> 00:18:01,570
lastly we run the<font color="#CCCCCC"> UNIX punch binaries</font><font color="#E5E5E5"> we</font>

436
00:17:59,320 --> 00:18:04,629
converted them and around them<font color="#E5E5E5"> on this</font>

437
00:18:01,570 --> 00:18:06,610
Qualcomm Snapdragon 808 chip with<font color="#E5E5E5"> two</font>

438
00:18:04,630 --> 00:18:10,299
<font color="#E5E5E5">divided memory also</font><font color="#CCCCCC"> known as the Nexus</font>

439
00:18:06,610 --> 00:18:12,908
<font color="#E5E5E5">5's form and we compare</font><font color="#CCCCCC"> it with</font><font color="#E5E5E5"> the</font>

440
00:18:10,299 --> 00:18:14,980
original binaries and in<font color="#E5E5E5"> this process we</font>

441
00:18:12,909 --> 00:18:17,530
observe the average runtime overhead

442
00:18:14,980 --> 00:18:21,840
peak memory overhead and the file size

443
00:18:17,530 --> 00:18:27,908
over<font color="#E5E5E5"> had our negligible and notice that</font>

444
00:18:21,840 --> 00:18:31,030
is one benchmark<font color="#CCCCCC"> with the exact CL that</font>

445
00:18:27,909 --> 00:18:33,730
has much<font color="#CCCCCC"> higher runtime overhead because</font>

446
00:18:31,030 --> 00:18:38,080
<font color="#E5E5E5">this is benchmark actually is doing us</font>

447
00:18:33,730 --> 00:18:41,530
just testing<font color="#CCCCCC"> only</font><font color="#E5E5E5"> exact see this Court</font>

448
00:18:38,080 --> 00:18:43,899
has seen it<font color="#CCCCCC"> just</font><font color="#E5E5E5"> keep calling exact on</font>

449
00:18:41,530 --> 00:18:46,740
itself<font color="#E5E5E5"> and this will trigger our</font>

450
00:18:43,900 --> 00:18:49,000
bookkeeping data set up and keep

451
00:18:46,740 --> 00:18:52,000
<font color="#CCCCCC">triggering this locking and locking</font>

452
00:18:49,000 --> 00:18:56,190
mechanism that's the reason why our

453
00:18:52,000 --> 00:18:59,740
exhibits higher overhead<font color="#E5E5E5"> so in summary</font>

454
00:18:56,190 --> 00:19:01,600
we firstly perform a systematic study<font color="#CCCCCC"> of</font>

455
00:18:59,740 --> 00:19:04,659
the code data separation problem<font color="#E5E5E5"> on</font>

456
00:19:01,600 --> 00:19:07,059
those<font color="#E5E5E5"> cots binaries and notice the first</font>

457
00:19:04,659 --> 00:19:09,789
comprehensive<font color="#E5E5E5"> solution for enabling zone</font>

458
00:19:07,059 --> 00:19:12,190
from<font color="#E5E5E5"> 64 platforms in</font><font color="#CCCCCC"> which it makes</font>

459
00:19:09,789 --> 00:19:13,900
practical trade-offs<font color="#E5E5E5"> to tackle the in</font>

460
00:19:12,190 --> 00:19:16,360
principle undecidable code data

461
00:19:13,900 --> 00:19:18,400
separation problem<font color="#CCCCCC"> eating</font><font color="#E5E5E5"> has the</font>

462
00:19:16,360 --> 00:19:21,129
security<font color="#E5E5E5"> such that it exposed very last</font>

463
00:19:18,400 --> 00:19:23,169
code to the attacker<font color="#E5E5E5"> and also enforce</font>

464
00:19:21,130 --> 00:19:25,990
this runtime<font color="#E5E5E5"> based policy</font><font color="#CCCCCC"> checks and</font>

465
00:19:23,169 --> 00:19:27,640
<font color="#CCCCCC">noise features the practical design such</font>

466
00:19:25,990 --> 00:19:30,700
that<font color="#CCCCCC"> is support the modular zone</font>

467
00:19:27,640 --> 00:19:32,740
<font color="#CCCCCC">enforcement's</font><font color="#E5E5E5"> it covers as curable as</font>

468
00:19:30,700 --> 00:19:34,000
<font color="#E5E5E5">well as libraries and those common</font>

469
00:19:32,740 --> 00:19:36,640
<font color="#E5E5E5">parties such</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> one</font>

470
00:19:34,000 --> 00:19:38,500
library<font color="#CCCCCC"> loading and no expander is</font>

471
00:19:36,640 --> 00:19:41,680
<font color="#CCCCCC">tobacco compatible you can run this</font>

472
00:19:38,500 --> 00:19:45,250
converted binary even on other stork

473
00:19:41,680 --> 00:19:48,910
<font color="#CCCCCC">unassisted</font><font color="#E5E5E5"> for phones with seamlessly</font>

474
00:19:45,250 --> 00:19:50,980
and also<font color="#E5E5E5"> the</font><font color="#CCCCCC"> north is</font><font color="#E5E5E5"> now exclusive</font>

475
00:19:48,910 --> 00:19:52,930
<font color="#E5E5E5">although I didn't discuss explicitly in</font>

476
00:19:50,980 --> 00:19:55,300
the talk by<font color="#E5E5E5"> the</font><font color="#CCCCCC"> notes does not introduce</font>

477
00:19:52,930 --> 00:19:57,700
any change to the<font color="#CCCCCC"> dataflow of Cobra our</font>

478
00:19:55,300 --> 00:19:59,560
property of the program lastly would

479
00:19:57,700 --> 00:20:01,480
perform large-scale<font color="#CCCCCC"> evaluations on</font>

480
00:19:59,560 --> 00:20:04,330
<font color="#E5E5E5">real-world mobile system binaries in</font>

481
00:20:01,480 --> 00:20:06,430
which we show that<font color="#CCCCCC"> those</font><font color="#E5E5E5"> can precisely</font>

482
00:20:04,330 --> 00:20:08,860
collect the data also<font color="#E5E5E5"> the rewritten</font>

483
00:20:06,430 --> 00:20:11,290
binary incurs negligible runtime and

484
00:20:08,860 --> 00:20:12,790
memory overhead so with that I want to

485
00:20:11,290 --> 00:20:15,030
<font color="#E5E5E5">thank you for attention and take any</font>

486
00:20:12,790 --> 00:20:20,159
<font color="#E5E5E5">questions you might</font><font color="#CCCCCC"> have</font>

487
00:20:15,030 --> 00:20:23,710
[Applause]

488
00:20:20,160 --> 00:20:26,050
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> you can comment on the applicability</font>

489
00:20:23,710 --> 00:20:29,290
of<font color="#E5E5E5"> your techniques on x86 which is</font>

490
00:20:26,050 --> 00:20:31,780
clearly more complex and<font color="#CCCCCC"> exactly</font><font color="#E5E5E5"> also</font>

491
00:20:29,290 --> 00:20:33,940
why we have the confidence to<font color="#E5E5E5"> say that</font>

492
00:20:31,780 --> 00:20:36,310
<font color="#E5E5E5">it can cover</font><font color="#CCCCCC"> insist avoids because of</font>

493
00:20:33,940 --> 00:20:39,340
you know the<font color="#CCCCCC"> specific insisted for</font>

494
00:20:36,310 --> 00:20:41,980
instruction set architecture and<font color="#E5E5E5"> because</font>

495
00:20:39,340 --> 00:20:44,290
they only have this limited set of

496
00:20:41,980 --> 00:20:46,870
instructions<font color="#E5E5E5"> that can</font><font color="#CCCCCC"> be used to</font><font color="#E5E5E5"> obtain</font>

497
00:20:44,290 --> 00:20:50,470
the relative addresses and this does not

498
00:20:46,870 --> 00:20:54,810
<font color="#E5E5E5">receive it on the x86 architecture</font><font color="#CCCCCC"> so</font>

499
00:20:50,470 --> 00:21:01,690
this is not applicable<font color="#CCCCCC"> to exa districts</font>

500
00:20:54,810 --> 00:21:02,669
right<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right let's send the speaker</font>

501
00:21:01,690 --> 00:21:08,390
<font color="#E5E5E5">again</font>

502
00:21:02,670 --> 00:21:08,390
[Applause]

