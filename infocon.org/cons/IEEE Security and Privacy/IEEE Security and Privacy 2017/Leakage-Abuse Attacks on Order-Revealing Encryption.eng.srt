1
00:00:10,129 --> 00:00:13,879
<font color="#E5E5E5">okay so if anybody comes</font><font color="#CCCCCC"> in late</font><font color="#E5E5E5"> I want</font>

2
00:00:12,589 --> 00:00:15,799
<font color="#CCCCCC">you to tell them</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> this was like the</font>

3
00:00:13,879 --> 00:00:18,200
<font color="#CCCCCC">best talk you've ever seen and they'll</font>

4
00:00:15,799 --> 00:00:20,419
<font color="#E5E5E5">they'll really regret not coming</font><font color="#CCCCCC"> in to</font>

5
00:00:18,200 --> 00:00:21,829
see my talk anyway so what we're<font color="#E5E5E5"> going</font>

6
00:00:20,419 --> 00:00:25,550
to talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> today is order revealing</font>

7
00:00:21,829 --> 00:00:28,220
encryption<font color="#CCCCCC"> there's a the basic</font>

8
00:00:25,550 --> 00:00:29,900
client-server architecture is<font color="#CCCCCC"> used</font>

9
00:00:28,220 --> 00:00:31,490
<font color="#E5E5E5">pretty</font><font color="#CCCCCC"> much everywhere</font><font color="#E5E5E5"> there's a client</font>

10
00:00:29,900 --> 00:00:33,559
<font color="#E5E5E5">that generates data and interacts with</font>

11
00:00:31,490 --> 00:00:36,500
<font color="#CCCCCC">the server and the server stores</font><font color="#E5E5E5"> this</font>

12
00:00:33,559 --> 00:00:39,078
data<font color="#E5E5E5"> that's generated on</font><font color="#CCCCCC"> the on some</font>

13
00:00:36,500 --> 00:00:40,879
<font color="#E5E5E5">database this model is ubiquitous</font>

14
00:00:39,079 --> 00:00:43,220
throughout computing and works pretty

15
00:00:40,879 --> 00:00:44,960
well generally until there's a breach

16
00:00:43,220 --> 00:00:47,540
and the confidentiality<font color="#E5E5E5"> of all this data</font>

17
00:00:44,960 --> 00:00:50,570
that<font color="#CCCCCC"> the client put</font><font color="#E5E5E5"> in the server is</font>

18
00:00:47,540 --> 00:00:52,580
compromised<font color="#E5E5E5"> despite advances in our</font>

19
00:00:50,570 --> 00:00:54,680
understanding<font color="#E5E5E5"> of how</font><font color="#CCCCCC"> to prevent these</font>

20
00:00:52,580 --> 00:00:57,860
breaches they still happen<font color="#E5E5E5"> with alarming</font>

21
00:00:54,680 --> 00:01:00,080
<font color="#CCCCCC">frequency so</font><font color="#E5E5E5"> having a way to protect the</font>

22
00:00:57,860 --> 00:01:03,920
data<font color="#E5E5E5"> even in the</font><font color="#CCCCCC"> event of</font><font color="#E5E5E5"> a breach is a</font>

23
00:01:00,080 --> 00:01:05,900
<font color="#E5E5E5">desirable one seemingly</font><font color="#CCCCCC"> obvious solution</font>

24
00:01:03,920 --> 00:01:07,520
is to<font color="#E5E5E5"> encrypt the data on the server</font>

25
00:01:05,900 --> 00:01:09,320
with a key

26
00:01:07,520 --> 00:01:13,899
that's only<font color="#E5E5E5"> note of the client using</font>

27
00:01:09,320 --> 00:01:17,240
some kind<font color="#E5E5E5"> of standard a</font><font color="#CCCCCC"> SaaS GCM</font><font color="#E5E5E5"> IMD CPA</font>

28
00:01:13,900 --> 00:01:19,100
standard encryption<font color="#E5E5E5"> this this method</font>

29
00:01:17,240 --> 00:01:21,350
<font color="#E5E5E5">preserves the</font><font color="#CCCCCC"> confidentiality of the</font>

30
00:01:19,100 --> 00:01:23,390
data<font color="#E5E5E5"> but unfortunately it doesn't enable</font>

31
00:01:21,350 --> 00:01:25,220
any kind of application<font color="#CCCCCC"> functionality</font>

32
00:01:23,390 --> 00:01:28,210
<font color="#E5E5E5">the data basically just sits</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> and</font>

33
00:01:25,220 --> 00:01:28,210
you can't do<font color="#CCCCCC"> anything with it</font>

34
00:01:32,080 --> 00:01:35,649
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> 15</font><font color="#CCCCCC"> years or so</font><font color="#E5E5E5"> the cryptography</font>

35
00:01:33,940 --> 00:01:37,660
in the<font color="#E5E5E5"> systems communities have been</font>

36
00:01:35,650 --> 00:01:39,430
working on encryption<font color="#E5E5E5"> schemes that kind</font>

37
00:01:37,660 --> 00:01:41,649
<font color="#E5E5E5">of strike a middle ground between full</font>

38
00:01:39,430 --> 00:01:43,180
security<font color="#E5E5E5"> and full functionality in this</font>

39
00:01:41,650 --> 00:01:46,480
talk will call them property revealing

40
00:01:43,180 --> 00:01:47,980
encryption schemes<font color="#E5E5E5"> these allow certain</font>

41
00:01:46,480 --> 00:01:50,110
properties of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> data to</font><font color="#E5E5E5"> be leaked to</font>

42
00:01:47,980 --> 00:01:53,530
<font color="#CCCCCC">the server in a way</font><font color="#E5E5E5"> that enables certain</font>

43
00:01:50,110 --> 00:01:55,030
function application functionality<font color="#E5E5E5"> one</font>

44
00:01:53,530 --> 00:01:57,310
of the most exciting<font color="#E5E5E5"> the most widely</font>

45
00:01:55,030 --> 00:01:59,410
studied such primitives<font color="#CCCCCC"> is order</font>

46
00:01:57,310 --> 00:02:01,600
revealing encryption<font color="#E5E5E5"> there's been a lot</font>

47
00:01:59,410 --> 00:02:03,490
of interest from from academics in the

48
00:02:01,600 --> 00:02:05,350
<font color="#E5E5E5">last few</font><font color="#CCCCCC"> years and there is even been</font>

49
00:02:03,490 --> 00:02:08,679
<font color="#E5E5E5">interest from industry and from</font>

50
00:02:05,350 --> 00:02:09,820
<font color="#CCCCCC">government so it's it's important to</font>

51
00:02:08,679 --> 00:02:14,080
understand the<font color="#E5E5E5"> security</font><font color="#CCCCCC"> of this</font>

52
00:02:09,820 --> 00:02:15,489
<font color="#CCCCCC">primitive so the functionality</font><font color="#E5E5E5"> of order</font>

53
00:02:14,080 --> 00:02:18,490
revealing encryption is pretty simple

54
00:02:15,490 --> 00:02:20,380
<font color="#CCCCCC">the client</font><font color="#E5E5E5"> inserts some encrypted value</font>

55
00:02:18,490 --> 00:02:22,360
and the server<font color="#CCCCCC"> cannot interactively</font>

56
00:02:20,380 --> 00:02:24,180
reveal the order of that value relative

57
00:02:22,360 --> 00:02:28,209
<font color="#E5E5E5">to</font><font color="#CCCCCC"> the other cybertek's</font><font color="#E5E5E5"> in the system</font>

58
00:02:24,180 --> 00:02:30,670
this<font color="#E5E5E5"> allows it to basically maintain a</font>

59
00:02:28,209 --> 00:02:33,459
sorted data structure of ciphertext

60
00:02:30,670 --> 00:02:35,799
<font color="#CCCCCC">which it can use to</font><font color="#E5E5E5"> efficiently answer</font>

61
00:02:33,459 --> 00:02:38,980
<font color="#E5E5E5">things like range queries and you</font><font color="#CCCCCC"> know</font>

62
00:02:35,800 --> 00:02:45,670
<font color="#E5E5E5">limit group by limit queries and sequel</font>

63
00:02:38,980 --> 00:02:47,140
and stuff like<font color="#E5E5E5"> that these schemes these</font>

64
00:02:45,670 --> 00:02:48,940
order reveal encryption schemes are

65
00:02:47,140 --> 00:02:50,708
<font color="#CCCCCC">proving secure but they don't satisfy</font>

66
00:02:48,940 --> 00:02:52,959
standard cryptographic<font color="#E5E5E5"> notions of</font>

67
00:02:50,709 --> 00:02:54,459
security like<font color="#E5E5E5"> semantic</font><font color="#CCCCCC"> security instead</font>

68
00:02:52,959 --> 00:02:56,260
they're<font color="#CCCCCC"> proven secure relative to some</font>

69
00:02:54,459 --> 00:02:59,830
<font color="#E5E5E5">amount of leakage about the underlying</font>

70
00:02:56,260 --> 00:03:01,690
<font color="#CCCCCC">plaintext so the question we really</font><font color="#E5E5E5"> want</font>

71
00:02:59,830 --> 00:03:04,150
to<font color="#E5E5E5"> answer in this work is what is the</font>

72
00:03:01,690 --> 00:03:06,070
<font color="#E5E5E5">impact of this leakage on the security</font>

73
00:03:04,150 --> 00:03:09,790
<font color="#CCCCCC">of Orrie when it's used to encrypt</font><font color="#E5E5E5"> the</font>

74
00:03:06,070 --> 00:03:11,140
real data in<font color="#CCCCCC"> this paper</font><font color="#E5E5E5"> well we work</font>

75
00:03:09,790 --> 00:03:12,880
toward<font color="#E5E5E5"> answering this question by</font>

76
00:03:11,140 --> 00:03:15,640
developing new leakage abuse attacks

77
00:03:12,880 --> 00:03:18,870
<font color="#E5E5E5">which basically in aggregate attack all</font>

78
00:03:15,640 --> 00:03:22,238
existing<font color="#CCCCCC"> horry schemes we empirically</font>

79
00:03:18,870 --> 00:03:25,870
tested these attacks by doing

80
00:03:22,239 --> 00:03:28,299
experiments<font color="#CCCCCC"> on the real data and</font><font color="#E5E5E5"> for</font>

81
00:03:25,870 --> 00:03:30,700
first names we were able<font color="#CCCCCC"> to recover up</font>

82
00:03:28,299 --> 00:03:32,890
to<font color="#CCCCCC"> 99%</font><font color="#E5E5E5"> of the encrypted values in a</font>

83
00:03:30,700 --> 00:03:35,200
<font color="#E5E5E5">simulated encrypted database the last</font>

84
00:03:32,890 --> 00:03:37,298
names we were<font color="#CCCCCC"> able to recover up to 97 %</font>

85
00:03:35,200 --> 00:03:39,010
of encrypted values and for birthdays we

86
00:03:37,299 --> 00:03:40,780
were able<font color="#E5E5E5"> to recover up to 90</font><font color="#CCCCCC"> % of</font>

87
00:03:39,010 --> 00:03:42,429
encrypted values when they are encrypted

88
00:03:40,780 --> 00:03:45,819
with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> re scheme most widely</font><font color="#CCCCCC"> used in</font>

89
00:03:42,430 --> 00:03:47,740
<font color="#CCCCCC">practice we also explored</font><font color="#E5E5E5"> known and</font>

90
00:03:45,819 --> 00:03:49,989
chosen plaintext attacks against<font color="#CCCCCC"> re</font>

91
00:03:47,740 --> 00:03:51,880
where the first work to do this and we

92
00:03:49,990 --> 00:03:53,920
show in the paper<font color="#CCCCCC"> that basically a small</font>

93
00:03:51,880 --> 00:03:55,209
increase<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> amount of knowledge that</font>

94
00:03:53,920 --> 00:03:57,519
the adversary has<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be catastrophic</font>

95
00:03:55,209 --> 00:03:59,620
for security unfortunately<font color="#E5E5E5"> I'm not going</font>

96
00:03:57,520 --> 00:04:02,160
to have time to<font color="#CCCCCC"> talk about this so you</font>

97
00:03:59,620 --> 00:04:04,810
can<font color="#E5E5E5"> see the the paper for more details</font>

98
00:04:02,160 --> 00:04:06,099
so before we describe our attacks we

99
00:04:04,810 --> 00:04:08,800
have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of define what</font><font color="#E5E5E5"> a leakage</font>

100
00:04:06,099 --> 00:04:10,269
abuse attack is a leakage abuse attack

101
00:04:08,800 --> 00:04:12,520
is a cryptanalytic attack against

102
00:04:10,270 --> 00:04:14,020
<font color="#CCCCCC">apiaries seam</font><font color="#E5E5E5"> and contrary to other</font>

103
00:04:12,520 --> 00:04:15,069
kinds of cryptanalytic attacks<font color="#E5E5E5"> that</font>

104
00:04:14,020 --> 00:04:16,599
attack the<font color="#E5E5E5"> assumptions of the</font>

105
00:04:15,069 --> 00:04:18,909
cryptography we don't attack<font color="#E5E5E5"> the</font>

106
00:04:16,599 --> 00:04:21,269
assumptions rather we<font color="#CCCCCC"> just tack the</font>

107
00:04:18,910 --> 00:04:23,530
inherent leakage of the pyaari scheme

108
00:04:21,269 --> 00:04:25,510
the various different kinds of<font color="#E5E5E5"> ORS</font>

109
00:04:23,530 --> 00:04:27,609
schemes<font color="#E5E5E5"> that</font><font color="#CCCCCC"> have been proposed</font><font color="#E5E5E5"> all have</font>

110
00:04:25,510 --> 00:04:29,050
different kinds of leakage they all for

111
00:04:27,610 --> 00:04:31,599
correctness have delete the order<font color="#CCCCCC"> of the</font>

112
00:04:29,050 --> 00:04:34,780
underlying plaintext some of them leak

113
00:04:31,599 --> 00:04:37,599
<font color="#CCCCCC">the order</font><font color="#E5E5E5"> and the frequency</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

114
00:04:34,780 --> 00:04:38,409
underlying plain text and some efficient

115
00:04:37,599 --> 00:04:41,260
schemes that<font color="#E5E5E5"> have actually seen</font>

116
00:04:38,410 --> 00:04:43,150
<font color="#E5E5E5">deployment in practice</font><font color="#CCCCCC"> leak the order</font>

117
00:04:41,260 --> 00:04:46,599
the frequency and some of the bits of

118
00:04:43,150 --> 00:04:48,310
<font color="#CCCCCC">the</font><font color="#E5E5E5"> plaintext our leakage abuse attack</font>

119
00:04:46,599 --> 00:04:50,800
is going<font color="#E5E5E5"> to combine this leakage with</font>

120
00:04:48,310 --> 00:04:52,599
some auxilary data which is basically

121
00:04:50,800 --> 00:04:54,580
just a model of the<font color="#CCCCCC"> distribution from</font>

122
00:04:52,599 --> 00:04:55,960
<font color="#CCCCCC">which the plaintext were drawn and in</font>

123
00:04:54,580 --> 00:04:57,440
<font color="#E5E5E5">this work we're going to use public data</font>

124
00:04:55,960 --> 00:05:00,260
as a standard as

125
00:04:57,440 --> 00:05:01,700
as the auxilary data<font color="#E5E5E5"> the goal of the</font>

126
00:05:00,260 --> 00:05:03,710
leakage abuse attack is basically to

127
00:05:01,700 --> 00:05:05,240
recover some<font color="#E5E5E5"> plaintext and</font><font color="#CCCCCC"> we're going</font>

128
00:05:03,710 --> 00:05:08,450
to<font color="#E5E5E5"> call the recovery rate the fraction</font>

129
00:05:05,240 --> 00:05:09,860
of<font color="#E5E5E5"> plaintext that we guess correctly the</font>

130
00:05:08,450 --> 00:05:12,740
<font color="#E5E5E5">first attack we're going to discuss is</font>

131
00:05:09,860 --> 00:05:14,210
against the<font color="#CCCCCC"> the schemes that</font><font color="#E5E5E5"> leaked both</font>

132
00:05:12,740 --> 00:05:17,600
order and frequency of<font color="#E5E5E5"> the underlying</font>

133
00:05:14,210 --> 00:05:20,780
plain texts the leakage<font color="#E5E5E5"> here again is</font>

134
00:05:17,600 --> 00:05:23,300
basically the in this simulated database

135
00:05:20,780 --> 00:05:25,880
the leakage is the order<font color="#E5E5E5"> of all the</font>

136
00:05:23,300 --> 00:05:27,500
values as well as<font color="#CCCCCC"> the</font><font color="#E5E5E5"> kind of the number</font>

137
00:05:25,880 --> 00:05:30,610
<font color="#CCCCCC">of occurrences of each particular cipher</font>

138
00:05:27,500 --> 00:05:32,750
<font color="#CCCCCC">text</font><font color="#E5E5E5"> so for example the cipher text</font>

139
00:05:30,610 --> 00:05:35,570
<font color="#E5E5E5">corresponding to the encryption of</font><font color="#CCCCCC"> four</font>

140
00:05:32,750 --> 00:05:37,220
is you know appears five times in the

141
00:05:35,570 --> 00:05:39,290
<font color="#CCCCCC">encryption</font><font color="#E5E5E5"> of three appears twice and</font>

142
00:05:37,220 --> 00:05:42,650
this kind<font color="#E5E5E5"> of forms a histogram that's</font>

143
00:05:39,290 --> 00:05:44,210
that's revealed to the attacker<font color="#E5E5E5"> in our</font>

144
00:05:42,650 --> 00:05:46,760
attack we're also going to take our

145
00:05:44,210 --> 00:05:49,190
auxilary data which is kind of a model

146
00:05:46,760 --> 00:05:53,570
of the<font color="#E5E5E5"> plaintext distribution note that</font>

147
00:05:49,190 --> 00:05:55,760
in these attacks<font color="#CCCCCC"> it's not all plain</font>

148
00:05:53,570 --> 00:05:58,090
texts are encrypted in<font color="#E5E5E5"> the database if</font>

149
00:05:55,760 --> 00:06:01,490
<font color="#E5E5E5">this were true it would</font><font color="#CCCCCC"> be trivial to</font>

150
00:05:58,090 --> 00:06:02,869
<font color="#E5E5E5">recover all the plain texts of all the</font>

151
00:06:01,490 --> 00:06:05,510
plain texts in the database by just

152
00:06:02,870 --> 00:06:07,730
sorting the<font color="#CCCCCC"> cipher text and the plain</font>

153
00:06:05,510 --> 00:06:10,010
<font color="#CCCCCC">text or the not</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> plaintext the</font>

154
00:06:07,730 --> 00:06:12,350
auxilary data and just matching equal

155
00:06:10,010 --> 00:06:14,480
rank elements in this list this<font color="#CCCCCC"> is</font>

156
00:06:12,350 --> 00:06:16,010
basically<font color="#CCCCCC"> pointing out by prior work</font><font color="#E5E5E5"> so</font>

157
00:06:14,480 --> 00:06:18,430
there are going to<font color="#E5E5E5"> be some elements in</font>

158
00:06:16,010 --> 00:06:21,520
the<font color="#E5E5E5"> auxilary data that did not occur</font>

159
00:06:18,430 --> 00:06:24,169
<font color="#CCCCCC">that</font><font color="#E5E5E5"> is to say</font><font color="#CCCCCC"> their ciphertext don't</font>

160
00:06:21,520 --> 00:06:26,810
there are no encryptions<font color="#E5E5E5"> of these</font>

161
00:06:24,169 --> 00:06:28,430
elements<font color="#CCCCCC"> in the database but</font><font color="#E5E5E5"> crucially</font>

162
00:06:26,810 --> 00:06:34,640
we don't know which which elements these

163
00:06:28,430 --> 00:06:36,260
are so prior work at<font color="#CCCCCC"> ccs 2015 Navid</font>

164
00:06:34,640 --> 00:06:37,820
<font color="#E5E5E5">Kumar and</font><font color="#CCCCCC"> Wright presented an attack</font>

165
00:06:36,260 --> 00:06:41,840
against this leakage which they call<font color="#CCCCCC"> the</font>

166
00:06:37,820 --> 00:06:43,669
cumulative attack<font color="#E5E5E5"> it uses what's called</font>

167
00:06:41,840 --> 00:06:44,900
a<font color="#CCCCCC"> linear sum assignment problem which is</font>

168
00:06:43,669 --> 00:06:47,630
a<font color="#E5E5E5"> kind of standard problem and</font>

169
00:06:44,900 --> 00:06:50,960
optimization<font color="#E5E5E5"> to kind of model the</font>

170
00:06:47,630 --> 00:06:52,550
plaintext recovery operation<font color="#CCCCCC"> I'm not</font>

171
00:06:50,960 --> 00:06:54,260
going<font color="#CCCCCC"> to describe</font><font color="#E5E5E5"> in too much detail</font>

172
00:06:52,550 --> 00:06:56,120
<font color="#E5E5E5">what they actually do it's a little</font>

173
00:06:54,260 --> 00:07:00,680
<font color="#CCCCCC">technical but</font><font color="#E5E5E5"> basically what they do is</font>

174
00:06:56,120 --> 00:07:02,270
create a<font color="#E5E5E5"> matrix of costs which represent</font>

175
00:07:00,680 --> 00:07:05,690
<font color="#CCCCCC">the cost of mapping ciphertext</font><font color="#E5E5E5"> to</font>

176
00:07:02,270 --> 00:07:08,330
plaintext<font color="#CCCCCC"> then they elements in this</font>

177
00:07:05,690 --> 00:07:09,990
matrix<font color="#E5E5E5"> are basically generated using the</font>

178
00:07:08,330 --> 00:07:11,849
<font color="#E5E5E5">the relative</font>

179
00:07:09,990 --> 00:07:14,419
the relative frequency of<font color="#CCCCCC"> the elements</font>

180
00:07:11,850 --> 00:07:17,370
in<font color="#E5E5E5"> the ciphertext in the auxilary data</font>

181
00:07:14,419 --> 00:07:20,479
once they create this this cost matrix

182
00:07:17,370 --> 00:07:22,949
<font color="#CCCCCC">they solve</font><font color="#E5E5E5"> it using a known unknown</font>

183
00:07:20,479 --> 00:07:24,389
algorithm<font color="#E5E5E5"> from the optimization</font>

184
00:07:22,949 --> 00:07:27,330
<font color="#CCCCCC">literature called Hungarian algorithm</font>

185
00:07:24,389 --> 00:07:29,430
<font color="#CCCCCC">which requires cubic time asymptotically</font>

186
00:07:27,330 --> 00:07:33,359
<font color="#CCCCCC">which can</font><font color="#E5E5E5"> be a little prohibitive for</font>

187
00:07:29,430 --> 00:07:35,069
large<font color="#E5E5E5"> data sets</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the course of doing</font>

188
00:07:33,360 --> 00:07:36,240
<font color="#E5E5E5">this work we noticed something</font><font color="#CCCCCC"> about the</font>

189
00:07:35,069 --> 00:07:36,690
cumulative attack which<font color="#E5E5E5"> were a little</font>

190
00:07:36,240 --> 00:07:39,030
<font color="#E5E5E5">odd</font>

191
00:07:36,690 --> 00:07:41,460
basically the cumulative attack well it

192
00:07:39,030 --> 00:07:43,320
does incorporate<font color="#E5E5E5"> the order of the</font>

193
00:07:41,460 --> 00:07:44,849
<font color="#CCCCCC">elements in a way that I</font><font color="#E5E5E5"> won't go</font><font color="#CCCCCC"> into</font>

194
00:07:43,320 --> 00:07:47,039
<font color="#E5E5E5">you'll just have to take my word for it</font>

195
00:07:44,849 --> 00:07:48,719
<font color="#E5E5E5">but it while it incorporates this in the</font>

196
00:07:47,039 --> 00:07:51,719
cost<font color="#E5E5E5"> function there actually aren't any</font>

197
00:07:48,720 --> 00:07:53,759
<font color="#E5E5E5">hard constraints on the the solution</font>

198
00:07:51,720 --> 00:07:55,889
<font color="#CCCCCC">that's returned from the algorithm which</font>

199
00:07:53,759 --> 00:07:57,990
means that the<font color="#CCCCCC"> solution that's returned</font>

200
00:07:55,889 --> 00:07:59,220
the the mapping<font color="#E5E5E5"> that they get from</font><font color="#CCCCCC"> the</font>

201
00:07:57,990 --> 00:08:02,880
<font color="#E5E5E5">Hungarian algorithm can actually have</font>

202
00:07:59,220 --> 00:08:04,800
crossings and what this<font color="#E5E5E5"> means is</font>

203
00:08:02,880 --> 00:08:06,389
basically<font color="#E5E5E5"> the if you think of the</font>

204
00:08:04,800 --> 00:08:08,280
solution<font color="#E5E5E5"> that's returned as basically</font>

205
00:08:06,389 --> 00:08:12,389
the the lines going<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> auxilary</font>

206
00:08:08,280 --> 00:08:15,030
<font color="#E5E5E5">data to the cipher texts the the site</font>

207
00:08:12,389 --> 00:08:17,550
the<font color="#E5E5E5"> plaintext of one could be mapped to</font>

208
00:08:15,030 --> 00:08:19,229
the<font color="#CCCCCC"> ciphertext</font><font color="#E5E5E5"> of three even though the</font>

209
00:08:17,550 --> 00:08:21,150
plaintext<font color="#CCCCCC"> two is mapped</font><font color="#E5E5E5"> to the</font>

210
00:08:19,229 --> 00:08:23,880
ciphertext of one now this obviously

211
00:08:21,150 --> 00:08:26,099
<font color="#E5E5E5">violates the the known ordering</font>

212
00:08:23,880 --> 00:08:27,810
constraints on the problem on the known

213
00:08:26,099 --> 00:08:30,840
ordering of the auxilary data and the

214
00:08:27,810 --> 00:08:33,328
<font color="#E5E5E5">the cipher</font><font color="#CCCCCC"> texts so this suggests to us</font>

215
00:08:30,840 --> 00:08:35,549
that<font color="#CCCCCC"> we aren't</font><font color="#E5E5E5"> really that rather than</font>

216
00:08:33,328 --> 00:08:38,130
the cumulative<font color="#E5E5E5"> attack isn't really using</font>

217
00:08:35,549 --> 00:08:45,599
the order leakage<font color="#E5E5E5"> to its to its</font><font color="#CCCCCC"> fullest</font>

218
00:08:38,130 --> 00:08:47,310
<font color="#E5E5E5">extent so</font>

219
00:08:45,600 --> 00:08:49,139
<font color="#CCCCCC">crossing attack we view the problem</font>

220
00:08:47,310 --> 00:08:50,339
slightly<font color="#E5E5E5"> differently rather than</font>

221
00:08:49,139 --> 00:08:52,259
treating<font color="#E5E5E5"> it as an</font><font color="#CCCCCC"> optimization problem</font>

222
00:08:50,339 --> 00:08:54,480
<font color="#CCCCCC">we view it as</font><font color="#E5E5E5"> basically a weighted</font>

223
00:08:52,259 --> 00:08:56,220
bipartite matching problem<font color="#CCCCCC"> so what we're</font>

224
00:08:54,480 --> 00:08:59,190
<font color="#E5E5E5">going to do here is create a bipartite</font>

225
00:08:56,220 --> 00:09:01,649
graph<font color="#CCCCCC"> that a complete bipartite graph</font>

226
00:08:59,190 --> 00:09:03,360
where each each auxilary data

227
00:09:01,649 --> 00:09:06,000
corresponds to a vertex on<font color="#CCCCCC"> the left hand</font>

228
00:09:03,360 --> 00:09:08,420
<font color="#E5E5E5">side and each target data corresponds to</font>

229
00:09:06,000 --> 00:09:10,769
a vertex on the<font color="#CCCCCC"> right</font><font color="#E5E5E5"> hand side</font><font color="#CCCCCC"> and</font>

230
00:09:08,420 --> 00:09:12,479
we're<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> weight the edges using</font>

231
00:09:10,769 --> 00:09:15,480
again some frequency<font color="#CCCCCC"> information which I</font>

232
00:09:12,480 --> 00:09:17,639
wrote which I<font color="#E5E5E5"> won't really go into now</font>

233
00:09:15,480 --> 00:09:20,699
this view<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the problem</font><font color="#CCCCCC"> is it</font><font color="#E5E5E5"> isn't</font>

234
00:09:17,639 --> 00:09:22,800
really<font color="#E5E5E5"> that exciting or new in fact it's</font>

235
00:09:20,699 --> 00:09:25,258
pretty<font color="#E5E5E5"> much a trivial consequence of the</font>

236
00:09:22,800 --> 00:09:28,139
build optimization view but what it

237
00:09:25,259 --> 00:09:29,970
<font color="#E5E5E5">allows us to do it is basically</font><font color="#CCCCCC"> Express</font>

238
00:09:28,139 --> 00:09:31,740
the order constraints on the problem as

239
00:09:29,970 --> 00:09:34,740
a graph constraint on the matching

240
00:09:31,740 --> 00:09:36,839
that's returned by our by<font color="#CCCCCC"> our algorithm</font>

241
00:09:34,740 --> 00:09:38,670
<font color="#E5E5E5">so what we want to do is rather than</font>

242
00:09:36,839 --> 00:09:40,259
<font color="#E5E5E5">search through all the</font><font color="#CCCCCC"> matchings</font><font color="#E5E5E5"> to find</font>

243
00:09:38,670 --> 00:09:41,880
the<font color="#E5E5E5"> the best solution we're going</font><font color="#CCCCCC"> to</font>

244
00:09:40,259 --> 00:09:46,949
<font color="#E5E5E5">search</font><font color="#CCCCCC"> through just the matchings that</font>

245
00:09:41,880 --> 00:09:48,600
have no crossing edges so what<font color="#E5E5E5"> this is</font>

246
00:09:46,949 --> 00:09:50,370
what<font color="#E5E5E5"> this enables</font><font color="#CCCCCC"> us to do</font><font color="#E5E5E5"> is use a</font>

247
00:09:48,600 --> 00:09:52,970
known algorithm from<font color="#E5E5E5"> the from the graph</font>

248
00:09:50,370 --> 00:09:57,029
other<font color="#E5E5E5"> rhythms literature and find a</font>

249
00:09:52,970 --> 00:09:59,550
guaranteed the guaranteed best matching

250
00:09:57,029 --> 00:10:01,589
in actually asymptotically faster than

251
00:09:59,550 --> 00:10:05,569
the cumulative attack using a kind of

252
00:10:01,589 --> 00:10:05,569
very<font color="#E5E5E5"> basic dynamic programming</font><font color="#CCCCCC"> approach</font>

253
00:10:05,630 --> 00:10:10,949
to<font color="#CCCCCC"> test the empirical performance of</font>

254
00:10:08,310 --> 00:10:12,719
<font color="#E5E5E5">this attack we used public data</font><font color="#CCCCCC"> as</font>

255
00:10:10,949 --> 00:10:14,969
<font color="#CCCCCC">stand-ins for the kinds of sensitive</font>

256
00:10:12,720 --> 00:10:17,459
data people<font color="#E5E5E5"> want to encrypt for first</font>

257
00:10:14,970 --> 00:10:19,769
names we used about a dozen data sets of

258
00:10:17,459 --> 00:10:22,138
public employees from<font color="#E5E5E5"> drawn from I</font><font color="#CCCCCC"> think</font>

259
00:10:19,769 --> 00:10:24,420
I think a few different states and maybe

260
00:10:22,139 --> 00:10:27,449
one federal database<font color="#E5E5E5"> as well as a</font>

261
00:10:24,420 --> 00:10:29,910
database<font color="#CCCCCC"> of police police</font><font color="#E5E5E5"> officers</font><font color="#CCCCCC"> that</font>

262
00:10:27,449 --> 00:10:32,310
was leaked<font color="#E5E5E5"> last year we also did a tax</font>

263
00:10:29,910 --> 00:10:33,810
on zip codes and<font color="#E5E5E5"> birth dates</font><font color="#CCCCCC"> and for</font>

264
00:10:32,310 --> 00:10:37,290
<font color="#E5E5E5">this we</font><font color="#CCCCCC"> only had one data set which was</font>

265
00:10:33,810 --> 00:10:39,000
the the police database<font color="#E5E5E5"> leak and for</font>

266
00:10:37,290 --> 00:10:41,339
<font color="#E5E5E5">these for these attacks because our</font>

267
00:10:39,000 --> 00:10:43,350
auxilary data wasn't<font color="#E5E5E5"> a very well</font>

268
00:10:41,339 --> 00:10:45,540
correlated with the target data they

269
00:10:43,350 --> 00:10:47,550
didn't<font color="#CCCCCC"> perform particularly</font><font color="#E5E5E5"> well if you</font>

270
00:10:45,540 --> 00:10:50,339
want<font color="#E5E5E5"> to see more</font><font color="#CCCCCC"> information</font><font color="#E5E5E5"> you can see</font>

271
00:10:47,550 --> 00:10:55,589
our paper<font color="#E5E5E5"> and</font><font color="#CCCCCC"> for the auxilary data in</font>

272
00:10:50,339 --> 00:10:58,050
these<font color="#CCCCCC"> attacks we used a public u.s.</font>

273
00:10:55,589 --> 00:11:01,350
<font color="#E5E5E5">census data</font>

274
00:10:58,050 --> 00:11:04,250
so the nkw cumulative attack recovers

275
00:11:01,350 --> 00:11:06,540
about<font color="#CCCCCC"> 44% of first names on average our</font>

276
00:11:04,250 --> 00:11:10,200
<font color="#CCCCCC">non-crossing attack recovers almost</font>

277
00:11:06,540 --> 00:11:12,120
twice<font color="#CCCCCC"> as much 83% on</font><font color="#E5E5E5"> average the last</font>

278
00:11:10,200 --> 00:11:14,130
names<font color="#CCCCCC"> we actually couldn't get the</font>

279
00:11:12,120 --> 00:11:16,320
<font color="#E5E5E5">cumulative attack to run in any</font>

280
00:11:14,130 --> 00:11:19,649
<font color="#CCCCCC">reasonable amount</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> time for any of our</font>

281
00:11:16,320 --> 00:11:21,990
last name<font color="#E5E5E5"> datasets</font><font color="#CCCCCC"> our largest</font><font color="#E5E5E5"> problem</font>

282
00:11:19,649 --> 00:11:25,140
<font color="#E5E5E5">instance I think had around 17 billion</font>

283
00:11:21,990 --> 00:11:27,510
edges in its graph and the order<font color="#E5E5E5"> and</font>

284
00:11:25,140 --> 00:11:30,149
cubed<font color="#E5E5E5"> runtime just basically makes</font><font color="#CCCCCC"> the</font>

285
00:11:27,510 --> 00:11:33,899
Hungarian algorithm choke<font color="#CCCCCC"> so what we did</font>

286
00:11:30,149 --> 00:11:36,120
was instead used<font color="#E5E5E5"> a known heuristic from</font>

287
00:11:33,899 --> 00:11:39,050
the graph algorithms literature<font color="#E5E5E5"> that</font>

288
00:11:36,120 --> 00:11:41,640
allows<font color="#CCCCCC"> us to get a approximately correct</font>

289
00:11:39,050 --> 00:11:44,010
<font color="#E5E5E5">approximately optimal mapping in order</font><font color="#CCCCCC"> N</font>

290
00:11:41,640 --> 00:11:45,390
<font color="#CCCCCC">squared time and using this and the same</font>

291
00:11:44,010 --> 00:11:48,480
<font color="#E5E5E5">weighting function as the</font><font color="#CCCCCC"> cumulative</font>

292
00:11:45,390 --> 00:11:51,319
attack<font color="#E5E5E5"> we were able to get about</font><font color="#CCCCCC"> a 5%</font>

293
00:11:48,480 --> 00:11:54,480
<font color="#E5E5E5">recovery rate on average for last names</font>

294
00:11:51,320 --> 00:11:57,120
this suggests<font color="#E5E5E5"> or this data shows</font>

295
00:11:54,480 --> 00:12:00,360
basically<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> non-crossing</font><font color="#E5E5E5"> attack</font>

296
00:11:57,120 --> 00:12:02,399
is about<font color="#E5E5E5"> twice as good</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> the cumulative</font>

297
00:12:00,360 --> 00:12:05,520
attacks for<font color="#E5E5E5"> first names and about seven</font>

298
00:12:02,399 --> 00:12:07,950
times<font color="#E5E5E5"> is good for last names this</font>

299
00:12:05,520 --> 00:12:10,110
<font color="#E5E5E5">another advantage of this attack is that</font>

300
00:12:07,950 --> 00:12:11,880
it<font color="#E5E5E5"> it basically makes it very easy</font><font color="#CCCCCC"> to</font>

301
00:12:10,110 --> 00:12:13,110
incorporate<font color="#E5E5E5"> the additional leakage of</font>

302
00:12:11,880 --> 00:12:15,870
some of the more efficient schemes that

303
00:12:13,110 --> 00:12:17,940
<font color="#E5E5E5">are used in practice so what you can</font>

304
00:12:15,870 --> 00:12:20,399
<font color="#E5E5E5">just need to do is take your bipartite</font>

305
00:12:17,940 --> 00:12:23,240
graph that you start<font color="#E5E5E5"> out with and remove</font>

306
00:12:20,399 --> 00:12:27,240
the<font color="#CCCCCC"> edges</font><font color="#E5E5E5"> that contradict the additional</font>

307
00:12:23,240 --> 00:12:30,089
<font color="#CCCCCC">leak bits of the of the</font><font color="#E5E5E5"> plaintext so for</font>

308
00:12:27,240 --> 00:12:32,120
example if you<font color="#CCCCCC"> learned</font><font color="#E5E5E5"> that the top bit</font>

309
00:12:30,089 --> 00:12:34,649
of this particular<font color="#CCCCCC"> ciphertext is zero</font>

310
00:12:32,120 --> 00:12:37,260
what you can do is<font color="#E5E5E5"> just remove the edges</font>

311
00:12:34,649 --> 00:12:38,370
<font color="#CCCCCC">that would map it to</font><font color="#E5E5E5"> any auxilary data</font>

312
00:12:37,260 --> 00:12:42,449
whose top bit is 1

313
00:12:38,370 --> 00:12:45,420
it's pretty simple so this this

314
00:12:42,449 --> 00:12:47,520
additional this adaptation<font color="#CCCCCC"> of the non</font>

315
00:12:45,420 --> 00:12:51,540
crossing attack<font color="#E5E5E5"> with the additional</font>

316
00:12:47,520 --> 00:12:53,550
leakage of the<font color="#E5E5E5"> ores scheme was widely</font>

317
00:12:51,540 --> 00:12:56,880
<font color="#E5E5E5">used in</font><font color="#CCCCCC"> practice</font><font color="#E5E5E5"> lets us recover about</font>

318
00:12:53,550 --> 00:13:00,120
<font color="#E5E5E5">99%</font><font color="#CCCCCC"> of first names on average about 97%</font>

319
00:12:56,880 --> 00:13:02,820
<font color="#E5E5E5">of last names and with the leakage of</font>

320
00:13:00,120 --> 00:13:05,160
<font color="#CCCCCC">the</font><font color="#E5E5E5"> recent</font><font color="#CCCCCC"> array of Genet</font><font color="#E5E5E5"> at all from</font>

321
00:13:02,820 --> 00:13:09,089
last year this allows us<font color="#E5E5E5"> to recover 98%</font>

322
00:13:05,160 --> 00:13:14,218
of first names<font color="#E5E5E5"> and 75% of last names</font>

323
00:13:09,089 --> 00:13:16,889
so now we've kind<font color="#CCCCCC"> of seen</font><font color="#E5E5E5"> the attacks</font>

324
00:13:14,219 --> 00:13:19,259
that<font color="#E5E5E5"> take advantage of order and</font>

325
00:13:16,889 --> 00:13:22,019
frequency but now we'll look at an

326
00:13:19,259 --> 00:13:25,079
attack<font color="#CCCCCC"> that just</font><font color="#E5E5E5"> takes advantage of the</font>

327
00:13:22,019 --> 00:13:27,749
order which<font color="#E5E5E5"> again all Ori</font><font color="#CCCCCC"> scheme is</font>

328
00:13:25,079 --> 00:13:31,019
<font color="#CCCCCC">leaked just by correctness the the</font>

329
00:13:27,749 --> 00:13:32,699
schemes that actually achieve this this

330
00:13:31,019 --> 00:13:35,219
low level<font color="#CCCCCC"> of leakage are pretty</font>

331
00:13:32,699 --> 00:13:36,628
inefficient<font color="#E5E5E5"> they require either strong</font>

332
00:13:35,219 --> 00:13:39,689
cryptographic assumptions based on

333
00:13:36,629 --> 00:13:41,579
multilinear maps or stateful interactive

334
00:13:39,689 --> 00:13:44,399
encryption protocols with client-side

335
00:13:41,579 --> 00:13:46,709
<font color="#CCCCCC">state</font><font color="#E5E5E5"> nonetheless it's important to</font>

336
00:13:44,399 --> 00:13:48,689
study this setting because<font color="#E5E5E5"> all</font><font color="#CCCCCC"> ori</font>

337
00:13:46,709 --> 00:13:50,429
<font color="#CCCCCC">steams leak the order of the plaintext</font>

338
00:13:48,689 --> 00:13:53,189
<font color="#CCCCCC">so attacks in</font><font color="#E5E5E5"> this setting give kind of</font>

339
00:13:50,429 --> 00:13:56,699
a generic lower bound on<font color="#E5E5E5"> the on the</font>

340
00:13:53,189 --> 00:13:59,098
security of<font color="#E5E5E5"> any ori scheme so in this</font>

341
00:13:56,699 --> 00:14:01,799
attack<font color="#E5E5E5"> again we're not</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> have the</font>

342
00:13:59,099 --> 00:14:03,839
the the<font color="#CCCCCC"> frequency histogram of the of</font>

343
00:14:01,799 --> 00:14:06,119
the<font color="#CCCCCC"> ciphertext</font><font color="#E5E5E5"> instead what we're</font><font color="#CCCCCC"> going</font>

344
00:14:03,839 --> 00:14:09,299
to have<font color="#E5E5E5"> is basically</font><font color="#CCCCCC"> just a sort</font><font color="#E5E5E5"> of list</font>

345
00:14:06,119 --> 00:14:12,449
of<font color="#E5E5E5"> cipher</font><font color="#CCCCCC"> text</font><font color="#E5E5E5"> where encryptions of the</font>

346
00:14:09,299 --> 00:14:14,669
same plaintext<font color="#E5E5E5"> are going to be in a</font>

347
00:14:12,449 --> 00:14:17,939
contiguous<font color="#CCCCCC"> like sub interval in this</font>

348
00:14:14,669 --> 00:14:20,039
list<font color="#CCCCCC"> so it's useful to think of</font><font color="#E5E5E5"> this as</font>

349
00:14:17,939 --> 00:14:22,468
<font color="#CCCCCC">kind of a number</font><font color="#E5E5E5"> line where the the</font>

350
00:14:20,039 --> 00:14:26,089
least ciphertext is on the left here and

351
00:14:22,469 --> 00:14:26,089
<font color="#E5E5E5">the greatest ciphertext is on the right</font>

352
00:14:26,329 --> 00:14:31,348
<font color="#E5E5E5">the basic idea behind our attack is that</font>

353
00:14:29,309 --> 00:14:32,519
the<font color="#CCCCCC"> position in the list</font><font color="#E5E5E5"> leaks</font>

354
00:14:31,349 --> 00:14:37,439
<font color="#CCCCCC">information about the underlying</font>

355
00:14:32,519 --> 00:14:39,059
plaintext of a cipher text so to

356
00:14:37,439 --> 00:14:42,478
illustrate this let's<font color="#CCCCCC"> just think about</font>

357
00:14:39,059 --> 00:14:45,329
the<font color="#CCCCCC"> cipher text ciphertext</font><font color="#E5E5E5"> of the name</font>

358
00:14:42,479 --> 00:14:47,099
<font color="#E5E5E5">Aaron if we want to look</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the cipher</font>

359
00:14:45,329 --> 00:14:48,478
text of Aaron we're probably not<font color="#E5E5E5"> going</font>

360
00:14:47,099 --> 00:14:50,729
<font color="#E5E5E5">to look at the end of the list because</font>

361
00:14:48,479 --> 00:14:53,279
<font color="#E5E5E5">most name is lexicographically are</font>

362
00:14:50,729 --> 00:14:54,119
greater than Aaron<font color="#CCCCCC"> we're instead</font><font color="#E5E5E5"> we're</font>

363
00:14:53,279 --> 00:14:56,129
<font color="#E5E5E5">going to want</font><font color="#CCCCCC"> to look</font><font color="#E5E5E5"> at the beginning</font>

364
00:14:54,119 --> 00:14:58,289
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the list</font><font color="#CCCCCC"> because it's likely</font><font color="#E5E5E5"> that in</font>

365
00:14:56,129 --> 00:14:59,519
our in any sample most of the names

366
00:14:58,289 --> 00:15:02,579
sampled are going to be greater<font color="#E5E5E5"> than</font>

367
00:14:59,519 --> 00:15:04,619
Aaron so we're going<font color="#E5E5E5"> to use this</font>

368
00:15:02,579 --> 00:15:06,388
<font color="#E5E5E5">intuition to build our attack at a high</font>

369
00:15:04,619 --> 00:15:08,129
level<font color="#CCCCCC"> our attack</font><font color="#E5E5E5"> basically just tries</font><font color="#CCCCCC"> to</font>

370
00:15:06,389 --> 00:15:10,399
locate the range of<font color="#CCCCCC"> ciphertext that</font><font color="#E5E5E5"> all</font>

371
00:15:08,129 --> 00:15:12,509
correspond to some given plaintext value

372
00:15:10,399 --> 00:15:13,319
for<font color="#E5E5E5"> example if we want</font><font color="#CCCCCC"> to recover</font>

373
00:15:12,509 --> 00:15:15,839
Michael

374
00:15:13,319 --> 00:15:17,429
we just need to define the range we just

375
00:15:15,839 --> 00:15:19,559
need to find<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> ciphertext of</font>

376
00:15:17,429 --> 00:15:21,869
<font color="#E5E5E5">Michael and the number of Michael's in</font>

377
00:15:19,559 --> 00:15:23,069
the database and we<font color="#E5E5E5"> can find the range</font>

378
00:15:21,869 --> 00:15:24,900
<font color="#CCCCCC">just by taking the</font><font color="#E5E5E5"> first</font>

379
00:15:23,070 --> 00:15:26,760
value and you know adding the number<font color="#E5E5E5"> of</font>

380
00:15:24,900 --> 00:15:29,459
things and<font color="#CCCCCC"> this gives us</font><font color="#E5E5E5"> lower and upper</font>

381
00:15:26,760 --> 00:15:31,800
<font color="#CCCCCC">bound finding the the number of</font>

382
00:15:29,460 --> 00:15:33,480
<font color="#CCCCCC">Michael's</font><font color="#E5E5E5"> is really simple basically if</font>

383
00:15:31,800 --> 00:15:35,280
<font color="#E5E5E5">you haven't</font><font color="#CCCCCC"> your auxilary model what you</font>

384
00:15:33,480 --> 00:15:37,080
need to do is<font color="#E5E5E5"> just multiply the the</font>

385
00:15:35,280 --> 00:15:38,699
<font color="#E5E5E5">frequency of</font><font color="#CCCCCC"> Michael by the</font><font color="#E5E5E5"> number of</font>

386
00:15:37,080 --> 00:15:40,530
<font color="#E5E5E5">ciphertext in your database and this</font>

387
00:15:38,700 --> 00:15:42,990
gives us<font color="#E5E5E5"> the basically the expected</font>

388
00:15:40,530 --> 00:15:47,069
value of the of the number of<font color="#E5E5E5"> Michael's</font>

389
00:15:42,990 --> 00:15:48,390
in your sample<font color="#CCCCCC"> finding the first</font><font color="#E5E5E5"> Michael</font>

390
00:15:47,070 --> 00:15:50,610
is a little bit more complicated<font color="#E5E5E5"> and</font>

391
00:15:48,390 --> 00:15:53,880
<font color="#CCCCCC">what we have to do here is basically</font>

392
00:15:50,610 --> 00:15:56,670
consider all of<font color="#E5E5E5"> the plain texts that are</font>

393
00:15:53,880 --> 00:15:59,670
<font color="#CCCCCC">encrypted in your sample as being split</font>

394
00:15:56,670 --> 00:16:01,079
into one of<font color="#CCCCCC"> two</font><font color="#E5E5E5"> groups the H</font><font color="#CCCCCC"> plain</font><font color="#E5E5E5"> six</font>

395
00:15:59,670 --> 00:16:03,060
is either strictly less than the name

396
00:16:01,080 --> 00:16:07,040
Michael<font color="#CCCCCC"> or it's greater</font><font color="#E5E5E5"> than or equal</font><font color="#CCCCCC"> to</font>

397
00:16:03,060 --> 00:16:09,959
<font color="#E5E5E5">Michael this allows us</font><font color="#CCCCCC"> to basically</font>

398
00:16:07,040 --> 00:16:12,660
treat the problem as a kind of binomial

399
00:16:09,960 --> 00:16:17,070
distribution<font color="#E5E5E5"> where we have a point</font>

400
00:16:12,660 --> 00:16:19,050
<font color="#CCCCCC">that that we're heads</font><font color="#E5E5E5"> indicates that the</font>

401
00:16:17,070 --> 00:16:20,160
<font color="#CCCCCC">plaintext</font><font color="#E5E5E5"> is less than Michael and tails</font>

402
00:16:19,050 --> 00:16:23,219
indicates that it's greater<font color="#CCCCCC"> than</font><font color="#E5E5E5"> or</font>

403
00:16:20,160 --> 00:16:26,370
equal<font color="#E5E5E5"> to Michael and we can estimate the</font>

404
00:16:23,220 --> 00:16:28,350
<font color="#E5E5E5">position</font><font color="#CCCCCC"> of the first</font><font color="#E5E5E5"> Michael just</font>

405
00:16:26,370 --> 00:16:32,670
basically<font color="#E5E5E5"> just by flipping this coin for</font>

406
00:16:28,350 --> 00:16:37,440
<font color="#CCCCCC">each</font><font color="#E5E5E5"> plaintext in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> database the</font>

407
00:16:32,670 --> 00:16:39,660
attack finishes by basically rather the

408
00:16:37,440 --> 00:16:41,220
<font color="#CCCCCC">the attack</font><font color="#E5E5E5"> that I presented is just for</font>

409
00:16:39,660 --> 00:16:42,510
one name but<font color="#CCCCCC"> to attack the whole</font>

410
00:16:41,220 --> 00:16:44,580
<font color="#E5E5E5">database what we're going to do is</font>

411
00:16:42,510 --> 00:16:46,380
choose<font color="#E5E5E5"> a certain number of high</font>

412
00:16:44,580 --> 00:16:48,660
<font color="#E5E5E5">frequency elements according</font><font color="#CCCCCC"> to the</font>

413
00:16:46,380 --> 00:16:50,280
auxilary data intuitively we want to do

414
00:16:48,660 --> 00:16:52,079
this because the ranges<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these</font>

415
00:16:50,280 --> 00:16:54,839
elements<font color="#E5E5E5"> are likely going to be the</font>

416
00:16:52,080 --> 00:16:57,360
<font color="#CCCCCC">biggest ranges and even if we miss some</font>

417
00:16:54,840 --> 00:16:59,720
names we're going to recover<font color="#E5E5E5"> most of the</font>

418
00:16:57,360 --> 00:17:03,420
names corresponding to that<font color="#CCCCCC"> element</font><font color="#E5E5E5"> so</font>

419
00:16:59,720 --> 00:17:05,100
<font color="#CCCCCC">when we do the</font><font color="#E5E5E5"> top 40 names as I just</font>

420
00:17:03,420 --> 00:17:08,220
described<font color="#CCCCCC"> for first names</font><font color="#E5E5E5"> we recover</font>

421
00:17:05,099 --> 00:17:11,339
fully<font color="#CCCCCC"> 30% of the values in the database</font>

422
00:17:08,220 --> 00:17:14,670
<font color="#E5E5E5">on average for last things we recover</font>

423
00:17:11,339 --> 00:17:17,099
about<font color="#CCCCCC"> 7% this</font><font color="#E5E5E5"> this seems a little</font><font color="#CCCCCC"> meager</font>

424
00:17:14,670 --> 00:17:20,880
<font color="#E5E5E5">especially compared to the very exciting</font>

425
00:17:17,099 --> 00:17:23,490
<font color="#CCCCCC">99 percent from before</font><font color="#E5E5E5"> but it's it's</font>

426
00:17:20,880 --> 00:17:25,709
<font color="#E5E5E5">interesting to</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> that this is this</font>

427
00:17:23,490 --> 00:17:28,650
<font color="#E5E5E5">is kind of like the absolute minimal</font>

428
00:17:25,709 --> 00:17:31,050
leakage and yet the recovery rate

429
00:17:28,650 --> 00:17:33,330
basically<font color="#E5E5E5"> is about seven times higher</font>

430
00:17:31,050 --> 00:17:35,190
<font color="#E5E5E5">than the baseline accuracy</font><font color="#CCCCCC"> and here i'm</font>

431
00:17:33,330 --> 00:17:35,800
when i say baseline<font color="#E5E5E5"> accuracy I basically</font>

432
00:17:35,190 --> 00:17:37,990
<font color="#E5E5E5">mean</font>

433
00:17:35,800 --> 00:17:39,970
<font color="#CCCCCC">just</font><font color="#E5E5E5"> guessing the most frequent element</font>

434
00:17:37,990 --> 00:17:42,160
of the distribution so just<font color="#E5E5E5"> linking the</font>

435
00:17:39,970 --> 00:17:43,870
order makes<font color="#E5E5E5"> this basic attack about</font>

436
00:17:42,160 --> 00:17:46,680
seven times<font color="#E5E5E5"> more effective which is</font>

437
00:17:43,870 --> 00:17:50,649
which<font color="#E5E5E5"> is kind of a lot so in conclusion</font>

438
00:17:46,680 --> 00:17:52,000
the security of<font color="#E5E5E5"> re for real data</font><font color="#CCCCCC"> that</font>

439
00:17:50,650 --> 00:17:53,860
people<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> want to protect and</font>

440
00:17:52,000 --> 00:17:56,170
practice is substantially worse than

441
00:17:53,860 --> 00:17:57,969
<font color="#E5E5E5">then yeah I think anybody anybody feared</font>

442
00:17:56,170 --> 00:18:00,850
<font color="#E5E5E5">there are some limitations</font><font color="#CCCCCC"> to these</font>

443
00:17:57,970 --> 00:18:03,340
<font color="#E5E5E5">attacks</font><font color="#CCCCCC"> the attacker especially needs</font>

444
00:18:00,850 --> 00:18:05,050
good<font color="#CCCCCC"> auxilary data our zip code and</font>

445
00:18:03,340 --> 00:18:06,550
<font color="#CCCCCC">birth date attacks</font><font color="#E5E5E5"> didn't have very good</font>

446
00:18:05,050 --> 00:18:10,210
auxilary data and they didn't perform

447
00:18:06,550 --> 00:18:12,610
very<font color="#E5E5E5"> well</font><font color="#CCCCCC"> just for</font><font color="#E5E5E5"> other researchers I</font>

448
00:18:10,210 --> 00:18:14,230
think more work is needed to understand

449
00:18:12,610 --> 00:18:18,459
the power of leakage abuse attacks

450
00:18:14,230 --> 00:18:22,030
against both ores more general<font color="#E5E5E5"> pyaari</font>

451
00:18:18,460 --> 00:18:23,680
schemes<font color="#E5E5E5"> and just as a final takeaway if</font>

452
00:18:22,030 --> 00:18:25,450
you're considering<font color="#E5E5E5"> using</font><font color="#CCCCCC"> Ori</font><font color="#E5E5E5"> in a</font>

453
00:18:23,680 --> 00:18:28,030
project<font color="#CCCCCC"> or in a commercial product or</font>

454
00:18:25,450 --> 00:18:30,310
anything like<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> only place that</font>

455
00:18:28,030 --> 00:18:32,560
<font color="#E5E5E5">it's appropriate</font><font color="#CCCCCC"> to use</font><font color="#E5E5E5"> Ori is if the</font>

456
00:18:30,310 --> 00:18:34,629
<font color="#CCCCCC">only other choice</font><font color="#E5E5E5"> is to</font><font color="#CCCCCC"> use plain text</font>

457
00:18:32,560 --> 00:18:35,889
because of legacy constraints or

458
00:18:34,630 --> 00:18:38,140
application constraints or something

459
00:18:35,890 --> 00:18:39,970
<font color="#E5E5E5">like this basically if there's any other</font>

460
00:18:38,140 --> 00:18:43,420
choice or you<font color="#CCCCCC"> should probably not be</font>

461
00:18:39,970 --> 00:18:45,780
<font color="#CCCCCC">used so thanks for listening any</font>

462
00:18:43,420 --> 00:18:45,780
questions

463
00:18:49,240 --> 00:18:55,810
<font color="#CCCCCC">I thanks for the talk I have one</font>

464
00:18:53,110 --> 00:18:57,429
question<font color="#CCCCCC"> regarding the top</font><font color="#E5E5E5"> 40 names how</font>

465
00:18:55,810 --> 00:18:59,050
many names are<font color="#E5E5E5"> they all together and do</font>

466
00:18:57,430 --> 00:19:02,380
you have any idea if<font color="#E5E5E5"> you used all of the</font>

467
00:18:59,050 --> 00:19:04,510
names how much it would drop I'm a

468
00:19:02,380 --> 00:19:07,690
repeat your question<font color="#E5E5E5"> you only use the</font>

469
00:19:04,510 --> 00:19:09,310
<font color="#CCCCCC">four top 40 names to guess and we have</font>

470
00:19:07,690 --> 00:19:11,080
any idea<font color="#E5E5E5"> if you would use all of the</font>

471
00:19:09,310 --> 00:19:14,710
names how much it would drop and how

472
00:19:11,080 --> 00:19:17,080
much the<font color="#CCCCCC"> overall probability</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> all of</font>

473
00:19:14,710 --> 00:19:18,970
the names would<font color="#CCCCCC"> be now that's a good</font>

474
00:19:17,080 --> 00:19:23,320
<font color="#CCCCCC">question</font><font color="#E5E5E5"> so so his question is basically</font>

475
00:19:18,970 --> 00:19:26,050
like so<font color="#E5E5E5"> if we use all the names</font><font color="#CCCCCC"> we're</font>

476
00:19:23,320 --> 00:19:29,139
not going<font color="#CCCCCC"> to estimate</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> the ranges</font>

477
00:19:26,050 --> 00:19:31,960
correctly and we expect the recovery

478
00:19:29,140 --> 00:19:35,380
rate to go down<font color="#E5E5E5"> the answer is I don't</font>

479
00:19:31,960 --> 00:19:37,990
<font color="#CCCCCC">know</font><font color="#E5E5E5"> I haven't</font><font color="#CCCCCC"> tested it</font><font color="#E5E5E5"> I'm not</font><font color="#CCCCCC"> sure</font>

480
00:19:35,380 --> 00:19:40,270
<font color="#CCCCCC">how</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> it would go</font><font color="#E5E5E5"> down we can we can</font>

481
00:19:37,990 --> 00:19:46,110
talk<font color="#E5E5E5"> offline now I haven't thought about</font>

482
00:19:40,270 --> 00:19:51,250
it<font color="#E5E5E5"> but</font><font color="#CCCCCC"> ok let's</font><font color="#E5E5E5"> send</font><font color="#CCCCCC"> the speaker</font>

483
00:19:46,110 --> 00:19:51,250
[Applause]

