1
00:00:06,880 --> 00:00:12,170
so hello my name<font color="#E5E5E5"> is</font>

2
00:00:09,860 --> 00:00:14,719
<font color="#E5E5E5">spacious</font><font color="#CCCCCC"> I'm a PhD</font><font color="#E5E5E5"> student at</font><font color="#CCCCCC"> Columbia</font>

3
00:00:12,170 --> 00:00:15,920
<font color="#CCCCCC">city and today</font><font color="#E5E5E5"> I'm</font>

4
00:00:14,720 --> 00:00:18,050
you the work have been<font color="#E5E5E5"> doing on</font>

5
00:00:15,920 --> 00:00:19,670
differential testing this is joint work

6
00:00:18,050 --> 00:00:22,640
with<font color="#CCCCCC"> Adriene</font><font color="#E5E5E5"> tank as</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> as our</font>

7
00:00:19,670 --> 00:00:25,610
<font color="#E5E5E5">advisors Southall</font><font color="#CCCCCC"> for angular</font><font color="#E5E5E5"> might even</font>

8
00:00:22,640 --> 00:00:27,310
<font color="#CCCCCC">sue Manzana</font><font color="#E5E5E5"> so I get most of the</font>

9
00:00:25,610 --> 00:00:29,240
audience<font color="#CCCCCC"> Marco be familiar with</font>

10
00:00:27,310 --> 00:00:31,250
<font color="#E5E5E5">differential testing it's a very</font><font color="#CCCCCC"> well</font>

11
00:00:29,240 --> 00:00:33,500
<font color="#CCCCCC">known specific mix technique and</font>

12
00:00:31,250 --> 00:00:35,840
essentially with differential testing we

13
00:00:33,500 --> 00:00:37,940
<font color="#E5E5E5">mainly trying to target logic bugs in a</font>

14
00:00:35,840 --> 00:00:40,910
similar way<font color="#E5E5E5"> where with</font><font color="#CCCCCC"> fuzzing</font><font color="#E5E5E5"> we target</font>

15
00:00:37,940 --> 00:00:42,559
memory<font color="#CCCCCC"> corruption bugs so to give you</font>

16
00:00:40,910 --> 00:00:44,360
<font color="#E5E5E5">some example you might</font><font color="#CCCCCC"> have a series of</font>

17
00:00:42,560 --> 00:00:45,950
applications<font color="#CCCCCC"> that perform the same</font>

18
00:00:44,360 --> 00:00:48,140
functionality so suppose you have

19
00:00:45,950 --> 00:00:50,840
different<font color="#CCCCCC"> SSL libraries so</font><font color="#E5E5E5"> these</font>

20
00:00:48,140 --> 00:00:53,720
applications<font color="#E5E5E5"> they generally conform to</font>

21
00:00:50,840 --> 00:00:55,040
the same standard or specification so

22
00:00:53,720 --> 00:00:56,750
the<font color="#CCCCCC"> intuition here</font><font color="#E5E5E5"> is that if</font><font color="#CCCCCC"> you</font>

23
00:00:55,040 --> 00:00:59,150
observe some sort of deviation from<font color="#CCCCCC"> this</font>

24
00:00:56,750 --> 00:01:01,180
specification<font color="#E5E5E5"> or standard that's likely</font>

25
00:00:59,150 --> 00:01:03,620
<font color="#E5E5E5">to be</font><font color="#CCCCCC"> a bug in one of the applications</font>

26
00:01:01,180 --> 00:01:05,180
<font color="#E5E5E5">so what we do with differential testing</font>

27
00:01:03,620 --> 00:01:07,250
is we feed an input to all of<font color="#E5E5E5"> these</font>

28
00:01:05,180 --> 00:01:09,170
<font color="#E5E5E5">applications and then we observe</font><font color="#CCCCCC"> the</font>

29
00:01:07,250 --> 00:01:11,509
behavior<font color="#E5E5E5"> to see if we spot any sort of</font>

30
00:01:09,170 --> 00:01:13,880
deviation and this is of<font color="#E5E5E5"> course not</font>

31
00:01:11,509 --> 00:01:15,829
<font color="#E5E5E5">applicable only to SSL libraries but</font>

32
00:01:13,880 --> 00:01:17,570
it's also applicable to compiler testing

33
00:01:15,829 --> 00:01:19,850
or you could<font color="#CCCCCC"> differentially different</font>

34
00:01:17,570 --> 00:01:22,580
JVM implementations and so on and so

35
00:01:19,850 --> 00:01:25,158
forth now the key challenges with

36
00:01:22,580 --> 00:01:26,810
existing differential testing frameworks

37
00:01:25,159 --> 00:01:29,720
is that many of the<font color="#E5E5E5"> tools</font><font color="#CCCCCC"> that have</font><font color="#E5E5E5"> been</font>

38
00:01:26,810 --> 00:01:31,909
proposed<font color="#CCCCCC"> at domain-specific</font><font color="#E5E5E5"> so they're</font>

39
00:01:29,720 --> 00:01:34,700
<font color="#E5E5E5">not easily extendable to different types</font>

40
00:01:31,909 --> 00:01:38,510
of<font color="#E5E5E5"> applications and often they suffer</font>

41
00:01:34,700 --> 00:01:41,540
from inefficient<font color="#CCCCCC"> into generation</font><font color="#E5E5E5"> so our</font>

42
00:01:38,510 --> 00:01:43,580
goal for<font color="#CCCCCC"> this work was to mainly come up</font>

43
00:01:41,540 --> 00:01:45,380
with a<font color="#E5E5E5"> solution to provide efficient</font>

44
00:01:43,580 --> 00:01:48,950
domain independent differential testing

45
00:01:45,380 --> 00:01:52,280
in the same manner<font color="#CCCCCC"> that</font><font color="#E5E5E5"> modern</font><font color="#CCCCCC"> fathers</font>

46
00:01:48,950 --> 00:01:53,690
work<font color="#E5E5E5"> so to give you some idea how can we</font>

47
00:01:52,280 --> 00:01:56,600
how can we<font color="#E5E5E5"> achieve it domain</font>

48
00:01:53,690 --> 00:01:59,539
<font color="#E5E5E5">independence essentially one technique</font>

49
00:01:56,600 --> 00:02:01,039
<font color="#E5E5E5">that has</font><font color="#CCCCCC"> been shown to have very to</font><font color="#E5E5E5"> be</font>

50
00:01:59,540 --> 00:02:03,590
very successful in<font color="#E5E5E5"> this domain</font><font color="#CCCCCC"> is</font>

51
00:02:01,040 --> 00:02:05,360
evolutionary testing so the way this

52
00:02:03,590 --> 00:02:08,479
<font color="#E5E5E5">works is that</font><font color="#CCCCCC"> you start with a corpus of</font>

53
00:02:05,360 --> 00:02:10,068
<font color="#E5E5E5">seeds and then you pass these inputs to</font>

54
00:02:08,479 --> 00:02:12,739
<font color="#CCCCCC">your application</font><font color="#E5E5E5"> and now the application</font>

55
00:02:10,068 --> 00:02:14,958
<font color="#E5E5E5">has</font><font color="#CCCCCC"> been somehow instrumented to give</font>

56
00:02:12,739 --> 00:02:17,150
you some sort<font color="#E5E5E5"> of information about each</font>

57
00:02:14,959 --> 00:02:18,379
<font color="#E5E5E5">state so whether you discovered</font>

58
00:02:17,150 --> 00:02:20,510
something<font color="#E5E5E5"> new in the control flow</font><font color="#CCCCCC"> graph</font>

59
00:02:18,379 --> 00:02:23,569
<font color="#E5E5E5">or whether you have some sort of memory</font>

60
00:02:20,510 --> 00:02:26,780
error so you<font color="#CCCCCC"> propagate</font><font color="#E5E5E5"> this information</font>

61
00:02:23,569 --> 00:02:28,019
back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> your guidance engine and in this</font>

62
00:02:26,780 --> 00:02:30,330
way you<font color="#E5E5E5"> get a sense of</font>

63
00:02:28,020 --> 00:02:33,150
chinputs<font color="#E5E5E5"> were actually are most useful</font>

64
00:02:30,330 --> 00:02:36,210
<font color="#E5E5E5">for</font><font color="#CCCCCC"> your analysis</font><font color="#E5E5E5"> so you evolve your</font>

65
00:02:33,150 --> 00:02:40,980
corpus in an evolutionary manner to

66
00:02:36,210 --> 00:02:43,160
basically make it occur more interesting

67
00:02:40,980 --> 00:02:45,510
behaviors<font color="#CCCCCC"> in yet inside your application</font>

68
00:02:43,160 --> 00:02:47,850
<font color="#E5E5E5">so if we wanted to come up</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> a</font>

69
00:02:45,510 --> 00:02:50,310
<font color="#E5E5E5">differential testing framework that is</font>

70
00:02:47,850 --> 00:02:52,890
generic<font color="#E5E5E5"> one can say okay we should focus</font>

71
00:02:50,310 --> 00:02:54,990
on the<font color="#CCCCCC"> simple</font><font color="#E5E5E5"> generation guidance but</font>

72
00:02:52,890 --> 00:02:57,420
<font color="#E5E5E5">how does this guidance engine</font><font color="#CCCCCC"> actually</font>

73
00:02:54,990 --> 00:02:58,800
comes up with<font color="#E5E5E5"> interesting inputs so to</font>

74
00:02:57,420 --> 00:03:00,959
give you<font color="#CCCCCC"> an example of how this works</font>

75
00:02:58,800 --> 00:03:03,660
<font color="#CCCCCC">let's think of mystic about a very</font>

76
00:03:00,960 --> 00:03:05,640
well-known<font color="#E5E5E5"> case study which is the</font>

77
00:03:03,660 --> 00:03:08,609
<font color="#CCCCCC">weight code coverage</font><font color="#E5E5E5"> is using model</font>

78
00:03:05,640 --> 00:03:10,589
<font color="#E5E5E5">fathers so the suppose that this box</font>

79
00:03:08,610 --> 00:03:12,600
here represents all the<font color="#CCCCCC"> possible code</font>

80
00:03:10,590 --> 00:03:13,560
paths in the application<font color="#E5E5E5"> so what we're</font>

81
00:03:12,600 --> 00:03:15,420
<font color="#E5E5E5">going to do is we're going to maintain</font>

82
00:03:13,560 --> 00:03:17,280
<font color="#E5E5E5">an input corpus of inputs that are</font>

83
00:03:15,420 --> 00:03:18,959
actually interesting to<font color="#CCCCCC"> us and then</font>

84
00:03:17,280 --> 00:03:21,800
we're going<font color="#E5E5E5"> to be recording the</font>

85
00:03:18,960 --> 00:03:25,140
Parenthood coverage for this particular

86
00:03:21,800 --> 00:03:26,790
scenario<font color="#E5E5E5"> so essentially if an input is</font>

87
00:03:25,140 --> 00:03:29,489
interesting it triggers some new

88
00:03:26,790 --> 00:03:31,320
functionality<font color="#E5E5E5"> some</font><font color="#CCCCCC"> explore</font><font color="#E5E5E5"> some new code</font>

89
00:03:29,490 --> 00:03:34,050
<font color="#CCCCCC">bus</font><font color="#E5E5E5"> we're going to be adding</font><font color="#CCCCCC"> into our</font>

90
00:03:31,320 --> 00:03:36,570
corpus so suppose you get<font color="#E5E5E5"> the things</font><font color="#CCCCCC"> at</font>

91
00:03:34,050 --> 00:03:38,520
one here<font color="#E5E5E5"> and we see that it exercise is</font>

92
00:03:36,570 --> 00:03:40,470
some<font color="#E5E5E5"> portion in the control flow</font><font color="#CCCCCC"> graph</font>

93
00:03:38,520 --> 00:03:42,810
and<font color="#E5E5E5"> this is completely new so we haven't</font>

94
00:03:40,470 --> 00:03:45,390
<font color="#E5E5E5">seen it before so we are the same put</font>

95
00:03:42,810 --> 00:03:47,340
into our corpus we will come up<font color="#CCCCCC"> with</font><font color="#E5E5E5"> a</font>

96
00:03:45,390 --> 00:03:48,869
second input<font color="#E5E5E5"> we exercise it into the</font>

97
00:03:47,340 --> 00:03:50,880
application then again we see that we

98
00:03:48,870 --> 00:03:52,890
<font color="#E5E5E5">explore some</font><font color="#CCCCCC"> new portion of the control</font>

99
00:03:50,880 --> 00:03:54,769
flow<font color="#CCCCCC"> graph so we add it again</font><font color="#E5E5E5"> to our</font>

100
00:03:52,890 --> 00:03:57,929
corpus and<font color="#E5E5E5"> we keep</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> this process</font>

101
00:03:54,770 --> 00:03:59,670
<font color="#CCCCCC">until we</font><font color="#E5E5E5"> reach a point where we exercise</font>

102
00:03:57,930 --> 00:04:01,980
arm input and then<font color="#CCCCCC"> we discover now</font>

103
00:03:59,670 --> 00:04:06,179
<font color="#E5E5E5">nothing new so this thing could get</font>

104
00:04:01,980 --> 00:04:08,850
discarded<font color="#E5E5E5"> so now the question becomes</font>

105
00:04:06,180 --> 00:04:10,830
how<font color="#CCCCCC"> can we retrofit this particular</font>

106
00:04:08,850 --> 00:04:12,540
mechanism<font color="#CCCCCC"> especially for differential</font>

107
00:04:10,830 --> 00:04:14,700
testing because right<font color="#E5E5E5"> now the question</font>

108
00:04:12,540 --> 00:04:17,219
<font color="#CCCCCC">is</font><font color="#E5E5E5"> we have the generic</font><font color="#CCCCCC"> fathers which</font>

109
00:04:14,700 --> 00:04:19,260
work<font color="#CCCCCC"> really nicely</font><font color="#E5E5E5"> but for differential</font>

110
00:04:17,220 --> 00:04:22,200
technique how can we come up<font color="#CCCCCC"> with a same</font>

111
00:04:19,260 --> 00:04:24,390
sort of approach<font color="#E5E5E5"> so there's three</font>

112
00:04:22,200 --> 00:04:25,979
options<font color="#CCCCCC"> that</font><font color="#E5E5E5"> one can consider one is</font>

113
00:04:24,390 --> 00:04:29,370
<font color="#E5E5E5">that you can use a single</font><font color="#CCCCCC"> application</font>

114
00:04:25,980 --> 00:04:31,290
<font color="#E5E5E5">and come up with interesting inputs to</font>

115
00:04:29,370 --> 00:04:32,700
<font color="#E5E5E5">be used for differential testing so for</font>

116
00:04:31,290 --> 00:04:34,680
instance<font color="#CCCCCC"> you file open SSL</font>

117
00:04:32,700 --> 00:04:36,570
you see all the<font color="#E5E5E5"> inputs</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> that you</font>

118
00:04:34,680 --> 00:04:38,990
get and then you<font color="#CCCCCC"> provide the same</font>

119
00:04:36,570 --> 00:04:41,260
includes two different<font color="#E5E5E5"> SSL libraries</font>

120
00:04:38,990 --> 00:04:43,270
another option would<font color="#E5E5E5"> be</font>

121
00:04:41,260 --> 00:04:45,849
to augment this engine of modern

122
00:04:43,270 --> 00:04:48,460
<font color="#E5E5E5">trousers and use global code coverage as</font>

123
00:04:45,850 --> 00:04:50,320
your<font color="#E5E5E5"> guidance and the third option would</font>

124
00:04:48,460 --> 00:04:52,270
be to completely<font color="#CCCCCC"> redesign your guidance</font>

125
00:04:50,320 --> 00:04:55,330
engine so that<font color="#E5E5E5"> you can perform</font><font color="#CCCCCC"> a</font>

126
00:04:52,270 --> 00:04:57,370
differential filing this time and in

127
00:04:55,330 --> 00:04:59,710
this work I'm going<font color="#E5E5E5"> to show you how the</font>

128
00:04:57,370 --> 00:05:01,450
third option<font color="#E5E5E5"> outperforms are the other</font>

129
00:04:59,710 --> 00:05:04,090
two options<font color="#CCCCCC"> particularly for</font>

130
00:05:01,450 --> 00:05:05,920
differential testing so the key insight

131
00:05:04,090 --> 00:05:07,900
for this work is that<font color="#E5E5E5"> techniques that</font>

132
00:05:05,920 --> 00:05:10,870
work that work well in the context of<font color="#CCCCCC"> a</font>

133
00:05:07,900 --> 00:05:14,640
single<font color="#CCCCCC"> application may not be optimal</font>

134
00:05:10,870 --> 00:05:17,080
<font color="#CCCCCC">for differential testing particularly</font><font color="#E5E5E5"> so</font>

135
00:05:14,640 --> 00:05:18,400
to show you why this<font color="#E5E5E5"> is the case let's</font>

136
00:05:17,080 --> 00:05:20,200
go back to the<font color="#E5E5E5"> previous example and</font>

137
00:05:18,400 --> 00:05:22,390
<font color="#E5E5E5">suppose now we're using a</font><font color="#CCCCCC"> global code</font>

138
00:05:20,200 --> 00:05:25,390
coverage<font color="#E5E5E5"> to differentially</font><font color="#CCCCCC"> file</font><font color="#E5E5E5"> two</font>

139
00:05:22,390 --> 00:05:27,280
applications now we take one<font color="#CCCCCC"> input and</font>

140
00:05:25,390 --> 00:05:29,770
we<font color="#CCCCCC"> exercise this input and we see that</font>

141
00:05:27,280 --> 00:05:32,859
we explore some<font color="#CCCCCC"> portion</font><font color="#E5E5E5"> in the code of</font>

142
00:05:29,770 --> 00:05:35,109
both the applications<font color="#E5E5E5"> so that's really</font>

143
00:05:32,860 --> 00:05:37,330
nice because<font color="#E5E5E5"> we haven't seen this code</font>

144
00:05:35,110 --> 00:05:39,640
but before so we are the<font color="#E5E5E5"> same put into</font>

145
00:05:37,330 --> 00:05:41,530
our corpus and now we<font color="#E5E5E5"> keep doing the</font>

146
00:05:39,640 --> 00:05:44,500
same<font color="#E5E5E5"> process</font><font color="#CCCCCC"> as long as we discover new</font>

147
00:05:41,530 --> 00:05:46,690
<font color="#E5E5E5">code paths now we exercise a third input</font>

148
00:05:44,500 --> 00:05:48,550
<font color="#E5E5E5">here and we see that we don't discover</font>

149
00:05:46,690 --> 00:05:50,770
anything new<font color="#E5E5E5"> in our global coverage and</font>

150
00:05:48,550 --> 00:05:52,870
normally we will discard<font color="#CCCCCC"> this input</font><font color="#E5E5E5"> and</font>

151
00:05:50,770 --> 00:05:56,469
likewise for<font color="#E5E5E5"> input for we don't get</font>

152
00:05:52,870 --> 00:05:59,440
anything new now if you observe<font color="#CCCCCC"> in two</font>

153
00:05:56,470 --> 00:06:01,540
<font color="#CCCCCC">three we see that some it triggered some</font>

154
00:05:59,440 --> 00:06:03,340
<font color="#E5E5E5">poor part of the code</font><font color="#CCCCCC"> of application a</font>

155
00:06:01,540 --> 00:06:06,790
<font color="#E5E5E5">and some part of the code of application</font>

156
00:06:03,340 --> 00:06:08,919
<font color="#CCCCCC">- and</font><font color="#E5E5E5"> it is the same for input</font><font color="#CCCCCC"> four but</font>

157
00:06:06,790 --> 00:06:11,110
if you<font color="#CCCCCC"> observe these two inputs we see</font>

158
00:06:08,920 --> 00:06:13,960
that the exercise disproportionate code

159
00:06:11,110 --> 00:06:15,460
regions<font color="#E5E5E5"> in the two applications now if</font>

160
00:06:13,960 --> 00:06:17,950
you think<font color="#E5E5E5"> about the thousand process</font>

161
00:06:15,460 --> 00:06:19,659
this disproportion might actually imply

162
00:06:17,950 --> 00:06:22,390
that there is a difference in<font color="#E5E5E5"> the</font>

163
00:06:19,660 --> 00:06:23,860
<font color="#E5E5E5">handling logic between the two</font>

164
00:06:22,390 --> 00:06:25,990
applications<font color="#CCCCCC"> for these two inputs</font>

165
00:06:23,860 --> 00:06:28,060
particularly so the<font color="#E5E5E5"> intuition is that</font>

166
00:06:25,990 --> 00:06:30,880
how do<font color="#E5E5E5"> we retain these inputs in our</font>

167
00:06:28,060 --> 00:06:32,740
<font color="#E5E5E5">input corpus would be able</font><font color="#CCCCCC"> to find more</font>

168
00:06:30,880 --> 00:06:35,170
discrepancies because we would push the

169
00:06:32,740 --> 00:06:36,910
evolutionary are having towards

170
00:06:35,170 --> 00:06:39,760
generating<font color="#E5E5E5"> with more input that we</font>

171
00:06:36,910 --> 00:06:42,040
trigger<font color="#CCCCCC"> this sort of discrepancies</font><font color="#E5E5E5"> so</font>

172
00:06:39,760 --> 00:06:44,770
again the relative program behavior<font color="#E5E5E5"> is</font>

173
00:06:42,040 --> 00:06:46,450
<font color="#E5E5E5">really important in this context</font><font color="#CCCCCC"> so in</font>

174
00:06:44,770 --> 00:06:48,820
this<font color="#E5E5E5"> paper we</font><font color="#CCCCCC"> introduced this notion of</font>

175
00:06:46,450 --> 00:06:51,940
differential diversity and we suggest

176
00:06:48,820 --> 00:06:54,550
that as a new means to<font color="#E5E5E5"> achieve guidance</font>

177
00:06:51,940 --> 00:06:56,469
for differential testing<font color="#E5E5E5"> so the main</font>

178
00:06:54,550 --> 00:06:58,330
<font color="#CCCCCC">idea here</font><font color="#E5E5E5"> is that we will obtain some</font>

179
00:06:56,470 --> 00:06:59,710
<font color="#CCCCCC">sort of state information</font><font color="#E5E5E5"> for the</font>

180
00:06:58,330 --> 00:07:02,320
application and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can do</font><font color="#E5E5E5"> this in a</font>

181
00:06:59,710 --> 00:07:04,450
white<font color="#E5E5E5"> box manner at compile time or you</font>

182
00:07:02,320 --> 00:07:06,250
<font color="#E5E5E5">can perform dynamic</font><font color="#CCCCCC"> binary mutation or</font>

183
00:07:04,450 --> 00:07:09,190
even in a completely black box manner

184
00:07:06,250 --> 00:07:10,600
but<font color="#E5E5E5"> then the state information will give</font>

185
00:07:09,190 --> 00:07:12,310
you some notion of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> behavioral</font>

186
00:07:10,600 --> 00:07:14,410
diversity of the applications<font color="#E5E5E5"> you test</font>

187
00:07:12,310 --> 00:07:17,290
<font color="#E5E5E5">so for instance suppose you want to</font>

188
00:07:14,410 --> 00:07:18,820
differentially test<font color="#E5E5E5"> SSL libraries you</font>

189
00:07:17,290 --> 00:07:20,950
<font color="#E5E5E5">will take an input and you will feed the</font>

190
00:07:18,820 --> 00:07:23,400
same input<font color="#E5E5E5"> into all applications and</font>

191
00:07:20,950 --> 00:07:26,050
then<font color="#E5E5E5"> depending on what you choose</font><font color="#CCCCCC"> to</font>

192
00:07:23,400 --> 00:07:28,419
formulate depending on what method<font color="#E5E5E5"> you</font>

193
00:07:26,050 --> 00:07:31,000
choose to represent<font color="#E5E5E5"> each of</font><font color="#CCCCCC"> your</font>

194
00:07:28,420 --> 00:07:32,950
applications<font color="#CCCCCC"> essentially you will try to</font>

195
00:07:31,000 --> 00:07:36,460
come<font color="#CCCCCC"> up with the behavioral symmetries</font>

196
00:07:32,950 --> 00:07:38,860
for<font color="#CCCCCC"> your exact scenario</font><font color="#E5E5E5"> so in the same</font>

197
00:07:36,460 --> 00:07:40,750
<font color="#E5E5E5">manner in which in traditional filing of</font>

198
00:07:38,860 --> 00:07:43,090
a single application<font color="#CCCCCC"> you want to</font>

199
00:07:40,750 --> 00:07:44,950
<font color="#CCCCCC">maximize say code coverage</font><font color="#E5E5E5"> all the total</font>

200
00:07:43,090 --> 00:07:46,359
edges<font color="#E5E5E5"> that</font><font color="#CCCCCC"> have been accessed so you</font>

201
00:07:44,950 --> 00:07:48,880
want to maximize some sort of counter

202
00:07:46,360 --> 00:07:51,010
here you want<font color="#E5E5E5"> to maximize the behavioral</font>

203
00:07:48,880 --> 00:07:53,950
symmetries across all your<font color="#CCCCCC"> applications</font>

204
00:07:51,010 --> 00:07:55,960
<font color="#E5E5E5">so</font><font color="#CCCCCC"> I'm going to</font><font color="#E5E5E5"> present to</font><font color="#CCCCCC"> you two</font>

205
00:07:53,950 --> 00:07:58,659
<font color="#CCCCCC">examples of how we can retrofit the</font>

206
00:07:55,960 --> 00:08:01,359
previous case of code<font color="#E5E5E5"> coverage with a</font>

207
00:07:58,660 --> 00:08:04,480
<font color="#CCCCCC">Delta diversity paradigm and show you</font>

208
00:08:01,360 --> 00:08:07,420
how<font color="#E5E5E5"> we can get better intuition on the</font>

209
00:08:04,480 --> 00:08:10,330
<font color="#E5E5E5">guidance so suppose that</font><font color="#CCCCCC"> instead of</font>

210
00:08:07,420 --> 00:08:11,950
<font color="#E5E5E5">using just the global code coverage you</font>

211
00:08:10,330 --> 00:08:13,359
could<font color="#E5E5E5"> keep track of the unique edges you</font>

212
00:08:11,950 --> 00:08:15,880
have<font color="#E5E5E5"> accessed in each of the two</font>

213
00:08:13,360 --> 00:08:17,590
<font color="#CCCCCC">applications</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> for input one we see</font>

214
00:08:15,880 --> 00:08:18,310
that we access<font color="#E5E5E5"> three edges</font><font color="#CCCCCC"> and</font>

215
00:08:17,590 --> 00:08:20,919
application

216
00:08:18,310 --> 00:08:23,140
a and two edges<font color="#E5E5E5"> and application B so we</font>

217
00:08:20,920 --> 00:08:26,110
can<font color="#CCCCCC"> have a double</font><font color="#E5E5E5"> of three point one</font>

218
00:08:23,140 --> 00:08:28,539
that the nodes are the<font color="#E5E5E5"> path differential</font>

219
00:08:26,110 --> 00:08:30,400
diversity of that particular input<font color="#E5E5E5"> and</font>

220
00:08:28,540 --> 00:08:32,349
we see that<font color="#CCCCCC"> four include three we</font>

221
00:08:30,400 --> 00:08:35,289
<font color="#E5E5E5">trigger two edges</font><font color="#CCCCCC"> in application a and</font>

222
00:08:32,349 --> 00:08:36,940
three edges in application<font color="#E5E5E5"> B so now we</font>

223
00:08:35,289 --> 00:08:39,370
have a<font color="#E5E5E5"> different couple of two point</font>

224
00:08:36,940 --> 00:08:41,979
three<font color="#E5E5E5"> and under this new paradigm these</font>

225
00:08:39,370 --> 00:08:44,380
two inputs<font color="#CCCCCC"> are interesting to</font><font color="#E5E5E5"> us because</font>

226
00:08:41,979 --> 00:08:45,100
<font color="#E5E5E5">they result in something</font><font color="#CCCCCC"> that we haven't</font>

227
00:08:44,380 --> 00:08:47,950
<font color="#E5E5E5">seen before</font>

228
00:08:45,100 --> 00:08:49,510
so<font color="#E5E5E5"> for a</font><font color="#CCCCCC"> 13-2 that actually results in a</font>

229
00:08:47,950 --> 00:08:52,510
double that we have seen<font color="#E5E5E5"> before we can</font>

230
00:08:49,510 --> 00:08:55,720
discard it and of<font color="#CCCCCC"> course one can perform</font>

231
00:08:52,510 --> 00:08:58,210
<font color="#E5E5E5">a completely a</font><font color="#CCCCCC"> blackbox</font><font color="#E5E5E5"> testing so you</font>

232
00:08:55,720 --> 00:09:00,190
could say<font color="#E5E5E5"> I want</font><font color="#CCCCCC"> to formulate</font><font color="#E5E5E5"> behavior</font>

233
00:08:58,210 --> 00:09:03,339
just based on exception messages or

234
00:09:00,190 --> 00:09:05,170
error codes<font color="#E5E5E5"> or even the return</font><font color="#CCCCCC"> values of</font>

235
00:09:03,339 --> 00:09:07,450
the<font color="#E5E5E5"> test</font><font color="#CCCCCC"> WK</font>

236
00:09:05,170 --> 00:09:09,819
so for<font color="#E5E5E5"> instance you could supply an</font>

237
00:09:07,450 --> 00:09:11,320
input to both<font color="#E5E5E5"> applications and say what</font>

238
00:09:09,820 --> 00:09:13,870
are what is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> return value I'm getting</font>

239
00:09:11,320 --> 00:09:15,220
<font color="#E5E5E5">back so if you get a 0-0 that's</font>

240
00:09:13,870 --> 00:09:16,870
something that you haven't<font color="#E5E5E5"> seen</font><font color="#CCCCCC"> before</font>

241
00:09:15,220 --> 00:09:19,720
at the top<font color="#E5E5E5"> oh so this is an interesting</font>

242
00:09:16,870 --> 00:09:21,130
input<font color="#E5E5E5"> if you get a zero one in bed again</font>

243
00:09:19,720 --> 00:09:23,020
you<font color="#E5E5E5"> haven't seen this</font><font color="#CCCCCC"> particular</font>

244
00:09:21,130 --> 00:09:24,820
combination<font color="#E5E5E5"> before but then if you</font>

245
00:09:23,020 --> 00:09:26,260
provide a<font color="#CCCCCC"> different input for which if</font>

246
00:09:24,820 --> 00:09:27,880
you get again a zero<font color="#E5E5E5"> zero</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> that's</font>

247
00:09:26,260 --> 00:09:30,600
<font color="#E5E5E5">not interesting</font><font color="#CCCCCC"> for your analysis and</font>

248
00:09:27,880 --> 00:09:33,340
<font color="#E5E5E5">you can discard it so in the following</font>

249
00:09:30,600 --> 00:09:34,960
<font color="#E5E5E5">I'm going to show you that this this</font>

250
00:09:33,340 --> 00:09:37,840
approach is<font color="#CCCCCC"> actually the</font><font color="#E5E5E5"> main</font>

251
00:09:34,960 --> 00:09:40,030
<font color="#CCCCCC">independent and also can</font><font color="#E5E5E5"> be efficient</font><font color="#CCCCCC"> so</font>

252
00:09:37,840 --> 00:09:42,280
the<font color="#CCCCCC"> deucer we implemented a prototype</font>

253
00:09:40,030 --> 00:09:44,709
named<font color="#CCCCCC"> Nessa</font><font color="#E5E5E5"> and we also implemented</font>

254
00:09:42,280 --> 00:09:47,110
different grade books and black box<font color="#E5E5E5"> that</font>

255
00:09:44,710 --> 00:09:49,840
the diversity<font color="#CCCCCC"> metrics</font><font color="#E5E5E5"> and we built</font><font color="#CCCCCC"> mega</font>

256
00:09:47,110 --> 00:09:51,910
extending<font color="#CCCCCC"> a leap buzzer</font><font color="#E5E5E5"> so that people</font>

257
00:09:49,840 --> 00:09:54,460
can actually<font color="#E5E5E5"> perform differential</font>

258
00:09:51,910 --> 00:09:56,980
testing for semantic vulnerabilities and

259
00:09:54,460 --> 00:10:00,640
logic errors as<font color="#E5E5E5"> well as</font><font color="#CCCCCC"> cross music-box</font>

260
00:09:56,980 --> 00:10:02,070
<font color="#E5E5E5">at the same time and we also applied</font><font color="#CCCCCC"> a</font>

261
00:10:00,640 --> 00:10:04,630
measure in a bunch of different

262
00:10:02,070 --> 00:10:07,270
workloads<font color="#E5E5E5"> so that we show that it can</font>

263
00:10:04,630 --> 00:10:10,360
<font color="#CCCCCC">actually find bugs and logic errors in</font>

264
00:10:07,270 --> 00:10:12,760
<font color="#E5E5E5">real world software so we tested SSL</font>

265
00:10:10,360 --> 00:10:14,980
libraries as<font color="#CCCCCC"> well as different PDF</font>

266
00:10:12,760 --> 00:10:17,020
readers<font color="#E5E5E5"> for logic errors and</font>

267
00:10:14,980 --> 00:10:19,630
<font color="#CCCCCC">discrepancies as well as different file</font>

268
00:10:17,020 --> 00:10:21,550
format parsers so to give<font color="#CCCCCC"> you</font><font color="#E5E5E5"> some</font>

269
00:10:19,630 --> 00:10:23,620
example on our<font color="#E5E5E5"> results</font><font color="#CCCCCC"> I'm going to</font>

270
00:10:21,550 --> 00:10:26,260
present<font color="#E5E5E5"> to you</font><font color="#CCCCCC"> some of</font><font color="#E5E5E5"> the cases of</font>

271
00:10:23,620 --> 00:10:28,750
differential testing we did on SSL

272
00:10:26,260 --> 00:10:30,360
libraries so what we try<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> is</font>

273
00:10:28,750 --> 00:10:33,280
we<font color="#E5E5E5"> try</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> find certificate verification</font>

274
00:10:30,360 --> 00:10:35,440
discrepancies so in this<font color="#E5E5E5"> context we're</font>

275
00:10:33,280 --> 00:10:37,480
looking for a certificate<font color="#E5E5E5"> for which one</font>

276
00:10:35,440 --> 00:10:39,160
library says it's fine and it accepts<font color="#E5E5E5"> it</font>

277
00:10:37,480 --> 00:10:41,320
<font color="#E5E5E5">and another library rejected with an</font>

278
00:10:39,160 --> 00:10:43,630
error<font color="#E5E5E5"> now in principle</font><font color="#CCCCCC"> that should not</font>

279
00:10:41,320 --> 00:10:47,140
happen because the certificate<font color="#E5E5E5"> should</font>

280
00:10:43,630 --> 00:10:49,540
either be valid<font color="#E5E5E5"> or invalid</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> we</font>

281
00:10:47,140 --> 00:10:51,370
applied<font color="#CCCCCC"> Meza on different</font><font color="#E5E5E5"> SSL libraries</font>

282
00:10:49,540 --> 00:10:53,319
and in this table<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can see</font><font color="#E5E5E5"> the</font>

283
00:10:51,370 --> 00:10:56,650
pairwise discrepancies of<font color="#E5E5E5"> neither found</font>

284
00:10:53,320 --> 00:10:58,810
<font color="#CCCCCC">based on the error code that each of the</font>

285
00:10:56,650 --> 00:11:01,030
libraries then<font color="#CCCCCC"> so a number of</font><font color="#E5E5E5"> times here</font>

286
00:10:58,810 --> 00:11:02,979
between<font color="#CCCCCC"> liberals selling</font><font color="#E5E5E5"> open SSL</font>

287
00:11:01,030 --> 00:11:05,530
we note that<font color="#CCCCCC"> we have ten different</font>

288
00:11:02,980 --> 00:11:08,710
<font color="#E5E5E5">certificates that neither generated</font>

289
00:11:05,530 --> 00:11:10,630
during the<font color="#E5E5E5"> filing process for which one</font>

290
00:11:08,710 --> 00:11:12,820
of<font color="#E5E5E5"> the two libraries accepted is valid</font>

291
00:11:10,630 --> 00:11:14,980
<font color="#E5E5E5">while the other library rejected it as</font>

292
00:11:12,820 --> 00:11:15,930
<font color="#E5E5E5">invalid so these are all unique</font>

293
00:11:14,980 --> 00:11:17,730
instances

294
00:11:15,930 --> 00:11:19,709
<font color="#E5E5E5">right</font><font color="#CCCCCC"> and of</font><font color="#E5E5E5"> course that could</font><font color="#CCCCCC"> be some</font>

295
00:11:17,730 --> 00:11:21,600
false<font color="#CCCCCC"> positives here in the sense that</font>

296
00:11:19,710 --> 00:11:23,790
some application could reject a

297
00:11:21,600 --> 00:11:25,410
certificate some<font color="#E5E5E5"> library could reject</font>

298
00:11:23,790 --> 00:11:27,120
<font color="#E5E5E5">the certificate because say of a</font><font color="#CCCCCC"> weak</font>

299
00:11:25,410 --> 00:11:29,370
<font color="#E5E5E5">cipher so it could be</font><font color="#CCCCCC"> a design decision</font>

300
00:11:27,120 --> 00:11:32,220
<font color="#E5E5E5">but in principle we show that</font><font color="#CCCCCC"> we can</font>

301
00:11:29,370 --> 00:11:33,510
find both real bugs as well<font color="#E5E5E5"> as cases</font><font color="#CCCCCC"> for</font>

302
00:11:32,220 --> 00:11:37,350
which<font color="#E5E5E5"> we trigger these sort of</font>

303
00:11:33,510 --> 00:11:39,540
discrepancies so one can say<font color="#CCCCCC"> okay how</font>

304
00:11:37,350 --> 00:11:42,120
does<font color="#CCCCCC"> it compare with the main specific</font>

305
00:11:39,540 --> 00:11:44,699
tools that<font color="#CCCCCC"> could save</font><font color="#E5E5E5"> perform</font>

306
00:11:42,120 --> 00:11:46,170
certificate verification<font color="#CCCCCC"> so we compared</font>

307
00:11:44,700 --> 00:11:48,149
the measure with<font color="#CCCCCC"> Frank answers which was</font>

308
00:11:46,170 --> 00:11:50,399
presented<font color="#CCCCCC"> in Auckland a few years ago as</font>

309
00:11:48,149 --> 00:11:52,020
well<font color="#E5E5E5"> as some follow-up work with new</font>

310
00:11:50,399 --> 00:11:53,550
certs that both tools are<font color="#E5E5E5"> the main</font>

311
00:11:52,020 --> 00:11:55,589
<font color="#CCCCCC">independent and perform certificate</font>

312
00:11:53,550 --> 00:11:58,140
verification<font color="#E5E5E5"> and we show that in the</font>

313
00:11:55,589 --> 00:12:01,950
same number of generation using<font color="#E5E5E5"> this</font>

314
00:11:58,140 --> 00:12:04,529
evolutionary domain agnostic framework

315
00:12:01,950 --> 00:12:06,360
and the Delta diversity guidance were

316
00:12:04,529 --> 00:12:08,820
able<font color="#CCCCCC"> to trigger</font><font color="#E5E5E5"> 52 times more</font>

317
00:12:06,360 --> 00:12:10,560
discrepancies and 27 times more

318
00:12:08,820 --> 00:12:13,350
<font color="#E5E5E5">disturbances on users and</font><font color="#CCCCCC"> Frank asserts</font>

319
00:12:10,560 --> 00:12:16,560
respectively<font color="#CCCCCC"> starting from the same</font>

320
00:12:13,350 --> 00:12:18,630
corpus<font color="#E5E5E5"> of inputs</font><font color="#CCCCCC"> and of course</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> could</font>

321
00:12:16,560 --> 00:12:21,150
<font color="#E5E5E5">say again how</font><font color="#CCCCCC"> this compared to</font><font color="#E5E5E5"> modern</font>

322
00:12:18,630 --> 00:12:21,600
<font color="#CCCCCC">fathers like</font><font color="#E5E5E5"> a FL or</font><font color="#CCCCCC"> leap father</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> new</font>

323
00:12:21,150 --> 00:12:24,720
<font color="#CCCCCC">systems</font>

324
00:12:21,600 --> 00:12:27,000
so here we have two possible<font color="#CCCCCC"> cases in</font>

325
00:12:24,720 --> 00:12:28,830
one case one can say I'm going<font color="#E5E5E5"> to fight</font>

326
00:12:27,000 --> 00:12:30,779
a single<font color="#E5E5E5"> application</font><font color="#CCCCCC"> and then provide</font>

327
00:12:28,830 --> 00:12:32,670
the symbols<font color="#E5E5E5"> to all the other programs</font>

328
00:12:30,779 --> 00:12:36,150
with differential<font color="#CCCCCC"> tests</font><font color="#E5E5E5"> and the other is</font>

329
00:12:32,670 --> 00:12:38,910
what if you adjust<font color="#CCCCCC"> Lib father or AFL say</font>

330
00:12:36,150 --> 00:12:40,740
to account for global code coverage<font color="#E5E5E5"> so</font>

331
00:12:38,910 --> 00:12:43,079
we<font color="#CCCCCC"> show</font><font color="#E5E5E5"> that in the first instance</font><font color="#CCCCCC"> where</font>

332
00:12:40,740 --> 00:12:45,330
we<font color="#E5E5E5"> own for the single</font><font color="#CCCCCC"> application if we</font>

333
00:12:43,080 --> 00:12:46,980
use the<font color="#E5E5E5"> other</font><font color="#CCCCCC"> diversity as our guidance</font>

334
00:12:45,330 --> 00:12:49,290
we can<font color="#CCCCCC"> trigger six times more</font>

335
00:12:46,980 --> 00:12:51,150
discrepancies<font color="#E5E5E5"> whereas if we account for</font>

336
00:12:49,290 --> 00:12:53,279
global code coverage we still yield

337
00:12:51,150 --> 00:12:57,060
<font color="#CCCCCC">thirty percent</font><font color="#E5E5E5"> more discrepancies on the</font>

338
00:12:53,279 --> 00:12:58,589
same number<font color="#CCCCCC"> of trials so in the</font>

339
00:12:57,060 --> 00:13:00,510
following<font color="#E5E5E5"> I'm going to give you some</font>

340
00:12:58,589 --> 00:13:02,010
over here<font color="#CCCCCC"> some overview of the bugs that</font>

341
00:13:00,510 --> 00:13:04,050
<font color="#CCCCCC">have been</font><font color="#E5E5E5"> found by NASA</font>

342
00:13:02,010 --> 00:13:05,610
so these bugs<font color="#E5E5E5"> are disclosed to the</font>

343
00:13:04,050 --> 00:13:07,770
respective communities and<font color="#E5E5E5"> patched and</font>

344
00:13:05,610 --> 00:13:08,870
of course there<font color="#E5E5E5"> are many more bugs in</font>

345
00:13:07,770 --> 00:13:12,029
the paper

346
00:13:08,870 --> 00:13:12,990
so for these domains where we applied

347
00:13:12,029 --> 00:13:14,820
the<font color="#CCCCCC"> mezzanine</font>

348
00:13:12,990 --> 00:13:16,829
we<font color="#CCCCCC"> compared</font><font color="#E5E5E5"> the other cell libraries as</font>

349
00:13:14,820 --> 00:13:19,680
I mentioned and<font color="#CCCCCC"> also</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> PDF</font>

350
00:13:16,829 --> 00:13:21,599
readers and we thought<font color="#E5E5E5"> okay let's try</font>

351
00:13:19,680 --> 00:13:24,359
out<font color="#CCCCCC"> different</font><font color="#E5E5E5"> file parsers</font><font color="#CCCCCC"> for instance</font>

352
00:13:21,600 --> 00:13:26,610
what<font color="#E5E5E5"> if we tried clamavi become a v8</font>

353
00:13:24,360 --> 00:13:30,060
virus which is<font color="#E5E5E5"> open source with some</font>

354
00:13:26,610 --> 00:13:33,600
other very<font color="#CCCCCC"> well</font><font color="#E5E5E5"> used file parsers like</font>

355
00:13:30,060 --> 00:13:36,359
the<font color="#E5E5E5"> eggsy library so the first part is</font><font color="#CCCCCC"> a</font>

356
00:13:33,600 --> 00:13:38,370
climbing the evasion<font color="#E5E5E5"> bug which</font><font color="#CCCCCC"> have to</font>

357
00:13:36,360 --> 00:13:40,649
do with<font color="#CCCCCC"> the way clamavi</font><font color="#E5E5E5"> parts his elf</font>

358
00:13:38,370 --> 00:13:43,529
binaries<font color="#CCCCCC"> so if you have a malicious</font><font color="#E5E5E5"> elf</font>

359
00:13:40,649 --> 00:13:45,930
binary<font color="#E5E5E5"> what</font><font color="#CCCCCC"> climbing he does is it comes</font>

360
00:13:43,529 --> 00:13:48,149
<font color="#E5E5E5">with</font><font color="#CCCCCC"> fists bite to see with the</font><font color="#E5E5E5"> 32-bit</font>

361
00:13:45,930 --> 00:13:50,579
or 64-bit binary but if you could<font color="#E5E5E5"> wrap</font>

362
00:13:48,149 --> 00:13:52,980
<font color="#CCCCCC">this</font><font color="#E5E5E5"> byte clamavi won't even</font><font color="#CCCCCC"> scan the</font>

363
00:13:50,579 --> 00:13:54,779
file<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> other hand if you try with</font>

364
00:13:52,980 --> 00:13:57,060
<font color="#CCCCCC">build appeals this</font><font color="#E5E5E5"> this gets loaded</font>

365
00:13:54,779 --> 00:13:59,069
properly<font color="#E5E5E5"> and we found out that inside</font>

366
00:13:57,060 --> 00:14:00,930
the loader<font color="#E5E5E5"> what happens is that the</font>

367
00:13:59,069 --> 00:14:02,969
loader<font color="#E5E5E5"> cares</font><font color="#CCCCCC"> only if the binary</font><font color="#E5E5E5"> is</font>

368
00:14:00,930 --> 00:14:06,508
<font color="#E5E5E5">executable or not and the whole header</font>

369
00:14:02,970 --> 00:14:08,100
gets<font color="#CCCCCC"> type</font><font color="#E5E5E5"> casted so basically as</font><font color="#CCCCCC"> far as</font>

370
00:14:06,509 --> 00:14:11,129
the<font color="#CCCCCC"> the loader is concerned</font><font color="#E5E5E5"> this binary</font>

371
00:14:08,100 --> 00:14:14,009
can run without any<font color="#E5E5E5"> issues so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

372
00:14:11,129 --> 00:14:16,379
get a virus and just corrupted by it and

373
00:14:14,009 --> 00:14:21,660
now you<font color="#E5E5E5"> can have this a bypassing</font>

374
00:14:16,379 --> 00:14:24,060
<font color="#CCCCCC">clamavi and another bug which is found</font>

375
00:14:21,660 --> 00:14:27,689
by<font color="#CCCCCC"> netting</font><font color="#E5E5E5"> them I can present</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> here is</font>

376
00:14:24,060 --> 00:14:30,119
a time confusion bug in Libra so so

377
00:14:27,689 --> 00:14:31,829
essentially for<font color="#E5E5E5"> those of you who are</font>

378
00:14:30,120 --> 00:14:34,519
familiar with<font color="#CCCCCC"> the time</font><font color="#E5E5E5"> for mods in</font>

379
00:14:31,829 --> 00:14:37,199
certificates<font color="#E5E5E5"> these can have two main</font>

380
00:14:34,519 --> 00:14:40,319
formats one is the<font color="#E5E5E5"> UTC time and the GMT</font>

381
00:14:37,199 --> 00:14:42,329
<font color="#CCCCCC">time and each of these have a</font><font color="#E5E5E5"> different</font>

382
00:14:40,319 --> 00:14:46,410
length<font color="#E5E5E5"> so essentially what happens</font>

383
00:14:42,329 --> 00:14:49,859
<font color="#CCCCCC">Labour's excel is it ignores the</font><font color="#E5E5E5"> actual</font>

384
00:14:46,410 --> 00:14:51,529
time that time from<font color="#E5E5E5"> our tag and it only</font>

385
00:14:49,860 --> 00:14:54,810
looked at<font color="#CCCCCC"> the</font><font color="#E5E5E5"> length to determine how</font>

386
00:14:51,529 --> 00:14:56,970
what the date is<font color="#CCCCCC"> so essentially if you</font>

387
00:14:54,810 --> 00:14:59,279
could fool if you<font color="#CCCCCC"> could provide the</font>

388
00:14:56,970 --> 00:15:01,529
proper tag and a different length you

389
00:14:59,279 --> 00:15:04,230
could<font color="#E5E5E5"> treat a breast cell as if a</font>

390
00:15:01,529 --> 00:15:06,930
certificate<font color="#CCCCCC"> that was generated</font><font color="#E5E5E5"> in the</font>

391
00:15:04,230 --> 00:15:08,639
past is generated in the<font color="#CCCCCC"> future so it</font>

392
00:15:06,930 --> 00:15:11,880
would reject<font color="#E5E5E5"> the certificate of being</font>

393
00:15:08,639 --> 00:15:16,949
<font color="#E5E5E5">invalid because it</font><font color="#CCCCCC"> would see a date in</font>

394
00:15:11,880 --> 00:15:19,439
the<font color="#E5E5E5"> future for the issue date so to give</font>

395
00:15:16,949 --> 00:15:20,880
you some main takeaway conclusions what

396
00:15:19,439 --> 00:15:24,480
we really want to show here<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that a</font>

397
00:15:20,880 --> 00:15:26,970
differential diversity is really<font color="#CCCCCC"> a good</font>

398
00:15:24,480 --> 00:15:28,740
way to guide<font color="#CCCCCC"> into generation for</font>

399
00:15:26,970 --> 00:15:30,839
differential testing and<font color="#CCCCCC"> outperforms</font>

400
00:15:28,740 --> 00:15:34,199
code coverage and we also provide the

401
00:15:30,839 --> 00:15:36,360
<font color="#CCCCCC">measure</font><font color="#E5E5E5"> or the framework that we wrote</font>

402
00:15:34,199 --> 00:15:38,008
which is open source<font color="#CCCCCC"> Ananda term so</font>

403
00:15:36,360 --> 00:15:42,059
you're all welcome<font color="#CCCCCC"> to try it out and</font>

404
00:15:38,009 --> 00:15:42,660
<font color="#E5E5E5">cause your programs and essentially if</font>

405
00:15:42,059 --> 00:15:45,480
you

406
00:15:42,660 --> 00:15:47,610
have the<font color="#E5E5E5"> ability</font><font color="#CCCCCC"> to perform differential</font>

407
00:15:45,480 --> 00:15:50,279
fuzzing<font color="#E5E5E5"> so if you are</font><font color="#CCCCCC"> developing an SSL</font>

408
00:15:47,610 --> 00:15:52,290
<font color="#CCCCCC">rat library there</font><font color="#E5E5E5"> is no reason not to</font>

409
00:15:50,279 --> 00:15:54,990
also<font color="#E5E5E5"> perform a differential testing</font>

410
00:15:52,290 --> 00:15:57,000
<font color="#E5E5E5">rather than simply filing a single</font>

411
00:15:54,990 --> 00:15:59,250
application<font color="#E5E5E5"> because you</font><font color="#CCCCCC"> can catch all</font>

412
00:15:57,000 --> 00:16:00,089
<font color="#E5E5E5">the semantic bugs together with a</font><font color="#CCCCCC"> crash</font>

413
00:15:59,250 --> 00:16:03,690
<font color="#CCCCCC">inducing bugs</font>

414
00:16:00,089 --> 00:16:09,829
so without I'm happy to take<font color="#E5E5E5"> questions</font>

415
00:16:03,690 --> 00:16:14,009
[Applause]

416
00:16:09,829 --> 00:16:15,329
I'm Alex<font color="#E5E5E5"> gentlemen welcome so with the</font>

417
00:16:14,009 --> 00:16:17,040
differential<font color="#E5E5E5"> testing you kind of you get</font>

418
00:16:15,329 --> 00:16:19,349
this distance metric between<font color="#E5E5E5"> different</font>

419
00:16:17,040 --> 00:16:22,110
implementations have<font color="#CCCCCC"> you thought about</font>

420
00:16:19,350 --> 00:16:24,209
<font color="#E5E5E5">looking at how that distance changes</font>

421
00:16:22,110 --> 00:16:26,699
<font color="#E5E5E5">over time so</font><font color="#CCCCCC"> for example of all</font><font color="#E5E5E5"> of these</font>

422
00:16:24,209 --> 00:16:28,888
SSL libraries the<font color="#CCCCCC"> days start</font><font color="#E5E5E5"> out to be</font>

423
00:16:26,699 --> 00:16:31,229
mostly<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> feature set</font>

424
00:16:28,889 --> 00:16:33,209
grew they diverged<font color="#CCCCCC"> or did they start out</font>

425
00:16:31,230 --> 00:16:35,430
<font color="#E5E5E5">very far apart and then as they became</font>

426
00:16:33,209 --> 00:16:38,969
more<font color="#CCCCCC"> stable</font><font color="#E5E5E5"> and as the</font><font color="#CCCCCC"> differences</font>

427
00:16:35,430 --> 00:16:41,459
<font color="#E5E5E5">shrunk so it really depends with what</font>

428
00:16:38,970 --> 00:16:45,509
you choose<font color="#CCCCCC"> to formulate essentially</font>

429
00:16:41,459 --> 00:16:47,189
right so here<font color="#E5E5E5"> you will again hit a</font>

430
00:16:45,509 --> 00:16:50,670
plateau at some point in a similar

431
00:16:47,189 --> 00:16:54,839
manner that standalone application

432
00:16:50,670 --> 00:16:56,490
<font color="#CCCCCC">father's hit a plateau but you there is</font>

433
00:16:54,839 --> 00:16:57,689
a trade<font color="#CCCCCC"> of depending on</font><font color="#E5E5E5"> what you</font><font color="#CCCCCC"> choose</font>

434
00:16:56,490 --> 00:17:00,329
to formulate on the differential

435
00:16:57,689 --> 00:17:03,199
<font color="#E5E5E5">diversity if it's going to be total edge</font>

436
00:17:00,329 --> 00:17:05,490
coverage versus unique edges versus just

437
00:17:03,199 --> 00:17:07,949
different exception messages so<font color="#CCCCCC"> you can</font>

438
00:17:05,490 --> 00:17:10,230
do<font color="#CCCCCC"> different types of fine-grain</font>

439
00:17:07,949 --> 00:17:14,220
<font color="#E5E5E5">tracking or coarse-grained tracking so</font>

440
00:17:10,230 --> 00:17:16,439
we explore<font color="#CCCCCC"> some of these trade-offs as</font>

441
00:17:14,220 --> 00:17:18,720
well in the paper<font color="#E5E5E5"> so it really depends</font>

442
00:17:16,439 --> 00:17:22,620
<font color="#CCCCCC">on what exactly we choose to do but you</font>

443
00:17:18,720 --> 00:17:28,130
will heat the total at some point<font color="#E5E5E5"> okay</font>

444
00:17:22,619 --> 00:17:28,129
<font color="#CCCCCC">what will</font><font color="#E5E5E5"> falsify right also up</font><font color="#CCCCCC"> offline</font>

445
00:17:28,190 --> 00:17:32,680
<font color="#E5E5E5">any other questions all right let's</font>

446
00:17:31,650 --> 00:17:39,309
thank the speaker

447
00:17:32,680 --> 00:17:39,309
[Applause]

