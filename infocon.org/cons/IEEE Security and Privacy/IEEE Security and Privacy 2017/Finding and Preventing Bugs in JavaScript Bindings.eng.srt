1
00:00:03,440 --> 00:00:09,850
<font color="#E5E5E5">hi so we're going to be</font><font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about</font>

2
00:00:06,890 --> 00:00:13,039
two<font color="#CCCCCC"> things</font><font color="#E5E5E5"> today</font><font color="#CCCCCC"> and the first</font><font color="#E5E5E5"> is</font>

3
00:00:09,850 --> 00:00:16,490
<font color="#E5E5E5">programs that look for bugs in the glue</font>

4
00:00:13,039 --> 00:00:18,430
code between<font color="#E5E5E5"> C++ and JavaScript and that</font>

5
00:00:16,490 --> 00:00:21,589
glue code is<font color="#E5E5E5"> called binding code and</font>

6
00:00:18,430 --> 00:00:23,960
second<font color="#E5E5E5"> we found a lot of binding errors</font>

7
00:00:21,590 --> 00:00:26,600
happen for the same reasons<font color="#E5E5E5"> again and</font>

8
00:00:23,960 --> 00:00:28,610
<font color="#E5E5E5">again so we made a new binding layer</font><font color="#CCCCCC"> API</font>

9
00:00:26,600 --> 00:00:30,890
that prevents these errors by

10
00:00:28,610 --> 00:00:32,539
construction<font color="#E5E5E5"> but before I can talk about</font>

11
00:00:30,890 --> 00:00:35,270
<font color="#E5E5E5">that I have to</font><font color="#CCCCCC"> talk a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> about</font>

12
00:00:32,539 --> 00:00:38,210
<font color="#E5E5E5">binding code and as a consequence about</font>

13
00:00:35,270 --> 00:00:40,249
JavaScript<font color="#E5E5E5"> so okay let's say we</font><font color="#CCCCCC"> have a</font>

14
00:00:38,210 --> 00:00:42,589
<font color="#E5E5E5">JavaScript</font><font color="#CCCCCC"> interpreter it implements the</font>

15
00:00:40,249 --> 00:00:44,719
JavaScript language<font color="#E5E5E5"> and we're trying to</font>

16
00:00:42,589 --> 00:00:47,539
write<font color="#E5E5E5"> a piece of</font><font color="#CCCCCC"> j/s</font><font color="#E5E5E5"> that connects to</font>

17
00:00:44,719 --> 00:00:49,999
the network<font color="#CCCCCC"> but we're</font><font color="#E5E5E5"> sort of stuck in</font>

18
00:00:47,539 --> 00:00:52,100
<font color="#E5E5E5">interpreter land right so we need to</font>

19
00:00:49,999 --> 00:00:54,199
<font color="#E5E5E5">somehow be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to reach</font><font color="#CCCCCC"> outside of that</font>

20
00:00:52,100 --> 00:00:56,479
in order<font color="#CCCCCC"> to establish this connection</font>

21
00:00:54,199 --> 00:00:58,760
and that's<font color="#E5E5E5"> where binding code comes in</font>

22
00:00:56,479 --> 00:01:02,359
it's written in a lower level<font color="#CCCCCC"> language</font>

23
00:00:58,760 --> 00:01:04,580
like<font color="#E5E5E5"> C or C++ so can open a network</font>

24
00:01:02,359 --> 00:01:07,910
socket<font color="#CCCCCC"> in the usual way</font><font color="#E5E5E5"> but we're able</font>

25
00:01:04,580 --> 00:01:10,970
<font color="#E5E5E5">to call it directly from JavaScript via</font>

26
00:01:07,910 --> 00:01:13,160
a normal JavaScript<font color="#E5E5E5"> function call</font><font color="#CCCCCC"> and so</font>

27
00:01:10,970 --> 00:01:15,170
that allows<font color="#CCCCCC"> us to do</font><font color="#E5E5E5"> everything from</font>

28
00:01:13,160 --> 00:01:17,630
open up this<font color="#E5E5E5"> network connection to open</font>

29
00:01:15,170 --> 00:01:20,810
a file<font color="#E5E5E5"> to invoke a function in a shared</font>

30
00:01:17,630 --> 00:01:23,300
library<font color="#CCCCCC"> and in fact binding code is</font>

31
00:01:20,810 --> 00:01:25,490
<font color="#E5E5E5">really pervasive because it's necessary</font>

32
00:01:23,300 --> 00:01:28,130
<font color="#CCCCCC">we need it anytime we have</font><font color="#E5E5E5"> to reach</font>

33
00:01:25,490 --> 00:01:30,380
outside of interpreter world and so

34
00:01:28,130 --> 00:01:33,470
<font color="#CCCCCC">JavaScript engines the pieces of code</font>

35
00:01:30,380 --> 00:01:35,360
<font color="#CCCCCC">that runs</font><font color="#E5E5E5"> JavaScript provide api's that</font>

36
00:01:33,470 --> 00:01:37,610
allow us to<font color="#CCCCCC"> write our own</font><font color="#E5E5E5"> binding code</font>

37
00:01:35,360 --> 00:01:40,850
and extend the JavaScript<font color="#CCCCCC"> environment</font>

38
00:01:37,610 --> 00:01:42,800
however<font color="#E5E5E5"> we want so this is what binding</font>

39
00:01:40,850 --> 00:01:45,020
code<font color="#E5E5E5"> looks like at a high level</font><font color="#CCCCCC"> we have</font>

40
00:01:42,800 --> 00:01:47,570
a JavaScript<font color="#CCCCCC"> application at the top and</font>

41
00:01:45,020 --> 00:01:50,270
it's able to call<font color="#CCCCCC"> into the C++ binding</font>

42
00:01:47,570 --> 00:01:53,210
layer and that binding code uses a

43
00:01:50,270 --> 00:01:55,670
<font color="#E5E5E5">JavaScript engine like v8 to manipulate</font>

44
00:01:53,210 --> 00:01:59,419
JavaScript values or expose whole

45
00:01:55,670 --> 00:02:01,159
functions<font color="#E5E5E5"> back to JavaScript so let's</font>

46
00:01:59,420 --> 00:02:03,140
say we want<font color="#CCCCCC"> to write a string to a file</font>

47
00:02:01,159 --> 00:02:04,730
but<font color="#E5E5E5"> we want to do that from JavaScript</font>

48
00:02:03,140 --> 00:02:07,460
and again we're stuck<font color="#CCCCCC"> in interpreter the</font>

49
00:02:04,730 --> 00:02:10,369
land can't do it but luckily we can from

50
00:02:07,460 --> 00:02:12,680
C++<font color="#CCCCCC"> we have this write file function and</font>

51
00:02:10,369 --> 00:02:13,890
it writes a string to a file<font color="#CCCCCC"> just</font><font color="#E5E5E5"> as</font>

52
00:02:12,680 --> 00:02:16,050
you'd expect

53
00:02:13,890 --> 00:02:18,569
and<font color="#E5E5E5"> conceptually what we want to do is</font>

54
00:02:16,050 --> 00:02:21,630
turn<font color="#CCCCCC"> that into a function that accepts</font>

55
00:02:18,569 --> 00:02:23,269
<font color="#E5E5E5">JavaScript arguments instead</font><font color="#CCCCCC"> so we're</font>

56
00:02:21,630 --> 00:02:26,100
going to write some<font color="#E5E5E5"> binding code and</font>

57
00:02:23,270 --> 00:02:29,280
this binding<font color="#E5E5E5"> code can accept JavaScript</font>

58
00:02:26,100 --> 00:02:32,100
arguments using<font color="#E5E5E5"> the general like</font>

59
00:02:29,280 --> 00:02:34,350
<font color="#E5E5E5">JavaScript argument type and then it's</font>

60
00:02:32,100 --> 00:02:37,049
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> convert these arguments</font><font color="#E5E5E5"> to C++</font>

61
00:02:34,350 --> 00:02:39,750
<font color="#CCCCCC">strings</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> the add string function</font>

62
00:02:37,050 --> 00:02:42,090
this also<font color="#E5E5E5"> comes with v8 then we have</font>

63
00:02:39,750 --> 00:02:44,160
these<font color="#CCCCCC"> normal C++ strings string and</font>

64
00:02:42,090 --> 00:02:46,440
<font color="#CCCCCC">filename</font><font color="#E5E5E5"> and we can call write file as</font>

65
00:02:44,160 --> 00:02:49,350
normal<font color="#CCCCCC"> so you can</font><font color="#E5E5E5"> sort of think of</font>

66
00:02:46,440 --> 00:02:51,450
binding code as<font color="#E5E5E5"> JavaScript written with</font>

67
00:02:49,350 --> 00:02:54,900
C++<font color="#E5E5E5"> api's right because it</font><font color="#CCCCCC"> has to</font>

68
00:02:51,450 --> 00:02:56,970
manipulate these<font color="#E5E5E5"> JavaScript values so we</font>

69
00:02:54,900 --> 00:02:59,070
have<font color="#E5E5E5"> our write file function but we</font>

70
00:02:56,970 --> 00:03:00,720
<font color="#E5E5E5">still can't get to it</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> we</font>

71
00:02:59,070 --> 00:03:03,000
have to expose it to<font color="#E5E5E5"> the JavaScript</font>

72
00:03:00,720 --> 00:03:06,120
layer and that's<font color="#E5E5E5"> a matter of just</font><font color="#CCCCCC"> making</font>

73
00:03:03,000 --> 00:03:08,040
one<font color="#CCCCCC"> more</font><font color="#E5E5E5"> function call again using v8</font>

74
00:03:06,120 --> 00:03:10,260
and now our<font color="#CCCCCC"> function is exposed to</font>

75
00:03:08,040 --> 00:03:12,810
<font color="#E5E5E5">JavaScript we can call it just like a</font>

76
00:03:10,260 --> 00:03:14,940
<font color="#E5E5E5">normal JavaScript</font><font color="#CCCCCC"> function and this</font>

77
00:03:12,810 --> 00:03:16,800
works with the file system<font color="#CCCCCC"> but it</font><font color="#E5E5E5"> also</font>

78
00:03:14,940 --> 00:03:18,600
<font color="#E5E5E5">works in the browser</font><font color="#CCCCCC"> we need it in</font><font color="#E5E5E5"> the</font>

79
00:03:16,800 --> 00:03:20,610
browser if we want to<font color="#E5E5E5"> move a page</font>

80
00:03:18,600 --> 00:03:22,620
element<font color="#E5E5E5"> if we want to connect to a</font>

81
00:03:20,610 --> 00:03:25,920
server<font color="#CCCCCC"> all of this is</font><font color="#E5E5E5"> going to require</font>

82
00:03:22,620 --> 00:03:27,750
<font color="#CCCCCC">binding code</font><font color="#E5E5E5"> so in the browser</font><font color="#CCCCCC"> what that</font>

83
00:03:25,920 --> 00:03:31,859
means is we have<font color="#E5E5E5"> our web page JavaScript</font>

84
00:03:27,750 --> 00:03:33,900
that's talking<font color="#CCCCCC"> to our browser C++</font>

85
00:03:31,860 --> 00:03:38,040
bindings<font color="#CCCCCC"> and that's on top of the</font>

86
00:03:33,900 --> 00:03:39,690
browser JavaScript runtime<font color="#CCCCCC"> ok now we</font><font color="#E5E5E5"> can</font>

87
00:03:38,040 --> 00:03:41,459
work with<font color="#E5E5E5"> JavaScript with the file</font>

88
00:03:39,690 --> 00:03:43,739
system<font color="#CCCCCC"> and in the</font><font color="#E5E5E5"> browser that's all</font>

89
00:03:41,459 --> 00:03:47,120
great<font color="#E5E5E5"> but of course as always there</font><font color="#CCCCCC"> is a</font>

90
00:03:43,739 --> 00:03:49,500
problem and that<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> binding code</font>

91
00:03:47,120 --> 00:03:51,540
reintroduces whole classes of<font color="#E5E5E5"> errors</font>

92
00:03:49,500 --> 00:03:54,570
<font color="#E5E5E5">that the JavaScript language should</font>

93
00:03:51,540 --> 00:03:57,030
prevent by<font color="#E5E5E5"> construction so for</font><font color="#CCCCCC"> example</font>

94
00:03:54,570 --> 00:03:59,340
<font color="#E5E5E5">javascript is a crash safe</font><font color="#CCCCCC"> language all</font>

95
00:03:57,030 --> 00:04:02,130
errors should manifest<font color="#E5E5E5"> as catchable</font>

96
00:03:59,340 --> 00:04:05,070
<font color="#E5E5E5">exceptions right so</font><font color="#CCCCCC"> javascript will not</font>

97
00:04:02,130 --> 00:04:07,380
hard crash but of course we know<font color="#E5E5E5"> C++</font><font color="#CCCCCC"> is</font>

98
00:04:05,070 --> 00:04:10,230
happy to hard crash all the<font color="#CCCCCC"> time so</font>

99
00:04:07,380 --> 00:04:12,890
these<font color="#CCCCCC"> C++ bindings can reintroduce</font><font color="#E5E5E5"> hard</font>

100
00:04:10,230 --> 00:04:15,600
crashes to<font color="#E5E5E5"> the JavaScript language and</font>

101
00:04:12,890 --> 00:04:17,099
<font color="#CCCCCC">at a high level</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is how</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

102
00:04:15,600 --> 00:04:19,890
going to<font color="#CCCCCC"> work</font><font color="#E5E5E5"> so if I'm an evil ad</font>

103
00:04:17,100 --> 00:04:23,070
developer and I'm able<font color="#E5E5E5"> to identify a</font>

104
00:04:19,890 --> 00:04:26,219
line of code in those C++ bindings in

105
00:04:23,070 --> 00:04:27,870
the browser<font color="#E5E5E5"> if I can figure out</font>

106
00:04:26,220 --> 00:04:30,150
the trigger<font color="#CCCCCC"> that from JavaScript I've</font>

107
00:04:27,870 --> 00:04:32,550
introduced a hard crash from JavaScript

108
00:04:30,150 --> 00:04:35,820
<font color="#E5E5E5">remember that this is possible because</font>

109
00:04:32,550 --> 00:04:39,210
<font color="#CCCCCC">binary code can accept user JavaScript</font>

110
00:04:35,820 --> 00:04:41,130
arguments so<font color="#CCCCCC"> okay we've identified our</font>

111
00:04:39,210 --> 00:04:43,979
<font color="#E5E5E5">bug we're able to hit it</font><font color="#CCCCCC"> from JavaScript</font>

112
00:04:41,130 --> 00:04:46,530
<font color="#CCCCCC">and now we've reintroduced the crash to</font>

113
00:04:43,980 --> 00:04:49,650
JavaScript<font color="#E5E5E5"> and this doesn't just</font><font color="#CCCCCC"> work</font>

114
00:04:46,530 --> 00:04:51,840
with some you<font color="#E5E5E5"> know normal</font><font color="#CCCCCC"> C++ there's</font>

115
00:04:49,650 --> 00:04:53,880
like seg<font color="#E5E5E5"> faults binding code since it</font>

116
00:04:51,840 --> 00:04:56,400
has<font color="#E5E5E5"> to manipulate</font><font color="#CCCCCC"> JavaScript objects</font>

117
00:04:53,880 --> 00:04:58,680
<font color="#E5E5E5">actually has many more ways of going</font>

118
00:04:56,400 --> 00:05:00,570
wrong and crashing and<font color="#E5E5E5"> so this evil ad</font>

119
00:04:58,680 --> 00:05:03,600
has all sorts<font color="#E5E5E5"> of opportunities</font><font color="#CCCCCC"> to just</font>

120
00:05:00,570 --> 00:05:06,060
crash your<font color="#E5E5E5"> tab it doesn't just happen</font>

121
00:05:03,600 --> 00:05:08,520
with crash safety<font color="#E5E5E5"> either bindings are</font>

122
00:05:06,060 --> 00:05:10,950
able to<font color="#E5E5E5"> violate all sorts of JavaScript</font>

123
00:05:08,520 --> 00:05:12,930
<font color="#E5E5E5">fundamental safety guarantees so</font>

124
00:05:10,950 --> 00:05:15,090
javascript is a memory safe<font color="#CCCCCC"> language</font><font color="#E5E5E5"> for</font>

125
00:05:12,930 --> 00:05:18,090
example<font color="#CCCCCC"> you shouldn't be able to</font><font color="#E5E5E5"> touch</font>

126
00:05:15,090 --> 00:05:20,159
on initialize memory<font color="#CCCCCC"> C++</font><font color="#E5E5E5"> is not at all</font>

127
00:05:18,090 --> 00:05:22,140
<font color="#E5E5E5">you can have a you set free bug you can</font>

128
00:05:20,160 --> 00:05:24,210
<font color="#CCCCCC">have out-of-bounds reads or writes</font><font color="#E5E5E5"> and</font>

129
00:05:22,140 --> 00:05:26,130
if we can find<font color="#E5E5E5"> some way of turning those</font>

130
00:05:24,210 --> 00:05:29,070
from<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> we've reintroduced</font>

131
00:05:26,130 --> 00:05:30,240
<font color="#CCCCCC">memory errors to JavaScript</font><font color="#E5E5E5"> this can</font>

132
00:05:29,070 --> 00:05:32,390
allow<font color="#CCCCCC"> us</font><font color="#E5E5E5"> to do all</font><font color="#CCCCCC"> sorts of bad things</font>

133
00:05:30,240 --> 00:05:35,040
<font color="#E5E5E5">like</font><font color="#CCCCCC"> insensitive data</font>

134
00:05:32,390 --> 00:05:36,870
similarly<font color="#CCCCCC"> javascript has</font><font color="#E5E5E5"> some notion</font><font color="#CCCCCC"> of</font>

135
00:05:35,040 --> 00:05:41,250
type<font color="#E5E5E5"> safety and we can violate that</font>

136
00:05:36,870 --> 00:05:43,860
using bugs<font color="#E5E5E5"> in the binding layer what</font>

137
00:05:41,250 --> 00:05:46,650
this means is that bindings to be<font color="#E5E5E5"> secure</font>

138
00:05:43,860 --> 00:05:50,070
must actually<font color="#E5E5E5"> preserve all of JavaScript</font>

139
00:05:46,650 --> 00:05:52,289
guarantees but in C++<font color="#E5E5E5"> so that can boil</font>

140
00:05:50,070 --> 00:05:54,120
down<font color="#CCCCCC"> to</font><font color="#E5E5E5"> essentially writing perfectly</font>

141
00:05:52,290 --> 00:05:57,030
memory safety plus plus code<font color="#E5E5E5"> all the</font>

142
00:05:54,120 --> 00:05:58,590
<font color="#CCCCCC">time and if that</font><font color="#E5E5E5"> were really</font><font color="#CCCCCC"> easy</font><font color="#E5E5E5"> maybe</font>

143
00:05:57,030 --> 00:06:01,380
we wouldn't need<font color="#E5E5E5"> a higher</font><font color="#CCCCCC"> level language</font>

144
00:05:58,590 --> 00:06:03,359
<font color="#CCCCCC">like</font><font color="#E5E5E5"> JavaScript anyway so what we want</font>

145
00:06:01,380 --> 00:06:05,900
<font color="#E5E5E5">to do is help binding layer developers</font>

146
00:06:03,360 --> 00:06:07,830
by finding and preventing bugs<font color="#CCCCCC"> in</font>

147
00:06:05,900 --> 00:06:09,599
JavaScript bindings<font color="#E5E5E5"> in for different</font>

148
00:06:07,830 --> 00:06:11,340
<font color="#E5E5E5">runtime systems the Chrome</font><font color="#CCCCCC"> extension</font>

149
00:06:09,600 --> 00:06:13,800
system<font color="#CCCCCC"> link Chrome's rendering engine</font>

150
00:06:11,340 --> 00:06:16,919
<font color="#E5E5E5">PDF</font><font color="#CCCCCC"> VM and</font><font color="#E5E5E5"> node this talk I'm going to</font>

151
00:06:13,800 --> 00:06:18,810
condense it<font color="#E5E5E5"> just down to two nodes which</font>

152
00:06:16,919 --> 00:06:21,030
is a<font color="#E5E5E5"> platform</font><font color="#CCCCCC"> that allows you to run</font>

153
00:06:18,810 --> 00:06:22,440
JavaScript<font color="#E5E5E5"> outside of the browser so</font>

154
00:06:21,030 --> 00:06:25,979
maybe on the command line<font color="#CCCCCC"> or on the</font>

155
00:06:22,440 --> 00:06:28,050
<font color="#E5E5E5">server side and PDF am which is Chrome's</font>

156
00:06:25,979 --> 00:06:30,599
<font color="#E5E5E5">in browser PDF rendering engine and</font>

157
00:06:28,050 --> 00:06:33,810
remember<font color="#CCCCCC"> that PDFs</font><font color="#E5E5E5"> has to be able to</font>

158
00:06:30,600 --> 00:06:36,419
embed JavaScript so PDF<font color="#E5E5E5"> iam must run</font>

159
00:06:33,810 --> 00:06:38,700
<font color="#E5E5E5">JavaScript but it also extends</font><font color="#CCCCCC"> the</font>

160
00:06:36,419 --> 00:06:39,990
JavaScript environment<font color="#E5E5E5"> with new</font><font color="#CCCCCC"> PDFs</font>

161
00:06:38,700 --> 00:06:43,050
related<font color="#CCCCCC"> API</font>

162
00:06:39,990 --> 00:06:45,569
so that can get<font color="#E5E5E5"> a bit complicated</font><font color="#CCCCCC"> all</font>

163
00:06:43,050 --> 00:06:48,330
<font color="#E5E5E5">right</font><font color="#CCCCCC"> so we created</font><font color="#E5E5E5"> some static checkers</font>

164
00:06:45,569 --> 00:06:51,690
<font color="#E5E5E5">that</font><font color="#CCCCCC"> finds</font><font color="#E5E5E5"> bugs and JavaScript bindings</font>

165
00:06:48,330 --> 00:06:54,300
in these four<font color="#E5E5E5"> systems and the static</font>

166
00:06:51,690 --> 00:06:56,849
checkers<font color="#E5E5E5"> examine code looking for buggy</font>

167
00:06:54,300 --> 00:06:59,280
patterns and<font color="#E5E5E5"> that's in</font><font color="#CCCCCC"> contrast</font><font color="#E5E5E5"> ada</font>

168
00:06:56,849 --> 00:07:01,889
tools<font color="#E5E5E5"> that run code in order</font><font color="#CCCCCC"> to find</font>

169
00:06:59,280 --> 00:07:04,049
bugs<font color="#CCCCCC"> here's a general pipeline of a</font>

170
00:07:01,889 --> 00:07:06,210
static checker<font color="#E5E5E5"> we're going to parse a</font>

171
00:07:04,050 --> 00:07:08,550
binding layer function<font color="#E5E5E5"> get back some</font>

172
00:07:06,210 --> 00:07:10,318
program representation<font color="#E5E5E5"> our checkers are</font>

173
00:07:08,550 --> 00:07:12,770
going to attach to<font color="#CCCCCC"> that</font><font color="#E5E5E5"> representations</font>

174
00:07:10,319 --> 00:07:15,660
<font color="#E5E5E5">and report back bugs</font>

175
00:07:12,770 --> 00:07:18,030
<font color="#E5E5E5">our checkers</font><font color="#CCCCCC"> are system-specific as</font>

176
00:07:15,660 --> 00:07:20,039
opposed to language specific so a

177
00:07:18,030 --> 00:07:22,380
language specific status checker<font color="#E5E5E5"> for</font>

178
00:07:20,039 --> 00:07:24,810
example we'll<font color="#CCCCCC"> look for null pointer</font>

179
00:07:22,380 --> 00:07:26,419
dereferences in all<font color="#CCCCCC"> C source code</font><font color="#E5E5E5"> it</font>

180
00:07:24,810 --> 00:07:29,970
works on all<font color="#E5E5E5"> source code in the language</font>

181
00:07:26,419 --> 00:07:32,520
<font color="#E5E5E5">these checkers only work on PDF</font><font color="#CCCCCC"> VM or</font>

182
00:07:29,970 --> 00:07:34,590
node and they look for<font color="#E5E5E5"> patterns that</font>

183
00:07:32,520 --> 00:07:37,039
we've<font color="#E5E5E5"> identified in binding code that</font>

184
00:07:34,590 --> 00:07:39,239
lead<font color="#CCCCCC"> to violations of JavaScript safety</font>

185
00:07:37,039 --> 00:07:41,849
<font color="#E5E5E5">we were checkers for five different</font>

186
00:07:39,240 --> 00:07:44,699
<font color="#E5E5E5">kinds of bugs and we validated these</font>

187
00:07:41,849 --> 00:07:46,800
bugs<font color="#E5E5E5"> by writing</font><font color="#CCCCCC"> 81</font><font color="#E5E5E5"> proof of concept</font>

188
00:07:44,699 --> 00:07:49,229
exploits<font color="#E5E5E5"> the most</font><font color="#CCCCCC"> disease were for hard</font>

189
00:07:46,800 --> 00:07:51,240
crashes in node but some of them<font color="#CCCCCC"> were</font>

190
00:07:49,229 --> 00:07:55,169
for more<font color="#E5E5E5"> serious like memory related</font>

191
00:07:51,240 --> 00:07:57,389
<font color="#E5E5E5">errors in PDF now what do these bugs</font>

192
00:07:55,169 --> 00:07:59,609
look<font color="#E5E5E5"> like so this is a buggy binding</font>

193
00:07:57,389 --> 00:08:01,110
layer<font color="#E5E5E5"> function and before I</font><font color="#CCCCCC"> can talk</font>

194
00:07:59,610 --> 00:08:03,810
<font color="#E5E5E5">about how it's broken I'm going to talk</font>

195
00:08:01,110 --> 00:08:06,060
a<font color="#E5E5E5"> little bit about what it does so this</font>

196
00:08:03,810 --> 00:08:08,460
<font color="#E5E5E5">fill function efficiently fills in a</font>

197
00:08:06,060 --> 00:08:10,949
buffer from its start index to an end

198
00:08:08,460 --> 00:08:14,340
<font color="#E5E5E5">index and since it's exposed binding</font>

199
00:08:10,949 --> 00:08:16,320
code we can call it from<font color="#E5E5E5"> JavaScript so</font>

200
00:08:14,340 --> 00:08:19,080
we can say fill and this will fill in

201
00:08:16,320 --> 00:08:22,620
<font color="#E5E5E5">our JavaScript buffer from index</font><font color="#CCCCCC"> 0 to</font>

202
00:08:19,080 --> 00:08:24,240
index 5 first<font color="#E5E5E5"> the sole function is going</font>

203
00:08:22,620 --> 00:08:26,430
<font color="#E5E5E5">to do a little bounce checking in</font>

204
00:08:24,240 --> 00:08:28,349
JavaScript<font color="#E5E5E5"> and then it's going to call</font>

205
00:08:26,430 --> 00:08:32,310
<font color="#CCCCCC">into the binding and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> bindings are</font>

206
00:08:28,349 --> 00:08:34,409
going to retrieve the<font color="#CCCCCC"> UN 32 value of the</font>

207
00:08:32,309 --> 00:08:37,949
start<font color="#CCCCCC"> index and then the unit 32 value</font>

208
00:08:34,409 --> 00:08:39,838
of the end index using the v8<font color="#CCCCCC"> API</font><font color="#E5E5E5"> then</font>

209
00:08:37,950 --> 00:08:44,370
it's going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> mend copied based on these</font>

210
00:08:39,839 --> 00:08:47,130
indices<font color="#CCCCCC"> to fill in that buffer there we</font>

211
00:08:44,370 --> 00:08:49,680
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> it's not copy so let's think about</font>

212
00:08:47,130 --> 00:08:53,130
how<font color="#E5E5E5"> this</font><font color="#CCCCCC"> can go wrong</font><font color="#E5E5E5"> we need to choose</font>

213
00:08:49,680 --> 00:08:55,739
some<font color="#E5E5E5"> or want to choose some from</font>

214
00:08:53,130 --> 00:08:58,620
you and some<font color="#CCCCCC"> to values such that we</font><font color="#E5E5E5"> pass</font>

215
00:08:55,740 --> 00:09:01,470
this<font color="#CCCCCC"> JavaScript balance check here but</font>

216
00:08:58,620 --> 00:09:03,540
we're still able to get malicious values

217
00:09:01,470 --> 00:09:06,300
here so<font color="#CCCCCC"> we can write outside</font><font color="#E5E5E5"> of the</font>

218
00:09:03,540 --> 00:09:08,430
bounds<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the buffer</font><font color="#E5E5E5"> to do that we got</font><font color="#CCCCCC"> a</font>

219
00:09:06,300 --> 00:09:10,680
<font color="#E5E5E5">look at you and 32 value this function</font>

220
00:09:08,430 --> 00:09:12,660
<font color="#CCCCCC">so this</font><font color="#E5E5E5"> is a v8 function and if you call</font>

221
00:09:10,680 --> 00:09:14,969
it on<font color="#CCCCCC"> a number it will</font><font color="#E5E5E5"> just return</font><font color="#CCCCCC"> that</font>

222
00:09:12,660 --> 00:09:17,160
number back<font color="#CCCCCC"> to you if you call it on</font><font color="#E5E5E5"> an</font>

223
00:09:14,970 --> 00:09:19,890
object though it does something<font color="#E5E5E5"> called</font>

224
00:09:17,160 --> 00:09:21,390
implicitly casting and so<font color="#E5E5E5"> normally it's</font>

225
00:09:19,890 --> 00:09:22,800
just<font color="#E5E5E5"> going to throw you back</font><font color="#CCCCCC"> zero and</font>

226
00:09:21,390 --> 00:09:25,470
say<font color="#E5E5E5"> okay I'm going to</font><font color="#CCCCCC"> cast</font><font color="#E5E5E5"> your object</font>

227
00:09:22,800 --> 00:09:28,319
to zero<font color="#E5E5E5"> that's its number value unless</font>

228
00:09:25,470 --> 00:09:30,120
<font color="#E5E5E5">in JavaScript you define this to</font>

229
00:09:28,320 --> 00:09:33,060
<font color="#CCCCCC">primitive function and the to primitive</font>

230
00:09:30,120 --> 00:09:35,310
function tells v8 how to implicitly cast

231
00:09:33,060 --> 00:09:38,310
this<font color="#CCCCCC"> object</font><font color="#E5E5E5"> so if you have two primitive</font>

232
00:09:35,310 --> 00:09:40,709
returns free<font color="#E5E5E5"> you</font><font color="#CCCCCC"> and 32 values going to</font>

233
00:09:38,310 --> 00:09:42,540
return three similar<font color="#E5E5E5"> with five or</font><font color="#CCCCCC"> you</font>

234
00:09:40,710 --> 00:09:44,820
can make<font color="#E5E5E5"> it return something different</font>

235
00:09:42,540 --> 00:09:47,579
every<font color="#CCCCCC"> time and that's what we're going</font>

236
00:09:44,820 --> 00:09:49,770
<font color="#E5E5E5">to do so the first</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> to primitive</font><font color="#CCCCCC"> is</font>

237
00:09:47,580 --> 00:09:52,950
called<font color="#CCCCCC"> and this javascript</font><font color="#E5E5E5"> bounce check</font>

238
00:09:49,770 --> 00:09:54,449
we're going to return a good value<font color="#E5E5E5"> we're</font>

239
00:09:52,950 --> 00:09:56,700
going to<font color="#E5E5E5"> return something in the bounds</font>

240
00:09:54,450 --> 00:09:58,410
of<font color="#E5E5E5"> the buffer the second time it's</font>

241
00:09:56,700 --> 00:10:00,270
called down here though<font color="#E5E5E5"> we're going</font><font color="#CCCCCC"> to</font>

242
00:09:58,410 --> 00:10:02,280
<font color="#E5E5E5">return an evil value something that's</font>

243
00:10:00,270 --> 00:10:04,170
outside<font color="#CCCCCC"> of the bounds of</font><font color="#E5E5E5"> the buffer so</font>

244
00:10:02,280 --> 00:10:07,770
<font color="#CCCCCC">that we can control</font><font color="#E5E5E5"> the start location</font>

245
00:10:04,170 --> 00:10:10,800
of<font color="#CCCCCC"> that right of that</font><font color="#E5E5E5"> mend copy and we</font>

246
00:10:07,770 --> 00:10:12,870
found this bug using a checker that

247
00:10:10,800 --> 00:10:15,780
looked for any place where user

248
00:10:12,870 --> 00:10:18,150
<font color="#CCCCCC">JavaScript can</font><font color="#E5E5E5"> affect a memory operation</font>

249
00:10:15,780 --> 00:10:20,189
like mem copy or a malloc and this

250
00:10:18,150 --> 00:10:22,020
checker walks through source code

251
00:10:20,190 --> 00:10:25,200
keeping track of<font color="#E5E5E5"> two pieces</font><font color="#CCCCCC"> of</font>

252
00:10:22,020 --> 00:10:27,840
<font color="#E5E5E5">information</font><font color="#CCCCCC"> it keeps</font><font color="#E5E5E5"> track of unchecked</font>

253
00:10:25,200 --> 00:10:30,210
<font color="#CCCCCC">types which are all incoming arguments</font>

254
00:10:27,840 --> 00:10:33,030
that have not yet<font color="#CCCCCC"> been explicitly type</font>

255
00:10:30,210 --> 00:10:34,350
checked<font color="#E5E5E5"> in the binding layer then it</font>

256
00:10:33,030 --> 00:10:35,790
<font color="#CCCCCC">keeps track of</font><font color="#E5E5E5"> something called</font>

257
00:10:34,350 --> 00:10:38,220
dangerous values and that's<font color="#E5E5E5"> a little</font>

258
00:10:35,790 --> 00:10:40,890
<font color="#CCCCCC">complicated but it's looking for</font><font color="#E5E5E5"> cases</font>

259
00:10:38,220 --> 00:10:43,110
where implicitly casting functions like

260
00:10:40,890 --> 00:10:45,630
<font color="#CCCCCC">us 32 are called</font>

261
00:10:43,110 --> 00:10:47,310
on variables that have not been type

262
00:10:45,630 --> 00:10:49,740
checks that<font color="#E5E5E5"> are in that</font><font color="#CCCCCC"> unchecked</font><font color="#E5E5E5"> type</font>

263
00:10:47,310 --> 00:10:51,839
set any times that's<font color="#E5E5E5"> assigned to a</font>

264
00:10:49,740 --> 00:10:53,520
<font color="#CCCCCC">variable</font><font color="#E5E5E5"> that's that variable goes into</font>

265
00:10:51,840 --> 00:10:54,570
dangerous values<font color="#E5E5E5"> so this becomes a</font>

266
00:10:53,520 --> 00:10:58,470
little<font color="#CCCCCC"> more</font><font color="#E5E5E5"> clear when</font><font color="#CCCCCC"> we walk through</font>

267
00:10:54,570 --> 00:11:00,090
<font color="#CCCCCC">it so first args</font><font color="#E5E5E5"> is the argument to fill</font>

268
00:10:58,470 --> 00:11:01,860
so we're<font color="#E5E5E5"> going to add it</font><font color="#CCCCCC"> to uncheck type</font>

269
00:11:00,090 --> 00:11:04,710
because it<font color="#E5E5E5"> hasn't yet been</font><font color="#CCCCCC"> explicitly</font>

270
00:11:01,860 --> 00:11:06,750
type checked when we get down here we

271
00:11:04,710 --> 00:11:08,850
<font color="#CCCCCC">see</font><font color="#E5E5E5"> that you in 32</font>

272
00:11:06,750 --> 00:11:11,730
implicitly casting function has<font color="#CCCCCC"> been</font>

273
00:11:08,850 --> 00:11:13,920
called on<font color="#CCCCCC"> argh fit - and artha</font><font color="#E5E5E5"> - has not</font>

274
00:11:11,730 --> 00:11:15,509
been<font color="#CCCCCC"> kite checked right so this could</font>

275
00:11:13,920 --> 00:11:18,149
potentially<font color="#CCCCCC"> call back into user</font>

276
00:11:15,509 --> 00:11:20,610
<font color="#E5E5E5">JavaScript allowing user JavaScript to</font>

277
00:11:18,149 --> 00:11:23,189
affect the<font color="#CCCCCC"> value of start</font><font color="#E5E5E5"> so we're going</font>

278
00:11:20,610 --> 00:11:26,009
to<font color="#E5E5E5"> add start</font><font color="#CCCCCC"> to dangerous values same</font>

279
00:11:23,189 --> 00:11:28,769
thing with end and then because start

280
00:11:26,009 --> 00:11:30,689
shows up in this<font color="#E5E5E5"> mend copy and in</font>

281
00:11:28,769 --> 00:11:33,569
dangerous values we're going to flag a

282
00:11:30,689 --> 00:11:36,800
bug in this<font color="#E5E5E5"> checker I think found five</font>

283
00:11:33,569 --> 00:11:39,300
members and<font color="#E5E5E5"> nodes and one false positive</font>

284
00:11:36,800 --> 00:11:41,430
so here's one more bug that we found

285
00:11:39,300 --> 00:11:43,769
this is a<font color="#E5E5E5"> used after freeing PDF iam and</font>

286
00:11:41,430 --> 00:11:48,359
this<font color="#CCCCCC"> function is just supposed</font><font color="#E5E5E5"> to rename</font>

287
00:11:43,769 --> 00:11:51,300
an annotation in a PDF so<font color="#E5E5E5"> VP is our user</font>

288
00:11:48,360 --> 00:11:53,910
<font color="#CCCCCC">JavaScript</font><font color="#E5E5E5"> new annotation names and</font><font color="#CCCCCC"> BA</font>

289
00:11:51,300 --> 00:11:57,329
<font color="#E5E5E5">an it just represents the annotation</font>

290
00:11:53,910 --> 00:11:57,930
<font color="#E5E5E5">field in the PDF</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> line here is</font><font color="#CCCCCC"> the</font>

291
00:11:57,329 --> 00:12:00,870
<font color="#E5E5E5">problem</font>

292
00:11:57,930 --> 00:12:03,779
it's supposed to be assigning<font color="#E5E5E5"> VP to be</font>

293
00:12:00,870 --> 00:12:05,519
the new annotation name but PDF<font color="#CCCCCC"> iam has</font>

294
00:12:03,779 --> 00:12:07,680
<font color="#E5E5E5">done overridden that right shifty</font>

295
00:12:05,519 --> 00:12:10,740
<font color="#CCCCCC">operator to be an</font><font color="#E5E5E5"> assignment operator</font>

296
00:12:07,680 --> 00:12:13,410
and to call<font color="#E5E5E5"> into v8 functions that up</font>

297
00:12:10,740 --> 00:12:15,720
call<font color="#E5E5E5"> in to use a</font><font color="#CCCCCC"> JavaScript so this line</font>

298
00:12:13,410 --> 00:12:18,959
here<font color="#E5E5E5"> up calls into user</font><font color="#CCCCCC"> JavaScript and</font>

299
00:12:15,720 --> 00:12:21,300
in user<font color="#E5E5E5"> JavaScript we can remove that</font>

300
00:12:18,959 --> 00:12:23,550
annotation field<font color="#E5E5E5"> just get rid of it from</font>

301
00:12:21,300 --> 00:12:26,670
the PDF<font color="#CCCCCC"> forced garbage collection</font><font color="#E5E5E5"> and</font>

302
00:12:23,550 --> 00:12:28,859
then on this line<font color="#CCCCCC"> here</font><font color="#E5E5E5"> be a and it no</font>

303
00:12:26,670 --> 00:12:33,000
<font color="#CCCCCC">longer exists</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> it was</font><font color="#E5E5E5"> garbage</font>

304
00:12:28,860 --> 00:12:34,410
collected during that up call so this

305
00:12:33,000 --> 00:12:36,209
previous bug and<font color="#E5E5E5"> another one were</font>

306
00:12:34,410 --> 00:12:37,589
<font color="#CCCCCC">bountied so</font><font color="#E5E5E5"> that's a sign</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> system</font>

307
00:12:36,209 --> 00:12:40,290
authors are taking these bugs that<font color="#E5E5E5"> we</font>

308
00:12:37,589 --> 00:12:42,300
somewhat seriously<font color="#E5E5E5"> on other</font><font color="#CCCCCC"> high-level</font>

309
00:12:40,290 --> 00:12:45,629
checker results we found<font color="#CCCCCC"> 81 confirmed</font>

310
00:12:42,300 --> 00:12:49,609
bugs this<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> breakdown</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> crash</font>

311
00:12:45,629 --> 00:12:53,309
<font color="#CCCCCC">most</font><font color="#E5E5E5"> of PDF games external api's and the</font>

312
00:12:49,610 --> 00:12:55,980
most node modules<font color="#CCCCCC"> like</font><font color="#E5E5E5"> exposed functions</font>

313
00:12:53,309 --> 00:12:58,319
and are all<font color="#E5E5E5"> of our node crashing</font>

314
00:12:55,980 --> 00:13:00,240
exploits work on node<font color="#CCCCCC"> Chalker</font><font color="#E5E5E5"> core which</font>

315
00:12:58,319 --> 00:13:03,180
is<font color="#E5E5E5"> a node version that uses</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> different</font>

316
00:13:00,240 --> 00:13:05,699
JavaScript<font color="#E5E5E5"> engine not v8 so that's a</font>

317
00:13:03,180 --> 00:13:07,709
sign that<font color="#CCCCCC"> people are misusing</font><font color="#E5E5E5"> different</font>

318
00:13:05,699 --> 00:13:11,339
<font color="#E5E5E5">JavaScript</font><font color="#CCCCCC"> engines</font><font color="#E5E5E5"> in very predictable</font>

319
00:13:07,709 --> 00:13:13,199
<font color="#CCCCCC">ways every time so now that we've talked</font>

320
00:13:11,339 --> 00:13:15,899
about some bugs we can talk about how to

321
00:13:13,199 --> 00:13:18,389
prevent<font color="#E5E5E5"> them we want an API</font><font color="#CCCCCC"> that forces</font>

322
00:13:15,899 --> 00:13:20,050
developers to handle<font color="#CCCCCC"> JavaScript related</font>

323
00:13:18,389 --> 00:13:22,480
errors at the<font color="#CCCCCC"> bye</font>

324
00:13:20,050 --> 00:13:24,640
<font color="#CCCCCC">lair so we won't have</font><font color="#E5E5E5"> any JavaScript</font>

325
00:13:22,480 --> 00:13:28,180
related hard crashes and<font color="#CCCCCC"> that should</font>

326
00:13:24,640 --> 00:13:30,850
preserve JavaScript<font color="#E5E5E5"> crash safety we want</font>

327
00:13:28,180 --> 00:13:32,620
the API to insert<font color="#E5E5E5"> type checking for</font><font color="#CCCCCC"> the</font>

328
00:13:30,850 --> 00:13:34,209
developer so they don't have to

329
00:13:32,620 --> 00:13:36,040
explicitly type check in the binding

330
00:13:34,209 --> 00:13:39,640
<font color="#E5E5E5">code and this should help preserve</font>

331
00:13:36,040 --> 00:13:41,469
<font color="#E5E5E5">JavaScript type safety finally we want</font>

332
00:13:39,640 --> 00:13:43,899
to<font color="#E5E5E5"> make it really</font><font color="#CCCCCC"> clear when functions</font>

333
00:13:41,470 --> 00:13:46,360
can up call<font color="#E5E5E5"> into user</font><font color="#CCCCCC"> javascript</font><font color="#E5E5E5"> so</font>

334
00:13:43,899 --> 00:13:48,399
remember that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> n32</font><font color="#E5E5E5"> value function it</font>

335
00:13:46,360 --> 00:13:50,920
was not clear<font color="#CCCCCC"> at all really</font><font color="#E5E5E5"> that that</font>

336
00:13:48,399 --> 00:13:52,740
could call back<font color="#E5E5E5"> into</font><font color="#CCCCCC"> javascript</font><font color="#E5E5E5"> nothing</font>

337
00:13:50,920 --> 00:13:55,660
<font color="#E5E5E5">about the name or how it's used</font>

338
00:13:52,740 --> 00:13:57,459
<font color="#E5E5E5">suggested that so we want to make it</font>

339
00:13:55,660 --> 00:13:59,829
really clear<font color="#CCCCCC"> when functions can do that</font>

340
00:13:57,459 --> 00:14:03,279
to try<font color="#E5E5E5"> and help developers write more</font>

341
00:13:59,829 --> 00:14:05,349
memory safe code so this is our rewrite

342
00:14:03,279 --> 00:14:07,450
<font color="#CCCCCC">of the fill function that buffer fill</font>

343
00:14:05,350 --> 00:14:10,329
functions from before<font color="#CCCCCC"> I'm not</font><font color="#E5E5E5"> going to</font>

344
00:14:07,450 --> 00:14:12,970
walk<font color="#CCCCCC"> through</font><font color="#E5E5E5"> how we did it but I'm just</font>

345
00:14:10,329 --> 00:14:15,489
<font color="#E5E5E5">throwing this up here to show you that</font>

346
00:14:12,970 --> 00:14:17,380
we were<font color="#E5E5E5"> hoping to make</font><font color="#CCCCCC"> C++ that looked a</font>

347
00:14:15,490 --> 00:14:18,820
<font color="#E5E5E5">little more</font><font color="#CCCCCC"> like JavaScript since what</font>

348
00:14:17,380 --> 00:14:22,930
we're essentially doing is<font color="#E5E5E5"> writing</font>

349
00:14:18,820 --> 00:14:25,029
<font color="#E5E5E5">JavaScript with C++ API we implemented</font>

350
00:14:22,930 --> 00:14:27,760
the a<font color="#E5E5E5"> P I as a backwards compatible</font>

351
00:14:25,029 --> 00:14:30,040
wrapper for v8<font color="#E5E5E5"> and we tested that</font>

352
00:14:27,760 --> 00:14:32,800
backwards compatibility<font color="#E5E5E5"> using nodes</font><font color="#CCCCCC"> own</font>

353
00:14:30,040 --> 00:14:34,870
version to version<font color="#E5E5E5"> regression testing so</font>

354
00:14:32,800 --> 00:14:37,899
that's a thousand tests and then the

355
00:14:34,870 --> 00:14:41,140
<font color="#E5E5E5">tech</font><font color="#CCCCCC"> suites of 74 popular</font><font color="#E5E5E5"> NPM modules or</font>

356
00:14:37,899 --> 00:14:43,420
packages we found a<font color="#CCCCCC"> worst case overhead</font>

357
00:14:41,140 --> 00:14:47,290
of about<font color="#CCCCCC"> 11% that the</font><font color="#E5E5E5"> average was pretty</font>

358
00:14:43,420 --> 00:14:49,510
negligible<font color="#CCCCCC"> and to test performance in a</font>

359
00:14:47,290 --> 00:14:51,969
<font color="#E5E5E5">real world setting we grabbed a popular</font>

360
00:14:49,510 --> 00:14:55,540
node package<font color="#E5E5E5"> ran its performance test</font>

361
00:14:51,970 --> 00:14:58,660
<font color="#CCCCCC">and then ran that with our new rewritten</font>

362
00:14:55,540 --> 00:15:02,829
<font color="#CCCCCC">node with our new API and we found</font><font color="#E5E5E5"> about</font>

363
00:14:58,660 --> 00:15:05,680
<font color="#E5E5E5">1% overhead so nothing disastrous</font><font color="#CCCCCC"> all</font>

364
00:15:02,829 --> 00:15:08,310
<font color="#CCCCCC">right so this is just the wrap-up</font><font color="#E5E5E5"> we</font>

365
00:15:05,680 --> 00:15:10,479
wrote static checkers they found<font color="#E5E5E5"> 81</font>

366
00:15:08,310 --> 00:15:13,239
exploitable bugs<font color="#E5E5E5"> in binding</font><font color="#CCCCCC"> codes</font>

367
00:15:10,480 --> 00:15:14,920
<font color="#CCCCCC">they're system-specific so therefore the</font>

368
00:15:13,240 --> 00:15:17,260
systems that we check and for binding

369
00:15:14,920 --> 00:15:18,880
<font color="#CCCCCC">codes specifically</font><font color="#E5E5E5"> and then we wrote an</font>

370
00:15:17,260 --> 00:15:20,890
<font color="#E5E5E5">API</font><font color="#CCCCCC"> that prevents these</font><font color="#E5E5E5"> bugs by</font>

371
00:15:18,880 --> 00:15:22,750
construction<font color="#E5E5E5"> it's backwards compatible</font>

372
00:15:20,890 --> 00:15:25,060
<font color="#E5E5E5">and it has pretty negligible overheads</font>

373
00:15:22,750 --> 00:15:28,140
so if you have any questions I'd be

374
00:15:25,060 --> 00:15:35,128
happy<font color="#CCCCCC"> to take</font><font color="#E5E5E5"> them now thanks so much</font>

375
00:15:28,140 --> 00:15:39,399
[Applause]

376
00:15:35,129 --> 00:15:42,639
<font color="#CCCCCC">unoriginal yahwah so as</font><font color="#E5E5E5"> far</font><font color="#CCCCCC"> as I</font>

377
00:15:39,399 --> 00:15:46,329
understand your<font color="#E5E5E5"> checker</font><font color="#CCCCCC"> even uses</font>

378
00:15:42,639 --> 00:15:49,480
manually hard-coded patterns from the

379
00:15:46,329 --> 00:15:51,699
<font color="#CCCCCC">ast</font><font color="#E5E5E5"> yeah so we looked at a</font><font color="#CCCCCC"> lot of</font>

380
00:15:49,480 --> 00:15:53,769
binding code and then figured out how<font color="#CCCCCC"> it</font>

381
00:15:51,699 --> 00:15:55,508
<font color="#E5E5E5">was going wrong with these up calls we</font>

382
00:15:53,769 --> 00:15:56,920
figured out a few patterns<font color="#E5E5E5"> and then we</font>

383
00:15:55,509 --> 00:15:58,660
check<font color="#E5E5E5"> the</font><font color="#CCCCCC"> AST we basically</font><font color="#E5E5E5"> are just</font>

384
00:15:56,920 --> 00:16:01,839
<font color="#E5E5E5">doing pattern matching on the ast and</font>

385
00:15:58,660 --> 00:16:04,389
about how many<font color="#E5E5E5"> patterns was it I think</font>

386
00:16:01,839 --> 00:16:06,310
it was like<font color="#E5E5E5"> five checkers but about</font>

387
00:16:04,389 --> 00:16:08,620
<font color="#E5E5E5">seven patterns because we have to change</font>

388
00:16:06,310 --> 00:16:11,319
the patterns per<font color="#E5E5E5"> system</font><font color="#CCCCCC"> because system</font>

389
00:16:08,620 --> 00:16:13,720
idioms get kind of weird<font color="#E5E5E5"> okay and how do</font>

390
00:16:11,319 --> 00:16:15,878
you<font color="#CCCCCC"> know the patterns are exhaustive oh</font>

391
00:16:13,720 --> 00:16:17,889
they're<font color="#E5E5E5"> not yeah also the checking</font>

392
00:16:15,879 --> 00:16:19,959
system we're using is like totally

393
00:16:17,889 --> 00:16:22,589
unsound<font color="#E5E5E5"> so we're making no guarantees</font>

394
00:16:19,959 --> 00:16:26,378
<font color="#CCCCCC">about finding all the bugs in the system</font>

395
00:16:22,589 --> 00:16:29,290
<font color="#E5E5E5">okay thank you and second question</font><font color="#CCCCCC"> so I</font>

396
00:16:26,379 --> 00:16:32,579
imagine<font color="#E5E5E5"> like</font><font color="#CCCCCC"> it's a different solution</font>

397
00:16:29,290 --> 00:16:35,860
<font color="#E5E5E5">for the API problem where you could</font>

398
00:16:32,579 --> 00:16:37,599
<font color="#E5E5E5">instead write sort of a wrapper in</font>

399
00:16:35,860 --> 00:16:39,430
JavaScript that<font color="#E5E5E5"> would cause all your</font>

400
00:16:37,600 --> 00:16:42,309
arguments<font color="#CCCCCC"> to the types that</font><font color="#E5E5E5"> you expect</font>

401
00:16:39,430 --> 00:16:44,378
<font color="#E5E5E5">and have you explored that direction we</font>

402
00:16:42,309 --> 00:16:46,269
haven't explored<font color="#E5E5E5"> a</font><font color="#CCCCCC"> Java Script</font><font color="#E5E5E5"> solution</font>

403
00:16:44,379 --> 00:16:48,160
to the to the<font color="#CCCCCC"> question we've mostly been</font>

404
00:16:46,269 --> 00:16:53,680
working<font color="#E5E5E5"> from the binding layer okay</font>

405
00:16:48,160 --> 00:16:56,379
thank you<font color="#CCCCCC"> Thanks all right so I have a</font>

406
00:16:53,680 --> 00:16:57,819
question<font color="#E5E5E5"> the the</font><font color="#CCCCCC"> simpler API that you</font>

407
00:16:56,379 --> 00:16:59,949
guys proposed looks like<font color="#CCCCCC"> we're you</font>

408
00:16:57,819 --> 00:17:01,809
convincing to me<font color="#E5E5E5"> and I'm curious to see</font>

409
00:16:59,949 --> 00:17:04,119
whether it<font color="#E5E5E5"> could be possible to formally</font>

410
00:17:01,809 --> 00:17:07,000
specify for<font color="#E5E5E5"> the new API that</font><font color="#CCCCCC"> you</font>

411
00:17:04,119 --> 00:17:08,649
proposed some correctness<font color="#E5E5E5"> guarantee that</font>

412
00:17:07,000 --> 00:17:10,299
they could prevent hard caches to<font color="#E5E5E5"> try to</font>

413
00:17:08,650 --> 00:17:12,520
prove that about<font color="#E5E5E5"> just the implementation</font>

414
00:17:10,299 --> 00:17:13,929
<font color="#E5E5E5">of the API</font><font color="#CCCCCC"> form perhaps because it might</font>

415
00:17:12,520 --> 00:17:16,089
be small<font color="#E5E5E5"> enough piece of code</font><font color="#CCCCCC"> to do that</font>

416
00:17:13,929 --> 00:17:18,329
on have you considered this yeah that's

417
00:17:16,089 --> 00:17:21,609
actually something we really<font color="#E5E5E5"> want to do</font>

418
00:17:18,329 --> 00:17:29,350
future what<font color="#CCCCCC"> them</font><font color="#E5E5E5"> so let's thank oh one</font>

419
00:17:21,609 --> 00:17:31,330
more<font color="#E5E5E5"> question</font><font color="#CCCCCC"> here very good talk so</font>

420
00:17:29,350 --> 00:17:34,570
have you ever<font color="#E5E5E5"> used the class that you</font>

421
00:17:31,330 --> 00:17:36,310
<font color="#E5E5E5">cannot analyzer</font><font color="#CCCCCC"> oh yeah yeah it's a very</font>

422
00:17:34,570 --> 00:17:39,100
they provide a<font color="#CCCCCC"> spike</font>

423
00:17:36,310 --> 00:17:42,040
<font color="#CCCCCC">laser angie</font><font color="#E5E5E5"> and you can also customize</font>

424
00:17:39,100 --> 00:17:45,850
the<font color="#E5E5E5"> checkers on top of it have you ever</font>

425
00:17:42,040 --> 00:17:49,960
compared that to with<font color="#E5E5E5"> your static</font>

426
00:17:45,850 --> 00:17:52,659
analyzer to check<font color="#E5E5E5"> the</font><font color="#CCCCCC"> binding so you</font>

427
00:17:49,960 --> 00:17:54,910
<font color="#E5E5E5">could on assuming you can compile these</font>

428
00:17:52,660 --> 00:17:57,450
<font color="#E5E5E5">findings with</font><font color="#CCCCCC"> clang</font><font color="#E5E5E5"> you can write our</font>

429
00:17:54,910 --> 00:18:01,150
checkers<font color="#CCCCCC"> in climb to and just</font><font color="#E5E5E5"> run that</font>

430
00:17:57,450 --> 00:18:02,460
<font color="#CCCCCC">okay yeah okay thanks</font><font color="#E5E5E5"> so much let's</font>

431
00:18:01,150 --> 00:18:09,079
<font color="#E5E5E5">thank the speaker</font>

432
00:18:02,460 --> 00:18:09,079
[Applause]

