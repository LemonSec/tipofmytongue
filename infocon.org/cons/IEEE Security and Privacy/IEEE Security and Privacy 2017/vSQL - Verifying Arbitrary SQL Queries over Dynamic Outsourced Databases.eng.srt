1
00:00:08,050 --> 00:00:12,500
thanks for the introduction<font color="#E5E5E5"> hello</font>

2
00:00:10,969 --> 00:00:15,049
everyone I'm even John from<font color="#CCCCCC"> the</font>

3
00:00:12,500 --> 00:00:17,450
University of Maryland<font color="#CCCCCC"> today again I'm</font>

4
00:00:15,049 --> 00:00:20,270
going to<font color="#CCCCCC"> present</font><font color="#E5E5E5"> our paper we see</font><font color="#CCCCCC"> Co</font>

5
00:00:17,450 --> 00:00:23,900
verifying<font color="#CCCCCC"> arbitrary</font><font color="#E5E5E5"> picoCuries over</font>

6
00:00:20,270 --> 00:00:26,420
dynamic<font color="#CCCCCC"> allsorts databases this is the</font>

7
00:00:23,900 --> 00:00:32,720
joint<font color="#CCCCCC"> works</font><font color="#E5E5E5"> with the Daniel Johnson</font>

8
00:00:26,420 --> 00:00:35,150
<font color="#CCCCCC">domitius and Bobby's so cloud computing</font>

9
00:00:32,720 --> 00:00:37,370
is widely used in<font color="#E5E5E5"> practice</font><font color="#CCCCCC"> and everyone</font>

10
00:00:35,150 --> 00:00:42,199
is delegating<font color="#E5E5E5"> their data and computation</font>

11
00:00:37,370 --> 00:00:45,589
to servers in the cloud<font color="#E5E5E5"> or</font><font color="#CCCCCC"> big companies</font>

12
00:00:42,200 --> 00:00:47,600
<font color="#CCCCCC">like Amazon Oregon Google are providing</font>

13
00:00:45,590 --> 00:00:51,530
this database as a service<font color="#E5E5E5"> in cloud</font>

14
00:00:47,600 --> 00:00:54,649
computing<font color="#E5E5E5"> it enables the client to</font>

15
00:00:51,530 --> 00:00:58,600
delegate<font color="#E5E5E5"> the storage of a database to a</font>

16
00:00:54,649 --> 00:01:01,910
cloud server<font color="#E5E5E5"> and later</font><font color="#CCCCCC"> she can issue a</font>

17
00:00:58,600 --> 00:01:05,930
sequel database curious and such the

18
00:01:01,910 --> 00:01:08,360
results from<font color="#E5E5E5"> the server this provides</font>

19
00:01:05,930 --> 00:01:10,550
great benefits to<font color="#CCCCCC"> end-users for</font><font color="#E5E5E5"> example</font>

20
00:01:08,360 --> 00:01:13,940
it can<font color="#CCCCCC"> reduce the local storage and</font>

21
00:01:10,550 --> 00:01:16,729
computational consumption however

22
00:01:13,940 --> 00:01:19,030
<font color="#E5E5E5">despite of this great benefit it also</font>

23
00:01:16,729 --> 00:01:23,030
<font color="#E5E5E5">raises new security challenges and</font>

24
00:01:19,030 --> 00:01:25,610
<font color="#E5E5E5">envelope them is called integrity</font><font color="#CCCCCC"> Emily</font>

25
00:01:23,030 --> 00:01:27,740
how can we make<font color="#CCCCCC"> sure that the results</font>

26
00:01:25,610 --> 00:01:30,619
returned by the server is indeed

27
00:01:27,740 --> 00:01:34,009
computed by this<font color="#CCCCCC"> fury</font><font color="#E5E5E5"> on the database</font><font color="#CCCCCC"> I</font>

28
00:01:30,619 --> 00:01:36,619
all<font color="#CCCCCC"> sorts</font><font color="#E5E5E5"> before so this is something</font>

29
00:01:34,009 --> 00:01:39,050
<font color="#E5E5E5">different from privacy so in some</font>

30
00:01:36,619 --> 00:01:41,300
scenarios<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> okay to let the server</font>

31
00:01:39,050 --> 00:01:42,890
know the content of<font color="#E5E5E5"> the database but in</font>

32
00:01:41,300 --> 00:01:46,880
this<font color="#E5E5E5"> scenario what we want to make sure</font>

33
00:01:42,890 --> 00:01:51,000
<font color="#E5E5E5">that the result is correct that's called</font>

34
00:01:46,880 --> 00:01:53,820
integrity the crypt of<font color="#CCCCCC"> the</font>

35
00:01:51,000 --> 00:01:56,820
<font color="#CCCCCC">this problem is called</font><font color="#E5E5E5"> verifiable</font>

36
00:01:53,820 --> 00:02:00,809
<font color="#E5E5E5">computation in particular it's</font>

37
00:01:56,820 --> 00:02:05,369
verifiable<font color="#E5E5E5"> databases it allows the</font>

38
00:02:00,810 --> 00:02:08,399
<font color="#E5E5E5">clients to compute a</font><font color="#CCCCCC"> source target from</font>

39
00:02:05,370 --> 00:02:12,570
the<font color="#CCCCCC"> database stores it locally</font><font color="#E5E5E5"> and also</font>

40
00:02:08,399 --> 00:02:15,780
<font color="#CCCCCC">source the database later for psychic</font>

41
00:02:12,570 --> 00:02:18,900
Uri the server returns<font color="#CCCCCC"> results</font><font color="#E5E5E5"> plus</font><font color="#CCCCCC"> a</font>

42
00:02:15,780 --> 00:02:20,940
proof and this verifiable databases<font color="#E5E5E5"> the</font>

43
00:02:18,900 --> 00:02:23,100
client is able to<font color="#CCCCCC"> validate the</font>

44
00:02:20,940 --> 00:02:25,620
correctness of the results using the

45
00:02:23,100 --> 00:02:27,090
<font color="#E5E5E5">digest and the proof and the security</font>

46
00:02:25,620 --> 00:02:30,239
guarantees<font color="#CCCCCC"> that even if the server is</font>

47
00:02:27,090 --> 00:02:32,250
malicious<font color="#CCCCCC"> it is infeasible for</font><font color="#E5E5E5"> him to</font>

48
00:02:30,239 --> 00:02:36,600
return<font color="#E5E5E5"> a wrong answer</font><font color="#CCCCCC"> but still passes</font>

49
00:02:32,250 --> 00:02:38,130
the verification in verifiable

50
00:02:36,600 --> 00:02:41,910
competition we are interested in the

51
00:02:38,130 --> 00:02:44,609
following<font color="#E5E5E5"> efficiency measures first set</font>

52
00:02:41,910 --> 00:02:46,829
<font color="#E5E5E5">up time this is the time to compute the</font>

53
00:02:44,610 --> 00:02:50,730
digest and ideally we want<font color="#E5E5E5"> it to be</font>

54
00:02:46,830 --> 00:02:52,500
linear<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the size of</font><font color="#E5E5E5"> the database we</font>

55
00:02:50,730 --> 00:02:55,079
also want to<font color="#CCCCCC"> reduce the prover time</font>

56
00:02:52,500 --> 00:02:58,290
<font color="#E5E5E5">which is the overhead for</font><font color="#CCCCCC"> the server</font><font color="#E5E5E5"> to</font>

57
00:02:55,080 --> 00:03:00,720
generate<font color="#E5E5E5"> the proof and then we have</font>

58
00:02:58,290 --> 00:03:06,540
proof<font color="#CCCCCC"> size and verification time we want</font>

59
00:03:00,720 --> 00:03:08,640
them to<font color="#CCCCCC"> be as small</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> possible there</font>

60
00:03:06,540 --> 00:03:10,500
are a lot of great prior work<font color="#E5E5E5"> in the</font>

61
00:03:08,640 --> 00:03:12,660
literature<font color="#CCCCCC"> of verifiable</font><font color="#E5E5E5"> computation and</font>

62
00:03:10,500 --> 00:03:15,480
they can be roughly classified<font color="#E5E5E5"> into two</font>

63
00:03:12,660 --> 00:03:17,220
<font color="#CCCCCC">categories the first one is called</font>

64
00:03:15,480 --> 00:03:18,690
customized<font color="#CCCCCC"> approach and then</font>

65
00:03:17,220 --> 00:03:22,250
representing example is called

66
00:03:18,690 --> 00:03:24,650
authenticated table<font color="#CCCCCC"> still structures ABS</font>

67
00:03:22,250 --> 00:03:27,390
for example there are a lot of work

68
00:03:24,650 --> 00:03:30,780
supporting range<font color="#CCCCCC"> curious multi range</font><font color="#E5E5E5"> in</font>

69
00:03:27,390 --> 00:03:32,458
<font color="#E5E5E5">John Kerry's individually and the good</font>

70
00:03:30,780 --> 00:03:35,400
thing about this<font color="#E5E5E5"> approach is</font><font color="#CCCCCC"> that is</font>

71
00:03:32,459 --> 00:03:38,459
<font color="#E5E5E5">really very efficient but the drawback</font>

72
00:03:35,400 --> 00:03:40,350
<font color="#CCCCCC">is that</font><font color="#E5E5E5"> only supports limited operations</font>

73
00:03:38,459 --> 00:03:44,070
and that's<font color="#E5E5E5"> why it's called customized</font>

74
00:03:40,350 --> 00:03:46,170
approach<font color="#E5E5E5"> so if we draw a plot where at</font>

75
00:03:44,070 --> 00:03:48,510
the access<font color="#CCCCCC"> s represents the efficiency</font>

76
00:03:46,170 --> 00:03:51,000
and the<font color="#CCCCCC"> y-axis represents</font><font color="#E5E5E5"> the</font>

77
00:03:48,510 --> 00:03:56,670
expressiveness<font color="#E5E5E5"> this work can be placed</font>

78
00:03:51,000 --> 00:03:58,560
on<font color="#E5E5E5"> the bottom right on this</font>

79
00:03:56,670 --> 00:04:00,899
<font color="#CCCCCC">my work there's a system called</font>

80
00:03:58,560 --> 00:04:03,030
integrity<font color="#CCCCCC"> B that integrates different</font>

81
00:04:00,900 --> 00:04:05,250
types of authenticated<font color="#CCCCCC"> deals ruptures</font>

82
00:04:03,030 --> 00:04:07,560
and supports a subset<font color="#CCCCCC"> of seeker queries</font>

83
00:04:05,250 --> 00:04:10,110
in this paper we're going<font color="#CCCCCC"> to compare our</font>

84
00:04:07,560 --> 00:04:15,930
system to<font color="#E5E5E5"> this one and it can be placed</font>

85
00:04:10,110 --> 00:04:19,799
<font color="#CCCCCC">here the</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> category</font><font color="#E5E5E5"> is called generic</font>

86
00:04:15,930 --> 00:04:22,230
approach an example is<font color="#CCCCCC"> snart</font><font color="#E5E5E5"> in</font>

87
00:04:19,798 --> 00:04:24,239
principle snarks<font color="#E5E5E5"> can support all</font>

88
00:04:22,230 --> 00:04:26,669
possible functions<font color="#E5E5E5"> that can be</font><font color="#CCCCCC"> modelled</font>

89
00:04:24,240 --> 00:04:27,990
<font color="#CCCCCC">as arithmetic circuits which are</font>

90
00:04:26,669 --> 00:04:31,789
<font color="#E5E5E5">circuits with addition and</font>

91
00:04:27,990 --> 00:04:34,080
<font color="#E5E5E5">multiplication gates plus it always</font>

92
00:04:31,790 --> 00:04:37,530
generates constant size proof and the

93
00:04:34,080 --> 00:04:40,710
verification<font color="#CCCCCC"> time is very</font><font color="#E5E5E5"> fast but the</font>

94
00:04:37,530 --> 00:04:42,630
problem<font color="#CCCCCC"> that really</font><font color="#E5E5E5"> it introduced a big</font>

95
00:04:40,710 --> 00:04:46,710
overhead on the<font color="#E5E5E5"> set of time and prover</font>

96
00:04:42,630 --> 00:04:48,990
time in addition<font color="#E5E5E5"> it needs a function</font>

97
00:04:46,710 --> 00:04:51,510
specific<font color="#E5E5E5"> setup phase for each function</font>

98
00:04:48,990 --> 00:04:55,710
<font color="#E5E5E5">one support you need to pre-process</font>

99
00:04:51,510 --> 00:04:57,690
<font color="#E5E5E5">separately this</font><font color="#CCCCCC"> is not good if we want</font>

100
00:04:55,710 --> 00:04:59,340
<font color="#CCCCCC">to apply snarks</font><font color="#E5E5E5"> to verifiable database</font>

101
00:04:57,690 --> 00:05:01,140
because there are so many<font color="#E5E5E5"> types of</font>

102
00:04:59,340 --> 00:05:03,440
<font color="#CCCCCC">physical</font><font color="#E5E5E5"> theories and we don't do not</font>

103
00:05:01,140 --> 00:05:06,419
want to pre-process them individually

104
00:05:03,440 --> 00:05:11,520
back to the plot<font color="#E5E5E5"> snarks can be placed</font>

105
00:05:06,419 --> 00:05:13,380
here so in this paper<font color="#E5E5E5"> we are proposing a</font>

106
00:05:11,520 --> 00:05:17,250
new verifiable database system called

107
00:05:13,380 --> 00:05:20,969
<font color="#E5E5E5">vehicle and and can be it</font><font color="#CCCCCC"> can be placed</font>

108
00:05:17,250 --> 00:05:23,310
at this location<font color="#E5E5E5"> as you can see the</font>

109
00:05:20,970 --> 00:05:25,890
expressiveness<font color="#E5E5E5"> is almost the same as</font>

110
00:05:23,310 --> 00:05:28,380
snark<font color="#CCCCCC"> and in</font><font color="#E5E5E5"> particular we can support</font>

111
00:05:25,890 --> 00:05:31,830
arbitrary<font color="#E5E5E5"> seeker curious in the</font><font color="#CCCCCC"> meantime</font>

112
00:05:28,380 --> 00:05:35,100
<font color="#E5E5E5">the efficiency is comparable to a</font>

113
00:05:31,830 --> 00:05:41,729
customized approach<font color="#E5E5E5"> and is much faster</font>

114
00:05:35,100 --> 00:05:43,470
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> not only we can also support we</font>

115
00:05:41,729 --> 00:05:48,240
don't have a function specific<font color="#CCCCCC"> set up</font>

116
00:05:43,470 --> 00:05:51,060
<font color="#CCCCCC">base concrete speaking here's the</font>

117
00:05:48,240 --> 00:05:52,830
speaker<font color="#CCCCCC"> curate we see in practice</font><font color="#E5E5E5"> as you</font>

118
00:05:51,060 --> 00:05:54,600
<font color="#CCCCCC">can see</font><font color="#E5E5E5"> there is a lot of sub curious</font>

119
00:05:52,830 --> 00:05:56,460
and complicated<font color="#E5E5E5"> nesting in it and take</font>

120
00:05:54,600 --> 00:05:59,940
me some time<font color="#CCCCCC"> to fit it</font><font color="#E5E5E5"> into a single</font>

121
00:05:56,460 --> 00:06:03,000
<font color="#E5E5E5">slide this is accurate from a benchmark</font>

122
00:05:59,940 --> 00:06:04,770
called<font color="#CCCCCC"> t tch which is widely used in the</font>

123
00:06:03,000 --> 00:06:07,460
<font color="#E5E5E5">database community to test the</font>

124
00:06:04,770 --> 00:06:08,859
performance<font color="#E5E5E5"> of new database systems and</font>

125
00:06:07,460 --> 00:06:10,539
<font color="#CCCCCC">the</font>

126
00:06:08,860 --> 00:06:13,659
<font color="#CCCCCC">where we can support</font><font color="#E5E5E5"> this type of</font>

127
00:06:10,539 --> 00:06:17,259
<font color="#E5E5E5">securities on on databases with the</font>

128
00:06:13,659 --> 00:06:21,969
millions of<font color="#CCCCCC"> records and tens of rows</font>

129
00:06:17,259 --> 00:06:28,300
<font color="#CCCCCC">attended</font><font color="#E5E5E5"> of columns so</font><font color="#CCCCCC"> next our</font>

130
00:06:21,969 --> 00:06:30,460
construction so the first thing I want

131
00:06:28,300 --> 00:06:34,150
<font color="#E5E5E5">to show you is a major building block of</font>

132
00:06:30,460 --> 00:06:35,948
our system called interactive proof at

133
00:06:34,150 --> 00:06:38,229
the cryptographer going to be a

134
00:06:35,949 --> 00:06:41,500
<font color="#E5E5E5">complicated like this</font><font color="#CCCCCC"> demolish at the</font>

135
00:06:38,229 --> 00:06:44,050
circuit the circuit takes<font color="#E5E5E5"> the database</font>

136
00:06:41,500 --> 00:06:46,029
<font color="#E5E5E5">at the input and outputs</font><font color="#CCCCCC"> the result of</font>

137
00:06:44,050 --> 00:06:52,810
the<font color="#E5E5E5"> query</font><font color="#CCCCCC"> and we want to the server to</font>

138
00:06:46,029 --> 00:06:55,779
<font color="#CCCCCC">tell us what is</font><font color="#E5E5E5"> this result first we</font>

139
00:06:52,810 --> 00:06:59,259
want to define<font color="#E5E5E5"> a polynomial as in X by</font>

140
00:06:55,779 --> 00:07:02,680
<font color="#E5E5E5">the input data base by define you can</font>

141
00:06:59,259 --> 00:07:05,289
think<font color="#E5E5E5"> about it as every coefficient of</font>

142
00:07:02,680 --> 00:07:08,020
this polynomial is an element<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the</font>

143
00:07:05,289 --> 00:07:10,270
database<font color="#E5E5E5"> so in this way the size of this</font>

144
00:07:08,020 --> 00:07:13,389
polynomial is<font color="#E5E5E5"> the same thought the same</font>

145
00:07:10,270 --> 00:07:14,889
as the size<font color="#E5E5E5"> of the database for those</font>

146
00:07:13,389 --> 00:07:16,839
who are<font color="#CCCCCC"> familiar</font><font color="#E5E5E5"> with interactive proof</font>

147
00:07:14,889 --> 00:07:20,740
<font color="#E5E5E5">this is called multi linear extension or</font>

148
00:07:16,839 --> 00:07:24,430
<font color="#E5E5E5">low degree extension similarly we define</font>

149
00:07:20,740 --> 00:07:27,219
polynomials by the values in<font color="#CCCCCC"> wires</font><font color="#E5E5E5"> of</font>

150
00:07:24,430 --> 00:07:29,009
every layer in a circuit like<font color="#E5E5E5"> this in</font>

151
00:07:27,219 --> 00:07:31,779
this way<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> a well defined</font>

152
00:07:29,009 --> 00:07:33,990
relationship between the polynomials<font color="#CCCCCC"> in</font>

153
00:07:31,779 --> 00:07:37,060
two<font color="#E5E5E5"> consecutive layers because they are</font>

154
00:07:33,990 --> 00:07:42,639
connected<font color="#CCCCCC"> by circuits of addition and</font>

155
00:07:37,060 --> 00:07:44,469
<font color="#CCCCCC">multiplication gates so even if we</font>

156
00:07:42,639 --> 00:07:46,360
define things<font color="#E5E5E5"> in this way you cannot ask</font>

157
00:07:44,469 --> 00:07:47,979
the server to tell<font color="#E5E5E5"> you what are these</font>

158
00:07:46,360 --> 00:07:51,039
polynomials<font color="#CCCCCC"> and check the relationship</font>

159
00:07:47,979 --> 00:07:53,639
because it will be<font color="#E5E5E5"> even slower than</font>

160
00:07:51,039 --> 00:07:56,620
<font color="#E5E5E5">evaluating the circuit yourself</font>

161
00:07:53,639 --> 00:07:58,900
fortunately we<font color="#CCCCCC"> have a way</font><font color="#E5E5E5"> to check the</font>

162
00:07:56,620 --> 00:08:02,289
relationship between two polynomials<font color="#CCCCCC"> at</font>

163
00:07:58,900 --> 00:08:04,750
a random point<font color="#E5E5E5"> and using this technique</font>

164
00:08:02,289 --> 00:08:10,240
<font color="#CCCCCC">here's</font><font color="#E5E5E5"> the protocol</font><font color="#CCCCCC"> for interactive</font>

165
00:08:04,750 --> 00:08:12,339
proof the client and server have the

166
00:08:10,240 --> 00:08:14,740
input and the function model<font color="#E5E5E5"> at the</font>

167
00:08:12,339 --> 00:08:17,319
circuit<font color="#E5E5E5"> the server first send a</font><font color="#CCCCCC"> claimed</font>

168
00:08:14,740 --> 00:08:19,529
output to this to the<font color="#E5E5E5"> client which</font><font color="#CCCCCC"> is</font>

169
00:08:17,319 --> 00:08:23,040
not trusted<font color="#E5E5E5"> and may be read on</font><font color="#CCCCCC"> the slide</font>

170
00:08:19,529 --> 00:08:26,140
from the output<font color="#E5E5E5"> the client</font>

171
00:08:23,040 --> 00:08:30,490
compute a polynomial adults and evaluate

172
00:08:26,140 --> 00:08:32,229
it at a<font color="#E5E5E5"> random point</font><font color="#CCCCCC"> or out after that</font>

173
00:08:30,490 --> 00:08:35,200
the<font color="#CCCCCC"> client send the random challenge to</font>

174
00:08:32,229 --> 00:08:38,289
the server and the server returns<font color="#E5E5E5"> the</font><font color="#CCCCCC"> f1</font>

175
00:08:35,200 --> 00:08:40,840
<font color="#CCCCCC">r1 to the client</font><font color="#E5E5E5"> note</font><font color="#CCCCCC"> that here this</font><font color="#E5E5E5"> is</font>

176
00:08:38,289 --> 00:08:43,140
<font color="#CCCCCC">the constant</font><font color="#E5E5E5"> size it's just a single</font>

177
00:08:40,840 --> 00:08:45,790
number representing the evaluation and

178
00:08:43,140 --> 00:08:47,590
then use the technique the client can

179
00:08:45,790 --> 00:08:51,849
check the relationship between<font color="#CCCCCC"> F our</font>

180
00:08:47,590 --> 00:08:54,640
<font color="#E5E5E5">files are out and F 1 R</font><font color="#CCCCCC"> 1 in this way it</font>

181
00:08:51,850 --> 00:08:58,570
reduces the correctness of the output<font color="#E5E5E5"> to</font>

182
00:08:54,640 --> 00:09:00,610
a value for<font color="#E5E5E5"> one layer above similarly</font>

183
00:08:58,570 --> 00:09:03,520
they repeat the process<font color="#E5E5E5"> layer by layer</font>

184
00:09:00,610 --> 00:09:06,940
and at the end of<font color="#E5E5E5"> the protocol the</font>

185
00:09:03,520 --> 00:09:09,520
client<font color="#E5E5E5"> receives a claim about the input</font>

186
00:09:06,940 --> 00:09:12,280
<font color="#E5E5E5">layer and the reduction says that if</font>

187
00:09:09,520 --> 00:09:17,170
this value<font color="#E5E5E5"> at</font><font color="#CCCCCC"> inari</font><font color="#E5E5E5"> is correct</font>

188
00:09:12,280 --> 00:09:20,650
the output is correct how can she<font color="#E5E5E5"> make</font>

189
00:09:17,170 --> 00:09:23,050
<font color="#E5E5E5">sure that we require that the</font><font color="#CCCCCC"> client to</font>

190
00:09:20,650 --> 00:09:25,569
require that the<font color="#CCCCCC"> client restore the</font>

191
00:09:23,050 --> 00:09:27,609
input locally and compute this<font color="#E5E5E5"> I thing</font>

192
00:09:25,570 --> 00:09:30,010
are you<font color="#E5E5E5"> on your</font><font color="#CCCCCC"> own</font><font color="#E5E5E5"> and checks they're</font>

193
00:09:27,610 --> 00:09:31,720
indeed equivalent<font color="#E5E5E5"> this completes the</font>

194
00:09:30,010 --> 00:09:33,400
<font color="#CCCCCC">whole reduction and guarantees that the</font>

195
00:09:31,720 --> 00:09:37,810
output<font color="#E5E5E5"> is correct</font><font color="#CCCCCC"> and that's the whole</font>

196
00:09:33,400 --> 00:09:39,640
protocol of interactive proof this might

197
00:09:37,810 --> 00:09:41,020
be a little bit technical<font color="#CCCCCC"> and</font><font color="#E5E5E5"> if you</font>

198
00:09:39,640 --> 00:09:42,100
didn't follow the<font color="#E5E5E5"> whole protocol what</font>

199
00:09:41,020 --> 00:09:44,530
you need to<font color="#E5E5E5"> keep in</font><font color="#CCCCCC"> mind is that</font>

200
00:09:42,100 --> 00:09:46,510
interactive proof is a way to reduce<font color="#CCCCCC"> the</font>

201
00:09:44,530 --> 00:09:51,280
correctness of the output<font color="#CCCCCC"> to a claim</font>

202
00:09:46,510 --> 00:09:53,710
<font color="#E5E5E5">about input so if you only use IP for</font>

203
00:09:51,280 --> 00:09:55,660
verifiable<font color="#E5E5E5"> databases the benefits are</font>

204
00:09:53,710 --> 00:09:57,910
there<font color="#E5E5E5"> is no set of time that begin right</font>

205
00:09:55,660 --> 00:10:00,189
away<font color="#CCCCCC"> and the prover time is very fast</font>

206
00:09:57,910 --> 00:10:02,260
<font color="#CCCCCC">because</font><font color="#E5E5E5"> it only involves simple</font>

207
00:10:00,190 --> 00:10:03,580
additions and<font color="#E5E5E5"> modifications</font><font color="#CCCCCC"> there's no</font>

208
00:10:02,260 --> 00:10:07,240
heavy crypto operations like

209
00:10:03,580 --> 00:10:09,670
exponentiation<font color="#CCCCCC"> or</font><font color="#E5E5E5"> bilinear pairing but</font>

210
00:10:07,240 --> 00:10:11,650
it is not<font color="#E5E5E5"> quite working because we</font>

211
00:10:09,670 --> 00:10:16,030
require<font color="#E5E5E5"> the clients to store the whole</font>

212
00:10:11,650 --> 00:10:17,380
database locally as<font color="#E5E5E5"> a last</font><font color="#CCCCCC"> set the</font>

213
00:10:16,030 --> 00:10:21,760
client<font color="#E5E5E5"> needs to evaluate a polynomial</font>

214
00:10:17,380 --> 00:10:23,850
defined<font color="#CCCCCC"> by output at the random point so</font>

215
00:10:21,760 --> 00:10:27,040
in our paper<font color="#E5E5E5"> we further proposed a</font>

216
00:10:23,850 --> 00:10:28,830
protocol for verifiable polynomial

217
00:10:27,040 --> 00:10:31,810
delegation<font color="#CCCCCC"> epd</font>

218
00:10:28,830 --> 00:10:34,390
this protocol enables the client to

219
00:10:31,810 --> 00:10:36,329
compute a source digest for<font color="#CCCCCC"> a</font><font color="#E5E5E5"> polynomial</font>

220
00:10:34,390 --> 00:10:39,629
<font color="#E5E5E5">and then send</font><font color="#CCCCCC"> upon</font>

221
00:10:36,329 --> 00:10:41,488
<font color="#CCCCCC">mooo</font><font color="#E5E5E5"> to the server later the client can</font>

222
00:10:39,629 --> 00:10:45,209
issue a Curie<font color="#E5E5E5"> for evaluating the</font>

223
00:10:41,489 --> 00:10:47,399
polynomial at<font color="#CCCCCC"> 0.8</font><font color="#E5E5E5"> the server returns</font><font color="#CCCCCC"> f8</font>

224
00:10:45,209 --> 00:10:49,949
<font color="#E5E5E5">slaughter proof and the client is able</font>

225
00:10:47,399 --> 00:10:53,459
<font color="#E5E5E5">to check that this</font><font color="#CCCCCC"> is indeed the correct</font>

226
00:10:49,949 --> 00:10:55,829
evaluation<font color="#CCCCCC"> fo</font><font color="#E5E5E5"> free with this protocol we</font>

227
00:10:53,459 --> 00:10:59,329
can further delegate<font color="#CCCCCC"> the last step of IP</font>

228
00:10:55,829 --> 00:11:03,779
to<font color="#E5E5E5"> the server side and here's the whole</font>

229
00:10:59,329 --> 00:11:06,359
first goal for<font color="#E5E5E5"> our system the client has</font>

230
00:11:03,779 --> 00:11:08,429
<font color="#CCCCCC">a database it defines the polynomial at</font>

231
00:11:06,360 --> 00:11:11,179
<font color="#E5E5E5">v-necks</font><font color="#CCCCCC"> and the client will first use</font>

232
00:11:08,429 --> 00:11:16,439
our<font color="#CCCCCC"> VPD protocol to compute a digest and</font>

233
00:11:11,179 --> 00:11:18,059
delegate the database when<font color="#E5E5E5"> issuing a</font>

234
00:11:16,439 --> 00:11:20,459
sequel query that<font color="#CCCCCC"> is modeled at the</font>

235
00:11:18,059 --> 00:11:23,879
circuit the server<font color="#E5E5E5"> returns acclaimed the</font>

236
00:11:20,459 --> 00:11:26,189
result with<font color="#E5E5E5"> this result</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> client and</font>

237
00:11:23,879 --> 00:11:29,309
server can initiate<font color="#E5E5E5"> an interactive proof</font>

238
00:11:26,189 --> 00:11:32,549
and at the end of this the client

239
00:11:29,309 --> 00:11:37,799
receives a claim value for<font color="#CCCCCC"> acting re</font>

240
00:11:32,549 --> 00:11:40,439
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is the IP part after that</font><font color="#E5E5E5"> the</font>

241
00:11:37,799 --> 00:11:43,259
client used<font color="#E5E5E5"> our</font><font color="#CCCCCC"> VPD protocol to further</font>

242
00:11:40,439 --> 00:11:46,980
delegate the task to<font color="#E5E5E5"> the server</font><font color="#CCCCCC"> to ask</font>

243
00:11:43,259 --> 00:11:49,410
about what is<font color="#CCCCCC"> acting</font><font color="#E5E5E5"> are in and use the</font>

244
00:11:46,980 --> 00:11:52,470
proto to validate the correctness this

245
00:11:49,410 --> 00:11:54,299
is the<font color="#E5E5E5"> VPD part finally the client</font>

246
00:11:52,470 --> 00:11:57,839
checks these<font color="#E5E5E5"> two values are equivalent</font>

247
00:11:54,299 --> 00:12:00,239
<font color="#CCCCCC">this completes</font><font color="#E5E5E5"> the last step of IP and</font>

248
00:11:57,839 --> 00:12:03,239
guarantees that the<font color="#E5E5E5"> result is correctly</font>

249
00:12:00,239 --> 00:12:08,610
computed so in this way we solve the

250
00:12:03,239 --> 00:12:10,499
problem of<font color="#E5E5E5"> storing data</font><font color="#CCCCCC"> basically in</font>

251
00:12:08,610 --> 00:12:12,540
addition we also<font color="#CCCCCC"> proposed a</font><font color="#E5E5E5"> way to</font>

252
00:12:10,499 --> 00:12:16,110
support<font color="#CCCCCC"> something called</font><font color="#E5E5E5"> auxiliary input</font>

253
00:12:12,540 --> 00:12:17,879
to motivate it a little<font color="#E5E5E5"> bit some</font>

254
00:12:16,110 --> 00:12:20,540
functions are hard to compute using

255
00:12:17,879 --> 00:12:23,730
<font color="#E5E5E5">arithmetic circuits for example division</font>

256
00:12:20,540 --> 00:12:26,488
but they are<font color="#E5E5E5"> very easy to verify if you</font>

257
00:12:23,730 --> 00:12:27,929
have some hints<font color="#E5E5E5"> from the server if the</font>

258
00:12:26,489 --> 00:12:29,850
server<font color="#CCCCCC"> child is caught in</font><font color="#E5E5E5"> queue and</font>

259
00:12:27,929 --> 00:12:32,279
<font color="#CCCCCC">remainder are you can check</font><font color="#E5E5E5"> that a is</font>

260
00:12:29,850 --> 00:12:36,989
<font color="#E5E5E5">equal to Q</font><font color="#CCCCCC"> times</font><font color="#E5E5E5"> P plus</font><font color="#CCCCCC"> R</font><font color="#E5E5E5"> using one</font>

261
00:12:32,279 --> 00:12:39,689
<font color="#CCCCCC">modification and one addition that's why</font>

262
00:12:36,989 --> 00:12:42,089
auxilary input is useful but<font color="#E5E5E5"> interactive</font>

263
00:12:39,689 --> 00:12:43,709
proof<font color="#E5E5E5"> cannot support it again because at</font>

264
00:12:42,089 --> 00:12:48,240
the<font color="#E5E5E5"> last step the client need to access</font>

265
00:12:43,709 --> 00:12:50,520
the whole<font color="#CCCCCC"> input in</font>

266
00:12:48,240 --> 00:12:52,950
paper we support auxiliary input using

267
00:12:50,520 --> 00:12:54,720
the exact same construction<font color="#E5E5E5"> verifiable</font>

268
00:12:52,950 --> 00:12:58,230
<font color="#CCCCCC">phenomena delegation in a slightly</font>

269
00:12:54,720 --> 00:13:00,390
<font color="#E5E5E5">different way here we also allow the</font>

270
00:12:58,230 --> 00:13:03,300
server to have a binomial<font color="#E5E5E5"> in his mind</font>

271
00:13:00,390 --> 00:13:06,300
<font color="#E5E5E5">and commit to</font><font color="#CCCCCC"> this polynomial</font><font color="#E5E5E5"> by sending</font>

272
00:13:03,300 --> 00:13:08,219
the<font color="#E5E5E5"> digest to the client later the</font>

273
00:13:06,300 --> 00:13:10,910
client issues<font color="#CCCCCC"> or</font><font color="#E5E5E5"> evaluation Curie and</font>

274
00:13:08,220 --> 00:13:13,410
server returns<font color="#CCCCCC"> F of a plot the proof and</font>

275
00:13:10,910 --> 00:13:16,890
the client<font color="#E5E5E5"> can check that this is</font><font color="#CCCCCC"> indeed</font>

276
00:13:13,410 --> 00:13:19,219
the<font color="#CCCCCC"> correct F of</font><font color="#E5E5E5"> way for that polynomial</font>

277
00:13:16,890 --> 00:13:22,410
<font color="#E5E5E5">the server</font><font color="#CCCCCC"> kameez in the first place</font>

278
00:13:19,220 --> 00:13:25,170
<font color="#CCCCCC">is</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> the server can commit to the</font>

279
00:13:22,410 --> 00:13:27,120
inputs<font color="#E5E5E5"> up to the circuit without sending</font>

280
00:13:25,170 --> 00:13:31,800
them back<font color="#CCCCCC"> we only need</font><font color="#E5E5E5"> to send a</font>

281
00:13:27,120 --> 00:13:34,440
constant size<font color="#E5E5E5"> project with all these</font>

282
00:13:31,800 --> 00:13:38,130
techniques we<font color="#CCCCCC"> have a verifiable system</font>

283
00:13:34,440 --> 00:13:40,430
that supports<font color="#CCCCCC"> that only</font><font color="#E5E5E5"> have setup</font><font color="#CCCCCC"> phase</font>

284
00:13:38,130 --> 00:13:43,080
for<font color="#E5E5E5"> the database</font><font color="#CCCCCC"> but not for any queries</font>

285
00:13:40,430 --> 00:13:44,849
<font color="#E5E5E5">the</font><font color="#CCCCCC"> per</font><font color="#E5E5E5"> time is very fast because we</font>

286
00:13:43,080 --> 00:13:47,730
only have crypto operations for the

287
00:13:44,850 --> 00:13:51,089
database<font color="#E5E5E5"> in the VPD protocol we support</font>

288
00:13:47,730 --> 00:13:53,910
auxiliary<font color="#CCCCCC"> inputs and in addition we</font><font color="#E5E5E5"> can</font>

289
00:13:51,089 --> 00:13:59,550
support<font color="#CCCCCC"> dynamic database</font><font color="#E5E5E5"> with expressive</font>

290
00:13:53,910 --> 00:14:02,660
psychotropics finally<font color="#E5E5E5"> I want to show you</font>

291
00:13:59,550 --> 00:14:06,449
some experimental results<font color="#E5E5E5"> first</font>

292
00:14:02,660 --> 00:14:09,089
comparison<font color="#E5E5E5"> with prior work we run the</font>

293
00:14:06,450 --> 00:14:11,700
systems on<font color="#CCCCCC"> Curie's and databases from</font>

294
00:14:09,089 --> 00:14:14,130
the<font color="#CCCCCC"> TP CH benchmark</font><font color="#E5E5E5"> and in</font><font color="#CCCCCC"> particular</font>

295
00:14:11,700 --> 00:14:18,200
the largest<font color="#E5E5E5"> table in the database has</font><font color="#CCCCCC"> 6</font>

296
00:14:14,130 --> 00:14:20,790
million<font color="#E5E5E5"> rows</font><font color="#CCCCCC"> and 3 columns in it and</font>

297
00:14:18,200 --> 00:14:22,170
here's the<font color="#CCCCCC"> performance</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> Kure number</font>

298
00:14:20,790 --> 00:14:26,610
19 which<font color="#CCCCCC"> is the one I showed you</font><font color="#E5E5E5"> before</font>

299
00:14:22,170 --> 00:14:28,920
<font color="#CCCCCC">on</font><font color="#E5E5E5"> slide</font><font color="#CCCCCC"> 4</font><font color="#E5E5E5"> setup it takes</font><font color="#CCCCCC"> seven hours</font>

300
00:14:26,610 --> 00:14:31,470
for integrity be approximately 100 hours

301
00:14:28,920 --> 00:14:35,160
for snark<font color="#E5E5E5"> and point seven hour for our</font>

302
00:14:31,470 --> 00:14:37,709
system<font color="#CCCCCC"> but the prover time it takes one</font>

303
00:14:35,160 --> 00:14:39,689
point eight hours<font color="#E5E5E5"> for integrity</font><font color="#CCCCCC"> be fit</font>

304
00:14:37,709 --> 00:14:43,109
<font color="#E5E5E5">before</font><font color="#CCCCCC"> rs4 snark and one point three</font>

305
00:14:39,690 --> 00:14:44,940
hours for<font color="#CCCCCC"> Whittaker as you can see</font><font color="#E5E5E5"> we're</font>

306
00:14:43,110 --> 00:14:45,990
even a little<font color="#E5E5E5"> bit faster than</font><font color="#CCCCCC"> integrity</font>

307
00:14:44,940 --> 00:14:48,060
which is the customized approach

308
00:14:45,990 --> 00:14:51,750
<font color="#E5E5E5">supporting only</font><font color="#CCCCCC"> a subset</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the kokkuri</font>

309
00:14:48,060 --> 00:14:53,699
<font color="#E5E5E5">and much faster</font><font color="#CCCCCC"> the stock for</font>

310
00:14:51,750 --> 00:14:56,250
<font color="#E5E5E5">verification time and communication</font>

311
00:14:53,700 --> 00:14:58,440
which<font color="#CCCCCC"> is the proof size we are</font><font color="#E5E5E5"> a little</font>

312
00:14:56,250 --> 00:15:01,079
bit better<font color="#E5E5E5"> than integrity</font><font color="#CCCCCC"> b and much</font>

313
00:14:58,440 --> 00:15:01,420
worse than<font color="#CCCCCC"> stock</font><font color="#E5E5E5"> but as you can see the</font>

314
00:15:01,079 --> 00:15:03,699
very

315
00:15:01,420 --> 00:15:06,040
is always<font color="#E5E5E5"> below one second and</font>

316
00:15:03,700 --> 00:15:08,560
communication<font color="#CCCCCC"> is always turns up</font>

317
00:15:06,040 --> 00:15:12,699
kilobytes which are not<font color="#CCCCCC"> on necks in</font>

318
00:15:08,560 --> 00:15:15,339
practice<font color="#CCCCCC"> perfect performance</font><font color="#E5E5E5"> for another</font>

319
00:15:12,700 --> 00:15:18,790
<font color="#E5E5E5">Curie this is not supported by</font><font color="#CCCCCC"> integrity</font>

320
00:15:15,340 --> 00:15:21,190
<font color="#CCCCCC">be and takes more than 300</font><font color="#E5E5E5"> hours for</font>

321
00:15:18,790 --> 00:15:23,650
<font color="#E5E5E5">Starks to set up but in our system for</font>

322
00:15:21,190 --> 00:15:27,730
<font color="#CCCCCC">the same</font><font color="#E5E5E5"> database</font><font color="#CCCCCC"> we do not we do need</font>

323
00:15:23,650 --> 00:15:29,380
<font color="#E5E5E5">to set up again for prove our time we</font>

324
00:15:27,730 --> 00:15:31,870
are<font color="#E5E5E5"> more than</font><font color="#CCCCCC"> hundred times</font><font color="#E5E5E5"> faster than</font>

325
00:15:29,380 --> 00:15:37,060
snark<font color="#E5E5E5"> and their worth in verification</font>

326
00:15:31,870 --> 00:15:39,070
and communication in a<font color="#CCCCCC"> follow-up work we</font>

327
00:15:37,060 --> 00:15:41,109
can further reduce the set-up<font color="#E5E5E5"> time</font><font color="#CCCCCC"> and</font>

328
00:15:39,070 --> 00:15:46,270
<font color="#E5E5E5">through times of our system by at least</font>

329
00:15:41,110 --> 00:15:50,080
<font color="#E5E5E5">four times next I will show you some</font>

330
00:15:46,270 --> 00:15:53,400
results<font color="#CCCCCC"> for updates in key</font><font color="#E5E5E5"> BCH there is</font>

331
00:15:50,080 --> 00:15:55,990
a Curie<font color="#E5E5E5"> to create a new table on the fly</font>

332
00:15:53,400 --> 00:15:58,090
the size<font color="#E5E5E5"> of that o table is two point</font>

333
00:15:55,990 --> 00:16:01,690
<font color="#E5E5E5">eight gigabytes and the size of new</font>

334
00:15:58,090 --> 00:16:04,390
table is still<font color="#CCCCCC"> 1.7 megabytes and here's</font>

335
00:16:01,690 --> 00:16:06,190
the performance<font color="#E5E5E5"> of our system as you can</font>

336
00:16:04,390 --> 00:16:08,230
<font color="#E5E5E5">see the prover takes half an hour the</font>

337
00:16:06,190 --> 00:16:10,090
verification<font color="#E5E5E5"> takes tens of milliseconds</font>

338
00:16:08,230 --> 00:16:13,720
<font color="#E5E5E5">but most importantly the total</font>

339
00:16:10,090 --> 00:16:15,850
communication<font color="#E5E5E5"> is only 85 kilobytes which</font>

340
00:16:13,720 --> 00:16:17,830
means neither of the old table<font color="#E5E5E5"> nor the</font>

341
00:16:15,850 --> 00:16:18,310
new table is ever transmitted back<font color="#CCCCCC"> to</font>

342
00:16:17,830 --> 00:16:20,740
the client

343
00:16:18,310 --> 00:16:23,109
but client still can<font color="#E5E5E5"> make sure that this</font>

344
00:16:20,740 --> 00:16:24,970
table is correctly generated and can

345
00:16:23,110 --> 00:16:27,880
<font color="#E5E5E5">even run other</font><font color="#CCCCCC"> seeker cures on a new</font>

346
00:16:24,970 --> 00:16:30,520
table verifiably<font color="#E5E5E5"> without</font><font color="#CCCCCC"> accessing</font><font color="#E5E5E5"> the</font>

347
00:16:27,880 --> 00:16:35,380
new table that's the power of expressive

348
00:16:30,520 --> 00:16:37,480
<font color="#CCCCCC">speaker updates so to sum up in Syria</font>

349
00:16:35,380 --> 00:16:40,480
<font color="#E5E5E5">sides we</font><font color="#CCCCCC"> propose a protocol for</font>

350
00:16:37,480 --> 00:16:42,190
verifiable<font color="#CCCCCC"> polynomial delegation using</font>

351
00:16:40,480 --> 00:16:43,690
it together with interactive proof we

352
00:16:42,190 --> 00:16:45,520
have<font color="#CCCCCC"> a verifiable database system that</font>

353
00:16:43,690 --> 00:16:48,670
<font color="#E5E5E5">can support delegation of the database</font>

354
00:16:45,520 --> 00:16:49,900
are very inputs<font color="#E5E5E5"> they have no</font><font color="#CCCCCC"> curious</font>

355
00:16:48,670 --> 00:16:53,500
specific pre-processing

356
00:16:49,900 --> 00:16:57,670
<font color="#E5E5E5">and we can support expressive updates on</font>

357
00:16:53,500 --> 00:17:00,670
the system size you show<font color="#CCCCCC"> that our</font><font color="#E5E5E5"> for</font>

358
00:16:57,670 --> 00:17:03,250
time is comparable to a customized<font color="#CCCCCC"> VP</font>

359
00:17:00,670 --> 00:17:05,490
and<font color="#CCCCCC"> setup time is much faster</font><font color="#E5E5E5"> and we</font>

360
00:17:03,250 --> 00:17:07,810
have a much better<font color="#CCCCCC"> expressionist</font>

361
00:17:05,490 --> 00:17:11,500
<font color="#CCCCCC">comparator snarks</font><font color="#E5E5E5"> we improve the</font>

362
00:17:07,810 --> 00:17:13,740
efficiency by orders of magnitude<font color="#E5E5E5"> that's</font>

363
00:17:11,500 --> 00:17:20,730
<font color="#E5E5E5">all my talk</font><font color="#CCCCCC"> thank you</font>

364
00:17:13,740 --> 00:17:23,009
[Applause]

365
00:17:20,730 --> 00:17:25,500
<font color="#E5E5E5">Ben</font><font color="#CCCCCC"> fuller Yukon</font><font color="#E5E5E5"> a couple of questions</font>

366
00:17:23,009 --> 00:17:27,240
if nobody else comes up<font color="#CCCCCC"> it seems like</font>

367
00:17:25,500 --> 00:17:30,360
your approach is<font color="#E5E5E5"> inherently not</font>

368
00:17:27,240 --> 00:17:32,070
concurrent<font color="#E5E5E5"> whereas snark</font><font color="#CCCCCC"> like it's a</font>

369
00:17:30,360 --> 00:17:33,299
single<font color="#CCCCCC"> message you you don't</font><font color="#E5E5E5"> need to</font>

370
00:17:32,070 --> 00:17:35,428
worry about<font color="#CCCCCC"> concurrently you're saying</font>

371
00:17:33,299 --> 00:17:37,799
that you<font color="#E5E5E5"> interactive so you can use the</font>

372
00:17:35,429 --> 00:17:40,620
fearsome ear<font color="#E5E5E5"> heuristic to reduce this to</font>

373
00:17:37,799 --> 00:17:42,090
<font color="#CCCCCC">non interactive are using random Oracle</font>

374
00:17:40,620 --> 00:17:45,479
<font color="#E5E5E5">and you don't have any problems with</font>

375
00:17:42,090 --> 00:17:48,149
your<font color="#CCCCCC"> VPD protocol</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> no that one is</font>

376
00:17:45,480 --> 00:17:49,740
again I<font color="#E5E5E5"> think no message team you do not</font>

377
00:17:48,149 --> 00:17:52,168
even need<font color="#E5E5E5"> a extra</font><font color="#CCCCCC"> round for</font><font color="#E5E5E5"> that</font>

378
00:17:49,740 --> 00:17:54,600
protocol<font color="#CCCCCC"> I</font><font color="#E5E5E5"> just send it right back</font><font color="#CCCCCC"> um</font>

379
00:17:52,169 --> 00:17:57,149
and can<font color="#E5E5E5"> you give a hint on how you</font>

380
00:17:54,600 --> 00:18:00,178
handle dynamism because it seems like

381
00:17:57,149 --> 00:18:02,668
<font color="#CCCCCC">you're digestions fixed her</font><font color="#E5E5E5"> or dynamic</font>

382
00:18:00,179 --> 00:18:05,279
<font color="#E5E5E5">how you handle updates yet because the</font>

383
00:18:02,669 --> 00:18:08,070
all food of the<font color="#CCCCCC"> circuit can also be a</font>

384
00:18:05,279 --> 00:18:09,629
<font color="#E5E5E5">commitment so what you need from</font><font color="#CCCCCC"> all</font>

385
00:18:08,070 --> 00:18:11,279
<font color="#CCCCCC">code is a random evaluation so the</font>

386
00:18:09,629 --> 00:18:14,250
server just<font color="#E5E5E5"> sends you a commitment of</font>

387
00:18:11,279 --> 00:18:16,590
the<font color="#E5E5E5"> output you use the VPD again to get</font>

388
00:18:14,250 --> 00:18:18,059
the random point<font color="#E5E5E5"> and then complete the</font>

389
00:18:16,590 --> 00:18:21,178
whole protocol so in this way you get a

390
00:18:18,059 --> 00:18:28,200
new commitment<font color="#E5E5E5"> for new database thank</font>

391
00:18:21,179 --> 00:18:30,529
you<font color="#CCCCCC"> I</font><font color="#E5E5E5"> very nice work</font>

392
00:18:28,200 --> 00:18:33,080
thank you I<font color="#E5E5E5"> think early</font><font color="#CCCCCC"> on you said that</font>

393
00:18:30,529 --> 00:18:35,429
there was some reduction in

394
00:18:33,080 --> 00:18:39,600
expressiveness with your system with

395
00:18:35,429 --> 00:18:41,519
respect to snark<font color="#CCCCCC"> you speak</font><font color="#E5E5E5"> to like what</font>

396
00:18:39,600 --> 00:18:44,519
specifically you're you're referring<font color="#CCCCCC"> to</font>

397
00:18:41,519 --> 00:18:46,470
<font color="#CCCCCC">or you mean the slight difference yeah</font>

398
00:18:44,519 --> 00:18:48,960
like what what sorts of<font color="#E5E5E5"> things</font>

399
00:18:46,470 --> 00:18:52,169
can't you do you know with with<font color="#E5E5E5"> your</font>

400
00:18:48,960 --> 00:18:54,269
<font color="#E5E5E5">system as opposed to your solar systems</font>

401
00:18:52,169 --> 00:18:57,059
<font color="#E5E5E5">actually it kind of depends on the</font>

402
00:18:54,269 --> 00:18:59,850
<font color="#CCCCCC">efficiency so interact improve is in</font>

403
00:18:57,059 --> 00:19:02,759
<font color="#E5E5E5">particular efficient if the circuit is</font>

404
00:18:59,850 --> 00:19:05,459
the regular or can be represented<font color="#E5E5E5"> as the</font>

405
00:19:02,759 --> 00:19:08,610
data parallel<font color="#E5E5E5"> circuit so for these</font>

406
00:19:05,460 --> 00:19:10,860
things<font color="#E5E5E5"> we can get such good numbers and</font>

407
00:19:08,610 --> 00:19:12,600
meet when we<font color="#E5E5E5"> use it</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> verifiable</font>

408
00:19:10,860 --> 00:19:15,090
database<font color="#CCCCCC"> those psycho theories are</font>

409
00:19:12,600 --> 00:19:18,418
inherently data parallel but if the

410
00:19:15,090 --> 00:19:19,889
circuit is a totally random we can still

411
00:19:18,419 --> 00:19:22,169
<font color="#E5E5E5">run the protocol but the efficiency</font>

412
00:19:19,889 --> 00:19:23,510
<font color="#E5E5E5">might be harmed a little bit so that's</font>

413
00:19:22,169 --> 00:19:26,150
why I'm saying this

414
00:19:23,510 --> 00:19:29,300
it's a little bit difference<font color="#E5E5E5"> between</font><font color="#CCCCCC"> art</font>

415
00:19:26,150 --> 00:19:32,570
<font color="#E5E5E5">and our system</font><font color="#CCCCCC"> did you come across sort</font>

416
00:19:29,300 --> 00:19:35,389
of elements of sort of supporting sequel

417
00:19:32,570 --> 00:19:37,280
that that were you know that that sort

418
00:19:35,390 --> 00:19:38,870
of<font color="#E5E5E5"> were inefficient in that way or were</font>

419
00:19:37,280 --> 00:19:40,370
you able<font color="#E5E5E5"> to sort of</font><font color="#CCCCCC"> find you know</font>

420
00:19:38,870 --> 00:19:43,879
because if<font color="#E5E5E5"> you think about the code</font>

421
00:19:40,370 --> 00:19:45,199
language<font color="#E5E5E5"> when you issue</font><font color="#CCCCCC"> this Sicarii</font><font color="#E5E5E5"> you</font>

422
00:19:43,880 --> 00:19:47,150
don't even<font color="#E5E5E5"> know what is the database</font>

423
00:19:45,200 --> 00:19:51,380
<font color="#E5E5E5">which</font><font color="#CCCCCC"> means that the seagull curry</font><font color="#E5E5E5"> is a</font>

424
00:19:47,150 --> 00:19:53,990
succinct representation<font color="#E5E5E5"> and will be run</font>

425
00:19:51,380 --> 00:19:56,170
<font color="#E5E5E5">on every row of</font><font color="#CCCCCC"> the database</font><font color="#E5E5E5"> no matter</font>

426
00:19:53,990 --> 00:19:58,910
how many<font color="#E5E5E5"> rows are there which means that</font>

427
00:19:56,170 --> 00:20:01,760
<font color="#E5E5E5">unless you express your psycho career as</font>

428
00:19:58,910 --> 00:20:08,540
large as a database<font color="#E5E5E5"> otherwise it's very</font>

429
00:20:01,760 --> 00:20:10,590
<font color="#CCCCCC">hardly better parallel okay okay okay so</font>

430
00:20:08,540 --> 00:20:16,139
<font color="#E5E5E5">that's a function speak again</font>

431
00:20:10,590 --> 00:20:16,139
[Applause]

