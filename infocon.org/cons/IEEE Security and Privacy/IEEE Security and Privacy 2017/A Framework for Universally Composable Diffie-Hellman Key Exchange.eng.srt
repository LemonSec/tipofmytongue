1
00:00:08,039 --> 00:00:13,590
thank you very<font color="#E5E5E5"> much</font><font color="#CCCCCC"> for the introduction</font>

2
00:00:09,900 --> 00:00:15,930
<font color="#E5E5E5">so I want to start my</font><font color="#CCCCCC"> talk by first</font>

3
00:00:13,590 --> 00:00:19,680
<font color="#E5E5E5">briefly explaining the overall goal of</font>

4
00:00:15,930 --> 00:00:21,960
<font color="#CCCCCC">all</font><font color="#E5E5E5"> work so when we define security</font>

5
00:00:19,680 --> 00:00:24,089
protocols<font color="#E5E5E5"> use a lot of different</font>

6
00:00:21,960 --> 00:00:27,089
cryptographic primitives<font color="#CCCCCC"> to</font><font color="#E5E5E5"> accomplish</font>

7
00:00:24,089 --> 00:00:29,549
certain goals<font color="#E5E5E5"> for example use symmetric</font>

8
00:00:27,089 --> 00:00:32,098
encryption<font color="#CCCCCC"> we use Mac's</font>

9
00:00:29,550 --> 00:00:35,130
<font color="#E5E5E5">digital signatures</font><font color="#CCCCCC"> if you have and key</font>

10
00:00:32,098 --> 00:00:37,800
exchanges<font color="#CCCCCC"> and key</font><font color="#E5E5E5"> duration just to name</font>

11
00:00:35,130 --> 00:00:40,530
a<font color="#E5E5E5"> few of</font><font color="#CCCCCC"> them then when we analyze the</font>

12
00:00:37,800 --> 00:00:43,610
<font color="#E5E5E5">protocol we have</font><font color="#CCCCCC"> to reduce its security</font>

13
00:00:40,530 --> 00:00:45,930
to the security of<font color="#E5E5E5"> all of the primitives</font>

14
00:00:43,610 --> 00:00:50,070
<font color="#E5E5E5">once you have done this for a single</font>

15
00:00:45,930 --> 00:00:52,859
protocol<font color="#CCCCCC"> and we want to analyze a</font>

16
00:00:50,070 --> 00:00:54,809
different<font color="#CCCCCC"> protocol then of course we</font>

17
00:00:52,859 --> 00:00:57,059
have to redo<font color="#CCCCCC"> all of</font><font color="#E5E5E5"> the reductions again</font>

18
00:00:54,809 --> 00:00:59,940
and if we want<font color="#E5E5E5"> to build a</font><font color="#CCCCCC"> different</font>

19
00:00:57,059 --> 00:01:02,218
protocol<font color="#E5E5E5"> again we have to redo</font><font color="#CCCCCC"> all of</font>

20
00:00:59,940 --> 00:01:04,319
<font color="#E5E5E5">the reductions even if we use the exact</font>

21
00:01:02,219 --> 00:01:07,530
same primitives<font color="#CCCCCC"> that we used</font><font color="#E5E5E5"> for the</font>

22
00:01:04,319 --> 00:01:12,210
previous<font color="#E5E5E5"> protocols</font><font color="#CCCCCC"> and so on and so</font>

23
00:01:07,530 --> 00:01:15,030
forth so<font color="#CCCCCC"> we were</font><font color="#E5E5E5"> wondering is there any</font>

24
00:01:12,210 --> 00:01:17,789
<font color="#E5E5E5">way to get rid of these</font><font color="#CCCCCC"> reductions and</font>

25
00:01:15,030 --> 00:01:21,720
<font color="#E5E5E5">the</font><font color="#CCCCCC"> way we</font><font color="#E5E5E5"> want to accomplish this is to</font>

26
00:01:17,790 --> 00:01:24,270
<font color="#CCCCCC">use modular</font><font color="#E5E5E5"> proofs</font><font color="#CCCCCC"> that is our</font><font color="#E5E5E5"> idea is</font>

27
00:01:21,720 --> 00:01:27,450
why can't we separate the reductions

28
00:01:24,270 --> 00:01:29,780
from<font color="#E5E5E5"> the actual protocol definitions to</font>

29
00:01:27,450 --> 00:01:33,540
the reductions just once and<font color="#CCCCCC"> then</font>

30
00:01:29,780 --> 00:01:37,380
<font color="#CCCCCC">analyze arbitrarily many</font><font color="#E5E5E5"> protocols based</font>

31
00:01:33,540 --> 00:01:39,240
on these results<font color="#E5E5E5"> and modular proofs are</font>

32
00:01:37,380 --> 00:01:41,910
provided by<font color="#E5E5E5"> Universal composability</font>

33
00:01:39,240 --> 00:01:45,630
models<font color="#E5E5E5"> which is what we used for</font><font color="#CCCCCC"> our</font>

34
00:01:41,910 --> 00:01:48,420
approach so I want<font color="#CCCCCC"> to briefly explain</font>

35
00:01:45,630 --> 00:01:51,750
<font color="#CCCCCC">what Universal composability models are</font>

36
00:01:48,420 --> 00:01:55,230
and then explain our approach in more

37
00:01:51,750 --> 00:01:58,500
detail in such models we use simulate

38
00:01:55,230 --> 00:02:00,140
ability to define security<font color="#E5E5E5"> that is we</font>

39
00:01:58,500 --> 00:02:03,420
are<font color="#E5E5E5"> always talking about two different</font>

40
00:02:00,140 --> 00:02:06,740
protocols<font color="#E5E5E5"> one of them is the real</font>

41
00:02:03,420 --> 00:02:09,989
protocol which we want<font color="#E5E5E5"> to analyze</font><font color="#CCCCCC"> and</font>

42
00:02:06,740 --> 00:02:12,209
finally prove secure the other protocol

43
00:02:09,989 --> 00:02:16,019
<font color="#E5E5E5">is called</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> ideal protocol or ideal</font>

44
00:02:12,209 --> 00:02:17,420
functionality this<font color="#E5E5E5"> is essentially a</font>

45
00:02:16,019 --> 00:02:20,270
perfect that

46
00:02:17,420 --> 00:02:22,609
creation of some<font color="#E5E5E5"> tasks</font><font color="#CCCCCC"> in other words</font>

47
00:02:20,270 --> 00:02:24,560
<font color="#E5E5E5">this ideal protocol is</font><font color="#CCCCCC"> secure</font><font color="#E5E5E5"> by</font>

48
00:02:22,610 --> 00:02:27,470
definition<font color="#E5E5E5"> there's no way to attack it</font>

49
00:02:24,560 --> 00:02:30,170
<font color="#E5E5E5">now we say that the real protocol</font>

50
00:02:27,470 --> 00:02:33,830
realizes the<font color="#E5E5E5"> ideal protocol or the real</font>

51
00:02:30,170 --> 00:02:36,109
protocol is secure if for<font color="#CCCCCC"> all possible</font>

52
00:02:33,830 --> 00:02:38,750
adversaries<font color="#E5E5E5"> attacking the real protocol</font>

53
00:02:36,110 --> 00:02:40,940
on the network we<font color="#CCCCCC"> can find an ideal</font><font color="#E5E5E5"> at</font>

54
00:02:38,750 --> 00:02:43,790
the very attacking the ideal protocol on

55
00:02:40,940 --> 00:02:46,640
<font color="#CCCCCC">the</font><font color="#E5E5E5"> network such that no environment can</font>

56
00:02:43,790 --> 00:02:48,890
distinguish both cases<font color="#CCCCCC"> or</font><font color="#E5E5E5"> to put it a</font>

57
00:02:46,640 --> 00:02:51,470
bit<font color="#E5E5E5"> more informally it does not matter</font>

58
00:02:48,890 --> 00:02:54,079
whether we attack the real protocol we

59
00:02:51,470 --> 00:02:56,390
could attack the<font color="#CCCCCC"> ABA protocol as well to</font>

60
00:02:54,080 --> 00:02:58,549
obtain<font color="#E5E5E5"> the same information however</font>

61
00:02:56,390 --> 00:03:01,069
<font color="#E5E5E5">because the ideal protocol is secure by</font>

62
00:02:58,549 --> 00:03:04,190
definition<font color="#CCCCCC"> the real protocol cannot be</font>

63
00:03:01,069 --> 00:03:05,958
any worse there are several<font color="#CCCCCC"> Universal</font>

64
00:03:04,190 --> 00:03:09,620
composability models in the literature

65
00:03:05,959 --> 00:03:13,130
for<font color="#CCCCCC"> example the UCI ATM and the guc</font>

66
00:03:09,620 --> 00:03:15,440
model<font color="#E5E5E5"> in our work</font><font color="#CCCCCC"> we use the</font><font color="#E5E5E5"> IRT</font><font color="#CCCCCC"> m model</font>

67
00:03:13,130 --> 00:03:19,579
which<font color="#CCCCCC"> seem</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be the most suitable</font><font color="#E5E5E5"> one</font>

68
00:03:15,440 --> 00:03:21,829
due to<font color="#E5E5E5"> its flexibility so let</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> explain</font>

69
00:03:19,580 --> 00:03:24,820
<font color="#E5E5E5">and more detail how we want</font><font color="#CCCCCC"> to get rid</font>

70
00:03:21,829 --> 00:03:28,579
of reduction<font color="#CCCCCC"> tools our approach</font>

71
00:03:24,820 --> 00:03:31,450
<font color="#E5E5E5">essentially consists of three steps in</font>

72
00:03:28,579 --> 00:03:34,130
the first<font color="#E5E5E5"> step we provide an ideal</font>

73
00:03:31,450 --> 00:03:37,459
functionality called<font color="#E5E5E5"> F crypto which</font>

74
00:03:34,130 --> 00:03:40,609
contains<font color="#CCCCCC"> ideas</font><font color="#E5E5E5"> specifications of several</font>

75
00:03:37,459 --> 00:03:43,010
cryptographic primitives<font color="#E5E5E5"> we also provide</font>

76
00:03:40,609 --> 00:03:45,170
another library which<font color="#CCCCCC"> contains all of</font>

77
00:03:43,010 --> 00:03:49,160
the implementations of these primitives

78
00:03:45,170 --> 00:03:50,119
and then we show that P crypto realizes

79
00:03:49,160 --> 00:03:52,609
<font color="#E5E5E5">s crypto</font>

80
00:03:50,120 --> 00:03:54,920
this is exactly<font color="#CCCCCC"> the step where we have</font>

81
00:03:52,609 --> 00:03:57,380
to execute<font color="#CCCCCC"> all reductions based on</font>

82
00:03:54,920 --> 00:03:59,839
standard assumptions however this is<font color="#CCCCCC"> a</font>

83
00:03:57,380 --> 00:04:01,340
<font color="#CCCCCC">once and</font><font color="#E5E5E5"> for all effort once we have</font>

84
00:03:59,840 --> 00:04:04,430
done this we can<font color="#CCCCCC"> use it to analyze</font>

85
00:04:01,340 --> 00:04:07,609
<font color="#E5E5E5">protocol so say</font><font color="#CCCCCC"> for example we want</font><font color="#E5E5E5"> to</font>

86
00:04:04,430 --> 00:04:11,090
analyze<font color="#E5E5E5"> some protocol</font><font color="#CCCCCC"> q now</font><font color="#E5E5E5"> we can use</font>

87
00:04:07,609 --> 00:04:13,400
<font color="#E5E5E5">the ideal crypto library</font><font color="#CCCCCC"> as crypto as a</font>

88
00:04:11,090 --> 00:04:16,548
subroutine<font color="#CCCCCC"> to model the cryptographic</font>

89
00:04:13,400 --> 00:04:18,590
primitives in this<font color="#E5E5E5"> protocol in</font><font color="#CCCCCC"> a</font>

90
00:04:16,548 --> 00:04:21,048
<font color="#CCCCCC">security proof we then have to</font><font color="#E5E5E5"> show</font><font color="#CCCCCC"> that</font>

91
00:04:18,589 --> 00:04:24,349
it realizes some ideas functionality F

92
00:04:21,048 --> 00:04:26,390
<font color="#E5E5E5">Prime so say for example use a key</font>

93
00:04:24,350 --> 00:04:27,850
exchange protocol so<font color="#CCCCCC"> it should realize</font>

94
00:04:26,390 --> 00:04:30,909
the ID a key exchange

95
00:04:27,850 --> 00:04:34,240
<font color="#CCCCCC">charity</font><font color="#E5E5E5"> importantly in this proof we</font>

96
00:04:30,910 --> 00:04:36,220
only have to use<font color="#E5E5E5"> intuitive</font><font color="#CCCCCC"> information</font>

97
00:04:34,240 --> 00:04:38,890
theoretic<font color="#E5E5E5"> arguments there are no</font>

98
00:04:36,220 --> 00:04:40,990
reductions involved anymore<font color="#CCCCCC"> and</font><font color="#E5E5E5"> usually</font>

99
00:04:38,890 --> 00:04:42,969
we don't even<font color="#E5E5E5"> need any probably</font><font color="#CCCCCC"> stick</font>

100
00:04:40,990 --> 00:04:45,360
reasoning<font color="#CCCCCC"> at least as far as the</font>

101
00:04:42,970 --> 00:04:48,940
<font color="#E5E5E5">primitive supported by a cripple</font>

102
00:04:45,360 --> 00:04:50,670
<font color="#E5E5E5">concerned once we have done this</font><font color="#CCCCCC"> the</font>

103
00:04:48,940 --> 00:04:53,469
third step is essentially for free

104
00:04:50,670 --> 00:04:56,110
<font color="#E5E5E5">namely we can apply the composition</font>

105
00:04:53,470 --> 00:04:58,720
theorem from<font color="#E5E5E5"> the ITM model to combine</font>

106
00:04:56,110 --> 00:05:01,930
both<font color="#E5E5E5"> security results and conclude that</font>

107
00:04:58,720 --> 00:05:03,700
<font color="#CCCCCC">even if we base q on the actual</font>

108
00:05:01,930 --> 00:05:06,430
implementations of the cryptographic

109
00:05:03,700 --> 00:05:08,830
primitives<font color="#CCCCCC"> the resulting protocol is</font>

110
00:05:06,430 --> 00:05:10,390
still secure now if you want to analyze

111
00:05:08,830 --> 00:05:14,020
<font color="#CCCCCC">a</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> protocol</font>

112
00:05:10,390 --> 00:05:16,450
say<font color="#CCCCCC"> a protocol</font><font color="#E5E5E5"> R then we only have</font><font color="#CCCCCC"> to</font>

113
00:05:14,020 --> 00:05:19,390
<font color="#E5E5E5">redo the second step which as I said</font>

114
00:05:16,450 --> 00:05:21,550
doesn't<font color="#E5E5E5"> contain any reductions and</font><font color="#CCCCCC"> the</font>

115
00:05:19,390 --> 00:05:24,460
<font color="#CCCCCC">third that</font><font color="#E5E5E5"> again is for free whether</font>

116
00:05:21,550 --> 00:05:26,590
<font color="#E5E5E5">first that doesn't change at all this is</font>

117
00:05:24,460 --> 00:05:29,200
in contrast to<font color="#CCCCCC"> game based security</font>

118
00:05:26,590 --> 00:05:32,039
analysis where<font color="#CCCCCC"> we would have</font><font color="#E5E5E5"> to redo all</font>

119
00:05:29,200 --> 00:05:34,450
<font color="#E5E5E5">of the reductions for the new protocol</font>

120
00:05:32,040 --> 00:05:38,440
<font color="#E5E5E5">let's take a closer look at the first</font>

121
00:05:34,450 --> 00:05:40,210
<font color="#E5E5E5">step so originally the</font><font color="#CCCCCC"> ideal</font><font color="#E5E5E5"> crypt of</font>

122
00:05:38,440 --> 00:05:43,120
functionality was proposed by<font color="#E5E5E5"> Chris</font>

123
00:05:40,210 --> 00:05:44,710
<font color="#E5E5E5">Cosentino</font><font color="#CCCCCC"> tar and it</font><font color="#E5E5E5"> already supported</font>

124
00:05:43,120 --> 00:05:47,590
several cryptographic primitives

125
00:05:44,710 --> 00:05:51,280
including encryption schemes signatures

126
00:05:47,590 --> 00:05:52,989
<font color="#E5E5E5">max key derivation and monsters all of</font>

127
00:05:51,280 --> 00:05:55,659
them<font color="#E5E5E5"> could also be used with each other</font>

128
00:05:52,990 --> 00:05:57,520
so for example I could encrypt the<font color="#E5E5E5"> net</font>

129
00:05:55,660 --> 00:06:00,280
key<font color="#CCCCCC"> send it to someone</font><font color="#E5E5E5"> else</font>

130
00:05:57,520 --> 00:06:03,930
so that that one could verify a<font color="#CCCCCC"> Meg for</font>

131
00:06:00,280 --> 00:06:06,820
<font color="#E5E5E5">example however there was one major</font>

132
00:06:03,930 --> 00:06:08,440
shortcoming of a<font color="#E5E5E5"> cripple namely it</font>

133
00:06:06,820 --> 00:06:10,960
didn't<font color="#E5E5E5"> support</font><font color="#CCCCCC"> with your</font><font color="#E5E5E5"> Hellman key</font>

134
00:06:08,440 --> 00:06:12,580
exchanges which are an important

135
00:06:10,960 --> 00:06:16,840
building<font color="#E5E5E5"> block</font><font color="#CCCCCC"> for many</font><font color="#E5E5E5"> modern</font>

136
00:06:12,580 --> 00:06:19,210
cryptographic protocols so what we did

137
00:06:16,840 --> 00:06:21,690
in our work was that<font color="#E5E5E5"> we added support</font>

138
00:06:19,210 --> 00:06:24,780
<font color="#E5E5E5">for</font><font color="#CCCCCC"> idealize</font><font color="#E5E5E5"> diffie-hellman key exchange</font>

139
00:06:21,690 --> 00:06:27,910
based on the decisional diffie-hellman

140
00:06:24,780 --> 00:06:30,659
assumption of course<font color="#E5E5E5"> we also provided a</font>

141
00:06:27,910 --> 00:06:33,700
realization for this new<font color="#E5E5E5"> library and</font>

142
00:06:30,660 --> 00:06:35,380
finally proved that<font color="#CCCCCC"> P crypto indeed</font>

143
00:06:33,700 --> 00:06:37,659
realizes F crypto

144
00:06:35,380 --> 00:06:41,289
based on standard assumptions<font color="#E5E5E5"> and for</font>

145
00:06:37,660 --> 00:06:43,059
where behaved environments so<font color="#CCCCCC"> prove</font>

146
00:06:41,289 --> 00:06:45,699
the first that was one<font color="#E5E5E5"> of the major</font>

147
00:06:43,059 --> 00:06:47,439
<font color="#E5E5E5">contributions</font><font color="#CCCCCC"> of our</font><font color="#E5E5E5"> work and the</font>

148
00:06:45,699 --> 00:06:49,809
<font color="#E5E5E5">following I want to give you an</font>

149
00:06:47,439 --> 00:06:51,939
<font color="#E5E5E5">intuition of how half-crippled can be</font>

150
00:06:49,809 --> 00:06:55,169
used in the second step by giving you

151
00:06:51,939 --> 00:06:58,990
some examples<font color="#CCCCCC"> of which kind of API calls</font>

152
00:06:55,169 --> 00:07:01,839
<font color="#E5E5E5">might occur during</font><font color="#CCCCCC"> a protocol execution</font>

153
00:06:58,990 --> 00:07:03,819
and how have<font color="#CCCCCC"> crypto handled is so</font>

154
00:07:01,839 --> 00:07:05,919
suppose we<font color="#E5E5E5"> have to honor</font><font color="#CCCCCC"> student</font>

155
00:07:03,819 --> 00:07:08,770
elephant Bob<font color="#E5E5E5"> they want to execute</font><font color="#CCCCCC"> a</font>

156
00:07:05,919 --> 00:07:10,628
<font color="#E5E5E5">protocol together and they use</font><font color="#CCCCCC"> of crypto</font>

157
00:07:08,770 --> 00:07:14,080
to get access<font color="#E5E5E5"> to cryptographic</font>

158
00:07:10,629 --> 00:07:16,180
primitives now tune the<font color="#E5E5E5"> protocol LS</font>

159
00:07:14,080 --> 00:07:17,919
might<font color="#CCCCCC"> decide</font><font color="#E5E5E5"> that she wants to exchange</font>

160
00:07:16,180 --> 00:07:20,529
<font color="#CCCCCC">the key word spot where the</font>

161
00:07:17,919 --> 00:07:22,748
diffie-hellman key exchange<font color="#CCCCCC"> so she</font><font color="#E5E5E5"> asked</font>

162
00:07:20,529 --> 00:07:25,539
<font color="#E5E5E5">us could</font><font color="#CCCCCC"> - to generate a new</font><font color="#E5E5E5"> DC</font><font color="#CCCCCC"> haman</font>

163
00:07:22,749 --> 00:07:28,029
key share of crypto<font color="#E5E5E5"> responds by</font>

164
00:07:25,539 --> 00:07:30,610
providing the public<font color="#E5E5E5"> part G to the a and</font>

165
00:07:28,029 --> 00:07:33,039
the pointer to<font color="#E5E5E5"> the secret exponent a</font>

166
00:07:30,610 --> 00:07:35,680
which<font color="#E5E5E5"> can then</font><font color="#CCCCCC"> be used</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> perform</font>

167
00:07:33,039 --> 00:07:37,839
various operations<font color="#CCCCCC"> it's important</font><font color="#E5E5E5"> to</font>

168
00:07:35,680 --> 00:07:40,330
note that LS really receives the extra

169
00:07:37,839 --> 00:07:43,419
bit string G to the a which<font color="#CCCCCC"> you can use</font>

170
00:07:40,330 --> 00:07:45,490
to<font color="#CCCCCC"> perform computations or to embed it</font>

171
00:07:43,419 --> 00:07:47,709
in the message<font color="#E5E5E5"> to Bob it's not</font><font color="#CCCCCC"> like</font>

172
00:07:45,490 --> 00:07:50,800
symbolic analysis where this would just

173
00:07:47,709 --> 00:07:55,389
be<font color="#CCCCCC"> some abstract term which you cannot</font>

174
00:07:50,800 --> 00:07:57,849
really<font color="#E5E5E5"> use to do much else also</font><font color="#CCCCCC"> F crypto</font>

175
00:07:55,389 --> 00:07:59,949
provides some security guarantees for

176
00:07:57,849 --> 00:08:02,050
these values<font color="#CCCCCC"> on the one hand it</font>

177
00:07:59,949 --> 00:08:04,689
guarantees that no key has already<font color="#E5E5E5"> been</font>

178
00:08:02,050 --> 00:08:06,879
<font color="#E5E5E5">created from this on the other hand it</font>

179
00:08:04,689 --> 00:08:09,639
also guarantees<font color="#CCCCCC"> that this exponent</font><font color="#E5E5E5"> now</font>

180
00:08:06,879 --> 00:08:11,919
is unique to Ellis only<font color="#CCCCCC"> LS ever gets</font>

181
00:08:09,639 --> 00:08:14,649
access to<font color="#E5E5E5"> this exponent</font><font color="#CCCCCC"> it is not</font>

182
00:08:11,919 --> 00:08:16,959
possible that any other user by accident

183
00:08:14,649 --> 00:08:20,649
or even<font color="#E5E5E5"> on purpose generates the same</font>

184
00:08:16,959 --> 00:08:24,159
exponent<font color="#E5E5E5"> pop on his</font><font color="#CCCCCC"> side can do the same</font>

185
00:08:20,649 --> 00:08:27,219
also<font color="#E5E5E5"> ask</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the fisherman share and he</font>

186
00:08:24,159 --> 00:08:29,339
gets<font color="#CCCCCC"> G to be G to the B which</font><font color="#E5E5E5"> he can</font>

187
00:08:27,219 --> 00:08:32,438
<font color="#E5E5E5">then send as part of a protocol</font><font color="#CCCCCC"> to Ellis</font>

188
00:08:29,339 --> 00:08:35,078
once LS s receive G to the B she can

189
00:08:32,438 --> 00:08:36,458
combine it with our own<font color="#E5E5E5"> secret exponent</font>

190
00:08:35,078 --> 00:08:39,399
just<font color="#CCCCCC"> as we would expect</font>

191
00:08:36,458 --> 00:08:42,458
and<font color="#E5E5E5"> if</font><font color="#CCCCCC"> crypto</font><font color="#E5E5E5"> generate a new key G to</font>

192
00:08:39,399 --> 00:08:45,250
<font color="#CCCCCC">the C which is sent to Ellis note that I</font>

193
00:08:42,458 --> 00:08:47,079
didn't write G to the<font color="#E5E5E5"> a B but G to the</font>

194
00:08:45,250 --> 00:08:49,870
<font color="#CCCCCC">seed</font><font color="#E5E5E5"> because this key is really</font>

195
00:08:47,079 --> 00:08:52,329
<font color="#E5E5E5">independent of the exponents that were</font>

196
00:08:49,870 --> 00:08:54,820
used to create it<font color="#E5E5E5"> instead of crypto</font>

197
00:08:52,329 --> 00:08:57,010
provides<font color="#E5E5E5"> abstract security guarantees</font>

198
00:08:54,820 --> 00:08:59,230
in this<font color="#E5E5E5"> case it is guaranteed that only</font>

199
00:08:57,010 --> 00:09:01,840
the<font color="#E5E5E5"> honest users elephant Bob can ever</font>

200
00:08:59,230 --> 00:09:05,680
get access to this key and use it to

201
00:09:01,840 --> 00:09:08,110
perform<font color="#E5E5E5"> whatever operation now that we</font>

202
00:09:05,680 --> 00:09:10,780
have this key we can<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example derive</font>

203
00:09:08,110 --> 00:09:12,760
other<font color="#E5E5E5"> keys from it say at some point in</font>

204
00:09:10,780 --> 00:09:15,069
the protocol<font color="#CCCCCC"> Ellis figures I need to</font>

205
00:09:12,760 --> 00:09:18,130
send some secret to Bob<font color="#E5E5E5"> so I need a</font>

206
00:09:15,070 --> 00:09:20,740
symmetric encryption key<font color="#CCCCCC"> grf crypto for</font>

207
00:09:18,130 --> 00:09:23,620
this key and obtains a pointer to<font color="#CCCCCC"> a new</font>

208
00:09:20,740 --> 00:09:25,900
encryption<font color="#E5E5E5"> key in this case</font><font color="#CCCCCC"> our security</font>

209
00:09:23,620 --> 00:09:28,690
guarantee is<font color="#CCCCCC"> that no one besides</font><font color="#E5E5E5"> those</font>

210
00:09:25,900 --> 00:09:31,959
that already<font color="#E5E5E5"> know G to</font><font color="#CCCCCC"> the C can be</font><font color="#E5E5E5"> like</font>

211
00:09:28,690 --> 00:09:34,480
the same key but on his side once he has

212
00:09:31,960 --> 00:09:38,020
received<font color="#CCCCCC"> alice's share G to the a can</font>

213
00:09:34,480 --> 00:09:40,270
execute the same steps and at the end he

214
00:09:38,020 --> 00:09:42,939
<font color="#E5E5E5">will also have</font><font color="#CCCCCC"> a pointer to the same key</font>

215
00:09:40,270 --> 00:09:45,610
in F<font color="#E5E5E5"> cripple this key can then be used</font>

216
00:09:42,940 --> 00:09:48,370
<font color="#CCCCCC">to encrypt messages</font><font color="#E5E5E5"> so say</font><font color="#CCCCCC"> Ellis wants</font>

217
00:09:45,610 --> 00:09:50,740
<font color="#CCCCCC">to send some message m she will obtain a</font>

218
00:09:48,370 --> 00:09:52,870
<font color="#CCCCCC">ciphertext buy of</font><font color="#E5E5E5"> Krypton however</font>

219
00:09:50,740 --> 00:09:55,420
instead<font color="#E5E5E5"> of directly encrypting the</font>

220
00:09:52,870 --> 00:09:57,430
message of crypto chooses a random<font color="#CCCCCC"> bit</font>

221
00:09:55,420 --> 00:10:00,189
string of the same length and<font color="#E5E5E5"> encrypts</font>

222
00:09:57,430 --> 00:10:02,229
that one this way we have to<font color="#CCCCCC"> guarantee</font>

223
00:10:00,190 --> 00:10:04,380
that<font color="#E5E5E5"> even a computationally unbounded</font>

224
00:10:02,230 --> 00:10:07,240
adversary<font color="#E5E5E5"> tried to attack the ciphertext</font>

225
00:10:04,380 --> 00:10:09,220
<font color="#CCCCCC">there only information</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> he can</font>

226
00:10:07,240 --> 00:10:11,680
receive from the ciphertext<font color="#E5E5E5"> by</font>

227
00:10:09,220 --> 00:10:12,370
definition is<font color="#E5E5E5"> the length of the</font><font color="#CCCCCC"> original</font>

228
00:10:11,680 --> 00:10:15,489
message

229
00:10:12,370 --> 00:10:18,640
so once<font color="#CCCCCC"> Bob's receives</font><font color="#E5E5E5"> this ciphertext</font>

230
00:10:15,490 --> 00:10:21,390
<font color="#CCCCCC">he can decrypt it and</font><font color="#E5E5E5"> will obtain the</font>

231
00:10:18,640 --> 00:10:24,550
original<font color="#E5E5E5"> message</font><font color="#CCCCCC"> as we would expect</font>

232
00:10:21,390 --> 00:10:26,620
<font color="#E5E5E5">notice is</font><font color="#CCCCCC"> just one example of some</font><font color="#E5E5E5"> of</font>

233
00:10:24,550 --> 00:10:28,449
the operations there are many more we

234
00:10:26,620 --> 00:10:30,520
could<font color="#E5E5E5"> have also</font><font color="#CCCCCC"> derived the net key we</font>

235
00:10:28,450 --> 00:10:32,890
could have<font color="#E5E5E5"> encrypted</font><font color="#CCCCCC"> that meki and send</font>

236
00:10:30,520 --> 00:10:35,230
it<font color="#CCCCCC"> to Bob we could have</font><font color="#E5E5E5"> used digital</font>

237
00:10:32,890 --> 00:10:39,340
<font color="#E5E5E5">signatures to provide some kind of</font>

238
00:10:35,230 --> 00:10:41,890
authentication<font color="#CCCCCC"> now I've only talked</font>

239
00:10:39,340 --> 00:10:44,260
about<font color="#E5E5E5"> honest users using a crypto so</font>

240
00:10:41,890 --> 00:10:47,110
what about<font color="#CCCCCC"> this honest</font><font color="#E5E5E5"> users or users</font>

241
00:10:44,260 --> 00:10:49,420
owning corrupted keys<font color="#CCCCCC"> of crypto also</font>

242
00:10:47,110 --> 00:10:53,530
models this setting and it does so by

243
00:10:49,420 --> 00:10:55,870
<font color="#E5E5E5">separating the keys into two sets one of</font>

244
00:10:53,530 --> 00:10:57,400
them are the keys owned by honest users

245
00:10:55,870 --> 00:10:59,920
<font color="#E5E5E5">these</font><font color="#CCCCCC"> are the keys where we have</font>

246
00:10:57,400 --> 00:11:01,600
<font color="#E5E5E5">security guarantees and the other keys</font>

247
00:10:59,920 --> 00:11:03,550
are those<font color="#E5E5E5"> that are corrupted and</font>

248
00:11:01,600 --> 00:11:06,040
potentially known to the adversary<font color="#E5E5E5"> in</font>

249
00:11:03,550 --> 00:11:08,199
this case<font color="#CCCCCC"> F crypto cannot provide</font><font color="#E5E5E5"> any</font>

250
00:11:06,040 --> 00:11:09,969
guarantees<font color="#E5E5E5"> that</font><font color="#CCCCCC"> also say</font>

251
00:11:08,200 --> 00:11:12,550
for example someone<font color="#E5E5E5"> what to</font><font color="#CCCCCC"> improve the</font>

252
00:11:09,970 --> 00:11:15,550
message with a corrupted<font color="#E5E5E5"> key in this</font>

253
00:11:12,550 --> 00:11:18,400
<font color="#E5E5E5">case</font><font color="#CCCCCC"> of cripple just directly outputs</font>

254
00:11:15,550 --> 00:11:20,410
the actual encryption just as as the

255
00:11:18,400 --> 00:11:23,410
implementation<font color="#E5E5E5"> pre crippled with you</font>

256
00:11:20,410 --> 00:11:25,150
<font color="#E5E5E5">again this is just an example the same</font>

257
00:11:23,410 --> 00:11:28,569
holds also for<font color="#E5E5E5"> all of the other</font>

258
00:11:25,150 --> 00:11:31,270
<font color="#E5E5E5">primitives supported by crypto this</font>

259
00:11:28,570 --> 00:11:34,450
concludes our brief look<font color="#E5E5E5"> at the API of</font><font color="#CCCCCC"> F</font>

260
00:11:31,270 --> 00:11:37,150
crypto<font color="#CCCCCC"> in our work we also took a look</font>

261
00:11:34,450 --> 00:11:39,820
<font color="#CCCCCC">at a</font><font color="#E5E5E5"> specific class of protocol cells</font>

262
00:11:37,150 --> 00:11:43,300
often<font color="#E5E5E5"> analyzed in the second step namely</font>

263
00:11:39,820 --> 00:11:46,720
<font color="#E5E5E5">we looked at key exchange</font><font color="#CCCCCC"> protocols and</font>

264
00:11:43,300 --> 00:11:49,000
<font color="#E5E5E5">the ideal key exchange functionality so</font>

265
00:11:46,720 --> 00:11:50,530
traditional some traditional

266
00:11:49,000 --> 00:11:53,070
formulations of the<font color="#E5E5E5"> key exchange</font>

267
00:11:50,530 --> 00:11:56,079
functionality works<font color="#CCCCCC"> roughly as follows</font>

268
00:11:53,070 --> 00:11:59,380
<font color="#E5E5E5">we have this functionality which can be</font>

269
00:11:56,080 --> 00:12:02,290
accessed<font color="#CCCCCC"> by</font><font color="#E5E5E5"> some users to perform a key</font>

270
00:11:59,380 --> 00:12:04,510
exchange<font color="#E5E5E5"> and at the end the key exchange</font>

271
00:12:02,290 --> 00:12:06,730
functionality just<font color="#E5E5E5"> directly outputs the</font>

272
00:12:04,510 --> 00:12:09,310
<font color="#CCCCCC">key in the form of some big string to</font>

273
00:12:06,730 --> 00:12:11,650
the users they can<font color="#CCCCCC"> then use this bit</font>

274
00:12:09,310 --> 00:12:14,319
string as a key for some cryptographic

275
00:12:11,650 --> 00:12:17,410
primitives in a protocol execution

276
00:12:14,320 --> 00:12:19,690
<font color="#E5E5E5">however this means that if we analyze</font>

277
00:12:17,410 --> 00:12:22,150
this protocol<font color="#E5E5E5"> again we would have to do</font>

278
00:12:19,690 --> 00:12:25,270
reduction<font color="#E5E5E5"> proofs which is exactly what</font>

279
00:12:22,150 --> 00:12:27,490
we wanted<font color="#CCCCCC"> to prevent in our approach it</font>

280
00:12:25,270 --> 00:12:29,800
would be much nicer<font color="#E5E5E5"> if we also could</font>

281
00:12:27,490 --> 00:12:32,110
have<font color="#E5E5E5"> used</font><font color="#CCCCCC"> this key idea is similar</font><font color="#E5E5E5"> to</font>

282
00:12:29,800 --> 00:12:35,939
what was what was possible with<font color="#CCCCCC"> a</font>

283
00:12:32,110 --> 00:12:39,790
<font color="#E5E5E5">scriptum so what we did in our work is</font>

284
00:12:35,940 --> 00:12:41,800
provide a new<font color="#CCCCCC"> definition of</font><font color="#E5E5E5"> an idea key</font>

285
00:12:39,790 --> 00:12:43,990
exchange functionality<font color="#E5E5E5"> this</font>

286
00:12:41,800 --> 00:12:46,479
<font color="#E5E5E5">functionality has</font><font color="#CCCCCC"> a copy of</font><font color="#E5E5E5"> F crypto</font>

287
00:12:43,990 --> 00:12:49,270
<font color="#E5E5E5">built-in and instead of outputting a key</font>

288
00:12:46,480 --> 00:12:51,460
both users get access to<font color="#E5E5E5"> the same key</font>

289
00:12:49,270 --> 00:12:56,350
within F crypto<font color="#E5E5E5"> that can then</font><font color="#CCCCCC"> be used</font>

290
00:12:51,460 --> 00:12:58,600
ideally to execute<font color="#E5E5E5"> a protocol now if we</font>

291
00:12:56,350 --> 00:13:00,790
prove the protocol<font color="#E5E5E5"> to be secure so</font><font color="#CCCCCC"> for</font>

292
00:12:58,600 --> 00:13:03,610
example say<font color="#CCCCCC"> we wanted</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> build a secure</font>

293
00:13:00,790 --> 00:13:06,640
<font color="#CCCCCC">channel</font><font color="#E5E5E5"> based on the key exchange then</font>

294
00:13:03,610 --> 00:13:08,800
again we only need information theoretic

295
00:13:06,640 --> 00:13:11,740
<font color="#E5E5E5">arguments for all the primitives that</font>

296
00:13:08,800 --> 00:13:14,709
are<font color="#CCCCCC"> keyed with</font><font color="#E5E5E5"> this key we don't have to</font>

297
00:13:11,740 --> 00:13:16,510
do any reductions anymore once you have

298
00:13:14,710 --> 00:13:18,070
done this we can<font color="#CCCCCC"> apply the compilation</font>

299
00:13:16,510 --> 00:13:19,569
<font color="#CCCCCC">theorem to</font>

300
00:13:18,070 --> 00:13:21,040
first<font color="#E5E5E5"> replace the key exchange</font>

301
00:13:19,570 --> 00:13:25,060
functionality with<font color="#CCCCCC"> its implementation</font>

302
00:13:21,040 --> 00:13:27,880
<font color="#CCCCCC">and we can iterate this</font><font color="#E5E5E5"> to also replace</font>

303
00:13:25,060 --> 00:13:30,609
<font color="#CCCCCC">the</font><font color="#E5E5E5"> crypto library with</font><font color="#CCCCCC"> its</font>

304
00:13:27,880 --> 00:13:34,810
implementation<font color="#CCCCCC"> yielding a real protocol</font>

305
00:13:30,610 --> 00:13:37,570
<font color="#E5E5E5">which is still secure we illustrated the</font>

306
00:13:34,810 --> 00:13:39,369
usefulness<font color="#E5E5E5"> of our approach by analyzing</font>

307
00:13:37,570 --> 00:13:42,100
servers if he had and he<font color="#E5E5E5"> change</font>

308
00:13:39,370 --> 00:13:43,870
protocols<font color="#E5E5E5"> from the literature namely we</font>

309
00:13:42,100 --> 00:13:48,940
looked at one<font color="#CCCCCC"> of the protocols of the</font>

310
00:13:43,870 --> 00:13:51,790
<font color="#E5E5E5">ISO 9 7 9 8 family we analyzed one</font>

311
00:13:48,940 --> 00:13:54,220
version of the<font color="#CCCCCC"> Sigma protocol and we</font>

312
00:13:51,790 --> 00:13:57,130
looked at the<font color="#E5E5E5"> non static mode of OPP LS</font>

313
00:13:54,220 --> 00:13:59,560
in all of these cases<font color="#E5E5E5"> this was the first</font>

314
00:13:57,130 --> 00:14:02,650
<font color="#E5E5E5">tasteful analysis in a universal</font>

315
00:13:59,560 --> 00:14:05,859
composability model in case<font color="#CCCCCC"> of</font><font color="#E5E5E5"> a PT LS</font>

316
00:14:02,650 --> 00:14:08,530
we try to prove security<font color="#CCCCCC"> however</font><font color="#E5E5E5"> the</font>

317
00:14:05,860 --> 00:14:10,780
proof didn't go<font color="#E5E5E5"> through so we looked at</font>

318
00:14:08,530 --> 00:14:15,339
<font color="#E5E5E5">the</font><font color="#CCCCCC"> original game based security proof</font>

319
00:14:10,780 --> 00:14:18,250
and we<font color="#E5E5E5"> found a flaw namely the proof the</font>

320
00:14:15,340 --> 00:14:19,320
original game<font color="#E5E5E5"> based proof</font><font color="#CCCCCC"> use that if</font>

321
00:14:18,250 --> 00:14:22,890
<font color="#CCCCCC">you had a decisional diffie-hellman</font>

322
00:14:19,320 --> 00:14:25,660
assumption however<font color="#E5E5E5"> we note this</font>

323
00:14:22,890 --> 00:14:28,900
assumption is indeed not sufficient<font color="#CCCCCC"> to</font>

324
00:14:25,660 --> 00:14:31,959
prove security of this protocol<font color="#E5E5E5"> so what</font>

325
00:14:28,900 --> 00:14:33,370
we did<font color="#E5E5E5"> since of crypto is based on the</font>

326
00:14:31,960 --> 00:14:36,460
decision<font color="#CCCCCC"> aid if you have an assumption</font>

327
00:14:33,370 --> 00:14:38,410
<font color="#E5E5E5">we</font><font color="#CCCCCC"> analyzed the</font><font color="#E5E5E5"> slight reliant of the</font>

328
00:14:36,460 --> 00:14:41,050
protocol<font color="#E5E5E5"> and then show through this</font>

329
00:14:38,410 --> 00:14:43,480
variation that<font color="#E5E5E5"> is indeed sufficient to</font>

330
00:14:41,050 --> 00:14:45,069
assume<font color="#E5E5E5"> to use the decisional</font>

331
00:14:43,480 --> 00:14:50,680
diffie-hellman assumption to show the

332
00:14:45,070 --> 00:14:52,240
security<font color="#E5E5E5"> to conclude my</font><font color="#CCCCCC"> talk we did</font>

333
00:14:50,680 --> 00:14:54,790
<font color="#E5E5E5">indeed succeed in our goal of</font>

334
00:14:52,240 --> 00:14:56,740
eliminating reduction proofs<font color="#CCCCCC"> at least as</font>

335
00:14:54,790 --> 00:14:59,589
far<font color="#CCCCCC"> as</font><font color="#E5E5E5"> the primitive supported by of</font>

336
00:14:56,740 --> 00:15:02,770
crypto<font color="#E5E5E5"> go our approach is highly</font><font color="#CCCCCC"> modular</font>

337
00:14:59,590 --> 00:15:04,420
<font color="#CCCCCC">this was also</font><font color="#E5E5E5"> is already illustrated by</font>

338
00:15:02,770 --> 00:15:07,090
for example<font color="#CCCCCC"> the</font><font color="#E5E5E5"> idea exchange</font>

339
00:15:04,420 --> 00:15:09,400
functionality which can be<font color="#E5E5E5"> reused to</font>

340
00:15:07,090 --> 00:15:11,950
build<font color="#E5E5E5"> higher-level protocols on top of</font>

341
00:15:09,400 --> 00:15:13,990
it and then we can combine security

342
00:15:11,950 --> 00:15:16,570
results via the composition theorem<font color="#E5E5E5"> and</font>

343
00:15:13,990 --> 00:15:19,360
we have very strong universally

344
00:15:16,570 --> 00:15:22,060
composable security guarantees<font color="#CCCCCC"> that is</font>

345
00:15:19,360 --> 00:15:24,100
we know<font color="#CCCCCC"> that our protocols</font><font color="#E5E5E5"> they secure</font>

346
00:15:22,060 --> 00:15:26,709
no matter<font color="#E5E5E5"> in which context they run</font>

347
00:15:24,100 --> 00:15:29,040
because<font color="#E5E5E5"> we analyze them</font><font color="#CCCCCC"> for arbitrary</font>

348
00:15:26,710 --> 00:15:31,910
environments that<font color="#E5E5E5"> try to attack them</font><font color="#CCCCCC"> in</font>

349
00:15:29,040 --> 00:15:34,219
<font color="#CCCCCC">our paper we also discussed</font>

350
00:15:31,910 --> 00:15:36,140
differences<font color="#E5E5E5"> between our approach and</font>

351
00:15:34,220 --> 00:15:39,520
<font color="#E5E5E5">other approaches</font><font color="#CCCCCC"> such as</font><font color="#E5E5E5"> game based</font>

352
00:15:36,140 --> 00:15:41,660
security<font color="#E5E5E5"> analysis symbolic analysis or</font>

353
00:15:39,520 --> 00:15:43,819
implementation based analysis<font color="#E5E5E5"> such as</font>

354
00:15:41,660 --> 00:15:47,959
<font color="#E5E5E5">the one we</font><font color="#CCCCCC"> already saw yesterday in</font><font color="#E5E5E5"> the</font>

355
00:15:43,820 --> 00:15:49,130
TLS session<font color="#CCCCCC"> in</font><font color="#E5E5E5"> future work we want to</font>

356
00:15:47,960 --> 00:15:51,650
implement further<font color="#CCCCCC"> diffie-hellman</font>

357
00:15:49,130 --> 00:15:54,050
<font color="#E5E5E5">assumptions why does this again quite</font>

358
00:15:51,650 --> 00:15:56,600
some work and this<font color="#E5E5E5"> is wanted</font><font color="#CCCCCC"> for all</font>

359
00:15:54,050 --> 00:15:58,670
effort as I've shown you you have to do

360
00:15:56,600 --> 00:16:01,270
this<font color="#CCCCCC"> a single time and then we</font><font color="#E5E5E5"> can use</font>

361
00:15:58,670 --> 00:16:04,790
<font color="#E5E5E5">it</font><font color="#CCCCCC"> to analyze arbitrarily many</font><font color="#E5E5E5"> protocols</font>

362
00:16:01,270 --> 00:16:08,750
based on it and what also<font color="#E5E5E5"> be interesting</font>

363
00:16:04,790 --> 00:16:11,420
to look<font color="#E5E5E5"> at to see whether current tools</font>

364
00:16:08,750 --> 00:16:14,030
for automating proofs<font color="#E5E5E5"> can benefit</font><font color="#CCCCCC"> from</font>

365
00:16:11,420 --> 00:16:16,599
our approach and of course<font color="#E5E5E5"> we want to</font>

366
00:16:14,030 --> 00:16:18,680
<font color="#E5E5E5">apply it to analyze further protocols</font>

367
00:16:16,600 --> 00:16:34,400
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much for your attention</font>

368
00:16:18,680 --> 00:16:37,729
<font color="#CCCCCC">and we</font><font color="#E5E5E5"> have questions</font><font color="#CCCCCC"> below so a nice</font>

369
00:16:34,400 --> 00:16:40,850
Turk and many<font color="#E5E5E5"> interesting results every</font>

370
00:16:37,730 --> 00:16:43,430
question<font color="#E5E5E5"> about the compromise</font><font color="#CCCCCC"> so do you</font>

371
00:16:40,850 --> 00:16:46,760
consider<font color="#E5E5E5"> dynamic compromise or just</font><font color="#CCCCCC"> a</font>

372
00:16:43,430 --> 00:16:50,689
<font color="#CCCCCC">tip compromise so it depends a bit on</font>

373
00:16:46,760 --> 00:16:54,050
the primitive<font color="#CCCCCC"> in case of signatures or</font>

374
00:16:50,690 --> 00:16:58,730
<font color="#E5E5E5">max we consider full dynamic corruption</font>

375
00:16:54,050 --> 00:17:00,979
in case of of<font color="#E5E5E5"> encryption because we will</font>

376
00:16:58,730 --> 00:17:04,430
place the encryption with these random

377
00:17:00,980 --> 00:17:07,790
<font color="#E5E5E5">bit strings we have to tone this a bit</font>

378
00:17:04,430 --> 00:17:09,890
more down<font color="#CCCCCC"> so</font><font color="#E5E5E5"> instead of feu dynamic</font>

379
00:17:07,790 --> 00:17:12,349
corruption we say that the key may be

380
00:17:09,890 --> 00:17:14,780
corrupted<font color="#CCCCCC"> at any time</font><font color="#E5E5E5"> before it is</font><font color="#CCCCCC"> used</font>

381
00:17:12,349 --> 00:17:17,149
<font color="#E5E5E5">for the first time once it has been used</font>

382
00:17:14,780 --> 00:17:19,520
<font color="#E5E5E5">the corruption is essentially static so</font>

383
00:17:17,150 --> 00:17:22,550
the adversary<font color="#CCCCCC"> has decided on whether</font>

384
00:17:19,520 --> 00:17:24,410
this key<font color="#CCCCCC"> should be corrupted or not</font><font color="#E5E5E5"> okay</font>

385
00:17:22,550 --> 00:17:27,800
<font color="#E5E5E5">and you consider the</font><font color="#CCCCCC"> compromise erection</font>

386
00:17:24,410 --> 00:17:29,480
errors in the dissemination<font color="#CCCCCC"> excuse me</font><font color="#E5E5E5"> do</font>

387
00:17:27,800 --> 00:17:32,480
you<font color="#E5E5E5"> consider the compromises</font><font color="#CCCCCC"> a shame</font>

388
00:17:29,480 --> 00:17:34,370
errors in the detail<font color="#E5E5E5"> man exchange yeah</font>

389
00:17:32,480 --> 00:17:37,040
we also consider corruption of the

390
00:17:34,370 --> 00:17:39,500
<font color="#CCCCCC">different exponents but there we have a</font>

391
00:17:37,040 --> 00:17:41,990
similar<font color="#E5E5E5"> problem once they have been used</font>

392
00:17:39,500 --> 00:17:44,380
to<font color="#CCCCCC"> create an</font><font color="#E5E5E5"> ideal key because we will</font>

393
00:17:41,990 --> 00:17:47,559
replace this key G to the a with

394
00:17:44,380 --> 00:17:49,660
into the sea<font color="#CCCCCC"> once it has</font><font color="#E5E5E5"> been used to</font>

395
00:17:47,559 --> 00:17:50,860
<font color="#E5E5E5">create a key the corruption status</font>

396
00:17:49,660 --> 00:17:57,640
<font color="#E5E5E5">cannot change</font><font color="#CCCCCC"> anymore</font>

397
00:17:50,860 --> 00:17:59,530
thank you<font color="#E5E5E5"> the other questions are so so</font>

398
00:17:57,640 --> 00:18:01,419
I have one regarding your Vallarta

399
00:17:59,530 --> 00:18:03,760
<font color="#E5E5E5">Cassie</font><font color="#CCCCCC"> so can</font><font color="#E5E5E5"> you tell us or for</font>

400
00:18:01,419 --> 00:18:06,130
<font color="#CCCCCC">articles</font><font color="#E5E5E5"> it manifests itself in your</font>

401
00:18:03,760 --> 00:18:09,360
setting is it<font color="#CCCCCC"> something that you provide</font>

402
00:18:06,130 --> 00:18:13,030
additional<font color="#E5E5E5"> or something that is implicit</font>

403
00:18:09,360 --> 00:18:15,159
existed<font color="#E5E5E5"> well what do you see about how</font>

404
00:18:13,030 --> 00:18:17,678
do you get some<font color="#E5E5E5"> of secrecy poverty so</font><font color="#CCCCCC"> I</font>

405
00:18:15,160 --> 00:18:19,710
<font color="#CCCCCC">think additionally actions you get as</font>

406
00:18:17,679 --> 00:18:23,620
compared to what you<font color="#E5E5E5"> could do Christina</font>

407
00:18:19,710 --> 00:18:26,940
<font color="#E5E5E5">with the exit</font><font color="#CCCCCC"> or you get solid secrecy</font>

408
00:18:23,620 --> 00:18:30,100
<font color="#CCCCCC">remodeling your details in the model</font>

409
00:18:26,940 --> 00:18:34,059
well so essentially<font color="#E5E5E5"> on the idea of</font>

410
00:18:30,100 --> 00:18:37,389
<font color="#CCCCCC">Secrets</font><font color="#E5E5E5"> forward secrecy is that someone</font>

411
00:18:34,059 --> 00:18:39,460
cannot get access<font color="#CCCCCC"> to what is done is in</font>

412
00:18:37,390 --> 00:18:42,429
<font color="#E5E5E5">F crypto once the users have forgotten</font>

413
00:18:39,460 --> 00:18:44,230
the keys there's no way to access the

414
00:18:42,429 --> 00:18:47,110
<font color="#CCCCCC">information for</font><font color="#E5E5E5"> example what has been</font>

415
00:18:44,230 --> 00:18:49,720
encrypted with<font color="#E5E5E5"> some Keinath crypto</font>

416
00:18:47,110 --> 00:18:52,449
<font color="#E5E5E5">because the both boxes</font><font color="#CCCCCC"> closed and want</font>

417
00:18:49,720 --> 00:18:54,280
<font color="#CCCCCC">to use ourselves okay now I</font><font color="#E5E5E5"> I will</font>

418
00:18:52,450 --> 00:18:57,039
forget<font color="#CCCCCC"> my session key because I don't</font>

419
00:18:54,280 --> 00:18:59,440
need<font color="#E5E5E5"> it anymore there's also no</font><font color="#CCCCCC"> way for</font>

420
00:18:57,039 --> 00:19:01,690
<font color="#E5E5E5">an adversary to</font><font color="#CCCCCC"> later on get back to the</font>

421
00:18:59,440 --> 00:19:04,240
contents because<font color="#CCCCCC"> as crypto doesn't allow</font>

422
00:19:01,690 --> 00:19:05,340
the adversary to<font color="#CCCCCC"> get access to this</font>

423
00:19:04,240 --> 00:19:08,230
information

424
00:19:05,340 --> 00:19:10,030
<font color="#CCCCCC">that's residual implicit property of the</font>

425
00:19:08,230 --> 00:19:13,870
<font color="#E5E5E5">other functionality or do you have a way</font>

426
00:19:10,030 --> 00:19:15,789
<font color="#CCCCCC">to erase secrets for example well it</font>

427
00:19:13,870 --> 00:19:18,280
essentially depends on the<font color="#E5E5E5"> modeling</font><font color="#CCCCCC"> of</font>

428
00:19:15,789 --> 00:19:20,440
<font color="#CCCCCC">the protocols that we analyzed so the</font>

429
00:19:18,280 --> 00:19:23,980
<font color="#E5E5E5">protocols the case studies that we</font>

430
00:19:20,440 --> 00:19:27,669
<font color="#E5E5E5">analyzed they could say okay at the</font><font color="#CCCCCC"> end</font>

431
00:19:23,980 --> 00:19:30,039
of the session when the<font color="#E5E5E5"> key</font><font color="#CCCCCC"> is used</font><font color="#E5E5E5"> we</font>

432
00:19:27,669 --> 00:19:32,770
<font color="#CCCCCC">will simply forget the key which we</font>

433
00:19:30,039 --> 00:19:35,379
<font color="#CCCCCC">modeled by</font><font color="#E5E5E5"> forgetting the point</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> the</font>

434
00:19:32,770 --> 00:19:37,570
access to<font color="#E5E5E5"> the schemas crypto and then we</font>

435
00:19:35,380 --> 00:19:40,150
could argue<font color="#CCCCCC"> because there</font><font color="#E5E5E5"> is no way to</font>

436
00:19:37,570 --> 00:19:42,549
access this information anymore

437
00:19:40,150 --> 00:19:46,030
there cannot be any way<font color="#CCCCCC"> for an adversary</font>

438
00:19:42,549 --> 00:19:48,639
<font color="#CCCCCC">to decrypt any messages for example the</font>

439
00:19:46,030 --> 00:19:51,100
<font color="#E5E5E5">encrypted with the session key later on</font>

440
00:19:48,640 --> 00:19:54,040
because he cannot<font color="#E5E5E5"> get access</font><font color="#CCCCCC"> so it's not</font>

441
00:19:51,100 --> 00:19:57,429
inherent to<font color="#CCCCCC"> the UC model itself but it</font>

442
00:19:54,040 --> 00:20:00,940
depends on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> modeling and uses this</font>

443
00:19:57,430 --> 00:20:04,750
see<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> that no one can get</font>

444
00:20:00,940 --> 00:20:07,780
<font color="#CCCCCC">access to anything</font><font color="#E5E5E5"> if it if it doesn't</font>

445
00:20:04,750 --> 00:20:10,530
<font color="#E5E5E5">have a point</font><font color="#CCCCCC"> at one of the keys</font><font color="#E5E5E5"> okay</font>

446
00:20:07,780 --> 00:20:16,460
thanks so let's<font color="#CCCCCC"> thank this</font><font color="#E5E5E5"> video again</font>

447
00:20:10,530 --> 00:20:16,460
[Applause]

