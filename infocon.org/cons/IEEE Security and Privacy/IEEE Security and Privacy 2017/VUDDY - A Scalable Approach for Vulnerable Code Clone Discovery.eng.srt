1
00:00:08,300 --> 00:00:13,260
the good afternoon everyone<font color="#CCCCCC"> I'm I'm so</font>

2
00:00:11,370 --> 00:00:15,360
<font color="#CCCCCC">that came from</font><font color="#E5E5E5"> Korea University and it's</font>

3
00:00:13,260 --> 00:00:17,698
a<font color="#E5E5E5"> great pleasure to talk</font><font color="#CCCCCC"> about our work</font>

4
00:00:15,360 --> 00:00:21,090
called<font color="#E5E5E5"> body a scalable approach for</font>

5
00:00:17,699 --> 00:00:22,560
vulnerable cocoa<font color="#CCCCCC"> and</font><font color="#E5E5E5"> detection before</font>

6
00:00:21,090 --> 00:00:25,770
<font color="#E5E5E5">getting started</font><font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> ask you a</font>

7
00:00:22,560 --> 00:00:28,020
<font color="#E5E5E5">question how many number of unpatched</font>

8
00:00:25,770 --> 00:00:29,550
<font color="#E5E5E5">known vulnerabilities do you think you</font>

9
00:00:28,020 --> 00:00:32,668
have in the in the<font color="#CCCCCC"> firmware of your</font>

10
00:00:29,550 --> 00:00:35,010
smartphone<font color="#CCCCCC"> I mean not not the unknown</font>

11
00:00:32,668 --> 00:00:38,699
vulnerabilities but the known

12
00:00:35,010 --> 00:00:41,339
vulnerabilities in my smartphone<font color="#E5E5E5"> with</font>

13
00:00:38,699 --> 00:00:44,280
through the use of<font color="#CCCCCC"> our approach I could</font>

14
00:00:41,340 --> 00:00:46,230
find<font color="#E5E5E5"> more than</font><font color="#CCCCCC"> 200 unpatched TV</font>

15
00:00:44,280 --> 00:00:49,200
vulnerabilities in the in the<font color="#CCCCCC"> format of</font>

16
00:00:46,230 --> 00:00:53,699
my<font color="#CCCCCC"> smartphone</font><font color="#E5E5E5"> so it's a lot more than we</font>

17
00:00:49,200 --> 00:00:55,680
normally we can normally expect<font color="#E5E5E5"> here's</font>

18
00:00:53,700 --> 00:00:57,690
the motivation the number of open source

19
00:00:55,680 --> 00:00:59,910
software<font color="#CCCCCC"> is increasing worldwide and</font>

20
00:00:57,690 --> 00:01:04,408
many people claim that<font color="#E5E5E5"> the growth rate</font>

21
00:00:59,910 --> 00:01:07,679
<font color="#CCCCCC">is exponential and in</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> situation the</font>

22
00:01:04,409 --> 00:01:09,689
number<font color="#E5E5E5"> of code clones which are on the</font>

23
00:01:07,680 --> 00:01:12,749
reuse code fragments are also

24
00:01:09,689 --> 00:01:15,208
proliferating<font color="#CCCCCC"> so one point we're</font>

25
00:01:12,749 --> 00:01:17,009
focusing on here<font color="#CCCCCC"> is that coke loans are</font>

26
00:01:15,209 --> 00:01:19,859
being one of the major<font color="#E5E5E5"> causes of</font>

27
00:01:17,009 --> 00:01:21,810
vulnerability propagation<font color="#E5E5E5"> so for example</font>

28
00:01:19,859 --> 00:01:24,089
last year we<font color="#E5E5E5"> had a dirty car</font>

29
00:01:21,810 --> 00:01:26,429
vulnerability just discovered from the

30
00:01:24,090 --> 00:01:29,009
<font color="#E5E5E5">Linux</font><font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> and look what happened to</font>

31
00:01:26,429 --> 00:01:32,039
all the other operating systems that<font color="#E5E5E5"> use</font>

32
00:01:29,009 --> 00:01:35,459
kernels as their basis<font color="#E5E5E5"> they</font><font color="#CCCCCC"> if they were</font>

33
00:01:32,039 --> 00:01:37,950
affected by the same vulnerability also

34
00:01:35,459 --> 00:01:40,590
the same vulnerability propagated

35
00:01:37,950 --> 00:01:46,229
through<font color="#E5E5E5"> to the devices</font><font color="#CCCCCC"> that use these</font>

36
00:01:40,590 --> 00:01:48,240
<font color="#E5E5E5">orestes operating systems so that means</font>

37
00:01:46,229 --> 00:01:50,310
we<font color="#E5E5E5"> have a lot of vulnerable code clones</font>

38
00:01:48,240 --> 00:01:52,770
in this real world<font color="#CCCCCC"> so the problem here</font>

39
00:01:50,310 --> 00:01:54,929
we want<font color="#CCCCCC"> to tackle</font><font color="#E5E5E5"> here is the scalable</font>

40
00:01:52,770 --> 00:01:58,259
and accurate detection of vulnerable

41
00:01:54,929 --> 00:02:00,359
code clones the scalability of<font color="#CCCCCC"> criticism</font>

42
00:01:58,259 --> 00:02:01,529
it is important because<font color="#E5E5E5"> software systems</font>

43
00:02:00,359 --> 00:02:03,509
are<font color="#E5E5E5"> getting bigger and bigger</font>

44
00:02:01,529 --> 00:02:05,039
for example now<font color="#E5E5E5"> Linux kernel has more</font>

45
00:02:03,509 --> 00:02:08,479
<font color="#E5E5E5">than twenty five point four million</font>

46
00:02:05,039 --> 00:02:10,979
lines of<font color="#CCCCCC"> code and a farmer of</font><font color="#E5E5E5"> smart TV</font>

47
00:02:08,479 --> 00:02:13,050
consists of more<font color="#E5E5E5"> than 35 million lines</font>

48
00:02:10,979 --> 00:02:16,560
of code<font color="#E5E5E5"> in which it contains</font><font color="#CCCCCC"> links</font>

49
00:02:13,050 --> 00:02:20,520
kernel and chromium OS and all a lot<font color="#E5E5E5"> of</font>

50
00:02:16,560 --> 00:02:22,890
soft software libraries so we need a

51
00:02:20,520 --> 00:02:24,810
scalable systems<font color="#E5E5E5"> to efficiently detect</font>

52
00:02:22,890 --> 00:02:28,920
volubility from these large<font color="#CCCCCC"> software's</font>

53
00:02:24,810 --> 00:02:32,190
and<font color="#E5E5E5"> also the accuracy is obviously it is</font>

54
00:02:28,920 --> 00:02:34,739
important<font color="#E5E5E5"> because for these kinds of</font>

55
00:02:32,190 --> 00:02:37,290
<font color="#E5E5E5">static approaches static analysis</font>

56
00:02:34,740 --> 00:02:39,720
approaches<font color="#E5E5E5"> false</font><font color="#CCCCCC"> positives leads to</font>

57
00:02:37,290 --> 00:02:41,459
increased<font color="#E5E5E5"> efforts in time for</font>

58
00:02:39,720 --> 00:02:45,380
researchers or anyone who is inspecting

59
00:02:41,460 --> 00:02:49,950
a software to<font color="#E5E5E5"> UM to manually go through</font>

60
00:02:45,380 --> 00:02:52,530
every false alarms<font color="#CCCCCC"> previously many</font>

61
00:02:49,950 --> 00:02:57,480
approaches that try<font color="#E5E5E5"> to tackle the</font>

62
00:02:52,530 --> 00:02:59,660
similar problem was yeah there were

63
00:02:57,480 --> 00:03:02,489
previous approaches<font color="#E5E5E5"> but there was a</font>

64
00:02:59,660 --> 00:03:05,940
visual tendency of the trade-off<font color="#CCCCCC"> between</font>

65
00:03:02,490 --> 00:03:08,130
accuracy<font color="#E5E5E5"> and scalability and one notable</font>

66
00:03:05,940 --> 00:03:10,200
exception here is<font color="#E5E5E5"> the really bug of</font>

67
00:03:08,130 --> 00:03:12,390
which used<font color="#E5E5E5"> the line level matching</font>

68
00:03:10,200 --> 00:03:16,230
technique but it still had a lot<font color="#CCCCCC"> of</font>

69
00:03:12,390 --> 00:03:17,970
false<font color="#E5E5E5"> positives</font><font color="#CCCCCC"> so the goal of</font><font color="#E5E5E5"> us is to</font>

70
00:03:16,230 --> 00:03:19,950
<font color="#E5E5E5">get there to the</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the area of the</font>

71
00:03:17,970 --> 00:03:21,980
question mark<font color="#E5E5E5"> where we can achieve both</font>

72
00:03:19,950 --> 00:03:25,619
the high accuracy<font color="#CCCCCC"> and high scalability</font>

73
00:03:21,980 --> 00:03:28,260
<font color="#E5E5E5">simultaneously so we're proposing a</font>

74
00:03:25,620 --> 00:03:30,300
method called<font color="#CCCCCC"> buddy and before</font>

75
00:03:28,260 --> 00:03:32,640
<font color="#E5E5E5">explaining every rationale behind buddy</font>

76
00:03:30,300 --> 00:03:38,640
<font color="#E5E5E5">I want you to watch a short</font><font color="#CCCCCC"> video which</font>

77
00:03:32,640 --> 00:03:41,250
is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> results of</font><font color="#CCCCCC"> our implementation so</font>

78
00:03:38,640 --> 00:03:44,730
<font color="#E5E5E5">basically is a web based platform where</font>

79
00:03:41,250 --> 00:03:47,930
you<font color="#E5E5E5"> can upload a pre-processed index</font>

80
00:03:44,730 --> 00:03:51,030
file<font color="#E5E5E5"> and then get the results</font><font color="#CCCCCC"> like that</font>

81
00:03:47,930 --> 00:03:54,270
when you upload game deck file you can

82
00:03:51,030 --> 00:03:56,880
see that<font color="#CCCCCC"> there are</font><font color="#E5E5E5"> 234 vulnerable</font><font color="#CCCCCC"> Coco's</font>

83
00:03:54,270 --> 00:03:59,490
infected with the yearly distribution of

84
00:03:56,880 --> 00:04:01,230
<font color="#CCCCCC">CVS where</font><font color="#E5E5E5"> you can see that</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> number of</font>

85
00:03:59,490 --> 00:04:05,790
recent vulnerabilities are not patched

86
00:04:01,230 --> 00:04:07,649
in<font color="#CCCCCC"> CVS</font><font color="#E5E5E5"> s</font><font color="#CCCCCC"> + CW distribution also</font><font color="#E5E5E5"> the you</font>

87
00:04:05,790 --> 00:04:10,290
can browse<font color="#CCCCCC"> through the source tree</font><font color="#E5E5E5"> of</font>

88
00:04:07,650 --> 00:04:11,880
<font color="#E5E5E5">your project where you</font><font color="#CCCCCC"> can see a</font><font color="#E5E5E5"> number</font>

89
00:04:10,290 --> 00:04:15,000
<font color="#E5E5E5">of vulnerabilities are spread through</font><font color="#CCCCCC"> a</font>

90
00:04:11,880 --> 00:04:17,370
<font color="#CCCCCC">lot of source code files</font><font color="#E5E5E5"> and clicking on</font>

91
00:04:15,000 --> 00:04:20,519
<font color="#E5E5E5">the leaf node you can also see what is</font>

92
00:04:17,370 --> 00:04:25,260
the patch to<font color="#CCCCCC"> fix the vulnerability in</font>

93
00:04:20,519 --> 00:04:28,419
your code<font color="#CCCCCC"> so what</font>

94
00:04:25,260 --> 00:04:31,599
we aim to search for vulnerable code

95
00:04:28,419 --> 00:04:34,750
<font color="#CCCCCC">close</font><font color="#E5E5E5"> and it scales beyond</font><font color="#CCCCCC"> 1 billion</font>

96
00:04:31,600 --> 00:04:37,810
<font color="#E5E5E5">lines of code target and it detects both</font>

97
00:04:34,750 --> 00:04:41,410
known and unknown vulnerability with a

98
00:04:37,810 --> 00:04:44,470
low false positive<font color="#CCCCCC"> rate and here's the</font>

99
00:04:41,410 --> 00:04:46,479
<font color="#E5E5E5">overview of</font><font color="#CCCCCC"> body so we</font><font color="#E5E5E5"> can have a bunch</font>

100
00:04:44,470 --> 00:04:48,970
of vulnerable functions and a target

101
00:04:46,479 --> 00:04:50,740
program and we can<font color="#E5E5E5"> fingerprint them to</font>

102
00:04:48,970 --> 00:04:52,810
generate fingerprint dictionaries of

103
00:04:50,740 --> 00:04:54,880
<font color="#CCCCCC">vulnerable functions and fingerprint</font>

104
00:04:52,810 --> 00:04:57,160
dictionary of<font color="#CCCCCC"> title functions</font><font color="#E5E5E5"> and then</font>

105
00:04:54,880 --> 00:05:02,020
the vulnerable kocoum detection is going

106
00:04:57,160 --> 00:05:03,789
to be a dictionary comparison so what

107
00:05:02,020 --> 00:05:07,510
you want to<font color="#E5E5E5"> do first is to collect</font>

108
00:05:03,789 --> 00:05:09,940
vulnerable<font color="#E5E5E5"> code we</font><font color="#CCCCCC"> leverage</font><font color="#E5E5E5"> a standard</font>

109
00:05:07,510 --> 00:05:13,449
vulnerability patching<font color="#CCCCCC"> process to get</font>

110
00:05:09,940 --> 00:05:15,250
vulnerable code fragments so when you

111
00:05:13,449 --> 00:05:17,710
have a vulnerable code you can write<font color="#CCCCCC"> a</font>

112
00:05:15,250 --> 00:05:20,919
<font color="#E5E5E5">cvd patch or any vulnerability patch and</font>

113
00:05:17,710 --> 00:05:24,030
apply it to get the new fixed code<font color="#E5E5E5"> so if</font>

114
00:05:20,919 --> 00:05:26,710
we apply<font color="#CCCCCC"> this procedure reversely</font>

115
00:05:24,030 --> 00:05:29,440
like this from<font color="#E5E5E5"> software repository such</font>

116
00:05:26,710 --> 00:05:31,388
as<font color="#CCCCCC"> Android</font><font color="#E5E5E5"> git repository or Linux</font>

117
00:05:29,440 --> 00:05:34,270
kernel<font color="#CCCCCC"> fuzz repository or</font><font color="#E5E5E5"> anything and</font>

118
00:05:31,389 --> 00:05:37,210
<font color="#CCCCCC">you can extract every CVE patch</font><font color="#E5E5E5"> from</font>

119
00:05:34,270 --> 00:05:39,880
them to get to reconstruct the old

120
00:05:37,210 --> 00:05:41,859
vulnerable<font color="#E5E5E5"> code the collection of these</font>

121
00:05:39,880 --> 00:05:46,320
all vulnerable codes are<font color="#E5E5E5"> going to be</font>

122
00:05:41,860 --> 00:05:46,320
inserted into<font color="#CCCCCC"> our vulnerability database</font>

123
00:05:46,590 --> 00:05:53,679
now let's see how we fingerprint<font color="#CCCCCC"> the</font>

124
00:05:49,450 --> 00:05:55,479
program first of<font color="#E5E5E5"> all we retrieve all</font>

125
00:05:53,680 --> 00:05:57,970
functions<font color="#E5E5E5"> from the program let's say</font>

126
00:05:55,479 --> 00:06:01,539
<font color="#E5E5E5">this program consists of three different</font>

127
00:05:57,970 --> 00:06:03,849
<font color="#CCCCCC">functions</font><font color="#E5E5E5"> and then we apply abstraction</font>

128
00:06:01,539 --> 00:06:05,830
<font color="#E5E5E5">and normalization</font><font color="#CCCCCC"> to the retrieved</font>

129
00:06:03,849 --> 00:06:07,419
functions<font color="#E5E5E5"> and details about abstraction</font>

130
00:06:05,830 --> 00:06:10,599
<font color="#E5E5E5">and normalization is</font><font color="#CCCCCC"> to is going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font>

131
00:06:07,419 --> 00:06:14,948
given in<font color="#E5E5E5"> a minute</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> to the</font>

132
00:06:10,599 --> 00:06:16,409
strings that are<font color="#E5E5E5"> for to reach the</font>

133
00:06:14,949 --> 00:06:22,750
abstraction<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Illuminations are</font>

134
00:06:16,410 --> 00:06:28,599
applied we can<font color="#E5E5E5"> calculate length and hash</font>

135
00:06:22,750 --> 00:06:29,030
values of these strings and then<font color="#CCCCCC"> we can</font>

136
00:06:28,599 --> 00:06:32,180
store

137
00:06:29,030 --> 00:06:35,299
everything in addition<font color="#CCCCCC"> arey</font><font color="#E5E5E5"> by using the</font>

138
00:06:32,180 --> 00:06:37,220
length<font color="#E5E5E5"> values as keys</font><font color="#CCCCCC"> and the</font>

139
00:06:35,300 --> 00:06:40,640
corresponding hash values that<font color="#E5E5E5"> share the</font>

140
00:06:37,220 --> 00:06:43,880
<font color="#CCCCCC">same key as a list</font><font color="#E5E5E5"> in that that is</font>

141
00:06:40,640 --> 00:06:48,219
mapped to<font color="#E5E5E5"> the key values so that's one</font>

142
00:06:43,880 --> 00:06:48,219
exemplary song<font color="#CCCCCC"> finger prediction</font><font color="#E5E5E5"> Airy</font>

143
00:06:48,550 --> 00:06:53,510
here is the explanation<font color="#E5E5E5"> about the</font>

144
00:06:51,350 --> 00:06:55,450
abstraction<font color="#E5E5E5"> and normalization we are</font>

145
00:06:53,510 --> 00:06:59,180
<font color="#E5E5E5">applying abstraction and normalization</font>

146
00:06:55,450 --> 00:07:02,479
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we want body to be resilient</font><font color="#E5E5E5"> to</font>

147
00:06:59,180 --> 00:07:05,780
common code modifications<font color="#E5E5E5"> after</font><font color="#CCCCCC"> cloning</font>

148
00:07:02,480 --> 00:07:08,060
<font color="#E5E5E5">such as variable renaming or data type</font>

149
00:07:05,780 --> 00:07:16,219
<font color="#E5E5E5">change changes of data type things like</font>

150
00:07:08,060 --> 00:07:18,620
that it keeps moving<font color="#E5E5E5"> so we transform</font>

151
00:07:16,220 --> 00:07:21,560
each and every function<font color="#E5E5E5"> in a software by</font>

152
00:07:18,620 --> 00:07:24,920
replacing<font color="#E5E5E5"> formal parameters local</font>

153
00:07:21,560 --> 00:07:30,020
variables data<font color="#CCCCCC"> types or</font><font color="#E5E5E5"> n function names</font>

154
00:07:24,920 --> 00:07:33,020
<font color="#E5E5E5">to this</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> common identifiers then we</font>

155
00:07:30,020 --> 00:07:35,990
move every<font color="#CCCCCC"> common tab like spaces</font><font color="#E5E5E5"> cash</font>

156
00:07:33,020 --> 00:07:38,210
returns line<font color="#E5E5E5"> feed and conduct a</font>

157
00:07:35,990 --> 00:07:40,850
<font color="#E5E5E5">lowercase conversion so that the</font>

158
00:07:38,210 --> 00:07:45,380
resulting the results of abstraction<font color="#CCCCCC"> and</font>

159
00:07:40,850 --> 00:07:47,710
<font color="#E5E5E5">limitation to be the string that is</font>

160
00:07:45,380 --> 00:07:47,710
shown below

161
00:07:47,800 --> 00:07:52,940
so now vulnerable kocoum detection is as

162
00:07:50,750 --> 00:07:54,710
simple as comparing<font color="#CCCCCC"> two fingerprint</font>

163
00:07:52,940 --> 00:07:56,719
dictionaries<font color="#CCCCCC"> and one of the dictionaries</font>

164
00:07:54,710 --> 00:07:58,849
is going to be a fingerprint dictionary

165
00:07:56,720 --> 00:08:00,170
of vulnerable functions and the other is

166
00:07:58,850 --> 00:08:03,650
<font color="#E5E5E5">going to be a fingerprint dictionary of</font>

167
00:08:00,170 --> 00:08:06,220
target functions and let's say we<font color="#E5E5E5"> have</font>

168
00:08:03,650 --> 00:08:09,590
these<font color="#CCCCCC"> values in each of the dictionary</font>

169
00:08:06,220 --> 00:08:11,720
so we first conduct<font color="#E5E5E5"> a key</font><font color="#CCCCCC"> lookup and the</font>

170
00:08:09,590 --> 00:08:14,929
<font color="#CCCCCC">look up of key value 20 is</font><font color="#E5E5E5"> going to be a</font>

171
00:08:11,720 --> 00:08:18,890
hit and then we proceed to a hash<font color="#E5E5E5"> lookup</font>

172
00:08:14,930 --> 00:08:20,840
and here we found a<font color="#E5E5E5"> 1 hash value in</font>

173
00:08:18,890 --> 00:08:23,780
common which<font color="#CCCCCC"> is the code clone that we</font>

174
00:08:20,840 --> 00:08:26,330
are looking<font color="#CCCCCC"> for and if there's no match</font>

175
00:08:23,780 --> 00:08:29,090
no<font color="#E5E5E5"> matching key look up then we don't</font>

176
00:08:26,330 --> 00:08:31,520
have to proceed to<font color="#E5E5E5"> -</font><font color="#CCCCCC"> lookup</font><font color="#E5E5E5"> also in this</font>

177
00:08:29,090 --> 00:08:33,620
<font color="#E5E5E5">case because the other dictionary</font>

178
00:08:31,520 --> 00:08:36,590
doesn't<font color="#E5E5E5"> have the key of 22 we don't have</font>

179
00:08:33,620 --> 00:08:38,570
to proceed to<font color="#E5E5E5"> - look so at last we can</font>

180
00:08:36,590 --> 00:08:41,240
conclude<font color="#E5E5E5"> that our target program</font>

181
00:08:38,570 --> 00:08:42,860
contains one vulnerable<font color="#CCCCCC"> kokum which</font><font color="#E5E5E5"> has</font>

182
00:08:41,240 --> 00:08:47,960
a hash value<font color="#CCCCCC"> of c9</font>

183
00:08:42,860 --> 00:08:50,480
<font color="#CCCCCC">the Nazi</font><font color="#E5E5E5"> 949 911 do we take advantage of</font>

184
00:08:47,960 --> 00:08:52,970
something<font color="#E5E5E5"> like inverted index filed and</font>

185
00:08:50,480 --> 00:08:56,450
we can retrieve the vulnerable function

186
00:08:52,970 --> 00:08:58,490
<font color="#E5E5E5">that we're looking</font><font color="#CCCCCC"> for like that now</font>

187
00:08:56,450 --> 00:09:01,580
let's proceed to performance evaluation

188
00:08:58,490 --> 00:09:06,230
and<font color="#E5E5E5"> case study to evaluate the</font>

189
00:09:01,580 --> 00:09:08,840
scalability of<font color="#E5E5E5"> body we collected more</font>

190
00:09:06,230 --> 00:09:12,110
than<font color="#CCCCCC"> 25k</font><font color="#E5E5E5"> github projects which had at</font>

191
00:09:08,840 --> 00:09:14,240
least one push<font color="#E5E5E5"> records and which has</font>

192
00:09:12,110 --> 00:09:16,450
gotten more than<font color="#E5E5E5"> one stars during</font><font color="#CCCCCC"> the</font>

193
00:09:14,240 --> 00:09:20,210
period of January<font color="#E5E5E5"> 1st and July 28th of</font>

194
00:09:16,450 --> 00:09:23,090
<font color="#E5E5E5">2016</font><font color="#CCCCCC"> and we measured the situation time</font>

195
00:09:20,210 --> 00:09:24,650
when varying size of randomly selected

196
00:09:23,090 --> 00:09:28,280
target programs are given to<font color="#E5E5E5"> our</font>

197
00:09:24,650 --> 00:09:30,470
approach buddy<font color="#E5E5E5"> and CC finder</font><font color="#CCCCCC"> X</font><font color="#E5E5E5"> Deckard</font>

198
00:09:28,280 --> 00:09:33,650
really<font color="#CCCCCC"> bugs and</font><font color="#E5E5E5"> sorcerer</font><font color="#CCCCCC"> CT which are</font>

199
00:09:30,470 --> 00:09:38,750
four of the<font color="#CCCCCC"> state-of-the-art</font><font color="#E5E5E5"> tools for</font>

200
00:09:33,650 --> 00:09:42,079
clone detection so as you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see in the</font>

201
00:09:38,750 --> 00:09:44,480
graph<font color="#CCCCCC"> that card did not scale beyond ten</font>

202
00:09:42,080 --> 00:09:46,610
million lines of code<font color="#E5E5E5"> target and please</font>

203
00:09:44,480 --> 00:09:48,410
notice<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the Linux kernel now</font>

204
00:09:46,610 --> 00:09:50,120
contains more<font color="#CCCCCC"> than 25 million lines of</font>

205
00:09:48,410 --> 00:09:52,069
<font color="#CCCCCC">code which means Deckard</font><font color="#E5E5E5"> is not enough</font>

206
00:09:50,120 --> 00:09:56,230
for enough to apply<font color="#E5E5E5"> to the real-world</font>

207
00:09:52,070 --> 00:09:58,610
<font color="#E5E5E5">programs scalability and safety finder</font><font color="#CCCCCC"> X</font>

208
00:09:56,230 --> 00:10:01,250
managed to handle 100<font color="#E5E5E5"> million lines of</font>

209
00:09:58,610 --> 00:10:04,250
code<font color="#CCCCCC"> but not beyond</font><font color="#E5E5E5"> and for</font><font color="#CCCCCC"> SolarCity it</font>

210
00:10:01,250 --> 00:10:06,590
<font color="#E5E5E5">has shown a an explosive</font><font color="#CCCCCC"> increase of</font>

211
00:10:04,250 --> 00:10:08,450
required time when you<font color="#E5E5E5"> try to get to the</font>

212
00:10:06,590 --> 00:10:11,780
1 billion lines of code<font color="#CCCCCC"> type</font><font color="#E5E5E5"> however</font>

213
00:10:08,450 --> 00:10:13,640
<font color="#E5E5E5">really welcome buddy both are managed to</font>

214
00:10:11,780 --> 00:10:18,650
survive in this scalability evaluation

215
00:10:13,640 --> 00:10:21,650
<font color="#E5E5E5">and in fact buddy could scale to the</font>

216
00:10:18,650 --> 00:10:24,280
<font color="#E5E5E5">whole 25k</font><font color="#CCCCCC"> Gator projects which contains</font>

217
00:10:21,650 --> 00:10:26,510
eight point seven billion lines of code

218
00:10:24,280 --> 00:10:29,870
<font color="#CCCCCC">so we can say the body is very very</font>

219
00:10:26,510 --> 00:10:32,510
scalable<font color="#E5E5E5"> and for accurate evaluation</font><font color="#CCCCCC"> we</font>

220
00:10:29,870 --> 00:10:35,900
selected a patchy HTTP server as our

221
00:10:32,510 --> 00:10:39,620
target<font color="#E5E5E5"> which contains</font><font color="#CCCCCC"> 350 K lines of</font>

222
00:10:35,900 --> 00:10:42,230
code<font color="#E5E5E5"> and in terms of true positives</font><font color="#CCCCCC"> the</font>

223
00:10:39,620 --> 00:10:44,860
tool<font color="#E5E5E5"> named the</font><font color="#CCCCCC"> 65-year</font><font color="#E5E5E5"> X could find two</font>

224
00:10:42,230 --> 00:10:47,930
more<font color="#E5E5E5"> to positive cases than buddy did</font>

225
00:10:44,860 --> 00:10:49,790
<font color="#E5E5E5">because they are</font><font color="#CCCCCC"> leveraging a token</font>

226
00:10:47,930 --> 00:10:51,770
level granularity<font color="#E5E5E5"> which is a finer</font>

227
00:10:49,790 --> 00:10:52,880
granularity<font color="#CCCCCC"> than</font><font color="#E5E5E5"> the function level</font>

228
00:10:51,770 --> 00:10:54,670
<font color="#CCCCCC">granule right</font><font color="#E5E5E5"> Larry</font>

229
00:10:52,880 --> 00:10:57,910
<font color="#E5E5E5">which body uses how</font>

230
00:10:54,670 --> 00:11:02,160
in terms of false<font color="#CCCCCC"> positive Susie finder</font>

231
00:10:57,910 --> 00:11:04,750
<font color="#E5E5E5">X has generated</font><font color="#CCCCCC"> 63 false positive cases</font>

232
00:11:02,160 --> 00:11:09,400
<font color="#E5E5E5">whereas</font><font color="#CCCCCC"> buddy had known false positive</font>

233
00:11:04,750 --> 00:11:11,200
at all and we also conducted an<font color="#CCCCCC"> an</font>

234
00:11:09,400 --> 00:11:13,540
in-depth comparison between body and

235
00:11:11,200 --> 00:11:15,310
<font color="#CCCCCC">read</font><font color="#E5E5E5"> above by detecting vulnerable</font><font color="#CCCCCC"> Co</font>

236
00:11:13,540 --> 00:11:16,839
<font color="#E5E5E5">clones it on Android smartphones former</font>

237
00:11:15,310 --> 00:11:20,020
which contains<font color="#E5E5E5"> 15 million lines of code</font>

238
00:11:16,840 --> 00:11:22,150
<font color="#E5E5E5">and the pre-processing time for</font><font color="#CCCCCC"> VAR en</font>

239
00:11:20,020 --> 00:11:23,380
<font color="#E5E5E5">really bug were 17 minutes and</font><font color="#CCCCCC"> 11</font>

240
00:11:22,150 --> 00:11:25,390
<font color="#CCCCCC">minutes respectively</font>

241
00:11:23,380 --> 00:11:28,660
however the clone detection time of body

242
00:11:25,390 --> 00:11:32,890
only<font color="#E5E5E5"> required 1.0 9 seconds whereas</font>

243
00:11:28,660 --> 00:11:35,560
<font color="#E5E5E5">really bug required 17 minutes moreover</font>

244
00:11:32,890 --> 00:11:37,960
what<font color="#E5E5E5"> he generated no false positives</font>

245
00:11:35,560 --> 00:11:39,939
<font color="#E5E5E5">even though this the target repository</font>

246
00:11:37,960 --> 00:11:45,220
is very very large<font color="#E5E5E5"> it was an Android</font>

247
00:11:39,940 --> 00:11:45,850
farmer<font color="#E5E5E5"> however really both had 1888</font>

248
00:11:45,220 --> 00:11:49,570
<font color="#E5E5E5">follow</font>

249
00:11:45,850 --> 00:11:51,160
<font color="#E5E5E5">I mean false positive</font><font color="#CCCCCC"> cases so five</font><font color="#E5E5E5"> of</font>

250
00:11:49,570 --> 00:11:54,430
the security researchers in our<font color="#E5E5E5"> lab had</font>

251
00:11:51,160 --> 00:12:03,850
to spend a week to manually verify<font color="#E5E5E5"> these</font>

252
00:11:54,430 --> 00:12:05,890
are<font color="#E5E5E5"> false positives now um you</font><font color="#CCCCCC"> should</font>

253
00:12:03,850 --> 00:12:08,910
know that the generated fingerprints

254
00:12:05,890 --> 00:12:11,290
<font color="#E5E5E5">once there was</font><font color="#CCCCCC"> their pre process and a</font>

255
00:12:08,910 --> 00:12:14,260
fingerprint is generated then they can

256
00:12:11,290 --> 00:12:17,199
be you reused for good so the actual

257
00:12:14,260 --> 00:12:19,180
phone<font color="#E5E5E5"> detection time if we are testing a</font>

258
00:12:17,200 --> 00:12:23,110
same<font color="#E5E5E5"> software over and over again then</font>

259
00:12:19,180 --> 00:12:24,939
<font color="#E5E5E5">body can do it in about a second so what</font>

260
00:12:23,110 --> 00:12:27,210
<font color="#CCCCCC">I want</font><font color="#E5E5E5"> to claim here is</font><font color="#CCCCCC"> that the actual</font>

261
00:12:24,940 --> 00:12:29,380
detection<font color="#E5E5E5"> time of body in practice is</font>

262
00:12:27,210 --> 00:12:33,970
faster than really bugged by<font color="#E5E5E5"> the factor</font>

263
00:12:29,380 --> 00:12:36,850
of<font color="#E5E5E5"> about thousand now here are some</font>

264
00:12:33,970 --> 00:12:38,740
cases where but<font color="#E5E5E5"> he effectively found</font>

265
00:12:36,850 --> 00:12:42,220
some of the unknown vulnerabilities in

266
00:12:38,740 --> 00:12:43,810
real<font color="#CCCCCC"> softwares</font><font color="#E5E5E5"> and one of which is the</font>

267
00:12:42,220 --> 00:12:46,750
unknown vulnerability detected in

268
00:12:43,810 --> 00:12:51,219
<font color="#CCCCCC">littles kernel</font><font color="#E5E5E5"> even in the latest stable</font>

269
00:12:46,750 --> 00:12:54,520
version<font color="#E5E5E5"> of last week and the original</font>

270
00:12:51,220 --> 00:12:56,710
vulnerability was in<font color="#CCCCCC"> ext 2 3 & 4</font><font color="#E5E5E5"> file</font>

271
00:12:54,520 --> 00:12:59,829
systems<font color="#E5E5E5"> and the patch for that was</font>

272
00:12:56,710 --> 00:13:02,860
released<font color="#E5E5E5"> in</font><font color="#CCCCCC"> thousandth</font><font color="#E5E5E5"> year</font><font color="#CCCCCC"> of 2008 of</font>

273
00:12:59,830 --> 00:13:03,850
course in the<font color="#CCCCCC"> Exe file systems</font><font color="#E5E5E5"> the</font>

274
00:13:02,860 --> 00:13:07,810
<font color="#CCCCCC">patches applied</font>

275
00:13:03,850 --> 00:13:09,300
however in in a file<font color="#CCCCCC"> system called ni FS</font>

276
00:13:07,810 --> 00:13:12,189
<font color="#E5E5E5">2</font>

277
00:13:09,300 --> 00:13:14,439
if<font color="#E5E5E5"> you look at the source</font><font color="#CCCCCC"> code of</font><font color="#E5E5E5"> these</font>

278
00:13:12,190 --> 00:13:17,320
two file systems implementations<font color="#E5E5E5"> we can</font>

279
00:13:14,440 --> 00:13:22,270
easily suppose that the<font color="#E5E5E5"> implementation</font>

280
00:13:17,320 --> 00:13:24,460
of NFS<font color="#CCCCCC"> two was</font><font color="#E5E5E5"> taken from</font><font color="#CCCCCC"> Exe exe file</font>

281
00:13:22,270 --> 00:13:26,920
systems they<font color="#E5E5E5"> cloned their code and</font>

282
00:13:24,460 --> 00:13:29,410
<font color="#E5E5E5">modified a bit</font><font color="#CCCCCC"> and so because of that</font>

283
00:13:26,920 --> 00:13:32,530
<font color="#E5E5E5">reason</font><font color="#CCCCCC"> the same vulnerability I mean the</font>

284
00:13:29,410 --> 00:13:35,079
similar vulnerability exists in the<font color="#CCCCCC"> NIS</font>

285
00:13:32,530 --> 00:13:37,720
<font color="#CCCCCC">s file system but</font><font color="#E5E5E5"> not patched until now</font>

286
00:13:35,080 --> 00:13:40,300
<font color="#E5E5E5">so we could trigger a print</font><font color="#CCCCCC"> k flood and</font>

287
00:13:37,720 --> 00:13:46,480
denial<font color="#CCCCCC"> service in Scent OS version 7 or</font>

288
00:13:40,300 --> 00:13:49,359
open<font color="#CCCCCC"> to 1404 here's</font><font color="#E5E5E5"> another example we</font>

289
00:13:46,480 --> 00:13:52,720
could have find a a DoD vulnerability in

290
00:13:49,360 --> 00:13:54,850
a patchy HTTP server to two point four

291
00:13:52,720 --> 00:13:58,830
point two zero to two point four point

292
00:13:54,850 --> 00:14:02,710
<font color="#E5E5E5">two five because these versions of HTTP</font>

293
00:13:58,830 --> 00:14:06,040
server daemon uses unpatched<font color="#CCCCCC"> old</font><font color="#E5E5E5"> expect</font>

294
00:14:02,710 --> 00:14:08,920
library for parsing XML files<font color="#E5E5E5"> and this</font>

295
00:14:06,040 --> 00:14:12,160
library is vulnerable to<font color="#CCCCCC"> cv two 1208</font>

296
00:14:08,920 --> 00:14:14,829
<font color="#CCCCCC">seven six</font><font color="#E5E5E5"> so we could easily trigger a</font>

297
00:14:12,160 --> 00:14:17,920
hashed also text to the server<font color="#CCCCCC"> demons by</font>

298
00:14:14,830 --> 00:14:21,250
sending a crusted XML packet so as you

299
00:14:17,920 --> 00:14:23,680
see in the capture<font color="#E5E5E5"> screen capture we we</font>

300
00:14:21,250 --> 00:14:28,450
made the server daemon to consume<font color="#E5E5E5"> 100%</font>

301
00:14:23,680 --> 00:14:30,160
<font color="#CCCCCC">CPU so in</font><font color="#E5E5E5"> summary buddy is an approach</font>

302
00:14:28,450 --> 00:14:31,900
which is capable<font color="#E5E5E5"> of</font><font color="#CCCCCC"> detecting software</font>

303
00:14:30,160 --> 00:14:33,969
vulnerability using a database of

304
00:14:31,900 --> 00:14:36,730
<font color="#E5E5E5">previously security patched functions</font>

305
00:14:33,970 --> 00:14:38,730
and applying abstraction<font color="#CCCCCC"> to the</font>

306
00:14:36,730 --> 00:14:40,930
functions enable identifying unknown

307
00:14:38,730 --> 00:14:42,910
vulnerable functions while still

308
00:14:40,930 --> 00:14:45,660
maintaining a low margin of errors<font color="#E5E5E5"> but</font>

309
00:14:42,910 --> 00:14:48,250
he had<font color="#E5E5E5"> really low false positive</font><font color="#CCCCCC"> rate</font>

310
00:14:45,660 --> 00:14:49,930
also<font color="#E5E5E5"> the function level granularity and</font>

311
00:14:48,250 --> 00:14:51,370
length<font color="#E5E5E5"> based filtering reduces the</font>

312
00:14:49,930 --> 00:14:54,510
number of signature comparisons

313
00:14:51,370 --> 00:14:57,460
guaranteeing high scalability<font color="#CCCCCC"> buddy even</font>

314
00:14:54,510 --> 00:14:59,890
<font color="#E5E5E5">but it could process</font><font color="#CCCCCC"> eight point seven</font>

315
00:14:57,460 --> 00:15:02,470
billion lines of code easily<font color="#E5E5E5"> and less</font>

316
00:14:59,890 --> 00:15:04,330
than<font color="#CCCCCC"> at</font><font color="#E5E5E5"> least it's provided as an open</font>

317
00:15:02,470 --> 00:15:07,090
web service so<font color="#CCCCCC"> you can test our</font>

318
00:15:04,330 --> 00:15:09,010
implementation and<font color="#CCCCCC"> IT cube the net so if</font>

319
00:15:07,090 --> 00:15:12,460
<font color="#E5E5E5">you're interested</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> our research</font><font color="#CCCCCC"> you</font>

320
00:15:09,010 --> 00:15:15,340
<font color="#E5E5E5">can come to the</font><font color="#CCCCCC"> website</font><font color="#E5E5E5"> and use this</font>

321
00:15:12,460 --> 00:15:17,920
tool<font color="#CCCCCC"> to test your programs and get some</font>

322
00:15:15,340 --> 00:15:20,020
interesting<font color="#CCCCCC"> results</font><font color="#E5E5E5"> so with that I'll</font>

323
00:15:17,920 --> 00:15:23,430
conclude<font color="#E5E5E5"> my talk and open to any</font>

324
00:15:20,020 --> 00:15:23,430
questions<font color="#CCCCCC"> or a conics they</font>

325
00:15:28,680 --> 00:15:43,859
any questions hello thank<font color="#E5E5E5"> you for the</font>

326
00:15:42,580 --> 00:15:47,040
<font color="#CCCCCC">talk</font>

327
00:15:43,860 --> 00:15:49,980
<font color="#CCCCCC">kokom I have two questions so the first</font>

328
00:15:47,040 --> 00:15:51,990
one as if I understand<font color="#E5E5E5"> correctly there</font>

329
00:15:49,980 --> 00:15:54,089
<font color="#E5E5E5">is some flexibility when</font><font color="#CCCCCC"> it comes to</font>

330
00:15:51,990 --> 00:15:57,120
clone detection for example<font color="#CCCCCC"> the days</font><font color="#E5E5E5"> of</font>

331
00:15:54,089 --> 00:15:59,640
<font color="#E5E5E5">variables and functions can differ</font><font color="#CCCCCC"> will</font>

332
00:15:57,120 --> 00:16:01,640
it still work<font color="#CCCCCC"> when the structure of the</font>

333
00:15:59,640 --> 00:16:05,760
function<font color="#E5E5E5"> was slightly different</font><font color="#CCCCCC"> how much</font>

334
00:16:01,640 --> 00:16:09,240
flexibility is there so the<font color="#E5E5E5"> coverage of</font>

335
00:16:05,760 --> 00:16:12,050
body is type<font color="#E5E5E5"> two clones which is which</font>

336
00:16:09,240 --> 00:16:15,540
<font color="#CCCCCC">is sometimes called renamed close so if</font>

337
00:16:12,050 --> 00:16:17,430
if some of the Statesmen statements are

338
00:16:15,540 --> 00:16:20,969
inserted or deleted then<font color="#CCCCCC"> buddy cannot</font>

339
00:16:17,430 --> 00:16:23,849
detect such cases thank you and the

340
00:16:20,970 --> 00:16:26,310
second<font color="#CCCCCC"> question is what would</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> say is</font>

341
00:16:23,850 --> 00:16:29,640
<font color="#CCCCCC">the main reason for low false positive</font>

342
00:16:26,310 --> 00:16:32,250
<font color="#E5E5E5">rate</font><font color="#CCCCCC"> that's because we're using the</font>

343
00:16:29,640 --> 00:16:34,620
function letter granularity<font color="#E5E5E5"> functions</font>

344
00:16:32,250 --> 00:16:37,140
function conveys both<font color="#E5E5E5"> the syntactic</font>

345
00:16:34,620 --> 00:16:41,040
instead and semantic informations<font color="#E5E5E5"> and</font>

346
00:16:37,140 --> 00:16:43,980
it's it's it's designed to be<font color="#CCCCCC"> serve a</font>

347
00:16:41,040 --> 00:16:45,240
certain<font color="#E5E5E5"> purpose</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> you know so I</font><font color="#CCCCCC"> think</font>

348
00:16:43,980 --> 00:16:47,910
that's why we<font color="#E5E5E5"> have low false positive</font>

349
00:16:45,240 --> 00:16:51,660
<font color="#E5E5E5">rate thank you very much thank you very</font>

350
00:16:47,910 --> 00:16:53,939
much hello<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> Cu from Purdue</font>

351
00:16:51,660 --> 00:16:55,529
<font color="#CCCCCC">University</font><font color="#E5E5E5"> I can you do mine if</font><font color="#CCCCCC"> you go</font>

352
00:16:53,940 --> 00:16:58,649
back to the slide<font color="#E5E5E5"> where you show the UX</font>

353
00:16:55,529 --> 00:17:02,640
teacher and the<font color="#E5E5E5"> other FS not check here</font>

354
00:16:58,649 --> 00:17:04,799
<font color="#E5E5E5">is this might be can you go back yeah so</font>

355
00:17:02,640 --> 00:17:08,099
this<font color="#E5E5E5"> one I'm</font><font color="#CCCCCC"> not sure curious this might</font>

356
00:17:04,799 --> 00:17:10,530
not<font color="#CCCCCC"> be</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> relevant you attack</font><font color="#E5E5E5"> me but</font>

357
00:17:08,099 --> 00:17:12,119
do you know why in the<font color="#CCCCCC"> exe</font><font color="#E5E5E5"> to source</font>

358
00:17:10,530 --> 00:17:15,149
code on the left hand side they have the

359
00:17:12,119 --> 00:17:19,168
<font color="#CCCCCC">niño</font><font color="#E5E5E5"> FS</font><font color="#CCCCCC"> D our entry on the fourth line</font>

360
00:17:15,150 --> 00:17:22,799
like if<font color="#CCCCCC"> they'd</font><font color="#E5E5E5"> like use also like how is</font>

361
00:17:19,169 --> 00:17:26,339
the<font color="#CCCCCC"> ext to using niños</font><font color="#E5E5E5"> STS oh okay um</font>

362
00:17:22,799 --> 00:17:29,520
if we follow<font color="#E5E5E5"> through the hex key to</font>

363
00:17:26,339 --> 00:17:32,190
<font color="#E5E5E5">underscore get page function</font><font color="#CCCCCC"> or niss</font>

364
00:17:29,520 --> 00:17:34,530
underscore get page function<font color="#CCCCCC"> and the two</font>

365
00:17:32,190 --> 00:17:37,620
functions look very similar except for

366
00:17:34,530 --> 00:17:40,049
<font color="#CCCCCC">the names of the functions</font><font color="#E5E5E5"> we call the</font>

367
00:17:37,620 --> 00:17:43,918
by<font color="#E5E5E5"> that I could</font><font color="#CCCCCC"> I could suppose it okay</font>

368
00:17:40,049 --> 00:17:46,139
the writers of<font color="#CCCCCC"> niss</font><font color="#E5E5E5"> to file system might</font>

369
00:17:43,919 --> 00:17:48,350
have cloned<font color="#E5E5E5"> some code some portion of</font>

370
00:17:46,140 --> 00:17:51,210
the<font color="#E5E5E5"> exe file systems implementation</font>

371
00:17:48,350 --> 00:17:54,178
right so I'm curious that actually in

372
00:17:51,210 --> 00:17:57,419
<font color="#E5E5E5">the</font><font color="#CCCCCC"> ext2</font><font color="#E5E5E5"> code</font><font color="#CCCCCC"> they have the fourth line</font>

373
00:17:54,179 --> 00:17:58,889
<font color="#CCCCCC">is ni l</font><font color="#E5E5E5"> FS</font><font color="#CCCCCC"> dir entry</font>

374
00:17:57,419 --> 00:18:01,709
it looks like<font color="#CCCCCC"> actually the exe to</font>

375
00:17:58,889 --> 00:18:04,619
<font color="#CCCCCC">vowel-like their code is copied from ni</font>

376
00:18:01,709 --> 00:18:08,459
<font color="#CCCCCC">OSS that so if you look at</font><font color="#E5E5E5"> the line for</font>

377
00:18:04,619 --> 00:18:11,968
<font color="#E5E5E5">you have some ni RFS yeah yeah</font><font color="#CCCCCC"> our entry</font>

378
00:18:08,459 --> 00:18:14,249
so how is what is it doing in<font color="#CCCCCC"> the XC</font><font color="#E5E5E5"> so</font>

379
00:18:11,969 --> 00:18:16,079
I like to<font color="#CCCCCC"> me I'm just curious it looks</font>

380
00:18:14,249 --> 00:18:18,059
<font color="#CCCCCC">like they also copying from the other</font>

381
00:18:16,079 --> 00:18:20,339
side<font color="#E5E5E5"> is a code on the left hand side I</font>

382
00:18:18,059 --> 00:18:22,559
<font color="#E5E5E5">think if that's the type</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> out that</font>

383
00:18:20,339 --> 00:18:24,629
supposed to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> exe - I'm sorry if</font>

384
00:18:22,559 --> 00:18:28,799
again<font color="#E5E5E5"> a doors yeah thank you thank you</font>

385
00:18:24,629 --> 00:18:31,468
<font color="#CCCCCC">very much alright</font><font color="#E5E5E5"> so just</font><font color="#CCCCCC"> one last</font>

386
00:18:28,799 --> 00:18:34,349
perhaps less important question yeah it

387
00:18:31,469 --> 00:18:35,999
seemed like you were showing us this bug

388
00:18:34,349 --> 00:18:38,539
and<font color="#E5E5E5"> the bug and Apache which are</font>

389
00:18:35,999 --> 00:18:39,929
unpatched<font color="#CCCCCC"> still</font><font color="#E5E5E5"> or have to be in past</font>

390
00:18:38,539 --> 00:18:42,779
sorry

391
00:18:39,929 --> 00:18:45,899
<font color="#CCCCCC">this bug here which sort of feels like</font>

392
00:18:42,779 --> 00:18:47,729
you said it exists in existing<font color="#E5E5E5"> the Linux</font>

393
00:18:45,899 --> 00:18:49,918
kernel<font color="#E5E5E5"> the newest one from one week ago</font>

394
00:18:47,729 --> 00:18:52,469
<font color="#E5E5E5">and the bug in the next slide which is</font>

395
00:18:49,919 --> 00:18:55,679
<font color="#E5E5E5">on an Apache case here</font>

396
00:18:52,469 --> 00:18:58,259
<font color="#E5E5E5">so I have</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> big</font><font color="#CCCCCC"> basket</font>

397
00:18:55,679 --> 00:19:01,409
these are not patched yet and the<font color="#CCCCCC"> APHA</font>

398
00:18:58,259 --> 00:19:05,009
<font color="#E5E5E5">security</font><font color="#CCCCCC"> officer so and they they they</font>

399
00:19:01,409 --> 00:19:06,959
<font color="#E5E5E5">said that the new version</font><font color="#CCCCCC"> of httpd is</font>

400
00:19:05,009 --> 00:19:10,169
not affected<font color="#E5E5E5"> anymore because they have</font>

401
00:19:06,959 --> 00:19:13,340
updated<font color="#CCCCCC"> the expert library</font><font color="#E5E5E5"> okay</font>

402
00:19:10,169 --> 00:19:19,020
<font color="#CCCCCC">alright thank you</font><font color="#E5E5E5"> thank you so much</font>

403
00:19:13,340 --> 00:19:19,020
[Applause]

