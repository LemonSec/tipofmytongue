1
00:00:12,780 --> 00:00:18,369
thank you so I'm<font color="#CCCCCC"> for sending the paper</font>

2
00:00:16,720 --> 00:00:20,020
from trash to treasure<font color="#CCCCCC"> timing tents with</font>

3
00:00:18,369 --> 00:00:23,890
garbage collection which is<font color="#CCCCCC"> joint work</font>

4
00:00:20,020 --> 00:00:25,390
<font color="#CCCCCC">with my adviser</font><font color="#E5E5E5"> SMS</font><font color="#CCCCCC"> go off</font><font color="#E5E5E5"> and to help</font>

5
00:00:23,890 --> 00:00:27,880
me with<font color="#E5E5E5"> the story</font><font color="#CCCCCC"> let me introduce you</font>

6
00:00:25,390 --> 00:00:30,400
<font color="#E5E5E5">to Bob Bob the regular guy who hates</font>

7
00:00:27,880 --> 00:00:32,710
doing taxes yet he<font color="#CCCCCC"> still has to</font><font color="#E5E5E5"> compute</font>

8
00:00:30,400 --> 00:00:33,040
them so he asked his friend<font color="#E5E5E5"> Alice for</font>

9
00:00:32,710 --> 00:00:36,460
help

10
00:00:33,040 --> 00:00:38,440
and luckily<font color="#E5E5E5"> Alice has a program that can</font>

11
00:00:36,460 --> 00:00:39,760
<font color="#E5E5E5">do just</font><font color="#CCCCCC"> this for Bob</font><font color="#E5E5E5"> all he needs to do</font>

12
00:00:38,440 --> 00:00:41,769
is just<font color="#E5E5E5"> input his confidential</font>

13
00:00:39,760 --> 00:00:44,589
information into the this tax

14
00:00:41,769 --> 00:00:46,780
computation<font color="#E5E5E5"> Automator</font><font color="#CCCCCC"> so well agree to</font>

15
00:00:44,589 --> 00:00:48,159
do this and it<font color="#E5E5E5"> turns out that</font><font color="#CCCCCC"> the</font>

16
00:00:46,780 --> 00:00:50,729
<font color="#E5E5E5">program just instantly leaks</font>

17
00:00:48,159 --> 00:00:54,549
<font color="#E5E5E5">Bob's confidential information so Alice</font>

18
00:00:50,729 --> 00:00:57,070
which is that so<font color="#E5E5E5"> we want to avoid this</font>

19
00:00:54,549 --> 00:00:59,049
<font color="#CCCCCC">and Bob could</font><font color="#E5E5E5"> have done this in a much</font>

20
00:00:57,070 --> 00:01:01,150
smarter way<font color="#CCCCCC"> for instance he could have</font>

21
00:00:59,049 --> 00:01:02,979
run the program through some<font color="#E5E5E5"> kind of</font>

22
00:01:01,150 --> 00:01:04,150
static<font color="#E5E5E5"> analysis tool which would then</font>

23
00:01:02,979 --> 00:01:07,060
detect whether or not there are any

24
00:01:04,150 --> 00:01:09,850
flows from Bob's confidential

25
00:01:07,060 --> 00:01:13,180
information to Alice's health to Alice

26
00:01:09,850 --> 00:01:14,740
and<font color="#E5E5E5"> then every time the static analysis</font>

27
00:01:13,180 --> 00:01:18,520
<font color="#E5E5E5">tool would say that such a flow exists</font>

28
00:01:14,740 --> 00:01:21,490
<font color="#E5E5E5">he would just not run the program yes</font>

29
00:01:18,520 --> 00:01:23,229
you'll not run the program<font color="#CCCCCC"> and now it's</font>

30
00:01:21,490 --> 00:01:26,350
Alice comes along with a new program

31
00:01:23,229 --> 00:01:28,689
<font color="#CCCCCC">which is much more complicated</font><font color="#E5E5E5"> and Bob</font>

32
00:01:26,350 --> 00:01:30,669
as<font color="#CCCCCC"> she</font><font color="#E5E5E5"> should run</font><font color="#CCCCCC"> this this program here</font>

33
00:01:28,689 --> 00:01:34,240
through the static<font color="#E5E5E5"> analysis tool which</font>

34
00:01:30,670 --> 00:01:35,679
says that<font color="#CCCCCC"> he's secure but it turns out</font>

35
00:01:34,240 --> 00:01:37,509
<font color="#E5E5E5">that</font><font color="#CCCCCC"> this program actually also leaks</font>

36
00:01:35,679 --> 00:01:40,359
<font color="#CCCCCC">bob's information through a timing</font>

37
00:01:37,509 --> 00:01:42,100
channel<font color="#E5E5E5"> so what the program here does is</font>

38
00:01:40,359 --> 00:01:43,809
that<font color="#E5E5E5"> it it was to find out whether</font><font color="#CCCCCC"> or</font>

39
00:01:42,100 --> 00:01:46,059
<font color="#CCCCCC">not Bob salary is greater</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> 500</font>

40
00:01:43,810 --> 00:01:48,310
<font color="#CCCCCC">thousand so it measures</font><font color="#E5E5E5"> the time</font>

41
00:01:46,060 --> 00:01:50,649
beforehand<font color="#CCCCCC"> and measures the time after</font>

42
00:01:48,310 --> 00:01:52,149
<font color="#E5E5E5">branching on this information</font><font color="#CCCCCC"> and then</font>

43
00:01:50,649 --> 00:01:54,759
it<font color="#E5E5E5"> sends the difference to</font><font color="#CCCCCC"> alice</font><font color="#E5E5E5"> and</font>

44
00:01:52,149 --> 00:01:57,039
then<font color="#E5E5E5"> alice based on this number</font><font color="#CCCCCC"> here can</font>

45
00:01:54,759 --> 00:01:58,659
detect whether or not we took this

46
00:01:57,039 --> 00:02:00,069
<font color="#E5E5E5">branch in the in the</font><font color="#CCCCCC"> program and then</font>

47
00:01:58,659 --> 00:02:03,009
whether or not<font color="#CCCCCC"> bob is is earning more</font>

48
00:02:00,069 --> 00:02:04,450
<font color="#CCCCCC">than five hundred</font><font color="#E5E5E5"> thousand but we're</font>

49
00:02:03,009 --> 00:02:06,399
actually not<font color="#E5E5E5"> that worried about such an</font>

50
00:02:04,450 --> 00:02:07,659
<font color="#E5E5E5">issue here</font><font color="#CCCCCC"> because there</font><font color="#E5E5E5"> are static</font>

51
00:02:06,399 --> 00:02:09,940
analysis tools that<font color="#CCCCCC"> can detect such</font>

52
00:02:07,659 --> 00:02:13,240
flows<font color="#E5E5E5"> so we can just put</font><font color="#CCCCCC"> on more static</font>

53
00:02:09,940 --> 00:02:15,220
analysis to fix this<font color="#E5E5E5"> problem and if</font>

54
00:02:13,240 --> 00:02:17,230
we're worried about<font color="#CCCCCC"> cash attacks we can</font>

55
00:02:15,220 --> 00:02:19,510
run our program on specialized<font color="#E5E5E5"> hardware</font>

56
00:02:17,230 --> 00:02:21,459
which would mitigate such problems and

57
00:02:19,510 --> 00:02:24,220
then the static analysis tool<font color="#E5E5E5"> would then</font>

58
00:02:21,460 --> 00:02:26,650
detect if these branches on secret

59
00:02:24,220 --> 00:02:28,480
information<font color="#CCCCCC"> consumed equal time</font>

60
00:02:26,650 --> 00:02:33,010
so we don't<font color="#E5E5E5"> leak</font><font color="#CCCCCC"> information through the</font>

61
00:02:28,480 --> 00:02:35,859
<font color="#CCCCCC">cache so now</font><font color="#E5E5E5"> alice is pretty sad she can</font>

62
00:02:33,010 --> 00:02:37,299
no longer leak false information but it

63
00:02:35,860 --> 00:02:39,460
turns<font color="#E5E5E5"> out there's another way to leak</font>

64
00:02:37,300 --> 00:02:41,980
the<font color="#CCCCCC"> information because the program</font><font color="#E5E5E5"> is</font>

65
00:02:39,460 --> 00:02:43,420
running in a managed language animatics

66
00:02:41,980 --> 00:02:46,780
<font color="#E5E5E5">Menace language has a garbage collector</font>

67
00:02:43,420 --> 00:02:52,299
<font color="#CCCCCC">and we can</font><font color="#E5E5E5"> actually leak in information</font>

68
00:02:46,780 --> 00:02:54,400
through this garbage<font color="#E5E5E5"> collector yes so</font>

69
00:02:52,300 --> 00:02:57,460
here's a program<font color="#E5E5E5"> which operates on a</font>

70
00:02:54,400 --> 00:03:00,010
stack and a heap and then<font color="#CCCCCC"> as</font><font color="#E5E5E5"> the program</font>

71
00:02:57,460 --> 00:03:02,410
moves along it allocates a memory and it

72
00:03:00,010 --> 00:03:04,600
modifies<font color="#CCCCCC"> the heap in some way so</font><font color="#E5E5E5"> that</font>

73
00:03:02,410 --> 00:03:07,540
something becomes garbage similarly<font color="#E5E5E5"> you</font>

74
00:03:04,600 --> 00:03:10,239
<font color="#E5E5E5">can modify the stack like</font><font color="#CCCCCC"> this and then</font>

75
00:03:07,540 --> 00:03:11,560
more stuff becomes garbage and<font color="#E5E5E5"> then at</font>

76
00:03:10,240 --> 00:03:13,920
<font color="#E5E5E5">some point we want to allocate them</font>

77
00:03:11,560 --> 00:03:16,510
another object<font color="#CCCCCC"> what our heap is full now</font>

78
00:03:13,920 --> 00:03:18,040
<font color="#CCCCCC">so what's going to happen is that we're</font>

79
00:03:16,510 --> 00:03:20,220
going to<font color="#CCCCCC"> do a garbage collection</font><font color="#E5E5E5"> which</font>

80
00:03:18,040 --> 00:03:22,929
means that we lose some of<font color="#E5E5E5"> this</font>

81
00:03:20,220 --> 00:03:24,460
discoveries from the<font color="#E5E5E5"> heat but the fact</font>

82
00:03:22,930 --> 00:03:26,620
that the garbage<font color="#E5E5E5"> collection occurs and</font>

83
00:03:24,460 --> 00:03:30,880
how long the garbage collector takes to

84
00:03:26,620 --> 00:03:32,890
execute<font color="#E5E5E5"> tells a lot about the</font><font color="#CCCCCC"> program so</font>

85
00:03:30,880 --> 00:03:34,720
in this word here<font color="#CCCCCC"> represent the</font><font color="#E5E5E5"> first</font>

86
00:03:32,890 --> 00:03:36,429
<font color="#E5E5E5">amplifier</font><font color="#CCCCCC"> ball covered</font><font color="#E5E5E5"> channel again</font>

87
00:03:34,720 --> 00:03:38,280
<font color="#E5E5E5">automatic memory management which</font><font color="#CCCCCC"> is</font>

88
00:03:36,430 --> 00:03:41,560
detectable over a<font color="#E5E5E5"> network connection</font>

89
00:03:38,280 --> 00:03:43,990
then we place we identify<font color="#CCCCCC"> the sign</font>

90
00:03:41,560 --> 00:03:46,240
constraints on the GC<font color="#E5E5E5"> which severely</font>

91
00:03:43,990 --> 00:03:49,120
<font color="#CCCCCC">limits the total</font><font color="#E5E5E5"> design space of</font><font color="#CCCCCC"> secured</font>

92
00:03:46,240 --> 00:03:50,710
garbage collection and<font color="#CCCCCC"> finally we show</font>

93
00:03:49,120 --> 00:03:52,750
that garbage<font color="#E5E5E5"> collect</font><font color="#CCCCCC"> secure gaol</font>

94
00:03:50,710 --> 00:03:54,220
expression can<font color="#CCCCCC"> be incorporated</font><font color="#E5E5E5"> in with</font>

95
00:03:52,750 --> 00:03:56,080
traditional information<font color="#E5E5E5"> flow techniques</font>

96
00:03:54,220 --> 00:03:58,300
to<font color="#E5E5E5"> establish a non interference results</font>

97
00:03:56,080 --> 00:03:59,650
<font color="#CCCCCC">and all</font><font color="#E5E5E5"> of the meta theory has</font><font color="#CCCCCC"> been</font>

98
00:03:58,300 --> 00:04:02,580
formalized in the cultural system<font color="#E5E5E5"> in</font>

99
00:03:59,650 --> 00:04:04,570
<font color="#E5E5E5">about thirty five thousand lines of code</font>

100
00:04:02,580 --> 00:04:08,740
<font color="#E5E5E5">when we first introduced</font><font color="#CCCCCC"> the color</font>

101
00:04:04,570 --> 00:04:10,239
<font color="#E5E5E5">channel</font><font color="#CCCCCC"> so here's a</font><font color="#E5E5E5"> program which will</font>

102
00:04:08,740 --> 00:04:12,430
leak whether<font color="#E5E5E5"> not Bob salary is greater</font>

103
00:04:10,240 --> 00:04:13,570
<font color="#E5E5E5">than</font><font color="#CCCCCC"> five hundred thousand so let's</font>

104
00:04:12,430 --> 00:04:15,610
first<font color="#E5E5E5"> assume that this is</font><font color="#CCCCCC"> true and</font>

105
00:04:13,570 --> 00:04:17,320
<font color="#CCCCCC">published earning more than</font><font color="#E5E5E5"> farmers out</font>

106
00:04:15,610 --> 00:04:18,760
<font color="#E5E5E5">for a year then what's going to</font><font color="#CCCCCC"> happen</font>

107
00:04:17,320 --> 00:04:21,399
is that<font color="#E5E5E5"> we allocate some memory and</font>

108
00:04:18,760 --> 00:04:23,620
store the reference in a then we take

109
00:04:21,399 --> 00:04:24,820
the true<font color="#CCCCCC"> branch</font><font color="#E5E5E5"> here which means that we</font>

110
00:04:23,620 --> 00:04:27,160
allocate some more memory<font color="#E5E5E5"> and store</font>

111
00:04:24,820 --> 00:04:28,900
<font color="#CCCCCC">referencing B so now</font><font color="#E5E5E5"> notice that a and B</font>

112
00:04:27,160 --> 00:04:32,080
they point to<font color="#CCCCCC"> different keep allocations</font>

113
00:04:28,900 --> 00:04:34,929
<font color="#E5E5E5">and then when we get down to the next</font>

114
00:04:32,080 --> 00:04:38,680
allocation here<font color="#E5E5E5"> for X we hit the</font><font color="#CCCCCC"> GCE</font>

115
00:04:34,930 --> 00:04:40,389
threshold here and since<font color="#CCCCCC"> this is Java</font>

116
00:04:38,680 --> 00:04:42,070
there's less one thing

117
00:04:40,389 --> 00:04:43,930
we need to know about the Java collector

118
00:04:42,070 --> 00:04:46,030
is that it<font color="#CCCCCC"> runs in a copy collector</font>

119
00:04:43,930 --> 00:04:48,430
which means that the time<font color="#E5E5E5"> taken by the</font>

120
00:04:46,030 --> 00:04:51,190
GC is<font color="#E5E5E5"> proportional</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> much memories</font>

121
00:04:48,430 --> 00:04:53,220
<font color="#E5E5E5">is reachable in the program so here we</font>

122
00:04:51,190 --> 00:04:55,780
see<font color="#E5E5E5"> that there are</font><font color="#CCCCCC"> two reachable</font>

123
00:04:53,220 --> 00:04:57,730
allocations in the program which means

124
00:04:55,780 --> 00:05:02,109
that the GC time is going to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> fairly</font>

125
00:04:57,730 --> 00:05:03,820
<font color="#E5E5E5">large so in contrast let's assume now</font>

126
00:05:02,110 --> 00:05:06,040
<font color="#E5E5E5">that Bob is less than</font><font color="#CCCCCC"> 500 thousand a</font>

127
00:05:03,820 --> 00:05:07,990
year<font color="#E5E5E5"> once</font><font color="#CCCCCC"> again we allocate the memory</font>

128
00:05:06,040 --> 00:05:10,360
you can store it in<font color="#E5E5E5"> a then we take the</font>

129
00:05:07,990 --> 00:05:12,250
false branch where we allocate some

130
00:05:10,360 --> 00:05:13,780
memory<font color="#E5E5E5"> influency but notice here now</font>

131
00:05:12,250 --> 00:05:17,560
that a and<font color="#CCCCCC"> B they point to the same</font>

132
00:05:13,780 --> 00:05:20,320
array<font color="#E5E5E5"> the alias so when we get</font><font color="#CCCCCC"> down to</font>

133
00:05:17,560 --> 00:05:21,820
the<font color="#CCCCCC"> allocation for</font><font color="#E5E5E5"> X we have the</font>

134
00:05:20,320 --> 00:05:24,520
<font color="#CCCCCC">situation where</font><font color="#E5E5E5"> a and B point to the</font>

135
00:05:21,820 --> 00:05:26,560
same<font color="#CCCCCC"> array and we have some garbage so</font>

136
00:05:24,520 --> 00:05:28,690
now only half as much<font color="#CCCCCC"> memory needs</font><font color="#E5E5E5"> to be</font>

137
00:05:26,560 --> 00:05:31,479
copied<font color="#E5E5E5"> in a copy collector for Java</font>

138
00:05:28,690 --> 00:05:33,340
which means that<font color="#CCCCCC"> we'd expect</font><font color="#E5E5E5"> that the</font>

139
00:05:31,479 --> 00:05:36,820
time taken<font color="#CCCCCC"> by this teacher is going</font><font color="#E5E5E5"> to</font>

140
00:05:33,340 --> 00:05:45,750
be much faster and to show that<font color="#CCCCCC"> I'm not</font>

141
00:05:36,820 --> 00:05:50,080
kidding<font color="#E5E5E5"> I have</font><font color="#CCCCCC"> a demo so C's</font><font color="#E5E5E5"> visible yes</font>

142
00:05:45,750 --> 00:05:52,000
<font color="#CCCCCC">okay so this</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> program</font><font color="#E5E5E5"> that's on my</font>

143
00:05:50,080 --> 00:05:54,039
slides<font color="#CCCCCC"> but the</font><font color="#E5E5E5"> only difference here is</font>

144
00:05:52,000 --> 00:05:55,960
that<font color="#CCCCCC"> I've instantiate it</font><font color="#E5E5E5"> size</font><font color="#CCCCCC"> 1 and</font><font color="#E5E5E5"> size</font>

145
00:05:54,039 --> 00:06:00,460
2 with actual<font color="#CCCCCC"> numbers and</font><font color="#E5E5E5"> then I take in</font>

146
00:05:55,960 --> 00:06:03,760
Bob salary as an input so if we run the

147
00:06:00,460 --> 00:06:08,049
program first<font color="#E5E5E5"> by taking the false branch</font>

148
00:06:03,760 --> 00:06:11,440
here we get about<font color="#CCCCCC"> 10 milliseconds of</font>

149
00:06:08,050 --> 00:06:15,250
execution it's pretty stable<font color="#E5E5E5"> but if we</font>

150
00:06:11,440 --> 00:06:17,440
take the other<font color="#E5E5E5"> branch then the time</font><font color="#CCCCCC"> is</font>

151
00:06:15,250 --> 00:06:20,229
almost<font color="#CCCCCC"> doubled in about 20 milliseconds</font>

152
00:06:17,440 --> 00:06:22,539
now so there's an<font color="#CCCCCC"> actual difference</font><font color="#E5E5E5"> in</font>

153
00:06:20,229 --> 00:06:23,710
in the timing of<font color="#CCCCCC"> serve on this program</font>

154
00:06:22,539 --> 00:06:26,789
here<font color="#E5E5E5"> and this is significant enough</font><font color="#CCCCCC"> to</font>

155
00:06:23,710 --> 00:06:30,880
be detectable<font color="#CCCCCC"> over a network</font><font color="#E5E5E5"> connection</font>

156
00:06:26,789 --> 00:06:32,950
so here we see a graph<font color="#E5E5E5"> of 25 runs of</font>

157
00:06:30,880 --> 00:06:34,810
<font color="#E5E5E5">this program here where we see that if</font>

158
00:06:32,950 --> 00:06:36,430
<font color="#E5E5E5">there are no GCS</font><font color="#CCCCCC"> then the timing is</font>

159
00:06:34,810 --> 00:06:39,639
<font color="#CCCCCC">going to be about the</font><font color="#E5E5E5"> same but</font><font color="#CCCCCC"> weather</font>

160
00:06:36,430 --> 00:06:41,620
happens to<font color="#E5E5E5"> be TC the time taken</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> GC is</font>

161
00:06:39,639 --> 00:06:45,820
much larger<font color="#E5E5E5"> when we check the true</font>

162
00:06:41,620 --> 00:06:47,350
branch compared to the false branch<font color="#CCCCCC"> so</font>

163
00:06:45,820 --> 00:06:49,479
you might<font color="#CCCCCC"> be</font><font color="#E5E5E5"> wondering why this is a big</font>

164
00:06:47,350 --> 00:06:51,760
deal<font color="#CCCCCC"> we can leak the same thing via some</font>

165
00:06:49,479 --> 00:06:52,870
kind of termination<font color="#CCCCCC"> channel but this is</font>

166
00:06:51,760 --> 00:06:53,889
a big deal because<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> actually</font>

167
00:06:52,870 --> 00:06:56,319
amplify<font color="#E5E5E5"> the attack</font>

168
00:06:53,889 --> 00:06:58,060
like any<font color="#E5E5E5"> number of bits</font><font color="#CCCCCC"> so I won't go</font>

169
00:06:56,319 --> 00:06:59,110
into details here<font color="#CCCCCC"> about what</font><font color="#E5E5E5"> what the</font>

170
00:06:58,060 --> 00:07:00,819
program does here you can read about

171
00:06:59,110 --> 00:07:02,499
<font color="#CCCCCC">that in the paper but</font><font color="#E5E5E5"> the important</font>

172
00:07:00,819 --> 00:07:05,439
<font color="#E5E5E5">thing is</font><font color="#CCCCCC"> that this leaks</font><font color="#E5E5E5"> a 32-bit</font>

173
00:07:02,499 --> 00:07:08,050
<font color="#CCCCCC">integer with a read about</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> one five a</font>

174
00:07:05,439 --> 00:07:10,930
second and it<font color="#CCCCCC"> produces</font><font color="#E5E5E5"> the graph as seen</font>

175
00:07:08,050 --> 00:07:15,789
on the<font color="#E5E5E5"> right and you can do this exact</font>

176
00:07:10,930 --> 00:07:21,819
<font color="#CCCCCC">same attack in v8 which leaks</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> one</font>

177
00:07:15,789 --> 00:07:22,930
by the second as<font color="#E5E5E5"> well so now I've gotten</font>

178
00:07:21,819 --> 00:07:25,569
through the first<font color="#E5E5E5"> thing because</font><font color="#CCCCCC"> I'm the</font>

179
00:07:22,930 --> 00:07:27,759
attack<font color="#E5E5E5"> and now I want to like I want to</font>

180
00:07:25,569 --> 00:07:29,889
<font color="#CCCCCC">present the</font><font color="#E5E5E5"> sign</font><font color="#CCCCCC"> constraint force you to</font>

181
00:07:27,759 --> 00:07:31,719
secure garbage collection in particular

182
00:07:29,889 --> 00:07:34,620
I want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> ask the question when is it</font>

183
00:07:31,719 --> 00:07:38,680
<font color="#CCCCCC">okay to invoke a garbage collector and</font>

184
00:07:34,620 --> 00:07:42,009
when can you<font color="#CCCCCC"> actually collect</font><font color="#E5E5E5"> once</font>

185
00:07:38,680 --> 00:07:43,689
you've<font color="#CCCCCC"> invoked the collector so the</font>

186
00:07:42,009 --> 00:07:46,300
first observation here is<font color="#E5E5E5"> that it it's</font>

187
00:07:43,689 --> 00:07:48,250
<font color="#CCCCCC">insecure</font><font color="#E5E5E5"> to GC public values when you're</font>

188
00:07:46,300 --> 00:07:50,319
in a secret context so to illustrate

189
00:07:48,250 --> 00:07:51,810
<font color="#CCCCCC">what I mean</font><font color="#E5E5E5"> by this let's consider</font>

190
00:07:50,319 --> 00:07:54,819
<font color="#E5E5E5">program here that starts by allocating</font>

191
00:07:51,810 --> 00:07:56,800
<font color="#CCCCCC">memory and stored in</font><font color="#E5E5E5"> X which we then</font>

192
00:07:54,819 --> 00:07:59,379
instantly<font color="#E5E5E5"> make garbage now we have some</font>

193
00:07:56,800 --> 00:08:00,520
garbage memory<font color="#E5E5E5"> and then assume</font><font color="#CCCCCC"> that this</font>

194
00:07:59,379 --> 00:08:03,639
<font color="#E5E5E5">secret here which we want to protect</font>

195
00:08:00,520 --> 00:08:06,068
<font color="#CCCCCC">it's greater than zero</font><font color="#E5E5E5"> will now allocate</font>

196
00:08:03,639 --> 00:08:09,460
<font color="#E5E5E5">there's some more memory which cause us</font>

197
00:08:06,069 --> 00:08:12,159
<font color="#CCCCCC">to hit the</font><font color="#E5E5E5"> GC threshold here</font><font color="#CCCCCC"> and this</font>

198
00:08:09,460 --> 00:08:15,399
<font color="#CCCCCC">means that we're now in a secret</font><font color="#E5E5E5"> context</font>

199
00:08:12,159 --> 00:08:17,500
and we can<font color="#E5E5E5"> GC the public value which is</font>

200
00:08:15,399 --> 00:08:19,990
was previously stored in<font color="#E5E5E5"> X so</font><font color="#CCCCCC"> would you</font>

201
00:08:17,500 --> 00:08:22,089
see<font color="#E5E5E5"> that one and then once we get down</font>

202
00:08:19,990 --> 00:08:23,409
to the next allocation we won't do a GC

203
00:08:22,089 --> 00:08:25,659
because we've already done<font color="#CCCCCC"> that and we</font>

204
00:08:23,409 --> 00:08:28,479
have space enough for<font color="#E5E5E5"> that this this</font>

205
00:08:25,659 --> 00:08:31,060
time here is<font color="#E5E5E5"> going to be small in</font>

206
00:08:28,479 --> 00:08:33,039
contrast if<font color="#E5E5E5"> we take the if we don't take</font>

207
00:08:31,060 --> 00:08:35,948
the branch<font color="#E5E5E5"> we once</font><font color="#CCCCCC"> again we allocate the</font>

208
00:08:33,039 --> 00:08:38,740
<font color="#E5E5E5">memory we make it garbage and then we</font>

209
00:08:35,948 --> 00:08:41,319
get<font color="#E5E5E5"> down to the the GC threshold at this</font>

210
00:08:38,740 --> 00:08:43,539
time here<font color="#E5E5E5"> and now we need</font><font color="#CCCCCC"> to do the GC</font>

211
00:08:41,320 --> 00:08:47,620
which we did<font color="#E5E5E5"> previously before in the in</font>

212
00:08:43,539 --> 00:08:50,680
the in the<font color="#E5E5E5"> branch so this time here is</font>

213
00:08:47,620 --> 00:08:52,750
going<font color="#E5E5E5"> to be much larger so we can clued</font>

214
00:08:50,680 --> 00:08:54,939
<font color="#E5E5E5">that it's actually not safe to GC public</font>

215
00:08:52,750 --> 00:08:56,320
values in a secret context so the

216
00:08:54,940 --> 00:08:58,810
natural question<font color="#E5E5E5"> is what about the</font><font color="#CCCCCC"> other</font>

217
00:08:56,320 --> 00:09:00,430
direction<font color="#CCCCCC"> and it's actually also</font><font color="#E5E5E5"> integer</font>

218
00:08:58,810 --> 00:09:02,768
<font color="#E5E5E5">to GC secret values in the public</font>

219
00:09:00,430 --> 00:09:05,329
context until<font color="#E5E5E5"> I said this let's imagine</font>

220
00:09:02,769 --> 00:09:06,890
we<font color="#CCCCCC"> have a java static electricity</font><font color="#E5E5E5"> for</font>

221
00:09:05,330 --> 00:09:09,230
so what happens here<font color="#CCCCCC"> is that we allocate</font>

222
00:09:06,890 --> 00:09:11,180
<font color="#CCCCCC">the memory and stored in X</font><font color="#E5E5E5"> and then if</font>

223
00:09:09,230 --> 00:09:13,310
the secret is greater than<font color="#CCCCCC"> zero we make</font>

224
00:09:11,180 --> 00:09:15,589
<font color="#E5E5E5">this garbage so now we have some memory</font>

225
00:09:13,310 --> 00:09:19,640
<font color="#E5E5E5">that depending on our secret has</font><font color="#CCCCCC"> been</font>

226
00:09:15,589 --> 00:09:22,160
made garbage and now we allocate<font color="#CCCCCC"> the</font>

227
00:09:19,640 --> 00:09:24,709
memory is<font color="#CCCCCC"> sorted Y which causes that to</font>

228
00:09:22,160 --> 00:09:29,540
go above<font color="#E5E5E5"> the GC threshold and then we do</font>

229
00:09:24,709 --> 00:09:31,040
analog<font color="#CCCCCC"> enim GC and now because no memory</font>

230
00:09:29,540 --> 00:09:34,490
is reachable<font color="#E5E5E5"> this GTO is going to be</font>

231
00:09:31,040 --> 00:09:36,709
much faster<font color="#E5E5E5"> in a copy collector so this</font>

232
00:09:34,490 --> 00:09:38,540
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> be a short time being output</font>

233
00:09:36,709 --> 00:09:41,149
<font color="#E5E5E5">here so as opposed to the other case</font>

234
00:09:38,540 --> 00:09:42,829
where we we<font color="#CCCCCC"> don't take the branch we</font>

235
00:09:41,149 --> 00:09:45,649
<font color="#CCCCCC">have that we allocate the memory stored</font>

236
00:09:42,829 --> 00:09:48,859
in<font color="#E5E5E5"> X and we don't do anything but we hit</font>

237
00:09:45,649 --> 00:09:51,410
the GC threshold again<font color="#E5E5E5"> here</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> causes</font>

238
00:09:48,860 --> 00:09:53,269
<font color="#E5E5E5">us to do a GC again but this</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> we</font>

239
00:09:51,410 --> 00:09:54,800
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> copy the memory that we store in</font>

240
00:09:53,269 --> 00:09:56,899
X<font color="#E5E5E5"> because this F memory is actually</font>

241
00:09:54,800 --> 00:09:58,640
reachable now this GC here is<font color="#E5E5E5"> going to</font>

242
00:09:56,899 --> 00:10:02,720
be larger<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> basically the the</font>

243
00:09:58,640 --> 00:10:05,449
example we saw in Java<font color="#CCCCCC"> before so it's</font>

244
00:10:02,720 --> 00:10:07,250
actually not<font color="#CCCCCC"> secured to GC public values</font>

245
00:10:05,450 --> 00:10:09,350
in the secret context or secret values

246
00:10:07,250 --> 00:10:11,899
in a public context<font color="#E5E5E5"> so this is kind of a</font>

247
00:10:09,350 --> 00:10:13,310
bi-directional<font color="#E5E5E5"> channel so it doesn't</font>

248
00:10:11,899 --> 00:10:16,520
mind let's let's try and study<font color="#E5E5E5"> this</font>

249
00:10:13,310 --> 00:10:19,219
<font color="#E5E5E5">problem here more formally so the idea</font>

250
00:10:16,520 --> 00:10:22,459
is to<font color="#CCCCCC"> combine</font><font color="#E5E5E5"> a runtime mechanism with</font>

251
00:10:19,220 --> 00:10:24,770
some static checks to ensure a<font color="#E5E5E5"> non</font>

252
00:10:22,459 --> 00:10:26,899
<font color="#CCCCCC">experienced result</font><font color="#E5E5E5"> and to do this we've</font>

253
00:10:24,770 --> 00:10:28,550
defined a standard<font color="#E5E5E5"> wild language with</font>

254
00:10:26,899 --> 00:10:31,250
heap allocation of a race<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> we</font>

255
00:10:28,550 --> 00:10:33,560
have something<font color="#CCCCCC"> to GC</font><font color="#E5E5E5"> and then a command</font>

256
00:10:31,250 --> 00:10:35,890
for getting<font color="#E5E5E5"> the system clock explicitly</font>

257
00:10:33,560 --> 00:10:38,869
or the giving of time explicitly and

258
00:10:35,890 --> 00:10:41,420
this this time command here can model

259
00:10:38,870 --> 00:10:43,430
any kind of strong<font color="#E5E5E5"> adversary' like one</font>

260
00:10:41,420 --> 00:10:46,520
that<font color="#E5E5E5"> can measure the time by calling the</font>

261
00:10:43,430 --> 00:10:48,380
OS or it can it can send a remote pings

262
00:10:46,520 --> 00:10:52,220
or server which would then detect when

263
00:10:48,380 --> 00:10:54,709
these<font color="#E5E5E5"> things here arrive so this</font><font color="#CCCCCC"> this</font>

264
00:10:52,220 --> 00:10:56,779
<font color="#E5E5E5">language here that models a</font><font color="#CCCCCC"> as read</font>

265
00:10:54,709 --> 00:10:58,399
study of GC timing leaks while<font color="#E5E5E5"> we</font>

266
00:10:56,779 --> 00:11:00,589
enforce control so leakage by a

267
00:10:58,399 --> 00:11:04,190
predictive mitigation where we pet the

268
00:11:00,589 --> 00:11:05,420
<font color="#E5E5E5">computation time for high branches also</font>

269
00:11:04,190 --> 00:11:06,680
<font color="#E5E5E5">we assume that there are no leaks by a</font>

270
00:11:05,420 --> 00:11:08,510
cache<font color="#E5E5E5"> because this is a completely</font>

271
00:11:06,680 --> 00:11:11,779
separate issue<font color="#CCCCCC"> which has a lot of</font>

272
00:11:08,510 --> 00:11:13,520
literature behind it so let's try now

273
00:11:11,779 --> 00:11:15,709
investigate what the<font color="#E5E5E5"> runtime mechanism</font>

274
00:11:13,520 --> 00:11:17,680
should<font color="#E5E5E5"> be for this kind of system here</font>

275
00:11:15,709 --> 00:11:21,160
<font color="#E5E5E5">in order to enforce</font>

276
00:11:17,680 --> 00:11:23,079
<font color="#CCCCCC">non-students the idea is that we want to</font>

277
00:11:21,160 --> 00:11:26,319
<font color="#CCCCCC">label each allocation with when it's</font>

278
00:11:23,079 --> 00:11:29,050
<font color="#E5E5E5">secured to GC these this allocation so</font>

279
00:11:26,319 --> 00:11:31,540
here we have the image<font color="#E5E5E5"> from before</font><font color="#CCCCCC"> now</font>

280
00:11:29,050 --> 00:11:34,240
we add the labels<font color="#E5E5E5"> to when it's safe to</font><font color="#CCCCCC"> G</font>

281
00:11:31,540 --> 00:11:35,709
<font color="#E5E5E5">CDs and you</font><font color="#CCCCCC"> can kind of see these</font><font color="#E5E5E5"> labels</font>

282
00:11:34,240 --> 00:11:39,009
they they form a partitioning of<font color="#E5E5E5"> the</font>

283
00:11:35,709 --> 00:11:41,018
<font color="#E5E5E5">heap where we have a low partition which</font>

284
00:11:39,009 --> 00:11:42,459
can be<font color="#E5E5E5"> collected when piece is low and</font>

285
00:11:41,019 --> 00:11:46,329
we have a high position<font color="#E5E5E5"> which can</font><font color="#CCCCCC"> be</font>

286
00:11:42,459 --> 00:11:48,399
partitioned when<font color="#CCCCCC"> PC is high also note</font>

287
00:11:46,329 --> 00:11:51,008
that we allow reference from low to high

288
00:11:48,399 --> 00:11:53,079
<font color="#CCCCCC">because whatever's going on</font><font color="#E5E5E5"> in the low</font>

289
00:11:51,009 --> 00:11:53,619
partition is public information<font color="#CCCCCC"> where's</font>

290
00:11:53,079 --> 00:11:56,199
the<font color="#E5E5E5"> one</font>

291
00:11:53,619 --> 00:11:57,879
where's information in the highest part

292
00:11:56,199 --> 00:12:00,219
of<font color="#E5E5E5"> the heat has gotten there based on</font>

293
00:11:57,879 --> 00:12:02,410
<font color="#E5E5E5">secret information so we won't allow</font>

294
00:12:00,220 --> 00:12:04,360
such<font color="#CCCCCC"> pointers</font>

295
00:12:02,410 --> 00:12:06,969
so we want to disallow these pointers

296
00:12:04,360 --> 00:12:11,709
from high to low<font color="#E5E5E5"> which we do via a type</font>

297
00:12:06,970 --> 00:12:14,679
system<font color="#E5E5E5"> so an important constraint when</font>

298
00:12:11,709 --> 00:12:16,618
put<font color="#E5E5E5"> on the on this heat on this GC</font>

299
00:12:14,679 --> 00:12:19,889
mechanism here<font color="#E5E5E5"> is that we assume that</font>

300
00:12:16,619 --> 00:12:22,990
isomorphic<font color="#CCCCCC"> keeps the GC at the same time</font>

301
00:12:19,889 --> 00:12:24,399
<font color="#E5E5E5">so it's kind of like with the specific</font>

302
00:12:22,990 --> 00:12:25,899
values of<font color="#CCCCCC"> a pointer it doesn't matter</font>

303
00:12:24,399 --> 00:12:28,149
but we what we care about<font color="#E5E5E5"> is the object</font>

304
00:12:25,899 --> 00:12:32,230
<font color="#CCCCCC">graph of the of the heap which kind</font><font color="#E5E5E5"> of</font>

305
00:12:28,149 --> 00:12:33,879
determines the GC time so now we

306
00:12:32,230 --> 00:12:35,319
investigated what the runtime mechanism

307
00:12:33,879 --> 00:12:39,639
<font color="#CCCCCC">should be the question is now what</font>

308
00:12:35,319 --> 00:12:41,439
<font color="#E5E5E5">should the static mechanism be so the</font>

309
00:12:39,639 --> 00:12:43,420
type system we we came up<font color="#E5E5E5"> with is a</font>

310
00:12:41,439 --> 00:12:46,899
standard<font color="#CCCCCC"> denim style enforcement for</font>

311
00:12:43,420 --> 00:12:52,959
confidentiality<font color="#E5E5E5"> but with a few twists</font><font color="#CCCCCC"> in</font>

312
00:12:46,899 --> 00:12:55,329
particular we we guarantee<font color="#E5E5E5"> it's some</font>

313
00:12:52,959 --> 00:12:57,279
kind<font color="#E5E5E5"> of integrity result where a low</font>

314
00:12:55,329 --> 00:13:01,239
integrity value is a<font color="#CCCCCC"> value that</font><font color="#E5E5E5"> has</font><font color="#CCCCCC"> been</font>

315
00:12:57,279 --> 00:13:02,379
affected by time and also<font color="#CCCCCC"> we prevent</font>

316
00:13:01,240 --> 00:13:04,019
these pointers<font color="#E5E5E5"> from high to low</font>

317
00:13:02,379 --> 00:13:06,819
statically as I talked<font color="#CCCCCC"> about before</font><font color="#E5E5E5"> so</font>

318
00:13:04,019 --> 00:13:09,370
<font color="#CCCCCC">let me just take</font><font color="#E5E5E5"> out a few sample from</font>

319
00:13:06,819 --> 00:13:10,870
the type<font color="#E5E5E5"> systems and discuss these so we</font>

320
00:13:09,370 --> 00:13:14,170
have a<font color="#E5E5E5"> two point lattice for the</font>

321
00:13:10,870 --> 00:13:16,480
integrity port where the<font color="#CCCCCC"> bullet means</font>

322
00:13:14,170 --> 00:13:18,670
that a value has been<font color="#CCCCCC"> tainted</font><font color="#E5E5E5"> by time</font>

323
00:13:16,480 --> 00:13:21,610
and<font color="#E5E5E5"> the circle means that a value</font><font color="#CCCCCC"> is</font>

324
00:13:18,670 --> 00:13:24,219
untainted by time so for instance in the

325
00:13:21,610 --> 00:13:27,069
rule for for the<font color="#E5E5E5"> time command we require</font>

326
00:13:24,220 --> 00:13:29,639
<font color="#E5E5E5">that the variable X receiving the</font>

327
00:13:27,069 --> 00:13:32,910
current time must be<font color="#CCCCCC"> a value with this</font>

328
00:13:29,639 --> 00:13:32,910
bullet<font color="#E5E5E5"> here</font>

329
00:13:33,330 --> 00:13:38,130
so for the control<font color="#CCCCCC"> flow part here we</font>

330
00:13:36,020 --> 00:13:39,780
<font color="#E5E5E5">reinforce that the control flow is</font>

331
00:13:38,130 --> 00:13:42,660
independent of time<font color="#E5E5E5"> meaning</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> every</font>

332
00:13:39,780 --> 00:13:44,670
time we branch on some kind of<font color="#CCCCCC"> value we</font>

333
00:13:42,660 --> 00:13:46,410
<font color="#E5E5E5">need to ensure that this value cannot</font><font color="#CCCCCC"> be</font>

334
00:13:44,670 --> 00:13:48,000
affected by time and<font color="#E5E5E5"> we do this by</font>

335
00:13:46,410 --> 00:13:49,770
<font color="#CCCCCC">requiring that</font><font color="#E5E5E5"> that the expression</font>

336
00:13:48,000 --> 00:13:53,460
<font color="#E5E5E5">either is independent of time by</font><font color="#CCCCCC"> saying</font>

337
00:13:49,770 --> 00:13:56,310
that it has this this this<font color="#CCCCCC"> white circle</font>

338
00:13:53,460 --> 00:13:57,420
<font color="#E5E5E5">type so if you're familiar with these</font>

339
00:13:56,310 --> 00:13:58,800
<font color="#CCCCCC">kind of type systems you'll see</font>

340
00:13:57,420 --> 00:14:01,229
something<font color="#E5E5E5"> different here from the</font>

341
00:13:58,800 --> 00:14:04,829
literature<font color="#E5E5E5"> in that</font><font color="#CCCCCC"> we we</font><font color="#E5E5E5"> don't raise the</font>

342
00:14:01,230 --> 00:14:06,240
<font color="#CCCCCC">TC in</font><font color="#E5E5E5"> the branches of an a statement and</font>

343
00:14:04,830 --> 00:14:08,460
this<font color="#E5E5E5"> is because we want</font><font color="#CCCCCC"> to enforce a</font>

344
00:14:06,240 --> 00:14:10,560
predictive mitigation<font color="#CCCCCC"> where we</font><font color="#E5E5E5"> pet the</font>

345
00:14:08,460 --> 00:14:12,300
computation in high branches so instead

346
00:14:10,560 --> 00:14:14,880
of raising<font color="#CCCCCC"> it implicitly in the if</font>

347
00:14:12,300 --> 00:14:17,280
<font color="#CCCCCC">statement</font><font color="#E5E5E5"> we raise it explicitly in a</font>

348
00:14:14,880 --> 00:14:18,750
<font color="#E5E5E5">command called the ëthe command so what</font>

349
00:14:17,280 --> 00:14:21,990
the<font color="#E5E5E5"> add command will do is that it</font><font color="#CCCCCC"> will</font>

350
00:14:18,750 --> 00:14:23,670
raise the<font color="#CCCCCC"> PC to some label L and then at</font>

351
00:14:21,990 --> 00:14:27,420
<font color="#E5E5E5">runtime it will ensure that the branch</font>

352
00:14:23,670 --> 00:14:31,199
<font color="#E5E5E5">take</font><font color="#CCCCCC"> exactly</font><font color="#E5E5E5"> the value specified by the</font>

353
00:14:27,420 --> 00:14:32,910
expression<font color="#E5E5E5"> e so the main result of the</font>

354
00:14:31,200 --> 00:14:35,040
of the paper is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> theorem saying that</font>

355
00:14:32,910 --> 00:14:37,890
<font color="#E5E5E5">a website program when executed under</font>

356
00:14:35,040 --> 00:14:40,770
<font color="#CCCCCC">our secure GC satisfies termination and</font>

357
00:14:37,890 --> 00:14:43,170
sensitives<font color="#CCCCCC"> non-experienced</font><font color="#E5E5E5"> and to show</font>

358
00:14:40,770 --> 00:14:44,430
you how how we prove this let<font color="#E5E5E5"> me just</font>

359
00:14:43,170 --> 00:14:47,939
talk briefly about the proof technique

360
00:14:44,430 --> 00:14:49,650
because it's it's interesting<font color="#E5E5E5"> so if we</font>

361
00:14:47,940 --> 00:14:53,370
have two configurations<font color="#CCCCCC"> a configuration</font>

362
00:14:49,650 --> 00:14:56,850
<font color="#E5E5E5">being a five tuple of a command a PC and</font>

363
00:14:53,370 --> 00:14:58,410
memory a heap and the time which agree

364
00:14:56,850 --> 00:15:00,630
on the low parts of this<font color="#CCCCCC"> configuration</font>

365
00:14:58,410 --> 00:15:01,920
here which is a detail I'm not going to

366
00:15:00,630 --> 00:15:05,189
talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> here but you can</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> that in</font>

367
00:15:01,920 --> 00:15:08,849
<font color="#E5E5E5">the paper if they agree</font><font color="#CCCCCC"> on this</font><font color="#E5E5E5"> and they</font>

368
00:15:05,190 --> 00:15:10,530
both terminate then there are no

369
00:15:08,850 --> 00:15:12,360
apparent relation between these two

370
00:15:10,530 --> 00:15:15,689
terminating configurations<font color="#E5E5E5"> but by</font>

371
00:15:12,360 --> 00:15:18,780
<font color="#E5E5E5">looking at these these</font><font color="#CCCCCC"> two runs</font><font color="#E5E5E5"> we can</font>

372
00:15:15,690 --> 00:15:20,100
<font color="#E5E5E5">construct a</font><font color="#CCCCCC"> new</font><font color="#E5E5E5"> run which terminates in</font>

373
00:15:18,780 --> 00:15:22,319
the exact same time as the one on<font color="#CCCCCC"> the</font>

374
00:15:20,100 --> 00:15:25,290
left<font color="#E5E5E5"> and results in low equivalent</font>

375
00:15:22,320 --> 00:15:26,430
configurations so what we're seeing<font color="#E5E5E5"> here</font>

376
00:15:25,290 --> 00:15:28,829
<font color="#CCCCCC">is that</font><font color="#E5E5E5"> we're really reasoning about</font>

377
00:15:26,430 --> 00:15:31,290
three<font color="#CCCCCC"> configurations</font><font color="#E5E5E5"> so the question is</font>

378
00:15:28,830 --> 00:15:32,910
what<font color="#CCCCCC"> should the relation between</font><font color="#E5E5E5"> the</font>

379
00:15:31,290 --> 00:15:34,530
middle configuration that<font color="#CCCCCC"> we're</font>

380
00:15:32,910 --> 00:15:37,439
constructing<font color="#E5E5E5"> and the right configuration</font>

381
00:15:34,530 --> 00:15:40,470
<font color="#E5E5E5">which is one we</font><font color="#CCCCCC"> we we're</font><font color="#E5E5E5"> given in the</font>

382
00:15:37,440 --> 00:15:42,570
beginning<font color="#E5E5E5"> the left one is pretty simple</font>

383
00:15:40,470 --> 00:15:44,230
<font color="#CCCCCC">the relations</font><font color="#E5E5E5"> between each is</font><font color="#CCCCCC"> the low</font>

384
00:15:42,570 --> 00:15:46,860
equivalence relation which

385
00:15:44,230 --> 00:15:48,940
I<font color="#E5E5E5"> talked about in the beginning but the</font>

386
00:15:46,860 --> 00:15:50,560
for the right one we need<font color="#CCCCCC"> to come up</font>

387
00:15:48,940 --> 00:15:51,850
<font color="#CCCCCC">with something else and for that we need</font>

388
00:15:50,560 --> 00:15:55,150
<font color="#CCCCCC">to go back</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> look at the type system</font>

389
00:15:51,850 --> 00:15:57,040
<font color="#E5E5E5">because what they need to be agree on is</font>

390
00:15:55,150 --> 00:15:58,689
<font color="#CCCCCC">there is a control</font><font color="#E5E5E5"> flow really and this</font>

391
00:15:57,040 --> 00:16:02,670
is<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that is only dependent on</font>

392
00:15:58,690 --> 00:16:05,680
the<font color="#E5E5E5"> untainted parts of the of the memory</font>

393
00:16:02,670 --> 00:16:10,270
so we have this<font color="#E5E5E5"> interesting concept</font>

394
00:16:05,680 --> 00:16:13,540
where the<font color="#E5E5E5"> leftmost</font><font color="#CCCCCC"> de-rate</font><font color="#E5E5E5"> run and the</font>

395
00:16:10,270 --> 00:16:16,000
middle run agree on the low parts of the

396
00:16:13,540 --> 00:16:18,010
<font color="#E5E5E5">configuration which is both but also the</font>

397
00:16:16,000 --> 00:16:21,820
tainted and untainted parts but the

398
00:16:18,010 --> 00:16:23,319
right part<font color="#E5E5E5"> of the relation between the</font>

399
00:16:21,820 --> 00:16:25,570
right one and<font color="#E5E5E5"> the middle one is that</font>

400
00:16:23,320 --> 00:16:28,420
they agree on the both the low and high

401
00:16:25,570 --> 00:16:31,990
<font color="#CCCCCC">parts</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> combined</font><font color="#E5E5E5"> geology but only</font>

402
00:16:28,420 --> 00:16:33,490
about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> unfeigned values so with this</font>

403
00:16:31,990 --> 00:16:35,530
we can<font color="#E5E5E5"> actually prove the theorem here</font>

404
00:16:33,490 --> 00:16:39,070
<font color="#E5E5E5">so in conclusion we presented the first</font>

405
00:16:35,530 --> 00:16:41,260
automatic<font color="#E5E5E5"> memory management</font><font color="#CCCCCC"> amplifier by</font>

406
00:16:39,070 --> 00:16:42,940
<font color="#CCCCCC">directional</font><font color="#E5E5E5"> timing channel which</font><font color="#CCCCCC"> is</font>

407
00:16:41,260 --> 00:16:45,160
significant<font color="#CCCCCC"> enough to be detectable over</font>

408
00:16:42,940 --> 00:16:46,270
a<font color="#E5E5E5"> network connection we've shown that</font>

409
00:16:45,160 --> 00:16:48,130
<font color="#E5E5E5">this challenge can</font><font color="#CCCCCC"> be closed with</font>

410
00:16:46,270 --> 00:16:49,900
standard information<font color="#E5E5E5"> flow techniques</font>

411
00:16:48,130 --> 00:16:52,420
which<font color="#CCCCCC"> is the type system</font><font color="#E5E5E5"> and they</font>

412
00:16:49,900 --> 00:16:54,069
segregated<font color="#CCCCCC"> heap and finally we proved</font>

413
00:16:52,420 --> 00:16:56,050
all of the meta theory in the<font color="#CCCCCC"> Cocteau</font>

414
00:16:54,070 --> 00:17:12,310
<font color="#CCCCCC">resistant</font><font color="#E5E5E5"> at about</font><font color="#CCCCCC"> thirty five thousand</font>

415
00:16:56,050 --> 00:17:15,339
lines of<font color="#CCCCCC"> code</font><font color="#E5E5E5"> thank you thank</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> for</font>

416
00:17:12,310 --> 00:17:20,369
using term non-interference<font color="#E5E5E5"> that was</font>

417
00:17:15,339 --> 00:17:25,359
nice<font color="#CCCCCC"> so I'm not</font><font color="#E5E5E5"> an expert on this</font><font color="#CCCCCC"> but I</font>

418
00:17:20,369 --> 00:17:29,500
used garbage collecting languages for

419
00:17:25,359 --> 00:17:33,129
well over<font color="#E5E5E5"> 40</font><font color="#CCCCCC"> years and there</font><font color="#E5E5E5"> are a</font><font color="#CCCCCC"> lot</font>

420
00:17:29,500 --> 00:17:34,870
of garbage<font color="#E5E5E5"> collection algorithms</font><font color="#CCCCCC"> and I</font>

421
00:17:33,130 --> 00:17:36,640
understand that<font color="#E5E5E5"> you know you have a nice</font>

422
00:17:34,870 --> 00:17:40,659
type system for dealing<font color="#CCCCCC"> with this</font><font color="#E5E5E5"> kind</font>

423
00:17:36,640 --> 00:17:42,400
<font color="#CCCCCC">of modal logic which is great but does</font>

424
00:17:40,660 --> 00:17:47,560
this apply<font color="#E5E5E5"> to all memory management</font>

425
00:17:42,400 --> 00:17:50,590
systems I'm sorry if<font color="#E5E5E5"> it support what</font><font color="#CCCCCC"> all</font>

426
00:17:47,560 --> 00:17:54,370
memory management systems I'm sorry

427
00:17:50,590 --> 00:17:57,280
does your channel exists when alternate

428
00:17:54,370 --> 00:17:57,549
garbage collection schemes are used<font color="#CCCCCC"> all</font>

429
00:17:57,280 --> 00:18:01,119
right

430
00:17:57,549 --> 00:18:04,090
<font color="#E5E5E5">okay so we've we've demonstrated the</font>

431
00:18:01,119 --> 00:18:05,559
attack in the<font color="#CCCCCC"> Java copy style</font><font color="#E5E5E5"> collector</font>

432
00:18:04,090 --> 00:18:08,499
and we've also shown<font color="#E5E5E5"> that the same</font>

433
00:18:05,559 --> 00:18:12,279
attack<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be applied in the</font><font color="#E5E5E5"> 'edit which</font>

434
00:18:08,499 --> 00:18:14,409
runs a another<font color="#E5E5E5"> Java section algorithm so</font>

435
00:18:12,279 --> 00:18:15,730
I don't know if it's<font color="#CCCCCC"> possible</font><font color="#E5E5E5"> in all</font>

436
00:18:14,409 --> 00:18:17,440
garbage collection algorithms but<font color="#E5E5E5"> I</font>

437
00:18:15,730 --> 00:18:19,019
suspected it does we've only tested it

438
00:18:17,440 --> 00:18:21,369
for<font color="#E5E5E5"> these</font><font color="#CCCCCC"> two very different collectors</font>

439
00:18:19,019 --> 00:18:29,759
<font color="#E5E5E5">but I expect to be</font><font color="#CCCCCC"> able to do the same</font>

440
00:18:21,369 --> 00:18:35,399
attack on any<font color="#E5E5E5"> other collector yes</font><font color="#CCCCCC"> hey</font>

441
00:18:29,759 --> 00:18:38,409
<font color="#CCCCCC">dan</font><font color="#E5E5E5"> stefan ECC</font><font color="#CCCCCC"> so what I'm curious</font>

442
00:18:35,399 --> 00:18:40,959
<font color="#E5E5E5">you don't allow for pointers from high</font>

443
00:18:38,409 --> 00:18:43,419
to low<font color="#E5E5E5"> right and that seems really</font>

444
00:18:40,960 --> 00:18:45,090
restricting because a lot of programs<font color="#CCCCCC"> at</font>

445
00:18:43,419 --> 00:18:47,590
<font color="#E5E5E5">least that I've written would have that</font>

446
00:18:45,090 --> 00:18:48,939
relationship<font color="#CCCCCC"> and I guess</font><font color="#E5E5E5"> like there are</font>

447
00:18:47,590 --> 00:18:50,678
<font color="#E5E5E5">other ways of potentially solving this</font>

448
00:18:48,940 --> 00:18:52,450
problem without that requirement<font color="#E5E5E5"> have</font>

449
00:18:50,679 --> 00:18:57,879
you thought about how to try to<font color="#CCCCCC"> tackle</font>

450
00:18:52,450 --> 00:19:02,289
that so I<font color="#E5E5E5"> don't have any answer right</font>

451
00:18:57,879 --> 00:19:07,209
<font color="#CCCCCC">away no</font><font color="#E5E5E5"> restricting pointers</font><font color="#CCCCCC"> from from</font>

452
00:19:02,289 --> 00:19:09,460
from<font color="#E5E5E5"> low to low to high is I don't know</font>

453
00:19:07,210 --> 00:19:12,399
how<font color="#CCCCCC"> restrictive</font><font color="#E5E5E5"> that is I mean it's a</font>

454
00:19:09,460 --> 00:19:14,350
pretty<font color="#E5E5E5"> standard thing to do in</font>

455
00:19:12,399 --> 00:19:17,518
information flow type systems to

456
00:19:14,350 --> 00:19:19,719
restrict to<font color="#CCCCCC"> ensure that</font><font color="#E5E5E5"> there are no</font>

457
00:19:17,519 --> 00:19:21,730
flows from high to low so<font color="#E5E5E5"> this is</font>

458
00:19:19,720 --> 00:19:24,369
basically the same thing<font color="#CCCCCC"> but in a</font><font color="#E5E5E5"> heap</font>

459
00:19:21,730 --> 00:19:26,679
setting so I<font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> know how</font>

460
00:19:24,369 --> 00:19:29,649
restrictive it is but I suspect<font color="#CCCCCC"> that you</font>

461
00:19:26,679 --> 00:19:34,210
can that<font color="#E5E5E5"> you can add as you actually</font>

462
00:19:29,649 --> 00:19:35,979
type a lot<font color="#E5E5E5"> of things this way like I was</font>

463
00:19:34,210 --> 00:19:39,940
mad<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> crash answer it or we could</font>

464
00:19:35,980 --> 00:19:42,399
<font color="#E5E5E5">talk offline</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> here are</font><font color="#CCCCCC"> some of the</font>

465
00:19:39,940 --> 00:19:47,769
<font color="#E5E5E5">university</font><font color="#CCCCCC"> Bochum</font><font color="#E5E5E5"> messed up thank you</font>

466
00:19:42,399 --> 00:19:50,529
- how<font color="#E5E5E5"> about using this side channel</font>

467
00:19:47,769 --> 00:19:54,389
against<font color="#E5E5E5"> reward libraries if you analyze</font>

468
00:19:50,529 --> 00:19:58,749
like cryptographic libraries or TLS

469
00:19:54,389 --> 00:20:02,469
libraries to use this attack to use the

470
00:19:58,749 --> 00:20:07,029
side channel<font color="#CCCCCC"> - secular ethics we haven't</font>

471
00:20:02,470 --> 00:20:08,259
investigated any any<font color="#CCCCCC"> actual library code</font>

472
00:20:07,029 --> 00:20:11,320
<font color="#E5E5E5">because so the setting we're in right</font>

473
00:20:08,259 --> 00:20:14,650
now here is that<font color="#CCCCCC"> we we</font><font color="#E5E5E5"> want to</font><font color="#CCCCCC"> execute</font>

474
00:20:11,320 --> 00:20:18,010
<font color="#E5E5E5">interesting code but we have no results</font>

475
00:20:14,650 --> 00:20:19,750
about how how how these<font color="#E5E5E5"> patterns</font>

476
00:20:18,010 --> 00:20:21,490
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> they they appear in in actual</font>

477
00:20:19,750 --> 00:20:22,810
code or the if it's just something<font color="#CCCCCC"> you</font>

478
00:20:21,490 --> 00:20:25,090
can do as an attacker when you want<font color="#E5E5E5"> to</font>

479
00:20:22,810 --> 00:20:28,450
execute untrusted code on someone else's

480
00:20:25,090 --> 00:20:29,350
machine<font color="#E5E5E5"> but it's an</font><font color="#CCCCCC"> interesting thing to</font>

481
00:20:28,450 --> 00:20:31,090
<font color="#CCCCCC">look at it</font>

482
00:20:29,350 --> 00:20:33,189
are these<font color="#E5E5E5"> patterns</font><font color="#CCCCCC"> actually used in in</font>

483
00:20:31,090 --> 00:20:34,810
actual code so you can exploit them<font color="#E5E5E5"> yes</font>

484
00:20:33,190 --> 00:20:38,370
<font color="#E5E5E5">we haven't look at it</font>

485
00:20:34,810 --> 00:20:41,060
okay let's<font color="#E5E5E5"> thank the</font><font color="#CCCCCC"> tears</font><font color="#E5E5E5"> again</font>

486
00:20:38,370 --> 00:20:41,060
[Applause]

