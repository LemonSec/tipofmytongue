1
00:00:08,660 --> 00:00:13,250
my name is Donna<font color="#E5E5E5"> she coming from the</font>

2
00:00:10,639 --> 00:00:15,889
Penn<font color="#CCCCCC"> State</font><font color="#E5E5E5"> University today I'm very</font>

3
00:00:13,250 --> 00:00:18,109
glad to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> here to present</font><font color="#E5E5E5"> our original</font>

4
00:00:15,889 --> 00:00:21,948
work about<font color="#E5E5E5"> critical function detection</font>

5
00:00:18,109 --> 00:00:23,960
<font color="#CCCCCC">pouring</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> frustrated binaries this this</font>

6
00:00:21,949 --> 00:00:26,960
technique can be<font color="#CCCCCC"> used for</font><font color="#E5E5E5"> Marilyn</font>

7
00:00:23,960 --> 00:00:29,689
<font color="#CCCCCC">Alice's and</font><font color="#E5E5E5"> Meredith malware detection</font>

8
00:00:26,960 --> 00:00:32,509
<font color="#E5E5E5">so the technique is called</font><font color="#CCCCCC"> a bit precise</font>

9
00:00:29,689 --> 00:00:36,430
symbolic loop mapping this is a joint

10
00:00:32,509 --> 00:00:41,030
<font color="#CCCCCC">work of Penn State</font><font color="#E5E5E5"> and UT Arlington</font>

11
00:00:36,430 --> 00:00:43,010
so our first our first<font color="#E5E5E5"> to start from a</font>

12
00:00:41,030 --> 00:00:45,830
brief introduction<font color="#CCCCCC"> of the background</font>

13
00:00:43,010 --> 00:00:47,750
knowledge about<font color="#E5E5E5"> the crypto function so</font>

14
00:00:45,830 --> 00:00:49,940
in this<font color="#CCCCCC"> talk the curve the function</font>

15
00:00:47,750 --> 00:00:53,019
means the encryption and decryption

16
00:00:49,940 --> 00:00:55,550
procedure<font color="#CCCCCC"> so as we all</font><font color="#E5E5E5"> know there are</font>

17
00:00:53,020 --> 00:00:58,700
lots of different applications<font color="#E5E5E5"> of</font>

18
00:00:55,550 --> 00:01:02,569
critical functions first from the bright

19
00:00:58,700 --> 00:01:04,970
side<font color="#CCCCCC"> crypto functions can be used for</font>

20
00:01:02,570 --> 00:01:07,880
<font color="#E5E5E5">sending and receiving messages via</font>

21
00:01:04,970 --> 00:01:09,950
untrusted channels and also<font color="#CCCCCC"> they</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> be</font>

22
00:01:07,880 --> 00:01:13,009
used<font color="#E5E5E5"> to for</font><font color="#CCCCCC"> saying and verifying some</font>

23
00:01:09,950 --> 00:01:15,080
<font color="#E5E5E5">digital distinct</font><font color="#CCCCCC"> natures and on the on</font>

24
00:01:13,010 --> 00:01:17,990
the<font color="#CCCCCC"> other hand in time side mirror</font>

25
00:01:15,080 --> 00:01:20,770
<font color="#E5E5E5">authors can use crypto functions to hide</font>

26
00:01:17,990 --> 00:01:26,320
mail signatures and also use them<font color="#CCCCCC"> to</font>

27
00:01:20,770 --> 00:01:30,020
create<font color="#CCCCCC"> our peckers and walk around</font>

28
00:01:26,320 --> 00:01:33,770
firewalls<font color="#CCCCCC"> allow some encrypted</font><font color="#E5E5E5"> channels</font>

29
00:01:30,020 --> 00:01:38,149
which are invented<font color="#E5E5E5"> by the mailer</font>

30
00:01:33,770 --> 00:01:40,820
developers and<font color="#E5E5E5"> asked if the functions</font>

31
00:01:38,150 --> 00:01:46,400
can also be used by<font color="#CCCCCC"> mirror</font><font color="#E5E5E5"> developers to</font>

32
00:01:40,820 --> 00:01:48,408
create ransomware<font color="#E5E5E5"> so if you do a search</font>

33
00:01:46,400 --> 00:01:50,180
online for<font color="#E5E5E5"> the crypto functions in mail</font>

34
00:01:48,409 --> 00:01:52,520
<font color="#CCCCCC">where there are a lot of these kind</font><font color="#E5E5E5"> of</font>

35
00:01:50,180 --> 00:01:55,090
mused<font color="#E5E5E5"> reminding people that this is</font><font color="#CCCCCC"> a</font>

36
00:01:52,520 --> 00:01:58,298
more and<font color="#CCCCCC"> more important problem</font><font color="#E5E5E5"> nowadays</font>

37
00:01:55,090 --> 00:02:00,830
especially<font color="#E5E5E5"> recently the very famous</font>

38
00:01:58,299 --> 00:02:05,780
ransomware called wanna<font color="#CCCCCC"> try it</font><font color="#E5E5E5"> can</font>

39
00:02:00,830 --> 00:02:08,658
encrypt<font color="#E5E5E5"> Yodas</font><font color="#CCCCCC"> file and data and inquiry</font>

40
00:02:05,780 --> 00:02:13,129
algorithm and after the users to pay a

41
00:02:08,658 --> 00:02:14,230
ransom otherwise their data and<font color="#CCCCCC"> file</font>

42
00:02:13,129 --> 00:02:17,989
will<font color="#CCCCCC"> be lost</font>

43
00:02:14,230 --> 00:02:21,349
so given that there<font color="#CCCCCC"> are lots of</font><font color="#E5E5E5"> these</font>

44
00:02:17,990 --> 00:02:24,260
kind of crypto functions in malware

45
00:02:21,349 --> 00:02:27,170
so it<font color="#CCCCCC"> provided</font><font color="#E5E5E5"> challenges for malware</font>

46
00:02:24,260 --> 00:02:29,870
analysis and malware detection<font color="#CCCCCC"> so if we</font>

47
00:02:27,170 --> 00:02:32,480
can<font color="#E5E5E5"> identify those curve the functions</font>

48
00:02:29,870 --> 00:02:35,180
it will<font color="#E5E5E5"> be very helpful for</font><font color="#CCCCCC"> mayoral</font>

49
00:02:32,480 --> 00:02:40,280
analysis<font color="#E5E5E5"> so generally speaking there</font><font color="#CCCCCC"> are</font>

50
00:02:35,180 --> 00:02:43,519
several<font color="#E5E5E5"> advantages first crypto function</font>

51
00:02:40,280 --> 00:02:46,790
detection can provide starting point for

52
00:02:43,519 --> 00:02:49,400
reverse engineering<font color="#E5E5E5"> for packed emails</font>

53
00:02:46,790 --> 00:02:53,409
<font color="#E5E5E5">because the true Miller behavior will</font>

54
00:02:49,400 --> 00:02:57,139
happen after the decryption procedure

55
00:02:53,409 --> 00:02:59,090
and the second<font color="#E5E5E5"> why's that</font><font color="#CCCCCC"> early security</font>

56
00:02:57,139 --> 00:03:04,699
analysts they want to pay attention<font color="#CCCCCC"> to</font>

57
00:02:59,090 --> 00:03:08,199
the to the<font color="#E5E5E5"> familiar behavior early not</font>

58
00:03:04,699 --> 00:03:11,139
the unrelated encryption and decryption

59
00:03:08,199 --> 00:03:14,689
functions<font color="#CCCCCC"> so if we can</font><font color="#E5E5E5"> identify those</font>

60
00:03:11,139 --> 00:03:17,780
functions it will<font color="#E5E5E5"> provide</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> start it</font>

61
00:03:14,689 --> 00:03:21,168
will save<font color="#CCCCCC"> time for those</font><font color="#E5E5E5"> new analysis</font>

62
00:03:17,780 --> 00:03:23,480
and third lines that since the

63
00:03:21,169 --> 00:03:26,000
<font color="#CCCCCC">ransomware</font><font color="#E5E5E5"> early use the encryption and</font>

64
00:03:23,480 --> 00:03:28,340
decryption<font color="#CCCCCC"> procedures so if we can</font>

65
00:03:26,000 --> 00:03:32,030
<font color="#CCCCCC">identify critical functions you it will</font>

66
00:03:28,340 --> 00:03:34,189
provide some<font color="#CCCCCC"> help for identify ransom</font>

67
00:03:32,030 --> 00:03:36,829
oils and at last

68
00:03:34,189 --> 00:03:40,310
somewhere where developers can customize

69
00:03:36,829 --> 00:03:42,739
crypto functions<font color="#E5E5E5"> so if we can identify</font>

70
00:03:40,310 --> 00:03:43,849
those customized equip the<font color="#CCCCCC"> function in</font>

71
00:03:42,739 --> 00:03:45,919
other programs

72
00:03:43,849 --> 00:03:51,339
then it is very<font color="#CCCCCC"> likely that those</font>

73
00:03:45,919 --> 00:03:54,470
programs<font color="#E5E5E5"> are</font><font color="#CCCCCC"> mails from the</font><font color="#E5E5E5"> same author</font>

74
00:03:51,340 --> 00:03:56,239
so so far we have answered<font color="#CCCCCC"> the</font><font color="#E5E5E5"> person</font>

75
00:03:54,470 --> 00:03:59,329
<font color="#E5E5E5">that why we need to detect crypto</font>

76
00:03:56,239 --> 00:04:02,120
functions so the next question is<font color="#CCCCCC"> that</font>

77
00:03:59,329 --> 00:04:04,729
how fortunately there are some

78
00:04:02,120 --> 00:04:09,169
attributes<font color="#E5E5E5"> in crypto functions that we</font>

79
00:04:04,729 --> 00:04:12,079
<font color="#CCCCCC">can utilize to to detect them firstly</font>

80
00:04:09,169 --> 00:04:14,509
that<font color="#E5E5E5"> crypt functions</font><font color="#CCCCCC"> usually have lots</font>

81
00:04:12,079 --> 00:04:17,539
of<font color="#CCCCCC"> bit wise operations like end</font><font color="#E5E5E5"> or</font>

82
00:04:14,509 --> 00:04:21,380
negate the second<font color="#E5E5E5"> why's that</font>

83
00:04:17,539 --> 00:04:25,219
early crypto function are<font color="#CCCCCC"> the</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> has a</font>

84
00:04:21,380 --> 00:04:28,550
very<font color="#CCCCCC"> cool transformations which can</font>

85
00:04:25,219 --> 00:04:29,270
represent the semantics of<font color="#E5E5E5"> the crypto</font>

86
00:04:28,550 --> 00:04:31,460
algorithm

87
00:04:29,270 --> 00:04:34,758
surely they are<font color="#E5E5E5"> implemented as the</font>

88
00:04:31,460 --> 00:04:38,239
several<font color="#CCCCCC"> oops structures the third one is</font>

89
00:04:34,759 --> 00:04:41,180
<font color="#E5E5E5">that</font><font color="#CCCCCC"> scribble functions are</font><font color="#E5E5E5"> your lay</font>

90
00:04:38,240 --> 00:04:44,199
standard based there<font color="#E5E5E5"> is a kind of very</font>

91
00:04:41,180 --> 00:04:47,650
detailed<font color="#CCCCCC"> algorithm specification about a</font>

92
00:04:44,199 --> 00:04:50,210
<font color="#E5E5E5">given curricular function and at last</font>

93
00:04:47,650 --> 00:04:53,560
<font color="#CCCCCC">cryptic functions surely they have lots</font>

94
00:04:50,210 --> 00:04:56,900
of<font color="#CCCCCC"> well-known</font><font color="#E5E5E5"> reference implementations</font>

95
00:04:53,560 --> 00:05:04,039
such as some open source libraries

96
00:04:56,900 --> 00:05:06,440
libraries so the existing method have

97
00:05:04,039 --> 00:05:10,370
used this utilizes<font color="#E5E5E5"> the kind of</font>

98
00:05:06,440 --> 00:05:12,770
<font color="#E5E5E5">attributes</font><font color="#CCCCCC"> tools to</font><font color="#E5E5E5"> check through the</font>

99
00:05:10,370 --> 00:05:17,330
functions<font color="#E5E5E5"> generally</font><font color="#CCCCCC"> there are</font><font color="#E5E5E5"> two</font>

100
00:05:12,770 --> 00:05:22,880
<font color="#E5E5E5">categories of methods static methods and</font>

101
00:05:17,330 --> 00:05:25,849
dynamic methods so in static methods<font color="#E5E5E5"> a</font>

102
00:05:22,880 --> 00:05:29,389
<font color="#E5E5E5">lot of this</font><font color="#CCCCCC"> stagg measures are heuristic</font>

103
00:05:25,849 --> 00:05:31,849
based they detect<font color="#CCCCCC"> the crypto functions</font>

104
00:05:29,389 --> 00:05:35,900
by identified some by using some

105
00:05:31,849 --> 00:05:38,300
heuristics like entropy<font color="#E5E5E5"> and some magic</font>

106
00:05:35,900 --> 00:05:40,820
constant values and so on

107
00:05:38,300 --> 00:05:45,889
another group of static method is the

108
00:05:40,820 --> 00:05:48,590
program and as<font color="#CCCCCC"> its</font><font color="#E5E5E5"> based they use some</font>

109
00:05:45,889 --> 00:05:51,560
signatures like data flow graphs to

110
00:05:48,590 --> 00:05:54,289
identify the crypto functions and on the

111
00:05:51,560 --> 00:05:56,599
other hand the dynamic method<font color="#E5E5E5"> most of</font>

112
00:05:54,289 --> 00:06:01,690
these kind of<font color="#CCCCCC"> methods rely on identify</font>

113
00:05:56,599 --> 00:06:05,539
the input and output relations so here

114
00:06:01,690 --> 00:06:08,479
<font color="#E5E5E5">here I show an example here suppose that</font>

115
00:06:05,539 --> 00:06:12,650
F is a function<font color="#E5E5E5"> we want to check whether</font>

116
00:06:08,479 --> 00:06:16,760
<font color="#CCCCCC">F is the implementation of</font><font color="#E5E5E5"> TA which</font>

117
00:06:12,650 --> 00:06:20,570
means tiny encryption algorithm so first

118
00:06:16,760 --> 00:06:24,770
we<font color="#CCCCCC"> can we can</font><font color="#E5E5E5"> fit the same input impulse</font>

119
00:06:20,570 --> 00:06:27,139
<font color="#E5E5E5">F and</font><font color="#CCCCCC"> ta</font><font color="#E5E5E5"> then we check the</font><font color="#CCCCCC"> output</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> the</font>

120
00:06:24,770 --> 00:06:29,448
output are the same then it<font color="#E5E5E5"> is very</font>

121
00:06:27,139 --> 00:06:35,740
<font color="#E5E5E5">likely that F is an implementation of TA</font>

122
00:06:29,449 --> 00:06:37,849
<font color="#E5E5E5">so it's like a testing style method but</font>

123
00:06:35,740 --> 00:06:40,659
unfortunately there are still<font color="#E5E5E5"> some</font>

124
00:06:37,849 --> 00:06:43,830
challenges<font color="#CCCCCC"> to</font><font color="#E5E5E5"> those existing methods</font>

125
00:06:40,659 --> 00:06:45,990
so first the in static methods

126
00:06:43,830 --> 00:06:49,530
for the heuristic based the<font color="#E5E5E5"> standing</font>

127
00:06:45,990 --> 00:06:53,340
methods<font color="#E5E5E5"> because those heuristics the</font>

128
00:06:49,530 --> 00:06:56,309
<font color="#CCCCCC">realized on is thoroughly they cannot</font>

129
00:06:53,340 --> 00:06:59,520
catch the<font color="#E5E5E5"> essential</font><font color="#CCCCCC"> semantics of</font><font color="#E5E5E5"> their</font>

130
00:06:56,310 --> 00:07:02,850
crypto algorithm so they may suffer<font color="#CCCCCC"> from</font>

131
00:06:59,520 --> 00:07:06,810
false positives and false negatives<font color="#CCCCCC"> and</font>

132
00:07:02,850 --> 00:07:10,950
those photos static static methods based

133
00:07:06,810 --> 00:07:15,420
on signatures<font color="#CCCCCC"> those signatures can</font><font color="#E5E5E5"> be</font>

134
00:07:10,950 --> 00:07:20,360
<font color="#E5E5E5">hidden by obfuscation techniques on the</font>

135
00:07:15,420 --> 00:07:23,780
other hand in<font color="#E5E5E5"> Inked dynamic methods</font>

136
00:07:20,360 --> 00:07:27,540
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> they can resist some kind of</font>

137
00:07:23,780 --> 00:07:30,840
control<font color="#CCCCCC"> packages but</font><font color="#E5E5E5"> the problem is that</font>

138
00:07:27,540 --> 00:07:33,150
they rely on<font color="#E5E5E5"> they rely on identify the</font>

139
00:07:30,840 --> 00:07:36,840
input and output relations<font color="#E5E5E5"> but they are</font>

140
00:07:33,150 --> 00:07:39,539
existing<font color="#E5E5E5"> some some existing methods like</font>

141
00:07:36,840 --> 00:07:42,960
data of<font color="#E5E5E5"> occasions and</font><font color="#CCCCCC"> customized come</font>

142
00:07:39,540 --> 00:07:47,130
crypto algorithms which<font color="#CCCCCC"> can change</font><font color="#E5E5E5"> the</font>

143
00:07:42,960 --> 00:07:50,219
input and output the<font color="#E5E5E5"> relation so here I</font>

144
00:07:47,130 --> 00:07:53,400
show an example<font color="#E5E5E5"> of a simple data</font>

145
00:07:50,220 --> 00:07:56,610
obfuscation<font color="#CCCCCC"> so in the</font><font color="#E5E5E5"> normal version of</font>

146
00:07:53,400 --> 00:08:00,479
<font color="#E5E5E5">the program there are</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> 16 bits in it</font>

147
00:07:56,610 --> 00:08:04,620
is verbal<font color="#E5E5E5"> a and B but in the</font><font color="#CCCCCC"> office</font>

148
00:08:00,480 --> 00:08:07,380
<font color="#CCCCCC">carrier</font><font color="#E5E5E5"> version there's only one integer</font>

149
00:08:04,620 --> 00:08:09,960
<font color="#CCCCCC">or 32-bit</font><font color="#E5E5E5"> integer variable X actually it</font>

150
00:08:07,380 --> 00:08:12,480
is a combination of the<font color="#CCCCCC"> a and</font><font color="#E5E5E5"> being the</font>

151
00:08:09,960 --> 00:08:16,320
<font color="#CCCCCC">normal version but if you use dynamic</font>

152
00:08:12,480 --> 00:08:18,360
method<font color="#CCCCCC"> 2 it has this kind</font><font color="#E5E5E5"> of programs</font><font color="#CCCCCC"> we</font>

153
00:08:16,320 --> 00:08:21,330
cannot identify the input output

154
00:08:18,360 --> 00:08:23,790
<font color="#E5E5E5">relations things the input the number of</font>

155
00:08:21,330 --> 00:08:26,280
input<font color="#CCCCCC"> variables are different</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> you</font>

156
00:08:23,790 --> 00:08:31,320
<font color="#CCCCCC">earlier is listed</font><font color="#E5E5E5"> two versions of</font>

157
00:08:26,280 --> 00:08:34,470
programs<font color="#E5E5E5"> are different so this is</font><font color="#CCCCCC"> the</font>

158
00:08:31,320 --> 00:08:36,830
<font color="#CCCCCC">nofa station</font><font color="#E5E5E5"> also in in spouts us that</font>

159
00:08:34,470 --> 00:08:39,930
we really<font color="#CCCCCC"> need a more fine-grained</font>

160
00:08:36,830 --> 00:08:42,960
matter to identify groups<font color="#E5E5E5"> of functions</font>

161
00:08:39,929 --> 00:08:46,670
so here we<font color="#E5E5E5"> propose our method to</font>

162
00:08:42,960 --> 00:08:49,410
<font color="#CCCCCC">overcome the limitations first is</font><font color="#E5E5E5"> that</font>

163
00:08:46,670 --> 00:08:50,219
it<font color="#E5E5E5"> is a new solution</font><font color="#CCCCCC"> to detect the</font>

164
00:08:49,410 --> 00:08:52,589
<font color="#E5E5E5">filter function</font>

165
00:08:50,220 --> 00:08:56,340
the technique is called<font color="#CCCCCC"> bit precise</font>

166
00:08:52,590 --> 00:08:57,940
symbolic<font color="#CCCCCC"> blue mapping and our method can</font>

167
00:08:56,340 --> 00:09:00,700
catch the fine grandma

168
00:08:57,940 --> 00:09:03,880
of criminal transformations<font color="#E5E5E5"> and also it</font>

169
00:09:00,700 --> 00:09:07,780
<font color="#CCCCCC">is a resilient</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> control +</font><font color="#E5E5E5"> km the data</font>

170
00:09:03,880 --> 00:09:11,590
<font color="#CCCCCC">process at beach level so in one</font>

171
00:09:07,780 --> 00:09:15,400
sentence<font color="#E5E5E5"> our technique to increase</font>

172
00:09:11,590 --> 00:09:17,200
please check<font color="#E5E5E5"> checking on</font><font color="#CCCCCC"> Lu bodies</font><font color="#E5E5E5"> in</font>

173
00:09:15,400 --> 00:09:19,959
the reference program and the target

174
00:09:17,200 --> 00:09:23,320
program so here here I'll show a big

175
00:09:19,960 --> 00:09:27,760
<font color="#CCCCCC">picture</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the whole</font><font color="#E5E5E5"> technique first so</font>

176
00:09:23,320 --> 00:09:29,440
we have<font color="#E5E5E5"> to reference programs we all we</font>

177
00:09:27,760 --> 00:09:31,900
have two programs<font color="#E5E5E5"> when is the reference</font>

178
00:09:29,440 --> 00:09:34,420
and when is target program we run to

179
00:09:31,900 --> 00:09:38,439
both of the two programs to get<font color="#CCCCCC"> 2x</font>

180
00:09:34,420 --> 00:09:40,780
<font color="#E5E5E5">different races here the blue line means</font>

181
00:09:38,440 --> 00:09:42,520
the reference trace and the target line

182
00:09:40,780 --> 00:09:45,760
the red line<font color="#E5E5E5"> means the target</font><font color="#CCCCCC"> address</font>

183
00:09:42,520 --> 00:09:48,040
and then we<font color="#CCCCCC"> run look it's a loop</font>

184
00:09:45,760 --> 00:09:52,240
detection on both of the two traces<font color="#E5E5E5"> to</font>

185
00:09:48,040 --> 00:09:54,459
expect the loop body after that<font color="#CCCCCC"> were</font>

186
00:09:52,240 --> 00:09:57,670
wrong<font color="#CCCCCC"> with symbolic execution</font><font color="#E5E5E5"> to</font>

187
00:09:54,460 --> 00:10:03,640
transform the loop bodies into<font color="#E5E5E5"> pooling</font>

188
00:09:57,670 --> 00:10:05,560
formulas here FX and GX<font color="#E5E5E5"> so</font><font color="#CCCCCC"> address</font><font color="#E5E5E5"> we</font>

189
00:10:03,640 --> 00:10:08,770
check whether those<font color="#E5E5E5"> two formulas are</font>

190
00:10:05,560 --> 00:10:15,750
equivalent<font color="#E5E5E5"> if they are equivalent then</font>

191
00:10:08,770 --> 00:10:18,250
<font color="#E5E5E5">we say a crypto function is detected so</font>

192
00:10:15,750 --> 00:10:20,650
generally there are<font color="#E5E5E5"> six steps in our</font>

193
00:10:18,250 --> 00:10:24,430
technique<font color="#E5E5E5"> firstly we need a reference</font>

194
00:10:20,650 --> 00:10:27,340
implementation<font color="#E5E5E5"> and then we love to</font>

195
00:10:24,430 --> 00:10:30,579
access increases and then we do loop

196
00:10:27,340 --> 00:10:32,770
detection<font color="#CCCCCC"> Peter simple execution</font><font color="#E5E5E5"> and</font>

197
00:10:30,580 --> 00:10:34,930
variable mapping and<font color="#E5E5E5"> a task that we</font>

198
00:10:32,770 --> 00:10:38,319
check the equivalence of the<font color="#E5E5E5"> two former</font>

199
00:10:34,930 --> 00:10:40,150
works<font color="#E5E5E5"> so I will go through this whole</font>

200
00:10:38,320 --> 00:10:43,270
procedure<font color="#E5E5E5"> step by step</font>

201
00:10:40,150 --> 00:10:45,160
so first the reference<font color="#E5E5E5"> implementation we</font>

202
00:10:43,270 --> 00:10:48,720
need a reference<font color="#E5E5E5"> elimination which is</font>

203
00:10:45,160 --> 00:10:51,310
your<font color="#E5E5E5"> selected from a very</font><font color="#CCCCCC"> well known</font>

204
00:10:48,720 --> 00:10:56,320
implementation of the crypto function so

205
00:10:51,310 --> 00:10:59,170
here<font color="#CCCCCC"> I show exam of TA</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> reference</font>

206
00:10:56,320 --> 00:11:01,270
implementation should<font color="#E5E5E5"> contain the call</font>

207
00:10:59,170 --> 00:11:03,760
transformation of the crypto function

208
00:11:01,270 --> 00:11:07,060
which can represent the semantics of

209
00:11:03,760 --> 00:11:11,680
that<font color="#E5E5E5"> crypto algorithm so here is the</font>

210
00:11:07,060 --> 00:11:12,099
<font color="#E5E5E5">mental body of the TA</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that we run</font>

211
00:11:11,680 --> 00:11:14,920
both

212
00:11:12,100 --> 00:11:18,069
the reference program and the target

213
00:11:14,920 --> 00:11:19,079
program to get to excuse increases the

214
00:11:18,069 --> 00:11:22,529
<font color="#CCCCCC">traits content</font>

215
00:11:19,079 --> 00:11:26,279
runtime<font color="#CCCCCC"> information like opcode</font><font color="#E5E5E5"> operand</font>

216
00:11:22,529 --> 00:11:31,120
<font color="#E5E5E5">register values and the memory exact</font>

217
00:11:26,279 --> 00:11:34,029
value and aggressive<font color="#CCCCCC"> after we get</font><font color="#E5E5E5"> the</font>

218
00:11:31,120 --> 00:11:37,720
two<font color="#CCCCCC"> traces we're on</font><font color="#E5E5E5"> loop detection on</font>

219
00:11:34,029 --> 00:11:40,329
both of the<font color="#E5E5E5"> traces actually here we</font>

220
00:11:37,720 --> 00:11:44,610
detect the two types of loops<font color="#E5E5E5"> first is</font>

221
00:11:40,329 --> 00:11:47,859
unroll the loop but it is actually<font color="#CCCCCC"> a</font>

222
00:11:44,610 --> 00:11:51,579
like a series of repeated instructions

223
00:11:47,860 --> 00:11:54,370
<font color="#E5E5E5">so here in this</font><font color="#CCCCCC"> example there are two</font>

224
00:11:51,579 --> 00:11:58,719
loop bodies<font color="#E5E5E5"> both are instruction</font><font color="#CCCCCC"> 1 2 3 &</font>

225
00:11:54,370 --> 00:12:00,910
<font color="#CCCCCC">4 notice that here the</font><font color="#E5E5E5"> track address are</font>

226
00:11:58,720 --> 00:12:06,190
different because<font color="#E5E5E5"> they are unrolled</font>

227
00:12:00,910 --> 00:12:10,329
loops the second type is<font color="#E5E5E5"> the loop body</font>

228
00:12:06,190 --> 00:12:12,730
which can end with<font color="#E5E5E5"> jump instructions</font><font color="#CCCCCC"> so</font>

229
00:12:10,329 --> 00:12:16,920
here in this<font color="#CCCCCC"> example there are two lue</font>

230
00:12:12,730 --> 00:12:18,959
buddies<font color="#E5E5E5"> went to instruction 1 2 3 4 and</font>

231
00:12:16,920 --> 00:12:21,790
instruction 1 5 6

232
00:12:18,959 --> 00:12:25,380
notice that here look although body

233
00:12:21,790 --> 00:12:29,709
could include a branch instruction<font color="#CCCCCC"> so</font>

234
00:12:25,380 --> 00:12:33,579
different loop bodies<font color="#E5E5E5"> although</font><font color="#CCCCCC"> they jump</font>

235
00:12:29,709 --> 00:12:35,589
<font color="#E5E5E5">back to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same address but the the</font>

236
00:12:33,579 --> 00:12:37,689
body could go<font color="#CCCCCC"> to different branches in</font>

237
00:12:35,589 --> 00:12:42,939
<font color="#CCCCCC">different execution so the</font><font color="#E5E5E5"> new body</font>

238
00:12:37,689 --> 00:12:45,910
itself could be different after<font color="#E5E5E5"> we</font>

239
00:12:42,939 --> 00:12:48,160
extract the loop bodies<font color="#CCCCCC"> we're wrong big</font>

240
00:12:45,910 --> 00:12:51,579
symbolic execution on<font color="#CCCCCC"> the loop bodies to</font>

241
00:12:48,160 --> 00:12:54,399
transform to transform them into boolean

242
00:12:51,579 --> 00:12:56,920
formulas<font color="#E5E5E5"> so here it's the our core</font>

243
00:12:54,399 --> 00:12:59,470
contribution we actually extract<font color="#CCCCCC"> the</font>

244
00:12:56,920 --> 00:13:04,420
<font color="#CCCCCC">fine-grained semantics of a critical</font>

245
00:12:59,470 --> 00:13:06,759
function so in all those formulas<font color="#E5E5E5"> the</font>

246
00:13:04,420 --> 00:13:08,880
formula the variables here are<font color="#E5E5E5"> all</font>

247
00:13:06,759 --> 00:13:12,130
<font color="#E5E5E5">pulling formulas are pulling variables</font>

248
00:13:08,880 --> 00:13:16,149
so here I show<font color="#CCCCCC"> example of the reference</font>

249
00:13:12,130 --> 00:13:18,550
formula and target formulas<font color="#CCCCCC"> so X</font><font color="#E5E5E5"> 1 X 2 X</font>

250
00:13:16,149 --> 00:13:21,519
3 here are includes<font color="#E5E5E5"> of the reference</font>

251
00:13:18,550 --> 00:13:25,439
formula and the UN you<font color="#E5E5E5"> to our output</font>

252
00:13:21,519 --> 00:13:29,160
<font color="#E5E5E5">formula also available and in similar in</font>

253
00:13:25,440 --> 00:13:31,110
<font color="#E5E5E5">entire program the y1 y2 and y3 are</font>

254
00:13:29,160 --> 00:13:34,020
inputs and the<font color="#CCCCCC"> villa</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> rate</font><font color="#E5E5E5"> watt</font>

255
00:13:31,110 --> 00:13:37,710
<font color="#E5E5E5">output so the next step we</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to</font>

256
00:13:34,020 --> 00:13:39,870
compare to check the<font color="#E5E5E5"> whether those</font><font color="#CCCCCC"> two</font>

257
00:13:37,710 --> 00:13:43,770
groups<font color="#E5E5E5"> of formulas are essentially</font>

258
00:13:39,870 --> 00:13:46,020
equivalent<font color="#E5E5E5"> so but before</font><font color="#CCCCCC"> that we need</font>

259
00:13:43,770 --> 00:13:49,069
because they<font color="#CCCCCC"> are</font><font color="#E5E5E5"> actually two</font><font color="#CCCCCC"> different</font>

260
00:13:46,020 --> 00:13:52,439
formulas we need to map the<font color="#E5E5E5"> variables</font>

261
00:13:49,070 --> 00:13:54,380
together so that we know how<font color="#E5E5E5"> to compare</font>

262
00:13:52,440 --> 00:13:57,180
them<font color="#CCCCCC"> for</font><font color="#E5E5E5"> example here we need to</font><font color="#CCCCCC"> know</font>

263
00:13:54,380 --> 00:13:58,950
which input variables of in the

264
00:13:57,180 --> 00:14:02,010
reference probe<font color="#E5E5E5"> it means a reference</font>

265
00:13:58,950 --> 00:14:06,600
formula is exactly the input in the

266
00:14:02,010 --> 00:14:08,840
target formula so one<font color="#E5E5E5"> simple way is just</font>

267
00:14:06,600 --> 00:14:11,910
do a permutation to try<font color="#E5E5E5"> different</font>

268
00:14:08,840 --> 00:14:14,700
possibilities but<font color="#CCCCCC"> things here</font><font color="#E5E5E5"> in our</font>

269
00:14:11,910 --> 00:14:18,150
formula all the variables are bullying

270
00:14:14,700 --> 00:14:22,200
variables so just like a<font color="#CCCCCC"> yearly</font><font color="#E5E5E5"> hundreds</font>

271
00:14:18,150 --> 00:14:25,520
of those variables<font color="#E5E5E5"> so simple permutation</font>

272
00:14:22,200 --> 00:14:28,920
will cost<font color="#CCCCCC"> performance problem</font><font color="#E5E5E5"> so here we</font>

273
00:14:25,520 --> 00:14:32,400
<font color="#E5E5E5">propose a variable matching algorithm to</font>

274
00:14:28,920 --> 00:14:35,880
map the input variables and<font color="#E5E5E5"> output</font>

275
00:14:32,400 --> 00:14:37,860
variables<font color="#CCCCCC"> this is time limitation I</font>

276
00:14:35,880 --> 00:14:41,420
cannot go into<font color="#E5E5E5"> the details of this</font>

277
00:14:37,860 --> 00:14:44,910
algorithm<font color="#CCCCCC"> if you are interested you</font><font color="#E5E5E5"> can</font>

278
00:14:41,420 --> 00:14:47,660
<font color="#CCCCCC">find more details in our paper</font><font color="#E5E5E5"> so here I</font>

279
00:14:44,910 --> 00:14:50,339
only show the final result of<font color="#E5E5E5"> this</font>

280
00:14:47,660 --> 00:14:53,610
mapping algorithm<font color="#E5E5E5"> so we can map the</font>

281
00:14:50,340 --> 00:14:56,970
input and the output variables<font color="#E5E5E5"> so given</font>

282
00:14:53,610 --> 00:14:59,640
the variable<font color="#E5E5E5"> mapping</font><font color="#CCCCCC"> results we can</font><font color="#E5E5E5"> go</font>

283
00:14:56,970 --> 00:15:02,910
further to generate the final

284
00:14:59,640 --> 00:15:05,250
<font color="#CCCCCC">equivalence checking equation so we</font>

285
00:15:02,910 --> 00:15:10,439
first<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> replace the map the input</font>

286
00:15:05,250 --> 00:15:14,940
with a same symbol<font color="#E5E5E5"> such as here we map</font>

287
00:15:10,440 --> 00:15:19,860
the X 1 and<font color="#E5E5E5"> Y</font><font color="#CCCCCC"> 2 x 2 and y 3 and X 3 with</font>

288
00:15:14,940 --> 00:15:23,700
<font color="#E5E5E5">y 1 then we we replace X 1 Y 2 is 8 X 2</font>

289
00:15:19,860 --> 00:15:26,880
y 3 which<font color="#CCCCCC"> be and X 3 y 1</font><font color="#E5E5E5"> we see and</font>

290
00:15:23,700 --> 00:15:28,970
after<font color="#CCCCCC"> that we also connect the map so</font>

291
00:15:26,880 --> 00:15:32,029
output<font color="#E5E5E5"> the variables together</font><font color="#CCCCCC"> to</font>

292
00:15:28,970 --> 00:15:35,629
the final equation<font color="#E5E5E5"> so this is the final</font>

293
00:15:32,029 --> 00:15:38,930
equation we need<font color="#CCCCCC"> to check at the last</font>

294
00:15:35,629 --> 00:15:41,889
step we use<font color="#E5E5E5"> the theorem prover to check</font>

295
00:15:38,930 --> 00:15:45,258
whether those equations are actually

296
00:15:41,889 --> 00:15:47,420
equivalent if they are equivalent<font color="#CCCCCC"> which</font>

297
00:15:45,259 --> 00:15:49,819
means the target program<font color="#E5E5E5"> the</font><font color="#CCCCCC"> nobodying</font>

298
00:15:47,420 --> 00:15:53,360
<font color="#E5E5E5">the target program is essentially the</font>

299
00:15:49,819 --> 00:15:57,229
same<font color="#CCCCCC"> has the same ik semantics of the</font>

300
00:15:53,360 --> 00:15:59,629
reference program<font color="#E5E5E5"> so if they are</font>

301
00:15:57,230 --> 00:16:06,290
<font color="#E5E5E5">equivalent</font><font color="#CCCCCC"> we say our</font><font color="#E5E5E5"> cryptid function</font>

302
00:15:59,629 --> 00:16:08,120
is detected<font color="#CCCCCC"> so far we have go I have go</font>

303
00:16:06,290 --> 00:16:11,209
through<font color="#CCCCCC"> all the steps in our technique</font>

304
00:16:08,120 --> 00:16:14,240
<font color="#E5E5E5">we evaluate this technique from three</font>

305
00:16:11,209 --> 00:16:18,109
effects<font color="#E5E5E5"> first one is the from the</font>

306
00:16:14,240 --> 00:16:19,339
effectiveness we try to detect<font color="#E5E5E5"> five</font>

307
00:16:18,110 --> 00:16:24,110
fruits algorithms

308
00:16:19,339 --> 00:16:27,740
taa ESRC for md5 and now say we try to

309
00:16:24,110 --> 00:16:30,079
use our technique to detect some the

310
00:16:27,740 --> 00:16:33,620
crypto algorithm seeing some common user

311
00:16:30,079 --> 00:16:36,079
with<font color="#CCCCCC"> the libraries like open SSL and</font>

312
00:16:33,620 --> 00:16:39,559
<font color="#CCCCCC">lick</font><font color="#E5E5E5"> equipped with all</font><font color="#CCCCCC"> passive</font>

313
00:16:36,079 --> 00:16:42,800
obfuscation techniques<font color="#E5E5E5"> and we also use</font>

314
00:16:39,559 --> 00:16:45,230
our techniques to check<font color="#E5E5E5"> or customize the</font>

315
00:16:42,800 --> 00:16:48,589
crypto algorithm which is<font color="#E5E5E5"> then X key a</font>

316
00:16:45,230 --> 00:16:52,459
variant<font color="#E5E5E5"> and also</font><font color="#CCCCCC"> windows our technically</font>

317
00:16:48,589 --> 00:16:54,620
<font color="#CCCCCC">to detect some</font><font color="#E5E5E5"> malware samples you now</font>

318
00:16:52,459 --> 00:16:59,149
<font color="#E5E5E5">accept</font><font color="#CCCCCC"> experiments all critical</font>

319
00:16:54,620 --> 00:17:01,490
functions are detected the second

320
00:16:59,149 --> 00:17:03,789
evaluation is about false positives

321
00:17:01,490 --> 00:17:07,189
<font color="#E5E5E5">we feed some normal programs which</font>

322
00:17:03,789 --> 00:17:11,539
heavily have a piecewise operations into

323
00:17:07,189 --> 00:17:15,559
our tour and there's no false positives

324
00:17:11,539 --> 00:17:19,189
identified and the last evaluation<font color="#CCCCCC"> is</font>

325
00:17:15,559 --> 00:17:21,799
<font color="#CCCCCC">the performance</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> when analysis</font>

326
00:17:19,189 --> 00:17:25,100
usually<font color="#CCCCCC"> take like 15 to 40 minutes and</font>

327
00:17:21,799 --> 00:17:26,900
based on<font color="#E5E5E5"> our</font><font color="#CCCCCC"> observation the loop</font>

328
00:17:25,099 --> 00:17:34,309
detection is<font color="#CCCCCC"> the most time-consuming</font>

329
00:17:26,900 --> 00:17:36,919
part<font color="#E5E5E5"> so</font><font color="#CCCCCC"> to in summary I</font><font color="#E5E5E5"> will propose a</font>

330
00:17:34,309 --> 00:17:40,610
new method<font color="#E5E5E5"> called a bit symbolic loop</font>

331
00:17:36,919 --> 00:17:42,290
mapping to detected groups of functions

332
00:17:40,610 --> 00:17:44,600
this method can catch

333
00:17:42,290 --> 00:17:50,030
the<font color="#CCCCCC"> finder</font><font color="#E5E5E5"> and the semantics of the</font>

334
00:17:44,600 --> 00:17:51,740
function and it is<font color="#E5E5E5"> resilient to control</font>

335
00:17:50,030 --> 00:17:54,830
and<font color="#E5E5E5"> data of class occasion and we also</font>

336
00:17:51,740 --> 00:17:57,530
have<font color="#E5E5E5"> our tour a demo tour open sources</font>

337
00:17:54,830 --> 00:18:08,149
you can download it and play with<font color="#CCCCCC"> it and</font>

338
00:17:57,530 --> 00:18:10,850
have<font color="#CCCCCC"> fun</font><font color="#E5E5E5"> thank you that's all questions</font>

339
00:18:08,150 --> 00:18:14,150
<font color="#E5E5E5">yes good yes John Criswell University of</font>

340
00:18:10,850 --> 00:18:16,730
<font color="#E5E5E5">Rochester's so interesting work one</font>

341
00:18:14,150 --> 00:18:19,490
<font color="#E5E5E5">question I have though is um if your</font>

342
00:18:16,730 --> 00:18:21,860
technique were to be deployed in<font color="#CCCCCC"> the</font>

343
00:18:19,490 --> 00:18:26,180
wild<font color="#E5E5E5"> then wouldn't attackers start using</font>

344
00:18:21,860 --> 00:18:28,250
say modifications of existing algorithms

345
00:18:26,180 --> 00:18:31,070
so for example maybe<font color="#E5E5E5"> doing a</font><font color="#CCCCCC"> EES but not</font>

346
00:18:28,250 --> 00:18:32,900
doing<font color="#CCCCCC"> as</font><font color="#E5E5E5"> many iterations</font><font color="#CCCCCC"> or creating</font>

347
00:18:31,070 --> 00:18:34,280
sort<font color="#E5E5E5"> of ad hoc encryption algorithms</font>

348
00:18:32,900 --> 00:18:36,260
that<font color="#E5E5E5"> perhaps don't have cryptographic</font>

349
00:18:34,280 --> 00:18:40,040
strengths that are<font color="#E5E5E5"> just different from</font>

350
00:18:36,260 --> 00:18:43,250
your reference implementations will mean

351
00:18:40,040 --> 00:18:45,889
<font color="#CCCCCC">a the developer the mellah developers</font>

352
00:18:43,250 --> 00:18:48,050
can customize some crypto algorithms

353
00:18:45,890 --> 00:18:49,670
right right because<font color="#CCCCCC"> your is essentially</font>

354
00:18:48,050 --> 00:18:51,770
what you're doing<font color="#E5E5E5"> is a one from one</font>

355
00:18:49,670 --> 00:18:53,330
functional match between your reference

356
00:18:51,770 --> 00:18:56,120
algorithm and one that<font color="#E5E5E5"> you're looking</font>

357
00:18:53,330 --> 00:18:58,550
<font color="#CCCCCC">for right yeah</font><font color="#E5E5E5"> yeah that's that's a</font><font color="#CCCCCC"> very</font>

358
00:18:56,120 --> 00:19:02,750
good question<font color="#CCCCCC"> yes so actually in our</font>

359
00:18:58,550 --> 00:19:06,740
method<font color="#E5E5E5"> I can we actually</font><font color="#CCCCCC"> we can detect</font>

360
00:19:02,750 --> 00:19:10,070
the kind also customize the<font color="#E5E5E5"> crypto</font>

361
00:19:06,740 --> 00:19:13,220
algorithms for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> PA</font><font color="#CCCCCC"> the malware</font>

362
00:19:10,070 --> 00:19:17,300
developer can change the magic number in

363
00:19:13,220 --> 00:19:20,110
their in their personal implementation

364
00:19:17,300 --> 00:19:23,060
but<font color="#E5E5E5"> in our technique it can be handled</font>

365
00:19:20,110 --> 00:19:24,379
<font color="#E5E5E5">but if they are using a totally</font>

366
00:19:23,060 --> 00:19:27,379
<font color="#E5E5E5">different the implementation</font>

367
00:19:24,380 --> 00:19:30,620
I guess that<font color="#E5E5E5"> the our solution is that</font>

368
00:19:27,380 --> 00:19:34,310
<font color="#E5E5E5">you can find a new reference</font>

369
00:19:30,620 --> 00:19:37,399
implementation and<font color="#E5E5E5"> pulling</font><font color="#CCCCCC"> into our like</font>

370
00:19:34,310 --> 00:19:42,590
a library yeah<font color="#CCCCCC"> okay let's</font><font color="#E5E5E5"> chat</font>

371
00:19:37,400 --> 00:19:44,000
afterwards<font color="#CCCCCC"> Thanks thank you you</font><font color="#E5E5E5"> explain</font>

372
00:19:42,590 --> 00:19:46,129
some of<font color="#E5E5E5"> the challenges of previous</font>

373
00:19:44,000 --> 00:19:49,460
approaches what's the drawback of the

374
00:19:46,130 --> 00:19:51,440
<font color="#E5E5E5">the dataflow analysis approach oh you</font>

375
00:19:49,460 --> 00:19:53,870
cannot handle<font color="#CCCCCC"> obfuscation because</font>

376
00:19:51,440 --> 00:19:56,010
<font color="#CCCCCC">dateable if you are using data flow</font>

377
00:19:53,870 --> 00:19:58,290
graph as a<font color="#E5E5E5"> signature</font>

378
00:19:56,010 --> 00:20:00,900
simple application can totally method

379
00:19:58,290 --> 00:20:03,210
<font color="#E5E5E5">right but all you</font><font color="#CCCCCC"> need to do is see when</font>

380
00:20:00,900 --> 00:20:06,450
you change one<font color="#CCCCCC"> input of data</font><font color="#E5E5E5"> does all of</font>

381
00:20:03,210 --> 00:20:08,760
<font color="#E5E5E5">the output change right like you just</font>

382
00:20:06,450 --> 00:20:10,620
you<font color="#E5E5E5"> rely on confusion and diffusion and</font>

383
00:20:08,760 --> 00:20:13,020
say does this look like<font color="#E5E5E5"> a crypto</font>

384
00:20:10,620 --> 00:20:17,310
algorithm not pinning<font color="#CCCCCC"> down the</font><font color="#E5E5E5"> actual</font>

385
00:20:13,020 --> 00:20:19,350
algorithm I'm sorry<font color="#E5E5E5"> right you you just</font>

386
00:20:17,310 --> 00:20:21,600
say does this<font color="#E5E5E5"> obey cryptographic</font>

387
00:20:19,350 --> 00:20:25,550
properties<font color="#CCCCCC"> if</font><font color="#E5E5E5"> I change input slightly</font>

388
00:20:21,600 --> 00:20:27,929
all of the output changes yes<font color="#E5E5E5"> and that's</font>

389
00:20:25,550 --> 00:20:30,450
<font color="#E5E5E5">completely resilient to occupation it's</font>

390
00:20:27,930 --> 00:20:34,230
just<font color="#E5E5E5"> input/output dependent yeah that's</font>

391
00:20:30,450 --> 00:20:38,490
dynamic<font color="#E5E5E5"> rather</font><font color="#CCCCCC"> here you are talking</font>

392
00:20:34,230 --> 00:20:41,000
<font color="#E5E5E5">about a data flow graph right well you</font>

393
00:20:38,490 --> 00:20:45,510
can<font color="#CCCCCC"> do</font><font color="#E5E5E5"> that just from the control flow</font>

394
00:20:41,000 --> 00:20:50,070
the data flow<font color="#E5E5E5"> okay let's yeah hello we</font>

395
00:20:45,510 --> 00:20:53,129
<font color="#CCCCCC">can talk</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> this details uh my</font>

396
00:20:50,070 --> 00:21:00,149
comment is a very similar<font color="#E5E5E5"> to the last</font>

397
00:20:53,130 --> 00:21:03,930
one<font color="#CCCCCC"> if I if it</font><font color="#E5E5E5"> a loop is taking in data</font>

398
00:21:00,150 --> 00:21:06,720
<font color="#E5E5E5">that appears to have some simple</font>

399
00:21:03,930 --> 00:21:09,480
correlation ie it's not random<font color="#E5E5E5"> and if</font>

400
00:21:06,720 --> 00:21:12,270
the output<font color="#CCCCCC"> is uniformly distributed</font>

401
00:21:09,480 --> 00:21:15,300
<font color="#E5E5E5">zeros and ones then it's a crypto</font>

402
00:21:12,270 --> 00:21:18,480
algorithm and it doesn't actually matter

403
00:21:15,300 --> 00:21:21,149
what the internals are and I believe

404
00:21:18,480 --> 00:21:23,370
<font color="#CCCCCC">it's possible I</font><font color="#E5E5E5"> believe that someone</font>

405
00:21:21,150 --> 00:21:25,620
<font color="#E5E5E5">will come next year with a paper that</font>

406
00:21:23,370 --> 00:21:27,750
shows how they can obfuscate crypto

407
00:21:25,620 --> 00:21:32,100
<font color="#E5E5E5">algorithms so they don't even seem to be</font>

408
00:21:27,750 --> 00:21:34,770
using<font color="#E5E5E5"> arithmetic or boolean operations</font>

409
00:21:32,100 --> 00:21:38,149
<font color="#E5E5E5">so I really</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> the definitive thing</font>

410
00:21:34,770 --> 00:21:41,160
is as previous questioner said you know

411
00:21:38,150 --> 00:21:42,960
what<font color="#CCCCCC"> are</font><font color="#E5E5E5"> the properties of the algorithm</font>

412
00:21:41,160 --> 00:21:48,420
<font color="#E5E5E5">if it's crypto it's pretty easily</font>

413
00:21:42,960 --> 00:21:52,140
recognized<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> that's a very good</font>

414
00:21:48,420 --> 00:21:55,830
question<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> your recruitable</font>

415
00:21:52,140 --> 00:21:59,370
functions are not that easy<font color="#E5E5E5"> to customize</font>

416
00:21:55,830 --> 00:22:02,189
and to<font color="#E5E5E5"> customize and to change so it</font>

417
00:21:59,370 --> 00:22:04,979
requires a<font color="#CCCCCC"> very strong background</font>

418
00:22:02,190 --> 00:22:07,230
knowledge<font color="#CCCCCC"> so essentially the core part</font>

419
00:22:04,980 --> 00:22:11,250
of that<font color="#E5E5E5"> credit</font><font color="#CCCCCC"> function is</font>

420
00:22:07,230 --> 00:22:13,679
really fixed the there are very<font color="#E5E5E5"> small</font>

421
00:22:11,250 --> 00:22:15,720
numbers of location in that<font color="#CCCCCC"> for the</font>

422
00:22:13,679 --> 00:22:20,250
function that<font color="#E5E5E5"> the mayor developers can</font>

423
00:22:15,720 --> 00:22:23,540
change so surely our<font color="#E5E5E5"> method can catch</font>

424
00:22:20,250 --> 00:22:25,980
the core part of that<font color="#E5E5E5"> algorithm so</font>

425
00:22:23,540 --> 00:22:30,379
surely this core part will not<font color="#CCCCCC"> be</font>

426
00:22:25,980 --> 00:22:33,030
<font color="#E5E5E5">changed so one less the short cushion</font>

427
00:22:30,380 --> 00:22:35,340
<font color="#CCCCCC">just describe to the previous question</font>

428
00:22:33,030 --> 00:22:37,200
<font color="#CCCCCC">make you could have an obfuscation where</font>

429
00:22:35,340 --> 00:22:40,168
a single loop is split into multiple

430
00:22:37,200 --> 00:22:42,330
loops or multiple loops<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be combined</font>

431
00:22:40,169 --> 00:22:44,160
into<font color="#E5E5E5"> a single loop since your technique</font>

432
00:22:42,330 --> 00:22:45,780
check the equivalence of loops from<font color="#CCCCCC"> the</font>

433
00:22:44,160 --> 00:22:47,520
friends implementation and the given

434
00:22:45,780 --> 00:22:49,740
implementation<font color="#E5E5E5"> how do you handle</font><font color="#CCCCCC"> that</font>

435
00:22:47,520 --> 00:22:51,809
kind<font color="#E5E5E5"> of obfuscation where you combine</font>

436
00:22:49,740 --> 00:22:54,929
multiple loops and<font color="#E5E5E5"> you split the</font>

437
00:22:51,809 --> 00:22:58,139
existing loops into<font color="#E5E5E5"> multiple loops you</font>

438
00:22:54,929 --> 00:22:59,820
mean how to combine<font color="#E5E5E5"> the loop and let's</font>

439
00:22:58,140 --> 00:23:02,070
say you have an office station where you

440
00:22:59,820 --> 00:23:03,870
split an existing loop from the

441
00:23:02,070 --> 00:23:12,389
reference implementation into multiple

442
00:23:03,870 --> 00:23:14,510
<font color="#E5E5E5">loops one possible solution is that in</font>

443
00:23:12,390 --> 00:23:18,419
the<font color="#CCCCCC"> reference implementation we can</font>

444
00:23:14,510 --> 00:23:22,559
<font color="#E5E5E5">because we are using</font><font color="#CCCCCC"> Waialua body</font><font color="#E5E5E5"> we can</font>

445
00:23:18,419 --> 00:23:24,630
actually<font color="#E5E5E5"> combine the tool to little</font>

446
00:23:22,559 --> 00:23:26,639
balancing<font color="#E5E5E5"> the implement</font><font color="#CCCCCC"> in the reference</font>

447
00:23:24,630 --> 00:23:31,080
implementation<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I'd like to try the</font>

448
00:23:26,640 --> 00:23:35,549
different combinations<font color="#E5E5E5"> this is a one</font>

449
00:23:31,080 --> 00:23:37,678
possible solution<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> okay so</font>

450
00:23:35,549 --> 00:23:39,440
that's<font color="#E5E5E5"> a</font><font color="#CCCCCC"> song</font><font color="#E5E5E5"> vestigial again and this</font>

451
00:23:37,679 --> 00:23:43,609
concludes<font color="#E5E5E5"> our session</font><font color="#CCCCCC"> Thanks</font>

452
00:23:39,440 --> 00:23:43,609
[Applause]

