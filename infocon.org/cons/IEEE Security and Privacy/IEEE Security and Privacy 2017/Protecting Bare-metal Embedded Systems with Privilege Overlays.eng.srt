1
00:00:02,060 --> 00:00:07,140
thank you I'm Abe<font color="#CCCCCC"> Clemens</font><font color="#E5E5E5"> this work was</font>

2
00:00:05,790 --> 00:00:10,080
<font color="#CCCCCC">done in</font><font color="#E5E5E5"> conjunction with similar</font>

3
00:00:07,140 --> 00:00:13,730
<font color="#CCCCCC">collaborators Nate Colette chaste</font>

4
00:00:10,080 --> 00:00:15,839
<font color="#CCCCCC">jin-kyu</font><font color="#E5E5E5"> Rob Bochy and Mattias</font><font color="#CCCCCC"> pair</font>

5
00:00:13,730 --> 00:00:19,050
<font color="#CCCCCC">Suribachi and</font><font color="#E5E5E5"> Mattias</font><font color="#CCCCCC"> Ferrer my co</font>

6
00:00:15,839 --> 00:00:21,390
<font color="#CCCCCC">advisers and I'm a second year PhD</font>

7
00:00:19,050 --> 00:00:22,529
<font color="#E5E5E5">student at Purdue University</font><font color="#CCCCCC"> I'll be</font>

8
00:00:21,390 --> 00:00:24,480
discussing protecting bare metal

9
00:00:22,529 --> 00:00:27,029
embedded<font color="#E5E5E5"> systems with</font><font color="#CCCCCC"> privileged</font>

10
00:00:24,480 --> 00:00:29,070
overlays<font color="#CCCCCC"> so first off what</font><font color="#E5E5E5"> is a</font>

11
00:00:27,029 --> 00:00:30,720
privilege<font color="#E5E5E5"> what does a bare metal system</font>

12
00:00:29,070 --> 00:00:32,159
<font color="#E5E5E5">a governmental</font><font color="#CCCCCC"> system is a system</font>

13
00:00:30,720 --> 00:00:34,890
<font color="#CCCCCC">without an operating</font><font color="#E5E5E5"> system it runs</font>

14
00:00:32,159 --> 00:00:36,750
directly<font color="#E5E5E5"> on the hardware</font><font color="#CCCCCC"> there is no</font>

15
00:00:34,890 --> 00:00:38,789
separation between<font color="#E5E5E5"> well there is no</font>

16
00:00:36,750 --> 00:00:40,379
kernel or operating<font color="#CCCCCC"> system if there's an</font>

17
00:00:38,789 --> 00:00:43,050
operating<font color="#CCCCCC"> system it provides lightweight</font>

18
00:00:40,379 --> 00:00:44,640
threading and is compiled with the

19
00:00:43,050 --> 00:00:47,399
application there is<font color="#E5E5E5"> no separation</font>

20
00:00:44,640 --> 00:00:50,160
between user space or kernel space<font color="#E5E5E5"> it's</font>

21
00:00:47,399 --> 00:00:54,000
all one memory space<font color="#CCCCCC"> these systems</font><font color="#E5E5E5"> have</font>

22
00:00:50,160 --> 00:00:57,898
very<font color="#E5E5E5"> tight constraints on memory and run</font>

23
00:00:54,000 --> 00:01:00,329
<font color="#E5E5E5">time and energy a large system would</font>

24
00:00:57,899 --> 00:01:03,390
<font color="#CCCCCC">have like a megabyte of memory</font><font color="#E5E5E5"> for code</font>

25
00:01:00,329 --> 00:01:05,729
and 120 kilobytes of RAM<font color="#E5E5E5"> this would be a</font>

26
00:01:03,390 --> 00:01:08,220
kind of a larger end<font color="#CCCCCC"> bare-metal system</font>

27
00:01:05,729 --> 00:01:11,580
<font color="#E5E5E5">some examples of these systems are</font>

28
00:01:08,220 --> 00:01:14,490
Amazon's<font color="#E5E5E5"> - button smart door locks</font>

29
00:01:11,580 --> 00:01:15,869
<font color="#E5E5E5">engine controllers</font><font color="#CCCCCC"> sdcard controllers</font><font color="#E5E5E5"> so</font>

30
00:01:14,490 --> 00:01:18,780
inside of<font color="#E5E5E5"> your</font><font color="#CCCCCC"> sdcard</font><font color="#E5E5E5"> there's a</font>

31
00:01:15,869 --> 00:01:20,820
microcontroller<font color="#CCCCCC"> that handles flash we're</font>

32
00:01:18,780 --> 00:01:23,310
leveling this<font color="#E5E5E5"> is an example those run</font>

33
00:01:20,820 --> 00:01:24,419
<font color="#E5E5E5">bare metal code Wi-Fi system mounted</font>

34
00:01:23,310 --> 00:01:28,020
chips<font color="#E5E5E5"> these are in</font><font color="#CCCCCC"> your cell phone</font>

35
00:01:24,420 --> 00:01:29,610
they run the Wi-Fi connections because

36
00:01:28,020 --> 00:01:34,259
of the constraints<font color="#E5E5E5"> the small memory</font>

37
00:01:29,610 --> 00:01:36,479
<font color="#CCCCCC">sizes low power requirements Security's</font>

38
00:01:34,259 --> 00:01:39,720
often just left out<font color="#CCCCCC"> as an</font><font color="#E5E5E5"> example</font>

39
00:01:36,479 --> 00:01:41,789
Google's Project<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> this last earlier</font>

40
00:01:39,720 --> 00:01:43,560
this month disclosed that<font color="#CCCCCC"> they'd</font><font color="#E5E5E5"> found</font>

41
00:01:41,790 --> 00:01:45,600
vulnerabilities<font color="#E5E5E5"> that broad comes a Wi-Fi</font>

42
00:01:43,560 --> 00:01:47,729
system<font color="#CCCCCC"> on a chip</font><font color="#E5E5E5"> that enabled them to</font>

43
00:01:45,600 --> 00:01:49,500
just by having Wi-Fi<font color="#E5E5E5"> on</font><font color="#CCCCCC"> your phone on</font>

44
00:01:47,729 --> 00:01:50,759
<font color="#E5E5E5">take control of your application</font>

45
00:01:49,500 --> 00:01:52,409
<font color="#CCCCCC">processor they were</font><font color="#E5E5E5"> first able to take</font>

46
00:01:50,759 --> 00:01:54,149
control<font color="#CCCCCC"> of the Wi-Fi system on chip and</font>

47
00:01:52,409 --> 00:01:56,369
then use that<font color="#E5E5E5"> to elevate and obtain</font>

48
00:01:54,149 --> 00:01:58,560
<font color="#CCCCCC">accesses within</font><font color="#E5E5E5"> the kernel on the</font>

49
00:01:56,369 --> 00:02:00,930
application processor so<font color="#E5E5E5"> security on</font>

50
00:01:58,560 --> 00:02:02,759
these<font color="#E5E5E5"> systems is important on it's just</font>

51
00:02:00,930 --> 00:02:06,479
<font color="#E5E5E5">been left out so let's look a</font><font color="#CCCCCC"> little</font>

52
00:02:02,759 --> 00:02:08,520
<font color="#E5E5E5">more closely at these embedded systems</font>

53
00:02:06,479 --> 00:02:10,169
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a memory layout so an important</font>

54
00:02:08,520 --> 00:02:13,260
thing<font color="#CCCCCC"> to know about</font><font color="#E5E5E5"> their layout is it's</font>

55
00:02:10,169 --> 00:02:14,850
fixed everything<font color="#CCCCCC"> is physical memory down</font>

56
00:02:13,260 --> 00:02:15,120
at<font color="#E5E5E5"> the bottom you've got flash this</font><font color="#CCCCCC"> is</font>

57
00:02:14,850 --> 00:02:17,250
where you

58
00:02:15,120 --> 00:02:18,480
code would be<font color="#CCCCCC"> located and your code will</font>

59
00:02:17,250 --> 00:02:19,980
be<font color="#E5E5E5"> at a fixed</font><font color="#CCCCCC"> address if everybody's</font>

60
00:02:18,480 --> 00:02:22,859
using<font color="#E5E5E5"> the same micro that's where your</font>

61
00:02:19,980 --> 00:02:25,920
code is<font color="#E5E5E5"> the RAM same thing fixed address</font>

62
00:02:22,860 --> 00:02:28,940
every and it will be you<font color="#E5E5E5"> know usually in</font>

63
00:02:25,920 --> 00:02:31,018
the<font color="#E5E5E5"> middle as you go up you have</font>

64
00:02:28,940 --> 00:02:33,480
peripherals that are mapped into your

65
00:02:31,019 --> 00:02:35,640
memory<font color="#E5E5E5"> I'll often refer to these as</font>

66
00:02:33,480 --> 00:02:36,899
memory map registers if you want to

67
00:02:35,640 --> 00:02:39,750
control one<font color="#CCCCCC"> of these things</font><font color="#E5E5E5"> you read or</font>

68
00:02:36,900 --> 00:02:42,150
write that fixed address of the i/o and

69
00:02:39,750 --> 00:02:45,180
they also contain some security<font color="#E5E5E5"> hardware</font>

70
00:02:42,150 --> 00:02:47,370
but<font color="#CCCCCC"> will</font><font color="#E5E5E5"> find that everything on the</font>

71
00:02:45,180 --> 00:02:50,760
system runs with<font color="#CCCCCC"> the single execution</font>

72
00:02:47,370 --> 00:02:52,829
domain<font color="#E5E5E5"> everything runs as</font><font color="#CCCCCC"> route if there</font>

73
00:02:50,760 --> 00:02:54,989
is security<font color="#CCCCCC"> Hardware it's unused or</font>

74
00:02:52,829 --> 00:02:58,200
trivially bypass as an<font color="#E5E5E5"> example because</font>

75
00:02:54,989 --> 00:02:59,489
<font color="#E5E5E5">everything is in route</font><font color="#CCCCCC"> and the security</font>

76
00:02:58,200 --> 00:03:00,869
hardware is configured by writing<font color="#CCCCCC"> to</font>

77
00:02:59,489 --> 00:03:03,629
fixed memory locations where it's

78
00:03:00,870 --> 00:03:06,750
located<font color="#CCCCCC"> a single memory corruption</font>

79
00:03:03,629 --> 00:03:08,970
vulnerability with a<font color="#E5E5E5"> label you to just</font>

80
00:03:06,750 --> 00:03:13,049
turn off any sort of security<font color="#CCCCCC"> Hardware</font>

81
00:03:08,970 --> 00:03:16,319
that's enabled<font color="#E5E5E5"> any sensitive i/o would</font>

82
00:03:13,049 --> 00:03:18,870
be<font color="#E5E5E5"> always accessible your RAM any of</font>

83
00:03:16,319 --> 00:03:21,238
your global data or stack is<font color="#CCCCCC"> unrolled a</font>

84
00:03:18,870 --> 00:03:23,579
stack smashing code injection<font color="#E5E5E5"> global</font>

85
00:03:21,239 --> 00:03:25,049
data corruption<font color="#CCCCCC"> in your code and your</font>

86
00:03:23,579 --> 00:03:27,180
stack employed no<font color="#CCCCCC"> Rob</font><font color="#E5E5E5"> defenses</font>

87
00:03:25,049 --> 00:03:29,900
essentially we're sitting<font color="#E5E5E5"> 30 years back</font>

88
00:03:27,180 --> 00:03:32,669
when these<font color="#E5E5E5"> devices from desktops today</font>

89
00:03:29,900 --> 00:03:35,129
so we have<font color="#E5E5E5"> defenses for all of these on</font>

90
00:03:32,669 --> 00:03:38,160
desktops<font color="#E5E5E5"> why don't we have them on these</font>

91
00:03:35,129 --> 00:03:39,899
systems<font color="#CCCCCC"> one of the chief challenges to</font>

92
00:03:38,160 --> 00:03:42,090
this is there's a single<font color="#E5E5E5"> application</font>

93
00:03:39,900 --> 00:03:43,319
<font color="#CCCCCC">there's no separation of privileges</font><font color="#E5E5E5"> all</font>

94
00:03:42,090 --> 00:03:46,410
<font color="#CCCCCC">of</font><font color="#E5E5E5"> these defenses we have on your</font>

95
00:03:43,319 --> 00:03:48,238
desktop rely on<font color="#E5E5E5"> usually your operating</font>

96
00:03:46,410 --> 00:03:50,519
system to<font color="#E5E5E5"> configure the permissions for</font>

97
00:03:48,239 --> 00:03:51,599
<font color="#E5E5E5">your memory pages</font><font color="#CCCCCC"> we don't have an</font>

98
00:03:50,519 --> 00:03:53,549
<font color="#E5E5E5">operating system to configure the</font>

99
00:03:51,599 --> 00:03:55,168
permissions<font color="#CCCCCC"> because</font><font color="#E5E5E5"> configure them just</font>

100
00:03:53,549 --> 00:03:56,430
<font color="#E5E5E5">in the one applica configure them in</font>

101
00:03:55,169 --> 00:03:58,889
<font color="#E5E5E5">your application your application can</font>

102
00:03:56,430 --> 00:04:00,690
just disable<font color="#E5E5E5"> them the systems like a</font>

103
00:03:58,889 --> 00:04:03,569
memory<font color="#CCCCCC"> management unit they have no</font>

104
00:04:00,690 --> 00:04:06,629
virtual memory this limits all of your

105
00:04:03,569 --> 00:04:08,668
defenses to physical<font color="#CCCCCC"> memory and so you</font>

106
00:04:06,629 --> 00:04:10,649
have a small<font color="#E5E5E5"> space so LSR doesn't work</font>

107
00:04:08,669 --> 00:04:12,959
because<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have a very small memory</font>

108
00:04:10,650 --> 00:04:14,699
space again the small memory<font color="#E5E5E5"> size of</font>

109
00:04:12,959 --> 00:04:16,978
limit diversification they also<font color="#E5E5E5"> mean</font>

110
00:04:14,699 --> 00:04:19,349
<font color="#CCCCCC">that any defense that</font><font color="#E5E5E5"> you apply must</font>

111
00:04:16,978 --> 00:04:21,120
have a very<font color="#CCCCCC"> small memory overhead and</font>

112
00:04:19,349 --> 00:04:23,310
the same thing with run time constraints

113
00:04:21,120 --> 00:04:26,039
<font color="#E5E5E5">combined these have led to security just</font>

114
00:04:23,310 --> 00:04:26,780
being left<font color="#E5E5E5"> off these systems to</font><font color="#CCCCCC"> address</font>

115
00:04:26,039 --> 00:04:30,080
this

116
00:04:26,780 --> 00:04:32,030
we've developed epoxy which we then

117
00:04:30,080 --> 00:04:34,010
acronym for<font color="#E5E5E5"> embedded privilege over lay</font>

118
00:04:32,030 --> 00:04:37,219
across<font color="#CCCCCC"> pegs</font><font color="#E5E5E5"> hardware for why software</font>

119
00:04:34,010 --> 00:04:39,010
it's an<font color="#CCCCCC"> LLVM compiler and</font><font color="#E5E5E5"> we targeted</font>

120
00:04:37,220 --> 00:04:41,960
<font color="#E5E5E5">for our brief concepts the</font><font color="#CCCCCC"> cortex-m</font>

121
00:04:39,010 --> 00:04:43,640
<font color="#E5E5E5">series of microcontrollers</font><font color="#CCCCCC"> it protects</font>

122
00:04:41,960 --> 00:04:46,099
against code injection<font color="#CCCCCC"> control flow</font>

123
00:04:43,640 --> 00:04:49,969
hijacking data corruption<font color="#E5E5E5"> direct</font>

124
00:04:46,100 --> 00:04:51,860
manipulation of<font color="#E5E5E5"> i/o and chief to its</font>

125
00:04:49,970 --> 00:04:54,260
protections<font color="#E5E5E5"> or is this privilege</font><font color="#CCCCCC"> overlay</font>

126
00:04:51,860 --> 00:04:56,480
<font color="#E5E5E5">this creates two</font><font color="#CCCCCC"> privileged levels a</font>

127
00:04:54,260 --> 00:05:00,320
privileged and unprivileged level using

128
00:04:56,480 --> 00:05:02,180
<font color="#E5E5E5">some static analysis attic analysis and</font>

129
00:05:00,320 --> 00:05:04,280
this is foundation<font color="#E5E5E5"> to us enabling other</font>

130
00:05:02,180 --> 00:05:05,570
defenses to be applied<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I'll go</font>

131
00:05:04,280 --> 00:05:07,460
through<font color="#CCCCCC"> each of these protections</font><font color="#E5E5E5"> and</font>

132
00:05:05,570 --> 00:05:10,159
how they're applied<font color="#E5E5E5"> throughout the</font>

133
00:05:07,460 --> 00:05:12,080
<font color="#E5E5E5">remainder of this presentation first</font>

134
00:05:10,160 --> 00:05:14,210
<font color="#E5E5E5">though our threat model</font><font color="#CCCCCC"> we're assuming</font>

135
00:05:12,080 --> 00:05:15,229
an arbitrary memory<font color="#E5E5E5"> corruption there's</font>

136
00:05:14,210 --> 00:05:17,419
an attacker with an<font color="#E5E5E5"> arbitrary memory</font>

137
00:05:15,230 --> 00:05:19,520
<font color="#E5E5E5">corruption</font><font color="#CCCCCC"> if the attacker either wants</font>

138
00:05:17,419 --> 00:05:21,830
to obtain execution or corrupt specific

139
00:05:19,520 --> 00:05:25,969
global data they does<font color="#CCCCCC"> not have physical</font>

140
00:05:21,830 --> 00:05:28,099
<font color="#CCCCCC">access to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> device under attack we</font>

141
00:05:25,970 --> 00:05:31,070
<font color="#E5E5E5">require that the</font><font color="#CCCCCC"> hardware supports</font><font color="#E5E5E5"> to</font>

142
00:05:28,100 --> 00:05:32,660
<font color="#CCCCCC">privilege level execution modes so</font>

143
00:05:31,070 --> 00:05:34,729
privileged and<font color="#E5E5E5"> unprivileged execution</font>

144
00:05:32,660 --> 00:05:37,370
modes<font color="#CCCCCC"> we need a</font><font color="#E5E5E5"> memory protection unit</font>

145
00:05:34,729 --> 00:05:39,440
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is a piece of</font><font color="#E5E5E5"> hardware that's in</font>

146
00:05:37,370 --> 00:05:41,180
modern microcontrollers that<font color="#CCCCCC"> enable</font>

147
00:05:39,440 --> 00:05:45,410
setting read write execute permissions

148
00:05:41,180 --> 00:05:47,210
<font color="#E5E5E5">on physical memory and then we also</font>

149
00:05:45,410 --> 00:05:49,460
<font color="#E5E5E5">require that the memory usage be</font>

150
00:05:47,210 --> 00:05:51,500
determined a priori<font color="#E5E5E5"> the maximum memory</font>

151
00:05:49,460 --> 00:05:53,180
<font color="#E5E5E5">that the application will</font><font color="#CCCCCC"> use has to be</font>

152
00:05:51,500 --> 00:05:54,680
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to be determined a priori which is</font>

153
00:05:53,180 --> 00:05:56,479
a<font color="#CCCCCC"> restricted restriction on</font><font color="#E5E5E5"> these</font>

154
00:05:54,680 --> 00:05:57,979
<font color="#E5E5E5">systems that already exists we have such</font>

155
00:05:56,479 --> 00:05:59,090
small memory space you have<font color="#CCCCCC"> to know that</font>

156
00:05:57,979 --> 00:06:02,450
it's going<font color="#E5E5E5"> to be able to execute within</font>

157
00:05:59,090 --> 00:06:03,950
the memory<font color="#E5E5E5"> that you have so as I go</font>

158
00:06:02,450 --> 00:06:06,349
through<font color="#E5E5E5"> this presentation I'll take this</font>

159
00:06:03,950 --> 00:06:08,690
<font color="#E5E5E5">out</font><font color="#CCCCCC"> the application I</font><font color="#E5E5E5"> will show here and</font>

160
00:06:06,350 --> 00:06:10,400
I'll<font color="#E5E5E5"> build up the defenses</font><font color="#CCCCCC"> around it so</font>

161
00:06:08,690 --> 00:06:13,910
here I'm showing<font color="#E5E5E5"> again that applications</font>

162
00:06:10,400 --> 00:06:15,500
<font color="#E5E5E5">memory space with the everything is</font>

163
00:06:13,910 --> 00:06:18,050
privileged<font color="#E5E5E5"> right and everything is</font>

164
00:06:15,500 --> 00:06:20,210
accessible<font color="#E5E5E5"> so so go</font><font color="#CCCCCC"> through the defenses</font>

165
00:06:18,050 --> 00:06:23,300
all change colors and add to the

166
00:06:20,210 --> 00:06:25,010
defenses<font color="#E5E5E5"> and show how they work so the</font>

167
00:06:23,300 --> 00:06:27,320
first approach<font color="#CCCCCC"> that we believe perform</font>

168
00:06:25,010 --> 00:06:28,750
is called<font color="#E5E5E5"> privilege overlay this creates</font>

169
00:06:27,320 --> 00:06:31,760
the multiple privilege lairs it's all a

170
00:06:28,750 --> 00:06:34,220
result<font color="#CCCCCC"> it enables a developer to assume</font>

171
00:06:31,760 --> 00:06:35,810
access to all memory locations<font color="#E5E5E5"> so the</font>

172
00:06:34,220 --> 00:06:39,249
developers<font color="#E5E5E5"> developing an application for</font>

173
00:06:35,810 --> 00:06:40,599
<font color="#E5E5E5">these systems they have all this F</font>

174
00:06:39,249 --> 00:06:43,269
<font color="#E5E5E5">Kayson has to manage all the hardware</font>

175
00:06:40,599 --> 00:06:44,498
<font color="#E5E5E5">needs to be able to access it but for</font>

176
00:06:43,269 --> 00:06:46,779
security<font color="#E5E5E5"> requirements we</font><font color="#CCCCCC"> need to</font>

177
00:06:44,499 --> 00:06:48,609
restrict<font color="#CCCCCC"> access to some of this</font><font color="#E5E5E5"> so that</font>

178
00:06:46,779 --> 00:06:50,319
<font color="#CCCCCC">it's not trivially bypassed</font><font color="#E5E5E5"> for example</font>

179
00:06:48,609 --> 00:06:51,909
the memory protection unit<font color="#E5E5E5"> if the</font>

180
00:06:50,319 --> 00:06:54,309
developer enables it<font color="#E5E5E5"> but we leave</font>

181
00:06:51,909 --> 00:06:56,259
<font color="#E5E5E5">everything is privileged then it's too</font>

182
00:06:54,309 --> 00:06:57,909
easily turned off<font color="#E5E5E5"> however this one</font>

183
00:06:56,259 --> 00:07:01,029
application has to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to enable the</font>

184
00:06:57,909 --> 00:07:03,069
memory protection unit<font color="#CCCCCC"> so the way we do</font>

185
00:07:01,029 --> 00:07:05,979
this<font color="#CCCCCC"> is we let</font><font color="#E5E5E5"> the developer assume</font>

186
00:07:03,069 --> 00:07:08,499
access to everything within you static

187
00:07:05,979 --> 00:07:11,878
analysis to<font color="#CCCCCC"> identify any privileged</font>

188
00:07:08,499 --> 00:07:14,110
operation so a privileged operations<font color="#E5E5E5"> are</font>

189
00:07:11,879 --> 00:07:15,399
instructions that<font color="#CCCCCC"> are defined by the</font>

190
00:07:14,110 --> 00:07:17,409
architecture<font color="#E5E5E5"> that have to have</font>

191
00:07:15,399 --> 00:07:20,079
privileges to execute an example to be

192
00:07:17,409 --> 00:07:22,989
<font color="#E5E5E5">enabling and disabling interrupts and</font>

193
00:07:20,079 --> 00:07:26,889
then we also identify access to any of

194
00:07:22,989 --> 00:07:28,239
<font color="#E5E5E5">these peripherals that</font><font color="#CCCCCC"> are required</font>

195
00:07:26,889 --> 00:07:29,679
privileges for example the memory

196
00:07:28,239 --> 00:07:31,899
protection configuration unit or

197
00:07:29,679 --> 00:07:35,188
developer<font color="#E5E5E5"> defined sensitive i/o so these</font>

198
00:07:31,899 --> 00:07:38,709
again are<font color="#E5E5E5"> fixed memory locations where</font>

199
00:07:35,189 --> 00:07:41,919
the where you read and write<font color="#CCCCCC"> to</font><font color="#E5E5E5"> access</font>

200
00:07:38,709 --> 00:07:43,419
<font color="#E5E5E5">these peripherals so our static analysis</font>

201
00:07:41,919 --> 00:07:45,789
identifies these reads and writes and

202
00:07:43,419 --> 00:07:47,438
automatically elevates privileges<font color="#E5E5E5"> to do</font>

203
00:07:45,789 --> 00:07:50,860
<font color="#E5E5E5">this we inject several different pieces</font>

204
00:07:47,439 --> 00:07:52,749
<font color="#CCCCCC">of code with epoxy so we configure the</font>

205
00:07:50,860 --> 00:07:54,759
memory protection unit this<font color="#E5E5E5"> is code</font>

206
00:07:52,749 --> 00:07:56,829
that's<font color="#CCCCCC"> injected automatically by the</font>

207
00:07:54,759 --> 00:07:59,409
compiler<font color="#E5E5E5"> it enforces death or data</font>

208
00:07:56,829 --> 00:08:02,049
execution prevention and research access

209
00:07:59,409 --> 00:08:05,079
to these sensitive peripherals or

210
00:08:02,049 --> 00:08:07,149
sensitive registers we reduce the

211
00:08:05,079 --> 00:08:08,469
executions privileges of the entire

212
00:08:07,149 --> 00:08:10,749
application<font color="#E5E5E5"> which kicks the whole</font>

213
00:08:08,469 --> 00:08:13,449
<font color="#CCCCCC">application out of</font><font color="#E5E5E5"> privileged mode and</font>

214
00:08:10,749 --> 00:08:15,639
then<font color="#E5E5E5"> we insert</font><font color="#CCCCCC"> requests to around</font>

215
00:08:13,449 --> 00:08:17,679
restricted operations<font color="#E5E5E5"> and then we</font>

216
00:08:15,639 --> 00:08:19,599
elevate those we have a handler we<font color="#E5E5E5"> check</font>

217
00:08:17,679 --> 00:08:20,708
the handler to<font color="#E5E5E5"> handle those requests so</font>

218
00:08:19,599 --> 00:08:22,569
<font color="#E5E5E5">I'll go through an</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> show how this</font>

219
00:08:20,709 --> 00:08:25,449
happens so in this<font color="#CCCCCC"> example</font><font color="#E5E5E5"> the orange</font>

220
00:08:22,569 --> 00:08:27,999
denotes privileged execution and we've

221
00:08:25,449 --> 00:08:30,399
got a UART<font color="#E5E5E5"> that is located at</font><font color="#CCCCCC"> the</font>

222
00:08:27,999 --> 00:08:31,749
<font color="#CCCCCC">address</font><font color="#E5E5E5"> dead beef and</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> reading</font><font color="#CCCCCC"> from</font>

223
00:08:30,399 --> 00:08:34,269
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you are</font><font color="#CCCCCC"> this is a sensitive</font>

224
00:08:31,749 --> 00:08:35,949
operation so when we apply privileged

225
00:08:34,269 --> 00:08:37,240
<font color="#E5E5E5">operations the</font><font color="#CCCCCC"> first thing we'll do will</font>

226
00:08:35,948 --> 00:08:39,308
kick the application out<font color="#CCCCCC"> of privileged</font>

227
00:08:37,240 --> 00:08:43,389
mode<font color="#E5E5E5"> so blue denotes</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> privileged</font>

228
00:08:39,308 --> 00:08:45,610
execution then we will the static

229
00:08:43,389 --> 00:08:47,079
analysis will identify<font color="#E5E5E5"> that this read to</font>

230
00:08:45,610 --> 00:08:50,769
this fixed<font color="#E5E5E5"> address</font>

231
00:08:47,079 --> 00:08:52,189
is sensitive<font color="#CCCCCC"> so we'll insert</font><font color="#E5E5E5"> a request</font>

232
00:08:50,769 --> 00:08:54,020
for privileges just<font color="#E5E5E5"> preceding</font>

233
00:08:52,190 --> 00:08:55,820
it will drop privileges immediately

234
00:08:54,020 --> 00:08:58,460
after<font color="#E5E5E5"> which results in just a</font><font color="#CCCCCC"> small</font>

235
00:08:55,820 --> 00:09:01,490
orange section<font color="#E5E5E5"> with privileges executing</font>

236
00:08:58,460 --> 00:09:03,290
so as you<font color="#E5E5E5"> can see we reduce drastically</font>

237
00:09:01,490 --> 00:09:07,940
the amount of operations that<font color="#E5E5E5"> require</font>

238
00:09:03,290 --> 00:09:09,380
privileges<font color="#CCCCCC"> and enable this operation</font>

239
00:09:07,940 --> 00:09:12,230
<font color="#CCCCCC">than just this operation to occur with</font>

240
00:09:09,380 --> 00:09:14,720
privileges<font color="#CCCCCC"> so after applying privilege</font>

241
00:09:12,230 --> 00:09:17,000
overlay<font color="#E5E5E5"> if we tie this back to desktops</font>

242
00:09:14,720 --> 00:09:19,160
<font color="#E5E5E5">we have enabled death we have data</font>

243
00:09:17,000 --> 00:09:21,620
execution prevention<font color="#CCCCCC"> this means that</font><font color="#E5E5E5"> our</font>

244
00:09:19,160 --> 00:09:24,050
<font color="#CCCCCC">RAM or our global data and</font><font color="#E5E5E5"> our stack are</font>

245
00:09:21,620 --> 00:09:26,000
set to read<font color="#CCCCCC"> write</font><font color="#E5E5E5"> know execute you can't</font>

246
00:09:24,050 --> 00:09:29,240
execute<font color="#E5E5E5"> them stat code injection has</font>

247
00:09:26,000 --> 00:09:30,800
<font color="#E5E5E5">been stopped we in our code our code is</font>

248
00:09:29,240 --> 00:09:32,630
set to read execute it's no longer

249
00:09:30,800 --> 00:09:35,959
writable<font color="#CCCCCC"> and this provides our</font><font color="#E5E5E5"> code</font>

250
00:09:32,630 --> 00:09:37,700
integrity<font color="#CCCCCC"> and there are some</font><font color="#E5E5E5"> small areas</font>

251
00:09:35,960 --> 00:09:40,640
<font color="#CCCCCC">which</font><font color="#E5E5E5"> require privileges</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> the rest of</font>

252
00:09:37,700 --> 00:09:43,370
<font color="#CCCCCC">it's unprivileged</font><font color="#E5E5E5"> execution and finally</font>

253
00:09:40,640 --> 00:09:46,850
any sensitive i/o is also<font color="#E5E5E5"> restricted to</font>

254
00:09:43,370 --> 00:09:49,100
privileged privileged<font color="#E5E5E5"> execution the</font>

255
00:09:46,850 --> 00:09:51,560
further<font color="#E5E5E5"> protected system we apply</font>

256
00:09:49,100 --> 00:09:54,140
defenses against<font color="#CCCCCC"> Rafa tack</font><font color="#E5E5E5"> we use</font><font color="#CCCCCC"> state</font>

257
00:09:51,560 --> 00:09:56,510
stack and diversification<font color="#CCCCCC"> save stack is</font>

258
00:09:54,140 --> 00:10:00,680
from the code pointer integrity project

259
00:09:56,510 --> 00:10:02,990
<font color="#CCCCCC">from</font><font color="#E5E5E5"> OSD I in 2014 it protects against</font>

260
00:10:00,680 --> 00:10:05,239
<font color="#E5E5E5">stack smashing the way it works is it</font>

261
00:10:02,990 --> 00:10:06,980
<font color="#CCCCCC">takes those static analysis on the</font>

262
00:10:05,240 --> 00:10:09,140
program identifies any variables that

263
00:10:06,980 --> 00:10:12,200
<font color="#E5E5E5">are unsafe and moves them</font><font color="#CCCCCC"> to a separate</font>

264
00:10:09,140 --> 00:10:15,260
unsafe stack an unsafe variable is a

265
00:10:12,200 --> 00:10:16,610
variable that<font color="#E5E5E5"> either</font><font color="#CCCCCC"> its address escapes</font>

266
00:10:15,260 --> 00:10:19,850
<font color="#CCCCCC">the bounds of the</font><font color="#E5E5E5"> current</font><font color="#CCCCCC"> function or</font>

267
00:10:16,610 --> 00:10:22,250
it's used in<font color="#E5E5E5"> a pointer arithmetic in a</font>

268
00:10:19,850 --> 00:10:24,680
way that we can't prove is safe<font color="#E5E5E5"> and then</font>

269
00:10:22,250 --> 00:10:27,260
only<font color="#E5E5E5"> those functions which use variables</font>

270
00:10:24,680 --> 00:10:30,020
that are unsafe actually use<font color="#E5E5E5"> a the</font>

271
00:10:27,260 --> 00:10:33,410
unsafe stack<font color="#E5E5E5"> frame so the problem is</font>

272
00:10:30,020 --> 00:10:36,260
<font color="#CCCCCC">that relied on</font><font color="#E5E5E5"> virtual memory we don't</font>

273
00:10:33,410 --> 00:10:37,490
have that so we<font color="#CCCCCC"> have adapted it to</font><font color="#E5E5E5"> this</font>

274
00:10:36,260 --> 00:10:39,770
bare metal systems the way we've done

275
00:10:37,490 --> 00:10:42,890
<font color="#CCCCCC">that</font><font color="#E5E5E5"> safe stacks of split stack approach</font>

276
00:10:39,770 --> 00:10:45,170
so split<font color="#E5E5E5"> into two two parts we move the</font>

277
00:10:42,890 --> 00:10:46,970
unsafe stack to<font color="#CCCCCC"> the top of memory</font><font color="#E5E5E5"> change</font>

278
00:10:45,170 --> 00:10:49,880
its direction<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> it's growing away</font>

279
00:10:46,970 --> 00:10:51,170
from global data we use the<font color="#CCCCCC"> MPU to</font>

280
00:10:49,880 --> 00:10:52,850
configure<font color="#E5E5E5"> our guard region which is</font>

281
00:10:51,170 --> 00:10:57,140
<font color="#E5E5E5">inaccessible to both privileged and</font>

282
00:10:52,850 --> 00:10:59,510
unprivileged<font color="#E5E5E5"> execution so in this way we</font>

283
00:10:57,140 --> 00:11:01,100
have<font color="#CCCCCC"> a separate region for the unsafe</font>

284
00:10:59,510 --> 00:11:02,960
stack<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> a separate reason for the</font>

285
00:11:01,100 --> 00:11:05,270
stack we've isolated<font color="#CCCCCC"> all</font><font color="#E5E5E5"> on</font>

286
00:11:02,960 --> 00:11:06,680
<font color="#CCCCCC">they flew globals</font><font color="#E5E5E5"> up into the unsafe</font>

287
00:11:05,270 --> 00:11:08,090
<font color="#E5E5E5">deck region and then</font><font color="#CCCCCC"> the further</font>

288
00:11:06,680 --> 00:11:10,550
protection we apply<font color="#CCCCCC"> some diversification</font>

289
00:11:08,090 --> 00:11:14,330
<font color="#CCCCCC">so the way that we apply diversification</font>

290
00:11:10,550 --> 00:11:17,569
is<font color="#CCCCCC"> epoxy takes a seed based</font><font color="#E5E5E5"> off that</font><font color="#CCCCCC"> CD</font>

291
00:11:14,330 --> 00:11:20,450
generates a unique binary<font color="#E5E5E5"> when we look</font>

292
00:11:17,570 --> 00:11:22,820
inside<font color="#E5E5E5"> this binary we have the RAM and</font>

293
00:11:20,450 --> 00:11:25,070
it's a green area<font color="#E5E5E5"> we've got unused</font>

294
00:11:22,820 --> 00:11:26,930
memory<font color="#CCCCCC"> we take</font><font color="#E5E5E5"> that unused memory we</font>

295
00:11:25,070 --> 00:11:28,820
break it<font color="#E5E5E5"> up into five chunks of</font><font color="#CCCCCC"> patty</font>

296
00:11:26,930 --> 00:11:30,410
these five<font color="#E5E5E5"> chunks of padding we</font>

297
00:11:28,820 --> 00:11:32,360
distribute throughout<font color="#E5E5E5"> the remainder</font><font color="#CCCCCC"> of</font>

298
00:11:30,410 --> 00:11:34,910
the application<font color="#E5E5E5"> portion goes to</font>

299
00:11:32,360 --> 00:11:37,550
<font color="#E5E5E5">providing at randomization to the stack</font>

300
00:11:34,910 --> 00:11:40,640
address part of<font color="#E5E5E5"> it combined with the</font>

301
00:11:37,550 --> 00:11:43,189
data<font color="#E5E5E5"> the BSS and then between the heap</font>

302
00:11:40,640 --> 00:11:44,750
and<font color="#CCCCCC"> the unsafe stack when we look in the</font>

303
00:11:43,190 --> 00:11:47,270
data<font color="#E5E5E5"> section</font><font color="#CCCCCC"> there's a number of global</font>

304
00:11:44,750 --> 00:11:49,520
variables in this example is get<font color="#CCCCCC"> ABCD</font>

305
00:11:47,270 --> 00:11:50,750
those are randomized<font color="#E5E5E5"> along with that</font>

306
00:11:49,520 --> 00:11:53,689
padding to help<font color="#E5E5E5"> increase the entropy</font>

307
00:11:50,750 --> 00:11:57,730
<font color="#CCCCCC">that we can create with this the BSS is</font>

308
00:11:53,690 --> 00:12:00,230
randomized in a similar manner<font color="#E5E5E5"> this</font>

309
00:11:57,730 --> 00:12:03,980
<font color="#E5E5E5">diversifies the ramp diversity the code</font>

310
00:12:00,230 --> 00:12:06,020
we<font color="#E5E5E5"> have functions foo bar Baz r2 and foo</font>

311
00:12:03,980 --> 00:12:08,180
first thing we do is we inject a handler

312
00:12:06,020 --> 00:12:11,060
this will<font color="#E5E5E5"> to handle any inappropriate</font>

313
00:12:08,180 --> 00:12:12,349
execution<font color="#E5E5E5"> we then fill the rest of</font>

314
00:12:11,060 --> 00:12:14,989
memory with jumps to this handler

315
00:12:12,350 --> 00:12:16,850
<font color="#E5E5E5">essentially single byte instruction or</font>

316
00:12:14,990 --> 00:12:18,800
<font color="#E5E5E5">four byte instructions which jump to the</font>

317
00:12:16,850 --> 00:12:22,700
handler<font color="#CCCCCC"> we randomize the location of</font>

318
00:12:18,800 --> 00:12:24,050
everything which enables<font color="#CCCCCC"> any-any this</font>

319
00:12:22,700 --> 00:12:26,990
random with all the locations<font color="#E5E5E5"> of all</font><font color="#CCCCCC"> the</font>

320
00:12:24,050 --> 00:12:28,250
<font color="#E5E5E5">Rob gadgets in the code and if execution</font>

321
00:12:26,990 --> 00:12:30,230
ever goes<font color="#CCCCCC"> to a place</font><font color="#E5E5E5"> which isn't</font>

322
00:12:28,250 --> 00:12:33,200
<font color="#E5E5E5">expected</font><font color="#CCCCCC"> to execute it will go to the</font>

323
00:12:30,230 --> 00:12:36,170
<font color="#CCCCCC">tangler enabling it to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> detected so</font>

324
00:12:33,200 --> 00:12:38,780
after applying<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these defenses</font><font color="#CCCCCC"> we</font>

325
00:12:36,170 --> 00:12:41,030
<font color="#E5E5E5">have unlocked</font><font color="#CCCCCC"> I saluted</font><font color="#E5E5E5"> unsafe locals to</font>

326
00:12:38,780 --> 00:12:43,730
their own separate stack<font color="#E5E5E5"> the global data</font>

327
00:12:41,030 --> 00:12:45,709
<font color="#E5E5E5">is</font><font color="#CCCCCC"> protected stack smashing has been</font>

328
00:12:43,730 --> 00:12:47,360
prevented on the sacrificed a stack<font color="#E5E5E5"> we</font>

329
00:12:45,710 --> 00:12:48,850
have<font color="#E5E5E5"> Rob protections from</font><font color="#CCCCCC"> diversity and</font>

330
00:12:47,360 --> 00:12:51,500
<font color="#E5E5E5">Rob</font>

331
00:12:48,850 --> 00:12:52,790
well it's essential for with all of

332
00:12:51,500 --> 00:12:56,320
these protections enabled we now have

333
00:12:52,790 --> 00:12:58,760
protections against<font color="#E5E5E5"> Rob code injection</font>

334
00:12:56,320 --> 00:13:02,020
<font color="#E5E5E5">access to global specific global</font>

335
00:12:58,760 --> 00:13:04,160
variables and access to<font color="#E5E5E5"> sensitive i/o</font>

336
00:13:02,020 --> 00:13:07,160
<font color="#CCCCCC">it's important though for</font><font color="#E5E5E5"> these systems</font>

337
00:13:04,160 --> 00:13:09,140
<font color="#CCCCCC">that they have</font><font color="#E5E5E5"> small overhead</font><font color="#CCCCCC"> in</font>

338
00:13:07,160 --> 00:13:10,850
performance so to evaluate<font color="#CCCCCC"> this we</font>

339
00:13:09,140 --> 00:13:13,100
evaluated the<font color="#CCCCCC"> Beeb's benchmarks which is</font>

340
00:13:10,850 --> 00:13:14,769
a suite of 76 different<font color="#E5E5E5"> applications</font>

341
00:13:13,100 --> 00:13:16,839
that<font color="#CCCCCC"> are adapted to measure</font>

342
00:13:14,769 --> 00:13:19,029
performance on bare metal<font color="#E5E5E5"> applications</font>

343
00:13:16,839 --> 00:13:21,629
we evaluate 75 of<font color="#E5E5E5"> these one</font><font color="#CCCCCC"> of them</font>

344
00:13:19,029 --> 00:13:24,699
allocate more memory than my system has

345
00:13:21,629 --> 00:13:28,089
so then in these<font color="#CCCCCC"> tables we've got</font>

346
00:13:24,699 --> 00:13:29,889
<font color="#CCCCCC">runtime on</font><font color="#E5E5E5"> top power</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the bottom SS is</font>

347
00:13:28,089 --> 00:13:32,199
safe stack only<font color="#E5E5E5"> so value binaries with</font>

348
00:13:29,889 --> 00:13:36,509
only<font color="#CCCCCC"> 50</font><font color="#E5E5E5"> occupies second ones</font><font color="#CCCCCC"> privilege</font>

349
00:13:32,199 --> 00:13:36,508
overlay<font color="#CCCCCC"> the</font><font color="#E5E5E5"> center column which has</font>

350
00:13:37,379 --> 00:13:41,769
we've only<font color="#E5E5E5"> applied privilege over</font>

351
00:13:39,399 --> 00:13:44,860
England all the defenses on the far

352
00:13:41,769 --> 00:13:48,420
right column<font color="#CCCCCC"> from</font><font color="#E5E5E5"> it you can see that</font>

353
00:13:44,860 --> 00:13:52,779
our average<font color="#E5E5E5"> we average one around</font><font color="#CCCCCC"> 1%</font><font color="#E5E5E5"> for</font>

354
00:13:48,420 --> 00:13:55,839
overhead and our powers about 2.2

355
00:13:52,779 --> 00:13:59,470
percent<font color="#E5E5E5"> we also tested</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> IOT</font>

356
00:13:55,839 --> 00:14:01,720
applications<font color="#E5E5E5"> these applications</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> you</font>

357
00:13:59,470 --> 00:14:05,920
can see that<font color="#E5E5E5"> there they always use under</font>

358
00:14:01,720 --> 00:14:07,480
<font color="#CCCCCC">10%</font><font color="#E5E5E5"> of energy or runtime and we'll see</font>

359
00:14:05,920 --> 00:14:09,339
and that<font color="#E5E5E5"> the energy and runtime are</font>

360
00:14:07,480 --> 00:14:12,489
highly correlated with<font color="#CCCCCC"> the exception of</font>

361
00:14:09,339 --> 00:14:14,319
the pin lock or the first<font color="#E5E5E5"> one that it's</font>

362
00:14:12,489 --> 00:14:17,499
<font color="#E5E5E5">blocking on i/o is reading from a</font><font color="#CCCCCC"> new</font>

363
00:14:14,319 --> 00:14:19,449
serial port<font color="#E5E5E5"> and because of that</font><font color="#CCCCCC"> the</font>

364
00:14:17,499 --> 00:14:21,689
execution<font color="#CCCCCC"> time gets hidden but the</font>

365
00:14:19,449 --> 00:14:24,790
<font color="#E5E5E5">energy distribution</font><font color="#CCCCCC"> does not get hidden</font>

366
00:14:21,689 --> 00:14:26,290
<font color="#E5E5E5">we have very</font><font color="#CCCCCC"> limited ability</font><font color="#E5E5E5"> to make</font>

367
00:14:24,790 --> 00:14:27,639
entropy on these<font color="#E5E5E5"> systems we have very</font>

368
00:14:26,290 --> 00:14:29,498
little memory<font color="#E5E5E5"> so we want to understand</font>

369
00:14:27,639 --> 00:14:33,129
how<font color="#CCCCCC"> Roth attacks</font><font color="#E5E5E5"> would work on these</font>

370
00:14:29,499 --> 00:14:34,269
<font color="#CCCCCC">systems so to do this we compiled a</font>

371
00:14:33,129 --> 00:14:36,399
thousand variants of each of these

372
00:14:34,269 --> 00:14:40,119
<font color="#CCCCCC">applications</font><font color="#E5E5E5"> and then we looked at how</font>

373
00:14:36,399 --> 00:14:44,740
<font color="#CCCCCC">many gadgets was existed</font><font color="#E5E5E5"> across all a</font>

374
00:14:40,119 --> 00:14:46,839
given number<font color="#CCCCCC"> of variants so in the</font>

375
00:14:44,740 --> 00:14:48,639
<font color="#CCCCCC">center we've got you know the two column</font>

376
00:14:46,839 --> 00:14:51,970
represents the two<font color="#E5E5E5"> gadgets survived and</font>

377
00:14:48,639 --> 00:14:54,509
then last represents the<font color="#E5E5E5"> number at which</font>

378
00:14:51,970 --> 00:14:57,819
the last gadget survived across<font color="#E5E5E5"> two</font>

379
00:14:54,509 --> 00:15:01,209
variants<font color="#E5E5E5"> so for the worst case we have</font>

380
00:14:57,819 --> 00:15:04,089
around<font color="#E5E5E5"> 107 so around</font><font color="#CCCCCC"> 10% there was 10%</font>

381
00:15:01,209 --> 00:15:06,128
<font color="#E5E5E5">of the gear or 10%</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the variance will</font>

382
00:15:04,089 --> 00:15:09,160
<font color="#CCCCCC">be have be</font><font color="#E5E5E5"> able to be attacked by one</font>

383
00:15:06,129 --> 00:15:11,559
gadget<font color="#CCCCCC"> and since gadgets or Roth attacks</font>

384
00:15:09,160 --> 00:15:13,329
usually<font color="#E5E5E5"> require multiple gadgets</font><font color="#CCCCCC"> the</font>

385
00:15:11,559 --> 00:15:15,309
ability<font color="#CCCCCC"> to create a good Roth attack</font>

386
00:15:13,329 --> 00:15:17,049
<font color="#E5E5E5">that's scaled across a large set of</font>

387
00:15:15,309 --> 00:15:21,009
<font color="#CCCCCC">devices would be greatly hindered by the</font>

388
00:15:17,049 --> 00:15:23,769
application of epoxy<font color="#CCCCCC"> then we want</font><font color="#E5E5E5"> to</font>

389
00:15:21,009 --> 00:15:24,970
compare how many privileged instructions

390
00:15:23,769 --> 00:15:26,830
we execute to do this

391
00:15:24,970 --> 00:15:28,840
took<font color="#E5E5E5"> free</font><font color="#CCCCCC"> artists which is a very common</font>

392
00:15:26,830 --> 00:15:32,140
operating system used for<font color="#E5E5E5"> bare metal</font>

393
00:15:28,840 --> 00:15:34,360
systems<font color="#CCCCCC"> it has a secure version</font><font color="#E5E5E5"> it's</font>

394
00:15:32,140 --> 00:15:36,310
very infrequently used that uses the

395
00:15:34,360 --> 00:15:40,120
memory protection unit to apply some

396
00:15:36,310 --> 00:15:42,160
<font color="#E5E5E5">coding data execution prevention</font>

397
00:15:40,120 --> 00:15:43,690
however by default configuration<font color="#E5E5E5"> it</font>

398
00:15:42,160 --> 00:15:45,579
doesn't even do that

399
00:15:43,690 --> 00:15:48,460
<font color="#E5E5E5">so we've poured the applications to free</font>

400
00:15:45,580 --> 00:15:50,170
<font color="#CCCCCC">archive MTU</font><font color="#E5E5E5"> and you find that we use the</font>

401
00:15:48,460 --> 00:15:53,020
well under<font color="#CCCCCC"> 1%</font><font color="#E5E5E5"> of instructions are</font>

402
00:15:50,170 --> 00:15:55,599
privileged and<font color="#E5E5E5"> free our custom</font><font color="#CCCCCC"> view</font>

403
00:15:53,020 --> 00:15:57,970
around<font color="#E5E5E5"> 95%</font><font color="#CCCCCC"> required privileges</font><font color="#E5E5E5"> this is</font>

404
00:15:55,600 --> 00:15:59,620
because free<font color="#CCCCCC"> artists requires that if</font>

405
00:15:57,970 --> 00:16:02,650
any instruction uses privileges the

406
00:15:59,620 --> 00:16:05,860
entire thread<font color="#E5E5E5"> also requires privileges</font>

407
00:16:02,650 --> 00:16:08,709
<font color="#E5E5E5">in conclusion we</font><font color="#CCCCCC"> fast forward bare-metal</font>

408
00:16:05,860 --> 00:16:10,600
security<font color="#E5E5E5"> three decades by recompiling</font><font color="#CCCCCC"> an</font>

409
00:16:08,710 --> 00:16:12,340
application we've provide

410
00:16:10,600 --> 00:16:13,930
state-of-the-art protections which are

411
00:16:12,340 --> 00:16:17,620
<font color="#E5E5E5">comparable or exceed those currently</font>

412
00:16:13,930 --> 00:16:19,630
deployed on<font color="#CCCCCC"> the desktop we don't</font><font color="#E5E5E5"> require</font>

413
00:16:17,620 --> 00:16:22,090
rewriting<font color="#CCCCCC"> an application</font><font color="#E5E5E5"> provide song</font>

414
00:16:19,630 --> 00:16:24,340
<font color="#E5E5E5">track protections vice an adapted safe</font>

415
00:16:22,090 --> 00:16:26,320
stack minimize the number of privileged

416
00:16:24,340 --> 00:16:27,820
instructions executed and diversify all

417
00:16:26,320 --> 00:16:30,370
memory<font color="#E5E5E5"> we also meet the runtime</font>

418
00:16:27,820 --> 00:16:32,680
<font color="#CCCCCC">requirements for bare metal systems and</font>

419
00:16:30,370 --> 00:16:34,450
memory and energy we've also open

420
00:16:32,680 --> 00:16:47,069
sources our compiler is available the

421
00:16:34,450 --> 00:16:47,070
following<font color="#E5E5E5"> location any questions</font><font color="#CCCCCC"> legend</font>

422
00:16:49,880 --> 00:16:55,670
I am<font color="#CCCCCC"> Veloz NXP Semiconductors so I was</font>

423
00:16:54,140 --> 00:16:57,980
<font color="#CCCCCC">interested in the performance figures</font>

424
00:16:55,670 --> 00:17:02,900
that you<font color="#E5E5E5"> showed we're actually using</font>

425
00:16:57,980 --> 00:17:04,790
epoxy gave improvement<font color="#E5E5E5"> or how should I</font>

426
00:17:02,900 --> 00:17:08,839
see these<font color="#E5E5E5"> figures and can you explain</font>

427
00:17:04,790 --> 00:17:10,609
why<font color="#E5E5E5"> okay so it's a diversifying compiler</font>

428
00:17:08,839 --> 00:17:13,579
so the instructions change from<font color="#E5E5E5"> each</font>

429
00:17:10,609 --> 00:17:17,569
<font color="#CCCCCC">binary and so the way we did an</font>

430
00:17:13,579 --> 00:17:19,250
improvement or<font color="#CCCCCC"> speed-up is sometimes by</font>

431
00:17:17,569 --> 00:17:20,599
randomizing<font color="#E5E5E5"> locations of functions it</font>

432
00:17:19,250 --> 00:17:23,300
enables the compiler<font color="#E5E5E5"> to identify</font>

433
00:17:20,599 --> 00:17:24,619
additional<font color="#E5E5E5"> optimizations</font><font color="#CCCCCC"> the other</font>

434
00:17:23,300 --> 00:17:26,389
things that occurs is sometimes you have

435
00:17:24,619 --> 00:17:28,250
long jumps and short jumps essentially

436
00:17:26,390 --> 00:17:29,750
it would require a<font color="#E5E5E5"> different number of</font>

437
00:17:28,250 --> 00:17:33,340
instructions so by randomizing<font color="#CCCCCC"> the</font>

438
00:17:29,750 --> 00:17:36,460
binary we obtain a different mixture<font color="#E5E5E5"> of</font>

439
00:17:33,340 --> 00:17:42,590
basically immediate addressing<font color="#CCCCCC"> versus</font>

440
00:17:36,460 --> 00:17:45,650
absolute addressing okay thank you so I

441
00:17:42,590 --> 00:17:47,959
also have a quick<font color="#CCCCCC"> question when</font><font color="#E5E5E5"> you add</font>

442
00:17:45,650 --> 00:17:51,530
any when<font color="#E5E5E5"> you are identifying sensitive</font>

443
00:17:47,960 --> 00:17:53,090
operations<font color="#CCCCCC"> do you need</font><font color="#E5E5E5"> users to annotate</font>

444
00:17:51,530 --> 00:17:56,210
<font color="#E5E5E5">the code to tell you where sensitive</font>

445
00:17:53,090 --> 00:17:59,090
data is so<font color="#E5E5E5"> I in an hour</font>

446
00:17:56,210 --> 00:18:01,520
currently all the sensitive operations

447
00:17:59,090 --> 00:18:02,959
are accesses to peripherals which have

448
00:18:01,520 --> 00:18:05,900
<font color="#E5E5E5">fixed addresses that</font><font color="#CCCCCC"> are set in</font><font color="#E5E5E5"> the</font>

449
00:18:02,960 --> 00:18:07,460
<font color="#E5E5E5">hardware so for those that are specific</font>

450
00:18:05,900 --> 00:18:09,800
to like that<font color="#E5E5E5"> are coming across an</font>

451
00:18:07,460 --> 00:18:13,070
architecture say<font color="#CCCCCC"> arm</font><font color="#E5E5E5"> arm cortex-m</font><font color="#CCCCCC"> force</font>

452
00:18:09,800 --> 00:18:14,750
the<font color="#CCCCCC"> system</font><font color="#E5E5E5"> control blocks have the same</font>

453
00:18:13,070 --> 00:18:16,909
<font color="#E5E5E5">address on all of those those ones are</font>

454
00:18:14,750 --> 00:18:19,100
compiler handled automatically<font color="#E5E5E5"> if I as a</font>

455
00:18:16,910 --> 00:18:21,830
<font color="#CCCCCC">developer say in this act is miss</font>

456
00:18:19,100 --> 00:18:23,659
context<font color="#E5E5E5"> this serial port is sensitive</font><font color="#CCCCCC"> I</font>

457
00:18:21,830 --> 00:18:25,189
want it to be sensitive then you<font color="#E5E5E5"> can</font>

458
00:18:23,660 --> 00:18:28,160
<font color="#E5E5E5">provide</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> to the compiler and it will</font>

459
00:18:25,190 --> 00:18:30,950
<font color="#E5E5E5">include it in its analysis you didn't do</font>

460
00:18:28,160 --> 00:18:35,180
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> experiments as closely</font><font color="#E5E5E5"> the pin</font>

461
00:18:30,950 --> 00:18:37,460
lock<font color="#E5E5E5"> actually applies to the UART</font><font color="#CCCCCC"> in the</font>

462
00:18:35,180 --> 00:18:44,030
pin lock<font color="#CCCCCC"> it senses to find it sensitive</font>

463
00:18:37,460 --> 00:18:45,800
<font color="#E5E5E5">okay thank you any other questions</font><font color="#CCCCCC"> ok</font>

464
00:18:44,030 --> 00:18:52,329
let's thank the speaker<font color="#CCCCCC"> again</font>

465
00:18:45,800 --> 00:18:52,329
[Applause]

