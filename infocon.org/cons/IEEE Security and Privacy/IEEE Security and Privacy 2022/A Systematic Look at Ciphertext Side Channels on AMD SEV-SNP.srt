1
00:00:04,080 --> 00:00:05,040
okay

2
00:00:05,040 --> 00:00:06,720
um

3
00:00:06,720 --> 00:00:08,880
so good afternoon everyone my name is

4
00:00:08,880 --> 00:00:11,920
moyali from the ohio state university

5
00:00:11,920 --> 00:00:14,400
and this is luca worker the co-first

6
00:00:14,400 --> 00:00:15,360
officer

7
00:00:15,360 --> 00:00:17,760
from university of lubeca and it is a

8
00:00:17,760 --> 00:00:20,000
great honor for us to be here to present

9
00:00:20,000 --> 00:00:22,160
our paper a systematic localized civil

10
00:00:22,160 --> 00:00:25,119
tax star channels on amd and cv smp

11
00:00:25,119 --> 00:00:26,960
other authors include yen richmond

12
00:00:26,960 --> 00:00:28,960
thomas esabat from the university of

13
00:00:28,960 --> 00:00:31,519
lubeca and radu tando rescue from the

14
00:00:31,519 --> 00:00:33,920
ohio state university and my advisor in

15
00:00:33,920 --> 00:00:35,600
shenzhen from southern university of

16
00:00:35,600 --> 00:00:38,960
science and technology

17
00:00:39,280 --> 00:00:41,600
okay so in this paper we showed a new

18
00:00:41,600 --> 00:00:44,000
ciphertext side channel that widely

19
00:00:44,000 --> 00:00:45,920
exists in memory encryption based

20
00:00:45,920 --> 00:00:48,480
trusted execution environment and it

21
00:00:48,480 --> 00:00:50,800
challenges the memory encryption method

22
00:00:50,800 --> 00:00:53,760
used in large memory tes and just like

23
00:00:53,760 --> 00:00:55,680
cad style channels the selfie side

24
00:00:55,680 --> 00:00:57,920
channels might be difficult to fix in a

25
00:00:57,920 --> 00:00:59,120
short time

26
00:00:59,120 --> 00:01:01,680
so let's talk about that and let me

27
00:01:01,680 --> 00:01:04,159
introduce more background so trust might

28
00:01:04,159 --> 00:01:06,159
be one of the biggest problem in cloud

29
00:01:06,159 --> 00:01:08,479
computing cloud users cannot trust the

30
00:01:08,479 --> 00:01:10,560
cloud service providers their sensitive

31
00:01:10,560 --> 00:01:13,600
data is in danger and so this actually

32
00:01:13,600 --> 00:01:16,000
restricts many potential cloud computing

33
00:01:16,000 --> 00:01:17,600
scenarios

34
00:01:17,600 --> 00:01:18,640
and

35
00:01:18,640 --> 00:01:20,560
both academia and the industry move

36
00:01:20,560 --> 00:01:22,000
their attention to confidential

37
00:01:22,000 --> 00:01:24,799
computing so confidential computing can

38
00:01:24,799 --> 00:01:26,640
be enabled by some hardware-based

39
00:01:26,640 --> 00:01:29,360
features called the tes and mostly

40
00:01:29,360 --> 00:01:32,159
protect cloud users data against both

41
00:01:32,159 --> 00:01:34,880
privileged software attackers including

42
00:01:34,880 --> 00:01:37,200
a malicious hypervisor and physical

43
00:01:37,200 --> 00:01:38,799
attackers

44
00:01:38,799 --> 00:01:41,119
so there are many existing tes right now

45
00:01:41,119 --> 00:01:43,759
like enclave-based tea and also vm-based

46
00:01:43,759 --> 00:01:46,880
te for vm-based te like amd secure

47
00:01:46,880 --> 00:01:49,040
encrypted virtualization they aiming at

48
00:01:49,040 --> 00:01:51,119
protecting the entire virtual machine so

49
00:01:51,119 --> 00:01:53,040
you don't need to rewrite your code or

50
00:01:53,040 --> 00:01:55,280
you can directly use existing binaries

51
00:01:55,280 --> 00:01:57,680
which is really user friendly

52
00:01:57,680 --> 00:02:00,479
and because of this mds cv has been

53
00:02:00,479 --> 00:02:02,719
already adopted by some cloud service

54
00:02:02,719 --> 00:02:04,799
providers including google cloud and

55
00:02:04,799 --> 00:02:07,520
microsoft azure and ibm cloud

56
00:02:07,520 --> 00:02:10,000
and amd suv is also our main focus for

57
00:02:10,000 --> 00:02:12,080
the paper since it is the only

58
00:02:12,080 --> 00:02:14,400
commercial available with m-based te

59
00:02:14,400 --> 00:02:15,760
right now

60
00:02:15,760 --> 00:02:16,640
okay

61
00:02:16,640 --> 00:02:19,599
then how exactly to protect users data

62
00:02:19,599 --> 00:02:22,400
the key idea is that when data is within

63
00:02:22,400 --> 00:02:25,040
the cpu chip the hardware will provide

64
00:02:25,040 --> 00:02:27,840
isolated and protected environments for

65
00:02:27,840 --> 00:02:30,720
secure data processing but when data

66
00:02:30,720 --> 00:02:33,040
goes out of the cpu chip the memory

67
00:02:33,040 --> 00:02:35,120
encryption seems to be the only way to

68
00:02:35,120 --> 00:02:37,599
protect the data

69
00:02:37,599 --> 00:02:40,080
let's look at how amd sc will achieve

70
00:02:40,080 --> 00:02:41,760
the memory encryption there actually

71
00:02:41,760 --> 00:02:44,319
some restrictions so for example because

72
00:02:44,319 --> 00:02:47,280
the vm's memory is accessed randomly the

73
00:02:47,280 --> 00:02:50,879
memory in scv is encrypted independently

74
00:02:50,879 --> 00:02:54,160
aligned 128 bit block using aes

75
00:02:54,160 --> 00:02:55,840
encryption

76
00:02:55,840 --> 00:02:58,319
and to avoid the malicious hypervisor

77
00:02:58,319 --> 00:03:00,159
inferring the plant hex where the same

78
00:03:00,159 --> 00:03:02,080
cyber tags because it's used aes

79
00:03:02,080 --> 00:03:03,840
encryption

80
00:03:03,840 --> 00:03:06,080
sev introduced an additional physical

81
00:03:06,080 --> 00:03:08,480
address based the tweak function here so

82
00:03:08,480 --> 00:03:11,200
the consequence is also obvious the same

83
00:03:11,200 --> 00:03:13,360
plaintext at different locations will

84
00:03:13,360 --> 00:03:16,239
have different cipher tags but the same

85
00:03:16,239 --> 00:03:18,400
plaintext at the same location will

86
00:03:18,400 --> 00:03:20,720
always have the same cyberattacks during

87
00:03:20,720 --> 00:03:22,879
the vm's life circle

88
00:03:22,879 --> 00:03:25,200
and meanwhile amdsc will also allows

89
00:03:25,200 --> 00:03:27,840
privilege the software to access those

90
00:03:27,840 --> 00:03:29,280
ciphertexts

91
00:03:29,280 --> 00:03:30,879
so in the paper we

92
00:03:30,879 --> 00:03:32,959
raise the following research question

93
00:03:32,959 --> 00:03:34,480
are current cryptographic

94
00:03:34,480 --> 00:03:36,959
implementations running inside a te

95
00:03:36,959 --> 00:03:40,239
still safe when attack has access to the

96
00:03:40,239 --> 00:03:43,519
cipher text of the encrypted memory

97
00:03:43,519 --> 00:03:45,440
the answer is no it's not secure

98
00:03:45,440 --> 00:03:47,360
especially for tes that use

99
00:03:47,360 --> 00:03:49,840
deterministic memory encryption in the

100
00:03:49,840 --> 00:03:51,840
paper we show that the side channel

101
00:03:51,840 --> 00:03:54,000
information caused by those cipher text

102
00:03:54,000 --> 00:03:57,120
changes is sufficient enough to steal

103
00:03:57,120 --> 00:04:00,879
key secrets protected by mds cv

104
00:04:00,879 --> 00:04:03,040
and let's talk about that in detail this

105
00:04:03,040 --> 00:04:05,360
is the outer line i will we will first

106
00:04:05,360 --> 00:04:07,760
introduce two possible attack primitives

107
00:04:07,760 --> 00:04:09,519
and i will begin with the dictionary

108
00:04:09,519 --> 00:04:10,799
attacks

109
00:04:10,799 --> 00:04:13,360
okay so the dictionary attacks targets

110
00:04:13,360 --> 00:04:16,798
at a 128-bit block with fix the physical

111
00:04:16,798 --> 00:04:19,199
address the attacker will try to build a

112
00:04:19,199 --> 00:04:21,839
civil tax and plan hex dictionary and

113
00:04:21,839 --> 00:04:24,560
inferring the secret by repeated server

114
00:04:24,560 --> 00:04:26,479
tax

115
00:04:26,479 --> 00:04:28,479
let's show you a dictionary attack his

116
00:04:28,479 --> 00:04:30,720
study about using some kernel structure

117
00:04:30,720 --> 00:04:33,600
to break ecdsa so when there is os

118
00:04:33,600 --> 00:04:36,240
contact switch the kernel will store the

119
00:04:36,240 --> 00:04:38,160
processes registered in a structure

120
00:04:38,160 --> 00:04:40,400
called pt registers which is a pretty

121
00:04:40,400 --> 00:04:41,520
fixed

122
00:04:41,520 --> 00:04:43,280
structure so we don't need to worry

123
00:04:43,280 --> 00:04:45,440
about the physical address based tweak

124
00:04:45,440 --> 00:04:47,840
function using memory encryption

125
00:04:47,840 --> 00:04:49,759
and the general step is also pretty

126
00:04:49,759 --> 00:04:52,320
straightforward the attack only needs to

127
00:04:52,320 --> 00:04:54,639
intercept the vm at some certain

128
00:04:54,639 --> 00:04:57,680
extrusion points and then recorded the

129
00:04:57,680 --> 00:05:01,039
ciphertext at the pd register region

130
00:05:01,039 --> 00:05:03,520
let's go through this step by step so in

131
00:05:03,520 --> 00:05:06,639
ecdsa constant time implementations and

132
00:05:06,639 --> 00:05:08,400
there is a function called the ec scalar

133
00:05:08,400 --> 00:05:11,360
multiple ladder and we call it target

134
00:05:11,360 --> 00:05:13,440
function2 and its physical address is

135
00:05:13,440 --> 00:05:16,160
gpa2 and inside this function there is a

136
00:05:16,160 --> 00:05:18,160
loop inside the loop it will call

137
00:05:18,160 --> 00:05:21,280
another function called bn speed set

138
00:05:21,280 --> 00:05:24,080
which will be which will get one bit of

139
00:05:24,080 --> 00:05:26,080
the secret nonce k for future

140
00:05:26,080 --> 00:05:29,120
calculation we call b speed set target

141
00:05:29,120 --> 00:05:30,960
function one and its physical address

142
00:05:30,960 --> 00:05:34,160
gpa one and the nonce k is the secret

143
00:05:34,160 --> 00:05:36,800
that the attack wants to steal

144
00:05:36,800 --> 00:05:39,199
okay to intercept the vm at certain

145
00:05:39,199 --> 00:05:41,600
extrusion points the attack first needs

146
00:05:41,600 --> 00:05:44,000
to locate the physical address of these

147
00:05:44,000 --> 00:05:46,400
two target functions here we introduce a

148
00:05:46,400 --> 00:05:48,400
performance counter-base the page level

149
00:05:48,400 --> 00:05:51,120
control channel tool so in this tool the

150
00:05:51,120 --> 00:05:53,600
attack onset all present bits to trigger

151
00:05:53,600 --> 00:05:56,560
nested paid force and meanwhile he will

152
00:05:56,560 --> 00:05:58,639
also collect some performance counter

153
00:05:58,639 --> 00:06:01,120
events like the number of retired

154
00:06:01,120 --> 00:06:03,280
instruction and when combining those

155
00:06:03,280 --> 00:06:05,360
information together the attack can

156
00:06:05,360 --> 00:06:07,919
locate the guest physical address of

157
00:06:07,919 --> 00:06:10,400
either code page or data page very

158
00:06:10,400 --> 00:06:12,960
precisely and on the fly we find this to

159
00:06:12,960 --> 00:06:15,440
pretty useful when intercepted the vm

160
00:06:15,440 --> 00:06:17,039
and you may also find these two in our

161
00:06:17,039 --> 00:06:19,600
github github link

162
00:06:19,600 --> 00:06:22,000
okay after identifying the two target

163
00:06:22,000 --> 00:06:24,000
functions the second step will be

164
00:06:24,000 --> 00:06:26,479
iteratively on set the present bit of

165
00:06:26,479 --> 00:06:28,319
function one and function two to

166
00:06:28,319 --> 00:06:30,800
intercept the vm so as i mentioned

167
00:06:30,800 --> 00:06:32,880
there's a loop the attacker can then

168
00:06:32,880 --> 00:06:35,360
observe nested page faults of function 1

169
00:06:35,360 --> 00:06:37,759
and function 2 the sequence

170
00:06:37,759 --> 00:06:40,400
which effectively affects the vm's

171
00:06:40,400 --> 00:06:42,880
execution for each iteration

172
00:06:42,880 --> 00:06:45,680
and then the last step is to intercept

173
00:06:45,680 --> 00:06:48,240
the wii and is to to get the cipher

174
00:06:48,240 --> 00:06:51,120
attacks at certain execution points

175
00:06:51,120 --> 00:06:53,840
so here in this case study the attack

176
00:06:53,840 --> 00:06:56,080
stopped the vm when he intercepted the

177
00:06:56,080 --> 00:06:58,720
nested page fault of function 2. the

178
00:06:58,720 --> 00:07:01,759
reason is that at this time points bn is

179
00:07:01,759 --> 00:07:02,960
bit set

180
00:07:02,960 --> 00:07:05,440
just the finished execution and the one

181
00:07:05,440 --> 00:07:08,240
bit of the secret is in iax register

182
00:07:08,240 --> 00:07:10,639
right now and the program is trying to

183
00:07:10,639 --> 00:07:12,800
return to the caller function

184
00:07:12,800 --> 00:07:15,440
but since there is a nested page fault

185
00:07:15,440 --> 00:07:18,720
and the the program just cannot return

186
00:07:18,720 --> 00:07:21,440
and after several time and there will be

187
00:07:21,440 --> 00:07:24,479
some time driven interrupt due to

188
00:07:24,479 --> 00:07:27,120
and transfer to the kernel space

189
00:07:27,120 --> 00:07:29,039
and when the attack observed those

190
00:07:29,039 --> 00:07:31,840
interrupts he knows that while it's now

191
00:07:31,840 --> 00:07:34,240
in kernel space the pt register will

192
00:07:34,240 --> 00:07:37,840
store the ix registers and then at this

193
00:07:37,840 --> 00:07:40,319
execution points the attack just record

194
00:07:40,319 --> 00:07:43,840
the cipher attacks of pt registers

195
00:07:43,840 --> 00:07:46,520
and inside the pd register for the

196
00:07:46,520 --> 00:07:50,000
128-bit block containing ix registers

197
00:07:50,000 --> 00:07:52,400
there are only two possible values

198
00:07:52,400 --> 00:07:54,560
either zero or one because it's one bit

199
00:07:54,560 --> 00:07:56,879
of the secret so the attack can very

200
00:07:56,879 --> 00:07:59,280
easily build the dictionary and use

201
00:07:59,280 --> 00:08:02,000
dictionary to break the entire secret to

202
00:08:02,000 --> 00:08:04,560
steal the entire secret okay so that's

203
00:08:04,560 --> 00:08:06,560
one example about how to build a

204
00:08:06,560 --> 00:08:08,800
dictionary and use dictionary to steal

205
00:08:08,800 --> 00:08:12,400
secret from a suv protected vm then luca

206
00:08:12,400 --> 00:08:16,719
will introduce and the collusion attack

207
00:08:18,400 --> 00:08:20,160
thank you very much ming yang and i will

208
00:08:20,160 --> 00:08:22,319
take over now for the rest of the talk

209
00:08:22,319 --> 00:08:24,639
so let's come to you

210
00:08:24,639 --> 00:08:27,280
sorry yeah great so i will take over now

211
00:08:27,280 --> 00:08:29,199
for the rest of the talk let's come to

212
00:08:29,199 --> 00:08:31,280
the collision attack so like in the

213
00:08:31,280 --> 00:08:33,279
previous attack we need to know the code

214
00:08:33,279 --> 00:08:35,519
that the victim is executing as well as

215
00:08:35,519 --> 00:08:37,919
these means to track the state that it's

216
00:08:37,919 --> 00:08:39,839
currently in and the way to intercept it

217
00:08:39,839 --> 00:08:42,479
at certain execution points however now

218
00:08:42,479 --> 00:08:44,640
instead of trying to learn the plaintext

219
00:08:44,640 --> 00:08:46,959
values for certain ciphertexts we are

220
00:08:46,959 --> 00:08:48,959
observing collisions in the memory-wide

221
00:08:48,959 --> 00:08:51,680
patterns of the victim to infer secret

222
00:08:51,680 --> 00:08:54,640
internal state variables so let's take a

223
00:08:54,640 --> 00:08:56,640
look at an example to make things more

224
00:08:56,640 --> 00:08:58,160
clear

225
00:08:58,160 --> 00:08:59,680
so here we have a conditional swap

226
00:08:59,680 --> 00:09:01,120
operation or constant time swap

227
00:09:01,120 --> 00:09:04,320
operation and this code pattern is very

228
00:09:04,320 --> 00:09:06,000
commonly used in constant time

229
00:09:06,000 --> 00:09:08,320
cryptography and what you want to do

230
00:09:08,320 --> 00:09:10,720
here is we have two arrays a and b and

231
00:09:10,720 --> 00:09:13,040
the secret decision bit c and based on

232
00:09:13,040 --> 00:09:14,959
the secret decision bit we either want

233
00:09:14,959 --> 00:09:17,440
to swap the content of these two arrays

234
00:09:17,440 --> 00:09:19,040
or not

235
00:09:19,040 --> 00:09:21,200
and the important property here is that

236
00:09:21,200 --> 00:09:23,600
we always write to these buffers a and b

237
00:09:23,600 --> 00:09:25,760
to achieve this constant term property

238
00:09:25,760 --> 00:09:27,760
and yeah we do this by first building

239
00:09:27,760 --> 00:09:29,760
this selection mask which will either be

240
00:09:29,760 --> 00:09:33,839
0 or hex ff based on the value of c

241
00:09:33,839 --> 00:09:36,480
then we will build this update value by

242
00:09:36,480 --> 00:09:39,600
xoring together a and b and then if the

243
00:09:39,600 --> 00:09:41,279
mask was set to zero we will clear it

244
00:09:41,279 --> 00:09:44,320
again and in the final update step we

245
00:09:44,320 --> 00:09:47,360
then apply this update value to a and b

246
00:09:47,360 --> 00:09:50,640
to a and b and if x was clear to 0 then

247
00:09:50,640 --> 00:09:52,480
obviously we write the same value back

248
00:09:52,480 --> 00:09:54,320
that was already there

249
00:09:54,320 --> 00:09:57,040
but if x still contains this x or value

250
00:09:57,040 --> 00:09:58,800
then the two occurrences of a will

251
00:09:58,800 --> 00:10:00,800
cancel each other out and we write b so

252
00:10:00,800 --> 00:10:02,800
this way we achieve this constant time

253
00:10:02,800 --> 00:10:05,279
property where the right itself does not

254
00:10:05,279 --> 00:10:06,720
reveal

255
00:10:06,720 --> 00:10:09,680
the secret decision with however now

256
00:10:09,680 --> 00:10:11,120
let's take a look at how we can attack

257
00:10:11,120 --> 00:10:13,760
this with our capabilities

258
00:10:13,760 --> 00:10:15,839
and all we need to do here

259
00:10:15,839 --> 00:10:18,480
is to track down when the victim is

260
00:10:18,480 --> 00:10:20,640
about to execute this piece of code and

261
00:10:20,640 --> 00:10:22,560
then we locate these two buffers a and b

262
00:10:22,560 --> 00:10:25,040
into memory and observe the cipher text

263
00:10:25,040 --> 00:10:27,040
and then we let the victim resume and

264
00:10:27,040 --> 00:10:29,279
interrupt it again after this constant

265
00:10:29,279 --> 00:10:31,920
time show up here is done and now by

266
00:10:31,920 --> 00:10:34,160
observing whether the ciphertexts of a

267
00:10:34,160 --> 00:10:36,640
and b have changed or not we immediately

268
00:10:36,640 --> 00:10:38,480
know the secret decision bit there you

269
00:10:38,480 --> 00:10:40,720
see here we don't need to know what's

270
00:10:40,720 --> 00:10:42,880
actually in buffers a and b this white

271
00:10:42,880 --> 00:10:44,800
pattern is enough to leak the secret

272
00:10:44,800 --> 00:10:46,640
internal state

273
00:10:46,640 --> 00:10:48,959
now as i said this is commonly used in

274
00:10:48,959 --> 00:10:51,279
constant time cryptography libraries and

275
00:10:51,279 --> 00:10:53,760
we built an end to end attack

276
00:10:53,760 --> 00:10:57,040
for the eddsa implementation in openssh

277
00:10:57,040 --> 00:10:59,279
where the attacker simply needs to send

278
00:10:59,279 --> 00:11:00,959
a handshake package to your servant and

279
00:11:00,959 --> 00:11:03,200
the server will issue a signature to

280
00:11:03,200 --> 00:11:05,360
prove its identity and by observing the

281
00:11:05,360 --> 00:11:07,360
signature process the attacker can then

282
00:11:07,360 --> 00:11:10,640
steal the secret key

283
00:11:10,640 --> 00:11:12,720
okay so this concludes the attack part

284
00:11:12,720 --> 00:11:14,720
of our torque let's take a look at

285
00:11:14,720 --> 00:11:17,519
possible counter measures

286
00:11:17,519 --> 00:11:19,600
now the most holistic solution would of

287
00:11:19,600 --> 00:11:21,519
course be to simply use a probabilistic

288
00:11:21,519 --> 00:11:24,079
encryption scheme for example by xoring

289
00:11:24,079 --> 00:11:26,399
a counter or mask value to the plain

290
00:11:26,399 --> 00:11:27,279
text

291
00:11:27,279 --> 00:11:28,959
so this way even

292
00:11:28,959 --> 00:11:30,640
though we write the same plain text the

293
00:11:30,640 --> 00:11:33,200
same location twice by updating these

294
00:11:33,200 --> 00:11:34,880
counter values we get a fresh cipher

295
00:11:34,880 --> 00:11:37,120
text we get rid of all of these possible

296
00:11:37,120 --> 00:11:40,399
collisions and of course this is not new

297
00:11:40,399 --> 00:11:42,399
there are many such schemes out there

298
00:11:42,399 --> 00:11:44,079
however in the context of full memory

299
00:11:44,079 --> 00:11:46,000
encryption we have these two key

300
00:11:46,000 --> 00:11:47,839
challenges of storage overhead and

301
00:11:47,839 --> 00:11:49,519
performance overhead

302
00:11:49,519 --> 00:11:51,600
and if we now take a look at the

303
00:11:51,600 --> 00:11:54,320
available or upcoming trusted execution

304
00:11:54,320 --> 00:11:56,560
environments we see that all of them

305
00:11:56,560 --> 00:11:58,720
that try to protect a very large memory

306
00:11:58,720 --> 00:11:59,839
area

307
00:11:59,839 --> 00:12:01,839
decided to not use freshness in their

308
00:12:01,839 --> 00:12:03,920
scheme probably for exactly these

309
00:12:03,920 --> 00:12:05,519
reasons

310
00:12:05,519 --> 00:12:07,760
so does that mean means all of these

311
00:12:07,760 --> 00:12:10,480
schemes here are vulnerable to ciphertex

312
00:12:10,480 --> 00:12:12,800
side channel attacks well he doesn't

313
00:12:12,800 --> 00:12:15,440
know so the good answer here is that for

314
00:12:15,440 --> 00:12:17,839
the two into solutions here

315
00:12:17,839 --> 00:12:20,000
the attacker does not have software

316
00:12:20,000 --> 00:12:23,360
level access to the cipher texts so he

317
00:12:23,360 --> 00:12:25,839
simply cannot carry out our attacks here

318
00:12:25,839 --> 00:12:28,560
in a straightforward manner however the

319
00:12:28,560 --> 00:12:30,560
underlying encryption system is still

320
00:12:30,560 --> 00:12:33,440
vulnerable and if we can

321
00:12:33,440 --> 00:12:35,760
work around this access right protection

322
00:12:35,760 --> 00:12:36,959
for example we're switching to a

323
00:12:36,959 --> 00:12:39,120
physical attacker model and then we

324
00:12:39,120 --> 00:12:40,880
could still carry out these attacks for

325
00:12:40,880 --> 00:12:43,440
example by interposing on the on the on

326
00:12:43,440 --> 00:12:45,680
the memory bus and reading the cipher

327
00:12:45,680 --> 00:12:47,680
text that as they get transmitted to

328
00:12:47,680 --> 00:12:50,160
memory

329
00:12:50,160 --> 00:12:52,880
okay so since the current te designs

330
00:12:52,880 --> 00:12:55,120
cannot fully solve this problem here in

331
00:12:55,120 --> 00:12:56,959
hardware you should also have software

332
00:12:56,959 --> 00:13:00,000
level counter measures

333
00:13:00,000 --> 00:13:01,760
and there are two basic strategies that

334
00:13:01,760 --> 00:13:04,240
i want to introduce here so the first

335
00:13:04,240 --> 00:13:06,240
one is to simply use a new memory

336
00:13:06,240 --> 00:13:08,399
location when we repeatedly write

337
00:13:08,399 --> 00:13:11,360
secrets and this way we get a new tweak

338
00:13:11,360 --> 00:13:13,760
value from our memory encryption system

339
00:13:13,760 --> 00:13:15,680
basically mimicking this probabilistic

340
00:13:15,680 --> 00:13:17,760
encryption without the additional

341
00:13:17,760 --> 00:13:19,200
overhead

342
00:13:19,200 --> 00:13:21,440
and then the second solution here would

343
00:13:21,440 --> 00:13:23,040
be to actually implement this

344
00:13:23,040 --> 00:13:25,519
probabilistic encryption on the register

345
00:13:25,519 --> 00:13:27,440
level so we're not just storing the raw

346
00:13:27,440 --> 00:13:29,120
plaintext values

347
00:13:29,120 --> 00:13:30,800
but we apply

348
00:13:30,800 --> 00:13:33,200
a masking or a counter based scheme in

349
00:13:33,200 --> 00:13:35,279
before so that we when we read for

350
00:13:35,279 --> 00:13:37,279
memory we still have to unmask our

351
00:13:37,279 --> 00:13:39,440
values then we can process them

352
00:13:39,440 --> 00:13:41,680
and before writing back we generate a

353
00:13:41,680 --> 00:13:43,440
new mask or counter value so that you

354
00:13:43,440 --> 00:13:47,199
ensure that we get a fresh ciphertext

355
00:13:47,360 --> 00:13:49,440
okay but when we now want to implement

356
00:13:49,440 --> 00:13:51,760
this things are not as easy as it seems

357
00:13:51,760 --> 00:13:54,399
at first um because we also have to

358
00:13:54,399 --> 00:13:56,240
consider these contexts which this min

359
00:13:56,240 --> 00:13:57,839
young already talked about a little bit

360
00:13:57,839 --> 00:14:00,560
in the context of amd suv

361
00:14:00,560 --> 00:14:02,639
and the first dangerous context switch

362
00:14:02,639 --> 00:14:04,560
here is the context switch between the

363
00:14:04,560 --> 00:14:06,959
vm and the hypervisor and here the

364
00:14:06,959 --> 00:14:09,440
register values of the vm get again

365
00:14:09,440 --> 00:14:12,000
stored at a fixed memory location in the

366
00:14:12,000 --> 00:14:14,639
structure called vmsa and now this means

367
00:14:14,639 --> 00:14:17,279
that the attacker can simply choose to

368
00:14:17,279 --> 00:14:19,440
use this memory location instead of the

369
00:14:19,440 --> 00:14:22,560
one that is not protected in software

370
00:14:22,560 --> 00:14:24,240
and there are already some paper that

371
00:14:24,240 --> 00:14:26,959
exploits this and as a result amd

372
00:14:26,959 --> 00:14:29,199
provided a firmware mitigation here that

373
00:14:29,199 --> 00:14:31,760
adds freshness to the encryption of this

374
00:14:31,760 --> 00:14:34,399
page however note this can only be used

375
00:14:34,399 --> 00:14:36,639
for this single four kilobyte page which

376
00:14:36,639 --> 00:14:38,959
is also at a kind of fixed location

377
00:14:38,959 --> 00:14:41,199
architecturally so it doesn't look like

378
00:14:41,199 --> 00:14:44,160
them this can be used for anything else

379
00:14:44,160 --> 00:14:46,240
and then the second context switch that

380
00:14:46,240 --> 00:14:48,560
you need to take care of here

381
00:14:48,560 --> 00:14:50,560
is the context switch that's happening

382
00:14:50,560 --> 00:14:52,560
inside the operating system that's

383
00:14:52,560 --> 00:14:54,720
running in the vm that ming yang already

384
00:14:54,720 --> 00:14:57,680
talked about and here again the register

385
00:14:57,680 --> 00:14:59,920
values get leaked to this ptrx structure

386
00:14:59,920 --> 00:15:03,040
while they are unmasked in our in memory

387
00:15:03,040 --> 00:15:04,720
in the register space

388
00:15:04,720 --> 00:15:06,959
and here we provided a proof of concept

389
00:15:06,959 --> 00:15:09,199
patch that randomizes the location of

390
00:15:09,199 --> 00:15:12,639
this ptox structure for the linux kernel

391
00:15:12,639 --> 00:15:14,480
so with these two context switches out

392
00:15:14,480 --> 00:15:16,240
of the way there basically is a

393
00:15:16,240 --> 00:15:18,480
foundation to implement automated

394
00:15:18,480 --> 00:15:21,600
schemes that could protect secrets with

395
00:15:21,600 --> 00:15:23,279
yeah strategies

396
00:15:23,279 --> 00:15:26,240
with these strategies as we've discussed

397
00:15:26,240 --> 00:15:28,639
okay to summarize we've shown that the

398
00:15:28,639 --> 00:15:30,240
ciphertext side channel affects the

399
00:15:30,240 --> 00:15:32,560
whole vm memory we've seen enter into

400
00:15:32,560 --> 00:15:34,720
text against constant time crypto

401
00:15:34,720 --> 00:15:35,839
libraries

402
00:15:35,839 --> 00:15:37,040
and we've also discussed the

403
00:15:37,040 --> 00:15:40,399
applicability to other te designs

404
00:15:40,399 --> 00:15:42,160
and that concludes our talk thank you

405
00:15:42,160 --> 00:15:43,759
very much and we're happy to answer

406
00:15:43,759 --> 00:15:46,480
questions now

407
00:15:49,839 --> 00:15:51,839
okay thank you for another interesting

408
00:15:51,839 --> 00:15:54,079
talk

409
00:15:55,120 --> 00:15:57,360
do we have uh questions yes he's right

410
00:15:57,360 --> 00:15:59,759
behind you

411
00:16:04,880 --> 00:16:06,320
come on i'm sure there's some questions

412
00:16:06,320 --> 00:16:09,480
out there

413
00:16:13,519 --> 00:16:14,480
so

414
00:16:14,480 --> 00:16:16,399
i had one question oh we got a question

415
00:16:16,399 --> 00:16:17,600
okay

416
00:16:17,600 --> 00:16:20,240
go for it hey so um you mentioned that

417
00:16:20,240 --> 00:16:23,199
there's a patch from amd for the vmsa

418
00:16:23,199 --> 00:16:25,519
addresses but did they ever do a patch

419
00:16:25,519 --> 00:16:27,600
for the whole thing

420
00:16:27,600 --> 00:16:29,759
like you mentioned that you can add this

421
00:16:29,759 --> 00:16:31,600
to the kernel so that all memory

422
00:16:31,600 --> 00:16:33,360
addresses written are

423
00:16:33,360 --> 00:16:35,680
written with freshness hence more secure

424
00:16:35,680 --> 00:16:36,959
right

425
00:16:36,959 --> 00:16:39,920
um so like this this amd patch is only

426
00:16:39,920 --> 00:16:42,720
for this i understand

427
00:16:42,720 --> 00:16:44,639
i'm asking like is there an option to

428
00:16:44,639 --> 00:16:46,639
enable in the firmware that you can have

429
00:16:46,639 --> 00:16:50,079
that freshness for every address just no

430
00:16:50,079 --> 00:16:50,880
did

431
00:16:50,880 --> 00:16:52,639
they simply never did that

432
00:16:52,639 --> 00:16:54,560
no they never did that i mean so adding

433
00:16:54,560 --> 00:16:56,639
this at this um for this for this

434
00:16:56,639 --> 00:16:58,480
context which is a lot easier right

435
00:16:58,480 --> 00:17:00,800
because there's this architectural point

436
00:17:00,800 --> 00:17:02,160
where the context which is about to

437
00:17:02,160 --> 00:17:04,240
happen and then they instead of like

438
00:17:04,240 --> 00:17:06,079
storing the register values as they are

439
00:17:06,079 --> 00:17:07,679
you can can add this question i think

440
00:17:07,679 --> 00:17:09,679
that's a whole lot easier than reworking

441
00:17:09,679 --> 00:17:11,359
the memory encryption system basically

442
00:17:11,359 --> 00:17:13,919
you just like put the freshness on top

443
00:17:13,919 --> 00:17:16,079
of the values instead of having to

444
00:17:16,079 --> 00:17:18,480
rework your memory encryption system

445
00:17:18,480 --> 00:17:20,799
thank you

446
00:17:21,039 --> 00:17:22,559
so in in your

447
00:17:22,559 --> 00:17:24,640
mitigation that you had a you were

448
00:17:24,640 --> 00:17:27,039
randomizing the position of the

449
00:17:27,039 --> 00:17:29,280
place where the registers were stored

450
00:17:29,280 --> 00:17:31,760
so wouldn't an attacker be able to kind

451
00:17:31,760 --> 00:17:34,320
of probe and figure out what even if you

452
00:17:34,320 --> 00:17:37,919
randomized it where it was uh over time

453
00:17:37,919 --> 00:17:38,880
um

454
00:17:38,880 --> 00:17:41,039
yeah i mean this is basically like the

455
00:17:41,039 --> 00:17:43,600
trait of like how much memory um do you

456
00:17:43,600 --> 00:17:45,760
want to invest to have like a high

457
00:17:45,760 --> 00:17:47,919
amount of entropy that's certainly the

458
00:17:47,919 --> 00:17:49,919
point and this is also kind of a little

459
00:17:49,919 --> 00:17:52,000
bit of a weakness of this this counter

460
00:17:52,000 --> 00:17:52,880
measure

461
00:17:52,880 --> 00:17:54,000
um

462
00:17:54,000 --> 00:17:56,240
however implementing other ideas like

463
00:17:56,240 --> 00:17:58,160
masking would basically mean to rewrite

464
00:17:58,160 --> 00:18:00,480
this the whole linux kernel because like

465
00:18:00,480 --> 00:18:02,480
the speed ux structure is like really

466
00:18:02,480 --> 00:18:04,480
central to it and if you would change

467
00:18:04,480 --> 00:18:06,480
the way that it's accessed you

468
00:18:06,480 --> 00:18:08,240
have to basically rewrite the whole

469
00:18:08,240 --> 00:18:09,600
kernel this is

470
00:18:09,600 --> 00:18:12,720
um yeah not really feasible without um

471
00:18:12,720 --> 00:18:16,320
getting community support first

472
00:18:16,640 --> 00:18:17,520
okay

473
00:18:17,520 --> 00:18:19,919
so so if you uh if you didn't have all

474
00:18:19,919 --> 00:18:22,000
these restrictions

475
00:18:22,000 --> 00:18:24,400
could you is there like some more

476
00:18:24,400 --> 00:18:26,160
fundamentally secure way that you could

477
00:18:26,160 --> 00:18:27,760
engineer an architecture like this have

478
00:18:27,760 --> 00:18:30,720
you thought about uh

479
00:18:31,360 --> 00:18:32,480
you know

480
00:18:32,480 --> 00:18:34,640
if you if you're willing to say

481
00:18:34,640 --> 00:18:35,919
change the way the kernel works in a

482
00:18:35,919 --> 00:18:38,480
more thorough way

483
00:18:38,480 --> 00:18:42,720
now that the tough general questions

484
00:18:42,720 --> 00:18:45,679
um so like you mean like a more secure

485
00:18:45,679 --> 00:18:48,320
architecture for the linux kernel

486
00:18:48,320 --> 00:18:50,160
in the context of trust execution

487
00:18:50,160 --> 00:18:52,160
environments i i guess i guess you're

488
00:18:52,160 --> 00:18:54,640
you're thinking in a

489
00:18:54,640 --> 00:18:56,240
well i guess i'm just trying to think of

490
00:18:56,240 --> 00:18:58,000
the kind of the more general version of

491
00:18:58,000 --> 00:18:59,760
the problem here where you want to

492
00:18:59,760 --> 00:19:01,120
produce something that's like a trusted

493
00:19:01,120 --> 00:19:03,760
execution environment and

494
00:19:03,760 --> 00:19:04,720
um

495
00:19:04,720 --> 00:19:06,480
but you know maybe you're willing to

496
00:19:06,480 --> 00:19:08,559
change the way the kernel works in more

497
00:19:08,559 --> 00:19:11,520
dramatic ways

498
00:19:11,520 --> 00:19:14,240
well i think it's not the current what's

499
00:19:14,240 --> 00:19:16,240
lack of this this um

500
00:19:16,240 --> 00:19:19,120
expectations that don't match up right

501
00:19:19,120 --> 00:19:21,120
like the the flaws in the trusted

502
00:19:21,120 --> 00:19:23,360
execution environment combined with

503
00:19:23,360 --> 00:19:25,200
certain behaviors that are okay if you

504
00:19:25,200 --> 00:19:29,200
run on the us under normal um context

505
00:19:29,200 --> 00:19:31,280
but not okay if you're running in the in

506
00:19:31,280 --> 00:19:33,760
the vm so maybe this this shows that

507
00:19:33,760 --> 00:19:35,679
there's a lot of work to do like in the

508
00:19:35,679 --> 00:19:38,559
software space there are certain areas

509
00:19:38,559 --> 00:19:41,520
maybe where the behavior of software um

510
00:19:41,520 --> 00:19:42,799
like the kernel

511
00:19:42,799 --> 00:19:44,400
needs to be altered to be secure in the

512
00:19:44,400 --> 00:19:46,080
cm context

513
00:19:46,080 --> 00:19:48,400
in the suv context

514
00:19:48,400 --> 00:19:50,840
okay i think one more question from

515
00:19:50,840 --> 00:19:54,080
csun so my question is that

516
00:19:54,080 --> 00:19:57,200
you know things the isolate sp the

517
00:19:57,200 --> 00:19:59,440
intel's implementation to sgs is sort of

518
00:19:59,440 --> 00:20:00,480
like

519
00:20:00,480 --> 00:20:02,960
the encryption sort of like the suv one

520
00:20:02,960 --> 00:20:04,799
so do you think that your attack to scv

521
00:20:04,799 --> 00:20:06,720
can work on the newer version of intel

522
00:20:06,720 --> 00:20:09,200
sgx

523
00:20:10,240 --> 00:20:12,480
i mean i i don't have a new

524
00:20:12,480 --> 00:20:15,679
interstx equipment on my hind but i mean

525
00:20:15,679 --> 00:20:17,840
the cybertech side channel may

526
00:20:17,840 --> 00:20:21,440
be potential and i mean most city that

527
00:20:21,440 --> 00:20:23,679
use deterministic memory encryption may

528
00:20:23,679 --> 00:20:26,159
be suffered from the cyberdexar channels

529
00:20:26,159 --> 00:20:28,159
if you directly use some existing code

530
00:20:28,159 --> 00:20:29,919
that you don't have some formal

531
00:20:29,919 --> 00:20:32,880
verification to pull your code is

532
00:20:32,880 --> 00:20:35,200
persistent to the ciphertext channel

533
00:20:35,200 --> 00:20:37,919
then there might be some problem there

534
00:20:37,919 --> 00:20:40,400
okay thank you

535
00:20:40,400 --> 00:20:41,360
okay

536
00:20:41,360 --> 00:20:43,570
thank you very much

537
00:20:43,570 --> 00:20:45,820
[Applause]

