1
00:00:00,240 --> 00:00:01,439
thank you so much

2
00:00:01,439 --> 00:00:05,359
uh sorry about the delay uh

3
00:00:05,359 --> 00:00:08,000
okay let's start uh uh

4
00:00:08,000 --> 00:00:10,080
good afternoon everyone uh my name is

5
00:00:10,080 --> 00:00:13,599
jingwen wong and today i'm here to uh

6
00:00:13,599 --> 00:00:16,640
present our work uh rtte

7
00:00:16,640 --> 00:00:19,520
real time system availability for cyber

8
00:00:19,520 --> 00:00:22,640
physical systems using amp trust zone

9
00:00:22,640 --> 00:00:24,480
and this is my our first conference

10
00:00:24,480 --> 00:00:27,119
presentation so let me know if there is

11
00:00:27,119 --> 00:00:30,400
any anything unclear

12
00:00:30,400 --> 00:00:33,440
today we are embracing a brave new cyber

13
00:00:33,440 --> 00:00:34,719
physical world

14
00:00:34,719 --> 00:00:37,840
where the machines and the human

15
00:00:37,840 --> 00:00:40,960
become becoming ever more connected

16
00:00:40,960 --> 00:00:43,680
through the autonomous systems

17
00:00:43,680 --> 00:00:44,879
some

18
00:00:44,879 --> 00:00:47,600
safety critical and some

19
00:00:47,600 --> 00:00:49,520
saving lives such as

20
00:00:49,520 --> 00:00:51,760
medical devices and

21
00:00:51,760 --> 00:00:55,440
some has enriched our lives such as

22
00:00:55,440 --> 00:00:56,879
the

23
00:00:56,879 --> 00:00:58,960
smart home devices

24
00:00:58,960 --> 00:01:00,559
then we want to ask

25
00:01:00,559 --> 00:01:01,760
one question

26
00:01:01,760 --> 00:01:04,080
how should we secure these safety

27
00:01:04,080 --> 00:01:05,680
critical systems

28
00:01:05,680 --> 00:01:07,200
even if the

29
00:01:07,200 --> 00:01:10,080
kernel os kernel has been compromised

30
00:01:10,080 --> 00:01:12,400
this is important uh because

31
00:01:12,400 --> 00:01:16,080
uh uh we want to feel safe uh when we

32
00:01:16,080 --> 00:01:18,720
step into our uh

33
00:01:18,720 --> 00:01:21,200
self driving car and

34
00:01:21,200 --> 00:01:23,360
focusing on our work instead of thinking

35
00:01:23,360 --> 00:01:26,320
about uh what should we avoid on the

36
00:01:26,320 --> 00:01:29,280
road so in these cases how should we

37
00:01:29,280 --> 00:01:31,439
manage to maintain the minimal control

38
00:01:31,439 --> 00:01:34,758
for the safety

39
00:01:40,159 --> 00:01:42,560
okay thank you so much thank you so much

40
00:01:42,560 --> 00:01:45,280
uh so uh the first thing coming to my

41
00:01:45,280 --> 00:01:48,960
mind uh when uh uh i uh thinking about

42
00:01:48,960 --> 00:01:52,000
uh the uh kernel attacker will maintain

43
00:01:52,000 --> 00:01:55,119
the minimal safety protection in the

44
00:01:55,119 --> 00:01:57,520
trusted execution environment

45
00:01:57,520 --> 00:02:00,079
like arm trust zone which can provide a

46
00:02:00,079 --> 00:02:02,000
strong resource isolation

47
00:02:02,000 --> 00:02:03,520
between the

48
00:02:03,520 --> 00:02:06,640
trusted and untrusted software and

49
00:02:06,640 --> 00:02:08,720
security protection is based on the

50
00:02:08,720 --> 00:02:11,120
hardware assumption so even if the

51
00:02:11,120 --> 00:02:13,840
untrusted software has been compromised

52
00:02:13,840 --> 00:02:16,080
uh the safety protection is still uh

53
00:02:16,080 --> 00:02:17,200
hold

54
00:02:17,200 --> 00:02:19,920
it has been widely uh deployed on both

55
00:02:19,920 --> 00:02:21,599
high-end and low-end

56
00:02:21,599 --> 00:02:24,000
platforms

57
00:02:24,000 --> 00:02:27,120
however a common decision made by our

58
00:02:27,120 --> 00:02:30,000
existing key solutions is that

59
00:02:30,000 --> 00:02:32,720
the availability protection is not

60
00:02:32,720 --> 00:02:35,280
provided

61
00:02:35,280 --> 00:02:37,519
therefore all of the resource

62
00:02:37,519 --> 00:02:40,319
orchestrations are controlled by the

63
00:02:40,319 --> 00:02:42,879
untrusted software

64
00:02:42,879 --> 00:02:45,280
so as shown in the left figure this is

65
00:02:45,280 --> 00:02:48,560
uh the task uh scheduling uh

66
00:02:48,560 --> 00:02:51,360
architecture of the opt which is a

67
00:02:51,360 --> 00:02:54,720
widely used uh uh secure kernel on the

68
00:02:54,720 --> 00:02:56,560
us um trust zone

69
00:02:56,560 --> 00:02:58,239
if you want to uh

70
00:02:58,239 --> 00:03:00,000
uh call a

71
00:03:00,000 --> 00:03:02,319
trusted application uh

72
00:03:02,319 --> 00:03:04,239
first you need to call the untrusted

73
00:03:04,239 --> 00:03:08,159
application the ie app and then the os

74
00:03:08,159 --> 00:03:11,440
scheduler will decide uh when to

75
00:03:11,440 --> 00:03:14,400
schedule the trusted ones uh

76
00:03:14,400 --> 00:03:16,879
and finally the trusted application will

77
00:03:16,879 --> 00:03:19,519
be invoked through the smc instruction

78
00:03:19,519 --> 00:03:22,879
so in a word the trusted application

79
00:03:22,879 --> 00:03:24,879
invoking is decided by untrusted

80
00:03:24,879 --> 00:03:28,239
software and as we can see in the red

81
00:03:28,239 --> 00:03:29,920
figure

82
00:03:29,920 --> 00:03:33,200
this is a an i o management

83
00:03:33,200 --> 00:03:35,760
architecture during the

84
00:03:35,760 --> 00:03:38,480
trusted application want to access the i

85
00:03:38,480 --> 00:03:39,920
o prefers

86
00:03:39,920 --> 00:03:42,560
as we can see it must go through the

87
00:03:42,560 --> 00:03:44,720
untrusted i o drivers

88
00:03:44,720 --> 00:03:45,760
so

89
00:03:45,760 --> 00:03:49,599
the untrusted kernel is easily to modify

90
00:03:49,599 --> 00:03:52,879
any uh i o commands uh for example if

91
00:03:52,879 --> 00:03:56,640
the peripheral is the actuators uh the

92
00:03:56,640 --> 00:04:00,080
malicious kernel is fairly easy to

93
00:04:00,080 --> 00:04:03,519
change the hiding of the drones

94
00:04:03,760 --> 00:04:06,080
so the availability may not very

95
00:04:06,080 --> 00:04:09,760
important in the traditional it systems

96
00:04:09,760 --> 00:04:12,239
however it is pretty important in the

97
00:04:12,239 --> 00:04:15,280
cyber physical systems several defining

98
00:04:15,280 --> 00:04:17,600
properties of the cyber physical systems

99
00:04:17,600 --> 00:04:19,120
separate it

100
00:04:19,120 --> 00:04:22,160
from the traditional id it systems

101
00:04:22,160 --> 00:04:24,080
first firstly

102
00:04:24,080 --> 00:04:26,400
the cyber physical systems continuously

103
00:04:26,400 --> 00:04:28,800
interact with the physical world because

104
00:04:28,800 --> 00:04:31,199
it controls the physical processes

105
00:04:31,199 --> 00:04:33,759
and secondly the sensing control and

106
00:04:33,759 --> 00:04:36,800
actuation must be finished in time

107
00:04:36,800 --> 00:04:38,080
for example

108
00:04:38,080 --> 00:04:39,360
if your

109
00:04:39,360 --> 00:04:41,600
self-driving car cannot stop in time

110
00:04:41,600 --> 00:04:43,440
before the pedestrian

111
00:04:43,440 --> 00:04:44,560
it will be

112
00:04:44,560 --> 00:04:46,400
fatal and

113
00:04:46,400 --> 00:04:48,160
lastly

114
00:04:48,160 --> 00:04:50,160
if something goes wrong the cyber

115
00:04:50,160 --> 00:04:52,240
physical system will cause serious

116
00:04:52,240 --> 00:04:55,360
physical consequences or the male where

117
00:04:55,360 --> 00:04:58,080
just went kinetic such as

118
00:04:58,080 --> 00:05:00,720
crashing the pedestrian so maintain the

119
00:05:00,720 --> 00:05:03,680
dope in a timely manner is essential for

120
00:05:03,680 --> 00:05:06,720
the cyber physical system

121
00:05:06,720 --> 00:05:09,680
to further motivate our story

122
00:05:09,680 --> 00:05:12,080
and consider the real-time property

123
00:05:12,080 --> 00:05:15,039
beyond the availability is important

124
00:05:15,039 --> 00:05:16,880
we conducted the

125
00:05:16,880 --> 00:05:18,400
attack sample

126
00:05:18,400 --> 00:05:21,039
and we developed the time wiping attack

127
00:05:21,039 --> 00:05:23,919
uh where the normal word exploits it

128
00:05:23,919 --> 00:05:25,840
access to the

129
00:05:25,840 --> 00:05:28,960
dynamic frequency voltage scaling

130
00:05:28,960 --> 00:05:30,800
to slow down the

131
00:05:30,800 --> 00:05:33,120
june localization system in the te by

132
00:05:33,120 --> 00:05:35,759
half as we can see in the left figure

133
00:05:35,759 --> 00:05:37,759
the ground truth and the normal

134
00:05:37,759 --> 00:05:39,280
trajectory

135
00:05:39,280 --> 00:05:42,320
in the black and green line are aligned

136
00:05:42,320 --> 00:05:45,280
very well without the attack however

137
00:05:45,280 --> 00:05:47,440
after the attack we can see that the

138
00:05:47,440 --> 00:05:50,639
localization is all over the places and

139
00:05:50,639 --> 00:05:53,039
this is because that's the accumulated

140
00:05:53,039 --> 00:05:56,080
localization error has begin to uh break

141
00:05:56,080 --> 00:05:58,160
the control loop and finally the june

142
00:05:58,160 --> 00:06:00,720
will crash

143
00:06:00,880 --> 00:06:04,000
so uh uh coming coming back here uh

144
00:06:04,000 --> 00:06:05,840
hopefully we have

145
00:06:05,840 --> 00:06:08,080
established the point that the real-time

146
00:06:08,080 --> 00:06:10,400
availability is important in the cyber

147
00:06:10,400 --> 00:06:11,840
physical system

148
00:06:11,840 --> 00:06:13,919
so if we break it down

149
00:06:13,919 --> 00:06:16,400
it essentially means that the real-time

150
00:06:16,400 --> 00:06:19,360
computation availability that is to see

151
00:06:19,360 --> 00:06:22,240
the control must be finished in time and

152
00:06:22,240 --> 00:06:24,560
the raw time i o availability which

153
00:06:24,560 --> 00:06:25,919
means the

154
00:06:25,919 --> 00:06:28,960
controller must sense and actuate on the

155
00:06:28,960 --> 00:06:32,160
system in a real-time manner

156
00:06:32,160 --> 00:06:35,199
the thread model of our paper uh assume

157
00:06:35,199 --> 00:06:37,199
uh arbitrary code execution in the

158
00:06:37,199 --> 00:06:39,600
non-secure world and where the attacker

159
00:06:39,600 --> 00:06:42,560
aims to destabilize the cyber physical

160
00:06:42,560 --> 00:06:45,039
system uh through either uh denying

161
00:06:45,039 --> 00:06:48,800
access to the processor such as uh

162
00:06:48,800 --> 00:06:51,120
prevent the control from ready or

163
00:06:51,120 --> 00:06:54,240
disabling io devices such as sensors

164
00:06:54,240 --> 00:06:56,880
actuators or disable the preferences

165
00:06:56,880 --> 00:06:58,800
such as timer and power

166
00:06:58,800 --> 00:07:02,080
the hardware or sensor attacks and the

167
00:07:02,080 --> 00:07:04,240
side channel attacks out of scope of

168
00:07:04,240 --> 00:07:06,639
this paper

169
00:07:06,639 --> 00:07:10,240
to build rte we want to answer three key

170
00:07:10,240 --> 00:07:12,000
research questions

171
00:07:12,000 --> 00:07:14,479
firstly what is the minimal set of

172
00:07:14,479 --> 00:07:17,680
hardware primitives for guaranteed the

173
00:07:17,680 --> 00:07:20,479
availability and secondly how should we

174
00:07:20,479 --> 00:07:22,800
provide the computation availability

175
00:07:22,800 --> 00:07:24,720
with a small tcp

176
00:07:24,720 --> 00:07:26,560
and lastly how should

177
00:07:26,560 --> 00:07:28,240
we provide the real-time i o

178
00:07:28,240 --> 00:07:31,759
availability with the small tcp

179
00:07:31,759 --> 00:07:34,080
so the first question minimal a set of

180
00:07:34,080 --> 00:07:36,080
hardware primitives

181
00:07:36,080 --> 00:07:37,919
so this question is

182
00:07:37,919 --> 00:07:39,360
actually asking

183
00:07:39,360 --> 00:07:41,840
us how should we

184
00:07:41,840 --> 00:07:44,639
regain the control of the system

185
00:07:44,639 --> 00:07:47,280
we think there are too many things first

186
00:07:47,280 --> 00:07:48,560
firstly

187
00:07:48,560 --> 00:07:51,520
after we handle the execution to the

188
00:07:51,520 --> 00:07:53,599
untrusted normal word

189
00:07:53,599 --> 00:07:56,160
we should be able to

190
00:07:56,160 --> 00:07:58,479
regain the control of the execution and

191
00:07:58,479 --> 00:08:00,960
the way we do it is use the secure timer

192
00:08:00,960 --> 00:08:03,520
which is only available uh

193
00:08:03,520 --> 00:08:06,160
uh and configurable by the trusted

194
00:08:06,160 --> 00:08:07,039
domain

195
00:08:07,039 --> 00:08:08,560
every time the

196
00:08:08,560 --> 00:08:09,360
uh

197
00:08:09,360 --> 00:08:12,639
secure timer is triggered the execution

198
00:08:12,639 --> 00:08:15,599
control is trapped back to the secure

199
00:08:15,599 --> 00:08:18,080
domain and the other one is a strong

200
00:08:18,080 --> 00:08:20,960
resource isolation mechanism

201
00:08:20,960 --> 00:08:23,360
because otherwise the integrity of the

202
00:08:23,360 --> 00:08:24,720
system

203
00:08:24,720 --> 00:08:26,639
will be compromised and the system will

204
00:08:26,639 --> 00:08:27,919
still fuse

205
00:08:27,919 --> 00:08:30,560
the last one is the secure access to the

206
00:08:30,560 --> 00:08:32,719
physical passenger of time

207
00:08:32,719 --> 00:08:34,880
this is specific to the

208
00:08:34,880 --> 00:08:39,679
cyber physical system uh because uh if

209
00:08:39,679 --> 00:08:42,399
when you are designing a controller uh

210
00:08:42,399 --> 00:08:45,600
uh you are uh uh control controlling the

211
00:08:45,600 --> 00:08:47,920
physical processes uh in a physical

212
00:08:47,920 --> 00:08:51,200
period of time so it's important to uh

213
00:08:51,200 --> 00:08:53,519
secure access the physical passage of

214
00:08:53,519 --> 00:08:55,600
time and this can be done using a

215
00:08:55,600 --> 00:08:58,560
non-multiple clock source

216
00:08:58,560 --> 00:09:00,480
so the next question question is how

217
00:09:00,480 --> 00:09:02,640
should we provide real time

218
00:09:02,640 --> 00:09:06,160
cpu availability using a small tcp

219
00:09:06,160 --> 00:09:08,720
the most straight forward method is

220
00:09:08,720 --> 00:09:10,640
migrate the

221
00:09:10,640 --> 00:09:12,880
complex

222
00:09:12,880 --> 00:09:15,200
scheduler to the secure world and let

223
00:09:15,200 --> 00:09:17,680
the security mean to

224
00:09:17,680 --> 00:09:20,560
orchestrate all of the tasks

225
00:09:20,560 --> 00:09:23,519
scheduling on both words however if you

226
00:09:23,519 --> 00:09:26,000
look at the linux scheduling systems you

227
00:09:26,000 --> 00:09:28,480
will find this is a super unpractical

228
00:09:28,480 --> 00:09:30,640
solution because this will increase the

229
00:09:30,640 --> 00:09:33,120
tcp dramatically

230
00:09:33,120 --> 00:09:36,399
so the rte leverage the hierarchical

231
00:09:36,399 --> 00:09:39,120
scheduling the secure timer will only

232
00:09:39,120 --> 00:09:40,959
trigger the word scheduler the word

233
00:09:40,959 --> 00:09:44,000
scheduler will look at the

234
00:09:44,000 --> 00:09:45,839
scheduling

235
00:09:45,839 --> 00:09:47,040
policies

236
00:09:47,040 --> 00:09:49,760
to find out which secure domain should

237
00:09:49,760 --> 00:09:51,279
run next

238
00:09:51,279 --> 00:09:55,360
if for example if it's a secure os

239
00:09:55,360 --> 00:09:57,839
turn to run then the next level

240
00:09:57,839 --> 00:10:01,200
scheduler the secure scheduler will be

241
00:10:01,200 --> 00:10:06,640
invoked to schedule the trusted tasks

242
00:10:06,640 --> 00:10:10,320
in this we we leave the complex the

243
00:10:10,320 --> 00:10:13,200
original scheduler untouched and the

244
00:10:13,200 --> 00:10:16,079
complexity of the word scheduler and the

245
00:10:16,079 --> 00:10:19,200
secure os scheduler

246
00:10:19,200 --> 00:10:20,000
can

247
00:10:20,000 --> 00:10:22,560
will be more manageable and then there

248
00:10:22,560 --> 00:10:25,040
is one more question when you are using

249
00:10:25,040 --> 00:10:27,760
the two-level hierarchical scheduling

250
00:10:27,760 --> 00:10:30,800
will the raw time property still be hold

251
00:10:30,800 --> 00:10:32,560
the answer is yes

252
00:10:32,560 --> 00:10:34,399
we're using the

253
00:10:34,399 --> 00:10:37,040
compositional scheduling analysis given

254
00:10:37,040 --> 00:10:39,680
a concrete execution model

255
00:10:39,680 --> 00:10:42,959
it can ensure the secure tasks will not

256
00:10:42,959 --> 00:10:46,439
miss their deadlines

257
00:10:48,000 --> 00:10:48,800
uh

258
00:10:48,800 --> 00:10:51,200
we have left out uh many optimization

259
00:10:51,200 --> 00:10:53,200
details in our paper

260
00:10:53,200 --> 00:10:55,839
and for example we use the we make the

261
00:10:55,839 --> 00:10:58,560
scheduling framework policy based to

262
00:10:58,560 --> 00:11:00,720
optimize the interrupt handling in the

263
00:11:00,720 --> 00:11:04,240
normal world and we also use the

264
00:11:04,240 --> 00:11:06,959
event-based scheduling to reduce the

265
00:11:06,959 --> 00:11:09,839
interrupt times during uh

266
00:11:09,839 --> 00:11:11,279
scheduling

267
00:11:11,279 --> 00:11:12,880
but however

268
00:11:12,880 --> 00:11:15,519
at the uh high pres high level

269
00:11:15,519 --> 00:11:16,800
perspective

270
00:11:16,800 --> 00:11:19,120
when you using the hierarchical uh

271
00:11:19,120 --> 00:11:21,680
scheduling framework at the design time

272
00:11:21,680 --> 00:11:25,120
you need to know the execution tasks uh

273
00:11:25,120 --> 00:11:27,920
the execution model of all the tasks

274
00:11:27,920 --> 00:11:30,640
that is to see how long how often and

275
00:11:30,640 --> 00:11:33,440
inward priority age tasks should run and

276
00:11:33,440 --> 00:11:36,000
you also need to know the scheduling

277
00:11:36,000 --> 00:11:38,720
algorithms for both world scheduler and

278
00:11:38,720 --> 00:11:41,279
secure os scheduler after feeding all of

279
00:11:41,279 --> 00:11:43,200
these things into the compositional

280
00:11:43,200 --> 00:11:46,160
scheduling analysis tools uh the result

281
00:11:46,160 --> 00:11:49,519
is the uh word scheduling policy and at

282
00:11:49,519 --> 00:11:51,760
the wrong time uh

283
00:11:51,760 --> 00:11:54,000
every time the secure timer is triggered

284
00:11:54,000 --> 00:11:56,639
the word scheduler will decide which

285
00:11:56,639 --> 00:11:58,320
secure domain should run according to

286
00:11:58,320 --> 00:12:01,279
the uh generated uh

287
00:12:01,279 --> 00:12:03,920
scheduling policy

288
00:12:03,920 --> 00:12:06,320
so the last question is how to provide

289
00:12:06,320 --> 00:12:09,040
the raw time i o availability with a

290
00:12:09,040 --> 00:12:11,200
small tcp

291
00:12:11,200 --> 00:12:14,399
to achieve this goal uh we need to see

292
00:12:14,399 --> 00:12:15,760
several

293
00:12:15,760 --> 00:12:18,800
challenges the first one is tcp

294
00:12:18,800 --> 00:12:21,360
directly migrating the io drivers to the

295
00:12:21,360 --> 00:12:23,680
secure world will increase significantly

296
00:12:23,680 --> 00:12:25,360
tcp size

297
00:12:25,360 --> 00:12:26,639
this is a

298
00:12:26,639 --> 00:12:29,200
long-standing research questions in the

299
00:12:29,200 --> 00:12:31,760
te community and

300
00:12:31,760 --> 00:12:33,920
secondly

301
00:12:33,920 --> 00:12:36,959
the cross green access control on the

302
00:12:36,959 --> 00:12:39,839
peripheral access

303
00:12:40,880 --> 00:12:44,480
from the processor view you can assign

304
00:12:44,480 --> 00:12:46,560
any specific uh

305
00:12:46,560 --> 00:12:48,720
peripheral controllers to a secure world

306
00:12:48,720 --> 00:12:51,200
however if you assign a bus controller

307
00:12:51,200 --> 00:12:53,839
to the secure world it means that you

308
00:12:53,839 --> 00:12:56,880
assign all of the devices connected to

309
00:12:56,880 --> 00:12:59,440
the sim bus to the secure world however

310
00:12:59,440 --> 00:13:01,279
if some part of the

311
00:13:01,279 --> 00:13:03,680
devices in this box is critical and

312
00:13:03,680 --> 00:13:06,399
other ones are uncritical how

313
00:13:06,399 --> 00:13:09,519
you can handle this problem and the last

314
00:13:09,519 --> 00:13:11,440
one is how to provide real-time

315
00:13:11,440 --> 00:13:13,440
properties on io

316
00:13:13,440 --> 00:13:16,720
the normal world can

317
00:13:16,720 --> 00:13:18,079
request a lot

318
00:13:18,079 --> 00:13:20,800
can send a lot of i o requests

319
00:13:20,800 --> 00:13:23,760
in a short time to generate the priority

320
00:13:23,760 --> 00:13:27,120
inversion where the priority inversion

321
00:13:27,120 --> 00:13:31,920
is the case that low priority tasks will

322
00:13:32,000 --> 00:13:33,440
will lock the

323
00:13:33,440 --> 00:13:36,000
high priority tasks through the resource

324
00:13:36,000 --> 00:13:38,079
contention

325
00:13:38,079 --> 00:13:41,040
to solve the first problem we developed

326
00:13:41,040 --> 00:13:42,720
the trusted driver

327
00:13:42,720 --> 00:13:45,440
we proposed to approve the driver

328
00:13:45,440 --> 00:13:48,079
through removing initialization codes or

329
00:13:48,079 --> 00:13:51,920
transfer the codes uh through a template

330
00:13:51,920 --> 00:13:55,120
temporalize the interactions and we will

331
00:13:55,120 --> 00:14:01,240
dive into this a little a bit later

332
00:14:02,880 --> 00:14:03,920
okay

333
00:14:03,920 --> 00:14:06,880
so uh remember the call screen access

334
00:14:06,880 --> 00:14:09,839
control problems uh to save this problem

335
00:14:09,839 --> 00:14:13,440
we actually uh provide two kind of uh

336
00:14:13,440 --> 00:14:16,560
drivers uh we debloated the critical

337
00:14:16,560 --> 00:14:19,040
safety critical drivers and we sandbox

338
00:14:19,040 --> 00:14:21,360
the uncritical drivers and put it into

339
00:14:21,360 --> 00:14:24,079
the secure water and lastly all of the

340
00:14:24,079 --> 00:14:27,120
drivers need to go through the uh

341
00:14:27,120 --> 00:14:29,600
our reference monitors and the temporal

342
00:14:29,600 --> 00:14:32,560
io reference monitors as used to

343
00:14:32,560 --> 00:14:36,000
enforce that the driver cannot lock lock

344
00:14:36,000 --> 00:14:38,959
the i o for a long time and the

345
00:14:38,959 --> 00:14:42,560
spatial i o reference monitor is used to

346
00:14:42,560 --> 00:14:44,800
specifically look at

347
00:14:44,800 --> 00:14:47,839
what how you are controlling the safety

348
00:14:47,839 --> 00:14:52,399
critical uh actuators or sensors

349
00:14:53,199 --> 00:14:55,519
uh driver deep loading is one of the key

350
00:14:55,519 --> 00:14:58,800
techniques we use to find a balance

351
00:14:58,800 --> 00:15:02,000
between the tcb and the

352
00:15:02,000 --> 00:15:05,360
minimal safety critical functions

353
00:15:05,360 --> 00:15:08,240
the high level idea is that we observe

354
00:15:08,240 --> 00:15:10,480
the suburb physical system io operation

355
00:15:10,480 --> 00:15:11,600
is highly

356
00:15:11,600 --> 00:15:14,079
predicted predictable and

357
00:15:14,079 --> 00:15:15,760
repetitive

358
00:15:15,760 --> 00:15:20,480
for example if you after you take off

359
00:15:20,480 --> 00:15:22,880
the only way you interact with the

360
00:15:22,880 --> 00:15:24,240
parameter

361
00:15:24,240 --> 00:15:26,720
sensor as the getting pressure getting

362
00:15:26,720 --> 00:15:29,279
pressure and getting pressure again so

363
00:15:29,279 --> 00:15:32,240
from the perspective of the i2c bus

364
00:15:32,240 --> 00:15:34,959
controller you can see the sim

365
00:15:34,959 --> 00:15:37,279
start configuration red transfers

366
00:15:37,279 --> 00:15:40,720
re-transfers and and and configuration

367
00:15:40,720 --> 00:15:42,399
uh repeated

368
00:15:42,399 --> 00:15:46,320
so we ask our ourselves how uh how about

369
00:15:46,320 --> 00:15:51,040
uh templatize these uh steps and this uh

370
00:15:51,040 --> 00:15:54,639
is indeed what what we did we template

371
00:15:54,639 --> 00:15:58,000
templatize these each steps in the

372
00:15:58,000 --> 00:16:00,000
operation and use a

373
00:16:00,000 --> 00:16:03,199
small amount of codes to drive the

374
00:16:03,199 --> 00:16:06,560
uh drive the sensors and in this way

375
00:16:06,560 --> 00:16:07,920
in this week

376
00:16:07,920 --> 00:16:11,279
we treat off the expressiveness of the

377
00:16:11,279 --> 00:16:13,440
driver code to the

378
00:16:13,440 --> 00:16:15,519
to the safety and that is to see the

379
00:16:15,519 --> 00:16:18,000
small tcp

380
00:16:18,000 --> 00:16:20,240
the implementation of rte include

381
00:16:20,240 --> 00:16:22,639
hierarchical scheduling framework

382
00:16:22,639 --> 00:16:25,120
and general splitting and sandboxing

383
00:16:25,120 --> 00:16:27,759
involve compile-time instrumentation

384
00:16:27,759 --> 00:16:30,240
driver debuting including dynamic

385
00:16:30,240 --> 00:16:31,519
analysis

386
00:16:31,519 --> 00:16:35,279
message recording and message replaying

387
00:16:35,279 --> 00:16:39,519
a mission specific i o reference monitor

388
00:16:39,519 --> 00:16:42,800
to uh measure the system overhead

389
00:16:42,800 --> 00:16:45,680
of the rte we evaluate rte on both

390
00:16:45,680 --> 00:16:49,440
hardware and software platforms

391
00:16:49,440 --> 00:16:52,800
um uh uh cortex a and contact contact cm

392
00:16:52,800 --> 00:16:54,880
uh platforms

393
00:16:54,880 --> 00:16:57,120
because of the limited time we only show

394
00:16:57,120 --> 00:17:00,240
some uh uh key observations from our

395
00:17:00,240 --> 00:17:02,880
experiment uh data

396
00:17:02,880 --> 00:17:04,880
the first thing is the uh scheduling

397
00:17:04,880 --> 00:17:07,119
optimization we can see the tasks

398
00:17:07,119 --> 00:17:11,199
invocation from secure word in rte is

399
00:17:11,199 --> 00:17:14,319
will takes significant less time than

400
00:17:14,319 --> 00:17:16,880
the task invocation in the opt-in this

401
00:17:16,880 --> 00:17:20,880
is because tasks invocation in rte will

402
00:17:20,880 --> 00:17:23,599
not generate a lot of uh context switch

403
00:17:23,599 --> 00:17:25,520
overhead between the normal world and

404
00:17:25,520 --> 00:17:26,720
the secure world

405
00:17:26,720 --> 00:17:27,760
and

406
00:17:27,760 --> 00:17:30,000
the second one is the event-based

407
00:17:30,000 --> 00:17:32,799
scheduling adopted by the rte will

408
00:17:32,799 --> 00:17:34,240
reduce the

409
00:17:34,240 --> 00:17:37,520
interrupt times a lot than the gp based

410
00:17:37,520 --> 00:17:40,000
scheduling because we leverage the

411
00:17:40,000 --> 00:17:42,080
insight that the cyber physical system

412
00:17:42,080 --> 00:17:44,880
is predictable

413
00:17:44,880 --> 00:17:47,600
and from the micro benchmarks uh uh we

414
00:17:47,600 --> 00:17:50,960
can see that the rte can effectively uh

415
00:17:50,960 --> 00:17:54,240
decoupling the task priority uh from

416
00:17:54,240 --> 00:17:57,200
from the security

417
00:17:57,200 --> 00:18:00,640
to measure the control impact of the

418
00:18:00,640 --> 00:18:02,960
rte we also

419
00:18:02,960 --> 00:18:05,520
measure the control deviation

420
00:18:05,520 --> 00:18:07,679
under different physical conditions

421
00:18:07,679 --> 00:18:08,960
with different

422
00:18:08,960 --> 00:18:11,280
control deviation metrics and from the

423
00:18:11,280 --> 00:18:14,480
result we can show that rte has minimal

424
00:18:14,480 --> 00:18:17,200
control impact on the cyber physical

425
00:18:17,200 --> 00:18:19,200
system different

426
00:18:19,200 --> 00:18:21,280
physical conditions

427
00:18:21,280 --> 00:18:23,520
we also benchmark the real time

428
00:18:23,520 --> 00:18:24,480
task

429
00:18:24,480 --> 00:18:27,039
execution to show that the systems with

430
00:18:27,039 --> 00:18:29,679
rte will not

431
00:18:29,679 --> 00:18:31,840
let their real-time tasks miss their

432
00:18:31,840 --> 00:18:33,200
deadlines

433
00:18:33,200 --> 00:18:35,600
and the result shows that none of the

434
00:18:35,600 --> 00:18:37,600
tasks in the articulator

435
00:18:37,600 --> 00:18:40,400
running on our self-constructed drones

436
00:18:40,400 --> 00:18:41,280
will

437
00:18:41,280 --> 00:18:46,000
exceed its maximum execution time

438
00:18:46,160 --> 00:18:48,720
and we open sourced our

439
00:18:48,720 --> 00:18:50,960
system implementation online and even

440
00:18:50,960 --> 00:18:52,640
though we are still cleaning some codes

441
00:18:52,640 --> 00:18:54,240
most of the

442
00:18:54,240 --> 00:18:56,240
system implementation has been already

443
00:18:56,240 --> 00:18:59,039
available so if you have any questions

444
00:18:59,039 --> 00:19:02,240
feel free to contact us

445
00:19:02,960 --> 00:19:04,559
thank you

446
00:19:04,559 --> 00:19:06,879
thank you

447
00:19:08,840 --> 00:19:13,280
okay we have time for one question

448
00:19:14,640 --> 00:19:16,240
hello uh thanks for the great talk

449
00:19:16,240 --> 00:19:19,360
amanesh from georgia tech uh so earlier

450
00:19:19,360 --> 00:19:20,720
in the talk you had a very interesting

451
00:19:20,720 --> 00:19:22,160
attack where you

452
00:19:22,160 --> 00:19:25,120
slowed down the processor to uh

453
00:19:25,120 --> 00:19:27,200
you know essentially violate the

454
00:19:27,200 --> 00:19:30,400
real-time requirements so does rtte

455
00:19:30,400 --> 00:19:33,200
uh alleviate that attack and if so what

456
00:19:33,200 --> 00:19:35,200
components are responsible for

457
00:19:35,200 --> 00:19:38,240
alleviating the uh solving the issue

458
00:19:38,240 --> 00:19:41,120
okay uh very good question uh actually

459
00:19:41,120 --> 00:19:43,440
uh the uh free uh the

460
00:19:43,440 --> 00:19:46,480
frequency uh configuration uh on

461
00:19:46,480 --> 00:19:50,160
platform is through the mmio so uh if we

462
00:19:50,160 --> 00:19:53,120
assign the mmio address into the secure

463
00:19:53,120 --> 00:19:56,480
world so we can we can just

464
00:19:56,480 --> 00:19:59,360
prevent the malicious os to access the

465
00:19:59,360 --> 00:20:02,960
uh the the frequency uh configuration so

466
00:20:02,960 --> 00:20:05,280
so so this kind of attack can be

467
00:20:05,280 --> 00:20:08,080
prevented oh thanks oh that makes sense

468
00:20:08,080 --> 00:20:10,880
uh so just like a quick follow-up so i i

469
00:20:10,880 --> 00:20:13,200
saw that like we are moving parts of the

470
00:20:13,200 --> 00:20:15,679
kernels slowly by slowly into the secure

471
00:20:15,679 --> 00:20:18,159
world what do you think that entails for

472
00:20:18,159 --> 00:20:19,760
the um uh

473
00:20:19,760 --> 00:20:22,159
the dte right because we are sort of

474
00:20:22,159 --> 00:20:24,799
moving parts of the kernel to the te now

475
00:20:24,799 --> 00:20:27,600
uh sorry sir can you repeat the like for

476
00:20:27,600 --> 00:20:30,880
example parts of the device drivers some

477
00:20:30,880 --> 00:20:32,480
low levels uh

478
00:20:32,480 --> 00:20:34,080
lightweight scheduling for example we

479
00:20:34,080 --> 00:20:36,320
are moving all of them to the tee so

480
00:20:36,320 --> 00:20:38,080
what does that entail

481
00:20:38,080 --> 00:20:40,320
for the te right because now it has more

482
00:20:40,320 --> 00:20:42,559
components the size of the te is increa

483
00:20:42,559 --> 00:20:44,320
the size of the tcv has increased and so

484
00:20:44,320 --> 00:20:46,559
on

485
00:20:46,960 --> 00:20:49,520
sorry i i still uh does not get your

486
00:20:49,520 --> 00:20:51,600
question i think he's worried that the

487
00:20:51,600 --> 00:20:54,320
tcb is increasing because more stuff

488
00:20:54,320 --> 00:20:56,480
you're pushing more things into the te

489
00:20:56,480 --> 00:20:57,679
that's good

490
00:20:57,679 --> 00:20:59,919
uh yes yes very good question uh

491
00:20:59,919 --> 00:21:02,480
actually uh this is a pretty hard

492
00:21:02,480 --> 00:21:05,919
problem if uh because we are uh we are

493
00:21:05,919 --> 00:21:08,240
uh trying hard to find a

494
00:21:08,240 --> 00:21:11,520
balance between the uh tcp and the the

495
00:21:11,520 --> 00:21:14,720
the and the functionality

496
00:21:14,720 --> 00:21:18,240
so what we are trying to do is to

497
00:21:18,240 --> 00:21:21,440
migrate more things into the uh into the

498
00:21:21,440 --> 00:21:23,600
secure world the meanwhile uh minimize

499
00:21:23,600 --> 00:21:26,640
the tcp so you can see how we use the

500
00:21:26,640 --> 00:21:28,799
driver deploying or the hierarchical

501
00:21:28,799 --> 00:21:31,600
scheduling all of these cnc is want to

502
00:21:31,600 --> 00:21:33,679
give the secure word the needed

503
00:21:33,679 --> 00:21:36,799
functionality but reduce the tcp

504
00:21:36,799 --> 00:21:38,880
make sense very interesting thanks okay

505
00:21:38,880 --> 00:21:42,760
thank you thank you

506
00:21:44,799 --> 00:21:46,879
you

