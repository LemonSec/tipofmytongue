1
00:00:00,000 --> 00:00:02,760
years all right thank you

2
00:00:02,760 --> 00:00:04,859
um yeah hello welcome everybody uh so

3
00:00:04,859 --> 00:00:06,259
I'm Sanjay I'm here to talk about

4
00:00:06,259 --> 00:00:09,000
practical foundations for software

5
00:00:09,000 --> 00:00:11,160
Specter defenses

6
00:00:11,160 --> 00:00:13,440
so kind of getting into things so what

7
00:00:13,440 --> 00:00:15,900
exactly is a specter attack so I'll

8
00:00:15,900 --> 00:00:18,240
continue by way of example so Specter is

9
00:00:18,240 --> 00:00:21,180
this kind of really strange uh attack

10
00:00:21,180 --> 00:00:23,939
that kind of destroys how we think about

11
00:00:23,939 --> 00:00:26,220
how processors should function in some

12
00:00:26,220 --> 00:00:28,980
sense so in this example code we're just

13
00:00:28,980 --> 00:00:31,340
accessing some array at some index and

14
00:00:31,340 --> 00:00:33,540
standard memory safety checks we want to

15
00:00:33,540 --> 00:00:34,920
make sure that the index is within

16
00:00:34,920 --> 00:00:37,559
bounds of the array before we access it

17
00:00:37,559 --> 00:00:39,840
so we have this benign data we're

18
00:00:39,840 --> 00:00:41,520
accessing it somewhere within bounds we

19
00:00:41,520 --> 00:00:43,079
want to make sure that that's the case

20
00:00:43,079 --> 00:00:46,200
but processors don't actually execute

21
00:00:46,200 --> 00:00:48,480
instructions step by step in the

22
00:00:48,480 --> 00:00:50,340
interest of performance they'll actually

23
00:00:50,340 --> 00:00:52,680
try to work ahead guess ahead what

24
00:00:52,680 --> 00:00:53,699
they're going to do and so when they

25
00:00:53,699 --> 00:00:55,680
encounter a branch the processor is

26
00:00:55,680 --> 00:00:58,199
going to use a branch predictor to

27
00:00:58,199 --> 00:00:59,820
determine whether or not it's actually

28
00:00:59,820 --> 00:01:01,079
going to go into the branch without

29
00:01:01,079 --> 00:01:03,420
actually needing to calculate out any of

30
00:01:03,420 --> 00:01:04,559
the data

31
00:01:04,559 --> 00:01:06,060
but the problem with prediction

32
00:01:06,060 --> 00:01:07,740
mechanisms is of course that they can

33
00:01:07,740 --> 00:01:11,760
mispredict so if it turns out that I is

34
00:01:11,760 --> 00:01:14,880
somehow way outside of the normal bounds

35
00:01:14,880 --> 00:01:17,220
but the processor somehow mispredicts

36
00:01:17,220 --> 00:01:18,960
and ends up inside this Branch anyway

37
00:01:18,960 --> 00:01:21,360
then it's still going to continue to use

38
00:01:21,360 --> 00:01:24,240
I as an index for this array access and

39
00:01:24,240 --> 00:01:27,000
end up pulling in this very out of

40
00:01:27,000 --> 00:01:28,799
bounds data

41
00:01:28,799 --> 00:01:31,020
and that data is going to go on to be

42
00:01:31,020 --> 00:01:33,420
leaked potentially and so if an attacker

43
00:01:33,420 --> 00:01:35,100
can exploit this in some way where they

44
00:01:35,100 --> 00:01:36,780
can control the value of I and they can

45
00:01:36,780 --> 00:01:38,820
force the processor to mispredict then

46
00:01:38,820 --> 00:01:40,920
they can end up leaking arbitrary data

47
00:01:40,920 --> 00:01:42,540
from this process

48
00:01:42,540 --> 00:01:43,860
and so that's

49
00:01:43,860 --> 00:01:45,540
what we see in these Spectra attacks but

50
00:01:45,540 --> 00:01:49,020
that's only one form of Specter attack

51
00:01:49,020 --> 00:01:51,780
and that's coming from misprediction of

52
00:01:51,780 --> 00:01:53,159
conditional branches it turns out

53
00:01:53,159 --> 00:01:55,079
there's lots of different prediction

54
00:01:55,079 --> 00:01:58,259
features in modern processors see we

55
00:01:58,259 --> 00:02:00,420
have whenever you return from a function

56
00:02:00,420 --> 00:02:02,340
call the processor is going to predict

57
00:02:02,340 --> 00:02:05,460
where to go back to for indirect jumps

58
00:02:05,460 --> 00:02:07,619
it needs to determine where to jump to

59
00:02:07,619 --> 00:02:09,660
next and potentially guess anywhere else

60
00:02:09,660 --> 00:02:11,879
in the program and in addition to

61
00:02:11,879 --> 00:02:13,500
control flow there's also data flow

62
00:02:13,500 --> 00:02:15,540
prediction so if you have a whole bunch

63
00:02:15,540 --> 00:02:17,160
of loads in stores in recent history

64
00:02:17,160 --> 00:02:19,860
then the processor will try to predict

65
00:02:19,860 --> 00:02:21,660
whether or not certain loads in stores

66
00:02:21,660 --> 00:02:23,819
Alias with each other or not and forward

67
00:02:23,819 --> 00:02:26,640
data accordingly and all of these as

68
00:02:26,640 --> 00:02:28,800
prediction mechanisms can be exploited

69
00:02:28,800 --> 00:02:32,400
by an attacker to mispredict and lead to

70
00:02:32,400 --> 00:02:35,340
revealing secret data

71
00:02:35,340 --> 00:02:37,080
and the problem that we see is that with

72
00:02:37,080 --> 00:02:39,239
this wide range of attacks uh We've

73
00:02:39,239 --> 00:02:40,980
there's been a lot of essentially ad hoc

74
00:02:40,980 --> 00:02:43,200
mitigations where people find the tax

75
00:02:43,200 --> 00:02:45,599
and then patch those specific things and

76
00:02:45,599 --> 00:02:47,700
uh there's not really been a principled

77
00:02:47,700 --> 00:02:50,459
approach so the uh back when inspector

78
00:02:50,459 --> 00:02:51,900
was first discovered the Microsoft

79
00:02:51,900 --> 00:02:55,980
compiler introduced a compilation flag Q

80
00:02:55,980 --> 00:02:58,019
Specter That was supposed to find

81
00:02:58,019 --> 00:03:00,720
Specter attacks and mitigate them but

82
00:03:00,720 --> 00:03:03,120
the way it was doing that was by looking

83
00:03:03,120 --> 00:03:05,879
for patterns in the C source code

84
00:03:05,879 --> 00:03:08,459
and so if you had a very slightly

85
00:03:08,459 --> 00:03:10,920
different source code pattern that would

86
00:03:10,920 --> 00:03:12,900
still result in a specter attack the

87
00:03:12,900 --> 00:03:14,340
compiler would just not be able to catch

88
00:03:14,340 --> 00:03:15,300
it because it's looking for very

89
00:03:15,300 --> 00:03:17,280
specific patterns so it misses a lot of

90
00:03:17,280 --> 00:03:18,840
attacks

91
00:03:18,840 --> 00:03:21,480
um similarly with Linux in their evpf

92
00:03:21,480 --> 00:03:22,319
code

93
00:03:22,319 --> 00:03:24,659
um so the the ebpf system in Linux

94
00:03:24,659 --> 00:03:27,299
allows you to essentially run user

95
00:03:27,299 --> 00:03:29,459
programs in the kernel space and so they

96
00:03:29,459 --> 00:03:31,019
need to make sure that that's protected

97
00:03:31,019 --> 00:03:33,000
from these kinds of attacks and there's

98
00:03:33,000 --> 00:03:35,340
been a series of patches where they find

99
00:03:35,340 --> 00:03:37,319
an attack patch it find another attack

100
00:03:37,319 --> 00:03:39,900
patch it and so on

101
00:03:39,900 --> 00:03:42,659
and um Google Chrome as the browser has

102
00:03:42,659 --> 00:03:44,159
actually been trying to prevent Specter

103
00:03:44,159 --> 00:03:46,440
attacks as well from uh malicious

104
00:03:46,440 --> 00:03:49,200
JavaScript and they've introduced what

105
00:03:49,200 --> 00:03:51,780
they call strict site isolation uh to

106
00:03:51,780 --> 00:03:54,420
separate processes and try to make sure

107
00:03:54,420 --> 00:03:55,920
that they can't affect each other and if

108
00:03:55,920 --> 00:03:57,900
you stick around later in this track uh

109
00:03:57,900 --> 00:03:59,700
you'll hear folks talking about spook JS

110
00:03:59,700 --> 00:04:02,700
which shows that this actually doesn't

111
00:04:02,700 --> 00:04:05,220
really work

112
00:04:05,220 --> 00:04:07,860
and so like I said the reason that that

113
00:04:07,860 --> 00:04:09,720
these are all kind of failing is that

114
00:04:09,720 --> 00:04:11,340
there is no underlying principled

115
00:04:11,340 --> 00:04:13,739
approach here and what we really need is

116
00:04:13,739 --> 00:04:16,380
formal methods to to determine what

117
00:04:16,380 --> 00:04:18,298
exactly we're going to do and make sure

118
00:04:18,298 --> 00:04:19,978
we have a sound approach to protecting

119
00:04:19,978 --> 00:04:22,440
against these Spectra attacks

120
00:04:22,440 --> 00:04:24,960
and so to be able to do that you need to

121
00:04:24,960 --> 00:04:26,699
make sure you are picking the right

122
00:04:26,699 --> 00:04:28,620
attacker model for the kinds of programs

123
00:04:28,620 --> 00:04:30,120
that you're trying to protect and once

124
00:04:30,120 --> 00:04:31,979
you have that attacker model we can

125
00:04:31,979 --> 00:04:33,960
start using that as a guide to build

126
00:04:33,960 --> 00:04:35,880
back up to the security properties that

127
00:04:35,880 --> 00:04:39,800
we lost because of speculative execution

128
00:04:39,840 --> 00:04:41,160
and this first step picking the right

129
00:04:41,160 --> 00:04:44,400
attacker model is kind of non-trivial

130
00:04:44,400 --> 00:04:45,660
um so some of the papers that we've

131
00:04:45,660 --> 00:04:47,160
looked at

132
00:04:47,160 --> 00:04:48,600
um so for example Specter is here to

133
00:04:48,600 --> 00:04:50,280
stay was one of the earlier papers where

134
00:04:50,280 --> 00:04:52,139
they had a model where the attacker can

135
00:04:52,139 --> 00:04:55,380
read a step counter of your program but

136
00:04:55,380 --> 00:04:57,300
that is going to miss a whole bunch of

137
00:04:57,300 --> 00:04:59,280
attacks based on control flow that would

138
00:04:59,280 --> 00:05:01,740
leak via features like Port contention

139
00:05:01,740 --> 00:05:03,600
or register pressure things like that it

140
00:05:03,600 --> 00:05:06,600
misses a whole class of leakage there is

141
00:05:06,600 --> 00:05:10,620
also another paper 007 where they find

142
00:05:10,620 --> 00:05:13,500
Specter attacks based on what the

143
00:05:13,500 --> 00:05:16,320
attacker can influence but that leaves

144
00:05:16,320 --> 00:05:18,180
out any attacks that happen through

145
00:05:18,180 --> 00:05:20,400
cross-process miss training and so again

146
00:05:20,400 --> 00:05:23,580
we miss a whole class of attacks

147
00:05:23,580 --> 00:05:25,259
and these are real attacks that have

148
00:05:25,259 --> 00:05:26,940
been demonstrated so it's clear that we

149
00:05:26,940 --> 00:05:28,320
do need to be able to capture these

150
00:05:28,320 --> 00:05:29,340
sorts of things

151
00:05:29,340 --> 00:05:31,199
but on the other end of the spectrum we

152
00:05:31,199 --> 00:05:32,880
have papers like Constantine foundations

153
00:05:32,880 --> 00:05:36,720
and inspector that are very expressive

154
00:05:36,720 --> 00:05:39,120
they allow you they allow the attacker

155
00:05:39,120 --> 00:05:42,060
the power to control uh the entire range

156
00:05:42,060 --> 00:05:43,199
of execution all of the instruction

157
00:05:43,199 --> 00:05:45,900
scheduling and allow for arbitrary

158
00:05:45,900 --> 00:05:48,539
misprediction of values and so they can

159
00:05:48,539 --> 00:05:50,220
actually represent all of these

160
00:05:50,220 --> 00:05:51,840
different Specter attacks in their model

161
00:05:51,840 --> 00:05:54,060
but if you try to use a model that's

162
00:05:54,060 --> 00:05:57,120
this broad for an actual practical tool

163
00:05:57,120 --> 00:05:59,759
it doesn't work out you would just end

164
00:05:59,759 --> 00:06:03,680
up with far too many false positives

165
00:06:04,199 --> 00:06:06,180
um and so we really need a sweet spot of

166
00:06:06,180 --> 00:06:08,880
abstraction where we can kind of analyze

167
00:06:08,880 --> 00:06:10,620
programs in a same way

168
00:06:10,620 --> 00:06:11,880
and

169
00:06:11,880 --> 00:06:13,740
looking at all the the papers that have

170
00:06:13,740 --> 00:06:16,500
come out thus far we see two major

171
00:06:16,500 --> 00:06:18,840
domains of programs where we can apply

172
00:06:18,840 --> 00:06:21,000
these sorts of things so there's a

173
00:06:21,000 --> 00:06:24,360
crypto code and there's sandbox systems

174
00:06:24,360 --> 00:06:26,880
so for cryptographic code

175
00:06:26,880 --> 00:06:30,000
you have very explicitly marked secrets

176
00:06:30,000 --> 00:06:32,100
so you have secret Keys you have uh

177
00:06:32,100 --> 00:06:33,840
plain text and you want to be able to

178
00:06:33,840 --> 00:06:35,699
compute on these without leaking those

179
00:06:35,699 --> 00:06:38,940
values to an attacker

180
00:06:38,940 --> 00:06:41,819
and so tools like uh the ones developed

181
00:06:41,819 --> 00:06:43,319
in high Insurance cryptography and in

182
00:06:43,319 --> 00:06:44,580
hunting the Haunter

183
00:06:44,580 --> 00:06:47,039
build on top of existing practices that

184
00:06:47,039 --> 00:06:49,199
we've been using to secure cryptographic

185
00:06:49,199 --> 00:06:50,039
code

186
00:06:50,039 --> 00:06:53,160
so before all the the Specter stuff came

187
00:06:53,160 --> 00:06:55,080
out there was already a great deal of

188
00:06:55,080 --> 00:06:56,520
interest in preventing timing side

189
00:06:56,520 --> 00:06:59,400
channels in cryptographic code using uh

190
00:06:59,400 --> 00:07:01,199
what we call the the constant time

191
00:07:01,199 --> 00:07:03,300
security model so in the constant time

192
00:07:03,300 --> 00:07:05,580
security model the control flow of the

193
00:07:05,580 --> 00:07:07,800
program and the memory Trace should not

194
00:07:07,800 --> 00:07:10,319
be affected At All by secrets and that's

195
00:07:10,319 --> 00:07:12,300
how you prevent leakage of these secret

196
00:07:12,300 --> 00:07:14,819
values and so these tools take that idea

197
00:07:14,819 --> 00:07:17,099
of constant time leakage and translate

198
00:07:17,099 --> 00:07:19,860
it to speculative execution

199
00:07:19,860 --> 00:07:22,319
and they can do a pretty powerful

200
00:07:22,319 --> 00:07:24,479
analysis because we know that

201
00:07:24,479 --> 00:07:26,520
cryptographic code generally has very

202
00:07:26,520 --> 00:07:28,139
simple control flow and very structured

203
00:07:28,139 --> 00:07:30,360
data so there isn't a whole range of

204
00:07:30,360 --> 00:07:32,400
mispredictions that can happen they can

205
00:07:32,400 --> 00:07:35,819
actually feasibly analyze uh the

206
00:07:35,819 --> 00:07:38,340
different mispredicted paths and so they

207
00:07:38,340 --> 00:07:40,020
they take the idea of sequential

208
00:07:40,020 --> 00:07:41,759
constant time and just translate it to

209
00:07:41,759 --> 00:07:44,720
speculative semantics

210
00:07:44,879 --> 00:07:48,120
so similarly we see something in the

211
00:07:48,120 --> 00:07:51,979
same sort of thing in sandbox systems

212
00:07:52,020 --> 00:07:53,819
so sandbox systems you want to be able

213
00:07:53,819 --> 00:07:56,819
to run untrusted code while keeping it

214
00:07:56,819 --> 00:07:58,860
isolated so like Linux ebpf like I

215
00:07:58,860 --> 00:08:00,360
mentioned earlier or in your browser

216
00:08:00,360 --> 00:08:03,360
JavaScript webassembly you have code

217
00:08:03,360 --> 00:08:05,099
that could be potentially malicious and

218
00:08:05,099 --> 00:08:08,220
you want to prevent it from

219
00:08:08,220 --> 00:08:10,379
accessing any data from elsewhere in the

220
00:08:10,379 --> 00:08:11,639
system

221
00:08:11,639 --> 00:08:14,840
and so tools like fenkman and swivel

222
00:08:14,840 --> 00:08:18,780
build on top of again existing sandbox

223
00:08:18,780 --> 00:08:20,280
security properties that were developed

224
00:08:20,280 --> 00:08:23,699
in sequential models so we assume that

225
00:08:23,699 --> 00:08:25,800
the attacker can leak anything that it

226
00:08:25,800 --> 00:08:27,479
reads so we don't actually care in this

227
00:08:27,479 --> 00:08:29,280
case about whether you're leaking via

228
00:08:29,280 --> 00:08:30,720
control flow or memory accesses or

229
00:08:30,720 --> 00:08:32,339
something else it's just if the attacker

230
00:08:32,339 --> 00:08:36,320
can access it at all that's bad

231
00:08:36,659 --> 00:08:38,700
um and in these sandbox systems we know

232
00:08:38,700 --> 00:08:40,260
that the the programs that are submitted

233
00:08:40,260 --> 00:08:41,940
are already highly structured so for

234
00:08:41,940 --> 00:08:44,159
example webassembly and ebpf already

235
00:08:44,159 --> 00:08:46,380
have enforced a very strict memory

236
00:08:46,380 --> 00:08:48,899
safety properties

237
00:08:48,899 --> 00:08:51,420
and since the host has control over the

238
00:08:51,420 --> 00:08:53,640
sandbox they have control over the

239
00:08:53,640 --> 00:08:55,740
sandbox execution so the code that runs

240
00:08:55,740 --> 00:08:57,420
whenever you enter or exit the sandbox

241
00:08:57,420 --> 00:09:00,420
and they also have uh ownership over the

242
00:09:00,420 --> 00:09:01,740
code at this point so they can rewrite

243
00:09:01,740 --> 00:09:04,260
the code to remove any of these

244
00:09:04,260 --> 00:09:06,060
speculative paths and have the program

245
00:09:06,060 --> 00:09:08,399
run as if it was running sequentially or

246
00:09:08,399 --> 00:09:10,140
have the same effects that it would if

247
00:09:10,140 --> 00:09:12,420
it was running sequentially so taking

248
00:09:12,420 --> 00:09:14,459
this idea of sandbox security and again

249
00:09:14,459 --> 00:09:18,800
translating it to the speculative domain

250
00:09:18,899 --> 00:09:21,180
and so once you have the right attacker

251
00:09:21,180 --> 00:09:22,980
model for your domain you can start

252
00:09:22,980 --> 00:09:25,800
recovering these security properties

253
00:09:25,800 --> 00:09:27,360
that were originally lost so like we saw

254
00:09:27,360 --> 00:09:29,339
with crypto code we're taking a

255
00:09:29,339 --> 00:09:31,019
sequential idea and moving it to

256
00:09:31,019 --> 00:09:32,880
speculation with sandboxing with the

257
00:09:32,880 --> 00:09:33,779
same thing

258
00:09:33,779 --> 00:09:36,240
and so we'd like to think that in

259
00:09:36,240 --> 00:09:37,800
general we should be able to take these

260
00:09:37,800 --> 00:09:39,180
sequential security properties and

261
00:09:39,180 --> 00:09:41,040
translate them in the same way to

262
00:09:41,040 --> 00:09:43,680
speculative execution and that's exactly

263
00:09:43,680 --> 00:09:46,200
the kind of tack that tools like Specter

264
00:09:46,200 --> 00:09:48,600
and fast take

265
00:09:48,600 --> 00:09:51,720
so instead of having specific leakage

266
00:09:51,720 --> 00:09:53,640
models they just say we're going to look

267
00:09:53,640 --> 00:09:56,459
at what your program would have leaked

268
00:09:56,459 --> 00:09:59,100
under a normal sequential execution what

269
00:09:59,100 --> 00:10:02,279
you kind of expected to have leaked when

270
00:10:02,279 --> 00:10:03,839
you're running it and we're just going

271
00:10:03,839 --> 00:10:05,459
to make sure that

272
00:10:05,459 --> 00:10:07,800
under speculative execution you don't

273
00:10:07,800 --> 00:10:10,320
leak anything more

274
00:10:10,320 --> 00:10:13,019
and so that frees up the developer to

275
00:10:13,019 --> 00:10:14,579
only have to reason about their program

276
00:10:14,579 --> 00:10:17,640
in a sequential context

277
00:10:17,640 --> 00:10:19,740
and so you don't have to to worry about

278
00:10:19,740 --> 00:10:21,480
what's going on in the underlying

279
00:10:21,480 --> 00:10:23,399
Hardware you just leave that up to one

280
00:10:23,399 --> 00:10:26,600
of these tools to protect you

281
00:10:27,480 --> 00:10:29,339
unfortunately the the work that we've

282
00:10:29,339 --> 00:10:32,100
seen uh so far has kind of been limited

283
00:10:32,100 --> 00:10:35,160
to security properties based on leakage

284
00:10:35,160 --> 00:10:37,019
models so making sure that your programs

285
00:10:37,019 --> 00:10:39,240
don't leak anything more but there are a

286
00:10:39,240 --> 00:10:40,680
whole bunch of other high-level security

287
00:10:40,680 --> 00:10:42,839
properties as well that Specter has

288
00:10:42,839 --> 00:10:45,480
destroyed so everything from General

289
00:10:45,480 --> 00:10:47,940
memory safety type safety control flow

290
00:10:47,940 --> 00:10:50,880
integrity and so on and these are all

291
00:10:50,880 --> 00:10:52,320
very important high-level properties

292
00:10:52,320 --> 00:10:54,060
that have been destroyed because Specter

293
00:10:54,060 --> 00:10:57,240
is such a fundamental low-level bike

294
00:10:57,240 --> 00:10:59,220
so we really want to try to rebuild

295
00:10:59,220 --> 00:11:03,120
security kind of from the ground up

296
00:11:03,120 --> 00:11:06,300
um so we have a the work at the bottom

297
00:11:06,300 --> 00:11:08,279
there's been lots of great tools that

298
00:11:08,279 --> 00:11:10,320
are looking at binary and assembly so

299
00:11:10,320 --> 00:11:13,560
works like binsect and Specter and

300
00:11:13,560 --> 00:11:15,300
um slightly above that tools like

301
00:11:15,300 --> 00:11:18,540
Jasmine which operates on a sort of

302
00:11:18,540 --> 00:11:19,980
structured assembly and blade and

303
00:11:19,980 --> 00:11:23,360
Beckman which operate on an lvmir which

304
00:11:23,360 --> 00:11:25,920
analyze programs and can compile them

305
00:11:25,920 --> 00:11:27,959
down to the binary level and ensure that

306
00:11:27,959 --> 00:11:29,760
they're free from Specter attacks and

307
00:11:29,760 --> 00:11:31,260
going one level higher we have tools

308
00:11:31,260 --> 00:11:34,320
like swivel that can operate on slightly

309
00:11:34,320 --> 00:11:35,399
more structured languages like

310
00:11:35,399 --> 00:11:38,279
webassembly and make sure that in the

311
00:11:38,279 --> 00:11:40,380
translation to one level down they

312
00:11:40,380 --> 00:11:44,820
uphold security from Specter attacks

313
00:11:44,820 --> 00:11:47,820
and so what I really think we should

314
00:11:47,820 --> 00:11:49,620
focus on is being able to take that all

315
00:11:49,620 --> 00:11:52,260
the way up to the highest level so can

316
00:11:52,260 --> 00:11:54,060
we get to the point where we can write

317
00:11:54,060 --> 00:11:56,579
programs in languages like C or rust or

318
00:11:56,579 --> 00:11:59,579
perhaps even Haskell and be able to say

319
00:11:59,579 --> 00:12:01,620
yes this program is going to be free

320
00:12:01,620 --> 00:12:03,660
from Specter attacks

321
00:12:03,660 --> 00:12:05,820
and the work that we need to do to get

322
00:12:05,820 --> 00:12:08,399
there is to focus on these analysis and

323
00:12:08,399 --> 00:12:10,800
compilation techniques so just how

324
00:12:10,800 --> 00:12:13,139
swivel can go from webassembly to a

325
00:12:13,139 --> 00:12:15,000
lower level and preserve Specter Jasmine

326
00:12:15,000 --> 00:12:17,160
blade Ben the same thing I'm taking it

327
00:12:17,160 --> 00:12:18,899
down and at the bottom we have bin

328
00:12:18,899 --> 00:12:20,459
second spectacular that can verify the

329
00:12:20,459 --> 00:12:21,720
bottom level that you're free from

330
00:12:21,720 --> 00:12:23,399
Spectra attack so being able to use

331
00:12:23,399 --> 00:12:25,320
these techniques to go all the way from

332
00:12:25,320 --> 00:12:27,240
the higher levels down to the bottom and

333
00:12:27,240 --> 00:12:29,279
make sure that we're free from Specter

334
00:12:29,279 --> 00:12:31,639
attacks

335
00:12:31,980 --> 00:12:33,899
um so this is actually where I'm going

336
00:12:33,899 --> 00:12:36,660
to leave you all with the talk uh it was

337
00:12:36,660 --> 00:12:38,820
uh we looked at a whole wide variety of

338
00:12:38,820 --> 00:12:40,440
papers there's lots of stuff that I

339
00:12:40,440 --> 00:12:42,120
wasn't able to talk about

340
00:12:42,120 --> 00:12:44,040
um lots more open problems that are very

341
00:12:44,040 --> 00:12:46,380
interesting uh much more in-depth so

342
00:12:46,380 --> 00:12:48,240
please read our paper you find this

343
00:12:48,240 --> 00:12:50,880
interesting and definitely come find me

344
00:12:50,880 --> 00:12:52,019
and talk to me if you're interested in

345
00:12:52,019 --> 00:12:53,700
any of this Specter stuff I'd love to

346
00:12:53,700 --> 00:12:54,860
chat about it

347
00:12:54,860 --> 00:12:58,399
yeah thank you

348
00:12:58,399 --> 00:13:02,300
are uh open for questions

349
00:13:04,800 --> 00:13:07,399
any questions

350
00:13:09,959 --> 00:13:12,720
okay I have a question so one of the

351
00:13:12,720 --> 00:13:15,420
things you said is that with these

352
00:13:15,420 --> 00:13:17,639
software defenses to Specter you are

353
00:13:17,639 --> 00:13:19,320
trying to push to a higher level defense

354
00:13:19,320 --> 00:13:21,180
where you don't care about the details

355
00:13:21,180 --> 00:13:23,459
of the micro architecture yes so what if

356
00:13:23,459 --> 00:13:26,220
the hardware actually told you some of

357
00:13:26,220 --> 00:13:27,660
those details about how the hardware is

358
00:13:27,660 --> 00:13:29,279
working such as the speculation window

359
00:13:29,279 --> 00:13:31,740
the reorder buffer size do you still

360
00:13:31,740 --> 00:13:34,260
recommend against including those pieces

361
00:13:34,260 --> 00:13:36,959
of information into software defenses I

362
00:13:36,959 --> 00:13:39,600
think that gets into how specialized you

363
00:13:39,600 --> 00:13:40,920
would want to be

364
00:13:40,920 --> 00:13:42,720
um so I think it's kind of the same kind

365
00:13:42,720 --> 00:13:43,980
of trade-off that you would see for

366
00:13:43,980 --> 00:13:45,300
example when you're doing optimizations

367
00:13:45,300 --> 00:13:47,760
where the the level of specialization

368
00:13:47,760 --> 00:13:50,160
towards a processor determines how much

369
00:13:50,160 --> 00:13:53,579
performance you can get so uh if you're

370
00:13:53,579 --> 00:13:56,279
trying to write General cryptographic

371
00:13:56,279 --> 00:13:57,959
programs for example that you want to

372
00:13:57,959 --> 00:13:59,519
know or secure in a wide variety of

373
00:13:59,519 --> 00:14:01,680
processors you would want to abstract

374
00:14:01,680 --> 00:14:03,420
over that but if you're for example

375
00:14:03,420 --> 00:14:07,079
writing like a very dedicated Intel x86

376
00:14:07,079 --> 00:14:08,760
library then maybe you would want to be

377
00:14:08,760 --> 00:14:10,019
able to exploit some of those features

378
00:14:10,019 --> 00:14:14,720
while knowing that it's still secure

379
00:14:15,000 --> 00:14:18,000
yeah yep uh so it looks to me from this

380
00:14:18,000 --> 00:14:20,339
slide that much of the work had been

381
00:14:20,339 --> 00:14:22,320
done like in different layers right so

382
00:14:22,320 --> 00:14:23,820
and I assume that you have some kind of

383
00:14:23,820 --> 00:14:25,199
like semantic for all these kind of like

384
00:14:25,199 --> 00:14:27,300
levels is there any work in actually

385
00:14:27,300 --> 00:14:29,339
trying to relate from one layer to the

386
00:14:29,339 --> 00:14:31,320
other already like some compilation

387
00:14:31,320 --> 00:14:33,360
steps like saying if this happened and

388
00:14:33,360 --> 00:14:35,160
my compiler that this then I guarantee

389
00:14:35,160 --> 00:14:36,899
that in the lower level like the results

390
00:14:36,899 --> 00:14:40,320
are going to remain yes uh so I know

391
00:14:40,320 --> 00:14:43,620
that um blade for sure does that it sets

392
00:14:43,620 --> 00:14:46,199
up a a simple language that represents

393
00:14:46,199 --> 00:14:48,959
the llvm IR that it produces and then

394
00:14:48,959 --> 00:14:51,000
translates that to another semantics

395
00:14:51,000 --> 00:14:53,220
that represents the assembly and shows

396
00:14:53,220 --> 00:14:54,660
that after the translation the assembly

397
00:14:54,660 --> 00:14:56,040
is still going to be free from Specter

398
00:14:56,040 --> 00:14:59,760
there's also a paper uh it's Hardware

399
00:14:59,760 --> 00:15:01,620
software contracts that does a similar

400
00:15:01,620 --> 00:15:02,579
thing

401
00:15:02,579 --> 00:15:05,220
um but comparing software semantics to

402
00:15:05,220 --> 00:15:08,040
what the hardware promises so going even

403
00:15:08,040 --> 00:15:10,860
one step below that and and showing how

404
00:15:10,860 --> 00:15:13,740
you can compare the software versus

405
00:15:13,740 --> 00:15:15,240
what's actually running on the hardware

406
00:15:15,240 --> 00:15:16,920
so it's some kind of a refinement

407
00:15:16,920 --> 00:15:19,139
relation I guess essentially yeah okay

408
00:15:19,139 --> 00:15:21,620
thanks yeah

409
00:15:23,399 --> 00:15:26,839
yeah we have time for one more question

410
00:15:29,160 --> 00:15:31,800
okay well I'll ask one last question so

411
00:15:31,800 --> 00:15:33,720
um one of the things that you talked

412
00:15:33,720 --> 00:15:35,339
about at the beginning of the talk was a

413
00:15:35,339 --> 00:15:37,680
strict process isolation yes so how

414
00:15:37,680 --> 00:15:39,540
would you model strict process isolation

415
00:15:39,540 --> 00:15:41,940
as a software mitigation using these

416
00:15:41,940 --> 00:15:43,199
foundations that you describe in your

417
00:15:43,199 --> 00:15:45,779
paper so I would consider it so in terms

418
00:15:45,779 --> 00:15:47,459
of the models that I presented here I

419
00:15:47,459 --> 00:15:50,399
would consider it a form of sandboxing

420
00:15:50,399 --> 00:15:52,560
um where you have all of these different

421
00:15:52,560 --> 00:15:54,600
processes would you could treat them as

422
00:15:54,600 --> 00:15:55,920
different sandboxes and you'd have to

423
00:15:55,920 --> 00:15:57,660
make sure that you're making the right

424
00:15:57,660 --> 00:15:59,339
assumptions about what is actually going

425
00:15:59,339 --> 00:16:01,560
uh what data can be shared between the

426
00:16:01,560 --> 00:16:02,820
different sandboxes and how they're set

427
00:16:02,820 --> 00:16:04,440
up

428
00:16:04,440 --> 00:16:06,779
right okay let's thank the speaker once

429
00:16:06,779 --> 00:16:07,440
again

430
00:16:07,440 --> 00:16:09,800
right

