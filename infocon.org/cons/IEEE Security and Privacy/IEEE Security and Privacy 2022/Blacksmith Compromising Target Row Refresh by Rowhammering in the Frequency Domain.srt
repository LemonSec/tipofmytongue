1
00:00:01,740 --> 00:00:04,080
so welcome my name is Patrick and today

2
00:00:04,080 --> 00:00:05,940
I will present you blacksmith scalable

3
00:00:05,940 --> 00:00:09,000
raw hammering in the frequency domain

4
00:00:09,000 --> 00:00:10,980
so we've seen in the past the drawhammer

5
00:00:10,980 --> 00:00:13,320
bit flips can compromise data integrity

6
00:00:13,320 --> 00:00:15,299
and as a reaction to that there are

7
00:00:15,299 --> 00:00:17,100
manufacturers such as Samsung and Micron

8
00:00:17,100 --> 00:00:18,779
Deploy mitigations on their devices

9
00:00:18,779 --> 00:00:21,180
called Target draw refresh

10
00:00:21,180 --> 00:00:23,039
these mitigations essentially try to

11
00:00:23,039 --> 00:00:24,539
estimate the rows that have been

12
00:00:24,539 --> 00:00:27,060
accessed most frequently and then sent a

13
00:00:27,060 --> 00:00:28,920
preventive refresh before the periodic

14
00:00:28,920 --> 00:00:31,140
refresh happens

15
00:00:31,140 --> 00:00:34,079
however dram technology scaling has

16
00:00:34,079 --> 00:00:35,640
drastically reduced the number of

17
00:00:35,640 --> 00:00:38,040
hammers required by the aggressors to

18
00:00:38,040 --> 00:00:39,899
trigger bit flips and this makes this

19
00:00:39,899 --> 00:00:42,360
estimation very challenging

20
00:00:42,360 --> 00:00:44,940
still today there exists no tool or

21
00:00:44,940 --> 00:00:46,860
methodology that allows you to estimate

22
00:00:46,860 --> 00:00:49,620
how well these estimations work and to

23
00:00:49,620 --> 00:00:51,420
explore the corner cases

24
00:00:51,420 --> 00:00:54,000
today I present you blacksmith a new

25
00:00:54,000 --> 00:00:55,379
tool that allows you to thoroughly

26
00:00:55,379 --> 00:00:57,840
assess drum devices

27
00:00:57,840 --> 00:01:01,500
and we found with blacksmith that trr on

28
00:01:01,500 --> 00:01:04,500
all ddr4 and lpddr for X devices in our

29
00:01:04,500 --> 00:01:06,659
test pool is broken

30
00:01:06,659 --> 00:01:09,299
to get started let me briefly introduce

31
00:01:09,299 --> 00:01:10,140
you

32
00:01:10,140 --> 00:01:12,299
um drum and raw Hammer so here you can

33
00:01:12,299 --> 00:01:16,140
see a PC udem with HD RAM chips each of

34
00:01:16,140 --> 00:01:19,020
these chips is composed of multiple drum

35
00:01:19,020 --> 00:01:21,659
banks that are organized like a metrics

36
00:01:21,659 --> 00:01:24,299
and to exploit drawhammer you typically

37
00:01:24,299 --> 00:01:27,900
have two aggressor rows here in red and

38
00:01:27,900 --> 00:01:29,820
then you access them over and over again

39
00:01:29,820 --> 00:01:32,220
many times and very quickly

40
00:01:32,220 --> 00:01:34,560
this leads to charges that leak from the

41
00:01:34,560 --> 00:01:36,840
capacitors in the victim Road this is in

42
00:01:36,840 --> 00:01:39,240
between those two aggressor rows and

43
00:01:39,240 --> 00:01:42,899
then eventually you will see a bit flip

44
00:01:42,899 --> 00:01:44,759
it has been shown to draw him attacks

45
00:01:44,759 --> 00:01:45,960
are very practical in many different

46
00:01:45,960 --> 00:01:48,780
scenarios for example row Hammer is

47
00:01:48,780 --> 00:01:50,460
possible in the browser via JavaScript

48
00:01:50,460 --> 00:01:53,460
on smartphones and even over the network

49
00:01:53,460 --> 00:01:56,579
it has also been shown the devices that

50
00:01:56,579 --> 00:01:58,320
use error correcting codes are

51
00:01:58,320 --> 00:02:01,639
vulnerable against raw hammer

52
00:02:02,700 --> 00:02:05,100
so let me explain the rohama problem a

53
00:02:05,100 --> 00:02:06,540
bit more in depth from an attacker's

54
00:02:06,540 --> 00:02:07,560
perspective

55
00:02:07,560 --> 00:02:09,840
so you have to know that dram uses the

56
00:02:09,840 --> 00:02:12,239
DDR protocol and this protocol is

57
00:02:12,239 --> 00:02:14,280
specified by the jdex standard

58
00:02:14,280 --> 00:02:16,560
and it's a synchronous protocol this

59
00:02:16,560 --> 00:02:18,959
means that all dram commands must deter

60
00:02:18,959 --> 00:02:21,660
to specific timing requirements one of

61
00:02:21,660 --> 00:02:23,520
these timing requirements is that each

62
00:02:23,520 --> 00:02:26,099
cell on a dram device has to retain its

63
00:02:26,099 --> 00:02:29,459
information for at least 64 milliseconds

64
00:02:29,459 --> 00:02:31,379
and to achieve this

65
00:02:31,379 --> 00:02:33,959
and the memory controller and the CPU

66
00:02:33,959 --> 00:02:37,260
sends periodic refresh commands on ddr4

67
00:02:37,260 --> 00:02:39,239
devices on average every 7.8

68
00:02:39,239 --> 00:02:41,819
microseconds and each of these refresh

69
00:02:41,819 --> 00:02:44,819
commands refreshes a few of these cells

70
00:02:44,819 --> 00:02:47,040
in a drum device

71
00:02:47,040 --> 00:02:49,019
and this can be visualized in a timeline

72
00:02:49,019 --> 00:02:51,540
so here you can see a refresh window of

73
00:02:51,540 --> 00:02:54,420
64 milliseconds and in between of two

74
00:02:54,420 --> 00:02:56,640
consecutive refresh commands we can

75
00:02:56,640 --> 00:02:59,940
issue around 166 activations

76
00:02:59,940 --> 00:03:02,700
so this means that an attacker has

77
00:03:02,700 --> 00:03:05,760
around 1.3 million of activations where

78
00:03:05,760 --> 00:03:06,959
they can spread hammering their

79
00:03:06,959 --> 00:03:09,180
aggressors

80
00:03:09,180 --> 00:03:11,159
and what existing patterns do for

81
00:03:11,159 --> 00:03:13,860
example six-sided patterns is that they

82
00:03:13,860 --> 00:03:15,840
access the aggressors for example here

83
00:03:15,840 --> 00:03:18,540
aggressor 1 aggressor 2 and so forth up

84
00:03:18,540 --> 00:03:21,360
to aggressor 6 and then this builds the

85
00:03:21,360 --> 00:03:23,280
first round of pattern execution and

86
00:03:23,280 --> 00:03:24,720
this thing gets repeated over and over

87
00:03:24,720 --> 00:03:27,180
again for example n rounds covering a

88
00:03:27,180 --> 00:03:29,580
whole refresh interval

89
00:03:29,580 --> 00:03:32,280
let's now switch to perspective to the

90
00:03:32,280 --> 00:03:35,640
view of the defense of the mitigation

91
00:03:35,640 --> 00:03:37,500
so I will now explain how a mitigation

92
00:03:37,500 --> 00:03:39,959
Works a deterministic one but there are

93
00:03:39,959 --> 00:03:41,519
also probabilistic ones

94
00:03:41,519 --> 00:03:44,580
so during normal activation

95
00:03:44,580 --> 00:03:46,379
um there is a component in the device

96
00:03:46,379 --> 00:03:48,840
called the sampler looks at the drum

97
00:03:48,840 --> 00:03:50,459
activation commands and tries to

98
00:03:50,459 --> 00:03:52,379
estimate the row that has been accessed

99
00:03:52,379 --> 00:03:54,599
most frequently so in this example it

100
00:03:54,599 --> 00:03:56,040
would be Row D

101
00:03:56,040 --> 00:03:57,959
and then stores this information in a

102
00:03:57,959 --> 00:03:59,819
data structure

103
00:03:59,819 --> 00:04:01,799
and then at refresh time there's another

104
00:04:01,799 --> 00:04:04,379
component called inhibitor that takes

105
00:04:04,379 --> 00:04:07,080
this estimate so here Row D and the

106
00:04:07,080 --> 00:04:09,239
intense a preventive so an additional

107
00:04:09,239 --> 00:04:11,040
refresh called Target or refresh to that

108
00:04:11,040 --> 00:04:14,159
row before any bit flips can happen

109
00:04:14,159 --> 00:04:16,380
and this problem of estimating the most

110
00:04:16,380 --> 00:04:18,358
frequently activated row

111
00:04:18,358 --> 00:04:20,220
is a well-studied problem

112
00:04:20,220 --> 00:04:22,440
um solved by frequent item count

113
00:04:22,440 --> 00:04:25,020
algorithms however adapting those to

114
00:04:25,020 --> 00:04:27,300
dram devices is very challenging because

115
00:04:27,300 --> 00:04:28,979
in the drum device we have limited area

116
00:04:28,979 --> 00:04:31,560
so we cannot have a counter for each row

117
00:04:31,560 --> 00:04:33,479
then there are these timing requirements

118
00:04:33,479 --> 00:04:35,759
that I mentioned before

119
00:04:35,759 --> 00:04:38,040
and existing mitigations are deployed in

120
00:04:38,040 --> 00:04:40,139
devices lack a proper formal security

121
00:04:40,139 --> 00:04:43,020
analysis

122
00:04:43,020 --> 00:04:45,180
another point is the dram is becoming

123
00:04:45,180 --> 00:04:47,400
more vulnerable so if you look back when

124
00:04:47,400 --> 00:04:50,040
roheimer was first discovered in 2012

125
00:04:50,040 --> 00:04:51,960
with DDR3

126
00:04:51,960 --> 00:04:55,740
around 139 000 activations were required

127
00:04:55,740 --> 00:04:57,300
to trigger bit flips

128
00:04:57,300 --> 00:05:00,840
the newer devices using ddr4 produced

129
00:05:00,840 --> 00:05:04,199
image 2019 only require around 10 000

130
00:05:04,199 --> 00:05:06,539
activations to aggressors to trigger bit

131
00:05:06,539 --> 00:05:08,280
flips

132
00:05:08,280 --> 00:05:10,380
and this potentially allows us to craft

133
00:05:10,380 --> 00:05:12,360
new attack patterns where each of the

134
00:05:12,360 --> 00:05:15,860
aggressors is helmet less than before

135
00:05:15,900 --> 00:05:18,060
so we started our investigation by

136
00:05:18,060 --> 00:05:19,919
looking at existing rohama patterns so

137
00:05:19,919 --> 00:05:21,720
here you can see three examples you can

138
00:05:21,720 --> 00:05:23,699
see a single-sided pattern where we have

139
00:05:23,699 --> 00:05:26,100
two aggressors that are far apart the

140
00:05:26,100 --> 00:05:27,539
double-sided pattern that I showed

141
00:05:27,539 --> 00:05:29,820
before and a four-sided pattern which is

142
00:05:29,820 --> 00:05:32,220
an example for an n-sided pattern with n

143
00:05:32,220 --> 00:05:33,720
equals four

144
00:05:33,720 --> 00:05:35,940
and we made the key observation

145
00:05:35,940 --> 00:05:37,919
that all of these existing patterns

146
00:05:37,919 --> 00:05:39,900
Hammer the aggresses the same number of

147
00:05:39,900 --> 00:05:42,660
times so with the same axis frequency

148
00:05:42,660 --> 00:05:44,699
and we asked ourselves if this is

149
00:05:44,699 --> 00:05:46,199
something that mitigations might have

150
00:05:46,199 --> 00:05:48,120
taken into account to facilitate

151
00:05:48,120 --> 00:05:51,419
tracking the aggressor rows

152
00:05:51,419 --> 00:05:53,100
and for that we wanted to know if

153
00:05:53,100 --> 00:05:55,500
non-uniformity can help to bypass Rohana

154
00:05:55,500 --> 00:05:56,759
mitigations

155
00:05:56,759 --> 00:05:58,380
to answer that we have designed two

156
00:05:58,380 --> 00:06:00,660
experiments so in the first experiment

157
00:06:00,660 --> 00:06:03,240
we take n-sided patterns and introduce

158
00:06:03,240 --> 00:06:05,720
some non-uniformity by replacing

159
00:06:05,720 --> 00:06:08,520
aggressors in random rounds by a

160
00:06:08,520 --> 00:06:09,900
dedicated

161
00:06:09,900 --> 00:06:11,759
aggressive pair so here in this example

162
00:06:11,759 --> 00:06:13,680
row 13 and 15.

163
00:06:13,680 --> 00:06:16,020
and in the second experiment we have

164
00:06:16,020 --> 00:06:17,699
complete random patterns so we have

165
00:06:17,699 --> 00:06:20,639
random same bank rows that we access and

166
00:06:20,639 --> 00:06:22,800
then at random rounds and random pattern

167
00:06:22,800 --> 00:06:25,199
locations we access again a double-sided

168
00:06:25,199 --> 00:06:28,139
aggressive pair hero one and three

169
00:06:28,139 --> 00:06:30,240
and we run these two experiments on the

170
00:06:30,240 --> 00:06:33,720
40 test devices that we acquired from

171
00:06:33,720 --> 00:06:35,220
the three major manufacturers Samsung

172
00:06:35,220 --> 00:06:36,960
heinix and micron

173
00:06:36,960 --> 00:06:38,880
and here I present to the result of this

174
00:06:38,880 --> 00:06:41,639
experiment so we compare our non-uniform

175
00:06:41,639 --> 00:06:44,280
patterns against n-sided patterns and

176
00:06:44,280 --> 00:06:45,960
what we can see here is that

177
00:06:45,960 --> 00:06:48,000
non-uniformity is really needed on some

178
00:06:48,000 --> 00:06:50,460
devices to bypass the mitigations and

179
00:06:50,460 --> 00:06:51,780
Trigger bit flips

180
00:06:51,780 --> 00:06:53,639
so this is the first observation that we

181
00:06:53,639 --> 00:06:56,099
made that non-uniform aggressor accesses

182
00:06:56,099 --> 00:06:58,020
can lead to effective patterns where

183
00:06:58,020 --> 00:06:59,699
previous and cited patterns could not

184
00:06:59,699 --> 00:07:01,800
trigger any pit flips

185
00:07:01,800 --> 00:07:03,539
although this improved the results by

186
00:07:03,539 --> 00:07:05,340
around 15 percent

187
00:07:05,340 --> 00:07:07,380
there are also cases where uniformity is

188
00:07:07,380 --> 00:07:09,780
needed to trigger bit flips

189
00:07:09,780 --> 00:07:11,340
this is why we designed further

190
00:07:11,340 --> 00:07:13,500
experiment to explore

191
00:07:13,500 --> 00:07:15,780
which properties are important to build

192
00:07:15,780 --> 00:07:18,240
effective patterns so we start with no

193
00:07:18,240 --> 00:07:20,039
assumptions and Incredibly learn the

194
00:07:20,039 --> 00:07:22,199
properties that are important

195
00:07:22,199 --> 00:07:24,120
I will now present the most interesting

196
00:07:24,120 --> 00:07:27,360
results from different devices

197
00:07:27,360 --> 00:07:28,800
so the first thing that we wanted to

198
00:07:28,800 --> 00:07:30,660
know when should we have an aggressor

199
00:07:30,660 --> 00:07:32,340
and for that we built the following

200
00:07:32,340 --> 00:07:34,319
experiment so we have a double-sided

201
00:07:34,319 --> 00:07:36,240
aggressive pair targeting Row one and

202
00:07:36,240 --> 00:07:37,440
three

203
00:07:37,440 --> 00:07:39,240
with a length of one refresh interval

204
00:07:39,240 --> 00:07:42,060
and then it is repeated and in the next

205
00:07:42,060 --> 00:07:44,520
round of the experiment we basically

206
00:07:44,520 --> 00:07:47,160
shift this aggressive Pair by one

207
00:07:47,160 --> 00:07:49,680
position so we do one axis to a random

208
00:07:49,680 --> 00:07:52,139
row of the same bank before and then to

209
00:07:52,139 --> 00:07:54,479
access the three axes and so on

210
00:07:54,479 --> 00:07:57,060
and what we observed here on dim A10

211
00:07:57,060 --> 00:07:59,460
from Samsung is that only if we Hammer

212
00:07:59,460 --> 00:08:01,199
right before the refresh we can trigger

213
00:08:01,199 --> 00:08:02,460
bit flips

214
00:08:02,460 --> 00:08:04,620
and this is our second observation

215
00:08:04,620 --> 00:08:06,240
that is important to access the

216
00:08:06,240 --> 00:08:08,220
aggressors at the right time to bypass

217
00:08:08,220 --> 00:08:09,599
the mitigation

218
00:08:09,599 --> 00:08:11,099
and here in this example this can be

219
00:08:11,099 --> 00:08:13,680
explained by the mitigation so the

220
00:08:13,680 --> 00:08:15,599
sampling might be less active or not

221
00:08:15,599 --> 00:08:19,080
active at all right before refresh

222
00:08:19,080 --> 00:08:21,240
so this property and other properties

223
00:08:21,240 --> 00:08:23,940
that I will introduce in the next slide

224
00:08:23,940 --> 00:08:26,220
can be mapped to concept of the

225
00:08:26,220 --> 00:08:29,340
frequency domain so here the offset maps

226
00:08:29,340 --> 00:08:31,818
to the face

227
00:08:32,279 --> 00:08:33,958
in the next experiment we wanted to know

228
00:08:33,958 --> 00:08:36,059
for how long should we have an aggressor

229
00:08:36,059 --> 00:08:39,360
because if we increase the time that we

230
00:08:39,360 --> 00:08:40,979
have an aggressor we potentially can

231
00:08:40,979 --> 00:08:42,599
trigger more bit flips and this makes

232
00:08:42,599 --> 00:08:44,279
exploitation easier

233
00:08:44,279 --> 00:08:45,600
so we start again with the same

234
00:08:45,600 --> 00:08:48,000
experiment setup as before

235
00:08:48,000 --> 00:08:49,800
that we shift this double-sided

236
00:08:49,800 --> 00:08:52,680
aggressor pair but now additionally we

237
00:08:52,680 --> 00:08:54,779
try more intensities so instead of just

238
00:08:54,779 --> 00:08:56,700
hammering it one time we also try two

239
00:08:56,700 --> 00:08:58,860
times three times Etc

240
00:08:58,860 --> 00:09:01,320
and what we observed here on this device

241
00:09:01,320 --> 00:09:03,899
A10 again is that if we increase the

242
00:09:03,899 --> 00:09:06,000
intensity we can trigger more bit flips

243
00:09:06,000 --> 00:09:09,000
but only up to a certain sweet spot

244
00:09:09,000 --> 00:09:10,920
and then if we go over that sweet spot

245
00:09:10,920 --> 00:09:13,620
then the number of bit flips drops and

246
00:09:13,620 --> 00:09:15,300
this could be explained Again by the

247
00:09:15,300 --> 00:09:17,519
sampler that might sample us too often

248
00:09:17,519 --> 00:09:19,440
if we have a too high hammering

249
00:09:19,440 --> 00:09:21,959
intensity and then sensor tier R before

250
00:09:21,959 --> 00:09:24,660
we can trigger any bit flips

251
00:09:24,660 --> 00:09:26,700
and this concept can be mapped to the

252
00:09:26,700 --> 00:09:29,220
concept of an amplitude where higher

253
00:09:29,220 --> 00:09:30,899
Peak corresponds to a higher hammering

254
00:09:30,899 --> 00:09:33,440
intensity

255
00:09:33,899 --> 00:09:35,519
and the last thing that we wanted to

256
00:09:35,519 --> 00:09:37,140
know if our pattern should be longer

257
00:09:37,140 --> 00:09:39,480
than the than just one refresh interval

258
00:09:39,480 --> 00:09:41,160
as I mentioned before devices are

259
00:09:41,160 --> 00:09:43,260
becoming more vulnerable and this means

260
00:09:43,260 --> 00:09:44,700
that we can build patterns that are

261
00:09:44,700 --> 00:09:47,399
longer the timer aggresses less time

262
00:09:47,399 --> 00:09:49,800
than before so here in this example we

263
00:09:49,800 --> 00:09:51,660
consider a pattern of two refresh

264
00:09:51,660 --> 00:09:54,120
intervals so this means we also have

265
00:09:54,120 --> 00:09:56,220
higher hammering intensities that go

266
00:09:56,220 --> 00:09:58,860
beyond just one refresh interval

267
00:09:58,860 --> 00:10:00,959
and then there are combinations

268
00:10:00,959 --> 00:10:03,720
where we enter for example here where we

269
00:10:03,720 --> 00:10:05,220
only Hammer every second refresh

270
00:10:05,220 --> 00:10:07,320
interval but this interval with very

271
00:10:07,320 --> 00:10:10,200
high hammering intensity

272
00:10:10,200 --> 00:10:12,300
and we made the observation that in fact

273
00:10:12,300 --> 00:10:14,040
exactly that is very important on some

274
00:10:14,040 --> 00:10:17,399
devices like device B2 from heinix only

275
00:10:17,399 --> 00:10:20,160
if we have a with very long patterns and

276
00:10:20,160 --> 00:10:21,600
high intensities we could trigger bit

277
00:10:21,600 --> 00:10:23,820
flips on these devices

278
00:10:23,820 --> 00:10:25,980
and this property maps to the property

279
00:10:25,980 --> 00:10:27,300
or frequency

280
00:10:27,300 --> 00:10:29,279
for example here the frequency of a half

281
00:10:29,279 --> 00:10:31,260
would mean that we only Hammer the

282
00:10:31,260 --> 00:10:33,899
aggressor pair one and three every

283
00:10:33,899 --> 00:10:36,720
second refresh interval

284
00:10:36,720 --> 00:10:39,060
so from these four observations we

285
00:10:39,060 --> 00:10:40,680
derived this property frequency phase

286
00:10:40,680 --> 00:10:42,899
and amplitude that we use to build

287
00:10:42,899 --> 00:10:44,760
frequency based raw Hammer access

288
00:10:44,760 --> 00:10:46,380
patterns

289
00:10:46,380 --> 00:10:48,839
but now the question is how to determine

290
00:10:48,839 --> 00:10:51,180
effective parameter values because the

291
00:10:51,180 --> 00:10:53,220
parameters depend on the mitigation that

292
00:10:53,220 --> 00:10:55,200
is deployed on the device and these

293
00:10:55,200 --> 00:10:58,680
mitigations are different across vendors

294
00:10:58,680 --> 00:11:01,079
and also on different devices from the

295
00:11:01,079 --> 00:11:02,459
same vendor

296
00:11:02,459 --> 00:11:04,680
and we wanted to have a solution that is

297
00:11:04,680 --> 00:11:06,720
scalable that allows us to test a large

298
00:11:06,720 --> 00:11:09,000
number of different devices a generic

299
00:11:09,000 --> 00:11:11,640
solution this is why we generalized our

300
00:11:11,640 --> 00:11:13,200
observations to these three properties

301
00:11:13,200 --> 00:11:16,079
an extensible solution so if vendors

302
00:11:16,079 --> 00:11:19,500
make any change we can refine our model

303
00:11:19,500 --> 00:11:21,839
and for this we build the blacksmith row

304
00:11:21,839 --> 00:11:23,940
hammer fuzzer and the idea of Blackstone

305
00:11:23,940 --> 00:11:25,140
is the following

306
00:11:25,140 --> 00:11:26,579
we have the frequency phase and

307
00:11:26,579 --> 00:11:28,680
amplitude that we randomize

308
00:11:28,680 --> 00:11:30,600
for the different aggressors in our

309
00:11:30,600 --> 00:11:33,120
pattern and we do this in a way so that

310
00:11:33,120 --> 00:11:35,240
we have compatible values so that we can

311
00:11:35,240 --> 00:11:38,040
combine them into one pattern

312
00:11:38,040 --> 00:11:39,779
then we Hammer the pattern and we check

313
00:11:39,779 --> 00:11:41,880
for bit flips and then we repeat this

314
00:11:41,880 --> 00:11:43,620
procedure over again

315
00:11:43,620 --> 00:11:45,540
I will now explain how this pattern

316
00:11:45,540 --> 00:11:47,700
building process works so here you can

317
00:11:47,700 --> 00:11:49,079
see an example

318
00:11:49,079 --> 00:11:50,760
we have

319
00:11:50,760 --> 00:11:53,100
four times six exercises in this simple

320
00:11:53,100 --> 00:11:55,800
example and so we start with step one

321
00:11:55,800 --> 00:11:58,320
where we have an aggressive pair A1 and

322
00:11:58,320 --> 00:12:00,540
A2 for example we choose the frequency

323
00:12:00,540 --> 00:12:03,120
of a half so we exit only every second

324
00:12:03,120 --> 00:12:05,700
base period

325
00:12:05,700 --> 00:12:08,220
then in step two we fill up the same

326
00:12:08,220 --> 00:12:11,279
offset but in the second base period now

327
00:12:11,279 --> 00:12:13,620
the amplitude is locked to one so we

328
00:12:13,620 --> 00:12:15,660
make this to simplify the pattern

329
00:12:15,660 --> 00:12:16,620
creation

330
00:12:16,620 --> 00:12:18,300
and we could choose for example the

331
00:12:18,300 --> 00:12:20,519
frequency of a quarter

332
00:12:20,519 --> 00:12:23,459
and then in the search step we could add

333
00:12:23,459 --> 00:12:26,100
um also at offset zero and the

334
00:12:26,100 --> 00:12:28,079
aggressors A5 and E6 also with the

335
00:12:28,079 --> 00:12:30,839
frequency of a quarter

336
00:12:30,839 --> 00:12:33,000
and then in the fourth step we could add

337
00:12:33,000 --> 00:12:36,480
the aggressors A7 A8 with amplitude for

338
00:12:36,480 --> 00:12:39,300
of two for example and a frequency of a

339
00:12:39,300 --> 00:12:40,260
half

340
00:12:40,260 --> 00:12:41,940
and then in the last step again we would

341
00:12:41,940 --> 00:12:44,339
be forced to use an amplitude of two and

342
00:12:44,339 --> 00:12:46,800
we could have aggressors A9 and 10 with

343
00:12:46,800 --> 00:12:48,839
a frequency of a half for example

344
00:12:48,839 --> 00:12:51,360
and in this way we craft the patterns

345
00:12:51,360 --> 00:12:53,160
so we have different frequency phase and

346
00:12:53,160 --> 00:12:55,260
amplitudes combined into one pattern

347
00:12:55,260 --> 00:12:58,320
which makes the fuzzling very effective

348
00:12:58,320 --> 00:13:00,660
and we run blacksmith on all 40 devices

349
00:13:00,660 --> 00:13:02,519
in our test pool and blacksmith found

350
00:13:02,519 --> 00:13:04,620
effective patterns on all 40 devices

351
00:13:04,620 --> 00:13:08,220
which shows the trr is broken

352
00:13:08,220 --> 00:13:09,980
and we compare the results to

353
00:13:09,980 --> 00:13:11,760
state-of-the-addrama fuzzle trespass

354
00:13:11,760 --> 00:13:15,360
which only found bit flips on 15 or 40

355
00:13:15,360 --> 00:13:17,040
devices

356
00:13:17,040 --> 00:13:18,839
blacksmith also found

357
00:13:18,839 --> 00:13:20,639
are considerably High number of bit

358
00:13:20,639 --> 00:13:22,680
flips on some devices for example device

359
00:13:22,680 --> 00:13:25,380
a17 from Samsung that we found around

360
00:13:25,380 --> 00:13:28,079
138 000 bit flips

361
00:13:28,079 --> 00:13:30,120
this of course also has a significant

362
00:13:30,120 --> 00:13:32,279
impact on the exploitation

363
00:13:32,279 --> 00:13:34,079
that's why we also looked into existing

364
00:13:34,079 --> 00:13:36,000
raw Hammer exploits

365
00:13:36,000 --> 00:13:37,500
so in our paper we analyzed three

366
00:13:37,500 --> 00:13:38,760
exploits

367
00:13:38,760 --> 00:13:41,040
the pte exploit worked on 30 or 40

368
00:13:41,040 --> 00:13:43,079
devices and we found exploitable bit

369
00:13:43,079 --> 00:13:45,540
flips in between three seconds and 2

370
00:13:45,540 --> 00:13:47,459
hours and 8 minutes

371
00:13:47,459 --> 00:13:50,160
for details on the other attacks that we

372
00:13:50,160 --> 00:13:52,019
also looked into I kindly refer you to

373
00:13:52,019 --> 00:13:53,880
the paper

374
00:13:53,880 --> 00:13:57,959
and to the conclude the PC evaluation so

375
00:13:57,959 --> 00:14:00,540
100 of all devices in our test pool are

376
00:14:00,540 --> 00:14:02,100
broken and the dims are weaker than

377
00:14:02,100 --> 00:14:03,540
reported before

378
00:14:03,540 --> 00:14:05,699
the high number of bit flips facilitates

379
00:14:05,699 --> 00:14:08,040
the exploitation we also looked into

380
00:14:08,040 --> 00:14:10,860
lpddr for X chips which are used for

381
00:14:10,860 --> 00:14:13,079
example in smartphones and Ultrabooks

382
00:14:13,079 --> 00:14:14,880
and we also found there that all of

383
00:14:14,880 --> 00:14:17,100
these devices are broken if you want to

384
00:14:17,100 --> 00:14:18,959
know more about this part of our

385
00:14:18,959 --> 00:14:21,240
evaluation I kindly refer you to our

386
00:14:21,240 --> 00:14:22,740
paper

387
00:14:22,740 --> 00:14:24,839
so this concludes my talk we've seen

388
00:14:24,839 --> 00:14:26,760
that blacksmith compared with fuzzing

389
00:14:26,760 --> 00:14:28,980
and non-uniform frequency based patterns

390
00:14:28,980 --> 00:14:31,019
is a very scalable and highly effective

391
00:14:31,019 --> 00:14:32,160
approach

392
00:14:32,160 --> 00:14:33,959
and we showed that all current tier arm

393
00:14:33,959 --> 00:14:35,639
mitigations are vulnerable

394
00:14:35,639 --> 00:14:37,620
blacksmith's approach also generalizes

395
00:14:37,620 --> 00:14:39,779
well so there was another theorem vendor

396
00:14:39,779 --> 00:14:40,980
that we did not include in our

397
00:14:40,980 --> 00:14:43,500
evaluation that approached us and wanted

398
00:14:43,500 --> 00:14:46,260
to know if their devices are safe and we

399
00:14:46,260 --> 00:14:48,000
run blacksmith on these devices and

400
00:14:48,000 --> 00:14:49,440
found bit flips in less than four hours

401
00:14:49,440 --> 00:14:51,180
although we have never seen those

402
00:14:51,180 --> 00:14:52,860
devices before so we didn't do any

403
00:14:52,860 --> 00:14:55,980
experiments and observations on them

404
00:14:55,980 --> 00:14:57,600
or work stresses that we really need

405
00:14:57,600 --> 00:14:59,760
principled mitigations with brewable

406
00:14:59,760 --> 00:15:01,380
security guarantees instead of the

407
00:15:01,380 --> 00:15:03,060
Obscure and proprietary mitigation that

408
00:15:03,060 --> 00:15:04,920
drum vendors currently use

409
00:15:04,920 --> 00:15:06,899
and if you want to know how to design

410
00:15:06,899 --> 00:15:09,180
such principled mitigations I kindly

411
00:15:09,180 --> 00:15:10,860
invite invite you to the talk of my

412
00:15:10,860 --> 00:15:12,500
colleague Michaela about protea R

413
00:15:12,500 --> 00:15:14,880
principled yet optimal indiram Target

414
00:15:14,880 --> 00:15:16,380
draw refresh

415
00:15:16,380 --> 00:15:18,120
thank you very much for your attention

416
00:15:18,120 --> 00:15:24,060
[Applause]

417
00:15:24,060 --> 00:15:25,920
thank you Patrick are there any

418
00:15:25,920 --> 00:15:29,180
questions from the audience

419
00:15:33,600 --> 00:15:36,540
uh so my first question is oh thank you

420
00:15:36,540 --> 00:15:39,120
for uh the amazing talk my first

421
00:15:39,120 --> 00:15:40,320
question is

422
00:15:40,320 --> 00:15:42,779
um have you tested multiple uh dims

423
00:15:42,779 --> 00:15:44,579
together

424
00:15:44,579 --> 00:15:47,220
no we only tested always one dim okay

425
00:15:47,220 --> 00:15:48,959
just because of the addressing functions

426
00:15:48,959 --> 00:15:51,600
they are known for a single dim setup

427
00:15:51,600 --> 00:15:53,459
this makes it easier but in theory you

428
00:15:53,459 --> 00:15:55,380
could also test multiple dims for

429
00:15:55,380 --> 00:15:57,779
example um to increase the efficiency of

430
00:15:57,779 --> 00:16:00,660
fuzzing that's true so from my

431
00:16:00,660 --> 00:16:02,940
understanding uh every single of these

432
00:16:02,940 --> 00:16:04,740
vendors would have their own proprietary

433
00:16:04,740 --> 00:16:06,899
trr mechanism right yeah and it even

434
00:16:06,899 --> 00:16:09,180
changes across different devices of the

435
00:16:09,180 --> 00:16:10,860
same manufacturer

436
00:16:10,860 --> 00:16:12,420
okay but there is a kind of correlation

437
00:16:12,420 --> 00:16:13,800
so we looked into

438
00:16:13,800 --> 00:16:15,720
applying all the patterns that we found

439
00:16:15,720 --> 00:16:17,639
across the devices on all the devices

440
00:16:17,639 --> 00:16:20,100
and we saw that for example if we take

441
00:16:20,100 --> 00:16:22,680
patterns that we found on Samsung there

442
00:16:22,680 --> 00:16:23,940
might be one pattern that works on

443
00:16:23,940 --> 00:16:25,320
multiple dims so they're like golden

444
00:16:25,320 --> 00:16:28,500
patterns you could say Okay okay so I

445
00:16:28,500 --> 00:16:29,940
have one more question

446
00:16:29,940 --> 00:16:34,139
uh blacksmith requires a large number of

447
00:16:34,139 --> 00:16:35,880
things to be maintained in terms of

448
00:16:35,880 --> 00:16:37,160
timing

449
00:16:37,160 --> 00:16:39,779
like if you want to carry out this

450
00:16:39,779 --> 00:16:43,139
attack from JavaScript uh like is will

451
00:16:43,139 --> 00:16:45,420
it be practical enough to like keep a

452
00:16:45,420 --> 00:16:47,699
track of so many timing parameters like

453
00:16:47,699 --> 00:16:49,860
you have to get them correct right yeah

454
00:16:49,860 --> 00:16:51,839
but we use as side channels for that so

455
00:16:51,839 --> 00:16:54,120
basically you only put into blacksmith

456
00:16:54,120 --> 00:16:55,440
the number of activations that you can

457
00:16:55,440 --> 00:16:57,420
do you can determine that with the side

458
00:16:57,420 --> 00:16:58,199
Channel

459
00:16:58,199 --> 00:17:01,440
uh within between two consecutive

460
00:17:01,440 --> 00:17:04,859
Refreshers and um then blacksmith

461
00:17:04,859 --> 00:17:06,359
generates a pattern that works with that

462
00:17:06,359 --> 00:17:09,059
value and that during execution you

463
00:17:09,059 --> 00:17:10,799
again use a side channel to detect when

464
00:17:10,799 --> 00:17:12,240
the refresh happens so they are always

465
00:17:12,240 --> 00:17:14,640
aligned to the refreshes okay so it

466
00:17:14,640 --> 00:17:17,099
should be possible I think a flashing um

467
00:17:17,099 --> 00:17:18,839
the excesses from the cache would be the

468
00:17:18,839 --> 00:17:20,280
major challenge to realize it in

469
00:17:20,280 --> 00:17:22,380
JavaScript yeah

470
00:17:22,380 --> 00:17:24,860
you're welcome

471
00:17:27,119 --> 00:17:29,460
go ahead

472
00:17:29,460 --> 00:17:32,640
so uh Alyssa mubaron Intel

473
00:17:32,640 --> 00:17:35,039
um have you tried the ECC based attacks

474
00:17:35,039 --> 00:17:36,120
with this

475
00:17:36,120 --> 00:17:38,340
no we haven't looked into that

476
00:17:38,340 --> 00:17:40,799
we plan to

477
00:17:40,799 --> 00:17:42,780
um no there are no current efforts in

478
00:17:42,780 --> 00:17:44,880
the direction yeah but it's definitely

479
00:17:44,880 --> 00:17:47,100
something I mean I'd love to see it if

480
00:17:47,100 --> 00:17:48,539
anyone else is looking into this kind of

481
00:17:48,539 --> 00:17:49,559
thing

482
00:17:49,559 --> 00:17:52,460
but thank you

483
00:17:53,700 --> 00:17:55,200
thank you for a nice talk I have a

484
00:17:55,200 --> 00:17:57,179
question to you said

485
00:17:57,179 --> 00:17:59,039
um one of there was a vendor who

486
00:17:59,039 --> 00:18:00,960
approached you and asked you to study

487
00:18:00,960 --> 00:18:03,320
their devices

488
00:18:03,320 --> 00:18:06,419
were you studying their trr mechanism or

489
00:18:06,419 --> 00:18:10,320
you're studying their underlying sort of

490
00:18:10,320 --> 00:18:13,679
medium of how did those devices have TR

491
00:18:13,679 --> 00:18:16,140
in them yes they also had a mitigation

492
00:18:16,140 --> 00:18:18,480
and we did not include them because a

493
00:18:18,480 --> 00:18:20,880
small vendor and they sent us some

494
00:18:20,880 --> 00:18:24,539
sample devices as odems so my question

495
00:18:24,539 --> 00:18:27,480
is do they Outsource this trr like how

496
00:18:27,480 --> 00:18:29,220
they're building their own devices don't

497
00:18:29,220 --> 00:18:31,620
they understand how their TR works like

498
00:18:31,620 --> 00:18:34,559
why why would they ask you to study it

499
00:18:34,559 --> 00:18:36,240
and discover if you don't need to test

500
00:18:36,240 --> 00:18:37,380
if they're vulnerable because they

501
00:18:37,380 --> 00:18:40,200
claimed in the DDR3 devices and that

502
00:18:40,200 --> 00:18:42,240
they have

503
00:18:42,240 --> 00:18:44,820
a design that allows you them to to

504
00:18:44,820 --> 00:18:46,799
mitigate row hammer and that that's why

505
00:18:46,799 --> 00:18:48,780
they wanted to know if ddr4 the ddr4

506
00:18:48,780 --> 00:18:50,820
device is also safe and and did they

507
00:18:50,820 --> 00:18:53,280
share with you how their trr work no did

508
00:18:53,280 --> 00:18:55,380
you consider asking them hey tell me how

509
00:18:55,380 --> 00:18:56,820
the RR works and then I'll tell you

510
00:18:56,820 --> 00:18:58,500
exactly the right pattern of breaking

511
00:18:58,500 --> 00:19:00,419
this isn't that sort of

512
00:19:00,419 --> 00:19:02,160
they're interested in the mitigation of

513
00:19:02,160 --> 00:19:04,260
my colleague Michaela but I think they

514
00:19:04,260 --> 00:19:05,940
did not share with us any details about

515
00:19:05,940 --> 00:19:08,580
exactly how their mitigation works thank

516
00:19:08,580 --> 00:19:11,340
you you're welcome

517
00:19:11,340 --> 00:19:13,530
okay let's thank our speaker once again

518
00:19:13,530 --> 00:19:16,829
[Applause]

