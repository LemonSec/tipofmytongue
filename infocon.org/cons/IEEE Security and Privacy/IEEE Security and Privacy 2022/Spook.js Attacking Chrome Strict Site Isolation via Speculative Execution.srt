1
00:00:02,720 --> 00:00:04,240
all right thank you very much for the

2
00:00:04,240 --> 00:00:06,480
intro ricardo and hello everyone my name

3
00:00:06,480 --> 00:00:08,320
is jason kim and i will talk about our

4
00:00:08,320 --> 00:00:09,280
paper

5
00:00:09,280 --> 00:00:11,360
spookjs attacking chrome strix light

6
00:00:11,360 --> 00:00:15,440
isolation via speculative execution

7
00:00:15,440 --> 00:00:17,760
so first let's look at how people used

8
00:00:17,760 --> 00:00:20,000
browsers 20 years ago when i was a

9
00:00:20,000 --> 00:00:21,119
toddler

10
00:00:21,119 --> 00:00:23,039
and by the way that's me

11
00:00:23,039 --> 00:00:25,039
according to my parents we had separate

12
00:00:25,039 --> 00:00:27,760
applications for email

13
00:00:27,760 --> 00:00:29,359
word processing

14
00:00:29,359 --> 00:00:31,599
msn messenger to be honest i have no

15
00:00:31,599 --> 00:00:34,640
idea what that is etc etc

16
00:00:34,640 --> 00:00:36,480
i've also heard that browsers were

17
00:00:36,480 --> 00:00:39,120
strictly for searching things on google

18
00:00:39,120 --> 00:00:40,000
or

19
00:00:40,000 --> 00:00:42,239
shopping for books and only books on

20
00:00:42,239 --> 00:00:45,239
amazon

21
00:00:45,280 --> 00:00:47,440
nowadays we check our email in the

22
00:00:47,440 --> 00:00:50,640
browser we also make documents there

23
00:00:50,640 --> 00:00:52,640
send bank transfers and look at social

24
00:00:52,640 --> 00:00:53,760
media

25
00:00:53,760 --> 00:00:55,120
to sum this up

26
00:00:55,120 --> 00:00:57,680
browsers have taken over every aspect of

27
00:00:57,680 --> 00:00:58,960
our lives

28
00:00:58,960 --> 00:01:01,840
and because these tasks often deal with

29
00:01:01,840 --> 00:01:04,000
credit cards and passwords the

30
00:01:04,000 --> 00:01:06,479
consequence is that browsers simply have

31
00:01:06,479 --> 00:01:09,600
many secrets within

32
00:01:11,200 --> 00:01:13,520
unfortunately because browsers are

33
00:01:13,520 --> 00:01:16,240
important people try to extract secrets

34
00:01:16,240 --> 00:01:17,280
from them

35
00:01:17,280 --> 00:01:19,920
and with spectre disaster followed

36
00:01:19,920 --> 00:01:22,240
because chrome had had a unit process

37
00:01:22,240 --> 00:01:25,119
design where several tabs were rendered

38
00:01:25,119 --> 00:01:27,439
in one process and therefore sharing an

39
00:01:27,439 --> 00:01:29,040
address space

40
00:01:29,040 --> 00:01:31,439
while this design was resource efficient

41
00:01:31,439 --> 00:01:33,119
an adversary could read all the

42
00:01:33,119 --> 00:01:36,880
information in the other tabs

43
00:01:37,920 --> 00:01:40,400
in response to this chrome's developers

44
00:01:40,400 --> 00:01:43,119
introduced site isolation which renders

45
00:01:43,119 --> 00:01:44,960
different websites in different

46
00:01:44,960 --> 00:01:46,560
processes

47
00:01:46,560 --> 00:01:49,040
in the scenario even if the attacker

48
00:01:49,040 --> 00:01:51,759
mounts a specter attack in one tab

49
00:01:51,759 --> 00:01:53,439
there's nothing from the other tabs in

50
00:01:53,439 --> 00:01:55,520
the attacker's address space and

51
00:01:55,520 --> 00:01:57,360
therefore they can no longer read

52
00:01:57,360 --> 00:01:59,840
secrets

53
00:02:00,560 --> 00:02:02,719
and so we come to the research question

54
00:02:02,719 --> 00:02:05,040
that motivates our work

55
00:02:05,040 --> 00:02:08,000
have we mitigated spectre in the browser

56
00:02:08,000 --> 00:02:09,840
and i guess the fact that i'm standing

57
00:02:09,840 --> 00:02:13,440
here means not quite

58
00:02:13,599 --> 00:02:15,840
and indeed in this paper we present

59
00:02:15,840 --> 00:02:18,800
spookjs a speculative execution attack

60
00:02:18,800 --> 00:02:21,440
to leak secrets from chrome despite the

61
00:02:21,440 --> 00:02:23,680
presence of site isolation

62
00:02:23,680 --> 00:02:25,280
while there are countermeasures that we

63
00:02:25,280 --> 00:02:27,920
must first break we show that practical

64
00:02:27,920 --> 00:02:29,760
spectre attacks in chrome are still

65
00:02:29,760 --> 00:02:32,000
possible such as the antelope we leaked

66
00:02:32,000 --> 00:02:33,440
below

67
00:02:33,440 --> 00:02:35,680
we also show leakage on chrome based

68
00:02:35,680 --> 00:02:38,080
browsers like braven edge

69
00:02:38,080 --> 00:02:41,040
spookjs works on both intel cpus and the

70
00:02:41,040 --> 00:02:44,239
apple m1 and leaks fast at up to 500

71
00:02:44,239 --> 00:02:46,000
bytes per second

72
00:02:46,000 --> 00:02:48,080
so in the next streak of slides i'll

73
00:02:48,080 --> 00:02:50,640
first introduce what each problem to us

74
00:02:50,640 --> 00:02:54,799
was and then cover how we solved it

75
00:02:55,200 --> 00:02:57,920
the first problem for us as an attacker

76
00:02:57,920 --> 00:03:00,239
as you can see by the sad cat is slight

77
00:03:00,239 --> 00:03:05,080
isolation as i just discussed before

78
00:03:05,120 --> 00:03:07,519
in an ideal world for us if we have an

79
00:03:07,519 --> 00:03:10,080
attacker tab and a tab with secrets such

80
00:03:10,080 --> 00:03:12,879
as baked.com we would like to have the

81
00:03:12,879 --> 00:03:15,440
attacker's webpage and the secret in the

82
00:03:15,440 --> 00:03:17,680
same chrome process

83
00:03:17,680 --> 00:03:19,840
unfortunately under

84
00:03:19,840 --> 00:03:21,920
the principle of site isolation that

85
00:03:21,920 --> 00:03:24,000
different sites belong in different

86
00:03:24,000 --> 00:03:25,120
processes

87
00:03:25,120 --> 00:03:27,440
what we actually get is to our right

88
00:03:27,440 --> 00:03:29,680
where the attacker and the secret are

89
00:03:29,680 --> 00:03:33,840
isolated at the process level

90
00:03:34,080 --> 00:03:36,799
however we identify an edge case where

91
00:03:36,799 --> 00:03:39,840
site isolation no longer holds

92
00:03:39,840 --> 00:03:41,680
we introduced tumblr a popular

93
00:03:41,680 --> 00:03:44,319
microblogging service as one of our real

94
00:03:44,319 --> 00:03:45,680
examples

95
00:03:45,680 --> 00:03:49,200
so tumblr hosts both the accounts page

96
00:03:49,200 --> 00:03:51,920
and any arbitrary blog as subdomains of

97
00:03:51,920 --> 00:03:53,599
tumblr.com

98
00:03:53,599 --> 00:03:56,159
and here we find that chrome does not

99
00:03:56,159 --> 00:03:58,560
always apply site isolation to

100
00:03:58,560 --> 00:04:01,040
subdomains of the same page

101
00:04:01,040 --> 00:04:04,159
and we call this behavior consolidation

102
00:04:04,159 --> 00:04:06,879
i should clarify consolidation is not a

103
00:04:06,879 --> 00:04:10,080
bug but rather is there by design

104
00:04:10,080 --> 00:04:12,319
strictly having one process per tab can

105
00:04:12,319 --> 00:04:15,280
become expensive on resources quickly so

106
00:04:15,280 --> 00:04:17,440
chrome will isolate subdomains under

107
00:04:17,440 --> 00:04:20,399
memory pressure since by intuition it's

108
00:04:20,399 --> 00:04:23,040
unlikely that two subdomains belonging

109
00:04:23,040 --> 00:04:25,360
to the same site will be hostile toward

110
00:04:25,360 --> 00:04:26,880
each other

111
00:04:26,880 --> 00:04:29,360
a slightly more technical description is

112
00:04:29,360 --> 00:04:31,759
that chrome will consolidate pages with

113
00:04:31,759 --> 00:04:34,639
the same effective top level domain or

114
00:04:34,639 --> 00:04:37,840
etld which is dot com in this example

115
00:04:37,840 --> 00:04:40,720
plus the prefix immediately before that

116
00:04:40,720 --> 00:04:42,720
and we call this grouping scheme etld

117
00:04:42,720 --> 00:04:44,400
plus one

118
00:04:44,400 --> 00:04:47,440
in general if we have two subdomains of

119
00:04:47,440 --> 00:04:50,160
example.com which are foo and bar

120
00:04:50,160 --> 00:04:52,639
because they share a common etld plus

121
00:04:52,639 --> 00:04:55,840
one of example.com foo and bar can be

122
00:04:55,840 --> 00:04:58,638
consolidated

123
00:04:59,520 --> 00:05:00,320
well

124
00:05:00,320 --> 00:05:02,960
why is consolidation a problem

125
00:05:02,960 --> 00:05:05,440
in addition to any arbitrary blog on

126
00:05:05,440 --> 00:05:07,759
tumblr and its accounts page being

127
00:05:07,759 --> 00:05:09,759
eligible for consolidation

128
00:05:09,759 --> 00:05:12,000
tumblr blogs host user supplied

129
00:05:12,000 --> 00:05:13,600
javascript

130
00:05:13,600 --> 00:05:16,080
tumblr does this so that each blog owner

131
00:05:16,080 --> 00:05:19,199
can customize the theme of their page

132
00:05:19,199 --> 00:05:21,440
however this also lets us create a

133
00:05:21,440 --> 00:05:22,880
malicious blog

134
00:05:22,880 --> 00:05:26,080
package our speak.js code as javascript

135
00:05:26,080 --> 00:05:28,479
and make the browser run it all in the

136
00:05:28,479 --> 00:05:30,639
same address space as tumblr's accounts

137
00:05:30,639 --> 00:05:31,919
page

138
00:05:31,919 --> 00:05:34,960
in fact it's not only tumblr but also

139
00:05:34,960 --> 00:05:37,919
bitbucket our university website and

140
00:05:37,919 --> 00:05:40,639
google's g suite just to name a few

141
00:05:40,639 --> 00:05:42,639
what they have in common is that they

142
00:05:42,639 --> 00:05:45,840
host user-supplied code and secrets in

143
00:05:45,840 --> 00:05:48,479
subdomains and these sub-domains can get

144
00:05:48,479 --> 00:05:52,520
consolidated by chrome

145
00:05:52,720 --> 00:05:54,960
so now we've identified some practical

146
00:05:54,960 --> 00:05:57,199
corner cases where site isolation

147
00:05:57,199 --> 00:05:59,600
doesn't take place and this makes our

148
00:05:59,600 --> 00:06:01,919
sad cat happy now

149
00:06:01,919 --> 00:06:04,160
in an ideal situation we should be able

150
00:06:04,160 --> 00:06:06,400
to leak secrets right away since they're

151
00:06:06,400 --> 00:06:08,479
in the same address space

152
00:06:08,479 --> 00:06:11,120
but what prevents us from doing that

153
00:06:11,120 --> 00:06:13,520
next i'll cover 32-bit addressing in

154
00:06:13,520 --> 00:06:15,919
chrome

155
00:06:16,960 --> 00:06:20,400
on this slide i'll show why a spectre v1

156
00:06:20,400 --> 00:06:23,680
attack is insufficient so to our left we

157
00:06:23,680 --> 00:06:26,560
have a specter v1 gadget and a secret

158
00:06:26,560 --> 00:06:28,639
that is normally inaccessible

159
00:06:28,639 --> 00:06:31,280
well if we mistrain the branch predictor

160
00:06:31,280 --> 00:06:33,680
the cpu will speculate past the if

161
00:06:33,680 --> 00:06:34,720
condition

162
00:06:34,720 --> 00:06:36,960
and add the out of bounds index to the

163
00:06:36,960 --> 00:06:38,800
array's base pointer

164
00:06:38,800 --> 00:06:40,479
this will make the result point to our

165
00:06:40,479 --> 00:06:43,919
secret which then will get dereferenced

166
00:06:43,919 --> 00:06:46,400
finally we encode the secret by

167
00:06:46,400 --> 00:06:48,639
accessing it as an index inside a probe

168
00:06:48,639 --> 00:06:50,800
array which will bring the element at

169
00:06:50,800 --> 00:06:53,440
that index into the cache

170
00:06:53,440 --> 00:06:55,440
we can construct a covert channel under

171
00:06:55,440 --> 00:06:58,080
speculation this way because if we load

172
00:06:58,080 --> 00:07:00,479
each element of the probe array only the

173
00:07:00,479 --> 00:07:02,400
element that was cached before will have

174
00:07:02,400 --> 00:07:04,479
a fast access time and all the other

175
00:07:04,479 --> 00:07:06,880
elements will be slow

176
00:07:06,880 --> 00:07:10,160
in summary the spectre v1 gadget itself

177
00:07:10,160 --> 00:07:12,800
looks fine until we look at the data

178
00:07:12,800 --> 00:07:15,680
types in chrome's javascript engine

179
00:07:15,680 --> 00:07:18,400
the base pointer to read from is 64 bits

180
00:07:18,400 --> 00:07:21,840
wide but we cannot control its value

181
00:07:21,840 --> 00:07:23,680
on the other hand we have control over

182
00:07:23,680 --> 00:07:26,400
the index variable but it is only 32

183
00:07:26,400 --> 00:07:28,479
bits wide

184
00:07:28,479 --> 00:07:30,560
this limits our out of bounds reach to

185
00:07:30,560 --> 00:07:33,360
four gigabytes but in practice we found

186
00:07:33,360 --> 00:07:35,840
the secrets we want to leak are not in

187
00:07:35,840 --> 00:07:38,319
this region but unfortunately much

188
00:07:38,319 --> 00:07:39,840
further away

189
00:07:39,840 --> 00:07:42,720
so to sum this slide up while spectra v1

190
00:07:42,720 --> 00:07:45,360
will work per se in chrome we won't be

191
00:07:45,360 --> 00:07:49,199
able to read anything meaningful

192
00:07:50,479 --> 00:07:52,879
so in an effort to find a way out we

193
00:07:52,879 --> 00:07:55,120
looked deeper into how chrome performs

194
00:07:55,120 --> 00:07:57,680
array accesses more specifically typed

195
00:07:57,680 --> 00:08:00,400
arrays which we use for our exploit

196
00:08:00,400 --> 00:08:02,960
javascript is dynamically typed so a

197
00:08:02,960 --> 00:08:05,039
function that takes two arguments and

198
00:08:05,039 --> 00:08:07,599
returns their sum should be able to take

199
00:08:07,599 --> 00:08:11,360
in two integers two strings etc etc

200
00:08:11,360 --> 00:08:13,520
but this flexibility is bad for

201
00:08:13,520 --> 00:08:16,560
performance so if chrome sees a piece of

202
00:08:16,560 --> 00:08:17,680
code

203
00:08:17,680 --> 00:08:19,680
being called with one type of argument

204
00:08:19,680 --> 00:08:22,479
repeatedly it will compile the code

205
00:08:22,479 --> 00:08:24,560
while inserting a type check under the

206
00:08:24,560 --> 00:08:25,759
hood

207
00:08:25,759 --> 00:08:28,160
so first let's see what happens when we

208
00:08:28,160 --> 00:08:30,639
give this code a typed array as it

209
00:08:30,639 --> 00:08:32,000
expects

210
00:08:32,000 --> 00:08:34,958
the if statement which checks the type

211
00:08:34,958 --> 00:08:36,719
evaluates to true

212
00:08:36,719 --> 00:08:38,880
so the pointer dereference

213
00:08:38,880 --> 00:08:42,000
happens without any quirks

214
00:08:42,000 --> 00:08:44,560
but why is this still insufficient

215
00:08:44,560 --> 00:08:46,240
recall from the previous slide that

216
00:08:46,240 --> 00:08:48,800
while the base pointer is 64 bits we

217
00:08:48,800 --> 00:08:51,200
can't control its value

218
00:08:51,200 --> 00:08:54,240
and while we can control the index it's

219
00:08:54,240 --> 00:08:56,560
a 32-bit value so

220
00:08:56,560 --> 00:08:58,720
our 4 gigabyte addressing problem is

221
00:08:58,720 --> 00:09:01,279
still there

222
00:09:02,959 --> 00:09:05,200
therefore the take away so far is that

223
00:09:05,200 --> 00:09:08,000
we cannot stick with spectra v1 but

224
00:09:08,000 --> 00:09:11,440
instead need an entirely new gadget

225
00:09:11,440 --> 00:09:13,760
while the 64-bit base pointer in our

226
00:09:13,760 --> 00:09:15,920
typed array is not accessible which

227
00:09:15,920 --> 00:09:18,720
means we'll need a way around

228
00:09:18,720 --> 00:09:21,360
let's construct an object that is not a

229
00:09:21,360 --> 00:09:22,399
typed array

230
00:09:22,399 --> 00:09:25,279
but one where we can control the value

231
00:09:25,279 --> 00:09:27,040
at the same memory offset that would

232
00:09:27,040 --> 00:09:29,760
correspond to that 64-bit pointer

233
00:09:29,760 --> 00:09:31,920
so here we're effectively trying to fake

234
00:09:31,920 --> 00:09:33,600
a pointer

235
00:09:33,600 --> 00:09:36,320
well what happens when we try to index

236
00:09:36,320 --> 00:09:39,040
into our malicious attacker class object

237
00:09:39,040 --> 00:09:40,720
instead of a typed array which the

238
00:09:40,720 --> 00:09:43,440
compiled code expects

239
00:09:43,440 --> 00:09:45,680
unfortunately because the type is an

240
00:09:45,680 --> 00:09:48,640
implementation detail internal to chrome

241
00:09:48,640 --> 00:09:51,680
we cannot access it from javascript

242
00:09:51,680 --> 00:09:54,160
so the type is first compared

243
00:09:54,160 --> 00:09:56,720
and since object is not a typed array

244
00:09:56,720 --> 00:09:59,120
the if evaluates to false

245
00:09:59,120 --> 00:10:01,760
and execution flows to the else clause

246
00:10:01,760 --> 00:10:04,560
where an exception gets thrown

247
00:10:04,560 --> 00:10:06,880
and that's no good because the line of

248
00:10:06,880 --> 00:10:09,440
code where the pointer gets dereferenced

249
00:10:09,440 --> 00:10:12,560
did not execute at all

250
00:10:13,920 --> 00:10:16,720
so if we can't change the type to what

251
00:10:16,720 --> 00:10:18,240
we need although we would have loved to

252
00:10:18,240 --> 00:10:19,360
do that

253
00:10:19,360 --> 00:10:20,880
what can we do

254
00:10:20,880 --> 00:10:23,200
the answer we devise is to delay the

255
00:10:23,200 --> 00:10:24,880
type resolution

256
00:10:24,880 --> 00:10:27,839
and make the cpu speculate past it

257
00:10:27,839 --> 00:10:30,160
first we need to flush just the type

258
00:10:30,160 --> 00:10:32,560
variable of our malicious attacker class

259
00:10:32,560 --> 00:10:35,519
object to induce speculation and here

260
00:10:35,519 --> 00:10:38,959
we'll symbolize flush with a toilet

261
00:10:38,959 --> 00:10:40,560
then we can mistrain the branch

262
00:10:40,560 --> 00:10:43,040
predictors just like specter v1 for the

263
00:10:43,040 --> 00:10:46,480
cpu to predict taking on that if

264
00:10:46,480 --> 00:10:48,079
and this will make the body of the if

265
00:10:48,079 --> 00:10:51,519
statement run under speculation

266
00:10:51,519 --> 00:10:54,800
but because our fake pointer is at the

267
00:10:54,800 --> 00:10:56,959
exact memory offset where the compiled

268
00:10:56,959 --> 00:11:00,399
code expects a 64-bit pointer the cpu

269
00:11:00,399 --> 00:11:02,640
dereferences our fake pointer

270
00:11:02,640 --> 00:11:04,880
transiently resulting in speculative

271
00:11:04,880 --> 00:11:06,640
type confusion

272
00:11:06,640 --> 00:11:09,279
and the rest is identical to specter v1

273
00:11:09,279 --> 00:11:11,519
where after speculation ends we can

274
00:11:11,519 --> 00:11:13,839
retrieve the value which we dereferenced

275
00:11:13,839 --> 00:11:15,519
transiently through a cache covert

276
00:11:15,519 --> 00:11:16,959
channel

277
00:11:16,959 --> 00:11:18,320
but wait

278
00:11:18,320 --> 00:11:21,120
we want an l3 miss

279
00:11:21,120 --> 00:11:23,279
to happen when loading the type so that

280
00:11:23,279 --> 00:11:26,320
the cpu speculates while we want an l1

281
00:11:26,320 --> 00:11:28,720
hit on the fake pointer such that

282
00:11:28,720 --> 00:11:30,959
speculation doesn't terminate

283
00:11:30,959 --> 00:11:33,920
how do we achieve this

284
00:11:34,079 --> 00:11:36,399
we trick chrome's memory allocator into

285
00:11:36,399 --> 00:11:38,160
placing an instance of our malicious

286
00:11:38,160 --> 00:11:40,720
attacker class object across cache line

287
00:11:40,720 --> 00:11:43,440
boundaries and then we evict just the

288
00:11:43,440 --> 00:11:47,200
cache line which contains the type

289
00:11:48,000 --> 00:11:50,480
so now we've overcome the four gigabyte

290
00:11:50,480 --> 00:11:52,639
addressing problem with a usual spectre

291
00:11:52,639 --> 00:11:54,240
v1 gadget

292
00:11:54,240 --> 00:11:56,560
by putting forth an entirely new spectre

293
00:11:56,560 --> 00:11:59,760
gadget which makes the cpu transiently

294
00:11:59,760 --> 00:12:01,920
run code on an argument of the wrong

295
00:12:01,920 --> 00:12:03,120
type

296
00:12:03,120 --> 00:12:05,440
what's left

297
00:12:05,440 --> 00:12:07,920
and you can see our dog is now happy

298
00:12:07,920 --> 00:12:10,720
but for a practical spectre attack the

299
00:12:10,720 --> 00:12:13,200
last requirement is that our gadget can

300
00:12:13,200 --> 00:12:16,079
be used reliably for many iterations so

301
00:12:16,079 --> 00:12:18,800
that we can leak large amounts of data

302
00:12:18,800 --> 00:12:20,880
and for that we need to understand the

303
00:12:20,880 --> 00:12:25,800
behavior of our gadget from end to end

304
00:12:26,000 --> 00:12:28,000
let's take another look at our gadget

305
00:12:28,000 --> 00:12:31,040
from before where by evicting the type

306
00:12:31,040 --> 00:12:33,200
of our malicious object we could make

307
00:12:33,200 --> 00:12:35,519
the body of the if statement run under

308
00:12:35,519 --> 00:12:37,279
speculation

309
00:12:37,279 --> 00:12:40,480
but what happens when speculation ends

310
00:12:40,480 --> 00:12:43,279
the type is brought back in the cpu

311
00:12:43,279 --> 00:12:45,760
realizes it's the wrong type

312
00:12:45,760 --> 00:12:48,320
and execution flows to the else clause

313
00:12:48,320 --> 00:12:50,959
where the code throws an exception

314
00:12:50,959 --> 00:12:53,120
this is still not good because the

315
00:12:53,120 --> 00:12:56,000
exception means our gadget will work at

316
00:12:56,000 --> 00:12:57,839
most once

317
00:12:57,839 --> 00:13:00,639
so how do we make a reliable gadget

318
00:13:00,639 --> 00:13:03,360
we wrap the entire gadget from before

319
00:13:03,360 --> 00:13:05,120
into another if statement with a

320
00:13:05,120 --> 00:13:07,279
condition that we control such that we

321
00:13:07,279 --> 00:13:09,279
can mistrain its branch predictor just

322
00:13:09,279 --> 00:13:11,200
like spectre b1

323
00:13:11,200 --> 00:13:13,600
when speculation happens this time the

324
00:13:13,600 --> 00:13:16,639
entire gadget runs under speculation not

325
00:13:16,639 --> 00:13:19,680
once but twice in a nested manner

326
00:13:19,680 --> 00:13:22,560
the cpu is speculating on both the outer

327
00:13:22,560 --> 00:13:25,200
if colored in pink and the inner if that

328
00:13:25,200 --> 00:13:27,600
checks for the argument type

329
00:13:27,600 --> 00:13:29,760
hence even if this gadget throws an

330
00:13:29,760 --> 00:13:32,079
exception the exception gets rolled back

331
00:13:32,079 --> 00:13:34,000
at the end of speculation and never

332
00:13:34,000 --> 00:13:36,720
commits architecturally and so this way

333
00:13:36,720 --> 00:13:38,639
we can keep chrome oblivious from what's

334
00:13:38,639 --> 00:13:42,320
happening and keep on leaking

335
00:13:43,360 --> 00:13:45,680
so now i'd like to clarify at a glance

336
00:13:45,680 --> 00:13:48,800
what we can do with speakjs our attack

337
00:13:48,800 --> 00:13:51,120
runs on chrome 89 and furthermore the

338
00:13:51,120 --> 00:13:53,120
same version of two other browsers that

339
00:13:53,120 --> 00:13:55,839
are based on chrome brave browser and

340
00:13:55,839 --> 00:13:57,600
chromium edge

341
00:13:57,600 --> 00:13:59,760
all three browsers are unmodified and

342
00:13:59,760 --> 00:14:02,320
run in their default configurations all

343
00:14:02,320 --> 00:14:04,560
spectrum mitigations are enabled and

344
00:14:04,560 --> 00:14:06,959
version 89 was the latest for all three

345
00:14:06,959 --> 00:14:09,839
browsers at the time of writing

346
00:14:09,839 --> 00:14:12,560
spjs runs not only on a wide range of

347
00:14:12,560 --> 00:14:14,880
intel cpus ranging from 6th to 9th

348
00:14:14,880 --> 00:14:18,800
generation but also the apple m1

349
00:14:18,800 --> 00:14:20,800
on either platform our leakage rate

350
00:14:20,800 --> 00:14:24,399
ranges from 450 to 500 bytes per second

351
00:14:24,399 --> 00:14:27,120
and our reads are 96 to 99

352
00:14:27,120 --> 00:14:28,480
accurate

353
00:14:28,480 --> 00:14:31,839
so now what can we do with this

354
00:14:32,320 --> 00:14:34,880
for our first attack recall that any

355
00:14:34,880 --> 00:14:37,120
arbitrary blog on tumblr and tumblr's

356
00:14:37,120 --> 00:14:39,519
accounts page can be consolidated into

357
00:14:39,519 --> 00:14:41,120
one process

358
00:14:41,120 --> 00:14:43,600
so here we host speak.js on a tumblr

359
00:14:43,600 --> 00:14:45,920
blog attempting to attack the accounts

360
00:14:45,920 --> 00:14:49,440
page and recover a user's credentials

361
00:14:49,440 --> 00:14:51,600
in addition we assume the target uses a

362
00:14:51,600 --> 00:14:53,839
password manager with autofill which is

363
00:14:53,839 --> 00:14:56,240
lastpass in this case

364
00:14:56,240 --> 00:14:58,720
when the credentials are copied into the

365
00:14:58,720 --> 00:15:01,040
dom and therefore

366
00:15:01,040 --> 00:15:03,680
sharing an address space with spjs

367
00:15:03,680 --> 00:15:05,360
they became fair game

368
00:15:05,360 --> 00:15:07,440
for spookjs to read

369
00:15:07,440 --> 00:15:09,760
and speaking of lastpass when we did

370
00:15:09,760 --> 00:15:12,000
this work chrome did not isolate

371
00:15:12,000 --> 00:15:13,600
extension processes

372
00:15:13,600 --> 00:15:16,160
so this let us package spookjs into a

373
00:15:16,160 --> 00:15:18,320
chrome extension where its process

374
00:15:18,320 --> 00:15:21,519
became consolidated with lastpasses

375
00:15:21,519 --> 00:15:23,519
in the second scenario we were able to

376
00:15:23,519 --> 00:15:25,519
dump the master password effectively

377
00:15:25,519 --> 00:15:28,959
compromising the entire vault

378
00:15:30,240 --> 00:15:32,639
next we show that this happens not only

379
00:15:32,639 --> 00:15:34,959
with lastpass but also with chrome's

380
00:15:34,959 --> 00:15:37,279
built-in password manager because the

381
00:15:37,279 --> 00:15:40,240
root cause was that when any secrets get

382
00:15:40,240 --> 00:15:42,959
copied into the same address space they

383
00:15:42,959 --> 00:15:45,600
become within reach of speak.js

384
00:15:45,600 --> 00:15:48,079
so going away from just passwords if you

385
00:15:48,079 --> 00:15:50,880
happen to have credit card autofill set

386
00:15:50,880 --> 00:15:52,880
then spookjs will happily recover that

387
00:15:52,880 --> 00:15:55,839
for you too

388
00:15:56,000 --> 00:15:58,800
last but not least we exploit that two

389
00:15:58,800 --> 00:16:00,880
subdomains of the same site don't

390
00:16:00,880 --> 00:16:02,959
necessarily trust each other

391
00:16:02,959 --> 00:16:06,000
here we set up a personal google site

392
00:16:06,000 --> 00:16:09,120
and package the speak.js code within

393
00:16:09,120 --> 00:16:11,759
however google uploads and hosts user

394
00:16:11,759 --> 00:16:14,480
supplied javascript to a subdomain of

395
00:16:14,480 --> 00:16:16,320
google usercontent.com

396
00:16:16,320 --> 00:16:18,560
let's say foo

397
00:16:18,560 --> 00:16:21,279
on the other hand if our target uploads

398
00:16:21,279 --> 00:16:22,880
an image to their personal google

399
00:16:22,880 --> 00:16:24,000
workspace

400
00:16:24,000 --> 00:16:26,320
google will also upload and host user

401
00:16:26,320 --> 00:16:29,040
supplied media to a different subdomain

402
00:16:29,040 --> 00:16:32,480
of google user content let's say bar

403
00:16:32,480 --> 00:16:34,399
because the speaker yes code and the

404
00:16:34,399 --> 00:16:36,800
image are hosted on sub-domains of

405
00:16:36,800 --> 00:16:38,720
google usercontent.com

406
00:16:38,720 --> 00:16:41,360
they share an etld plus one and are

407
00:16:41,360 --> 00:16:43,839
eligible to be consolidated

408
00:16:43,839 --> 00:16:46,399
this lets speak.js read the image data

409
00:16:46,399 --> 00:16:48,880
and reproduce our leaked antelope to the

410
00:16:48,880 --> 00:16:51,199
right

411
00:16:51,199 --> 00:16:53,040
and that brings my talk to an end thank

412
00:16:53,040 --> 00:16:54,399
you for listening and i'd be happy to

413
00:16:54,399 --> 00:16:55,860
answer any questions

414
00:16:55,860 --> 00:17:00,959
[Applause]

415
00:17:00,959 --> 00:17:03,600
thanks jason are there any questions we

416
00:17:03,600 --> 00:17:06,799
have time for a couple of questions

417
00:17:06,799 --> 00:17:07,599
okay

418
00:17:07,599 --> 00:17:10,000
one question

419
00:17:10,000 --> 00:17:12,959
um hi very interesting work uh i'm kyle

420
00:17:12,959 --> 00:17:14,959
zem from asu

421
00:17:14,959 --> 00:17:16,959
so um we've been talking about spectre

422
00:17:16,959 --> 00:17:19,039
can be exploited from javascript for

423
00:17:19,039 --> 00:17:21,520
years finally it is here

424
00:17:21,520 --> 00:17:24,160
um but uh i have a question about your

425
00:17:24,160 --> 00:17:26,959
work so in your previous slides you

426
00:17:26,959 --> 00:17:29,840
showed that your targets your target is

427
00:17:29,840 --> 00:17:32,720
basically chromium-based browsers

428
00:17:32,720 --> 00:17:35,360
and then but last year chromium

429
00:17:35,360 --> 00:17:37,679
introduced a protection called virtual

430
00:17:37,679 --> 00:17:39,120
memory cage

431
00:17:39,120 --> 00:17:40,240
does yours

432
00:17:40,240 --> 00:17:42,000
does your work still work against

433
00:17:42,000 --> 00:17:44,480
virtual memory cage with the protections

434
00:17:44,480 --> 00:17:46,160
on have you tried it

435
00:17:46,160 --> 00:17:48,480
i believe we have not tried our exploit

436
00:17:48,480 --> 00:17:51,360
on newer versions of chrome past 89.

437
00:17:51,360 --> 00:17:54,320
okay thanks

438
00:17:57,760 --> 00:17:59,840
okay i'll ask a question so i'm curious

439
00:17:59,840 --> 00:18:01,679
how did you figure out the

440
00:18:01,679 --> 00:18:03,919
typed array code of chrome did you have

441
00:18:03,919 --> 00:18:05,520
to do reverse engineering or did you

442
00:18:05,520 --> 00:18:08,000
have access to the source code

443
00:18:08,000 --> 00:18:09,039
um

444
00:18:09,039 --> 00:18:11,600
i would say it was you know partially

445
00:18:11,600 --> 00:18:14,480
due to chromium and more specifically v8

446
00:18:14,480 --> 00:18:16,320
it's javascript engine being open

447
00:18:16,320 --> 00:18:18,720
sourced so uh there were a couple clues

448
00:18:18,720 --> 00:18:21,200
that we could take from there but in the

449
00:18:21,200 --> 00:18:24,080
case of our compiled code when we index

450
00:18:24,080 --> 00:18:26,559
into a typed array uh

451
00:18:26,559 --> 00:18:27,440
i guess

452
00:18:27,440 --> 00:18:29,120
this was something we had to do mostly

453
00:18:29,120 --> 00:18:31,760
by reverse engineering by looking at um

454
00:18:31,760 --> 00:18:33,440
like the assembly that was dumped and

455
00:18:33,440 --> 00:18:36,480
figuring out what was going on

456
00:18:36,880 --> 00:18:40,160
okay that was a really clever attack um

457
00:18:40,160 --> 00:18:43,360
i was wondering did you happen to

458
00:18:43,360 --> 00:18:45,760
do you happen to know if uh any other

459
00:18:45,760 --> 00:18:47,520
specter variants are exploitable or like

460
00:18:47,520 --> 00:18:49,520
what kinds of gadgets you'd be able to

461
00:18:49,520 --> 00:18:51,280
find when they're compiled from

462
00:18:51,280 --> 00:18:53,039
javascript

463
00:18:53,039 --> 00:18:54,240
um

464
00:18:54,240 --> 00:18:57,600
aside from inspector v1 which i

465
00:18:57,600 --> 00:18:59,039
noted where we wouldn't be able to read

466
00:18:59,039 --> 00:19:00,240
anything

467
00:19:00,240 --> 00:19:03,760
meaningful um and type confusion um

468
00:19:03,760 --> 00:19:05,200
i'm not sure that that is something we

469
00:19:05,200 --> 00:19:06,720
could leave the future work all right

470
00:19:06,720 --> 00:19:08,240
awesome thank you

471
00:19:08,240 --> 00:19:10,940
okay let's thank jason once again

472
00:19:10,940 --> 00:19:14,829
[Applause]

