1
00:00:02,080 --> 00:00:04,160
uh hello everyone thank you for coming

2
00:00:04,160 --> 00:00:05,839
to our presentation

3
00:00:05,839 --> 00:00:08,320
i'm currently a postdoc in university of

4
00:00:08,320 --> 00:00:11,120
florida and this is my work completed

5
00:00:11,120 --> 00:00:14,160
during my phd program in the vanderbilt

6
00:00:14,160 --> 00:00:16,400
university this is a joint to work with

7
00:00:16,400 --> 00:00:18,880
clemson university and the

8
00:00:18,880 --> 00:00:21,199
university of central florida

9
00:00:21,199 --> 00:00:23,840
our our work is graphics peeping unit

10
00:00:23,840 --> 00:00:25,599
exploiting em side channel information

11
00:00:25,599 --> 00:00:29,679
on gpus to eavesdrop on your neighbors

12
00:00:29,679 --> 00:00:32,719
as we know these key discrete gpus has

13
00:00:32,719 --> 00:00:34,559
become increasingly popular in modern

14
00:00:34,559 --> 00:00:37,040
computers they are not only used for

15
00:00:37,040 --> 00:00:39,600
high quality graphics rendering but also

16
00:00:39,600 --> 00:00:42,320
used for intensive parallel computing

17
00:00:42,320 --> 00:00:45,039
as many gpu tax tasks operate on

18
00:00:45,039 --> 00:00:47,280
sensitive information

19
00:00:47,280 --> 00:00:49,440
there has been concerns about potential

20
00:00:49,440 --> 00:00:51,199
information leakages

21
00:00:51,199 --> 00:00:53,520
and several recently developed attacks

22
00:00:53,520 --> 00:00:56,239
have justified such concerns

23
00:00:56,239 --> 00:00:59,039
however all these existing attacks they

24
00:00:59,039 --> 00:01:01,920
either need the attacker to

25
00:01:01,920 --> 00:01:03,600
physically access

26
00:01:03,600 --> 00:01:06,479
to to have logical access to the gpu or

27
00:01:06,479 --> 00:01:09,439
the gpu is physically accessible to the

28
00:01:09,439 --> 00:01:10,479
attacker

29
00:01:10,479 --> 00:01:13,280
so our question is what if an attacker

30
00:01:13,280 --> 00:01:15,280
has no physical or logical access to a

31
00:01:15,280 --> 00:01:18,080
gpu is it still possible to implement

32
00:01:18,080 --> 00:01:20,720
such attacks to steal the sensitive

33
00:01:20,720 --> 00:01:22,720
information from it

34
00:01:22,720 --> 00:01:25,360
and in our work give the yes to this

35
00:01:25,360 --> 00:01:27,119
question and to the best of our

36
00:01:27,119 --> 00:01:28,720
knowledge this is the first work

37
00:01:28,720 --> 00:01:30,640
achieving this

38
00:01:30,640 --> 00:01:32,640
before going into the details let's take

39
00:01:32,640 --> 00:01:35,439
a look at feature called dvfs standing

40
00:01:35,439 --> 00:01:37,280
for dynamic voltage and frequency

41
00:01:37,280 --> 00:01:38,400
scaling

42
00:01:38,400 --> 00:01:39,600
basically

43
00:01:39,600 --> 00:01:41,600
as the gpu power consumption has become

44
00:01:41,600 --> 00:01:45,439
a radical problem dvfs was used to

45
00:01:45,439 --> 00:01:48,000
mitigate it basically it specifies

46
00:01:48,000 --> 00:01:50,479
multiple performance levels each level

47
00:01:50,479 --> 00:01:52,560
specifies a setting of voltages and

48
00:01:52,560 --> 00:01:56,640
frequencies for the gpu cores and memory

49
00:01:56,640 --> 00:01:58,079
and

50
00:01:58,079 --> 00:02:01,680
the gpu dvs will tend to adjust the

51
00:02:01,680 --> 00:02:04,320
performance levels to meet the

52
00:02:04,320 --> 00:02:07,360
current computational need

53
00:02:07,360 --> 00:02:10,000
so different computational activities

54
00:02:10,000 --> 00:02:12,080
will create different

55
00:02:12,080 --> 00:02:14,160
gpu workload patterns into

56
00:02:14,160 --> 00:02:16,560
intermediately so there will be multiple

57
00:02:16,560 --> 00:02:18,080
gpu performance level switching

58
00:02:18,080 --> 00:02:20,879
behaviors during during the activity

59
00:02:20,879 --> 00:02:22,959
and as we know different activities

60
00:02:22,959 --> 00:02:25,440
generates generally create different

61
00:02:25,440 --> 00:02:28,160
workload patterns so an attacker may use

62
00:02:28,160 --> 00:02:29,599
such performance level switching

63
00:02:29,599 --> 00:02:32,400
behavior to infer the competition

64
00:02:32,400 --> 00:02:34,800
activities and more interestingly we

65
00:02:34,800 --> 00:02:37,040
find that we don't even need to know a

66
00:02:37,040 --> 00:02:38,560
full picture of the performance level

67
00:02:38,560 --> 00:02:41,599
switching behavior to infer the activity

68
00:02:41,599 --> 00:02:43,280
and attacker only needs to focus on a

69
00:02:43,280 --> 00:02:44,720
certain level to see whether it's

70
00:02:44,720 --> 00:02:46,879
switched on and off to

71
00:02:46,879 --> 00:02:49,280
to know the information

72
00:02:49,280 --> 00:02:52,000
so now that we know an attacker can use

73
00:02:52,000 --> 00:02:54,319
this level switching behavior to infer

74
00:02:54,319 --> 00:02:56,879
the user activities back to our original

75
00:02:56,879 --> 00:02:59,440
question without any access how can i

76
00:02:59,440 --> 00:03:01,680
take achieve this

77
00:03:01,680 --> 00:03:04,239
well we found that when a performance

78
00:03:04,239 --> 00:03:06,560
level is switched on and off there are

79
00:03:06,560 --> 00:03:08,879
certain em signals that will appear and

80
00:03:08,879 --> 00:03:11,519
disappear at the corresponding memory

81
00:03:11,519 --> 00:03:13,840
clock of the gpu

82
00:03:13,840 --> 00:03:16,400
and some further study indicates that

83
00:03:16,400 --> 00:03:20,080
this emulation is generated by the gddrw

84
00:03:20,080 --> 00:03:22,239
red clock

85
00:03:22,239 --> 00:03:25,200
here let's see an example we see a amd's

86
00:03:25,200 --> 00:03:26,879
popular gpu

87
00:03:26,879 --> 00:03:29,360
rx 580 which has three performance

88
00:03:29,360 --> 00:03:32,080
levels if we focus on the second level

89
00:03:32,080 --> 00:03:34,720
which has the memory clock frequency

90
00:03:34,720 --> 00:03:36,400
2000 megahertz

91
00:03:36,400 --> 00:03:38,640
when this level is on we can see some

92
00:03:38,640 --> 00:03:41,120
clear patterns in the spectrum and when

93
00:03:41,120 --> 00:03:43,280
this level is switched off there's no

94
00:03:43,280 --> 00:03:44,959
such signals

95
00:03:44,959 --> 00:03:47,760
so now that we we know an attacker can

96
00:03:47,760 --> 00:03:50,000
use the em signals to know whether

97
00:03:50,000 --> 00:03:52,239
performance level is switched on or off

98
00:03:52,239 --> 00:03:55,280
which level should he focus on

99
00:03:55,280 --> 00:03:58,799
our some statistical analysis indicates

100
00:03:58,799 --> 00:04:00,959
that the second lowest level is the best

101
00:04:00,959 --> 00:04:03,840
choice if we focus focus on the second

102
00:04:03,840 --> 00:04:06,319
lowest level and collect the spectrogram

103
00:04:06,319 --> 00:04:07,760
while opening three different

104
00:04:07,760 --> 00:04:11,040
applications we can clearly see some

105
00:04:11,040 --> 00:04:14,239
horizontal stripe patterns in there like

106
00:04:14,239 --> 00:04:16,399
which can be used to infer

107
00:04:16,399 --> 00:04:19,839
which application is being opened

108
00:04:19,839 --> 00:04:22,320
and to simply verify that such

109
00:04:22,320 --> 00:04:24,880
such patterns are corrupt correlated to

110
00:04:24,880 --> 00:04:27,440
the performance level switching we

111
00:04:27,440 --> 00:04:29,280
simply capture the

112
00:04:29,280 --> 00:04:30,800
trace of

113
00:04:30,800 --> 00:04:33,759
the gpu memory clock frequency

114
00:04:33,759 --> 00:04:34,560
and

115
00:04:34,560 --> 00:04:37,120
using the amd gpu driver

116
00:04:37,120 --> 00:04:39,840
and we plot the average magnitude along

117
00:04:39,840 --> 00:04:42,639
the time axis in the spectrogram and as

118
00:04:42,639 --> 00:04:44,720
we can see these two traces match very

119
00:04:44,720 --> 00:04:46,960
well

120
00:04:47,360 --> 00:04:48,320
however

121
00:04:48,320 --> 00:04:51,199
the exploitability of such signals is

122
00:04:51,199 --> 00:04:53,680
limited if we rely on only on those

123
00:04:53,680 --> 00:04:55,199
strike patterns

124
00:04:55,199 --> 00:04:57,360
that's there are basically two problems

125
00:04:57,360 --> 00:04:59,680
first of all like all the other clock

126
00:04:59,680 --> 00:05:01,919
signals in your computer the gpu memory

127
00:05:01,919 --> 00:05:03,919
clock implements spread spectrum

128
00:05:03,919 --> 00:05:06,639
clocking to reduce the intensity of the

129
00:05:06,639 --> 00:05:09,840
emulations which means it can be easily

130
00:05:09,840 --> 00:05:12,479
attenuated to a level as weak as the

131
00:05:12,479 --> 00:05:15,360
background noise for example here we can

132
00:05:15,360 --> 00:05:17,600
see a signal collected from 6 meters

133
00:05:17,600 --> 00:05:18,400
away

134
00:05:18,400 --> 00:05:20,400
where the signal becomes too weak to

135
00:05:20,400 --> 00:05:22,960
show any stripe patterns

136
00:05:22,960 --> 00:05:26,240
so we solve this problem by applying the

137
00:05:26,240 --> 00:05:28,160
technique called folding

138
00:05:28,160 --> 00:05:31,360
basically when a signal is modulated by

139
00:05:31,360 --> 00:05:34,240
the sse there will be a series of

140
00:05:34,240 --> 00:05:37,199
subclocks with the fixed interval f sub

141
00:05:37,199 --> 00:05:39,759
m equal to the modulating frequency of

142
00:05:39,759 --> 00:05:42,880
the ssc and accordingly in the dft

143
00:05:42,880 --> 00:05:45,919
results there are some periodical beams

144
00:05:45,919 --> 00:05:48,639
with a fixed interval delta

145
00:05:48,639 --> 00:05:51,360
to apply folding we simply sum up these

146
00:05:51,360 --> 00:05:53,520
periodical dft beams at different

147
00:05:53,520 --> 00:05:56,560
locations and as we can see only when

148
00:05:56,560 --> 00:05:59,360
the correct subclocks are selected we

149
00:05:59,360 --> 00:06:02,000
can obtain a maximum value

150
00:06:02,000 --> 00:06:03,840
and what's more important

151
00:06:03,840 --> 00:06:07,039
if even if the signal's intensity is as

152
00:06:07,039 --> 00:06:08,960
low as the background noise

153
00:06:08,960 --> 00:06:11,039
the folding can still effectively

154
00:06:11,039 --> 00:06:12,880
identify those subclocks and enhance

155
00:06:12,880 --> 00:06:14,800
such signals

156
00:06:14,800 --> 00:06:16,720
so what if we apply this folding to the

157
00:06:16,720 --> 00:06:19,280
original spectrogram and collect the

158
00:06:19,280 --> 00:06:21,919
energy at all subclocks recover time

159
00:06:21,919 --> 00:06:23,440
serious trace

160
00:06:23,440 --> 00:06:25,919
as we can see we can see some

161
00:06:25,919 --> 00:06:28,720
clearly patterns corresponding to the

162
00:06:28,720 --> 00:06:31,360
periodical workload

163
00:06:31,360 --> 00:06:34,160
but even with this folding technique

164
00:06:34,160 --> 00:06:36,000
other problem can occur with the

165
00:06:36,000 --> 00:06:38,319
presence of some strong background noise

166
00:06:38,319 --> 00:06:40,479
for example here we can see some strong

167
00:06:40,479 --> 00:06:42,800
background noise near the frequency of

168
00:06:42,800 --> 00:06:45,360
800 megahertz if we apply folding

169
00:06:45,360 --> 00:06:47,600
directly in the recovered time series

170
00:06:47,600 --> 00:06:48,639
data

171
00:06:48,639 --> 00:06:51,039
is dominant by this strong period

172
00:06:51,039 --> 00:06:53,199
periodical noise

173
00:06:53,199 --> 00:06:56,560
so to remove such noise we simply apply

174
00:06:56,560 --> 00:06:57,360
a

175
00:06:57,360 --> 00:06:58,400
filter

176
00:06:58,400 --> 00:07:01,120
and the effect is that if we try to sum

177
00:07:01,120 --> 00:07:04,080
up the dft pins at any random locations

178
00:07:04,080 --> 00:07:05,120
the expect

179
00:07:05,120 --> 00:07:07,599
expectation of the sum up value will be

180
00:07:07,599 --> 00:07:10,720
zero and only if the subclocks are

181
00:07:10,720 --> 00:07:13,039
correctly selected the expectation will

182
00:07:13,039 --> 00:07:16,000
be a positive value as we can see when

183
00:07:16,000 --> 00:07:18,400
we apply such technique

184
00:07:18,400 --> 00:07:20,800
such as such a simple filter we can

185
00:07:20,800 --> 00:07:24,000
successfully remove all those noises and

186
00:07:24,000 --> 00:07:26,000
preserve only the

187
00:07:26,000 --> 00:07:27,919
pattern corresponding to the periodical

188
00:07:27,919 --> 00:07:29,440
workload

189
00:07:29,440 --> 00:07:31,840
so with such signal processing

190
00:07:31,840 --> 00:07:34,319
techniques an attacker can easily

191
00:07:34,319 --> 00:07:37,520
exploit such signals with only a simple

192
00:07:37,520 --> 00:07:40,400
sdr device and an off antenna

193
00:07:40,400 --> 00:07:42,960
to better understand the impact of this

194
00:07:42,960 --> 00:07:45,759
newly identified leakage we evaluated

195
00:07:45,759 --> 00:07:48,720
six different gpus covering

196
00:07:48,720 --> 00:07:51,120
the low end and high-end products of amd

197
00:07:51,120 --> 00:07:53,759
and new media released over the past six

198
00:07:53,759 --> 00:07:55,440
years

199
00:07:55,440 --> 00:07:57,199
now you may wonder how far can such

200
00:07:57,199 --> 00:07:59,759
attacks be launched

201
00:07:59,759 --> 00:08:02,560
so according to this figure the distance

202
00:08:02,560 --> 00:08:04,479
depends on the

203
00:08:04,479 --> 00:08:05,680
directions

204
00:08:05,680 --> 00:08:07,840
and except for the

205
00:08:07,840 --> 00:08:11,919
intermediate rtx 360 gpu most gpus they

206
00:08:11,919 --> 00:08:14,800
can transmit signals to several meters

207
00:08:14,800 --> 00:08:17,599
away in all directions and even for rtx

208
00:08:17,599 --> 00:08:20,960
3060 the distance can be

209
00:08:20,960 --> 00:08:23,039
longer than two meters in most

210
00:08:23,039 --> 00:08:24,479
directions

211
00:08:24,479 --> 00:08:26,479
as we can see although using an old

212
00:08:26,479 --> 00:08:28,960
metal case can make the things a little

213
00:08:28,960 --> 00:08:31,120
better there are still some directions

214
00:08:31,120 --> 00:08:35,360
where strong em leakages can be detected

215
00:08:35,360 --> 00:08:38,479
we also test if such signals can be

216
00:08:38,479 --> 00:08:40,559
can be collected from the outside of an

217
00:08:40,559 --> 00:08:41,760
apartment

218
00:08:41,760 --> 00:08:44,720
as we can see the plaster wall used in

219
00:08:44,720 --> 00:08:47,600
an apartment has negligible impact on

220
00:08:47,600 --> 00:08:49,680
the signal intensities although the

221
00:08:49,680 --> 00:08:51,920
concrete wall can attenuate the signal

222
00:08:51,920 --> 00:08:54,160
more but this amount of attenuation is

223
00:08:54,160 --> 00:08:55,760
still manageable with our signal

224
00:08:55,760 --> 00:08:58,160
processing technique

225
00:08:58,160 --> 00:09:00,399
so we perform the two case studies

226
00:09:00,399 --> 00:09:02,640
exploiting this leakage the first is

227
00:09:02,640 --> 00:09:05,519
so-called website fingerprinting attacks

228
00:09:05,519 --> 00:09:07,519
which is to infer which web page is

229
00:09:07,519 --> 00:09:10,240
visited by a user

230
00:09:10,240 --> 00:09:13,440
basically modern web page browsers will

231
00:09:13,440 --> 00:09:16,640
use gpu to help web website rendering

232
00:09:16,640 --> 00:09:18,320
like rasterization and the image

233
00:09:18,320 --> 00:09:21,040
composition it's so rendering different

234
00:09:21,040 --> 00:09:23,519
web pages will create different workload

235
00:09:23,519 --> 00:09:25,680
patterns which of course will create

236
00:09:25,680 --> 00:09:27,680
different performance level switching

237
00:09:27,680 --> 00:09:30,160
behaviors as demonstrated by these

238
00:09:30,160 --> 00:09:31,279
examples

239
00:09:31,279 --> 00:09:33,760
so an attacker can use this information

240
00:09:33,760 --> 00:09:37,440
to know which web page is being visited

241
00:09:37,440 --> 00:09:40,480
to evaluate this attack we selected 50

242
00:09:40,480 --> 00:09:42,560
websites to be opened in the google

243
00:09:42,560 --> 00:09:45,279
chrome browser and for each website we

244
00:09:45,279 --> 00:09:47,440
collect the signals at different spots

245
00:09:47,440 --> 00:09:49,279
defined by the distance and the

246
00:09:49,279 --> 00:09:50,560
directions

247
00:09:50,560 --> 00:09:53,680
at each spot we collected 50 em traces

248
00:09:53,680 --> 00:09:55,839
to train a dl model

249
00:09:55,839 --> 00:09:59,360
and classify the temperatures data

250
00:09:59,360 --> 00:10:01,279
we use the data collected from two

251
00:10:01,279 --> 00:10:03,200
directions for training and data

252
00:10:03,200 --> 00:10:05,040
collected at the other directions for

253
00:10:05,040 --> 00:10:06,320
testing

254
00:10:06,320 --> 00:10:08,480
now let's see the results

255
00:10:08,480 --> 00:10:11,200
as we can see from the confusion matrix

256
00:10:11,200 --> 00:10:14,399
and the prediction results

257
00:10:14,399 --> 00:10:16,880
prediction accuracy this attack is

258
00:10:16,880 --> 00:10:19,839
successful in all tested gpus even

259
00:10:19,839 --> 00:10:22,720
though some gpu like rtx 3060 the

260
00:10:22,720 --> 00:10:27,200
accuracy is relatively low this 633 63

261
00:10:27,200 --> 00:10:29,839
accuracy is still gives the attacker

262
00:10:29,839 --> 00:10:32,959
enough information most of the time

263
00:10:32,959 --> 00:10:36,000
and actually and a real attacker can use

264
00:10:36,000 --> 00:10:39,040
data collected at any spot for training

265
00:10:39,040 --> 00:10:41,839
so if we use more data collected from

266
00:10:41,839 --> 00:10:43,760
more spots for training we can obtain

267
00:10:43,760 --> 00:10:47,839
even higher accuracy and similarly if we

268
00:10:47,839 --> 00:10:50,000
perform such attacks from a far away

269
00:10:50,000 --> 00:10:52,880
scenario we can also successfully

270
00:10:52,880 --> 00:10:55,279
implement such attacks for for the

271
00:10:55,279 --> 00:10:58,240
tested gpus

272
00:10:58,800 --> 00:11:01,279
the second case study is to infer the

273
00:11:01,279 --> 00:11:03,760
typed keystrokes and

274
00:11:03,760 --> 00:11:05,839
the inter learn the inter key stroke

275
00:11:05,839 --> 00:11:08,560
information basically

276
00:11:08,560 --> 00:11:11,120
this this this information can give the

277
00:11:11,120 --> 00:11:13,519
attacker knowledge like the password

278
00:11:13,519 --> 00:11:16,079
lens and although the typed words cannot

279
00:11:16,079 --> 00:11:18,000
be directly reviewed this

280
00:11:18,000 --> 00:11:19,680
interchangeable timing information may

281
00:11:19,680 --> 00:11:22,720
be exploited to recover the typed key

282
00:11:22,720 --> 00:11:25,600
pairs because typing different kpis will

283
00:11:25,600 --> 00:11:29,120
actually take a different amount of time

284
00:11:29,120 --> 00:11:31,839
so when we type in a web page it will

285
00:11:31,839 --> 00:11:34,160
create some gpu workload like re-route

286
00:11:34,160 --> 00:11:36,480
stylization or recomposition

287
00:11:36,480 --> 00:11:39,440
here we can see when we type abc

288
00:11:39,440 --> 00:11:42,480
with the time interval 200 milliseconds

289
00:11:42,480 --> 00:11:45,200
and between a and b 350 milliseconds

290
00:11:45,200 --> 00:11:47,760
between b and c and the 500 milliseconds

291
00:11:47,760 --> 00:11:50,480
between c and a we can clearly identify

292
00:11:50,480 --> 00:11:52,160
each keystroke and learn the

293
00:11:52,160 --> 00:11:54,320
inter-keystroke timing information

294
00:11:54,320 --> 00:11:55,600
we also

295
00:11:55,600 --> 00:11:57,600
evaluated a more practical scenario

296
00:11:57,600 --> 00:12:00,399
where we ask real people to type

297
00:12:00,399 --> 00:12:02,800
username and password on the facebook

298
00:12:02,800 --> 00:12:05,279
login page we can see every keystrokes

299
00:12:05,279 --> 00:12:07,519
including the tab can be successfully

300
00:12:07,519 --> 00:12:10,079
identified

301
00:12:10,079 --> 00:12:12,000
so we have evaluated such keystroke

302
00:12:12,000 --> 00:12:14,880
timing attacks on different gpus

303
00:12:14,880 --> 00:12:18,880
it turns out like that amd gpus are less

304
00:12:18,880 --> 00:12:21,040
vulnerable in this case

305
00:12:21,040 --> 00:12:25,200
rx 580 is the only gpu that can leak

306
00:12:25,200 --> 00:12:27,200
historic information

307
00:12:27,200 --> 00:12:28,480
for amd

308
00:12:28,480 --> 00:12:29,839
products

309
00:12:29,839 --> 00:12:32,399
and it's the time resolution is worse

310
00:12:32,399 --> 00:12:35,200
compared to the new media gpus

311
00:12:35,200 --> 00:12:38,320
on the contrary only media fuels can

312
00:12:38,320 --> 00:12:40,480
leak very detailed information about

313
00:12:40,480 --> 00:12:42,399
about the keystrokes

314
00:12:42,399 --> 00:12:45,360
which means this this can be implemented

315
00:12:45,360 --> 00:12:47,760
to recover keystrokes

316
00:12:47,760 --> 00:12:50,839
uh with very short intervals in

317
00:12:50,839 --> 00:12:53,440
between now you may think we can easily

318
00:12:53,440 --> 00:12:56,639
fix it by disabling the gpu dvfs

319
00:12:56,639 --> 00:12:59,040
but unfortunately that's not the case

320
00:12:59,040 --> 00:13:00,560
first of all it will hurt the

321
00:13:00,560 --> 00:13:03,440
performance or energy efficiency

322
00:13:03,440 --> 00:13:06,000
but more problematically it may not even

323
00:13:06,000 --> 00:13:07,680
be effective for the case of an

324
00:13:07,680 --> 00:13:09,279
immediate gpus

325
00:13:09,279 --> 00:13:11,760
after we do this we find some new

326
00:13:11,760 --> 00:13:12,959
exposurable

327
00:13:12,959 --> 00:13:16,079
em signals at the 1a data rate that can

328
00:13:16,079 --> 00:13:18,959
be am modulated by the activities

329
00:13:18,959 --> 00:13:20,800
and what's even worse

330
00:13:20,800 --> 00:13:22,720
when we try to use such signals to

331
00:13:22,720 --> 00:13:24,399
perform the website fingerprinting

332
00:13:24,399 --> 00:13:26,560
attacks we can obtain an even higher

333
00:13:26,560 --> 00:13:29,199
accuracy

334
00:13:29,360 --> 00:13:32,000
so how can we counter measure it here we

335
00:13:32,000 --> 00:13:34,639
provide several possible solutions

336
00:13:34,639 --> 00:13:37,440
em shielding is a straightforward way to

337
00:13:37,440 --> 00:13:39,920
attenuate the signals but as our

338
00:13:39,920 --> 00:13:42,639
previous evaluations indicate that

339
00:13:42,639 --> 00:13:45,120
even in an old metal case the gpu will

340
00:13:45,120 --> 00:13:47,519
generate strong em leakages so we

341
00:13:47,519 --> 00:13:49,760
believe more careful engineering efforts

342
00:13:49,760 --> 00:13:52,160
are needed to implement this and jamming

343
00:13:52,160 --> 00:13:54,079
the signal frequency band using

344
00:13:54,079 --> 00:13:56,399
frequency using strong noises is another

345
00:13:56,399 --> 00:13:59,040
solution but as our signal processing

346
00:13:59,040 --> 00:14:01,360
techniques are kind of resilient to

347
00:14:01,360 --> 00:14:04,079
random noises so we believe

348
00:14:04,079 --> 00:14:06,639
maybe the noise needs to have very high

349
00:14:06,639 --> 00:14:09,279
intensity and reducing the sensitivity

350
00:14:09,279 --> 00:14:12,160
of gpu dvfs will definitely reduce the

351
00:14:12,160 --> 00:14:14,160
signal of time resolution

352
00:14:14,160 --> 00:14:15,040
but

353
00:14:15,040 --> 00:14:17,519
it may hurt energy efficiency we can

354
00:14:17,519 --> 00:14:20,399
also obstruct the original gpu usage

355
00:14:20,399 --> 00:14:22,639
pattern by running some random workload

356
00:14:22,639 --> 00:14:24,800
it's an easy to implement

357
00:14:24,800 --> 00:14:27,440
implement method but it may inevitably

358
00:14:27,440 --> 00:14:28,839
induce some

359
00:14:28,839 --> 00:14:32,720
overhead so in this work we

360
00:14:32,720 --> 00:14:35,440
we found that the gpu dvfs will indeed

361
00:14:35,440 --> 00:14:37,920
inevitably induce some leakages by

362
00:14:37,920 --> 00:14:39,680
performing the workload dependent

363
00:14:39,680 --> 00:14:42,000
performance level solution behaviors and

364
00:14:42,000 --> 00:14:45,279
we can use the emulations to identify

365
00:14:45,279 --> 00:14:48,639
such a tool to detect such switching

366
00:14:48,639 --> 00:14:51,440
behaviors and we also proved that this

367
00:14:51,440 --> 00:14:53,920
new leakage can be exploited to launch

368
00:14:53,920 --> 00:14:55,600
practical attacks like website

369
00:14:55,600 --> 00:14:57,519
fingerprinting attacks and key stroke

370
00:14:57,519 --> 00:14:59,199
timing attacks

371
00:14:59,199 --> 00:15:01,920
and we also find eliminating such

372
00:15:01,920 --> 00:15:04,079
leakages is kind of challenging so we

373
00:15:04,079 --> 00:15:06,000
believe that more efforts are needed in

374
00:15:06,000 --> 00:15:08,160
the future to handle this

375
00:15:08,160 --> 00:15:10,320
thank you for listening do you have any

376
00:15:10,320 --> 00:15:13,320
questions

377
00:15:17,680 --> 00:15:19,680
if there are questions here

378
00:15:19,680 --> 00:15:21,680
please come to the microphone introduce

379
00:15:21,680 --> 00:15:22,959
yourself and

380
00:15:22,959 --> 00:15:26,119
your affiliation

381
00:15:26,160 --> 00:15:27,839
uh until and

382
00:15:27,839 --> 00:15:29,440
anyone online

383
00:15:29,440 --> 00:15:31,360
please write your questions until then

384
00:15:31,360 --> 00:15:33,199
um you mentioned

385
00:15:33,199 --> 00:15:35,199
in your in your talk that

386
00:15:35,199 --> 00:15:37,440
you use the uh the second performance

387
00:15:37,440 --> 00:15:38,720
level

388
00:15:38,720 --> 00:15:40,639
yeah and in

389
00:15:40,639 --> 00:15:42,480
in gpus that have three performance

390
00:15:42,480 --> 00:15:44,639
levels i can understand why this is

391
00:15:44,639 --> 00:15:46,800
useful because that's the middle between

392
00:15:46,800 --> 00:15:48,000
you you have to cross it when you go

393
00:15:48,000 --> 00:15:49,519
between the extremes

394
00:15:49,519 --> 00:15:51,199
but why would you

395
00:15:51,199 --> 00:15:53,120
what did you use on other

396
00:15:53,120 --> 00:15:54,800
gpus when you have

397
00:15:54,800 --> 00:15:56,880
more performance levels

398
00:15:56,880 --> 00:15:59,759
actually all are evaluated gpus they not

399
00:15:59,759 --> 00:16:01,680
necessarily have three performance

400
00:16:01,680 --> 00:16:04,079
levels there are some

401
00:16:04,079 --> 00:16:07,440
gpus like many new media gpus they have

402
00:16:07,440 --> 00:16:10,160
four or five performance levels

403
00:16:10,160 --> 00:16:10,959
like

404
00:16:10,959 --> 00:16:13,680
that's only an example for rx 580 that

405
00:16:13,680 --> 00:16:16,160
only has three performance levels so

406
00:16:16,160 --> 00:16:18,880
actually like all these evaluated gpus

407
00:16:18,880 --> 00:16:19,839
it's

408
00:16:19,839 --> 00:16:22,399
it has multiple performance levels

409
00:16:22,399 --> 00:16:24,959
and yeah and we found for all gpus in

410
00:16:24,959 --> 00:16:27,680
the second lowest level is like mostly

411
00:16:27,680 --> 00:16:30,160
frequently switched to so that level

412
00:16:30,160 --> 00:16:31,440
will

413
00:16:31,440 --> 00:16:33,360
leak most information compared to the

414
00:16:33,360 --> 00:16:34,959
others

415
00:16:34,959 --> 00:16:37,839
okay next

416
00:16:39,120 --> 00:16:40,959
and um

417
00:16:40,959 --> 00:16:43,600
all the gpus you have tried are a gpu

418
00:16:43,600 --> 00:16:45,680
car on on cards that

419
00:16:45,680 --> 00:16:47,440
in extension cards

420
00:16:47,440 --> 00:16:49,600
what about the gpus that are embedded in

421
00:16:49,600 --> 00:16:52,000
the processors have you tried those uh

422
00:16:52,000 --> 00:16:55,759
for those uh embedded uh integrated gpus

423
00:16:55,759 --> 00:16:58,320
uh that that's a another problem like

424
00:16:58,320 --> 00:17:01,360
this dvf dvfs technique it's

425
00:17:01,360 --> 00:17:03,839
independently

426
00:17:03,839 --> 00:17:05,919
for the discrete gpus

427
00:17:05,919 --> 00:17:07,679
and those uh

428
00:17:07,679 --> 00:17:10,319
integrated gpus those are

429
00:17:10,319 --> 00:17:12,079
uh performed

430
00:17:12,079 --> 00:17:15,039
the voltage are regulated by the cpu

431
00:17:15,039 --> 00:17:18,319
vrms so that's like not in the scope of

432
00:17:18,319 --> 00:17:21,039
this work but definitely we can

433
00:17:21,039 --> 00:17:23,199
do some further investigations for those

434
00:17:23,199 --> 00:17:25,679
gpus

435
00:17:26,480 --> 00:17:28,720
okay

436
00:17:28,960 --> 00:17:29,760
hey

437
00:17:29,760 --> 00:17:32,320
so for defenses you proposed the faraday

438
00:17:32,320 --> 00:17:33,840
cage and then you said maybe it wasn't

439
00:17:33,840 --> 00:17:35,600
that effective because you tested with

440
00:17:35,600 --> 00:17:38,640
uh metal metal case gpus um i understand

441
00:17:38,640 --> 00:17:41,440
that correctly oh yeah was that the was

442
00:17:41,440 --> 00:17:43,360
that the metal case of the gpu or the

443
00:17:43,360 --> 00:17:45,840
like the case of the pc the gpu is in oh

444
00:17:45,840 --> 00:17:48,480
actually that's the case of the pc okay

445
00:17:48,480 --> 00:17:51,840
basically we like evaluated

446
00:17:51,840 --> 00:17:54,640
to the that measures the distance

447
00:17:54,640 --> 00:17:56,720
at two

448
00:17:56,720 --> 00:17:58,640
measure the distance at two

449
00:17:58,640 --> 00:18:01,600
different uh type of cases

450
00:18:01,600 --> 00:18:03,840
yeah one one type of case is like

451
00:18:03,840 --> 00:18:06,480
completely metal so

452
00:18:06,480 --> 00:18:08,240
even in that case we can measure some

453
00:18:08,240 --> 00:18:11,120
strong em leakages at some distance away

454
00:18:11,120 --> 00:18:13,440
so do you think uh a case that was

455
00:18:13,440 --> 00:18:15,840
designed specifically to block uh em

456
00:18:15,840 --> 00:18:18,559
signals would work better or no yeah i

457
00:18:18,559 --> 00:18:20,640
would believe if there is some case

458
00:18:20,640 --> 00:18:22,160
especially

459
00:18:22,160 --> 00:18:25,360
engineered to protect protect from em

460
00:18:25,360 --> 00:18:28,480
leakages that may be a better solution

461
00:18:28,480 --> 00:18:30,080
would it would it be a complete solution

462
00:18:30,080 --> 00:18:32,320
or do you think it will still leak

463
00:18:32,320 --> 00:18:34,160
it depends on how

464
00:18:34,160 --> 00:18:36,799
how fine that em shielding effect they

465
00:18:36,799 --> 00:18:38,000
can achieve

466
00:18:38,000 --> 00:18:40,160
but i believe there is definitely some

467
00:18:40,160 --> 00:18:41,760
engineering work

468
00:18:41,760 --> 00:18:45,200
needed there got it thank you thank you

469
00:18:45,200 --> 00:18:49,280
okay um before we thank zihan again i

470
00:18:49,280 --> 00:18:50,880
would like to mention that

471
00:18:50,880 --> 00:18:52,240
zihan is

472
00:18:52,240 --> 00:18:54,799
on the market he's looking for a place

473
00:18:54,799 --> 00:18:56,880
to continue his great work so if you are

474
00:18:56,880 --> 00:18:59,760
interested please contact xian and let's

475
00:18:59,760 --> 00:19:03,080
thank him again

