1
00:00:01,360 --> 00:00:03,040
so hello everyone thank you very much

2
00:00:03,040 --> 00:00:04,640
for the introduction i'm giovanni

3
00:00:04,640 --> 00:00:08,160
camuratti welcome to our recent work on

4
00:00:08,160 --> 00:00:11,360
noise sdr which is a method to

5
00:00:11,360 --> 00:00:13,679
modulate electromagnetic leakage in an

6
00:00:13,679 --> 00:00:16,239
arbitrary way using only unprivileged

7
00:00:16,239 --> 00:00:16,850
software

8
00:00:16,850 --> 00:00:18,240
[Music]

9
00:00:18,240 --> 00:00:20,640
so first a bit of context electronic

10
00:00:20,640 --> 00:00:23,119
devices produce a wide range of

11
00:00:23,119 --> 00:00:25,680
emissions physical signals including for

12
00:00:25,680 --> 00:00:28,480
example electromagnetic waves and this

13
00:00:28,480 --> 00:00:30,880
leakage these signals are somehow

14
00:00:30,880 --> 00:00:33,840
related to what the device is processing

15
00:00:33,840 --> 00:00:35,840
so they can be used to compromise

16
00:00:35,840 --> 00:00:38,000
security

17
00:00:38,000 --> 00:00:40,559
for example side channel attacks break

18
00:00:40,559 --> 00:00:43,680
cryptographic keys and tempest attacks

19
00:00:43,680 --> 00:00:45,920
recover plain text information for

20
00:00:45,920 --> 00:00:48,239
example a video on a screen

21
00:00:48,239 --> 00:00:50,239
in addition an attacker can try to build

22
00:00:50,239 --> 00:00:53,680
a covered channel by modulating actively

23
00:00:53,680 --> 00:00:54,960
this leakage

24
00:00:54,960 --> 00:00:57,120
trying to transmit data

25
00:00:57,120 --> 00:01:00,399
in an attack that is called soft tempest

26
00:01:00,399 --> 00:01:02,320
soft tempest is usually

27
00:01:02,320 --> 00:01:04,640
targeting air gap devices which are

28
00:01:04,640 --> 00:01:06,400
completely disconnected from the network

29
00:01:06,400 --> 00:01:08,560
so the threat model is that even if the

30
00:01:08,560 --> 00:01:11,200
attacker has the ability to run code

31
00:01:11,200 --> 00:01:13,760
this attacker cannot accelerate data but

32
00:01:13,760 --> 00:01:15,680
if there is leakage and if the attacker

33
00:01:15,680 --> 00:01:17,680
can modulate this leakage to encode

34
00:01:17,680 --> 00:01:19,920
information well then communication

35
00:01:19,920 --> 00:01:22,479
becomes possible again

36
00:01:22,479 --> 00:01:24,880
a classic example of soft emphasis is

37
00:01:24,880 --> 00:01:26,960
tempest for eliza so here you can see my

38
00:01:26,960 --> 00:01:29,040
screen i'm playing a youtube video with

39
00:01:29,040 --> 00:01:31,680
some stripes and on the right hand side

40
00:01:31,680 --> 00:01:33,759
you can see what i observe on the radio

41
00:01:33,759 --> 00:01:35,920
spectrum with the radio receiver and

42
00:01:35,920 --> 00:01:37,759
what we can observe is that depending on

43
00:01:37,759 --> 00:01:39,360
the frequency of the stripes we have

44
00:01:39,360 --> 00:01:41,119
different frequency components on the

45
00:01:41,119 --> 00:01:44,159
radio spectrum and if we interpret them

46
00:01:44,159 --> 00:01:46,880
as tunes and we listen we play audio we

47
00:01:46,880 --> 00:01:49,439
can hear the top ends to release

48
00:01:49,439 --> 00:01:51,439
however in the real world we want to

49
00:01:51,439 --> 00:01:54,079
transmit binary data so after having

50
00:01:54,079 --> 00:01:56,399
identified a carrier we might want to

51
00:01:56,399 --> 00:01:58,479
turn it on and off in order to encode

52
00:01:58,479 --> 00:02:00,240
ones and zeros this is called on off

53
00:02:00,240 --> 00:02:02,479
king and we can also do the same by

54
00:02:02,479 --> 00:02:04,320
changing the frequency frequency shift

55
00:02:04,320 --> 00:02:06,000
key

56
00:02:06,000 --> 00:02:08,160
these are two simple types of modulation

57
00:02:08,160 --> 00:02:10,000
that can be implemented with this loop

58
00:02:10,000 --> 00:02:12,640
uh by previous work so the idea is that

59
00:02:12,640 --> 00:02:14,400
there is an operation that can trigger

60
00:02:14,400 --> 00:02:16,319
the emission of leakage at a certain

61
00:02:16,319 --> 00:02:17,520
frequency

62
00:02:17,520 --> 00:02:19,200
of leakage and if we repeat this

63
00:02:19,200 --> 00:02:21,200
operation over and over in a loop half

64
00:02:21,200 --> 00:02:23,520
of the period on half of the period off

65
00:02:23,520 --> 00:02:25,120
then what we can do is to basically

66
00:02:25,120 --> 00:02:27,760
cross modulate a square wave on top of

67
00:02:27,760 --> 00:02:29,920
the natural leakage

68
00:02:29,920 --> 00:02:32,560
if the attacker turns this on and on

69
00:02:32,560 --> 00:02:35,040
well then we have on off keying but we

70
00:02:35,040 --> 00:02:37,599
can also change the period of the loop

71
00:02:37,599 --> 00:02:39,200
and then we can implement frequency

72
00:02:39,200 --> 00:02:40,959
shift keying which can be binary or

73
00:02:40,959 --> 00:02:44,000
there could be multiple values or even

74
00:02:44,000 --> 00:02:45,680
you could approximate a chirp or more

75
00:02:45,680 --> 00:02:47,920
complex signals

76
00:02:47,920 --> 00:02:50,319
there is a wide range of papers

77
00:02:50,319 --> 00:02:51,840
exploring many different types of

78
00:02:51,840 --> 00:02:54,239
leakage different physical principles we

79
00:02:54,239 --> 00:02:57,440
focus on electromagnetic radiation

80
00:02:57,440 --> 00:03:01,200
and in general previous work uses simple

81
00:03:01,200 --> 00:03:03,440
custom protocols and simple modulation

82
00:03:03,440 --> 00:03:04,560
schemes

83
00:03:04,560 --> 00:03:07,599
and generally it targets exfiltration in

84
00:03:07,599 --> 00:03:11,200
the context of air gap devices

85
00:03:11,200 --> 00:03:13,599
the problem is that with this you

86
00:03:13,599 --> 00:03:16,159
generally need custom receivers and

87
00:03:16,159 --> 00:03:18,480
there you cannot implement uh higher

88
00:03:18,480 --> 00:03:20,400
level protocols and error correction and

89
00:03:20,400 --> 00:03:22,879
pulse shaping or more complex features

90
00:03:22,879 --> 00:03:25,519
of the radio transmissions and these are

91
00:03:25,519 --> 00:03:28,159
also fixed implementations uh with a

92
00:03:28,159 --> 00:03:30,000
single application

93
00:03:30,000 --> 00:03:32,400
in the meanwhile real world radios are

94
00:03:32,400 --> 00:03:34,720
generally software defined that is uh

95
00:03:34,720 --> 00:03:36,720
the signals are completely created in

96
00:03:36,720 --> 00:03:38,720
software and then there is a minimal set

97
00:03:38,720 --> 00:03:40,480
of hardware components that you use to

98
00:03:40,480 --> 00:03:43,519
turn them in actual physical waves

99
00:03:43,519 --> 00:03:46,000
they can shape any signal in an

100
00:03:46,000 --> 00:03:47,440
arbitrary way they can achieve high

101
00:03:47,440 --> 00:03:49,040
performance at the physical layer but

102
00:03:49,040 --> 00:03:50,480
also implement

103
00:03:50,480 --> 00:03:52,319
complex protocols even at the upper

104
00:03:52,319 --> 00:03:54,879
layers and they can virtually target any

105
00:03:54,879 --> 00:03:56,480
application

106
00:03:56,480 --> 00:03:58,000
so the question becomes can we do more

107
00:03:58,000 --> 00:03:59,760
with soft tempest can we make it more

108
00:03:59,760 --> 00:04:02,400
similar to a software defined radio for

109
00:04:02,400 --> 00:04:04,879
for what is possible

110
00:04:04,879 --> 00:04:07,040
more precisely this requires trying to

111
00:04:07,040 --> 00:04:09,040
modulate the electromagnetic leakage in

112
00:04:09,040 --> 00:04:10,640
an arbitrary way

113
00:04:10,640 --> 00:04:12,560
changing its amplitude frequency and

114
00:04:12,560 --> 00:04:14,879
phase and doing that in a software

115
00:04:14,879 --> 00:04:16,880
defined way so that we can

116
00:04:16,880 --> 00:04:18,720
be flexible achieve high performance at

117
00:04:18,720 --> 00:04:20,720
the physical layer and explore more

118
00:04:20,720 --> 00:04:22,560
applications

119
00:04:22,560 --> 00:04:24,800
there is a big challenge to answer this

120
00:04:24,800 --> 00:04:26,880
this question and that is we have a very

121
00:04:26,880 --> 00:04:29,600
limited primitive we can only basically

122
00:04:29,600 --> 00:04:31,199
turn the leakage on and off we can

123
00:04:31,199 --> 00:04:33,520
access dram and create a leakage at 400

124
00:04:33,520 --> 00:04:35,440
megahertz or not

125
00:04:35,440 --> 00:04:36,960
and on the other hand what we want to do

126
00:04:36,960 --> 00:04:39,440
is generate this arbitrary sine wave at

127
00:04:39,440 --> 00:04:41,199
a certain frequency with the amplitude

128
00:04:41,199 --> 00:04:44,160
and phase that we desire

129
00:04:44,160 --> 00:04:46,160
the solution to this problem is fast

130
00:04:46,160 --> 00:04:48,160
band one bit coding and in particular

131
00:04:48,160 --> 00:04:50,800
radio frequency pwm this is a very

132
00:04:50,800 --> 00:04:53,040
fascinating mathematical

133
00:04:53,040 --> 00:04:54,160
topic

134
00:04:54,160 --> 00:04:56,639
in short we want to generate a generic

135
00:04:56,639 --> 00:04:59,440
sine wave modulated and we approximate

136
00:04:59,440 --> 00:05:01,440
this with a square wave let me

137
00:05:01,440 --> 00:05:03,680
illustrate this with an example

138
00:05:03,680 --> 00:05:05,520
so the signal in orange is the signal

139
00:05:05,520 --> 00:05:07,440
that we want to transmit it corresponds

140
00:05:07,440 --> 00:05:09,199
to a digital protocol with three

141
00:05:09,199 --> 00:05:12,639
subcarriers each modulated in binary

142
00:05:12,639 --> 00:05:15,440
phase shift key and we approximate it

143
00:05:15,440 --> 00:05:17,280
with the square wave in blue that you

144
00:05:17,280 --> 00:05:18,720
can see on the top

145
00:05:18,720 --> 00:05:20,720
if we go to look at these two signals in

146
00:05:20,720 --> 00:05:22,960
the frequency domain and we focus on the

147
00:05:22,960 --> 00:05:25,120
carrier frequency around the band of

148
00:05:25,120 --> 00:05:27,360
interest occupied by this protocol we

149
00:05:27,360 --> 00:05:29,440
see that the two signals are basically

150
00:05:29,440 --> 00:05:31,199
the same the blue one is a very good

151
00:05:31,199 --> 00:05:33,440
approximation all the errors all the

152
00:05:33,440 --> 00:05:36,160
noise is actually spread out of band

153
00:05:36,160 --> 00:05:38,240
where the receiver will not look for any

154
00:05:38,240 --> 00:05:39,919
signal

155
00:05:39,919 --> 00:05:42,720
so based on this idea we implemented the

156
00:05:42,720 --> 00:05:44,560
noise sdr to

157
00:05:44,560 --> 00:05:46,240
achieve arbitrary modulation of

158
00:05:46,240 --> 00:05:48,240
electromagnetic leakage we decided to

159
00:05:48,240 --> 00:05:51,120
demonstrate it with dram so if we access

160
00:05:51,120 --> 00:05:53,680
dram we generate a leakage at f leakage

161
00:05:53,680 --> 00:05:55,919
otherwise we don't and we have our data

162
00:05:55,919 --> 00:05:57,520
that we want to transmit

163
00:05:57,520 --> 00:06:00,000
in a first step we implement the upper

164
00:06:00,000 --> 00:06:02,400
layers and the physical layer using a

165
00:06:02,400 --> 00:06:04,639
generic existing software defined radio

166
00:06:04,639 --> 00:06:06,560
tools of course it can also be custom

167
00:06:06,560 --> 00:06:08,800
and what we get from this is the samples

168
00:06:08,800 --> 00:06:10,720
the baseband samples amplitude and phase

169
00:06:10,720 --> 00:06:12,560
or for those who of you who are familiar

170
00:06:12,560 --> 00:06:15,039
with software defined radios the iq

171
00:06:15,039 --> 00:06:17,199
samples that we would normally send to a

172
00:06:17,199 --> 00:06:19,120
hardware dongle like a usrp or a

173
00:06:19,120 --> 00:06:21,360
hackerref to turn them into physical

174
00:06:21,360 --> 00:06:23,360
waves but we don't have it so what we do

175
00:06:23,360 --> 00:06:26,639
instead is to apply radiofrequency pwm

176
00:06:26,639 --> 00:06:29,840
so we modulate them on top of a square

177
00:06:29,840 --> 00:06:32,560
wave at an intermediate frequency fif of

178
00:06:32,560 --> 00:06:35,280
our choice and this is still all all in

179
00:06:35,280 --> 00:06:37,039
software then the square wave is

180
00:06:37,039 --> 00:06:39,199
basically telling us on off on off right

181
00:06:39,199 --> 00:06:42,160
so we can use that to access dram or not

182
00:06:42,160 --> 00:06:44,800
and this has two functions first it

183
00:06:44,800 --> 00:06:46,800
creates a natural physical signal and

184
00:06:46,800 --> 00:06:49,120
second since the leakage is at f leakage

185
00:06:49,120 --> 00:06:51,599
it brings our signal to radio frequency

186
00:06:51,599 --> 00:06:55,199
at carrier frequency f leakage plus fif

187
00:06:55,199 --> 00:06:57,840
if the receiver tunes at this

188
00:06:57,840 --> 00:07:00,000
frequency it will receive a cosine wave

189
00:07:00,000 --> 00:07:02,160
with the amplitude and phase of our

190
00:07:02,160 --> 00:07:03,440
choice

191
00:07:03,440 --> 00:07:06,000
so how do we implement this in practice

192
00:07:06,000 --> 00:07:08,800
so it's very simple actually we just in

193
00:07:08,800 --> 00:07:11,120
software generate a cosine wave with the

194
00:07:11,120 --> 00:07:12,800
frequency and phase that we want then

195
00:07:12,800 --> 00:07:14,400
intuitively the square wave should have

196
00:07:14,400 --> 00:07:16,319
the same periods so by looking at the

197
00:07:16,319 --> 00:07:18,560
zero crossings we find out the periods

198
00:07:18,560 --> 00:07:20,319
of the square wave and then we apply a

199
00:07:20,319 --> 00:07:22,319
small pre-distortion on the pass width

200
00:07:22,319 --> 00:07:24,479
to control the amplitude of the final

201
00:07:24,479 --> 00:07:26,479
signal we are left with a list of

202
00:07:26,479 --> 00:07:29,280
timings that we use to control

203
00:07:29,280 --> 00:07:31,520
the accesses to dram at the first site

204
00:07:31,520 --> 00:07:33,759
this loop looks like previous work but

205
00:07:33,759 --> 00:07:35,599
the key difference is the way in which

206
00:07:35,599 --> 00:07:37,360
we control the timings with radio

207
00:07:37,360 --> 00:07:39,039
frequency pwm

208
00:07:39,039 --> 00:07:41,759
and intuitively the entire signal is now

209
00:07:41,759 --> 00:07:43,759
defined by a square wave by its timings

210
00:07:43,759 --> 00:07:45,919
so timing accuracy is very fundamental

211
00:07:45,919 --> 00:07:47,520
to control the bandwidth and the

212
00:07:47,520 --> 00:07:49,840
quantization levels for this we need a

213
00:07:49,840 --> 00:07:52,319
leakage that besides being leaky it's

214
00:07:52,319 --> 00:07:54,720
also fast and we need an accurate stable

215
00:07:54,720 --> 00:07:55,759
clock

216
00:07:55,759 --> 00:07:58,160
for the clock we use clock get time

217
00:07:58,160 --> 00:07:59,840
though there are many other primitives

218
00:07:59,840 --> 00:08:01,840
available in literature and for the

219
00:08:01,840 --> 00:08:03,199
leakage there are many types in the

220
00:08:03,199 --> 00:08:05,840
paper we focus on dram accesses here i

221
00:08:05,840 --> 00:08:08,879
want to show you an example on v8 arm v8

222
00:08:08,879 --> 00:08:11,840
so inspired by row hammer we first load

223
00:08:11,840 --> 00:08:14,319
the memory address and then we use an

224
00:08:14,319 --> 00:08:16,160
unprivileged cache instruction to

225
00:08:16,160 --> 00:08:18,160
invalidate the address so that we can

226
00:08:18,160 --> 00:08:19,280
always

227
00:08:19,280 --> 00:08:21,280
load from main memory and create a

228
00:08:21,280 --> 00:08:23,039
leakage

229
00:08:23,039 --> 00:08:25,919
we have integrated noise sdr with

230
00:08:25,919 --> 00:08:28,879
popular radio tools for example fldg

231
00:08:28,879 --> 00:08:30,560
which is an amateur radio tool

232
00:08:30,560 --> 00:08:33,519
implementing a lot of digital protocols

233
00:08:33,519 --> 00:08:35,440
so basically you can just give the data

234
00:08:35,440 --> 00:08:38,958
that you want to send the mode and the

235
00:08:38,958 --> 00:08:40,719
intermediate frequency and it will start

236
00:08:40,719 --> 00:08:42,640
producing physical waves that on the

237
00:08:42,640 --> 00:08:44,640
other end of the communication you can

238
00:08:44,640 --> 00:08:47,440
just receive with a normal radius setup

239
00:08:47,440 --> 00:08:49,279
with a software defined radio and fldg

240
00:08:49,279 --> 00:08:51,519
running on a laptop for example

241
00:08:51,519 --> 00:08:53,200
we also

242
00:08:53,200 --> 00:08:55,279
integrated noise sdr with new radio so

243
00:08:55,279 --> 00:08:57,839
there you generate first an iq file then

244
00:08:57,839 --> 00:09:00,160
you convert it to rfpwm you have a file

245
00:09:00,160 --> 00:09:02,160
of timings just a text file and you can

246
00:09:02,160 --> 00:09:04,720
give it to the noise sdr loop to turn it

247
00:09:04,720 --> 00:09:06,560
into radio waves

248
00:09:06,560 --> 00:09:08,560
we have evaluated noise sdr in many

249
00:09:08,560 --> 00:09:10,800
scenarios basically the software defined

250
00:09:10,800 --> 00:09:12,560
approach gives us a lot of flexibility

251
00:09:12,560 --> 00:09:13,839
in trying a lot of protocols

252
00:09:13,839 --> 00:09:15,920
architectures and devices

253
00:09:15,920 --> 00:09:17,839
you can see a few peaks here

254
00:09:17,839 --> 00:09:19,600
then you can also look at our github for

255
00:09:19,600 --> 00:09:22,560
more videos and demos however noise sdr

256
00:09:22,560 --> 00:09:24,959
also comes with a few limitations first

257
00:09:24,959 --> 00:09:27,600
of all like any soft tempest attack it's

258
00:09:27,600 --> 00:09:29,040
there must be a leakage that we can

259
00:09:29,040 --> 00:09:31,360
control so this is device dependent

260
00:09:31,360 --> 00:09:32,959
and then we have a limited bandwidth a

261
00:09:32,959 --> 00:09:35,360
few megahertz on rv8 as a maximum

262
00:09:35,360 --> 00:09:37,120
because of the timing resolution that we

263
00:09:37,120 --> 00:09:39,600
can get and also a limited choice of the

264
00:09:39,600 --> 00:09:42,160
carrier frequency because we

265
00:09:42,160 --> 00:09:43,680
can choose the intermediate frequency

266
00:09:43,680 --> 00:09:45,760
but we are still limited by the

267
00:09:45,760 --> 00:09:48,240
harmonics available on on the device for

268
00:09:48,240 --> 00:09:50,640
example the clock of the dram

269
00:09:50,640 --> 00:09:53,200
noise sdr has a security impact on three

270
00:09:53,200 --> 00:09:55,360
main threat models so the first one is

271
00:09:55,360 --> 00:09:57,600
classic exfiltration where the attacker

272
00:09:57,600 --> 00:10:00,399
takes the victim's data and accelerates

273
00:10:00,399 --> 00:10:03,040
them to another attacker control device

274
00:10:03,040 --> 00:10:05,440
nearby but then we also have tracking

275
00:10:05,440 --> 00:10:07,760
which is a bit similar but the idea is

276
00:10:07,760 --> 00:10:09,760
that the the data are now controlled by

277
00:10:09,760 --> 00:10:11,680
the attacker it's a tracking beacon so

278
00:10:11,680 --> 00:10:13,360
here it's very useful to use uh for

279
00:10:13,360 --> 00:10:16,079
example offline noise sdr because a very

280
00:10:16,079 --> 00:10:18,160
tiny piece of code can create a quite

281
00:10:18,160 --> 00:10:19,680
complex

282
00:10:19,680 --> 00:10:21,360
signal shape and a quite interesting

283
00:10:21,360 --> 00:10:22,240
beacon

284
00:10:22,240 --> 00:10:24,399
and then we have also explored the idea

285
00:10:24,399 --> 00:10:26,720
of injecting malicious data from the

286
00:10:26,720 --> 00:10:28,640
attacker to another receiver nearby

287
00:10:28,640 --> 00:10:31,279
which is now a victim

288
00:10:31,279 --> 00:10:34,399
here are a few examples of exfiltration

289
00:10:34,399 --> 00:10:37,120
the key message is that we can either go

290
00:10:37,120 --> 00:10:39,200
long range with a robust but slow

291
00:10:39,200 --> 00:10:41,839
communication or go at a bit shorter

292
00:10:41,839 --> 00:10:43,120
range and achieve very fast

293
00:10:43,120 --> 00:10:45,760
communication it's very easy we just use

294
00:10:45,760 --> 00:10:47,760
fldg basically and choose the right mode

295
00:10:47,760 --> 00:10:49,040
for the right device for the right

296
00:10:49,040 --> 00:10:50,800
situation for the goal that we want

297
00:10:50,800 --> 00:10:52,720
without much knowledge skills or

298
00:10:52,720 --> 00:10:55,440
implementation efforts uh required here

299
00:10:55,440 --> 00:10:57,120
you can also see that

300
00:10:57,120 --> 00:10:59,920
for reception we have an sdr dongle and

301
00:10:59,920 --> 00:11:03,360
a smartphone with ffvg running on it

302
00:11:03,360 --> 00:11:05,120
this is an example of tracking on a

303
00:11:05,120 --> 00:11:07,440
smartphone using a protocol which has

304
00:11:07,440 --> 00:11:09,519
beacons that can be easily

305
00:11:09,519 --> 00:11:12,000
received even below the noise floor and

306
00:11:12,000 --> 00:11:14,079
finally an example of injection in which

307
00:11:14,079 --> 00:11:15,839
we we are at a few meters from this

308
00:11:15,839 --> 00:11:18,560
handheld radio we first enable it then

309
00:11:18,560 --> 00:11:21,360
inject audio human voice and then we

310
00:11:21,360 --> 00:11:23,760
disable it again

311
00:11:23,760 --> 00:11:26,640
to defend against uh noise sdr we might

312
00:11:26,640 --> 00:11:28,480
want to reduce the leakage in hardware

313
00:11:28,480 --> 00:11:31,360
but that's that's hard

314
00:11:31,360 --> 00:11:32,480
or

315
00:11:32,480 --> 00:11:34,560
reduce the timing resolution

316
00:11:34,560 --> 00:11:36,399
that software has or application

317
00:11:36,399 --> 00:11:39,600
specific counter measures

318
00:11:39,600 --> 00:11:41,680
for future work we would like to

319
00:11:41,680 --> 00:11:44,000
optimize the implementation try other

320
00:11:44,000 --> 00:11:46,640
linkages other languages because i mean

321
00:11:46,640 --> 00:11:48,880
the principle is general implementation

322
00:11:48,880 --> 00:11:50,240
is an example

323
00:11:50,240 --> 00:11:52,000
and we would like also to find more

324
00:11:52,000 --> 00:11:54,000
examples of injection in radios in

325
00:11:54,000 --> 00:11:56,240
sensors maybe even radios and sensors on

326
00:11:56,240 --> 00:11:59,120
the same device exploiting radio in

327
00:11:59,120 --> 00:12:02,079
frequency interference on modern devices

328
00:12:02,079 --> 00:12:05,360
so to conclude noise sdr has achieved

329
00:12:05,360 --> 00:12:07,839
arbitrary modulation using pass band one

330
00:12:07,839 --> 00:12:10,320
bit coding and dram access is an example

331
00:12:10,320 --> 00:12:12,079
it's flexible and performant though

332
00:12:12,079 --> 00:12:13,760
there are some limitations on bandwidth

333
00:12:13,760 --> 00:12:16,160
and frequency and we have implemented it

334
00:12:16,160 --> 00:12:18,160
on many architectures and we have shown

335
00:12:18,160 --> 00:12:20,959
many security applications not just yeah

336
00:12:20,959 --> 00:12:23,120
it's open source feel free to try it out

337
00:12:23,120 --> 00:12:26,160
and are now here available for any

338
00:12:26,160 --> 00:12:28,079
questions you might have thank you let's

339
00:12:28,079 --> 00:12:30,800
thank our speaker

340
00:12:31,040 --> 00:12:31,760
hi

341
00:12:31,760 --> 00:12:33,440
questions please head up to the

342
00:12:33,440 --> 00:12:35,040
microphone and

343
00:12:35,040 --> 00:12:36,800
please let the speaker know who you are

344
00:12:36,800 --> 00:12:38,320
and where you're from while we're

345
00:12:38,320 --> 00:12:40,000
waiting for the first person um do you

346
00:12:40,000 --> 00:12:41,600
want a very nice talk just a quick

347
00:12:41,600 --> 00:12:43,040
question for you i really appreciate you

348
00:12:43,040 --> 00:12:44,880
talking about the limitations and the

349
00:12:44,880 --> 00:12:46,000
work

350
00:12:46,000 --> 00:12:47,040
can you

351
00:12:47,040 --> 00:12:48,720
talk a little bit about the

352
00:12:48,720 --> 00:12:51,440
who you see the adversary is here as in

353
00:12:51,440 --> 00:12:53,440
these are really cool techniques

354
00:12:53,440 --> 00:12:55,600
is someone is trying to intentionally

355
00:12:55,600 --> 00:12:57,120
remove the air gap or you know are you

356
00:12:57,120 --> 00:12:59,200
looking at ways in which

357
00:12:59,200 --> 00:13:00,560
something already on the machine could

358
00:13:00,560 --> 00:13:02,399
do it without additional

359
00:13:02,399 --> 00:13:04,880
assistance

360
00:13:04,880 --> 00:13:07,279
uh sorry for the very length so

361
00:13:07,279 --> 00:13:09,360
who is your adversary intentionally

362
00:13:09,360 --> 00:13:11,200
plugging in extra things to

363
00:13:11,200 --> 00:13:12,800
intentionally bridge the uh traditional

364
00:13:12,800 --> 00:13:14,240
air gaps

365
00:13:14,240 --> 00:13:15,600
you know is it software running that's

366
00:13:15,600 --> 00:13:17,040
trying to take advantage of extra

367
00:13:17,040 --> 00:13:18,240
interfaces

368
00:13:18,240 --> 00:13:19,040
you know

369
00:13:19,040 --> 00:13:20,880
what what's the practicality of the

370
00:13:20,880 --> 00:13:24,079
attack now and what steps do you see

371
00:13:24,079 --> 00:13:26,079
needing to be put into place ultimately

372
00:13:26,079 --> 00:13:27,600
to achieve it

373
00:13:27,600 --> 00:13:28,720
in real life

374
00:13:28,720 --> 00:13:31,040
oh yes okay so i think the key point in

375
00:13:31,040 --> 00:13:32,800
the threat model is that we're

376
00:13:32,800 --> 00:13:34,399
considering a piece of software that

377
00:13:34,399 --> 00:13:36,399
should not have access to any

378
00:13:36,399 --> 00:13:38,320
communication interface and we give it a

379
00:13:38,320 --> 00:13:40,480
communication interface and then what we

380
00:13:40,480 --> 00:13:42,240
are do i mean this is classics of

381
00:13:42,240 --> 00:13:43,680
tempest but what we are doing is to

382
00:13:43,680 --> 00:13:46,079
making it easier so for me the

383
00:13:46,079 --> 00:13:47,440
practicality of i mean all the

384
00:13:47,440 --> 00:13:50,240
limitations in terms of difficulty of

385
00:13:50,240 --> 00:13:52,639
placing the software on the device or

386
00:13:52,639 --> 00:13:54,880
having a leakage there are similar to

387
00:13:54,880 --> 00:13:57,600
classics of tempest but we where we help

388
00:13:57,600 --> 00:13:59,440
with practicality is that it becomes

389
00:13:59,440 --> 00:14:01,199
very easy now to transmit

390
00:14:01,199 --> 00:14:03,600
and all the techniques like

391
00:14:03,600 --> 00:14:05,760
error correction interleaving they

392
00:14:05,760 --> 00:14:08,959
really make everything more robust and

393
00:14:08,959 --> 00:14:11,040
achieve better performance yeah i liked

394
00:14:11,040 --> 00:14:12,880
your final slides showing potentially

395
00:14:12,880 --> 00:14:14,160
taking advantage of other pieces of

396
00:14:14,160 --> 00:14:16,800
hardware but let's go to our microphone

397
00:14:16,800 --> 00:14:19,440
hi uh eric paulie penn state um so you

398
00:14:19,440 --> 00:14:21,279
mentioned that you got around 8

399
00:14:21,279 --> 00:14:22,480
megahertz bandwidth through this

400
00:14:22,480 --> 00:14:24,399
technique on your example in terms of

401
00:14:24,399 --> 00:14:25,680
after error correction what was the

402
00:14:25,680 --> 00:14:27,120
resulting bit rate that you got out of

403
00:14:27,120 --> 00:14:27,839
that

404
00:14:27,839 --> 00:14:29,360
sorry i didn't hear the last part of the

405
00:14:29,360 --> 00:14:31,440
question um so you'd mention your

406
00:14:31,440 --> 00:14:33,279
bandwidth in terms of megahertz after

407
00:14:33,279 --> 00:14:34,959
error correction and all of the encoding

408
00:14:34,959 --> 00:14:36,399
what sort of bit rate did you get as a

409
00:14:36,399 --> 00:14:39,279
result of that oh okay so basically the

410
00:14:39,279 --> 00:14:41,360
best we get was this a few megahertz

411
00:14:41,360 --> 00:14:44,160
where we managed to transmit uh glonass

412
00:14:44,160 --> 00:14:46,959
with ca codes which are like 500

413
00:14:46,959 --> 00:14:48,720
kilohertz i think but for data

414
00:14:48,720 --> 00:14:52,399
transmission i have it uh here basically

415
00:14:52,399 --> 00:14:54,959
uh when we use a fast short range with

416
00:14:54,959 --> 00:14:58,240
3psk we achieved something like 600

417
00:14:58,240 --> 00:15:01,279
words per minute so that means a dsa key

418
00:15:01,279 --> 00:15:05,680
in a few in a few seconds great thanks

419
00:15:06,320 --> 00:15:08,079
let's thank our speaker one more time

420
00:15:08,079 --> 00:15:11,479
thank you very much

