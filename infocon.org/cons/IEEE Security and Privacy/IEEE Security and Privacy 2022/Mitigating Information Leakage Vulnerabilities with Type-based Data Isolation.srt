1
00:00:01,680 --> 00:00:04,080
so hello um indeed i'm going to talk

2
00:00:04,080 --> 00:00:05,759
well let's first focus on the mitigating

3
00:00:05,759 --> 00:00:07,359
information leakage fundability but

4
00:00:07,359 --> 00:00:09,840
first um i would like to point out the

5
00:00:09,840 --> 00:00:11,360
beautiful legal disclaimer from my

6
00:00:11,360 --> 00:00:12,960
employer intel who'd like to make it

7
00:00:12,960 --> 00:00:14,160
clear they have nothing to do with this

8
00:00:14,160 --> 00:00:16,800
work whatsoever i did this work at vusek

9
00:00:16,800 --> 00:00:18,480
my previous employer

10
00:00:18,480 --> 00:00:20,960
together with eric and christiano

11
00:00:20,960 --> 00:00:22,960
so the dream i'm going to first talk

12
00:00:22,960 --> 00:00:24,400
about the dream it's kind of what we

13
00:00:24,400 --> 00:00:26,080
would like in a perfect world so i'm a

14
00:00:26,080 --> 00:00:28,240
systems security researcher and so when

15
00:00:28,240 --> 00:00:29,519
i talk about information leakage

16
00:00:29,519 --> 00:00:31,119
vulnerabilities i mean at you know

17
00:00:31,119 --> 00:00:33,360
systems level so we're not talking about

18
00:00:33,360 --> 00:00:35,840
high-level privacy type stuff we're

19
00:00:35,840 --> 00:00:37,920
talking about really like spatial

20
00:00:37,920 --> 00:00:39,520
vulnerabilities

21
00:00:39,520 --> 00:00:41,520
so you know this is you have an

22
00:00:41,520 --> 00:00:43,360
out-of-bounds read and temporal

23
00:00:43,360 --> 00:00:45,039
vulnerabilities you might have a use

24
00:00:45,039 --> 00:00:46,640
after free you might be reading an

25
00:00:46,640 --> 00:00:48,160
initialized memory that was previously

26
00:00:48,160 --> 00:00:50,160
used for something else

27
00:00:50,160 --> 00:00:52,160
and also we're going to talk about you

28
00:00:52,160 --> 00:00:53,920
know architectural vulnerabilities these

29
00:00:53,920 --> 00:00:55,480
are kind of your traditional

30
00:00:55,480 --> 00:00:58,399
non-speculative vulnerabilities and this

31
00:00:58,399 --> 00:00:59,600
is these are things like you know you

32
00:00:59,600 --> 00:01:01,840
have a missing bounds check

33
00:01:01,840 --> 00:01:04,799
but it's 2022 so we're also going to try

34
00:01:04,799 --> 00:01:08,080
and take into account in this mitigation

35
00:01:08,080 --> 00:01:10,400
speculative vulnerabilities for example

36
00:01:10,400 --> 00:01:12,080
the spectre

37
00:01:12,080 --> 00:01:14,080
bounce check where you know your bounce

38
00:01:14,080 --> 00:01:15,600
check is there you don't have a software

39
00:01:15,600 --> 00:01:17,759
bug but the processor will helpfully

40
00:01:17,759 --> 00:01:20,000
speculate right past your check and

41
00:01:20,000 --> 00:01:21,680
still maybe an attacker can use side

42
00:01:21,680 --> 00:01:23,600
channels to leak data so this is the

43
00:01:23,600 --> 00:01:26,159
dream you know this is maybe a a dream i

44
00:01:26,159 --> 00:01:28,159
share with many other people with many

45
00:01:28,159 --> 00:01:29,840
other previous researchers and the

46
00:01:29,840 --> 00:01:31,920
problem is always that we want low

47
00:01:31,920 --> 00:01:33,200
overhead you know we want this to be

48
00:01:33,200 --> 00:01:35,439
practical in um

49
00:01:35,439 --> 00:01:36,720
wants to be practical enough that you

50
00:01:36,720 --> 00:01:38,560
will all deploy it right we want that

51
00:01:38,560 --> 00:01:40,560
magical 10 number that other viewers

52
00:01:40,560 --> 00:01:41,759
want to see

53
00:01:41,759 --> 00:01:43,840
so you know let's throw away the dream

54
00:01:43,840 --> 00:01:45,920
and let's move on to the plan

55
00:01:45,920 --> 00:01:47,840
so the plan is that we're not going to

56
00:01:47,840 --> 00:01:49,920
try mitigating all of this what we're

57
00:01:49,920 --> 00:01:51,200
going to do is we're going to try

58
00:01:51,200 --> 00:01:53,439
splitting things up by type you know and

59
00:01:53,439 --> 00:01:56,079
what do i mean by type well you know i'm

60
00:01:56,079 --> 00:01:57,600
a researcher i want to sell my paper i'm

61
00:01:57,600 --> 00:01:58,960
just going to tell you can define this

62
00:01:58,960 --> 00:02:01,360
as however you want we'll get back to

63
00:02:01,360 --> 00:02:02,560
them in a minute

64
00:02:02,560 --> 00:02:05,040
but in this example let's say you have

65
00:02:05,040 --> 00:02:07,200
some network buffers for your i o code

66
00:02:07,200 --> 00:02:08,800
and you have your private cryptographic

67
00:02:08,800 --> 00:02:10,560
keys right your private cryptographic

68
00:02:10,560 --> 00:02:13,120
keys should not be ending up in your

69
00:02:13,120 --> 00:02:15,520
network buffer this should definitely be

70
00:02:15,520 --> 00:02:17,520
isolated okay and actually we want

71
00:02:17,520 --> 00:02:19,520
fine-grained isolation of all the types

72
00:02:19,520 --> 00:02:21,280
you want so no matter how you're going

73
00:02:21,280 --> 00:02:23,680
to define your types you want to be able

74
00:02:23,680 --> 00:02:25,920
to have this fine grained isolation no

75
00:02:25,920 --> 00:02:28,720
kind of splitting into secret non-secret

76
00:02:28,720 --> 00:02:30,160
and so that's kind of one of the ways

77
00:02:30,160 --> 00:02:31,440
we're going to make our dream become

78
00:02:31,440 --> 00:02:32,879
reality

79
00:02:32,879 --> 00:02:33,920
and

80
00:02:33,920 --> 00:02:35,680
the other thing is that we're going to

81
00:02:35,680 --> 00:02:38,000
rely on the compiler and we're going to

82
00:02:38,000 --> 00:02:40,560
try using compiler magic to keep

83
00:02:40,560 --> 00:02:43,040
pointers in one of these types we're

84
00:02:43,040 --> 00:02:45,040
going to call the regions where we put

85
00:02:45,040 --> 00:02:47,760
one type of data an arena so here we

86
00:02:47,760 --> 00:02:50,720
have one arena for our temporary network

87
00:02:50,720 --> 00:02:52,800
buffers and one wiener one arena for our

88
00:02:52,800 --> 00:02:54,000
private keys

89
00:02:54,000 --> 00:02:55,680
and so let's say we have a pointer

90
00:02:55,680 --> 00:02:57,760
that's pointing into the network socket

91
00:02:57,760 --> 00:03:00,159
into this temporary socket

92
00:03:00,159 --> 00:03:01,280
and

93
00:03:01,280 --> 00:03:02,480
you know there's a vulnerability that

94
00:03:02,480 --> 00:03:04,159
lets you read out of bounds missing

95
00:03:04,159 --> 00:03:06,400
check and so maybe

96
00:03:06,400 --> 00:03:08,400
an attacker can use this to read out of

97
00:03:08,400 --> 00:03:10,400
bounds within this type of data within

98
00:03:10,400 --> 00:03:12,239
the temporary buffers

99
00:03:12,239 --> 00:03:14,159
and we're going to say that's okay

100
00:03:14,159 --> 00:03:15,200
you know we're going to completely

101
00:03:15,200 --> 00:03:17,440
betray our dream and just say yeah it's

102
00:03:17,440 --> 00:03:19,599
the same type of data so we're just not

103
00:03:19,599 --> 00:03:21,280
going to cover it in the interest of

104
00:03:21,280 --> 00:03:23,519
practicality on the other hand we're

105
00:03:23,519 --> 00:03:25,840
going to say that you should not be able

106
00:03:25,840 --> 00:03:27,280
to take a pointer that's pointing into

107
00:03:27,280 --> 00:03:29,519
these network buffers and use them to

108
00:03:29,519 --> 00:03:32,480
point to read out of bounds and read

109
00:03:32,480 --> 00:03:35,120
private keys another type of data right

110
00:03:35,120 --> 00:03:37,280
and so like compiler magic so the hell

111
00:03:37,280 --> 00:03:39,519
the answer is just magic and we move on

112
00:03:39,519 --> 00:03:42,480
no so we have three kind of pieces here

113
00:03:42,480 --> 00:03:45,440
so the first piece is an allocator that

114
00:03:45,440 --> 00:03:47,599
actually allocates things in arenas and

115
00:03:47,599 --> 00:03:49,280
we're gonna organize the address space

116
00:03:49,280 --> 00:03:51,280
in a very careful way

117
00:03:51,280 --> 00:03:55,280
we're gonna have four gigabyte arenas

118
00:03:55,280 --> 00:03:57,840
and so the idea is between each of these

119
00:03:57,840 --> 00:03:59,680
four gigabyte arenas and each of these

120
00:03:59,680 --> 00:04:02,159
arenas has one type of data

121
00:04:02,159 --> 00:04:05,040
we're going to put unmatched guard zones

122
00:04:05,040 --> 00:04:06,640
and those unmarked guard zones are also

123
00:04:06,640 --> 00:04:08,159
going to be four gigabytes this is also

124
00:04:08,159 --> 00:04:09,519
going to be aligned

125
00:04:09,519 --> 00:04:12,720
and one key point here is that a pointer

126
00:04:12,720 --> 00:04:14,480
that's pointing into one of these arenas

127
00:04:14,480 --> 00:04:16,880
so maybe this arena contains your

128
00:04:16,880 --> 00:04:18,238
network buffers

129
00:04:18,238 --> 00:04:19,759
you can go up to four gigabytes in

130
00:04:19,759 --> 00:04:21,759
either direction and you'll either stay

131
00:04:21,759 --> 00:04:24,320
in the same arena or you'll hit unmapped

132
00:04:24,320 --> 00:04:26,560
memory so you can move four gigabytes in

133
00:04:26,560 --> 00:04:28,560
any direction from a pointer

134
00:04:28,560 --> 00:04:31,040
and if you dereference it you're either

135
00:04:31,040 --> 00:04:32,639
going to get the same type of data or

136
00:04:32,639 --> 00:04:34,960
you're going to get a fault

137
00:04:34,960 --> 00:04:36,720
the second step is we're going to need

138
00:04:36,720 --> 00:04:38,320
some way to actually allocate different

139
00:04:38,320 --> 00:04:41,120
types of data into different arenas

140
00:04:41,120 --> 00:04:43,600
and you can do that this previous work

141
00:04:43,600 --> 00:04:45,040
which we lean heavily on in the

142
00:04:45,040 --> 00:04:47,280
evaluation code type after type there's

143
00:04:47,280 --> 00:04:48,880
also annotations there's a bunch of

144
00:04:48,880 --> 00:04:50,479
other techniques but we're just going to

145
00:04:50,479 --> 00:04:53,199
leave it high level here we just use

146
00:04:53,199 --> 00:04:56,000
some way to allocate different types and

147
00:04:56,000 --> 00:04:57,840
then we have the actual component

148
00:04:57,840 --> 00:04:59,280
instrumentation

149
00:04:59,280 --> 00:05:01,280
and kind of the key point of the puzzle

150
00:05:01,280 --> 00:05:02,080
here

151
00:05:02,080 --> 00:05:04,240
is we don't allocate we don't try

152
00:05:04,240 --> 00:05:06,320
instrumenting the loads and stores

153
00:05:06,320 --> 00:05:07,919
we try instrumenting the pointer

154
00:05:07,919 --> 00:05:10,720
arithmetic and so we try and make sure

155
00:05:10,720 --> 00:05:12,720
that when you do what point of

156
00:05:12,720 --> 00:05:14,960
arithmetic there's no way for you to get

157
00:05:14,960 --> 00:05:16,880
a pointer from one type of data to

158
00:05:16,880 --> 00:05:19,039
another type of data

159
00:05:19,039 --> 00:05:22,080
so the trick here is you have what we

160
00:05:22,080 --> 00:05:24,880
call valid safe and unsafe pointers so

161
00:05:24,880 --> 00:05:26,160
there's three classifications of

162
00:05:26,160 --> 00:05:29,280
pointers which we use so a valid pointer

163
00:05:29,280 --> 00:05:32,320
is one that is pointing at the intended

164
00:05:32,320 --> 00:05:34,160
arena so you have a pointer that's meant

165
00:05:34,160 --> 00:05:37,280
to point into your buffers or your keys

166
00:05:37,280 --> 00:05:39,520
that pointer is a valid pointer means

167
00:05:39,520 --> 00:05:41,919
that one is still pointing at that arena

168
00:05:41,919 --> 00:05:44,080
into this four gigabyte chunk

169
00:05:44,080 --> 00:05:45,600
you can move up to four gigabytes in

170
00:05:45,600 --> 00:05:47,600
both directions and that will get you a

171
00:05:47,600 --> 00:05:49,600
safe pointer it's a pointer that you can

172
00:05:49,600 --> 00:05:52,560
de-reference maybe it'll segfault

173
00:05:52,560 --> 00:05:54,320
but it's not going to let if you

174
00:05:54,320 --> 00:05:55,680
dereference this you're not going to be

175
00:05:55,680 --> 00:05:57,199
able to read data

176
00:05:57,199 --> 00:05:59,199
that belongs that it is of a different

177
00:05:59,199 --> 00:06:00,080
type

178
00:06:00,080 --> 00:06:02,080
and then you have an unsafe pointer

179
00:06:02,080 --> 00:06:03,759
which it may not point into another

180
00:06:03,759 --> 00:06:05,360
arena but an unsafe point is one where

181
00:06:05,360 --> 00:06:06,880
we can't prove

182
00:06:06,880 --> 00:06:08,880
that it's pointing into either the arena

183
00:06:08,880 --> 00:06:11,360
or the god zones next to it so an unsafe

184
00:06:11,360 --> 00:06:13,919
pointer might be pointing somewhere else

185
00:06:13,919 --> 00:06:15,440
and what we do is we insert

186
00:06:15,440 --> 00:06:16,800
instrumentation to do what we call

187
00:06:16,800 --> 00:06:19,520
masking masking being we take one of

188
00:06:19,520 --> 00:06:21,680
these safe pointers or unsafe pointers

189
00:06:21,680 --> 00:06:23,600
and we turn it back into a valid pointer

190
00:06:23,600 --> 00:06:25,759
that's pointing at the intended type for

191
00:06:25,759 --> 00:06:27,440
that pointer and because we're

192
00:06:27,440 --> 00:06:29,039
instrumenting points for a repetitive

193
00:06:29,039 --> 00:06:30,479
what we can do is we can just kind of

194
00:06:30,479 --> 00:06:31,919
trace back you know what was the

195
00:06:31,919 --> 00:06:34,400
arithmetic based on in the first place

196
00:06:34,400 --> 00:06:37,759
and we just can make sure that it has

197
00:06:37,759 --> 00:06:40,080
the same type it's pointing at the same

198
00:06:40,080 --> 00:06:42,080
arena as that pointer that was the basis

199
00:06:42,080 --> 00:06:44,560
for a point of arithmetic

200
00:06:44,560 --> 00:06:46,080
so

201
00:06:46,080 --> 00:06:48,400
the way masking works is you know we

202
00:06:48,400 --> 00:06:49,919
want low overheads we want this to be

203
00:06:49,919 --> 00:06:52,319
super cheap we want a super cheap way to

204
00:06:52,319 --> 00:06:53,440
take a pointer and make sure it's

205
00:06:53,440 --> 00:06:55,599
pointing at the arena we want and the

206
00:06:55,599 --> 00:06:57,120
trick is that because we have these

207
00:06:57,120 --> 00:06:59,120
aligned four gigabyte regions

208
00:06:59,120 --> 00:07:01,680
then we can say the lower 32 bits

209
00:07:01,680 --> 00:07:03,840
they're the offset into an arena and the

210
00:07:03,840 --> 00:07:07,120
upper 32 bits they identify the arena

211
00:07:07,120 --> 00:07:08,639
so basically they're kind of a type

212
00:07:08,639 --> 00:07:10,160
identifier

213
00:07:10,160 --> 00:07:12,319
and so we can say that let's add you

214
00:07:12,319 --> 00:07:14,080
know a pretty large value but something

215
00:07:14,080 --> 00:07:16,479
that's still within four gigabytes

216
00:07:16,479 --> 00:07:18,319
and that gets us a safe pointer it might

217
00:07:18,319 --> 00:07:20,720
still point within the same arena or it

218
00:07:20,720 --> 00:07:22,479
might point into your guard zone this is

219
00:07:22,479 --> 00:07:24,080
a safe pointer you can de-reference it

220
00:07:24,080 --> 00:07:26,400
it's fine the upper bits changed in this

221
00:07:26,400 --> 00:07:28,800
example but we don't care we don't have

222
00:07:28,800 --> 00:07:30,479
to apply masking here

223
00:07:30,479 --> 00:07:32,160
but the interesting case is where you

224
00:07:32,160 --> 00:07:33,680
have an unsafe pointer so let's add

225
00:07:33,680 --> 00:07:35,520
another large value we're no longer

226
00:07:35,520 --> 00:07:37,039
within four gigabytes or certainly not

227
00:07:37,039 --> 00:07:38,319
provably so

228
00:07:38,319 --> 00:07:40,720
and so how do you turn this pointer back

229
00:07:40,720 --> 00:07:42,720
into a pointer that points into the

230
00:07:42,720 --> 00:07:45,680
original arena and we just look back to

231
00:07:45,680 --> 00:07:47,759
the original valid pointer and we just

232
00:07:47,759 --> 00:07:50,080
take the upper 32 bits of the pointer

233
00:07:50,080 --> 00:07:51,840
and just stomp over them

234
00:07:51,840 --> 00:07:54,400
and we preserve the lower 32 bits and it

235
00:07:54,400 --> 00:07:56,800
turns out that on x6 for example you can

236
00:07:56,800 --> 00:07:59,360
do this with two zorg operations so it's

237
00:07:59,360 --> 00:08:02,639
actually super cheap to do in practice

238
00:08:02,639 --> 00:08:04,240
and so you know what does this let us do

239
00:08:04,240 --> 00:08:06,160
why is this interesting why is this kind

240
00:08:06,160 --> 00:08:07,360
of a delta

241
00:08:07,360 --> 00:08:09,680
of a previous work again we're going and

242
00:08:09,680 --> 00:08:11,039
the trick is we're going for the fine

243
00:08:11,039 --> 00:08:13,919
grain isolation and the high performance

244
00:08:13,919 --> 00:08:16,960
so here's an example of why

245
00:08:16,960 --> 00:08:18,960
i at least think this is really valuable

246
00:08:18,960 --> 00:08:20,080
trick

247
00:08:20,080 --> 00:08:22,240
and we have an example so one of the

248
00:08:22,240 --> 00:08:23,840
things that we require

249
00:08:23,840 --> 00:08:25,599
is that all of the pointer arguments to

250
00:08:25,599 --> 00:08:27,520
a function they have to be valid

251
00:08:27,520 --> 00:08:30,080
pointers when you pass an argument to a

252
00:08:30,080 --> 00:08:31,120
function

253
00:08:31,120 --> 00:08:33,440
you have to have matched it first if you

254
00:08:33,440 --> 00:08:34,880
can't prove it was already a valid

255
00:08:34,880 --> 00:08:37,200
pointer so you can assume that all of

256
00:08:37,200 --> 00:08:38,640
your pointers are valid or we also

257
00:08:38,640 --> 00:08:39,839
require that all of the points are

258
00:08:39,839 --> 00:08:41,839
stored in memory if added because we

259
00:08:41,839 --> 00:08:43,279
have no way of tracking whether a

260
00:08:43,279 --> 00:08:45,040
pointer that we just read from memory is

261
00:08:45,040 --> 00:08:47,279
valid or not so we just mandate if you

262
00:08:47,279 --> 00:08:48,959
store a pointer to memory if you pass a

263
00:08:48,959 --> 00:08:50,560
pointer as an argument all of the

264
00:08:50,560 --> 00:08:52,080
pointers that kind of escape a local

265
00:08:52,080 --> 00:08:54,800
function boundary they have to be found

266
00:08:54,800 --> 00:08:56,959
and so here we have a loop and it's just

267
00:08:56,959 --> 00:08:58,720
basically you take a valid pointer you

268
00:08:58,720 --> 00:09:00,720
deref you add one you dereference it you

269
00:09:00,720 --> 00:09:02,720
add one you dereference it and you know

270
00:09:02,720 --> 00:09:05,120
you can pass a huge size size can be 64

271
00:09:05,120 --> 00:09:06,720
bits so you can read way out of bounds

272
00:09:06,720 --> 00:09:08,560
with this but you can only do it step by

273
00:09:08,560 --> 00:09:09,519
step

274
00:09:09,519 --> 00:09:11,680
so you know you have your pointer maybe

275
00:09:11,680 --> 00:09:13,839
all the way at the end of an arena and

276
00:09:13,839 --> 00:09:16,320
then you read one and then you read

277
00:09:16,320 --> 00:09:18,959
another one but then at this point this

278
00:09:18,959 --> 00:09:20,320
is going to fault you're going to try

279
00:09:20,320 --> 00:09:21,600
dereferencing something that's in a

280
00:09:21,600 --> 00:09:22,880
guard zone

281
00:09:22,880 --> 00:09:24,560
and it's going to fall so actually you

282
00:09:24,560 --> 00:09:26,320
don't have to add any instrumentation

283
00:09:26,320 --> 00:09:28,160
here we don't need to do any masking

284
00:09:28,160 --> 00:09:30,160
because every time you read from a

285
00:09:30,160 --> 00:09:31,600
pointer that we know is within four

286
00:09:31,600 --> 00:09:32,800
gigabytes

287
00:09:32,800 --> 00:09:35,839
it's either going to be

288
00:09:35,839 --> 00:09:37,360
a valid point it's going to be pointing

289
00:09:37,360 --> 00:09:40,000
into the original arena we can say aha

290
00:09:40,000 --> 00:09:41,279
this is a valid pointer because it

291
00:09:41,279 --> 00:09:42,720
didn't fault

292
00:09:42,720 --> 00:09:44,959
or it's going to be pointing into memory

293
00:09:44,959 --> 00:09:46,640
unmapped memory and it will fault and

294
00:09:46,640 --> 00:09:50,000
then we don't care anymore

295
00:09:50,000 --> 00:09:51,600
the problem comes

296
00:09:51,600 --> 00:09:53,600
when we remember that oh we put

297
00:09:53,600 --> 00:09:55,839
speculation in our threat model and

298
00:09:55,839 --> 00:09:58,240
speculation doesn't really care um that

299
00:09:58,240 --> 00:09:59,920
you might fault on a speculative path

300
00:09:59,920 --> 00:10:00,800
right

301
00:10:00,800 --> 00:10:02,640
and uh you know you might get another

302
00:10:02,640 --> 00:10:06,079
read speculatively around the next loop

303
00:10:06,079 --> 00:10:08,560
and another read

304
00:10:08,560 --> 00:10:10,240
so in this example

305
00:10:10,240 --> 00:10:12,079
the thing is that no matter how fancy

306
00:10:12,079 --> 00:10:13,920
your processor is it's never going to

307
00:10:13,920 --> 00:10:15,920
manage to speculate far enough to get to

308
00:10:15,920 --> 00:10:18,399
the other arena we're adding one byte at

309
00:10:18,399 --> 00:10:20,560
a time you're not going to speculate

310
00:10:20,560 --> 00:10:23,360
four gigabytes of loop ahead so in this

311
00:10:23,360 --> 00:10:25,920
example also speculatively we don't have

312
00:10:25,920 --> 00:10:28,160
to instrument anything and one of the

313
00:10:28,160 --> 00:10:29,839
reasons that this technique works so

314
00:10:29,839 --> 00:10:32,240
well is that we get away without having

315
00:10:32,240 --> 00:10:33,440
to instrument this kind of loop

316
00:10:33,440 --> 00:10:35,200
whatsoever

317
00:10:35,200 --> 00:10:37,279
of course the problem comes that you

318
00:10:37,279 --> 00:10:38,880
know what if you change the stride to

319
00:10:38,880 --> 00:10:40,320
four gigabytes

320
00:10:40,320 --> 00:10:41,680
it's like okay we have a pointer at the

321
00:10:41,680 --> 00:10:43,440
end of the arena and we add four

322
00:10:43,440 --> 00:10:46,079
gigabytes and it's going to fault but

323
00:10:46,079 --> 00:10:48,399
then if you include speculation then

324
00:10:48,399 --> 00:10:50,720
yeah you know your next weed is going to

325
00:10:50,720 --> 00:10:53,120
be in the next arena maybe corresponding

326
00:10:53,120 --> 00:10:55,120
to a different type and at that point

327
00:10:55,120 --> 00:10:56,640
you might well have a problem if an

328
00:10:56,640 --> 00:10:58,000
attacker has a way to disclose this

329
00:10:58,000 --> 00:11:00,560
virus i channel or this kind of thing so

330
00:11:00,560 --> 00:11:02,079
in that case we would have to actually

331
00:11:02,079 --> 00:11:04,160
mask the pointer

332
00:11:04,160 --> 00:11:05,920
but in practice you don't have four

333
00:11:05,920 --> 00:11:09,120
gigabyte strides in real world code

334
00:11:09,120 --> 00:11:11,279
the problem of course is that this loop

335
00:11:11,279 --> 00:11:12,720
might not actually dereference the

336
00:11:12,720 --> 00:11:14,640
pointer every time

337
00:11:14,640 --> 00:11:16,959
and if you can't prove

338
00:11:16,959 --> 00:11:19,839
that these strides are going to actually

339
00:11:19,839 --> 00:11:20,880
that you are going to actually have a

340
00:11:20,880 --> 00:11:23,519
point to dereference without the pointer

341
00:11:23,519 --> 00:11:26,320
getting far enough that you can either

342
00:11:26,320 --> 00:11:28,720
architecturally or speculatively

343
00:11:28,720 --> 00:11:30,560
um

344
00:11:30,560 --> 00:11:33,040
end up with a fault then you know you

345
00:11:33,040 --> 00:11:35,600
are going to have to mask

346
00:11:35,600 --> 00:11:37,760
but okay so this is kind of the very

347
00:11:37,760 --> 00:11:39,360
high level view please read the paper

348
00:11:39,360 --> 00:11:42,320
for a rather more um detailed analysis

349
00:11:42,320 --> 00:11:45,360
of how this works and why it's safe

350
00:11:45,360 --> 00:11:46,800
but then how do you actually implement

351
00:11:46,800 --> 00:11:49,040
this so i mean we implemented using edo

352
00:11:49,040 --> 00:11:50,800
vm we have a compiler pass we have an

353
00:11:50,800 --> 00:11:53,440
allocator and so forth um and those of

354
00:11:53,440 --> 00:11:55,440
you familiar will just say kind of uh

355
00:11:55,440 --> 00:11:57,200
you know you just had in you just

356
00:11:57,200 --> 00:11:58,320
instrumentally get element point of

357
00:11:58,320 --> 00:12:00,079
instructions and those of you more

358
00:12:00,079 --> 00:12:02,000
familiar with things like ugly gaps and

359
00:12:02,000 --> 00:12:03,040
this kind of thing will realize no

360
00:12:03,040 --> 00:12:06,320
there's no way that's gonna work um

361
00:12:06,320 --> 00:12:08,320
we're just gonna call it magic does that

362
00:12:08,320 --> 00:12:10,000
work you know point of confidence or

363
00:12:10,000 --> 00:12:11,120
problem

364
00:12:11,120 --> 00:12:13,600
you know uh no not so much after all

365
00:12:13,600 --> 00:12:14,720
there turned out to be all kinds of

366
00:12:14,720 --> 00:12:16,880
corner cases for example you might have

367
00:12:16,880 --> 00:12:19,040
the pointers might be instructs or

368
00:12:19,040 --> 00:12:21,279
unions and that's a big killer you know

369
00:12:21,279 --> 00:12:23,680
you have a union you add something to it

370
00:12:23,680 --> 00:12:25,279
wait do we need to mask this or not

371
00:12:25,279 --> 00:12:27,920
what's the type of this

372
00:12:27,920 --> 00:12:30,480
c code is full of undefined behavior

373
00:12:30,480 --> 00:12:33,120
especially spec cpu is full of undefined

374
00:12:33,120 --> 00:12:35,920
behavior that you can't touch

375
00:12:35,920 --> 00:12:37,200
and you might have allocations that are

376
00:12:37,200 --> 00:12:38,399
bigger than four gigabytes you might

377
00:12:38,399 --> 00:12:40,320
have all kinds of other problems

378
00:12:40,320 --> 00:12:41,680
and uh

379
00:12:41,680 --> 00:12:43,040
you know we discussed this in the paper

380
00:12:43,040 --> 00:12:44,959
we find solutions but the most important

381
00:12:44,959 --> 00:12:47,360
bit for me is you know does it work

382
00:12:47,360 --> 00:12:49,040
you know i mean there are all kinds of

383
00:12:49,040 --> 00:12:50,720
obstacles which you can think of and you

384
00:12:50,720 --> 00:12:52,320
run across if you try and implement this

385
00:12:52,320 --> 00:12:54,240
but the answer is yes

386
00:12:54,240 --> 00:12:55,839
i mean most importantly we actually

387
00:12:55,839 --> 00:12:58,399
managed to mitigate vulnerabilities so

388
00:12:58,399 --> 00:13:01,760
we took a sample of cves

389
00:13:01,760 --> 00:13:04,639
we also mitigate the spectre

390
00:13:04,639 --> 00:13:06,160
bounce check and also actually some

391
00:13:06,160 --> 00:13:07,760
other spectra vulnerabilities from

392
00:13:07,760 --> 00:13:10,000
google safe slide suite

393
00:13:10,000 --> 00:13:11,519
um and also it actually runs a whole

394
00:13:11,519 --> 00:13:14,560
bunch of software not only cpu 2017

395
00:13:14,560 --> 00:13:17,600
and 2006 and 2000 but also a stack where

396
00:13:17,600 --> 00:13:20,000
we combine nginx open ssl muzzle and

397
00:13:20,000 --> 00:13:22,320
some other libraries

398
00:13:22,320 --> 00:13:24,079
with some patches you know let's be

399
00:13:24,079 --> 00:13:26,480
honest here there is undefined behavior

400
00:13:26,480 --> 00:13:29,120
here there are cases where the compiler

401
00:13:29,120 --> 00:13:31,120
magic is just not able to automatically

402
00:13:31,120 --> 00:13:32,399
identify this

403
00:13:32,399 --> 00:13:34,880
but we discussed in the paper actually a

404
00:13:34,880 --> 00:13:36,480
pretty surprisingly low number of

405
00:13:36,480 --> 00:13:39,279
patches is required for this to work

406
00:13:39,279 --> 00:13:40,560
and you know

407
00:13:40,560 --> 00:13:42,079
okay we wanted the low overhead do we

408
00:13:42,079 --> 00:13:44,079
manage it well kind of the the worst

409
00:13:44,079 --> 00:13:45,760
case i could come up with with nginx so

410
00:13:45,760 --> 00:13:49,360
this is nginx https requests really tiny

411
00:13:49,360 --> 00:13:53,279
requests lots of them on a fiber network

412
00:13:53,279 --> 00:13:55,680
interface and kind of the worst case

413
00:13:55,680 --> 00:13:58,560
overhead is about 8.4

414
00:13:58,560 --> 00:14:00,000
it's less than 10

415
00:14:00,000 --> 00:14:01,600
it's not great

416
00:14:01,600 --> 00:14:04,240
um the the real troublemaker is paul

417
00:14:04,240 --> 00:14:07,040
bench in cpu 2017

418
00:14:07,040 --> 00:14:08,000
where

419
00:14:08,000 --> 00:14:11,040
i have we have real problems with trying

420
00:14:11,040 --> 00:14:12,720
to just reason about some of this

421
00:14:12,720 --> 00:14:16,639
arithmetic in deeply inlined functions

422
00:14:16,639 --> 00:14:18,160
where it's just difficult to keep track

423
00:14:18,160 --> 00:14:19,519
of what's going on from a compiler

424
00:14:19,519 --> 00:14:21,680
perspective

425
00:14:21,680 --> 00:14:23,199
the runtime for the older version of

426
00:14:23,199 --> 00:14:25,199
spec is much more reasonable

427
00:14:25,199 --> 00:14:27,120
i mean this is in terms of actual

428
00:14:27,120 --> 00:14:28,800
runtime but also you can see in the

429
00:14:28,800 --> 00:14:30,240
paper some discussion of the memory

430
00:14:30,240 --> 00:14:32,240
overhead of this arena eradication but

431
00:14:32,240 --> 00:14:33,600
it kind of ends up being about ten

432
00:14:33,600 --> 00:14:34,720
percent

433
00:14:34,720 --> 00:14:36,480
um and a lot of this is really kind of

434
00:14:36,480 --> 00:14:39,040
the terrible worst cases

435
00:14:39,040 --> 00:14:41,279
um so there's a prototype on github

436
00:14:41,279 --> 00:14:42,720
thanks to a couple of my colleagues who

437
00:14:42,720 --> 00:14:44,399
actually made it work

438
00:14:44,399 --> 00:14:46,000
inside the docker

439
00:14:46,000 --> 00:14:48,320
um kind of my takeaways from this work

440
00:14:48,320 --> 00:14:50,079
are that you know point of provenance is

441
00:14:50,079 --> 00:14:51,120
tricky

442
00:14:51,120 --> 00:14:53,519
um there's some great work written on

443
00:14:53,519 --> 00:14:55,519
this the servers paper

444
00:14:55,519 --> 00:14:56,480
um

445
00:14:56,480 --> 00:14:57,920
one big problem that we have is that

446
00:14:57,920 --> 00:15:00,240
we're trying to include speculation here

447
00:15:00,240 --> 00:15:03,040
for example llvm scale evolution just

448
00:15:03,040 --> 00:15:04,480
doesn't there's no way for it to

449
00:15:04,480 --> 00:15:06,480
consider this you just you say what's

450
00:15:06,480 --> 00:15:08,000
the diff what's the maximum distance

451
00:15:08,000 --> 00:15:09,440
between this pointer and this pointer

452
00:15:09,440 --> 00:15:11,680
and it'll say well you know you have a

453
00:15:11,680 --> 00:15:14,000
bounce check here so you know your

454
00:15:14,000 --> 00:15:16,240
maximum distance is four bytes and it

455
00:15:16,240 --> 00:15:18,000
doesn't take into account that under

456
00:15:18,000 --> 00:15:20,480
speculation you know that branch may not

457
00:15:20,480 --> 00:15:22,399
necessarily actually provide you any

458
00:15:22,399 --> 00:15:25,440
guarantees and so for this to work well

459
00:15:25,440 --> 00:15:28,399
i think compilers really need better

460
00:15:28,399 --> 00:15:30,560
static analysis support for trying to

461
00:15:30,560 --> 00:15:32,320
reason out of speculation

462
00:15:32,320 --> 00:15:34,399
and finally kind of glossed over the

463
00:15:34,399 --> 00:15:36,880
whole type thing we do have actually

464
00:15:36,880 --> 00:15:39,440
pretty fine-grained types but for

465
00:15:39,440 --> 00:15:41,040
example in the web server you probably

466
00:15:41,040 --> 00:15:43,680
actually want your types to be more like

467
00:15:43,680 --> 00:15:46,079
different users data for example rather

468
00:15:46,079 --> 00:15:47,839
than actual c level types and then you

469
00:15:47,839 --> 00:15:49,040
really kind of need some manual

470
00:15:49,040 --> 00:15:51,040
intervention but having said all of that

471
00:15:51,040 --> 00:15:53,360
it works pretty well it's low overhead

472
00:15:53,360 --> 00:15:55,040
i'm kind of amazed that it actually

473
00:15:55,040 --> 00:15:57,279
worked out but it seems like much more

474
00:15:57,279 --> 00:15:59,519
promising to me than a lot of the

475
00:15:59,519 --> 00:16:01,759
previous work that's been doing kind of

476
00:16:01,759 --> 00:16:03,920
similar bits and bobs so thank you and

477
00:16:03,920 --> 00:16:07,479
i'd love to hear questions

478
00:16:12,000 --> 00:16:13,440
so we have time for some questions if

479
00:16:13,440 --> 00:16:14,880
you have questions please walk up to the

480
00:16:14,880 --> 00:16:17,279
microphone or if you have questions at

481
00:16:17,279 --> 00:16:22,439
home please type them in the q a box

482
00:16:22,480 --> 00:16:24,480
um okay sorry

483
00:16:24,480 --> 00:16:25,600
so

484
00:16:25,600 --> 00:16:28,320
um first off uh what you talk about is

485
00:16:28,320 --> 00:16:31,920
specifically for a 64-bit architecture

486
00:16:31,920 --> 00:16:34,240
right so have you experimented with

487
00:16:34,240 --> 00:16:36,399
smaller architectures smaller

488
00:16:36,399 --> 00:16:38,480
arena sizes etc

489
00:16:38,480 --> 00:16:41,279
i have not so it's uh it's something

490
00:16:41,279 --> 00:16:43,759
that you it kind of relies on the 64-bit

491
00:16:43,759 --> 00:16:45,040
address space so if you mean kind of

492
00:16:45,040 --> 00:16:47,440
microprocessors it's going to be way

493
00:16:47,440 --> 00:16:50,480
less practical i feel a lot of the wind

494
00:16:50,480 --> 00:16:52,000
here is really that it's so cheap to

495
00:16:52,000 --> 00:16:54,399
replace the 32-bit pointers

496
00:16:54,399 --> 00:16:56,079
but on the other hand there's things

497
00:16:56,079 --> 00:16:57,600
like if you had dedicated processor

498
00:16:57,600 --> 00:16:59,199
features like memory tagging and this

499
00:16:59,199 --> 00:17:01,279
kind of thing i think you could actually

500
00:17:01,279 --> 00:17:04,240
use that in some in some incarnations to

501
00:17:04,240 --> 00:17:06,319
try and implement something similar

502
00:17:06,319 --> 00:17:08,799
even without this kind of memory layer i

503
00:17:08,799 --> 00:17:10,240
see and and

504
00:17:10,240 --> 00:17:11,599
one more quick thing on your slide

505
00:17:11,599 --> 00:17:12,880
number 12

506
00:17:12,880 --> 00:17:14,480
something called equate was actually

507
00:17:14,480 --> 00:17:16,640
faster how did that happen

508
00:17:16,640 --> 00:17:17,599
i

509
00:17:17,599 --> 00:17:19,599
so that one of the

510
00:17:19,599 --> 00:17:19,980
um

511
00:17:19,980 --> 00:17:21,280
[Music]

512
00:17:21,280 --> 00:17:23,119
the problems with this kind of kind of

513
00:17:23,119 --> 00:17:25,280
deeply invasive

514
00:17:25,280 --> 00:17:27,760
um instrumentation is that sometimes you

515
00:17:27,760 --> 00:17:29,120
just make the compiler do something

516
00:17:29,120 --> 00:17:30,160
completely different in the code

517
00:17:30,160 --> 00:17:31,600
animation stage

518
00:17:31,600 --> 00:17:33,440
and it's deeply frustrating because you

519
00:17:33,440 --> 00:17:35,919
change one thing and suddenly you have

520
00:17:35,919 --> 00:17:38,000
um weird results like this

521
00:17:38,000 --> 00:17:41,039
so um but i have no idea

522
00:17:41,039 --> 00:17:42,320
and you change some configuration

523
00:17:42,320 --> 00:17:43,919
options and different benchmarks will

524
00:17:43,919 --> 00:17:44,840
gain

525
00:17:44,840 --> 00:17:47,120
so thank you

526
00:17:47,120 --> 00:17:49,520
great work

527
00:17:50,320 --> 00:17:52,960
if i may offer an educated guess to that

528
00:17:52,960 --> 00:17:54,799
last question

529
00:17:54,799 --> 00:17:57,120
um probably changing instruction

530
00:17:57,120 --> 00:17:59,760
alignment with respect to the eye

531
00:17:59,760 --> 00:18:02,400
and you get a better eye cash hit rate

532
00:18:02,400 --> 00:18:04,720
by accident

533
00:18:04,720 --> 00:18:06,799
no exactly so one of the things i

534
00:18:06,799 --> 00:18:08,559
glossed over here as well is the fact

535
00:18:08,559 --> 00:18:11,760
that um we cover with the heap and the

536
00:18:11,760 --> 00:18:14,400
stack and other allocations and that

537
00:18:14,400 --> 00:18:16,559
means also that you all we allocate on

538
00:18:16,559 --> 00:18:18,320
different stacks

539
00:18:18,320 --> 00:18:19,919
um something we kind of hacked up based

540
00:18:19,919 --> 00:18:21,520
on type as type and that also means that

541
00:18:21,520 --> 00:18:23,919
you change one thing it's like oh oh um

542
00:18:23,919 --> 00:18:25,919
your data cache is completely different

543
00:18:25,919 --> 00:18:28,080
you're you're also yes yeah yeah but

544
00:18:28,080 --> 00:18:29,760
yeah i think icash is a is a really good

545
00:18:29,760 --> 00:18:31,200
guess for why you tend to see these

546
00:18:31,200 --> 00:18:32,480
weird effects i didn't understand you

547
00:18:32,480 --> 00:18:34,160
were also changing the stacks decash

548
00:18:34,160 --> 00:18:37,039
behavior is also an excellent guess in

549
00:18:37,039 --> 00:18:39,840
that case question i want to ask

550
00:18:39,840 --> 00:18:41,440
very interesting work

551
00:18:41,440 --> 00:18:43,440
have you considered any other

552
00:18:43,440 --> 00:18:45,039
programming languages particular

553
00:18:45,039 --> 00:18:46,640
languages that are typically garbage

554
00:18:46,640 --> 00:18:47,919
collected i mean it would be a different

555
00:18:47,919 --> 00:18:49,360
paper i just wondered if you had any

556
00:18:49,360 --> 00:18:50,799
thoughts to share

557
00:18:50,799 --> 00:18:53,280
and not really so one

558
00:18:53,280 --> 00:18:55,520
one obvious question that i ask is why

559
00:18:55,520 --> 00:18:57,039
not web browsers

560
00:18:57,039 --> 00:18:59,039
um you know why not try defending

561
00:18:59,039 --> 00:19:00,640
javascript with this and it turns out

562
00:19:00,640 --> 00:19:02,559
that for example chrome i think already

563
00:19:02,559 --> 00:19:05,039
has partition malloc it already tries to

564
00:19:05,039 --> 00:19:07,280
kind of divide up

565
00:19:07,280 --> 00:19:09,280
allocations into kind of arena type

566
00:19:09,280 --> 00:19:11,360
things so i think certainly for some

567
00:19:11,360 --> 00:19:12,720
languages it wouldn't be that much of a

568
00:19:12,720 --> 00:19:13,679
delta

569
00:19:13,679 --> 00:19:15,280
but on the other hand this kind of if

570
00:19:15,280 --> 00:19:17,360
you want pooled allocations where you're

571
00:19:17,360 --> 00:19:18,799
really trying high efficiency

572
00:19:18,799 --> 00:19:20,240
allocations and you're trying to squeeze

573
00:19:20,240 --> 00:19:22,080
it all into a pool which i think a lot

574
00:19:22,080 --> 00:19:23,679
of garbage collected languages do and

575
00:19:23,679 --> 00:19:24,880
actually i think some of the spec match

576
00:19:24,880 --> 00:19:26,320
marks do

577
00:19:26,320 --> 00:19:28,240
it's tricky it's going to be quite

578
00:19:28,240 --> 00:19:29,440
different but it would be interesting to

579
00:19:29,440 --> 00:19:30,480
see

580
00:19:30,480 --> 00:19:32,160
we should talk offline

581
00:19:32,160 --> 00:19:33,919
okay maybe one more quick question while

582
00:19:33,919 --> 00:19:35,919
the next speaker sets up

583
00:19:35,919 --> 00:19:37,760
so i was wondering how fine-grained can

584
00:19:37,760 --> 00:19:39,440
you make this uh is there an overhead

585
00:19:39,440 --> 00:19:41,440
associated with creating a single arena

586
00:19:41,440 --> 00:19:43,200
and how many arenas can you have in

587
00:19:43,200 --> 00:19:44,480
practice or how many did you have in

588
00:19:44,480 --> 00:19:46,799
your experiments for example so i think

589
00:19:46,799 --> 00:19:48,960
in my experiment it was mostly less than

590
00:19:48,960 --> 00:19:50,720
a thousand you definitely do have a

591
00:19:50,720 --> 00:19:52,640
limit i refer you to the paper because

592
00:19:52,640 --> 00:19:53,840
i'm not going to try doing math in my

593
00:19:53,840 --> 00:19:54,720
head

594
00:19:54,720 --> 00:19:57,840
um but it's in the thousands it's in the

595
00:19:57,840 --> 00:19:59,440
tens of thousands but there's definitely

596
00:19:59,440 --> 00:20:01,760
a limit there and again otherwise you'd

597
00:20:01,760 --> 00:20:03,280
have to kind of shrink your arenas and

598
00:20:03,280 --> 00:20:04,159
stuff

599
00:20:04,159 --> 00:20:06,080
so yeah the fine grained is nice but

600
00:20:06,080 --> 00:20:08,320
there is a limit unfortunately

601
00:20:08,320 --> 00:20:10,780
all right let's thank the speaker again

602
00:20:10,780 --> 00:20:13,819
[Applause]

