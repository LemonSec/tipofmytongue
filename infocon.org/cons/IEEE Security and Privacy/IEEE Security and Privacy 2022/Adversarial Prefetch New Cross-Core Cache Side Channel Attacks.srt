1
00:00:02,240 --> 00:00:04,640
okay so good afternoon everyone my name

2
00:00:04,640 --> 00:00:06,799
is janan and i'm from university of

3
00:00:06,799 --> 00:00:09,120
pittsburgh so today i'm introducing our

4
00:00:09,120 --> 00:00:11,759
paper titled adversarial prefect new

5
00:00:11,759 --> 00:00:13,840
cross-court cash site channel attacks

6
00:00:13,840 --> 00:00:15,759
this is a joint work between me my

7
00:00:15,759 --> 00:00:17,920
colleague andrew and my advisors utah

8
00:00:17,920 --> 00:00:20,080
and june

9
00:00:20,080 --> 00:00:22,080
so these days more people start to use

10
00:00:22,080 --> 00:00:24,640
like powerful remote servers but all

11
00:00:24,640 --> 00:00:27,199
sorts of data calculations to the cloud

12
00:00:27,199 --> 00:00:29,279
can write some security concerns because

13
00:00:29,279 --> 00:00:31,199
we know the server is usually shared by

14
00:00:31,199 --> 00:00:32,640
multiple users

15
00:00:32,640 --> 00:00:35,040
so to solve this problem people use

16
00:00:35,040 --> 00:00:37,440
virtual machines or similar technologies

17
00:00:37,440 --> 00:00:39,680
so they can isolate the users at like

18
00:00:39,680 --> 00:00:41,040
software level

19
00:00:41,040 --> 00:00:43,280
but the low-level hardware especially

20
00:00:43,280 --> 00:00:45,760
the memory system the cache hierarchy

21
00:00:45,760 --> 00:00:48,320
they're still shared among users and

22
00:00:48,320 --> 00:00:50,719
that means hardware side channel attacks

23
00:00:50,719 --> 00:00:52,640
might still be possible

24
00:00:52,640 --> 00:00:55,120
so kaiser channel attacks are one of the

25
00:00:55,120 --> 00:00:57,520
most powerful side channel attacks and

26
00:00:57,520 --> 00:00:59,920
they can essentially be classified into

27
00:00:59,920 --> 00:01:02,879
same cortex and cross cortex

28
00:01:02,879 --> 00:01:05,438
so simcoe attacks are usually enabled by

29
00:01:05,438 --> 00:01:07,920
hyper threading and they can work on the

30
00:01:07,920 --> 00:01:10,000
local private cache since it's shared

31
00:01:10,000 --> 00:01:12,159
between the attacker and the big team

32
00:01:12,159 --> 00:01:14,479
and cross-court attacks usually work on

33
00:01:14,479 --> 00:01:17,040
the last level cache or the coherence

34
00:01:17,040 --> 00:01:19,119
directory instead since it's shared

35
00:01:19,119 --> 00:01:21,600
among physical cores and cross-court

36
00:01:21,600 --> 00:01:23,520
attacks are also considered more

37
00:01:23,520 --> 00:01:26,640
practical than same cortex

38
00:01:26,640 --> 00:01:28,560
so how do cross-core cache attacks

39
00:01:28,560 --> 00:01:30,320
actually work in detail

40
00:01:30,320 --> 00:01:32,320
here we use flash and reload as an

41
00:01:32,320 --> 00:01:35,119
example to explain so say we have an

42
00:01:35,119 --> 00:01:37,520
attacker in the victim they're on

43
00:01:37,520 --> 00:01:40,000
different physical cores and the victim

44
00:01:40,000 --> 00:01:42,399
has a cash land that is currently in her

45
00:01:42,399 --> 00:01:44,799
private cash in as well as well as the

46
00:01:44,799 --> 00:01:46,000
lrc

47
00:01:46,000 --> 00:01:48,079
so the attacker is trying to leak the

48
00:01:48,079 --> 00:01:50,000
victim's access pattern on this cash

49
00:01:50,000 --> 00:01:51,920
line on this data so there are

50
00:01:51,920 --> 00:01:54,079
essentially three steps in each attack

51
00:01:54,079 --> 00:01:56,880
iteration so in the first step the

52
00:01:56,880 --> 00:01:59,360
attacker flashes the victim's data so

53
00:01:59,360 --> 00:02:01,439
here we assume that the attacker has

54
00:02:01,439 --> 00:02:03,520
access to this data so she's able to

55
00:02:03,520 --> 00:02:05,119
flash it

56
00:02:05,119 --> 00:02:08,318
and we can see after the flashing the

57
00:02:08,318 --> 00:02:10,720
victim's data is evicted from like all

58
00:02:10,720 --> 00:02:12,640
cash levels including both the private

59
00:02:12,640 --> 00:02:14,720
cash and the llc

60
00:02:14,720 --> 00:02:17,360
and then in the second step the attacker

61
00:02:17,360 --> 00:02:20,400
waits for the victim's execution so if

62
00:02:20,400 --> 00:02:23,520
the victim now accesses this data then

63
00:02:23,520 --> 00:02:25,760
the data is brought back to cache

64
00:02:25,760 --> 00:02:27,440
then later in the third step the

65
00:02:27,440 --> 00:02:29,840
attacker reloads this data and times the

66
00:02:29,840 --> 00:02:32,319
reload to determine whether the victim

67
00:02:32,319 --> 00:02:33,760
has accessed it

68
00:02:33,760 --> 00:02:36,239
so if the victim has already touched it

69
00:02:36,239 --> 00:02:37,920
then it takes shorter for the attacker

70
00:02:37,920 --> 00:02:40,879
to reload but if the victim did not

71
00:02:40,879 --> 00:02:43,360
access it then it takes longer for the

72
00:02:43,360 --> 00:02:45,599
attacker to reload since the data is

73
00:02:45,599 --> 00:02:48,239
still in dram

74
00:02:48,239 --> 00:02:50,640
so after we know how flash and reload

75
00:02:50,640 --> 00:02:52,720
works if we look at this attack one

76
00:02:52,720 --> 00:02:54,560
thing we notice is that

77
00:02:54,560 --> 00:02:57,360
when the attacker is trying to evict the

78
00:02:57,360 --> 00:03:00,640
victim's data by flashing it this data

79
00:03:00,640 --> 00:03:04,000
is evicted from our cache levels all the

80
00:03:04,000 --> 00:03:05,519
way to dram

81
00:03:05,519 --> 00:03:07,840
so our question here is our question

82
00:03:07,840 --> 00:03:10,080
here is that can we build a cross-court

83
00:03:10,080 --> 00:03:12,959
attack that only evicts from the private

84
00:03:12,959 --> 00:03:16,000
cache so say we have this new attack

85
00:03:16,000 --> 00:03:17,920
when the attacker somehow evicts the

86
00:03:17,920 --> 00:03:20,959
victim's data this data is evicted from

87
00:03:20,959 --> 00:03:24,159
the victim's private cache but it's kept

88
00:03:24,159 --> 00:03:25,920
in the arc

89
00:03:25,920 --> 00:03:28,080
so why do we want a such an attack

90
00:03:28,080 --> 00:03:31,519
because if we do not evict from the rc

91
00:03:31,519 --> 00:03:34,080
then we won't trigger any dram access in

92
00:03:34,080 --> 00:03:36,720
this entire attack then

93
00:03:36,720 --> 00:03:38,799
that means the attack may have higher

94
00:03:38,799 --> 00:03:41,120
bandwidth when used as a covert channel

95
00:03:41,120 --> 00:03:43,200
it may also have higher tempo resolution

96
00:03:43,200 --> 00:03:45,760
at the side channel and also since we're

97
00:03:45,760 --> 00:03:48,959
not triggering any our same miss then

98
00:03:48,959 --> 00:03:50,959
the attack may be much stealthier than

99
00:03:50,959 --> 00:03:52,959
before

100
00:03:52,959 --> 00:03:55,760
so now we have another question

101
00:03:55,760 --> 00:03:58,239
can we use existing eviction methods for

102
00:03:58,239 --> 00:04:00,720
this attack so what are the existing

103
00:04:00,720 --> 00:04:03,280
methods we have well first of all we

104
00:04:03,280 --> 00:04:06,000
have cell flash but as we have already

105
00:04:06,000 --> 00:04:07,920
seen if the attacker flashes the

106
00:04:07,920 --> 00:04:10,400
victim's data to evict it this data goes

107
00:04:10,400 --> 00:04:12,400
directly to dram we cannot keep it in

108
00:04:12,400 --> 00:04:16,238
the rlc so the second method we have is

109
00:04:16,238 --> 00:04:17,759
set conflicts

110
00:04:17,759 --> 00:04:20,000
for set associative cache the attacker

111
00:04:20,000 --> 00:04:21,839
can build conflicts in certain cache

112
00:04:21,839 --> 00:04:24,400
sets to evict the victim's data for

113
00:04:24,400 --> 00:04:25,600
example here

114
00:04:25,600 --> 00:04:28,479
if the attacker wants to evict the data

115
00:04:28,479 --> 00:04:31,280
in site one she can just keep bringing

116
00:04:31,280 --> 00:04:34,080
her own data into the set and eventually

117
00:04:34,080 --> 00:04:36,639
the victim status replaced

118
00:04:36,639 --> 00:04:39,600
but unfortunately this method cannot be

119
00:04:39,600 --> 00:04:42,320
used here either because the attacker is

120
00:04:42,320 --> 00:04:44,639
on a different court than the victim so

121
00:04:44,639 --> 00:04:46,720
she does not have direct access to the

122
00:04:46,720 --> 00:04:47,759
victim's

123
00:04:47,759 --> 00:04:50,000
private cash so she cannot bring her

124
00:04:50,000 --> 00:04:52,479
data into the victim's cash to cause

125
00:04:52,479 --> 00:04:54,320
conflict there

126
00:04:54,320 --> 00:04:56,960
so basically this means we need to find

127
00:04:56,960 --> 00:04:59,680
a new eviction method for this attack so

128
00:04:59,680 --> 00:05:02,560
what could be a possible method here

129
00:05:02,560 --> 00:05:04,800
well one thing that can cause caching

130
00:05:04,800 --> 00:05:07,120
validations or cache evictions in

131
00:05:07,120 --> 00:05:10,479
private caches is the coherence particle

132
00:05:10,479 --> 00:05:12,800
so our multi-core cpu will probably have

133
00:05:12,800 --> 00:05:15,600
multiple private caches then to keep the

134
00:05:15,600 --> 00:05:18,160
data consistency among different copies

135
00:05:18,160 --> 00:05:19,680
of the same cache line in different

136
00:05:19,680 --> 00:05:21,759
private caches we have to have a

137
00:05:21,759 --> 00:05:23,440
coherence particle

138
00:05:23,440 --> 00:05:26,479
so these days x86 processors always use

139
00:05:26,479 --> 00:05:30,800
the mesi protocol or its virus and with

140
00:05:30,800 --> 00:05:33,120
this protocol we basically have four

141
00:05:33,120 --> 00:05:35,440
possible coherent states for a cache

142
00:05:35,440 --> 00:05:38,880
line so there are modified exclusive

143
00:05:38,880 --> 00:05:41,600
shared and invalid

144
00:05:41,600 --> 00:05:44,160
so if a cache line is a modified or

145
00:05:44,160 --> 00:05:47,120
exclusive state then it means the

146
00:05:47,120 --> 00:05:49,759
current private cache is the only owner

147
00:05:49,759 --> 00:05:52,160
of this cache line or we can say this

148
00:05:52,160 --> 00:05:54,000
cache line is only present in this

149
00:05:54,000 --> 00:05:55,919
private cache not in any other private

150
00:05:55,919 --> 00:05:56,960
caches

151
00:05:56,960 --> 00:05:58,639
and it also means

152
00:05:58,639 --> 00:06:01,600
the local cpu core has both read and

153
00:06:01,600 --> 00:06:03,919
write permission to this cache line

154
00:06:03,919 --> 00:06:06,720
but if a cache is in shared state then

155
00:06:06,720 --> 00:06:09,199
it means discussion could be present in

156
00:06:09,199 --> 00:06:12,639
multiple private caches the cpu core or

157
00:06:12,639 --> 00:06:15,039
any cpu core can only read but cannot

158
00:06:15,039 --> 00:06:17,039
write this cache line

159
00:06:17,039 --> 00:06:19,199
so if the coherent state of the cache

160
00:06:19,199 --> 00:06:22,240
lines changed from shared to exclusive

161
00:06:22,240 --> 00:06:23,680
or modified

162
00:06:23,680 --> 00:06:26,160
then all other copies of this cache and

163
00:06:26,160 --> 00:06:28,160
any other private caches need to be

164
00:06:28,160 --> 00:06:30,560
invited for correctness and this

165
00:06:30,560 --> 00:06:32,800
procedure is usually referred to as

166
00:06:32,800 --> 00:06:36,240
required for ownership or rfo for short

167
00:06:36,240 --> 00:06:37,919
and this is actually what we want for

168
00:06:37,919 --> 00:06:42,400
this attack but according to ami sai rfo

169
00:06:42,400 --> 00:06:45,039
should only happen upon rights so if a

170
00:06:45,039 --> 00:06:47,440
cpu core is trying to write a cache line

171
00:06:47,440 --> 00:06:50,240
then if the local private cache does not

172
00:06:50,240 --> 00:06:52,240
have the exclusive ownership then it

173
00:06:52,240 --> 00:06:54,479
needs to first send signal to get

174
00:06:54,479 --> 00:06:56,720
exclusive ownership and then the cpu

175
00:06:56,720 --> 00:06:58,400
core can write in the local private

176
00:06:58,400 --> 00:06:59,440
cache

177
00:06:59,440 --> 00:07:01,440
but unfortunately most of the right

178
00:07:01,440 --> 00:07:03,520
models the attacker cannot write the

179
00:07:03,520 --> 00:07:07,039
victim's data she can only read

180
00:07:07,039 --> 00:07:07,840
so

181
00:07:07,840 --> 00:07:10,080
now we have another question that can we

182
00:07:10,080 --> 00:07:12,560
actually cause r4 without writing the

183
00:07:12,560 --> 00:07:14,880
cache line so basically can we pretend

184
00:07:14,880 --> 00:07:17,199
that we will write this question so the

185
00:07:17,199 --> 00:07:19,520
coherence data is changed but we don't

186
00:07:19,520 --> 00:07:22,080
actually write it

187
00:07:22,080 --> 00:07:24,160
so one thing that caught our attention

188
00:07:24,160 --> 00:07:26,319
is data prefetching

189
00:07:26,319 --> 00:07:28,880
so these days actually six processors

190
00:07:28,880 --> 00:07:31,280
provide many preferred instructions for

191
00:07:31,280 --> 00:07:34,000
like programmers or compilers to use

192
00:07:34,000 --> 00:07:36,160
and most of those instructions are there

193
00:07:36,160 --> 00:07:38,800
to accelerate future reads so the only

194
00:07:38,800 --> 00:07:40,960
thing they do is they preload the data

195
00:07:40,960 --> 00:07:43,360
into a certain cache level but privilege

196
00:07:43,360 --> 00:07:45,680
w is different this instruction is

197
00:07:45,680 --> 00:07:48,639
actually to accelerate filter rights and

198
00:07:48,639 --> 00:07:50,960
like i explained earlier for a write to

199
00:07:50,960 --> 00:07:53,440
hyphen we not only need to bring the

200
00:07:53,440 --> 00:07:55,680
data into the private cache we also need

201
00:07:55,680 --> 00:07:58,240
to change the coherence state so

202
00:07:58,240 --> 00:08:00,479
according to intel what this instruction

203
00:08:00,479 --> 00:08:02,879
does is it prevails the data into the

204
00:08:02,879 --> 00:08:05,360
requesting course private cache and it

205
00:08:05,360 --> 00:08:07,680
changes the coherence state to modify in

206
00:08:07,680 --> 00:08:10,000
order to accelerate future rights so

207
00:08:10,000 --> 00:08:11,039
basically

208
00:08:11,039 --> 00:08:12,879
it does everything like a right

209
00:08:12,879 --> 00:08:15,039
instruction without actually changing

210
00:08:15,039 --> 00:08:17,120
the content of the data without actually

211
00:08:17,120 --> 00:08:19,039
writing the cache line

212
00:08:19,039 --> 00:08:21,520
and we tested this instruction on our

213
00:08:21,520 --> 00:08:24,160
local intel desktop processors and we

214
00:08:24,160 --> 00:08:25,280
found

215
00:08:25,280 --> 00:08:28,400
two very interesting properties of it so

216
00:08:28,400 --> 00:08:30,879
first of all although this instruction

217
00:08:30,879 --> 00:08:33,679
is to accelerate future rights it

218
00:08:33,679 --> 00:08:36,240
actually works on read-only data so this

219
00:08:36,240 --> 00:08:37,120
means

220
00:08:37,120 --> 00:08:39,279
even if the data is read only according

221
00:08:39,279 --> 00:08:41,839
to the page table entry when we execute

222
00:08:41,839 --> 00:08:44,720
prefetch w on it it still changes the

223
00:08:44,720 --> 00:08:47,279
coherent state to modified meaning it

224
00:08:47,279 --> 00:08:49,440
still invalidates all other copies of

225
00:08:49,440 --> 00:08:52,240
this data in cache and this is exactly

226
00:08:52,240 --> 00:08:54,480
what we want for this attack

227
00:08:54,480 --> 00:08:57,200
so the second property we found is that

228
00:08:57,200 --> 00:09:00,399
prefetch w actually has timing virus

229
00:09:00,399 --> 00:09:02,240
depending on where the target data is

230
00:09:02,240 --> 00:09:04,399
located in the memory hierarchy just

231
00:09:04,399 --> 00:09:06,720
like a regular load instruction

232
00:09:06,720 --> 00:09:09,600
and later we'll show that this property

233
00:09:09,600 --> 00:09:11,680
actually makes the attack much easier

234
00:09:11,680 --> 00:09:13,600
than we expected

235
00:09:13,600 --> 00:09:16,160
so after finding these properties what

236
00:09:16,160 --> 00:09:18,480
we want to know now is uh are these

237
00:09:18,480 --> 00:09:20,640
properties in general true on all intel

238
00:09:20,640 --> 00:09:23,600
processors that support prefetch w like

239
00:09:23,600 --> 00:09:25,920
even including server processors or

240
00:09:25,920 --> 00:09:27,519
we're just lucky that they're true on

241
00:09:27,519 --> 00:09:29,760
our processors so

242
00:09:29,760 --> 00:09:31,519
to figure this out we list all the

243
00:09:31,519 --> 00:09:33,680
available intel xeon scalable processors

244
00:09:33,680 --> 00:09:37,120
on aws and here are the results so

245
00:09:37,120 --> 00:09:39,279
basically property one the lack of

246
00:09:39,279 --> 00:09:41,519
permission check is true on all the

247
00:09:41,519 --> 00:09:44,080
tested processors and the property two

248
00:09:44,080 --> 00:09:46,320
which is the time environs is true on

249
00:09:46,320 --> 00:09:49,120
most processors other than the very

250
00:09:49,120 --> 00:09:51,920
recent iceland processor so on that

251
00:09:51,920 --> 00:09:54,000
processor prefetch will always take a

252
00:09:54,000 --> 00:09:57,440
very short amount of time to finish

253
00:09:57,440 --> 00:09:59,680
so based on these two properties we

254
00:09:59,680 --> 00:10:01,839
proposed two cross-core private cache

255
00:10:01,839 --> 00:10:03,680
attacks they're named prefection

256
00:10:03,680 --> 00:10:06,560
prefetch and the prefecture reload

257
00:10:06,560 --> 00:10:09,519
so first of all for prefection prefetch

258
00:10:09,519 --> 00:10:12,480
this attack has two steps in it so in

259
00:10:12,480 --> 00:10:14,720
the first step the attacker prefatches

260
00:10:14,720 --> 00:10:17,440
the victim's data so after this this

261
00:10:17,440 --> 00:10:20,320
data is only present in the attacker's

262
00:10:20,320 --> 00:10:23,600
private cache and it's in modified state

263
00:10:23,600 --> 00:10:25,680
then the attacker rates for the victim

264
00:10:25,680 --> 00:10:28,480
so if the victim now accesses this data

265
00:10:28,480 --> 00:10:31,200
then the coherent state is changed from

266
00:10:31,200 --> 00:10:34,320
modified to shared and a copy of this

267
00:10:34,320 --> 00:10:37,200
data is filled into the victim's private

268
00:10:37,200 --> 00:10:39,360
cache and then we go back to the first

269
00:10:39,360 --> 00:10:42,399
step so the attacker prefaces again and

270
00:10:42,399 --> 00:10:44,079
times the prefetch

271
00:10:44,079 --> 00:10:46,399
so if the victim has accessed this data

272
00:10:46,399 --> 00:10:48,720
and changed the coherence state then

273
00:10:48,720 --> 00:10:51,279
when the attacker prefaces now

274
00:10:51,279 --> 00:10:53,200
the coherence data needs to be changed

275
00:10:53,200 --> 00:10:55,360
back to multiflat so it takes longer for

276
00:10:55,360 --> 00:10:58,320
the prefetch w instruction to finish

277
00:10:58,320 --> 00:11:01,040
but if the victim did not access this

278
00:11:01,040 --> 00:11:03,680
data then when the attacker prefaces the

279
00:11:03,680 --> 00:11:06,240
data is already in modified state so the

280
00:11:06,240 --> 00:11:07,920
prefetch instruction doesn't really do

281
00:11:07,920 --> 00:11:09,839
anything so it takes shorter amount of

282
00:11:09,839 --> 00:11:11,839
time to finish

283
00:11:11,839 --> 00:11:14,079
so basically in this attack the prefetch

284
00:11:14,079 --> 00:11:16,079
operation is acting like the measurement

285
00:11:16,079 --> 00:11:18,560
for the current iteration as well as the

286
00:11:18,560 --> 00:11:20,320
preparation for the next iteration and

287
00:11:20,320 --> 00:11:22,480
that's why we only have two steps

288
00:11:22,480 --> 00:11:25,279
and another thing is the attacker here

289
00:11:25,279 --> 00:11:27,680
is relying on the fact that preface w

290
00:11:27,680 --> 00:11:28,959
has timing

291
00:11:28,959 --> 00:11:31,680
timing virus to measure the coherence

292
00:11:31,680 --> 00:11:34,240
state change on the victim's data

293
00:11:34,240 --> 00:11:36,480
but can we actually just use like a

294
00:11:36,480 --> 00:11:38,240
regular loading instruction just like

295
00:11:38,240 --> 00:11:40,000
the one in flash and reload for the

296
00:11:40,000 --> 00:11:41,920
measurement so that the attack can be

297
00:11:41,920 --> 00:11:43,200
more general

298
00:11:43,200 --> 00:11:45,440
well unfortunately the attacker threat

299
00:11:45,440 --> 00:11:47,360
cannot do this because

300
00:11:47,360 --> 00:11:49,440
let's say here if the victim did not

301
00:11:49,440 --> 00:11:51,600
access this data when the attacker

302
00:11:51,600 --> 00:11:55,440
reloads she'll get a local private cash

303
00:11:55,440 --> 00:11:58,480
hit but if the victim did access this

304
00:11:58,480 --> 00:12:01,040
data when the attacker reloads she still

305
00:12:01,040 --> 00:12:03,040
gets a private cash hit so she cannot

306
00:12:03,040 --> 00:12:05,839
really distinguish these two situations

307
00:12:05,839 --> 00:12:08,560
but the attacker can use a second threat

308
00:12:08,560 --> 00:12:10,800
to reload and time the reload in order

309
00:12:10,800 --> 00:12:13,839
to distinguish these situations because

310
00:12:13,839 --> 00:12:16,079
our c hit and

311
00:12:16,079 --> 00:12:18,240
remote private cache take different

312
00:12:18,240 --> 00:12:20,480
amount of time to finish

313
00:12:20,480 --> 00:12:21,279
so

314
00:12:21,279 --> 00:12:23,120
based on this we propose the second

315
00:12:23,120 --> 00:12:24,720
attack is called

316
00:12:24,720 --> 00:12:27,440
pre-fire chain reload so this attack has

317
00:12:27,440 --> 00:12:29,839
three steps and the attacker controls

318
00:12:29,839 --> 00:12:32,160
two threads in it we name them children

319
00:12:32,160 --> 00:12:35,040
and spy so in the first step children

320
00:12:35,040 --> 00:12:37,760
preface the victim's data and then the

321
00:12:37,760 --> 00:12:40,480
attacker waits and then later in the

322
00:12:40,480 --> 00:12:43,600
third step spy reloads this data as well

323
00:12:43,600 --> 00:12:46,160
as time the reload operation

324
00:12:46,160 --> 00:12:49,519
so if the victim has access to this data

325
00:12:49,519 --> 00:12:53,680
then when spy reloads she gets an rc hit

326
00:12:53,680 --> 00:12:56,160
but if the victim did not access this

327
00:12:56,160 --> 00:12:58,800
data once by reloads

328
00:12:58,800 --> 00:13:01,040
she gets a remote private cartridge

329
00:13:01,040 --> 00:13:04,079
which takes much longer to finish the rc

330
00:13:04,079 --> 00:13:05,040
hit

331
00:13:05,040 --> 00:13:07,279
so basically with controlling two

332
00:13:07,279 --> 00:13:09,200
threads the attacker is able to build

333
00:13:09,200 --> 00:13:10,959
this attack without relying on the

334
00:13:10,959 --> 00:13:13,680
timing environments of prefetch w

335
00:13:13,680 --> 00:13:16,240
so now it comes to experiments first of

336
00:13:16,240 --> 00:13:19,040
all we evaluate the capacities of the

337
00:13:19,040 --> 00:13:20,800
proposed prefetch base the covert

338
00:13:20,800 --> 00:13:22,720
channels are assuming only one shared

339
00:13:22,720 --> 00:13:24,160
cash line between the attacker and the

340
00:13:24,160 --> 00:13:26,959
big team and here are the results so

341
00:13:26,959 --> 00:13:29,120
basically we evaluate on four intel

342
00:13:29,120 --> 00:13:30,959
processors including two desktop

343
00:13:30,959 --> 00:13:33,680
processors and two server processors and

344
00:13:33,680 --> 00:13:35,440
i want to mention pre-flight and load

345
00:13:35,440 --> 00:13:37,519
here is the simplified version of

346
00:13:37,519 --> 00:13:40,079
pre-flightcheck reload it's essentially

347
00:13:40,079 --> 00:13:41,920
just a covert channel not to a side

348
00:13:41,920 --> 00:13:44,000
channel so the sender just prefetches or

349
00:13:44,000 --> 00:13:47,120
does not prefetch and the receiver just

350
00:13:47,120 --> 00:13:49,199
low than times the load

351
00:13:49,199 --> 00:13:51,199
so we can see prefetch based channels

352
00:13:51,199 --> 00:13:54,000
have pretty high capacities especially

353
00:13:54,000 --> 00:13:56,399
on high frequency processors they can

354
00:13:56,399 --> 00:13:59,360
achieve about 800 kilobytes per second

355
00:13:59,360 --> 00:14:01,920
and for comparison we also implemented

356
00:14:01,920 --> 00:14:03,839
flash and reload and flash and flash on

357
00:14:03,839 --> 00:14:05,360
the same processor

358
00:14:05,360 --> 00:14:07,279
using the same synchronization particle

359
00:14:07,279 --> 00:14:08,959
and we can see flashing reload can

360
00:14:08,959 --> 00:14:11,600
achieve about 270 kilobytes per second

361
00:14:11,600 --> 00:14:14,800
and flash and flash is faster

362
00:14:14,800 --> 00:14:16,880
so we also evaluate the prefetch based

363
00:14:16,880 --> 00:14:18,560
channels with transient execution

364
00:14:18,560 --> 00:14:20,560
attacks since we're using a faster

365
00:14:20,560 --> 00:14:22,720
encoding operation than flash and reload

366
00:14:22,720 --> 00:14:24,639
we're able to leak more secret bytes

367
00:14:24,639 --> 00:14:26,720
within one transient window for example

368
00:14:26,720 --> 00:14:29,839
inspector v1 we can leak 17 square bytes

369
00:14:29,839 --> 00:14:31,680
with prevention prefetch but only 8

370
00:14:31,680 --> 00:14:34,079
secret bytes with flash and reload and

371
00:14:34,079 --> 00:14:35,920
also for side channel attacks we show

372
00:14:35,920 --> 00:14:38,000
that our prefetch based attacks can also

373
00:14:38,000 --> 00:14:40,160
be used to attack daily applications

374
00:14:40,160 --> 00:14:41,839
just like all other cache side channel

375
00:14:41,839 --> 00:14:43,279
attacks

376
00:14:43,279 --> 00:14:45,760
so here's the contribution list so first

377
00:14:45,760 --> 00:14:47,519
of all we found the vulnerabilities in

378
00:14:47,519 --> 00:14:49,760
the implementation of preface w which

379
00:14:49,760 --> 00:14:52,000
are almost true on all intel processors

380
00:14:52,000 --> 00:14:54,720
since broadwell and we propose a new

381
00:14:54,720 --> 00:14:57,040
eviction method for cash attacks this is

382
00:14:57,040 --> 00:14:58,959
the first time cash coherence particle

383
00:14:58,959 --> 00:15:01,680
is used for eviction and we build two

384
00:15:01,680 --> 00:15:03,440
cross-core private cash side channel

385
00:15:03,440 --> 00:15:05,120
attacks they can work with both

386
00:15:05,120 --> 00:15:07,839
inclusive and non-inclusive analysis and

387
00:15:07,839 --> 00:15:10,079
we also build faster cash cover channels

388
00:15:10,079 --> 00:15:11,839
compared to the state of the art which

389
00:15:11,839 --> 00:15:13,600
can double the amount of leakage

390
00:15:13,600 --> 00:15:16,079
inspector rewind transient window

391
00:15:16,079 --> 00:15:18,160
and that's all about my presentation

392
00:15:18,160 --> 00:15:19,680
thank you and i would like to take

393
00:15:19,680 --> 00:15:21,420
questions

394
00:15:21,420 --> 00:15:26,639
[Applause]

395
00:15:26,639 --> 00:15:28,800
okay uh until we have questions in the

396
00:15:28,800 --> 00:15:31,120
room there was a question on the uh

397
00:15:31,120 --> 00:15:35,040
online it's a bit old now uh so i'll

398
00:15:35,040 --> 00:15:37,519
repeat the question it's uh asks if we

399
00:15:37,519 --> 00:15:40,639
only evict from the private cache

400
00:15:40,639 --> 00:15:42,560
wouldn't the attack would be more noisy

401
00:15:42,560 --> 00:15:44,480
because timing difference between fry

402
00:15:44,480 --> 00:15:47,519
would cache and llc is smaller than

403
00:15:47,519 --> 00:15:49,680
between llc and

404
00:15:49,680 --> 00:15:50,480
a

405
00:15:50,480 --> 00:15:51,519
dram

406
00:15:51,519 --> 00:15:54,000
so uh yeah there there's less timing

407
00:15:54,000 --> 00:15:56,160
difference but it's still like uh

408
00:15:56,160 --> 00:15:58,320
definitely enough for us to distinguish

409
00:15:58,320 --> 00:16:01,279
different cash events uh if i recall uh

410
00:16:01,279 --> 00:16:04,079
private cash he takes only uh even

411
00:16:04,079 --> 00:16:06,320
considering the overhead on reading the

412
00:16:06,320 --> 00:16:09,199
timestamp counters together only like 30

413
00:16:09,199 --> 00:16:12,720
cycles and our sea hate takes like

414
00:16:12,720 --> 00:16:15,920
70 to 90 cycles so there's yeah there's

415
00:16:15,920 --> 00:16:17,759
enough difference for us to distinguish

416
00:16:17,759 --> 00:16:20,839
so it shouldn't be too noisy

417
00:16:20,839 --> 00:16:25,199
thanks hi um thanks for a great talk i i

418
00:16:25,199 --> 00:16:26,560
didn't read the paper before so this is

419
00:16:26,560 --> 00:16:28,399
this was great i enjoyed it a lot and my

420
00:16:28,399 --> 00:16:30,079
question is somewhat similar i was

421
00:16:30,079 --> 00:16:31,920
wondering have you done any experiments

422
00:16:31,920 --> 00:16:34,639
with changing the course in which your

423
00:16:34,639 --> 00:16:37,199
attacker runs versus the victim and

424
00:16:37,199 --> 00:16:38,160
you know

425
00:16:38,160 --> 00:16:40,000
have you noticed any timing differences

426
00:16:40,000 --> 00:16:41,680
by moving to some other course suddenly

427
00:16:41,680 --> 00:16:43,440
the timings change for you

428
00:16:43,440 --> 00:16:46,079
yes so it really depends on the chip

429
00:16:46,079 --> 00:16:48,480
topology so like yeah yeah if the core

430
00:16:48,480 --> 00:16:51,040
difference is like if you're doing two

431
00:16:51,040 --> 00:16:53,360
cards that are far away then a remote

432
00:16:53,360 --> 00:16:55,839
private cache takes longer to finish

433
00:16:55,839 --> 00:16:58,079
uh but if the cores are closed it takes

434
00:16:58,079 --> 00:17:00,720
a shorter finish but there's not like

435
00:17:00,720 --> 00:17:03,519
maybe it's because i'm only using like

436
00:17:03,519 --> 00:17:04,880
eight core

437
00:17:04,880 --> 00:17:07,359
cpu so the amount of difference is not

438
00:17:07,359 --> 00:17:10,480
significant like not enough to mix up

439
00:17:10,480 --> 00:17:12,079
different cache events but yeah there

440
00:17:12,079 --> 00:17:13,919
are some timing differences no i'm sure

441
00:17:13,919 --> 00:17:15,599
i would imagine that the attack would

442
00:17:15,599 --> 00:17:17,119
work on all cores but i was wondering

443
00:17:17,119 --> 00:17:19,199
whether you have to kind of calibrate

444
00:17:19,199 --> 00:17:20,559
your attack depending on which core

445
00:17:20,559 --> 00:17:21,919
you're running

446
00:17:21,919 --> 00:17:24,480
oh yeah so we we were actually trying to

447
00:17:24,480 --> 00:17:27,119
do like the uh the lower bound like

448
00:17:27,119 --> 00:17:29,120
because what's the smallest difference

449
00:17:29,120 --> 00:17:31,600
and it still works so yeah can i ask

450
00:17:31,600 --> 00:17:33,840
another question uh have you

451
00:17:33,840 --> 00:17:35,840
have you looked at all of uh cpus other

452
00:17:35,840 --> 00:17:37,760
than intel's

453
00:17:37,760 --> 00:17:40,400
oh we actually tested this attack on amd

454
00:17:40,400 --> 00:17:42,720
2 and we believe that they have

455
00:17:42,720 --> 00:17:44,480
permission check on this instruction

456
00:17:44,480 --> 00:17:47,520
because this instruction only has like

457
00:17:47,520 --> 00:17:49,520
it only changes the coherence when the

458
00:17:49,520 --> 00:17:51,520
data is writable if it's read only

459
00:17:51,520 --> 00:17:53,600
there's there's no effect on the data

460
00:17:53,600 --> 00:17:54,480
yeah

461
00:17:54,480 --> 00:17:57,919
thank you very much thank you

462
00:17:58,000 --> 00:18:01,000
okay

463
00:18:01,440 --> 00:18:03,360
another question um have you reported

464
00:18:03,360 --> 00:18:06,160
this to intel what was the response if

465
00:18:06,160 --> 00:18:07,679
you did

466
00:18:07,679 --> 00:18:08,960
so

467
00:18:08,960 --> 00:18:11,200
you know we reported this to intel and

468
00:18:11,200 --> 00:18:12,880
intel believes this is still you know

469
00:18:12,880 --> 00:18:15,039
traditional hashtag channel attacks and

470
00:18:15,039 --> 00:18:17,120
they recommend using like constant time

471
00:18:17,120 --> 00:18:19,918
programming and

472
00:18:20,080 --> 00:18:23,280
software level mitigation so yeah they

473
00:18:23,280 --> 00:18:25,200
they didn't put any embargo on us or

474
00:18:25,200 --> 00:18:28,480
anything so yeah

475
00:18:28,480 --> 00:18:30,320
i think my first question was already

476
00:18:30,320 --> 00:18:32,000
asked that have you tested with other

477
00:18:32,000 --> 00:18:33,600
cpus or not

478
00:18:33,600 --> 00:18:36,959
second question that i have is

479
00:18:37,120 --> 00:18:39,039
what makes you believe that it works on

480
00:18:39,039 --> 00:18:41,280
non-inclusive cache design as well

481
00:18:41,280 --> 00:18:43,200
because i was under the impression that

482
00:18:43,200 --> 00:18:45,280
every day is inclusive then it takes a

483
00:18:45,280 --> 00:18:48,720
lot of time for prefetch to do all the

484
00:18:48,720 --> 00:18:51,120
eviction from the private and the all

485
00:18:51,120 --> 00:18:53,200
those things yeah we actually tested

486
00:18:53,200 --> 00:18:55,280
this on non-inclusive analysis so all

487
00:18:55,280 --> 00:18:57,520
the server processors we use uh they

488
00:18:57,520 --> 00:18:59,600
have non-inclusive analysis and the

489
00:18:59,600 --> 00:19:01,520
attacks still work

490
00:19:01,520 --> 00:19:04,080
and also a cache coherence particle is

491
00:19:04,080 --> 00:19:06,400
like independent of the

492
00:19:06,400 --> 00:19:08,559
inclusivity so it shouldn't really make

493
00:19:08,559 --> 00:19:12,879
any difference i see thank you

494
00:19:13,360 --> 00:19:14,640
okay

495
00:19:14,640 --> 00:19:19,559
let's thank yanan again thank you

