1
00:00:00,080 --> 00:00:01,439
[Music]

2
00:00:01,439 --> 00:00:03,120
okay hello everyone

3
00:00:03,120 --> 00:00:06,798
i'm going to introduce noise star

4
00:00:08,559 --> 00:00:11,840
so nostar is a project which builds upon

5
00:00:11,840 --> 00:00:14,480
an already existing family of protocols

6
00:00:14,480 --> 00:00:17,920
called noise which defines a simple dsl

7
00:00:17,920 --> 00:00:20,240
for key exchange or contract protocols

8
00:00:20,240 --> 00:00:22,560
so for instance here we have a list of

9
00:00:22,560 --> 00:00:25,359
six what we call protocol patterns which

10
00:00:25,359 --> 00:00:28,640
describe protocol for various use cases

11
00:00:28,640 --> 00:00:30,720
for instance for winery encryption this

12
00:00:30,720 --> 00:00:34,399
is very similar to knuckle box or hpke

13
00:00:34,399 --> 00:00:36,480
for connection to an authenticated

14
00:00:36,480 --> 00:00:39,440
server or for mutual authentication

15
00:00:39,440 --> 00:00:41,040
the commonality between all the

16
00:00:41,040 --> 00:00:43,040
protocols in this family is that they

17
00:00:43,040 --> 00:00:47,039
are built upon difficult key derivation

18
00:00:47,039 --> 00:00:49,280
and pre-shared keys and for instance

19
00:00:49,280 --> 00:00:51,680
they don't use signatures or camps for

20
00:00:51,680 --> 00:00:54,160
now it gives a family of 59 protocols

21
00:00:54,160 --> 00:00:56,239
but if more features are added

22
00:00:56,239 --> 00:00:58,399
this number might increase another

23
00:00:58,399 --> 00:01:00,000
interesting thing is that those

24
00:01:00,000 --> 00:01:02,239
protocols are already used in quite

25
00:01:02,239 --> 00:01:04,319
popular applications like whatsapp or

26
00:01:04,319 --> 00:01:06,080
the weigh guard vpn

27
00:01:06,080 --> 00:01:08,560
now let's have a look at one of those

28
00:01:08,560 --> 00:01:10,880
protocol patterns in particular i added

29
00:01:10,880 --> 00:01:12,400
a few annotations to make things more

30
00:01:12,400 --> 00:01:14,479
explicit but it gives something like

31
00:01:14,479 --> 00:01:15,280
this

32
00:01:15,280 --> 00:01:18,080
a protocol pattern describes how to

33
00:01:18,080 --> 00:01:20,240
exchange messages to set up a connection

34
00:01:20,240 --> 00:01:23,040
between an initiator on the left and a

35
00:01:23,040 --> 00:01:24,640
responder on the right

36
00:01:24,640 --> 00:01:27,200
it starts with a pre-message phase

37
00:01:27,200 --> 00:01:29,119
which has to be done once

38
00:01:29,119 --> 00:01:31,360
and for instance here it says that

39
00:01:31,360 --> 00:01:33,600
before starting any handshake the

40
00:01:33,600 --> 00:01:36,079
initiator must know the responder's

41
00:01:36,079 --> 00:01:38,479
public study key if it is the case the

42
00:01:38,479 --> 00:01:40,560
initiator can start as many handshakes

43
00:01:40,560 --> 00:01:42,880
as he wants with the responder

44
00:01:42,880 --> 00:01:45,200
then comes the handshake phase during

45
00:01:45,200 --> 00:01:47,600
which both parties exchange messages and

46
00:01:47,600 --> 00:01:49,680
finally we enter the transport phase

47
00:01:49,680 --> 00:01:52,000
during which it is possible to exchange

48
00:01:52,000 --> 00:01:54,399
an arbitrary number of messages in this

49
00:01:54,399 --> 00:01:56,320
case both ways

50
00:01:56,320 --> 00:01:57,360
if we look

51
00:01:57,360 --> 00:02:00,000
in details at the handshake messages we

52
00:02:00,000 --> 00:02:02,719
see they are made by a list of tokens

53
00:02:02,719 --> 00:02:04,960
those tokens oh

54
00:02:04,960 --> 00:02:07,759
those seconds describe how to

55
00:02:07,759 --> 00:02:10,318
exchange the material here the e-token

56
00:02:10,318 --> 00:02:11,120
means

57
00:02:11,120 --> 00:02:13,920
send an from study an fmu key and the

58
00:02:13,920 --> 00:02:16,000
esto can send a static key

59
00:02:16,000 --> 00:02:18,720
they explain how to derive and change

60
00:02:18,720 --> 00:02:20,959
secrets from those key material for

61
00:02:20,959 --> 00:02:23,040
example es means perform the diffic

62
00:02:23,040 --> 00:02:26,000
helmet between the initiator's fmr key

63
00:02:26,000 --> 00:02:28,160
and the responder static key and finally

64
00:02:28,160 --> 00:02:30,319
they explain how to

65
00:02:30,319 --> 00:02:32,400
at which point it is possible to send

66
00:02:32,400 --> 00:02:34,840
and receive encrypted data

67
00:02:34,840 --> 00:02:37,200
interestingly it is possible to send

68
00:02:37,200 --> 00:02:39,680
data during the

69
00:02:39,680 --> 00:02:41,920
haunted phase that is to say before we

70
00:02:41,920 --> 00:02:43,680
enter the transport space and have the

71
00:02:43,680 --> 00:02:45,599
full security guarantees

72
00:02:45,599 --> 00:02:47,280
this is called early data and it is

73
00:02:47,280 --> 00:02:51,680
similar to tls zero run trip data

74
00:02:51,680 --> 00:02:52,800
now

75
00:02:52,800 --> 00:02:54,879
the noise protocol already has many

76
00:02:54,879 --> 00:02:57,599
implementations in various languages the

77
00:02:57,599 --> 00:03:01,280
problem is that those implementations

78
00:03:01,280 --> 00:03:03,360
there has there is a lot of bugs which

79
00:03:03,360 --> 00:03:05,599
have been found shortly in protocol

80
00:03:05,599 --> 00:03:08,480
implementations for example in tls

81
00:03:08,480 --> 00:03:10,640
and there is a way of handling that

82
00:03:10,640 --> 00:03:11,840
which is to

83
00:03:11,840 --> 00:03:15,519
use tools to formally verify this code

84
00:03:15,519 --> 00:03:18,879
to to analyze it and and make sure with

85
00:03:18,879 --> 00:03:20,720
a high level of confidence that it

86
00:03:20,720 --> 00:03:23,920
doesn't contain any bugs

87
00:03:23,920 --> 00:03:25,760
and in this the case here none of those

88
00:03:25,760 --> 00:03:28,400
implementations is verified

89
00:03:28,400 --> 00:03:31,599
so such tools have been used to verify

90
00:03:31,599 --> 00:03:33,599
several implementations of protocols

91
00:03:33,599 --> 00:03:36,000
like mtls or signal star and the

92
00:03:36,000 --> 00:03:38,319
question in the case of noise is is it

93
00:03:38,319 --> 00:03:42,239
possible to verify 15 1 59 protocols at

94
00:03:42,239 --> 00:03:44,720
once and this is the goal of the neustar

95
00:03:44,720 --> 00:03:46,239
project to provide verified

96
00:03:46,239 --> 00:03:49,920
implementations of those protocols now

97
00:03:49,920 --> 00:03:52,319
more precisely nausta is made of three

98
00:03:52,319 --> 00:03:53,599
components

99
00:03:53,599 --> 00:03:54,480
first

100
00:03:54,480 --> 00:03:56,560
we have a compiler

101
00:03:56,560 --> 00:03:58,400
from noise protocol patterns which

102
00:03:58,400 --> 00:04:01,200
describe the various protocols down to

103
00:04:01,200 --> 00:04:04,879
verified specialized c implementations

104
00:04:04,879 --> 00:04:06,640
because protocol code is quite low level

105
00:04:06,640 --> 00:04:08,959
we complement this with a

106
00:04:08,959 --> 00:04:11,360
very complete verified library stack

107
00:04:11,360 --> 00:04:13,519
which we expose through a high-level

108
00:04:13,519 --> 00:04:15,280
defensive api

109
00:04:15,280 --> 00:04:17,199
all this gives us code which is proven

110
00:04:17,199 --> 00:04:19,279
to be memory safe type safe and

111
00:04:19,279 --> 00:04:21,440
functionally correct but this is not

112
00:04:21,440 --> 00:04:22,320
enough

113
00:04:22,320 --> 00:04:24,800
to to have secure protocols we also need

114
00:04:24,800 --> 00:04:26,960
formal security guarantees which is why

115
00:04:26,960 --> 00:04:29,040
we complement this with a formal

116
00:04:29,040 --> 00:04:31,040
security analysis

117
00:04:31,040 --> 00:04:32,400
now let's

118
00:04:32,400 --> 00:04:34,160
dive into

119
00:04:34,160 --> 00:04:36,880
those different components starting with

120
00:04:36,880 --> 00:04:39,680
the noise protocol compiler

121
00:04:39,680 --> 00:04:40,400
so

122
00:04:40,400 --> 00:04:42,880
the first thing is how do we write

123
00:04:42,880 --> 00:04:45,680
verified code we use a very specific

124
00:04:45,680 --> 00:04:48,160
tool chain in our case so we use a

125
00:04:48,160 --> 00:04:49,680
theorem proverb

126
00:04:49,680 --> 00:04:52,080
in our case star which gives us a

127
00:04:52,080 --> 00:04:53,919
general purpose functional programming

128
00:04:53,919 --> 00:04:56,400
language and at program verification

129
00:04:56,400 --> 00:04:58,639
with the firmware improver you can write

130
00:04:58,639 --> 00:05:01,199
code write theorem statements and prove

131
00:05:01,199 --> 00:05:03,680
that the theorems are correct

132
00:05:03,680 --> 00:05:06,400
and also f-star gives us an effectual

133
00:05:06,400 --> 00:05:09,039
subset called lostar by which we can

134
00:05:09,039 --> 00:05:12,320
write verified c like code and once

135
00:05:12,320 --> 00:05:14,800
we've written such code we can use the

136
00:05:14,800 --> 00:05:17,360
caramel framework to compile it down to

137
00:05:17,360 --> 00:05:20,720
c code to use it in other projects now

138
00:05:20,720 --> 00:05:22,400
this tool chain has been successfully

139
00:05:22,400 --> 00:05:25,039
used in several projects including the

140
00:05:25,039 --> 00:05:27,440
everest project whose goal is to provide

141
00:05:27,440 --> 00:05:29,919
verified components for the https

142
00:05:29,919 --> 00:05:31,199
ecosystem

143
00:05:31,199 --> 00:05:33,039
and those components include verified

144
00:05:33,039 --> 00:05:34,639
cryptographic primitives for example

145
00:05:34,639 --> 00:05:37,360
hackerstar velcrit and evercrypt verify

146
00:05:37,360 --> 00:05:40,320
parsers and for serializers and also as

147
00:05:40,320 --> 00:05:42,800
i've mentioned before verified protocols

148
00:05:42,800 --> 00:05:46,080
like meteor signal star and quick

149
00:05:46,080 --> 00:05:48,960
now how do we do this more specifically

150
00:05:48,960 --> 00:05:51,039
we first start by writing what we call a

151
00:05:51,039 --> 00:05:53,120
formal specification in our case of the

152
00:05:53,120 --> 00:05:54,720
noise protocol

153
00:05:54,720 --> 00:05:56,800
what we do precisely is we have a look

154
00:05:56,800 --> 00:05:58,800
at the official reference for noise

155
00:05:58,800 --> 00:06:01,440
which is plain text english on the left

156
00:06:01,440 --> 00:06:04,479
and we carefully encode it in a pure

157
00:06:04,479 --> 00:06:07,120
high level language given by estar

158
00:06:07,120 --> 00:06:09,600
the idea is that we want to write to

159
00:06:09,600 --> 00:06:11,840
formalize this specification the

160
00:06:11,840 --> 00:06:15,280
reference into clean and audible code

161
00:06:15,280 --> 00:06:17,520
which focuses on the functional behavior

162
00:06:17,520 --> 00:06:20,240
of noise without dealing with low level

163
00:06:20,240 --> 00:06:22,560
error prone details like buffers

164
00:06:22,560 --> 00:06:25,680
pointers alizing etc

165
00:06:25,680 --> 00:06:27,520
something else interesting here is that

166
00:06:27,520 --> 00:06:30,240
this high level specification is written

167
00:06:30,240 --> 00:06:32,319
as an interpreter for instance if you

168
00:06:32,319 --> 00:06:33,199
write

169
00:06:33,199 --> 00:06:35,440
a function which processes a message

170
00:06:35,440 --> 00:06:37,600
like send message tokens it takes as

171
00:06:37,600 --> 00:06:39,840
input a list of tokens to describe the

172
00:06:39,840 --> 00:06:42,800
message and process use each token

173
00:06:42,800 --> 00:06:45,520
individually

174
00:06:45,840 --> 00:06:47,520
now we have

175
00:06:47,520 --> 00:06:49,360
now that we have a high level spec how

176
00:06:49,360 --> 00:06:51,440
do we write verified c code

177
00:06:51,440 --> 00:06:53,520
for this we use le star which gives us

178
00:06:53,520 --> 00:06:55,120
access to low level features like

179
00:06:55,120 --> 00:06:56,800
buffers and pointers

180
00:06:56,800 --> 00:06:58,800
in low star when we write a function

181
00:06:58,800 --> 00:07:00,880
signature we can write a precondition

182
00:07:00,880 --> 00:07:03,199
which states what needs to be verified

183
00:07:03,199 --> 00:07:05,280
upon calling the function for example

184
00:07:05,280 --> 00:07:06,240
those

185
00:07:06,240 --> 00:07:07,919
buffers are disjoint

186
00:07:07,919 --> 00:07:10,080
those pointers are non-dangling pointers

187
00:07:10,080 --> 00:07:12,080
then we have we can write a path

188
00:07:12,080 --> 00:07:15,280
condition which explains in a high level

189
00:07:15,280 --> 00:07:17,599
how the function behaves for instance

190
00:07:17,599 --> 00:07:19,919
which buffers are modified and we also

191
00:07:19,919 --> 00:07:22,560
you need to state functional correctness

192
00:07:22,560 --> 00:07:24,960
properties by linking the low level code

193
00:07:24,960 --> 00:07:26,639
to the high level specification we

194
00:07:26,639 --> 00:07:28,160
introduced earlier

195
00:07:28,160 --> 00:07:30,080
and finally when we write the body and

196
00:07:30,080 --> 00:07:32,160
type check it f-star generates proof

197
00:07:32,160 --> 00:07:34,319
obligations which are sent to the z-free

198
00:07:34,319 --> 00:07:36,800
smt server which then says yes

199
00:07:36,800 --> 00:07:38,960
everything is fine or no please update

200
00:07:38,960 --> 00:07:40,160
your code

201
00:07:40,160 --> 00:07:42,319
once we have verified code we use the

202
00:07:42,319 --> 00:07:44,639
karma framework to compile into c code

203
00:07:44,639 --> 00:07:46,560
and get something like this which can we

204
00:07:46,560 --> 00:07:49,120
can reuse in other projects

205
00:07:49,120 --> 00:07:52,400
now as i've mentioned before it is

206
00:07:52,400 --> 00:07:54,960
loser has been used to verify a lot of

207
00:07:54,960 --> 00:07:57,520
cryptographic codes including

208
00:07:57,520 --> 00:07:58,960
whole protocols

209
00:07:58,960 --> 00:08:00,720
so it is another surprise that we can

210
00:08:00,720 --> 00:08:02,240
use it to

211
00:08:02,240 --> 00:08:04,560
implement one verified protocol the

212
00:08:04,560 --> 00:08:06,560
question is how can we write

213
00:08:06,560 --> 00:08:08,879
59 at once

214
00:08:08,879 --> 00:08:10,160
so

215
00:08:10,160 --> 00:08:11,919
i mentioned before that the high level

216
00:08:11,919 --> 00:08:14,639
spec we we use is written as an

217
00:08:14,639 --> 00:08:17,199
interpreter so it is actually possible

218
00:08:17,199 --> 00:08:19,919
to write a verified interpreter in low

219
00:08:19,919 --> 00:08:23,360
star for noise and for instance the loss

220
00:08:23,360 --> 00:08:25,199
equivalent of the

221
00:08:25,199 --> 00:08:27,039
high level function actually before send

222
00:08:27,039 --> 00:08:28,800
message tokens is like this actually

223
00:08:28,800 --> 00:08:31,360
need it a bit of course now the problem

224
00:08:31,360 --> 00:08:33,519
is that the low-level code the target

225
00:08:33,519 --> 00:08:36,640
code we want is like that yes

226
00:08:36,640 --> 00:08:39,039
so this comes from the wireguard vpn

227
00:08:39,039 --> 00:08:41,360
implementation and if you look at it you

228
00:08:41,360 --> 00:08:44,320
see that it can't it is

229
00:08:44,320 --> 00:08:46,800
specialized idiomatic c code with no

230
00:08:46,800 --> 00:08:49,519
recursion no list of tokens well on the

231
00:08:49,519 --> 00:08:52,160
left we have an interpreter which is

232
00:08:52,160 --> 00:08:54,480
written in a rigorous style of a list of

233
00:08:54,480 --> 00:08:57,920
tokens so now the question is how can we

234
00:08:57,920 --> 00:08:59,839
turn this interpreter

235
00:08:59,839 --> 00:09:01,040
into

236
00:09:01,040 --> 00:09:03,120
more specialized code and in other words

237
00:09:03,120 --> 00:09:05,200
how can we turn this interpreter into a

238
00:09:05,200 --> 00:09:08,640
compiler by specializing it into on some

239
00:09:08,640 --> 00:09:10,720
given input and there is actually a very

240
00:09:10,720 --> 00:09:12,480
simple way of doing this which is called

241
00:09:12,480 --> 00:09:14,880
partial evaluation so for instance if

242
00:09:14,880 --> 00:09:16,880
you take if you want a function to

243
00:09:16,880 --> 00:09:19,680
implement a function which processes the

244
00:09:19,680 --> 00:09:23,760
first message of ikpse2 so ess

245
00:09:23,760 --> 00:09:26,000
as an initiator you can just implement

246
00:09:26,000 --> 00:09:28,320
it in it by calling the generic

247
00:09:28,320 --> 00:09:31,040
interpreter function send search tokens

248
00:09:31,040 --> 00:09:34,080
with the proper inputs in this case the

249
00:09:34,080 --> 00:09:36,720
list of tokens ess

250
00:09:36,720 --> 00:09:39,120
now the thing is you can take the send

251
00:09:39,120 --> 00:09:41,040
message tokens function

252
00:09:41,040 --> 00:09:41,839
and

253
00:09:41,839 --> 00:09:44,640
inline its body basically and it gives

254
00:09:44,640 --> 00:09:47,760
this and what you see here is that

255
00:09:47,760 --> 00:09:49,360
we have a match

256
00:09:49,360 --> 00:09:51,440
over a list of tokens that we can

257
00:09:51,440 --> 00:09:53,600
already evaluate that is to say at

258
00:09:53,600 --> 00:09:56,080
compile time if we do so we get

259
00:09:56,080 --> 00:09:57,600
something like this and you see function

260
00:09:57,600 --> 00:09:59,760
that the e-token has been inserted in

261
00:09:59,760 --> 00:10:01,760
some places and we have later a

262
00:10:01,760 --> 00:10:04,000
recursive call over the remaining list

263
00:10:04,000 --> 00:10:06,160
of tokens and we can continue that for

264
00:10:06,160 --> 00:10:08,160
instance we can evaluate this it gives a

265
00:10:08,160 --> 00:10:09,760
constant

266
00:10:09,760 --> 00:10:12,800
and then we can inline the constant

267
00:10:12,800 --> 00:10:13,680
and

268
00:10:13,680 --> 00:10:16,240
step by step it gives us

269
00:10:16,240 --> 00:10:18,959
by unfolding things evaluating matches

270
00:10:18,959 --> 00:10:23,040
etc gives us a more and more specialized

271
00:10:23,040 --> 00:10:26,000
version of the function in this case for

272
00:10:26,000 --> 00:10:27,519
the list of tokens in which we're

273
00:10:27,519 --> 00:10:29,519
interested

274
00:10:29,519 --> 00:10:32,160
now this is a very simple idea but

275
00:10:32,160 --> 00:10:34,959
partial evaluation combined with stars

276
00:10:34,959 --> 00:10:36,720
extremely powerful type system which

277
00:10:36,720 --> 00:10:39,040
includes dependent types gives us a way

278
00:10:39,040 --> 00:10:42,000
of generating extremely specialized code

279
00:10:42,000 --> 00:10:42,880
with

280
00:10:42,880 --> 00:10:44,160
no recursion

281
00:10:44,160 --> 00:10:46,240
no list of tokens but also an extremely

282
00:10:46,240 --> 00:10:48,079
precise control flow and very

283
00:10:48,079 --> 00:10:50,079
specialized types that is to say we have

284
00:10:50,079 --> 00:10:52,320
a way of writing a very generic

285
00:10:52,320 --> 00:10:55,040
implementation and then specialize it

286
00:10:55,040 --> 00:10:56,640
with it compromise

287
00:10:56,640 --> 00:10:59,839
so the whole idea is to use f-star as a

288
00:10:59,839 --> 00:11:02,240
to meter program as much as possible it

289
00:11:02,240 --> 00:11:04,160
is very similar to using super advanced

290
00:11:04,160 --> 00:11:06,399
simple space templates by which we write

291
00:11:06,399 --> 00:11:08,480
a meta program once and then specialize

292
00:11:08,480 --> 00:11:10,480
it in times and this technique of

293
00:11:10,480 --> 00:11:12,800
turning an interpreter into a compiler

294
00:11:12,800 --> 00:11:14,560
is actually called a photomolar

295
00:11:14,560 --> 00:11:16,399
projection now

296
00:11:16,399 --> 00:11:18,560
this technique of partial reduction has

297
00:11:18,560 --> 00:11:20,399
been used a lot in f star for example to

298
00:11:20,399 --> 00:11:21,200
get

299
00:11:21,200 --> 00:11:22,000
um

300
00:11:22,000 --> 00:11:23,600
agile cryptographic primitives in

301
00:11:23,600 --> 00:11:26,240
everclip to have functions we choose

302
00:11:26,240 --> 00:11:28,399
vector types in herculic stem

303
00:11:28,399 --> 00:11:29,120
and

304
00:11:29,120 --> 00:11:31,120
the thing is

305
00:11:31,120 --> 00:11:33,200
stepping away from the problem of

306
00:11:33,200 --> 00:11:34,959
verifying programs it is actually a very

307
00:11:34,959 --> 00:11:37,200
useful technique just to factorize

308
00:11:37,200 --> 00:11:38,880
cryptographic code for instance by

309
00:11:38,880 --> 00:11:41,040
writing one very generic md hash

310
00:11:41,040 --> 00:11:43,600
function and specializing it to

311
00:11:43,600 --> 00:11:47,360
one chat too on md5 or writing at once

312
00:11:47,360 --> 00:11:49,360
generic and optimized implementations

313
00:11:49,360 --> 00:11:51,360
for cryptography primitives and what we

314
00:11:51,360 --> 00:11:53,200
do even outside that we push this

315
00:11:53,200 --> 00:11:55,440
technique to the point where we can have

316
00:11:55,440 --> 00:11:57,440
a complete meta-programmed protocol

317
00:11:57,440 --> 00:11:58,959
stack

318
00:11:58,959 --> 00:12:00,560
now this gives us

319
00:12:00,560 --> 00:12:03,200
a protocol code which is proven to be

320
00:12:03,200 --> 00:12:04,959
type and memory safe and also

321
00:12:04,959 --> 00:12:06,800
functionally correct but as i've said

322
00:12:06,800 --> 00:12:08,399
before this is not enough for protocols

323
00:12:08,399 --> 00:12:10,480
we also want security guarantees which

324
00:12:10,480 --> 00:12:13,519
is why we did a security analysis in our

325
00:12:13,519 --> 00:12:16,639
case the noise reference defines

326
00:12:16,639 --> 00:12:18,399
authentication and confidentiality

327
00:12:18,399 --> 00:12:20,720
levels for all the messages in a hundred

328
00:12:20,720 --> 00:12:24,079
pattern so what we did is we formalized

329
00:12:24,079 --> 00:12:27,680
the security level's security goals in a

330
00:12:27,680 --> 00:12:30,320
framework called dollar star which is

331
00:12:30,320 --> 00:12:33,120
from a photosymbolic analysis and we did

332
00:12:33,120 --> 00:12:36,320
one generic symbolic analysis proof

333
00:12:36,320 --> 00:12:38,560
by working at the level of the

334
00:12:38,560 --> 00:12:41,040
interpreter specification

335
00:12:41,040 --> 00:12:44,240
so all this gives us verified portable

336
00:12:44,240 --> 00:12:46,639
code but this is very low-level so we

337
00:12:46,639 --> 00:12:49,120
complemented it with a high-level

338
00:12:49,120 --> 00:12:51,279
defensive api

339
00:12:51,279 --> 00:12:54,959
this api is very useful because

340
00:12:55,600 --> 00:12:57,760
for instance if you look at ikpsk2 you

341
00:12:57,760 --> 00:12:59,040
can see there are

342
00:12:59,040 --> 00:13:02,240
a lot quite a few level transitions

343
00:13:02,240 --> 00:13:03,200
and

344
00:13:03,200 --> 00:13:05,680
such transitions led to a lot of bugs

345
00:13:05,680 --> 00:13:08,160
for instance in tls for this reason we

346
00:13:08,160 --> 00:13:10,720
implemented verified state machines

347
00:13:10,720 --> 00:13:12,720
which are also generically

348
00:13:12,720 --> 00:13:14,959
meta-programmed so that we can abstract

349
00:13:14,959 --> 00:13:16,480
away from the contract phase and the

350
00:13:16,480 --> 00:13:18,320
transport phase

351
00:13:18,320 --> 00:13:19,600
also

352
00:13:19,600 --> 00:13:21,279
it is as i've mentioned before it is

353
00:13:21,279 --> 00:13:23,600
possible to send messages early

354
00:13:23,600 --> 00:13:25,920
before we reach the transport phase but

355
00:13:25,920 --> 00:13:28,959
a user might inadvertently send messages

356
00:13:28,959 --> 00:13:31,120
without having the proper security

357
00:13:31,120 --> 00:13:33,040
guarantees for this reason we

358
00:13:33,040 --> 00:13:35,760
implemented a misuse resistant api that

359
00:13:35,760 --> 00:13:37,920
reflects the security guarantees

360
00:13:37,920 --> 00:13:40,639
performs dynamic checks to make sure we

361
00:13:40,639 --> 00:13:42,959
don't send messages too early and we

362
00:13:42,959 --> 00:13:45,279
also propagated the security proofs in

363
00:13:45,279 --> 00:13:46,839
the api

364
00:13:46,839 --> 00:13:50,079
finally in one handshake we manipulate a

365
00:13:50,079 --> 00:13:52,399
lot of keys in particular static keys

366
00:13:52,399 --> 00:13:54,240
and for this reason we implemented

367
00:13:54,240 --> 00:13:57,199
utilities for key npr management for

368
00:13:57,199 --> 00:13:59,760
example to validate remote keys load and

369
00:13:59,760 --> 00:14:02,240
source static keys look appreciate keys

370
00:14:02,240 --> 00:14:03,440
upon knowing

371
00:14:03,440 --> 00:14:06,880
learning a remote identity and also to

372
00:14:06,880 --> 00:14:10,320
securely stored keys on the disk

373
00:14:10,320 --> 00:14:12,079
something important here is that in most

374
00:14:12,079 --> 00:14:13,360
implementations

375
00:14:13,360 --> 00:14:15,279
the high-level api is the biggest

376
00:14:15,279 --> 00:14:17,519
component in terms of size and in the

377
00:14:17,519 --> 00:14:19,600
case of noise star it accounts for more

378
00:14:19,600 --> 00:14:22,000
than three quarters of the lines of the

379
00:14:22,000 --> 00:14:24,959
generated code

380
00:14:25,199 --> 00:14:27,360
with our implementation we we use our

381
00:14:27,360 --> 00:14:28,880
implementation to

382
00:14:28,880 --> 00:14:31,839
generate code for the 59 noise patterns

383
00:14:31,839 --> 00:14:34,320
and actually for every pattern we used

384
00:14:34,320 --> 00:14:36,160
eight different cipher suits leading to

385
00:14:36,160 --> 00:14:39,360
472 instantiations we benchmarked those

386
00:14:39,360 --> 00:14:41,600
against existing implementations

387
00:14:41,600 --> 00:14:43,760
and thanks to the very good performance

388
00:14:43,760 --> 00:14:46,079
of the hacklets primitives we use under

389
00:14:46,079 --> 00:14:48,000
the hood our

390
00:14:48,000 --> 00:14:50,240
our implementation is very performant in

391
00:14:50,240 --> 00:14:51,920
particular it beats everything at the

392
00:14:51,920 --> 00:14:53,199
exception of wireguard which is

393
00:14:53,199 --> 00:14:56,959
specialized for ikpsk too

394
00:14:56,959 --> 00:14:58,800
as a conclusion i introduced neustar

395
00:14:58,800 --> 00:15:00,320
which is

396
00:15:00,320 --> 00:15:02,240
all things a compiler from those

397
00:15:02,240 --> 00:15:04,880
portable patterns to efficient verified

398
00:15:04,880 --> 00:15:07,440
c code but also a complete verified

399
00:15:07,440 --> 00:15:08,560
stack

400
00:15:08,560 --> 00:15:10,800
exposed for high level defensive api all

401
00:15:10,800 --> 00:15:12,720
of these being completed by a symbolic

402
00:15:12,720 --> 00:15:15,360
analysis

403
00:15:15,760 --> 00:15:18,000
stepping aside from the verification of

404
00:15:18,000 --> 00:15:19,920
cryptographic protocols narstar

405
00:15:19,920 --> 00:15:21,600
showcases techniques which are useful to

406
00:15:21,600 --> 00:15:24,320
verify full software stacks and also

407
00:15:24,320 --> 00:15:25,920
automate the production of code where we

408
00:15:25,920 --> 00:15:27,680
don't sacrifice precision nor

409
00:15:27,680 --> 00:15:30,320
performance all the code is available on

410
00:15:30,320 --> 00:15:32,399
github if you only want the c code you

411
00:15:32,399 --> 00:15:34,399
can pick it up and if you need a

412
00:15:34,399 --> 00:15:37,040
specific choice of optimized primitives

413
00:15:37,040 --> 00:15:38,480
you can contact us and we'll be very

414
00:15:38,480 --> 00:15:40,079
happy to provide the proper

415
00:15:40,079 --> 00:15:42,079
instantiation for you thanks for your

416
00:15:42,079 --> 00:15:46,000
attention and you have questions

417
00:15:47,510 --> 00:15:50,639
[Applause]

418
00:15:50,639 --> 00:15:54,120
oh thanks

419
00:15:59,279 --> 00:16:00,160
hello

420
00:16:00,160 --> 00:16:02,079
hi thank you thank you very much for the

421
00:16:02,079 --> 00:16:03,839
great talk this is a great job on

422
00:16:03,839 --> 00:16:05,839
building such a versatile framework for

423
00:16:05,839 --> 00:16:07,839
uh

424
00:16:07,839 --> 00:16:10,000
so many different things that's really

425
00:16:10,000 --> 00:16:12,560
really cool um if we have any questions

426
00:16:12,560 --> 00:16:14,959
oh yes you can have a question please

427
00:16:14,959 --> 00:16:17,440
hello master founder of mbi thank you

428
00:16:17,440 --> 00:16:19,279
for a great talk and

429
00:16:19,279 --> 00:16:20,959
i do have a question

430
00:16:20,959 --> 00:16:24,079
and if i understand correctly

431
00:16:24,079 --> 00:16:25,060
the

432
00:16:25,060 --> 00:16:26,959
[Music]

433
00:16:26,959 --> 00:16:28,160
low star

434
00:16:28,160 --> 00:16:31,440
security protocols and proofs go to the

435
00:16:31,440 --> 00:16:33,920
sea level so you have proofs from type

436
00:16:33,920 --> 00:16:36,720
level to sea level do you have a story

437
00:16:36,720 --> 00:16:37,680
about

438
00:16:37,680 --> 00:16:40,000
how the c memory model and

439
00:16:40,000 --> 00:16:43,120
especially after that c compilers might

440
00:16:43,120 --> 00:16:46,399
um change security properties or how do

441
00:16:46,399 --> 00:16:48,399
you prove those

442
00:16:48,399 --> 00:16:51,440
okay so

443
00:16:51,440 --> 00:16:53,360
um

444
00:16:53,360 --> 00:16:55,519
okay we have a model of c which gives us

445
00:16:55,519 --> 00:16:57,839
that the compilation from no start to c

446
00:16:57,839 --> 00:17:00,720
is correct um i mean functionally

447
00:17:00,720 --> 00:17:02,800
correct now we don't

448
00:17:02,800 --> 00:17:04,480
for instance we don't model the memory

449
00:17:04,480 --> 00:17:07,039
in such a way that for instance

450
00:17:07,039 --> 00:17:08,720
this is all functional correctness

451
00:17:08,720 --> 00:17:11,280
mostly and also we have some constant

452
00:17:11,280 --> 00:17:12,720
time guarantees

453
00:17:12,720 --> 00:17:14,160
by making sure we don't do some

454
00:17:14,160 --> 00:17:16,240
operations like division

455
00:17:16,240 --> 00:17:18,880
now we don't have guarantees like

456
00:17:18,880 --> 00:17:20,720
um we don't prove

457
00:17:20,720 --> 00:17:22,079
that

458
00:17:22,079 --> 00:17:23,439
we zero

459
00:17:23,439 --> 00:17:25,919
the memory before release we do it by

460
00:17:25,919 --> 00:17:27,760
hand with the code but we can't prove

461
00:17:27,760 --> 00:17:31,160
these other things

462
00:17:32,400 --> 00:17:34,720
thank you

463
00:17:40,080 --> 00:17:41,360
so

464
00:17:41,360 --> 00:17:43,600
any other questions

465
00:17:43,600 --> 00:17:44,840
there's no question

466
00:17:44,840 --> 00:17:48,320
online okay i i had one question uh

467
00:17:48,320 --> 00:17:50,320
which was basically so one of those

468
00:17:50,320 --> 00:17:51,760
things you mentioned especially in your

469
00:17:51,760 --> 00:17:53,600
paper in the talk is uh you know you can

470
00:17:53,600 --> 00:17:55,280
add more protocols to the system it's

471
00:17:55,280 --> 00:17:57,919
built to be a framework so could you

472
00:17:57,919 --> 00:18:01,280
maybe comment on how complex that is and

473
00:18:01,280 --> 00:18:03,919
how much effort that would take

474
00:18:03,919 --> 00:18:04,720
okay

475
00:18:04,720 --> 00:18:05,040
so

476
00:18:05,040 --> 00:18:06,880
[Music]

477
00:18:06,880 --> 00:18:09,679
we've realized if we need to add more

478
00:18:09,679 --> 00:18:12,320
components with regards to

479
00:18:12,320 --> 00:18:15,840
the dsl is bigger um at the protocol

480
00:18:15,840 --> 00:18:17,919
layer it's not that much of a big deal

481
00:18:17,919 --> 00:18:21,039
because for instance we have this

482
00:18:21,039 --> 00:18:22,720
if you want to send a message we have a

483
00:18:22,720 --> 00:18:24,799
send message tokens function which just

484
00:18:24,799 --> 00:18:26,880
recursively calls a generic message

485
00:18:26,880 --> 00:18:28,559
token function which just doesn't match

486
00:18:28,559 --> 00:18:31,039
it's very easy to add new cases there

487
00:18:31,039 --> 00:18:33,039
it becomes a bit more complex if we need

488
00:18:33,039 --> 00:18:36,799
to handle more keys at the api level we

489
00:18:36,799 --> 00:18:40,559
would have a lot more work to do here

490
00:18:40,559 --> 00:18:42,960
but for protocol it's pretty simple now

491
00:18:42,960 --> 00:18:44,960
another thing which would require a bit

492
00:18:44,960 --> 00:18:46,640
of thinking is how we update the

493
00:18:46,640 --> 00:18:48,000
security proof

494
00:18:48,000 --> 00:18:49,679
because the environments are quite

495
00:18:49,679 --> 00:18:53,760
subtle to state in that place

496
00:18:54,880 --> 00:18:58,240
sounds good thank you for your answer um

497
00:18:58,240 --> 00:19:00,480
any other question

498
00:19:00,480 --> 00:19:03,600
it doesn't seem to be okay um me i had

499
00:19:03,600 --> 00:19:06,320
like one last question so i i think i'm

500
00:19:06,320 --> 00:19:08,240
a little bit familiar with the pro verif

501
00:19:08,240 --> 00:19:10,400
framework which is also from andrea uh

502
00:19:10,400 --> 00:19:13,520
it also uses uh the symbolic analysis

503
00:19:13,520 --> 00:19:16,160
with ty so could you maybe comment on

504
00:19:16,160 --> 00:19:18,640
the contrast the two frameworks

505
00:19:18,640 --> 00:19:20,240
yes um

506
00:19:20,240 --> 00:19:22,720
so i'm not an expert of pro verify

507
00:19:22,720 --> 00:19:26,320
i think the pro verified model might be

508
00:19:26,320 --> 00:19:28,559
more precise than the one we use in

509
00:19:28,559 --> 00:19:31,440
olympio start the converter part is that

510
00:19:31,440 --> 00:19:34,480
from my understanding you can't

511
00:19:34,480 --> 00:19:37,039
you wouldn't be able to analyze several

512
00:19:37,039 --> 00:19:39,520
several protocols at once so here and

513
00:19:39,520 --> 00:19:41,120
it's more automatic probability is more

514
00:19:41,120 --> 00:19:42,320
automated

515
00:19:42,320 --> 00:19:43,200
um

516
00:19:43,200 --> 00:19:45,039
we have more manual work to do on the

517
00:19:45,039 --> 00:19:47,120
olivier star the converter is that we

518
00:19:47,120 --> 00:19:49,919
can write very things very generically

519
00:19:49,919 --> 00:19:51,360
consider recursive functions for

520
00:19:51,360 --> 00:19:53,120
instance which allows us to factorize

521
00:19:53,120 --> 00:19:55,200
the proof while we provide i think you

522
00:19:55,200 --> 00:19:56,960
would have to do

523
00:19:56,960 --> 00:20:00,720
a proof about one protocol at a time

524
00:20:00,799 --> 00:20:02,960
sounds great thank you so much for all

525
00:20:02,960 --> 00:20:05,120
the answers let's give our presenter

526
00:20:05,120 --> 00:20:07,039
another round of applause

527
00:20:07,039 --> 00:20:10,799
thank you very much

