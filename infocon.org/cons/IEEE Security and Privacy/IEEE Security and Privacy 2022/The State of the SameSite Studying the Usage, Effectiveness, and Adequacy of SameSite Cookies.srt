1
00:00:00,719 --> 00:00:02,720
hello and welcome to this talk about the

2
00:00:02,720 --> 00:00:04,799
adoption and effectiveness of same-side

3
00:00:04,799 --> 00:00:06,560
cookies this is the joint work with my

4
00:00:06,560 --> 00:00:08,720
advisor giancarlo and myself soil and

5
00:00:08,720 --> 00:00:11,679
verbose from sispa germany

6
00:00:11,679 --> 00:00:13,599
browsers include cookies in http

7
00:00:13,599 --> 00:00:15,759
requests regardless of their context

8
00:00:15,759 --> 00:00:17,600
including class requests

9
00:00:17,600 --> 00:00:19,520
and this behavior is abused by a family

10
00:00:19,520 --> 00:00:21,199
of web attacks known as cross-site

11
00:00:21,199 --> 00:00:24,720
attacks such as cross-elix or c-serve

12
00:00:24,720 --> 00:00:26,240
now a long-known content measure to

13
00:00:26,240 --> 00:00:28,080
protect from these attacks is to limit

14
00:00:28,080 --> 00:00:29,920
the scope of cookies to the same side

15
00:00:29,920 --> 00:00:31,279
context

16
00:00:31,279 --> 00:00:33,200
one way to implement this solution is to

17
00:00:33,200 --> 00:00:35,600
rely on external components such as http

18
00:00:35,600 --> 00:00:37,920
proxies or browser extensions which

19
00:00:37,920 --> 00:00:39,840
limits their impact considerably because

20
00:00:39,840 --> 00:00:41,280
they are external

21
00:00:41,280 --> 00:00:43,520
however only recently google revamped

22
00:00:43,520 --> 00:00:45,760
the idea of samsung policies for cookies

23
00:00:45,760 --> 00:00:47,600
by implementing in chrome the same

24
00:00:47,600 --> 00:00:49,760
sitegooky attribute

25
00:00:49,760 --> 00:00:51,440
the same side attribute defines the

26
00:00:51,440 --> 00:00:53,280
context in which browsers can include

27
00:00:53,280 --> 00:00:56,320
cookies using three predefined policies

28
00:00:56,320 --> 00:00:58,320
first we have the non-policy which means

29
00:00:58,320 --> 00:01:00,000
cookies are attached to all crossover

30
00:01:00,000 --> 00:01:01,120
requests

31
00:01:01,120 --> 00:01:03,120
then on the other side of the spectrum

32
00:01:03,120 --> 00:01:04,959
we have the strict policy which means

33
00:01:04,959 --> 00:01:06,479
cookies are not attached to any

34
00:01:06,479 --> 00:01:08,720
crossover request at all and finally in

35
00:01:08,720 --> 00:01:10,560
between we have the last posie which

36
00:01:10,560 --> 00:01:12,000
says cookies are attached to some

37
00:01:12,000 --> 00:01:13,600
crossfire requests that are potentially

38
00:01:13,600 --> 00:01:15,680
safe such as top level navigational

39
00:01:15,680 --> 00:01:16,880
requests

40
00:01:16,880 --> 00:01:18,560
and what happens if a cookie does not

41
00:01:18,560 --> 00:01:20,320
explicitly use one of these three

42
00:01:20,320 --> 00:01:22,880
policies well in that case browsers will

43
00:01:22,880 --> 00:01:24,640
use a default policy

44
00:01:24,640 --> 00:01:26,240
and when chrome initially added the

45
00:01:26,240 --> 00:01:28,479
support for same site the default policy

46
00:01:28,479 --> 00:01:30,320
was done but the ultimate goal was to

47
00:01:30,320 --> 00:01:32,000
gradually transition to a secure by

48
00:01:32,000 --> 00:01:34,240
default opt-out solution so that's why

49
00:01:34,240 --> 00:01:36,079
chrome started showing warning console

50
00:01:36,079 --> 00:01:38,960
messages in september 2019 that cookies

51
00:01:38,960 --> 00:01:41,280
will be devoted to lux the lack by

52
00:01:41,280 --> 00:01:43,040
default was then initially enforced in

53
00:01:43,040 --> 00:01:45,280
february 2020 where we had this

54
00:01:45,280 --> 00:01:47,119
transition from same study called none

55
00:01:47,119 --> 00:01:49,759
to same-sex lacks for cookies that miss

56
00:01:49,759 --> 00:01:53,040
an explicit same-side attribute

57
00:01:53,040 --> 00:01:55,439
soon after in april this change was

58
00:01:55,439 --> 00:01:58,159
reverted due to covet 19 pandemi and

59
00:01:58,159 --> 00:02:01,600
then reinforced in chrome 84 as of july

60
00:02:01,600 --> 00:02:03,119
2020

61
00:02:03,119 --> 00:02:03,840
so

62
00:02:03,840 --> 00:02:07,040
since then we have lags by default um as

63
00:02:07,040 --> 00:02:09,199
the new default policy informant-based

64
00:02:09,199 --> 00:02:10,318
browsers

65
00:02:10,318 --> 00:02:13,200
and the question is how effective it is

66
00:02:13,200 --> 00:02:16,958
to mitigate cross-set attacks

67
00:02:17,920 --> 00:02:19,920
more concretely in this paper we want to

68
00:02:19,920 --> 00:02:21,760
study the state of same-sex policy's

69
00:02:21,760 --> 00:02:23,520
adoption and the effectiveness of the

70
00:02:23,520 --> 00:02:26,000
new lacks by default policy specifically

71
00:02:26,000 --> 00:02:27,840
one of the first questions we intended

72
00:02:27,840 --> 00:02:30,400
to answer was how websites adapted one

73
00:02:30,400 --> 00:02:32,239
of the three same-side policies across

74
00:02:32,239 --> 00:02:34,560
the two lakhs by default role updates

75
00:02:34,560 --> 00:02:37,040
then as we now have a new default policy

76
00:02:37,040 --> 00:02:38,800
the second obvious question is what

77
00:02:38,800 --> 00:02:40,560
would be the cost of this change what

78
00:02:40,560 --> 00:02:43,760
functionalities are broken

79
00:02:43,760 --> 00:02:45,599
third we look at these benefits that is

80
00:02:45,599 --> 00:02:47,680
how adequate and effective is lags by

81
00:02:47,680 --> 00:02:50,080
default to prevent cross-set attacks and

82
00:02:50,080 --> 00:02:52,480
bother the threats to its effectiveness

83
00:02:52,480 --> 00:02:54,000
and finally we have a look at browser

84
00:02:54,000 --> 00:02:56,160
post inconsistencies with respect to the

85
00:02:56,160 --> 00:02:58,640
rfc for same side cookies as well as the

86
00:02:58,640 --> 00:03:00,640
framework default behaviors as they can

87
00:03:00,640 --> 00:03:02,400
revert the process lacks by default

88
00:03:02,400 --> 00:03:04,800
protection

89
00:03:04,800 --> 00:03:06,239
starting with the first research

90
00:03:06,239 --> 00:03:08,319
question we conducted the longitudinal

91
00:03:08,319 --> 00:03:10,640
analysis of same-set adoption on alexa

92
00:03:10,640 --> 00:03:12,720
half a million sites where we performed

93
00:03:12,720 --> 00:03:14,640
eight calls on internet archive from

94
00:03:14,640 --> 00:03:17,760
june 2019 to march 2021 with the three

95
00:03:17,760 --> 00:03:20,159
months interval between the crawls

96
00:03:20,159 --> 00:03:22,640
and we found that around 18.9 of the

97
00:03:22,640 --> 00:03:25,200
sites adopted a valid policy of which

98
00:03:25,200 --> 00:03:27,360
3.7 percent disable the same site

99
00:03:27,360 --> 00:03:29,760
protection using the non-policy and the

100
00:03:29,760 --> 00:03:32,239
rest rely on stricter policies like

101
00:03:32,239 --> 00:03:34,159
lacks and strict

102
00:03:34,159 --> 00:03:35,519
interestingly we observed that the

103
00:03:35,519 --> 00:03:38,159
fraction of sites using the non-policy

104
00:03:38,159 --> 00:03:40,080
increases with site's popularity to up

105
00:03:40,080 --> 00:03:43,680
to 18 within the top 1k ranking

106
00:03:43,680 --> 00:03:45,440
when looking at the trend of same side

107
00:03:45,440 --> 00:03:47,120
adoption the two lacks by default

108
00:03:47,120 --> 00:03:49,599
rollout dates r1 and r2 in the figure

109
00:03:49,599 --> 00:03:51,360
seem to have played a relevant role with

110
00:03:51,360 --> 00:03:53,040
the steep increase of all same side

111
00:03:53,040 --> 00:03:55,599
policies that is a seven-fold increase

112
00:03:55,599 --> 00:03:58,480
in lacks a four-fold increasing streak

113
00:03:58,480 --> 00:04:00,319
and for the non-policy we observe at

114
00:04:00,319 --> 00:04:02,640
least the 20-fold growth with even more

115
00:04:02,640 --> 00:04:04,879
increase in more popular size

116
00:04:04,879 --> 00:04:07,680
overall after a rapid increment of sites

117
00:04:07,680 --> 00:04:09,360
using one of the same side policies

118
00:04:09,360 --> 00:04:11,200
around the enforcement days we now

119
00:04:11,200 --> 00:04:13,360
observe a rather moderate yet steady

120
00:04:13,360 --> 00:04:15,680
growth

121
00:04:16,320 --> 00:04:18,639
then a small yet non-negligible fraction

122
00:04:18,639 --> 00:04:21,120
of sites set an invalid policy such as

123
00:04:21,120 --> 00:04:23,280
same cycle one which is a string that

124
00:04:23,280 --> 00:04:25,040
does not match any of the three known

125
00:04:25,040 --> 00:04:26,080
policies

126
00:04:26,080 --> 00:04:27,840
invalid policies should be treated as

127
00:04:27,840 --> 00:04:29,919
the non-policy by web browsers according

128
00:04:29,919 --> 00:04:32,960
to rfc 6265 business specification as

129
00:04:32,960 --> 00:04:34,720
such when developers make mistakes and

130
00:04:34,720 --> 00:04:36,479
use non-existing policies this

131
00:04:36,479 --> 00:04:38,560
inadvertently could result in deploying

132
00:04:38,560 --> 00:04:41,919
a different policy than the intended one

133
00:04:41,919 --> 00:04:44,400
finally for the remaining 80 of sites

134
00:04:44,400 --> 00:04:46,320
our crawling did not observe an explicit

135
00:04:46,320 --> 00:04:48,479
policy meaning that they may rely on the

136
00:04:48,479 --> 00:04:50,320
default browser behavior for which we

137
00:04:50,320 --> 00:04:53,919
don't have the new lags by default

138
00:04:54,400 --> 00:04:56,880
coming to the second research question

139
00:04:56,880 --> 00:04:58,960
um let's now have a look at the

140
00:04:58,960 --> 00:05:01,600
functionality breakage so websites use

141
00:05:01,600 --> 00:05:03,039
cluster requests for various

142
00:05:03,039 --> 00:05:04,960
functionalities such as social media

143
00:05:04,960 --> 00:05:06,960
sharing like buttons advertising and the

144
00:05:06,960 --> 00:05:08,479
question is what functionality are

145
00:05:08,479 --> 00:05:11,120
affected by the new default policy

146
00:05:11,120 --> 00:05:12,800
to answer this question we created a

147
00:05:12,800 --> 00:05:14,720
crawler based on puppeteer and chrome

148
00:05:14,720 --> 00:05:16,720
devtoo's protocol and instantiated it

149
00:05:16,720 --> 00:05:19,600
with alexa top 500 sites and a set of

150
00:05:19,600 --> 00:05:21,520
login scripts that we manually created

151
00:05:21,520 --> 00:05:24,080
for each site the crawler relies on the

152
00:05:24,080 --> 00:05:26,240
pre-same site version of chrome which

153
00:05:26,240 --> 00:05:28,880
burns via ctp audits when a cookie that

154
00:05:28,880 --> 00:05:30,479
does not have an explicit same-set

155
00:05:30,479 --> 00:05:32,479
policy is attached to a cross-site

156
00:05:32,479 --> 00:05:34,960
request thus potentially breaking after

157
00:05:34,960 --> 00:05:36,960
the enforcement of the lags by default

158
00:05:36,960 --> 00:05:39,680
and our crawler collects these requests

159
00:05:39,680 --> 00:05:41,280
then we determine the types of

160
00:05:41,280 --> 00:05:43,280
third-party functionalities affected by

161
00:05:43,280 --> 00:05:45,360
acquiring the request url via the url

162
00:05:45,360 --> 00:05:48,000
categorization services such as the web

163
00:05:48,000 --> 00:05:50,400
shrinker api as well as the adblock easy

164
00:05:50,400 --> 00:05:52,720
list has black and hot block lists to

165
00:05:52,720 --> 00:05:54,639
account for the short-lived continuously

166
00:05:54,639 --> 00:05:57,120
changing advertisement domains

167
00:05:57,120 --> 00:05:58,880
finally we determine the exact

168
00:05:58,880 --> 00:06:00,880
functionality affected for a random

169
00:06:00,880 --> 00:06:03,280
subset and confirm breakage when cookies

170
00:06:03,280 --> 00:06:04,479
are moved

171
00:06:04,479 --> 00:06:06,400
now we performed the steps before the

172
00:06:06,400 --> 00:06:09,120
lack by default rollout uh however after

173
00:06:09,120 --> 00:06:10,960
the rollout we revisit the affected

174
00:06:10,960 --> 00:06:12,639
request to confirm whether the new

175
00:06:12,639 --> 00:06:14,080
policy has indeed broken the

176
00:06:14,080 --> 00:06:16,800
functionality

177
00:06:17,199 --> 00:06:19,199
so in total our crawling identified

178
00:06:19,199 --> 00:06:22,960
around 9k euro ads in 211 sites of alexa

179
00:06:22,960 --> 00:06:26,000
top 500 that supported the login feature

180
00:06:26,000 --> 00:06:28,160
and in use and in these urls the crawler

181
00:06:28,160 --> 00:06:31,440
collected around 22.9 k

182
00:06:31,440 --> 00:06:33,120
cross side requests without the same

183
00:06:33,120 --> 00:06:35,280
side cookie flag that are potentially

184
00:06:35,280 --> 00:06:36,639
affected

185
00:06:36,639 --> 00:06:38,400
the url categorization for these

186
00:06:38,400 --> 00:06:40,639
requests resulted in identification of

187
00:06:40,639 --> 00:06:42,400
32 different types of affected

188
00:06:42,400 --> 00:06:44,639
third-party functionalities such as

189
00:06:44,639 --> 00:06:46,880
technology in computing services like

190
00:06:46,880 --> 00:06:48,720
file sharing or live chat and business

191
00:06:48,720 --> 00:06:51,520
services like advertising and analytics

192
00:06:51,520 --> 00:06:53,120
and most importantly our breakage

193
00:06:53,120 --> 00:06:54,479
experiments

194
00:06:54,479 --> 00:06:56,319
revealed that functionality is

195
00:06:56,319 --> 00:06:58,880
implemented by 19 of the affected

196
00:06:58,880 --> 00:07:02,880
requests are broken which affects 17.5

197
00:07:02,880 --> 00:07:04,720
of the sites

198
00:07:04,720 --> 00:07:06,639
then interestingly the majority of these

199
00:07:06,639 --> 00:07:09,919
broken requests that is 77

200
00:07:09,919 --> 00:07:12,319
belong to online ads and user tracking

201
00:07:12,319 --> 00:07:15,120
functionalities

202
00:07:15,199 --> 00:07:17,120
coming to our third research question we

203
00:07:17,120 --> 00:07:19,039
intended to study how adequate and

204
00:07:19,039 --> 00:07:20,639
effective are same-side cookies to

205
00:07:20,639 --> 00:07:22,400
prevent cross-site attacks

206
00:07:22,400 --> 00:07:24,319
accordingly we systematically reviewed

207
00:07:24,319 --> 00:07:26,160
existing literature for threats against

208
00:07:26,160 --> 00:07:28,000
inside cookies that enable prostate

209
00:07:28,000 --> 00:07:30,000
attacks then we determine the threat

210
00:07:30,000 --> 00:07:32,160
severity by quantifying their prevalence

211
00:07:32,160 --> 00:07:33,360
in the y

212
00:07:33,360 --> 00:07:35,680
overall our systematic review identified

213
00:07:35,680 --> 00:07:37,759
seven threats and we also propose three

214
00:07:37,759 --> 00:07:40,160
new tracks and we can divide these uh

215
00:07:40,160 --> 00:07:42,479
ten threats into two categories first we

216
00:07:42,479 --> 00:07:44,080
have the tracks leveraging crosstalk

217
00:07:44,080 --> 00:07:46,800
requests not covered by the lack policy

218
00:07:46,800 --> 00:07:49,199
in second threats that are

219
00:07:49,199 --> 00:07:50,639
that use customer requests that are

220
00:07:50,639 --> 00:07:52,960
covered and protected by lux but this

221
00:07:52,960 --> 00:07:54,639
protection can be bypassed due to

222
00:07:54,639 --> 00:07:56,400
developers mistakes

223
00:07:56,400 --> 00:07:58,240
examples for the first category are

224
00:07:58,240 --> 00:08:00,160
playing stat changing get requests for c

225
00:08:00,160 --> 00:08:02,879
surf or abusing window properties uh

226
00:08:02,879 --> 00:08:04,879
side channels for information leakage

227
00:08:04,879 --> 00:08:06,800
and examples for the second category are

228
00:08:06,800 --> 00:08:08,479
for doing state changing post requests

229
00:08:08,479 --> 00:08:10,000
for c surf or

230
00:08:10,000 --> 00:08:12,240
a same site intro or intel page

231
00:08:12,240 --> 00:08:15,280
inconsistency now these are only

232
00:08:15,280 --> 00:08:17,360
some of the threats that i will

233
00:08:17,360 --> 00:08:19,919
exemplify in this presentation however

234
00:08:19,919 --> 00:08:21,759
please refer to our paper for more

235
00:08:21,759 --> 00:08:23,919
information about the remaining five

236
00:08:23,919 --> 00:08:27,520
threads not in this presentation

237
00:08:27,520 --> 00:08:29,199
so let's have a look at the first thread

238
00:08:29,199 --> 00:08:31,280
we know that top level get requests are

239
00:08:31,280 --> 00:08:33,360
not covered by the lax policy and

240
00:08:33,360 --> 00:08:35,279
developers may receive get requests to

241
00:08:35,279 --> 00:08:36,719
implement security sensitive

242
00:08:36,719 --> 00:08:38,799
state-changing operations such as

243
00:08:38,799 --> 00:08:41,200
removing the resource as such attackers

244
00:08:41,200 --> 00:08:43,039
can obtain c surf by replaying sea

245
00:08:43,039 --> 00:08:45,600
change and get requests for example by

246
00:08:45,600 --> 00:08:48,720
up using the window.open javascript api

247
00:08:48,720 --> 00:08:50,480
now to quantify the fraction of state

248
00:08:50,480 --> 00:08:52,640
changing requests that are get based we

249
00:08:52,640 --> 00:08:55,600
crawled the alexa top 1000 sites

250
00:08:55,600 --> 00:08:59,839
identifying 42.4 5k urls then we located

251
00:08:59,839 --> 00:09:02,320
all the html forms with the c serp token

252
00:09:02,320 --> 00:09:03,519
which is an indication that the

253
00:09:03,519 --> 00:09:05,680
operation of the form is state changing

254
00:09:05,680 --> 00:09:07,440
and then we check if the request method

255
00:09:07,440 --> 00:09:09,360
in the form is kept accordingly we

256
00:09:09,360 --> 00:09:11,839
determine the lower bound for get based

257
00:09:11,839 --> 00:09:14,959
state changes finally we examine the

258
00:09:14,959 --> 00:09:16,800
correctness of the system verification

259
00:09:16,800 --> 00:09:20,000
for a random subset of the requests

260
00:09:20,000 --> 00:09:23,200
so in total um our analysis identified

261
00:09:23,200 --> 00:09:25,920
6.9 k stage engine request and we

262
00:09:25,920 --> 00:09:28,080
observe that 10.3 percent of them are

263
00:09:28,080 --> 00:09:30,959
get based within 88 applications

264
00:09:30,959 --> 00:09:34,160
we discovered that 2.6 of the get-based

265
00:09:34,160 --> 00:09:35,360
requests are forgivable forged above

266
00:09:35,360 --> 00:09:38,160
d240c serve token verification which

267
00:09:38,160 --> 00:09:40,320
affects popular sites like pixiv and

268
00:09:40,320 --> 00:09:42,000
mailchimp where attackers can delete

269
00:09:42,000 --> 00:09:44,160
user schedules or changes and settings

270
00:09:44,160 --> 00:09:46,880
respectively

271
00:09:47,120 --> 00:09:49,040
another thread is forging post requests

272
00:09:49,040 --> 00:09:51,680
we get to bypass a lack protection so

273
00:09:51,680 --> 00:09:53,360
again assume that we have the two sites

274
00:09:53,360 --> 00:09:55,519
attack.com and target.com and the attack

275
00:09:55,519 --> 00:09:57,279
page sends a post request to the target

276
00:09:57,279 --> 00:09:59,360
site and because of the lags by default

277
00:09:59,360 --> 00:10:00,880
the browser will not include the cookie

278
00:10:00,880 --> 00:10:03,040
in this request and even if it did

279
00:10:03,040 --> 00:10:05,519
because the application checks the csr

280
00:10:05,519 --> 00:10:08,399
tokens for the post request um which in

281
00:10:08,399 --> 00:10:11,040
this case is a false token f uh the web

282
00:10:11,040 --> 00:10:12,800
app will reject the request correctly

283
00:10:12,800 --> 00:10:14,880
with the 404 status code

284
00:10:14,880 --> 00:10:17,040
however if now the attacker submits the

285
00:10:17,040 --> 00:10:19,040
same request with a different http verb

286
00:10:19,040 --> 00:10:21,040
that is get then the browser will

287
00:10:21,040 --> 00:10:23,440
include the last copy in the request and

288
00:10:23,440 --> 00:10:25,680
additionally this web app only verifies

289
00:10:25,680 --> 00:10:28,320
user tokens for post

290
00:10:28,320 --> 00:10:30,560
requests thus the attacker achieves a

291
00:10:30,560 --> 00:10:32,800
successful c surf

292
00:10:32,800 --> 00:10:34,640
now to quantify the prevalence of this

293
00:10:34,640 --> 00:10:36,959
issue we used our previous data set of

294
00:10:36,959 --> 00:10:40,480
the crowd of alexa 1k sites

295
00:10:40,480 --> 00:10:42,959
and then selected one random request for

296
00:10:42,959 --> 00:10:44,480
each post

297
00:10:44,480 --> 00:10:46,640
post request in the data set and we

298
00:10:46,640 --> 00:10:48,720
check this susceptibility to cserv by

299
00:10:48,720 --> 00:10:50,640
replaying the request using a different

300
00:10:50,640 --> 00:10:52,880
http method that is get

301
00:10:52,880 --> 00:10:55,120
so in total we discovered that around

302
00:10:55,120 --> 00:10:57,200
1.5 percent of the state-changing post

303
00:10:57,200 --> 00:10:59,120
requests are forgivable with gap

304
00:10:59,120 --> 00:11:01,360
compromising the database integrity in

305
00:11:01,360 --> 00:11:03,920
popular web applications like mdb and

306
00:11:03,920 --> 00:11:06,399
meetup

307
00:11:07,519 --> 00:11:08,480
also

308
00:11:08,480 --> 00:11:10,160
in this paper we propose three new

309
00:11:10,160 --> 00:11:11,760
tracks that are caused by developers

310
00:11:11,760 --> 00:11:13,680
mistakes and can downgrade the same side

311
00:11:13,680 --> 00:11:14,800
policy

312
00:11:14,800 --> 00:11:17,040
the first issue is same style cookie

313
00:11:17,040 --> 00:11:19,279
intra paging consistency and it arises

314
00:11:19,279 --> 00:11:21,040
from web applications that redundant

315
00:11:21,040 --> 00:11:23,279
cookies to support incompatible clients

316
00:11:23,279 --> 00:11:25,120
but these cookies have different same

317
00:11:25,120 --> 00:11:27,360
side policies for example here we have

318
00:11:27,360 --> 00:11:29,440
the tripc legacy cookie without the same

319
00:11:29,440 --> 00:11:31,440
side attribute for incompatible plans

320
00:11:31,440 --> 00:11:33,200
and then three pc cookie with samsaric

321
00:11:33,200 --> 00:11:35,920
restrict for modern clients for a victim

322
00:11:35,920 --> 00:11:37,839
visiting a c-serve attack page using the

323
00:11:37,839 --> 00:11:39,920
modern browser the trippy security is

324
00:11:39,920 --> 00:11:41,920
never sent to the target site but the

325
00:11:41,920 --> 00:11:44,399
tripsy legacy is by passing the same

326
00:11:44,399 --> 00:11:45,920
side policy

327
00:11:45,920 --> 00:11:48,800
this issue affects around 1.4 percent of

328
00:11:48,800 --> 00:11:51,519
the top 500 sites such as github cnn and

329
00:11:51,519 --> 00:11:52,800
yahoo

330
00:11:52,800 --> 00:11:55,519
another similar threat is same cookie

331
00:11:55,519 --> 00:11:57,680
inter page inconsistency which arises

332
00:11:57,680 --> 00:11:59,680
when developed sets two different

333
00:11:59,680 --> 00:12:01,920
policies for the same guti across two

334
00:12:01,920 --> 00:12:03,680
different web pages

335
00:12:03,680 --> 00:12:05,440
and this issue affects three point three

336
00:12:05,440 --> 00:12:07,519
percent of the top 500 sites such as

337
00:12:07,519 --> 00:12:09,680
aliexpress and demo

338
00:12:09,680 --> 00:12:11,519
and the last issue is same site cookie

339
00:12:11,519 --> 00:12:13,839
user agent inconsistency which arises

340
00:12:13,839 --> 00:12:15,440
when the web app sets two different

341
00:12:15,440 --> 00:12:17,519
policies for cookies based on the

342
00:12:17,519 --> 00:12:20,000
incoming request user agent for example

343
00:12:20,000 --> 00:12:22,639
mobile versus desktop and this requires

344
00:12:22,639 --> 00:12:25,040
this vulnerability affects 1.8 percent

345
00:12:25,040 --> 00:12:28,160
of the alex i have a million sites 138

346
00:12:28,160 --> 00:12:31,839
of which are within the top 1k ranking

347
00:12:31,839 --> 00:12:33,920
okay so these were only some example of

348
00:12:33,920 --> 00:12:35,920
the chats um and measurements in the

349
00:12:35,920 --> 00:12:38,480
paper but the point is what did we learn

350
00:12:38,480 --> 00:12:40,480
from our experiments about the adequacy

351
00:12:40,480 --> 00:12:42,720
of same-side cookies so when looking at

352
00:12:42,720 --> 00:12:44,639
the crusher request context we have the

353
00:12:44,639 --> 00:12:46,800
contexts that are protected by same-side

354
00:12:46,800 --> 00:12:48,880
policies like lacks and the context that

355
00:12:48,880 --> 00:12:50,240
are used for security-sensitive

356
00:12:50,240 --> 00:12:52,399
operations in web applications

357
00:12:52,399 --> 00:12:54,240
the great thing about samsung cookies is

358
00:12:54,240 --> 00:12:55,920
that they significantly reduce the

359
00:12:55,920 --> 00:12:57,760
attack surface for cross-site attacks

360
00:12:57,760 --> 00:12:59,519
which is fantastic

361
00:12:59,519 --> 00:13:01,519
however as we have demonstrated there is

362
00:13:01,519 --> 00:13:03,120
a mismatch between cross-request

363
00:13:03,120 --> 00:13:05,519
contacts covered by lux and the ones

364
00:13:05,519 --> 00:13:07,440
used by websites to implement security

365
00:13:07,440 --> 00:13:09,760
sensitive operations

366
00:13:09,760 --> 00:13:11,920
finally even when using lacks restrict

367
00:13:11,920 --> 00:13:13,760
policies much of their effectiveness

368
00:13:13,760 --> 00:13:15,760
depends on developers who may introduce

369
00:13:15,760 --> 00:13:18,320
inconsistent or conflicting policies

370
00:13:18,320 --> 00:13:21,519
leading to same-set possible passes

371
00:13:21,519 --> 00:13:23,600
and in this complex landscape we also

372
00:13:23,600 --> 00:13:25,440
need to factor in corner case in

373
00:13:25,440 --> 00:13:27,519
consistent behaviors of browsers and web

374
00:13:27,519 --> 00:13:28,560
frameworks

375
00:13:28,560 --> 00:13:30,639
in particular our analysis of 14

376
00:13:30,639 --> 00:13:32,000
different browsers revealed that they

377
00:13:32,000 --> 00:13:34,320
exhibit seven divergent behaviors with

378
00:13:34,320 --> 00:13:36,079
respect to the same side posts for

379
00:13:36,079 --> 00:13:38,160
instance when we have sensitive valid or

380
00:13:38,160 --> 00:13:39,839
essentially called non-cookies without

381
00:13:39,839 --> 00:13:42,240
the secure plaque now for timing reasons

382
00:13:42,240 --> 00:13:43,760
please refer to the paper for the

383
00:13:43,760 --> 00:13:45,600
individual browser behaviors but the

384
00:13:45,600 --> 00:13:47,839
point is as of today web application

385
00:13:47,839 --> 00:13:49,680
developers need to be aware of all these

386
00:13:49,680 --> 00:13:52,160
seven behaviors if they want a website

387
00:13:52,160 --> 00:13:54,320
to work with all these browsers and

388
00:13:54,320 --> 00:13:56,480
provide the same security guarantees and

389
00:13:56,480 --> 00:13:58,480
one way to achieve that is using user

390
00:13:58,480 --> 00:14:00,639
agent dependent same sub policies but as

391
00:14:00,639 --> 00:14:02,000
we have demonstrated header

392
00:14:02,000 --> 00:14:03,760
inconsistencies can be the root cause of

393
00:14:03,760 --> 00:14:05,199
vulnerabilities

394
00:14:05,199 --> 00:14:07,199
finally even when browsers enforce a

395
00:14:07,199 --> 00:14:09,519
default lacks policy reframe workspace

396
00:14:09,519 --> 00:14:11,519
in apis can downgrade it to none by

397
00:14:11,519 --> 00:14:14,160
default specifically we analyze the top

398
00:14:14,160 --> 00:14:15,760
five frameworks of top five web

399
00:14:15,760 --> 00:14:17,600
programming languages and observe that

400
00:14:17,600 --> 00:14:20,079
24 of them revert the lacks by default

401
00:14:20,079 --> 00:14:22,399
protection by implicitly setting the

402
00:14:22,399 --> 00:14:24,639
non-policy when the developer uses the

403
00:14:24,639 --> 00:14:27,519
framework set cookie built-in apis again

404
00:14:27,519 --> 00:14:29,360
for more information please refer to the

405
00:14:29,360 --> 00:14:31,839
paper

406
00:14:31,839 --> 00:14:33,600
in summary in this paper we first

407
00:14:33,600 --> 00:14:35,600
studied the adoption of sensa cookies

408
00:14:35,600 --> 00:14:37,600
measuring how website developers adapted

409
00:14:37,600 --> 00:14:40,079
to the new lacks by default policy

410
00:14:40,079 --> 00:14:41,680
then we showed that functionality is

411
00:14:41,680 --> 00:14:43,920
implemented by 19 of the affected

412
00:14:43,920 --> 00:14:45,600
requests are broken the majority of

413
00:14:45,600 --> 00:14:47,760
which are for online ads

414
00:14:47,760 --> 00:14:49,440
third we quantified the fraction of the

415
00:14:49,440 --> 00:14:51,600
attack surface not protected by lacks by

416
00:14:51,600 --> 00:14:53,440
default and showed that there is a

417
00:14:53,440 --> 00:14:55,279
significant mismatch between request

418
00:14:55,279 --> 00:14:57,680
context protected by lux and the context

419
00:14:57,680 --> 00:14:59,440
used by websites implements security

420
00:14:59,440 --> 00:15:01,680
sensitive operations and finally we

421
00:15:01,680 --> 00:15:03,120
showed that browsers diverge when

422
00:15:03,120 --> 00:15:06,160
enforcing the same psyche policy and 24

423
00:15:06,160 --> 00:15:08,399
of the top 25 frameworks can revert the

424
00:15:08,399 --> 00:15:10,240
lags by default protection

425
00:15:10,240 --> 00:15:12,000
when the developer uses the frameworks

426
00:15:12,000 --> 00:15:13,600
built-in apis

427
00:15:13,600 --> 00:15:15,120
and with this i would like to conclude

428
00:15:15,120 --> 00:15:16,800
my talk thanks a lot for your attention

429
00:15:16,800 --> 00:15:18,160
and if you have any questions please

430
00:15:18,160 --> 00:15:20,260
don't hesitate to ask

431
00:15:20,260 --> 00:15:26,240
[Applause]

432
00:15:26,240 --> 00:15:27,600
thanks for the talk

433
00:15:27,600 --> 00:15:30,079
questions

434
00:15:32,320 --> 00:15:34,399
uh you mentioned that uh sorry first of

435
00:15:34,399 --> 00:15:37,360
all emergency washington nice talk i

436
00:15:37,360 --> 00:15:39,120
really learned a lot

437
00:15:39,120 --> 00:15:40,320
my question is about breakage you

438
00:15:40,320 --> 00:15:41,839
mentioned that

439
00:15:41,839 --> 00:15:43,199
in some cases

440
00:15:43,199 --> 00:15:45,680
the same side policy causes breakage

441
00:15:45,680 --> 00:15:47,600
do you have any idea of how much

442
00:15:47,600 --> 00:15:49,040
breakage there is like and what do you

443
00:15:49,040 --> 00:15:51,360
mean by breakage does it mean that the

444
00:15:51,360 --> 00:15:53,600
website is unusable or some content is

445
00:15:53,600 --> 00:15:54,800
missing but

446
00:15:54,800 --> 00:15:56,959
the major functionality is still

447
00:15:56,959 --> 00:15:58,560
accessible

448
00:15:58,560 --> 00:16:01,279
yes um great question indeed

449
00:16:01,279 --> 00:16:02,079
so

450
00:16:02,079 --> 00:16:03,440
basically

451
00:16:03,440 --> 00:16:05,120
what we observed was that nineteen

452
00:16:05,120 --> 00:16:07,920
percent of the affected functionalities

453
00:16:07,920 --> 00:16:09,920
are essentially broken and broken in the

454
00:16:09,920 --> 00:16:11,519
sense that the functionality does not

455
00:16:11,519 --> 00:16:13,920
work they have service discontinuity so

456
00:16:13,920 --> 00:16:16,399
for example to give an exam like a

457
00:16:16,399 --> 00:16:19,199
concrete for example are single sign-on

458
00:16:19,199 --> 00:16:21,680
implementations so for example

459
00:16:21,680 --> 00:16:26,160
websites uh use single sign on i like

460
00:16:26,160 --> 00:16:29,680
frameworks like open id connect or saml

461
00:16:29,680 --> 00:16:32,880
who basically

462
00:16:33,279 --> 00:16:36,720
try to optimize user experience by

463
00:16:36,720 --> 00:16:39,360
you know including session cookies

464
00:16:39,360 --> 00:16:40,399
you know when you want to

465
00:16:40,399 --> 00:16:42,079
re-authenticate

466
00:16:42,079 --> 00:16:44,079
to the cookie so if you already have a

467
00:16:44,079 --> 00:16:45,839
cookie

468
00:16:45,839 --> 00:16:47,600
and it is valid they basically want to

469
00:16:47,600 --> 00:16:48,959
optimize the user experience by

470
00:16:48,959 --> 00:16:50,639
including the cookie

471
00:16:50,639 --> 00:16:52,720
and these communications are essentially

472
00:16:52,720 --> 00:16:55,199
uh typically implemented by cross-site

473
00:16:55,199 --> 00:16:56,959
post requests such as

474
00:16:56,959 --> 00:16:59,440
cross-site post

475
00:16:59,440 --> 00:17:01,600
forms or asynchronous

476
00:17:01,600 --> 00:17:03,120
post requests

477
00:17:03,120 --> 00:17:05,359
and because of the new lacks by default

478
00:17:05,359 --> 00:17:08,079
policy these um you know cookies will

479
00:17:08,079 --> 00:17:09,439
not be attached to these requests

480
00:17:09,439 --> 00:17:11,280
contacts plus

481
00:17:11,280 --> 00:17:13,359
you know single sign-on will not work

482
00:17:13,359 --> 00:17:15,280
for instance

483
00:17:15,280 --> 00:17:16,559
right and you mentioned a lot of

484
00:17:16,559 --> 00:17:18,240
packages specific to advertising and

485
00:17:18,240 --> 00:17:21,839
tracking services do you have

