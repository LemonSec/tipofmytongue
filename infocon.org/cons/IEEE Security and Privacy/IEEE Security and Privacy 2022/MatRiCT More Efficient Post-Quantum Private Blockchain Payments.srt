1
00:00:00,080 --> 00:00:01,599
okay

2
00:00:01,599 --> 00:00:04,319
so my name is muhammad and our work is

3
00:00:04,319 --> 00:00:06,560
about blockchain payments and making

4
00:00:06,560 --> 00:00:09,120
them post quantum and private and we

5
00:00:09,120 --> 00:00:11,360
call our proposal matrix plus

6
00:00:11,360 --> 00:00:12,639
and this is a joint between ron

7
00:00:12,639 --> 00:00:14,400
steinfeld and raymond saw from monash

8
00:00:14,400 --> 00:00:16,160
university

9
00:00:16,160 --> 00:00:18,320
so let's start with looking at a kind of

10
00:00:18,320 --> 00:00:19,840
like a standard non-conversation

11
00:00:19,840 --> 00:00:20,880
transaction that may happen on

12
00:00:20,880 --> 00:00:22,240
blockchain for example you may imagine

13
00:00:22,240 --> 00:00:24,480
bitcoin transaction so we have a user

14
00:00:24,480 --> 00:00:26,560
alice here she has a bunch of accounts

15
00:00:26,560 --> 00:00:27,920
let's say account one and account two

16
00:00:27,920 --> 00:00:30,640
with some public keys and when she wants

17
00:00:30,640 --> 00:00:32,479
let's say five dollars to bob what she

18
00:00:32,479 --> 00:00:34,320
does basically is to broadcast a message

19
00:00:34,320 --> 00:00:36,399
saying okay i'm sending five dollars to

20
00:00:36,399 --> 00:00:38,879
bob and she would sign this transaction

21
00:00:38,879 --> 00:00:39,680
okay

22
00:00:39,680 --> 00:00:42,079
and we would have some uh number of

23
00:00:42,079 --> 00:00:44,079
verifiers in the system i'm just going

24
00:00:44,079 --> 00:00:45,920
to represent it by a single verifier for

25
00:00:45,920 --> 00:00:47,920
simplicity here so they would take this

26
00:00:47,920 --> 00:00:49,120
transaction

27
00:00:49,120 --> 00:00:50,320
and they would

28
00:00:50,320 --> 00:00:51,760
for example check the validity of the

29
00:00:51,760 --> 00:00:54,239
transaction what they would do is they

30
00:00:54,239 --> 00:00:55,600
would check whether the signature is

31
00:00:55,600 --> 00:00:56,559
correct

32
00:00:56,559 --> 00:00:58,960
and that the input accounts are unspent

33
00:00:58,960 --> 00:01:00,800
and then the balance is preserved okay

34
00:01:00,800 --> 00:01:02,559
so in this setting for example

35
00:01:02,559 --> 00:01:04,159
checking the balance preservation is

36
00:01:04,159 --> 00:01:06,720
quite simple because we just check that

37
00:01:06,720 --> 00:01:09,360
alice is sending two plus three dollars

38
00:01:09,360 --> 00:01:11,280
let's say and what was receiving five

39
00:01:11,280 --> 00:01:13,520
dollars which is just easy to check

40
00:01:13,520 --> 00:01:14,720
because everything is public in the

41
00:01:14,720 --> 00:01:15,840
setting

42
00:01:15,840 --> 00:01:17,439
and the problem from the cryptographic

43
00:01:17,439 --> 00:01:19,920
perspective is that this transaction by

44
00:01:19,920 --> 00:01:21,680
itself is leaking a lot of sensitive

45
00:01:21,680 --> 00:01:23,680
information so everyone can see the

46
00:01:23,680 --> 00:01:26,400
whole history of who sent how much money

47
00:01:26,400 --> 00:01:27,439
to whom

48
00:01:27,439 --> 00:01:28,479
okay

49
00:01:28,479 --> 00:01:30,400
and we of course want to kind of

50
00:01:30,400 --> 00:01:32,159
overcome this issue

51
00:01:32,159 --> 00:01:34,159
and we would basically want to hide all

52
00:01:34,159 --> 00:01:36,000
this sensitive information

53
00:01:36,000 --> 00:01:36,799
okay

54
00:01:36,799 --> 00:01:38,960
and as soon as we do this then things

55
00:01:38,960 --> 00:01:41,119
get complicated right so now for example

56
00:01:41,119 --> 00:01:42,320
how do we check that the balance is

57
00:01:42,320 --> 00:01:44,240
preserved because the verifiers do not

58
00:01:44,240 --> 00:01:46,079
see how much money alice has and how

59
00:01:46,079 --> 00:01:47,759
much money she is trying to spend right

60
00:01:47,759 --> 00:01:49,119
so she might be trying to spend let's

61
00:01:49,119 --> 00:01:51,119
say minus ten dollars right because you

62
00:01:51,119 --> 00:01:52,560
don't see it

63
00:01:52,560 --> 00:01:55,200
now how do you actually realize that

64
00:01:55,200 --> 00:01:58,159
the users the spenders are not cheating

65
00:01:58,159 --> 00:02:00,640
and this is achieved by asking the users

66
00:02:00,640 --> 00:02:02,399
to do more than just sending the

67
00:02:02,399 --> 00:02:04,640
transaction they also send a what's

68
00:02:04,640 --> 00:02:06,479
called a zero knowledge proof which

69
00:02:06,479 --> 00:02:08,479
basically proves without leaking the

70
00:02:08,479 --> 00:02:10,239
sensitive information that the

71
00:02:10,239 --> 00:02:11,760
transaction is valid and there is no

72
00:02:11,760 --> 00:02:14,560
kind of like fraudulent action going on

73
00:02:14,560 --> 00:02:16,239
okay

74
00:02:16,239 --> 00:02:18,560
and there is a concrete instantiation of

75
00:02:18,560 --> 00:02:20,160
this idea that's called ring

76
00:02:20,160 --> 00:02:21,760
confidential transactions that was

77
00:02:21,760 --> 00:02:23,680
introduced a few years back which is

78
00:02:23,680 --> 00:02:26,400
shortened as ring ct and in this

79
00:02:26,400 --> 00:02:28,959
protocol a ring signature is used to

80
00:02:28,959 --> 00:02:31,280
hide the senders or the spender's

81
00:02:31,280 --> 00:02:33,440
identity and also a homomorphic

82
00:02:33,440 --> 00:02:34,879
commitment scheme is used to hide the

83
00:02:34,879 --> 00:02:36,959
transaction amount okay

84
00:02:36,959 --> 00:02:38,480
and this construction

85
00:02:38,480 --> 00:02:40,080
is deployed in the monarch

86
00:02:40,080 --> 00:02:42,319
cryptocurrency and monero uses stealth

87
00:02:42,319 --> 00:02:44,319
addresses to hide the

88
00:02:44,319 --> 00:02:46,720
recipient identity

89
00:02:46,720 --> 00:02:48,400
okay

90
00:02:48,400 --> 00:02:51,280
so what we do in our work is to kind of

91
00:02:51,280 --> 00:02:53,599
take this framework and move it into the

92
00:02:53,599 --> 00:02:55,920
blockchain setting with uh significant

93
00:02:55,920 --> 00:02:57,519
practical efficiency

94
00:02:57,519 --> 00:02:59,920
and to start with we introduce a new

95
00:02:59,920 --> 00:03:01,599
technical toolkit for lattice-based

96
00:03:01,599 --> 00:03:03,840
cryptography which is a one of the most

97
00:03:03,840 --> 00:03:05,360
prominent candidates

98
00:03:05,360 --> 00:03:08,000
for quantum safe cryptography okay and

99
00:03:08,000 --> 00:03:09,519
we believe these techniques to be widely

100
00:03:09,519 --> 00:03:11,599
applicable especially in the context of

101
00:03:11,599 --> 00:03:13,760
lattice based on knowledge proofs and a

102
00:03:13,760 --> 00:03:16,080
part of the these techniques involves a

103
00:03:16,080 --> 00:03:18,239
new way to construct these kind of like

104
00:03:18,239 --> 00:03:20,480
challenge sets which are basically kind

105
00:03:20,480 --> 00:03:22,319
of like core things that you need to do

106
00:03:22,319 --> 00:03:23,760
when you are designing a zero knowledge

107
00:03:23,760 --> 00:03:26,239
proof in general okay and we believe our

108
00:03:26,239 --> 00:03:28,480
approach is optimal in the kind of like

109
00:03:28,480 --> 00:03:30,000
the strategy that's taken because our

110
00:03:30,000 --> 00:03:31,680
approach is probabilistic and in that

111
00:03:31,680 --> 00:03:35,519
setting we get some optimal results

112
00:03:35,519 --> 00:03:38,000
so using these new techniques and some

113
00:03:38,000 --> 00:03:40,159
more kind of like additional techniques

114
00:03:40,159 --> 00:03:42,480
outside of just the that is crypto

115
00:03:42,480 --> 00:03:45,680
setting we introduced matrix plus

116
00:03:45,680 --> 00:03:47,360
which is which builds on our earlier

117
00:03:47,360 --> 00:03:51,040
work at ccs19 that was called matrix

118
00:03:51,040 --> 00:03:52,720
but matrix plus has significantly

119
00:03:52,720 --> 00:03:55,200
smaller proofs public keys and system

120
00:03:55,200 --> 00:03:57,599
parameters okay and we have an efficient

121
00:03:57,599 --> 00:03:59,760
implementation in cc

122
00:03:59,760 --> 00:04:01,280
it's open source i'm going to give you

123
00:04:01,280 --> 00:04:02,720
the link at the end

124
00:04:02,720 --> 00:04:05,280
and as in matrix matrix plus also

125
00:04:05,280 --> 00:04:07,360
supports an optional auditability

126
00:04:07,360 --> 00:04:08,239
feature

127
00:04:08,239 --> 00:04:09,840
where you can introduce some authorities

128
00:04:09,840 --> 00:04:11,840
into the system that can basically

129
00:04:11,840 --> 00:04:14,400
de-anonymize users in case for example

130
00:04:14,400 --> 00:04:16,560
there is a illegal activity going on

131
00:04:16,560 --> 00:04:17,759
okay

132
00:04:17,759 --> 00:04:19,519
so we get this kind of like accountable

133
00:04:19,519 --> 00:04:21,440
analytics

134
00:04:21,440 --> 00:04:23,120
and as by-products

135
00:04:23,120 --> 00:04:25,520
we have efficient post quantum ring and

136
00:04:25,520 --> 00:04:27,680
group signatures which may be of

137
00:04:27,680 --> 00:04:30,160
independent interest for other higher

138
00:04:30,160 --> 00:04:32,720
level protocols

139
00:04:32,720 --> 00:04:34,400
right so i'm not going to get into the

140
00:04:34,400 --> 00:04:36,400
technical details but i wanted to give

141
00:04:36,400 --> 00:04:38,560
you a kind of like a very high level

142
00:04:38,560 --> 00:04:39,600
idea

143
00:04:39,600 --> 00:04:41,840
of how we do the balance proof inside

144
00:04:41,840 --> 00:04:43,360
this matrix plus which is a core

145
00:04:43,360 --> 00:04:46,080
component okay

146
00:04:46,080 --> 00:04:47,759
and the whole protocol is quite involved

147
00:04:47,759 --> 00:04:49,280
and complicated so i'll refer you to the

148
00:04:49,280 --> 00:04:51,360
paper for them you have all the security

149
00:04:51,360 --> 00:04:54,080
proofs and so on in the paper as well

150
00:04:54,080 --> 00:04:55,040
okay

151
00:04:55,040 --> 00:04:56,960
so as i mentioned so balance proof is a

152
00:04:56,960 --> 00:04:59,280
core part of basically electronic

153
00:04:59,280 --> 00:05:00,639
payments private electronic payments

154
00:05:00,639 --> 00:05:02,320
which includes blockchain payment and

155
00:05:02,320 --> 00:05:04,560
what we want to basically do is to prove

156
00:05:04,560 --> 00:05:06,400
some some relation okay so we want to

157
00:05:06,400 --> 00:05:07,600
prove that

158
00:05:07,600 --> 00:05:09,759
sum of some input amounts equals some of

159
00:05:09,759 --> 00:05:11,680
some output amounts because we are just

160
00:05:11,680 --> 00:05:13,840
integers okay but of course we don't

161
00:05:13,840 --> 00:05:15,759
want to leak what the individual amounts

162
00:05:15,759 --> 00:05:17,520
are or what the total is

163
00:05:17,520 --> 00:05:18,560
okay

164
00:05:18,560 --> 00:05:21,680
so the center idea to do this uses

165
00:05:21,680 --> 00:05:23,840
homomorphic commitments and this

166
00:05:23,840 --> 00:05:25,600
property or homomorphic property means

167
00:05:25,600 --> 00:05:28,240
that if you commit to a and commit to b

168
00:05:28,240 --> 00:05:30,240
you sum up the commitments then you get

169
00:05:30,240 --> 00:05:32,000
a commitment to a plus b

170
00:05:32,000 --> 00:05:34,479
okay so using this homomorphic property

171
00:05:34,479 --> 00:05:36,240
you can easily realize what you want to

172
00:05:36,240 --> 00:05:38,240
do right because basically instead of

173
00:05:38,240 --> 00:05:40,320
operating on the actual amounts you just

174
00:05:40,320 --> 00:05:42,080
operate on the committed amounts right

175
00:05:42,080 --> 00:05:44,000
so you sum up the commitments of the

176
00:05:44,000 --> 00:05:45,840
output amounts subtract of the

177
00:05:45,840 --> 00:05:47,759
commitments of the input amounts and

178
00:05:47,759 --> 00:05:49,199
this should give you a commitment to

179
00:05:49,199 --> 00:05:51,759
zero if the balance is preserved and you

180
00:05:51,759 --> 00:05:53,440
approve this relation

181
00:05:53,440 --> 00:05:55,280
using a kind of like a standard zero

182
00:05:55,280 --> 00:05:56,400
knowledge group

183
00:05:56,400 --> 00:05:57,360
okay

184
00:05:57,360 --> 00:05:59,680
and the drawback of this approach is

185
00:05:59,680 --> 00:06:01,520
that this doesn't work well in the

186
00:06:01,520 --> 00:06:03,600
lattice setting because these amounts

187
00:06:03,600 --> 00:06:05,280
are something like 64-bit values which

188
00:06:05,280 --> 00:06:06,639
are really large for lattice-based

189
00:06:06,639 --> 00:06:08,479
cryptography so we want to use much

190
00:06:08,479 --> 00:06:09,919
smaller values in the lattice-based

191
00:06:09,919 --> 00:06:12,880
script or something like maybe 32-bits

192
00:06:12,880 --> 00:06:14,880
and if you want to use such large

193
00:06:14,880 --> 00:06:17,120
messages then you need to use very large

194
00:06:17,120 --> 00:06:19,120
system parameters which then leads to a

195
00:06:19,120 --> 00:06:21,199
very significant overhead in terms of

196
00:06:21,199 --> 00:06:24,960
both computation and communication

197
00:06:25,759 --> 00:06:26,479
so

198
00:06:26,479 --> 00:06:29,280
in the earlier matrix paper there was a

199
00:06:29,280 --> 00:06:31,360
new idea to realize the balance proof

200
00:06:31,360 --> 00:06:34,080
without involving such large integer

201
00:06:34,080 --> 00:06:37,039
values like 64 bits okay so i'll try to

202
00:06:37,039 --> 00:06:38,880
quantitate high level id of this without

203
00:06:38,880 --> 00:06:41,199
again going into very technical details

204
00:06:41,199 --> 00:06:43,360
so let's suppose we have these four

205
00:06:43,360 --> 00:06:45,680
amounts like two inputs and two outputs

206
00:06:45,680 --> 00:06:47,120
for simplicity

207
00:06:47,120 --> 00:06:49,360
and we are writing them in let's say

208
00:06:49,360 --> 00:06:51,039
bits so you can use any base that you

209
00:06:51,039 --> 00:06:52,960
want you can use also use base 10 but

210
00:06:52,960 --> 00:06:55,360
suppose they are just bits okay so if we

211
00:06:55,360 --> 00:06:57,919
sum them up they get we get both the

212
00:06:57,919 --> 00:06:59,039
blue

213
00:06:59,039 --> 00:07:01,360
output at both ends okay because they

214
00:07:01,360 --> 00:07:02,880
are the same

215
00:07:02,880 --> 00:07:04,720
and if you were to perform a

216
00:07:04,720 --> 00:07:06,160
kind of like a standard school book

217
00:07:06,160 --> 00:07:08,160
edition what you would do is you take

218
00:07:08,160 --> 00:07:10,800
the first two bits right of the two

219
00:07:10,800 --> 00:07:11,680
inputs

220
00:07:11,680 --> 00:07:13,759
and then you would add them up and if

221
00:07:13,759 --> 00:07:15,120
there is any carry value you would move

222
00:07:15,120 --> 00:07:17,680
that to the next digit okay and then you

223
00:07:17,680 --> 00:07:19,280
add up the next digits together with the

224
00:07:19,280 --> 00:07:21,440
carry if there is any carry you move

225
00:07:21,440 --> 00:07:23,120
that to the next digit okay so you keep

226
00:07:23,120 --> 00:07:24,479
going like this

227
00:07:24,479 --> 00:07:25,759
and you can do the same thing at the

228
00:07:25,759 --> 00:07:27,440
other end which may involve some other

229
00:07:27,440 --> 00:07:30,000
carries okay so this is the standard

230
00:07:30,000 --> 00:07:32,160
edition school book addition

231
00:07:32,160 --> 00:07:33,599
now if we kind of

232
00:07:33,599 --> 00:07:34,960
uh

233
00:07:34,960 --> 00:07:36,479
switch the additional operation that we

234
00:07:36,479 --> 00:07:39,759
do to a digit-wise vector addition okay

235
00:07:39,759 --> 00:07:41,520
now we there is no

236
00:07:41,520 --> 00:07:43,599
carry involved and what we are doing is

237
00:07:43,599 --> 00:07:46,000
just component wise addition

238
00:07:46,000 --> 00:07:49,440
without any carries okay and now in this

239
00:07:49,440 --> 00:07:51,599
setting the two results that we get may

240
00:07:51,599 --> 00:07:53,440
be different and it will very likely be

241
00:07:53,440 --> 00:07:54,960
going to be different unless there are

242
00:07:54,960 --> 00:07:56,240
no queries

243
00:07:56,240 --> 00:07:57,199
okay

244
00:07:57,199 --> 00:07:59,440
but then the idea that was used in

245
00:07:59,440 --> 00:08:01,039
matrix is that

246
00:08:01,039 --> 00:08:03,120
you can introduce the carries into your

247
00:08:03,120 --> 00:08:05,280
system as an additional vector

248
00:08:05,280 --> 00:08:06,240
right

249
00:08:06,240 --> 00:08:08,319
and now with this additional vectors the

250
00:08:08,319 --> 00:08:10,560
final result is going to be the same at

251
00:08:10,560 --> 00:08:13,280
both ends okay even though the

252
00:08:13,280 --> 00:08:14,960
addition of the inputs and outputs are

253
00:08:14,960 --> 00:08:16,639
different when you introduce the carries

254
00:08:16,639 --> 00:08:18,879
into the system the final

255
00:08:18,879 --> 00:08:20,800
output are going to be the same okay so

256
00:08:20,800 --> 00:08:22,800
this is not too hard to see and you can

257
00:08:22,800 --> 00:08:24,479
see the earlier paper if you if you're

258
00:08:24,479 --> 00:08:26,560
not convinced

259
00:08:26,560 --> 00:08:28,160
and the idea in the matrix paper was

260
00:08:28,160 --> 00:08:30,400
that you would encode each of the bits

261
00:08:30,400 --> 00:08:32,399
independently and each of the carry

262
00:08:32,399 --> 00:08:33,919
variables independently

263
00:08:33,919 --> 00:08:35,839
and then prove this relation

264
00:08:35,839 --> 00:08:39,120
okay again over the committed values

265
00:08:39,120 --> 00:08:41,200
but the kind of like the

266
00:08:41,200 --> 00:08:42,240
uh

267
00:08:42,240 --> 00:08:43,919
there are two things here one is that

268
00:08:43,919 --> 00:08:45,120
you are encoding everything

269
00:08:45,120 --> 00:08:46,959
independently and if you let's say a

270
00:08:46,959 --> 00:08:49,920
64-bit value you have 64 elements ring

271
00:08:49,920 --> 00:08:51,920
elements that you need to encode and you

272
00:08:51,920 --> 00:08:53,440
need to do this for all the inputs and

273
00:08:53,440 --> 00:08:55,839
outputs and also the carry values

274
00:08:55,839 --> 00:08:56,800
okay

275
00:08:56,800 --> 00:08:58,640
even though this is still better than

276
00:08:58,640 --> 00:09:00,320
using large amounts

277
00:09:00,320 --> 00:09:02,480
if there's still a overhead in terms of

278
00:09:02,480 --> 00:09:03,920
communication

279
00:09:03,920 --> 00:09:05,600
and the second thing is that you cannot

280
00:09:05,600 --> 00:09:07,360
just use any vectors for these carry

281
00:09:07,360 --> 00:09:09,200
commitments you need to prove that they

282
00:09:09,200 --> 00:09:11,600
satisfy this specific form shown here so

283
00:09:11,600 --> 00:09:14,480
it's kind of like c i minus two c i

284
00:09:14,480 --> 00:09:16,560
minus one okay so each every kind of

285
00:09:16,560 --> 00:09:18,240
like entry needs to have this form

286
00:09:18,240 --> 00:09:20,399
otherwise the balance cannot be present

287
00:09:20,399 --> 00:09:23,040
or cannot be proven

288
00:09:23,040 --> 00:09:25,920
okay so now what we do in matrix plus is

289
00:09:25,920 --> 00:09:27,600
try to kind of

290
00:09:27,600 --> 00:09:30,399
adjust this drawback of encoding each

291
00:09:30,399 --> 00:09:32,800
bit independently okay so we are going

292
00:09:32,800 --> 00:09:35,120
to use a packing technique from chinese

293
00:09:35,120 --> 00:09:37,360
remainder theorem which has been done

294
00:09:37,360 --> 00:09:38,880
for example especially in the fhe

295
00:09:38,880 --> 00:09:41,600
setting and let's suppose that we have a

296
00:09:41,600 --> 00:09:43,519
bunch of integers ais and bis and we

297
00:09:43,519 --> 00:09:46,000
want to prove that their sums are equal

298
00:09:46,000 --> 00:09:46,880
okay

299
00:09:46,880 --> 00:09:48,800
so what we are going to do is we are

300
00:09:48,800 --> 00:09:50,800
going to you try to use a highly

301
00:09:50,800 --> 00:09:52,240
splitting ring

302
00:09:52,240 --> 00:09:53,760
where the operations are done so let's

303
00:09:53,760 --> 00:09:55,440
note this by capital r

304
00:09:55,440 --> 00:09:57,120
and then we are going to use a single r

305
00:09:57,120 --> 00:10:00,080
element to encode multiple digits or

306
00:10:00,080 --> 00:10:02,640
multiple bits okay in particular our

307
00:10:02,640 --> 00:10:05,519
ring will split into 64 sub rings and we

308
00:10:05,519 --> 00:10:07,600
are going to basically denote s6 or

309
00:10:07,600 --> 00:10:09,519
sorry we are going to

310
00:10:09,519 --> 00:10:12,000
use just a single ring element to denote

311
00:10:12,000 --> 00:10:15,200
a 64-bit integer in the crt slots

312
00:10:15,200 --> 00:10:16,959
okay

313
00:10:16,959 --> 00:10:19,200
so let's see in high level how this

314
00:10:19,200 --> 00:10:21,040
works so we are going to take let's say

315
00:10:21,040 --> 00:10:22,399
a0

316
00:10:22,399 --> 00:10:24,560
write down its binary vector

317
00:10:24,560 --> 00:10:26,720
and then that vector will correspond to

318
00:10:26,720 --> 00:10:30,000
the crt slots of the r element okay our

319
00:10:30,000 --> 00:10:31,760
airing element okay so we are going to

320
00:10:31,760 --> 00:10:34,240
the crt inverse on the bit vector and

321
00:10:34,240 --> 00:10:36,240
this will give us an element in the r

322
00:10:36,240 --> 00:10:37,040
ring

323
00:10:37,040 --> 00:10:38,880
okay so we will do this for all the a

324
00:10:38,880 --> 00:10:40,480
i's and bis

325
00:10:40,480 --> 00:10:42,160
and something similar we will do for the

326
00:10:42,160 --> 00:10:44,399
carry values as well okay so we'll get a

327
00:10:44,399 --> 00:10:47,279
head eyes b hat i's and c head for the

328
00:10:47,279 --> 00:10:48,800
carries

329
00:10:48,800 --> 00:10:50,240
and then we are going to go ahead and

330
00:10:50,240 --> 00:10:51,920
commit to all these things so we will

331
00:10:51,920 --> 00:10:54,800
get capital a i capital b i and capital

332
00:10:54,800 --> 00:10:57,680
c okay

333
00:10:57,839 --> 00:10:59,440
right so the next thing that we want to

334
00:10:59,440 --> 00:11:01,360
do is now that we have

335
00:11:01,360 --> 00:11:04,240
encoded each element by a single element

336
00:11:04,240 --> 00:11:06,720
single a ring element we no longer have

337
00:11:06,720 --> 00:11:08,880
the freedom to operate on them

338
00:11:08,880 --> 00:11:10,720
independently so if you do something you

339
00:11:10,720 --> 00:11:13,360
have to do it on all the values all the

340
00:11:13,360 --> 00:11:14,880
values that are encoded by a single ring

341
00:11:14,880 --> 00:11:16,560
element okay

342
00:11:16,560 --> 00:11:18,320
and ideally what we are trying to find

343
00:11:18,320 --> 00:11:20,560
is an automorphism pi

344
00:11:20,560 --> 00:11:22,399
that operates on the string r that

345
00:11:22,399 --> 00:11:24,399
satisfies the following property okay so

346
00:11:24,399 --> 00:11:27,279
let's suppose this is our ring element

347
00:11:27,279 --> 00:11:30,560
uh described by the crt slots f0 up to

348
00:11:30,560 --> 00:11:32,320
f7 for simplicity

349
00:11:32,320 --> 00:11:33,519
and let's suppose we applied

350
00:11:33,519 --> 00:11:34,959
automorphism pi

351
00:11:34,959 --> 00:11:36,480
what we want to get

352
00:11:36,480 --> 00:11:39,760
is that kind of like a left shift by one

353
00:11:39,760 --> 00:11:42,399
okay so everything will left to shift to

354
00:11:42,399 --> 00:11:44,480
the left by one and the f zero will

355
00:11:44,480 --> 00:11:46,640
circle back to the end

356
00:11:46,640 --> 00:11:47,680
okay

357
00:11:47,680 --> 00:11:50,160
now if you can do this then we can allow

358
00:11:50,160 --> 00:11:53,040
the verifier to compute this c minus two

359
00:11:53,040 --> 00:11:54,320
pi c

360
00:11:54,320 --> 00:11:57,760
okay so remember that c is a commitment

361
00:11:57,760 --> 00:12:01,600
on a message whose crt slots are c 0 c 1

362
00:12:01,600 --> 00:12:03,839
up to blah blah blah right and when you

363
00:12:03,839 --> 00:12:04,880
apply this

364
00:12:04,880 --> 00:12:07,440
automorphism then things will shift to

365
00:12:07,440 --> 00:12:08,320
the left

366
00:12:08,320 --> 00:12:10,399
and you multiply by two so this will

367
00:12:10,399 --> 00:12:11,760
give you except the form that you're

368
00:12:11,760 --> 00:12:14,560
looking for right so in each crt slots

369
00:12:14,560 --> 00:12:17,040
you are going to get c zero minus two c

370
00:12:17,040 --> 00:12:19,040
one and then c one minus two c two blah

371
00:12:19,040 --> 00:12:21,760
blah blah okay and c zero and c one so c

372
00:12:21,760 --> 00:12:23,440
zero in this setting is going to be zero

373
00:12:23,440 --> 00:12:25,519
so we are good to go

374
00:12:25,519 --> 00:12:28,000
but unfortunately for the power of two

375
00:12:28,000 --> 00:12:29,920
cycle atomic rings that are commonly

376
00:12:29,920 --> 00:12:31,839
used and that we are interested in such

377
00:12:31,839 --> 00:12:34,480
a full cycle automorphism does not exist

378
00:12:34,480 --> 00:12:35,600
okay

379
00:12:35,600 --> 00:12:37,440
what does exist is kind of like a half

380
00:12:37,440 --> 00:12:39,120
cycle automorphism that's called the

381
00:12:39,120 --> 00:12:42,480
sigma that does the following okay so it

382
00:12:42,480 --> 00:12:44,240
again does a left shift of most of the

383
00:12:44,240 --> 00:12:45,279
elements

384
00:12:45,279 --> 00:12:47,680
but there are two defective slots okay

385
00:12:47,680 --> 00:12:49,839
f0 moves to the middle

386
00:12:49,839 --> 00:12:52,639
and f4 in this setting move to the end

387
00:12:52,639 --> 00:12:54,639
okay so the two halves are kind of like

388
00:12:54,639 --> 00:12:55,839
cyclic shift

389
00:12:55,839 --> 00:12:58,800
not the full cycle

390
00:12:58,800 --> 00:13:00,800
so i'm not going to describe further how

391
00:13:00,800 --> 00:13:02,240
we kind of overcome this issue but

392
00:13:02,240 --> 00:13:03,920
basically we introduced a patching

393
00:13:03,920 --> 00:13:06,240
technique to correct these defective two

394
00:13:06,240 --> 00:13:07,519
slots

395
00:13:07,519 --> 00:13:09,920
okay and we do this very efficiently and

396
00:13:09,920 --> 00:13:12,240
in a verifiable fashion

397
00:13:12,240 --> 00:13:14,320
and what happens in the end

398
00:13:14,320 --> 00:13:16,959
is that the probe basically proves uh

399
00:13:16,959 --> 00:13:19,360
pros that the sum of bis commitments

400
00:13:19,360 --> 00:13:21,839
minus sum of ai commitments plus this

401
00:13:21,839 --> 00:13:24,160
specific structure with respect to the

402
00:13:24,160 --> 00:13:25,920
verifiably patched variant of this c

403
00:13:25,920 --> 00:13:27,920
commitment is equal to equal to the

404
00:13:27,920 --> 00:13:29,360
commitment to zero

405
00:13:29,360 --> 00:13:31,360
okay now everything is kind of like

406
00:13:31,360 --> 00:13:33,680
patched and we are saving significantly

407
00:13:33,680 --> 00:13:35,279
from the communication because

408
00:13:35,279 --> 00:13:38,480
the this c and like 2 sigma c is

409
00:13:38,480 --> 00:13:40,079
constructed by the verifier without

410
00:13:40,079 --> 00:13:42,959
additional communication

411
00:13:43,040 --> 00:13:44,560
and the advantages i mentioned is that

412
00:13:44,560 --> 00:13:45,839
we don't need encode each bit

413
00:13:45,839 --> 00:13:47,519
independently and we are attacking

414
00:13:47,519 --> 00:13:50,560
things to save from the communication

415
00:13:50,560 --> 00:13:52,079
right so

416
00:13:52,079 --> 00:13:54,160
let me show you the performance results

417
00:13:54,160 --> 00:13:56,399
and as i mentioned before we have ring

418
00:13:56,399 --> 00:13:58,320
and group signatures and this is the

419
00:13:58,320 --> 00:14:00,800
comparison for the length in the lattice

420
00:14:00,800 --> 00:14:02,639
setting usually the

421
00:14:02,639 --> 00:14:05,360
sizes are the most important metric and

422
00:14:05,360 --> 00:14:07,279
usually the communication is sorry

423
00:14:07,279 --> 00:14:09,360
computation is quite fast

424
00:14:09,360 --> 00:14:12,079
and we have a reduction uh from our

425
00:14:12,079 --> 00:14:14,560
earlier ccs work and these are two other

426
00:14:14,560 --> 00:14:17,440
works that appeared at similar times

427
00:14:17,440 --> 00:14:19,440
both at crypto 21

428
00:14:19,440 --> 00:14:22,079
and the fourth one is dual ring is

429
00:14:22,079 --> 00:14:23,680
linear size so you cannot scale it to

430
00:14:23,680 --> 00:14:25,120
very large values but it's quite

431
00:14:25,120 --> 00:14:28,720
efficient for small ring sizes

432
00:14:29,199 --> 00:14:30,800
and then this is the proof size

433
00:14:30,800 --> 00:14:32,959
comparison between matrix and matrix

434
00:14:32,959 --> 00:14:36,079
plus and you can see that so we

435
00:14:36,079 --> 00:14:38,160
the anonymity level here is fixed and

436
00:14:38,160 --> 00:14:40,480
that's the setting in monero so we have

437
00:14:40,480 --> 00:14:42,160
we are basically setting the element

438
00:14:42,160 --> 00:14:43,519
level to be

439
00:14:43,519 --> 00:14:45,199
like 1 over 11 so

440
00:14:45,199 --> 00:14:47,760
there are 11 members to hide a single

441
00:14:47,760 --> 00:14:48,880
user

442
00:14:48,880 --> 00:14:50,480
and we have increasing number of inputs

443
00:14:50,480 --> 00:14:51,680
because that's the kind of like the

444
00:14:51,680 --> 00:14:53,440
parameter that increases in the monero

445
00:14:53,440 --> 00:14:55,120
transactions

446
00:14:55,120 --> 00:14:56,399
and we can see that as the number of

447
00:14:56,399 --> 00:14:57,760
input increases

448
00:14:57,760 --> 00:15:00,160
we have even much larger gap compared to

449
00:15:00,160 --> 00:15:01,839
matrix protocol

450
00:15:01,839 --> 00:15:03,680
and we also have smaller system

451
00:15:03,680 --> 00:15:06,079
parameters and especially the modulus

452
00:15:06,079 --> 00:15:08,320
fit into 32 bits which allows you to do

453
00:15:08,320 --> 00:15:10,959
a fast computation

454
00:15:10,959 --> 00:15:13,440
and then concurrently with our work at

455
00:15:13,440 --> 00:15:15,360
crypto 21

456
00:15:15,360 --> 00:15:18,959
uh rubyshivskyetal also introduced a

457
00:15:18,959 --> 00:15:21,199
similar framework or similar

458
00:15:21,199 --> 00:15:23,120
instantiation of the matrix framework

459
00:15:23,120 --> 00:15:24,720
using different zero-knowledge proofs

460
00:15:24,720 --> 00:15:26,639
and here are the proof lengths

461
00:15:26,639 --> 00:15:29,360
so the two approaches have

462
00:15:29,360 --> 00:15:31,040
very similar proof sizes for the base

463
00:15:31,040 --> 00:15:33,519
case so two inputs two outputs but as

464
00:15:33,519 --> 00:15:35,440
the number of input increases their

465
00:15:35,440 --> 00:15:36,720
proof length signal becomes

466
00:15:36,720 --> 00:15:38,480
significantly less efficient than our

467
00:15:38,480 --> 00:15:39,440
approach

468
00:15:39,440 --> 00:15:41,040
and in particular this stems from the

469
00:15:41,040 --> 00:15:42,079
fact that

470
00:15:42,079 --> 00:15:44,959
uh matrix plus is the only proposal that

471
00:15:44,959 --> 00:15:46,959
scales sublinearly with the number of

472
00:15:46,959 --> 00:15:48,959
inputs the all the other quantum stage

473
00:15:48,959 --> 00:15:51,040
proposals scale linearly with that

474
00:15:51,040 --> 00:15:52,800
parameter

475
00:15:52,800 --> 00:15:54,800
and here are the run times

476
00:15:54,800 --> 00:15:56,160
and you can see that

477
00:15:56,160 --> 00:15:58,480
everything is under a second and

478
00:15:58,480 --> 00:15:59,680
especially the verification is the

479
00:15:59,680 --> 00:16:01,199
important matrix here because the

480
00:16:01,199 --> 00:16:02,800
verifiers are going to verify many many

481
00:16:02,800 --> 00:16:04,000
transactions

482
00:16:04,000 --> 00:16:05,440
and it's just it just takes a few

483
00:16:05,440 --> 00:16:06,959
milliseconds

484
00:16:06,959 --> 00:16:08,880
and in particular matrix plus

485
00:16:08,880 --> 00:16:10,560
verification is more than six times

486
00:16:10,560 --> 00:16:12,800
faster than the one order verification

487
00:16:12,800 --> 00:16:14,320
and the transaction generation is only

488
00:16:14,320 --> 00:16:17,519
slightly slower than minor

489
00:16:17,519 --> 00:16:19,360
so that's all i wanted to share so the

490
00:16:19,360 --> 00:16:21,120
full version of our work is available on

491
00:16:21,120 --> 00:16:23,600
iec as aprint the implementation codes

492
00:16:23,600 --> 00:16:25,279
are also available publicly so you can

493
00:16:25,279 --> 00:16:27,120
check them up we have the scripts for

494
00:16:27,120 --> 00:16:29,360
this challenge set construction

495
00:16:29,360 --> 00:16:30,240
and the

496
00:16:30,240 --> 00:16:32,399
implementation of the protocol itself

497
00:16:32,399 --> 00:16:34,480
and we also have scripts for

498
00:16:34,480 --> 00:16:36,160
estimating security of what's called an

499
00:16:36,160 --> 00:16:38,720
asymmetric cis problem uh which is a

500
00:16:38,720 --> 00:16:40,000
kind of like a variant of the standard

501
00:16:40,000 --> 00:16:41,680
cis problem and if you have any

502
00:16:41,680 --> 00:16:43,199
questions i'm happy to take them now or

503
00:16:43,199 --> 00:16:46,800
you can email me later on thank you

504
00:16:47,759 --> 00:16:49,120
excellent work

505
00:16:49,120 --> 00:16:52,399
any questions from the audience

506
00:17:01,199 --> 00:17:03,440
yeah i wanted to ask um first i wanted

507
00:17:03,440 --> 00:17:05,039
to confirm that the technique that

508
00:17:05,039 --> 00:17:06,400
you're developing here could actually

509
00:17:06,400 --> 00:17:07,679
generalize to

510
00:17:07,679 --> 00:17:10,000
computing linear combinations of limited

511
00:17:10,000 --> 00:17:12,720
values and whether or not any additional

512
00:17:12,720 --> 00:17:14,720
difficulties arise in doing that

513
00:17:14,720 --> 00:17:16,400
generalization

514
00:17:16,400 --> 00:17:17,919
yeah and you want to do a linear

515
00:17:17,919 --> 00:17:19,919
combination of the crt slots is that

516
00:17:19,919 --> 00:17:22,079
correct um i guess the value is

517
00:17:22,079 --> 00:17:23,839
represented by

518
00:17:23,839 --> 00:17:26,640
yeah in ncrt form yeah yeah you can do

519
00:17:26,640 --> 00:17:27,520
that and there are different

520
00:17:27,520 --> 00:17:29,760
automorphisms that you can use depending

521
00:17:29,760 --> 00:17:31,200
on like kind of like what structure you

522
00:17:31,200 --> 00:17:33,760
want to have so yeah you can do it i see

523
00:17:33,760 --> 00:17:36,000
cool

524
00:17:37,440 --> 00:17:39,840
hi uh nice work first of all

525
00:17:39,840 --> 00:17:41,840
so um when you were discussing this the

526
00:17:41,840 --> 00:17:43,840
technique that you like mainly went into

527
00:17:43,840 --> 00:17:46,160
in this talk so is it correct like maybe

528
00:17:46,160 --> 00:17:48,400
i'm missing something but it seemed like

529
00:17:48,400 --> 00:17:50,880
uh from compared to matric like the

530
00:17:50,880 --> 00:17:52,799
previous work that you had you applied

531
00:17:52,799 --> 00:17:54,240
crd bashing to that and used

532
00:17:54,240 --> 00:17:56,799
automorphisms to like get better packing

533
00:17:56,799 --> 00:17:59,280
efficiency and reduce parameter sizes

534
00:17:59,280 --> 00:18:01,039
is that correct overall the intuition

535
00:18:01,039 --> 00:18:02,320
that i have

536
00:18:02,320 --> 00:18:04,160
yeah that's just one optimization over

537
00:18:04,160 --> 00:18:06,160
matrix and there are more things that i

538
00:18:06,160 --> 00:18:08,240
haven't described here

539
00:18:08,240 --> 00:18:10,799
okay okay so yeah so you did not go into

540
00:18:10,799 --> 00:18:12,960
that in this talk right yeah yeah i i

541
00:18:12,960 --> 00:18:15,440
missed a lot of uh details here okay

542
00:18:15,440 --> 00:18:18,480
i'll check the paper thanks

543
00:18:18,880 --> 00:18:21,039
or you can email the authors to ask for

544
00:18:21,039 --> 00:18:23,120
more questions

545
00:18:23,120 --> 00:18:24,720
uh any more questions

546
00:18:24,720 --> 00:18:28,039
from the audience

547
00:18:30,240 --> 00:18:31,679
okay

548
00:18:31,679 --> 00:18:34,230
let's thank speaker again

549
00:18:34,230 --> 00:18:37,410
[Applause]

