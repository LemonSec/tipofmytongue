1
00:00:00,719 --> 00:00:04,480
uh hello i'm jim howes a student at the

2
00:00:04,480 --> 00:00:06,399
student at the university of florida um

3
00:00:06,399 --> 00:00:08,480
and on behalf of my

4
00:00:08,480 --> 00:00:10,320
co-authors um

5
00:00:10,320 --> 00:00:12,719
at galway marios giorgio and alex

6
00:00:12,719 --> 00:00:15,440
malassemoff and my advisor tom shrimpton

7
00:00:15,440 --> 00:00:17,119
i'm going to tell you about our paper

8
00:00:17,119 --> 00:00:18,480
security foundations for

9
00:00:18,480 --> 00:00:20,640
application-based covert communication

10
00:00:20,640 --> 00:00:24,080
channels uh so i think the to start with

11
00:00:24,080 --> 00:00:25,439
i need to

12
00:00:25,439 --> 00:00:26,480
um

13
00:00:26,480 --> 00:00:28,840
specify what what exactly we mean by an

14
00:00:28,840 --> 00:00:31,199
application-based covert channel

15
00:00:31,199 --> 00:00:32,960
it's kind of a novel term although it's

16
00:00:32,960 --> 00:00:35,520
a bit self-descriptive

17
00:00:35,520 --> 00:00:37,440
so informally

18
00:00:37,440 --> 00:00:40,239
it's cryptographic primitive that wraps

19
00:00:40,239 --> 00:00:42,640
around a network application

20
00:00:42,640 --> 00:00:45,360
and manipulates inputs and or outputs

21
00:00:45,360 --> 00:00:47,200
but not the code

22
00:00:47,200 --> 00:00:49,920
to transmit information covertly so

23
00:00:49,920 --> 00:00:53,760
essentially the network application

24
00:00:53,760 --> 00:00:56,239
provides both the logical communication

25
00:00:56,239 --> 00:00:57,440
channel

26
00:00:57,440 --> 00:01:00,160
that's used to transmit data as well as

27
00:01:00,160 --> 00:01:02,160
the model for what

28
00:01:02,160 --> 00:01:04,159
uh those transmissions should

29
00:01:04,159 --> 00:01:05,360
look like

30
00:01:05,360 --> 00:01:07,600
right

31
00:01:08,479 --> 00:01:10,320
the term tunneling is often used to

32
00:01:10,320 --> 00:01:12,479
describe these systems um you could also

33
00:01:12,479 --> 00:01:14,799
think of it as kind of a parasite

34
00:01:14,799 --> 00:01:17,119
on the communication channel of the

35
00:01:17,119 --> 00:01:18,720
application

36
00:01:18,720 --> 00:01:21,119
uh so here's a block diagram i'll i'll

37
00:01:21,119 --> 00:01:23,280
go over this in in full detail shortly

38
00:01:23,280 --> 00:01:25,759
but you can see the application here is

39
00:01:25,759 --> 00:01:28,880
these green components and then the

40
00:01:28,880 --> 00:01:31,280
we abbreviated abcc

41
00:01:31,280 --> 00:01:32,799
flanks it flanks each of these

42
00:01:32,799 --> 00:01:36,079
components on either side

43
00:01:36,479 --> 00:01:37,680
so

44
00:01:37,680 --> 00:01:40,720
we define these as abstractions of

45
00:01:40,720 --> 00:01:43,360
censorship circumvention tools although

46
00:01:43,360 --> 00:01:45,840
they show up in a variety of places

47
00:01:45,840 --> 00:01:48,720
it's a bit more noble to consider these

48
00:01:48,720 --> 00:01:51,280
tools than say

49
00:01:51,280 --> 00:01:53,680
you know covert botnets

50
00:01:53,680 --> 00:01:54,399
so

51
00:01:54,399 --> 00:01:56,000
um

52
00:01:56,000 --> 00:01:58,240
so this table is taken from

53
00:01:58,240 --> 00:02:00,240
an sok that appeared at this conference

54
00:02:00,240 --> 00:02:03,119
six years ago by chance at all

55
00:02:03,119 --> 00:02:05,600
and they they classified these systems

56
00:02:05,600 --> 00:02:08,000
uh in this two by two matrix so the

57
00:02:08,000 --> 00:02:10,639
columns set up means it

58
00:02:10,639 --> 00:02:12,560
tries to obfuscate the

59
00:02:12,560 --> 00:02:15,520
connection negotiation setup process

60
00:02:15,520 --> 00:02:18,000
the usage column represents tools that

61
00:02:18,000 --> 00:02:20,400
obfuscate the actual traffic over the

62
00:02:20,400 --> 00:02:23,120
communication channel so the top row is

63
00:02:23,120 --> 00:02:26,000
polymorphic systems which are also

64
00:02:26,000 --> 00:02:28,959
called look like nothing systems so they

65
00:02:28,959 --> 00:02:30,160
attempt to

66
00:02:30,160 --> 00:02:32,480
uh not be identified as any particular

67
00:02:32,480 --> 00:02:35,280
protocol right so maybe just random bits

68
00:02:35,280 --> 00:02:37,440
right you see uh the obs two three and

69
00:02:37,440 --> 00:02:38,800
four up there

70
00:02:38,800 --> 00:02:40,720
are typical examples of that and then

71
00:02:40,720 --> 00:02:42,720
the bottom row is steganographic systems

72
00:02:42,720 --> 00:02:45,599
and this is their terminology um

73
00:02:45,599 --> 00:02:47,680
which uh attempt to obfuscate their

74
00:02:47,680 --> 00:02:50,000
traffic to look like something specific

75
00:02:50,000 --> 00:02:51,599
right so a specified application

76
00:02:51,599 --> 00:02:54,080
protocol right and so that

77
00:02:54,080 --> 00:02:57,280
specific thing is the application uh

78
00:02:57,280 --> 00:03:00,239
that they've built an abcc around uh

79
00:03:00,239 --> 00:03:02,800
implicitly um so to this list we would

80
00:03:02,800 --> 00:03:05,360
add two recent additions there's been a

81
00:03:05,360 --> 00:03:07,200
quite a few in the past six years but in

82
00:03:07,200 --> 00:03:10,239
particular protozoa and balboa which i'm

83
00:03:10,239 --> 00:03:12,239
gonna look at more closely later in the

84
00:03:12,239 --> 00:03:14,480
talk

85
00:03:15,440 --> 00:03:17,440
um okay so

86
00:03:17,440 --> 00:03:19,840
um

87
00:03:21,040 --> 00:03:23,040
there's there's various security goals

88
00:03:23,040 --> 00:03:25,120
for censorship circumvention systems

89
00:03:25,120 --> 00:03:28,000
overall um but for this um

90
00:03:28,000 --> 00:03:31,040
channel traffic obfuscation uh the goal

91
00:03:31,040 --> 00:03:32,799
is generally um something called

92
00:03:32,799 --> 00:03:34,480
undetectability

93
00:03:34,480 --> 00:03:36,560
um

94
00:03:36,560 --> 00:03:37,360
so

95
00:03:37,360 --> 00:03:39,760
uh informally undetectability could be

96
00:03:39,760 --> 00:03:42,319
defined as um

97
00:03:42,319 --> 00:03:44,319
the channel traffic

98
00:03:44,319 --> 00:03:46,480
with covert embedding is

99
00:03:46,480 --> 00:03:48,879
indistinguishable from

100
00:03:48,879 --> 00:03:50,080
some

101
00:03:50,080 --> 00:03:53,439
reference channel traffic uh without any

102
00:03:53,439 --> 00:03:55,280
covert embedding

103
00:03:55,280 --> 00:03:56,799
right um

104
00:03:56,799 --> 00:03:58,319
and the tricky part is

105
00:03:58,319 --> 00:04:01,920
what is that reference traffic

106
00:04:01,920 --> 00:04:04,400
right um so it's variously described as

107
00:04:04,400 --> 00:04:06,959
innocent honest or unsuspicious traffic

108
00:04:06,959 --> 00:04:08,159
but again that's

109
00:04:08,159 --> 00:04:10,959
uh these are all very informal terms um

110
00:04:10,959 --> 00:04:13,760
so in in practice

111
00:04:13,760 --> 00:04:15,280
these papers provide evidence of

112
00:04:15,280 --> 00:04:17,918
undetectability through um you know

113
00:04:17,918 --> 00:04:20,560
fairly rigorous testing

114
00:04:20,560 --> 00:04:22,400
trying to distinguish the traffic from

115
00:04:22,400 --> 00:04:23,759
their system from

116
00:04:23,759 --> 00:04:25,759
traffic that they've sampled from maybe

117
00:04:25,759 --> 00:04:26,800
the target

118
00:04:26,800 --> 00:04:28,560
deployment environment but again there's

119
00:04:28,560 --> 00:04:30,080
really no formal definition for

120
00:04:30,080 --> 00:04:32,240
undetectability at least in this case

121
00:04:32,240 --> 00:04:33,199
uh

122
00:04:33,199 --> 00:04:34,720
the closest thing

123
00:04:34,720 --> 00:04:36,560
i think we've really encountered is uh

124
00:04:36,560 --> 00:04:39,440
steganographic secrecy um which has been

125
00:04:39,440 --> 00:04:41,840
around a notion that's formalized in the

126
00:04:41,840 --> 00:04:43,840
computational setting about 20 years ago

127
00:04:43,840 --> 00:04:46,720
but it's largely remained a theoretical

128
00:04:46,720 --> 00:04:48,560
concept um

129
00:04:48,560 --> 00:04:51,120
it really hasn't been applied

130
00:04:51,120 --> 00:04:52,720
with maybe one exception

131
00:04:52,720 --> 00:04:56,800
uh to any real world systems and we

132
00:04:56,800 --> 00:04:58,000
believe there's a few reasons for that

133
00:04:58,000 --> 00:04:59,919
which i won't go into but um if you're

134
00:04:59,919 --> 00:05:01,759
interested maybe you can ask a question

135
00:05:01,759 --> 00:05:04,000
about that at the end

136
00:05:04,000 --> 00:05:06,080
uh okay so now i'm going to walk you

137
00:05:06,080 --> 00:05:07,440
through that

138
00:05:07,440 --> 00:05:09,759
that block diagram that i showed earlier

139
00:05:09,759 --> 00:05:11,120
before we can talk about security we

140
00:05:11,120 --> 00:05:13,280
need to define the thing it is that we

141
00:05:13,280 --> 00:05:14,080
are

142
00:05:14,080 --> 00:05:17,600
uh trying to secure right so um first we

143
00:05:17,600 --> 00:05:19,680
need to define the application itself

144
00:05:19,680 --> 00:05:22,000
right so it consists of

145
00:05:22,000 --> 00:05:22,840
three

146
00:05:22,840 --> 00:05:28,080
algorithms uh init source and sync

147
00:05:28,080 --> 00:05:30,240
the init algorithm takes uh this little

148
00:05:30,240 --> 00:05:32,720
squiggly that's a

149
00:05:32,720 --> 00:05:35,280
psy or zai

150
00:05:35,280 --> 00:05:35,860
we call it the

151
00:05:35,860 --> 00:05:37,120
[Music]

152
00:05:37,120 --> 00:05:38,639
environment context so it can just

153
00:05:38,639 --> 00:05:40,800
contain deployment parameters

154
00:05:40,800 --> 00:05:44,400
and it outputs a gamma and a gamma hat

155
00:05:44,400 --> 00:05:47,280
the box indicates a static parameter

156
00:05:47,280 --> 00:05:48,400
just for

157
00:05:48,400 --> 00:05:50,960
ease of understanding

158
00:05:50,960 --> 00:05:53,919
and so the the gamma is used to

159
00:05:53,919 --> 00:05:56,800
parameterize the source and sync uh game

160
00:05:56,800 --> 00:05:59,039
of hat is initialization leakage that

161
00:05:59,039 --> 00:06:00,319
will come into play in the security

162
00:06:00,319 --> 00:06:01,280
notion

163
00:06:01,280 --> 00:06:03,199
um it could be for example the

164
00:06:03,199 --> 00:06:05,680
transcript of a key exchange or

165
00:06:05,680 --> 00:06:08,800
handshake to set up the connection

166
00:06:08,800 --> 00:06:11,680
uh and so we stipulate

167
00:06:11,680 --> 00:06:12,960
some set of

168
00:06:12,960 --> 00:06:15,440
algorithmic users from which you can

169
00:06:15,440 --> 00:06:18,560
sample inputs to the application um and

170
00:06:18,560 --> 00:06:21,280
so those inputs which we um

171
00:06:21,280 --> 00:06:23,440
define as just a sequence or vector of

172
00:06:23,440 --> 00:06:26,560
strings along with um

173
00:06:26,560 --> 00:06:28,240
uh some return traffic which is

174
00:06:28,240 --> 00:06:31,039
initialized to to null um is input to

175
00:06:31,039 --> 00:06:33,280
the source to generate uh outgoing

176
00:06:33,280 --> 00:06:34,960
traffic right

177
00:06:34,960 --> 00:06:37,120
and we use c to denote client it doesn't

178
00:06:37,120 --> 00:06:38,639
have to be a client server architecture

179
00:06:38,639 --> 00:06:41,680
but just for ease of understanding

180
00:06:41,680 --> 00:06:43,280
um so the sync

181
00:06:43,280 --> 00:06:46,400
algorithm takes in the client traffic

182
00:06:46,400 --> 00:06:50,400
uh outputs um return traffic right so

183
00:06:50,400 --> 00:06:52,479
some kind of a response as well as this

184
00:06:52,479 --> 00:06:54,800
alpha which is um kind of a local

185
00:06:54,800 --> 00:06:57,360
application log that could be read um to

186
00:06:57,360 --> 00:06:58,960
extract some covert data locally but

187
00:06:58,960 --> 00:07:00,319
it's not gonna be shown up not gonna

188
00:07:00,319 --> 00:07:03,759
show up on the network uh and then uh

189
00:07:03,759 --> 00:07:06,319
the the abcc itself

190
00:07:06,319 --> 00:07:07,520
right the thing we're defining security

191
00:07:07,520 --> 00:07:11,039
for is uh consists of five algorithms um

192
00:07:11,039 --> 00:07:13,520
so there is the setup algorithm which

193
00:07:13,520 --> 00:07:16,240
also takes the environment context

194
00:07:16,240 --> 00:07:18,240
provides two parameters an embedding

195
00:07:18,240 --> 00:07:20,800
hint and a secret key

196
00:07:20,800 --> 00:07:22,720
the embedding hit is assumed public the

197
00:07:22,720 --> 00:07:24,400
key is assumed secret

198
00:07:24,400 --> 00:07:25,759
they both

199
00:07:25,759 --> 00:07:27,280
parameterize each of these algorithms

200
00:07:27,280 --> 00:07:29,919
along with the application context right

201
00:07:29,919 --> 00:07:31,360
so there's kind of an assumption that

202
00:07:31,360 --> 00:07:34,000
the embedding algorithms uh may be able

203
00:07:34,000 --> 00:07:36,720
to access some kind of internal data of

204
00:07:36,720 --> 00:07:38,240
the application right and so you you

205
00:07:38,240 --> 00:07:39,759
would specify that through that that

206
00:07:39,759 --> 00:07:40,720
gamma

207
00:07:40,720 --> 00:07:43,199
parameter

208
00:07:43,199 --> 00:07:44,560
and so each of these first three

209
00:07:44,560 --> 00:07:46,960
algorithms embed user embed wire extract

210
00:07:46,960 --> 00:07:50,240
wire um takes in a sequence of strings

211
00:07:50,240 --> 00:07:51,840
and outputs a sequence right so it's

212
00:07:51,840 --> 00:07:54,000
just modifying um the traffic that's

213
00:07:54,000 --> 00:07:56,879
flowing through it in in this uh

214
00:07:56,879 --> 00:07:59,680
manner of the the uh the aero flow

215
00:07:59,680 --> 00:08:01,919
right um okay so

216
00:08:01,919 --> 00:08:03,759
the one thing that's missing uh is the

217
00:08:03,759 --> 00:08:07,280
actual covert messages so to embed uh

218
00:08:07,280 --> 00:08:08,720
covert bits

219
00:08:08,720 --> 00:08:10,960
um instead of having just an atomic

220
00:08:10,960 --> 00:08:12,400
input we have the two embedding

221
00:08:12,400 --> 00:08:15,120
algorithms pull from a message queue

222
00:08:15,120 --> 00:08:17,440
this allows them to be kind of

223
00:08:17,440 --> 00:08:20,000
on demand or as needed

224
00:08:20,000 --> 00:08:22,879
to exercise some judgment in when to

225
00:08:22,879 --> 00:08:24,319
embed traffic

226
00:08:24,319 --> 00:08:25,680
which is something that's missing from

227
00:08:25,680 --> 00:08:28,000
some some other notions we've looked at

228
00:08:28,000 --> 00:08:29,599
and then of course the extraction

229
00:08:29,599 --> 00:08:32,399
algorithms will output uh bits that have

230
00:08:32,399 --> 00:08:33,519
been embedded

231
00:08:33,519 --> 00:08:35,039
um

232
00:08:35,039 --> 00:08:36,880
so uh we stipulate a correctness

233
00:08:36,880 --> 00:08:39,200
condition um which is i'm going into the

234
00:08:39,200 --> 00:08:41,200
technical details but basically uh

235
00:08:41,200 --> 00:08:42,958
assures that the

236
00:08:42,958 --> 00:08:45,440
bits that have been embedded uh that are

237
00:08:45,440 --> 00:08:48,240
then extracted uh are reassembled uh in

238
00:08:48,240 --> 00:08:50,720
the correct order to make a prefix of

239
00:08:50,720 --> 00:08:52,880
whatever has put into the been put into

240
00:08:52,880 --> 00:08:54,480
that buffer

241
00:08:54,480 --> 00:08:56,240
um

242
00:08:56,240 --> 00:08:58,560
okay

243
00:08:58,800 --> 00:09:00,240
so

244
00:09:00,240 --> 00:09:02,959
this is the the object of study

245
00:09:02,959 --> 00:09:04,880
um there are a few design patterns we

246
00:09:04,880 --> 00:09:07,200
observed for these um

247
00:09:07,200 --> 00:09:08,959
interestingly uh

248
00:09:08,959 --> 00:09:11,360
no system embeds at both the

249
00:09:11,360 --> 00:09:12,800
in front of the on the both the inputs

250
00:09:12,800 --> 00:09:14,480
and the outputs of the application uh

251
00:09:14,480 --> 00:09:17,839
they they all either do one or the other

252
00:09:17,839 --> 00:09:19,040
um

253
00:09:19,040 --> 00:09:23,040
so in one case the uh the embed and

254
00:09:23,040 --> 00:09:24,880
extract wire algorithms are just trivial

255
00:09:24,880 --> 00:09:27,519
pass-throughs uh and in another case the

256
00:09:27,519 --> 00:09:30,160
um embed user is a trivial pass-through

257
00:09:30,160 --> 00:09:33,600
and the extract user does nothing um

258
00:09:33,600 --> 00:09:35,680
we call these user-only and wire only

259
00:09:35,680 --> 00:09:38,160
for simplicity um

260
00:09:38,160 --> 00:09:39,440
and it's it's an interesting open

261
00:09:39,440 --> 00:09:42,000
question as to whether uh there exists

262
00:09:42,000 --> 00:09:45,600
any combined embedding systems that are

263
00:09:45,600 --> 00:09:48,800
not merely mashups right of a user only

264
00:09:48,800 --> 00:09:51,519
in a wireless system

265
00:09:51,519 --> 00:09:53,920
we have not seen any in practice

266
00:09:53,920 --> 00:09:55,920
another

267
00:09:55,920 --> 00:09:57,760
flavor of these systems we observe is

268
00:09:57,760 --> 00:09:59,120
that some

269
00:09:59,120 --> 00:10:00,640
applications

270
00:10:00,640 --> 00:10:03,120
have they rely on a secure transport

271
00:10:03,120 --> 00:10:05,360
layer which we consider part part of the

272
00:10:05,360 --> 00:10:06,480
application

273
00:10:06,480 --> 00:10:09,760
um in many cases so um

274
00:10:09,760 --> 00:10:11,519
i'll also get into kind of the nuances

275
00:10:11,519 --> 00:10:14,079
of this later on when i examine

276
00:10:14,079 --> 00:10:17,360
a couple particular systems

277
00:10:17,360 --> 00:10:22,000
okay so another big diagram um

278
00:10:22,000 --> 00:10:24,240
the the most fundamental security notion

279
00:10:24,240 --> 00:10:27,920
uh that one needs to define for uh such

280
00:10:27,920 --> 00:10:30,399
a system is security against a passive

281
00:10:30,399 --> 00:10:33,760
eavesdropper right um

282
00:10:33,760 --> 00:10:35,920
we we define it with respect to a

283
00:10:35,920 --> 00:10:37,920
particular setting

284
00:10:37,920 --> 00:10:40,640
okay so so to to fully specify the

285
00:10:40,640 --> 00:10:41,600
setting

286
00:10:41,600 --> 00:10:43,519
in which you're defining security

287
00:10:43,519 --> 00:10:45,360
you have to specify

288
00:10:45,360 --> 00:10:48,399
the application

289
00:10:48,399 --> 00:10:51,279
the a pair of users

290
00:10:51,279 --> 00:10:53,760
valid for that application

291
00:10:53,760 --> 00:10:55,920
user zero and user one

292
00:10:55,920 --> 00:10:56,640
the

293
00:10:56,640 --> 00:10:59,519
abcc itself of course

294
00:10:59,519 --> 00:11:01,839
the environment context

295
00:11:01,839 --> 00:11:05,680
and then finally a class of adversaries

296
00:11:05,680 --> 00:11:07,519
and we describe

297
00:11:07,519 --> 00:11:10,079
classes of adversaries through bounds on

298
00:11:10,079 --> 00:11:11,920
the resources available to them so

299
00:11:11,920 --> 00:11:15,839
oracle queries running time etc

300
00:11:17,680 --> 00:11:20,640
okay so um i'll step through this now

301
00:11:20,640 --> 00:11:23,440
in in both games um the setup is the

302
00:11:23,440 --> 00:11:26,959
same so uh init and setup are run to

303
00:11:26,959 --> 00:11:28,480
generate

304
00:11:28,480 --> 00:11:31,680
the static parameters and then gamma hat

305
00:11:31,680 --> 00:11:32,560
and

306
00:11:32,560 --> 00:11:33,760
h

307
00:11:33,760 --> 00:11:35,760
sorry the initialization leakage and the

308
00:11:35,760 --> 00:11:37,360
embedding hint

309
00:11:37,360 --> 00:11:40,480
those are provided to the adversary

310
00:11:40,480 --> 00:11:43,040
in the adversary always has access to

311
00:11:43,040 --> 00:11:45,279
the push interface of the message buffer

312
00:11:45,279 --> 00:11:47,680
so the adversary um

313
00:11:47,680 --> 00:11:50,720
specifies the covert traffic

314
00:11:50,720 --> 00:11:51,839
all right

315
00:11:51,839 --> 00:11:55,120
so in the covert channel uh version of

316
00:11:55,120 --> 00:11:57,440
the game which we label cc1 the

317
00:11:57,440 --> 00:12:00,800
subscript indicates which user um as a

318
00:12:00,800 --> 00:12:01,760
reminder

319
00:12:01,760 --> 00:12:02,720
uh

320
00:12:02,720 --> 00:12:04,959
there's a distinguished trigger input to

321
00:12:04,959 --> 00:12:06,240
the oracle

322
00:12:06,240 --> 00:12:09,440
and it uh just simply causes the

323
00:12:09,440 --> 00:12:11,120
normal

324
00:12:11,120 --> 00:12:13,360
traffic flow through

325
00:12:13,360 --> 00:12:15,680
the um the covert channel

326
00:12:15,680 --> 00:12:17,279
and the application

327
00:12:17,279 --> 00:12:18,720
generating

328
00:12:18,720 --> 00:12:20,959
one outgoing client message and one

329
00:12:20,959 --> 00:12:22,839
return server message

330
00:12:22,839 --> 00:12:26,639
wcws and those two are provided back to

331
00:12:26,639 --> 00:12:30,160
the adversary as a response

332
00:12:31,600 --> 00:12:33,200
the overt channel is

333
00:12:33,200 --> 00:12:35,760
much the same except the

334
00:12:35,760 --> 00:12:37,040
abcc

335
00:12:37,040 --> 00:12:39,680
algorithms are absent so it's simply

336
00:12:39,680 --> 00:12:41,519
traffic generated by source and sync

337
00:12:41,519 --> 00:12:42,880
directly

338
00:12:42,880 --> 00:12:44,800
and

339
00:12:44,800 --> 00:12:46,079
then of course at the end the adversary

340
00:12:46,079 --> 00:12:47,279
outputs a bit

341
00:12:47,279 --> 00:12:48,639
um

342
00:12:48,639 --> 00:12:50,880
a one is

343
00:12:50,880 --> 00:12:52,880
implies that the adversary believes it

344
00:12:52,880 --> 00:12:54,959
is in the covert channel world a zero in

345
00:12:54,959 --> 00:12:58,319
the over channel world

346
00:13:00,320 --> 00:13:03,600
um okay so one one question um

347
00:13:03,600 --> 00:13:05,600
that you might have

348
00:13:05,600 --> 00:13:07,519
after looking at this notion is why

349
00:13:07,519 --> 00:13:11,040
there are two different users

350
00:13:11,040 --> 00:13:12,320
and so

351
00:13:12,320 --> 00:13:14,000
what came up in our review of these

352
00:13:14,000 --> 00:13:16,880
systems is that

353
00:13:16,880 --> 00:13:18,800
it is it is not always clear

354
00:13:18,800 --> 00:13:21,200
who or what

355
00:13:21,200 --> 00:13:23,920
is intended to be driving the the

356
00:13:23,920 --> 00:13:26,240
application when it isn't embedding

357
00:13:26,240 --> 00:13:28,800
covered data right so a number of

358
00:13:28,800 --> 00:13:32,160
systems explicitly call out a user model

359
00:13:32,160 --> 00:13:35,040
or an over user simulator

360
00:13:35,040 --> 00:13:36,480
is also used

361
00:13:36,480 --> 00:13:37,760
to describe

362
00:13:37,760 --> 00:13:38,720
um

363
00:13:38,720 --> 00:13:42,880
a separate component that is actually

364
00:13:42,880 --> 00:13:44,240
causing the application to generate

365
00:13:44,240 --> 00:13:46,639
traffic that then gets embedded into

366
00:13:46,639 --> 00:13:47,279
and

367
00:13:47,279 --> 00:13:49,279
about six months ago at wps there was

368
00:13:49,279 --> 00:13:51,839
actually a paper um dedicated just to to

369
00:13:51,839 --> 00:13:54,320
designing better user models so it's an

370
00:13:54,320 --> 00:13:55,760
important um

371
00:13:55,760 --> 00:13:58,000
important point for these systems

372
00:13:58,000 --> 00:13:58,800
um

373
00:13:58,800 --> 00:13:59,920
so

374
00:13:59,920 --> 00:14:01,920
effectively we can't assume that the

375
00:14:01,920 --> 00:14:03,839
reference user which generated the

376
00:14:03,839 --> 00:14:07,040
reference traffic is indeed um

377
00:14:07,040 --> 00:14:09,360
going to be in place when uh you're

378
00:14:09,360 --> 00:14:12,320
performing a covert embedding right so

379
00:14:12,320 --> 00:14:14,959
um in terms of the security notion

380
00:14:14,959 --> 00:14:17,600
notion excuse me we have to

381
00:14:17,600 --> 00:14:20,000
um account for the adversary's ability

382
00:14:20,000 --> 00:14:22,399
to distinguish the the covert channel

383
00:14:22,399 --> 00:14:25,519
um based only on abnormal user behavior

384
00:14:25,519 --> 00:14:27,199
right um they might not even need to

385
00:14:27,199 --> 00:14:29,600
embed anything to detect that you're in

386
00:14:29,600 --> 00:14:32,160
the covert world right

387
00:14:32,160 --> 00:14:33,519
so

388
00:14:33,519 --> 00:14:35,519
on a technical level we can we can write

389
00:14:35,519 --> 00:14:39,839
our advantage achieved by a

390
00:14:39,839 --> 00:14:41,600
fixed adversary

391
00:14:41,600 --> 00:14:43,839
we use this delta function

392
00:14:43,839 --> 00:14:46,079
it's kind of a

393
00:14:46,079 --> 00:14:48,800
shorthand not quite standard but

394
00:14:48,800 --> 00:14:50,079
essentially it's the probability that

395
00:14:50,079 --> 00:14:52,880
the adversary outputs one in the cc one

396
00:14:52,880 --> 00:14:54,480
game minus the probability that it

397
00:14:54,480 --> 00:14:57,279
outputs one in the oc 0 game right so

398
00:14:57,279 --> 00:14:58,480
that's the advantage achieved by the

399
00:14:58,480 --> 00:15:01,199
adversary for a fixed adversary right

400
00:15:01,199 --> 00:15:03,120
it's got this nice triangle a quality

401
00:15:03,120 --> 00:15:06,639
property so we can actually

402
00:15:06,639 --> 00:15:08,320
insert an intermediate game in the

403
00:15:08,320 --> 00:15:09,440
middle

404
00:15:09,440 --> 00:15:13,120
and split it into two terms um

405
00:15:13,120 --> 00:15:15,519
and really all we do is just we take

406
00:15:15,519 --> 00:15:17,680
user one and we put it at the head of

407
00:15:17,680 --> 00:15:20,079
the oc oracle

408
00:15:20,079 --> 00:15:22,079
and so now we've got these these two

409
00:15:22,079 --> 00:15:25,120
different uh advantage terms

410
00:15:25,120 --> 00:15:27,519
that can be analyzed separately

411
00:15:27,519 --> 00:15:29,120
we call them the embedding advantage and

412
00:15:29,120 --> 00:15:30,959
the user advantage and so the user

413
00:15:30,959 --> 00:15:34,320
advantage effectively represents

414
00:15:34,320 --> 00:15:36,160
the adversary's ability to distinguish

415
00:15:36,160 --> 00:15:38,639
the users based on their behavior alone

416
00:15:38,639 --> 00:15:42,880
regardless of any embedding performed

417
00:15:43,839 --> 00:15:44,959
which is what we're looking for right

418
00:15:44,959 --> 00:15:47,199
because that's that's how you would uh

419
00:15:47,199 --> 00:15:49,040
evaluate a user model or an overuser

420
00:15:49,040 --> 00:15:51,120
simulator

421
00:15:51,120 --> 00:15:53,519
okay

422
00:15:53,680 --> 00:15:55,759
okay so um i'm gonna i'm gonna finish up

423
00:15:55,759 --> 00:15:58,560
by talking about um one analysis we do

424
00:15:58,560 --> 00:16:01,040
in the paper there's a few more um but

425
00:16:01,040 --> 00:16:02,560
two of the most interesting systems we

426
00:16:02,560 --> 00:16:04,880
looked at were protozoa and balboa

427
00:16:04,880 --> 00:16:06,000
our

428
00:16:06,000 --> 00:16:09,040
uh informal term for them is a replace

429
00:16:09,040 --> 00:16:11,600
and restore scheme and i'll

430
00:16:11,600 --> 00:16:13,600
i'll explain why we use that terminology

431
00:16:13,600 --> 00:16:14,959
shortly so

432
00:16:14,959 --> 00:16:16,000
um

433
00:16:16,000 --> 00:16:19,680
protozoa uh essentially

434
00:16:19,680 --> 00:16:21,040
um

435
00:16:21,040 --> 00:16:24,240
protozoa operates on web rtc

436
00:16:24,240 --> 00:16:26,639
video conferencing streams

437
00:16:26,639 --> 00:16:28,880
uh and essentially it just

438
00:16:28,880 --> 00:16:32,720
hooks into the video codec and

439
00:16:32,720 --> 00:16:34,880
removes the outgoing video payload and

440
00:16:34,880 --> 00:16:37,920
replaces it with raw cobra data right

441
00:16:37,920 --> 00:16:39,920
and then balboa

442
00:16:39,920 --> 00:16:42,480
does much the same uh

443
00:16:42,480 --> 00:16:44,000
much the same thing although it can

444
00:16:44,000 --> 00:16:45,120
operate on a variety of different

445
00:16:45,120 --> 00:16:46,720
protocols they initially demonstrated on

446
00:16:46,720 --> 00:16:48,839
icecast audio

447
00:16:48,839 --> 00:16:52,000
um uh both of these systems um

448
00:16:52,000 --> 00:16:53,920
they're essentially they're embed wire

449
00:16:53,920 --> 00:16:55,360
right they're wire only systems by the

450
00:16:55,360 --> 00:16:57,680
way their embed wire algorithm um just

451
00:16:57,680 --> 00:16:59,199
overwrites the content the video content

452
00:16:59,199 --> 00:17:01,279
with rock over data and if they were to

453
00:17:01,279 --> 00:17:04,000
just feed that into the

454
00:17:04,000 --> 00:17:06,000
receiving application it would likely

455
00:17:06,000 --> 00:17:09,599
behave unexpectedly or perhaps crash

456
00:17:09,599 --> 00:17:12,400
which may uh produce detectable

457
00:17:12,400 --> 00:17:15,199
network responses right so um

458
00:17:15,199 --> 00:17:17,039
the the restore part is that they need

459
00:17:17,039 --> 00:17:20,000
to put valid data back in right

460
00:17:20,000 --> 00:17:21,359
um

461
00:17:21,359 --> 00:17:23,760
so protozoa uses kind of a local dummy

462
00:17:23,760 --> 00:17:25,359
video right they don't know what the

463
00:17:25,359 --> 00:17:27,119
original video was but as long as it

464
00:17:27,119 --> 00:17:29,360
matches the frame header um

465
00:17:29,360 --> 00:17:30,880
presumably the application won't behave

466
00:17:30,880 --> 00:17:32,559
any differently

467
00:17:32,559 --> 00:17:35,520
balboa's even more

468
00:17:36,880 --> 00:17:38,640
careful i should say in that they

469
00:17:38,640 --> 00:17:40,559
actually cache the data that they

470
00:17:40,559 --> 00:17:42,960
requested and put the actual data that

471
00:17:42,960 --> 00:17:45,120
was sent back in through

472
00:17:45,120 --> 00:17:47,679
reference to a short pointer

473
00:17:47,679 --> 00:17:50,240
okay so

474
00:17:53,760 --> 00:17:57,280
all right so on a technical level

475
00:17:57,280 --> 00:18:01,600
to look at what's going on here um

476
00:18:01,600 --> 00:18:02,720
we we

477
00:18:02,720 --> 00:18:04,559
we okay so what they're trying to do is

478
00:18:04,559 --> 00:18:07,280
avoid um unexpected behavior on the

479
00:18:07,280 --> 00:18:09,679
receiver end right because both of them

480
00:18:09,679 --> 00:18:12,799
use encryption um on the the outgoing

481
00:18:12,799 --> 00:18:13,760
data

482
00:18:13,760 --> 00:18:14,640
so it's

483
00:18:14,640 --> 00:18:17,520
unlikely to to cause any change right so

484
00:18:17,520 --> 00:18:18,559
uh

485
00:18:18,559 --> 00:18:21,919
to to measure just the

486
00:18:21,919 --> 00:18:24,559
distinguishability produced by the sync

487
00:18:24,559 --> 00:18:27,440
response we create this hybrid game

488
00:18:27,440 --> 00:18:29,679
we call it the sync gaap game and all we

489
00:18:29,679 --> 00:18:31,679
do is take sources output and feed it

490
00:18:31,679 --> 00:18:33,679
directly to sync right instead of taking

491
00:18:33,679 --> 00:18:36,080
whatever extract wire produced

492
00:18:36,080 --> 00:18:38,400
and so we can just remove extract wire

493
00:18:38,400 --> 00:18:40,320
because in the security game its

494
00:18:40,320 --> 00:18:42,880
output is not used anymore um and so the

495
00:18:42,880 --> 00:18:43,679
the

496
00:18:43,679 --> 00:18:45,039
if you look at the difference between

497
00:18:45,039 --> 00:18:46,799
the covert channel and sync

498
00:18:46,799 --> 00:18:48,400
sync gap game

499
00:18:48,400 --> 00:18:50,559
uh the wc

500
00:18:50,559 --> 00:18:52,799
component of the output is identical

501
00:18:52,799 --> 00:18:54,960
right produced through the same sequence

502
00:18:54,960 --> 00:18:58,080
but the ws varies right and then uh also

503
00:18:58,080 --> 00:18:59,520
if you look at the difference between

504
00:18:59,520 --> 00:19:01,679
the sync that game sync gap game in the

505
00:19:01,679 --> 00:19:03,200
over channel game

506
00:19:03,200 --> 00:19:04,400
um

507
00:19:04,400 --> 00:19:07,919
the uh the ws output is identical but

508
00:19:07,919 --> 00:19:10,240
the wc component changes right so this

509
00:19:10,240 --> 00:19:12,240
this just allows us to split

510
00:19:12,240 --> 00:19:14,960
um that embedding advantage term into

511
00:19:14,960 --> 00:19:17,200
two terms one representing the changes

512
00:19:17,200 --> 00:19:18,960
caused to the outgoing client traffic

513
00:19:18,960 --> 00:19:22,400
one representing the changes

514
00:19:22,400 --> 00:19:26,160
induced in the return uh server traffic

515
00:19:26,160 --> 00:19:27,360
okay so

516
00:19:27,360 --> 00:19:29,440
finish up um

517
00:19:29,440 --> 00:19:31,840
i'll go back to our expression for the

518
00:19:31,840 --> 00:19:33,600
advantage for a fixed adversary right

519
00:19:33,600 --> 00:19:35,120
and so now we can split that left-hand

520
00:19:35,120 --> 00:19:36,000
term

521
00:19:36,000 --> 00:19:37,120
um

522
00:19:37,120 --> 00:19:41,440
into uh two terms um that uh go through

523
00:19:41,440 --> 00:19:42,799
the sync gap game

524
00:19:42,799 --> 00:19:44,400
and so

525
00:19:44,400 --> 00:19:46,880
if we um

526
00:19:46,880 --> 00:19:50,960
if we can prove or assume

527
00:19:50,960 --> 00:19:53,039
bounds for each of these independently

528
00:19:53,039 --> 00:19:55,760
then um we can get a

529
00:19:55,760 --> 00:19:58,400
um hopefully relatively tight bound on

530
00:19:58,400 --> 00:20:01,280
the overall in security

531
00:20:01,280 --> 00:20:03,360
and so that's what we do uh in the paper

532
00:20:03,360 --> 00:20:06,000
in in more detail with uh proof

533
00:20:06,000 --> 00:20:08,000
we bound the passive insecurity of

534
00:20:08,000 --> 00:20:09,760
protozoa and balboa with these three

535
00:20:09,760 --> 00:20:11,440
terms

536
00:20:11,440 --> 00:20:12,880
sigma represents the sink

537
00:20:12,880 --> 00:20:15,679
indistinguishability which is

538
00:20:15,679 --> 00:20:19,520
almost certainly zero for balboa and

539
00:20:19,520 --> 00:20:21,360
most likely zero for

540
00:20:21,360 --> 00:20:24,320
protozoa as well

541
00:20:24,320 --> 00:20:26,559
um the epsilon term is the idcpa

542
00:20:26,559 --> 00:20:27,919
security of the secure channel that they

543
00:20:27,919 --> 00:20:29,840
utilize right so as long as they don't

544
00:20:29,840 --> 00:20:31,679
change the length of any

545
00:20:31,679 --> 00:20:33,919
uh payload that they overwrite it's just

546
00:20:33,919 --> 00:20:36,000
it's encrypted so um it should be

547
00:20:36,000 --> 00:20:37,440
indistinguishable with this epsilon

548
00:20:37,440 --> 00:20:39,440
bound and and then the last term of

549
00:20:39,440 --> 00:20:40,799
course is this delta user and

550
00:20:40,799 --> 00:20:43,760
distinguishability um which again is a

551
00:20:43,760 --> 00:20:46,240
non-cryptographic assumption but all of

552
00:20:46,240 --> 00:20:49,440
these papers tend to address it by

553
00:20:49,440 --> 00:20:51,039
providing some sort of empirical

554
00:20:51,039 --> 00:20:55,200
evidence of the magnitude of that term

555
00:20:55,200 --> 00:20:56,640
okay

556
00:20:56,640 --> 00:20:58,720
so that's my talk

557
00:20:58,720 --> 00:21:00,159
to recap

558
00:21:00,159 --> 00:21:02,000
our paper presents the first formal

559
00:21:02,000 --> 00:21:04,240
definitions and security notion provable

560
00:21:04,240 --> 00:21:06,080
security framework that's tailored to

561
00:21:06,080 --> 00:21:08,080
these real world uh covert channel

562
00:21:08,080 --> 00:21:10,240
systems um i encourage you to check out

563
00:21:10,240 --> 00:21:11,840
the paper it's got the the full

564
00:21:11,840 --> 00:21:13,440
technical treatment we also talk about

565
00:21:13,440 --> 00:21:15,760
some user only systems and have a proof

566
00:21:15,760 --> 00:21:19,039
related to those as well um

567
00:21:19,039 --> 00:21:21,039
and we're looking forward to uh

568
00:21:21,039 --> 00:21:23,760
extending this model um to capture some

569
00:21:23,760 --> 00:21:26,000
of some of more of the adversarial

570
00:21:26,000 --> 00:21:27,200
behavior that we see in the real world

571
00:21:27,200 --> 00:21:29,039
especially like an active security

572
00:21:29,039 --> 00:21:30,559
notion for

573
00:21:30,559 --> 00:21:32,559
say active probing attacks because that

574
00:21:32,559 --> 00:21:34,400
that's a very common tactic used in

575
00:21:34,400 --> 00:21:35,679
practice

576
00:21:35,679 --> 00:21:38,480
so again thank you and uh

577
00:21:38,480 --> 00:21:42,440
i'll take any questions you have

578
00:21:51,840 --> 00:21:53,360
hi

579
00:21:53,360 --> 00:21:54,400
hello

580
00:21:54,400 --> 00:21:55,880
can you go back to the sync

581
00:21:55,880 --> 00:21:59,200
indistinguishability slide probably

582
00:21:59,200 --> 00:22:01,120
or if you can't that's fine

583
00:22:01,120 --> 00:22:02,320
um

584
00:22:02,320 --> 00:22:06,880
ws was ws varied and wc was identical

585
00:22:06,880 --> 00:22:10,080
but can you go over again when was ws

586
00:22:10,080 --> 00:22:13,840
identical and wc varied again

587
00:22:13,840 --> 00:22:17,280
this one yeah so um you said ws varies

588
00:22:17,280 --> 00:22:19,360
and wc was identical but then you said

589
00:22:19,360 --> 00:22:20,480
um

590
00:22:20,480 --> 00:22:25,400
wc was identical yeah

591
00:22:33,919 --> 00:22:37,120
yeah so so right so the the flow of of

592
00:22:37,120 --> 00:22:38,720
the inputs and outputs right goes

593
00:22:38,720 --> 00:22:40,320
through embeds sort embed user source

594
00:22:40,320 --> 00:22:41,840
and bed wire and then the output of that

595
00:22:41,840 --> 00:22:46,240
is wc in in both the cc and sg oracle

596
00:22:46,240 --> 00:22:47,120
right

597
00:22:47,120 --> 00:22:49,440
now ws on the other hand right in the cc

598
00:22:49,440 --> 00:22:53,360
oracle it's ws is produced by uh the

599
00:22:53,360 --> 00:22:55,520
the modified wc that goes through embed

600
00:22:55,520 --> 00:22:57,280
wire and extract wire

601
00:22:57,280 --> 00:22:59,360
right whereas in sg it's produced

602
00:22:59,360 --> 00:23:02,880
straight from source's output

603
00:23:02,880 --> 00:23:06,480
does that make sense thank you yes

604
00:23:07,600 --> 00:23:10,080
hello quick question uh masterfunny from

605
00:23:10,080 --> 00:23:11,440
mbi's people

606
00:23:11,440 --> 00:23:12,400
uh

607
00:23:12,400 --> 00:23:13,919
i've just had a look at your paper and

608
00:23:13,919 --> 00:23:16,880
if it's then correctly um you're

609
00:23:16,880 --> 00:23:20,240
going at it from the direction of um

610
00:23:20,240 --> 00:23:22,880
communication channel and privacy

611
00:23:22,880 --> 00:23:23,760
um

612
00:23:23,760 --> 00:23:25,760
did you contrast this to information

613
00:23:25,760 --> 00:23:28,720
flow control uh prior work or crypto

614
00:23:28,720 --> 00:23:30,960
virology being the work of young and

615
00:23:30,960 --> 00:23:34,159
young 2004

616
00:23:34,480 --> 00:23:36,960
yeah oh okay yeah yeah so i've i've

617
00:23:36,960 --> 00:23:39,440
i didn't hear the first uh term you said

618
00:23:39,440 --> 00:23:40,960
cryptovirology but what was the first

619
00:23:40,960 --> 00:23:42,720
one yeah uh the first one was

620
00:23:42,720 --> 00:23:45,440
information flow control like uh type

621
00:23:45,440 --> 00:23:48,960
based uh local machine stuff maybe over

622
00:23:48,960 --> 00:23:52,159
networks yeah so um that's not an area

623
00:23:52,159 --> 00:23:53,600
i'm familiar with although you did

624
00:23:53,600 --> 00:23:56,159
mention uh the work of young and young

625
00:23:56,159 --> 00:23:57,120
um

626
00:23:57,120 --> 00:23:58,320
like

627
00:23:58,320 --> 00:24:00,720
cleptography i believe is is what

628
00:24:00,720 --> 00:24:04,720
they've termed some of that stuff um i i

629
00:24:04,720 --> 00:24:08,320
had a lot of interest in that early on

630
00:24:08,320 --> 00:24:10,240
some of those ideas

631
00:24:10,240 --> 00:24:14,320
kind of influenced our design i think

632
00:24:16,720 --> 00:24:18,159
i'm not sure what else to say but but

633
00:24:18,159 --> 00:24:20,000
yeah it was a little bit of an influence

634
00:24:20,000 --> 00:24:21,600
it definitely went into we don't uh

635
00:24:21,600 --> 00:24:23,520
discuss that direct

636
00:24:23,520 --> 00:24:27,440
uh maybe uh lineage in the paper itself

637
00:24:27,440 --> 00:24:28,320
um

638
00:24:28,320 --> 00:24:30,720
maybe we could talk afterwards um in

639
00:24:30,720 --> 00:24:33,919
more detail about what you're looking at

640
00:24:33,919 --> 00:24:35,120
but thank you yeah that's a great

641
00:24:35,120 --> 00:24:36,400
question

642
00:24:36,400 --> 00:24:37,840
thank you

643
00:24:37,840 --> 00:24:41,200
so i have a couple of questions so

644
00:24:41,200 --> 00:24:43,760
your sync indistinguishability notion

645
00:24:43,760 --> 00:24:45,520
seems to be well defined when you have a

646
00:24:45,520 --> 00:24:47,440
single sync but there could be

647
00:24:47,440 --> 00:24:49,279
applications where you actually have

648
00:24:49,279 --> 00:24:51,919
multiple syncs one example one bad

649
00:24:51,919 --> 00:24:54,400
example i came up with is say you have a

650
00:24:54,400 --> 00:24:56,720
botnet command and controls system who

651
00:24:56,720 --> 00:24:58,640
wants to contact the bots

652
00:24:58,640 --> 00:25:01,039
you're contacting many bots

653
00:25:01,039 --> 00:25:02,880
so you have many things is this still

654
00:25:02,880 --> 00:25:06,000
something that we could extend

655
00:25:06,000 --> 00:25:09,279
um possibly so so um

656
00:25:09,279 --> 00:25:10,880
i will i will readily admit that one

657
00:25:10,880 --> 00:25:15,600
limitation of our model is that it's um

658
00:25:15,600 --> 00:25:16,960
it doesn't account for any kind of

659
00:25:16,960 --> 00:25:19,600
uncertainty in like what is the

660
00:25:19,600 --> 00:25:21,200
application that's actually sending and

661
00:25:21,200 --> 00:25:23,440
receiving data it's it's you know

662
00:25:23,440 --> 00:25:25,039
like all these cryptographic notions

663
00:25:25,039 --> 00:25:28,000
it's it's known fully to the adversary

664
00:25:28,000 --> 00:25:29,919
and all of its behavior presumably then

665
00:25:29,919 --> 00:25:31,919
is also known as well

666
00:25:31,919 --> 00:25:34,320
right so um i guess there's maybe two

667
00:25:34,320 --> 00:25:35,679
ways to interpret your question one is

668
00:25:35,679 --> 00:25:38,159
like interpreting kind of a broadcast

669
00:25:38,159 --> 00:25:40,159
uh steganography notion maybe but the

670
00:25:40,159 --> 00:25:43,279
other one is is uncertainty about the

671
00:25:43,279 --> 00:25:46,240
application itself and its behavior um

672
00:25:46,240 --> 00:25:48,159
there's there's no way to fit that into

673
00:25:48,159 --> 00:25:50,000
this model as it stands right that would

674
00:25:50,000 --> 00:25:51,120
require some

675
00:25:51,120 --> 00:25:53,760
some uh some modifications for sure but

676
00:25:53,760 --> 00:25:54,799
it's something we definitely need to

677
00:25:54,799 --> 00:25:57,600
look at to to model real world

678
00:25:57,600 --> 00:25:59,840
scenarios got it thank you and then one

679
00:25:59,840 --> 00:26:01,120
last question

680
00:26:01,120 --> 00:26:03,520
i'm a simple guy you said ask you about

681
00:26:03,520 --> 00:26:05,760
hopper at all and computational stigma

682
00:26:05,760 --> 00:26:07,360
graphic and why it's not used so i'm

683
00:26:07,360 --> 00:26:09,039
gonna ask you about that so can you can

684
00:26:09,039 --> 00:26:10,480
you give me an idea thank you for the

685
00:26:10,480 --> 00:26:13,039
softball yeah

686
00:26:13,039 --> 00:26:14,240
um

687
00:26:14,240 --> 00:26:16,400
no i spent a lot of time with this work

688
00:26:16,400 --> 00:26:17,919
um

689
00:26:17,919 --> 00:26:21,039
so um so one major difference i think

690
00:26:21,039 --> 00:26:23,279
but i can point out off the bat is that

691
00:26:23,279 --> 00:26:25,600
the the notion um

692
00:26:25,600 --> 00:26:26,720
created by

693
00:26:26,720 --> 00:26:29,360
uh hopper van on langford is

694
00:26:29,360 --> 00:26:31,840
uh atomic in the sense that you take the

695
00:26:31,840 --> 00:26:34,000
thing you want to hide and you

696
00:26:34,000 --> 00:26:36,080
input it into the stego system

697
00:26:36,080 --> 00:26:38,640
and then it has to embed that entire

698
00:26:38,640 --> 00:26:40,880
message in however many

699
00:26:40,880 --> 00:26:43,600
uh pieces of cover traffic it takes

700
00:26:43,600 --> 00:26:44,480
right

701
00:26:44,480 --> 00:26:45,360
um

702
00:26:45,360 --> 00:26:46,960
which which doesn't really match

703
00:26:46,960 --> 00:26:48,400
real-world systems it leads to this kind

704
00:26:48,400 --> 00:26:51,279
of weird um constraints on like the main

705
00:26:51,279 --> 00:26:53,120
entropy of

706
00:26:53,120 --> 00:26:54,720
the channel

707
00:26:54,720 --> 00:26:57,360
right and and so you you have these

708
00:26:57,360 --> 00:26:59,120
these kind of arbitrary results where if

709
00:26:59,120 --> 00:27:00,400
the channel

710
00:27:00,400 --> 00:27:01,840
you know has points where there is very

711
00:27:01,840 --> 00:27:04,320
little entropy then you kind of have to

712
00:27:04,320 --> 00:27:05,919
spread it out

713
00:27:05,919 --> 00:27:09,120
based on that that minimum as opposed to

714
00:27:09,120 --> 00:27:10,880
if it's not a black box channel if you

715
00:27:10,880 --> 00:27:12,799
understand the structure of the channel

716
00:27:12,799 --> 00:27:13,600
um

717
00:27:13,600 --> 00:27:15,919
you know your stego system can embed

718
00:27:15,919 --> 00:27:18,399
where it knows it's safe to embed

719
00:27:18,399 --> 00:27:20,159
right um so i mean i think that was the

720
00:27:20,159 --> 00:27:23,360
biggest problem that we we

721
00:27:23,360 --> 00:27:25,039
encountered that we decided not to use

722
00:27:25,039 --> 00:27:26,720
it um but there's a few other things and

723
00:27:26,720 --> 00:27:28,320
they all kind of stem from um their

724
00:27:28,320 --> 00:27:30,559
assumption that the the channel oracle

725
00:27:30,559 --> 00:27:32,559
right that you sample from to get your

726
00:27:32,559 --> 00:27:34,559
your cover traffic

727
00:27:34,559 --> 00:27:36,320
um is a black box

728
00:27:36,320 --> 00:27:38,399
right and the results are universal for

729
00:27:38,399 --> 00:27:40,159
black black systems but there really

730
00:27:40,159 --> 00:27:42,799
aren't any black box systems right

731
00:27:42,799 --> 00:27:44,960
you know you know something about the

732
00:27:44,960 --> 00:27:47,120
stuff going over the wire um and you're

733
00:27:47,120 --> 00:27:48,480
always going to use that and so you need

734
00:27:48,480 --> 00:27:51,039
to be able to talk about it in some um

735
00:27:51,039 --> 00:27:52,960
you know coherent way

736
00:27:52,960 --> 00:27:56,080
awesome thank you so much

737
00:27:57,600 --> 00:28:00,760
thank you

