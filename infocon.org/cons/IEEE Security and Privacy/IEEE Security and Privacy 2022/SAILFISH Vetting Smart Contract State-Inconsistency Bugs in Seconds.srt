1
00:00:02,879 --> 00:00:06,000
um hello everyone i'm priyanka

2
00:00:06,000 --> 00:00:07,680
and today i'm going to talk about our

3
00:00:07,680 --> 00:00:09,920
work selfish letting smart contract

4
00:00:09,920 --> 00:00:14,360
state inconsistency bugs in seconds

5
00:00:18,240 --> 00:00:20,160
smart contracts are computer programs

6
00:00:20,160 --> 00:00:22,080
that run on top of an ethereum virtual

7
00:00:22,080 --> 00:00:23,199
machine

8
00:00:23,199 --> 00:00:25,199
many decentralized protocols use this

9
00:00:25,199 --> 00:00:27,039
smart contract to process high value

10
00:00:27,039 --> 00:00:29,439
money transactions

11
00:00:29,439 --> 00:00:32,558
as of 2022 april the total value locked

12
00:00:32,558 --> 00:00:34,640
across decentralized protocols is around

13
00:00:34,640 --> 00:00:38,800
75 billion which is huge

14
00:00:38,800 --> 00:00:40,879
as they have gained so much popularity

15
00:00:40,879 --> 00:00:42,960
this smart contract have also become the

16
00:00:42,960 --> 00:00:45,600
target of attackers as well

17
00:00:45,600 --> 00:00:47,680
our vulnerability in smart contracts can

18
00:00:47,680 --> 00:00:51,199
result in loss of millions of dollars

19
00:00:51,199 --> 00:00:53,920
one such attack happened in 2016 which

20
00:00:53,920 --> 00:00:56,480
is known as a notorious dow re-intrinsic

21
00:00:56,480 --> 00:00:58,879
hack that resulted in a loss of 70

22
00:00:58,879 --> 00:01:01,199
million worth of cryptocurrencies

23
00:01:01,199 --> 00:01:03,520
and since then there has been flurry of

24
00:01:03,520 --> 00:01:05,600
such attacks happening across several

25
00:01:05,600 --> 00:01:07,840
decentralized protocols resulted in

26
00:01:07,840 --> 00:01:11,439
around million dollar losses

27
00:01:11,520 --> 00:01:13,760
to prevent or detect such attacks there

28
00:01:13,760 --> 00:01:15,920
has been research in both academia and

29
00:01:15,920 --> 00:01:18,240
industry the span across from static

30
00:01:18,240 --> 00:01:20,720
analysis to symbolic execution runtime

31
00:01:20,720 --> 00:01:23,280
analysis verification

32
00:01:23,280 --> 00:01:24,880
though it's good to see that we have

33
00:01:24,880 --> 00:01:26,799
different techniques to what such kind

34
00:01:26,799 --> 00:01:28,880
of attacks however they have certain

35
00:01:28,880 --> 00:01:30,159
limitations

36
00:01:30,159 --> 00:01:32,320
for example the symbolic execution bit

37
00:01:32,320 --> 00:01:34,079
techniques are not scalable for large

38
00:01:34,079 --> 00:01:37,280
contracts static analysis incurs false

39
00:01:37,280 --> 00:01:39,920
positives they are not precise also most

40
00:01:39,920 --> 00:01:41,920
of the prior tools relies on some

41
00:01:41,920 --> 00:01:44,479
specific bug signatures and misses

42
00:01:44,479 --> 00:01:46,399
others

43
00:01:46,399 --> 00:01:48,320
therefore in order to fill the gap fill

44
00:01:48,320 --> 00:01:51,040
in the gap we come up with a technique

45
00:01:51,040 --> 00:01:53,280
to detect two of the most complex to

46
00:01:53,280 --> 00:01:55,520
detect smart contract bugs that is known

47
00:01:55,520 --> 00:01:57,680
as reincurrency and transaction order

48
00:01:57,680 --> 00:01:59,840
dependence or tod

49
00:01:59,840 --> 00:02:02,320
uh from this point not onwards i'm going

50
00:02:02,320 --> 00:02:04,399
to refer transaction order dependence at

51
00:02:04,399 --> 00:02:07,439
tod so our technique skills well for

52
00:02:07,439 --> 00:02:09,280
large contracts and also achieves

53
00:02:09,280 --> 00:02:10,639
precision

54
00:02:10,639 --> 00:02:12,959
specifically all the prior tools are

55
00:02:12,959 --> 00:02:15,680
either precise or scalable

56
00:02:15,680 --> 00:02:18,239
whereas selfish keeps a balance between

57
00:02:18,239 --> 00:02:20,560
these two

58
00:02:20,560 --> 00:02:22,239
in selfish we introduce state

59
00:02:22,239 --> 00:02:24,080
inconsistency which is a more general

60
00:02:24,080 --> 00:02:26,959
definition of reentrancy and tod

61
00:02:26,959 --> 00:02:29,840
we then reduce state inconsistency into

62
00:02:29,840 --> 00:02:31,760
hazardous access

63
00:02:31,760 --> 00:02:33,280
which is nothing but

64
00:02:33,280 --> 00:02:35,040
detecting a read-write dependencies of a

65
00:02:35,040 --> 00:02:36,720
common storage variable which is a root

66
00:02:36,720 --> 00:02:38,800
cause of si

67
00:02:38,800 --> 00:02:41,599
with this selfish can detect reintransi

68
00:02:41,599 --> 00:02:44,160
and tod bugs including the ones missed

69
00:02:44,160 --> 00:02:46,560
by the prior tools

70
00:02:46,560 --> 00:02:49,280
also selfish combine static analysis and

71
00:02:49,280 --> 00:02:51,840
symbolic execution not only that in

72
00:02:51,840 --> 00:02:53,599
order to be scalable and instead of

73
00:02:53,599 --> 00:02:55,200
doing a whole contract symbolic

74
00:02:55,200 --> 00:02:56,400
execution

75
00:02:56,400 --> 00:02:58,959
selfish summarizes the storage variable

76
00:02:58,959 --> 00:03:01,280
of the contract using a technique known

77
00:03:01,280 --> 00:03:03,360
as value summary analysis and use this

78
00:03:03,360 --> 00:03:05,120
as a precondition during the symbolic

79
00:03:05,120 --> 00:03:06,239
execution

80
00:03:06,239 --> 00:03:08,879
with that selfish can scale well and

81
00:03:08,879 --> 00:03:11,360
achieve speciation

82
00:03:11,360 --> 00:03:13,519
so let's first understand what is state

83
00:03:13,519 --> 00:03:16,159
inconsistency in terms of selfish so

84
00:03:16,159 --> 00:03:18,560
let's say we have a smart contract c

85
00:03:18,560 --> 00:03:21,360
and it has got n methods

86
00:03:21,360 --> 00:03:24,720
uh we define a schedule h that contains

87
00:03:24,720 --> 00:03:27,440
the ordered external or public function

88
00:03:27,440 --> 00:03:29,840
invocations of c

89
00:03:29,840 --> 00:03:33,280
we have schedule h1 and which operates

90
00:03:33,280 --> 00:03:35,680
on an initial contract state is 0 and

91
00:03:35,680 --> 00:03:38,560
the final contract state becomes s1

92
00:03:38,560 --> 00:03:41,360
we have got another schedule h2 and that

93
00:03:41,360 --> 00:03:43,840
operates on an initial contract state a0

94
00:03:43,840 --> 00:03:46,640
and the final contract state becomes s2

95
00:03:46,640 --> 00:03:50,080
please note that both h1 and h2 contain

96
00:03:50,080 --> 00:03:52,560
the same function invocations

97
00:03:52,560 --> 00:03:55,840
now if h1 is not equals to h2 meaning

98
00:03:55,840 --> 00:03:58,959
that even if both h1 and h2 contain the

99
00:03:58,959 --> 00:04:01,360
same function invocations the order of

100
00:04:01,360 --> 00:04:03,519
their invocations are different in both

101
00:04:03,519 --> 00:04:06,480
the schedules also if the final states

102
00:04:06,480 --> 00:04:08,480
are different that is s1 and not equal

103
00:04:08,480 --> 00:04:11,040
stress 2 then we say the contract is

104
00:04:11,040 --> 00:04:14,400
said to have a state inconsistency bug

105
00:04:14,400 --> 00:04:17,040
in selfish we deal with two different

106
00:04:17,040 --> 00:04:19,279
kind of state infants inconsistency bugs

107
00:04:19,279 --> 00:04:22,560
they are reintroducing and tod here the

108
00:04:22,560 --> 00:04:25,759
tod is a subset of the generalized tod

109
00:04:25,759 --> 00:04:28,880
where we only care about uh whether the

110
00:04:28,880 --> 00:04:30,800
transaction order dependence influence

111
00:04:30,800 --> 00:04:33,199
the ether flow out of a contract

112
00:04:33,199 --> 00:04:35,840
for reintroducing we deal with single

113
00:04:35,840 --> 00:04:38,000
function and cross functionary intensity

114
00:04:38,000 --> 00:04:39,280
and some other variants of free

115
00:04:39,280 --> 00:04:40,720
influence if they are create based

116
00:04:40,720 --> 00:04:42,720
delegate based tail read destructive

117
00:04:42,720 --> 00:04:44,560
write etc

118
00:04:44,560 --> 00:04:46,400
for the sake of this presentation i'm

119
00:04:46,400 --> 00:04:48,479
only going to talk about the simple

120
00:04:48,479 --> 00:04:50,080
simplest case of free entrancy which is

121
00:04:50,080 --> 00:04:52,240
single function re-intrinsic

122
00:04:52,240 --> 00:04:54,160
to know the details about other bugs

123
00:04:54,160 --> 00:04:57,440
please check out our paper

124
00:04:57,440 --> 00:04:59,280
so let's first understand what is a

125
00:04:59,280 --> 00:05:01,840
reintrurancy so for these i have a

126
00:05:01,840 --> 00:05:04,240
simple example which is a bank contract

127
00:05:04,240 --> 00:05:06,240
that has got a visual functionality for

128
00:05:06,240 --> 00:05:07,600
video function

129
00:05:07,600 --> 00:05:09,199
the state of the back contract is

130
00:05:09,199 --> 00:05:11,600
displayed on the top right and we have a

131
00:05:11,600 --> 00:05:13,520
user contract that wants to withdraw a

132
00:05:13,520 --> 00:05:15,440
certain amount from the bank and the

133
00:05:15,440 --> 00:05:17,039
state of the user contract displayed on

134
00:05:17,039 --> 00:05:18,800
the top left

135
00:05:18,800 --> 00:05:21,039
so the initial state of the bank is the

136
00:05:21,039 --> 00:05:23,680
bank's balance is around 500 ether and

137
00:05:23,680 --> 00:05:26,000
the account balance of the user which is

138
00:05:26,000 --> 00:05:27,919
this which is uh represent as a balance

139
00:05:27,919 --> 00:05:31,120
state variable is around 100 ether

140
00:05:31,120 --> 00:05:33,440
so the user first invokes a visual

141
00:05:33,440 --> 00:05:35,919
function with hundred ether and the bank

142
00:05:35,919 --> 00:05:38,479
will then check whether the user has got

143
00:05:38,479 --> 00:05:41,440
sufficient balance for the withdrawal

144
00:05:41,440 --> 00:05:43,680
and if that is the case it will transfer

145
00:05:43,680 --> 00:05:45,759
the amount to the user and wait for the

146
00:05:45,759 --> 00:05:48,320
transfer call to return now in this case

147
00:05:48,320 --> 00:05:50,400
the bank's balance is reduced to 400

148
00:05:50,400 --> 00:05:52,560
ether and the user balance user contract

149
00:05:52,560 --> 00:05:55,360
balance is now increased to 100 ether

150
00:05:55,360 --> 00:05:57,600
after the transfer call returns

151
00:05:57,600 --> 00:06:00,400
the bank will finally update the

152
00:06:00,400 --> 00:06:02,639
account balance of the user which is now

153
00:06:02,639 --> 00:06:05,440
zero so at this moment if the user wants

154
00:06:05,440 --> 00:06:07,199
to withdraw save more amount from the

155
00:06:07,199 --> 00:06:08,800
bank

156
00:06:08,800 --> 00:06:10,960
it owned because the bank will check

157
00:06:10,960 --> 00:06:12,400
that the balance account balance of the

158
00:06:12,400 --> 00:06:15,199
user is already zero and therefore it

159
00:06:15,199 --> 00:06:16,240
won't be able to withdraw any more

160
00:06:16,240 --> 00:06:18,639
amount

161
00:06:18,639 --> 00:06:20,800
so this is an example of non-rain turned

162
00:06:20,800 --> 00:06:22,080
execution

163
00:06:22,080 --> 00:06:24,800
and the final contract state is exactly

164
00:06:24,800 --> 00:06:27,680
what we expect

165
00:06:27,680 --> 00:06:29,600
the bank contract is vulnerable to and

166
00:06:29,600 --> 00:06:32,160
reintroduce the attack so let's see how

167
00:06:32,160 --> 00:06:34,319
let's say we have now this attacker

168
00:06:34,319 --> 00:06:36,639
instead of a benign user

169
00:06:36,639 --> 00:06:37,600
and

170
00:06:37,600 --> 00:06:38,319
the

171
00:06:38,319 --> 00:06:40,000
when the when the for after the first

172
00:06:40,000 --> 00:06:42,560
transfer call like the banks balance is

173
00:06:42,560 --> 00:06:44,560
around 400 and the user contract

174
00:06:44,560 --> 00:06:46,639
balances are 100 ether instead of

175
00:06:46,639 --> 00:06:48,639
returning to the bank contract the

176
00:06:48,639 --> 00:06:51,520
attacker now invokes the vidra function

177
00:06:51,520 --> 00:06:52,400
again

178
00:06:52,400 --> 00:06:54,560
the goal of the attacker is to withdraw

179
00:06:54,560 --> 00:06:57,440
more than 100 ether from the bank

180
00:06:57,440 --> 00:06:59,919
at this moment the account balance of

181
00:06:59,919 --> 00:07:02,240
the user is still 100 so from the point

182
00:07:02,240 --> 00:07:05,120
of view of the bank it feels that the

183
00:07:05,120 --> 00:07:07,280
user has got sufficient balance for the

184
00:07:07,280 --> 00:07:08,720
withdrawal

185
00:07:08,720 --> 00:07:10,479
since it is reading a stale value of the

186
00:07:10,479 --> 00:07:12,479
account balance of the user

187
00:07:12,479 --> 00:07:14,880
therefore the withdrawal will go through

188
00:07:14,880 --> 00:07:16,720
and the bank balance will be reduced to

189
00:07:16,720 --> 00:07:17,840
300

190
00:07:17,840 --> 00:07:19,360
user contract balance will be increased

191
00:07:19,360 --> 00:07:21,599
to 200 however the account balance of

192
00:07:21,599 --> 00:07:24,160
the user is still 100.

193
00:07:24,160 --> 00:07:26,639
after both the transfer call returns the

194
00:07:26,639 --> 00:07:28,639
bank will finally update the account

195
00:07:28,639 --> 00:07:31,680
balance of the user however it is too

196
00:07:31,680 --> 00:07:33,680
late and the account balance of the user

197
00:07:33,680 --> 00:07:36,560
is already negative

198
00:07:36,639 --> 00:07:38,800
so in this case as we can see the

199
00:07:38,800 --> 00:07:40,880
attacker finally could drain out more

200
00:07:40,880 --> 00:07:43,840
than 100 ethers though she only had 100

201
00:07:43,840 --> 00:07:46,800
ether as our account balance

202
00:07:46,800 --> 00:07:48,960
so this is an example of re-intron

203
00:07:48,960 --> 00:07:51,599
execution and the final contract state

204
00:07:51,599 --> 00:07:55,680
is exactly not what we expect here

205
00:07:55,680 --> 00:07:57,680
so let's try to understand the relation

206
00:07:57,680 --> 00:07:59,440
between state inconsistency and

207
00:07:59,440 --> 00:08:01,840
reinferencing and let's consider the

208
00:08:01,840 --> 00:08:04,560
bank example so we have seen two

209
00:08:04,560 --> 00:08:06,639
different kind of executions of the bank

210
00:08:06,639 --> 00:08:08,479
non-printed execution we define our

211
00:08:08,479 --> 00:08:10,960
schedule h1 and the reinforced execution

212
00:08:10,960 --> 00:08:13,599
which is defined as schedule h2

213
00:08:13,599 --> 00:08:17,440
okay so here as we can see h1 is not

214
00:08:17,440 --> 00:08:20,080
equals to h2 because the invocations of

215
00:08:20,080 --> 00:08:21,840
the withdraw function in both the

216
00:08:21,840 --> 00:08:23,520
schedules are different

217
00:08:23,520 --> 00:08:25,599
and the final state of the bank contract

218
00:08:25,599 --> 00:08:27,120
that is in this case the account balance

219
00:08:27,120 --> 00:08:29,599
of the user is also different and hence

220
00:08:29,599 --> 00:08:32,000
we can conclude that the bank contract

221
00:08:32,000 --> 00:08:35,679
has a state inconsistency bug

222
00:08:35,679 --> 00:08:38,719
so with state inconsistency what we want

223
00:08:38,719 --> 00:08:40,479
to convey is that

224
00:08:40,479 --> 00:08:42,958
given two schedules that operate on an

225
00:08:42,958 --> 00:08:44,800
initial contract state

226
00:08:44,800 --> 00:08:48,000
and result in a different contract state

227
00:08:48,000 --> 00:08:49,839
then there should exist two such

228
00:08:49,839 --> 00:08:52,560
operations read or write and one of them

229
00:08:52,560 --> 00:08:55,279
is a right on a common storage variable

230
00:08:55,279 --> 00:08:57,279
such that

231
00:08:57,279 --> 00:09:00,240
the like such that they their relative

232
00:09:00,240 --> 00:09:02,240
order of their executions differ in

233
00:09:02,240 --> 00:09:03,760
these two schedules

234
00:09:03,760 --> 00:09:06,560
so we define such a read write hazard as

235
00:09:06,560 --> 00:09:08,320
hazardous axis

236
00:09:08,320 --> 00:09:11,040
please note that these two operations

237
00:09:11,040 --> 00:09:12,880
from this hazardous axis should belong

238
00:09:12,880 --> 00:09:15,200
to two different execution paths or two

239
00:09:15,200 --> 00:09:18,080
function invocations

240
00:09:18,080 --> 00:09:19,680
so let's try to understand this

241
00:09:19,680 --> 00:09:22,080
hazardous access with a simple example

242
00:09:22,080 --> 00:09:23,920
for the bank contract example this is

243
00:09:23,920 --> 00:09:25,519
the two invocations of the withdrawal

244
00:09:25,519 --> 00:09:27,680
function and this is an external call in

245
00:09:27,680 --> 00:09:30,000
case of reintrancy so

246
00:09:30,000 --> 00:09:31,839
the ha this is an example of the

247
00:09:31,839 --> 00:09:33,760
hazardous access pair these two read and

248
00:09:33,760 --> 00:09:36,080
write operations which are marked in red

249
00:09:36,080 --> 00:09:40,000
are the example of hazardous access pair

250
00:09:40,080 --> 00:09:42,640
so selfish in order to detect hazardous

251
00:09:42,640 --> 00:09:43,839
access pair

252
00:09:43,839 --> 00:09:45,680
does static analysis which is known as

253
00:09:45,680 --> 00:09:47,440
explorer

254
00:09:47,440 --> 00:09:49,839
it given a smart contract it builds an

255
00:09:49,839 --> 00:09:52,240
intraposterial control flow graph from

256
00:09:52,240 --> 00:09:54,160
that it extracts the data and control

257
00:09:54,160 --> 00:09:56,320
flow relations and then it builds a

258
00:09:56,320 --> 00:09:58,160
storage dependency graph that is known

259
00:09:58,160 --> 00:09:59,519
as sdg

260
00:09:59,519 --> 00:10:01,279
after that it extracts the hazardous

261
00:10:01,279 --> 00:10:02,560
axis pairs

262
00:10:02,560 --> 00:10:05,120
now for each such hazardous access pair

263
00:10:05,120 --> 00:10:07,040
it checks whether the two operation

264
00:10:07,040 --> 00:10:09,279
belonging to a hazardous access pair is

265
00:10:09,279 --> 00:10:11,279
reachable within an sdg

266
00:10:11,279 --> 00:10:13,839
for example in case of a reentrancy for

267
00:10:13,839 --> 00:10:16,800
reinforced execution in this case this

268
00:10:16,800 --> 00:10:18,720
it checks whether this two hazardous

269
00:10:18,720 --> 00:10:20,480
access pair is reachable from the

270
00:10:20,480 --> 00:10:23,279
external call

271
00:10:23,360 --> 00:10:25,519
if it is not reachable it concludes the

272
00:10:25,519 --> 00:10:28,399
contract to be b9 that's because if they

273
00:10:28,399 --> 00:10:30,160
are not reachable probably these two

274
00:10:30,160 --> 00:10:32,320
operations will not have any impact at

275
00:10:32,320 --> 00:10:35,279
the final contract state since uh for

276
00:10:35,279 --> 00:10:38,800
for both reinforced execution however if

277
00:10:38,800 --> 00:10:40,320
it is reachable then there is a

278
00:10:40,320 --> 00:10:42,880
possibility that these two operation

279
00:10:42,880 --> 00:10:45,680
will be altered during the non-rendered

280
00:10:45,680 --> 00:10:48,000
execution therefore can have some impact

281
00:10:48,000 --> 00:10:50,480
on the final contract state however

282
00:10:50,480 --> 00:10:53,760
please note that our sdg is imprecise

283
00:10:53,760 --> 00:10:56,640
and path agnostic therefore even if

284
00:10:56,640 --> 00:10:58,320
selfish concludes that the two

285
00:10:58,320 --> 00:10:59,600
operations

286
00:10:59,600 --> 00:11:01,279
within such a problematic hazardous

287
00:11:01,279 --> 00:11:03,600
access pair is reachable it might not be

288
00:11:03,600 --> 00:11:06,000
the case in reality and therefore it

289
00:11:06,000 --> 00:11:08,800
does further verification to do that it

290
00:11:08,800 --> 00:11:10,640
generates a counter example which is

291
00:11:10,640 --> 00:11:12,560
nothing but a program slice that

292
00:11:12,560 --> 00:11:14,240
contains that problematic hazardous

293
00:11:14,240 --> 00:11:15,839
access pair

294
00:11:15,839 --> 00:11:18,959
after that it employs the second phase

295
00:11:18,959 --> 00:11:22,160
which is known as refiner so refiner is

296
00:11:22,160 --> 00:11:24,640
a combination of value summary analysis

297
00:11:24,640 --> 00:11:26,880
and symbolic execution so during the

298
00:11:26,880 --> 00:11:28,640
value summary analysis selfish

299
00:11:28,640 --> 00:11:30,560
summarizes the values of the storage

300
00:11:30,560 --> 00:11:33,120
variables and use that as a precondition

301
00:11:33,120 --> 00:11:35,440
during the symbolic execution so let us

302
00:11:35,440 --> 00:11:37,200
try to understand what is an output of

303
00:11:37,200 --> 00:11:39,200
value summary analysis so for the

304
00:11:39,200 --> 00:11:41,600
previous bank example we now have three

305
00:11:41,600 --> 00:11:43,760
different three new instructions which

306
00:11:43,760 --> 00:11:46,880
are known as mutexes so mutex is our

307
00:11:46,880 --> 00:11:48,640
defense mechanism to prevent such

308
00:11:48,640 --> 00:11:51,360
reinferency attacks so in this case if

309
00:11:51,360 --> 00:11:54,079
mutex is false only then one can execute

310
00:11:54,079 --> 00:11:56,320
rest of the function and then set mutex

311
00:11:56,320 --> 00:11:58,800
true or false accordingly so for this

312
00:11:58,800 --> 00:12:00,800
particular case our value summary

313
00:12:00,800 --> 00:12:03,839
analysis will output that mutex can be

314
00:12:03,839 --> 00:12:06,880
only false if and only if mutas is

315
00:12:06,880 --> 00:12:09,680
either false or true

316
00:12:09,680 --> 00:12:12,079
so with this value summary and the

317
00:12:12,079 --> 00:12:14,160
counter example ah selfish does the

318
00:12:14,160 --> 00:12:16,480
symbolic execution and it checks whether

319
00:12:16,480 --> 00:12:18,399
the problematic hazardous access pair is

320
00:12:18,399 --> 00:12:20,720
reachable and depending on that if it is

321
00:12:20,720 --> 00:12:23,279
reachable it mark the contract as likely

322
00:12:23,279 --> 00:12:24,880
vulnerable if it is not reachable then

323
00:12:24,880 --> 00:12:27,200
it is benign

324
00:12:27,200 --> 00:12:29,200
let

325
00:12:29,200 --> 00:12:31,440
this helps the symbolic execution so

326
00:12:31,440 --> 00:12:32,880
these are the two invocations of the

327
00:12:32,880 --> 00:12:34,720
withdraw function so our symbolic

328
00:12:34,720 --> 00:12:36,480
executor will execute these two

329
00:12:36,480 --> 00:12:39,600
invocations so after the external call

330
00:12:39,600 --> 00:12:41,600
when it start executing the second

331
00:12:41,600 --> 00:12:44,079
invocation of the vidra function at this

332
00:12:44,079 --> 00:12:46,160
path constraint it concerns the value

333
00:12:46,160 --> 00:12:49,680
summary whether there exists any value

334
00:12:49,680 --> 00:12:51,600
of the mutex for the current program

335
00:12:51,600 --> 00:12:53,839
state that can satisfy the current path

336
00:12:53,839 --> 00:12:56,800
condition however mutex

337
00:12:56,800 --> 00:12:58,880
with the current program state our value

338
00:12:58,880 --> 00:13:00,880
summary analysis says that okay mutex

339
00:13:00,880 --> 00:13:03,440
can be false if only if mutex is

340
00:13:03,440 --> 00:13:05,519
currently set to false however that

341
00:13:05,519 --> 00:13:07,519
conflicts with the current program state

342
00:13:07,519 --> 00:13:09,920
therefore is not satisfiable hence

343
00:13:09,920 --> 00:13:12,480
selfish concludes that the two

344
00:13:12,480 --> 00:13:15,120
operations read or write with the for

345
00:13:15,120 --> 00:13:17,760
for the hazardous access pair is not

346
00:13:17,760 --> 00:13:21,040
reachable in this case

347
00:13:21,040 --> 00:13:24,240
we evaluated selfish on data set of

348
00:13:24,240 --> 00:13:26,800
90 000 solidity open source smart

349
00:13:26,800 --> 00:13:29,760
contract we evaluated against four state

350
00:13:29,760 --> 00:13:32,000
of the art static analysis and symbolic

351
00:13:32,000 --> 00:13:34,880
execution based tools we compare selfish

352
00:13:34,880 --> 00:13:36,639
with respect to its vulnerability

353
00:13:36,639 --> 00:13:39,519
detection capability and performance

354
00:13:39,519 --> 00:13:42,000
so here are the alerts for all other

355
00:13:42,000 --> 00:13:44,959
tools and selfish so as we can see that

356
00:13:44,959 --> 00:13:47,680
selfish around raised 2 000 alerts for

357
00:13:47,680 --> 00:13:52,800
reincurrency and 7500 alerts for tod

358
00:13:52,800 --> 00:13:55,760
though onta and the mithril raised like

359
00:13:55,760 --> 00:13:57,839
minimal number of alerts but as we can

360
00:13:57,839 --> 00:14:02,000
see that they had issues with both time

361
00:14:02,000 --> 00:14:04,079
timeouts and error outs for most of the

362
00:14:04,079 --> 00:14:06,079
contracts in our data set

363
00:14:06,079 --> 00:14:08,720
those securify and vandal like emitted

364
00:14:08,720 --> 00:14:10,560
more number of alerts than selfish

365
00:14:10,560 --> 00:14:12,160
however we cannot conclude at this

366
00:14:12,160 --> 00:14:14,399
moment whether the emitted alert by

367
00:14:14,399 --> 00:14:17,120
selfish is actually good or not so for

368
00:14:17,120 --> 00:14:18,639
that

369
00:14:18,639 --> 00:14:21,519
we manually sample a set of 750

370
00:14:21,519 --> 00:14:24,240
contracts from our full data set and see

371
00:14:24,240 --> 00:14:26,320
that there are around 26 reinferences

372
00:14:26,320 --> 00:14:28,959
bar in the data set and then we manually

373
00:14:28,959 --> 00:14:32,079
verify all the alerts from the tools

374
00:14:32,079 --> 00:14:34,160
so from from that we can see that

375
00:14:34,160 --> 00:14:36,800
selfish not only detect all the true

376
00:14:36,800 --> 00:14:37,680
bugs

377
00:14:37,680 --> 00:14:39,519
but also it has a false positive rate

378
00:14:39,519 --> 00:14:41,920
around 1.5 percent and zero false

379
00:14:41,920 --> 00:14:44,399
negatives whereas the other two twos

380
00:14:44,399 --> 00:14:46,880
that is securify and vandal specifically

381
00:14:46,880 --> 00:14:49,199
vandal has got a false positive rate of

382
00:14:49,199 --> 00:14:52,320
86 percent which is huge

383
00:14:52,320 --> 00:14:53,120
so

384
00:14:53,120 --> 00:14:56,320
we can conclude that selfish is actually

385
00:14:56,320 --> 00:14:58,880
very effective and actually raised

386
00:14:58,880 --> 00:15:00,639
minimal number of alert with respect to

387
00:15:00,639 --> 00:15:03,279
state of the art tools

388
00:15:03,279 --> 00:15:06,639
additionally selfish found 47 new bugs

389
00:15:06,639 --> 00:15:09,360
not found by any other tools

390
00:15:09,360 --> 00:15:12,079
so in terms of our performance selfish

391
00:15:12,079 --> 00:15:14,320
is the fastest it takes around 31

392
00:15:14,320 --> 00:15:16,160
seconds to process a single contract

393
00:15:16,160 --> 00:15:18,560
within our data set the other two tools

394
00:15:18,560 --> 00:15:20,240
like several other tools are actually

395
00:15:20,240 --> 00:15:22,800
slower than selfish specifically mithril

396
00:15:22,800 --> 00:15:24,399
which is similarly execution based tool

397
00:15:24,399 --> 00:15:27,199
is 30 times lower than shellfish

398
00:15:27,199 --> 00:15:30,240
so to conclude we presented selfish a

399
00:15:30,240 --> 00:15:32,880
bug finding tool for reentrancy and tod

400
00:15:32,880 --> 00:15:34,720
we generalized rain transient tod in

401
00:15:34,720 --> 00:15:37,120
terms of state inconsistency

402
00:15:37,120 --> 00:15:38,880
selfish combined static analysis and

403
00:15:38,880 --> 00:15:40,959
symbolic execution to achieve both

404
00:15:40,959 --> 00:15:42,399
performance and precision and

405
00:15:42,399 --> 00:15:45,279
scalability and it outperforms all the

406
00:15:45,279 --> 00:15:47,120
state of the techniques in terms of both

407
00:15:47,120 --> 00:15:50,160
performance and backfinding ability

408
00:15:50,160 --> 00:15:52,079
if you have any more questions feel free

409
00:15:52,079 --> 00:15:53,839
to reach me thank you for listening to

410
00:15:53,839 --> 00:15:56,560
my presentation

411
00:16:02,399 --> 00:16:04,240
thank you very much for this excellent

412
00:16:04,240 --> 00:16:06,880
presentation and powerful tool any

413
00:16:06,880 --> 00:16:09,839
questions from the audience

414
00:16:16,880 --> 00:16:19,680
hello thanks for the great talk

415
00:16:19,680 --> 00:16:20,399
so

416
00:16:20,399 --> 00:16:22,480
in summary agency

417
00:16:22,480 --> 00:16:25,519
attacks involves applications

418
00:16:25,519 --> 00:16:28,079
that are composed of multiple contracts

419
00:16:28,079 --> 00:16:31,120
like the units of attack involves

420
00:16:31,120 --> 00:16:33,440
exchange contracts and many other token

421
00:16:33,440 --> 00:16:34,560
contracts

422
00:16:34,560 --> 00:16:36,959
so on the how selfish could

423
00:16:36,959 --> 00:16:40,720
uh handle such multi-contract reagency

424
00:16:40,720 --> 00:16:43,759
issues and is there any scalability

425
00:16:43,759 --> 00:16:45,120
problem with

426
00:16:45,120 --> 00:16:47,360
a larger code

427
00:16:47,360 --> 00:16:49,279
in such case

428
00:16:49,279 --> 00:16:51,920
thanks that's a very good question so um

429
00:16:51,920 --> 00:16:54,480
in our paper uh we also discussed about

430
00:16:54,480 --> 00:16:57,120
that and at this moment uh there are

431
00:16:57,120 --> 00:16:59,120
certain limitations for multi-contract

432
00:16:59,120 --> 00:17:00,959
analysis for example like in case of

433
00:17:00,959 --> 00:17:02,639
multi-contract calls we need to first

434
00:17:02,639 --> 00:17:04,799
detect whether there is an address i

435
00:17:04,799 --> 00:17:06,160
mean static address that is already

436
00:17:06,160 --> 00:17:08,319
present in the contract in that case we

437
00:17:08,319 --> 00:17:10,160
can technically leave the contract to

438
00:17:10,160 --> 00:17:12,480
like our uh for during our analysis if

439
00:17:12,480 --> 00:17:14,079
the contract is already present in our

440
00:17:14,079 --> 00:17:15,199
data set and the source code is

441
00:17:15,199 --> 00:17:17,359
available because selfish right now or

442
00:17:17,359 --> 00:17:19,839
in inspired prototype only uh works on a

443
00:17:19,839 --> 00:17:21,679
like uh source code so if that's the

444
00:17:21,679 --> 00:17:23,520
case we can lift and accordingly we can

445
00:17:23,520 --> 00:17:25,359
analyze the both the contracts uh like

446
00:17:25,359 --> 00:17:28,480
in composition and yes uh we can uh do

447
00:17:28,480 --> 00:17:30,320
that however as you say about the

448
00:17:30,320 --> 00:17:32,720
scalability issues like as we evaluated

449
00:17:32,720 --> 00:17:34,880
like around 90 000 contracts to

450
00:17:34,880 --> 00:17:36,559
according to our observation it does

451
00:17:36,559 --> 00:17:39,200
really scale well but yeah i mean maybe

452
00:17:39,200 --> 00:17:40,640
i mean uh i

453
00:17:40,640 --> 00:17:42,320
so in that case i can if i extrapolate

454
00:17:42,320 --> 00:17:44,960
that i can say it should scale well yeah

455
00:17:44,960 --> 00:17:47,039
thank you very much yeah thank you thank

456
00:17:47,039 --> 00:17:50,880
you very much any other questions

457
00:17:50,880 --> 00:17:52,320
okay we're waiting a bit i have one

458
00:17:52,320 --> 00:17:54,080
question so um

459
00:17:54,080 --> 00:17:55,360
you had this beautiful slide at the

460
00:17:55,360 --> 00:17:57,280
beginning bit like this fundamental

461
00:17:57,280 --> 00:17:59,760
trade-off between precision and and

462
00:17:59,760 --> 00:18:01,520
scalability right

463
00:18:01,520 --> 00:18:03,440
so and and the current tool it still

464
00:18:03,440 --> 00:18:05,760
takes like more than a block interval in

465
00:18:05,760 --> 00:18:08,640
terms of evaluation is it possible to to

466
00:18:08,640 --> 00:18:10,799
make it even faster maybe less precise

467
00:18:10,799 --> 00:18:12,799
but faster such that it could be

468
00:18:12,799 --> 00:18:14,799
executed in real time

469
00:18:14,799 --> 00:18:16,720
when new blocks arrives or new

470
00:18:16,720 --> 00:18:18,320
transactions arrive like on the

471
00:18:18,320 --> 00:18:20,320
peer-to-peer that's a very good question

472
00:18:20,320 --> 00:18:21,520
um

473
00:18:21,520 --> 00:18:23,840
i haven't really thought about it but

474
00:18:23,840 --> 00:18:25,919
probably

475
00:18:25,919 --> 00:18:28,640
okay so during symbolic execution we uh

476
00:18:28,640 --> 00:18:30,559
did some tradeoffs between like uh

477
00:18:30,559 --> 00:18:32,559
precision scalability for example with

478
00:18:32,559 --> 00:18:34,480
our current prototype like the vsa one

479
00:18:34,480 --> 00:18:36,720
which actually helps us to scale well so

480
00:18:36,720 --> 00:18:38,799
in that case we consider some loops and

481
00:18:38,799 --> 00:18:40,960
all to be over approximately maybe if we

482
00:18:40,960 --> 00:18:43,039
can consider for like other more

483
00:18:43,039 --> 00:18:45,120
instructions to like over approximately

484
00:18:45,120 --> 00:18:46,960
in that case will be faster and more and

485
00:18:46,960 --> 00:18:49,520
probably i mean we can technically be

486
00:18:49,520 --> 00:18:51,280
like uh much faster than the current

487
00:18:51,280 --> 00:18:53,200
prototype yeah right and once you're

488
00:18:53,200 --> 00:18:54,640
much faster then you can even use this

489
00:18:54,640 --> 00:18:56,559
as a intrusion prevention system or

490
00:18:56,559 --> 00:18:58,960
something yeah yeah very good awesome

491
00:18:58,960 --> 00:19:00,559
and next question from the audience okay

492
00:19:00,559 --> 00:19:02,559
okay so i'm draw from purdue

493
00:19:02,559 --> 00:19:05,120
universities and it's a very good work

494
00:19:05,120 --> 00:19:07,600
so actually i have two questions but the

495
00:19:07,600 --> 00:19:10,160
first question is also be answered like

496
00:19:10,160 --> 00:19:11,760
if the attack involves multiple

497
00:19:11,760 --> 00:19:14,240
contracts so there's i have another

498
00:19:14,240 --> 00:19:16,400
question about whether your technique

499
00:19:16,400 --> 00:19:19,760
can detect the attack like sandwich

500
00:19:19,760 --> 00:19:22,480
attack or price or recommend information

501
00:19:22,480 --> 00:19:24,559
because they are also very popular in

502
00:19:24,559 --> 00:19:26,720
now so the first one i couldn't probably

503
00:19:26,720 --> 00:19:28,640
hear okay so

504
00:19:28,640 --> 00:19:32,400
okay so i mean some some attack like the

505
00:19:32,400 --> 00:19:35,520
price or recommendations like

506
00:19:35,520 --> 00:19:36,240
we

507
00:19:36,240 --> 00:19:38,880
change the oracle

508
00:19:38,880 --> 00:19:41,520
the price of the or recommend uh

509
00:19:41,520 --> 00:19:43,600
temporarily and make the lending

510
00:19:43,600 --> 00:19:45,360
contract like

511
00:19:45,360 --> 00:19:47,200
overestimate the

512
00:19:47,200 --> 00:19:48,720
the the

513
00:19:48,720 --> 00:19:51,840
value or underestimate so can you

514
00:19:51,840 --> 00:19:54,000
technically handle such kind of attacks

515
00:19:54,000 --> 00:19:57,280
okay uh right now it only uh is uh

516
00:19:57,280 --> 00:19:59,200
targeted for reintroduce and transaction

517
00:19:59,200 --> 00:20:01,840
order dependence so basically no at this

518
00:20:01,840 --> 00:20:03,360
current protect we cannot detect such

519
00:20:03,360 --> 00:20:07,520
attacks yeah oh okay okay thanks thanks

520
00:20:07,520 --> 00:20:09,440
excellent we have one more time for more

521
00:20:09,440 --> 00:20:10,640
questions but thank you very much

522
00:20:10,640 --> 00:20:13,640
priyanka

