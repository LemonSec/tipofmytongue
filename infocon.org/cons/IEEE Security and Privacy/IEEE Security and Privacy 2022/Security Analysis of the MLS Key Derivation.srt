1
00:00:00,960 --> 00:00:03,760
yes thank you so um i'm eric thank you

2
00:00:03,760 --> 00:00:05,759
for coming i'll be presenting our work

3
00:00:05,759 --> 00:00:07,839
as security analysis of the message

4
00:00:07,839 --> 00:00:10,080
layer security key derivation

5
00:00:10,080 --> 00:00:12,400
this was joint work with chris bruska

6
00:00:12,400 --> 00:00:14,320
conrad kobach and myself at the

7
00:00:14,320 --> 00:00:16,640
university in finland so the message

8
00:00:16,640 --> 00:00:19,680
layer security protocol is a

9
00:00:19,680 --> 00:00:23,519
ietf standard that's upcoming that's for

10
00:00:23,519 --> 00:00:27,359
internet for secure group communication

11
00:00:28,080 --> 00:00:31,359
and so the goals of mls to understand

12
00:00:31,359 --> 00:00:33,280
them i'll give some definitions in the

13
00:00:33,280 --> 00:00:34,160
beginning

14
00:00:34,160 --> 00:00:36,719
starting with uh key derivation so a

15
00:00:36,719 --> 00:00:38,960
keto version as i'm sure you all know is

16
00:00:38,960 --> 00:00:40,960
a protocol that aims to

17
00:00:40,960 --> 00:00:43,280
provide two parties with a shared key

18
00:00:43,280 --> 00:00:45,440
by exchanging a couple of messages

19
00:00:45,440 --> 00:00:46,800
typically we want some security

20
00:00:46,800 --> 00:00:48,160
properties from

21
00:00:48,160 --> 00:00:49,840
a key exchange protocol

22
00:00:49,840 --> 00:00:50,960
the first

23
00:00:50,960 --> 00:00:51,920
is typically named key

24
00:00:51,920 --> 00:00:53,360
distinguishability

25
00:00:53,360 --> 00:00:55,520
keynesian building says that an outside

26
00:00:55,520 --> 00:00:57,039
observer looking at the communication

27
00:00:57,039 --> 00:00:58,800
between alice and bob here

28
00:00:58,800 --> 00:01:00,399
would gain no information on the key

29
00:01:00,399 --> 00:01:03,840
that alice and bob agree agree on

30
00:01:03,840 --> 00:01:05,360
a second property is entity

31
00:01:05,360 --> 00:01:07,200
authentication

32
00:01:07,200 --> 00:01:09,040
this requires that alice and bob get

33
00:01:09,040 --> 00:01:10,880
some guarantees on the

34
00:01:10,880 --> 00:01:12,640
party they're communicating with to

35
00:01:12,640 --> 00:01:14,000
ensure they're not communicating with

36
00:01:14,000 --> 00:01:15,280
someone else or there's not someone in

37
00:01:15,280 --> 00:01:17,119
the middle

38
00:01:17,119 --> 00:01:19,439
then there's a more recent security

39
00:01:19,439 --> 00:01:21,360
property of

40
00:01:21,360 --> 00:01:23,280
key exchange which is called forward

41
00:01:23,280 --> 00:01:25,680
secrecy and forward secrecy the scenario

42
00:01:25,680 --> 00:01:26,799
is that

43
00:01:26,799 --> 00:01:28,320
alice and bob started the communication

44
00:01:28,320 --> 00:01:30,000
in the past they did the key exchange

45
00:01:30,000 --> 00:01:31,840
they used the keys for a while and then

46
00:01:31,840 --> 00:01:33,759
the community communication ends so they

47
00:01:33,759 --> 00:01:35,280
throw away their keys

48
00:01:35,280 --> 00:01:38,240
but in the future either alice or

49
00:01:38,240 --> 00:01:40,640
bob's status leaked potentially

50
00:01:40,640 --> 00:01:42,479
including the long-term keys such as

51
00:01:42,479 --> 00:01:45,280
signing keys and this leakage should not

52
00:01:45,280 --> 00:01:47,280
negatively affect the security of the

53
00:01:47,280 --> 00:01:50,159
the original key exchange

54
00:01:50,159 --> 00:01:52,079
moving on we have a

55
00:01:52,079 --> 00:01:54,399
functional requirement on key exchange

56
00:01:54,399 --> 00:01:56,560
called continuous key exchange

57
00:01:56,560 --> 00:01:58,399
in this setting we

58
00:01:58,399 --> 00:02:00,399
the sessions are longer and therefore

59
00:02:00,399 --> 00:02:02,079
alex and both want to continuously

60
00:02:02,079 --> 00:02:04,159
update their keys to hopefully get

61
00:02:04,159 --> 00:02:05,840
better security guarantees and in

62
00:02:05,840 --> 00:02:08,160
specific specifically what they want is

63
00:02:08,160 --> 00:02:10,000
post compromise security

64
00:02:10,000 --> 00:02:11,760
in post-compromise security the setting

65
00:02:11,760 --> 00:02:13,360
is such that alice and bob start the

66
00:02:13,360 --> 00:02:14,800
communication

67
00:02:14,800 --> 00:02:17,280
and they start exchanging messages uh

68
00:02:17,280 --> 00:02:19,200
however either alice or bob's status

69
00:02:19,200 --> 00:02:20,959
leaks including the keys that were

70
00:02:20,959 --> 00:02:24,160
exchanged in the key exchange

71
00:02:24,800 --> 00:02:27,280
at this point the attacker goes offline

72
00:02:27,280 --> 00:02:29,440
so he's not actively corrupting the

73
00:02:29,440 --> 00:02:31,040
party is corrupting

74
00:02:31,040 --> 00:02:32,319
but he can still

75
00:02:32,319 --> 00:02:34,640
see the messages being sent

76
00:02:34,640 --> 00:02:37,200
so if alice and bob managed to do an

77
00:02:37,200 --> 00:02:40,080
update uh while the adversary is

78
00:02:40,080 --> 00:02:41,120
inactive

79
00:02:41,120 --> 00:02:43,200
the requirement is that

80
00:02:43,200 --> 00:02:45,440
the key that comes out of this update is

81
00:02:45,440 --> 00:02:47,040
secure again and provides proper

82
00:02:47,040 --> 00:02:50,720
security guarantees on the messages

83
00:02:50,720 --> 00:02:52,959
next is another functional requirement

84
00:02:52,959 --> 00:02:55,599
for key exchange called asynchronous key

85
00:02:55,599 --> 00:02:57,680
exchange in the setting ellis and bob

86
00:02:57,680 --> 00:02:59,519
cannot be expected to be online at the

87
00:02:59,519 --> 00:03:00,800
same time

88
00:03:00,800 --> 00:03:03,200
so they need to communicate to a third

89
00:03:03,200 --> 00:03:05,760
party or or whatever in this case it's

90
00:03:05,760 --> 00:03:07,840
represented by a server so to initiate

91
00:03:07,840 --> 00:03:09,200
the key exchange alice would send a

92
00:03:09,200 --> 00:03:11,680
message to the server the latest point

93
00:03:11,680 --> 00:03:13,280
in time bob comes online receives a

94
00:03:13,280 --> 00:03:15,519
message response which which is side of

95
00:03:15,519 --> 00:03:17,120
the key exchange and this

96
00:03:17,120 --> 00:03:19,200
this process continues until the key

97
00:03:19,200 --> 00:03:20,480
exchange finished

98
00:03:20,480 --> 00:03:22,560
the key challenges here being this

99
00:03:22,560 --> 00:03:25,200
requirement of a of an untrusted third

100
00:03:25,200 --> 00:03:27,440
party that needs to handle the messages

101
00:03:27,440 --> 00:03:29,519
and the fact that alice and book are

102
00:03:29,519 --> 00:03:31,200
never online at the same time at least

103
00:03:31,200 --> 00:03:34,080
cannot be expected to be

104
00:03:34,080 --> 00:03:36,239
and then a last functional requirement

105
00:03:36,239 --> 00:03:37,680
for uh

106
00:03:37,680 --> 00:03:40,000
for understanding um for understanding

107
00:03:40,000 --> 00:03:42,480
mls is group key exchange in the setting

108
00:03:42,480 --> 00:03:44,239
there are simply more than two parties

109
00:03:44,239 --> 00:03:45,120
and

110
00:03:45,120 --> 00:03:47,360
on top of that there is a potential for

111
00:03:47,360 --> 00:03:50,159
changes to the group membership so maybe

112
00:03:50,159 --> 00:03:52,480
they want to add someone to the group

113
00:03:52,480 --> 00:03:54,319
and then the requirement for the new the

114
00:03:54,319 --> 00:03:55,920
person being added is that they would

115
00:03:55,920 --> 00:03:58,080
not have any knowledge of keys prior to

116
00:03:58,080 --> 00:03:59,599
them joining the group

117
00:03:59,599 --> 00:04:01,680
and similarly they might want to remove

118
00:04:01,680 --> 00:04:03,519
someone from the group the requirement

119
00:04:03,519 --> 00:04:06,319
being that the removed person no longer

120
00:04:06,319 --> 00:04:09,680
has access to keys going forward

121
00:04:09,680 --> 00:04:10,799
and

122
00:04:10,799 --> 00:04:11,920
that is

123
00:04:11,920 --> 00:04:13,680
in that gives you an idea of what mls

124
00:04:13,680 --> 00:04:14,959
aims to be so

125
00:04:14,959 --> 00:04:18,238
mls aims to be a continuous asynchronous

126
00:04:18,238 --> 00:04:19,839
group key exchange protocol that

127
00:04:19,839 --> 00:04:22,160
provides proper security guarantees as

128
00:04:22,160 --> 00:04:23,759
seen on the slide

129
00:04:23,759 --> 00:04:26,960
and is also efficient at doing so

130
00:04:26,960 --> 00:04:29,360
so how does mls does it

131
00:04:29,360 --> 00:04:30,560
at the core

132
00:04:30,560 --> 00:04:32,800
mls has something that's called a tree

133
00:04:32,800 --> 00:04:35,040
cam free cam was originally described in

134
00:04:35,040 --> 00:04:37,199
a paper um

135
00:04:37,199 --> 00:04:39,919
as a proposal for mls and was adopted in

136
00:04:39,919 --> 00:04:41,759
one of the early draft versions it

137
00:04:41,759 --> 00:04:44,240
should be noted that

138
00:04:44,240 --> 00:04:46,880
over several drafts of mls the the

139
00:04:46,880 --> 00:04:49,120
specifics of three game have changed so

140
00:04:49,120 --> 00:04:51,120
the the paper version might be different

141
00:04:51,120 --> 00:04:51,919
from

142
00:04:51,919 --> 00:04:54,479
what's in the draft now

143
00:04:54,479 --> 00:04:56,560
so what is freecam as the name suggests

144
00:04:56,560 --> 00:04:58,320
it's a tree structure where the nodes

145
00:04:58,320 --> 00:04:59,199
are

146
00:04:59,199 --> 00:05:01,520
chems or key encryption methods

147
00:05:01,520 --> 00:05:03,520
uh in particular the leaf nodes of this

148
00:05:03,520 --> 00:05:05,360
tree are associated with the group

149
00:05:05,360 --> 00:05:07,039
members in the tree

150
00:05:07,039 --> 00:05:09,360
where the association means that only

151
00:05:09,360 --> 00:05:11,199
that group member has access to this the

152
00:05:11,199 --> 00:05:13,840
secret of the private key of that node

153
00:05:13,840 --> 00:05:16,080
for the other nodes in the tree

154
00:05:16,080 --> 00:05:18,240
as a similar property holds in

155
00:05:18,240 --> 00:05:20,080
particular if and

156
00:05:20,080 --> 00:05:21,600
if a member of the group is in the

157
00:05:21,600 --> 00:05:23,840
subtree of a particular node in the tree

158
00:05:23,840 --> 00:05:25,199
then they would know the secret key of

159
00:05:25,199 --> 00:05:26,240
that

160
00:05:26,240 --> 00:05:27,600
node

161
00:05:27,600 --> 00:05:30,160
in this diagram we're looking at a tree

162
00:05:30,160 --> 00:05:32,320
cam from the perspective of perspective

163
00:05:32,320 --> 00:05:34,479
of member h in the tree and we can see

164
00:05:34,479 --> 00:05:35,759
this because there are some additional

165
00:05:35,759 --> 00:05:37,120
values there

166
00:05:37,120 --> 00:05:39,440
these additional values are used by the

167
00:05:39,440 --> 00:05:41,680
group members to make updates to the to

168
00:05:41,680 --> 00:05:44,400
the key material in tricam

169
00:05:44,400 --> 00:05:47,039
for the least node of h this would be a

170
00:05:47,039 --> 00:05:49,280
value that h randomly generates on their

171
00:05:49,280 --> 00:05:51,680
machine and for the rest of the

172
00:05:51,680 --> 00:05:54,639
notes on the path from ages leaf to the

173
00:05:54,639 --> 00:05:57,840
root this is derived in accordance with

174
00:05:57,840 --> 00:06:00,479
uh with the drive node box here which

175
00:06:00,479 --> 00:06:02,000
tells you that the

176
00:06:02,000 --> 00:06:03,520
secret value associated with a

177
00:06:03,520 --> 00:06:04,800
particular

178
00:06:04,800 --> 00:06:07,600
node is derived from the the child node

179
00:06:07,600 --> 00:06:08,400
and

180
00:06:08,400 --> 00:06:10,880
the private key pair associated with a

181
00:06:10,880 --> 00:06:11,759
node

182
00:06:11,759 --> 00:06:14,720
is derived with the with the secret

183
00:06:14,720 --> 00:06:17,039
value of that node's value as a

184
00:06:17,039 --> 00:06:18,720
seed for the the key generation

185
00:06:18,720 --> 00:06:20,720
algorithm

186
00:06:20,720 --> 00:06:23,520
so um this derivation is carried out

187
00:06:23,520 --> 00:06:25,360
from the leaf to the root and at this

188
00:06:25,360 --> 00:06:27,840
point h knows what what these new values

189
00:06:27,840 --> 00:06:29,120
are but the rest of the group doesn't

190
00:06:29,120 --> 00:06:31,120
yet so in order to share this

191
00:06:31,120 --> 00:06:32,720
information with the rest of the group h

192
00:06:32,720 --> 00:06:33,840
will

193
00:06:33,840 --> 00:06:35,600
will chem this to the other members of

194
00:06:35,600 --> 00:06:37,039
the group

195
00:06:37,039 --> 00:06:38,960
basically just using the public key of

196
00:06:38,960 --> 00:06:41,280
some other node to encrypt

197
00:06:41,280 --> 00:06:44,560
this secret value of a node so that

198
00:06:44,560 --> 00:06:46,160
that the other members may use it to

199
00:06:46,160 --> 00:06:48,800
derive the corresponding values

200
00:06:48,800 --> 00:06:50,639
in particular for this tree

201
00:06:50,639 --> 00:06:53,680
this diagram shows you um to which

202
00:06:53,680 --> 00:06:54,800
nodes the

203
00:06:54,800 --> 00:06:56,720
the secrets will be encrypted

204
00:06:56,720 --> 00:06:57,520
and

205
00:06:57,520 --> 00:07:00,080
as a result of this sharing the entire

206
00:07:00,080 --> 00:07:03,840
group will agree on the value at

207
00:07:03,840 --> 00:07:06,400
i'm sorry

208
00:07:08,319 --> 00:07:09,440
i'm sorry

209
00:07:09,440 --> 00:07:11,440
as a result of this the entire group

210
00:07:11,440 --> 00:07:13,759
will agree on the

211
00:07:13,759 --> 00:07:15,039
on the value that's at the root of the

212
00:07:15,039 --> 00:07:18,080
tree because they all know the at least

213
00:07:18,080 --> 00:07:19,199
one

214
00:07:19,199 --> 00:07:21,919
value within the tree

215
00:07:21,919 --> 00:07:24,080
by itself tricam provides a lot of weak

216
00:07:24,080 --> 00:07:25,599
security properties

217
00:07:25,599 --> 00:07:27,120
um

218
00:07:27,120 --> 00:07:28,639
in particular with respect to forward

219
00:07:28,639 --> 00:07:30,720
secrecy and post-compromise security

220
00:07:30,720 --> 00:07:32,319
therefore mls employs what's called a

221
00:07:32,319 --> 00:07:34,080
key schedule

222
00:07:34,080 --> 00:07:37,039
on top of the on top of three cam

223
00:07:37,039 --> 00:07:39,120
so in the key schedule

224
00:07:39,120 --> 00:07:39,919
the

225
00:07:39,919 --> 00:07:41,919
the value from the tree is combined with

226
00:07:41,919 --> 00:07:43,280
what's called

227
00:07:43,280 --> 00:07:44,960
the internal what we call the internal

228
00:07:44,960 --> 00:07:45,840
secret

229
00:07:45,840 --> 00:07:48,080
this is a value that the group shares

230
00:07:48,080 --> 00:07:51,360
from prior iterations of the protocol

231
00:07:51,360 --> 00:07:52,960
and these two values are fed into a key

232
00:07:52,960 --> 00:07:54,560
derivation function

233
00:07:54,560 --> 00:07:56,080
to combine their

234
00:07:56,080 --> 00:07:57,440
their entropy

235
00:07:57,440 --> 00:07:59,280
and actually so this is how it was in

236
00:07:59,280 --> 00:08:00,720
the spec as

237
00:08:00,720 --> 00:08:02,479
when we analyzed it and we made a

238
00:08:02,479 --> 00:08:04,160
proposal for a change

239
00:08:04,160 --> 00:08:06,800
um of including a context context value

240
00:08:06,800 --> 00:08:08,960
in this derivation in order to provide

241
00:08:08,960 --> 00:08:11,199
some domain separation guarantees on the

242
00:08:11,199 --> 00:08:12,639
output of the kit

243
00:08:12,639 --> 00:08:14,960
of the key derivation

244
00:08:14,960 --> 00:08:17,199
we made this this proposal we made a

245
00:08:17,199 --> 00:08:18,800
proposal for this change on github and

246
00:08:18,800 --> 00:08:20,639
it has since been adopted

247
00:08:20,639 --> 00:08:22,639
in the draft after the version we

248
00:08:22,639 --> 00:08:25,520
analyzed in this paper

249
00:08:25,520 --> 00:08:27,599
the value coming out of the first key

250
00:08:27,599 --> 00:08:29,520
derivation function is then combined

251
00:08:29,520 --> 00:08:31,199
with what we call an external secret

252
00:08:31,199 --> 00:08:33,200
this is simply a value that a group can

253
00:08:33,200 --> 00:08:35,200
agree upon out of bounds

254
00:08:35,200 --> 00:08:36,958
if they do not agree on a value out of

255
00:08:36,958 --> 00:08:38,640
bounds they just use a standard string

256
00:08:38,640 --> 00:08:41,360
that's defined in this in the spec

257
00:08:41,360 --> 00:08:42,799
and this double

258
00:08:42,799 --> 00:08:45,600
key derivation is is hence this double

259
00:08:45,600 --> 00:08:47,760
key derivation is used to combine these

260
00:08:47,760 --> 00:08:50,560
three secrets and from which they derive

261
00:08:50,560 --> 00:08:53,600
various keys that are used in mls for

262
00:08:53,600 --> 00:08:55,760
encryption and whatnot in particular you

263
00:08:55,760 --> 00:08:57,600
can see that there is also an s prime

264
00:08:57,600 --> 00:08:58,480
int

265
00:08:58,480 --> 00:09:00,880
output so this would be used in the next

266
00:09:00,880 --> 00:09:02,640
iteration of the protocol on the left

267
00:09:02,640 --> 00:09:05,439
side of the diagram

268
00:09:06,640 --> 00:09:08,560
putting the two together so three came

269
00:09:08,560 --> 00:09:10,800
in the key schedule we got the mls key

270
00:09:10,800 --> 00:09:14,560
derivation from the title of our paper

271
00:09:14,560 --> 00:09:17,440
so this is what mls uses to

272
00:09:17,440 --> 00:09:19,760
use the key shares that are exchanged by

273
00:09:19,760 --> 00:09:22,320
the key exchange to obtain the keys that

274
00:09:22,320 --> 00:09:26,000
are used ultimately for encryption

275
00:09:29,040 --> 00:09:29,920
so

276
00:09:29,920 --> 00:09:31,440
from there we

277
00:09:31,440 --> 00:09:33,360
one of the main outcomes of our paper is

278
00:09:33,360 --> 00:09:34,959
this honesty graph

279
00:09:34,959 --> 00:09:36,720
we define honesty as the property of a

280
00:09:36,720 --> 00:09:38,800
key being either known to the attacker

281
00:09:38,800 --> 00:09:41,040
or not so an honest key is a key that is

282
00:09:41,040 --> 00:09:42,720
not known to the attacker and this

283
00:09:42,720 --> 00:09:44,800
honesty graph will tell you for each key

284
00:09:44,800 --> 00:09:46,959
in the in the key derivation whether the

285
00:09:46,959 --> 00:09:49,920
attacker knows it or not based on the

286
00:09:49,920 --> 00:09:51,680
honesty property of the key from which

287
00:09:51,680 --> 00:09:54,240
it's generated so for for the tweaking

288
00:09:54,240 --> 00:09:56,640
part of the key derivation we can see

289
00:09:56,640 --> 00:09:58,000
that

290
00:09:58,000 --> 00:09:59,839
honesty is maintained based on

291
00:09:59,839 --> 00:10:01,920
derivations as

292
00:10:01,920 --> 00:10:03,920
as seen from the id notes which stands

293
00:10:03,920 --> 00:10:06,000
for identity

294
00:10:06,000 --> 00:10:08,000
note here that even though there's two

295
00:10:08,000 --> 00:10:10,720
inputs into the the node the

296
00:10:10,720 --> 00:10:12,240
um the honesty value of the derived

297
00:10:12,240 --> 00:10:14,720
value comes only from one uh this is due

298
00:10:14,720 --> 00:10:16,839
to the nature of how mls is

299
00:10:16,839 --> 00:10:19,680
is supposed to work as we saw earlier in

300
00:10:19,680 --> 00:10:22,160
the presentation

301
00:10:22,160 --> 00:10:23,200
the

302
00:10:23,200 --> 00:10:25,279
in the key schedule we can see that in

303
00:10:25,279 --> 00:10:27,600
the location where there used to be

304
00:10:27,600 --> 00:10:29,600
key derivation functions there is now a

305
00:10:29,600 --> 00:10:31,920
node with an or symbol this is used to

306
00:10:31,920 --> 00:10:33,839
signify that the output of this

307
00:10:33,839 --> 00:10:35,839
derivation is honest if either of the

308
00:10:35,839 --> 00:10:38,480
input values is honest

309
00:10:38,480 --> 00:10:40,880
so how do we get to this on a c graph

310
00:10:40,880 --> 00:10:43,120
it's to our security proof

311
00:10:43,120 --> 00:10:44,959
in the presentation i will only give a

312
00:10:44,959 --> 00:10:46,480
high level overview of the security

313
00:10:46,480 --> 00:10:47,279
proof

314
00:10:47,279 --> 00:10:48,720
please read the paper if you want to

315
00:10:48,720 --> 00:10:50,880
know the details

316
00:10:50,880 --> 00:10:53,519
so for a security proof we need three

317
00:10:53,519 --> 00:10:55,600
cryptographic assumptions the first is

318
00:10:55,600 --> 00:10:57,680
the existence of pseudo-random functions

319
00:10:57,680 --> 00:11:00,079
that are secure and collision resistant

320
00:11:00,079 --> 00:11:02,079
the second is the existence of dual

321
00:11:02,079 --> 00:11:03,519
pseudo-random functions that are secure

322
00:11:03,519 --> 00:11:06,000
and collision resistant so a dual

323
00:11:06,000 --> 00:11:08,160
pseudo-random function is a function

324
00:11:08,160 --> 00:11:09,680
that ties back to

325
00:11:09,680 --> 00:11:11,760
this kdf property that i said earlier

326
00:11:11,760 --> 00:11:15,120
that it needs to accept two inputs

327
00:11:15,120 --> 00:11:17,120
and provide secure outputs if either of

328
00:11:17,120 --> 00:11:18,720
the inputs is

329
00:11:18,720 --> 00:11:19,600
is

330
00:11:19,600 --> 00:11:20,959
is honest

331
00:11:20,959 --> 00:11:22,959
and the last assumption is on the on

332
00:11:22,959 --> 00:11:25,279
public key encryption

333
00:11:25,279 --> 00:11:27,279
so our proof on a high level consists of

334
00:11:27,279 --> 00:11:28,399
three steps

335
00:11:28,399 --> 00:11:30,000
in the first step we

336
00:11:30,000 --> 00:11:32,160
provide a security proof for a tree cam

337
00:11:32,160 --> 00:11:34,640
based on our prf and public encryption

338
00:11:34,640 --> 00:11:36,160
assumptions

339
00:11:36,160 --> 00:11:38,480
we do this starting from the

340
00:11:38,480 --> 00:11:40,560
the leaf nodes where again values are

341
00:11:40,560 --> 00:11:42,720
randomly sampled on the user's device

342
00:11:42,720 --> 00:11:45,040
and using a hybrid argument over the

343
00:11:45,040 --> 00:11:46,560
layers of the tree we show that the

344
00:11:46,560 --> 00:11:48,160
derivations and encryptions do not

345
00:11:48,160 --> 00:11:51,920
negatively affect the security of the

346
00:11:51,920 --> 00:11:54,560
of the keys being derived

347
00:11:54,560 --> 00:11:56,959
in the second step of the proof we turn

348
00:11:56,959 --> 00:11:58,959
our attention to the key schedule

349
00:11:58,959 --> 00:12:00,639
here we use the

350
00:12:00,639 --> 00:12:03,040
the assumptions all of our assumptions

351
00:12:03,040 --> 00:12:05,279
to show that the derivations being

352
00:12:05,279 --> 00:12:08,320
carried out in addition with the

353
00:12:08,320 --> 00:12:10,399
iterative views of the internal secret

354
00:12:10,399 --> 00:12:12,560
provide proper security guarantees uh

355
00:12:12,560 --> 00:12:14,880
and here we use a secure a hybrid

356
00:12:14,880 --> 00:12:17,360
argument over the the continuous nature

357
00:12:17,360 --> 00:12:18,240
of the

358
00:12:18,240 --> 00:12:19,600
the key schedule

359
00:12:19,600 --> 00:12:21,120
and in the last step we just combine

360
00:12:21,120 --> 00:12:23,360
these two results to show that the

361
00:12:23,360 --> 00:12:25,200
overall key derivation

362
00:12:25,200 --> 00:12:26,959
provides the security guarantees that we

363
00:12:26,959 --> 00:12:28,639
can see in the honesty graph that

364
00:12:28,639 --> 00:12:30,399
concludes my presentation i'd be happy

365
00:12:30,399 --> 00:12:33,360
to answer any questions

366
00:12:37,040 --> 00:12:40,000
okay thanks a lot eric and

367
00:12:40,000 --> 00:12:44,399
we have time for a few questions

368
00:12:46,480 --> 00:12:49,880
on mls

369
00:12:55,040 --> 00:12:57,519
okay question my side

370
00:12:57,519 --> 00:13:00,639
mls is in the draft stage so what do you

371
00:13:00,639 --> 00:13:03,600
expect uh when will we end up at a phase

372
00:13:03,600 --> 00:13:05,519
where it's really standardized and then

373
00:13:05,519 --> 00:13:07,680
also applications start to be used in

374
00:13:07,680 --> 00:13:08,800
practice

375
00:13:08,800 --> 00:13:11,279
uh yes so to my knowledge at the moment

376
00:13:11,279 --> 00:13:13,519
the the working group is focusing on

377
00:13:13,519 --> 00:13:16,079
ironing out the

378
00:13:16,079 --> 00:13:18,160
no longer any technical details just the

379
00:13:18,160 --> 00:13:20,000
descriptions and

380
00:13:20,000 --> 00:13:22,320
clarifying anything that's unclear to

381
00:13:22,320 --> 00:13:23,440
people that are already trying to

382
00:13:23,440 --> 00:13:25,200
implement the protocol

383
00:13:25,200 --> 00:13:27,839
i cannot give an exact date as i'm not

384
00:13:27,839 --> 00:13:29,600
that involved but i believe it will be

385
00:13:29,600 --> 00:13:31,920
this year or early next year

386
00:13:31,920 --> 00:13:35,360
okay thank you

387
00:13:35,360 --> 00:13:37,360
hey this is lindgren from university of

388
00:13:37,360 --> 00:13:38,320
illinois

389
00:13:38,320 --> 00:13:39,120
um

390
00:13:39,120 --> 00:13:42,800
can you can you tell us more about the

391
00:13:42,800 --> 00:13:43,760
the

392
00:13:43,760 --> 00:13:46,160
motivation or justification for the

393
00:13:46,160 --> 00:13:51,040
model of post compromise security

394
00:13:51,040 --> 00:13:52,480
in general for

395
00:13:52,480 --> 00:13:54,959
in general yeah yeah so the

396
00:13:54,959 --> 00:13:56,959
the motivation is

397
00:13:56,959 --> 00:13:58,800
mainly related to the fact that as i

398
00:13:58,800 --> 00:14:00,160
said sessions are

399
00:14:00,160 --> 00:14:02,800
becoming longer and longer traditionally

400
00:14:02,800 --> 00:14:04,880
i don't know if you do a phone call like

401
00:14:04,880 --> 00:14:07,120
that that takes 10 minutes probably at

402
00:14:07,120 --> 00:14:09,279
most whereas nowadays you have a phone

403
00:14:09,279 --> 00:14:11,199
with whatsapp or telegram or wechat or

404
00:14:11,199 --> 00:14:13,680
whatever and probably the session is as

405
00:14:13,680 --> 00:14:15,360
old as your phone

406
00:14:15,360 --> 00:14:18,079
so if you don't update your keys

407
00:14:18,079 --> 00:14:20,399
like if at any point your the attacker

408
00:14:20,399 --> 00:14:22,240
gains access to your phone it gets

409
00:14:22,240 --> 00:14:24,720
access to your whole chat history

410
00:14:24,720 --> 00:14:26,560
whereas if you perform these updates

411
00:14:26,560 --> 00:14:29,360
they only have a limited window

412
00:14:29,360 --> 00:14:32,000
of messages that they can obtain

413
00:14:32,000 --> 00:14:32,959
but

414
00:14:32,959 --> 00:14:34,800
so why is it reasonable to assume that

415
00:14:34,800 --> 00:14:36,240
the attacker

416
00:14:36,240 --> 00:14:38,560
once stolen the key

417
00:14:38,560 --> 00:14:39,920
cannot

418
00:14:39,920 --> 00:14:42,920
impersonate

419
00:14:46,079 --> 00:14:47,440
i'm sorry um

420
00:14:47,440 --> 00:14:48,800
that's a good question

421
00:14:48,800 --> 00:14:51,040
um

422
00:14:51,519 --> 00:14:54,800
i'm not too up to date on on the i

423
00:14:54,800 --> 00:14:55,920
remember well enough to answer the

424
00:14:55,920 --> 00:14:59,839
question i'm sorry thanks

425
00:15:00,880 --> 00:15:03,839
okay so i'm sure are there online

426
00:15:03,839 --> 00:15:05,360
questions

427
00:15:05,360 --> 00:15:08,000
no if not then let's thank eric once

428
00:15:08,000 --> 00:15:11,000
again

