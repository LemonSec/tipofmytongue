1
00:00:01,439 --> 00:00:02,639
yeah

2
00:00:02,639 --> 00:00:04,960
welcome to my talk for

3
00:00:04,960 --> 00:00:07,279
our paper publicly accountable robust

4
00:00:07,279 --> 00:00:09,519
multi-party computation

5
00:00:09,519 --> 00:00:10,320
so

6
00:00:10,320 --> 00:00:12,080
what is our paper about

7
00:00:12,080 --> 00:00:14,320
in multi-party computation multiple

8
00:00:14,320 --> 00:00:15,920
parties want to compute a function

9
00:00:15,920 --> 00:00:18,560
together such that only the result and

10
00:00:18,560 --> 00:00:21,439
nothing about the inputs is revealed

11
00:00:21,439 --> 00:00:24,000
if a protocol is not robust a single

12
00:00:24,000 --> 00:00:26,480
party that behaves maliciously is enough

13
00:00:26,480 --> 00:00:28,880
to prevent the others the honest parties

14
00:00:28,880 --> 00:00:31,279
from getting the result

15
00:00:31,279 --> 00:00:33,440
in a robust protocol this doesn't happen

16
00:00:33,440 --> 00:00:35,760
usually you set some robustness

17
00:00:35,760 --> 00:00:37,440
threshold and if

18
00:00:37,440 --> 00:00:39,440
the number of malicious parties is below

19
00:00:39,440 --> 00:00:41,200
the threshold you still get the results

20
00:00:41,200 --> 00:00:43,280
otherwise your protocol aborts and the

21
00:00:43,280 --> 00:00:46,800
honest parties don't get the result

22
00:00:46,960 --> 00:00:49,520
with public verifiability an external

23
00:00:49,520 --> 00:00:52,480
party can check if the result is correct

24
00:00:52,480 --> 00:00:53,520
or not

25
00:00:53,520 --> 00:00:56,000
and with accountability

26
00:00:56,000 --> 00:00:59,440
you can check um which parties try to

27
00:00:59,440 --> 00:01:01,840
manipulate the results or which parties

28
00:01:01,840 --> 00:01:04,559
made a protocol abort if it

29
00:01:04,559 --> 00:01:06,560
yeah if the malicious behavior was above

30
00:01:06,560 --> 00:01:08,640
the threshold

31
00:01:08,640 --> 00:01:11,040
and verifiability and accountability can

32
00:01:11,040 --> 00:01:13,360
also hold if all the parties doing the

33
00:01:13,360 --> 00:01:16,080
multi-party computation are corrupted

34
00:01:16,080 --> 00:01:17,840
all these properties together are very

35
00:01:17,840 --> 00:01:20,400
useful in several applications for

36
00:01:20,400 --> 00:01:22,479
example in the client service setting

37
00:01:22,479 --> 00:01:24,320
and more specifically something like

38
00:01:24,320 --> 00:01:26,799
evoting where you want robustness you

39
00:01:26,799 --> 00:01:29,439
don't want a single malicious server

40
00:01:29,439 --> 00:01:31,360
to disrupt the election you want the

41
00:01:31,360 --> 00:01:33,360
public verifiability the public is

42
00:01:33,360 --> 00:01:34,479
interested

43
00:01:34,479 --> 00:01:36,079
in the correctness of the election

44
00:01:36,079 --> 00:01:37,280
result

45
00:01:37,280 --> 00:01:39,759
and yeah also the public accountability

46
00:01:39,759 --> 00:01:42,640
that you can see who try to

47
00:01:42,640 --> 00:01:44,720
manipulate the election

48
00:01:44,720 --> 00:01:47,280
and you also don't want to put trust in

49
00:01:47,280 --> 00:01:49,119
the

50
00:01:49,119 --> 00:01:51,920
necessarily in all the mpc servers so

51
00:01:51,920 --> 00:01:53,520
yeah you have to assume that all of them

52
00:01:53,520 --> 00:01:57,680
collude or all of them are malicious

53
00:01:57,680 --> 00:02:00,479
so um is there currently an mpc protocol

54
00:02:00,479 --> 00:02:02,079
that has all these

55
00:02:02,079 --> 00:02:05,119
so in like the current line of work not

56
00:02:05,119 --> 00:02:06,560
really and

57
00:02:06,560 --> 00:02:09,119
um here is like the class of speeds

58
00:02:09,119 --> 00:02:11,038
protocols

59
00:02:11,038 --> 00:02:14,160
with speeds at the bottom left which is

60
00:02:14,160 --> 00:02:16,800
very efficient but has none of these

61
00:02:16,800 --> 00:02:18,480
extra properties

62
00:02:18,480 --> 00:02:20,160
and yeah there were a lot of other

63
00:02:20,160 --> 00:02:22,319
protocols that improved efficiency but

64
00:02:22,319 --> 00:02:24,640
also added new properties like public

65
00:02:24,640 --> 00:02:26,160
verifiability

66
00:02:26,160 --> 00:02:30,160
and the cfy protocol at the top

67
00:02:30,160 --> 00:02:32,239
has almost all the properties that we

68
00:02:32,239 --> 00:02:34,800
want but it lacks robustness

69
00:02:34,800 --> 00:02:37,519
so can we somehow

70
00:02:37,519 --> 00:02:39,040
also get the robustness for this

71
00:02:39,040 --> 00:02:40,720
protocol

72
00:02:40,720 --> 00:02:41,680
um

73
00:02:41,680 --> 00:02:43,920
technically there is like a general

74
00:02:43,920 --> 00:02:45,040
approach

75
00:02:45,040 --> 00:02:47,040
which also seems quite natural if you

76
00:02:47,040 --> 00:02:49,440
have a protocol that is not robust but

77
00:02:49,440 --> 00:02:51,280
it has the other properties

78
00:02:51,280 --> 00:02:53,440
you just run it if it aborts you

79
00:02:53,440 --> 00:02:55,920
identify the malicious party exclude

80
00:02:55,920 --> 00:02:57,200
them

81
00:02:57,200 --> 00:02:59,519
and rerun the protocol without them

82
00:02:59,519 --> 00:03:01,920
like this you get a more robust protocol

83
00:03:01,920 --> 00:03:03,519
that is also

84
00:03:03,519 --> 00:03:05,599
the idea of so-called best of both

85
00:03:05,599 --> 00:03:07,200
worlds protocols

86
00:03:07,200 --> 00:03:10,000
and if you combine this with the cfy

87
00:03:10,000 --> 00:03:12,319
protocol you have a protocol that has

88
00:03:12,319 --> 00:03:14,400
all the properties that we want

89
00:03:14,400 --> 00:03:16,640
but it has restarts so what's the

90
00:03:16,640 --> 00:03:19,200
problem with restarts the first thing is

91
00:03:19,200 --> 00:03:21,519
it's not always applicable to do this if

92
00:03:21,519 --> 00:03:23,360
you go back to the e-voting

93
00:03:23,360 --> 00:03:24,560
example

94
00:03:24,560 --> 00:03:26,239
there a restart would mean you have to

95
00:03:26,239 --> 00:03:28,480
rerun the whole election and even if

96
00:03:28,480 --> 00:03:30,480
some people might want to rerun election

97
00:03:30,480 --> 00:03:31,519
because they're not happy with the

98
00:03:31,519 --> 00:03:33,280
result that's something we usually don't

99
00:03:33,280 --> 00:03:34,319
want

100
00:03:34,319 --> 00:03:36,799
and also it's not efficient with the

101
00:03:36,799 --> 00:03:39,440
current state of the art in npc you have

102
00:03:39,440 --> 00:03:41,760
usually an expensive offline phase

103
00:03:41,760 --> 00:03:43,280
and if you restart you also have to

104
00:03:43,280 --> 00:03:46,000
rerun this

105
00:03:46,000 --> 00:03:48,000
our goal is then to have a protocol with

106
00:03:48,000 --> 00:03:50,319
robustness without restarts public

107
00:03:50,319 --> 00:03:53,360
verifiability public accountability and

108
00:03:53,360 --> 00:03:55,120
the letter to properties even if all

109
00:03:55,120 --> 00:03:57,680
parties are corrupted

110
00:03:57,680 --> 00:03:59,439
we construct the first

111
00:03:59,439 --> 00:04:01,439
practical mpc protocol with all these

112
00:04:01,439 --> 00:04:03,360
properties and we also have all these

113
00:04:03,360 --> 00:04:05,120
properties in all of the phases of our

114
00:04:05,120 --> 00:04:07,519
protocol the setup at the beginning the

115
00:04:07,519 --> 00:04:10,000
offline phase where we pre-compute

116
00:04:10,000 --> 00:04:11,760
certain

117
00:04:11,760 --> 00:04:13,920
data then the online phase where we do

118
00:04:13,920 --> 00:04:16,238
the actual computation we do a detailed

119
00:04:16,238 --> 00:04:18,238
parameter analysis and benchmarks to

120
00:04:18,238 --> 00:04:20,720
show that our protocol is efficient and

121
00:04:20,720 --> 00:04:22,160
along the way we also do some more

122
00:04:22,160 --> 00:04:25,199
technical contributions

123
00:04:25,199 --> 00:04:27,199
so let's start with the basis for our

124
00:04:27,199 --> 00:04:29,440
protocol the speeds protocol because

125
00:04:29,440 --> 00:04:30,720
that's

126
00:04:30,720 --> 00:04:33,040
yeah one of the state-of-the-art

127
00:04:33,040 --> 00:04:35,919
approaches to do efficient mpc

128
00:04:35,919 --> 00:04:37,520
in speeds you

129
00:04:37,520 --> 00:04:39,680
represent your function as an arithmetic

130
00:04:39,680 --> 00:04:41,040
circuit so you have additions and

131
00:04:41,040 --> 00:04:42,479
multiplications

132
00:04:42,479 --> 00:04:45,440
over integers modulus sum prime p

133
00:04:45,440 --> 00:04:47,440
and as i said before only the result at

134
00:04:47,440 --> 00:04:49,600
the end should be revealed so if you

135
00:04:49,600 --> 00:04:52,479
evaluate the circuit gate by gate the

136
00:04:52,479 --> 00:04:54,960
evaluation of the intermediate results

137
00:04:54,960 --> 00:04:56,880
should still remain hidden

138
00:04:56,880 --> 00:04:58,800
and as it turns out a linear secret

139
00:04:58,800 --> 00:05:01,600
sharing scheme is enough to do all this

140
00:05:01,600 --> 00:05:03,520
so what is the secret sharing scheme in

141
00:05:03,520 --> 00:05:05,759
secret sharing parties all have their

142
00:05:05,759 --> 00:05:08,400
shares here denoted with brackets

143
00:05:08,400 --> 00:05:09,840
and if they would come together they

144
00:05:09,840 --> 00:05:11,840
could reconstruct the secret but the

145
00:05:11,840 --> 00:05:13,440
share itself doesn't reveal any

146
00:05:13,440 --> 00:05:14,560
information

147
00:05:14,560 --> 00:05:16,479
but usually you have additional

148
00:05:16,479 --> 00:05:17,840
properties so you can do certain

149
00:05:17,840 --> 00:05:19,360
operation with the shares which i will

150
00:05:19,360 --> 00:05:22,000
talk later about more

151
00:05:22,000 --> 00:05:23,840
yeah in speeds you also have

152
00:05:23,840 --> 00:05:25,520
authenticated secret sharing here with

153
00:05:25,520 --> 00:05:27,120
double brackets

154
00:05:27,120 --> 00:05:29,680
um that has then additional max to

155
00:05:29,680 --> 00:05:32,320
verify if a secret was reconstructed

156
00:05:32,320 --> 00:05:33,520
correctly

157
00:05:33,520 --> 00:05:35,600
and speeds uses an and out of end secret

158
00:05:35,600 --> 00:05:39,520
sharing to tolerate a dishonest majority

159
00:05:39,520 --> 00:05:41,039
so you need all of the shares to

160
00:05:41,039 --> 00:05:43,840
reconstruct the secret

161
00:05:43,840 --> 00:05:45,520
so for our protocol

162
00:05:45,520 --> 00:05:48,000
we have to basically change a lot of

163
00:05:48,000 --> 00:05:49,199
things

164
00:05:49,199 --> 00:05:51,600
um compared to speeds so

165
00:05:51,600 --> 00:05:53,840
in the online phase and in offline phase

166
00:05:53,840 --> 00:05:55,520
basically every component has to be

167
00:05:55,520 --> 00:05:57,199
adjusted to get the robustness and

168
00:05:57,199 --> 00:05:59,280
additional security properties like

169
00:05:59,280 --> 00:06:01,360
accountability

170
00:06:01,360 --> 00:06:03,840
so i start here again with the secret

171
00:06:03,840 --> 00:06:06,479
sharing scheme in our protocol we still

172
00:06:06,479 --> 00:06:07,759
have

173
00:06:07,759 --> 00:06:09,680
yeah we base it on secret sharing so we

174
00:06:09,680 --> 00:06:12,560
have shares but we also have commitments

175
00:06:12,560 --> 00:06:13,919
of shares

176
00:06:13,919 --> 00:06:16,240
and namely the commitments on every

177
00:06:16,240 --> 00:06:17,840
party's share

178
00:06:17,840 --> 00:06:19,840
and these commitments are public so

179
00:06:19,840 --> 00:06:22,000
everyone has access to them

180
00:06:22,000 --> 00:06:23,840
and then the parties have their own

181
00:06:23,840 --> 00:06:26,000
share and some randomness

182
00:06:26,000 --> 00:06:28,400
which was used to compute this

183
00:06:28,400 --> 00:06:30,560
commitment for their share

184
00:06:30,560 --> 00:06:33,199
and to reconstruct now parties

185
00:06:33,199 --> 00:06:35,680
send their share and the randomness and

186
00:06:35,680 --> 00:06:37,600
other parties can recompute the

187
00:06:37,600 --> 00:06:39,199
commitment check if it's the same that

188
00:06:39,199 --> 00:06:40,800
they have locally

189
00:06:40,800 --> 00:06:43,120
and verify based on this every single

190
00:06:43,120 --> 00:06:44,319
share

191
00:06:44,319 --> 00:06:45,919
and because we know for every share if

192
00:06:45,919 --> 00:06:48,240
it's correct or not we can use a t out

193
00:06:48,240 --> 00:06:49,120
of n

194
00:06:49,120 --> 00:06:51,120
secret sharing so we set a certain

195
00:06:51,120 --> 00:06:52,639
threshold for robustness so we don't

196
00:06:52,639 --> 00:06:54,560
need all the shares

197
00:06:54,560 --> 00:06:56,400
yeah to continue with the

198
00:06:56,400 --> 00:06:59,120
computation

199
00:06:59,440 --> 00:07:01,440
so i said we need certain properties for

200
00:07:01,440 --> 00:07:03,280
the secret sharing scheme it has to be

201
00:07:03,280 --> 00:07:05,360
linear so you can

202
00:07:05,360 --> 00:07:07,599
do linear operations on it and also we

203
00:07:07,599 --> 00:07:09,840
need the same thing for the commitments

204
00:07:09,840 --> 00:07:11,919
so linear commitments

205
00:07:11,919 --> 00:07:13,440
obviously the commitments need to be

206
00:07:13,440 --> 00:07:16,400
secure binding and hiding and for

207
00:07:16,400 --> 00:07:19,199
simulation based security would need

208
00:07:19,199 --> 00:07:21,520
things like equivocation for commitments

209
00:07:21,520 --> 00:07:24,000
that's what previous work used but we

210
00:07:24,000 --> 00:07:25,680
show that you don't actually need this

211
00:07:25,680 --> 00:07:28,960
and it can improve efficiency

212
00:07:28,960 --> 00:07:31,520
so then you have a linear authenticated

213
00:07:31,520 --> 00:07:34,400
secret sharing scheme so you can

214
00:07:34,400 --> 00:07:36,720
add up to authenticated shares to get an

215
00:07:36,720 --> 00:07:38,479
authenticated share for the sum and so

216
00:07:38,479 --> 00:07:40,880
on with this you can compute the circuit

217
00:07:40,880 --> 00:07:42,880
gate by gate at least now for the linear

218
00:07:42,880 --> 00:07:44,639
operations

219
00:07:44,639 --> 00:07:45,520
then

220
00:07:45,520 --> 00:07:47,680
there is the opening operation which is

221
00:07:47,680 --> 00:07:50,000
basically what i described intuitively

222
00:07:50,000 --> 00:07:51,120
before

223
00:07:51,120 --> 00:07:52,479
parties publish their share and

224
00:07:52,479 --> 00:07:54,720
randomness everyone else verifies the

225
00:07:54,720 --> 00:07:56,800
share based on the commitments we get

226
00:07:56,800 --> 00:07:58,479
accountability from that

227
00:07:58,479 --> 00:08:01,039
and because we use a threshold secretary

228
00:08:01,039 --> 00:08:03,919
scheme we also get robustness

229
00:08:03,919 --> 00:08:04,960
then

230
00:08:04,960 --> 00:08:07,280
multiplication is still left that's not

231
00:08:07,280 --> 00:08:08,879
a linear

232
00:08:08,879 --> 00:08:10,000
operation

233
00:08:10,000 --> 00:08:12,400
for that we can use the popular beaver

234
00:08:12,400 --> 00:08:14,160
multiplication which has so-called

235
00:08:14,160 --> 00:08:16,000
beaver triples

236
00:08:16,000 --> 00:08:19,199
authenticated chairs a b and c where c

237
00:08:19,199 --> 00:08:21,280
is the product of a and b and a and b

238
00:08:21,280 --> 00:08:23,360
are uniformly random

239
00:08:23,360 --> 00:08:26,720
and with these you can multiply two

240
00:08:26,720 --> 00:08:29,280
authenticated shares x and y

241
00:08:29,280 --> 00:08:30,639
by first

242
00:08:30,639 --> 00:08:33,679
masking x with a and y with b opening

243
00:08:33,679 --> 00:08:34,559
these

244
00:08:34,559 --> 00:08:36,479
and then the final

245
00:08:36,479 --> 00:08:38,240
authenticated share of the product is

246
00:08:38,240 --> 00:08:39,200
simply

247
00:08:39,200 --> 00:08:41,360
a linear combination of the triple and

248
00:08:41,360 --> 00:08:44,159
the open values

249
00:08:44,159 --> 00:08:45,680
then we have everything we need to

250
00:08:45,680 --> 00:08:47,519
compute circuit we have the linear

251
00:08:47,519 --> 00:08:50,000
operation multiplication and

252
00:08:50,000 --> 00:08:53,040
opening for the final result

253
00:08:53,040 --> 00:08:55,040
in the offline phase we then basically

254
00:08:55,040 --> 00:08:58,080
just need to compute these triples

255
00:08:58,080 --> 00:08:59,920
we do this based on homomorphic

256
00:08:59,920 --> 00:09:01,120
encryption

257
00:09:01,120 --> 00:09:03,360
and as i said before we can't just do it

258
00:09:03,360 --> 00:09:06,240
as in speeds we need new and changed

259
00:09:06,240 --> 00:09:08,080
your knowledge proofs accountable

260
00:09:08,080 --> 00:09:10,720
threshold decryption and so on and the

261
00:09:10,720 --> 00:09:14,320
details can be found in our paper

262
00:09:14,880 --> 00:09:17,120
so i said also we need commitments with

263
00:09:17,120 --> 00:09:18,959
certain properties now i talk about the

264
00:09:18,959 --> 00:09:20,399
concrete choice of commitments to

265
00:09:20,399 --> 00:09:22,800
instantiate our protocol

266
00:09:22,800 --> 00:09:25,040
we chose lattice-based commitments and

267
00:09:25,040 --> 00:09:26,640
we also show in our work that they can

268
00:09:26,640 --> 00:09:28,240
be more efficient than for example

269
00:09:28,240 --> 00:09:30,560
patterns and commitments that

270
00:09:30,560 --> 00:09:32,480
previous work used

271
00:09:32,480 --> 00:09:35,440
we use the commitments by baumet al they

272
00:09:35,440 --> 00:09:38,160
have many and nice properties like

273
00:09:38,160 --> 00:09:40,640
efficiency or knowledge proofs

274
00:09:40,640 --> 00:09:42,480
and of course they are also linear what

275
00:09:42,480 --> 00:09:44,320
we need

276
00:09:44,320 --> 00:09:45,680
then because these commitments are

277
00:09:45,680 --> 00:09:47,279
lattice-based

278
00:09:47,279 --> 00:09:49,279
for the commitments to be binding we

279
00:09:49,279 --> 00:09:51,279
have to make sure that the randomness is

280
00:09:51,279 --> 00:09:54,560
short with respect to a certain bound

281
00:09:54,560 --> 00:09:56,720
if we would just take these commitments

282
00:09:56,720 --> 00:09:59,040
apply it to what i described before

283
00:09:59,040 --> 00:10:01,279
it would actually not work so

284
00:10:01,279 --> 00:10:02,560
there is a problem with beaver

285
00:10:02,560 --> 00:10:04,640
multiplication beaver multiplication

286
00:10:04,640 --> 00:10:06,800
wouldn't be secure at all and also you

287
00:10:06,800 --> 00:10:08,560
can greatly improve efficiency by just

288
00:10:08,560 --> 00:10:12,480
some major changes minor changes

289
00:10:12,480 --> 00:10:14,560
so here is again the formula for the

290
00:10:14,560 --> 00:10:16,399
beaver multiplication but now for

291
00:10:16,399 --> 00:10:17,839
commitments instead of the full

292
00:10:17,839 --> 00:10:19,839
authenticated chairs

293
00:10:19,839 --> 00:10:22,079
um if you analyze that for the

294
00:10:22,079 --> 00:10:24,560
randomness if you know that a and b are

295
00:10:24,560 --> 00:10:26,959
uniformly random x minus a and y minus b

296
00:10:26,959 --> 00:10:28,640
are uniformly random so they are at

297
00:10:28,640 --> 00:10:30,720
least p the prime that you compute your

298
00:10:30,720 --> 00:10:32,399
operations

299
00:10:32,399 --> 00:10:34,079
with respect to module

300
00:10:34,079 --> 00:10:36,399
and yeah if you then use commitments

301
00:10:36,399 --> 00:10:40,160
module p it's not binding because

302
00:10:40,160 --> 00:10:42,640
everything is short with

303
00:10:42,640 --> 00:10:45,680
respect to p you don't base your binding

304
00:10:45,680 --> 00:10:48,160
property on hard lattice assumptions

305
00:10:48,160 --> 00:10:49,279
anymore

306
00:10:49,279 --> 00:10:50,480
yeah and you

307
00:10:50,480 --> 00:10:52,880
that's not secure if you would use just

308
00:10:52,880 --> 00:10:55,040
a larger prime then you don't have the

309
00:10:55,040 --> 00:10:56,800
homomorphic properties with respect to

310
00:10:56,800 --> 00:10:59,519
the prime that your plaintexts are for

311
00:10:59,519 --> 00:11:01,920
fix this by introducing a second modulus

312
00:11:01,920 --> 00:11:04,000
but that is only for the randomness and

313
00:11:04,000 --> 00:11:06,240
with this we can even fine tune how many

314
00:11:06,240 --> 00:11:09,519
homomorphic operations we can do

315
00:11:09,519 --> 00:11:12,399
and the second point about efficiency

316
00:11:12,399 --> 00:11:14,959
here again how to open values

317
00:11:14,959 --> 00:11:16,560
mainly the values during beaver

318
00:11:16,560 --> 00:11:18,720
multiplication you just publish the

319
00:11:18,720 --> 00:11:20,399
share randomness

320
00:11:20,399 --> 00:11:22,800
and verify the commitments if you just

321
00:11:22,800 --> 00:11:25,360
change this for the final values of your

322
00:11:25,360 --> 00:11:26,959
circuit

323
00:11:26,959 --> 00:11:29,440
by doing additional work every party

324
00:11:29,440 --> 00:11:31,600
samples new randomness computes new

325
00:11:31,600 --> 00:11:33,920
commitments from that proves in zero

326
00:11:33,920 --> 00:11:35,519
knowledge that the commitments that

327
00:11:35,519 --> 00:11:37,360
everyone has and the new commitments are

328
00:11:37,360 --> 00:11:38,959
for the same share

329
00:11:38,959 --> 00:11:41,120
and then basically publishes the

330
00:11:41,120 --> 00:11:42,640
knowledge proof and the new the

331
00:11:42,640 --> 00:11:44,000
commitments

332
00:11:44,000 --> 00:11:45,040
um

333
00:11:45,040 --> 00:11:47,519
yeah we have the same

334
00:11:47,519 --> 00:11:49,360
properties it's still accountable and

335
00:11:49,360 --> 00:11:50,959
robust but we don't need the

336
00:11:50,959 --> 00:11:53,760
equivocation for commitments anymore

337
00:11:53,760 --> 00:11:55,839
and that's why we can reduce our

338
00:11:55,839 --> 00:11:57,120
parameters

339
00:11:57,120 --> 00:12:00,560
and save like four times the size of our

340
00:12:00,560 --> 00:12:02,959
parameters and also the protocol

341
00:12:02,959 --> 00:12:04,880
response with respect to commitments

342
00:12:04,880 --> 00:12:07,440
runs like four times faster

343
00:12:07,440 --> 00:12:09,360
and speaking of parameters and

344
00:12:09,360 --> 00:12:11,040
performance

345
00:12:11,040 --> 00:12:13,600
here are the values for offline phase

346
00:12:13,600 --> 00:12:14,399
for

347
00:12:14,399 --> 00:12:17,040
the parameters for the bgv encryption

348
00:12:17,040 --> 00:12:18,959
scheme that we use

349
00:12:18,959 --> 00:12:20,000
our

350
00:12:20,000 --> 00:12:22,160
parameters are higher than for example

351
00:12:22,160 --> 00:12:24,959
for speeds and related protocols

352
00:12:24,959 --> 00:12:27,360
but because this is because we had to do

353
00:12:27,360 --> 00:12:28,560
additional work to get our

354
00:12:28,560 --> 00:12:30,560
accountability and robustness and they

355
00:12:30,560 --> 00:12:33,600
are not that far off from speeds

356
00:12:33,600 --> 00:12:36,079
and luckily they are also quite a bit

357
00:12:36,079 --> 00:12:37,839
lower than if we would have used just

358
00:12:37,839 --> 00:12:40,959
patterns and commitments

359
00:12:41,120 --> 00:12:43,440
then also we can see this in the

360
00:12:43,440 --> 00:12:46,320
runtime in our benchmarks here we

361
00:12:46,320 --> 00:12:48,399
compare our protocol to speeds and the

362
00:12:48,399 --> 00:12:51,120
cfi protocol that i mentioned before

363
00:12:51,120 --> 00:12:53,120
and the cfi protocol uses patterson

364
00:12:53,120 --> 00:12:55,600
commitments and it's quite a bit slower

365
00:12:55,600 --> 00:12:57,040
than our protocol

366
00:12:57,040 --> 00:12:59,120
and we are slower than speeds and that

367
00:12:59,120 --> 00:13:02,320
was to be expected again

368
00:13:02,320 --> 00:13:04,240
in the online phase at first it looks

369
00:13:04,240 --> 00:13:07,519
like the cfy is quite fast but this is

370
00:13:07,519 --> 00:13:09,839
because this protocol is not robust so

371
00:13:09,839 --> 00:13:11,440
it has similar properties to our

372
00:13:11,440 --> 00:13:13,519
protocol but it's not robust that's why

373
00:13:13,519 --> 00:13:16,720
they can use certain optimizations

374
00:13:16,720 --> 00:13:18,480
to skip

375
00:13:18,480 --> 00:13:20,399
expensive verification if there is no

376
00:13:20,399 --> 00:13:22,800
misbehavior but if there is misbehavior

377
00:13:22,800 --> 00:13:24,720
or if you're an external party that

378
00:13:24,720 --> 00:13:26,320
wants to verify this

379
00:13:26,320 --> 00:13:28,639
you have to do

380
00:13:28,639 --> 00:13:31,360
quite expensive verification and that's

381
00:13:31,360 --> 00:13:34,240
the red dot here that's 40 times slower

382
00:13:34,240 --> 00:13:36,880
than our protocol

383
00:13:36,880 --> 00:13:38,800
and if you put this together with the

384
00:13:38,800 --> 00:13:40,959
best of both world approach that would

385
00:13:40,959 --> 00:13:43,600
use restarts to get robustness

386
00:13:43,600 --> 00:13:45,120
you see if there is no

387
00:13:45,120 --> 00:13:48,399
malicious behavior no restart is needed

388
00:13:48,399 --> 00:13:50,399
this best of both world approach with

389
00:13:50,399 --> 00:13:52,399
cfy is fast

390
00:13:52,399 --> 00:13:54,800
but just a single misbehavior and its

391
00:13:54,800 --> 00:13:56,639
orders of magnitude slower than our

392
00:13:56,639 --> 00:13:59,040
approach and our approach has basically

393
00:13:59,040 --> 00:14:01,040
the same runtime independent of the

394
00:14:01,040 --> 00:14:04,880
number of malicious parties

395
00:14:04,880 --> 00:14:07,279
so to sum up we have a new protocol with

396
00:14:07,279 --> 00:14:09,680
strong security guarantees and it's

397
00:14:09,680 --> 00:14:11,440
concretely practical there is some

398
00:14:11,440 --> 00:14:13,279
trade-off for the security properties

399
00:14:13,279 --> 00:14:15,360
it's not as fast as

400
00:14:15,360 --> 00:14:16,639
the

401
00:14:16,639 --> 00:14:19,279
speeds as baseline with basically none

402
00:14:19,279 --> 00:14:20,800
of the security properties that we

403
00:14:20,800 --> 00:14:22,079
wanted to achieve

404
00:14:22,079 --> 00:14:24,720
but we think it's um yeah a good

405
00:14:24,720 --> 00:14:26,720
trade-off in applications where you need

406
00:14:26,720 --> 00:14:29,120
these additional security properties and

407
00:14:29,120 --> 00:14:31,600
because we are a protocol in the speeds

408
00:14:31,600 --> 00:14:33,920
family of protocols you can use certain

409
00:14:33,920 --> 00:14:35,920
techniques that

410
00:14:35,920 --> 00:14:38,320
came along like matrix triples which are

411
00:14:38,320 --> 00:14:40,079
like beaver triples but for efficient

412
00:14:40,079 --> 00:14:42,079
matrix multiplication you can just use

413
00:14:42,079 --> 00:14:44,160
all these techniques

414
00:14:44,160 --> 00:14:45,600
if you're interested please check out

415
00:14:45,600 --> 00:14:47,360
our paper and yeah thank you for

416
00:14:47,360 --> 00:14:49,100
listening

417
00:14:49,100 --> 00:14:55,119
[Applause]

418
00:14:55,440 --> 00:14:57,040
any questions please come up to the

419
00:14:57,040 --> 00:14:59,839
microphone

420
00:15:01,120 --> 00:15:03,920
yeah could you comment on um

421
00:15:03,920 --> 00:15:05,519
i guess like how the commitments would

422
00:15:05,519 --> 00:15:08,720
have to interact with extending

423
00:15:08,720 --> 00:15:10,560
i guess the speeds methodology to things

424
00:15:10,560 --> 00:15:12,399
like matrix multiplications or other

425
00:15:12,399 --> 00:15:14,399
kinds of nonlinear operations like do

426
00:15:14,399 --> 00:15:15,680
you also need to be able to come up with

427
00:15:15,680 --> 00:15:17,279
commitments for

428
00:15:17,279 --> 00:15:19,360
the triples for these operations

429
00:15:19,360 --> 00:15:22,800
um i i didn't hear most of what you said

430
00:15:22,800 --> 00:15:25,440
maybe can you just repeat it again yeah

431
00:15:25,440 --> 00:15:27,279
can you comment on how

432
00:15:27,279 --> 00:15:29,199
on whether or not the way that you're

433
00:15:29,199 --> 00:15:31,120
using commitments

434
00:15:31,120 --> 00:15:34,079
would impose additional requirements

435
00:15:34,079 --> 00:15:37,279
on doing a speed style extension

436
00:15:37,279 --> 00:15:38,560
to

437
00:15:38,560 --> 00:15:40,399
more complex multiplications like matrix

438
00:15:40,399 --> 00:15:42,320
multiplications

439
00:15:42,320 --> 00:15:44,800
um so we use these

440
00:15:44,800 --> 00:15:47,680
lattice-based commitments they are

441
00:15:47,680 --> 00:15:49,279
like based on

442
00:15:49,279 --> 00:15:51,279
ring or module

443
00:15:51,279 --> 00:15:53,199
lve and so on so

444
00:15:53,199 --> 00:15:54,720
yeah if you're familiar with this you

445
00:15:54,720 --> 00:15:56,320
basically have a lot of slots in your

446
00:15:56,320 --> 00:15:59,040
commitments and currently we just

447
00:15:59,040 --> 00:16:02,959
say we want to compute the same circuit

448
00:16:02,959 --> 00:16:05,920
the number of time slots in parallel

449
00:16:05,920 --> 00:16:07,120
and then you

450
00:16:07,120 --> 00:16:09,519
don't have any additional restrictions

451
00:16:09,519 --> 00:16:11,839
but you can use like more clever

452
00:16:11,839 --> 00:16:14,240
techniques too and yeah

453
00:16:14,240 --> 00:16:15,279
then you

454
00:16:15,279 --> 00:16:16,880
also don't have to

455
00:16:16,880 --> 00:16:19,199
compute the circuit a lot of times in

456
00:16:19,199 --> 00:16:20,240
parallel

457
00:16:20,240 --> 00:16:23,759
got you thank you so i have a question

458
00:16:23,759 --> 00:16:24,639
um

459
00:16:24,639 --> 00:16:26,560
actually i have two questions but uh we

460
00:16:26,560 --> 00:16:27,759
only have time for one i'll tell you the

461
00:16:27,759 --> 00:16:29,199
other one later so does it make sense to

462
00:16:29,199 --> 00:16:30,720
consider situations where all the

463
00:16:30,720 --> 00:16:32,720
parties are compromised so like your

464
00:16:32,720 --> 00:16:34,399
thread model is actually very very

465
00:16:34,399 --> 00:16:36,560
strong for public verifiability and

466
00:16:36,560 --> 00:16:38,560
accountability used you said something

467
00:16:38,560 --> 00:16:40,639
about like uh

468
00:16:40,639 --> 00:16:43,839
uh e-voting uh but in those situations

469
00:16:43,839 --> 00:16:46,079
if everybody's compromised then privacy

470
00:16:46,079 --> 00:16:47,600
doesn't hold anymore so it doesn't make

471
00:16:47,600 --> 00:16:49,519
sense in that setting maybe there are

472
00:16:49,519 --> 00:16:51,680
applications where it makes sense

473
00:16:51,680 --> 00:16:54,160
yeah i mean um it's like

474
00:16:54,160 --> 00:16:57,279
you you set your threshold so

475
00:16:57,279 --> 00:16:58,320
you

476
00:16:58,320 --> 00:17:00,399
basically assume yeah

477
00:17:00,399 --> 00:17:04,240
i hope that 80 of um

478
00:17:04,240 --> 00:17:07,199
like i hope that 10 of parties are not

479
00:17:07,199 --> 00:17:10,799
corrupted and then you can tolerate also

480
00:17:10,799 --> 00:17:11,760
um

481
00:17:11,760 --> 00:17:14,640
10 misbehavior or so

482
00:17:14,640 --> 00:17:15,760
um

483
00:17:15,760 --> 00:17:17,199
but yeah if

484
00:17:17,199 --> 00:17:19,599
there are more parties corrupted then

485
00:17:19,599 --> 00:17:22,079
you lose the privacy so that's one thing

486
00:17:22,079 --> 00:17:24,720
that is like a trade-off but yeah if you

487
00:17:24,720 --> 00:17:27,599
give it off to parties that you are

488
00:17:27,599 --> 00:17:30,080
can't be sure that um

489
00:17:30,080 --> 00:17:32,160
yeah a high amount or all of them are

490
00:17:32,160 --> 00:17:34,799
corrupted then yeah privacy cannot be

491
00:17:34,799 --> 00:17:35,919
saved here

492
00:17:35,919 --> 00:17:38,400
and um

493
00:17:38,400 --> 00:17:40,640
yeah but in in other protocols where you

494
00:17:40,640 --> 00:17:43,120
have like robustness if

495
00:17:43,120 --> 00:17:45,120
if there is too much misbehavior there

496
00:17:45,120 --> 00:17:46,720
you lose all

497
00:17:46,720 --> 00:17:48,799
properties you you

498
00:17:48,799 --> 00:17:51,360
you couldn't have the very verifiability

499
00:17:51,360 --> 00:17:53,039
for example so at least we have these

500
00:17:53,039 --> 00:17:55,600
things and yeah they are also quite

501
00:17:55,600 --> 00:17:57,440
important in certain cases okay thank

502
00:17:57,440 --> 00:17:59,760
you so much let's think oh sorry we

503
00:17:59,760 --> 00:18:01,600
don't have time and we're running out

504
00:18:01,600 --> 00:18:02,559
okay

505
00:18:02,559 --> 00:18:07,240
let's thank the speaker one more time

