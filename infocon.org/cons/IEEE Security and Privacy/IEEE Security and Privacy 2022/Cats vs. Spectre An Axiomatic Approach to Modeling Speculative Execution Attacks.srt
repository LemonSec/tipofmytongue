1
00:00:01,319 --> 00:00:03,360
okay thanks Vince for the for the

2
00:00:03,360 --> 00:00:06,060
introduction uh welcome everybody today

3
00:00:06,060 --> 00:00:08,760
I'm gonna be uh presenting function work

4
00:00:08,760 --> 00:00:10,559
with Johannes Kinder

5
00:00:10,559 --> 00:00:13,259
um about a different way of modeling and

6
00:00:13,259 --> 00:00:16,500
detecting speculative execution attacks

7
00:00:16,500 --> 00:00:19,859
so we live in a era where processors are

8
00:00:19,859 --> 00:00:21,420
really really fast but this is great

9
00:00:21,420 --> 00:00:23,640
because we get great performance

10
00:00:23,640 --> 00:00:25,199
however this has some security

11
00:00:25,199 --> 00:00:27,660
implications okay and we learn it on the

12
00:00:27,660 --> 00:00:30,300
hard way in 2018 when a family of

13
00:00:30,300 --> 00:00:32,820
vulnerabilities called Specter were

14
00:00:32,820 --> 00:00:34,680
disclosed and this this vulnerabilities

15
00:00:34,680 --> 00:00:37,559
exploit some of the optimizations in the

16
00:00:37,559 --> 00:00:39,059
in the micro architecture

17
00:00:39,059 --> 00:00:42,000
so we as programmers need a way to know

18
00:00:42,000 --> 00:00:43,860
what kind of guarantees the processor

19
00:00:43,860 --> 00:00:45,180
give us

20
00:00:45,180 --> 00:00:47,219
and the security Community have done a

21
00:00:47,219 --> 00:00:48,420
great job in the last few years

22
00:00:48,420 --> 00:00:51,539
regarding this and in particularly in

23
00:00:51,539 --> 00:00:53,940
the forms of defining formal semantics

24
00:00:53,940 --> 00:00:55,620
okay

25
00:00:55,620 --> 00:00:58,320
now there are many ways of the farm of

26
00:00:58,320 --> 00:01:00,480
formalizing semantics and then the

27
00:01:00,480 --> 00:01:03,000
question is which one should we use and

28
00:01:03,000 --> 00:01:04,619
the obvious solution for this kind of

29
00:01:04,619 --> 00:01:07,080
like uh problem could be to actually

30
00:01:07,080 --> 00:01:09,420
explicitly model the microarchitectural

31
00:01:09,420 --> 00:01:12,119
state in our semantics

32
00:01:12,119 --> 00:01:14,939
this is actually what uh

33
00:01:14,939 --> 00:01:16,680
um semantic they find an operational way

34
00:01:16,680 --> 00:01:18,299
are doing and I'm going to explain the

35
00:01:18,299 --> 00:01:20,159
next slide what I mean by this and in

36
00:01:20,159 --> 00:01:21,960
particularly the approach that all these

37
00:01:21,960 --> 00:01:23,880
papers are following

38
00:01:23,880 --> 00:01:25,560
however the problem with this kind of

39
00:01:25,560 --> 00:01:28,200
solution is that it is very hard to

40
00:01:28,200 --> 00:01:31,140
attack to adapt the semantics to some

41
00:01:31,140 --> 00:01:33,000
new attack because basically we need to

42
00:01:33,000 --> 00:01:34,320
add more information about the

43
00:01:34,320 --> 00:01:36,180
microarchitecture to the state and since

44
00:01:36,180 --> 00:01:39,119
became technically very bold

45
00:01:39,119 --> 00:01:41,520
and here I think what is important from

46
00:01:41,520 --> 00:01:43,560
for us as a community is to try to learn

47
00:01:43,560 --> 00:01:45,479
from some other communities because in

48
00:01:45,479 --> 00:01:46,860
particular the programming languages

49
00:01:46,860 --> 00:01:48,780
Community have been dealing with a very

50
00:01:48,780 --> 00:01:51,420
similar problem for over 30 years

51
00:01:51,420 --> 00:01:53,159
and that problem is called weak

52
00:01:53,159 --> 00:01:56,700
consistency okay so in the early 90s

53
00:01:56,700 --> 00:01:58,560
people in the pl Community started to

54
00:01:58,560 --> 00:02:01,380
develop developing uh semantics doing

55
00:02:01,380 --> 00:02:02,579
exactly the same that we are doing

56
00:02:02,579 --> 00:02:04,560
nowadays so using these operational

57
00:02:04,560 --> 00:02:08,639
models okay and how how do the semantic

58
00:02:08,639 --> 00:02:10,800
those semantics look like so you have a

59
00:02:10,800 --> 00:02:13,620
splitted notion of a state and you show

60
00:02:13,620 --> 00:02:16,020
how your system evolves like one

61
00:02:16,020 --> 00:02:18,840
instruction at a time okay

62
00:02:18,840 --> 00:02:21,239
now a really Game Changer in the pl

63
00:02:21,239 --> 00:02:24,000
Community came around 10 years ago when

64
00:02:24,000 --> 00:02:26,879
she had a glove in her phctc proposed a

65
00:02:26,879 --> 00:02:28,860
language called cut that allow you to

66
00:02:28,860 --> 00:02:33,620
define semantics in an axiomatic way

67
00:02:34,160 --> 00:02:36,780
semantics what you do is you take an

68
00:02:36,780 --> 00:02:38,700
arbitrary Behavior

69
00:02:38,700 --> 00:02:40,739
and then you try to filter those that

70
00:02:40,739 --> 00:02:43,080
are accepted or not accepted by the by

71
00:02:43,080 --> 00:02:45,780
the semantics and this normally looks at

72
00:02:45,780 --> 00:02:47,099
the following so you have a set of

73
00:02:47,099 --> 00:02:48,660
actions that is some kind of like

74
00:02:48,660 --> 00:02:53,459
language acceptor okay so you take

75
00:02:53,459 --> 00:02:56,340
a full behavior and then you check the

76
00:02:56,340 --> 00:02:58,440
axioms the ACT if the actions are still

77
00:02:58,440 --> 00:03:00,599
fulfilled you say that your semantic has

78
00:03:00,599 --> 00:03:03,000
said the behavior otherwise it does not

79
00:03:03,000 --> 00:03:05,519
accept them

80
00:03:05,519 --> 00:03:08,220
and as we many people say like every

81
00:03:08,220 --> 00:03:10,019
good idea is going to be discovered

82
00:03:10,019 --> 00:03:12,959
twice okay and Conquer it to our work

83
00:03:12,959 --> 00:03:14,580
some people from the architectural

84
00:03:14,580 --> 00:03:16,200
Community actually came up to very

85
00:03:16,200 --> 00:03:17,879
similar conclusions that they were

86
00:03:17,879 --> 00:03:19,500
they're gonna they will be presenting

87
00:03:19,500 --> 00:03:23,120
next in this next month

88
00:03:23,700 --> 00:03:25,440
so what are the key takes away that I

89
00:03:25,440 --> 00:03:27,659
hoped you take from this talk

90
00:03:27,659 --> 00:03:30,540
first of all uh the the reason why

91
00:03:30,540 --> 00:03:32,940
security behaviors happen in practice

92
00:03:32,940 --> 00:03:36,720
are very similar to why we consistency

93
00:03:36,720 --> 00:03:40,500
also happen Okay so we should try to

94
00:03:40,500 --> 00:03:43,080
learn from what the words that have been

95
00:03:43,080 --> 00:03:46,200
done in with consistency then defining

96
00:03:46,200 --> 00:03:47,340
uh

97
00:03:47,340 --> 00:03:50,879
um semantics in a thematic way is is

98
00:03:50,879 --> 00:03:54,299
very modular and it easily allows us to

99
00:03:54,299 --> 00:03:57,959
adapt the semantics and finally this is

100
00:03:57,959 --> 00:04:00,239
a way that allowed to give guarantees

101
00:04:00,239 --> 00:04:01,920
without really putting too much

102
00:04:01,920 --> 00:04:05,400
implementation details on the semantics

103
00:04:05,400 --> 00:04:08,939
so let me show you how um how what is

104
00:04:08,939 --> 00:04:10,319
the recipe or what are the steps that we

105
00:04:10,319 --> 00:04:12,360
need to do to actually Define execution

106
00:04:12,360 --> 00:04:14,700
semantics in an automatic way so there

107
00:04:14,700 --> 00:04:17,279
are three steps the first one is given a

108
00:04:17,279 --> 00:04:19,199
program we need to select what are the

109
00:04:19,199 --> 00:04:20,100
instructions that are going to be

110
00:04:20,100 --> 00:04:21,600
executed

111
00:04:21,600 --> 00:04:23,759
after that we need to select what is the

112
00:04:23,759 --> 00:04:26,520
data flow between those instructions and

113
00:04:26,520 --> 00:04:27,960
finally we need to decide if the

114
00:04:27,960 --> 00:04:29,880
semantics allow or do not allow this

115
00:04:29,880 --> 00:04:31,979
behavior and keep in mind that in here

116
00:04:31,979 --> 00:04:33,360
by semantics I mean the micro

117
00:04:33,360 --> 00:04:35,100
architecture okay so we want to Define

118
00:04:35,100 --> 00:04:37,500
what are the behaviors that the

119
00:04:37,500 --> 00:04:39,479
microarchitecturally could actually show

120
00:04:39,479 --> 00:04:40,560
in practice

121
00:04:40,560 --> 00:04:42,660
let's take a look to an example imagine

122
00:04:42,660 --> 00:04:45,000
that we have an array of like 16

123
00:04:45,000 --> 00:04:47,520
and we have a program where idx is an

124
00:04:47,520 --> 00:04:49,500
input that might be controlled by an

125
00:04:49,500 --> 00:04:50,820
attacker

126
00:04:50,820 --> 00:04:53,940
so the program loads the value of the

127
00:04:53,940 --> 00:04:54,780
input

128
00:04:54,780 --> 00:04:57,479
it compare it with the size of the array

129
00:04:57,479 --> 00:04:59,520
and then depending on this comparison

130
00:04:59,520 --> 00:05:01,220
there are two possible

131
00:05:01,220 --> 00:05:03,840
ways to proceed so if the comparison

132
00:05:03,840 --> 00:05:05,580
fails meaning that the access would be

133
00:05:05,580 --> 00:05:07,800
out of bound you just jump to the end of

134
00:05:07,800 --> 00:05:09,900
the program and nothing happens if the

135
00:05:09,900 --> 00:05:13,380
if the comparison was went through you

136
00:05:13,380 --> 00:05:14,759
so you are guaranteed that the access is

137
00:05:14,759 --> 00:05:16,560
going to be inbound so actually you you

138
00:05:16,560 --> 00:05:19,320
use the loaded value to actually access

139
00:05:19,320 --> 00:05:22,259
the array okay now let's take a look to

140
00:05:22,259 --> 00:05:25,020
the achimatic semantic of this program

141
00:05:25,020 --> 00:05:27,240
first thing remember we need to decide

142
00:05:27,240 --> 00:05:28,860
or select what are the instructions that

143
00:05:28,860 --> 00:05:30,780
are going to be executed so let's say

144
00:05:30,780 --> 00:05:32,580
that we decided that all the

145
00:05:32,580 --> 00:05:34,259
instructions are being executed okay and

146
00:05:34,259 --> 00:05:35,820
we're gonna what we're gonna be doing is

147
00:05:35,820 --> 00:05:37,560
actually building a graph representing

148
00:05:37,560 --> 00:05:38,759
the behaviors

149
00:05:38,759 --> 00:05:40,680
and you can see that in this graph each

150
00:05:40,680 --> 00:05:43,199
of these events in here represents one

151
00:05:43,199 --> 00:05:45,419
instruction for example the first one

152
00:05:45,419 --> 00:05:47,340
actually tell us that this is this is an

153
00:05:47,340 --> 00:05:48,660
instructional reading from memory

154
00:05:48,660 --> 00:05:50,580
precisely reading from the from the

155
00:05:50,580 --> 00:05:52,740
address of idx and it's reading value

156
00:05:52,740 --> 00:05:54,060
22.

157
00:05:54,060 --> 00:05:55,620
the second instruction is a local

158
00:05:55,620 --> 00:05:58,139
computation where for example the the

159
00:05:58,139 --> 00:06:00,780
register the value of the register is

160
00:06:00,780 --> 00:06:02,880
going to be zero the first instruction

161
00:06:02,880 --> 00:06:04,860
is or the third event is a branch

162
00:06:04,860 --> 00:06:06,720
extraction where the value of the

163
00:06:06,720 --> 00:06:09,419
resistor that it sees is 5 and finally

164
00:06:09,419 --> 00:06:13,139
the fourth event is again a read

165
00:06:13,139 --> 00:06:15,060
instruction that is going to be

166
00:06:15,060 --> 00:06:18,360
accessing address a plus 22 and if you

167
00:06:18,360 --> 00:06:21,720
remember our array has 16 slots so this

168
00:06:21,720 --> 00:06:23,580
actually is going to be an out-of-band

169
00:06:23,580 --> 00:06:25,500
access so it potentially might be

170
00:06:25,500 --> 00:06:27,539
reading a secret

171
00:06:27,539 --> 00:06:29,580
so the next thing is to decide the data

172
00:06:29,580 --> 00:06:31,319
flow between those instructions

173
00:06:31,319 --> 00:06:33,780
and this is basically adding these edges

174
00:06:33,780 --> 00:06:36,120
that we have in here to our graph so

175
00:06:36,120 --> 00:06:37,440
let's take a look for example to these

176
00:06:37,440 --> 00:06:39,720
blue edges so this represents data

177
00:06:39,720 --> 00:06:41,220
dependency and you can see that

178
00:06:41,220 --> 00:06:43,680
instruction 2 uses the value of register

179
00:06:43,680 --> 00:06:46,919
R1 that is loading instruction one okay

180
00:06:46,919 --> 00:06:49,199
so we have this data dependency between

181
00:06:49,199 --> 00:06:52,259
event Juan and even two in a similar way

182
00:06:52,259 --> 00:06:55,680
uh instruction 3 reads the value of R2

183
00:06:55,680 --> 00:06:58,020
that is loaded by instruction two so

184
00:06:58,020 --> 00:07:00,240
again we have this data dependency

185
00:07:00,240 --> 00:07:02,280
then we have other kind of relations for

186
00:07:02,280 --> 00:07:03,960
example we have this control dependency

187
00:07:03,960 --> 00:07:06,060
between instruction three and four and

188
00:07:06,060 --> 00:07:08,160
this is because executing or not

189
00:07:08,160 --> 00:07:10,740
executing introduction 4 really depends

190
00:07:10,740 --> 00:07:11,880
on what happened with the branch

191
00:07:11,880 --> 00:07:13,380
instruction okay and this is the reason

192
00:07:13,380 --> 00:07:16,020
why we have this control dependency and

193
00:07:16,020 --> 00:07:17,880
finally for read instructions we have

194
00:07:17,880 --> 00:07:21,300
this read from uh relation that tell us

195
00:07:21,300 --> 00:07:23,819
from where we are getting the value and

196
00:07:23,819 --> 00:07:25,440
this particular case we are reading the

197
00:07:25,440 --> 00:07:29,280
value directly from the initial memory

198
00:07:29,280 --> 00:07:31,500
so finally what we have to do is to

199
00:07:31,500 --> 00:07:33,120
decide the micro architecture design

200
00:07:33,120 --> 00:07:36,360
accept or does not accept this Behavior

201
00:07:36,360 --> 00:07:38,759
and here's where we may have like many

202
00:07:38,759 --> 00:07:40,380
options depending on

203
00:07:40,380 --> 00:07:43,259
what our micro architecture is and in

204
00:07:43,259 --> 00:07:45,840
particular you may think like okay uh if

205
00:07:45,840 --> 00:07:48,479
we take the traditional uh architectural

206
00:07:48,479 --> 00:07:51,720
semantics where the um the the semantic

207
00:07:51,720 --> 00:07:55,620
of this BX set instructions is such that

208
00:07:55,620 --> 00:07:58,560
if the value of register R2 in this case

209
00:07:58,560 --> 00:08:00,960
is zero then we're going to take the

210
00:08:00,960 --> 00:08:02,520
champ so meaning the destruction

211
00:08:02,520 --> 00:08:04,560
instruction four should not actually be

212
00:08:04,560 --> 00:08:06,599
executed so if we are following those

213
00:08:06,599 --> 00:08:09,120
semantics this this Behavior would not

214
00:08:09,120 --> 00:08:11,340
be allowed

215
00:08:11,340 --> 00:08:13,740
uh but then there as I say so at the

216
00:08:13,740 --> 00:08:15,060
micro architectural level many things

217
00:08:15,060 --> 00:08:17,220
could happen so for example let's let's

218
00:08:17,220 --> 00:08:19,080
take a look to what what would be the

219
00:08:19,080 --> 00:08:20,879
architectural view okay so basically

220
00:08:20,879 --> 00:08:22,440
when all instructions are eventually

221
00:08:22,440 --> 00:08:23,819
committed

222
00:08:23,819 --> 00:08:26,220
so and let's say we we start by saying

223
00:08:26,220 --> 00:08:28,259
okay what what needs to happen for

224
00:08:28,259 --> 00:08:30,360
instruction four to be committed

225
00:08:30,360 --> 00:08:32,760
so we have seen that instruction 4 has a

226
00:08:32,760 --> 00:08:35,159
control dependency on instruction three

227
00:08:35,159 --> 00:08:37,320
so we actually also need to say that

228
00:08:37,320 --> 00:08:39,599
instruction 3 is committed now

229
00:08:39,599 --> 00:08:41,640
instruction 3 has a data dependency on

230
00:08:41,640 --> 00:08:43,620
instruction two so again we need to

231
00:08:43,620 --> 00:08:45,060
commit instruction two

232
00:08:45,060 --> 00:08:47,040
and think we again has a data dependency

233
00:08:47,040 --> 00:08:48,720
with one we need to commit instruction

234
00:08:48,720 --> 00:08:50,880
one

235
00:08:50,880 --> 00:08:53,459
now following these rules about how

236
00:08:53,459 --> 00:08:55,500
instructions are committed this program

237
00:08:55,500 --> 00:08:58,019
is going to have two executions okay uh

238
00:08:58,019 --> 00:08:59,760
one when the second one when instruction

239
00:08:59,760 --> 00:09:02,160
four is not executed and the first one

240
00:09:02,160 --> 00:09:04,140
were in where we execute that

241
00:09:04,140 --> 00:09:06,000
instructions but we are guaranteed that

242
00:09:06,000 --> 00:09:08,580
the value of R2 is different at zero

243
00:09:08,580 --> 00:09:11,240
which guarantees us that the comparison

244
00:09:11,240 --> 00:09:14,760
succeeded so actually a plus L1 is going

245
00:09:14,760 --> 00:09:16,800
to be inbound okay so this axis is going

246
00:09:16,800 --> 00:09:18,420
to be safe

247
00:09:18,420 --> 00:09:20,640
however at the micro architectural level

248
00:09:20,640 --> 00:09:22,920
other things could happen okay so

249
00:09:22,920 --> 00:09:24,540
basically some instruction can be

250
00:09:24,540 --> 00:09:26,459
transiently executed and then we also

251
00:09:26,459 --> 00:09:28,500
need rules for those

252
00:09:28,500 --> 00:09:30,360
so imagine that we ask okay what

253
00:09:30,360 --> 00:09:32,459
happened if instruction 4 is transitly

254
00:09:32,459 --> 00:09:33,540
executed

255
00:09:33,540 --> 00:09:34,920
once ever again remember that

256
00:09:34,920 --> 00:09:36,959
instruction 4 has a control dependency

257
00:09:36,959 --> 00:09:39,660
on action 3. and here several things

258
00:09:39,660 --> 00:09:41,760
could happen so instruction three is a

259
00:09:41,760 --> 00:09:44,279
branch instruction okay and nowadays

260
00:09:44,279 --> 00:09:45,959
micro architecture has something that's

261
00:09:45,959 --> 00:09:48,600
called a branch predictor so if if the

262
00:09:48,600 --> 00:09:50,100
processor does not know what is the

263
00:09:50,100 --> 00:09:52,620
value of R2 what it can do is basically

264
00:09:52,620 --> 00:09:55,380
make a guess okay and if this guess is

265
00:09:55,380 --> 00:09:57,779
wrong we are basically when we make this

266
00:09:57,779 --> 00:09:59,640
guess we start this planting execution

267
00:09:59,640 --> 00:10:02,160
and if this guess is is wrong actually

268
00:10:02,160 --> 00:10:04,320
we are not guaranteed that this access

269
00:10:04,320 --> 00:10:06,240
is going to be inbound so while this

270
00:10:06,240 --> 00:10:08,279
instruction is transiently executed it

271
00:10:08,279 --> 00:10:09,720
might actually access out of bound

272
00:10:09,720 --> 00:10:10,980
memory

273
00:10:10,980 --> 00:10:13,079
and with this kind of like rules our

274
00:10:13,079 --> 00:10:15,839
program has the two uh executions that I

275
00:10:15,839 --> 00:10:17,459
showed in the previous slide where all

276
00:10:17,459 --> 00:10:20,160
the instructions are committed but also

277
00:10:20,160 --> 00:10:22,860
it has two executions where there is

278
00:10:22,860 --> 00:10:24,959
some speculation and in particular it

279
00:10:24,959 --> 00:10:27,420
would be possible to transiently execute

280
00:10:27,420 --> 00:10:29,579
an instruction for

281
00:10:29,579 --> 00:10:33,899
when the value of R2 or 0 and the branch

282
00:10:33,899 --> 00:10:36,300
predictor was wrong okay so actually

283
00:10:36,300 --> 00:10:41,100
because R2 was Zero we know that a plus

284
00:10:41,100 --> 00:10:43,860
R1 might actually be out of bound okay

285
00:10:43,860 --> 00:10:47,519
so this is a this is a a

286
00:10:47,519 --> 00:10:49,980
adventure with access

287
00:10:49,980 --> 00:10:51,480
and in the paper we actually have

288
00:10:51,480 --> 00:10:53,700
defined all the rules that uh about how

289
00:10:53,700 --> 00:10:55,380
to derive what instructions have to be

290
00:10:55,380 --> 00:10:58,079
committed on transient

291
00:10:58,079 --> 00:11:00,060
but this was just about the control flow

292
00:11:00,060 --> 00:11:02,040
so we processors can also speculate

293
00:11:02,040 --> 00:11:04,019
about the data flow and here is where

294
00:11:04,019 --> 00:11:05,640
difficult language coming from the weak

295
00:11:05,640 --> 00:11:07,920
consistency work comes into play

296
00:11:07,920 --> 00:11:10,980
so in cut you normally Define your

297
00:11:10,980 --> 00:11:14,100
semantics uh using so take a look to the

298
00:11:14,100 --> 00:11:16,200
to the bottom here we have the semantic

299
00:11:16,200 --> 00:11:18,360
of an in order processor so basically

300
00:11:18,360 --> 00:11:20,459
you have a bunch of relations that you

301
00:11:20,459 --> 00:11:21,660
can Define more for example you would

302
00:11:21,660 --> 00:11:23,160
say that the communication relation is

303
00:11:23,160 --> 00:11:25,920
the union of coherence read from and the

304
00:11:25,920 --> 00:11:27,240
reverse order of read from followed by

305
00:11:27,240 --> 00:11:29,279
coherence and then the axioms tell us

306
00:11:29,279 --> 00:11:31,680
that the unit of communication with the

307
00:11:31,680 --> 00:11:33,899
program order has to be a cyclic okay

308
00:11:33,899 --> 00:11:36,839
now if we if we take a look to the

309
00:11:36,839 --> 00:11:38,339
behavior that we have in here so this is

310
00:11:38,339 --> 00:11:39,779
a slightly modified program with no

311
00:11:39,779 --> 00:11:42,839
control flow but normally you could

312
00:11:42,839 --> 00:11:44,220
think like okay this program is going to

313
00:11:44,220 --> 00:11:46,560
be safe because before accessing the

314
00:11:46,560 --> 00:11:48,720
array and the first part of the of the

315
00:11:48,720 --> 00:11:50,399
program is actually masking the value to

316
00:11:50,399 --> 00:11:51,540
be sure that the access is going to be

317
00:11:51,540 --> 00:11:52,740
inbound

318
00:11:52,740 --> 00:11:54,660
so in here we have a behavior where we

319
00:11:54,660 --> 00:11:57,180
Define this grid from relation and in

320
00:11:57,180 --> 00:11:58,920
particular this behavior is saying okay

321
00:11:58,920 --> 00:12:01,079
instruction four is reading the value

322
00:12:01,079 --> 00:12:03,360
from instruction three and this is

323
00:12:03,360 --> 00:12:04,860
reading the value from there we are

324
00:12:04,860 --> 00:12:07,200
guaranteed that R2 gets a masked value

325
00:12:07,200 --> 00:12:09,300
and basically we know that then

326
00:12:09,300 --> 00:12:12,120
instruction 5 is going to be inbound so

327
00:12:12,120 --> 00:12:13,800
this is going to be a safe access

328
00:12:13,800 --> 00:12:15,660
now you might wonder okay but that was

329
00:12:15,660 --> 00:12:17,160
one Behavior what about this new

330
00:12:17,160 --> 00:12:19,079
Behavior imagine that now we ask

331
00:12:19,079 --> 00:12:21,540
E4 instead of reading about its value

332
00:12:21,540 --> 00:12:23,519
from E3 it might read it from the

333
00:12:23,519 --> 00:12:25,440
initial value that this is controlled by

334
00:12:25,440 --> 00:12:27,720
the attacker if that's the case R2 is

335
00:12:27,720 --> 00:12:29,040
not guaranteed to be inbound and

336
00:12:29,040 --> 00:12:30,240
actually we might be accessing the

337
00:12:30,240 --> 00:12:31,200
secret

338
00:12:31,200 --> 00:12:35,459
however if you see if we start by E4

339
00:12:35,459 --> 00:12:38,160
basically we can move to to e0 by

340
00:12:38,160 --> 00:12:40,200
reversing the order of Reform followed

341
00:12:40,200 --> 00:12:42,180
by coherence followed by po and

342
00:12:42,180 --> 00:12:43,740
basically we have signed a cycle that

343
00:12:43,740 --> 00:12:45,600
our semantics do not allow so this

344
00:12:45,600 --> 00:12:46,980
behavior is not going to be allowed by

345
00:12:46,980 --> 00:12:49,200
the semantics

346
00:12:49,200 --> 00:12:51,600
and so this this is actually showing

347
00:12:51,600 --> 00:12:53,220
that the kind of like behavior that we

348
00:12:53,220 --> 00:12:54,899
have are similar to what's happening

349
00:12:54,899 --> 00:12:56,880
with consistency and we can reuse this

350
00:12:56,880 --> 00:12:58,680
cut language to model some of those

351
00:12:58,680 --> 00:13:00,420
behaviors

352
00:13:00,420 --> 00:13:02,040
but now it may happen in a real

353
00:13:02,040 --> 00:13:04,200
processor that the processor might

354
00:13:04,200 --> 00:13:08,040
speculate that E3 and E4 do not access

355
00:13:08,040 --> 00:13:10,920
the same address so it might reorder

356
00:13:10,920 --> 00:13:12,959
those instructions and how do we handle

357
00:13:12,959 --> 00:13:14,519
that so the only thing that we need to

358
00:13:14,519 --> 00:13:16,380
do is to actually reflect this kind of

359
00:13:16,380 --> 00:13:18,480
things or these guarantees in our cut

360
00:13:18,480 --> 00:13:21,060
model and now you can see that we have a

361
00:13:21,060 --> 00:13:22,920
different model now that is supposed to

362
00:13:22,920 --> 00:13:25,139
model this store to load forward in

363
00:13:25,139 --> 00:13:28,139
program

364
00:13:29,399 --> 00:13:31,680
and you can see that in particular while

365
00:13:31,680 --> 00:13:34,079
before we were using this PO in our

366
00:13:34,079 --> 00:13:36,720
acyclic check we're actually using a a

367
00:13:36,720 --> 00:13:39,000
relaxed version now where we don't put

368
00:13:39,000 --> 00:13:41,519
uh so we are allowed to remove from po

369
00:13:41,519 --> 00:13:46,199
the read write pairs okay uh so since

370
00:13:46,199 --> 00:13:49,199
now we remove the spare like the the poh

371
00:13:49,199 --> 00:13:51,480
between E3 and E4 is not going to be

372
00:13:51,480 --> 00:13:53,519
part of our ethical City check and then

373
00:13:53,519 --> 00:13:55,440
this Behavior actually is going to be

374
00:13:55,440 --> 00:13:57,180
allowed by our semantics

375
00:13:57,180 --> 00:13:59,220
however you can see that our semantic

376
00:13:59,220 --> 00:14:01,199
says that okay we should keep the the

377
00:14:01,199 --> 00:14:03,600
order if for example there is a fence

378
00:14:03,600 --> 00:14:05,220
interaction between those

379
00:14:05,220 --> 00:14:07,920
so basically one way so if we could end

380
00:14:07,920 --> 00:14:10,199
a add that fancy traction with other

381
00:14:10,199 --> 00:14:12,839
defense in here and put in the cycle

382
00:14:12,839 --> 00:14:15,120
again and once again this this mitigated

383
00:14:15,120 --> 00:14:16,620
Behavior could not be allowed by our

384
00:14:16,620 --> 00:14:18,899
semantics

385
00:14:18,899 --> 00:14:22,019
but keep in mind that uh guarantees is

386
00:14:22,019 --> 00:14:23,699
not the same as implementation detail so

387
00:14:23,699 --> 00:14:24,959
in here I'm not explaining anything

388
00:14:24,959 --> 00:14:27,180
about how this processor really

389
00:14:27,180 --> 00:14:28,740
implement the stuff so I'm just saying

390
00:14:28,740 --> 00:14:30,300
that the processor is allowed to reorder

391
00:14:30,300 --> 00:14:33,360
this right repair for example

392
00:14:33,360 --> 00:14:35,880
but this is not just about semantics uh

393
00:14:35,880 --> 00:14:37,740
the semantics are just the starting

394
00:14:37,740 --> 00:14:40,380
point to build tools on top of this and

395
00:14:40,380 --> 00:14:42,959
we we created a tool called kaibio that

396
00:14:42,959 --> 00:14:45,180
is based on this imagining semantics and

397
00:14:45,180 --> 00:14:47,160
we compare it to two tools that can

398
00:14:47,160 --> 00:14:48,839
handle speculative execution attacks one

399
00:14:48,839 --> 00:14:50,880
is a spectator that as you can see in

400
00:14:50,880 --> 00:14:53,519
there a spectator is able to Define uh

401
00:14:53,519 --> 00:14:55,560
from here we have four families of of

402
00:14:55,560 --> 00:14:57,839
vulnerabilities and a spectator can find

403
00:14:57,839 --> 00:14:59,820
or can detect the problem with the first

404
00:14:59,820 --> 00:15:01,740
families but it could not detect any of

405
00:15:01,740 --> 00:15:03,480
the other ones and this is because as I

406
00:15:03,480 --> 00:15:05,579
say a spectator is based on operational

407
00:15:05,579 --> 00:15:07,440
semantics and it's hard to adapt to

408
00:15:07,440 --> 00:15:09,839
other kind of vulnerabilities binsect

409
00:15:09,839 --> 00:15:11,880
goes one step forward so it can detect

410
00:15:11,880 --> 00:15:13,980
two out of the of the four families in

411
00:15:13,980 --> 00:15:15,600
here but once again it's very hard to

412
00:15:15,600 --> 00:15:17,639
adapt to other semantics

413
00:15:17,639 --> 00:15:20,160
however our tool or our academic

414
00:15:20,160 --> 00:15:22,620
semantics are able to follow to to model

415
00:15:22,620 --> 00:15:24,300
all these kind of like behaviors in a

416
00:15:24,300 --> 00:15:25,740
very easy way

417
00:15:25,740 --> 00:15:28,500
so and this is a strong point in the in

418
00:15:28,500 --> 00:15:31,199
for about uh that axiomatics models are

419
00:15:31,199 --> 00:15:34,079
very easy to adapt

420
00:15:34,079 --> 00:15:35,519
so in summary

421
00:15:35,519 --> 00:15:38,220
uh I hope that you can I combine the the

422
00:15:38,220 --> 00:15:40,740
idea that speculative execution and weak

423
00:15:40,740 --> 00:15:43,560
consistency are not that hard

424
00:15:43,560 --> 00:15:46,440
uh then achimatic semantics are more

425
00:15:46,440 --> 00:15:48,060
flexible than the operational one and

426
00:15:48,060 --> 00:15:50,399
this is a claim that has is back up by

427
00:15:50,399 --> 00:15:52,800
almost 30 years of research in the

428
00:15:52,800 --> 00:15:55,079
programming language community

429
00:15:55,079 --> 00:15:57,540
uh and what we finally need are hardware

430
00:15:57,540 --> 00:15:59,120
and software contracts for security

431
00:15:59,120 --> 00:16:01,920
however it's very important for me that

432
00:16:01,920 --> 00:16:04,380
we don't really want to Define this

433
00:16:04,380 --> 00:16:06,000
contract like adding all implementation

434
00:16:06,000 --> 00:16:07,860
details so we we want a nice level of

435
00:16:07,860 --> 00:16:09,480
abstractions where we only show the

436
00:16:09,480 --> 00:16:10,980
guarantees that are given and I think

437
00:16:10,980 --> 00:16:12,540
that these aromatic semantics are the

438
00:16:12,540 --> 00:16:15,420
nice uh way of doing this thank you very

439
00:16:15,420 --> 00:16:17,120
much

440
00:16:17,120 --> 00:16:22,800
[Applause]

441
00:16:22,800 --> 00:16:24,420
thank you for the talk

442
00:16:24,420 --> 00:16:27,660
question from the room

443
00:16:27,660 --> 00:16:31,759
go ahead you can go in front

444
00:16:31,980 --> 00:16:34,259
no we can't tell you we need the sound

445
00:16:34,259 --> 00:16:36,920
and the mic

446
00:16:38,399 --> 00:16:41,339
accident oh thank you I wondered does

447
00:16:41,339 --> 00:16:44,699
the axiomatic system stop whenever uh an

448
00:16:44,699 --> 00:16:47,399
inconsistency is found or do you follow

449
00:16:47,399 --> 00:16:49,680
up and try to find out what can be done

450
00:16:49,680 --> 00:16:51,000
from the bug

451
00:16:51,000 --> 00:16:52,740
uh what do you mean by follow-up

452
00:16:52,740 --> 00:16:54,180
follow-up because keep in mind that in

453
00:16:54,180 --> 00:16:56,160
the axiomatic semantics you take a full

454
00:16:56,160 --> 00:16:57,540
Behavior

455
00:16:57,540 --> 00:16:59,699
if not as a operational one where you do

456
00:16:59,699 --> 00:17:01,680
step by step so here you take a full

457
00:17:01,680 --> 00:17:03,360
behavior and documented semantic filter

458
00:17:03,360 --> 00:17:04,919
those that are not allowed so it's an

459
00:17:04,919 --> 00:17:06,599
over approximation

460
00:17:06,599 --> 00:17:08,880
uh no the first step is an over

461
00:17:08,880 --> 00:17:10,559
approximation where you take all the

462
00:17:10,559 --> 00:17:12,539
behaviors but after the filtering you

463
00:17:12,539 --> 00:17:14,339
have a precise according to your

464
00:17:14,339 --> 00:17:15,900
semantics

465
00:17:15,900 --> 00:17:18,439
got it okay

466
00:17:21,359 --> 00:17:21,900
okay

467
00:17:21,900 --> 00:17:22,859
um

468
00:17:22,859 --> 00:17:25,260
how compared to some of the like

469
00:17:25,260 --> 00:17:27,780
step-by-step semantic models how does

470
00:17:27,780 --> 00:17:29,780
the axiomatic

471
00:17:29,780 --> 00:17:33,660
analysis scale in terms of like small

472
00:17:33,660 --> 00:17:36,360
programs versus analyzing crypto

473
00:17:36,360 --> 00:17:38,100
libraries

474
00:17:38,100 --> 00:17:40,679
um so in general so for example our our

475
00:17:40,679 --> 00:17:43,020
implementation is based on on a bonded

476
00:17:43,020 --> 00:17:46,260
model check-in uh and since this is an

477
00:17:46,260 --> 00:17:48,120
alive so our tool really analyze like

478
00:17:48,120 --> 00:17:51,059
assembly and we have some scalability

479
00:17:51,059 --> 00:17:52,559
progress in there because in particular

480
00:17:52,559 --> 00:17:55,620
uh things you have to to handle like in

481
00:17:55,620 --> 00:17:57,480
local variables are going to end it up

482
00:17:57,480 --> 00:17:59,160
like in registers and then you bring to

483
00:17:59,160 --> 00:18:00,780
memory and you put things back and stuff

484
00:18:00,780 --> 00:18:02,760
like that and that implementation

485
00:18:02,760 --> 00:18:04,980
doesn't really scale that much

486
00:18:04,980 --> 00:18:05,640
um

487
00:18:05,640 --> 00:18:08,220
however in the for example in the in the

488
00:18:08,220 --> 00:18:10,980
weak memory word like things are

489
00:18:10,980 --> 00:18:12,720
starting to scale my better so initially

490
00:18:12,720 --> 00:18:14,160
they were dealing with very small like

491
00:18:14,160 --> 00:18:16,320
litmus tests and now there are tools

492
00:18:16,320 --> 00:18:18,539
that can even handle code from the Linux

493
00:18:18,539 --> 00:18:20,220
government for example so things are

494
00:18:20,220 --> 00:18:21,900
improving and I hope that this is going

495
00:18:21,900 --> 00:18:23,820
to open the door to to the family here

496
00:18:23,820 --> 00:18:25,200
all right that sounds really exciting

497
00:18:25,200 --> 00:18:27,620
thank you

498
00:18:28,980 --> 00:18:32,020
let's see if we have a question online

499
00:18:32,020 --> 00:18:32,640
[Music]

500
00:18:32,640 --> 00:18:33,539
um

501
00:18:33,539 --> 00:18:37,500
nope so uh you just mentioned that the

502
00:18:37,500 --> 00:18:39,419
verification was done through bounding

503
00:18:39,419 --> 00:18:42,480
the model checking uh so I'm guessing

504
00:18:42,480 --> 00:18:44,820
the facts bonded for the loops it

505
00:18:44,820 --> 00:18:49,440
becomes a problem uh any insight on can

506
00:18:49,440 --> 00:18:52,320
we do for unbounding Loops using I don't

507
00:18:52,320 --> 00:18:54,600
know input from the user when Rising

508
00:18:54,600 --> 00:18:55,980
variants on your Loop or something like

509
00:18:55,980 --> 00:18:59,400
this uh no so so as you say so normally

510
00:18:59,400 --> 00:19:01,200
with programs with loops what we do is

511
00:19:01,200 --> 00:19:02,760
like you unroll the program and for

512
00:19:02,760 --> 00:19:04,559
example you can see the limitations in

513
00:19:04,559 --> 00:19:07,620
this live already uh the the s2l1

514
00:19:07,620 --> 00:19:09,419
actually that you can see that we we can

515
00:19:09,419 --> 00:19:11,820
actually handle 24 of the 26 because

516
00:19:11,820 --> 00:19:14,340
actually the the the missing one because

517
00:19:14,340 --> 00:19:15,900
actually there is one version with no

518
00:19:15,900 --> 00:19:17,700
mitigation and one with mitigation and

519
00:19:17,700 --> 00:19:19,020
the missing one is because actually

520
00:19:19,020 --> 00:19:20,820
there is a loop that needs to be

521
00:19:20,820 --> 00:19:23,460
executed 200 times and actually when

522
00:19:23,460 --> 00:19:24,840
we're creating coding for this like we

523
00:19:24,840 --> 00:19:26,580
just run out of memory

524
00:19:26,580 --> 00:19:28,380
I know you see in the future a way to

525
00:19:28,380 --> 00:19:30,840
write in variance on your Loops rather

526
00:19:30,840 --> 00:19:33,660
than just unfolding everything

527
00:19:33,660 --> 00:19:35,700
I'm not sure to be honest I think that

528
00:19:35,700 --> 00:19:37,559
even for example that we consisted the

529
00:19:37,559 --> 00:19:41,160
world like things like normally uh like

530
00:19:41,160 --> 00:19:42,720
people perform bundle model checking and

531
00:19:42,720 --> 00:19:44,280
you the best that you can do so far is

532
00:19:44,280 --> 00:19:45,840
just unroll the all the loops that you

533
00:19:45,840 --> 00:19:49,879
have so coming up with invariance

534
00:19:50,720 --> 00:19:53,940
user defined yeah yeah

535
00:19:53,940 --> 00:19:56,520
okay thank you I think we will stop

536
00:19:56,520 --> 00:19:58,559
there any way we are right on time so

537
00:19:58,559 --> 00:20:00,960
thank you again for your talk and your

538
00:20:00,960 --> 00:20:02,450
questions

539
00:20:02,450 --> 00:20:05,819
[Applause]

