1
00:00:00,000 --> 00:00:01,040
very much

2
00:00:01,040 --> 00:00:02,960
thanks arthur for the introduction this

3
00:00:02,960 --> 00:00:05,200
is c-star it's joint work with my

4
00:00:05,200 --> 00:00:06,960
colleagues from idiot zurich benjamin

5
00:00:06,960 --> 00:00:09,280
roger and martin

6
00:00:09,280 --> 00:00:10,960
so to start

7
00:00:10,960 --> 00:00:12,960
remember that on public blockchain smart

8
00:00:12,960 --> 00:00:14,960
contracts interact with data which is

9
00:00:14,960 --> 00:00:16,960
stored in clear text on the blockchain

10
00:00:16,960 --> 00:00:19,039
which is accessible to everyone so if

11
00:00:19,039 --> 00:00:20,800
you want to store sensitive information

12
00:00:20,800 --> 00:00:23,199
such as your medical data this is of

13
00:00:23,199 --> 00:00:24,720
course a problem right

14
00:00:24,720 --> 00:00:26,000
and ideally you would have something

15
00:00:26,000 --> 00:00:28,800
like this where the data is hidden

16
00:00:28,800 --> 00:00:31,439
and you can now interact with your data

17
00:00:31,439 --> 00:00:33,760
as before using your smart contracts and

18
00:00:33,760 --> 00:00:36,079
note that this concept of data privacy

19
00:00:36,079 --> 00:00:37,840
does not protect the smart contact

20
00:00:37,840 --> 00:00:42,079
itself but only the data which is stored

21
00:00:42,079 --> 00:00:44,800
this is not a new idea several works

22
00:00:44,800 --> 00:00:47,280
have tried to achieve data privacy but

23
00:00:47,280 --> 00:00:50,239
they have various limitations

24
00:00:50,239 --> 00:00:51,600
some of the early works they bring

25
00:00:51,600 --> 00:00:54,079
privacy to payments mostly but they do

26
00:00:54,079 --> 00:00:57,120
not focus on general smart contracts

27
00:00:57,120 --> 00:00:59,359
some works rely on trusted managers or

28
00:00:59,359 --> 00:01:02,239
hardware to enable data privacy but if

29
00:01:02,239 --> 00:01:03,760
you do not want to trust these hardware

30
00:01:03,760 --> 00:01:06,240
managers this is of course a problem

31
00:01:06,240 --> 00:01:07,920
more recently there have been works

32
00:01:07,920 --> 00:01:09,920
which rely on cryptographic primitives

33
00:01:09,920 --> 00:01:12,479
to enable data privacy but

34
00:01:12,479 --> 00:01:14,000
it turns out that in practice if you

35
00:01:14,000 --> 00:01:17,759
want to use these tools to implement new

36
00:01:17,759 --> 00:01:19,119
applications you actually need to

37
00:01:19,119 --> 00:01:20,240
manually

38
00:01:20,240 --> 00:01:22,240
integrate these cryptographic primitives

39
00:01:22,240 --> 00:01:25,360
which can be quite challenging

40
00:01:25,360 --> 00:01:27,680
in our previous work ck we have tried to

41
00:01:27,680 --> 00:01:29,439
mitigate the problems i just mentioned

42
00:01:29,439 --> 00:01:31,439
but ck has an explosivity problem and

43
00:01:31,439 --> 00:01:33,600
you're restricted to some basic

44
00:01:33,600 --> 00:01:35,360
smart contracts

45
00:01:35,360 --> 00:01:38,159
here i am presenting c star cister is a

46
00:01:38,159 --> 00:01:40,159
system for data privacy on more channels

47
00:01:40,159 --> 00:01:41,680
more contracts

48
00:01:41,680 --> 00:01:43,680
and it does not require you to trust any

49
00:01:43,680 --> 00:01:45,520
trusted manager or hardware and

50
00:01:45,520 --> 00:01:47,200
importantly you do not need

51
00:01:47,200 --> 00:01:49,280
cryptographic expertise to implement

52
00:01:49,280 --> 00:01:51,840
private smart contracts using z-star

53
00:01:51,840 --> 00:01:53,600
caesar is highly expressive and as a

54
00:01:53,600 --> 00:01:54,880
practical benefit you can actually

55
00:01:54,880 --> 00:01:56,640
execute the context on ethereum which is

56
00:01:56,640 --> 00:01:58,479
very nice

57
00:01:58,479 --> 00:02:00,799
conceptually caesar extends our previous

58
00:02:00,799 --> 00:02:02,640
sql work by homomorphic encryption in

59
00:02:02,640 --> 00:02:04,560
order to give you more explicitivity we

60
00:02:04,560 --> 00:02:06,799
will see this in a second

61
00:02:06,799 --> 00:02:08,479
so what's the high level idea of what

62
00:02:08,479 --> 00:02:09,840
you're doing here

63
00:02:09,840 --> 00:02:11,840
consider this example

64
00:02:11,840 --> 00:02:14,000
where we store balances of users on the

65
00:02:14,000 --> 00:02:15,920
blockchain like here alice's and bob's

66
00:02:15,920 --> 00:02:18,000
balance and in order to keep these

67
00:02:18,000 --> 00:02:20,160
balances private we encrypt it under the

68
00:02:20,160 --> 00:02:22,879
public keys of their owner so alice's

69
00:02:22,879 --> 00:02:24,720
balance will be encrypted under alice's

70
00:02:24,720 --> 00:02:25,920
public key

71
00:02:25,920 --> 00:02:28,080
and now suppose alice wants to send one

72
00:02:28,080 --> 00:02:31,360
of her tokens over to bob and to do so

73
00:02:31,360 --> 00:02:33,519
she of course wants to decrease her

74
00:02:33,519 --> 00:02:37,360
balance by 1 and in contrast increase

75
00:02:37,360 --> 00:02:39,280
bob's balance by one

76
00:02:39,280 --> 00:02:40,800
and now of course everything is

77
00:02:40,800 --> 00:02:44,400
encrypted so how can you do this

78
00:02:44,400 --> 00:02:46,480
the following idea is not new like other

79
00:02:46,480 --> 00:02:48,720
work has done this manually and the idea

80
00:02:48,720 --> 00:02:50,640
is to use non-interactive zero-knowledge

81
00:02:50,640 --> 00:02:52,400
proofs and homomorphic encryption to

82
00:02:52,400 --> 00:02:54,560
actually enable this transaction

83
00:02:54,560 --> 00:02:55,360
so

84
00:02:55,360 --> 00:02:57,680
let's distinguish the two cases here

85
00:02:57,680 --> 00:03:00,080
first let's talk about the al

86
00:03:00,080 --> 00:03:02,560
values owned by alice which is the case

87
00:03:02,560 --> 00:03:04,560
self-owned here

88
00:03:04,560 --> 00:03:06,480
and in order for alice to decrease her

89
00:03:06,480 --> 00:03:08,400
balance it's very easy right she will

90
00:03:08,400 --> 00:03:10,720
decrypt her previous balance apply the

91
00:03:10,720 --> 00:03:12,720
desired plaintext operation and then

92
00:03:12,720 --> 00:03:14,080
encrypt it again to get the new

93
00:03:14,080 --> 00:03:15,680
ciphertext

94
00:03:15,680 --> 00:03:17,040
and now of course to make sure that

95
00:03:17,040 --> 00:03:18,480
alice does not cheat

96
00:03:18,480 --> 00:03:20,480
because she could essentially apply any

97
00:03:20,480 --> 00:03:22,000
operation right and send a new cipher

98
00:03:22,000 --> 00:03:24,239
text she will attach a non-interactive

99
00:03:24,239 --> 00:03:26,319
zero-knowledge proof which states that

100
00:03:26,319 --> 00:03:27,840
this plaintext operation has been

101
00:03:27,840 --> 00:03:30,080
applied correctly

102
00:03:30,080 --> 00:03:32,879
in case of bob's value which is what we

103
00:03:32,879 --> 00:03:35,680
call a foreign data here alice can rely

104
00:03:35,680 --> 00:03:37,040
on the homomorphic property of the

105
00:03:37,040 --> 00:03:39,120
encryption scheme so if your encryption

106
00:03:39,120 --> 00:03:40,959
scheme is additively homomorphic alice

107
00:03:40,959 --> 00:03:43,040
can first encrypt the constant one and

108
00:03:43,040 --> 00:03:45,760
then homomorphically integrate this

109
00:03:45,760 --> 00:03:48,319
increment by one inside the bob cipher

110
00:03:48,319 --> 00:03:50,159
text to get a new ciphertext and now

111
00:03:50,159 --> 00:03:52,319
alice will just send the new ciphertext

112
00:03:52,319 --> 00:03:53,840
and the non-interactive serial knowledge

113
00:03:53,840 --> 00:03:56,480
proof to the blockchain for verification

114
00:03:56,480 --> 00:03:58,400
and as i said the previous work has done

115
00:03:58,400 --> 00:04:00,400
this specifically this application here

116
00:04:00,400 --> 00:04:02,480
i've shown you with the balances our

117
00:04:02,480 --> 00:04:03,920
goal here is to automate this whole

118
00:04:03,920 --> 00:04:06,319
process for more channel smart contracts

119
00:04:06,319 --> 00:04:07,840
and there are various questions popping

120
00:04:07,840 --> 00:04:10,159
up here for instance how do you even

121
00:04:10,159 --> 00:04:11,599
distinguish between cell phone and

122
00:04:11,599 --> 00:04:13,680
foreign data at priority it's not clear

123
00:04:13,680 --> 00:04:15,519
what this even means what about the

124
00:04:15,519 --> 00:04:18,000
interactions between these two cases

125
00:04:18,000 --> 00:04:20,320
and also if your encryption scheme is

126
00:04:20,320 --> 00:04:21,680
only partially homomorphic there are

127
00:04:21,680 --> 00:04:23,280
some restrictions of course in what you

128
00:04:23,280 --> 00:04:25,759
can express on the foreign data here so

129
00:04:25,759 --> 00:04:27,680
we need to account for that as well

130
00:04:27,680 --> 00:04:29,280
and finally

131
00:04:29,280 --> 00:04:31,120
we need to talk about what exactly we

132
00:04:31,120 --> 00:04:32,479
need to prove in the zero knowledge

133
00:04:32,479 --> 00:04:34,479
proof and how do we make this efficient

134
00:04:34,479 --> 00:04:36,479
because we will need to reason about

135
00:04:36,479 --> 00:04:38,639
evaluating cryptographic primitives as

136
00:04:38,639 --> 00:04:41,520
part of the zero knowledge proof

137
00:04:41,520 --> 00:04:43,520
so cyster is a system

138
00:04:43,520 --> 00:04:45,680
which actually helps you to bring data

139
00:04:45,680 --> 00:04:47,440
privacy to your smart contracts using

140
00:04:47,440 --> 00:04:48,960
the previous idea

141
00:04:48,960 --> 00:04:51,360
and in c-star developers implement the

142
00:04:51,360 --> 00:04:53,120
application in the custom system

143
00:04:53,120 --> 00:04:55,040
programming language it's very similar

144
00:04:55,040 --> 00:04:57,759
to solidity as it implements the logic

145
00:04:57,759 --> 00:05:00,080
but it also contains privacy annotations

146
00:05:00,080 --> 00:05:01,759
indicating what should be kept private

147
00:05:01,759 --> 00:05:03,680
we will see this in a second

148
00:05:03,680 --> 00:05:05,280
and then you feed this through the

149
00:05:05,280 --> 00:05:07,360
sister compiler which will automatically

150
00:05:07,360 --> 00:05:09,199
introduce additively homomorphic

151
00:05:09,199 --> 00:05:12,720
encryption and ck snarks in order to

152
00:05:12,720 --> 00:05:16,080
certify correctness and get data privacy

153
00:05:16,080 --> 00:05:17,919
and the resulting solidity contract can

154
00:05:17,919 --> 00:05:20,000
be executed on ethereum

155
00:05:20,000 --> 00:05:21,600
so let's have a look at the input

156
00:05:21,600 --> 00:05:22,960
contract

157
00:05:22,960 --> 00:05:25,120
and the sister programming language is

158
00:05:25,120 --> 00:05:27,919
based on privacy types the privacy types

159
00:05:27,919 --> 00:05:30,000
help you to distinguish the foreign and

160
00:05:30,000 --> 00:05:32,639
self-owned data case and to reflect the

161
00:05:32,639 --> 00:05:34,479
restrictions of the homomorphic

162
00:05:34,479 --> 00:05:36,800
encryption scheme

163
00:05:36,800 --> 00:05:39,680
so here i've implemented the example we

164
00:05:39,680 --> 00:05:42,080
had previously in plain solidity so we

165
00:05:42,080 --> 00:05:44,160
just have a balance mapping which stores

166
00:05:44,160 --> 00:05:46,320
for every address the balance owned by

167
00:05:46,320 --> 00:05:48,560
this address and then i have a transfer

168
00:05:48,560 --> 00:05:50,960
function which allows some sender

169
00:05:50,960 --> 00:05:54,080
address which is written as me here to

170
00:05:54,080 --> 00:05:56,720
transfer some value to some recipient

171
00:05:56,720 --> 00:05:57,680
address

172
00:05:57,680 --> 00:05:59,840
and as you can see here we first check

173
00:05:59,840 --> 00:06:01,759
whether the sender has sufficient funds

174
00:06:01,759 --> 00:06:03,840
and then we just update the balance

175
00:06:03,840 --> 00:06:07,039
mapping as expected like

176
00:06:07,039 --> 00:06:09,199
nothing special here and now we would

177
00:06:09,199 --> 00:06:10,560
like to express the fact that the

178
00:06:10,560 --> 00:06:12,720
balances should be kept private

179
00:06:12,720 --> 00:06:15,440
and to this end c star relies on an idea

180
00:06:15,440 --> 00:06:18,080
we introduced previously in our work ck

181
00:06:18,080 --> 00:06:20,479
the idea is to extend data types by

182
00:06:20,479 --> 00:06:23,520
privacy types using this annotation of

183
00:06:23,520 --> 00:06:26,160
the form at owner where owner is some

184
00:06:26,160 --> 00:06:28,720
addox expression indicating the party

185
00:06:28,720 --> 00:06:30,319
allowed to see the data

186
00:06:30,319 --> 00:06:31,759
so let's see this on our concrete

187
00:06:31,759 --> 00:06:33,440
example

188
00:06:33,440 --> 00:06:35,199
like if you want to express that the

189
00:06:35,199 --> 00:06:36,880
balance is private to the respective

190
00:06:36,880 --> 00:06:39,199
party you need to add these blue privacy

191
00:06:39,199 --> 00:06:40,639
annotations

192
00:06:40,639 --> 00:06:43,120
in particular in this line here we use

193
00:06:43,120 --> 00:06:45,199
this syntax to encode the fact that the

194
00:06:45,199 --> 00:06:48,000
balance of alice is owned by alice

195
00:06:48,000 --> 00:06:49,680
meaning that it will be encrypted under

196
00:06:49,680 --> 00:06:52,880
her public key at runtime

197
00:06:52,880 --> 00:06:54,960
here in the transfer function we

198
00:06:54,960 --> 00:06:58,160
annotate the value as at me meaning that

199
00:06:58,160 --> 00:06:59,919
it will be self-owned by the transaction

200
00:06:59,919 --> 00:07:02,240
sender and hidden to everyone else the

201
00:07:02,240 --> 00:07:04,240
recipient address is just kept public

202
00:07:04,240 --> 00:07:07,360
here by not annotating it at all

203
00:07:07,360 --> 00:07:09,599
and now we can just work as usual in the

204
00:07:09,599 --> 00:07:12,000
small contract so decreasing the balance

205
00:07:12,000 --> 00:07:13,680
of the center is very easy you just

206
00:07:13,680 --> 00:07:16,800
write it the same way as it was before

207
00:07:16,800 --> 00:07:19,280
to increase the balance of the recipient

208
00:07:19,280 --> 00:07:20,960
you actually need to add this reveal

209
00:07:20,960 --> 00:07:23,440
expression here this reveal expression

210
00:07:23,440 --> 00:07:25,520
changes the privacy type of the value

211
00:07:25,520 --> 00:07:27,840
which previously was self-owned to the

212
00:07:27,840 --> 00:07:29,199
recipient

213
00:07:29,199 --> 00:07:30,960
this is required because you want to

214
00:07:30,960 --> 00:07:33,440
prevent implicitly leaking information

215
00:07:33,440 --> 00:07:35,680
if you would not write this like you you

216
00:07:35,680 --> 00:07:37,280
will actually leak the value to the

217
00:07:37,280 --> 00:07:38,880
recipient and to make sure that the

218
00:07:38,880 --> 00:07:40,639
developer really wants to do this the

219
00:07:40,639 --> 00:07:42,479
developer needs to add this expression

220
00:07:42,479 --> 00:07:45,360
here and as a result here this addition

221
00:07:45,360 --> 00:07:47,599
actually works on two expressions which

222
00:07:47,599 --> 00:07:49,759
are not owned by the center but by some

223
00:07:49,759 --> 00:07:51,840
other party and this is allowed in c

224
00:07:51,840 --> 00:07:53,199
star and we will actually use the

225
00:07:53,199 --> 00:07:54,720
homomorphic property of the encryption

226
00:07:54,720 --> 00:07:57,599
schemes and note that in the work this

227
00:07:57,599 --> 00:07:59,520
would actually not work

228
00:07:59,520 --> 00:08:01,440
the nice thing about this privacy type

229
00:08:01,440 --> 00:08:03,440
system is that we can reflect the

230
00:08:03,440 --> 00:08:04,879
constraints of the homomorphic

231
00:08:04,879 --> 00:08:06,960
encryption scheme so for instance if

232
00:08:06,960 --> 00:08:09,599
alice was to write the code i've shown

233
00:08:09,599 --> 00:08:11,599
here where she tries to add a value

234
00:08:11,599 --> 00:08:14,160
owned by bob to a value owned by charlie

235
00:08:14,160 --> 00:08:17,120
you would get a type error because these

236
00:08:17,120 --> 00:08:18,879
like two elements will be encrypted on

237
00:08:18,879 --> 00:08:20,400
the different public keys and there's no

238
00:08:20,400 --> 00:08:22,000
way alice could actually combine this at

239
00:08:22,000 --> 00:08:24,720
runtime so that's very nice

240
00:08:24,720 --> 00:08:26,400
finally here for this requirement

241
00:08:26,400 --> 00:08:29,280
statement alice needs to reveal the fact

242
00:08:29,280 --> 00:08:31,440
that the center has sufficient funds

243
00:08:31,440 --> 00:08:33,599
because the fact that the requirements

244
00:08:33,599 --> 00:08:35,839
team statement will actually work out

245
00:08:35,839 --> 00:08:37,679
will leak that this is true so you

246
00:08:37,679 --> 00:08:39,440
actually need to reveal this explicitly

247
00:08:39,440 --> 00:08:42,080
again using this expression

248
00:08:42,080 --> 00:08:44,240
so this is the resulting contract the

249
00:08:44,240 --> 00:08:45,920
nice thing is that developers do not

250
00:08:45,920 --> 00:08:47,600
need any cryptographic expertise to

251
00:08:47,600 --> 00:08:49,120
implement this they just need to

252
00:08:49,120 --> 00:08:50,800
understand the privacy type session

253
00:08:50,800 --> 00:08:53,120
essentially

254
00:08:53,120 --> 00:08:54,880
so let's see how we can automatically

255
00:08:54,880 --> 00:08:56,959
compile this input contract to an output

256
00:08:56,959 --> 00:09:00,000
contract on ethereum and we will see how

257
00:09:00,000 --> 00:09:02,080
we deal with interactions and what

258
00:09:02,080 --> 00:09:03,600
exactly we need to prove in the zero

259
00:09:03,600 --> 00:09:05,839
knowledge proof

260
00:09:05,839 --> 00:09:07,920
i have the example from before here the

261
00:09:07,920 --> 00:09:09,440
transfer function

262
00:09:09,440 --> 00:09:11,279
and the idea is to compile this to a

263
00:09:11,279 --> 00:09:13,200
solidity contract by following the

264
00:09:13,200 --> 00:09:15,920
privacy types we have just seen

265
00:09:15,920 --> 00:09:18,320
remember that whenever some expression

266
00:09:18,320 --> 00:09:20,320
is private through some party according

267
00:09:20,320 --> 00:09:22,240
to the type season in the input it will

268
00:09:22,240 --> 00:09:24,320
be encrypted on the this parties public

269
00:09:24,320 --> 00:09:26,959
key in the output contract

270
00:09:26,959 --> 00:09:28,720
and now the compiler just checks the

271
00:09:28,720 --> 00:09:31,600
input contact for private expressions

272
00:09:31,600 --> 00:09:33,600
for instance consider on the left hand

273
00:09:33,600 --> 00:09:36,720
side the updated balance of the sender

274
00:09:36,720 --> 00:09:38,320
which is just the evaluation of this

275
00:09:38,320 --> 00:09:39,760
subtraction

276
00:09:39,760 --> 00:09:42,000
this will be replaced by a ciphertext

277
00:09:42,000 --> 00:09:44,000
argument new me which will hold the

278
00:09:44,000 --> 00:09:46,320
encrypted new balance at runtime just

279
00:09:46,320 --> 00:09:47,680
like in the example you have seen at the

280
00:09:47,680 --> 00:09:49,360
beginning of the talk and this

281
00:09:49,360 --> 00:09:51,279
ciphertext will be computed by the

282
00:09:51,279 --> 00:09:53,040
sender actually beforehand before

283
00:09:53,040 --> 00:09:55,120
sending it to the blockchain of course

284
00:09:55,120 --> 00:09:56,560
and now we need to make sure that this

285
00:09:56,560 --> 00:09:58,959
ciphertext has been computed correctly

286
00:09:58,959 --> 00:10:01,200
to do so we collect a set of constraints

287
00:10:01,200 --> 00:10:02,640
which will be used in the serial

288
00:10:02,640 --> 00:10:05,200
knowledge proof so what this constraint

289
00:10:05,200 --> 00:10:08,000
said here is quite easy actually so the

290
00:10:08,000 --> 00:10:09,360
idea is that

291
00:10:09,360 --> 00:10:11,440
when you decrypt the previous balance

292
00:10:11,440 --> 00:10:14,240
using your secret key and then from it

293
00:10:14,240 --> 00:10:16,800
subtract the plaintext value and then

294
00:10:16,800 --> 00:10:19,440
from the result like encrypt it again

295
00:10:19,440 --> 00:10:22,079
then you get this new me ciphertext it's

296
00:10:22,079 --> 00:10:23,600
quite obvious here

297
00:10:23,600 --> 00:10:25,519
and note that of course all the secrets

298
00:10:25,519 --> 00:10:27,279
here for instance the secret key of the

299
00:10:27,279 --> 00:10:29,920
center are of course used as weaknesses

300
00:10:29,920 --> 00:10:31,360
in the zero-knowledge proof so they will

301
00:10:31,360 --> 00:10:33,040
not be seen on the blockchain but they

302
00:10:33,040 --> 00:10:35,040
will be hidden

303
00:10:35,040 --> 00:10:36,880
similarly

304
00:10:36,880 --> 00:10:39,360
siesta replaces the new balance of the

305
00:10:39,360 --> 00:10:40,720
recipient

306
00:10:40,720 --> 00:10:43,519
by this new two argument and to compute

307
00:10:43,519 --> 00:10:45,760
this the sender will actually apply this

308
00:10:45,760 --> 00:10:47,440
homomorphic addition operation we've

309
00:10:47,440 --> 00:10:49,680
seen previously and we'll also prove

310
00:10:49,680 --> 00:10:51,360
that this computation has been performed

311
00:10:51,360 --> 00:10:53,200
correctly as part of the zero knowledge

312
00:10:53,200 --> 00:10:54,959
proof here using this additional

313
00:10:54,959 --> 00:10:56,079
constraint

314
00:10:56,079 --> 00:10:58,160
note that while we could in theory apply

315
00:10:58,160 --> 00:11:01,279
this homomorphic addition not inside the

316
00:11:01,279 --> 00:11:02,959
proof circuit but on the solidity

317
00:11:02,959 --> 00:11:05,600
contract we do not do it in order to

318
00:11:05,600 --> 00:11:07,920
save gas costs essentially because it

319
00:11:07,920 --> 00:11:11,279
saves us an operation in the output

320
00:11:11,279 --> 00:11:13,120
and then last but not least also

321
00:11:13,120 --> 00:11:14,959
publicly revealed expressions will be

322
00:11:14,959 --> 00:11:17,760
replaced but this time by plain text

323
00:11:17,760 --> 00:11:20,000
arguments working the same way and then

324
00:11:20,000 --> 00:11:23,120
we add an according constraint should be

325
00:11:23,120 --> 00:11:24,399
rather

326
00:11:24,399 --> 00:11:26,800
clear in this example i guess

327
00:11:26,800 --> 00:11:28,560
and then all you got all you got to do

328
00:11:28,560 --> 00:11:30,560
is just add a verification statement

329
00:11:30,560 --> 00:11:32,959
which checks uh zero knowledge proof

330
00:11:32,959 --> 00:11:34,640
containing the constraints we have just

331
00:11:34,640 --> 00:11:36,399
collected here and this will actually

332
00:11:36,399 --> 00:11:38,320
ensure that you updated your ciphertext

333
00:11:38,320 --> 00:11:40,079
correctly and note that this is all

334
00:11:40,079 --> 00:11:41,600
automated right so you have nothing to

335
00:11:41,600 --> 00:11:43,120
do if you want to implement these

336
00:11:43,120 --> 00:11:44,959
contracts

337
00:11:44,959 --> 00:11:47,120
so note that even though we are relying

338
00:11:47,120 --> 00:11:48,880
on an additively homomorphic encryption

339
00:11:48,880 --> 00:11:50,839
scheme we can also support

340
00:11:50,839 --> 00:11:53,440
multiplications in particular we can

341
00:11:53,440 --> 00:11:55,760
support multiplications of foreign

342
00:11:55,760 --> 00:11:58,000
values by a self-owned

343
00:11:58,000 --> 00:12:00,079
value or a public value you can have a

344
00:12:00,079 --> 00:12:02,000
look at our paper if you want to

345
00:12:02,000 --> 00:12:03,920
find out how this exactly works and of

346
00:12:03,920 --> 00:12:05,760
course in many more details i just

347
00:12:05,760 --> 00:12:08,160
showed you a pretty basic example

348
00:12:08,160 --> 00:12:09,839
it's very interesting to to get a

349
00:12:09,839 --> 00:12:11,519
practical system to work so have a look

350
00:12:11,519 --> 00:12:14,480
at it if you're interested

351
00:12:14,480 --> 00:12:17,200
uh the system here has two important

352
00:12:17,200 --> 00:12:18,880
guarantees which we formalize and proof

353
00:12:18,880 --> 00:12:20,959
in the paper the first guarantee is

354
00:12:20,959 --> 00:12:22,959
correctness meaning that you cannot

355
00:12:22,959 --> 00:12:25,360
actually violate the logic you specified

356
00:12:25,360 --> 00:12:27,040
in input contract

357
00:12:27,040 --> 00:12:29,200
and the second property is privacy

358
00:12:29,200 --> 00:12:32,000
meaning that an active attacker cannot

359
00:12:32,000 --> 00:12:34,480
learn more in the real world then it can

360
00:12:34,480 --> 00:12:37,680
learn which was allowed from the privacy

361
00:12:37,680 --> 00:12:39,440
annotations in an ideal world that's

362
00:12:39,440 --> 00:12:42,240
kind of the idea

363
00:12:42,240 --> 00:12:44,399
so we implemented the system and

364
00:12:44,399 --> 00:12:48,079
evaluated its efficiency

365
00:12:48,079 --> 00:12:50,000
you can find the

366
00:12:50,000 --> 00:12:52,320
source code of this on our github

367
00:12:52,320 --> 00:12:55,440
repository ck here

368
00:12:55,440 --> 00:12:57,440
achieving efficiency was quite tricky

369
00:12:57,440 --> 00:12:59,519
actually using a naive implementation

370
00:12:59,519 --> 00:13:00,959
here using straightforward building

371
00:13:00,959 --> 00:13:02,560
blocks actually led to an explosion of

372
00:13:02,560 --> 00:13:04,880
runtime like it was not usable at all so

373
00:13:04,880 --> 00:13:07,519
we ended up with the following so we use

374
00:13:07,519 --> 00:13:09,440
graph16 ck snarks which are very

375
00:13:09,440 --> 00:13:11,680
efficient and exponential algomal

376
00:13:11,680 --> 00:13:14,959
encryptions over elliptic curves which

377
00:13:14,959 --> 00:13:16,320
gives you an additively homomorphic

378
00:13:16,320 --> 00:13:17,680
encryption scheme

379
00:13:17,680 --> 00:13:20,560
and in order for this elgamal encryption

380
00:13:20,560 --> 00:13:22,720
operation to be efficiently provable as

381
00:13:22,720 --> 00:13:24,160
part of the zero knowledge proof we have

382
00:13:24,160 --> 00:13:26,079
to rely on elliptic curve embedding

383
00:13:26,079 --> 00:13:27,360
which is just some cryptographic

384
00:13:27,360 --> 00:13:29,279
technique which has been used already

385
00:13:29,279 --> 00:13:30,880
previously

386
00:13:30,880 --> 00:13:33,360
as a technicality here exponential gamma

387
00:13:33,360 --> 00:13:34,399
encryption

388
00:13:34,399 --> 00:13:36,480
requires you to solve a discrete

389
00:13:36,480 --> 00:13:39,279
logarithm upon decryption so if you want

390
00:13:39,279 --> 00:13:41,199
decryption to be visible within a few

391
00:13:41,199 --> 00:13:42,720
seconds you actually need to restrict

392
00:13:42,720 --> 00:13:45,760
plain text to around 32 bits we did this

393
00:13:45,760 --> 00:13:48,399
in the implementation and already

394
00:13:48,399 --> 00:13:50,320
reflect this in the in the type system

395
00:13:50,320 --> 00:13:51,760
which will give you a type here if you

396
00:13:51,760 --> 00:13:53,600
try to use a non

397
00:13:53,600 --> 00:13:58,560
32-bit integer with this system here

398
00:13:58,560 --> 00:14:00,480
we implement the 12 example contracts

399
00:14:00,480 --> 00:14:02,560
using our system and these contacts

400
00:14:02,560 --> 00:14:04,320
include a re-implementation of a

401
00:14:04,320 --> 00:14:05,360
previous

402
00:14:05,360 --> 00:14:07,760
private payment system c ether this

403
00:14:07,760 --> 00:14:10,000
system has been manually designed to

404
00:14:10,000 --> 00:14:12,240
give you kind of a private wallet

405
00:14:12,240 --> 00:14:14,079
which is an extension of what we've seen

406
00:14:14,079 --> 00:14:15,600
previously here

407
00:14:15,600 --> 00:14:18,560
and the offers like instantiated this

408
00:14:18,560 --> 00:14:20,320
idea by hand and in contrast you can

409
00:14:20,320 --> 00:14:22,000
just implement this using the privacy

410
00:14:22,000 --> 00:14:23,839
annotations and compile it to something

411
00:14:23,839 --> 00:14:27,199
equivalent so this is very nice

412
00:14:27,199 --> 00:14:29,040
on a commodity desktop machine you get

413
00:14:29,040 --> 00:14:31,199
reasonable transaction generation times

414
00:14:31,199 --> 00:14:33,519
like at most one minute here and this

415
00:14:33,519 --> 00:14:36,000
time is generally dominated by proof

416
00:14:36,000 --> 00:14:37,600
generation time because generating the

417
00:14:37,600 --> 00:14:39,120
zero knowledge proof is like the most

418
00:14:39,120 --> 00:14:41,120
heavy task here

419
00:14:41,120 --> 00:14:43,440
in terms of gas costs this is the cost

420
00:14:43,440 --> 00:14:45,040
you need to pay when you actually

421
00:14:45,040 --> 00:14:46,800
execute the resulting conflict on

422
00:14:46,800 --> 00:14:51,199
ethereum this is around 3340k

423
00:14:51,199 --> 00:14:53,600
gas it's in line to existing

424
00:14:53,600 --> 00:14:55,760
applications such as uniswap

425
00:14:55,760 --> 00:14:57,360
if you want to know how much this is in

426
00:14:57,360 --> 00:14:59,760
terms of dollars i i did this two weeks

427
00:14:59,760 --> 00:15:01,839
ago when i made the presentation it was

428
00:15:01,839 --> 00:15:04,959
around 32 dollars which is quite high

429
00:15:04,959 --> 00:15:06,560
the problem with these numbers is that

430
00:15:06,560 --> 00:15:08,720
it's super volatile like ethereum price

431
00:15:08,720 --> 00:15:10,560
and gas prices they tend to spike a lot

432
00:15:10,560 --> 00:15:13,120
so it's not very useful to talk about

433
00:15:13,120 --> 00:15:16,160
monetary costs here but still i put it

434
00:15:16,160 --> 00:15:18,079
for completeness

435
00:15:18,079 --> 00:15:19,920
so with that i'd like to conclude i've

436
00:15:19,920 --> 00:15:22,320
presented c star allowing you to express

437
00:15:22,320 --> 00:15:23,839
private smart contacts easily and

438
00:15:23,839 --> 00:15:25,680
automatically compiling them to

439
00:15:25,680 --> 00:15:27,680
contracts for solidity thank you very

440
00:15:27,680 --> 00:15:29,920
much

441
00:15:34,800 --> 00:15:37,440
thank you samuel wonderful presentation

442
00:15:37,440 --> 00:15:41,399
any questions from the audience

443
00:15:41,519 --> 00:15:43,680
hello yeah nice presentation i'm sorry

444
00:15:43,680 --> 00:15:46,959
from uiuc so you said you use gross 16

445
00:15:46,959 --> 00:15:48,800
zk snarks and they have this

446
00:15:48,800 --> 00:15:51,279
circuit-based trusted setups like for

447
00:15:51,279 --> 00:15:52,639
each circuit you have to do a different

448
00:15:52,639 --> 00:15:55,199
circuit so a different setup so how do

449
00:15:55,199 --> 00:15:57,839
you like how does this work right now

450
00:15:57,839 --> 00:16:00,160
great question so as you say correctly

451
00:16:00,160 --> 00:16:02,240
the scheme we use requires you to do one

452
00:16:02,240 --> 00:16:04,639
trusted setup pair circuit and this

453
00:16:04,639 --> 00:16:06,880
compilation process produces one circuit

454
00:16:06,880 --> 00:16:09,759
per function so you actually if you want

455
00:16:09,759 --> 00:16:11,199
to deploy your contact you need to

456
00:16:11,199 --> 00:16:13,440
perform this trusted setup phase

457
00:16:13,440 --> 00:16:16,639
yourself this is like out of of of

458
00:16:16,639 --> 00:16:18,320
context of our tool but you actually get

459
00:16:18,320 --> 00:16:20,079
a separate circuit and a separate setup

460
00:16:20,079 --> 00:16:23,759
per function that's true i see and

461
00:16:23,759 --> 00:16:25,199
generate question like what are the next

462
00:16:25,199 --> 00:16:27,600
steps like adopting fully homomorphic

463
00:16:27,600 --> 00:16:29,519
encryption or currently only support

464
00:16:29,519 --> 00:16:31,440
additive right

465
00:16:31,440 --> 00:16:33,360
yeah so a fully homomorphic encryption

466
00:16:33,360 --> 00:16:36,079
is very inefficient so it's very hard to

467
00:16:36,079 --> 00:16:38,240
use in in this blockchain context and

468
00:16:38,240 --> 00:16:40,240
also you would need to reason about

469
00:16:40,240 --> 00:16:41,920
fully homomorphic encryption as part of

470
00:16:41,920 --> 00:16:43,519
zero knowledge proof which i find is

471
00:16:43,519 --> 00:16:45,199
quite tricky what you can do is

472
00:16:45,199 --> 00:16:47,440
integrate other encryption schemes like

473
00:16:47,440 --> 00:16:49,600
multiple multiplicatively homomorphic

474
00:16:49,600 --> 00:16:51,920
encryption but we we just determined

475
00:16:51,920 --> 00:16:54,320
that this is not very useful for example

476
00:16:54,320 --> 00:16:55,759
applications but of course you could try

477
00:16:55,759 --> 00:16:59,279
to do this okay thanks

478
00:17:00,399 --> 00:17:01,680
do we have time

479
00:17:01,680 --> 00:17:03,440
yeah go ahead

480
00:17:03,440 --> 00:17:04,720
uh thank you very much for the

481
00:17:04,720 --> 00:17:06,319
presentation it's really great that you

482
00:17:06,319 --> 00:17:08,160
have this very ordinary user from the

483
00:17:08,160 --> 00:17:09,119
scheme

484
00:17:09,119 --> 00:17:09,919
uh

485
00:17:09,919 --> 00:17:11,520
my question is going to be about this

486
00:17:11,520 --> 00:17:13,679
the ether implementation that you read i

487
00:17:13,679 --> 00:17:15,039
think they had

488
00:17:15,039 --> 00:17:17,359
much higher gas cost in their original

489
00:17:17,359 --> 00:17:19,199
paper i think maybe about like 7 million

490
00:17:19,199 --> 00:17:21,039
or something yes is it because you are

491
00:17:21,039 --> 00:17:23,839
using growth 16 that you gain

492
00:17:23,839 --> 00:17:24,799
from that

493
00:17:24,799 --> 00:17:27,039
so this is a longer discussion so one

494
00:17:27,039 --> 00:17:28,400
problem is that they use a different

495
00:17:28,400 --> 00:17:30,240
version of ethereum which used to have a

496
00:17:30,240 --> 00:17:31,600
big different gas cost for these

497
00:17:31,600 --> 00:17:33,600
cryptographic operations like

498
00:17:33,600 --> 00:17:35,120
unfortunately we could not compare to

499
00:17:35,120 --> 00:17:36,480
their implementation because it was

500
00:17:36,480 --> 00:17:38,559
neither open sourced nor available even

501
00:17:38,559 --> 00:17:40,960
though we asked the offers

502
00:17:40,960 --> 00:17:43,120
even though they use the bulletproof

503
00:17:43,120 --> 00:17:44,880
system which is much more expensive than

504
00:17:44,880 --> 00:17:47,280
graph16 to verify so i think this is the

505
00:17:47,280 --> 00:17:49,760
reason why they even in a newer version

506
00:17:49,760 --> 00:17:51,679
of ethereum would get higher gas costs

507
00:17:51,679 --> 00:17:53,200
than what we have

508
00:17:53,200 --> 00:17:55,120
so you are kind of trading off like

509
00:17:55,120 --> 00:17:57,039
trusted setup with efficiency exactly

510
00:17:57,039 --> 00:17:58,960
and of course in theory you could just

511
00:17:58,960 --> 00:18:00,880
use our system with the bullets proof

512
00:18:00,880 --> 00:18:02,640
proofer then you would likely get higher

513
00:18:02,640 --> 00:18:04,320
costs but you will get rid of the

514
00:18:04,320 --> 00:18:06,720
trusted setup assumption i think okay

515
00:18:06,720 --> 00:18:09,520
thank you thank you

516
00:18:10,640 --> 00:18:12,960
ian myers university of maryland uh

517
00:18:12,960 --> 00:18:14,960
what's the privacy model here a lot of

518
00:18:14,960 --> 00:18:16,559
these attempts to do zero knowledge for

519
00:18:16,559 --> 00:18:18,559
account models either end up

520
00:18:18,559 --> 00:18:20,320
where you leak

521
00:18:20,320 --> 00:18:22,160
access patterns or you have to lock

522
00:18:22,160 --> 00:18:23,360
every account

523
00:18:23,360 --> 00:18:25,600
to do a single transaction yes so in

524
00:18:25,600 --> 00:18:27,840
this work here you leak the access

525
00:18:27,840 --> 00:18:29,760
pattern so the access memory locations

526
00:18:29,760 --> 00:18:32,080
will be published in particular in this

527
00:18:32,080 --> 00:18:34,080
transaction i've shown here the transfer

528
00:18:34,080 --> 00:18:35,840
function you can see it on the screen it

529
00:18:35,840 --> 00:18:37,840
is leaked which parties access the

530
00:18:37,840 --> 00:18:39,520
balance in this mapping yes okay so

531
00:18:39,520 --> 00:18:40,880
you're just hiding the values but not

532
00:18:40,880 --> 00:18:44,320
the identities exactly yeah thank you

533
00:18:44,320 --> 00:18:46,320
excellent um

534
00:18:46,320 --> 00:18:48,799
yep i think then time is up so great

535
00:18:48,799 --> 00:18:52,280
thank you very much

