1
00:00:00,080 --> 00:00:02,080
done that so it's not just one server so

2
00:00:02,080 --> 00:00:04,240
facebook cannot handle this problem

3
00:00:04,240 --> 00:00:07,120
itself unless they start auditing all of

4
00:00:07,120 --> 00:00:08,880
the websites and basically filter out

5
00:00:08,880 --> 00:00:10,320
that they say that either you are

6
00:00:10,320 --> 00:00:12,000
following these policies or we are not

7
00:00:12,000 --> 00:00:14,160
sub we are not giving you access to our

8
00:00:14,160 --> 00:00:16,640
system well suppose that i'm a website

9
00:00:16,640 --> 00:00:18,480
developer and i don't know much right

10
00:00:18,480 --> 00:00:19,600
and i said hey

11
00:00:19,600 --> 00:00:21,920
i don't know if i did my sso integration

12
00:00:21,920 --> 00:00:24,320
correctly and and i want to like you

13
00:00:24,320 --> 00:00:26,320
know kind of integrate it into my test

14
00:00:26,320 --> 00:00:28,320
unit test framework right

15
00:00:28,320 --> 00:00:29,679
could you do something specific to the

16
00:00:29,679 --> 00:00:31,279
web app forget about facebook or any

17
00:00:31,279 --> 00:00:33,280
specific sso but from my perspective i'm

18
00:00:33,280 --> 00:00:34,719
the little guy is there anything you

19
00:00:34,719 --> 00:00:36,640
could give them specifically yes exactly

20
00:00:36,640 --> 00:00:38,800
so they can use the tool to to see that

21
00:00:38,800 --> 00:00:40,640
taking different authentic

22
00:00:40,640 --> 00:00:42,160
taking different authentication paths

23
00:00:42,160 --> 00:00:44,320
for instance end up in the same account

24
00:00:44,320 --> 00:00:47,920
to not create back doors for the account

25
00:00:47,920 --> 00:00:48,800
or

26
00:00:48,800 --> 00:00:50,559
or basically create a test account with

27
00:00:50,559 --> 00:00:52,480
facebook and see that if they are

28
00:00:52,480 --> 00:00:54,079
actually respecting that access

29
00:00:54,079 --> 00:00:56,480
revocation within their framework so

30
00:00:56,480 --> 00:00:57,840
basically because they're looking at

31
00:00:57,840 --> 00:01:00,000
their own application as a black box

32
00:01:00,000 --> 00:01:02,239
they interact with that application and

33
00:01:02,239 --> 00:01:05,199
see the imp and the effect of the estate

34
00:01:05,199 --> 00:01:07,600
changing effect on that

35
00:01:07,600 --> 00:01:09,200
application that they do okay so are

36
00:01:09,200 --> 00:01:12,560
they relying on facebook's revocation

37
00:01:12,560 --> 00:01:13,840
uh for

38
00:01:13,840 --> 00:01:15,920
to make sure that if they if they

39
00:01:15,920 --> 00:01:18,479
if they revoke a an sso

40
00:01:18,479 --> 00:01:19,920
does facebook have to actually hit that

41
00:01:19,920 --> 00:01:22,400
button too or is it just on their side

42
00:01:22,400 --> 00:01:23,119
so

43
00:01:23,119 --> 00:01:24,000
there are

44
00:01:24,000 --> 00:01:26,159
various apis that they can they can

45
00:01:26,159 --> 00:01:29,119
either continuously check for the token

46
00:01:29,119 --> 00:01:32,079
validity and based on that take action

47
00:01:32,079 --> 00:01:34,479
or either have so in our previous paper

48
00:01:34,479 --> 00:01:35,759
we basically

49
00:01:35,759 --> 00:01:37,280
proposed that

50
00:01:37,280 --> 00:01:39,200
as soon as the the access token is

51
00:01:39,200 --> 00:01:42,159
reworked facebook can send a request to

52
00:01:42,159 --> 00:01:44,560
the website as like an api that the

53
00:01:44,560 --> 00:01:46,720
website and sees that this user's access

54
00:01:46,720 --> 00:01:48,880
token was reworked and then take further

55
00:01:48,880 --> 00:01:51,439
action based on that so there are

56
00:01:51,439 --> 00:01:53,759
various ways of doing it but the

57
00:01:53,759 --> 00:01:57,280
simplest way is continuous access token

58
00:01:57,280 --> 00:01:59,759
uh revalidation validation got it got it

59
00:01:59,759 --> 00:02:01,200
awesome well again let's thank our

60
00:02:01,200 --> 00:02:04,799
speaker great work ask some more later

61
00:02:05,040 --> 00:02:08,160
whoever's next next stop come on get up

62
00:02:08,160 --> 00:02:10,878
okay excellent wow

63
00:02:10,878 --> 00:02:13,200
this stuff is complicated i only got to

64
00:02:13,200 --> 00:02:15,760
ask you one of my questions so uh after

65
00:02:15,760 --> 00:02:17,760
the session here

66
00:02:17,760 --> 00:02:20,879
all right so we're gonna go from

67
00:02:20,879 --> 00:02:22,400
single sign on

68
00:02:22,400 --> 00:02:23,280
to

69
00:02:23,280 --> 00:02:25,280
let's see here oh is that your laptop oh

70
00:02:25,280 --> 00:02:28,560
i'm so sorry hard log

71
00:02:28,560 --> 00:02:29,920
okay so

72
00:02:29,920 --> 00:02:31,280
so we're going to slowly move more

73
00:02:31,280 --> 00:02:33,040
towards drones here so if you're waiting

74
00:02:33,040 --> 00:02:36,239
for the drones it's coming um so excited

75
00:02:36,239 --> 00:02:38,560
that we're going to have adil here

76
00:02:38,560 --> 00:02:41,440
talking about hard log which is a way to

77
00:02:41,440 --> 00:02:43,840
make sure that your auditing system logs

78
00:02:43,840 --> 00:02:46,000
are protected while they're in memory or

79
00:02:46,000 --> 00:02:47,440
other types of things

80
00:02:47,440 --> 00:02:48,959
so really excited and work because we've

81
00:02:48,959 --> 00:02:50,800
had all this great auditing work and

82
00:02:50,800 --> 00:02:52,480
this is is taking the next step to

83
00:02:52,480 --> 00:02:53,760
saying hey what about you know

84
00:02:53,760 --> 00:02:56,400
protecting that from live threats while

85
00:02:56,400 --> 00:02:58,159
the system is tracing so all right

86
00:02:58,159 --> 00:03:00,400
without further ado

87
00:03:00,400 --> 00:03:02,000
thank you very much nathan for the kind

88
00:03:02,000 --> 00:03:04,159
introduction hi everyone today i'll talk

89
00:03:04,159 --> 00:03:07,519
about how to arm enterprises uh with an

90
00:03:07,519 --> 00:03:09,599
effective tool against cyber attacks in

91
00:03:09,599 --> 00:03:12,159
the form of heart lock this is a joint

92
00:03:12,159 --> 00:03:13,920
work with my colleagues at microsoft

93
00:03:13,920 --> 00:03:18,080
research sangoli and marcus pinato

94
00:03:18,080 --> 00:03:19,840
it seems like in today's world the

95
00:03:19,840 --> 00:03:21,920
threat of a cyber attack against an

96
00:03:21,920 --> 00:03:24,319
enterprise is always on the horizon

97
00:03:24,319 --> 00:03:26,480
and we observe that tens of thousands of

98
00:03:26,480 --> 00:03:28,480
enterprises are actually attacked each

99
00:03:28,480 --> 00:03:30,879
year around the globe

100
00:03:30,879 --> 00:03:32,640
in just the last year and a half we've

101
00:03:32,640 --> 00:03:35,040
had high profile cyber attacks against

102
00:03:35,040 --> 00:03:37,680
large enterprises including microsoft

103
00:03:37,680 --> 00:03:38,959
and facebook

104
00:03:38,959 --> 00:03:41,040
and it is estimated that these cyber

105
00:03:41,040 --> 00:03:43,280
attacks cost enterprises millions of

106
00:03:43,280 --> 00:03:46,799
dollars in revenue

107
00:03:46,799 --> 00:03:48,560
one of the most effective tools that

108
00:03:48,560 --> 00:03:51,519
enterprises have against cyber attacks

109
00:03:51,519 --> 00:03:54,159
is the idea of system auditing

110
00:03:54,159 --> 00:03:57,040
the idea is to have the operating system

111
00:03:57,040 --> 00:03:59,200
monitor security related events on the

112
00:03:59,200 --> 00:04:02,239
machine these events could be packets

113
00:04:02,239 --> 00:04:05,680
received by unknown ip addresses or

114
00:04:05,680 --> 00:04:09,840
sensitive files accessed by processes

115
00:04:09,840 --> 00:04:12,159
these logs created as a result of these

116
00:04:12,159 --> 00:04:14,080
events are then used by system

117
00:04:14,080 --> 00:04:15,599
administrators for important

118
00:04:15,599 --> 00:04:18,160
investigation and remediation tasks

119
00:04:18,160 --> 00:04:20,000
including periodically checking the

120
00:04:20,000 --> 00:04:21,680
systems for the health of that

121
00:04:21,680 --> 00:04:23,280
particular machine

122
00:04:23,280 --> 00:04:25,680
and forensically analyzing machines

123
00:04:25,680 --> 00:04:28,160
after compromises to discover the root

124
00:04:28,160 --> 00:04:30,720
cause of that compromise

125
00:04:30,720 --> 00:04:32,880
in fact system auditing is such an

126
00:04:32,880 --> 00:04:35,040
effective tool that a recent u.s

127
00:04:35,040 --> 00:04:37,199
executive order from the president has

128
00:04:37,199 --> 00:04:40,160
now mandated system auditing on all

129
00:04:40,160 --> 00:04:43,199
federal machines

130
00:04:43,199 --> 00:04:46,639
unfortunately all existing audit systems

131
00:04:46,639 --> 00:04:49,759
suffer from a critical limitation

132
00:04:49,759 --> 00:04:51,919
the limitation is that for performance

133
00:04:51,919 --> 00:04:54,720
reasons the logs themselves must be kept

134
00:04:54,720 --> 00:04:57,440
on the machine that is actively being

135
00:04:57,440 --> 00:04:58,880
attacked

136
00:04:58,880 --> 00:05:01,120
and in many attacks what we observe is

137
00:05:01,120 --> 00:05:03,600
that an adversary is not just able to

138
00:05:03,600 --> 00:05:06,400
infect normal processes on a machine but

139
00:05:06,400 --> 00:05:08,560
is also able to infect the operating

140
00:05:08,560 --> 00:05:11,600
system using their own malicious code

141
00:05:11,600 --> 00:05:14,160
allowing this adversary to simply tamper

142
00:05:14,160 --> 00:05:15,919
with these logs

143
00:05:15,919 --> 00:05:17,919
and these tampered logs are then not

144
00:05:17,919 --> 00:05:20,639
useful for any of the important tasks

145
00:05:20,639 --> 00:05:23,120
that logs are used for

146
00:05:23,120 --> 00:05:25,199
this is not a small problem in fact

147
00:05:25,199 --> 00:05:27,600
according to some studies more than 70

148
00:05:27,600 --> 00:05:29,520
percent of attack investigations have

149
00:05:29,520 --> 00:05:31,600
found logs to be tampered

150
00:05:31,600 --> 00:05:32,479
up

151
00:05:32,479 --> 00:05:34,720
and that is because many malware

152
00:05:34,720 --> 00:05:36,840
automatically tamper

153
00:05:36,840 --> 00:05:38,800
logs

154
00:05:38,800 --> 00:05:41,919
in principle it's not impossible to

155
00:05:41,919 --> 00:05:43,840
protect logs

156
00:05:43,840 --> 00:05:46,160
what you could do is whenever an event

157
00:05:46,160 --> 00:05:47,360
happens

158
00:05:47,360 --> 00:05:50,080
you stop the process executing the event

159
00:05:50,080 --> 00:05:52,800
create its log and send that log right

160
00:05:52,800 --> 00:05:55,039
away to the system administrator over

161
00:05:55,039 --> 00:05:56,800
the network

162
00:05:56,800 --> 00:05:58,960
this is what we call synchronous log

163
00:05:58,960 --> 00:06:00,080
prediction

164
00:06:00,080 --> 00:06:02,160
and as you might imagine this incurs

165
00:06:02,160 --> 00:06:04,560
prohibitive performance slowdown because

166
00:06:04,560 --> 00:06:06,319
machines tend to produce tens of

167
00:06:06,319 --> 00:06:09,199
thousands of events every second and

168
00:06:09,199 --> 00:06:11,199
network latencies are too high for this

169
00:06:11,199 --> 00:06:14,560
approach to be feasible

170
00:06:14,560 --> 00:06:16,880
precisely given these performance

171
00:06:16,880 --> 00:06:19,280
limitations of synchronous protection

172
00:06:19,280 --> 00:06:22,840
all existing audit systems protect logs

173
00:06:22,840 --> 00:06:26,400
asynchronously where the idea is that

174
00:06:26,400 --> 00:06:29,440
on security related events the processes

175
00:06:29,440 --> 00:06:32,160
are not stopped by the audit system

176
00:06:32,160 --> 00:06:33,759
rather

177
00:06:33,759 --> 00:06:36,240
log entries from many different events

178
00:06:36,240 --> 00:06:38,560
are buffered in the machine for long

179
00:06:38,560 --> 00:06:41,680
periods of times and then sent to system

180
00:06:41,680 --> 00:06:43,440
administrators

181
00:06:43,440 --> 00:06:45,919
for performance reasons these this

182
00:06:45,919 --> 00:06:48,639
buffering can occur for from tens of

183
00:06:48,639 --> 00:06:52,240
seconds to even hours or days

184
00:06:52,240 --> 00:06:54,639
unfortunately this provides a large

185
00:06:54,639 --> 00:06:57,440
window of attack for an adversary to

186
00:06:57,440 --> 00:07:00,639
simply destroy the important log entries

187
00:07:00,639 --> 00:07:03,520
that describe that particular attack

188
00:07:03,520 --> 00:07:06,080
that they made

189
00:07:06,400 --> 00:07:08,240
so it seems that we've stumbled upon a

190
00:07:08,240 --> 00:07:10,720
classical problem in computer systems

191
00:07:10,720 --> 00:07:12,960
which is the tussle between performance

192
00:07:12,960 --> 00:07:16,080
and security and we find that existing

193
00:07:16,080 --> 00:07:18,960
protection schemes for log for for

194
00:07:18,960 --> 00:07:21,599
system logs provide us an undesirable

195
00:07:21,599 --> 00:07:24,319
trade-off between the two

196
00:07:24,319 --> 00:07:26,319
so the million dollar question we ask

197
00:07:26,319 --> 00:07:29,520
ourselves is can an audit system

198
00:07:29,520 --> 00:07:32,080
actually provide both performance and

199
00:07:32,080 --> 00:07:33,680
security

200
00:07:33,680 --> 00:07:35,759
in the next few slides i will explain

201
00:07:35,759 --> 00:07:38,240
how hard lock achieves this rather in

202
00:07:38,240 --> 00:07:41,039
delicate balance

203
00:07:41,039 --> 00:07:43,919
the idea of hard log is to leverage an

204
00:07:43,919 --> 00:07:46,319
external device connected to the machine

205
00:07:46,319 --> 00:07:49,360
through some device interface like pcie

206
00:07:49,360 --> 00:07:52,800
or usb for log protection

207
00:07:52,800 --> 00:07:54,879
logs that are produced on the machine in

208
00:07:54,879 --> 00:07:57,599
response to events are sent through the

209
00:07:57,599 --> 00:08:00,400
device interface into the external

210
00:08:00,400 --> 00:08:02,240
device

211
00:08:02,240 --> 00:08:05,120
once stored the lock the operating

212
00:08:05,120 --> 00:08:07,919
system is not allowed to modify any of

213
00:08:07,919 --> 00:08:10,720
the logs themselves but only a system

214
00:08:10,720 --> 00:08:12,960
administrator is allowed to securely

215
00:08:12,960 --> 00:08:14,639
retrieve those logs

216
00:08:14,639 --> 00:08:18,639
and even discard them when not needed

217
00:08:18,639 --> 00:08:21,120
now this idea that i've just presented

218
00:08:21,120 --> 00:08:24,000
has several challenges to actually be

219
00:08:24,000 --> 00:08:25,599
achieved

220
00:08:25,599 --> 00:08:27,599
the first particular challenge is that

221
00:08:27,599 --> 00:08:29,680
traditional storage devices are actually

222
00:08:29,680 --> 00:08:31,919
incompatible with the requirements of

223
00:08:31,919 --> 00:08:34,958
hard lock because they provide full

224
00:08:34,958 --> 00:08:37,360
control to the operating system in terms

225
00:08:37,360 --> 00:08:40,799
of both read and write access and they

226
00:08:40,799 --> 00:08:43,519
have no way to remotely authenticate

227
00:08:43,519 --> 00:08:48,000
themselves to a trusted third party

228
00:08:48,000 --> 00:08:50,640
the second problem is that although

229
00:08:50,640 --> 00:08:53,200
device interfaces are significantly

230
00:08:53,200 --> 00:08:56,000
faster than network storage interfaces

231
00:08:56,000 --> 00:08:58,480
they are still unfortunately not fast

232
00:08:58,480 --> 00:09:01,120
enough for us to synchronously protect

233
00:09:01,120 --> 00:09:03,600
every single log entry

234
00:09:03,600 --> 00:09:05,600
in fact in one case study what we

235
00:09:05,600 --> 00:09:08,640
observe is that for a particular set of

236
00:09:08,640 --> 00:09:11,040
events produced on a machine per second

237
00:09:11,040 --> 00:09:13,519
full synchronous device protection can

238
00:09:13,519 --> 00:09:15,920
incur up to six times performance

239
00:09:15,920 --> 00:09:16,880
overhead

240
00:09:16,880 --> 00:09:21,519
making this an infeasible approach too

241
00:09:21,519 --> 00:09:23,839
to solve the first challenge hard log

242
00:09:23,839 --> 00:09:26,800
introduces the idea of an audit device

243
00:09:26,800 --> 00:09:29,120
which is a specially crafted storage

244
00:09:29,120 --> 00:09:31,760
device that has a special storage

245
00:09:31,760 --> 00:09:33,200
controller

246
00:09:33,200 --> 00:09:35,519
what this storage controller does is is

247
00:09:35,519 --> 00:09:37,680
that it only accepts one kinds of

248
00:09:37,680 --> 00:09:40,480
command from the operating system which

249
00:09:40,480 --> 00:09:44,000
is to append logs in the storage itself

250
00:09:44,000 --> 00:09:45,839
all other commands from the operating

251
00:09:45,839 --> 00:09:48,640
system are simply discarded allow

252
00:09:48,640 --> 00:09:50,720
ensuring that the operating system

253
00:09:50,720 --> 00:09:53,920
cannot tamper with stored logs

254
00:09:53,920 --> 00:09:55,920
the audit device however

255
00:09:55,920 --> 00:09:58,240
provides much more flexibility in terms

256
00:09:58,240 --> 00:10:01,519
of access to a system administrator they

257
00:10:01,519 --> 00:10:03,440
are allowed to both retrieve logs from

258
00:10:03,440 --> 00:10:05,760
the device and even discard logs that

259
00:10:05,760 --> 00:10:08,560
are not needed anymore to reuse the

260
00:10:08,560 --> 00:10:10,800
storage of the device

261
00:10:10,800 --> 00:10:13,600
however all of the commands sent from a

262
00:10:13,600 --> 00:10:16,399
system administrator should be received

263
00:10:16,399 --> 00:10:19,440
by the audit device through a secure and

264
00:10:19,440 --> 00:10:22,240
end-to-end encrypted channel uh

265
00:10:22,240 --> 00:10:24,399
authenticated and end-to-end encrypted

266
00:10:24,399 --> 00:10:26,800
channel with keys that are known only to

267
00:10:26,800 --> 00:10:30,079
the system administrator and stored

268
00:10:30,079 --> 00:10:32,720
securely in the audit device

269
00:10:32,720 --> 00:10:34,160
there are many more interesting

270
00:10:34,160 --> 00:10:37,120
properties of the ordered device and

271
00:10:37,120 --> 00:10:39,200
many other implementation details and i

272
00:10:39,200 --> 00:10:41,279
would refer you to the paper for all of

273
00:10:41,279 --> 00:10:44,000
those details

274
00:10:44,000 --> 00:10:46,160
even with this audit device that we've

275
00:10:46,160 --> 00:10:49,200
just built we can't ensure efficient

276
00:10:49,200 --> 00:10:51,600
protection if we synchronously protect

277
00:10:51,600 --> 00:10:54,240
every single log entry

278
00:10:54,240 --> 00:10:57,120
so we must smartly decide when to

279
00:10:57,120 --> 00:10:59,839
protect locks

280
00:10:59,839 --> 00:11:02,560
consider a typical attack

281
00:11:02,560 --> 00:11:05,040
a typical remote attack on a machine

282
00:11:05,040 --> 00:11:07,279
what would happen in practice is that an

283
00:11:07,279 --> 00:11:09,600
attacker would somehow have to download

284
00:11:09,600 --> 00:11:11,839
a payload from a server

285
00:11:11,839 --> 00:11:14,720
of executing certain system calls for

286
00:11:14,720 --> 00:11:16,880
network and file system events

287
00:11:16,880 --> 00:11:18,800
then the attacker would have to overcome

288
00:11:18,800 --> 00:11:21,760
certain defenses like break kernel aslr

289
00:11:21,760 --> 00:11:24,560
or allow execution prevent

290
00:11:24,560 --> 00:11:27,440
allow execution of code and then finally

291
00:11:27,440 --> 00:11:30,240
an attacker would have to execute code

292
00:11:30,240 --> 00:11:32,720
at high privilege giving them pseudo

293
00:11:32,720 --> 00:11:36,000
access to actually tamper with the logs

294
00:11:36,000 --> 00:11:38,079
stored on the machine

295
00:11:38,079 --> 00:11:41,040
so what we can see from this attack is

296
00:11:41,040 --> 00:11:43,760
that until the point when an attacker

297
00:11:43,760 --> 00:11:47,360
was executing uh is able to execute

298
00:11:47,360 --> 00:11:49,519
their code at high privilege

299
00:11:49,519 --> 00:11:51,839
logs are actually safe on that

300
00:11:51,839 --> 00:11:54,079
particular machine

301
00:11:54,079 --> 00:11:56,720
and it turns out that

302
00:11:56,720 --> 00:11:59,040
many several studies have shown that

303
00:11:59,040 --> 00:12:00,720
real world exploits and proof of

304
00:12:00,720 --> 00:12:03,600
concepts typically used designated code

305
00:12:03,600 --> 00:12:06,560
execution system calls like exec cve or

306
00:12:06,560 --> 00:12:09,519
fork to actually execute their malicious

307
00:12:09,519 --> 00:12:11,760
code at high privilege

308
00:12:11,760 --> 00:12:15,200
we call these system calls as critical

309
00:12:15,200 --> 00:12:17,200
events on a machine

310
00:12:17,200 --> 00:12:19,680
and it is not surprising that the nature

311
00:12:19,680 --> 00:12:21,920
of these calls is such that they don't

312
00:12:21,920 --> 00:12:24,399
occur very frequently under typical

313
00:12:24,399 --> 00:12:26,320
workloads for many many real-world

314
00:12:26,320 --> 00:12:27,440
programs

315
00:12:27,440 --> 00:12:28,560
in fact

316
00:12:28,560 --> 00:12:30,480
when we profiled several real-world

317
00:12:30,480 --> 00:12:32,240
programs we found that they were so

318
00:12:32,240 --> 00:12:35,360
infrequent that they were less than 0.1

319
00:12:35,360 --> 00:12:40,240
of all logged events in these programs

320
00:12:40,240 --> 00:12:42,720
leveraging these insights hardlock then

321
00:12:42,720 --> 00:12:46,000
protects logs at critical events

322
00:12:46,000 --> 00:12:48,240
the idea is to buffer logs that are

323
00:12:48,240 --> 00:12:50,480
produced at non-critical events in the

324
00:12:50,480 --> 00:12:51,519
machine

325
00:12:51,519 --> 00:12:53,760
whenever a critical event happens you

326
00:12:53,760 --> 00:12:55,760
stop the process before the event is

327
00:12:55,760 --> 00:12:58,639
allowed to execute and you protect all

328
00:12:58,639 --> 00:13:01,040
of the logs still stored in the in the

329
00:13:01,040 --> 00:13:02,560
machine

330
00:13:02,560 --> 00:13:05,680
by sending it to the audit device

331
00:13:05,680 --> 00:13:08,480
what this ensures is that all attacks

332
00:13:08,480 --> 00:13:11,040
that end at a critical event which as

333
00:13:11,040 --> 00:13:13,279
we've seen is true for many typical

334
00:13:13,279 --> 00:13:14,320
attacks

335
00:13:14,320 --> 00:13:17,279
have their full attack trace protected

336
00:13:17,279 --> 00:13:21,600
before the critical event happens

337
00:13:21,600 --> 00:13:22,880
however

338
00:13:22,880 --> 00:13:25,600
protecting only at critical events

339
00:13:25,600 --> 00:13:27,680
definitely has a problem

340
00:13:27,680 --> 00:13:30,320
which is that in rare scenarios it is

341
00:13:30,320 --> 00:13:32,959
possible that an attacker might somehow

342
00:13:32,959 --> 00:13:35,760
be able to figure out how to use a

343
00:13:35,760 --> 00:13:38,399
non-critical event to execute code at

344
00:13:38,399 --> 00:13:39,920
high privilege

345
00:13:39,920 --> 00:13:42,240
imagine a catastrophic vulnerability in

346
00:13:42,240 --> 00:13:44,639
the operating system that allows a read

347
00:13:44,639 --> 00:13:46,160
system call

348
00:13:46,160 --> 00:13:48,000
an attacker to execute a read system

349
00:13:48,000 --> 00:13:51,440
call and also execute code at high

350
00:13:51,440 --> 00:13:53,040
privilege

351
00:13:53,040 --> 00:13:55,120
while this is rare it can't become

352
00:13:55,120 --> 00:13:57,680
simply discounted

353
00:13:57,680 --> 00:14:00,399
unfortunately it's unfeasible for us to

354
00:14:00,399 --> 00:14:03,519
protect logs at every single entry as

355
00:14:03,519 --> 00:14:05,839
i've already mentioned however we can

356
00:14:05,839 --> 00:14:08,800
leverage this insight that attacks are

357
00:14:08,800 --> 00:14:11,120
not just one sequence of

358
00:14:11,120 --> 00:14:14,320
not not built on one event rather

359
00:14:14,320 --> 00:14:16,560
they're composed of large sequences of

360
00:14:16,560 --> 00:14:18,880
events where the entire process

361
00:14:18,880 --> 00:14:20,959
typically takes hundreds of milliseconds

362
00:14:20,959 --> 00:14:23,600
for an attacker to start the attack and

363
00:14:23,600 --> 00:14:26,720
be able to compromise uh the machine the

364
00:14:26,720 --> 00:14:28,800
logs on that machine

365
00:14:28,800 --> 00:14:31,760
we can leverage this insight to to make

366
00:14:31,760 --> 00:14:34,079
sure that an audit system that actually

367
00:14:34,079 --> 00:14:37,360
protects those logs with a tiny and

368
00:14:37,360 --> 00:14:38,880
bounded delay

369
00:14:38,880 --> 00:14:41,680
up it get so so if an audit system can

370
00:14:41,680 --> 00:14:43,600
now protect logs with a tiny and bounded

371
00:14:43,600 --> 00:14:46,480
delay it can ensure that an overwhelming

372
00:14:46,480 --> 00:14:48,959
portion of the attack trace is protected

373
00:14:48,959 --> 00:14:51,120
even in the worst case where an attacker

374
00:14:51,120 --> 00:14:54,560
is able to use a non-critical event to

375
00:14:54,560 --> 00:14:56,959
compromise and execute

376
00:14:56,959 --> 00:15:00,000
a code at high privilege

377
00:15:00,000 --> 00:15:02,720
hard lock ensures this bounded delay for

378
00:15:02,720 --> 00:15:05,040
all non-critical events

379
00:15:05,040 --> 00:15:06,000
heart

380
00:15:06,000 --> 00:15:08,240
the events when a non-critical event

381
00:15:08,240 --> 00:15:10,639
happens the process is not stopped

382
00:15:10,639 --> 00:15:12,880
because that would be extremely slow

383
00:15:12,880 --> 00:15:15,199
rather what hard lock does is that it

384
00:15:15,199 --> 00:15:18,480
isolates and prioritizes the aspect of

385
00:15:18,480 --> 00:15:21,360
log protection on the machine over all

386
00:15:21,360 --> 00:15:25,040
remaining background machine processes

387
00:15:25,040 --> 00:15:27,680
this allows the system to protect logs

388
00:15:27,680 --> 00:15:30,000
in the audit device in the background as

389
00:15:30,000 --> 00:15:32,160
fast as possible

390
00:15:32,160 --> 00:15:33,920
to implement this isolation and

391
00:15:33,920 --> 00:15:37,120
prioritization hard lock undertakes

392
00:15:37,120 --> 00:15:39,360
several measures including scheduling

393
00:15:39,360 --> 00:15:41,839
prior prioritizing the scheduling of the

394
00:15:41,839 --> 00:15:43,279
audit system

395
00:15:43,279 --> 00:15:45,040
isolating the microarchitectural

396
00:15:45,040 --> 00:15:47,120
components of the audit system and other

397
00:15:47,120 --> 00:15:50,000
background processes and even dedicating

398
00:15:50,000 --> 00:15:52,639
the interface between the audit device

399
00:15:52,639 --> 00:15:55,440
and the host machine to avoid background

400
00:15:55,440 --> 00:15:57,040
interference

401
00:15:57,040 --> 00:15:59,279
as a result logs are protected in the

402
00:15:59,279 --> 00:16:01,839
audit device without stopping processes

403
00:16:01,839 --> 00:16:05,279
as fast as possible and that the delay

404
00:16:05,279 --> 00:16:08,399
for log protection is now bounded to the

405
00:16:08,399 --> 00:16:11,680
device interface speed instead of what

406
00:16:11,680 --> 00:16:13,920
an attacker does

407
00:16:13,920 --> 00:16:16,560
to find out what exactly this delay is

408
00:16:16,560 --> 00:16:19,279
and to evaluate other properties of hard

409
00:16:19,279 --> 00:16:22,079
log we built a prototype for enterprise

410
00:16:22,079 --> 00:16:23,440
machines

411
00:16:23,440 --> 00:16:26,079
on the audit system side we used linux's

412
00:16:26,079 --> 00:16:27,519
kernel audit

413
00:16:27,519 --> 00:16:30,160
the device interface we used was a usb

414
00:16:30,160 --> 00:16:33,360
3.0 generation one interface and the

415
00:16:33,360 --> 00:16:35,519
audit device itself was built using a

416
00:16:35,519 --> 00:16:38,079
commodity off the shelf arm development

417
00:16:38,079 --> 00:16:40,880
board rockpro 64.

418
00:16:40,880 --> 00:16:42,560
i would like to point out that this is

419
00:16:42,560 --> 00:16:45,199
just one possible implementation of hard

420
00:16:45,199 --> 00:16:46,000
lock

421
00:16:46,000 --> 00:16:48,000
in practice there is nothing in hard

422
00:16:48,000 --> 00:16:50,079
luck's design that bounds it either to

423
00:16:50,079 --> 00:16:53,120
linux the usb protocol or the

424
00:16:53,120 --> 00:16:56,480
development board we used

425
00:16:56,480 --> 00:16:58,560
with the prototype that we built the

426
00:16:58,560 --> 00:17:00,880
first thing we wanted to check was what

427
00:17:00,880 --> 00:17:03,680
exactly is the log protection delay

428
00:17:03,680 --> 00:17:06,880
incurred at non-critical events

429
00:17:06,880 --> 00:17:09,679
as i mentioned and it and the attacker

430
00:17:09,679 --> 00:17:12,720
is iso the audit system is isolated from

431
00:17:12,720 --> 00:17:15,839
all remaining background processes so

432
00:17:15,839 --> 00:17:18,160
the only recourse for an attacker to

433
00:17:18,160 --> 00:17:20,319
delay log protection is to produce

434
00:17:20,319 --> 00:17:23,199
system calls at the highest machine rate

435
00:17:23,199 --> 00:17:26,720
and overwhelm the audit system and stop

436
00:17:26,720 --> 00:17:29,280
it from protecting system logs

437
00:17:29,280 --> 00:17:31,280
and this is precisely the scenario that

438
00:17:31,280 --> 00:17:34,400
we tested in our paper and we found a

439
00:17:34,400 --> 00:17:36,640
cdf of completion ratio versus

440
00:17:36,640 --> 00:17:39,760
protection time as follows

441
00:17:39,760 --> 00:17:42,400
what this graph really shows is that all

442
00:17:42,400 --> 00:17:45,679
non-critical logs were protected before

443
00:17:45,679 --> 00:17:49,120
15 milliseconds from the creation of

444
00:17:49,120 --> 00:17:50,640
these events

445
00:17:50,640 --> 00:17:54,240
these entries on the machine itself

446
00:17:54,240 --> 00:17:56,880
to put this in perspective for typical

447
00:17:56,880 --> 00:17:58,240
attacks which take hundreds of

448
00:17:58,240 --> 00:17:59,520
milliseconds

449
00:17:59,520 --> 00:18:01,679
most of the attack trace is now

450
00:18:01,679 --> 00:18:04,640
protected even in the worst case where

451
00:18:04,640 --> 00:18:07,360
non-critical events are used

452
00:18:07,360 --> 00:18:09,840
so what this essentially shows is that

453
00:18:09,840 --> 00:18:12,320
hard log is able to provide fine grain

454
00:18:12,320 --> 00:18:14,559
protection at non-critical events

455
00:18:14,559 --> 00:18:16,720
in addition to providing full log

456
00:18:16,720 --> 00:18:19,840
protection at critical events

457
00:18:19,840 --> 00:18:21,520
and it is important to remember that

458
00:18:21,520 --> 00:18:23,760
existing audit systems provide neither

459
00:18:23,760 --> 00:18:26,320
of these guarantees

460
00:18:26,320 --> 00:18:28,640
hard lock a and hard lock provides these

461
00:18:28,640 --> 00:18:30,320
security guarantees while performing

462
00:18:30,320 --> 00:18:32,880
exceptionally well in the real world

463
00:18:32,880 --> 00:18:35,200
we ran several real-world programs under

464
00:18:35,200 --> 00:18:38,720
standard benchmarks with linux's default

465
00:18:38,720 --> 00:18:40,960
audit system audit d

466
00:18:40,960 --> 00:18:43,039
and we found that hard lock performed

467
00:18:43,039 --> 00:18:45,840
comparable to or better than audit d in

468
00:18:45,840 --> 00:18:47,760
most of these programs

469
00:18:47,760 --> 00:18:49,679
the one program where hard log was

470
00:18:49,679 --> 00:18:51,520
actually slower than audit d was a

471
00:18:51,520 --> 00:18:53,520
program that produced a significant

472
00:18:53,520 --> 00:18:56,080
number of critical events but that was

473
00:18:56,080 --> 00:18:58,240
also because of the way the benchmark

474
00:18:58,240 --> 00:18:59,840
was designed

475
00:18:59,840 --> 00:19:02,880
nevertheless hard log was faster

476
00:19:02,880 --> 00:19:05,520
in all other programs and on the whole

477
00:19:05,520 --> 00:19:08,000
and we provide a full explanation of all

478
00:19:08,000 --> 00:19:10,080
of these reasons in our paper if you're

479
00:19:10,080 --> 00:19:11,919
interested

480
00:19:11,919 --> 00:19:13,039
so

481
00:19:13,039 --> 00:19:15,039
what this shows what we believe this

482
00:19:15,039 --> 00:19:17,039
shows is that heart log incurs low

483
00:19:17,039 --> 00:19:19,919
overhead under typical program workloads

484
00:19:19,919 --> 00:19:21,919
and it is suitable for enterprise

485
00:19:21,919 --> 00:19:24,720
deployment because audit because it is

486
00:19:24,720 --> 00:19:27,200
actually comparable to are faster than

487
00:19:27,200 --> 00:19:30,720
widely deployed audit systems

488
00:19:30,720 --> 00:19:32,320
so to conclude

489
00:19:32,320 --> 00:19:34,880
existing audit systems provide us an

490
00:19:34,880 --> 00:19:36,720
undesirable trade-off between

491
00:19:36,720 --> 00:19:39,200
performance and security in terms of log

492
00:19:39,200 --> 00:19:40,720
protection

493
00:19:40,720 --> 00:19:43,039
hard lock maintains a delicate balance

494
00:19:43,039 --> 00:19:45,440
between performance and security it

495
00:19:45,440 --> 00:19:47,520
provides full or fine grained log

496
00:19:47,520 --> 00:19:51,039
protection at all for all log events

497
00:19:51,039 --> 00:19:53,679
while performing comparable to or faster

498
00:19:53,679 --> 00:19:56,000
than existing audit systems so we

499
00:19:56,000 --> 00:19:58,400
believe that heart law can significantly

500
00:19:58,400 --> 00:20:00,960
improve the state of log protection in

501
00:20:00,960 --> 00:20:02,720
today's enterprises

502
00:20:02,720 --> 00:20:04,480
thank you so much for your talk and i

503
00:20:04,480 --> 00:20:07,840
will now be taking questions

504
00:20:11,600 --> 00:20:13,840
hi

505
00:20:15,280 --> 00:20:16,799
all right

506
00:20:16,799 --> 00:20:18,000
okay i'm going to beat these guys the

507
00:20:18,000 --> 00:20:19,440
questions thank you so no this is the

508
00:20:19,440 --> 00:20:21,039
session chair privilege now go ahead

509
00:20:21,039 --> 00:20:22,960
i'll let you talk first

510
00:20:22,960 --> 00:20:25,679
you sure yes i'm sure cool uh hi this

511
00:20:25,679 --> 00:20:28,480
was a great talk i had a question about

512
00:20:28,480 --> 00:20:30,400
the interface

513
00:20:30,400 --> 00:20:32,480
in which system admins can extract the

514
00:20:32,480 --> 00:20:34,480
logs right yeah

515
00:20:34,480 --> 00:20:36,720
my question was why can't an attacker do

516
00:20:36,720 --> 00:20:39,200
it is it that your threat model assumes

517
00:20:39,200 --> 00:20:41,120
software only compromise but not

518
00:20:41,120 --> 00:20:42,640
hardware compromise

519
00:20:42,640 --> 00:20:44,400
so yes the threat model assumes software

520
00:20:44,400 --> 00:20:46,000
only compromised but the reason why the

521
00:20:46,000 --> 00:20:48,400
attacker won't be able to do it is

522
00:20:48,400 --> 00:20:50,240
the keys themselves should never be

523
00:20:50,240 --> 00:20:51,840
leaked as long as the key management

524
00:20:51,840 --> 00:20:54,080
system is correctly implemented the key

525
00:20:54,080 --> 00:20:56,000
should never be leaked by the system

526
00:20:56,000 --> 00:20:58,559
administrator or from the audit device

527
00:20:58,559 --> 00:21:00,320
we provision those keys when the audit

528
00:21:00,320 --> 00:21:03,360
device is first uh set up

529
00:21:03,360 --> 00:21:04,799
so uh as a

530
00:21:04,799 --> 00:21:06,799
as as long as we could ensure these keys

531
00:21:06,799 --> 00:21:08,960
are never leaked we can always ensure a

532
00:21:08,960 --> 00:21:10,159
secure

533
00:21:10,159 --> 00:21:12,960
channel only between the admin and the

534
00:21:12,960 --> 00:21:14,240
device

535
00:21:14,240 --> 00:21:15,840
and i'm not too familiar with this but

536
00:21:15,840 --> 00:21:18,240
uh do you think like i've seen these um

537
00:21:18,240 --> 00:21:20,320
software

538
00:21:20,320 --> 00:21:22,400
compromises that also induce hardware

539
00:21:22,400 --> 00:21:24,159
faults such as like row hammer do you

540
00:21:24,159 --> 00:21:26,799
think that is in scope in this situation

541
00:21:26,799 --> 00:21:28,640
that's a great question so essentially

542
00:21:28,640 --> 00:21:30,880
because our audit device is actually

543
00:21:30,880 --> 00:21:32,240
isolated

544
00:21:32,240 --> 00:21:34,799
from the main system itself so row

545
00:21:34,799 --> 00:21:37,120
hammer and these sort of uh problems are

546
00:21:37,120 --> 00:21:39,039
not really uh

547
00:21:39,039 --> 00:21:41,280
that of a problem for the audit device

548
00:21:41,280 --> 00:21:42,720
they're obviously a problem for the

549
00:21:42,720 --> 00:21:44,720
audit system in case

550
00:21:44,720 --> 00:21:45,919
uh the

551
00:21:45,919 --> 00:21:47,919
system uh the attacker somehow figures

552
00:21:47,919 --> 00:21:49,760
out how to turn off the audit system or

553
00:21:49,760 --> 00:21:52,240
something uh but those are sort of not

554
00:21:52,240 --> 00:21:53,440
really the

555
00:21:53,440 --> 00:21:55,840
key attacks that we're targeting in this

556
00:21:55,840 --> 00:21:58,240
paper yeah wonderful thank you thank you

557
00:21:58,240 --> 00:22:00,400
of course

558
00:22:00,400 --> 00:22:03,440
uh sensible talk i have two questions so

559
00:22:03,440 --> 00:22:04,799
first one is that

560
00:22:04,799 --> 00:22:08,159
hardware aims to use the external audio

561
00:22:08,159 --> 00:22:11,200
device to protect the audio logs right

562
00:22:11,200 --> 00:22:14,480
yes and it's elsewhere in the literature

563
00:22:14,480 --> 00:22:17,280
sound world tries to use te for example

564
00:22:17,280 --> 00:22:20,400
inter uh sdx right to guarantee the

565
00:22:20,400 --> 00:22:24,320
integrity of also this system audio logs

566
00:22:24,320 --> 00:22:27,440
so have you compared your uh hard dog

567
00:22:27,440 --> 00:22:30,320
with this line of research absolutely

568
00:22:30,320 --> 00:22:32,880
yes so there's a lot of work that uses

569
00:22:32,880 --> 00:22:36,480
actually sgx and tpms even to protect uh

570
00:22:36,480 --> 00:22:38,720
what these systems are essentially doing

571
00:22:38,720 --> 00:22:41,440
is trying to detect lock tampering

572
00:22:41,440 --> 00:22:44,400
because many of these uh tes don't have

573
00:22:44,400 --> 00:22:48,000
like access to storage or uh to actually

574
00:22:48,000 --> 00:22:50,159
protect the locks yes so they only

575
00:22:50,159 --> 00:22:52,720
detect tampering but the important

576
00:22:52,720 --> 00:22:55,120
system logs that describe the attack are

577
00:22:55,120 --> 00:22:57,280
can actually easily be destroyed because

578
00:22:57,280 --> 00:22:58,799
they're still kept by the operating

579
00:22:58,799 --> 00:23:01,200
system so this is one of the problems

580
00:23:01,200 --> 00:23:03,600
that hard lock solves which is ensuring

581
00:23:03,600 --> 00:23:05,360
log availability

582
00:23:05,360 --> 00:23:07,919
which none of the existing systems too

583
00:23:07,919 --> 00:23:08,880
so

584
00:23:08,880 --> 00:23:11,440
if i understand this directly so hard

585
00:23:11,440 --> 00:23:14,080
dog is basically used to secure the

586
00:23:14,080 --> 00:23:17,120
login yes

587
00:23:18,080 --> 00:23:20,559
it's basically used for secure storage

588
00:23:20,559 --> 00:23:22,640
right for the system or the unlocks

589
00:23:22,640 --> 00:23:24,159
right okay thanks

590
00:23:24,159 --> 00:23:26,559
uh and have another quick question so

591
00:23:26,559 --> 00:23:29,600
how difficult it is for this hard dock

592
00:23:29,600 --> 00:23:32,159
to be generalized to different kernel

593
00:23:32,159 --> 00:23:35,120
versions so for example i'm not sure how

594
00:23:35,120 --> 00:23:37,760
you implement this system so if you want

595
00:23:37,760 --> 00:23:40,240
to uh for example

596
00:23:40,240 --> 00:23:43,520
upgrade this uh functionality right to

597
00:23:43,520 --> 00:23:46,400
different kernel versions do you need to

598
00:23:46,400 --> 00:23:47,360
spend

599
00:23:47,360 --> 00:23:48,640
uh

600
00:23:48,640 --> 00:23:51,360
great efforts to modify the kernels or

601
00:23:51,360 --> 00:23:53,360
not that's a great question so we will

602
00:23:53,360 --> 00:23:55,279
be open sourcing the code very soon so

603
00:23:55,279 --> 00:23:57,440
you can also look at uh you know how we

604
00:23:57,440 --> 00:23:59,360
just modified the kernel but one of the

605
00:23:59,360 --> 00:24:01,120
important things is that we made very

606
00:24:01,120 --> 00:24:04,080
very few changes to the system kernel on

607
00:24:04,080 --> 00:24:07,360
the host machine and as it turns out the

608
00:24:07,360 --> 00:24:09,919
audits files the c files for audit

609
00:24:09,919 --> 00:24:11,919
haven't been changed in i don't know 10

610
00:24:11,919 --> 00:24:14,080
years or so in the linux kernel so i

611
00:24:14,080 --> 00:24:15,919
don't think it would be that complex

612
00:24:15,919 --> 00:24:17,919
assuming that the audit system is not

613
00:24:17,919 --> 00:24:21,520
entirely revamped uh uh if they're still

614
00:24:21,520 --> 00:24:23,600
using things like event queues and and

615
00:24:23,600 --> 00:24:25,520
and what they're using right now i don't

616
00:24:25,520 --> 00:24:27,679
think it would actually be you might not

617
00:24:27,679 --> 00:24:30,000
even need to do anything it is what i

618
00:24:30,000 --> 00:24:31,120
think

619
00:24:31,120 --> 00:24:33,600
oh yeah so can i assume so we're going

620
00:24:33,600 --> 00:24:35,600
to go ahead and bump off for

621
00:24:35,600 --> 00:24:37,760
take it offline cool okay all right

622
00:24:37,760 --> 00:24:39,279
thank you thank you very much for the

623
00:24:39,279 --> 00:24:41,200
questions okay so we got like uh 20

624
00:24:41,200 --> 00:24:43,360
seconds and uh one question i have what

625
00:24:43,360 --> 00:24:45,200
what the heck is this isolation at run

626
00:24:45,200 --> 00:24:46,400
time like you say this and then

627
00:24:46,400 --> 00:24:47,679
magically think well what does that

628
00:24:47,679 --> 00:24:48,960
actually mean because your threat model

629
00:24:48,960 --> 00:24:50,640
was really unclear during the talk and

630
00:24:50,640 --> 00:24:52,080
it'd be really interesting to understand

631
00:24:52,080 --> 00:24:53,760
what runtime threat you actually defend

632
00:24:53,760 --> 00:24:54,720
against

633
00:24:54,720 --> 00:24:57,840
um so the isolation itself is

634
00:24:57,840 --> 00:25:00,000
essentially ensuring that the idea is

635
00:25:00,000 --> 00:25:01,760
that before the operating system is

636
00:25:01,760 --> 00:25:03,919
compromised uh the operating system is

637
00:25:03,919 --> 00:25:07,039
is trusted so the operating system

638
00:25:07,039 --> 00:25:08,880
a trusted operating system prior to

639
00:25:08,880 --> 00:25:10,799
compromise will try to protect logs as

640
00:25:10,799 --> 00:25:13,120
fast as possible yes and and when it

641
00:25:13,120 --> 00:25:15,440
does that it will then isolate all of

642
00:25:15,440 --> 00:25:17,840
the factors that could slow down

643
00:25:17,840 --> 00:25:19,360
log protection

644
00:25:19,360 --> 00:25:20,960
uh and that's that's where this

645
00:25:20,960 --> 00:25:22,559
isolation comes in which involves

646
00:25:22,559 --> 00:25:24,720
including okay so you're talking about

647
00:25:24,720 --> 00:25:25,760
temporal

648
00:25:25,760 --> 00:25:28,240
temporal property of making sure that

649
00:25:28,240 --> 00:25:30,240
you get there as fast as possible not

650
00:25:30,240 --> 00:25:32,720
memory safety so so memory corruption

651
00:25:32,720 --> 00:25:33,919
bug in the kernel that happens through a

652
00:25:33,919 --> 00:25:35,360
non-critical event could overwrite your

653
00:25:35,360 --> 00:25:36,240
log

654
00:25:36,240 --> 00:25:38,960
yes okay that that okay cool i'm excited

655
00:25:38,960 --> 00:25:40,159
i have like hundreds of questions for

656
00:25:40,159 --> 00:25:41,679
this great work all right so let's say

657
00:25:41,679 --> 00:25:43,600
thank you to our speaker once more

658
00:25:43,600 --> 00:25:47,158
thank you very much

