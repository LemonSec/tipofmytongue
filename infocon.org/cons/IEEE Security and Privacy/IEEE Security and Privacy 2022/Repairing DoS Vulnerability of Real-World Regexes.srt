1
00:00:00,719 --> 00:00:03,280
um hello i'm nario shida from ntt

2
00:00:03,280 --> 00:00:06,080
security japan and currently i'm a phd

3
00:00:06,080 --> 00:00:08,480
student at washington university i will

4
00:00:08,480 --> 00:00:10,639
present you a joint work with tachyo te

5
00:00:10,639 --> 00:00:12,960
rauchi at wasada university

6
00:00:12,960 --> 00:00:14,880
this talk is about repairing those

7
00:00:14,880 --> 00:00:17,600
vulnerability of liar while legixes so

8
00:00:17,600 --> 00:00:19,439
i'd like to start my presentation by

9
00:00:19,439 --> 00:00:22,960
explaining what is allegex

10
00:00:22,960 --> 00:00:25,680
a legex is a pattern used to match

11
00:00:25,680 --> 00:00:28,080
character combinations in strings and

12
00:00:28,080 --> 00:00:30,240
regixes are used in many places for

13
00:00:30,240 --> 00:00:31,439
example

14
00:00:31,439 --> 00:00:34,160
they are used for sanitizing user input

15
00:00:34,160 --> 00:00:36,160
and they are used for extracting data

16
00:00:36,160 --> 00:00:38,879
from unstructured text and many modern

17
00:00:38,879 --> 00:00:41,040
programming languages provide legixies

18
00:00:41,040 --> 00:00:43,120
as a general purpose library so

19
00:00:43,120 --> 00:00:45,039
rejections are ubiquitous in the real

20
00:00:45,039 --> 00:00:46,079
world

21
00:00:46,079 --> 00:00:47,760
but unfortunately

22
00:00:47,760 --> 00:00:50,000
despite the widespread use of legends in

23
00:00:50,000 --> 00:00:52,320
practice there's a problem

24
00:00:52,320 --> 00:00:54,000
the problem is

25
00:00:54,000 --> 00:00:57,039
physics are hard this is because legix

26
00:00:57,039 --> 00:00:59,680
is simply too complex for example

27
00:00:59,680 --> 00:01:01,840
imagine that we need allegex for

28
00:01:01,840 --> 00:01:04,640
validating an email address then we can

29
00:01:04,640 --> 00:01:06,560
prepare the rejects by lighting it

30
00:01:06,560 --> 00:01:08,080
manually or

31
00:01:08,080 --> 00:01:10,560
reusing it from the website such as

32
00:01:10,560 --> 00:01:13,040
stackoverflow and then we need to

33
00:01:13,040 --> 00:01:15,520
validate the legends correct or not by

34
00:01:15,520 --> 00:01:18,320
using the test cases and in this case we

35
00:01:18,320 --> 00:01:20,960
assume that the validation failed

36
00:01:20,960 --> 00:01:24,960
but so we need to repair the rejects but

37
00:01:24,960 --> 00:01:27,680
as you can see the legix is too complex

38
00:01:27,680 --> 00:01:30,159
to repair but if we cannot repair the

39
00:01:30,159 --> 00:01:32,960
logics then we cannot reuse we cannot

40
00:01:32,960 --> 00:01:35,840
use allegex or if we incorporate the

41
00:01:35,840 --> 00:01:38,240
rejects into a program then it may

42
00:01:38,240 --> 00:01:40,720
become a bug so this is a problem

43
00:01:40,720 --> 00:01:42,960
but fortunately we have a solution to

44
00:01:42,960 --> 00:01:44,240
the problem

45
00:01:44,240 --> 00:01:47,040
the solution is to use programming by

46
00:01:47,040 --> 00:01:48,720
example tools

47
00:01:48,720 --> 00:01:50,720
programming by example tools allows us

48
00:01:50,720 --> 00:01:51,520
to

49
00:01:51,520 --> 00:01:54,240
write or repair logics automatically and

50
00:01:54,240 --> 00:01:57,200
the only thing we need to do is to

51
00:01:57,200 --> 00:01:59,680
prepare examples and the examples are

52
00:01:59,680 --> 00:02:01,040
our intention

53
00:02:01,040 --> 00:02:03,040
and in this case there are two types of

54
00:02:03,040 --> 00:02:05,520
examples the first one is positive

55
00:02:05,520 --> 00:02:07,759
examples and the second one is negative

56
00:02:07,759 --> 00:02:09,199
examples

57
00:02:09,199 --> 00:02:12,000
positive examples are strings

58
00:02:12,000 --> 00:02:14,319
to be accepted by the rejects that we

59
00:02:14,319 --> 00:02:16,319
need and the negative examples are

60
00:02:16,319 --> 00:02:19,360
strings to be rejected by the rejects so

61
00:02:19,360 --> 00:02:21,120
in this case in this situation we have

62
00:02:21,120 --> 00:02:24,080
the tesla cases so we can reuse it as

63
00:02:24,080 --> 00:02:25,440
examples

64
00:02:25,440 --> 00:02:28,800
and once we input the examples into the

65
00:02:28,800 --> 00:02:31,440
programming by example tools then the

66
00:02:31,440 --> 00:02:33,040
the programming by example tools

67
00:02:33,040 --> 00:02:35,280
automatically find the rejects that

68
00:02:35,280 --> 00:02:38,000
correctly classify these examples so we

69
00:02:38,000 --> 00:02:39,599
do not need to write rejects by

70
00:02:39,599 --> 00:02:40,959
ourselves

71
00:02:40,959 --> 00:02:43,360
but now we have a question

72
00:02:43,360 --> 00:02:45,519
the question is this one

73
00:02:45,519 --> 00:02:47,760
are we free from the difficulty of

74
00:02:47,760 --> 00:02:50,640
rejections

75
00:02:50,640 --> 00:02:53,519
unfortunately the answer is no because

76
00:02:53,519 --> 00:02:55,599
we are still facing the difficulty of

77
00:02:55,599 --> 00:02:57,599
their vulnerability called regular

78
00:02:57,599 --> 00:03:00,159
expression denial of service or leaders

79
00:03:00,159 --> 00:03:02,560
for short and actually existing

80
00:03:02,560 --> 00:03:04,319
programming by example tools may

81
00:03:04,319 --> 00:03:06,879
generate rejects that is vulnerable to

82
00:03:06,879 --> 00:03:09,920
regular expression dose

83
00:03:09,920 --> 00:03:11,760
and regular expression dos is a

84
00:03:11,760 --> 00:03:14,159
vulnerability that exploits the behavior

85
00:03:14,159 --> 00:03:16,239
of backtracking matching algorithms of

86
00:03:16,239 --> 00:03:17,519
legix engines

87
00:03:17,519 --> 00:03:19,599
and due to the despite due to the

88
00:03:19,599 --> 00:03:21,200
widespread use of legislative in

89
00:03:21,200 --> 00:03:23,599
practice leaders is a significant threat

90
00:03:23,599 --> 00:03:26,319
to our society

91
00:03:26,319 --> 00:03:27,120
so

92
00:03:27,120 --> 00:03:29,680
to rectify this situation we introduced

93
00:03:29,680 --> 00:03:31,599
a tool called remedy

94
00:03:31,599 --> 00:03:33,599
levity is a programming by example tools

95
00:03:33,599 --> 00:03:36,159
to repair the leaders and

96
00:03:36,159 --> 00:03:39,360
so it takes two input the first one is

97
00:03:39,360 --> 00:03:42,400
legix and the second one is examples the

98
00:03:42,400 --> 00:03:45,599
output of remedy is rejects that

99
00:03:45,599 --> 00:03:48,720
correctly classify these examples and is

100
00:03:48,720 --> 00:03:51,360
invulnerable to regular expression dose

101
00:03:51,360 --> 00:03:54,560
and the point of this work is here

102
00:03:54,560 --> 00:03:57,360
so limited can handle real-world latixes

103
00:03:57,360 --> 00:03:59,519
so this means that levity can handle

104
00:03:59,519 --> 00:04:00,400
rejects

105
00:04:00,400 --> 00:04:02,879
that have real-world extensions such as

106
00:04:02,879 --> 00:04:04,640
liquor and capturing groups and back

107
00:04:04,640 --> 00:04:06,000
references

108
00:04:06,000 --> 00:04:08,480
this point is important because this

109
00:04:08,480 --> 00:04:10,959
extension enhances the expressive power

110
00:04:10,959 --> 00:04:14,000
of rejects so this means that we do not

111
00:04:14,000 --> 00:04:15,920
have the definition of the regular

112
00:04:15,920 --> 00:04:18,798
expression dose of real-world legacies

113
00:04:18,798 --> 00:04:21,839
so this is our contribution so the first

114
00:04:21,839 --> 00:04:24,400
one is we give the definition of regular

115
00:04:24,400 --> 00:04:27,520
expression dos of real-world latexes

116
00:04:27,520 --> 00:04:30,560
and then we give the condition

117
00:04:30,560 --> 00:04:32,639
to the to endure the leaders

118
00:04:32,639 --> 00:04:35,280
invulnerability and we define the

119
00:04:35,280 --> 00:04:37,600
repair problem by using the condition

120
00:04:37,600 --> 00:04:39,440
and the last contribution is an

121
00:04:39,440 --> 00:04:41,600
algorithm for solving this repair

122
00:04:41,600 --> 00:04:42,639
problem

123
00:04:42,639 --> 00:04:44,880
so in the list of this talk i'd like to

124
00:04:44,880 --> 00:04:47,199
explain these contributions one by one

125
00:04:47,199 --> 00:04:51,520
and the first one is the definition

126
00:04:51,840 --> 00:04:53,840
so to define the leaders vulnerability

127
00:04:53,840 --> 00:04:58,000
of the researches recall that redos is a

128
00:04:58,000 --> 00:05:00,400
vulnerability about the behavior of

129
00:05:00,400 --> 00:05:03,039
backtracking matching algorithms so to

130
00:05:03,039 --> 00:05:04,479
define the leader's vulnerability

131
00:05:04,479 --> 00:05:07,280
formally we need to we first need to

132
00:05:07,280 --> 00:05:09,280
define the behavior of backtracking

133
00:05:09,280 --> 00:05:12,000
matching algorithms and so we defined

134
00:05:12,000 --> 00:05:16,400
the behavior as a matching relation

135
00:05:16,400 --> 00:05:18,960
oh sorry

136
00:05:18,960 --> 00:05:20,880
and the definition of matching reaction

137
00:05:20,880 --> 00:05:22,400
is this one

138
00:05:22,400 --> 00:05:24,400
so let's see the

139
00:05:24,400 --> 00:05:25,680
left hand side

140
00:05:25,680 --> 00:05:28,080
and this is a tuples that represent a

141
00:05:28,080 --> 00:05:30,479
state of legix engines and it consists

142
00:05:30,479 --> 00:05:33,440
it have four elements the first one is

143
00:05:33,440 --> 00:05:35,680
legix and the second one is

144
00:05:35,680 --> 00:05:37,440
input string and the third one is a

145
00:05:37,440 --> 00:05:39,520
position on the input string and the

146
00:05:39,520 --> 00:05:41,840
last one is an environment an

147
00:05:41,840 --> 00:05:44,560
environment is used for back references

148
00:05:44,560 --> 00:05:46,080
and it stores

149
00:05:46,080 --> 00:05:48,639
strings captured by capturing groups and

150
00:05:48,639 --> 00:05:51,360
the right hand side is a result of the

151
00:05:51,360 --> 00:05:54,800
matching so we can leave this as lsxr

152
00:05:54,800 --> 00:05:57,440
try to match the input string w on the

153
00:05:57,440 --> 00:06:00,000
position p with the information of

154
00:06:00,000 --> 00:06:02,560
capturing group gamma and then

155
00:06:02,560 --> 00:06:04,880
this is the result so the legix can

156
00:06:04,880 --> 00:06:07,039
change the input version p and um

157
00:06:07,039 --> 00:06:09,280
environment gamma to the

158
00:06:09,280 --> 00:06:11,919
next input version p i and next

159
00:06:11,919 --> 00:06:14,240
environment gamma i so this models the

160
00:06:14,240 --> 00:06:15,919
behavior of backtracking matching

161
00:06:15,919 --> 00:06:18,400
algorithms so that is this model the

162
00:06:18,400 --> 00:06:20,880
behavior of legix engines

163
00:06:20,880 --> 00:06:22,000
so

164
00:06:22,000 --> 00:06:24,400
next we define the learning time

165
00:06:24,400 --> 00:06:25,199
and

166
00:06:25,199 --> 00:06:27,199
here we define the learning time as the

167
00:06:27,199 --> 00:06:29,039
size of the derivation tree of the

168
00:06:29,039 --> 00:06:30,560
matching relation

169
00:06:30,560 --> 00:06:34,479
so this one oh we cannot use this and

170
00:06:34,479 --> 00:06:36,400
and then now we can define the little

171
00:06:36,400 --> 00:06:39,360
spawn ability and this is the definition

172
00:06:39,360 --> 00:06:42,000
so we say that allergic r is vulnerable

173
00:06:42,000 --> 00:06:44,080
to regular expression dose if there

174
00:06:44,080 --> 00:06:46,240
exists an input string w

175
00:06:46,240 --> 00:06:49,039
that takes super linear time so this mod

176
00:06:49,039 --> 00:06:51,360
uh this defines a little vulnerability

177
00:06:51,360 --> 00:06:53,919
of latexes

178
00:06:53,919 --> 00:06:56,479
next i'd like to explain the condition

179
00:06:56,479 --> 00:07:00,080
to enjoy the leaders in vulnerability

180
00:07:00,080 --> 00:07:02,560
and to define the diff to define the

181
00:07:02,560 --> 00:07:05,360
condition uh we consider the root cause

182
00:07:05,360 --> 00:07:08,080
of the leaders and the root cause is

183
00:07:08,080 --> 00:07:10,319
backtracking due to the ambiguity of

184
00:07:10,319 --> 00:07:13,199
regular expressions so to

185
00:07:13,199 --> 00:07:15,520
ensure the leaders invulnerability

186
00:07:15,520 --> 00:07:17,120
we enforce that

187
00:07:17,120 --> 00:07:19,520
the rejects do not have the ambiguity

188
00:07:19,520 --> 00:07:20,400
and

189
00:07:20,400 --> 00:07:23,759
this is an example of the idea

190
00:07:23,759 --> 00:07:27,120
so in this case this rejects is for an

191
00:07:27,120 --> 00:07:29,120
email address and this is so simple but

192
00:07:29,120 --> 00:07:30,400
it's too relaxed

193
00:07:30,400 --> 00:07:32,000
it means that

194
00:07:32,000 --> 00:07:34,000
since this is a legix for an email

195
00:07:34,000 --> 00:07:34,880
address

196
00:07:34,880 --> 00:07:36,720
these sub expressions this one and this

197
00:07:36,720 --> 00:07:39,120
one do not need to accept the character

198
00:07:39,120 --> 00:07:42,880
art usually so by using example

199
00:07:42,880 --> 00:07:45,759
we disambiguate this one to like this

200
00:07:45,759 --> 00:07:46,960
one

201
00:07:46,960 --> 00:07:50,240
and we formulate this con this idea

202
00:07:50,240 --> 00:07:51,360
uh

203
00:07:51,360 --> 00:07:53,440
as a condition called real-world through

204
00:07:53,440 --> 00:07:56,400
one ambiguity we does not we do not

205
00:07:56,400 --> 00:07:58,560
explain the detail in this talk but you

206
00:07:58,560 --> 00:08:00,160
can find a detail

207
00:08:00,160 --> 00:08:03,440
in our paper so please read this

208
00:08:03,440 --> 00:08:05,520
and then by using the condition we

209
00:08:05,520 --> 00:08:07,680
define the repair problem the repair

210
00:08:07,680 --> 00:08:10,000
problem takes three input the first one

211
00:08:10,000 --> 00:08:12,000
is rejects and second one is positive

212
00:08:12,000 --> 00:08:13,759
examples and the last one is negative

213
00:08:13,759 --> 00:08:16,319
examples and the output of this problem

214
00:08:16,319 --> 00:08:19,599
is a regular expression but that that

215
00:08:19,599 --> 00:08:22,400
correctly classifies uh these examples

216
00:08:22,400 --> 00:08:25,440
uh this is for the correctness and

217
00:08:25,440 --> 00:08:28,080
the legit satisfies real world through

218
00:08:28,080 --> 00:08:30,080
one ambiguity this is for leaders in

219
00:08:30,080 --> 00:08:33,120
vulnerability and in addition to that

220
00:08:33,120 --> 00:08:35,039
we require that the

221
00:08:35,039 --> 00:08:37,599
edit distance between the input rejects

222
00:08:37,599 --> 00:08:39,760
and output rejects is minimal this is

223
00:08:39,760 --> 00:08:42,719
for the quality of repair i will i will

224
00:08:42,719 --> 00:08:44,959
explain why we need this condition in

225
00:08:44,959 --> 00:08:47,760
the later list of this talk

226
00:08:47,760 --> 00:08:49,279
so this is the definition of liber

227
00:08:49,279 --> 00:08:50,560
problem

228
00:08:50,560 --> 00:08:51,360
and

229
00:08:51,360 --> 00:08:53,839
this problem is and be hard we can show

230
00:08:53,839 --> 00:08:57,200
this by a reduction from the from an

231
00:08:57,200 --> 00:09:01,600
exact cover which is uh np complete

232
00:09:01,600 --> 00:09:04,320
so this is a condition so finally i'd

233
00:09:04,320 --> 00:09:06,000
like to explain the algorithm for

234
00:09:06,000 --> 00:09:09,839
solving the repair problem

235
00:09:09,839 --> 00:09:11,760
our algorithm is basically use

236
00:09:11,760 --> 00:09:13,600
enumerative search so our algorithm

237
00:09:13,600 --> 00:09:16,320
emulates candidates of the solution and

238
00:09:16,320 --> 00:09:18,640
but of course it takes a lot of time so

239
00:09:18,640 --> 00:09:21,279
to improve the learning time we use

240
00:09:21,279 --> 00:09:23,920
planning by approximation and smt based

241
00:09:23,920 --> 00:09:25,760
constraint solving

242
00:09:25,760 --> 00:09:28,399
and this is a high level overview of our

243
00:09:28,399 --> 00:09:31,360
algorithms and so our algorithm consists

244
00:09:31,360 --> 00:09:33,920
of three components and in this talk i'd

245
00:09:33,920 --> 00:09:35,200
like to explain

246
00:09:35,200 --> 00:09:37,920
these two components so let's see the

247
00:09:37,920 --> 00:09:40,160
first one

248
00:09:40,160 --> 00:09:42,480
and in this component the algorithm

249
00:09:42,480 --> 00:09:44,080
generates a template

250
00:09:44,080 --> 00:09:47,040
a template is a rejects with holes

251
00:09:47,040 --> 00:09:49,440
and holes are represented by

252
00:09:49,440 --> 00:09:50,720
square

253
00:09:50,720 --> 00:09:52,240
and this means that

254
00:09:52,240 --> 00:09:54,160
this sub expression represented by

255
00:09:54,160 --> 00:09:57,680
square is under repair so this algorithm

256
00:09:57,680 --> 00:10:01,040
replaces sub expressions with holes and

257
00:10:01,040 --> 00:10:03,760
replaces replaces holes with the other

258
00:10:03,760 --> 00:10:06,320
sub-expression that consists of holes

259
00:10:06,320 --> 00:10:08,560
and the other operators

260
00:10:08,560 --> 00:10:09,760
and then

261
00:10:09,760 --> 00:10:12,320
the algorithm checks whether the

262
00:10:12,320 --> 00:10:14,880
template has a solution or not to check

263
00:10:14,880 --> 00:10:16,959
this the algorithm generates a

264
00:10:16,959 --> 00:10:20,560
constraint by using the template

265
00:10:20,560 --> 00:10:22,959
template and examples

266
00:10:22,959 --> 00:10:26,720
and if the constraint is satisfiable

267
00:10:26,720 --> 00:10:29,680
then the template has a solution so the

268
00:10:29,680 --> 00:10:31,600
algorithm replaces

269
00:10:31,600 --> 00:10:34,720
holes with a set of characters

270
00:10:34,720 --> 00:10:36,000
yeah like this one

271
00:10:36,000 --> 00:10:38,959
and if it is not satisfiable then the

272
00:10:38,959 --> 00:10:41,600
template does not have the solution so

273
00:10:41,600 --> 00:10:43,600
the algorithm backs to the first step

274
00:10:43,600 --> 00:10:47,279
and contrasts to the next template

275
00:10:47,279 --> 00:10:49,839
so this is algorithms and we have

276
00:10:49,839 --> 00:10:52,000
implemented this algorithm as a tool

277
00:10:52,000 --> 00:10:55,279
called remedy so we evaluated 11d only

278
00:10:55,279 --> 00:10:58,560
r1 data set so i'd like to show some

279
00:10:58,560 --> 00:11:02,000
results of these evaluations and the

280
00:11:02,000 --> 00:11:04,160
first one is for efficiency and the

281
00:11:04,160 --> 00:11:07,279
second one is for quality

282
00:11:07,279 --> 00:11:09,680
and let's see the result for the quality

283
00:11:09,680 --> 00:11:11,519
efficiency first

284
00:11:11,519 --> 00:11:13,279
and this is a result

285
00:11:13,279 --> 00:11:15,600
limited solved about eighty-two percent

286
00:11:15,600 --> 00:11:18,720
of legends within about one second on

287
00:11:18,720 --> 00:11:20,240
avalanche

288
00:11:20,240 --> 00:11:23,519
and next is for quality but before i

289
00:11:23,519 --> 00:11:25,680
show the result of quality i'd like to

290
00:11:25,680 --> 00:11:28,880
explain what is a high quality

291
00:11:28,880 --> 00:11:31,760
remedy is a tool that based on the

292
00:11:31,760 --> 00:11:34,240
programming by example method and the

293
00:11:34,240 --> 00:11:36,160
goal of the programming by

294
00:11:36,160 --> 00:11:39,200
programming by example is to find what

295
00:11:39,200 --> 00:11:41,839
the user intended so the repair is good

296
00:11:41,839 --> 00:11:43,600
if it is similar to what the user

297
00:11:43,600 --> 00:11:46,959
intended but as you know we do not know

298
00:11:46,959 --> 00:11:49,200
the no we do not know what the user

299
00:11:49,200 --> 00:11:52,399
intended so we use the assumption and

300
00:11:52,399 --> 00:11:54,160
the assumption is

301
00:11:54,160 --> 00:11:56,560
the input rejects may be

302
00:11:56,560 --> 00:11:58,880
incorrect and may it's maybe

303
00:11:58,880 --> 00:12:01,440
vulnerable but it is similar to what

304
00:12:01,440 --> 00:12:03,920
user what the user intended because the

305
00:12:03,920 --> 00:12:06,959
input rejects is prepared by the user so

306
00:12:06,959 --> 00:12:08,800
based on this assumption

307
00:12:08,800 --> 00:12:12,480
we use edit distance as a matrix

308
00:12:12,480 --> 00:12:13,760
so

309
00:12:13,760 --> 00:12:17,600
so that is so and this is a result and

310
00:12:17,600 --> 00:12:19,600
about 81 percent of legends were

311
00:12:19,600 --> 00:12:22,000
repaired within the small edit distance

312
00:12:22,000 --> 00:12:24,720
and the average ratio of change was

313
00:12:24,720 --> 00:12:27,760
about uh 24 percent

314
00:12:27,760 --> 00:12:30,079
so this is a result of the research

315
00:12:30,079 --> 00:12:31,279
questions

316
00:12:31,279 --> 00:12:32,320
so

317
00:12:32,320 --> 00:12:34,000
uh now i'd like to conclude my

318
00:12:34,000 --> 00:12:36,800
presentation but before that um we have

319
00:12:36,800 --> 00:12:37,600
uh

320
00:12:37,600 --> 00:12:39,680
the artifact is available and the

321
00:12:39,680 --> 00:12:42,079
artifact is remedy so

322
00:12:42,079 --> 00:12:45,200
you can find artifact uh by

323
00:12:45,200 --> 00:12:48,800
this link or how to say this figure or

324
00:12:48,800 --> 00:12:51,200
the same link is in our paper so please

325
00:12:51,200 --> 00:12:53,440
read our paper to find this

326
00:12:53,440 --> 00:12:55,519
artifact thank you

327
00:12:55,519 --> 00:12:57,290
thank you

328
00:12:57,290 --> 00:13:00,429
[Applause]

329
00:13:01,839 --> 00:13:04,560
so if you have questions please step to

330
00:13:04,560 --> 00:13:06,560
the microphone so that online attendees

331
00:13:06,560 --> 00:13:09,680
can hear you also please state your name

332
00:13:09,680 --> 00:13:11,519
and your affiliation for example i'm

333
00:13:11,519 --> 00:13:15,720
gary tan from penn state

334
00:13:20,399 --> 00:13:23,120
hi i'm max i'm from uh northeastern i

335
00:13:23,120 --> 00:13:24,240
wonder if you think similar

336
00:13:24,240 --> 00:13:26,000
vulnerabilities might exist in program

337
00:13:26,000 --> 00:13:27,760
synthesis tools from the formal methods

338
00:13:27,760 --> 00:13:29,600
community other than just programming by

339
00:13:29,600 --> 00:13:30,959
example like programming from

340
00:13:30,959 --> 00:13:33,839
specification styles

341
00:13:33,839 --> 00:13:35,440
um

342
00:13:35,440 --> 00:13:37,279
okay any pizza

343
00:13:37,279 --> 00:13:38,720
oh i'm sorry um

344
00:13:38,720 --> 00:13:41,199
in informal methods people build tools

345
00:13:41,199 --> 00:13:43,519
that try to synthesize a program based

346
00:13:43,519 --> 00:13:45,279
off a specification like based off some

347
00:13:45,279 --> 00:13:47,680
logical property and so that seems

348
00:13:47,680 --> 00:13:49,519
similar to the programming by example

349
00:13:49,519 --> 00:13:50,959
and i wonder if maybe there are

350
00:13:50,959 --> 00:13:52,399
vulnerabilities in a lot of these other

351
00:13:52,399 --> 00:13:53,760
tools because nobody's thought about the

352
00:13:53,760 --> 00:13:56,320
security implications of them

353
00:13:56,320 --> 00:13:58,800
this tool is about only for the leaders

354
00:13:58,800 --> 00:14:01,440
vulnerability so i'm not sure the

355
00:14:01,440 --> 00:14:03,440
differences between this one and the

356
00:14:03,440 --> 00:14:05,920
other one so okay okay

357
00:14:05,920 --> 00:14:08,719
thank you thank you

358
00:14:11,040 --> 00:14:13,920
good morning drudene from amazon

359
00:14:13,920 --> 00:14:15,040
in your

360
00:14:15,040 --> 00:14:19,600
um minimality metric did you consider

361
00:14:19,600 --> 00:14:22,320
edit distance i i'm a little bit puzzled

362
00:14:22,320 --> 00:14:24,079
by did you consider for example the

363
00:14:24,079 --> 00:14:26,399
difference in the languages accepted oh

364
00:14:26,399 --> 00:14:27,760
yes

365
00:14:27,760 --> 00:14:31,279
oh yes i we consider the uh running

366
00:14:31,279 --> 00:14:33,760
similarity as one of the candidate of

367
00:14:33,760 --> 00:14:36,560
the metrics but

368
00:14:36,560 --> 00:14:39,839
we use this metrics because

369
00:14:39,839 --> 00:14:41,680
how to say this is programming by

370
00:14:41,680 --> 00:14:43,920
example so the original input rejects

371
00:14:43,920 --> 00:14:46,240
may be incorrect so the language

372
00:14:46,240 --> 00:14:48,240
similarity in that case the range

373
00:14:48,240 --> 00:14:50,639
similarity does not have the meaning so

374
00:14:50,639 --> 00:14:52,480
we use this uh

375
00:14:52,480 --> 00:14:54,639
the similarity from between the input

376
00:14:54,639 --> 00:14:57,760
rejects and output rejects as our matrix

377
00:14:57,760 --> 00:14:59,519
so

378
00:14:59,519 --> 00:15:02,079
is that answer

379
00:15:02,079 --> 00:15:04,320
thank you for that so there's an online

380
00:15:04,320 --> 00:15:07,199
question from michael flanders how

381
00:15:07,199 --> 00:15:09,040
fine-grained are the semantics for the

382
00:15:09,040 --> 00:15:11,040
regular expression matching

383
00:15:11,040 --> 00:15:13,120
could you also use this for detecting

384
00:15:13,120 --> 00:15:15,279
side channels in regular expressions

385
00:15:15,279 --> 00:15:16,959
that is how long

386
00:15:16,959 --> 00:15:17,839
should

387
00:15:17,839 --> 00:15:19,920
input take to match

388
00:15:19,920 --> 00:15:22,399
compared to input 2

389
00:15:22,399 --> 00:15:23,920
which also matches for a regular

390
00:15:23,920 --> 00:15:25,760
expression i think it's a question about

391
00:15:25,760 --> 00:15:27,680
side channels can you use this to detect

392
00:15:27,680 --> 00:15:30,720
channels in regular expression matching

393
00:15:30,720 --> 00:15:32,079
uh it may be

394
00:15:32,079 --> 00:15:34,079
used to

395
00:15:34,079 --> 00:15:35,600
do that

396
00:15:35,600 --> 00:15:38,000
yeah it may be used side channel but i'm

397
00:15:38,000 --> 00:15:40,720
not sure about that

398
00:15:40,720 --> 00:15:44,000
okay i have a question about

399
00:15:44,000 --> 00:15:46,160
the examples right so your algorithm

400
00:15:46,160 --> 00:15:49,120
takes a set of examples

401
00:15:49,120 --> 00:15:50,480
how does the completeness of the

402
00:15:50,480 --> 00:15:53,120
examples affect your algorithm

403
00:15:53,120 --> 00:15:55,279
oh yes this one is sound and complete

404
00:15:55,279 --> 00:15:56,160
because

405
00:15:56,160 --> 00:15:58,480
basically it uses an enumerative search

406
00:15:58,480 --> 00:15:59,680
so if

407
00:15:59,680 --> 00:16:02,560
it has enough time then it will

408
00:16:02,560 --> 00:16:05,359
find a solution

409
00:16:07,120 --> 00:16:09,519
all right thank you

410
00:16:09,519 --> 00:16:11,680
thank you

411
00:16:11,680 --> 00:16:15,819
[Applause]

