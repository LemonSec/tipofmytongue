1
00:00:00,000 --> 00:00:02,240
[Applause]

2
00:00:02,240 --> 00:00:04,240
i'm lenka and i'll be presenting a paper

3
00:00:04,240 --> 00:00:06,399
on telegram which was a joint work with

4
00:00:06,399 --> 00:00:08,720
martin albrecht kenny patterson and igor

5
00:00:08,720 --> 00:00:11,200
stefanos

6
00:00:11,200 --> 00:00:12,960
telegram has grown in popularity in

7
00:00:12,960 --> 00:00:14,960
recent years claiming to have reached

8
00:00:14,960 --> 00:00:18,080
550 million users last year but that's

9
00:00:18,080 --> 00:00:19,840
only a part of the picture

10
00:00:19,840 --> 00:00:21,520
the thing that made it interesting is

11
00:00:21,520 --> 00:00:23,359
that it gained a reputation for being a

12
00:00:23,359 --> 00:00:25,920
protest app around the world it was used

13
00:00:25,920 --> 00:00:27,840
for coordinating protests in hong kong

14
00:00:27,840 --> 00:00:30,800
and dollars just to give two examples

15
00:00:30,800 --> 00:00:32,558
the cryptographic protocol securing

16
00:00:32,558 --> 00:00:34,399
telegram is custom-made and does not

17
00:00:34,399 --> 00:00:36,320
follow standard practice

18
00:00:36,320 --> 00:00:38,239
yet it has not received much detailed

19
00:00:38,239 --> 00:00:39,200
study

20
00:00:39,200 --> 00:00:41,200
three attacks were described in previous

21
00:00:41,200 --> 00:00:43,120
versions and the recent paper proved

22
00:00:43,120 --> 00:00:44,960
telegram to be secure in a symbolic

23
00:00:44,960 --> 00:00:45,920
setting

24
00:00:45,920 --> 00:00:48,000
however it abstracts most of the details

25
00:00:48,000 --> 00:00:50,879
of the building blocks of the protocol

26
00:00:50,879 --> 00:00:52,800
further most of the focus on telegram

27
00:00:52,800 --> 00:00:55,120
has been on so-called secret chats which

28
00:00:55,120 --> 00:00:56,640
are supposed to provide end-to-end

29
00:00:56,640 --> 00:00:58,640
encryption however they have very

30
00:00:58,640 --> 00:01:00,800
limited functionality and seem to not be

31
00:01:00,800 --> 00:01:02,800
used much in practice

32
00:01:02,800 --> 00:01:04,799
so most users even the ones organizing

33
00:01:04,799 --> 00:01:07,439
protests are actually using cloud chats

34
00:01:07,439 --> 00:01:09,280
which only secure the client server

35
00:01:09,280 --> 00:01:10,159
links

36
00:01:10,159 --> 00:01:13,840
and this is also the focus of our work

37
00:01:14,799 --> 00:01:16,320
so the main thing to keep in mind is

38
00:01:16,320 --> 00:01:17,840
that we should be comparing this

39
00:01:17,840 --> 00:01:20,640
protocol to tls rather than for example

40
00:01:20,640 --> 00:01:22,159
signal

41
00:01:22,159 --> 00:01:24,479
so empty proto version 2.0 as it's

42
00:01:24,479 --> 00:01:27,360
called runs directly over the transport

43
00:01:27,360 --> 00:01:30,079
which is normally tcp or http

44
00:01:30,079 --> 00:01:31,759
and we looked at the official mobile

45
00:01:31,759 --> 00:01:35,119
client as well as the desktop client

46
00:01:35,119 --> 00:01:36,799
at a very high level and the key

47
00:01:36,799 --> 00:01:38,880
exchange uses a variant of the dp helm

48
00:01:38,880 --> 00:01:41,159
key exchange the output of which is a

49
00:01:41,159 --> 00:01:44,159
2048 bit value and which is called the

50
00:01:44,159 --> 00:01:45,520
auth key

51
00:01:45,520 --> 00:01:47,439
and then the symmetric channel could be

52
00:01:47,439 --> 00:01:49,759
described as a variant of a stateful

53
00:01:49,759 --> 00:01:51,759
encrypted mac construction

54
00:01:51,759 --> 00:01:54,560
which uses aes in ige mode which i will

55
00:01:54,560 --> 00:01:57,439
get to later and as well as a heavy use

56
00:01:57,439 --> 00:02:00,000
of shutter 56

57
00:02:00,000 --> 00:02:02,640
the scheme has a few quirks and the most

58
00:02:02,640 --> 00:02:04,240
important one being

59
00:02:04,240 --> 00:02:06,320
and is that the client and server use

60
00:02:06,320 --> 00:02:08,720
different but related keys so the

61
00:02:08,720 --> 00:02:10,560
direction matters for how a message is

62
00:02:10,560 --> 00:02:12,400
encrypted

63
00:02:12,400 --> 00:02:14,720
and the symmetric channel is something

64
00:02:14,720 --> 00:02:18,080
we focused on in our work

65
00:02:19,599 --> 00:02:21,440
i will now go through it and in a bit

66
00:02:21,440 --> 00:02:23,040
more detail

67
00:02:23,040 --> 00:02:26,560
so we start um with the out key and

68
00:02:26,560 --> 00:02:29,040
a plain text payload

69
00:02:29,040 --> 00:02:31,280
the entire out key is first run through

70
00:02:31,280 --> 00:02:33,840
sha one and truncated to compute

71
00:02:33,840 --> 00:02:36,319
something called an auth key id which

72
00:02:36,319 --> 00:02:38,080
just serves as an identifier for the

73
00:02:38,080 --> 00:02:40,239
connection

74
00:02:40,239 --> 00:02:42,160
next a portion of the auth key is run

75
00:02:42,160 --> 00:02:44,000
through shutter 56 together with the

76
00:02:44,000 --> 00:02:45,040
payload

77
00:02:45,040 --> 00:02:47,920
and then the middle 128 bits

78
00:02:47,920 --> 00:02:50,000
of this output form a so-called message

79
00:02:50,000 --> 00:02:53,599
key which will also serve as a mac

80
00:02:53,599 --> 00:02:55,519
then a different portion of the out key

81
00:02:55,519 --> 00:02:58,000
is used with the message key in two more

82
00:02:58,000 --> 00:02:59,760
shatter56 calls

83
00:02:59,760 --> 00:03:01,760
which are then interleaved to produce a

84
00:03:01,760 --> 00:03:05,840
symmetric encryption key and iv

85
00:03:05,920 --> 00:03:08,080
finally this key and ib are used to

86
00:03:08,080 --> 00:03:11,040
encrypt the payload using aes256 and ige

87
00:03:11,040 --> 00:03:12,400
mode

88
00:03:12,400 --> 00:03:14,400
and so what is sent on the wire consists

89
00:03:14,400 --> 00:03:16,840
of the artkey id message key and the

90
00:03:16,840 --> 00:03:18,560
ciphertext

91
00:03:18,560 --> 00:03:20,080
and there are two things you can notice

92
00:03:20,080 --> 00:03:21,200
at this point

93
00:03:21,200 --> 00:03:22,640
first um

94
00:03:22,640 --> 00:03:25,040
that this is an encrypt and max scheme

95
00:03:25,040 --> 00:03:26,799
because the message key is sent along

96
00:03:26,799 --> 00:03:28,560
with the ciphertext and the receiver

97
00:03:28,560 --> 00:03:30,400
must decrypt first before checking the

98
00:03:30,400 --> 00:03:31,599
mac

99
00:03:31,599 --> 00:03:33,760
and the second thing is that the derived

100
00:03:33,760 --> 00:03:36,319
encryption key is message specific

101
00:03:36,319 --> 00:03:38,720
because it depends on the payload

102
00:03:38,720 --> 00:03:40,560
through the inclusion of the message key

103
00:03:40,560 --> 00:03:43,599
in the kdf

104
00:03:44,879 --> 00:03:46,560
now one thing i didn't show in detail in

105
00:03:46,560 --> 00:03:48,480
the first diagram was how the various

106
00:03:48,480 --> 00:03:50,720
slices are actually taken from the out

107
00:03:50,720 --> 00:03:53,680
key and you can see it here

108
00:03:53,680 --> 00:03:55,360
so when the client encrypts a message it

109
00:03:55,360 --> 00:03:57,120
uses keys that are mostly overlapping

110
00:03:57,120 --> 00:03:59,200
with the keys that the server uses

111
00:03:59,200 --> 00:04:02,399
but i'm not scrolling

112
00:04:05,040 --> 00:04:07,360
in terms of the plain text payload and

113
00:04:07,360 --> 00:04:09,599
this is what the format of it actually

114
00:04:09,599 --> 00:04:11,920
looks like so it has a header composed

115
00:04:11,920 --> 00:04:14,879
of 64-bit or 32-bit fields

116
00:04:14,879 --> 00:04:16,399
and here the first two fields are

117
00:04:16,399 --> 00:04:18,320
normally unchanged and changed for the

118
00:04:18,320 --> 00:04:20,560
duration of a single session where the

119
00:04:20,560 --> 00:04:22,800
server code is generated by the server

120
00:04:22,800 --> 00:04:24,560
and the session id is chosen by the

121
00:04:24,560 --> 00:04:26,160
client

122
00:04:26,160 --> 00:04:28,080
and here the message data contains the

123
00:04:28,080 --> 00:04:30,880
actual requester response which also has

124
00:04:30,880 --> 00:04:35,280
a specific format that we do not model

125
00:04:36,479 --> 00:04:39,199
to say a bit more about the ige mode

126
00:04:39,199 --> 00:04:40,880
so it stands for internet carbon

127
00:04:40,880 --> 00:04:42,800
extension and was first described by

128
00:04:42,800 --> 00:04:45,440
candle in 1978 which has since

129
00:04:45,440 --> 00:04:48,400
reappeared under different names

130
00:04:48,400 --> 00:04:50,160
as you can see from the diagram it is

131
00:04:50,160 --> 00:04:52,240
basically like cbc mode with the

132
00:04:52,240 --> 00:04:55,840
addition of also chain in the plain text

133
00:04:55,840 --> 00:04:57,360
it was supposed to have infinite error

134
00:04:57,360 --> 00:04:59,120
propagation and therefore provides

135
00:04:59,120 --> 00:05:01,360
integrity but this claim is actually not

136
00:05:01,360 --> 00:05:02,880
true

137
00:05:02,880 --> 00:05:05,120
however mt proto does not rely on this

138
00:05:05,120 --> 00:05:06,800
fact and because of the message

139
00:05:06,800 --> 00:05:09,120
dependent keys it is essentially only

140
00:05:09,120 --> 00:05:12,639
used as a one-time cipher

141
00:05:15,600 --> 00:05:16,960
i will now talk about some of the

142
00:05:16,960 --> 00:05:19,120
attacks that we found

143
00:05:19,120 --> 00:05:21,120
so first the two protocol level attacks

144
00:05:21,120 --> 00:05:22,880
exploit the way the plaintext payload

145
00:05:22,880 --> 00:05:25,520
format is validated

146
00:05:25,520 --> 00:05:27,360
first attack is about message reordering

147
00:05:27,360 --> 00:05:30,080
in the client to server direction

148
00:05:30,080 --> 00:05:31,680
this is enabled simply because the

149
00:05:31,680 --> 00:05:34,240
server does not use the information in

150
00:05:34,240 --> 00:05:36,160
the plaintext header to order incoming

151
00:05:36,160 --> 00:05:37,360
messages

152
00:05:37,360 --> 00:05:39,280
and instead only uses the order in which

153
00:05:39,280 --> 00:05:41,360
it actually receives the packets we

154
00:05:41,360 --> 00:05:44,400
confirm this in practice

155
00:05:44,400 --> 00:05:46,320
the second attack is about what happens

156
00:05:46,320 --> 00:05:48,800
when messages are lost so most messages

157
00:05:48,800 --> 00:05:50,400
in telegram require a special

158
00:05:50,400 --> 00:05:52,960
acknowledgement message however if the

159
00:05:52,960 --> 00:05:54,560
client doesn't get this acknowledgement

160
00:05:54,560 --> 00:05:57,120
within a given time it will re-encrypt

161
00:05:57,120 --> 00:05:59,919
the messages using the same header and

162
00:05:59,919 --> 00:06:02,240
fresh padding essentially making the

163
00:06:02,240 --> 00:06:04,639
stateful scheme not stateful anymore

164
00:06:04,639 --> 00:06:06,800
which enables a theoretical and cpa

165
00:06:06,800 --> 00:06:09,199
attacker

166
00:06:12,000 --> 00:06:14,080
further the two implementation attacks

167
00:06:14,080 --> 00:06:17,199
use timing side channels

168
00:06:17,199 --> 00:06:18,880
so first we found an issue in the

169
00:06:18,880 --> 00:06:20,800
processing of a receipt ciphertext in

170
00:06:20,800 --> 00:06:23,120
various official clients which enables

171
00:06:23,120 --> 00:06:25,759
partial plaintext recovery

172
00:06:25,759 --> 00:06:27,440
this was due to the message language

173
00:06:27,440 --> 00:06:29,600
field which has certain constraints on

174
00:06:29,600 --> 00:06:31,360
it and these were checked before the mac

175
00:06:31,360 --> 00:06:33,280
in the message key was checked

176
00:06:33,280 --> 00:06:35,440
in both cases telegram returned the same

177
00:06:35,440 --> 00:06:37,360
error but there was a time difference

178
00:06:37,360 --> 00:06:39,039
because the message length check

179
00:06:39,039 --> 00:06:41,759
returned early on failure

180
00:06:41,759 --> 00:06:43,440
this attack is similar to existing

181
00:06:43,440 --> 00:06:46,000
plaintext recovery attacks on ssh

182
00:06:46,000 --> 00:06:47,680
where the idea is to move a target

183
00:06:47,680 --> 00:06:50,080
ciphertext block to a position where the

184
00:06:50,080 --> 00:06:52,319
underlying plaintext will be interpreted

185
00:06:52,319 --> 00:06:54,479
as a length field and then use the

186
00:06:54,479 --> 00:06:56,319
resulting behavior to learn something

187
00:06:56,319 --> 00:06:58,960
about the target

188
00:06:58,960 --> 00:07:01,120
now with ige this is complicated

189
00:07:01,120 --> 00:07:02,880
slightly but we can still recover

190
00:07:02,880 --> 00:07:06,400
between 8 to 32 bits of 128 bit

191
00:07:06,400 --> 00:07:08,560
plaintext block assuming knowledge of

192
00:07:08,560 --> 00:07:11,919
two other plain textbooks

193
00:07:15,120 --> 00:07:16,880
now since

194
00:07:16,880 --> 00:07:18,960
one of the known plain text blocks must

195
00:07:18,960 --> 00:07:20,479
be the first book

196
00:07:20,479 --> 00:07:23,280
and we focus on recovering this um as

197
00:07:23,280 --> 00:07:25,280
part of the second attack

198
00:07:25,280 --> 00:07:26,960
and this is actually an attack on the

199
00:07:26,960 --> 00:07:29,440
server during key exchange because the

200
00:07:29,440 --> 00:07:31,440
initial server result value comes from a

201
00:07:31,440 --> 00:07:33,360
secret nonce that the client sends to

202
00:07:33,360 --> 00:07:34,479
the server

203
00:07:34,479 --> 00:07:36,720
and this node is encrypted using rsa and

204
00:07:36,720 --> 00:07:39,919
a custom adding format

205
00:07:39,919 --> 00:07:41,520
so it turns out that these nodes can be

206
00:07:41,520 --> 00:07:43,360
recovered using black and white style

207
00:07:43,360 --> 00:07:45,759
queries and lattice reduction

208
00:07:45,759 --> 00:07:48,000
and as an added bonus recovering these

209
00:07:48,000 --> 00:07:49,840
nouns also gives you an instrument on

210
00:07:49,840 --> 00:07:51,199
the key exchange

211
00:07:51,199 --> 00:07:53,039
but it must be executed within a very

212
00:07:53,039 --> 00:07:56,360
short time

213
00:08:00,800 --> 00:08:02,639
to speak about um the responsible

214
00:08:02,639 --> 00:08:04,720
disclosure process so we disclosed the

215
00:08:04,720 --> 00:08:06,639
results of our analysis to the telegram

216
00:08:06,639 --> 00:08:09,680
developers in april of last year which

217
00:08:09,680 --> 00:08:12,319
they acknowledged in june and we agreed

218
00:08:12,319 --> 00:08:14,240
to a public disclosure date in july

219
00:08:14,240 --> 00:08:15,919
which was 90 days after the initial

220
00:08:15,919 --> 00:08:17,520
disclosure

221
00:08:17,520 --> 00:08:19,520
they also awarded a back bounty for the

222
00:08:19,520 --> 00:08:21,759
timing side channel and for the overall

223
00:08:21,759 --> 00:08:23,680
analysis

224
00:08:23,680 --> 00:08:25,759
during this process we were informed

225
00:08:25,759 --> 00:08:28,000
that they do not do security or bug fix

226
00:08:28,000 --> 00:08:30,479
releases except for immediate post

227
00:08:30,479 --> 00:08:32,399
release crash fixes so the

228
00:08:32,399 --> 00:08:34,320
vulnerabilities that we reported were

229
00:08:34,320 --> 00:08:36,640
addressed only as part of regular

230
00:08:36,640 --> 00:08:38,000
updates

231
00:08:38,000 --> 00:08:40,479
in the versions that include these fixes

232
00:08:40,479 --> 00:08:43,760
are shown on the slide

233
00:08:48,080 --> 00:08:50,560
so and now i can talk about the formal

234
00:08:50,560 --> 00:08:52,959
modeling part of our work

235
00:08:52,959 --> 00:08:54,959
and we use stateful bi-directional

236
00:08:54,959 --> 00:08:55,920
channels

237
00:08:55,920 --> 00:08:57,920
and which is an extension of the robust

238
00:08:57,920 --> 00:08:59,920
channel framework of fishlink until

239
00:08:59,920 --> 00:09:01,360
nyanson

240
00:09:01,360 --> 00:09:02,880
one of the reasons why we need a new

241
00:09:02,880 --> 00:09:04,800
model is the bi-directionality of the

242
00:09:04,800 --> 00:09:06,800
channel because we wanted to capture

243
00:09:06,800 --> 00:09:09,839
exactly how the related keys are used

244
00:09:09,839 --> 00:09:12,000
we also define a new notion of a support

245
00:09:12,000 --> 00:09:14,320
function which we use in our definitions

246
00:09:14,320 --> 00:09:16,000
extending the support predicate from

247
00:09:16,000 --> 00:09:17,519
previous work

248
00:09:17,519 --> 00:09:19,279
and so this function determines not just

249
00:09:19,279 --> 00:09:22,080
whether a party should accept or reject

250
00:09:22,080 --> 00:09:24,320
an incoming cipher text based on the

251
00:09:24,320 --> 00:09:26,959
current transcript of the conversation

252
00:09:26,959 --> 00:09:28,480
but it also actually returns the

253
00:09:28,480 --> 00:09:30,560
corresponding plain text

254
00:09:30,560 --> 00:09:31,360
and

255
00:09:31,360 --> 00:09:33,519
this formalization allows us to specify

256
00:09:33,519 --> 00:09:35,440
that the channel should prevent

257
00:09:35,440 --> 00:09:37,519
forgeries replays reorganizing and

258
00:09:37,519 --> 00:09:40,000
emissions

259
00:09:40,080 --> 00:09:42,000
we provide team-based definitions for

260
00:09:42,000 --> 00:09:44,800
distinguishability and integrity

261
00:09:44,800 --> 00:09:46,640
and in our model the adversary controls

262
00:09:46,640 --> 00:09:50,320
the randomness used for encryption

263
00:09:50,320 --> 00:09:52,480
so using this um framework we provide a

264
00:09:52,480 --> 00:09:54,959
formal definition of the empty proto 2.0

265
00:09:54,959 --> 00:09:56,560
channel

266
00:09:56,560 --> 00:09:58,480
however it should be noted that it is in

267
00:09:58,480 --> 00:10:00,880
general impossible to have a single

268
00:10:00,880 --> 00:10:03,040
specification that would capture the

269
00:10:03,040 --> 00:10:04,959
behavior of all official telegram

270
00:10:04,959 --> 00:10:08,079
clients because they diverge for example

271
00:10:08,079 --> 00:10:10,240
in how they do message encoding

272
00:10:10,240 --> 00:10:12,079
so our model in some sense represents

273
00:10:12,079 --> 00:10:16,359
the common core of the protocol

274
00:10:18,320 --> 00:10:20,480
and for the proof we require a number of

275
00:10:20,480 --> 00:10:21,680
assumptions

276
00:10:21,680 --> 00:10:24,000
so first some standard assumptions

277
00:10:24,000 --> 00:10:25,920
and we require the collision resistance

278
00:10:25,920 --> 00:10:29,760
of shadow 56 with truncated output

279
00:10:29,760 --> 00:10:33,120
the one time in cpa security of cbc mod

280
00:10:33,120 --> 00:10:35,600
because the security of ige reduces to

281
00:10:35,600 --> 00:10:36,880
this

282
00:10:36,880 --> 00:10:40,720
and one time prf security of shackle one

283
00:10:40,720 --> 00:10:42,880
which is the block cipher underlying

284
00:10:42,880 --> 00:10:44,399
shawn

285
00:10:44,399 --> 00:10:46,880
and finally one-time prf security of the

286
00:10:46,880 --> 00:10:51,040
compression function and of charge 56

287
00:10:51,040 --> 00:10:52,800
however we also require a number of

288
00:10:52,800 --> 00:10:54,800
non-standard assumptions

289
00:10:54,800 --> 00:10:56,959
and these mainly refer to shackle 2

290
00:10:56,959 --> 00:10:59,360
behaving as a prf in a variety of

291
00:10:59,360 --> 00:11:02,079
variety of modes that include related

292
00:11:02,079 --> 00:11:03,760
keys and some key leakage to the

293
00:11:03,760 --> 00:11:06,160
adversary sm i will show in a bit more

294
00:11:06,160 --> 00:11:08,880
detail next

295
00:11:11,519 --> 00:11:14,399
so we require that shackle 2 is a

296
00:11:14,399 --> 00:11:17,279
leakage resilient prf for fixed inputs

297
00:11:17,279 --> 00:11:19,360
under related keys

298
00:11:19,360 --> 00:11:21,360
and to unpack this a bit more this is

299
00:11:21,360 --> 00:11:23,760
actually two assumptions for different

300
00:11:23,760 --> 00:11:26,079
kinds of leakage one of which is shown

301
00:11:26,079 --> 00:11:27,279
below

302
00:11:27,279 --> 00:11:29,760
and some things to notice here are

303
00:11:29,760 --> 00:11:32,720
um firstly the related keys so this is

304
00:11:32,720 --> 00:11:34,399
quite different from the usual setting

305
00:11:34,399 --> 00:11:36,480
in the related key literature

306
00:11:36,480 --> 00:11:38,640
where related keys tends to mean keys

307
00:11:38,640 --> 00:11:41,360
with a known difference between them

308
00:11:41,360 --> 00:11:43,279
however here the parts where the keys

309
00:11:43,279 --> 00:11:46,560
differ are actually random

310
00:11:46,560 --> 00:11:48,320
the next thing is that um half of the

311
00:11:48,320 --> 00:11:50,000
secret key is actually specified by the

312
00:11:50,000 --> 00:11:51,920
adversary

313
00:11:51,920 --> 00:11:54,240
and these are the two parts that differ

314
00:11:54,240 --> 00:11:55,760
between the two assumptions in the

315
00:11:55,760 --> 00:11:58,240
details because they are parameterized

316
00:11:58,240 --> 00:12:00,560
by different functions that derive the

317
00:12:00,560 --> 00:12:04,320
actual related keys both for the mac and

318
00:12:04,320 --> 00:12:07,040
for the kdf

319
00:12:07,040 --> 00:12:08,959
and this last part is common to the two

320
00:12:08,959 --> 00:12:11,279
assumptions so for both of them the

321
00:12:11,279 --> 00:12:14,079
input for the cipher is known and fixed

322
00:12:14,079 --> 00:12:15,680
and this is just the initial state of

323
00:12:15,680 --> 00:12:20,160
shutter 56 here shown as iv

324
00:12:22,839 --> 00:12:25,839
256. now i can summarize um the final

325
00:12:25,839 --> 00:12:27,920
results that we actually proved

326
00:12:27,920 --> 00:12:30,320
um so first

327
00:12:30,320 --> 00:12:31,920
the main thing as you can see is that

328
00:12:31,920 --> 00:12:33,880
aside from standard assumptions

329
00:12:33,880 --> 00:12:36,000
indistinguishability depends on whether

330
00:12:36,000 --> 00:12:38,240
chakra 1 and checkout can be considered

331
00:12:38,240 --> 00:12:40,560
as prfs in various modes

332
00:12:40,560 --> 00:12:43,920
some of which are highly unstandard

333
00:12:43,920 --> 00:12:45,839
and in this result the limiting term is

334
00:12:45,839 --> 00:12:47,920
this one so we can only prove security

335
00:12:47,920 --> 00:12:50,399
after 2-64 queries

336
00:12:50,399 --> 00:12:52,240
this is the result of the birthday bound

337
00:12:52,240 --> 00:12:53,360
on the mic

338
00:12:53,360 --> 00:12:55,279
and may not be tight however since we

339
00:12:55,279 --> 00:12:56,880
didn't manage to find the corresponding

340
00:12:56,880 --> 00:12:59,200
attack

341
00:13:00,880 --> 00:13:02,639
the integrity result is a bit simpler

342
00:13:02,639 --> 00:13:04,560
but follows a similar pattern

343
00:13:04,560 --> 00:13:06,160
it depends on check out one and check

344
00:13:06,160 --> 00:13:08,399
out two behaving like prfs and on

345
00:13:08,399 --> 00:13:11,279
collision resistance of shutter 56

346
00:13:11,279 --> 00:13:13,920
and the same limiting term appears again

347
00:13:13,920 --> 00:13:15,600
this time it's because of the plain text

348
00:13:15,600 --> 00:13:17,760
payload format because the client and

349
00:13:17,760 --> 00:13:19,600
server consistently only check the

350
00:13:19,600 --> 00:13:22,320
64-bit session id and this band would be

351
00:13:22,320 --> 00:13:24,160
easy to improve if telegram made more

352
00:13:24,160 --> 00:13:26,880
changes to their protocol

353
00:13:26,880 --> 00:13:28,399
the final thing to note is that this

354
00:13:28,399 --> 00:13:30,399
definition is with respect to a

355
00:13:30,399 --> 00:13:32,639
particular support function which we

356
00:13:32,639 --> 00:13:35,279
defined to mandate in order delivery of

357
00:13:35,279 --> 00:13:37,839
messages

358
00:13:40,240 --> 00:13:42,160
so to conclude we gave the first

359
00:13:42,160 --> 00:13:43,920
comprehensive study of the symmetric

360
00:13:43,920 --> 00:13:46,639
channels underlying telegram cloud jets

361
00:13:46,639 --> 00:13:48,240
and if you would like to read more you

362
00:13:48,240 --> 00:13:50,079
can check out the full paper and at the

363
00:13:50,079 --> 00:13:51,760
link on the slide

364
00:13:51,760 --> 00:13:55,399
thank you for your attention

365
00:14:02,959 --> 00:14:05,360
awesome uh thank you for the awesome uh

366
00:14:05,360 --> 00:14:09,199
presentation so lanca can you hear us

367
00:14:09,199 --> 00:14:11,760
yes i can hear you awesome thank you so

368
00:14:11,760 --> 00:14:13,920
uh let's see if we have any uh questions

369
00:14:13,920 --> 00:14:15,839
from the audience

370
00:14:15,839 --> 00:14:17,760
whether you're online or virtual or

371
00:14:17,760 --> 00:14:20,560
whether you're online or on site

372
00:14:20,560 --> 00:14:22,560
anyone

373
00:14:22,560 --> 00:14:25,040
this is a great opportunity

374
00:14:25,040 --> 00:14:26,880
no one wants to seize the chance okay so

375
00:14:26,880 --> 00:14:29,600
i'll start with with my question so i

376
00:14:29,600 --> 00:14:31,199
think this is very impressive work uh

377
00:14:31,199 --> 00:14:34,319
one question that i have

378
00:14:34,959 --> 00:14:36,399
hey um

379
00:14:36,399 --> 00:14:38,639
so for some reason the online

380
00:14:38,639 --> 00:14:40,399
the online access has been has been cut

381
00:14:40,399 --> 00:14:42,480
off but i was told that we had five more

382
00:14:42,480 --> 00:14:44,480
minutes okay it's back

383
00:14:44,480 --> 00:14:45,760
so um

384
00:14:45,760 --> 00:14:47,199
yeah this is a very impressive work uh

385
00:14:47,199 --> 00:14:49,199
we all know that telegram is extremely

386
00:14:49,199 --> 00:14:51,199
popular right then it's and is uh you

387
00:14:51,199 --> 00:14:53,519
know increasingly used by those um you

388
00:14:53,519 --> 00:14:56,880
know high risk user base so i wonder why

389
00:14:56,880 --> 00:14:59,680
it took so long for research on the

390
00:14:59,680 --> 00:15:01,680
security on the formal security of the

391
00:15:01,680 --> 00:15:04,079
telegram protocol to appear

392
00:15:04,079 --> 00:15:05,440
so let's say you know in the future if

393
00:15:05,440 --> 00:15:07,360
someone if some other

394
00:15:07,360 --> 00:15:09,120
i am companies are going to develop

395
00:15:09,120 --> 00:15:11,040
another you know secure supposedly

396
00:15:11,040 --> 00:15:13,360
secure protocol uh what are the things

397
00:15:13,360 --> 00:15:15,199
that they could done right they could do

398
00:15:15,199 --> 00:15:18,639
right to make it easier for such formal

399
00:15:18,639 --> 00:15:21,680
analysis to appear

400
00:15:21,760 --> 00:15:23,680
yeah so thank you and that's a good

401
00:15:23,680 --> 00:15:26,079
question there's several things that can

402
00:15:26,079 --> 00:15:28,320
be done like one of the major obstacles

403
00:15:28,320 --> 00:15:30,000
in this analysis was

404
00:15:30,000 --> 00:15:30,880
um

405
00:15:30,880 --> 00:15:33,839
the fact that um the protocol is very

406
00:15:33,839 --> 00:15:35,680
complex in the sense that

407
00:15:35,680 --> 00:15:38,320
the crypto part of it um is very

408
00:15:38,320 --> 00:15:40,800
interleaved with the application level

409
00:15:40,800 --> 00:15:42,560
so that when we tried to extract some

410
00:15:42,560 --> 00:15:45,279
kind of specification from the from the

411
00:15:45,279 --> 00:15:48,000
code and this was not an easy task to do

412
00:15:48,000 --> 00:15:50,880
so kind of a separation between

413
00:15:50,880 --> 00:15:52,639
the levels is

414
00:15:52,639 --> 00:15:54,399
one of the basic things

415
00:15:54,399 --> 00:15:56,399
and um yeah

416
00:15:56,399 --> 00:15:58,079
i could also go on and on but i'm aware

417
00:15:58,079 --> 00:16:00,480
that we have a very limited time

418
00:16:00,480 --> 00:16:02,320
awesome thank you

419
00:16:02,320 --> 00:16:05,199
questions questions if not i can ask i

420
00:16:05,199 --> 00:16:07,440
can ask my next question

421
00:16:07,440 --> 00:16:09,199
so

422
00:16:09,199 --> 00:16:10,959
i think your analysis is pretty

423
00:16:10,959 --> 00:16:13,839
impressive then uh you know what's next

424
00:16:13,839 --> 00:16:16,000
do you have any future plans for uh you

425
00:16:16,000 --> 00:16:17,759
know research either on the security of

426
00:16:17,759 --> 00:16:19,279
the telegram protocol or on the

427
00:16:19,279 --> 00:16:22,160
protocols for other things

428
00:16:22,160 --> 00:16:24,240
so i think on the telegram side there's

429
00:16:24,240 --> 00:16:26,399
still a potential for future work

430
00:16:26,399 --> 00:16:28,240
because we focused mainly on the

431
00:16:28,240 --> 00:16:29,839
symmetric um

432
00:16:29,839 --> 00:16:31,360
side of things so

433
00:16:31,360 --> 00:16:33,360
a formal model of the key exchange would

434
00:16:33,360 --> 00:16:35,279
be an obvious next step

435
00:16:35,279 --> 00:16:37,519
and in that direction also because our

436
00:16:37,519 --> 00:16:39,600
work concludes with um

437
00:16:39,600 --> 00:16:41,600
the fact that we depend upon some

438
00:16:41,600 --> 00:16:43,759
unstudied assumptions on the shadow 56

439
00:16:43,759 --> 00:16:44,959
that's also

440
00:16:44,959 --> 00:16:47,839
an opportunity for um study more on the

441
00:16:47,839 --> 00:16:49,600
symmetric cryptanalysis side on whether

442
00:16:49,600 --> 00:16:50,959
these assumptions actually hold up

443
00:16:50,959 --> 00:16:53,680
descriptively

444
00:16:53,680 --> 00:16:55,839
awesome uh thank you very much lenka so

445
00:16:55,839 --> 00:16:57,759
i do not see any more questions whether

446
00:16:57,759 --> 00:17:00,079
that's onsite or virtual so i would uh

447
00:17:00,079 --> 00:17:01,920
you know again congratulate you for

448
00:17:01,920 --> 00:17:03,759
getting one of the best paper awards at

449
00:17:03,759 --> 00:17:07,760
oakland 2022 so

