1
00:00:02,000 --> 00:00:04,160
thank you very much

2
00:00:04,160 --> 00:00:06,960
so my name is tyson ada and i will be

3
00:00:06,960 --> 00:00:09,440
presenting deep case semi-supervised

4
00:00:09,440 --> 00:00:12,559
contextual analysis of security events

5
00:00:12,559 --> 00:00:14,639
and this is a work that i

6
00:00:14,639 --> 00:00:15,839
performed together with all of these

7
00:00:15,839 --> 00:00:17,920
wonderful people

8
00:00:17,920 --> 00:00:20,400
who are also in the room today

9
00:00:20,400 --> 00:00:23,439
so let's first talk about what we did in

10
00:00:23,439 --> 00:00:25,199
our paper

11
00:00:25,199 --> 00:00:28,320
so the goal of deep case was to reduce

12
00:00:28,320 --> 00:00:31,599
the workload of operators in a security

13
00:00:31,599 --> 00:00:35,280
operation center or sock for sure

14
00:00:35,280 --> 00:00:37,360
and to understand what we did let me

15
00:00:37,360 --> 00:00:39,200
first give a little bit of background of

16
00:00:39,200 --> 00:00:41,440
how a sock operates

17
00:00:41,440 --> 00:00:43,360
so the idea of a sock

18
00:00:43,360 --> 00:00:44,719
is that

19
00:00:44,719 --> 00:00:47,360
they monitor several devices

20
00:00:47,360 --> 00:00:50,000
for malicious malicious

21
00:00:50,000 --> 00:00:52,160
behavior

22
00:00:52,160 --> 00:00:54,640
and they do this by collecting activity

23
00:00:54,640 --> 00:00:57,600
from these devices which they then run

24
00:00:57,600 --> 00:00:59,680
through an intrusion detection system

25
00:00:59,680 --> 00:01:01,440
for example

26
00:01:01,440 --> 00:01:03,680
and these systems look for suspicious

27
00:01:03,680 --> 00:01:04,799
patterns

28
00:01:04,799 --> 00:01:07,280
and once such pattern is found

29
00:01:07,280 --> 00:01:10,000
they will create a security event

30
00:01:10,000 --> 00:01:12,240
which is then subsequently sent to the

31
00:01:12,240 --> 00:01:14,960
security operations center

32
00:01:14,960 --> 00:01:17,520
now at this center we have a security

33
00:01:17,520 --> 00:01:18,799
operator

34
00:01:18,799 --> 00:01:23,119
who initially triages the security event

35
00:01:23,119 --> 00:01:24,560
and this means

36
00:01:24,560 --> 00:01:27,200
that he or she basically decides whether

37
00:01:27,200 --> 00:01:30,479
this event is actually malicious or not

38
00:01:30,479 --> 00:01:33,360
if it's not malicious it gets discarded

39
00:01:33,360 --> 00:01:36,960
if it is malicious it gets escalated to

40
00:01:36,960 --> 00:01:40,000
an expert who tries to get rid of the

41
00:01:40,000 --> 00:01:43,119
the security attack

42
00:01:43,280 --> 00:01:46,640
and the idea of our work is to automate

43
00:01:46,640 --> 00:01:49,360
this triaging step

44
00:01:49,360 --> 00:01:51,360
and thereby reduce the workload of the

45
00:01:51,360 --> 00:01:53,759
security operator

46
00:01:53,759 --> 00:01:56,159
now the key thing to

47
00:01:56,159 --> 00:01:58,159
behind our work is the following

48
00:01:58,159 --> 00:01:59,759
intuition

49
00:01:59,759 --> 00:02:01,439
suppose that we look at one of these

50
00:02:01,439 --> 00:02:03,360
security events

51
00:02:03,360 --> 00:02:05,840
if we look at the single event it may

52
00:02:05,840 --> 00:02:08,399
not tell us a whole lot about what is

53
00:02:08,399 --> 00:02:10,560
going on

54
00:02:10,560 --> 00:02:13,120
but looking at the other security events

55
00:02:13,120 --> 00:02:15,280
surrounding it it might tell us a little

56
00:02:15,280 --> 00:02:17,120
bit more about what is going on on the

57
00:02:17,120 --> 00:02:20,480
system and this helps us to

58
00:02:20,480 --> 00:02:23,680
basically automatically triage

59
00:02:23,680 --> 00:02:25,120
so let me illustrate this with an

60
00:02:25,120 --> 00:02:26,400
example

61
00:02:26,400 --> 00:02:28,160
suppose that we have a device that is

62
00:02:28,160 --> 00:02:30,480
being monitored

63
00:02:30,480 --> 00:02:32,560
and suppose that we find some beaconing

64
00:02:32,560 --> 00:02:34,879
activity on that device

65
00:02:34,879 --> 00:02:37,040
now this can mean a couple of things it

66
00:02:37,040 --> 00:02:39,280
could for example be a malware that

67
00:02:39,280 --> 00:02:41,040
tries to phone home

68
00:02:41,040 --> 00:02:44,239
contact its command and control center

69
00:02:44,239 --> 00:02:47,120
or it could be a benign application that

70
00:02:47,120 --> 00:02:49,040
is simply checking periodically for

71
00:02:49,040 --> 00:02:50,480
updates

72
00:02:50,480 --> 00:02:53,360
now by just looking at this

73
00:02:53,360 --> 00:02:55,840
event by itself it might be difficult to

74
00:02:55,840 --> 00:02:58,239
determine what is going on here

75
00:02:58,239 --> 00:03:00,560
so what we do instead is look at the

76
00:03:00,560 --> 00:03:02,640
context around it

77
00:03:02,640 --> 00:03:05,519
so suppose that we

78
00:03:05,519 --> 00:03:08,400
initially find some weird network

79
00:03:08,400 --> 00:03:09,440
behavior

80
00:03:09,440 --> 00:03:11,200
accessing for example a recently

81
00:03:11,200 --> 00:03:13,519
registered domain

82
00:03:13,519 --> 00:03:16,000
and suppose that after that we found

83
00:03:16,000 --> 00:03:17,760
that there's some data being downloaded

84
00:03:17,760 --> 00:03:20,319
with triggers and alert

85
00:03:20,319 --> 00:03:22,480
and later we find the packed executable

86
00:03:22,480 --> 00:03:24,159
on the device

87
00:03:24,159 --> 00:03:27,200
and then we find the beaconing activity

88
00:03:27,200 --> 00:03:30,480
looking at the event in this context

89
00:03:30,480 --> 00:03:32,239
it becomes clear that this is more

90
00:03:32,239 --> 00:03:34,560
likely a malware that is trying to phone

91
00:03:34,560 --> 00:03:35,360
home

92
00:03:35,360 --> 00:03:37,280
because we looked at the context around

93
00:03:37,280 --> 00:03:38,799
it

94
00:03:38,799 --> 00:03:41,360
and we tried to use this key insight

95
00:03:41,360 --> 00:03:43,920
into our automated tool

96
00:03:43,920 --> 00:03:46,239
called deep case

97
00:03:46,239 --> 00:03:48,239
and the idea behind deep case is fairly

98
00:03:48,239 --> 00:03:50,959
straightforward

99
00:03:50,959 --> 00:03:53,760
we ask a security operator to look at a

100
00:03:53,760 --> 00:03:56,560
couple of these security events and

101
00:03:56,560 --> 00:03:57,840
triage them

102
00:03:57,840 --> 00:04:00,080
within this context saying can we

103
00:04:00,080 --> 00:04:03,360
discard this or should we escalate

104
00:04:03,360 --> 00:04:05,760
and once we train once we let the

105
00:04:05,760 --> 00:04:07,680
security operator

106
00:04:07,680 --> 00:04:10,239
look at a couple of these events

107
00:04:10,239 --> 00:04:12,640
we can store them in a database

108
00:04:12,640 --> 00:04:15,280
and later when we find a similar event

109
00:04:15,280 --> 00:04:17,358
in a similar context

110
00:04:17,358 --> 00:04:19,680
we can simply copy the decision to

111
00:04:19,680 --> 00:04:22,639
either discard or escalate

112
00:04:22,639 --> 00:04:25,440
and in case we have some new event in a

113
00:04:25,440 --> 00:04:28,080
new context we simply ask the operator

114
00:04:28,080 --> 00:04:30,240
again

115
00:04:30,240 --> 00:04:33,280
now to automate this process we of

116
00:04:33,280 --> 00:04:36,639
course need to find a way to define when

117
00:04:36,639 --> 00:04:38,960
an event is similar so when an event and

118
00:04:38,960 --> 00:04:42,000
its corresponding context are similar

119
00:04:42,000 --> 00:04:43,600
and we do this

120
00:04:43,600 --> 00:04:46,080
in our interpreter so we basically make

121
00:04:46,080 --> 00:04:47,520
the decision of whether something is

122
00:04:47,520 --> 00:04:49,919
similar or not

123
00:04:49,919 --> 00:04:53,280
however this is not very straightforward

124
00:04:53,280 --> 00:04:55,919
because if we are looking at an event in

125
00:04:55,919 --> 00:04:57,759
a specific context

126
00:04:57,759 --> 00:05:00,639
not every contextual security event may

127
00:05:00,639 --> 00:05:02,320
be related

128
00:05:02,320 --> 00:05:04,479
so there can be some irrelevant

129
00:05:04,479 --> 00:05:06,560
events because there are other programs

130
00:05:06,560 --> 00:05:08,320
running on a system or because there are

131
00:05:08,320 --> 00:05:10,560
false positives for example

132
00:05:10,560 --> 00:05:12,720
so we need to get rid of those and we do

133
00:05:12,720 --> 00:05:15,039
this in our context builder which i will

134
00:05:15,039 --> 00:05:18,160
explain in more detail later on

135
00:05:18,160 --> 00:05:20,240
but before we can go there we of course

136
00:05:20,240 --> 00:05:22,160
need to collect all of these events from

137
00:05:22,160 --> 00:05:25,199
the different systems so let me go

138
00:05:25,199 --> 00:05:27,840
briefly into some more details about our

139
00:05:27,840 --> 00:05:30,720
deep case approach

140
00:05:30,720 --> 00:05:32,400
so initially we

141
00:05:32,400 --> 00:05:34,560
collect all of the security events

142
00:05:34,560 --> 00:05:36,880
generated on a device and we sort them

143
00:05:36,880 --> 00:05:39,360
by time

144
00:05:39,360 --> 00:05:42,479
next when we want to inspect an event

145
00:05:42,479 --> 00:05:44,960
we create some sort of sliding window

146
00:05:44,960 --> 00:05:47,199
across this stream of events

147
00:05:47,199 --> 00:05:49,280
where we have the event that we want to

148
00:05:49,280 --> 00:05:50,240
inspect

149
00:05:50,240 --> 00:05:52,639
and the context which consists of all of

150
00:05:52,639 --> 00:05:56,720
the security events that happened before

151
00:05:56,720 --> 00:05:58,479
and we referred to this entire thing as

152
00:05:58,479 --> 00:06:00,479
our event sequence

153
00:06:00,479 --> 00:06:02,400
and in our work

154
00:06:02,400 --> 00:06:05,840
we had a context of 10 sequence before

155
00:06:05,840 --> 00:06:07,680
our actual event

156
00:06:07,680 --> 00:06:11,360
with a maximum time of one day

157
00:06:11,360 --> 00:06:13,600
and we use this context

158
00:06:13,600 --> 00:06:15,120
but as you can see some of the

159
00:06:15,120 --> 00:06:17,360
contextual events might be related some

160
00:06:17,360 --> 00:06:19,280
of them might be irrelevant for what we

161
00:06:19,280 --> 00:06:20,800
want to do

162
00:06:20,800 --> 00:06:21,600
so

163
00:06:21,600 --> 00:06:23,840
we want to deal with these irrelevant

164
00:06:23,840 --> 00:06:26,400
contextual events

165
00:06:26,400 --> 00:06:30,160
and the way we do that is as follows

166
00:06:30,160 --> 00:06:32,240
suppose that we have some sort of

167
00:06:32,240 --> 00:06:33,440
algorithm

168
00:06:33,440 --> 00:06:36,240
that takes into as an input the the

169
00:06:36,240 --> 00:06:38,639
context so the events that happened

170
00:06:38,639 --> 00:06:39,759
before

171
00:06:39,759 --> 00:06:41,919
and we try to predict what will happen

172
00:06:41,919 --> 00:06:44,160
next

173
00:06:44,160 --> 00:06:46,000
now remember that we already know what

174
00:06:46,000 --> 00:06:47,680
happened next

175
00:06:47,680 --> 00:06:50,560
so what we can do is we can check

176
00:06:50,560 --> 00:06:52,960
is this prediction correct

177
00:06:52,960 --> 00:06:54,479
and if so

178
00:06:54,479 --> 00:06:55,199
we

179
00:06:55,199 --> 00:06:57,680
open up our blackbox algorithm

180
00:06:57,680 --> 00:07:00,400
and we try to see what the events were

181
00:07:00,400 --> 00:07:03,039
that it focused on to produce this

182
00:07:03,039 --> 00:07:05,039
prediction

183
00:07:05,039 --> 00:07:07,440
and these events are very likely

184
00:07:07,440 --> 00:07:10,720
correlated and therefore relevant

185
00:07:10,720 --> 00:07:14,080
for the event that we are looking at

186
00:07:14,080 --> 00:07:17,360
now we did this using a neural network

187
00:07:17,360 --> 00:07:19,440
and a specific architecture called an

188
00:07:19,440 --> 00:07:23,120
attention-based encoder decoder model

189
00:07:23,120 --> 00:07:24,720
and on a high level

190
00:07:24,720 --> 00:07:25,759
this

191
00:07:25,759 --> 00:07:28,639
architecture basically encodes the

192
00:07:28,639 --> 00:07:32,639
context into an internal representation

193
00:07:32,639 --> 00:07:33,360
it

194
00:07:33,360 --> 00:07:35,680
decodes its output

195
00:07:35,680 --> 00:07:38,880
into a prediction of the next event

196
00:07:38,880 --> 00:07:41,840
and it uses the attention to basically

197
00:07:41,840 --> 00:07:44,960
select which events within the context

198
00:07:44,960 --> 00:07:48,000
were important for the prediction

199
00:07:48,000 --> 00:07:50,000
and what is important to know here is

200
00:07:50,000 --> 00:07:52,240
that this attention is automatically

201
00:07:52,240 --> 00:07:54,879
learned so by just so showing this model

202
00:07:54,879 --> 00:07:56,720
a lot of examples

203
00:07:56,720 --> 00:07:59,440
it automatically learns which events are

204
00:07:59,440 --> 00:08:00,560
important

205
00:08:00,560 --> 00:08:02,960
to perform the prediction and therefore

206
00:08:02,960 --> 00:08:06,960
which events are actually correlated

207
00:08:07,919 --> 00:08:11,680
now once we have looked at this

208
00:08:11,680 --> 00:08:14,160
this attention we simply

209
00:08:14,160 --> 00:08:16,240
aggregate all of the values that we got

210
00:08:16,240 --> 00:08:18,240
from this attention to create what is

211
00:08:18,240 --> 00:08:20,479
called an attention vector

212
00:08:20,479 --> 00:08:23,440
and we use this attention vector

213
00:08:23,440 --> 00:08:26,240
to group together similar types of

214
00:08:26,240 --> 00:08:29,759
events that happen in a similar context

215
00:08:29,759 --> 00:08:32,958
and we do this in the interpreter

216
00:08:32,958 --> 00:08:35,760
the interpreter basically asks the

217
00:08:35,760 --> 00:08:38,000
question when are event sequences

218
00:08:38,000 --> 00:08:39,360
similar

219
00:08:39,360 --> 00:08:40,479
and remember

220
00:08:40,479 --> 00:08:42,479
they are similar if we have an event

221
00:08:42,479 --> 00:08:44,880
that happens in the same context so with

222
00:08:44,880 --> 00:08:47,279
similar types of events

223
00:08:47,279 --> 00:08:49,040
and we can measure this using the

224
00:08:49,040 --> 00:08:51,120
attention vector that we obtained from

225
00:08:51,120 --> 00:08:54,399
the previous step

226
00:08:54,399 --> 00:08:57,600
now to uh see which event sequences are

227
00:08:57,600 --> 00:08:58,720
similar

228
00:08:58,720 --> 00:09:01,920
we compute the manhattan distance

229
00:09:01,920 --> 00:09:05,040
and by between two different uh points

230
00:09:05,040 --> 00:09:07,440
and by doing this across all points

231
00:09:07,440 --> 00:09:10,480
we can cluster together similar events

232
00:09:10,480 --> 00:09:12,959
that happened in a similar context

233
00:09:12,959 --> 00:09:15,360
so in this picture every cluster that

234
00:09:15,360 --> 00:09:17,839
you see represents an event that

235
00:09:17,839 --> 00:09:21,800
happened in a similar context

236
00:09:22,320 --> 00:09:24,560
now that we have these clusters

237
00:09:24,560 --> 00:09:27,040
we can ask a security operator

238
00:09:27,040 --> 00:09:29,760
to triage some of them

239
00:09:29,760 --> 00:09:32,080
now normally the security operator would

240
00:09:32,080 --> 00:09:34,399
have to triage all of these different

241
00:09:34,399 --> 00:09:37,680
events and their context individually

242
00:09:37,680 --> 00:09:39,360
but in our approach

243
00:09:39,360 --> 00:09:41,920
we simply ask the security operator to

244
00:09:41,920 --> 00:09:44,240
sample a few of these events in their

245
00:09:44,240 --> 00:09:45,360
context

246
00:09:45,360 --> 00:09:48,480
and perform the triage

247
00:09:48,480 --> 00:09:49,680
and then decide whether we should

248
00:09:49,680 --> 00:09:53,200
discard or escalate the alerts

249
00:09:53,200 --> 00:09:55,600
now what we observed is that if we

250
00:09:55,600 --> 00:09:57,519
sample a couple of these

251
00:09:57,519 --> 00:09:59,839
sequences from the clusters

252
00:09:59,839 --> 00:10:01,519
that some clusters

253
00:10:01,519 --> 00:10:03,760
do not have the same risk level

254
00:10:03,760 --> 00:10:06,480
according to the security operators

255
00:10:06,480 --> 00:10:08,000
and this of course

256
00:10:08,000 --> 00:10:10,000
is a problem if we want to make the

257
00:10:10,000 --> 00:10:13,760
decision to discard or escalate

258
00:10:13,760 --> 00:10:17,279
so what we do is we play it safe

259
00:10:17,279 --> 00:10:18,399
if we find

260
00:10:18,399 --> 00:10:22,160
a cluster that has at least one

261
00:10:22,160 --> 00:10:24,240
event sequence that might be

262
00:10:24,240 --> 00:10:25,360
malicious

263
00:10:25,360 --> 00:10:28,079
we automatically escalate

264
00:10:28,079 --> 00:10:30,480
and we found that if we are inspect if

265
00:10:30,480 --> 00:10:32,560
we sample 10 different of these

266
00:10:32,560 --> 00:10:35,200
sequences per cluster that we already

267
00:10:35,200 --> 00:10:36,160
have an

268
00:10:36,160 --> 00:10:38,399
84 and a half percent

269
00:10:38,399 --> 00:10:42,800
confidence level of finding the correct

270
00:10:42,800 --> 00:10:46,320
value of the risk level

271
00:10:46,320 --> 00:10:48,720
and by sampling only 10 sequences per

272
00:10:48,720 --> 00:10:50,800
cluster rather than every point in the

273
00:10:50,800 --> 00:10:52,320
cluster

274
00:10:52,320 --> 00:10:54,320
we already reduced the workload of the

275
00:10:54,320 --> 00:10:58,480
security operator by 95

276
00:10:58,839 --> 00:11:01,680
percent now that we have asked the

277
00:11:01,680 --> 00:11:04,079
security operator to manually inspect

278
00:11:04,079 --> 00:11:06,720
some of these alerts we can copy the

279
00:11:06,720 --> 00:11:08,720
decision that they made and try to

280
00:11:08,720 --> 00:11:13,040
perform this in a semi-automated fashion

281
00:11:13,040 --> 00:11:14,959
and we recall that

282
00:11:14,959 --> 00:11:18,240
if we know if a sequence or a cluster is

283
00:11:18,240 --> 00:11:19,920
benign or malicious and we find

284
00:11:19,920 --> 00:11:22,480
something similar we can automatically

285
00:11:22,480 --> 00:11:24,560
copy that decision so

286
00:11:24,560 --> 00:11:27,279
escalate or discard alerts

287
00:11:27,279 --> 00:11:29,760
and if we find new alerts or new

288
00:11:29,760 --> 00:11:31,040
sequences

289
00:11:31,040 --> 00:11:34,880
then we simply ask the operator again

290
00:11:34,880 --> 00:11:37,680
well in this experiment that we ran on

291
00:11:37,680 --> 00:11:39,920
real world data

292
00:11:39,920 --> 00:11:43,760
we found that 86 percent of the

293
00:11:43,760 --> 00:11:46,079
sequences that we found

294
00:11:46,079 --> 00:11:49,839
were actually already in our database

295
00:11:49,839 --> 00:11:52,560
so there was no need for a manual

296
00:11:52,560 --> 00:11:56,480
interception by a security operator

297
00:11:56,480 --> 00:11:59,839
however there were of course a couple of

298
00:11:59,839 --> 00:12:02,399
new alerts or new sequences that we had

299
00:12:02,399 --> 00:12:03,839
to

300
00:12:03,839 --> 00:12:07,920
ask to the operator to triage

301
00:12:07,920 --> 00:12:10,000
and combining these two approaches we

302
00:12:10,000 --> 00:12:12,720
found that on this real world data set

303
00:12:12,720 --> 00:12:14,480
we could reduce the workload of the

304
00:12:14,480 --> 00:12:18,560
security operator by over 90

305
00:12:18,800 --> 00:12:20,800
now of course this sounds great

306
00:12:20,800 --> 00:12:21,680
but

307
00:12:21,680 --> 00:12:24,160
we of course want to make sure that we

308
00:12:24,160 --> 00:12:27,040
don't accidentally discard actual

309
00:12:27,040 --> 00:12:29,360
attacks because if we miss something

310
00:12:29,360 --> 00:12:32,000
that might be detrimental to the company

311
00:12:32,000 --> 00:12:35,680
for example that is under attack

312
00:12:35,680 --> 00:12:38,000
and by using our approach we found that

313
00:12:38,000 --> 00:12:41,440
we underestimate the risk of security

314
00:12:41,440 --> 00:12:44,040
events in less than

315
00:12:44,040 --> 00:12:47,040
0.001 percent of the cases so we have a

316
00:12:47,040 --> 00:12:48,160
very

317
00:12:48,160 --> 00:12:50,959
low chance of actually discarding

318
00:12:50,959 --> 00:12:53,839
something malicious

319
00:12:54,880 --> 00:12:56,480
that being said

320
00:12:56,480 --> 00:12:59,040
just to reiterate our work

321
00:12:59,040 --> 00:13:00,800
looked at reducing the workload of

322
00:13:00,800 --> 00:13:04,160
security operators by analyzing events

323
00:13:04,160 --> 00:13:07,120
within a specific context

324
00:13:07,120 --> 00:13:09,120
and we found that we could automatically

325
00:13:09,120 --> 00:13:11,200
reduce the the

326
00:13:11,200 --> 00:13:12,480
workload

327
00:13:12,480 --> 00:13:14,720
by more than 90 percent

328
00:13:14,720 --> 00:13:16,800
and only underestimate the security

329
00:13:16,800 --> 00:13:19,519
risks in less than 0.001 percent of

330
00:13:19,519 --> 00:13:20,720
cases

331
00:13:20,720 --> 00:13:22,480
should you be interested in trying this

332
00:13:22,480 --> 00:13:24,480
out yourself our code is openly

333
00:13:24,480 --> 00:13:26,639
available at github at the following

334
00:13:26,639 --> 00:13:28,160
link

335
00:13:28,160 --> 00:13:29,120
and

336
00:13:29,120 --> 00:13:30,880
thereby i would like to end the

337
00:13:30,880 --> 00:13:34,720
presentation and ask for any questions

338
00:13:34,720 --> 00:13:35,990
thank you very much

339
00:13:35,990 --> 00:13:40,560
[Applause]

340
00:13:40,560 --> 00:13:42,959
do we have questions from the audience

341
00:13:42,959 --> 00:13:45,959
yes

342
00:13:50,399 --> 00:13:52,639
very nice talk and it's very needed in

343
00:13:52,639 --> 00:13:55,360
fact to reduce the load so

344
00:13:55,360 --> 00:13:57,279
the question is that you do clustering

345
00:13:57,279 --> 00:14:00,079
right yes so which means i have to wait

346
00:14:00,079 --> 00:14:02,160
until i have certain number of events

347
00:14:02,160 --> 00:14:05,440
then do the decision but what you cannot

348
00:14:05,440 --> 00:14:07,839
do this on the spot for example new

349
00:14:07,839 --> 00:14:09,600
events are coming how can i decide

350
00:14:09,600 --> 00:14:13,199
whether these events should be

351
00:14:13,600 --> 00:14:16,480
disregarded or should be escalated yes

352
00:14:16,480 --> 00:14:18,800
that's a very good question

353
00:14:18,800 --> 00:14:20,320
so indeed

354
00:14:20,320 --> 00:14:21,199
we

355
00:14:21,199 --> 00:14:23,680
have to wait for a cluster to appear to

356
00:14:23,680 --> 00:14:26,079
to copy this decision

357
00:14:26,079 --> 00:14:28,800
but of course if we have a new event

358
00:14:28,800 --> 00:14:29,600
that

359
00:14:29,600 --> 00:14:31,519
has a novel context

360
00:14:31,519 --> 00:14:34,240
it will start to produce a

361
00:14:34,240 --> 00:14:36,160
single dot in our in our clustering

362
00:14:36,160 --> 00:14:37,920
space so to say

363
00:14:37,920 --> 00:14:40,160
and we can then ask a security operator

364
00:14:40,160 --> 00:14:43,120
to already triage that specific event in

365
00:14:43,120 --> 00:14:44,800
that context

366
00:14:44,800 --> 00:14:46,480
and then the next time we see something

367
00:14:46,480 --> 00:14:48,880
similar or a couple of times that we see

368
00:14:48,880 --> 00:14:51,040
something similar we see this new

369
00:14:51,040 --> 00:14:52,720
cluster appear

370
00:14:52,720 --> 00:14:53,440
so

371
00:14:53,440 --> 00:14:56,320
because we then have already some

372
00:14:56,320 --> 00:14:58,959
samples that have been triaged

373
00:14:58,959 --> 00:15:01,120
this decision can simply be copied for

374
00:15:01,120 --> 00:15:02,959
for later

375
00:15:02,959 --> 00:15:05,839
later samples that we observe

376
00:15:05,839 --> 00:15:09,720
does that answer your question

377
00:15:13,600 --> 00:15:16,399
so if we have new events um

378
00:15:16,399 --> 00:15:18,560
they might belong to a cluster that

379
00:15:18,560 --> 00:15:20,639
we've already seen in which case great

380
00:15:20,639 --> 00:15:22,399
we can copy the decision

381
00:15:22,399 --> 00:15:24,560
if we have new events that will form a

382
00:15:24,560 --> 00:15:27,600
new cluster we simply ask the security

383
00:15:27,600 --> 00:15:31,120
operator to triage the events initially

384
00:15:31,120 --> 00:15:33,360
and once they have

385
00:15:33,360 --> 00:15:36,000
seen enough events within one of these

386
00:15:36,000 --> 00:15:37,440
new clusters

387
00:15:37,440 --> 00:15:38,320
then

388
00:15:38,320 --> 00:15:41,120
we simply can copy that decision for

389
00:15:41,120 --> 00:15:44,399
later events that we find

390
00:15:45,120 --> 00:15:47,360
thank you please go ahead

391
00:15:47,360 --> 00:15:48,959
with the next question

392
00:15:48,959 --> 00:15:52,560
great work i enjoyed your talk thank you

393
00:15:52,560 --> 00:15:54,480
just a quick question what what is the

394
00:15:54,480 --> 00:15:57,199
data set that he used for uh foreign

395
00:15:57,199 --> 00:15:59,519
evaluation yes i can tell you a little

396
00:15:59,519 --> 00:16:02,320
bit more about that um we work together

397
00:16:02,320 --> 00:16:04,880
with uh last line which is now part of

398
00:16:04,880 --> 00:16:06,160
vmware

399
00:16:06,160 --> 00:16:09,199
um and we used a real world data set

400
00:16:09,199 --> 00:16:11,040
where we monitored 20 different

401
00:16:11,040 --> 00:16:13,600
organizations from medium to large

402
00:16:13,600 --> 00:16:15,279
enterprises

403
00:16:15,279 --> 00:16:18,000
for a period of over six months

404
00:16:18,000 --> 00:16:20,160
and within the date this data set we had

405
00:16:20,160 --> 00:16:22,480
about 10 million different

406
00:16:22,480 --> 00:16:25,519
security events

407
00:16:25,759 --> 00:16:26,800
with

408
00:16:26,800 --> 00:16:30,079
with which we clustered

409
00:16:30,160 --> 00:16:32,880
of this data set the first month we took

410
00:16:32,880 --> 00:16:35,360
for this manual inspection period

411
00:16:35,360 --> 00:16:37,360
and the remaining five months

412
00:16:37,360 --> 00:16:39,920
we applied the automated

413
00:16:39,920 --> 00:16:42,560
or semi-automated analysis so those

414
00:16:42,560 --> 00:16:44,560
represent the numbers that we have seen

415
00:16:44,560 --> 00:16:47,040
here today

416
00:16:47,600 --> 00:16:50,800
we have a question from home well from

417
00:16:50,800 --> 00:16:54,160
home from remote let's say

418
00:16:55,040 --> 00:16:56,959
it's

419
00:16:56,959 --> 00:16:59,120
how do you prevent known threats from

420
00:16:59,120 --> 00:17:02,680
being re-triaged

421
00:17:03,040 --> 00:17:05,280
uh yes so the question is how do we

422
00:17:05,280 --> 00:17:08,319
prevent known threats from being triaged

423
00:17:08,319 --> 00:17:11,280
um so if we have a known threat

424
00:17:11,280 --> 00:17:14,160
then it will likely occur in the same

425
00:17:14,160 --> 00:17:16,839
context and therefore end up in the same

426
00:17:16,839 --> 00:17:20,400
cluster and once we have made a decision

427
00:17:20,400 --> 00:17:23,280
for that cluster where we say okay this

428
00:17:23,280 --> 00:17:26,160
is a known threat so we should escalate

429
00:17:26,160 --> 00:17:29,520
the next time we find a security event

430
00:17:29,520 --> 00:17:31,919
with that similar context it will end up

431
00:17:31,919 --> 00:17:33,440
in the same cluster

432
00:17:33,440 --> 00:17:36,000
we look in our database we see oh this

433
00:17:36,000 --> 00:17:38,720
has to be escalated so we simply

434
00:17:38,720 --> 00:17:41,679
automatically use that decision

435
00:17:41,679 --> 00:17:43,200
thanks i actually have one quick

436
00:17:43,200 --> 00:17:44,720
curiosity before we move to the next

437
00:17:44,720 --> 00:17:47,200
speaker

438
00:17:47,200 --> 00:17:48,480
when you were talking about the manual

439
00:17:48,480 --> 00:17:50,240
analysis for the cluster and sampling

440
00:17:50,240 --> 00:17:51,919
some examples

441
00:17:51,919 --> 00:17:53,440
um

442
00:17:53,440 --> 00:17:55,360
how can you i mean maybe i missed

443
00:17:55,360 --> 00:17:58,480
something but how can you be sure that

444
00:17:58,480 --> 00:18:00,799
it's not just a lucky sample that the

445
00:18:00,799 --> 00:18:03,360
analyst is manually picking

446
00:18:03,360 --> 00:18:06,240
uh that's a very good question so we

447
00:18:06,240 --> 00:18:09,360
used a data set of last line that was

448
00:18:09,360 --> 00:18:10,799
actually

449
00:18:10,799 --> 00:18:11,919
used

450
00:18:11,919 --> 00:18:14,160
or actually triaged by security

451
00:18:14,160 --> 00:18:16,080
operators

452
00:18:16,080 --> 00:18:19,039
and in this data set we simply

453
00:18:19,039 --> 00:18:21,760
simulated this

454
00:18:21,760 --> 00:18:23,840
process of manually picking random

455
00:18:23,840 --> 00:18:24,880
samples

456
00:18:24,880 --> 00:18:27,360
and by just randomly sampling

457
00:18:27,360 --> 00:18:29,200
we found that

458
00:18:29,200 --> 00:18:31,280
sampling for example 10

459
00:18:31,280 --> 00:18:34,480
sequences such as we did in our case

460
00:18:34,480 --> 00:18:37,200
we were fairly confident in the specific

461
00:18:37,200 --> 00:18:39,520
risk level so if you want to gain a

462
00:18:39,520 --> 00:18:41,840
higher confidence you can sample more

463
00:18:41,840 --> 00:18:44,240
which offers a slightly lower reduction

464
00:18:44,240 --> 00:18:46,559
in workload or if you don't need to be

465
00:18:46,559 --> 00:18:49,039
as confident you can sample fewer

466
00:18:49,039 --> 00:18:50,559
samples

467
00:18:50,559 --> 00:18:52,880
but of course you you lose some

468
00:18:52,880 --> 00:18:54,640
confidence in the risk level that you

469
00:18:54,640 --> 00:18:55,760
assign

470
00:18:55,760 --> 00:18:57,440
okay thank you very much let's have

471
00:18:57,440 --> 00:19:01,080
another round of applause

