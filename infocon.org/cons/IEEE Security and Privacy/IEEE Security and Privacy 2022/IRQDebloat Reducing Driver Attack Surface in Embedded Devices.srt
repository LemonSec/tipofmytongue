1
00:00:00,480 --> 00:00:02,879
okay uh thank you chair and welcome

2
00:00:02,879 --> 00:00:06,000
everyone to our talk i'm xen hahu

3
00:00:06,000 --> 00:00:08,320
and today i'm going to present our paper

4
00:00:08,320 --> 00:00:10,480
irq d blog reducing driver attack

5
00:00:10,480 --> 00:00:13,120
surface in embedded devices

6
00:00:13,120 --> 00:00:14,799
this is work done together with my

7
00:00:14,799 --> 00:00:17,680
advisor brandon de langevid

8
00:00:17,680 --> 00:00:18,880
so

9
00:00:18,880 --> 00:00:21,600
nowadays many embed devices often comes

10
00:00:21,600 --> 00:00:24,000
with many extra hardware features which

11
00:00:24,000 --> 00:00:25,840
is a good thing for us customers because

12
00:00:25,840 --> 00:00:28,320
it means we have more choices but on the

13
00:00:28,320 --> 00:00:29,359
other hand

14
00:00:29,359 --> 00:00:31,199
the driver of all those extra hardware

15
00:00:31,199 --> 00:00:33,520
devices could be very buggy and full

16
00:00:33,520 --> 00:00:36,640
vulnerabilities and it might

17
00:00:36,640 --> 00:00:38,559
compromise the security of our whole

18
00:00:38,559 --> 00:00:39,680
system

19
00:00:39,680 --> 00:00:42,559
so for example in this cisco meraki

20
00:00:42,559 --> 00:00:44,960
wi-fi router it also comes with a fully

21
00:00:44,960 --> 00:00:46,879
functioning bluetooth stack

22
00:00:46,879 --> 00:00:48,559
which might be useful for some large

23
00:00:48,559 --> 00:00:50,800
organizations to locate or manage their

24
00:00:50,800 --> 00:00:54,000
devices but for individual users like us

25
00:00:54,000 --> 00:00:55,840
we might never want to use this feature

26
00:00:55,840 --> 00:00:56,800
at all

27
00:00:56,800 --> 00:00:59,039
and even worse it might bring along all

28
00:00:59,039 --> 00:01:01,520
the bugs related to the bluetooth stack

29
00:01:01,520 --> 00:01:03,760
which could potentially turn our routers

30
00:01:03,760 --> 00:01:06,720
into some hackers bitcoin bot

31
00:01:06,720 --> 00:01:09,439
so of course for us and users we want to

32
00:01:09,439 --> 00:01:11,439
disable all those hardware features that

33
00:01:11,439 --> 00:01:14,080
we are never going to use or sometimes

34
00:01:14,080 --> 00:01:16,479
we are not even aware of so that we can

35
00:01:16,479 --> 00:01:18,720
reduce the attack surface and make our

36
00:01:18,720 --> 00:01:20,640
system more secure

37
00:01:20,640 --> 00:01:22,799
however things could be difficult

38
00:01:22,799 --> 00:01:25,040
vendor support could be very inflexible

39
00:01:25,040 --> 00:01:27,040
in regards to the functionality changes

40
00:01:27,040 --> 00:01:28,479
in the firmware

41
00:01:28,479 --> 00:01:31,360
and open source firmware could be

42
00:01:31,360 --> 00:01:33,759
highly customizable but some of the

43
00:01:33,759 --> 00:01:35,759
hardware spec might not be open to the

44
00:01:35,759 --> 00:01:38,640
public so basically you're running it

45
00:01:38,640 --> 00:01:41,840
on your own risk so it seems the best

46
00:01:41,840 --> 00:01:43,759
option would be to grab an official

47
00:01:43,759 --> 00:01:46,000
firmware and patch it by yourself

48
00:01:46,000 --> 00:01:48,240
but then again it's not something for

49
00:01:48,240 --> 00:01:50,880
everyone it's highly technical and it

50
00:01:50,880 --> 00:01:52,799
requires a huge amount of time just to

51
00:01:52,799 --> 00:01:55,600
reverse engineer the firmware

52
00:01:55,600 --> 00:01:56,320
so

53
00:01:56,320 --> 00:01:58,399
now back to our paper what we were

54
00:01:58,399 --> 00:02:00,399
trying to achieve here is to automate

55
00:02:00,399 --> 00:02:02,799
this highly technical process so that we

56
00:02:02,799 --> 00:02:04,479
can automatically reverse engineer the

57
00:02:04,479 --> 00:02:06,640
binary code that is responsible to all

58
00:02:06,640 --> 00:02:09,119
those hardware features and then we can

59
00:02:09,119 --> 00:02:11,840
patch them out in the firmware

60
00:02:11,840 --> 00:02:13,760
but now the question is what kind of

61
00:02:13,760 --> 00:02:15,760
code should we looking for to either

62
00:02:15,760 --> 00:02:19,200
reverse engineer or binary patching

63
00:02:19,200 --> 00:02:21,360
well since our paper is called irq d

64
00:02:21,360 --> 00:02:23,280
bloat apparently we're targeting irq

65
00:02:23,280 --> 00:02:26,239
handlers or interrupt handlers

66
00:02:26,239 --> 00:02:28,800
we have a couple of reasons first of all

67
00:02:28,800 --> 00:02:30,720
interrupts are widely supported by

68
00:02:30,720 --> 00:02:33,599
almost all the cpus or microcontrollers

69
00:02:33,599 --> 00:02:35,840
and more importantly they all work in a

70
00:02:35,840 --> 00:02:38,000
very similar way

71
00:02:38,000 --> 00:02:39,920
let's take a look at this diagram for a

72
00:02:39,920 --> 00:02:41,760
very quick example

73
00:02:41,760 --> 00:02:43,360
assuming that i'm sending a few

74
00:02:43,360 --> 00:02:45,599
keystrokes through the serial port and

75
00:02:45,599 --> 00:02:47,680
it's going to create an i o event in the

76
00:02:47,680 --> 00:02:49,280
serial device

77
00:02:49,280 --> 00:02:51,920
the signal is going to propagate to the

78
00:02:51,920 --> 00:02:54,080
interrupt controller which will in turn

79
00:02:54,080 --> 00:02:57,280
raise an irq exception in the cpu

80
00:02:57,280 --> 00:02:59,360
and then the cpu would jump to an

81
00:02:59,360 --> 00:03:02,560
exception entry point and it's where it

82
00:03:02,560 --> 00:03:04,640
can read the hardware irq number from

83
00:03:04,640 --> 00:03:06,480
the interrupt controller

84
00:03:06,480 --> 00:03:08,560
and based on that it can dispatch to the

85
00:03:08,560 --> 00:03:11,360
specific device interrupt handler

86
00:03:11,360 --> 00:03:13,360
which in this case is going to be the

87
00:03:13,360 --> 00:03:15,840
serial device interrupt handler which

88
00:03:15,840 --> 00:03:17,599
will communicate directly with the

89
00:03:17,599 --> 00:03:19,760
serial device and eventually complete

90
00:03:19,760 --> 00:03:21,680
the io event

91
00:03:21,680 --> 00:03:23,920
so here comes our second reason that we

92
00:03:23,920 --> 00:03:26,480
chose interrupt handler is that they are

93
00:03:26,480 --> 00:03:28,400
all device specific

94
00:03:28,400 --> 00:03:30,640
which means as long as we can disable an

95
00:03:30,640 --> 00:03:32,959
interrupt handler we can prevent other i

96
00:03:32,959 --> 00:03:34,720
o events coming through that hardware

97
00:03:34,720 --> 00:03:36,879
device and therefore we can disable its

98
00:03:36,879 --> 00:03:38,959
functionality from the perspective of a

99
00:03:38,959 --> 00:03:40,480
user

100
00:03:40,480 --> 00:03:41,200
and

101
00:03:41,200 --> 00:03:42,400
moreover

102
00:03:42,400 --> 00:03:44,640
targeting irq handlers would make our

103
00:03:44,640 --> 00:03:46,720
binary patching easier because all we

104
00:03:46,720 --> 00:03:49,440
have to do is to patch a direct return

105
00:03:49,440 --> 00:03:50,799
so that we can bypass all the

106
00:03:50,799 --> 00:03:52,400
communications between the operating

107
00:03:52,400 --> 00:03:55,599
system and the hardware device

108
00:03:55,599 --> 00:03:57,519
there has been other works related to

109
00:03:57,519 --> 00:03:59,599
the kernel code deploying based on

110
00:03:59,599 --> 00:04:02,959
kernel configs or that code removal but

111
00:04:02,959 --> 00:04:04,959
there are linux specific and they

112
00:04:04,959 --> 00:04:07,040
require source code or object files

113
00:04:07,040 --> 00:04:10,640
during the process of compilation

114
00:04:11,120 --> 00:04:13,680
so now we have to design such a system

115
00:04:13,680 --> 00:04:16,079
that can automatically reverse engineer

116
00:04:16,079 --> 00:04:18,639
all those interrupt handlers

117
00:04:18,639 --> 00:04:21,358
but at the same time we also faces a few

118
00:04:21,358 --> 00:04:22,960
challenges related to the binary

119
00:04:22,960 --> 00:04:24,320
analysis

120
00:04:24,320 --> 00:04:26,400
one of the challenges we face is the

121
00:04:26,400 --> 00:04:28,960
diversity of different operating systems

122
00:04:28,960 --> 00:04:30,960
that may they might have different

123
00:04:30,960 --> 00:04:32,960
software design

124
00:04:32,960 --> 00:04:35,440
so in our binary analysis we have to

125
00:04:35,440 --> 00:04:37,520
accommodate all those differences across

126
00:04:37,520 --> 00:04:40,479
all the different operating systems

127
00:04:40,479 --> 00:04:43,440
and furthermore even though some of the

128
00:04:43,440 --> 00:04:45,280
operating systems might share similar

129
00:04:45,280 --> 00:04:47,600
software design we might still run into

130
00:04:47,600 --> 00:04:49,600
trouble when trying to reverse engineer

131
00:04:49,600 --> 00:04:51,040
interrupt handlers

132
00:04:51,040 --> 00:04:52,000
because

133
00:04:52,000 --> 00:04:54,080
for example many interrupt handlers are

134
00:04:54,080 --> 00:04:56,080
actually registered dynamically during

135
00:04:56,080 --> 00:04:57,199
the runtime

136
00:04:57,199 --> 00:04:59,199
so it would be very difficult for static

137
00:04:59,199 --> 00:05:01,360
analysis to find out all those interrupt

138
00:05:01,360 --> 00:05:02,720
handlers

139
00:05:02,720 --> 00:05:05,280
so instead in our solution we use

140
00:05:05,280 --> 00:05:07,440
dynamic analysis that is based on the

141
00:05:07,440 --> 00:05:10,000
snapshot taken directly from the

142
00:05:10,000 --> 00:05:12,320
hardware device and then we'd use a

143
00:05:12,320 --> 00:05:14,000
coverage guided fuzzing and trace

144
00:05:14,000 --> 00:05:16,080
analysis to find out all those interrupt

145
00:05:16,080 --> 00:05:18,639
panels

146
00:05:18,960 --> 00:05:20,960
here here we show an example of

147
00:05:20,960 --> 00:05:23,360
pseudocode that how in general an

148
00:05:23,360 --> 00:05:25,039
operating system would handle an

149
00:05:25,039 --> 00:05:27,039
incoming interrupt

150
00:05:27,039 --> 00:05:28,960
we could see that it would first try to

151
00:05:28,960 --> 00:05:31,039
read the irq number from the interrupt

152
00:05:31,039 --> 00:05:33,120
controller and then dispatch to the

153
00:05:33,120 --> 00:05:35,440
correct interrupt handler

154
00:05:35,440 --> 00:05:38,720
so now our idea here is that we can

155
00:05:38,720 --> 00:05:40,560
simulate this interrupt controller

156
00:05:40,560 --> 00:05:43,520
device and use fuzzing to enumerate all

157
00:05:43,520 --> 00:05:46,639
the possible irq numbers so that we can

158
00:05:46,639 --> 00:05:48,639
collect many different traces that is

159
00:05:48,639 --> 00:05:50,960
handling different irqs

160
00:05:50,960 --> 00:05:52,639
since we know that all those traces

161
00:05:52,639 --> 00:05:54,479
would start from a common exception

162
00:05:54,479 --> 00:05:55,680
entry point

163
00:05:55,680 --> 00:05:58,560
we can just simply do a trace diff and

164
00:05:58,560 --> 00:06:01,440
find out all those divergence points and

165
00:06:01,440 --> 00:06:03,759
which would be the interrupt candles we

166
00:06:03,759 --> 00:06:06,479
were trying to look for

167
00:06:06,479 --> 00:06:08,960
here's a more concrete example for like

168
00:06:08,960 --> 00:06:10,720
two traces that is handling two

169
00:06:10,720 --> 00:06:13,280
different irqs we can see that both of

170
00:06:13,280 --> 00:06:15,919
the traces share a fair amount of code

171
00:06:15,919 --> 00:06:18,319
starting from the entry point and

172
00:06:18,319 --> 00:06:20,479
eventually they diverge right after the

173
00:06:20,479 --> 00:06:22,240
dispatching point

174
00:06:22,240 --> 00:06:25,199
and if we look closer at the divergence

175
00:06:25,199 --> 00:06:27,759
point here we can immediately spot that

176
00:06:27,759 --> 00:06:29,360
these two functions that is being

177
00:06:29,360 --> 00:06:31,919
dispatched are exactly the two iq

178
00:06:31,919 --> 00:06:34,400
handlers corresponds to each of the

179
00:06:34,400 --> 00:06:36,880
traces

180
00:06:38,479 --> 00:06:40,639
as we also mentioned that we use fuzzing

181
00:06:40,639 --> 00:06:41,520
to

182
00:06:41,520 --> 00:06:43,919
enumerate irq numbers and help us

183
00:06:43,919 --> 00:06:46,560
explore interrupt technical

184
00:06:46,560 --> 00:06:48,560
however we cannot simply just grab a

185
00:06:48,560 --> 00:06:50,560
random fuzzer off the shelf and start

186
00:06:50,560 --> 00:06:52,800
fuzzing because there are many different

187
00:06:52,800 --> 00:06:54,720
hardware designs that might have

188
00:06:54,720 --> 00:06:56,639
different protocols to communicate with

189
00:06:56,639 --> 00:06:58,080
the software

190
00:06:58,080 --> 00:06:59,199
so

191
00:06:59,199 --> 00:07:00,639
more specifically for interrupt

192
00:07:00,639 --> 00:07:02,960
controllers the presentation of the irq

193
00:07:02,960 --> 00:07:05,280
number could also be different

194
00:07:05,280 --> 00:07:07,919
so in our fuzzing we have to design such

195
00:07:07,919 --> 00:07:09,680
a dictionary that

196
00:07:09,680 --> 00:07:12,400
contains all the possible irq encodings

197
00:07:12,400 --> 00:07:14,639
coming through the hardware

198
00:07:14,639 --> 00:07:17,199
and besides sometimes other peripherals

199
00:07:17,199 --> 00:07:18,800
on the same system could also get in the

200
00:07:18,800 --> 00:07:21,280
way when we were doing the fuzzing

201
00:07:21,280 --> 00:07:22,960
for example like

202
00:07:22,960 --> 00:07:25,280
there are many memory mapped io access

203
00:07:25,280 --> 00:07:26,960
from the peripherals might require

204
00:07:26,960 --> 00:07:29,280
software validations so during the

205
00:07:29,280 --> 00:07:31,280
fuzzing we have to design several extra

206
00:07:31,280 --> 00:07:33,120
strategies to get around all those

207
00:07:33,120 --> 00:07:36,080
checks in the driver code

208
00:07:36,080 --> 00:07:38,960
here's how irq fuzzing works

209
00:07:38,960 --> 00:07:42,080
first we take a snapshot from the target

210
00:07:42,080 --> 00:07:43,360
device

211
00:07:43,360 --> 00:07:46,400
with its memory dump and cpu registers

212
00:07:46,400 --> 00:07:48,960
and we load it up in our emulator which

213
00:07:48,960 --> 00:07:51,199
is panda in our case so that we can

214
00:07:51,199 --> 00:07:53,840
continue the execution and raise an irq

215
00:07:53,840 --> 00:07:56,000
exception so that we can start exploring

216
00:07:56,000 --> 00:07:59,039
the interrupt handling code

217
00:07:59,039 --> 00:08:01,360
to simulate the hardware input we use a

218
00:08:01,360 --> 00:08:03,520
sequence of dictionary values which

219
00:08:03,520 --> 00:08:05,440
contains several patterns such as

220
00:08:05,440 --> 00:08:08,639
integers sliding window bitmaps and

221
00:08:08,639 --> 00:08:10,960
several constant patterns such as zero

222
00:08:10,960 --> 00:08:13,199
or negative one etcetera

223
00:08:13,199 --> 00:08:15,199
and

224
00:08:15,199 --> 00:08:17,360
and we would feed these values one after

225
00:08:17,360 --> 00:08:19,520
another during the execution

226
00:08:19,520 --> 00:08:20,720
so that

227
00:08:20,720 --> 00:08:22,879
in the end we can see whether we've

228
00:08:22,879 --> 00:08:24,879
gained any new coverage through this

229
00:08:24,879 --> 00:08:27,039
execution so that we can decide whether

230
00:08:27,039 --> 00:08:29,280
we want to keep this trace or just

231
00:08:29,280 --> 00:08:32,000
simply discard these trees

232
00:08:32,000 --> 00:08:34,159
but for either way we want to continue

233
00:08:34,159 --> 00:08:35,120
fuzzing

234
00:08:35,120 --> 00:08:37,360
and start another round of fuzzing by

235
00:08:37,360 --> 00:08:39,760
raising another irq exception and feed

236
00:08:39,760 --> 00:08:41,760
it with another sequence of

237
00:08:41,760 --> 00:08:43,599
dictionary inputs

238
00:08:43,599 --> 00:08:44,560
until

239
00:08:44,560 --> 00:08:45,360
like

240
00:08:45,360 --> 00:08:47,519
until we've collected enough traces

241
00:08:47,519 --> 00:08:49,200
which would cover all the registered

242
00:08:49,200 --> 00:08:52,080
interrupt handlers

243
00:08:52,880 --> 00:08:56,560
here's the workflow of rqdbloat as we've

244
00:08:56,560 --> 00:08:58,800
already covered some part of it that we

245
00:08:58,800 --> 00:09:01,200
take a snapshot and migrate the embedded

246
00:09:01,200 --> 00:09:04,000
system up to our analyzing platform

247
00:09:04,000 --> 00:09:06,080
so that we can collect traces that is

248
00:09:06,080 --> 00:09:10,160
related to the irq handling code

249
00:09:10,160 --> 00:09:11,600
and

250
00:09:11,600 --> 00:09:13,600
then we can do a trace different assets

251
00:09:13,600 --> 00:09:15,680
to find out all those divergence points

252
00:09:15,680 --> 00:09:18,480
and also the interrupt handler addresses

253
00:09:18,480 --> 00:09:20,640
and in the final step we

254
00:09:20,640 --> 00:09:22,560
find a match in the binary firmware

255
00:09:22,560 --> 00:09:24,160
corresponding to all those interrupt

256
00:09:24,160 --> 00:09:26,240
cameras so that we can patch them out

257
00:09:26,240 --> 00:09:29,680
and disable the hardware feature

258
00:09:29,920 --> 00:09:31,839
for the implementation

259
00:09:31,839 --> 00:09:34,480
here we show an outline of

260
00:09:34,480 --> 00:09:37,120
our implementation details

261
00:09:37,120 --> 00:09:39,600
since there are very strict time limits

262
00:09:39,600 --> 00:09:41,920
here we probably won't be able to

263
00:09:41,920 --> 00:09:43,839
went through every single details we've

264
00:09:43,839 --> 00:09:45,839
done here

265
00:09:45,839 --> 00:09:48,640
so just in case that anyone's interested

266
00:09:48,640 --> 00:09:50,640
please check out our paper or simply

267
00:09:50,640 --> 00:09:53,279
grab us after the talk

268
00:09:53,279 --> 00:09:55,360
one thing to note here is that our

269
00:09:55,360 --> 00:09:56,880
implementation in the trace different

270
00:09:56,880 --> 00:09:57,920
analysis

271
00:09:57,920 --> 00:10:00,240
is based on the algorithm that is

272
00:10:00,240 --> 00:10:02,000
introduced in the paper execution

273
00:10:02,000 --> 00:10:04,480
indexing and differential slicing

274
00:10:04,480 --> 00:10:07,200
on top of that we also find a few cases

275
00:10:07,200 --> 00:10:08,959
that the original algorithm didn't

276
00:10:08,959 --> 00:10:11,360
handle very well which might introduce

277
00:10:11,360 --> 00:10:14,480
some of the false posit false negatives

278
00:10:14,480 --> 00:10:15,279
so

279
00:10:15,279 --> 00:10:18,160
we have to make some changes and

280
00:10:18,160 --> 00:10:20,399
improvements so that the algorithm could

281
00:10:20,399 --> 00:10:24,160
accommodate our situations better

282
00:10:25,120 --> 00:10:28,399
now for our evaluation we've selected a

283
00:10:28,399 --> 00:10:30,640
variety of hardware devices

284
00:10:30,640 --> 00:10:33,120
which includes several common dashboards

285
00:10:33,120 --> 00:10:35,680
including raspberry pi beaglebone and

286
00:10:35,680 --> 00:10:37,360
saber light

287
00:10:37,360 --> 00:10:40,399
we also included two devices that has

288
00:10:40,399 --> 00:10:43,519
already been implemented in chemo

289
00:10:43,519 --> 00:10:44,480
which are

290
00:10:44,480 --> 00:10:47,200
samsung newer board and 8-speed romulus

291
00:10:47,200 --> 00:10:48,640
board

292
00:10:48,640 --> 00:10:52,720
we also included this wrt54 gl as an

293
00:10:52,720 --> 00:10:54,720
example of a mips device

294
00:10:54,720 --> 00:10:56,640
since all the other hardware devices are

295
00:10:56,640 --> 00:10:57,440
arm

296
00:10:57,440 --> 00:10:58,800
architecture

297
00:10:58,800 --> 00:11:01,839
and finally we also included this steam

298
00:11:01,839 --> 00:11:04,320
link device as a real world example that

299
00:11:04,320 --> 00:11:07,360
don't have a jtag interface

300
00:11:07,360 --> 00:11:09,600
for the operating systems we also

301
00:11:09,600 --> 00:11:11,200
included four different operating

302
00:11:11,200 --> 00:11:13,680
systems in our evaluation set

303
00:11:13,680 --> 00:11:14,399
where

304
00:11:14,399 --> 00:11:17,279
we have linux and freebsd as examples

305
00:11:17,279 --> 00:11:19,519
for generic and open source operating

306
00:11:19,519 --> 00:11:20,480
system

307
00:11:20,480 --> 00:11:23,680
and also we have vxworks and risk os as

308
00:11:23,680 --> 00:11:28,240
examples for real-time os

309
00:11:28,240 --> 00:11:29,600
so

310
00:11:29,600 --> 00:11:31,519
now one thing that people would concern

311
00:11:31,519 --> 00:11:34,160
most is how accurate our automated

312
00:11:34,160 --> 00:11:36,160
reverse engineering is

313
00:11:36,160 --> 00:11:38,640
so here we show that

314
00:11:38,640 --> 00:11:40,480
we can uncover

315
00:11:40,480 --> 00:11:42,880
almost all the irq handlers that is

316
00:11:42,880 --> 00:11:44,800
registered in each of the systems that

317
00:11:44,800 --> 00:11:46,480
we evaluated

318
00:11:46,480 --> 00:11:48,720
and we also showed that we can achieve

319
00:11:48,720 --> 00:11:51,600
that with very low false negatives and

320
00:11:51,600 --> 00:11:55,360
also very few false positives

321
00:11:55,519 --> 00:11:57,040
one of the reasons for the false

322
00:11:57,040 --> 00:11:59,120
negatives is that some of the irq

323
00:11:59,120 --> 00:12:01,279
handlers could already be disabled by

324
00:12:01,279 --> 00:12:03,360
the operating system by the time we took

325
00:12:03,360 --> 00:12:04,720
the snapshot

326
00:12:04,720 --> 00:12:07,120
so there is no chance that we can still

327
00:12:07,120 --> 00:12:09,040
reach these irq handlers during the

328
00:12:09,040 --> 00:12:10,399
fuzzing

329
00:12:10,399 --> 00:12:12,399
but then again

330
00:12:12,399 --> 00:12:14,160
even though in the original embedded

331
00:12:14,160 --> 00:12:16,240
system these irq handlers

332
00:12:16,240 --> 00:12:18,880
won't be functioning anymore so we

333
00:12:18,880 --> 00:12:21,200
believe that it is fine to have those

334
00:12:21,200 --> 00:12:23,360
false negatives here

335
00:12:23,360 --> 00:12:25,680
also for the false positives

336
00:12:25,680 --> 00:12:28,079
since the number of false positives is

337
00:12:28,079 --> 00:12:30,480
also very low we believe that these

338
00:12:30,480 --> 00:12:32,639
false positives won't cause any trouble

339
00:12:32,639 --> 00:12:35,440
in our further evaluation related to the

340
00:12:35,440 --> 00:12:38,480
binary patching or the actual hardware

341
00:12:38,480 --> 00:12:40,000
function removal

342
00:12:40,000 --> 00:12:42,399
because we can simply just try to patch

343
00:12:42,399 --> 00:12:44,399
out each single one of them and check

344
00:12:44,399 --> 00:12:45,760
whether the

345
00:12:45,760 --> 00:12:47,360
expected hardware feature has been

346
00:12:47,360 --> 00:12:49,040
disabled or not

347
00:12:49,040 --> 00:12:51,120
and therefore we can simply eliminate

348
00:12:51,120 --> 00:12:54,320
all those false positives

349
00:12:55,120 --> 00:12:57,200
another thing that people might concern

350
00:12:57,200 --> 00:12:59,920
is how much time it's going to take for

351
00:12:59,920 --> 00:13:02,240
us to uncover all those

352
00:13:02,240 --> 00:13:03,920
interrupt handlers

353
00:13:03,920 --> 00:13:06,959
so here we show that um

354
00:13:06,959 --> 00:13:09,600
here we show the coverage of uh all the

355
00:13:09,600 --> 00:13:11,600
irq handlers during the fuzzing realm

356
00:13:11,600 --> 00:13:14,560
versus the time we spend on the fuzzing

357
00:13:14,560 --> 00:13:18,160
um here we show that we can uncover like

358
00:13:18,160 --> 00:13:21,600
all the almost all the

359
00:13:21,600 --> 00:13:24,000
irq handlers that is registered for most

360
00:13:24,000 --> 00:13:26,720
of the systems that in our evaluation

361
00:13:26,720 --> 00:13:27,600
set

362
00:13:27,600 --> 00:13:30,079
except one of the case saber light linux

363
00:13:30,079 --> 00:13:33,040
which might take over 24 hours to

364
00:13:33,040 --> 00:13:36,639
uncover the last one irq handler

365
00:13:36,639 --> 00:13:39,040
also to note that the same

366
00:13:39,040 --> 00:13:42,800
system civilized linux which won't be

367
00:13:42,800 --> 00:13:46,000
able to reach 100 coverage

368
00:13:46,000 --> 00:13:46,959
which is

369
00:13:46,959 --> 00:13:49,360
exactly because of the false negatives

370
00:13:49,360 --> 00:13:52,560
we just mentioned earlier

371
00:13:53,040 --> 00:13:54,320
um

372
00:13:54,320 --> 00:13:55,279
so

373
00:13:55,279 --> 00:13:56,880
in the end we want to

374
00:13:56,880 --> 00:13:59,680
see how effective we can reduce the

375
00:13:59,680 --> 00:14:01,839
attack surface

376
00:14:01,839 --> 00:14:02,959
so

377
00:14:02,959 --> 00:14:05,760
in this evaluation we chose this target

378
00:14:05,760 --> 00:14:08,560
steam link device as our evaluation

379
00:14:08,560 --> 00:14:10,480
target

380
00:14:10,480 --> 00:14:13,120
which is a streaming device that

381
00:14:13,120 --> 00:14:15,040
unless

382
00:14:15,040 --> 00:14:18,079
lets the user to

383
00:14:18,240 --> 00:14:19,920
which is a streaming device that lets

384
00:14:19,920 --> 00:14:22,160
the user to play all their pc games on a

385
00:14:22,160 --> 00:14:23,440
big screen

386
00:14:23,440 --> 00:14:25,440
and unfortunately its hardware device

387
00:14:25,440 --> 00:14:27,440
has been discontinued around four years

388
00:14:27,440 --> 00:14:30,160
ago so at this moment there is no

389
00:14:30,160 --> 00:14:32,639
guarantee that at which point valve is

390
00:14:32,639 --> 00:14:35,680
going to drop its software update

391
00:14:35,680 --> 00:14:39,040
so in this evaluation we try to disable

392
00:14:39,040 --> 00:14:40,959
every single one of the interrupt

393
00:14:40,959 --> 00:14:42,079
handlers

394
00:14:42,079 --> 00:14:42,800
that

395
00:14:42,800 --> 00:14:44,880
exist in this system

396
00:14:44,880 --> 00:14:47,600
and see how many bugs we can prevent uh

397
00:14:47,600 --> 00:14:50,959
in each of the corresponding subsystems

398
00:14:50,959 --> 00:14:52,959
and

399
00:14:52,959 --> 00:14:55,360
so we we collected all the linux kernel

400
00:14:55,360 --> 00:14:58,880
cves for the past five years and among

401
00:14:58,880 --> 00:15:02,639
them we ended up like 157 of them in

402
00:15:02,639 --> 00:15:06,320
total which are remotely exposable cves

403
00:15:06,320 --> 00:15:08,560
and here we show that by turning off

404
00:15:08,560 --> 00:15:10,079
each single one of the interrupt

405
00:15:10,079 --> 00:15:13,440
handlers we can prevent

406
00:15:13,440 --> 00:15:17,040
in total 31 cves that is in the usb

407
00:15:17,040 --> 00:15:18,320
subsystem

408
00:15:18,320 --> 00:15:20,560
and we can also prevent seven cves

409
00:15:20,560 --> 00:15:23,199
related to the bluetooth device and also

410
00:15:23,199 --> 00:15:25,839
six related to the wi-fi device which

411
00:15:25,839 --> 00:15:28,639
ended up 44 in total

412
00:15:28,639 --> 00:15:30,880
of course you can like prevent all the

413
00:15:30,880 --> 00:15:32,880
44 cves

414
00:15:32,880 --> 00:15:34,320
that is

415
00:15:34,320 --> 00:15:36,880
possibly exist in the system by turning

416
00:15:36,880 --> 00:15:38,959
off all the interrupt handlers

417
00:15:38,959 --> 00:15:40,800
but then again it would leave your

418
00:15:40,800 --> 00:15:44,320
device completely unusable

419
00:15:44,320 --> 00:15:45,120
so

420
00:15:45,120 --> 00:15:47,120
in the end

421
00:15:47,120 --> 00:15:49,199
in conclusion we've successfully

422
00:15:49,199 --> 00:15:51,600
enumerated and find out all the irq

423
00:15:51,600 --> 00:15:54,480
handlers in our evaluation and we also

424
00:15:54,480 --> 00:15:57,040
show that we are effective in

425
00:15:57,040 --> 00:15:59,040
attack surface reduction

426
00:15:59,040 --> 00:16:00,880
and furthermore we also propose this

427
00:16:00,880 --> 00:16:03,040
automated reverse engineering technique

428
00:16:03,040 --> 00:16:05,600
which hopefully could be useful for

429
00:16:05,600 --> 00:16:08,399
further emulation or re-hosting research

430
00:16:08,399 --> 00:16:10,560
and also our code is open source feel

431
00:16:10,560 --> 00:16:12,959
free to check out

432
00:16:12,959 --> 00:16:16,079
all right any questions

433
00:16:16,630 --> 00:16:20,880
[Applause]

434
00:16:21,360 --> 00:16:23,040
if you have questions please come to the

435
00:16:23,040 --> 00:16:25,040
microphone okay hello should you end up

436
00:16:25,040 --> 00:16:26,639
from the ohio state university very

437
00:16:26,639 --> 00:16:29,199
great talk so

438
00:16:29,199 --> 00:16:31,920
you come here

439
00:16:33,440 --> 00:16:34,639
okay

440
00:16:34,639 --> 00:16:36,639
so i have a very quick question about

441
00:16:36,639 --> 00:16:38,639
this this is about

442
00:16:38,639 --> 00:16:40,320
the firmware signature that you really

443
00:16:40,320 --> 00:16:43,680
use in modern like embedded systems so

444
00:16:43,680 --> 00:16:46,240
if you don't sign your firmware

445
00:16:46,240 --> 00:16:47,519
then perhaps

446
00:16:47,519 --> 00:16:49,120
a lot of people can just deploy

447
00:16:49,120 --> 00:16:51,120
malicious firmware but in your method

448
00:16:51,120 --> 00:16:52,639
you patch the firmware so you create a

449
00:16:52,639 --> 00:16:54,959
new one and that one is not signed by

450
00:16:54,959 --> 00:16:57,680
the vendor so how do you compare the

451
00:16:57,680 --> 00:16:59,199
trade-off between the

452
00:16:59,199 --> 00:17:01,920
assigned firmware model that does not

453
00:17:01,920 --> 00:17:03,279
allow you wait

454
00:17:03,279 --> 00:17:05,039
to execute or to

455
00:17:05,039 --> 00:17:06,400
to allow people to just patch the

456
00:17:06,400 --> 00:17:08,799
firmware randomly yeah right you are

457
00:17:08,799 --> 00:17:11,359
absolutely right like this is also one

458
00:17:11,359 --> 00:17:13,760
of our limitations that we don't handle

459
00:17:13,760 --> 00:17:16,319
like signed firmware because like some

460
00:17:16,319 --> 00:17:18,640
of those sign firmware checks are

461
00:17:18,640 --> 00:17:21,359
actually exist in the bootloader or like

462
00:17:21,359 --> 00:17:24,559
even lower lower level so basically most

463
00:17:24,559 --> 00:17:27,359
of the user won't have the interface or

464
00:17:27,359 --> 00:17:30,320
access to change all those firmware sign

465
00:17:30,320 --> 00:17:32,320
firmware checks

466
00:17:32,320 --> 00:17:35,520
so basically in our uh

467
00:17:35,520 --> 00:17:37,360
attacks attack

468
00:17:37,360 --> 00:17:39,440
attack model we simply

469
00:17:39,440 --> 00:17:41,520
assume that all those devices we can

470
00:17:41,520 --> 00:17:44,400
have access to don't have like

471
00:17:44,400 --> 00:17:46,559
either sign firmware or encrypted

472
00:17:46,559 --> 00:17:48,720
firmware et cetera

473
00:17:48,720 --> 00:17:52,320
okay thank you thanks

474
00:17:53,600 --> 00:17:56,240
so a follow-up question i have is

475
00:17:56,240 --> 00:17:58,400
do you have any idea like how you could

476
00:17:58,400 --> 00:18:00,160
extend this when you don't have access

477
00:18:00,160 --> 00:18:02,480
to the firmware or when you can't

478
00:18:02,480 --> 00:18:04,880
get the firmware out of the device

479
00:18:04,880 --> 00:18:07,840
uh yes actually uh in our implementation

480
00:18:07,840 --> 00:18:10,480
we have uh three ways uh one of one of

481
00:18:10,480 --> 00:18:14,480
the ways we can use jtag to dump the

482
00:18:14,480 --> 00:18:18,160
memory from the embedded device and

483
00:18:18,160 --> 00:18:20,480
if it's also the case we can simply just

484
00:18:20,480 --> 00:18:22,480
refresh the memory back to the embedded

485
00:18:22,480 --> 00:18:25,039
device and continue the execution

486
00:18:25,039 --> 00:18:27,440
and also we have other methods like

487
00:18:27,440 --> 00:18:29,840
injecting code into the operating system

488
00:18:29,840 --> 00:18:32,320
like in one of the our case we use a

489
00:18:32,320 --> 00:18:34,960
linux kernel module to dump the memory

490
00:18:34,960 --> 00:18:37,360
from the embedded system and

491
00:18:37,360 --> 00:18:39,360
i would assume that we can simply use

492
00:18:39,360 --> 00:18:42,320
the same method to flash it back or

493
00:18:42,320 --> 00:18:44,320
flash back the changes we made in the

494
00:18:44,320 --> 00:18:46,559
memory and back to the embedded system

495
00:18:46,559 --> 00:18:48,720
and continue the execution

496
00:18:48,720 --> 00:18:50,640
in case we don't have access to firmware

497
00:18:50,640 --> 00:18:53,360
so was there any case you encountered

498
00:18:53,360 --> 00:18:57,799
that you couldn't get the firmware out

499
00:18:57,919 --> 00:18:59,679
no actually all our

500
00:18:59,679 --> 00:19:02,480
evaluations we have we all have those

501
00:19:02,480 --> 00:19:04,320
firmware binary

502
00:19:04,320 --> 00:19:06,480
which could basically download it from

503
00:19:06,480 --> 00:19:08,720
some of the vendor website

504
00:19:08,720 --> 00:19:12,960
but i i think uh like uh those like

505
00:19:12,960 --> 00:19:16,559
refresh the memory should also work

506
00:19:16,559 --> 00:19:18,799
because it's just memory patching the

507
00:19:18,799 --> 00:19:20,240
embedded system

508
00:19:20,240 --> 00:19:24,760
well thank you okay thanks

