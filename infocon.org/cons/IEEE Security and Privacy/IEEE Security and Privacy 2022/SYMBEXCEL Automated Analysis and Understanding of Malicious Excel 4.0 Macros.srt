1
00:00:01,199 --> 00:00:02,560
okay

2
00:00:02,560 --> 00:00:04,799
hello everyone thank you johannes my

3
00:00:04,799 --> 00:00:06,640
name is nicole aruguayo and today i will

4
00:00:06,640 --> 00:00:09,200
present our paper simxcell

5
00:00:09,200 --> 00:00:11,679
automated analysis and understanding of

6
00:00:11,679 --> 00:00:14,559
malicious xl4 macros which was developed

7
00:00:14,559 --> 00:00:16,480
as a collaboration in between uc santa

8
00:00:16,480 --> 00:00:19,600
barbara and vmware

9
00:00:19,600 --> 00:00:21,920
excel for macros are a very old feature

10
00:00:21,920 --> 00:00:24,080
of microsoft excel which was introduced

11
00:00:24,080 --> 00:00:27,039
more than 25 years ago as a precursor of

12
00:00:27,039 --> 00:00:29,199
vba macros

13
00:00:29,199 --> 00:00:31,279
excel for macros are extremely powerful

14
00:00:31,279 --> 00:00:33,840
as they can interact to the windows api

15
00:00:33,840 --> 00:00:35,840
and therefore directly interact with the

16
00:00:35,840 --> 00:00:38,719
underlying operating system for example

17
00:00:38,719 --> 00:00:41,280
opening files reading files

18
00:00:41,280 --> 00:00:43,440
creating new files or even executing

19
00:00:43,440 --> 00:00:46,000
shell commands or executing executable

20
00:00:46,000 --> 00:00:46,960
files

21
00:00:46,960 --> 00:00:49,680
and for this reason and because they are

22
00:00:49,680 --> 00:00:52,320
extremely intuitive and easy to program

23
00:00:52,320 --> 00:00:54,879
even without any programming experience

24
00:00:54,879 --> 00:00:56,640
they are still commonly used for benign

25
00:00:56,640 --> 00:00:58,800
purposes

26
00:00:58,800 --> 00:01:01,280
however the same power and flexibility

27
00:01:01,280 --> 00:01:03,120
also makes them the perfect target for

28
00:01:03,120 --> 00:01:04,799
being abused for deploying malware to a

29
00:01:04,799 --> 00:01:06,799
target system

30
00:01:06,799 --> 00:01:08,640
as a result we have observed excel for

31
00:01:08,640 --> 00:01:10,880
macros being weaponized since at least

32
00:01:10,880 --> 00:01:13,600
2013 with the recent spike of malicious

33
00:01:13,600 --> 00:01:15,840
usage in the last two years with tens of

34
00:01:15,840 --> 00:01:17,280
thousands of samples submitted to

35
00:01:17,280 --> 00:01:19,360
various total every month

36
00:01:19,360 --> 00:01:21,200
and an interesting and strong evolution

37
00:01:21,200 --> 00:01:24,479
in the obfuscation techniques

38
00:01:25,200 --> 00:01:27,200
the typical infection flows

39
00:01:27,200 --> 00:01:29,439
in this kind of attacks starts with the

40
00:01:29,439 --> 00:01:31,360
delivery of an email

41
00:01:31,360 --> 00:01:33,680
once the target user downloads

42
00:01:33,680 --> 00:01:37,040
the excel file and opens it in excel

43
00:01:37,040 --> 00:01:39,759
the excel format will be then executed

44
00:01:39,759 --> 00:01:41,360
and eventually show its malicious

45
00:01:41,360 --> 00:01:43,360
behavior for example by downloading a

46
00:01:43,360 --> 00:01:45,520
malicious executable and then executing

47
00:01:45,520 --> 00:01:48,720
it to infect the target system

48
00:01:48,720 --> 00:01:51,119
the goal of our analysis at this point

49
00:01:51,119 --> 00:01:52,880
is to understand all the possible

50
00:01:52,880 --> 00:01:55,360
behaviors of such macro and to extract

51
00:01:55,360 --> 00:01:58,159
indicators of compromise or iocs such as

52
00:01:58,159 --> 00:02:02,399
urls ips file names etc which you can

53
00:02:02,399 --> 00:02:04,399
later use for further analysis or

54
00:02:04,399 --> 00:02:06,159
forensics

55
00:02:06,159 --> 00:02:08,399
the problem however is that

56
00:02:08,399 --> 00:02:10,560
these samples are heavily obfuscated as

57
00:02:10,560 --> 00:02:12,480
you can see here in the slide and

58
00:02:12,480 --> 00:02:14,879
defocating such macros has therefore

59
00:02:14,879 --> 00:02:18,640
become an increasingly hard problem

60
00:02:18,640 --> 00:02:20,879
in practice smaller authors use the

61
00:02:20,879 --> 00:02:22,800
functionality in excel for macros to

62
00:02:22,800 --> 00:02:25,040
implement obfuscation

63
00:02:25,040 --> 00:02:27,120
which is typically implemented using the

64
00:02:27,120 --> 00:02:28,959
formula.field function for example to

65
00:02:28,959 --> 00:02:30,800
concatenate multiple characters or

66
00:02:30,800 --> 00:02:32,080
substrings

67
00:02:32,080 --> 00:02:33,840
as you can see in the example and

68
00:02:33,840 --> 00:02:35,440
dynamically generate a payload which

69
00:02:35,440 --> 00:02:38,239
will be later executed

70
00:02:38,239 --> 00:02:40,480
this type of code generation shows how

71
00:02:40,480 --> 00:02:43,040
we will need to evaluate the code as it

72
00:02:43,040 --> 00:02:44,480
is constructed

73
00:02:44,480 --> 00:02:46,800
and also introduce and also how some

74
00:02:46,800 --> 00:02:49,440
ambiguity in between the code

75
00:02:49,440 --> 00:02:50,879
and data in the spreadsheet is

76
00:02:50,879 --> 00:02:52,879
introduced

77
00:02:52,879 --> 00:02:54,640
and one of our authors also implement

78
00:02:54,640 --> 00:02:57,040
environmental checks to test whether a

79
00:02:57,040 --> 00:03:00,159
sandbox is present or not in particular

80
00:03:00,159 --> 00:03:01,599
by triggering some kind of user

81
00:03:01,599 --> 00:03:03,280
interaction checking for the display

82
00:03:03,280 --> 00:03:05,120
size or for the consistency of the

83
00:03:05,120 --> 00:03:07,519
system clock for example

84
00:03:07,519 --> 00:03:09,440
and all these techniques can be combined

85
00:03:09,440 --> 00:03:12,159
in order to introduce time dependency or

86
00:03:12,159 --> 00:03:15,120
environment dependency in the macro

87
00:03:15,120 --> 00:03:17,280
so getting back to our example you can

88
00:03:17,280 --> 00:03:19,920
see how this modeler uses some

89
00:03:19,920 --> 00:03:22,159
the day of the month in order to rotate

90
00:03:22,159 --> 00:03:24,560
some hard-coded integers that reside

91
00:03:24,560 --> 00:03:26,319
somewhere else in the macro and

92
00:03:26,319 --> 00:03:28,000
therefore dynamically generate the

93
00:03:28,000 --> 00:03:29,120
payload

94
00:03:29,120 --> 00:03:31,440
whenever this payload is executed on the

95
00:03:31,440 --> 00:03:33,920
incorrect day it will then obfuscate an

96
00:03:33,920 --> 00:03:36,560
invalid and non-functional payload

97
00:03:36,560 --> 00:03:38,319
however when we execute it on the

98
00:03:38,319 --> 00:03:41,200
correct day and only on that day it will

99
00:03:41,200 --> 00:03:43,120
defuscate correctly and therefore in

100
00:03:43,120 --> 00:03:46,400
fact the target system

101
00:03:46,400 --> 00:03:48,720
so due to these analysis challenges

102
00:03:48,720 --> 00:03:51,519
manual extracting excel for macros

103
00:03:51,519 --> 00:03:53,840
has become an extremely tedious and

104
00:03:53,840 --> 00:03:56,400
error-prone process that often requires

105
00:03:56,400 --> 00:03:58,319
a malware analyst to manually step to

106
00:03:58,319 --> 00:04:00,480
the macro cell after cell

107
00:04:00,480 --> 00:04:02,480
and so the question is

108
00:04:02,480 --> 00:04:04,239
can we automate this deforestation

109
00:04:04,239 --> 00:04:05,200
process

110
00:04:05,200 --> 00:04:06,560
in the presence of environmental

111
00:04:06,560 --> 00:04:08,319
dependency

112
00:04:08,319 --> 00:04:10,159
but let me first introduce the basic

113
00:04:10,159 --> 00:04:12,640
components of an excel 4 macro

114
00:04:12,640 --> 00:04:16,560
which are functions formulas and macros

115
00:04:16,560 --> 00:04:18,720
a function is the smallest entity that

116
00:04:18,720 --> 00:04:20,720
provides some essential functionality in

117
00:04:20,720 --> 00:04:23,600
the excel format for example the alert

118
00:04:23,600 --> 00:04:24,639
function

119
00:04:24,639 --> 00:04:27,040
or arithmetic instructions

120
00:04:27,040 --> 00:04:29,840
or boolean instructions

121
00:04:30,800 --> 00:04:33,120
a formula is essentially

122
00:04:33,120 --> 00:04:36,000
the content of a cell but more precisely

123
00:04:36,000 --> 00:04:38,800
is the invocation of a function

124
00:04:38,800 --> 00:04:40,880
with possibly nested invocation as an

125
00:04:40,880 --> 00:04:43,840
argument

126
00:04:44,000 --> 00:04:47,120
a macro finally is the sequence of

127
00:04:47,120 --> 00:04:48,960
formulas that will be executed as a

128
00:04:48,960 --> 00:04:50,000
whole

129
00:04:50,000 --> 00:04:51,919
at this point the control and the flow

130
00:04:51,919 --> 00:04:54,880
in an xl4 macro are rather intuitive the

131
00:04:54,880 --> 00:04:57,759
entry point is an arbitrary cell

132
00:04:57,759 --> 00:04:59,360
um in the spreadsheet from which the

133
00:04:59,360 --> 00:05:01,600
execution will start once we identify

134
00:05:01,600 --> 00:05:03,280
the entry point

135
00:05:03,280 --> 00:05:05,039
the control flow will then be passed to

136
00:05:05,039 --> 00:05:06,639
the cell lying directly below the

137
00:05:06,639 --> 00:05:08,800
currently executing cell

138
00:05:08,800 --> 00:05:11,680
and so on and so on

139
00:05:11,680 --> 00:05:13,440
some of these functions for example the

140
00:05:13,440 --> 00:05:16,000
formula and formula.field function allow

141
00:05:16,000 --> 00:05:17,919
to copy strings or concatenate

142
00:05:17,919 --> 00:05:20,240
characters in a target cell therefore

143
00:05:20,240 --> 00:05:23,199
enabling data flow

144
00:05:23,199 --> 00:05:25,759
finally some functions such as the go to

145
00:05:25,759 --> 00:05:28,400
function run return or even user defined

146
00:05:28,400 --> 00:05:29,440
functions

147
00:05:29,440 --> 00:05:31,759
allow to redirect the control flow to a

148
00:05:31,759 --> 00:05:33,840
target cell which in this case is the

149
00:05:33,840 --> 00:05:35,360
cell b1

150
00:05:35,360 --> 00:05:37,440
where the execution will continue and

151
00:05:37,440 --> 00:05:39,440
finally the mark will determinate when

152
00:05:39,440 --> 00:05:41,280
hitting the halt instruction in the cell

153
00:05:41,280 --> 00:05:43,758
b2

154
00:05:44,720 --> 00:05:46,960
now that we understand how an xl4 macro

155
00:05:46,960 --> 00:05:48,560
works

156
00:05:48,560 --> 00:05:50,960
the basic idea behind sim excel is that

157
00:05:50,960 --> 00:05:53,360
they can use symbolic execution in order

158
00:05:53,360 --> 00:05:55,360
to model all the possible execution

159
00:05:55,360 --> 00:05:57,759
paths in a macro while keeping the

160
00:05:57,759 --> 00:06:00,160
environment symbolic which allows us to

161
00:06:00,160 --> 00:06:02,240
fork the execution whenever we hit a

162
00:06:02,240 --> 00:06:04,319
conditional instruction and once we

163
00:06:04,319 --> 00:06:05,600
reach an interesting point in the

164
00:06:05,600 --> 00:06:06,880
execution

165
00:06:06,880 --> 00:06:09,919
use a constraint solver such as e3 to

166
00:06:09,919 --> 00:06:12,160
generate a con to concretize the

167
00:06:12,160 --> 00:06:13,680
environment and therefore generate a

168
00:06:13,680 --> 00:06:15,680
valid configuration that we can use to

169
00:06:15,680 --> 00:06:18,880
execute the model sample

170
00:06:19,039 --> 00:06:20,639
the architecture of zimbaxl is

171
00:06:20,639 --> 00:06:23,280
structured in three main components

172
00:06:23,280 --> 00:06:24,400
the loader

173
00:06:24,400 --> 00:06:26,800
the simulation manager and the solver

174
00:06:26,800 --> 00:06:29,280
backend

175
00:06:29,520 --> 00:06:31,280
the loader is the component which is in

176
00:06:31,280 --> 00:06:33,120
charge of parsing the excel file and

177
00:06:33,120 --> 00:06:35,520
mapping it into memory it will create an

178
00:06:35,520 --> 00:06:37,039
initial instance of the simulation

179
00:06:37,039 --> 00:06:39,280
manager initialize its memory and its

180
00:06:39,280 --> 00:06:41,919
environment

181
00:06:42,080 --> 00:06:44,560
the simulation manager then is

182
00:06:44,560 --> 00:06:46,400
essentially a simple state orchestrator

183
00:06:46,400 --> 00:06:47,840
which will keep track of all the

184
00:06:47,840 --> 00:06:50,639
execution states and while stepping from

185
00:06:50,639 --> 00:06:53,360
one state to the to its successors it

186
00:06:53,360 --> 00:06:55,919
will incrementally identify the formulas

187
00:06:55,919 --> 00:06:59,120
as they are being executed

188
00:06:59,840 --> 00:07:02,080
the simulation manager will parse such

189
00:07:02,080 --> 00:07:03,199
formulas

190
00:07:03,199 --> 00:07:06,080
to generate an abstract syntax 3 or ast

191
00:07:06,080 --> 00:07:07,680
and to identify all the functions

192
00:07:07,680 --> 00:07:08,960
invocations

193
00:07:08,960 --> 00:07:10,800
and will then dispatch the execution to

194
00:07:10,800 --> 00:07:13,199
one or more of such version of some

195
00:07:13,199 --> 00:07:16,240
function and others

196
00:07:16,240 --> 00:07:17,759
these handlers can then update the

197
00:07:17,759 --> 00:07:19,840
memory access the environment

198
00:07:19,840 --> 00:07:22,160
generate new constraints or generate new

199
00:07:22,160 --> 00:07:24,960
branches or states

200
00:07:24,960 --> 00:07:27,520
every state has done its own copy of the

201
00:07:27,520 --> 00:07:29,280
memory of the environment and of the

202
00:07:29,280 --> 00:07:30,479
constraints

203
00:07:30,479 --> 00:07:32,080
in the memory you will see values such

204
00:07:32,080 --> 00:07:33,680
as the cell values

205
00:07:33,680 --> 00:07:36,160
formulas or cell information

206
00:07:36,160 --> 00:07:37,840
the environment is what is used by the

207
00:07:37,840 --> 00:07:40,720
malware authors to identify the product

208
00:07:40,720 --> 00:07:41,520
to

209
00:07:41,520 --> 00:07:43,680
spot the presence of a sandbox

210
00:07:43,680 --> 00:07:45,840
for example values such as the window

211
00:07:45,840 --> 00:07:47,919
height or the os version

212
00:07:47,919 --> 00:07:49,919
are initially unknown and different from

213
00:07:49,919 --> 00:07:52,160
target system to target system

214
00:07:52,160 --> 00:07:54,639
and therefore we associate each of these

215
00:07:54,639 --> 00:07:57,280
values with a symbolic variable which

216
00:07:57,280 --> 00:07:59,440
leads us to the constraints

217
00:07:59,440 --> 00:08:00,960
which are a characteristic of the

218
00:08:00,960 --> 00:08:02,879
malware execution and for example a

219
00:08:02,879 --> 00:08:05,039
constraint such as window height greater

220
00:08:05,039 --> 00:08:08,160
than 390 will be generated when we hit a

221
00:08:08,160 --> 00:08:09,599
conditional instruction and then

222
00:08:09,599 --> 00:08:13,840
propagated to successor states

223
00:08:14,240 --> 00:08:16,240
we will now go through a simple example

224
00:08:16,240 --> 00:08:18,400
in order to make this all more clear the

225
00:08:18,400 --> 00:08:21,360
entry point in this case is the cell a1

226
00:08:21,360 --> 00:08:23,120
which will be executed and the char

227
00:08:23,120 --> 00:08:24,319
instruction

228
00:08:24,319 --> 00:08:27,280
will write the value h to the to the

229
00:08:27,280 --> 00:08:30,000
memory of the cell a1

230
00:08:30,000 --> 00:08:31,919
the get.workspace function in the cell

231
00:08:31,919 --> 00:08:32,880
a2

232
00:08:32,880 --> 00:08:34,719
will then read the symbolic variable

233
00:08:34,719 --> 00:08:37,039
workspace 14 from the environment which

234
00:08:37,039 --> 00:08:39,039
corresponds to the window height and

235
00:08:39,039 --> 00:08:42,080
write its value into the memory

236
00:08:42,080 --> 00:08:43,919
we then execute in a cell a3 a

237
00:08:43,919 --> 00:08:46,160
conditional instruction which will write

238
00:08:46,160 --> 00:08:48,800
the value x or l to the cell a3

239
00:08:48,800 --> 00:08:50,240
depending on whether the condition is

240
00:08:50,240 --> 00:08:53,120
true or false

241
00:08:53,120 --> 00:08:55,360
in this case the condition is symbolic

242
00:08:55,360 --> 00:08:57,440
so we will fork the execution generate

243
00:08:57,440 --> 00:09:00,000
two new states or branches and then

244
00:09:00,000 --> 00:09:01,680
enrich such states with the correct

245
00:09:01,680 --> 00:09:04,080
constraints

246
00:09:04,080 --> 00:09:05,839
we will then parse the formula in the

247
00:09:05,839 --> 00:09:07,200
cell a4

248
00:09:07,200 --> 00:09:10,240
and write the result as a new symbolic

249
00:09:10,240 --> 00:09:13,519
expression in the cell a4

250
00:09:13,519 --> 00:09:15,920
the formula that fill function in cell

251
00:09:15,920 --> 00:09:18,560
a5 will then concatenate the first four

252
00:09:18,560 --> 00:09:19,839
characters

253
00:09:19,839 --> 00:09:21,200
in memory

254
00:09:21,200 --> 00:09:23,440
and generate a second symbolic

255
00:09:23,440 --> 00:09:25,920
expression a new symbolic expression and

256
00:09:25,920 --> 00:09:27,519
write its value to the cell which is

257
00:09:27,519 --> 00:09:29,440
lying directly below the currently

258
00:09:29,440 --> 00:09:32,080
executing cell the cell a6

259
00:09:32,080 --> 00:09:33,760
so you notice how when we now step the

260
00:09:33,760 --> 00:09:35,040
execution

261
00:09:35,040 --> 00:09:36,800
we are executing a formula that contains

262
00:09:36,800 --> 00:09:38,800
some symbolic values

263
00:09:38,800 --> 00:09:40,640
and the only meaningful way to execute

264
00:09:40,640 --> 00:09:43,120
such formula is to try to concretize its

265
00:09:43,120 --> 00:09:45,440
value

266
00:09:46,160 --> 00:09:49,200
we quickly realize however that

267
00:09:49,200 --> 00:09:51,120
one of the variables that are used in

268
00:09:51,120 --> 00:09:53,040
such expression is an unconstrained

269
00:09:53,040 --> 00:09:55,360
integer symbolic variable which can have

270
00:09:55,360 --> 00:09:58,399
up to 2 to the power of 32 solutions

271
00:09:58,399 --> 00:10:00,080
which is clearly infeasible to evaluate

272
00:10:00,080 --> 00:10:02,720
dynamically so the question becomes can

273
00:10:02,720 --> 00:10:06,240
we do better and the answer is yes we

274
00:10:06,240 --> 00:10:08,160
introduce various optimizations in order

275
00:10:08,160 --> 00:10:10,560
to make this concretization possible

276
00:10:10,560 --> 00:10:12,240
and feasible

277
00:10:12,240 --> 00:10:14,959
for example observers are intermediate

278
00:10:14,959 --> 00:10:16,240
variables

279
00:10:16,240 --> 00:10:17,680
that we introduce

280
00:10:17,680 --> 00:10:19,040
in order to

281
00:10:19,040 --> 00:10:21,440
hide and observe other sub-expressions

282
00:10:21,440 --> 00:10:23,920
in our symbolic executor

283
00:10:23,920 --> 00:10:26,800
for example in the expression in cell a4

284
00:10:26,800 --> 00:10:29,680
we can wrap the boolean sub-expression

285
00:10:29,680 --> 00:10:32,399
workspace 14 within 390

286
00:10:32,399 --> 00:10:34,560
in a boolean observer which then allows

287
00:10:34,560 --> 00:10:36,320
us to reason more precisely on such

288
00:10:36,320 --> 00:10:38,160
expression and understand that it can

289
00:10:38,160 --> 00:10:41,519
have at most two solutions

290
00:10:41,680 --> 00:10:44,320
we also introduce smart concretizations

291
00:10:44,320 --> 00:10:46,320
and in other words we use the excel for

292
00:10:46,320 --> 00:10:48,560
grammar itself in order to filter the

293
00:10:48,560 --> 00:10:50,720
concretized results

294
00:10:50,720 --> 00:10:52,399
for example in the running example we

295
00:10:52,399 --> 00:10:55,519
still have 6 possible concretizations

296
00:10:55,519 --> 00:10:57,360
however once we use the excel for

297
00:10:57,360 --> 00:10:59,600
grammar to filter these results we

298
00:10:59,600 --> 00:11:01,600
understand that c most of them are

299
00:11:01,600 --> 00:11:03,519
invalid and only one possible

300
00:11:03,519 --> 00:11:04,959
inquirizations

301
00:11:04,959 --> 00:11:07,200
can then be written to the cell a6 to

302
00:11:07,200 --> 00:11:10,399
continue with execution

303
00:11:11,279 --> 00:11:13,920
to evaluate our approach we use a data

304
00:11:13,920 --> 00:11:16,880
set composed of approximately 24.5 000

305
00:11:16,880 --> 00:11:18,880
malicious xl4 macros

306
00:11:18,880 --> 00:11:21,200
which have been detected by vmware using

307
00:11:21,200 --> 00:11:23,040
various techniques including manual

308
00:11:23,040 --> 00:11:24,320
analysis

309
00:11:24,320 --> 00:11:26,320
and then provided to us

310
00:11:26,320 --> 00:11:29,440
some of these samples approximately 5700

311
00:11:29,440 --> 00:11:31,279
are publicly available while the rest is

312
00:11:31,279 --> 00:11:33,120
private

313
00:11:33,120 --> 00:11:35,600
we detect that a significant percentage

314
00:11:35,600 --> 00:11:37,760
of the samples

315
00:11:37,760 --> 00:11:40,079
show some kind of environment dependency

316
00:11:40,079 --> 00:11:41,760
or time dependency

317
00:11:41,760 --> 00:11:43,279
which means that in order to analyze

318
00:11:43,279 --> 00:11:44,800
these samples we will need some type of

319
00:11:44,800 --> 00:11:47,760
symbolic reasoning

320
00:11:47,839 --> 00:11:50,000
we then evaluate steam excel against the

321
00:11:50,000 --> 00:11:52,480
state-of-the-art concrete diffusator xlr

322
00:11:52,480 --> 00:11:55,200
macro deficitor on all the samples

323
00:11:55,200 --> 00:11:56,959
showing the synbax cell can duplicate

324
00:11:56,959 --> 00:11:59,120
correctly almost double the samples than

325
00:11:59,120 --> 00:12:00,720
the state of the art

326
00:12:00,720 --> 00:12:02,880
and against the environment dependent

327
00:12:02,880 --> 00:12:05,519
samples showing that in this case the

328
00:12:05,519 --> 00:12:07,360
pattern or the improvement is even more

329
00:12:07,360 --> 00:12:09,680
evident with symboxally applicating more

330
00:12:09,680 --> 00:12:11,680
than 10 times the samples when compared

331
00:12:11,680 --> 00:12:14,719
to the state of the art

332
00:12:15,279 --> 00:12:17,600
as a practical example we have observed

333
00:12:17,600 --> 00:12:19,519
some complex behavior being encoded in

334
00:12:19,519 --> 00:12:21,519
such macros

335
00:12:21,519 --> 00:12:23,200
in this case you can see a malware

336
00:12:23,200 --> 00:12:24,800
sample which uses multiple

337
00:12:24,800 --> 00:12:27,360
differentiation routines with multiple

338
00:12:27,360 --> 00:12:28,959
infection stages

339
00:12:28,959 --> 00:12:31,440
and while the state of the art can only

340
00:12:31,440 --> 00:12:33,920
duplicate correctly the infection stage

341
00:12:33,920 --> 00:12:36,639
one and infection stage two sim excel

342
00:12:36,639 --> 00:12:38,800
can continually the duplication even

343
00:12:38,800 --> 00:12:40,160
when the environment dependency is

344
00:12:40,160 --> 00:12:41,920
introduced

345
00:12:41,920 --> 00:12:43,279
the green nodes in the slide in

346
00:12:43,279 --> 00:12:46,160
particular represent formulas that are

347
00:12:46,160 --> 00:12:48,000
only duplicated correctly with the

348
00:12:48,000 --> 00:12:50,399
correct environment value

349
00:12:50,399 --> 00:12:52,800
similarly the red node represents

350
00:12:52,800 --> 00:12:54,560
conquerizations that are possible but

351
00:12:54,560 --> 00:12:58,399
not allowed under the excess for grammar

352
00:12:58,880 --> 00:13:01,040
furthermore thanks to our symbolic

353
00:13:01,040 --> 00:13:03,120
execution approach even when the state

354
00:13:03,120 --> 00:13:05,519
of the art cannot identify any malicious

355
00:13:05,519 --> 00:13:08,079
behavior sim excel can identify all the

356
00:13:08,079 --> 00:13:12,320
possible behaviors of the excel marker

357
00:13:12,320 --> 00:13:14,160
in this example

358
00:13:14,160 --> 00:13:16,320
sim excel identifies two behaviors that

359
00:13:16,320 --> 00:13:19,200
are only displayed in 32-bit systems and

360
00:13:19,200 --> 00:13:21,360
that in particular try to iteratively

361
00:13:21,360 --> 00:13:23,600
download a malicious executable file

362
00:13:23,600 --> 00:13:25,920
from different urls and then execute

363
00:13:25,920 --> 00:13:28,079
such file

364
00:13:28,079 --> 00:13:29,920
sim excel also identifies a third

365
00:13:29,920 --> 00:13:32,160
behavior which is only displayed on

366
00:13:32,160 --> 00:13:35,200
64-bit system that will

367
00:13:35,200 --> 00:13:38,240
generate dynamically a vbs file right to

368
00:13:38,240 --> 00:13:40,800
the file system and then execute it in

369
00:13:40,800 --> 00:13:42,240
order to download

370
00:13:42,240 --> 00:13:44,399
a secondary payload which is then

371
00:13:44,399 --> 00:13:48,639
executed in different a different way

372
00:13:48,639 --> 00:13:50,959
as a result sim excel can extract

373
00:13:50,959 --> 00:13:52,880
indicators of compromise that would

374
00:13:52,880 --> 00:13:54,800
otherwise be impossible to extract using

375
00:13:54,800 --> 00:13:56,639
the state of the art

376
00:13:56,639 --> 00:13:59,440
for example the file names or urls that

377
00:13:59,440 --> 00:14:01,600
you can see in the slide

378
00:14:01,600 --> 00:14:03,360
we show that simplex cell can extract

379
00:14:03,360 --> 00:14:07,279
more urls file names domains and ips and

380
00:14:07,279 --> 00:14:09,199
provide a more in-depth discussion on

381
00:14:09,199 --> 00:14:11,199
such indicators of compromise in our

382
00:14:11,199 --> 00:14:13,519
paper

383
00:14:13,839 --> 00:14:16,639
finally we perform the temporal analysis

384
00:14:16,639 --> 00:14:20,160
of the excel for macros in our data set

385
00:14:20,160 --> 00:14:21,839
in particular we observe an interesting

386
00:14:21,839 --> 00:14:23,600
evolution mainly in the triggering

387
00:14:23,600 --> 00:14:26,480
mechanisms in the obfuscation sandbox

388
00:14:26,480 --> 00:14:30,639
detection and anti-analysis techniques

389
00:14:30,639 --> 00:14:32,880
in summary we study and classify such

390
00:14:32,880 --> 00:14:34,480
behaviors

391
00:14:34,480 --> 00:14:35,199
and

392
00:14:35,199 --> 00:14:39,279
show their evolution in the slide here

393
00:14:39,279 --> 00:14:41,519
by correlating them these

394
00:14:41,519 --> 00:14:43,760
distinct behaviors with the antivirus

395
00:14:43,760 --> 00:14:46,720
labels or av labels from virustotal we

396
00:14:46,720 --> 00:14:49,199
can discover some interesting patterns

397
00:14:49,199 --> 00:14:51,760
for example you can see how the clusters

398
00:14:51,760 --> 00:14:54,639
1 2 and 3 all belong to the z-loader

399
00:14:54,639 --> 00:14:56,000
families

400
00:14:56,000 --> 00:14:57,920
and from our analysis they show a

401
00:14:57,920 --> 00:14:59,920
similar base behavior

402
00:14:59,920 --> 00:15:01,279
therefore

403
00:15:01,279 --> 00:15:03,680
since they have some significant changes

404
00:15:03,680 --> 00:15:06,240
in the evasion techniques used we can

405
00:15:06,240 --> 00:15:09,440
infer that these three clusters were

406
00:15:09,440 --> 00:15:12,160
developed and deployed in subsequence as

407
00:15:12,160 --> 00:15:16,160
waves of the z-loader family

408
00:15:16,160 --> 00:15:18,560
and in order to evade

409
00:15:18,560 --> 00:15:20,000
some analysis techniques that were

410
00:15:20,000 --> 00:15:22,959
introduced at the time

411
00:15:24,320 --> 00:15:26,480
in conclusion we can safely say that

412
00:15:26,480 --> 00:15:28,560
defuscating excel 4 macros is still a

413
00:15:28,560 --> 00:15:30,639
hard problem with many of the samples

414
00:15:30,639 --> 00:15:32,399
still having a very low detection rate

415
00:15:32,399 --> 00:15:34,480
in various total and some of them still

416
00:15:34,480 --> 00:15:36,560
being undetected

417
00:15:36,560 --> 00:15:38,800
sim xl however can allow the analysis of

418
00:15:38,800 --> 00:15:40,079
samples that would otherwise be

419
00:15:40,079 --> 00:15:42,000
impossible to differentiate

420
00:15:42,000 --> 00:15:43,759
with the state of the art

421
00:15:43,759 --> 00:15:46,160
our code is public in the ucsb cyclab

422
00:15:46,160 --> 00:15:48,720
repository in github please check it out

423
00:15:48,720 --> 00:15:50,240
if you have any question i'm happy to

424
00:15:50,240 --> 00:15:52,800
answer me happy to answer them or please

425
00:15:52,800 --> 00:15:54,399
contact me at the email here in the

426
00:15:54,399 --> 00:15:55,440
slide

427
00:15:55,440 --> 00:15:57,839
thank you

428
00:16:04,880 --> 00:16:05,920
all right we have time for some

429
00:16:05,920 --> 00:16:08,399
questions please walk up to the mic yeah

430
00:16:08,399 --> 00:16:10,639
i wanted to ask whether um you needed to

431
00:16:10,639 --> 00:16:12,480
introduce any sort of path pruning

432
00:16:12,480 --> 00:16:14,399
heuristics or whether the macros that

433
00:16:14,399 --> 00:16:15,920
you're trying to de-obfuscate had simple

434
00:16:15,920 --> 00:16:17,199
enough control flow that that just

435
00:16:17,199 --> 00:16:20,160
didn't come into scope

436
00:16:20,639 --> 00:16:21,440
yes

437
00:16:21,440 --> 00:16:24,720
so um as i was describing in in the

438
00:16:24,720 --> 00:16:27,279
slides an example of

439
00:16:27,279 --> 00:16:28,880
kind of path prominent that we

440
00:16:28,880 --> 00:16:30,240
introduced is in this smart

441
00:16:30,240 --> 00:16:32,000
concretization technique

442
00:16:32,000 --> 00:16:33,839
in in some ways some kind of path

443
00:16:33,839 --> 00:16:35,120
pruning since we try to identify

444
00:16:35,120 --> 00:16:36,800
formulas that would otherwise be

445
00:16:36,800 --> 00:16:38,880
impossible to execute and prune that

446
00:16:38,880 --> 00:16:40,079
path

447
00:16:40,079 --> 00:16:42,000
otherwise

448
00:16:42,000 --> 00:16:44,160
symbolic execution can clearly explode

449
00:16:44,160 --> 00:16:46,000
we can have path explosion

450
00:16:46,000 --> 00:16:48,079
in practice we didn't observe it in the

451
00:16:48,079 --> 00:16:50,079
current malware samples so it was not

452
00:16:50,079 --> 00:16:51,920
necessary to introduce so you didn't

453
00:16:51,920 --> 00:16:53,440
have to resort to anything like cutting

454
00:16:53,440 --> 00:16:55,440
off pads after some fixed yes or that

455
00:16:55,440 --> 00:16:59,680
was not necessary yet awesome very cool

456
00:17:00,320 --> 00:17:02,639
hi uh i was wondering how hard it would

457
00:17:02,639 --> 00:17:04,400
be for a malicious file to make your

458
00:17:04,400 --> 00:17:06,319
time out

459
00:17:06,319 --> 00:17:08,000
such that you you can't actually do the

460
00:17:08,000 --> 00:17:10,000
analysis i i'm assuming it i would

461
00:17:10,000 --> 00:17:13,760
expect that to be very possible

462
00:17:13,760 --> 00:17:15,039
and

463
00:17:15,039 --> 00:17:15,760
it

464
00:17:15,760 --> 00:17:18,079
again doesn't happen yet but i can

465
00:17:18,079 --> 00:17:20,319
expect malware samples to introduce some

466
00:17:20,319 --> 00:17:22,400
loop or to try to make the symbolic

467
00:17:22,400 --> 00:17:25,039
execution like going bad explosion and

468
00:17:25,039 --> 00:17:26,480
therefore timeout

469
00:17:26,480 --> 00:17:28,720
thanks

470
00:17:29,440 --> 00:17:31,360
very nice doc i have a question also

471
00:17:31,360 --> 00:17:33,520
related to path pruning and also like

472
00:17:33,520 --> 00:17:36,000
time out because i

473
00:17:36,000 --> 00:17:37,919
my question might be a little bit more

474
00:17:37,919 --> 00:17:39,520
initial you know comparing to those

475
00:17:39,520 --> 00:17:41,200
questions i just wonder

476
00:17:41,200 --> 00:17:43,520
you know for for decimal execution for

477
00:17:43,520 --> 00:17:44,559
example

478
00:17:44,559 --> 00:17:46,720
excels malware's cases

479
00:17:46,720 --> 00:17:48,720
how bad is this path explosion problem

480
00:17:48,720 --> 00:17:51,120
is they're really bad like we do need

481
00:17:51,120 --> 00:17:53,600
path curling or it's really it's not

482
00:17:53,600 --> 00:17:56,400
that bad like have you checked like the

483
00:17:56,400 --> 00:17:58,799
the the comparison of no pathfinding

484
00:17:58,799 --> 00:18:01,840
versus path burning and is it really

485
00:18:01,840 --> 00:18:04,240
necessary to do pathway

486
00:18:04,240 --> 00:18:06,480
um no we didn't check we didn't observe

487
00:18:06,480 --> 00:18:07,679
samples

488
00:18:07,679 --> 00:18:09,280
um

489
00:18:09,280 --> 00:18:11,039
i i would guess that in the future it

490
00:18:11,039 --> 00:18:13,039
will be introduced especially with this

491
00:18:13,039 --> 00:18:14,640
approach being released i would expect

492
00:18:14,640 --> 00:18:16,720
samples to try to introduce ways to

493
00:18:16,720 --> 00:18:18,320
evade our approach

494
00:18:18,320 --> 00:18:20,160
and we can then update a tool to try to

495
00:18:20,160 --> 00:18:22,480
identify parts that would be more

496
00:18:22,480 --> 00:18:24,320
important to explore first

497
00:18:24,320 --> 00:18:26,640
or introduce some kind of bot pruning

498
00:18:26,640 --> 00:18:30,400
thank you i have one question so

499
00:18:30,400 --> 00:18:32,960
do you know are people still writing new

500
00:18:32,960 --> 00:18:36,080
such macros so benign such new macros or

501
00:18:36,080 --> 00:18:38,480
is it just old uh legacy code that

502
00:18:38,480 --> 00:18:41,039
people are still using in companies of

503
00:18:41,039 --> 00:18:43,760
benign macros

504
00:18:44,080 --> 00:18:46,880
i don't know we didn't we don't have a

505
00:18:46,880 --> 00:18:49,840
good data set of benign macros

506
00:18:49,840 --> 00:18:51,679
um

507
00:18:51,679 --> 00:18:52,720
so i

508
00:18:52,720 --> 00:18:55,120
cannot answer the the question because

509
00:18:55,120 --> 00:18:56,559
maybe it's time to

510
00:18:56,559 --> 00:18:58,559
disable those and to just whitelist the

511
00:18:58,559 --> 00:19:00,000
ones that are still around or something

512
00:19:00,000 --> 00:19:02,000
like that no i can expect though people

513
00:19:02,000 --> 00:19:04,000
to steal um actually the brightest

514
00:19:04,000 --> 00:19:05,039
markers

515
00:19:05,039 --> 00:19:06,720
as as i was saying in the beginning of

516
00:19:06,720 --> 00:19:08,720
the talk they are very easy to write so

517
00:19:08,720 --> 00:19:09,840
even people that don't have any

518
00:19:09,840 --> 00:19:12,480
programming experience can

519
00:19:12,480 --> 00:19:14,000
pop up excel

520
00:19:14,000 --> 00:19:15,280
and

521
00:19:15,280 --> 00:19:17,440
implement some kind of analysis that

522
00:19:17,440 --> 00:19:19,679
they need to to do for the data so i

523
00:19:19,679 --> 00:19:22,480
would expect this to be still used

524
00:19:22,480 --> 00:19:24,320
certainly legacy but i would expect

525
00:19:24,320 --> 00:19:26,720
neomarkus to still be implemented

526
00:19:26,720 --> 00:19:30,919
all right let's thank speaker again

