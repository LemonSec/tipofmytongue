1
00:00:01,620 --> 00:00:04,140
awesome thanks so much okay so I'm going

2
00:00:04,140 --> 00:00:06,120
to be talking about Waldo a private time

3
00:00:06,120 --> 00:00:07,680
series database from function secret

4
00:00:07,680 --> 00:00:08,880
sharing

5
00:00:08,880 --> 00:00:10,980
this is Joint work with mayank reluke

6
00:00:10,980 --> 00:00:13,620
and Yan at UC Berkeley

7
00:00:13,620 --> 00:00:15,540
so there's a growing trend of relying on

8
00:00:15,540 --> 00:00:17,820
cloud databases to store and query time

9
00:00:17,820 --> 00:00:19,260
series data

10
00:00:19,260 --> 00:00:21,420
so examples of this include Smart Homes

11
00:00:21,420 --> 00:00:23,640
industrial iot and remote patient

12
00:00:23,640 --> 00:00:24,900
monitoring

13
00:00:24,900 --> 00:00:26,939
one challenge with these applications is

14
00:00:26,939 --> 00:00:28,980
that the data is often sensitive and so

15
00:00:28,980 --> 00:00:31,619
there's a danger of server compromise

16
00:00:31,619 --> 00:00:33,239
so to make this a bit more concrete

17
00:00:33,239 --> 00:00:34,980
let's consider the example of remote

18
00:00:34,980 --> 00:00:36,660
patient monitoring

19
00:00:36,660 --> 00:00:39,120
so we have a patient and a database and

20
00:00:39,120 --> 00:00:40,680
this database is going to store features

21
00:00:40,680 --> 00:00:43,680
like a timestamp systolic and diastolic

22
00:00:43,680 --> 00:00:45,239
blood pressure measurements and a heart

23
00:00:45,239 --> 00:00:46,140
rate

24
00:00:46,140 --> 00:00:47,820
so over time the patient is going to

25
00:00:47,820 --> 00:00:49,800
send the database records and the

26
00:00:49,800 --> 00:00:50,820
records are going to populate the

27
00:00:50,820 --> 00:00:51,840
database

28
00:00:51,840 --> 00:00:54,780
and then at some later point in time we

29
00:00:54,780 --> 00:00:56,399
have some doctor that wants to make some

30
00:00:56,399 --> 00:00:58,980
query about the patient's data so for

31
00:00:58,980 --> 00:01:00,960
example let's say the doctor wants to

32
00:01:00,960 --> 00:01:02,879
compute the average heart rate where the

33
00:01:02,879 --> 00:01:04,680
time is between some interval the

34
00:01:04,680 --> 00:01:06,060
systolic blood pressure is greater than

35
00:01:06,060 --> 00:01:09,420
110 and diastolic is greater than 80.

36
00:01:09,420 --> 00:01:10,680
um so here we want to compute some

37
00:01:10,680 --> 00:01:12,900
aggregate based on some multi-preticate

38
00:01:12,900 --> 00:01:14,340
filter

39
00:01:14,340 --> 00:01:16,680
now we're also worried about this the an

40
00:01:16,680 --> 00:01:18,840
attacker compromising the database

41
00:01:18,840 --> 00:01:20,400
so we'd like to protect the data

42
00:01:20,400 --> 00:01:22,140
contents as well as the query filter

43
00:01:22,140 --> 00:01:25,439
values and by query filter values I mean

44
00:01:25,439 --> 00:01:27,659
the values in these predicates so what

45
00:01:27,659 --> 00:01:30,659
the time interval is between the 110 and

46
00:01:30,659 --> 00:01:32,939
systolic greater than 110 and the 80 in

47
00:01:32,939 --> 00:01:36,000
diastolic greater than 80.

48
00:01:36,000 --> 00:01:37,500
um so it's been a lot of Prior work on

49
00:01:37,500 --> 00:01:39,600
encrypted databases and these allow us

50
00:01:39,600 --> 00:01:42,780
to run queries over encrypted data but

51
00:01:42,780 --> 00:01:44,220
one challenge with all these Solutions

52
00:01:44,220 --> 00:01:46,259
is that they all have leakage so the

53
00:01:46,259 --> 00:01:48,479
server learns some information that can

54
00:01:48,479 --> 00:01:50,460
be exploited to recover the data and or

55
00:01:50,460 --> 00:01:53,040
the query so how the server accesses the

56
00:01:53,040 --> 00:01:54,659
data can reveal information about the

57
00:01:54,659 --> 00:01:56,820
underlying data contents or the query so

58
00:01:56,820 --> 00:01:58,259
this could be for example how many

59
00:01:58,259 --> 00:02:01,320
records match a particular predicate

60
00:02:01,320 --> 00:02:03,119
so our goal is to protect these search

61
00:02:03,119 --> 00:02:05,399
access patterns so how the server

62
00:02:05,399 --> 00:02:07,380
accesses data should not reveal

63
00:02:07,380 --> 00:02:09,360
information about the data or the query

64
00:02:09,360 --> 00:02:11,340
filter values

65
00:02:11,340 --> 00:02:13,319
so one challenge in finding a solution

66
00:02:13,319 --> 00:02:15,120
is that tools for hiding search access

67
00:02:15,120 --> 00:02:17,459
patterns are expensive so examples of

68
00:02:17,459 --> 00:02:20,760
these tools include Oram or MPC we talk

69
00:02:20,760 --> 00:02:22,560
in the paper a bit about why these are

70
00:02:22,560 --> 00:02:24,060
expensive in the encrypted time series

71
00:02:24,060 --> 00:02:25,800
database setting

72
00:02:25,800 --> 00:02:27,480
uh and we'd like to achieve these three

73
00:02:27,480 --> 00:02:29,760
requirements so functionality security

74
00:02:29,760 --> 00:02:31,019
and efficiency

75
00:02:31,019 --> 00:02:32,760
so for functionality we want to be able

76
00:02:32,760 --> 00:02:34,739
to support multi-predicate aggregation

77
00:02:34,739 --> 00:02:36,900
queries while protecting the data

78
00:02:36,900 --> 00:02:39,599
contents query filter values and search

79
00:02:39,599 --> 00:02:41,819
access patterns and we'd also like good

80
00:02:41,819 --> 00:02:44,160
efficiency so good latency and

81
00:02:44,160 --> 00:02:45,840
communication

82
00:02:45,840 --> 00:02:48,120
so we present Waldo which achieves all

83
00:02:48,120 --> 00:02:50,040
three of these

84
00:02:50,040 --> 00:02:51,540
so we consider the following threat

85
00:02:51,540 --> 00:02:53,400
model so we have three non-cluding

86
00:02:53,400 --> 00:02:55,260
servers so we assume these three servers

87
00:02:55,260 --> 00:02:56,940
are deployed in different trust domains

88
00:02:56,940 --> 00:02:59,459
such that if an attacker compromises one

89
00:02:59,459 --> 00:03:00,720
of them it's not straightforward to

90
00:03:00,720 --> 00:03:02,159
compromise the other

91
00:03:02,159 --> 00:03:03,780
and we have clients interacting with

92
00:03:03,780 --> 00:03:06,659
these servers so some clients in the

93
00:03:06,659 --> 00:03:08,159
remote patient monitoring setting might

94
00:03:08,159 --> 00:03:09,900
be patients that are uploading data

95
00:03:09,900 --> 00:03:11,640
others might be doctors that are

96
00:03:11,640 --> 00:03:13,500
querying the data

97
00:03:13,500 --> 00:03:16,019
so we can tolerate at most one malicious

98
00:03:16,019 --> 00:03:17,640
compromise so we operate in the

99
00:03:17,640 --> 00:03:19,680
three-party honest majority setting

100
00:03:19,680 --> 00:03:21,720
and in this setting Waldo protects the

101
00:03:21,720 --> 00:03:24,300
data contents query filter values and

102
00:03:24,300 --> 00:03:25,920
search access patterns

103
00:03:25,920 --> 00:03:27,720
and the attacker is allowed to learn the

104
00:03:27,720 --> 00:03:29,819
database schema as well as the query

105
00:03:29,819 --> 00:03:31,680
structure

106
00:03:31,680 --> 00:03:33,360
so to make this a bit more concrete

107
00:03:33,360 --> 00:03:36,420
let's go back to the original example so

108
00:03:36,420 --> 00:03:38,099
in the setting the attacker doesn't

109
00:03:38,099 --> 00:03:40,140
learn the data contents it just learns

110
00:03:40,140 --> 00:03:42,000
an opaque identifier associated with

111
00:03:42,000 --> 00:03:44,879
each of these features so this F1 F2 F3

112
00:03:44,879 --> 00:03:46,200
F4

113
00:03:46,200 --> 00:03:48,120
and when the doctor makes a quarry the

114
00:03:48,120 --> 00:03:50,099
attacker can see that the doctor is

115
00:03:50,099 --> 00:03:52,200
querying the average of feature F4 where

116
00:03:52,200 --> 00:03:54,900
F1 is between some interval and F2 is

117
00:03:54,900 --> 00:03:57,480
greater than some value or F3 is greater

118
00:03:57,480 --> 00:03:59,280
than some other value

119
00:03:59,280 --> 00:04:01,560
also the attacker can't see these search

120
00:04:01,560 --> 00:04:04,040
access patterns so Waldo protects these

121
00:04:04,040 --> 00:04:06,599
so for example it can't see which

122
00:04:06,599 --> 00:04:08,700
records match a particular predicate or

123
00:04:08,700 --> 00:04:10,439
even how many records match a particular

124
00:04:10,439 --> 00:04:12,540
predicate

125
00:04:12,540 --> 00:04:13,920
so for the rest of this talk I'm just

126
00:04:13,920 --> 00:04:15,900
going to use the simple notation so we

127
00:04:15,900 --> 00:04:18,060
split some value X in the ring to VL and

128
00:04:18,060 --> 00:04:20,160
just shares X1 through xn such that

129
00:04:20,160 --> 00:04:21,478
summing them together gives us the

130
00:04:21,478 --> 00:04:23,759
original value X

131
00:04:23,759 --> 00:04:25,860
and we identify function secret sharing

132
00:04:25,860 --> 00:04:27,780
as being particularly well suited to our

133
00:04:27,780 --> 00:04:28,740
setting

134
00:04:28,740 --> 00:04:30,900
so a two-party function secret sharing

135
00:04:30,900 --> 00:04:33,540
scheme for the function f splits F into

136
00:04:33,540 --> 00:04:36,780
two succinct shares or keys such that

137
00:04:36,780 --> 00:04:39,000
given a key parties can compute shares

138
00:04:39,000 --> 00:04:42,060
of of the function f evaluated X without

139
00:04:42,060 --> 00:04:44,759
learning the original function f

140
00:04:44,759 --> 00:04:46,800
so to make this a bit more concrete we

141
00:04:46,800 --> 00:04:48,600
can consider the syntax so we have two

142
00:04:48,600 --> 00:04:51,780
functions gen and eval so gen given some

143
00:04:51,780 --> 00:04:53,880
function f is going to generate Keys K1

144
00:04:53,880 --> 00:04:56,220
and K2 such that each key is going to

145
00:04:56,220 --> 00:04:58,380
hide the function f so just given one of

146
00:04:58,380 --> 00:05:00,240
these Keys the party can't learn the

147
00:05:00,240 --> 00:05:02,160
original function f

148
00:05:02,160 --> 00:05:03,960
we also have some eval function we're

149
00:05:03,960 --> 00:05:06,600
given one of these keys in a point x we

150
00:05:06,600 --> 00:05:08,880
can output the function f evaluated at X

151
00:05:08,880 --> 00:05:11,880
so if we sum up the evaluation of key K1

152
00:05:11,880 --> 00:05:14,100
at point x and the evaluation of key K2

153
00:05:14,100 --> 00:05:16,560
at X we'll get the function f evaluated

154
00:05:16,560 --> 00:05:18,479
at X

155
00:05:18,479 --> 00:05:20,220
so efficient constructions exist for

156
00:05:20,220 --> 00:05:22,259
Point function for Point functions and

157
00:05:22,259 --> 00:05:24,060
comparison functions where Point

158
00:05:24,060 --> 00:05:25,919
functions evaluate to some value at a

159
00:05:25,919 --> 00:05:27,539
particular point and zero everywhere

160
00:05:27,539 --> 00:05:29,580
else and comparison functions evaluate

161
00:05:29,580 --> 00:05:31,680
to a particular value in a specific

162
00:05:31,680 --> 00:05:34,100
range

163
00:05:34,320 --> 00:05:36,240
um so from from function secret sharing

164
00:05:36,240 --> 00:05:37,560
it's pretty straightforward to build

165
00:05:37,560 --> 00:05:40,620
aggregate queries for public data so I'm

166
00:05:40,620 --> 00:05:42,660
going to start off building aggregate

167
00:05:42,660 --> 00:05:44,820
queries for public data in the two-party

168
00:05:44,820 --> 00:05:46,320
setting where we consider semi honest

169
00:05:46,320 --> 00:05:48,720
servers and I'll slowly build up to

170
00:05:48,720 --> 00:05:51,060
private Court to queries on private data

171
00:05:51,060 --> 00:05:53,220
in the three-party setting uh won't

172
00:05:53,220 --> 00:05:54,840
quite get to malicious security you can

173
00:05:54,840 --> 00:05:57,660
see our paper for details on that

174
00:05:57,660 --> 00:05:58,919
um so let's say the doctor wants to

175
00:05:58,919 --> 00:06:00,840
compute the sum of all the medical costs

176
00:06:00,840 --> 00:06:04,020
for a patient with ID 112.

177
00:06:04,020 --> 00:06:05,520
um so we're going to start off the

178
00:06:05,520 --> 00:06:07,380
doctor's going to compute some FSS keys

179
00:06:07,380 --> 00:06:09,300
for the function that evaluates to 1 at

180
00:06:09,300 --> 00:06:12,360
Point 112 and 0 everywhere else

181
00:06:12,360 --> 00:06:14,520
so the doctor is going to send key K1 to

182
00:06:14,520 --> 00:06:17,819
server 1 and key K2 to server 2.

183
00:06:17,819 --> 00:06:19,740
and then for each row in the database

184
00:06:19,740 --> 00:06:21,960
and the server is going to evaluate its

185
00:06:21,960 --> 00:06:24,360
key at the ID value for that row so in

186
00:06:24,360 --> 00:06:26,280
this row we're going to evaluate key K1

187
00:06:26,280 --> 00:06:28,919
at Point 112 this is going to evaluate

188
00:06:28,919 --> 00:06:31,199
to be shares of one we multiply it by

189
00:06:31,199 --> 00:06:32,699
that cost in the row so this will be

190
00:06:32,699 --> 00:06:34,199
shares of a thousand

191
00:06:34,199 --> 00:06:36,180
we do this for the next row this time

192
00:06:36,180 --> 00:06:37,620
our evaluation is going to be shares of

193
00:06:37,620 --> 00:06:39,419
zero it's multiplied together we get

194
00:06:39,419 --> 00:06:41,460
shares of zero and then for the next row

195
00:06:41,460 --> 00:06:44,699
shares of one multiplied by 700 so then

196
00:06:44,699 --> 00:06:46,680
we sum all these together we send back

197
00:06:46,680 --> 00:06:48,780
shares of Seventeen hundred

198
00:06:48,780 --> 00:06:50,280
and then the doctor can output the

199
00:06:50,280 --> 00:06:51,720
results of the query which is seventeen

200
00:06:51,720 --> 00:06:53,280
hundred so all the medical costs for

201
00:06:53,280 --> 00:06:56,099
patient with ID 112. so it's pretty

202
00:06:56,099 --> 00:06:58,080
straightforward to compute queries for

203
00:06:58,080 --> 00:07:00,240
public data but the real challenge is

204
00:07:00,240 --> 00:07:01,979
how do we extend these techniques to

205
00:07:01,979 --> 00:07:04,500
private data so in the setting function

206
00:07:04,500 --> 00:07:07,080
secret sharing this eval routine takes

207
00:07:07,080 --> 00:07:09,720
its input on the value that we're

208
00:07:09,720 --> 00:07:11,580
evaluating the function on so what

209
00:07:11,580 --> 00:07:13,259
happens if we want to have this value

210
00:07:13,259 --> 00:07:15,120
actually be private so the server is

211
00:07:15,120 --> 00:07:17,759
Computing some predicate where it

212
00:07:17,759 --> 00:07:19,139
doesn't actually know the data that's

213
00:07:19,139 --> 00:07:21,120
being stored at the server so how can we

214
00:07:21,120 --> 00:07:22,500
do this

215
00:07:22,500 --> 00:07:24,840
so our idea is to leverage the structure

216
00:07:24,840 --> 00:07:26,639
of the search index itself

217
00:07:26,639 --> 00:07:28,380
so for each feature we're going to

218
00:07:28,380 --> 00:07:30,900
construct a table so we're going to have

219
00:07:30,900 --> 00:07:32,819
the records we're going to have a column

220
00:07:32,819 --> 00:07:34,919
for each record and for each row we're

221
00:07:34,919 --> 00:07:36,319
going to have a possible feature value

222
00:07:36,319 --> 00:07:39,000
so here entry I comma J is going to

223
00:07:39,000 --> 00:07:41,160
equal one if record I has heart rate J

224
00:07:41,160 --> 00:07:43,860
and 0 otherwise so each column is

225
00:07:43,860 --> 00:07:45,900
essentially a one hot encoding of that

226
00:07:45,900 --> 00:07:48,539
feature so here we can see record three

227
00:07:48,539 --> 00:07:51,539
is heart rate 79. and now the pens are

228
00:07:51,539 --> 00:07:53,039
pretty cheap so we're just going to add

229
00:07:53,039 --> 00:07:55,259
a column into the table and we're really

230
00:07:55,259 --> 00:07:56,819
targeting applications that are just

231
00:07:56,819 --> 00:07:58,919
querying recent data so that we only

232
00:07:58,919 --> 00:08:00,660
care about the most recent columns that

233
00:08:00,660 --> 00:08:02,819
were added to this table

234
00:08:02,819 --> 00:08:04,860
one limitation of this table structure

235
00:08:04,860 --> 00:08:06,360
is that it constrains the domain of

236
00:08:06,360 --> 00:08:07,979
features that we're filtering on

237
00:08:07,979 --> 00:08:10,620
so because now we need a row for every

238
00:08:10,620 --> 00:08:12,539
possible feature value

239
00:08:12,539 --> 00:08:14,520
however in the applications We examined

240
00:08:14,520 --> 00:08:15,900
we found that features and predicates

241
00:08:15,900 --> 00:08:17,460
were already from a fairly small domain

242
00:08:17,460 --> 00:08:20,340
so around 256 or could easily be mapped

243
00:08:20,340 --> 00:08:22,919
to one so examples of this include age

244
00:08:22,919 --> 00:08:25,379
height heart rate blood glucose level or

245
00:08:25,379 --> 00:08:26,580
percentage

246
00:08:26,580 --> 00:08:28,080
it's also true that you can represent

247
00:08:28,080 --> 00:08:30,120
large domains via conjunctions so you

248
00:08:30,120 --> 00:08:31,440
can have a conjunction on the high order

249
00:08:31,440 --> 00:08:32,820
bits of the feature and the low order

250
00:08:32,820 --> 00:08:33,839
bits

251
00:08:33,839 --> 00:08:35,820
also this restriction only applies to

252
00:08:35,820 --> 00:08:37,200
features that you're filtering on not

253
00:08:37,200 --> 00:08:39,779
features that you're aggregating

254
00:08:39,779 --> 00:08:42,000
so how can we apply the search index

255
00:08:42,000 --> 00:08:44,099
structure in order to search over data

256
00:08:44,099 --> 00:08:46,920
that's private so now each server is

257
00:08:46,920 --> 00:08:49,200
going to store a copy of this table we

258
00:08:49,200 --> 00:08:50,700
have the section of the table in Gray

259
00:08:50,700 --> 00:08:52,800
let's assume we have some way to make

260
00:08:52,800 --> 00:08:55,019
this uh to actually protect the contents

261
00:08:55,019 --> 00:08:56,700
of this table I'll show you how we do

262
00:08:56,700 --> 00:08:59,040
that in just a second but the server can

263
00:08:59,040 --> 00:09:00,660
see the contents of the table that's

264
00:09:00,660 --> 00:09:02,760
outside the box and this data is just

265
00:09:02,760 --> 00:09:04,260
public it's not revealing anything about

266
00:09:04,260 --> 00:09:07,140
the contents of the table

267
00:09:07,140 --> 00:09:08,700
um so now let's say the doctor wants to

268
00:09:08,700 --> 00:09:10,080
compute the number of Records where the

269
00:09:10,080 --> 00:09:12,180
heart rate is equal to 80.

270
00:09:12,180 --> 00:09:13,680
um so as before we're going to generate

271
00:09:13,680 --> 00:09:15,600
FSS keys this time for the function that

272
00:09:15,600 --> 00:09:18,720
evaluates to 1 at Point 80. we send the

273
00:09:18,720 --> 00:09:21,060
FSS keys to the servers then for each

274
00:09:21,060 --> 00:09:23,040
row we're going to evaluate the FSS keys

275
00:09:23,040 --> 00:09:25,200
on the value corresponding to that row

276
00:09:25,200 --> 00:09:27,420
we multiply by the evaluation by each of

277
00:09:27,420 --> 00:09:29,940
the values in that row and sum them all

278
00:09:29,940 --> 00:09:30,779
together

279
00:09:30,779 --> 00:09:33,180
we do this for each of the rows this is

280
00:09:33,180 --> 00:09:34,800
going to allow us to essentially select

281
00:09:34,800 --> 00:09:36,779
the one row that we care about so row 80

282
00:09:36,779 --> 00:09:38,940
and sum up and get shares of the

283
00:09:38,940 --> 00:09:40,680
summation of all the values in that row

284
00:09:40,680 --> 00:09:42,720
so the number of records that have heart

285
00:09:42,720 --> 00:09:45,600
rate equal to 80. so we send back shares

286
00:09:45,600 --> 00:09:47,760
of two the doctor can combine these and

287
00:09:47,760 --> 00:09:49,560
send back the results

288
00:09:49,560 --> 00:09:51,600
so now I promise that I talk a little

289
00:09:51,600 --> 00:09:53,399
bit about how we actually protect the

290
00:09:53,399 --> 00:09:56,940
contents of this table in the gray box

291
00:09:56,940 --> 00:09:58,620
so our key Insight here is to use

292
00:09:58,620 --> 00:10:00,360
replicated secret sharing with function

293
00:10:00,360 --> 00:10:01,740
secret sharing

294
00:10:01,740 --> 00:10:03,540
so in function secret sharing we need

295
00:10:03,540 --> 00:10:05,519
identical copies of the data in order to

296
00:10:05,519 --> 00:10:08,339
execute in order to execute the query

297
00:10:08,339 --> 00:10:10,200
so replicated secret sharing allows us

298
00:10:10,200 --> 00:10:11,820
to have identical copies of the data

299
00:10:11,820 --> 00:10:14,339
while also protecting the contents

300
00:10:14,339 --> 00:10:15,959
so we can break the contents of the

301
00:10:15,959 --> 00:10:17,640
table into the additive shares one two

302
00:10:17,640 --> 00:10:20,160
and three then we give server one shares

303
00:10:20,160 --> 00:10:22,260
one and two server two shares two and

304
00:10:22,260 --> 00:10:24,959
three and server 3 shares three and one

305
00:10:24,959 --> 00:10:26,700
and now the idea is that we're going to

306
00:10:26,700 --> 00:10:28,260
essentially run the same protocols

307
00:10:28,260 --> 00:10:30,360
before on each of the shares of the

308
00:10:30,360 --> 00:10:31,620
table

309
00:10:31,620 --> 00:10:34,019
so now instead of generating just one

310
00:10:34,019 --> 00:10:35,700
key pair the doctor is going to generate

311
00:10:35,700 --> 00:10:37,140
three key pairs

312
00:10:37,140 --> 00:10:38,880
it's going to send the keys to the

313
00:10:38,880 --> 00:10:40,320
servers that correspond to the shares

314
00:10:40,320 --> 00:10:41,700
that they have

315
00:10:41,700 --> 00:10:43,079
and now we're going to execute the

316
00:10:43,079 --> 00:10:45,779
protocol first on share one of the table

317
00:10:45,779 --> 00:10:48,360
then on share two of the table and then

318
00:10:48,360 --> 00:10:50,160
on Share three of the table

319
00:10:50,160 --> 00:10:51,660
the servers will send back the results

320
00:10:51,660 --> 00:10:54,180
we sum all the results together so this

321
00:10:54,180 --> 00:10:55,560
is going to be the results of the query

322
00:10:55,560 --> 00:10:57,480
executed on each of the shares of the

323
00:10:57,480 --> 00:10:58,740
table and then we can sum all those

324
00:10:58,740 --> 00:10:59,579
together

325
00:10:59,579 --> 00:11:01,500
that's going to give us the results

326
00:11:01,500 --> 00:11:03,720
so Bonnet all uses similar technique

327
00:11:03,720 --> 00:11:05,760
combining replicated secret sharing with

328
00:11:05,760 --> 00:11:07,200
function secret sharing but their work

329
00:11:07,200 --> 00:11:09,000
is really focused on the distributed orm

330
00:11:09,000 --> 00:11:11,279
setting whereas we're focused on

331
00:11:11,279 --> 00:11:13,860
performing these aggregate queries based

332
00:11:13,860 --> 00:11:16,740
on filtering in the time series setting

333
00:11:16,740 --> 00:11:18,240
so there's some other contributions in

334
00:11:18,240 --> 00:11:19,680
the paper that I don't that I don't have

335
00:11:19,680 --> 00:11:21,720
time to talk about today including how

336
00:11:21,720 --> 00:11:23,640
we provide filtering with multiple

337
00:11:23,640 --> 00:11:25,860
predicates here it's useful that we're

338
00:11:25,860 --> 00:11:28,200
using replicated secret sharing we also

339
00:11:28,200 --> 00:11:29,820
provide tools for cheap malicious

340
00:11:29,820 --> 00:11:32,279
security and a construction for complex

341
00:11:32,279 --> 00:11:34,079
Aggregates over time ranges and this

342
00:11:34,079 --> 00:11:35,579
allows us to support non-linear

343
00:11:35,579 --> 00:11:37,680
aggregation functions like min max and

344
00:11:37,680 --> 00:11:40,500
top K but we can only filter on time to

345
00:11:40,500 --> 00:11:42,480
do this

346
00:11:42,480 --> 00:11:44,880
so we also evaluate our solution our

347
00:11:44,880 --> 00:11:46,980
code is open source and available at

348
00:11:46,980 --> 00:11:49,079
this link here we run our experiments

349
00:11:49,079 --> 00:11:51,060
with 332 core servers configured with a

350
00:11:51,060 --> 00:11:52,560
three gigabyte per second connection and

351
00:11:52,560 --> 00:11:55,200
a 20 millisecond round trip time and we

352
00:11:55,200 --> 00:11:56,940
run with eight predicate queries and the

353
00:11:56,940 --> 00:11:58,920
examples that I'm going to show and we

354
00:11:58,920 --> 00:12:00,899
compare it to two baselines so an

355
00:12:00,899 --> 00:12:02,880
oblivious multi-dimensional tree so

356
00:12:02,880 --> 00:12:04,740
building an archery inside of path Oram

357
00:12:04,740 --> 00:12:07,200
and also a generic MPC solution so

358
00:12:07,200 --> 00:12:08,820
running MP speeds with a three-party

359
00:12:08,820 --> 00:12:11,220
honest majority setting

360
00:12:11,220 --> 00:12:13,200
so here we're looking at latency from

361
00:12:13,200 --> 00:12:14,880
around a thousand records to around a

362
00:12:14,880 --> 00:12:16,440
million

363
00:12:16,440 --> 00:12:18,600
um here you can see the Waldo point in

364
00:12:18,600 --> 00:12:20,639
range uh you just see the blue the dark

365
00:12:20,639 --> 00:12:22,079
blue line this is because the point in

366
00:12:22,079 --> 00:12:23,399
range Quarry performance is almost

367
00:12:23,399 --> 00:12:24,540
identical

368
00:12:24,540 --> 00:12:26,700
and we can see that for around a

369
00:12:26,700 --> 00:12:28,200
thousand records there's about an 8X

370
00:12:28,200 --> 00:12:29,880
difference between Waldo and the empty

371
00:12:29,880 --> 00:12:31,800
speeds Baseline and a 37x difference

372
00:12:31,800 --> 00:12:34,680
between Waldo and our o-ram Baseline

373
00:12:34,680 --> 00:12:37,200
the overhead of Waldo and empty speeds

374
00:12:37,200 --> 00:12:39,060
Baseline is going to grow linearly with

375
00:12:39,060 --> 00:12:40,740
the number of records as we'd expect

376
00:12:40,740 --> 00:12:42,779
because the table size grows linearly

377
00:12:42,779 --> 00:12:44,579
with the number of Records whereas our

378
00:12:44,579 --> 00:12:46,500
Orem Baseline is going to grow poly

379
00:12:46,500 --> 00:12:48,420
logarithmically so this gap between the

380
00:12:48,420 --> 00:12:50,339
two is going to close as we increase the

381
00:12:50,339 --> 00:12:53,040
number of Records

382
00:12:53,040 --> 00:12:54,480
um however throughput there's a much

383
00:12:54,480 --> 00:12:57,240
larger gap between Waldo and O Ram and

384
00:12:57,240 --> 00:12:58,920
this is due to the overhead of updates

385
00:12:58,920 --> 00:13:01,740
or appends in o-ram because now you need

386
00:13:01,740 --> 00:13:04,019
an Oram operation to add a record

387
00:13:04,019 --> 00:13:06,000
whereas in Waldo you just need to append

388
00:13:06,000 --> 00:13:07,980
one column to this table

389
00:13:07,980 --> 00:13:10,019
so here we can see for around a thousand

390
00:13:10,019 --> 00:13:12,480
records there's around a 303x difference

391
00:13:12,480 --> 00:13:15,060
between Waldo and Orem and a 22x

392
00:13:15,060 --> 00:13:17,339
difference in throughput for around a

393
00:13:17,339 --> 00:13:18,600
million records

394
00:13:18,600 --> 00:13:21,240
so a much larger Gap

395
00:13:21,240 --> 00:13:23,279
so in conclusion while there was a time

396
00:13:23,279 --> 00:13:24,600
series database that provides

397
00:13:24,600 --> 00:13:27,240
functionality security and efficiency so

398
00:13:27,240 --> 00:13:28,800
it supports multi-predicate queries

399
00:13:28,800 --> 00:13:30,720
while hiding the data contents query

400
00:13:30,720 --> 00:13:32,579
filter values and search access patterns

401
00:13:32,579 --> 00:13:34,380
and it does this while providing low

402
00:13:34,380 --> 00:13:36,300
latency high throughput and low

403
00:13:36,300 --> 00:13:39,180
bandwidth uh thanks and happy to take

404
00:13:39,180 --> 00:13:41,180
any questions

405
00:13:41,180 --> 00:13:45,599
[Applause]

406
00:13:49,320 --> 00:13:51,839
great work first off

407
00:13:51,839 --> 00:13:54,540
um so you said one out of three servers

408
00:13:54,540 --> 00:13:56,899
can be compromised I wonder are these

409
00:13:56,899 --> 00:13:59,639
strictly concrete numbers or is there a

410
00:13:59,639 --> 00:14:02,040
ratio or is there is it actually tunable

411
00:14:02,040 --> 00:14:03,600
in the first place

412
00:14:03,600 --> 00:14:05,399
um so this isn't tunable because of how

413
00:14:05,399 --> 00:14:07,560
we use replicated secret sharing so in

414
00:14:07,560 --> 00:14:09,120
replicated secret sharing if more than

415
00:14:09,120 --> 00:14:10,740
one of the servers is compromised you

416
00:14:10,740 --> 00:14:12,779
can reconstruct the data so we run with

417
00:14:12,779 --> 00:14:14,459
exactly three servers and if more than

418
00:14:14,459 --> 00:14:16,260
one of the servers is compromised you

419
00:14:16,260 --> 00:14:17,699
don't get the security guarantees that

420
00:14:17,699 --> 00:14:20,820
we provide can you have more than three

421
00:14:20,820 --> 00:14:22,800
um we haven't looked at that I think

422
00:14:22,800 --> 00:14:23,760
there's an interesting question there

423
00:14:23,760 --> 00:14:25,320
there might be ways to adapt our

424
00:14:25,320 --> 00:14:27,360
construction to more than three with

425
00:14:27,360 --> 00:14:28,620
function secret sharing efficient

426
00:14:28,620 --> 00:14:29,940
constructions only exist for the

427
00:14:29,940 --> 00:14:32,279
two-party setting so the way that we

428
00:14:32,279 --> 00:14:34,019
have things set up it really does work

429
00:14:34,019 --> 00:14:35,940
best with three but there might be

430
00:14:35,940 --> 00:14:37,560
interesting extensions with more servers

431
00:14:37,560 --> 00:14:39,660
and and one more question uh you didn't

432
00:14:39,660 --> 00:14:41,160
exactly talk

433
00:14:41,160 --> 00:14:43,620
you talked about uh query latencies but

434
00:14:43,620 --> 00:14:46,019
then again query uh throughputs like

435
00:14:46,019 --> 00:14:48,420
your own work Snoopy why didn't you

436
00:14:48,420 --> 00:14:50,040
compare to that because that could

437
00:14:50,040 --> 00:14:52,260
handle many queries but because you're

438
00:14:52,260 --> 00:14:54,600
specifically doing linear scans to

439
00:14:54,600 --> 00:14:56,279
handle a lot of work and that does the

440
00:14:56,279 --> 00:14:57,720
same thing so

441
00:14:57,720 --> 00:14:59,820
do you have any at least Insight of how

442
00:14:59,820 --> 00:15:01,860
this would compare to that instead of

443
00:15:01,860 --> 00:15:03,959
like path around yeah yeah great

444
00:15:03,959 --> 00:15:04,800
question

445
00:15:04,800 --> 00:15:06,180
um so yeah so asking about our other

446
00:15:06,180 --> 00:15:07,800
work Snoopy where we're really optimized

447
00:15:07,800 --> 00:15:10,079
for throughput in the orm setting

448
00:15:10,079 --> 00:15:11,579
um yeah so I think we would be able to

449
00:15:11,579 --> 00:15:13,139
achieve a higher throughput but at the

450
00:15:13,139 --> 00:15:15,060
cost of latency so Snoopy really does a

451
00:15:15,060 --> 00:15:16,800
lot of batching so we sacrifice some

452
00:15:16,800 --> 00:15:18,899
latency there and it's true that we're

453
00:15:18,899 --> 00:15:20,940
still so the overhead of Orem is really

454
00:15:20,940 --> 00:15:23,339
due to the to the cost of these appends

455
00:15:23,339 --> 00:15:25,800
and we still would have that overhead in

456
00:15:25,800 --> 00:15:27,600
the Snoopy setting and time series

457
00:15:27,600 --> 00:15:29,220
workloads are traditionally append

458
00:15:29,220 --> 00:15:30,779
intensive so in the example that I

459
00:15:30,779 --> 00:15:33,259
showed it's 90 of pens and 10 queries

460
00:15:33,259 --> 00:15:36,660
and so in the case where you're

461
00:15:36,660 --> 00:15:38,459
um just how in the case where you have a

462
00:15:38,459 --> 00:15:40,380
lot of appends um having these appends

463
00:15:40,380 --> 00:15:43,019
be really cheap is beneficial for a Time

464
00:15:43,019 --> 00:15:46,560
series database I see thank you great

465
00:15:46,560 --> 00:15:50,759
hi Emma nice talk um from um CMU so um

466
00:15:50,759 --> 00:15:52,920
you mentioned that your filter value can

467
00:15:52,920 --> 00:15:55,920
only be in a very small domain and

468
00:15:55,920 --> 00:15:58,199
you're using dbf to represent a point in

469
00:15:58,199 --> 00:16:01,079
that domain I want because DPF generally

470
00:16:01,079 --> 00:16:03,839
could have some large content and you

471
00:16:03,839 --> 00:16:05,279
mentioned that the domain is like

472
00:16:05,279 --> 00:16:08,820
somehow small so are you using the

473
00:16:08,820 --> 00:16:11,880
um you know the iterative version of the

474
00:16:11,880 --> 00:16:13,920
DPF or just a one-fold version of the

475
00:16:13,920 --> 00:16:16,399
DPF

476
00:16:19,900 --> 00:16:22,680
[Music]

477
00:16:22,680 --> 00:16:24,540
limited by the fact that we're using DPS

478
00:16:24,540 --> 00:16:26,339
but by the fact that we're storing a

479
00:16:26,339 --> 00:16:28,139
table where we have a row for each

480
00:16:28,139 --> 00:16:30,420
possible feature value so you would

481
00:16:30,420 --> 00:16:31,860
really need a different data structure

482
00:16:31,860 --> 00:16:34,320
in order to not have this limitation so

483
00:16:34,320 --> 00:16:35,880
it's not really an artifact of the fact

484
00:16:35,880 --> 00:16:38,639
that we're using dpfs oh I hope that

485
00:16:38,639 --> 00:16:41,519
that answers your question okay we can

486
00:16:41,519 --> 00:16:43,139
also clarify this more later okay thank

487
00:16:43,139 --> 00:16:45,139
you

488
00:16:46,699 --> 00:16:50,699
University of Lisbon so your work still

489
00:16:50,699 --> 00:16:52,860
has some leakage right do you quantify

490
00:16:52,860 --> 00:16:54,959
the leakage for instance how does this

491
00:16:54,959 --> 00:16:58,399
compare with searchable encryption

492
00:16:58,410 --> 00:17:01,380
[Music]

493
00:17:01,380 --> 00:17:03,060
the query filter values we protect the

494
00:17:03,060 --> 00:17:05,520
data contents we still do reveal the

495
00:17:05,520 --> 00:17:07,679
database schema and the structure of the

496
00:17:07,679 --> 00:17:08,760
query

497
00:17:08,760 --> 00:17:10,740
um so so those are the so that's that's

498
00:17:10,740 --> 00:17:14,039
sort of exactly um what we what we leak

499
00:17:14,039 --> 00:17:16,020
um one way to minimize the leakage from

500
00:17:16,020 --> 00:17:17,880
the query structure is by you know

501
00:17:17,880 --> 00:17:21,000
reducing every query to some normal form

502
00:17:21,000 --> 00:17:22,859
um but we aren't leaking search access

503
00:17:22,859 --> 00:17:25,500
patterns in terms of which parts of the

504
00:17:25,500 --> 00:17:27,720
memory that you touch or comparisons

505
00:17:27,720 --> 00:17:29,760
between uh some part of the query and

506
00:17:29,760 --> 00:17:31,740
the contents of the records is revealing

507
00:17:31,740 --> 00:17:33,900
some information yeah but in your slides

508
00:17:33,900 --> 00:17:36,960
you have like column F1 F2

509
00:17:36,960 --> 00:17:40,440
yes yeah yeah yeah so so it so the query

510
00:17:40,440 --> 00:17:43,740
it is um it is revealed uh thanks thanks

511
00:17:43,740 --> 00:17:46,020
for clarifying that so in the query it

512
00:17:46,020 --> 00:17:48,360
is revealed uh which of the features

513
00:17:48,360 --> 00:17:50,160
um the query is

514
00:17:50,160 --> 00:17:53,880
um the the predicates correspond to

515
00:17:53,880 --> 00:17:56,340
um let's it might be helpful to clarify

516
00:17:56,340 --> 00:17:57,660
this offline

517
00:17:57,660 --> 00:18:00,660
um yeah yeah thanks for your question

518
00:18:00,660 --> 00:18:02,820
all right let's thank the speaker one

519
00:18:02,820 --> 00:18:04,420
last time

520
00:18:04,420 --> 00:18:07,819
[Applause]

