1
00:00:01,040 --> 00:00:03,280
good morning everyone welcome to your

2
00:00:03,280 --> 00:00:04,720
presentation

3
00:00:04,720 --> 00:00:06,799
this is a joint work of the hong kong

4
00:00:06,799 --> 00:00:09,200
university of science and technology

5
00:00:09,200 --> 00:00:11,200
with shaman university

6
00:00:11,200 --> 00:00:13,840
today we will present our work beacon

7
00:00:13,840 --> 00:00:15,920
which is a great directed group box

8
00:00:15,920 --> 00:00:18,560
physically with approval pass prompting

9
00:00:18,560 --> 00:00:21,359
so let's start

10
00:00:21,680 --> 00:00:24,800
now there is fuzzing has a huge impact

11
00:00:24,800 --> 00:00:27,439
on both industry and academia in

12
00:00:27,439 --> 00:00:30,320
industry buzzing has proved to be one of

13
00:00:30,320 --> 00:00:32,238
the most effective ways to detect

14
00:00:32,238 --> 00:00:33,440
vulnerabilities

15
00:00:33,440 --> 00:00:36,079
for example both google and microsoft

16
00:00:36,079 --> 00:00:38,000
has their own cluster platforms for

17
00:00:38,000 --> 00:00:39,040
fuzzing

18
00:00:39,040 --> 00:00:41,200
and they claim that over 30 000

19
00:00:41,200 --> 00:00:43,520
vulnerabilities have been detected since

20
00:00:43,520 --> 00:00:46,000
2016.

21
00:00:46,000 --> 00:00:48,559
moreover in academia there are over two

22
00:00:48,559 --> 00:00:50,640
hundred thousand paper published in the

23
00:00:50,640 --> 00:00:55,120
top ga conference journal since 2015.

24
00:00:55,120 --> 00:00:57,760
however vulnerabilities keeps growing

25
00:00:57,760 --> 00:00:59,920
every year which increase the

26
00:00:59,920 --> 00:01:03,359
difficulties to detecting them

27
00:01:03,359 --> 00:01:06,000
to detect and fix this box more

28
00:01:06,000 --> 00:01:08,479
efficiently directed fuzzing are

29
00:01:08,479 --> 00:01:11,439
proposed and aims to detect specific box

30
00:01:11,439 --> 00:01:13,280
automatically

31
00:01:13,280 --> 00:01:15,680
it has various applicable scenarios such

32
00:01:15,680 --> 00:01:18,479
as patch verification one day poc

33
00:01:18,479 --> 00:01:21,360
generation and debugging

34
00:01:21,360 --> 00:01:23,600
similar to conventional following the

35
00:01:23,600 --> 00:01:26,560
success of directed fuzzing comes from a

36
00:01:26,560 --> 00:01:28,560
simple workflow which makes it

37
00:01:28,560 --> 00:01:30,479
convenient to deploy in various

38
00:01:30,479 --> 00:01:32,000
scenarios

39
00:01:32,000 --> 00:01:34,479
basically the lab raised lightweight

40
00:01:34,479 --> 00:01:36,880
input generation method to efficiently

41
00:01:36,880 --> 00:01:39,920
produce lots of test case examine target

42
00:01:39,920 --> 00:01:41,360
programs

43
00:01:41,360 --> 00:01:43,759
it will report the bug triggered to the

44
00:01:43,759 --> 00:01:45,840
developers directly

45
00:01:45,840 --> 00:01:48,399
meanwhile if the test case trigger new

46
00:01:48,399 --> 00:01:50,799
program behaviors for example new

47
00:01:50,799 --> 00:01:52,000
coverages

48
00:01:52,000 --> 00:01:55,119
then this input will be preserved as a

49
00:01:55,119 --> 00:01:57,119
seed template for fossil input

50
00:01:57,119 --> 00:01:59,439
generation

51
00:01:59,439 --> 00:02:01,840
the this feedback mechanism makes

52
00:02:01,840 --> 00:02:04,079
fuzzing gradually explore the target

53
00:02:04,079 --> 00:02:07,119
program slowly and detect specific

54
00:02:07,119 --> 00:02:09,360
vulnerabilities

55
00:02:09,360 --> 00:02:11,840
specifically fuzzing can generate

56
00:02:11,840 --> 00:02:14,400
enormous number of inputs to explore the

57
00:02:14,400 --> 00:02:16,640
program within a short term

58
00:02:16,640 --> 00:02:19,599
for example we conduct a 24 hours

59
00:02:19,599 --> 00:02:22,000
experiment using the state of art

60
00:02:22,000 --> 00:02:24,640
directed for the afl go

61
00:02:24,640 --> 00:02:27,200
and we found out that on average there

62
00:02:27,200 --> 00:02:29,840
are over 30 million

63
00:02:29,840 --> 00:02:31,200
inputs

64
00:02:31,200 --> 00:02:33,200
can be generated to

65
00:02:33,200 --> 00:02:36,640
examine the target programs

66
00:02:36,640 --> 00:02:38,800
but it's all problem solved

67
00:02:38,800 --> 00:02:41,519
unfortunately the answer is no

68
00:02:41,519 --> 00:02:44,319
we found out that not all generated

69
00:02:44,319 --> 00:02:46,560
input can contribute to detecting

70
00:02:46,560 --> 00:02:48,400
vulnerabilities

71
00:02:48,400 --> 00:02:50,640
in a previous experiment we found out

72
00:02:50,640 --> 00:02:54,239
that more than 95 of the generated input

73
00:02:54,239 --> 00:02:56,640
cannot even reach the vulnerabilities we

74
00:02:56,640 --> 00:02:58,239
want to detect

75
00:02:58,239 --> 00:03:00,800
therefore crash reproduction using

76
00:03:00,800 --> 00:03:03,440
directive filing is similar to finding a

77
00:03:03,440 --> 00:03:06,640
needle in a haystack

78
00:03:07,280 --> 00:03:09,599
the reason for such difficulties is

79
00:03:09,599 --> 00:03:13,080
because of the invisible parts explosion

80
00:03:13,080 --> 00:03:15,680
specifically there are still enormous

81
00:03:15,680 --> 00:03:17,599
number of parts that are even

82
00:03:17,599 --> 00:03:19,519
unreachable towards the target

83
00:03:19,519 --> 00:03:22,239
vulnerabilities

84
00:03:22,480 --> 00:03:25,440
unfortunately existing work do not

85
00:03:25,440 --> 00:03:26,799
reject

86
00:03:26,799 --> 00:03:30,319
executing those invisible input at all

87
00:03:30,319 --> 00:03:32,799
the main idea in the existing literature

88
00:03:32,799 --> 00:03:35,120
is to make a father reach the target

89
00:03:35,120 --> 00:03:38,400
faster is to prioritize the paths closer

90
00:03:38,400 --> 00:03:40,080
to the target

91
00:03:40,080 --> 00:03:43,360
their intuition is that the closeners

92
00:03:43,360 --> 00:03:45,760
measured by different distance matrix

93
00:03:45,760 --> 00:03:48,080
represents the possibilities to reach

94
00:03:48,080 --> 00:03:49,360
the target

95
00:03:49,360 --> 00:03:52,400
for example since path 1 is closer to

96
00:03:52,400 --> 00:03:54,879
the target than past 2

97
00:03:54,879 --> 00:03:57,760
father will prioritize plus 1 over past

98
00:03:57,760 --> 00:03:58,799
2.

99
00:03:58,799 --> 00:04:01,680
however since the majority of the input

100
00:04:01,680 --> 00:04:03,840
generation is still rendered

101
00:04:03,840 --> 00:04:06,159
there is still an enormous number of

102
00:04:06,159 --> 00:04:10,080
invisible inputs generated

103
00:04:10,080 --> 00:04:13,040
however if we attempt to filter those

104
00:04:13,040 --> 00:04:14,720
invisible inputs

105
00:04:14,720 --> 00:04:16,880
then fuzzing needs to solve the past

106
00:04:16,880 --> 00:04:17,918
condition

107
00:04:17,918 --> 00:04:20,320
which then suffer from the new transport

108
00:04:20,320 --> 00:04:22,960
explosion and expensive cause resolving

109
00:04:22,960 --> 00:04:25,758
problem again

110
00:04:26,080 --> 00:04:29,199
to solve this problem our intuition is

111
00:04:29,199 --> 00:04:32,240
that not all execution are worth

112
00:04:32,240 --> 00:04:34,320
executing completely

113
00:04:34,320 --> 00:04:37,199
that is whenever an execution hits

114
00:04:37,199 --> 00:04:39,680
infeasible instructions the following

115
00:04:39,680 --> 00:04:43,120
execution cannot trigger the box

116
00:04:43,120 --> 00:04:46,000
for example whenever the execution

117
00:04:46,000 --> 00:04:50,080
reaches blocks d f g or h

118
00:04:50,080 --> 00:04:52,400
it represents the following execution

119
00:04:52,400 --> 00:04:55,840
can never cover the target block e

120
00:04:55,840 --> 00:04:58,560
therefore father should terminate this

121
00:04:58,560 --> 00:05:02,080
executions immediately

122
00:05:02,080 --> 00:05:05,120
this intuition motivates our work which

123
00:05:05,120 --> 00:05:07,360
is a directive fuzzing with the pro bowl

124
00:05:07,360 --> 00:05:08,639
pass pruning

125
00:05:08,639 --> 00:05:10,880
as a high level view

126
00:05:10,880 --> 00:05:13,360
we prove not only those unreachable

127
00:05:13,360 --> 00:05:16,240
paths for example the fourth branch at

128
00:05:16,240 --> 00:05:18,000
line 12

129
00:05:18,000 --> 00:05:21,280
but also the path with unsatisfied

130
00:05:21,280 --> 00:05:23,840
past condition using a precondition

131
00:05:23,840 --> 00:05:27,440
infer through a backward static analysis

132
00:05:27,440 --> 00:05:30,560
for example we can infer a precondition

133
00:05:30,560 --> 00:05:33,199
based on the past condition from block b

134
00:05:33,199 --> 00:05:34,960
to e

135
00:05:34,960 --> 00:05:37,759
therefore if the following inputs cannot

136
00:05:37,759 --> 00:05:40,320
satisfy this precondition when reaching

137
00:05:40,320 --> 00:05:41,600
block b

138
00:05:41,600 --> 00:05:43,759
then we will terminate this execution

139
00:05:43,759 --> 00:05:46,080
immediately since it cannot reach the

140
00:05:46,080 --> 00:05:47,520
target

141
00:05:47,520 --> 00:05:50,720
more specifically we can use the pass

142
00:05:50,720 --> 00:05:54,160
condition line 8 as the precondition and

143
00:05:54,160 --> 00:05:57,039
place it at line 3.

144
00:05:57,039 --> 00:06:00,639
therefore a new input such as z equal to

145
00:06:00,639 --> 00:06:03,919
40 can be rejected so that father does

146
00:06:03,919 --> 00:06:04,720
not

147
00:06:04,720 --> 00:06:08,000
need to execute the programs from line 4

148
00:06:08,000 --> 00:06:11,520
to 8 to improve efficiency

149
00:06:11,520 --> 00:06:14,720
overall both unreachable and unsatisfied

150
00:06:14,720 --> 00:06:17,520
paths pro

151
00:06:17,520 --> 00:06:20,400
okay let's go into a bit more details of

152
00:06:20,400 --> 00:06:22,160
how we achieve this

153
00:06:22,160 --> 00:06:23,840
outcomes by inferring those

154
00:06:23,840 --> 00:06:25,759
preconditions

155
00:06:25,759 --> 00:06:28,400
in terms of fuzzing the precondition

156
00:06:28,400 --> 00:06:31,600
need to be an overapproximation

157
00:06:31,600 --> 00:06:34,160
overall approximation ensure all from

158
00:06:34,160 --> 00:06:36,720
the parts do not trigger the box

159
00:06:36,720 --> 00:06:38,080
for example

160
00:06:38,080 --> 00:06:41,120
we can infer under approximation such as

161
00:06:41,120 --> 00:06:45,600
z to smaller than 20 as a precondition

162
00:06:45,600 --> 00:06:46,720
however

163
00:06:46,720 --> 00:06:49,280
this would filter the input that can

164
00:06:49,280 --> 00:06:50,960
trigger the crashes

165
00:06:50,960 --> 00:06:53,440
which thus hinder the performance of

166
00:06:53,440 --> 00:06:55,440
fuzzing

167
00:06:55,440 --> 00:06:58,479
therefore how to infer the precondition

168
00:06:58,479 --> 00:07:00,840
precisely becomes the main

169
00:07:00,840 --> 00:07:02,479
challenge

170
00:07:02,479 --> 00:07:05,759
precision allows the precondition from

171
00:07:05,759 --> 00:07:08,160
proving more infinite paths

172
00:07:08,160 --> 00:07:09,759
for example

173
00:07:09,759 --> 00:07:12,720
we can simply extract the

174
00:07:12,720 --> 00:07:15,280
explicit branch conditions as the

175
00:07:15,280 --> 00:07:16,720
precondition

176
00:07:16,720 --> 00:07:17,840
however

177
00:07:17,840 --> 00:07:19,919
since we do not consider the past

178
00:07:19,919 --> 00:07:22,639
condition completely such as a one and

179
00:07:22,639 --> 00:07:24,000
line six

180
00:07:24,000 --> 00:07:26,479
some invisible execution cannot be

181
00:07:26,479 --> 00:07:28,240
filtered

182
00:07:28,240 --> 00:07:30,639
however precisely reasoning the

183
00:07:30,639 --> 00:07:33,840
precondition is expensive

184
00:07:33,840 --> 00:07:35,919
which make it becomes a trade-off

185
00:07:35,919 --> 00:07:38,400
problem between the efficiency and the

186
00:07:38,400 --> 00:07:40,960
precision

187
00:07:41,759 --> 00:07:44,560
our solution to this problem is the

188
00:07:44,560 --> 00:07:46,800
interval obstruction with precision

189
00:07:46,800 --> 00:07:48,319
enhancement

190
00:07:48,319 --> 00:07:51,039
inhole obstruction is the cheapest over

191
00:07:51,039 --> 00:07:53,840
approximation of the program states

192
00:07:53,840 --> 00:07:56,639
here we list three kinds of widely used

193
00:07:56,639 --> 00:07:59,599
obstructions in existing literature

194
00:07:59,599 --> 00:08:02,240
different from polyhedra and autogram

195
00:08:02,240 --> 00:08:05,360
abstractions which is npr complexity for

196
00:08:05,360 --> 00:08:06,560
inference

197
00:08:06,560 --> 00:08:08,639
interval obstructions can be obtained

198
00:08:08,639 --> 00:08:11,360
with linear complexity which makes the

199
00:08:11,360 --> 00:08:13,759
method more scalable

200
00:08:13,759 --> 00:08:16,639
therefore we only need to improve the

201
00:08:16,639 --> 00:08:18,879
precision of the interval obstructions

202
00:08:18,879 --> 00:08:20,960
to make it more effective

203
00:08:20,960 --> 00:08:24,639
improving infeasible parts

204
00:08:24,639 --> 00:08:27,440
especially we improve the precision

205
00:08:27,440 --> 00:08:30,160
through two aspects data flow and

206
00:08:30,160 --> 00:08:33,279
control flow the first one is relation

207
00:08:33,279 --> 00:08:36,958
preservation for the data flow

208
00:08:36,958 --> 00:08:39,200
one of the main reasons that interval

209
00:08:39,200 --> 00:08:42,479
absorption is not precise is because it

210
00:08:42,479 --> 00:08:44,800
does not consider the relation among

211
00:08:44,800 --> 00:08:47,120
variables

212
00:08:47,120 --> 00:08:49,920
therefore we preserve the relations

213
00:08:49,920 --> 00:08:52,720
doing a backward interval analysis to

214
00:08:52,720 --> 00:08:54,720
enhance the precision

215
00:08:54,720 --> 00:08:56,160
for example

216
00:08:56,160 --> 00:08:59,519
existing interval analysis cannot obtain

217
00:08:59,519 --> 00:09:02,320
the precondition for variable y at line

218
00:09:02,320 --> 00:09:03,440
6

219
00:09:03,440 --> 00:09:06,000
therefore the precondition for variable

220
00:09:06,000 --> 00:09:10,399
z is also missing in the final results

221
00:09:10,399 --> 00:09:11,839
however

222
00:09:11,839 --> 00:09:14,160
if we preserve the relation among

223
00:09:14,160 --> 00:09:16,399
variable and line 6

224
00:09:16,399 --> 00:09:20,880
then we can use it to update a relation

225
00:09:20,880 --> 00:09:24,640
um the precondition for variable y and

226
00:09:24,640 --> 00:09:26,240
line 5

227
00:09:26,240 --> 00:09:28,800
which further benefits the precondition

228
00:09:28,800 --> 00:09:31,680
at line 4.

229
00:09:31,760 --> 00:09:34,240
eventually we can have a precondition

230
00:09:34,240 --> 00:09:37,839
with better precision

231
00:09:38,000 --> 00:09:40,800
the second enhancement is for mitigating

232
00:09:40,800 --> 00:09:43,600
the precision loss when pass explodes

233
00:09:43,600 --> 00:09:46,399
existing work introduce precision loss

234
00:09:46,399 --> 00:09:48,560
when merging the results from different

235
00:09:48,560 --> 00:09:51,360
branches coarsely to ensure the over

236
00:09:51,360 --> 00:09:52,880
approximation

237
00:09:52,880 --> 00:09:55,839
for example even though existing work

238
00:09:55,839 --> 00:09:58,240
can infer the precondition for branches

239
00:09:58,240 --> 00:10:01,600
at line 5 and 7 precisely

240
00:10:01,600 --> 00:10:04,399
the precision loss occur when reaching

241
00:10:04,399 --> 00:10:05,839
line 4

242
00:10:05,839 --> 00:10:08,079
where two branches meet

243
00:10:08,079 --> 00:10:10,720
to ensure the over approximation the

244
00:10:10,720 --> 00:10:13,120
preview condition for variable z is

245
00:10:13,120 --> 00:10:16,240
unbounded and thus cannot filter any

246
00:10:16,240 --> 00:10:18,720
infeasible path

247
00:10:18,720 --> 00:10:21,440
therefore we keep the precondition for

248
00:10:21,440 --> 00:10:24,640
different branches in a disjunction form

249
00:10:24,640 --> 00:10:27,360
therefore we can have a precision

250
00:10:27,360 --> 00:10:30,880
precondition for better precision

251
00:10:30,880 --> 00:10:33,360
overall disjunctions maintains the

252
00:10:33,360 --> 00:10:37,920
precision for various control flow paths

253
00:10:38,000 --> 00:10:40,800
still the number of feasible parts could

254
00:10:40,800 --> 00:10:42,240
explode

255
00:10:42,240 --> 00:10:45,040
therefore when the number exceeds the

256
00:10:45,040 --> 00:10:48,480
predefined bound we selectively merge

257
00:10:48,480 --> 00:10:50,399
the disjunctions with the least

258
00:10:50,399 --> 00:10:52,079
precision loss

259
00:10:52,079 --> 00:10:54,160
we observe that merging different

260
00:10:54,160 --> 00:10:56,480
disjunctions can introduce different

261
00:10:56,480 --> 00:10:57,920
precision laws

262
00:10:57,920 --> 00:11:00,560
for example the case above could

263
00:11:00,560 --> 00:11:03,360
introduce the precision loss from 30 to

264
00:11:03,360 --> 00:11:06,160
50 but no precision loss in the case

265
00:11:06,160 --> 00:11:07,120
below

266
00:11:07,120 --> 00:11:10,399
therefore we will merge the case below

267
00:11:10,399 --> 00:11:13,279
in general we measure the precision loss

268
00:11:13,279 --> 00:11:15,120
by the distance between the two

269
00:11:15,120 --> 00:11:17,440
disjunctions

270
00:11:17,440 --> 00:11:19,839
we implement our method as a directed

271
00:11:19,839 --> 00:11:23,200
phasor beacon which is built upon lvm

272
00:11:23,200 --> 00:11:25,839
we mainly use three matrix the bug

273
00:11:25,839 --> 00:11:28,320
reproducing abilities the effectiveness

274
00:11:28,320 --> 00:11:31,040
of past pruning and the performance of a

275
00:11:31,040 --> 00:11:34,240
precondition to evaluate our method

276
00:11:34,240 --> 00:11:37,360
for bug reproducing abilities we achieve

277
00:11:37,360 --> 00:11:40,320
11.5 times speed up then the state of

278
00:11:40,320 --> 00:11:44,160
art and find 22 incomplete fix with 10

279
00:11:44,160 --> 00:11:46,240
cve assign

280
00:11:46,240 --> 00:11:48,959
for effectiveness we promote over 80

281
00:11:48,959 --> 00:11:50,639
percent of the past during the

282
00:11:50,639 --> 00:11:52,320
evaluation

283
00:11:52,320 --> 00:11:54,959
in terms of the performance precondition

284
00:11:54,959 --> 00:11:57,519
inference can terminate within five

285
00:11:57,519 --> 00:12:00,079
hours while introducing less than six

286
00:12:00,079 --> 00:12:01,839
percent long-term overhead for

287
00:12:01,839 --> 00:12:04,240
filtration

288
00:12:04,240 --> 00:12:06,560
we follow the similar settings in

289
00:12:06,560 --> 00:12:08,720
existing work and compare with five

290
00:12:08,720 --> 00:12:11,600
state of our fathers

291
00:12:11,600 --> 00:12:14,800
we also chose 51 cves from

292
00:12:14,800 --> 00:12:17,320
12 real world programs frequently

293
00:12:17,320 --> 00:12:20,160
evaluated by listing works

294
00:12:20,160 --> 00:12:22,959
we first evaluate the improvement of

295
00:12:22,959 --> 00:12:24,399
reproducing speed

296
00:12:24,399 --> 00:12:27,760
we use 120 hours as a time budget for

297
00:12:27,760 --> 00:12:30,959
each theory chosen the x-axis is the

298
00:12:30,959 --> 00:12:33,200
index of the chosen cvs

299
00:12:33,200 --> 00:12:36,000
beacon can reproduce all cve chosen

300
00:12:36,000 --> 00:12:38,639
within a given time budget well existing

301
00:12:38,639 --> 00:12:41,839
work cannot handle most of them

302
00:12:41,839 --> 00:12:44,480
to understand why beacon can achieve

303
00:12:44,480 --> 00:12:47,360
such performance improvement we first

304
00:12:47,360 --> 00:12:51,040
evaluate the ratio of the rejected path

305
00:12:51,040 --> 00:12:53,279
and we find out that more than 80

306
00:12:53,279 --> 00:12:56,079
percent of the execution passed during

307
00:12:56,079 --> 00:12:58,959
the fuzzing process can be terminated by

308
00:12:58,959 --> 00:13:01,279
our pre-conditioned influence

309
00:13:01,279 --> 00:13:03,519
moreover we found out that using the

310
00:13:03,519 --> 00:13:07,200
precondition we can prune nearly 30

311
00:13:07,200 --> 00:13:10,880
percent more past with almost 3.5 times

312
00:13:10,880 --> 00:13:13,680
speed up than purely use reachability

313
00:13:13,680 --> 00:13:16,479
analysis

314
00:13:16,800 --> 00:13:20,560
meanwhile we integrate beacon with other

315
00:13:20,560 --> 00:13:24,000
three state-of-the-art fuzzers afl moped

316
00:13:24,000 --> 00:13:26,320
and afl plus plus

317
00:13:26,320 --> 00:13:28,639
on average compared with the original

318
00:13:28,639 --> 00:13:31,440
tools the integration can improve

319
00:13:31,440 --> 00:13:33,120
[Music]

320
00:13:33,120 --> 00:13:35,760
other fathers to reproduce a specific

321
00:13:35,760 --> 00:13:38,959
box 9.69 times

322
00:13:38,959 --> 00:13:41,518
faster

323
00:13:41,600 --> 00:13:44,079
moreover to evaluate the runtime

324
00:13:44,079 --> 00:13:46,240
overhead caused by the precondition

325
00:13:46,240 --> 00:13:47,680
filtration

326
00:13:47,680 --> 00:13:50,000
we run the same input against the two

327
00:13:50,000 --> 00:13:51,279
version of the

328
00:13:51,279 --> 00:13:52,959
benchmark program

329
00:13:52,959 --> 00:13:56,000
and fortunately we found out that beacon

330
00:13:56,000 --> 00:13:57,920
introduced less than six percent

331
00:13:57,920 --> 00:14:00,839
long-term overhead on

332
00:14:00,839 --> 00:14:03,519
average to sum up

333
00:14:03,519 --> 00:14:05,519
beacon promotes not only those

334
00:14:05,519 --> 00:14:07,199
unreachable parts

335
00:14:07,199 --> 00:14:10,160
but also the paths cannot satisfy the

336
00:14:10,160 --> 00:14:12,480
precondition inferred by our static

337
00:14:12,480 --> 00:14:13,680
analysis

338
00:14:13,680 --> 00:14:15,440
so that we can terminate those

339
00:14:15,440 --> 00:14:18,560
unnecessary execution earlier to improve

340
00:14:18,560 --> 00:14:20,240
efficiency

341
00:14:20,240 --> 00:14:23,120
for more details please come to our qa

342
00:14:23,120 --> 00:14:25,600
sessions and feel free to try our tools

343
00:14:25,600 --> 00:14:30,120
on docker hub thank you

344
00:14:34,399 --> 00:14:35,839
thank you ho ching for the talk and

345
00:14:35,839 --> 00:14:37,519
hitching is available i'm doing right

346
00:14:37,519 --> 00:14:39,440
now taking questions

347
00:14:39,440 --> 00:14:40,720
so um

348
00:14:40,720 --> 00:14:42,720
audience is here if you have any

349
00:14:42,720 --> 00:14:44,480
questions please feel free to come to

350
00:14:44,480 --> 00:14:45,680
the front

351
00:14:45,680 --> 00:14:48,079
and i would like to start first

352
00:14:48,079 --> 00:14:49,920
um so ho ching first double check can

353
00:14:49,920 --> 00:14:52,560
you hear me now

354
00:14:53,120 --> 00:14:56,320
uh yes great okay so my question is

355
00:14:56,320 --> 00:14:59,440
about you know the precondition that you

356
00:14:59,440 --> 00:15:02,160
insert in the program so i just wonder

357
00:15:02,160 --> 00:15:05,519
how did you decide where to insert those

358
00:15:05,519 --> 00:15:08,399
preconditions

359
00:15:10,240 --> 00:15:11,920
we usually

360
00:15:11,920 --> 00:15:14,079
we make actually we've split into two

361
00:15:14,079 --> 00:15:16,560
scenarios the first scenario is on

362
00:15:16,560 --> 00:15:19,279
purely unreachable uh blocks

363
00:15:19,279 --> 00:15:21,920
then we will insert this precondition at

364
00:15:21,920 --> 00:15:24,320
the beginning of each blocks

365
00:15:24,320 --> 00:15:28,000
for those uh uh invisible paths that are

366
00:15:28,000 --> 00:15:29,519
inferred by the

367
00:15:29,519 --> 00:15:31,519
precondition analysis

368
00:15:31,519 --> 00:15:34,240
then we will find that we will first

369
00:15:34,240 --> 00:15:37,279
transform the program into the ssa form

370
00:15:37,279 --> 00:15:40,639
and then we will find the

371
00:15:41,360 --> 00:15:44,800
definition site of related variables

372
00:15:44,800 --> 00:15:47,680
and we will insert the

373
00:15:47,680 --> 00:15:50,079
precondition check at the

374
00:15:50,079 --> 00:15:53,680
up directly after the definition set of

375
00:15:53,680 --> 00:15:56,638
of the variables

376
00:15:56,720 --> 00:15:58,240
yep that makes sense actually in that

377
00:15:58,240 --> 00:15:59,519
ways you can

378
00:15:59,519 --> 00:16:01,839
basically you're trying to insert the

379
00:16:01,839 --> 00:16:04,480
precondition as early as possible that's

380
00:16:04,480 --> 00:16:07,040
great thank you okay we have

381
00:16:07,040 --> 00:16:10,480
yep uh we have questions from the

382
00:16:10,480 --> 00:16:12,800
audience right now

383
00:16:12,800 --> 00:16:16,240
um hi i'm kyle from asu

384
00:16:16,240 --> 00:16:19,360
um it's very interesting work

385
00:16:19,360 --> 00:16:22,000
i have a question about like how do you

386
00:16:22,000 --> 00:16:23,199
decide

387
00:16:23,199 --> 00:16:24,480
um

388
00:16:24,480 --> 00:16:26,800
like which is the target block that you

389
00:16:26,800 --> 00:16:29,120
want to reach like at function level

390
00:16:29,120 --> 00:16:31,120
like you have function a that calls

391
00:16:31,120 --> 00:16:33,360
function b which may reach

392
00:16:33,360 --> 00:16:36,480
the uh a target basic block how do you

393
00:16:36,480 --> 00:16:39,040
know that like this function b is the

394
00:16:39,040 --> 00:16:41,440
target when you are uh analyzing

395
00:16:41,440 --> 00:16:44,000
function a

396
00:16:45,040 --> 00:16:47,680
uh actually uh this is a good question

397
00:16:47,680 --> 00:16:50,160
so first of all the target point well

398
00:16:50,160 --> 00:16:51,920
currently we

399
00:16:51,920 --> 00:16:54,320
stress where we claim ourselves as a

400
00:16:54,320 --> 00:16:56,560
directive funding so

401
00:16:56,560 --> 00:16:59,440
usually we need

402
00:16:59,440 --> 00:17:00,320
the

403
00:17:00,320 --> 00:17:03,199
user to provide the bug report which

404
00:17:03,199 --> 00:17:05,599
you can at least contain

405
00:17:05,599 --> 00:17:08,079
uh the cross point of this body we want

406
00:17:08,079 --> 00:17:09,359
to reproduce

407
00:17:09,359 --> 00:17:10,720
so currently we

408
00:17:10,720 --> 00:17:13,119
this is the basic uh

409
00:17:13,119 --> 00:17:15,359
assumption of our work

410
00:17:15,359 --> 00:17:18,880
in our input of a work then with this

411
00:17:18,880 --> 00:17:22,000
given targets we were located in the pro

412
00:17:22,000 --> 00:17:22,720
in

413
00:17:22,720 --> 00:17:24,959
programs and then we will

414
00:17:24,959 --> 00:17:28,079
use a backward static analysis

415
00:17:28,079 --> 00:17:29,760
to

416
00:17:29,760 --> 00:17:32,559
to analyze the precondition from the

417
00:17:32,559 --> 00:17:34,960
crash point to the program entry

418
00:17:34,960 --> 00:17:36,720
to and then

419
00:17:36,720 --> 00:17:39,120
to infer the preconditions

420
00:17:39,120 --> 00:17:39,919
so

421
00:17:39,919 --> 00:17:41,039
uh

422
00:17:41,039 --> 00:17:44,160
currently so to answer your questions so

423
00:17:44,160 --> 00:17:45,200
currently

424
00:17:45,200 --> 00:17:47,760
for the target points we will we only

425
00:17:47,760 --> 00:17:50,559
need one target points provided by the

426
00:17:50,559 --> 00:17:54,559
users and then uh other and other

427
00:17:54,559 --> 00:17:57,280
related or reachable program points can

428
00:17:57,280 --> 00:18:00,240
be inferred automatically by our engines

429
00:18:00,240 --> 00:18:03,600
and of course multiple uh

430
00:18:03,600 --> 00:18:06,320
multiple entry are welcomes for example

431
00:18:06,320 --> 00:18:08,640
if you can give you a

432
00:18:08,640 --> 00:18:10,240
specific trace

433
00:18:10,240 --> 00:18:12,320
of the of the target vulnerability you

434
00:18:12,320 --> 00:18:14,720
want to reproduce that may

435
00:18:14,720 --> 00:18:17,360
that may improve the efficiency or

436
00:18:17,360 --> 00:18:19,919
effectiveness of the reproductions but

437
00:18:19,919 --> 00:18:22,720
that require extra manual expertise so

438
00:18:22,720 --> 00:18:24,960
we do not recommend that

439
00:18:24,960 --> 00:18:28,320
but we as we can support this kind of

440
00:18:28,320 --> 00:18:30,160
scenarios too

441
00:18:30,160 --> 00:18:33,280
so please answer your questions um so if

442
00:18:33,280 --> 00:18:36,160
i understand correctly you need a some

443
00:18:36,160 --> 00:18:38,320
manual effort initially

444
00:18:38,320 --> 00:18:41,039
and then like so you know where where

445
00:18:41,039 --> 00:18:44,960
the target base block is right

446
00:18:44,960 --> 00:18:48,400
uh yes okay thank you

447
00:18:48,400 --> 00:18:50,960
no problem

448
00:18:50,960 --> 00:18:52,880
hi one more question

449
00:18:52,880 --> 00:18:55,360
uh my question is if i understand your

450
00:18:55,360 --> 00:18:57,050
work you're trying to

451
00:18:57,050 --> 00:18:58,720
[Music]

452
00:18:58,720 --> 00:19:00,640
reduce the number of uh

453
00:19:00,640 --> 00:19:03,360
computations by doing this provable path

454
00:19:03,360 --> 00:19:05,520
pruning

455
00:19:05,520 --> 00:19:07,280
so i was wondering there's two forms you

456
00:19:07,280 --> 00:19:09,360
can sort of stop in execution one is

457
00:19:09,360 --> 00:19:12,240
through your precondition analysis

458
00:19:12,240 --> 00:19:14,240
the other form is through a static

459
00:19:14,240 --> 00:19:16,640
reachability if if the execution path

460
00:19:16,640 --> 00:19:18,640
will not reach the target

461
00:19:18,640 --> 00:19:20,320
do you know what the breakdown was in

462
00:19:20,320 --> 00:19:23,879
terms of your results

463
00:19:24,080 --> 00:19:26,880
yes actually in our presentation we have

464
00:19:26,880 --> 00:19:29,520
reported this status statistic

465
00:19:29,520 --> 00:19:32,559
so using purely uh unreachable or

466
00:19:32,559 --> 00:19:34,640
reachability analysis to promote those

467
00:19:34,640 --> 00:19:36,960
unreachable paths we can perform like

468
00:19:36,960 --> 00:19:39,200
around half of the

469
00:19:39,200 --> 00:19:40,480
uh

470
00:19:40,480 --> 00:19:43,039
execution during the filing process

471
00:19:43,039 --> 00:19:44,799
but still they're like

472
00:19:44,799 --> 00:19:47,919
we can we can from actual like 30

473
00:19:47,919 --> 00:19:50,400
30 to 40

474
00:19:50,400 --> 00:19:53,520
of the execution using the preconditions

475
00:19:53,520 --> 00:19:56,720
so i think uh so i should say that the

476
00:19:56,720 --> 00:19:58,720
combination of these two

477
00:19:58,720 --> 00:20:01,200
uh methods are

478
00:20:01,200 --> 00:20:02,080
are

479
00:20:02,080 --> 00:20:05,919
necessary or for improving the directive

480
00:20:05,919 --> 00:20:09,679
effectiveness of the directed body

481
00:20:09,679 --> 00:20:10,640
thank you

482
00:20:10,640 --> 00:20:12,000
and uh

483
00:20:12,000 --> 00:20:13,919
yes okay thank you

484
00:20:13,919 --> 00:20:16,720
oh please go ahead

485
00:20:16,720 --> 00:20:17,919
oh no

486
00:20:17,919 --> 00:20:21,280
just want to make sure that because uh

487
00:20:21,280 --> 00:20:24,880
in our opinion uh actually which both uh

488
00:20:24,880 --> 00:20:26,720
reach um reachability analysis and

489
00:20:26,720 --> 00:20:29,280
preconditional analysis are integrated

490
00:20:29,280 --> 00:20:32,000
in beacons and because because of the

491
00:20:32,000 --> 00:20:35,760
time limit we do not make talk too much

492
00:20:35,760 --> 00:20:38,080
details about the reachability analysis

493
00:20:38,080 --> 00:20:39,919
in our engines and you can find out

494
00:20:39,919 --> 00:20:41,440
through our papers

495
00:20:41,440 --> 00:20:43,600
that is what i want to say

496
00:20:43,600 --> 00:20:45,360
not big deals

497
00:20:45,360 --> 00:20:46,720
thanks

498
00:20:46,720 --> 00:20:48,400
all right for the interest of time last

499
00:20:48,400 --> 00:20:49,840
question please

500
00:20:49,840 --> 00:20:53,840
okay hi great work and um

501
00:20:53,840 --> 00:20:56,480
i'm draw from purdue universities

502
00:20:56,480 --> 00:20:58,559
and actually i have a question about how

503
00:20:58,559 --> 00:21:00,080
do you handle the noobs and the

504
00:21:00,080 --> 00:21:04,000
recursions because like i

505
00:21:04,000 --> 00:21:06,960
guess your abstract domain is the

506
00:21:06,960 --> 00:21:09,840
interval which is a lattice of course

507
00:21:09,840 --> 00:21:12,000
but you also introduce the disjunctions

508
00:21:12,000 --> 00:21:13,120
into the

509
00:21:13,120 --> 00:21:16,000
into your abstract abstract domain so i

510
00:21:16,000 --> 00:21:18,960
was wondering how much overhead you will

511
00:21:18,960 --> 00:21:20,159
introduce

512
00:21:20,159 --> 00:21:22,400
when you're considering the disjunctions

513
00:21:22,400 --> 00:21:24,880
because i thought when we're considering

514
00:21:24,880 --> 00:21:27,520
the disjunctions it will be hard to

515
00:21:27,520 --> 00:21:29,440
reach the fixed point

516
00:21:29,440 --> 00:21:32,720
yeah that's my questions

517
00:21:33,360 --> 00:21:35,760
that is a very good question so actually

518
00:21:35,760 --> 00:21:38,000
we also noticed these issues and we

519
00:21:38,000 --> 00:21:42,000
actually evaluated our papers so that

520
00:21:42,000 --> 00:21:44,880
and this to your answer so first of all

521
00:21:44,880 --> 00:21:46,000
uh that is

522
00:21:46,000 --> 00:21:47,760
the solution of to your answers that's

523
00:21:47,760 --> 00:21:49,760
your questions this

524
00:21:49,760 --> 00:21:51,760
is our second implementation which is

525
00:21:51,760 --> 00:21:53,760
called the boundary disjunction

526
00:21:53,760 --> 00:21:56,000
so actually to

527
00:21:56,000 --> 00:21:58,880
limit it or to

528
00:21:58,880 --> 00:22:01,760
avoid past state explosion

529
00:22:01,760 --> 00:22:03,520
brain by loop

530
00:22:03,520 --> 00:22:06,080
so we will bound the disjunction we well

531
00:22:06,080 --> 00:22:08,880
preserved during the backward analysis

532
00:22:08,880 --> 00:22:10,559
and so

533
00:22:10,559 --> 00:22:15,280
and if for example if a loop that may

534
00:22:15,280 --> 00:22:17,360
generate an enormous amount of state

535
00:22:17,360 --> 00:22:19,679
during the backward analysis then we

536
00:22:19,679 --> 00:22:22,320
will uh automatically merge

537
00:22:22,320 --> 00:22:24,320
some of the

538
00:22:24,320 --> 00:22:26,640
the states to together

539
00:22:26,640 --> 00:22:28,960
so you you're uh in you know using

540
00:22:28,960 --> 00:22:31,679
program uh using a program's perspective

541
00:22:31,679 --> 00:22:32,640
you can

542
00:22:32,640 --> 00:22:35,919
regard it as we will merge some parts

543
00:22:35,919 --> 00:22:38,400
uh in a loop together

544
00:22:38,400 --> 00:22:41,280
so since since we uh since we use a

545
00:22:41,280 --> 00:22:43,760
precondition to prune those

546
00:22:43,760 --> 00:22:47,520
passes uh such a merging process will

547
00:22:47,520 --> 00:22:50,240
always become over approximation of the

548
00:22:50,240 --> 00:22:51,600
preconditions

549
00:22:51,600 --> 00:22:54,080
and therefore we can still safely prune

550
00:22:54,080 --> 00:22:56,159
those invisible parts

551
00:22:56,159 --> 00:22:58,720
but but of course the precision will

552
00:22:58,720 --> 00:23:01,919
influence the effectiveness of chromium

553
00:23:01,919 --> 00:23:04,000
and fortunately we find out that during

554
00:23:04,000 --> 00:23:07,280
our evaluation we find out that

555
00:23:07,280 --> 00:23:10,720
a proper like a proper bound like phi we

556
00:23:10,720 --> 00:23:13,679
use you know evaluation can uh

557
00:23:13,679 --> 00:23:16,880
effectively can like find the sweet spot

558
00:23:16,880 --> 00:23:18,559
between the effectiveness and the

559
00:23:18,559 --> 00:23:21,360
efficiency to handle the loop

560
00:23:21,360 --> 00:23:23,600
in our evaluations

561
00:23:23,600 --> 00:23:25,919
and of course this i think this is still

562
00:23:25,919 --> 00:23:28,960
open question for for implementations

563
00:23:28,960 --> 00:23:30,400
and

564
00:23:30,400 --> 00:23:33,520
we're we're still working on this part

565
00:23:33,520 --> 00:23:35,280
in the future work

566
00:23:35,280 --> 00:23:37,600
great okay okay thanks for your answer

567
00:23:37,600 --> 00:23:40,480
okay and thanks ho chi and all speakers

568
00:23:40,480 --> 00:23:43,760
and thank you everyone for coming

