1
00:00:02,399 --> 00:00:05,359
okay so hi everyone i'm mikhaila welcome

2
00:00:05,359 --> 00:00:08,480
to my talk proterra or principle yet

3
00:00:08,480 --> 00:00:12,000
optimal in dram target raw refresh

4
00:00:12,000 --> 00:00:14,160
so at this point i hope you understand

5
00:00:14,160 --> 00:00:16,000
that rumor affects everything however

6
00:00:16,000 --> 00:00:17,760
let's repeat it once again

7
00:00:17,760 --> 00:00:19,760
so it affects your smartphone your

8
00:00:19,760 --> 00:00:22,640
laptop it affects servers and it can

9
00:00:22,640 --> 00:00:26,480
compromise your browser as well as

10
00:00:26,480 --> 00:00:29,760
local or remote scenarios

11
00:00:29,760 --> 00:00:31,439
so why should you care

12
00:00:31,439 --> 00:00:33,840
if this is not enough well since it's

13
00:00:33,840 --> 00:00:36,320
discovery many many exploits have been

14
00:00:36,320 --> 00:00:38,559
published right and we did we did

15
00:00:38,559 --> 00:00:40,960
therefore vendors said that the problem

16
00:00:40,960 --> 00:00:43,280
was fixed that they fixed rammer and it

17
00:00:43,280 --> 00:00:46,000
was not vulnerability anymore however in

18
00:00:46,000 --> 00:00:49,120
2020 with trespass we saw that indeed

19
00:00:49,120 --> 00:00:51,280
there is an indiram rumor mitigation

20
00:00:51,280 --> 00:00:52,800
deployed in chips

21
00:00:52,800 --> 00:00:54,079
however

22
00:00:54,079 --> 00:00:56,719
dram devices are still vulnerable and as

23
00:00:56,719 --> 00:00:58,960
my colleague patrick showed you with

24
00:00:58,960 --> 00:01:00,239
blacksmith

25
00:01:00,239 --> 00:01:03,039
actually turns out all devices are still

26
00:01:03,039 --> 00:01:05,280
vulnerable to roamer

27
00:01:05,280 --> 00:01:07,280
so what is exactly rammer well it's a

28
00:01:07,280 --> 00:01:09,920
vulnerability that affects dram memories

29
00:01:09,920 --> 00:01:12,640
and this is due to the constant leak of

30
00:01:12,640 --> 00:01:15,200
the charge from the internal capacitors

31
00:01:15,200 --> 00:01:17,920
and these effects can be accelerated by

32
00:01:17,920 --> 00:01:20,400
repeatedly activating rows that are

33
00:01:20,400 --> 00:01:22,960
adhesioned from a victim row so for

34
00:01:22,960 --> 00:01:25,200
example let's assume there is a sentence

35
00:01:25,200 --> 00:01:27,040
like computer secure

36
00:01:27,040 --> 00:01:29,280
which is saved along a road that is

37
00:01:29,280 --> 00:01:31,680
usually referred as the victim row if

38
00:01:31,680 --> 00:01:34,159
the addition rows known as aggressors

39
00:01:34,159 --> 00:01:36,479
are repeatedly activated this will

40
00:01:36,479 --> 00:01:39,680
eventually induce the value stored to be

41
00:01:39,680 --> 00:01:41,759
changed which is referred to as a bit

42
00:01:41,759 --> 00:01:42,640
flip

43
00:01:42,640 --> 00:01:44,479
leaving a sentence as computer are

44
00:01:44,479 --> 00:01:48,000
secure actually becoming a question

45
00:01:48,000 --> 00:01:50,399
so just to give you an idea of how many

46
00:01:50,399 --> 00:01:52,479
activations are required well in the

47
00:01:52,479 --> 00:01:54,159
worst case scenario we were talking

48
00:01:54,159 --> 00:01:56,399
about 5000 activation to induce a bit

49
00:01:56,399 --> 00:01:59,520
flip so very very few

50
00:01:59,520 --> 00:02:02,320
how do mitigation work well first of all

51
00:02:02,320 --> 00:02:04,079
ddr is a synchronous protocol which

52
00:02:04,079 --> 00:02:06,159
means that there is a stream of commands

53
00:02:06,159 --> 00:02:08,639
that is sent to a device and the device

54
00:02:08,639 --> 00:02:10,639
has to respect it

55
00:02:10,639 --> 00:02:12,319
and the commands we are interested in is

56
00:02:12,319 --> 00:02:15,440
of course raw activation and the refresh

57
00:02:15,440 --> 00:02:17,280
now the refresh is a periodic command

58
00:02:17,280 --> 00:02:19,599
that is necessary for the

59
00:02:19,599 --> 00:02:22,480
device to work correctly

60
00:02:22,480 --> 00:02:23,280
so

61
00:02:23,280 --> 00:02:26,560
as activation comes the raw address is

62
00:02:26,560 --> 00:02:28,959
used by the mitigation somehow and then

63
00:02:28,959 --> 00:02:31,920
eventually during this refresh operation

64
00:02:31,920 --> 00:02:34,720
the mitigation will do additional work

65
00:02:34,720 --> 00:02:36,800
refreshing roles that they consider to

66
00:02:36,800 --> 00:02:39,440
be victims or under an attack and this

67
00:02:39,440 --> 00:02:42,000
is called target raw refresh

68
00:02:42,000 --> 00:02:42,720
and

69
00:02:42,720 --> 00:02:46,080
this is repeated over time

70
00:02:46,080 --> 00:02:47,840
how do mitigation work internally with a

71
00:02:47,840 --> 00:02:49,280
bit more details well of course

72
00:02:49,280 --> 00:02:52,160
variation applied depending on vendors

73
00:02:52,160 --> 00:02:53,599
but generally when there is an

74
00:02:53,599 --> 00:02:55,840
activation the address of the row is

75
00:02:55,840 --> 00:02:58,080
used to update somehow some counters

76
00:02:58,080 --> 00:03:00,000
that are internally stored and then

77
00:03:00,000 --> 00:03:02,640
eventually when there is time to perform

78
00:03:02,640 --> 00:03:05,040
this trr event

79
00:03:05,040 --> 00:03:08,000
a victim selector chooses which row are

80
00:03:08,000 --> 00:03:11,440
considered to be under attack

81
00:03:11,440 --> 00:03:13,200
so let's consider for a second here

82
00:03:13,200 --> 00:03:16,480
ideal which is the perfect mitigation so

83
00:03:16,480 --> 00:03:19,120
we are considering infinite storage and

84
00:03:19,120 --> 00:03:21,120
possibility to count every single

85
00:03:21,120 --> 00:03:24,239
activation well with our work we showed

86
00:03:24,239 --> 00:03:27,200
our novel attack called fainting proving

87
00:03:27,200 --> 00:03:29,840
that even such mitigation would still be

88
00:03:29,840 --> 00:03:32,000
vulnerable to fainting what do we mean

89
00:03:32,000 --> 00:03:34,560
by vulnerable we mean that a victim raw

90
00:03:34,560 --> 00:03:38,080
will never be refreshed by trr

91
00:03:38,080 --> 00:03:40,319
in other words this gives us bounds for

92
00:03:40,319 --> 00:03:43,680
any attack to tear ideal because we

93
00:03:43,680 --> 00:03:45,920
proved fainting to be optimal and it

94
00:03:45,920 --> 00:03:47,840
also gives bounds for any deterministic

95
00:03:47,840 --> 00:03:49,599
mitigation because of course there will

96
00:03:49,599 --> 00:03:51,599
be worse than there are ideal

97
00:03:51,599 --> 00:03:54,480
and in the paper we prove this

98
00:03:54,480 --> 00:03:57,040
so this means that by fainting we can

99
00:03:57,040 --> 00:03:59,280
understand the degree of protection that

100
00:03:59,280 --> 00:04:02,640
a device can have

101
00:04:03,280 --> 00:04:05,120
how does it work fainting

102
00:04:05,120 --> 00:04:07,599
first the key concept is that trrs can

103
00:04:07,599 --> 00:04:10,319
only append periodically and

104
00:04:10,319 --> 00:04:12,319
in the stream of commands that are sent

105
00:04:12,319 --> 00:04:14,720
to the dram we want to activate

106
00:04:14,720 --> 00:04:18,000
aggressors that actually generate decoy

107
00:04:18,000 --> 00:04:20,320
victim rows that will be refreshed

108
00:04:20,320 --> 00:04:23,040
instead of the real victim

109
00:04:23,040 --> 00:04:26,400
so in this case i color coded the raw

110
00:04:26,400 --> 00:04:29,120
address so as you can see

111
00:04:29,120 --> 00:04:31,520
different rows activation will somehow

112
00:04:31,520 --> 00:04:34,080
pollute the memory of the mitigation but

113
00:04:34,080 --> 00:04:36,160
then eventually we will also activate

114
00:04:36,160 --> 00:04:38,000
the real aggressor that is linked to the

115
00:04:38,000 --> 00:04:40,560
real victim in such a way that when

116
00:04:40,560 --> 00:04:43,120
finally there is time for these extra

117
00:04:43,120 --> 00:04:45,360
refreshes the road that the mitigation

118
00:04:45,360 --> 00:04:49,199
chooses to refresh are actually decoys

119
00:04:49,199 --> 00:04:51,440
in place of the real victim and this can

120
00:04:51,440 --> 00:04:54,240
be repeated indefinitely

121
00:04:54,240 --> 00:04:56,639
so what forms the optimal attack well we

122
00:04:56,639 --> 00:04:58,720
need to understand the number of decoys

123
00:04:58,720 --> 00:05:00,720
the pattern for each decoy and the

124
00:05:00,720 --> 00:05:03,199
duration of the attack i will not get

125
00:05:03,199 --> 00:05:05,120
into details but i can tell you that the

126
00:05:05,120 --> 00:05:07,360
concept is to minimize the activation

127
00:05:07,360 --> 00:05:10,479
used and to decoys while at the same

128
00:05:10,479 --> 00:05:12,880
time always saving the victim

129
00:05:12,880 --> 00:05:15,199
and we proved everything

130
00:05:15,199 --> 00:05:17,120
so let's have a visualization of

131
00:05:17,120 --> 00:05:19,360
painting in this case an example with 36

132
00:05:19,360 --> 00:05:22,400
decoys which means 18 aggressors so at

133
00:05:22,400 --> 00:05:24,880
the beginning of painting

134
00:05:24,880 --> 00:05:25,680
all

135
00:05:25,680 --> 00:05:26,400
the

136
00:05:26,400 --> 00:05:28,479
aggressor linked with these decoys are

137
00:05:28,479 --> 00:05:30,960
activated but as these decals are

138
00:05:30,960 --> 00:05:33,759
refreshed the aggressor are not

139
00:05:33,759 --> 00:05:36,000
activated anymore

140
00:05:36,000 --> 00:05:38,560
up to the end of painting where only the

141
00:05:38,560 --> 00:05:40,720
aggressor linked to the real victim is

142
00:05:40,720 --> 00:05:42,720
still activated and by the way we use

143
00:05:42,720 --> 00:05:45,520
this pattern in real devices obtaining

144
00:05:45,520 --> 00:05:47,440
bit flips

145
00:05:47,440 --> 00:05:49,360
so how exactly do we protect against

146
00:05:49,360 --> 00:05:51,520
fainting well luckily

147
00:05:51,520 --> 00:05:54,080
expects every row to be refreshed at

148
00:05:54,080 --> 00:05:56,160
least once in a trap window and this

149
00:05:56,160 --> 00:05:59,759
again happens with this refresh command

150
00:05:59,759 --> 00:06:03,280
and this bounds the duration of painting

151
00:06:03,280 --> 00:06:05,199
in other words starting from a certain

152
00:06:05,199 --> 00:06:07,120
roman threshold the x we know that the

153
00:06:07,120 --> 00:06:08,720
maximum amount of time that the row can

154
00:06:08,720 --> 00:06:09,680
be

155
00:06:09,680 --> 00:06:12,080
hammered is x minus one of course

156
00:06:12,080 --> 00:06:14,960
and painting gives us the idea if this

157
00:06:14,960 --> 00:06:18,080
device can be protected at all or not

158
00:06:18,080 --> 00:06:19,520
however there is a problem we are still

159
00:06:19,520 --> 00:06:21,919
assuming infinite amount of space right

160
00:06:21,919 --> 00:06:23,600
so we need to introduce the first

161
00:06:23,600 --> 00:06:25,520
real-world problem which is limited

162
00:06:25,520 --> 00:06:28,080
storage and how did we solve this well

163
00:06:28,080 --> 00:06:30,560
let's introduce protearar design as you

164
00:06:30,560 --> 00:06:32,639
can see it's very similar to the design

165
00:06:32,639 --> 00:06:34,000
i showed you before but there's a

166
00:06:34,000 --> 00:06:36,639
fundamental key aspect of difference

167
00:06:36,639 --> 00:06:40,000
which is how we save and store values

168
00:06:40,000 --> 00:06:42,960
well first of all we store victim rows

169
00:06:42,960 --> 00:06:44,960
and we use our novel data structure

170
00:06:44,960 --> 00:06:46,960
called proactive miseries which is

171
00:06:46,960 --> 00:06:49,280
functionally based on miserabies

172
00:06:49,280 --> 00:06:52,479
but we introduce a novel way to

173
00:06:52,479 --> 00:06:54,800
size it depending on this proactive

174
00:06:54,800 --> 00:06:57,199
environment and furthermore we also

175
00:06:57,199 --> 00:06:59,360
introduce the possibility to prune

176
00:06:59,360 --> 00:07:01,680
entries meaning putting their value to

177
00:07:01,680 --> 00:07:03,039
zero

178
00:07:03,039 --> 00:07:05,440
once they are refreshed of course

179
00:07:05,440 --> 00:07:06,880
so that's pro tier products against

180
00:07:06,880 --> 00:07:08,720
painting well let's look up for a second

181
00:07:08,720 --> 00:07:11,039
with tr ideal infinite amount of

182
00:07:11,039 --> 00:07:13,199
counters fainting gives us this high

183
00:07:13,199 --> 00:07:15,520
fixed protection which is the maximum

184
00:07:15,520 --> 00:07:17,680
that the device could support

185
00:07:17,680 --> 00:07:19,360
and in the paper we showed and proved

186
00:07:19,360 --> 00:07:20,560
that using

187
00:07:20,560 --> 00:07:23,039
a subset a limited amount of counters

188
00:07:23,039 --> 00:07:25,919
c-max will result in the same

189
00:07:25,919 --> 00:07:27,599
amount of protection

190
00:07:27,599 --> 00:07:29,840
so of course this is good but we're

191
00:07:29,840 --> 00:07:32,080
still missing something we would like a

192
00:07:32,080 --> 00:07:33,919
tunable protection we would like to use

193
00:07:33,919 --> 00:07:36,319
fewer counters for devices that are less

194
00:07:36,319 --> 00:07:38,160
vulnerable

195
00:07:38,160 --> 00:07:39,759
so the question is what does it happen

196
00:07:39,759 --> 00:07:41,039
if we lower

197
00:07:41,039 --> 00:07:43,520
the number of counters

198
00:07:43,520 --> 00:07:45,440
so let's introduce the second challenge

199
00:07:45,440 --> 00:07:47,120
of the real world which is different

200
00:07:47,120 --> 00:07:51,039
roamer threshold for different devices

201
00:07:51,039 --> 00:07:52,560
so in the paper we showed them proof

202
00:07:52,560 --> 00:07:54,160
that lowering the number of counter is

203
00:07:54,160 --> 00:07:56,639
possible and fainting adopts in what we

204
00:07:56,639 --> 00:07:58,800
call fainting ghost

205
00:07:58,800 --> 00:08:00,960
basically becoming more effective

206
00:08:00,960 --> 00:08:03,520
against a lower number of counters which

207
00:08:03,520 --> 00:08:05,280
is exactly what we want right we want a

208
00:08:05,280 --> 00:08:08,639
tunable protection

209
00:08:08,639 --> 00:08:10,960
and of course we proved this so what

210
00:08:10,960 --> 00:08:12,879
exactly is fainting ghost well the

211
00:08:12,879 --> 00:08:15,680
concept it is that rose can appear as

212
00:08:15,680 --> 00:08:18,080
already attacked and before we get into

213
00:08:18,080 --> 00:08:20,160
that let's briefly review uh how

214
00:08:20,160 --> 00:08:22,080
miserably and

215
00:08:22,080 --> 00:08:24,400
pro active music is works

216
00:08:24,400 --> 00:08:26,240
well we have a fixed number of entries

217
00:08:26,240 --> 00:08:28,560
in our table plus what is called a

218
00:08:28,560 --> 00:08:31,599
spillover and whenever we want to insert

219
00:08:31,599 --> 00:08:33,839
an element into this table of course if

220
00:08:33,839 --> 00:08:36,479
there is space will go directly in

221
00:08:36,479 --> 00:08:38,799
if the storage is completely filled in

222
00:08:38,799 --> 00:08:41,120
case there is a match you will just

223
00:08:41,120 --> 00:08:43,200
increase the counter if there is no

224
00:08:43,200 --> 00:08:45,440
match then the speed lower will enter in

225
00:08:45,440 --> 00:08:47,600
play and you will be checked so if the

226
00:08:47,600 --> 00:08:50,640
spillover is lower than the minimum of

227
00:08:50,640 --> 00:08:52,480
the minimum of the table

228
00:08:52,480 --> 00:08:54,480
then there will lower will increase if

229
00:08:54,480 --> 00:08:56,560
it's not meaning that it's equal then

230
00:08:56,560 --> 00:08:59,200
the entry will just replace the minimum

231
00:08:59,200 --> 00:09:01,040
in the table

232
00:09:01,040 --> 00:09:03,440
so let's consider fainting which is

233
00:09:03,440 --> 00:09:06,240
using a number of decoys larger than the

234
00:09:06,240 --> 00:09:08,399
entries in the table

235
00:09:08,399 --> 00:09:10,240
well this is the pattern i showed you

236
00:09:10,240 --> 00:09:12,959
before and in this case in order for the

237
00:09:12,959 --> 00:09:16,320
victim to be saved meaning that the is

238
00:09:16,320 --> 00:09:18,720
not picked for refresh in this case the

239
00:09:18,720 --> 00:09:21,440
attacker was activating three times

240
00:09:21,440 --> 00:09:23,600
the green aggressor

241
00:09:23,600 --> 00:09:26,399
well suppose a situation where the

242
00:09:26,399 --> 00:09:27,920
storage is completely filled with

243
00:09:27,920 --> 00:09:30,800
victims and we want as attacker to

244
00:09:30,800 --> 00:09:32,959
obtain the same situation

245
00:09:32,959 --> 00:09:36,080
so we activate the green aggressor and

246
00:09:36,080 --> 00:09:38,080
then it's checked against the spillover

247
00:09:38,080 --> 00:09:40,000
because the storage is filled

248
00:09:40,000 --> 00:09:41,279
and the spillover is equal to the

249
00:09:41,279 --> 00:09:42,480
minimum

250
00:09:42,480 --> 00:09:43,360
so

251
00:09:43,360 --> 00:09:46,320
the victim linked to the green aggressor

252
00:09:46,320 --> 00:09:48,720
just replaced the entries plus one of

253
00:09:48,720 --> 00:09:51,360
course as if they had been already

254
00:09:51,360 --> 00:09:54,240
hammered this amount of times

255
00:09:54,240 --> 00:09:56,080
and this leaves more time for the

256
00:09:56,080 --> 00:09:59,440
attacker to activate other

257
00:09:59,440 --> 00:10:02,000
aggressors and even perhaps the real

258
00:10:02,000 --> 00:10:04,160
aggressor

259
00:10:04,160 --> 00:10:06,240
overall it means that we need fewer

260
00:10:06,240 --> 00:10:09,760
activations to save the victim

261
00:10:09,760 --> 00:10:12,399
so let's go on with another challenge of

262
00:10:12,399 --> 00:10:14,560
the real world which is limited power

263
00:10:14,560 --> 00:10:16,399
well we will not get too much into

264
00:10:16,399 --> 00:10:19,200
details but the concept is that trr can

265
00:10:19,200 --> 00:10:22,959
be performed every trr period refreshes

266
00:10:22,959 --> 00:10:26,480
meaning that maybe it can be

267
00:10:26,480 --> 00:10:28,480
trr can be

268
00:10:28,480 --> 00:10:31,360
done every two or three refreshes or

269
00:10:31,360 --> 00:10:33,680
every 10 and so on

270
00:10:33,680 --> 00:10:34,480
so

271
00:10:34,480 --> 00:10:36,000
how can we protect against fainting

272
00:10:36,000 --> 00:10:38,560
goals well concept is literally the same

273
00:10:38,560 --> 00:10:40,720
however this time through fainting us we

274
00:10:40,720 --> 00:10:43,120
can understand the setup of protearar in

275
00:10:43,120 --> 00:10:45,680
terms of trr event period and in terms

276
00:10:45,680 --> 00:10:48,240
of counters needed and this is one way

277
00:10:48,240 --> 00:10:50,720
of seeing it the other way of seeing it

278
00:10:50,720 --> 00:10:54,160
is given the device resources such as

279
00:10:54,160 --> 00:10:56,880
power constraints or area constraints we

280
00:10:56,880 --> 00:10:58,640
can understand

281
00:10:58,640 --> 00:10:59,440
what

282
00:10:59,440 --> 00:11:02,320
the device can be protected against

283
00:11:02,320 --> 00:11:03,760
and

284
00:11:03,760 --> 00:11:05,920
how does protear solve the challenges of

285
00:11:05,920 --> 00:11:08,720
the real world just as a recap well for

286
00:11:08,720 --> 00:11:11,440
the storage we showed improved optimal

287
00:11:11,440 --> 00:11:13,200
number of counters to protect against

288
00:11:13,200 --> 00:11:15,040
fainting and protect against painting

289
00:11:15,040 --> 00:11:16,079
ghosts

290
00:11:16,079 --> 00:11:18,399
for power we showed the optimal number

291
00:11:18,399 --> 00:11:21,440
of trr events and we also showed and

292
00:11:21,440 --> 00:11:24,720
described how variating this affects the

293
00:11:24,720 --> 00:11:27,680
threshold of the device

294
00:11:27,680 --> 00:11:29,839
this way the optical requirements for a

295
00:11:29,839 --> 00:11:33,040
given threshold of a given device

296
00:11:33,040 --> 00:11:34,800
so for the evaluation

297
00:11:34,800 --> 00:11:37,600
for the performance overhead we used jam

298
00:11:37,600 --> 00:11:40,560
5 full system simulation benchmarking

299
00:11:40,560 --> 00:11:42,560
spec 2017

300
00:11:42,560 --> 00:11:45,440
gen 5 is a cycle accurate simulator

301
00:11:45,440 --> 00:11:47,519
while for the area and the latency

302
00:11:47,519 --> 00:11:50,880
evaluation we implemented an asic device

303
00:11:50,880 --> 00:11:53,120
in 12 nanometers

304
00:11:53,120 --> 00:11:55,440
so let's look at

305
00:11:55,440 --> 00:11:57,839
flexibility of protearar so as you can

306
00:11:57,839 --> 00:11:59,600
see depending on the number of counters

307
00:11:59,600 --> 00:12:02,160
there is a very broad range of supported

308
00:12:02,160 --> 00:12:04,560
roamer threshold but this is not all we

309
00:12:04,560 --> 00:12:07,120
can also variate as i introduced before

310
00:12:07,120 --> 00:12:08,800
the tr period and i will show you

311
00:12:08,800 --> 00:12:11,920
between 1 and 15. and as you can see we

312
00:12:11,920 --> 00:12:15,200
get a broad range of possibilities and

313
00:12:15,200 --> 00:12:17,760
to give you a better understanding

314
00:12:17,760 --> 00:12:20,639
we can look it with overlapped real

315
00:12:20,639 --> 00:12:23,200
threshold from real devices

316
00:12:23,200 --> 00:12:25,440
in other words given for example a

317
00:12:25,440 --> 00:12:27,680
certain amount of counters

318
00:12:27,680 --> 00:12:30,720
that the manufacturers wants to use for

319
00:12:30,720 --> 00:12:33,360
trr depending on the technology that is

320
00:12:33,360 --> 00:12:35,920
using and the power it can decide to set

321
00:12:35,920 --> 00:12:38,639
up proterra accordingly

322
00:12:38,639 --> 00:12:41,760
now of course this crr induced

323
00:12:41,760 --> 00:12:43,920
energy overhead and we evaluated it this

324
00:12:43,920 --> 00:12:46,079
depends on the tr period clearly and i

325
00:12:46,079 --> 00:12:48,720
will show you from 1 to 15. and this is

326
00:12:48,720 --> 00:12:51,920
for a trap window of 64 milliseconds

327
00:12:51,920 --> 00:12:54,000
which is the default value of the ddr4

328
00:12:54,000 --> 00:12:56,480
but we also repeated it for a tier

329
00:12:56,480 --> 00:12:58,800
window of 32 milliseconds and this is

330
00:12:58,800 --> 00:13:00,959
because if proterrar is deployed with a

331
00:13:00,959 --> 00:13:04,320
tf window of 32 milliseconds it just it

332
00:13:04,320 --> 00:13:06,480
can achieve a higher degree of security

333
00:13:06,480 --> 00:13:09,120
but overall the trr energy overhead is

334
00:13:09,120 --> 00:13:12,240
always under 0.6 percent

335
00:13:12,240 --> 00:13:14,480
so to conclude we showed fainting as the

336
00:13:14,480 --> 00:13:16,800
first framework for security analysis of

337
00:13:16,800 --> 00:13:19,120
indira mitigations we showed the first

338
00:13:19,120 --> 00:13:22,079
formally proven indira mitigation

339
00:13:22,079 --> 00:13:24,240
and we showed optimality for counters

340
00:13:24,240 --> 00:13:26,959
and performance overhead but is this

341
00:13:26,959 --> 00:13:27,920
actually

342
00:13:27,920 --> 00:13:29,360
everything

343
00:13:29,360 --> 00:13:33,040
so actually we did all of this for tdr52

344
00:13:33,040 --> 00:13:35,600
and due to the limited amount of time we

345
00:13:35,600 --> 00:13:38,160
cannot get into details but i can just

346
00:13:38,160 --> 00:13:40,160
tell you that ddr5 adds a new command

347
00:13:40,160 --> 00:13:42,560
called rfm which

348
00:13:42,560 --> 00:13:44,639
gives the device more time to perform

349
00:13:44,639 --> 00:13:47,360
these extra refreshes operations so of

350
00:13:47,360 --> 00:13:49,920
course we benchmarked spec 2017

351
00:13:49,920 --> 00:13:51,600
analyzing the

352
00:13:51,600 --> 00:13:54,639
amount of extra airfang commands that

353
00:13:54,639 --> 00:13:56,240
are being sent

354
00:13:56,240 --> 00:13:58,959
and clearly we also evaluated the energy

355
00:13:58,959 --> 00:14:02,240
overhead that depends on the rfm period

356
00:14:02,240 --> 00:14:04,800
for more details about the

357
00:14:04,800 --> 00:14:06,959
evaluation such as performance you can

358
00:14:06,959 --> 00:14:08,720
read the paper

359
00:14:08,720 --> 00:14:11,600
so to actually conclude we also showed

360
00:14:11,600 --> 00:14:13,120
and proved the first mitigation

361
00:14:13,120 --> 00:14:17,279
compatible with ddr5 standards so thank

362
00:14:17,279 --> 00:14:19,360
you very much i'm very happy to take any

363
00:14:19,360 --> 00:14:21,839
question

364
00:14:26,399 --> 00:14:28,839
thank you michele does anybody have any

365
00:14:28,839 --> 00:14:32,160
questions go ahead

366
00:14:32,240 --> 00:14:34,880
hello uh glad to see a mitigation in

367
00:14:34,880 --> 00:14:37,279
this session so um i think one of the

368
00:14:37,279 --> 00:14:39,839
issues with mr agrees at least

369
00:14:39,839 --> 00:14:42,560
in sram was that it requires a cam or

370
00:14:42,560 --> 00:14:44,720
like a fully associative search so how

371
00:14:44,720 --> 00:14:46,490
does that scale when you need to

372
00:14:46,490 --> 00:14:47,760
[Music]

373
00:14:47,760 --> 00:14:49,199
search for

374
00:14:49,199 --> 00:14:51,760
search 1000 counters in dram thank you

375
00:14:51,760 --> 00:14:53,440
very much very good question so indeed

376
00:14:53,440 --> 00:14:55,279
we did not use miseries we use a

377
00:14:55,279 --> 00:14:57,680
proactive miseries but however the way

378
00:14:57,680 --> 00:14:59,360
we save

379
00:14:59,360 --> 00:15:01,519
the data is to normal register so we do

380
00:15:01,519 --> 00:15:04,800
not use cam in our basic design exactly

381
00:15:04,800 --> 00:15:06,480
because of this reason

382
00:15:06,480 --> 00:15:10,000
oh okay so so do you like uh search uh

383
00:15:10,000 --> 00:15:11,680
like one by one through the

384
00:15:11,680 --> 00:15:14,600
it's not one by one is an uncommon

385
00:15:14,600 --> 00:15:18,000
non-combinatory cascade okay so it's

386
00:15:18,000 --> 00:15:20,480
just done in one cycle

387
00:15:20,480 --> 00:15:22,720
and depending on the amount of

388
00:15:22,720 --> 00:15:25,040
highest raw that you need then of course

389
00:15:25,040 --> 00:15:27,279
you will need maybe three cycles or four

390
00:15:27,279 --> 00:15:28,480
cycles

391
00:15:28,480 --> 00:15:30,560
okay make sense thank you great talk

392
00:15:30,560 --> 00:15:32,800
thanks

393
00:15:37,440 --> 00:15:39,440
hi um thanks for the great talk um i

394
00:15:39,440 --> 00:15:42,160
mean kane from university of michigan

395
00:15:42,160 --> 00:15:43,040
uh

396
00:15:43,040 --> 00:15:45,759
like for the last debate meant first

397
00:15:45,759 --> 00:15:47,759
mitigation comparable with video 5

398
00:15:47,759 --> 00:15:50,759
standard i think there was a paper in

399
00:15:50,759 --> 00:15:52,839
hpca this year

400
00:15:52,839 --> 00:15:56,079
about called material but that interacts

401
00:15:56,079 --> 00:15:57,839
with rfn

402
00:15:57,839 --> 00:15:58,800
so

403
00:15:58,800 --> 00:16:03,519
for what i remember about mithril it got

404
00:16:03,519 --> 00:16:04,650
uploaded on

405
00:16:04,650 --> 00:16:06,240
[Music]

406
00:16:06,240 --> 00:16:08,240
online but before it got actually

407
00:16:08,240 --> 00:16:10,560
accepted by any publication so at the

408
00:16:10,560 --> 00:16:12,639
moment when we submitted this and it was

409
00:16:12,639 --> 00:16:14,160
accepted

410
00:16:14,160 --> 00:16:16,560
it was the first ddr5 compatible at

411
00:16:16,560 --> 00:16:18,160
least with arafam

412
00:16:18,160 --> 00:16:20,160
so it's through the mitral got uploaded

413
00:16:20,160 --> 00:16:22,320
online but not through a peer-reviewed

414
00:16:22,320 --> 00:16:23,360
process

415
00:16:23,360 --> 00:16:24,320
okay

416
00:16:24,320 --> 00:16:27,519
thank you you're right welcome

417
00:16:28,240 --> 00:16:30,480
i have a question too so i'm curious in

418
00:16:30,480 --> 00:16:32,880
your evaluation did you ever see

419
00:16:32,880 --> 00:16:35,600
pro trr activate when it didn't need to

420
00:16:35,600 --> 00:16:37,759
so for example there was no hammer

421
00:16:37,759 --> 00:16:40,240
attack going on but pro tier are still

422
00:16:40,240 --> 00:16:42,240
activated just because of some benign

423
00:16:42,240 --> 00:16:43,519
applications

424
00:16:43,519 --> 00:16:45,519
thank you very much for your question so

425
00:16:45,519 --> 00:16:48,240
our evaluation did not assume

426
00:16:48,240 --> 00:16:50,079
an attack going on and this is exact

427
00:16:50,079 --> 00:16:52,320
exactly because we want to understand

428
00:16:52,320 --> 00:16:54,560
the overhead of normal application

429
00:16:54,560 --> 00:16:57,440
rather than a system under attack

430
00:16:57,440 --> 00:17:00,880
so the overhead

431
00:17:00,959 --> 00:17:03,440
comes from a normal workload but in

432
00:17:03,440 --> 00:17:04,480
terms of

433
00:17:04,480 --> 00:17:06,000
ipc

434
00:17:06,000 --> 00:17:08,559
uh it's negligible

435
00:17:08,559 --> 00:17:10,240
and i'm curious what was the workload

436
00:17:10,240 --> 00:17:12,799
that triggered pro trr in the benign

437
00:17:12,799 --> 00:17:15,760
workload oh well the spec 2017

438
00:17:15,760 --> 00:17:19,520
benchmarks so the way um

439
00:17:19,520 --> 00:17:21,039
there so we need to distinguish right

440
00:17:21,039 --> 00:17:23,359
there is ddr4 and ddr5

441
00:17:23,359 --> 00:17:26,240
in ddr4 and the refresh mechanism needs

442
00:17:26,240 --> 00:17:28,640
to happen every single refresh

443
00:17:28,640 --> 00:17:30,480
and it's concurrent to the normal

444
00:17:30,480 --> 00:17:32,480
operation so it's not a performance

445
00:17:32,480 --> 00:17:35,039
overhead while with ddr5 depending on

446
00:17:35,039 --> 00:17:36,720
the number of activations that are being

447
00:17:36,720 --> 00:17:38,720
sent there is this new command called

448
00:17:38,720 --> 00:17:41,360
rfm that needs to be sent if rfm is

449
00:17:41,360 --> 00:17:42,880
active right

450
00:17:42,880 --> 00:17:44,400
so the

451
00:17:44,400 --> 00:17:46,240
frequency by which is sent can be

452
00:17:46,240 --> 00:17:48,799
tunable the lowest is 32 activations for

453
00:17:48,799 --> 00:17:51,120
example but 32 activation is actually

454
00:17:51,120 --> 00:17:52,720
quite low number

455
00:17:52,720 --> 00:17:56,080
so a normal

456
00:17:56,400 --> 00:17:57,919
normal application coming from the

457
00:17:57,919 --> 00:17:59,280
benchmark

458
00:17:59,280 --> 00:18:01,840
simply triggers the scent of of this

459
00:18:01,840 --> 00:18:03,120
accessor command

460
00:18:03,120 --> 00:18:05,840
however our evaluation also showed that

461
00:18:05,840 --> 00:18:08,000
the current values that the

462
00:18:08,000 --> 00:18:10,720
jdx standard supports which is from 32

463
00:18:10,720 --> 00:18:13,600
to 80 as rfm period

464
00:18:13,600 --> 00:18:14,960
they're

465
00:18:14,960 --> 00:18:18,000
an overkill let's say that we could do

466
00:18:18,000 --> 00:18:20,400
a good protection which meant which with

467
00:18:20,400 --> 00:18:23,200
much less however just to conclude the

468
00:18:23,200 --> 00:18:24,320
reply

469
00:18:24,320 --> 00:18:26,160
this performance

470
00:18:26,160 --> 00:18:28,960
does not come from protearary

471
00:18:28,960 --> 00:18:30,559
the overhead sorry it comes from the

472
00:18:30,559 --> 00:18:32,960
jadex standard

473
00:18:32,960 --> 00:18:35,440
got it thank you thank you

474
00:18:35,440 --> 00:18:37,120
okay let's thank again all the

475
00:18:37,120 --> 00:18:38,880
presenters of this session this is the

476
00:18:38,880 --> 00:18:42,600
end of section 4

