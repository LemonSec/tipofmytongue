1
00:00:01,839 --> 00:00:04,160
welcome everyone i'm arvind a postdoc

2
00:00:04,160 --> 00:00:06,240
from carnegie mellon university and i'll

3
00:00:06,240 --> 00:00:08,160
be presenting my work on universal

4
00:00:08,160 --> 00:00:10,480
atomic swaps secure exchange of coins

5
00:00:10,480 --> 00:00:12,160
across all blockchains

6
00:00:12,160 --> 00:00:13,920
this was a joint work with giulio from

7
00:00:13,920 --> 00:00:16,560
mpi and pedro from india

8
00:00:16,560 --> 00:00:19,119
as we all are familiar cryptocurrencies

9
00:00:19,119 --> 00:00:20,560
with their trustless payments have

10
00:00:20,560 --> 00:00:21,920
revolutionized the payment

11
00:00:21,920 --> 00:00:24,320
infrastructure of our society

12
00:00:24,320 --> 00:00:26,400
it is amply clear that this technology

13
00:00:26,400 --> 00:00:28,400
is here to stay and is only going to

14
00:00:28,400 --> 00:00:31,519
evolve and be adopted in the future

15
00:00:31,519 --> 00:00:33,440
in this scenario we wish to study the

16
00:00:33,440 --> 00:00:34,960
exchange of tokens across these

17
00:00:34,960 --> 00:00:36,559
cryptocurrencies which is one of the

18
00:00:36,559 --> 00:00:39,680
most basic economic activity of value

19
00:00:39,680 --> 00:00:41,920
we have two users alice and bob wanting

20
00:00:41,920 --> 00:00:43,920
to exchange their tokens from different

21
00:00:43,920 --> 00:00:46,160
cryptocurrencies bitcoin and ethereum in

22
00:00:46,160 --> 00:00:47,680
this example

23
00:00:47,680 --> 00:00:49,680
we want the property of atomicity in

24
00:00:49,680 --> 00:00:51,680
this exchange that guarantees that

25
00:00:51,680 --> 00:00:52,559
either

26
00:00:52,559 --> 00:00:54,719
both users swap their coins or none of

27
00:00:54,719 --> 00:00:56,160
them do

28
00:00:56,160 --> 00:00:58,000
achieving this property is non-trivial

29
00:00:58,000 --> 00:00:59,199
in this setting

30
00:00:59,199 --> 00:01:01,359
as there is no trusted exchange service

31
00:01:01,359 --> 00:01:03,280
like in a fiat currency system to

32
00:01:03,280 --> 00:01:06,400
guarantee fairness in the exchange

33
00:01:06,400 --> 00:01:09,040
a simple attempt would be the following

34
00:01:09,040 --> 00:01:11,760
alice transfers her ether to bob in the

35
00:01:11,760 --> 00:01:14,400
ethereum blockchain and bob transfers

36
00:01:14,400 --> 00:01:16,080
his bitcoin in the bitcoin blockchain

37
00:01:16,080 --> 00:01:17,520
separately

38
00:01:17,520 --> 00:01:19,840
neither parties can be trusted here

39
00:01:19,840 --> 00:01:22,320
therefore a malicious bob may abscond

40
00:01:22,320 --> 00:01:24,159
away with the coin from alice and not

41
00:01:24,159 --> 00:01:26,799
pay her in bitcoin

42
00:01:26,799 --> 00:01:28,560
in other words the solution does not

43
00:01:28,560 --> 00:01:30,880
guarantee atomicity

44
00:01:30,880 --> 00:01:32,880
trying to mimic the real world how about

45
00:01:32,880 --> 00:01:34,640
having an exchange service do the swap

46
00:01:34,640 --> 00:01:35,840
for us

47
00:01:35,840 --> 00:01:38,000
here the users can transfer the coins to

48
00:01:38,000 --> 00:01:39,920
the service and the service transfers

49
00:01:39,920 --> 00:01:42,880
back the swapped tokens to the users

50
00:01:42,880 --> 00:01:44,960
the issue here is that the service has

51
00:01:44,960 --> 00:01:47,119
to remain available and we need quite

52
00:01:47,119 --> 00:01:49,280
complex protocols to ensure the service

53
00:01:49,280 --> 00:01:51,520
does not steal the coins or to guarantee

54
00:01:51,520 --> 00:01:54,159
privacy for users coins

55
00:01:54,159 --> 00:01:56,560
another approach for an atomic swap is

56
00:01:56,560 --> 00:01:58,799
making use of a third blockchain that

57
00:01:58,799 --> 00:02:01,040
supports smart contracts

58
00:02:01,040 --> 00:02:03,280
the logic of the smart contract ensures

59
00:02:03,280 --> 00:02:05,600
the atomicity of the swap

60
00:02:05,600 --> 00:02:07,600
but this solution relies on the

61
00:02:07,600 --> 00:02:09,840
guarantees and mechanics of this third

62
00:02:09,840 --> 00:02:12,000
blockchain and requires complex smart

63
00:02:12,000 --> 00:02:13,520
contracts that again

64
00:02:13,520 --> 00:02:16,239
could be expensive to execute

65
00:02:16,239 --> 00:02:18,319
another solution for swaps is via the

66
00:02:18,319 --> 00:02:19,840
payment channels

67
00:02:19,840 --> 00:02:21,840
briefly a payment channel is a shared

68
00:02:21,840 --> 00:02:24,080
address between alice and bob

69
00:02:24,080 --> 00:02:26,640
the address has some initial coins and

70
00:02:26,640 --> 00:02:28,720
in the case shown here alice can make

71
00:02:28,720 --> 00:02:31,440
several payments to bob from the channel

72
00:02:31,440 --> 00:02:33,519
these payments remain off-chain and only

73
00:02:33,519 --> 00:02:35,200
the final payment is posted on the

74
00:02:35,200 --> 00:02:36,400
blockchain

75
00:02:36,400 --> 00:02:39,040
if no payment is posted by bob alice can

76
00:02:39,040 --> 00:02:41,680
refund all her coins after the channel

77
00:02:41,680 --> 00:02:43,120
expires

78
00:02:43,120 --> 00:02:45,680
notice that before the channel expires

79
00:02:45,680 --> 00:02:47,680
all payments have to be authorized by

80
00:02:47,680 --> 00:02:49,920
both users and unilateral spending of

81
00:02:49,920 --> 00:02:52,160
the clients in the channel is simply not

82
00:02:52,160 --> 00:02:53,840
possible

83
00:02:53,840 --> 00:02:56,319
the coin swap solution relies on alice

84
00:02:56,319 --> 00:02:58,239
and bob having two channels in the two

85
00:02:58,239 --> 00:03:00,560
respective blockchains

86
00:03:00,560 --> 00:03:02,319
they set up payment transactions in the

87
00:03:02,319 --> 00:03:04,400
form of a special script known as

88
00:03:04,400 --> 00:03:07,840
hashtag log contract or htlc for short

89
00:03:07,840 --> 00:03:11,280
a hdlc transaction pays a user if he or

90
00:03:11,280 --> 00:03:13,760
she reveals a pre-image of a hash value

91
00:03:13,760 --> 00:03:16,319
before some time t

92
00:03:16,319 --> 00:03:19,280
in our case the htlc in ethereum pays to

93
00:03:19,280 --> 00:03:22,000
bob and the htlc in bitcoin based to

94
00:03:22,000 --> 00:03:25,760
alice and consider that both htlc's

95
00:03:25,760 --> 00:03:28,159
mention the same hash value

96
00:03:28,159 --> 00:03:30,480
in this case alice has the hash pre-made

97
00:03:30,480 --> 00:03:31,680
initially

98
00:03:31,680 --> 00:03:33,440
she uses this value

99
00:03:33,440 --> 00:03:35,440
and gets the payment in bitcoin by

100
00:03:35,440 --> 00:03:37,360
publishing the transaction and the

101
00:03:37,360 --> 00:03:38,720
pre-image

102
00:03:38,720 --> 00:03:41,840
since it's the same pre-image bob learns

103
00:03:41,840 --> 00:03:44,400
from the blockchain and the payment goes

104
00:03:44,400 --> 00:03:46,879
through in ethereum by publishing the

105
00:03:46,879 --> 00:03:49,440
transaction and the pre-image

106
00:03:49,440 --> 00:03:51,360
notice that if the pre-images are not

107
00:03:51,360 --> 00:03:53,920
published before the htlc timeouts the

108
00:03:53,920 --> 00:03:57,760
tokens are refunded to the original user

109
00:03:57,760 --> 00:03:59,680
but the solution requires the special

110
00:03:59,680 --> 00:04:01,360
hdlc script

111
00:04:01,360 --> 00:04:02,959
this restricts the solution's

112
00:04:02,959 --> 00:04:05,200
interoperability as some currencies may

113
00:04:05,200 --> 00:04:08,000
not offer support for the hdlc script

114
00:04:08,000 --> 00:04:09,760
also using the script

115
00:04:09,760 --> 00:04:12,080
results in high on-chain costs in the

116
00:04:12,080 --> 00:04:14,400
form of transaction fees and affects the

117
00:04:14,400 --> 00:04:16,798
fungibility of the tokens involved

118
00:04:16,798 --> 00:04:18,639
recall that tokens in a currency are

119
00:04:18,639 --> 00:04:20,880
said to have high fundability if all

120
00:04:20,880 --> 00:04:22,880
unit tokens in the currency are of the

121
00:04:22,880 --> 00:04:25,360
same value

122
00:04:25,360 --> 00:04:27,840
what we want in a coin swap solution is

123
00:04:27,840 --> 00:04:29,600
that it preserves fungibility of the

124
00:04:29,600 --> 00:04:32,000
tokens is compatible with a wider class

125
00:04:32,000 --> 00:04:35,840
of currencies and has low on chain costs

126
00:04:35,840 --> 00:04:38,000
the universality we want is that the

127
00:04:38,000 --> 00:04:40,479
users may want to swap multiple assets

128
00:04:40,479 --> 00:04:42,720
at the same time and our swap solution

129
00:04:42,720 --> 00:04:44,400
should be able to handle these general

130
00:04:44,400 --> 00:04:46,720
cases as well

131
00:04:46,720 --> 00:04:49,840
in this work our contribution is twofold

132
00:04:49,840 --> 00:04:52,639
we give a multi-asset coin swap solution

133
00:04:52,639 --> 00:04:54,320
that only requires the signature

134
00:04:54,320 --> 00:04:55,840
verification script

135
00:04:55,840 --> 00:04:58,080
meaning it uses the most commonly used

136
00:04:58,080 --> 00:05:01,280
script and requires no special scripts

137
00:05:01,280 --> 00:05:03,680
as a consequence we can swap tokens

138
00:05:03,680 --> 00:05:06,000
across all currencies as long as they

139
00:05:06,000 --> 00:05:08,240
support a cryptographic authentication

140
00:05:08,240 --> 00:05:10,080
mechanism in the form of a digital

141
00:05:10,080 --> 00:05:11,440
signature

142
00:05:11,440 --> 00:05:13,759
we also give a multi-asset coin swap

143
00:05:13,759 --> 00:05:15,840
solution that is highly efficient

144
00:05:15,840 --> 00:05:18,479
requiring either snar or ecdsa signature

145
00:05:18,479 --> 00:05:20,160
verification script

146
00:05:20,160 --> 00:05:22,080
note that many major currencies today

147
00:05:22,080 --> 00:05:24,560
support these signature schemes

148
00:05:24,560 --> 00:05:26,400
in this talk i will only focus on the

149
00:05:26,400 --> 00:05:28,720
schneider ecdsa construction for more

150
00:05:28,720 --> 00:05:30,560
details and the general construction i

151
00:05:30,560 --> 00:05:33,280
refer you to our paper

152
00:05:33,280 --> 00:05:35,440
firstly we should decide on the notion

153
00:05:35,440 --> 00:05:37,360
of atomicity in the multi-asset swap

154
00:05:37,360 --> 00:05:38,479
case

155
00:05:38,479 --> 00:05:40,720
as a first attempt let's call this swap

156
00:05:40,720 --> 00:05:43,280
atomic if alice gets all the coins of

157
00:05:43,280 --> 00:05:46,560
bob then bob gets all the kinds of alice

158
00:05:46,560 --> 00:05:48,720
the users as before establish payment

159
00:05:48,720 --> 00:05:50,400
channels in their respective currencies

160
00:05:50,400 --> 00:05:52,880
and set up the payment transactions

161
00:05:52,880 --> 00:05:55,199
this time the payment transactions are

162
00:05:55,199 --> 00:05:57,520
regular transactions unlike the htlc

163
00:05:57,520 --> 00:06:00,240
transactions that we saw before

164
00:06:00,240 --> 00:06:02,160
these regular transactions transfer

165
00:06:02,160 --> 00:06:04,800
coins between addresses needing only a

166
00:06:04,800 --> 00:06:08,240
signature for authorization

167
00:06:08,240 --> 00:06:10,160
we expect alice to get

168
00:06:10,160 --> 00:06:11,840
alice to get paid first on the right

169
00:06:11,840 --> 00:06:14,319
side and by definition bob should get

170
00:06:14,319 --> 00:06:16,639
all the coins on the left side

171
00:06:16,639 --> 00:06:18,240
however we have a problem with this

172
00:06:18,240 --> 00:06:19,360
definition

173
00:06:19,360 --> 00:06:22,000
like before alice and bob set up the

174
00:06:22,000 --> 00:06:23,280
payments

175
00:06:23,280 --> 00:06:25,840
this time alice only redeems two of the

176
00:06:25,840 --> 00:06:27,039
three coins

177
00:06:27,039 --> 00:06:29,680
and by definition bob cannot get any

178
00:06:29,680 --> 00:06:31,280
coins on the left

179
00:06:31,280 --> 00:06:33,919
in fact alice can refund her coins on

180
00:06:33,919 --> 00:06:36,639
the left after the timeout

181
00:06:36,639 --> 00:06:39,520
effectively alice steals the coins of

182
00:06:39,520 --> 00:06:41,919
bob and the right notion of atomicity

183
00:06:41,919 --> 00:06:43,919
would should have prevented this case

184
00:06:43,919 --> 00:06:45,360
for us

185
00:06:45,360 --> 00:06:47,360
therefore the notion we set for

186
00:06:47,360 --> 00:06:49,520
atomicity in the multi-asset swap case

187
00:06:49,520 --> 00:06:52,560
is that if alice gets one coin bob gets

188
00:06:52,560 --> 00:06:54,000
all the coins

189
00:06:54,000 --> 00:06:55,599
to see how this works

190
00:06:55,599 --> 00:06:57,599
we have the setup as before

191
00:06:57,599 --> 00:07:00,000
and if alice gets the first coin bob

192
00:07:00,000 --> 00:07:03,120
gets all the coins on the left

193
00:07:03,120 --> 00:07:05,120
this is of course true for any kind that

194
00:07:05,120 --> 00:07:07,280
alice can get on the right

195
00:07:07,280 --> 00:07:10,319
alice gets the second coin bob gets all

196
00:07:10,319 --> 00:07:13,840
and alice gets a third one bob gets all

197
00:07:13,840 --> 00:07:16,160
ideally if alice is rational she wants

198
00:07:16,160 --> 00:07:17,919
to get all the coins on the right and

199
00:07:17,919 --> 00:07:20,000
bob anyway would get all the coins on

200
00:07:20,000 --> 00:07:22,080
the left

201
00:07:22,080 --> 00:07:24,240
in terms of construction we make use of

202
00:07:24,240 --> 00:07:26,720
adapter signatures a cryptographic tool

203
00:07:26,720 --> 00:07:28,800
using which we achieve the atomicity

204
00:07:28,800 --> 00:07:31,360
notion that we described before using

205
00:07:31,360 --> 00:07:33,360
only signature verification scripts on

206
00:07:33,360 --> 00:07:35,599
the payment transactions

207
00:07:35,599 --> 00:07:37,280
adapter signatures are defined with

208
00:07:37,280 --> 00:07:39,680
respect to a signature scheme and an np

209
00:07:39,680 --> 00:07:42,319
relation where we can efficiently sample

210
00:07:42,319 --> 00:07:43,840
a statement and a witness pair in the

211
00:07:43,840 --> 00:07:45,520
relation

212
00:07:45,520 --> 00:07:47,840
we have a pre-sign algorithm that

213
00:07:47,840 --> 00:07:49,919
outputs a pre-signature on a message

214
00:07:49,919 --> 00:07:51,840
with respect to the secret key and the

215
00:07:51,840 --> 00:07:53,120
statement

216
00:07:53,120 --> 00:07:54,800
it is important to note that the

217
00:07:54,800 --> 00:07:57,199
pre-signature is not a valid signature

218
00:07:57,199 --> 00:07:59,039
by itself

219
00:07:59,039 --> 00:08:01,360
the pre-verification algorithm lets us

220
00:08:01,360 --> 00:08:04,960
verify the validity of a pre-signature

221
00:08:04,960 --> 00:08:07,280
we have an extraction algorithm that

222
00:08:07,280 --> 00:08:10,080
extracts the witness of the np statement

223
00:08:10,080 --> 00:08:12,000
given the pre-signature and the

224
00:08:12,000 --> 00:08:13,599
signature

225
00:08:13,599 --> 00:08:15,840
finally we have an adapter algorithm

226
00:08:15,840 --> 00:08:17,680
that given a pre-signature and the

227
00:08:17,680 --> 00:08:21,120
witness returns the valid signature

228
00:08:21,120 --> 00:08:23,440
in terms of security we want

229
00:08:23,440 --> 00:08:25,680
unforgeability as usual

230
00:08:25,680 --> 00:08:27,520
but this time the adversary should not

231
00:08:27,520 --> 00:08:29,919
be able to forge even given three

232
00:08:29,919 --> 00:08:32,240
signatures on messages

233
00:08:32,240 --> 00:08:34,159
we additionally want adaptability that

234
00:08:34,159 --> 00:08:36,640
says given a valid pre-signature and a

235
00:08:36,640 --> 00:08:39,039
valid witness we can obtain a valid

236
00:08:39,039 --> 00:08:41,599
signature with overwhelming probability

237
00:08:41,599 --> 00:08:44,000
and finally we want extractability that

238
00:08:44,000 --> 00:08:46,320
says we can extract a valid witness

239
00:08:46,320 --> 00:08:48,560
given a valid pre-signature and a

240
00:08:48,560 --> 00:08:50,480
signature

241
00:08:50,480 --> 00:08:52,399
in terms of concrete constructions we

242
00:08:52,399 --> 00:08:54,399
know of efficient candidates based on

243
00:08:54,399 --> 00:08:57,120
the schnar ecdsa and other like

244
00:08:57,120 --> 00:08:58,880
signature schemes in the lattice and

245
00:08:58,880 --> 00:09:01,360
isogeny settings

246
00:09:01,360 --> 00:09:03,760
let us now see how our swap protocol

247
00:09:03,760 --> 00:09:04,720
works

248
00:09:04,720 --> 00:09:06,720
using these adapter signatures

249
00:09:06,720 --> 00:09:09,279
we have four phases and during the setup

250
00:09:09,279 --> 00:09:11,760
phase parties establish channels with

251
00:09:11,760 --> 00:09:14,160
the appropriate expiry times

252
00:09:14,160 --> 00:09:17,040
here the channels are public keys whose

253
00:09:17,040 --> 00:09:19,200
secret keys are shared among alice and

254
00:09:19,200 --> 00:09:20,320
bob

255
00:09:20,320 --> 00:09:22,720
the channels on the left expire a short

256
00:09:22,720 --> 00:09:24,720
while after the channels on the right

257
00:09:24,720 --> 00:09:26,080
expire

258
00:09:26,080 --> 00:09:29,040
this delay is to give bob enough time to

259
00:09:29,040 --> 00:09:30,880
complete the swap as we will see in the

260
00:09:30,880 --> 00:09:33,200
coming slides

261
00:09:33,200 --> 00:09:35,760
the next phase is the lock phase where

262
00:09:35,760 --> 00:09:38,399
the payment transactions are set up

263
00:09:38,399 --> 00:09:40,320
for the transactions on the left paying

264
00:09:40,320 --> 00:09:41,120
bob

265
00:09:41,120 --> 00:09:42,880
parties jointly generate three

266
00:09:42,880 --> 00:09:45,519
signatures on these transactions

267
00:09:45,519 --> 00:09:47,680
to do this alice picks the statement

268
00:09:47,680 --> 00:09:50,880
witness pair of the np relation they run

269
00:09:50,880 --> 00:09:53,600
an efficient two-party protocol and bob

270
00:09:53,600 --> 00:09:55,839
obtains the pre-signatures

271
00:09:55,839 --> 00:09:57,600
all of these pre-signatures are with

272
00:09:57,600 --> 00:09:59,279
respect to the same statement that alice

273
00:09:59,279 --> 00:10:01,040
had picked before

274
00:10:01,040 --> 00:10:02,800
this is followed by the transactions on

275
00:10:02,800 --> 00:10:04,959
the right paying alice

276
00:10:04,959 --> 00:10:06,880
they run the same two-party computation

277
00:10:06,880 --> 00:10:08,959
protocol to generate the pre-signatures

278
00:10:08,959 --> 00:10:11,360
on these transactions such that alice

279
00:10:11,360 --> 00:10:13,279
and bob get the pre-signatures with

280
00:10:13,279 --> 00:10:15,040
respect to the same instance that was

281
00:10:15,040 --> 00:10:16,839
used on the left

282
00:10:16,839 --> 00:10:20,640
side in the swap complete phase alice

283
00:10:20,640 --> 00:10:21,839
uses the

284
00:10:21,839 --> 00:10:23,920
adapter witness that she knows to adapt

285
00:10:23,920 --> 00:10:25,760
all the pre-signatures on the right side

286
00:10:25,760 --> 00:10:28,160
to get valid signatures

287
00:10:28,160 --> 00:10:30,640
alice then publishes the signatures on

288
00:10:30,640 --> 00:10:32,480
these transactions on the respective

289
00:10:32,480 --> 00:10:35,680
blockchains and gets paid

290
00:10:35,920 --> 00:10:38,480
bob can pick any transaction signature

291
00:10:38,480 --> 00:10:40,560
that alice published on any of the

292
00:10:40,560 --> 00:10:42,480
blockchains on the right

293
00:10:42,480 --> 00:10:44,240
recall that bob has the corresponding

294
00:10:44,240 --> 00:10:46,079
pre-signature generated during the lock

295
00:10:46,079 --> 00:10:48,800
phase therefore he can extract the

296
00:10:48,800 --> 00:10:51,040
adapter witness using the extraction

297
00:10:51,040 --> 00:10:52,800
algorithm

298
00:10:52,800 --> 00:10:54,880
now bob adapts the pre-signatures on the

299
00:10:54,880 --> 00:10:57,440
left side to valid signatures as they

300
00:10:57,440 --> 00:10:59,279
were also generated with respect to the

301
00:10:59,279 --> 00:11:02,240
same statement fitness pair

302
00:11:02,240 --> 00:11:04,240
bob publishes the transactions and the

303
00:11:04,240 --> 00:11:06,160
signatures on the respective blockchains

304
00:11:06,160 --> 00:11:10,320
and gets paid on the left as expected

305
00:11:10,320 --> 00:11:12,800
we finally have the timeout phase where

306
00:11:12,800 --> 00:11:15,279
if alice fails to get paid on the right

307
00:11:15,279 --> 00:11:17,760
or bob fails to get paid on the left the

308
00:11:17,760 --> 00:11:20,240
parties can refund their coins after the

309
00:11:20,240 --> 00:11:22,399
expiry of the channels

310
00:11:22,399 --> 00:11:24,480
we require a special lock time script

311
00:11:24,480 --> 00:11:26,320
for doing this refund

312
00:11:26,320 --> 00:11:28,480
however in this work we show how we can

313
00:11:28,480 --> 00:11:30,640
remove this lockdown script by making

314
00:11:30,640 --> 00:11:33,120
use of verifiable timed discrete

315
00:11:33,120 --> 00:11:35,680
logarithm a cryptographic tool that is

316
00:11:35,680 --> 00:11:38,480
tailored for realizing channel expiry

317
00:11:38,480 --> 00:11:40,079
when the signature scheme is that of

318
00:11:40,079 --> 00:11:42,720
snore or acdsa

319
00:11:42,720 --> 00:11:45,440
verifiable time discrete log is a tool

320
00:11:45,440 --> 00:11:48,000
where the user has a secret value s that

321
00:11:48,000 --> 00:11:50,720
she commits to such that the commitment

322
00:11:50,720 --> 00:11:53,040
can be brute forced after some time t

323
00:11:53,040 --> 00:11:54,959
irrespective of the amount of parallel

324
00:11:54,959 --> 00:11:56,720
processing used

325
00:11:56,720 --> 00:11:58,639
the privacy guarantee is that before

326
00:11:58,639 --> 00:12:00,800
time t the commitment does not leak any

327
00:12:00,800 --> 00:12:03,200
information about the secret value

328
00:12:03,200 --> 00:12:05,360
and the soundness is that we can verify

329
00:12:05,360 --> 00:12:07,920
if the commitment indeed embeds the

330
00:12:07,920 --> 00:12:11,279
exponent of a given group element

331
00:12:11,279 --> 00:12:13,440
we have to modify the swap setup phase

332
00:12:13,440 --> 00:12:16,480
to accommodate these vtd logs

333
00:12:16,480 --> 00:12:18,560
while setting up the channels on the

334
00:12:18,560 --> 00:12:20,959
left bob gives the vtd log commitments

335
00:12:20,959 --> 00:12:24,079
to his secret key shares to alice these

336
00:12:24,079 --> 00:12:26,800
commitments are set for a time of t plus

337
00:12:26,800 --> 00:12:28,160
delta

338
00:12:28,160 --> 00:12:30,000
while setting up the channels on the

339
00:12:30,000 --> 00:12:31,600
right alice gives the btd law

340
00:12:31,600 --> 00:12:33,760
commitments to her secret key shares to

341
00:12:33,760 --> 00:12:34,560
bob

342
00:12:34,560 --> 00:12:36,560
these commitments are again set for a

343
00:12:36,560 --> 00:12:39,920
time of t both users start brute forcing

344
00:12:39,920 --> 00:12:41,920
the commitments right away

345
00:12:41,920 --> 00:12:43,760
the swap lock and the swap complete

346
00:12:43,760 --> 00:12:46,560
phases are unchanged

347
00:12:46,560 --> 00:12:48,639
the swap timeout phase is triggered as

348
00:12:48,639 --> 00:12:51,600
before if the coins remain unswapped in

349
00:12:51,600 --> 00:12:54,079
this case the users brute force the btd

350
00:12:54,079 --> 00:12:56,000
law commitments and learn the other

351
00:12:56,000 --> 00:12:58,000
user's key share

352
00:12:58,000 --> 00:13:00,320
this means the user who brute force the

353
00:13:00,320 --> 00:13:03,200
commitments has the entire secret key of

354
00:13:03,200 --> 00:13:05,760
the channel and therefore can refund the

355
00:13:05,760 --> 00:13:08,880
unswapped coins immediately

356
00:13:08,880 --> 00:13:11,279
the advantages of our approach are that

357
00:13:11,279 --> 00:13:13,839
now our transactions look like regular

358
00:13:13,839 --> 00:13:15,600
payment transactions

359
00:13:15,600 --> 00:13:17,760
since we do not use the log time script

360
00:13:17,760 --> 00:13:19,920
no information about the channel expiry

361
00:13:19,920 --> 00:13:21,920
is leaked on the chain

362
00:13:21,920 --> 00:13:23,920
finally the operations performed on the

363
00:13:23,920 --> 00:13:26,480
chain are cheap the gas costs in

364
00:13:26,480 --> 00:13:28,959
ethereum for every phase is cheaper in

365
00:13:28,959 --> 00:13:31,279
our protocol compared to the htlc based

366
00:13:31,279 --> 00:13:33,360
swap solution

367
00:13:33,360 --> 00:13:35,839
to conclude in this work we present the

368
00:13:35,839 --> 00:13:38,399
first multi-asset atomic swap protocol

369
00:13:38,399 --> 00:13:40,959
that can handle any currency

370
00:13:40,959 --> 00:13:43,360
for many major currencies we give a

371
00:13:43,360 --> 00:13:46,240
practically efficient swap protocol

372
00:13:46,240 --> 00:13:48,800
in terms of open problems we ask if we

373
00:13:48,800 --> 00:13:51,199
can resolve a potential denial of

374
00:13:51,199 --> 00:13:53,120
service problem where the parties go

375
00:13:53,120 --> 00:13:56,160
offline and trigger a refund always

376
00:13:56,160 --> 00:13:58,160
another problem to look into is if we

377
00:13:58,160 --> 00:14:00,639
can have a scriptless solution where if

378
00:14:00,639 --> 00:14:03,040
alice gets the swapped coins on the

379
00:14:03,040 --> 00:14:06,079
right bob can get his swapped coins on

380
00:14:06,079 --> 00:14:08,000
the left unconditionally

381
00:14:08,000 --> 00:14:09,199
anytime

382
00:14:09,199 --> 00:14:12,079
even irrespective of the timeout

383
00:14:12,079 --> 00:14:14,240
i welcome you to read our paper and get

384
00:14:14,240 --> 00:14:15,680
in touch with us if you have any

385
00:14:15,680 --> 00:14:16,399
questions

386
00:14:16,399 --> 00:14:17,519
or comments

387
00:14:17,519 --> 00:14:19,839
thank you

388
00:14:22,560 --> 00:14:24,079
good work

389
00:14:24,079 --> 00:14:28,160
any questions from the audience

390
00:14:28,959 --> 00:14:31,040
let me ask a very quick question uh

391
00:14:31,040 --> 00:14:33,600
since a little bit of the time

392
00:14:33,600 --> 00:14:36,720
so as far as i know the a large fraction

393
00:14:36,720 --> 00:14:39,440
of the value of uh cryptocurrencies come

394
00:14:39,440 --> 00:14:41,519
from the exchange

395
00:14:41,519 --> 00:14:45,680
of currencies and trading so

396
00:14:45,680 --> 00:14:47,680
in your opinion why did it take so long

397
00:14:47,680 --> 00:14:50,240
for researchers to work on the problems

398
00:14:50,240 --> 00:14:52,160
that you work on the question that you

399
00:14:52,160 --> 00:14:55,199
propose in your paper

400
00:14:57,440 --> 00:14:59,120
come again so i didn't

401
00:14:59,120 --> 00:15:01,279
quite catch the question

402
00:15:01,279 --> 00:15:03,360
oh i mean the large fraction of the

403
00:15:03,360 --> 00:15:05,440
value of cryptocurrencies come from the

404
00:15:05,440 --> 00:15:08,079
exchange uh the inter currency exchange

405
00:15:08,079 --> 00:15:10,959
and trading right and my question is so

406
00:15:10,959 --> 00:15:13,839
why it takes so long for researchers to

407
00:15:13,839 --> 00:15:15,920
work on design the

408
00:15:15,920 --> 00:15:17,440
the techniques that you propose in your

409
00:15:17,440 --> 00:15:19,680
work

410
00:15:19,680 --> 00:15:22,160
right so

411
00:15:22,240 --> 00:15:24,639
i think the emphasis on

412
00:15:24,639 --> 00:15:27,199
doing uh these crypto cryptocurrency

413
00:15:27,199 --> 00:15:30,160
swap protocols in a scriptless fashion

414
00:15:30,160 --> 00:15:33,199
um has been around just uh quite

415
00:15:33,199 --> 00:15:35,680
recently i think initially the

416
00:15:35,680 --> 00:15:36,480
the

417
00:15:36,480 --> 00:15:38,480
the current deployments are

418
00:15:38,480 --> 00:15:41,040
fine with using smart contracts or

419
00:15:41,040 --> 00:15:43,600
special scripts for this

420
00:15:43,600 --> 00:15:44,880
and

421
00:15:44,880 --> 00:15:46,480
there are there have been some issues

422
00:15:46,480 --> 00:15:47,920
because

423
00:15:47,920 --> 00:15:49,759
mainly due to the compatibility point of

424
00:15:49,759 --> 00:15:51,759
view because there are many

425
00:15:51,759 --> 00:15:53,759
currencies that are excluded because of

426
00:15:53,759 --> 00:15:55,519
uh because of this reason

427
00:15:55,519 --> 00:15:56,639
so the

428
00:15:56,639 --> 00:15:59,600
the push to develop uh scriptless

429
00:15:59,600 --> 00:16:01,279
protocols is uh

430
00:16:01,279 --> 00:16:03,680
is just you know is just happening now

431
00:16:03,680 --> 00:16:05,680
so maybe maybe that's the reason why the

432
00:16:05,680 --> 00:16:08,560
researchers are catching up

433
00:16:08,560 --> 00:16:10,000
okay gotcha

434
00:16:10,000 --> 00:16:11,600
we have another

435
00:16:11,600 --> 00:16:14,079
question from another speaker so please

436
00:16:14,079 --> 00:16:16,560
go ahead and this is the last question

437
00:16:16,560 --> 00:16:18,000
we are going to ask for this

438
00:16:18,000 --> 00:16:19,519
presentation

439
00:16:19,519 --> 00:16:21,040
uh hi oregon this is muhammad from

440
00:16:21,040 --> 00:16:24,240
monash uni thank you for the talk

441
00:16:24,240 --> 00:16:26,320
i'm wondering how long it takes in

442
00:16:26,320 --> 00:16:30,000
practice to solve this timed commitment

443
00:16:30,000 --> 00:16:32,639
like if you really want to build this in

444
00:16:32,639 --> 00:16:34,639
a real cryptocurrency how long would you

445
00:16:34,639 --> 00:16:37,600
need

446
00:16:37,600 --> 00:16:39,920
right so the the

447
00:16:39,920 --> 00:16:41,839
okay so the commitment has

448
00:16:41,839 --> 00:16:43,519
so when you when you want to brute force

449
00:16:43,519 --> 00:16:44,720
the commitment there are two aspects

450
00:16:44,720 --> 00:16:46,320
right so the first is

451
00:16:46,320 --> 00:16:48,160
how long do you want the timeout to be

452
00:16:48,160 --> 00:16:51,040
in real life uh and

453
00:16:51,040 --> 00:16:53,199
whatever so let's say that in real life

454
00:16:53,199 --> 00:16:55,920
you want the timeout to be a few hours

455
00:16:55,920 --> 00:16:58,560
or one day right and meaning that if the

456
00:16:58,560 --> 00:17:00,399
coins remain unswapped you want the

457
00:17:00,399 --> 00:17:02,240
refund to happen right this is an

458
00:17:02,240 --> 00:17:04,559
agreement that you can have with

459
00:17:04,559 --> 00:17:07,039
the other the other user that you are

460
00:17:07,039 --> 00:17:08,240
swapping

461
00:17:08,240 --> 00:17:10,400
so once you have this real

462
00:17:10,400 --> 00:17:12,880
real time number with you you can set

463
00:17:12,880 --> 00:17:14,959
your commitments accordingly

464
00:17:14,959 --> 00:17:16,240
so

465
00:17:16,240 --> 00:17:18,959
uh yeah so essentially your real world

466
00:17:18,959 --> 00:17:21,280
timeout is going to dictate how long uh

467
00:17:21,280 --> 00:17:23,520
how hard you want to set your commitment

468
00:17:23,520 --> 00:17:26,160
to be it's not the other way

469
00:17:26,160 --> 00:17:27,359
uh-huh okay

470
00:17:27,359 --> 00:17:29,600
thank you

471
00:17:29,679 --> 00:17:33,840
okay let's thank our speaker again

