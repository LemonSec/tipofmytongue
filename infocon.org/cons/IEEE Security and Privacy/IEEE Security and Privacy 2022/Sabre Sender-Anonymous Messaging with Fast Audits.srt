1
00:00:00,880 --> 00:00:02,480
hello my name is kyle storrier and i'm

2
00:00:02,480 --> 00:00:04,960
here to present sabre sender anonymous

3
00:00:04,960 --> 00:00:07,759
messaging with fast audits this was a

4
00:00:07,759 --> 00:00:10,000
work i did in collaboration with dr ryan

5
00:00:10,000 --> 00:00:13,280
henry and dr aditya vadapalli

6
00:00:13,280 --> 00:00:15,040
this presentation will be divided as

7
00:00:15,040 --> 00:00:16,560
follows we'll begin with some

8
00:00:16,560 --> 00:00:18,800
introductory and background material

9
00:00:18,800 --> 00:00:20,720
then we will discuss the saber bulletin

10
00:00:20,720 --> 00:00:22,880
board protocol and its novel technique

11
00:00:22,880 --> 00:00:25,840
for dpf verification then we'll briefly

12
00:00:25,840 --> 00:00:28,160
touch on the sabre mailbox protocol

13
00:00:28,160 --> 00:00:31,199
before we have some final conclusions

14
00:00:31,199 --> 00:00:33,600
now as its name suggests sender

15
00:00:33,600 --> 00:00:35,680
anonymous messaging protocols

16
00:00:35,680 --> 00:00:37,840
enable clients to anonymously send

17
00:00:37,840 --> 00:00:41,520
messages to one or more recipients

18
00:00:41,520 --> 00:00:43,120
in the literature there are two main

19
00:00:43,120 --> 00:00:45,120
types of sender anonymous messaging

20
00:00:45,120 --> 00:00:46,399
protocols

21
00:00:46,399 --> 00:00:48,160
the sender anonymous bulletin board

22
00:00:48,160 --> 00:00:49,840
model which functions much like an

23
00:00:49,840 --> 00:00:51,840
anonymous form of twitter in that it

24
00:00:51,840 --> 00:00:53,600
allows clients to anonymously send

25
00:00:53,600 --> 00:00:55,039
messages

26
00:00:55,039 --> 00:00:58,079
to all recipients on the system and the

27
00:00:58,079 --> 00:00:59,920
other model being the center anonymous

28
00:00:59,920 --> 00:01:01,520
mailbox model

29
00:01:01,520 --> 00:01:03,680
where clients will send messages to

30
00:01:03,680 --> 00:01:06,000
pre-registered mailboxes which they have

31
00:01:06,000 --> 00:01:09,280
received the address for

32
00:01:09,360 --> 00:01:11,920
in our work we propose sabre a novel

33
00:01:11,920 --> 00:01:13,760
family of

34
00:01:13,760 --> 00:01:16,000
synonymous messaging protocols that can

35
00:01:16,000 --> 00:01:17,439
function in both the bulletin board

36
00:01:17,439 --> 00:01:20,560
model and in the mailbox model where

37
00:01:20,560 --> 00:01:22,240
they both achieve significant

38
00:01:22,240 --> 00:01:24,840
improvement in performances over prior

39
00:01:24,840 --> 00:01:28,479
works a key component of sabre is the

40
00:01:28,479 --> 00:01:31,200
use of secure multi-party computation or

41
00:01:31,200 --> 00:01:32,479
mpc

42
00:01:32,479 --> 00:01:34,479
in particular we focus on what is known

43
00:01:34,479 --> 00:01:36,960
as two plus one party npc or server

44
00:01:36,960 --> 00:01:39,520
aided two-party mpc

45
00:01:39,520 --> 00:01:41,280
in these protocols we have two main

46
00:01:41,280 --> 00:01:43,759
parties that perform the computation

47
00:01:43,759 --> 00:01:45,119
are providing the input and receiving

48
00:01:45,119 --> 00:01:47,920
the output and a third assisting party

49
00:01:47,920 --> 00:01:50,000
that provides the two main parties with

50
00:01:50,000 --> 00:01:53,040
correlated randomness

51
00:01:53,040 --> 00:01:55,759
we also make use of the mpc in the head

52
00:01:55,759 --> 00:01:57,680
paradigm for zero knowledge proof

53
00:01:57,680 --> 00:01:59,680
construction

54
00:01:59,680 --> 00:02:01,600
in these zero knowledge proofs

55
00:02:01,600 --> 00:02:03,520
the approver will take

56
00:02:03,520 --> 00:02:06,399
a mpc protocol that verifies the

57
00:02:06,399 --> 00:02:08,560
statement that they are trying to prove

58
00:02:08,560 --> 00:02:10,560
and it will then simulate

59
00:02:10,560 --> 00:02:12,239
the running of this protocol by some

60
00:02:12,239 --> 00:02:14,239
simulated parties and it will make

61
00:02:14,239 --> 00:02:16,319
cryptographic commitments

62
00:02:16,319 --> 00:02:18,640
to the transcripts of each of the

63
00:02:18,640 --> 00:02:20,640
simulated parties where the transcript

64
00:02:20,640 --> 00:02:22,720
is simply the list of messages sent and

65
00:02:22,720 --> 00:02:25,520
received by that party

66
00:02:25,520 --> 00:02:28,080
after that the verifier can request that

67
00:02:28,080 --> 00:02:29,360
some number of these parties have their

68
00:02:29,360 --> 00:02:31,519
transcripts revealed

69
00:02:31,519 --> 00:02:32,400
and

70
00:02:32,400 --> 00:02:34,400
this verifier will then

71
00:02:34,400 --> 00:02:37,120
not err will then check these protocol

72
00:02:37,120 --> 00:02:41,120
or these transcripts for consistency

73
00:02:41,120 --> 00:02:43,360
the t privacy property of the mpc

74
00:02:43,360 --> 00:02:45,840
protocol ensures that the zero knowledge

75
00:02:45,840 --> 00:02:48,000
property is not violated by this

76
00:02:48,000 --> 00:02:50,400
at the same time if the approver is

77
00:02:50,400 --> 00:02:53,519
trying to prove a invalid statement

78
00:02:53,519 --> 00:02:56,560
then at least one of the transcripts

79
00:02:56,560 --> 00:02:59,120
will have an inconsistency and thus with

80
00:02:59,120 --> 00:03:01,360
some probability this inconsistency will

81
00:03:01,360 --> 00:03:04,720
be detected by the verifier to get

82
00:03:04,720 --> 00:03:06,640
sufficient soundness we run this many

83
00:03:06,640 --> 00:03:08,879
times in parallel using the cut and

84
00:03:08,879 --> 00:03:10,560
choose technique and we can also make

85
00:03:10,560 --> 00:03:12,480
this non-interactive through the use of

86
00:03:12,480 --> 00:03:15,599
the fiat schemer transform

87
00:03:15,599 --> 00:03:18,400
another key technique that is used in

88
00:03:18,400 --> 00:03:20,319
many center anonymous messaging systems

89
00:03:20,319 --> 00:03:22,959
including saber is the distributed point

90
00:03:22,959 --> 00:03:24,080
function

91
00:03:24,080 --> 00:03:26,159
now a point function is a very simple

92
00:03:26,159 --> 00:03:28,799
function defined by parameters x and y

93
00:03:28,799 --> 00:03:32,560
such that on input x it returns value y

94
00:03:32,560 --> 00:03:35,280
and on all other inputs it returns the

95
00:03:35,280 --> 00:03:37,519
value 0.

96
00:03:37,519 --> 00:03:40,080
now we can actually think of

97
00:03:40,080 --> 00:03:43,360
a point function as being a tree

98
00:03:43,360 --> 00:03:44,879
where when we are evaluating our

99
00:03:44,879 --> 00:03:47,200
function we begin at the root of the

100
00:03:47,200 --> 00:03:48,080
tree

101
00:03:48,080 --> 00:03:50,640
if the first bit of the input is zero

102
00:03:50,640 --> 00:03:52,959
we go to the left child

103
00:03:52,959 --> 00:03:55,040
otherwise we go to the right child we

104
00:03:55,040 --> 00:03:56,400
repeat this for all the bits of the

105
00:03:56,400 --> 00:03:58,959
input until we reach the leaf node where

106
00:03:58,959 --> 00:04:00,560
the leaf nodes have been assigned the

107
00:04:00,560 --> 00:04:02,640
values which correspond to

108
00:04:02,640 --> 00:04:05,360
the point function output on that given

109
00:04:05,360 --> 00:04:06,640
input

110
00:04:06,640 --> 00:04:09,360
so in this case we can see that this cor

111
00:04:09,360 --> 00:04:11,200
tree corresponds to the point function

112
00:04:11,200 --> 00:04:13,120
p51

113
00:04:13,120 --> 00:04:16,478
because the non-zero leaf node is at

114
00:04:16,478 --> 00:04:19,839
index five and it has the value one

115
00:04:19,839 --> 00:04:21,600
now in our work we

116
00:04:21,600 --> 00:04:24,560
characterize the nodes of these point

117
00:04:24,560 --> 00:04:26,880
function trees into two types

118
00:04:26,880 --> 00:04:28,800
zero nodes and one nodes

119
00:04:28,800 --> 00:04:30,639
these zero nodes include all of these

120
00:04:30,639 --> 00:04:32,720
zero value leaf nodes

121
00:04:32,720 --> 00:04:34,720
as well as all of the interior nodes

122
00:04:34,720 --> 00:04:37,360
where both children are themselves zero

123
00:04:37,360 --> 00:04:38,960
nodes

124
00:04:38,960 --> 00:04:40,960
the other type of node the one node is

125
00:04:40,960 --> 00:04:44,240
made up of the non-zero leaf node

126
00:04:44,240 --> 00:04:46,639
and all of the interior nodes where one

127
00:04:46,639 --> 00:04:48,479
child is a zero node and the other is a

128
00:04:48,479 --> 00:04:50,080
one node

129
00:04:50,080 --> 00:04:52,479
now in this diagram we have highlighted

130
00:04:52,479 --> 00:04:55,040
all of the one nodes as you can see they

131
00:04:55,040 --> 00:04:56,400
form a path

132
00:04:56,400 --> 00:04:57,759
from the root

133
00:04:57,759 --> 00:04:59,440
to the leaf corresponding to the

134
00:04:59,440 --> 00:05:01,280
distinguished point of our point

135
00:05:01,280 --> 00:05:02,240
function

136
00:05:02,240 --> 00:05:04,720
and we refer to this as the one path

137
00:05:04,720 --> 00:05:08,000
and this path will exist if and only if

138
00:05:08,000 --> 00:05:10,160
this tree is a well-formed point

139
00:05:10,160 --> 00:05:12,560
function tree which is a critical factor

140
00:05:12,560 --> 00:05:14,960
in our dpf verification protocol that

141
00:05:14,960 --> 00:05:17,520
we'll discuss shortly

142
00:05:17,520 --> 00:05:18,479
now

143
00:05:18,479 --> 00:05:21,440
a distributed point function takes the

144
00:05:21,440 --> 00:05:23,520
point function tree and its secret

145
00:05:23,520 --> 00:05:25,919
shares it and it compresses it

146
00:05:25,919 --> 00:05:28,479
now the most efficient such construction

147
00:05:28,479 --> 00:05:31,120
is due to oil galboa and a shea and it

148
00:05:31,120 --> 00:05:33,440
produces dpfs whose key size is

149
00:05:33,440 --> 00:05:34,880
logarithmic

150
00:05:34,880 --> 00:05:37,360
in their domain size

151
00:05:37,360 --> 00:05:40,000
now the way that this construction works

152
00:05:40,000 --> 00:05:42,479
each key includes a seed value that

153
00:05:42,479 --> 00:05:46,320
corresponds to the root of the dpf tree

154
00:05:46,320 --> 00:05:47,919
then

155
00:05:47,919 --> 00:05:49,759
we can generate values for the two

156
00:05:49,759 --> 00:05:51,680
children of that room node by applying a

157
00:05:51,680 --> 00:05:53,919
length doubling pseudorandom generator

158
00:05:53,919 --> 00:05:56,000
to the seed value for the root

159
00:05:56,000 --> 00:05:58,160
and we repeat this process recursively

160
00:05:58,160 --> 00:06:00,960
to generate values for all nodes in the

161
00:06:00,960 --> 00:06:02,880
point function tree

162
00:06:02,880 --> 00:06:05,680
at the same time we will also apply

163
00:06:05,680 --> 00:06:07,520
what's known as a correction word to

164
00:06:07,520 --> 00:06:09,759
some of the outputs from the prg we

165
00:06:09,759 --> 00:06:11,840
denote these in this diagram with the

166
00:06:11,840 --> 00:06:14,160
double line

167
00:06:14,160 --> 00:06:15,759
and we apply these correction words in

168
00:06:15,759 --> 00:06:17,759
order to have our

169
00:06:17,759 --> 00:06:19,680
tree

170
00:06:19,680 --> 00:06:21,440
match the desired form

171
00:06:21,440 --> 00:06:24,080
in particular we want it

172
00:06:24,080 --> 00:06:25,440
to essentially be

173
00:06:25,440 --> 00:06:28,080
a secret sharing of

174
00:06:28,080 --> 00:06:30,479
uh the point function tree namely we

175
00:06:30,479 --> 00:06:33,440
want the leaves

176
00:06:33,440 --> 00:06:35,039
of the two trees

177
00:06:35,039 --> 00:06:37,680
to be additive secret shares of the

178
00:06:37,680 --> 00:06:39,919
vector which is zero at all locations

179
00:06:39,919 --> 00:06:41,759
except for location x where it has the

180
00:06:41,759 --> 00:06:43,280
value y

181
00:06:43,280 --> 00:06:44,880
and to do this

182
00:06:44,880 --> 00:06:47,120
we choose our we apply our correction

183
00:06:47,120 --> 00:06:49,360
words such that

184
00:06:49,360 --> 00:06:52,639
for each of the one nodes

185
00:06:52,639 --> 00:06:54,800
the zero node which is the child of that

186
00:06:54,800 --> 00:06:57,520
one node will be the same between the

187
00:06:57,520 --> 00:06:59,599
two dpf trees

188
00:06:59,599 --> 00:07:01,280
and because we are recursively

189
00:07:01,280 --> 00:07:04,080
generating our dpf tree using a

190
00:07:04,080 --> 00:07:06,160
deterministic function this means that

191
00:07:06,160 --> 00:07:08,160
the entire subtree rooted at that zero

192
00:07:08,160 --> 00:07:09,840
node will be the same between the two

193
00:07:09,840 --> 00:07:13,280
trees which will result in the leaves of

194
00:07:13,280 --> 00:07:15,840
those two sub trees

195
00:07:15,840 --> 00:07:19,198
secret shares of zero

196
00:07:19,520 --> 00:07:22,160
now one of the important applications

197
00:07:22,160 --> 00:07:24,880
of distributed point functions is

198
00:07:24,880 --> 00:07:26,960
writing to additively secret shared

199
00:07:26,960 --> 00:07:29,840
databases so say we have an additively

200
00:07:29,840 --> 00:07:31,360
secret shared database held by two

201
00:07:31,360 --> 00:07:32,560
servers

202
00:07:32,560 --> 00:07:35,759
we want to write value y at index x

203
00:07:35,759 --> 00:07:37,680
we can represent this

204
00:07:37,680 --> 00:07:39,680
easily as a vector

205
00:07:39,680 --> 00:07:41,759
which we can then secret share and we

206
00:07:41,759 --> 00:07:43,039
can send

207
00:07:43,039 --> 00:07:44,639
the secret shares

208
00:07:44,639 --> 00:07:47,120
to each of the servers and they can add

209
00:07:47,120 --> 00:07:48,960
that to their database

210
00:07:48,960 --> 00:07:50,720
to perform the right

211
00:07:50,720 --> 00:07:52,800
now if we instead send keys for a

212
00:07:52,800 --> 00:07:54,800
distributed point function corresponding

213
00:07:54,800 --> 00:07:57,120
to values x and y

214
00:07:57,120 --> 00:07:59,199
then we have a much more efficient way

215
00:07:59,199 --> 00:08:01,120
to perform this right

216
00:08:01,120 --> 00:08:03,280
and this is exactly what's done by many

217
00:08:03,280 --> 00:08:05,520
center anomalous messaging systems

218
00:08:05,520 --> 00:08:08,319
including the well-known repost system

219
00:08:08,319 --> 00:08:10,560
for center anonymous bulletin boards

220
00:08:10,560 --> 00:08:12,879
in this case the clients who want to

221
00:08:12,879 --> 00:08:15,599
write a message will choose a random

222
00:08:15,599 --> 00:08:17,919
value x which is the index within the

223
00:08:17,919 --> 00:08:20,000
mailbox or within the bulletin board

224
00:08:20,000 --> 00:08:21,520
that they are writing to and they will

225
00:08:21,520 --> 00:08:22,960
have the value y be the message that

226
00:08:22,960 --> 00:08:25,360
they are trying to write

227
00:08:25,360 --> 00:08:27,440
however

228
00:08:27,440 --> 00:08:30,879
if a client were to send a malformed dpf

229
00:08:30,879 --> 00:08:32,000
key

230
00:08:32,000 --> 00:08:34,240
then this write request would corrupt

231
00:08:34,240 --> 00:08:35,839
the entire database

232
00:08:35,839 --> 00:08:37,360
to prevent this

233
00:08:37,360 --> 00:08:40,320
riposte uses a linear cost verification

234
00:08:40,320 --> 00:08:43,120
protocol which ensures that the dpf keys

235
00:08:43,120 --> 00:08:45,920
it receives are well formed

236
00:08:45,920 --> 00:08:47,600
however this particular verification

237
00:08:47,600 --> 00:08:49,760
protocol is specific to

238
00:08:49,760 --> 00:08:53,279
the dpf construction they use which has

239
00:08:53,279 --> 00:08:55,360
a key size that is the square root of

240
00:08:55,360 --> 00:08:57,360
the domain size rather than logarithmic

241
00:08:57,360 --> 00:08:58,880
as we just like the one we discussed

242
00:08:58,880 --> 00:09:00,560
earlier

243
00:09:00,560 --> 00:09:02,640
the other major prior work in this area

244
00:09:02,640 --> 00:09:04,640
is the express system for sender

245
00:09:04,640 --> 00:09:06,480
anonymous mailboxes

246
00:09:06,480 --> 00:09:08,399
in this case clients who want to write

247
00:09:08,399 --> 00:09:10,160
to a particular mailbox

248
00:09:10,160 --> 00:09:12,800
will choose the value x for their point

249
00:09:12,800 --> 00:09:17,200
function to be the 128-bit

250
00:09:17,200 --> 00:09:19,200
pseudo-random address

251
00:09:19,200 --> 00:09:20,480
corresponding to the mailbox that

252
00:09:20,480 --> 00:09:22,720
they're trying to write to

253
00:09:22,720 --> 00:09:24,160
and while the

254
00:09:24,160 --> 00:09:26,160
the system does use the logarithmic size

255
00:09:26,160 --> 00:09:28,240
dpfs we discussed earlier

256
00:09:28,240 --> 00:09:30,560
this does result in very large dpfs due

257
00:09:30,560 --> 00:09:33,120
to large input size

258
00:09:33,120 --> 00:09:35,120
they also have to deal with this problem

259
00:09:35,120 --> 00:09:37,360
of potentially malformed dpfs

260
00:09:37,360 --> 00:09:39,519
and to deal with that they also use a

261
00:09:39,519 --> 00:09:42,800
linear cost verification protocol

262
00:09:42,800 --> 00:09:45,360
and this brings us to sabre

263
00:09:45,360 --> 00:09:47,360
in particular we'll begin with the sabre

264
00:09:47,360 --> 00:09:49,040
bulletin board protocol

265
00:09:49,040 --> 00:09:51,839
which is structured much like riposte

266
00:09:51,839 --> 00:09:54,720
except that it uses logarithmic size

267
00:09:54,720 --> 00:09:56,080
dpfs

268
00:09:56,080 --> 00:09:59,760
and a logarithmic cost dpf verification

269
00:09:59,760 --> 00:10:01,440
protocol

270
00:10:01,440 --> 00:10:02,640
and the way that this verification

271
00:10:02,640 --> 00:10:05,440
protocol works is it traverses the one

272
00:10:05,440 --> 00:10:07,839
path of the dpf tree

273
00:10:07,839 --> 00:10:11,760
from the root to the distinguished point

274
00:10:11,760 --> 00:10:14,560
so for example we begin at the root

275
00:10:14,560 --> 00:10:15,519
seeds

276
00:10:15,519 --> 00:10:17,760
we expand them and apply the correction

277
00:10:17,760 --> 00:10:20,160
words as we have before

278
00:10:20,160 --> 00:10:22,880
and for example let's say that the left

279
00:10:22,880 --> 00:10:24,880
child is the one node and the right

280
00:10:24,880 --> 00:10:28,000
child is the zero node in this case

281
00:10:28,000 --> 00:10:30,640
well our mpc verification protocol has

282
00:10:30,640 --> 00:10:32,720
been provided with

283
00:10:32,720 --> 00:10:34,320
bitwise shares

284
00:10:34,320 --> 00:10:35,279
of

285
00:10:35,279 --> 00:10:38,160
the alleged distinguished point of this

286
00:10:38,160 --> 00:10:39,360
dpf

287
00:10:39,360 --> 00:10:41,600
and using those shares for the first bit

288
00:10:41,600 --> 00:10:44,399
we can conditionally swap

289
00:10:44,399 --> 00:10:45,600
the nodes

290
00:10:45,600 --> 00:10:48,000
so that our parties receive additive

291
00:10:48,000 --> 00:10:49,200
secret shares

292
00:10:49,200 --> 00:10:50,959
of what should be the zero node and what

293
00:10:50,959 --> 00:10:53,839
should be the one node

294
00:10:53,839 --> 00:10:55,680
so they will then take

295
00:10:55,680 --> 00:10:57,200
the zero node shares and the one node

296
00:10:57,200 --> 00:10:58,160
shares

297
00:10:58,160 --> 00:11:00,560
and they'll compute the difference of

298
00:11:00,560 --> 00:11:04,079
the zero node between the two trees

299
00:11:04,079 --> 00:11:06,079
now as we discussed earlier if this is a

300
00:11:06,079 --> 00:11:08,880
well-formed dpf tree these two nodes

301
00:11:08,880 --> 00:11:10,880
will be the same

302
00:11:10,880 --> 00:11:13,760
and thus their difference will be zero

303
00:11:13,760 --> 00:11:15,519
if however the difference is non-zero we

304
00:11:15,519 --> 00:11:17,440
know that this is an invalid dpf and we

305
00:11:17,440 --> 00:11:20,079
can immediately reject it

306
00:11:20,079 --> 00:11:22,079
if however the difference is zero

307
00:11:22,079 --> 00:11:24,000
we know that entire subtree rooted that

308
00:11:24,000 --> 00:11:26,560
zero node is made up of zero nodes

309
00:11:26,560 --> 00:11:28,399
so we can turn our attention

310
00:11:28,399 --> 00:11:31,040
to the subtree rooted at the one node

311
00:11:31,040 --> 00:11:32,320
and we can repeat this process

312
00:11:32,320 --> 00:11:36,160
recursively until we reach the leaf one

313
00:11:36,160 --> 00:11:38,480
node at which point we can conclude

314
00:11:38,480 --> 00:11:40,720
that all of the

315
00:11:40,720 --> 00:11:43,200
other leaf nodes are

316
00:11:43,200 --> 00:11:44,640
zero nodes and thus this is a

317
00:11:44,640 --> 00:11:47,760
well-formed dpf

318
00:11:47,760 --> 00:11:50,399
now we can run this protocol directly on

319
00:11:50,399 --> 00:11:52,000
our saber servers

320
00:11:52,000 --> 00:11:54,800
or we can use it to construct an npc in

321
00:11:54,800 --> 00:11:57,200
the head zero knowledge proof

322
00:11:57,200 --> 00:11:58,240
however

323
00:11:58,240 --> 00:12:00,240
our proof is somewhat complicated from a

324
00:12:00,240 --> 00:12:01,920
different or from a standard zero

325
00:12:01,920 --> 00:12:03,360
knowledge

326
00:12:03,360 --> 00:12:06,240
npc in the head proof because

327
00:12:06,240 --> 00:12:08,880
the servers already have one of the dpf

328
00:12:08,880 --> 00:12:10,800
keys and thus they cannot be allowed to

329
00:12:10,800 --> 00:12:14,320
see the other dpf key held by one of the

330
00:12:14,320 --> 00:12:16,240
simulated parties

331
00:12:16,240 --> 00:12:18,160
so we can allow them to see the

332
00:12:18,160 --> 00:12:20,480
assisting party or the party with the

333
00:12:20,480 --> 00:12:23,120
same dpf key that they have

334
00:12:23,120 --> 00:12:24,959
and because we are actually having

335
00:12:24,959 --> 00:12:26,959
different parties

336
00:12:26,959 --> 00:12:28,800
in our same simulated protocol being

337
00:12:28,800 --> 00:12:30,880
verified by different servers it

338
00:12:30,880 --> 00:12:32,959
increases our probability of detecting

339
00:12:32,959 --> 00:12:35,279
an inconsistent transcript

340
00:12:35,279 --> 00:12:36,880
and we can take this even further than

341
00:12:36,880 --> 00:12:38,800
using two servers by adding a third

342
00:12:38,800 --> 00:12:39,920
server

343
00:12:39,920 --> 00:12:41,760
which verify so that we are verifying

344
00:12:41,760 --> 00:12:43,920
all three of the simulated parties at

345
00:12:43,920 --> 00:12:46,320
the same time

346
00:12:46,320 --> 00:12:47,839
and this gives us perfect soundness

347
00:12:47,839 --> 00:12:50,480
after only one iteration of the protocol

348
00:12:50,480 --> 00:12:52,079
eliminating the need to apply the cut

349
00:12:52,079 --> 00:12:54,880
and choose technique

350
00:12:55,680 --> 00:12:57,519
and this actually results in an

351
00:12:57,519 --> 00:13:00,240
extremely fast verification

352
00:13:00,240 --> 00:13:02,800
as we can see in this example here

353
00:13:02,800 --> 00:13:05,200
we can actually see that it is

354
00:13:05,200 --> 00:13:07,760
quicker to reject

355
00:13:07,760 --> 00:13:11,440
an invalid dpf than it is to sample the

356
00:13:11,440 --> 00:13:13,680
necessary pseudorandom bits

357
00:13:13,680 --> 00:13:18,599
to produce that fake dpf

358
00:13:21,040 --> 00:13:23,839
in our work we also propose the saver

359
00:13:23,839 --> 00:13:25,440
mailbox protocol

360
00:13:25,440 --> 00:13:27,440
this protocol is structured much like

361
00:13:27,440 --> 00:13:30,480
express in that it uses dpfs to write

362
00:13:30,480 --> 00:13:32,320
into mailboxes

363
00:13:32,320 --> 00:13:34,720
and the sender needs to know the mailbox

364
00:13:34,720 --> 00:13:36,480
address that it is writing to

365
00:13:36,480 --> 00:13:39,600
however unlike express we are using our

366
00:13:39,600 --> 00:13:41,839
logarithmic cost the dpf verification

367
00:13:41,839 --> 00:13:45,040
that we just discussed rather than the

368
00:13:45,040 --> 00:13:47,440
linear cost dpf verification originally

369
00:13:47,440 --> 00:13:48,880
used in express

370
00:13:48,880 --> 00:13:51,600
additionally we use a novel mailbox

371
00:13:51,600 --> 00:13:53,600
address verification protocol

372
00:13:53,600 --> 00:13:55,199
which i've omitted to discuss in this

373
00:13:55,199 --> 00:13:57,120
presentation but which i would be happy

374
00:13:57,120 --> 00:13:58,959
to talk about in

375
00:13:58,959 --> 00:14:01,199
the question and answer period

376
00:14:01,199 --> 00:14:03,920
and what this does is it actually allows

377
00:14:03,920 --> 00:14:08,079
us to use considerably smaller dpfs

378
00:14:08,079 --> 00:14:09,040
because

379
00:14:09,040 --> 00:14:10,880
the original express system

380
00:14:10,880 --> 00:14:12,399
used

381
00:14:12,399 --> 00:14:15,440
dpfs with large 128-bit keys in order to

382
00:14:15,440 --> 00:14:17,839
prevent attackers from randomly

383
00:14:17,839 --> 00:14:19,680
corrupting mailboxes

384
00:14:19,680 --> 00:14:21,920
our new verification protocol allows us

385
00:14:21,920 --> 00:14:25,199
to avoid that and use dpfs whose domain

386
00:14:25,199 --> 00:14:27,519
size grows with the number of registered

387
00:14:27,519 --> 00:14:30,519
mailboxes

388
00:14:30,959 --> 00:14:32,240
in conclusion

389
00:14:32,240 --> 00:14:34,320
sabre is a highly efficient sender

390
00:14:34,320 --> 00:14:36,240
anonymous messaging protocol

391
00:14:36,240 --> 00:14:38,160
that achieves significant performance

392
00:14:38,160 --> 00:14:40,560
improvements in both the cindernamus

393
00:14:40,560 --> 00:14:43,040
bulletin board model and the sender

394
00:14:43,040 --> 00:14:45,360
anonymous mailbox model through its

395
00:14:45,360 --> 00:14:48,480
novel dpf verification protocol based

396
00:14:48,480 --> 00:14:51,760
upon mpc and mpc in the head

397
00:14:51,760 --> 00:14:53,360
thank you for your time and attention

398
00:14:53,360 --> 00:14:56,370
and i'm happy to answer any questions

399
00:14:56,370 --> 00:14:59,519
[Applause]

400
00:15:03,519 --> 00:15:06,240
all right great talk um joe from cmu so

401
00:15:06,240 --> 00:15:07,279
i wonder

402
00:15:07,279 --> 00:15:10,560
if your verification is only for male

403
00:15:10,560 --> 00:15:13,440
form dpf but if some user is trying to

404
00:15:13,440 --> 00:15:16,240
just say write a random word in that

405
00:15:16,240 --> 00:15:20,079
bucket can that be prevented

406
00:15:21,680 --> 00:15:23,199
so

407
00:15:23,199 --> 00:15:25,279
if you are performing a legitimate write

408
00:15:25,279 --> 00:15:27,600
but just random data that we were saying

409
00:15:27,600 --> 00:15:30,880
yeah that would be completely allowed by

410
00:15:30,880 --> 00:15:32,480
the general constraints of a system like

411
00:15:32,480 --> 00:15:33,440
this

412
00:15:33,440 --> 00:15:36,000
um what we're more concerned about is a

413
00:15:36,000 --> 00:15:38,240
user who actually actively is corrupting

414
00:15:38,240 --> 00:15:42,079
the database completely okay so another

415
00:15:42,079 --> 00:15:44,639
question so i do remember that i

416
00:15:44,639 --> 00:15:47,279
read some paper from henry corona gibbs

417
00:15:47,279 --> 00:15:50,079
on the lightweight heavy heater paper do

418
00:15:50,079 --> 00:15:51,440
you remember that

419
00:15:51,440 --> 00:15:53,120
so which one was it sorry the

420
00:15:53,120 --> 00:15:55,279
lightweight heavy heater

421
00:15:55,279 --> 00:15:57,600
paper i don't think i right

422
00:15:57,600 --> 00:15:59,440
okay so um

423
00:15:59,440 --> 00:16:01,360
i just want to say that i remember they

424
00:16:01,360 --> 00:16:03,680
also have some verification for

425
00:16:03,680 --> 00:16:06,320
dpf or something like that so

426
00:16:06,320 --> 00:16:07,839
i was trying to ask what's the

427
00:16:07,839 --> 00:16:09,360
difference between this one and that one

428
00:16:09,360 --> 00:16:11,759
but anyway okay okay thank you yes i'd

429
00:16:11,759 --> 00:16:13,279
be happy to discuss that after the talk

430
00:16:13,279 --> 00:16:16,000
uh sure thank you

431
00:16:17,120 --> 00:16:19,759
hey saba skandera and unc chapel hill so

432
00:16:19,759 --> 00:16:21,759
i'm curious if you have a sense of how

433
00:16:21,759 --> 00:16:22,959
much of the performance improvement

434
00:16:22,959 --> 00:16:24,399
comes from the better auditing versus

435
00:16:24,399 --> 00:16:26,399
how much of it comes from the better

436
00:16:26,399 --> 00:16:28,160
uh mailbox like the address checking

437
00:16:28,160 --> 00:16:30,560
that lets you use the smaller dps

438
00:16:30,560 --> 00:16:32,079
uh so that would be for the saber

439
00:16:32,079 --> 00:16:34,880
mailbox protocol that's right yeah

440
00:16:34,880 --> 00:16:37,519
i don't believe we don't we have too

441
00:16:37,519 --> 00:16:40,800
much detail on that in

442
00:16:40,800 --> 00:16:43,279
uh our protocol in as far as i can

443
00:16:43,279 --> 00:16:44,560
recall all

444
00:16:44,560 --> 00:16:46,320
um but yeah i'd be happy to discuss that

445
00:16:46,320 --> 00:16:48,480
more after the talk sure yeah it's super

446
00:16:48,480 --> 00:16:51,600
super cool new ideas

447
00:16:51,600 --> 00:16:53,600
all right so i have a couple of

448
00:16:53,600 --> 00:16:55,920
questions uh well i'll just ask one

449
00:16:55,920 --> 00:16:58,160
question which is that uh at the end

450
00:16:58,160 --> 00:16:59,759
you're sort of hinting that we should

451
00:16:59,759 --> 00:17:01,199
ask you about this mailbox address

452
00:17:01,199 --> 00:17:02,720
verification protocol so maybe you can

453
00:17:02,720 --> 00:17:03,759
tell us a little bit about how it

454
00:17:03,759 --> 00:17:05,359
actually works

455
00:17:05,359 --> 00:17:07,760
certainly

456
00:17:08,959 --> 00:17:11,839
so the way that this functions

457
00:17:11,839 --> 00:17:14,799
is basically each mailbox has an ad or

458
00:17:14,799 --> 00:17:16,799
an index in our database

459
00:17:16,799 --> 00:17:18,640
and it has an address which is simply

460
00:17:18,640 --> 00:17:20,720
produced by applying a pseudorandom

461
00:17:20,720 --> 00:17:22,160
function

462
00:17:22,160 --> 00:17:24,480
that is keyed using a key only known to

463
00:17:24,480 --> 00:17:26,319
our servers

464
00:17:26,319 --> 00:17:29,360
and applying that to the index

465
00:17:29,360 --> 00:17:32,320
now the client who wants to write to

466
00:17:32,320 --> 00:17:34,240
that mailbox needs to know

467
00:17:34,240 --> 00:17:36,160
the value i and the corresponding

468
00:17:36,160 --> 00:17:38,080
address

469
00:17:38,080 --> 00:17:40,480
which can be provided to them by the

470
00:17:40,480 --> 00:17:42,720
recipient

471
00:17:42,720 --> 00:17:45,200
and they then produce a dpf whose target

472
00:17:45,200 --> 00:17:48,000
is the index of that mailbox

473
00:17:48,000 --> 00:17:49,600
and

474
00:17:49,600 --> 00:17:51,840
they can then also they also need to

475
00:17:51,840 --> 00:17:54,640
send the shares of that value i

476
00:17:54,640 --> 00:17:57,200
and the address corresponding to i

477
00:17:57,200 --> 00:17:58,160
these

478
00:17:58,160 --> 00:18:00,400
the servers can then run an mpc

479
00:18:00,400 --> 00:18:02,240
computation of that pseudorandom

480
00:18:02,240 --> 00:18:03,280
function

481
00:18:03,280 --> 00:18:04,799
to produce

482
00:18:04,799 --> 00:18:06,799
what is the actual address that

483
00:18:06,799 --> 00:18:08,640
corresponds to the

484
00:18:08,640 --> 00:18:10,880
value i that they received of course all

485
00:18:10,880 --> 00:18:12,240
done in mpc

486
00:18:12,240 --> 00:18:14,080
and then they can easily produce the

487
00:18:14,080 --> 00:18:16,720
difference and to compare whether the

488
00:18:16,720 --> 00:18:18,880
address that they actually received

489
00:18:18,880 --> 00:18:20,320
corresponds to the address that it

490
00:18:20,320 --> 00:18:22,880
actually should be for that value i

491
00:18:22,880 --> 00:18:23,679
if

492
00:18:23,679 --> 00:18:25,360
that they do not match then we know that

493
00:18:25,360 --> 00:18:27,440
the client does not actually know the

494
00:18:27,440 --> 00:18:28,640
address of the mailbox that they're

495
00:18:28,640 --> 00:18:30,000
trying to write to and so we can

496
00:18:30,000 --> 00:18:32,960
immediately reject this

497
00:18:33,120 --> 00:18:34,000
thank you

498
00:18:34,000 --> 00:18:35,039
and just

499
00:18:35,039 --> 00:18:37,360
since we have a little bit of time

500
00:18:37,360 --> 00:18:39,200
one question i had is i couldn't quite

501
00:18:39,200 --> 00:18:41,200
fully understand how

502
00:18:41,200 --> 00:18:44,799
the dpf auditing mechanism worked

503
00:18:44,799 --> 00:18:46,240
specifically

504
00:18:46,240 --> 00:18:47,840
uh you are

505
00:18:47,840 --> 00:18:50,080
choosing the uh

506
00:18:50,080 --> 00:18:51,760
nodes that are supposed to encode zero

507
00:18:51,760 --> 00:18:53,600
and then you're subtracting them but i

508
00:18:53,600 --> 00:18:55,039
was trying to figure out like how do you

509
00:18:55,039 --> 00:18:56,400
know which ones are supposed to encode

510
00:18:56,400 --> 00:18:57,679
zero because the center anonymous

511
00:18:57,679 --> 00:18:59,840
property means that it's unlinkable

512
00:18:59,840 --> 00:19:02,480
which specific element is being modified

513
00:19:02,480 --> 00:19:04,240
so you don't so as as the servers you

514
00:19:04,240 --> 00:19:06,240
don't really necessarily know

515
00:19:06,240 --> 00:19:08,240
which path was taken in the first place

516
00:19:08,240 --> 00:19:10,000
so how is that being done

517
00:19:10,000 --> 00:19:11,760
okay yeah so

518
00:19:11,760 --> 00:19:12,799
i had to go through that part a little

519
00:19:12,799 --> 00:19:15,200
bit fast but basically the idea is

520
00:19:15,200 --> 00:19:17,520
because the servers have been given

521
00:19:17,520 --> 00:19:19,600
secret shares of each of the bits of

522
00:19:19,600 --> 00:19:23,600
what should be that distinguished point

523
00:19:23,600 --> 00:19:26,400
we can then perform what we called our

524
00:19:26,400 --> 00:19:28,799
conditional swapping operation

525
00:19:28,799 --> 00:19:30,640
and that what that does is essentially

526
00:19:30,640 --> 00:19:33,679
we'll swap the or conditionally swap our

527
00:19:33,679 --> 00:19:36,559
two children nodes so that essentially

528
00:19:36,559 --> 00:19:39,039
we get shares of one that we know should

529
00:19:39,039 --> 00:19:40,799
be the zero node and we get shares the

530
00:19:40,799 --> 00:19:42,880
one that should be the one node unless

531
00:19:42,880 --> 00:19:46,880
of course this is a invalid dpf

532
00:19:46,880 --> 00:19:49,200
thank you thank you all right thank you

533
00:19:49,200 --> 00:19:51,600
so much

534
00:19:51,600 --> 00:19:54,800
[Applause]

