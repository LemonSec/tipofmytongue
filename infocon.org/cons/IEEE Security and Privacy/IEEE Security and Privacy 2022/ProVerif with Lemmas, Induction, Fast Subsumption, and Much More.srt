1
00:00:03,760 --> 00:00:05,440
thank you very much for the kind

2
00:00:05,440 --> 00:00:07,600
introduction so it's a joint work with

3
00:00:07,600 --> 00:00:10,400
borino blanche and veren cartier

4
00:00:10,400 --> 00:00:13,360
so as you all know designing a security

5
00:00:13,360 --> 00:00:16,400
protocol is difficult as we need to

6
00:00:16,400 --> 00:00:19,199
secure many aspects from hardware

7
00:00:19,199 --> 00:00:20,320
cryptographic primitive that you're

8
00:00:20,320 --> 00:00:22,400
using and of course the protocol itself

9
00:00:22,400 --> 00:00:23,760
so this work

10
00:00:23,760 --> 00:00:25,840
only focuses on the protocol aspects and

11
00:00:25,840 --> 00:00:28,560
in particular the automated verification

12
00:00:28,560 --> 00:00:31,039
to guarantee the absence of logical

13
00:00:31,039 --> 00:00:32,320
flaws

14
00:00:32,320 --> 00:00:33,920
so we

15
00:00:33,920 --> 00:00:36,239
place ourselves within the

16
00:00:36,239 --> 00:00:37,920
mod the symbolic model called dollarva

17
00:00:37,920 --> 00:00:38,879
model

18
00:00:38,879 --> 00:00:40,079
in which

19
00:00:40,079 --> 00:00:42,000
attackers control the network so they

20
00:00:42,000 --> 00:00:45,039
can intercept message read and

21
00:00:45,039 --> 00:00:47,920
write messages of the network but they

22
00:00:47,920 --> 00:00:50,399
cannot break the cryptography or use

23
00:00:50,399 --> 00:00:51,760
side channel

24
00:00:51,760 --> 00:00:55,440
so we verify a wide range of security

25
00:00:55,440 --> 00:00:57,600
properties going from the more classical

26
00:00:57,600 --> 00:01:00,960
one authentications secrecy to privacy

27
00:01:00,960 --> 00:01:03,359
type properties like anonymity vote

28
00:01:03,359 --> 00:01:05,600
privacy and unlikability and of course

29
00:01:05,600 --> 00:01:08,400
the list is not exhaustive

30
00:01:08,400 --> 00:01:09,119
so

31
00:01:09,119 --> 00:01:11,119
why prove so preventive is a state of

32
00:01:11,119 --> 00:01:14,320
the art uh automated way approver so

33
00:01:14,320 --> 00:01:17,439
it's a mature tool as its

34
00:01:17,439 --> 00:01:19,759
last year was the twentieth birthday of

35
00:01:19,759 --> 00:01:21,119
of project

36
00:01:21,119 --> 00:01:23,520
so it's fairly used to fairly easy to

37
00:01:23,520 --> 00:01:25,680
use especially at the beginner as it is

38
00:01:25,680 --> 00:01:27,759
a really a push-down button tool

39
00:01:27,759 --> 00:01:30,960
and it has quite a large community so

40
00:01:30,960 --> 00:01:34,400
at least uh 140 paper uh used it of

41
00:01:34,400 --> 00:01:35,920
course it's probably not also exhaustive

42
00:01:35,920 --> 00:01:37,200
because we

43
00:01:37,200 --> 00:01:40,240
know list that by hand and more than a

44
00:01:40,240 --> 00:01:41,439
thousand

45
00:01:41,439 --> 00:01:43,680
paper cited the tool

46
00:01:43,680 --> 00:01:45,520
it's also very expressive

47
00:01:45,520 --> 00:01:48,079
and very efficient as usually on

48
00:01:48,079 --> 00:01:50,000
a run-in-the-mill case study it takes

49
00:01:50,000 --> 00:01:53,280
about a minute or so to to verify

50
00:01:53,280 --> 00:01:56,320
but of course it's not perfect uh as the

51
00:01:56,320 --> 00:01:58,719
problem of verifying cryptographic

52
00:01:58,719 --> 00:02:00,719
protocols is undecidable in general so

53
00:02:00,719 --> 00:02:03,520
the tool may not terminate and it may

54
00:02:03,520 --> 00:02:05,840
also yield some false attacks so we'll

55
00:02:05,840 --> 00:02:07,520
explain a bit more why

56
00:02:07,520 --> 00:02:08,560
later on

57
00:02:08,560 --> 00:02:10,720
and it's specifically the case in the

58
00:02:10,720 --> 00:02:12,720
class protocol that use global memory

59
00:02:12,720 --> 00:02:15,120
that we usually call stateful protocols

60
00:02:15,120 --> 00:02:17,760
where you need typically to store

61
00:02:17,760 --> 00:02:21,280
information through several sessions

62
00:02:21,280 --> 00:02:23,360
so uh

63
00:02:23,360 --> 00:02:25,680
i said it was efficient like a minute or

64
00:02:25,680 --> 00:02:26,640
so in

65
00:02:26,640 --> 00:02:29,280
small examples but in large case studies

66
00:02:29,280 --> 00:02:31,040
like in the noise protocol framework or

67
00:02:31,040 --> 00:02:34,640
tls on the paper in 2016 it can take up

68
00:02:34,640 --> 00:02:37,519
to days and even weeks to verify so

69
00:02:37,519 --> 00:02:41,120
there is room for improvement here

70
00:02:41,280 --> 00:02:44,640
so what does prove looks like as a user

71
00:02:44,640 --> 00:02:47,920
perspective so you start usually by

72
00:02:47,920 --> 00:02:49,760
expressing

73
00:02:49,760 --> 00:02:50,959
the cryptographic primitive you're going

74
00:02:50,959 --> 00:02:52,959
to use in your protocol and the

75
00:02:52,959 --> 00:02:54,640
algebraic properties using either

76
00:02:54,640 --> 00:02:57,440
equation or theory or rewriting systems

77
00:02:57,440 --> 00:02:59,920
and you express the behavior of the

78
00:02:59,920 --> 00:03:02,159
participants of your protocol through a

79
00:03:02,159 --> 00:03:04,319
process algebra comes from the applied

80
00:03:04,319 --> 00:03:06,400
pi calculus which is an extension of the

81
00:03:06,400 --> 00:03:09,680
pi calculus with cryptographic uh

82
00:03:09,680 --> 00:03:11,360
for crypto

83
00:03:11,360 --> 00:03:13,680
then you can express your security query

84
00:03:13,680 --> 00:03:15,760
uh here it's a correspondence career at

85
00:03:15,760 --> 00:03:17,680
the bottom and also the scenario in

86
00:03:17,680 --> 00:03:20,560
which you want everything to be verified

87
00:03:20,560 --> 00:03:22,640
so it can under embed the number of

88
00:03:22,640 --> 00:03:24,319
sessions hence usually the the

89
00:03:24,319 --> 00:03:26,879
undecidability

90
00:03:26,879 --> 00:03:29,040
so how does it work internally

91
00:03:29,040 --> 00:03:30,959
well probably if takes the the process

92
00:03:30,959 --> 00:03:32,879
the the process you gave as an input as

93
00:03:32,879 --> 00:03:34,879
well as the queries and it's uh

94
00:03:34,879 --> 00:03:36,560
translate that into

95
00:03:36,560 --> 00:03:38,799
a set of own clauses so on clause are

96
00:03:38,799 --> 00:03:41,680
typically a logical statement for the

97
00:03:41,680 --> 00:03:44,879
logic that says if my hypothesis holds

98
00:03:44,879 --> 00:03:47,120
then my conclusion necessarily

99
00:03:47,120 --> 00:03:49,599
is true

100
00:03:49,840 --> 00:03:52,080
then after you translated this protocol

101
00:03:52,080 --> 00:03:54,000
into a set of own clauses it applies a

102
00:03:54,000 --> 00:03:56,560
saturation which uh corresponds to

103
00:03:56,560 --> 00:04:00,239
taking two set two on clause from your

104
00:04:00,239 --> 00:04:02,480
current set of clause combine them

105
00:04:02,480 --> 00:04:05,120
through resolution and then add this

106
00:04:05,120 --> 00:04:07,280
newly generated clause into the set you

107
00:04:07,280 --> 00:04:09,519
repeat this process until a fixed point

108
00:04:09,519 --> 00:04:11,680
is reached and once your fixed point is

109
00:04:11,680 --> 00:04:13,599
reached this is the set that you obtain

110
00:04:13,599 --> 00:04:16,320
is the saturated set and then prove

111
00:04:16,320 --> 00:04:20,079
verifies the query on this set of uh

112
00:04:20,079 --> 00:04:22,560
saturated on classes

113
00:04:22,560 --> 00:04:24,639
so the limitation of poverif in

114
00:04:24,639 --> 00:04:26,160
particular the false attacks and

115
00:04:26,160 --> 00:04:29,199
non-termination comes mostly on the side

116
00:04:29,199 --> 00:04:30,720
of the false attacks from the

117
00:04:30,720 --> 00:04:32,720
translation from the protocol to the set

118
00:04:32,720 --> 00:04:35,680
of own clauses this is where we lose

119
00:04:35,680 --> 00:04:38,000
some precision from the semantic of the

120
00:04:38,000 --> 00:04:42,080
w model to what prove is able to prove

121
00:04:42,080 --> 00:04:44,800
and in terms of non-termination well

122
00:04:44,800 --> 00:04:47,360
most of it is due to the saturation of

123
00:04:47,360 --> 00:04:50,400
all classes which when it does dominate

124
00:04:50,400 --> 00:04:52,320
still takes about

125
00:04:52,320 --> 00:04:54,880
95 percent of the competition time of

126
00:04:54,880 --> 00:04:57,759
prove so i put 95 this is average case

127
00:04:57,759 --> 00:04:59,360
because of course it depends on your

128
00:04:59,360 --> 00:05:01,360
case study

129
00:05:01,360 --> 00:05:03,840
so how did we

130
00:05:03,840 --> 00:05:06,160
went along to tackle those two problems

131
00:05:06,160 --> 00:05:09,680
so first it was one of the

132
00:05:09,680 --> 00:05:11,919
main achievement of this paper

133
00:05:11,919 --> 00:05:14,560
is to introduce lemma's axiom and

134
00:05:14,560 --> 00:05:17,120
restriction inside prove so originally

135
00:05:17,120 --> 00:05:19,199
prove typically if you can you can write

136
00:05:19,199 --> 00:05:21,360
several queries if you want but it

137
00:05:21,360 --> 00:05:23,600
can tackle them completely independently

138
00:05:23,600 --> 00:05:25,360
okay here on the other hand when you

139
00:05:25,360 --> 00:05:27,199
write a lemma which which is also a

140
00:05:27,199 --> 00:05:29,919
correspondence query provif will first

141
00:05:29,919 --> 00:05:32,240
try to prove it as it's as if it was a

142
00:05:32,240 --> 00:05:33,600
normal query

143
00:05:33,600 --> 00:05:35,520
and then the new thing is that once he's

144
00:05:35,520 --> 00:05:38,400
able to prove it it will try to reuse

145
00:05:38,400 --> 00:05:40,639
this statement inside the proof

146
00:05:40,639 --> 00:05:43,039
of the next query of the next lemma or

147
00:05:43,039 --> 00:05:46,080
your main queries and it does that

148
00:05:46,080 --> 00:05:48,160
for every element that you

149
00:05:48,160 --> 00:05:50,160
put as input

150
00:05:50,160 --> 00:05:52,479
axioms are typically

151
00:05:52,479 --> 00:05:54,800
lemmas that prove does not try to prove

152
00:05:54,800 --> 00:05:57,520
so assume that it is true as an axiom so

153
00:05:57,520 --> 00:05:58,560
it's

154
00:05:58,560 --> 00:06:01,360
the user job to ensure that the axioms

155
00:06:01,360 --> 00:06:03,199
are correct and it's typically very

156
00:06:03,199 --> 00:06:05,680
useful if you have a hand proof on the

157
00:06:05,680 --> 00:06:07,199
axiom on your side

158
00:06:07,199 --> 00:06:08,000
or

159
00:06:08,000 --> 00:06:09,600
in particular to handle stateful

160
00:06:09,600 --> 00:06:10,880
protocol

161
00:06:10,880 --> 00:06:13,919
if you can re this is how we inject some

162
00:06:13,919 --> 00:06:15,600
some of the precision that were lost

163
00:06:15,600 --> 00:06:17,759
during the translation from the protocol

164
00:06:17,759 --> 00:06:19,520
to the own classes

165
00:06:19,520 --> 00:06:21,280
by adding

166
00:06:21,280 --> 00:06:22,560
axiom that

167
00:06:22,560 --> 00:06:24,000
fits the

168
00:06:24,000 --> 00:06:24,880
the

169
00:06:24,880 --> 00:06:28,400
the semantic of the delevio model

170
00:06:28,400 --> 00:06:29,840
and once all the

171
00:06:29,840 --> 00:06:32,240
all dilemmas are approved proverbif

172
00:06:32,240 --> 00:06:33,280
tried to

173
00:06:33,280 --> 00:06:35,199
prove the main query using all the

174
00:06:35,199 --> 00:06:36,720
lemmas and all the actions that he

175
00:06:36,720 --> 00:06:38,560
managed to under so those lemmas are

176
00:06:38,560 --> 00:06:40,560
typically applied within the saturation

177
00:06:40,560 --> 00:06:41,680
procedure

178
00:06:41,680 --> 00:06:43,520
that i mentioned earlier

179
00:06:43,520 --> 00:06:45,440
so that was the main

180
00:06:45,440 --> 00:06:47,120
one of the main work that we in this

181
00:06:47,120 --> 00:06:49,759
paper but we kind of didn't stop there

182
00:06:49,759 --> 00:06:52,240
because as i mentioned prove is 20 years

183
00:06:52,240 --> 00:06:53,120
old

184
00:06:53,120 --> 00:06:55,280
and some part of the algorithm that were

185
00:06:55,280 --> 00:06:56,720
implemented

186
00:06:56,720 --> 00:06:57,440
well

187
00:06:57,440 --> 00:06:59,360
are 20 years old and in the meantime

188
00:06:59,360 --> 00:07:02,000
people worked on own classes and so

189
00:07:02,000 --> 00:07:04,400
there was a bunch of literature that we

190
00:07:04,400 --> 00:07:06,560
looked at and was quite useful

191
00:07:06,560 --> 00:07:08,880
uh to see how can we improve the tool

192
00:07:08,880 --> 00:07:10,960
make it more efficient and so we went

193
00:07:10,960 --> 00:07:14,080
over the full code of prove and

194
00:07:14,080 --> 00:07:16,080
improved many aspects of it whether from

195
00:07:16,080 --> 00:07:17,680
the simplification of clause the

196
00:07:17,680 --> 00:07:19,840
subsumption of clauses the translation

197
00:07:19,840 --> 00:07:22,319
from process to to clauses also the

198
00:07:22,319 --> 00:07:24,080
resolution the resaturation procedure

199
00:07:24,080 --> 00:07:27,120
and so on so i will show you in a later

200
00:07:27,120 --> 00:07:29,840
slide how those improvements impacted

201
00:07:29,840 --> 00:07:31,840
the verification time and are also going

202
00:07:31,840 --> 00:07:33,039
to describe a bit more about this

203
00:07:33,039 --> 00:07:34,479
assumption

204
00:07:34,479 --> 00:07:37,120
but we also uh improve the exclusivity

205
00:07:37,120 --> 00:07:40,000
of by first adding natural numbers so

206
00:07:40,000 --> 00:07:42,160
you can actually now

207
00:07:42,160 --> 00:07:44,800
use natural numbers and do operations

208
00:07:44,800 --> 00:07:47,759
like plus and and subtraction that is

209
00:07:47,759 --> 00:07:49,520
very useful to describe for import

210
00:07:49,520 --> 00:07:51,680
counters that are

211
00:07:51,680 --> 00:07:53,759
used quite often in

212
00:07:53,759 --> 00:07:56,960
in stateful protocols of course we don't

213
00:07:56,960 --> 00:07:58,800
allow everything about natural numbers

214
00:07:58,800 --> 00:07:59,840
so you're not allowed to do

215
00:07:59,840 --> 00:08:02,879
multiplication on division but still

216
00:08:02,879 --> 00:08:05,840
we also added temporal queries and

217
00:08:05,840 --> 00:08:07,199
improve the way

218
00:08:07,199 --> 00:08:09,840
verifies them to further reduce the

219
00:08:09,840 --> 00:08:13,199
number of false attacks

220
00:08:13,199 --> 00:08:14,960
so

221
00:08:14,960 --> 00:08:16,720
let me talk a bit more about the

222
00:08:16,720 --> 00:08:18,560
subsumption of clauses so as i mentioned

223
00:08:18,560 --> 00:08:20,400
in the saturation

224
00:08:20,400 --> 00:08:22,879
proveref takes two close combine them to

225
00:08:22,879 --> 00:08:25,120
resolution and then adds the new clause

226
00:08:25,120 --> 00:08:26,960
inside the current set in the repeats

227
00:08:26,960 --> 00:08:28,879
but if you do that

228
00:08:28,879 --> 00:08:29,919
naively

229
00:08:29,919 --> 00:08:31,840
then it will never terminate it will

230
00:08:31,840 --> 00:08:34,159
always go into a loop so one of the main

231
00:08:34,159 --> 00:08:36,000
things that has done that before adding

232
00:08:36,000 --> 00:08:38,479
this newly generated clause into the set

233
00:08:38,479 --> 00:08:41,120
it will try to see if

234
00:08:41,120 --> 00:08:43,679
this clause is not already implied by

235
00:08:43,679 --> 00:08:46,240
another existing one or zoom zoomed

236
00:08:46,240 --> 00:08:48,000
so a bit more formally we say that a

237
00:08:48,000 --> 00:08:51,519
clause h gives c subsumes uh another one

238
00:08:51,519 --> 00:08:53,279
h prime c prime

239
00:08:53,279 --> 00:08:56,560
if this later close is an instance of

240
00:08:56,560 --> 00:08:58,320
the first one

241
00:08:58,320 --> 00:09:01,360
so checking that's a closer to another

242
00:09:01,360 --> 00:09:04,399
it's an np-hal problem so it's

243
00:09:04,399 --> 00:09:06,480
it's well it's costly in terms of

244
00:09:06,480 --> 00:09:08,240
verifying and the problem is that we do

245
00:09:08,240 --> 00:09:09,040
that

246
00:09:09,040 --> 00:09:11,040
for every clause that are generated and

247
00:09:11,040 --> 00:09:13,040
even when the clause is generating and

248
00:09:13,040 --> 00:09:15,440
we need to add it we also try to remove

249
00:09:15,440 --> 00:09:18,080
all the clause from the current sets of

250
00:09:18,080 --> 00:09:20,320
on clauses that are subsumed by the new

251
00:09:20,320 --> 00:09:22,720
one so we do this operation

252
00:09:22,720 --> 00:09:25,760
often maybe really often and in fact

253
00:09:25,760 --> 00:09:26,560
just

254
00:09:26,560 --> 00:09:29,519
the substantial function correspond to

255
00:09:29,519 --> 00:09:31,279
about eighty percent of the time in

256
00:09:31,279 --> 00:09:34,160
average of uh

257
00:09:34,160 --> 00:09:35,920
so what we looked at is we look at a

258
00:09:35,920 --> 00:09:38,959
paper of uh by truth in 2013 that

259
00:09:38,959 --> 00:09:40,480
introduced the notion of future vertex

260
00:09:40,480 --> 00:09:42,560
indexing and here the idea is it's

261
00:09:42,560 --> 00:09:44,080
fairly simple let's say okay instead of

262
00:09:44,080 --> 00:09:46,880
applying always the sub function first

263
00:09:46,880 --> 00:09:48,560
let's try to find

264
00:09:48,560 --> 00:09:52,240
a small function f that uh compute some

265
00:09:52,240 --> 00:09:54,160
element on your clause like for example

266
00:09:54,160 --> 00:09:56,160
the number of symbols in it

267
00:09:56,160 --> 00:09:58,160
and these functions should satisfy the

268
00:09:58,160 --> 00:10:01,040
following property it says okay if h uh

269
00:10:01,040 --> 00:10:04,160
the clause hc subsumes the close h prime

270
00:10:04,160 --> 00:10:05,279
c prime

271
00:10:05,279 --> 00:10:06,240
then

272
00:10:06,240 --> 00:10:09,279
the application of f on hc should be

273
00:10:09,279 --> 00:10:11,519
smaller than the application of f on h

274
00:10:11,519 --> 00:10:14,399
prime c prime and so what we can do now

275
00:10:14,399 --> 00:10:15,839
is that instead of always applying the

276
00:10:15,839 --> 00:10:18,480
npr problem on it is that we first

277
00:10:18,480 --> 00:10:19,600
compute

278
00:10:19,600 --> 00:10:22,399
on the on clauses the function f check

279
00:10:22,399 --> 00:10:24,480
if the equality holds if it doesn't hold

280
00:10:24,480 --> 00:10:26,720
then we don't even need to apply the npr

281
00:10:26,720 --> 00:10:28,720
problem because we know that the

282
00:10:28,720 --> 00:10:30,839
test will always

283
00:10:30,839 --> 00:10:33,839
fail and just this simple idea in fact

284
00:10:33,839 --> 00:10:36,240
once you organize your clothes uh as a

285
00:10:36,240 --> 00:10:38,959
tree index by the feature value provide

286
00:10:38,959 --> 00:10:41,279
the use speed up in prove

287
00:10:41,279 --> 00:10:43,680
so as i mentioned that i would give you

288
00:10:43,680 --> 00:10:46,640
a bit of an idea of how the different uh

289
00:10:46,640 --> 00:10:49,519
improvements fare in in practice so we

290
00:10:49,519 --> 00:10:51,760
took a case study from the literature so

291
00:10:51,760 --> 00:10:53,760
it's not it's really cases from

292
00:10:53,760 --> 00:10:56,399
different papers that we knew took a

293
00:10:56,399 --> 00:10:58,959
long time according to the author

294
00:10:58,959 --> 00:11:01,360
and notice that the

295
00:11:01,360 --> 00:11:03,839
the scale here is logarithmic

296
00:11:03,839 --> 00:11:07,519
so for instance on noise so here a b c

297
00:11:07,519 --> 00:11:08,880
and d is the different optimization that

298
00:11:08,880 --> 00:11:11,279
we did and so every time

299
00:11:11,279 --> 00:11:13,200
the the scale say that at the beginning

300
00:11:13,200 --> 00:11:16,480
it's we only use a then it's the b it's

301
00:11:16,480 --> 00:11:18,240
meaning that we use the optimization a

302
00:11:18,240 --> 00:11:20,320
and b and so on and so forth okay

303
00:11:20,320 --> 00:11:21,839
and so for instance in the noise

304
00:11:21,839 --> 00:11:24,240
framework protocol we went from

305
00:11:24,240 --> 00:11:26,240
one week of verification time to 20

306
00:11:26,240 --> 00:11:27,360
minutes

307
00:11:27,360 --> 00:11:30,480
so it's about 500 times speed up

308
00:11:30,480 --> 00:11:34,000
notice that all optimization do not

309
00:11:34,000 --> 00:11:36,079
scale the same way they always optimize

310
00:11:36,079 --> 00:11:37,600
they always make it faster but they do

311
00:11:37,600 --> 00:11:39,200
not always scale the same way depending

312
00:11:39,200 --> 00:11:42,399
on the case study so for example foreign

313
00:11:42,399 --> 00:11:46,079
protocol which uh yelled to a 900 times

314
00:11:46,079 --> 00:11:50,479
faster speed up of verification time

315
00:11:50,560 --> 00:11:52,000
most of the

316
00:11:52,000 --> 00:11:55,360
speed gain were from the translation of

317
00:11:55,360 --> 00:11:59,279
protocol to own classes

318
00:12:01,120 --> 00:12:04,560
so to validate our the exclusivity

319
00:12:04,560 --> 00:12:07,519
results we also looked at a paper from

320
00:12:07,519 --> 00:12:08,880
the literature

321
00:12:08,880 --> 00:12:09,680
and

322
00:12:09,680 --> 00:12:11,839
look at all the files that were given

323
00:12:11,839 --> 00:12:14,480
some query where prove yield cannot be

324
00:12:14,480 --> 00:12:16,000
proved meaning it was not able to say

325
00:12:16,000 --> 00:12:18,240
yes or no to the to the feature do the

326
00:12:18,240 --> 00:12:20,639
query but we also look at unpublished

327
00:12:20,639 --> 00:12:23,040
protocol so why unpublish because well

328
00:12:23,040 --> 00:12:25,600
usually we tend to publish

329
00:12:25,600 --> 00:12:29,120
uh protocols that are verified by prove

330
00:12:29,120 --> 00:12:31,839
and people tend to not publish their

331
00:12:31,839 --> 00:12:33,360
file that doesn't work

332
00:12:33,360 --> 00:12:34,880
on the other hand what they do which is

333
00:12:34,880 --> 00:12:36,959
very nice for us is that they send us

334
00:12:36,959 --> 00:12:38,480
their files saying that oh i don't

335
00:12:38,480 --> 00:12:40,160
manage to make my protocol works who is

336
00:12:40,160 --> 00:12:42,639
prove can you help us so we have a huge

337
00:12:42,639 --> 00:12:45,279
bunch of uh uh

338
00:12:45,279 --> 00:12:46,480
examples

339
00:12:46,480 --> 00:12:49,279
uh where the probably for a nullable to

340
00:12:49,279 --> 00:12:50,399
prove

341
00:12:50,399 --> 00:12:53,200
and we also apply our results on this by

342
00:12:53,200 --> 00:12:56,000
activating activating uh some of the new

343
00:12:56,000 --> 00:12:57,680
feature that we introduced

344
00:12:57,680 --> 00:13:00,959
and in over uh in total we on the

345
00:13:00,959 --> 00:13:01,920
one we

346
00:13:01,920 --> 00:13:05,440
tried we gained about 40 to 50

347
00:13:05,440 --> 00:13:07,120
new queries that were

348
00:13:07,120 --> 00:13:09,839
proved either failed to prove or was not

349
00:13:09,839 --> 00:13:11,519
terminating and now was

350
00:13:11,519 --> 00:13:13,200
able to give a positive or a negative

351
00:13:13,200 --> 00:13:14,720
result

352
00:13:14,720 --> 00:13:17,360
more recently we also applied uh use

353
00:13:17,360 --> 00:13:19,519
prove in a

354
00:13:19,519 --> 00:13:22,320
big case study of tls plus an extension

355
00:13:22,320 --> 00:13:23,519
of

356
00:13:23,519 --> 00:13:25,760
of encrypted clientele where we prove

357
00:13:25,760 --> 00:13:27,760
privacy confidentiality authentication

358
00:13:27,760 --> 00:13:29,600
integrity goals

359
00:13:29,600 --> 00:13:31,120
so that paper will

360
00:13:31,120 --> 00:13:34,320
will be published this year

361
00:13:34,320 --> 00:13:36,800
and on this one we heavily relied on the

362
00:13:36,800 --> 00:13:39,839
axioms and lemmas that i i mentioned

363
00:13:39,839 --> 00:13:42,079
so what's next for previous

364
00:13:42,079 --> 00:13:44,639
so that was the state let's say

365
00:13:44,639 --> 00:13:46,880
of prof2

366
00:13:46,880 --> 00:13:49,760
and with this paper we definitely

367
00:13:49,760 --> 00:13:51,600
did much better in terms of explosivity

368
00:13:51,600 --> 00:13:53,760
and efficiency so

369
00:13:53,760 --> 00:13:56,560
i didn't put completely remove the the

370
00:13:56,560 --> 00:13:58,160
gray it's still great because of course

371
00:13:58,160 --> 00:13:59,920
it's undecidable so

372
00:13:59,920 --> 00:14:01,440
there will always be a case where it

373
00:14:01,440 --> 00:14:02,880
does not terminate or use of false

374
00:14:02,880 --> 00:14:05,120
attacks but we still do much better in

375
00:14:05,120 --> 00:14:07,360
terms of expressivity

376
00:14:07,360 --> 00:14:09,680
however uh there's still some

377
00:14:09,680 --> 00:14:11,360
things that we're still not able to do

378
00:14:11,360 --> 00:14:12,959
and we're working on it like for example

379
00:14:12,959 --> 00:14:14,720
some cryptographic primitives are

380
00:14:14,720 --> 00:14:16,560
missing uh

381
00:14:16,560 --> 00:14:18,959
and i'm thinking of primitive using

382
00:14:18,959 --> 00:14:21,040
ability groups xor

383
00:14:21,040 --> 00:14:23,360
and also in term of efficiency now that

384
00:14:23,360 --> 00:14:26,399
probably generates closes much faster

385
00:14:26,399 --> 00:14:28,959
we ended up having not a time problem

386
00:14:28,959 --> 00:14:31,760
but a memory problem and on

387
00:14:31,760 --> 00:14:35,120
on the example of tls with ech

388
00:14:35,120 --> 00:14:37,040
we kind of blow up the memory of our

389
00:14:37,040 --> 00:14:39,920
server after 200 and 300 gigabytes

390
00:14:39,920 --> 00:14:42,000
server was like yup stop by stop so we

391
00:14:42,000 --> 00:14:44,480
are currently working on to make this a

392
00:14:44,480 --> 00:14:46,000
bit better

393
00:14:46,000 --> 00:14:47,360
and finally

394
00:14:47,360 --> 00:14:50,000
i put now the easy to use in orange

395
00:14:50,000 --> 00:14:52,639
because now that we have many feature

396
00:14:52,639 --> 00:14:54,000
additional ones

397
00:14:54,000 --> 00:14:56,240
it's a bit harder to

398
00:14:56,240 --> 00:14:58,320
as a user to understand how to properly

399
00:14:58,320 --> 00:15:00,639
use dilemmas and axiom which feature to

400
00:15:00,639 --> 00:15:02,160
activate or not so we are trying to see

401
00:15:02,160 --> 00:15:03,360
how we can

402
00:15:03,360 --> 00:15:06,480
uh more automatically detect or guide

403
00:15:06,480 --> 00:15:08,720
the user uh to

404
00:15:08,720 --> 00:15:11,839
which feature to use in which

405
00:15:11,839 --> 00:15:13,199
thank you very much for your attention

406
00:15:13,199 --> 00:15:15,680
if if you have any question

407
00:15:15,680 --> 00:15:17,279
go ahead and feel free to visit the

408
00:15:17,279 --> 00:15:19,680
website of the tool uh there's a mailing

409
00:15:19,680 --> 00:15:21,279
list and

410
00:15:21,279 --> 00:15:23,440
feel free to send us um we are very

411
00:15:23,440 --> 00:15:25,440
happy if you send us all your files that

412
00:15:25,440 --> 00:15:29,760
do not work for us it's gold so go ahead

413
00:15:29,930 --> 00:15:36,240
[Applause]

414
00:15:36,240 --> 00:15:38,240
awesome thank you very much vincent for

415
00:15:38,240 --> 00:15:39,600
your awesome

416
00:15:39,600 --> 00:15:41,279
presentation and also the work i know

417
00:15:41,279 --> 00:15:43,360
again the workload is huge

418
00:15:43,360 --> 00:15:44,720
so uh let's

419
00:15:44,720 --> 00:15:49,360
take questions from the on-site audience

420
00:15:50,160 --> 00:15:51,519
fantastic tool

421
00:15:51,519 --> 00:15:52,880
i actually wanted to ask whether you

422
00:15:52,880 --> 00:15:54,639
could give us any intuition for the

423
00:15:54,639 --> 00:15:56,560
definition of this feature function that

424
00:15:56,560 --> 00:15:58,560
allows you to accelerate subsumption

425
00:15:58,560 --> 00:16:00,480
checks

426
00:16:00,480 --> 00:16:02,000
the feature the

427
00:16:02,000 --> 00:16:03,920
the feature functions yeah exactly you

428
00:16:03,920 --> 00:16:04,959
said the condition that the function

429
00:16:04,959 --> 00:16:06,639
used to meet but what features do you

430
00:16:06,639 --> 00:16:09,680
actually use oh so

431
00:16:09,680 --> 00:16:10,959
in terms of feature you have for

432
00:16:10,959 --> 00:16:13,120
instance by i mentioned the number of

433
00:16:13,120 --> 00:16:15,440
symbols so you can for each symbols you

434
00:16:15,440 --> 00:16:16,880
can count the number of symbols in one

435
00:16:16,880 --> 00:16:18,959
clause and sub on the other clause and

436
00:16:18,959 --> 00:16:21,600
typically if the the one that you try to

437
00:16:21,600 --> 00:16:23,360
subsume is smaller than the one that is

438
00:16:23,360 --> 00:16:25,680
supposed to be do the subsuming then you

439
00:16:25,680 --> 00:16:28,079
already know that here it's not working

440
00:16:28,079 --> 00:16:30,399
you can do the same with the depth of

441
00:16:30,399 --> 00:16:32,959
the symbol within the terms

442
00:16:32,959 --> 00:16:34,839
uh you also

443
00:16:34,839 --> 00:16:37,839
have the depth in term of inside the

444
00:16:37,839 --> 00:16:39,920
terms but also their

445
00:16:39,920 --> 00:16:42,320
the the white the placement of the

446
00:16:42,320 --> 00:16:44,639
symbol within the within the terms

447
00:16:44,639 --> 00:16:46,639
themselves so it's all those kind of a

448
00:16:46,639 --> 00:16:48,079
small

449
00:16:48,079 --> 00:16:49,759
small property they can easily compute

450
00:16:49,759 --> 00:16:53,120
by just doing one uh linear or going

451
00:16:53,120 --> 00:16:55,199
linearly through your close so it's much

452
00:16:55,199 --> 00:16:58,639
much faster got you thank you

453
00:16:58,639 --> 00:17:00,480
awesome thank you very much uh in the

454
00:17:00,480 --> 00:17:01,839
truth of time or not taking any more

455
00:17:01,839 --> 00:17:02,839
questions

456
00:17:02,839 --> 00:17:05,520
um let's let's welcome

457
00:17:05,520 --> 00:17:07,760
well let's thank the speaker and

458
00:17:07,760 --> 00:17:09,199
get ready for the next talk thank you

459
00:17:09,199 --> 00:17:12,360
very much

