1
00:00:02,720 --> 00:00:03,840
so thank you dominic for the

2
00:00:03,840 --> 00:00:05,680
introduction today i'm here to discuss

3
00:00:05,680 --> 00:00:08,240
about why crypto detectors pay

4
00:00:08,240 --> 00:00:09,840
now we all know that secret matters

5
00:00:09,840 --> 00:00:11,840
that's why we are here and we generally

6
00:00:11,840 --> 00:00:14,400
depend on cryptographic apis to

7
00:00:14,400 --> 00:00:15,920
implement our security functionalities

8
00:00:15,920 --> 00:00:17,440
because it's otherwise really easy to

9
00:00:17,440 --> 00:00:18,960
mess things up

10
00:00:18,960 --> 00:00:20,880
now when you talk about cryptographic

11
00:00:20,880 --> 00:00:23,199
apis there are a lot of them and they

12
00:00:23,199 --> 00:00:25,760
can confuse an average developer because

13
00:00:25,760 --> 00:00:27,279
they can be diverse and they can be

14
00:00:27,279 --> 00:00:28,320
complex

15
00:00:28,320 --> 00:00:30,880
and as we have seen in previous works

16
00:00:30,880 --> 00:00:33,760
it's really easy to mess things up when

17
00:00:33,760 --> 00:00:35,520
you are trying to use cryptographic apis

18
00:00:35,520 --> 00:00:36,800
because if you don't know what you're

19
00:00:36,800 --> 00:00:37,680
doing

20
00:00:37,680 --> 00:00:38,879
you might actually introduce more

21
00:00:38,879 --> 00:00:40,879
vulnerabilities in your code

22
00:00:40,879 --> 00:00:43,440
thankfully we have cryptographic api

23
00:00:43,440 --> 00:00:45,520
misuse detectors or in short crypto

24
00:00:45,520 --> 00:00:47,280
detectors to the rescue

25
00:00:47,280 --> 00:00:49,440
um so for example coverage we probably

26
00:00:49,440 --> 00:00:52,079
have heard about it is being in active

27
00:00:52,079 --> 00:00:54,399
use by at least 38 000 open source

28
00:00:54,399 --> 00:00:56,559
developers out there

29
00:00:56,559 --> 00:00:58,320
and surely they work because we have

30
00:00:58,320 --> 00:01:01,840
benchmarks so if equipped director says

31
00:01:01,840 --> 00:01:03,680
that i have zero percent false positive

32
00:01:03,680 --> 00:01:05,119
rate and hundred percent true positive

33
00:01:05,119 --> 00:01:06,560
rate against these benchmarks that's

34
00:01:06,560 --> 00:01:08,640
good so we can all live happily ever

35
00:01:08,640 --> 00:01:10,400
after

36
00:01:10,400 --> 00:01:11,200
but

37
00:01:11,200 --> 00:01:13,280
that's not the case though we don't

38
00:01:13,280 --> 00:01:15,360
really know what's going on if we only

39
00:01:15,360 --> 00:01:17,439
rely on benchmarks

40
00:01:17,439 --> 00:01:18,880
here's the reason why

41
00:01:18,880 --> 00:01:20,720
sometimes with this um cryptographic

42
00:01:20,720 --> 00:01:21,920
apis

43
00:01:21,920 --> 00:01:24,000
um sorry um some of these benchmarks can

44
00:01:24,000 --> 00:01:26,159
simply be incomplete or incorrect so for

45
00:01:26,159 --> 00:01:28,320
example the os benchmark

46
00:01:28,320 --> 00:01:31,759
included des ecb as a secure protocol

47
00:01:31,759 --> 00:01:34,320
till march 2020 which until it was

48
00:01:34,320 --> 00:01:36,159
reported by an independent developer it

49
00:01:36,159 --> 00:01:38,479
it was considered secure

50
00:01:38,479 --> 00:01:40,320
so there are several factors at play

51
00:01:40,320 --> 00:01:43,920
when we are trying to use these apis or

52
00:01:43,920 --> 00:01:45,360
trying to rely on these benchmarks the

53
00:01:45,360 --> 00:01:46,720
first one is that

54
00:01:46,720 --> 00:01:49,759
cryptographic apis may include may adopt

55
00:01:49,759 --> 00:01:52,159
non-intuitive design choices

56
00:01:52,159 --> 00:01:54,320
so we all know that aes is good for

57
00:01:54,320 --> 00:01:57,520
security but in java if you only specify

58
00:01:57,520 --> 00:02:00,320
aes without specifying the mode or the

59
00:02:00,320 --> 00:02:01,360
padding

60
00:02:01,360 --> 00:02:04,159
it will default to usb mode in java

61
00:02:04,159 --> 00:02:05,759
which is bad

62
00:02:05,759 --> 00:02:06,880
next

63
00:02:06,880 --> 00:02:08,720
cryptographic api usage patterns may

64
00:02:08,720 --> 00:02:10,800
vary so as you can see the two different

65
00:02:10,800 --> 00:02:12,800
patterns they are expressing the same

66
00:02:12,800 --> 00:02:13,599
thing

67
00:02:13,599 --> 00:02:16,080
but they are using different syntax and

68
00:02:16,080 --> 00:02:17,920
requires different types of techniques

69
00:02:17,920 --> 00:02:20,879
to analyze and to detect

70
00:02:20,879 --> 00:02:22,959
finally the skill and intention of

71
00:02:22,959 --> 00:02:25,440
cryptographic api user may vary and

72
00:02:25,440 --> 00:02:27,599
depending on how skilled they are or

73
00:02:27,599 --> 00:02:29,680
what their intention is they can express

74
00:02:29,680 --> 00:02:31,519
the same types of cryptographic api

75
00:02:31,519 --> 00:02:34,000
misuse in different ways we construct

76
00:02:34,000 --> 00:02:36,000
three different types of users based on

77
00:02:36,000 --> 00:02:37,360
their skills and intentions in the

78
00:02:37,360 --> 00:02:39,760
threat model the first one is a benign

79
00:02:39,760 --> 00:02:42,080
developer he really doesn't know too

80
00:02:42,080 --> 00:02:43,599
much about cryptographic apis and he

81
00:02:43,599 --> 00:02:45,040
will probably misuse this cryptographic

82
00:02:45,040 --> 00:02:47,840
apis so for example he will probably

83
00:02:47,840 --> 00:02:50,400
write aes in a small case

84
00:02:50,400 --> 00:02:52,640
which is not regular in terms of

85
00:02:52,640 --> 00:02:54,400
convention but still regardless is

86
00:02:54,400 --> 00:02:57,040
acceptable in java and of course it will

87
00:02:57,040 --> 00:03:00,319
default to easily mode next we have the

88
00:03:00,319 --> 00:03:02,400
b9 developer with the harmful fix our

89
00:03:02,400 --> 00:03:04,720
thread model to actor 2

90
00:03:04,720 --> 00:03:06,480
who is trying to rely on crypto

91
00:03:06,480 --> 00:03:08,800
detectors and trying to fix things but

92
00:03:08,800 --> 00:03:10,400
really doesn't know too much about them

93
00:03:10,400 --> 00:03:12,400
in any way

94
00:03:12,400 --> 00:03:13,440
so

95
00:03:13,440 --> 00:03:14,640
in this case he will look at the

96
00:03:14,640 --> 00:03:16,560
documentation notice that the convention

97
00:03:16,560 --> 00:03:18,800
is to use upper case and try to emulate

98
00:03:18,800 --> 00:03:19,680
that

99
00:03:19,680 --> 00:03:22,239
but essentially what he's doing is that

100
00:03:22,239 --> 00:03:24,080
he's not fixing the vulnerability he's

101
00:03:24,080 --> 00:03:25,760
just removing the error

102
00:03:25,760 --> 00:03:28,319
finally we have our thread model um

103
00:03:28,319 --> 00:03:29,519
actual tree

104
00:03:29,519 --> 00:03:32,480
evasive developer with a harmful fix and

105
00:03:32,480 --> 00:03:34,000
we all know about those kind of

106
00:03:34,000 --> 00:03:36,159
developers who are trying to

107
00:03:36,159 --> 00:03:37,920
basically shoot themselves on their food

108
00:03:37,920 --> 00:03:39,760
they are trying to compromise um their

109
00:03:39,760 --> 00:03:41,599
own apps because they don't have the

110
00:03:41,599 --> 00:03:43,840
intention to fix things or they just

111
00:03:43,840 --> 00:03:46,080
want to do a quick job at their work and

112
00:03:46,080 --> 00:03:47,599
be done with that so they're

113
00:03:47,599 --> 00:03:49,519
purposefully trying to evade crypto

114
00:03:49,519 --> 00:03:51,680
detectors reports

115
00:03:51,680 --> 00:03:54,799
so continuing with the previous example

116
00:03:54,799 --> 00:03:57,200
a t3 developer or evasive developer

117
00:03:57,200 --> 00:03:59,519
might try to do something like this

118
00:03:59,519 --> 00:04:01,439
use method training

119
00:04:01,439 --> 00:04:04,159
so what we really need is a systematic

120
00:04:04,159 --> 00:04:06,239
approach that can handle the

121
00:04:06,239 --> 00:04:07,920
complexities and diversities of the

122
00:04:07,920 --> 00:04:10,319
cryptographic apis as well as create

123
00:04:10,319 --> 00:04:12,480
realistic misuse cases

124
00:04:12,480 --> 00:04:14,239
that can help us evolve descriptive

125
00:04:14,239 --> 00:04:16,720
detectors because if we

126
00:04:16,720 --> 00:04:19,040
if we try to um create or recreate this

127
00:04:19,040 --> 00:04:20,320
realistic business cases we have to

128
00:04:20,320 --> 00:04:22,560
represent the expressiveness of these

129
00:04:22,560 --> 00:04:24,240
three different types of developers the

130
00:04:24,240 --> 00:04:27,360
t1 t2 and t3 the b9 developers who might

131
00:04:27,360 --> 00:04:29,440
try to fix things erroneously as well as

132
00:04:29,440 --> 00:04:31,199
evasive developer

133
00:04:31,199 --> 00:04:34,080
so in our work mask what you essentially

134
00:04:34,080 --> 00:04:36,160
do is really simple

135
00:04:36,160 --> 00:04:36,960
we

136
00:04:36,960 --> 00:04:39,919
mutate these misuse cases we put them or

137
00:04:39,919 --> 00:04:42,320
sit them in open source applications we

138
00:04:42,320 --> 00:04:43,759
run crypto directors on these

139
00:04:43,759 --> 00:04:46,000
applications and then see whether they

140
00:04:46,000 --> 00:04:48,240
can kill or not kill those mutants and

141
00:04:48,240 --> 00:04:50,800
based on that we can detect design or

142
00:04:50,800 --> 00:04:52,400
implementation flaws

143
00:04:52,400 --> 00:04:54,400
but that requires answering two

144
00:04:54,400 --> 00:04:56,160
different questions the first one is

145
00:04:56,160 --> 00:04:58,000
what are the misuse and the second one

146
00:04:58,000 --> 00:04:59,520
is how do we actually mutate those

147
00:04:59,520 --> 00:05:00,960
misuse cases

148
00:05:00,960 --> 00:05:03,199
to answer that we performed a systematic

149
00:05:03,199 --> 00:05:05,759
data-driven taxonomy generation approach

150
00:05:05,759 --> 00:05:07,759
and what we did

151
00:05:07,759 --> 00:05:10,639
is basically we went through

152
00:05:10,639 --> 00:05:12,880
economic and industry sources of misuse

153
00:05:12,880 --> 00:05:15,440
from from the last 20 years

154
00:05:15,440 --> 00:05:16,960
and as you can see that's the taxonomy

155
00:05:16,960 --> 00:05:19,600
that we have created we invested two

156
00:05:19,600 --> 00:05:21,440
percent months to extract all these

157
00:05:21,440 --> 00:05:24,240
misuse from different sources we categor

158
00:05:24,240 --> 00:05:26,800
catalogued them and we found 105 crypto

159
00:05:26,800 --> 00:05:29,039
apm issues we also symmetrically

160
00:05:29,039 --> 00:05:30,560
clustered them based on their cementing

161
00:05:30,560 --> 00:05:31,919
meanings

162
00:05:31,919 --> 00:05:34,639
now that we have that this misuse

163
00:05:34,639 --> 00:05:36,720
we looked at the java cryptographic

164
00:05:36,720 --> 00:05:38,400
architecture to understand what the

165
00:05:38,400 --> 00:05:40,000
design principles are and what the

166
00:05:40,000 --> 00:05:42,080
expected usage patterns are

167
00:05:42,080 --> 00:05:44,240
based on those we created usage-based

168
00:05:44,240 --> 00:05:45,759
mutation operator

169
00:05:45,759 --> 00:05:47,520
in addition to that we also created

170
00:05:47,520 --> 00:05:49,039
mutation scopes

171
00:05:49,039 --> 00:05:51,600
methodoscope is essentially putting this

172
00:05:51,600 --> 00:05:53,840
mutations or mutated misuse cases at

173
00:05:53,840 --> 00:05:55,199
different locations to understand

174
00:05:55,199 --> 00:05:56,880
whether they can be reached

175
00:05:56,880 --> 00:05:59,120
by these crypto detectors

176
00:05:59,120 --> 00:06:01,120
so as i previously explained the rest is

177
00:06:01,120 --> 00:06:03,360
really simple we then

178
00:06:03,360 --> 00:06:05,680
we then test these mutated applications

179
00:06:05,680 --> 00:06:07,840
using the crypto detectors to see if

180
00:06:07,840 --> 00:06:09,759
they're killed and if they're not

181
00:06:09,759 --> 00:06:12,720
we go more in depth to understand what's

182
00:06:12,720 --> 00:06:14,880
going on and we

183
00:06:14,880 --> 00:06:17,440
so we tried we applied this approach on

184
00:06:17,440 --> 00:06:19,120
nine cubic detectors you probably know

185
00:06:19,120 --> 00:06:20,720
about some of them coverity github code

186
00:06:20,720 --> 00:06:22,639
scan cryptoguard

187
00:06:22,639 --> 00:06:25,840
and we found 19 previously unknown flaws

188
00:06:25,840 --> 00:06:27,520
in these detectors

189
00:06:27,520 --> 00:06:30,160
based on their properties we created

190
00:06:30,160 --> 00:06:31,680
five floor classes

191
00:06:31,680 --> 00:06:33,840
and we noticed that some of these flaws

192
00:06:33,840 --> 00:06:36,240
are not specifically tied to specific

193
00:06:36,240 --> 00:06:38,240
apis but more

194
00:06:38,240 --> 00:06:39,759
more likely they are

195
00:06:39,759 --> 00:06:41,440
based on the usage patterns so as you

196
00:06:41,440 --> 00:06:42,479
can see

197
00:06:42,479 --> 00:06:44,080
for the flow class one and two they are

198
00:06:44,080 --> 00:06:45,840
about the strings and in kind of five

199
00:06:45,840 --> 00:06:48,319
resolution the examples are for cipher

200
00:06:48,319 --> 00:06:50,479
but similar flaws can be observed for

201
00:06:50,479 --> 00:06:52,319
other similar crypto apis such as

202
00:06:52,319 --> 00:06:56,000
message digest as well as ssl context

203
00:06:56,000 --> 00:06:57,680
in addition to these

204
00:06:57,680 --> 00:06:59,440
five floor classes we found another

205
00:06:59,440 --> 00:07:02,000
flock of zero which is about incorrect

206
00:07:02,000 --> 00:07:03,840
analysis of

207
00:07:03,840 --> 00:07:06,639
the input right so what we found is that

208
00:07:06,639 --> 00:07:08,800
many of the applications

209
00:07:08,800 --> 00:07:10,800
were not being properly analyzed or they

210
00:07:10,800 --> 00:07:11,919
were simply not being analyzed

211
00:07:11,919 --> 00:07:14,400
completely and surprisingly we found

212
00:07:14,400 --> 00:07:15,840
some crypto detectors which were

213
00:07:15,840 --> 00:07:18,160
ignoring any class which had dot android

214
00:07:18,160 --> 00:07:20,000
in the fully qualified name so all the

215
00:07:20,000 --> 00:07:22,800
apps at the left side twitter android or

216
00:07:22,800 --> 00:07:24,960
lastpass they were completely ignored in

217
00:07:24,960 --> 00:07:26,880
the analysis process

218
00:07:26,880 --> 00:07:28,560
in addition to that we also found some

219
00:07:28,560 --> 00:07:30,639
crypto detectors which had faulty

220
00:07:30,639 --> 00:07:32,560
multi-text handling so they were not

221
00:07:32,560 --> 00:07:35,039
scanning all the dex files in an android

222
00:07:35,039 --> 00:07:37,199
binary file

223
00:07:37,199 --> 00:07:38,880
i want to talk about

224
00:07:38,880 --> 00:07:40,639
three specific flock classes that we

225
00:07:40,639 --> 00:07:42,720
found with the help of mask

226
00:07:42,720 --> 00:07:44,960
the first one is block class 2 and as

227
00:07:44,960 --> 00:07:46,720
you can see it's the previous two

228
00:07:46,720 --> 00:07:48,639
patterns that i have described the only

229
00:07:48,639 --> 00:07:50,000
difference is that we are introducing a

230
00:07:50,000 --> 00:07:52,560
variable and that was able to evade one

231
00:07:52,560 --> 00:07:55,520
crypto director in addition to that we

232
00:07:55,520 --> 00:07:57,440
also applied the method training and saw

233
00:07:57,440 --> 00:08:00,240
that it also was able to effects on the

234
00:08:00,240 --> 00:08:03,199
projector so in total the eight flaws in

235
00:08:03,199 --> 00:08:05,360
this class were able to evade seven out

236
00:08:05,360 --> 00:08:07,599
of the nine keto detectors that we have

237
00:08:07,599 --> 00:08:10,000
tested

238
00:08:10,319 --> 00:08:12,639
furthermore for flockers four and five

239
00:08:12,639 --> 00:08:15,360
it's about um in service and analysis of

240
00:08:15,360 --> 00:08:18,400
conditions so sometimes in in security

241
00:08:18,400 --> 00:08:20,000
specific apis we have to define the

242
00:08:20,000 --> 00:08:22,080
behavior such as hostname verification

243
00:08:22,080 --> 00:08:25,120
or trust um or or certified validation

244
00:08:25,120 --> 00:08:27,680
we notice that for incorrect

245
00:08:27,680 --> 00:08:30,080
conditions or in feasible conditions

246
00:08:30,080 --> 00:08:31,759
they are not properly being analyzed by

247
00:08:31,759 --> 00:08:33,679
descriptive detectors even though they

248
00:08:33,679 --> 00:08:36,799
can be statically computed so this this

249
00:08:36,799 --> 00:08:38,399
affected five out of the nine cubic

250
00:08:38,399 --> 00:08:39,679
detectors

251
00:08:39,679 --> 00:08:41,200
now at this point you might be thinking

252
00:08:41,200 --> 00:08:41,919
like

253
00:08:41,919 --> 00:08:43,839
hang on wait a minute

254
00:08:43,839 --> 00:08:45,839
are they real who is going to write the

255
00:08:45,839 --> 00:08:48,640
code in this convoluted way

256
00:08:48,640 --> 00:08:50,000
that's a very good question because we

257
00:08:50,000 --> 00:08:51,440
also thought the same

258
00:08:51,440 --> 00:08:54,240
so we did an impact study on open source

259
00:08:54,240 --> 00:08:57,279
applications in stack overflow as well

260
00:08:57,279 --> 00:08:58,959
as open source application which is

261
00:08:58,959 --> 00:09:01,360
scanned by lg tm simply

262
00:09:01,360 --> 00:09:03,680
we found that similar misuse cases were

263
00:09:03,680 --> 00:09:05,279
found in open source applications

264
00:09:05,279 --> 00:09:07,600
everywhere so all these flaws that we

265
00:09:07,600 --> 00:09:10,080
have found has real impact in the real

266
00:09:10,080 --> 00:09:12,560
applications

267
00:09:12,560 --> 00:09:15,279
which brings back to the brings us back

268
00:09:15,279 --> 00:09:16,800
to the original question why keep

269
00:09:16,800 --> 00:09:19,519
detectors fail because we have all these

270
00:09:19,519 --> 00:09:22,000
expectations about crypto detectors but

271
00:09:22,000 --> 00:09:23,360
in reality

272
00:09:23,360 --> 00:09:25,120
some trivial cases are evading the

273
00:09:25,120 --> 00:09:27,760
crypto detectors so we try to understand

274
00:09:27,760 --> 00:09:29,360
what's going on and try to understand

275
00:09:29,360 --> 00:09:31,279
what expectations are said by qp

276
00:09:31,279 --> 00:09:34,240
detectors in the first place

277
00:09:34,240 --> 00:09:36,959
what we noticed is that what we're doing

278
00:09:36,959 --> 00:09:39,120
is we are applying a security centric

279
00:09:39,120 --> 00:09:41,440
evaluation we're subjecting the

280
00:09:41,440 --> 00:09:43,920
subjecting descriptor detectors to kind

281
00:09:43,920 --> 00:09:47,040
of hostile review because we expect them

282
00:09:47,040 --> 00:09:49,279
to be good when it comes to security

283
00:09:49,279 --> 00:09:51,279
when because we expect them to be used

284
00:09:51,279 --> 00:09:53,040
in security specific settings such as

285
00:09:53,040 --> 00:09:55,920
for auditing or for complex certificates

286
00:09:55,920 --> 00:09:58,000
on the other hand what i found is that

287
00:09:58,000 --> 00:10:00,320
most of these crypto detectors when they

288
00:10:00,320 --> 00:10:02,000
were being designed they were focusing

289
00:10:02,000 --> 00:10:03,920
on only the techniques so they were

290
00:10:03,920 --> 00:10:05,839
focusing on whether they can use this

291
00:10:05,839 --> 00:10:07,279
particular static access technique or

292
00:10:07,279 --> 00:10:10,640
not or at what sensitivity

293
00:10:10,640 --> 00:10:12,959
in addition to that we found that there

294
00:10:12,959 --> 00:10:15,040
is a diverse perspective when it comes

295
00:10:15,040 --> 00:10:17,920
to the technician design for example

296
00:10:17,920 --> 00:10:20,000
scientist team told us that it doesn't

297
00:10:20,000 --> 00:10:21,920
matter whether these flaws are found in

298
00:10:21,920 --> 00:10:23,519
the wild or not whether they have real

299
00:10:23,519 --> 00:10:25,519
impact in the world or not

300
00:10:25,519 --> 00:10:28,320
as a perception but rather it's about

301
00:10:28,320 --> 00:10:30,160
whether they can be computed statically

302
00:10:30,160 --> 00:10:31,760
or not

303
00:10:31,760 --> 00:10:33,120
on the other hand

304
00:10:33,120 --> 00:10:34,800
cryptoguard and cochrane said that as

305
00:10:34,800 --> 00:10:36,399
long as these flaws are found in the

306
00:10:36,399 --> 00:10:38,640
wild they should be within the scope of

307
00:10:38,640 --> 00:10:40,480
these crypto detectors

308
00:10:40,480 --> 00:10:42,560
surprisingly that was not the case for

309
00:10:42,560 --> 00:10:46,000
github code scan lgtm they said that not

310
00:10:46,000 --> 00:10:48,480
only they should be finding these flaws

311
00:10:48,480 --> 00:10:50,320
in the wild they should also be

312
00:10:50,320 --> 00:10:52,240
frequently observed to be included

313
00:10:52,240 --> 00:10:53,680
within the scope of their analysis

314
00:10:53,680 --> 00:10:55,839
techniques

315
00:10:55,839 --> 00:10:56,720
so

316
00:10:56,720 --> 00:10:58,959
at this point we need to think a bit

317
00:10:58,959 --> 00:11:00,640
more about these crypto detectors and

318
00:11:00,640 --> 00:11:02,560
how to strengthen them because given

319
00:11:02,560 --> 00:11:03,760
enough code

320
00:11:03,760 --> 00:11:05,279
developers can be very creative and

321
00:11:05,279 --> 00:11:07,360
create very different things based on

322
00:11:07,360 --> 00:11:08,880
what they are thinking and what they are

323
00:11:08,880 --> 00:11:10,160
trying to do

324
00:11:10,160 --> 00:11:12,320
and it's not just us who actually

325
00:11:12,320 --> 00:11:13,920
subjected these discrete projectors for

326
00:11:13,920 --> 00:11:15,760
the first time

327
00:11:15,760 --> 00:11:17,839
according to hostile review because

328
00:11:17,839 --> 00:11:19,360
customers have been doing that for a

329
00:11:19,360 --> 00:11:21,360
long time when they are trying to choose

330
00:11:21,360 --> 00:11:23,279
these crypto detectors they actually

331
00:11:23,279 --> 00:11:25,600
introduce different types of misuse in

332
00:11:25,600 --> 00:11:27,680
their own code and try to find out

333
00:11:27,680 --> 00:11:29,200
whether the key protectors can direct

334
00:11:29,200 --> 00:11:30,959
them in the first place so that they can

335
00:11:30,959 --> 00:11:32,880
evaluate discrete directors on their own

336
00:11:32,880 --> 00:11:35,920
in their own context

337
00:11:35,920 --> 00:11:36,959
so

338
00:11:36,959 --> 00:11:39,440
the reality is that we are focusing more

339
00:11:39,440 --> 00:11:42,000
and more on security and compressed

340
00:11:42,000 --> 00:11:44,079
legislation as a certificate are on the

341
00:11:44,079 --> 00:11:45,680
rise we are now relying on certificates

342
00:11:45,680 --> 00:11:48,000
for iot for blockchains

343
00:11:48,000 --> 00:11:49,920
manual reviews cannot simply scale with

344
00:11:49,920 --> 00:11:51,519
all these apps and services because

345
00:11:51,519 --> 00:11:53,360
that's going to be too consuming in

346
00:11:53,360 --> 00:11:55,519
terms of resources so we have to rely on

347
00:11:55,519 --> 00:11:57,680
automated techniques and we simply

348
00:11:57,680 --> 00:12:00,639
cannot discard or static analysis

349
00:12:00,639 --> 00:12:02,560
because dynamic analysis has this issue

350
00:12:02,560 --> 00:12:04,480
of reachability so we have to rely on

351
00:12:04,480 --> 00:12:06,639
both of them

352
00:12:06,639 --> 00:12:09,120
so here's the takeaway first of all

353
00:12:09,120 --> 00:12:11,519
we need a paradigm shift of crypto

354
00:12:11,519 --> 00:12:13,920
detectors from technic centric design to

355
00:12:13,920 --> 00:12:15,920
security focus design the reason is

356
00:12:15,920 --> 00:12:18,079
really simple because we are relying on

357
00:12:18,079 --> 00:12:20,079
them for security specific purposes such

358
00:12:20,079 --> 00:12:23,360
as auditing or complex certifications

359
00:12:23,360 --> 00:12:25,600
expressive test cases generated by mask

360
00:12:25,600 --> 00:12:27,680
or evolving frameworks like mask can

361
00:12:27,680 --> 00:12:29,920
help us understand what the skipper

362
00:12:29,920 --> 00:12:31,760
detectors are good at what they are

363
00:12:31,760 --> 00:12:33,600
failing at so that we can make them

364
00:12:33,600 --> 00:12:35,440
better proactively instead of observing

365
00:12:35,440 --> 00:12:36,839
things in the wild

366
00:12:36,839 --> 00:12:39,600
frequently and we also need to reach a

367
00:12:39,600 --> 00:12:42,480
consensus regarding the assurances that

368
00:12:42,480 --> 00:12:43,440
are

369
00:12:43,440 --> 00:12:45,600
provided to us by discrimination because

370
00:12:45,600 --> 00:12:47,680
if it's not consistent we don't really

371
00:12:47,680 --> 00:12:50,079
know what they're expecting from us the

372
00:12:50,079 --> 00:12:52,000
developers to assume about their own

373
00:12:52,000 --> 00:12:53,839
crypto detectors

374
00:12:53,839 --> 00:12:55,680
so remember that average developer who

375
00:12:55,680 --> 00:12:58,320
was very confused if we do all of those

376
00:12:58,320 --> 00:13:00,160
if we follow all the takeaway messages

377
00:13:00,160 --> 00:13:00,880
here

378
00:13:00,880 --> 00:13:02,399
he will still be an average triple

379
00:13:02,399 --> 00:13:04,320
player but he'll probably be happy

380
00:13:04,320 --> 00:13:06,000
average secure developer because he'll

381
00:13:06,000 --> 00:13:08,480
be able to use more secure triple

382
00:13:08,480 --> 00:13:09,680
detectors

383
00:13:09,680 --> 00:13:12,560
so our entire artifact including tool

384
00:13:12,560 --> 00:13:14,720
logs source codes and everything is

385
00:13:14,720 --> 00:13:17,519
available in the url which you can also

386
00:13:17,519 --> 00:13:19,519
use using the qr code it's in active

387
00:13:19,519 --> 00:13:21,120
development

388
00:13:21,120 --> 00:13:22,959
so it was a blast for me to talk with

389
00:13:22,959 --> 00:13:25,040
you all about this

390
00:13:25,040 --> 00:13:27,439
thank you

391
00:13:30,399 --> 00:13:32,480
i'll be happy to take questions now

392
00:13:32,480 --> 00:13:34,399
all right thank you so much ahmed uh

393
00:13:34,399 --> 00:13:36,079
awesome talk i especially like the

394
00:13:36,079 --> 00:13:38,560
developer representations um do we have

395
00:13:38,560 --> 00:13:41,040
questions

396
00:13:41,440 --> 00:13:43,440
uh then maybe i'll start one off with

397
00:13:43,440 --> 00:13:45,440
one of mine um you mentioned that for

398
00:13:45,440 --> 00:13:47,199
the data driven text so many attacks you

399
00:13:47,199 --> 00:13:51,120
know me you included 105 misuse cases um

400
00:13:51,120 --> 00:13:52,880
did you have like a favorite among them

401
00:13:52,880 --> 00:13:54,480
or like a especially interesting one you

402
00:13:54,480 --> 00:13:57,279
want to tell us about

403
00:13:57,440 --> 00:13:59,279
well um the most interesting one that we

404
00:13:59,279 --> 00:14:01,680
found was like defaulting to ecb mode

405
00:14:01,680 --> 00:14:04,639
when someone was specifying aes like no

406
00:14:04,639 --> 00:14:06,320
one can assume that right

407
00:14:06,320 --> 00:14:07,120
but

408
00:14:07,120 --> 00:14:09,279
a major language like java defaulting to

409
00:14:09,279 --> 00:14:10,880
ecb mode because it's not being

410
00:14:10,880 --> 00:14:12,079
specified

411
00:14:12,079 --> 00:14:14,480
that's kind of mind-blowing

412
00:14:14,480 --> 00:14:16,240
yeah oh yeah i see it's really an

413
00:14:16,240 --> 00:14:17,440
interesting case thank you for the

414
00:14:17,440 --> 00:14:19,519
question yeah yeah awesome outfit as

415
00:14:19,519 --> 00:14:20,959
well um

416
00:14:20,959 --> 00:14:22,079
we have a question from the audience

417
00:14:22,079 --> 00:14:24,480
please go ahead so did you notice uh

418
00:14:24,480 --> 00:14:26,240
different detectors failing at different

419
00:14:26,240 --> 00:14:28,720
tasks and if so could you in principle

420
00:14:28,720 --> 00:14:30,399
just run multiple detectors and then

421
00:14:30,399 --> 00:14:31,680
sort of take

422
00:14:31,680 --> 00:14:34,959
whatever like the union of the results

423
00:14:34,959 --> 00:14:36,639
um so

424
00:14:36,639 --> 00:14:39,040
can we refresh the question um so what i

425
00:14:39,040 --> 00:14:40,880
understand from your question is about

426
00:14:40,880 --> 00:14:43,360
whether we found common flaws in these

427
00:14:43,360 --> 00:14:45,920
detectors or actually different flaws so

428
00:14:45,920 --> 00:14:47,600
like if one detector has one flow but

429
00:14:47,600 --> 00:14:49,120
the other detector doesn't could you

430
00:14:49,120 --> 00:14:51,360
just run both and then hopefully

431
00:14:51,360 --> 00:14:52,079
uh

432
00:14:52,079 --> 00:14:54,959
you'll you'll find the issue

433
00:14:54,959 --> 00:14:56,079
oh so

434
00:14:56,079 --> 00:14:58,000
what we did is when we were testing

435
00:14:58,000 --> 00:15:00,079
these detectors our mutation approach is

436
00:15:00,079 --> 00:15:02,959
kind of um it's still semi-automated so

437
00:15:02,959 --> 00:15:04,720
we can understand what the different

438
00:15:04,720 --> 00:15:06,959
complexities are involved and based on

439
00:15:06,959 --> 00:15:08,800
that when we progressively increase the

440
00:15:08,800 --> 00:15:10,560
complexity we can figure out what's

441
00:15:10,560 --> 00:15:12,160
going on what the differences are in

442
00:15:12,160 --> 00:15:14,240
between these crypto detectors but some

443
00:15:14,240 --> 00:15:16,160
of the directors are black box as well

444
00:15:16,160 --> 00:15:19,839
so we can't we can infer but we can't

445
00:15:19,839 --> 00:15:21,920
for sure say that it's that's what's

446
00:15:21,920 --> 00:15:23,440
going on

447
00:15:23,440 --> 00:15:27,000
thank you for the question

448
00:15:27,199 --> 00:15:30,079
all right thank you so much lex thank

449
00:15:30,079 --> 00:15:31,600
amit again for this awesome talk and

450
00:15:31,600 --> 00:15:33,430
this awesome submission

451
00:15:33,430 --> 00:15:37,819
[Applause]

