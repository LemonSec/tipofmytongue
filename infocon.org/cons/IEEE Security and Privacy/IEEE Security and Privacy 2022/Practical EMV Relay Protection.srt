1
00:00:00,080 --> 00:00:03,520
way okay thank you yeah so hi i'm andrea

2
00:00:03,520 --> 00:00:05,040
and today i have the pleasure of

3
00:00:05,040 --> 00:00:08,559
presenting our paper practical emv relay

4
00:00:08,559 --> 00:00:10,000
protections

5
00:00:10,000 --> 00:00:13,280
so let's just get started emv it stands

6
00:00:13,280 --> 00:00:16,560
for european mastercard and visa now

7
00:00:16,560 --> 00:00:18,800
what it is is basically a bunch of

8
00:00:18,800 --> 00:00:22,080
standards that define how a payment card

9
00:00:22,080 --> 00:00:25,119
communicates with a payment terminal

10
00:00:25,119 --> 00:00:28,240
and interestingly each payment network

11
00:00:28,240 --> 00:00:30,560
has a slightly different purple so here

12
00:00:30,560 --> 00:00:33,520
you can see mastercards and and visas

13
00:00:33,520 --> 00:00:35,680
and as you can see they are fairly

14
00:00:35,680 --> 00:00:38,079
complex protocols and i don't really

15
00:00:38,079 --> 00:00:39,600
think that anyone's going to like

16
00:00:39,600 --> 00:00:41,760
disagree with me when i say that

17
00:00:41,760 --> 00:00:43,920
contactless payments are increasing

18
00:00:43,920 --> 00:00:45,760
increasingly popular you know they're

19
00:00:45,760 --> 00:00:48,559
widely used in in europe and we also see

20
00:00:48,559 --> 00:00:52,320
a shift towards using them in the us too

21
00:00:52,320 --> 00:00:54,320
and that is why it's important that we

22
00:00:54,320 --> 00:00:57,039
look at their security

23
00:00:57,039 --> 00:01:00,239
so now we've already seen research that

24
00:01:00,239 --> 00:01:04,239
demonstrates that relaying a transaction

25
00:01:04,239 --> 00:01:06,799
yes from a contactless card

26
00:01:06,799 --> 00:01:09,520
is possible so tom

27
00:01:09,520 --> 00:01:11,439
over there actually performed this

28
00:01:11,439 --> 00:01:13,840
cross-atlantic new york to birmingham

29
00:01:13,840 --> 00:01:16,560
relay attack about seven years ago so

30
00:01:16,560 --> 00:01:20,240
this is all like kind of old news right

31
00:01:20,240 --> 00:01:22,240
but what about uh

32
00:01:22,240 --> 00:01:23,920
mobile payments

33
00:01:23,920 --> 00:01:26,799
in order to pay with your phone

34
00:01:26,799 --> 00:01:30,560
you have to unlock it first right

35
00:01:30,560 --> 00:01:34,960
that means relays aren't possible

36
00:01:34,960 --> 00:01:38,479
well both visa and and mastercard are

37
00:01:38,479 --> 00:01:39,680
aware of

38
00:01:39,680 --> 00:01:41,360
relays as an issue

39
00:01:41,360 --> 00:01:44,640
and have each proposed their own relay

40
00:01:44,640 --> 00:01:47,200
protections and we're going to discuss

41
00:01:47,200 --> 00:01:50,560
each of their proposals in a bit

42
00:01:50,560 --> 00:01:53,159
but right now let's focus on

43
00:01:53,159 --> 00:01:56,479
payments with phones mobile payments

44
00:01:56,479 --> 00:01:59,759
the user authentication requirement

45
00:01:59,759 --> 00:02:03,840
should be a really protection in its own

46
00:02:03,840 --> 00:02:05,759
right

47
00:02:05,759 --> 00:02:07,600
well

48
00:02:07,600 --> 00:02:11,120
introducing apple pay express travel

49
00:02:11,120 --> 00:02:13,280
because when you are on the london

50
00:02:13,280 --> 00:02:15,440
underground you really don't want to be

51
00:02:15,440 --> 00:02:17,599
causing queues at the gates

52
00:02:17,599 --> 00:02:20,080
so express travel allows you to

53
00:02:20,080 --> 00:02:22,480
basically pay and transport systems

54
00:02:22,480 --> 00:02:26,160
without requiring user authentication

55
00:02:26,160 --> 00:02:29,599
it's just tap and go streamlined

56
00:02:29,599 --> 00:02:31,920
downgrading security

57
00:02:31,920 --> 00:02:34,400
okay so to actually understand

58
00:02:34,400 --> 00:02:36,560
how express travel works

59
00:02:36,560 --> 00:02:40,560
uh myself and then iwana took trips

60
00:02:40,560 --> 00:02:42,640
quite a lot of trips on the london

61
00:02:42,640 --> 00:02:43,760
underground

62
00:02:43,760 --> 00:02:45,760
and while tapping in and out of the

63
00:02:45,760 --> 00:02:48,160
network i sniffed the communication

64
00:02:48,160 --> 00:02:50,720
between the iphone and the barrier

65
00:02:50,720 --> 00:02:51,680
reader

66
00:02:51,680 --> 00:02:53,519
with a proxmark which is basically the

67
00:02:53,519 --> 00:02:56,400
swiss army knife of rfid

68
00:02:56,400 --> 00:02:58,640
now i have to mention here that tom was

69
00:02:58,640 --> 00:03:00,319
utterly terrified that i'm going to like

70
00:03:00,319 --> 00:03:03,040
be caught by someone and interrogate it

71
00:03:03,040 --> 00:03:05,360
but there's no greater ally than you

72
00:03:05,360 --> 00:03:07,760
know once trusted handbag to just hide

73
00:03:07,760 --> 00:03:10,319
all of your equipment

74
00:03:10,319 --> 00:03:13,280
so this is what we would expect to see

75
00:03:13,280 --> 00:03:15,280
in in one of these

76
00:03:15,280 --> 00:03:16,319
okay

77
00:03:16,319 --> 00:03:17,760
traces

78
00:03:17,760 --> 00:03:20,319
this is the iso 1443a

79
00:03:20,319 --> 00:03:23,280
activation and anti-collision protocol

80
00:03:23,280 --> 00:03:25,440
that selects a card

81
00:03:25,440 --> 00:03:28,400
and this is the tfl trace

82
00:03:28,400 --> 00:03:30,560
and we can actually see here

83
00:03:30,560 --> 00:03:32,720
an extra message

84
00:03:32,720 --> 00:03:34,159
right

85
00:03:34,159 --> 00:03:37,519
okay so from our initial investigation

86
00:03:37,519 --> 00:03:42,080
we found that these magic bytes unlock

87
00:03:42,080 --> 00:03:44,319
apple pay but there are also some more

88
00:03:44,319 --> 00:03:46,959
conditions that need to be satisfied

89
00:03:46,959 --> 00:03:49,519
we found out that the merchant category

90
00:03:49,519 --> 00:03:50,400
code

91
00:03:50,400 --> 00:03:53,519
needs to be transit related but there is

92
00:03:53,519 --> 00:03:56,239
a little caveat for visa

93
00:03:56,239 --> 00:03:59,120
which i'm going to touch upon in a bit

94
00:03:59,120 --> 00:04:00,799
we also found out that the

95
00:04:00,799 --> 00:04:02,720
reader needs to support

96
00:04:02,720 --> 00:04:05,920
offline data authentication for online

97
00:04:05,920 --> 00:04:08,319
authorizations and this is a feature

98
00:04:08,319 --> 00:04:11,360
that's typical for for transit readers

99
00:04:11,360 --> 00:04:13,200
for readers who have like intermittent

100
00:04:13,200 --> 00:04:14,959
connectivity

101
00:04:14,959 --> 00:04:16,798
so that's for apple pay we also looked

102
00:04:16,798 --> 00:04:18,959
at samsung pay and we actually figured

103
00:04:18,959 --> 00:04:21,120
that it works quite differently

104
00:04:21,120 --> 00:04:23,520
it doesn't need these magic bites the

105
00:04:23,520 --> 00:04:26,560
phone will start an emv transaction uh

106
00:04:26,560 --> 00:04:28,400
even if it's locked

107
00:04:28,400 --> 00:04:29,520
however

108
00:04:29,520 --> 00:04:31,840
if the amount of the transaction is

109
00:04:31,840 --> 00:04:33,759
greater than zero

110
00:04:33,759 --> 00:04:36,080
the phone just replies with narrow code

111
00:04:36,080 --> 00:04:39,840
and just stops the transaction

112
00:04:40,000 --> 00:04:42,160
okay so having acquired all of this

113
00:04:42,160 --> 00:04:44,400
information we needed to to make sense

114
00:04:44,400 --> 00:04:45,280
of it

115
00:04:45,280 --> 00:04:47,120
and therefore we modeled it using

116
00:04:47,120 --> 00:04:48,320
tamarind

117
00:04:48,320 --> 00:04:50,160
we extended the formal

118
00:04:50,160 --> 00:04:51,840
models of basin at all which were

119
00:04:51,840 --> 00:04:54,400
designed for car payments and we created

120
00:04:54,400 --> 00:04:58,479
new uh models for mobile payments

121
00:04:58,479 --> 00:05:00,800
the formal models allowed us to to

122
00:05:00,800 --> 00:05:02,960
confirm an attack which was sort of

123
00:05:02,960 --> 00:05:07,440
emerging from our practical experiments

124
00:05:07,520 --> 00:05:09,919
and this is how it works so at a high

125
00:05:09,919 --> 00:05:12,240
level in our attack setup

126
00:05:12,240 --> 00:05:15,039
we have an iphone which has a visa card

127
00:05:15,039 --> 00:05:18,080
set up as a travel card

128
00:05:18,080 --> 00:05:21,520
then we have a proxmark which acts as a

129
00:05:21,520 --> 00:05:23,440
terminal emulator

130
00:05:23,440 --> 00:05:26,320
we also use an nfc-enabled android phone

131
00:05:26,320 --> 00:05:28,400
that runs an application that we wrote

132
00:05:28,400 --> 00:05:29,680
wrote which is

133
00:05:29,680 --> 00:05:32,479
acts as a card emulator and this will

134
00:05:32,479 --> 00:05:34,840
just communicate with a genuine

135
00:05:34,840 --> 00:05:37,919
uncompromised emv reader think of it

136
00:05:37,919 --> 00:05:41,440
you're like your shop reader

137
00:05:42,960 --> 00:05:46,800
okay the prox mark starts off by sending

138
00:05:46,800 --> 00:05:50,000
these magic bytes to to the iphone and

139
00:05:50,000 --> 00:05:52,560
we actually later found out that these

140
00:05:52,560 --> 00:05:55,039
magic bites are a part of something

141
00:05:55,039 --> 00:05:57,600
called apple enhanced contactless

142
00:05:57,600 --> 00:06:01,039
polling ask me later if you want to know

143
00:06:01,039 --> 00:06:04,400
then the normal 14a activation protocol

144
00:06:04,400 --> 00:06:06,160
just runs

145
00:06:06,160 --> 00:06:09,440
and now we can start relaying emv

146
00:06:09,440 --> 00:06:11,199
messages

147
00:06:11,199 --> 00:06:13,600
now for the important bits quite

148
00:06:13,600 --> 00:06:16,240
literally bits in this attack

149
00:06:16,240 --> 00:06:19,120
in order to perform it we need to flip a

150
00:06:19,120 --> 00:06:21,680
bit in the terminal transaction

151
00:06:21,680 --> 00:06:23,120
qualifier

152
00:06:23,120 --> 00:06:26,400
which allows us to pretend to the iphone

153
00:06:26,400 --> 00:06:29,759
that it's talking to a transit reader

154
00:06:29,759 --> 00:06:33,039
right so this bit is the oda for online

155
00:06:33,039 --> 00:06:34,960
authorizations bit that i just mentioned

156
00:06:34,960 --> 00:06:36,240
earlier

157
00:06:36,240 --> 00:06:37,039
then

158
00:06:37,039 --> 00:06:40,240
if we want to perform an over the limit

159
00:06:40,240 --> 00:06:41,759
contact over the contactless limit

160
00:06:41,759 --> 00:06:43,120
transaction

161
00:06:43,120 --> 00:06:46,319
we also need to flip a bit in the card

162
00:06:46,319 --> 00:06:49,280
transaction qualifier and this allows us

163
00:06:49,280 --> 00:06:52,479
to pretend to the emv reader that

164
00:06:52,479 --> 00:06:55,520
on-device user authentication has

165
00:06:55,520 --> 00:06:57,440
already been performed

166
00:06:57,440 --> 00:06:59,759
even though it hasn't been

167
00:06:59,759 --> 00:07:01,680
and also the card

168
00:07:01,680 --> 00:07:04,319
authentication related data down there

169
00:07:04,319 --> 00:07:05,680
card

170
00:07:05,680 --> 00:07:08,639
contains a copy of the ctq so we

171
00:07:08,639 --> 00:07:10,639
actually need to flip the same bit in

172
00:07:10,639 --> 00:07:12,960
that as well

173
00:07:12,960 --> 00:07:15,280
now interestingly

174
00:07:15,280 --> 00:07:18,720
sine dynamic application data the sdid

175
00:07:18,720 --> 00:07:21,599
includes the card

176
00:07:21,599 --> 00:07:23,919
authentication related data the value we

177
00:07:23,919 --> 00:07:25,520
just modified

178
00:07:25,520 --> 00:07:28,960
so if the emv reader would check it it

179
00:07:28,960 --> 00:07:31,759
would be able to to detect the over the

180
00:07:31,759 --> 00:07:33,840
limit attack

181
00:07:33,840 --> 00:07:36,319
but because the emv reader is performing

182
00:07:36,319 --> 00:07:38,960
an online transaction it doesn't

183
00:07:38,960 --> 00:07:41,360
actually need the sdd

184
00:07:41,360 --> 00:07:44,400
and even though it receives it it

185
00:07:44,400 --> 00:07:47,440
doesn't bother checking it

186
00:07:47,440 --> 00:07:48,879
moreover

187
00:07:48,879 --> 00:07:52,400
the issuer application data encodes

188
00:07:52,400 --> 00:07:55,520
basically whether on-device user

189
00:07:55,520 --> 00:07:58,479
authentication has been performed

190
00:07:58,479 --> 00:08:01,199
so cross-referencing this with the

191
00:08:01,199 --> 00:08:03,039
amount for example of the transaction

192
00:08:03,039 --> 00:08:05,919
would allow visa to detect this attack

193
00:08:05,919 --> 00:08:09,759
but sadly this isn't checked either

194
00:08:09,759 --> 00:08:12,400
okay so let's have a look at the attack

195
00:08:12,400 --> 00:08:15,039
in practice so we have there an iphone 7

196
00:08:15,039 --> 00:08:17,280
we also verified it with the 12th

197
00:08:17,280 --> 00:08:20,639
iphone 12. underneath it we have a

198
00:08:20,639 --> 00:08:23,360
proxmark as i said the terminal

199
00:08:23,360 --> 00:08:25,360
emulator and you'll see in a second that

200
00:08:25,360 --> 00:08:29,440
the iphone is locked

201
00:08:29,440 --> 00:08:32,159
yeah up there

202
00:08:32,159 --> 00:08:34,320
next we set up

203
00:08:34,320 --> 00:08:39,039
our transaction on the sum up reader app

204
00:08:39,039 --> 00:08:41,919
we're going big money a thousand pounds

205
00:08:41,919 --> 00:08:45,120
and then we are going to to start our

206
00:08:45,120 --> 00:08:47,519
replay and relay script

207
00:08:47,519 --> 00:08:49,920
that's the android phone that we use as

208
00:08:49,920 --> 00:08:52,959
a card emulator that we're paying with

209
00:08:52,959 --> 00:08:55,839
and

210
00:08:56,800 --> 00:08:59,359
we've paid

211
00:08:59,440 --> 00:09:02,480
so you're going to see in a few seconds

212
00:09:02,480 --> 00:09:06,480
that the iphone is actually still locked

213
00:09:06,480 --> 00:09:10,080
so this means that for example a stolen

214
00:09:10,080 --> 00:09:12,880
iphone that's locked

215
00:09:12,880 --> 00:09:15,839
could be um used

216
00:09:15,839 --> 00:09:17,839
to to

217
00:09:17,839 --> 00:09:19,760
deplete someone's account with this

218
00:09:19,760 --> 00:09:21,279
method

219
00:09:21,279 --> 00:09:23,760
now i mentioned a couple of slides ago

220
00:09:23,760 --> 00:09:26,720
this this merchant category code

221
00:09:26,720 --> 00:09:30,880
for visa the mcc is actually sent

222
00:09:30,880 --> 00:09:34,320
from the emv reader to the bank

223
00:09:34,320 --> 00:09:36,399
but it's never sent to the phone

224
00:09:36,399 --> 00:09:39,839
if the phone was sent the mcc code

225
00:09:39,839 --> 00:09:41,839
it would be able to detect that it's

226
00:09:41,839 --> 00:09:43,680
actually paying a shop

227
00:09:43,680 --> 00:09:48,000
uh reader rather than a transit reader

228
00:09:48,000 --> 00:09:48,959
or

229
00:09:48,959 --> 00:09:51,519
visa or the bank could cross-reference

230
00:09:51,519 --> 00:09:52,959
the mcc

231
00:09:52,959 --> 00:09:54,640
with the iad

232
00:09:54,640 --> 00:09:56,720
and and just detect the over-the-limit

233
00:09:56,720 --> 00:09:57,839
payment

234
00:09:57,839 --> 00:09:59,279
so you can kind of see here that there

235
00:09:59,279 --> 00:10:01,760
are quite a lot of missed opportunities

236
00:10:01,760 --> 00:10:04,560
for for these attacks to be caught

237
00:10:04,560 --> 00:10:06,720
we've obviously

238
00:10:06,720 --> 00:10:09,200
disclosed this to both apple and and

239
00:10:09,200 --> 00:10:10,240
visa

240
00:10:10,240 --> 00:10:11,680
and it was all

241
00:10:11,680 --> 00:10:13,839
a bit of a car crash so

242
00:10:13,839 --> 00:10:16,240
summary is apple and visa are blaming

243
00:10:16,240 --> 00:10:18,160
each other and the vulnerability is

244
00:10:18,160 --> 00:10:20,480
still alive yeah

245
00:10:20,480 --> 00:10:21,519
so

246
00:10:21,519 --> 00:10:24,320
regarding other combinations of mobile

247
00:10:24,320 --> 00:10:27,120
payments and network providers

248
00:10:27,120 --> 00:10:29,200
so mastercard actually sends the

249
00:10:29,200 --> 00:10:31,920
merchant category code to the phone and

250
00:10:31,920 --> 00:10:33,519
it properly authenticates the

251
00:10:33,519 --> 00:10:36,480
transaction data including the mcc

252
00:10:36,480 --> 00:10:38,959
so that means we can't change it and

253
00:10:38,959 --> 00:10:42,079
therefore apple pay with mastercard are

254
00:10:42,079 --> 00:10:43,839
just fine

255
00:10:43,839 --> 00:10:47,360
samsung pay as i said it only uses zero

256
00:10:47,360 --> 00:10:50,560
value transactions in transit mode so

257
00:10:50,560 --> 00:10:53,600
even visa with with samsung pay

258
00:10:53,600 --> 00:10:55,200
that works fine

259
00:10:55,200 --> 00:10:57,200
it can't be exploited

260
00:10:57,200 --> 00:11:00,560
now google pay allows transactions

261
00:11:00,560 --> 00:11:02,880
under the contactless limit

262
00:11:02,880 --> 00:11:05,440
without user authentication

263
00:11:05,440 --> 00:11:07,200
by design

264
00:11:07,200 --> 00:11:08,880
that's fair point

265
00:11:08,880 --> 00:11:11,360
but we did confirm that a

266
00:11:11,360 --> 00:11:13,440
three-year-old attack which basically

267
00:11:13,440 --> 00:11:15,519
performs an over the limit

268
00:11:15,519 --> 00:11:16,800
transaction

269
00:11:16,800 --> 00:11:20,880
still works today on a pixel 5.

270
00:11:20,880 --> 00:11:24,320
okay so let's go on to visa's relay

271
00:11:24,320 --> 00:11:26,959
protections

272
00:11:27,600 --> 00:11:31,440
so the idea of visa's protocol is to

273
00:11:31,440 --> 00:11:34,640
defend against relays with off-the-shelf

274
00:11:34,640 --> 00:11:37,040
devices such as the mobile phones i've

275
00:11:37,040 --> 00:11:39,360
been using

276
00:11:39,360 --> 00:11:42,880
the selection of a card is done usually

277
00:11:42,880 --> 00:11:45,040
in mobile phones by the firmware and

278
00:11:45,040 --> 00:11:46,240
it's not

279
00:11:46,240 --> 00:11:49,440
accessible in user mode so visa uses the

280
00:11:49,440 --> 00:11:52,480
unique identifier of a card as a random

281
00:11:52,480 --> 00:11:54,240
number

282
00:11:54,240 --> 00:11:57,040
it does the transaction

283
00:11:57,040 --> 00:12:00,160
and then at the end it includes the

284
00:12:00,160 --> 00:12:04,480
uid in the sign dynamic application data

285
00:12:04,480 --> 00:12:06,800
how can we relay this

286
00:12:06,800 --> 00:12:07,839
well

287
00:12:07,839 --> 00:12:10,079
we take an nfc enabled phone which is

288
00:12:10,079 --> 00:12:12,800
going to act as a terminal emulator

289
00:12:12,800 --> 00:12:14,720
this phone is going to ask our card

290
00:12:14,720 --> 00:12:17,760
what's your uid

291
00:12:17,760 --> 00:12:20,079
the card is going to answer

292
00:12:20,079 --> 00:12:21,920
and we're going to take that and forward

293
00:12:21,920 --> 00:12:25,680
it to a rooted android phone that's

294
00:12:25,680 --> 00:12:28,399
going to act as a card emulator

295
00:12:28,399 --> 00:12:31,440
now the route is important because

296
00:12:31,440 --> 00:12:33,120
it allows for

297
00:12:33,120 --> 00:12:36,320
the the card emulator phone to set its

298
00:12:36,320 --> 00:12:39,600
own uid so when the terminal asks it

299
00:12:39,600 --> 00:12:42,079
what's your uid it just responds with a

300
00:12:42,079 --> 00:12:44,160
stolen value

301
00:12:44,160 --> 00:12:46,880
then we just relay the transaction

302
00:12:46,880 --> 00:12:49,279
data

303
00:12:49,600 --> 00:12:52,800
and we also relay the sdid

304
00:12:52,800 --> 00:12:55,839
which will have a perfectly correct

305
00:12:55,839 --> 00:12:59,360
uid in it and the terminal is happy so

306
00:12:59,360 --> 00:13:01,839
job done

307
00:13:02,160 --> 00:13:07,360
okay so mastercard's really protections

308
00:13:07,360 --> 00:13:11,360
mastercode uses a timed nos exchange at

309
00:13:11,360 --> 00:13:13,040
application layer

310
00:13:13,040 --> 00:13:14,639
and actually

311
00:13:14,639 --> 00:13:17,920
previous papers formally modeled and and

312
00:13:17,920 --> 00:13:20,000
looked at this protocol and and looked

313
00:13:20,000 --> 00:13:22,000
at the protocol's timing

314
00:13:22,000 --> 00:13:24,560
and they considered it secure

315
00:13:24,560 --> 00:13:27,440
but what they didn't consider is the

316
00:13:27,440 --> 00:13:30,880
variation of the card in the field

317
00:13:30,880 --> 00:13:34,880
which is you know how cards get powered

318
00:13:34,880 --> 00:13:37,120
so we ran an experiment

319
00:13:37,120 --> 00:13:39,279
to see the response times under

320
00:13:39,279 --> 00:13:41,920
different distances and angles

321
00:13:41,920 --> 00:13:44,000
and what we found is that while while

322
00:13:44,000 --> 00:13:46,480
the angle does somewhat influence the

323
00:13:46,480 --> 00:13:49,680
response times you can clearly see that

324
00:13:49,680 --> 00:13:52,320
the further the card is from a reader

325
00:13:52,320 --> 00:13:55,440
the longer it takes for the response

326
00:13:55,440 --> 00:13:57,760
from that card to be received by the

327
00:13:57,760 --> 00:14:00,399
reader and the difference is significant

328
00:14:00,399 --> 00:14:02,959
enough that you could actually perform a

329
00:14:02,959 --> 00:14:06,079
relay attack in this gap

330
00:14:06,079 --> 00:14:08,240
and i should be said at this point that

331
00:14:08,240 --> 00:14:09,279
that

332
00:14:09,279 --> 00:14:13,120
we used a test card in our experiment

333
00:14:13,120 --> 00:14:14,839
because there are no commercially

334
00:14:14,839 --> 00:14:17,600
available cards that actually implement

335
00:14:17,600 --> 00:14:20,399
mastercard relay resistant protocol yet

336
00:14:20,399 --> 00:14:22,639
but we did talk to mastercard and they

337
00:14:22,639 --> 00:14:25,360
accepted our findings and they said they

338
00:14:25,360 --> 00:14:27,360
will improve the implementation of their

339
00:14:27,360 --> 00:14:30,399
protocol in the future

340
00:14:30,399 --> 00:14:32,959
okay so having all this information we

341
00:14:32,959 --> 00:14:34,800
thought you know how can we improve

342
00:14:34,800 --> 00:14:38,800
relay resistance in contactless cards

343
00:14:38,800 --> 00:14:42,079
so we ran some more experiments

344
00:14:42,079 --> 00:14:46,000
and it turns out that response times

345
00:14:46,000 --> 00:14:47,600
at the card activation and

346
00:14:47,600 --> 00:14:49,440
anti-collision level

347
00:14:49,440 --> 00:14:52,240
are much shorter and have a lot less

348
00:14:52,240 --> 00:14:53,680
variation

349
00:14:53,680 --> 00:14:56,320
than at application level

350
00:14:56,320 --> 00:15:00,160
so taking this knowledge we present our

351
00:15:00,160 --> 00:15:02,880
new protocol l1rp

352
00:15:02,880 --> 00:15:06,480
which uses a strict timing nonce

353
00:15:06,480 --> 00:15:09,279
within the card selection procedure

354
00:15:09,279 --> 00:15:12,560
and it binds that at application level

355
00:15:12,560 --> 00:15:15,440
it has separate relay resistance and

356
00:15:15,440 --> 00:15:17,360
payment proofs so that makes the

357
00:15:17,360 --> 00:15:19,760
protocol backwards compatible and it

358
00:15:19,760 --> 00:15:22,240
also allows us to have clearer security

359
00:15:22,240 --> 00:15:23,440
proofs

360
00:15:23,440 --> 00:15:26,480
and also downgrade attacks are prevented

361
00:15:26,480 --> 00:15:28,639
by cross-checking

362
00:15:28,639 --> 00:15:30,720
authenticated flags which are again

363
00:15:30,720 --> 00:15:34,079
included both at card selection

364
00:15:34,079 --> 00:15:37,440
level and at application level

365
00:15:37,440 --> 00:15:39,519
and you don't have to believe me that

366
00:15:39,519 --> 00:15:41,680
our protocol is is secure

367
00:15:41,680 --> 00:15:43,519
we actually formally modeled it and

368
00:15:43,519 --> 00:15:46,160
proved its security so so check this out

369
00:15:46,160 --> 00:15:48,639
in the paper and as i said we also

370
00:15:48,639 --> 00:15:51,120
created uh models for the mobile

371
00:15:51,120 --> 00:15:53,519
versions of visa and mastercard and we

372
00:15:53,519 --> 00:15:57,920
also verified both of our attacks

373
00:15:58,000 --> 00:16:00,720
so that's it for me all our artifacts

374
00:16:00,720 --> 00:16:02,560
are actually available on our github

375
00:16:02,560 --> 00:16:05,839
page so feel free to check them out and

376
00:16:05,839 --> 00:16:09,079
thank you

377
00:16:10,010 --> 00:16:14,000
[Applause]

378
00:16:14,720 --> 00:16:17,199
questions

379
00:16:18,240 --> 00:16:22,160
hi this is paul for max blanc again um

380
00:16:22,160 --> 00:16:24,959
how does your work relate to classical

381
00:16:24,959 --> 00:16:27,279
distance bounding where you try to

382
00:16:27,279 --> 00:16:29,680
verify proximity on a challenge response

383
00:16:29,680 --> 00:16:32,079
protocol or is that in a variant of a

384
00:16:32,079 --> 00:16:34,720
distance bonding protocol i'd say i

385
00:16:34,720 --> 00:16:37,440
think it's it's a variant basically it's

386
00:16:37,440 --> 00:16:39,680
very related to it because you time the

387
00:16:39,680 --> 00:16:41,199
response time which is exactly what you

388
00:16:41,199 --> 00:16:43,279
do in distance banding yeah

389
00:16:43,279 --> 00:16:45,120
have you um

390
00:16:45,120 --> 00:16:47,680
investigated

391
00:16:47,680 --> 00:16:50,480
like the time resolution that you can

392
00:16:50,480 --> 00:16:52,480
achieve on the application

393
00:16:52,480 --> 00:16:55,040
level because like timers are often

394
00:16:55,040 --> 00:16:58,800
inaccurate and may only give very quartz

395
00:16:58,800 --> 00:17:00,560
resolution

396
00:17:00,560 --> 00:17:03,279
that's a very good question no

397
00:17:03,279 --> 00:17:05,679
um and final question like have you

398
00:17:05,679 --> 00:17:07,760
tested

399
00:17:07,760 --> 00:17:10,240
the maximum response time which the

400
00:17:10,240 --> 00:17:12,880
terminals um

401
00:17:12,880 --> 00:17:17,039
uh have before like issuing a timeout

402
00:17:17,039 --> 00:17:17,760
so

403
00:17:17,760 --> 00:17:21,359
that is again a very good question so

404
00:17:21,359 --> 00:17:24,720
um according to the emv standard the

405
00:17:24,720 --> 00:17:27,599
terminal should time out at 500

406
00:17:27,599 --> 00:17:29,679
milliseconds oh wow that's good which is

407
00:17:29,679 --> 00:17:30,720
yeah

408
00:17:30,720 --> 00:17:33,440
quite a lot i will admit we haven't

409
00:17:33,440 --> 00:17:35,760
actually tested to see if it will wait

410
00:17:35,760 --> 00:17:37,919
that long just that's quite a

411
00:17:37,919 --> 00:17:39,600
big value so

412
00:17:39,600 --> 00:17:43,120
yeah thank you very much welcome

413
00:17:43,840 --> 00:17:46,080
we have time for one more quick question

414
00:17:46,080 --> 00:17:48,080
so alyssa milburn intel i saw in your

415
00:17:48,080 --> 00:17:49,760
paper that kind of apple pay supports a

416
00:17:49,760 --> 00:17:51,360
whole bunch of different

417
00:17:51,360 --> 00:17:53,520
um transport systems so i'm just

418
00:17:53,520 --> 00:17:55,440
wondering does this attack work on all

419
00:17:55,440 --> 00:17:56,799
of them

420
00:17:56,799 --> 00:17:58,799
that is a very good question we tested

421
00:17:58,799 --> 00:18:01,360
it on um

422
00:18:01,360 --> 00:18:02,160
so

423
00:18:02,160 --> 00:18:04,559
okay let me backtrack

424
00:18:04,559 --> 00:18:07,600
so the magic part of it is that you have

425
00:18:07,600 --> 00:18:10,000
these like magic bites that basically

426
00:18:10,000 --> 00:18:12,400
unlock apple pay and then it just runs a

427
00:18:12,400 --> 00:18:14,880
normal transaction so as long as you

428
00:18:14,880 --> 00:18:18,000
have the correct magic bytes

429
00:18:18,000 --> 00:18:20,559
it should just work because the pro dmv

430
00:18:20,559 --> 00:18:23,600
protocol itself will just be the same

431
00:18:23,600 --> 00:18:26,080
but i can i can confirm that different

432
00:18:26,080 --> 00:18:27,280
transport

433
00:18:27,280 --> 00:18:30,559
systems have different magic bites so

434
00:18:30,559 --> 00:18:32,640
the one i showed there was from tfl but

435
00:18:32,640 --> 00:18:34,960
then we also went and took some traces

436
00:18:34,960 --> 00:18:37,280
from some buses that recently introduced

437
00:18:37,280 --> 00:18:39,039
it and we saw there are slight

438
00:18:39,039 --> 00:18:42,080
differences but yes technically if you

439
00:18:42,080 --> 00:18:44,480
have magic bites from other transport

440
00:18:44,480 --> 00:18:46,400
systems you should just be able to to

441
00:18:46,400 --> 00:18:47,520
use that

442
00:18:47,520 --> 00:18:49,520
okay that's terrifying but thank you

443
00:18:49,520 --> 00:18:52,720
very much great talk thank you

444
00:18:52,720 --> 00:18:55,350
okay why don't we thank uh

445
00:18:55,350 --> 00:18:58,840
[Applause]

