1
00:00:01,280 --> 00:00:02,560
okay

2
00:00:02,560 --> 00:00:05,679
you can hear me right now okay

3
00:00:05,839 --> 00:00:07,359
so hello everyone my name is trishan

4
00:00:07,359 --> 00:00:10,000
zhao from the ohio state university and

5
00:00:10,000 --> 00:00:11,840
today is my great pleasure to be here to

6
00:00:11,840 --> 00:00:14,799
present vsgs virtualizing hds on close

7
00:00:14,799 --> 00:00:17,600
on mdsv project with you guys

8
00:00:17,600 --> 00:00:20,160
and this is a joint work with mongolia

9
00:00:20,160 --> 00:00:22,480
professor insien zhang and my advisor

10
00:00:22,480 --> 00:00:25,359
professor trishan lin

11
00:00:25,359 --> 00:00:26,800
so before we talk about the project

12
00:00:26,800 --> 00:00:28,640
let's first take a look at the te or

13
00:00:28,640 --> 00:00:30,080
trusted execution environment in the

14
00:00:30,080 --> 00:00:30,960
cloud

15
00:00:30,960 --> 00:00:35,280
so it's nothing new so but but it did

16
00:00:35,280 --> 00:00:37,040
not make it into the cloud until very

17
00:00:37,040 --> 00:00:38,000
late

18
00:00:38,000 --> 00:00:38,800
like

19
00:00:38,800 --> 00:00:41,600
uh in the blue part those are the events

20
00:00:41,600 --> 00:00:44,399
that rte gets into the cloud

21
00:00:44,399 --> 00:00:48,480
so for cloud usually we use the nx86

22
00:00:48,480 --> 00:00:51,199
platform and on this platform the

23
00:00:51,199 --> 00:00:53,520
enclave kind of t the standard de facto

24
00:00:53,520 --> 00:00:54,879
standard is the

25
00:00:54,879 --> 00:00:57,199
is the intel sgx

26
00:00:57,199 --> 00:00:59,440
and it was first introduced in 2015 on

27
00:00:59,440 --> 00:01:03,199
the sixth gen core series the skylake

28
00:01:03,199 --> 00:01:06,560
and since then it has built a rich

29
00:01:06,560 --> 00:01:09,520
existing ecosystem

30
00:01:09,520 --> 00:01:13,119
but sgs suffers from a problem and we

31
00:01:13,119 --> 00:01:15,200
call it vendor locking and what's that

32
00:01:15,200 --> 00:01:17,119
basically your app's got to be written

33
00:01:17,119 --> 00:01:19,680
into binary form to call those stx

34
00:01:19,680 --> 00:01:22,000
instructions and it's it has to be

35
00:01:22,000 --> 00:01:23,759
written specifically for it and you

36
00:01:23,759 --> 00:01:27,200
can't just run it elsewhere so before

37
00:01:27,200 --> 00:01:30,079
the surgeon xeon scalable series you

38
00:01:30,079 --> 00:01:31,920
can't run this in the cloud because all

39
00:01:31,920 --> 00:01:33,600
the xeon server chips

40
00:01:33,600 --> 00:01:35,680
don't support it and

41
00:01:35,680 --> 00:01:39,439
you obviously don't run it on epic

42
00:01:39,439 --> 00:01:40,400
and

43
00:01:40,400 --> 00:01:41,840
we go to

44
00:01:41,840 --> 00:01:44,000
well rest in peace that's not embedded

45
00:01:44,000 --> 00:01:46,560
sjx because intel ditched it since the

46
00:01:46,560 --> 00:01:49,840
12th stream call this here

47
00:01:50,000 --> 00:01:50,799
and

48
00:01:50,799 --> 00:01:53,360
well let's put that aside but we also

49
00:01:53,360 --> 00:01:56,000
find a new trend in the industry in the

50
00:01:56,000 --> 00:01:57,759
cloud industry and this what we call

51
00:01:57,759 --> 00:01:59,920
decoupling teas from hardware and

52
00:01:59,920 --> 00:02:02,159
basically it's kind of a strong desire

53
00:02:02,159 --> 00:02:04,960
from cloud providers and we see a lot of

54
00:02:04,960 --> 00:02:07,759
attempts but the compatibility is a huge

55
00:02:07,759 --> 00:02:08,800
issue

56
00:02:08,800 --> 00:02:10,479
so for example google silo is some sort

57
00:02:10,479 --> 00:02:13,200
of like sdk level to try to implement

58
00:02:13,200 --> 00:02:14,400
this kind of thing

59
00:02:14,400 --> 00:02:16,800
and it's a unified sdk that if you write

60
00:02:16,800 --> 00:02:18,720
an app for it it will it will help you

61
00:02:18,720 --> 00:02:20,959
to do all the backend things to adapt it

62
00:02:20,959 --> 00:02:23,680
to a real hardware te but

63
00:02:23,680 --> 00:02:26,080
you got to rewrite your app for it

64
00:02:26,080 --> 00:02:28,800
and we also see some like

65
00:02:28,800 --> 00:02:31,440
aws nitro enclaves that virtualize the

66
00:02:31,440 --> 00:02:33,760
virtualize the enclave into using

67
00:02:33,760 --> 00:02:35,680
hypervisor technologies

68
00:02:35,680 --> 00:02:37,360
but you have to trust the hypervisor and

69
00:02:37,360 --> 00:02:38,560
also you're gonna

70
00:02:38,560 --> 00:02:40,959
you're gonna rewrite your app for as sdk

71
00:02:40,959 --> 00:02:42,959
either

72
00:02:42,959 --> 00:02:45,840
so ideally the comment from hardware

73
00:02:45,840 --> 00:02:47,200
should not just sacrifice this

74
00:02:47,200 --> 00:02:49,680
compatibility we think

75
00:02:49,680 --> 00:02:51,519
and that's from industry but from

76
00:02:51,519 --> 00:02:52,640
research

77
00:02:52,640 --> 00:02:55,120
in the in academic we see another trend

78
00:02:55,120 --> 00:02:56,879
it's called software-defined te and

79
00:02:56,879 --> 00:02:58,080
basically

80
00:02:58,080 --> 00:02:59,760
so you still have a hardware key right

81
00:02:59,760 --> 00:03:01,840
there to implement the basic isolation

82
00:03:01,840 --> 00:03:04,239
but the interface is exposed towards the

83
00:03:04,239 --> 00:03:07,040
software it's done using instant also

84
00:03:07,040 --> 00:03:09,360
you use software so

85
00:03:09,360 --> 00:03:11,200
it allows you to to

86
00:03:11,200 --> 00:03:13,680
enable flexibility on deployment fast

87
00:03:13,680 --> 00:03:15,760
feature evolution and fastbox fixes for

88
00:03:15,760 --> 00:03:18,080
example on sgs processors if you got an

89
00:03:18,080 --> 00:03:20,640
sjs one processor you never got that cs2

90
00:03:20,640 --> 00:03:22,560
on it

91
00:03:22,560 --> 00:03:24,319
and so you can see right here so if you

92
00:03:24,319 --> 00:03:26,400
compare it to to the hardware

93
00:03:26,400 --> 00:03:29,040
implementations like you'll see that

94
00:03:29,040 --> 00:03:31,519
isolation is always done by hardware but

95
00:03:31,519 --> 00:03:33,599
the interface below it

96
00:03:33,599 --> 00:03:35,760
while for sds suv and trusome this kind

97
00:03:35,760 --> 00:03:38,480
of hardware test you got they bind the

98
00:03:38,480 --> 00:03:40,799
interface based into the hardware but

99
00:03:40,799 --> 00:03:43,360
for commodore like this example

100
00:03:43,360 --> 00:03:44,799
so they implement the whole thing in

101
00:03:44,799 --> 00:03:47,200
software and they're based on trust them

102
00:03:47,200 --> 00:03:48,239
so

103
00:03:48,239 --> 00:03:50,400
your commodore app can just run on top

104
00:03:50,400 --> 00:03:51,840
of the commodore interface which is a

105
00:03:51,840 --> 00:03:54,400
software-based thing

106
00:03:54,400 --> 00:03:57,439
so we boil down to what people demanded

107
00:03:57,439 --> 00:03:59,360
they demand a enclave

108
00:03:59,360 --> 00:04:01,040
anchor-based team in the cloud with no

109
00:04:01,040 --> 00:04:03,599
vendor lock-in uh they call i'm sorry

110
00:04:03,599 --> 00:04:05,120
and they want to decorate from hardware

111
00:04:05,120 --> 00:04:07,120
with good compatibility and it's better

112
00:04:07,120 --> 00:04:08,879
to be software defined

113
00:04:08,879 --> 00:04:10,400
and so here's our solution we're just

114
00:04:10,400 --> 00:04:11,280
gonna

115
00:04:11,280 --> 00:04:13,519
we're gonna bring sgs to sav so you

116
00:04:13,519 --> 00:04:14,879
don't have to choose in terms of energy

117
00:04:14,879 --> 00:04:15,840
itself

118
00:04:15,840 --> 00:04:18,160
and it's got binary compatibility

119
00:04:18,160 --> 00:04:22,160
and we implemented using software

120
00:04:22,479 --> 00:04:24,400
so let's bring back to that table and

121
00:04:24,400 --> 00:04:26,160
you can see that

122
00:04:26,160 --> 00:04:29,040
for vsjx we got acid we got isolation

123
00:04:29,040 --> 00:04:30,880
based on top scv

124
00:04:30,880 --> 00:04:33,199
but the interface is now using written

125
00:04:33,199 --> 00:04:35,520
in software and it's adapted to sdx so

126
00:04:35,520 --> 00:04:39,280
you can just run hdf arm clips on it

127
00:04:39,280 --> 00:04:40,720
okay so

128
00:04:40,720 --> 00:04:42,639
i know it's a te session probably most

129
00:04:42,639 --> 00:04:44,720
of you are familiar with sgs and suv but

130
00:04:44,720 --> 00:04:46,880
just in case here's a quick tour to it

131
00:04:46,880 --> 00:04:49,280
so for sgx is there to

132
00:04:49,280 --> 00:04:52,479
to to prevent a an app from being picked

133
00:04:52,479 --> 00:04:55,280
by by the os you know os is super

134
00:04:55,280 --> 00:04:56,560
powerful they can just basically do

135
00:04:56,560 --> 00:05:00,400
anything but a good os well that's okay

136
00:05:00,400 --> 00:05:03,199
but if the os is a bad it's a bad one it

137
00:05:03,199 --> 00:05:05,840
can it can take your data it can even

138
00:05:05,840 --> 00:05:07,360
modify your data you can do a lot of

139
00:05:07,360 --> 00:05:08,479
things

140
00:05:08,479 --> 00:05:10,880
so intel basically said that if we put a

141
00:05:10,880 --> 00:05:13,039
portion of memory and

142
00:05:13,039 --> 00:05:15,440
execution outside the control of os and

143
00:05:15,440 --> 00:05:17,919
then trusted app and we just let the os

144
00:05:17,919 --> 00:05:19,520
to do management without actually

145
00:05:19,520 --> 00:05:21,280
touching the thing then you can protect

146
00:05:21,280 --> 00:05:23,120
the memory confidentiality and control

147
00:05:23,120 --> 00:05:25,039
flow

148
00:05:25,039 --> 00:05:27,680
so while that seems simple they gave a

149
00:05:27,680 --> 00:05:29,919
very quite straightforward workflow so

150
00:05:29,919 --> 00:05:31,600
basically you just create an empty

151
00:05:31,600 --> 00:05:34,320
enclave you add pages to it like your

152
00:05:34,320 --> 00:05:37,120
your binary page code pages to it

153
00:05:37,120 --> 00:05:38,960
and after that you cut you copy the

154
00:05:38,960 --> 00:05:40,240
measurement hash

155
00:05:40,240 --> 00:05:42,160
and you compile it with a signed version

156
00:05:42,160 --> 00:05:45,440
and if other parts your anchors launch

157
00:05:45,440 --> 00:05:47,600
and the control flow is

158
00:05:47,600 --> 00:05:49,759
it's like it's using a limited interface

159
00:05:49,759 --> 00:05:52,400
to prevent things from going wrong so so

160
00:05:52,400 --> 00:05:55,120
the for the from the untrusted app part

161
00:05:55,120 --> 00:05:57,440
you can do enter to specific

162
00:05:57,440 --> 00:05:59,280
to specific entry points

163
00:05:59,280 --> 00:06:00,960
and when exit will just set it back like

164
00:06:00,960 --> 00:06:02,960
a function call return

165
00:06:02,960 --> 00:06:04,479
and

166
00:06:04,479 --> 00:06:05,600
this

167
00:06:05,600 --> 00:06:07,039
intel defines something called e calls

168
00:06:07,039 --> 00:06:09,759
in the sdk such as a wrapper of en e

169
00:06:09,759 --> 00:06:11,919
exit to perform this stuff and it

170
00:06:11,919 --> 00:06:13,280
basically allows the entrance to have to

171
00:06:13,280 --> 00:06:15,680
just call these unclip functions like

172
00:06:15,680 --> 00:06:18,240
regular function calls

173
00:06:18,240 --> 00:06:19,120
and

174
00:06:19,120 --> 00:06:20,400
the memory access

175
00:06:20,400 --> 00:06:21,280
here

176
00:06:21,280 --> 00:06:23,520
the enclave is mapped into the same

177
00:06:23,520 --> 00:06:25,840
virtual address space as the entrance

178
00:06:25,840 --> 00:06:28,479
they are but the access is a single way

179
00:06:28,479 --> 00:06:30,880
access so the angular can access

180
00:06:30,880 --> 00:06:32,720
anything outside but the outside can't

181
00:06:32,720 --> 00:06:35,440
access anything inside

182
00:06:35,440 --> 00:06:37,840
well enough about sgs here is about scv

183
00:06:37,840 --> 00:06:40,400
and it's quite the same story like sgs

184
00:06:40,400 --> 00:06:41,919
but this time it's about vms and

185
00:06:41,919 --> 00:06:43,759
hypervisors so hypervisors in the past

186
00:06:43,759 --> 00:06:46,560
can just access vms like randomly but

187
00:06:46,560 --> 00:06:48,560
suv is here to defend against malicious

188
00:06:48,560 --> 00:06:49,840
hypervisor

189
00:06:49,840 --> 00:06:52,560
basically encrypts the entire vm and the

190
00:06:52,560 --> 00:06:54,639
vm can explicitly share data to the

191
00:06:54,639 --> 00:06:56,479
outside but not vice versa the

192
00:06:56,479 --> 00:06:58,639
hypervisor can't do anything

193
00:06:58,639 --> 00:07:00,800
and it allows you to deploy an encrypted

194
00:07:00,800 --> 00:07:02,319
image

195
00:07:02,319 --> 00:07:05,759
so the sjs mode is a fusion of the two

196
00:07:05,759 --> 00:07:08,160
so you can see we put the enclave what

197
00:07:08,160 --> 00:07:11,360
if we put the enclave into another as we

198
00:07:11,360 --> 00:07:13,599
protect the vm and to run it

199
00:07:13,599 --> 00:07:15,039
so it's still the same isolation as

200
00:07:15,039 --> 00:07:17,360
against the hypervisors against the os

201
00:07:17,360 --> 00:07:20,720
the regular os on the right side the app

202
00:07:20,720 --> 00:07:22,880
so

203
00:07:23,280 --> 00:07:24,800
but the design

204
00:07:24,800 --> 00:07:25,759
has some

205
00:07:25,759 --> 00:07:28,400
has some goals to be to remote in detail

206
00:07:28,400 --> 00:07:30,720
it's like we want a binary compatibility

207
00:07:30,720 --> 00:07:32,479
we want a comparable security guarantee

208
00:07:32,479 --> 00:07:34,800
with both sjs and their cv

209
00:07:34,800 --> 00:07:36,160
and we want the reasonable performance

210
00:07:36,160 --> 00:07:39,440
but why why the suv with why comparable

211
00:07:39,440 --> 00:07:42,800
with acv because we think vsjs should

212
00:07:42,800 --> 00:07:45,680
work like an ss module plugged directly

213
00:07:45,680 --> 00:07:48,560
onto an suv machine so your original vm

214
00:07:48,560 --> 00:07:50,879
should still be sv protected while the

215
00:07:50,879 --> 00:07:55,039
new vm well it's like the sjs module

216
00:07:55,039 --> 00:07:56,160
so

217
00:07:56,160 --> 00:07:57,840
the challenge

218
00:07:57,840 --> 00:07:59,840
is quite we got a lot of challenge right

219
00:07:59,840 --> 00:08:02,400
here so how do you do isolation how do

220
00:08:02,400 --> 00:08:05,120
you perform emulation so your memory

221
00:08:05,120 --> 00:08:07,120
access problem your how do we connect

222
00:08:07,120 --> 00:08:09,280
the components and joke how do you

223
00:08:09,280 --> 00:08:11,440
handle the control flow

224
00:08:11,440 --> 00:08:13,360
so unclear isolation like we talked

225
00:08:13,360 --> 00:08:17,199
about we put the enclave into a specific

226
00:08:17,199 --> 00:08:20,160
vm we call it enclave vm or evm and your

227
00:08:20,160 --> 00:08:23,440
original vm is called the avm or rpm so

228
00:08:23,440 --> 00:08:26,000
in the model it's a 2vm architecture and

229
00:08:26,000 --> 00:08:29,039
we put one single enclave per vm so this

230
00:08:29,039 --> 00:08:30,160
allows

231
00:08:30,160 --> 00:08:32,320
to perform enclave isolation

232
00:08:32,320 --> 00:08:33,919
and

233
00:08:33,919 --> 00:08:35,839
so you can see here the evm is basically

234
00:08:35,839 --> 00:08:38,559
what we talked about the vsjs module

235
00:08:38,559 --> 00:08:40,559
that plugs onto an suv machine and the

236
00:08:40,559 --> 00:08:43,760
avm is your good old vm where you deploy

237
00:08:43,760 --> 00:08:46,160
the user deploy

238
00:08:46,160 --> 00:08:47,519
but how do you handle instruction

239
00:08:47,519 --> 00:08:49,680
emulation like you don't have sdx

240
00:08:49,680 --> 00:08:50,720
instruction

241
00:08:50,720 --> 00:08:53,600
handling on suv so what we do what we

242
00:08:53,600 --> 00:08:55,040
did is that we

243
00:08:55,040 --> 00:08:57,200
hooked the ud trouble undefined

244
00:08:57,200 --> 00:08:59,920
instruction trap so in that handler we

245
00:08:59,920 --> 00:09:01,360
can check and emulate all the

246
00:09:01,360 --> 00:09:02,480
instructions

247
00:09:02,480 --> 00:09:05,279
but not that simple

248
00:09:05,279 --> 00:09:07,360
you see instructions

249
00:09:07,360 --> 00:09:09,519
sgs instructions works on sensitive data

250
00:09:09,519 --> 00:09:11,680
structures and must be protected so they

251
00:09:11,680 --> 00:09:14,959
must be handled within the evm right

252
00:09:14,959 --> 00:09:17,440
so what we did is that we

253
00:09:17,440 --> 00:09:19,600
we emulate everything according to intel

254
00:09:19,600 --> 00:09:22,320
sjs manual but we send we send the

255
00:09:22,320 --> 00:09:24,800
instruction emulation as a request to

256
00:09:24,800 --> 00:09:26,000
the evm

257
00:09:26,000 --> 00:09:28,080
and when the evm is done it send the

258
00:09:28,080 --> 00:09:30,080
result back so by this way we can ensure

259
00:09:30,080 --> 00:09:32,000
that all the instructions are emulated

260
00:09:32,000 --> 00:09:33,600
properly

261
00:09:33,600 --> 00:09:35,360
what about memory access you still

262
00:09:35,360 --> 00:09:38,080
remember the one way memory says so

263
00:09:38,080 --> 00:09:40,320
for intel they gave it a fancy name

264
00:09:40,320 --> 00:09:42,240
called epc but basically it's about this

265
00:09:42,240 --> 00:09:44,560
it's just the uncle protected memory and

266
00:09:44,560 --> 00:09:46,720
it's what they call angular page cache

267
00:09:46,720 --> 00:09:48,560
so it's quite trivial you just map pages

268
00:09:48,560 --> 00:09:50,480
to the evm because it's

269
00:09:50,480 --> 00:09:52,560
because it's isolated from the avm and

270
00:09:52,560 --> 00:09:54,959
from the hypervisor they can't access it

271
00:09:54,959 --> 00:09:56,720
but what about enclave trying to access

272
00:09:56,720 --> 00:09:58,480
something outside in the untrusted

273
00:09:58,480 --> 00:09:59,360
memory

274
00:09:59,360 --> 00:10:00,080
so

275
00:10:00,080 --> 00:10:02,320
what we performed is that what we did is

276
00:10:02,320 --> 00:10:03,440
that we performed something called

277
00:10:03,440 --> 00:10:06,560
session map mechanism is that when you

278
00:10:06,560 --> 00:10:08,800
fall into a page fault we'll just fetch

279
00:10:08,800 --> 00:10:11,120
that untrusted page from the avm towards

280
00:10:11,120 --> 00:10:14,800
the evm so that the unmarket to the evm

281
00:10:14,800 --> 00:10:16,720
so evm can access it the angle can

282
00:10:16,720 --> 00:10:19,839
access it and also because the because

283
00:10:19,839 --> 00:10:22,079
here's around two vms

284
00:10:22,079 --> 00:10:24,560
so the pages there are two two copies of

285
00:10:24,560 --> 00:10:26,320
the page so we also created something

286
00:10:26,320 --> 00:10:27,920
called the switches thinking which

287
00:10:27,920 --> 00:10:30,640
actually actively syncs across the two

288
00:10:30,640 --> 00:10:33,839
vm about the page changes

289
00:10:34,320 --> 00:10:35,200
so

290
00:10:35,200 --> 00:10:36,480
now we have to connect all the

291
00:10:36,480 --> 00:10:38,079
components together we got two vms with

292
00:10:38,079 --> 00:10:39,680
how do we connect it so we do something

293
00:10:39,680 --> 00:10:41,120
called cross vm communication and the

294
00:10:41,120 --> 00:10:42,560
challenge right here is uh is to

295
00:10:42,560 --> 00:10:45,120
remember the avm is suv protected

296
00:10:45,120 --> 00:10:48,000
so we can't just we have to rely on the

297
00:10:48,000 --> 00:10:50,480
hypervisor of course we can do tcp right

298
00:10:50,480 --> 00:10:51,920
but they're just slow

299
00:10:51,920 --> 00:10:54,240
so for performance-wise we implemented

300
00:10:54,240 --> 00:10:56,560
our own mechanism which based on sharing

301
00:10:56,560 --> 00:10:58,000
memory

302
00:10:58,000 --> 00:10:58,959
and

303
00:10:58,959 --> 00:11:00,240
you don't want everyone to share

304
00:11:00,240 --> 00:11:01,760
anything to hypervisor because that's

305
00:11:01,760 --> 00:11:03,920
what we then just that would reach sv

306
00:11:03,920 --> 00:11:05,279
security so

307
00:11:05,279 --> 00:11:07,279
what we did is that we encrypted the

308
00:11:07,279 --> 00:11:09,279
whole memory channel and we simulated it

309
00:11:09,279 --> 00:11:11,360
so it means that you the hypervisor

310
00:11:11,360 --> 00:11:15,440
can't alter anything or just fault and

311
00:11:15,440 --> 00:11:18,240
we also pre we also use a unique session

312
00:11:18,240 --> 00:11:22,480
number to prevent replay attach

313
00:11:22,640 --> 00:11:25,120
what about control flow what about

314
00:11:25,120 --> 00:11:26,720
calling this and calling those click

315
00:11:26,720 --> 00:11:28,240
functions so i know a lot of guy cares

316
00:11:28,240 --> 00:11:30,240
about that so

317
00:11:30,240 --> 00:11:32,800
just like sgs we use the enter and exit

318
00:11:32,800 --> 00:11:35,680
also we handle the routine of aex to

319
00:11:35,680 --> 00:11:38,240
feature of sjs which handles the fault

320
00:11:38,240 --> 00:11:39,600
happening the

321
00:11:39,600 --> 00:11:42,079
in the sjs enclave

322
00:11:42,079 --> 00:11:44,000
and for yen it's quite simple so you

323
00:11:44,000 --> 00:11:46,399
just first perform an enter so and send

324
00:11:46,399 --> 00:11:48,640
that request to evm and

325
00:11:48,640 --> 00:11:51,760
we create a new thread for it to execute

326
00:11:51,760 --> 00:11:52,959
but that's

327
00:11:52,959 --> 00:11:55,519
we tell the avm to we tell the avian to

328
00:11:55,519 --> 00:11:58,160
put the original thread to sleep

329
00:11:58,160 --> 00:12:00,240
and now you have something execute

330
00:12:00,240 --> 00:12:02,240
executing in the evm the original

331
00:12:02,240 --> 00:12:05,360
spreadsheet sleeping right there

332
00:12:05,360 --> 00:12:08,880
for exit the enclave tries to exit the

333
00:12:08,880 --> 00:12:11,600
exits from the enclave

334
00:12:11,600 --> 00:12:13,600
the thread will be killed

335
00:12:13,600 --> 00:12:14,959
in the evm

336
00:12:14,959 --> 00:12:16,720
and the uvm thread will be working off

337
00:12:16,720 --> 00:12:18,320
again to

338
00:12:18,320 --> 00:12:20,639
return back to execution

339
00:12:20,639 --> 00:12:24,480
here's something similar but reversed so

340
00:12:24,480 --> 00:12:27,040
that would be a very detailed design so

341
00:12:27,040 --> 00:12:29,920
it's quite similar but just rivers

342
00:12:29,920 --> 00:12:32,000
so we've implemented our prototype using

343
00:12:32,000 --> 00:12:34,399
16 000 lines of code but most of them in

344
00:12:34,399 --> 00:12:36,320
the kernel and they're done in c is

345
00:12:36,320 --> 00:12:38,720
quite a large work so we tested the

346
00:12:38,720 --> 00:12:41,040
whole system on an amd epic 7251

347
00:12:41,040 --> 00:12:42,880
processor

348
00:12:42,880 --> 00:12:44,160
and

349
00:12:44,160 --> 00:12:46,079
the result is is here we tested the

350
00:12:46,079 --> 00:12:48,959
capability so we can run wolf ssl the

351
00:12:48,959 --> 00:12:50,639
cryptographic library

352
00:12:50,639 --> 00:12:52,480
we got some bite mark we got bike mark

353
00:12:52,480 --> 00:12:53,760
running on it

354
00:12:53,760 --> 00:12:56,639
uh we also got the intel gmp

355
00:12:56,639 --> 00:12:59,360
gmp library for intel sgx

356
00:12:59,360 --> 00:13:02,800
and as a review requested we run grayson

357
00:13:02,800 --> 00:13:06,079
sgx which is a large label os

358
00:13:06,079 --> 00:13:08,000
so here the performance well the figures

359
00:13:08,000 --> 00:13:10,240
are too small and like but they boils

360
00:13:10,240 --> 00:13:13,120
down to this table and what what's that

361
00:13:13,120 --> 00:13:15,519
it means the average overhead of an

362
00:13:15,519 --> 00:13:17,519
enclave system instruction

363
00:13:17,519 --> 00:13:19,279
is is about

364
00:13:19,279 --> 00:13:21,279
it's about one microsecond one

365
00:13:21,279 --> 00:13:22,480
microsecond

366
00:13:22,480 --> 00:13:24,720
oh sorry one millisecond and for the

367
00:13:24,720 --> 00:13:27,360
angular user instruction it can run as

368
00:13:27,360 --> 00:13:29,680
slow as 0.79

369
00:13:29,680 --> 00:13:33,200
microseconds or about 1891 when it

370
00:13:33,200 --> 00:13:36,160
involves in cryptographic actions

371
00:13:36,160 --> 00:13:38,000
but how does that turns into real-world

372
00:13:38,000 --> 00:13:39,360
performance

373
00:13:39,360 --> 00:13:41,519
and we run bite mark

374
00:13:41,519 --> 00:13:43,360
here's the comparison so we divided the

375
00:13:43,360 --> 00:13:44,800
score of

376
00:13:44,800 --> 00:13:46,480
vanilla mdsv

377
00:13:46,480 --> 00:13:49,519
vm to hours to our score and also an

378
00:13:49,519 --> 00:13:52,000
intel hdx from the intel sgs machine

379
00:13:52,000 --> 00:13:53,040
just for

380
00:13:53,040 --> 00:13:55,600
for a comparison so you can see them

381
00:13:55,600 --> 00:13:57,839
while more than half of them showed some

382
00:13:57,839 --> 00:13:59,279
similar scores

383
00:13:59,279 --> 00:14:01,360
uh affiliates show some very staggering

384
00:14:01,360 --> 00:14:03,600
and overwhelming difference

385
00:14:03,600 --> 00:14:06,560
so the performance drop right here

386
00:14:06,560 --> 00:14:08,240
is only observed from i o intensive

387
00:14:08,240 --> 00:14:10,160
workload and that means you fetch a lot

388
00:14:10,160 --> 00:14:12,079
of like untrusted memories or you do a

389
00:14:12,079 --> 00:14:13,839
lot of equals which

390
00:14:13,839 --> 00:14:14,639
which

391
00:14:14,639 --> 00:14:16,959
which turns into a lot of ambulation and

392
00:14:16,959 --> 00:14:18,399
that'll be slow but otherwise it will be

393
00:14:18,399 --> 00:14:20,560
just just fine

394
00:14:20,560 --> 00:14:22,160
and for griffin the launching is quite

395
00:14:22,160 --> 00:14:23,600
slow because it's a very very large

396
00:14:23,600 --> 00:14:26,079
anchor it's about 256 megabytes

397
00:14:26,079 --> 00:14:27,519
but you can see that most of the time

398
00:14:27,519 --> 00:14:30,320
right there uh the the light light

399
00:14:30,320 --> 00:14:32,720
colored part is wasted on the extent

400
00:14:32,720 --> 00:14:34,959
which calculates the measurement hash

401
00:14:34,959 --> 00:14:36,399
so we think that

402
00:14:36,399 --> 00:14:38,880
extent only calculates 256 wides each

403
00:14:38,880 --> 00:14:41,360
time and we think you can pack all of

404
00:14:41,360 --> 00:14:43,519
a lot of multiple e stands into one

405
00:14:43,519 --> 00:14:45,199
request so we can accelerate the

406
00:14:45,199 --> 00:14:46,720
performance

407
00:14:46,720 --> 00:14:49,440
and for crl the performance is like

408
00:14:49,440 --> 00:14:51,440
seven times slower because it

409
00:14:51,440 --> 00:14:53,760
is doing a lot of ios and you know

410
00:14:53,760 --> 00:14:54,800
networking

411
00:14:54,800 --> 00:14:56,639
but when it comes to a pure computation

412
00:14:56,639 --> 00:14:58,639
workload like gmp bench it's quite

413
00:14:58,639 --> 00:15:01,760
similar the performance

414
00:15:01,760 --> 00:15:04,000
and one of the most important

415
00:15:04,000 --> 00:15:05,920
application in the enclave is about

416
00:15:05,920 --> 00:15:09,279
cryptographic so we tested wolf crypt

417
00:15:09,279 --> 00:15:12,160
the result right here is about 0.9 times

418
00:15:12,160 --> 00:15:13,519
lower than

419
00:15:13,519 --> 00:15:16,639
than intel sgx so we think that's a very

420
00:15:16,639 --> 00:15:20,000
reasonable slowdown and

421
00:15:21,199 --> 00:15:24,000
so here's the vhf system but it's not

422
00:15:24,000 --> 00:15:25,920
perfect and we think there are a lot of

423
00:15:25,920 --> 00:15:28,160
features can be done for example

424
00:15:28,160 --> 00:15:31,120
now in the evm we run a linux kernel

425
00:15:31,120 --> 00:15:33,519
that's because i'm familiar with it

426
00:15:33,519 --> 00:15:36,560
but but actually for sjx you don't have

427
00:15:36,560 --> 00:15:38,880
to you can't just run any system

428
00:15:38,880 --> 00:15:41,040
you can't run any cisco inside the vm so

429
00:15:41,040 --> 00:15:42,240
it does not have to be project

430
00:15:42,240 --> 00:15:44,079
compatible and we think cell phone can

431
00:15:44,079 --> 00:15:45,759
be a good choice if we get supported on

432
00:15:45,759 --> 00:15:47,040
scv

433
00:15:47,040 --> 00:15:50,160
and if the user does not need avm to be

434
00:15:50,160 --> 00:15:52,560
sv protected you don't have to do all

435
00:15:52,560 --> 00:15:54,079
those encryptions you can also map on

436
00:15:54,079 --> 00:15:55,839
trusted pages to the

437
00:15:55,839 --> 00:15:58,160
to the evm for perform for even higher

438
00:15:58,160 --> 00:16:00,800
performance in real time

439
00:16:00,800 --> 00:16:04,160
and also you can see that the method is

440
00:16:04,160 --> 00:16:06,560
quite generic so we are now virtualizing

441
00:16:06,560 --> 00:16:09,040
sjs sound in the scv but how would you

442
00:16:09,040 --> 00:16:10,959
feel about

443
00:16:10,959 --> 00:16:13,440
virtualizing sjs on clicks on intel

444
00:16:13,440 --> 00:16:15,040
mktme

445
00:16:15,040 --> 00:16:18,399
or what about retrosome

446
00:16:18,399 --> 00:16:20,079
so here's the conclusion

447
00:16:20,079 --> 00:16:22,160
we emulated sjs

448
00:16:22,160 --> 00:16:24,720
on scv with binary compatibility so we

449
00:16:24,720 --> 00:16:26,800
released sjs from vendor login we

450
00:16:26,800 --> 00:16:29,519
decoupled sjs from hardware

451
00:16:29,519 --> 00:16:33,519
and the whole system software defined

452
00:16:33,920 --> 00:16:35,839
so i'd like to take a question and you

453
00:16:35,839 --> 00:16:38,639
can just get get your copy of vsjs from

454
00:16:38,639 --> 00:16:40,079
github right now

455
00:16:40,079 --> 00:16:43,120
or you can just visit the two labs

456
00:16:43,120 --> 00:16:44,320
home page

457
00:16:44,320 --> 00:16:45,630
thank you

458
00:16:45,630 --> 00:16:51,279
[Applause]

459
00:16:51,279 --> 00:16:54,480
good we have time for questions

460
00:16:56,000 --> 00:17:00,600
yeah back here going up to a microphone

461
00:17:08,880 --> 00:17:11,359
so thank you great talk uh i like you

462
00:17:11,359 --> 00:17:13,119
said i'm andreas kobler i'm from the

463
00:17:13,119 --> 00:17:14,959
heart university of technology and i

464
00:17:14,959 --> 00:17:17,199
just wanted to ask you are there any

465
00:17:17,199 --> 00:17:20,240
plans for generalizing attestation in

466
00:17:20,240 --> 00:17:21,760
trusted execution environments if they

467
00:17:21,760 --> 00:17:24,319
simulated

468
00:17:24,640 --> 00:17:27,119
so is the part of me can you feel it so

469
00:17:27,119 --> 00:17:29,360
the attestation usually relies highly on

470
00:17:29,360 --> 00:17:31,360
the cpu you want to state that you are

471
00:17:31,360 --> 00:17:32,400
running on

472
00:17:32,400 --> 00:17:35,200
a certain cpu on that system yeah so how

473
00:17:35,200 --> 00:17:37,919
would you virtualize that in some regard

474
00:17:37,919 --> 00:17:39,760
oh okay i i know what you mean so you

475
00:17:39,760 --> 00:17:41,360
mean how do you virtualize the

476
00:17:41,360 --> 00:17:43,840
attestation in vsjs yeah for instance

477
00:17:43,840 --> 00:17:47,200
yeah so in intel sgx the attestation is

478
00:17:47,200 --> 00:17:49,840
based on a secret based into the cpu

479
00:17:49,840 --> 00:17:53,360
it's a 128 bit long integer basically

480
00:17:53,360 --> 00:17:55,120
and all the keys are derived from it so

481
00:17:55,120 --> 00:17:56,640
you can derive the secret from it and

482
00:17:56,640 --> 00:17:59,120
just use this to sign the reports and

483
00:17:59,120 --> 00:18:00,720
here in our system

484
00:18:00,720 --> 00:18:03,360
uh we bake the same secrets into the

485
00:18:03,360 --> 00:18:05,840
into the as into the evm kernel so you

486
00:18:05,840 --> 00:18:06,880
can see

487
00:18:06,880 --> 00:18:09,039
i mean okay

488
00:18:09,039 --> 00:18:10,799
okay i just found a random picture so

489
00:18:10,799 --> 00:18:13,360
you can see here so we just break the

490
00:18:13,360 --> 00:18:16,080
same secret into the onclick channel and

491
00:18:16,080 --> 00:18:17,600
you can see that

492
00:18:17,600 --> 00:18:19,600
sev allows

493
00:18:19,600 --> 00:18:21,120
deploying an encrypted image so you can

494
00:18:21,120 --> 00:18:23,120
just pre-bake it into that but also you

495
00:18:23,120 --> 00:18:26,559
can use suv's a test data to provision

496
00:18:26,559 --> 00:18:28,559
provision a new secret into the evm

497
00:18:28,559 --> 00:18:31,360
either so it's quite flexible but

498
00:18:31,360 --> 00:18:33,360
semantic wise you just need that secret

499
00:18:33,360 --> 00:18:36,160
and you can do all all things

500
00:18:36,160 --> 00:18:38,960
okay yeah thank you

501
00:18:40,480 --> 00:18:43,919
hi uh i'm sam kamar from uc berkeley um

502
00:18:43,919 --> 00:18:45,760
my understanding is that some of these

503
00:18:45,760 --> 00:18:47,120
hardware enclaves have different

504
00:18:47,120 --> 00:18:48,720
security guarantees from others for

505
00:18:48,720 --> 00:18:50,320
example i've heard that some earlier

506
00:18:50,320 --> 00:18:52,480
versions of amd's enclaves for example

507
00:18:52,480 --> 00:18:54,640
have weaker integrity protection

508
00:18:54,640 --> 00:18:55,520
um

509
00:18:55,520 --> 00:18:58,720
does that affect so so if i use uh vsgx

510
00:18:58,720 --> 00:19:00,960
to run an sgx enclave on spot for

511
00:19:00,960 --> 00:19:02,960
example a different hardware enclave do

512
00:19:02,960 --> 00:19:04,880
i still get the same security guarantees

513
00:19:04,880 --> 00:19:07,200
as sgx or could that change depending on

514
00:19:07,200 --> 00:19:09,280
the enclave i'm actually running it on

515
00:19:09,280 --> 00:19:12,320
uh yeah that's a very great question and

516
00:19:12,320 --> 00:19:13,440
so in

517
00:19:13,440 --> 00:19:17,280
so we can't claim the exact security but

518
00:19:17,280 --> 00:19:19,120
it's a comparable security because

519
00:19:19,120 --> 00:19:21,520
because the of the isolation and we

520
00:19:21,520 --> 00:19:24,480
think that in suv so there are a lot of

521
00:19:24,480 --> 00:19:26,960
a lot of attacks targeting scv but they

522
00:19:26,960 --> 00:19:29,760
have fixes in the recent updates and for

523
00:19:29,760 --> 00:19:33,280
the suv smp is quite it's it's like it's

524
00:19:33,280 --> 00:19:35,520
it's quite fully featured and

525
00:19:35,520 --> 00:19:36,960
and the isolation is quite strong

526
00:19:36,960 --> 00:19:38,720
actually yeah so

527
00:19:38,720 --> 00:19:40,799
yeah there can be some difference in

528
00:19:40,799 --> 00:19:43,440
this but i think overall the idea here

529
00:19:43,440 --> 00:19:44,720
is about

530
00:19:44,720 --> 00:19:46,640
the it's about the isolation is done by

531
00:19:46,640 --> 00:19:48,480
hardware and as long as that isolation

532
00:19:48,480 --> 00:19:49,840
is guaranteed

533
00:19:49,840 --> 00:19:52,720
as they claimed then we can adapt these

534
00:19:52,720 --> 00:19:54,480
models together

535
00:19:54,480 --> 00:19:55,840
to each other yeah

536
00:19:55,840 --> 00:19:58,480
okay thank you

537
00:19:58,480 --> 00:20:01,440
okay more questions

538
00:20:01,440 --> 00:20:03,120
all right let's uh let's move on and

539
00:20:03,120 --> 00:20:04,960
let's thank the speaker

540
00:20:04,960 --> 00:20:07,760
thank you

