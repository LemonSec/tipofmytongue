1
00:00:01,839 --> 00:00:04,000
all right hi everyone i'm jose and i'm

2
00:00:04,000 --> 00:00:06,720
going to be presenting augury using data

3
00:00:06,720 --> 00:00:08,559
data memory dependent prefetchers to

4
00:00:08,559 --> 00:00:10,240
leak data at rest

5
00:00:10,240 --> 00:00:11,920
this work is done in collaboration with

6
00:00:11,920 --> 00:00:14,160
michael flanders my co-founders author

7
00:00:14,160 --> 00:00:15,599
as well as a broad team across the

8
00:00:15,599 --> 00:00:17,440
university of washington

9
00:00:17,440 --> 00:00:19,279
tel aviv university and the university

10
00:00:19,279 --> 00:00:21,840
of illinois at urbana-champaign

11
00:00:21,840 --> 00:00:23,439
there is a vast body of work on

12
00:00:23,439 --> 00:00:25,119
leveraging microarchitectural side

13
00:00:25,119 --> 00:00:27,279
channels to leak data attackers have

14
00:00:27,279 --> 00:00:28,800
used everything for speculative

15
00:00:28,800 --> 00:00:31,119
execution and computation simplification

16
00:00:31,119 --> 00:00:33,040
to stream prefetching and even on-chip

17
00:00:33,040 --> 00:00:34,480
interconnects

18
00:00:34,480 --> 00:00:36,160
however all these attacks have something

19
00:00:36,160 --> 00:00:38,640
in common they all leak architecturally

20
00:00:38,640 --> 00:00:40,879
access data consider a cache side

21
00:00:40,879 --> 00:00:42,719
channel attack where the adversary is

22
00:00:42,719 --> 00:00:44,640
targeting this secret

23
00:00:44,640 --> 00:00:46,480
first the data is going to be read into

24
00:00:46,480 --> 00:00:48,399
the core either speculatively or

25
00:00:48,399 --> 00:00:50,160
non-speculatively

26
00:00:50,160 --> 00:00:52,079
and then it's going to be acted on by an

27
00:00:52,079 --> 00:00:54,399
instruction this action is going to

28
00:00:54,399 --> 00:00:56,480
change resource usage in an operand

29
00:00:56,480 --> 00:00:58,800
dependent fashion in this case that

30
00:00:58,800 --> 00:01:00,399
might be through the use of the secret

31
00:01:00,399 --> 00:01:03,440
as an offset into an array as inspector

32
00:01:03,440 --> 00:01:05,680
this operation leaves behind a trace in

33
00:01:05,680 --> 00:01:07,760
the cache which an adversary can then

34
00:01:07,760 --> 00:01:09,520
observe

35
00:01:09,520 --> 00:01:11,360
in this paper we present the first

36
00:01:11,360 --> 00:01:13,600
microarchitectural attack which leaks

37
00:01:13,600 --> 00:01:15,680
data that was never directly read into

38
00:01:15,680 --> 00:01:17,840
the core either speculatively or

39
00:01:17,840 --> 00:01:19,680
non-speculatively

40
00:01:19,680 --> 00:01:22,479
that is our attack now looks like this

41
00:01:22,479 --> 00:01:24,640
the secret data never flows into the

42
00:01:24,640 --> 00:01:26,720
core

43
00:01:26,720 --> 00:01:28,640
this attack is made possible by a

44
00:01:28,640 --> 00:01:30,240
previously unreported class of

45
00:01:30,240 --> 00:01:32,400
prefetcher a data memory dependent

46
00:01:32,400 --> 00:01:34,560
prefetcher or dmp

47
00:01:34,560 --> 00:01:36,880
unlike well-known and widely implemented

48
00:01:36,880 --> 00:01:39,280
prefetchers whose behavior is purely a

49
00:01:39,280 --> 00:01:41,600
function of the program address pattern

50
00:01:41,600 --> 00:01:44,960
dmps read and initiate cash fills based

51
00:01:44,960 --> 00:01:47,119
on the contents of program data memory

52
00:01:47,119 --> 00:01:48,320
directly

53
00:01:48,320 --> 00:01:51,200
we leverage the dmp to leak memory

54
00:01:51,200 --> 00:01:53,439
without relying on transient instruction

55
00:01:53,439 --> 00:01:55,200
execution

56
00:01:55,200 --> 00:01:57,600
prefetchers are next in sequence address

57
00:01:57,600 --> 00:02:00,000
predictors that proactively fetch data

58
00:02:00,000 --> 00:02:01,920
into the cache to help hide memory

59
00:02:01,920 --> 00:02:02,960
lensing

60
00:02:02,960 --> 00:02:05,040
importantly they live in the memory

61
00:02:05,040 --> 00:02:08,080
system and are software transparent

62
00:02:08,080 --> 00:02:09,919
meaning that they're unaware of any

63
00:02:09,919 --> 00:02:11,840
program semantics including memory

64
00:02:11,840 --> 00:02:13,280
bounds

65
00:02:13,280 --> 00:02:15,760
for example let's consider this piece of

66
00:02:15,760 --> 00:02:17,200
code that i'm sure we've all written in

67
00:02:17,200 --> 00:02:18,480
the past

68
00:02:18,480 --> 00:02:20,720
we're simply traversing an array a here

69
00:02:20,720 --> 00:02:22,560
at a constant stride of k

70
00:02:22,560 --> 00:02:24,560
now the prefetcher is going to see our

71
00:02:24,560 --> 00:02:26,000
memory accesses

72
00:02:26,000 --> 00:02:28,400
recognize what they are and begin

73
00:02:28,400 --> 00:02:30,319
issuing prefetches now we're going to

74
00:02:30,319 --> 00:02:32,160
see a very significant speed up on this

75
00:02:32,160 --> 00:02:34,560
code pattern it's very easy pattern to

76
00:02:34,560 --> 00:02:36,560
to predict now essentially we're going

77
00:02:36,560 --> 00:02:38,879
to make a small but very significant

78
00:02:38,879 --> 00:02:40,160
change

79
00:02:40,160 --> 00:02:43,040
let's add a pointer dereference of each

80
00:02:43,040 --> 00:02:45,760
element in the array a

81
00:02:45,760 --> 00:02:47,440
now the classical prefetcher at this

82
00:02:47,440 --> 00:02:49,280
point is going to still prefetch a but

83
00:02:49,280 --> 00:02:50,720
it's going to throw up its hands there's

84
00:02:50,720 --> 00:02:52,000
really nothing it can do about the

85
00:02:52,000 --> 00:02:53,599
pointers

86
00:02:53,599 --> 00:02:56,400
except here is where dmps come in now

87
00:02:56,400 --> 00:03:00,400
dmps prefetch irregular data dependent

88
00:03:00,400 --> 00:03:03,280
access patterns such as pointer traces

89
00:03:03,280 --> 00:03:05,200
or in directions

90
00:03:05,200 --> 00:03:06,800
these data

91
00:03:06,800 --> 00:03:08,720
sorry these data dependent access

92
00:03:08,720 --> 00:03:10,800
patterns require understanding

93
00:03:10,800 --> 00:03:13,440
dependencies between the address pattern

94
00:03:13,440 --> 00:03:16,159
and the contents of memory itself

95
00:03:16,159 --> 00:03:17,920
where the classical prefetcher was

96
00:03:17,920 --> 00:03:20,400
looking at the outgoing addresses the

97
00:03:20,400 --> 00:03:21,519
dmp

98
00:03:21,519 --> 00:03:24,159
is monitoring both outgoing addresses

99
00:03:24,159 --> 00:03:26,879
and incoming data and it's matching them

100
00:03:26,879 --> 00:03:29,200
it's reading the data that's coming in

101
00:03:29,200 --> 00:03:31,519
it's interpreting it realizing that hey

102
00:03:31,519 --> 00:03:33,760
this is a pointer and i'm going to

103
00:03:33,760 --> 00:03:36,159
de-reference it

104
00:03:36,159 --> 00:03:38,640
now of course whatever the dmp does is

105
00:03:38,640 --> 00:03:41,760
going to leak something about memory

106
00:03:41,760 --> 00:03:43,599
let's look at it a different way

107
00:03:43,599 --> 00:03:45,280
we're streaming through this array a

108
00:03:45,280 --> 00:03:47,120
performing d references

109
00:03:47,120 --> 00:03:49,040
a is prefetchable by a conventional

110
00:03:49,040 --> 00:03:50,959
prefetcher but the conventional

111
00:03:50,959 --> 00:03:53,840
prefetcher doesn't know the bounds of a

112
00:03:53,840 --> 00:03:56,959
it lives in memory so it overshoots and

113
00:03:56,959 --> 00:03:58,480
accidentally brings the secret pointer

114
00:03:58,480 --> 00:04:00,560
into the cache now if we're on any other

115
00:04:00,560 --> 00:04:02,159
system this is actually no problem the

116
00:04:02,159 --> 00:04:04,159
secret pointers in the cache we might

117
00:04:04,159 --> 00:04:06,239
not have even speculated past the end of

118
00:04:06,239 --> 00:04:07,920
the loop we might be employing a

119
00:04:07,920 --> 00:04:10,080
spectrum mitigation like slh

120
00:04:10,080 --> 00:04:12,239
it has not been architecturally accessed

121
00:04:12,239 --> 00:04:14,720
and the secret pointer is actually safe

122
00:04:14,720 --> 00:04:17,279
but now we add in a dmp

123
00:04:17,279 --> 00:04:19,600
the dmp also doesn't know the bounds of

124
00:04:19,600 --> 00:04:21,600
a and says hey you know what i'm going

125
00:04:21,600 --> 00:04:23,040
to prefetch this for you i'm going to

126
00:04:23,040 --> 00:04:24,479
de-reference it

127
00:04:24,479 --> 00:04:26,560
and now i've brought it into the cache

128
00:04:26,560 --> 00:04:29,199
and now i've created a channel which an

129
00:04:29,199 --> 00:04:31,520
adversary can observe they can realize

130
00:04:31,520 --> 00:04:34,720
hey this was a pointer it got brought in

131
00:04:34,720 --> 00:04:37,280
how then can we prove the existence of

132
00:04:37,280 --> 00:04:40,320
such a dmp in the m1

133
00:04:40,320 --> 00:04:43,360
well dmps try to detect associations

134
00:04:43,360 --> 00:04:45,759
between addresses outgoing from the core

135
00:04:45,759 --> 00:04:48,240
and data incoming to the core

136
00:04:48,240 --> 00:04:51,280
so to test for the existence of a dmp

137
00:04:51,280 --> 00:04:53,520
we need two programs which are the same

138
00:04:53,520 --> 00:04:54,840
except for this

139
00:04:54,840 --> 00:04:57,120
association we give details in the paper

140
00:04:57,120 --> 00:04:58,639
but i'll explain the high level idea

141
00:04:58,639 --> 00:04:59,440
here

142
00:04:59,440 --> 00:05:01,280
we're going to start with an access

143
00:05:01,280 --> 00:05:03,600
pattern that we hypothesize should be

144
00:05:03,600 --> 00:05:06,400
prefetchable via dmp

145
00:05:06,400 --> 00:05:08,400
next we're going to construct a second

146
00:05:08,400 --> 00:05:10,400
program a baseline

147
00:05:10,400 --> 00:05:12,000
now this program is going to have the

148
00:05:12,000 --> 00:05:14,560
same outgoing addresses and execute the

149
00:05:14,560 --> 00:05:17,120
same instructions as the first

150
00:05:17,120 --> 00:05:18,960
except we're going to get rid of the

151
00:05:18,960 --> 00:05:21,280
incoming data the addresses that are

152
00:05:21,280 --> 00:05:23,280
dereferenced are going to be generated

153
00:05:23,280 --> 00:05:26,240
on the fly using a prng that is the same

154
00:05:26,240 --> 00:05:28,880
that has the same seed as what we use to

155
00:05:28,880 --> 00:05:31,840
populate array a

156
00:05:31,840 --> 00:05:33,520
this is the average access time for that

157
00:05:33,520 --> 00:05:35,919
baseline and this is the average access

158
00:05:35,919 --> 00:05:37,440
time for the pointer based access

159
00:05:37,440 --> 00:05:38,800
pattern

160
00:05:38,800 --> 00:05:41,120
there's a significant speed up

161
00:05:41,120 --> 00:05:43,840
this is evidence that a dmp capable of

162
00:05:43,840 --> 00:05:46,000
prefetching through exactly this access

163
00:05:46,000 --> 00:05:49,600
pattern is present in the m1

164
00:05:49,600 --> 00:05:52,560
similarly we tried other dmp friendly

165
00:05:52,560 --> 00:05:54,320
access patterns and found that they do

166
00:05:54,320 --> 00:05:56,240
not derive speed up

167
00:05:56,240 --> 00:05:58,639
finally we performed multiple tests and

168
00:05:58,639 --> 00:06:00,800
took measures to ensure that this

169
00:06:00,800 --> 00:06:03,600
behavior is the effect of a dmp and not

170
00:06:03,600 --> 00:06:05,360
another optimization like say

171
00:06:05,360 --> 00:06:07,680
speculative execution

172
00:06:07,680 --> 00:06:09,039
there's a lot of reverse engineering

173
00:06:09,039 --> 00:06:10,720
details that go into this unfortunately

174
00:06:10,720 --> 00:06:11,440
they're

175
00:06:11,440 --> 00:06:13,199
i'm gonna have to omit them for time but

176
00:06:13,199 --> 00:06:14,479
they are in the paper and i encourage

177
00:06:14,479 --> 00:06:16,080
you to take a look

178
00:06:16,080 --> 00:06:18,080
so let's discuss how we can exploit this

179
00:06:18,080 --> 00:06:19,520
dmp

180
00:06:19,520 --> 00:06:21,919
in the paper we demonstrate a proof of

181
00:06:21,919 --> 00:06:24,880
concept which uses the dmp to read past

182
00:06:24,880 --> 00:06:26,560
the end of a buffer

183
00:06:26,560 --> 00:06:28,800
so a conventional prefetcher overshoots

184
00:06:28,800 --> 00:06:30,560
the bounds of the array and allows the

185
00:06:30,560 --> 00:06:32,800
dmp to dereference a pointer in memory

186
00:06:32,800 --> 00:06:34,639
which would not have otherwise been

187
00:06:34,639 --> 00:06:36,240
dereferenced

188
00:06:36,240 --> 00:06:38,080
this action allows an attacker to

189
00:06:38,080 --> 00:06:40,080
determine whether a pointer is valid and

190
00:06:40,080 --> 00:06:44,159
possibly even the value of the pointer

191
00:06:44,720 --> 00:06:46,800
we also target address space layout

192
00:06:46,800 --> 00:06:49,360
randomization or aslr

193
00:06:49,360 --> 00:06:52,080
aslr is a widely deployed defense which

194
00:06:52,080 --> 00:06:54,880
prevents attackers from knowing a priori

195
00:06:54,880 --> 00:06:57,039
the locations of important parts of a

196
00:06:57,039 --> 00:06:59,039
program in memory

197
00:06:59,039 --> 00:07:00,800
it does this by randomizing the

198
00:07:00,800 --> 00:07:02,880
locations of portions of a program such

199
00:07:02,880 --> 00:07:05,840
as the stack heap code and libraries

200
00:07:05,840 --> 00:07:08,400
breaking aslr that is discovering the

201
00:07:08,400 --> 00:07:10,720
virtual addresses of code and data pages

202
00:07:10,720 --> 00:07:14,720
is a core step in many larger exploits

203
00:07:14,720 --> 00:07:17,280
we show how the dmp can be used to check

204
00:07:17,280 --> 00:07:20,160
whether an arbitrary pointer maps to

205
00:07:20,160 --> 00:07:21,840
valid memory

206
00:07:21,840 --> 00:07:24,800
and thus aid in breaking aslr

207
00:07:24,800 --> 00:07:27,120
using the dmp rather than say a cache

208
00:07:27,120 --> 00:07:29,280
side channel removes the need for

209
00:07:29,280 --> 00:07:31,199
knowledge of the cash system or for

210
00:07:31,199 --> 00:07:32,880
creating eviction sets and is

211
00:07:32,880 --> 00:07:36,080
significantly less noisy

212
00:07:36,080 --> 00:07:38,240
next let's take a look at a fascinating

213
00:07:38,240 --> 00:07:41,520
scenario speculative load hardening

214
00:07:41,520 --> 00:07:42,639
slh

215
00:07:42,639 --> 00:07:44,240
is a defense against conditional

216
00:07:44,240 --> 00:07:47,199
branch-based speculative attacks specter

217
00:07:47,199 --> 00:07:48,400
number one

218
00:07:48,400 --> 00:07:50,639
it's going to take this code pattern

219
00:07:50,639 --> 00:07:52,879
and add a branchless recheck of the

220
00:07:52,879 --> 00:07:55,360
conditional within each iteration now in

221
00:07:55,360 --> 00:07:57,520
the first pattern we have a loop which

222
00:07:57,520 --> 00:07:59,360
can easily exceed its bounds and it's

223
00:07:59,360 --> 00:08:00,960
going to bring something into the cache

224
00:08:00,960 --> 00:08:02,800
we're going to see our pointer get

225
00:08:02,800 --> 00:08:04,400
brought in possibly dereferenced

226
00:08:04,400 --> 00:08:05,919
speculatively

227
00:08:05,919 --> 00:08:08,639
slh what it does is it ensures that the

228
00:08:08,639 --> 00:08:11,440
load will behave normally only if the

229
00:08:11,440 --> 00:08:13,599
branch has been predicted correctly

230
00:08:13,599 --> 00:08:15,199
from the point of view of the core we're

231
00:08:15,199 --> 00:08:17,440
safe

232
00:08:19,360 --> 00:08:20,560
critically

233
00:08:20,560 --> 00:08:22,080
that is only from the point of view of

234
00:08:22,080 --> 00:08:23,120
the core

235
00:08:23,120 --> 00:08:25,599
that is not what's happening in memory

236
00:08:25,599 --> 00:08:27,520
let's see what the memory system sees

237
00:08:27,520 --> 00:08:31,039
for our slh protected access pattern

238
00:08:31,039 --> 00:08:32,640
well we're going to go through our array

239
00:08:32,640 --> 00:08:34,880
a performing our d references and it

240
00:08:34,880 --> 00:08:36,399
should look pretty familiar by this

241
00:08:36,399 --> 00:08:37,839
point because it's just going to

242
00:08:37,839 --> 00:08:41,279
overshoot and perform the dereference

243
00:08:41,279 --> 00:08:43,919
this is a fascinating scenario because

244
00:08:43,919 --> 00:08:46,000
it turns out that if you have

245
00:08:46,000 --> 00:08:48,240
specular vulnerable code you protect it

246
00:08:48,240 --> 00:08:51,040
with slh you run it on the m1 you're

247
00:08:51,040 --> 00:08:52,880
going to see the exact same behavior as

248
00:08:52,880 --> 00:08:55,360
if you hadn't used slh at all

249
00:08:55,360 --> 00:08:58,160
this is not a shortcoming of slh it's a

250
00:08:58,160 --> 00:09:01,519
fundamental limitation which applies to

251
00:09:01,519 --> 00:09:03,600
any core centric defense against

252
00:09:03,600 --> 00:09:05,680
speculative attacks

253
00:09:05,680 --> 00:09:07,920
augury attacks are the first speculative

254
00:09:07,920 --> 00:09:10,800
attacks in the memory system

255
00:09:10,800 --> 00:09:13,200
before today that wasn't actually an

256
00:09:13,200 --> 00:09:15,120
attack surface that defenders had to

257
00:09:15,120 --> 00:09:16,720
worry about

258
00:09:16,720 --> 00:09:18,640
how then might we go about mitigating

259
00:09:18,640 --> 00:09:20,800
leakage over the dmp

260
00:09:20,800 --> 00:09:22,560
a possible solution is similar to the

261
00:09:22,560 --> 00:09:25,440
one adopted by many spectre defenses

262
00:09:25,440 --> 00:09:27,279
don't keep secret data in the same

263
00:09:27,279 --> 00:09:29,440
virtual address space as the adversary

264
00:09:29,440 --> 00:09:30,959
program

265
00:09:30,959 --> 00:09:32,080
this is going to prevent your

266
00:09:32,080 --> 00:09:33,519
conventional prefetcher from

267
00:09:33,519 --> 00:09:35,279
overshooting and reaching the secret in

268
00:09:35,279 --> 00:09:37,120
the first place and so the dmp is going

269
00:09:37,120 --> 00:09:39,839
to have nothing to translate

270
00:09:39,839 --> 00:09:42,240
where slh protected against transient

271
00:09:42,240 --> 00:09:44,640
execution attacks in the core

272
00:09:44,640 --> 00:09:46,560
this defense protects against transient

273
00:09:46,560 --> 00:09:50,000
execution attacks in the memory system

274
00:09:50,000 --> 00:09:51,839
now spectral vulnerabilities have

275
00:09:51,839 --> 00:09:54,399
already put all of a process's virtual

276
00:09:54,399 --> 00:09:57,040
memory space at risk of being leaked

277
00:09:57,040 --> 00:09:59,360
so we're seeing wide scale deployment of

278
00:09:59,360 --> 00:10:01,360
spectrum mitigations which remove the

279
00:10:01,360 --> 00:10:03,920
most obvious sandbox or user space to

280
00:10:03,920 --> 00:10:06,640
kernel attack surfaces

281
00:10:06,640 --> 00:10:08,640
let's take a step back however and

282
00:10:08,640 --> 00:10:10,640
consider this in the face of general

283
00:10:10,640 --> 00:10:12,320
dmps

284
00:10:12,320 --> 00:10:15,440
there is no guarantee that all dmps will

285
00:10:15,440 --> 00:10:17,519
have a shorter reach than spectre

286
00:10:17,519 --> 00:10:20,320
the m1 dmp reaches a subset of the

287
00:10:20,320 --> 00:10:22,480
memory that is reachable by spectre

288
00:10:22,480 --> 00:10:25,040
but there is a very large design space

289
00:10:25,040 --> 00:10:26,720
for dmps

290
00:10:26,720 --> 00:10:28,640
there's no saying that there won't be a

291
00:10:28,640 --> 00:10:30,959
future dmp that can reach beyond what a

292
00:10:30,959 --> 00:10:33,200
spectre attack can

293
00:10:33,200 --> 00:10:35,519
beyond this in our experiments we

294
00:10:35,519 --> 00:10:38,240
repeatedly unintentionally activated the

295
00:10:38,240 --> 00:10:39,680
m1 dmp

296
00:10:39,680 --> 00:10:42,320
solely by storing pointers on the stack

297
00:10:42,320 --> 00:10:45,600
it's an incredibly aggressive dmp

298
00:10:45,600 --> 00:10:47,959
and it's possible for a program to be

299
00:10:47,959 --> 00:10:51,200
accidentally leaking data

300
00:10:51,200 --> 00:10:53,440
even without any intervention by an

301
00:10:53,440 --> 00:10:54,880
adversary

302
00:10:54,880 --> 00:10:58,000
we must also consider these cases where

303
00:10:58,000 --> 00:11:00,480
a privileged non-malicious program

304
00:11:00,480 --> 00:11:03,360
contains latent dmp gadgets

305
00:11:03,360 --> 00:11:07,839
these must be detected and removed

306
00:11:08,480 --> 00:11:10,640
while exceptional now we expect that

307
00:11:10,640 --> 00:11:13,519
this dmp is only the first of many dmps

308
00:11:13,519 --> 00:11:15,839
to be deployed across all architectures

309
00:11:15,839 --> 00:11:17,680
and manufacturers

310
00:11:17,680 --> 00:11:20,000
a trend further suggested by recent

311
00:11:20,000 --> 00:11:22,880
patents of different patterns

312
00:11:22,880 --> 00:11:24,480
consider a simple extension to this

313
00:11:24,480 --> 00:11:26,640
pointer chasing pattern one which allows

314
00:11:26,640 --> 00:11:29,120
for nested pointers

315
00:11:29,120 --> 00:11:31,519
or consider an indirection based access

316
00:11:31,519 --> 00:11:33,920
pattern which can also be extended to

317
00:11:33,920 --> 00:11:36,880
handle multiple levels of indirections

318
00:11:36,880 --> 00:11:39,120
some of these have been patented

319
00:11:39,120 --> 00:11:41,360
despite being a variant with strictly

320
00:11:41,360 --> 00:11:43,680
limited leakage we demonstrate that the

321
00:11:43,680 --> 00:11:46,720
m1's dmp is capable of being abused by

322
00:11:46,720 --> 00:11:49,519
an adversary

323
00:11:49,519 --> 00:11:52,079
beyond the implications for the m1 our

324
00:11:52,079 --> 00:11:54,079
work also provides guidance for the

325
00:11:54,079 --> 00:11:55,920
reverse engineering and security

326
00:11:55,920 --> 00:11:59,040
analysis of any dmp system

327
00:11:59,040 --> 00:12:01,040
relevant to axes of interest are what

328
00:12:01,040 --> 00:12:02,959
are the preconditions for a dmp to

329
00:12:02,959 --> 00:12:04,160
activate

330
00:12:04,160 --> 00:12:05,760
what function of memory values is

331
00:12:05,760 --> 00:12:08,240
transmitted that is what can leak in the

332
00:12:08,240 --> 00:12:10,800
m1's case that's pointers

333
00:12:10,800 --> 00:12:12,399
how can the adversary receive the

334
00:12:12,399 --> 00:12:14,240
transmitted values

335
00:12:14,240 --> 00:12:16,079
and what memory is accessed to inform

336
00:12:16,079 --> 00:12:18,079
prefetching

337
00:12:18,079 --> 00:12:20,240
finally the optimizations which exist in

338
00:12:20,240 --> 00:12:22,800
processors today only constitute the tip

339
00:12:22,800 --> 00:12:24,639
of the iceberg of what microarchitects

340
00:12:24,639 --> 00:12:26,079
have dreamt up

341
00:12:26,079 --> 00:12:28,240
we learned about the m1s dmp during a

342
00:12:28,240 --> 00:12:30,240
study of these other exotic

343
00:12:30,240 --> 00:12:32,399
microarchitectural optimizations each of

344
00:12:32,399 --> 00:12:35,040
which has novel leakage implications

345
00:12:35,040 --> 00:12:37,279
considering moore's law this is likely

346
00:12:37,279 --> 00:12:39,600
only the first of many new exotic

347
00:12:39,600 --> 00:12:42,480
optimizations we'll find in the wild

348
00:12:42,480 --> 00:12:44,480
we hope that both these works can serve

349
00:12:44,480 --> 00:12:47,200
as a first step for more systematically

350
00:12:47,200 --> 00:12:49,360
studying such microarchitecture

351
00:12:49,360 --> 00:12:51,040
so that security considerations can

352
00:12:51,040 --> 00:12:53,279
inform the development of secure and

353
00:12:53,279 --> 00:12:57,040
performant optimizations moving forward

354
00:12:57,040 --> 00:12:58,320
thank you very much i'm happy to take

355
00:12:58,320 --> 00:12:59,760
your questions

356
00:12:59,760 --> 00:13:06,720
[Applause]

357
00:13:06,720 --> 00:13:09,040
okay

358
00:13:13,920 --> 00:13:16,560
danielle morimi from ucsd

359
00:13:16,560 --> 00:13:18,639
my question is what did apple respond to

360
00:13:18,639 --> 00:13:21,760
this so we've disclosed it to apple and

361
00:13:21,760 --> 00:13:24,000
as far as we know there's no way to just

362
00:13:24,000 --> 00:13:26,480
disable it so it's it's in the iphone

363
00:13:26,480 --> 00:13:29,279
it's in the m1 from the m1 to the m1 max

364
00:13:29,279 --> 00:13:31,040
and it's just out there

365
00:13:31,040 --> 00:13:32,399
and they don't have any plan for

366
00:13:32,399 --> 00:13:35,360
mitigation not that we're aware of

367
00:13:35,360 --> 00:13:38,160
thanks yeah

368
00:13:38,320 --> 00:13:38,959
so

369
00:13:38,959 --> 00:13:40,480
uh so a follow-up question on that one

370
00:13:40,480 --> 00:13:42,880
and then the second one um do they go

371
00:13:42,880 --> 00:13:45,440
into this ignorant or reckless

372
00:13:45,440 --> 00:13:46,800
that's an excellent question to be

373
00:13:46,800 --> 00:13:49,120
honest it's it's a very interesting

374
00:13:49,120 --> 00:13:50,880
access pattern it's not incredibly

375
00:13:50,880 --> 00:13:53,440
common um but that said i think what

376
00:13:53,440 --> 00:13:55,279
we're seeing here is

377
00:13:55,279 --> 00:13:57,360
the the classic conundrum performance

378
00:13:57,360 --> 00:13:59,440
versus security right this thing

379
00:13:59,440 --> 00:14:01,279
actually gives you great performance if

380
00:14:01,279 --> 00:14:02,720
you're on an m1 and you're doing this

381
00:14:02,720 --> 00:14:05,440
pattern you're seeing 8 to 12 x speed up

382
00:14:05,440 --> 00:14:07,199
that's incredible considering how bad

383
00:14:07,199 --> 00:14:09,040
this is for the memory wall

384
00:14:09,040 --> 00:14:11,600
so there's really no telling it i i can

385
00:14:11,600 --> 00:14:13,120
see a very good argument for including

386
00:14:13,120 --> 00:14:15,440
it performance wise but it

387
00:14:15,440 --> 00:14:17,839
it can be bad very it can be very bad uh

388
00:14:17,839 --> 00:14:20,480
from a security perspective yeah yeah so

389
00:14:20,480 --> 00:14:22,240
a sort of a follow-up detailed question

390
00:14:22,240 --> 00:14:24,399
i'm curious what range you observed in

391
00:14:24,399 --> 00:14:27,040
the dmp on the m1 um so maybe this is

392
00:14:27,040 --> 00:14:28,240
actually more of a question of like the

393
00:14:28,240 --> 00:14:31,040
range of the linear prefetcher

394
00:14:31,040 --> 00:14:33,839
i i'm sorry you mean the the reach yeah

395
00:14:33,839 --> 00:14:36,639
yeah exactly yeah so it it depends on

396
00:14:36,639 --> 00:14:38,240
the conventional prefetcher right your

397
00:14:38,240 --> 00:14:40,160
conventional prefetcher needs to be able

398
00:14:40,160 --> 00:14:42,079
to reach something so past the end of

399
00:14:42,079 --> 00:14:43,120
your loop

400
00:14:43,120 --> 00:14:46,720
you can reach up to 64 kilobytes i see i

401
00:14:46,720 --> 00:14:48,639
see cool in pointer space you know

402
00:14:48,639 --> 00:14:50,160
that's a lot yeah

403
00:14:50,160 --> 00:14:52,880
okay thank you very much

404
00:14:55,120 --> 00:14:58,120
um

405
00:14:58,639 --> 00:15:01,440
one of the main defenses against side

406
00:15:01,440 --> 00:15:03,519
channel attacks in cryptography is

407
00:15:03,519 --> 00:15:05,519
constant time programming which assumes

408
00:15:05,519 --> 00:15:09,519
that all leakage is address-based

409
00:15:09,519 --> 00:15:11,440
how can we fix

410
00:15:11,440 --> 00:15:13,279
cryptography

411
00:15:13,279 --> 00:15:14,079
now

412
00:15:14,079 --> 00:15:16,320
yeah this that's an excellent question

413
00:15:16,320 --> 00:15:19,440
um and and an open question at that so

414
00:15:19,440 --> 00:15:21,040
one of the important things about this

415
00:15:21,040 --> 00:15:23,360
prefecture is that it's not ip index

416
00:15:23,360 --> 00:15:25,600
so in fact if you have completely

417
00:15:25,600 --> 00:15:27,680
separate instructions completely

418
00:15:27,680 --> 00:15:30,000
separate memory accesses going out to

419
00:15:30,000 --> 00:15:31,759
memory that look like this pattern the

420
00:15:31,759 --> 00:15:33,519
dmp is going to turn on

421
00:15:33,519 --> 00:15:35,519
and so say you go in you make your

422
00:15:35,519 --> 00:15:37,199
program constant time you remove all

423
00:15:37,199 --> 00:15:38,240
loops

424
00:15:38,240 --> 00:15:42,240
you can still have a gadget for the dmp

425
00:15:44,160 --> 00:15:47,279
so how can we avoid it

426
00:15:47,920 --> 00:15:51,719
i would call that future work

427
00:15:57,600 --> 00:15:59,519
uh have you searched for similar

428
00:15:59,519 --> 00:16:01,920
patterns on other processors yes we've

429
00:16:01,920 --> 00:16:04,800
tested a wide a wide range of processors

430
00:16:04,800 --> 00:16:07,519
intel and amd and we've had no luck

431
00:16:07,519 --> 00:16:09,440
either with this pattern or with the

432
00:16:09,440 --> 00:16:11,680
indirection based pattern

433
00:16:11,680 --> 00:16:13,600
that you saw here

434
00:16:13,600 --> 00:16:15,839
they are patented they're as far as we

435
00:16:15,839 --> 00:16:17,920
know just not available in the wild just

436
00:16:17,920 --> 00:16:20,920
yet

437
00:16:31,040 --> 00:16:34,000
any further questions

438
00:16:35,360 --> 00:16:36,720
okay so i

439
00:16:36,720 --> 00:16:40,920
think jose again

