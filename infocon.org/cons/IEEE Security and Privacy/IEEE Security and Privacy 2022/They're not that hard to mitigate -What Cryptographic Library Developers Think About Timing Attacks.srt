1
00:00:00,000 --> 00:00:00,960
wait

2
00:00:00,960 --> 00:00:02,240
hello everybody

3
00:00:02,240 --> 00:00:05,600
so you see we got text in our title but

4
00:00:05,600 --> 00:00:07,040
we're not going to talk about the

5
00:00:07,040 --> 00:00:08,880
attacks but what people think about the

6
00:00:08,880 --> 00:00:11,519
attacks so specifically people being

7
00:00:11,519 --> 00:00:13,759
cryptographic library developers and we

8
00:00:13,759 --> 00:00:15,839
that is

9
00:00:15,839 --> 00:00:16,800
and

10
00:00:16,800 --> 00:00:18,480
masterfunny that's me

11
00:00:18,480 --> 00:00:20,480
and we've got a host of co-authors and

12
00:00:20,480 --> 00:00:23,039
we're from crocs we're from mpisb we're

13
00:00:23,039 --> 00:00:25,519
from marisa george washington university

14
00:00:25,519 --> 00:00:27,920
different places slides will be online

15
00:00:27,920 --> 00:00:30,400
so if you see something interesting you

16
00:00:30,400 --> 00:00:32,320
don't need to make snapshots just

17
00:00:32,320 --> 00:00:34,320
download them later on there's

18
00:00:34,320 --> 00:00:36,320
additional material

19
00:00:36,320 --> 00:00:38,320
we can also ask questions you can also

20
00:00:38,320 --> 00:00:40,239
ask questions later

21
00:00:40,239 --> 00:00:42,239
everything will be fine

22
00:00:42,239 --> 00:00:44,399
so let's jump right in uh well timing

23
00:00:44,399 --> 00:00:46,000
attacks have been around for a while

24
00:00:46,000 --> 00:00:47,840
they are now more than 25 years old

25
00:00:47,840 --> 00:00:50,559
introduced in this 1996 paper they're

26
00:00:50,559 --> 00:00:52,719
even older than me and the way they work

27
00:00:52,719 --> 00:00:54,559
is they they abuse the fact that the

28
00:00:54,559 --> 00:00:56,480
duration of an operation can leak some

29
00:00:56,480 --> 00:00:58,719
information on secrets that are used in

30
00:00:58,719 --> 00:01:00,559
this operation so you might imagine

31
00:01:00,559 --> 00:01:02,640
something like rsa signatures or

32
00:01:02,640 --> 00:01:04,000
electric curve

33
00:01:04,000 --> 00:01:06,159
scale multiplication leaking some

34
00:01:06,159 --> 00:01:08,000
information about the private key bits

35
00:01:08,000 --> 00:01:09,840
or or about the scale or in there

36
00:01:09,840 --> 00:01:12,159
somewhere and so why this happens well

37
00:01:12,159 --> 00:01:14,320
it happens due to branches or memory

38
00:01:14,320 --> 00:01:16,640
accesses based on secret derived values

39
00:01:16,640 --> 00:01:18,479
right so you would have a you would have

40
00:01:18,479 --> 00:01:20,080
a branch on a private key bit and an

41
00:01:20,080 --> 00:01:22,240
attacker that measures some specific

42
00:01:22,240 --> 00:01:25,280
some operation it's duration or an

43
00:01:25,280 --> 00:01:27,600
attacker can use a cash attack to

44
00:01:27,600 --> 00:01:30,479
get at the the private key bit and

45
00:01:30,479 --> 00:01:32,079
what's interesting for us about timing

46
00:01:32,079 --> 00:01:34,079
attacks is that they are still around

47
00:01:34,079 --> 00:01:36,320
even after these these 25 years they are

48
00:01:36,320 --> 00:01:38,479
still around with these two recent

49
00:01:38,479 --> 00:01:41,200
examples of of groups of vulnerabilities

50
00:01:41,200 --> 00:01:43,280
one was in a certified smart card and

51
00:01:43,280 --> 00:01:45,520
some open source cryptographic libraries

52
00:01:45,520 --> 00:01:49,439
and the other in in many uh tpm chips

53
00:01:49,439 --> 00:01:51,200
but wait a second

54
00:01:51,200 --> 00:01:52,000
um

55
00:01:52,000 --> 00:01:53,520
there are some tools to check for that

56
00:01:53,520 --> 00:01:54,560
right

57
00:01:54,560 --> 00:01:57,280
like we got a whole list of them and

58
00:01:57,280 --> 00:01:59,280
these are not even all tools

59
00:01:59,280 --> 00:02:01,840
and the tools are not that new like the

60
00:02:01,840 --> 00:02:04,320
oldest one like ct grind it's from 2010

61
00:02:04,320 --> 00:02:07,040
and we got 2022 12 years so problems

62
00:02:07,040 --> 00:02:09,440
should be solved especially people know

63
00:02:09,440 --> 00:02:11,280
how to use constant time code practice

64
00:02:11,280 --> 00:02:12,080
like

65
00:02:12,080 --> 00:02:14,160
you don't want your secrets to be used

66
00:02:14,160 --> 00:02:16,480
as for branch conditions you don't want

67
00:02:16,480 --> 00:02:18,239
your secrets to be used for the

68
00:02:18,239 --> 00:02:20,239
addresses to

69
00:02:20,239 --> 00:02:22,480
see where an array you jump to

70
00:02:22,480 --> 00:02:24,160
and

71
00:02:24,160 --> 00:02:26,080
even after you've compiled it and

72
00:02:26,080 --> 00:02:28,800
compiler may mess things up but um you

73
00:02:28,800 --> 00:02:31,200
can check that you can check the results

74
00:02:31,200 --> 00:02:34,000
that's what the tools are for right

75
00:02:34,000 --> 00:02:35,840
yeah so you say we have this constant

76
00:02:35,840 --> 00:02:37,519
time code practice we have this tool so

77
00:02:37,519 --> 00:02:39,200
everything should be fine but why are

78
00:02:39,200 --> 00:02:41,519
timing attacks still around uh is it

79
00:02:41,519 --> 00:02:42,959
that timing attacks are not part of

80
00:02:42,959 --> 00:02:45,280
thread models of cryptographic libraries

81
00:02:45,280 --> 00:02:47,040
is it that the library developers do not

82
00:02:47,040 --> 00:02:48,560
know how to protect against timing

83
00:02:48,560 --> 00:02:50,560
attacks or is it that the developers are

84
00:02:50,560 --> 00:02:52,319
unaware of these tools that could help

85
00:02:52,319 --> 00:02:53,760
them

86
00:02:53,760 --> 00:02:54,720
well

87
00:02:54,720 --> 00:02:57,120
let's ask them because they are the ones

88
00:02:57,120 --> 00:02:59,840
that would fix these issues like

89
00:02:59,840 --> 00:03:01,599
yeah that sounds like a great idea and

90
00:03:01,599 --> 00:03:03,280
it's exactly what we did

91
00:03:03,280 --> 00:03:05,360
so we decided to run a survey on

92
00:03:05,360 --> 00:03:06,879
targeting open source cryptographic

93
00:03:06,879 --> 00:03:09,120
libraries focusing on their uh most

94
00:03:09,120 --> 00:03:11,040
active contributors using the number of

95
00:03:11,040 --> 00:03:13,120
comments so in the end we invited more

96
00:03:13,120 --> 00:03:14,800
than 200 cryptographic library

97
00:03:14,800 --> 00:03:17,360
developers from 36 libraries

98
00:03:17,360 --> 00:03:20,000
and we've got 44 valid responses from 27

99
00:03:20,000 --> 00:03:22,720
libraries we'll use these two icons for

100
00:03:22,720 --> 00:03:24,720
the rest of this talk and here i would

101
00:03:24,720 --> 00:03:26,560
like just to really like just to thank

102
00:03:26,560 --> 00:03:28,720
all of our participants because without

103
00:03:28,720 --> 00:03:30,799
them this research wouldn't exist and

104
00:03:30,799 --> 00:03:32,480
these libraries wouldn't be as great as

105
00:03:32,480 --> 00:03:33,519
they are

106
00:03:33,519 --> 00:03:35,440
so we've got some uh popular libraries

107
00:03:35,440 --> 00:03:38,319
like openssl ibrs ssl and so on and we

108
00:03:38,319 --> 00:03:40,640
also feel like we got d key developers

109
00:03:40,640 --> 00:03:42,480
that we wanted to ask so we got a lot of

110
00:03:42,480 --> 00:03:44,159
core developers maintainers and

111
00:03:44,159 --> 00:03:46,480
committers of these libraries

112
00:03:46,480 --> 00:03:48,239
so in our survey we first focus on the

113
00:03:48,239 --> 00:03:50,000
participant background right asking

114
00:03:50,000 --> 00:03:51,760
about their background in cryptography

115
00:03:51,760 --> 00:03:54,400
whether it's academic industrial or

116
00:03:54,400 --> 00:03:57,280
experience developing cryptographic code

117
00:03:57,280 --> 00:03:58,799
next we focus on the library and the

118
00:03:58,799 --> 00:04:00,959
participants role in the library how the

119
00:04:00,959 --> 00:04:02,720
library makes design decisions whether

120
00:04:02,720 --> 00:04:04,080
there are some voting and stuff like

121
00:04:04,080 --> 00:04:05,760
that and then we asked about the

122
00:04:05,760 --> 00:04:07,439
library's thread model with respect to

123
00:04:07,439 --> 00:04:09,519
site channel attacks so including timing

124
00:04:09,519 --> 00:04:10,720
attacks

125
00:04:10,720 --> 00:04:12,400
then we asked about any timing attack

126
00:04:12,400 --> 00:04:14,319
protections in the library whether there

127
00:04:14,319 --> 00:04:16,478
are any and if so which

128
00:04:16,478 --> 00:04:18,720
and then we asked about testing of these

129
00:04:18,720 --> 00:04:20,720
timing attack protections in the library

130
00:04:20,720 --> 00:04:23,600
where it is done and how it is done

131
00:04:23,600 --> 00:04:25,919
then we asked about these tools that

132
00:04:25,919 --> 00:04:28,560
marcel mentioned these 25 tools and the

133
00:04:28,560 --> 00:04:30,400
developers awareness of them as well as

134
00:04:30,400 --> 00:04:32,080
how they learned about them

135
00:04:32,080 --> 00:04:33,919
we also asked if they had any experience

136
00:04:33,919 --> 00:04:36,720
with using these tools and if so which

137
00:04:36,720 --> 00:04:38,479
but we sort of suspected that a lot of

138
00:04:38,479 --> 00:04:40,000
these developers wouldn't have

139
00:04:40,000 --> 00:04:42,000
experience with these tools and but we

140
00:04:42,000 --> 00:04:44,320
still wanted to get their opinion uh get

141
00:04:44,320 --> 00:04:46,400
an info from them and so we presented

142
00:04:46,400 --> 00:04:48,400
them with properties of these three uh

143
00:04:48,400 --> 00:04:50,560
very distinct groups of tools uh one

144
00:04:50,560 --> 00:04:52,639
based on dynamic instrumentation one

145
00:04:52,639 --> 00:04:54,479
based on statistical runtime tests and

146
00:04:54,479 --> 00:04:56,720
one on formal analysis and these three

147
00:04:56,720 --> 00:04:57,919
groups of tools have different

148
00:04:57,919 --> 00:04:59,120
properties

149
00:04:59,120 --> 00:05:01,039
basically the different requirements on

150
00:05:01,039 --> 00:05:03,280
your code that they need to run as well

151
00:05:03,280 --> 00:05:05,039
as they give you different guarantees on

152
00:05:05,039 --> 00:05:07,600
the results that they give you and we

153
00:05:07,600 --> 00:05:09,360
ask the developers about the likeliness

154
00:05:09,360 --> 00:05:11,600
of use and of these three groups of

155
00:05:11,600 --> 00:05:13,680
tools and their reasoning

156
00:05:13,680 --> 00:05:15,680
and finally we asked them about general

157
00:05:15,680 --> 00:05:17,360
thoughts on timing attacks in our survey

158
00:05:17,360 --> 00:05:19,039
and i must say that most of the

159
00:05:19,039 --> 00:05:21,199
developers liked our survey which felt

160
00:05:21,199 --> 00:05:22,240
really nice

161
00:05:22,240 --> 00:05:24,720
so what else did we learn marcel

162
00:05:24,720 --> 00:05:25,919
well

163
00:05:25,919 --> 00:05:28,320
good news first um everybody that we

164
00:05:28,320 --> 00:05:30,400
asked knew about timing attacks

165
00:05:30,400 --> 00:05:31,360
100

166
00:05:31,360 --> 00:05:32,400
like

167
00:05:32,400 --> 00:05:33,360
fine

168
00:05:33,360 --> 00:05:35,520
they know about the problem

169
00:05:35,520 --> 00:05:37,680
but we found out their opinions on it

170
00:05:37,680 --> 00:05:40,800
varied and like a little bit

171
00:05:40,800 --> 00:05:43,360
some people said well um we know about

172
00:05:43,360 --> 00:05:46,400
them and protections are just necessary

173
00:05:46,400 --> 00:05:49,039
no qualifiers about it

174
00:05:49,039 --> 00:05:51,120
then there were people saying yeah

175
00:05:51,120 --> 00:05:53,280
we know about them but there aren't

176
00:05:53,280 --> 00:05:56,240
enough real world attacks so

177
00:05:56,240 --> 00:06:00,080
we'll check for that when we get to it

178
00:06:00,479 --> 00:06:01,759
and

179
00:06:01,759 --> 00:06:04,240
then we specifically ask them

180
00:06:04,240 --> 00:06:05,039
well

181
00:06:05,039 --> 00:06:07,600
does your library include

182
00:06:07,600 --> 00:06:10,080
timing tags in your thread model

183
00:06:10,080 --> 00:06:13,600
and for 23 libraries yes they do

184
00:06:13,600 --> 00:06:15,919
only two libraries did not those are

185
00:06:15,919 --> 00:06:18,160
academic libraries or

186
00:06:18,160 --> 00:06:20,960
site projects small stuff

187
00:06:20,960 --> 00:06:22,080
and

188
00:06:22,080 --> 00:06:24,639
even more so um they differentiate

189
00:06:24,639 --> 00:06:26,639
between local and remote attacks remote

190
00:06:26,639 --> 00:06:29,039
attacks being over networks internet

191
00:06:29,039 --> 00:06:31,120
cloud what name you

192
00:06:31,120 --> 00:06:32,400
and

193
00:06:32,400 --> 00:06:35,120
local tax being

194
00:06:35,120 --> 00:06:37,360
like on the same machine

195
00:06:37,360 --> 00:06:38,960
you can do more stuff get better

196
00:06:38,960 --> 00:06:40,319
measurements

197
00:06:40,319 --> 00:06:41,440
it's harder to

198
00:06:41,440 --> 00:06:43,520
protect against those

199
00:06:43,520 --> 00:06:46,639
and 20 libraries included remote attacks

200
00:06:46,639 --> 00:06:49,120
in their attack model and 16 libraries

201
00:06:49,120 --> 00:06:52,160
also included local attacks

202
00:06:52,160 --> 00:06:53,759
so

203
00:06:53,759 --> 00:06:55,199
16 libraries

204
00:06:55,199 --> 00:06:57,520
want to protect against something even

205
00:06:57,520 --> 00:06:59,280
worse yeah

206
00:06:59,280 --> 00:07:01,039
that's good

207
00:07:01,039 --> 00:07:02,560
and their reasons

208
00:07:02,560 --> 00:07:07,199
basically varied but uh after all um

209
00:07:07,199 --> 00:07:09,599
in the end uh if there's some new attack

210
00:07:09,599 --> 00:07:12,479
paper and uh your library is the

211
00:07:12,479 --> 00:07:13,520
butterfly

212
00:07:13,520 --> 00:07:14,400
joke

213
00:07:14,400 --> 00:07:16,800
well that's no fun you don't want to be

214
00:07:16,800 --> 00:07:21,599
in that place that's nobody wanted that

215
00:07:21,680 --> 00:07:23,280
so we asked them

216
00:07:23,280 --> 00:07:25,360
does your library claim protection

217
00:07:25,360 --> 00:07:27,680
against timing attacks

218
00:07:27,680 --> 00:07:30,639
we didn't check that fully because

219
00:07:30,639 --> 00:07:32,560
they're the experts on their code and we

220
00:07:32,560 --> 00:07:35,360
can't check every library out there

221
00:07:35,360 --> 00:07:37,599
and we got some interest interesting

222
00:07:37,599 --> 00:07:40,319
responses because for 13 libraries yes

223
00:07:40,319 --> 00:07:42,000
they fully claim

224
00:07:42,000 --> 00:07:44,160
protection against timing attacks and

225
00:07:44,160 --> 00:07:46,000
we're a little bit dubious about that

226
00:07:46,000 --> 00:07:47,759
because

227
00:07:47,759 --> 00:07:50,000
have they checked every case have they

228
00:07:50,000 --> 00:07:52,479
mechanically checked everything

229
00:07:52,479 --> 00:07:54,479
after each commit

230
00:07:54,479 --> 00:07:56,879
well we don't know

231
00:07:56,879 --> 00:07:59,120
10 libraries said yeah we partially

232
00:07:59,120 --> 00:08:01,520
protect against timing tags and

233
00:08:01,520 --> 00:08:04,000
we think this is quite realistic

234
00:08:04,000 --> 00:08:05,919
you can do a lot of stuff with the most

235
00:08:05,919 --> 00:08:07,520
used code

236
00:08:07,520 --> 00:08:08,560
and

237
00:08:08,560 --> 00:08:11,120
for three libraries there was no claimed

238
00:08:11,120 --> 00:08:13,039
resistance against timing attacks and

239
00:08:13,039 --> 00:08:15,120
you might think well three is different

240
00:08:15,120 --> 00:08:17,280
than the two we mentioned before that's

241
00:08:17,280 --> 00:08:19,520
basically because

242
00:08:19,520 --> 00:08:21,759
one library uh people haven't gotten to

243
00:08:21,759 --> 00:08:24,080
it to protecting and so they're not over

244
00:08:24,080 --> 00:08:27,840
claiming so that's fine

245
00:08:28,240 --> 00:08:29,360
and

246
00:08:29,360 --> 00:08:30,479
in the end

247
00:08:30,479 --> 00:08:32,879
we got

248
00:08:33,760 --> 00:08:34,419
the

249
00:08:34,419 --> 00:08:37,039
[Music]

250
00:08:37,039 --> 00:08:39,599
quote that every other way

251
00:08:39,599 --> 00:08:41,679
meaning every way without protecting a

252
00:08:41,679 --> 00:08:44,320
timing text is just the wrong approach

253
00:08:44,320 --> 00:08:45,839
and

254
00:08:45,839 --> 00:08:47,360
you can have different kinds of

255
00:08:47,360 --> 00:08:49,920
protecting against timing attacks

256
00:08:49,920 --> 00:08:52,160
first and most well known is constant

257
00:08:52,160 --> 00:08:53,839
time code practice with which we

258
00:08:53,839 --> 00:08:57,360
mentioned before 21 libraries use that

259
00:08:57,360 --> 00:08:58,640
and

260
00:08:58,640 --> 00:09:01,200
you can also select different algorithms

261
00:09:01,200 --> 00:09:03,839
like nine libraries said yeah we do that

262
00:09:03,839 --> 00:09:05,040
like

263
00:09:05,040 --> 00:09:06,320
for ecc

264
00:09:06,320 --> 00:09:09,200
not just take double and add or take

265
00:09:09,200 --> 00:09:11,360
double and always add or montgomery

266
00:09:11,360 --> 00:09:14,240
multiplication something interesting

267
00:09:14,240 --> 00:09:16,800
and you can use blinding like not have

268
00:09:16,800 --> 00:09:19,200
your secrets unprotected in memory

269
00:09:19,200 --> 00:09:21,680
that's against local attacks you can use

270
00:09:21,680 --> 00:09:23,680
slicing and

271
00:09:23,680 --> 00:09:25,600
mask your secrets by splitting them up

272
00:09:25,600 --> 00:09:27,680
and doing the computation in different

273
00:09:27,680 --> 00:09:30,399
parts you can use specialized assembly

274
00:09:30,399 --> 00:09:32,880
you can use hardware features like aes

275
00:09:32,880 --> 00:09:34,000
and i

276
00:09:34,000 --> 00:09:35,760
technically you could also use the

277
00:09:35,760 --> 00:09:37,440
random delays but

278
00:09:37,440 --> 00:09:39,839
we're back to differ because um

279
00:09:39,839 --> 00:09:41,680
this may mask

280
00:09:41,680 --> 00:09:44,000
the signal you get out of

281
00:09:44,000 --> 00:09:45,600
measuring secrets

282
00:09:45,600 --> 00:09:47,920
and the timing variance but

283
00:09:47,920 --> 00:09:50,399
it only masks it it does not make it go

284
00:09:50,399 --> 00:09:53,200
away so you do more measurements and

285
00:09:53,200 --> 00:09:55,760
then you can still even out the random

286
00:09:55,760 --> 00:09:57,839
delays they go away and you still have

287
00:09:57,839 --> 00:09:59,839
your secret signal

288
00:09:59,839 --> 00:10:00,720
so

289
00:10:00,720 --> 00:10:02,560
the correct approach is

290
00:10:02,560 --> 00:10:04,959
that conditional branches and lookups

291
00:10:04,959 --> 00:10:07,200
should be avoided on secrets

292
00:10:07,200 --> 00:10:09,680
everywhere

293
00:10:10,320 --> 00:10:12,079
so then we asked

294
00:10:12,079 --> 00:10:14,399
have you heard about the tools and

295
00:10:14,399 --> 00:10:16,720
yeah

296
00:10:16,880 --> 00:10:18,480
bad thing is most of the tools were

297
00:10:18,480 --> 00:10:19,920
unknown

298
00:10:19,920 --> 00:10:22,000
but most people heard about some of the

299
00:10:22,000 --> 00:10:23,120
tools

300
00:10:23,120 --> 00:10:25,680
there are some well-known tools ctrl

301
00:10:25,680 --> 00:10:27,680
which we mentioned and

302
00:10:27,680 --> 00:10:29,440
by this we mean the whole class of

303
00:10:29,440 --> 00:10:30,720
things

304
00:10:30,720 --> 00:10:34,480
which are based on well grind

305
00:10:34,480 --> 00:10:37,600
27 people know about this approach

306
00:10:37,600 --> 00:10:40,399
and some even tried to explain it to us

307
00:10:40,399 --> 00:10:42,560
we didn't ask for this but they just did

308
00:10:42,560 --> 00:10:44,800
because it's so simple

309
00:10:44,800 --> 00:10:48,560
17 people also heard about ctvariff

310
00:10:48,560 --> 00:10:52,320
which is from 2016 also a little bit old

311
00:10:52,320 --> 00:10:54,720
and mamsam which is included in lvm

312
00:10:54,720 --> 00:10:57,040
eight people heard about that

313
00:10:57,040 --> 00:11:00,720
and 33 people out of 44 heard about at

314
00:11:00,720 --> 00:11:02,800
least one of the tools so we've got a

315
00:11:02,800 --> 00:11:04,560
quite long tale after those well-known

316
00:11:04,560 --> 00:11:06,240
tools where people

317
00:11:06,240 --> 00:11:10,640
one person has heard about one tool or

318
00:11:10,640 --> 00:11:15,360
other tools nobody heard about them

319
00:11:15,360 --> 00:11:18,079
but they haven't tried to use them like

320
00:11:18,079 --> 00:11:20,560
only 19 people try to use

321
00:11:20,560 --> 00:11:22,640
at least one two

322
00:11:22,640 --> 00:11:25,040
and we asked why not

323
00:11:25,040 --> 00:11:26,560
well

324
00:11:26,560 --> 00:11:29,360
26 times we heard well lack of time you

325
00:11:29,360 --> 00:11:30,240
know

326
00:11:30,240 --> 00:11:31,920
they've got more important stuff to do

327
00:11:31,920 --> 00:11:34,399
fixed bucks you know

328
00:11:34,399 --> 00:11:37,279
eight times we heard well the tool is

329
00:11:37,279 --> 00:11:40,959
not able to ignore known false positives

330
00:11:40,959 --> 00:11:43,760
so it's just wasting our time

331
00:11:43,760 --> 00:11:45,440
five times we heard well tool is not

332
00:11:45,440 --> 00:11:46,560
maintained

333
00:11:46,560 --> 00:11:48,720
we don't know if it runs four times we

334
00:11:48,720 --> 00:11:50,399
even heard well the tool is no longer

335
00:11:50,399 --> 00:11:52,000
available

336
00:11:52,000 --> 00:11:54,959
like there was the paper and

337
00:11:54,959 --> 00:11:57,839
we can't find it anymore

338
00:11:58,079 --> 00:12:00,320
so we asked them okay

339
00:12:00,320 --> 00:12:02,639
in general um

340
00:12:02,639 --> 00:12:04,880
for the three classes like dynamic

341
00:12:04,880 --> 00:12:06,880
instrumentation based tools statistical

342
00:12:06,880 --> 00:12:09,360
runtime test tools formulas based tools

343
00:12:09,360 --> 00:12:11,600
how likely would you be to use

344
00:12:11,600 --> 00:12:13,839
one of those tools

345
00:12:13,839 --> 00:12:15,680
and for dynamic instrumentation based

346
00:12:15,680 --> 00:12:17,360
tools

347
00:12:17,360 --> 00:12:19,440
most people were likely to use one of

348
00:12:19,440 --> 00:12:22,240
the tools in that class

349
00:12:22,240 --> 00:12:25,120
less likely on statistical runtime tests

350
00:12:25,120 --> 00:12:26,800
and least likely on formal

351
00:12:26,800 --> 00:12:29,120
analysis-based tools

352
00:12:29,120 --> 00:12:31,519
basically 22 people told us it's just

353
00:12:31,519 --> 00:12:34,240
too much effort

354
00:12:34,240 --> 00:12:36,800
and there's a trade-off

355
00:12:36,800 --> 00:12:38,720
like formal analysis-based tools give

356
00:12:38,720 --> 00:12:41,279
you high guarantees but they're hard to

357
00:12:41,279 --> 00:12:43,600
use and dynamic and statistical based

358
00:12:43,600 --> 00:12:45,040
tools are

359
00:12:45,040 --> 00:12:46,720
giving you less guarantees but they're

360
00:12:46,720 --> 00:12:49,360
much easier to use

361
00:12:49,360 --> 00:12:50,079
and

362
00:12:50,079 --> 00:12:51,600
10 people said yeah

363
00:12:51,600 --> 00:12:53,600
we're fine with that this is an

364
00:12:53,600 --> 00:12:56,560
acceptable trade-off

365
00:12:56,560 --> 00:12:59,040
one person even said well um

366
00:12:59,040 --> 00:13:01,519
we tried to use formal analysis tools

367
00:13:01,519 --> 00:13:03,600
well for correctness

368
00:13:03,600 --> 00:13:05,440
interactive theorem provers something

369
00:13:05,440 --> 00:13:06,639
like that

370
00:13:06,639 --> 00:13:08,480
but they're not really usable by mere

371
00:13:08,480 --> 00:13:10,560
models and this is coming from direction

372
00:13:10,560 --> 00:13:13,600
of cryptographic library developers so

373
00:13:13,600 --> 00:13:16,959
not your ordinary developer

374
00:13:16,959 --> 00:13:18,720
ah so with that we feel like we've

375
00:13:18,720 --> 00:13:21,440
identified this leaky pipelines of of

376
00:13:21,440 --> 00:13:23,839
developers trying to use these tools uh

377
00:13:23,839 --> 00:13:25,440
for verifying resistance of timing

378
00:13:25,440 --> 00:13:28,240
attacks with 44 developers entering and

379
00:13:28,240 --> 00:13:30,639
only 17 developers meaningfully using

380
00:13:30,639 --> 00:13:32,720
these these tools to verify resistance

381
00:13:32,720 --> 00:13:33,680
of timing

382
00:13:33,680 --> 00:13:34,720
attacks

383
00:13:34,720 --> 00:13:36,160
against their code

384
00:13:36,160 --> 00:13:39,279
so what can we do to to fix this by this

385
00:13:39,279 --> 00:13:42,880
this leaky pipeline to to plug the leaks

386
00:13:42,880 --> 00:13:44,639
well we've put together some

387
00:13:44,639 --> 00:13:47,199
recommendations and we grouped it for

388
00:13:47,199 --> 00:13:48,880
four groups of people

389
00:13:48,880 --> 00:13:51,199
first for the tool developers meaning

390
00:13:51,199 --> 00:13:53,040
the developers of constant time analysis

391
00:13:53,040 --> 00:13:54,240
tools

392
00:13:54,240 --> 00:13:56,480
first and most easy make your tool

393
00:13:56,480 --> 00:13:59,040
usable make it available

394
00:13:59,040 --> 00:14:00,800
make it easy to install

395
00:14:00,800 --> 00:14:03,519
make good documentation easy to follow

396
00:14:03,519 --> 00:14:05,199
it needs to be current

397
00:14:05,199 --> 00:14:07,279
and make examples

398
00:14:07,279 --> 00:14:09,440
people can adopt your examples and

399
00:14:09,440 --> 00:14:11,600
customize the example for their own use

400
00:14:11,600 --> 00:14:12,720
case

401
00:14:12,720 --> 00:14:14,000
that's easy

402
00:14:14,000 --> 00:14:15,680
easy start

403
00:14:15,680 --> 00:14:16,639
also

404
00:14:16,639 --> 00:14:19,040
promote the tools at appropriate venues

405
00:14:19,040 --> 00:14:21,279
right said meet the developers where

406
00:14:21,279 --> 00:14:22,560
they are

407
00:14:22,560 --> 00:14:26,399
which in this case might be chess rwc or

408
00:14:26,399 --> 00:14:28,800
s p

409
00:14:28,959 --> 00:14:31,120
and for the crypto developers themselves

410
00:14:31,120 --> 00:14:33,920
without sounding too preachy um use the

411
00:14:33,920 --> 00:14:35,199
tools please

412
00:14:35,199 --> 00:14:36,160
um

413
00:14:36,160 --> 00:14:38,800
not just once but automate it

414
00:14:38,800 --> 00:14:41,120
ideally include the tools in your ci so

415
00:14:41,120 --> 00:14:42,639
when you do a commit

416
00:14:42,639 --> 00:14:46,079
things are checked and if there's new

417
00:14:46,079 --> 00:14:47,760
timing leaks found

418
00:14:47,760 --> 00:14:50,240
then you know what to fix

419
00:14:50,240 --> 00:14:53,519
ideally fix all the timing leaks because

420
00:14:53,519 --> 00:14:55,920
then you know if something pops up

421
00:14:55,920 --> 00:14:58,720
exactly from what point and it's not

422
00:14:58,720 --> 00:15:01,040
just chasing numbers

423
00:15:01,040 --> 00:15:02,800
and you can make it easier for other

424
00:15:02,800 --> 00:15:05,120
people by marking secrets in your code

425
00:15:05,120 --> 00:15:07,680
so for example the users of your library

426
00:15:07,680 --> 00:15:10,839
know where the secret inputs in the

427
00:15:10,839 --> 00:15:13,600
api would be

428
00:15:13,600 --> 00:15:17,199
and compiler writers can support this

429
00:15:17,199 --> 00:15:20,320
you can have secret type support meaning

430
00:15:20,320 --> 00:15:23,519
if some body marks the code that

431
00:15:23,519 --> 00:15:27,120
these are the secrets in the api

432
00:15:27,120 --> 00:15:29,040
then with secret types you could say

433
00:15:29,040 --> 00:15:31,600
okay let's not do optimizations on those

434
00:15:31,600 --> 00:15:33,600
secret types so we don't introduce

435
00:15:33,600 --> 00:15:35,759
timing leaks or only use safe

436
00:15:35,759 --> 00:15:37,600
optimizations

437
00:15:37,600 --> 00:15:38,480
and

438
00:15:38,480 --> 00:15:41,199
this might be maybe a lot of effort we

439
00:15:41,199 --> 00:15:43,920
know but you can make it easier and

440
00:15:43,920 --> 00:15:46,079
faster by giving developers more control

441
00:15:46,079 --> 00:15:48,160
so they can disable optimizations for

442
00:15:48,160 --> 00:15:51,120
specific parts of themselves

443
00:15:51,120 --> 00:15:52,240
and finally

444
00:15:52,240 --> 00:15:54,480
standardization bodies like nis for

445
00:15:54,480 --> 00:15:56,000
example currently

446
00:15:56,000 --> 00:15:58,720
encourages submitters to use well

447
00:15:58,720 --> 00:16:01,839
tools well now currently they just

448
00:16:01,839 --> 00:16:04,079
encourage submitters to provide constant

449
00:16:04,079 --> 00:16:06,800
time implementations but they could

450
00:16:06,800 --> 00:16:08,160
encourage submitters to use constant

451
00:16:08,160 --> 00:16:10,320
time checking tools and they could even

452
00:16:10,320 --> 00:16:12,480
require submitters to supply constant

453
00:16:12,480 --> 00:16:14,480
time code

454
00:16:14,480 --> 00:16:16,959
this would change a lot so then a

455
00:16:16,959 --> 00:16:18,720
reference implementation that has been

456
00:16:18,720 --> 00:16:20,959
blessed by nist would be constant time

457
00:16:20,959 --> 00:16:23,199
and everybody can just start and use it

458
00:16:23,199 --> 00:16:26,079
and optimize it and no should be fine

459
00:16:26,079 --> 00:16:28,160
right

460
00:16:28,160 --> 00:16:30,079
so to summarize uh we asked

461
00:16:30,079 --> 00:16:31,839
cryptographic library developers what

462
00:16:31,839 --> 00:16:33,920
they think about timing attacks and we

463
00:16:33,920 --> 00:16:35,519
found out that they know and care about

464
00:16:35,519 --> 00:16:37,759
timing attacks but they do not know most

465
00:16:37,759 --> 00:16:40,000
tools for verifying constant timeless

466
00:16:40,000 --> 00:16:42,079
and they do not use these tools mostly

467
00:16:42,079 --> 00:16:44,800
due to lack of time we identified this

468
00:16:44,800 --> 00:16:46,880
leaky pipeline of developers trying to

469
00:16:46,880 --> 00:16:48,560
use these tools and we've also

470
00:16:48,560 --> 00:16:50,720
identified this preconceived notion of

471
00:16:50,720 --> 00:16:52,959
how formal analysis tools are just way

472
00:16:52,959 --> 00:16:55,199
too much effort and are not usable by

473
00:16:55,199 --> 00:16:57,040
mere mortals yet

474
00:16:57,040 --> 00:16:59,120
so with that thanks for your attention

475
00:16:59,120 --> 00:17:00,560
and we are we would like to hear your

476
00:17:00,560 --> 00:17:03,560
questions

477
00:17:08,559 --> 00:17:10,319
all right thank you so much marcel young

478
00:17:10,319 --> 00:17:12,480
for this awesome talk um i especially

479
00:17:12,480 --> 00:17:14,079
like the back and forth uh maybe there

480
00:17:14,079 --> 00:17:15,919
is future for like crypto theater at

481
00:17:15,919 --> 00:17:17,439
oakland hulus

482
00:17:17,439 --> 00:17:19,119
um i think we have a question from the

483
00:17:19,119 --> 00:17:21,119
audience please go ahead yes thank you

484
00:17:21,119 --> 00:17:22,400
for the talk

485
00:17:22,400 --> 00:17:24,640
one question i had is whether any of

486
00:17:24,640 --> 00:17:26,079
those developers found any new

487
00:17:26,079 --> 00:17:29,918
vulnerability with your work

488
00:17:30,400 --> 00:17:31,120
so

489
00:17:31,120 --> 00:17:33,600
one of the answers in the survey

490
00:17:33,600 --> 00:17:36,000
mentioned that they used one of the

491
00:17:36,000 --> 00:17:39,120
tools to verify vulnerability so yeah so

492
00:17:39,120 --> 00:17:40,880
these tools are

493
00:17:40,880 --> 00:17:42,720
when they are used they can detect you

494
00:17:42,720 --> 00:17:46,000
know new and known vulnerabilities

495
00:17:46,000 --> 00:17:48,880
okay thank you

496
00:17:48,880 --> 00:17:50,160
all right we have another question from

497
00:17:50,160 --> 00:17:51,760
the audience

498
00:17:51,760 --> 00:17:54,960
hey um yes i wanted to ask so given that

499
00:17:54,960 --> 00:17:56,720
a fair amount of these tools are written

500
00:17:56,720 --> 00:17:58,840
by academics and not necessarily

501
00:17:58,840 --> 00:18:00,559
engineers um

502
00:18:00,559 --> 00:18:03,039
there is kind of that distance from

503
00:18:03,039 --> 00:18:06,160
getting academics to write usable tools

504
00:18:06,160 --> 00:18:08,000
is there any

505
00:18:08,000 --> 00:18:10,000
uh have you given any thought on how we

506
00:18:10,000 --> 00:18:12,000
can incentivize that or

507
00:18:12,000 --> 00:18:13,200
make that happen

508
00:18:13,200 --> 00:18:15,840
more

509
00:18:17,039 --> 00:18:18,480
well um

510
00:18:18,480 --> 00:18:20,000
currently

511
00:18:20,000 --> 00:18:24,080
that's ongoing research and

512
00:18:24,720 --> 00:18:26,720
let's see

513
00:18:26,720 --> 00:18:29,440
basically um you'll have to have people

514
00:18:29,440 --> 00:18:32,320
who know constant time code practice and

515
00:18:32,320 --> 00:18:35,679
you have to give those people

516
00:18:35,679 --> 00:18:38,160
some code which has

517
00:18:38,160 --> 00:18:39,840
timing attacks

518
00:18:39,840 --> 00:18:42,320
and you have to give them a tool and you

519
00:18:42,320 --> 00:18:44,559
have to familiarize them with the tool

520
00:18:44,559 --> 00:18:46,720
and then you have to see um when they

521
00:18:46,720 --> 00:18:48,720
take the tool to a new library that they

522
00:18:48,720 --> 00:18:51,360
don't know how to well

523
00:18:51,360 --> 00:18:54,240
find bugs in there and only then you can

524
00:18:54,240 --> 00:18:55,280
know

525
00:18:55,280 --> 00:18:57,679
is the tool usable but it's a little bit

526
00:18:57,679 --> 00:19:01,360
hard to discern this

527
00:19:01,360 --> 00:19:02,720
thank you

528
00:19:02,720 --> 00:19:04,400
i think we have another question yes

529
00:19:04,400 --> 00:19:06,480
please go ahead

530
00:19:06,480 --> 00:19:07,360
so

531
00:19:07,360 --> 00:19:09,679
my understanding is that there is uh

532
00:19:09,679 --> 00:19:11,840
there's already standard libraries for

533
00:19:11,840 --> 00:19:13,919
most cryptographic operations that are

534
00:19:13,919 --> 00:19:16,240
already hardened against

535
00:19:16,240 --> 00:19:18,080
some sort of attack

536
00:19:18,080 --> 00:19:19,039
uh

537
00:19:19,039 --> 00:19:21,520
why do developers not use that and why

538
00:19:21,520 --> 00:19:23,760
not just promote some standard libraries

539
00:19:23,760 --> 00:19:25,679
right

540
00:19:25,679 --> 00:19:28,960
so these uh if you look here these are

541
00:19:28,960 --> 00:19:30,799
quite a lot of the standard libraries

542
00:19:30,799 --> 00:19:32,559
that you would use right so

543
00:19:32,559 --> 00:19:35,360
uh like the lib sacp blah blah blah

544
00:19:35,360 --> 00:19:38,160
that's uh one library you would use for

545
00:19:38,160 --> 00:19:39,679
uh the bitcoin curve you know doing

546
00:19:39,679 --> 00:19:42,720
ecdsa signatures right and that's

547
00:19:42,720 --> 00:19:45,760
crypto so so these are the libraries but

548
00:19:45,760 --> 00:19:48,400
even even making those constant time and

549
00:19:48,400 --> 00:19:50,000
all on all the architectures they

550
00:19:50,000 --> 00:19:51,919
support and in all the configurations

551
00:19:51,919 --> 00:19:53,120
and so on

552
00:19:53,120 --> 00:19:55,200
they are not constant time right now not

553
00:19:55,200 --> 00:19:57,360
not all of them not in all all these

554
00:19:57,360 --> 00:19:59,840
these configurations i see so even

555
00:19:59,840 --> 00:20:02,559
that's hard yeah right thanks to give

556
00:20:02,559 --> 00:20:05,679
you some numbers um there was one paper

557
00:20:05,679 --> 00:20:07,520
which did a study and found out that

558
00:20:07,520 --> 00:20:09,120
openssl

559
00:20:09,120 --> 00:20:12,400
is used for what was it 80 of alexa top

560
00:20:12,400 --> 00:20:15,440
500 sites or something

561
00:20:15,440 --> 00:20:16,480
so

562
00:20:16,480 --> 00:20:20,720
those are very widely used libraries but

563
00:20:20,720 --> 00:20:22,240
sometimes they grew out of sight

564
00:20:22,240 --> 00:20:24,559
projects and for openssl

565
00:20:24,559 --> 00:20:28,159
it was from the 90s it was before it

566
00:20:28,159 --> 00:20:31,760
like timing attack security was a topic

567
00:20:31,760 --> 00:20:32,559
and

568
00:20:32,559 --> 00:20:35,039
people only later adopted uh coding

569
00:20:35,039 --> 00:20:36,960
practice to the library it's not the

570
00:20:36,960 --> 00:20:39,440
other way around that people made a new

571
00:20:39,440 --> 00:20:41,360
library and made it secure from the

572
00:20:41,360 --> 00:20:44,240
start this is your libraries possibly

573
00:20:44,240 --> 00:20:45,360
but

574
00:20:45,360 --> 00:20:49,200
then you still need to check it

575
00:20:49,200 --> 00:20:50,559
right thank you so much i think we have

576
00:20:50,559 --> 00:20:52,159
one more question

577
00:20:52,159 --> 00:20:53,760
what do you consider your most

578
00:20:53,760 --> 00:20:57,280
surprising finding

579
00:20:58,799 --> 00:21:01,200
so it's quite interesting that some

580
00:21:01,200 --> 00:21:03,760
developers of the same library disagree

581
00:21:03,760 --> 00:21:04,480
on

582
00:21:04,480 --> 00:21:06,000
like something like one says okay we

583
00:21:06,000 --> 00:21:07,600
claim full resistance and the other is

584
00:21:07,600 --> 00:21:09,360
like oh no not fully resistant just

585
00:21:09,360 --> 00:21:12,080
partially so yeah this what we found out

586
00:21:12,080 --> 00:21:14,400
we reported in the paper

587
00:21:14,400 --> 00:21:16,720
uh maybe maybe the title one right

588
00:21:16,720 --> 00:21:18,480
that's a quote that they are not that

589
00:21:18,480 --> 00:21:20,400
hard to mitigate uh that was one

590
00:21:20,400 --> 00:21:21,840
response that said that timing attacks

591
00:21:21,840 --> 00:21:23,840
are not that hard to mitigate if you use

592
00:21:23,840 --> 00:21:26,559
some compilers and i

593
00:21:26,559 --> 00:21:28,799
yeah in some context i would agree but

594
00:21:28,799 --> 00:21:31,840
they are pretty hard sometimes

595
00:21:32,880 --> 00:21:35,039
i think the most interesting thing we

596
00:21:35,039 --> 00:21:38,880
found out for me personally was that

597
00:21:38,880 --> 00:21:42,960
everybody knew about timing attacks

598
00:21:43,200 --> 00:21:46,080
so the rest is just in the details but

599
00:21:46,080 --> 00:21:49,120
the details are hard

600
00:21:50,480 --> 00:21:52,799
all right uh thank you so much mr indian

601
00:21:52,799 --> 00:21:53,679
for this awesome talk and your

602
00:21:53,679 --> 00:21:56,679
submission

