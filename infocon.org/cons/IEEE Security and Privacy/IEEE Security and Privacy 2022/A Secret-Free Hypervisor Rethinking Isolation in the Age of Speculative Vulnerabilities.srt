1
00:00:00,880 --> 00:00:02,720
today i'm going to talk about a secret

2
00:00:02,720 --> 00:00:04,720
free hypervisor and how we should

3
00:00:04,720 --> 00:00:06,799
rethink isolation in the age of

4
00:00:06,799 --> 00:00:10,400
speculative execution attacks

5
00:00:10,400 --> 00:00:12,080
the scope of this talk is about

6
00:00:12,080 --> 00:00:14,480
speculative execution and it's about how

7
00:00:14,480 --> 00:00:16,160
we restructure the hypervisor to

8
00:00:16,160 --> 00:00:17,760
minimize the surface

9
00:00:17,760 --> 00:00:20,080
and to build a comprehensive framework

10
00:00:20,080 --> 00:00:22,000
against similar attacks

11
00:00:22,000 --> 00:00:24,320
this is not about trusted execution

12
00:00:24,320 --> 00:00:27,680
environment not about enclaves and or

13
00:00:27,680 --> 00:00:29,760
distrusting and privileging parts of the

14
00:00:29,760 --> 00:00:32,320
hypervisor

15
00:00:32,399 --> 00:00:35,280
the motivation of this work is that we

16
00:00:35,280 --> 00:00:37,840
live in the epidemic of speculative

17
00:00:37,840 --> 00:00:39,600
execution attacks

18
00:00:39,600 --> 00:00:42,640
and we repeat the cycle on the right

19
00:00:42,640 --> 00:00:44,320
all the time so we find a new

20
00:00:44,320 --> 00:00:47,600
vulnerability and we develop mitigations

21
00:00:47,600 --> 00:00:49,600
and if we deploy the mitigations and we

22
00:00:49,600 --> 00:00:52,239
suffer from performance degradation

23
00:00:52,239 --> 00:00:54,480
and the whole cycle repeats

24
00:00:54,480 --> 00:00:56,960
so we keep asking ourselves is this the

25
00:00:56,960 --> 00:00:59,039
best we can do and is there a better way

26
00:00:59,039 --> 00:01:02,320
to break this cycle

27
00:01:02,320 --> 00:01:05,519
we think the cause of this problem

28
00:01:05,519 --> 00:01:06,880
is that

29
00:01:06,880 --> 00:01:09,040
we constantly call these vulnerabilities

30
00:01:09,040 --> 00:01:11,119
hardware bugs but as the saying goes

31
00:01:11,119 --> 00:01:14,320
it's not a bug it's a feature

32
00:01:14,320 --> 00:01:16,080
the reality is

33
00:01:16,080 --> 00:01:18,560
that our software isolation model does

34
00:01:18,560 --> 00:01:20,720
not just does not match reality we

35
00:01:20,720 --> 00:01:23,119
constantly refer to the architectural

36
00:01:23,119 --> 00:01:26,560
documents from hardware vendors

37
00:01:26,560 --> 00:01:28,720
and we think that the architectural

38
00:01:28,720 --> 00:01:30,960
isolation is sufficient

39
00:01:30,960 --> 00:01:33,280
and we keep writing software

40
00:01:33,280 --> 00:01:35,680
the old way but the reality is that

41
00:01:35,680 --> 00:01:38,159
boundary has been broken and

42
00:01:38,159 --> 00:01:40,960
those vulnerabilities if we think them

43
00:01:40,960 --> 00:01:41,840
um

44
00:01:41,840 --> 00:01:43,200
as bugs

45
00:01:43,200 --> 00:01:45,200
then it's not really helpful because

46
00:01:45,200 --> 00:01:47,040
bugs should be outliers they should not

47
00:01:47,040 --> 00:01:49,200
be the norm and they should be they

48
00:01:49,200 --> 00:01:50,159
should be

49
00:01:50,159 --> 00:01:52,479
fixed and after fixing it we

50
00:01:52,479 --> 00:01:54,479
should not really think too much about

51
00:01:54,479 --> 00:01:56,479
them but the reality is

52
00:01:56,479 --> 00:01:58,560
we have to constantly think about those

53
00:01:58,560 --> 00:02:00,240
vulnerabilities when we program

54
00:02:00,240 --> 00:02:02,880
low-level software

55
00:02:02,880 --> 00:02:06,399
so this prompts us to rethink

56
00:02:06,399 --> 00:02:08,878
to rethink how we write low-level

57
00:02:08,878 --> 00:02:12,239
software like hypervisor

58
00:02:12,400 --> 00:02:15,200
we first define what our secrets so

59
00:02:15,200 --> 00:02:16,879
secrets are guest memory and the

60
00:02:16,879 --> 00:02:19,599
register state of course this definition

61
00:02:19,599 --> 00:02:20,959
is relative

62
00:02:20,959 --> 00:02:23,040
guess remember and registered states are

63
00:02:23,040 --> 00:02:25,280
not secrets to their owners

64
00:02:25,280 --> 00:02:27,520
for example an attacker can review its

65
00:02:27,520 --> 00:02:30,400
own memory and registers via speculative

66
00:02:30,400 --> 00:02:31,599
execution

67
00:02:31,599 --> 00:02:32,480
but

68
00:02:32,480 --> 00:02:34,560
it does not violate the definition of a

69
00:02:34,560 --> 00:02:37,360
secret free hypervisor

70
00:02:37,360 --> 00:02:39,519
so

71
00:02:39,680 --> 00:02:40,800
what's wrong with the existing

72
00:02:40,800 --> 00:02:42,319
hypervisor designs

73
00:02:42,319 --> 00:02:44,160
first is that a hypervisor design

74
00:02:44,160 --> 00:02:46,879
presents a massive surface like the one

75
00:02:46,879 --> 00:02:48,319
on the right

76
00:02:48,319 --> 00:02:50,959
we have hypervisor code data and we keep

77
00:02:50,959 --> 00:02:53,519
all the secret data structures from all

78
00:02:53,519 --> 00:02:56,000
domains and vcpus inside the giant

79
00:02:56,000 --> 00:02:58,080
hypervisor space and we have a direct

80
00:02:58,080 --> 00:02:59,040
map

81
00:02:59,040 --> 00:02:59,840
which

82
00:02:59,840 --> 00:03:01,920
usually maps to the entire physical ram

83
00:03:01,920 --> 00:03:04,080
so a massive surface is even an

84
00:03:04,080 --> 00:03:05,360
understatement

85
00:03:05,360 --> 00:03:08,560
it is literally the entire surface

86
00:03:08,560 --> 00:03:11,360
and we should rethink this strategy and

87
00:03:11,360 --> 00:03:14,720
is this really necessary

88
00:03:14,879 --> 00:03:16,800
the second thing is that we keep a deny

89
00:03:16,800 --> 00:03:19,840
list of all the hardware blocks and we

90
00:03:19,840 --> 00:03:22,319
audit all the potential vulnerable

91
00:03:22,319 --> 00:03:24,319
secret data secret data structures

92
00:03:24,319 --> 00:03:26,720
inside hypervisor space and we carefully

93
00:03:26,720 --> 00:03:29,120
audit them and we

94
00:03:29,120 --> 00:03:31,840
block vulnerable ones with speculation

95
00:03:31,840 --> 00:03:33,760
barriers can we

96
00:03:33,760 --> 00:03:37,200
do a an allowance an allowance approach

97
00:03:37,200 --> 00:03:39,519
so we have a minimum space we include

98
00:03:39,519 --> 00:03:41,519
the hypervisor code and data and some

99
00:03:41,519 --> 00:03:44,080
initial stacks we start from there and

100
00:03:44,080 --> 00:03:47,280
we add non-seekers to this minimum space

101
00:03:47,280 --> 00:03:49,280
instead of removing

102
00:03:49,280 --> 00:03:51,360
vulnerable surfaces from a giant

103
00:03:51,360 --> 00:03:54,000
hypervisor

104
00:03:54,480 --> 00:03:56,959
and we should also rethink hypervisor

105
00:03:56,959 --> 00:03:59,200
guest isolation we've seen from all

106
00:03:59,200 --> 00:04:02,159
those speculative execution attacks that

107
00:04:02,159 --> 00:04:03,920
the traditional hypervisor gasolination

108
00:04:03,920 --> 00:04:06,720
boundary is broken

109
00:04:06,720 --> 00:04:08,560
and we should also

110
00:04:08,560 --> 00:04:10,879
try to maintain secret isolation even

111
00:04:10,879 --> 00:04:14,319
inside the hypervisor space

112
00:04:14,319 --> 00:04:16,000
the goal is that no secrets are

113
00:04:16,000 --> 00:04:17,199
invisible

114
00:04:17,199 --> 00:04:20,799
even inside the hypervisor space

115
00:04:22,000 --> 00:04:24,720
so let's rethink our strategy

116
00:04:24,720 --> 00:04:27,520
and use an allow list approach instead

117
00:04:27,520 --> 00:04:30,000
we start from the bare minimum by having

118
00:04:30,000 --> 00:04:32,800
initial hypervisor image and data and

119
00:04:32,800 --> 00:04:34,560
some stacks

120
00:04:34,560 --> 00:04:36,720
what makes this work different from

121
00:04:36,720 --> 00:04:38,320
state of the art is that we don't

122
00:04:38,320 --> 00:04:40,320
identify secrets that need to be blocked

123
00:04:40,320 --> 00:04:41,759
from speculation

124
00:04:41,759 --> 00:04:44,160
we identify non-secrets that are safe to

125
00:04:44,160 --> 00:04:46,080
speculate and can be added to this

126
00:04:46,080 --> 00:04:48,320
minimum hypervisor space

127
00:04:48,320 --> 00:04:52,000
for example host descriptors like x86

128
00:04:52,000 --> 00:04:54,880
idt gdt in the hypervisor

129
00:04:54,880 --> 00:04:57,919
mmo mappings and generic scheduler state

130
00:04:57,919 --> 00:05:01,600
they are not related to guest secrets

131
00:05:01,600 --> 00:05:03,600
which means that they can be safely

132
00:05:03,600 --> 00:05:06,479
added to the cyber virgo space

133
00:05:06,479 --> 00:05:08,479
we we also make the distinction

134
00:05:08,479 --> 00:05:11,440
distinction between hypervisor

135
00:05:11,440 --> 00:05:14,320
allocation and its visibility what it

136
00:05:14,320 --> 00:05:17,280
means is that whenever a hypervisor

137
00:05:17,280 --> 00:05:18,800
allocates memory

138
00:05:18,800 --> 00:05:22,080
it is not automatically visible to the

139
00:05:22,080 --> 00:05:24,880
hypervisor space and this will be

140
00:05:24,880 --> 00:05:28,000
elaborated further

141
00:05:30,960 --> 00:05:32,720
so we should also maintain secret

142
00:05:32,720 --> 00:05:35,199
isolation even inside hypervisor space

143
00:05:35,199 --> 00:05:37,280
what do i mean by that

144
00:05:37,280 --> 00:05:38,479
traditionally

145
00:05:38,479 --> 00:05:40,800
we spent a lot of resources enforcing

146
00:05:40,800 --> 00:05:43,199
isolation in the high in the gas space

147
00:05:43,199 --> 00:05:44,800
we make sure they are properly isolated

148
00:05:44,800 --> 00:05:47,360
but once we enter the hypervisor

149
00:05:47,360 --> 00:05:49,600
we just somehow assume there is just a

150
00:05:49,600 --> 00:05:52,639
magic barrier that can guard against

151
00:05:52,639 --> 00:05:54,560
all the guest state from affecting

152
00:05:54,560 --> 00:05:57,360
hypervisor execution but we've seen from

153
00:05:57,360 --> 00:05:59,120
all those speculative attacks that this

154
00:05:59,120 --> 00:06:01,520
is no longer true

155
00:06:01,520 --> 00:06:03,919
we redesign the hypervisor

156
00:06:03,919 --> 00:06:06,479
so that it's divided into multiple

157
00:06:06,479 --> 00:06:08,880
secret levels so you have the global

158
00:06:08,880 --> 00:06:10,319
non-secret level

159
00:06:10,319 --> 00:06:12,880
you have the domain secret level

160
00:06:12,880 --> 00:06:15,520
and these data structures are visible to

161
00:06:15,520 --> 00:06:18,240
vcpus of this domain only and you have

162
00:06:18,240 --> 00:06:21,120
the vcpu level which is only visible to

163
00:06:21,120 --> 00:06:23,199
this vcpu remember in the previous

164
00:06:23,199 --> 00:06:24,880
slides we say we make the distinction

165
00:06:24,880 --> 00:06:26,880
between allocation and visibility after

166
00:06:26,880 --> 00:06:28,479
making a hypervisor allocation the

167
00:06:28,479 --> 00:06:31,280
hypervisor makes another call to decide

168
00:06:31,280 --> 00:06:33,759
on what level this data structure is

169
00:06:33,759 --> 00:06:35,840
visible is it

170
00:06:35,840 --> 00:06:38,960
non-secret is it domain secret and is it

171
00:06:38,960 --> 00:06:41,199
vcpu secrets and the hypervisor uses

172
00:06:41,199 --> 00:06:43,440
page table isolation techniques to make

173
00:06:43,440 --> 00:06:46,080
sure these data secret data structures

174
00:06:46,080 --> 00:06:48,319
are only visible on their corresponding

175
00:06:48,319 --> 00:06:50,800
secret levels

176
00:06:50,800 --> 00:06:53,280
with this design whenever a guest enters

177
00:06:53,280 --> 00:06:55,360
the hypervisor

178
00:06:55,360 --> 00:06:57,440
it is guaranteed that it only sees

179
00:06:57,440 --> 00:06:58,960
secrets

180
00:06:58,960 --> 00:07:00,800
belonging to itself

181
00:07:00,800 --> 00:07:03,120
and it is safe to relax some

182
00:07:03,120 --> 00:07:04,880
speculations because it's guaranteed

183
00:07:04,880 --> 00:07:08,240
that there's no secrets to other domains

184
00:07:08,240 --> 00:07:10,400
and there are no secrets there

185
00:07:10,400 --> 00:07:14,240
for a malicious guest to speculate

186
00:07:14,240 --> 00:07:16,000
there are challenges quite a lot of

187
00:07:16,000 --> 00:07:18,400
challenges of this work

188
00:07:18,400 --> 00:07:19,840
and i'll give you some examples for

189
00:07:19,840 --> 00:07:21,360
example we say that we start from the

190
00:07:21,360 --> 00:07:24,800
bin minimum and treat hypervisor stacks

191
00:07:24,800 --> 00:07:26,880
as non-seekers we have the bare minimum

192
00:07:26,880 --> 00:07:28,960
of hybris code and some initial data and

193
00:07:28,960 --> 00:07:31,039
stacks but it turns out

194
00:07:31,039 --> 00:07:32,880
stacks must be treated as secrets as

195
00:07:32,880 --> 00:07:35,599
well for example on hyper calls and on

196
00:07:35,599 --> 00:07:36,720
interrupts

197
00:07:36,720 --> 00:07:39,120
guest state the guest registers frame is

198
00:07:39,120 --> 00:07:40,560
built onto the stack

199
00:07:40,560 --> 00:07:41,840
[Music]

200
00:07:41,840 --> 00:07:45,440
alongside with vcpu information

201
00:07:45,440 --> 00:07:47,840
and we have to move hypervisor stacks to

202
00:07:47,840 --> 00:07:50,960
vcu cpu seekers and this breaks a lot of

203
00:07:50,960 --> 00:07:53,199
things and because the hypervisor code

204
00:07:53,199 --> 00:07:55,680
really assumes that all data structures

205
00:07:55,680 --> 00:07:57,440
should be visible to the hypervisor at

206
00:07:57,440 --> 00:07:59,039
all times

207
00:07:59,039 --> 00:08:00,879
and there are other challenges like

208
00:08:00,879 --> 00:08:03,199
a direct map that maps the entire

209
00:08:03,199 --> 00:08:04,960
physical memory is of course against the

210
00:08:04,960 --> 00:08:07,440
principle of secret free but it is there

211
00:08:07,440 --> 00:08:09,440
for a reason because with a direct map

212
00:08:09,440 --> 00:08:12,240
the hypervisor can access

213
00:08:12,240 --> 00:08:14,240
arbitrary physical memory by just doing

214
00:08:14,240 --> 00:08:16,560
some bit shifting from the physical

215
00:08:16,560 --> 00:08:17,520
address

216
00:08:17,520 --> 00:08:18,800
to give you

217
00:08:18,800 --> 00:08:21,120
a direct map virtual address

218
00:08:21,120 --> 00:08:23,520
and it is also

219
00:08:23,520 --> 00:08:25,840
usually contiguous mapped with

220
00:08:25,840 --> 00:08:28,639
huge pages which usually reduces quite a

221
00:08:28,639 --> 00:08:31,520
lot of the tlb pressure

222
00:08:31,520 --> 00:08:33,440
but how do we access arbitrary physical

223
00:08:33,440 --> 00:08:35,120
memory without it

224
00:08:35,120 --> 00:08:36,640
and especially

225
00:08:36,640 --> 00:08:39,519
how do we do that efficiently and how do

226
00:08:39,519 --> 00:08:42,799
we match the efficiency of a direct map

227
00:08:42,799 --> 00:08:44,959
these are some of the example challenges

228
00:08:44,959 --> 00:08:46,560
and the answers are presented in the

229
00:08:46,560 --> 00:08:48,880
paper

230
00:08:48,880 --> 00:08:51,839
now we move on to the evaluation of sql

231
00:08:51,839 --> 00:08:54,560
free hypervisor and we evaluate the zen

232
00:08:54,560 --> 00:08:56,320
implementation

233
00:08:56,320 --> 00:09:00,160
overall we've seen that in i o intensive

234
00:09:00,160 --> 00:09:02,480
micro benchmarks we've seen a slowdown

235
00:09:02,480 --> 00:09:06,000
of only 2.6 percent versus the 10 of

236
00:09:06,000 --> 00:09:09,040
enabling then default mitigations

237
00:09:09,040 --> 00:09:11,120
and in real-world applications the

238
00:09:11,120 --> 00:09:13,839
slowdown is almost not noticeable versus

239
00:09:13,839 --> 00:09:18,240
more than one percent of zen default

240
00:09:18,720 --> 00:09:21,120
so from the implementation evaluation we

241
00:09:21,120 --> 00:09:23,360
have a couple of important insights

242
00:09:23,360 --> 00:09:25,600
first one is that if we can guarantee in

243
00:09:25,600 --> 00:09:27,920
the hypervisor space no secrets are

244
00:09:27,920 --> 00:09:29,680
visible then we can relax some

245
00:09:29,680 --> 00:09:31,680
speculation barriers

246
00:09:31,680 --> 00:09:33,760
because it is guaranteed that

247
00:09:33,760 --> 00:09:35,360
no matter how

248
00:09:35,360 --> 00:09:37,440
the speculation state is affected by the

249
00:09:37,440 --> 00:09:39,279
guest there's simply nothing in the

250
00:09:39,279 --> 00:09:41,360
hypervisor there for the guest to

251
00:09:41,360 --> 00:09:43,519
speculate

252
00:09:43,519 --> 00:09:46,000
this gives us reduced hypercall latency

253
00:09:46,000 --> 00:09:48,399
versus state-of-the-art mitigations

254
00:09:48,399 --> 00:09:50,640
especially this improves the performance

255
00:09:50,640 --> 00:09:53,839
in i o intensive workloads

256
00:09:53,839 --> 00:09:55,839
there's another key inside which is that

257
00:09:55,839 --> 00:09:57,519
zen also supports the power

258
00:09:57,519 --> 00:10:00,320
virtualization mode which is

259
00:10:00,320 --> 00:10:02,959
used on hardware without

260
00:10:02,959 --> 00:10:04,959
hardware virtualization support this

261
00:10:04,959 --> 00:10:07,600
puts that hypervisor in ring zero and

262
00:10:07,600 --> 00:10:09,760
gets in ring three

263
00:10:09,760 --> 00:10:12,160
which also means guests and hyper the

264
00:10:12,160 --> 00:10:15,040
zen hypervisor share the same page table

265
00:10:15,040 --> 00:10:16,800
and this creates a big problem because

266
00:10:16,800 --> 00:10:17,760
on

267
00:10:17,760 --> 00:10:20,160
meltdown vulnerable hardware you then

268
00:10:20,160 --> 00:10:21,680
need to deploy

269
00:10:21,680 --> 00:10:24,000
page table isolation against amazon

270
00:10:24,000 --> 00:10:24,959
attacks

271
00:10:24,959 --> 00:10:25,839
and

272
00:10:25,839 --> 00:10:27,600
this gives

273
00:10:27,600 --> 00:10:29,839
roughly and sometimes even more than 50

274
00:10:29,839 --> 00:10:32,560
percent of the overhead but if we can

275
00:10:32,560 --> 00:10:34,720
have a minimum hypervisor space and we

276
00:10:34,720 --> 00:10:36,240
always stay

277
00:10:36,240 --> 00:10:37,839
on this minimum space then there is no

278
00:10:37,839 --> 00:10:40,399
need for us to swap page tables

279
00:10:40,399 --> 00:10:43,440
and this is still safe

280
00:10:43,440 --> 00:10:44,720
and now

281
00:10:44,720 --> 00:10:47,279
xenpower virtualization mode is usable

282
00:10:47,279 --> 00:10:49,120
again even on

283
00:10:49,120 --> 00:10:52,480
meltdown vulnerable hardware

284
00:10:52,800 --> 00:10:54,399
the secret free design principle also

285
00:10:54,399 --> 00:10:56,079
defends against certain architectural

286
00:10:56,079 --> 00:10:58,720
attacks as well for example for the

287
00:10:58,720 --> 00:11:01,200
return to direct map attack

288
00:11:01,200 --> 00:11:03,760
a guest can simply inject code and data

289
00:11:03,760 --> 00:11:05,360
inside guest space

290
00:11:05,360 --> 00:11:07,279
and find the vulnerability inside the

291
00:11:07,279 --> 00:11:10,160
hypervisor to redirect code execution

292
00:11:10,160 --> 00:11:11,040
to

293
00:11:11,040 --> 00:11:13,040
onto the direct map alias

294
00:11:13,040 --> 00:11:16,000
but with a minimum hypervisor space we

295
00:11:16,000 --> 00:11:18,079
add another layer of defense against

296
00:11:18,079 --> 00:11:20,959
such attacks as well

297
00:11:20,959 --> 00:11:23,040
we've implemented the secret free

298
00:11:23,040 --> 00:11:24,959
principle on other hypervisors and

299
00:11:24,959 --> 00:11:26,560
kernels as well

300
00:11:26,560 --> 00:11:28,640
for example we have a hyper-v

301
00:11:28,640 --> 00:11:30,800
implementation which has been deployed

302
00:11:30,800 --> 00:11:33,440
to azure since 2019

303
00:11:33,440 --> 00:11:35,680
and the hyper-v implementation has gone

304
00:11:35,680 --> 00:11:37,360
through the test of time

305
00:11:37,360 --> 00:11:41,360
it has been thoroughly production tested

306
00:11:41,360 --> 00:11:44,000
we also have a beehive implementation

307
00:11:44,000 --> 00:11:46,880
which is a type 2 hypervisor inside the

308
00:11:46,880 --> 00:11:48,480
freebsd kernel

309
00:11:48,480 --> 00:11:51,040
and of course we have implemented this

310
00:11:51,040 --> 00:11:53,440
on the free bsd kernel as well which is

311
00:11:53,440 --> 00:11:55,120
a unix kernel

312
00:11:55,120 --> 00:11:57,120
the secret free hypervisor idea works

313
00:11:57,120 --> 00:11:59,279
best on type 1 hypervisors

314
00:11:59,279 --> 00:12:02,000
on type 2 hypervisors and unix kernels

315
00:12:02,000 --> 00:12:04,320
there are a couple of caveats

316
00:12:04,320 --> 00:12:06,000
and we have

317
00:12:06,000 --> 00:12:08,160
introduced a couple of proof of concept

318
00:12:08,160 --> 00:12:10,320
optimizations for them which are

319
00:12:10,320 --> 00:12:13,600
elaborated in the paper

320
00:12:15,200 --> 00:12:17,600
what is quite exciting is that this work

321
00:12:17,600 --> 00:12:20,399
guards against categories of attacks and

322
00:12:20,399 --> 00:12:22,639
even against unknown attacks

323
00:12:22,639 --> 00:12:24,399
after the paper was accepted the branch

324
00:12:24,399 --> 00:12:26,639
history injection was disclosed

325
00:12:26,639 --> 00:12:29,360
it circumvents existing ibrs defenses

326
00:12:29,360 --> 00:12:30,320
and

327
00:12:30,320 --> 00:12:33,200
we repeat the cycle again we need to

328
00:12:33,200 --> 00:12:34,800
develop mitigations we need to

329
00:12:34,800 --> 00:12:37,519
coordinate with the industry for the

330
00:12:37,519 --> 00:12:40,399
deployment of mitigations and we suffer

331
00:12:40,399 --> 00:12:44,079
from some more performance slowdown

332
00:12:44,079 --> 00:12:46,000
but a secret free hypervisor is well

333
00:12:46,000 --> 00:12:48,079
prepared against that because we we

334
00:12:48,079 --> 00:12:50,320
simply don't assume that there is just a

335
00:12:50,320 --> 00:12:52,240
magic barrier between hypervisor and

336
00:12:52,240 --> 00:12:55,120
guest we assume that guest

337
00:12:55,120 --> 00:12:56,880
speculative execution state can leak

338
00:12:56,880 --> 00:12:59,120
into hypervisor

339
00:12:59,120 --> 00:13:02,240
but we properly isolate secrets

340
00:13:02,240 --> 00:13:04,959
even in hypervisor space to guarantee

341
00:13:04,959 --> 00:13:07,680
that there's simply nothing for a

342
00:13:07,680 --> 00:13:10,000
malicious guest to speculate anyway

343
00:13:10,000 --> 00:13:12,399
so we are actually well prepared against

344
00:13:12,399 --> 00:13:14,480
branch history injection and we don't

345
00:13:14,480 --> 00:13:17,040
need to develop specific mitigations in

346
00:13:17,040 --> 00:13:20,519
a secret free hypervisor

347
00:13:21,360 --> 00:13:22,399
so

348
00:13:22,399 --> 00:13:25,519
the conclusions of this talk are

349
00:13:25,519 --> 00:13:26,639
first that

350
00:13:26,639 --> 00:13:28,560
current defenses against specific

351
00:13:28,560 --> 00:13:32,560
execution simply don't scale

352
00:13:32,560 --> 00:13:34,959
and our programming model for writing

353
00:13:34,959 --> 00:13:37,200
low-level software no longer matches

354
00:13:37,200 --> 00:13:38,880
reality

355
00:13:38,880 --> 00:13:40,160
and the

356
00:13:40,160 --> 00:13:42,240
isolation barrier between hypervisor and

357
00:13:42,240 --> 00:13:43,199
guest

358
00:13:43,199 --> 00:13:47,760
is already broken by speculations

359
00:13:47,760 --> 00:13:50,160
i have um sorry a hypervisor should

360
00:13:50,160 --> 00:13:52,480
embrace a secret-free design by having a

361
00:13:52,480 --> 00:13:54,079
minimum space

362
00:13:54,079 --> 00:13:55,680
by um

363
00:13:55,680 --> 00:13:58,240
using a loudness approach and by also

364
00:13:58,240 --> 00:14:00,320
properly isolating secrets even inside

365
00:14:00,320 --> 00:14:03,360
the hypervisor space to guarantee that

366
00:14:03,360 --> 00:14:04,560
secrets

367
00:14:04,560 --> 00:14:06,880
are not visible not only in guest space

368
00:14:06,880 --> 00:14:08,880
but also when a guest enters the

369
00:14:08,880 --> 00:14:10,959
hypervisor

370
00:14:10,959 --> 00:14:12,880
this is a systematic defense against

371
00:14:12,880 --> 00:14:15,600
categories of vulnerabilities and even

372
00:14:15,600 --> 00:14:18,079
against unknown vulnerabilities like the

373
00:14:18,079 --> 00:14:20,079
branch history injection attack we've

374
00:14:20,079 --> 00:14:22,480
just mentioned earlier

375
00:14:22,480 --> 00:14:24,320
this shows better performance than state

376
00:14:24,320 --> 00:14:26,720
of the art mitigations because

377
00:14:26,720 --> 00:14:29,760
we allow speculations in paths where

378
00:14:29,760 --> 00:14:34,240
secrets are guaranteed to be invisible

379
00:14:34,240 --> 00:14:36,959
and this is a generic approach

380
00:14:36,959 --> 00:14:39,120
which is also applicable to multiple

381
00:14:39,120 --> 00:14:41,680
types of hypervisors and kernels

382
00:14:41,680 --> 00:14:44,000
including type 1 hypervisor type 2 and

383
00:14:44,000 --> 00:14:46,880
also unix kernels

384
00:14:46,880 --> 00:14:50,000
and thank you very much

385
00:14:50,610 --> 00:14:54,789
[Applause]

386
00:14:54,800 --> 00:14:57,199
okay thank you for that very nice talk i

387
00:14:57,199 --> 00:14:59,360
think we have time for one quick

388
00:14:59,360 --> 00:15:01,839
question

389
00:15:05,839 --> 00:15:06,880
hello

390
00:15:06,880 --> 00:15:09,680
um miles metz my name i'm

391
00:15:09,680 --> 00:15:12,639
working in my job on microcurrent-based

392
00:15:12,639 --> 00:15:16,800
operating systems um concretely on l4re

393
00:15:16,800 --> 00:15:20,160
and my intuition would be that

394
00:15:20,160 --> 00:15:23,360
all this domain isolation

395
00:15:23,360 --> 00:15:24,880
would already be present in a

396
00:15:24,880 --> 00:15:27,279
microcontroller-based operating system

397
00:15:27,279 --> 00:15:30,880
using some kind of micro hypervisor

398
00:15:30,880 --> 00:15:33,040
did you have a look at these systems and

399
00:15:33,040 --> 00:15:34,320
if yes

400
00:15:34,320 --> 00:15:36,079
do you know if there's

401
00:15:36,079 --> 00:15:39,040
still work to be done or if

402
00:15:39,040 --> 00:15:42,240
this would be a good um

403
00:15:42,240 --> 00:15:44,560
opportunity to just switch to such a

404
00:15:44,560 --> 00:15:46,399
system

405
00:15:46,399 --> 00:15:50,240
um yeah um can you hear me yes

406
00:15:50,240 --> 00:15:52,639
yeah so actually yeah i actually started

407
00:15:52,639 --> 00:15:54,880
smiling because this is exactly what one

408
00:15:54,880 --> 00:15:57,040
of the one section of the paper

409
00:15:57,040 --> 00:15:58,560
is talking about so

410
00:15:58,560 --> 00:16:00,959
one challenge of this work is that

411
00:16:00,959 --> 00:16:03,440
why type 2 and unix kernels don't work

412
00:16:03,440 --> 00:16:04,639
that well is that they're just

413
00:16:04,639 --> 00:16:06,320
monolithic kernels and

414
00:16:06,320 --> 00:16:08,959
really introducing the idea of domain

415
00:16:08,959 --> 00:16:11,920
private or eco-private memory is super

416
00:16:11,920 --> 00:16:14,639
difficult it requires tons of

417
00:16:14,639 --> 00:16:15,440
code

418
00:16:15,440 --> 00:16:16,880
lines of changes

419
00:16:16,880 --> 00:16:19,360
so um actually in mono section we use

420
00:16:19,360 --> 00:16:22,800
discuss if you um properly um isolate

421
00:16:22,800 --> 00:16:25,759
the kernel components especially you put

422
00:16:25,759 --> 00:16:26,639
um

423
00:16:26,639 --> 00:16:28,720
those in charge of secrets and those in

424
00:16:28,720 --> 00:16:30,320
charge of non-secrets

425
00:16:30,320 --> 00:16:32,000
properly separate them and have a

426
00:16:32,000 --> 00:16:34,639
microkernel approach that will

427
00:16:34,639 --> 00:16:36,720
make adopting a secret fiat provider

428
00:16:36,720 --> 00:16:38,320
super straightforward

429
00:16:38,320 --> 00:16:40,480
um and uh yeah in one of the uh sections

430
00:16:40,480 --> 00:16:42,959
where just uh um calling

431
00:16:42,959 --> 00:16:46,000
to people um please think about um the

432
00:16:46,000 --> 00:16:47,680
micro kernel approach

433
00:16:47,680 --> 00:16:48,800
yeah

434
00:16:48,800 --> 00:16:50,480
okay thank you

435
00:16:50,480 --> 00:16:51,279
great

436
00:16:51,279 --> 00:16:52,720
we have to move on to the next talk

437
00:16:52,720 --> 00:16:55,460
thank you

438
00:16:55,460 --> 00:16:57,820
[Applause]

