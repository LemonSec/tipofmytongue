1
00:00:01,439 --> 00:00:02,960
all right so thank you jonas for the

2
00:00:02,960 --> 00:00:04,880
introduction hello everyone i'm very

3
00:00:04,880 --> 00:00:06,640
excited to present this project finally

4
00:00:06,640 --> 00:00:09,120
i hear like to all of you guys

5
00:00:09,120 --> 00:00:10,639
and yeah indeed i want to talk about

6
00:00:10,639 --> 00:00:12,719
like hipster a system we developed to

7
00:00:12,719 --> 00:00:14,160
analyze the security of dynamical

8
00:00:14,160 --> 00:00:16,560
locators in monolithic firmware images

9
00:00:16,560 --> 00:00:18,160
let's start to dive in by breaking down

10
00:00:18,160 --> 00:00:20,240
the titles first of all dynamical

11
00:00:20,240 --> 00:00:21,359
locator

12
00:00:21,359 --> 00:00:23,119
dynamic allocator algorithms that are

13
00:00:23,119 --> 00:00:25,119
used to manage dynamic memory in other

14
00:00:25,119 --> 00:00:27,439
words like the heap memory and of like

15
00:00:27,439 --> 00:00:29,119
any programs in general

16
00:00:29,119 --> 00:00:31,039
and a robust dynamic allocator is

17
00:00:31,039 --> 00:00:32,960
usually like crucial for the performance

18
00:00:32,960 --> 00:00:34,559
of any software

19
00:00:34,559 --> 00:00:36,480
and it's usually composed by at least

20
00:00:36,480 --> 00:00:38,879
two primitives malloc and free and we're

21
00:00:38,879 --> 00:00:40,960
gonna call this like two primitives like

22
00:00:40,960 --> 00:00:42,559
from from the rest of the talk like the

23
00:00:42,559 --> 00:00:46,399
heap management library the hml

24
00:00:46,399 --> 00:00:48,320
dynamic allocators are routinely abused

25
00:00:48,320 --> 00:00:49,920
as building blocks for complex

26
00:00:49,920 --> 00:00:51,520
exploitation chains and it's not

27
00:00:51,520 --> 00:00:53,280
uncommon to see it point to one like

28
00:00:53,280 --> 00:00:55,520
many e-based vulnerabilities being used

29
00:00:55,520 --> 00:00:57,039
to put together like very complex

30
00:00:57,039 --> 00:00:59,440
exploitation chain for different targets

31
00:00:59,440 --> 00:01:01,520
like routers like zoom like google

32
00:01:01,520 --> 00:01:04,080
chrome whatever target like so these are

33
00:01:04,080 --> 00:01:06,400
like very powerful like primitives

34
00:01:06,400 --> 00:01:08,479
uh the current research is mainly

35
00:01:08,479 --> 00:01:10,880
focused on allocator for classic systems

36
00:01:10,880 --> 00:01:12,159
and i'm going to introduce like in a bit

37
00:01:12,159 --> 00:01:14,159
what is a classic system but you know in

38
00:01:14,159 --> 00:01:16,159
a few words like system like your laptop

39
00:01:16,159 --> 00:01:18,080
or like any desktop system that we are

40
00:01:18,080 --> 00:01:19,759
used to so the lib c for example that

41
00:01:19,759 --> 00:01:22,240
you are using in your system

42
00:01:22,240 --> 00:01:24,159
um yeah on the other side we have

43
00:01:24,159 --> 00:01:26,400
monolithic firmware which is like a

44
00:01:26,400 --> 00:01:29,680
firmware without an os abstraction so uh

45
00:01:29,680 --> 00:01:31,680
here you see like a picture of a classic

46
00:01:31,680 --> 00:01:33,680
system in which the boundaries between

47
00:01:33,680 --> 00:01:35,439
all the components of like a system are

48
00:01:35,439 --> 00:01:37,680
like very well defined and they talk to

49
00:01:37,680 --> 00:01:39,920
each other with like some sort of apis

50
00:01:39,920 --> 00:01:42,320
when you have like a monolithic firmware

51
00:01:42,320 --> 00:01:44,240
uh and we call it like with a funny name

52
00:01:44,240 --> 00:01:46,240
sometime a blob you indeed like have a

53
00:01:46,240 --> 00:01:48,240
blob like a binary with everything

54
00:01:48,240 --> 00:01:51,040
inside so uh operating system library

55
00:01:51,040 --> 00:01:52,720
the application and the library like

56
00:01:52,720 --> 00:01:54,880
supporting library all together in a

57
00:01:54,880 --> 00:01:56,560
single binary this is a monolithic

58
00:01:56,560 --> 00:01:58,640
firmware image

59
00:01:58,640 --> 00:02:00,479
turns out that they empower a huge

60
00:02:00,479 --> 00:02:03,280
amount of diverse iot devices

61
00:02:03,280 --> 00:02:05,600
and this means that the attack surface

62
00:02:05,600 --> 00:02:08,318
out there is indeed huge and there is a

63
00:02:08,318 --> 00:02:10,160
spectrum of different threat scenarios

64
00:02:10,160 --> 00:02:12,480
out there and they go from oops i just

65
00:02:12,480 --> 00:02:14,319
hack my toaster which yeah you're gonna

66
00:02:14,319 --> 00:02:15,920
have a bad breakfast but it's not a big

67
00:02:15,920 --> 00:02:18,959
deal uh two oops i have a remote

68
00:02:18,959 --> 00:02:21,120
arbitrary right of your piecemaker

69
00:02:21,120 --> 00:02:22,879
going to have a very bad day

70
00:02:22,879 --> 00:02:25,440
so very bad scenario

71
00:02:25,440 --> 00:02:28,959
this is a very hard target for static

72
00:02:28,959 --> 00:02:31,760
and dynamic analysis uh because usually

73
00:02:31,760 --> 00:02:33,440
you are like with the binary and you are

74
00:02:33,440 --> 00:02:35,280
on your own with the binary

75
00:02:35,280 --> 00:02:37,360
you don't have symbols you don't even

76
00:02:37,360 --> 00:02:38,959
know sometimes where the firmware is

77
00:02:38,959 --> 00:02:41,920
supposed to run on so completely blind

78
00:02:41,920 --> 00:02:44,640
and also if you want to scale

79
00:02:44,640 --> 00:02:46,560
the analysis over like hundreds of

80
00:02:46,560 --> 00:02:48,400
different images

81
00:02:48,400 --> 00:02:49,760
there is the scalability of the

82
00:02:49,760 --> 00:02:51,840
rehosting technologies which is like

83
00:02:51,840 --> 00:02:53,680
right now still like a big challenge to

84
00:02:53,680 --> 00:02:56,720
support all these like firmware images

85
00:02:56,720 --> 00:02:59,920
so pretty headache for program analysis

86
00:02:59,920 --> 00:03:01,519
so what we want to do here we want to

87
00:03:01,519 --> 00:03:03,120
bring together the two words and study

88
00:03:03,120 --> 00:03:04,959
what's in the middle so

89
00:03:04,959 --> 00:03:06,720
the main two research questions are

90
00:03:06,720 --> 00:03:08,560
first of all we want to understand if

91
00:03:08,560 --> 00:03:10,400
the firmware binary is using a dynamical

92
00:03:10,400 --> 00:03:13,040
locator at all and second if the

93
00:03:13,040 --> 00:03:15,120
firmware allocator is robust against

94
00:03:15,120 --> 00:03:17,440
known attacks

95
00:03:17,440 --> 00:03:19,760
so um just to

96
00:03:19,760 --> 00:03:21,440
define a little bit the scope of our

97
00:03:21,440 --> 00:03:23,519
research um

98
00:03:23,519 --> 00:03:25,200
we want to focus on monolithic film

99
00:03:25,200 --> 00:03:28,080
images like i said for cortex-m

100
00:03:28,080 --> 00:03:30,239
and specifically firmware images that

101
00:03:30,239 --> 00:03:32,480
are using classical locator and with

102
00:03:32,480 --> 00:03:35,280
classic i mean they function like the

103
00:03:35,280 --> 00:03:38,000
the malloc you guys know so they receive

104
00:03:38,000 --> 00:03:40,000
a size as a parameter at least to

105
00:03:40,000 --> 00:03:41,920
specify how much you want to allocate

106
00:03:41,920 --> 00:03:43,760
they return the calculated address

107
00:03:43,760 --> 00:03:46,000
through the flow register so in arm will

108
00:03:46,000 --> 00:03:48,640
be r0 and finally they take this

109
00:03:48,640 --> 00:03:50,879
opportunity to reuse the allocated

110
00:03:50,879 --> 00:03:53,040
chunks so if i free a chunk i expect at

111
00:03:53,040 --> 00:03:54,640
some point to see the chunk to appear

112
00:03:54,640 --> 00:03:57,040
again in memory that address at least so

113
00:03:57,040 --> 00:04:00,799
to maximize the performances

114
00:04:00,799 --> 00:04:03,200
so we put together hipster which is uh

115
00:04:03,200 --> 00:04:05,519
mainly composed by these four steps and

116
00:04:05,519 --> 00:04:07,599
our end goals are first of all

117
00:04:07,599 --> 00:04:09,920
understanding where is malloc and free

118
00:04:09,920 --> 00:04:10,720
and

119
00:04:10,720 --> 00:04:12,319
second check the security of these

120
00:04:12,319 --> 00:04:14,480
primitives so we start with a firmware

121
00:04:14,480 --> 00:04:16,079
image we don't know anything about it

122
00:04:16,079 --> 00:04:19,120
just that is like for cortex-m and first

123
00:04:19,120 --> 00:04:20,720
thing first we want to identify the

124
00:04:20,720 --> 00:04:22,720
basic functions so functions that are

125
00:04:22,720 --> 00:04:25,040
consuming pointers or manipulating these

126
00:04:25,040 --> 00:04:27,040
pointers to perform some action

127
00:04:27,040 --> 00:04:28,960
then we want to find who is the source

128
00:04:28,960 --> 00:04:31,520
for these pointers so the find the

129
00:04:31,520 --> 00:04:33,840
pointer sources we call them

130
00:04:33,840 --> 00:04:35,919
third we want to in this subset uh

131
00:04:35,919 --> 00:04:38,160
identify mall lock and free and finally

132
00:04:38,160 --> 00:04:39,840
check the security we're going to dive

133
00:04:39,840 --> 00:04:41,040
in in all the steps like in the

134
00:04:41,040 --> 00:04:42,800
following slides

135
00:04:42,800 --> 00:04:45,199
so as i said we receive a binary blob we

136
00:04:45,199 --> 00:04:46,880
don't know anything uh just a bunch of

137
00:04:46,880 --> 00:04:49,040
one and zeros the first thing we want to

138
00:04:49,040 --> 00:04:51,440
do is to identify the boundaries of the

139
00:04:51,440 --> 00:04:52,800
functions so

140
00:04:52,800 --> 00:04:56,240
uh to do this we assemble to we use um

141
00:04:56,240 --> 00:04:58,639
recursive disassembly technique and just

142
00:04:58,639 --> 00:04:59,840
pattern matching the products of

143
00:04:59,840 --> 00:05:02,479
functions so we go from this to the

144
00:05:02,479 --> 00:05:03,919
state in which some functions are

145
00:05:03,919 --> 00:05:05,520
defined in the blob and we can start to

146
00:05:05,520 --> 00:05:07,600
make sense of what the blobs is

147
00:05:07,600 --> 00:05:09,120
containing

148
00:05:09,120 --> 00:05:11,199
now the problem is sometimes we have

149
00:05:11,199 --> 00:05:13,039
hundreds of thousands of functions so we

150
00:05:13,039 --> 00:05:15,199
cannot like dig into this like set like

151
00:05:15,199 --> 00:05:16,960
manually so we need to use like

152
00:05:16,960 --> 00:05:19,120
automatic technique to understand what's

153
00:05:19,120 --> 00:05:20,240
going on

154
00:05:20,240 --> 00:05:22,479
uh the problem is as i said we were

155
00:05:22,479 --> 00:05:24,479
looking for malloc and free and this

156
00:05:24,479 --> 00:05:26,000
looks like looking for a needle in a

157
00:05:26,000 --> 00:05:28,320
haystack sometimes so again we need

158
00:05:28,320 --> 00:05:31,840
automatic technique to perform this task

159
00:05:31,840 --> 00:05:34,000
first intuition is memory allocator

160
00:05:34,000 --> 00:05:36,800
generate pointers that's their job right

161
00:05:36,800 --> 00:05:39,840
and second pointers are eventually used

162
00:05:39,840 --> 00:05:42,000
to perform memory operation so something

163
00:05:42,000 --> 00:05:43,199
we want to do something with these

164
00:05:43,199 --> 00:05:44,240
pointers

165
00:05:44,240 --> 00:05:46,880
so the question is who is using these

166
00:05:46,880 --> 00:05:48,160
pointers

167
00:05:48,160 --> 00:05:50,800
and turns out this function mem copy mmm

168
00:05:50,800 --> 00:05:52,800
set men compare and every like string

169
00:05:52,800 --> 00:05:55,360
manipulating function are consuming the

170
00:05:55,360 --> 00:05:58,000
pointer we can we can call them consumer

171
00:05:58,000 --> 00:06:01,199
and this function are simply to identify

172
00:06:01,199 --> 00:06:02,800
simple to identify because they have

173
00:06:02,800 --> 00:06:04,960
like a very basic behavior

174
00:06:04,960 --> 00:06:07,120
indeed we call them like in our paper

175
00:06:07,120 --> 00:06:09,440
basic functions

176
00:06:09,440 --> 00:06:10,319
so

177
00:06:10,319 --> 00:06:11,919
for example let's say we want to

178
00:06:11,919 --> 00:06:14,720
identify mem copy in this like jungle

179
00:06:14,720 --> 00:06:16,800
function we identify in the binary let's

180
00:06:16,800 --> 00:06:19,520
say we grab a candidate f8 in this case

181
00:06:19,520 --> 00:06:20,639
on the left

182
00:06:20,639 --> 00:06:23,039
and let's say we know this function

183
00:06:23,039 --> 00:06:24,960
takes three parameters we set these

184
00:06:24,960 --> 00:06:27,919
three parameters to known uh inputs we

185
00:06:27,919 --> 00:06:29,919
run the function and we check at the end

186
00:06:29,919 --> 00:06:32,479
if the execution respect uh the behavior

187
00:06:32,479 --> 00:06:35,199
of a m copy so in other words for

188
00:06:35,199 --> 00:06:37,039
example let's say

189
00:06:37,039 --> 00:06:39,120
the buffer at the source is containing

190
00:06:39,120 --> 00:06:40,720
the buffer the destination and the

191
00:06:40,720 --> 00:06:43,360
buffer at the source is unchanged

192
00:06:43,360 --> 00:06:46,160
so if this is true we call this mem copy

193
00:06:46,160 --> 00:06:47,520
and we have different models we check

194
00:06:47,520 --> 00:06:50,160
against all this function so we go from

195
00:06:50,160 --> 00:06:52,560
this to the state in which some basic

196
00:06:52,560 --> 00:06:54,639
functions uh are some functions that

197
00:06:54,639 --> 00:06:56,800
manipulate memory are defined in the

198
00:06:56,800 --> 00:06:58,319
blob

199
00:06:58,319 --> 00:07:00,400
we can also see this function as syncs

200
00:07:00,400 --> 00:07:01,360
so

201
00:07:01,360 --> 00:07:03,520
sort of thinking that pointers are

202
00:07:03,520 --> 00:07:05,680
flowing inside this function and being

203
00:07:05,680 --> 00:07:07,599
consumed over there

204
00:07:07,599 --> 00:07:09,039
so now the question is what are the

205
00:07:09,039 --> 00:07:10,240
sources

206
00:07:10,240 --> 00:07:11,520
um

207
00:07:11,520 --> 00:07:14,240
so we call the sources a pointer source

208
00:07:14,240 --> 00:07:16,000
because they

209
00:07:16,000 --> 00:07:17,680
sort of generate this pointer and

210
00:07:17,680 --> 00:07:19,840
provide it to to our sinks to our basic

211
00:07:19,840 --> 00:07:21,599
functions so in this example you can see

212
00:07:21,599 --> 00:07:25,039
f19 returning v25 that flows inside

213
00:07:25,039 --> 00:07:27,440
memcopi our sync in other words our

214
00:07:27,440 --> 00:07:29,039
basic function

215
00:07:29,039 --> 00:07:31,919
to identify pointer sources we we use a

216
00:07:31,919 --> 00:07:34,160
static taint engine uh based on reaching

217
00:07:34,160 --> 00:07:36,160
definition and we run this analysis in

218
00:07:36,160 --> 00:07:37,919
an inter-procedural way to connect

219
00:07:37,919 --> 00:07:39,919
different points of the of the blob and

220
00:07:39,919 --> 00:07:42,240
see if there is any flow of like a

221
00:07:42,240 --> 00:07:44,400
definition static definition from any

222
00:07:44,400 --> 00:07:46,560
returning from any function that defines

223
00:07:46,560 --> 00:07:48,639
any argument of one of the basic

224
00:07:48,639 --> 00:07:50,960
function we identified the previous step

225
00:07:50,960 --> 00:07:53,840
so again in this case f19 is creating a

226
00:07:53,840 --> 00:07:56,319
static definition let's call it f19

227
00:07:56,319 --> 00:07:59,199
return that defines the first mem copy

228
00:07:59,199 --> 00:08:00,960
argument

229
00:08:00,960 --> 00:08:01,759
so

230
00:08:01,759 --> 00:08:03,759
yeah in this case we call f19 a pointer

231
00:08:03,759 --> 00:08:06,240
source so now we have things and we have

232
00:08:06,240 --> 00:08:08,720
sources and we know that a memory

233
00:08:08,720 --> 00:08:10,000
allocator

234
00:08:10,000 --> 00:08:11,680
is a pointer source by construction

235
00:08:11,680 --> 00:08:12,479
right

236
00:08:12,479 --> 00:08:13,599
so

237
00:08:13,599 --> 00:08:15,919
the question is uh sometimes i have many

238
00:08:15,919 --> 00:08:17,360
pointer sources so i don't want to go

239
00:08:17,360 --> 00:08:19,599
through them manually again so we want

240
00:08:19,599 --> 00:08:21,280
to use like automatic technique

241
00:08:21,280 --> 00:08:23,280
technique to understand who is the

242
00:08:23,280 --> 00:08:26,720
allocator of this blob so the first

243
00:08:26,720 --> 00:08:29,680
intuition uh malloc return pointers

244
00:08:29,680 --> 00:08:31,520
inside the hip region and this is

245
00:08:31,520 --> 00:08:34,640
thankfully a standardizing cartesian so

246
00:08:34,640 --> 00:08:36,719
it falls like the hip region falls

247
00:08:36,719 --> 00:08:39,440
between these two addresses and second

248
00:08:39,440 --> 00:08:41,679
malloc returns different addresses to

249
00:08:41,679 --> 00:08:43,440
subsequent codes because we want to

250
00:08:43,440 --> 00:08:45,839
place a different object a different

251
00:08:45,839 --> 00:08:47,839
part in memory

252
00:08:47,839 --> 00:08:49,760
so that being said we take a pointer

253
00:08:49,760 --> 00:08:52,240
source and we dereference it so we get

254
00:08:52,240 --> 00:08:54,399
all the call side we get the argument at

255
00:08:54,399 --> 00:08:56,320
the call side and we call the pointer

256
00:08:56,320 --> 00:08:58,480
source like bunch of times

257
00:08:58,480 --> 00:09:00,800
and then we check for every address or

258
00:09:00,800 --> 00:09:03,440
like value that we uh that we find that

259
00:09:03,440 --> 00:09:06,240
we generated if first of all the address

260
00:09:06,240 --> 00:09:09,040
is inside the region and second if it's

261
00:09:09,040 --> 00:09:11,360
different from the previous addresses we

262
00:09:11,360 --> 00:09:13,920
just generated if the answer is yes so

263
00:09:13,920 --> 00:09:15,279
positive answers to both of the

264
00:09:15,279 --> 00:09:17,120
questions we call this a candidate

265
00:09:17,120 --> 00:09:18,080
malloc

266
00:09:18,080 --> 00:09:19,040
so

267
00:09:19,040 --> 00:09:21,120
new state from this state we go to

268
00:09:21,120 --> 00:09:22,959
having like define some like candidate

269
00:09:22,959 --> 00:09:26,000
malloc in memory in in the bob and now

270
00:09:26,000 --> 00:09:28,080
we want to find free

271
00:09:28,080 --> 00:09:29,920
how to do it so

272
00:09:29,920 --> 00:09:31,760
according to our research scope malloc

273
00:09:31,760 --> 00:09:33,680
and three they work in lifo

274
00:09:33,680 --> 00:09:35,360
so the working pair the last the

275
00:09:35,360 --> 00:09:37,040
allocated chunk at some point is going

276
00:09:37,040 --> 00:09:39,680
to be reallocated according to

277
00:09:39,680 --> 00:09:41,920
our scope so

278
00:09:41,920 --> 00:09:44,160
we use this intuition to first of all we

279
00:09:44,160 --> 00:09:46,399
select some like candidates statically

280
00:09:46,399 --> 00:09:48,240
by using some syntactical feature of the

281
00:09:48,240 --> 00:09:50,560
function and then we pair every

282
00:09:50,560 --> 00:09:52,399
candidate malloc with every candidate

283
00:09:52,399 --> 00:09:53,600
free

284
00:09:53,600 --> 00:09:55,680
then we do we call the current malloc

285
00:09:55,680 --> 00:09:58,240
like x amount of times and we generate

286
00:09:58,240 --> 00:09:59,920
some addresses

287
00:09:59,920 --> 00:10:02,160
and we register those addresses and

288
00:10:02,160 --> 00:10:04,240
finally we feed the calendar free over

289
00:10:04,240 --> 00:10:05,920
and over with all the addresses we just

290
00:10:05,920 --> 00:10:08,800
generated simulating uh the allocation

291
00:10:08,800 --> 00:10:11,360
of the chunk we just generated

292
00:10:11,360 --> 00:10:13,279
finally we call the candidate malloc

293
00:10:13,279 --> 00:10:16,320
again and if the generated address is

294
00:10:16,320 --> 00:10:18,720
equal to one of the others we observed

295
00:10:18,720 --> 00:10:20,079
before

296
00:10:20,079 --> 00:10:22,320
then we say that this is a valid pair

297
00:10:22,320 --> 00:10:24,000
and we call this the eat management

298
00:10:24,000 --> 00:10:26,640
library of the blob

299
00:10:26,640 --> 00:10:29,680
so you see we went from this situation

300
00:10:29,680 --> 00:10:32,880
where nothing was known like very like a

301
00:10:32,880 --> 00:10:35,519
jungle basically i like to say to a

302
00:10:35,519 --> 00:10:37,120
situation in which we found like the

303
00:10:37,120 --> 00:10:39,360
needles in the haystack and so we can

304
00:10:39,360 --> 00:10:41,519
point to malloc and free uh inside the

305
00:10:41,519 --> 00:10:43,120
binary

306
00:10:43,120 --> 00:10:47,120
so we evaluated our html identification

307
00:10:47,120 --> 00:10:49,600
pipeline against first of all a ground

308
00:10:49,600 --> 00:10:51,680
truth of 20 monolithic firmware images

309
00:10:51,680 --> 00:10:53,920
from previous work and when everything

310
00:10:53,920 --> 00:10:57,160
looks good we scale our analysis over

311
00:10:57,160 --> 00:10:59,600
799 monolithic firmware images that we

312
00:10:59,600 --> 00:11:02,720
call the wild data set coming from a

313
00:11:02,720 --> 00:11:04,800
very recent paper in the area

314
00:11:04,800 --> 00:11:07,519
and specifically i call it the wild data

315
00:11:07,519 --> 00:11:10,480
set because it is like extremely

316
00:11:10,480 --> 00:11:12,079
heterogeneous like there are like

317
00:11:12,079 --> 00:11:14,640
firmware coming from different kind of

318
00:11:14,640 --> 00:11:16,640
domains so wearable sensor medical

319
00:11:16,640 --> 00:11:18,959
devices it's very very diverse and we

320
00:11:18,959 --> 00:11:20,399
like it a lot because it's very

321
00:11:20,399 --> 00:11:21,680
interesting so it can give us some

322
00:11:21,680 --> 00:11:23,519
insight on the problem you're trying to

323
00:11:23,519 --> 00:11:25,839
solve

324
00:11:25,839 --> 00:11:29,120
so we identified for uh 340 of them with

325
00:11:29,120 --> 00:11:31,440
hipster uh they they were actually using

326
00:11:31,440 --> 00:11:34,399
a dynamic memorial locator and this is a

327
00:11:34,399 --> 00:11:36,560
very interesting like uh

328
00:11:36,560 --> 00:11:38,079
percentage because

329
00:11:38,079 --> 00:11:40,399
there is like a huge push pushbacks from

330
00:11:40,399 --> 00:11:42,720
the embedded developing community to not

331
00:11:42,720 --> 00:11:44,560
use this technology in the firmware so

332
00:11:44,560 --> 00:11:46,640
this is saying that nearly half of them

333
00:11:46,640 --> 00:11:50,240
are actually using one

334
00:11:50,240 --> 00:11:52,720
we found like around 10 different html

335
00:11:52,720 --> 00:11:55,839
families uh in 32 different variations

336
00:11:55,839 --> 00:11:57,760
and for family i mean

337
00:11:57,760 --> 00:11:59,279
let's say

338
00:11:59,279 --> 00:12:00,959
high level implementation of the of the

339
00:12:00,959 --> 00:12:03,839
allocator so a kind of a locator and

340
00:12:03,839 --> 00:12:06,079
variations i try to

341
00:12:06,079 --> 00:12:07,200
catch the

342
00:12:07,200 --> 00:12:09,040
all the options you can use when you

343
00:12:09,040 --> 00:12:12,000
compile it or customization or any other

344
00:12:12,000 --> 00:12:12,720
like

345
00:12:12,720 --> 00:12:15,040
variation indeed of the of a specific

346
00:12:15,040 --> 00:12:16,959
implementation

347
00:12:16,959 --> 00:12:19,519
when we run uh our html pipeline

348
00:12:19,519 --> 00:12:21,360
identification pipeline against the data

349
00:12:21,360 --> 00:12:25,120
set uh we got something like this so

350
00:12:25,120 --> 00:12:26,320
you can see that there are like some

351
00:12:26,320 --> 00:12:28,480
allocators like are being used a lot the

352
00:12:28,480 --> 00:12:30,639
pink and the green cluster and then

353
00:12:30,639 --> 00:12:32,560
there are some outliers and we check

354
00:12:32,560 --> 00:12:34,480
them manually and they are actually not

355
00:12:34,480 --> 00:12:37,120
similar to any uh allocator you observe

356
00:12:37,120 --> 00:12:38,800
in the others and these are kind of the

357
00:12:38,800 --> 00:12:40,560
inspiration for the title of the project

358
00:12:40,560 --> 00:12:42,560
which is hipster because these are like

359
00:12:42,560 --> 00:12:44,800
hipster implementation of the hip you

360
00:12:44,800 --> 00:12:46,639
got the joke

361
00:12:46,639 --> 00:12:48,880
um all right so now we identified a

362
00:12:48,880 --> 00:12:50,639
locator we can call malloc and free

363
00:12:50,639 --> 00:12:52,800
perform some like testing we want to do

364
00:12:52,800 --> 00:12:55,279
security testing

365
00:12:55,279 --> 00:12:57,760
we want to first of all divide between

366
00:12:57,760 --> 00:12:59,920
ep exploitation primitive and vulnerable

367
00:12:59,920 --> 00:13:02,560
state an ip exploitation primitive is

368
00:13:02,560 --> 00:13:04,560
for instance a nip overflow

369
00:13:04,560 --> 00:13:06,639
and i want to see this as like a bomb we

370
00:13:06,639 --> 00:13:08,959
can use to trigger explosion inside the

371
00:13:08,959 --> 00:13:11,519
uh ep library so so the state of the hip

372
00:13:11,519 --> 00:13:13,839
library and a vulnerable state is a

373
00:13:13,839 --> 00:13:15,360
corrupted state for example an

374
00:13:15,360 --> 00:13:17,839
overlapping chunk so chunks are like

375
00:13:17,839 --> 00:13:19,279
overlapping each other so you can

376
00:13:19,279 --> 00:13:21,920
corrupt data structure from different

377
00:13:21,920 --> 00:13:23,200
objects

378
00:13:23,200 --> 00:13:24,240
so

379
00:13:24,240 --> 00:13:25,680
the first thing we do we generate

380
00:13:25,680 --> 00:13:27,680
hundreds of different poc

381
00:13:27,680 --> 00:13:29,680
proof of concept or in other words proof

382
00:13:29,680 --> 00:13:31,839
of interaction of a program with the

383
00:13:31,839 --> 00:13:33,519
heap by

384
00:13:33,519 --> 00:13:35,360
creating a permutation of action so

385
00:13:35,360 --> 00:13:37,040
multi-free

386
00:13:37,040 --> 00:13:39,920
in a sort of like different order and we

387
00:13:39,920 --> 00:13:42,079
also inject those like bombs those

388
00:13:42,079 --> 00:13:43,920
exploitation primitive exploitation

389
00:13:43,920 --> 00:13:45,519
primitive to see if they're going to

390
00:13:45,519 --> 00:13:48,160
trigger an explosion later so we create

391
00:13:48,160 --> 00:13:50,560
the puck we compile it and we use our

392
00:13:50,560 --> 00:13:52,880
system to load first of all the poc

393
00:13:52,880 --> 00:13:55,279
inside inside the system and then we

394
00:13:55,279 --> 00:13:57,120
side loaded the firmware itself the

395
00:13:57,120 --> 00:13:59,519
monolithic firmware image and we hook

396
00:13:59,519 --> 00:14:01,519
the calls from malloc and free to be

397
00:14:01,519 --> 00:14:04,160
redirected inside the firmware itself so

398
00:14:04,160 --> 00:14:06,800
when we symbolically execute the poc

399
00:14:06,800 --> 00:14:08,399
we are going to redirect the execution

400
00:14:08,399 --> 00:14:09,839
inside the

401
00:14:09,839 --> 00:14:11,680
the firmware itself so

402
00:14:11,680 --> 00:14:14,399
advancing the state of the heap

403
00:14:14,399 --> 00:14:16,240
and hopefully at some point observing

404
00:14:16,240 --> 00:14:18,320
explosions so some bombs are actually

405
00:14:18,320 --> 00:14:20,160
triggering any corrupted state in the

406
00:14:20,160 --> 00:14:22,800
hips itself

407
00:14:22,800 --> 00:14:26,079
so we selected 32 unique hml

408
00:14:26,079 --> 00:14:28,880
representative from the clusters we

409
00:14:28,880 --> 00:14:31,360
identified before and we tested them and

410
00:14:31,360 --> 00:14:33,920
we discovered that all the tested html

411
00:14:33,920 --> 00:14:35,680
were vulnerable to at least one

412
00:14:35,680 --> 00:14:38,079
exploitation ep exploitation primitive

413
00:14:38,079 --> 00:14:39,680
so from this graph for example you can

414
00:14:39,680 --> 00:14:41,360
see that we were able to trigger an

415
00:14:41,360 --> 00:14:43,360
overlapping chunk when using a nip

416
00:14:43,360 --> 00:14:46,079
overflow 100 of the time so over all the

417
00:14:46,079 --> 00:14:48,480
html we identified in the in our data

418
00:14:48,480 --> 00:14:50,720
set another interesting observation is

419
00:14:50,720 --> 00:14:53,199
double free was uh helpful only to

420
00:14:53,199 --> 00:14:55,600
trigger apparently an overlapping chunk

421
00:14:55,600 --> 00:14:58,880
for less than 75 percent of the blob

422
00:14:58,880 --> 00:15:01,120
but was not helpful to trigger any other

423
00:15:01,120 --> 00:15:02,959
like corrupted state

424
00:15:02,959 --> 00:15:05,600
so yeah anyway take away point all the

425
00:15:05,600 --> 00:15:07,920
tested html were vulnerable indeed to at

426
00:15:07,920 --> 00:15:10,880
least one exploitation permitted

427
00:15:10,880 --> 00:15:13,279
so now you can uh tell me all right

428
00:15:13,279 --> 00:15:15,519
fabio but what you did you just tested

429
00:15:15,519 --> 00:15:17,920
like all these html inside an emulator

430
00:15:17,920 --> 00:15:20,480
so does this translate to like the real

431
00:15:20,480 --> 00:15:22,399
world so like on a real board we

432
00:15:22,399 --> 00:15:24,160
actually did a further step and we

433
00:15:24,160 --> 00:15:25,839
developed like an application that uses

434
00:15:25,839 --> 00:15:27,120
malloc and free

435
00:15:27,120 --> 00:15:30,240
this is like an stm32 board and there

436
00:15:30,240 --> 00:15:31,600
was a very simple application to

437
00:15:31,600 --> 00:15:33,360
implement some like sort of manipulation

438
00:15:33,360 --> 00:15:34,240
of

439
00:15:34,240 --> 00:15:37,920
frame coming from the network and the

440
00:15:37,920 --> 00:15:40,240
the embed suit the the compiler online

441
00:15:40,240 --> 00:15:43,519
we used to um to create this application

442
00:15:43,519 --> 00:15:45,360
included like an unknown html that we

443
00:15:45,360 --> 00:15:48,160
were not in control of and what happened

444
00:15:48,160 --> 00:15:51,279
is we run ipster over over this html

445
00:15:51,279 --> 00:15:53,360
over this binary we identified the

446
00:15:53,360 --> 00:15:56,240
malloc and free and we were able to

447
00:15:56,240 --> 00:15:58,399
identify possible attacks so given some

448
00:15:58,399 --> 00:16:00,320
exploitation primitive we were able to

449
00:16:00,320 --> 00:16:03,360
trigger uh some vulnerable state

450
00:16:03,360 --> 00:16:06,160
so we confirmed this on the board and by

451
00:16:06,160 --> 00:16:07,519
looking at the log of the board we were

452
00:16:07,519 --> 00:16:09,360
able to see that uh

453
00:16:09,360 --> 00:16:11,120
chunks were allocated like out of the

454
00:16:11,120 --> 00:16:14,320
heap or overlapping each other

455
00:16:14,320 --> 00:16:15,759
all right let me go through some

456
00:16:15,759 --> 00:16:18,399
conclusions uh if i want to to take away

457
00:16:18,399 --> 00:16:20,639
some like some points from this talk the

458
00:16:20,639 --> 00:16:21,920
three main things i want you to take

459
00:16:21,920 --> 00:16:24,480
home are first of all dynamic allocators

460
00:16:24,480 --> 00:16:26,240
are often using monolithic firmware

461
00:16:26,240 --> 00:16:28,959
images um contrary to what like the

462
00:16:28,959 --> 00:16:30,560
embedded developer community thinks

463
00:16:30,560 --> 00:16:32,560
sometimes

464
00:16:32,560 --> 00:16:34,000
they are like different and unique

465
00:16:34,000 --> 00:16:36,480
implementation in different variants uh

466
00:16:36,480 --> 00:16:38,480
sometimes even like very exotic

467
00:16:38,480 --> 00:16:40,959
implementation of the allocator

468
00:16:40,959 --> 00:16:43,680
and every tested html like as of now

469
00:16:43,680 --> 00:16:45,600
we're like vulnerable to at least one

470
00:16:45,600 --> 00:16:46,800
exploitation

471
00:16:46,800 --> 00:16:48,320
exploitation technique so we're able to

472
00:16:48,320 --> 00:16:51,440
trigger like a vulnerable state

473
00:16:51,440 --> 00:16:53,360
all right everything is open source you

474
00:16:53,360 --> 00:16:55,600
can play like with the framework in our

475
00:16:55,600 --> 00:16:57,519
github and these are like some links to

476
00:16:57,519 --> 00:16:59,120
contact me if you have any question or

477
00:16:59,120 --> 00:17:00,959
like further discussion i'm always very

478
00:17:00,959 --> 00:17:03,759
happy to chat about it and yeah that was

479
00:17:03,759 --> 00:17:06,050
my time thank you for yours

480
00:17:06,050 --> 00:17:11,139
[Applause]

481
00:17:13,119 --> 00:17:15,359
so thank you fabio we're a bit behind

482
00:17:15,359 --> 00:17:17,359
schedule so if you have a very pressing

483
00:17:17,359 --> 00:17:19,520
question please go ahead and ask but i

484
00:17:19,520 --> 00:17:22,639
think we have only time for one

485
00:17:23,119 --> 00:17:25,280
hi a very cool talk um just a quick

486
00:17:25,280 --> 00:17:27,119
question you mentioned you had this lifo

487
00:17:27,119 --> 00:17:29,120
constraint on identifying the free

488
00:17:29,120 --> 00:17:30,080
function

489
00:17:30,080 --> 00:17:32,000
does that bias you somehow towards

490
00:17:32,000 --> 00:17:33,440
particular allocators that are maybe

491
00:17:33,440 --> 00:17:34,960
more vulnerable so something like an

492
00:17:34,960 --> 00:17:36,559
allocator that has a current team is not

493
00:17:36,559 --> 00:17:38,320
identified by your approach

494
00:17:38,320 --> 00:17:40,080
um so you're asking me if the

495
00:17:40,080 --> 00:17:41,919
identification of freeze biasing me to

496
00:17:41,919 --> 00:17:44,320
what identifies the entire html

497
00:17:44,320 --> 00:17:45,200
so

498
00:17:45,200 --> 00:17:46,799
i will say

499
00:17:46,799 --> 00:17:49,440
no because or rather that it biases you

500
00:17:49,440 --> 00:17:52,400
to a particular allocator uh yeah so i

501
00:17:52,400 --> 00:17:55,039
would say no because what we observe is

502
00:17:55,039 --> 00:17:57,760
that um this behavior like this lethal

503
00:17:57,760 --> 00:18:00,640
behavior it's like uh

504
00:18:00,640 --> 00:18:03,039
strictly like of so if you when you find

505
00:18:03,039 --> 00:18:05,919
you a pair like to like milo can free it

506
00:18:05,919 --> 00:18:08,240
it's always like the correct one uh but

507
00:18:08,240 --> 00:18:10,160
now and i okay now i like i really

508
00:18:10,160 --> 00:18:12,640
laboratories question actually uh

509
00:18:12,640 --> 00:18:14,799
probably the answer is also yes because

510
00:18:14,799 --> 00:18:17,200
like because of the research scope right

511
00:18:17,200 --> 00:18:18,960
so if i'm looking for this specific

512
00:18:18,960 --> 00:18:21,039
allocator so yeah the answer is

513
00:18:21,039 --> 00:18:23,600
ultimately yes okay so maybe

514
00:18:23,600 --> 00:18:25,120
yes

515
00:18:25,120 --> 00:18:29,639
all right thank you thank you so much

