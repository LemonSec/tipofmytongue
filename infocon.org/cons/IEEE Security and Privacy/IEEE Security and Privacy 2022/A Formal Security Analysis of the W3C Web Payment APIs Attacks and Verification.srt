1
00:00:01,680 --> 00:00:04,160
yeah thank you very much um yeah welcome

2
00:00:04,160 --> 00:00:06,960
to my talk on our analysis of the w3c

3
00:00:06,960 --> 00:00:09,679
web payment apis uh my name is guido

4
00:00:09,679 --> 00:00:11,120
schmitz and this is joint work with

5
00:00:11,120 --> 00:00:13,679
crocodile pedram hosseini ralph christas

6
00:00:13,679 --> 00:00:16,720
neil swensler and tim victor so if we

7
00:00:16,720 --> 00:00:18,560
look at the current state of online

8
00:00:18,560 --> 00:00:20,800
shopping in particular the checkout and

9
00:00:20,800 --> 00:00:23,439
payment process frankly speaking this is

10
00:00:23,439 --> 00:00:25,760
a bit of a mess users are confronted

11
00:00:25,760 --> 00:00:27,519
with various different forms every

12
00:00:27,519 --> 00:00:28,960
merchant just thinks slightly

13
00:00:28,960 --> 00:00:31,359
differently and in the end users type in

14
00:00:31,359 --> 00:00:34,000
their payment data in some random form

15
00:00:34,000 --> 00:00:37,440
which they might have never seen before

16
00:00:37,440 --> 00:00:39,920
um this is where web payment uh or the

17
00:00:39,920 --> 00:00:42,239
web payment apis come into play so this

18
00:00:42,239 --> 00:00:45,200
is a new effort with the goal to provide

19
00:00:45,200 --> 00:00:47,520
a standardized faster more convenient

20
00:00:47,520 --> 00:00:49,760
online checkout process with improved

21
00:00:49,760 --> 00:00:51,600
security and privacy

22
00:00:51,600 --> 00:00:53,840
and the general idea is that the browser

23
00:00:53,840 --> 00:00:56,879
gets a new core native feature that acts

24
00:00:56,879 --> 00:00:59,600
as a broker between merchants payment

25
00:00:59,600 --> 00:01:02,480
providers and users and users

26
00:01:02,480 --> 00:01:04,239
perform the checkout process in a

27
00:01:04,239 --> 00:01:07,040
standardized trusted user interface that

28
00:01:07,040 --> 00:01:09,600
is all rendered outside of the context

29
00:01:09,600 --> 00:01:12,400
of the merchant's website

30
00:01:12,400 --> 00:01:14,240
so in this talk i will first give you an

31
00:01:14,240 --> 00:01:16,720
overview on the protocol behind this new

32
00:01:16,720 --> 00:01:20,000
web payment standard then i will

33
00:01:20,000 --> 00:01:23,119
give you a brief introduction in the

34
00:01:23,119 --> 00:01:25,200
method that we use to analyze such

35
00:01:25,200 --> 00:01:27,119
standards that's the web infrastructure

36
00:01:27,119 --> 00:01:29,200
model or wim for short and then i will

37
00:01:29,200 --> 00:01:32,640
give you an overview of our analysis and

38
00:01:32,640 --> 00:01:34,159
our results

39
00:01:34,159 --> 00:01:36,640
so let's start with the web payment apis

40
00:01:36,640 --> 00:01:39,920
so actually the payment apis is a set of

41
00:01:39,920 --> 00:01:42,799
various specification documents they

42
00:01:42,799 --> 00:01:45,280
they specify for example an api for the

43
00:01:45,280 --> 00:01:48,240
merchant an api for payment processors

44
00:01:48,240 --> 00:01:50,479
and various other

45
00:01:50,479 --> 00:01:53,439
spector comm documents cover the various

46
00:01:53,439 --> 00:01:55,439
metadata formats that are used in the

47
00:01:55,439 --> 00:01:56,320
payment

48
00:01:56,320 --> 00:01:57,360
process

49
00:01:57,360 --> 00:01:59,360
this is already implemented by all major

50
00:01:59,360 --> 00:02:00,479
browsers

51
00:02:00,479 --> 00:02:03,439
and supported by many payment providers

52
00:02:03,439 --> 00:02:05,600
most notably the big tech companies for

53
00:02:05,600 --> 00:02:08,560
example google pay or apple pay

54
00:02:08,560 --> 00:02:10,639
so how does this process work so here we

55
00:02:10,639 --> 00:02:11,599
have the

56
00:02:11,599 --> 00:02:14,000
user's browser in the browser we have

57
00:02:14,000 --> 00:02:16,239
the website of the merchant

58
00:02:16,239 --> 00:02:18,720
then we have this new payment component

59
00:02:18,720 --> 00:02:20,959
in the browser which also provides this

60
00:02:20,959 --> 00:02:22,959
trusted user interface

61
00:02:22,959 --> 00:02:24,560
and in the background

62
00:02:24,560 --> 00:02:26,959
of the browser we have service workers

63
00:02:26,959 --> 00:02:28,239
so service workers is nothing

64
00:02:28,239 --> 00:02:30,239
specifically for web payment it's a

65
00:02:30,239 --> 00:02:32,959
general feature of the web you can think

66
00:02:32,959 --> 00:02:34,319
of like

67
00:02:34,319 --> 00:02:36,959
javascript applications that run in the

68
00:02:36,959 --> 00:02:39,440
background of your browser and they are

69
00:02:39,440 --> 00:02:41,440
installed by websites so website can

70
00:02:41,440 --> 00:02:42,560
install

71
00:02:42,560 --> 00:02:45,040
a service worker and this then continues

72
00:02:45,040 --> 00:02:46,959
running in the background and in the

73
00:02:46,959 --> 00:02:49,680
context of web payments we have a

74
00:02:49,680 --> 00:02:51,920
special kind of service workers these

75
00:02:51,920 --> 00:02:53,760
are the payment handlers which are

76
00:02:53,760 --> 00:02:56,000
installed by the payment providers for

77
00:02:56,000 --> 00:02:58,959
example google pay

78
00:02:59,680 --> 00:03:00,480
so

79
00:03:00,480 --> 00:03:02,800
how does the protocol behind that

80
00:03:02,800 --> 00:03:04,400
look like

81
00:03:04,400 --> 00:03:06,239
we start with the user on the merchant's

82
00:03:06,239 --> 00:03:08,159
website the user has filled her shopping

83
00:03:08,159 --> 00:03:10,959
cart and starts the checkout process now

84
00:03:10,959 --> 00:03:12,959
the merchant creates a so-called payment

85
00:03:12,959 --> 00:03:16,000
request that is a document that contains

86
00:03:16,000 --> 00:03:17,840
all the information about the checkout

87
00:03:17,840 --> 00:03:19,840
the shopping cart contents shipping

88
00:03:19,840 --> 00:03:22,480
methods available and also the payment

89
00:03:22,480 --> 00:03:24,159
methods that are accepted by the

90
00:03:24,159 --> 00:03:25,519
merchant

91
00:03:25,519 --> 00:03:27,519
the merchant now hands over control to

92
00:03:27,519 --> 00:03:31,280
the new browser component the browser

93
00:03:31,280 --> 00:03:33,200
checks with all the installed payment

94
00:03:33,200 --> 00:03:35,680
handlers which ones are available to

95
00:03:35,680 --> 00:03:37,840
provide the accepted payment methods by

96
00:03:37,840 --> 00:03:39,280
the merchant

97
00:03:39,280 --> 00:03:41,280
and then the user is presented with that

98
00:03:41,280 --> 00:03:43,519
trusted user interface where the user

99
00:03:43,519 --> 00:03:45,920
can enter details like shipping address

100
00:03:45,920 --> 00:03:48,159
or select a payment method and then

101
00:03:48,159 --> 00:03:50,319
later on also performs the actual

102
00:03:50,319 --> 00:03:52,159
payment

103
00:03:52,159 --> 00:03:54,560
so now let's assume the user has filled

104
00:03:54,560 --> 00:03:56,560
out that form or the browser can also

105
00:03:56,560 --> 00:03:58,239
pre-populate that based on the user

106
00:03:58,239 --> 00:04:00,480
preferences the user clicks on the pay

107
00:04:00,480 --> 00:04:02,720
button and now control is handed over to

108
00:04:02,720 --> 00:04:05,920
the selected payment handler now the

109
00:04:05,920 --> 00:04:08,959
payment handler processes this payment

110
00:04:08,959 --> 00:04:11,280
probably it will also connect back to

111
00:04:11,280 --> 00:04:13,439
the back end of the payment provider so

112
00:04:13,439 --> 00:04:14,400
this part

113
00:04:14,400 --> 00:04:16,880
is proprietary to the respective payment

114
00:04:16,880 --> 00:04:19,279
providers the payment handler can also

115
00:04:19,279 --> 00:04:21,759
display certain dialogues to the user

116
00:04:21,759 --> 00:04:23,199
for authentication or further

117
00:04:23,199 --> 00:04:25,759
verification of the payment and once the

118
00:04:25,759 --> 00:04:28,000
payment has been performed control is

119
00:04:28,000 --> 00:04:31,199
handed back to the browser component

120
00:04:31,199 --> 00:04:33,280
along with some other data like for

121
00:04:33,280 --> 00:04:36,080
example a proof of payment or other data

122
00:04:36,080 --> 00:04:38,080
but that's up to the payment provider to

123
00:04:38,080 --> 00:04:40,080
specify

124
00:04:40,080 --> 00:04:41,520
now the browser combines that

125
00:04:41,520 --> 00:04:43,520
information with the data that the user

126
00:04:43,520 --> 00:04:45,040
entered previously like the shipping

127
00:04:45,040 --> 00:04:47,040
address and hands that back to the

128
00:04:47,040 --> 00:04:48,880
merchant

129
00:04:48,880 --> 00:04:51,120
and the merchant can now verify that

130
00:04:51,120 --> 00:04:54,000
information and complete the process by

131
00:04:54,000 --> 00:04:56,160
telling the browser component that the

132
00:04:56,160 --> 00:04:58,400
merchant is happy the browser displays a

133
00:04:58,400 --> 00:05:00,720
success message to the user and we are

134
00:05:00,720 --> 00:05:02,720
done

135
00:05:02,720 --> 00:05:05,680
okay so how do we analyze this

136
00:05:05,680 --> 00:05:08,560
so our our approach to analyze such web

137
00:05:08,560 --> 00:05:10,320
standards is the web infrastructure

138
00:05:10,320 --> 00:05:12,160
model or vim for short which we first

139
00:05:12,160 --> 00:05:14,400
presented here at security and privacy

140
00:05:14,400 --> 00:05:18,320
in 2014 and we improved dmim and also in

141
00:05:18,320 --> 00:05:20,479
the subsequent publications

142
00:05:20,479 --> 00:05:22,639
so what is the rim the rim is a detailed

143
00:05:22,639 --> 00:05:24,560
comprehensive and precise formal model

144
00:05:24,560 --> 00:05:26,800
of the web infrastructure and in fact

145
00:05:26,800 --> 00:05:29,039
it's the most comprehensive model of the

146
00:05:29,039 --> 00:05:31,600
web infrastructure to date it summarizes

147
00:05:31,600 --> 00:05:33,919
and condenses relevant standards and as

148
00:05:33,919 --> 00:05:35,919
such serves as a solid basis for

149
00:05:35,919 --> 00:05:38,000
security and privacy analysis of web

150
00:05:38,000 --> 00:05:39,840
standards and applications and

151
00:05:39,840 --> 00:05:41,440
furthermore it can also serve as a

152
00:05:41,440 --> 00:05:43,520
reference model for developers

153
00:05:43,520 --> 00:05:46,639
researchers and also for teaching

154
00:05:46,639 --> 00:05:49,360
so let's look at a high level picture on

155
00:05:49,360 --> 00:05:52,320
how the how analysis with even work so

156
00:05:52,320 --> 00:05:54,240
we have a foundation which is the formal

157
00:05:54,240 --> 00:05:56,240
description of the web that contains

158
00:05:56,240 --> 00:05:58,319
definitions for example for browsers but

159
00:05:58,319 --> 00:06:01,039
also for communication like http

160
00:06:01,039 --> 00:06:02,479
and on top of that we built an

161
00:06:02,479 --> 00:06:04,560
application specific model

162
00:06:04,560 --> 00:06:06,800
reflecting the aspects of the

163
00:06:06,800 --> 00:06:09,199
application that we want to analyze

164
00:06:09,199 --> 00:06:11,840
or in the case of standards generic

165
00:06:11,840 --> 00:06:13,880
implementations that exercise

166
00:06:13,880 --> 00:06:16,479
non-deterministically the whole feature

167
00:06:16,479 --> 00:06:18,560
so these two layers then form the

168
00:06:18,560 --> 00:06:22,000
complete model and using this formal

169
00:06:22,000 --> 00:06:23,759
model and the formal language that we

170
00:06:23,759 --> 00:06:25,440
establish with that we can then

171
00:06:25,440 --> 00:06:28,560
precisely specify security properties

172
00:06:28,560 --> 00:06:31,199
and of course we then can carry out a

173
00:06:31,199 --> 00:06:33,440
proof

174
00:06:33,440 --> 00:06:35,360
to check if these security properties

175
00:06:35,360 --> 00:06:36,639
actually hold

176
00:06:36,639 --> 00:06:39,199
and if that proof holds true then we

177
00:06:39,199 --> 00:06:40,960
know that for all attackers captured by

178
00:06:40,960 --> 00:06:43,120
this model the security property is

179
00:06:43,120 --> 00:06:45,199
always satisfied and this is quite a

180
00:06:45,199 --> 00:06:47,440
strong result because we by this we can

181
00:06:47,440 --> 00:06:50,479
even exclude unknown classes of attacks

182
00:06:50,479 --> 00:06:52,639
of course the proof can also fail

183
00:06:52,639 --> 00:06:54,479
in this case we can analyze why did the

184
00:06:54,479 --> 00:06:57,199
proof fail and use that insight to

185
00:06:57,199 --> 00:06:59,680
derive attacks but more importantly we

186
00:06:59,680 --> 00:07:01,919
can also use that knowledge to develop

187
00:07:01,919 --> 00:07:03,280
fixes

188
00:07:03,280 --> 00:07:05,199
we can then reflect these fixes into the

189
00:07:05,199 --> 00:07:07,039
model and then essentially rinse and

190
00:07:07,039 --> 00:07:10,160
repeat this pro and repeat that process

191
00:07:10,160 --> 00:07:13,599
until our proof finally goes through

192
00:07:13,599 --> 00:07:15,759
so let's take a closer look at the

193
00:07:15,759 --> 00:07:18,160
foundation the

194
00:07:18,160 --> 00:07:20,800
of the vim itself so what is defined

195
00:07:20,800 --> 00:07:23,520
there we have a network and we have an

196
00:07:23,520 --> 00:07:26,000
unbounded number of processes like for

197
00:07:26,000 --> 00:07:28,160
example browsers web servers or dns

198
00:07:28,160 --> 00:07:30,400
servers and they can interact with each

199
00:07:30,400 --> 00:07:32,479
other by exchanging messages over this

200
00:07:32,479 --> 00:07:34,000
network

201
00:07:34,000 --> 00:07:36,080
we can also have web attackers they

202
00:07:36,080 --> 00:07:38,080
participate in the network as any other

203
00:07:38,080 --> 00:07:40,319
process but we also can have a network

204
00:07:40,319 --> 00:07:42,720
attacker who controls the whole network

205
00:07:42,720 --> 00:07:44,960
and can plug into intercept and spoof

206
00:07:44,960 --> 00:07:48,000
messages as it likes

207
00:07:48,000 --> 00:07:49,520
and this is a

208
00:07:49,520 --> 00:07:51,520
this is a dollar for our style model

209
00:07:51,520 --> 00:07:53,680
that means that the messages are terms

210
00:07:53,680 --> 00:07:56,000
so we our reasoning is

211
00:07:56,000 --> 00:07:58,479
based on symbolic derivability that

212
00:07:58,479 --> 00:08:00,639
essentially means we consider the crypto

213
00:08:00,639 --> 00:08:02,960
primitives to be perfect and focus on

214
00:08:02,960 --> 00:08:06,000
the actual interactions between the uh

215
00:08:06,000 --> 00:08:08,080
different components

216
00:08:08,080 --> 00:08:10,240
but the bim is not just yet another

217
00:08:10,240 --> 00:08:12,720
standard to the vyo model but the

218
00:08:12,720 --> 00:08:14,560
distinctive feature is that it covers

219
00:08:14,560 --> 00:08:16,400
web features and is close to web

220
00:08:16,400 --> 00:08:18,000
standards

221
00:08:18,000 --> 00:08:19,840
so to give you a

222
00:08:19,840 --> 00:08:22,800
little taste of the level of detail

223
00:08:22,800 --> 00:08:24,879
that the rim covers let's have a look

224
00:08:24,879 --> 00:08:27,440
what our browser model includes so our

225
00:08:27,440 --> 00:08:29,599
browser model includes precise handling

226
00:08:29,599 --> 00:08:32,880
of dns http and https messages we have a

227
00:08:32,880 --> 00:08:36,240
detailed window in document structure

228
00:08:36,240 --> 00:08:38,159
we inside each document we can have

229
00:08:38,159 --> 00:08:40,320
scripts scripts can either be honest in

230
00:08:40,320 --> 00:08:41,839
that case they model application

231
00:08:41,839 --> 00:08:44,720
specific behavior or they are malicious

232
00:08:44,720 --> 00:08:46,560
in that case they non-deterministically

233
00:08:46,560 --> 00:08:48,320
take any action they could possibly

234
00:08:48,320 --> 00:08:49,920
perform

235
00:08:49,920 --> 00:08:51,839
we also have features like web storage

236
00:08:51,839 --> 00:08:54,000
and cookies cross cross-window browser

237
00:08:54,000 --> 00:08:57,120
messaging and xml http requests and also

238
00:08:57,120 --> 00:08:58,720
many other features like handling of

239
00:08:58,720 --> 00:09:01,040
various message handlers redirections

240
00:09:01,040 --> 00:09:03,200
and so on

241
00:09:03,200 --> 00:09:06,800
so how do we use the vim now to analyze

242
00:09:06,800 --> 00:09:09,440
the web payment apis

243
00:09:09,440 --> 00:09:13,600
so first of all we need to include the

244
00:09:13,600 --> 00:09:15,680
the features that are used in web

245
00:09:15,680 --> 00:09:16,959
payment

246
00:09:16,959 --> 00:09:18,800
in our generic model so we have to

247
00:09:18,800 --> 00:09:21,600
extend the this part of the wim most

248
00:09:21,600 --> 00:09:24,560
notably the browser so we

249
00:09:24,560 --> 00:09:26,720
include a new feature to facilitate

250
00:09:26,720 --> 00:09:28,959
service workers and also browser

251
00:09:28,959 --> 00:09:30,800
internal events to communicate with

252
00:09:30,800 --> 00:09:33,519
these service workers so these

253
00:09:33,519 --> 00:09:35,440
these two contributions are also of

254
00:09:35,440 --> 00:09:37,440
independent interest because they are

255
00:09:37,440 --> 00:09:39,760
not specific to web payment

256
00:09:39,760 --> 00:09:42,080
and of course we include the web payment

257
00:09:42,080 --> 00:09:45,440
apis themselves in our browser model

258
00:09:45,440 --> 00:09:47,680
our application specific model contains

259
00:09:47,680 --> 00:09:49,680
generic merchants and generic payment

260
00:09:49,680 --> 00:09:51,760
providers that non-deterministically

261
00:09:51,760 --> 00:09:55,760
exercised their payment apis

262
00:09:55,760 --> 00:09:57,920
for the as security properties we

263
00:09:57,920 --> 00:10:00,880
identified two integrity properties one

264
00:10:00,880 --> 00:10:03,120
is that the payment always

265
00:10:03,120 --> 00:10:04,560
our payment that is performed by a

266
00:10:04,560 --> 00:10:06,240
payment processor always has to

267
00:10:06,240 --> 00:10:08,800
correspond to the user's intent namely

268
00:10:08,800 --> 00:10:11,600
to pay amount x to merchant why

269
00:10:11,600 --> 00:10:13,519
and the other one is uniqueness of

270
00:10:13,519 --> 00:10:14,959
payments

271
00:10:14,959 --> 00:10:17,040
uh roughly speaking that the payment

272
00:10:17,040 --> 00:10:19,279
should never be executed twice

273
00:10:19,279 --> 00:10:21,120
you might have guessed that by now our

274
00:10:21,120 --> 00:10:23,200
proofs didn't went through because we

275
00:10:23,200 --> 00:10:24,720
identified

276
00:10:24,720 --> 00:10:26,959
several flaws in these specifications

277
00:10:26,959 --> 00:10:28,000
and

278
00:10:28,000 --> 00:10:29,200
discovered

279
00:10:29,200 --> 00:10:32,320
two severe new attacks one is the double

280
00:10:32,320 --> 00:10:34,800
charge with retry attack that allows the

281
00:10:34,800 --> 00:10:36,959
malicious merchant to essentially

282
00:10:36,959 --> 00:10:39,519
execute a payment more than once

283
00:10:39,519 --> 00:10:41,680
so that obviously breaks uniqueness of

284
00:10:41,680 --> 00:10:43,760
payments and the other one is based on

285
00:10:43,760 --> 00:10:45,440
ambiguous payment method data that

286
00:10:45,440 --> 00:10:47,760
allows a malicious merchant to

287
00:10:47,760 --> 00:10:50,480
add hidden fees which are not displayed

288
00:10:50,480 --> 00:10:52,640
to the user during the payment process

289
00:10:52,640 --> 00:10:55,440
but later included in the actual payment

290
00:10:55,440 --> 00:10:57,279
themselves

291
00:10:57,279 --> 00:10:58,880
so to give you

292
00:10:58,880 --> 00:11:01,440
a small impression on how these tags

293
00:11:01,440 --> 00:11:03,360
look like let's take a closer look at

294
00:11:03,360 --> 00:11:05,760
the double charge attack

295
00:11:05,760 --> 00:11:08,079
so this figure you have already seen

296
00:11:08,079 --> 00:11:09,839
previously that's the standard web

297
00:11:09,839 --> 00:11:12,160
payment flow the main difference here is

298
00:11:12,160 --> 00:11:14,560
we now have a malicious merchant and we

299
00:11:14,560 --> 00:11:16,720
assume that we have at least two payment

300
00:11:16,720 --> 00:11:19,440
handlers installed in the browser

301
00:11:19,440 --> 00:11:21,760
so the user starts the checkout process

302
00:11:21,760 --> 00:11:24,079
as usual and at some point selects a

303
00:11:24,079 --> 00:11:26,079
payment method that leads to

304
00:11:26,079 --> 00:11:28,079
payment the selection of payment handler

305
00:11:28,079 --> 00:11:29,519
a

306
00:11:29,519 --> 00:11:32,240
and then the whole flow continues as

307
00:11:32,240 --> 00:11:34,399
usual the user confirms the payment the

308
00:11:34,399 --> 00:11:36,880
payment processor processes the payment

309
00:11:36,880 --> 00:11:39,200
and then it runs through until the very

310
00:11:39,200 --> 00:11:42,560
last step and here the merchant tells

311
00:11:42,560 --> 00:11:45,040
the browser no i'm not happy with that

312
00:11:45,040 --> 00:11:46,800
there might be an error so there is a

313
00:11:46,800 --> 00:11:49,839
retry mechanism built in the web payment

314
00:11:49,839 --> 00:11:51,519
method that allows the merchant to

315
00:11:51,519 --> 00:11:54,160
trigger or raise an error at this stage

316
00:11:54,160 --> 00:11:56,320
and the merchant can freely specify an

317
00:11:56,320 --> 00:11:58,399
error message that is

318
00:11:58,399 --> 00:12:00,720
displayed within the trusted user

319
00:12:00,720 --> 00:12:03,040
interface so the user is still in that

320
00:12:03,040 --> 00:12:05,360
trusted user interface in that payment

321
00:12:05,360 --> 00:12:08,160
context and gets displayed

322
00:12:08,160 --> 00:12:10,480
error message that is essentially set by

323
00:12:10,480 --> 00:12:12,079
the merchant and the merchant in this

324
00:12:12,079 --> 00:12:14,880
case would set an error message like

325
00:12:14,880 --> 00:12:16,800
there's an error please use a different

326
00:12:16,800 --> 00:12:19,519
payment method and try again

327
00:12:19,519 --> 00:12:21,519
so while the user is still within that

328
00:12:21,519 --> 00:12:24,560
context the user might easily believe

329
00:12:24,560 --> 00:12:27,120
that this message is true

330
00:12:27,120 --> 00:12:30,320
and might select another payment method

331
00:12:30,320 --> 00:12:32,800
that leads to another payment handler b

332
00:12:32,800 --> 00:12:35,519
and now the payment gets processed again

333
00:12:35,519 --> 00:12:39,279
and the user pays again for the same

334
00:12:39,279 --> 00:12:41,440
in the same checkout process so that

335
00:12:41,440 --> 00:12:42,639
obviously

336
00:12:42,639 --> 00:12:44,720
breaks uniqueness of payments

337
00:12:44,720 --> 00:12:48,639
so we reported these findings to the w3c

338
00:12:48,639 --> 00:12:50,560
working group they confirmed these

339
00:12:50,560 --> 00:12:53,360
attacks and also we proposed fixes to

340
00:12:53,360 --> 00:12:54,560
them

341
00:12:54,560 --> 00:12:57,200
and they opted for one fix that we

342
00:12:57,200 --> 00:12:58,480
proposed

343
00:12:58,480 --> 00:13:00,160
that is quite straightforward and

344
00:13:00,160 --> 00:13:02,000
doesn't change the protocol at all so

345
00:13:02,000 --> 00:13:05,120
essentially we say when such a retry

346
00:13:05,120 --> 00:13:07,839
when we run in such a retry

347
00:13:07,839 --> 00:13:10,959
flow then a change of the payment method

348
00:13:10,959 --> 00:13:13,120
is not allowed anymore and when the user

349
00:13:13,120 --> 00:13:14,959
tries to change the payment method at

350
00:13:14,959 --> 00:13:18,160
this stage she gets displayed a certain

351
00:13:18,160 --> 00:13:20,160
error message by the browser that this

352
00:13:20,160 --> 00:13:21,920
is not allowed and he should check

353
00:13:21,920 --> 00:13:23,600
whether some other payment has gone

354
00:13:23,600 --> 00:13:25,839
through

355
00:13:26,079 --> 00:13:28,160
so as i mentioned we reported these

356
00:13:28,160 --> 00:13:30,959
findings to the w3c they confirmed the

357
00:13:30,959 --> 00:13:33,440
findings they adopted the fixes that we

358
00:13:33,440 --> 00:13:34,800
proposed

359
00:13:34,800 --> 00:13:36,800
and these fixes

360
00:13:36,800 --> 00:13:39,600
we then reflected back in our model

361
00:13:39,600 --> 00:13:42,079
and run the proof again and this time

362
00:13:42,079 --> 00:13:44,800
the proof went through so actually the

363
00:13:44,800 --> 00:13:47,440
integrity of payments properties hold

364
00:13:47,440 --> 00:13:50,320
true for the fixed model

365
00:13:50,320 --> 00:13:51,199
okay

366
00:13:51,199 --> 00:13:53,680
so to conclude

367
00:13:53,680 --> 00:13:55,600
we performed the first in-depth and

368
00:13:55,600 --> 00:13:58,160
first formal analysis of the w3c web

369
00:13:58,160 --> 00:13:59,839
payment apis

370
00:13:59,839 --> 00:14:02,480
for this we use the web infrastructure

371
00:14:02,480 --> 00:14:04,800
model which we had to extend

372
00:14:04,800 --> 00:14:07,279
significantly and in particular we added

373
00:14:07,279 --> 00:14:09,519
features like service workers

374
00:14:09,519 --> 00:14:12,320
which are also of independent interest

375
00:14:12,320 --> 00:14:14,160
we identified several flaws in these

376
00:14:14,160 --> 00:14:16,079
specifications

377
00:14:16,079 --> 00:14:18,720
found attacks and also proposed fixes

378
00:14:18,720 --> 00:14:21,760
which have been adopted by the w3c

379
00:14:21,760 --> 00:14:22,800
and

380
00:14:22,800 --> 00:14:23,760
also

381
00:14:23,760 --> 00:14:24,480
we

382
00:14:24,480 --> 00:14:26,480
run a security proof on the fixed

383
00:14:26,480 --> 00:14:29,199
standard and showed that the standard is

384
00:14:29,199 --> 00:14:30,800
actually secure

385
00:14:30,800 --> 00:14:32,800
this i'm happy to take your questions

386
00:14:32,800 --> 00:14:33,920
and thank you very much for your

387
00:14:33,920 --> 00:14:36,250
attention

388
00:14:36,250 --> 00:14:40,639
[Applause]

389
00:14:40,639 --> 00:14:42,480
thank you very much

390
00:14:42,480 --> 00:14:45,839
so if anyone has a question

391
00:14:46,000 --> 00:14:47,120
thank you

392
00:14:47,120 --> 00:14:48,079
so

393
00:14:48,079 --> 00:14:48,880
well

394
00:14:48,880 --> 00:14:52,560
um in your model i think it was slide 11

395
00:14:52,560 --> 00:14:55,360
you describe that the

396
00:14:55,360 --> 00:14:58,720
attacker is either a process or it's uh

397
00:14:58,720 --> 00:15:00,639
controlling the whole network

398
00:15:00,639 --> 00:15:03,360
yes uh can it actually take over another

399
00:15:03,360 --> 00:15:06,240
process to some extent yeah that is true

400
00:15:06,240 --> 00:15:08,560
so what i didn't mention that we our

401
00:15:08,560 --> 00:15:11,040
model also features dynamic corruption

402
00:15:11,040 --> 00:15:13,839
so the adversary can at any time

403
00:15:13,839 --> 00:15:17,920
take over any process thank you

404
00:15:19,120 --> 00:15:21,839
any other question

405
00:15:21,839 --> 00:15:25,079
thank you

406
00:15:26,880 --> 00:15:28,160
to clarify

407
00:15:28,160 --> 00:15:31,040
a payment handler is a payment method

408
00:15:31,040 --> 00:15:31,920
okay

409
00:15:31,920 --> 00:15:33,279
um

410
00:15:33,279 --> 00:15:35,440
not quite the payment handler is a

411
00:15:35,440 --> 00:15:38,320
process that can process several payment

412
00:15:38,320 --> 00:15:40,800
methods so the payment method can be for

413
00:15:40,800 --> 00:15:42,880
example credit card payment or but it

414
00:15:42,880 --> 00:15:45,519
calls can also be something like paypal

415
00:15:45,519 --> 00:15:48,480
transaction and the payment handler is

416
00:15:48,480 --> 00:15:50,720
one

417
00:15:50,720 --> 00:15:52,639
instance or piece of software of a

418
00:15:52,639 --> 00:15:54,720
payment provider which can process such

419
00:15:54,720 --> 00:15:57,440
transactions

420
00:15:59,839 --> 00:16:02,160
i don't see any

421
00:16:02,160 --> 00:16:04,560
online questions so i'm going to ask one

422
00:16:04,560 --> 00:16:06,800
of my own

423
00:16:06,800 --> 00:16:08,959
you mentioned that the model is a w

424
00:16:08,959 --> 00:16:12,240
model okay not a standard one

425
00:16:12,240 --> 00:16:14,320
pure interest um

426
00:16:14,320 --> 00:16:16,320
would it be possible to encode your

427
00:16:16,320 --> 00:16:18,560
model within one of those automated

428
00:16:18,560 --> 00:16:20,800
tools like tamarind and probably or

429
00:16:20,800 --> 00:16:23,279
there's actual feature that prevents you

430
00:16:23,279 --> 00:16:25,600
to use an automatic tool because

431
00:16:25,600 --> 00:16:27,440
i think in your paper you just you proof

432
00:16:27,440 --> 00:16:28,959
item by hand

433
00:16:28,959 --> 00:16:30,639
that is correct and that's a very good

434
00:16:30,639 --> 00:16:33,040
question so at the moment the vim is a

435
00:16:33,040 --> 00:16:35,279
pen and paper model but we are currently

436
00:16:35,279 --> 00:16:38,639
working on a new approach for mechanized

437
00:16:38,639 --> 00:16:41,519
analysis that is based on f star

438
00:16:41,519 --> 00:16:43,279
so for this we

439
00:16:43,279 --> 00:16:45,199
created a new framework called dollar

440
00:16:45,199 --> 00:16:48,560
vial star which is a new mechanized

441
00:16:48,560 --> 00:16:51,440
framework for protocol analysis because

442
00:16:51,440 --> 00:16:53,839
one problem with the wim is

443
00:16:53,839 --> 00:16:56,079
we essentially don't restrict the model

444
00:16:56,079 --> 00:16:58,160
itself so we can have unbounded data

445
00:16:58,160 --> 00:17:00,959
structures recursive data structures

446
00:17:00,959 --> 00:17:03,360
unbounded loops and these are features

447
00:17:03,360 --> 00:17:05,919
that the existing tools like tamarind

448
00:17:05,919 --> 00:17:08,720
and prover reef sometimes struggle with

449
00:17:08,720 --> 00:17:10,559
so when we created the room at first we

450
00:17:10,559 --> 00:17:13,039
didn't want to restrict ourselves by any

451
00:17:13,039 --> 00:17:16,720
of these limitations of these tools

452
00:17:16,720 --> 00:17:18,319
that's the reason why we opted for pen

453
00:17:18,319 --> 00:17:20,240
and paper model back then

454
00:17:20,240 --> 00:17:22,000
but we are working on the mechanization

455
00:17:22,000 --> 00:17:23,760
because that's definitely a very

456
00:17:23,760 --> 00:17:25,599
valuable

457
00:17:25,599 --> 00:17:28,399
feature to have

458
00:17:29,280 --> 00:17:31,520
thank you one last question

459
00:17:31,520 --> 00:17:33,919
hi thank you for the talk very good i

460
00:17:33,919 --> 00:17:36,480
was wondering can you actually enforce

461
00:17:36,480 --> 00:17:40,080
arithmetic contracts or um conditions in

462
00:17:40,080 --> 00:17:42,640
the analysis do you actually encode any

463
00:17:42,640 --> 00:17:44,320
argument sorry i didn't read your

464
00:17:44,320 --> 00:17:45,919
question can you speak up a bit please

465
00:17:45,919 --> 00:17:46,799
of course

466
00:17:46,799 --> 00:17:48,960
do you actually encode or have to encode

467
00:17:48,960 --> 00:17:50,400
any arithmetic

468
00:17:50,400 --> 00:17:51,760
in your checks

469
00:17:51,760 --> 00:17:53,200
because prover if you cannot do

470
00:17:53,200 --> 00:17:54,720
arithmetic for example i was wondering

471
00:17:54,720 --> 00:17:56,880
if you actually added arithmetic for any

472
00:17:56,880 --> 00:17:58,160
kind of

473
00:17:58,160 --> 00:18:00,480
algebraic features you mean

474
00:18:00,480 --> 00:18:02,400
sorry

475
00:18:02,400 --> 00:18:04,799
i have got some echo over here okay

476
00:18:04,799 --> 00:18:07,039
sorry about that so i was just wondering

477
00:18:07,039 --> 00:18:10,480
if you encoded arithmetic arithmetic uh

478
00:18:10,480 --> 00:18:13,120
that's a good question so um

479
00:18:13,120 --> 00:18:15,600
i think the model can be easily extended

480
00:18:15,600 --> 00:18:17,919
to include arithmetics but at the moment

481
00:18:17,919 --> 00:18:20,640
we don't have that

482
00:18:22,240 --> 00:18:24,400
thank you very much we can thanks again

483
00:18:24,400 --> 00:18:28,679
the speaker for this very nice talk

