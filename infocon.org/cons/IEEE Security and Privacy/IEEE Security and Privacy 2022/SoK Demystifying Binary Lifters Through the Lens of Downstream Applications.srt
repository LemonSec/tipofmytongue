1
00:00:00,000 --> 00:00:01,520
romantically correct

2
00:00:01,520 --> 00:00:03,840
but can have different representation

3
00:00:03,840 --> 00:00:06,560
compared with ir generated by the

4
00:00:06,560 --> 00:00:09,120
compeller

5
00:00:09,440 --> 00:00:10,880
for example

6
00:00:10,880 --> 00:00:14,000
variables in c code will be translated

7
00:00:14,000 --> 00:00:16,720
into corresponding variables in clone

8
00:00:16,720 --> 00:00:18,240
generated iron

9
00:00:18,240 --> 00:00:21,279
but in maximum generated iron variables

10
00:00:21,279 --> 00:00:24,160
will be represented as members of two

11
00:00:24,160 --> 00:00:25,840
special structs

12
00:00:25,840 --> 00:00:30,240
named the state and the man

13
00:00:30,240 --> 00:00:32,800
the function prototypes will not be

14
00:00:32,800 --> 00:00:35,600
recovered in maximum generated ir

15
00:00:35,600 --> 00:00:37,360
as during efficiency

16
00:00:37,360 --> 00:00:40,000
functions in maxima generated ir always

17
00:00:40,000 --> 00:00:43,680
have two arguments statize and man

18
00:00:43,680 --> 00:00:46,320
which represents hardware state and the

19
00:00:46,320 --> 00:00:50,000
memory objects separately

20
00:00:52,160 --> 00:00:55,120
as we observed that the lifted ir code

21
00:00:55,120 --> 00:00:56,960
can have visually different

22
00:00:56,960 --> 00:00:59,359
representations which are produced by

23
00:00:59,359 --> 00:01:01,120
competitor

24
00:01:01,120 --> 00:01:03,440
the different representations could

25
00:01:03,440 --> 00:01:06,560
likely hinder downstream analysis

26
00:01:06,560 --> 00:01:08,240
so we wanted to ask

27
00:01:08,240 --> 00:01:11,760
to what extent the lifted iron

28
00:01:11,760 --> 00:01:13,920
support representative downstream

29
00:01:13,920 --> 00:01:16,640
applications

30
00:01:18,080 --> 00:01:21,200
however expressiveness is hard to define

31
00:01:21,200 --> 00:01:22,720
formally

32
00:01:22,720 --> 00:01:25,200
and therefore we measure it from an

33
00:01:25,200 --> 00:01:27,680
empirical perspective

34
00:01:27,680 --> 00:01:30,320
more specifically we want to

35
00:01:30,320 --> 00:01:32,960
demystify the expressiveness of the

36
00:01:32,960 --> 00:01:34,960
battery lifters

37
00:01:34,960 --> 00:01:37,520
through the lens of representative

38
00:01:37,520 --> 00:01:40,560
downstream applications

39
00:01:40,560 --> 00:01:41,520
we use

40
00:01:41,520 --> 00:01:43,759
clustering applications including

41
00:01:43,759 --> 00:01:45,920
discriminability analysis

42
00:01:45,920 --> 00:01:47,600
pointer analysis

43
00:01:47,600 --> 00:01:52,600
ct compilation and address sanitization

44
00:01:55,520 --> 00:01:57,439
overall in this work

45
00:01:57,439 --> 00:01:59,840
we conduct an in-depth study of binary

46
00:01:59,840 --> 00:02:01,600
lifters

47
00:02:01,600 --> 00:02:02,799
we study

48
00:02:02,799 --> 00:02:04,719
four popular lifters

49
00:02:04,719 --> 00:02:08,160
developed by academia and the industry

50
00:02:08,160 --> 00:02:11,280
with downstream applications including

51
00:02:11,280 --> 00:02:13,360
neural code comprehension

52
00:02:13,360 --> 00:02:15,760
static value site analysis

53
00:02:15,760 --> 00:02:17,760
radix ct compiler

54
00:02:17,760 --> 00:02:20,879
and the clone address centralization

55
00:02:20,879 --> 00:02:24,080
yeah we conduct such a study in a cross

56
00:02:24,080 --> 00:02:26,160
across compeller and across platform

57
00:02:26,160 --> 00:02:28,640
study

58
00:02:31,280 --> 00:02:33,120
now let me briefly introduce the

59
00:02:33,120 --> 00:02:36,239
downstream applications

60
00:02:36,239 --> 00:02:40,000
point analysis establishes which pointer

61
00:02:40,000 --> 00:02:42,800
can point to the same variables or

62
00:02:42,800 --> 00:02:44,879
memory objects

63
00:02:44,879 --> 00:02:48,319
it is the cornerstone of most data and

64
00:02:48,319 --> 00:02:51,040
the control flow analysis

65
00:02:51,040 --> 00:02:53,519
we leverage the statistart

66
00:02:53,519 --> 00:02:59,120
aolvm point analysis library svf

67
00:03:01,519 --> 00:03:04,080
discriminability analysis determines the

68
00:03:04,080 --> 00:03:07,760
similarity of two pieces of ir code

69
00:03:07,760 --> 00:03:10,080
that implemented the same or different

70
00:03:10,080 --> 00:03:12,080
tasks

71
00:03:12,080 --> 00:03:15,440
it is the base of various similarity

72
00:03:15,440 --> 00:03:18,239
based security applications

73
00:03:18,239 --> 00:03:21,440
for instance malware clustering and the

74
00:03:21,440 --> 00:03:24,560
code platforism detection

75
00:03:24,560 --> 00:03:27,360
we reused the coding binding to

76
00:03:27,360 --> 00:03:30,720
ncc published in nibs 2018

77
00:03:30,720 --> 00:03:33,440
which converts similar ir code into

78
00:03:33,440 --> 00:03:38,560
numerical vectors with closed distance

79
00:03:41,360 --> 00:03:44,239
cd compiler conducts a site of analysis

80
00:03:44,239 --> 00:03:45,360
passes

81
00:03:45,360 --> 00:03:46,959
to the ir code

82
00:03:46,959 --> 00:03:49,680
and it converts ir code into high level

83
00:03:49,680 --> 00:03:51,680
c source code

84
00:03:51,680 --> 00:03:53,439
for this task

85
00:03:53,439 --> 00:03:56,000
we use the the compiler component

86
00:03:56,000 --> 00:03:59,200
provided by the write dac framework

87
00:03:59,200 --> 00:04:00,640
which is the

88
00:04:00,640 --> 00:04:03,439
best available air van iron based sat

89
00:04:03,439 --> 00:04:04,480
compiler

90
00:04:04,480 --> 00:04:08,879
according to our empirical observation

91
00:04:11,599 --> 00:04:13,439
and the address sanitizer is a

92
00:04:13,439 --> 00:04:15,280
well-known memory exploitation

93
00:04:15,280 --> 00:04:17,600
protection mechanism

94
00:04:17,600 --> 00:04:20,639
in this study we use address sanitizer

95
00:04:20,639 --> 00:04:24,440
provided by clone

96
00:04:28,000 --> 00:04:30,160
we benchmark four lifters including

97
00:04:30,160 --> 00:04:32,639
maxima developed by

98
00:04:32,639 --> 00:04:34,000
12-bit

99
00:04:34,000 --> 00:04:36,960
mactool developed by microsoft

100
00:04:36,960 --> 00:04:39,680
razdaq into irvine

101
00:04:39,680 --> 00:04:41,120
developed by

102
00:04:41,120 --> 00:04:43,840
avast and the bean rack published in

103
00:04:43,840 --> 00:04:46,479
neurosis 2020

104
00:04:46,479 --> 00:04:48,880
to review how compiler optimizations

105
00:04:48,880 --> 00:04:51,360
could affect the performance of

106
00:04:51,360 --> 00:04:53,600
downstream applications

107
00:04:53,600 --> 00:04:56,240
we configure maxima to disable all

108
00:04:56,240 --> 00:04:58,639
imposed optimization passes

109
00:04:58,639 --> 00:05:02,080
as maximum zero

110
00:05:04,080 --> 00:05:05,199
overall

111
00:05:05,199 --> 00:05:08,800
the demand compiler generated ir denotes

112
00:05:08,800 --> 00:05:12,560
the upper bound quality of lifted dial

113
00:05:12,560 --> 00:05:15,600
we empirically benchmark how far we are

114
00:05:15,600 --> 00:05:17,600
from the perspective

115
00:05:17,600 --> 00:05:20,639
of the downstream applications

116
00:05:20,639 --> 00:05:23,520
instead instead of defining how good the

117
00:05:23,520 --> 00:05:25,919
elected io should be with regard to

118
00:05:25,919 --> 00:05:27,680
downstream tasks

119
00:05:27,680 --> 00:05:31,199
we check whether lifted and compiled ir

120
00:05:31,199 --> 00:05:34,960
has comparable performance

121
00:05:37,120 --> 00:05:41,360
then here are the findings of its study

122
00:05:42,080 --> 00:05:44,800
one of our major findings is that

123
00:05:44,800 --> 00:05:47,840
currently existing lifters follow two

124
00:05:47,840 --> 00:05:49,680
distinct patterns

125
00:05:49,680 --> 00:05:52,400
when producing iron code

126
00:05:52,400 --> 00:05:55,520
we distinguish them as emulations that

127
00:05:55,520 --> 00:05:56,400
are

128
00:05:56,400 --> 00:05:59,039
abbreviated as eir and

129
00:05:59,039 --> 00:06:02,720
high level ir abbreviated as hir in the

130
00:06:02,720 --> 00:06:04,479
following

131
00:06:04,479 --> 00:06:07,120
generally eir is functional and

132
00:06:07,120 --> 00:06:08,639
executable

133
00:06:08,639 --> 00:06:11,520
as it tries to emulate each hardware

134
00:06:11,520 --> 00:06:13,280
instruction peacefully

135
00:06:13,280 --> 00:06:15,280
with ir code

136
00:06:15,280 --> 00:06:17,840
private satire does not contain valuable

137
00:06:17,840 --> 00:06:19,680
information including

138
00:06:19,680 --> 00:06:22,479
variables and types and even function

139
00:06:22,479 --> 00:06:24,639
prototypes

140
00:06:24,639 --> 00:06:26,160
on the other hand

141
00:06:26,160 --> 00:06:30,000
hr is concise and easy to understood by

142
00:06:30,000 --> 00:06:31,360
particularly

143
00:06:31,360 --> 00:06:32,840
not

144
00:06:32,840 --> 00:06:35,840
functional as accurately recovering

145
00:06:35,840 --> 00:06:38,639
variables and types from stripped binary

146
00:06:38,639 --> 00:06:41,440
is challenging

147
00:06:44,080 --> 00:06:46,319
here is an example

148
00:06:46,319 --> 00:06:48,560
as shown in this figure

149
00:06:48,560 --> 00:06:51,440
a single movie instruction

150
00:06:51,440 --> 00:06:53,599
in assembly code

151
00:06:53,599 --> 00:06:56,240
will correspond to a sequence of load

152
00:06:56,240 --> 00:07:00,080
and store instructions in the eir code

153
00:07:00,080 --> 00:07:03,120
but our hr code lifters will analyze

154
00:07:03,120 --> 00:07:04,720
this code snipped

155
00:07:04,720 --> 00:07:07,840
and summarize the two move instructions

156
00:07:07,840 --> 00:07:10,800
as an argument of a function call

157
00:07:10,800 --> 00:07:12,880
which is close to

158
00:07:12,880 --> 00:07:15,520
compiler generated ir

159
00:07:15,520 --> 00:07:18,960
basically er represents cpu registers

160
00:07:18,960 --> 00:07:21,280
with global variables

161
00:07:21,280 --> 00:07:23,919
and use multiple ir instructions to

162
00:07:23,919 --> 00:07:26,639
achieve the semantics of an assembly

163
00:07:26,639 --> 00:07:28,080
instruction

164
00:07:28,080 --> 00:07:31,680
and thus eir is usually more lazy

165
00:07:31,680 --> 00:07:33,759
and are difficult to

166
00:07:33,759 --> 00:07:37,919
be understood by analysts

167
00:07:40,240 --> 00:07:42,479
we find that all lifters have tribute

168
00:07:42,479 --> 00:07:44,879
support for point analysis

169
00:07:44,879 --> 00:07:46,720
the main reason is that political

170
00:07:46,720 --> 00:07:49,840
analysis relies on accurately recovered

171
00:07:49,840 --> 00:07:51,919
variables and attacks

172
00:07:51,919 --> 00:07:55,360
however 100 recovery is challenging and

173
00:07:55,360 --> 00:07:59,840
undecidable in reverse engineering

174
00:08:01,039 --> 00:08:03,520
besides we find that lifters failed

175
00:08:03,520 --> 00:08:04,560
because

176
00:08:04,560 --> 00:08:07,520
because of two different reasons

177
00:08:07,520 --> 00:08:11,599
mirak and the maxima which is eir

178
00:08:11,599 --> 00:08:14,240
further because er naturally

179
00:08:14,240 --> 00:08:17,520
does not support the pointer analysis as

180
00:08:17,520 --> 00:08:20,160
function prototypes and variables are

181
00:08:20,160 --> 00:08:22,400
not recovered at all

182
00:08:22,400 --> 00:08:25,120
and for radical and mac2

183
00:08:25,120 --> 00:08:27,759
which produce hr

184
00:08:27,759 --> 00:08:30,879
they failed because variables and types

185
00:08:30,879 --> 00:08:35,039
are not correct or correctly recovered

186
00:08:35,039 --> 00:08:38,080
we further investigated their algorithms

187
00:08:38,080 --> 00:08:39,440
and found that

188
00:08:39,440 --> 00:08:42,240
lifters have not fully limited research

189
00:08:42,240 --> 00:08:43,440
products

190
00:08:43,440 --> 00:08:47,440
in the reverse engineering field

191
00:08:49,040 --> 00:08:51,120
nevertheless radar dac can leverage

192
00:08:51,120 --> 00:08:54,640
debug information to refine its output

193
00:08:54,640 --> 00:08:56,720
thus we are able to enhance point

194
00:08:56,720 --> 00:08:58,640
analysis results

195
00:08:58,640 --> 00:09:02,160
with the help of advanced methods

196
00:09:02,160 --> 00:09:04,880
in reverse engineering

197
00:09:04,880 --> 00:09:07,040
for example db

198
00:09:07,040 --> 00:09:11,519
which published in ccs18 can be used to

199
00:09:11,519 --> 00:09:14,240
predict the debug information for

200
00:09:14,240 --> 00:09:17,360
stripped boundaries

201
00:09:19,680 --> 00:09:22,800
for discriminability analysis we find

202
00:09:22,800 --> 00:09:27,360
that each ir generally outperforms eir

203
00:09:27,360 --> 00:09:29,839
and optimization can significantly

204
00:09:29,839 --> 00:09:33,279
improve classification accuracy

205
00:09:33,279 --> 00:09:36,640
also iron lifted by hr lifters

206
00:09:36,640 --> 00:09:39,360
like rotterdam and the mactool has

207
00:09:39,360 --> 00:09:41,360
comparable performance

208
00:09:41,360 --> 00:09:44,959
with even compiled iron

209
00:09:47,200 --> 00:09:49,680
for decompression we follow existing

210
00:09:49,680 --> 00:09:52,160
research and measure the structuredness

211
00:09:52,160 --> 00:09:55,360
of decompiled c code by counting the go

212
00:09:55,360 --> 00:09:56,800
to statements

213
00:09:56,800 --> 00:09:59,760
and as average life code

214
00:09:59,760 --> 00:10:02,000
we find that compiled ir generally

215
00:10:02,000 --> 00:10:04,800
exhibits better performance than lifted

216
00:10:04,800 --> 00:10:05,920
iron

217
00:10:05,920 --> 00:10:08,320
well armor lifted by red deck

218
00:10:08,320 --> 00:10:11,120
has a close performance with compelled

219
00:10:11,120 --> 00:10:13,519
iron

220
00:10:15,360 --> 00:10:17,760
besides we also recompiled all the

221
00:10:17,760 --> 00:10:19,760
details to check

222
00:10:19,760 --> 00:10:22,720
their functionality correctness

223
00:10:22,720 --> 00:10:26,160
most are lifted by er lifters such as

224
00:10:26,160 --> 00:10:28,399
maxima and the bin rack

225
00:10:28,399 --> 00:10:31,200
can pass the test cases

226
00:10:31,200 --> 00:10:34,560
where hr lifted by ladakh and the

227
00:10:34,560 --> 00:10:38,320
mactoon should lower success rates

228
00:10:38,320 --> 00:10:41,040
this result again demonstrates that

229
00:10:41,040 --> 00:10:42,959
modern manual lifters

230
00:10:42,959 --> 00:10:45,760
have distinct designs

231
00:10:45,760 --> 00:10:49,279
er lictors focus more on functionality

232
00:10:49,279 --> 00:10:50,160
and

233
00:10:50,160 --> 00:10:54,399
hr lifters focus more on readability

234
00:10:56,480 --> 00:10:59,440
we also compare retroright and advance

235
00:10:59,440 --> 00:11:01,360
the binary writer with

236
00:11:01,360 --> 00:11:03,600
manual lifters in applying address

237
00:11:03,600 --> 00:11:06,240
sanitizer to executables

238
00:11:06,240 --> 00:11:08,480
we find that maxima has appearing

239
00:11:08,480 --> 00:11:09,839
utility

240
00:11:09,839 --> 00:11:11,680
although stack variables are not

241
00:11:11,680 --> 00:11:13,920
recovered in lifted iron

242
00:11:13,920 --> 00:11:16,160
maxima shows hip sanitization

243
00:11:16,160 --> 00:11:20,399
performance comparable to ritual right

244
00:11:22,160 --> 00:11:23,360
overall

245
00:11:23,360 --> 00:11:25,600
we summarize our main results in this

246
00:11:25,600 --> 00:11:26,640
table

247
00:11:26,640 --> 00:11:29,279
note that red deck can be enhanced with

248
00:11:29,279 --> 00:11:33,040
debug information predicted by db

249
00:11:33,040 --> 00:11:35,440
thus point analysis accuracy of the

250
00:11:35,440 --> 00:11:37,920
radar can be improved

251
00:11:37,920 --> 00:11:40,320
we denote this in the second row with an

252
00:11:40,320 --> 00:11:43,800
extra arrow

253
00:11:45,360 --> 00:11:48,240
finally we concluded this study with

254
00:11:48,240 --> 00:11:50,959
several takeaway messages

255
00:11:50,959 --> 00:11:51,839
first

256
00:11:51,839 --> 00:11:54,639
lrvm ir optimization plays a critical

257
00:11:54,639 --> 00:11:56,959
role in generating concise

258
00:11:56,959 --> 00:12:00,000
and discriminable ir code

259
00:12:00,000 --> 00:12:02,800
second state-of-the-art lifters

260
00:12:02,800 --> 00:12:05,600
can not recover variables and types

261
00:12:05,600 --> 00:12:07,040
accurately

262
00:12:07,040 --> 00:12:09,200
but some advanced

263
00:12:09,200 --> 00:12:11,680
but some advanced research output can be

264
00:12:11,680 --> 00:12:14,320
used to enhance the performance

265
00:12:14,320 --> 00:12:15,600
and third

266
00:12:15,600 --> 00:12:18,079
battery lifters have distinctive

267
00:12:18,079 --> 00:12:19,600
preferences

268
00:12:19,600 --> 00:12:22,720
er lifters focus on functionality

269
00:12:22,720 --> 00:12:26,320
where hr vectors focus on readability

270
00:12:26,320 --> 00:12:27,279
also

271
00:12:27,279 --> 00:12:30,160
hvr lifters can produce ir code that has

272
00:12:30,160 --> 00:12:32,480
comparable performance with even

273
00:12:32,480 --> 00:12:34,880
compiled ir on the discriminability

274
00:12:34,880 --> 00:12:38,600
analysis task

275
00:12:40,000 --> 00:12:42,079
that's all from the presentations on

276
00:12:42,079 --> 00:12:44,480
cable listening and i'm glad to take

277
00:12:44,480 --> 00:12:47,800
some questions

278
00:12:50,340 --> 00:12:53,760
[Applause]

279
00:12:53,760 --> 00:12:56,560
all right do we have jibo

280
00:12:56,560 --> 00:12:59,600
on zoom to answer questions

281
00:12:59,600 --> 00:13:01,120
yeah i'm here

282
00:13:01,120 --> 00:13:03,120
all right any questions please come up

283
00:13:03,120 --> 00:13:05,440
to the mic so you can hear you

284
00:13:05,440 --> 00:13:06,959
otherwise i'm going to start with a

285
00:13:06,959 --> 00:13:08,639
question

286
00:13:08,639 --> 00:13:11,040
so i'm wondering um

287
00:13:11,040 --> 00:13:13,040
so generally the performance didn't seem

288
00:13:13,040 --> 00:13:14,560
that great for instance on the

289
00:13:14,560 --> 00:13:16,880
accumulation task but if you think about

290
00:13:16,880 --> 00:13:19,120
tools such as gydra

291
00:13:19,120 --> 00:13:21,760
which do use an ir their own one p code

292
00:13:21,760 --> 00:13:23,040
and do have

293
00:13:23,040 --> 00:13:24,720
reasonable decompilation performance is

294
00:13:24,720 --> 00:13:26,800
it maybe the case that llvm is just not

295
00:13:26,800 --> 00:13:30,399
a very good ir for reversing tasks like

296
00:13:30,399 --> 00:13:33,440
should we use a different ir

297
00:13:33,440 --> 00:13:36,320
oh yes we actually compared uh

298
00:13:36,320 --> 00:13:38,000
the decomposition called the generator

299
00:13:38,000 --> 00:13:40,560
with vmware code with

300
00:13:40,560 --> 00:13:42,399
the output of the derailleur and ladder

301
00:13:42,399 --> 00:13:43,360
pro

302
00:13:43,360 --> 00:13:44,560
we found

303
00:13:44,560 --> 00:13:46,079
that

304
00:13:46,079 --> 00:13:48,079
actually the commercial tools at the

305
00:13:48,079 --> 00:13:50,800
param digital can outperform

306
00:13:50,800 --> 00:13:53,040
uh current decomposition results based

307
00:13:53,040 --> 00:13:55,199
on every error of vmware

308
00:13:55,199 --> 00:13:57,440
but we also found that if we use clone

309
00:13:57,440 --> 00:14:00,079
generated ir they use the

310
00:14:00,079 --> 00:14:02,560
radical decompiler to decompile the

311
00:14:02,560 --> 00:14:05,279
cloud generated layer we will even get

312
00:14:05,279 --> 00:14:09,040
better results compared with g-drop uh

313
00:14:09,040 --> 00:14:11,360
output and other pros output

314
00:14:11,360 --> 00:14:12,160
so

315
00:14:12,160 --> 00:14:13,440
in

316
00:14:13,440 --> 00:14:16,800
in this view we think that maybe

317
00:14:16,800 --> 00:14:19,440
currently the elixir doesn't show

318
00:14:19,440 --> 00:14:22,079
very good results on demolition tasks

319
00:14:22,079 --> 00:14:26,000
but in future if we can continue to

320
00:14:26,000 --> 00:14:28,399
improve the quality

321
00:14:28,399 --> 00:14:31,600
and the functionality of the lifted ir

322
00:14:31,600 --> 00:14:35,120
maybe finally we can get a better

323
00:14:35,120 --> 00:14:37,519
error of our ir based decompower

324
00:14:37,519 --> 00:14:39,360
compared with some

325
00:14:39,360 --> 00:14:41,839
expensive commercial tool

326
00:14:41,839 --> 00:14:43,680
gydra is not that expensive but okay

327
00:14:43,680 --> 00:14:46,720
thank you okay yes sterilizer is free

328
00:14:46,720 --> 00:14:48,639
we have a question from the audience yes

329
00:14:48,639 --> 00:14:50,639
um so thank you for your very

330
00:14:50,639 --> 00:14:52,800
interesting talk i'm kyle zem from

331
00:14:52,800 --> 00:14:54,800
arizona state university

332
00:14:54,800 --> 00:14:57,279
um so i have a question about the

333
00:14:57,279 --> 00:15:00,399
data set that you have which is four or

334
00:15:00,399 --> 00:15:02,560
five binary lifters

335
00:15:02,560 --> 00:15:03,760
um

336
00:15:03,760 --> 00:15:06,160
not all of them actually many of them

337
00:15:06,160 --> 00:15:10,399
are not designed for a re-assembly

338
00:15:10,399 --> 00:15:11,680
analysis

339
00:15:11,680 --> 00:15:14,079
and but there is actually one more

340
00:15:14,079 --> 00:15:16,639
binary lifter that can lift binary into

341
00:15:16,639 --> 00:15:19,760
error vmir that is specifically designed

342
00:15:19,760 --> 00:15:21,680
for reassembly which is called

343
00:15:21,680 --> 00:15:23,040
rev ng

344
00:15:23,040 --> 00:15:25,600
um so i'm wondering why refng is not in

345
00:15:25,600 --> 00:15:27,440
your data set and

346
00:15:27,440 --> 00:15:29,920
because it's kind of famous and did you

347
00:15:29,920 --> 00:15:33,519
try it was it any issue with it

348
00:15:33,519 --> 00:15:36,560
oh yeah yeah we actually investigated a

349
00:15:36,560 --> 00:15:38,959
uh rap ng

350
00:15:38,959 --> 00:15:41,440
but actually this work is start starts

351
00:15:41,440 --> 00:15:42,959
from

352
00:15:42,959 --> 00:15:46,160
2020 summer so at that time we

353
00:15:46,160 --> 00:15:49,120
investigated the rv ng

354
00:15:49,120 --> 00:15:51,600
and we found at that time

355
00:15:51,600 --> 00:15:53,519
the documentation

356
00:15:53,519 --> 00:15:56,160
is not

357
00:15:56,800 --> 00:15:59,120
very detailed so we tried some for

358
00:15:59,120 --> 00:16:02,560
example and didn't figure out a way to

359
00:16:02,560 --> 00:16:06,399
use our energy to generate a function r

360
00:16:06,399 --> 00:16:07,600
so we

361
00:16:07,600 --> 00:16:09,920
at that time we decided to not include

362
00:16:09,920 --> 00:16:13,519
ivng in our evaluation site but we

363
00:16:13,519 --> 00:16:16,959
recently reinvestigated the rv energy

364
00:16:16,959 --> 00:16:19,920
and we found that this tool has

365
00:16:19,920 --> 00:16:22,959
a continuous development

366
00:16:22,959 --> 00:16:26,160
and they continue to be improved in last

367
00:16:26,160 --> 00:16:29,120
two years and we found this tool

368
00:16:29,120 --> 00:16:32,560
can actually generate some

369
00:16:32,560 --> 00:16:35,040
high quality functionality

370
00:16:35,040 --> 00:16:36,399
so we think

371
00:16:36,399 --> 00:16:37,440
uh

372
00:16:37,440 --> 00:16:38,880
this work

373
00:16:38,880 --> 00:16:42,160
this work is conducted in last uh mainly

374
00:16:42,160 --> 00:16:43,759
last year so we think

375
00:16:43,759 --> 00:16:46,639
the results present in this

376
00:16:46,639 --> 00:16:47,519
paper

377
00:16:47,519 --> 00:16:50,240
may not fully reflect the current state

378
00:16:50,240 --> 00:16:52,880
of modern battery lifters

379
00:16:52,880 --> 00:16:54,560
so we think

380
00:16:54,560 --> 00:16:56,959
if users want to choose

381
00:16:56,959 --> 00:16:58,800
lifter for there are some

382
00:16:58,800 --> 00:17:01,839
specific tasks then maybe it should turn

383
00:17:01,839 --> 00:17:03,279
to the

384
00:17:03,279 --> 00:17:05,679
current maybe developers in our release

385
00:17:05,679 --> 00:17:07,359
last latest release version of the

386
00:17:07,359 --> 00:17:08,720
bandwidth

387
00:17:08,720 --> 00:17:10,959
to

388
00:17:11,039 --> 00:17:13,599
get a better maybe better

389
00:17:13,599 --> 00:17:16,559
results than president edin's paper

390
00:17:16,559 --> 00:17:19,280
i see so it will be interesting to see

391
00:17:19,280 --> 00:17:23,359
the latest evaluation and but thank you

392
00:17:23,359 --> 00:17:24,880
all right thank you

393
00:17:24,880 --> 00:17:28,839
let's thank the speaker again

