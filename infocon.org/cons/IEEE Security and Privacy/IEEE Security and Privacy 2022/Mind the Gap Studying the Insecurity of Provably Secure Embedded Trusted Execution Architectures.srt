1
00:00:00,880 --> 00:00:03,199
welcome uh

2
00:00:03,199 --> 00:00:04,720
how can we

3
00:00:04,720 --> 00:00:07,919
provide evidence for the security of

4
00:00:07,919 --> 00:00:08,720
uh

5
00:00:08,720 --> 00:00:10,639
computer systems this is the question

6
00:00:10,639 --> 00:00:11,519
that

7
00:00:11,519 --> 00:00:14,320
my collaborators and i have discussed in

8
00:00:14,320 --> 00:00:17,039
in our paper mind the gap

9
00:00:17,039 --> 00:00:19,279
so

10
00:00:19,439 --> 00:00:22,000
let's start with a simple example

11
00:00:22,000 --> 00:00:24,480
let's say that you have an atm as many

12
00:00:24,480 --> 00:00:26,320
of us do

13
00:00:26,320 --> 00:00:28,880
you probably want to

14
00:00:28,880 --> 00:00:31,599
provide some guarantees

15
00:00:31,599 --> 00:00:32,640
about

16
00:00:32,640 --> 00:00:35,120
the workings of the software on this atm

17
00:00:35,120 --> 00:00:38,320
so for example if you allow the users to

18
00:00:38,320 --> 00:00:41,200
withdraw cash from the atm

19
00:00:41,200 --> 00:00:42,719
you might want to make sure that after

20
00:00:42,719 --> 00:00:45,360
they withdraw the cache the new balance

21
00:00:45,360 --> 00:00:47,920
of the user is lower than the original

22
00:00:47,920 --> 00:00:49,440
balance

23
00:00:49,440 --> 00:00:51,440
that's pretty reasonable

24
00:00:51,440 --> 00:00:53,280
so what are the ways that that you could

25
00:00:53,280 --> 00:00:54,160
provide

26
00:00:54,160 --> 00:00:56,640
evidence for this property

27
00:00:56,640 --> 00:00:58,559
one of the ways is by using inductive

28
00:00:58,559 --> 00:01:00,879
methods so these are experimental

29
00:01:00,879 --> 00:01:03,199
methods that can provide some empirical

30
00:01:03,199 --> 00:01:05,438
evidence for this property

31
00:01:05,438 --> 00:01:08,880
for example using attack research

32
00:01:08,880 --> 00:01:11,520
so we can take the system and try to

33
00:01:11,520 --> 00:01:13,520
provide all kinds of different inputs to

34
00:01:13,520 --> 00:01:16,320
it as attackers and see what kind of

35
00:01:16,320 --> 00:01:17,840
outputs do we get

36
00:01:17,840 --> 00:01:21,200
and see if the property is ever broken

37
00:01:21,200 --> 00:01:23,280
the thing with with these methods is

38
00:01:23,280 --> 00:01:25,280
that if we have a successful attack then

39
00:01:25,280 --> 00:01:26,799
the security property is definitely

40
00:01:26,799 --> 00:01:28,000
broken

41
00:01:28,000 --> 00:01:29,439
and and we're done with the

42
00:01:29,439 --> 00:01:30,880
experimentation

43
00:01:30,880 --> 00:01:32,960
but if we only get failed detects then

44
00:01:32,960 --> 00:01:35,439
that can provide some support for this

45
00:01:35,439 --> 00:01:37,759
security claim but we can never be sure

46
00:01:37,759 --> 00:01:38,880
we can never

47
00:01:38,880 --> 00:01:40,960
guarantee that this security property

48
00:01:40,960 --> 00:01:43,920
holds for any given input

49
00:01:43,920 --> 00:01:46,240
on the other hand we can use deductive

50
00:01:46,240 --> 00:01:49,360
methods so formal mathematical methods

51
00:01:49,360 --> 00:01:50,799
on the model

52
00:01:50,799 --> 00:01:52,880
of the system so in this figure you can

53
00:01:52,880 --> 00:01:55,759
see the actual implementation uh the the

54
00:01:55,759 --> 00:01:57,280
physical system on the left in the

55
00:01:57,280 --> 00:01:58,560
square

56
00:01:58,560 --> 00:02:00,560
and the model of the system on the right

57
00:02:00,560 --> 00:02:02,320
so in this case

58
00:02:02,320 --> 00:02:04,799
uh we can make a model of the atm and

59
00:02:04,799 --> 00:02:07,439
then provide the property that we want

60
00:02:07,439 --> 00:02:09,280
to be enforced

61
00:02:09,280 --> 00:02:11,120
in some kind of mathematical notation so

62
00:02:11,120 --> 00:02:13,680
for example in this case

63
00:02:13,680 --> 00:02:15,120
we can

64
00:02:15,120 --> 00:02:16,560
write this this property about the

65
00:02:16,560 --> 00:02:17,840
balances

66
00:02:17,840 --> 00:02:19,920
with first order logic

67
00:02:19,920 --> 00:02:22,160
and then we can use some kind of tool to

68
00:02:22,160 --> 00:02:24,400
prove uh whether or not this model

69
00:02:24,400 --> 00:02:26,959
satisfies this property

70
00:02:26,959 --> 00:02:28,080
um

71
00:02:28,080 --> 00:02:29,760
but the thing is if if we have this

72
00:02:29,760 --> 00:02:32,400
separate implementation and a formal

73
00:02:32,400 --> 00:02:33,519
model

74
00:02:33,519 --> 00:02:35,519
the question arises

75
00:02:35,519 --> 00:02:37,120
what is the deal with the connection

76
00:02:37,120 --> 00:02:39,440
between the two can we be sure that the

77
00:02:39,440 --> 00:02:41,360
security guarantees of the model also

78
00:02:41,360 --> 00:02:44,879
apply to the implementation

79
00:02:45,599 --> 00:02:47,280
for example

80
00:02:47,280 --> 00:02:48,319
these

81
00:02:48,319 --> 00:02:51,519
deductive models they always

82
00:02:51,519 --> 00:02:55,200
use axioms as ground truths

83
00:02:55,200 --> 00:02:57,200
and we can

84
00:02:57,200 --> 00:02:58,239
basically

85
00:02:58,239 --> 00:02:59,920
arrive at the conclusion which is the

86
00:02:59,920 --> 00:03:01,760
security property starting from these

87
00:03:01,760 --> 00:03:04,319
these axioms

88
00:03:04,319 --> 00:03:08,000
but in the in the real world system

89
00:03:08,000 --> 00:03:10,959
we can fundamentally never prove that

90
00:03:10,959 --> 00:03:13,519
these axioms also hold

91
00:03:13,519 --> 00:03:14,560
because

92
00:03:14,560 --> 00:03:16,400
we can only prove things in the formal

93
00:03:16,400 --> 00:03:18,400
model but we want to

94
00:03:18,400 --> 00:03:21,120
make sure that these axioms also hold in

95
00:03:21,120 --> 00:03:22,239
the

96
00:03:22,239 --> 00:03:24,640
the actual physical system and the only

97
00:03:24,640 --> 00:03:26,480
way we can do this is by using these

98
00:03:26,480 --> 00:03:29,359
inductive methods

99
00:03:29,599 --> 00:03:31,440
so

100
00:03:31,440 --> 00:03:34,480
everything that i've said so far uh this

101
00:03:34,480 --> 00:03:36,319
is not new uh this is already

102
00:03:36,319 --> 00:03:38,159
established in the literature for

103
00:03:38,159 --> 00:03:40,799
example i can recommend the sock paper

104
00:03:40,799 --> 00:03:42,959
by hurley and fonorshot

105
00:03:42,959 --> 00:03:44,720
that was presented at this conference a

106
00:03:44,720 --> 00:03:47,120
couple years ago where they summarized

107
00:03:47,120 --> 00:03:49,200
this inductive deductive

108
00:03:49,200 --> 00:03:53,519
situation a lot better than i did now

109
00:03:53,519 --> 00:03:56,000
what we do in our paper

110
00:03:56,000 --> 00:03:57,680
is to

111
00:03:57,680 --> 00:04:00,239
look at at actual systems that have

112
00:04:00,239 --> 00:04:02,000
these deductive proofs

113
00:04:02,000 --> 00:04:02,799
and

114
00:04:02,799 --> 00:04:04,720
investigate how well

115
00:04:04,720 --> 00:04:06,640
their security properties hold in their

116
00:04:06,640 --> 00:04:09,760
actual implementations

117
00:04:10,000 --> 00:04:11,920
so we look at two embedded research

118
00:04:11,920 --> 00:04:13,360
prototypes

119
00:04:13,360 --> 00:04:15,920
and based on our experiences in in those

120
00:04:15,920 --> 00:04:17,269
systems

121
00:04:17,269 --> 00:04:18,399
[Music]

122
00:04:18,399 --> 00:04:19,519
we

123
00:04:19,519 --> 00:04:20,798
we will arrive at a couple of

124
00:04:20,798 --> 00:04:22,400
conclusions and then we provide some

125
00:04:22,400 --> 00:04:24,080
guidelines for how to make this

126
00:04:24,080 --> 00:04:25,600
connection stronger between the

127
00:04:25,600 --> 00:04:27,040
implementations

128
00:04:27,040 --> 00:04:29,840
and the formal models

129
00:04:29,840 --> 00:04:32,000
before i go further i want to clarify

130
00:04:32,000 --> 00:04:33,600
that

131
00:04:33,600 --> 00:04:35,759
this research should not be viewed as as

132
00:04:35,759 --> 00:04:37,919
questioning the value of these systems

133
00:04:37,919 --> 00:04:38,800
so

134
00:04:38,800 --> 00:04:41,360
uh we're not trying to criticize these

135
00:04:41,360 --> 00:04:44,400
these two systems that we analyzed

136
00:04:44,400 --> 00:04:47,840
we took these systems because

137
00:04:47,840 --> 00:04:49,360
this is a scale these these small

138
00:04:49,360 --> 00:04:50,880
embedded research systems this is a

139
00:04:50,880 --> 00:04:53,199
scale that that we can feasibly analyze

140
00:04:53,199 --> 00:04:56,639
as a small research group but we believe

141
00:04:56,639 --> 00:04:58,960
that these issues are more widespread

142
00:04:58,960 --> 00:05:01,120
than than just these systems

143
00:05:01,120 --> 00:05:04,240
we just want to use them as as examples

144
00:05:04,240 --> 00:05:06,240
and these are actually very impactful

145
00:05:06,240 --> 00:05:08,560
and very good papers

146
00:05:08,560 --> 00:05:10,560
and they have many positive properties

147
00:05:10,560 --> 00:05:12,639
uh for example they have

148
00:05:12,639 --> 00:05:14,880
open source implementations both for

149
00:05:14,880 --> 00:05:17,120
their code and then for their deductive

150
00:05:17,120 --> 00:05:18,080
proofs

151
00:05:18,080 --> 00:05:19,600
uh and they also have very precise

152
00:05:19,600 --> 00:05:21,120
security claims in the paper all of

153
00:05:21,120 --> 00:05:22,080
which

154
00:05:22,080 --> 00:05:24,320
helps our analysis and makes it easier

155
00:05:24,320 --> 00:05:25,600
to find

156
00:05:25,600 --> 00:05:28,000
problems with them

157
00:05:28,000 --> 00:05:30,160
so what are the systems uh the first one

158
00:05:30,160 --> 00:05:33,280
is cengus which is a trusted execution

159
00:05:33,280 --> 00:05:35,120
environment

160
00:05:35,120 --> 00:05:36,720
which means that

161
00:05:36,720 --> 00:05:40,080
it enables the creation of uh

162
00:05:40,080 --> 00:05:42,800
so-called enclaves which are uh

163
00:05:42,800 --> 00:05:44,560
programs that are allowed to run in an

164
00:05:44,560 --> 00:05:46,240
isolated environment

165
00:05:46,240 --> 00:05:47,919
they are isolated from the rest of the

166
00:05:47,919 --> 00:05:49,600
software running on the system including

167
00:05:49,600 --> 00:05:52,560
the operating system

168
00:05:52,560 --> 00:05:53,440
and

169
00:05:53,440 --> 00:05:55,280
this trusted execution environment

170
00:05:55,280 --> 00:05:57,360
cenkus has recently been

171
00:05:57,360 --> 00:06:01,120
extended with interrupt mechanism

172
00:06:01,120 --> 00:06:02,880
this is what i represent with the little

173
00:06:02,880 --> 00:06:06,639
pause icon next to the attacker

174
00:06:06,639 --> 00:06:08,560
and this extension we're going to call

175
00:06:08,560 --> 00:06:10,639
cenkusv from now on

176
00:06:10,639 --> 00:06:12,720
and not only has it been extended with

177
00:06:12,720 --> 00:06:14,880
this interrupt functionality but it also

178
00:06:14,880 --> 00:06:17,520
comes with a formal proof that proves

179
00:06:17,520 --> 00:06:19,039
that this

180
00:06:19,039 --> 00:06:21,039
interrupt extension doesn't

181
00:06:21,039 --> 00:06:23,039
introduce any additional vulnerabilities

182
00:06:23,039 --> 00:06:24,720
to the system

183
00:06:24,720 --> 00:06:27,440
this is a pen and paper proof

184
00:06:27,440 --> 00:06:28,960
that works on

185
00:06:28,960 --> 00:06:30,400
on a model that's built on the

186
00:06:30,400 --> 00:06:33,039
operational semantics of

187
00:06:33,039 --> 00:06:37,680
of the hardware of of the implementation

188
00:06:38,240 --> 00:06:40,560
so what what do i mean exactly by secure

189
00:06:40,560 --> 00:06:42,880
interrupt handling uh

190
00:06:42,880 --> 00:06:44,160
so let's

191
00:06:44,160 --> 00:06:46,400
if if we take two enclaves so two of

192
00:06:46,400 --> 00:06:49,520
these isolated programs

193
00:06:49,520 --> 00:06:51,919
if we have two enclaves that cannot be

194
00:06:51,919 --> 00:06:55,039
differentiated with by an attacker

195
00:06:55,039 --> 00:06:57,360
regardless of so the attacker can run

196
00:06:57,360 --> 00:06:59,759
these enclaves simultaneously they can

197
00:06:59,759 --> 00:07:01,599
provide different inputs observe all the

198
00:07:01,599 --> 00:07:03,759
outputs all the side effects

199
00:07:03,759 --> 00:07:06,560
if the two enclaves appear identical to

200
00:07:06,560 --> 00:07:07,919
the attacker

201
00:07:07,919 --> 00:07:08,800
then

202
00:07:08,800 --> 00:07:11,120
the security property is even after the

203
00:07:11,120 --> 00:07:12,880
addition of

204
00:07:12,880 --> 00:07:14,800
interrupts to the system which provides

205
00:07:14,800 --> 00:07:17,120
this additional dimension of leakage

206
00:07:17,120 --> 00:07:19,280
which are represented with the the red

207
00:07:19,280 --> 00:07:21,520
bars above the enclaves

208
00:07:21,520 --> 00:07:23,440
these two enclaves should still remain

209
00:07:23,440 --> 00:07:25,280
indistinguishable

210
00:07:25,280 --> 00:07:27,919
so so this is the security property

211
00:07:27,919 --> 00:07:29,919
basically interrupts don't add

212
00:07:29,919 --> 00:07:31,199
additional

213
00:07:31,199 --> 00:07:34,240
leakage to the system

214
00:07:34,240 --> 00:07:36,479
then the other system is raised which is

215
00:07:36,479 --> 00:07:39,039
a remote attestation architecture

216
00:07:39,039 --> 00:07:41,280
remote attestation means that it enables

217
00:07:41,280 --> 00:07:43,759
a third party to verify the integrity of

218
00:07:43,759 --> 00:07:47,360
the software that runs on the system

219
00:07:47,360 --> 00:07:49,919
and it

220
00:07:50,240 --> 00:07:52,639
it implements this uh this secure remote

221
00:07:52,639 --> 00:07:54,400
destination protocol

222
00:07:54,400 --> 00:07:57,520
using a hardware software code design

223
00:07:57,520 --> 00:08:00,080
where there's a software module which is

224
00:08:00,080 --> 00:08:04,080
built on an hmac function hmac function

225
00:08:04,080 --> 00:08:06,479
from the hecklestar formally verified

226
00:08:06,479 --> 00:08:08,879
the crypto library

227
00:08:08,879 --> 00:08:09,759
and

228
00:08:09,759 --> 00:08:11,440
there's a hardware

229
00:08:11,440 --> 00:08:13,759
module called hw mod which is

230
00:08:13,759 --> 00:08:15,919
implemented from from the ground up by

231
00:08:15,919 --> 00:08:17,930
the authors of phrase

232
00:08:17,930 --> 00:08:19,440
[Music]

233
00:08:19,440 --> 00:08:22,879
which performs the access control

234
00:08:22,879 --> 00:08:25,120
and interestingly the formal model of

235
00:08:25,120 --> 00:08:28,000
this hw mod is directly extracted from

236
00:08:28,000 --> 00:08:30,319
verilog it's it's machine extracted from

237
00:08:30,319 --> 00:08:32,320
the verilog

238
00:08:32,320 --> 00:08:34,479
so this is a state machine

239
00:08:34,479 --> 00:08:37,120
and the properties of the system are

240
00:08:37,120 --> 00:08:41,839
proven on this extracted state machine

241
00:08:41,839 --> 00:08:44,959
so what did we do with these systems

242
00:08:44,959 --> 00:08:46,560
i mentioned that

243
00:08:46,560 --> 00:08:49,360
these implementations when we're talking

244
00:08:49,360 --> 00:08:51,360
about the security guarantees of an

245
00:08:51,360 --> 00:08:53,440
implementation with regards to its

246
00:08:53,440 --> 00:08:55,360
deductive model

247
00:08:55,360 --> 00:08:57,040
it always has to rely on certain

248
00:08:57,040 --> 00:08:58,160
assumptions

249
00:08:58,160 --> 00:09:00,640
uh that we can either prove or disprove

250
00:09:00,640 --> 00:09:01,839
uh

251
00:09:01,839 --> 00:09:05,279
well not proof or disrupt but

252
00:09:05,279 --> 00:09:07,360
we can try to validate them in the

253
00:09:07,360 --> 00:09:09,440
actual implementation by using these

254
00:09:09,440 --> 00:09:12,240
inductive methods

255
00:09:12,480 --> 00:09:14,240
so what we do is we look at all the

256
00:09:14,240 --> 00:09:16,320
assumptions that are made for these two

257
00:09:16,320 --> 00:09:18,720
systems

258
00:09:19,200 --> 00:09:20,399
and

259
00:09:20,399 --> 00:09:22,720
both both explicit assumptions and

260
00:09:22,720 --> 00:09:25,519
implicit assumptions uh we can get

261
00:09:25,519 --> 00:09:27,200
implicit assumptions by looking at the

262
00:09:27,200 --> 00:09:30,000
code and by looking at the the proofs

263
00:09:30,000 --> 00:09:31,839
uh and then we actually validate the

264
00:09:31,839 --> 00:09:33,920
implementation to see whether these

265
00:09:33,920 --> 00:09:36,800
assumptions hold up or or do not hold up

266
00:09:36,800 --> 00:09:40,000
in the actual implementation

267
00:09:40,720 --> 00:09:42,080
we also

268
00:09:42,080 --> 00:09:44,240
look at the attacker capabilities that

269
00:09:44,240 --> 00:09:46,640
are present in the implementation itself

270
00:09:46,640 --> 00:09:48,560
and the formal model and see if there

271
00:09:48,560 --> 00:09:51,360
are any discrepancies between the two

272
00:09:51,360 --> 00:09:53,120
and finally we also check the less

273
00:09:53,120 --> 00:09:56,399
rigorous parts of the proofs

274
00:09:56,399 --> 00:09:57,120
so

275
00:09:57,120 --> 00:09:58,320
all this

276
00:09:58,320 --> 00:09:59,920
inductive research

277
00:09:59,920 --> 00:10:02,160
has led to

278
00:10:02,160 --> 00:10:04,480
around 20 assumptions that we found to

279
00:10:04,480 --> 00:10:05,440
be

280
00:10:05,440 --> 00:10:08,720
unsatisfied in the two implementations

281
00:10:08,720 --> 00:10:10,800
from which we

282
00:10:10,800 --> 00:10:13,519
created 17 attacks

283
00:10:13,519 --> 00:10:14,560
and these

284
00:10:14,560 --> 00:10:15,680
attacks

285
00:10:15,680 --> 00:10:17,839
we classified into three categories

286
00:10:17,839 --> 00:10:19,760
implementation model mismatches missing

287
00:10:19,760 --> 00:10:21,680
attacker capabilities and deductive

288
00:10:21,680 --> 00:10:22,959
errors

289
00:10:22,959 --> 00:10:24,480
and i'm going to briefly talk about the

290
00:10:24,480 --> 00:10:27,200
first two categories

291
00:10:27,200 --> 00:10:29,760
so the implementation model mismatches

292
00:10:29,760 --> 00:10:32,079
these are attacks that can be performed

293
00:10:32,079 --> 00:10:34,240
in on the implementation itself

294
00:10:34,240 --> 00:10:36,160
and they can also be represented on in

295
00:10:36,160 --> 00:10:39,120
the formal model but there they fail so

296
00:10:39,120 --> 00:10:40,640
this means that there's some kind of

297
00:10:40,640 --> 00:10:42,800
discrepancy between the implementation

298
00:10:42,800 --> 00:10:45,359
and the model

299
00:10:45,519 --> 00:10:47,279
and if you look at these two tables that

300
00:10:47,279 --> 00:10:50,480
lists these uh bugs in the two systems

301
00:10:50,480 --> 00:10:53,440
you can see that there's a lot more uh

302
00:10:53,440 --> 00:10:55,440
of these types of uh

303
00:10:55,440 --> 00:10:58,000
vulnerabilities in senkos than in raised

304
00:10:58,000 --> 00:10:59,440
but i'm going to show you an example

305
00:10:59,440 --> 00:11:01,839
from raised

306
00:11:02,160 --> 00:11:03,680
so for example

307
00:11:03,680 --> 00:11:05,920
they have as i mentioned they have this

308
00:11:05,920 --> 00:11:07,360
hw mod

309
00:11:07,360 --> 00:11:09,279
this hardware module that it does the

310
00:11:09,279 --> 00:11:10,880
access control which is connected to the

311
00:11:10,880 --> 00:11:12,399
cpu

312
00:11:12,399 --> 00:11:14,480
and one of the signals that it monitors

313
00:11:14,480 --> 00:11:15,760
is the

314
00:11:15,760 --> 00:11:18,800
direct memory access address so

315
00:11:18,800 --> 00:11:20,720
peripherals can perform direct memory

316
00:11:20,720 --> 00:11:23,760
access in these systems

317
00:11:23,760 --> 00:11:26,240
and in order to prevent the key from

318
00:11:26,240 --> 00:11:28,240
being read out with these direct memory

319
00:11:28,240 --> 00:11:29,839
access requests

320
00:11:29,839 --> 00:11:33,040
hw mode monitors this dma address signal

321
00:11:33,040 --> 00:11:34,560
but it turns out that in the actual

322
00:11:34,560 --> 00:11:36,800
implementation the signal was connected

323
00:11:36,800 --> 00:11:38,079
incorrectly

324
00:11:38,079 --> 00:11:40,000
it was shifted by one bit which it

325
00:11:40,000 --> 00:11:42,240
shouldn't have been because this way the

326
00:11:42,240 --> 00:11:44,000
the access control doesn't work properly

327
00:11:44,000 --> 00:11:46,160
and it's possible to read out the key

328
00:11:46,160 --> 00:11:49,200
that is used for the attestation

329
00:11:49,200 --> 00:11:52,160
just by simply issuing a dma request

330
00:11:52,160 --> 00:11:54,959
at this position

331
00:11:55,040 --> 00:11:57,120
um but

332
00:11:57,120 --> 00:11:59,279
as i said we we found a lot more of

333
00:11:59,279 --> 00:12:02,320
these in sengus uh and this is largely

334
00:12:02,320 --> 00:12:04,160
thanks to the fact that reyes uses this

335
00:12:04,160 --> 00:12:06,160
automatic extraction of the model from

336
00:12:06,160 --> 00:12:08,480
the implementation from the code

337
00:12:08,480 --> 00:12:11,440
and this leads to much fewer mismatches

338
00:12:11,440 --> 00:12:13,200
so in line with this the the guideline

339
00:12:13,200 --> 00:12:14,720
that we propose

340
00:12:14,720 --> 00:12:16,959
is to maintain this very systematic

341
00:12:16,959 --> 00:12:18,160
close connection between the

342
00:12:18,160 --> 00:12:20,240
implementation and the model so this can

343
00:12:20,240 --> 00:12:22,240
be done either as they do it in phrase

344
00:12:22,240 --> 00:12:23,600
by deriving the model from the

345
00:12:23,600 --> 00:12:25,680
implementation you can also do it the

346
00:12:25,680 --> 00:12:27,040
other way around by deriving the

347
00:12:27,040 --> 00:12:29,200
implementation from the model

348
00:12:29,200 --> 00:12:30,480
this is

349
00:12:30,480 --> 00:12:34,560
how for example heckles star works

350
00:12:34,560 --> 00:12:36,399
or you can also do systematic testing

351
00:12:36,399 --> 00:12:37,760
where you

352
00:12:37,760 --> 00:12:39,519
execute the implementation and the model

353
00:12:39,519 --> 00:12:41,760
simultaneously with the same inputs and

354
00:12:41,760 --> 00:12:43,600
see whether they behave the same way and

355
00:12:43,600 --> 00:12:45,279
you can combine this with fuzzing for

356
00:12:45,279 --> 00:12:47,680
example

357
00:12:48,800 --> 00:12:50,720
so the previous category implementation

358
00:12:50,720 --> 00:12:53,120
model mismatches while they lead to very

359
00:12:53,120 --> 00:12:55,200
serious vulnerabilities

360
00:12:55,200 --> 00:12:58,160
they are usually quite simple

361
00:12:58,160 --> 00:13:00,800
mistakes that can be fixed

362
00:13:00,800 --> 00:13:02,079
but the

363
00:13:02,079 --> 00:13:04,480
attacks that arise as a result of

364
00:13:04,480 --> 00:13:07,360
unmodeled attacker capabilities

365
00:13:07,360 --> 00:13:09,440
these are usually more complicated more

366
00:13:09,440 --> 00:13:10,800
innovative

367
00:13:10,800 --> 00:13:12,480
and they're also more difficult to find

368
00:13:12,480 --> 00:13:14,160
because they require

369
00:13:14,160 --> 00:13:16,000
expert knowledge on on the target

370
00:13:16,000 --> 00:13:17,600
systems

371
00:13:17,600 --> 00:13:21,040
and on the the models

372
00:13:21,040 --> 00:13:22,560
and as a result they're also more

373
00:13:22,560 --> 00:13:24,480
difficult to fix

374
00:13:24,480 --> 00:13:27,519
i can show you one quick example

375
00:13:27,519 --> 00:13:29,440
we discovered a novel side channel

376
00:13:29,440 --> 00:13:32,720
attack that also uses these dma requests

377
00:13:32,720 --> 00:13:34,560
and that is applicable to both of these

378
00:13:34,560 --> 00:13:36,800
systems

379
00:13:36,800 --> 00:13:38,639
so this this side channel arises from

380
00:13:38,639 --> 00:13:40,800
the fact that the peripheral that uses

381
00:13:40,800 --> 00:13:43,760
dma and the cpu itself are connected to

382
00:13:43,760 --> 00:13:46,720
the memory through a shared memory bus

383
00:13:46,720 --> 00:13:49,680
which leads to a convention here

384
00:13:49,680 --> 00:13:52,320
and this contention can translate to a

385
00:13:52,320 --> 00:13:54,959
timing difference based on whether the

386
00:13:54,959 --> 00:13:57,360
cpu or the dma are accessing the memory

387
00:13:57,360 --> 00:13:59,600
at the same time

388
00:13:59,600 --> 00:14:00,959
and this actually leads to a very

389
00:14:00,959 --> 00:14:03,040
fine-grained cycle accurate side channel

390
00:14:03,040 --> 00:14:06,480
on on these specific systems

391
00:14:06,720 --> 00:14:08,320
and how does this actually break the

392
00:14:08,320 --> 00:14:10,480
security property well for example in

393
00:14:10,480 --> 00:14:13,680
cenkus we can have these modules that i

394
00:14:13,680 --> 00:14:15,760
that i talked about so we have these two

395
00:14:15,760 --> 00:14:17,519
enclaves and it's possible to have two

396
00:14:17,519 --> 00:14:18,639
enclaves

397
00:14:18,639 --> 00:14:20,959
that are indistinguishable if we only

398
00:14:20,959 --> 00:14:22,160
take

399
00:14:22,160 --> 00:14:24,399
the leakage that is provided by the the

400
00:14:24,399 --> 00:14:26,160
interrupts they are also

401
00:14:26,160 --> 00:14:28,160
indistinguishable if we provide the

402
00:14:28,160 --> 00:14:29,199
leakage

403
00:14:29,199 --> 00:14:30,480
if you look at the leakage that is

404
00:14:30,480 --> 00:14:33,839
provided by the dma side channel alone

405
00:14:33,839 --> 00:14:35,199
but it turns out

406
00:14:35,199 --> 00:14:36,880
that if we combine the measurements

407
00:14:36,880 --> 00:14:39,920
taken with interrupts and with dma

408
00:14:39,920 --> 00:14:42,399
that actually influences what the dma

409
00:14:42,399 --> 00:14:44,480
satchel leaks and that allows an

410
00:14:44,480 --> 00:14:45,760
attacker to

411
00:14:45,760 --> 00:14:48,079
differentiate these two enclaves that

412
00:14:48,079 --> 00:14:52,319
should not be able to be differentiated

413
00:14:54,079 --> 00:14:56,000
because these attacks are a lot more

414
00:14:56,000 --> 00:14:57,279
diverse and

415
00:14:57,279 --> 00:14:58,480
more complicated

416
00:14:58,480 --> 00:15:00,639
there's of course no silver bullet for

417
00:15:00,639 --> 00:15:03,440
for finding all of them

418
00:15:03,440 --> 00:15:06,560
but we can provide some heuristics

419
00:15:06,560 --> 00:15:08,880
for example it makes sense to study the

420
00:15:08,880 --> 00:15:10,880
relevant edtech literature when

421
00:15:10,880 --> 00:15:12,959
constructing these systems because for

422
00:15:12,959 --> 00:15:14,320
example some of the attacks we found

423
00:15:14,320 --> 00:15:16,720
were simple timing side channel attacks

424
00:15:16,720 --> 00:15:18,959
or interrupt latency attacks that have

425
00:15:18,959 --> 00:15:21,360
been covered in the literature and could

426
00:15:21,360 --> 00:15:22,880
have been caught

427
00:15:22,880 --> 00:15:23,680
if

428
00:15:23,680 --> 00:15:25,360
they had specifically tested for them in

429
00:15:25,360 --> 00:15:27,279
these systems

430
00:15:27,279 --> 00:15:28,880
it also makes sense to

431
00:15:28,880 --> 00:15:31,440
instead of modeling complete attacks as

432
00:15:31,440 --> 00:15:32,399
one

433
00:15:32,399 --> 00:15:35,360
attack primitive or as one interaction

434
00:15:35,360 --> 00:15:37,440
it's better to model

435
00:15:37,440 --> 00:15:39,600
basic attacker capabilities

436
00:15:39,600 --> 00:15:42,720
and a way of composing them because this

437
00:15:42,720 --> 00:15:45,120
way it enables for more flexibility and

438
00:15:45,120 --> 00:15:46,720
you could possibly even discover new

439
00:15:46,720 --> 00:15:48,880
attacks

440
00:15:48,880 --> 00:15:50,800
and it's also very useful to audit the

441
00:15:50,800 --> 00:15:53,199
interfaces between different components

442
00:15:53,199 --> 00:15:55,920
especially if those components lie on

443
00:15:55,920 --> 00:15:57,279
verify

444
00:15:57,279 --> 00:16:00,399
verification or trust boundaries

445
00:16:00,399 --> 00:16:02,240
because i would say the majority of the

446
00:16:02,240 --> 00:16:04,639
attacks we found can be described as an

447
00:16:04,639 --> 00:16:06,639
interaction between one of these

448
00:16:06,639 --> 00:16:09,360
boundaries

449
00:16:09,360 --> 00:16:11,279
and with that i arrived at the end of my

450
00:16:11,279 --> 00:16:12,160
talk

451
00:16:12,160 --> 00:16:14,079
i would invite everyone to check out our

452
00:16:14,079 --> 00:16:16,399
github repository where you can find all

453
00:16:16,399 --> 00:16:17,600
of the attacks

454
00:16:17,600 --> 00:16:19,600
that we described in the paper you can

455
00:16:19,600 --> 00:16:20,959
actually see them running in a

456
00:16:20,959 --> 00:16:23,519
continuous integration environment

457
00:16:23,519 --> 00:16:25,279
and if you're interested in more details

458
00:16:25,279 --> 00:16:27,440
about the attacks or

459
00:16:27,440 --> 00:16:29,600
about the rest of the paper i also have

460
00:16:29,600 --> 00:16:32,160
a link for that on the slide

461
00:16:32,160 --> 00:16:34,160
and if you have any questions after this

462
00:16:34,160 --> 00:16:36,320
session or just want to chat about this

463
00:16:36,320 --> 00:16:37,360
paper

464
00:16:37,360 --> 00:16:40,560
feel free to drop me a line on my email

465
00:16:40,560 --> 00:16:42,880
thanks

466
00:16:44,970 --> 00:16:47,839
[Applause]

467
00:16:47,839 --> 00:16:51,839
you have time for one question

468
00:16:52,079 --> 00:16:53,839
okay so i'm surprised by the

469
00:16:53,839 --> 00:16:56,560
implementation mistakes um are they were

470
00:16:56,560 --> 00:16:59,199
they extremely subtle or were they

471
00:16:59,199 --> 00:17:01,680
caused by designers saying it's provably

472
00:17:01,680 --> 00:17:03,120
it's been proved correct so we don't

473
00:17:03,120 --> 00:17:05,199
need to do as much functional testing as

474
00:17:05,199 --> 00:17:06,720
we usually do

475
00:17:06,720 --> 00:17:08,400
um

476
00:17:08,400 --> 00:17:10,000
sorry do you mean some mistake in

477
00:17:10,000 --> 00:17:12,160
specific or just in general in general

478
00:17:12,160 --> 00:17:14,240
for the implementation implementation

479
00:17:14,240 --> 00:17:16,079
mistakes that you found

480
00:17:16,079 --> 00:17:18,400
well obviously i cannot speak in names

481
00:17:18,400 --> 00:17:21,119
of the developers of these systems

482
00:17:21,119 --> 00:17:23,599
but i think it's very possible that uh

483
00:17:23,599 --> 00:17:27,599
we take formal verification as as

484
00:17:27,599 --> 00:17:29,600
yeah as a silver bullet so we think that

485
00:17:29,600 --> 00:17:31,760
if the for if the system has has been

486
00:17:31,760 --> 00:17:35,039
formally verified then maybe we we can

487
00:17:35,039 --> 00:17:37,120
afford to be less rigorous with

488
00:17:37,120 --> 00:17:39,520
empirical testing on these systems

489
00:17:39,520 --> 00:17:41,360
um

490
00:17:41,360 --> 00:17:43,919
at least this is the impression i have

491
00:17:43,919 --> 00:17:45,520
and i think in our paper we show that

492
00:17:45,520 --> 00:17:47,600
this is not the case so we should still

493
00:17:47,600 --> 00:17:50,639
try to combine the two

494
00:17:51,039 --> 00:17:53,039
okay thank you

495
00:17:53,039 --> 00:17:56,950
thank you for the great talk

496
00:17:56,950 --> 00:18:00,819
[Applause]

