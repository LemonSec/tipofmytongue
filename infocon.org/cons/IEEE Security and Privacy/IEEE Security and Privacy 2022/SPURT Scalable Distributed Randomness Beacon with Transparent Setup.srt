1
00:00:00,399 --> 00:00:02,159
welcome

2
00:00:02,159 --> 00:00:04,560
hi thanks thanks for the introduction i

3
00:00:04,560 --> 00:00:07,440
am sarov i'll talk about scalable

4
00:00:07,440 --> 00:00:09,200
distributed randomness beacon this is a

5
00:00:09,200 --> 00:00:11,120
joint work with vinith irene and my

6
00:00:11,120 --> 00:00:12,639
advisor ling

7
00:00:12,639 --> 00:00:15,440
so let's get started

8
00:00:15,440 --> 00:00:17,680
so a randomness beacon is uh

9
00:00:17,680 --> 00:00:19,039
can be defined as this ideal

10
00:00:19,039 --> 00:00:21,600
functionality that has a clock in it and

11
00:00:21,600 --> 00:00:23,840
what it what this functionality does it

12
00:00:23,840 --> 00:00:26,400
outputs fresh random string to the

13
00:00:26,400 --> 00:00:28,080
clients after every certain time

14
00:00:28,080 --> 00:00:30,640
interval this is how it will look and in

15
00:00:30,640 --> 00:00:32,320
distributed randomness beacon we want to

16
00:00:32,320 --> 00:00:35,600
replace this ideal functionality with a

17
00:00:35,600 --> 00:00:37,360
distributed protocol so that we get

18
00:00:37,360 --> 00:00:38,960
fault tolerance and all those kind of

19
00:00:38,960 --> 00:00:41,040
things we can formalize the properties

20
00:00:41,040 --> 00:00:42,320
that we want

21
00:00:42,320 --> 00:00:44,800
as we want unpredictability that says

22
00:00:44,800 --> 00:00:46,399
the future random output should be

23
00:00:46,399 --> 00:00:48,079
unpredictable to the adversary even if

24
00:00:48,079 --> 00:00:50,480
it corrupts a fraction of the nodes

25
00:00:50,480 --> 00:00:52,000
the beacon output should be bias

26
00:00:52,000 --> 00:00:53,840
resistant so such that the output should

27
00:00:53,840 --> 00:00:56,480
be uniformly random and the protocol

28
00:00:56,480 --> 00:00:59,039
should always produce fresh outputs

29
00:00:59,039 --> 00:01:00,800
and the output should be publicly

30
00:01:00,800 --> 00:01:03,280
verifiable by any other users who who is

31
00:01:03,280 --> 00:01:05,040
not part of the weekend generation

32
00:01:05,040 --> 00:01:06,960
protocol

33
00:01:06,960 --> 00:01:09,520
so why do we need randomness beaker this

34
00:01:09,520 --> 00:01:11,520
has many applications in consensus and

35
00:01:11,520 --> 00:01:13,040
blockchain protocols

36
00:01:13,040 --> 00:01:14,799
it has applications since auditable

37
00:01:14,799 --> 00:01:16,640
auctions and also lottery

38
00:01:16,640 --> 00:01:18,799
anonymous communication bootstrapping

39
00:01:18,799 --> 00:01:21,360
cryptographic protocols etc

40
00:01:21,360 --> 00:01:23,520
so this is our system model

41
00:01:23,520 --> 00:01:25,840
we work in partially synchronous network

42
00:01:25,840 --> 00:01:27,439
that means networks which are sometimes

43
00:01:27,439 --> 00:01:29,280
synchronous sometimes is asynchronous

44
00:01:29,280 --> 00:01:31,200
that's one way of thinking about it

45
00:01:31,200 --> 00:01:33,759
we operate in n equal to 3t plus 1 where

46
00:01:33,759 --> 00:01:36,000
n is the total number of nodes and t is

47
00:01:36,000 --> 00:01:38,560
the maximum number of faulty nodes

48
00:01:38,560 --> 00:01:40,799
we also only require a transparency term

49
00:01:40,799 --> 00:01:43,119
or a common random string and we only

50
00:01:43,119 --> 00:01:46,479
assume public key infrastructure

51
00:01:46,799 --> 00:01:48,640
this is the

52
00:01:48,640 --> 00:01:50,560
this has the randomness beacon has been

53
00:01:50,560 --> 00:01:52,399
looked in for a while and it has a lot

54
00:01:52,399 --> 00:01:54,320
of work so we only summarize few of

55
00:01:54,320 --> 00:01:56,880
those so here we

56
00:01:56,880 --> 00:01:58,159
only look at

57
00:01:58,159 --> 00:02:00,960
cks 05 which is asynchronous randomness

58
00:02:00,960 --> 00:02:02,560
beacon protocol that has lots of good

59
00:02:02,560 --> 00:02:04,320
properties like optimal fault tolerance

60
00:02:04,320 --> 00:02:06,240
has communication cost of kappa n square

61
00:02:06,240 --> 00:02:08,239
where kappa is the security parameter

62
00:02:08,239 --> 00:02:10,479
but the downside of this protocol is

63
00:02:10,479 --> 00:02:12,480
this requires a trusted setup

64
00:02:12,480 --> 00:02:14,879
we have other protocols such as scrape

65
00:02:14,879 --> 00:02:16,720
which also which are in synchrony but

66
00:02:16,720 --> 00:02:19,280
they have very high communication cost

67
00:02:19,280 --> 00:02:21,599
we have hydrant that that has a better

68
00:02:21,599 --> 00:02:24,160
communication cost but it gives up on

69
00:02:24,160 --> 00:02:26,560
unpredictability property

70
00:02:26,560 --> 00:02:29,360
very decent work but beer and piper also

71
00:02:29,360 --> 00:02:31,200
achieves randomness beacon but they have

72
00:02:31,200 --> 00:02:34,000
high communication cost as well so this

73
00:02:34,000 --> 00:02:36,480
is our result so in this paper we give a

74
00:02:36,480 --> 00:02:37,840
partially synchronous distributed

75
00:02:37,840 --> 00:02:40,319
randomness beacon that that is that

76
00:02:40,319 --> 00:02:42,560
tolerates up to one third failure and

77
00:02:42,560 --> 00:02:44,560
has communication cost of kappa n square

78
00:02:44,560 --> 00:02:46,879
and competition cost order n so this

79
00:02:46,879 --> 00:02:49,239
matches in terms of performance the

80
00:02:49,239 --> 00:02:51,120
cks05

81
00:02:51,120 --> 00:02:51,920
but

82
00:02:51,920 --> 00:02:53,920
and only requires common random string

83
00:02:53,920 --> 00:02:56,879
and public key infrastructure

84
00:02:56,879 --> 00:02:58,480
there are four key techniques that gives

85
00:02:58,480 --> 00:02:59,760
us our result

86
00:02:59,760 --> 00:03:01,599
one is the new publicly verifiable

87
00:03:01,599 --> 00:03:03,040
secret sharing scheme

88
00:03:03,040 --> 00:03:04,640
the second is a new aggregation

89
00:03:04,640 --> 00:03:06,879
verification mechanism third is

90
00:03:06,879 --> 00:03:08,800
something we call simultaneous decision

91
00:03:08,800 --> 00:03:10,720
state machine replication and fourth is

92
00:03:10,720 --> 00:03:12,640
a two two run beacon output

93
00:03:12,640 --> 00:03:14,400
reconstruction protocol i'll briefly

94
00:03:14,400 --> 00:03:17,120
touch upon these things

95
00:03:17,120 --> 00:03:18,800
but before i start i want to give some

96
00:03:18,800 --> 00:03:22,080
brief background on the tools i use one

97
00:03:22,080 --> 00:03:25,200
of the tools i i use in this paper is

98
00:03:25,200 --> 00:03:26,720
called threshold secret sharing i'm sure

99
00:03:26,720 --> 00:03:28,319
many of you are already familiar with

100
00:03:28,319 --> 00:03:30,959
this but let's just recap briefly so

101
00:03:30,959 --> 00:03:33,200
this is a protocol to secret share a

102
00:03:33,200 --> 00:03:36,000
secret z among n nodes such that any

103
00:03:36,000 --> 00:03:38,400
subset of t plus one or more nodes can

104
00:03:38,400 --> 00:03:40,319
recover the secret or use the secret to

105
00:03:40,319 --> 00:03:42,319
do something but

106
00:03:42,319 --> 00:03:44,640
a subset of t or less than less nodes

107
00:03:44,640 --> 00:03:46,879
cannot learn anything about the secret

108
00:03:46,879 --> 00:03:47,920
so

109
00:03:47,920 --> 00:03:49,760
pictorially this is what it looks like

110
00:03:49,760 --> 00:03:52,080
we have a dealer that has a secret z and

111
00:03:52,080 --> 00:03:53,920
then it wants to share a secret so that

112
00:03:53,920 --> 00:03:57,599
everybody outputs a share z1 g2 z3 to g5

113
00:03:57,599 --> 00:03:59,920
so one of the classic example of

114
00:03:59,920 --> 00:04:01,599
threshold secret sharing is the xiaomi's

115
00:04:01,599 --> 00:04:03,599
liquid sharing where you embed the

116
00:04:03,599 --> 00:04:06,879
secret into a polynomial evaluation at

117
00:04:06,879 --> 00:04:08,879
zero where the rest of the coefficients

118
00:04:08,879 --> 00:04:10,879
of the polynomials are random and the

119
00:04:10,879 --> 00:04:13,680
share of each party is a evaluation

120
00:04:13,680 --> 00:04:14,400
point

121
00:04:14,400 --> 00:04:16,720
and it's easy to see that if you pick a

122
00:04:16,720 --> 00:04:19,358
degree t polynomial then any t plus one

123
00:04:19,358 --> 00:04:21,839
or more points will uniquely define the

124
00:04:21,839 --> 00:04:23,759
polynomial and you can get recover the

125
00:04:23,759 --> 00:04:26,240
secret

126
00:04:26,639 --> 00:04:28,160
so in this paper we need something

127
00:04:28,160 --> 00:04:30,479
stronger which we call which is known as

128
00:04:30,479 --> 00:04:32,560
verifiable secret sharing where the idea

129
00:04:32,560 --> 00:04:34,479
is we want to do threshold sql sharing

130
00:04:34,479 --> 00:04:36,479
in a setting where the dealer could be

131
00:04:36,479 --> 00:04:38,400
malicious and also a subset of nodes

132
00:04:38,400 --> 00:04:41,040
could be malicious as well

133
00:04:41,040 --> 00:04:43,280
we need slightly stronger primitive

134
00:04:43,280 --> 00:04:45,440
which we call publicly verifiable secret

135
00:04:45,440 --> 00:04:48,080
sharing scheme which is

136
00:04:48,080 --> 00:04:49,440
verified basically sharing scheme with

137
00:04:49,440 --> 00:04:51,280
some extra stuffs

138
00:04:51,280 --> 00:04:52,880
so this is what it looks like this is

139
00:04:52,880 --> 00:04:54,240
what we want

140
00:04:54,240 --> 00:04:56,880
and i just want to describe what pvss is

141
00:04:56,880 --> 00:04:59,280
so previous has this function locally

142
00:04:59,280 --> 00:05:02,320
computable function which is pbs.share

143
00:05:02,320 --> 00:05:04,800
which takes in a random secret and it

144
00:05:04,800 --> 00:05:06,800
outputs three things three vectors the

145
00:05:06,800 --> 00:05:08,400
first vector is a commitment vector

146
00:05:08,400 --> 00:05:10,000
second is encryption vector and the

147
00:05:10,000 --> 00:05:12,160
third is proof vector which which are

148
00:05:12,160 --> 00:05:15,520
non-interactive your knowledge proofs

149
00:05:15,520 --> 00:05:18,400
such that if the dealer broadcast the

150
00:05:18,400 --> 00:05:20,880
this three tuple vc and pi

151
00:05:20,880 --> 00:05:23,520
then everybody can check that the dealer

152
00:05:23,520 --> 00:05:26,080
did the pbs sharing correctly and each

153
00:05:26,080 --> 00:05:28,160
party can also locally recover their

154
00:05:28,160 --> 00:05:30,240
secret

155
00:05:30,240 --> 00:05:32,479
so we'll use previouses in our

156
00:05:32,479 --> 00:05:34,000
construction

157
00:05:34,000 --> 00:05:35,280
another

158
00:05:35,280 --> 00:05:36,880
tool we need is state machine

159
00:05:36,880 --> 00:05:39,120
replication so this is you can think of

160
00:05:39,120 --> 00:05:40,960
this as block chains

161
00:05:40,960 --> 00:05:43,120
that's the modern name of statement

162
00:05:43,120 --> 00:05:45,600
state machine replication so

163
00:05:45,600 --> 00:05:47,039
it is analogous to a partially

164
00:05:47,039 --> 00:05:49,199
synchronous broadcast protocol there are

165
00:05:49,199 --> 00:05:51,120
some subtle differences but you can

166
00:05:51,120 --> 00:05:52,880
think of that as a like a broadcast

167
00:05:52,880 --> 00:05:55,759
protocol in partial synchronous setting

168
00:05:55,759 --> 00:05:58,639
so we will only review the epoch based

169
00:05:58,639 --> 00:06:00,400
state mission replication protocol where

170
00:06:00,400 --> 00:06:03,440
each every park has a leader so i have a

171
00:06:03,440 --> 00:06:05,840
brief i'll briefly review what how smrs

172
00:06:05,840 --> 00:06:07,680
typically work

173
00:06:07,680 --> 00:06:09,360
so we have four nodes where the first

174
00:06:09,360 --> 00:06:11,520
node is the leader and let's say fourth

175
00:06:11,520 --> 00:06:13,440
node is a malicious node

176
00:06:13,440 --> 00:06:14,960
then

177
00:06:14,960 --> 00:06:16,800
in each epoch let's say the ayat epoch

178
00:06:16,800 --> 00:06:19,680
the leader will propose a new block bi

179
00:06:19,680 --> 00:06:22,479
and then the nodes will participate in

180
00:06:22,479 --> 00:06:24,240
some kind of voting this voting could be

181
00:06:24,240 --> 00:06:26,400
multiple rounds as well such that at the

182
00:06:26,400 --> 00:06:27,759
end of this voting round everybody

183
00:06:27,759 --> 00:06:30,000
decides let's accept this block and they

184
00:06:30,000 --> 00:06:33,039
append this block to the ledger

185
00:06:33,039 --> 00:06:35,440
then we move on to the next epoch where

186
00:06:35,440 --> 00:06:37,199
we have a different leader which will

187
00:06:37,199 --> 00:06:39,680
propose a new blog bi plus one

188
00:06:39,680 --> 00:06:41,120
and then we do the same thing again we

189
00:06:41,120 --> 00:06:43,440
do another round of voting

190
00:06:43,440 --> 00:06:47,199
and then we agree on the new block

191
00:06:47,199 --> 00:06:49,360
so these are the tools we'll use and we

192
00:06:49,360 --> 00:06:50,800
have some other tools

193
00:06:50,800 --> 00:06:52,720
as well that we use in our

194
00:06:52,720 --> 00:06:54,160
paper

195
00:06:54,160 --> 00:06:56,880
so one property that we need from smr we

196
00:06:56,880 --> 00:06:59,440
need a simultaneous decision smr that

197
00:06:59,440 --> 00:07:01,680
that means that if one honest node

198
00:07:01,680 --> 00:07:04,160
outputs then everybody outputs almost

199
00:07:04,160 --> 00:07:06,479
immediately

200
00:07:06,479 --> 00:07:08,240
so we need this simultaneous decision

201
00:07:08,240 --> 00:07:10,080
property for unpredictability the

202
00:07:10,080 --> 00:07:12,240
intuition is that we don't want the

203
00:07:12,240 --> 00:07:14,000
adversary to learn that we cannot put

204
00:07:14,000 --> 00:07:16,800
too far ahead of honest notes we want to

205
00:07:16,800 --> 00:07:18,160
ensure that as soon as adversity

206
00:07:18,160 --> 00:07:19,280
launched the we can output then

207
00:07:19,280 --> 00:07:20,639
everybody else also learns almost

208
00:07:20,639 --> 00:07:23,120
immediately

209
00:07:23,759 --> 00:07:25,360
let's look at how we construct our

210
00:07:25,360 --> 00:07:26,880
protocol

211
00:07:26,880 --> 00:07:30,080
so we as in smr we also run in epochs

212
00:07:30,080 --> 00:07:32,639
every epoch has a leader and we ensure

213
00:07:32,639 --> 00:07:34,319
that whenever the epochs leader is

214
00:07:34,319 --> 00:07:37,840
honest we produce a beacon output

215
00:07:37,840 --> 00:07:40,479
each of our epoch has four phases

216
00:07:40,479 --> 00:07:42,400
commitment phase aggregation phase

217
00:07:42,400 --> 00:07:46,400
agreement phase and reconstruction phase

218
00:07:46,400 --> 00:07:47,599
i'll now

219
00:07:47,599 --> 00:07:49,680
briefly look at all of these faces so

220
00:07:49,680 --> 00:07:51,440
the on top i have the legends that i'll

221
00:07:51,440 --> 00:07:54,000
be using for my figure

222
00:07:54,000 --> 00:07:55,360
in the sharing phase let's say we have

223
00:07:55,360 --> 00:07:57,120
four node and the second node is the

224
00:07:57,120 --> 00:07:59,840
leader

225
00:07:59,919 --> 00:08:01,919
what each node does it know each node

226
00:08:01,919 --> 00:08:04,639
samples a random secret and computes the

227
00:08:04,639 --> 00:08:06,879
pvss transcript of the random secret

228
00:08:06,879 --> 00:08:09,120
sample by the node every node does this

229
00:08:09,120 --> 00:08:10,240
locally

230
00:08:10,240 --> 00:08:12,800
and then these nodes will send this pbss

231
00:08:12,800 --> 00:08:15,120
transcript to the leader

232
00:08:15,120 --> 00:08:17,120
this is the sharing phase during the

233
00:08:17,120 --> 00:08:18,960
aggregation phase the leader will

234
00:08:18,960 --> 00:08:21,199
aggregate this

235
00:08:21,199 --> 00:08:22,800
shares using the additive homomorphic

236
00:08:22,800 --> 00:08:24,879
property of the previous commitment and

237
00:08:24,879 --> 00:08:28,000
also the pbs encryptions

238
00:08:28,000 --> 00:08:29,840
during the agreement phase the leader

239
00:08:29,840 --> 00:08:32,080
will send this aggregated commitment and

240
00:08:32,080 --> 00:08:33,679
aggregated ciphertext using a

241
00:08:33,679 --> 00:08:37,039
simultaneous decision smr

242
00:08:38,080 --> 00:08:40,479
there is one issue the pbss proofs are

243
00:08:40,479 --> 00:08:42,640
not aggregatable so there is a subtlety

244
00:08:42,640 --> 00:08:44,560
here so how do we ensure that the leader

245
00:08:44,560 --> 00:08:46,560
indeed did the aggregation correctly so

246
00:08:46,560 --> 00:08:48,560
for this we have a new distributed

247
00:08:48,560 --> 00:08:50,800
aggregation verification mechanism where

248
00:08:50,800 --> 00:08:53,040
every node only checks a part of the

249
00:08:53,040 --> 00:08:55,120
aggregation mechanism and they

250
00:08:55,120 --> 00:08:56,640
collectively ensure that the global

251
00:08:56,640 --> 00:08:58,880
aggregation was done correctly

252
00:08:58,880 --> 00:09:01,600
and this is very crucial for our uh

253
00:09:01,600 --> 00:09:04,480
random beacon protocol

254
00:09:04,480 --> 00:09:06,000
there is another issue which is a

255
00:09:06,000 --> 00:09:07,920
subtlety in like most of the smr

256
00:09:07,920 --> 00:09:10,240
protocols where it is possible that if

257
00:09:10,240 --> 00:09:11,040
the

258
00:09:11,040 --> 00:09:12,560
leader is bad

259
00:09:12,560 --> 00:09:14,480
then it is possible that some honest

260
00:09:14,480 --> 00:09:15,600
node do not

261
00:09:15,600 --> 00:09:17,760
output the value they will know that the

262
00:09:17,760 --> 00:09:19,360
decision has been reached but they won't

263
00:09:19,360 --> 00:09:21,680
have the value locally

264
00:09:21,680 --> 00:09:23,839
and we address this by using a two round

265
00:09:23,839 --> 00:09:25,440
reconstruction protocol which ensures

266
00:09:25,440 --> 00:09:26,959
that even if this kind of situation

267
00:09:26,959 --> 00:09:29,120
arrives the random beacon protocol still

268
00:09:29,120 --> 00:09:30,880
ensures unpredictability and the

269
00:09:30,880 --> 00:09:32,320
remaining properties

270
00:09:32,320 --> 00:09:34,080
so then at the end of the reconstruction

271
00:09:34,080 --> 00:09:37,279
phase the nodes will output a common

272
00:09:37,279 --> 00:09:39,200
beacon output so this is our

273
00:09:39,200 --> 00:09:40,399
construction

274
00:09:40,399 --> 00:09:43,519
we have some optimizations in for in our

275
00:09:43,519 --> 00:09:45,519
paper where we amortize the leader's

276
00:09:45,519 --> 00:09:46,480
work

277
00:09:46,480 --> 00:09:48,480
in our protocol each node becomes leader

278
00:09:48,480 --> 00:09:50,880
only once in an epoch so

279
00:09:50,880 --> 00:09:52,640
and so that we just

280
00:09:52,640 --> 00:09:54,080
make sure that the node does the

281
00:09:54,080 --> 00:09:55,680
commitment and aggregation phase a

282
00:09:55,680 --> 00:09:57,040
priori so that we can

283
00:09:57,040 --> 00:09:59,440
pipeline the entire system

284
00:09:59,440 --> 00:10:01,279
we also use multi-exponentiation

285
00:10:01,279 --> 00:10:03,200
wherever possible for computation

286
00:10:03,200 --> 00:10:05,839
optimization

287
00:10:06,320 --> 00:10:08,160
let's look at our implementation details

288
00:10:08,160 --> 00:10:10,560
we implement our protocol using golang

289
00:10:10,560 --> 00:10:12,720
atop this quorum code base which

290
00:10:12,720 --> 00:10:14,079
implements a

291
00:10:14,079 --> 00:10:15,760
smr protocol we change the smart

292
00:10:15,760 --> 00:10:18,000
protocol to re-implement a variant of

293
00:10:18,000 --> 00:10:20,320
hot stuff uh smart protocol a popular

294
00:10:20,320 --> 00:10:21,760
smart protocol

295
00:10:21,760 --> 00:10:23,040
and we use

296
00:10:23,040 --> 00:10:25,680
in our protocol bls 12381 elliptic curve

297
00:10:25,680 --> 00:10:26,959
from

298
00:10:26,959 --> 00:10:28,880
ignite crypto library and we also use

299
00:10:28,880 --> 00:10:30,959
their native multi-exponentiation

300
00:10:30,959 --> 00:10:33,440
protocol

301
00:10:33,440 --> 00:10:35,360
in terms of experiments we evaluate our

302
00:10:35,360 --> 00:10:38,959
system using aws across eight regions

303
00:10:38,959 --> 00:10:40,160
we

304
00:10:40,160 --> 00:10:42,240
position one node per vm and we test

305
00:10:42,240 --> 00:10:44,560
with up to 128 nodes

306
00:10:44,560 --> 00:10:46,640
so let's look at our evaluation results

307
00:10:46,640 --> 00:10:48,320
so first we want to look at the average

308
00:10:48,320 --> 00:10:50,160
number of beacons

309
00:10:50,160 --> 00:10:51,760
output per node

310
00:10:51,760 --> 00:10:53,920
how fast is the system how how often can

311
00:10:53,920 --> 00:10:56,240
the system generate beacon outputs and

312
00:10:56,240 --> 00:11:00,000
here if you look at with 64 nodes

313
00:11:00,000 --> 00:11:02,320
our protocol can output about 40 beacons

314
00:11:02,320 --> 00:11:04,160
per minute which is about one beacon

315
00:11:04,160 --> 00:11:05,920
every one and a half second

316
00:11:05,920 --> 00:11:08,240
and in comparison we compared with d

317
00:11:08,240 --> 00:11:10,800
rand which is a variant of the cks

318
00:11:10,800 --> 00:11:13,279
protocol recall this cks05 requires

319
00:11:13,279 --> 00:11:15,519
trusted setup and variancy d-rand is a

320
00:11:15,519 --> 00:11:18,240
synchronous variant of it so even with

321
00:11:18,240 --> 00:11:20,160
much stronger assumption our performance

322
00:11:20,160 --> 00:11:22,000
is slightly better than the rand we

323
00:11:22,000 --> 00:11:24,000
believe this is because of their use of

324
00:11:24,000 --> 00:11:25,760
inefficient broadcast channel and also

325
00:11:25,760 --> 00:11:28,079
some other implementation issues we also

326
00:11:28,079 --> 00:11:29,680
compare with hydrant which has one of

327
00:11:29,680 --> 00:11:32,320
the implementation hydrant has some

328
00:11:32,320 --> 00:11:34,640
unpredictability issue and we

329
00:11:34,640 --> 00:11:36,959
and ours is perfectly unpredictable and

330
00:11:36,959 --> 00:11:39,200
we also still perform much better than

331
00:11:39,200 --> 00:11:40,160
the

332
00:11:40,160 --> 00:11:42,240
these works

333
00:11:42,240 --> 00:11:44,399
we also measure the bandwidth uses and

334
00:11:44,399 --> 00:11:47,200
we see with 64 nodes we spurred each

335
00:11:47,200 --> 00:11:48,320
node for

336
00:11:48,320 --> 00:11:49,920
for per beak and each node has to send

337
00:11:49,920 --> 00:11:52,880
about 60 kilobytes of data this is for

338
00:11:52,880 --> 00:11:55,120
larger nodes is still slightly more

339
00:11:55,120 --> 00:11:57,200
but there is some scopes to

340
00:11:57,200 --> 00:12:00,240
scope to improve here as well

341
00:12:00,240 --> 00:12:01,519
so in summary

342
00:12:01,519 --> 00:12:02,959
we present a distributed roundness

343
00:12:02,959 --> 00:12:04,639
beacon protocol which which only

344
00:12:04,639 --> 00:12:06,480
requires transparent setup it is

345
00:12:06,480 --> 00:12:08,720
partially synchronous can tolerate up to

346
00:12:08,720 --> 00:12:10,959
one third malicious failures

347
00:12:10,959 --> 00:12:13,200
and it has order and computation

348
00:12:13,200 --> 00:12:16,079
amortized per beacon output and

349
00:12:16,079 --> 00:12:17,680
lambda and square

350
00:12:17,680 --> 00:12:21,120
communication cost as per beacon output

351
00:12:21,120 --> 00:12:23,600
and our average latency is order one

352
00:12:23,600 --> 00:12:24,959
rounds but in the worst case it's

353
00:12:24,959 --> 00:12:26,959
possible that we uh we do not produce

354
00:12:26,959 --> 00:12:28,399
any beacon for f rounds so there are

355
00:12:28,399 --> 00:12:30,320
lots of open problems one of the open

356
00:12:30,320 --> 00:12:32,880
problem is to design an asynchronous

357
00:12:32,880 --> 00:12:34,240
randomness beacon protocol that

358
00:12:34,240 --> 00:12:36,399
tolerates the same number of failures

359
00:12:36,399 --> 00:12:39,040
and also reduce this computation cost

360
00:12:39,040 --> 00:12:41,519
and communication cost to worst case

361
00:12:41,519 --> 00:12:44,000
lambda n square instead of amortized and

362
00:12:44,000 --> 00:12:45,839
also reduce the worst case latency to

363
00:12:45,839 --> 00:12:48,160
order one rounds and also

364
00:12:48,160 --> 00:12:51,120
we don't know of any lower bound results

365
00:12:51,120 --> 00:12:53,040
and it's i think it's interesting to

366
00:12:53,040 --> 00:12:54,079
work on

367
00:12:54,079 --> 00:12:56,320
what will be lower bound results on

368
00:12:56,320 --> 00:12:59,200
random speaking protocols

369
00:12:59,200 --> 00:13:01,519
that's it for this talk and

370
00:13:01,519 --> 00:13:05,920
these are my amazing collaborators

371
00:13:05,920 --> 00:13:09,760
[Applause]

372
00:13:09,760 --> 00:13:11,760
okay thanks a lot for this

373
00:13:11,760 --> 00:13:14,399
nice overview and we have time for some

374
00:13:14,399 --> 00:13:16,800
questions

375
00:13:17,519 --> 00:13:19,120
and yeah please state your name and

376
00:13:19,120 --> 00:13:21,040
affiliation

377
00:13:21,040 --> 00:13:23,519
hey this is jorgen from stanford

378
00:13:23,519 --> 00:13:25,600
maybe you mentioned this and i missed it

379
00:13:25,600 --> 00:13:29,200
what pbss scheme are you using so

380
00:13:29,200 --> 00:13:32,480
we we looked at scrape pvss and then

381
00:13:32,480 --> 00:13:34,079
while working on it we have some

382
00:13:34,079 --> 00:13:36,480
improvements on top of the previous ski

383
00:13:36,480 --> 00:13:38,320
the screen previous scheme basically we

384
00:13:38,320 --> 00:13:39,680
can improve the underlying assumption

385
00:13:39,680 --> 00:13:41,680
that they assume and we have our new pvs

386
00:13:41,680 --> 00:13:43,199
schema which is very similar in

387
00:13:43,199 --> 00:13:45,120
principle with the scrape previous

388
00:13:45,120 --> 00:13:48,120
scheme

389
00:13:49,519 --> 00:13:52,079
okay one question from my side in the

390
00:13:52,079 --> 00:13:54,880
evolution you only had to de-rant up to

391
00:13:54,880 --> 00:13:57,680
32 notes is there a conceptual problem

392
00:13:57,680 --> 00:14:01,839
why it doesn't scale to 64 or 128

393
00:14:01,839 --> 00:14:03,839
no we we just couldn't get it running

394
00:14:03,839 --> 00:14:06,399
with 64 nodes so we tried hard and

395
00:14:06,399 --> 00:14:08,240
probably there because they use a very

396
00:14:08,240 --> 00:14:10,240
naive broadcast protocol which is n to

397
00:14:10,240 --> 00:14:12,079
the fourth and as we scale with large

398
00:14:12,079 --> 00:14:13,760
number of nodes the latencies they are

399
00:14:13,760 --> 00:14:15,199
very synchronous protocol they have to

400
00:14:15,199 --> 00:14:16,880
make strong assumptions about network

401
00:14:16,880 --> 00:14:19,120
latencies so if those assumptions are

402
00:14:19,120 --> 00:14:20,720
violated the protocol doesn't produce

403
00:14:20,720 --> 00:14:22,880
the output and throws all sorts of we

404
00:14:22,880 --> 00:14:24,320
just couldn't get it running but there

405
00:14:24,320 --> 00:14:27,440
is no conceptual error with that yeah

406
00:14:27,440 --> 00:14:30,000
okay no conceptual but still practical

407
00:14:30,000 --> 00:14:31,839
practical uh specific to probably that

408
00:14:31,839 --> 00:14:33,279
implementation

409
00:14:33,279 --> 00:14:35,360
yeah

410
00:14:35,360 --> 00:14:37,199
okay more questions

411
00:14:37,199 --> 00:14:41,760
from the audience or online yes sure

412
00:14:43,279 --> 00:14:46,000
um can you clarify the property of the

413
00:14:46,000 --> 00:14:48,560
smr protocol where you mentioned nodes

414
00:14:48,560 --> 00:14:50,560
output at the same time

415
00:14:50,560 --> 00:14:53,360
yes if it is partially synchronous then

416
00:14:53,360 --> 00:14:56,560
um how would they like during a period

417
00:14:56,560 --> 00:14:59,360
of like partial synchrony before gst how

418
00:14:59,360 --> 00:15:01,199
would they output at the same time so

419
00:15:01,199 --> 00:15:02,800
that's that's a very good question so

420
00:15:02,800 --> 00:15:05,199
how we measure this simultaneous

421
00:15:05,199 --> 00:15:08,480
decision in terms of number of rounds so

422
00:15:08,480 --> 00:15:10,079
it's possible that one of the round is

423
00:15:10,079 --> 00:15:11,760
much longer than adversary learns the

424
00:15:11,760 --> 00:15:14,000
beacon output now and adversary

425
00:15:14,000 --> 00:15:15,680
deliberately delays the next round to be

426
00:15:15,680 --> 00:15:17,760
like let's say one year then the nodes

427
00:15:17,760 --> 00:15:19,920
log other nodes will output the beacon

428
00:15:19,920 --> 00:15:22,160
output after a year but if we look at

429
00:15:22,160 --> 00:15:24,079
number of rounds like where the round is

430
00:15:24,079 --> 00:15:26,959
basically the latency of the messages so

431
00:15:26,959 --> 00:15:29,120
we ensure that if adverse if one node

432
00:15:29,120 --> 00:15:31,199
decides then the other nodes can decide

433
00:15:31,199 --> 00:15:33,680
within two message delays

434
00:15:33,680 --> 00:15:34,959
and that's like constant number of

435
00:15:34,959 --> 00:15:36,720
message delays and yes in partial

436
00:15:36,720 --> 00:15:38,240
synchrony each delay could be much

437
00:15:38,240 --> 00:15:41,040
longer but we believe in practice like

438
00:15:41,040 --> 00:15:44,480
delays will be very reasonable yes

439
00:15:44,480 --> 00:15:46,880
thank you

440
00:15:49,199 --> 00:15:51,759
okay so if there are no more questions

441
00:15:51,759 --> 00:15:54,630
let's thank the speaker one more time

442
00:15:54,630 --> 00:15:57,799
[Applause]

