1
00:00:00,560 --> 00:00:02,240
all right

2
00:00:02,240 --> 00:00:04,800
well thank you very much

3
00:00:04,800 --> 00:00:07,359
[Applause]

4
00:00:07,359 --> 00:00:09,760
all right so uh let's go ahead and get

5
00:00:09,760 --> 00:00:12,160
started uh so to kick us off we have a

6
00:00:12,160 --> 00:00:14,320
hybrid presentation today i am the half

7
00:00:14,320 --> 00:00:15,679
that is here in person my name is

8
00:00:15,679 --> 00:00:19,359
nicholas gousha and uh russ

9
00:00:25,840 --> 00:00:27,760
all right all right

10
00:00:27,760 --> 00:00:28,800
i'm ross

11
00:00:28,800 --> 00:00:30,640
sanders and i'm professor of security

12
00:00:30,640 --> 00:00:32,159
engineering at cambridge and also at

13
00:00:32,159 --> 00:00:35,280
edinburgh can you hear me loud and clear

14
00:00:35,280 --> 00:00:36,640
yes indeed

15
00:00:36,640 --> 00:00:38,320
okay over to you nicholas for the first

16
00:00:38,320 --> 00:00:40,399
part of the talk

17
00:00:40,399 --> 00:00:43,280
all right thank you ross uh so today we

18
00:00:43,280 --> 00:00:45,920
are here to talk about trojan swords and

19
00:00:45,920 --> 00:00:48,719
bad characters invisible hacks and

20
00:00:48,719 --> 00:00:51,840
reluctant hatching so uh welcome to our

21
00:00:51,840 --> 00:00:54,000
hybrid talk

22
00:00:54,000 --> 00:00:56,480
you think that the world is a beautiful

23
00:00:56,480 --> 00:00:59,520
place the sun is shining the trees are

24
00:00:59,520 --> 00:01:01,680
growing the flowers are blossoming the

25
00:01:01,680 --> 00:01:03,520
children are playing and your source

26
00:01:03,520 --> 00:01:06,880
code does exactly what you think it does

27
00:01:06,880 --> 00:01:08,320
so i'm here to tell you that you are

28
00:01:08,320 --> 00:01:10,400
wrong it is raining the trees are being

29
00:01:10,400 --> 00:01:12,240
cut down the bees are missing the

30
00:01:12,240 --> 00:01:14,159
children are all on tick-tock and oh

31
00:01:14,159 --> 00:01:15,920
yeah your source code may contain

32
00:01:15,920 --> 00:01:18,720
malware that you can't see

33
00:01:18,720 --> 00:01:21,680
so meet jerry he's a nice guy he plays

34
00:01:21,680 --> 00:01:23,600
tennis he likes ice cream he's the

35
00:01:23,600 --> 00:01:25,600
favorite child of his family he's a

36
00:01:25,600 --> 00:01:28,000
part-time doomsday prepper and he also

37
00:01:28,000 --> 00:01:30,079
happens to be a very talented developer

38
00:01:30,079 --> 00:01:32,079
who maintains some open source projects

39
00:01:32,079 --> 00:01:33,360
on github

40
00:01:33,360 --> 00:01:35,600
what jerry doesn't know is that he's

41
00:01:35,600 --> 00:01:37,680
about to cause the largest cyber

42
00:01:37,680 --> 00:01:40,720
security incident of the year why

43
00:01:40,720 --> 00:01:44,159
because jerry's human he's not a robot

44
00:01:44,159 --> 00:01:46,000
he's not a billionaire

45
00:01:46,000 --> 00:01:49,439
he's not a billionaire robot he's just

46
00:01:49,439 --> 00:01:50,479
jerry

47
00:01:50,479 --> 00:01:52,880
and he's vulnerable to attacks that he

48
00:01:52,880 --> 00:01:54,399
can't detect

49
00:01:54,399 --> 00:01:58,079
so let's talk about invisible attacks

50
00:01:58,079 --> 00:02:01,040
humans communicate in lots of ways

51
00:02:01,040 --> 00:02:02,079
there's

52
00:02:02,079 --> 00:02:03,759
verbal communication there's sign

53
00:02:03,759 --> 00:02:05,920
language there's smoke signals and then

54
00:02:05,920 --> 00:02:07,200
there's writing

55
00:02:07,200 --> 00:02:08,878
in fact one or two people in this

56
00:02:08,878 --> 00:02:10,878
audience may actually be old enough to

57
00:02:10,878 --> 00:02:13,040
remember a bygone era where people used

58
00:02:13,040 --> 00:02:15,200
this primitive tool i am told it was

59
00:02:15,200 --> 00:02:16,480
called a pen

60
00:02:16,480 --> 00:02:18,080
to write things down with these little

61
00:02:18,080 --> 00:02:20,080
hand gestures and apparently they

62
00:02:20,080 --> 00:02:22,239
actually wrote things on dead trees

63
00:02:22,239 --> 00:02:24,319
which they presumably cut down in some

64
00:02:24,319 --> 00:02:26,720
sort of a way to assert their dominance

65
00:02:26,720 --> 00:02:27,920
over nature

66
00:02:27,920 --> 00:02:30,800
history is a pretty crazy place

67
00:02:30,800 --> 00:02:32,879
and then we get to the more civilized

68
00:02:32,879 --> 00:02:34,560
era where we have these things called

69
00:02:34,560 --> 00:02:37,120
computers and at this point someone had

70
00:02:37,120 --> 00:02:39,440
to figure out how to represent good

71
00:02:39,440 --> 00:02:41,440
old-fashioned writing in a digital

72
00:02:41,440 --> 00:02:44,400
format and not everyone agreed on how

73
00:02:44,400 --> 00:02:45,840
this should be done

74
00:02:45,840 --> 00:02:47,920
so one of the more popular methods of

75
00:02:47,920 --> 00:02:50,640
encoding text was known as ascii but it

76
00:02:50,640 --> 00:02:53,040
could only capture latin characters and

77
00:02:53,040 --> 00:02:55,519
of course there's no issues with that

78
00:02:55,519 --> 00:02:58,000
right i mean i'm sure the whole of human

79
00:02:58,000 --> 00:03:00,080
language can be represented in basic

80
00:03:00,080 --> 00:03:01,840
latin characters

81
00:03:01,840 --> 00:03:04,879
okay so maybe not i asked around did

82
00:03:04,879 --> 00:03:06,720
some polling and it turns out that

83
00:03:06,720 --> 00:03:08,800
people do speak languages other than

84
00:03:08,800 --> 00:03:09,760
english

85
00:03:09,760 --> 00:03:11,680
and this meant that lots of different

86
00:03:11,680 --> 00:03:13,840
text encoding standards developed in

87
00:03:13,840 --> 00:03:16,159
parallel and if you've ever opened a

88
00:03:16,159 --> 00:03:18,319
file using the wrong text encoding you

89
00:03:18,319 --> 00:03:20,080
know that it always produces some kind

90
00:03:20,080 --> 00:03:22,400
of dark magic spell that seems to summon

91
00:03:22,400 --> 00:03:24,239
cthulhu from the depths of the mariana

92
00:03:24,239 --> 00:03:25,760
trench to wreak havoc across your

93
00:03:25,760 --> 00:03:27,440
computer screen

94
00:03:27,440 --> 00:03:29,519
so let's talk about unicode

95
00:03:29,519 --> 00:03:31,280
to fight off this evil the world's

96
00:03:31,280 --> 00:03:33,040
greatest scientists came together and

97
00:03:33,040 --> 00:03:35,200
created a single unified text

98
00:03:35,200 --> 00:03:37,760
specification that aims to be capable of

99
00:03:37,760 --> 00:03:39,519
representing all of the world's

100
00:03:39,519 --> 00:03:40,640
languages

101
00:03:40,640 --> 00:03:42,720
it's called unicode and these days

102
00:03:42,720 --> 00:03:45,200
almost all digital text is represented

103
00:03:45,200 --> 00:03:47,599
using this specification pretty much

104
00:03:47,599 --> 00:03:50,159
everything from email to twitter to

105
00:03:50,159 --> 00:03:52,720
angry youtube comments to source code is

106
00:03:52,720 --> 00:03:55,439
all just unicode under the hood

107
00:03:55,439 --> 00:03:57,280
now here's an interesting feature of

108
00:03:57,280 --> 00:03:59,760
human writing our species doesn't seem

109
00:03:59,760 --> 00:04:02,400
to agree on the direction the text

110
00:04:02,400 --> 00:04:04,720
should be written now if you're a writer

111
00:04:04,720 --> 00:04:07,439
of english or german you probably write

112
00:04:07,439 --> 00:04:09,840
in left to right direction but if you're

113
00:04:09,840 --> 00:04:12,000
a writer of hebrew or arabic you

114
00:04:12,000 --> 00:04:13,840
probably write in right to left

115
00:04:13,840 --> 00:04:16,238
direction and since unicode aims to

116
00:04:16,238 --> 00:04:18,639
represent all of the world's languages

117
00:04:18,639 --> 00:04:20,798
this means that it must have some way of

118
00:04:20,798 --> 00:04:23,520
capturing both directions of writing it

119
00:04:23,520 --> 00:04:25,040
also means

120
00:04:25,040 --> 00:04:26,800
that it must have a deterministic

121
00:04:26,800 --> 00:04:29,120
mechanism to combine text with differing

122
00:04:29,120 --> 00:04:31,840
directionalities so for unicode this is

123
00:04:31,840 --> 00:04:34,320
called the bi-directional algorithm and

124
00:04:34,320 --> 00:04:37,199
it's about to become your worst enemy so

125
00:04:37,199 --> 00:04:39,120
let's take a tour of the bi-directional

126
00:04:39,120 --> 00:04:40,240
algorithm

127
00:04:40,240 --> 00:04:42,000
each character has a natural

128
00:04:42,000 --> 00:04:44,240
directionality associated with it this

129
00:04:44,240 --> 00:04:45,840
allows english to default to left to

130
00:04:45,840 --> 00:04:47,680
right while arabic can default to right

131
00:04:47,680 --> 00:04:49,840
to left and when text of differing

132
00:04:49,840 --> 00:04:52,000
directionalities is mixed characters are

133
00:04:52,000 --> 00:04:54,800
combined to some sensible default

134
00:04:54,800 --> 00:04:56,560
sometimes this default might not be what

135
00:04:56,560 --> 00:04:58,960
you want and to support this a set of

136
00:04:58,960 --> 00:05:00,639
directionality control characters were

137
00:05:00,639 --> 00:05:02,479
created and this allows a very

138
00:05:02,479 --> 00:05:04,240
fine-grained control

139
00:05:04,240 --> 00:05:06,560
over text directionality so let's

140
00:05:06,560 --> 00:05:08,720
consider an example we start with the

141
00:05:08,720 --> 00:05:12,160
text a b c which naturally displays as

142
00:05:12,160 --> 00:05:14,800
left to right and then we add control

143
00:05:14,800 --> 00:05:16,800
characters which override the

144
00:05:16,800 --> 00:05:19,520
directionality to right to left and then

145
00:05:19,520 --> 00:05:21,919
resets back after the text

146
00:05:21,919 --> 00:05:25,680
so now the text will read as cba despite

147
00:05:25,680 --> 00:05:28,400
the underlying logically encoded order

148
00:05:28,400 --> 00:05:30,639
still being a b c

149
00:05:30,639 --> 00:05:32,639
so things get a little bit more

150
00:05:32,639 --> 00:05:34,479
complicated when we realize that

151
00:05:34,479 --> 00:05:36,800
directionality control characters can be

152
00:05:36,800 --> 00:05:39,440
nested within each other so welcome to

153
00:05:39,440 --> 00:05:41,600
the multiverse of madness

154
00:05:41,600 --> 00:05:44,000
here's another example this time we have

155
00:05:44,000 --> 00:05:48,000
the text a b c d e f uh we place two

156
00:05:48,000 --> 00:05:50,320
separate left to right control sequences

157
00:05:50,320 --> 00:05:53,600
around abc and def respectively except

158
00:05:53,600 --> 00:05:55,759
that now we wrap this entire sequence in

159
00:05:55,759 --> 00:05:57,759
a right to left environment so what

160
00:05:57,759 --> 00:06:00,960
happens now the text displays as d e f

161
00:06:00,960 --> 00:06:02,880
abc and to make this a little bit more

162
00:06:02,880 --> 00:06:04,960
apparent let's put some boxes around the

163
00:06:04,960 --> 00:06:07,280
different uh segments of text that are

164
00:06:07,280 --> 00:06:08,960
on the screen to make it a little bit

165
00:06:08,960 --> 00:06:12,080
more clear now you see the ability to

166
00:06:12,080 --> 00:06:14,240
nest directionality control characters

167
00:06:14,240 --> 00:06:16,800
allows very fine grained control over

168
00:06:16,800 --> 00:06:19,520
character display order despite the

169
00:06:19,520 --> 00:06:22,160
logically encoded order of the text

170
00:06:22,160 --> 00:06:24,000
that's sitting on the disk

171
00:06:24,000 --> 00:06:26,960
so what could go wrong this seems fine

172
00:06:26,960 --> 00:06:28,800
all i've shown is that we can create

173
00:06:28,800 --> 00:06:30,960
deterministic complex differences

174
00:06:30,960 --> 00:06:32,560
between the logically encoded and

175
00:06:32,560 --> 00:06:35,120
visually displayed orders of text

176
00:06:35,120 --> 00:06:37,360
so at this time please fasten your seat

177
00:06:37,360 --> 00:06:39,039
belts raise your tray tables to the

178
00:06:39,039 --> 00:06:40,720
upright and locked position and

179
00:06:40,720 --> 00:06:42,960
anticipate the cacophony of crying

180
00:06:42,960 --> 00:06:45,600
babies as we begin our descent down into

181
00:06:45,600 --> 00:06:47,280
the rabbit hole

182
00:06:47,280 --> 00:06:49,599
so remember all of those references to

183
00:06:49,599 --> 00:06:51,919
source code a few minutes ago

184
00:06:51,919 --> 00:06:54,080
since most source code is written in

185
00:06:54,080 --> 00:06:56,479
unicode these days it means that source

186
00:06:56,479 --> 00:06:58,400
code supports all of these nifty

187
00:06:58,400 --> 00:07:00,319
bi-directional features

188
00:07:00,319 --> 00:07:01,120
cool

189
00:07:01,120 --> 00:07:03,919
except wait a minute for source code to

190
00:07:03,919 --> 00:07:05,680
do anything interesting it needs to be

191
00:07:05,680 --> 00:07:08,160
run through some sort of compiler but

192
00:07:08,160 --> 00:07:10,560
the thing is those compilers they don't

193
00:07:10,560 --> 00:07:12,960
care about the display order of text

194
00:07:12,960 --> 00:07:15,440
they ingest the raw bytes of source code

195
00:07:15,440 --> 00:07:17,440
and this means that they process the

196
00:07:17,440 --> 00:07:20,080
logically encoded order of text so where

197
00:07:20,080 --> 00:07:21,759
could we be going with this

198
00:07:21,759 --> 00:07:24,400
so dr evil over here has been thinking

199
00:07:24,400 --> 00:07:26,800
and he thinks that he can use this stuff

200
00:07:26,800 --> 00:07:29,039
for some nefarious purposes

201
00:07:29,039 --> 00:07:31,039
what if he were able to inject some of

202
00:07:31,039 --> 00:07:33,039
these directionality control characters

203
00:07:33,039 --> 00:07:35,440
into source code such that the code

204
00:07:35,440 --> 00:07:38,240
appeared differently to humans into

205
00:07:38,240 --> 00:07:40,720
compilers he's sure he could find a way

206
00:07:40,720 --> 00:07:42,960
to do something evil with that but you

207
00:07:42,960 --> 00:07:44,879
know oh how is he supposed to inject

208
00:07:44,879 --> 00:07:46,879
those control characters arbitrarily

209
00:07:46,879 --> 00:07:49,440
into source code surely those characters

210
00:07:49,440 --> 00:07:51,120
would break the syntax of the language

211
00:07:51,120 --> 00:07:53,919
and cause some kind of compiler error so

212
00:07:53,919 --> 00:07:57,120
it seems like we're saved

213
00:07:57,440 --> 00:07:58,720
uh but

214
00:07:58,720 --> 00:08:00,800
dr evil thinks about it some more and he

215
00:08:00,800 --> 00:08:02,800
realizes that virtually all programming

216
00:08:02,800 --> 00:08:05,520
languages will let you put arbitrary

217
00:08:05,520 --> 00:08:07,440
anywhere into source code

218
00:08:07,440 --> 00:08:08,960
you may have heard of this feature

219
00:08:08,960 --> 00:08:12,080
before it's called a comment uh and i'm

220
00:08:12,080 --> 00:08:14,400
sure that everyone here is familiar with

221
00:08:14,400 --> 00:08:16,319
comments and code because everyone in

222
00:08:16,319 --> 00:08:18,240
this audience definitely takes the time

223
00:08:18,240 --> 00:08:20,319
to document every line of code they

224
00:08:20,319 --> 00:08:21,599
write

225
00:08:21,599 --> 00:08:23,440
and it turns out there's actually

226
00:08:23,440 --> 00:08:24,879
another way that you can inject

227
00:08:24,879 --> 00:08:27,599
arbitrary unicode into your source and

228
00:08:27,599 --> 00:08:29,759
that is string literals in most

229
00:08:29,759 --> 00:08:31,360
languages you can put just about

230
00:08:31,360 --> 00:08:33,200
anything between double quotes like our

231
00:08:33,200 --> 00:08:35,360
good friend dr evil is demonstrating for

232
00:08:35,360 --> 00:08:36,399
us here

233
00:08:36,399 --> 00:08:39,839
so let's recap humans can't agree which

234
00:08:39,839 --> 00:08:42,080
direction text should be written so we

235
00:08:42,080 --> 00:08:44,320
designed computers that support both

236
00:08:44,320 --> 00:08:46,959
left to right and right to left text

237
00:08:46,959 --> 00:08:49,200
we implement this in a specification

238
00:08:49,200 --> 00:08:51,200
called unicode which gives us special

239
00:08:51,200 --> 00:08:52,880
control characters that allow

240
00:08:52,880 --> 00:08:54,480
fine-grained control

241
00:08:54,480 --> 00:08:56,880
over the display order of text and it

242
00:08:56,880 --> 00:08:59,279
turns out that compilers ignore the

243
00:08:59,279 --> 00:09:01,120
display order of text

244
00:09:01,120 --> 00:09:02,640
in that we can smuggle these

245
00:09:02,640 --> 00:09:05,120
directionality control characters into

246
00:09:05,120 --> 00:09:07,600
source code by placing them in comments

247
00:09:07,600 --> 00:09:08,959
and strings

248
00:09:08,959 --> 00:09:12,160
great so what's the problem well here's

249
00:09:12,160 --> 00:09:14,959
the thing dr evil is a pretty clever guy

250
00:09:14,959 --> 00:09:16,480
and he realizes that he can use

251
00:09:16,480 --> 00:09:18,160
directionality control characters and

252
00:09:18,160 --> 00:09:20,640
comments and strings to visually reorder

253
00:09:20,640 --> 00:09:23,120
source code tokens to present

254
00:09:23,120 --> 00:09:26,399
different semantically correct logic to

255
00:09:26,399 --> 00:09:29,760
humans into compilers so that that's a

256
00:09:29,760 --> 00:09:31,360
really big deal so let's state that

257
00:09:31,360 --> 00:09:34,080
again semantically valid control

258
00:09:34,080 --> 00:09:36,720
characters in comments and strings can

259
00:09:36,720 --> 00:09:40,480
visually reorder the surrounding text to

260
00:09:40,480 --> 00:09:41,680
look like

261
00:09:41,680 --> 00:09:44,000
syntactically valid source code that's

262
00:09:44,000 --> 00:09:45,519
not actually there

263
00:09:45,519 --> 00:09:48,240
so this means that you can encode source

264
00:09:48,240 --> 00:09:50,160
code so that it looks like it says one

265
00:09:50,160 --> 00:09:52,480
thing to humans that actually says

266
00:09:52,480 --> 00:09:54,800
something different to compilers

267
00:09:54,800 --> 00:09:55,680
so

268
00:09:55,680 --> 00:09:58,080
let's look at an example and since we

269
00:09:58,080 --> 00:10:00,000
are about to talk about an attack let's

270
00:10:00,000 --> 00:10:02,000
officially switch the presentation to

271
00:10:02,000 --> 00:10:03,920
dark mode to let the world know that we

272
00:10:03,920 --> 00:10:06,079
are indeed real hackers

273
00:10:06,079 --> 00:10:09,040
so consider the following program in c

274
00:10:09,040 --> 00:10:11,120
uh its behavior appears pretty

275
00:10:11,120 --> 00:10:13,600
straightforward it begins by setting the

276
00:10:13,600 --> 00:10:16,959
boolean variable is admin to false it

277
00:10:16,959 --> 00:10:19,279
then checks whether that same variable

278
00:10:19,279 --> 00:10:21,760
is true and if it is it prints out that

279
00:10:21,760 --> 00:10:24,240
you are an admin so we would therefore

280
00:10:24,240 --> 00:10:26,399
expect that this program would have no

281
00:10:26,399 --> 00:10:30,000
output but let's run it and see

282
00:10:30,000 --> 00:10:32,399
okay so that's strange it seems to say

283
00:10:32,399 --> 00:10:35,440
that we are an admin so let's take a

284
00:10:35,440 --> 00:10:37,680
look at the underlying encoding which i

285
00:10:37,680 --> 00:10:39,680
visualized on this screen to help

286
00:10:39,680 --> 00:10:42,399
explain what's going on so the line of

287
00:10:42,399 --> 00:10:44,480
code with the if statement has actually

288
00:10:44,480 --> 00:10:47,040
been reordered using directionality

289
00:10:47,040 --> 00:10:49,200
override characters let's zoom in on

290
00:10:49,200 --> 00:10:51,680
that line uh and it's a bit tough to see

291
00:10:51,680 --> 00:10:53,440
what's going on here so let's look at

292
00:10:53,440 --> 00:10:55,680
this animation that alternates between

293
00:10:55,680 --> 00:10:58,839
what a human sees and what a compiler

294
00:10:58,839 --> 00:11:01,760
sees so and now the issue starts to

295
00:11:01,760 --> 00:11:04,880
become clearer if a human sees an if

296
00:11:04,880 --> 00:11:06,880
statement the compiler here is just

297
00:11:06,880 --> 00:11:09,360
seeing a comment and this is a toy

298
00:11:09,360 --> 00:11:11,440
example but you could imagine that this

299
00:11:11,440 --> 00:11:13,440
if statement is gating something far

300
00:11:13,440 --> 00:11:15,360
more substantial

301
00:11:15,360 --> 00:11:17,600
like imagine administrative control over

302
00:11:17,600 --> 00:11:19,920
a power grid or something like this

303
00:11:19,920 --> 00:11:22,800
so we found a way to encode source code

304
00:11:22,800 --> 00:11:25,120
such that it looks innocuous to humans

305
00:11:25,120 --> 00:11:27,200
but does something pretty evil in the

306
00:11:27,200 --> 00:11:29,839
eyes of the compiler and it turns out

307
00:11:29,839 --> 00:11:31,519
that there's lots of ways that this can

308
00:11:31,519 --> 00:11:32,640
be expressed

309
00:11:32,640 --> 00:11:34,880
using directionality control characters

310
00:11:34,880 --> 00:11:36,880
we're we're effectively animating

311
00:11:36,880 --> 00:11:40,160
adversarial program a onto a benign

312
00:11:40,160 --> 00:11:43,040
looking program b so we call this the

313
00:11:43,040 --> 00:11:45,760
trojan source attack and uh by the way

314
00:11:45,760 --> 00:11:47,600
if you weren't already angry at the

315
00:11:47,600 --> 00:11:50,079
world by this point uh let me call to

316
00:11:50,079 --> 00:11:51,680
your attention that trojan source

317
00:11:51,680 --> 00:11:54,240
attacks persist through copy and paste

318
00:11:54,240 --> 00:11:55,040
so

319
00:11:55,040 --> 00:11:58,000
uh that means that if someone posts a

320
00:11:58,000 --> 00:12:00,480
code example on a forum that contains an

321
00:12:00,480 --> 00:12:02,720
invisible attack at the encoding level

322
00:12:02,720 --> 00:12:04,639
that attack will still be there when you

323
00:12:04,639 --> 00:12:06,480
paste it into your code base

324
00:12:06,480 --> 00:12:07,760
great

325
00:12:07,760 --> 00:12:10,399
so back to jerry uh he has been busy

326
00:12:10,399 --> 00:12:12,160
cleaning out his doomsday shelter for

327
00:12:12,160 --> 00:12:14,639
the past few minutes uh and uh you know

328
00:12:14,639 --> 00:12:16,560
when he's not busy preparing for the end

329
00:12:16,560 --> 00:12:19,040
of days uh jerry maintains a project on

330
00:12:19,040 --> 00:12:20,320
github

331
00:12:20,320 --> 00:12:22,160
and it's something pretty boring let's

332
00:12:22,160 --> 00:12:23,920
just say that it's an xml parsing

333
00:12:23,920 --> 00:12:25,200
library

334
00:12:25,200 --> 00:12:27,920
and it so happens to be the most popular

335
00:12:27,920 --> 00:12:30,880
xml parsing library in the ecosystem

336
00:12:30,880 --> 00:12:33,279
because that is how the internet works

337
00:12:33,279 --> 00:12:35,200
so perhaps some of you have seen this

338
00:12:35,200 --> 00:12:37,680
very informative infographic in the past

339
00:12:37,680 --> 00:12:40,079
which describes how bulletproof our

340
00:12:40,079 --> 00:12:42,800
modern software supply chain is well we

341
00:12:42,800 --> 00:12:44,560
are about to get into that

342
00:12:44,560 --> 00:12:48,959
so one random tuesday morning uh dr evil

343
00:12:48,959 --> 00:12:51,040
makes a pull request against jerry's

344
00:12:51,040 --> 00:12:53,600
github repo it includes what appears to

345
00:12:53,600 --> 00:12:56,000
be some optimizations to code that will

346
00:12:56,000 --> 00:12:57,760
just make it run better

347
00:12:57,760 --> 00:12:59,680
jerry takes a look through this and he's

348
00:12:59,680 --> 00:13:01,200
happy to merge it into the main branch

349
00:13:01,200 --> 00:13:03,040
right it makes sense it's good-looking

350
00:13:03,040 --> 00:13:06,000
code so the changes automatically pushed

351
00:13:06,000 --> 00:13:07,360
out to a whole bunch of different

352
00:13:07,360 --> 00:13:09,519
package managers and over the coming

353
00:13:09,519 --> 00:13:11,839
days all downstream projects that use

354
00:13:11,839 --> 00:13:13,760
this library update to use the latest

355
00:13:13,760 --> 00:13:16,320
version great and before you know it

356
00:13:16,320 --> 00:13:18,000
this source code is deployed in some

357
00:13:18,000 --> 00:13:20,000
online widgets a couple of e-commerce

358
00:13:20,000 --> 00:13:22,079
sites maybe a major operating system or

359
00:13:22,079 --> 00:13:23,200
two and perhaps the crucial

360
00:13:23,200 --> 00:13:24,320
infrastructure that powers the

361
00:13:24,320 --> 00:13:26,320
electrical grid that's uh you know

362
00:13:26,320 --> 00:13:28,560
powering uh ventilators at a hospital

363
00:13:28,560 --> 00:13:29,839
fantastic

364
00:13:29,839 --> 00:13:32,639
so if you haven't guessed dr evil had

365
00:13:32,639 --> 00:13:35,120
used the trojan source code to encode an

366
00:13:35,120 --> 00:13:37,920
invisible vulnerability into the code

367
00:13:37,920 --> 00:13:39,760
that was merged into jerry's open source

368
00:13:39,760 --> 00:13:42,320
xml parsing library and let's say that

369
00:13:42,320 --> 00:13:44,160
it introduced some behavior that upon

370
00:13:44,160 --> 00:13:46,480
seeing xml of a certain format caused it

371
00:13:46,480 --> 00:13:48,399
to just execute what was ever contained

372
00:13:48,399 --> 00:13:51,440
inside that xml so uh you know why is

373
00:13:51,440 --> 00:13:53,360
this terrible you know dr evil can now

374
00:13:53,360 --> 00:13:55,360
use this to remotely take over any

375
00:13:55,360 --> 00:13:57,120
machines running code that consumes

376
00:13:57,120 --> 00:14:00,240
jerry's xml parsing library and the best

377
00:14:00,240 --> 00:14:02,480
part about this is that any human that

378
00:14:02,480 --> 00:14:04,720
is looking at the open source source

379
00:14:04,720 --> 00:14:06,639
code that this project is running on

380
00:14:06,639 --> 00:14:08,800
won't see anything unusual because the

381
00:14:08,800 --> 00:14:11,199
vulnerability is hidden in the text

382
00:14:11,199 --> 00:14:13,600
encoding rather than being overtly

383
00:14:13,600 --> 00:14:15,440
visible in the traditional fashion that

384
00:14:15,440 --> 00:14:17,680
we would expect from source code that we

385
00:14:17,680 --> 00:14:20,320
find online so that's the trojan source

386
00:14:20,320 --> 00:14:23,199
vulnerability uh but are there any other

387
00:14:23,199 --> 00:14:25,440
ways that we could use unicode tricks to

388
00:14:25,440 --> 00:14:27,760
wreak havoc on the world well you know

389
00:14:27,760 --> 00:14:31,440
surprise the answer is yes so uh let's

390
00:14:31,440 --> 00:14:33,279
talk about machine learning it's the

391
00:14:33,279 --> 00:14:35,279
future of code right i think you know

392
00:14:35,279 --> 00:14:37,279
next generation software systems will

393
00:14:37,279 --> 00:14:39,120
contain increasing reliability on

394
00:14:39,120 --> 00:14:40,720
machine learning models that perform

395
00:14:40,720 --> 00:14:43,199
increasingly complicated tasks and

396
00:14:43,199 --> 00:14:44,880
unlike source code machine learning

397
00:14:44,880 --> 00:14:46,800
models are represented by numerical

398
00:14:46,800 --> 00:14:48,959
weights assigned to nodes in a complex

399
00:14:48,959 --> 00:14:51,440
network that we like to post pictures of

400
00:14:51,440 --> 00:14:52,800
onto the internet when we want people to

401
00:14:52,800 --> 00:14:55,519
think that we're smart

402
00:14:55,519 --> 00:14:57,199
so for everyone else you've realized

403
00:14:57,199 --> 00:14:58,880
that you've been living in the matrix

404
00:14:58,880 --> 00:15:00,480
this entire time you suspect that

405
00:15:00,480 --> 00:15:02,160
nothing has meaning and you are bracing

406
00:15:02,160 --> 00:15:03,519
yourself to see which other mission

407
00:15:03,519 --> 00:15:06,399
critical systems are about to fall apart

408
00:15:06,399 --> 00:15:08,160
cool so if you're the sort of person

409
00:15:08,160 --> 00:15:09,680
that's interested in machine learning

410
00:15:09,680 --> 00:15:12,000
you've probably seen this picture before

411
00:15:12,000 --> 00:15:13,920
if not what you see on the left is an

412
00:15:13,920 --> 00:15:15,839
image of a panda and when we put that

413
00:15:15,839 --> 00:15:17,440
image through a machine learning model

414
00:15:17,440 --> 00:15:18,800
that's supposed to do some computer

415
00:15:18,800 --> 00:15:20,959
vision and tell us what's in the image

416
00:15:20,959 --> 00:15:22,720
we see that the model tells us we are

417
00:15:22,720 --> 00:15:25,519
looking at a panda great but then we add

418
00:15:25,519 --> 00:15:27,440
a tiny amount of invisible noise to the

419
00:15:27,440 --> 00:15:29,519
picture and all of a sudden the model

420
00:15:29,519 --> 00:15:31,519
thinks that we're looking at a given

421
00:15:31,519 --> 00:15:33,120
this is the classical case of

422
00:15:33,120 --> 00:15:35,759
adversarial examples in machine learning

423
00:15:35,759 --> 00:15:38,480
but adversarial examples at their core

424
00:15:38,480 --> 00:15:40,560
are just inputs to models that look

425
00:15:40,560 --> 00:15:42,560
normal to humans but can make machine

426
00:15:42,560 --> 00:15:45,120
learning models output incorrect results

427
00:15:45,120 --> 00:15:47,600
so this particular example seems mostly

428
00:15:47,600 --> 00:15:49,759
harmless unless of course you happen to

429
00:15:49,759 --> 00:15:51,680
be a cuddly panda living in a world full

430
00:15:51,680 --> 00:15:53,199
of killer robots programmed to attack

431
00:15:53,199 --> 00:15:55,360
gibbons uh if that is the case your

432
00:15:55,360 --> 00:15:58,000
light definitely sucks but i promise

433
00:15:58,000 --> 00:15:59,839
that things are about to get much worse

434
00:15:59,839 --> 00:16:02,959
than this so traditionally adversarial

435
00:16:02,959 --> 00:16:05,360
examples have been focused on images and

436
00:16:05,360 --> 00:16:07,600
you know this makes sense it's actually

437
00:16:07,600 --> 00:16:09,839
easy to make subtle changes to pixel

438
00:16:09,839 --> 00:16:12,480
values in images that are just too small

439
00:16:12,480 --> 00:16:15,199
to be easily detected by humans but

440
00:16:15,199 --> 00:16:17,680
things become much harder

441
00:16:17,680 --> 00:16:19,680
talking about text researchers have

442
00:16:19,680 --> 00:16:21,759
tried

443
00:16:21,759 --> 00:16:23,920
to generate adversarial examples in the

444
00:16:23,920 --> 00:16:26,720
text domain but the issue is that text

445
00:16:26,720 --> 00:16:29,120
is just more discrete than images it's

446
00:16:29,120 --> 00:16:32,000
it's hard to make small changes to text

447
00:16:32,000 --> 00:16:34,320
any change that you make is likely going

448
00:16:34,320 --> 00:16:35,680
to be variable

449
00:16:35,680 --> 00:16:38,160
to humans that are looking at this text

450
00:16:38,160 --> 00:16:40,800
and techniques that researchers have

451
00:16:40,800 --> 00:16:43,120
tried in the past uh to make uh

452
00:16:43,120 --> 00:16:45,759
perturbations to text include

453
00:16:45,759 --> 00:16:48,160
misspelling words or changing the order

454
00:16:48,160 --> 00:16:50,480
of sentences you know paraphrasing and

455
00:16:50,480 --> 00:16:52,560
things like this but the challenge is

456
00:16:52,560 --> 00:16:54,720
that these are just less compelling

457
00:16:54,720 --> 00:16:56,320
techniques than the image-based

458
00:16:56,320 --> 00:16:58,880
techniques because they make uh visible

459
00:16:58,880 --> 00:17:01,040
changes that are going to be detected by

460
00:17:01,040 --> 00:17:03,600
humans so here's where we get back to

461
00:17:03,600 --> 00:17:06,319
our unicode tricks earlier we decided

462
00:17:06,319 --> 00:17:08,240
that we could change the directionality

463
00:17:08,240 --> 00:17:10,880
of text such that the logical and the

464
00:17:10,880 --> 00:17:12,880
visual order of characters were

465
00:17:12,880 --> 00:17:15,119
different effectively reordering the

466
00:17:15,119 --> 00:17:17,039
characters on the screen now in the

467
00:17:17,039 --> 00:17:19,199
trojan source attack we started with a

468
00:17:19,199 --> 00:17:21,839
desired logical ordering and modified

469
00:17:21,839 --> 00:17:24,319
the visual ordering to suit our purposes

470
00:17:24,319 --> 00:17:26,480
so let's do the exact opposite of that

471
00:17:26,480 --> 00:17:28,960
let's start with a fixed display order

472
00:17:28,960 --> 00:17:31,200
for characters and then modify the

473
00:17:31,200 --> 00:17:33,280
underlying logically encoded order to

474
00:17:33,280 --> 00:17:35,840
suit our needs so recall from the

475
00:17:35,840 --> 00:17:38,720
example earlier that we discussed where

476
00:17:38,720 --> 00:17:42,000
we had a logically encoded string abc

477
00:17:42,000 --> 00:17:44,080
and and you know naturally

478
00:17:44,080 --> 00:17:46,640
displays as abc without any changes to

479
00:17:46,640 --> 00:17:48,960
it uh now let's do the same that we did

480
00:17:48,960 --> 00:17:51,280
before but let's reverse the characters

481
00:17:51,280 --> 00:17:54,160
in the logical encoding to exactly

482
00:17:54,160 --> 00:17:57,280
offset changes in the display order uh

483
00:17:57,280 --> 00:17:59,760
so this means that the text is encoded

484
00:17:59,760 --> 00:18:04,160
as cva but it still displays as abc

485
00:18:04,160 --> 00:18:06,640
so what's the issue here so we've just

486
00:18:06,640 --> 00:18:08,720
demonstrated that we can make invisible

487
00:18:08,720 --> 00:18:10,559
changes to text

488
00:18:10,559 --> 00:18:11,280
and

489
00:18:11,280 --> 00:18:13,120
guess what machine learning models get

490
00:18:13,120 --> 00:18:15,600
extremely confused in the presence of

491
00:18:15,600 --> 00:18:17,520
text that is reordered at the encoding

492
00:18:17,520 --> 00:18:19,760
level so why would anyone want to do

493
00:18:19,760 --> 00:18:21,919
this well let's go back to our good

494
00:18:21,919 --> 00:18:23,679
friend dr evil who i presume is

495
00:18:23,679 --> 00:18:25,200
currently sitting in prison for his

496
00:18:25,200 --> 00:18:26,960
trojan source attacks that he launched

497
00:18:26,960 --> 00:18:29,200
against the xml parser supply chain uh

498
00:18:29,200 --> 00:18:31,280
so these days dr evil spends most of his

499
00:18:31,280 --> 00:18:32,400
time on

500
00:18:32,400 --> 00:18:34,320
social media and he's pretty angry at

501
00:18:34,320 --> 00:18:35,919
the world and he often tries to post

502
00:18:35,919 --> 00:18:38,080
some pretty nasty stuff online you know

503
00:18:38,080 --> 00:18:40,080
hate speech disinformation

504
00:18:40,080 --> 00:18:42,400
violence all of that kind of stuff uh

505
00:18:42,400 --> 00:18:44,480
but fortunately lots of places on the

506
00:18:44,480 --> 00:18:46,559
internet have hate speech detection that

507
00:18:46,559 --> 00:18:48,320
attempts to block things that are either

508
00:18:48,320 --> 00:18:50,160
highly inappropriate or might be

509
00:18:50,160 --> 00:18:53,280
intended to incite violence uh so the

510
00:18:53,280 --> 00:18:55,360
news is almost all of these toxic

511
00:18:55,360 --> 00:18:57,440
content detection systems are powered by

512
00:18:57,440 --> 00:18:59,679
machine learning and it turns out that

513
00:18:59,679 --> 00:19:02,480
dr evil all he has to do is encode his

514
00:19:02,480 --> 00:19:04,320
hate speech using some logical

515
00:19:04,320 --> 00:19:05,679
reorderings

516
00:19:05,679 --> 00:19:07,039
and he'll be able to get past the

517
00:19:07,039 --> 00:19:08,880
undefended toxic content detection

518
00:19:08,880 --> 00:19:11,039
models virtually a hundred percent of

519
00:19:11,039 --> 00:19:12,000
the time

520
00:19:12,000 --> 00:19:15,200
so social media video comments blog

521
00:19:15,200 --> 00:19:17,919
posts dr evil and any other person who

522
00:19:17,919 --> 00:19:19,919
has come across this research can now

523
00:19:19,919 --> 00:19:22,799
just evade toxic content detection and

524
00:19:22,799 --> 00:19:26,000
it turns out that logically reordering

525
00:19:26,000 --> 00:19:27,919
directional control characters is just

526
00:19:27,919 --> 00:19:29,520
one of multiple ways to break machine

527
00:19:29,520 --> 00:19:31,440
learning models you can also inject

528
00:19:31,440 --> 00:19:34,000
invisible characters into text uh which

529
00:19:34,000 --> 00:19:36,080
will have no effect on the rendering of

530
00:19:36,080 --> 00:19:38,320
that text but does indeed change the

531
00:19:38,320 --> 00:19:40,799
underlying encoding uh or if you'd

532
00:19:40,799 --> 00:19:42,799
prefer you can swap out characters with

533
00:19:42,799 --> 00:19:45,679
homoglyphs which are characters that

534
00:19:45,679 --> 00:19:47,919
look the same but different encoded

535
00:19:47,919 --> 00:19:49,760
representations

536
00:19:49,760 --> 00:19:52,480
and if you don't like that you can

537
00:19:52,480 --> 00:19:55,200
actually uh just inject arbitrary text

538
00:19:55,200 --> 00:19:57,840
into your uh your your strings and then

539
00:19:57,840 --> 00:20:00,000
inject some backspace control characters

540
00:20:00,000 --> 00:20:01,919
following that text so that it's removed

541
00:20:01,919 --> 00:20:03,440
before

542
00:20:03,440 --> 00:20:05,280
cool so the bottom line is that there's

543
00:20:05,280 --> 00:20:08,240
lots of ways to use unicode

544
00:20:08,240 --> 00:20:10,960
logical encoding of text without

545
00:20:10,960 --> 00:20:13,120
affecting the way that the text looks

546
00:20:13,120 --> 00:20:15,360
and using these uncommon encoded

547
00:20:15,360 --> 00:20:17,600
representations typically causes machine

548
00:20:17,600 --> 00:20:19,600
learning models to fail

549
00:20:19,600 --> 00:20:22,080
and the uh uh

550
00:20:22,080 --> 00:20:24,159
the best part about these techniques uh

551
00:20:24,159 --> 00:20:26,240
is that they generalize to virtually all

552
00:20:26,240 --> 00:20:28,400
natural language processing systems uh

553
00:20:28,400 --> 00:20:30,320
machine translation textual entailment

554
00:20:30,320 --> 00:20:31,919
toxic content detection aimed entity

555
00:20:31,919 --> 00:20:34,000
recognition sentiment analysis you know

556
00:20:34,000 --> 00:20:36,720
these are just a few of the systems that

557
00:20:36,720 --> 00:20:39,200
we're able to craft examples against and

558
00:20:39,200 --> 00:20:40,799
to make this a little bit more clear

559
00:20:40,799 --> 00:20:43,200
let's look at one particular example uh

560
00:20:43,200 --> 00:20:44,880
let's say that we had a machine

561
00:20:44,880 --> 00:20:46,799
translation model and perhaps it's the

562
00:20:46,799 --> 00:20:49,039
sort of thing that for some crazy reason

563
00:20:49,039 --> 00:20:51,600
we um run invoices through so that we

564
00:20:51,600 --> 00:20:53,520
can read to them in our native language

565
00:20:53,520 --> 00:20:55,760
and uh let's say that in this case we're

566
00:20:55,760 --> 00:20:58,000
inputting english and we are outputting

567
00:20:58,000 --> 00:21:00,240
french

568
00:21:00,240 --> 00:21:02,880
by just putting in a single reordering

569
00:21:02,880 --> 00:21:05,039
control care we can uh change the

570
00:21:05,039 --> 00:21:06,960
underlying logically encoded of the

571
00:21:06,960 --> 00:21:08,640
account number in this theoretical

572
00:21:08,640 --> 00:21:11,840
example such that when the uh french is

573
00:21:11,840 --> 00:21:13,440
spit out the other side of the model

574
00:21:13,440 --> 00:21:15,200
guess what it's gonna take that

575
00:21:15,200 --> 00:21:17,840
logically encoded uh number and all of a

576
00:21:17,840 --> 00:21:19,360
sudden we are saying that we're going to

577
00:21:19,360 --> 00:21:21,600
send money to a different account than

578
00:21:21,600 --> 00:21:23,360
was on the invoice that we sent to this

579
00:21:23,360 --> 00:21:27,679
customer so uh to put this in one

580
00:21:27,679 --> 00:21:29,200
slice way

581
00:21:29,200 --> 00:21:32,240
unicode breaks machine learning

582
00:21:32,240 --> 00:21:32,960
so

583
00:21:32,960 --> 00:21:35,760
uh with all of that uh let me pass the

584
00:21:35,760 --> 00:21:38,030
torch over to rot who's going to

585
00:21:38,030 --> 00:21:39,200
[Music]

586
00:21:39,200 --> 00:21:41,840
the portion of this presentation

587
00:21:41,840 --> 00:21:44,720
ross i will

588
00:21:56,960 --> 00:21:59,840
with the uh

589
00:22:01,600 --> 00:22:02,640
well

590
00:22:02,640 --> 00:22:06,080
yes uh why why is that happening

591
00:22:06,080 --> 00:22:08,640
ah that's why that's happening

592
00:22:08,640 --> 00:22:10,840
let's do

593
00:22:10,840 --> 00:22:13,520
this right can you

594
00:22:13,520 --> 00:22:17,280
can you see the next slide

595
00:22:18,960 --> 00:22:21,440
yes uh ross you are

596
00:22:21,440 --> 00:22:22,559
you are up

597
00:22:22,559 --> 00:22:24,880
i can see your slides and can you see me

598
00:22:24,880 --> 00:22:29,039
slide after that coordinated disclosure

599
00:22:31,039 --> 00:22:33,919
no yes or no

600
00:22:34,400 --> 00:22:36,159
yes okay

601
00:22:36,159 --> 00:22:37,520
okay because it says you're sharing

602
00:22:37,520 --> 00:22:39,360
another application window i take it and

603
00:22:39,360 --> 00:22:43,039
just ignore this and carry on

604
00:22:43,039 --> 00:22:44,080
okay

605
00:22:44,080 --> 00:22:46,240
if something breaks then let me know and

606
00:22:46,240 --> 00:22:48,400
we can fall back to plan b where you'll

607
00:22:48,400 --> 00:22:50,240
drive these slides

608
00:22:50,240 --> 00:22:52,000
and

609
00:22:52,000 --> 00:22:53,120
i will

610
00:22:53,120 --> 00:22:54,640
do the talking

611
00:22:54,640 --> 00:22:55,440
um

612
00:22:55,440 --> 00:22:58,080
through this wonderful internet thing

613
00:22:58,080 --> 00:23:01,200
so um here we have

614
00:23:01,200 --> 00:23:04,400
a class of attacks which can break

615
00:23:04,400 --> 00:23:07,039
software in just about any programming

616
00:23:07,039 --> 00:23:09,360
language that you're likely to use

617
00:23:09,360 --> 00:23:13,039
anything between fortran 4 and haskell

618
00:23:13,039 --> 00:23:14,960
will typically have

619
00:23:14,960 --> 00:23:16,880
unicode support and that means that it

620
00:23:16,880 --> 00:23:19,360
can be attacked using these mechanisms

621
00:23:19,360 --> 00:23:21,440
unless you can somehow block them

622
00:23:21,440 --> 00:23:23,200
whether in the language

623
00:23:23,200 --> 00:23:25,200
or in the development environment or

624
00:23:25,200 --> 00:23:27,600
somewhere else by means of tools

625
00:23:27,600 --> 00:23:29,600
so when we discover something like that

626
00:23:29,600 --> 00:23:31,760
the ethical thing to do of course is

627
00:23:31,760 --> 00:23:34,400
coordinated disclosure and in this case

628
00:23:34,400 --> 00:23:36,799
that proceeded in two phases we

629
00:23:36,799 --> 00:23:38,880
disclosed the bad characters attacks

630
00:23:38,880 --> 00:23:40,799
first because they are the attacks that

631
00:23:40,799 --> 00:23:42,880
we discovered first and then when we

632
00:23:42,880 --> 00:23:45,200
realized that they worked for

633
00:23:45,200 --> 00:23:47,279
source code as well we did a separate

634
00:23:47,279 --> 00:23:49,200
round of coordinated disclosure for

635
00:23:49,200 --> 00:23:51,600
trojan source

636
00:23:51,600 --> 00:23:54,719
can you see the next slide

637
00:23:55,760 --> 00:23:57,120
yes

638
00:23:57,120 --> 00:23:58,559
okay so

639
00:23:58,559 --> 00:24:00,799
one of the things that you

640
00:24:00,799 --> 00:24:03,520
learn through

641
00:24:03,520 --> 00:24:06,240
an exercise like this is who cares

642
00:24:06,240 --> 00:24:08,400
now talking first about the trojan

643
00:24:08,400 --> 00:24:11,120
source uh disclosures there's a number

644
00:24:11,120 --> 00:24:13,440
of ways in which you can do this now the

645
00:24:13,440 --> 00:24:15,679
long-term fix will probably involve

646
00:24:15,679 --> 00:24:18,480
changes to the unicode spec

647
00:24:18,480 --> 00:24:20,559
and nicholas will be happy to talk about

648
00:24:20,559 --> 00:24:22,640
that in the questions afterwards or over

649
00:24:22,640 --> 00:24:24,159
a point or whatever

650
00:24:24,159 --> 00:24:25,279
that is

651
00:24:25,279 --> 00:24:27,360
work in progress and it is

652
00:24:27,360 --> 00:24:29,039
depressingly slow as you would imagine

653
00:24:29,039 --> 00:24:30,799
with a standard's body

654
00:24:30,799 --> 00:24:32,480
another thing you can do is fix it in

655
00:24:32,480 --> 00:24:34,000
the language

656
00:24:34,000 --> 00:24:35,840
you can simply change the language spec

657
00:24:35,840 --> 00:24:39,279
so that it will not um accept anywhere

658
00:24:39,279 --> 00:24:41,919
an unterminated bd command whether in

659
00:24:41,919 --> 00:24:44,880
string literals or in comments

660
00:24:44,880 --> 00:24:46,559
another thing you can do is fix it in

661
00:24:46,559 --> 00:24:48,000
the editor

662
00:24:48,000 --> 00:24:50,159
and this is interesting because it means

663
00:24:50,159 --> 00:24:52,159
that organizations have got a chance to

664
00:24:52,159 --> 00:24:54,640
blame somebody else and this basically

665
00:24:54,640 --> 00:24:56,960
enables you to learn fairly quickly who

666
00:24:56,960 --> 00:24:59,039
actually cares about stuff

667
00:24:59,039 --> 00:25:00,880
and to give you an example of two

668
00:25:00,880 --> 00:25:02,960
extremes when we did our first uh

669
00:25:02,960 --> 00:25:04,880
responsible disclosure

670
00:25:04,880 --> 00:25:06,559
the people who were so eager they almost

671
00:25:06,559 --> 00:25:08,799
bit our hand off for the rust team they

672
00:25:08,799 --> 00:25:10,720
were extremely eager to fix the language

673
00:25:10,720 --> 00:25:13,039
spec and to roll it out

674
00:25:13,039 --> 00:25:14,799
just as quickly as the responsible

675
00:25:14,799 --> 00:25:16,960
disclosure period would allow and they

676
00:25:16,960 --> 00:25:18,640
also let us look through

677
00:25:18,640 --> 00:25:21,039
fast repositories of online codes check

678
00:25:21,039 --> 00:25:22,640
to check that the attack had not yet

679
00:25:22,640 --> 00:25:24,240
been carried out

680
00:25:24,240 --> 00:25:26,480
the other extreme

681
00:25:26,480 --> 00:25:29,200
java which was the latest greatest thing

682
00:25:29,200 --> 00:25:31,039
as rust is now only back in the mid

683
00:25:31,039 --> 00:25:32,720
1990s

684
00:25:32,720 --> 00:25:34,720
is now sort of maintained by oracle

685
00:25:34,720 --> 00:25:36,480
which treats it as a source of rental

686
00:25:36,480 --> 00:25:37,360
income

687
00:25:37,360 --> 00:25:39,600
and the oracle team fairly quickly said

688
00:25:39,600 --> 00:25:41,679
that this isn't our problem this isn't a

689
00:25:41,679 --> 00:25:43,840
bug in java it's a problem for the

690
00:25:43,840 --> 00:25:46,240
editor that you happen to be using

691
00:25:46,240 --> 00:25:48,240
and in between those two extremes there

692
00:25:48,240 --> 00:25:50,720
was a fairly wide range and various

693
00:25:50,720 --> 00:25:53,039
companies acted as you would expect

694
00:25:53,039 --> 00:25:55,440
these companies to behave

695
00:25:55,440 --> 00:25:57,039
amazon is not really part of the

696
00:25:57,039 --> 00:25:59,520
ecosystem apple's extraordinarily

697
00:25:59,520 --> 00:26:01,520
secretive and they acknowledge the

698
00:26:01,520 --> 00:26:03,200
disclosure but didn't say anything about

699
00:26:03,200 --> 00:26:05,440
what they would do or when

700
00:26:05,440 --> 00:26:06,799
various other

701
00:26:06,799 --> 00:26:08,640
firms

702
00:26:08,640 --> 00:26:11,440
either couldn't accept a bug report

703
00:26:11,440 --> 00:26:13,360
because their bug reporting website was

704
00:26:13,360 --> 00:26:15,679
broken or in the case of another large

705
00:26:15,679 --> 00:26:17,679
firm they said

706
00:26:17,679 --> 00:26:19,120
we're not saying you're a bug bounty

707
00:26:19,120 --> 00:26:21,600
because um we know about this bug

708
00:26:21,600 --> 00:26:23,840
already and we said well in that case

709
00:26:23,840 --> 00:26:25,520
what about the following two languages

710
00:26:25,520 --> 00:26:27,760
that you maintained and they said oops

711
00:26:27,760 --> 00:26:31,120
and eventually backtracked

712
00:26:31,440 --> 00:26:34,480
and um so the um

713
00:26:34,480 --> 00:26:38,000
the process of getting um

714
00:26:38,000 --> 00:26:40,720
a vulnerability disclosure acknowledged

715
00:26:40,720 --> 00:26:42,400
and acted on

716
00:26:42,400 --> 00:26:43,760
is

717
00:26:43,760 --> 00:26:46,559
often a long and complex process

718
00:26:46,559 --> 00:26:48,240
and we found that in practice it took

719
00:26:48,240 --> 00:26:51,200
publicity plus contacts plus patients

720
00:26:51,200 --> 00:26:52,880
now um

721
00:26:52,880 --> 00:26:54,240
in the case of

722
00:26:54,240 --> 00:26:57,760
a trojan source vulnerability

723
00:26:57,760 --> 00:27:00,799
sorry were you saying something

724
00:27:01,520 --> 00:27:02,320
okay

725
00:27:02,320 --> 00:27:03,679
in the case of the truth no i think we

726
00:27:03,679 --> 00:27:06,000
had some like there

727
00:27:06,000 --> 00:27:07,440
in the case of the trojan source

728
00:27:07,440 --> 00:27:09,679
vulnerability of course the issue here

729
00:27:09,679 --> 00:27:12,240
is largely about supply chain attacks

730
00:27:12,240 --> 00:27:14,080
i can recall a few years ago we

731
00:27:14,080 --> 00:27:17,039
discovered an attempt to introduce

732
00:27:17,039 --> 00:27:20,000
a vulnerability into webkit and and that

733
00:27:20,000 --> 00:27:22,880
is of course used by um the browsers in

734
00:27:22,880 --> 00:27:25,279
iphones androids and elsewhere and if

735
00:27:25,279 --> 00:27:27,360
this vulnerability had managed to be

736
00:27:27,360 --> 00:27:29,600
smuggled in then the person who had done

737
00:27:29,600 --> 00:27:31,200
that might have been able to sell that

738
00:27:31,200 --> 00:27:33,760
vulnerability for millions of dollars to

739
00:27:33,760 --> 00:27:36,080
one of the tiger arms pandas

740
00:27:36,080 --> 00:27:38,960
and this is the uh case that you're

741
00:27:38,960 --> 00:27:41,200
particularly worried about somebody

742
00:27:41,200 --> 00:27:43,120
might have used this to sneak something

743
00:27:43,120 --> 00:27:45,440
that they then sold and which is being

744
00:27:45,440 --> 00:27:48,880
exploited on a zero day basis

745
00:27:48,880 --> 00:27:51,360
and um

746
00:27:51,360 --> 00:27:53,120
well it's it's it's not the sort of

747
00:27:53,120 --> 00:27:55,919
thing which in itself gives a zero day

748
00:27:55,919 --> 00:27:57,200
it's not something that you can take to

749
00:27:57,200 --> 00:28:00,080
a cyber arms manufacturer

750
00:28:00,080 --> 00:28:03,279
here is a zero click remote exploit bios

751
00:28:03,279 --> 00:28:04,640
and the other thing

752
00:28:04,640 --> 00:28:06,720
about this particular vulnerability is

753
00:28:06,720 --> 00:28:09,279
that it's a new kind of vulnerability

754
00:28:09,279 --> 00:28:12,559
now a significant number of the 19 firms

755
00:28:12,559 --> 00:28:14,640
to which we disclosed

756
00:28:14,640 --> 00:28:16,880
used uh contractors to deal with their

757
00:28:16,880 --> 00:28:19,760
bug bounty programs um hacker one was

758
00:28:19,760 --> 00:28:21,279
the most common but there were a couple

759
00:28:21,279 --> 00:28:22,720
of others

760
00:28:22,720 --> 00:28:23,679
and

761
00:28:23,679 --> 00:28:24,960
the

762
00:28:24,960 --> 00:28:29,960
response from these ten firms

763
00:28:57,279 --> 00:28:59,840
for your contractor and so you write

764
00:28:59,840 --> 00:29:02,720
scopes which um expensive people feel

765
00:29:02,720 --> 00:29:05,600
like um you know zero click remote

766
00:29:05,600 --> 00:29:08,159
exploits of your operating system

767
00:29:08,159 --> 00:29:13,559
looks a bit weird or they're academic um

768
00:29:22,159 --> 00:29:24,840
so the first thing that we

769
00:29:24,840 --> 00:29:27,919
um are difficult if it's not something

770
00:29:27,919 --> 00:29:30,720
that falls into it

771
00:29:30,720 --> 00:29:34,000
well-known um capital

772
00:29:34,000 --> 00:29:36,559
institutional cross-site scripting or

773
00:29:36,559 --> 00:29:38,720
glass property or whatever

774
00:29:38,720 --> 00:29:40,960
anything that requires explanation

775
00:29:40,960 --> 00:29:42,559
for which you don't have a nice proof of

776
00:29:42,559 --> 00:29:47,120
content um then you're going to struggle

777
00:29:47,440 --> 00:29:49,120
the second thing that we

778
00:29:49,120 --> 00:29:51,360
discovered um is that it makes a big

779
00:29:51,360 --> 00:29:54,879
difference once you get a cbe

780
00:30:18,640 --> 00:30:21,640
um

781
00:30:30,559 --> 00:30:33,600
the third thing that we discovered

782
00:30:33,600 --> 00:30:37,360
is that once you're within the sun

783
00:30:37,360 --> 00:30:39,679
can really really help

784
00:30:39,679 --> 00:30:41,440
um and the reason for this is that

785
00:30:41,440 --> 00:30:43,919
they've various back end interest maps

786
00:30:43,919 --> 00:30:46,880
which enabled people to set up

787
00:30:46,880 --> 00:30:48,320
discussion groups

788
00:30:48,320 --> 00:30:51,200
for all the various

789
00:30:52,880 --> 00:30:54,640
once you can get the firmness to whom

790
00:30:54,640 --> 00:30:57,279
you're doing this disclosure um working

791
00:30:57,279 --> 00:30:59,440
together on this discussion group they

792
00:30:59,440 --> 00:31:01,600
can communicate with each other and they

793
00:31:01,600 --> 00:31:04,918
can um

794
00:31:15,279 --> 00:31:16,480
and the

795
00:31:16,480 --> 00:31:19,039
the final

796
00:31:21,279 --> 00:31:24,080
the reason um for this is there are a

797
00:31:24,080 --> 00:31:25,600
number of

798
00:31:25,600 --> 00:31:29,039
developments such as gcc which do not

799
00:31:29,039 --> 00:31:32,640
the mechanism for you some kind of um

800
00:31:32,640 --> 00:31:34,720
responsible disclosure on the basis of

801
00:31:34,720 --> 00:31:36,559
90 day environment

802
00:31:36,559 --> 00:31:40,559
because it happens in gcp

803
00:31:41,519 --> 00:31:45,600
so in order to get a vulnerability

804
00:31:45,600 --> 00:31:48,559
disclosed to the gcc

805
00:31:48,559 --> 00:31:51,360
um what you actually do is you discover

806
00:31:51,360 --> 00:31:53,919
people in red hat who also happen

807
00:31:53,919 --> 00:31:56,000
to work in their spare time

808
00:31:56,000 --> 00:31:58,720
rgb speed therefore they continue their

809
00:31:58,720 --> 00:32:01,120
places

810
00:32:02,960 --> 00:32:06,399
it's actually quite a complex process

811
00:32:06,399 --> 00:32:09,120
very instructive to take a complex

812
00:32:09,120 --> 00:32:11,120
vulnerability through it

813
00:32:11,120 --> 00:32:14,239
which could be fixed by

814
00:32:21,440 --> 00:32:22,880
another thing that really made a

815
00:32:22,880 --> 00:32:25,200
difference

816
00:32:27,039 --> 00:32:30,000
once um we

817
00:32:30,000 --> 00:32:32,000
finished the

818
00:32:32,000 --> 00:32:33,200
period

819
00:32:33,200 --> 00:32:34,480
we got

820
00:32:34,480 --> 00:32:38,399
headline coverage from richmond

821
00:32:38,480 --> 00:32:43,000
so various other um

822
00:33:08,159 --> 00:33:09,679
error messages

823
00:33:09,679 --> 00:33:11,440
in in one case there's

824
00:33:11,440 --> 00:33:13,440
something is done in the linter and

825
00:33:13,440 --> 00:33:14,960
there are also other tools such as

826
00:33:14,960 --> 00:33:17,360
static analysis tools which can point

827
00:33:17,360 --> 00:33:19,519
out that something is askew

828
00:33:19,519 --> 00:33:20,399
so

829
00:33:20,399 --> 00:33:22,960
we have a reasonable grasp i think now

830
00:33:22,960 --> 00:33:25,279
of the trojan source vulnerability it's

831
00:33:25,279 --> 00:33:27,120
not entirely fixed

832
00:33:27,120 --> 00:33:29,360
some of the fixes aren't perfect and you

833
00:33:29,360 --> 00:33:30,720
may always

834
00:33:30,720 --> 00:33:33,039
have a company that's trying to maintain

835
00:33:33,039 --> 00:33:35,760
java code with an obscure editor that

836
00:33:35,760 --> 00:33:38,399
hasn't bothered to fix the vulnerability

837
00:33:38,399 --> 00:33:40,240
in that case i'm afraid you're a sitting

838
00:33:40,240 --> 00:33:41,279
duck

839
00:33:41,279 --> 00:33:43,039
however that isn't all that we learned

840
00:33:43,039 --> 00:33:45,919
from this exercise

841
00:33:45,919 --> 00:33:48,399
let me first show you how a number of

842
00:33:48,399 --> 00:33:49,919
the

843
00:33:49,919 --> 00:33:51,440
the tools did it

844
00:33:51,440 --> 00:33:53,279
github's front end is something that's

845
00:33:53,279 --> 00:33:56,640
very widely used and as you can see

846
00:33:56,640 --> 00:33:58,240
this

847
00:33:58,240 --> 00:34:00,399
throws up

848
00:34:00,399 --> 00:34:02,880
an explicit warning here

849
00:34:02,880 --> 00:34:05,840
in a a banner at the head of the page

850
00:34:05,840 --> 00:34:07,679
and it also reveals the hidden

851
00:34:07,679 --> 00:34:10,239
characters by putting the unicode code

852
00:34:10,239 --> 00:34:11,119
points

853
00:34:11,119 --> 00:34:14,800
with red boxes around them

854
00:34:14,800 --> 00:34:16,079
on rust

855
00:34:16,079 --> 00:34:18,719
there is something similar

856
00:34:18,719 --> 00:34:20,639
and in fact

857
00:34:20,639 --> 00:34:22,560
if we look at uh

858
00:34:22,560 --> 00:34:25,760
git lab and vs code and and gcc uh

859
00:34:25,760 --> 00:34:27,599
there's a great range of error messages

860
00:34:27,599 --> 00:34:29,599
now that which should point out to

861
00:34:29,599 --> 00:34:32,159
anybody who's not entirely asleep um

862
00:34:32,159 --> 00:34:34,159
that the piece of code with the trojan

863
00:34:34,159 --> 00:34:36,159
source exploit in it is something that

864
00:34:36,159 --> 00:34:37,599
should be looked at a little bit more

865
00:34:37,599 --> 00:34:40,079
carefully

866
00:34:40,800 --> 00:34:42,399
so far so good

867
00:34:42,399 --> 00:34:46,000
but what about machine learning

868
00:34:46,079 --> 00:34:48,079
well the obvious way to do a machine

869
00:34:48,079 --> 00:34:50,079
learning defense is to sanitize the

870
00:34:50,079 --> 00:34:51,119
inputs

871
00:34:51,119 --> 00:34:53,839
um there's other things you can try

872
00:34:53,839 --> 00:34:56,239
some machine learning uh people on our

873
00:34:56,239 --> 00:34:58,320
original team said well why can't we

874
00:34:58,320 --> 00:34:59,599
just ocr

875
00:34:59,599 --> 00:35:01,200
why can't we just render the text and

876
00:35:01,200 --> 00:35:03,520
ocr it because then everything gets done

877
00:35:03,520 --> 00:35:05,440
in the um

878
00:35:05,440 --> 00:35:07,040
in the machine learning model and yeah

879
00:35:07,040 --> 00:35:09,200
you can do that but it's it's a bother

880
00:35:09,200 --> 00:35:12,079
it's a lot of work it runs compute and

881
00:35:12,079 --> 00:35:14,720
we've got ways of attacking that too so

882
00:35:14,720 --> 00:35:16,160
the obvious way of doing a machine

883
00:35:16,160 --> 00:35:20,000
learning defense is to sanitize inputs

884
00:35:20,000 --> 00:35:22,320
and um

885
00:35:22,320 --> 00:35:24,880
here's the shocking thing

886
00:35:24,880 --> 00:35:27,119
that although most of the languages and

887
00:35:27,119 --> 00:35:29,440
editors released fixes for these trojan

888
00:35:29,440 --> 00:35:31,280
source vulnerability

889
00:35:31,280 --> 00:35:33,680
either on a disclosure day or within a

890
00:35:33,680 --> 00:35:35,680
couple of months of that

891
00:35:35,680 --> 00:35:38,320
so far there's only one big nlp service

892
00:35:38,320 --> 00:35:40,000
that has done anything to mitigate the

893
00:35:40,000 --> 00:35:42,720
attack on their machine learning models

894
00:35:42,720 --> 00:35:43,680
and

895
00:35:43,680 --> 00:35:45,040
that's google

896
00:35:45,040 --> 00:35:47,760
the other large suppliers of

897
00:35:47,760 --> 00:35:49,280
nlp models

898
00:35:49,280 --> 00:35:52,560
basically haven't done anything at all

899
00:35:52,560 --> 00:35:54,000
so

900
00:35:54,000 --> 00:35:55,760
there's a big question what's going on

901
00:35:55,760 --> 00:35:57,760
here what's the difference

902
00:35:57,760 --> 00:35:58,800
between

903
00:35:58,800 --> 00:36:02,240
machine learning models and regular code

904
00:36:02,240 --> 00:36:04,000
that we can fix regular code but we

905
00:36:04,000 --> 00:36:07,920
can't fix machine learning models

906
00:36:08,800 --> 00:36:10,960
well one of the things that you might

907
00:36:10,960 --> 00:36:12,880
wonder is moving machine learning models

908
00:36:12,880 --> 00:36:15,599
are too expensive to update

909
00:36:15,599 --> 00:36:16,560
well

910
00:36:16,560 --> 00:36:19,440
we hear of the latest models costing a

911
00:36:19,440 --> 00:36:21,599
million dollars worth of electricity and

912
00:36:21,599 --> 00:36:24,240
six months of machine time to train

913
00:36:24,240 --> 00:36:26,880
and in that case updating the model

914
00:36:26,880 --> 00:36:29,200
itself definitely is expensive but you

915
00:36:29,200 --> 00:36:31,839
can sanitize the inputs easily enough

916
00:36:31,839 --> 00:36:33,839
and so why isn't this done

917
00:36:33,839 --> 00:36:35,839
is it that the companies don't know that

918
00:36:35,839 --> 00:36:38,480
address sanitization is necessary

919
00:36:38,480 --> 00:36:40,960
well um if the vendors in question are

920
00:36:40,960 --> 00:36:43,520
ibm and microsoft and google

921
00:36:43,520 --> 00:36:45,040
then they definitely do know that

922
00:36:45,040 --> 00:36:47,280
because ibm and microsoft

923
00:36:47,280 --> 00:36:48,960
were already trading at the time of the

924
00:36:48,960 --> 00:36:51,520
morris worm and google for goodness sake

925
00:36:51,520 --> 00:36:54,000
puts enough effort into sanitizing

926
00:36:54,000 --> 00:36:56,320
inputs to its web forms so that we don't

927
00:36:56,320 --> 00:36:58,240
get hit by cross-site scripting

928
00:36:58,240 --> 00:36:59,599
vulnerabilities

929
00:36:59,599 --> 00:37:01,680
so although the company

930
00:37:01,680 --> 00:37:03,839
itself may understand the need to

931
00:37:03,839 --> 00:37:05,680
sanitize inputs

932
00:37:05,680 --> 00:37:08,800
perhaps the teams

933
00:37:08,800 --> 00:37:10,800
don't do this and at one company where

934
00:37:10,800 --> 00:37:12,720
we spoke to people we heard that the

935
00:37:12,720 --> 00:37:14,720
machine learning and security teams

936
00:37:14,720 --> 00:37:17,760
basically blamed each other and the nlp

937
00:37:17,760 --> 00:37:19,680
said this isn't an nlp problem it's a

938
00:37:19,680 --> 00:37:21,359
security problem stop being annoying

939
00:37:21,359 --> 00:37:23,359
stop bothering me about this

940
00:37:23,359 --> 00:37:25,680
and the security team said you mean

941
00:37:25,680 --> 00:37:27,680
you're taking stuff off the internet and

942
00:37:27,680 --> 00:37:29,200
throwing it directly into your system

943
00:37:29,200 --> 00:37:31,920
without sanitizing it how dumb is that

944
00:37:31,920 --> 00:37:33,520
when that's just so dumb it's not really

945
00:37:33,520 --> 00:37:36,000
a security problem it's an iq problem

946
00:37:36,000 --> 00:37:38,079
and so you end up getting a system of

947
00:37:38,079 --> 00:37:40,560
mutual blaming um with no

948
00:37:40,560 --> 00:37:43,280
suit of the senior vice president um

949
00:37:43,280 --> 00:37:45,520
in a position to roll those things up

950
00:37:45,520 --> 00:37:46,480
and

951
00:37:46,480 --> 00:37:48,640
start to make things happen now we do

952
00:37:48,640 --> 00:37:50,480
know that security and safety are whole

953
00:37:50,480 --> 00:37:53,280
system properties

954
00:37:53,280 --> 00:37:56,400
but who's responsible for which property

955
00:37:56,400 --> 00:37:58,000
of the whole system

956
00:37:58,000 --> 00:37:59,760
now i should mention in passing that

957
00:37:59,760 --> 00:38:02,000
other machine learning teams also tend

958
00:38:02,000 --> 00:38:04,000
to ignore this because we've done a bit

959
00:38:04,000 --> 00:38:06,400
of work recently on adversarial machine

960
00:38:06,400 --> 00:38:09,119
learning for example one of the offers

961
00:38:09,119 --> 00:38:11,520
on the bad character's paper

962
00:38:11,520 --> 00:38:13,760
elias shamilav was sponsored by bosch

963
00:38:13,760 --> 00:38:15,680
who was worried about adversarial

964
00:38:15,680 --> 00:38:17,680
attacks on machine vision

965
00:38:17,680 --> 00:38:19,119
and there

966
00:38:19,119 --> 00:38:22,640
it's often very much simpler to

967
00:38:22,640 --> 00:38:25,839
do the input sanitization outside the

968
00:38:25,839 --> 00:38:28,079
machine learning model and then recover

969
00:38:28,079 --> 00:38:29,599
from attacks on your machine learning

970
00:38:29,599 --> 00:38:32,079
model using other mechanisms in the case

971
00:38:32,079 --> 00:38:34,160
of a car just sound the alarm and get

972
00:38:34,160 --> 00:38:36,400
the driver to take over would be one

973
00:38:36,400 --> 00:38:38,480
example and that's a sensible way of

974
00:38:38,480 --> 00:38:40,640
dealing with very very rare attacks

975
00:38:40,640 --> 00:38:42,320
which would be very expensive to deal

976
00:38:42,320 --> 00:38:44,480
with if you dealt with them using a more

977
00:38:44,480 --> 00:38:48,640
complex model so we are aware of the the

978
00:38:48,640 --> 00:38:50,960
problems in general that the industry

979
00:38:50,960 --> 00:38:53,680
has with doing whole system security

980
00:38:53,680 --> 00:38:55,440
on systems that have got machine

981
00:38:55,440 --> 00:38:58,160
learning components and components built

982
00:38:58,160 --> 00:39:01,520
out of regular code

983
00:39:01,520 --> 00:39:02,880
so um

984
00:39:02,880 --> 00:39:03,920
here's

985
00:39:03,920 --> 00:39:06,160
my suggestions

986
00:39:06,160 --> 00:39:09,760
of topics for future work

987
00:39:09,760 --> 00:39:11,760
on the

988
00:39:11,760 --> 00:39:14,480
dependability maintainability robustness

989
00:39:14,480 --> 00:39:16,320
resilience etc

990
00:39:16,320 --> 00:39:18,480
of systems built out of code versus

991
00:39:18,480 --> 00:39:20,160
systems built using machine learning

992
00:39:20,160 --> 00:39:21,760
models

993
00:39:21,760 --> 00:39:23,599
um here are the sort of things that we

994
00:39:23,599 --> 00:39:25,520
should perhaps be collecting data on and

995
00:39:25,520 --> 00:39:26,960
studying

996
00:39:26,960 --> 00:39:29,200
first what's the cost of an upgrade or a

997
00:39:29,200 --> 00:39:31,040
bug fix

998
00:39:31,040 --> 00:39:33,280
um that could be extremely high if it's

999
00:39:33,280 --> 00:39:35,599
a million dollars to retrain a model it

1000
00:39:35,599 --> 00:39:37,280
could be very low

1001
00:39:37,280 --> 00:39:39,680
if you are doing software as a service

1002
00:39:39,680 --> 00:39:40,800
development

1003
00:39:40,800 --> 00:39:42,560
and you're committing

1004
00:39:42,560 --> 00:39:44,800
tiny little upgrades and bug fixes to

1005
00:39:44,800 --> 00:39:46,079
your product

1006
00:39:46,079 --> 00:39:48,000
several times a day

1007
00:39:48,000 --> 00:39:50,000
what's the time to do an upgrade or bug

1008
00:39:50,000 --> 00:39:50,960
fix

1009
00:39:50,960 --> 00:39:53,680
again if you have to take six months to

1010
00:39:53,680 --> 00:39:56,560
train a model or if you have to wait a

1011
00:39:56,560 --> 00:39:59,359
month before your next update to windows

1012
00:39:59,359 --> 00:40:01,359
then that gives a significant amount of

1013
00:40:01,359 --> 00:40:02,640
latency

1014
00:40:02,640 --> 00:40:05,200
whereas again with software as a service

1015
00:40:05,200 --> 00:40:06,640
you may be in a position to ship

1016
00:40:06,640 --> 00:40:10,560
something on a basis of minutes to hours

1017
00:40:10,560 --> 00:40:12,480
here's another thing that we should be

1018
00:40:12,480 --> 00:40:15,119
looking at what is the culture of c

1019
00:40:15,119 --> 00:40:17,119
coders versus the culture of data

1020
00:40:17,119 --> 00:40:18,319
scientists

1021
00:40:18,319 --> 00:40:20,160
now people who do ml are called

1022
00:40:20,160 --> 00:40:22,160
different things in different companies

1023
00:40:22,160 --> 00:40:25,040
but data scientists tends to be the more

1024
00:40:25,040 --> 00:40:27,839
common term nowadays and it incorporates

1025
00:40:27,839 --> 00:40:29,680
everybody from old-fashioned

1026
00:40:29,680 --> 00:40:32,079
statistics professors to um youngsters

1027
00:40:32,079 --> 00:40:33,359
who play around with deep neural

1028
00:40:33,359 --> 00:40:36,400
networks so there's some diversity there

1029
00:40:36,400 --> 00:40:38,400
um that certainly doesn't seem to be

1030
00:40:38,400 --> 00:40:41,040
have to be the ingrained culture of

1031
00:40:41,040 --> 00:40:43,119
people who work on critical code and

1032
00:40:43,119 --> 00:40:45,200
things like operating systems

1033
00:40:45,200 --> 00:40:48,319
uh where for um at least 20 years now it

1034
00:40:48,319 --> 00:40:49,760
has just been

1035
00:40:49,760 --> 00:40:52,640
how people operate that you have got a

1036
00:40:52,640 --> 00:40:55,040
security development life cycle with

1037
00:40:55,040 --> 00:40:57,280
vulnerability disclosure with regularly

1038
00:40:57,280 --> 00:41:01,760
shipped patches and so on and so forth

1039
00:41:02,079 --> 00:41:06,000
another issue which may be um

1040
00:41:06,000 --> 00:41:08,400
a play here and maybe separate is the

1041
00:41:08,400 --> 00:41:11,280
expectations of dependability

1042
00:41:11,280 --> 00:41:13,839
what do you expect of a system

1043
00:41:13,839 --> 00:41:16,079
and how do you measure it do you measure

1044
00:41:16,079 --> 00:41:18,720
it in terms of the number of crashes

1045
00:41:18,720 --> 00:41:21,920
reported to your servers

1046
00:41:21,920 --> 00:41:23,680
per

1047
00:41:23,680 --> 00:41:26,319
billion user days of your mobile phone

1048
00:41:26,319 --> 00:41:27,760
operating system

1049
00:41:27,760 --> 00:41:29,680
if it's a piece of avionics your

1050
00:41:29,680 --> 00:41:33,200
expectation of dependability would be

1051
00:41:33,200 --> 00:41:35,119
how many thousand dollars mean time to

1052
00:41:35,119 --> 00:41:36,640
failure

1053
00:41:36,640 --> 00:41:37,599
um

1054
00:41:37,599 --> 00:41:40,079
what is the expectation of dependability

1055
00:41:40,079 --> 00:41:42,000
of machine learning models

1056
00:41:42,000 --> 00:41:42,960
um

1057
00:41:42,960 --> 00:41:44,160
how do we

1058
00:41:44,160 --> 00:41:47,680
even reason about that um

1059
00:41:47,680 --> 00:41:50,480
there's an awful lot of philosophers uh

1060
00:41:50,480 --> 00:41:52,960
writing um long-winded papers about

1061
00:41:52,960 --> 00:41:55,680
explainability and ethics and so on of

1062
00:41:55,680 --> 00:41:56,640
ai

1063
00:41:56,640 --> 00:41:58,480
but come on guys where are the metrics

1064
00:41:58,480 --> 00:42:00,240
where are the numbers what sort of

1065
00:42:00,240 --> 00:42:02,000
numbers do you expect in which

1066
00:42:02,000 --> 00:42:03,280
circumstance

1067
00:42:03,280 --> 00:42:05,520
now we already see in debates for

1068
00:42:05,520 --> 00:42:08,079
example over upload filters but there

1069
00:42:08,079 --> 00:42:11,119
are widely varying claims made for the

1070
00:42:11,119 --> 00:42:12,880
false positive rate and the false

1071
00:42:12,880 --> 00:42:15,280
negative rate of for example detecting

1072
00:42:15,280 --> 00:42:17,839
illegal images or subversive speech

1073
00:42:17,839 --> 00:42:18,960
um but

1074
00:42:18,960 --> 00:42:22,160
these tend to be tussle spaces um

1075
00:42:22,160 --> 00:42:24,240
you know the um are things that people

1076
00:42:24,240 --> 00:42:26,079
argue about rather than things that you

1077
00:42:26,079 --> 00:42:28,240
can measure clearly

1078
00:42:28,240 --> 00:42:29,119
with

1079
00:42:29,119 --> 00:42:30,880
experiments that are repeatable by an

1080
00:42:30,880 --> 00:42:33,119
outsider

1081
00:42:33,119 --> 00:42:35,119
another issue is the publicity that you

1082
00:42:35,119 --> 00:42:36,960
get for code bugs versus machine

1083
00:42:36,960 --> 00:42:39,359
learning misbehavior now everybody kind

1084
00:42:39,359 --> 00:42:41,359
of expects that machine learning systems

1085
00:42:41,359 --> 00:42:43,680
will misbehave a bit and there's such an

1086
00:42:43,680 --> 00:42:46,160
enormous literature nowadays on

1087
00:42:46,160 --> 00:42:48,880
adversarial samples in machine learning

1088
00:42:48,880 --> 00:42:50,560
and so many people have written so many

1089
00:42:50,560 --> 00:42:52,319
papers and tried to get press coverage

1090
00:42:52,319 --> 00:42:54,000
in the technical press that people are

1091
00:42:54,000 --> 00:42:55,920
kind of weary about it

1092
00:42:55,920 --> 00:42:58,880
however code bags are still newsworthy

1093
00:42:58,880 --> 00:43:01,280
because new code bugs come along pretty

1094
00:43:01,280 --> 00:43:03,200
well every week that result in real

1095
00:43:03,200 --> 00:43:05,119
exploits that result in real

1096
00:43:05,119 --> 00:43:07,200
embarrassment for real firms and which

1097
00:43:07,200 --> 00:43:10,160
result in for example

1098
00:43:10,160 --> 00:43:12,720
some some new ransomware attack

1099
00:43:12,720 --> 00:43:15,119
so there's a publicity dynamic here as

1100
00:43:15,119 --> 00:43:17,359
well

1101
00:43:17,359 --> 00:43:19,040
the next thing

1102
00:43:19,040 --> 00:43:19,920
to

1103
00:43:19,920 --> 00:43:21,839
explore and to think about is

1104
00:43:21,839 --> 00:43:24,000
competition

1105
00:43:24,000 --> 00:43:25,599
and it's

1106
00:43:25,599 --> 00:43:28,400
ugly stepsister of market power

1107
00:43:28,400 --> 00:43:30,800
now as i mentioned

1108
00:43:30,800 --> 00:43:32,960
we disclosed the trojan source

1109
00:43:32,960 --> 00:43:34,640
vulnerability

1110
00:43:34,640 --> 00:43:37,520
to 19

1111
00:43:37,760 --> 00:43:39,119
different

1112
00:43:39,119 --> 00:43:41,839
maintainers of languages or editors to

1113
00:43:41,839 --> 00:43:43,760
begin with and it got taken up by others

1114
00:43:43,760 --> 00:43:45,280
after that

1115
00:43:45,280 --> 00:43:46,240
but the

1116
00:43:46,240 --> 00:43:48,079
machine learning systems with which we

1117
00:43:48,079 --> 00:43:50,480
experimented were only three

1118
00:43:50,480 --> 00:43:53,119
so that gives you some feel for the fact

1119
00:43:53,119 --> 00:43:54,400
that the

1120
00:43:54,400 --> 00:43:56,880
market for nlp systems is already much

1121
00:43:56,880 --> 00:43:58,800
more concentrated

1122
00:43:58,800 --> 00:44:01,599
and if you're someone like ibm or google

1123
00:44:01,599 --> 00:44:04,880
or microsoft selling an nlp model to

1124
00:44:04,880 --> 00:44:08,079
someone like deloitte who then sells

1125
00:44:08,079 --> 00:44:10,560
to facebook or twitter a hate speech

1126
00:44:10,560 --> 00:44:12,800
removal service there are several links

1127
00:44:12,800 --> 00:44:14,800
in the chain between the people who

1128
00:44:14,800 --> 00:44:17,680
maintain the machine learning model

1129
00:44:17,680 --> 00:44:20,560
and the um

1130
00:44:20,880 --> 00:44:22,960
the the moderators or other people at

1131
00:44:22,960 --> 00:44:24,560
the sharp end are having to deal with

1132
00:44:24,560 --> 00:44:26,720
all the the hate speech and spam and

1133
00:44:26,720 --> 00:44:28,079
abuse

1134
00:44:28,079 --> 00:44:31,440
and so the nlp suppliers are not only

1135
00:44:31,440 --> 00:44:34,480
more powerful they may also be more um

1136
00:44:34,480 --> 00:44:36,560
insulated

1137
00:44:36,560 --> 00:44:38,000
and finally there's an issue of the

1138
00:44:38,000 --> 00:44:39,920
maturity of the technology and of the

1139
00:44:39,920 --> 00:44:41,040
market

1140
00:44:41,040 --> 00:44:42,960
if you're an extremely powerful player

1141
00:44:42,960 --> 00:44:44,800
then it's possible to ignore the market

1142
00:44:44,800 --> 00:44:46,480
for quite some time

1143
00:44:46,480 --> 00:44:48,400
and through the 80s and the 90s

1144
00:44:48,400 --> 00:44:49,920
microsoft basically ignored

1145
00:44:49,920 --> 00:44:52,160
dependability issues and everybody joked

1146
00:44:52,160 --> 00:44:54,800
about the blue screen of death and

1147
00:44:54,800 --> 00:44:56,880
viruses got

1148
00:44:56,880 --> 00:44:58,720
ever more prevalent

1149
00:44:58,720 --> 00:45:02,000
but eventually in 2003 the complaints

1150
00:45:02,000 --> 00:45:03,680
from other ceos have become so

1151
00:45:03,680 --> 00:45:06,560
vociferous that bill gates finally had

1152
00:45:06,560 --> 00:45:08,640
to have his security jihad

1153
00:45:08,640 --> 00:45:10,560
and get everybody at microsoft to wrote

1154
00:45:10,560 --> 00:45:12,640
code to go and do a course in writing

1155
00:45:12,640 --> 00:45:14,079
secure code

1156
00:45:14,079 --> 00:45:15,200
so

1157
00:45:15,200 --> 00:45:18,079
perhaps that is still in our future for

1158
00:45:18,079 --> 00:45:20,640
machine learning

1159
00:45:20,640 --> 00:45:22,480
we can hope that it will happen given

1160
00:45:22,480 --> 00:45:24,560
the concentration of the market

1161
00:45:24,560 --> 00:45:26,800
uh but the question is going to be

1162
00:45:26,800 --> 00:45:28,880
when it when will it happen certainly

1163
00:45:28,880 --> 00:45:30,000
the market

1164
00:45:30,000 --> 00:45:32,400
cannot yet be described as mature

1165
00:45:32,400 --> 00:45:33,839
because people are coming out with all

1166
00:45:33,839 --> 00:45:35,680
sorts of new stuff that gets described

1167
00:45:35,680 --> 00:45:37,200
as machine learning

1168
00:45:37,200 --> 00:45:38,880
and um

1169
00:45:38,880 --> 00:45:41,119
sometimes may even include some machine

1170
00:45:41,119 --> 00:45:44,400
learning components in it

1171
00:45:45,040 --> 00:45:48,079
so what are the takeaways from this talk

1172
00:45:48,079 --> 00:45:50,400
well um the first thing is that unicode

1173
00:45:50,400 --> 00:45:52,240
makes it really easy to hide invisible

1174
00:45:52,240 --> 00:45:55,280
vulnerabilities in source code

1175
00:45:55,280 --> 00:45:57,119
and the second thing is that it makes it

1176
00:45:57,119 --> 00:45:59,200
really easy to break text-based machine

1177
00:45:59,200 --> 00:46:00,960
learning

1178
00:46:00,960 --> 00:46:02,560
and the third thing is that defenses

1179
00:46:02,560 --> 00:46:04,640
exist for both

1180
00:46:04,640 --> 00:46:06,400
and so the big question now is why is

1181
00:46:06,400 --> 00:46:07,920
the machine learning community not

1182
00:46:07,920 --> 00:46:10,000
listening

1183
00:46:10,000 --> 00:46:11,680
and with that

1184
00:46:11,680 --> 00:46:12,800
um

1185
00:46:12,800 --> 00:46:14,640
we've come to the end of the slides and

1186
00:46:14,640 --> 00:46:15,599
it's

1187
00:46:15,599 --> 00:46:19,560
time i believe for questions

1188
00:46:30,720 --> 00:46:32,800
all right uh so i think we've got a

1189
00:46:32,800 --> 00:46:35,200
microphone up here people online

1190
00:46:35,200 --> 00:46:37,599
and can hear if there's any questions um

1191
00:46:37,599 --> 00:46:41,079
please feel free

1192
00:46:41,810 --> 00:46:44,960
[Music]

1193
00:46:49,760 --> 00:46:52,819
[Music]

1194
00:46:52,880 --> 00:46:54,480
as you can see

1195
00:46:54,480 --> 00:46:56,960
the cv entries did you consider one or

1196
00:46:56,960 --> 00:47:00,000
more see that

1197
00:47:00,640 --> 00:47:03,200
yeah i can take that one um

1198
00:47:03,200 --> 00:47:05,280
cwes are interesting so for those that

1199
00:47:05,280 --> 00:47:07,599
aren't familiar with them c

1200
00:47:07,599 --> 00:47:11,280
w are um common weakness enumerate one

1201
00:47:11,280 --> 00:47:15,920
level above cves uh oftentimes a cd will

1202
00:47:15,920 --> 00:47:19,200
be described as sitting under a cwe or

1203
00:47:19,200 --> 00:47:20,800
more than one uh in terms of the

1204
00:47:20,800 --> 00:47:24,240
countries that describe it um

1205
00:47:24,240 --> 00:47:27,440
that that one is tough so cwes take um a

1206
00:47:27,440 --> 00:47:29,280
long time to produce it's not something

1207
00:47:29,280 --> 00:47:32,000
like a cve where um frankly if you if

1208
00:47:32,000 --> 00:47:33,920
you want to go the um

1209
00:47:33,920 --> 00:47:36,480
the the certificate the

1210
00:47:36,480 --> 00:47:38,319
cna that the naming authority of last

1211
00:47:38,319 --> 00:47:40,319
resort um

1212
00:47:40,319 --> 00:47:42,240
you basically send an email and like 30

1213
00:47:42,240 --> 00:47:44,319
minutes later you have a cve number uh

1214
00:47:44,319 --> 00:47:46,319
listed for whatever it is that they do

1215
00:47:46,319 --> 00:47:50,079
if you are talking about having

1216
00:47:50,319 --> 00:47:52,720
a process that involves a whole bunch

1217
00:47:52,720 --> 00:47:54,559
presumably involves interfacing with

1218
00:47:54,559 --> 00:47:56,559
groups like mitre for offended periods

1219
00:47:56,559 --> 00:47:59,599
of times um now it's actually worth

1220
00:47:59,599 --> 00:48:04,240
noting that there is one cwe that is um

1221
00:48:04,240 --> 00:48:06,079
i guess i would describe it as adjacent

1222
00:48:06,079 --> 00:48:08,319
to kind of the trojan source work and i

1223
00:48:08,319 --> 00:48:10,800
say adjacent because it's um uh

1224
00:48:10,800 --> 00:48:13,359
specifically focusing on domains and

1225
00:48:13,359 --> 00:48:15,920
issues with domain spoofing and uh you

1226
00:48:15,920 --> 00:48:18,240
know when you go back um yeah it seems

1227
00:48:18,240 --> 00:48:19,839
like about 20 years ago was the time

1228
00:48:19,839 --> 00:48:21,440
where everyone became really really

1229
00:48:21,440 --> 00:48:23,280
interested in like what does it mean to

1230
00:48:23,280 --> 00:48:25,359
have two domains that look very similar

1231
00:48:25,359 --> 00:48:26,319
like the domains that you would type

1232
00:48:26,319 --> 00:48:28,240
into a web browser it was a classic

1233
00:48:28,240 --> 00:48:31,240
attack um a while back where uh

1234
00:48:31,240 --> 00:48:34,240
paypal.com was spoofed by uh someone

1235
00:48:34,240 --> 00:48:36,079
actually using ascii characters they did

1236
00:48:36,079 --> 00:48:39,040
pay pi like p-a-i instead of p-a-l but

1237
00:48:39,040 --> 00:48:41,200
it looked close enough to paypal that uh

1238
00:48:41,200 --> 00:48:43,520
it resulted in a pretty effective scam

1239
00:48:43,520 --> 00:48:45,359
that uh custom scams to make a

1240
00:48:45,359 --> 00:48:46,480
difference

1241
00:48:46,480 --> 00:48:48,559
a whole bunch of discussions spun out

1242
00:48:48,559 --> 00:48:50,480
from that years of research and how we

1243
00:48:50,480 --> 00:48:52,720
can improve domain security and the

1244
00:48:52,720 --> 00:48:54,480
bottom line is there actually is a cwe

1245
00:48:54,480 --> 00:48:56,160
that says uh

1246
00:48:56,160 --> 00:48:58,400
two strings look very similar to each

1247
00:48:58,400 --> 00:49:00,559
other

1248
00:49:01,040 --> 00:49:04,079
nation uh and that um

1249
00:49:04,079 --> 00:49:06,640
in in my mind it some probably ought to

1250
00:49:06,640 --> 00:49:08,160
be expand

1251
00:49:08,160 --> 00:49:10,400
put together this just cause a problem

1252
00:49:10,400 --> 00:49:12,559
in general not specifically domains but

1253
00:49:12,559 --> 00:49:14,960
um those sort of conversations are not

1254
00:49:14,960 --> 00:49:16,880
things that we think we could have

1255
00:49:16,880 --> 00:49:19,520
within the context of say uh i believe

1256
00:49:19,520 --> 00:49:22,960
we spent 99 days on our coordinated

1257
00:49:22,960 --> 00:49:25,839
yeah it's a really good point and um

1258
00:49:25,839 --> 00:49:26,800
i i

1259
00:49:26,800 --> 00:49:28,400
hope that's something that results in

1260
00:49:28,400 --> 00:49:29,040
the

1261
00:49:29,040 --> 00:49:31,280
i would back that because you know 15

1262
00:49:31,280 --> 00:49:34,400
years ago we were also seeing um

1263
00:49:34,400 --> 00:49:36,079
you know internationalization and

1264
00:49:36,079 --> 00:49:38,800
confusion attacks in like postgresql for

1265
00:49:38,800 --> 00:49:39,760
example

1266
00:49:39,760 --> 00:49:42,960
um but i wanted to hear about um your

1267
00:49:42,960 --> 00:49:47,119
experience um with the unico standard

1268
00:49:47,119 --> 00:49:50,920
if that's not gonna like

1269
00:50:00,210 --> 00:50:03,369
[Music]

1270
00:50:24,480 --> 00:50:28,640
people like that forget the phone

1271
00:50:28,640 --> 00:50:29,920
stations

1272
00:50:29,920 --> 00:50:31,119
and practice

1273
00:50:31,119 --> 00:50:34,319
zuma movie emblem

1274
00:50:34,880 --> 00:50:36,720
what would they like to see i i don't

1275
00:50:36,720 --> 00:50:39,200
know if i can say that's turned into

1276
00:50:39,200 --> 00:50:41,920
anything particularly tangible yet a

1277
00:50:41,920 --> 00:50:44,319
bunch of proposal documents that are you

1278
00:50:44,319 --> 00:50:47,920
know publicly available for

1279
00:50:48,079 --> 00:50:49,839
and it's been really interesting to see

1280
00:50:49,839 --> 00:50:51,760
that process

1281
00:50:51,760 --> 00:50:54,760
but

1282
00:50:58,240 --> 00:51:01,359
there's a question of what does a change

1283
00:51:01,359 --> 00:51:02,640
look like

1284
00:51:02,640 --> 00:51:05,118
right because

1285
00:51:05,200 --> 00:51:06,559
if you um

1286
00:51:06,559 --> 00:51:09,839
just a specification

1287
00:51:17,680 --> 00:51:21,319
manipulate something

1288
00:52:02,800 --> 00:52:05,800
this

1289
00:52:08,079 --> 00:52:11,079
okay

1290
00:52:22,400 --> 00:52:25,400
so

1291
00:52:32,800 --> 00:52:35,800
okay

1292
00:53:15,960 --> 00:53:19,489
[Music]

1293
00:53:27,520 --> 00:53:27,800
thank so

1294
00:53:37,000 --> 00:53:41,599
[Music]

1295
00:54:32,480 --> 00:54:35,480
so

1296
00:54:45,520 --> 00:54:48,520
so

1297
00:55:51,480 --> 00:55:56,389
[Music]

1298
00:56:14,319 --> 00:56:15,119
okay

1299
00:56:15,119 --> 00:56:17,760
um fantastic

1300
00:56:17,760 --> 00:56:19,040
uh yes

1301
00:56:19,040 --> 00:56:19,920
uh

1302
00:56:19,920 --> 00:56:21,839
ross can you hear us sir

1303
00:56:21,839 --> 00:56:23,599
yes yes i can hear you you dropped out

1304
00:56:23,599 --> 00:56:26,559
for three or four minutes

1305
00:56:26,720 --> 00:56:28,559
okay uh ross there was a question

1306
00:56:28,559 --> 00:56:32,400
earlier about uh what sort of changes

1307
00:56:32,400 --> 00:56:33,839
you would like to see through the

1308
00:56:33,839 --> 00:56:37,119
unicode specification

1309
00:56:37,520 --> 00:56:39,200
it talked for just a minute but i'm

1310
00:56:39,200 --> 00:56:42,558
curious if you have any ad

1311
00:56:43,119 --> 00:56:45,839
well if you have characters in the

1312
00:56:45,839 --> 00:56:48,319
unicode specification that do dangerous

1313
00:56:48,319 --> 00:56:50,640
things and specifications should have an

1314
00:56:50,640 --> 00:56:52,880
appropriate warning about them

1315
00:56:52,880 --> 00:56:53,920
um

1316
00:56:53,920 --> 00:56:56,720
it's probably not enough of itself

1317
00:56:56,720 --> 00:56:59,119
um but it's

1318
00:56:59,119 --> 00:57:02,000
useful to have it in the specification

1319
00:57:02,000 --> 00:57:04,960
so that people like us can then go and

1320
00:57:04,960 --> 00:57:07,040
speak to the guys in charge of the spec

1321
00:57:07,040 --> 00:57:09,920
for python or

1322
00:57:09,920 --> 00:57:12,319
javascript or whatever and say oy you

1323
00:57:12,319 --> 00:57:14,240
know you're not standards compliant that

1324
00:57:14,240 --> 00:57:16,640
makes you liable your ass might get sued

1325
00:57:16,640 --> 00:57:19,119
if something goes wrong and that would

1326
00:57:19,119 --> 00:57:20,799
give the developers the necessary

1327
00:57:20,799 --> 00:57:23,119
leverage to go and say to their managers

1328
00:57:23,119 --> 00:57:24,640
we need some budget to go and fix this

1329
00:57:24,640 --> 00:57:27,640
stuff

1330
00:57:28,400 --> 00:57:29,920
right like like us or not large

1331
00:57:29,920 --> 00:57:31,839
corporates tend to be compliance focused

1332
00:57:31,839 --> 00:57:33,200
when

1333
00:57:33,200 --> 00:57:35,680
it comes to

1334
00:57:35,680 --> 00:57:39,799
maintenance effort like this

1335
00:57:46,240 --> 00:57:49,279
can you hear me nicolas

1336
00:58:02,400 --> 00:58:04,799
uh let me ask the following question

1337
00:58:04,799 --> 00:58:08,040
about ross

1338
00:58:09,440 --> 00:58:11,760
sure

1339
00:58:13,839 --> 00:58:15,920
there is a little bit of delay but i'll

1340
00:58:15,920 --> 00:58:17,280
repeat myself

1341
00:58:17,280 --> 00:58:19,760
it seems that we're dealing here with

1342
00:58:19,760 --> 00:58:22,160
the neglected fundamental of distributed

1343
00:58:22,160 --> 00:58:24,720
system engineer

1344
00:58:24,720 --> 00:58:26,799
every

1345
00:58:26,799 --> 00:58:28,480
interpreter

1346
00:58:28,480 --> 00:58:31,760
including humans and editors and every

1347
00:58:31,760 --> 00:58:33,200
other agent

1348
00:58:33,200 --> 00:58:34,839
should in fact be

1349
00:58:34,839 --> 00:58:38,000
demonstrably agreeing

1350
00:58:38,000 --> 00:58:41,680
on the interpretation of any input

1351
00:58:41,680 --> 00:58:45,279
no that's true it seems tricky

1352
00:58:46,960 --> 00:58:49,200
that's way too hard you know almost a

1353
00:58:49,200 --> 00:58:50,799
hundred and fifty thousand unicode

1354
00:58:50,799 --> 00:58:55,119
characters and nobody's gonna do that

1355
00:58:58,559 --> 00:59:01,920
however you would probably agree that uh

1356
00:59:01,920 --> 00:59:06,000
there needs to be a principle that one

1357
00:59:06,000 --> 00:59:08,640
needs to be able to point to

1358
00:59:08,640 --> 00:59:10,480
in such cases

1359
00:59:10,480 --> 00:59:13,200
and this principle seems to be really

1360
00:59:13,200 --> 00:59:14,480
simple

1361
00:59:14,480 --> 00:59:17,520
and as we just found out it's not

1362
00:59:17,520 --> 00:59:19,599
and really fundamental which we just

1363
00:59:19,599 --> 00:59:21,200
found

1364
00:59:21,200 --> 00:59:23,040
well there's there's a principle here

1365
00:59:23,040 --> 00:59:25,200
which is that any system requires

1366
00:59:25,200 --> 00:59:26,960
features until the future interaction

1367
00:59:26,960 --> 00:59:28,960
breaks security and safety

1368
00:59:28,960 --> 00:59:31,040
we've seen this in one area of research

1369
00:59:31,040 --> 00:59:33,359
after another after another even the

1370
00:59:33,359 --> 00:59:35,200
supposedly most secure things in the

1371
00:59:35,200 --> 00:59:37,359
observable universe the hardware

1372
00:59:37,359 --> 00:59:39,359
security modules that banks used to hold

1373
00:59:39,359 --> 00:59:41,280
their cryptographic keys to authenticate

1374
00:59:41,280 --> 00:59:42,240
payments

1375
00:59:42,240 --> 00:59:44,799
uh by the 2000s had acquired so many

1376
00:59:44,799 --> 00:59:47,040
transactions that if you've got a bright

1377
00:59:47,040 --> 00:59:48,799
grad student to stare at the manual for

1378
00:59:48,799 --> 00:59:50,720
two weeks he could say aha do a

1379
00:59:50,720 --> 00:59:52,720
transaction 147 and then track

1380
00:59:52,720 --> 00:59:55,119
transaction 63 and put the results of

1381
00:59:55,119 --> 00:59:56,960
both of them through transaction 347

1382
00:59:56,960 --> 00:59:58,799
then i pops the master keys

1383
00:59:58,799 --> 01:00:01,760
this happens again and again and again

1384
01:00:01,760 --> 01:00:03,520
how do you stop it how do you stop

1385
01:00:03,520 --> 01:00:05,680
feature plot well if you're a company

1386
01:00:05,680 --> 01:00:07,760
like apple and you can have an

1387
01:00:07,760 --> 01:00:10,480
absolutely dominant ceo who is obsessive

1388
01:00:10,480 --> 01:00:12,799
about design

1389
01:00:12,799 --> 01:00:14,559
then maybe you can do it that way but

1390
01:00:14,559 --> 01:00:17,520
that has got very substantial costs uh

1391
01:00:17,520 --> 01:00:18,880
for the whole ecosystem and for

1392
01:00:18,880 --> 01:00:21,599
everybody else

1393
01:00:22,319 --> 01:00:24,400
you know these these are fundamental

1394
01:00:24,400 --> 01:00:27,119
things around the economics of security

1395
01:00:27,119 --> 01:00:28,480
and dependability

1396
01:00:28,480 --> 01:00:30,640
which probably placed long-term limits

1397
01:00:30,640 --> 01:00:31,359
on

1398
01:00:31,359 --> 01:00:33,920
um lifetime of systems ability to

1399
01:00:33,920 --> 01:00:36,960
maintain stuff and so on and so forth

1400
01:00:36,960 --> 01:00:39,520
this is fascinating stuff but it's

1401
01:00:39,520 --> 01:00:41,839
i think it's it's stuff that's studied

1402
01:00:41,839 --> 01:00:43,440
at the workshop and the economics of

1403
01:00:43,440 --> 01:00:45,119
information security rather than at

1404
01:00:45,119 --> 01:00:46,319
langsec

1405
01:00:46,319 --> 01:00:49,200
white by the way is

1406
01:00:49,200 --> 01:00:50,960
next month in tulsa if you want to come

1407
01:00:50,960 --> 01:00:54,160
along please do

1408
01:00:54,240 --> 01:00:56,559
yeah maybe we can have uh a sessional

1409
01:00:56,559 --> 01:00:59,359
economics of lake sac sure does that

1410
01:00:59,359 --> 01:01:02,640
work because you know your entire uh

1411
01:01:02,640 --> 01:01:05,599
uh analysis of the

1412
01:01:05,599 --> 01:01:06,960
response

1413
01:01:06,960 --> 01:01:11,040
seems to be exactly important

1414
01:01:11,040 --> 01:01:12,079
um

1415
01:01:12,079 --> 01:01:14,000
maybe one last question unless there are

1416
01:01:14,000 --> 01:01:15,440
questions from the group

1417
01:01:15,440 --> 01:01:20,440
there's one over here oh okay let me uh

1418
01:01:25,850 --> 01:01:29,119
[Music]

1419
01:01:29,119 --> 01:01:30,640
um did you come across any parts or

1420
01:01:30,640 --> 01:01:32,559
differentials with different editors

1421
01:01:32,559 --> 01:01:34,240
when they were rendering these left to

1422
01:01:34,240 --> 01:01:36,720
right or right to left

1423
01:01:36,720 --> 01:01:38,000
unicode um

1424
01:01:38,000 --> 01:01:38,960
thank you

1425
01:01:38,960 --> 01:01:40,880
yeah

1426
01:01:40,880 --> 01:01:42,880
the question being we see differences

1427
01:01:42,880 --> 01:01:45,520
between editors in uh bi-directionality

1428
01:01:45,520 --> 01:01:47,920
implementation uh yes

1429
01:01:47,920 --> 01:01:50,319
yes absolutely uh and that was one of

1430
01:01:50,319 --> 01:01:51,920
the um

1431
01:01:51,920 --> 01:01:53,040
it was

1432
01:01:53,040 --> 01:01:55,599
both surprising and then uh stepped back

1433
01:01:55,599 --> 01:01:56,799
to think about it for a minute and

1434
01:01:56,799 --> 01:01:58,960
entirely unsurprising at the same time

1435
01:01:58,960 --> 01:02:00,400
so um

1436
01:02:00,400 --> 01:02:02,079
you know let's let's give some examples

1437
01:02:02,079 --> 01:02:05,520
here uh at first when uh we're coming up

1438
01:02:05,520 --> 01:02:07,359
with these trojan source attack examples

1439
01:02:07,359 --> 01:02:09,200
we had some pretty complicated stuff

1440
01:02:09,200 --> 01:02:11,680
that had dozens of different um control

1441
01:02:11,680 --> 01:02:13,359
characters nested within each other on a

1442
01:02:13,359 --> 01:02:16,079
line to have a super fine-grained um you

1443
01:02:16,079 --> 01:02:18,480
know reordering of tokens and it works

1444
01:02:18,480 --> 01:02:21,599
uh fantastic in let's say vs code which

1445
01:02:21,599 --> 01:02:23,920
is uh built using electrons or it runs

1446
01:02:23,920 --> 01:02:25,599
on chromium and chromium we believe

1447
01:02:25,599 --> 01:02:28,079
powers the bi-directional implementation

1448
01:02:28,079 --> 01:02:29,839
but then you take that and you copy it

1449
01:02:29,839 --> 01:02:31,039
over into

1450
01:02:31,039 --> 01:02:33,039
some other application that's perhaps

1451
01:02:33,039 --> 01:02:35,280
more native like

1452
01:02:35,280 --> 01:02:37,039
xcode or something like that

1453
01:02:37,039 --> 01:02:38,720
and all of a sudden it doesn't work

1454
01:02:38,720 --> 01:02:40,160
because now you're using the operating

1455
01:02:40,160 --> 01:02:41,839
system implementation of uh

1456
01:02:41,839 --> 01:02:44,480
bidirectional uh as opposed to

1457
01:02:44,480 --> 01:02:46,880
you know what came from chromium or from

1458
01:02:46,880 --> 01:02:49,200
a web browser and you paste it into some

1459
01:02:49,200 --> 01:02:50,720
webkit based web browser and it's

1460
01:02:50,720 --> 01:02:52,240
totally different now

1461
01:02:52,240 --> 01:02:53,440
so um

1462
01:02:53,440 --> 01:02:55,920
there were two things that that uh that

1463
01:02:55,920 --> 01:02:57,359
did for us so

1464
01:02:57,359 --> 01:02:59,839
one it meant that either we we had to

1465
01:02:59,839 --> 01:03:02,400
stick to really simple example because

1466
01:03:02,400 --> 01:03:04,079
if i if i just set something to right to

1467
01:03:04,079 --> 01:03:05,760
left and then back to left to right like

1468
01:03:05,760 --> 01:03:06,880
that's that's going to be pretty much

1469
01:03:06,880 --> 01:03:07,920
the same everywhere the basic

1470
01:03:07,920 --> 01:03:09,680
functionality doesn't cause a problem

1471
01:03:09,680 --> 01:03:12,160
but um was that if we were going to have

1472
01:03:12,160 --> 01:03:14,000
really complex things where we have like

1473
01:03:14,000 --> 01:03:15,839
dozens of different control characters

1474
01:03:15,839 --> 01:03:17,359
we had to go test them on a whole bunch

1475
01:03:17,359 --> 01:03:19,520
of these different systems and then add

1476
01:03:19,520 --> 01:03:20,400
in

1477
01:03:20,400 --> 01:03:21,920
things that had an effect on one

1478
01:03:21,920 --> 01:03:23,440
platform but didn't have an effect on

1479
01:03:23,440 --> 01:03:25,119
the other platform in order to have this

1480
01:03:25,119 --> 01:03:26,480
monster of a

1481
01:03:26,480 --> 01:03:28,240
code that seemed to work on all of the

1482
01:03:28,240 --> 01:03:31,359
different systems so um like but what

1483
01:03:31,359 --> 01:03:33,680
does that mean in practice unicode does

1484
01:03:33,680 --> 01:03:36,319
um publish a little bit of source code

1485
01:03:36,319 --> 01:03:37,280
that

1486
01:03:37,280 --> 01:03:39,920
handles some rendering

1487
01:03:39,920 --> 01:03:41,839
and control character resolution things

1488
01:03:41,839 --> 01:03:44,559
uh related to unicode but it's not a

1489
01:03:44,559 --> 01:03:46,799
large code based and i think many

1490
01:03:46,799 --> 01:03:48,400
operating systems and large software

1491
01:03:48,400 --> 01:03:50,640
products um choose to implement it

1492
01:03:50,640 --> 01:03:52,640
themselves so yeah what does that look

1493
01:03:52,640 --> 01:03:53,839
like i don't know maybe we need some

1494
01:03:53,839 --> 01:03:56,240
rigorous tests that uh that everyone can

1495
01:03:56,240 --> 01:03:57,920
agree on and have predictable results

1496
01:03:57,920 --> 01:03:59,119
but there's definitely differences in

1497
01:03:59,119 --> 01:04:02,119
implementations

1498
01:04:12,000 --> 01:04:14,480
i was just remarking in the chapter

1499
01:04:14,480 --> 01:04:16,079
that one of the things that we struggled

1500
01:04:16,079 --> 01:04:18,559
with when preparing these slides

1501
01:04:18,559 --> 01:04:22,160
is that we've got that arabic phrase

1502
01:04:22,240 --> 01:04:26,559
on an early slide and all for that

1503
01:04:26,559 --> 01:04:29,039
renders correctly on the standalone

1504
01:04:29,039 --> 01:04:31,440
version of microsoft powerpoint we were

1505
01:04:31,440 --> 01:04:33,280
completely unable to figure out how to

1506
01:04:33,280 --> 01:04:35,680
do it properly on the office 365 version

1507
01:04:35,680 --> 01:04:37,440
of powerpoint which we were using to

1508
01:04:37,440 --> 01:04:39,280
work on the shared slides i mean it

1509
01:04:39,280 --> 01:04:40,880
absolutely insisted on being at the

1510
01:04:40,880 --> 01:04:42,400
right hand side of the phrase which is

1511
01:04:42,400 --> 01:04:44,160
completely wrong for a right-to-left

1512
01:04:44,160 --> 01:04:45,119
text

1513
01:04:45,119 --> 01:04:46,640
so here you've got this amazing

1514
01:04:46,640 --> 01:04:48,480
situation that microsoft of all

1515
01:04:48,480 --> 01:04:49,760
companies a company that's been going

1516
01:04:49,760 --> 01:04:53,119
for 40-odd years and has been selling

1517
01:04:53,119 --> 01:04:55,520
arabic language support for at least 25

1518
01:04:55,520 --> 01:04:57,760
of those years to millions and millions

1519
01:04:57,760 --> 01:04:59,760
of customers in the arab world you know

1520
01:04:59,760 --> 01:05:01,280
not to mention other right to left

1521
01:05:01,280 --> 01:05:03,599
places like israel and pakistan

1522
01:05:03,599 --> 01:05:05,359
cannot get

1523
01:05:05,359 --> 01:05:07,359
you know the rendering of right to left

1524
01:05:07,359 --> 01:05:10,400
punctuation consistently correct in two

1525
01:05:10,400 --> 01:05:12,960
instances of the same product

1526
01:05:12,960 --> 01:05:16,079
now that's an example of how hard it is

1527
01:05:16,079 --> 01:05:18,720
to do design right once you have got

1528
01:05:18,720 --> 01:05:20,559
enormously complex sprawling

1529
01:05:20,559 --> 01:05:22,319
specifications

1530
01:05:22,319 --> 01:05:24,000
and enormously complex sprawling

1531
01:05:24,000 --> 01:05:26,400
products

1532
01:05:33,520 --> 01:05:36,520
or

1533
01:05:39,280 --> 01:05:41,119
language communities

1534
01:05:41,119 --> 01:05:42,640
and you've got positive responses from

1535
01:05:42,640 --> 01:05:44,079
the rust community and the hazard

1536
01:05:44,079 --> 01:05:46,319
community the incorporated changes

1537
01:05:46,319 --> 01:05:47,280
quickly

1538
01:05:47,280 --> 01:05:49,200
which implies that the ecosystem for

1539
01:05:49,200 --> 01:05:52,480
quarantine for um here improving would

1540
01:05:52,480 --> 01:05:54,799
be fixed as well i'm wondering uh what

1541
01:05:54,799 --> 01:05:57,119
about

1542
01:05:57,119 --> 01:06:00,240
yeah no it's it's a good question um so

1543
01:06:00,240 --> 01:06:03,359
yeah uh did we reach out to the

1544
01:06:03,359 --> 01:06:06,240
hero uh no well we did not reach out to

1545
01:06:06,240 --> 01:06:09,520
them so and it was

1546
01:06:09,760 --> 01:06:12,400
just was who who do we reach out to in

1547
01:06:12,400 --> 01:06:15,359
this situation so um we we had a few

1548
01:06:15,359 --> 01:06:17,520
different phases to

1549
01:06:17,520 --> 01:06:19,599
our coordinated disclosure and perhaps

1550
01:06:19,599 --> 01:06:21,440
going into slight more depth than we we

1551
01:06:21,440 --> 01:06:24,640
did initially in the slide so first um

1552
01:06:24,640 --> 01:06:26,240
when we were just messing around and

1553
01:06:26,240 --> 01:06:27,359
realized that there were some

1554
01:06:27,359 --> 01:06:30,319
vulnerabilities here um we looked at c

1555
01:06:30,319 --> 01:06:31,920
in a couple of other languages and said

1556
01:06:31,920 --> 01:06:33,440
okay well clearly there's some impact

1557
01:06:33,440 --> 01:06:35,520
here so let's reach out to the people

1558
01:06:35,520 --> 01:06:37,920
who maintain these tools and then okay

1559
01:06:37,920 --> 01:06:39,039
we start putting a paper together and

1560
01:06:39,039 --> 01:06:40,720
say hey we should be much more rigorous

1561
01:06:40,720 --> 01:06:41,920
and test a whole bunch of different

1562
01:06:41,920 --> 01:06:43,599
tools so we test a whole bunch of others

1563
01:06:43,599 --> 01:06:45,359
and say okay well now since we know

1564
01:06:45,359 --> 01:06:46,720
these are affected let's reach out to

1565
01:06:46,720 --> 01:06:48,160
everyone involved here and that's where

1566
01:06:48,160 --> 01:06:50,079
we step back and say huh

1567
01:06:50,079 --> 01:06:53,119
okay so uh there's probably a

1568
01:06:53,119 --> 01:06:54,960
broader issue and yeah we can reach out

1569
01:06:54,960 --> 01:06:57,039
to 20 different 19 different companies

1570
01:06:57,039 --> 01:06:59,200
or something like that but um you know

1571
01:06:59,200 --> 01:07:00,880
we can't guarantee that that's a

1572
01:07:00,880 --> 01:07:02,880
comprehensive list so at that point we

1573
01:07:02,880 --> 01:07:04,720
reached out to the cert coordination

1574
01:07:04,720 --> 01:07:06,880
center which is a government partnership

1575
01:07:06,880 --> 01:07:07,839
around the

1576
01:07:07,839 --> 01:07:09,039
cmu

1577
01:07:09,039 --> 01:07:10,319
and uh

1578
01:07:10,319 --> 01:07:12,640
that was very interesting because um

1579
01:07:12,640 --> 01:07:15,119
they definitely helped by adding in more

1580
01:07:15,119 --> 01:07:17,920
affected software products than um what

1581
01:07:17,920 --> 01:07:21,359
we initially considered uh but even then

1582
01:07:21,359 --> 01:07:23,680
it definitely wasn't comprehensive and

1583
01:07:23,680 --> 01:07:25,680
um like yeah you provided an example of

1584
01:07:25,680 --> 01:07:26,960
a language that we didn't reach out to

1585
01:07:26,960 --> 01:07:28,319
and i actually don't know what the story

1586
01:07:28,319 --> 01:07:29,599
would be in that language about these

1587
01:07:29,599 --> 01:07:33,200
attacks and that is the case for um

1588
01:07:33,200 --> 01:07:35,359
you know the entire set of languages

1589
01:07:35,359 --> 01:07:37,680
other than we'll talked about uh on uh

1590
01:07:37,680 --> 01:07:40,400
well in the paper so um

1591
01:07:40,400 --> 01:07:42,559
yeah i know that once we released the

1592
01:07:42,559 --> 01:07:44,240
information uh there were a lot of

1593
01:07:44,240 --> 01:07:46,319
different github issues that i saw pop

1594
01:07:46,319 --> 01:07:48,319
up about this attack for languages that

1595
01:07:48,319 --> 01:07:50,720
we hadn't previously considered uh and

1596
01:07:50,720 --> 01:07:51,839
some that

1597
01:07:51,839 --> 01:07:55,680
made changes uh very quickly but um yeah

1598
01:07:55,680 --> 01:07:57,280
we the

1599
01:07:57,280 --> 01:07:58,799
whoa i would have loved to have talked

1600
01:07:58,799 --> 01:08:01,839
to every uh language team uh out there

1601
01:08:01,839 --> 01:08:03,760
uh like there's

1602
01:08:03,760 --> 01:08:06,000
i i'm unaware of a single place that i

1603
01:08:06,000 --> 01:08:07,359
could put information that would get

1604
01:08:07,359 --> 01:08:08,799
stuff to everyone who needs it and

1605
01:08:08,799 --> 01:08:10,160
that's actually perhaps an interesting

1606
01:08:10,160 --> 01:08:12,799
tangent because at least very briefly

1607
01:08:12,799 --> 01:08:15,599
there is a fantastic uh distribution

1608
01:08:15,599 --> 01:08:18,880
list of uh operating system maintainers

1609
01:08:18,880 --> 01:08:20,319
that you can reach out to when you have

1610
01:08:20,319 --> 01:08:22,399
a vulnerability and the intention is you

1611
01:08:22,399 --> 01:08:24,238
know patches should already be available

1612
01:08:24,238 --> 01:08:25,839
reach out when the patches are ready but

1613
01:08:25,839 --> 01:08:28,080
before you go live with it so that these

1614
01:08:28,080 --> 01:08:29,920
os's can have their uh their updates

1615
01:08:29,920 --> 01:08:31,759
ready to go and this is particularly

1616
01:08:31,759 --> 01:08:33,520
poignant for various flavors of linux

1617
01:08:33,520 --> 01:08:34,238
but

1618
01:08:34,238 --> 01:08:36,238
maybe the answer is that we need

1619
01:08:36,238 --> 01:08:38,640
something like that for makers of

1620
01:08:38,640 --> 01:08:41,439
languages um or if it exists already

1621
01:08:41,439 --> 01:08:43,040
that maybe i need to learn about it but

1622
01:08:43,040 --> 01:08:43,839
i i

1623
01:08:43,839 --> 01:08:46,238
haven't been able to find it in fact i

1624
01:08:46,238 --> 01:08:48,880
wouldn't say any data format

1625
01:08:48,880 --> 01:08:51,120
yeah fair yeah it's not exclusively

1626
01:08:51,120 --> 01:08:52,880
languages there were some interesting

1627
01:08:52,880 --> 01:08:54,880
conversations that developed especially

1628
01:08:54,880 --> 01:08:56,960
during the review process for this paper

1629
01:08:56,960 --> 01:08:59,359
about configuration files uh and like

1630
01:08:59,359 --> 01:09:02,640
what does it mean if i have some um i

1631
01:09:02,640 --> 01:09:04,000
don't know

1632
01:09:04,000 --> 01:09:05,679
json or

1633
01:09:05,679 --> 01:09:08,399
demo file or something like that

1634
01:09:08,399 --> 01:09:10,719
it's doing critical task for software

1635
01:09:10,719 --> 01:09:11,759
yeah

1636
01:09:11,759 --> 01:09:13,679
i know you've been really patient thank

1637
01:09:13,679 --> 01:09:16,679
you

1638
01:09:20,319 --> 01:09:22,399
um before your paper was published

1639
01:09:22,399 --> 01:09:24,799
unicode had at least two technical

1640
01:09:24,799 --> 01:09:26,399
reports published by the security

1641
01:09:26,399 --> 01:09:28,960
considerations and security mechanisms

1642
01:09:28,960 --> 01:09:31,198
around unicode

1643
01:09:31,198 --> 01:09:33,439
i will conjecture that by the time

1644
01:09:33,439 --> 01:09:35,600
you're expecting i've read these reports

1645
01:09:35,600 --> 01:09:37,839
in the distant past

1646
01:09:37,839 --> 01:09:40,238
um i will conjecture that by the time

1647
01:09:40,238 --> 01:09:42,799
respect developers read tens of papers

1648
01:09:42,799 --> 01:09:45,040
about security considerations for a

1649
01:09:45,040 --> 01:09:48,319
character set you've already lost

1650
01:09:48,319 --> 01:09:50,799
you're right

1651
01:09:53,279 --> 01:09:55,679
i i mean you know

1652
01:09:55,679 --> 01:09:57,199
i i

1653
01:09:57,199 --> 01:09:59,440
it's great work uh you know

1654
01:09:59,440 --> 01:10:02,320
i just it's

1655
01:10:02,320 --> 01:10:04,159
it's the modern world just hasn't so

1656
01:10:04,159 --> 01:10:07,360
darn complicated and

1657
01:10:07,360 --> 01:10:08,080
what

1658
01:10:08,080 --> 01:10:10,320
yeah

1659
01:10:10,400 --> 01:10:12,560
highlighting

1660
01:10:12,560 --> 01:10:14,159
stanford was asking the interesting

1661
01:10:14,159 --> 01:10:15,760
question here about blog files we're

1662
01:10:15,760 --> 01:10:17,760
having a little side chat

1663
01:10:17,760 --> 01:10:20,159
but i i have the problem in my

1664
01:10:20,159 --> 01:10:21,360
commercial

1665
01:10:21,360 --> 01:10:23,199
i want

1666
01:10:23,199 --> 01:10:24,960
like one reasons why project was so

1667
01:10:24,960 --> 01:10:28,560
problematic is i do not want to sanitize

1668
01:10:28,560 --> 01:10:31,040
input

1669
01:10:32,400 --> 01:10:35,199
i need to be able to log exactly what i

1670
01:10:35,199 --> 01:10:36,400
got

1671
01:10:36,400 --> 01:10:38,560
and i need to be

1672
01:10:38,560 --> 01:10:42,000
exactly what i got

1673
01:10:42,239 --> 01:10:44,000
i i mean that that that's just like a

1674
01:10:44,000 --> 01:10:46,800
very fundamental

1675
01:10:46,800 --> 01:10:49,040
issue

1676
01:10:49,760 --> 01:10:52,080
actually maybe just add a couple of

1677
01:10:52,080 --> 01:10:54,159
thoughts to that so like i completely

1678
01:10:54,159 --> 01:10:56,480
agree with you the unicode specification

1679
01:10:56,480 --> 01:10:58,800
is huge and like to be fair it's huge

1680
01:10:58,800 --> 01:11:00,560
for a reason like there's a lot of

1681
01:11:00,560 --> 01:11:03,040
nuances to every language in the world i

1682
01:11:03,040 --> 01:11:06,080
mean uh they have some ancient

1683
01:11:06,080 --> 01:11:07,920
there that haven't been in use for

1684
01:11:07,920 --> 01:11:10,159
thousands of you know that kind of stuff

1685
01:11:10,159 --> 01:11:12,880
right um but uh

1686
01:11:12,880 --> 01:11:14,400
yeah like what what does that mean in

1687
01:11:14,400 --> 01:11:16,960
practice so my my hope is that if we end

1688
01:11:16,960 --> 01:11:18,239
up with changes to the unicode

1689
01:11:18,239 --> 01:11:19,920
specification that we'll get like a

1690
01:11:19,920 --> 01:11:21,760
little one pager that comes out of it

1691
01:11:21,760 --> 01:11:24,239
saying like yes there's these

1692
01:11:24,239 --> 01:11:26,320
dozens or hundreds of pages that you can

1693
01:11:26,320 --> 01:11:28,239
read about but the back of it probably

1694
01:11:28,239 --> 01:11:29,600
someone has to be somewhere if they're

1695
01:11:29,600 --> 01:11:31,600
building something from scratch but um

1696
01:11:31,600 --> 01:11:33,040
you know if you're someone who maintains

1697
01:11:33,040 --> 01:11:34,960
a code editor who's written an electron

1698
01:11:34,960 --> 01:11:37,600
uh on you know evenings and weekends um

1699
01:11:37,600 --> 01:11:39,040
you know read these three paragraphs and

1700
01:11:39,040 --> 01:11:40,320
it'll give you an idea of what's going

1701
01:11:40,320 --> 01:11:41,840
on and that's that's what i'm really

1702
01:11:41,840 --> 01:11:43,440
hoping for but then the the other thing

1703
01:11:43,440 --> 01:11:45,440
that gives me a little bit of hope is

1704
01:11:45,440 --> 01:11:47,360
this particular attack because it could

1705
01:11:47,360 --> 01:11:49,520
be mitigated at so many different stages

1706
01:11:49,520 --> 01:11:52,000
in uh the pipeline i mean yes you can be

1707
01:11:52,000 --> 01:11:53,840
you can have a code editor uh that can

1708
01:11:53,840 --> 01:11:56,400
uh surface something by you know syntax

1709
01:11:56,400 --> 01:11:58,800
highlighting or or uh potential encoding

1710
01:11:58,800 --> 01:12:00,480
highlighting something like that uh but

1711
01:12:00,480 --> 01:12:01,360
you could do the same thing in a

1712
01:12:01,360 --> 01:12:03,199
repository front end like github's

1713
01:12:03,199 --> 01:12:04,719
website uh but you could also do the

1714
01:12:04,719 --> 01:12:06,560
same thing in a compiler interpreters

1715
01:12:06,560 --> 01:12:08,080
are a little bit weird because does this

1716
01:12:08,080 --> 01:12:10,159
constitute a runtime bug

1717
01:12:10,159 --> 01:12:11,760
uh that that's that's a hard

1718
01:12:11,760 --> 01:12:13,600
conversation but uh and then you've got

1719
01:12:13,600 --> 01:12:16,159
static code analysis which uh is perhaps

1720
01:12:16,159 --> 01:12:17,679
some may argue even the most appropriate

1721
01:12:17,679 --> 01:12:19,040
place for this and not to mention

1722
01:12:19,040 --> 01:12:20,719
language specs if you know programming

1723
01:12:20,719 --> 01:12:22,880
languages changes so like because

1724
01:12:22,880 --> 01:12:24,400
there's so many different places i'm

1725
01:12:24,400 --> 01:12:26,800
hopeful that at least like one entity in

1726
01:12:26,800 --> 01:12:28,880
that pipeline you know pays attention

1727
01:12:28,880 --> 01:12:30,000
but uh

1728
01:12:30,000 --> 01:12:34,440
yeah it's uh it's an uphill battle

1729
01:12:39,760 --> 01:12:41,679
ross by all means feel free to chime in

1730
01:12:41,679 --> 01:12:43,120
and we'll just move here when you start

1731
01:12:43,120 --> 01:12:44,960
talking

1732
01:12:44,960 --> 01:12:46,800
no one it's good for you to handle

1733
01:12:46,800 --> 01:12:48,000
questions because you don't have the

1734
01:12:48,000 --> 01:12:51,840
round trip delay that i have

1735
01:12:52,239 --> 01:12:53,760
sounds good

1736
01:12:53,760 --> 01:12:55,280
do you think there are any legitimate

1737
01:12:55,280 --> 01:12:57,040
use cases to

1738
01:12:57,040 --> 01:12:59,120
nested directionality

1739
01:12:59,120 --> 01:13:01,440
yes yeah so question being are there

1740
01:13:01,440 --> 01:13:03,520
potential legitimate use cases for

1741
01:13:03,520 --> 01:13:05,440
nested directionality i i think the

1742
01:13:05,440 --> 01:13:07,760
answer is yes uh and i think that it

1743
01:13:07,760 --> 01:13:10,000
exists for a reason now um you could

1744
01:13:10,000 --> 01:13:11,679
probably have some reasonable heuristics

1745
01:13:11,679 --> 01:13:14,880
like if i have 20 layers deep of like

1746
01:13:14,880 --> 01:13:17,520
nested bi-directional isolates inside a

1747
01:13:17,520 --> 01:13:19,679
pretty short string that otherwise

1748
01:13:19,679 --> 01:13:22,400
contains only ascii characters like

1749
01:13:22,400 --> 01:13:23,679
yeah i'd be pretty confident that's

1750
01:13:23,679 --> 01:13:26,560
malicious uh but uh

1751
01:13:26,560 --> 01:13:30,080
yeah i mean you can imagine um

1752
01:13:30,080 --> 01:13:33,679
speakers or writers of languages even

1753
01:13:33,679 --> 01:13:35,199
just two languages that have differing

1754
01:13:35,199 --> 01:13:37,440
directionalities and uh you know when

1755
01:13:37,440 --> 01:13:39,600
they try and interweave text from those

1756
01:13:39,600 --> 01:13:41,440
different languages you know quoting one

1757
01:13:41,440 --> 01:13:44,840
inside to the other or things like this

1758
01:13:44,840 --> 01:13:48,640
oftentimes uh uh wordpress

1759
01:13:48,640 --> 01:13:52,239
yeah operating systems will

1760
01:13:53,199 --> 01:13:54,880
that's exactly the difficult case

1761
01:13:54,880 --> 01:13:57,520
because about 40 years ago i was working

1762
01:13:57,520 --> 01:13:59,280
on some typesetting equipment that did

1763
01:13:59,280 --> 01:14:00,880
do bi-directional

1764
01:14:00,880 --> 01:14:03,040
um

1765
01:14:03,040 --> 01:14:05,360
stuff so you could typeset arabic and

1766
01:14:05,360 --> 01:14:07,120
english or hebrew and russian or

1767
01:14:07,120 --> 01:14:08,320
whatever

1768
01:14:08,320 --> 01:14:10,400
in the same page and if you were trying

1769
01:14:10,400 --> 01:14:11,920
to typeset

1770
01:14:11,920 --> 01:14:14,159
an english court in an arabic newspaper

1771
01:14:14,159 --> 01:14:15,840
for example it was

1772
01:14:15,840 --> 01:14:17,920
pretty much a nightmare because you

1773
01:14:17,920 --> 01:14:19,360
ended up having to worry about

1774
01:14:19,360 --> 01:14:21,360
justification of text you know making

1775
01:14:21,360 --> 01:14:23,040
the text align with the edges of the

1776
01:14:23,040 --> 01:14:24,000
columns

1777
01:14:24,000 --> 01:14:25,199
where you would have something going

1778
01:14:25,199 --> 01:14:26,560
right to left and then something going

1779
01:14:26,560 --> 01:14:28,080
left to right and then you'd have to

1780
01:14:28,080 --> 01:14:30,159
juggle it to the right and then pick up

1781
01:14:30,159 --> 01:14:32,560
right to left afterwards so it's it's

1782
01:14:32,560 --> 01:14:35,120
for that that the bi-directional control

1783
01:14:35,120 --> 01:14:38,000
characters basically had to be invented

1784
01:14:38,000 --> 01:14:39,760
um however

1785
01:14:39,760 --> 01:14:41,040
um

1786
01:14:41,040 --> 01:14:42,960
you're writing that the

1787
01:14:42,960 --> 01:14:45,040
a limited amount of nesting should be

1788
01:14:45,040 --> 01:14:47,679
sufficient for such purposes or you

1789
01:14:47,679 --> 01:14:50,960
should um insist that people um use some

1790
01:14:50,960 --> 01:14:54,000
um pseudo or escape sequence to do it

1791
01:14:54,000 --> 01:14:56,800
um or alternatively as we learned in

1792
01:14:56,800 --> 01:14:58,960
fact from interacting with the rust team

1793
01:14:58,960 --> 01:15:00,800
that it is sufficient to stop these

1794
01:15:00,800 --> 01:15:04,480
attacks and source code um if you simply

1795
01:15:04,480 --> 01:15:06,560
um cry follow whenever there's an

1796
01:15:06,560 --> 01:15:08,560
unterminated bd sequence appearing

1797
01:15:08,560 --> 01:15:09,600
anywhere

1798
01:15:09,600 --> 01:15:11,120
and if you see that anywhere you might

1799
01:15:11,120 --> 01:15:12,800
as well just drop that whole source code

1800
01:15:12,800 --> 01:15:14,400
file on the floor

1801
01:15:14,400 --> 01:15:16,800
and sound the alarm so once you start

1802
01:15:16,800 --> 01:15:18,239
looking at the detail there's various

1803
01:15:18,239 --> 01:15:20,879
things you can do

1804
01:15:21,920 --> 01:15:24,800
and i i might just add as a thought

1805
01:15:24,800 --> 01:15:26,960
experiment that was interesting to me uh

1806
01:15:26,960 --> 01:15:28,960
how how quickly you can enter into the

1807
01:15:28,960 --> 01:15:31,760
realm of high complexity for um kind of

1808
01:15:31,760 --> 01:15:33,920
bidirectional issues so like imagine

1809
01:15:33,920 --> 01:15:35,840
someone who's writing a source code file

1810
01:15:35,840 --> 01:15:40,159
who uh is bilingual in uh let's say um

1811
01:15:40,159 --> 01:15:41,360
i don't know

1812
01:15:41,360 --> 01:15:44,239
arabic and um russian or something like

1813
01:15:44,239 --> 01:15:46,400
that uh all of a sudden uh you have

1814
01:15:46,400 --> 01:15:48,080
source code which looks a lot like

1815
01:15:48,080 --> 01:15:49,840
english in a lot of cases

1816
01:15:49,840 --> 01:15:51,920
and then maybe they have a comment that

1817
01:15:51,920 --> 01:15:54,400
uh starts in arabic well now you switch

1818
01:15:54,400 --> 01:15:56,159
directions but then inside that they

1819
01:15:56,159 --> 01:15:58,159
quote something that's in russian uh and

1820
01:15:58,159 --> 01:16:00,640
now they use arabic numerals to describe

1821
01:16:00,640 --> 01:16:02,159
you know it's just like it goes on and

1822
01:16:02,159 --> 01:16:03,440
you've got punctuation and how do you

1823
01:16:03,440 --> 01:16:04,560
make sure the punctuation is on the

1824
01:16:04,560 --> 01:16:06,480
right side of the characters and

1825
01:16:06,480 --> 01:16:08,640
all of a sudden um whether that used for

1826
01:16:08,640 --> 01:16:10,400
use to pressing the special keys to get

1827
01:16:10,400 --> 01:16:11,760
those control characters in there

1828
01:16:11,760 --> 01:16:14,000
whether the os just dumps it in for them

1829
01:16:14,000 --> 01:16:15,440
or the code editor

1830
01:16:15,440 --> 01:16:17,760
and actually there's uh one other small

1831
01:16:17,760 --> 01:16:20,480
interesting point there was um an attack

1832
01:16:20,480 --> 01:16:22,320
uh quite a long time ago it's a really

1833
01:16:22,320 --> 01:16:24,719
fascinating attack i want to say um this

1834
01:16:24,719 --> 01:16:28,000
was in the like 17 18 years ago range

1835
01:16:28,000 --> 01:16:29,920
where someone found that on certain

1836
01:16:29,920 --> 01:16:32,800
versions of windows you could put right

1837
01:16:32,800 --> 01:16:35,280
to left control characters uh in file

1838
01:16:35,280 --> 01:16:36,800
names uh and to make it look like the

1839
01:16:36,800 --> 01:16:38,640
file extension was different than what

1840
01:16:38,640 --> 01:16:40,480
it actually was uh and that worked

1841
01:16:40,480 --> 01:16:42,080
really well with like email attachments

1842
01:16:42,080 --> 01:16:44,400
and drive-by downloads things like this

1843
01:16:44,400 --> 01:16:45,360
uh

1844
01:16:45,360 --> 01:16:48,080
so in response to that it seems that

1845
01:16:48,080 --> 01:16:50,560
some uh pieces of software started

1846
01:16:50,560 --> 01:16:53,360
putting left to right kind of control

1847
01:16:53,360 --> 01:16:55,600
characters inside things that looked

1848
01:16:55,600 --> 01:16:58,080
like file names all the time to prevent

1849
01:16:58,080 --> 01:16:59,920
that from happening and artifacts of

1850
01:16:59,920 --> 01:17:01,520
that are still floating around github

1851
01:17:01,520 --> 01:17:03,760
and other code bases all the time so

1852
01:17:03,760 --> 01:17:06,159
like there's just there's a whole

1853
01:17:06,159 --> 01:17:08,239
mess underneath all of this

1854
01:17:08,239 --> 01:17:10,000
and we haven't started talking about

1855
01:17:10,000 --> 01:17:11,360
homoglyphics

1856
01:17:11,360 --> 01:17:14,239
um you know dropping um the

1857
01:17:14,239 --> 01:17:16,159
the example we had then was the cyrillic

1858
01:17:16,159 --> 01:17:18,320
end in place of the english age

1859
01:17:18,320 --> 01:17:20,640
but there are many many others

1860
01:17:20,640 --> 01:17:22,080
and

1861
01:17:22,080 --> 01:17:23,920
there i mean if you if you read our

1862
01:17:23,920 --> 01:17:25,520
papers you see there are some cases

1863
01:17:25,520 --> 01:17:26,880
where these can be leveraged into

1864
01:17:26,880 --> 01:17:27,840
attacks

1865
01:17:27,840 --> 01:17:30,239
um even on source code they're much more

1866
01:17:30,239 --> 01:17:33,600
common as attacks on um natural language

1867
01:17:33,600 --> 01:17:35,440
processing systems and some of these are

1868
01:17:35,440 --> 01:17:37,679
actually seen occasionally in the wild

1869
01:17:37,679 --> 01:17:39,360
and we have a colleague for example who

1870
01:17:39,360 --> 01:17:41,120
might

1871
01:17:41,120 --> 01:17:42,159
in

1872
01:17:42,159 --> 01:17:43,840
interweave cyrillic and english

1873
01:17:43,840 --> 01:17:45,440
characters in order to stop something

1874
01:17:45,440 --> 01:17:48,000
being automatically translated

1875
01:17:48,000 --> 01:17:50,239
and some people find that useful now

1876
01:17:50,239 --> 01:17:52,560
again you start getting a whole bunch of

1877
01:17:52,560 --> 01:17:54,560
rules for your input filter you might

1878
01:17:54,560 --> 01:17:57,040
decide that you're simply going to alarm

1879
01:17:57,040 --> 01:18:00,239
at and discard any piece of text that

1880
01:18:00,239 --> 01:18:02,560
mixes um characters from two different

1881
01:18:02,560 --> 01:18:05,600
languages in the same world

1882
01:18:05,600 --> 01:18:07,840
you know no no you can have a word can

1883
01:18:07,840 --> 01:18:09,600
be all cyrillic and all or all english

1884
01:18:09,600 --> 01:18:10,880
but not a mix

1885
01:18:10,880 --> 01:18:12,480
but again you would probably find some

1886
01:18:12,480 --> 01:18:14,560
weird edge cases that that

1887
01:18:14,560 --> 01:18:16,320
where that discombobulated a regular

1888
01:18:16,320 --> 01:18:17,360
user

1889
01:18:17,360 --> 01:18:18,640
and again

1890
01:18:18,640 --> 01:18:20,719
um you know how do you go about rolling

1891
01:18:20,719 --> 01:18:23,280
this out at scale um i suspect the big

1892
01:18:23,280 --> 01:18:25,920
nlp firms would really rather not have

1893
01:18:25,920 --> 01:18:28,960
to sit down and think about this

1894
01:18:28,960 --> 01:18:30,719
because it would be complex

1895
01:18:30,719 --> 01:18:33,199
and you'd be risking all sorts of

1896
01:18:33,199 --> 01:18:35,360
unpleasant side effects but it it's

1897
01:18:35,360 --> 01:18:36,880
inevitable that it will eventually have

1898
01:18:36,880 --> 01:18:40,120
to be done

1899
01:18:41,199 --> 01:18:43,120
it may be worth saying as well one of

1900
01:18:43,120 --> 01:18:45,600
the common responses that uh i saw a lot

1901
01:18:45,600 --> 01:18:48,239
of languages um language maintainers

1902
01:18:48,239 --> 01:18:50,880
talking about is well gosh if we put out

1903
01:18:50,880 --> 01:18:53,040
say a compiler error that comes from

1904
01:18:53,040 --> 01:18:55,040
things that look like unterminated

1905
01:18:55,040 --> 01:18:56,880
bi-directional control characters and in

1906
01:18:56,880 --> 01:18:58,719
source code like we're going to end

1907
01:18:58,719 --> 01:19:01,440
breaking a ton of legacy code and worse

1908
01:19:01,440 --> 01:19:02,880
we're going to do it in like very

1909
01:19:02,880 --> 01:19:04,960
specific regions in the world where

1910
01:19:04,960 --> 01:19:06,480
we're more likely to encounter these

1911
01:19:06,480 --> 01:19:07,920
characters and that just feels like

1912
01:19:07,920 --> 01:19:10,719
something we really don't want to do so

1913
01:19:10,719 --> 01:19:12,080
it's hard

1914
01:19:12,080 --> 01:19:14,480
problem

1915
01:19:14,800 --> 01:19:16,400
well they were probably wrong because

1916
01:19:16,400 --> 01:19:18,000
when we went through all the github

1917
01:19:18,000 --> 01:19:20,320
stuff we didn't find a single case of an

1918
01:19:20,320 --> 01:19:23,199
unterminated bd character

1919
01:19:23,199 --> 01:19:25,360
so um i mean that that could have been

1920
01:19:25,360 --> 01:19:28,559
universally deployed

1921
01:19:29,199 --> 01:19:31,600
i i think we've we found unturned in

1922
01:19:31,600 --> 01:19:34,239
malicious environments

1923
01:19:34,239 --> 01:19:37,839
oh okay understand correctly

1924
01:19:41,520 --> 01:19:42,679
in

1925
01:19:42,679 --> 01:19:46,800
keynotes are absolutely everywhere

1926
01:19:46,800 --> 01:19:48,840
right

1927
01:19:48,840 --> 01:19:51,440
thanks oh we will have a

1928
01:19:51,440 --> 01:19:53,520
10 minute break

1929
01:19:53,520 --> 01:19:57,520
at this point and thank you again

1930
01:19:57,600 --> 01:19:59,199
thank you very much

1931
01:19:59,199 --> 01:20:02,440
thank you

