1
00:00:01,360 --> 00:00:03,760
i'm going to give you a presentation

2
00:00:03,760 --> 00:00:06,879
the topic is how to attack and generate

3
00:00:06,879 --> 00:00:08,320
holy words

4
00:00:08,320 --> 00:00:10,080
this is a joint work of our

5
00:00:10,080 --> 00:00:12,240
collaboration with picking university

6
00:00:12,240 --> 00:00:16,079
and food normal university

7
00:00:16,079 --> 00:00:18,480
passwords are ubiquitous in our daily

8
00:00:18,480 --> 00:00:19,920
digital lives

9
00:00:19,920 --> 00:00:22,160
and the password-based authentication

10
00:00:22,160 --> 00:00:24,400
will remain the most widely used

11
00:00:24,400 --> 00:00:26,800
authentication method in the foreseeable

12
00:00:26,800 --> 00:00:28,320
future

13
00:00:28,320 --> 00:00:31,359
well recently billions of passwords were

14
00:00:31,359 --> 00:00:34,399
leaked including some popular websites

15
00:00:34,399 --> 00:00:38,239
for example yahoo twitter linkedin and

16
00:00:38,239 --> 00:00:40,320
dropbox

17
00:00:40,320 --> 00:00:43,600
what's worse websites did not realize it

18
00:00:43,600 --> 00:00:46,000
until months or even years after the

19
00:00:46,000 --> 00:00:47,680
initial data breach

20
00:00:47,680 --> 00:00:50,879
for example the 68 million dropbox

21
00:00:50,879 --> 00:00:54,480
bridge occurred in 2012 yes users are

22
00:00:54,480 --> 00:00:56,480
asked to change their passwords four

23
00:00:56,480 --> 00:00:58,640
years later when the student data

24
00:00:58,640 --> 00:01:03,280
surfaced in the public in may 2016.

25
00:01:03,280 --> 00:01:05,760
a realistic question arises

26
00:01:05,760 --> 00:01:07,760
how to make the data leakage less

27
00:01:07,760 --> 00:01:09,600
disastrous

28
00:01:09,600 --> 00:01:11,920
there are three potential strategies

29
00:01:11,920 --> 00:01:12,880
first

30
00:01:12,880 --> 00:01:15,280
using machine related functions

31
00:01:15,280 --> 00:01:18,479
second sourceholder cryptography

32
00:01:18,479 --> 00:01:20,560
third honeywells

33
00:01:20,560 --> 00:01:23,439
here home words refer to decal passwords

34
00:01:23,439 --> 00:01:27,439
associated with each user account

35
00:01:27,439 --> 00:01:29,360
we compare the three potential

36
00:01:29,360 --> 00:01:32,240
strategies from multiple dimensions such

37
00:01:32,240 --> 00:01:35,280
as client impact server impact and

38
00:01:35,280 --> 00:01:36,960
scalability

39
00:01:36,960 --> 00:01:39,040
from the perspective of security and

40
00:01:39,040 --> 00:01:41,920
usability the first two strategies are

41
00:01:41,920 --> 00:01:45,040
secure but have at least one serious

42
00:01:45,040 --> 00:01:48,320
flaw in usability overall the strategy

43
00:01:48,320 --> 00:01:51,600
of honeywells works the best

44
00:01:51,600 --> 00:01:53,600
the goal of honeywell is to make

45
00:01:53,600 --> 00:01:56,399
password leakage detectable the best

46
00:01:56,399 --> 00:01:58,719
idea is to put a range of holy words in

47
00:01:58,719 --> 00:02:00,240
the password file

48
00:02:00,240 --> 00:02:03,040
however if only hollywood are pleased

49
00:02:03,040 --> 00:02:05,200
the real password will still be directly

50
00:02:05,200 --> 00:02:07,920
exposed and it cannot defend against the

51
00:02:07,920 --> 00:02:09,679
online gating attacks

52
00:02:09,679 --> 00:02:12,080
to address this issue we can put the k

53
00:02:12,080 --> 00:02:14,720
minus one homewords in each account

54
00:02:14,720 --> 00:02:17,280
now the key question arises how to

55
00:02:17,280 --> 00:02:18,959
generate honeywells that are

56
00:02:18,959 --> 00:02:21,440
indistinguishable from real passwords we

57
00:02:21,440 --> 00:02:23,599
will tackle this problem in a principled

58
00:02:23,599 --> 00:02:25,040
approach

59
00:02:25,040 --> 00:02:28,000
to start with we give two examples of

60
00:02:28,000 --> 00:02:30,080
how to generate horny words

61
00:02:30,080 --> 00:02:32,080
the first method is to tweak the

62
00:02:32,080 --> 00:02:34,959
selected positions of the real password

63
00:02:34,959 --> 00:02:37,120
the second method is to replace the

64
00:02:37,120 --> 00:02:39,680
segments with sim time segments

65
00:02:39,680 --> 00:02:42,319
for a given user his real password is

66
00:02:42,319 --> 00:02:45,360
tiger 81 and the rest are the horn words

67
00:02:45,360 --> 00:02:48,000
generated by the two messengers

68
00:02:48,000 --> 00:02:50,000
here honey was and the user's real

69
00:02:50,000 --> 00:02:52,800
passwords are collectively called sweet

70
00:02:52,800 --> 00:02:54,239
words

71
00:02:54,239 --> 00:02:56,319
there are four intentions involved in a

72
00:02:56,319 --> 00:02:59,840
hollywood system a user a server a holy

73
00:02:59,840 --> 00:03:02,159
checker and an attacker

74
00:03:02,159 --> 00:03:04,640
in this figure the attacker has obtained

75
00:03:04,640 --> 00:03:07,120
the sweet word fail offline has the

76
00:03:07,120 --> 00:03:09,120
other user's sweet words

77
00:03:09,120 --> 00:03:11,760
and employed the server as an online

78
00:03:11,760 --> 00:03:13,280
querying oracle

79
00:03:13,280 --> 00:03:15,519
if the attacker uses the honeywell to

80
00:03:15,519 --> 00:03:18,400
log in her online creation attempts will

81
00:03:18,400 --> 00:03:21,040
be detected by the honey checker

82
00:03:21,040 --> 00:03:23,519
if the number of honeywell login exceeds

83
00:03:23,519 --> 00:03:26,159
the single user threshold the attacker

84
00:03:26,159 --> 00:03:28,319
will raise the alarm on the user's

85
00:03:28,319 --> 00:03:31,360
account moreover the attacker will also

86
00:03:31,360 --> 00:03:34,080
cause the system-wide alarm to be raised

87
00:03:34,080 --> 00:03:36,080
if her hollywood logging at times

88
00:03:36,080 --> 00:03:38,799
exceeds the system-wide threshold

89
00:03:38,799 --> 00:03:40,640
here are four honeywell's generation

90
00:03:40,640 --> 00:03:43,200
masters of jews unreversed

91
00:03:43,200 --> 00:03:45,599
we have already introduced the first two

92
00:03:45,599 --> 00:03:48,319
trick-tail and modulus and text for the

93
00:03:48,319 --> 00:03:51,360
third method it's a hybrid method it

94
00:03:51,360 --> 00:03:53,840
first uses the modal in syntax method

95
00:03:53,840 --> 00:03:56,480
and then uses the tweak-tier method for

96
00:03:56,480 --> 00:03:58,879
the last method its main idea is to

97
00:03:58,879 --> 00:04:00,640
generate honeywell as a character by

98
00:04:00,640 --> 00:04:03,040
character through a series of heuristic

99
00:04:03,040 --> 00:04:04,640
steps

100
00:04:04,640 --> 00:04:06,000
in this work

101
00:04:06,000 --> 00:04:08,159
we take a principled approach to

102
00:04:08,159 --> 00:04:09,920
hollywood research

103
00:04:09,920 --> 00:04:13,120
we first address the problem of how best

104
00:04:13,120 --> 00:04:16,079
to attack a given honeywell method and

105
00:04:16,079 --> 00:04:18,399
then design the corresponding homework

106
00:04:18,399 --> 00:04:21,839
method based on leading password models

107
00:04:21,839 --> 00:04:24,479
furthermore we have performed an

108
00:04:24,479 --> 00:04:27,120
intensive evaluation and obtained a

109
00:04:27,120 --> 00:04:30,240
number of insights

110
00:04:30,240 --> 00:04:32,960
we assume that the attacker has somehow

111
00:04:32,960 --> 00:04:35,360
already knew all public information such

112
00:04:35,360 --> 00:04:37,360
as leaked password lists

113
00:04:37,360 --> 00:04:39,360
password policy under the hollywood

114
00:04:39,360 --> 00:04:40,560
method

115
00:04:40,560 --> 00:04:43,120
in the worst case all passwords in the

116
00:04:43,120 --> 00:04:46,000
hashfield were recovered at this time

117
00:04:46,000 --> 00:04:48,560
the attacker will have each user's id

118
00:04:48,560 --> 00:04:51,040
one real password and k minus one holy

119
00:04:51,040 --> 00:04:52,320
word

120
00:04:52,320 --> 00:04:54,160
according to whether or not user

121
00:04:54,160 --> 00:04:56,240
personal information we divide the

122
00:04:56,240 --> 00:04:58,960
attack symbols in totally attacks under

123
00:04:58,960 --> 00:05:00,960
targeted attacks

124
00:05:00,960 --> 00:05:03,600
there are two main goals of our attacker

125
00:05:03,600 --> 00:05:04,479
first

126
00:05:04,479 --> 00:05:07,280
find the real password for a given user

127
00:05:07,280 --> 00:05:11,039
with the least number of guesses x1

128
00:05:11,039 --> 00:05:12,080
second

129
00:05:12,080 --> 00:05:14,880
find as many real passwords as possible

130
00:05:14,880 --> 00:05:18,560
while allowing x2 gases overall

131
00:05:18,560 --> 00:05:21,520
we have proved in our work the two goals

132
00:05:21,520 --> 00:05:23,919
can be best achieved by using the same

133
00:05:23,919 --> 00:05:26,720
attacking strategy

134
00:05:26,720 --> 00:05:29,120
for the metric our work adopts two

135
00:05:29,120 --> 00:05:30,880
evaluation metrics to measure the

136
00:05:30,880 --> 00:05:33,600
advantages of a distinguishing attacker

137
00:05:33,600 --> 00:05:35,840
or equally the goodness of a honeyword

138
00:05:35,840 --> 00:05:38,560
method the first one is the flatness

139
00:05:38,560 --> 00:05:39,680
graph

140
00:05:39,680 --> 00:05:42,400
xy on the graph means writer the real

141
00:05:42,400 --> 00:05:45,440
password is guessed with a probability y

142
00:05:45,440 --> 00:05:47,600
in the first x attempts

143
00:05:47,600 --> 00:05:49,600
this metric provides a view of the

144
00:05:49,600 --> 00:05:51,440
average resistance against a

145
00:05:51,440 --> 00:05:53,520
distinguishable attacker

146
00:05:53,520 --> 00:05:55,600
the second metric is the success number

147
00:05:55,600 --> 00:05:56,560
graph

148
00:05:56,560 --> 00:05:58,960
xy on the graph will be lighter while

149
00:05:58,960 --> 00:06:00,720
real passwords are successfully

150
00:06:00,720 --> 00:06:03,520
distinguished from the system before the

151
00:06:03,520 --> 00:06:06,560
x the honeywell login attempt occurs

152
00:06:06,560 --> 00:06:08,639
this metric measures the worst key

153
00:06:08,639 --> 00:06:10,880
performance of our method

154
00:06:10,880 --> 00:06:13,360
our experiments were built on 11

155
00:06:13,360 --> 00:06:15,120
large-scale data sites

156
00:06:15,120 --> 00:06:17,360
a total of 100 million real-world

157
00:06:17,360 --> 00:06:18,639
passwords

158
00:06:18,639 --> 00:06:20,960
this table summarizes the data size we

159
00:06:20,960 --> 00:06:22,800
used in this work

160
00:06:22,800 --> 00:06:25,520
specifically our password data set

161
00:06:25,520 --> 00:06:28,560
includes 6 from english sites and 5 from

162
00:06:28,560 --> 00:06:30,080
chinese size

163
00:06:30,080 --> 00:06:33,199
4 of our password data size associated

164
00:06:33,199 --> 00:06:34,960
with various kinds of personal

165
00:06:34,960 --> 00:06:36,560
information

166
00:06:36,560 --> 00:06:39,120
the method of generating holy word looks

167
00:06:39,120 --> 00:06:41,199
simple but actually it's rather

168
00:06:41,199 --> 00:06:43,840
challenging here we explain why the key

169
00:06:43,840 --> 00:06:45,759
point in traditional password guessing

170
00:06:45,759 --> 00:06:48,479
attacks is to get guess user's passwords

171
00:06:48,479 --> 00:06:51,599
with as few guesses as possible that is

172
00:06:51,599 --> 00:06:53,360
those passwords according to the

173
00:06:53,360 --> 00:06:56,160
probability from high to low one can use

174
00:06:56,160 --> 00:06:58,800
password probability models like pcfg

175
00:06:58,800 --> 00:07:00,720
and markup

176
00:07:00,720 --> 00:07:02,800
well for hollywood getting attacks the

177
00:07:02,800 --> 00:07:05,360
key pointer is different our goal is to

178
00:07:05,360 --> 00:07:08,160
sort one user's keys with words also to

179
00:07:08,160 --> 00:07:10,000
all users with words

180
00:07:10,000 --> 00:07:12,240
here switch was equal key minus one holy

181
00:07:12,240 --> 00:07:15,599
word and one real password thus we need

182
00:07:15,599 --> 00:07:18,720
to design new probability models

183
00:07:18,720 --> 00:07:21,280
for attack strategies the overall idea

184
00:07:21,280 --> 00:07:23,680
is to first sort the sweet words of each

185
00:07:23,680 --> 00:07:26,160
user and then expand to sort of switch

186
00:07:26,160 --> 00:07:28,240
words of all users

187
00:07:28,240 --> 00:07:30,319
we introduce three proper ballistic

188
00:07:30,319 --> 00:07:33,520
password models they are list psfg and a

189
00:07:33,520 --> 00:07:36,240
markov for least it's a simple is a

190
00:07:36,240 --> 00:07:38,720
useful model the probability of a

191
00:07:38,720 --> 00:07:40,960
password is directly equal to its

192
00:07:40,960 --> 00:07:43,280
relative frequency in the data side for

193
00:07:43,280 --> 00:07:45,680
psfg and markov there are two leading

194
00:07:45,680 --> 00:07:47,520
models widely used in the field of

195
00:07:47,520 --> 00:07:50,160
password guessing by replacing the

196
00:07:50,160 --> 00:07:52,000
personal information in the password

197
00:07:52,000 --> 00:07:54,479
with the tab-based levels

198
00:07:54,479 --> 00:07:56,560
the three models can be applied to the

199
00:07:56,560 --> 00:07:58,639
targeted attack signal

200
00:07:58,639 --> 00:08:01,840
we now formulate water-based attackers

201
00:08:01,840 --> 00:08:03,520
optimal strategy

202
00:08:03,520 --> 00:08:06,720
by proposing theorem 1.

203
00:08:06,720 --> 00:08:10,400
let pw sub a comma g donate the event

204
00:08:10,400 --> 00:08:11,199
that

205
00:08:11,199 --> 00:08:14,800
u sub i selects as w sub a comma g

206
00:08:14,800 --> 00:08:16,720
as her real password

207
00:08:16,720 --> 00:08:20,000
and h w sub a comma t donates the event

208
00:08:20,000 --> 00:08:23,759
that as w sub a comma g is produced as a

209
00:08:23,759 --> 00:08:26,560
holy word for u sub i we have this

210
00:08:26,560 --> 00:08:28,720
formula

211
00:08:28,720 --> 00:08:31,360
this theorem indicates how to find the

212
00:08:31,360 --> 00:08:34,159
user's real password from her swift word

213
00:08:34,159 --> 00:08:35,279
list

214
00:08:35,279 --> 00:08:39,279
we will further simplify this formula

215
00:08:39,279 --> 00:08:42,240
based on theorem 1 we further propose

216
00:08:42,240 --> 00:08:44,399
theorem 2.

217
00:08:44,399 --> 00:08:47,040
let f donate the events data the failed

218
00:08:47,040 --> 00:08:49,680
f is produced as the password file for

219
00:08:49,680 --> 00:08:51,279
all users

220
00:08:51,279 --> 00:08:53,839
and the other definitions complete with

221
00:08:53,839 --> 00:08:55,680
those in serum 1

222
00:08:55,680 --> 00:08:58,320
we have this formula

223
00:08:58,320 --> 00:09:01,360
this theorem indicates data finding the

224
00:09:01,360 --> 00:09:04,240
most probable password can be reduced

225
00:09:04,240 --> 00:09:06,720
into first finding the most probable

226
00:09:06,720 --> 00:09:09,839
password within each switchboard list

227
00:09:09,839 --> 00:09:11,839
and then ranking these candidate

228
00:09:11,839 --> 00:09:13,279
passwords

229
00:09:13,279 --> 00:09:16,320
in this slide attacker's two goals can

230
00:09:16,320 --> 00:09:18,720
be essentially achieved by using the

231
00:09:18,720 --> 00:09:22,320
same attacking strategy

232
00:09:22,320 --> 00:09:24,240
we now summarize the four properties

233
00:09:24,240 --> 00:09:26,480
that a hollywood method may have

234
00:09:26,480 --> 00:09:28,720
these properties can be used to classify

235
00:09:28,720 --> 00:09:30,720
existing honeywell methods into two

236
00:09:30,720 --> 00:09:33,200
cases and then we simplify the

237
00:09:33,200 --> 00:09:35,600
computation of the formula in serum 1

238
00:09:35,600 --> 00:09:37,200
for each case

239
00:09:37,200 --> 00:09:40,160
the property once is that any sweet word

240
00:09:40,160 --> 00:09:42,320
can generate any other sweet word in a

241
00:09:42,320 --> 00:09:45,519
sweet word list here the t is the set of

242
00:09:45,519 --> 00:09:48,959
three words obtainable form password x

243
00:09:48,959 --> 00:09:51,040
the property truth is that every

244
00:09:51,040 --> 00:09:53,040
sweetwater can be generated by any

245
00:09:53,040 --> 00:09:54,640
confident password with equal

246
00:09:54,640 --> 00:09:56,240
probability

247
00:09:56,240 --> 00:09:58,160
note that all honeywell generation

248
00:09:58,160 --> 00:10:01,760
methods we discuss satisfy p1 and p2

249
00:10:01,760 --> 00:10:03,920
the properties with this data every

250
00:10:03,920 --> 00:10:06,320
source word generates all sweet words in

251
00:10:06,320 --> 00:10:08,399
its required space with the same

252
00:10:08,399 --> 00:10:09,760
probability

253
00:10:09,760 --> 00:10:12,000
all no password model based on myself

254
00:10:12,000 --> 00:10:13,839
like a tweak entails the strategy's

255
00:10:13,839 --> 00:10:14,959
property

256
00:10:14,959 --> 00:10:17,279
the property force resides holding words

257
00:10:17,279 --> 00:10:20,800
are unrelated with the real password

258
00:10:20,800 --> 00:10:22,880
for honeywell the generation methods

259
00:10:22,880 --> 00:10:26,800
that satisfy the properties p1 to p3

260
00:10:26,800 --> 00:10:30,640
we can get this simplified formula

261
00:10:30,640 --> 00:10:32,800
the variables on the left side of the

262
00:10:32,800 --> 00:10:35,120
equation can be obtained by various

263
00:10:35,120 --> 00:10:37,120
probability models

264
00:10:37,120 --> 00:10:38,880
it suggests that

265
00:10:38,880 --> 00:10:41,040
for this hollywood method to achieve

266
00:10:41,040 --> 00:10:42,720
perfect flatness

267
00:10:42,720 --> 00:10:45,120
all key sweet words in the list

268
00:10:45,120 --> 00:10:47,360
shall have an equal probability to be

269
00:10:47,360 --> 00:10:50,560
selected as user's real password

270
00:10:50,560 --> 00:10:53,839
in other words given the real password a

271
00:10:53,839 --> 00:10:56,399
honeywell generation method needs to

272
00:10:56,399 --> 00:10:58,880
produce k minus one honeywell

273
00:10:58,880 --> 00:11:01,519
with equal probability to be this user's

274
00:11:01,519 --> 00:11:03,600
password

275
00:11:03,600 --> 00:11:06,320
for methods that satisfy the properties

276
00:11:06,320 --> 00:11:10,399
p1 p2 and p4 we can simplify the formula

277
00:11:10,399 --> 00:11:12,959
in theorem 1 to this form

278
00:11:12,959 --> 00:11:15,600
similarly the variables on the right

279
00:11:15,600 --> 00:11:18,240
side of the equation can be obtained by

280
00:11:18,240 --> 00:11:20,240
various password models and

281
00:11:20,240 --> 00:11:23,440
corresponding onward generation measures

282
00:11:23,440 --> 00:11:26,959
it points out how to best attack all our

283
00:11:26,959 --> 00:11:29,200
honeywell generation measures

284
00:11:29,200 --> 00:11:31,680
here homeworks are independent of the

285
00:11:31,680 --> 00:11:33,519
user's real password

286
00:11:33,519 --> 00:11:36,160
on this basis we can get the basic

287
00:11:36,160 --> 00:11:39,120
design principles

288
00:11:39,120 --> 00:11:41,839
specifically the best design principle

289
00:11:41,839 --> 00:11:44,959
is that the probability of the holy word

290
00:11:44,959 --> 00:11:47,760
should be as consistent as possible with

291
00:11:47,760 --> 00:11:49,519
a real password

292
00:11:49,519 --> 00:11:52,639
thus we get this equation

293
00:11:52,639 --> 00:11:55,360
considering that every model is not good

294
00:11:55,360 --> 00:11:58,959
enough for example list model cannot

295
00:11:58,959 --> 00:12:01,360
generate passwords not in the training

296
00:12:01,360 --> 00:12:02,320
set

297
00:12:02,320 --> 00:12:05,920
for pcfg it cannot generate structures

298
00:12:05,920 --> 00:12:08,880
that do not exist in the training set

299
00:12:08,880 --> 00:12:12,560
for macro it seriously underestimates

300
00:12:12,560 --> 00:12:15,600
the probability of some long passwords

301
00:12:15,600 --> 00:12:17,120
as a result

302
00:12:17,120 --> 00:12:19,760
we can use a header method to generate a

303
00:12:19,760 --> 00:12:21,760
holy word

304
00:12:21,760 --> 00:12:23,519
according to different information

305
00:12:23,519 --> 00:12:26,079
available to the attacker we can divide

306
00:12:26,079 --> 00:12:29,279
the attacker into four tabs in reality

307
00:12:29,279 --> 00:12:31,440
under different kind of attacker the

308
00:12:31,440 --> 00:12:34,079
best attacker will be different

309
00:12:34,079 --> 00:12:36,880
to resist this different best attacker

310
00:12:36,880 --> 00:12:38,800
we need a different best hollywood

311
00:12:38,800 --> 00:12:41,519
method the table below is the overview

312
00:12:41,519 --> 00:12:43,680
of our four new honeywell generation

313
00:12:43,680 --> 00:12:44,880
methods

314
00:12:44,880 --> 00:12:47,120
here we will focus on the introduction

315
00:12:47,120 --> 00:12:49,920
of hybrid methods

316
00:12:49,920 --> 00:12:53,040
specifically we first randomly select a

317
00:12:53,040 --> 00:12:56,880
model from list psfg and markup and then

318
00:12:56,880 --> 00:12:58,800
generate her homework based on the

319
00:12:58,800 --> 00:13:00,320
selected model

320
00:13:00,320 --> 00:13:02,720
in this way the probability of a

321
00:13:02,720 --> 00:13:06,079
password is underestimated only if is

322
00:13:06,079 --> 00:13:09,120
underestimated by all three models

323
00:13:09,120 --> 00:13:10,959
although there are still some passwords

324
00:13:10,959 --> 00:13:13,279
with underestimated probability the

325
00:13:13,279 --> 00:13:16,160
proportion has significantly decreased

326
00:13:16,160 --> 00:13:19,440
note that our method is highly adaptive

327
00:13:19,440 --> 00:13:22,240
that is future improvements or password

328
00:13:22,240 --> 00:13:24,480
models like deep learning based models

329
00:13:24,480 --> 00:13:27,279
can be included easily

330
00:13:27,279 --> 00:13:30,639
now we present the attack results

331
00:13:30,639 --> 00:13:33,279
in total attack scenarios with a guest

332
00:13:33,279 --> 00:13:34,480
number is 1

333
00:13:34,480 --> 00:13:37,360
the probability of success is about 7

334
00:13:37,360 --> 00:13:39,279
percent

335
00:13:39,279 --> 00:13:41,839
when the attacker is allowed 10 000

336
00:13:41,839 --> 00:13:43,120
guesses

337
00:13:43,120 --> 00:13:45,680
the number of successful guesses is no

338
00:13:45,680 --> 00:13:49,199
more than 300 and the success rate is

339
00:13:49,199 --> 00:13:53,040
less than seven point two percent

340
00:13:53,040 --> 00:13:55,839
in targeted attack scenarios we generate

341
00:13:55,839 --> 00:13:57,600
honeywells using the corresponding

342
00:13:57,600 --> 00:13:59,760
target password guessing models

343
00:13:59,760 --> 00:14:02,240
for the flatteners when the guess number

344
00:14:02,240 --> 00:14:05,279
is 1 the probability of success is less

345
00:14:05,279 --> 00:14:08,880
than 12.1 percent for the success number

346
00:14:08,880 --> 00:14:11,040
when an attacker is allowed 10 thousand

347
00:14:11,040 --> 00:14:13,600
gases the number of successful guesses

348
00:14:13,600 --> 00:14:16,399
is no more than 6300

349
00:14:16,399 --> 00:14:19,360
and the success rate is less than 8.7

350
00:14:19,360 --> 00:14:20,880
percent

351
00:14:20,880 --> 00:14:23,279
well our methods can provide desirable

352
00:14:23,279 --> 00:14:25,839
security against the computer automated

353
00:14:25,839 --> 00:14:26,959
attackers

354
00:14:26,959 --> 00:14:29,120
whether the conclusion still holds under

355
00:14:29,120 --> 00:14:31,839
semantically aware humans is unknown

356
00:14:31,839 --> 00:14:32,720
thus

357
00:14:32,720 --> 00:14:35,440
we recruit 11 graduate students

358
00:14:35,440 --> 00:14:37,440
who are taking a network security

359
00:14:37,440 --> 00:14:40,800
seminar to participate in our evaluation

360
00:14:40,800 --> 00:14:42,880
our masters achieve our most perfect

361
00:14:42,880 --> 00:14:43,920
reflection

362
00:14:43,920 --> 00:14:45,920
under no personal information aware

363
00:14:45,920 --> 00:14:47,360
attackers

364
00:14:47,360 --> 00:14:49,360
even when attackers are personal

365
00:14:49,360 --> 00:14:51,760
information aware our corresponding

366
00:14:51,760 --> 00:14:56,560
methods still achieve 0.09 flatness

367
00:14:56,560 --> 00:14:59,120
in future work some issues still remain

368
00:14:59,120 --> 00:15:01,600
to be addressed for example

369
00:15:01,600 --> 00:15:04,399
how to perform the optimal combination

370
00:15:04,399 --> 00:15:06,320
of each model

371
00:15:06,320 --> 00:15:07,440
that is

372
00:15:07,440 --> 00:15:11,040
how to choose alpha beta and gamma

373
00:15:11,040 --> 00:15:13,760
further how to desire better password

374
00:15:13,760 --> 00:15:16,639
probability models

375
00:15:16,639 --> 00:15:21,000
that's all thank you for your listening

376
00:15:22,070 --> 00:15:25,989
[Applause]

377
00:15:30,320 --> 00:15:32,560
all right we have one of the authors

378
00:15:32,560 --> 00:15:36,000
yuankai here with us

379
00:15:36,240 --> 00:15:38,000
oh yes

380
00:15:38,000 --> 00:15:41,240
any questions

381
00:15:46,320 --> 00:15:48,880
okay i'll start with uh one um

382
00:15:48,880 --> 00:15:51,279
have you thought about using generative

383
00:15:51,279 --> 00:15:52,880
adversarial network

384
00:15:52,880 --> 00:15:56,320
to produce honey words

385
00:15:58,560 --> 00:16:00,800
do you think it's a

386
00:16:00,800 --> 00:16:03,440
good idea and easy to apply or is there

387
00:16:03,440 --> 00:16:04,560
any

388
00:16:04,560 --> 00:16:06,839
subtlety or difficulty that you

389
00:16:06,839 --> 00:16:10,240
foresee uh yes deep learning is indeed a

390
00:16:10,240 --> 00:16:13,040
good good idea to generate homework but

391
00:16:13,040 --> 00:16:15,680
actually when when we're using different

392
00:16:15,680 --> 00:16:17,920
name-based models

393
00:16:17,920 --> 00:16:19,519
there are some things we should to

394
00:16:19,519 --> 00:16:21,440
notice for example

395
00:16:21,440 --> 00:16:24,560
uh we should first judge that the deep

396
00:16:24,560 --> 00:16:27,040
learning method is real password release

397
00:16:27,040 --> 00:16:30,480
or real password related unrelated uh

398
00:16:30,480 --> 00:16:33,120
this this year is very important

399
00:16:33,120 --> 00:16:35,199
if you if we use a deep learning based

400
00:16:35,199 --> 00:16:37,680
model

401
00:16:37,680 --> 00:16:40,079
the property the pro the property is

402
00:16:40,079 --> 00:16:41,920
this model has is to

403
00:16:41,920 --> 00:16:44,800
use the use the specific user's real

404
00:16:44,800 --> 00:16:47,440
password to generate his

405
00:16:47,440 --> 00:16:49,839
uh honeywell then i think this way is

406
00:16:49,839 --> 00:16:51,759
not a good idea

407
00:16:51,759 --> 00:16:54,639
because if we use a method that is

408
00:16:54,639 --> 00:16:57,680
related to the user real password

409
00:16:57,680 --> 00:17:00,240
there are some uh certain cell channel

410
00:17:00,240 --> 00:17:02,800
information will be linked for example

411
00:17:02,800 --> 00:17:04,720
the character for the the character

412
00:17:04,720 --> 00:17:06,319
information the loss information of our

413
00:17:06,319 --> 00:17:08,400
password so i think that using deep

414
00:17:08,400 --> 00:17:10,720
learning is a future worker it must be

415
00:17:10,720 --> 00:17:13,280
or it should it should be or it would

416
00:17:13,280 --> 00:17:16,079
would be better if the this method is

417
00:17:16,079 --> 00:17:19,599
your password i really theater

418
00:17:19,599 --> 00:17:21,839
thanks

419
00:17:23,199 --> 00:17:25,599
hey so my question is about passwords

420
00:17:25,599 --> 00:17:27,599
are often shared across different

421
00:17:27,599 --> 00:17:29,679
websites so

422
00:17:29,679 --> 00:17:31,760
how does your model consider those as

423
00:17:31,760 --> 00:17:34,240
well like an attacker gets the password

424
00:17:34,240 --> 00:17:36,240
list and tries different passwords at

425
00:17:36,240 --> 00:17:38,799
different websites

426
00:17:38,799 --> 00:17:40,000
uh

427
00:17:40,000 --> 00:17:42,240
could you please see your question again

428
00:17:42,240 --> 00:17:43,039
so

429
00:17:43,039 --> 00:17:45,120
often time the passwords will be shared

430
00:17:45,120 --> 00:17:47,520
across different websites let's say user

431
00:17:47,520 --> 00:17:49,360
has the same passwords for google and

432
00:17:49,360 --> 00:17:51,760
also facebook and you get the password

433
00:17:51,760 --> 00:17:53,600
list from one of the servers and then

434
00:17:53,600 --> 00:17:55,200
you try the passwords across like

435
00:17:55,200 --> 00:17:56,320
different passwords and different

436
00:17:56,320 --> 00:17:59,679
websites to get together

437
00:17:59,679 --> 00:18:02,240
okay i got it you mean the people's

438
00:18:02,240 --> 00:18:04,080
opportunity to reuse their password

439
00:18:04,080 --> 00:18:05,919
according to according to different

440
00:18:05,919 --> 00:18:08,799
websites uh this is a good it's a good

441
00:18:08,799 --> 00:18:10,000
question

442
00:18:10,000 --> 00:18:12,559
we have already considered it but in our

443
00:18:12,559 --> 00:18:14,640
people our main focus is on the

444
00:18:14,640 --> 00:18:17,280
honeywell generation method itself for

445
00:18:17,280 --> 00:18:18,960
this kind of attack

446
00:18:18,960 --> 00:18:22,080
it can use some crypto crypto method for

447
00:18:22,080 --> 00:18:23,440
example

448
00:18:23,440 --> 00:18:25,600
there are some people that use

449
00:18:25,600 --> 00:18:26,960
design a new

450
00:18:26,960 --> 00:18:28,320
protocol tool

451
00:18:28,320 --> 00:18:29,200
to

452
00:18:29,200 --> 00:18:30,559
protect this

453
00:18:30,559 --> 00:18:31,919
protector

454
00:18:31,919 --> 00:18:34,080
protect user from using the same

455
00:18:34,080 --> 00:18:38,480
password according to different websites

456
00:18:38,880 --> 00:18:40,880
thanks i have a basic clarification

457
00:18:40,880 --> 00:18:42,720
question so how does a server know

458
00:18:42,720 --> 00:18:44,720
whether a password is a honey password

459
00:18:44,720 --> 00:18:47,679
or a actual password is this information

460
00:18:47,679 --> 00:18:50,000
stored in the server itself and what if

461
00:18:50,000 --> 00:18:52,080
this information is also leaked

462
00:18:52,080 --> 00:18:56,120
along with the password list

463
00:18:56,640 --> 00:18:58,320
uh you mean is the

464
00:18:58,320 --> 00:19:01,039
honey browser and the real password were

465
00:19:01,039 --> 00:19:01,919
linked

466
00:19:01,919 --> 00:19:03,360
all together all

467
00:19:03,360 --> 00:19:05,440
and along with like how does the server

468
00:19:05,440 --> 00:19:07,919
knows whether a password is a actual

469
00:19:07,919 --> 00:19:11,840
password or a honey password

470
00:19:12,559 --> 00:19:14,640
uh i don't get your questions

471
00:19:14,640 --> 00:19:17,120
during authentication during regular

472
00:19:17,120 --> 00:19:19,039
authentication the server would have to

473
00:19:19,039 --> 00:19:19,919
know

474
00:19:19,919 --> 00:19:21,679
what's the real password and which are

475
00:19:21,679 --> 00:19:24,480
the honeywords right and is this

476
00:19:24,480 --> 00:19:26,320
information stored somewhere and would

477
00:19:26,320 --> 00:19:29,520
it be stolen oh okay oh upload it i got

478
00:19:29,520 --> 00:19:31,679
it

479
00:19:32,460 --> 00:19:34,240
[Music]

480
00:19:34,240 --> 00:19:36,640
there's a entity called named honey

481
00:19:36,640 --> 00:19:38,799
checker

482
00:19:38,799 --> 00:19:42,000
the server will check if the uh if the

483
00:19:42,000 --> 00:19:44,799
input inputted the password by user is

484
00:19:44,799 --> 00:19:47,600
your password or honeywell and this is

485
00:19:47,600 --> 00:19:48,320
uh

486
00:19:48,320 --> 00:19:50,240
and this process

487
00:19:50,240 --> 00:19:52,799
this process happens in a single you

488
00:19:52,799 --> 00:19:55,919
know a separated piece

489
00:19:55,919 --> 00:19:58,320
its name is usually called hon checker

490
00:19:58,320 --> 00:20:02,480
and it's a separated separated entity

491
00:20:02,480 --> 00:20:04,240
awesome thanks

492
00:20:04,240 --> 00:20:06,080
okay

493
00:20:06,080 --> 00:20:08,890
let's thank all our speakers again

494
00:20:08,890 --> 00:20:12,819
[Applause]

