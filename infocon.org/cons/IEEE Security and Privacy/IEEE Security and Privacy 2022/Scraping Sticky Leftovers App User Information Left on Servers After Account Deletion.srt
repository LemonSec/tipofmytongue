1
00:00:01,280 --> 00:00:03,679
hello everyone uh i'm prithi santhanam

2
00:00:03,679 --> 00:00:05,440
thanks for coming today uh i'm going to

3
00:00:05,440 --> 00:00:07,919
talk about research work scraping sticky

4
00:00:07,919 --> 00:00:10,160
leftovers uh app user information left

5
00:00:10,160 --> 00:00:12,320
on servers after account deletion so

6
00:00:12,320 --> 00:00:13,920
this work is a collaboration between my

7
00:00:13,920 --> 00:00:15,839
colleagues at wichita state university

8
00:00:15,839 --> 00:00:18,560
and new jersey institute of technology

9
00:00:18,560 --> 00:00:20,240
to begin with let me give a short

10
00:00:20,240 --> 00:00:22,080
introduction about the background so

11
00:00:22,080 --> 00:00:23,920
according to our observation around 65

12
00:00:23,920 --> 00:00:25,920
percentage of apps require users to

13
00:00:25,920 --> 00:00:27,599
create mobile app accounts for offering

14
00:00:27,599 --> 00:00:29,279
full-fledged functionality while

15
00:00:29,279 --> 00:00:31,199
creating a mobile app account users need

16
00:00:31,199 --> 00:00:32,880
to enter a lot of private information

17
00:00:32,880 --> 00:00:35,120
such as email address phone number or

18
00:00:35,120 --> 00:00:37,040
even social security number or banking

19
00:00:37,040 --> 00:00:39,200
information so unfortunately once this

20
00:00:39,200 --> 00:00:41,280
information has been gathered only very

21
00:00:41,280 --> 00:00:43,360
few apps or companies provide the users

22
00:00:43,360 --> 00:00:44,879
to delete or forget the user's

23
00:00:44,879 --> 00:00:46,719
information such as by providing a

24
00:00:46,719 --> 00:00:49,920
delete account button via app or website

25
00:00:49,920 --> 00:00:51,920
so our concern is this leftover account

26
00:00:51,920 --> 00:00:54,320
data kept on that is kept on the server

27
00:00:54,320 --> 00:00:56,000
after the account deletion which can be

28
00:00:56,000 --> 00:00:58,640
a significant privacy violation because

29
00:00:58,640 --> 00:01:00,640
the leftover data can be manipulated and

30
00:01:00,640 --> 00:01:04,320
even be hacked by third party users

31
00:01:04,559 --> 00:01:06,080
we denote this leftover account

32
00:01:06,080 --> 00:01:08,400
information as lii that is the user's

33
00:01:08,400 --> 00:01:10,640
private data that is kept on the server

34
00:01:10,640 --> 00:01:11,920
after the account deletion or

35
00:01:11,920 --> 00:01:14,479
uninstallation process la is problematic

36
00:01:14,479 --> 00:01:16,799
for two reasons the first is lai poses

37
00:01:16,799 --> 00:01:19,200
security risks because when the user's

38
00:01:19,200 --> 00:01:20,799
information is retained it can be

39
00:01:20,799 --> 00:01:22,799
manipulated and leaked the second reason

40
00:01:22,799 --> 00:01:25,360
is that it violates users trust because

41
00:01:25,360 --> 00:01:27,119
after the successful account deletion

42
00:01:27,119 --> 00:01:29,360
process the users reasonably expect or

43
00:01:29,360 --> 00:01:30,560
believe that the account will be

44
00:01:30,560 --> 00:01:32,560
permanently deleted but most of the

45
00:01:32,560 --> 00:01:34,479
assoc apps routinely violate these

46
00:01:34,479 --> 00:01:36,880
assumptions presented here is an example

47
00:01:36,880 --> 00:01:38,560
of the pinion app where the user

48
00:01:38,560 --> 00:01:40,159
initiates to create an account by

49
00:01:40,159 --> 00:01:42,320
entering information such as a name

50
00:01:42,320 --> 00:01:44,799
password birth date and gender after the

51
00:01:44,799 --> 00:01:46,880
user initiates to delete the account the

52
00:01:46,880 --> 00:01:49,200
app asks for the user's confirmation and

53
00:01:49,200 --> 00:01:51,280
after the account deletion process when

54
00:01:51,280 --> 00:01:53,360
the user tries to create the account

55
00:01:53,360 --> 00:01:55,200
using the same account information the

56
00:01:55,200 --> 00:01:57,280
app shows a warning message indicating

57
00:01:57,280 --> 00:01:58,960
that the account cannot be created

58
00:01:58,960 --> 00:02:00,719
because the email address already exists

59
00:02:00,719 --> 00:02:02,640
in the database this constitutes to

60
00:02:02,640 --> 00:02:04,320
leftover account information because

61
00:02:04,320 --> 00:02:05,920
after the successful account deletion

62
00:02:05,920 --> 00:02:08,239
process the information needs has to be

63
00:02:08,239 --> 00:02:09,919
permanently deleted but which doesn't

64
00:02:09,919 --> 00:02:12,160
happen here the last image is an example

65
00:02:12,160 --> 00:02:14,160
of the ebay website where after the 30

66
00:02:14,160 --> 00:02:16,319
day post retention period policy the

67
00:02:16,319 --> 00:02:17,920
user's information is still written on

68
00:02:17,920 --> 00:02:19,760
the server under the name anonymized

69
00:02:19,760 --> 00:02:21,440
which also constitutes to leftover

70
00:02:21,440 --> 00:02:24,239
account information problem

71
00:02:24,239 --> 00:02:25,840
so let's see uh how the account life

72
00:02:25,840 --> 00:02:28,480
cycle works uh as we are focusing on the

73
00:02:28,480 --> 00:02:30,959
android apps let's say the user wants to

74
00:02:30,959 --> 00:02:32,319
install an app from the google play

75
00:02:32,319 --> 00:02:34,400
store the first step he'll be doing is

76
00:02:34,400 --> 00:02:36,959
that the installation and then uh the

77
00:02:36,959 --> 00:02:38,800
user will sign up for an account where

78
00:02:38,800 --> 00:02:40,720
the user's account information will be

79
00:02:40,720 --> 00:02:42,400
sent to the app servers and it is stored

80
00:02:42,400 --> 00:02:44,000
in the account database

81
00:02:44,000 --> 00:02:45,920
when the user wants to login or sign in

82
00:02:45,920 --> 00:02:47,200
the information that is stored in the

83
00:02:47,200 --> 00:02:49,280
account database is used for the login

84
00:02:49,280 --> 00:02:51,200
or sign in purpose when the user no

85
00:02:51,200 --> 00:02:52,879
longer wants to use the app he either

86
00:02:52,879 --> 00:02:54,400
plans to delete it

87
00:02:54,400 --> 00:02:56,239
or uninstall it

88
00:02:56,239 --> 00:02:57,599
during this space what the user

89
00:02:57,599 --> 00:02:59,519
reasonably expects is that there will be

90
00:02:59,519 --> 00:03:00,959
an account deletion functionality

91
00:03:00,959 --> 00:03:02,800
provided in the app or website or a

92
00:03:02,800 --> 00:03:04,959
retention period policy that states how

93
00:03:04,959 --> 00:03:06,319
long the user's information will be

94
00:03:06,319 --> 00:03:08,640
retained on the server or the account

95
00:03:08,640 --> 00:03:10,400
should be permanently deleted after the

96
00:03:10,400 --> 00:03:12,560
successful account deletion process or

97
00:03:12,560 --> 00:03:14,400
after the retention period policy

98
00:03:14,400 --> 00:03:16,640
expires but most of the apps routinely

99
00:03:16,640 --> 00:03:18,159
violate these assumptions leading to

100
00:03:18,159 --> 00:03:19,760
four categories of leftover account

101
00:03:19,760 --> 00:03:22,080
information problem

102
00:03:22,080 --> 00:03:24,239
so the first category is apps or website

103
00:03:24,239 --> 00:03:25,519
without no account deletion

104
00:03:25,519 --> 00:03:27,920
functionality so if an app or website do

105
00:03:27,920 --> 00:03:30,080
not provide the users to means the

106
00:03:30,080 --> 00:03:32,319
delete account which means they do not

107
00:03:32,319 --> 00:03:33,280
provide

108
00:03:33,280 --> 00:03:34,879
the delete account button in the app or

109
00:03:34,879 --> 00:03:36,959
website via button or link then this

110
00:03:36,959 --> 00:03:38,239
constitutes a leftover account

111
00:03:38,239 --> 00:03:40,319
information problem the second category

112
00:03:40,319 --> 00:03:42,799
is a leftover account after deletion if

113
00:03:42,799 --> 00:03:44,799
an app or website retains users

114
00:03:44,799 --> 00:03:46,400
information on the server after the

115
00:03:46,400 --> 00:03:48,720
account deletion process then this also

116
00:03:48,720 --> 00:03:50,720
retains users information the third

117
00:03:50,720 --> 00:03:52,720
category is leftover account after

118
00:03:52,720 --> 00:03:54,879
uninstallation so if an app or website

119
00:03:54,879 --> 00:03:56,640
retains user's information after the

120
00:03:56,640 --> 00:03:58,400
uninstallation process

121
00:03:58,400 --> 00:04:00,640
this also leads to leftover problem the

122
00:04:00,640 --> 00:04:02,560
last category is no account retention

123
00:04:02,560 --> 00:04:04,799
period if an app or website after the

124
00:04:04,799 --> 00:04:06,720
account deletion process doesn't delete

125
00:04:06,720 --> 00:04:08,720
the user's information and also uh does

126
00:04:08,720 --> 00:04:10,159
not indicate how long the user's

127
00:04:10,159 --> 00:04:11,840
information will be retained

128
00:04:11,840 --> 00:04:13,519
this also leads to leftover account

129
00:04:13,519 --> 00:04:16,079
information problem

130
00:04:16,079 --> 00:04:17,839
to address the challenges of leftover

131
00:04:17,839 --> 00:04:19,358
account information problem we have

132
00:04:19,358 --> 00:04:21,600
developed a tool chain where it consists

133
00:04:21,600 --> 00:04:23,520
of four tools the first tool is account

134
00:04:23,520 --> 00:04:25,440
deletion analyzer so account deletion

135
00:04:25,440 --> 00:04:28,479
analyzer employs static analysis and

136
00:04:28,479 --> 00:04:30,240
automatically determines if an app or

137
00:04:30,240 --> 00:04:31,840
website provides account deletion

138
00:04:31,840 --> 00:04:34,720
functionality via a button or link

139
00:04:34,720 --> 00:04:36,320
the second tool is retention period

140
00:04:36,320 --> 00:04:38,479
analyzer retention period analyzer also

141
00:04:38,479 --> 00:04:39,759
employs static analysis and

142
00:04:39,759 --> 00:04:41,360
automatically determines if an app or

143
00:04:41,360 --> 00:04:44,080
website provides retention period policy

144
00:04:44,080 --> 00:04:45,759
the third tool is a leftover account

145
00:04:45,759 --> 00:04:47,919
analyzer leftover account analyzer

146
00:04:47,919 --> 00:04:49,680
automatically identifies whether the

147
00:04:49,680 --> 00:04:51,280
user's information is retained on the

148
00:04:51,280 --> 00:04:53,759
server after the account installation or

149
00:04:53,759 --> 00:04:55,840
deletion process it employs dynamic

150
00:04:55,840 --> 00:04:57,840
analysis and analyzes both the apks and

151
00:04:57,840 --> 00:04:59,120
websites

152
00:04:59,120 --> 00:05:00,720
the last tool is a leftover account

153
00:05:00,720 --> 00:05:02,400
cleaner leftover account cleaner

154
00:05:02,400 --> 00:05:04,320
automatically deletes all the users

155
00:05:04,320 --> 00:05:06,320
account after the uninstallation process

156
00:05:06,320 --> 00:05:07,840
let's see about each of these tools in

157
00:05:07,840 --> 00:05:10,720
detail in the next slides the first tool

158
00:05:10,720 --> 00:05:14,000
is account deletion analyzer so as we uh

159
00:05:14,000 --> 00:05:15,759
just saw account deletion analyzer

160
00:05:15,759 --> 00:05:17,360
automatically determines whether the

161
00:05:17,360 --> 00:05:20,000
user's information uh whether an app or

162
00:05:20,000 --> 00:05:22,080
website provides uh account deletion

163
00:05:22,080 --> 00:05:23,680
functionality where the user can delete

164
00:05:23,680 --> 00:05:25,199
the account

165
00:05:25,199 --> 00:05:26,960
according to our observation the delete

166
00:05:26,960 --> 00:05:28,639
account button or similar has some kind

167
00:05:28,639 --> 00:05:30,400
of a text associated with the account

168
00:05:30,400 --> 00:05:32,880
deletion process and in android apps uh

169
00:05:32,880 --> 00:05:34,800
the button clicks are usually associated

170
00:05:34,800 --> 00:05:36,560
with an action listener which actually

171
00:05:36,560 --> 00:05:38,720
performs a delete operation

172
00:05:38,720 --> 00:05:40,560
then the gui layout hierarchy which

173
00:05:40,560 --> 00:05:41,840
contains text to explain the

174
00:05:41,840 --> 00:05:43,600
consequences or steps of the account

175
00:05:43,600 --> 00:05:45,440
deletion process account deletion

176
00:05:45,440 --> 00:05:47,280
analysis consists of four steps the

177
00:05:47,280 --> 00:05:48,880
first is finding account deletion

178
00:05:48,880 --> 00:05:50,960
strings and mapping strings to screen

179
00:05:50,960 --> 00:05:52,400
finding action listeners and then

180
00:05:52,400 --> 00:05:53,680
determining account deletion

181
00:05:53,680 --> 00:05:56,080
functionality

182
00:05:56,080 --> 00:05:57,919
finding account deletion strings so this

183
00:05:57,919 --> 00:06:00,160
step involves a precise approach for

184
00:06:00,160 --> 00:06:02,000
automatically extracting the account

185
00:06:02,000 --> 00:06:04,160
deletion strings but this step was

186
00:06:04,160 --> 00:06:05,840
challenging due to three reasons uh the

187
00:06:05,840 --> 00:06:07,039
first is

188
00:06:07,039 --> 00:06:08,800
a simple regular expression did not work

189
00:06:08,800 --> 00:06:10,000
out so we had to come up with the

190
00:06:10,000 --> 00:06:11,600
context free grammar for automatically

191
00:06:11,600 --> 00:06:13,680
recognizing the id strings the second is

192
00:06:13,680 --> 00:06:15,280
that since strings are scattered in

193
00:06:15,280 --> 00:06:17,039
hundreds of files such as xml files

194
00:06:17,039 --> 00:06:19,440
smalley files or even html files for

195
00:06:19,440 --> 00:06:20,639
websites

196
00:06:20,639 --> 00:06:22,960
it was a complicated process to first

197
00:06:22,960 --> 00:06:24,960
manually analyze all these files and

198
00:06:24,960 --> 00:06:26,720
then come up with an automated approach

199
00:06:26,720 --> 00:06:28,639
the third reason is that since strings

200
00:06:28,639 --> 00:06:30,240
are also embedded in images we have to

201
00:06:30,240 --> 00:06:31,919
first convert the images to text and

202
00:06:31,919 --> 00:06:34,080
then analyze the text for the account

203
00:06:34,080 --> 00:06:35,840
deletion string

204
00:06:35,840 --> 00:06:37,759
identification for strings that match

205
00:06:37,759 --> 00:06:39,919
the patterns a natural language

206
00:06:39,919 --> 00:06:42,240
processing algorithm was used uh to

207
00:06:42,240 --> 00:06:43,840
automatically extract the account

208
00:06:43,840 --> 00:06:45,520
deletion strings presented here is a

209
00:06:45,520 --> 00:06:46,880
grammar for finding account deletion

210
00:06:46,880 --> 00:06:48,880
string where ad string is a combination

211
00:06:48,880 --> 00:06:50,880
of a word phrase and a noun phrase where

212
00:06:50,880 --> 00:06:52,639
the word phrase contains a word part of

213
00:06:52,639 --> 00:06:54,319
the account deletion string which

214
00:06:54,319 --> 00:06:56,479
contains keywords such as delete destroy

215
00:06:56,479 --> 00:06:59,120
close terminate and then the noun phrase

216
00:06:59,120 --> 00:07:01,360
indicates a noun part of the ad string

217
00:07:01,360 --> 00:07:02,960
which contains information related to

218
00:07:02,960 --> 00:07:05,199
account or registration information the

219
00:07:05,199 --> 00:07:06,880
second step is mapping strings to

220
00:07:06,880 --> 00:07:08,880
screens so that is a disconnect between

221
00:07:08,880 --> 00:07:10,880
the account deletion strings definition

222
00:07:10,880 --> 00:07:13,199
and its usage where exactly these ad

223
00:07:13,199 --> 00:07:14,720
strings are shown to the user in the

224
00:07:14,720 --> 00:07:16,800
graphical user interface since ad

225
00:07:16,800 --> 00:07:18,479
strings are scattered in hundreds of

226
00:07:18,479 --> 00:07:20,720
files it we cannot directly connect the

227
00:07:20,720 --> 00:07:22,960
ad strings to its screen so we have to

228
00:07:22,960 --> 00:07:25,039
map multiple intermediate steps in order

229
00:07:25,039 --> 00:07:27,039
to connect the strings to screen so here

230
00:07:27,039 --> 00:07:28,560
we can see there are three account

231
00:07:28,560 --> 00:07:30,400
deletion strings which are mapped to its

232
00:07:30,400 --> 00:07:32,400
corresponding name attributes name

233
00:07:32,400 --> 00:07:34,080
attributes is then mapped to the layout

234
00:07:34,080 --> 00:07:35,840
layout to the top layout top layer to

235
00:07:35,840 --> 00:07:37,360
the fragment and then the fragment is

236
00:07:37,360 --> 00:07:38,880
finally mapped to its

237
00:07:38,880 --> 00:07:40,560
corresponding activity which is the

238
00:07:40,560 --> 00:07:42,720
graphical user interface uh the user

239
00:07:42,720 --> 00:07:45,919
sees in its uh android app

240
00:07:45,919 --> 00:07:47,440
so from this we can conclude that the

241
00:07:47,440 --> 00:07:48,800
account deletion string has been mapped

242
00:07:48,800 --> 00:07:51,919
to its corresponding activity

243
00:07:51,919 --> 00:07:53,680
the third step is finding account

244
00:07:53,680 --> 00:07:55,919
deletion listeners so in android apps

245
00:07:55,919 --> 00:07:58,319
gui actions are passed to the app code

246
00:07:58,319 --> 00:08:00,240
via action listeners so if this action

247
00:08:00,240 --> 00:08:01,680
listener can be traced to one of the

248
00:08:01,680 --> 00:08:03,680
account deletion component id numbers we

249
00:08:03,680 --> 00:08:05,120
can conclude that account deletion

250
00:08:05,120 --> 00:08:07,280
functionality has been found

251
00:08:07,280 --> 00:08:08,879
the last step is determining account

252
00:08:08,879 --> 00:08:10,479
deletion functionality so account

253
00:08:10,479 --> 00:08:12,080
deletion functionality is determined by

254
00:08:12,080 --> 00:08:14,080
two conditions first a layout needs to

255
00:08:14,080 --> 00:08:16,080
be associated with an action listener

256
00:08:16,080 --> 00:08:17,680
which shows text with account deletion

257
00:08:17,680 --> 00:08:19,759
semantics and on the same screen there

258
00:08:19,759 --> 00:08:21,440
are also other gui components which

259
00:08:21,440 --> 00:08:22,960
contains text with account deletion

260
00:08:22,960 --> 00:08:24,639
semantics so present it here is an

261
00:08:24,639 --> 00:08:27,199
example for determining adf

262
00:08:27,199 --> 00:08:29,599
it is an example of an app called im

263
00:08:29,599 --> 00:08:31,360
where we can see there are three text

264
00:08:31,360 --> 00:08:33,599
views which contains text associated to

265
00:08:33,599 --> 00:08:35,760
account deletion process that satisfies

266
00:08:35,760 --> 00:08:39,039
condition two and there is also a button

267
00:08:39,039 --> 00:08:40,880
that is uh corresponding to the account

268
00:08:40,880 --> 00:08:42,958
deletion process which is associated to

269
00:08:42,958 --> 00:08:44,880
an callback function with satisfies

270
00:08:44,880 --> 00:08:46,640
condition one from this we can conclude

271
00:08:46,640 --> 00:08:47,760
that

272
00:08:47,760 --> 00:08:49,760
iem app has delete account functionality

273
00:08:49,760 --> 00:08:52,080
in its app

274
00:08:52,080 --> 00:08:53,680
the second tool is retention period

275
00:08:53,680 --> 00:08:55,839
analyzer so what exactly is a retention

276
00:08:55,839 --> 00:08:57,680
period string so when the user clicks on

277
00:08:57,680 --> 00:08:59,760
the delete account button if if an app

278
00:08:59,760 --> 00:09:01,839
does not delete the user's information

279
00:09:01,839 --> 00:09:03,920
and shows some kind of retention period

280
00:09:03,920 --> 00:09:05,519
policy stating that the user's

281
00:09:05,519 --> 00:09:07,120
information will be deleted after 10

282
00:09:07,120 --> 00:09:09,920
days or 45 minutes or 30 days then this

283
00:09:09,920 --> 00:09:11,200
specific time period is called as

284
00:09:11,200 --> 00:09:13,200
retention period policy our tool

285
00:09:13,200 --> 00:09:14,959
retention period analysis automatically

286
00:09:14,959 --> 00:09:16,800
extracts this retention period strings

287
00:09:16,800 --> 00:09:18,959
from the app or website

288
00:09:18,959 --> 00:09:20,959
but the text needs to meet two

289
00:09:20,959 --> 00:09:22,880
conditions this also follows the same

290
00:09:22,880 --> 00:09:24,560
procedure as that of finding account

291
00:09:24,560 --> 00:09:25,920
deletion strings in the account deletion

292
00:09:25,920 --> 00:09:27,839
analyzer tool first the text must

293
00:09:27,839 --> 00:09:29,600
contain strings with account deletion or

294
00:09:29,600 --> 00:09:31,760
account restoring semantics second is

295
00:09:31,760 --> 00:09:33,519
that the text must contain a time period

296
00:09:33,519 --> 00:09:35,600
string consisting of a number and a time

297
00:09:35,600 --> 00:09:37,519
unit

298
00:09:37,519 --> 00:09:39,200
so the third tool is a leftover account

299
00:09:39,200 --> 00:09:41,279
analyzer leftover account analyzer

300
00:09:41,279 --> 00:09:42,959
automatically determines if the user's

301
00:09:42,959 --> 00:09:44,560
information is retained on the server

302
00:09:44,560 --> 00:09:46,000
after the account uh deletion or

303
00:09:46,000 --> 00:09:47,600
uninstallation process

304
00:09:47,600 --> 00:09:49,279
leftover account analyzer runs on a

305
00:09:49,279 --> 00:09:50,880
laptop where the android device is

306
00:09:50,880 --> 00:09:53,279
connected to it via android bridge

307
00:09:53,279 --> 00:09:55,120
it is completely an automated approach

308
00:09:55,120 --> 00:09:57,279
and it employs dynamic analysis where we

309
00:09:57,279 --> 00:09:59,279
used apm server which issues commands

310
00:09:59,279 --> 00:10:01,760
directly on the device

311
00:10:01,760 --> 00:10:04,160
we collected we manually collected word

312
00:10:04,160 --> 00:10:05,920
sits that are responsible for the sign

313
00:10:05,920 --> 00:10:07,839
up automatic deletion and re-sign-up

314
00:10:07,839 --> 00:10:08,959
phase

315
00:10:08,959 --> 00:10:10,640
but the manual intervention was needed

316
00:10:10,640 --> 00:10:13,760
in three scenarios uh where the app used

317
00:10:13,760 --> 00:10:15,040
captchas

318
00:10:15,040 --> 00:10:16,959
and during confirmation prompts or

319
00:10:16,959 --> 00:10:18,640
verification of email address or phone

320
00:10:18,640 --> 00:10:21,040
numbers it was an hybrid approach during

321
00:10:21,040 --> 00:10:23,600
this process so this account analyzer

322
00:10:23,600 --> 00:10:24,800
consists of

323
00:10:24,800 --> 00:10:26,800
four steps where the first step is the

324
00:10:26,800 --> 00:10:29,200
initial sign up phase where the account

325
00:10:29,200 --> 00:10:30,880
analysis automatically installs app from

326
00:10:30,880 --> 00:10:33,120
the google play store finds a sign up

327
00:10:33,120 --> 00:10:34,240
screen

328
00:10:34,240 --> 00:10:35,920
and supplies required information that

329
00:10:35,920 --> 00:10:39,519
are needed for the automatic sign up and

330
00:10:39,519 --> 00:10:41,040
it creates a new account until

331
00:10:41,040 --> 00:10:43,440
successful sign up is confirmed so the

332
00:10:43,440 --> 00:10:45,360
gui elements to the text input mappings

333
00:10:45,360 --> 00:10:47,279
are also logged

334
00:10:47,279 --> 00:10:48,640
which are key fields for the li

335
00:10:48,640 --> 00:10:50,399
detection

336
00:10:50,399 --> 00:10:52,320
the second step is account deletion so

337
00:10:52,320 --> 00:10:54,480
if the leftover account analyzer

338
00:10:54,480 --> 00:10:56,800
automatically uh deletes the account

339
00:10:56,800 --> 00:10:58,560
from the app or website but it invokes

340
00:10:58,560 --> 00:11:00,079
some of the account deletion analyzer

341
00:11:00,079 --> 00:11:02,000
modules to determine if an app or

342
00:11:02,000 --> 00:11:03,200
website has account deletion

343
00:11:03,200 --> 00:11:05,600
functionality if an account app or

344
00:11:05,600 --> 00:11:06,880
website has an account deletion

345
00:11:06,880 --> 00:11:08,640
functionality then the leftover account

346
00:11:08,640 --> 00:11:11,279
analyzer performs a workflow by logging

347
00:11:11,279 --> 00:11:13,519
in automatically and finding the account

348
00:11:13,519 --> 00:11:14,800
deletion functionality and then

349
00:11:14,800 --> 00:11:17,279
automatically deleting the account

350
00:11:17,279 --> 00:11:19,040
the third step is repeating the signup

351
00:11:19,040 --> 00:11:20,000
process

352
00:11:20,000 --> 00:11:22,000
leftover account analyzer uninstalls app

353
00:11:22,000 --> 00:11:23,920
automatically and again installs app

354
00:11:23,920 --> 00:11:25,760
from the google play store attempts to

355
00:11:25,760 --> 00:11:27,519
repeat the sign up process by again

356
00:11:27,519 --> 00:11:29,760
entering the required signup information

357
00:11:29,760 --> 00:11:32,320
until successful signup is confirmed so

358
00:11:32,320 --> 00:11:34,160
if if the user's information is still

359
00:11:34,160 --> 00:11:36,480
written on the server we'll get warning

360
00:11:36,480 --> 00:11:38,079
messages indicating that the email

361
00:11:38,079 --> 00:11:39,680
address or user's information is still

362
00:11:39,680 --> 00:11:41,279
written on the server from this we can

363
00:11:41,279 --> 00:11:43,120
conclude that okay the information is

364
00:11:43,120 --> 00:11:45,360
still retained on the server the last

365
00:11:45,360 --> 00:11:47,519
step is uh verification of leftover

366
00:11:47,519 --> 00:11:49,360
account information so all the fields

367
00:11:49,360 --> 00:11:50,720
that you entered while creating an

368
00:11:50,720 --> 00:11:52,399
account or retained on the app's backend

369
00:11:52,399 --> 00:11:54,639
servers but how do we verify this since

370
00:11:54,639 --> 00:11:56,079
we do not have access to the apps

371
00:11:56,079 --> 00:11:58,160
backend servers

372
00:11:58,160 --> 00:11:59,760
finding these retained fields from the

373
00:11:59,760 --> 00:12:02,240
apps back-end servers is infeasible for

374
00:12:02,240 --> 00:12:03,680
this

375
00:12:03,680 --> 00:12:05,839
we developed an approach where we showed

376
00:12:05,839 --> 00:12:08,320
three scenarios and

377
00:12:08,320 --> 00:12:10,240
identified the interactions between the

378
00:12:10,240 --> 00:12:12,639
user app or website and then the backend

379
00:12:12,639 --> 00:12:14,639
server so here

380
00:12:14,639 --> 00:12:16,720
the user initiates to create an account

381
00:12:16,720 --> 00:12:18,320
which is communicated to the app backend

382
00:12:18,320 --> 00:12:20,720
server via api function and then when

383
00:12:20,720 --> 00:12:22,399
the user initiates to update the account

384
00:12:22,399 --> 00:12:24,240
it is also communicated from the app or

385
00:12:24,240 --> 00:12:26,399
website to the backend server via api

386
00:12:26,399 --> 00:12:29,040
function when the user finally initiates

387
00:12:29,040 --> 00:12:31,120
to delete the user account so now here

388
00:12:31,120 --> 00:12:33,519
if there is an api function uh that is

389
00:12:33,519 --> 00:12:34,880
corresponding to the account deletion

390
00:12:34,880 --> 00:12:37,920
process we can say that the s the app or

391
00:12:37,920 --> 00:12:39,440
website has communicated to the backend

392
00:12:39,440 --> 00:12:41,120
server to delete the user's information

393
00:12:41,120 --> 00:12:42,720
from this we can conclude that yes the

394
00:12:42,720 --> 00:12:44,560
user's information is not retained on

395
00:12:44,560 --> 00:12:46,320
the app's backend servers so this is the

396
00:12:46,320 --> 00:12:47,839
first scenario that we identified from

397
00:12:47,839 --> 00:12:49,839
our high level approach and then in the

398
00:12:49,839 --> 00:12:51,920
second scenario again the user creates

399
00:12:51,920 --> 00:12:53,440
an account which is also communicated to

400
00:12:53,440 --> 00:12:56,079
the backend server updates account

401
00:12:56,079 --> 00:12:57,040
then

402
00:12:57,040 --> 00:12:58,880
finally initiates to delete the user

403
00:12:58,880 --> 00:13:00,880
account so here we don't find the api

404
00:13:00,880 --> 00:13:02,639
function corresponding to the account

405
00:13:02,639 --> 00:13:04,480
deletion process which means the user's

406
00:13:04,480 --> 00:13:06,000
information is still retained on the

407
00:13:06,000 --> 00:13:07,440
server

408
00:13:07,440 --> 00:13:09,920
the last scenario is that when the user

409
00:13:09,920 --> 00:13:11,680
initiates to delete the user account

410
00:13:11,680 --> 00:13:13,680
there is an api function

411
00:13:13,680 --> 00:13:15,920
that deletes the user's age but still

412
00:13:15,920 --> 00:13:17,519
the user's location is still retained on

413
00:13:17,519 --> 00:13:19,040
the server which means some fields are

414
00:13:19,040 --> 00:13:20,560
deleted and some fields are retained on

415
00:13:20,560 --> 00:13:22,399
the server but how do we verify this

416
00:13:22,399 --> 00:13:24,240
leftover account information for this

417
00:13:24,240 --> 00:13:26,240
process we reverse engineered app back

418
00:13:26,240 --> 00:13:28,399
in server communication and identified

419
00:13:28,399 --> 00:13:30,320
the account manipulation operations

420
00:13:30,320 --> 00:13:32,959
which means we identified methods or api

421
00:13:32,959 --> 00:13:34,720
functions that are responsible for the

422
00:13:34,720 --> 00:13:37,440
account creation deletion or updation

423
00:13:37,440 --> 00:13:39,920
for this process uh we decompile apk

424
00:13:39,920 --> 00:13:41,680
files into smalley files and extracted

425
00:13:41,680 --> 00:13:43,920
the methods responsible for the account

426
00:13:43,920 --> 00:13:46,880
election uh and updation operations

427
00:13:46,880 --> 00:13:49,360
so most of the uh apps are most of the

428
00:13:49,360 --> 00:13:51,360
apps uh that uses uh software

429
00:13:51,360 --> 00:13:53,040
development kits employed back-end

430
00:13:53,040 --> 00:13:55,920
servers so here uh presented here are

431
00:13:55,920 --> 00:13:58,399
some of the api functions uh that we

432
00:13:58,399 --> 00:14:00,000
identified for the account creation

433
00:14:00,000 --> 00:14:03,279
deletion and updation operations

434
00:14:03,279 --> 00:14:04,880
so the last tool is a leftover account

435
00:14:04,880 --> 00:14:06,560
cleaner leftover account cleaner

436
00:14:06,560 --> 00:14:08,320
automatically deletes the user's account

437
00:14:08,320 --> 00:14:10,320
after the account uninstallation process

438
00:14:10,320 --> 00:14:11,920
this also runs on a laptop where the

439
00:14:11,920 --> 00:14:14,079
android device is connected to it

440
00:14:14,079 --> 00:14:16,160
via android bridge here the first step

441
00:14:16,160 --> 00:14:18,160
is leftover account cleaner finds a list

442
00:14:18,160 --> 00:14:20,160
of uninstall apps as a set difference

443
00:14:20,160 --> 00:14:21,519
between the apps and the account history

444
00:14:21,519 --> 00:14:22,880
on the google play store and apps

445
00:14:22,880 --> 00:14:25,120
currently installed on the phone second

446
00:14:25,120 --> 00:14:27,360
step is it reinstalls uninstall app by

447
00:14:27,360 --> 00:14:28,639
downloading it from the google play

448
00:14:28,639 --> 00:14:31,279
store the last step is it automatically

449
00:14:31,279 --> 00:14:32,959
finds the adf button locks in

450
00:14:32,959 --> 00:14:35,040
automatically deletes the account

451
00:14:35,040 --> 00:14:37,040
then the evaluation results so we

452
00:14:37,040 --> 00:14:39,519
analyzed uh 1435 apps from the google

453
00:14:39,519 --> 00:14:41,440
play store and we only focused on the

454
00:14:41,440 --> 00:14:43,360
apps that had own sign in process which

455
00:14:43,360 --> 00:14:45,279
means sign in using email and we did not

456
00:14:45,279 --> 00:14:46,880
focus on apps that provided sign in

457
00:14:46,880 --> 00:14:48,399
using third party such as google or

458
00:14:48,399 --> 00:14:50,320
facebook from that we identified that

459
00:14:50,320 --> 00:14:52,480
254 apps retain users information after

460
00:14:52,480 --> 00:14:54,399
account installation uninstallation and

461
00:14:54,399 --> 00:14:56,480
17 apps retain users information after

462
00:14:56,480 --> 00:14:59,199
account deletion and 437 apps did not

463
00:14:59,199 --> 00:15:01,760
have any adf buttons and table 7 shows

464
00:15:01,760 --> 00:15:03,040
some of the retained fields on the

465
00:15:03,040 --> 00:15:04,880
server where government id and banking

466
00:15:04,880 --> 00:15:06,560
information being the sensitive

467
00:15:06,560 --> 00:15:07,839
information are the least retained

468
00:15:07,839 --> 00:15:09,680
information and the most retained

469
00:15:09,680 --> 00:15:11,519
information are the first name use name

470
00:15:11,519 --> 00:15:14,880
username and phone phone number

471
00:15:14,880 --> 00:15:17,199
our approach detected uh and indicated

472
00:15:17,199 --> 00:15:18,000
that

473
00:15:18,000 --> 00:15:19,519
our tool chain was effective resulting

474
00:15:19,519 --> 00:15:22,160
in an f measure of 88.4 percentage and

475
00:15:22,160 --> 00:15:24,079
regarding the efficiency results

476
00:15:24,079 --> 00:15:25,760
leftover account analyzer took a medium

477
00:15:25,760 --> 00:15:28,720
time of around 162.68 seconds where the

478
00:15:28,720 --> 00:15:30,320
maximum time taken by the tool was

479
00:15:30,320 --> 00:15:32,000
during the reinstallation phase that is

480
00:15:32,000 --> 00:15:33,759
the resigning of phase and then the

481
00:15:33,759 --> 00:15:35,360
account deletion analyzer took a median

482
00:15:35,360 --> 00:15:38,160
time of around 275.78 seconds and the

483
00:15:38,160 --> 00:15:39,920
maximum time was during the image to

484
00:15:39,920 --> 00:15:41,920
text conversion phase retention period

485
00:15:41,920 --> 00:15:43,600
analyzer also took the median time of

486
00:15:43,600 --> 00:15:46,000
around 259.03 seconds and that the

487
00:15:46,000 --> 00:15:47,600
leftover account cleaner took a median

488
00:15:47,600 --> 00:15:50,959
time of around 231.29 seconds

489
00:15:50,959 --> 00:15:52,720
thank you

490
00:15:52,720 --> 00:15:55,720
questions

491
00:15:58,320 --> 00:15:59,600
all right we have some time for

492
00:15:59,600 --> 00:16:02,079
questions uh if anyone wants to ask

493
00:16:02,079 --> 00:16:04,160
questions please come to the mic uh

494
00:16:04,160 --> 00:16:06,480
maybe i'll get started uh i think the

495
00:16:06,480 --> 00:16:08,000
examples you gave at the beginning were

496
00:16:08,000 --> 00:16:11,440
with ebay and uh

497
00:16:11,440 --> 00:16:14,320
uh yeah so uh did you report what did

498
00:16:14,320 --> 00:16:16,320
they say like uh yeah we contacted the

499
00:16:16,320 --> 00:16:18,240
customer service uh and they said that

500
00:16:18,240 --> 00:16:20,079
uh they will retain some of the users

501
00:16:20,079 --> 00:16:21,600
information for

502
00:16:21,600 --> 00:16:23,920
their research something like that but

503
00:16:23,920 --> 00:16:25,440
we do not know what kind of information

504
00:16:25,440 --> 00:16:27,279
is retained from their site did you

505
00:16:27,279 --> 00:16:29,279
contact their lawyers

506
00:16:29,279 --> 00:16:32,959
we just contacted the customer service

507
00:16:33,279 --> 00:16:36,639
nice talk sharing from rit um so in the

508
00:16:36,639 --> 00:16:38,720
i'm wondering in in the process of

509
00:16:38,720 --> 00:16:41,360
finding the api for the account creation

510
00:16:41,360 --> 00:16:43,600
or deletion are you looking at

511
00:16:43,600 --> 00:16:45,600
mathematical right

512
00:16:45,600 --> 00:16:48,320
the money code of the apk file

513
00:16:48,320 --> 00:16:51,120
yes so how do we handle the obversation

514
00:16:51,120 --> 00:16:53,839
in the code yeah so since we do not have

515
00:16:53,839 --> 00:16:55,920
access to the backend server uh to

516
00:16:55,920 --> 00:16:58,079
delete the account we decompile the apk

517
00:16:58,079 --> 00:17:00,560
files and then find the api functions

518
00:17:00,560 --> 00:17:02,079
that are responsible for the account

519
00:17:02,079 --> 00:17:03,920
deletion operations where the actual

520
00:17:03,920 --> 00:17:05,599
deletion operation happens between the

521
00:17:05,599 --> 00:17:08,160
communication between the uh app or

522
00:17:08,160 --> 00:17:10,240
website and the backend server so we

523
00:17:10,240 --> 00:17:11,520
extract these methods that are

524
00:17:11,520 --> 00:17:12,959
responsible for the account deletion

525
00:17:12,959 --> 00:17:17,480
operation okay thank you yeah

526
00:17:19,119 --> 00:17:21,199
hey uh that was really nice talk i was

527
00:17:21,199 --> 00:17:23,359
just curious if you've considered uh the

528
00:17:23,359 --> 00:17:25,760
study in the context of privacy

529
00:17:25,760 --> 00:17:28,079
regulations like the ccpa

530
00:17:28,079 --> 00:17:31,120
or gdpr which require

531
00:17:31,120 --> 00:17:34,720
some type of deletion process from some

532
00:17:34,720 --> 00:17:36,400
of these apps or is that something

533
00:17:36,400 --> 00:17:38,720
you've thought about uh not exactly but

534
00:17:38,720 --> 00:17:39,520
um

535
00:17:39,520 --> 00:17:42,000
uh like the apps we did have a look at

536
00:17:42,000 --> 00:17:44,240
the app's privacy policy they say that

537
00:17:44,240 --> 00:17:46,640
they do not retain users information uh

538
00:17:46,640 --> 00:17:48,320
but after the account deletion process

539
00:17:48,320 --> 00:17:50,480
or the retention period policy ended we

540
00:17:50,480 --> 00:17:52,960
contacted them uh they said that the

541
00:17:52,960 --> 00:17:54,960
information will be deleted but which

542
00:17:54,960 --> 00:17:56,480
doesn't happen we checked after even

543
00:17:56,480 --> 00:17:58,559
like five to six months

544
00:17:58,559 --> 00:18:00,640
and they said uh yes we retained some of

545
00:18:00,640 --> 00:18:02,240
the user's information for future

546
00:18:02,240 --> 00:18:04,640
research got it yeah all right thank you

547
00:18:04,640 --> 00:18:07,039
thank you

548
00:18:08,640 --> 00:18:11,120
all right uh well thanks a lot preethi

549
00:18:11,120 --> 00:18:14,840
let's thank the speaker again

