1
00:00:00,000 --> 00:00:02,159
okay good

2
00:00:02,159 --> 00:00:04,000
thank you for the introduction

3
00:00:04,000 --> 00:00:06,399
hello everyone good morning

4
00:00:06,399 --> 00:00:08,720
i'm shin gao i'm assistant professor

5
00:00:08,720 --> 00:00:11,040
from the university of delaware

6
00:00:11,040 --> 00:00:13,120
today i'm going to present our work

7
00:00:13,120 --> 00:00:16,320
template authenticating usb flash drives

8
00:00:16,320 --> 00:00:18,960
with novel timing fingerprints

9
00:00:18,960 --> 00:00:21,279
this work is collaborated with my

10
00:00:21,279 --> 00:00:25,920
colleagues patrick heinen and chase

11
00:00:26,320 --> 00:00:28,840
so here is a quick snapshot of

12
00:00:28,840 --> 00:00:31,599
templates time print is a new strategy

13
00:00:31,599 --> 00:00:33,680
that we have devised to fingerprint the

14
00:00:33,680 --> 00:00:35,200
usb drivers

15
00:00:35,200 --> 00:00:38,079
in a meaningful repeatable and hard to

16
00:00:38,079 --> 00:00:40,239
forge way so basically we have

17
00:00:40,239 --> 00:00:42,640
identified a new timing-based side

18
00:00:42,640 --> 00:00:45,600
channel that can be used to accurately

19
00:00:45,600 --> 00:00:48,559
fingerprint fingerprint usb devices

20
00:00:48,559 --> 00:00:50,640
so that we can potentially

21
00:00:50,640 --> 00:00:53,600
identify or reject unauthorized usb

22
00:00:53,600 --> 00:00:55,120
devices

23
00:00:55,120 --> 00:00:57,840
we have also examined the robotness and

24
00:00:57,840 --> 00:01:02,480
capabilities on the different scenarios

25
00:01:03,440 --> 00:01:06,000
to start let's take a quick look on how

26
00:01:06,000 --> 00:01:08,880
a computer handle a usb device

27
00:01:08,880 --> 00:01:12,159
the usb is a trusting protocol as soon

28
00:01:12,159 --> 00:01:14,720
as you plug in the usb device the

29
00:01:14,720 --> 00:01:17,280
computer system immediately cloud with

30
00:01:17,280 --> 00:01:18,799
the device

31
00:01:18,799 --> 00:01:20,799
to ask what type it is

32
00:01:20,799 --> 00:01:23,280
the usb can then decline all kinds of

33
00:01:23,280 --> 00:01:25,920
features from being a microphone to a

34
00:01:25,920 --> 00:01:29,360
joystick input device to a flash drive

35
00:01:29,360 --> 00:01:31,439
and then the computer system will

36
00:01:31,439 --> 00:01:33,759
initialize the entire driver stock to

37
00:01:33,759 --> 00:01:36,000
support those features

38
00:01:36,000 --> 00:01:39,280
so here we see usb was designed to

39
00:01:39,280 --> 00:01:42,720
involve less or even no user input so

40
00:01:42,720 --> 00:01:45,520
that it makes usb a incredibly user

41
00:01:45,520 --> 00:01:47,040
friendly system

42
00:01:47,040 --> 00:01:50,159
but it has implicit trust that the usb

43
00:01:50,159 --> 00:01:53,439
device is always correctly accurately

44
00:01:53,439 --> 00:01:56,159
reporting the capabilities

45
00:01:56,159 --> 00:01:58,880
and this implicit starts can be a

46
00:01:58,880 --> 00:02:01,680
problem from a security perspective

47
00:02:01,680 --> 00:02:02,960
well obviously

48
00:02:02,960 --> 00:02:06,079
a usb device can lie and attackers can

49
00:02:06,079 --> 00:02:09,919
make usb device to behave maliciously

50
00:02:09,919 --> 00:02:12,000
so user can pick up a device on the

51
00:02:12,000 --> 00:02:14,560
ground which looks like a usb flash

52
00:02:14,560 --> 00:02:16,800
drive but once he plug it into the

53
00:02:16,800 --> 00:02:20,080
computer it clients keyboards

54
00:02:20,080 --> 00:02:23,120
a keralis employee might also plug in a

55
00:02:23,120 --> 00:02:26,239
malicious but unauthorized device into

56
00:02:26,239 --> 00:02:29,280
the high security air gapped computer

57
00:02:29,280 --> 00:02:30,319
systems

58
00:02:30,319 --> 00:02:32,879
so with all the capabilities granted by

59
00:02:32,879 --> 00:02:35,519
the system the usb device can then do

60
00:02:35,519 --> 00:02:38,080
whatever he wants for example he may

61
00:02:38,080 --> 00:02:40,800
inject command to the terminal or maybe

62
00:02:40,800 --> 00:02:45,519
silently redirects the dns queries

63
00:02:46,319 --> 00:02:48,080
so what many

64
00:02:48,080 --> 00:02:50,640
research have post-proposed defenses

65
00:02:50,640 --> 00:02:53,760
against this type of tech we find those

66
00:02:53,760 --> 00:02:56,879
differences have their shortcomings for

67
00:02:56,879 --> 00:02:59,920
example some work proposed to use the

68
00:02:59,920 --> 00:03:02,800
device descriptor such as the window id

69
00:03:02,800 --> 00:03:05,840
product id or series number to white

70
00:03:05,840 --> 00:03:08,319
list or blacklist devices

71
00:03:08,319 --> 00:03:10,560
but those descriptors might suffer the

72
00:03:10,560 --> 00:03:11,920
problem that

73
00:03:11,920 --> 00:03:13,920
they might be forged

74
00:03:13,920 --> 00:03:16,879
and other works either require actual

75
00:03:16,879 --> 00:03:20,080
user interaction or maybe actual special

76
00:03:20,080 --> 00:03:22,480
hardware so this leads us to our

77
00:03:22,480 --> 00:03:26,080
question is there a software only fast

78
00:03:26,080 --> 00:03:29,680
and hard to forge solution

79
00:03:29,920 --> 00:03:33,040
so our approach is to create a unique

80
00:03:33,040 --> 00:03:36,080
timing profile for each usb device

81
00:03:36,080 --> 00:03:38,640
so let's take a look on the components

82
00:03:38,640 --> 00:03:41,680
of a standard usb flash drive and their

83
00:03:41,680 --> 00:03:43,280
potentials

84
00:03:43,280 --> 00:03:45,599
a typical flash drive contains multiple

85
00:03:45,599 --> 00:03:46,480
pieces

86
00:03:46,480 --> 00:03:48,799
including a usb adapter a

87
00:03:48,799 --> 00:03:50,640
microcontroller to handle usb

88
00:03:50,640 --> 00:03:52,799
transactions a flash controller to

89
00:03:52,799 --> 00:03:55,200
handle the flash translation layer and

90
00:03:55,200 --> 00:03:57,680
the flash memory

91
00:03:57,680 --> 00:04:00,480
so with some experiments we found that

92
00:04:00,480 --> 00:04:03,599
the first two components really wasn't

93
00:04:03,599 --> 00:04:05,920
has you know much information to begin

94
00:04:05,920 --> 00:04:07,360
for us

95
00:04:07,360 --> 00:04:09,680
but the last two components flash

96
00:04:09,680 --> 00:04:12,319
controller and flash memory are too

97
00:04:12,319 --> 00:04:15,680
interesting and complicated components

98
00:04:15,680 --> 00:04:17,839
the flash memory is quite common

99
00:04:17,839 --> 00:04:20,399
but unlike the standard spinning hard

100
00:04:20,399 --> 00:04:23,199
drive it has a much more complicated

101
00:04:23,199 --> 00:04:26,560
read and write procedures

102
00:04:26,560 --> 00:04:29,360
the first controller typically perform

103
00:04:29,360 --> 00:04:31,360
the real leveling

104
00:04:31,360 --> 00:04:34,080
on the flash memory to prevent specific

105
00:04:34,080 --> 00:04:35,040
cells

106
00:04:35,040 --> 00:04:37,600
from wearing out before others do so it

107
00:04:37,600 --> 00:04:40,840
maintains a virtual address to physical

108
00:04:40,840 --> 00:04:42,400
mapping

109
00:04:42,400 --> 00:04:44,080
to handle this

110
00:04:44,080 --> 00:04:46,560
and each time a device read has to go

111
00:04:46,560 --> 00:04:49,600
through a series of complex operations

112
00:04:49,600 --> 00:04:52,240
for example it must determine which

113
00:04:52,240 --> 00:04:54,080
flash pages to read

114
00:04:54,080 --> 00:04:56,000
and figure out the actual physical

115
00:04:56,000 --> 00:04:57,759
address

116
00:04:57,759 --> 00:05:00,240
access the data and potentially reorder

117
00:05:00,240 --> 00:05:02,560
the data and finally sends the back data

118
00:05:02,560 --> 00:05:05,360
back to the device so of course each of

119
00:05:05,360 --> 00:05:08,240
those steps takes time

120
00:05:08,240 --> 00:05:10,960
so we expect that due to the difference

121
00:05:10,960 --> 00:05:13,360
between the device manufacturing we

122
00:05:13,360 --> 00:05:15,840
might able to find different timing

123
00:05:15,840 --> 00:05:19,440
profiles for each device

124
00:05:19,440 --> 00:05:21,680
so with us conduct a preliminary

125
00:05:21,680 --> 00:05:23,840
experiment

126
00:05:23,840 --> 00:05:26,320
as we focused many on the storage

127
00:05:26,320 --> 00:05:29,600
surprise device we examined aca site

128
00:05:29,600 --> 00:05:31,520
protocol the small computer system

129
00:05:31,520 --> 00:05:33,919
interface so which provides a clean

130
00:05:33,919 --> 00:05:36,560
method to track all the transaction

131
00:05:36,560 --> 00:05:38,800
storage transactions

132
00:05:38,800 --> 00:05:40,800
particularly it contains three

133
00:05:40,800 --> 00:05:42,880
independent transactions

134
00:05:42,880 --> 00:05:45,440
the host will first issue a read command

135
00:05:45,440 --> 00:05:48,400
to the device specify the size and the

136
00:05:48,400 --> 00:05:51,039
location of the data thread

137
00:05:51,039 --> 00:05:53,600
and device will respond with the data

138
00:05:53,600 --> 00:05:55,199
and follow the

139
00:05:55,199 --> 00:05:57,520
status packet to indicate whether this

140
00:05:57,520 --> 00:06:00,240
transfer is successful or not

141
00:06:00,240 --> 00:06:02,160
so to perform a precise timing

142
00:06:02,160 --> 00:06:03,360
measurement

143
00:06:03,360 --> 00:06:07,600
we modify the sdsi driver to record two

144
00:06:07,600 --> 00:06:09,039
timing steps

145
00:06:09,039 --> 00:06:12,080
the first one is recorded as soon as the

146
00:06:12,080 --> 00:06:15,280
command is completely sent to the device

147
00:06:15,280 --> 00:06:17,840
and second timestamp is recorded as soon

148
00:06:17,840 --> 00:06:19,759
as the data from the device is

149
00:06:19,759 --> 00:06:22,880
completely returned

150
00:06:23,919 --> 00:06:25,520
so

151
00:06:25,520 --> 00:06:28,639
this figure shows the preliminary result

152
00:06:28,639 --> 00:06:31,199
particularly we

153
00:06:31,199 --> 00:06:34,319
measure a single location multiple times

154
00:06:34,319 --> 00:06:36,800
and then create a histogram of each

155
00:06:36,800 --> 00:06:38,000
device

156
00:06:38,000 --> 00:06:40,800
in this experiment we totally measured

157
00:06:40,800 --> 00:06:44,319
16 different usb devices belonging to

158
00:06:44,319 --> 00:06:46,560
four different models

159
00:06:46,560 --> 00:06:49,759
so each row is a device model and each

160
00:06:49,759 --> 00:06:52,400
colon is a specific device belonging to

161
00:06:52,400 --> 00:06:54,400
that particular model

162
00:06:54,400 --> 00:06:57,039
so from this figure we can immediately

163
00:06:57,039 --> 00:06:59,440
see some interesting result because

164
00:06:59,440 --> 00:07:02,800
clearly the shape of each row differs

165
00:07:02,800 --> 00:07:05,440
each other so that we can definitely

166
00:07:05,440 --> 00:07:07,440
utilize this method to identify

167
00:07:07,440 --> 00:07:09,919
different device models

168
00:07:09,919 --> 00:07:12,639
but if you look a little closer to the

169
00:07:12,639 --> 00:07:15,280
device graph you can actually find that

170
00:07:15,280 --> 00:07:17,520
even though some those devices belong to

171
00:07:17,520 --> 00:07:19,680
the same device model

172
00:07:19,680 --> 00:07:22,240
their graph still differs slightly

173
00:07:22,240 --> 00:07:23,440
differently

174
00:07:23,440 --> 00:07:25,599
so this is encouraging that because we

175
00:07:25,599 --> 00:07:29,280
might able to explore this to identify

176
00:07:29,280 --> 00:07:33,758
devices belonging to the same model

177
00:07:34,240 --> 00:07:35,199
so this

178
00:07:35,199 --> 00:07:36,960
experiment multiplies to create

179
00:07:36,960 --> 00:07:38,319
temperament

180
00:07:38,319 --> 00:07:41,039
so essentially we have modified the usb

181
00:07:41,039 --> 00:07:43,919
driver to perform actual read to the

182
00:07:43,919 --> 00:07:44,960
device

183
00:07:44,960 --> 00:07:46,560
and then we perform the timing

184
00:07:46,560 --> 00:07:48,400
measurement on those actual read

185
00:07:48,400 --> 00:07:51,520
commands and transform those timings to

186
00:07:51,520 --> 00:07:52,879
a fingerprint

187
00:07:52,879 --> 00:07:55,199
we can then exploit this fingerprint to

188
00:07:55,199 --> 00:07:58,160
provide white listing or identification

189
00:07:58,160 --> 00:08:00,560
of the usb device

190
00:08:00,560 --> 00:08:03,520
so if we find an unseen device

191
00:08:03,520 --> 00:08:05,759
that is plugged in templates should

192
00:08:05,759 --> 00:08:08,960
reject this device

193
00:08:10,080 --> 00:08:12,400
to examine the effectiveness

194
00:08:12,400 --> 00:08:14,160
we have checked three different

195
00:08:14,160 --> 00:08:15,440
scenarios

196
00:08:15,440 --> 00:08:18,160
for the first scenario we assume

197
00:08:18,160 --> 00:08:20,879
attackers has no knowledge

198
00:08:20,879 --> 00:08:24,000
of the approved usb devices and thus he

199
00:08:24,000 --> 00:08:27,520
can simply bring a random usb device so

200
00:08:27,520 --> 00:08:30,479
such a random usb device is highly

201
00:08:30,479 --> 00:08:33,919
likely not belong to the approved device

202
00:08:33,919 --> 00:08:34,958
model

203
00:08:34,958 --> 00:08:37,440
so in short we want to test why the

204
00:08:37,440 --> 00:08:40,559
template can identify between different

205
00:08:40,559 --> 00:08:43,120
device models

206
00:08:43,120 --> 00:08:45,200
in the second scenario we assume a

207
00:08:45,200 --> 00:08:48,320
stronger attacker so such attacker might

208
00:08:48,320 --> 00:08:51,200
know the acceptable device brand and

209
00:08:51,200 --> 00:08:53,760
device models and then he can purchase

210
00:08:53,760 --> 00:08:57,279
his own particular usb device from that

211
00:08:57,279 --> 00:08:59,200
device model and

212
00:08:59,200 --> 00:09:00,640
brands

213
00:09:00,640 --> 00:09:03,519
so in this in the second scenario this

214
00:09:03,519 --> 00:09:05,760
test should able to reject

215
00:09:05,760 --> 00:09:08,080
unauthorize the device from the same

216
00:09:08,080 --> 00:09:10,000
model and brand

217
00:09:10,000 --> 00:09:12,640
and finally we'll examine whether we can

218
00:09:12,640 --> 00:09:15,200
accurately identify individual usb

219
00:09:15,200 --> 00:09:17,600
devices within the same model so let's

220
00:09:17,600 --> 00:09:22,120
basically do a classification job

221
00:09:22,560 --> 00:09:24,959
particularly we want to emphasize that

222
00:09:24,959 --> 00:09:27,680
we target on identify our know brands

223
00:09:27,680 --> 00:09:30,640
and models and unseen devices which

224
00:09:30,640 --> 00:09:32,959
means that we do not collect any

225
00:09:32,959 --> 00:09:35,360
training data for those unseen devices

226
00:09:35,360 --> 00:09:38,959
because we have never seen them before

227
00:09:39,519 --> 00:09:42,959
so this table shows the devices we have

228
00:09:42,959 --> 00:09:45,680
used in our experiment it includes more

229
00:09:45,680 --> 00:09:50,160
than 40 devices from 12 different models

230
00:09:50,160 --> 00:09:52,800
so we should let this test cover

231
00:09:52,800 --> 00:09:56,000
different sizes of devices different usb

232
00:09:56,000 --> 00:09:58,000
protocols and different flash

233
00:09:58,000 --> 00:10:00,240
controllers

234
00:10:00,240 --> 00:10:03,040
for some devices we have purchased 10 of

235
00:10:03,040 --> 00:10:05,680
each to ensure that we could provide

236
00:10:05,680 --> 00:10:08,079
meaningful results about this

237
00:10:08,079 --> 00:10:11,599
intra-modal differences

238
00:10:12,079 --> 00:10:14,320
so next let's talk about the details of

239
00:10:14,320 --> 00:10:15,680
the design

240
00:10:15,680 --> 00:10:19,519
the first step is to acquire raw samples

241
00:10:19,519 --> 00:10:21,839
for collecting raw samples we divide the

242
00:10:21,839 --> 00:10:24,240
system together information from

243
00:10:24,240 --> 00:10:26,000
different locations

244
00:10:26,000 --> 00:10:29,360
on a random order so basically we design

245
00:10:29,360 --> 00:10:33,680
a single random service containing 3000

246
00:10:33,680 --> 00:10:37,440
reads each read is selected from one of

247
00:10:37,440 --> 00:10:41,040
the three sizes and one of six locations

248
00:10:41,040 --> 00:10:43,760
so this ensure the flash controller

249
00:10:43,760 --> 00:10:47,040
performs different read patterns

250
00:10:47,040 --> 00:10:50,320
this random series of reads is generated

251
00:10:50,320 --> 00:10:53,279
once and used for all the tests on all

252
00:10:53,279 --> 00:10:56,000
devices to ensure there's no bias here

253
00:10:56,000 --> 00:10:59,440
but the actual order is not important

254
00:10:59,440 --> 00:11:02,160
so in total we gathered 80 samples for

255
00:11:02,160 --> 00:11:04,880
each device with 20 samples being one

256
00:11:04,880 --> 00:11:08,720
session totally we have four sessions

257
00:11:09,040 --> 00:11:11,440
after we acquired the raw data

258
00:11:11,440 --> 00:11:12,240
we

259
00:11:12,240 --> 00:11:14,480
grouped them into different groups by

260
00:11:14,480 --> 00:11:17,200
their sites and locations

261
00:11:17,200 --> 00:11:19,519
and this allows us to further generate

262
00:11:19,519 --> 00:11:21,600
statistical information

263
00:11:21,600 --> 00:11:23,839
depends on different scenarios we use

264
00:11:23,839 --> 00:11:25,600
different features and different

265
00:11:25,600 --> 00:11:27,200
classifiers

266
00:11:27,200 --> 00:11:30,640
for the first scenario where we try to

267
00:11:30,640 --> 00:11:33,040
identify different device models we

268
00:11:33,040 --> 00:11:35,279
believe this is kind of course grant

269
00:11:35,279 --> 00:11:38,079
information so we simply take the mean

270
00:11:38,079 --> 00:11:40,720
of each group and utilize a k-means

271
00:11:40,720 --> 00:11:42,959
class classifier

272
00:11:42,959 --> 00:11:45,279
so essentially the k-means

273
00:11:45,279 --> 00:11:47,920
classifier only takes a sample of

274
00:11:47,920 --> 00:11:50,399
authorized devices

275
00:11:50,399 --> 00:11:54,320
and if when unknown devices show up

276
00:11:54,320 --> 00:11:55,200
if

277
00:11:55,200 --> 00:11:58,079
if it is outside the cluster boundary we

278
00:11:58,079 --> 00:12:00,880
expect this is a disallowed device and

279
00:12:00,880 --> 00:12:03,839
time print should reject it

280
00:12:03,839 --> 00:12:06,800
for the two other scenarios we create a

281
00:12:06,800 --> 00:12:09,440
histogram for each group and then

282
00:12:09,440 --> 00:12:11,440
utilize the 2d

283
00:12:11,440 --> 00:12:13,279
convolutional neural network for the

284
00:12:13,279 --> 00:12:15,360
classification

285
00:12:15,360 --> 00:12:18,079
again we want to emphasize that our task

286
00:12:18,079 --> 00:12:21,360
is to identify on-sim devices belonging

287
00:12:21,360 --> 00:12:23,680
to the same model which means that we do

288
00:12:23,680 --> 00:12:26,560
not collect training data for those

289
00:12:26,560 --> 00:12:30,079
unseen tested device

290
00:12:30,560 --> 00:12:32,639
so here is some results

291
00:12:32,639 --> 00:12:34,560
for the first scenario brand

292
00:12:34,560 --> 00:12:37,200
identification we find that time print

293
00:12:37,200 --> 00:12:39,040
performs really good

294
00:12:39,040 --> 00:12:41,680
we have more than 99

295
00:12:41,680 --> 00:12:44,480
acceptance rate which means that we

296
00:12:44,480 --> 00:12:47,440
almost can always accept a device if

297
00:12:47,440 --> 00:12:50,079
this device belongs to the authorized

298
00:12:50,079 --> 00:12:53,519
model or brand at the same time it will

299
00:12:53,519 --> 00:12:56,160
always correctly reject the device if

300
00:12:56,160 --> 00:12:58,320
this device does not belong to the

301
00:12:58,320 --> 00:12:59,519
authorized

302
00:12:59,519 --> 00:13:02,320
device model

303
00:13:03,040 --> 00:13:05,440
for the second scenario we're trying to

304
00:13:05,440 --> 00:13:08,399
identify devices belonging to the same

305
00:13:08,399 --> 00:13:10,800
model and the brand

306
00:13:10,800 --> 00:13:13,600
again the result is quite encouraging

307
00:13:13,600 --> 00:13:15,360
we're able to achieve

308
00:13:15,360 --> 00:13:16,880
98

309
00:13:16,880 --> 00:13:19,600
average true acceptance rate

310
00:13:19,600 --> 00:13:23,120
and about 92 percent average true

311
00:13:23,120 --> 00:13:24,959
rejection rate

312
00:13:24,959 --> 00:13:27,440
remember that we're trying to reject

313
00:13:27,440 --> 00:13:29,680
unseen device which we don't have the

314
00:13:29,680 --> 00:13:32,240
data for this device so this indicates

315
00:13:32,240 --> 00:13:35,040
temperature has enough information to

316
00:13:35,040 --> 00:13:36,320
uniquely

317
00:13:36,320 --> 00:13:40,240
fingerprint a usb device

318
00:13:40,959 --> 00:13:43,600
and finally for the

319
00:13:43,600 --> 00:13:45,440
last scenario

320
00:13:45,440 --> 00:13:47,360
we test within

321
00:13:47,360 --> 00:13:50,240
each mode of drive using three sessions

322
00:13:50,240 --> 00:13:52,959
for training and remaining session for

323
00:13:52,959 --> 00:13:55,920
testing so after this cross-validation

324
00:13:55,920 --> 00:13:58,399
and the result average were able to

325
00:13:58,399 --> 00:14:00,800
achieve more than 98

326
00:14:00,800 --> 00:14:03,360
average accuracy so again this is a very

327
00:14:03,360 --> 00:14:06,399
encouraging result

328
00:14:07,360 --> 00:14:09,760
we have also looked at some practicity

329
00:14:09,760 --> 00:14:12,399
experiments especially we focused on the

330
00:14:12,399 --> 00:14:15,360
latency and thus related to the user

331
00:14:15,360 --> 00:14:16,480
impact

332
00:14:16,480 --> 00:14:20,399
we also test the impact of hardware

333
00:14:20,399 --> 00:14:23,440
variation like different ports different

334
00:14:23,440 --> 00:14:26,720
hubs and even different hosts

335
00:14:26,720 --> 00:14:29,519
we have also discussed the robotness

336
00:14:29,519 --> 00:14:32,079
with device usage is basically how

337
00:14:32,079 --> 00:14:34,880
writing a device can affect the

338
00:14:34,880 --> 00:14:37,680
fingerprint accuracy for more details

339
00:14:37,680 --> 00:14:41,439
please refer to our papers

340
00:14:42,160 --> 00:14:44,639
so to summarize we have demonstrated a

341
00:14:44,639 --> 00:14:47,360
new latency based fingerprint solution

342
00:14:47,360 --> 00:14:49,360
for flash drivers

343
00:14:49,360 --> 00:14:51,839
which requires no user interaction and

344
00:14:51,839 --> 00:14:54,320
utilize non-vulnerable forgible

345
00:14:54,320 --> 00:14:56,000
characteristics

346
00:14:56,000 --> 00:14:57,760
we have demonstrated the efficiency

347
00:14:57,760 --> 00:15:00,079
across more than 40 different usb

348
00:15:00,079 --> 00:15:03,440
devices and across the serious scenarios

349
00:15:03,440 --> 00:15:05,920
and advanced conditions

350
00:15:05,920 --> 00:15:08,320
so that basically ends my talk if you

351
00:15:08,320 --> 00:15:10,240
are interested in our work especially

352
00:15:10,240 --> 00:15:12,399
about the technical details please feel

353
00:15:12,399 --> 00:15:15,360
free to email patrick as he is the main

354
00:15:15,360 --> 00:15:17,440
contributor of this project

355
00:15:17,440 --> 00:15:19,360
and with that i'm happy to take any

356
00:15:19,360 --> 00:15:23,320
questions thank you

357
00:15:26,399 --> 00:15:28,959
so we have two minutes uh for a question

358
00:15:28,959 --> 00:15:31,920
so one quick question

359
00:15:32,639 --> 00:15:34,720
uh hello this is jalen from purdue

360
00:15:34,720 --> 00:15:36,959
university great work i really enjoyed

361
00:15:36,959 --> 00:15:39,279
the talk thank you so uh my question is

362
00:15:39,279 --> 00:15:40,959
uh

363
00:15:40,959 --> 00:15:43,920
is the aging of the device effect is

364
00:15:43,920 --> 00:15:45,920
fingerprint for example is the

365
00:15:45,920 --> 00:15:48,079
fingerprint of the device is the same

366
00:15:48,079 --> 00:15:50,320
way it's brand new or

367
00:15:50,320 --> 00:15:51,680
and

368
00:15:51,680 --> 00:15:53,519
let's say the device is being used for

369
00:15:53,519 --> 00:15:56,079
one year or even five years well that's

370
00:15:56,079 --> 00:15:58,720
a good question thank you i think to the

371
00:15:58,720 --> 00:16:00,959
best of my knowledge we

372
00:16:00,959 --> 00:16:04,560
have our so for for more than 40 devices

373
00:16:04,560 --> 00:16:07,440
some of them are old device and most of

374
00:16:07,440 --> 00:16:09,759
them are new purchase device and we

375
00:16:09,759 --> 00:16:12,079
format all the devices

376
00:16:12,079 --> 00:16:13,839
in our experiment following the same

377
00:16:13,839 --> 00:16:16,079
procedure but i think the overall

378
00:16:16,079 --> 00:16:17,920
accuracy is still

379
00:16:17,920 --> 00:16:20,160
good and consistent across all the

380
00:16:20,160 --> 00:16:22,639
devices we don't have a specific

381
00:16:22,639 --> 00:16:25,040
experiment studying the aging but i

382
00:16:25,040 --> 00:16:26,480
believe

383
00:16:26,480 --> 00:16:28,320
it should work

384
00:16:28,320 --> 00:16:31,040
thank you thank you

385
00:16:31,600 --> 00:16:32,959
hello shoshone you're from the ohio

386
00:16:32,959 --> 00:16:35,360
state university great work so

387
00:16:35,360 --> 00:16:37,839
i have a question here is about the

388
00:16:37,839 --> 00:16:40,560
some some behavior of the controller so

389
00:16:40,560 --> 00:16:42,000
i know some controller might have a

390
00:16:42,000 --> 00:16:43,680
caching mechanism that they can

391
00:16:43,680 --> 00:16:45,519
initially run very fast

392
00:16:45,519 --> 00:16:46,240
but

393
00:16:46,240 --> 00:16:49,199
after some some like some data written

394
00:16:49,199 --> 00:16:51,040
you can just go slow but

395
00:16:51,040 --> 00:16:52,959
but like after a while when the cache is

396
00:16:52,959 --> 00:16:55,040
flush they can then go again be very

397
00:16:55,040 --> 00:16:56,079
fast so

398
00:16:56,079 --> 00:16:58,079
so how can you handle this well thank

399
00:16:58,079 --> 00:17:00,480
you that's a good question i believe

400
00:17:00,480 --> 00:17:02,560
again to the best of my knowledge we

401
00:17:02,560 --> 00:17:05,839
have disabled the caching mechanism to

402
00:17:05,839 --> 00:17:08,079
ensure that it won't has any impact on

403
00:17:08,079 --> 00:17:09,919
our accuracy

404
00:17:09,919 --> 00:17:12,480
but for more details i think patrick is

405
00:17:12,480 --> 00:17:15,119
the better person to answer okay thank

406
00:17:15,119 --> 00:17:17,198
you

407
00:17:17,439 --> 00:17:20,480
all right let's uh let's thank sinhal

408
00:17:20,480 --> 00:17:22,559
one more time

409
00:17:22,559 --> 00:17:24,400
thank you

410
00:17:24,400 --> 00:17:26,799
agree

