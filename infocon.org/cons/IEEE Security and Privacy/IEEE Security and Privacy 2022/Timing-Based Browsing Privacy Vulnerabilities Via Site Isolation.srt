1
00:00:02,720 --> 00:00:05,040
thanks for attending this talk

2
00:00:05,040 --> 00:00:08,639
i'm sure chen of microsoft research asia

3
00:00:08,639 --> 00:00:10,800
this is a joint work with qinghuang

4
00:00:10,800 --> 00:00:12,320
university

5
00:00:12,320 --> 00:00:16,480
the team includes our students

6
00:00:17,039 --> 00:00:19,199
and professor xin duan

7
00:00:19,199 --> 00:00:22,160
the title is timing based browsing

8
00:00:22,160 --> 00:00:24,800
privacy vulnerabilities via site

9
00:00:24,800 --> 00:00:27,039
isolation

10
00:00:27,039 --> 00:00:29,439
let me first explain what site isolation

11
00:00:29,439 --> 00:00:30,400
is

12
00:00:30,400 --> 00:00:31,760
you may know that

13
00:00:31,760 --> 00:00:33,440
before chromium

14
00:00:33,440 --> 00:00:36,559
all commercial browsers were monolithic

15
00:00:36,559 --> 00:00:39,680
they were single process programs

16
00:00:39,680 --> 00:00:41,200
i think

17
00:00:41,200 --> 00:00:44,399
chromium's multi-process architecture

18
00:00:44,399 --> 00:00:46,879
is the deepest rethinking about the

19
00:00:46,879 --> 00:00:49,120
security architecture for modern

20
00:00:49,120 --> 00:00:51,039
browsers

21
00:00:51,039 --> 00:00:53,600
between 2008 when

22
00:00:53,600 --> 00:00:57,680
chrome was released and 2018 when site

23
00:00:57,680 --> 00:00:59,680
isolation was achieved

24
00:00:59,680 --> 00:01:02,559
it took a whole decade for the

25
00:01:02,559 --> 00:01:05,920
architecture to achieve site isolation

26
00:01:05,920 --> 00:01:07,760
which ensures that

27
00:01:07,760 --> 00:01:11,200
a.com's contents and b.coms contents are

28
00:01:11,200 --> 00:01:14,320
rendered by two processes

29
00:01:14,320 --> 00:01:16,240
it was a long journey which also

30
00:01:16,240 --> 00:01:19,439
involved many academic papers

31
00:01:19,439 --> 00:01:23,360
and eventually in 2019

32
00:01:23,360 --> 00:01:25,600
google published the site isolation

33
00:01:25,600 --> 00:01:26,400
paper

34
00:01:26,400 --> 00:01:29,439
in using its security

35
00:01:29,439 --> 00:01:31,119
site isolation

36
00:01:31,119 --> 00:01:33,280
requires a huge effort

37
00:01:33,280 --> 00:01:36,240
to overcome compatibility resource and

38
00:01:36,240 --> 00:01:38,079
performance hurdles

39
00:01:38,079 --> 00:01:41,840
the security benefit is also significant

40
00:01:41,840 --> 00:01:43,280
the chrome team

41
00:01:43,280 --> 00:01:45,360
showed that many well-known security

42
00:01:45,360 --> 00:01:46,640
issues

43
00:01:46,640 --> 00:01:49,040
are mitigated in a fundamental way

44
00:01:49,040 --> 00:01:51,840
including memory exploits

45
00:01:51,840 --> 00:01:54,799
universal cross-site scripting browser

46
00:01:54,799 --> 00:01:57,200
extension security issues

47
00:01:57,200 --> 00:02:00,880
and meltdown and spectra

48
00:02:00,880 --> 00:02:03,200
but there is still a problem

49
00:02:03,200 --> 00:02:05,759
we know that the web is extremely

50
00:02:05,759 --> 00:02:08,000
complex

51
00:02:08,000 --> 00:02:10,399
but process is a scarce resource in the

52
00:02:10,399 --> 00:02:11,440
os

53
00:02:11,440 --> 00:02:14,160
how can this scarce resource accommodate

54
00:02:14,160 --> 00:02:16,879
the complex web for example

55
00:02:16,879 --> 00:02:19,200
a typical cnn news page contains at

56
00:02:19,200 --> 00:02:22,640
least 15 cross-site iframes

57
00:02:22,640 --> 00:02:25,200
because different sites must be rendered

58
00:02:25,200 --> 00:02:27,280
by different processes

59
00:02:27,280 --> 00:02:30,000
one cnn page needs

60
00:02:30,000 --> 00:02:32,720
at least 16 processes

61
00:02:32,720 --> 00:02:36,160
for site isolation now suppose i have 10

62
00:02:36,160 --> 00:02:37,120
tabs

63
00:02:37,120 --> 00:02:38,640
in my browser

64
00:02:38,640 --> 00:02:42,959
does chrome use 160 processes to render

65
00:02:42,959 --> 00:02:45,599
these 10 cnn tabs

66
00:02:45,599 --> 00:02:48,560
that would not be practical

67
00:02:48,560 --> 00:02:52,080
so process scarcity is an inherent

68
00:02:52,080 --> 00:02:54,640
challenge for site isolation

69
00:02:54,640 --> 00:02:56,959
to make setup isolation feasible

70
00:02:56,959 --> 00:02:59,680
same size frames need to aggressively

71
00:02:59,680 --> 00:03:02,959
reuse processes even across tabs

72
00:03:02,959 --> 00:03:06,239
for example it is possible that

73
00:03:06,239 --> 00:03:10,159
the 10 cnn tabs in the previous slide

74
00:03:10,159 --> 00:03:14,319
are rendered by 16 processes

75
00:03:14,319 --> 00:03:16,480
and this leads to the privacy issue we

76
00:03:16,480 --> 00:03:17,599
discover

77
00:03:17,599 --> 00:03:20,080
in this work

78
00:03:20,080 --> 00:03:23,040
we call this privacy issue cross-site

79
00:03:23,040 --> 00:03:25,599
browsing privacy leak

80
00:03:25,599 --> 00:03:29,040
the attack scenario is the following

81
00:03:29,040 --> 00:03:31,519
suppose the user visits the attacker's

82
00:03:31,519 --> 00:03:32,400
site

83
00:03:32,400 --> 00:03:35,040
or any site containing the attacker's

84
00:03:35,040 --> 00:03:36,400
script

85
00:03:36,400 --> 00:03:37,680
the attacker

86
00:03:37,680 --> 00:03:39,040
has

87
00:03:39,040 --> 00:03:41,200
a target site list

88
00:03:41,200 --> 00:03:43,280
which contains hundreds or a few

89
00:03:43,280 --> 00:03:46,480
thousands of sensitive sites then the

90
00:03:46,480 --> 00:03:47,599
attacker

91
00:03:47,599 --> 00:03:50,720
can find out which sites are loaded

92
00:03:50,720 --> 00:03:53,360
in the browser and furthermore the

93
00:03:53,360 --> 00:03:55,040
attacker can monitor

94
00:03:55,040 --> 00:03:57,840
how the user spends time between these

95
00:03:57,840 --> 00:03:59,360
sensitive sites

96
00:03:59,360 --> 00:04:00,879
and in particular

97
00:04:00,879 --> 00:04:02,400
at any moment

98
00:04:02,400 --> 00:04:04,640
the attacker can figure out

99
00:04:04,640 --> 00:04:06,000
which site

100
00:04:06,000 --> 00:04:09,200
is in the foreground tab and which sites

101
00:04:09,200 --> 00:04:12,560
are in the background tabs

102
00:04:12,959 --> 00:04:15,200
here is a demo about

103
00:04:15,200 --> 00:04:20,000
the attacker monitoring a target site

104
00:04:22,960 --> 00:04:25,280
in this video i will show how to play

105
00:04:25,280 --> 00:04:26,960
with the demo

106
00:04:26,960 --> 00:04:29,280
first specify a site or choose it from

107
00:04:29,280 --> 00:04:30,320
the list

108
00:04:30,320 --> 00:04:32,560
for example youtube

109
00:04:32,560 --> 00:04:34,320
click monitor and immediately switch

110
00:04:34,320 --> 00:04:36,960
another tab

111
00:04:40,880 --> 00:04:43,840
ignore the first result

112
00:04:51,280 --> 00:04:54,000
now you see the not present result

113
00:04:54,000 --> 00:04:55,440
meaning that the attacker knows

114
00:04:55,440 --> 00:04:58,080
youtube.com is not present

115
00:04:58,080 --> 00:05:01,359
now i visit youtube

116
00:05:07,680 --> 00:05:09,680
the attacker now knows that youtube is

117
00:05:09,680 --> 00:05:11,440
in the foreground tab

118
00:05:11,440 --> 00:05:14,800
i switch to another tab

119
00:05:18,800 --> 00:05:20,800
the attacker now knows that youtube is

120
00:05:20,800 --> 00:05:22,400
in a background tab

121
00:05:22,400 --> 00:05:25,840
i switch to foreground

122
00:05:28,560 --> 00:05:31,840
i switch to background

123
00:05:32,720 --> 00:05:36,360
i switch to foreground

124
00:05:40,560 --> 00:05:43,759
and i switch to background

125
00:05:47,120 --> 00:05:50,759
i close youtube

126
00:05:56,479 --> 00:05:58,400
now it is not present

127
00:05:58,400 --> 00:06:01,440
thank you for watching

128
00:06:02,000 --> 00:06:05,039
so how can the attacker see which sites

129
00:06:05,039 --> 00:06:07,199
are present and which sites you are

130
00:06:07,199 --> 00:06:09,199
interacting with

131
00:06:09,199 --> 00:06:11,280
what actually happened is that the

132
00:06:11,280 --> 00:06:14,479
attackers page contains an iframe to

133
00:06:14,479 --> 00:06:16,800
load a youtube url

134
00:06:16,800 --> 00:06:19,280
the attacker can measure the time of the

135
00:06:19,280 --> 00:06:22,319
loading if the time is long youtube is

136
00:06:22,319 --> 00:06:25,039
likely not present otherwise

137
00:06:25,039 --> 00:06:27,120
it is likely present

138
00:06:27,120 --> 00:06:29,919
this is because if youtube is in another

139
00:06:29,919 --> 00:06:33,520
tab the attacker's iframe will reuse the

140
00:06:33,520 --> 00:06:35,360
existing process

141
00:06:35,360 --> 00:06:39,520
otherwise it will create a new process

142
00:06:39,520 --> 00:06:42,080
the difference is tens of milliseconds

143
00:06:42,080 --> 00:06:45,039
which is very big

144
00:06:45,039 --> 00:06:49,759
we measure each of alexa top 3000 sites

145
00:06:49,759 --> 00:06:50,720
in the

146
00:06:50,720 --> 00:06:53,759
not present foreground and background

147
00:06:53,759 --> 00:06:55,199
situations

148
00:06:55,199 --> 00:06:58,759
or mpfgbg

149
00:06:59,120 --> 00:07:03,360
the red bg and the blue mp distributions

150
00:07:03,360 --> 00:07:05,440
are clearly different

151
00:07:05,440 --> 00:07:09,759
the green fp distribution is very wide

152
00:07:09,759 --> 00:07:10,880
so

153
00:07:10,880 --> 00:07:12,400
we have

154
00:07:12,400 --> 00:07:13,680
fg

155
00:07:13,680 --> 00:07:14,840
mp

156
00:07:14,840 --> 00:07:20,800
overlapping also f g b g overlapping

157
00:07:20,800 --> 00:07:23,280
to deal with the overlappings we

158
00:07:23,280 --> 00:07:26,720
identify other timing characteristics

159
00:07:26,720 --> 00:07:30,800
to differentiate fg versus bt and fg

160
00:07:30,800 --> 00:07:32,479
versus mp

161
00:07:32,479 --> 00:07:34,800
for fg versus bg

162
00:07:34,800 --> 00:07:36,080
we find that

163
00:07:36,080 --> 00:07:39,759
chromium assigns a high process priority

164
00:07:39,759 --> 00:07:42,639
to the fg process

165
00:07:42,639 --> 00:07:45,680
if the attacker stresses the cpu with an

166
00:07:45,680 --> 00:07:47,919
infinite loop

167
00:07:47,919 --> 00:07:50,560
the fg process performance will be

168
00:07:50,560 --> 00:07:53,520
impacted less significantly

169
00:07:53,520 --> 00:07:56,639
than a bg process

170
00:07:56,639 --> 00:07:58,400
as you can see

171
00:07:58,400 --> 00:07:59,840
these dots

172
00:07:59,840 --> 00:08:02,800
can be separated along the vertical

173
00:08:02,800 --> 00:08:05,520
dimension which is about the second

174
00:08:05,520 --> 00:08:06,639
measurement

175
00:08:06,639 --> 00:08:09,919
on a stressed cpu

176
00:08:09,919 --> 00:08:12,720
for fg versus mp

177
00:08:12,720 --> 00:08:14,479
we find that

178
00:08:14,479 --> 00:08:18,319
the html parsing performance is lower

179
00:08:18,319 --> 00:08:21,120
when the process is newly created

180
00:08:21,120 --> 00:08:24,879
so the attacker can measure the hdmi

181
00:08:24,879 --> 00:08:29,199
passing time to test if it is an mp

182
00:08:29,199 --> 00:08:31,280
the result is similar

183
00:08:31,280 --> 00:08:33,440
we can now separate

184
00:08:33,440 --> 00:08:35,839
the blue and green dots

185
00:08:35,839 --> 00:08:36,799
that

186
00:08:36,799 --> 00:08:39,120
couldn't separate along the first

187
00:08:39,120 --> 00:08:41,839
dimension

188
00:08:42,399 --> 00:08:44,080
i just talked about

189
00:08:44,080 --> 00:08:46,399
the high level idea there are many

190
00:08:46,399 --> 00:08:49,680
details to make the idea really work

191
00:08:49,680 --> 00:08:52,959
i'm now describing some details

192
00:08:52,959 --> 00:08:55,200
the first detail is about avoiding

193
00:08:55,200 --> 00:08:57,040
network jitters

194
00:08:57,040 --> 00:08:59,519
the attacker is based on inter-process

195
00:08:59,519 --> 00:09:02,880
timing so we do not want the network to

196
00:09:02,880 --> 00:09:05,040
affect the timing

197
00:09:05,040 --> 00:09:06,720
there are two ways

198
00:09:06,720 --> 00:09:09,839
to load a url without generating an

199
00:09:09,839 --> 00:09:13,519
actual network request

200
00:09:14,000 --> 00:09:15,440
the first way

201
00:09:15,440 --> 00:09:19,360
is to use an unsafe port in the url such

202
00:09:19,360 --> 00:09:22,480
as port 1 port 22 etc

203
00:09:22,480 --> 00:09:24,320
for example

204
00:09:24,320 --> 00:09:28,240
we let the iframe load youtube

205
00:09:28,240 --> 00:09:29,839
on port 1.

206
00:09:29,839 --> 00:09:32,560
this request is prohibited

207
00:09:32,560 --> 00:09:34,839
by the browser because port 1 is

208
00:09:34,839 --> 00:09:37,360
considered an unsafe port

209
00:09:37,360 --> 00:09:39,760
however because the request is

210
00:09:39,760 --> 00:09:41,200
prohibited

211
00:09:41,200 --> 00:09:43,600
the iframe loading is

212
00:09:43,600 --> 00:09:45,920
completed immediately

213
00:09:45,920 --> 00:09:47,680
and this gives us

214
00:09:47,680 --> 00:09:51,839
no network delay in the measurement

215
00:09:53,440 --> 00:09:55,839
the second way is to use a static

216
00:09:55,839 --> 00:09:57,200
content

217
00:09:57,200 --> 00:09:59,680
in the disk cache for example

218
00:09:59,680 --> 00:10:04,640
the attacker can pre-load fevicom.ico

219
00:10:04,640 --> 00:10:08,000
or robot.txt

220
00:10:08,000 --> 00:10:11,760
so this static resource is in the disk

221
00:10:11,760 --> 00:10:12,959
cache

222
00:10:12,959 --> 00:10:14,160
then

223
00:10:14,160 --> 00:10:16,160
when the attacker does the actual

224
00:10:16,160 --> 00:10:17,279
measurement

225
00:10:17,279 --> 00:10:22,240
there is no network delay in the result

226
00:10:22,800 --> 00:10:25,680
the second set of details is about

227
00:10:25,680 --> 00:10:28,800
understanding chromium's internals

228
00:10:28,800 --> 00:10:32,240
we explore chromium's internals to find

229
00:10:32,240 --> 00:10:33,760
and understand the timing

230
00:10:33,760 --> 00:10:36,320
characteristics

231
00:10:36,320 --> 00:10:38,800
this was achieved through

232
00:10:38,800 --> 00:10:42,160
design docs and source code

233
00:10:42,160 --> 00:10:45,279
through the ipc layer investigation

234
00:10:45,279 --> 00:10:48,800
and through our runtime testing

235
00:10:48,800 --> 00:10:51,360
the paper describes many details for

236
00:10:51,360 --> 00:10:54,720
example we talk about

237
00:10:54,720 --> 00:10:57,839
inter-process communication

238
00:10:57,839 --> 00:11:02,640
we also focus on the code logic about

239
00:11:02,640 --> 00:11:04,160
render view

240
00:11:04,160 --> 00:11:06,800
which has an interesting cross iframe

241
00:11:06,800 --> 00:11:08,880
effect related

242
00:11:08,880 --> 00:11:12,160
to the pages visibility

243
00:11:12,160 --> 00:11:12,839
in

244
00:11:12,839 --> 00:11:15,839
addition we talk about

245
00:11:15,839 --> 00:11:19,200
the html parsing performance

246
00:11:19,200 --> 00:11:22,880
which is affected by the freshness

247
00:11:22,880 --> 00:11:26,480
of the renderer process

248
00:11:26,480 --> 00:11:28,720
these are sources that

249
00:11:28,720 --> 00:11:31,519
produce timing differences but i need to

250
00:11:31,519 --> 00:11:35,839
skip these details in my talk today

251
00:11:35,839 --> 00:11:38,800
let me now present the evaluation

252
00:11:38,800 --> 00:11:41,279
results

253
00:11:41,600 --> 00:11:45,360
we use the alexa top 3000 sites

254
00:11:45,360 --> 00:11:48,320
to do an evaluation to cover different

255
00:11:48,320 --> 00:11:51,519
cpu powers and different noise workload

256
00:11:51,519 --> 00:11:52,720
levels

257
00:11:52,720 --> 00:11:56,079
specifically we test on a more powerful

258
00:11:56,079 --> 00:12:00,399
desktop pc and a less powerful laptop pc

259
00:12:00,399 --> 00:12:03,040
we create different numbers of extra

260
00:12:03,040 --> 00:12:06,000
tabs loading arbitrary pages

261
00:12:06,000 --> 00:12:07,519
as noise

262
00:12:07,519 --> 00:12:12,399
we have four data sets data set a

263
00:12:12,399 --> 00:12:15,760
is the scenario with five extra tabs on

264
00:12:15,760 --> 00:12:17,519
the desktop pc

265
00:12:17,519 --> 00:12:20,240
and data set b is one extra tab on

266
00:12:20,240 --> 00:12:24,000
desktop pc that is a c is one extra tab

267
00:12:24,000 --> 00:12:26,160
on laptop pc

268
00:12:26,160 --> 00:12:29,040
data set d is five extra tabs

269
00:12:29,040 --> 00:12:30,000
on

270
00:12:30,000 --> 00:12:32,000
laptop pc

271
00:12:32,000 --> 00:12:33,760
you can see that

272
00:12:33,760 --> 00:12:35,200
the results

273
00:12:35,200 --> 00:12:36,399
of

274
00:12:36,399 --> 00:12:39,040
these four data sets

275
00:12:39,040 --> 00:12:42,959
show the similar concept which is that

276
00:12:42,959 --> 00:12:44,399
different colors

277
00:12:44,399 --> 00:12:46,480
can be separate

278
00:12:46,480 --> 00:12:48,079
and then for

279
00:12:48,079 --> 00:12:50,320
most overlapping dots

280
00:12:50,320 --> 00:12:55,040
the second measurement can separate them

281
00:12:55,279 --> 00:12:58,320
we measure the pairwise differentiation

282
00:12:58,320 --> 00:12:59,760
rate

283
00:12:59,760 --> 00:13:02,320
and these are the

284
00:13:02,320 --> 00:13:04,880
average results

285
00:13:04,880 --> 00:13:07,839
they are pretty high

286
00:13:09,519 --> 00:13:12,560
we compiled many versions of chromium

287
00:13:12,560 --> 00:13:15,199
for testing

288
00:13:15,680 --> 00:13:17,839
all the green versions are not

289
00:13:17,839 --> 00:13:18,959
vulnerable

290
00:13:18,959 --> 00:13:23,200
and all the red versions are vulnerable

291
00:13:23,200 --> 00:13:26,399
the first vulnerable version is this one

292
00:13:26,399 --> 00:13:29,200
which is the version in 2018

293
00:13:29,200 --> 00:13:33,680
that enabled site isolation

294
00:13:33,680 --> 00:13:36,240
edge is confirmed vulnerable because it

295
00:13:36,240 --> 00:13:38,800
uses chromium

296
00:13:38,800 --> 00:13:41,920
firefox is a little different

297
00:13:41,920 --> 00:13:46,399
it uses the gecko engine not chromium

298
00:13:46,399 --> 00:13:47,839
project

299
00:13:47,839 --> 00:13:50,160
vision of mozilla

300
00:13:50,160 --> 00:13:53,279
is an experimental feature for site

301
00:13:53,279 --> 00:13:57,040
isolation on firefox

302
00:13:57,680 --> 00:14:01,920
we do the first experiment about mp and

303
00:14:01,920 --> 00:14:04,319
bg

304
00:14:05,600 --> 00:14:06,399
they

305
00:14:06,399 --> 00:14:09,680
can also be separated easily

306
00:14:09,680 --> 00:14:12,480
however the second measurement will

307
00:14:12,480 --> 00:14:13,760
require

308
00:14:13,760 --> 00:14:15,600
a deeper understanding about the

309
00:14:15,600 --> 00:14:17,920
implementation

310
00:14:17,920 --> 00:14:20,560
we haven't spent the effort to dig into

311
00:14:20,560 --> 00:14:23,040
the details

312
00:14:23,040 --> 00:14:25,360
you may notice that

313
00:14:25,360 --> 00:14:28,880
the dots on this diagram appear to be

314
00:14:28,880 --> 00:14:32,959
quantized among the time dimension

315
00:14:32,959 --> 00:14:34,480
this is because

316
00:14:34,480 --> 00:14:37,680
firefox lowers the precision of

317
00:14:37,680 --> 00:14:40,560
javascript's timing api

318
00:14:40,560 --> 00:14:42,399
to 1 millisecond

319
00:14:42,399 --> 00:14:45,680
in order to defend against meltdown and

320
00:14:45,680 --> 00:14:47,920
spectral attack

321
00:14:47,920 --> 00:14:50,320
this is just an interesting side note i

322
00:14:50,320 --> 00:14:53,040
want to mention

323
00:14:53,360 --> 00:14:54,880
to summarize

324
00:14:54,880 --> 00:14:58,240
site isolation introduces a reliable

325
00:14:58,240 --> 00:14:59,839
timing channel

326
00:14:59,839 --> 00:15:02,800
that discloses a user's site visiting

327
00:15:02,800 --> 00:15:04,720
behavior

328
00:15:04,720 --> 00:15:07,199
the main challenge is the tension

329
00:15:07,199 --> 00:15:10,240
between the scarcity of processes

330
00:15:10,240 --> 00:15:13,360
and the objective to separate cross-site

331
00:15:13,360 --> 00:15:16,480
frames in different processes

332
00:15:16,480 --> 00:15:18,160
in this paper

333
00:15:18,160 --> 00:15:19,600
we talk about

334
00:15:19,600 --> 00:15:22,399
our discussions with the

335
00:15:22,399 --> 00:15:26,000
edge and chrome teams about potential

336
00:15:26,000 --> 00:15:27,920
mitigations

337
00:15:27,920 --> 00:15:30,720
one possible mitigation proposed by the

338
00:15:30,720 --> 00:15:32,399
chrome team

339
00:15:32,399 --> 00:15:34,639
is to prohibit

340
00:15:34,639 --> 00:15:38,079
process reuse between a top level frame

341
00:15:38,079 --> 00:15:40,240
and an iframe

342
00:15:40,240 --> 00:15:43,120
we will see whether this reuse policy

343
00:15:43,120 --> 00:15:45,279
gets into the chromium code in the

344
00:15:45,279 --> 00:15:46,880
future

345
00:15:46,880 --> 00:15:49,199
i'm stopping here and

346
00:15:49,199 --> 00:15:53,319
ready to answer your questions

347
00:16:01,440 --> 00:16:02,560
okay

348
00:16:02,560 --> 00:16:04,240
sorry i have a cool down time for the

349
00:16:04,240 --> 00:16:06,480
microphone so if anyone has a question

350
00:16:06,480 --> 00:16:08,160
please use the microphone and state your

351
00:16:08,160 --> 00:16:10,399
name and affiliation

352
00:16:10,399 --> 00:16:11,839
and

353
00:16:11,839 --> 00:16:13,360
okay

354
00:16:13,360 --> 00:16:15,120
different person sorry so i guess you're

355
00:16:15,120 --> 00:16:17,759
the first author

356
00:16:18,160 --> 00:16:19,040
okay

357
00:16:19,040 --> 00:16:20,639
while you warm up i have a question

358
00:16:20,639 --> 00:16:23,279
there is one thing i didn't understand

359
00:16:23,279 --> 00:16:26,160
so to remove the network latency

360
00:16:26,160 --> 00:16:28,720
basically uh you have this trick that

361
00:16:28,720 --> 00:16:30,160
you load something from the cache for

362
00:16:30,160 --> 00:16:32,079
example the icon or you know the robot

363
00:16:32,079 --> 00:16:34,160
xt which is pretty cool

364
00:16:34,160 --> 00:16:36,079
but but then later you say that one of

365
00:16:36,079 --> 00:16:38,160
the source of the timing difference is

366
00:16:38,160 --> 00:16:40,639
the html parser

367
00:16:40,639 --> 00:16:43,120
but you don't actually render the html

368
00:16:43,120 --> 00:16:46,079
in your tab right so you only load like

369
00:16:46,079 --> 00:16:47,519
an icon so

370
00:16:47,519 --> 00:16:49,680
why would the hdmi parser affect the

371
00:16:49,680 --> 00:16:52,479
timing difference

372
00:16:54,320 --> 00:16:55,600
hi

373
00:16:55,600 --> 00:16:57,920
thank you for interest in our work

374
00:16:57,920 --> 00:16:59,519
so actually

375
00:16:59,519 --> 00:17:02,240
the html password is involved

376
00:17:02,240 --> 00:17:05,039
when the arrow page is rendered

377
00:17:05,039 --> 00:17:06,720
so we use the

378
00:17:06,720 --> 00:17:08,079
answer part

379
00:17:08,079 --> 00:17:10,559
which will result in an arrow page in

380
00:17:10,559 --> 00:17:13,359
rendering iframe means that error page

381
00:17:13,359 --> 00:17:16,559
is composed in html

382
00:17:16,559 --> 00:17:19,439
so that process will involve a lot of

383
00:17:19,439 --> 00:17:22,160
different parsing and will add latency

384
00:17:22,160 --> 00:17:24,799
reloading and

385
00:17:24,799 --> 00:17:26,720
that will introduce a latency like a

386
00:17:26,720 --> 00:17:28,880
delay in the original page which is open

387
00:17:28,880 --> 00:17:30,320
in the other tab not in the one you're

388
00:17:30,320 --> 00:17:34,160
measuring the time that loads right

389
00:17:34,160 --> 00:17:37,039
it will involve a latency when

390
00:17:37,039 --> 00:17:39,679
during i3 loading process

391
00:17:39,679 --> 00:17:42,559
and that latency depends on whether

392
00:17:42,559 --> 00:17:44,400
there is a background

393
00:17:44,400 --> 00:17:49,280
or not and whether it's newly started no

394
00:17:50,000 --> 00:17:52,080
okay

395
00:17:52,080 --> 00:17:54,559
questions

396
00:17:56,799 --> 00:17:58,480
we're already one minute late so i think

397
00:17:58,480 --> 00:17:59,840
we can stop here

398
00:17:59,840 --> 00:18:01,360
if you can please check online if you

399
00:18:01,360 --> 00:18:03,600
have also other questions so you can ask

400
00:18:03,600 --> 00:18:04,640
them maybe

401
00:18:04,640 --> 00:18:07,200
you can answer maybe them offline

402
00:18:07,200 --> 00:18:09,200
and in this meantime we can ask the

403
00:18:09,200 --> 00:18:12,000
second speaker to

404
00:18:12,000 --> 00:18:15,480
thank you very much

