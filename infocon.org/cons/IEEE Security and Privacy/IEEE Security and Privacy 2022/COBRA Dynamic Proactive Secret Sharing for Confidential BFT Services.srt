1
00:00:00,719 --> 00:00:03,280
so hello i'm robin i'm going to present

2
00:00:03,280 --> 00:00:05,359
our work on implementing confidential

3
00:00:05,359 --> 00:00:07,839
byzantine faltering services using our

4
00:00:07,839 --> 00:00:10,160
proposed cobra framework

5
00:00:10,160 --> 00:00:12,080
so to implement faltering services we

6
00:00:12,080 --> 00:00:14,000
can use the stat machine replication

7
00:00:14,000 --> 00:00:16,239
model this model allows to implement

8
00:00:16,239 --> 00:00:18,800
practical systems such as blockchains by

9
00:00:18,800 --> 00:00:21,199
replicating the execution of the service

10
00:00:21,199 --> 00:00:23,680
into multiple machines in such a way

11
00:00:23,680 --> 00:00:26,720
that even if some of them are byzantine

12
00:00:26,720 --> 00:00:28,560
the availability and the integrity of

13
00:00:28,560 --> 00:00:30,800
the service is maintained

14
00:00:30,800 --> 00:00:33,200
in this model the servers maintain the

15
00:00:33,200 --> 00:00:35,520
same state and they deterministically

16
00:00:35,520 --> 00:00:37,520
execute the same sequence of operation

17
00:00:37,520 --> 00:00:39,360
in this state producing the same

18
00:00:39,360 --> 00:00:41,600
resulting state however

19
00:00:41,600 --> 00:00:43,840
since all the servers have the same

20
00:00:43,840 --> 00:00:46,879
state even if an adversary compromises

21
00:00:46,879 --> 00:00:49,039
even a single machine he can read all

22
00:00:49,039 --> 00:00:51,360
the data stored in the system

23
00:00:51,360 --> 00:00:54,239
so this model does not uh provide any

24
00:00:54,239 --> 00:00:56,079
guarantees about the confidentiality of

25
00:00:56,079 --> 00:00:57,520
the storage data

26
00:00:57,520 --> 00:00:58,719
so how can we preserve the

27
00:00:58,719 --> 00:01:00,800
confidentiality in a model where the

28
00:01:00,800 --> 00:01:04,319
data is replicated across replicas

29
00:01:04,319 --> 00:01:06,080
in this work we explore the secret

30
00:01:06,080 --> 00:01:08,479
sharing mechanism in this mechanism a

31
00:01:08,479 --> 00:01:11,040
client called dealer divides the secret

32
00:01:11,040 --> 00:01:13,439
into multiple pieces called shares and

33
00:01:13,439 --> 00:01:15,119
distributes them among the servers

34
00:01:15,119 --> 00:01:17,360
called shareholders and the client with

35
00:01:17,360 --> 00:01:19,600
proper access when wants to retrieve the

36
00:01:19,600 --> 00:01:22,240
the secret he can read a subset of those

37
00:01:22,240 --> 00:01:24,560
shares from the servers combine them and

38
00:01:24,560 --> 00:01:26,640
reconstruct the secret

39
00:01:26,640 --> 00:01:29,600
to implement this mechanism in practice

40
00:01:29,600 --> 00:01:31,600
we use the service scheme because the

41
00:01:31,600 --> 00:01:33,759
the share size in this scheme does not

42
00:01:33,759 --> 00:01:35,600
depend on the number of servers nor the

43
00:01:35,600 --> 00:01:38,240
number of faults tolerated by the system

44
00:01:38,240 --> 00:01:40,880
without going into detail in this scheme

45
00:01:40,880 --> 00:01:42,799
the seeker is encoded in a random

46
00:01:42,799 --> 00:01:45,280
polynomial and the shares are computed

47
00:01:45,280 --> 00:01:47,520
as a point in this polynomial as shown

48
00:01:47,520 --> 00:01:49,200
in this example

49
00:01:49,200 --> 00:01:51,759
and this scheme ensures that revelation

50
00:01:51,759 --> 00:01:54,640
of up to t shares the reveals nothing

51
00:01:54,640 --> 00:01:56,960
about the secret and to recover the

52
00:01:56,960 --> 00:01:58,240
secret

53
00:01:58,240 --> 00:02:00,640
client can combine at least t plus one

54
00:02:00,640 --> 00:02:01,680
shares

55
00:02:01,680 --> 00:02:03,759
this way if these servers are

56
00:02:03,759 --> 00:02:06,079
compromising this model

57
00:02:06,079 --> 00:02:08,160
the availability of the service is not

58
00:02:08,160 --> 00:02:10,239
compromised and the confidentiality of

59
00:02:10,239 --> 00:02:12,720
the data is maintained

60
00:02:12,720 --> 00:02:14,560
however implementing summer scheme in

61
00:02:14,560 --> 00:02:16,879
practice

62
00:02:16,879 --> 00:02:18,720
summit scheme in practice is not enough

63
00:02:18,720 --> 00:02:20,800
to implement practical system because

64
00:02:20,800 --> 00:02:23,599
first in this scheme shareholders and

65
00:02:23,599 --> 00:02:25,840
combiners do not have any means to

66
00:02:25,840 --> 00:02:27,680
verify the validity of the shares for

67
00:02:27,680 --> 00:02:29,920
example a client that wants to retrieve

68
00:02:29,920 --> 00:02:32,800
the data is used as a share compromised

69
00:02:32,800 --> 00:02:35,200
by an adversary or even by accident he

70
00:02:35,200 --> 00:02:37,200
will obtain the wrong secret

71
00:02:37,200 --> 00:02:39,280
the second problem is that shareholders

72
00:02:39,280 --> 00:02:40,400
in this scheme

73
00:02:40,400 --> 00:02:42,319
do not have any mechanism to recover

74
00:02:42,319 --> 00:02:44,239
their shares without the client

75
00:02:44,239 --> 00:02:46,400
redistributing the secret

76
00:02:46,400 --> 00:02:47,920
and the third problem is that in a

77
00:02:47,920 --> 00:02:50,640
long-lived system a mobile adversary

78
00:02:50,640 --> 00:02:52,720
given enough time will be able to

79
00:02:52,720 --> 00:02:55,519
compromise the minimum number of servers

80
00:02:55,519 --> 00:02:57,519
and the shares needed to reconstruct the

81
00:02:57,519 --> 00:03:00,560
secret so the typical solution for the

82
00:03:00,560 --> 00:03:03,280
first problem add additional information

83
00:03:03,280 --> 00:03:05,440
in form of commitment that allows

84
00:03:05,440 --> 00:03:07,599
shareholders and combiners to verify the

85
00:03:07,599 --> 00:03:09,680
validity of the shares thus building

86
00:03:09,680 --> 00:03:12,000
verifiable secure selling schemes

87
00:03:12,000 --> 00:03:14,480
the solution for the second problem adds

88
00:03:14,480 --> 00:03:16,480
a protocol that allows shareholders to

89
00:03:16,480 --> 00:03:19,280
blind their share before sending them to

90
00:03:19,280 --> 00:03:21,200
the recovering server

91
00:03:21,200 --> 00:03:23,120
and the solution for the second problem

92
00:03:23,120 --> 00:03:26,159
is another protocol that allows

93
00:03:26,159 --> 00:03:28,879
servers to periodically recompute their

94
00:03:28,879 --> 00:03:31,519
shares without reconstructing the secret

95
00:03:31,519 --> 00:03:32,959
and the resulting scheme of last two

96
00:03:32,959 --> 00:03:34,640
protocol is called practice secret

97
00:03:34,640 --> 00:03:37,040
sharing scheme which was later extended

98
00:03:37,040 --> 00:03:39,599
to support dynamism where it is possible

99
00:03:39,599 --> 00:03:41,440
to move secret shares from one group of

100
00:03:41,440 --> 00:03:43,120
servers to another without

101
00:03:43,120 --> 00:03:45,840
reconstructing the cigarette

102
00:03:45,840 --> 00:03:47,599
the contribution of this work is a

103
00:03:47,599 --> 00:03:50,000
dynamic property signature scheme called

104
00:03:50,000 --> 00:03:52,400
cobra which is a modical modular

105
00:03:52,400 --> 00:03:54,879
protocol stack that enables recovery of

106
00:03:54,879 --> 00:03:56,120
the servers

107
00:03:56,120 --> 00:03:58,720
reconfiguration of the system while

108
00:03:58,720 --> 00:04:00,720
supporting thousands of seekers stored

109
00:04:00,720 --> 00:04:02,720
in the system and we believe that

110
00:04:02,720 --> 00:04:05,519
recovery reconfiguration and handling of

111
00:04:05,519 --> 00:04:07,920
many seekers are fundamental features

112
00:04:07,920 --> 00:04:10,080
needed in a practical system because

113
00:04:10,080 --> 00:04:12,080
existing systems that integrate secret

114
00:04:12,080 --> 00:04:12,959
sharing

115
00:04:12,959 --> 00:04:15,360
do not have all this required feature

116
00:04:15,360 --> 00:04:18,160
implemented in the same system

117
00:04:18,160 --> 00:04:20,238
so for the first time we integrate the

118
00:04:20,238 --> 00:04:22,720
cobra dynamic process sequencing scheme

119
00:04:22,720 --> 00:04:24,720
into fully featured replication library

120
00:04:24,720 --> 00:04:27,280
called bft smart that has all the

121
00:04:27,280 --> 00:04:29,600
required features in practice such as

122
00:04:29,600 --> 00:04:31,759
recovery and reconfiguration

123
00:04:31,759 --> 00:04:33,759
making it the first practical library

124
00:04:33,759 --> 00:04:35,520
that we know of that supports

125
00:04:35,520 --> 00:04:37,600
implementation of services that require

126
00:04:37,600 --> 00:04:40,400
confidentiality of the storage data

127
00:04:40,400 --> 00:04:42,800
so amy among the existing practice

128
00:04:42,800 --> 00:04:45,120
secrecy scheme that support dynamism in

129
00:04:45,120 --> 00:04:47,120
the non-synchronous model

130
00:04:47,120 --> 00:04:49,360
cobra can

131
00:04:49,360 --> 00:04:51,919
allows reconfiguration of fault turreted

132
00:04:51,919 --> 00:04:54,479
in the system without requiring storage

133
00:04:54,479 --> 00:04:56,000
of extra information during

134
00:04:56,000 --> 00:04:59,360
reconfiguration it also has a linear

135
00:04:59,360 --> 00:05:02,400
share and combined complexity

136
00:05:02,400 --> 00:05:05,759
it has a cubic reshare complexity and

137
00:05:05,759 --> 00:05:08,800
the the servers only require

138
00:05:08,800 --> 00:05:09,600
the

139
00:05:09,600 --> 00:05:11,360
the storage of information in service

140
00:05:11,360 --> 00:05:14,800
only requires constant size

141
00:05:14,800 --> 00:05:16,560
so we assume a

142
00:05:16,560 --> 00:05:19,039
standard dynamic system model well

143
00:05:19,039 --> 00:05:20,960
where the system evolves in a sequence

144
00:05:20,960 --> 00:05:23,280
of views and each few are installed

145
00:05:23,280 --> 00:05:26,080
using reconfiguration in this view there

146
00:05:26,080 --> 00:05:28,880
are the byzantine replicas that can fail

147
00:05:28,880 --> 00:05:31,520
simultaneously and we assume

148
00:05:31,520 --> 00:05:32,960
that clients are prone to visiting

149
00:05:32,960 --> 00:05:34,880
failures and we assume

150
00:05:34,880 --> 00:05:37,360
partially synchronous model

151
00:05:37,360 --> 00:05:39,039
so with the integration of secret

152
00:05:39,039 --> 00:05:41,199
sharing instead of all servers having

153
00:05:41,199 --> 00:05:44,240
the same state now is server state is

154
00:05:44,240 --> 00:05:46,479
composed of two parts first it's a

155
00:05:46,479 --> 00:05:48,400
common state which is same in all

156
00:05:48,400 --> 00:05:51,120
servers for example id of the data and

157
00:05:51,120 --> 00:05:53,120
the second part is the private state

158
00:05:53,120 --> 00:05:55,280
which is composed of the shares

159
00:05:55,280 --> 00:05:56,800
of the confidential data which is

160
00:05:56,800 --> 00:05:59,280
different in all servers and the system

161
00:05:59,280 --> 00:06:02,160
as whole stores the same state as this

162
00:06:02,160 --> 00:06:04,560
as the system without confidentiality

163
00:06:04,560 --> 00:06:06,880
and this extended and in this extended

164
00:06:06,880 --> 00:06:09,360
model we guarantee the secrecy property

165
00:06:09,360 --> 00:06:11,520
which is stated informally as an

166
00:06:11,520 --> 00:06:13,360
adversary learns no information about

167
00:06:13,360 --> 00:06:15,600
the confusion confidential data

168
00:06:15,600 --> 00:06:17,759
if the data is not accessible by the

169
00:06:17,759 --> 00:06:20,080
faulty clients and the adversary

170
00:06:20,080 --> 00:06:22,880
controls no more than t servers

171
00:06:22,880 --> 00:06:24,960
so next i will present our protocol but

172
00:06:24,960 --> 00:06:26,880
you can find all the details in our

173
00:06:26,880 --> 00:06:28,720
paper

174
00:06:28,720 --> 00:06:31,520
so our as our work integrates three

175
00:06:31,520 --> 00:06:34,240
three secret same protocols into the smr

176
00:06:34,240 --> 00:06:36,800
replication model the first protocol

177
00:06:36,800 --> 00:06:38,639
which is the recovery protocol that

178
00:06:38,639 --> 00:06:41,360
allows servers to rebuild their private

179
00:06:41,360 --> 00:06:44,160
state with the help of other servers a

180
00:06:44,160 --> 00:06:47,440
dynamic resharing protocol allows to

181
00:06:47,440 --> 00:06:49,840
reconfigure the system and protect it

182
00:06:49,840 --> 00:06:52,240
against mobile adversaries and both

183
00:06:52,240 --> 00:06:54,639
recovery and resharing protocol use the

184
00:06:54,639 --> 00:06:56,880
distributed polynomial generation to

185
00:06:56,880 --> 00:06:59,199
create random polynomials use it to

186
00:06:59,199 --> 00:07:01,759
blind the private state during the state

187
00:07:01,759 --> 00:07:04,160
transfers however implementing

188
00:07:04,160 --> 00:07:06,319
polynomial generation in distributed and

189
00:07:06,319 --> 00:07:08,160
in the non-synchronous model is

190
00:07:08,160 --> 00:07:09,440
challenging

191
00:07:09,440 --> 00:07:11,680
to explain how why it is challenging at

192
00:07:11,680 --> 00:07:13,919
first let me explain how the polynomials

193
00:07:13,919 --> 00:07:15,280
are created

194
00:07:15,280 --> 00:07:17,840
to create polynomials each server

195
00:07:17,840 --> 00:07:20,080
locally generates a random polynomial

196
00:07:20,080 --> 00:07:21,120
and then

197
00:07:21,120 --> 00:07:25,360
exchange the shares on these polynomials

198
00:07:25,440 --> 00:07:28,080
so in the end of this second phase

199
00:07:28,080 --> 00:07:30,880
phase of the exchanging shares

200
00:07:30,880 --> 00:07:33,039
its servers will obtain the shares on

201
00:07:33,039 --> 00:07:34,720
the local polynomials of the other

202
00:07:34,720 --> 00:07:35,919
servers

203
00:07:35,919 --> 00:07:38,880
and an elected leader

204
00:07:38,880 --> 00:07:41,199
selects a set of t plus one local random

205
00:07:41,199 --> 00:07:44,160
polynomials that are valid for him and

206
00:07:44,160 --> 00:07:46,800
proposes that set in the consensus

207
00:07:46,800 --> 00:07:50,080
during consensus servers verify using

208
00:07:50,080 --> 00:07:51,520
the commitment

209
00:07:51,520 --> 00:07:54,400
if the shares that they have received on

210
00:07:54,400 --> 00:07:56,319
the proposed polynomials are valid for

211
00:07:56,319 --> 00:07:58,639
them or not if the majority of the

212
00:07:58,639 --> 00:08:00,639
servers agree that the pulley their

213
00:08:00,639 --> 00:08:03,120
shares are valid the output of the

214
00:08:03,120 --> 00:08:05,840
consensus is the set of shares

215
00:08:05,840 --> 00:08:08,160
of the polynomial selected by the by the

216
00:08:08,160 --> 00:08:09,199
leader

217
00:08:09,199 --> 00:08:12,240
so the the final polynomial is the sum

218
00:08:12,240 --> 00:08:14,000
of the polynomials selected during

219
00:08:14,000 --> 00:08:15,199
consensus

220
00:08:15,199 --> 00:08:18,240
but in practice each server will add

221
00:08:18,240 --> 00:08:19,840
their shares

222
00:08:19,840 --> 00:08:21,680
of the polynomial selected during

223
00:08:21,680 --> 00:08:24,160
consensus

224
00:08:24,160 --> 00:08:26,639
so that in the end they can verify using

225
00:08:26,639 --> 00:08:28,160
commitment that the shares that i have

226
00:08:28,160 --> 00:08:30,160
received on their final random

227
00:08:30,160 --> 00:08:32,320
polynomials are correct or not

228
00:08:32,320 --> 00:08:33,279
however

229
00:08:33,279 --> 00:08:35,360
in the adversarial setting in the end in

230
00:08:35,360 --> 00:08:37,679
the non-synchronous model during the

231
00:08:37,679 --> 00:08:40,320
shared exchange amole's adversary

232
00:08:40,320 --> 00:08:42,719
adversary can send valid point to

233
00:08:42,719 --> 00:08:44,640
majority of servers

234
00:08:44,640 --> 00:08:47,040
and invalid point to others the

235
00:08:47,040 --> 00:08:49,200
remaining servers

236
00:08:49,200 --> 00:08:51,519
so when during consensus a leader

237
00:08:51,519 --> 00:08:54,640
selects a polynomial of the malicious

238
00:08:54,640 --> 00:08:56,240
malicious server

239
00:08:56,240 --> 00:08:58,240
and since the majority of them receive

240
00:08:58,240 --> 00:08:59,680
it while it's shared on these

241
00:08:59,680 --> 00:09:02,560
polynomials the consensus will will

242
00:09:02,560 --> 00:09:04,720
finish with the polynomial of the

243
00:09:04,720 --> 00:09:07,040
malicious

244
00:09:07,040 --> 00:09:09,519
so when they add these shares

245
00:09:09,519 --> 00:09:11,519
of the selected polynomial

246
00:09:11,519 --> 00:09:13,600
the protocol can only guarantee that at

247
00:09:13,600 --> 00:09:15,519
least t plus one on a service will

248
00:09:15,519 --> 00:09:17,920
receive valid share because majority of

249
00:09:17,920 --> 00:09:20,320
the servers i have agreed agreed during

250
00:09:20,320 --> 00:09:23,200
consensus but at most the ons servers

251
00:09:23,200 --> 00:09:25,360
will receive invalid shares which they

252
00:09:25,360 --> 00:09:27,920
can verify using commitments

253
00:09:27,920 --> 00:09:30,240
so the key insight of cobra is that we

254
00:09:30,240 --> 00:09:32,000
can uh sorry

255
00:09:32,000 --> 00:09:34,000
forgot to say that this

256
00:09:34,000 --> 00:09:36,560
uh with the only with this information

257
00:09:36,560 --> 00:09:39,200
we can use the recovery protocol because

258
00:09:39,200 --> 00:09:41,760
with uh on a server with t plus one

259
00:09:41,760 --> 00:09:43,839
valid shares are enough to use recovery

260
00:09:43,839 --> 00:09:44,959
protocol

261
00:09:44,959 --> 00:09:47,519
but this is a problem during re-sharing

262
00:09:47,519 --> 00:09:49,920
because on a server that have received

263
00:09:49,920 --> 00:09:51,279
invalid points

264
00:09:51,279 --> 00:09:52,959
they cannot finish resharing their

265
00:09:52,959 --> 00:09:54,480
private state

266
00:09:54,480 --> 00:09:57,279
so the key insight of cobra is that we

267
00:09:57,279 --> 00:09:59,519
can leverage the recovery protocol to

268
00:09:59,519 --> 00:10:01,279
recover the points on the random

269
00:10:01,279 --> 00:10:03,600
polynomials after removing malicious

270
00:10:03,600 --> 00:10:04,640
servers

271
00:10:04,640 --> 00:10:07,519
so to remove malicious server

272
00:10:07,519 --> 00:10:09,120
the honest server that received the

273
00:10:09,120 --> 00:10:11,279
invalid point pinpoints the local

274
00:10:11,279 --> 00:10:13,839
pulling local invalid polynomial in the

275
00:10:13,839 --> 00:10:16,320
set selection during consensus

276
00:10:16,320 --> 00:10:18,720
and accuses those senders of those local

277
00:10:18,720 --> 00:10:21,040
polynomials by sending an accusation to

278
00:10:21,040 --> 00:10:22,480
the other servers

279
00:10:22,480 --> 00:10:24,640
if the accusation is valid all the

280
00:10:24,640 --> 00:10:26,480
honest servers will add this faulty

281
00:10:26,480 --> 00:10:29,360
service into acknowledged and then don a

282
00:10:29,360 --> 00:10:31,120
server to recover its point on the

283
00:10:31,120 --> 00:10:33,279
random polynomial can use the recovery

284
00:10:33,279 --> 00:10:35,760
protocol since in the system there are

285
00:10:35,760 --> 00:10:39,120
at most defaulty servers eventually

286
00:10:39,120 --> 00:10:41,120
the honest servers will remove those

287
00:10:41,120 --> 00:10:43,120
melissa server using this accusation

288
00:10:43,120 --> 00:10:44,160
phase

289
00:10:44,160 --> 00:10:46,000
and recover its point on the random

290
00:10:46,000 --> 00:10:48,000
polynomial

291
00:10:48,000 --> 00:10:50,240
so using this protocol as best during

292
00:10:50,240 --> 00:10:53,120
recovery a recovering server asks the

293
00:10:53,120 --> 00:10:55,600
blended state from other servers

294
00:10:55,600 --> 00:10:57,279
those servers generate random

295
00:10:57,279 --> 00:10:59,920
polynomials and use it to blend their

296
00:10:59,920 --> 00:11:00,880
shares

297
00:11:00,880 --> 00:11:02,720
before sending it to the recovering

298
00:11:02,720 --> 00:11:05,360
server the recovering server collects

299
00:11:05,360 --> 00:11:07,440
and combines at least t plus one blind

300
00:11:07,440 --> 00:11:10,079
share to reconstruct its share of the

301
00:11:10,079 --> 00:11:11,600
secret

302
00:11:11,600 --> 00:11:14,480
to reshare this the private state within

303
00:11:14,480 --> 00:11:16,640
the same group or to move secretion from

304
00:11:16,640 --> 00:11:18,480
one group to another

305
00:11:18,480 --> 00:11:20,480
servers in what group create two random

306
00:11:20,480 --> 00:11:21,760
polynomials

307
00:11:21,760 --> 00:11:24,079
servers in the old group use one random

308
00:11:24,079 --> 00:11:26,399
polynomial to blend their private state

309
00:11:26,399 --> 00:11:28,399
before sending it to the servers in the

310
00:11:28,399 --> 00:11:30,720
new group the servers in new group

311
00:11:30,720 --> 00:11:33,760
collect and combine at least two t plus

312
00:11:33,760 --> 00:11:35,920
one blinded shares and use the other

313
00:11:35,920 --> 00:11:38,320
polynomials to compute the reshared

314
00:11:38,320 --> 00:11:40,399
private state

315
00:11:40,399 --> 00:11:43,279
so we have implemented this uh

316
00:11:43,279 --> 00:11:45,440
the cobra protocol into the bfc smr

317
00:11:45,440 --> 00:11:48,399
replication library and we also to to

318
00:11:48,399 --> 00:11:50,079
compare with the existing approach we

319
00:11:50,079 --> 00:11:53,279
implemented vssr and mpcs and you can

320
00:11:53,279 --> 00:11:54,959
find all of these

321
00:11:54,959 --> 00:11:57,839
implementations in our repository and to

322
00:11:57,839 --> 00:12:00,800
measure the impact of integrating

323
00:12:00,800 --> 00:12:03,440
secret sharing into the replicated model

324
00:12:03,440 --> 00:12:05,440
we implemented a simple confidential key

325
00:12:05,440 --> 00:12:07,120
value store

326
00:12:07,120 --> 00:12:09,360
here you can see that during the white

327
00:12:09,360 --> 00:12:10,720
operation

328
00:12:10,720 --> 00:12:14,720
the integration of the secret sharing

329
00:12:14,720 --> 00:12:16,399
has a

330
00:12:16,399 --> 00:12:18,800
higher cost when we write confidential

331
00:12:18,800 --> 00:12:21,839
data because we can see that cobra's

332
00:12:21,839 --> 00:12:23,760
throughput drops significantly compared

333
00:12:23,760 --> 00:12:26,320
with the system without confidentiality

334
00:12:26,320 --> 00:12:28,639
the main reason is that the during the

335
00:12:28,639 --> 00:12:30,959
write operation servers have to verify

336
00:12:30,959 --> 00:12:33,279
the shares because when we turn off this

337
00:12:33,279 --> 00:12:35,519
verification the true put more than

338
00:12:35,519 --> 00:12:36,880
doubles

339
00:12:36,880 --> 00:12:39,040
however it's still half compared to the

340
00:12:39,040 --> 00:12:41,760
system without confidentiality because

341
00:12:41,760 --> 00:12:46,160
in our uh experiment we noticed that the

342
00:12:46,160 --> 00:12:47,839
throughput was during throughput was

343
00:12:47,839 --> 00:12:50,240
limited by the network bandwidth but

344
00:12:50,240 --> 00:12:52,399
when we compared with the vssr which is

345
00:12:52,399 --> 00:12:54,240
the state-of-the-art protocol

346
00:12:54,240 --> 00:12:56,480
for recovery that sends pre-computed

347
00:12:56,480 --> 00:12:58,480
information for recovery during write

348
00:12:58,480 --> 00:13:00,720
operation we can see that cobra can

349
00:13:00,720 --> 00:13:03,440
process more than three and three and a

350
00:13:03,440 --> 00:13:06,399
half times more transaction per second

351
00:13:06,399 --> 00:13:08,399
during recovery of the hundred thousand

352
00:13:08,399 --> 00:13:11,200
secret shares we can see that recovery

353
00:13:11,200 --> 00:13:13,600
of the private state adds additional

354
00:13:13,600 --> 00:13:15,279
cost compared to the

355
00:13:15,279 --> 00:13:17,120
system without confidentiality

356
00:13:17,120 --> 00:13:19,920
nevertheless cobra can recover one and

357
00:13:19,920 --> 00:13:21,920
half time faster than the vssr even

358
00:13:21,920 --> 00:13:25,519
though vssl has pre-computed information

359
00:13:25,519 --> 00:13:28,240
and to reshare 100 000 secret shares we

360
00:13:28,240 --> 00:13:30,320
can see that cobra can reshare five

361
00:13:30,320 --> 00:13:32,320
times faster than the state of the

362
00:13:32,320 --> 00:13:34,639
protocol mps yes the main reason is that

363
00:13:34,639 --> 00:13:36,959
in cobra we only require

364
00:13:36,959 --> 00:13:39,519
n plus two uh only five two random

365
00:13:39,519 --> 00:13:42,399
polynomials to reach the secret and uh

366
00:13:42,399 --> 00:13:44,399
opposite to the mpss that requires n

367
00:13:44,399 --> 00:13:46,880
plus one random polynomials

368
00:13:46,880 --> 00:13:49,600
here we can see that impact of integ of

369
00:13:49,600 --> 00:13:51,120
removing malicious server during

370
00:13:51,120 --> 00:13:53,440
resharing has negligible cost in the

371
00:13:53,440 --> 00:13:55,600
system with large number of secrets

372
00:13:55,600 --> 00:13:57,199
because this the

373
00:13:57,199 --> 00:13:59,760
the cost is diluted across the sharing

374
00:13:59,760 --> 00:14:02,000
of multiple secrets

375
00:14:02,000 --> 00:14:03,839
so in this world we propose a cobra

376
00:14:03,839 --> 00:14:06,000
framework which is a practical

377
00:14:06,000 --> 00:14:08,959
confidential framework for bfc smr

378
00:14:08,959 --> 00:14:10,800
the proposed protocol have minimal

379
00:14:10,800 --> 00:14:12,959
storage overhead and base communication

380
00:14:12,959 --> 00:14:15,360
complexity among the existing products

381
00:14:15,360 --> 00:14:18,240
casein protocol in non-synchronous model

382
00:14:18,240 --> 00:14:19,600
and the cobra protocols are

383
00:14:19,600 --> 00:14:21,279
significantly faster than the existing

384
00:14:21,279 --> 00:14:22,959
approach in practice

385
00:14:22,959 --> 00:14:26,000
thank you for attention

386
00:14:27,199 --> 00:14:29,040
excellent presentation

387
00:14:29,040 --> 00:14:32,399
any questions from the audience

388
00:14:35,519 --> 00:14:37,920
hi thanks for the talk i'm sarah from

389
00:14:37,920 --> 00:14:39,120
uiuc

390
00:14:39,120 --> 00:14:40,000
so

391
00:14:40,000 --> 00:14:41,920
what's your threat model like do you

392
00:14:41,920 --> 00:14:43,040
consider

393
00:14:43,040 --> 00:14:45,920
t failures including in the both group

394
00:14:45,920 --> 00:14:47,920
or in

395
00:14:47,920 --> 00:14:49,839
total t failures if we combine the

396
00:14:49,839 --> 00:14:52,240
failures in both the groups or total two

397
00:14:52,240 --> 00:14:53,440
t failures

398
00:14:53,440 --> 00:14:55,440
we tolerate two t failures during

399
00:14:55,440 --> 00:14:56,720
resharing

400
00:14:56,720 --> 00:14:58,240
i see then i think in the previous

401
00:14:58,240 --> 00:15:00,480
protocols i have seen that you need a

402
00:15:00,480 --> 00:15:02,880
degree two t for resharing right the

403
00:15:02,880 --> 00:15:04,959
generation of the random polynomial must

404
00:15:04,959 --> 00:15:07,360
have degree two t polynomial

405
00:15:07,360 --> 00:15:09,440
this work this protocol doesn't require

406
00:15:09,440 --> 00:15:12,880
much there are other protocols i think

407
00:15:12,880 --> 00:15:14,079
is sharp

408
00:15:14,079 --> 00:15:15,600
that exchange the degree of the

409
00:15:15,600 --> 00:15:18,399
polynomial during the step transfer but

410
00:15:18,399 --> 00:15:21,680
there but protocols like mpsas an hour

411
00:15:21,680 --> 00:15:23,920
they don't require to to

412
00:15:23,920 --> 00:15:25,760
to increase the degree of the polynomial

413
00:15:25,760 --> 00:15:28,320
and still they can handle 20

414
00:15:28,320 --> 00:15:32,480
malicious faults i see okay thanks

415
00:15:36,240 --> 00:15:38,240
and this is more of a clarification

416
00:15:38,240 --> 00:15:41,680
question but um so suppose there is an

417
00:15:41,680 --> 00:15:43,759
initial share and then a committee

418
00:15:43,759 --> 00:15:46,399
reconstructed and then they shared again

419
00:15:46,399 --> 00:15:48,320
and then a committee again reconstructs

420
00:15:48,320 --> 00:15:49,519
the shares

421
00:15:49,519 --> 00:15:52,320
so in the middle process when someone

422
00:15:52,320 --> 00:15:55,680
before resharing if they change the

423
00:15:55,680 --> 00:15:58,160
message to be reshaped like after

424
00:15:58,160 --> 00:16:00,480
collecting it can you also detect this

425
00:16:00,480 --> 00:16:03,360
in the later committee and if so how

426
00:16:03,360 --> 00:16:04,880
i don't know if i understood your

427
00:16:04,880 --> 00:16:06,399
question

428
00:16:06,399 --> 00:16:09,680
it is like i i share my shares right and

429
00:16:09,680 --> 00:16:10,560
then

430
00:16:10,560 --> 00:16:12,639
like people collect them and there is a

431
00:16:12,639 --> 00:16:14,720
malicious node who after collecting

432
00:16:14,720 --> 00:16:16,880
things and combining them before

433
00:16:16,880 --> 00:16:20,480
resharing it changes the message

434
00:16:20,480 --> 00:16:23,120
if the if you are asking if the shares

435
00:16:23,120 --> 00:16:25,759
are modified yeah if they are modified

436
00:16:25,759 --> 00:16:28,480
the servers can detect using commitments

437
00:16:28,480 --> 00:16:30,800
and they just don't use that modified

438
00:16:30,800 --> 00:16:32,720
shares

439
00:16:32,720 --> 00:16:35,040
the commitment is from the

440
00:16:35,040 --> 00:16:37,120
before the previous chair right

441
00:16:37,120 --> 00:16:40,000
if the secret is this same

442
00:16:40,000 --> 00:16:41,759
okay during the right of the secret they

443
00:16:41,759 --> 00:16:44,079
also write the commitments

444
00:16:44,079 --> 00:16:47,479
okay thanks

445
00:16:50,399 --> 00:16:53,199
no more questions

446
00:16:54,399 --> 00:16:58,500
okay let's thank speaker again

447
00:16:58,500 --> 00:17:00,820
[Applause]

