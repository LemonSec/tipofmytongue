1
00:00:00,960 --> 00:00:03,360
everyone i'm young the kim

2
00:00:03,360 --> 00:00:05,600
in this talk i'll be presenting our

3
00:00:05,600 --> 00:00:07,359
paper for usb

4
00:00:07,359 --> 00:00:09,760
hybrid disabled fuzzing of usb gadget

5
00:00:09,760 --> 00:00:12,160
stacks

6
00:00:13,360 --> 00:00:15,040
usb is the most common data

7
00:00:15,040 --> 00:00:18,080
communication protocol for peripherals

8
00:00:18,080 --> 00:00:20,080
and smart devices

9
00:00:20,080 --> 00:00:22,880
it is a versatile and prevalent protocol

10
00:00:22,880 --> 00:00:25,199
for serial device interface

11
00:00:25,199 --> 00:00:27,519
and recently the emergence of the new

12
00:00:27,519 --> 00:00:31,039
usb port connector type c allows usb to

13
00:00:31,039 --> 00:00:33,680
have additional functionality

14
00:00:33,680 --> 00:00:36,480
like advanced power delivery and non-usb

15
00:00:36,480 --> 00:00:38,079
video data

16
00:00:38,079 --> 00:00:40,480
the usb is essentially a communication

17
00:00:40,480 --> 00:00:44,559
between usb host and usb device so once

18
00:00:44,559 --> 00:00:46,800
the usb device is plugged into the host

19
00:00:46,800 --> 00:00:47,920
machine

20
00:00:47,920 --> 00:00:50,879
usb host initiate usb connection and

21
00:00:50,879 --> 00:00:53,760
established communication channel

22
00:00:53,760 --> 00:00:55,600
and then fully control the following

23
00:00:55,600 --> 00:00:58,480
data exchange whereas usb device

24
00:00:58,480 --> 00:01:02,000
operates like a peripheral

25
00:01:02,640 --> 00:01:05,438
usb host has its software stack which is

26
00:01:05,438 --> 00:01:07,520
called usb host stack

27
00:01:07,520 --> 00:01:09,840
likewise modern usb device like

28
00:01:09,840 --> 00:01:12,960
smartphone has its own usb stick called

29
00:01:12,960 --> 00:01:15,520
usb adjuster

30
00:01:15,520 --> 00:01:17,840
here i'd like to briefly introduce both

31
00:01:17,840 --> 00:01:19,360
usb stacks

32
00:01:19,360 --> 00:01:21,520
in the usb host stack there is a

33
00:01:21,520 --> 00:01:24,080
physically at the bottom called usb host

34
00:01:24,080 --> 00:01:27,119
controller which physically delivers usb

35
00:01:27,119 --> 00:01:28,240
data

36
00:01:28,240 --> 00:01:29,680
right above that

37
00:01:29,680 --> 00:01:32,079
corresponding host control driver

38
00:01:32,079 --> 00:01:35,119
directly communicate with the controller

39
00:01:35,119 --> 00:01:36,320
in the mirror

40
00:01:36,320 --> 00:01:38,799
usb core bridges between higher and

41
00:01:38,799 --> 00:01:42,320
lower layer in the usb host stack

42
00:01:42,320 --> 00:01:44,720
on top of that there are multiple usb

43
00:01:44,720 --> 00:01:46,240
host drivers

44
00:01:46,240 --> 00:01:48,479
so different host drivers provide

45
00:01:48,479 --> 00:01:50,640
different functions depending on what

46
00:01:50,640 --> 00:01:53,600
device is connected to the host

47
00:01:53,600 --> 00:01:55,439
and there is an application layer at the

48
00:01:55,439 --> 00:01:56,719
top

49
00:01:56,719 --> 00:01:58,960
usb gadget stack on the right looks

50
00:01:58,960 --> 00:02:02,000
similar but instead of host function

51
00:02:02,000 --> 00:02:04,719
they provide gadget specific functions

52
00:02:04,719 --> 00:02:06,560
and each layer in the gadget stack

53
00:02:06,560 --> 00:02:08,560
responds to the same level layer in the

54
00:02:08,560 --> 00:02:11,200
whole stack

55
00:02:11,520 --> 00:02:13,599
so let's take a look at an example of

56
00:02:13,599 --> 00:02:16,720
usb gadgets on android

57
00:02:16,720 --> 00:02:18,959
so in usb device mode

58
00:02:18,959 --> 00:02:21,360
android supports multiple usb gadgets

59
00:02:21,360 --> 00:02:23,599
such as mtp and midi

60
00:02:23,599 --> 00:02:25,120
which are all implemented in the

61
00:02:25,120 --> 00:02:27,760
corresponding gadget drivers

62
00:02:27,760 --> 00:02:31,360
within the android usb gadget stack

63
00:02:31,360 --> 00:02:34,080
so when android mobile device is plugged

64
00:02:34,080 --> 00:02:36,400
into the host computer like the

65
00:02:36,400 --> 00:02:38,560
description on the right

66
00:02:38,560 --> 00:02:40,800
users are allowed to choose a particular

67
00:02:40,800 --> 00:02:44,640
usb gadget that they want to use

68
00:02:44,640 --> 00:02:47,040
such as various usb gadget functions are

69
00:02:47,040 --> 00:02:49,200
implemented in the usb gadget software

70
00:02:49,200 --> 00:02:52,720
stacks and from security perspective

71
00:02:52,720 --> 00:02:55,440
it has a lot larger sort of surface and

72
00:02:55,440 --> 00:02:57,599
could be easily vulnerable

73
00:02:57,599 --> 00:03:01,679
and severe when being exploited

74
00:03:03,280 --> 00:03:05,599
so here i'll be talking more about usb

75
00:03:05,599 --> 00:03:08,800
security in particular we observed the

76
00:03:08,800 --> 00:03:11,760
goal of modern usb security is to make

77
00:03:11,760 --> 00:03:14,400
the usb host secure

78
00:03:14,400 --> 00:03:17,040
so they tried to defend usb host by

79
00:03:17,040 --> 00:03:20,400
detecting and preventing malicious input

80
00:03:20,400 --> 00:03:23,280
that are coming from usb device

81
00:03:23,280 --> 00:03:26,400
likewise existing usb folders

82
00:03:26,400 --> 00:03:28,640
are designed to find vulnerabilities

83
00:03:28,640 --> 00:03:30,720
within usb host stacks

84
00:03:30,720 --> 00:03:34,319
which prevent malicious usb device from

85
00:03:34,319 --> 00:03:37,440
compromising and exploiting them

86
00:03:37,440 --> 00:03:40,640
so in their both threat model usb device

87
00:03:40,640 --> 00:03:43,760
the one who behaves in a malicious way

88
00:03:43,760 --> 00:03:46,319
providing unexpected input for

89
00:03:46,319 --> 00:03:49,680
exploitation on the usb host

90
00:03:49,680 --> 00:03:52,239
such an assumption sounds reasonable

91
00:03:52,239 --> 00:03:54,400
considering recent real-world attacks

92
00:03:54,400 --> 00:03:56,159
from usb device

93
00:03:56,159 --> 00:03:58,159
like a battery usb

94
00:03:58,159 --> 00:03:59,519
but meanwhile

95
00:03:59,519 --> 00:04:02,640
securing usb gadget stack is left behind

96
00:04:02,640 --> 00:04:04,959
even though it is possible for usb host

97
00:04:04,959 --> 00:04:06,879
to be malicious

98
00:04:06,879 --> 00:04:09,360
so in this work what we are going to do

99
00:04:09,360 --> 00:04:11,360
is the other way around

100
00:04:11,360 --> 00:04:13,760
our goal is to make usb gadget stacks

101
00:04:13,760 --> 00:04:14,879
secure

102
00:04:14,879 --> 00:04:18,320
through forcing technique

103
00:04:19,120 --> 00:04:21,040
there have been recent studies showing

104
00:04:21,040 --> 00:04:23,520
security concerns and real attacks on

105
00:04:23,520 --> 00:04:25,520
usb device

106
00:04:25,520 --> 00:04:27,440
so they show the attackers are

107
00:04:27,440 --> 00:04:29,280
essentially able to unlock the lock

108
00:04:29,280 --> 00:04:32,240
screen through usb connection and then

109
00:04:32,240 --> 00:04:34,240
they have access to

110
00:04:34,240 --> 00:04:35,919
private information in a victim

111
00:04:35,919 --> 00:04:37,440
smartphone

112
00:04:37,440 --> 00:04:40,639
this clearly shows malicious usb host is

113
00:04:40,639 --> 00:04:43,600
a real thread and usb gadget device

114
00:04:43,600 --> 00:04:47,120
should be secure against that

115
00:04:48,400 --> 00:04:50,639
other than such a security issue we

116
00:04:50,639 --> 00:04:52,960
particularly focus on two features of

117
00:04:52,960 --> 00:04:55,600
usb communication from the gadget's

118
00:04:55,600 --> 00:04:57,040
perspective

119
00:04:57,040 --> 00:04:59,360
so that we design frozen technique we

120
00:04:59,360 --> 00:05:02,800
use we get the stacks much better

121
00:05:02,800 --> 00:05:05,600
first usb gadget has multiple input

122
00:05:05,600 --> 00:05:06,639
channels

123
00:05:06,639 --> 00:05:10,400
so it takes inputs from usb host as well

124
00:05:10,400 --> 00:05:13,120
as its application side

125
00:05:13,120 --> 00:05:14,160
second

126
00:05:14,160 --> 00:05:17,360
usb gadget operates in a stateful way

127
00:05:17,360 --> 00:05:20,800
to be specific usb gadget works based on

128
00:05:20,800 --> 00:05:24,000
the state change and in each state it

129
00:05:24,000 --> 00:05:26,400
requires different input value to move

130
00:05:26,400 --> 00:05:28,560
on to the next state

131
00:05:28,560 --> 00:05:30,720
so if any of these two feature is not

132
00:05:30,720 --> 00:05:32,080
considered

133
00:05:32,080 --> 00:05:34,400
then our usb gadget fuzzing is going to

134
00:05:34,400 --> 00:05:35,840
be shallow

135
00:05:35,840 --> 00:05:38,400
and unable to perform all the gadget

136
00:05:38,400 --> 00:05:40,880
functions

137
00:05:41,759 --> 00:05:43,919
based on these observations we present

138
00:05:43,919 --> 00:05:45,520
as usb

139
00:05:45,520 --> 00:05:47,520
audio usb is the first usb forcing

140
00:05:47,520 --> 00:05:49,759
technique designed for usb gadget

141
00:05:49,759 --> 00:05:53,120
devices to the best of our knowledge

142
00:05:53,120 --> 00:05:55,520
it realizes state-guided and

143
00:05:55,520 --> 00:05:57,919
multi-channel fuzzing or usb gadget

144
00:05:57,919 --> 00:05:59,759
software stacks

145
00:05:59,759 --> 00:06:03,039
but usb maximizes its fuzzing coverage

146
00:06:03,039 --> 00:06:05,600
by taking inputs from the host and

147
00:06:05,600 --> 00:06:07,199
application side

148
00:06:07,199 --> 00:06:09,919
assuming they both can be malicious

149
00:06:09,919 --> 00:06:12,479
and its mutation is guided by extracting

150
00:06:12,479 --> 00:06:13,840
stain machine

151
00:06:13,840 --> 00:06:16,160
and mutation rules

152
00:06:16,160 --> 00:06:19,840
also usb comes with several key

153
00:06:19,840 --> 00:06:22,319
at first steam machine is the one that

154
00:06:22,319 --> 00:06:25,360
guides our stiffener impermutation

155
00:06:25,360 --> 00:06:27,759
instability using problem analysis

156
00:06:27,759 --> 00:06:30,560
before fuzzing execution

157
00:06:30,560 --> 00:06:33,919
second 4gsb uses a state coverage

158
00:06:33,919 --> 00:06:37,440
tracking method that is suited for our

159
00:06:37,440 --> 00:06:40,639
state machine based mutation

160
00:06:40,639 --> 00:06:43,600
mutation rules allows users to adjust

161
00:06:43,600 --> 00:06:46,800
stateful mutation strategy in detail

162
00:06:46,800 --> 00:06:49,759
an actual mutation is done guided by

163
00:06:49,759 --> 00:06:52,639
stain machine and mutation rules

164
00:06:52,639 --> 00:06:55,280
and mutated inputs will be delivered

165
00:06:55,280 --> 00:06:59,039
into appropriate input channel

166
00:06:59,919 --> 00:07:01,759
we build the custom stain machine from

167
00:07:01,759 --> 00:07:03,520
usb gadget code

168
00:07:03,520 --> 00:07:05,440
so our state machine is focused on

169
00:07:05,440 --> 00:07:08,240
representing stable behavior of usb

170
00:07:08,240 --> 00:07:09,520
gadget

171
00:07:09,520 --> 00:07:12,000
particularly in our steam machine

172
00:07:12,000 --> 00:07:14,319
state and transitions are related to

173
00:07:14,319 --> 00:07:17,360
program points where input is taken from

174
00:07:17,360 --> 00:07:18,720
input channel

175
00:07:18,720 --> 00:07:21,440
so that we make the whole state machine

176
00:07:21,440 --> 00:07:24,639
fully controllable by our fuzzy inputs

177
00:07:24,639 --> 00:07:26,720
we call such a program point transition

178
00:07:26,720 --> 00:07:27,840
point

179
00:07:27,840 --> 00:07:29,759
and we do extract the stain machine

180
00:07:29,759 --> 00:07:33,520
using program analysis techniques

181
00:07:34,639 --> 00:07:35,919
here i'm going to walk through an

182
00:07:35,919 --> 00:07:39,120
example of a steam machine extraction

183
00:07:39,120 --> 00:07:41,919
from the entry point of usb gadget code

184
00:07:41,919 --> 00:07:43,840
redo symbol execution

185
00:07:43,840 --> 00:07:45,840
until at the transition point what

186
00:07:45,840 --> 00:07:48,960
termination is encountered

187
00:07:48,960 --> 00:07:50,960
and we solve the symbol constraint to

188
00:07:50,960 --> 00:07:52,000
obtain

189
00:07:52,000 --> 00:07:55,440
input value of each state transition

190
00:07:55,440 --> 00:07:57,280
and we repeat this

191
00:07:57,280 --> 00:07:59,440
for every transition point

192
00:07:59,440 --> 00:08:02,080
so as a result there will be set of

193
00:08:02,080 --> 00:08:04,800
transition path

194
00:08:04,800 --> 00:08:08,000
and we merge all of such a partial path

195
00:08:08,000 --> 00:08:12,039
into single state machine

196
00:08:13,680 --> 00:08:16,400
instead of code coverage tracking

197
00:08:16,400 --> 00:08:18,879
fuzz jsp uses state and transition

198
00:08:18,879 --> 00:08:21,440
coverage to facilitate the state machine

199
00:08:21,440 --> 00:08:23,199
based mutation

200
00:08:23,199 --> 00:08:25,199
so we define two coverage tracking

201
00:08:25,199 --> 00:08:26,879
method

202
00:08:26,879 --> 00:08:29,199
state coverage shows whether given

203
00:08:29,199 --> 00:08:32,240
states are explored or not

204
00:08:32,240 --> 00:08:34,000
transition coverage presents the

205
00:08:34,000 --> 00:08:38,000
coverage of explored state transitions

206
00:08:38,000 --> 00:08:40,399
transition coverage might be useful

207
00:08:40,399 --> 00:08:42,799
to increase fossil coverage

208
00:08:42,799 --> 00:08:44,399
because our steam machine is

209
00:08:44,399 --> 00:08:46,080
bi-directional

210
00:08:46,080 --> 00:08:48,880
but for flexibility we leave this for

211
00:08:48,880 --> 00:08:51,920
users to decide

212
00:08:52,560 --> 00:08:55,519
for state proposing fosu-esp provides

213
00:08:55,519 --> 00:08:57,600
some flexibility of the state away

214
00:08:57,600 --> 00:09:00,240
mutation by allowing users to choose

215
00:09:00,240 --> 00:09:02,640
detailed mutation strategy

216
00:09:02,640 --> 00:09:06,880
to do so we define permutation rules

217
00:09:06,880 --> 00:09:07,839
first

218
00:09:07,839 --> 00:09:10,240
users are allowed to specify state

219
00:09:10,240 --> 00:09:12,399
transition interval so that they can

220
00:09:12,399 --> 00:09:14,399
stay in a state

221
00:09:14,399 --> 00:09:16,880
for given time

222
00:09:16,880 --> 00:09:20,000
second users are allowed to pick either

223
00:09:20,000 --> 00:09:23,200
state or transition coverage with state

224
00:09:23,200 --> 00:09:25,600
coverage tracking

225
00:09:25,600 --> 00:09:26,560
third

226
00:09:26,560 --> 00:09:28,160
users are allowed to

227
00:09:28,160 --> 00:09:30,160
specify its preference for the next

228
00:09:30,160 --> 00:09:32,959
state if there are more than one states

229
00:09:32,959 --> 00:09:36,640
that the current state can move to

230
00:09:36,640 --> 00:09:39,360
lastly users are allowed to react when

231
00:09:39,360 --> 00:09:42,080
transition phase

232
00:09:42,080 --> 00:09:44,720
in this step we generate and mutate the

233
00:09:44,720 --> 00:09:46,160
stateful input

234
00:09:46,160 --> 00:09:48,320
which is fully driven by the steam

235
00:09:48,320 --> 00:09:52,320
machine as specified mutation rules

236
00:09:52,320 --> 00:09:54,720
so input could be generated

237
00:09:54,720 --> 00:09:58,640
towards unexplored states or transitions

238
00:09:58,640 --> 00:10:01,200
so we would cover and execute more

239
00:10:01,200 --> 00:10:05,040
functionality of the target usb gadget

240
00:10:05,040 --> 00:10:06,640
then the generate input will be

241
00:10:06,640 --> 00:10:09,040
delivered to the appropriate input

242
00:10:09,040 --> 00:10:10,160
channel

243
00:10:10,160 --> 00:10:12,160
which is specified in the state machine

244
00:10:12,160 --> 00:10:14,560
as well

245
00:10:16,480 --> 00:10:18,000
here i will walk you through how our

246
00:10:18,000 --> 00:10:20,480
stafford mutation works

247
00:10:20,480 --> 00:10:22,399
essentially the mutation is based on the

248
00:10:22,399 --> 00:10:25,600
state machine and mutation rules

249
00:10:25,600 --> 00:10:28,720
so let's assume the current state is s2

250
00:10:28,720 --> 00:10:30,839
so now we are going to generate stable

251
00:10:30,839 --> 00:10:33,519
input to trigger state transition from

252
00:10:33,519 --> 00:10:35,040
s2

253
00:10:35,040 --> 00:10:37,519
so we trigger a state transition after

254
00:10:37,519 --> 00:10:39,920
three seconds according to the mutation

255
00:10:39,920 --> 00:10:42,079
rule r1

256
00:10:42,079 --> 00:10:43,519
to descend

257
00:10:43,519 --> 00:10:46,000
we refer to state machine table and

258
00:10:46,000 --> 00:10:49,120
figure out next stage could be either s3

259
00:10:49,120 --> 00:10:51,680
or s4

260
00:10:51,680 --> 00:10:54,959
we decide to take as fast next state

261
00:10:54,959 --> 00:10:57,279
because on explode state is preferred

262
00:10:57,279 --> 00:11:01,200
according to the mutation rule r3 and r2

263
00:11:01,200 --> 00:11:03,519
so now we know the next state is

264
00:11:03,519 --> 00:11:05,360
s4

265
00:11:05,360 --> 00:11:07,440
in order to move to s4

266
00:11:07,440 --> 00:11:09,760
we refer to the relevant entry of the

267
00:11:09,760 --> 00:11:11,360
table

268
00:11:11,360 --> 00:11:14,320
and generate the input value right and

269
00:11:14,320 --> 00:11:16,800
deliver that to the input channel number

270
00:11:16,800 --> 00:11:18,000
two

271
00:11:18,000 --> 00:11:19,839
and then the state transition will

272
00:11:19,839 --> 00:11:22,560
happen right away

273
00:11:22,560 --> 00:11:24,560
if the transition fails

274
00:11:24,560 --> 00:11:27,040
we will try this transition according to

275
00:11:27,040 --> 00:11:30,000
the r4

276
00:11:30,480 --> 00:11:33,680
we implement fuzz usb prototype based on

277
00:11:33,680 --> 00:11:36,399
well-known kind of objectives color

278
00:11:36,399 --> 00:11:39,680
in particular we customize this square

279
00:11:39,680 --> 00:11:41,839
to make it work for usb gadget stack

280
00:11:41,839 --> 00:11:43,440
buzzing

281
00:11:43,440 --> 00:11:46,240
for underlying usb device controller

282
00:11:46,240 --> 00:11:49,040
we rely on virtual connection using

283
00:11:49,040 --> 00:11:51,120
dummy udc color module

284
00:11:51,120 --> 00:11:53,200
which implements software bridge between

285
00:11:53,200 --> 00:11:56,720
usb host usb gadget at the udc drive

286
00:11:56,720 --> 00:11:58,240
layer

287
00:11:58,240 --> 00:12:01,200
we use clear for symbolic analysis for

288
00:12:01,200 --> 00:12:03,600
state machine generation

289
00:12:03,600 --> 00:12:05,680
and for bio detection

290
00:12:05,680 --> 00:12:09,040
we use known corner memory sanitizers

291
00:12:09,040 --> 00:12:12,000
such as kazan

292
00:12:12,639 --> 00:12:16,240
for evaluation we use 28 gadgets that

293
00:12:16,240 --> 00:12:18,240
are coming from the latest linux and

294
00:12:18,240 --> 00:12:20,320
android corners

295
00:12:20,320 --> 00:12:23,519
we conducted prior experiment using 16

296
00:12:23,519 --> 00:12:26,160
different combination of mutation rules

297
00:12:26,160 --> 00:12:28,480
so that we use the fixed rule set the

298
00:12:28,480 --> 00:12:30,240
rest of the experiment

299
00:12:30,240 --> 00:12:34,720
which produces the best coverage result

300
00:12:35,279 --> 00:12:37,040
based on the implementation and

301
00:12:37,040 --> 00:12:38,959
experimental setup

302
00:12:38,959 --> 00:12:41,519
we run fuzzy speed for the given target

303
00:12:41,519 --> 00:12:43,360
usb gadgets

304
00:12:43,360 --> 00:12:44,639
in the meantime

305
00:12:44,639 --> 00:12:47,920
we found 34 new security bugs

306
00:12:47,920 --> 00:12:48,600
out of them

307
00:12:48,600 --> 00:12:49,680
[Music]

308
00:12:49,680 --> 00:12:53,120
27 get confirmed and 10 got fixed

309
00:12:53,120 --> 00:12:55,920
by the corresponding community

310
00:12:55,920 --> 00:12:58,160
with high security impacts

311
00:12:58,160 --> 00:13:01,839
we have gotten eight cvs

312
00:13:01,839 --> 00:13:03,600
we evaluate the code coverage

313
00:13:03,600 --> 00:13:06,639
enhancement of usb cancel that

314
00:13:06,639 --> 00:13:08,959
to highlight the effectiveness of the

315
00:13:08,959 --> 00:13:11,440
virginia space features we additionally

316
00:13:11,440 --> 00:13:14,079
define 2k edge folders and compared to

317
00:13:14,079 --> 00:13:15,600
wizard

318
00:13:15,600 --> 00:13:16,480
first

319
00:13:16,480 --> 00:13:19,279
g4g is a baseline gadget folder that

320
00:13:19,279 --> 00:13:22,160
does not know about both state guidance

321
00:13:22,160 --> 00:13:24,480
and multiple input channels

322
00:13:24,480 --> 00:13:27,760
a false usb sl is a stainless version of

323
00:13:27,760 --> 00:13:29,200
file usb

324
00:13:29,200 --> 00:13:32,320
so it disables the state-guided mutation

325
00:13:32,320 --> 00:13:36,000
a multi-channel implementation remains

326
00:13:36,000 --> 00:13:38,959
the result is 4gsp showed three times

327
00:13:38,959 --> 00:13:41,040
the improvement over the jeep version

328
00:13:41,040 --> 00:13:42,320
coverage

329
00:13:42,320 --> 00:13:44,959
ensure two times better coverage

330
00:13:44,959 --> 00:13:47,360
over the spsl

331
00:13:47,360 --> 00:13:50,160
which implies a multiple input channels

332
00:13:50,160 --> 00:13:51,920
as they fully input generation are

333
00:13:51,920 --> 00:13:56,959
essential for usb gadget step fuzzing

334
00:13:57,199 --> 00:13:59,760
this is a bulky example happened in usb

335
00:13:59,760 --> 00:14:01,519
accessory gadget

336
00:14:01,519 --> 00:14:04,079
as you can see a point of a global

337
00:14:04,079 --> 00:14:07,279
variable is assigned in thread 1

338
00:14:07,279 --> 00:14:10,720
and then it is freed in thread 2.

339
00:14:10,720 --> 00:14:12,639
without the validation check of such a

340
00:14:12,639 --> 00:14:15,360
global variable pointer

341
00:14:15,360 --> 00:14:18,160
the thread one tries to access invalid

342
00:14:18,160 --> 00:14:19,680
global object

343
00:14:19,680 --> 00:14:22,560
and causing memory corruption

344
00:14:22,560 --> 00:14:25,360
such a bargain deep state path is more

345
00:14:25,360 --> 00:14:27,120
likely to be triggered

346
00:14:27,120 --> 00:14:28,720
by false usb

347
00:14:28,720 --> 00:14:30,399
because fuzzy usb provides a

348
00:14:30,399 --> 00:14:32,160
multi-channel impulse and stable

349
00:14:32,160 --> 00:14:35,839
mutation to reach this code

350
00:14:36,240 --> 00:14:38,560
even though we cover whole usb gadget

351
00:14:38,560 --> 00:14:41,600
stack we rely on particular udc driver

352
00:14:41,600 --> 00:14:43,600
for virtual connection

353
00:14:43,600 --> 00:14:46,079
to first more udc drivers

354
00:14:46,079 --> 00:14:48,240
we need to emulate corresponding udc

355
00:14:48,240 --> 00:14:49,760
hardware

356
00:14:49,760 --> 00:14:52,560
and we extend fuzzy speed to cover

357
00:14:52,560 --> 00:14:55,199
freebsd usb added stack

358
00:14:55,199 --> 00:14:58,240
but to be more scalable to closest usb

359
00:14:58,240 --> 00:14:59,680
gadget stacks

360
00:14:59,680 --> 00:15:02,079
we need to handle more issues like a

361
00:15:02,079 --> 00:15:04,079
state machine extraction without source

362
00:15:04,079 --> 00:15:05,440
code

363
00:15:05,440 --> 00:15:06,560
lastly

364
00:15:06,560 --> 00:15:08,880
we used a fixed mutation rule that has

365
00:15:08,880 --> 00:15:11,680
shown the best coverage result in our

366
00:15:11,680 --> 00:15:13,519
prior experiment

367
00:15:13,519 --> 00:15:16,560
but the best rule set may depends on usb

368
00:15:16,560 --> 00:15:17,760
gadget

369
00:15:17,760 --> 00:15:19,360
different usb gadget could have

370
00:15:19,360 --> 00:15:21,360
different best route set

371
00:15:21,360 --> 00:15:25,959
relief that for future work

372
00:15:26,000 --> 00:15:28,079
so for three speed stiffer and

373
00:15:28,079 --> 00:15:30,320
multi-channel usb fuzzing that is

374
00:15:30,320 --> 00:15:33,680
designed for usb cache device

375
00:15:33,680 --> 00:15:36,560
first usb has found 33 unique security

376
00:15:36,560 --> 00:15:37,519
box

377
00:15:37,519 --> 00:15:40,560
and assigned acvs

378
00:15:40,560 --> 00:15:43,279
fuzzy spears shows better code coverage

379
00:15:43,279 --> 00:15:45,279
and both findings here compared to

380
00:15:45,279 --> 00:15:47,920
baseline usb gadget folders

381
00:15:47,920 --> 00:15:50,000
and we open sources for usb in this

382
00:15:50,000 --> 00:15:52,480
repository

383
00:15:52,480 --> 00:15:54,000
thank you for your attention to

384
00:15:54,000 --> 00:15:56,000
advertise myself i will be on the job

385
00:15:56,000 --> 00:15:57,920
market this year looking for a faculty

386
00:15:57,920 --> 00:16:01,199
position thank you

387
00:16:01,230 --> 00:16:06,320
[Applause]

388
00:16:06,320 --> 00:16:09,519
county uh can you hear us

389
00:16:09,519 --> 00:16:11,519
i can show you clearly can you hear me

390
00:16:11,519 --> 00:16:12,399
yes

391
00:16:12,399 --> 00:16:13,680
okay

392
00:16:13,680 --> 00:16:16,399
now we have time for questions

393
00:16:16,399 --> 00:16:17,920
anybody

394
00:16:17,920 --> 00:16:21,600
um let me get started so can fast usb be

395
00:16:21,600 --> 00:16:23,360
applied to other platforms such as

396
00:16:23,360 --> 00:16:25,920
windows and are there any challenges if

397
00:16:25,920 --> 00:16:28,560
you do that

398
00:16:29,199 --> 00:16:31,839
yeah uh thank you for the question

399
00:16:31,839 --> 00:16:34,399
well other than just linux and android

400
00:16:34,399 --> 00:16:36,720
usb gadget stacks we

401
00:16:36,720 --> 00:16:39,040
have extended volume speed to couple

402
00:16:39,040 --> 00:16:41,199
more usb gadgets texts

403
00:16:41,199 --> 00:16:44,000
such as freebsd already

404
00:16:44,000 --> 00:16:47,440
and in our evaluation it showed a

405
00:16:47,440 --> 00:16:50,000
good performance for sure so if you're

406
00:16:50,000 --> 00:16:54,480
thinking about extending to

407
00:16:54,480 --> 00:16:57,040
uh more usb gadget steps like it's not

408
00:16:57,040 --> 00:16:59,040
open source then we could think about

409
00:16:59,040 --> 00:17:01,040
more issues

410
00:17:01,040 --> 00:17:02,480
for example

411
00:17:02,480 --> 00:17:04,640
for gsp is uh

412
00:17:04,640 --> 00:17:05,599
what is

413
00:17:05,599 --> 00:17:07,839
essentially requires the source cost to

414
00:17:07,839 --> 00:17:10,000
extract the state machine

415
00:17:10,000 --> 00:17:10,880
and

416
00:17:10,880 --> 00:17:13,679
but uh windows usb gas stack

417
00:17:13,679 --> 00:17:15,919
is not a source source code is not

418
00:17:15,919 --> 00:17:18,160
available so we may need to think about

419
00:17:18,160 --> 00:17:20,319
some how to pay to extract the state

420
00:17:20,319 --> 00:17:21,839
motion

421
00:17:21,839 --> 00:17:25,280
and you need to emulate some other utc

422
00:17:25,280 --> 00:17:26,650
hardware

423
00:17:26,650 --> 00:17:28,640
[Music]

424
00:17:28,640 --> 00:17:31,760
and etc so we need to think about that

425
00:17:31,760 --> 00:17:35,280
kind of technical challenges i hope yeah

426
00:17:35,280 --> 00:17:36,480
cool let's see

427
00:17:36,480 --> 00:17:39,919
um any other questions

428
00:17:39,919 --> 00:17:41,120
um

429
00:17:41,120 --> 00:17:44,000
okay one more follow-up so you um

430
00:17:44,000 --> 00:17:46,400
looks like fast usb the key contribution

431
00:17:46,400 --> 00:17:47,919
is a stateful

432
00:17:47,919 --> 00:17:51,200
state for state awareness and uh

433
00:17:51,200 --> 00:17:54,000
why the existing approaches uh they

434
00:17:54,000 --> 00:17:56,400
didn't notice this so any insights on

435
00:17:56,400 --> 00:18:00,919
this uh state 4000

436
00:18:02,240 --> 00:18:04,960
uh well

437
00:18:04,960 --> 00:18:07,520
thank you for the question and so

438
00:18:07,520 --> 00:18:08,100
yeah

439
00:18:08,100 --> 00:18:09,280
[Music]

440
00:18:09,280 --> 00:18:11,200
as

441
00:18:11,200 --> 00:18:13,520
i explained in my presentation we are

442
00:18:13,520 --> 00:18:14,559
the

443
00:18:14,559 --> 00:18:16,960
first is began to buzzing and existing

444
00:18:16,960 --> 00:18:19,679
use that they have been using usb

445
00:18:19,679 --> 00:18:20,559
watching

446
00:18:20,559 --> 00:18:23,919
android uh they are

447
00:18:23,919 --> 00:18:26,080
a usb host version that genji project

448
00:18:26,080 --> 00:18:27,039
and

449
00:18:27,039 --> 00:18:28,640
yes uh we

450
00:18:28,640 --> 00:18:32,640
brought up a couple of uh challenges and

451
00:18:32,640 --> 00:18:35,440
uh motivation like a stiffness and

452
00:18:35,440 --> 00:18:36,880
multi-channel

453
00:18:36,880 --> 00:18:37,919
fuzzing

454
00:18:37,919 --> 00:18:40,480
uh multigeneral multiple input channels

455
00:18:40,480 --> 00:18:41,360
so

456
00:18:41,360 --> 00:18:43,120
so you're testing usb

457
00:18:43,120 --> 00:18:45,360
uh for just i mean you testing is post

458
00:18:45,360 --> 00:18:47,440
modules uh

459
00:18:47,440 --> 00:18:48,799
uh in

460
00:18:48,799 --> 00:18:51,919
i mean usb is basically um

461
00:18:51,919 --> 00:18:55,120
interactive protocol so usb host and usb

462
00:18:55,120 --> 00:18:56,400
gadget

463
00:18:56,400 --> 00:18:59,520
should operate in a stateful way so

464
00:18:59,520 --> 00:19:01,600
meaning that you're supposed to actually

465
00:19:01,600 --> 00:19:05,200
operate but if it has a stableness so

466
00:19:05,200 --> 00:19:09,520
uh your interesting usb host folders

467
00:19:09,520 --> 00:19:10,559
uh

468
00:19:10,559 --> 00:19:14,320
they do not actually uh focus on like

469
00:19:14,320 --> 00:19:18,000
improving the housing uh coverage of our

470
00:19:18,000 --> 00:19:20,400
specifically focused on something

471
00:19:20,400 --> 00:19:22,840
some other issues like

472
00:19:22,840 --> 00:19:26,320
uh hardware emulation like to implement

473
00:19:26,320 --> 00:19:30,720
a malicious usb device or some other usb

474
00:19:30,720 --> 00:19:33,600
was launchers uh their particular design

475
00:19:33,600 --> 00:19:36,240
to file system

476
00:19:36,240 --> 00:19:38,559
initial step of usb communication output

477
00:19:38,559 --> 00:19:41,200
out of the whole usb communication

478
00:19:41,200 --> 00:19:42,720
so

479
00:19:42,720 --> 00:19:44,640
uh there is a difference

480
00:19:44,640 --> 00:19:48,240
so we could focus on the we our usb

481
00:19:48,240 --> 00:19:51,600
devices focusing on the two

482
00:19:51,600 --> 00:19:53,679
challenges to pictures yeah yeah it

483
00:19:53,679 --> 00:19:55,360
makes sense so i think we have a

484
00:19:55,360 --> 00:19:56,400
question

485
00:19:56,400 --> 00:19:57,440
um

486
00:19:57,440 --> 00:19:59,760
young hee from university of virginia uh

487
00:19:59,760 --> 00:20:02,240
nice to meet you and uh

488
00:20:02,240 --> 00:20:04,159
i have a one question that you know you

489
00:20:04,159 --> 00:20:07,600
have way more blocks covered because of

490
00:20:07,600 --> 00:20:10,159
those leveraging all these stateful and

491
00:20:10,159 --> 00:20:13,200
i kind of assume that a lot of bugs that

492
00:20:13,200 --> 00:20:16,240
you find new is just because of

493
00:20:16,240 --> 00:20:18,080
those stateful

494
00:20:18,080 --> 00:20:20,480
can you comment on those blocks that you

495
00:20:20,480 --> 00:20:21,840
covered more

496
00:20:21,840 --> 00:20:24,799
uh essentially actually attribute to

497
00:20:24,799 --> 00:20:26,559
find more bugs and

498
00:20:26,559 --> 00:20:29,360
are they all i mean are all bugs you

499
00:20:29,360 --> 00:20:32,240
find new or because of your stateful

500
00:20:32,240 --> 00:20:35,200
exploration or there are some

501
00:20:35,200 --> 00:20:36,880
you know other

502
00:20:36,880 --> 00:20:40,480
reasons that you can find more bugs

503
00:20:40,880 --> 00:20:43,520
well actually

504
00:20:43,520 --> 00:20:45,280
i think i haven't covered all this

505
00:20:45,280 --> 00:20:47,120
evaluation step in my presentation

506
00:20:47,120 --> 00:20:49,440
because of limited time but you know

507
00:20:49,440 --> 00:20:51,440
evaluation you can see that

508
00:20:51,440 --> 00:20:54,080
uh the how uh each feature of our

509
00:20:54,080 --> 00:20:56,400
technique contributes to the whole

510
00:20:56,400 --> 00:20:58,640
overall performance like code coverages

511
00:20:58,640 --> 00:21:01,520
so we can see that

512
00:21:01,520 --> 00:21:03,679
or i can say that there's a big

513
00:21:03,679 --> 00:21:04,960
difference

514
00:21:04,960 --> 00:21:06,080
between

515
00:21:06,080 --> 00:21:08,080
i mean among the different baseline in

516
00:21:08,080 --> 00:21:11,360
our filing technique we just enable that

517
00:21:11,360 --> 00:21:14,240
we increment enable and disable the each

518
00:21:14,240 --> 00:21:16,960
feature of our technique i mean

519
00:21:16,960 --> 00:21:19,200
stiffness and the

520
00:21:19,200 --> 00:21:21,679
multichain input so we can

521
00:21:21,679 --> 00:21:23,280
you can refer to our paper for more

522
00:21:23,280 --> 00:21:25,360
detailed questions for multi-tiered

523
00:21:25,360 --> 00:21:26,559
information

524
00:21:26,559 --> 00:21:27,760
uh but

525
00:21:27,760 --> 00:21:30,960
uh well

526
00:21:30,960 --> 00:21:33,120
we found 32

527
00:21:33,120 --> 00:21:37,200
new vulnerabilities and we

528
00:21:37,200 --> 00:21:41,520
we cannot say the most bound by our

529
00:21:41,600 --> 00:21:45,600
stiffness or of posing but i

530
00:21:45,600 --> 00:21:47,760
guess uh half of that

531
00:21:47,760 --> 00:21:50,000
i could find uh

532
00:21:50,000 --> 00:21:53,600
by our uh feature our challenge solution

533
00:21:53,600 --> 00:21:55,280
so

534
00:21:55,280 --> 00:21:57,600
yeah i think that's a good question i i

535
00:21:57,600 --> 00:21:59,200
think uh uh it would be really

536
00:21:59,200 --> 00:22:00,720
interesting to see like you know what

537
00:22:00,720 --> 00:22:02,799
was the reason and then like like you

538
00:22:02,799 --> 00:22:04,960
know how we can go further uh because

539
00:22:04,960 --> 00:22:06,480
you know some techniques may be more

540
00:22:06,480 --> 00:22:08,159
effective than the others may have

541
00:22:08,159 --> 00:22:09,679
different techniques have

542
00:22:09,679 --> 00:22:12,320
you know different combination that can

543
00:22:12,320 --> 00:22:15,039
find more bugs thank you so much

544
00:22:15,039 --> 00:22:16,080
thank you

545
00:22:16,080 --> 00:22:17,679
all right let's thank uh continue one

546
00:22:17,679 --> 00:22:20,840
more time

