1
00:00:00,320 --> 00:00:02,399
thank you for a great introduction

2
00:00:02,399 --> 00:00:05,120
hello everyone i'm yongsap i'm a phd

3
00:00:05,120 --> 00:00:07,600
student from persec security group at

4
00:00:07,600 --> 00:00:10,320
purdue university i'd like to introduce

5
00:00:10,320 --> 00:00:12,719
our new new program of new automatic

6
00:00:12,719 --> 00:00:15,759
program reporter his name is pg patch so

7
00:00:15,759 --> 00:00:17,279
this work has been done with my

8
00:00:17,279 --> 00:00:20,160
co-worker oscar ozman and my three great

9
00:00:20,160 --> 00:00:23,359
advisor barkai chalice antonio bianchi

10
00:00:23,359 --> 00:00:25,519
and don yanchu

11
00:00:25,519 --> 00:00:27,840
let me first explain what is robotic

12
00:00:27,840 --> 00:00:28,800
vehicle

13
00:00:28,800 --> 00:00:31,679
if a vehicle autonomously operate by

14
00:00:31,679 --> 00:00:32,558
cell

15
00:00:32,558 --> 00:00:35,040
we report to such vehicle as robotic

16
00:00:35,040 --> 00:00:36,160
vehicle

17
00:00:36,160 --> 00:00:39,760
so nowadays the use of robotic vehicle

18
00:00:39,760 --> 00:00:42,399
is dramatically increasing

19
00:00:42,399 --> 00:00:44,320
you can find the

20
00:00:44,320 --> 00:00:47,120
soul marine sailboat and drone and

21
00:00:47,120 --> 00:00:49,440
rubber

22
00:00:49,440 --> 00:00:52,000
in this work we focus on logic burn then

23
00:00:52,000 --> 00:00:53,840
what is a logic burn

24
00:00:53,840 --> 00:00:55,120
if work

25
00:00:55,120 --> 00:00:58,079
does not cause the program crash and

26
00:00:58,079 --> 00:01:00,960
memory corruption but lead to

27
00:01:00,960 --> 00:01:04,080
unexpected physical behavior we report

28
00:01:04,080 --> 00:01:07,600
to such a work as logic perks

29
00:01:07,600 --> 00:01:10,320
for example when a sailboat

30
00:01:10,320 --> 00:01:13,119
navigate into a target waypoint

31
00:01:13,119 --> 00:01:15,360
the iv control software calculated

32
00:01:15,360 --> 00:01:17,520
expecting navigation path

33
00:01:17,520 --> 00:01:21,439
however a bug can make disabled david

34
00:01:21,439 --> 00:01:23,200
from the navigation path

35
00:01:23,200 --> 00:01:27,600
we report to such perk as logic perks

36
00:01:27,600 --> 00:01:28,479
okay

37
00:01:28,479 --> 00:01:30,400
then why should we pay attention to

38
00:01:30,400 --> 00:01:32,479
search logic perks

39
00:01:32,479 --> 00:01:35,280
when our research team was looking into

40
00:01:35,280 --> 00:01:38,320
more than 1000 existing bugs in rv

41
00:01:38,320 --> 00:01:40,479
control software we are surprised about

42
00:01:40,479 --> 00:01:41,520
two things

43
00:01:41,520 --> 00:01:42,399
first

44
00:01:42,399 --> 00:01:45,360
around 98 percentile bugs are logic

45
00:01:45,360 --> 00:01:47,119
perks

46
00:01:47,119 --> 00:01:48,399
second

47
00:01:48,399 --> 00:01:50,880
most of logic perks lead to physical

48
00:01:50,880 --> 00:01:53,360
damage such as crashing underground or

49
00:01:53,360 --> 00:01:55,840
unstable attitude or unstable position

50
00:01:55,840 --> 00:01:58,320
controls

51
00:01:58,880 --> 00:02:01,280
in order to find such logic work first

52
00:02:01,280 --> 00:02:03,360
we need to know what is correct behavior

53
00:02:03,360 --> 00:02:06,079
and then what is incorrect behavior

54
00:02:06,079 --> 00:02:08,399
that's why in our previous work

55
00:02:08,399 --> 00:02:11,038
we define such expected physical

56
00:02:11,038 --> 00:02:13,440
behavior in the form of linear temporal

57
00:02:13,440 --> 00:02:15,280
logic formula

58
00:02:15,280 --> 00:02:17,599
then we showed that this formula can

59
00:02:17,599 --> 00:02:20,239
guide of further to discover new logic

60
00:02:20,239 --> 00:02:22,879
works in rv controls obtained

61
00:02:22,879 --> 00:02:24,800
in our previous work we discovered more

62
00:02:24,800 --> 00:02:28,080
than 100 logic perks

63
00:02:28,080 --> 00:02:29,440
for example

64
00:02:29,440 --> 00:02:32,239
a sailboat cannot precisely navigate

65
00:02:32,239 --> 00:02:34,959
into a waypoint without wind direction

66
00:02:34,959 --> 00:02:37,280
obtained from the wind vein sensor

67
00:02:37,280 --> 00:02:39,760
that's why the documentation explicitly

68
00:02:39,760 --> 00:02:42,080
mentions such safety policy in

69
00:02:42,080 --> 00:02:43,760
documentation

70
00:02:43,760 --> 00:02:46,879
so we can formally express this safety

71
00:02:46,879 --> 00:02:50,160
policy in the form of ltl formula

72
00:02:50,160 --> 00:02:52,640
in this example this formula consists of

73
00:02:52,640 --> 00:02:53,760
two parts

74
00:02:53,760 --> 00:02:55,760
pre-conditioned in green color and

75
00:02:55,760 --> 00:02:59,040
post-condition in red color

76
00:02:59,040 --> 00:03:02,400
if always physical state satisfied

77
00:03:02,400 --> 00:03:04,400
precondition in green color it means

78
00:03:04,400 --> 00:03:07,120
that the rv control software must

79
00:03:07,120 --> 00:03:08,239
trigger

80
00:03:08,239 --> 00:03:10,959
the behavior describing post condition

81
00:03:10,959 --> 00:03:13,440
in this example the preamp check

82
00:03:13,440 --> 00:03:17,040
function must return error state

83
00:03:17,040 --> 00:03:19,280
however we find logic broke because the

84
00:03:19,280 --> 00:03:22,239
irv software initially did not implement

85
00:03:22,239 --> 00:03:24,640
his search safety policy

86
00:03:24,640 --> 00:03:26,560
even though the irish physical state

87
00:03:26,560 --> 00:03:29,840
satisfied precondition this preamp check

88
00:03:29,840 --> 00:03:33,840
function did not return aerostate

89
00:03:34,239 --> 00:03:36,000
then our research question is that can

90
00:03:36,000 --> 00:03:38,799
we automatically fix such logic perks

91
00:03:38,799 --> 00:03:40,480
the reason is that there are so many

92
00:03:40,480 --> 00:03:42,239
previous

93
00:03:42,239 --> 00:03:44,239
program repeaters

94
00:03:44,239 --> 00:03:47,040
unfortunately they have many three

95
00:03:47,040 --> 00:03:49,680
limitations to fix logic perks because

96
00:03:49,680 --> 00:03:52,000
they are not many focus on lower tech

97
00:03:52,000 --> 00:03:54,000
vehicle

98
00:03:54,000 --> 00:03:56,640
first limitation is that most of them

99
00:03:56,640 --> 00:03:59,200
focus on fixing memory corruption works

100
00:03:59,200 --> 00:04:01,519
later than logic books

101
00:04:01,519 --> 00:04:02,720
second

102
00:04:02,720 --> 00:04:05,200
some mobile tools can fix logic books

103
00:04:05,200 --> 00:04:08,000
however these two require a user to

104
00:04:08,000 --> 00:04:11,519
prepare a complete set of test cases

105
00:04:11,519 --> 00:04:14,319
unfortunately this is almost impossible

106
00:04:14,319 --> 00:04:17,600
because of their huge input space

107
00:04:17,600 --> 00:04:20,560
the last limitation is that most of them

108
00:04:20,560 --> 00:04:23,360
leverage constraint server

109
00:04:23,360 --> 00:04:26,000
but as you might know the construct

110
00:04:26,000 --> 00:04:27,280
solver

111
00:04:27,280 --> 00:04:29,040
showed the process of working for

112
00:04:29,040 --> 00:04:31,199
floating point type operation

113
00:04:31,199 --> 00:04:32,639
unfortunately

114
00:04:32,639 --> 00:04:34,479
most of the variable type in array

115
00:04:34,479 --> 00:04:36,320
controls obtains a floating point of

116
00:04:36,320 --> 00:04:38,479
type

117
00:04:38,479 --> 00:04:41,120
okay so we just realized that we cannot

118
00:04:41,120 --> 00:04:44,479
leverage existing program reputation

119
00:04:44,479 --> 00:04:46,560
but our intuition is that

120
00:04:46,560 --> 00:04:49,199
this safety policy already explained

121
00:04:49,199 --> 00:04:51,120
what is correct behavior and what is

122
00:04:51,120 --> 00:04:54,000
expected behavior of robotic vehicle

123
00:04:54,000 --> 00:04:56,400
that's why our next research question is

124
00:04:56,400 --> 00:04:59,520
that can we reuse this formula to fix

125
00:04:59,520 --> 00:05:01,440
the founder

126
00:05:01,440 --> 00:05:03,520
our answer is yes

127
00:05:03,520 --> 00:05:05,600
so to take a limitation of previous

128
00:05:05,600 --> 00:05:08,320
approaches we suggest the new automatic

129
00:05:08,320 --> 00:05:10,320
programming repair tool its name is busy

130
00:05:10,320 --> 00:05:12,560
patch pg patch reuse

131
00:05:12,560 --> 00:05:15,680
existing temporal logic formula

132
00:05:15,680 --> 00:05:18,240
there are two possible usage scenario in

133
00:05:18,240 --> 00:05:20,639
first usa scenario we assume the user

134
00:05:20,639 --> 00:05:24,000
already created on lta formula to find

135
00:05:24,000 --> 00:05:25,440
logic perks

136
00:05:25,440 --> 00:05:28,960
in that case pg page take as input

137
00:05:28,960 --> 00:05:32,320
ltl formula and bulk telegram input

138
00:05:32,320 --> 00:05:36,400
the mpg patch create a candidate patch

139
00:05:36,400 --> 00:05:38,479
in second scenario we also assume that

140
00:05:38,479 --> 00:05:40,880
developer can receive the bulk report

141
00:05:40,880 --> 00:05:42,160
from users

142
00:05:42,160 --> 00:05:43,919
in that case they don't have the ltl

143
00:05:43,919 --> 00:05:46,400
formula that's why in that case the pg

144
00:05:46,400 --> 00:05:49,520
patch requires developers to create ppl

145
00:05:49,520 --> 00:05:50,800
formula

146
00:05:50,800 --> 00:05:53,280
in here ppl formula denote the pg patch

147
00:05:53,280 --> 00:05:54,240
language

148
00:05:54,240 --> 00:05:56,639
the thing is that we realized that most

149
00:05:56,639 --> 00:05:59,199
of every software developers are not

150
00:05:59,199 --> 00:06:01,199
familiar with formal language such as

151
00:06:01,199 --> 00:06:02,720
ltl formula

152
00:06:02,720 --> 00:06:05,680
that's why to raw difficulty of creating

153
00:06:05,680 --> 00:06:07,840
the formula we create

154
00:06:07,840 --> 00:06:10,080
a new natural language like policy

155
00:06:10,080 --> 00:06:13,919
defined language its name is ppl

156
00:06:14,800 --> 00:06:17,520
okay overview page page first we pass a

157
00:06:17,520 --> 00:06:19,039
given formula

158
00:06:19,039 --> 00:06:22,479
second we match the formulas terms

159
00:06:22,479 --> 00:06:24,720
with a corresponding variable or the

160
00:06:24,720 --> 00:06:26,160
corresponding function in the source

161
00:06:26,160 --> 00:06:27,600
code

162
00:06:27,600 --> 00:06:30,880
third we analyze how to access

163
00:06:30,880 --> 00:06:32,880
the mapped variable or the mapped

164
00:06:32,880 --> 00:06:35,280
function in the source code

165
00:06:35,280 --> 00:06:38,240
next we generate candidate page

166
00:06:38,240 --> 00:06:40,880
lastly in order to verify the candidate

167
00:06:40,880 --> 00:06:43,680
patches or correctness we learn test

168
00:06:43,680 --> 00:06:46,720
cases created by developers

169
00:06:46,720 --> 00:06:49,919
however if the candidate page failed to

170
00:06:49,919 --> 00:06:52,880
fix our logic perk in that case pg patch

171
00:06:52,880 --> 00:06:57,280
try to modify the candidate page

172
00:06:57,680 --> 00:07:00,160
okay so from now on i'd like to give you

173
00:07:00,160 --> 00:07:02,720
details of each component first parsing

174
00:07:02,720 --> 00:07:05,599
or given formula

175
00:07:06,080 --> 00:07:09,280
so we convert a given formula to an

176
00:07:09,280 --> 00:07:11,280
expression tree

177
00:07:11,280 --> 00:07:14,319
for example this formula consists of

178
00:07:14,319 --> 00:07:16,319
several propositions

179
00:07:16,319 --> 00:07:17,199
so

180
00:07:17,199 --> 00:07:19,759
armed is first is one proposition of

181
00:07:19,759 --> 00:07:23,039
this formula we assign each term as

182
00:07:23,039 --> 00:07:27,360
terminal node and verb as parents know

183
00:07:27,440 --> 00:07:30,639
we also convert other proposition into

184
00:07:30,639 --> 00:07:32,639
the sub trees

185
00:07:32,639 --> 00:07:34,880
then we merge this subtree into one

186
00:07:34,880 --> 00:07:37,680
expression tree

187
00:07:38,000 --> 00:07:40,400
then we classify each term into three

188
00:07:40,400 --> 00:07:41,919
different types

189
00:07:41,919 --> 00:07:44,800
first the always physical states such as

190
00:07:44,800 --> 00:07:47,599
rule ptr and altitude

191
00:07:47,599 --> 00:07:50,000
second i risk a configuration parameter

192
00:07:50,000 --> 00:07:51,919
state in this example

193
00:07:51,919 --> 00:07:55,120
cell enabled in blue color and wind vane

194
00:07:55,120 --> 00:07:57,599
type in yellow colors are these are all

195
00:07:57,599 --> 00:07:59,280
configuration parameters of logarithmic

196
00:07:59,280 --> 00:08:00,960
vehicle subject

197
00:08:00,960 --> 00:08:03,520
and last type is function or variable in

198
00:08:03,520 --> 00:08:04,879
this example

199
00:08:04,879 --> 00:08:07,360
the preamp checks is a function in the

200
00:08:07,360 --> 00:08:09,840
source code

201
00:08:10,800 --> 00:08:13,039
next

202
00:08:13,039 --> 00:08:15,440
let's turn to corresponding variable or

203
00:08:15,440 --> 00:08:16,960
the corresponding function in the source

204
00:08:16,960 --> 00:08:19,198
code

205
00:08:19,280 --> 00:08:21,039
in the case of function type the

206
00:08:21,039 --> 00:08:22,720
matching is straightforward because the

207
00:08:22,720 --> 00:08:24,879
terms name exactly match with a

208
00:08:24,879 --> 00:08:27,680
function's name in the source code

209
00:08:27,680 --> 00:08:29,599
however what about

210
00:08:29,599 --> 00:08:31,280
physical state and what about the

211
00:08:31,280 --> 00:08:33,440
configuration parameter state how can

212
00:08:33,440 --> 00:08:34,479
you match

213
00:08:34,479 --> 00:08:36,719
this is the most tricky part

214
00:08:36,719 --> 00:08:39,519
so to tackle this challenge we leverage

215
00:08:39,519 --> 00:08:41,679
several heuristics in the case of

216
00:08:41,679 --> 00:08:43,919
configuration parameter we take our

217
00:08:43,919 --> 00:08:46,640
advantage of this heuristic how the iris

218
00:08:46,640 --> 00:08:49,279
obtained port configuration parameter

219
00:08:49,279 --> 00:08:51,920
from xml file to source code

220
00:08:51,920 --> 00:08:54,480
the reason is that both of rv control

221
00:08:54,480 --> 00:08:56,800
software maintain their configuration

222
00:08:56,800 --> 00:09:00,080
parameter in the formal xml files

223
00:09:00,080 --> 00:09:02,800
for example in adobe parlor

224
00:09:02,800 --> 00:09:04,640
when source qualifier leads a

225
00:09:04,640 --> 00:09:06,480
configuration parameter they always call

226
00:09:06,480 --> 00:09:08,640
this function

227
00:09:08,640 --> 00:09:11,040
so based on this a functions argument we

228
00:09:11,040 --> 00:09:13,920
can extract the corresponding class

229
00:09:13,920 --> 00:09:15,760
variable and configuration parameter

230
00:09:15,760 --> 00:09:17,120
name

231
00:09:17,120 --> 00:09:20,160
in this example we can match the cell

232
00:09:20,160 --> 00:09:23,120
enabled in blue color with or enable

233
00:09:23,120 --> 00:09:26,640
variable in sailboat class

234
00:09:27,440 --> 00:09:30,320
next in the case of physical say we also

235
00:09:30,320 --> 00:09:32,800
take aurora manager one heuristic

236
00:09:32,800 --> 00:09:34,880
there are three coding conventions

237
00:09:34,880 --> 00:09:37,040
the thing is that there is no any random

238
00:09:37,040 --> 00:09:39,600
variable in rv control software

239
00:09:39,600 --> 00:09:42,080
each variable's name must denote a

240
00:09:42,080 --> 00:09:43,839
physical state

241
00:09:43,839 --> 00:09:46,240
for example if i want to store a

242
00:09:46,240 --> 00:09:49,839
altitude physical state into a variable

243
00:09:49,839 --> 00:09:52,640
in that case the variable's name must

244
00:09:52,640 --> 00:09:56,560
include such keyword altitude or height

245
00:09:56,560 --> 00:09:59,040
based on this uh the state coding

246
00:09:59,040 --> 00:10:00,560
convention

247
00:10:00,560 --> 00:10:03,440
we can match this armed physical state

248
00:10:03,440 --> 00:10:08,240
with armed a variable in notify class

249
00:10:09,120 --> 00:10:11,760
so so far we finished to pass a given

250
00:10:11,760 --> 00:10:13,760
formula and then finished to map the

251
00:10:13,760 --> 00:10:16,240
formulas term to corresponding variable

252
00:10:16,240 --> 00:10:17,600
or the corresponding function in the

253
00:10:17,600 --> 00:10:18,720
source code

254
00:10:18,720 --> 00:10:20,959
next step is we also need to

255
00:10:20,959 --> 00:10:23,519
analyze how to access the mapped

256
00:10:23,519 --> 00:10:27,279
variable or the method function

257
00:10:28,560 --> 00:10:30,240
in particular because the mapped

258
00:10:30,240 --> 00:10:33,279
variable can be private member worklets

259
00:10:33,279 --> 00:10:35,200
in that case

260
00:10:35,200 --> 00:10:37,680
pg page tried to find a kettle function

261
00:10:37,680 --> 00:10:39,519
this scatter function returned the

262
00:10:39,519 --> 00:10:41,279
mapped variable

263
00:10:41,279 --> 00:10:42,880
in this example

264
00:10:42,880 --> 00:10:45,440
the windvane enable function return the

265
00:10:45,440 --> 00:10:49,040
mapped variable the direction type

266
00:10:49,040 --> 00:10:51,760
next we also need to identify how to

267
00:10:51,760 --> 00:10:54,320
call such scatter function

268
00:10:54,320 --> 00:10:56,880
that's why pgpash tried to

269
00:10:56,880 --> 00:10:59,680
search how existing code statement

270
00:10:59,680 --> 00:11:02,000
called such get a function

271
00:11:02,000 --> 00:11:04,560
so we call the table on the right side

272
00:11:04,560 --> 00:11:07,120
as xs pattern table pg patch will

273
00:11:07,120 --> 00:11:09,760
leverage this access pattern table to

274
00:11:09,760 --> 00:11:14,000
create a candidate page later

275
00:11:14,000 --> 00:11:17,920
next is time to create candidate page

276
00:11:18,079 --> 00:11:20,800
so pg patch will create the patch

277
00:11:20,800 --> 00:11:22,880
candidate page based on this expression

278
00:11:22,880 --> 00:11:25,440
tree however this this version of

279
00:11:25,440 --> 00:11:27,440
expression 3 does not have mapping

280
00:11:27,440 --> 00:11:29,360
information between formula and source

281
00:11:29,360 --> 00:11:30,399
code

282
00:11:30,399 --> 00:11:32,800
however this excess pattern table on the

283
00:11:32,800 --> 00:11:35,680
below contain such mapping information

284
00:11:35,680 --> 00:11:38,480
that's why we switch the terminal load

285
00:11:38,480 --> 00:11:40,480
of the expression 3 with the found

286
00:11:40,480 --> 00:11:43,480
experiments

287
00:11:43,680 --> 00:11:46,640
so this version of expression 3 finally

288
00:11:46,640 --> 00:11:49,200
contained the mapping information pg

289
00:11:49,200 --> 00:11:51,920
patch will create a candidate page based

290
00:11:51,920 --> 00:11:56,920
on this version of expression tree

291
00:11:58,240 --> 00:12:00,399
next step is we need to

292
00:12:00,399 --> 00:12:02,720
decide the patch location the thing is

293
00:12:02,720 --> 00:12:05,120
that we leverage different strategies to

294
00:12:05,120 --> 00:12:07,920
info patch location per page type

295
00:12:07,920 --> 00:12:10,880
however in this example we divide this

296
00:12:10,880 --> 00:12:13,040
expression tree into two parts

297
00:12:13,040 --> 00:12:15,279
precondition in blue color and post

298
00:12:15,279 --> 00:12:17,519
condition in red color

299
00:12:17,519 --> 00:12:20,639
but please uh remind the buggy behavior

300
00:12:20,639 --> 00:12:22,880
of this sailboat example

301
00:12:22,880 --> 00:12:25,440
the body behavior was that even though

302
00:12:25,440 --> 00:12:28,399
iris physical state satisfy precondition

303
00:12:28,399 --> 00:12:29,680
in blue color

304
00:12:29,680 --> 00:12:32,240
iris object did not trigger behavior

305
00:12:32,240 --> 00:12:34,959
describe imposed condition in red color

306
00:12:34,959 --> 00:12:37,440
because the iris obtainer initially did

307
00:12:37,440 --> 00:12:40,000
not implement this policy

308
00:12:40,000 --> 00:12:41,760
so based on this information we can

309
00:12:41,760 --> 00:12:43,680
infer that the patch location can be

310
00:12:43,680 --> 00:12:47,440
this fully unchecked of functions

311
00:12:47,440 --> 00:12:49,680
to generate the candidate patch we

312
00:12:49,680 --> 00:12:51,680
conduct inorder traversal of this

313
00:12:51,680 --> 00:12:54,880
expression tree so this is a generated

314
00:12:54,880 --> 00:12:56,880
candidate patch this patch called

315
00:12:56,880 --> 00:12:59,040
snippet is symmetrically same as the

316
00:12:59,040 --> 00:13:01,920
developers one

317
00:13:02,639 --> 00:13:04,720
so far i just explained one page type

318
00:13:04,720 --> 00:13:06,560
adding a condition check

319
00:13:06,560 --> 00:13:09,519
however pg patch support 5 different of

320
00:13:09,519 --> 00:13:11,760
patch type so if you are curious about

321
00:13:11,760 --> 00:13:15,519
other patch type please check our paper

322
00:13:15,920 --> 00:13:19,120
to evaluate pg patch we deploy pg patch

323
00:13:19,120 --> 00:13:21,760
into three popular rv control software

324
00:13:21,760 --> 00:13:24,800
autopilot px4 and paparazzi

325
00:13:24,800 --> 00:13:27,200
then we randomly collected around 300

326
00:13:27,200 --> 00:13:30,000
logic books from their github repository

327
00:13:30,000 --> 00:13:31,839
and then the reported blog from the

328
00:13:31,839 --> 00:13:34,720
ivory forging papers

329
00:13:34,720 --> 00:13:37,680
as a result pgp succeed in

330
00:13:37,680 --> 00:13:42,079
fixing around 86 percent robux

331
00:13:42,399 --> 00:13:45,680
ok so evaluation result was pretty good

332
00:13:45,680 --> 00:13:46,800
however

333
00:13:46,800 --> 00:13:49,839
our research team was still wondering

334
00:13:49,839 --> 00:13:52,399
what if users feel a lot of difficulty

335
00:13:52,399 --> 00:13:54,480
of using our tool

336
00:13:54,480 --> 00:13:56,880
in that case usual

337
00:13:56,880 --> 00:13:57,920
like to

338
00:13:57,920 --> 00:14:00,240
manually fix a bug instead of using our

339
00:14:00,240 --> 00:14:01,199
tool

340
00:14:01,199 --> 00:14:03,920
that's why our research team

341
00:14:03,920 --> 00:14:06,560
thought that okay then we can recruit

342
00:14:06,560 --> 00:14:08,880
the better person users and then conduct

343
00:14:08,880 --> 00:14:11,199
a user study

344
00:14:11,199 --> 00:14:12,560
as a result

345
00:14:12,560 --> 00:14:15,519
we liquidate total six iv developers and

346
00:14:15,519 --> 00:14:16,480
12

347
00:14:16,480 --> 00:14:18,800
experienced iv users

348
00:14:18,800 --> 00:14:21,360
in particular one subject was on

349
00:14:21,360 --> 00:14:24,160
official autopilot developer and these

350
00:14:24,160 --> 00:14:26,639
12 ivory users had programming

351
00:14:26,639 --> 00:14:28,240
experience of

352
00:14:28,240 --> 00:14:30,959
the rv control software

353
00:14:30,959 --> 00:14:34,399
in this user study we asked each subject

354
00:14:34,399 --> 00:14:37,279
to create five source level patches and

355
00:14:37,279 --> 00:14:41,360
five corresponding or formulas

356
00:14:41,360 --> 00:14:43,199
this is the result

357
00:14:43,199 --> 00:14:45,920
first we count how many answers are

358
00:14:45,920 --> 00:14:47,440
correct

359
00:14:47,440 --> 00:14:48,959
so as you see

360
00:14:48,959 --> 00:14:51,920
when they created the social web pages

361
00:14:51,920 --> 00:14:54,639
they created on average two source level

362
00:14:54,639 --> 00:14:55,600
patches

363
00:14:55,600 --> 00:14:56,959
on the other hand

364
00:14:56,959 --> 00:14:59,440
they correctly created a

365
00:14:59,440 --> 00:15:02,399
4.6 correct formulas

366
00:15:02,399 --> 00:15:05,600
it means that fixing bugs by using pgp

367
00:15:05,600 --> 00:15:08,000
formula is much less error prone

368
00:15:08,000 --> 00:15:12,079
compared to manual patching effort

369
00:15:12,079 --> 00:15:14,160
we also measure the time spending to

370
00:15:14,160 --> 00:15:16,160
answer each question

371
00:15:16,160 --> 00:15:18,800
as you see when when they created the

372
00:15:18,800 --> 00:15:21,600
formula they spend much less time

373
00:15:21,600 --> 00:15:25,680
than a manual patching

374
00:15:25,680 --> 00:15:27,600
this is somalia mitre

375
00:15:27,600 --> 00:15:30,320
logic bug is a main bug type in robotic

376
00:15:30,320 --> 00:15:32,240
beakers obtained

377
00:15:32,240 --> 00:15:34,480
to automatically fix the logic products

378
00:15:34,480 --> 00:15:37,360
in robotic vehicle software we suggest

379
00:15:37,360 --> 00:15:40,160
do program repair tool its name is pg

380
00:15:40,160 --> 00:15:41,279
patch

381
00:15:41,279 --> 00:15:44,160
pg patch reuse existing temporal logic

382
00:15:44,160 --> 00:15:45,199
formula

383
00:15:45,199 --> 00:15:47,040
and it supports five different patch

384
00:15:47,040 --> 00:15:48,639
type

385
00:15:48,639 --> 00:15:51,839
also our usual study result showed that

386
00:15:51,839 --> 00:15:54,639
fixing bug by using pg patch formula is

387
00:15:54,639 --> 00:15:57,040
less error prone compared to manual

388
00:15:57,040 --> 00:15:59,759
patching effort

389
00:16:00,399 --> 00:16:02,720
thank you this is endo mito i'm happy to

390
00:16:02,720 --> 00:16:06,680
take education thank you

391
00:16:11,279 --> 00:16:14,000
hello nice talk um thank you so this

392
00:16:14,000 --> 00:16:15,600
isn't really a question but more a

393
00:16:15,600 --> 00:16:17,920
suggestion so there's an intersection

394
00:16:17,920 --> 00:16:19,839
between our community and the software

395
00:16:19,839 --> 00:16:21,440
engineering community

396
00:16:21,440 --> 00:16:22,880
which unfortunately don't they our

397
00:16:22,880 --> 00:16:25,279
communities don't get along very well as

398
00:16:25,279 --> 00:16:27,680
evidenced by xc is going on right at

399
00:16:27,680 --> 00:16:29,680
this moment and so none of us can

400
00:16:29,680 --> 00:16:32,480
actually go to their talks

401
00:16:32,480 --> 00:16:34,399
so i'm looking at this paper and

402
00:16:34,399 --> 00:16:36,560
thinking that it probably it's a great

403
00:16:36,560 --> 00:16:38,959
paper here but it probably will be even

404
00:16:38,959 --> 00:16:41,440
a greater paper at xc because there

405
00:16:41,440 --> 00:16:43,040
doesn't seem to be very much malice

406
00:16:43,040 --> 00:16:44,160
involved

407
00:16:44,160 --> 00:16:47,199
so maybe i suggest that you try to enter

408
00:16:47,199 --> 00:16:49,120
um also try to interact with that

409
00:16:49,120 --> 00:16:50,720
community

410
00:16:50,720 --> 00:16:51,920
so that they're

411
00:16:51,920 --> 00:16:53,680
more aware of what we are doing which

412
00:16:53,680 --> 00:16:56,240
increases your

413
00:16:56,240 --> 00:16:58,399
the impact of your work and also if they

414
00:16:58,399 --> 00:17:01,680
have any techniques that our community

415
00:17:01,680 --> 00:17:05,599
isn't aware of you can apply those

416
00:17:05,599 --> 00:17:07,520
yeah thank you for your comment yeah

417
00:17:07,520 --> 00:17:09,599
actually we also consider submitting our

418
00:17:09,599 --> 00:17:11,280
paper into the software engineering

419
00:17:11,280 --> 00:17:13,839
conference but we realized that ortega

420
00:17:13,839 --> 00:17:17,599
can take exploit such logic

421
00:17:17,599 --> 00:17:19,520
that's why we decided to summon our

422
00:17:19,520 --> 00:17:23,199
paper into security event

423
00:17:23,199 --> 00:17:25,199
thank you

424
00:17:25,199 --> 00:17:27,599
okay so i dumped a bunch of questions

425
00:17:27,599 --> 00:17:30,000
for you in there too um

426
00:17:30,000 --> 00:17:31,679
so i guess my

427
00:17:31,679 --> 00:17:32,799
you know i have a couple questions my

428
00:17:32,799 --> 00:17:34,880
one of my main questions is

429
00:17:34,880 --> 00:17:36,960
you know we we build a lot of software

430
00:17:36,960 --> 00:17:39,200
and it's not cost cost effective to you

431
00:17:39,200 --> 00:17:40,400
know do formal methods formal

432
00:17:40,400 --> 00:17:43,039
verification because you know it's just

433
00:17:43,039 --> 00:17:44,720
too much right you know your toaster

434
00:17:44,720 --> 00:17:46,080
can't do something that's terrible i

435
00:17:46,080 --> 00:17:47,760
guess too terrible

436
00:17:47,760 --> 00:17:49,280
um for now

437
00:17:49,280 --> 00:17:52,240
but um you know at what point do we say

438
00:17:52,240 --> 00:17:54,000
okay this drone stuff because your work

439
00:17:54,000 --> 00:17:55,200
is kind of in between right software

440
00:17:55,200 --> 00:17:56,799
engineering right it's this you're doing

441
00:17:56,799 --> 00:17:59,039
all the specification it's a lot of work

442
00:17:59,039 --> 00:18:00,720
so you know

443
00:18:00,720 --> 00:18:02,559
what's the difference between this and

444
00:18:02,559 --> 00:18:05,360
say building a formal model and actually

445
00:18:05,360 --> 00:18:06,720
because you have a specification there

446
00:18:06,720 --> 00:18:08,559
is some type of formal model and using a

447
00:18:08,559 --> 00:18:09,440
more

448
00:18:09,440 --> 00:18:11,600
kind of standard formal methods approach

449
00:18:11,600 --> 00:18:16,720
to doing this type of work uh i think

450
00:18:16,720 --> 00:18:19,200
yeah you have point because the

451
00:18:19,200 --> 00:18:22,080
developers are not familiar with this

452
00:18:22,080 --> 00:18:24,400
formal method such as linear temporal

453
00:18:24,400 --> 00:18:25,760
logic formula

454
00:18:25,760 --> 00:18:28,400
but that's why we created a new

455
00:18:28,400 --> 00:18:29,280
uh

456
00:18:29,280 --> 00:18:31,919
natural language like formula ppl

457
00:18:31,919 --> 00:18:34,720
so based on our usual study research

458
00:18:34,720 --> 00:18:36,400
they feel lost

459
00:18:36,400 --> 00:18:38,559
feel less difficult when they created

460
00:18:38,559 --> 00:18:40,720
formulae also

461
00:18:40,720 --> 00:18:43,840
actually it is uh i don't include the uh

462
00:18:43,840 --> 00:18:46,480
such uh the developers feedback into

463
00:18:46,480 --> 00:18:49,520
paper and slide but we listed quite uh

464
00:18:49,520 --> 00:18:52,320
positive feedback from the person yeah

465
00:18:52,320 --> 00:18:53,200
yeah that's actually one of the

466
00:18:53,200 --> 00:18:54,400
interesting the thing i'm most

467
00:18:54,400 --> 00:18:56,880
interested in is is right this is a high

468
00:18:56,880 --> 00:18:58,960
you know requires a lot of expertise

469
00:18:58,960 --> 00:19:01,919
right and so i wonder if you know

470
00:19:01,919 --> 00:19:04,400
to to integrate this and scale it right

471
00:19:04,400 --> 00:19:05,840
do you have to have a specialist that's

472
00:19:05,840 --> 00:19:08,640
a part of these robotics you know teams

473
00:19:08,640 --> 00:19:10,320
or anybody that's delivering this type

474
00:19:10,320 --> 00:19:11,360
of product

475
00:19:11,360 --> 00:19:13,039
and you know how the developers would

476
00:19:13,039 --> 00:19:14,640
accept somebody that specifically says

477
00:19:14,640 --> 00:19:16,320
hey for reliability we want to actually

478
00:19:16,320 --> 00:19:18,480
have this type of modeling because it

479
00:19:18,480 --> 00:19:19,440
seems like you need it really

480
00:19:19,440 --> 00:19:21,520
specifically for each

481
00:19:21,520 --> 00:19:23,440
kind of context or each different robot

482
00:19:23,440 --> 00:19:24,559
because you have to define all the

483
00:19:24,559 --> 00:19:25,520
states

484
00:19:25,520 --> 00:19:27,440
is that true and then how acceptable

485
00:19:27,440 --> 00:19:28,960
would they be or acceptable would this

486
00:19:28,960 --> 00:19:30,880
be to the community

487
00:19:30,880 --> 00:19:32,720
so

488
00:19:32,720 --> 00:19:35,200
so in development developers point of

489
00:19:35,200 --> 00:19:36,000
view

490
00:19:36,000 --> 00:19:38,240
so they need to thoroughly write down

491
00:19:38,240 --> 00:19:39,840
documentation

492
00:19:39,840 --> 00:19:42,080
the reason is that even though i am

493
00:19:42,080 --> 00:19:44,799
developer but i'm just evolving into a

494
00:19:44,799 --> 00:19:46,559
specific part of the robotic difficult

495
00:19:46,559 --> 00:19:48,720
software for example device driver it

496
00:19:48,720 --> 00:19:51,200
means that i don't have any idea about

497
00:19:51,200 --> 00:19:53,039
the control level algorithm like this

498
00:19:53,039 --> 00:19:55,039
that's why documentation is really

499
00:19:55,039 --> 00:19:57,200
important for developers

500
00:19:57,200 --> 00:19:59,679
that's why though existing the robotin

501
00:19:59,679 --> 00:20:01,840
vehicle software such as

502
00:20:01,840 --> 00:20:05,679
autopilot px4 they already have the such

503
00:20:05,679 --> 00:20:08,799
detailed documentation yeah that's why

504
00:20:08,799 --> 00:20:11,039
when we conducted the user study

505
00:20:11,039 --> 00:20:13,760
so we also recruited uh users just

506
00:20:13,760 --> 00:20:15,039
normal users

507
00:20:15,039 --> 00:20:18,080
yeah they quite well create formulas

508
00:20:18,080 --> 00:20:19,360
based on the documentation they were

509
00:20:19,360 --> 00:20:20,960
able to create formulas yeah oh really

510
00:20:20,960 --> 00:20:22,480
oh that's exciting to hear okay cool

511
00:20:22,480 --> 00:20:23,200
well

512
00:20:23,200 --> 00:20:24,240
i'll be interested to hear a little bit

513
00:20:24,240 --> 00:20:26,320
more uh all right let's all thank our

514
00:20:26,320 --> 00:20:28,080
speaker for the great talk thank you so

515
00:20:28,080 --> 00:20:28,960
much

516
00:20:28,960 --> 00:20:31,760
thank you

