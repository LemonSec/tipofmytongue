1
00:00:01,439 --> 00:00:03,679
sorry for the delay uh hello everyone

2
00:00:03,679 --> 00:00:05,759
thank you for attending this talk uh i'm

3
00:00:05,759 --> 00:00:08,559
charlie a phd student from uc riverside

4
00:00:08,559 --> 00:00:10,719
this work is done in collaboration with

5
00:00:10,719 --> 00:00:13,040
uh farzin hushman and professor mohsen

6
00:00:13,040 --> 00:00:15,440
lazani today we're gonna talk about

7
00:00:15,440 --> 00:00:18,000
resilient partitioning and replication

8
00:00:18,000 --> 00:00:20,000
so let's imagine a building service for

9
00:00:20,000 --> 00:00:22,080
a health care system this system

10
00:00:22,080 --> 00:00:23,680
includes different organizations

11
00:00:23,680 --> 00:00:25,279
including health

12
00:00:25,279 --> 00:00:27,920
hospital insurance company and patients

13
00:00:27,920 --> 00:00:30,240
and they can use a different cloud

14
00:00:30,240 --> 00:00:31,920
infrastructure to host their macro

15
00:00:31,920 --> 00:00:33,840
services to provide scalability

16
00:00:33,840 --> 00:00:36,640
scalability and availability and also

17
00:00:36,640 --> 00:00:38,640
they hold some of their data and

18
00:00:38,640 --> 00:00:40,480
computation on the

19
00:00:40,480 --> 00:00:42,640
private on premise cloud

20
00:00:42,640 --> 00:00:45,200
so for this system uh that can include

21
00:00:45,200 --> 00:00:47,520
some byzantine servers that means those

22
00:00:47,520 --> 00:00:51,840
servers can perform arbitrary behaviors

23
00:00:51,840 --> 00:00:53,680
and now we have a distributed system

24
00:00:53,680 --> 00:00:55,680
that spans different organizations to

25
00:00:55,680 --> 00:00:58,000
complete one service and for this a

26
00:00:58,000 --> 00:00:59,840
billing service we have some security

27
00:00:59,840 --> 00:01:00,879
policies

28
00:01:00,879 --> 00:01:02,160
the users

29
00:01:02,160 --> 00:01:04,319
of the patients may want to want his

30
00:01:04,319 --> 00:01:06,640
medical record to become confidential so

31
00:01:06,640 --> 00:01:09,840
that it can only be accessed by the

32
00:01:09,840 --> 00:01:11,680
it cannot be accepted by the insurance

33
00:01:11,680 --> 00:01:12,479
company

34
00:01:12,479 --> 00:01:14,320
and similarly for integrity and

35
00:01:14,320 --> 00:01:16,159
availability we have some requirements

36
00:01:16,159 --> 00:01:18,080
too we want this service to have

37
00:01:18,080 --> 00:01:20,320
integrity and states available even if

38
00:01:20,320 --> 00:01:22,159
there are failures for the servers and

39
00:01:22,159 --> 00:01:23,759
malicious attacks

40
00:01:23,759 --> 00:01:25,119
so how can we

41
00:01:25,119 --> 00:01:28,080
support all these security policies

42
00:01:28,080 --> 00:01:30,320
some existing work including fabric are

43
00:01:30,320 --> 00:01:32,560
using information flow control to

44
00:01:32,560 --> 00:01:35,200
support confidentiality and integrity

45
00:01:35,200 --> 00:01:36,799
but however they do not support

46
00:01:36,799 --> 00:01:39,439
availability other works including keep

47
00:01:39,439 --> 00:01:42,720
are using a byzantine quorum replication

48
00:01:42,720 --> 00:01:45,040
but those quorums need to be inputted by

49
00:01:45,040 --> 00:01:47,520
the user instead of generated in the

50
00:01:47,520 --> 00:01:50,640
context of the related work we support

51
00:01:50,640 --> 00:01:52,399
all the three mentioned security

52
00:01:52,399 --> 00:01:54,640
policies and we are in the heterogeneous

53
00:01:54,640 --> 00:01:56,320
host setting

54
00:01:56,320 --> 00:01:58,240
we are the first ones that automatically

55
00:01:58,240 --> 00:01:59,680
partition in the

56
00:01:59,680 --> 00:02:02,000
methods and objects and we see this as a

57
00:02:02,000 --> 00:02:05,360
resilient distributed system

58
00:02:05,360 --> 00:02:07,439
we want the programmers to input a

59
00:02:07,439 --> 00:02:09,038
sequential

60
00:02:09,038 --> 00:02:11,200
sequential program for service and they

61
00:02:11,200 --> 00:02:13,840
can define their end-to-end policies for

62
00:02:13,840 --> 00:02:15,760
confidentiality integrity and

63
00:02:15,760 --> 00:02:18,400
availability as type annotations the

64
00:02:18,400 --> 00:02:20,319
output should be a distributed system

65
00:02:20,319 --> 00:02:22,800
that guarantees all those properties in

66
00:02:22,800 --> 00:02:25,280
the face of byzantine attacks we propose

67
00:02:25,280 --> 00:02:27,360
a synthesizer hemorrhoids that

68
00:02:27,360 --> 00:02:29,200
automatically partitions

69
00:02:29,200 --> 00:02:31,040
and replicates the

70
00:02:31,040 --> 00:02:33,840
objects and methods

71
00:02:33,840 --> 00:02:35,599
so the first question is how can we

72
00:02:35,599 --> 00:02:37,840
capture the sequential program and then

73
00:02:37,840 --> 00:02:40,720
the security policy for this system we

74
00:02:40,720 --> 00:02:42,959
propose a security type language and

75
00:02:42,959 --> 00:02:45,840
lattices of trustworthiness types

76
00:02:45,840 --> 00:02:48,000
let's start with an example so here we

77
00:02:48,000 --> 00:02:50,560
have three parties principle a stores a

78
00:02:50,560 --> 00:02:52,400
value on regis r1

79
00:02:52,400 --> 00:02:54,560
principle b stores a value on register

80
00:02:54,560 --> 00:02:57,120
r2 and also we have a client p0 wants to

81
00:02:57,120 --> 00:02:59,519
access one of the value and access it

82
00:02:59,519 --> 00:03:01,200
only once

83
00:03:01,200 --> 00:03:04,159
so here we define a one-time transfer

84
00:03:04,159 --> 00:03:05,120
method

85
00:03:05,120 --> 00:03:07,040
this is a centralized definition without

86
00:03:07,040 --> 00:03:08,959
any distribution details it first

87
00:03:08,959 --> 00:03:12,159
defines two field objects r1 and r2

88
00:03:12,159 --> 00:03:14,319
and next it defines address r to store

89
00:03:14,319 --> 00:03:16,080
whether the client has already read or

90
00:03:16,080 --> 00:03:18,800
not so for this transfer it will take in

91
00:03:18,800 --> 00:03:21,040
a parameter a boolean parameter to

92
00:03:21,040 --> 00:03:23,040
indicating the client's choice

93
00:03:23,040 --> 00:03:25,280
if the client has already read this

94
00:03:25,280 --> 00:03:28,239
method will simply return 0. if not it

95
00:03:28,239 --> 00:03:29,680
will store

96
00:03:29,680 --> 00:03:32,159
this regis r to be true to indicating

97
00:03:32,159 --> 00:03:34,480
that the client is reading

98
00:03:34,480 --> 00:03:36,560
and then it can return as r1 or our

99
00:03:36,560 --> 00:03:39,440
truth value based on the client's choice

100
00:03:39,440 --> 00:03:41,680
so for principle a and principle b they

101
00:03:41,680 --> 00:03:44,400
can have several servers these servers

102
00:03:44,400 --> 00:03:46,159
can be byzantine which means they can

103
00:03:46,159 --> 00:03:49,280
perform arbitrary behaviors

104
00:03:49,280 --> 00:03:51,680
here the attack the small b is a text

105
00:03:51,680 --> 00:03:54,159
scenario that includes byzantine

106
00:03:54,159 --> 00:03:57,519
principle a1 a5 and b2

107
00:03:57,519 --> 00:03:59,599
and this is another attack scenario in

108
00:03:59,599 --> 00:04:01,599
this attack scenario we have byzantine

109
00:04:01,599 --> 00:04:05,200
principles a2 a6 and b3

110
00:04:05,200 --> 00:04:07,280
and then we can capture those

111
00:04:07,280 --> 00:04:09,599
attack scenarios inside a resilient type

112
00:04:09,599 --> 00:04:13,120
capital b this capital b is a set of

113
00:04:13,120 --> 00:04:14,720
attack scenarios that we want to be

114
00:04:14,720 --> 00:04:16,720
resilient against

115
00:04:16,720 --> 00:04:18,238
and we can also use this concept

116
00:04:18,238 --> 00:04:20,798
notation to represent any set of 2a and

117
00:04:20,798 --> 00:04:23,680
1b byzantine principles

118
00:04:23,680 --> 00:04:25,840
so for this one-time transfer we have we

119
00:04:25,840 --> 00:04:28,080
defined some security policies for it

120
00:04:28,080 --> 00:04:31,120
for this r1 we only want the principle a

121
00:04:31,120 --> 00:04:33,440
and the client p0 access it and

122
00:04:33,440 --> 00:04:36,320
similarly for r2 we want the set b and

123
00:04:36,320 --> 00:04:39,440
p0 to access it and we also define

124
00:04:39,440 --> 00:04:42,000
security policies for the return type of

125
00:04:42,000 --> 00:04:43,280
this method

126
00:04:43,280 --> 00:04:45,120
for the return it should be confidential

127
00:04:45,120 --> 00:04:47,600
and only the client can read it

128
00:04:47,600 --> 00:04:49,759
and they should have the return value

129
00:04:49,759 --> 00:04:52,240
should have integrity even if 2a and 1b

130
00:04:52,240 --> 00:04:54,080
principles are byzantine and stays

131
00:04:54,080 --> 00:04:56,800
available even if 1a and 1b

132
00:04:56,800 --> 00:05:00,080
principles are byzantine

133
00:05:00,160 --> 00:05:02,720
so as we saw in the example we defined

134
00:05:02,720 --> 00:05:05,199
the trustworthiness tab as a triple

135
00:05:05,199 --> 00:05:07,919
which includes confidentiality integrity

136
00:05:07,919 --> 00:05:10,160
and availability each of them is

137
00:05:10,160 --> 00:05:12,360
represented as a lattice for

138
00:05:12,360 --> 00:05:14,880
confidentiality it's a set of nodes that

139
00:05:14,880 --> 00:05:16,160
are trusted

140
00:05:16,160 --> 00:05:19,280
for integrity and availability they are

141
00:05:19,280 --> 00:05:21,840
a set of sets which is the resiliency

142
00:05:21,840 --> 00:05:25,479
type we just defined

143
00:05:25,600 --> 00:05:27,280
the next question is how can we

144
00:05:27,280 --> 00:05:28,479
partition

145
00:05:28,479 --> 00:05:30,320
how can we partition the sequential

146
00:05:30,320 --> 00:05:31,919
program we

147
00:05:31,919 --> 00:05:33,919
we perform a program partitioning

148
00:05:33,919 --> 00:05:37,280
technique in two steps

149
00:05:37,280 --> 00:05:38,720
so uh

150
00:05:38,720 --> 00:05:41,600
since we we see in the security policy

151
00:05:41,600 --> 00:05:44,479
from user the client p0 can access both

152
00:05:44,479 --> 00:05:46,960
r1 and r2 then the question is why don't

153
00:05:46,960 --> 00:05:49,199
we just host the whole message and all

154
00:05:49,199 --> 00:05:52,560
the objects on the client p0 because in

155
00:05:52,560 --> 00:05:55,680
that sense if the client is attacked

156
00:05:55,680 --> 00:05:57,840
and is only one replica we do not

157
00:05:57,840 --> 00:06:00,560
provide any integrity or availability

158
00:06:00,560 --> 00:06:03,680
for this whole message

159
00:06:03,759 --> 00:06:06,080
so we split uh the programs into

160
00:06:06,080 --> 00:06:08,080
different partitions so that this r1

161
00:06:08,080 --> 00:06:11,520
read and r2 read are replicated on

162
00:06:11,520 --> 00:06:13,360
our par are replicated on different

163
00:06:13,360 --> 00:06:15,840
methods m1 and m2 as shown in this

164
00:06:15,840 --> 00:06:18,000
partition

165
00:06:18,000 --> 00:06:19,680
we perform this

166
00:06:19,680 --> 00:06:21,280
we perform this partitioning in two

167
00:06:21,280 --> 00:06:23,360
steps the first the first step is the

168
00:06:23,360 --> 00:06:26,160
cps transformation so from the left hand

169
00:06:26,160 --> 00:06:29,120
side to the middle we factor the program

170
00:06:29,120 --> 00:06:31,360
so that all the object message calls are

171
00:06:31,360 --> 00:06:33,840
explicit call expressions here and they

172
00:06:33,840 --> 00:06:36,240
are at the top of the branches

173
00:06:36,240 --> 00:06:38,160
and next we perform a partitioning

174
00:06:38,160 --> 00:06:39,520
transformation

175
00:06:39,520 --> 00:06:42,240
to allow maximum flexibility we enforce

176
00:06:42,240 --> 00:06:44,639
that each partition calls at most one

177
00:06:44,639 --> 00:06:48,360
object massive call

178
00:06:48,400 --> 00:06:50,639
now with the splitted method the next

179
00:06:50,639 --> 00:06:52,800
question is how can we infer the

180
00:06:52,800 --> 00:06:54,880
placement and the replication for those

181
00:06:54,880 --> 00:06:57,360
objects and the splitting methods we use

182
00:06:57,360 --> 00:06:59,280
a information flow type inference system

183
00:06:59,280 --> 00:07:02,400
to achieve that goal

184
00:07:02,400 --> 00:07:04,319
so imagine that we are placing a method

185
00:07:04,319 --> 00:07:06,720
m on this first replica and when should

186
00:07:06,720 --> 00:07:09,199
we execute this method m it shouldn't be

187
00:07:09,199 --> 00:07:11,599
the time when a byzantine server asks us

188
00:07:11,599 --> 00:07:13,840
to do so because in that case we do not

189
00:07:13,840 --> 00:07:17,759
have any integrity for this parameter

190
00:07:17,759 --> 00:07:20,160
so if we want to be resilient against

191
00:07:20,160 --> 00:07:21,919
two byzantine principles we need to

192
00:07:21,919 --> 00:07:23,919
replicate we need to receive the call

193
00:07:23,919 --> 00:07:26,240
request from at least three principles

194
00:07:26,240 --> 00:07:28,400
so that there is a correct one

195
00:07:28,400 --> 00:07:30,560
and that can be any set of three

196
00:07:30,560 --> 00:07:33,280
principles so from from that we get a

197
00:07:33,280 --> 00:07:35,440
set of quorums which is a communication

198
00:07:35,440 --> 00:07:37,120
quantum system

199
00:07:37,120 --> 00:07:39,360
and then the next question is how much

200
00:07:39,360 --> 00:07:42,240
should we replicate this method m

201
00:07:42,240 --> 00:07:45,280
if we just host it on one replica which

202
00:07:45,280 --> 00:07:47,599
is this first replica and that one can

203
00:07:47,599 --> 00:07:50,160
be a byzantine and if this method is

204
00:07:50,160 --> 00:07:52,240
calling a subsequent method that call

205
00:07:52,240 --> 00:07:54,400
may not happen so let's assume that the

206
00:07:54,400 --> 00:07:56,400
next message requires a three call

207
00:07:56,400 --> 00:07:59,199
request to execute and we want to stay

208
00:07:59,199 --> 00:08:01,680
available even if two principles are

209
00:08:01,680 --> 00:08:04,240
byzantine then we need to replicate this

210
00:08:04,240 --> 00:08:06,720
method at least five times so there are

211
00:08:06,720 --> 00:08:08,800
three correct principles actually

212
00:08:08,800 --> 00:08:10,400
sending this call request for the

213
00:08:10,400 --> 00:08:13,599
following message from that we get a set

214
00:08:13,599 --> 00:08:15,599
of holes

215
00:08:15,599 --> 00:08:18,000
we have those two components for a field

216
00:08:18,000 --> 00:08:19,919
object and additionally we have a

217
00:08:19,919 --> 00:08:21,680
storage quorum system

218
00:08:21,680 --> 00:08:24,160
so with two with two byzantine

219
00:08:24,160 --> 00:08:26,879
principles if we write to and read from

220
00:08:26,879 --> 00:08:28,960
three principles then the intersection

221
00:08:28,960 --> 00:08:31,120
can be byzantine and we do not have any

222
00:08:31,120 --> 00:08:33,279
integrity for that

223
00:08:33,279 --> 00:08:35,519
so we need to write to and read from at

224
00:08:35,519 --> 00:08:37,200
least five principles so that the

225
00:08:37,200 --> 00:08:39,039
intersection contains at least one

226
00:08:39,039 --> 00:08:41,360
correct node

227
00:08:41,360 --> 00:08:44,000
any set of five principles will be a

228
00:08:44,000 --> 00:08:46,240
storage quorum system for this

229
00:08:46,240 --> 00:08:47,839
field object

230
00:08:47,839 --> 00:08:50,160
so for a field object we're going to

231
00:08:50,160 --> 00:08:52,560
have a set of host h a storage column

232
00:08:52,560 --> 00:08:55,200
system qs that that is to store this

233
00:08:55,200 --> 00:08:57,360
field object and the communication

234
00:08:57,360 --> 00:08:59,360
column system qc to receive the call

235
00:08:59,360 --> 00:09:01,760
request from

236
00:09:01,760 --> 00:09:03,760
now let us see how can we change this

237
00:09:03,760 --> 00:09:05,519
partition method through the quorum

238
00:09:05,519 --> 00:09:06,560
systems

239
00:09:06,560 --> 00:09:09,519
so here are our partition masses here

240
00:09:09,519 --> 00:09:13,519
this method m3 is calling m1

241
00:09:13,519 --> 00:09:17,440
and we assume that m3 is hosted um b2 to

242
00:09:17,440 --> 00:09:21,040
b4 and m1 is hosted hosted on a2 to a5

243
00:09:21,040 --> 00:09:23,040
and we assume that

244
00:09:23,040 --> 00:09:27,680
a1 and b2 are byzantine principles here

245
00:09:27,680 --> 00:09:29,440
so here we see that the communication

246
00:09:29,440 --> 00:09:32,399
quorum system for m1 includes any set of

247
00:09:32,399 --> 00:09:33,680
two b nodes

248
00:09:33,680 --> 00:09:36,640
here we have two correct principles

249
00:09:36,640 --> 00:09:38,880
are hosting this m3 so they will send

250
00:09:38,880 --> 00:09:41,200
the call request to m1 and one will

251
00:09:41,200 --> 00:09:44,080
receive this two correct call request

252
00:09:44,080 --> 00:09:46,480
and then execute

253
00:09:46,480 --> 00:09:48,399
then the next step is for this m1 to

254
00:09:48,399 --> 00:09:50,480
calling response to return the value to

255
00:09:50,480 --> 00:09:52,240
the user

256
00:09:52,240 --> 00:09:54,240
here the three correct principles is

257
00:09:54,240 --> 00:09:55,920
enough for the communication quorum

258
00:09:55,920 --> 00:09:59,200
system for response so response will

259
00:09:59,200 --> 00:10:01,519
accept those call requests and then

260
00:10:01,519 --> 00:10:04,519
return

261
00:10:04,640 --> 00:10:07,920
so previously we are assuming that we've

262
00:10:07,920 --> 00:10:09,600
already got the replication and

263
00:10:09,600 --> 00:10:11,839
placement for all the objects and the

264
00:10:11,839 --> 00:10:14,240
masses but how can we automatically

265
00:10:14,240 --> 00:10:15,600
infer them

266
00:10:15,600 --> 00:10:18,000
from our previous step we've already got

267
00:10:18,000 --> 00:10:20,480
the user's security policies as

268
00:10:20,480 --> 00:10:23,200
trustworthiness tabs and we will display

269
00:10:23,200 --> 00:10:26,160
the methods now we want to infer

270
00:10:26,160 --> 00:10:28,720
the types of each expression inside this

271
00:10:28,720 --> 00:10:31,440
sequential program so that we can get

272
00:10:31,440 --> 00:10:33,440
the proper placement and minimize the

273
00:10:33,440 --> 00:10:35,200
replication

274
00:10:35,200 --> 00:10:37,519
we define a security we define a

275
00:10:37,519 --> 00:10:39,440
information flow type inference system

276
00:10:39,440 --> 00:10:41,600
for that so we will get the constraints

277
00:10:41,600 --> 00:10:43,920
for the types type variables placements

278
00:10:43,920 --> 00:10:46,320
and replications and this type inference

279
00:10:46,320 --> 00:10:49,360
system will respect users policies

280
00:10:49,360 --> 00:10:51,920
let's see one rule for example this rule

281
00:10:51,920 --> 00:10:53,600
we are type checking that the

282
00:10:53,600 --> 00:10:55,920
information flow for a method called m

283
00:10:55,920 --> 00:10:57,440
is proper

284
00:10:57,440 --> 00:11:00,000
so we we will focus on the availability

285
00:11:00,000 --> 00:11:00,880
check

286
00:11:00,880 --> 00:11:03,680
here this rule first retrieves the type

287
00:11:03,680 --> 00:11:06,000
of this method m and we can see that the

288
00:11:06,000 --> 00:11:07,839
parameter tab is tau one and the

289
00:11:07,839 --> 00:11:10,079
availability component of this tau one

290
00:11:10,079 --> 00:11:12,320
is a1 and it next retrieves the

291
00:11:12,320 --> 00:11:14,800
communication quorum as q

292
00:11:14,800 --> 00:11:16,240
finally we check that if the

293
00:11:16,240 --> 00:11:18,880
communication quorums are restricted to

294
00:11:18,880 --> 00:11:21,519
the current host h then it provides more

295
00:11:21,519 --> 00:11:24,720
availability than required which is a1

296
00:11:24,720 --> 00:11:27,680
so this is the example we see before for

297
00:11:27,680 --> 00:11:30,240
this response is communication quorum

298
00:11:30,240 --> 00:11:32,959
includes any set of three a or two b

299
00:11:32,959 --> 00:11:35,760
nodes and here we are replicating this

300
00:11:35,760 --> 00:11:39,040
and one on four principles and if we're

301
00:11:39,040 --> 00:11:41,680
excluding the byzantine ones as required

302
00:11:41,680 --> 00:11:44,160
which is indicating as this a here it's

303
00:11:44,160 --> 00:11:47,279
any set of one a and one b nodes then we

304
00:11:47,279 --> 00:11:48,800
still get three

305
00:11:48,800 --> 00:11:51,360
uh three principles we'll send this call

306
00:11:51,360 --> 00:11:53,200
request for the response

307
00:11:53,200 --> 00:11:55,519
so that is enough for the response to

308
00:11:55,519 --> 00:11:57,839
execute

309
00:11:58,160 --> 00:11:59,519
now that we've already collected

310
00:11:59,519 --> 00:12:01,839
constraints the next step is to actually

311
00:12:01,839 --> 00:12:04,079
solve the countries in order to do that

312
00:12:04,079 --> 00:12:05,360
we translate

313
00:12:05,360 --> 00:12:07,440
our constraints to the theory of linear

314
00:12:07,440 --> 00:12:09,920
arithmetic so here we are going to see

315
00:12:09,920 --> 00:12:12,959
an example uh how can we represent qualm

316
00:12:12,959 --> 00:12:15,360
systems and resiliency tabs

317
00:12:15,360 --> 00:12:18,240
we trans this this is uh

318
00:12:18,240 --> 00:12:21,600
this 2a and 1b principles is what we

319
00:12:21,600 --> 00:12:23,920
just saw we can translate that to a

320
00:12:23,920 --> 00:12:25,120
tuple in

321
00:12:25,120 --> 00:12:27,519
a couple of integers we translate that

322
00:12:27,519 --> 00:12:30,560
to a top of two and zero and if we union

323
00:12:30,560 --> 00:12:32,880
them together they can wrap they can

324
00:12:32,880 --> 00:12:34,399
represent the quorum systems and

325
00:12:34,399 --> 00:12:36,800
resiliency types

326
00:12:36,800 --> 00:12:39,440
so we will see uh one constraint based

327
00:12:39,440 --> 00:12:41,279
on this representation in this

328
00:12:41,279 --> 00:12:42,800
constraint we are checking that the

329
00:12:42,800 --> 00:12:45,519
communication quorum q is more than the

330
00:12:45,519 --> 00:12:48,240
resiliency type b that means any column

331
00:12:48,240 --> 00:12:50,000
inside this queue

332
00:12:50,000 --> 00:12:52,639
is not contained in any attack scenarios

333
00:12:52,639 --> 00:12:54,480
inside this b

334
00:12:54,480 --> 00:12:56,959
so we translate that in this uh form in

335
00:12:56,959 --> 00:12:58,880
the right hand side we're checking that

336
00:12:58,880 --> 00:13:02,000
any type hole inside any type of i is a

337
00:13:02,000 --> 00:13:04,639
q any tuple i prime instead b for at

338
00:13:04,639 --> 00:13:07,040
least one principle domain we have that

339
00:13:07,040 --> 00:13:11,120
q i j is larger than the b i prime j

340
00:13:11,120 --> 00:13:13,040
so we formally prove that our type

341
00:13:13,040 --> 00:13:15,040
system guarantees nine interference and

342
00:13:15,040 --> 00:13:17,360
resiliency properties first of all we

343
00:13:17,360 --> 00:13:19,120
prove that while type methods are not

344
00:13:19,120 --> 00:13:21,440
interfered by changing the states of

345
00:13:21,440 --> 00:13:23,519
objects with higher confidentiality

346
00:13:23,519 --> 00:13:26,480
lower integrity and availability next we

347
00:13:26,480 --> 00:13:28,160
prove that

348
00:13:28,160 --> 00:13:30,959
our type system is resilient to attacks

349
00:13:30,959 --> 00:13:32,839
of

350
00:13:32,839 --> 00:13:35,360
subtypes the final step is to

351
00:13:35,360 --> 00:13:37,360
instantiate and assemble the protocols

352
00:13:37,360 --> 00:13:38,240
and

353
00:13:38,240 --> 00:13:40,959
and write in a right

354
00:13:40,959 --> 00:13:43,279
in a distributed system

355
00:13:43,279 --> 00:13:45,440
we run our experiments with six small

356
00:13:45,440 --> 00:13:48,000
use cases on cluster of nodes in this

357
00:13:48,000 --> 00:13:49,600
tip it will show that hemorrhoids can

358
00:13:49,600 --> 00:13:52,079
synthesize resilient distributed system

359
00:13:52,079 --> 00:13:54,320
in order of minutes which is a

360
00:13:54,320 --> 00:13:57,440
reasonable time for static analysis

361
00:13:57,440 --> 00:14:00,320
in this experiment we are fixing the

362
00:14:00,320 --> 00:14:02,639
resiliency specification and we increase

363
00:14:02,639 --> 00:14:05,440
the byzantine faults up to their policy

364
00:14:05,440 --> 00:14:07,360
and we show that the synthesis system

365
00:14:07,360 --> 00:14:09,920
can gracefully tolerate the byzantine

366
00:14:09,920 --> 00:14:11,120
attacks

367
00:14:11,120 --> 00:14:12,399
and they stay

368
00:14:12,399 --> 00:14:15,440
and this whole system stays responsive

369
00:14:15,440 --> 00:14:18,320
in the last experiments we are

370
00:14:18,320 --> 00:14:20,320
we are fixing the attacks and increasing

371
00:14:20,320 --> 00:14:22,720
the resiliency specifications we show

372
00:14:22,720 --> 00:14:24,959
that the synthesis our synthesizer can

373
00:14:24,959 --> 00:14:26,800
scale and adjust replication

374
00:14:26,800 --> 00:14:28,560
proportionally to the strings of the

375
00:14:28,560 --> 00:14:30,399
policies

376
00:14:30,399 --> 00:14:33,440
so in summaries we want a program able

377
00:14:33,440 --> 00:14:36,639
to input a sequential program and their

378
00:14:36,639 --> 00:14:38,959
security policies for this

379
00:14:38,959 --> 00:14:41,360
program and we can output a distributed

380
00:14:41,360 --> 00:14:43,440
system that guarantees these policies in

381
00:14:43,440 --> 00:14:45,680
the face of byzantine attacks in order

382
00:14:45,680 --> 00:14:47,920
to achieve that we are using a we define

383
00:14:47,920 --> 00:14:49,839
a security type language and type

384
00:14:49,839 --> 00:14:52,639
lattices a partitioning transformation a

385
00:14:52,639 --> 00:14:54,639
type inferences system to guarantee the

386
00:14:54,639 --> 00:14:57,839
non-interference property and lastly a

387
00:14:57,839 --> 00:14:59,600
constraint solving technique to infer

388
00:14:59,600 --> 00:15:02,160
the placement and replication

389
00:15:02,160 --> 00:15:04,480
thank you

390
00:15:04,480 --> 00:15:06,320
all right great thanks for the wonderful

391
00:15:06,320 --> 00:15:07,600
work

392
00:15:07,600 --> 00:15:09,600
if you have any question

393
00:15:09,600 --> 00:15:13,160
please use the microphone

394
00:15:16,000 --> 00:15:17,440
uh first of all thank you this is really

395
00:15:17,440 --> 00:15:19,040
cool i hadn't thought of using type

396
00:15:19,040 --> 00:15:20,880
systems to try to model availability

397
00:15:20,880 --> 00:15:22,800
it's really neat that this is what

398
00:15:22,800 --> 00:15:24,560
happens when you do that i'm curious

399
00:15:24,560 --> 00:15:26,560
whether or not you think this approach

400
00:15:26,560 --> 00:15:28,720
would would be able to generalize to

401
00:15:28,720 --> 00:15:31,519
settings in which um the compromised

402
00:15:31,519 --> 00:15:33,519
servers are adaptive um so this sort of

403
00:15:33,519 --> 00:15:35,279
some adversary that can compromise one

404
00:15:35,279 --> 00:15:37,040
server and then and then decompromise it

405
00:15:37,040 --> 00:15:40,920
and later compromise another

406
00:15:40,959 --> 00:15:42,800
i'm not sure i get your question so you

407
00:15:42,800 --> 00:15:44,480
are asking about the threat model that

408
00:15:44,480 --> 00:15:46,720
the server uh that are compromised one

409
00:15:46,720 --> 00:15:49,040
by one or they can like uh

410
00:15:49,040 --> 00:15:51,440
collaborate to do some uh malicious

411
00:15:51,440 --> 00:15:52,480
attack

412
00:15:52,480 --> 00:15:53,680
yeah yeah they can they can be

413
00:15:53,680 --> 00:15:55,360
dynamically compromised and then

414
00:15:55,360 --> 00:15:56,959
uncompromised and you just have like

415
00:15:56,959 --> 00:15:59,360
some bound on the total number okay so

416
00:15:59,360 --> 00:16:01,519
for that i think uh currently our system

417
00:16:01,519 --> 00:16:03,759
is assuming that if if you are a

418
00:16:03,759 --> 00:16:05,440
byzantine server then you are

419
00:16:05,440 --> 00:16:07,040
compromised at the beginning of the

420
00:16:07,040 --> 00:16:10,079
execution so if you want to really

421
00:16:10,079 --> 00:16:11,839
capture the byzantine behavior of the

422
00:16:11,839 --> 00:16:14,320
system uh at runtime i don't think there

423
00:16:14,320 --> 00:16:16,560
is a failure detector to do that so you

424
00:16:16,560 --> 00:16:18,880
have to like set a bound for it okay

425
00:16:18,880 --> 00:16:21,040
cool thank you

426
00:16:21,040 --> 00:16:23,440
all right we still have one we still

427
00:16:23,440 --> 00:16:26,880
have two minutes any other question

428
00:16:27,199 --> 00:16:29,040
maybe i'll ask of it

429
00:16:29,040 --> 00:16:31,040
so yeah this is a very interesting work

430
00:16:31,040 --> 00:16:33,440
do you can you share any information

431
00:16:33,440 --> 00:16:36,959
about any future work around this road

432
00:16:36,959 --> 00:16:39,440
yes so for this information flow control

433
00:16:39,440 --> 00:16:41,839
technique it's kind of uh conservative

434
00:16:41,839 --> 00:16:43,040
for

435
00:16:43,040 --> 00:16:45,040
the real world system so i think our

436
00:16:45,040 --> 00:16:47,040
next work will include some

437
00:16:47,040 --> 00:16:48,959
declassification or endorsement

438
00:16:48,959 --> 00:16:51,360
technique to make this a system more

439
00:16:51,360 --> 00:16:54,079
flexible and maybe we can extend to use

440
00:16:54,079 --> 00:16:55,199
that on

441
00:16:55,199 --> 00:16:56,000
like

442
00:16:56,000 --> 00:16:57,360
the object-based

443
00:16:57,360 --> 00:17:00,079
languages like java and c-plus plus yeah

444
00:17:00,079 --> 00:17:02,079
that's our ultimate goal

445
00:17:02,079 --> 00:17:03,680
all right great wonderful let's thank

446
00:17:03,680 --> 00:17:05,550
the speaker again

447
00:17:05,550 --> 00:17:07,819
[Applause]

