1
00:00:01,199 --> 00:00:02,480
all right

2
00:00:02,480 --> 00:00:04,640
uh thanks for the kind introduction

3
00:00:04,640 --> 00:00:06,319
let's get this rolling

4
00:00:06,319 --> 00:00:07,120
um

5
00:00:07,120 --> 00:00:09,360
yeah this work that i'm gonna present is

6
00:00:09,360 --> 00:00:11,679
uh joint work together with my

7
00:00:11,679 --> 00:00:13,920
colleagues from the max planck institute

8
00:00:13,920 --> 00:00:16,400
and the war university both both being

9
00:00:16,400 --> 00:00:18,160
in bochum germany

10
00:00:18,160 --> 00:00:20,400
and it's going to be about the ieee

11
00:00:20,400 --> 00:00:22,880
standard 1735 for hardwired ip

12
00:00:22,880 --> 00:00:24,160
protection

13
00:00:24,160 --> 00:00:26,000
so just to give you some background i

14
00:00:26,000 --> 00:00:28,560
guess most of you will already know

15
00:00:28,560 --> 00:00:29,439
but

16
00:00:29,439 --> 00:00:31,359
modern chips are like increasingly

17
00:00:31,359 --> 00:00:33,040
realized a system so called system on

18
00:00:33,040 --> 00:00:33,920
chips

19
00:00:33,920 --> 00:00:36,320
that means that you have such a sock

20
00:00:36,320 --> 00:00:38,000
that consists of

21
00:00:38,000 --> 00:00:39,520
dozens or even hundreds of different

22
00:00:39,520 --> 00:00:41,120
functional modules and those functional

23
00:00:41,120 --> 00:00:44,239
modules are indeed called ip cores you

24
00:00:44,239 --> 00:00:45,680
can see an example on the right side

25
00:00:45,680 --> 00:00:48,480
like a sketched example

26
00:00:48,480 --> 00:00:50,879
with a cpu some crypto accelerator

27
00:00:50,879 --> 00:00:52,480
machine learning accelerator so

28
00:00:52,480 --> 00:00:54,480
different functional components on one

29
00:00:54,480 --> 00:00:56,079
chip

30
00:00:56,079 --> 00:00:57,920
and due to the increasing complexity and

31
00:00:57,920 --> 00:01:00,879
the time to market pressure um

32
00:01:00,879 --> 00:01:02,800
we uh like

33
00:01:02,800 --> 00:01:04,959
design houses hardware design hoses are

34
00:01:04,959 --> 00:01:07,600
required to often resort to well-proven

35
00:01:07,600 --> 00:01:09,920
third-party ips supplied by some other

36
00:01:09,920 --> 00:01:12,479
ip ip author ipvendor

37
00:01:12,479 --> 00:01:14,320
all right and of course if you use third

38
00:01:14,320 --> 00:01:16,080
party ip there is some security

39
00:01:16,080 --> 00:01:18,400
challenges that arise with that

40
00:01:18,400 --> 00:01:19,759
the first one of course being that the

41
00:01:19,759 --> 00:01:22,400
ip author so the guy who made the ip

42
00:01:22,400 --> 00:01:23,280
actually

43
00:01:23,280 --> 00:01:25,200
wants to prevent infringement of the ip

44
00:01:25,200 --> 00:01:27,040
or even its licenses

45
00:01:27,040 --> 00:01:29,119
second being that the user so the person

46
00:01:29,119 --> 00:01:30,079
who

47
00:01:30,079 --> 00:01:32,240
takes eip and incorporates it into their

48
00:01:32,240 --> 00:01:34,000
design

49
00:01:34,000 --> 00:01:35,520
needs some kind of assurances on the

50
00:01:35,520 --> 00:01:36,720
absence of hardware trojans or

51
00:01:36,720 --> 00:01:39,119
manipulations

52
00:01:39,119 --> 00:01:41,600
and of course the tools that operate

53
00:01:41,600 --> 00:01:44,720
with the ip that work on vip

54
00:01:44,720 --> 00:01:48,240
at the ip user's workstation for example

55
00:01:48,240 --> 00:01:50,880
you take like vip core and you need to

56
00:01:50,880 --> 00:01:51,920
be able to

57
00:01:51,920 --> 00:01:53,520
integrate it into your design so the

58
00:01:53,520 --> 00:01:55,280
tools need to be able to work with the

59
00:01:55,280 --> 00:01:57,439
with the ip that you get out of the box

60
00:01:57,439 --> 00:01:59,680
um operate on the plain text for for

61
00:01:59,680 --> 00:02:02,880
example for synthesis implementation

62
00:02:02,880 --> 00:02:05,040
simulation whatever

63
00:02:05,040 --> 00:02:06,960
and this is the exact reason why ieee

64
00:02:06,960 --> 00:02:09,919
1735 was established

65
00:02:09,919 --> 00:02:11,440
in some words on the standard it's a

66
00:02:11,440 --> 00:02:13,280
kind of an industry's industry-wide

67
00:02:13,280 --> 00:02:14,400
standard

68
00:02:14,400 --> 00:02:16,480
and it introduces a common format for

69
00:02:16,480 --> 00:02:19,840
asic and fpga fpga ip

70
00:02:19,840 --> 00:02:22,160
to ensure inter operability between

71
00:02:22,160 --> 00:02:24,080
different design tools

72
00:02:24,080 --> 00:02:26,080
um it's some kind of a transport

73
00:02:26,080 --> 00:02:27,920
encryption so the

74
00:02:27,920 --> 00:02:30,879
ip is encrypted by the ip author so

75
00:02:30,879 --> 00:02:33,920
the people the guy that created the ip

76
00:02:33,920 --> 00:02:36,160
and is then sent over to the user of the

77
00:02:36,160 --> 00:02:38,879
ip uh who then loads it into the into

78
00:02:38,879 --> 00:02:40,560
the design tool and the design tool

79
00:02:40,560 --> 00:02:42,800
moves on to decrypt the ip

80
00:02:42,800 --> 00:02:44,959
um within memory

81
00:02:44,959 --> 00:02:46,959
and as i said it's industry-wide so it's

82
00:02:46,959 --> 00:02:49,200
implemented by all major tool providers

83
00:02:49,200 --> 00:02:51,680
for example synopsis cadence siemens

84
00:02:51,680 --> 00:02:54,959
intel xilinx and many more

85
00:02:55,200 --> 00:02:57,040
and our contributions in our paper are

86
00:02:57,040 --> 00:02:59,120
threefold the first one or at first we

87
00:02:59,120 --> 00:03:01,840
discussed the insecurity of ieee 1735

88
00:03:01,840 --> 00:03:03,840
which i'll do in a second

89
00:03:03,840 --> 00:03:05,760
then we present six case studies on

90
00:03:05,760 --> 00:03:07,360
implementations from intel xilinx

91
00:03:07,360 --> 00:03:10,560
cadence siemens lattice and microchip

92
00:03:10,560 --> 00:03:12,959
um that all lead to a full break of the

93
00:03:12,959 --> 00:03:14,720
confidentiality and integrity of the

94
00:03:14,720 --> 00:03:16,319
protected ip

95
00:03:16,319 --> 00:03:17,280
and

96
00:03:17,280 --> 00:03:19,120
in the process of doing like the case

97
00:03:19,120 --> 00:03:21,280
studies we stumbled upon three white box

98
00:03:21,280 --> 00:03:23,120
rsa white box schemes and if you don't

99
00:03:23,120 --> 00:03:25,040
know what an rsa white box is yet uh

100
00:03:25,040 --> 00:03:26,400
you'll find out in like five to ten

101
00:03:26,400 --> 00:03:27,280
minutes

102
00:03:27,280 --> 00:03:29,360
um but we successfully attacked those

103
00:03:29,360 --> 00:03:31,680
white boxes and we're able to like break

104
00:03:31,680 --> 00:03:32,959
them

105
00:03:32,959 --> 00:03:34,080
all right

106
00:03:34,080 --> 00:03:35,680
some words on the encryption and

107
00:03:35,680 --> 00:03:38,799
decryption of ieee 1735

108
00:03:38,799 --> 00:03:40,720
the encryption as i said is performed by

109
00:03:40,720 --> 00:03:42,560
the ipvendor by the author of the ip

110
00:03:42,560 --> 00:03:44,159
core

111
00:03:44,159 --> 00:03:46,799
so we have the vendor um the vendor

112
00:03:46,799 --> 00:03:48,879
creates some some ipcor

113
00:03:48,879 --> 00:03:52,319
and uh generates an aes session key

114
00:03:52,319 --> 00:03:54,080
and then the ip coin the session key i

115
00:03:54,080 --> 00:03:56,080
used to encrypt the

116
00:03:56,080 --> 00:03:58,400
the ip core using aes

117
00:03:58,400 --> 00:04:00,319
at the same time the tool vendor so the

118
00:04:00,319 --> 00:04:02,400
guy or the company that supplied the

119
00:04:02,400 --> 00:04:05,519
design tool publishes one or more public

120
00:04:05,519 --> 00:04:07,680
keys rsa public keys actually

121
00:04:07,680 --> 00:04:09,280
and these public keys are then used to

122
00:04:09,280 --> 00:04:10,239
encrypt the

123
00:04:10,239 --> 00:04:12,080
session key and both the encrypted

124
00:04:12,080 --> 00:04:14,159
session key and the encrypted ip core

125
00:04:14,159 --> 00:04:15,680
are combined into something that the

126
00:04:15,680 --> 00:04:19,120
standard refers to as an envelope

127
00:04:19,120 --> 00:04:21,600
on the decryption side so within the ip

128
00:04:21,600 --> 00:04:23,120
user's

129
00:04:23,120 --> 00:04:25,759
design tool so on the workstation of the

130
00:04:25,759 --> 00:04:28,000
ip user this envelope is again split

131
00:04:28,000 --> 00:04:30,160
into the encrypted ip core and the

132
00:04:30,160 --> 00:04:32,160
encrypted session key

133
00:04:32,160 --> 00:04:34,800
then there is an rsa private key that is

134
00:04:34,800 --> 00:04:36,960
embedded into the design tool and this

135
00:04:36,960 --> 00:04:39,199
is loaded from the design tool and used

136
00:04:39,199 --> 00:04:41,680
to first recover the a session key and

137
00:04:41,680 --> 00:04:43,520
that aes session key is then again used

138
00:04:43,520 --> 00:04:45,840
to recover the plain text ip

139
00:04:45,840 --> 00:04:47,759
and then you can like the design tool

140
00:04:47,759 --> 00:04:50,000
can go on to ucip for as i said

141
00:04:50,000 --> 00:04:51,840
synthesis implementation

142
00:04:51,840 --> 00:04:53,440
all kinds of different tasks that need

143
00:04:53,440 --> 00:04:55,759
to be done during hardware design

144
00:04:55,759 --> 00:04:58,560
so the problems with the standard um i'm

145
00:04:58,560 --> 00:05:00,400
having a couple of quotes here that come

146
00:05:00,400 --> 00:05:02,080
right from the standard document first

147
00:05:02,080 --> 00:05:04,560
one being a decryption tool sure manage

148
00:05:04,560 --> 00:05:06,720
its secrets in a private secure manner

149
00:05:06,720 --> 00:05:08,639
it may harden such secrets directly into

150
00:05:08,639 --> 00:05:10,320
the software you use an external

151
00:05:10,320 --> 00:05:13,520
persistent storage scheme

152
00:05:13,520 --> 00:05:15,600
of course the rsa private keys are kind

153
00:05:15,600 --> 00:05:17,120
of a valuable target for an attacker if

154
00:05:17,120 --> 00:05:19,039
you've got those you can decrypt any ip

155
00:05:19,039 --> 00:05:22,000
that has been encrypted with them

156
00:05:22,000 --> 00:05:25,440
and in practice um you have like one or

157
00:05:25,440 --> 00:05:27,919
only a few hours eight keys per per

158
00:05:27,919 --> 00:05:29,919
vendor or even per tool so for example

159
00:05:29,919 --> 00:05:32,080
if we talk about xilinx vivado they have

160
00:05:32,080 --> 00:05:33,840
right now i think six keys within their

161
00:05:33,840 --> 00:05:35,680
two or six hours eight keys but that's

162
00:05:35,680 --> 00:05:37,759
very limited and those are global across

163
00:05:37,759 --> 00:05:39,919
all tool instances so there's no

164
00:05:39,919 --> 00:05:42,560
different keys between between

165
00:05:42,560 --> 00:05:44,000
instances of the software installed on

166
00:05:44,000 --> 00:05:46,320
different different workstations

167
00:05:46,320 --> 00:05:48,720
you can see the problem already i guess

168
00:05:48,720 --> 00:05:50,160
not a single vendor of the ones we

169
00:05:50,160 --> 00:05:51,919
analyzed in our case studies uses the

170
00:05:51,919 --> 00:05:53,680
external storage scheme

171
00:05:53,680 --> 00:05:55,600
that that's out of the picture

172
00:05:55,600 --> 00:05:57,039
and of course recovery of a key

173
00:05:57,039 --> 00:05:58,560
compromises confidentiality and

174
00:05:58,560 --> 00:05:59,840
integrity of the a

175
00:05:59,840 --> 00:06:02,080
protected id entirely because you can

176
00:06:02,080 --> 00:06:04,639
decrypt you can manipulate re-encrypt

177
00:06:04,639 --> 00:06:06,880
all that kind of stuff next problem

178
00:06:06,880 --> 00:06:08,800
between tool vendors and their users an

179
00:06:08,800 --> 00:06:10,720
agreement for use of the tool should

180
00:06:10,720 --> 00:06:12,720
forbid tempering and reverse engineering

181
00:06:12,720 --> 00:06:14,080
without being granted explicit

182
00:06:14,080 --> 00:06:15,360
permission

183
00:06:15,360 --> 00:06:17,360
recall that this like the tool design

184
00:06:17,360 --> 00:06:19,520
tools i run on the untrusted in an

185
00:06:19,520 --> 00:06:21,440
untrusted execution environment hence on

186
00:06:21,440 --> 00:06:24,160
the ip user's workstations

187
00:06:24,160 --> 00:06:27,680
and how ieee 1735 tackles this is just

188
00:06:27,680 --> 00:06:29,919
by forbidding reverse engineering

189
00:06:29,919 --> 00:06:31,199
and of course like if you have an

190
00:06:31,199 --> 00:06:32,400
elaborate

191
00:06:32,400 --> 00:06:34,319
malicious and albert attacker with

192
00:06:34,319 --> 00:06:36,319
malicious intent he's probably not going

193
00:06:36,319 --> 00:06:38,400
to be stopped by a legal agreement

194
00:06:38,400 --> 00:06:39,600
um

195
00:06:39,600 --> 00:06:42,160
and third last but not least if the

196
00:06:42,160 --> 00:06:44,240
disclosure happens because a tool is act

197
00:06:44,240 --> 00:06:46,400
that is an implementation issue each

198
00:06:46,400 --> 00:06:49,440
tool vendor needs to decide what if any

199
00:06:49,440 --> 00:06:51,120
software protection technologies they

200
00:06:51,120 --> 00:06:53,280
will use here so what they basically do

201
00:06:53,280 --> 00:06:55,199
is just to

202
00:06:55,199 --> 00:06:57,199
disregard the disclosure of rp as an

203
00:06:57,199 --> 00:06:58,479
implementation issue that is out of

204
00:06:58,479 --> 00:07:00,960
scope of the standard

205
00:07:00,960 --> 00:07:03,039
they consider the protection of private

206
00:07:03,039 --> 00:07:04,400
keys out of scope

207
00:07:04,400 --> 00:07:06,880
and they explicitly do not require any

208
00:07:06,880 --> 00:07:08,720
protections at all

209
00:07:08,720 --> 00:07:09,840
um

210
00:07:09,840 --> 00:07:11,919
but as i already said like the rsa

211
00:07:11,919 --> 00:07:13,440
private keys are really the trust anchor

212
00:07:13,440 --> 00:07:16,400
of the standard so what you or what we

213
00:07:16,400 --> 00:07:18,160
wanted to find out then

214
00:07:18,160 --> 00:07:19,840
our research question was how is this

215
00:07:19,840 --> 00:07:21,520
actually done in practice

216
00:07:21,520 --> 00:07:23,599
and this is why we looked at six tools

217
00:07:23,599 --> 00:07:26,400
uh those you can see here from uh intel

218
00:07:26,400 --> 00:07:28,880
over cadence lettuce siemens microsemi

219
00:07:28,880 --> 00:07:30,800
xilinx

220
00:07:30,800 --> 00:07:33,199
so a wide range of larger companies and

221
00:07:33,199 --> 00:07:35,120
smaller companies as well and what we've

222
00:07:35,120 --> 00:07:36,880
seen is that three of those companies

223
00:07:36,880 --> 00:07:39,199
did not protect their keys at all

224
00:07:39,199 --> 00:07:41,039
those are the top three ones and of

225
00:07:41,039 --> 00:07:42,479
course if you have no protections

226
00:07:42,479 --> 00:07:44,639
recovery of the key is in the range of

227
00:07:44,639 --> 00:07:46,560
hours sometimes even an hour only or

228
00:07:46,560 --> 00:07:48,400
less than an hour

229
00:07:48,400 --> 00:07:49,840
for the bottom three

230
00:07:49,840 --> 00:07:52,160
tools we analyzed we have some form of

231
00:07:52,160 --> 00:07:53,440
protection

232
00:07:53,440 --> 00:07:55,759
that's actually increasing the further

233
00:07:55,759 --> 00:07:57,280
down the table you go

234
00:07:57,280 --> 00:08:00,000
um so for siemens we have only whitebox

235
00:08:00,000 --> 00:08:02,240
crypto what i'm going to talk about in a

236
00:08:02,240 --> 00:08:04,160
second and for the others we also have

237
00:08:04,160 --> 00:08:06,080
code objection and anti-debugging and

238
00:08:06,080 --> 00:08:08,319
for those the time to break was actually

239
00:08:08,319 --> 00:08:11,280
around the range of days to weeks

240
00:08:11,280 --> 00:08:12,479
i think the the

241
00:08:12,479 --> 00:08:14,800
strongest one was xilinx was two weeks

242
00:08:14,800 --> 00:08:15,919
um

243
00:08:15,919 --> 00:08:17,919
again we successfully extracted all keys

244
00:08:17,919 --> 00:08:21,039
that we could find in the tools

245
00:08:21,039 --> 00:08:23,919
and the problem here being that commonly

246
00:08:23,919 --> 00:08:25,759
hardware ip supports multiple of these

247
00:08:25,759 --> 00:08:27,840
tools at the same time so for example if

248
00:08:27,840 --> 00:08:30,879
i produce a key and an ip core for

249
00:08:30,879 --> 00:08:32,880
lattice radiant let this radiant will

250
00:08:32,880 --> 00:08:36,000
always also use model them from siemens

251
00:08:36,000 --> 00:08:37,919
and that way they need to support both

252
00:08:37,919 --> 00:08:39,599
tools they need to encrypt their session

253
00:08:39,599 --> 00:08:41,519
key for both tools and now even if

254
00:08:41,519 --> 00:08:43,919
siemens model them is somewhat secure

255
00:08:43,919 --> 00:08:45,760
as long as lattice isn't secure the ip

256
00:08:45,760 --> 00:08:48,320
core is lost anyway

257
00:08:48,320 --> 00:08:50,480
so recovering a single rsa private key

258
00:08:50,480 --> 00:08:52,880
can already compromise vast numbers of

259
00:08:52,880 --> 00:08:55,200
ip cores what we're going to talk about

260
00:08:55,200 --> 00:08:57,279
today is just xilinx vivado because that

261
00:08:57,279 --> 00:08:59,760
was the most elaborate case study we did

262
00:08:59,760 --> 00:09:01,040
and i'm only giving you a high level

263
00:09:01,040 --> 00:09:02,560
overview if you want to see more of the

264
00:09:02,560 --> 00:09:03,680
details

265
00:09:03,680 --> 00:09:05,440
i would ask you to look into our paper

266
00:09:05,440 --> 00:09:08,160
there's a lot more technical details

267
00:09:08,160 --> 00:09:10,480
although we had to

268
00:09:10,480 --> 00:09:11,839
refrain from

269
00:09:11,839 --> 00:09:14,000
telling you everything

270
00:09:14,000 --> 00:09:15,279
all right

271
00:09:15,279 --> 00:09:17,440
how we proceeded was that we started

272
00:09:17,440 --> 00:09:19,200
with identifying cryptographic

273
00:09:19,200 --> 00:09:21,279
subroutines by matching against function

274
00:09:21,279 --> 00:09:23,680
signatures that means that for

275
00:09:23,680 --> 00:09:25,600
like open source cryptographic libraries

276
00:09:25,600 --> 00:09:27,360
you can compile them and you can see how

277
00:09:27,360 --> 00:09:29,519
the function stops look the first couple

278
00:09:29,519 --> 00:09:31,120
of bytes of the function look and then

279
00:09:31,120 --> 00:09:32,560
you can match that against the software

280
00:09:32,560 --> 00:09:34,080
you're analyzing and find where

281
00:09:34,080 --> 00:09:35,519
cryptographic implementations within

282
00:09:35,519 --> 00:09:38,080
that software result

283
00:09:38,080 --> 00:09:39,760
that way we were able to discover the

284
00:09:39,760 --> 00:09:42,640
rs8 encryption and dump one out of five

285
00:09:42,640 --> 00:09:44,160
keys that violins has embedded into

286
00:09:44,160 --> 00:09:46,080
their software they update their keys

287
00:09:46,080 --> 00:09:48,000
every one to two years so there's a

288
00:09:48,000 --> 00:09:49,519
couple of new keys and old ones are

289
00:09:49,519 --> 00:09:51,600
getting deprecated after five to ten

290
00:09:51,600 --> 00:09:53,519
years

291
00:09:53,519 --> 00:09:55,360
so they have always or at that point

292
00:09:55,360 --> 00:09:56,640
they had five keys now they have six

293
00:09:56,640 --> 00:10:00,000
because we got five of them um

294
00:10:00,000 --> 00:10:02,240
and okay we dumped the first key but we

295
00:10:02,240 --> 00:10:04,399
couldn't really find the other four keys

296
00:10:04,399 --> 00:10:05,600
that they are using

297
00:10:05,600 --> 00:10:07,040
and the one we got was actually the

298
00:10:07,040 --> 00:10:08,800
oldest one of them all

299
00:10:08,800 --> 00:10:10,240
so what we did was backtracing the

300
00:10:10,240 --> 00:10:12,800
function calls uh from the decryption

301
00:10:12,800 --> 00:10:14,720
routine we discovered and then after a

302
00:10:14,720 --> 00:10:16,959
while we found this uh decrypt

303
00:10:16,959 --> 00:10:19,360
decryption this picture that basically

304
00:10:19,360 --> 00:10:20,800
selected the decryption function

305
00:10:20,800 --> 00:10:23,040
depending on the key that was input to

306
00:10:23,040 --> 00:10:24,640
or the key that was requested from the

307
00:10:24,640 --> 00:10:25,760
tool

308
00:10:25,760 --> 00:10:26,720
um

309
00:10:26,720 --> 00:10:28,800
what this dispatch sadly does is make

310
00:10:28,800 --> 00:10:30,160
heavy use of code obfuscation and

311
00:10:30,160 --> 00:10:31,440
anti-debugging

312
00:10:31,440 --> 00:10:33,200
but that wasn't too much of a of an

313
00:10:33,200 --> 00:10:34,800
issue because the anti-debugging was

314
00:10:34,800 --> 00:10:36,399
quickly defeated using publicly

315
00:10:36,399 --> 00:10:37,920
available tooling

316
00:10:37,920 --> 00:10:39,760
um and the code application was then

317
00:10:39,760 --> 00:10:41,920
defeated using dynamic analysis which

318
00:10:41,920 --> 00:10:43,519
was possible since we defeated entity

319
00:10:43,519 --> 00:10:45,519
debugging

320
00:10:45,519 --> 00:10:47,040
and that way we actually discovered

321
00:10:47,040 --> 00:10:48,880
another cryptographic routine that is

322
00:10:48,880 --> 00:10:51,279
called for all the four other keys

323
00:10:51,279 --> 00:10:53,279
the problem is that it behaves like an

324
00:10:53,279 --> 00:10:55,760
rsa decryption but looks completely

325
00:10:55,760 --> 00:10:56,880
different

326
00:10:56,880 --> 00:10:58,640
so we were unable to find the secret key

327
00:10:58,640 --> 00:11:00,320
within the implementation or within the

328
00:11:00,320 --> 00:11:02,240
memory

329
00:11:02,240 --> 00:11:04,079
but we could observe that the routine

330
00:11:04,079 --> 00:11:06,640
actually outputs an aes session key and

331
00:11:06,640 --> 00:11:08,320
actually the a session key that we want

332
00:11:08,320 --> 00:11:10,240
because we know what ipcore we put in

333
00:11:10,240 --> 00:11:12,880
there we encrypted that ourselves so

334
00:11:12,880 --> 00:11:15,200
we know what we are looking for but

335
00:11:15,200 --> 00:11:17,279
we couldn't find like the hours a key

336
00:11:17,279 --> 00:11:19,519
so after a while of

337
00:11:19,519 --> 00:11:21,440
googling we figured out that this must

338
00:11:21,440 --> 00:11:22,640
be some kind of a white box

339
00:11:22,640 --> 00:11:24,880
implementation of an rs80 script

340
00:11:24,880 --> 00:11:26,480
decryption

341
00:11:26,480 --> 00:11:28,399
and now we get to finally get to what

342
00:11:28,399 --> 00:11:30,399
white box cryptography actually is and

343
00:11:30,399 --> 00:11:32,240
the idea here is to protect like a

344
00:11:32,240 --> 00:11:34,560
secret or a secret key by merging it

345
00:11:34,560 --> 00:11:36,160
right into the implementation of the

346
00:11:36,160 --> 00:11:38,880
cryptographic algorithm itself so that's

347
00:11:38,880 --> 00:11:40,399
actually a mathematical concept that's

348
00:11:40,399 --> 00:11:42,000
not just obfuscation there's a lot of

349
00:11:42,000 --> 00:11:44,959
work on the symmetric side

350
00:11:44,959 --> 00:11:45,920
and

351
00:11:45,920 --> 00:11:47,440
again you merge the key into the

352
00:11:47,440 --> 00:11:48,880
algorithm or the implementation of the

353
00:11:48,880 --> 00:11:50,000
algorithm

354
00:11:50,000 --> 00:11:51,839
and then the attacker model under which

355
00:11:51,839 --> 00:11:53,200
this needs to be secure is that the

356
00:11:53,200 --> 00:11:54,720
attacker's full access to the software

357
00:11:54,720 --> 00:11:56,720
and its execution environment like we

358
00:11:56,720 --> 00:11:57,600
had

359
00:11:57,600 --> 00:11:59,120
so the attacker can perform static and

360
00:11:59,120 --> 00:12:01,120
dynamic software analysis

361
00:12:01,120 --> 00:12:02,800
they can arbitrarily execute the white

362
00:12:02,800 --> 00:12:04,959
box algorithm they can examine and

363
00:12:04,959 --> 00:12:06,880
manipulate intermediate values at

364
00:12:06,880 --> 00:12:08,079
runtime

365
00:12:08,079 --> 00:12:10,320
and even under such hostile uh

366
00:12:10,320 --> 00:12:11,440
conditions

367
00:12:11,440 --> 00:12:14,320
um the implementation must remain secure

368
00:12:14,320 --> 00:12:15,279
so

369
00:12:15,279 --> 00:12:18,079
yeah and what what does secure mean

370
00:12:18,079 --> 00:12:20,240
under like in in this setting

371
00:12:20,240 --> 00:12:21,760
and this is actually where the two

372
00:12:21,760 --> 00:12:23,040
security notions of white box

373
00:12:23,040 --> 00:12:25,040
cryptography come into play the first

374
00:12:25,040 --> 00:12:26,720
one that's a kind of natural one

375
00:12:26,720 --> 00:12:28,639
security against key extraction

376
00:12:28,639 --> 00:12:29,519
so

377
00:12:29,519 --> 00:12:31,519
if you embed or if you merge the key

378
00:12:31,519 --> 00:12:33,600
into the algorithm you kind of want to

379
00:12:33,600 --> 00:12:36,000
prevent someone getting it out again

380
00:12:36,000 --> 00:12:38,240
and this is what this is about but then

381
00:12:38,240 --> 00:12:39,760
of course the question arises okay if

382
00:12:39,760 --> 00:12:40,959
the key is within the decryption

383
00:12:40,959 --> 00:12:42,160
algorithm i can just take the

384
00:12:42,160 --> 00:12:43,839
description algorithm and run it to

385
00:12:43,839 --> 00:12:46,079
decrypt so i don't need the key at all

386
00:12:46,079 --> 00:12:48,000
and this is what uh what is called code

387
00:12:48,000 --> 00:12:50,959
lifting so um white box or one one of

388
00:12:50,959 --> 00:12:53,680
the the second security notion is uh

389
00:12:53,680 --> 00:12:55,600
that such white box algorithm should be

390
00:12:55,600 --> 00:12:57,200
secure against code lifting so you

391
00:12:57,200 --> 00:12:59,760
should not be able to take the

392
00:12:59,760 --> 00:13:01,760
decryption algorithm out of the software

393
00:13:01,760 --> 00:13:03,920
it is embedded to that can for example

394
00:13:03,920 --> 00:13:05,920
be done using hardware binding and stuff

395
00:13:05,920 --> 00:13:07,279
like that

396
00:13:07,279 --> 00:13:09,760
but it's a kind of a hard problem in

397
00:13:09,760 --> 00:13:11,600
reality

398
00:13:11,600 --> 00:13:12,639
all right

399
00:13:12,639 --> 00:13:14,320
what we did for the islings and again we

400
00:13:14,320 --> 00:13:15,839
have a lot of details on the white box

401
00:13:15,839 --> 00:13:17,440
that dialings implemented in our paper

402
00:13:17,440 --> 00:13:18,720
so if you're interested take a look

403
00:13:18,720 --> 00:13:20,880
there's a lot of math in there

404
00:13:20,880 --> 00:13:22,639
but for here

405
00:13:22,639 --> 00:13:24,240
i'm just going to say that we replicated

406
00:13:24,240 --> 00:13:25,680
the white box in python so we did

407
00:13:25,680 --> 00:13:27,360
basically code lifting we perform code

408
00:13:27,360 --> 00:13:29,760
lifting but when what we also wanted to

409
00:13:29,760 --> 00:13:30,720
know

410
00:13:30,720 --> 00:13:32,720
is can we get the keys out so we wanted

411
00:13:32,720 --> 00:13:33,440
to

412
00:13:33,440 --> 00:13:35,680
to analyze both white box properties

413
00:13:35,680 --> 00:13:38,000
basically and of course like we we

414
00:13:38,000 --> 00:13:39,839
generated an algorithmic description

415
00:13:39,839 --> 00:13:42,480
from the from the python code and took

416
00:13:42,480 --> 00:13:44,639
that algorithmic description to go to

417
00:13:44,639 --> 00:13:46,320
alexander meyer one of the crypto

418
00:13:46,320 --> 00:13:48,480
professors at our university

419
00:13:48,480 --> 00:13:50,720
and like two hours after we entered his

420
00:13:50,720 --> 00:13:53,040
office we left with the with five five

421
00:13:53,040 --> 00:13:56,000
rsa keys and have actually factorized uh

422
00:13:56,000 --> 00:13:57,680
282

423
00:13:57,680 --> 00:13:59,440
for 48

424
00:13:59,440 --> 00:14:02,000
bit keys in the process but that was

425
00:14:02,000 --> 00:14:03,920
quite fast um

426
00:14:03,920 --> 00:14:06,000
and then in the end you can use both the

427
00:14:06,000 --> 00:14:07,600
decryption oracle that you got by

428
00:14:07,600 --> 00:14:10,480
replicating the the algorithm in python

429
00:14:10,480 --> 00:14:13,120
or the extracted keys to decrypt any ip

430
00:14:13,120 --> 00:14:15,199
core that has been encrypted for xilinx

431
00:14:15,199 --> 00:14:17,120
vivado

432
00:14:17,120 --> 00:14:18,800
yeah again see technical

433
00:14:18,800 --> 00:14:21,120
paper for technical details

434
00:14:21,120 --> 00:14:24,480
so conclusions there's a couple

435
00:14:24,480 --> 00:14:28,000
first as as you've seen ieee 1735 has

436
00:14:28,000 --> 00:14:29,760
some structural weaknesses that

437
00:14:29,760 --> 00:14:32,800
completely undermine its security

438
00:14:32,800 --> 00:14:34,959
for example it allows for extraction of

439
00:14:34,959 --> 00:14:38,480
the private rs8 tools keys of the design

440
00:14:38,480 --> 00:14:39,920
tool vendors

441
00:14:39,920 --> 00:14:41,120
and

442
00:14:41,120 --> 00:14:43,440
subsequently allows for ip chord

443
00:14:43,440 --> 00:14:45,680
decryption and manipulation

444
00:14:45,680 --> 00:14:47,760
um

445
00:14:47,760 --> 00:14:51,120
hence like the ieee 1735 the standard is

446
00:14:51,120 --> 00:14:52,720
in dire need for a version and a

447
00:14:52,720 --> 00:14:54,320
revision is actually underway and was

448
00:14:54,320 --> 00:14:56,160
supposed to be published last year but i

449
00:14:56,160 --> 00:14:59,279
think it was pushed back due to corona

450
00:14:59,279 --> 00:15:00,560
um

451
00:15:00,560 --> 00:15:02,800
and within that revision they must also

452
00:15:02,800 --> 00:15:04,320
make sure to protect integrity and

453
00:15:04,320 --> 00:15:05,920
authenticity because in the talks with

454
00:15:05,920 --> 00:15:07,920
the vendors we've actually learned that

455
00:15:07,920 --> 00:15:09,120
for for

456
00:15:09,120 --> 00:15:11,440
some settings integrity and authenticity

457
00:15:11,440 --> 00:15:12,800
are way more important than

458
00:15:12,800 --> 00:15:14,480
confidentiality

459
00:15:14,480 --> 00:15:16,480
they must point out the significance of

460
00:15:16,480 --> 00:15:18,560
private key protection and of course

461
00:15:18,560 --> 00:15:19,600
have a clear discussion on

462
00:15:19,600 --> 00:15:21,199
confidentiality and its limitations

463
00:15:21,199 --> 00:15:22,320
because

464
00:15:22,320 --> 00:15:23,760
within the setting we are operating here

465
00:15:23,760 --> 00:15:25,360
we will never have complete

466
00:15:25,360 --> 00:15:27,040
confidentiality

467
00:15:27,040 --> 00:15:30,719
that's just cryptographically impossible

468
00:15:30,800 --> 00:15:32,720
so what we can do is only like implement

469
00:15:32,720 --> 00:15:34,720
razorback countermeasures

470
00:15:34,720 --> 00:15:37,040
so use software protection techniques

471
00:15:37,040 --> 00:15:38,800
that should also be required by the

472
00:15:38,800 --> 00:15:41,199
standard to increase the economic effort

473
00:15:41,199 --> 00:15:43,279
of an attack and

474
00:15:43,279 --> 00:15:44,959
in the end we also have public key white

475
00:15:44,959 --> 00:15:47,040
box cryptography and what we've also

476
00:15:47,040 --> 00:15:49,279
seen in our work is that like it lacks

477
00:15:49,279 --> 00:15:51,279
public scrutiny so there is one or two

478
00:15:51,279 --> 00:15:53,120
publications on public key white box

479
00:15:53,120 --> 00:15:54,560
cryptography only

480
00:15:54,560 --> 00:15:56,240
but a lot of companies are offering

481
00:15:56,240 --> 00:15:58,000
different white box techniques for

482
00:15:58,000 --> 00:16:00,160
example rsa white boxes

483
00:16:00,160 --> 00:16:02,639
so you should take all the all those

484
00:16:02,639 --> 00:16:04,240
implementations with a grain of salt and

485
00:16:04,240 --> 00:16:06,480
be careful about proprietary such

486
00:16:06,480 --> 00:16:08,800
proprietary solutions and only deploy

487
00:16:08,800 --> 00:16:10,320
them with other software protection

488
00:16:10,320 --> 00:16:12,399
measures in place

489
00:16:12,399 --> 00:16:14,480
and that concludes my talk so if you

490
00:16:14,480 --> 00:16:17,519
have any questions feel free to ask

491
00:16:17,519 --> 00:16:21,240
thanks for the great talk

492
00:16:21,270 --> 00:16:25,840
[Applause]

493
00:16:31,600 --> 00:16:33,920
hello nice presentation uh my name is

494
00:16:33,920 --> 00:16:36,560
animesh university of florida so in our

495
00:16:36,560 --> 00:16:39,199
cc-17 work we found out weaknesses in

496
00:16:39,199 --> 00:16:40,800
the ieee standard

497
00:16:40,800 --> 00:16:42,240
and

498
00:16:42,240 --> 00:16:44,399
open responsible disclosure

499
00:16:44,399 --> 00:16:46,720
we got a seasoned design noticed by one

500
00:16:46,720 --> 00:16:49,040
of the vendors how was your interaction

501
00:16:49,040 --> 00:16:51,680
with the vendors

502
00:16:51,680 --> 00:16:54,800
i prefer not to comment

503
00:16:56,079 --> 00:16:57,680
i mean for for the six vendors we have

504
00:16:57,680 --> 00:16:59,120
published here

505
00:16:59,120 --> 00:17:01,199
they were they were nice to us so we had

506
00:17:01,199 --> 00:17:03,519
a good exchange with them and

507
00:17:03,519 --> 00:17:05,199
productive exchange actually and most of

508
00:17:05,199 --> 00:17:07,039
them have already tackled the issues

509
00:17:07,039 --> 00:17:08,559
like they have deployed

510
00:17:08,559 --> 00:17:09,760
stronger

511
00:17:09,760 --> 00:17:11,599
software protections

512
00:17:11,599 --> 00:17:13,280
but yeah on the rest i prefer not to

513
00:17:13,280 --> 00:17:15,119
comment

514
00:17:15,119 --> 00:17:17,039
hi great talk jeremy epstein national

515
00:17:17,039 --> 00:17:18,720
science foundation what i was curious

516
00:17:18,720 --> 00:17:21,039
about is um

517
00:17:21,039 --> 00:17:23,679
given that in your chart and and your

518
00:17:23,679 --> 00:17:24,959
slides weren't numbered so i can't tell

519
00:17:24,959 --> 00:17:27,439
you which uh one where you talked about

520
00:17:27,439 --> 00:17:28,480
uh

521
00:17:28,480 --> 00:17:30,480
several of them having no protection and

522
00:17:30,480 --> 00:17:31,840
several of them having partial

523
00:17:31,840 --> 00:17:32,960
protection

524
00:17:32,960 --> 00:17:33,760
um

525
00:17:33,760 --> 00:17:36,160
what i was curious about is given that

526
00:17:36,160 --> 00:17:38,240
it only took a few weeks

527
00:17:38,240 --> 00:17:39,440
uh

528
00:17:39,440 --> 00:17:42,000
is the sum protection really any better

529
00:17:42,000 --> 00:17:44,000
than no protection given that an

530
00:17:44,000 --> 00:17:47,679
adversary presumably can stand to wait a

531
00:17:47,679 --> 00:17:50,559
few weeks it seems to me that there's no

532
00:17:50,559 --> 00:17:52,400
difference between those at the top of

533
00:17:52,400 --> 00:17:53,679
the chart and those at the bottom of the

534
00:17:53,679 --> 00:17:54,720
chart

535
00:17:54,720 --> 00:17:55,840
i mean

536
00:17:55,840 --> 00:17:57,520
at least for for

537
00:17:57,520 --> 00:17:59,679
some of the unprotected ones

538
00:17:59,679 --> 00:18:01,679
even unskilled reverse engineers are

539
00:18:01,679 --> 00:18:03,360
able to recover the keys

540
00:18:03,360 --> 00:18:04,720
so

541
00:18:04,720 --> 00:18:07,919
so there is a difference

542
00:18:08,160 --> 00:18:09,679
for example for xilinx i think the

543
00:18:09,679 --> 00:18:11,520
attack took around two weeks that we did

544
00:18:11,520 --> 00:18:13,200
that we performed

545
00:18:13,200 --> 00:18:14,640
they have improved their their

546
00:18:14,640 --> 00:18:16,320
obfuscation and our guess is that they

547
00:18:16,320 --> 00:18:18,320
would now it would now take us a month

548
00:18:18,320 --> 00:18:21,120
if not if not longer to actually recover

549
00:18:21,120 --> 00:18:22,160
the keys

550
00:18:22,160 --> 00:18:23,760
so there is actually it makes a

551
00:18:23,760 --> 00:18:25,520
difference whether you protect your keys

552
00:18:25,520 --> 00:18:27,919
or not but of course key protection is

553
00:18:27,919 --> 00:18:30,160
not the only issue here because like

554
00:18:30,160 --> 00:18:31,520
even if the keys are protected the

555
00:18:31,520 --> 00:18:33,360
plaintext ip might still be in memory at

556
00:18:33,360 --> 00:18:34,799
some point

557
00:18:34,799 --> 00:18:37,200
and recovering plaintext ip can be done

558
00:18:37,200 --> 00:18:38,720
all over the software because it's used

559
00:18:38,720 --> 00:18:40,640
all over the design tool and you cannot

560
00:18:40,640 --> 00:18:43,760
really protect everything thank you

561
00:18:43,760 --> 00:18:45,919
all right let's uh thanks to speaker

562
00:18:45,919 --> 00:18:46,980
again

563
00:18:46,980 --> 00:18:51,829
[Applause]

