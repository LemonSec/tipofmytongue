1
00:00:01,040 --> 00:00:02,080
cool

2
00:00:02,080 --> 00:00:05,200
uh so hello my name is sasha

3
00:00:05,200 --> 00:00:06,720
and today i'll be presenting private

4
00:00:06,720 --> 00:00:08,000
approximate nearest name research with

5
00:00:08,000 --> 00:00:10,000
sublinear communication this is joint

6
00:00:10,000 --> 00:00:12,080
work with simon lingowski and my advisor

7
00:00:12,080 --> 00:00:14,880
srini davidas

8
00:00:14,880 --> 00:00:16,720
so nearest labor search is the problem

9
00:00:16,720 --> 00:00:18,800
of finding points in high dimensional

10
00:00:18,800 --> 00:00:20,320
space that are not too far away from a

11
00:00:20,320 --> 00:00:21,760
query

12
00:00:21,760 --> 00:00:23,439
so in this example this will be the

13
00:00:23,439 --> 00:00:26,000
nearest point to the query

14
00:00:26,000 --> 00:00:28,240
approximate nearest neighbor search

15
00:00:28,240 --> 00:00:30,160
is a standard relaxation used in pri and

16
00:00:30,160 --> 00:00:31,199
practice

17
00:00:31,199 --> 00:00:33,680
uh that allows uh finding a point that

18
00:00:33,680 --> 00:00:36,079
is uh close to the nearest neighbor but

19
00:00:36,079 --> 00:00:37,520
not necessarily the actual nearest

20
00:00:37,520 --> 00:00:39,440
neighbor

21
00:00:39,440 --> 00:00:40,960
whereas approximate nearest neighbors

22
00:00:40,960 --> 00:00:42,719
are used well it's used a lot of

23
00:00:42,719 --> 00:00:44,960
recommendation systems so for example

24
00:00:44,960 --> 00:00:46,960
you might imagine a user that uses

25
00:00:46,960 --> 00:00:48,079
spotify

26
00:00:48,079 --> 00:00:49,920
and spotify will learn

27
00:00:49,920 --> 00:00:51,920
information about the type of music that

28
00:00:51,920 --> 00:00:52,879
this

29
00:00:52,879 --> 00:00:54,879
user likes to listen to

30
00:00:54,879 --> 00:00:57,199
and this will be encoded as some high

31
00:00:57,199 --> 00:00:59,440
dimensional feature vector

32
00:00:59,440 --> 00:01:02,879
in in this space

33
00:01:02,960 --> 00:01:06,080
and spotify might have a database of all

34
00:01:06,080 --> 00:01:07,680
different kinds of songs

35
00:01:07,680 --> 00:01:09,600
and they can run approximate nearest

36
00:01:09,600 --> 00:01:10,799
neighbor search

37
00:01:10,799 --> 00:01:13,760
on this database to find recommendations

38
00:01:13,760 --> 00:01:15,600
to return to the user about other songs

39
00:01:15,600 --> 00:01:18,080
that they might enjoy listening to

40
00:01:18,080 --> 00:01:19,520
now it's not difficult to see that in

41
00:01:19,520 --> 00:01:20,880
this setting

42
00:01:20,880 --> 00:01:24,240
the actual feature profile of the user

43
00:01:24,240 --> 00:01:26,000
such as all the music they like to

44
00:01:26,000 --> 00:01:27,759
listen to as well as the song

45
00:01:27,759 --> 00:01:29,520
recommendations themselves

46
00:01:29,520 --> 00:01:32,000
are potentially private to the user and

47
00:01:32,000 --> 00:01:33,360
the user might not want to reveal them

48
00:01:33,360 --> 00:01:35,680
to spotify

49
00:01:35,680 --> 00:01:38,000
on the flip side the actual database

50
00:01:38,000 --> 00:01:39,680
that spotify has of all the different

51
00:01:39,680 --> 00:01:41,360
songs and their features

52
00:01:41,360 --> 00:01:42,799
might be proprietary information that

53
00:01:42,799 --> 00:01:44,079
spotify wouldn't want leak to a

54
00:01:44,079 --> 00:01:45,439
competitor and therefore they would like

55
00:01:45,439 --> 00:01:46,799
to keep them private

56
00:01:46,799 --> 00:01:49,200
from the user

57
00:01:49,200 --> 00:01:50,399
prior work on approximate nearest

58
00:01:50,399 --> 00:01:52,640
neighbor search solves this problem in

59
00:01:52,640 --> 00:01:55,040
two ways one is using two-party

60
00:01:55,040 --> 00:01:56,240
computation

61
00:01:56,240 --> 00:01:57,840
and the other is using fully homophobic

62
00:01:57,840 --> 00:01:59,280
encryption

63
00:01:59,280 --> 00:02:01,040
the two-party computation

64
00:02:01,040 --> 00:02:03,200
approach is not lightweight

65
00:02:03,200 --> 00:02:04,560
for the client or the database and

66
00:02:04,560 --> 00:02:06,159
requires about one to five gigabytes of

67
00:02:06,159 --> 00:02:08,560
communication with databases of about 1

68
00:02:08,560 --> 00:02:10,399
million items

69
00:02:10,399 --> 00:02:11,440
moreover

70
00:02:11,440 --> 00:02:13,680
two-party computation is not maliciously

71
00:02:13,680 --> 00:02:16,319
secured by default so a malicious

72
00:02:16,319 --> 00:02:18,640
database can deviate from the protocol

73
00:02:18,640 --> 00:02:20,800
and learn information about the client

74
00:02:20,800 --> 00:02:22,400
the client's query

75
00:02:22,400 --> 00:02:24,160
but a malicious client can deviate from

76
00:02:24,160 --> 00:02:25,599
protocol and also learn information

77
00:02:25,599 --> 00:02:27,599
about the database the instrument

78
00:02:27,599 --> 00:02:29,360
shouldn't have learned

79
00:02:29,360 --> 00:02:30,720
fully homophobic encryption on the other

80
00:02:30,720 --> 00:02:31,519
hand

81
00:02:31,519 --> 00:02:32,879
is lightweight for the client because

82
00:02:32,879 --> 00:02:34,000
the client essentially only has to

83
00:02:34,000 --> 00:02:35,200
encrypt the query and send it to the

84
00:02:35,200 --> 00:02:36,560
database

85
00:02:36,560 --> 00:02:38,959
and it's also truly secure against

86
00:02:38,959 --> 00:02:40,239
malicious parties because there's no

87
00:02:40,239 --> 00:02:43,360
protocol for them to deviate from

88
00:02:43,360 --> 00:02:45,200
however fully homophobic encryption is

89
00:02:45,200 --> 00:02:46,879
not lightweight for the database and

90
00:02:46,879 --> 00:02:49,200
requires several hours of computation

91
00:02:49,200 --> 00:02:51,040
even for very small databases of about

92
00:02:51,040 --> 00:02:53,920
2000 items

93
00:02:54,000 --> 00:02:55,920
so in our work we try and design a

94
00:02:55,920 --> 00:02:57,599
protocol that has low communication for

95
00:02:57,599 --> 00:02:58,879
the client

96
00:02:58,879 --> 00:03:00,480
concrete efficiency for the database and

97
00:03:00,480 --> 00:03:02,239
responding to queries

98
00:03:02,239 --> 00:03:03,840
privacy for both the client and the

99
00:03:03,840 --> 00:03:08,239
database as well as malicious security

100
00:03:08,400 --> 00:03:11,519
the setting in which we operate in is a

101
00:03:11,519 --> 00:03:13,040
setting with two non-colluding database

102
00:03:13,040 --> 00:03:16,000
servers and you might ask why do we need

103
00:03:16,000 --> 00:03:18,080
two and oncology servers well the short

104
00:03:18,080 --> 00:03:20,560
answer is we just need it for efficiency

105
00:03:20,560 --> 00:03:22,640
because we want to use symmetric

106
00:03:22,640 --> 00:03:24,239
cryptographic primitives and this allows

107
00:03:24,239 --> 00:03:25,599
us to do so

108
00:03:25,599 --> 00:03:27,120
however in the full version of our paper

109
00:03:27,120 --> 00:03:29,200
we describe how our protocol generalizes

110
00:03:29,200 --> 00:03:31,360
to a setting with a single server

111
00:03:31,360 --> 00:03:33,280
and doesn't require this non-collusion

112
00:03:33,280 --> 00:03:35,760
assumption

113
00:03:35,920 --> 00:03:37,840
so with these two database servers the

114
00:03:37,840 --> 00:03:38,720
client

115
00:03:38,720 --> 00:03:41,120
will essentially send

116
00:03:41,120 --> 00:03:44,239
a private query to each of these servers

117
00:03:44,239 --> 00:03:45,920
the servers will run some computation

118
00:03:45,920 --> 00:03:48,480
and respond to the client and with this

119
00:03:48,480 --> 00:03:50,080
response the client can recover the

120
00:03:50,080 --> 00:03:51,280
approximate nearest neighbor to its

121
00:03:51,280 --> 00:03:53,280
query

122
00:03:53,280 --> 00:03:56,159
uh and in our setting we'll operate with

123
00:03:56,159 --> 00:03:57,760
multiple different clients so we're not

124
00:03:57,760 --> 00:04:00,560
limited to a single client setting

125
00:04:00,560 --> 00:04:03,200
the threat model under which we work

126
00:04:03,200 --> 00:04:04,080
is

127
00:04:04,080 --> 00:04:06,159
that the two servers will hold replicas

128
00:04:06,159 --> 00:04:07,360
of the database

129
00:04:07,360 --> 00:04:08,959
and we'll assume that the servers do not

130
00:04:08,959 --> 00:04:12,239
collude with the client or each other

131
00:04:12,239 --> 00:04:13,680
the clients on the other hand will try

132
00:04:13,680 --> 00:04:14,959
and learn as much as possible about the

133
00:04:14,959 --> 00:04:17,759
database and may collude with each other

134
00:04:17,759 --> 00:04:20,160
in order to achieve this

135
00:04:20,160 --> 00:04:21,600
the guarantees that we obtain from our

136
00:04:21,600 --> 00:04:22,880
protocol

137
00:04:22,880 --> 00:04:24,960
are accuracy of both

138
00:04:24,960 --> 00:04:27,520
servers follow the protocol

139
00:04:27,520 --> 00:04:29,360
user privacy even if one of the servers

140
00:04:29,360 --> 00:04:31,840
is malicious and deviates from protocol

141
00:04:31,840 --> 00:04:33,919
and database privacy even if a subset of

142
00:04:33,919 --> 00:04:35,600
clients and malicious include with each

143
00:04:35,600 --> 00:04:36,479
other

144
00:04:36,479 --> 00:04:40,080
to obtain information about the database

145
00:04:40,160 --> 00:04:42,400
so now i'll describe how a nearest

146
00:04:42,400 --> 00:04:44,080
neighbor search is performed in practice

147
00:04:44,080 --> 00:04:46,240
using a locality sensitive hashing

148
00:04:46,240 --> 00:04:48,560
and this will form a basis for

149
00:04:48,560 --> 00:04:50,160
our strawman protocol which i'll

150
00:04:50,160 --> 00:04:52,639
describe later

151
00:04:52,639 --> 00:04:54,880
so first some terminology

152
00:04:54,880 --> 00:04:57,680
so if we have a data set of points

153
00:04:57,680 --> 00:05:00,720
and a query in this in this set

154
00:05:00,720 --> 00:05:02,240
we'll call all the points that are not

155
00:05:02,240 --> 00:05:03,680
too far away from the query near

156
00:05:03,680 --> 00:05:05,199
neighbors

157
00:05:05,199 --> 00:05:07,039
and all the points outside of this

158
00:05:07,039 --> 00:05:09,680
radius we'll call non-neighbors

159
00:05:09,680 --> 00:05:11,039
and within the set of near neighbors

160
00:05:11,039 --> 00:05:12,400
we'll have the nearest neighbor which

161
00:05:12,400 --> 00:05:15,840
will be the closest point to the query

162
00:05:15,840 --> 00:05:18,400
a locality sensitive hash function h or

163
00:05:18,400 --> 00:05:20,479
lsh for short

164
00:05:20,479 --> 00:05:22,000
will have the property that the hash of

165
00:05:22,000 --> 00:05:24,880
the query will collide with the hash of

166
00:05:24,880 --> 00:05:25,840
the nearest neighbor with high

167
00:05:25,840 --> 00:05:27,199
probability

168
00:05:27,199 --> 00:05:29,840
but the hash of the query will

169
00:05:29,840 --> 00:05:31,280
collide with the

170
00:05:31,280 --> 00:05:33,199
a point that's outside of a non-neighbor

171
00:05:33,199 --> 00:05:35,039
with low probability

172
00:05:35,039 --> 00:05:36,960
so if we plot the distance from the

173
00:05:36,960 --> 00:05:38,479
query on the x-axis and the collision

174
00:05:38,479 --> 00:05:40,160
probability on the y-axis the locality

175
00:05:40,160 --> 00:05:41,280
sensitive hash function will have the

176
00:05:41,280 --> 00:05:43,120
property that as the distance from the

177
00:05:43,120 --> 00:05:45,199
query and a point

178
00:05:45,199 --> 00:05:46,960
increases the probability of collision

179
00:05:46,960 --> 00:05:48,160
decreases

180
00:05:48,160 --> 00:05:49,600
and this is very different from

181
00:05:49,600 --> 00:05:51,520
cryptograph cryptographic hash functions

182
00:05:51,520 --> 00:05:53,199
that do not

183
00:05:53,199 --> 00:05:55,520
want collisions

184
00:05:55,520 --> 00:05:58,720
so using lsa's function h

185
00:05:58,720 --> 00:06:01,520
what we can do is we can hash all the

186
00:06:01,520 --> 00:06:03,600
points in a data set into a hash table

187
00:06:03,600 --> 00:06:05,199
so we just go through all the points and

188
00:06:05,199 --> 00:06:07,520
just hash them into the table

189
00:06:07,520 --> 00:06:10,479
and when a query comes in we can then

190
00:06:10,479 --> 00:06:13,120
hash the query and look it up in this

191
00:06:13,120 --> 00:06:14,880
hash table to

192
00:06:14,880 --> 00:06:16,960
start constructing a candidate set

193
00:06:16,960 --> 00:06:19,039
so here the point collided with the

194
00:06:19,039 --> 00:06:21,600
first hash key in the table and so we'll

195
00:06:21,600 --> 00:06:22,960
just add that

196
00:06:22,960 --> 00:06:24,880
the id of the point and the coordinates

197
00:06:24,880 --> 00:06:27,280
of the point or the features

198
00:06:27,280 --> 00:06:29,039
into

199
00:06:29,039 --> 00:06:31,840
our candidate set

200
00:06:32,080 --> 00:06:34,080
and we'll just repeat this process with

201
00:06:34,080 --> 00:06:36,560
many different hash tables to increase

202
00:06:36,560 --> 00:06:39,520
the size of our candidate set

203
00:06:39,520 --> 00:06:41,199
and then once we have a sufficiently

204
00:06:41,199 --> 00:06:43,039
large candidate set we can then brute

205
00:06:43,039 --> 00:06:45,520
force search within the the set and find

206
00:06:45,520 --> 00:06:47,520
the nearest neighbor by just examining

207
00:06:47,520 --> 00:06:51,280
the coordinates or the features

208
00:06:51,599 --> 00:06:53,440
so with that established i can now

209
00:06:53,440 --> 00:06:55,520
describe a strongman protocol that will

210
00:06:55,520 --> 00:06:57,440
use lsh

211
00:06:57,440 --> 00:06:59,440
to find the nearest neighbor

212
00:06:59,440 --> 00:07:01,039
so the basic idea is that our two

213
00:07:01,039 --> 00:07:02,960
servers will

214
00:07:02,960 --> 00:07:04,479
sample a bunch of hash functions and

215
00:07:04,479 --> 00:07:06,800
construct the hash tables pretty much as

216
00:07:06,800 --> 00:07:08,720
i described before by just hashing the

217
00:07:08,720 --> 00:07:12,319
data set into into these hash tables

218
00:07:12,319 --> 00:07:14,000
they will then provide these hash

219
00:07:14,000 --> 00:07:15,120
functions

220
00:07:15,120 --> 00:07:16,560
to the client

221
00:07:16,560 --> 00:07:18,560
and the client can locally

222
00:07:18,560 --> 00:07:21,199
hash its query to obtain the hash keys

223
00:07:21,199 --> 00:07:22,560
that it has to look up in each of the

224
00:07:22,560 --> 00:07:24,560
hash tables

225
00:07:24,560 --> 00:07:26,080
however at this point

226
00:07:26,080 --> 00:07:28,240
we run into a problem because

227
00:07:28,240 --> 00:07:30,160
the actual hash keys that the client

228
00:07:30,160 --> 00:07:31,520
wants to look up in each of the hash

229
00:07:31,520 --> 00:07:33,759
tables is going to be private

230
00:07:33,759 --> 00:07:35,759
information because they're related to

231
00:07:35,759 --> 00:07:37,520
to the client's query

232
00:07:37,520 --> 00:07:39,520
so the first challenge we have to solve

233
00:07:39,520 --> 00:07:40,479
is

234
00:07:40,479 --> 00:07:43,120
privately querying these hash tables

235
00:07:43,120 --> 00:07:44,639
now fortunately

236
00:07:44,639 --> 00:07:46,400
we can use

237
00:07:46,400 --> 00:07:48,160
private information which we will to to

238
00:07:48,160 --> 00:07:50,800
do perform this task

239
00:07:50,800 --> 00:07:52,800
and in our paper we actually use

240
00:07:52,800 --> 00:07:54,720
distribute point functions which allow

241
00:07:54,720 --> 00:07:57,360
for very efficient querying of

242
00:07:57,360 --> 00:08:00,639
hash tables and two server settings

243
00:08:00,639 --> 00:08:03,039
so how does this look at a very high

244
00:08:03,039 --> 00:08:05,840
level well the client will send a pir

245
00:08:05,840 --> 00:08:08,160
query to each of the database servers

246
00:08:08,160 --> 00:08:09,840
the database servers will then use these

247
00:08:09,840 --> 00:08:13,919
queries to derive a sequencer of the

248
00:08:13,919 --> 00:08:15,680
bucket value that the client wants to

249
00:08:15,680 --> 00:08:16,960
retrieve

250
00:08:16,960 --> 00:08:19,840
but they will do so without learning

251
00:08:19,840 --> 00:08:21,680
the actual key that the client is crying

252
00:08:21,680 --> 00:08:23,039
for

253
00:08:23,039 --> 00:08:24,319
and the property

254
00:08:24,319 --> 00:08:26,000
of these secret shares is that they can

255
00:08:26,000 --> 00:08:27,680
be added together to recover the actual

256
00:08:27,680 --> 00:08:30,080
value and so the client can easily

257
00:08:30,080 --> 00:08:31,280
obtain

258
00:08:31,280 --> 00:08:32,880
all the bucket values when given these

259
00:08:32,880 --> 00:08:34,640
shares

260
00:08:34,640 --> 00:08:37,039
so coming back to our starmap protocol

261
00:08:37,039 --> 00:08:38,320
the client can

262
00:08:38,320 --> 00:08:40,399
hash the query locally and then send

263
00:08:40,399 --> 00:08:44,480
these pr queries to the two servers

264
00:08:44,480 --> 00:08:46,160
uh and if we just focus on one hash

265
00:08:46,160 --> 00:08:48,800
table for now uh the servers will just

266
00:08:48,800 --> 00:08:50,720
process these pi queries and obtain

267
00:08:50,720 --> 00:08:52,560
secret shares of the value

268
00:08:52,560 --> 00:08:54,480
that the client wants in each of the

269
00:08:54,480 --> 00:08:56,880
hash tables

270
00:08:56,880 --> 00:08:57,760
so

271
00:08:57,760 --> 00:09:01,040
after they give these hash

272
00:09:01,040 --> 00:09:03,200
the secret shares back to the client the

273
00:09:03,200 --> 00:09:04,959
client can locally recover the candidate

274
00:09:04,959 --> 00:09:07,680
set and then eliminate all the points

275
00:09:07,680 --> 00:09:09,360
that are false positives

276
00:09:09,360 --> 00:09:11,279
find the near neighbors and specifically

277
00:09:11,279 --> 00:09:12,560
find the nearest neighbor in this

278
00:09:12,560 --> 00:09:15,279
candidate set

279
00:09:15,680 --> 00:09:17,839
so the challenge now is that of database

280
00:09:17,839 --> 00:09:19,200
privacy because

281
00:09:19,200 --> 00:09:21,440
the candidate set as i described just

282
00:09:21,440 --> 00:09:23,839
now will leak a lot of information

283
00:09:23,839 --> 00:09:25,920
about the database to the client

284
00:09:25,920 --> 00:09:28,399
specifically in this strumming protocol

285
00:09:28,399 --> 00:09:30,080
the client will learn all the near

286
00:09:30,080 --> 00:09:32,480
neighbors and their features

287
00:09:32,480 --> 00:09:34,800
as well as the feature vectors of other

288
00:09:34,800 --> 00:09:36,880
points that just happen to collide

289
00:09:36,880 --> 00:09:39,600
with the client's query

290
00:09:39,600 --> 00:09:41,200
so if we visualize the baseline leakage

291
00:09:41,200 --> 00:09:43,440
which is just revealing the nearest

292
00:09:43,440 --> 00:09:45,920
neighbor id to the client

293
00:09:45,920 --> 00:09:47,360
the current candidate set is going to

294
00:09:47,360 --> 00:09:49,279
leak a lot more it's going to leak

295
00:09:49,279 --> 00:09:50,959
the ids of the near neighbors and

296
00:09:50,959 --> 00:09:53,680
non-neighbors as well as the ide and the

297
00:09:53,680 --> 00:09:57,120
features of the nearest neighbor

298
00:09:57,360 --> 00:09:59,600
so our first step is

299
00:09:59,600 --> 00:10:02,399
to to provide database privacy is to

300
00:10:02,399 --> 00:10:04,800
change a little bit how we're going to

301
00:10:04,800 --> 00:10:06,399
return the candidate set to the client

302
00:10:06,399 --> 00:10:07,600
and we're going to

303
00:10:07,600 --> 00:10:10,480
use ideas from radix sorting in order to

304
00:10:10,480 --> 00:10:13,680
prune the candidate set on the fly

305
00:10:13,680 --> 00:10:15,680
so what does this mean well we're going

306
00:10:15,680 --> 00:10:16,720
to

307
00:10:16,720 --> 00:10:19,040
essentially let the hash function

308
00:10:19,040 --> 00:10:20,320
do the work of sorting all the

309
00:10:20,320 --> 00:10:22,079
candidates by the relative distance from

310
00:10:22,079 --> 00:10:23,920
the query so how do what does this look

311
00:10:23,920 --> 00:10:24,720
like

312
00:10:24,720 --> 00:10:26,160
well if you recall we have many hash

313
00:10:26,160 --> 00:10:27,680
tables

314
00:10:27,680 --> 00:10:29,519
so for the first hash table we can set

315
00:10:29,519 --> 00:10:31,279
the collision radius to be

316
00:10:31,279 --> 00:10:33,680
very conservative such that the

317
00:10:33,680 --> 00:10:36,160
probability that a point collides with

318
00:10:36,160 --> 00:10:40,480
the query is very low if it's

319
00:10:40,480 --> 00:10:42,720
too far from the query itself

320
00:10:42,720 --> 00:10:44,959
however as we proceed through the tables

321
00:10:44,959 --> 00:10:47,839
we can increase the radius of collision

322
00:10:47,839 --> 00:10:49,360
until eventually

323
00:10:49,360 --> 00:10:50,560
one of the

324
00:10:50,560 --> 00:10:52,160
tables will pick up

325
00:10:52,160 --> 00:10:54,079
a point that will likely be the nearest

326
00:10:54,079 --> 00:10:55,120
neighbor

327
00:10:55,120 --> 00:10:57,360
and then as we proceed we'll eventually

328
00:10:57,360 --> 00:10:58,880
have a radius that's large enough to

329
00:10:58,880 --> 00:11:01,839
capture all the new neighbors

330
00:11:02,399 --> 00:11:03,120
so

331
00:11:03,120 --> 00:11:05,200
the key advantage here is that

332
00:11:05,200 --> 00:11:06,800
all the

333
00:11:06,800 --> 00:11:08,480
candidates of the candidate set will be

334
00:11:08,480 --> 00:11:10,640
sorted by the relative distance from the

335
00:11:10,640 --> 00:11:12,000
query

336
00:11:12,000 --> 00:11:15,120
and the first non-zero element in this

337
00:11:15,120 --> 00:11:16,880
candidate set is likely to be the

338
00:11:16,880 --> 00:11:19,440
nearest neighbor

339
00:11:19,440 --> 00:11:21,279
the advantage here is that we no longer

340
00:11:21,279 --> 00:11:23,440
need to include the feature vectors we

341
00:11:23,440 --> 00:11:25,839
just need to include the ids so this

342
00:11:25,839 --> 00:11:27,279
eliminates some of the leakage because

343
00:11:27,279 --> 00:11:28,640
now the client doesn't have to learn the

344
00:11:28,640 --> 00:11:30,800
exact features of each point it just

345
00:11:30,800 --> 00:11:32,480
learns the ids of the points that

346
00:11:32,480 --> 00:11:34,800
collided with the query

347
00:11:34,800 --> 00:11:36,079
however

348
00:11:36,079 --> 00:11:38,399
this is not enough because the client

349
00:11:38,399 --> 00:11:40,320
will learn all the ids of all the other

350
00:11:40,320 --> 00:11:42,079
points that surround the query and maybe

351
00:11:42,079 --> 00:11:43,360
even some false positives in the

352
00:11:43,360 --> 00:11:45,760
database

353
00:11:45,760 --> 00:11:47,600
so our next tool

354
00:11:47,600 --> 00:11:50,240
to hide these ids that aren't the

355
00:11:50,240 --> 00:11:51,600
nearest neighbor

356
00:11:51,600 --> 00:11:54,000
is going to be oblivious masking

357
00:11:54,000 --> 00:11:56,800
and describe what oblivious masking does

358
00:11:56,800 --> 00:11:59,680
but um first after um

359
00:11:59,680 --> 00:12:01,920
the servers process the pir queries what

360
00:12:01,920 --> 00:12:03,600
they'll get is a secret shared candidate

361
00:12:03,600 --> 00:12:04,959
set so they're not secret shares with

362
00:12:04,959 --> 00:12:06,240
brackets here

363
00:12:06,240 --> 00:12:07,040
and

364
00:12:07,040 --> 00:12:09,120
if we recall the baseline leakage so now

365
00:12:09,120 --> 00:12:11,200
that we've eliminated all the features

366
00:12:11,200 --> 00:12:12,720
and so the candidate set now just leaks

367
00:12:12,720 --> 00:12:15,279
the ids

368
00:12:15,920 --> 00:12:18,079
and so what we want what oblivious

369
00:12:18,079 --> 00:12:19,760
masking will achieve essentially is it's

370
00:12:19,760 --> 00:12:21,920
going to mask out all the ids that

371
00:12:21,920 --> 00:12:23,760
aren't the nearest neighbor and so the

372
00:12:23,760 --> 00:12:25,440
leakage of this mass candidate set is

373
00:12:25,440 --> 00:12:26,720
going to be pretty close to the actual

374
00:12:26,720 --> 00:12:31,440
baseline leakage that we want to achieve

375
00:12:31,760 --> 00:12:33,120
the observation

376
00:12:33,120 --> 00:12:34,480
that we will exploit for blue-based

377
00:12:34,480 --> 00:12:37,600
masking is that all the

378
00:12:37,680 --> 00:12:39,519
candidates preceding the nearest

379
00:12:39,519 --> 00:12:41,519
neighbor are going to be zero because

380
00:12:41,519 --> 00:12:44,720
there were no collisions at those radii

381
00:12:44,720 --> 00:12:46,639
and so oblivious masking is going to be

382
00:12:46,639 --> 00:12:47,760
a very simple algorithm which i'll

383
00:12:47,760 --> 00:12:49,279
describe now

384
00:12:49,279 --> 00:12:51,040
the idea is that the servers will agree

385
00:12:51,040 --> 00:12:52,959
on common randomness r1 through rn and

386
00:12:52,959 --> 00:12:54,720
this can be done easily by just having

387
00:12:54,720 --> 00:12:58,480
the servers agree on a common prgced

388
00:12:58,480 --> 00:13:00,320
and they're going to copy over elements

389
00:13:00,320 --> 00:13:02,480
from the candidate set into this mass

390
00:13:02,480 --> 00:13:04,480
candidate set now this is all done

391
00:13:04,480 --> 00:13:05,680
locally over the secret shares they

392
00:13:05,680 --> 00:13:07,200
don't have to communicate in order to do

393
00:13:07,200 --> 00:13:09,200
this

394
00:13:09,200 --> 00:13:11,040
the rule that each server will follow is

395
00:13:11,040 --> 00:13:13,040
that for each copied share they're going

396
00:13:13,040 --> 00:13:14,880
to sum all the preceding elements in the

397
00:13:14,880 --> 00:13:17,680
candidate set and add a randomized the

398
00:13:17,680 --> 00:13:18,959
randomized sum

399
00:13:18,959 --> 00:13:21,279
to the new element in the mass candidate

400
00:13:21,279 --> 00:13:22,320
set

401
00:13:22,320 --> 00:13:24,079
so what does this look like

402
00:13:24,079 --> 00:13:25,600
well for the first element we're just

403
00:13:25,600 --> 00:13:27,279
going to copy it over and because there

404
00:13:27,279 --> 00:13:28,480
are no preceding elements we're not

405
00:13:28,480 --> 00:13:30,720
going to do anything to it

406
00:13:30,720 --> 00:13:32,000
for the second element they're going to

407
00:13:32,000 --> 00:13:33,120
copy over the share but then they're

408
00:13:33,120 --> 00:13:35,040
going to sum the previous element which

409
00:13:35,040 --> 00:13:38,240
is just 0 and multiply it by r2

410
00:13:38,240 --> 00:13:40,639
which is still going to be 0

411
00:13:40,639 --> 00:13:42,720
and so that remains intact and they're

412
00:13:42,720 --> 00:13:45,440
going to proceed until they reach

413
00:13:45,440 --> 00:13:47,680
the first non-zero element which is the

414
00:13:47,680 --> 00:13:49,440
nearest neighbor id

415
00:13:49,440 --> 00:13:51,040
but because all the preceding elements

416
00:13:51,040 --> 00:13:52,320
are zero

417
00:13:52,320 --> 00:13:55,920
multiplying by r still keeps it

418
00:13:55,920 --> 00:13:58,079
remain keeps the element intact and so

419
00:13:58,079 --> 00:14:00,240
the nearest neighbor id is going to stay

420
00:14:00,240 --> 00:14:01,760
intact

421
00:14:01,760 --> 00:14:03,760
however here comes the interesting part

422
00:14:03,760 --> 00:14:06,079
for all the elements following the first

423
00:14:06,079 --> 00:14:08,320
non-zero element the sum is going to be

424
00:14:08,320 --> 00:14:11,279
non-zero and so when we multiply it by

425
00:14:11,279 --> 00:14:14,240
uh the randomness the resulting value is

426
00:14:14,240 --> 00:14:16,880
going to be uniformly random

427
00:14:16,880 --> 00:14:20,480
and so essentially for all the following

428
00:14:20,480 --> 00:14:21,920
elements in the mass candidates that

429
00:14:21,920 --> 00:14:24,000
they're all going to be uniformly random

430
00:14:24,000 --> 00:14:26,079
and completely hide the original values

431
00:14:26,079 --> 00:14:29,680
that were contained in the candidate set

432
00:14:29,680 --> 00:14:30,560
so

433
00:14:30,560 --> 00:14:32,079
at this point what the client will

434
00:14:32,079 --> 00:14:35,040
obtain is a candidate set that looks

435
00:14:35,040 --> 00:14:36,240
something like this where all the

436
00:14:36,240 --> 00:14:37,600
elements following the first non-zero

437
00:14:37,600 --> 00:14:41,440
element is going to be uniformly random

438
00:14:41,440 --> 00:14:43,519
and what this results in is that the

439
00:14:43,519 --> 00:14:45,920
client learns nothing beyond

440
00:14:45,920 --> 00:14:49,199
the id of the first non-zero value and

441
00:14:49,199 --> 00:14:50,639
so we've essentially masked out

442
00:14:50,639 --> 00:14:51,680
everything

443
00:14:51,680 --> 00:14:54,720
following the nearest neighbor id

444
00:14:54,720 --> 00:14:56,959
however the client does learn how many

445
00:14:56,959 --> 00:14:59,360
zeros precede the nearest neighbor id

446
00:14:59,360 --> 00:15:00,800
and so this results in a little bit of

447
00:15:00,800 --> 00:15:02,079
leakage

448
00:15:02,079 --> 00:15:04,560
which intuitively corresponds to

449
00:15:04,560 --> 00:15:06,560
the approximate distance between the

450
00:15:06,560 --> 00:15:08,720
query and the approximate nearest

451
00:15:08,720 --> 00:15:10,800
neighbor

452
00:15:10,800 --> 00:15:12,240
in the paper we showed this is actually

453
00:15:12,240 --> 00:15:13,199
optimal

454
00:15:13,199 --> 00:15:15,440
asymptotically but in practice on real

455
00:15:15,440 --> 00:15:18,160
world data it could be up to 15x

456
00:15:18,160 --> 00:15:20,240
more than the baseline leakage

457
00:15:20,240 --> 00:15:22,160
in the worst case

458
00:15:22,160 --> 00:15:25,839
so now i'll turn over to evaluation

459
00:15:25,839 --> 00:15:27,040
we evaluate our protocol on four

460
00:15:27,040 --> 00:15:28,560
wheelbarrow datasets

461
00:15:28,560 --> 00:15:30,880
deepon b sift gist and mnist these are

462
00:15:30,880 --> 00:15:32,880
all standard data sets used in

463
00:15:32,880 --> 00:15:36,160
near stable search benchmarks

464
00:15:36,160 --> 00:15:37,360
so on the small data sets of

465
00:15:37,360 --> 00:15:40,000
approximately so mnis which has 60 000

466
00:15:40,000 --> 00:15:41,199
items

467
00:15:41,199 --> 00:15:43,360
to achieve accuracy of over 95 we

468
00:15:43,360 --> 00:15:45,839
require about 300 milliseconds of server

469
00:15:45,839 --> 00:15:47,839
side computation and the communication

470
00:15:47,839 --> 00:15:50,480
remained under um one megabyte between

471
00:15:50,480 --> 00:15:52,800
the client and build servers

472
00:15:52,800 --> 00:15:54,240
here the number of probes is just the

473
00:15:54,240 --> 00:15:55,759
number of buckets we retrieve per hash

474
00:15:55,759 --> 00:15:58,079
table

475
00:15:58,320 --> 00:16:00,800
on the larger data sets so 1 million

476
00:16:00,800 --> 00:16:03,199
items and 10 million items we require

477
00:16:03,199 --> 00:16:05,040
1.2 seconds of server processing time

478
00:16:05,040 --> 00:16:07,600
per query and 8 seconds of processing

479
00:16:07,600 --> 00:16:10,639
time on the 10 million item data set

480
00:16:10,639 --> 00:16:12,800
and the communication remained between

481
00:16:12,800 --> 00:16:15,680
one and two megabytes

482
00:16:15,680 --> 00:16:17,440
so um

483
00:16:17,440 --> 00:16:19,120
this is five orders of magnitude less

484
00:16:19,120 --> 00:16:20,880
computation compared to the fhe base the

485
00:16:20,880 --> 00:16:22,720
approaches for approximate near same

486
00:16:22,720 --> 00:16:23,920
research

487
00:16:23,920 --> 00:16:26,160
and it's about one to three thousand x

488
00:16:26,160 --> 00:16:28,320
uh less communication compared to the

489
00:16:28,320 --> 00:16:31,680
two-party compensation based to purchase

490
00:16:31,680 --> 00:16:34,510
thank you happy to take questions

491
00:16:34,510 --> 00:16:40,000
[Applause]

492
00:16:40,000 --> 00:16:41,680
thanks sasha

493
00:16:41,680 --> 00:16:44,000
if you have a question please

494
00:16:44,000 --> 00:16:47,399
use the microphone

495
00:16:50,399 --> 00:16:53,360
hi i'm jun from um cmu this is a very

496
00:16:53,360 --> 00:16:55,440
great talk thank you and i wonder how

497
00:16:55,440 --> 00:16:57,440
could you quantify the leakage because

498
00:16:57,440 --> 00:16:59,680
you said um compared to the basic

499
00:16:59,680 --> 00:17:02,320
baseline leakage you have two times 15

500
00:17:02,320 --> 00:17:04,319
times in practice i wonder what does

501
00:17:04,319 --> 00:17:05,520
that mean

502
00:17:05,520 --> 00:17:06,559
yes so

503
00:17:06,559 --> 00:17:08,880
the way we do this in the paper it's

504
00:17:08,880 --> 00:17:11,760
quite involved but the idea is that

505
00:17:11,760 --> 00:17:13,439
depending on the data set we have to

506
00:17:13,439 --> 00:17:15,280
have different

507
00:17:15,280 --> 00:17:19,439
radix buckets to in order to

508
00:17:19,439 --> 00:17:21,280
be sure to find the nearest neighbor and

509
00:17:21,280 --> 00:17:25,199
so we look at what the largest radix um

510
00:17:25,199 --> 00:17:26,959
difference like the granularity of the

511
00:17:26,959 --> 00:17:28,880
radix buckets and we look at how much

512
00:17:28,880 --> 00:17:31,520
more that is relative to to the baseline

513
00:17:31,520 --> 00:17:33,600
which is leaking nothing

514
00:17:33,600 --> 00:17:35,840
so essentially the

515
00:17:35,840 --> 00:17:37,520
the radius at which the nearest neighbor

516
00:17:37,520 --> 00:17:39,360
collides is going to reveal

517
00:17:39,360 --> 00:17:40,400
um

518
00:17:40,400 --> 00:17:41,919
some information some distance

519
00:17:41,919 --> 00:17:43,120
information

520
00:17:43,120 --> 00:17:47,280
intuitively yeah okay thank you

521
00:17:47,280 --> 00:17:48,799
can you speak a little bit about how you

522
00:17:48,799 --> 00:17:51,919
make the radix approach and the masking

523
00:17:51,919 --> 00:17:54,400
work in the single server case

524
00:17:54,400 --> 00:17:56,000
uh yeah so the

525
00:17:56,000 --> 00:17:57,840
the mask oblivious masking stays pretty

526
00:17:57,840 --> 00:18:00,160
much the same except it operates over

527
00:18:00,160 --> 00:18:02,640
homomorphic encryption

528
00:18:02,640 --> 00:18:04,720
and

529
00:18:04,720 --> 00:18:07,600
the the radix sorting is stays

530
00:18:07,600 --> 00:18:09,120
pretty much the same the only thing that

531
00:18:09,120 --> 00:18:10,640
we need

532
00:18:10,640 --> 00:18:12,400
the only reason we need the two server

533
00:18:12,400 --> 00:18:14,799
settings actually to query the

534
00:18:14,799 --> 00:18:16,799
the hash tables using a distribute point

535
00:18:16,799 --> 00:18:18,480
function and so that's what makes

536
00:18:18,480 --> 00:18:20,000
everything a lot faster all the other

537
00:18:20,000 --> 00:18:21,600
primitives

538
00:18:21,600 --> 00:18:24,639
being pretty much the same

539
00:18:26,880 --> 00:18:29,600
you said it's um maliciously secure yeah

540
00:18:29,600 --> 00:18:32,559
but it doesn't um defend

541
00:18:32,559 --> 00:18:34,160
at least what you described doesn't seem

542
00:18:34,160 --> 00:18:36,640
to defend like from a malicious

543
00:18:36,640 --> 00:18:39,039
um server sending something wrong then

544
00:18:39,039 --> 00:18:41,200
the first few entries wouldn't be zero

545
00:18:41,200 --> 00:18:43,200
and then the client would get garbage

546
00:18:43,200 --> 00:18:45,600
maybe yes so um we

547
00:18:45,600 --> 00:18:47,520
specifically mean that uh

548
00:18:47,520 --> 00:18:49,280
maliciously malicious security against

549
00:18:49,280 --> 00:18:52,480
privacy so so that means like um if the

550
00:18:52,480 --> 00:18:54,400
either protocol

551
00:18:54,400 --> 00:18:56,559
either party deviates from the protocol

552
00:18:56,559 --> 00:18:58,799
then uh privacy remains intact even

553
00:18:58,799 --> 00:19:00,400
though correctness is not

554
00:19:00,400 --> 00:19:02,480
okay but you don't have anything like

555
00:19:02,480 --> 00:19:05,520
that the client could check if what the

556
00:19:05,520 --> 00:19:06,960
service send is so you could actually

557
00:19:06,960 --> 00:19:09,200
easily do that in the two-server setting

558
00:19:09,200 --> 00:19:10,960
because um

559
00:19:10,960 --> 00:19:12,880
if

560
00:19:12,880 --> 00:19:14,080
if one of the secret shares was

561
00:19:14,080 --> 00:19:15,840
corrupted could tell that one of the

562
00:19:15,840 --> 00:19:17,679
secret shares was corrupted but that

563
00:19:17,679 --> 00:19:20,160
would require additional

564
00:19:20,160 --> 00:19:22,240
analysis yeah okay thanks but in a

565
00:19:22,240 --> 00:19:23,440
single server setting that wouldn't be

566
00:19:23,440 --> 00:19:25,840
possible

