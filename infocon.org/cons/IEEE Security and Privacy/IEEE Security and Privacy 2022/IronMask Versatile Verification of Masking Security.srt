1
00:00:02,639 --> 00:00:04,880
i will be presenting our paper iron mask

2
00:00:04,880 --> 00:00:06,399
which is a new very versatile

3
00:00:06,399 --> 00:00:09,920
verification tool for masking security

4
00:00:09,920 --> 00:00:11,360
in this work we reason about the

5
00:00:11,360 --> 00:00:13,200
security of implementations against side

6
00:00:13,200 --> 00:00:15,519
channel attacks these attacks derive

7
00:00:15,519 --> 00:00:17,199
information about the secret values

8
00:00:17,199 --> 00:00:19,359
manipulated during the execution of an

9
00:00:19,359 --> 00:00:21,600
encryption algorithm from measurements

10
00:00:21,600 --> 00:00:23,119
such as power consumption or

11
00:00:23,119 --> 00:00:25,680
electromagnetic radiations

12
00:00:25,680 --> 00:00:27,439
and so the most deployed countermeasure

13
00:00:27,439 --> 00:00:29,119
against this class of attacks is the

14
00:00:29,119 --> 00:00:30,640
masking schemes

15
00:00:30,640 --> 00:00:32,800
the idea is to split a sensitive

16
00:00:32,800 --> 00:00:35,040
variable into n values that we call

17
00:00:35,040 --> 00:00:37,360
shares and the recombination should give

18
00:00:37,360 --> 00:00:40,000
the original secret typically the first

19
00:00:40,000 --> 00:00:42,559
n minus one shares are drawn uniformly

20
00:00:42,559 --> 00:00:44,800
at random and the last share is the

21
00:00:44,800 --> 00:00:46,559
recombination of the secret and the

22
00:00:46,559 --> 00:00:48,800
previously generated shares

23
00:00:48,800 --> 00:00:50,719
this helps break the dependence of the

24
00:00:50,719 --> 00:00:52,800
secret with any set of n minus one

25
00:00:52,800 --> 00:00:54,960
shares making it difficult to recover

26
00:00:54,960 --> 00:00:57,680
the secret as n grows

27
00:00:57,680 --> 00:00:59,520
to reason about the security of masking

28
00:00:59,520 --> 00:01:01,440
schemes the community introduced the

29
00:01:01,440 --> 00:01:04,080
idea of leakage models usually we prove

30
00:01:04,080 --> 00:01:06,479
that a computational circuit is secure

31
00:01:06,479 --> 00:01:08,640
in a certain model if the leaking

32
00:01:08,640 --> 00:01:10,720
variables do not reveal any information

33
00:01:10,720 --> 00:01:12,479
about the secret values

34
00:01:12,479 --> 00:01:15,119
so the most widely used model until now

35
00:01:15,119 --> 00:01:17,200
is the probing model where we consider

36
00:01:17,200 --> 00:01:19,040
that during an execution there is a

37
00:01:19,040 --> 00:01:21,680
fixed number of t leaking variables

38
00:01:21,680 --> 00:01:23,840
another widely used model is the random

39
00:01:23,840 --> 00:01:26,400
probing model where each variable leaks

40
00:01:26,400 --> 00:01:28,240
with a certain probability p

41
00:01:28,240 --> 00:01:30,320
independently from the others

42
00:01:30,320 --> 00:01:32,079
and the last one is the noisy leakage

43
00:01:32,079 --> 00:01:34,400
model where all variables leak a noisy

44
00:01:34,400 --> 00:01:36,320
function of their value

45
00:01:36,320 --> 00:01:38,479
so in any model the security of almost

46
00:01:38,479 --> 00:01:40,400
all masking approaches relies on the

47
00:01:40,400 --> 00:01:42,640
security of small gadgets and their

48
00:01:42,640 --> 00:01:45,360
composition so a gadget is just a mask

49
00:01:45,360 --> 00:01:47,439
circuit which performs a certain

50
00:01:47,439 --> 00:01:49,520
operation on masked variables such as

51
00:01:49,520 --> 00:01:51,759
addition or multiplication

52
00:01:51,759 --> 00:01:54,399
and even at reasonable orders masking

53
00:01:54,399 --> 00:01:56,399
orders the manual verification of

54
00:01:56,399 --> 00:01:58,719
security properties on small gadgets has

55
00:01:58,719 --> 00:02:01,280
been shown to be very error prone

56
00:02:01,280 --> 00:02:03,840
therefore automatic tools are regularly

57
00:02:03,840 --> 00:02:06,000
built to apply a formal verification

58
00:02:06,000 --> 00:02:07,200
method

59
00:02:07,200 --> 00:02:09,679
the goal behind automatic tools is to

60
00:02:09,679 --> 00:02:11,440
check security and composition

61
00:02:11,440 --> 00:02:13,840
properties for relatively small circuits

62
00:02:13,840 --> 00:02:15,120
and gadgets

63
00:02:15,120 --> 00:02:17,360
the main idea is to determine the sets

64
00:02:17,360 --> 00:02:19,200
of variables during it

65
00:02:19,200 --> 00:02:21,680
during the execution of an algorithm

66
00:02:21,680 --> 00:02:23,840
which can potentially reveal information

67
00:02:23,840 --> 00:02:25,440
on the secret inputs

68
00:02:25,440 --> 00:02:27,120
and then depending on the checked

69
00:02:27,120 --> 00:02:29,760
property conclude on the security of the

70
00:02:29,760 --> 00:02:32,640
considered circuit

71
00:02:32,879 --> 00:02:34,879
our contributions can be summarized as

72
00:02:34,879 --> 00:02:37,920
follows we formalize all of the probing

73
00:02:37,920 --> 00:02:39,599
and random probing properties of the

74
00:02:39,599 --> 00:02:41,599
state-of-the-art from a single common

75
00:02:41,599 --> 00:02:43,280
building block function

76
00:02:43,280 --> 00:02:45,120
and show that all of the security

77
00:02:45,120 --> 00:02:47,280
properties can be verified using a

78
00:02:47,280 --> 00:02:50,720
unique instantiation of this function

79
00:02:50,720 --> 00:02:53,200
from this formalization we provide an

80
00:02:53,200 --> 00:02:55,599
exact verification method for almost all

81
00:02:55,599 --> 00:02:57,440
circuits and gadgets in the state of the

82
00:02:57,440 --> 00:03:00,400
art using an extension of the algebraic

83
00:03:00,400 --> 00:03:02,560
characterization introduced in previous

84
00:03:02,560 --> 00:03:05,360
works of gadgets with linear randomness

85
00:03:05,360 --> 00:03:07,599
which remains where all random values

86
00:03:07,599 --> 00:03:09,360
are added additive

87
00:03:09,360 --> 00:03:11,440
to more general gadgets with nonlinear

88
00:03:11,440 --> 00:03:12,720
randomness

89
00:03:12,720 --> 00:03:14,959
in fact many previous tools in the state

90
00:03:14,959 --> 00:03:17,440
of the art perform verification but

91
00:03:17,440 --> 00:03:20,080
provide sometimes inexact results this

92
00:03:20,080 --> 00:03:21,680
means that they can deem a circuit

93
00:03:21,680 --> 00:03:24,640
insecure while it is actually secure

94
00:03:24,640 --> 00:03:26,959
with our strategy we eliminate this case

95
00:03:26,959 --> 00:03:29,280
from the verification

96
00:03:29,280 --> 00:03:31,440
and finally we introduce ironmask a new

97
00:03:31,440 --> 00:03:33,440
versatile verification tool for all

98
00:03:33,440 --> 00:03:35,040
probing and random probing like

99
00:03:35,040 --> 00:03:37,440
properties in the state of the art iron

100
00:03:37,440 --> 00:03:39,280
mask supports the verification of

101
00:03:39,280 --> 00:03:40,720
traditional gadgets with linear

102
00:03:40,720 --> 00:03:43,360
randomness as well as newly formalized

103
00:03:43,360 --> 00:03:46,239
gadgets with nonlinear randomness and it

104
00:03:46,239 --> 00:03:48,400
provides a complete verification method

105
00:03:48,400 --> 00:03:51,040
for both types of gadgets based on our

106
00:03:51,040 --> 00:03:53,760
extended algebraic characterization

107
00:03:53,760 --> 00:03:55,599
iron mask also implements several

108
00:03:55,599 --> 00:03:58,000
optimizations to make the verification

109
00:03:58,000 --> 00:03:59,680
faster

110
00:03:59,680 --> 00:04:02,239
so we will first start by taking a look

111
00:04:02,239 --> 00:04:03,519
at the building block for the

112
00:04:03,519 --> 00:04:06,239
formalization of security properties

113
00:04:06,239 --> 00:04:08,799
so security proofs generally demonstrate

114
00:04:08,799 --> 00:04:11,439
that the observations made on a masked

115
00:04:11,439 --> 00:04:14,480
circuit can be perfectly simulated

116
00:04:14,480 --> 00:04:17,358
from a subset of its input shares

117
00:04:17,358 --> 00:04:20,238
a perfect simulation basically means

118
00:04:20,238 --> 00:04:22,240
that

119
00:04:22,240 --> 00:04:24,720
an algorithm with access to these input

120
00:04:24,720 --> 00:04:27,520
shares can produce a perfect simulation

121
00:04:27,520 --> 00:04:29,680
of distribution of the observed

122
00:04:29,680 --> 00:04:30,960
variables

123
00:04:30,960 --> 00:04:32,960
if the number of shares needed for such

124
00:04:32,960 --> 00:04:35,120
a simulation is less than the total

125
00:04:35,120 --> 00:04:37,199
number of shares then we can conclude

126
00:04:37,199 --> 00:04:38,960
that the observations don't reveal

127
00:04:38,960 --> 00:04:40,800
information about the actual secret

128
00:04:40,800 --> 00:04:42,560
because to reveal information about it

129
00:04:42,560 --> 00:04:45,040
we need all of the shares to be involved

130
00:04:45,040 --> 00:04:47,919
in the computation

131
00:04:47,919 --> 00:04:50,240
so the idea of the formalization is that

132
00:04:50,240 --> 00:04:52,240
given a set of probes on a circuit and

133
00:04:52,240 --> 00:04:54,320
potentially a set of output shares

134
00:04:54,320 --> 00:04:55,360
probes

135
00:04:55,360 --> 00:04:57,280
we need to determine the set of input

136
00:04:57,280 --> 00:04:59,919
shares necessary for perfect simulation

137
00:04:59,919 --> 00:05:02,160
of p and o

138
00:05:02,160 --> 00:05:04,160
for instance if we take the following

139
00:05:04,160 --> 00:05:07,039
set of variables where r0 and r1 are

140
00:05:07,039 --> 00:05:10,240
values drawn uniformly at random and a

141
00:05:10,240 --> 00:05:12,880
as our input sharing we can observe that

142
00:05:12,880 --> 00:05:15,120
only the share a2 is needed for a

143
00:05:15,120 --> 00:05:17,360
perfect simulation of the distribution

144
00:05:17,360 --> 00:05:18,800
of this set

145
00:05:18,800 --> 00:05:21,199
why is this the case it's simply because

146
00:05:21,199 --> 00:05:23,039
the distribution of the first two

147
00:05:23,039 --> 00:05:26,000
variables is made uniform thanks to the

148
00:05:26,000 --> 00:05:28,479
addition of the respective random values

149
00:05:28,479 --> 00:05:31,039
r0 and r1

150
00:05:31,039 --> 00:05:32,880
so this technique is common to the

151
00:05:32,880 --> 00:05:34,960
verification of any security property in

152
00:05:34,960 --> 00:05:36,720
the state of the art

153
00:05:36,720 --> 00:05:39,120
to formalize it we define a single

154
00:05:39,120 --> 00:05:42,560
building block sis function for sets of

155
00:05:42,560 --> 00:05:44,000
input shares

156
00:05:44,000 --> 00:05:46,160
this function takes as input a set of

157
00:05:46,160 --> 00:05:47,759
probes on

158
00:05:47,759 --> 00:05:50,400
internal variables of the gadget

159
00:05:50,400 --> 00:05:53,039
as well as a set of output shares and

160
00:05:53,039 --> 00:05:55,840
returns a set of input shares necessary

161
00:05:55,840 --> 00:05:57,840
and sufficient to perfect city to

162
00:05:57,840 --> 00:05:59,759
perfectly stimulate all of the

163
00:05:59,759 --> 00:06:01,680
considered probes

164
00:06:01,680 --> 00:06:04,479
regardless of the strategy this function

165
00:06:04,479 --> 00:06:06,960
implements if it respects the described

166
00:06:06,960 --> 00:06:09,360
signature we show in our paper that it

167
00:06:09,360 --> 00:06:11,759
can be used to express all of the secret

168
00:06:11,759 --> 00:06:14,000
all of the security properties

169
00:06:14,000 --> 00:06:15,759
in the following i will present an

170
00:06:15,759 --> 00:06:17,759
instantiation of this function which

171
00:06:17,759 --> 00:06:19,919
leads to an exact verification method

172
00:06:19,919 --> 00:06:23,680
for some forzan gad or gadgets

173
00:06:24,160 --> 00:06:25,919
we first start with the algebraic

174
00:06:25,919 --> 00:06:27,919
characterization of gadgets with linear

175
00:06:27,919 --> 00:06:30,479
randomness for this kind of gadgets we

176
00:06:30,479 --> 00:06:33,039
consider that input shares go through an

177
00:06:33,039 --> 00:06:35,840
arithmetic circuit f which can perform

178
00:06:35,840 --> 00:06:37,840
any operations such as addition and

179
00:06:37,840 --> 00:06:39,440
multiplication

180
00:06:39,440 --> 00:06:41,600
then the random values used by the

181
00:06:41,600 --> 00:06:43,840
gadget only appear in the second

182
00:06:43,840 --> 00:06:47,440
arithmetic circuit r which takes

183
00:06:47,440 --> 00:06:48,720
as input

184
00:06:48,720 --> 00:06:51,919
the vector of randomness small r and the

185
00:06:51,919 --> 00:06:53,919
output of the circuit f

186
00:06:53,919 --> 00:06:55,840
so each coordinate and the vector r is

187
00:06:55,840 --> 00:06:58,479
basically drawn uniformly at random the

188
00:06:58,479 --> 00:07:00,720
linear arithmetic circuit is only

189
00:07:00,720 --> 00:07:02,960
allowed to perform linear operations

190
00:07:02,960 --> 00:07:04,880
between the output of f and the random

191
00:07:04,880 --> 00:07:06,720
values which means that the random

192
00:07:06,720 --> 00:07:09,039
values are additive on all variables

193
00:07:09,039 --> 00:07:10,800
involved in the gadget

194
00:07:10,800 --> 00:07:13,360
thanks to this structure any internal

195
00:07:13,360 --> 00:07:15,039
variable on such a gadget can be

196
00:07:15,039 --> 00:07:17,680
expressed as the sum of the output of an

197
00:07:17,680 --> 00:07:19,680
arithmetic function f p

198
00:07:19,680 --> 00:07:22,319
which takes the input sharings as input

199
00:07:22,319 --> 00:07:24,479
with a linear combination of some random

200
00:07:24,479 --> 00:07:26,960
values from the vector r this linear

201
00:07:26,960 --> 00:07:28,960
combination is expressed through the

202
00:07:28,960 --> 00:07:31,759
vector of coefficients s p

203
00:07:31,759 --> 00:07:34,080
so given a couple of probes

204
00:07:34,080 --> 00:07:36,960
p1 through pd on the gadget we are

205
00:07:36,960 --> 00:07:38,800
interested in determining the set of

206
00:07:38,800 --> 00:07:40,880
input shares necessary for perfect

207
00:07:40,880 --> 00:07:43,759
simulation of all probes mp

208
00:07:43,759 --> 00:07:46,479
to do this we need to first determine

209
00:07:46,479 --> 00:07:48,879
the probes which are distributed

210
00:07:48,879 --> 00:07:51,680
uniformly at random thanks to addition

211
00:07:51,680 --> 00:07:53,599
of random values

212
00:07:53,599 --> 00:07:55,680
so thanks to the particular form of the

213
00:07:55,680 --> 00:07:57,680
probes in this case we can easily

214
00:07:57,680 --> 00:07:59,680
determine this using a gaussian

215
00:07:59,680 --> 00:08:01,280
elimination technique

216
00:08:01,280 --> 00:08:04,160
in other words we can construct a matrix

217
00:08:04,160 --> 00:08:07,520
s where the i throw is the vector s of p

218
00:08:07,520 --> 00:08:09,280
of the randomness dependence for the

219
00:08:09,280 --> 00:08:11,440
corresponding probe i

220
00:08:11,440 --> 00:08:13,759
then we can perform a row reduction on

221
00:08:13,759 --> 00:08:16,400
this matrix to obtain a matrix of the

222
00:08:16,400 --> 00:08:19,120
following form as you can see where the

223
00:08:19,120 --> 00:08:22,080
first m rows are equal to 0

224
00:08:22,080 --> 00:08:24,400
and the remaining rows each contain a

225
00:08:24,400 --> 00:08:27,120
non-zero coefficient add a column which

226
00:08:27,120 --> 00:08:29,520
does not appear at any other row

227
00:08:29,520 --> 00:08:31,599
this is observed through the structure

228
00:08:31,599 --> 00:08:34,159
of the identity sub matrix

229
00:08:34,159 --> 00:08:35,760
thanks to the properties of the row

230
00:08:35,760 --> 00:08:38,719
reduction we can apply the same set of

231
00:08:38,719 --> 00:08:40,640
operations on the original vector of

232
00:08:40,640 --> 00:08:44,159
probes using the invertible matrix n

233
00:08:44,159 --> 00:08:45,760
we can see thanks to the form of the

234
00:08:45,760 --> 00:08:48,080
matrix s prime that the first

235
00:08:48,080 --> 00:08:51,360
expressions p prime 1 to p prime m do

236
00:08:51,360 --> 00:08:54,320
not involve any random values while the

237
00:08:54,320 --> 00:08:56,560
remaining expressions each contain a

238
00:08:56,560 --> 00:08:58,480
unique random value which does not

239
00:08:58,480 --> 00:09:00,640
appear anywhere else

240
00:09:00,640 --> 00:09:03,440
this means that the expressions of p

241
00:09:03,440 --> 00:09:06,640
prime m plus 1 to p prime d can be

242
00:09:06,640 --> 00:09:09,440
simulated uniformly at random and the

243
00:09:09,440 --> 00:09:11,279
input shares necessary for the perfect

244
00:09:11,279 --> 00:09:13,120
simulation are exactly the ones

245
00:09:13,120 --> 00:09:15,120
appearing in the expressions of p prime

246
00:09:15,120 --> 00:09:16,880
1 to p prime m

247
00:09:16,880 --> 00:09:19,040
we prove in our paper that perfectly

248
00:09:19,040 --> 00:09:21,360
simulating the p prime i probes is

249
00:09:21,360 --> 00:09:23,440
equivalent to perfectly simulating the

250
00:09:23,440 --> 00:09:24,959
pi probes

251
00:09:24,959 --> 00:09:27,440
finally thanks to the exactness of the

252
00:09:27,440 --> 00:09:29,519
gaussian elimination technique we are

253
00:09:29,519 --> 00:09:31,440
sure that the determined input shares

254
00:09:31,440 --> 00:09:33,519
are necessary and sufficient for a

255
00:09:33,519 --> 00:09:35,360
perfect simulation making the

256
00:09:35,360 --> 00:09:37,519
verification method exact

257
00:09:37,519 --> 00:09:39,600
and this is typically the instantiation

258
00:09:39,600 --> 00:09:42,240
of sis function which is implemented in

259
00:09:42,240 --> 00:09:44,320
iron mask for gadgets with linear

260
00:09:44,320 --> 00:09:46,959
randomness

261
00:09:47,920 --> 00:09:49,519
we can extend this algebraic

262
00:09:49,519 --> 00:09:51,839
characterization to more general gadgets

263
00:09:51,839 --> 00:09:53,839
where random values are not always

264
00:09:53,839 --> 00:09:55,040
additive

265
00:09:55,040 --> 00:09:56,880
here we take the example of two input

266
00:09:56,880 --> 00:09:59,040
gadgets we consider that before

267
00:09:59,040 --> 00:10:01,360
performing any operations between input

268
00:10:01,360 --> 00:10:03,839
shares some random values are added to

269
00:10:03,839 --> 00:10:06,640
their expressions in other words each of

270
00:10:06,640 --> 00:10:09,120
the input shares of x1 and x2 go through

271
00:10:09,120 --> 00:10:12,000
linear arithmetic circuits r1 and r2

272
00:10:12,000 --> 00:10:13,839
along with the corresponding randomness

273
00:10:13,839 --> 00:10:16,560
vectors small r1 and small r2

274
00:10:16,560 --> 00:10:19,680
then the outputs of r1 and r2 are given

275
00:10:19,680 --> 00:10:21,839
as input to the general arithmetic

276
00:10:21,839 --> 00:10:24,079
circuit f which can perform any

277
00:10:24,079 --> 00:10:27,200
operations before finally adding some

278
00:10:27,200 --> 00:10:29,440
random values to its output thanks to

279
00:10:29,440 --> 00:10:31,920
the linear arithmetic circuit are

280
00:10:31,920 --> 00:10:35,600
so basically the circuits r r1 and r2

281
00:10:35,600 --> 00:10:38,160
are only allowed to perform additions

282
00:10:38,160 --> 00:10:41,120
while f can perform any operations

283
00:10:41,120 --> 00:10:43,120
this covers newly constructed gadgets

284
00:10:43,120 --> 00:10:44,959
for instance in the state of the art

285
00:10:44,959 --> 00:10:47,040
such as multiplication gadgets which

286
00:10:47,040 --> 00:10:49,120
first refresh their input sharings with

287
00:10:49,120 --> 00:10:50,800
new random values

288
00:10:50,800 --> 00:10:53,200
the only assumption we need in this case

289
00:10:53,200 --> 00:10:55,279
is that the random values and the three

290
00:10:55,279 --> 00:10:57,920
randomness vectors are all independent

291
00:10:57,920 --> 00:11:00,640
and drawn uniformly at random and this

292
00:11:00,640 --> 00:11:02,560
description can be extended to gadgets

293
00:11:02,560 --> 00:11:05,760
with more input sharings

294
00:11:06,399 --> 00:11:08,800
in this case on such gadgets the

295
00:11:08,800 --> 00:11:10,720
expression of any probe is a bit more

296
00:11:10,720 --> 00:11:12,560
complicated since we need to consider

297
00:11:12,560 --> 00:11:15,440
all arithmetic circuits nevertheless we

298
00:11:15,440 --> 00:11:18,320
can still express any probe as a sum of

299
00:11:18,320 --> 00:11:20,399
a linear combination of randomness from

300
00:11:20,399 --> 00:11:23,200
vector r and the output of an arithmetic

301
00:11:23,200 --> 00:11:24,959
function f p

302
00:11:24,959 --> 00:11:28,000
then the inputs of this function f p are

303
00:11:28,000 --> 00:11:30,399
also expressed as sums between input

304
00:11:30,399 --> 00:11:32,640
shares and random values thanks to the

305
00:11:32,640 --> 00:11:35,839
structure of the circuits r1 and r2

306
00:11:35,839 --> 00:11:37,760
we can extend the verification technique

307
00:11:37,760 --> 00:11:39,600
we described for gadgets with linear

308
00:11:39,600 --> 00:11:41,920
randomness to this kind of gadgets by

309
00:11:41,920 --> 00:11:44,320
performing additional operations

310
00:11:44,320 --> 00:11:46,640
in other words we need to perform three

311
00:11:46,640 --> 00:11:49,279
gaussian eliminations the first one with

312
00:11:49,279 --> 00:11:51,279
respect to random values in the vector

313
00:11:51,279 --> 00:11:52,320
small r

314
00:11:52,320 --> 00:11:54,240
this can be done as before with the same

315
00:11:54,240 --> 00:11:56,720
construction for the matrix s

316
00:11:56,720 --> 00:11:59,360
then from the resulting expression we

317
00:11:59,360 --> 00:12:01,360
can do some kind of factorization on the

318
00:12:01,360 --> 00:12:04,320
expressions which we detail in our paper

319
00:12:04,320 --> 00:12:07,360
in order to perform two additional

320
00:12:07,360 --> 00:12:09,839
gaussian eliminations one with respect

321
00:12:09,839 --> 00:12:12,240
to random values appearing in an r1 and

322
00:12:12,240 --> 00:12:14,399
one with respect to random values

323
00:12:14,399 --> 00:12:17,200
appearing in r2 to eliminate any random

324
00:12:17,200 --> 00:12:18,880
values appearing in the remaining

325
00:12:18,880 --> 00:12:20,639
expressions

326
00:12:20,639 --> 00:12:22,880
at the end some expressions will be

327
00:12:22,880 --> 00:12:24,959
distributed uniformly at random thanks

328
00:12:24,959 --> 00:12:27,200
to the randoms from r some will be

329
00:12:27,200 --> 00:12:29,120
distributed uniformly at random thanks

330
00:12:29,120 --> 00:12:31,680
to the randoms from r1 and r2 and the

331
00:12:31,680 --> 00:12:33,600
input shares necessary to perfectly

332
00:12:33,600 --> 00:12:36,000
simulate the remaining probes are

333
00:12:36,000 --> 00:12:37,839
exactly the ones appearing in the

334
00:12:37,839 --> 00:12:40,000
remaining expressions

335
00:12:40,000 --> 00:12:43,040
in our paper we prove that this strategy

336
00:12:43,040 --> 00:12:45,279
is an exact verification method for such

337
00:12:45,279 --> 00:12:47,760
gadgets

338
00:12:47,760 --> 00:12:49,760
so iron mask is a new tool that we

339
00:12:49,760 --> 00:12:51,839
developed to check probing and random

340
00:12:51,839 --> 00:12:54,240
probing security properties using the

341
00:12:54,240 --> 00:12:56,560
algorithms presented earlier

342
00:12:56,560 --> 00:12:58,639
it is written completely in c and

343
00:12:58,639 --> 00:13:00,959
implements state-of-the-art verification

344
00:13:00,959 --> 00:13:03,440
optimizations to further accelerate the

345
00:13:03,440 --> 00:13:05,120
verification

346
00:13:05,120 --> 00:13:07,440
it also represents variable dependence

347
00:13:07,440 --> 00:13:09,519
as integer arrays to accelerate

348
00:13:09,519 --> 00:13:13,279
operations using simplex ors and ends

349
00:13:13,279 --> 00:13:15,279
to give you an overview you can give the

350
00:13:15,279 --> 00:13:17,920
tool as input any gadget represented as

351
00:13:17,920 --> 00:13:20,560
in this example the first lines describe

352
00:13:20,560 --> 00:13:22,480
the configuration with input and output

353
00:13:22,480 --> 00:13:24,639
variables random variables and the

354
00:13:24,639 --> 00:13:26,079
number of shares

355
00:13:26,079 --> 00:13:28,320
then the remaining lines are simply the

356
00:13:28,320 --> 00:13:30,880
computations done by the gadget

357
00:13:30,880 --> 00:13:33,360
given to ira mask it can check

358
00:13:33,360 --> 00:13:36,160
probing-like properties such as sni or

359
00:13:36,160 --> 00:13:39,519
ni or pini and either deem the circuit

360
00:13:39,519 --> 00:13:42,240
secure or provide a counter-example as

361
00:13:42,240 --> 00:13:44,639
is as described by the properties

362
00:13:44,639 --> 00:13:46,079
in the case of random probing-like

363
00:13:46,079 --> 00:13:48,160
properties it computes the corresponding

364
00:13:48,160 --> 00:13:50,480
failure function ffp which we recall in

365
00:13:50,480 --> 00:13:52,240
our paper

366
00:13:52,240 --> 00:13:54,560
for instance to verify sni you give the

367
00:13:54,560 --> 00:13:56,480
tool the name of the file of the circuit

368
00:13:56,480 --> 00:13:58,639
the property name and the parameter for

369
00:13:58,639 --> 00:14:00,720
the property of any in this case the t

370
00:14:00,720 --> 00:14:03,199
parameter

371
00:14:03,199 --> 00:14:05,199
to evaluate iron mask you can see in

372
00:14:05,199 --> 00:14:07,279
this table a comparison between most

373
00:14:07,279 --> 00:14:09,279
important tools in the state of the art

374
00:14:09,279 --> 00:14:11,440
in terms of support for different forms

375
00:14:11,440 --> 00:14:13,600
of gadgets as well as the efficiency of

376
00:14:13,600 --> 00:14:15,120
the verification

377
00:14:15,120 --> 00:14:16,880
some verification tools as you see

378
00:14:16,880 --> 00:14:19,519
support gadgets but do not provide exact

379
00:14:19,519 --> 00:14:21,760
results in a general case

380
00:14:21,760 --> 00:14:24,160
while iron mask does not handle gadgets

381
00:14:24,160 --> 00:14:26,240
with more than two inputs for nonlinear

382
00:14:26,240 --> 00:14:27,440
randomness

383
00:14:27,440 --> 00:14:29,519
it provides an exact verification method

384
00:14:29,519 --> 00:14:31,680
for all gadgets with linear randomness

385
00:14:31,680 --> 00:14:33,839
and nonlinear randomness with two inputs

386
00:14:33,839 --> 00:14:36,720
which is not supported by any other tool

387
00:14:36,720 --> 00:14:38,959
compared to wraps the only other tool

388
00:14:38,959 --> 00:14:40,720
which we could compare to to check

389
00:14:40,720 --> 00:14:42,880
random probing like properties iron

390
00:14:42,880 --> 00:14:45,120
masks iron mask provides fast

391
00:14:45,120 --> 00:14:47,680
verification while wraps uses symbolic

392
00:14:47,680 --> 00:14:51,120
computations and is much slower

393
00:14:51,120 --> 00:14:53,360
in terms of performance iron mask is

394
00:14:53,360 --> 00:14:55,519
competitive and has similar performance

395
00:14:55,519 --> 00:14:57,680
to other fast verification tools for

396
00:14:57,680 --> 00:15:00,240
probing like properties and we provide

397
00:15:00,240 --> 00:15:02,480
full benchmark and analysis in our paper

398
00:15:02,480 --> 00:15:03,760
for this

399
00:15:03,760 --> 00:15:05,360
in the case of random probing like

400
00:15:05,360 --> 00:15:08,160
properties ironmax has a clear speed up

401
00:15:08,160 --> 00:15:10,639
compared to wraps we take the example of

402
00:15:10,639 --> 00:15:12,800
the well-known isw multiplication

403
00:15:12,800 --> 00:15:15,040
circuit for five six and seven shares

404
00:15:15,040 --> 00:15:16,480
configurations

405
00:15:16,480 --> 00:15:18,240
we can see through the increasing number

406
00:15:18,240 --> 00:15:20,959
of shares that verification with iron

407
00:15:20,959 --> 00:15:22,959
mask scales well with the number of

408
00:15:22,959 --> 00:15:25,199
shares while wraps quickly becomes

409
00:15:25,199 --> 00:15:28,240
impractical to use

410
00:15:29,279 --> 00:15:31,920
to conclude in this work we introduce a

411
00:15:31,920 --> 00:15:34,560
new formalization of all probing and

412
00:15:34,560 --> 00:15:36,560
random problem-like properties

413
00:15:36,560 --> 00:15:39,519
then using an extension of an algebraic

414
00:15:39,519 --> 00:15:41,680
characterization introduced in previous

415
00:15:41,680 --> 00:15:42,639
works

416
00:15:42,639 --> 00:15:45,040
we provide exact verification methods

417
00:15:45,040 --> 00:15:47,279
which covers all gadgets used in the

418
00:15:47,279 --> 00:15:49,519
state of the art

419
00:15:49,519 --> 00:15:52,000
from this theory we derive a new formal

420
00:15:52,000 --> 00:15:54,480
verification tool iron mask which is

421
00:15:54,480 --> 00:15:56,639
competitive with our with other

422
00:15:56,639 --> 00:15:58,480
verification tools for probing like

423
00:15:58,480 --> 00:15:59,680
properties

424
00:15:59,680 --> 00:16:02,399
and for random probing like properties

425
00:16:02,399 --> 00:16:04,639
our tool is several orders of market

426
00:16:04,639 --> 00:16:07,199
magnitudes faster than the previous 12

427
00:16:07,199 --> 00:16:08,560
wraps

428
00:16:08,560 --> 00:16:11,199
besides providing an exact method which

429
00:16:11,199 --> 00:16:13,600
is not the case for wraps

430
00:16:13,600 --> 00:16:15,920
so and for future works we would like to

431
00:16:15,920 --> 00:16:18,320
extend iron mask to support any finite

432
00:16:18,320 --> 00:16:20,560
field and any gadgets without being

433
00:16:20,560 --> 00:16:22,720
limited to the two gadgets with two

434
00:16:22,720 --> 00:16:24,720
inputs in the case of nonlinear

435
00:16:24,720 --> 00:16:26,000
randomness

436
00:16:26,000 --> 00:16:29,959
thank you all for your attention

