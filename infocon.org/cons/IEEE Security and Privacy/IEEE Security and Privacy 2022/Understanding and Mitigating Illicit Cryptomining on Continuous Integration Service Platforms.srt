1
00:00:00,640 --> 00:00:03,840
and mitigating illicit crucial mining on

2
00:00:03,840 --> 00:00:06,000
continuous integration services

3
00:00:06,000 --> 00:00:07,680
platforms

4
00:00:07,680 --> 00:00:10,559
in this work we discovered a new type of

5
00:00:10,559 --> 00:00:13,440
crypto tracking on ci plan forms

6
00:00:13,440 --> 00:00:15,759
we are going to present our work from

7
00:00:15,759 --> 00:00:17,920
these four aspects including the

8
00:00:17,920 --> 00:00:20,320
background and the threat model of our

9
00:00:20,320 --> 00:00:21,199
work

10
00:00:21,199 --> 00:00:23,519
also our measurement and mitigation

11
00:00:23,519 --> 00:00:24,880
processes

12
00:00:24,880 --> 00:00:27,279
with the emergency of cloud native

13
00:00:27,279 --> 00:00:30,400
computing devops becomes more mature and

14
00:00:30,400 --> 00:00:33,840
practical for automated developers

15
00:00:33,840 --> 00:00:36,559
devops is a set of practices that

16
00:00:36,559 --> 00:00:39,520
combine software development and i.t

17
00:00:39,520 --> 00:00:40,879
operation

18
00:00:40,879 --> 00:00:43,360
there are many commercial ci platforms

19
00:00:43,360 --> 00:00:46,640
such as circle ci and travel ci which

20
00:00:46,640 --> 00:00:50,640
achieve devops and have a lot of users

21
00:00:50,640 --> 00:00:53,440
all these platforms offer continuous

22
00:00:53,440 --> 00:00:56,320
integration and continuous delivery

23
00:00:56,320 --> 00:00:57,360
tools

24
00:00:57,360 --> 00:00:59,920
and also provide abandoned computing

25
00:00:59,920 --> 00:01:01,920
resources

26
00:01:01,920 --> 00:01:04,479
by cooperation with the code hosting

27
00:01:04,479 --> 00:01:08,080
platforms such as github or gita lab

28
00:01:08,080 --> 00:01:10,960
cell platforms can help users achieve

29
00:01:10,960 --> 00:01:15,200
automatic code build test and delivery

30
00:01:15,200 --> 00:01:17,840
now we are going to introduce how ci

31
00:01:17,840 --> 00:01:19,920
platforms interact with code

32
00:01:19,920 --> 00:01:23,680
repositories and users firstly users

33
00:01:23,680 --> 00:01:26,320
need to create code repositories on

34
00:01:26,320 --> 00:01:29,680
public code hosting platforms such as

35
00:01:29,680 --> 00:01:32,560
github gitlab and bitbucket

36
00:01:32,560 --> 00:01:35,520
secondly users can log into the

37
00:01:35,520 --> 00:01:38,400
shareplan forms with the accounts of

38
00:01:38,400 --> 00:01:41,759
this public called hosting platforms and

39
00:01:41,759 --> 00:01:44,479
authorized their platforms to access

40
00:01:44,479 --> 00:01:46,799
their repositories

41
00:01:46,799 --> 00:01:50,560
thirdly users set up the ci workflow in

42
00:01:50,560 --> 00:01:53,280
a configuration file the configuration

43
00:01:53,280 --> 00:01:56,000
file is usually included in the code

44
00:01:56,000 --> 00:01:59,360
repository different ci platforms may

45
00:01:59,360 --> 00:02:01,520
require different formats of the

46
00:02:01,520 --> 00:02:03,360
configuration file

47
00:02:03,360 --> 00:02:06,079
on the other hand the configuration file

48
00:02:06,079 --> 00:02:09,280
contains a set of jobs specified the

49
00:02:09,280 --> 00:02:12,080
workflow to build a test code in the

50
00:02:12,080 --> 00:02:14,640
repository

51
00:02:14,640 --> 00:02:17,680
last according to the configuration file

52
00:02:17,680 --> 00:02:20,239
cr platforms run all jobs in a

53
00:02:20,239 --> 00:02:23,040
visualized environment such as a

54
00:02:23,040 --> 00:02:26,400
container or a visual machine the users

55
00:02:26,400 --> 00:02:29,599
can trigger this job by some operations

56
00:02:29,599 --> 00:02:31,599
such as committing to the code

57
00:02:31,599 --> 00:02:32,959
repository

58
00:02:32,959 --> 00:02:35,360
users can also start the workflow

59
00:02:35,360 --> 00:02:36,400
manually

60
00:02:36,400 --> 00:02:39,519
through the ci plan forms api

61
00:02:39,519 --> 00:02:42,000
after the job are executed

62
00:02:42,000 --> 00:02:44,800
users receive a notification which

63
00:02:44,800 --> 00:02:47,760
includes the status of the jobs and

64
00:02:47,760 --> 00:02:48,840
other

65
00:02:48,840 --> 00:02:51,840
information after visiting commercial

66
00:02:51,840 --> 00:02:55,200
sale platforms we found that nearly all

67
00:02:55,200 --> 00:02:58,159
cia platforms provide free trials to

68
00:02:58,159 --> 00:03:00,000
attract new users

69
00:03:00,000 --> 00:03:03,120
users can then access rich resources

70
00:03:03,120 --> 00:03:06,159
managed by the cia platforms

71
00:03:06,159 --> 00:03:09,519
unfortunately malicious users can abuse

72
00:03:09,519 --> 00:03:11,599
these resources

73
00:03:11,599 --> 00:03:14,319
lots of adversaries conduct crypto

74
00:03:14,319 --> 00:03:16,480
mining on these their platforms for

75
00:03:16,480 --> 00:03:18,000
profit

76
00:03:18,000 --> 00:03:19,920
like benign users

77
00:03:19,920 --> 00:03:23,040
adversaries can directly start a mining

78
00:03:23,040 --> 00:03:26,080
job as a standalone job in the workflow

79
00:03:26,080 --> 00:03:28,879
for example in this figure we can see

80
00:03:28,879 --> 00:03:31,120
the adversary set up a job in the

81
00:03:31,120 --> 00:03:34,159
configuration file for downloading and

82
00:03:34,159 --> 00:03:36,080
running a mining tool

83
00:03:36,080 --> 00:03:37,200
however

84
00:03:37,200 --> 00:03:39,280
this kind of injection is easily

85
00:03:39,280 --> 00:03:43,680
detected by the ci platforms

86
00:03:43,680 --> 00:03:46,480
instead of secretly starting a mining

87
00:03:46,480 --> 00:03:49,280
job in the workflow the adversary can

88
00:03:49,280 --> 00:03:51,920
opt for a stealthier way to hide it

89
00:03:51,920 --> 00:03:54,959
behind a similar harmless job

90
00:03:54,959 --> 00:03:58,000
as shown in this code snippets mining

91
00:03:58,000 --> 00:04:01,040
commands can be inserted into a job for

92
00:04:01,040 --> 00:04:03,760
docked image building the mining program

93
00:04:03,760 --> 00:04:06,319
will be launched and activated by the

94
00:04:06,319 --> 00:04:08,000
docker build

95
00:04:08,000 --> 00:04:10,879
also the adversary can prepare a docker

96
00:04:10,879 --> 00:04:13,840
image it contains mining

97
00:04:13,840 --> 00:04:17,040
when this image is used for testing the

98
00:04:17,040 --> 00:04:19,759
mining processes will also be launched

99
00:04:19,759 --> 00:04:22,160
in the test step

100
00:04:22,160 --> 00:04:25,120
usually a code repository only use one

101
00:04:25,120 --> 00:04:26,880
ci platform

102
00:04:26,880 --> 00:04:29,280
we refer the corresponding connection

103
00:04:29,280 --> 00:04:31,919
between one ci platform and one code

104
00:04:31,919 --> 00:04:35,040
repository with mining job as a ci jack

105
00:04:35,040 --> 00:04:36,160
instance

106
00:04:36,160 --> 00:04:39,520
however to maximize the revenues

107
00:04:39,520 --> 00:04:42,960
adversaries can create many accounts on

108
00:04:42,960 --> 00:04:45,919
code hosting platforms to launch

109
00:04:45,919 --> 00:04:50,160
multiple mining jobs on one ci platform

110
00:04:50,160 --> 00:04:53,280
please note that opening accounts is a

111
00:04:53,280 --> 00:04:55,759
trivial for adversaries

112
00:04:55,759 --> 00:04:58,639
since it only needs an email address and

113
00:04:58,639 --> 00:05:01,600
passing a capture test on google

114
00:05:01,600 --> 00:05:04,960
thus the profit margin of ci jacking is

115
00:05:04,960 --> 00:05:06,720
huge

116
00:05:06,720 --> 00:05:09,120
moreover the adversaries can connect

117
00:05:09,120 --> 00:05:11,919
multiple cl platforms to one code

118
00:05:11,919 --> 00:05:13,280
repository

119
00:05:13,280 --> 00:05:15,759
once the workflows are triggered the

120
00:05:15,759 --> 00:05:18,240
mine job will be launched on all

121
00:05:18,240 --> 00:05:22,320
connected ci platforms at the same time

122
00:05:22,320 --> 00:05:25,039
this boosts the profit gained by one

123
00:05:25,039 --> 00:05:27,199
code repository

124
00:05:27,199 --> 00:05:29,120
since cia jacking requests the

125
00:05:29,120 --> 00:05:31,840
cooperation between code repositories

126
00:05:31,840 --> 00:05:35,120
and ca platforms we can then trace the

127
00:05:35,120 --> 00:05:37,840
hijacking instance from both called

128
00:05:37,840 --> 00:05:41,360
hosting platforms and the ci platforms

129
00:05:41,360 --> 00:05:44,320
for example this code repository with

130
00:05:44,320 --> 00:05:46,880
mining job has multiple ci jacking

131
00:05:46,880 --> 00:05:47,919
instance

132
00:05:47,919 --> 00:05:51,680
because it delivered nice ci platforms

133
00:05:51,680 --> 00:05:53,520
we're going to inspect these

134
00:05:53,520 --> 00:05:55,680
configuration files

135
00:05:55,680 --> 00:05:59,120
on the other hand we analyze the logs of

136
00:05:59,120 --> 00:06:02,960
job excluded by the ci platforms this

137
00:06:02,960 --> 00:06:06,080
log also can help us trace the ci jack

138
00:06:06,080 --> 00:06:08,319
instance

139
00:06:08,319 --> 00:06:10,960
from the code hosting platforms

140
00:06:10,960 --> 00:06:14,240
since all jobs to be executed by lca

141
00:06:14,240 --> 00:06:16,720
platforms are defined by the ci

142
00:06:16,720 --> 00:06:20,160
configuration file encoder repositories

143
00:06:20,160 --> 00:06:23,600
the crypto mining job if it exists must

144
00:06:23,600 --> 00:06:26,000
be triggered by the commands in this

145
00:06:26,000 --> 00:06:26,880
file

146
00:06:26,880 --> 00:06:29,919
thus we firstly collect ci related

147
00:06:29,919 --> 00:06:32,800
repositories and their associate

148
00:06:32,800 --> 00:06:35,600
configuration file from github

149
00:06:35,600 --> 00:06:37,759
then we pass the command that will be

150
00:06:37,759 --> 00:06:41,039
executed on the cl plan forms and use a

151
00:06:41,039 --> 00:06:43,360
set of regular expressions to check

152
00:06:43,360 --> 00:06:45,440
their parameters

153
00:06:45,440 --> 00:06:48,240
after identifying the key parameters

154
00:06:48,240 --> 00:06:50,720
such as valid address or mining pool

155
00:06:50,720 --> 00:06:52,720
address in the command

156
00:06:52,720 --> 00:06:55,599
we will flag the related repository as a

157
00:06:55,599 --> 00:06:57,759
yearly seat

158
00:06:57,759 --> 00:07:01,039
ci platforms can also provide data for

159
00:07:01,039 --> 00:07:03,280
crypto jacking discovery

160
00:07:03,280 --> 00:07:05,919
usually ci platforms monitor the

161
00:07:05,919 --> 00:07:08,960
progress of each ci job recording is

162
00:07:08,960 --> 00:07:12,319
runtime statistic data related to cpu

163
00:07:12,319 --> 00:07:16,960
memory disk network and io the output of

164
00:07:16,960 --> 00:07:19,680
crypto mining jobs may appear in the ci

165
00:07:19,680 --> 00:07:21,520
platform's logs

166
00:07:21,520 --> 00:07:24,560
including the notification of hash rates

167
00:07:24,560 --> 00:07:27,360
the connection status of network

168
00:07:27,360 --> 00:07:30,479
the feedback from the mining pools

169
00:07:30,479 --> 00:07:33,360
also using a set of regular expressions

170
00:07:33,360 --> 00:07:36,319
to identify the intermediate metadata

171
00:07:36,319 --> 00:07:39,360
produced by the mining jobs the related

172
00:07:39,360 --> 00:07:42,639
repositories were deflated

173
00:07:42,639 --> 00:07:45,520
now let me summarize our findings in the

174
00:07:45,520 --> 00:07:46,720
measurement

175
00:07:46,720 --> 00:07:49,440
after checking 500 000 github

176
00:07:49,440 --> 00:07:52,039
repositories reflected

177
00:07:52,039 --> 00:07:54,800
894 of them a suspect

178
00:07:54,800 --> 00:07:57,759
and after the manual validation

179
00:07:57,759 --> 00:07:59,919
ninety-six percent of them are

180
00:07:59,919 --> 00:08:02,240
determined as militias

181
00:08:02,240 --> 00:08:04,960
this malicious repositories has launched

182
00:08:04,960 --> 00:08:08,800
about 200 ci jack instance on 23

183
00:08:08,800 --> 00:08:11,199
commercial cia platforms

184
00:08:11,199 --> 00:08:14,400
including the 104 related addresses and

185
00:08:14,400 --> 00:08:17,840
the 71 mining pools

186
00:08:17,840 --> 00:08:20,560
looking into the valid addresses and

187
00:08:20,560 --> 00:08:22,720
mining pool domains

188
00:08:22,720 --> 00:08:25,360
certain kind of cryptocurrencies are

189
00:08:25,360 --> 00:08:27,759
involved in ci jacking

190
00:08:27,759 --> 00:08:30,960
among them the monaro is the most

191
00:08:30,960 --> 00:08:34,320
popular cryptocurrencies because it can

192
00:08:34,320 --> 00:08:38,240
bring the highest revenue to adversaries

193
00:08:38,240 --> 00:08:40,640
based on our estimation

194
00:08:40,640 --> 00:08:43,760
the total revenue of the monorail

195
00:08:43,760 --> 00:08:48,399
ci jacking instance from march 2017

196
00:08:48,399 --> 00:08:52,880
to may 2020 is nearly 800 thousand

197
00:08:52,880 --> 00:08:55,839
dollars

198
00:08:56,320 --> 00:08:59,519
let's now look at the temporal data

199
00:08:59,519 --> 00:09:01,920
view all malicious repository the

200
00:09:01,920 --> 00:09:04,560
earliest ci jacking related github

201
00:09:04,560 --> 00:09:08,080
repository are created in 2014.

202
00:09:08,080 --> 00:09:10,560
but the first ci jacking instance shows

203
00:09:10,560 --> 00:09:12,399
in 2017

204
00:09:12,399 --> 00:09:15,200
and the large-scale explosion of ci

205
00:09:15,200 --> 00:09:18,640
jacking starts in 2018.

206
00:09:18,640 --> 00:09:21,040
also the growth in the number of

207
00:09:21,040 --> 00:09:23,519
instances is closely related to the

208
00:09:23,519 --> 00:09:27,680
dynamics of the cryptocurrencies prices

209
00:09:27,680 --> 00:09:30,640
taking manure as an example a large

210
00:09:30,640 --> 00:09:33,279
number of instances appears with the

211
00:09:33,279 --> 00:09:35,680
price moving towards its peak

212
00:09:35,680 --> 00:09:39,040
and such growth started to slow down

213
00:09:39,040 --> 00:09:41,120
with the price going down

214
00:09:41,120 --> 00:09:44,160
but undoubtedly new ci jacking instance

215
00:09:44,160 --> 00:09:47,279
still appeared in the ci platforms every

216
00:09:47,279 --> 00:09:48,480
day

217
00:09:48,480 --> 00:09:51,680
also the ci platforms has some mechanism

218
00:09:51,680 --> 00:09:55,600
to detect and block adversaries accounts

219
00:09:55,600 --> 00:09:58,640
adversaries can still easily create new

220
00:09:58,640 --> 00:10:01,680
accounts to continue the ci checking

221
00:10:01,680 --> 00:10:04,240
as long as the adversary can make money

222
00:10:04,240 --> 00:10:06,880
from the ci jacking this account

223
00:10:06,880 --> 00:10:09,440
creating blocking circle will continue

224
00:10:09,440 --> 00:10:10,959
forever

225
00:10:10,959 --> 00:10:14,079
to kick off hijacker from ci platforms

226
00:10:14,079 --> 00:10:16,959
our mitigation works on downgrading the

227
00:10:16,959 --> 00:10:20,240
performance of ci jack instance to make

228
00:10:20,240 --> 00:10:23,120
them unprofitable

229
00:10:23,120 --> 00:10:25,839
now let's focus on the mitigation

230
00:10:25,839 --> 00:10:27,200
strategy

231
00:10:27,200 --> 00:10:29,920
a key observation is that crypto mining

232
00:10:29,920 --> 00:10:33,120
jobs have to finish it the task assigned

233
00:10:33,120 --> 00:10:35,920
by the mining pool within a given time

234
00:10:35,920 --> 00:10:36,959
window

235
00:10:36,959 --> 00:10:39,120
otherwise they will receive nothing in

236
00:10:39,120 --> 00:10:41,839
return for the computation spelling that

237
00:10:41,839 --> 00:10:43,600
window

238
00:10:43,600 --> 00:10:46,800
however almost all legitimate jobs in

239
00:10:46,800 --> 00:10:49,200
the ci platforms don't have this

240
00:10:49,200 --> 00:10:50,959
limitation

241
00:10:50,959 --> 00:10:53,360
following this line of thoughts

242
00:10:53,360 --> 00:10:56,000
we introduce details to the jobs on the

243
00:10:56,000 --> 00:10:58,000
ci platforms

244
00:10:58,000 --> 00:11:01,680
such details satisfied two requirements

245
00:11:01,680 --> 00:11:02,720
first

246
00:11:02,720 --> 00:11:06,160
data cause significant and robust delays

247
00:11:06,160 --> 00:11:08,320
in the crypto mining job

248
00:11:08,320 --> 00:11:11,920
such that minor count profit

249
00:11:11,920 --> 00:11:13,040
second

250
00:11:13,040 --> 00:11:15,839
only moderate overhead is introduced for

251
00:11:15,839 --> 00:11:18,800
the legitimate jobs

252
00:11:18,800 --> 00:11:21,600
benign injection of jitters may not work

253
00:11:21,600 --> 00:11:24,560
well which first is serious delay in

254
00:11:24,560 --> 00:11:26,480
benign operations

255
00:11:26,480 --> 00:11:29,279
alternatively we should introduce jitter

256
00:11:29,279 --> 00:11:31,600
gesture for mining jobs

257
00:11:31,600 --> 00:11:33,839
since hash operation incur high

258
00:11:33,839 --> 00:11:36,399
frequency visits to a certain memory

259
00:11:36,399 --> 00:11:39,519
page this server is a good signal for

260
00:11:39,519 --> 00:11:41,120
mining job

261
00:11:41,120 --> 00:11:42,399
so firstly

262
00:11:42,399 --> 00:11:45,360
our mitigation profile the memory access

263
00:11:45,360 --> 00:11:47,600
of the target job

264
00:11:47,600 --> 00:11:51,600
after locating a suspicious memory page

265
00:11:51,600 --> 00:11:54,320
our mitigation injects the jitter to

266
00:11:54,320 --> 00:11:56,160
each access

267
00:11:56,160 --> 00:11:59,120
specifically our mitigation firstly use

268
00:11:59,120 --> 00:12:02,320
the memphtax system call to remove the

269
00:12:02,320 --> 00:12:05,279
excess permission of the target page

270
00:12:05,279 --> 00:12:07,760
when this page is accessed

271
00:12:07,760 --> 00:12:11,360
a segmentation fault will be triggered

272
00:12:11,360 --> 00:12:15,360
the jitter is injected here to generated

273
00:12:15,360 --> 00:12:18,480
delay by calling the function sleep

274
00:12:18,480 --> 00:12:21,519
finally the permissions are set back in

275
00:12:21,519 --> 00:12:24,320
the signal handler to make sure the job

276
00:12:24,320 --> 00:12:27,279
executing right

277
00:12:27,279 --> 00:12:30,480
we evaluated the effectiveness of our

278
00:12:30,480 --> 00:12:33,839
mitigation against all cryptocurrencies

279
00:12:33,839 --> 00:12:36,800
appearing on the ci platforms

280
00:12:36,800 --> 00:12:38,639
these figure shows

281
00:12:38,639 --> 00:12:42,000
with and without our mitigation the hash

282
00:12:42,000 --> 00:12:45,200
rate for using different mining tools to

283
00:12:45,200 --> 00:12:46,959
do the mining on different

284
00:12:46,959 --> 00:12:49,040
cryptocurrencies

285
00:12:49,040 --> 00:12:52,160
and the black part in each bar shows the

286
00:12:52,160 --> 00:12:54,639
hash rate declined introduced by our

287
00:12:54,639 --> 00:12:55,920
mitigation

288
00:12:55,920 --> 00:12:59,600
also we call it as the delay ratio

289
00:12:59,600 --> 00:13:01,920
the hash rate of mining all

290
00:13:01,920 --> 00:13:07,719
cryptocurrencies was reduced over 95

291
00:13:07,760 --> 00:13:10,240
on average and all money become

292
00:13:10,240 --> 00:13:12,160
unprofitable

293
00:13:12,160 --> 00:13:15,279
we also want to know how our mitigation

294
00:13:15,279 --> 00:13:17,760
affects legitimate jobs

295
00:13:17,760 --> 00:13:21,279
so we evaluated the performance impacts

296
00:13:21,279 --> 00:13:23,920
of our mitigation on project and spec

297
00:13:23,920 --> 00:13:26,720
2017 benchmarks

298
00:13:26,720 --> 00:13:29,440
the results show that our mitigation

299
00:13:29,440 --> 00:13:32,240
introduced low performance overhead

300
00:13:32,240 --> 00:13:35,839
the ore has an 18 benchmark are below 10

301
00:13:35,839 --> 00:13:37,040
percent

302
00:13:37,040 --> 00:13:39,440
for the remaining benchmarks our

303
00:13:39,440 --> 00:13:42,800
mitigation introduce our head between 10

304
00:13:42,800 --> 00:13:44,880
and 15 percent

305
00:13:44,880 --> 00:13:46,959
since they are all calculated by

306
00:13:46,959 --> 00:13:50,560
relatively intensive memory accesses

307
00:13:50,560 --> 00:13:53,279
to evaluate the performance impact on

308
00:13:53,279 --> 00:13:55,199
railway ci job

309
00:13:55,199 --> 00:13:58,000
we randomly sampled the two handler ci

310
00:13:58,000 --> 00:14:00,000
jobs and measured

311
00:14:00,000 --> 00:14:02,240
let's say the war time of individuals

312
00:14:02,240 --> 00:14:05,360
their job when running them with and

313
00:14:05,360 --> 00:14:07,440
without our mitigation

314
00:14:07,440 --> 00:14:10,480
in summary the evaluation shows our

315
00:14:10,480 --> 00:14:12,959
mitigation only introduced about 10

316
00:14:12,959 --> 00:14:16,079
percent relative overhead to most of

317
00:14:16,079 --> 00:14:17,360
their job

318
00:14:17,360 --> 00:14:20,959
and thus has low impact on developer

319
00:14:20,959 --> 00:14:23,279
productively

320
00:14:23,279 --> 00:14:25,040
thank you for the attention you have

321
00:14:25,040 --> 00:14:27,760
given to me

