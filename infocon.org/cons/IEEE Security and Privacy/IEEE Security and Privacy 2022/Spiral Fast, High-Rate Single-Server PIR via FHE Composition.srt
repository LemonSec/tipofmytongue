1
00:00:01,599 --> 00:00:03,840
uh i'm samir menon and this is joint

2
00:00:03,840 --> 00:00:06,399
work with david wu uh we present spiral

3
00:00:06,399 --> 00:00:09,440
fast high rate single server pir via fhe

4
00:00:09,440 --> 00:00:12,000
composition

5
00:00:12,000 --> 00:00:14,320
so in private information retrieval a

6
00:00:14,320 --> 00:00:16,000
client wishes to

7
00:00:16,000 --> 00:00:18,480
retrieve an item from a database without

8
00:00:18,480 --> 00:00:20,400
letting the database learn which item

9
00:00:20,400 --> 00:00:22,720
they're retrieving and specifically this

10
00:00:22,720 --> 00:00:24,320
guarantee should hold even when the

11
00:00:24,320 --> 00:00:27,920
server is arbitrarily malicious

12
00:00:27,920 --> 00:00:30,640
um you can imagine as a as a motivating

13
00:00:30,640 --> 00:00:32,558
example um

14
00:00:32,558 --> 00:00:35,200
uh the client wishing to retrieve uh

15
00:00:35,200 --> 00:00:36,960
article about a sensitive medical

16
00:00:36,960 --> 00:00:41,040
condition from uh wikipedia say

17
00:00:41,040 --> 00:00:43,680
our focus is the single server setting

18
00:00:43,680 --> 00:00:45,680
because it is a basic building block in

19
00:00:45,680 --> 00:00:48,399
many other privacy preserving protocols

20
00:00:48,399 --> 00:00:50,800
i've listed some here you can also

21
00:00:50,800 --> 00:00:52,960
imagine you know like just to call out

22
00:00:52,960 --> 00:00:55,600
like private dns as a

23
00:00:55,600 --> 00:00:57,360
motivating example where the client

24
00:00:57,360 --> 00:00:58,879
would like to

25
00:00:58,879 --> 00:01:00,800
look up a dns record without letting the

26
00:01:00,800 --> 00:01:04,800
server know which record it's looking at

27
00:01:05,280 --> 00:01:07,680
when evaluating a pir system there's a

28
00:01:07,680 --> 00:01:09,280
number of efficiency metrics that we

29
00:01:09,280 --> 00:01:10,479
want to look at

30
00:01:10,479 --> 00:01:12,320
the first is the size of the query so

31
00:01:12,320 --> 00:01:13,680
this is how much the client needs to

32
00:01:13,680 --> 00:01:16,080
upload to issue a query

33
00:01:16,080 --> 00:01:18,080
the second is the server throughput this

34
00:01:18,080 --> 00:01:20,000
is the rate at which the server can

35
00:01:20,000 --> 00:01:22,320
process the database to answer a query

36
00:01:22,320 --> 00:01:23,600
so remember

37
00:01:23,600 --> 00:01:25,520
that the server

38
00:01:25,520 --> 00:01:27,840
without pre-processing needs to form a

39
00:01:27,840 --> 00:01:29,759
perform a full linear scan over the

40
00:01:29,759 --> 00:01:32,000
database in order to answer a single

41
00:01:32,000 --> 00:01:34,880
query for privacy so

42
00:01:34,880 --> 00:01:38,840
we measure the server's response time as

43
00:01:38,840 --> 00:01:41,920
throughput um and finally the rate so

44
00:01:41,920 --> 00:01:44,479
this is a kind of crypto word but

45
00:01:44,479 --> 00:01:47,119
basically the rate here uh we refer to

46
00:01:47,119 --> 00:01:49,200
as the ratio of the record size to the

47
00:01:49,200 --> 00:01:51,360
response size so the response is

48
00:01:51,360 --> 00:01:53,119
typically somewhat larger than the

49
00:01:53,119 --> 00:01:55,040
actual item the size of the item that

50
00:01:55,040 --> 00:01:57,360
you're trying to retrieve so

51
00:01:57,360 --> 00:01:59,600
that blow up the inverse of that you

52
00:01:59,600 --> 00:02:01,439
know kind of response overhead is the

53
00:02:01,439 --> 00:02:02,479
rate

54
00:02:02,479 --> 00:02:04,880
there's a fourth metric that we kind of

55
00:02:04,880 --> 00:02:06,479
call out which is

56
00:02:06,479 --> 00:02:09,360
the public parameter size so the client

57
00:02:09,360 --> 00:02:11,038
is allowed to send a set of public

58
00:02:11,038 --> 00:02:12,959
parameters to the server at the start of

59
00:02:12,959 --> 00:02:13,680
the

60
00:02:13,680 --> 00:02:16,160
session um and these parameters are

61
00:02:16,160 --> 00:02:17,680
reasonable for an arbitrary number of

62
00:02:17,680 --> 00:02:20,000
queries and on an arbitrary number of

63
00:02:20,000 --> 00:02:22,319
databases but the size of these

64
00:02:22,319 --> 00:02:23,840
parameters is still important because

65
00:02:23,840 --> 00:02:25,280
the client has to upload it and the

66
00:02:25,280 --> 00:02:27,200
server needs to store it so we also

67
00:02:27,200 --> 00:02:29,920
measure the size of these parameters

68
00:02:29,920 --> 00:02:32,640
so just a summary of our results we

69
00:02:32,640 --> 00:02:34,959
introduce a family of pir protocols that

70
00:02:34,959 --> 00:02:36,560
leverage techniques

71
00:02:36,560 --> 00:02:38,879
to translate between fhe schemes and we

72
00:02:38,879 --> 00:02:41,360
achieve you know significant new results

73
00:02:41,360 --> 00:02:43,920
in single server par

74
00:02:43,920 --> 00:02:45,920
we use automatic parameter selection

75
00:02:45,920 --> 00:02:48,160
based on the database configuration to

76
00:02:48,160 --> 00:02:50,959
choose parameters for our scheme which

77
00:02:50,959 --> 00:02:52,640
of which you know there are a lot to

78
00:02:52,640 --> 00:02:54,400
choose um and

79
00:02:54,400 --> 00:02:56,319
ultimately this lets us achieve

80
00:02:56,319 --> 00:02:58,640
significant simultaneous improvements in

81
00:02:58,640 --> 00:03:01,280
uh query size rate and throughput over

82
00:03:01,280 --> 00:03:04,640
the best state of the art uh prior

83
00:03:04,640 --> 00:03:06,720
but in exchange our public parameters

84
00:03:06,720 --> 00:03:08,640
are larger so you can see here i've

85
00:03:08,640 --> 00:03:10,239
listed

86
00:03:10,239 --> 00:03:11,440
we are

87
00:03:11,440 --> 00:03:13,599
improving on all three key metrics but

88
00:03:13,599 --> 00:03:16,239
the public parameters are getting larger

89
00:03:16,239 --> 00:03:17,040
and

90
00:03:17,040 --> 00:03:19,920
we also examine spiral in a streaming

91
00:03:19,920 --> 00:03:22,640
setting this is where the query

92
00:03:22,640 --> 00:03:24,640
from the client is fixed but the

93
00:03:24,640 --> 00:03:27,040
database is changing so we have multiple

94
00:03:27,040 --> 00:03:28,799
databases and we'd like the answer to

95
00:03:28,799 --> 00:03:31,040
the query on all of those databases this

96
00:03:31,040 --> 00:03:32,560
comes up when you're streaming like a

97
00:03:32,560 --> 00:03:34,720
large file or in other cases that i'll

98
00:03:34,720 --> 00:03:36,000
describe later

99
00:03:36,000 --> 00:03:38,000
but basically in this setting

100
00:03:38,000 --> 00:03:39,840
we achieve much higher rate and

101
00:03:39,840 --> 00:03:41,840
throughput and that's because we use

102
00:03:41,840 --> 00:03:43,280
larger queries

103
00:03:43,280 --> 00:03:45,280
we achieve a rate of 0.81 which i'll

104
00:03:45,280 --> 00:03:47,760
i'll call out you know remember that the

105
00:03:47,760 --> 00:03:50,000
the highest possible rate would be one

106
00:03:50,000 --> 00:03:52,480
so uh in this streaming setting we're

107
00:03:52,480 --> 00:03:55,680
achieving very very high rate uh and um

108
00:03:55,680 --> 00:03:57,439
in addition we're also achieving a

109
00:03:57,439 --> 00:03:59,360
throughput of almost two gigabytes per

110
00:03:59,360 --> 00:04:01,599
second which is 12 times higher than the

111
00:04:01,599 --> 00:04:04,080
previous work the best previous work and

112
00:04:04,080 --> 00:04:05,680
i'll just call out you know on this

113
00:04:05,680 --> 00:04:08,640
target system um the throughput of

114
00:04:08,640 --> 00:04:11,200
running software aes is

115
00:04:11,200 --> 00:04:13,519
five times slower than this so

116
00:04:13,519 --> 00:04:14,480
we are

117
00:04:14,480 --> 00:04:16,160
significantly faster than applying a

118
00:04:16,160 --> 00:04:18,478
symmetric primitive uh and for reference

119
00:04:18,478 --> 00:04:20,320
you know the memory bandwidth of the

120
00:04:20,320 --> 00:04:22,960
system is 10 gigabytes per second so

121
00:04:22,960 --> 00:04:24,720
you know we're a decent

122
00:04:24,720 --> 00:04:26,880
way of the way there

123
00:04:26,880 --> 00:04:28,639
so now i'll talk about how to spiral

124
00:04:28,639 --> 00:04:30,880
work um to do that i need to kind of

125
00:04:30,880 --> 00:04:32,320
explain a little background on fully

126
00:04:32,320 --> 00:04:34,720
homomorphic encryption so

127
00:04:34,720 --> 00:04:37,440
um just to summarize a client can use

128
00:04:37,440 --> 00:04:40,639
homomorphic encryption to encrypt data

129
00:04:40,639 --> 00:04:43,120
using a secret key send it to the server

130
00:04:43,120 --> 00:04:45,360
and the server can then perform

131
00:04:45,360 --> 00:04:48,400
operations on that encrypted data

132
00:04:48,400 --> 00:04:50,320
i've listed some here you can look that

133
00:04:50,320 --> 00:04:52,560
the first two are kind of similar this

134
00:04:52,560 --> 00:04:54,479
is ciphertext edition or plaintext

135
00:04:54,479 --> 00:04:56,560
multiplication in a way these are the

136
00:04:56,560 --> 00:04:57,600
same

137
00:04:57,600 --> 00:05:00,479
but basically the server can evaluate an

138
00:05:00,479 --> 00:05:02,880
additive homomorphism for both of these

139
00:05:02,880 --> 00:05:05,120
and there's also the possibility that

140
00:05:05,120 --> 00:05:06,639
the server could evaluate a

141
00:05:06,639 --> 00:05:09,120
multiplicative homomorphism that's where

142
00:05:09,120 --> 00:05:11,120
you are taking to cyber text and

143
00:05:11,120 --> 00:05:13,199
computing a new ciphertext that encodes

144
00:05:13,199 --> 00:05:16,639
the product of the two inputs um anyway

145
00:05:16,639 --> 00:05:18,880
the server sends back this you know

146
00:05:18,880 --> 00:05:20,400
final response and the client can

147
00:05:20,400 --> 00:05:22,160
decrypt to obtain the result of the

148
00:05:22,160 --> 00:05:23,360
computation

149
00:05:23,360 --> 00:05:24,720
and here

150
00:05:24,720 --> 00:05:26,320
for fully homomorphic encryption we have

151
00:05:26,320 --> 00:05:28,320
the same definition of rate so rate is

152
00:05:28,320 --> 00:05:30,000
the ratio of the plaintext size to the

153
00:05:30,000 --> 00:05:31,759
ciphertext size so the rate of a

154
00:05:31,759 --> 00:05:33,440
homomorphic encryption scheme is very

155
00:05:33,440 --> 00:05:37,120
similar to the rate of a pir scheme

156
00:05:37,120 --> 00:05:37,840
so

157
00:05:37,840 --> 00:05:39,919
this work is about composing schemes

158
00:05:39,919 --> 00:05:42,080
so i'll describe two schemes to you i

159
00:05:42,080 --> 00:05:43,919
won't get into the details of exactly

160
00:05:43,919 --> 00:05:46,160
how they work but i want you to just

161
00:05:46,160 --> 00:05:48,080
know the properties and

162
00:05:48,080 --> 00:05:50,080
we can see the construction from that

163
00:05:50,080 --> 00:05:52,160
level so the first scheme that we use is

164
00:05:52,160 --> 00:05:54,400
for gev's encryption scheme

165
00:05:54,400 --> 00:05:56,800
this scheme gives us very high rate and

166
00:05:56,800 --> 00:05:59,199
has very fast operations but it only

167
00:05:59,199 --> 00:06:01,440
supports an additive homomorphism so you

168
00:06:01,440 --> 00:06:05,280
can only add or multiply by a plain text

169
00:06:05,280 --> 00:06:06,880
and it comes in a matrix variant which

170
00:06:06,880 --> 00:06:09,280
is also called pvw and the thing i'll

171
00:06:09,280 --> 00:06:10,960
call out about the matrix variant of

172
00:06:10,960 --> 00:06:14,160
this scheme is that uh the rate is much

173
00:06:14,160 --> 00:06:16,240
higher than for the scalar variant and

174
00:06:16,240 --> 00:06:18,639
the rate is higher the larger the

175
00:06:18,639 --> 00:06:20,560
matrices that we encrypt so this matrix

176
00:06:20,560 --> 00:06:22,560
variant lets us encrypt matrices and the

177
00:06:22,560 --> 00:06:24,240
bigger the matrices we encrypt the

178
00:06:24,240 --> 00:06:25,919
higher the rate of the resulting

179
00:06:25,919 --> 00:06:27,360
ciphertext

180
00:06:27,360 --> 00:06:29,280
and the second scheme we use is gentry

181
00:06:29,280 --> 00:06:31,919
set high waters or gsw and this scheme

182
00:06:31,919 --> 00:06:34,240
is kind of the opposite so the the rate

183
00:06:34,240 --> 00:06:37,680
is low the operations are slower but um

184
00:06:37,680 --> 00:06:40,240
we support homomorphic multiplication

185
00:06:40,240 --> 00:06:41,840
and interestingly you know these two

186
00:06:41,840 --> 00:06:43,360
schemes they play nice with each other

187
00:06:43,360 --> 00:06:46,160
so you can multiply a gsw ciphertext by

188
00:06:46,160 --> 00:06:48,560
a reg f ciphertext

189
00:06:48,560 --> 00:06:50,479
so i'll talk about two prior works that

190
00:06:50,479 --> 00:06:53,840
use those two schemes to construct par

191
00:06:53,840 --> 00:06:55,840
um so the first prior work is gentry

192
00:06:55,840 --> 00:06:59,039
levy uh in this work uh the query is a

193
00:06:59,039 --> 00:07:01,039
collection of matrix for gev and gsw

194
00:07:01,039 --> 00:07:04,479
ciphertext and what we do to start is we

195
00:07:04,479 --> 00:07:07,280
use the reg f ciphertext to select along

196
00:07:07,280 --> 00:07:09,039
the first dimension of the database so

197
00:07:09,039 --> 00:07:12,000
the database is a matrix of plain text

198
00:07:12,000 --> 00:07:14,720
records and here i've shown as an

199
00:07:14,720 --> 00:07:16,880
example i've marked the target item in a

200
00:07:16,880 --> 00:07:19,280
star and we're doing a vector matrix

201
00:07:19,280 --> 00:07:21,120
multiplication so

202
00:07:21,120 --> 00:07:23,599
we are intuitively we're selecting a row

203
00:07:23,599 --> 00:07:26,800
of the database in this picture um

204
00:07:26,800 --> 00:07:28,080
and you can see we're explaining the

205
00:07:28,080 --> 00:07:30,400
fact that regev ciphertext support a

206
00:07:30,400 --> 00:07:32,960
ciphertext plaintext homomorphism so

207
00:07:32,960 --> 00:07:35,280
that's how we're able to select a row

208
00:07:35,280 --> 00:07:37,440
using these encrypted bits

209
00:07:37,440 --> 00:07:38,400
and then

210
00:07:38,400 --> 00:07:40,800
we can further compress the response

211
00:07:40,800 --> 00:07:44,000
size using the gsw ciphertext so here we

212
00:07:44,000 --> 00:07:46,000
exploit the fact that gsw supports

213
00:07:46,000 --> 00:07:48,800
ciphertext multiplication to basically

214
00:07:48,800 --> 00:07:51,280
repeatedly fold the

215
00:07:51,280 --> 00:07:53,759
output of that first processing until

216
00:07:53,759 --> 00:07:55,680
we're left with basically just a single

217
00:07:55,680 --> 00:07:57,440
ciphertext that encrypts the item that

218
00:07:57,440 --> 00:07:59,199
we wanted

219
00:07:59,199 --> 00:08:01,759
um and so this result is a matrix where

220
00:08:01,759 --> 00:08:03,919
you have cyber text in this prior work

221
00:08:03,919 --> 00:08:06,160
and so it's a very high rate so we've

222
00:08:06,160 --> 00:08:08,960
kind of used both schemes well

223
00:08:08,960 --> 00:08:10,400
i should note this scheme was never

224
00:08:10,400 --> 00:08:12,400
implemented but um you know it would be

225
00:08:12,400 --> 00:08:14,080
it seems like it would be efficient but

226
00:08:14,080 --> 00:08:16,800
there's a big drawback which is that

227
00:08:16,800 --> 00:08:18,879
these gsw ciphertexts that you have to

228
00:08:18,879 --> 00:08:21,520
communicate are very large so the query

229
00:08:21,520 --> 00:08:23,680
becomes quickly too big uh the each

230
00:08:23,680 --> 00:08:25,520
ciphertext is in this example four

231
00:08:25,520 --> 00:08:27,520
megabytes which is to encrypt a single

232
00:08:27,520 --> 00:08:30,240
bit which is a lot um so that's that's a

233
00:08:30,240 --> 00:08:32,159
significant downside there's another

234
00:08:32,159 --> 00:08:34,159
prior work that addresses this downside

235
00:08:34,159 --> 00:08:37,360
so onion pier uh recent work uh shows

236
00:08:37,360 --> 00:08:38,559
how to take

237
00:08:38,559 --> 00:08:40,399
how to make the query much smaller so

238
00:08:40,399 --> 00:08:43,120
here the query is only 64 kilobytes and

239
00:08:43,120 --> 00:08:45,839
it's a single scalar ciphertext and then

240
00:08:45,839 --> 00:08:48,320
they show an expansion procedure

241
00:08:48,320 --> 00:08:50,080
that lets you get the ciphertext you

242
00:08:50,080 --> 00:08:52,640
need for processing um so this expansion

243
00:08:52,640 --> 00:08:54,800
procedure works quite well and you're

244
00:08:54,800 --> 00:08:56,880
able to process the query much like

245
00:08:56,880 --> 00:08:59,680
gentry levy but the query is now much

246
00:08:59,680 --> 00:09:01,760
smaller but there's a problem with this

247
00:09:01,760 --> 00:09:04,240
prior work too which is that the result

248
00:09:04,240 --> 00:09:06,240
is now a scalar regard cipher text so

249
00:09:06,240 --> 00:09:07,920
the expansion procedure that they show

250
00:09:07,920 --> 00:09:11,680
only goes from scalar to scalar and so

251
00:09:11,680 --> 00:09:13,600
um the drawback is that the use of

252
00:09:13,600 --> 00:09:16,399
scalar cipher text ultimately reduces

253
00:09:16,399 --> 00:09:18,800
the rate um and so we don't get that

254
00:09:18,800 --> 00:09:20,480
very high rate that we have in the other

255
00:09:20,480 --> 00:09:23,200
prior work so this work is about getting

256
00:09:23,200 --> 00:09:25,519
the best of both worlds what we want are

257
00:09:25,519 --> 00:09:27,600
the small queries that are in onion pure

258
00:09:27,600 --> 00:09:29,120
and we want the high rate that's in

259
00:09:29,120 --> 00:09:31,040
gentry hell levy

260
00:09:31,040 --> 00:09:33,040
and so to do that we introduce simple

261
00:09:33,040 --> 00:09:34,560
key switching techniques for query

262
00:09:34,560 --> 00:09:36,800
compression uh we show how to basically

263
00:09:36,800 --> 00:09:39,200
convert scalar rig f to matrix and

264
00:09:39,200 --> 00:09:42,160
convert matrix we give to gsw

265
00:09:42,160 --> 00:09:43,920
um

266
00:09:43,920 --> 00:09:46,000
the high level take away is you know you

267
00:09:46,000 --> 00:09:47,519
can get the benefit of really large

268
00:09:47,519 --> 00:09:49,440
ciphertext without the overhead of

269
00:09:49,440 --> 00:09:52,160
actually communicating them on the wire

270
00:09:52,160 --> 00:09:54,000
and our techniques are of general use so

271
00:09:54,000 --> 00:09:56,399
if you use matrix for gav or gsw

272
00:09:56,399 --> 00:09:59,040
ciphertext this transformation is useful

273
00:09:59,040 --> 00:10:01,600
and can minimize communication costs so

274
00:10:01,600 --> 00:10:04,880
this is applicable outside of pir

275
00:10:04,880 --> 00:10:06,959
so this is our you know

276
00:10:06,959 --> 00:10:08,079
final

277
00:10:08,079 --> 00:10:10,399
vanilla version of our scheme uh on the

278
00:10:10,399 --> 00:10:12,160
left here you can see this looks like

279
00:10:12,160 --> 00:10:13,600
onion pure what we're doing is we're

280
00:10:13,600 --> 00:10:15,600
taking a very small query and expanding

281
00:10:15,600 --> 00:10:17,200
it into

282
00:10:17,200 --> 00:10:20,079
for gev and gsw ciphertext that we need

283
00:10:20,079 --> 00:10:22,000
and then on the right it looks like uh

284
00:10:22,000 --> 00:10:24,480
gentry halevi we're processing the

285
00:10:24,480 --> 00:10:26,800
result using matrix ciphertext and so

286
00:10:26,800 --> 00:10:28,959
the rate is high

287
00:10:28,959 --> 00:10:30,640
so this is uh you know us getting the

288
00:10:30,640 --> 00:10:33,200
best of both worlds

289
00:10:33,200 --> 00:10:34,959
um i'll talk about three little

290
00:10:34,959 --> 00:10:37,040
additional tricks that we use in this

291
00:10:37,040 --> 00:10:38,079
scheme

292
00:10:38,079 --> 00:10:40,000
there's more details in the paper but i

293
00:10:40,000 --> 00:10:41,920
just want to call them out the first is

294
00:10:41,920 --> 00:10:43,839
that we choose parameters automatically

295
00:10:43,839 --> 00:10:46,000
so there are as you build these schemes

296
00:10:46,000 --> 00:10:48,079
there are just a explosion of in the

297
00:10:48,079 --> 00:10:50,480
number of knobs that you can tune um we

298
00:10:50,480 --> 00:10:52,160
wanted to choose our parameters

299
00:10:52,160 --> 00:10:54,320
systematically so we built a tool that

300
00:10:54,320 --> 00:10:56,640
takes in the database configuration and

301
00:10:56,640 --> 00:10:59,519
then evaluates many sets of parameters

302
00:10:59,519 --> 00:11:01,760
against a cost model in this case we use

303
00:11:01,760 --> 00:11:05,200
the aws cost model so um what happens is

304
00:11:05,200 --> 00:11:05,920
we

305
00:11:05,920 --> 00:11:08,399
input parameters and we guess the query

306
00:11:08,399 --> 00:11:10,880
size response size and the amount of

307
00:11:10,880 --> 00:11:12,480
time the server will take to compute a

308
00:11:12,480 --> 00:11:14,480
response and then we calculate a cost

309
00:11:14,480 --> 00:11:16,399
from that and the tool is able to output

310
00:11:16,399 --> 00:11:19,839
an optimized set of parameters

311
00:11:19,839 --> 00:11:22,079
um there are two other tricks so another

312
00:11:22,079 --> 00:11:23,920
trick we use is we we choose our

313
00:11:23,920 --> 00:11:26,320
ciphertext modulus kind of carefully

314
00:11:26,320 --> 00:11:28,880
to use so that we can only use 32-bit

315
00:11:28,880 --> 00:11:30,959
multiplication for most of processing

316
00:11:30,959 --> 00:11:33,200
this is actually a big win uh especially

317
00:11:33,200 --> 00:11:36,079
when you remember that using cmd like

318
00:11:36,079 --> 00:11:39,519
avx-512 you can do up to eight 32-bit

319
00:11:39,519 --> 00:11:42,240
multiplications in a single cpu cycle so

320
00:11:42,240 --> 00:11:45,360
this is actually a significant win

321
00:11:45,360 --> 00:11:48,320
and then we also observe a kind of fact

322
00:11:48,320 --> 00:11:50,560
about matrix ciphertext

323
00:11:50,560 --> 00:11:52,160
we basically observed that a large

324
00:11:52,160 --> 00:11:55,519
portion of a matrix ciphertext is less

325
00:11:55,519 --> 00:11:57,920
important than the other parts of it and

326
00:11:57,920 --> 00:11:59,920
so you can more

327
00:11:59,920 --> 00:12:01,760
noisily encode it you can more roughly

328
00:12:01,760 --> 00:12:04,000
encode it there's more details on that

329
00:12:04,000 --> 00:12:06,399
in the paper but that is also of general

330
00:12:06,399 --> 00:12:08,240
interest

331
00:12:08,240 --> 00:12:09,600
so um

332
00:12:09,600 --> 00:12:11,760
the question you're all here for

333
00:12:11,760 --> 00:12:14,639
how does spiral perform uh

334
00:12:14,639 --> 00:12:16,480
on a basic level if we choose the

335
00:12:16,480 --> 00:12:18,240
database configuration preferred by

336
00:12:18,240 --> 00:12:21,519
onionpier uh uh 2 to the 18 record so

337
00:12:21,519 --> 00:12:24,880
that's 250 000 plus records of 30

338
00:12:24,880 --> 00:12:26,480
kilobytes each

339
00:12:26,480 --> 00:12:28,560
spiral is a significant improvement over

340
00:12:28,560 --> 00:12:30,800
the prior work but has larger public

341
00:12:30,800 --> 00:12:32,560
parameters and you can see on an

342
00:12:32,560 --> 00:12:34,560
absolute basis you know the query and

343
00:12:34,560 --> 00:12:36,639
response sizes are getting pretty small

344
00:12:36,639 --> 00:12:38,320
and the server compute is also getting

345
00:12:38,320 --> 00:12:41,040
pretty small so we think this is putting

346
00:12:41,040 --> 00:12:42,240
pir

347
00:12:42,240 --> 00:12:44,880
in striking distance of being practical

348
00:12:44,880 --> 00:12:46,560
and just phrasing those same numbers as

349
00:12:46,560 --> 00:12:48,720
rate and throughput yeah you can see the

350
00:12:48,720 --> 00:12:51,040
rate is now already over one-third and

351
00:12:51,040 --> 00:12:53,120
the throughput is over 300 megabytes per

352
00:12:53,120 --> 00:12:54,079
second

353
00:12:54,079 --> 00:12:57,200
we also compare uh spiral against uh

354
00:12:57,200 --> 00:12:59,920
comparison schemes uh over

355
00:12:59,920 --> 00:13:01,440
varying the number of records and

356
00:13:01,440 --> 00:13:03,680
keeping the record size constant so here

357
00:13:03,680 --> 00:13:06,639
i've chosen a 100 kilobyte records and

358
00:13:06,639 --> 00:13:09,279
i've varied the number of records

359
00:13:09,279 --> 00:13:10,240
um

360
00:13:10,240 --> 00:13:12,000
the first thing to note is indeed

361
00:13:12,000 --> 00:13:13,760
processing is linear in the database

362
00:13:13,760 --> 00:13:15,680
size especially uh as the number of

363
00:13:15,680 --> 00:13:17,519
records increases you can see there's

364
00:13:17,519 --> 00:13:18,880
you know almost all of the schemes

365
00:13:18,880 --> 00:13:20,480
become a line

366
00:13:20,480 --> 00:13:21,680
and

367
00:13:21,680 --> 00:13:23,200
another thing to note is in the top

368
00:13:23,200 --> 00:13:25,680
right you know spiral is getting over

369
00:13:25,680 --> 00:13:28,000
300 megabytes per second of throughput

370
00:13:28,000 --> 00:13:31,040
which is already roughly the speed of

371
00:13:31,040 --> 00:13:33,279
the throughput of software-based aes on

372
00:13:33,279 --> 00:13:34,959
the system when i say software-based i

373
00:13:34,959 --> 00:13:36,720
mean you know not using hardware

374
00:13:36,720 --> 00:13:38,560
acceleration um

375
00:13:38,560 --> 00:13:40,639
but what that means is you know the this

376
00:13:40,639 --> 00:13:42,560
pir processing is

377
00:13:42,560 --> 00:13:44,240
similar to applying a symmetric

378
00:13:44,240 --> 00:13:45,760
primitive and that's kind of an

379
00:13:45,760 --> 00:13:49,120
interesting benchmark we think

380
00:13:49,120 --> 00:13:52,079
and it's not on this slide but

381
00:13:52,079 --> 00:13:53,120
spiral

382
00:13:53,120 --> 00:13:54,880
also does have smaller queries and

383
00:13:54,880 --> 00:13:56,720
response sizes than all of the schemes

384
00:13:56,720 --> 00:13:59,040
pictured here but it does have larger

385
00:13:59,040 --> 00:14:01,440
public parameters

386
00:14:01,440 --> 00:14:03,120
and i should note all our all our

387
00:14:03,120 --> 00:14:04,880
measurements are on a single core single

388
00:14:04,880 --> 00:14:07,040
thread uh this is because the problem's

389
00:14:07,040 --> 00:14:09,839
naively parallel so um for benchmarking

390
00:14:09,839 --> 00:14:13,040
we we always use the single core

391
00:14:13,040 --> 00:14:13,760
so

392
00:14:13,760 --> 00:14:15,920
now i'll talk about analyzing spiral in

393
00:14:15,920 --> 00:14:17,680
that other setting the streaming setting

394
00:14:17,680 --> 00:14:18,480
so

395
00:14:18,480 --> 00:14:20,480
in this setting the same query is reused

396
00:14:20,480 --> 00:14:22,160
over multiple databases and you might

397
00:14:22,160 --> 00:14:24,240
ask you know when would you ever do that

398
00:14:24,240 --> 00:14:26,000
and the answer is actually you know more

399
00:14:26,000 --> 00:14:28,240
frequently than you'd expect so

400
00:14:28,240 --> 00:14:30,560
the first time is you know if you're

401
00:14:30,560 --> 00:14:32,800
streaming a video uh you want the

402
00:14:32,800 --> 00:14:35,839
database item in chunks progressively so

403
00:14:35,839 --> 00:14:37,920
that you can you know stream um so

404
00:14:37,920 --> 00:14:39,680
that's an example and another example

405
00:14:39,680 --> 00:14:41,920
where the streaming setting comes up is

406
00:14:41,920 --> 00:14:44,639
when you're doing a private messaging or

407
00:14:44,639 --> 00:14:46,800
a metadata private messaging or voice

408
00:14:46,800 --> 00:14:49,199
call system so here you are repeatedly

409
00:14:49,199 --> 00:14:52,399
polling the same mailbox and so

410
00:14:52,399 --> 00:14:55,279
the streaming setting applies

411
00:14:55,279 --> 00:14:57,199
in this setting we

412
00:14:57,199 --> 00:14:59,440
only want to minimize the online cost we

413
00:14:59,440 --> 00:15:01,360
only need to minimize the response

414
00:15:01,360 --> 00:15:05,120
overhead and the server compute time and

415
00:15:05,120 --> 00:15:08,160
in return we can consider larger public

416
00:15:08,160 --> 00:15:10,560
parameters or query size because these

417
00:15:10,560 --> 00:15:12,560
are amortized over the entire lifetime

418
00:15:12,560 --> 00:15:14,450
of the stream and so

419
00:15:14,450 --> 00:15:15,760
[Music]

420
00:15:15,760 --> 00:15:17,519
it's it's okay to have a much larger

421
00:15:17,519 --> 00:15:20,000
query because the stream is presumably

422
00:15:20,000 --> 00:15:22,399
has a long lifetime so our approach

423
00:15:22,399 --> 00:15:25,040
which we name spiral stream is basically

424
00:15:25,040 --> 00:15:27,199
make the query very large and so that's

425
00:15:27,199 --> 00:15:28,959
what we do and we measure its

426
00:15:28,959 --> 00:15:31,040
performance so here i've plotted uh

427
00:15:31,040 --> 00:15:34,000
spiral streams performance in purple and

428
00:15:34,000 --> 00:15:35,440
you can see that

429
00:15:35,440 --> 00:15:37,600
this is much faster already than spiral

430
00:15:37,600 --> 00:15:40,720
so you can see that by making the query

431
00:15:40,720 --> 00:15:42,720
much larger here the query is 30

432
00:15:42,720 --> 00:15:44,720
megabytes uh the throughput that you're

433
00:15:44,720 --> 00:15:46,880
able to achieve is much much higher and

434
00:15:46,880 --> 00:15:50,160
this peaks at uh over 1.5 gigabytes per

435
00:15:50,160 --> 00:15:52,160
second which is seven times faster than

436
00:15:52,160 --> 00:15:54,079
previous constructions

437
00:15:54,079 --> 00:15:55,360
and

438
00:15:55,360 --> 00:15:56,800
as a note you know

439
00:15:56,800 --> 00:15:59,680
at this point the the rate is about 50

440
00:15:59,680 --> 00:16:01,600
so the communication overhead here for

441
00:16:01,600 --> 00:16:03,839
single server par is already in this

442
00:16:03,839 --> 00:16:05,600
setting uh only

443
00:16:05,600 --> 00:16:08,079
2x and it was previously you know 4x

444
00:16:08,079 --> 00:16:11,839
with the best uh previous scheme

445
00:16:11,839 --> 00:16:14,079
so a natural question we asked next is

446
00:16:14,079 --> 00:16:17,360
okay it's at 50 can we can we make the

447
00:16:17,360 --> 00:16:20,560
rate even higher so we also think we

448
00:16:20,560 --> 00:16:22,800
kind of reflect back on our scheme and

449
00:16:22,800 --> 00:16:24,399
ask you know

450
00:16:24,399 --> 00:16:26,720
can we make the rate higher so using

451
00:16:26,720 --> 00:16:28,560
larger matrices does make the rate

452
00:16:28,560 --> 00:16:31,759
higher but it lowers the throughput so

453
00:16:31,759 --> 00:16:34,160
uh the idea for a packing transformation

454
00:16:34,160 --> 00:16:36,079
is to

455
00:16:36,079 --> 00:16:38,720
use a small ciphertext during processing

456
00:16:38,720 --> 00:16:41,040
and pack into a large one at the end

457
00:16:41,040 --> 00:16:43,360
and so we do that

458
00:16:43,360 --> 00:16:46,160
it gives us larger public parameters but

459
00:16:46,160 --> 00:16:48,320
better throughput

460
00:16:48,320 --> 00:16:49,199
and

461
00:16:49,199 --> 00:16:51,519
i'll just say you know so just to call

462
00:16:51,519 --> 00:16:53,600
out here the cost of privately streaming

463
00:16:53,600 --> 00:16:56,079
a movie from a database at this point in

464
00:16:56,079 --> 00:16:58,639
settings where the communication is uh

465
00:16:58,639 --> 00:17:01,839
dominating cost uh is less than 2x more

466
00:17:01,839 --> 00:17:03,680
expensive than the no privacy baseline

467
00:17:03,680 --> 00:17:05,679
of just directly retrieving the item and

468
00:17:05,679 --> 00:17:07,280
previously that would have been 17 times

469
00:17:07,280 --> 00:17:09,359
more expensive

470
00:17:09,359 --> 00:17:12,559
and we have a cool demo of the scheme

471
00:17:12,559 --> 00:17:13,520
too

472
00:17:13,520 --> 00:17:15,039
the goal of talk is to convince you that

473
00:17:15,039 --> 00:17:16,959
pr is practical so we actually have a

474
00:17:16,959 --> 00:17:19,119
website up where you can

475
00:17:19,119 --> 00:17:21,839
actually read wikipedia using pir

476
00:17:21,839 --> 00:17:23,919
and uh yeah it achieves pretty good

477
00:17:23,919 --> 00:17:26,160
pretty good results um don't tell the

478
00:17:26,160 --> 00:17:29,200
attack people about the url

479
00:17:29,200 --> 00:17:30,240
but yeah

480
00:17:30,240 --> 00:17:31,600
yeah

481
00:17:31,600 --> 00:17:33,919
and yeah here are some future directions

482
00:17:33,919 --> 00:17:36,080
we're looking at and our demo paper and

483
00:17:36,080 --> 00:17:38,399
code

484
00:17:38,940 --> 00:17:43,679
[Applause]

485
00:17:43,679 --> 00:17:47,840
thanks for the great talk any questions

486
00:17:49,919 --> 00:17:51,280
yeah i wanted to ask about these public

487
00:17:51,280 --> 00:17:53,360
parameters um are they truly public in

488
00:17:53,360 --> 00:17:54,960
the sense that the generation procedure

489
00:17:54,960 --> 00:17:56,880
is public coin and different clients can

490
00:17:56,880 --> 00:17:59,039
use the same public parameters

491
00:17:59,039 --> 00:18:01,520
the generation uh procedure is not

492
00:18:01,520 --> 00:18:03,120
public coin so it depends on the

493
00:18:03,120 --> 00:18:05,520
client's secret key but of course it is

494
00:18:05,520 --> 00:18:07,919
hiding of the client's secret keys okay

495
00:18:07,919 --> 00:18:09,280
that makes a lot of sense and then

496
00:18:09,280 --> 00:18:10,559
actually another question i'm curious

497
00:18:10,559 --> 00:18:13,440
about the evaluation and how parallelism

498
00:18:13,440 --> 00:18:15,360
played a role or didn't play a role in

499
00:18:15,360 --> 00:18:17,360
the evaluation oh sorry say that again

500
00:18:17,360 --> 00:18:19,440
i'm curious about the evaluation and how

501
00:18:19,440 --> 00:18:21,440
parallelism either played a role or

502
00:18:21,440 --> 00:18:23,919
didn't play a role ah okay um yeah so we

503
00:18:23,919 --> 00:18:24,960
we

504
00:18:24,960 --> 00:18:26,240
to

505
00:18:26,240 --> 00:18:28,080
i guess cryptographers are we're all

506
00:18:28,080 --> 00:18:30,880
lazy so most libraries and open source

507
00:18:30,880 --> 00:18:32,799
implementations that implement pir that

508
00:18:32,799 --> 00:18:35,120
we use to do benchmarking don't use

509
00:18:35,120 --> 00:18:37,039
parallelism because you can just write a

510
00:18:37,039 --> 00:18:38,799
note in the paper that says

511
00:18:38,799 --> 00:18:42,240
it's naively parallel so um to make

512
00:18:42,240 --> 00:18:45,120
comparison uh consistent we we don't

513
00:18:45,120 --> 00:18:47,039
implement parallelism if you go to our

514
00:18:47,039 --> 00:18:48,960
rest library it does so it'll use all

515
00:18:48,960 --> 00:18:51,120
the threads it can and it'll be nightly

516
00:18:51,120 --> 00:18:53,919
it'll exploit um the threads yeah gotcha

517
00:18:53,919 --> 00:18:56,720
that makes sense thanks yeah

518
00:18:56,720 --> 00:18:58,559
please keep the question short a little

519
00:18:58,559 --> 00:19:00,720
bit

520
00:19:02,080 --> 00:19:05,760
hi um so you used uh fairly large record

521
00:19:05,760 --> 00:19:08,080
sizes in your database and fairly small

522
00:19:08,080 --> 00:19:10,640
number of records what happens if those

523
00:19:10,640 --> 00:19:13,200
sort of flip around and you have many

524
00:19:13,200 --> 00:19:15,760
very small you know smallish records

525
00:19:15,760 --> 00:19:18,240
yeah it's a great question so um in the

526
00:19:18,240 --> 00:19:20,000
example one of the examples one of the

527
00:19:20,000 --> 00:19:22,720
benchmark databases is a million records

528
00:19:22,720 --> 00:19:26,559
and 256 bytes each right yes and here

529
00:19:26,559 --> 00:19:29,039
here what happens is we what we do is we

530
00:19:29,039 --> 00:19:29,760
just

531
00:19:29,760 --> 00:19:31,440
the the most efficient thing because of

532
00:19:31,440 --> 00:19:32,960
lat because of lattice parameters

533
00:19:32,960 --> 00:19:34,880
there's there is an intuitive or there's

534
00:19:34,880 --> 00:19:37,360
an implicit minimum record size so what

535
00:19:37,360 --> 00:19:39,360
we do is we just pack

536
00:19:39,360 --> 00:19:41,520
many of the smaller records into a

537
00:19:41,520 --> 00:19:43,360
single large record and this hurts the

538
00:19:43,360 --> 00:19:45,679
rate significantly obviously the minimum

539
00:19:45,679 --> 00:19:47,760
response size is now you know several

540
00:19:47,760 --> 00:19:49,760
kilobytes but

541
00:19:49,760 --> 00:19:51,200
it's still very efficient on a

542
00:19:51,200 --> 00:19:53,039
throughput basis and on an absolute

543
00:19:53,039 --> 00:19:55,360
basis downloading you know 10 kilobytes

544
00:19:55,360 --> 00:19:58,080
to retrieve 256 bytes it might be okay

545
00:19:58,080 --> 00:20:01,760
depending on the circumstance thank you

