1
00:00:01,680 --> 00:00:02,560
hi

2
00:00:02,560 --> 00:00:04,400
um my name is michael rosenberg today

3
00:00:04,400 --> 00:00:06,160
i'm going to be presenting uh snark

4
00:00:06,160 --> 00:00:09,040
block which is a scalable anonymous

5
00:00:09,040 --> 00:00:10,719
block listing scheme

6
00:00:10,719 --> 00:00:12,880
this is joint work with

7
00:00:12,880 --> 00:00:14,920
mary mallor and ian

8
00:00:14,920 --> 00:00:17,199
myers so first we start off with

9
00:00:17,199 --> 00:00:19,119
motivation

10
00:00:19,119 --> 00:00:20,880
it's important to maintain multiple

11
00:00:20,880 --> 00:00:24,000
identities on the internet

12
00:00:24,000 --> 00:00:26,320
for example you might want to use you

13
00:00:26,320 --> 00:00:28,080
might not want to use the same identity

14
00:00:28,080 --> 00:00:30,720
in an online setting in a church group

15
00:00:30,720 --> 00:00:33,120
and a queer social group

16
00:00:33,120 --> 00:00:35,600
to this end anonymous or pseudonymous

17
00:00:35,600 --> 00:00:38,399
speech is immensely useful

18
00:00:38,399 --> 00:00:40,559
the problem is to block abusive users

19
00:00:40,559 --> 00:00:42,559
you need some form of banning

20
00:00:42,559 --> 00:00:44,160
and to make sure they don't come back

21
00:00:44,160 --> 00:00:46,640
you need to know who they are

22
00:00:46,640 --> 00:00:48,239
unfortunately service providers are

23
00:00:48,239 --> 00:00:49,920
increasingly are increasingly solving

24
00:00:49,920 --> 00:00:52,239
this banning problem by tying every user

25
00:00:52,239 --> 00:00:53,760
to a strong identity whether it's

26
00:00:53,760 --> 00:00:56,000
through phone number ip address or photo

27
00:00:56,000 --> 00:00:56,960
id

28
00:00:56,960 --> 00:00:58,559
in fact this seems like an inherent

29
00:00:58,559 --> 00:00:59,680
trade-off

30
00:00:59,680 --> 00:01:02,640
you can have anonymity or accountability

31
00:01:02,640 --> 00:01:04,400
but you can't have both

32
00:01:04,400 --> 00:01:05,760
it seems

33
00:01:05,760 --> 00:01:07,600
so our research question was how do we

34
00:01:07,600 --> 00:01:10,799
block trolls prevent sock puppets

35
00:01:10,799 --> 00:01:13,760
and allow anonymous posts

36
00:01:13,760 --> 00:01:15,040
surprisingly

37
00:01:15,040 --> 00:01:17,040
cryptography provides a solution here

38
00:01:17,040 --> 00:01:19,360
that maintains privacy so let's look at

39
00:01:19,360 --> 00:01:21,759
that now

40
00:01:22,960 --> 00:01:24,720
so we present

41
00:01:24,720 --> 00:01:26,080
we start off with the anonymous block

42
00:01:26,080 --> 00:01:27,840
listing scheme due to saying it all from

43
00:01:27,840 --> 00:01:29,840
2007.

44
00:01:29,840 --> 00:01:32,560
so we have alice who's a user and daily

45
00:01:32,560 --> 00:01:34,320
science fiction which is a service

46
00:01:34,320 --> 00:01:35,439
provider

47
00:01:35,439 --> 00:01:36,799
further we suppose that alice has

48
00:01:36,799 --> 00:01:38,880
terrible taste in sci-fi

49
00:01:38,880 --> 00:01:41,200
in fact her taste is so garbage that

50
00:01:41,200 --> 00:01:42,640
she's embarrassed about the comments

51
00:01:42,640 --> 00:01:44,479
that she makes on the website and she

52
00:01:44,479 --> 00:01:47,759
would like to remain anonymous

53
00:01:47,840 --> 00:01:49,600
furthermore daily science fiction

54
00:01:49,600 --> 00:01:51,520
reserves the right to ban users for any

55
00:01:51,520 --> 00:01:53,600
reason at all

56
00:01:53,600 --> 00:01:54,399
so

57
00:01:54,399 --> 00:01:56,479
to combine this notion of anonymity with

58
00:01:56,479 --> 00:01:58,960
banning we introduce a block list

59
00:01:58,960 --> 00:02:02,159
which contains pseudorandom tags

60
00:02:02,159 --> 00:02:04,000
these tags are associated with every

61
00:02:04,000 --> 00:02:05,600
single comment that is posted on the

62
00:02:05,600 --> 00:02:07,360
website but they're not linkable to the

63
00:02:07,360 --> 00:02:08,959
person who posted them

64
00:02:08,959 --> 00:02:11,038
so in the process of sending a message

65
00:02:11,038 --> 00:02:12,239
alice

66
00:02:12,239 --> 00:02:14,720
will send her own tag associated with

67
00:02:14,720 --> 00:02:16,400
that message which again is is

68
00:02:16,400 --> 00:02:18,879
pseudorandom and also a proof

69
00:02:18,879 --> 00:02:20,160
the proof says

70
00:02:20,160 --> 00:02:22,480
essentially here is a

71
00:02:22,480 --> 00:02:24,239
a random looking token in case you want

72
00:02:24,239 --> 00:02:25,680
to ban me in the future you just put

73
00:02:25,680 --> 00:02:27,360
that on your block list

74
00:02:27,360 --> 00:02:28,400
and

75
00:02:28,400 --> 00:02:33,120
the tag and the um and the proof is that

76
00:02:33,120 --> 00:02:35,280
none of alice's tags already exist on

77
00:02:35,280 --> 00:02:37,040
the block list in other words alice is

78
00:02:37,040 --> 00:02:39,519
not banned

79
00:02:39,519 --> 00:02:42,080
there's some problems with the existing

80
00:02:42,080 --> 00:02:43,840
work which is also the state of the art

81
00:02:43,840 --> 00:02:45,760
in the field first of all and the main

82
00:02:45,760 --> 00:02:47,280
one is

83
00:02:47,280 --> 00:02:49,280
for four million bands

84
00:02:49,280 --> 00:02:52,239
the proof size is over half a gigabyte

85
00:02:52,239 --> 00:02:54,400
so if we just estimate the upload time

86
00:02:54,400 --> 00:02:56,959
on a 50 megabytes 50 megabit per second

87
00:02:56,959 --> 00:03:00,080
system which is five times the median in

88
00:03:00,080 --> 00:03:01,840
in america uh

89
00:03:01,840 --> 00:03:03,519
that is over one and a half minutes just

90
00:03:03,519 --> 00:03:04,800
to verify

91
00:03:04,800 --> 00:03:07,840
uh not even including computation time

92
00:03:07,840 --> 00:03:10,480
and the second issue is that uh proof

93
00:03:10,480 --> 00:03:12,879
reuse is uh is not allowed by the system

94
00:03:12,879 --> 00:03:14,959
so alice has to make her proofs from

95
00:03:14,959 --> 00:03:16,879
scratch every single time she posts a

96
00:03:16,879 --> 00:03:19,840
comment

97
00:03:20,640 --> 00:03:21,519
so

98
00:03:21,519 --> 00:03:25,840
our contributions are twofold we have

99
00:03:25,840 --> 00:03:28,080
a system snark block that's built on a

100
00:03:28,080 --> 00:03:30,560
primitive high chop

101
00:03:30,560 --> 00:03:32,319
high chop is a zero knowledge proof

102
00:03:32,319 --> 00:03:35,760
scheme uh that itself isn't uh that

103
00:03:35,760 --> 00:03:38,080
itself aggregates other zero knowledge

104
00:03:38,080 --> 00:03:39,200
proofs

105
00:03:39,200 --> 00:03:41,599
uh high chop has some properties that

106
00:03:41,599 --> 00:03:44,159
are uh that we use uh in the

107
00:03:44,159 --> 00:03:46,480
construction of snark block

108
00:03:46,480 --> 00:03:48,720
uh one property is update unlinkability

109
00:03:48,720 --> 00:03:50,879
so the underlying proofs

110
00:03:50,879 --> 00:03:52,319
the list of underlying proofs can be

111
00:03:52,319 --> 00:03:53,599
appended to

112
00:03:53,599 --> 00:03:56,799
and we don't have to modify all of them

113
00:03:56,799 --> 00:03:58,480
in order or we don't have to recompute

114
00:03:58,480 --> 00:03:59,680
all of the underlying proofs every

115
00:03:59,680 --> 00:04:01,040
single time we could just add to the

116
00:04:01,040 --> 00:04:02,480
list and then we get a new high chalk

117
00:04:02,480 --> 00:04:03,280
proof

118
00:04:03,280 --> 00:04:05,840
and so we use that for work reuse in our

119
00:04:05,840 --> 00:04:07,680
block listing scheme

120
00:04:07,680 --> 00:04:09,760
the second property is that high chop

121
00:04:09,760 --> 00:04:11,519
proofs are succinct

122
00:04:11,519 --> 00:04:13,200
in particular they're logarithmic in the

123
00:04:13,200 --> 00:04:14,640
size of

124
00:04:14,640 --> 00:04:16,238
the number of proofs that they aggregate

125
00:04:16,238 --> 00:04:18,720
and what that means for us is that

126
00:04:18,720 --> 00:04:20,399
we get scalability in our block listing

127
00:04:20,399 --> 00:04:22,160
scheme because our proofs

128
00:04:22,160 --> 00:04:23,840
are become logarithmic in the size of

129
00:04:23,840 --> 00:04:26,240
the block list itself

130
00:04:26,240 --> 00:04:28,080
so concretely

131
00:04:28,080 --> 00:04:29,840
snark block

132
00:04:29,840 --> 00:04:33,040
has proof sizes for 134 million

133
00:04:33,040 --> 00:04:35,120
bands we'll have a proof size of 200

134
00:04:35,120 --> 00:04:36,639
kilobytes

135
00:04:36,639 --> 00:04:37,600
and

136
00:04:37,600 --> 00:04:39,520
this takes less than a second to upload

137
00:04:39,520 --> 00:04:41,759
and verify for the server so

138
00:04:41,759 --> 00:04:43,440
we believe that this is

139
00:04:43,440 --> 00:04:44,720
closer to what

140
00:04:44,720 --> 00:04:47,919
is considered scalable

141
00:04:48,400 --> 00:04:50,160
so we'll start with an existing with the

142
00:04:50,160 --> 00:04:52,080
existing block listing scheme

143
00:04:52,080 --> 00:04:53,680
from black and

144
00:04:53,680 --> 00:04:54,880
we're going to see what goes wrong with

145
00:04:54,880 --> 00:04:56,240
it and then we're going to iteratively

146
00:04:56,240 --> 00:04:59,840
fix it until we arrive to snark block

147
00:04:59,919 --> 00:05:01,680
so let's see what happens when alice

148
00:05:01,680 --> 00:05:03,280
tries to log in

149
00:05:03,280 --> 00:05:06,320
when the block list is empty

150
00:05:06,320 --> 00:05:07,440
first

151
00:05:07,440 --> 00:05:09,440
we note that she has she has an identity

152
00:05:09,440 --> 00:05:11,199
this identity is a

153
00:05:11,199 --> 00:05:13,440
a random number essentially that is only

154
00:05:13,440 --> 00:05:17,199
known to her this is uh this is tied to

155
00:05:17,199 --> 00:05:19,680
her as a person and uh not known to

156
00:05:19,680 --> 00:05:22,240
daily science fiction

157
00:05:22,240 --> 00:05:25,360
alice will sample a nonce that's random

158
00:05:25,360 --> 00:05:28,000
and she will compute a tag uh which is

159
00:05:28,000 --> 00:05:30,400
uh a uh which is a pseudonym random

160
00:05:30,400 --> 00:05:32,639
value um or it it's a pseudo-random

161
00:05:32,639 --> 00:05:35,440
function evaluated on the nonce uh

162
00:05:35,440 --> 00:05:38,080
again this tag is pseudorandom so it's

163
00:05:38,080 --> 00:05:39,440
unlinkable

164
00:05:39,440 --> 00:05:41,440
and she will compute a proof that says

165
00:05:41,440 --> 00:05:43,039
basically that the tag is well formed

166
00:05:43,039 --> 00:05:44,639
i.e that the tag is the result of the

167
00:05:44,639 --> 00:05:46,320
prf on the nonce

168
00:05:46,320 --> 00:05:48,320
she'll send the nonce the tag and the

169
00:05:48,320 --> 00:05:50,320
proof to daily science fiction and daily

170
00:05:50,320 --> 00:05:51,919
science fiction will verify if it's all

171
00:05:51,919 --> 00:05:54,159
good

172
00:05:55,680 --> 00:05:57,360
now what happens when alice logs in when

173
00:05:57,360 --> 00:05:59,600
there is a block list

174
00:05:59,600 --> 00:06:02,400
she'll sample a nonce just as before

175
00:06:02,400 --> 00:06:04,800
she'll sample a tag

176
00:06:04,800 --> 00:06:07,360
and uh she'll compute the tag as the prf

177
00:06:07,360 --> 00:06:08,160
again

178
00:06:08,160 --> 00:06:10,479
and she'll also uh compute the proof

179
00:06:10,479 --> 00:06:11,919
just as before that the tag is well

180
00:06:11,919 --> 00:06:15,280
formed and in addition she will add uh

181
00:06:15,280 --> 00:06:17,120
a bunch of terms to the proof basically

182
00:06:17,120 --> 00:06:19,280
saying my tag none of my previously

183
00:06:19,280 --> 00:06:21,120
computed tags appear in the current

184
00:06:21,120 --> 00:06:23,759
block list

185
00:06:25,039 --> 00:06:26,560
and so she's going to have as many terms

186
00:06:26,560 --> 00:06:28,800
as there are on the block list

187
00:06:28,800 --> 00:06:30,080
and then she's going to send the nonce

188
00:06:30,080 --> 00:06:31,759
the tag and the proof just like before

189
00:06:31,759 --> 00:06:35,039
and daily science fiction will verify

190
00:06:35,039 --> 00:06:37,039
so this is black's scheme

191
00:06:37,039 --> 00:06:38,560
uh

192
00:06:38,560 --> 00:06:40,880
and the main problem is that the proof

193
00:06:40,880 --> 00:06:43,520
is not succinct right the proof size as

194
00:06:43,520 --> 00:06:45,600
i mentioned is uh it grows with the

195
00:06:45,600 --> 00:06:49,199
number of terms uh in in the bottom of

196
00:06:49,199 --> 00:06:50,800
this box which is the size of the block

197
00:06:50,800 --> 00:06:51,919
list

198
00:06:51,919 --> 00:06:53,599
so a linear size proof means that

199
00:06:53,599 --> 00:06:55,759
verification time is also linear which

200
00:06:55,759 --> 00:06:57,840
means that this doesn't scale so our our

201
00:06:57,840 --> 00:07:00,000
primary goal here is to allow for

202
00:07:00,000 --> 00:07:02,240
sub-linear proof size

203
00:07:02,240 --> 00:07:05,919
and sublinear verification time

204
00:07:05,919 --> 00:07:07,759
so

205
00:07:07,759 --> 00:07:09,039
first question why can't we just make

206
00:07:09,039 --> 00:07:10,880
this a snark

207
00:07:10,880 --> 00:07:12,720
right a snark is a

208
00:07:12,720 --> 00:07:14,319
zero-knowledge proof of knowledge that

209
00:07:14,319 --> 00:07:16,720
is succinct uh and succinctness

210
00:07:16,720 --> 00:07:18,319
basically means at least in the ones

211
00:07:18,319 --> 00:07:19,520
that we were looking at that the proofs

212
00:07:19,520 --> 00:07:21,520
are constant size and verification is

213
00:07:21,520 --> 00:07:23,680
constant time so if you just do that now

214
00:07:23,680 --> 00:07:25,280
your verification is constant time and

215
00:07:25,280 --> 00:07:27,919
you're done right

216
00:07:28,840 --> 00:07:31,199
well main problem is that this is really

217
00:07:31,199 --> 00:07:33,039
slow uh

218
00:07:33,039 --> 00:07:36,720
for uh a proof uh for a uh

219
00:07:36,720 --> 00:07:38,720
for two million terms this is going to

220
00:07:38,720 --> 00:07:42,319
take three hours on a 256 core cluster

221
00:07:42,319 --> 00:07:44,639
that's unreasonable um

222
00:07:44,639 --> 00:07:45,919
also

223
00:07:45,919 --> 00:07:48,720
for uh trusted setup circuits uh the

224
00:07:48,720 --> 00:07:50,639
circuit size will have to increase every

225
00:07:50,639 --> 00:07:52,319
single time you increase the block list

226
00:07:52,319 --> 00:07:53,919
and you're gonna have to do a setup

227
00:07:53,919 --> 00:07:56,400
every time

228
00:07:56,840 --> 00:07:59,440
so let's try to fix this

229
00:07:59,440 --> 00:08:01,440
we like the idea of snarks

230
00:08:01,440 --> 00:08:02,160
but

231
00:08:02,160 --> 00:08:04,160
uh it grows too big so why not just

232
00:08:04,160 --> 00:08:06,319
break this up into many smaller snarks

233
00:08:06,319 --> 00:08:08,800
right so take the block list chunk it up

234
00:08:08,800 --> 00:08:11,520
into chunks of say size 10

235
00:08:11,520 --> 00:08:15,120
right you have s many chunks

236
00:08:15,680 --> 00:08:17,039
and you're going to compute the

237
00:08:17,039 --> 00:08:18,879
well-formedness proof like before the

238
00:08:18,879 --> 00:08:21,440
tag is the result of the prf and you're

239
00:08:21,440 --> 00:08:23,520
also going to compute a proof for every

240
00:08:23,520 --> 00:08:25,680
single chunk saying that

241
00:08:25,680 --> 00:08:27,680
my that none of my tags that i've ever

242
00:08:27,680 --> 00:08:29,440
computed appear in chunk one none of my

243
00:08:29,440 --> 00:08:30,800
tags that i've ever computed appear in

244
00:08:30,800 --> 00:08:33,840
chunk two etc

245
00:08:34,479 --> 00:08:36,159
and then you basically send the nonce

246
00:08:36,159 --> 00:08:37,919
the tag the tag will form in his proof

247
00:08:37,919 --> 00:08:41,360
and then all of the chunk proofs

248
00:08:41,360 --> 00:08:42,719
so

249
00:08:42,719 --> 00:08:44,240
the first problem with this is that

250
00:08:44,240 --> 00:08:46,720
we're back to linear uh again right if

251
00:08:46,720 --> 00:08:48,240
the chunk size is fixed then the number

252
00:08:48,240 --> 00:08:49,600
of proofs is linear so this doesn't

253
00:08:49,600 --> 00:08:51,120
scale again

254
00:08:51,120 --> 00:08:52,480
and the other issue is that this

255
00:08:52,480 --> 00:08:54,720
actually has a consistency problem

256
00:08:54,720 --> 00:08:56,399
there's nothing there's nothing that

257
00:08:56,399 --> 00:08:58,640
shows that the identity

258
00:08:58,640 --> 00:09:00,320
in all of these proofs is the same in

259
00:09:00,320 --> 00:09:02,560
fact alice could have used one identity

260
00:09:02,560 --> 00:09:04,320
and one proof and another identity in

261
00:09:04,320 --> 00:09:06,240
another proof and she could have evaded

262
00:09:06,240 --> 00:09:08,560
a ban by using the identity that was not

263
00:09:08,560 --> 00:09:11,920
banned in that particular chunk

264
00:09:13,680 --> 00:09:15,600
so let's try to fix the second problem

265
00:09:15,600 --> 00:09:18,000
here the ban evasion one

266
00:09:18,000 --> 00:09:20,240
there's you can do a commit improve

267
00:09:20,240 --> 00:09:21,360
scheme

268
00:09:21,360 --> 00:09:23,040
where you

269
00:09:23,040 --> 00:09:26,000
compute a commitment to the identity and

270
00:09:26,000 --> 00:09:27,440
then make all of these proofs with

271
00:09:27,440 --> 00:09:28,720
respect to the commitment now this

272
00:09:28,720 --> 00:09:30,720
commitment is hiding so it doesn't

273
00:09:30,720 --> 00:09:32,240
reveal anything

274
00:09:32,240 --> 00:09:33,519
and you can show that all of these are

275
00:09:33,519 --> 00:09:37,720
made with respect to the same identity

276
00:09:37,760 --> 00:09:39,120
so then you would just send the

277
00:09:39,120 --> 00:09:40,560
commitment

278
00:09:40,560 --> 00:09:42,880
send the commitment along

279
00:09:42,880 --> 00:09:44,720
why doesn't this work well

280
00:09:44,720 --> 00:09:46,640
you can do this but then you can't reuse

281
00:09:46,640 --> 00:09:48,160
any of the proofs because the proofs are

282
00:09:48,160 --> 00:09:49,600
now made with respect to this fixed

283
00:09:49,600 --> 00:09:50,560
commitment

284
00:09:50,560 --> 00:09:51,839
and if you have to send that commitment

285
00:09:51,839 --> 00:09:53,360
again you're linking yourself across

286
00:09:53,360 --> 00:09:57,440
different different attestations

287
00:09:58,560 --> 00:09:59,360
so

288
00:09:59,360 --> 00:10:00,800
what we need

289
00:10:00,800 --> 00:10:03,120
is a hidden common input

290
00:10:03,120 --> 00:10:05,440
aggregate proof right we have to

291
00:10:05,440 --> 00:10:06,880
and we have to show that these hidden

292
00:10:06,880 --> 00:10:09,360
inputs i.e the identity are consistent

293
00:10:09,360 --> 00:10:11,120
across the proofs

294
00:10:11,120 --> 00:10:13,200
right

295
00:10:13,200 --> 00:10:14,720
and at the same time we need it to be

296
00:10:14,720 --> 00:10:15,920
succinct

297
00:10:15,920 --> 00:10:19,040
so this is exactly the uh the property

298
00:10:19,040 --> 00:10:21,279
that high chop provides

299
00:10:21,279 --> 00:10:23,920
it is succinct it has uh update

300
00:10:23,920 --> 00:10:25,040
unlinkability so that you can

301
00:10:25,040 --> 00:10:26,560
incrementally increase the number of

302
00:10:26,560 --> 00:10:29,120
proofs underlyingly

303
00:10:29,120 --> 00:10:31,279
and it shows that all of these proofs

304
00:10:31,279 --> 00:10:33,279
have a consistent input so the way this

305
00:10:33,279 --> 00:10:36,079
works is you have all of your chunk

306
00:10:36,079 --> 00:10:37,040
proofs

307
00:10:37,040 --> 00:10:38,959
you aggregate them together and you

308
00:10:38,959 --> 00:10:41,600
produce a single aggregate proof

309
00:10:41,600 --> 00:10:43,760
that also internally links all of these

310
00:10:43,760 --> 00:10:45,360
all of these identities together without

311
00:10:45,360 --> 00:10:46,800
revealing externally what those

312
00:10:46,800 --> 00:10:48,399
identities are

313
00:10:48,399 --> 00:10:52,399
unlike in the uh commit and proof scheme

314
00:10:52,399 --> 00:10:53,760
and so then the only thing that you're

315
00:10:53,760 --> 00:10:56,160
sending is the nonce the tag and the

316
00:10:56,160 --> 00:11:01,240
logarithmic sized aggregate proof

317
00:11:01,839 --> 00:11:02,720
so

318
00:11:02,720 --> 00:11:06,240
our our scheme snark block simplified

319
00:11:06,240 --> 00:11:08,880
goes as follows we now have a block list

320
00:11:08,880 --> 00:11:10,720
which is a sequence of chunks instead of

321
00:11:10,720 --> 00:11:14,000
a sequence of just non-stack pairs

322
00:11:14,000 --> 00:11:17,040
and alice has a bunch of her chunk

323
00:11:17,040 --> 00:11:18,720
proofs precomputed she can do these

324
00:11:18,720 --> 00:11:20,160
offline

325
00:11:20,160 --> 00:11:23,120
she will sample her nonce computer tag

326
00:11:23,120 --> 00:11:24,399
like before

327
00:11:24,399 --> 00:11:26,800
and start and compute her

328
00:11:26,800 --> 00:11:28,480
tag well forbidden proof and then

329
00:11:28,480 --> 00:11:30,320
compute an aggregate proof over all of

330
00:11:30,320 --> 00:11:31,680
the chunk proofs and the tag while

331
00:11:31,680 --> 00:11:33,360
forbidden as proof

332
00:11:33,360 --> 00:11:36,240
this is using high chop

333
00:11:36,240 --> 00:11:37,920
then she'll center aggregate daily

334
00:11:37,920 --> 00:11:41,880
science fiction verify

335
00:11:43,200 --> 00:11:45,600
so let's look at performance so first we

336
00:11:45,600 --> 00:11:47,279
look at verification cost since this was

337
00:11:47,279 --> 00:11:49,440
the motivation initially scalability is

338
00:11:49,440 --> 00:11:52,560
determined by how many uh users a server

339
00:11:52,560 --> 00:11:54,480
can handle so verification is what the

340
00:11:54,480 --> 00:11:56,000
server is going to be doing for the most

341
00:11:56,000 --> 00:11:57,920
part

342
00:11:57,920 --> 00:11:59,360
so for chunk size

343
00:11:59,360 --> 00:12:01,360
8192

344
00:12:01,360 --> 00:12:02,079
at

345
00:12:02,079 --> 00:12:02,800
the

346
00:12:02,800 --> 00:12:05,600
at the blockless size 134 million

347
00:12:05,600 --> 00:12:08,160
elements the aggregate proof is going to

348
00:12:08,160 --> 00:12:10,480
be 200 kilobytes and the verification

349
00:12:10,480 --> 00:12:12,480
latency is going to be less than 230

350
00:12:12,480 --> 00:12:15,120
milliseconds

351
00:12:15,120 --> 00:12:16,560
uh and we have graphs here showing the

352
00:12:16,560 --> 00:12:19,200
logarithmic behavior uh the log link uh

353
00:12:19,200 --> 00:12:22,160
proof size and uh throughput behavior of

354
00:12:22,160 --> 00:12:24,560
the verification routines and the

355
00:12:24,560 --> 00:12:26,720
precises

356
00:12:26,720 --> 00:12:28,720
comparing this to black

357
00:12:28,720 --> 00:12:30,480
for just four million elements the proof

358
00:12:30,480 --> 00:12:32,399
size is over half a gigabyte

359
00:12:32,399 --> 00:12:34,480
and their verification latency

360
00:12:34,480 --> 00:12:37,440
we upper bound by just the upload time

361
00:12:37,440 --> 00:12:38,720
because it's certainly larger than the

362
00:12:38,720 --> 00:12:40,240
upload time and the upload time itself

363
00:12:40,240 --> 00:12:43,200
is one and a half minutes

364
00:12:44,800 --> 00:12:47,680
so now we look at proof costs

365
00:12:47,680 --> 00:12:50,079
so recall alice has to recompute a new

366
00:12:50,079 --> 00:12:52,399
chunk every time a batch of additions is

367
00:12:52,399 --> 00:12:54,240
made to the block list

368
00:12:54,240 --> 00:12:55,200
so

369
00:12:55,200 --> 00:12:57,760
we estimate the offline chunk proof time

370
00:12:57,760 --> 00:12:59,760
or we benchmark the offline chunk proof

371
00:12:59,760 --> 00:13:02,240
time is about 200 seconds for every

372
00:13:02,240 --> 00:13:05,279
12 000 bands

373
00:13:05,600 --> 00:13:07,680
um and we also have n10 benchmarks which

374
00:13:07,680 --> 00:13:11,200
show uh that again for 134 million the

375
00:13:11,200 --> 00:13:14,240
uh a small chunk recon recomputation

376
00:13:14,240 --> 00:13:16,079
plus a full attestation including the

377
00:13:16,079 --> 00:13:18,079
aggregation plus upload plus

378
00:13:18,079 --> 00:13:20,000
verification cost is going to be 23

379
00:13:20,000 --> 00:13:22,399
seconds

380
00:13:24,800 --> 00:13:27,120
uh we note that we get all the security

381
00:13:27,120 --> 00:13:28,240
properties you would want out of this

382
00:13:28,240 --> 00:13:30,560
scheme block listability base says that

383
00:13:30,560 --> 00:13:31,519
if you're blocked you're actually

384
00:13:31,519 --> 00:13:33,519
blocked you can't log in

385
00:13:33,519 --> 00:13:35,279
non-frameability says that no one but

386
00:13:35,279 --> 00:13:37,279
the server could

387
00:13:37,279 --> 00:13:39,440
could force you to be effectively

388
00:13:39,440 --> 00:13:40,399
blocked

389
00:13:40,399 --> 00:13:42,079
and anonymity means that you are

390
00:13:42,079 --> 00:13:43,920
anonymous

391
00:13:43,920 --> 00:13:46,160
so in summary we asked how do you get

392
00:13:46,160 --> 00:13:47,839
how do you get block listing that scales

393
00:13:47,839 --> 00:13:50,720
to millions of users and we provided

394
00:13:50,720 --> 00:13:53,680
high chop which is a snark aggregation

395
00:13:53,680 --> 00:13:55,440
scheme with update on linkability and we

396
00:13:55,440 --> 00:13:58,880
used high chop to construct snark block

397
00:13:58,880 --> 00:14:00,160
which has less than one second

398
00:14:00,160 --> 00:14:03,839
verification time for 134 million bands

399
00:14:03,839 --> 00:14:05,360
proofs are fast too

400
00:14:05,360 --> 00:14:08,240
these are these are the properties

401
00:14:08,240 --> 00:14:10,480
and that's my timer

402
00:14:10,480 --> 00:14:12,150
questions

403
00:14:12,150 --> 00:14:19,209
[Applause]

404
00:14:22,320 --> 00:14:24,560
yeah so um i was wondering if you have

405
00:14:24,560 --> 00:14:26,399
to re-download the entire block list as

406
00:14:26,399 --> 00:14:28,720
a client or can you just download the

407
00:14:28,720 --> 00:14:31,040
delta of the new edition yeah you can do

408
00:14:31,040 --> 00:14:32,880
deltas you can just download whatever

409
00:14:32,880 --> 00:14:35,199
changed in between attestations

410
00:14:35,199 --> 00:14:37,519
thanks

411
00:14:42,000 --> 00:14:44,320
um great word thank you um have you

412
00:14:44,320 --> 00:14:47,680
considered using an accumulator to prove

413
00:14:47,680 --> 00:14:49,199
that a tag

414
00:14:49,199 --> 00:14:51,440
non-stopple is not part of the block

415
00:14:51,440 --> 00:14:53,440
list or what would be the trade-offs

416
00:14:53,440 --> 00:14:54,399
here

417
00:14:54,399 --> 00:14:56,639
right so we actually did look at

418
00:14:56,639 --> 00:14:59,279
accumulator-based schemes uh

419
00:14:59,279 --> 00:15:01,680
so one of the issues we had uh with that

420
00:15:01,680 --> 00:15:04,000
was uh i think they were mostly used in

421
00:15:04,000 --> 00:15:06,160
uh de-anonymizing schemes they required

422
00:15:06,160 --> 00:15:08,560
a de-anonymizing party uh that you

423
00:15:08,560 --> 00:15:10,560
trusted in order to in order to add

424
00:15:10,560 --> 00:15:13,199
someone to the accumulated

425
00:15:13,199 --> 00:15:14,720
to the accumulated value so that's

426
00:15:14,720 --> 00:15:17,360
that's why we couldn't make that work

427
00:15:17,360 --> 00:15:19,760
thank you

428
00:15:22,560 --> 00:15:26,240
we have time for a few more questions

429
00:15:26,240 --> 00:15:29,440
okay i have a question

430
00:15:31,440 --> 00:15:34,240
so what do you envision that we can use

431
00:15:34,240 --> 00:15:36,800
for these tokens or identities and how

432
00:15:36,800 --> 00:15:39,040
do we make them hard to obtain

433
00:15:39,040 --> 00:15:40,399
right so

434
00:15:40,399 --> 00:15:42,160
this is uh

435
00:15:42,160 --> 00:15:42,880
so

436
00:15:42,880 --> 00:15:44,880
this notion is uh

437
00:15:44,880 --> 00:15:46,079
basically how do you get how do you get

438
00:15:46,079 --> 00:15:47,920
strong civil resistant identities on the

439
00:15:47,920 --> 00:15:50,720
internet right so currently what what

440
00:15:50,720 --> 00:15:53,600
people do is they will rely on um your

441
00:15:53,600 --> 00:15:55,680
real name or they will ask for your

442
00:15:55,680 --> 00:15:56,959
passport or they will ask for your phone

443
00:15:56,959 --> 00:15:59,839
number right facebook or gmail for

444
00:15:59,839 --> 00:16:03,440
example ask for your phone number so

445
00:16:03,440 --> 00:16:05,199
obviously this isn't ideal but currently

446
00:16:05,199 --> 00:16:07,040
it is one of the most widely used civil

447
00:16:07,040 --> 00:16:08,880
resistance mechanism so you can imagine

448
00:16:08,880 --> 00:16:12,000
an identity provider would use that or

449
00:16:12,000 --> 00:16:14,639
use whatever existing mechanisms exist

450
00:16:14,639 --> 00:16:16,880
in order to issue identities

451
00:16:16,880 --> 00:16:18,880
and so the main benefit here is not that

452
00:16:18,880 --> 00:16:20,800
it is a new civil resistance mechanism

453
00:16:20,800 --> 00:16:22,800
but rather it just separates the

454
00:16:22,800 --> 00:16:24,880
identity provider from whatever that

455
00:16:24,880 --> 00:16:26,880
user ends up doing we have actual

456
00:16:26,880 --> 00:16:28,399
separation between

457
00:16:28,399 --> 00:16:29,680
who someone is

458
00:16:29,680 --> 00:16:31,199
or rather the fact that a person is

459
00:16:31,199 --> 00:16:33,040
human and then whatever they end up

460
00:16:33,040 --> 00:16:34,880
doing on the internet

461
00:16:34,880 --> 00:16:37,360
makes sense thanks

462
00:16:37,360 --> 00:16:38,399
hello

463
00:16:38,399 --> 00:16:40,880
great talk sort of from uiuc so i i was

464
00:16:40,880 --> 00:16:42,959
wondering why do you get logarithmic you

465
00:16:42,959 --> 00:16:45,440
i think you use grout 16 everywhere so

466
00:16:45,440 --> 00:16:47,680
where does the logarithmic shows up yeah

467
00:16:47,680 --> 00:16:49,600
so the aggregation so the aggregation

468
00:16:49,600 --> 00:16:53,600
technique is due to uh the and the

469
00:16:53,600 --> 00:16:56,560
it's it's the paper name is proof on uh

470
00:16:56,560 --> 00:16:58,639
proofs on inner pairing products or

471
00:16:58,639 --> 00:17:00,800
something like that um uh it's in the

472
00:17:00,800 --> 00:17:03,600
paper but uh basically we the groth 16

473
00:17:03,600 --> 00:17:05,280
verification equation is really simple

474
00:17:05,280 --> 00:17:07,599
right it's a single equation and it

475
00:17:07,599 --> 00:17:10,079
looks like uh an uh and if you have a

476
00:17:10,079 --> 00:17:11,520
lot of them you can basically turn it

477
00:17:11,520 --> 00:17:13,119
into an inner product where the inner

478
00:17:13,119 --> 00:17:15,919
product operation is uh a bilinear

479
00:17:15,919 --> 00:17:16,799
pairing

480
00:17:16,799 --> 00:17:18,799
but now that you have something that

481
00:17:18,799 --> 00:17:20,559
uses inner products you can do standard

482
00:17:20,559 --> 00:17:22,000
folding methods so if you're familiar

483
00:17:22,000 --> 00:17:23,359
with the sum check

484
00:17:23,359 --> 00:17:25,439
technique you can basically just fold in

485
00:17:25,439 --> 00:17:27,599
logarithmically many

486
00:17:27,599 --> 00:17:28,720
steps

487
00:17:28,720 --> 00:17:32,200
okay thanks

