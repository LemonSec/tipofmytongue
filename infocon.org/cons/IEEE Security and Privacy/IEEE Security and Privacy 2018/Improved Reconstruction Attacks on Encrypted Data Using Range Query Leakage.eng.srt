1
00:00:07,790 --> 00:00:14,099
thank you for the introduction<font color="#CCCCCC"> sorry</font>

2
00:00:11,490 --> 00:00:17,100
<font color="#CCCCCC">about the long title</font><font color="#E5E5E5"> it's actually this</font>

3
00:00:14,099 --> 00:00:18,300
as the<font color="#CCCCCC"> previous two talks</font><font color="#E5E5E5"> but this time</font>

4
00:00:17,100 --> 00:00:21,300
we're<font color="#E5E5E5"> going to look at things</font><font color="#CCCCCC"> from the</font>

5
00:00:18,300 --> 00:00:23,580
<font color="#CCCCCC">perspective</font><font color="#E5E5E5"> of attacks</font>

6
00:00:21,300 --> 00:00:25,980
so just to recap the setting quickly

7
00:00:23,580 --> 00:00:28,409
<font color="#CCCCCC">we're considering</font><font color="#E5E5E5"> a case where as a</font>

8
00:00:25,980 --> 00:00:31,019
<font color="#E5E5E5">client you want to outsource some</font><font color="#CCCCCC"> data</font>

9
00:00:28,410 --> 00:00:34,140
to an external<font color="#CCCCCC"> server</font><font color="#E5E5E5"> somewhere in the</font>

10
00:00:31,019 --> 00:00:38,309
cloud and<font color="#E5E5E5"> you want also to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

11
00:00:34,140 --> 00:00:42,360
issue<font color="#E5E5E5"> search queries on on the data that</font>

12
00:00:38,309 --> 00:00:43,530
you have<font color="#CCCCCC"> outsourced so for example if</font>

13
00:00:42,360 --> 00:00:45,150
you're thinking<font color="#E5E5E5"> of outsourcing a</font>

14
00:00:43,530 --> 00:00:49,200
database you might want to be able<font color="#CCCCCC"> to</font>

15
00:00:45,150 --> 00:00:51,180
handle basic queries such<font color="#E5E5E5"> that fetch all</font>

16
00:00:49,200 --> 00:00:53,969
records that<font color="#E5E5E5"> match a given value or</font>

17
00:00:51,180 --> 00:00:57,300
fetch all records<font color="#E5E5E5"> that are with whose</font>

18
00:00:53,969 --> 00:00:58,710
value is<font color="#E5E5E5"> within a given range and of</font>

19
00:00:57,300 --> 00:01:02,069
course you might also want to encrypt

20
00:00:58,710 --> 00:01:04,259
that data<font color="#E5E5E5"> right</font><font color="#CCCCCC"> and here you will you</font>

21
00:01:02,070 --> 00:01:05,910
may need to achieve<font color="#E5E5E5"> some sort of</font>

22
00:01:04,259 --> 00:01:09,090
trade-off between the security<font color="#CCCCCC"> of</font><font color="#E5E5E5"> your</font>

23
00:01:05,910 --> 00:01:12,630
scheme and the ability to for the server

24
00:01:09,090 --> 00:01:14,820
<font color="#E5E5E5">to handle a</font><font color="#CCCCCC"> a rich set of</font><font color="#E5E5E5"> queries</font>

25
00:01:12,630 --> 00:01:16,080
<font color="#E5E5E5">because if you were to just encrypt</font>

26
00:01:14,820 --> 00:01:18,330
<font color="#CCCCCC">everything that you've leave and the</font>

27
00:01:16,080 --> 00:01:23,789
server would not be<font color="#E5E5E5"> able to handle</font>

28
00:01:18,330 --> 00:01:25,020
<font color="#E5E5E5">queries okay so which</font><font color="#CCCCCC"> adversary's are we</font>

29
00:01:23,790 --> 00:01:26,880
talking about so the most basic

30
00:01:25,020 --> 00:01:29,789
<font color="#CCCCCC">adversaries that you might think of it's</font>

31
00:01:26,880 --> 00:01:34,789
<font color="#CCCCCC">just a snapshot adversary</font><font color="#E5E5E5"> who would</font>

32
00:01:29,790 --> 00:01:37,170
break<font color="#E5E5E5"> into you into the server</font><font color="#CCCCCC"> and still</font>

33
00:01:34,790 --> 00:01:38,939
<font color="#E5E5E5">the memory of the server observe the</font>

34
00:01:37,170 --> 00:01:41,130
memory of the server<font color="#E5E5E5"> and get your</font>

35
00:01:38,939 --> 00:01:43,529
database you encrypted<font color="#E5E5E5"> database but you</font>

36
00:01:41,130 --> 00:01:46,679
may also want to<font color="#E5E5E5"> consider a stronger</font>

37
00:01:43,530 --> 00:01:49,290
adversary<font color="#E5E5E5"> the persistent adversary who</font>

38
00:01:46,680 --> 00:01:51,720
would be<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> cope</font><font color="#CCCCCC"> out the server for</font>

39
00:01:49,290 --> 00:01:57,149
<font color="#E5E5E5">a certain amount</font><font color="#CCCCCC"> of time and</font><font color="#E5E5E5"> observe all</font>

40
00:01:51,720 --> 00:02:00,000
communication<font color="#E5E5E5"> and moreover if you want</font>

41
00:01:57,149 --> 00:02:02,640
to ensure<font color="#CCCCCC"> that your</font><font color="#E5E5E5"> data is private with</font>

42
00:02:00,000 --> 00:02:05,250
<font color="#E5E5E5">respect to a server with handling the</font>

43
00:02:02,640 --> 00:02:07,200
queries<font color="#E5E5E5"> then the server itself is your</font>

44
00:02:05,250 --> 00:02:11,730
adversary<font color="#E5E5E5"> you want that the server who</font>

45
00:02:07,200 --> 00:02:15,660
handles the queries cannot infer the

46
00:02:11,730 --> 00:02:19,350
values of<font color="#CCCCCC"> the values within your</font>

47
00:02:15,660 --> 00:02:21,060
database<font color="#E5E5E5"> so this is</font><font color="#CCCCCC"> what's the</font><font color="#E5E5E5"> previous</font>

48
00:02:19,350 --> 00:02:23,480
<font color="#E5E5E5">two constructions were trying to achieve</font>

49
00:02:21,060 --> 00:02:23,480
<font color="#CCCCCC">right</font>

50
00:02:24,050 --> 00:02:30,260
and so in this space there<font color="#CCCCCC"> are already a</font>

51
00:02:28,040 --> 00:02:32,390
<font color="#E5E5E5">number of solutions so you might have</font>

52
00:02:30,260 --> 00:02:34,100
<font color="#E5E5E5">heard of a</font><font color="#CCCCCC"> strong structure preserving</font>

53
00:02:32,390 --> 00:02:36,019
encryption for<font color="#E5E5E5"> example so</font><font color="#CCCCCC"> order</font>

54
00:02:34,100 --> 00:02:38,510
repeating encryption or order<font color="#CCCCCC"> presenting</font>

55
00:02:36,020 --> 00:02:41,570
<font color="#CCCCCC">and encryption</font><font color="#E5E5E5"> this could be considered</font>

56
00:02:38,510 --> 00:02:42,920
<font color="#E5E5E5">as maybe</font><font color="#CCCCCC"> first-generation</font><font color="#E5E5E5"> solution and</font>

57
00:02:41,570 --> 00:02:46,720
if you've heard<font color="#E5E5E5"> of them you</font><font color="#CCCCCC"> might also</font>

58
00:02:42,920 --> 00:02:48,799
have<font color="#E5E5E5"> heard that</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> are pretty broken</font>

59
00:02:46,720 --> 00:02:51,620
so as a result<font color="#E5E5E5"> that has been</font>

60
00:02:48,800 --> 00:02:55,870
<font color="#CCCCCC">second-generation</font><font color="#E5E5E5"> schemes</font><font color="#CCCCCC"> that attempt</font>

61
00:02:51,620 --> 00:02:58,430
to protect to give meaningful guarantees

62
00:02:55,870 --> 00:03:03,460
against<font color="#E5E5E5"> snapshot and persistent</font>

63
00:02:58,430 --> 00:03:07,160
<font color="#E5E5E5">attackers and this</font><font color="#CCCCCC"> is currently</font><font color="#E5E5E5"> a very</font>

64
00:03:03,460 --> 00:03:10,240
<font color="#E5E5E5">active research topic with</font><font color="#CCCCCC"> we've just</font>

65
00:03:07,160 --> 00:03:12,380
<font color="#CCCCCC">seen</font><font color="#E5E5E5"> some examples</font><font color="#CCCCCC"> in that space so</font>

66
00:03:10,240 --> 00:03:15,170
<font color="#CCCCCC">today specifically I want to talk about</font>

67
00:03:12,380 --> 00:03:17,299
range queries so beyond queries but you

68
00:03:15,170 --> 00:03:20,209
want<font color="#CCCCCC"> to fetch a record that matched is a</font>

69
00:03:17,300 --> 00:03:23,450
fixed value<font color="#E5E5E5"> the perhaps the</font><font color="#CCCCCC"> most</font><font color="#E5E5E5"> basic</font>

70
00:03:20,210 --> 00:03:25,010
<font color="#E5E5E5">query you want to be able</font><font color="#CCCCCC"> to handle to</font>

71
00:03:23,450 --> 00:03:27,739
call something<font color="#CCCCCC"> that a database</font>

72
00:03:25,010 --> 00:03:31,250
management system is range queries<font color="#E5E5E5"> so</font>

73
00:03:27,740 --> 00:03:35,120
here in the<font color="#CCCCCC"> example that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> shown on</font>

74
00:03:31,250 --> 00:03:38,360
this slide you say the server has four

75
00:03:35,120 --> 00:03:40,250
records<font color="#E5E5E5"> and we're going to focus on one</font>

76
00:03:38,360 --> 00:03:42,860
value in each record<font color="#E5E5E5"> so they're going</font><font color="#CCCCCC"> is</font>

77
00:03:40,250 --> 00:03:46,340
<font color="#E5E5E5">going to look essentially as one column</font>

78
00:03:42,860 --> 00:03:47,840
at one column in the database<font color="#CCCCCC"> so assume</font>

79
00:03:46,340 --> 00:03:52,490
the server<font color="#E5E5E5"> has four records with the</font>

80
00:03:47,840 --> 00:03:55,400
values in red here<font color="#CCCCCC"> and the client</font><font color="#E5E5E5"> issue</font>

81
00:03:52,490 --> 00:03:57,860
is a query<font color="#CCCCCC"> to fetch all records whose</font>

82
00:03:55,400 --> 00:04:00,800
value<font color="#CCCCCC"> is between</font><font color="#E5E5E5"> 40 and hundred and in</font>

83
00:03:57,860 --> 00:04:03,530
that case the<font color="#E5E5E5"> server would return</font><font color="#CCCCCC"> the</font>

84
00:04:00,800 --> 00:04:06,740
<font color="#CCCCCC">first and third</font><font color="#E5E5E5"> record whose value is</font>

85
00:04:03,530 --> 00:04:09,290
<font color="#E5E5E5">within the range but of course the the</font>

86
00:04:06,740 --> 00:04:12,020
<font color="#CCCCCC">hard point here is that everything in</font>

87
00:04:09,290 --> 00:04:14,090
red<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> picture is actually</font>

88
00:04:12,020 --> 00:04:15,950
<font color="#E5E5E5">invisible to the server right so the</font>

89
00:04:14,090 --> 00:04:18,738
server<font color="#E5E5E5"> doesn't see the</font><font color="#CCCCCC"> query derange</font>

90
00:04:15,950 --> 00:04:20,690
doesn't see the value<font color="#CCCCCC"> of records</font><font color="#E5E5E5"> and</font>

91
00:04:18,738 --> 00:04:22,310
doesn't see the values of the records it

92
00:04:20,690 --> 00:04:25,040
<font color="#E5E5E5">returns so from the point of view</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

93
00:04:22,310 --> 00:04:28,010
server<font color="#E5E5E5"> when the server could see is just</font>

94
00:04:25,040 --> 00:04:31,580
<font color="#CCCCCC">that it has</font><font color="#E5E5E5"> four records it receives a</font>

95
00:04:28,010 --> 00:04:34,550
query<font color="#CCCCCC"> some crypto magic happens and</font><font color="#E5E5E5"> then</font>

96
00:04:31,580 --> 00:04:37,280
<font color="#CCCCCC">the server returns</font><font color="#E5E5E5"> learns that the</font>

97
00:04:34,550 --> 00:04:37,880
records that<font color="#E5E5E5"> matches the records that</font>

98
00:04:37,280 --> 00:04:39,679
match this

99
00:04:37,880 --> 00:04:42,820
<font color="#CCCCCC">burries</font><font color="#E5E5E5"> our records one and three</font><font color="#CCCCCC"> and</font>

100
00:04:39,680 --> 00:04:45,560
then returns these encrypted records

101
00:04:42,820 --> 00:04:47,180
what you might observe<font color="#CCCCCC"> by looking at</font>

102
00:04:45,560 --> 00:04:50,570
this example<font color="#E5E5E5"> he that actually the server</font>

103
00:04:47,180 --> 00:04:53,210
does still learn something<font color="#CCCCCC"> right namely</font>

104
00:04:50,570 --> 00:04:57,170
the server<font color="#E5E5E5"> lens that there was a range</font>

105
00:04:53,210 --> 00:05:00,859
query<font color="#E5E5E5"> and records one and three did</font>

106
00:04:57,170 --> 00:05:03,880
match that range query and in<font color="#E5E5E5"> literature</font>

107
00:05:00,860 --> 00:05:06,800
this is<font color="#E5E5E5"> called access pattern leakage</font>

108
00:05:03,880 --> 00:05:09,710
<font color="#E5E5E5">the reason he is called that way is</font>

109
00:05:06,800 --> 00:05:12,200
<font color="#CCCCCC">because while here</font><font color="#E5E5E5"> I've represented the</font>

110
00:05:09,710 --> 00:05:15,070
identity of<font color="#E5E5E5"> each record by a number for</font>

111
00:05:12,200 --> 00:05:18,140
<font color="#CCCCCC">one to four</font><font color="#E5E5E5"> you could imagine that the</font>

112
00:05:15,070 --> 00:05:22,370
identification<font color="#CCCCCC"> of a record is its memory</font>

113
00:05:18,140 --> 00:05:25,280
address<font color="#CCCCCC"> it is address in memory and in</font>

114
00:05:22,370 --> 00:05:27,830
order<font color="#CCCCCC"> to return records one and three</font>

115
00:05:25,280 --> 00:05:32,049
<font color="#CCCCCC">the server would have to access</font><font color="#E5E5E5"> the</font>

116
00:05:27,830 --> 00:05:34,580
<font color="#CCCCCC">memories that's that store these records</font>

117
00:05:32,050 --> 00:05:36,920
unless you use something like<font color="#E5E5E5"> oblivious</font>

118
00:05:34,580 --> 00:05:38,570
<font color="#CCCCCC">Ram</font><font color="#E5E5E5"> so it's in many settings and let's</font>

119
00:05:36,920 --> 00:05:40,880
use some advanced<font color="#CCCCCC"> techniques to hide</font>

120
00:05:38,570 --> 00:05:43,550
access patterns this<font color="#E5E5E5"> sort of leakage is</font>

121
00:05:40,880 --> 00:05:45,650
inherent so most schemes<font color="#E5E5E5"> actually the</font>

122
00:05:43,550 --> 00:05:49,400
vast<font color="#CCCCCC"> majority of schemes</font><font color="#E5E5E5"> we leaked that</font>

123
00:05:45,650 --> 00:05:51,560
information<font color="#E5E5E5"> and in addition many schemes</font>

124
00:05:49,400 --> 00:05:54,130
<font color="#E5E5E5">will need some really some additional</font>

125
00:05:51,560 --> 00:05:57,230
<font color="#CCCCCC">information for</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> rank leakage</font>

126
00:05:54,130 --> 00:06:00,050
which is the<font color="#CCCCCC"> information of how many</font>

127
00:05:57,230 --> 00:06:02,360
records<font color="#CCCCCC"> are below the</font><font color="#E5E5E5"> value that was</font>

128
00:06:00,050 --> 00:06:03,020
<font color="#CCCCCC">curried and how many are above the value</font>

129
00:06:02,360 --> 00:06:06,380
<font color="#CCCCCC">at risk</font>

130
00:06:03,020 --> 00:06:08,690
the<font color="#CCCCCC"> range that</font><font color="#E5E5E5"> West</font><font color="#CCCCCC"> queried</font><font color="#E5E5E5"> okay but</font>

131
00:06:06,380 --> 00:06:11,240
we're going<font color="#E5E5E5"> to focus</font><font color="#CCCCCC"> mostly in this</font>

132
00:06:08,690 --> 00:06:15,530
<font color="#E5E5E5">generic setting where on the access</font>

133
00:06:11,240 --> 00:06:16,550
pattern<font color="#E5E5E5"> is leaked to the server so most</font>

134
00:06:15,530 --> 00:06:18,260
of the schemes that<font color="#E5E5E5"> exist in the</font>

135
00:06:16,550 --> 00:06:21,680
<font color="#CCCCCC">literature are going to offer</font><font color="#E5E5E5"> security</font>

136
00:06:18,260 --> 00:06:23,210
proof they're going to prove that<font color="#CCCCCC"> what</font>

137
00:06:21,680 --> 00:06:25,730
is leaked to the server is only<font color="#E5E5E5"> a</font>

138
00:06:23,210 --> 00:06:28,099
certain formal leakage<font color="#CCCCCC"> feasible</font><font color="#E5E5E5"> access</font>

139
00:06:25,730 --> 00:06:30,740
pattern leakage but<font color="#E5E5E5"> the question is</font><font color="#CCCCCC"> okay</font>

140
00:06:28,100 --> 00:06:32,030
<font color="#E5E5E5">you have proved that but what can the</font>

141
00:06:30,740 --> 00:06:34,670
adversary actually learn from<font color="#CCCCCC"> that</font>

142
00:06:32,030 --> 00:06:36,679
leakage and so our attacks are not going

143
00:06:34,670 --> 00:06:39,350
to contradict<font color="#E5E5E5"> the proofs that exist in</font>

144
00:06:36,680 --> 00:06:40,700
the literature<font color="#CCCCCC"> in all</font><font color="#E5E5E5"> these schemes but</font>

145
00:06:39,350 --> 00:06:42,470
<font color="#CCCCCC">they're going</font><font color="#E5E5E5"> to show that from just</font>

146
00:06:40,700 --> 00:06:44,690
this leakage from just access pattern we

147
00:06:42,470 --> 00:06:47,090
can<font color="#E5E5E5"> learn a lot of information</font><font color="#CCCCCC"> so how</font>

148
00:06:44,690 --> 00:06:49,760
much information<font color="#CCCCCC"> actually Olga</font><font color="#E5E5E5"> is going</font>

149
00:06:47,090 --> 00:06:51,060
to fully<font color="#E5E5E5"> reconstruct the value of every</font>

150
00:06:49,760 --> 00:06:52,500
record in the<font color="#CCCCCC"> database</font>

151
00:06:51,060 --> 00:06:55,980
so basically it's as if there was no

152
00:06:52,500 --> 00:06:58,800
<font color="#E5E5E5">encryption at all whatsoever okay</font>

153
00:06:55,980 --> 00:07:01,620
and our main result is going<font color="#E5E5E5"> to do that</font>

154
00:06:58,800 --> 00:07:04,020
from<font color="#E5E5E5"> just access pattern leakage in fact</font>

155
00:07:01,620 --> 00:07:07,290
there is already prior art on this so at

156
00:07:04,020 --> 00:07:10,440
<font color="#CCCCCC">CCS</font><font color="#E5E5E5"> 2015 that was</font><font color="#CCCCCC"> a result</font><font color="#E5E5E5"> that showed</font>

157
00:07:07,290 --> 00:07:13,890
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> could achieve this</font><font color="#E5E5E5"> using only N</font>

158
00:07:10,440 --> 00:07:16,890
squared<font color="#E5E5E5"> log n queries well n</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font>

159
00:07:13,890 --> 00:07:20,969
<font color="#E5E5E5">number of distinct values that a record</font>

160
00:07:16,890 --> 00:07:23,520
<font color="#E5E5E5">can have and this</font><font color="#CCCCCC"> is under the</font>

161
00:07:20,970 --> 00:07:25,320
<font color="#CCCCCC">assumption that your data</font><font color="#E5E5E5"> is dense so</font>

162
00:07:23,520 --> 00:07:27,060
what does so that result I just

163
00:07:25,320 --> 00:07:29,250
mentioned is under the<font color="#E5E5E5"> assumption that</font>

164
00:07:27,060 --> 00:07:32,040
the data is dense<font color="#E5E5E5"> so what does density</font>

165
00:07:29,250 --> 00:07:35,460
mean in<font color="#E5E5E5"> that case it means that every</font>

166
00:07:32,040 --> 00:07:37,670
<font color="#E5E5E5">possible value from 1 to</font><font color="#CCCCCC"> n is</font><font color="#E5E5E5"> taken by</font>

167
00:07:35,460 --> 00:07:39,630
at least one record<font color="#CCCCCC"> in your database</font>

168
00:07:37,670 --> 00:07:41,790
this<font color="#CCCCCC"> is an assumption that</font><font color="#E5E5E5"> we are</font><font color="#CCCCCC"> going</font>

169
00:07:39,630 --> 00:07:43,590
<font color="#CCCCCC">to make for all my main results</font><font color="#E5E5E5"> in</font>

170
00:07:41,790 --> 00:07:45,780
addition we are<font color="#CCCCCC"> also going to assume</font>

171
00:07:43,590 --> 00:07:47,820
<font color="#CCCCCC">that</font><font color="#E5E5E5"> the queries that</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> client</font><font color="#CCCCCC"> makes are</font>

172
00:07:45,780 --> 00:07:51,119
uniformly distributed<font color="#CCCCCC"> but</font><font color="#E5E5E5"> I want to</font>

173
00:07:47,820 --> 00:07:53,790
<font color="#E5E5E5">insist that this second assumption is</font>

174
00:07:51,120 --> 00:07:55,620
only to<font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to compute dance or</font>

175
00:07:53,790 --> 00:07:57,390
algorithms<font color="#E5E5E5"> actually don't need the</font>

176
00:07:55,620 --> 00:07:59,720
assumption<font color="#CCCCCC"> we're going to come</font><font color="#E5E5E5"> back to</font>

177
00:07:57,390 --> 00:07:59,719
that<font color="#CCCCCC"> later</font>

178
00:07:59,750 --> 00:08:06,030
<font color="#CCCCCC">ok so only in all we we actually present</font>

179
00:08:03,030 --> 00:08:07,380
<font color="#E5E5E5">three attacks I'm going to skip the</font>

180
00:08:06,030 --> 00:08:09,599
second one completely<font color="#E5E5E5"> in this</font>

181
00:08:07,380 --> 00:08:13,110
<font color="#E5E5E5">presentation and or my result is the</font>

182
00:08:09,600 --> 00:08:15,510
first one<font color="#E5E5E5"> so it's the fact that you can</font>

183
00:08:13,110 --> 00:08:18,810
reconstruct<font color="#E5E5E5"> the value of every record in</font>

184
00:08:15,510 --> 00:08:20,340
a<font color="#E5E5E5"> database in just n log</font><font color="#CCCCCC"> n queries so</font>

185
00:08:18,810 --> 00:08:23,310
there is a square<font color="#CCCCCC"> root</font><font color="#E5E5E5"> improvements over</font>

186
00:08:20,340 --> 00:08:25,590
<font color="#E5E5E5">prior</font><font color="#CCCCCC"> odds</font><font color="#E5E5E5"> and it is in this very</font>

187
00:08:23,310 --> 00:08:28,770
generic setting on the access<font color="#E5E5E5"> pattern is</font>

188
00:08:25,590 --> 00:08:31,429
<font color="#CCCCCC">very</font><font color="#E5E5E5"> visible to</font><font color="#CCCCCC"> a server</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> I'm</font>

189
00:08:28,770 --> 00:08:33,990
<font color="#E5E5E5">going to briefly present a second attack</font>

190
00:08:31,430 --> 00:08:35,610
<font color="#CCCCCC">that takes advantage of more precise</font>

191
00:08:33,990 --> 00:08:37,740
information<font color="#E5E5E5"> that could be available to</font>

192
00:08:35,610 --> 00:08:39,690
the attacker so how do you do that<font color="#E5E5E5"> right</font>

193
00:08:37,740 --> 00:08:42,360
how<font color="#E5E5E5"> can you reconstruct the value of</font>

194
00:08:39,690 --> 00:08:44,640
every record in the database<font color="#E5E5E5"> from just</font>

195
00:08:42,360 --> 00:08:46,170
access pattern that<font color="#E5E5E5"> might look</font>

196
00:08:44,640 --> 00:08:48,630
surprising so I'm going<font color="#E5E5E5"> to try to give</font>

197
00:08:46,170 --> 00:08:50,189
an<font color="#CCCCCC"> idea</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> algorithm that</font><font color="#E5E5E5"> we use so</font>

198
00:08:48,630 --> 00:08:51,540
it's just<font color="#E5E5E5"> going to be a flavor I'm not</font>

199
00:08:50,190 --> 00:08:53,820
going to<font color="#E5E5E5"> keep all the details but just</font>

200
00:08:51,540 --> 00:08:56,069
<font color="#E5E5E5">the</font><font color="#CCCCCC"> high-level ideas of the algorithm</font><font color="#E5E5E5"> so</font>

201
00:08:53,820 --> 00:08:58,590
<font color="#CCCCCC">ok so you have a set of all records</font>

202
00:08:56,070 --> 00:09:02,820
<font color="#E5E5E5">that's represented</font><font color="#CCCCCC"> by this</font><font color="#E5E5E5"> very bar at</font>

203
00:08:58,590 --> 00:09:03,459
the top<font color="#E5E5E5"> and</font><font color="#CCCCCC"> now as the attacker</font><font color="#E5E5E5"> you see</font>

204
00:09:02,820 --> 00:09:06,519
access

205
00:09:03,459 --> 00:09:08,800
<font color="#CCCCCC">button leakage so say there is one</font><font color="#E5E5E5"> curry</font>

206
00:09:06,519 --> 00:09:11,470
<font color="#E5E5E5">for</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> the other story is going to</font><font color="#CCCCCC"> see</font>

207
00:09:08,800 --> 00:09:13,990
<font color="#E5E5E5">that curry has matched a certain subset</font>

208
00:09:11,470 --> 00:09:16,329
of<font color="#E5E5E5"> all records</font><font color="#CCCCCC"> these queries</font><font color="#E5E5E5"> represented</font>

209
00:09:13,990 --> 00:09:20,230
<font color="#CCCCCC">here by a green bar</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> matches a</font>

210
00:09:16,329 --> 00:09:21,248
<font color="#CCCCCC">certain subset of all</font><font color="#E5E5E5"> records and in the</font>

211
00:09:20,230 --> 00:09:22,929
example<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> give you were going</font>

212
00:09:21,249 --> 00:09:24,970
<font color="#E5E5E5">to assume that there are just seven</font>

213
00:09:22,929 --> 00:09:29,319
<font color="#CCCCCC">possible values in the database</font><font color="#E5E5E5"> and</font>

214
00:09:24,970 --> 00:09:31,240
equals<font color="#E5E5E5"> 7</font><font color="#CCCCCC"> so here</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> is one</font><font color="#E5E5E5"> curried</font>

215
00:09:29,319 --> 00:09:34,420
and a second<font color="#E5E5E5"> curry is issued and the</font>

216
00:09:31,240 --> 00:09:37,619
server sees that this query match is

217
00:09:34,420 --> 00:09:42,099
another subset<font color="#CCCCCC"> of records and so forth</font>

218
00:09:37,619 --> 00:09:43,600
<font color="#CCCCCC">okay and know from just these</font><font color="#E5E5E5"> five</font><font color="#CCCCCC"> Perez</font>

219
00:09:42,100 --> 00:09:45,279
we're going to reconstruct the value of

220
00:09:43,600 --> 00:09:46,389
every record in the database so<font color="#CCCCCC"> for the</font>

221
00:09:45,279 --> 00:09:48,339
<font color="#CCCCCC">Tigers anymore</font>

222
00:09:46,389 --> 00:09:52,749
the first step is<font color="#CCCCCC"> you are</font><font color="#E5E5E5"> going to</font>

223
00:09:48,339 --> 00:09:55,629
partition the set of all<font color="#E5E5E5"> records</font><font color="#CCCCCC"> that is</font>

224
00:09:52,749 --> 00:09:57,189
you're going<font color="#E5E5E5"> to take all the access</font>

225
00:09:55,629 --> 00:09:59,740
pattern leakages from all the<font color="#CCCCCC"> queries</font>

226
00:09:57,189 --> 00:10:03,179
that<font color="#E5E5E5"> you have seen so far</font><font color="#CCCCCC"> and from</font><font color="#E5E5E5"> this</font>

227
00:09:59,740 --> 00:10:06,850
you're<font color="#E5E5E5"> going to build the minimal</font>

228
00:10:03,179 --> 00:10:09,399
non-empty subsets of records that<font color="#CCCCCC"> can be</font>

229
00:10:06,850 --> 00:10:12,339
obtained<font color="#CCCCCC"> from</font><font color="#E5E5E5"> these these access pattern</font>

230
00:10:09,399 --> 00:10:15,819
leakages using basic set operations such

231
00:10:12,339 --> 00:10:18,160
<font color="#CCCCCC">as you intersections unions</font><font color="#E5E5E5"> set</font>

232
00:10:15,819 --> 00:10:20,049
subtractions<font color="#CCCCCC"> and you're</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> build</font>

233
00:10:18,160 --> 00:10:23,290
all these minimum<font color="#E5E5E5"> energy</font><font color="#CCCCCC"> subsets that</font>

234
00:10:20,049 --> 00:10:26,429
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can build from the</font><font color="#CCCCCC"> the case you</font><font color="#E5E5E5"> have</font>

235
00:10:23,290 --> 00:10:29,319
<font color="#CCCCCC">observed and the the</font><font color="#E5E5E5"> main thing here is</font>

236
00:10:26,429 --> 00:10:32,079
<font color="#E5E5E5">these minimal subsets are going to</font>

237
00:10:29,319 --> 00:10:35,049
partition the set of all records into

238
00:10:32,079 --> 00:10:37,388
subsets<font color="#CCCCCC"> so here the very bar</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> top has</font>

239
00:10:35,049 --> 00:10:40,660
<font color="#CCCCCC">been partitioned into seven subsets and</font>

240
00:10:37,389 --> 00:10:43,209
if this minimal<font color="#E5E5E5"> subsets the number of</font>

241
00:10:40,660 --> 00:10:45,429
minimal subsets is n so in this case

242
00:10:43,209 --> 00:10:48,518
<font color="#CCCCCC">seven then</font><font color="#E5E5E5"> you can immediately deduce</font>

243
00:10:45,429 --> 00:10:51,279
that each minimal subset must be the set

244
00:10:48,519 --> 00:10:55,209
of<font color="#E5E5E5"> records that</font><font color="#CCCCCC"> match</font><font color="#E5E5E5"> a single value in</font>

245
00:10:51,279 --> 00:10:57,100
the database so<font color="#CCCCCC"> we might wonder ok</font>

246
00:10:55,209 --> 00:10:59,739
<font color="#E5E5E5">that's nice but how many queries do you</font>

247
00:10:57,100 --> 00:11:03,939
need to get that to get that when you

248
00:10:59,740 --> 00:11:05,740
build<font color="#CCCCCC"> these minimal subsets then you</font>

249
00:11:03,939 --> 00:11:08,709
will have n of them<font color="#E5E5E5"> and so each</font><font color="#CCCCCC"> one of</font>

250
00:11:05,740 --> 00:11:11,290
<font color="#E5E5E5">them must correspond to a</font><font color="#CCCCCC"> single value</font>

251
00:11:08,709 --> 00:11:13,660
<font color="#CCCCCC">and the answer</font><font color="#E5E5E5"> to that is</font><font color="#CCCCCC"> that actually</font>

252
00:11:11,290 --> 00:11:15,730
<font color="#E5E5E5">when you do the analysis this reduces to</font>

253
00:11:13,660 --> 00:11:17,860
<font color="#CCCCCC">a version to a variant of</font><font color="#E5E5E5"> the coupon</font>

254
00:11:15,730 --> 00:11:21,399
<font color="#CCCCCC">directors problem and you get</font><font color="#E5E5E5"> that you</font>

255
00:11:17,860 --> 00:11:24,370
only need roughly<font color="#CCCCCC"> n log n queries before</font>

256
00:11:21,399 --> 00:11:26,230
<font color="#CCCCCC">this partition will actually yield</font><font color="#E5E5E5"> the</font>

257
00:11:24,370 --> 00:11:31,660
partition into n distinct on empty

258
00:11:26,230 --> 00:11:33,760
subsets disjoint<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> and when we</font><font color="#CCCCCC"> add</font>

259
00:11:31,660 --> 00:11:37,089
this step<font color="#E5E5E5"> you're actually not done</font>

260
00:11:33,760 --> 00:11:39,010
<font color="#CCCCCC">because you might not know the server</font>

261
00:11:37,089 --> 00:11:41,529
might not know which minimal subset

262
00:11:39,010 --> 00:11:42,760
corresponds<font color="#CCCCCC"> to</font><font color="#E5E5E5"> which value and to do</font>

263
00:11:41,529 --> 00:11:44,860
that there is<font color="#CCCCCC"> a second step in the</font>

264
00:11:42,760 --> 00:11:46,930
algorithm<font color="#E5E5E5"> that I'm going</font><font color="#CCCCCC"> to just go</font><font color="#E5E5E5"> very</font>

265
00:11:44,860 --> 00:11:50,620
quickly over<font color="#E5E5E5"> which is to sort these</font>

266
00:11:46,930 --> 00:11:54,930
minimal subsets<font color="#CCCCCC"> to do that you</font><font color="#E5E5E5"> first</font>

267
00:11:50,620 --> 00:11:57,970
find an end<font color="#E5E5E5"> point of the subsets and</font>

268
00:11:54,930 --> 00:12:02,680
<font color="#CCCCCC">when to do to find the end point you</font>

269
00:11:57,970 --> 00:12:06,699
find overlapping overlapping access

270
00:12:02,680 --> 00:12:09,880
pattern<font color="#CCCCCC"> leakages</font><font color="#E5E5E5"> whose Union covers all</font>

271
00:12:06,699 --> 00:12:11,290
subsets<font color="#E5E5E5"> but one minimal subset and then</font>

272
00:12:09,880 --> 00:12:13,630
you can deduce from there that this

273
00:12:11,290 --> 00:12:15,849
minimal subset must be an end points<font color="#E5E5E5"> and</font>

274
00:12:13,630 --> 00:12:17,490
<font color="#CCCCCC">then essentially</font><font color="#E5E5E5"> once you have found an</font>

275
00:12:15,850 --> 00:12:20,889
end point you're going<font color="#E5E5E5"> to propagate</font>

276
00:12:17,490 --> 00:12:25,420
information<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> order of minimal</font>

277
00:12:20,889 --> 00:12:29,470
subsets such that you find the<font color="#E5E5E5"> next</font>

278
00:12:25,420 --> 00:12:32,170
<font color="#E5E5E5">minimal subset</font><font color="#CCCCCC"> that is next to the</font>

279
00:12:29,470 --> 00:12:35,019
<font color="#E5E5E5">subset you already know so I'm just</font>

280
00:12:32,170 --> 00:12:37,300
<font color="#E5E5E5">going to go</font><font color="#CCCCCC"> very quickly</font><font color="#E5E5E5"> over that but</font>

281
00:12:35,019 --> 00:12:39,899
the<font color="#E5E5E5"> high-level idea is that at</font><font color="#CCCCCC"> every</font>

282
00:12:37,300 --> 00:12:43,899
step<font color="#E5E5E5"> you're going to build the minimal</font>

283
00:12:39,899 --> 00:12:48,040
subset of<font color="#E5E5E5"> records that overlaps the</font>

284
00:12:43,899 --> 00:12:51,579
numerous upset you already know<font color="#E5E5E5"> and such</font>

285
00:12:48,040 --> 00:12:53,949
that you know it is adjacent to<font color="#E5E5E5"> the</font>

286
00:12:51,579 --> 00:12:55,839
<font color="#E5E5E5">values you already know and if that</font>

287
00:12:53,949 --> 00:12:57,160
minimal subset<font color="#E5E5E5"> is actually one of the</font>

288
00:12:55,839 --> 00:12:59,500
<font color="#CCCCCC">Mueller subsets you had a just</font>

289
00:12:57,160 --> 00:13:03,209
<font color="#E5E5E5">partitioning step you can deduce it's</font>

290
00:12:59,500 --> 00:13:05,680
the next value and you propagate<font color="#E5E5E5"> this</font>

291
00:13:03,209 --> 00:13:08,680
<font color="#E5E5E5">this algorithm until you have recovered</font>

292
00:13:05,680 --> 00:13:10,510
<font color="#E5E5E5">every value so this sounds really</font>

293
00:13:08,680 --> 00:13:12,609
complex<font color="#E5E5E5"> right like this second step this</font>

294
00:13:10,510 --> 00:13:14,290
sorting step so you<font color="#E5E5E5"> might wonder</font><font color="#CCCCCC"> ok how</font>

295
00:13:12,610 --> 00:13:16,779
expensive is<font color="#CCCCCC"> that in</font><font color="#E5E5E5"> terms of data</font>

296
00:13:14,290 --> 00:13:20,800
complexity<font color="#E5E5E5"> well the big thing is it's</font>

297
00:13:16,779 --> 00:13:22,600
almost free<font color="#E5E5E5"> so actually the expensive</font>

298
00:13:20,800 --> 00:13:25,120
part is that the partitioning step

299
00:13:22,600 --> 00:13:28,540
<font color="#E5E5E5">should yield the partition into n</font>

300
00:13:25,120 --> 00:13:29,550
subsets<font color="#E5E5E5"> what that is the case</font><font color="#CCCCCC"> this</font>

301
00:13:28,540 --> 00:13:31,380
sorting

302
00:13:29,550 --> 00:13:36,120
it is<font color="#E5E5E5"> highly likely that you can</font>

303
00:13:31,380 --> 00:13:38,670
actually sort<font color="#E5E5E5"> all all minimal subset</font>

304
00:13:36,120 --> 00:13:40,860
<font color="#E5E5E5">without additional queries with very few</font>

305
00:13:38,670 --> 00:13:44,370
additional queries and more precisely

306
00:13:40,860 --> 00:13:47,579
<font color="#CCCCCC">will</font><font color="#E5E5E5"> prove</font><font color="#CCCCCC"> abound in the article that</font>

307
00:13:44,370 --> 00:13:50,670
after the expected<font color="#E5E5E5"> number of queries</font>

308
00:13:47,579 --> 00:13:54,029
<font color="#CCCCCC">after which</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can actually have the</font>

309
00:13:50,670 --> 00:13:57,420
partition<font color="#E5E5E5"> and salt everything is bounded</font>

310
00:13:54,029 --> 00:13:59,189
by n times<font color="#E5E5E5"> 3 plus log</font><font color="#CCCCCC"> n so barely</font><font color="#E5E5E5"> more</font>

311
00:13:57,420 --> 00:14:01,949
<font color="#CCCCCC">than what you</font><font color="#E5E5E5"> needed</font><font color="#CCCCCC"> just for the</font><font color="#E5E5E5"> parsha</font>

312
00:13:59,190 --> 00:14:04,350
<font color="#E5E5E5">two partitioning step</font><font color="#CCCCCC"> okay so one way to</font>

313
00:14:01,950 --> 00:14:06,240
look<font color="#CCCCCC"> at</font><font color="#E5E5E5"> this result is essentially range</font>

314
00:14:04,350 --> 00:14:09,720
queries<font color="#CCCCCC"> leak a lot</font><font color="#E5E5E5"> of information about</font>

315
00:14:06,240 --> 00:14:11,730
<font color="#E5E5E5">the</font><font color="#CCCCCC"> order of values in a database</font><font color="#E5E5E5"> such</font>

316
00:14:09,720 --> 00:14:13,680
that as soon as you<font color="#E5E5E5"> have n distinct subs</font>

317
00:14:11,730 --> 00:14:16,430
minimal subset then you can<font color="#E5E5E5"> sort them</font>

318
00:14:13,680 --> 00:14:19,800
and recover the value of every record

319
00:14:16,430 --> 00:14:22,699
<font color="#E5E5E5">moreover we</font><font color="#CCCCCC"> also proved that</font><font color="#E5E5E5"> this bound</font>

320
00:14:19,800 --> 00:14:25,019
is optimal<font color="#E5E5E5"> up to a</font><font color="#CCCCCC"> factor</font><font color="#E5E5E5"> to essentially</font>

321
00:14:22,700 --> 00:14:26,820
<font color="#E5E5E5">the efficiency of the algorithm is</font>

322
00:14:25,019 --> 00:14:29,130
<font color="#CCCCCC">actually very high</font><font color="#E5E5E5"> it it doesn't really</font>

323
00:14:26,820 --> 00:14:32,459
matter<font color="#CCCCCC"> like the really real measure</font><font color="#E5E5E5"> is</font>

324
00:14:29,130 --> 00:14:35,130
data complexity<font color="#E5E5E5"> and also our algorithm</font>

325
00:14:32,459 --> 00:14:38,130
<font color="#CCCCCC">is so</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> gray brief Lee presented here</font>

326
00:14:35,130 --> 00:14:42,510
it also data optimal and by that we mean

327
00:14:38,130 --> 00:14:44,189
<font color="#E5E5E5">that when</font><font color="#CCCCCC"> you give some query leakage of</font>

328
00:14:42,510 --> 00:14:46,439
<font color="#E5E5E5">the algorithm either it succeeds</font><font color="#CCCCCC"> or it</font>

329
00:14:44,190 --> 00:14:49,170
fails<font color="#CCCCCC"> if it</font><font color="#E5E5E5"> succeed is always correct</font>

330
00:14:46,440 --> 00:14:51,930
yep<font color="#CCCCCC"> till</font><font color="#E5E5E5"> you get is always correct if it</font>

331
00:14:49,170 --> 00:14:54,630
<font color="#E5E5E5">fails then no algorithm</font><font color="#CCCCCC"> no correct</font>

332
00:14:51,930 --> 00:14:57,540
algorithm can actually<font color="#E5E5E5"> recover the order</font>

333
00:14:54,630 --> 00:14:59,339
of<font color="#E5E5E5"> record from</font><font color="#CCCCCC"> the same input</font><font color="#E5E5E5"> so it's</font>

334
00:14:57,540 --> 00:15:02,250
it's optimal in an information

335
00:14:59,339 --> 00:15:03,720
theoretical sense so you in<font color="#E5E5E5"> this setting</font>

336
00:15:02,250 --> 00:15:06,000
you<font color="#E5E5E5"> can't do better</font><font color="#CCCCCC"> than this algorithm</font>

337
00:15:03,720 --> 00:15:08,820
and<font color="#CCCCCC"> you can bound how many queries you</font>

338
00:15:06,000 --> 00:15:11,940
need essentially within<font color="#E5E5E5"> a factor</font><font color="#CCCCCC"> to with</font>

339
00:15:08,820 --> 00:15:14,220
these two bounds<font color="#E5E5E5"> okay so this is all in</font>

340
00:15:11,940 --> 00:15:17,310
this very<font color="#CCCCCC"> generic setting where you have</font>

341
00:15:14,220 --> 00:15:21,990
<font color="#CCCCCC">only access pattern leakage in</font><font color="#E5E5E5"> concrete</font>

342
00:15:17,310 --> 00:15:29,339
<font color="#E5E5E5">schemes</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> often have more leakage</font><font color="#CCCCCC"> and</font>

343
00:15:21,990 --> 00:15:32,779
<font color="#E5E5E5">I'm going</font><font color="#CCCCCC"> to first</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> you might have</font>

344
00:15:29,339 --> 00:15:36,269
rank leakage<font color="#CCCCCC"> in which case you can do</font>

345
00:15:32,779 --> 00:15:38,250
you can<font color="#CCCCCC"> actually skip</font><font color="#E5E5E5"> the sorting</font><font color="#CCCCCC"> steps</font>

346
00:15:36,269 --> 00:15:40,290
you can still partition<font color="#E5E5E5"> your records but</font>

347
00:15:38,250 --> 00:15:42,280
you can skip the sorting step<font color="#E5E5E5"> and</font>

348
00:15:40,290 --> 00:15:44,560
instead use

349
00:15:42,280 --> 00:15:46,000
if the attacker you know an

350
00:15:44,560 --> 00:15:48,310
approximation of the distribution<font color="#E5E5E5"> of the</font>

351
00:15:46,000 --> 00:15:50,980
database you<font color="#CCCCCC"> can use that to skip the</font>

352
00:15:48,310 --> 00:15:55,750
sorting step<font color="#E5E5E5"> and deduce information</font>

353
00:15:50,980 --> 00:15:58,720
about the approximate value of records

354
00:15:55,750 --> 00:16:00,880
in<font color="#E5E5E5"> the database before</font><font color="#CCCCCC"> you have n log</font><font color="#E5E5E5"> n</font>

355
00:15:58,720 --> 00:16:03,880
queries even if you have<font color="#CCCCCC"> just a few</font>

356
00:16:00,880 --> 00:16:06,670
queries so I'm going<font color="#E5E5E5"> to skip the</font>

357
00:16:03,880 --> 00:16:09,400
<font color="#CCCCCC">explanation of that</font><font color="#E5E5E5"> but the end result</font>

358
00:16:06,670 --> 00:16:12,040
is<font color="#E5E5E5"> that we run</font><font color="#CCCCCC"> experiments on</font><font color="#E5E5E5"> the real</font>

359
00:16:09,400 --> 00:16:14,640
world<font color="#E5E5E5"> a hospital databases and looking</font>

360
00:16:12,040 --> 00:16:17,829
at the age of patients<font color="#CCCCCC"> in a hospital</font><font color="#E5E5E5"> and</font>

361
00:16:14,640 --> 00:16:21,069
<font color="#CCCCCC">even using a very bad approximation of</font>

362
00:16:17,830 --> 00:16:23,380
<font color="#E5E5E5">the distribution of the database</font><font color="#CCCCCC"> we were</font>

363
00:16:21,070 --> 00:16:28,750
able<font color="#E5E5E5"> to get these results</font><font color="#CCCCCC"> where on the x</font>

364
00:16:23,380 --> 00:16:30,400
<font color="#E5E5E5">axis</font><font color="#CCCCCC"> you have the relative</font><font color="#E5E5E5"> error of the</font>

365
00:16:28,750 --> 00:16:33,610
output of<font color="#E5E5E5"> the algorithm where for</font>

366
00:16:30,400 --> 00:16:35,740
<font color="#CCCCCC">example an error of 0.1 means a</font><font color="#E5E5E5"> 10%</font>

367
00:16:33,610 --> 00:16:38,620
mistake<font color="#E5E5E5"> in the output and on the</font>

368
00:16:35,740 --> 00:16:41,320
vertical axis you<font color="#CCCCCC"> have the number the</font>

369
00:16:38,620 --> 00:16:43,840
proportion of Records which achieve that

370
00:16:41,320 --> 00:16:47,680
given precision so for example here<font color="#CCCCCC"> you</font>

371
00:16:43,840 --> 00:16:52,900
see<font color="#E5E5E5"> that after five queries</font><font color="#CCCCCC"> then the</font>

372
00:16:47,680 --> 00:16:54,640
<font color="#E5E5E5">attack</font><font color="#CCCCCC"> succeeds in getting about</font><font color="#E5E5E5"> 50% of</font>

373
00:16:52,900 --> 00:16:57,490
records<font color="#E5E5E5"> within the precision of</font><font color="#CCCCCC"> ten</font>

374
00:16:54,640 --> 00:17:02,500
<font color="#CCCCCC">percent just five</font><font color="#E5E5E5"> queries right so this</font>

375
00:16:57,490 --> 00:17:04,720
<font color="#E5E5E5">is pretty</font><font color="#CCCCCC"> devastating</font><font color="#E5E5E5"> so in conclusion</font>

376
00:17:02,500 --> 00:17:06,880
<font color="#E5E5E5">we present it to attack so the main</font>

377
00:17:04,720 --> 00:17:10,390
<font color="#E5E5E5">attack is</font><font color="#CCCCCC"> that after</font><font color="#E5E5E5"> just n log n</font>

378
00:17:06,880 --> 00:17:12,430
queries you<font color="#E5E5E5"> can recover everything in</font>

379
00:17:10,390 --> 00:17:14,800
this very generic setting on the<font color="#E5E5E5"> access</font>

380
00:17:12,430 --> 00:17:17,500
pattern leakage and it's a data optimal

381
00:17:14,800 --> 00:17:20,740
rhythm<font color="#E5E5E5"> and completely what does that</font>

382
00:17:17,500 --> 00:17:24,339
<font color="#E5E5E5">mean if you look at</font><font color="#CCCCCC"> age</font><font color="#E5E5E5"> data in the</font>

383
00:17:20,740 --> 00:17:27,250
hospital then<font color="#CCCCCC"> n equals 125 after just</font>

384
00:17:24,339 --> 00:17:29,139
<font color="#E5E5E5">about 800 queries you can</font><font color="#CCCCCC"> recover the</font>

385
00:17:27,250 --> 00:17:34,000
values of the value of every record in

386
00:17:29,140 --> 00:17:37,120
the<font color="#E5E5E5"> database</font><font color="#CCCCCC"> okay and for comparison</font><font color="#E5E5E5"> for</font>

387
00:17:34,000 --> 00:17:39,490
<font color="#E5E5E5">compression prior work required upwards</font>

388
00:17:37,120 --> 00:17:41,439
of<font color="#E5E5E5"> a hundred thousand queries so this is</font>

389
00:17:39,490 --> 00:17:44,800
<font color="#E5E5E5">really a much more</font><font color="#CCCCCC"> device setting than</font>

390
00:17:41,440 --> 00:17:46,270
what was known prior and<font color="#E5E5E5"> furthermore in</font>

391
00:17:44,800 --> 00:17:47,710
concrete<font color="#E5E5E5"> cases where you have an</font>

392
00:17:46,270 --> 00:17:48,940
approximation of the distribution<font color="#E5E5E5"> and</font>

393
00:17:47,710 --> 00:17:52,450
<font color="#E5E5E5">you have a</font><font color="#CCCCCC"> ranked leakage so a bit more</font>

394
00:17:48,940 --> 00:17:54,460
leakage<font color="#E5E5E5"> now</font><font color="#CCCCCC"> just twenty-five queries you</font>

395
00:17:52,450 --> 00:17:54,750
can<font color="#E5E5E5"> recover a majority African within</font>

396
00:17:54,460 --> 00:17:56,400
five

397
00:17:54,750 --> 00:18:01,890
<font color="#CCCCCC">percent in the experiments we did</font><font color="#E5E5E5"> on</font>

398
00:17:56,400 --> 00:18:04,560
<font color="#E5E5E5">real-world</font><font color="#CCCCCC"> Hospital age data so I guess</font>

399
00:18:01,890 --> 00:18:06,540
the takeaway here is that<font color="#CCCCCC"> many schemes</font>

400
00:18:04,560 --> 00:18:11,280
<font color="#E5E5E5">that try to</font><font color="#CCCCCC"> achieve this welfare</font>

401
00:18:06,540 --> 00:18:14,960
<font color="#E5E5E5">functionality if some of the</font>

402
00:18:11,280 --> 00:18:17,490
<font color="#E5E5E5">second-generation schemes can achieve</font>

403
00:18:14,960 --> 00:18:20,010
meaningful amount of security against a

404
00:18:17,490 --> 00:18:24,560
snapshot adversary that<font color="#E5E5E5"> just steals the</font>

405
00:18:20,010 --> 00:18:27,030
memory of the server<font color="#E5E5E5"> at one point but</font>

406
00:18:24,560 --> 00:18:28,620
essentially all schemes that leak access

407
00:18:27,030 --> 00:18:31,230
pattern leakage<font color="#E5E5E5"> and that almost all of</font>

408
00:18:28,620 --> 00:18:32,820
them do not<font color="#E5E5E5"> offer any meaningful</font>

409
00:18:31,230 --> 00:18:34,650
security against the<font color="#E5E5E5"> persistent</font>

410
00:18:32,820 --> 00:18:37,290
adversary so if you're using<font color="#E5E5E5"> schemes</font>

411
00:18:34,650 --> 00:18:39,510
<font color="#CCCCCC">like that you have really no meaningful</font>

412
00:18:37,290 --> 00:18:43,530
guarantee against the fact that<font color="#E5E5E5"> the</font>

413
00:18:39,510 --> 00:18:45,690
server cannot learn you your<font color="#E5E5E5"> data and in</font>

414
00:18:43,530 --> 00:18:50,300
fact they can<font color="#E5E5E5"> after surprisingly few</font>

415
00:18:45,690 --> 00:18:50,300
queries<font color="#E5E5E5"> so thank you for your attention</font>

416
00:18:50,560 --> 00:18:56,040
[Applause]

417
00:18:58,160 --> 00:19:04,890
<font color="#E5E5E5">okay we have one more</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> for one</font>

418
00:19:00,450 --> 00:19:07,380
question<font color="#E5E5E5"> I was wondering</font><font color="#CCCCCC"> whether you</font>

419
00:19:04,890 --> 00:19:09,270
think<font color="#CCCCCC"> the same algorithms work if you</font>

420
00:19:07,380 --> 00:19:11,220
have sort of a distribution<font color="#E5E5E5"> over the</font>

421
00:19:09,270 --> 00:19:13,230
<font color="#E5E5E5">access pattern or if your access</font>

422
00:19:11,220 --> 00:19:18,540
patterns are noisy<font color="#E5E5E5"> and you don't have</font>

423
00:19:13,230 --> 00:19:20,700
perfect access patterns<font color="#CCCCCC"> oh I think I</font>

424
00:19:18,540 --> 00:19:28,860
suppose it depends what type of<font color="#E5E5E5"> noise</font>

425
00:19:20,700 --> 00:19:30,390
<font color="#E5E5E5">were considering my intuition is that in</font>

426
00:19:28,860 --> 00:19:31,709
general<font color="#CCCCCC"> like in a</font><font color="#E5E5E5"> very vague sense</font>

427
00:19:30,390 --> 00:19:33,180
because it depends what type of<font color="#E5E5E5"> noise</font>

428
00:19:31,710 --> 00:19:35,310
were thinking it would make the rhythm

429
00:19:33,180 --> 00:19:37,290
much more<font color="#CCCCCC"> expensive but still possible</font>

430
00:19:35,310 --> 00:19:38,550
<font color="#CCCCCC">like that type of attack which still</font>

431
00:19:37,290 --> 00:19:40,620
because<font color="#E5E5E5"> you know but it would really</font>

432
00:19:38,550 --> 00:19:46,649
<font color="#E5E5E5">depend what type of noise</font><font color="#CCCCCC"> we are talking</font>

433
00:19:40,620 --> 00:19:49,939
<font color="#CCCCCC">about thank you okay let's sense price</font>

434
00:19:46,650 --> 00:19:49,940
again thank you

