1
00:00:07,830 --> 00:00:12,550
<font color="#E5E5E5">okay thank you so much so in the</font><font color="#CCCCCC"> last</font>

2
00:00:11,020 --> 00:00:14,020
decade we've seen significant research

3
00:00:12,550 --> 00:00:16,030
interest on bringing the theory of

4
00:00:14,020 --> 00:00:18,550
probabilistic proofs<font color="#E5E5E5"> to practice in the</font>

5
00:00:16,030 --> 00:00:20,080
form of built systems<font color="#CCCCCC"> and even in the</font>

6
00:00:18,550 --> 00:00:21,880
<font color="#E5E5E5">last two or three</font><font color="#CCCCCC"> years</font><font color="#E5E5E5"> that interest</font>

7
00:00:20,080 --> 00:00:23,979
has spread<font color="#CCCCCC"> to the broader tech community</font>

8
00:00:21,880 --> 00:00:25,599
especially in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> cryptocurrency space</font>

9
00:00:23,980 --> 00:00:26,859
<font color="#E5E5E5">so I'm gonna tell you about the work</font>

10
00:00:25,599 --> 00:00:29,560
that<font color="#E5E5E5"> my co-authors and</font><font color="#CCCCCC"> I did on</font>

11
00:00:26,859 --> 00:00:30,580
designing a new kind of<font color="#E5E5E5"> ZK snark but I'm</font>

12
00:00:29,560 --> 00:00:33,280
also<font color="#E5E5E5"> going to try</font><font color="#CCCCCC"> and give you a more</font>

13
00:00:30,580 --> 00:00:35,500
general picture<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the research area to</font>

14
00:00:33,280 --> 00:00:38,560
start<font color="#E5E5E5"> let's do</font><font color="#CCCCCC"> set this jargon what what</font>

15
00:00:35,500 --> 00:00:40,239
is a ZK snark<font color="#CCCCCC"> well so it's an argument</font>

16
00:00:38,560 --> 00:00:41,980
<font color="#CCCCCC">which is to say it's a proof but it</font>

17
00:00:40,239 --> 00:00:43,839
depends<font color="#E5E5E5"> on a cryptographic assumption</font>

18
00:00:41,980 --> 00:00:45,849
<font color="#E5E5E5">and further it's an argument of</font>

19
00:00:43,840 --> 00:00:48,129
knowledge<font color="#E5E5E5"> that means essentially you can</font>

20
00:00:45,850 --> 00:00:50,739
use it to prove that you<font color="#E5E5E5"> know a</font><font color="#CCCCCC"> secret</font>

21
00:00:48,129 --> 00:00:52,089
and since<font color="#E5E5E5"> it's zero knowledge when you</font>

22
00:00:50,739 --> 00:00:54,699
prove that<font color="#E5E5E5"> you know a secret</font><font color="#CCCCCC"> you don't</font>

23
00:00:52,090 --> 00:00:55,930
<font color="#CCCCCC">reveal anything about that secret</font><font color="#E5E5E5"> now</font>

24
00:00:54,699 --> 00:00:58,149
it's also<font color="#CCCCCC"> six inked</font>

25
00:00:55,930 --> 00:00:59,649
which means that it's short and it's<font color="#CCCCCC"> non</font>

26
00:00:58,149 --> 00:01:00,730
<font color="#E5E5E5">interactive meaning that you'll be</font>

27
00:00:59,649 --> 00:01:02,500
convinced<font color="#E5E5E5"> even if you don't have</font><font color="#CCCCCC"> a</font>

28
00:01:00,730 --> 00:01:04,809
conversation<font color="#E5E5E5"> it can just be written down</font>

29
00:01:02,500 --> 00:01:06,430
<font color="#E5E5E5">and finally we're gonna restrict</font>

30
00:01:04,809 --> 00:01:08,830
<font color="#E5E5E5">ourselves to talking about publicly</font>

31
00:01:06,430 --> 00:01:11,110
<font color="#E5E5E5">verifiable proofs which means that</font>

32
00:01:08,830 --> 00:01:14,229
anyone who reads the proof can<font color="#CCCCCC"> be</font>

33
00:01:11,110 --> 00:01:16,030
convinced that it's true<font color="#CCCCCC"> so when</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> talk</font>

34
00:01:14,229 --> 00:01:17,860
<font color="#E5E5E5">compare different kinds</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> ZK snarks</font>

35
00:01:16,030 --> 00:01:21,009
there's at least<font color="#E5E5E5"> five questions that</font><font color="#CCCCCC"> we</font>

36
00:01:17,860 --> 00:01:22,900
can ask<font color="#E5E5E5"> one is how big is the proof we</font>

37
00:01:21,009 --> 00:01:24,250
said it<font color="#E5E5E5"> was small</font><font color="#CCCCCC"> but maybe some ZK</font>

38
00:01:22,900 --> 00:01:26,049
<font color="#E5E5E5">snart's have smaller proofs than others</font>

39
00:01:24,250 --> 00:01:27,670
<font color="#E5E5E5">and another question is</font><font color="#CCCCCC"> how much</font><font color="#E5E5E5"> time</font>

40
00:01:26,049 --> 00:01:29,619
does it take the prover to write down

41
00:01:27,670 --> 00:01:32,619
the proof and how much time does it take

42
00:01:29,619 --> 00:01:34,750
<font color="#E5E5E5">to verify or to check it</font><font color="#CCCCCC"> now just</font><font color="#E5E5E5"> note</font>

43
00:01:32,619 --> 00:01:36,729
this the script<font color="#CCCCCC"> P in script VR the</font>

44
00:01:34,750 --> 00:01:37,990
prover<font color="#E5E5E5"> and verifier I'm gonna use those</font>

45
00:01:36,729 --> 00:01:39,909
throughout<font color="#E5E5E5"> the talk so the prover</font>

46
00:01:37,990 --> 00:01:43,030
generates the proof the verifier<font color="#E5E5E5"> checks</font>

47
00:01:39,909 --> 00:01:45,610
it<font color="#CCCCCC"> and the other thing to note is we can</font>

48
00:01:43,030 --> 00:01:47,409
talk<font color="#E5E5E5"> about asymptotic proof size and</font>

49
00:01:45,610 --> 00:01:48,460
<font color="#E5E5E5">verify</font><font color="#CCCCCC"> our time and prove your time</font><font color="#E5E5E5"> but</font>

50
00:01:47,409 --> 00:01:50,290
since<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> interested</font><font color="#E5E5E5"> in building</font>

51
00:01:48,460 --> 00:01:52,059
systems we should also keep in<font color="#CCCCCC"> our</font><font color="#E5E5E5"> heads</font>

52
00:01:50,290 --> 00:01:55,869
that we<font color="#E5E5E5"> want to worry about the concrete</font>

53
00:01:52,060 --> 00:01:56,979
<font color="#E5E5E5">costs to also remember since this is an</font>

54
00:01:55,869 --> 00:01:59,799
<font color="#CCCCCC">argument we have to make some</font>

55
00:01:56,979 --> 00:02:01,509
<font color="#E5E5E5">cryptographic assumption and different</font>

56
00:01:59,799 --> 00:02:03,759
<font color="#CCCCCC">ZK snarks make different assumptions</font><font color="#E5E5E5"> and</font>

57
00:02:01,509 --> 00:02:05,950
maybe we<font color="#E5E5E5"> believe one and not another and</font>

58
00:02:03,759 --> 00:02:07,840
finally some ZK snarks including the

59
00:02:05,950 --> 00:02:10,780
<font color="#CCCCCC">ones that are most widely deployed</font><font color="#E5E5E5"> today</font>

60
00:02:07,840 --> 00:02:13,690
require a trusted<font color="#CCCCCC"> setup that that's some</font>

61
00:02:10,780 --> 00:02:15,790
expensive one-time computation<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you</font>

62
00:02:13,690 --> 00:02:18,410
can only<font color="#E5E5E5"> believe</font><font color="#CCCCCC"> that a proof is valid</font>

63
00:02:15,790 --> 00:02:21,650
if you trust the person<font color="#E5E5E5"> who</font><font color="#CCCCCC"> ran</font>

64
00:02:18,410 --> 00:02:23,180
at one time<font color="#E5E5E5"> computation so you can see</font>

65
00:02:21,650 --> 00:02:25,550
that there's a lot of<font color="#E5E5E5"> variables</font><font color="#CCCCCC"> here and</font>

66
00:02:23,180 --> 00:02:27,800
<font color="#E5E5E5">it sort of implies</font><font color="#CCCCCC"> a big design space</font>

67
00:02:25,550 --> 00:02:30,230
<font color="#E5E5E5">every kind of</font><font color="#CCCCCC"> zk</font><font color="#E5E5E5"> start kind of gives a</font>

68
00:02:27,800 --> 00:02:31,760
different mix of<font color="#E5E5E5"> these properties the</font>

69
00:02:30,230 --> 00:02:34,100
the<font color="#E5E5E5"> zk start</font><font color="#CCCCCC"> by co-authors and I</font>

70
00:02:31,760 --> 00:02:35,769
designed we call it higher<font color="#E5E5E5"> acts and it</font>

71
00:02:34,100 --> 00:02:38,239
represents a new<font color="#CCCCCC"> point</font><font color="#E5E5E5"> in this space</font>

72
00:02:35,770 --> 00:02:40,340
<font color="#E5E5E5">hyrax proves the satisfiability of</font>

73
00:02:38,240 --> 00:02:42,110
<font color="#E5E5E5">arithmetic circuits I'll define in</font>

74
00:02:40,340 --> 00:02:44,300
detail what I mean later<font color="#E5E5E5"> but for now</font>

75
00:02:42,110 --> 00:02:46,790
imagine that<font color="#E5E5E5"> there's some computation</font><font color="#CCCCCC"> C</font>

76
00:02:44,300 --> 00:02:49,280
and the prover convinces the verifier

77
00:02:46,790 --> 00:02:50,959
that it knows a secret<font color="#CCCCCC"> W which</font><font color="#E5E5E5"> we'll</font>

78
00:02:49,280 --> 00:02:53,660
call<font color="#CCCCCC"> the witness</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> makes that</font>

79
00:02:50,960 --> 00:02:55,550
computation output true now<font color="#E5E5E5"> for</font>

80
00:02:53,660 --> 00:02:56,930
efficiency higher<font color="#CCCCCC"> X also requires this</font>

81
00:02:55,550 --> 00:02:59,420
computation to have some kind<font color="#E5E5E5"> of</font>

82
00:02:56,930 --> 00:03:01,580
repetitive<font color="#CCCCCC"> structure</font><font color="#E5E5E5"> in the common case</font>

83
00:02:59,420 --> 00:03:04,459
<font color="#E5E5E5">it'll be made up of repeated copies of</font>

84
00:03:01,580 --> 00:03:06,680
the same<font color="#E5E5E5"> sub computation now in terms of</font>

85
00:03:04,460 --> 00:03:08,420
the<font color="#CCCCCC"> v costs that we just saw</font><font color="#E5E5E5"> higher</font><font color="#CCCCCC"> X</font>

86
00:03:06,680 --> 00:03:10,910
has proofs<font color="#E5E5E5"> that are asymptotically short</font>

87
00:03:08,420 --> 00:03:12,589
<font color="#E5E5E5">it's proved arisen tonically optimal and</font>

88
00:03:10,910 --> 00:03:16,070
the verifiers work is<font color="#E5E5E5"> asymptotically</font>

89
00:03:12,590 --> 00:03:17,900
less than just running<font color="#CCCCCC"> a computation and</font>

90
00:03:16,070 --> 00:03:20,989
remember we also care about concreteness

91
00:03:17,900 --> 00:03:23,720
<font color="#E5E5E5">so the good news</font><font color="#CCCCCC"> is as we'll see</font><font color="#E5E5E5"> later</font>

92
00:03:20,990 --> 00:03:25,520
<font color="#E5E5E5">the concrete costs are good and finally</font>

93
00:03:23,720 --> 00:03:27,080
<font color="#CCCCCC">high rx relies on a standard assumption</font>

94
00:03:25,520 --> 00:03:30,560
the discrete log assumption<font color="#E5E5E5"> and it</font>

95
00:03:27,080 --> 00:03:32,450
doesn't require any trusted<font color="#CCCCCC"> setup so we</font>

96
00:03:30,560 --> 00:03:34,400
didn't care<font color="#CCCCCC"> for comparison</font><font color="#E5E5E5"> with five</font>

97
00:03:32,450 --> 00:03:36,170
other zero knowledge proof systems<font color="#CCCCCC"> we'll</font>

98
00:03:34,400 --> 00:03:38,150
<font color="#E5E5E5">take a look at detailed results later</font>

99
00:03:36,170 --> 00:03:40,100
<font color="#E5E5E5">but the upshot</font><font color="#CCCCCC"> is that higher X gives</font>

100
00:03:38,150 --> 00:03:42,050
small proofs<font color="#E5E5E5"> in the sense that if you</font>

101
00:03:40,100 --> 00:03:44,090
<font color="#E5E5E5">wanted to make the</font><font color="#CCCCCC"> proofs smaller you'd</font>

102
00:03:42,050 --> 00:03:46,490
have to choose a different<font color="#CCCCCC"> system and</font><font color="#E5E5E5"> it</font>

103
00:03:44,090 --> 00:03:49,760
<font color="#E5E5E5">would pay for it by making the verifier</font>

104
00:03:46,490 --> 00:03:52,220
or prover slower<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it also gives fast</font>

105
00:03:49,760 --> 00:03:53,630
proofs<font color="#E5E5E5"> in the sense</font><font color="#CCCCCC"> that if</font><font color="#E5E5E5"> you wanted</font>

106
00:03:52,220 --> 00:03:55,400
<font color="#E5E5E5">to make the proofs faster you'd have to</font>

107
00:03:53,630 --> 00:03:58,120
choose a different<font color="#CCCCCC"> system</font><font color="#E5E5E5"> and that you'd</font>

108
00:03:55,400 --> 00:04:01,700
pay<font color="#CCCCCC"> for it by making the proofs bigger</font>

109
00:03:58,120 --> 00:04:03,560
now this is a big design<font color="#E5E5E5"> space and you</font>

110
00:04:01,700 --> 00:04:06,500
might say well which one's the best<font color="#CCCCCC"> well</font>

111
00:04:03,560 --> 00:04:08,330
the answer is there<font color="#CCCCCC"> isn't a best one</font>

112
00:04:06,500 --> 00:04:09,920
<font color="#E5E5E5">because it's really</font><font color="#CCCCCC"> not a competition</font>

113
00:04:08,330 --> 00:04:12,050
what we're trying to<font color="#E5E5E5"> do is figure out</font>

114
00:04:09,920 --> 00:04:14,119
for a given<font color="#CCCCCC"> application which proof</font>

115
00:04:12,050 --> 00:04:15,920
<font color="#E5E5E5">system is best and it's important to</font>

116
00:04:14,120 --> 00:04:18,019
consider<font color="#E5E5E5"> the whole space and pick the</font>

117
00:04:15,920 --> 00:04:19,789
one that's<font color="#CCCCCC"> best for</font><font color="#E5E5E5"> your application</font><font color="#CCCCCC"> so</font>

118
00:04:18,019 --> 00:04:21,409
let's kind of<font color="#E5E5E5"> try and do that a little</font>

119
00:04:19,790 --> 00:04:23,300
<font color="#E5E5E5">bit let's talk a</font><font color="#CCCCCC"> little bit about</font><font color="#E5E5E5"> this</font>

120
00:04:21,410 --> 00:04:24,919
design space of<font color="#E5E5E5"> general purpose zero</font>

121
00:04:23,300 --> 00:04:26,210
knowledge proof systems<font color="#E5E5E5"> and then later</font>

122
00:04:24,919 --> 00:04:28,070
we'll come back and look at higher

123
00:04:26,210 --> 00:04:30,440
access design and some evaluation

124
00:04:28,070 --> 00:04:31,790
results<font color="#E5E5E5"> so when we talk</font><font color="#CCCCCC"> about general</font>

125
00:04:30,440 --> 00:04:34,160
<font color="#CCCCCC">purpose proof systems</font>

126
00:04:31,790 --> 00:04:36,530
usually what we<font color="#E5E5E5"> mean our proof systems</font>

127
00:04:34,160 --> 00:04:39,170
<font color="#E5E5E5">for</font><font color="#CCCCCC"> MP languages that means there's some</font>

128
00:04:36,530 --> 00:04:41,000
relation Phi that's<font color="#E5E5E5"> just basically a</font>

129
00:04:39,170 --> 00:04:43,700
computation that<font color="#E5E5E5"> takes two</font><font color="#CCCCCC"> values and</font>

130
00:04:41,000 --> 00:04:46,970
<font color="#CCCCCC">returns true</font><font color="#E5E5E5"> or false</font><font color="#CCCCCC"> the values</font><font color="#E5E5E5"> are an</font>

131
00:04:43,700 --> 00:04:49,969
input X<font color="#E5E5E5"> from the verifier and a secret</font>

132
00:04:46,970 --> 00:04:51,860
witness<font color="#CCCCCC"> W</font><font color="#E5E5E5"> from the prover and Phi is a</font>

133
00:04:49,970 --> 00:04:53,960
computation<font color="#E5E5E5"> that's going to check</font>

134
00:04:51,860 --> 00:04:56,300
whether the witness<font color="#E5E5E5"> is somehow correct</font>

135
00:04:53,960 --> 00:04:59,390
<font color="#CCCCCC">in the in the sense that it corresponds</font>

136
00:04:56,300 --> 00:05:01,490
<font color="#E5E5E5">to the verifiers input now at a really</font>

137
00:04:59,390 --> 00:05:03,710
<font color="#CCCCCC">high level these systems all operate by</font>

138
00:05:01,490 --> 00:05:06,470
turning computations<font color="#CCCCCC"> that computation</font>

139
00:05:03,710 --> 00:05:08,419
<font color="#CCCCCC">Phi into two new computations one for</font>

140
00:05:06,470 --> 00:05:09,920
the verifier and one for the prover<font color="#E5E5E5"> and</font>

141
00:05:08,420 --> 00:05:11,390
just like in the<font color="#CCCCCC"> last talk we're</font><font color="#E5E5E5"> gonna</font>

142
00:05:09,920 --> 00:05:11,960
<font color="#E5E5E5">think about this is happening in two</font>

143
00:05:11,390 --> 00:05:13,640
stages

144
00:05:11,960 --> 00:05:16,460
<font color="#E5E5E5">which will halt the front end and the</font>

145
00:05:13,640 --> 00:05:18,770
back<font color="#CCCCCC"> end</font><font color="#E5E5E5"> now in</font><font color="#CCCCCC"> the front end we convert</font>

146
00:05:16,460 --> 00:05:21,020
the computation Phi into an<font color="#E5E5E5"> arithmetic</font>

147
00:05:18,770 --> 00:05:23,210
circuit which is<font color="#CCCCCC"> to say</font><font color="#E5E5E5"> a generalized</font>

148
00:05:21,020 --> 00:05:25,130
boolean circuit<font color="#E5E5E5"> where and becomes</font>

149
00:05:23,210 --> 00:05:26,810
<font color="#CCCCCC">multiplication and or becomes</font><font color="#E5E5E5"> addition</font>

150
00:05:25,130 --> 00:05:29,390
and the wires take values from<font color="#CCCCCC"> a finite</font>

151
00:05:26,810 --> 00:05:30,980
<font color="#CCCCCC">field</font><font color="#E5E5E5"> and now the</font><font color="#CCCCCC"> front end constructs</font>

152
00:05:29,390 --> 00:05:33,530
this<font color="#CCCCCC"> arithmetic circuit in a particular</font>

153
00:05:30,980 --> 00:05:35,660
way such that<font color="#E5E5E5"> the satisfaction</font><font color="#CCCCCC"> of the</font>

154
00:05:33,530 --> 00:05:38,619
<font color="#CCCCCC">arithmetic circuit is tantamount to</font>

155
00:05:35,660 --> 00:05:41,330
correct execution<font color="#CCCCCC"> of the computation Phi</font>

156
00:05:38,620 --> 00:05:43,490
then in the back end<font color="#E5E5E5"> we apply proving</font>

157
00:05:41,330 --> 00:05:45,020
machinery which is some combination<font color="#CCCCCC"> of</font>

158
00:05:43,490 --> 00:05:47,960
complexity theoretic and cryptographic

159
00:05:45,020 --> 00:05:49,969
objects to<font color="#CCCCCC"> produce approver and</font><font color="#E5E5E5"> verify</font>

160
00:05:47,960 --> 00:05:53,330
<font color="#E5E5E5">our computation with the following</font>

161
00:05:49,970 --> 00:05:55,310
<font color="#CCCCCC">properties a valid proof establishes</font>

162
00:05:53,330 --> 00:05:56,810
satisfaction of the<font color="#CCCCCC"> arithmetic circuit</font>

163
00:05:55,310 --> 00:05:58,670
and then because of the<font color="#CCCCCC"> way we</font>

164
00:05:56,810 --> 00:06:01,130
constructed the<font color="#CCCCCC"> arithmetic circuit that</font>

165
00:05:58,670 --> 00:06:04,100
further guarantees correct execution<font color="#CCCCCC"> of</font>

166
00:06:01,130 --> 00:06:05,690
the computation<font color="#E5E5E5"> fine so up to this point</font>

167
00:06:04,100 --> 00:06:07,130
<font color="#E5E5E5">I've talked about well there's a design</font>

168
00:06:05,690 --> 00:06:09,080
space and<font color="#E5E5E5"> there's many different zero</font>

169
00:06:07,130 --> 00:06:11,450
knowledge proof and really what I'm

170
00:06:09,080 --> 00:06:13,640
referring<font color="#E5E5E5"> to</font><font color="#CCCCCC"> it fundamentally</font><font color="#E5E5E5"> is this</font>

171
00:06:11,450 --> 00:06:16,190
machinery<font color="#E5E5E5"> this back-end</font><font color="#CCCCCC"> so let's take a</font>

172
00:06:13,640 --> 00:06:17,750
look<font color="#E5E5E5"> at some of</font><font color="#CCCCCC"> the existing backends so</font>

173
00:06:16,190 --> 00:06:19,610
maybe the<font color="#E5E5E5"> most well-known zero knowledge</font>

174
00:06:17,750 --> 00:06:22,640
proof systems<font color="#E5E5E5"> are Pinocchio and Lib</font>

175
00:06:19,610 --> 00:06:24,410
snark<font color="#E5E5E5"> these are used essentially in</font><font color="#CCCCCC"> Z</font>

176
00:06:22,640 --> 00:06:26,270
<font color="#E5E5E5">cache now these are built on linear</font>

177
00:06:24,410 --> 00:06:28,820
probabilistically checkable proofs<font color="#E5E5E5"> and</font>

178
00:06:26,270 --> 00:06:32,150
very roughly speaking they give short

179
00:06:28,820 --> 00:06:34,250
proofs<font color="#E5E5E5"> and fast verification but proving</font>

180
00:06:32,150 --> 00:06:36,049
is slow<font color="#CCCCCC"> they rely on non-standard</font>

181
00:06:34,250 --> 00:06:38,930
cryptographic assumptions and they

182
00:06:36,050 --> 00:06:40,310
require a trusted<font color="#CCCCCC"> setup now the bullet</font>

183
00:06:38,930 --> 00:06:41,660
<font color="#E5E5E5">proof system which was presented a</font>

184
00:06:40,310 --> 00:06:43,220
couple<font color="#E5E5E5"> days ago here builds on a</font>

185
00:06:41,660 --> 00:06:44,620
different you can think<font color="#CCCCCC"> about it as a</font>

186
00:06:43,220 --> 00:06:47,800
<font color="#E5E5E5">linear PCP</font>

187
00:06:44,620 --> 00:06:50,290
<font color="#E5E5E5">bulletproof</font><font color="#CCCCCC"> also gives short proofs</font><font color="#E5E5E5"> but</font>

188
00:06:47,800 --> 00:06:51,760
unlike<font color="#E5E5E5"> lib snark it relies on a standard</font>

189
00:06:50,290 --> 00:06:54,670
cryptographic assumption and doesn't

190
00:06:51,760 --> 00:06:57,039
require any trusted<font color="#E5E5E5"> setup the cost is</font>

191
00:06:54,670 --> 00:06:59,620
<font color="#E5E5E5">that both proving and verifying are</font>

192
00:06:57,040 --> 00:07:01,390
pretty slow now an entirely different

193
00:06:59,620 --> 00:07:03,100
<font color="#CCCCCC">class</font><font color="#E5E5E5"> of proving machinery comes from</font>

194
00:07:01,390 --> 00:07:05,050
multi-party computation in<font color="#E5E5E5"> the head due</font>

195
00:07:03,100 --> 00:07:06,820
to each eye at all<font color="#E5E5E5"> the first couple of</font>

196
00:07:05,050 --> 00:07:09,760
movement ations of this<font color="#E5E5E5"> whereas</font><font color="#CCCCCC"> EK boo</font>

197
00:07:06,820 --> 00:07:11,290
and<font color="#CCCCCC"> zk v + +</font><font color="#E5E5E5"> + they have fast proving</font>

198
00:07:09,760 --> 00:07:13,270
they build on a standard cryptographic

199
00:07:11,290 --> 00:07:15,640
assumption<font color="#E5E5E5"> and they have no trusted</font>

200
00:07:13,270 --> 00:07:17,620
<font color="#CCCCCC">setup but they give long proofs</font><font color="#E5E5E5"> and</font>

201
00:07:15,640 --> 00:07:21,849
verifying is at least asymptotically

202
00:07:17,620 --> 00:07:23,320
expensive<font color="#E5E5E5"> more recently lechero improves</font>

203
00:07:21,850 --> 00:07:24,940
on the<font color="#E5E5E5"> npc</font><font color="#CCCCCC"> in the head approach and it</font>

204
00:07:23,320 --> 00:07:27,180
gives asymptotically shorter proofs and

205
00:07:24,940 --> 00:07:29,140
concretely faster verification<font color="#E5E5E5"> and</font>

206
00:07:27,180 --> 00:07:31,270
finally there's a third class<font color="#E5E5E5"> of</font>

207
00:07:29,140 --> 00:07:33,159
machinery<font color="#E5E5E5"> that builds on short</font><font color="#CCCCCC"> pcps</font>

208
00:07:31,270 --> 00:07:34,450
and lib<font color="#CCCCCC"> Stark is currently the only</font>

209
00:07:33,160 --> 00:07:37,090
practical implementation of<font color="#E5E5E5"> this</font>

210
00:07:34,450 --> 00:07:39,400
approach<font color="#CCCCCC"> it gives asymptotically short</font>

211
00:07:37,090 --> 00:07:41,919
proofs<font color="#E5E5E5"> and fast verification and it</font>

212
00:07:39,400 --> 00:07:44,349
needs no trusted<font color="#CCCCCC"> set up but proving is</font>

213
00:07:41,920 --> 00:07:46,390
slow and its performance relies

214
00:07:44,350 --> 00:07:47,830
crucially on<font color="#E5E5E5"> an unproven conjecture</font>

215
00:07:46,390 --> 00:07:51,159
about<font color="#CCCCCC"> the</font><font color="#E5E5E5"> hardened episode of a certain</font>

216
00:07:47,830 --> 00:07:53,080
<font color="#E5E5E5">problem related to reed-solomon codes so</font>

217
00:07:51,160 --> 00:07:54,790
this table it's not gospel it's just a

218
00:07:53,080 --> 00:07:57,070
rough approximation<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the state of play</font>

219
00:07:54,790 --> 00:07:58,570
<font color="#E5E5E5">but the important point to</font><font color="#CCCCCC"> take away is</font>

220
00:07:57,070 --> 00:08:00,219
<font color="#CCCCCC">that all</font><font color="#E5E5E5"> these systems give slightly</font>

221
00:07:58,570 --> 00:08:02,940
different properties<font color="#CCCCCC"> and</font><font color="#E5E5E5"> none is clearly</font>

222
00:08:00,220 --> 00:08:05,500
the<font color="#E5E5E5"> best one so</font><font color="#CCCCCC"> with this sort</font><font color="#E5E5E5"> of</font>

223
00:08:02,940 --> 00:08:07,330
landscape<font color="#E5E5E5"> in mind let's take a quick</font>

224
00:08:05,500 --> 00:08:10,360
look at<font color="#CCCCCC"> hyraxes machinery and how it</font>

225
00:08:07,330 --> 00:08:11,469
fits<font color="#CCCCCC"> in so hyrax is built on interactive</font>

226
00:08:10,360 --> 00:08:13,930
proofs which are essentially

227
00:08:11,470 --> 00:08:14,980
probabilistic across examinations<font color="#E5E5E5"> we</font>

228
00:08:13,930 --> 00:08:16,720
make<font color="#E5E5E5"> these interactive proofs</font>

229
00:08:14,980 --> 00:08:19,030
<font color="#CCCCCC">zero-knowledge</font><font color="#E5E5E5"> using techniques</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> been</font>

230
00:08:16,720 --> 00:08:22,150
or at all and<font color="#CCCCCC"> Kramer</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Dam guard</font><font color="#E5E5E5"> but</font>

231
00:08:19,030 --> 00:08:23,679
as we'll see<font color="#E5E5E5"> if we just naively applied</font>

232
00:08:22,150 --> 00:08:25,750
those techniques<font color="#CCCCCC"> we'd get poor</font>

233
00:08:23,680 --> 00:08:27,610
performance<font color="#E5E5E5"> so hyrax also includes</font>

234
00:08:25,750 --> 00:08:29,140
several<font color="#CCCCCC"> refinements which result in</font>

235
00:08:27,610 --> 00:08:31,390
orders of magnitude improvement in

236
00:08:29,140 --> 00:08:33,760
verifier time and proof size and also

237
00:08:31,390 --> 00:08:36,159
concrete sort of constant factor savings

238
00:08:33,760 --> 00:08:37,960
in<font color="#E5E5E5"> proofer time the high-level</font><font color="#CCCCCC"> idea in</font>

239
00:08:36,159 --> 00:08:40,240
hyrax<font color="#CCCCCC"> is to take an interactive proof</font>

240
00:08:37,960 --> 00:08:42,460
and replace the provers messages with

241
00:08:40,240 --> 00:08:44,830
commitments to those<font color="#E5E5E5"> messages</font><font color="#CCCCCC"> then the</font>

242
00:08:42,460 --> 00:08:46,750
prover helps the verifier to check the

243
00:08:44,830 --> 00:08:48,430
<font color="#CCCCCC">messages hidden</font><font color="#E5E5E5"> inside the commitments</font>

244
00:08:46,750 --> 00:08:50,470
with the result<font color="#E5E5E5"> that the verifier</font><font color="#CCCCCC"> is</font>

245
00:08:48,430 --> 00:08:53,770
convinced<font color="#E5E5E5"> of the proof without ever</font>

246
00:08:50,470 --> 00:08:56,320
seeing the messages just as a reminder<font color="#E5E5E5"> a</font>

247
00:08:53,770 --> 00:08:57,910
<font color="#E5E5E5">cryptographic commitment</font><font color="#CCCCCC"> has a sender</font>

248
00:08:56,320 --> 00:08:59,290
who computes a commitment to

249
00:08:57,910 --> 00:09:02,140
message and sends the commitment to a

250
00:08:59,290 --> 00:09:03,880
receiver<font color="#CCCCCC"> later the sender</font><font color="#E5E5E5"> can open the</font>

251
00:09:02,140 --> 00:09:06,280
commitment and reveal the<font color="#E5E5E5"> message inside</font>

252
00:09:03,880 --> 00:09:08,439
and the receiver will be convinced<font color="#E5E5E5"> that</font>

253
00:09:06,280 --> 00:09:10,839
what the sender revealed was indeed what

254
00:09:08,440 --> 00:09:12,850
he initially<font color="#E5E5E5"> put into the commitment now</font>

255
00:09:10,840 --> 00:09:14,890
these schemes<font color="#E5E5E5"> have two properties</font><font color="#CCCCCC"> first</font>

256
00:09:12,850 --> 00:09:16,630
<font color="#E5E5E5">they hide which means the commitment</font>

257
00:09:14,890 --> 00:09:18,880
doesn't<font color="#E5E5E5"> reveal anything to the receiver</font>

258
00:09:16,630 --> 00:09:21,040
<font color="#E5E5E5">about the message and second they bind</font>

259
00:09:18,880 --> 00:09:23,710
which means the sender can't lie about

260
00:09:21,040 --> 00:09:25,780
<font color="#E5E5E5">what it put into the commitment hyrax</font>

261
00:09:23,710 --> 00:09:27,640
uses a special kind of commitment that

262
00:09:25,780 --> 00:09:29,920
<font color="#E5E5E5">has a third property</font><font color="#CCCCCC"> a linear</font>

263
00:09:27,640 --> 00:09:31,930
homomorphism<font color="#E5E5E5"> this means that there's an</font>

264
00:09:29,920 --> 00:09:34,180
operator that<font color="#CCCCCC"> takes two</font><font color="#E5E5E5"> commitments and</font>

265
00:09:31,930 --> 00:09:36,520
produces a new<font color="#E5E5E5"> commitment to their sum</font>

266
00:09:34,180 --> 00:09:38,229
to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> sum of</font><font color="#E5E5E5"> the messages inside this</font>

267
00:09:36,520 --> 00:09:40,329
also<font color="#E5E5E5"> you'll note allow scaling of</font>

268
00:09:38,230 --> 00:09:42,730
commitments<font color="#E5E5E5"> to multiply by K we just add</font>

269
00:09:40,330 --> 00:09:44,080
<font color="#E5E5E5">K copies together</font><font color="#CCCCCC"> in particular higher</font><font color="#E5E5E5"> X</font>

270
00:09:42,730 --> 00:09:46,840
builds on<font color="#CCCCCC"> Petersons commitments which</font>

271
00:09:44,080 --> 00:09:48,700
have this property so<font color="#E5E5E5"> higher X also</font>

272
00:09:46,840 --> 00:09:50,560
builds on the interactive proof line

273
00:09:48,700 --> 00:09:52,480
that started with<font color="#CCCCCC"> Goldwasser Kawai and</font>

274
00:09:50,560 --> 00:09:54,489
Roth<font color="#CCCCCC"> bloom the</font><font color="#E5E5E5"> mughals line this is an</font>

275
00:09:52,480 --> 00:09:56,140
interactive proof for layered arithmetic

276
00:09:54,490 --> 00:09:58,090
circuit evaluation<font color="#E5E5E5"> whereby layered I</font>

277
00:09:56,140 --> 00:09:59,800
mean there's a set<font color="#E5E5E5"> of inputs</font><font color="#CCCCCC"> that feed</font>

278
00:09:58,090 --> 00:10:02,440
one set of gates<font color="#E5E5E5"> whose outputs feed a</font>

279
00:09:59,800 --> 00:10:03,640
second set<font color="#CCCCCC"> etcetera and we can turn any</font>

280
00:10:02,440 --> 00:10:05,620
<font color="#E5E5E5">arithmetic circuit into a layered</font>

281
00:10:03,640 --> 00:10:08,199
arithmetic circuit<font color="#E5E5E5"> so to start the proof</font>

282
00:10:05,620 --> 00:10:10,450
<font color="#E5E5E5">the verifier gives the some inputs to</font>

283
00:10:08,200 --> 00:10:12,520
the prover and then the prover evaluates

284
00:10:10,450 --> 00:10:13,180
the arithmetic<font color="#E5E5E5"> circuit to produce some</font>

285
00:10:12,520 --> 00:10:15,460
output

286
00:10:13,180 --> 00:10:17,589
we'll call<font color="#CCCCCC"> Y</font><font color="#E5E5E5"> but it returns to the</font>

287
00:10:15,460 --> 00:10:19,720
verifier<font color="#E5E5E5"> now it's time for</font><font color="#CCCCCC"> interaction</font>

288
00:10:17,590 --> 00:10:22,150
so first the verifier constructs a

289
00:10:19,720 --> 00:10:24,760
polynomial that relates<font color="#E5E5E5"> the purported</font>

290
00:10:22,150 --> 00:10:26,949
output Y to the last layer of<font color="#E5E5E5"> gates in</font>

291
00:10:24,760 --> 00:10:28,600
the<font color="#E5E5E5"> circuit then it engages the prover</font>

292
00:10:26,950 --> 00:10:30,760
in a<font color="#CCCCCC"> song check that's a kind</font><font color="#E5E5E5"> of</font>

293
00:10:28,600 --> 00:10:33,340
interactive proof<font color="#E5E5E5"> over that polynomial</font>

294
00:10:30,760 --> 00:10:35,439
<font color="#E5E5E5">which reduces the purported outputs to a</font>

295
00:10:33,340 --> 00:10:38,170
claim about<font color="#E5E5E5"> the second last layer of</font><font color="#CCCCCC"> the</font>

296
00:10:35,440 --> 00:10:39,880
circuit<font color="#CCCCCC"> to check that claim the verifier</font>

297
00:10:38,170 --> 00:10:41,260
engages the prover in another<font color="#E5E5E5"> some check</font>

298
00:10:39,880 --> 00:10:42,820
which produces the claim about<font color="#CCCCCC"> the</font>

299
00:10:41,260 --> 00:10:44,560
second<font color="#CCCCCC"> last layer to a claim about the</font>

300
00:10:42,820 --> 00:10:46,690
third last layer and you<font color="#CCCCCC"> can see how we</font>

301
00:10:44,560 --> 00:10:49,810
iterate this until the verifier<font color="#CCCCCC"> is now</font>

302
00:10:46,690 --> 00:10:52,300
holding<font color="#E5E5E5"> a claim whose truth is just</font>

303
00:10:49,810 --> 00:10:54,099
<font color="#E5E5E5">related to</font><font color="#CCCCCC"> the inputs to the computation</font>

304
00:10:52,300 --> 00:10:56,380
now if<font color="#E5E5E5"> this weren't a zero knowledge</font>

305
00:10:54,100 --> 00:10:59,260
proof<font color="#CCCCCC"> we'd be done because the verifier</font>

306
00:10:56,380 --> 00:11:00,310
would just check<font color="#E5E5E5"> that but remember we're</font>

307
00:10:59,260 --> 00:11:03,700
trying<font color="#CCCCCC"> to build a zero knowledge proof</font>

308
00:11:00,310 --> 00:11:05,709
<font color="#E5E5E5">so we have to make two changes first the</font>

309
00:11:03,700 --> 00:11:07,540
prover as<font color="#E5E5E5"> I said earlier is</font><font color="#CCCCCC"> going to</font>

310
00:11:05,710 --> 00:11:10,510
send commitments<font color="#E5E5E5"> rather than its</font>

311
00:11:07,540 --> 00:11:11,180
messages and second we're going<font color="#E5E5E5"> to give</font>

312
00:11:10,510 --> 00:11:13,850
<font color="#E5E5E5">need to</font><font color="#CCCCCC"> give</font>

313
00:11:11,180 --> 00:11:15,109
verifier some way to check that<font color="#E5E5E5"> final</font>

314
00:11:13,850 --> 00:11:17,510
statement about the inputs to the

315
00:11:15,110 --> 00:11:19,460
<font color="#CCCCCC">arithmetic circuit because those include</font>

316
00:11:17,510 --> 00:11:22,130
<font color="#E5E5E5">the witness which the verifier should</font>

317
00:11:19,460 --> 00:11:24,770
never see<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so let's see how that</font>

318
00:11:22,130 --> 00:11:25,939
<font color="#E5E5E5">goes um the verifiers final check we're</font>

319
00:11:24,770 --> 00:11:27,680
gonna concentrate<font color="#E5E5E5"> on that it's a</font>

320
00:11:25,940 --> 00:11:29,690
essentially a polynomial evaluation

321
00:11:27,680 --> 00:11:31,699
<font color="#E5E5E5">we're gonna call that</font><font color="#CCCCCC"> polynomial M tilde</font>

322
00:11:29,690 --> 00:11:34,730
<font color="#E5E5E5">and it</font><font color="#CCCCCC"> basically</font><font color="#E5E5E5"> it encodes both the</font>

323
00:11:31,700 --> 00:11:36,830
input<font color="#E5E5E5"> X and the witness W now to run the</font>

324
00:11:34,730 --> 00:11:38,030
check<font color="#E5E5E5"> the prover in the verifier are</font>

325
00:11:36,830 --> 00:11:40,220
going to use what's called a polynomial

326
00:11:38,030 --> 00:11:42,650
commitment scheme<font color="#E5E5E5"> here's how that works</font>

327
00:11:40,220 --> 00:11:44,600
<font color="#CCCCCC">at the</font><font color="#E5E5E5"> start of the protocol the prover</font>

328
00:11:42,650 --> 00:11:46,400
is<font color="#E5E5E5"> gonna commit to</font><font color="#CCCCCC"> M tilde</font><font color="#E5E5E5"> using a</font>

329
00:11:44,600 --> 00:11:48,080
construction we'll see soon then

330
00:11:46,400 --> 00:11:50,270
approver in the<font color="#E5E5E5"> verifier run the</font>

331
00:11:48,080 --> 00:11:52,040
interactive proof we just saw and at the

332
00:11:50,270 --> 00:11:54,500
end the prover sends a claimed

333
00:11:52,040 --> 00:11:57,410
evaluation of<font color="#E5E5E5"> M tilde at the point that</font>

334
00:11:54,500 --> 00:12:00,350
the verifier chooses and finally using

335
00:11:57,410 --> 00:12:02,480
<font color="#E5E5E5">the polynomial commitment but</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> proves</font>

336
00:12:00,350 --> 00:12:04,640
to<font color="#E5E5E5"> the verifier that the evaluation is</font>

337
00:12:02,480 --> 00:12:08,660
consistent with the initial<font color="#E5E5E5"> commitment</font>

338
00:12:04,640 --> 00:12:10,040
to<font color="#E5E5E5"> M tilde so hyrax uses a new</font>

339
00:12:08,660 --> 00:12:13,370
commitment scheme for<font color="#CCCCCC"> multilinear</font>

340
00:12:10,040 --> 00:12:15,110
polynomials<font color="#E5E5E5"> like</font><font color="#CCCCCC"> M tilde and I'll show</font>

341
00:12:13,370 --> 00:12:17,060
you approximately<font color="#CCCCCC"> how</font><font color="#E5E5E5"> that works</font><font color="#CCCCCC"> so</font>

342
00:12:15,110 --> 00:12:19,070
<font color="#CCCCCC">multilinear polynomials like</font><font color="#E5E5E5"> M tilde</font>

343
00:12:17,060 --> 00:12:20,900
have a specific form<font color="#E5E5E5"> namely we can think</font>

344
00:12:19,070 --> 00:12:23,240
<font color="#E5E5E5">about them as a vector matrix vector</font>

345
00:12:20,900 --> 00:12:25,010
product where the<font color="#E5E5E5"> vectors l and r are</font>

346
00:12:23,240 --> 00:12:27,020
depending<font color="#E5E5E5"> on the point at which we</font>

347
00:12:25,010 --> 00:12:29,660
evaluate<font color="#E5E5E5"> the polynomial</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the vector</font>

348
00:12:27,020 --> 00:12:31,550
<font color="#E5E5E5">and the matrix t encodes the monomials</font>

349
00:12:29,660 --> 00:12:33,890
of<font color="#E5E5E5"> M tilde so in the case of our</font>

350
00:12:31,550 --> 00:12:36,140
protocol<font color="#E5E5E5"> the matrix t encodes the</font>

351
00:12:33,890 --> 00:12:37,490
<font color="#CCCCCC">witness' w and we can think</font><font color="#E5E5E5"> about it as</font>

352
00:12:36,140 --> 00:12:38,780
also encoding the input but for

353
00:12:37,490 --> 00:12:42,230
simplicity we'll concentrate on the

354
00:12:38,780 --> 00:12:43,850
<font color="#E5E5E5">witness so a naive approach would be to</font>

355
00:12:42,230 --> 00:12:45,650
<font color="#CCCCCC">build a polynomial commitment scheme on</font>

356
00:12:43,850 --> 00:12:47,240
individual commitments so the prover

357
00:12:45,650 --> 00:12:49,610
sends a commitment to each<font color="#E5E5E5"> element of</font>

358
00:12:47,240 --> 00:12:51,110
the<font color="#E5E5E5"> matrix T and then the verifier can</font>

359
00:12:49,610 --> 00:12:52,970
use the linear<font color="#E5E5E5"> homomorphism and the</font>

360
00:12:51,110 --> 00:12:55,040
commitment scheme to compute the<font color="#CCCCCC"> vector</font>

361
00:12:52,970 --> 00:12:56,660
matrix vector product<font color="#E5E5E5"> but this</font><font color="#CCCCCC"> is</font>

362
00:12:55,040 --> 00:12:58,910
<font color="#CCCCCC">inefficient because</font><font color="#E5E5E5"> the commitment size</font>

363
00:12:56,660 --> 00:13:00,530
and the time to evaluate<font color="#E5E5E5"> the commitment</font>

364
00:12:58,910 --> 00:13:03,199
<font color="#E5E5E5">are both linear in the size of the</font>

365
00:13:00,530 --> 00:13:04,880
witness which is<font color="#E5E5E5"> no good</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> aside step</font>

366
00:13:03,200 --> 00:13:07,310
this problem we're gonna follow an idea

367
00:13:04,880 --> 00:13:09,620
<font color="#CCCCCC">due</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> yen scrote which is to</font><font color="#E5E5E5"> use multi</font>

368
00:13:07,310 --> 00:13:11,810
commitments to each<font color="#E5E5E5"> row</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the matrix</font><font color="#CCCCCC"> so</font>

369
00:13:09,620 --> 00:13:13,610
a multi commitment encodes a vector of

370
00:13:11,810 --> 00:13:15,680
messages<font color="#E5E5E5"> rather than a single</font><font color="#CCCCCC"> message</font>

371
00:13:13,610 --> 00:13:17,000
and using the<font color="#CCCCCC"> Petersons commitment we</font>

372
00:13:15,680 --> 00:13:18,530
can build multi commitments that

373
00:13:17,000 --> 00:13:20,810
additionally have a vector<font color="#E5E5E5"> y's</font>

374
00:13:18,530 --> 00:13:22,780
homomorphism so when we add two

375
00:13:20,810 --> 00:13:27,400
commitments together what we get is a

376
00:13:22,780 --> 00:13:30,010
of the committed vectors<font color="#E5E5E5"> okay so in then</font>

377
00:13:27,400 --> 00:13:31,990
how does<font color="#E5E5E5"> it proceed first the verifier</font>

378
00:13:30,010 --> 00:13:34,600
is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to compute the vector matrix</font>

379
00:13:31,990 --> 00:13:36,760
product L times T<font color="#E5E5E5"> using the vector</font>

380
00:13:34,600 --> 00:13:38,950
<font color="#CCCCCC">writes homomorphism</font><font color="#E5E5E5"> the result is a</font>

381
00:13:36,760 --> 00:13:40,960
commitment<font color="#E5E5E5"> to a single</font><font color="#CCCCCC"> vector and then</font>

382
00:13:38,950 --> 00:13:43,200
the<font color="#E5E5E5"> prover sends a commitment to a</font>

383
00:13:40,960 --> 00:13:45,940
claimed evaluation of<font color="#E5E5E5"> M tilde and</font>

384
00:13:43,200 --> 00:13:48,190
finally the prover uses a dot product

385
00:13:45,940 --> 00:13:50,530
<font color="#E5E5E5">argument to convince the verifier that</font>

386
00:13:48,190 --> 00:13:52,930
that claimed evaluation is consistent

387
00:13:50,530 --> 00:13:55,060
with the vector<font color="#CCCCCC"> R and</font><font color="#E5E5E5"> the vector matrix</font>

388
00:13:52,930 --> 00:13:57,510
product L times T<font color="#E5E5E5"> that the better that</font>

389
00:13:55,060 --> 00:13:59,859
the verify<font color="#CCCCCC"> are previously computed</font>

390
00:13:57,510 --> 00:14:01,360
entire<font color="#E5E5E5"> X we use</font><font color="#CCCCCC"> a dot product argument</font>

391
00:13:59,860 --> 00:14:03,640
that we adapted from bullet proofs<font color="#CCCCCC"> and</font>

392
00:14:01,360 --> 00:14:05,080
it has<font color="#E5E5E5"> very small cost it's just</font>

393
00:14:03,640 --> 00:14:07,000
logarithmic in the<font color="#E5E5E5"> length of the R</font>

394
00:14:05,080 --> 00:14:09,520
vector<font color="#E5E5E5"> for communication so if the</font>

395
00:14:07,000 --> 00:14:11,980
<font color="#E5E5E5">matrix</font><font color="#CCCCCC"> T's square</font><font color="#E5E5E5"> then the prover sends</font>

396
00:14:09,520 --> 00:14:14,260
one commitment<font color="#E5E5E5"> per row and a logarithmic</font>

397
00:14:11,980 --> 00:14:15,670
<font color="#CCCCCC">commit a number</font><font color="#E5E5E5"> of commitments for per</font>

398
00:14:14,260 --> 00:14:17,800
number<font color="#CCCCCC"> of columns</font><font color="#E5E5E5"> so that's sort of</font>

399
00:14:15,670 --> 00:14:20,110
square<font color="#E5E5E5"> root ish in total and the</font>

400
00:14:17,800 --> 00:14:22,089
verifiers computation is proportional to

401
00:14:20,110 --> 00:14:23,650
<font color="#E5E5E5">the sum of the matrix dimensions so</font>

402
00:14:22,090 --> 00:14:26,770
again it's sort<font color="#CCCCCC"> of square</font><font color="#E5E5E5"> root</font><font color="#CCCCCC"> of shin</font>

403
00:14:23,650 --> 00:14:28,990
total alternatively we can<font color="#E5E5E5"> adjust the</font>

404
00:14:26,770 --> 00:14:31,900
matrix dimensions<font color="#E5E5E5"> to trade extra</font>

405
00:14:28,990 --> 00:14:34,060
verifier work for lower proof size which

406
00:14:31,900 --> 00:14:36,270
means you can tailor higher<font color="#CCCCCC"> acts to your</font>

407
00:14:34,060 --> 00:14:38,349
particular application<font color="#CCCCCC"> to some extent</font>

408
00:14:36,270 --> 00:14:40,510
<font color="#E5E5E5">okay so</font><font color="#CCCCCC"> i've described everything</font><font color="#E5E5E5"> in</font>

409
00:14:38,350 --> 00:14:42,130
terms<font color="#E5E5E5"> of an interactive proof and all of</font>

410
00:14:40,510 --> 00:14:43,689
the interactive<font color="#E5E5E5"> proofs are public coins</font>

411
00:14:42,130 --> 00:14:46,060
<font color="#CCCCCC">so we can make them non interactive</font>

412
00:14:43,690 --> 00:14:47,440
using the<font color="#E5E5E5"> fiat</font><font color="#CCCCCC"> samir heuristic</font><font color="#E5E5E5"> and we</font>

413
00:14:46,060 --> 00:14:49,719
have several other refinements<font color="#CCCCCC"> in the</font>

414
00:14:47,440 --> 00:14:51,550
paper<font color="#E5E5E5"> first we use multi commitments to</font>

415
00:14:49,720 --> 00:14:54,040
<font color="#E5E5E5">safe proof size and verify our work in</font>

416
00:14:51,550 --> 00:14:55,540
the some check invocations<font color="#E5E5E5"> second we</font>

417
00:14:54,040 --> 00:14:57,550
develop<font color="#E5E5E5"> what we call a redistribution</font>

418
00:14:55,540 --> 00:14:59,860
layer which<font color="#CCCCCC"> lets higher ex extract</font>

419
00:14:57,550 --> 00:15:02,319
parallelism from serial computations<font color="#E5E5E5"> and</font>

420
00:14:59,860 --> 00:15:04,360
finally we tweak the giraffe interactive

421
00:15:02,320 --> 00:15:08,200
proof which<font color="#CCCCCC"> is prior work to further</font>

422
00:15:04,360 --> 00:15:09,550
reduce the proof size so we've seen<font color="#E5E5E5"> a</font>

423
00:15:08,200 --> 00:15:11,680
<font color="#CCCCCC">little</font><font color="#E5E5E5"> bit about how higher X works</font>

424
00:15:09,550 --> 00:15:14,740
<font color="#CCCCCC">let's see something</font><font color="#E5E5E5"> about how it</font>

425
00:15:11,680 --> 00:15:16,689
<font color="#E5E5E5">performs</font><font color="#CCCCCC"> so our points of comparison are</font>

426
00:15:14,740 --> 00:15:18,880
five existing<font color="#E5E5E5"> zero knowledge proof</font>

427
00:15:16,690 --> 00:15:21,460
systems that<font color="#E5E5E5"> don't require</font><font color="#CCCCCC"> trusted</font><font color="#E5E5E5"> setup</font>

428
00:15:18,880 --> 00:15:23,950
<font color="#E5E5E5">these are</font><font color="#CCCCCC"> BC CGP square root bullet</font>

429
00:15:21,460 --> 00:15:27,100
proofs<font color="#CCCCCC"> z</font><font color="#E5E5E5"> kb plus</font><font color="#CCCCCC"> plus</font><font color="#E5E5E5"> li hero and lips</font>

430
00:15:23,950 --> 00:15:28,780
<font color="#E5E5E5">dark weary implemented bc c GP</font><font color="#CCCCCC"> n square</font>

431
00:15:27,100 --> 00:15:30,640
<font color="#E5E5E5">root and</font><font color="#CCCCCC"> bulletproof s-- to use the same</font>

432
00:15:28,780 --> 00:15:32,380
elliptic curve as higher<font color="#E5E5E5"> x the other</font>

433
00:15:30,640 --> 00:15:34,060
three don't<font color="#E5E5E5"> use elliptic curves so we</font>

434
00:15:32,380 --> 00:15:35,650
just used the<font color="#E5E5E5"> authors implementations</font>

435
00:15:34,060 --> 00:15:37,900
we're also going to<font color="#E5E5E5"> look at two</font>

436
00:15:35,650 --> 00:15:40,120
different<font color="#CCCCCC"> versions of</font><font color="#E5E5E5"> higher</font><font color="#CCCCCC"> rx</font><font color="#E5E5E5"> one that</font>

437
00:15:37,900 --> 00:15:42,160
<font color="#E5E5E5">uses all of</font><font color="#CCCCCC"> our refinements and</font><font color="#E5E5E5"> in that</font>

438
00:15:40,120 --> 00:15:43,870
version<font color="#E5E5E5"> we're gonna set the dimensions</font>

439
00:15:42,160 --> 00:15:45,939
of the matrix<font color="#E5E5E5"> T so that</font><font color="#CCCCCC"> the number of</font>

440
00:15:43,870 --> 00:15:47,260
<font color="#E5E5E5">columns</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the square of the number</font><font color="#CCCCCC"> of</font>

441
00:15:45,940 --> 00:15:49,390
<font color="#E5E5E5">rows so we're gonna have a little</font><font color="#CCCCCC"> more</font>

442
00:15:47,260 --> 00:15:51,310
<font color="#E5E5E5">fair firework and lower communication</font>

443
00:15:49,390 --> 00:15:52,960
<font color="#E5E5E5">and the other version of higher</font><font color="#CCCCCC"> X which</font>

444
00:15:51,310 --> 00:15:55,140
we call higher<font color="#CCCCCC"> x naive</font><font color="#E5E5E5"> doesn't include</font>

445
00:15:52,960 --> 00:15:57,220
any<font color="#CCCCCC"> of the refinements</font><font color="#E5E5E5"> from the paper</font>

446
00:15:55,140 --> 00:15:59,319
<font color="#E5E5E5">okay so we're gonna compare these</font>

447
00:15:57,220 --> 00:16:01,780
systems at about<font color="#E5E5E5"> 90 bit security using</font>

448
00:15:59,320 --> 00:16:03,970
<font color="#E5E5E5">for the systems that use elliptic curves</font>

449
00:16:01,780 --> 00:16:06,250
the m-19<font color="#CCCCCC"> 1 elliptic curve from Arana at</font>

450
00:16:03,970 --> 00:16:09,640
all<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> benchmark</font><font color="#CCCCCC"> I'm going to show</font>

451
00:16:06,250 --> 00:16:11,380
you is<font color="#E5E5E5"> sha-256</font><font color="#CCCCCC"> Merkel trees where the</font>

452
00:16:09,640 --> 00:16:13,380
prover convinces the verifier that it

453
00:16:11,380 --> 00:16:15,100
knows all<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the leaves of a hash tree</font>

454
00:16:13,380 --> 00:16:18,160
corresponding<font color="#CCCCCC"> to a route that</font><font color="#E5E5E5"> the</font>

455
00:16:15,100 --> 00:16:20,710
verifier holds<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so this graph shows</font>

456
00:16:18,160 --> 00:16:22,900
<font color="#E5E5E5">proof size versus log of the number</font><font color="#CCCCCC"> of</font>

457
00:16:20,710 --> 00:16:23,770
<font color="#E5E5E5">leaves in the hash tree the green dots</font>

458
00:16:22,900 --> 00:16:25,689
are<font color="#CCCCCC"> hyrax</font>

459
00:16:23,770 --> 00:16:27,670
which has sort<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the second best proof</font>

460
00:16:25,690 --> 00:16:29,650
size for<font color="#E5E5E5"> most of the computation range</font>

461
00:16:27,670 --> 00:16:31,660
there<font color="#E5E5E5"> and you can see that bullet proofs</font>

462
00:16:29,650 --> 00:16:34,449
the magenta triangles<font color="#E5E5E5"> gives you the very</font>

463
00:16:31,660 --> 00:16:37,930
best fruit size meanwhile<font color="#CCCCCC"> --zk blue the</font>

464
00:16:34,450 --> 00:16:39,850
red squares has quite large proofs<font color="#E5E5E5"> even</font>

465
00:16:37,930 --> 00:16:41,890
worse is<font color="#E5E5E5"> the naive</font><font color="#CCCCCC"> version of hyrax the</font>

466
00:16:39,850 --> 00:16:43,630
blue stars you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> that the</font>

467
00:16:41,890 --> 00:16:45,580
difference between<font color="#E5E5E5"> the blue stars and</font>

468
00:16:43,630 --> 00:16:49,120
the green dots<font color="#CCCCCC"> though that's</font><font color="#E5E5E5"> the result</font>

469
00:16:45,580 --> 00:16:51,370
<font color="#E5E5E5">of our appointments so how about prover</font>

470
00:16:49,120 --> 00:16:54,010
time<font color="#E5E5E5"> again let's look</font><font color="#CCCCCC"> versus log of the</font>

471
00:16:51,370 --> 00:16:56,020
tree size so remember zkb<font color="#E5E5E5"> plus plus had</font>

472
00:16:54,010 --> 00:16:58,150
the biggest proofs<font color="#CCCCCC"> but now we see it</font>

473
00:16:56,020 --> 00:17:00,550
also has by far<font color="#CCCCCC"> the fastest</font><font color="#E5E5E5"> prover</font>

474
00:16:58,150 --> 00:17:03,069
Leggero<font color="#E5E5E5"> has proved her that's the orange</font>

475
00:17:00,550 --> 00:17:04,540
diamonds<font color="#E5E5E5"> it's also quite fast and then</font>

476
00:17:03,070 --> 00:17:07,840
<font color="#E5E5E5">hyrax sort of is in the middle of the</font>

477
00:17:04,540 --> 00:17:10,180
pack<font color="#E5E5E5"> now remember bullet proofs had very</font>

478
00:17:07,839 --> 00:17:12,189
small proofs but<font color="#E5E5E5"> on the other hand</font><font color="#CCCCCC"> it</font>

479
00:17:10,180 --> 00:17:14,950
<font color="#CCCCCC">has nearly</font><font color="#E5E5E5"> the longest proof time up</font>

480
00:17:12,190 --> 00:17:16,900
there almost with lips dark<font color="#CCCCCC"> and finally</font>

481
00:17:14,950 --> 00:17:20,170
you can<font color="#E5E5E5"> see hyraxes refinements save</font>

482
00:17:16,900 --> 00:17:22,000
sort of the factor of<font color="#CCCCCC"> three finally</font>

483
00:17:20,170 --> 00:17:23,890
let's look at<font color="#E5E5E5"> verifier time here</font><font color="#CCCCCC"> Lib</font>

484
00:17:22,000 --> 00:17:26,020
<font color="#CCCCCC">Stark has the best performance</font><font color="#E5E5E5"> in</font>

485
00:17:23,890 --> 00:17:28,420
<font color="#E5E5E5">Leggero has a strong showing</font><font color="#CCCCCC"> - now for</font>

486
00:17:26,020 --> 00:17:30,970
<font color="#CCCCCC">big enough problems</font><font color="#E5E5E5"> hyrax is faster than</font>

487
00:17:28,420 --> 00:17:34,270
<font color="#CCCCCC">zkb plus</font><font color="#E5E5E5"> plus which is what we expect</font>

488
00:17:30,970 --> 00:17:36,970
because asymptotically<font color="#CCCCCC"> zkv plus plus is</font>

489
00:17:34,270 --> 00:17:38,800
more expensive<font color="#CCCCCC"> and once again we</font><font color="#E5E5E5"> can see</font>

490
00:17:36,970 --> 00:17:40,810
<font color="#E5E5E5">higher</font><font color="#CCCCCC"> x naive that's the blue stars</font>

491
00:17:38,800 --> 00:17:44,500
<font color="#E5E5E5">much much worse than the refined version</font>

492
00:17:40,810 --> 00:17:46,700
of hyrax<font color="#CCCCCC"> ok so let's wrap up I've shown</font>

493
00:17:44,500 --> 00:17:49,380
<font color="#CCCCCC">you a hyrax which is a new general</font><font color="#E5E5E5"> per</font>

494
00:17:46,700 --> 00:17:51,150
<font color="#E5E5E5">zero-knowledge snark</font><font color="#CCCCCC"> and as we saw</font>

495
00:17:49,380 --> 00:17:52,440
<font color="#E5E5E5">higher X gives us small proofs in the</font>

496
00:17:51,150 --> 00:17:53,010
<font color="#E5E5E5">sense that if you wanted them</font><font color="#CCCCCC"> to be</font>

497
00:17:52,440 --> 00:17:54,450
smaller

498
00:17:53,010 --> 00:17:56,610
you'd have to<font color="#E5E5E5"> switch to</font><font color="#CCCCCC"> a different</font>

499
00:17:54,450 --> 00:17:59,130
system with worse performance in terms

500
00:17:56,610 --> 00:18:00,629
of verifier improver time and higher

501
00:17:59,130 --> 00:18:01,950
<font color="#CCCCCC">acts is fast in the sense that if you</font>

502
00:18:00,630 --> 00:18:03,840
<font color="#E5E5E5">want them to be faster you</font><font color="#CCCCCC"> have to</font>

503
00:18:01,950 --> 00:18:05,520
switch to<font color="#E5E5E5"> a different proof system</font><font color="#CCCCCC"> with</font>

504
00:18:03,840 --> 00:18:07,980
worse performance<font color="#E5E5E5"> in terms of proof size</font>

505
00:18:05,520 --> 00:18:09,990
<font color="#E5E5E5">but again the most important takeaway</font>

506
00:18:07,980 --> 00:18:11,280
here is there's no real winner among

507
00:18:09,990 --> 00:18:13,140
<font color="#E5E5E5">these systems we're not having a</font>

508
00:18:11,280 --> 00:18:15,450
<font color="#E5E5E5">competition</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> just trying to match</font>

509
00:18:13,140 --> 00:18:17,520
the proof system<font color="#E5E5E5"> to our application</font><font color="#CCCCCC"> and</font>

510
00:18:15,450 --> 00:18:19,830
for that you should shop carefully<font color="#E5E5E5"> to</font>

511
00:18:17,520 --> 00:18:21,780
find<font color="#CCCCCC"> the one that matches</font><font color="#E5E5E5"> yours so from</font>

512
00:18:19,830 --> 00:18:23,399
<font color="#E5E5E5">that perspective we regard higher</font><font color="#CCCCCC"> axes</font><font color="#E5E5E5"> a</font>

513
00:18:21,780 --> 00:18:25,470
point in the<font color="#CCCCCC"> design</font><font color="#E5E5E5"> space that will be</font>

514
00:18:23,400 --> 00:18:27,360
<font color="#E5E5E5">useful and we hope that we</font><font color="#CCCCCC"> will continue</font>

515
00:18:25,470 --> 00:18:29,130
<font color="#CCCCCC">to be able to improve sort of all</font><font color="#E5E5E5"> of</font>

516
00:18:27,360 --> 00:18:31,919
these systems<font color="#CCCCCC"> and</font><font color="#E5E5E5"> really push this area</font>

517
00:18:29,130 --> 00:18:33,330
forward as a<font color="#E5E5E5"> node</font><font color="#CCCCCC"> an extended</font><font color="#E5E5E5"> version of</font>

518
00:18:31,920 --> 00:18:34,740
<font color="#E5E5E5">the paper in our code are available</font>

519
00:18:33,330 --> 00:18:46,460
online I hope you'll<font color="#CCCCCC"> check them out</font><font color="#E5E5E5"> and</font>

520
00:18:34,740 --> 00:18:48,540
with that I'm happy<font color="#CCCCCC"> to</font><font color="#E5E5E5"> take</font><font color="#CCCCCC"> questions hi</font>

521
00:18:46,460 --> 00:18:50,400
<font color="#CCCCCC">when you were talking about</font><font color="#E5E5E5"> the</font>

522
00:18:48,540 --> 00:18:59,670
efficiency<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> prover you had marked</font>

523
00:18:50,400 --> 00:19:01,800
things<font color="#E5E5E5"> as efficient and efficient oh</font>

524
00:18:59,670 --> 00:19:03,120
sure absolutely<font color="#CCCCCC"> yeah so</font><font color="#E5E5E5"> thank you very</font>

525
00:19:01,800 --> 00:19:05,760
<font color="#E5E5E5">much for the question so the question</font><font color="#CCCCCC"> is</font>

526
00:19:03,120 --> 00:19:08,639
when we talk<font color="#CCCCCC"> about the prover efficiency</font>

527
00:19:05,760 --> 00:19:10,260
is it efficiency in the the<font color="#E5E5E5"> theory sense</font>

528
00:19:08,640 --> 00:19:11,970
<font color="#E5E5E5">or efficiency in the concrete</font><font color="#CCCCCC"> science I</font>

529
00:19:10,260 --> 00:19:13,290
was trying to<font color="#CCCCCC"> capture more the concrete</font>

530
00:19:11,970 --> 00:19:16,920
sense of things

531
00:19:13,290 --> 00:19:18,899
so most of<font color="#E5E5E5"> those systems will have at</font>

532
00:19:16,920 --> 00:19:21,870
most<font color="#CCCCCC"> a</font><font color="#E5E5E5"> logarithmic overhead but for</font>

533
00:19:18,900 --> 00:19:25,230
<font color="#E5E5E5">example zkb plus plus had one of the</font>

534
00:19:21,870 --> 00:19:27,929
slowest provers<font color="#E5E5E5"> but sorry</font><font color="#CCCCCC"> zk b plus plus</font>

535
00:19:25,230 --> 00:19:30,300
had yeah well let's just<font color="#CCCCCC"> go back to it</font>

536
00:19:27,930 --> 00:19:31,950
um so<font color="#CCCCCC"> ZK</font><font color="#E5E5E5"> be for suppose had a very fast</font>

537
00:19:30,300 --> 00:19:37,320
<font color="#E5E5E5">proved</font><font color="#CCCCCC"> er even though asymptotically</font>

538
00:19:31,950 --> 00:19:39,060
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> it's linear in</font><font color="#CCCCCC"> the case of another</font>

539
00:19:37,320 --> 00:19:41,189
case that's asymptotically linear is

540
00:19:39,060 --> 00:19:43,679
<font color="#CCCCCC">bullet proof</font><font color="#E5E5E5"> one of the slowest provers</font>

541
00:19:41,190 --> 00:19:44,910
so we can't<font color="#E5E5E5"> just concentrate on the on</font>

542
00:19:43,680 --> 00:19:47,370
the<font color="#E5E5E5"> asymptotic sigh so what I was trying</font>

543
00:19:44,910 --> 00:19:49,530
<font color="#CCCCCC">to capture there really</font><font color="#E5E5E5"> was the concrete</font>

544
00:19:47,370 --> 00:19:50,939
costs<font color="#E5E5E5"> so when I said slower I meant</font>

545
00:19:49,530 --> 00:19:52,889
concretely it's<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> take you five</font>

546
00:19:50,940 --> 00:19:57,720
<font color="#CCCCCC">minutes to construct the proof</font><font color="#E5E5E5"> versus 30</font>

547
00:19:52,890 --> 00:20:00,210
seconds<font color="#E5E5E5"> so your prover</font><font color="#CCCCCC"> is linear</font>

548
00:19:57,720 --> 00:20:04,370
our<font color="#CCCCCC"> provers linear that's correct okay</font>

549
00:20:00,210 --> 00:20:04,370
<font color="#E5E5E5">so</font><font color="#CCCCCC"> if time for one more quick question</font>

550
00:20:04,460 --> 00:20:09,120
something<font color="#CCCCCC"> about what happens or flying</font>

551
00:20:06,690 --> 00:20:11,610
<font color="#E5E5E5">what of the part of your computer you</font>

552
00:20:09,120 --> 00:20:13,768
<font color="#E5E5E5">have to do a flying</font><font color="#CCCCCC"> ah so all</font><font color="#E5E5E5"> of these</font>

553
00:20:11,610 --> 00:20:18,719
<font color="#CCCCCC">systems</font><font color="#E5E5E5"> in principle have no offline</font>

554
00:20:13,769 --> 00:20:20,519
component<font color="#CCCCCC"> at all</font><font color="#E5E5E5"> in in practice you know</font>

555
00:20:18,720 --> 00:20:22,590
anything<font color="#CCCCCC"> that's so there's no cop</font>

556
00:20:20,519 --> 00:20:25,470
there's no trusted<font color="#CCCCCC"> setup phase</font><font color="#E5E5E5"> for</font>

557
00:20:22,590 --> 00:20:26,668
<font color="#CCCCCC">example but some of these are the ones</font>

558
00:20:25,470 --> 00:20:28,559
<font color="#CCCCCC">that are</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> Peterson commitments</font><font color="#E5E5E5"> for</font>

559
00:20:26,669 --> 00:20:30,750
example<font color="#CCCCCC"> need</font><font color="#E5E5E5"> some kind of common</font>

560
00:20:28,559 --> 00:20:33,059
reference string that can<font color="#E5E5E5"> be randomly</font>

561
00:20:30,750 --> 00:20:34,740
<font color="#E5E5E5">generated</font><font color="#CCCCCC"> so in terms of offline costs</font>

562
00:20:33,059 --> 00:20:36,750
essentially<font color="#CCCCCC"> it's just</font><font color="#E5E5E5"> pick some random</font>

563
00:20:34,740 --> 00:20:38,519
elliptic curve points and that can be

564
00:20:36,750 --> 00:20:40,409
<font color="#E5E5E5">done once and people can verify that it</font>

565
00:20:38,519 --> 00:20:42,149
was done<font color="#E5E5E5"> essentially randomly but other</font>

566
00:20:40,409 --> 00:20:46,980
than<font color="#CCCCCC"> that there are no offline costs at</font>

567
00:20:42,149 --> 00:20:50,610
<font color="#E5E5E5">all</font><font color="#CCCCCC"> sites</font><font color="#E5E5E5"> I'm sorry besides</font><font color="#CCCCCC"> the string</font>

568
00:20:46,980 --> 00:20:53,220
ah it's so if we have a multi commitment

569
00:20:50,610 --> 00:20:55,379
of length n<font color="#E5E5E5"> then we need n random</font>

570
00:20:53,220 --> 00:20:59,190
elliptic curve points or n<font color="#CCCCCC"> plus</font><font color="#E5E5E5"> one I</font>

571
00:20:55,379 --> 00:21:03,309
suppose let's think three out again

572
00:20:59,190 --> 00:21:03,309
[Applause]

