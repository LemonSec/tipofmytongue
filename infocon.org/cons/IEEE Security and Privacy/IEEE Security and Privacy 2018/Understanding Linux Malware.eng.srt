1
00:00:07,580 --> 00:00:13,870
hello everyone thanks<font color="#E5E5E5"> for coming</font>

2
00:00:11,230 --> 00:00:15,280
I'm a PhD student<font color="#CCCCCC"> here calm and today I</font>

3
00:00:13,870 --> 00:00:17,230
want to<font color="#E5E5E5"> present you</font><font color="#CCCCCC"> our work</font>

4
00:00:15,280 --> 00:00:19,360
understanding Linux malware done jointly

5
00:00:17,230 --> 00:00:21,369
with<font color="#E5E5E5"> Mariana Graziano from Cisco Systems</font>

6
00:00:19,360 --> 00:00:24,460
<font color="#CCCCCC">Yannick Fred Antonio and David about</font>

7
00:00:21,369 --> 00:00:26,230
<font color="#E5E5E5">Zarate from</font><font color="#CCCCCC"> Yuriko</font><font color="#E5E5E5"> during last</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> years</font>

8
00:00:24,460 --> 00:00:28,689
<font color="#E5E5E5">research community the industries put</font>

9
00:00:26,230 --> 00:00:30,430
the effort in fighting<font color="#CCCCCC"> windows malware</font>

10
00:00:28,689 --> 00:00:33,489
and building<font color="#E5E5E5"> effective solutions in</font>

11
00:00:30,430 --> 00:00:35,739
order<font color="#CCCCCC"> to analyze</font><font color="#E5E5E5"> them so they build tool</font>

12
00:00:33,489 --> 00:00:37,899
<font color="#CCCCCC">and they prepared the necessary skill</font>

13
00:00:35,739 --> 00:00:39,790
set in order<font color="#CCCCCC"> to study this marker for</font>

14
00:00:37,899 --> 00:00:41,920
the<font color="#E5E5E5"> Windows operating system</font><font color="#CCCCCC"> but</font>

15
00:00:39,790 --> 00:00:44,129
recently we<font color="#CCCCCC"> started seeing malware for</font>

16
00:00:41,920 --> 00:00:46,870
<font color="#E5E5E5">Linux for the Linux operating system</font><font color="#CCCCCC"> and</font>

17
00:00:44,130 --> 00:00:48,550
<font color="#E5E5E5">they are getting popular more popular</font>

18
00:00:46,870 --> 00:00:51,160
every<font color="#E5E5E5"> day there are widespread are</font>

19
00:00:48,550 --> 00:00:53,680
running in<font color="#E5E5E5"> devices we all have we have</font>

20
00:00:51,160 --> 00:00:56,230
all<font color="#E5E5E5"> around on a daily basis also because</font>

21
00:00:53,680 --> 00:00:59,650
Linux<font color="#E5E5E5"> is running on a lot of</font><font color="#CCCCCC"> different</font>

22
00:00:56,230 --> 00:01:03,910
<font color="#CCCCCC">devices</font><font color="#E5E5E5"> also smaller devices IOT devices</font>

23
00:00:59,650 --> 00:01:05,979
so we<font color="#CCCCCC"> need</font><font color="#E5E5E5"> something to analyze these</font><font color="#CCCCCC"> to</font>

24
00:01:03,910 --> 00:01:07,840
<font color="#E5E5E5">arise this</font><font color="#CCCCCC"> malware for example the</font>

25
00:01:05,979 --> 00:01:11,140
<font color="#CCCCCC">amiright botnet was used to</font><font color="#E5E5E5"> disrupt</font>

26
00:01:07,840 --> 00:01:14,219
major websites or<font color="#CCCCCC"> Erebus that was used</font>

27
00:01:11,140 --> 00:01:16,450
to<font color="#E5E5E5"> ask for huge ransoms or</font><font color="#CCCCCC"> even the CIA</font>

28
00:01:14,219 --> 00:01:18,460
<font color="#CCCCCC">probably developed the Linux malware</font>

29
00:01:16,450 --> 00:01:22,479
<font color="#E5E5E5">outlaw country to sniff the network data</font>

30
00:01:18,460 --> 00:01:25,419
<font color="#E5E5E5">but as I say Linux is running on some</font>

31
00:01:22,479 --> 00:01:27,759
tiny<font color="#E5E5E5"> devices these devices sometimes are</font>

32
00:01:25,420 --> 00:01:30,969
poorly secured even<font color="#CCCCCC"> open access to</font>

33
00:01:27,759 --> 00:01:33,880
attackers and malware routers so we

34
00:01:30,969 --> 00:01:36,100
wanted<font color="#CCCCCC"> to develop a dynamic analysis on</font>

35
00:01:33,880 --> 00:01:39,359
<font color="#CCCCCC">a leak and in an analysis environment</font>

36
00:01:36,100 --> 00:01:41,770
for<font color="#CCCCCC"> two</font><font color="#E5E5E5"> dynamic analysis</font><font color="#CCCCCC"> these files and</font>

37
00:01:39,359 --> 00:01:45,279
previous works<font color="#CCCCCC"> only</font><font color="#E5E5E5"> focused at the</font>

38
00:01:41,770 --> 00:01:47,798
network level<font color="#E5E5E5"> so after building this</font>

39
00:01:45,279 --> 00:01:50,170
environment<font color="#E5E5E5"> we wanted to consider all</font>

40
00:01:47,799 --> 00:01:53,229
the behaviors that<font color="#E5E5E5"> are proper of the</font>

41
00:01:50,170 --> 00:01:55,420
windows world<font color="#E5E5E5"> a</font><font color="#CCCCCC"> Windows malware and we</font>

42
00:01:53,229 --> 00:01:57,549
wanted<font color="#CCCCCC"> to part these these techniques to</font>

43
00:01:55,420 --> 00:02:00,490
<font color="#CCCCCC">analyze this behavior</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the Linux world</font>

44
00:01:57,549 --> 00:02:03,459
<font color="#E5E5E5">and this is challenging</font><font color="#CCCCCC"> after doing this</font>

45
00:02:00,490 --> 00:02:05,979
we<font color="#E5E5E5"> finally are probably able to</font>

46
00:02:03,459 --> 00:02:08,259
understand the characteristics<font color="#E5E5E5"> of</font><font color="#CCCCCC"> Linux</font>

47
00:02:05,979 --> 00:02:10,568
malware<font color="#E5E5E5"> their behavior also</font><font color="#CCCCCC"> in</font>

48
00:02:08,258 --> 00:02:11,980
comparison with respect to the<font color="#CCCCCC"> Windows</font>

49
00:02:10,568 --> 00:02:16,060
malware so

50
00:02:11,980 --> 00:02:18,730
Linux is running on desktops servers<font color="#E5E5E5"> but</font>

51
00:02:16,060 --> 00:02:20,920
even on routers security cameras<font color="#E5E5E5"> drones</font>

52
00:02:18,730 --> 00:02:22,988
<font color="#E5E5E5">and the biggest problem here is</font>

53
00:02:20,920 --> 00:02:24,940
diversity diversity is the key<font color="#E5E5E5"> problem</font>

54
00:02:22,989 --> 00:02:28,690
<font color="#E5E5E5">because all these devices</font>

55
00:02:24,940 --> 00:02:31,510
<font color="#CCCCCC">our deeply different and let's assume</font><font color="#E5E5E5"> we</font>

56
00:02:28,690 --> 00:02:33,550
get an F binary elf is the standard

57
00:02:31,510 --> 00:02:35,470
executable format for the Linux

58
00:02:33,550 --> 00:02:39,040
operating system<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we want to analyze</font>

59
00:02:35,470 --> 00:02:41,290
<font color="#E5E5E5">this binary</font><font color="#CCCCCC"> maybe also</font><font color="#E5E5E5"> dynamically so we</font>

60
00:02:39,040 --> 00:02:44,560
start<font color="#E5E5E5"> creating our analysis environment</font>

61
00:02:41,290 --> 00:02:46,690
<font color="#E5E5E5">may</font><font color="#CCCCCC"> be built</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> top of an</font><font color="#E5E5E5"> Intel CPU but</font>

62
00:02:44,560 --> 00:02:49,570
we are not<font color="#E5E5E5"> sure this as</font><font color="#CCCCCC"> Phi will run</font>

63
00:02:46,690 --> 00:02:51,640
because Linux is also running<font color="#E5E5E5"> on other</font>

64
00:02:49,570 --> 00:02:52,269
architectures other platforms<font color="#CCCCCC"> such as</font>

65
00:02:51,640 --> 00:02:56,649
arm

66
00:02:52,270 --> 00:03:00,070
<font color="#CCCCCC">meeps motorola</font><font color="#E5E5E5"> or spark but</font><font color="#CCCCCC"> ok so we</font>

67
00:02:56,650 --> 00:03:02,970
have this<font color="#E5E5E5"> binary we guess it's a little</font>

68
00:03:00,070 --> 00:03:06,100
smaller so<font color="#CCCCCC"> we stole a Linux distribution</font>

69
00:03:02,970 --> 00:03:08,410
but the<font color="#CCCCCC"> elf ID format</font><font color="#E5E5E5"> is a standard also</font>

70
00:03:06,100 --> 00:03:11,829
<font color="#E5E5E5">for other</font><font color="#CCCCCC"> systems such</font><font color="#E5E5E5"> as bsds and</font>

71
00:03:08,410 --> 00:03:14,460
<font color="#E5E5E5">Android devices</font><font color="#CCCCCC"> but finally we prepare</font>

72
00:03:11,830 --> 00:03:17,680
our environment we start<font color="#E5E5E5"> installing</font>

73
00:03:14,460 --> 00:03:21,370
libraries<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example such as the GE</font>

74
00:03:17,680 --> 00:03:23,470
<font color="#CCCCCC">Lipsy and if we suppose</font><font color="#E5E5E5"> that this file</font>

75
00:03:21,370 --> 00:03:25,960
<font color="#CCCCCC">is dynamically</font><font color="#E5E5E5"> linked we are sure that</font>

76
00:03:23,470 --> 00:03:29,560
<font color="#CCCCCC">if we require for some bar</font><font color="#E5E5E5"> for some</font>

77
00:03:25,960 --> 00:03:31,120
libraries at runtime<font color="#E5E5E5"> but here we are not</font>

78
00:03:29,560 --> 00:03:33,280
sure we installed the correct libraries

79
00:03:31,120 --> 00:03:35,470
<font color="#E5E5E5">because this</font><font color="#CCCCCC"> malware may use for example</font>

80
00:03:33,280 --> 00:03:37,570
the<font color="#CCCCCC"> UC</font><font color="#E5E5E5"> Lib C instead of the G Lib C in</font>

81
00:03:35,470 --> 00:03:40,060
<font color="#CCCCCC">syllabuses</font><font color="#E5E5E5"> see a tiny C library</font>

82
00:03:37,570 --> 00:03:44,350
specifically<font color="#E5E5E5"> designed for embedded</font>

83
00:03:40,060 --> 00:03:46,750
systems<font color="#CCCCCC"> and I wanted</font><font color="#E5E5E5"> to give you some a</font>

84
00:03:44,350 --> 00:03:49,600
couple of examples<font color="#CCCCCC"> about this diversity</font>

85
00:03:46,750 --> 00:03:51,700
problem<font color="#CCCCCC"> so we may expect that most</font><font color="#E5E5E5"> of</font>

86
00:03:49,600 --> 00:03:54,040
the malware<font color="#E5E5E5"> are statically linked this</font>

87
00:03:51,700 --> 00:03:57,190
is actually true because<font color="#E5E5E5"> we want</font><font color="#CCCCCC"> to have</font>

88
00:03:54,040 --> 00:03:58,989
portability<font color="#CCCCCC"> at the library level</font><font color="#E5E5E5"> but</font>

89
00:03:57,190 --> 00:04:01,989
when<font color="#CCCCCC"> your statically</font><font color="#E5E5E5"> linked an elf file</font>

90
00:03:58,989 --> 00:04:05,170
this file will automatically embed some

91
00:04:01,989 --> 00:04:07,989
rappers usually contained in the<font color="#E5E5E5"> C</font>

92
00:04:05,170 --> 00:04:11,100
<font color="#CCCCCC">library to call to use the system calls</font>

93
00:04:07,989 --> 00:04:14,590
<font color="#E5E5E5">and it will interface with some with</font>

94
00:04:11,100 --> 00:04:16,540
specific system called table but we are

95
00:04:14,590 --> 00:04:19,988
not<font color="#E5E5E5"> sure that our system is</font><font color="#CCCCCC"> using the</font>

96
00:04:16,540 --> 00:04:22,390
same way to call system calls or<font color="#E5E5E5"> it's</font>

97
00:04:19,988 --> 00:04:25,599
using the same<font color="#CCCCCC"> cisco system calls table</font>

98
00:04:22,390 --> 00:04:27,669
<font color="#E5E5E5">so we have portability at the library</font>

99
00:04:25,600 --> 00:04:29,610
level<font color="#E5E5E5"> but probably our system is not</font>

100
00:04:27,669 --> 00:04:33,400
<font color="#E5E5E5">compatible it cannot run this malware</font>

101
00:04:29,610 --> 00:04:35,350
<font color="#E5E5E5">also some of the samples we go have a</font>

102
00:04:33,400 --> 00:04:37,780
mismatch<font color="#E5E5E5"> between the</font><font color="#CCCCCC"> virtual address and</font>

103
00:04:35,350 --> 00:04:38,860
the physical address<font color="#E5E5E5"> and we know that</font>

104
00:04:37,780 --> 00:04:40,299
nowadays<font color="#E5E5E5"> Linux</font>

105
00:04:38,860 --> 00:04:43,150
<font color="#CCCCCC">Colonel is using the beautiful address</font>

106
00:04:40,300 --> 00:04:46,270
to run executables<font color="#E5E5E5"> to map these binaries</font>

107
00:04:43,150 --> 00:04:48,429
<font color="#E5E5E5">instead this malware is using the</font>

108
00:04:46,270 --> 00:04:50,080
physical<font color="#E5E5E5"> address</font><font color="#CCCCCC"> it wants</font><font color="#E5E5E5"> to it wants to</font>

109
00:04:48,430 --> 00:04:52,629
<font color="#E5E5E5">use the</font><font color="#CCCCCC"> physical address to map some</font>

110
00:04:50,080 --> 00:04:54,849
data in the<font color="#CCCCCC"> process memory space and</font>

111
00:04:52,629 --> 00:04:57,129
here in<font color="#E5E5E5"> order</font><font color="#CCCCCC"> to run this malware we</font>

112
00:04:54,849 --> 00:04:58,659
must know from<font color="#E5E5E5"> which device</font><font color="#CCCCCC"> this malware</font>

113
00:04:57,129 --> 00:05:00,849
<font color="#E5E5E5">is coming from because we have to</font>

114
00:04:58,659 --> 00:05:03,129
recreate<font color="#E5E5E5"> the right environment to in</font>

115
00:05:00,849 --> 00:05:06,009
order<font color="#CCCCCC"> to run it</font><font color="#E5E5E5"> so we needed a</font><font color="#CCCCCC"> solution</font>

116
00:05:03,129 --> 00:05:07,990
to solve all these to address<font color="#E5E5E5"> all these</font>

117
00:05:06,009 --> 00:05:10,389
<font color="#E5E5E5">challenges and try to solve all these</font>

118
00:05:07,990 --> 00:05:11,949
problems<font color="#CCCCCC"> and we</font><font color="#E5E5E5"> developed an analysis</font>

119
00:05:10,389 --> 00:05:14,800
infrastructure<font color="#E5E5E5"> we created this</font>

120
00:05:11,949 --> 00:05:16,960
infrastructure<font color="#E5E5E5"> you can see and this was</font>

121
00:05:14,800 --> 00:05:20,349
quite difficult<font color="#CCCCCC"> this is the result of</font>

122
00:05:16,960 --> 00:05:22,270
endless iterations<font color="#CCCCCC"> because initially</font><font color="#E5E5E5"> we</font>

123
00:05:20,349 --> 00:05:24,310
thought<font color="#E5E5E5"> of</font><font color="#CCCCCC"> creating this infrastructure</font>

124
00:05:22,270 --> 00:05:27,789
<font color="#CCCCCC">this pipeline</font><font color="#E5E5E5"> to answer some</font><font color="#CCCCCC"> questions</font>

125
00:05:24,310 --> 00:05:30,610
<font color="#E5E5E5">but at the end the answers the pipeline</font>

126
00:05:27,789 --> 00:05:32,889
was giving<font color="#CCCCCC"> to us they</font><font color="#E5E5E5"> have been used to</font>

127
00:05:30,610 --> 00:05:35,620
readapt again this pipeline<font color="#CCCCCC"> to evolve it</font>

128
00:05:32,889 --> 00:05:39,699
in order<font color="#E5E5E5"> to analyze most of the malware</font>

129
00:05:35,620 --> 00:05:43,240
<font color="#E5E5E5">we have and through this pipeline</font><font color="#CCCCCC"> what</font>

130
00:05:39,699 --> 00:05:45,039
we do is to<font color="#E5E5E5"> analyze these</font><font color="#CCCCCC"> elf files</font><font color="#E5E5E5"> to</font>

131
00:05:43,240 --> 00:05:47,589
extract<font color="#E5E5E5"> minimal meaningful information</font>

132
00:05:45,039 --> 00:05:50,740
<font color="#CCCCCC">out of it we also run some static</font>

133
00:05:47,589 --> 00:05:52,900
analysis<font color="#E5E5E5"> jobs and then we</font><font color="#CCCCCC"> finally</font><font color="#E5E5E5"> run</font>

134
00:05:50,740 --> 00:05:56,469
this malware dynamically is Linux

135
00:05:52,900 --> 00:06:00,039
malware so we collected data for one

136
00:05:56,469 --> 00:06:02,379
year we<font color="#CCCCCC"> are getting</font><font color="#E5E5E5"> 200</font><font color="#CCCCCC"> cantidad</font><font color="#E5E5E5"> samples</font>

137
00:06:00,039 --> 00:06:04,930
<font color="#E5E5E5">each day we were trying to filter out</font>

138
00:06:02,379 --> 00:06:07,180
from this set<font color="#E5E5E5"> of samples</font><font color="#CCCCCC"> all the</font>

139
00:06:04,930 --> 00:06:09,550
binaries<font color="#E5E5E5"> for which we were sure</font><font color="#CCCCCC"> it were</font>

140
00:06:07,180 --> 00:06:12,969
built for<font color="#E5E5E5"> Android or</font><font color="#CCCCCC"> other systems</font><font color="#E5E5E5"> such</font>

141
00:06:09,550 --> 00:06:16,779
as BSD<font color="#E5E5E5"> and finally our data set consists</font>

142
00:06:12,969 --> 00:06:18,669
of more<font color="#E5E5E5"> than 10,000 samples then we</font>

143
00:06:16,779 --> 00:06:22,539
<font color="#CCCCCC">analyze it we</font><font color="#E5E5E5"> inspected the</font><font color="#CCCCCC"> elf header</font>

144
00:06:18,669 --> 00:06:25,240
to start answering<font color="#E5E5E5"> some questions for</font>

145
00:06:22,539 --> 00:06:27,279
example<font color="#E5E5E5"> about the diversity problem we</font>

146
00:06:25,240 --> 00:06:29,110
<font color="#E5E5E5">wanted to check if all these samples we</font>

147
00:06:27,279 --> 00:06:30,819
have<font color="#CCCCCC"> in our data set they are</font><font color="#E5E5E5"> really</font>

148
00:06:29,110 --> 00:06:32,770
built to<font color="#CCCCCC"> run on a lot of</font><font color="#E5E5E5"> different</font>

149
00:06:30,819 --> 00:06:36,789
architectures and in fact the

150
00:06:32,770 --> 00:06:38,469
distribution<font color="#CCCCCC"> is</font><font color="#E5E5E5"> quite high</font><font color="#CCCCCC"> but we saw</font>

151
00:06:36,789 --> 00:06:39,729
<font color="#E5E5E5">that</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> one third of the data set is</font>

152
00:06:38,469 --> 00:06:41,830
built to<font color="#E5E5E5"> run on top of inter</font>

153
00:06:39,729 --> 00:06:43,870
architectures that<font color="#CCCCCC"> are the processor we</font>

154
00:06:41,830 --> 00:06:45,609
usually see on the<font color="#CCCCCC"> extra poor servers</font>

155
00:06:43,870 --> 00:06:48,940
the<font color="#E5E5E5"> Moscow is the most common one</font>

156
00:06:45,610 --> 00:06:50,830
instead<font color="#CCCCCC"> after the data set is built to</font>

157
00:06:48,940 --> 00:06:51,639
run on processors that<font color="#CCCCCC"> are typically</font>

158
00:06:50,830 --> 00:06:54,219
used<font color="#CCCCCC"> on</font>

159
00:06:51,639 --> 00:06:56,770
embedded devices such as<font color="#CCCCCC"> meap's motorola</font>

160
00:06:54,219 --> 00:06:59,349
<font color="#E5E5E5">on spark and this is an adversarial</font>

161
00:06:56,770 --> 00:07:01,419
setting<font color="#E5E5E5"> then if we consider</font><font color="#CCCCCC"> that the</font>

162
00:06:59,349 --> 00:07:03,789
same as feather<font color="#E5E5E5"> can be used to trick</font>

163
00:07:01,419 --> 00:07:06,520
analysis tools<font color="#E5E5E5"> the situation may get</font>

164
00:07:03,789 --> 00:07:09,128
<font color="#CCCCCC">even worse in fact we saw</font><font color="#E5E5E5"> that there are</font>

165
00:07:06,520 --> 00:07:11,529
samples<font color="#E5E5E5"> completely deleting the sections</font>

166
00:07:09,129 --> 00:07:13,330
table from the elf<font color="#E5E5E5"> header giving out</font>

167
00:07:11,529 --> 00:07:15,699
what we call an anomalous elf<font color="#E5E5E5"> because</font>

168
00:07:13,330 --> 00:07:18,669
<font color="#E5E5E5">it's completely valid by specification</font>

169
00:07:15,699 --> 00:07:20,680
but it's still uncommon<font color="#CCCCCC"> since most of</font>

170
00:07:18,669 --> 00:07:22,599
the compiler<font color="#E5E5E5"> the standard compilers we</font>

171
00:07:20,680 --> 00:07:26,409
use they always produce<font color="#E5E5E5"> sections table</font>

172
00:07:22,599 --> 00:07:28,960
<font color="#CCCCCC">also we</font><font color="#E5E5E5"> define a set of F that we call</font>

173
00:07:26,409 --> 00:07:31,539
invalid<font color="#E5E5E5"> F because they are not valid by</font>

174
00:07:28,960 --> 00:07:33,669
their<font color="#E5E5E5"> specification but still the Linux</font>

175
00:07:31,539 --> 00:07:36,490
kernel<font color="#E5E5E5"> is able to execute these binaries</font>

176
00:07:33,669 --> 00:07:39,039
and for example<font color="#CCCCCC"> we found</font><font color="#E5E5E5"> that there are</font>

177
00:07:36,490 --> 00:07:40,810
malware pointing<font color="#E5E5E5"> the</font><font color="#CCCCCC"> segment step</font>

178
00:07:39,039 --> 00:07:43,270
entries of the<font color="#E5E5E5"> segment stable beyond the</font>

179
00:07:40,810 --> 00:07:45,490
file or<font color="#E5E5E5"> section stable beyond the file</font>

180
00:07:43,270 --> 00:07:47,740
or<font color="#E5E5E5"> even trying to overlap one entry</font><font color="#CCCCCC"> in</font>

181
00:07:45,490 --> 00:07:50,409
<font color="#E5E5E5">the</font><font color="#CCCCCC"> segment stable with</font><font color="#E5E5E5"> the F there and</font>

182
00:07:47,740 --> 00:07:52,990
these<font color="#E5E5E5"> two</font><font color="#CCCCCC"> categories of</font><font color="#E5E5E5"> binaries are</font>

183
00:07:50,409 --> 00:07:56,438
causing<font color="#E5E5E5"> errors and</font><font color="#CCCCCC"> problems on common</font>

184
00:07:52,990 --> 00:07:58,900
analysis tools for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> gdb that is</font>

185
00:07:56,439 --> 00:08:01,800
the<font color="#E5E5E5"> de</font><font color="#CCCCCC"> facto debugger</font><font color="#E5E5E5"> for the Linux</font>

186
00:07:58,900 --> 00:08:04,568
operating system<font color="#CCCCCC"> can be can be</font>

187
00:08:01,800 --> 00:08:06,819
<font color="#E5E5E5">completely blocked</font><font color="#CCCCCC"> if we just now some</font>

188
00:08:04,569 --> 00:08:11,199
bytes in specific fields<font color="#CCCCCC"> of the elf</font>

189
00:08:06,819 --> 00:08:13,300
header then we run a<font color="#CCCCCC"> B class that is a</font>

190
00:08:11,199 --> 00:08:16,509
tool to extract<font color="#E5E5E5"> the most likely family</font>

191
00:08:13,300 --> 00:08:19,089
name from the from a set of<font color="#CCCCCC"> AV labels</font>

192
00:08:16,509 --> 00:08:21,159
and we did this<font color="#E5E5E5"> to understand what are</font>

193
00:08:19,089 --> 00:08:23,469
the<font color="#E5E5E5"> classes of malware that</font><font color="#CCCCCC"> we have</font>

194
00:08:21,159 --> 00:08:25,719
today<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the Linux operating system</font><font color="#CCCCCC"> if</font>

195
00:08:23,469 --> 00:08:27,370
they are broad and a lot and all

196
00:08:25,719 --> 00:08:29,529
different<font color="#CCCCCC"> we are aspect to the</font><font color="#E5E5E5"> Windows</font>

197
00:08:27,370 --> 00:08:31,990
malware<font color="#E5E5E5"> and in fact we saw that we don't</font>

198
00:08:29,529 --> 00:08:35,309
have only botnets<font color="#E5E5E5"> we also have ran some</font>

199
00:08:31,990 --> 00:08:37,839
worse<font color="#CCCCCC"> we have also</font><font color="#E5E5E5"> banking Trojan then</font>

200
00:08:35,309 --> 00:08:39,939
we<font color="#E5E5E5"> want it to measure for</font><font color="#CCCCCC"> example the</font>

201
00:08:37,839 --> 00:08:42,339
<font color="#E5E5E5">entropy of this</font><font color="#CCCCCC"> malware</font><font color="#E5E5E5"> we try to</font>

202
00:08:39,940 --> 00:08:44,800
collect matrix or the on the assembly

203
00:08:42,339 --> 00:08:46,930
code<font color="#E5E5E5"> we also wanted to check if this</font>

204
00:08:44,800 --> 00:08:50,229
malware<font color="#E5E5E5"> are using obfuscation</font><font color="#CCCCCC"> at code</font>

205
00:08:46,930 --> 00:08:52,120
level<font color="#CCCCCC"> or if they are using nasty tricks</font>

206
00:08:50,230 --> 00:08:54,220
<font color="#E5E5E5">to slow down the analysis process or</font>

207
00:08:52,120 --> 00:08:55,990
reverse engineering efforts and we

208
00:08:54,220 --> 00:08:57,820
wanted also to check if they're using

209
00:08:55,990 --> 00:09:00,459
<font color="#CCCCCC">parker's because of</font><font color="#E5E5E5"> Windows we have a</font>

210
00:08:57,820 --> 00:09:03,399
lot of<font color="#E5E5E5"> different Packers and they are</font>

211
00:09:00,459 --> 00:09:04,300
all different<font color="#CCCCCC"> and</font><font color="#E5E5E5"> some of them have a</font>

212
00:09:03,399 --> 00:09:06,940
<font color="#CCCCCC">really high</font>

213
00:09:04,300 --> 00:09:09,490
instead of Linux there<font color="#CCCCCC"> are samples using</font>

214
00:09:06,940 --> 00:09:13,390
<font color="#CCCCCC">Parker's but we saw</font><font color="#E5E5E5"> that almost all of</font>

215
00:09:09,490 --> 00:09:17,170
them I use it<font color="#CCCCCC"> I use are using upx</font><font color="#E5E5E5"> upx</font>

216
00:09:13,390 --> 00:09:19,330
is an<font color="#CCCCCC"> open source</font><font color="#E5E5E5"> Parker freely</font>

217
00:09:17,170 --> 00:09:22,030
available<font color="#E5E5E5"> and what they do instead</font><font color="#CCCCCC"> of</font>

218
00:09:19,330 --> 00:09:25,660
modifying<font color="#E5E5E5"> the packing</font><font color="#CCCCCC"> algorithm</font><font color="#E5E5E5"> they</font>

219
00:09:22,030 --> 00:09:27,520
just<font color="#E5E5E5"> apply some</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> setting changes such</font>

220
00:09:25,660 --> 00:09:30,969
that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> finally but the final</font><font color="#CCCCCC"> binary</font>

221
00:09:27,520 --> 00:09:34,000
will<font color="#E5E5E5"> be still upx</font><font color="#CCCCCC"> packed</font><font color="#E5E5E5"> but it won't be</font>

222
00:09:30,970 --> 00:09:37,000
automatically unpacked by the upx to the

223
00:09:34,000 --> 00:09:40,030
official upx tool so here we have upx on

224
00:09:37,000 --> 00:09:41,710
one side and some variants<font color="#E5E5E5"> of upx</font><font color="#CCCCCC"> on the</font>

225
00:09:40,030 --> 00:09:44,800
other side<font color="#E5E5E5"> what they</font><font color="#CCCCCC"> are doing</font><font color="#E5E5E5"> for</font>

226
00:09:41,710 --> 00:09:47,830
<font color="#E5E5E5">example is to modify magic bytes or</font>

227
00:09:44,800 --> 00:09:51,609
typical upx strings or<font color="#CCCCCC"> the insert junk</font>

228
00:09:47,830 --> 00:09:53,590
bytes<font color="#E5E5E5"> but then we saw that there is one</font>

229
00:09:51,610 --> 00:09:56,140
malware family<font color="#E5E5E5"> that is already using a</font>

230
00:09:53,590 --> 00:09:57,760
custom<font color="#CCCCCC"> on made Parker</font><font color="#E5E5E5"> probably this</font><font color="#CCCCCC"> is a</font>

231
00:09:56,140 --> 00:09:59,350
trend for the<font color="#CCCCCC"> future and probably in</font><font color="#E5E5E5"> the</font>

232
00:09:57,760 --> 00:10:01,750
<font color="#CCCCCC">future</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> will start</font><font color="#E5E5E5"> seeing more</font>

233
00:09:59,350 --> 00:10:04,690
<font color="#CCCCCC">Parker's</font><font color="#E5E5E5"> specifically</font><font color="#CCCCCC"> designed for</font><font color="#E5E5E5"> the</font>

234
00:10:01,750 --> 00:10:06,520
Linux operating system<font color="#CCCCCC"> and finally the</font>

235
00:10:04,690 --> 00:10:09,130
most important part of the pipeline<font color="#CCCCCC"> that</font>

236
00:10:06,520 --> 00:10:11,500
<font color="#CCCCCC">is dynamic</font><font color="#E5E5E5"> the dynamic analysis stage we</font>

237
00:10:09,130 --> 00:10:14,350
<font color="#CCCCCC">Creek created we prepared different sand</font>

238
00:10:11,500 --> 00:10:16,780
<font color="#E5E5E5">boxes based on different architectures</font>

239
00:10:14,350 --> 00:10:19,870
we reconstructed<font color="#E5E5E5"> different environments</font>

240
00:10:16,780 --> 00:10:22,300
and with this<font color="#E5E5E5"> end boxes we wanted to run</font>

241
00:10:19,870 --> 00:10:24,070
finally this malware<font color="#E5E5E5"> to emulate their</font>

242
00:10:22,300 --> 00:10:26,740
code<font color="#CCCCCC"> and to connect some behavior of</font>

243
00:10:24,070 --> 00:10:28,900
traces to collect the traces<font color="#E5E5E5"> we use it</font>

244
00:10:26,740 --> 00:10:30,430
<font color="#E5E5E5">inside the sandbox</font><font color="#CCCCCC"> a Linux facility</font>

245
00:10:28,900 --> 00:10:32,829
already embedded<font color="#E5E5E5"> in the in the Linux</font>

246
00:10:30,430 --> 00:10:35,890
kernel that<font color="#E5E5E5"> is based on kernel probes</font>

247
00:10:32,830 --> 00:10:38,050
<font color="#E5E5E5">and user probes we use kernel probes to</font>

248
00:10:35,890 --> 00:10:40,060
trace the system calls the malware<font color="#E5E5E5"> are</font>

249
00:10:38,050 --> 00:10:41,469
executing to check the arguments the

250
00:10:40,060 --> 00:10:43,420
arguments they are passing<font color="#CCCCCC"> to the system</font>

251
00:10:41,470 --> 00:10:47,200
<font color="#CCCCCC">calls and the return value and then we</font>

252
00:10:43,420 --> 00:10:49,449
<font color="#E5E5E5">use the user probes</font><font color="#CCCCCC"> to trace</font><font color="#E5E5E5"> some</font>

253
00:10:47,200 --> 00:10:52,510
functions on the user<font color="#CCCCCC"> side at the user</font>

254
00:10:49,450 --> 00:10:54,940
<font color="#CCCCCC">level for example</font><font color="#E5E5E5"> we instrumented the C</font>

255
00:10:52,510 --> 00:10:57,819
library<font color="#CCCCCC"> to trace functions related to</font>

256
00:10:54,940 --> 00:10:59,740
strings or to memory<font color="#E5E5E5"> finally we have a</font>

257
00:10:57,820 --> 00:11:01,930
behavioral trace from this trace we can

258
00:10:59,740 --> 00:11:05,200
understand if the<font color="#E5E5E5"> MAL will really run or</font>

259
00:11:01,930 --> 00:11:07,449
<font color="#E5E5E5">if we got some problems</font><font color="#CCCCCC"> for example it</font>

260
00:11:05,200 --> 00:11:09,490
might<font color="#E5E5E5"> need</font><font color="#CCCCCC"> some specific</font><font color="#E5E5E5"> files inside an</font>

261
00:11:07,450 --> 00:11:11,920
environment<font color="#CCCCCC"> to be executed without</font>

262
00:11:09,490 --> 00:11:14,740
problems or this malware<font color="#CCCCCC"> might need</font>

263
00:11:11,920 --> 00:11:17,740
different libraries we don't have so we

264
00:11:14,740 --> 00:11:19,630
had to<font color="#CCCCCC"> install these libraries and here</font>

265
00:11:17,740 --> 00:11:23,850
we enter the feedback loop because every

266
00:11:19,630 --> 00:11:26,980
time we had<font color="#E5E5E5"> to prepare the sandbox and</font>

267
00:11:23,850 --> 00:11:29,050
we saw we wanted to<font color="#E5E5E5"> check some of the</font>

268
00:11:26,980 --> 00:11:32,320
behaviors and<font color="#CCCCCC"> we saw that</font><font color="#E5E5E5"> Linux malware</font>

269
00:11:29,050 --> 00:11:35,560
are already doing already<font color="#E5E5E5"> performing</font>

270
00:11:32,320 --> 00:11:37,270
<font color="#CCCCCC">tricks or applying behaviors</font>

271
00:11:35,560 --> 00:11:39,099
specifically designed for<font color="#CCCCCC"> Windows in the</font>

272
00:11:37,270 --> 00:11:41,829
past<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example and they are playing</font>

273
00:11:39,100 --> 00:11:43,810
<font color="#CCCCCC">Andy</font><font color="#E5E5E5"> debugging tricks or they have</font>

274
00:11:41,830 --> 00:11:46,750
persistent strategies or there is

275
00:11:43,810 --> 00:11:48,459
process injection and these are a lot<font color="#E5E5E5"> I</font>

276
00:11:46,750 --> 00:11:50,770
<font color="#E5E5E5">don't have time to go</font><font color="#CCCCCC"> through all of</font>

277
00:11:48,460 --> 00:11:54,880
them<font color="#E5E5E5"> now but to give you some examples</font>

278
00:11:50,770 --> 00:11:57,460
for example deception malware wants<font color="#E5E5E5"> to</font>

279
00:11:54,880 --> 00:11:58,870
change the<font color="#CCCCCC"> process</font><font color="#E5E5E5"> name at run time they</font>

280
00:11:57,460 --> 00:12:01,990
want to<font color="#E5E5E5"> deceive the analyst</font><font color="#CCCCCC"> said</font><font color="#E5E5E5"> they</font>

281
00:11:58,870 --> 00:12:04,300
<font color="#E5E5E5">are doing this on Linux for example they</font>

282
00:12:01,990 --> 00:12:07,150
prefer<font color="#CCCCCC"> to rename the process with common</font>

283
00:12:04,300 --> 00:12:09,880
names of famous<font color="#E5E5E5"> daemons such as Ice Age</font>

284
00:12:07,150 --> 00:12:12,510
<font color="#CCCCCC">Internet they use</font><font color="#E5E5E5"> less suspicious name</font>

285
00:12:09,880 --> 00:12:14,530
that might refer to user applications or

286
00:12:12,510 --> 00:12:16,480
something more suspicious they take

287
00:12:14,530 --> 00:12:18,310
random alphanumeric strings<font color="#E5E5E5"> or</font>

288
00:12:16,480 --> 00:12:20,680
<font color="#E5E5E5">completely the speech completely</font>

289
00:12:18,310 --> 00:12:24,489
suspicious by just removing completely

290
00:12:20,680 --> 00:12:26,319
the process name and also they<font color="#E5E5E5"> are doing</font>

291
00:12:24,490 --> 00:12:28,420
evasion<font color="#CCCCCC"> that is the ability</font><font color="#E5E5E5"> of the</font>

292
00:12:26,320 --> 00:12:29,920
malware<font color="#E5E5E5"> to detect analysis</font><font color="#CCCCCC"> environment</font>

293
00:12:28,420 --> 00:12:31,959
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> really common</font><font color="#CCCCCC"> on Windows and</font>

294
00:12:29,920 --> 00:12:34,360
it's happening<font color="#E5E5E5"> on</font><font color="#CCCCCC"> Linux as well</font><font color="#E5E5E5"> what</font>

295
00:12:31,960 --> 00:12:36,610
they do is to check<font color="#CCCCCC"> the proc and system</font>

296
00:12:34,360 --> 00:12:38,860
<font color="#E5E5E5">and this virtual file systems to detect</font>

297
00:12:36,610 --> 00:12:41,050
<font color="#E5E5E5">at least</font><font color="#CCCCCC"> measure visualization at</font>

298
00:12:38,860 --> 00:12:43,120
<font color="#E5E5E5">emulation solutions there are also using</font>

299
00:12:41,050 --> 00:12:44,680
<font color="#E5E5E5">another trick</font><font color="#CCCCCC"> that is really</font><font color="#E5E5E5"> simple by</font>

300
00:12:43,120 --> 00:12:46,480
the same time<font color="#E5E5E5"> really</font><font color="#CCCCCC"> effective they</font>

301
00:12:44,680 --> 00:12:48,849
change they check if the file<font color="#E5E5E5"> has been</font>

302
00:12:46,480 --> 00:12:50,680
<font color="#E5E5E5">renamed because they know that when we</font>

303
00:12:48,850 --> 00:12:53,140
get our samples from<font color="#E5E5E5"> our fields from</font>

304
00:12:50,680 --> 00:12:55,449
<font color="#E5E5E5">other researchers usually we modify the</font>

305
00:12:53,140 --> 00:12:58,630
name of this file with the ash<font color="#E5E5E5"> of its</font>

306
00:12:55,450 --> 00:13:01,690
data so if the name<font color="#CCCCCC"> has been</font><font color="#E5E5E5"> changed</font>

307
00:12:58,630 --> 00:13:04,210
<font color="#CCCCCC">they may decide to suppress the original</font>

308
00:13:01,690 --> 00:13:07,180
behavior partially<font color="#E5E5E5"> or totally a</font><font color="#CCCCCC"> linux</font>

309
00:13:04,210 --> 00:13:10,150
malware already living as funny messages

310
00:13:07,180 --> 00:13:12,130
if they check the<font color="#E5E5E5"> they detected if they</font>

311
00:13:10,150 --> 00:13:13,959
detected an<font color="#CCCCCC"> analysis environment for</font>

312
00:13:12,130 --> 00:13:16,000
example<font color="#CCCCCC"> there is one our family living</font>

313
00:13:13,960 --> 00:13:17,800
<font color="#CCCCCC">as a message also</font><font color="#E5E5E5"> completely wiping the</font>

314
00:13:16,000 --> 00:13:20,200
art drive<font color="#CCCCCC"> well what</font><font color="#E5E5E5"> I've shown you so</font>

315
00:13:17,800 --> 00:13:22,030
<font color="#E5E5E5">far is just</font><font color="#CCCCCC"> a tip on an iceberg</font><font color="#E5E5E5"> there</font>

316
00:13:20,200 --> 00:13:23,950
<font color="#E5E5E5">are a lot of different a</font><font color="#CCCCCC"> lot</font><font color="#E5E5E5"> of tiny</font>

317
00:13:22,030 --> 00:13:26,740
details<font color="#CCCCCC"> so for this I really invite you</font>

318
00:13:23,950 --> 00:13:28,390
<font color="#E5E5E5">to read our paper for example in</font><font color="#CCCCCC"> Earth</font>

319
00:13:26,740 --> 00:13:30,130
whether there is a specific<font color="#E5E5E5"> field to</font>

320
00:13:28,390 --> 00:13:31,420
declare the application binary interface

321
00:13:30,130 --> 00:13:33,490
of the operating

322
00:13:31,420 --> 00:13:35,050
system<font color="#E5E5E5"> the Linux kernel is not using</font>

323
00:13:33,490 --> 00:13:38,080
<font color="#E5E5E5">this field today but there is one</font>

324
00:13:35,050 --> 00:13:40,329
malware there is using<font color="#CCCCCC"> this</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> achieve</font>

325
00:13:38,080 --> 00:13:43,420
compatibility on<font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> FreeBSD to</font>

326
00:13:40,330 --> 00:13:46,210
declare by declaring the<font color="#E5E5E5"> FreeBSD ABI</font><font color="#CCCCCC"> in</font>

327
00:13:43,420 --> 00:13:48,339
this field<font color="#E5E5E5"> also we had to prepare send</font>

328
00:13:46,210 --> 00:13:50,380
boxes<font color="#E5E5E5"> to execute the malware under root</font>

329
00:13:48,340 --> 00:13:53,440
and<font color="#E5E5E5"> user privileges because depending on</font>

330
00:13:50,380 --> 00:13:55,540
<font color="#E5E5E5">the execution execution privilege they</font>

331
00:13:53,440 --> 00:13:57,910
might show different behaviors or adapt

332
00:13:55,540 --> 00:14:00,370
<font color="#E5E5E5">date</font><font color="#CCCCCC"> adapter</font><font color="#E5E5E5"> techniques for example</font><font color="#CCCCCC"> to</font>

333
00:13:57,910 --> 00:14:02,410
achieve persistence and then we saw

334
00:14:00,370 --> 00:14:05,170
process<font color="#E5E5E5"> enumeration that</font><font color="#CCCCCC"> can be used to</font>

335
00:14:02,410 --> 00:14:07,270
evade dynamic environment<font color="#E5E5E5"> analysis</font>

336
00:14:05,170 --> 00:14:10,060
environment<font color="#E5E5E5"> but they are using it</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> far</font>

337
00:14:07,270 --> 00:14:12,210
<font color="#E5E5E5">only</font><font color="#CCCCCC"> to check if the system has been</font>

338
00:14:10,060 --> 00:14:14,469
already<font color="#E5E5E5"> infected to clean previous</font>

339
00:14:12,210 --> 00:14:17,290
infections of the same malware<font color="#E5E5E5"> and</font>

340
00:14:14,470 --> 00:14:19,540
finally we saw<font color="#CCCCCC"> that there</font><font color="#E5E5E5"> are samples</font>

341
00:14:17,290 --> 00:14:22,839
<font color="#E5E5E5">still and stripped this is unexpected</font>

342
00:14:19,540 --> 00:14:24,339
<font color="#CCCCCC">and probably the lack of</font><font color="#E5E5E5"> motivation</font><font color="#CCCCCC"> they</font>

343
00:14:22,840 --> 00:14:26,290
still<font color="#E5E5E5"> don't want to strip their symbols</font>

344
00:14:24,340 --> 00:14:28,920
because they know we are<font color="#E5E5E5"> not really</font>

345
00:14:26,290 --> 00:14:31,719
ready to<font color="#CCCCCC"> conclude Linux malware are</font>

346
00:14:28,920 --> 00:14:33,640
still in their infancy<font color="#E5E5E5"> but</font><font color="#CCCCCC"> they are</font>

347
00:14:31,720 --> 00:14:36,370
<font color="#CCCCCC">already</font><font color="#E5E5E5"> using a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> different</font>

348
00:14:33,640 --> 00:14:38,020
behaviors<font color="#E5E5E5"> and tricks and analyzing an</font>

349
00:14:36,370 --> 00:14:41,680
elf file is quite difficult because

350
00:14:38,020 --> 00:14:44,110
<font color="#E5E5E5">Linux is running or diverse devices from</font>

351
00:14:41,680 --> 00:14:46,510
<font color="#E5E5E5">a really small tier master to a really</font>

352
00:14:44,110 --> 00:14:49,390
<font color="#E5E5E5">large server and in order to</font><font color="#CCCCCC"> analyze</font>

353
00:14:46,510 --> 00:14:51,640
<font color="#E5E5E5">these</font><font color="#CCCCCC"> at files</font><font color="#E5E5E5"> as of today we must know</font>

354
00:14:49,390 --> 00:14:54,280
from<font color="#E5E5E5"> which device this elf is coming</font>

355
00:14:51,640 --> 00:14:56,050
from<font color="#E5E5E5"> we must know for which divides this</font>

356
00:14:54,280 --> 00:14:57,939
elf has been decided<font color="#E5E5E5"> in order to</font>

357
00:14:56,050 --> 00:15:01,359
recreate to reconstruct the right

358
00:14:57,940 --> 00:15:03,100
environment to<font color="#E5E5E5"> execute it</font><font color="#CCCCCC"> so I'm</font><font color="#E5E5E5"> excited</font>

359
00:15:01,360 --> 00:15:05,050
<font color="#E5E5E5">to</font><font color="#CCCCCC"> announce you that</font><font color="#E5E5E5"> today we release</font>

360
00:15:03,100 --> 00:15:07,540
<font color="#E5E5E5">our analysis infrastructure as a free</font>

361
00:15:05,050 --> 00:15:10,060
service<font color="#CCCCCC"> so and over that website you can</font>

362
00:15:07,540 --> 00:15:12,219
submit your sample your<font color="#CCCCCC"> ad file we will</font>

363
00:15:10,060 --> 00:15:14,469
<font color="#E5E5E5">analyze it for you and finally</font><font color="#CCCCCC"> you will</font>

364
00:15:12,220 --> 00:15:17,020
get back a<font color="#E5E5E5"> report and also</font><font color="#CCCCCC"> in this</font>

365
00:15:14,470 --> 00:15:18,970
website<font color="#CCCCCC"> you can find</font><font color="#E5E5E5"> our raw results the</font>

366
00:15:17,020 --> 00:15:21,870
results of our paper and the full data

367
00:15:18,970 --> 00:15:21,870
set<font color="#E5E5E5"> thank you</font>

368
00:15:25,800 --> 00:15:31,719
so we have time for questions<font color="#CCCCCC"> please in</font>

369
00:15:29,500 --> 00:15:33,700
the middle did<font color="#E5E5E5"> order meters from the</font>

370
00:15:31,720 --> 00:15:39,010
University of Maryland<font color="#CCCCCC"> very interesting</font>

371
00:15:33,700 --> 00:15:42,010
work<font color="#E5E5E5"> so you focused on the challenges</font>

372
00:15:39,010 --> 00:15:47,170
that<font color="#E5E5E5"> this diversity</font><font color="#CCCCCC"> in terms of</font>

373
00:15:42,010 --> 00:15:49,689
architectures and<font color="#E5E5E5"> Oasis poses for for</font>

374
00:15:47,170 --> 00:15:52,839
analyzing<font color="#CCCCCC"> mouths right for for for</font>

375
00:15:49,690 --> 00:15:54,430
running it in a sandbox right<font color="#E5E5E5"> so my</font>

376
00:15:52,840 --> 00:15:57,130
question<font color="#E5E5E5"> is does this also present the</font>

377
00:15:54,430 --> 00:15:59,170
challenge for the malware<font color="#E5E5E5"> creators in</font>

378
00:15:57,130 --> 00:16:01,210
the sense that you<font color="#E5E5E5"> know you</font><font color="#CCCCCC"> know on</font>

379
00:15:59,170 --> 00:16:04,050
Windows you create<font color="#CCCCCC"> the malware</font><font color="#E5E5E5"> it has a</font>

380
00:16:01,210 --> 00:16:08,530
very broad sort of list of targets so

381
00:16:04,050 --> 00:16:10,599
Linux<font color="#E5E5E5"> is that also the case or</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> yeah</font>

382
00:16:08,530 --> 00:16:12,670
<font color="#CCCCCC">I guess this is a challenge also for</font>

383
00:16:10,600 --> 00:16:14,590
malware creators because<font color="#E5E5E5"> they have to</font>

384
00:16:12,670 --> 00:16:16,390
think of all these<font color="#E5E5E5"> devices</font><font color="#CCCCCC"> that are</font>

385
00:16:14,590 --> 00:16:21,430
<font color="#E5E5E5">different so if they want to cheat to</font>

386
00:16:16,390 --> 00:16:23,080
<font color="#E5E5E5">achieve</font><font color="#CCCCCC"> I broad panorama of execution if</font>

387
00:16:21,430 --> 00:16:24,670
they want<font color="#E5E5E5"> to cover a lot of different</font>

388
00:16:23,080 --> 00:16:26,530
<font color="#CCCCCC">devices</font><font color="#E5E5E5"> they</font><font color="#CCCCCC"> have to think about</font><font color="#E5E5E5"> this</font>

389
00:16:24,670 --> 00:16:29,680
they<font color="#E5E5E5"> have to think that each device</font>

390
00:16:26,530 --> 00:16:31,720
might run<font color="#E5E5E5"> slightly modified version</font><font color="#CCCCCC"> of</font>

391
00:16:29,680 --> 00:16:34,089
Linux<font color="#E5E5E5"> might run a different Linux</font>

392
00:16:31,720 --> 00:16:35,890
distribution<font color="#E5E5E5"> with different with a</font>

393
00:16:34,090 --> 00:16:43,060
different environment so they must<font color="#E5E5E5"> know</font>

394
00:16:35,890 --> 00:16:44,740
<font color="#E5E5E5">this yeah thank you from tu Delft and I</font>

395
00:16:43,060 --> 00:16:46,420
was wondering if they<font color="#E5E5E5"> are trying to</font>

396
00:16:44,740 --> 00:16:48,190
evade<font color="#E5E5E5"> detection by basically blast</font>

397
00:16:46,420 --> 00:16:50,410
blacklisting everything that's detection

398
00:16:48,190 --> 00:16:52,300
aren't they basically<font color="#E5E5E5"> missing out on</font>

399
00:16:50,410 --> 00:16:55,510
<font color="#CCCCCC">everything that's hosted</font><font color="#E5E5E5"> somewhere in</font>

400
00:16:52,300 --> 00:16:57,819
some cloud pas cloud<font color="#CCCCCC"> SAS cloud</font><font color="#E5E5E5"> basically</font>

401
00:16:55,510 --> 00:17:01,569
like like half the<font color="#CCCCCC"> Lennard ecosystem by</font>

402
00:16:57,820 --> 00:17:04,180
just<font color="#E5E5E5"> focusing on CBS yeah so you are</font>

403
00:17:01,570 --> 00:17:07,120
<font color="#E5E5E5">asking me if they are</font><font color="#CCCCCC"> trying to evade</font>

404
00:17:04,180 --> 00:17:08,230
specific<font color="#E5E5E5"> CPU sorry I'm actually just</font>

405
00:17:07,119 --> 00:17:10,359
<font color="#CCCCCC">wondering if they</font><font color="#E5E5E5"> are missing out</font><font color="#CCCCCC"> on</font>

406
00:17:08,230 --> 00:17:12,040
potential targets because most of the

407
00:17:10,359 --> 00:17:14,829
Linux<font color="#CCCCCC"> servers we see out there are</font>

408
00:17:12,040 --> 00:17:18,430
mostly virtualized so they're checking

409
00:17:14,829 --> 00:17:21,399
for<font color="#E5E5E5"> like</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> VMware they are basically</font>

410
00:17:18,430 --> 00:17:23,589
missing<font color="#E5E5E5"> out on all</font><font color="#CCCCCC"> of these targets yeah</font>

411
00:17:21,400 --> 00:17:27,220
it might<font color="#CCCCCC"> be because what we saw is that</font>

412
00:17:23,589 --> 00:17:29,679
<font color="#E5E5E5">they check common</font><font color="#CCCCCC"> eiper visors or common</font>

413
00:17:27,220 --> 00:17:33,490
solutions<font color="#E5E5E5"> we actually found something</font>

414
00:17:29,680 --> 00:17:35,660
<font color="#CCCCCC">that</font><font color="#E5E5E5"> is specific for bigger systems also</font>

415
00:17:33,490 --> 00:17:38,900
<font color="#CCCCCC">you should buy used by</font>

416
00:17:35,660 --> 00:17:41,210
<font color="#E5E5E5">bang into three so they are general but</font>

417
00:17:38,900 --> 00:17:42,830
there is some there<font color="#E5E5E5"> is there are a</font>

418
00:17:41,210 --> 00:17:48,890
couple<font color="#E5E5E5"> of families that are</font><font color="#CCCCCC"> already</font>

419
00:17:42,830 --> 00:17:49,939
targeting specific systems thank you

420
00:17:48,890 --> 00:17:51,710
<font color="#E5E5E5">very much this is very interesting</font>

421
00:17:49,940 --> 00:17:53,420
<font color="#CCCCCC">research</font><font color="#E5E5E5"> so one thing I was wondering</font>

422
00:17:51,710 --> 00:17:55,490
<font color="#E5E5E5">during your presentation is that</font><font color="#CCCCCC"> you had</font>

423
00:17:53,420 --> 00:17:57,590
<font color="#E5E5E5">to you said that you had to prepare</font><font color="#CCCCCC"> the</font>

424
00:17:55,490 --> 00:17:59,210
sandbox<font color="#CCCCCC"> with the correct libraries and</font>

425
00:17:57,590 --> 00:18:00,679
so on and so forth<font color="#E5E5E5"> and I was wondering</font>

426
00:17:59,210 --> 00:18:02,270
whether there is something<font color="#CCCCCC"> that happens</font>

427
00:18:00,680 --> 00:18:04,370
automatically in<font color="#E5E5E5"> your tool or what</font>

428
00:18:02,270 --> 00:18:06,379
mechanism for<font color="#CCCCCC"> that was so probably the</font>

429
00:18:04,370 --> 00:18:09,320
future<font color="#E5E5E5"> we I'm</font><font color="#CCCCCC"> to this completely</font>

430
00:18:06,380 --> 00:18:12,320
automatic but for now we are<font color="#E5E5E5"> we were</font>

431
00:18:09,320 --> 00:18:13,790
preparing the sandbox<font color="#E5E5E5"> is manually so we</font>

432
00:18:12,320 --> 00:18:15,470
were<font color="#E5E5E5"> getting the needle libraries from</font>

433
00:18:13,790 --> 00:18:17,420
the earth feather and<font color="#E5E5E5"> then installing</font>

434
00:18:15,470 --> 00:18:20,120
<font color="#CCCCCC">this MA this library is manually</font>

435
00:18:17,420 --> 00:18:21,830
manually<font color="#E5E5E5"> sometimes it was not that</font><font color="#CCCCCC"> easy</font>

436
00:18:20,120 --> 00:18:23,689
because it was<font color="#CCCCCC"> difficult</font><font color="#E5E5E5"> to find</font><font color="#CCCCCC"> the</font>

437
00:18:21,830 --> 00:18:26,210
right library<font color="#E5E5E5"> but yeah for now</font><font color="#CCCCCC"> it's</font>

438
00:18:23,690 --> 00:18:31,790
model but we aim to do it completely

439
00:18:26,210 --> 00:18:34,010
<font color="#E5E5E5">automatic here now you have opened this</font>

440
00:18:31,790 --> 00:18:37,280
big melon<font color="#E5E5E5"> what's the next step</font>

441
00:18:34,010 --> 00:18:39,260
yeah<font color="#E5E5E5"> next time is to continue in this I</font>

442
00:18:37,280 --> 00:18:42,710
<font color="#E5E5E5">mean there is a still a lot of</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> to</font>

443
00:18:39,260 --> 00:18:45,379
do<font color="#CCCCCC"> is still really difficult to analyze</font>

444
00:18:42,710 --> 00:18:47,210
this malware<font color="#E5E5E5"> as a one-shot solution you</font>

445
00:18:45,380 --> 00:18:49,760
get<font color="#E5E5E5"> the binary you analyze it</font><font color="#CCCCCC"> you are</font>

446
00:18:47,210 --> 00:18:53,180
sure it will run<font color="#E5E5E5"> where you will be able</font>

447
00:18:49,760 --> 00:18:55,700
<font color="#CCCCCC">to</font><font color="#E5E5E5"> collect the behavior so for example</font>

448
00:18:53,180 --> 00:18:58,160
<font color="#E5E5E5">the diversity the fact that you must</font>

449
00:18:55,700 --> 00:19:00,590
know from<font color="#E5E5E5"> which device is the sample is</font>

450
00:18:58,160 --> 00:19:03,020
coming from and in the<font color="#E5E5E5"> future probably</font>

451
00:19:00,590 --> 00:19:05,929
we want to see if there<font color="#CCCCCC"> is something to</font>

452
00:19:03,020 --> 00:19:08,120
<font color="#E5E5E5">understand automatically the device the</font>

453
00:19:05,930 --> 00:19:10,490
region of this sample<font color="#E5E5E5"> to reconstruct the</font>

454
00:19:08,120 --> 00:19:15,040
environment automatically<font color="#E5E5E5"> okay thank you</font>

455
00:19:10,490 --> 00:19:15,040
<font color="#E5E5E5">very much so let's think again</font>

456
00:19:17,279 --> 00:19:22,259
and now it's time<font color="#CCCCCC"> for lunch Bon Appetit</font>

457
00:19:19,629 --> 00:19:22,259
<font color="#E5E5E5">everybody</font>

