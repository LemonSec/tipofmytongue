1
00:00:07,809 --> 00:00:11,940
hello<font color="#CCCCCC"> ever'one</font>

2
00:00:09,840 --> 00:00:15,059
from University<font color="#E5E5E5"> of Florida I'm here to</font>

3
00:00:11,940 --> 00:00:16,710
present our paper on USB security this

4
00:00:15,059 --> 00:00:19,669
<font color="#E5E5E5">is</font><font color="#CCCCCC"> a collaboration</font><font color="#E5E5E5"> with the</font><font color="#CCCCCC"> University</font>

5
00:00:16,710 --> 00:00:22,770
of Illinois<font color="#E5E5E5"> at urbana-champaign</font>

6
00:00:19,670 --> 00:00:24,689
so USB is short for<font color="#E5E5E5"> Universal Serial bus</font>

7
00:00:22,770 --> 00:00:26,160
and when are<font color="#E5E5E5"> you</font><font color="#CCCCCC"> finding wants to</font>

8
00:00:24,689 --> 00:00:28,590
remember<font color="#CCCCCC"> the</font><font color="#E5E5E5"> old days</font><font color="#CCCCCC"> when we need</font><font color="#E5E5E5"> to</font>

9
00:00:26,160 --> 00:00:30,660
<font color="#E5E5E5">plug in a keyboard mouse using ps2 and</font>

10
00:00:28,590 --> 00:00:33,000
even<font color="#E5E5E5"> better we bought another 100</font>

11
00:00:30,660 --> 00:00:35,070
different preferable parts like<font color="#E5E5E5"> see</font>

12
00:00:33,000 --> 00:00:37,680
report<font color="#E5E5E5"> parallel port to connect with</font>

13
00:00:35,070 --> 00:00:40,050
printer scanner or digital camera and

14
00:00:37,680 --> 00:00:42,600
<font color="#E5E5E5">everything is changed up to USB SD</font>

15
00:00:40,050 --> 00:00:45,419
vented nowadays<font color="#E5E5E5"> we're using USB to</font>

16
00:00:42,600 --> 00:00:47,880
connect with phones tablets and the

17
00:00:45,420 --> 00:00:52,200
latest MacBook Pro has only<font color="#E5E5E5"> USB type-c</font>

18
00:00:47,880 --> 00:00:54,840
port<font color="#E5E5E5"> so yes B supports up</font><font color="#CCCCCC"> to 20 gig base</font>

19
00:00:52,200 --> 00:00:58,469
per second data transmission speed and

20
00:00:54,840 --> 00:01:01,829
up to 100<font color="#E5E5E5"> was for power supply</font><font color="#CCCCCC"> but</font>

21
00:00:58,469 --> 00:01:03,329
<font color="#E5E5E5">unfortunately USB is not secure</font><font color="#CCCCCC"> we look</font>

22
00:01:01,829 --> 00:01:05,850
at all those USB

23
00:01:03,329 --> 00:01:11,430
attacks and defenses in that past<font color="#CCCCCC"> 20</font>

24
00:01:05,850 --> 00:01:13,500
<font color="#CCCCCC">years and from leveraging USB device to</font>

25
00:01:11,430 --> 00:01:17,610
break into the<font color="#E5E5E5"> gear</font><font color="#CCCCCC"> air-gap for malware</font>

26
00:01:13,500 --> 00:01:19,250
propagation to maliciously<font color="#E5E5E5"> modify the</font>

27
00:01:17,610 --> 00:01:23,610
firmware to<font color="#E5E5E5"> inject malicious</font>

28
00:01:19,250 --> 00:01:25,319
functionalities<font color="#E5E5E5"> and for signal</font>

29
00:01:23,610 --> 00:01:28,380
injections for example inject<font color="#E5E5E5"> high</font>

30
00:01:25,319 --> 00:01:33,119
voltage to destroy the host<font color="#E5E5E5"> machine and</font>

31
00:01:28,380 --> 00:01:35,580
we look<font color="#E5E5E5"> back all those attacks we we</font>

32
00:01:33,119 --> 00:01:39,020
look at 40 attacks in total and we

33
00:01:35,580 --> 00:01:42,000
surveyed 30<font color="#E5E5E5"> defensive solution together</font>

34
00:01:39,020 --> 00:01:43,979
to fully<font color="#CCCCCC"> to better understand the</font>

35
00:01:42,000 --> 00:01:47,099
security<font color="#E5E5E5"> issues within these attacks and</font>

36
00:01:43,979 --> 00:01:49,470
defenses<font color="#E5E5E5"> we break all these solutions</font>

37
00:01:47,099 --> 00:01:53,220
<font color="#E5E5E5">into different layers from top to bottom</font>

38
00:01:49,470 --> 00:01:57,720
we have humiliation layer<font color="#E5E5E5"> transport</font>

39
00:01:53,220 --> 00:01:59,880
layer<font color="#E5E5E5"> and</font><font color="#CCCCCC"> physical layer so attacks and</font>

40
00:01:57,720 --> 00:02:02,459
<font color="#E5E5E5">humanly</font><font color="#CCCCCC"> our targets human beings and how</font>

41
00:01:59,880 --> 00:02:05,729
they<font color="#E5E5E5"> treat and handle the USB devices</font>

42
00:02:02,459 --> 00:02:08,459
here we have<font color="#E5E5E5"> outsiders attacks and</font>

43
00:02:05,729 --> 00:02:10,440
insider attacks<font color="#E5E5E5"> outsiders are vulnerable</font>

44
00:02:08,459 --> 00:02:13,230
to<font color="#E5E5E5"> social engineering</font><font color="#CCCCCC"> such as the USB</font>

45
00:02:10,440 --> 00:02:15,300
<font color="#E5E5E5">baiting and we have seen so many</font><font color="#CCCCCC"> cases</font>

46
00:02:13,230 --> 00:02:17,909
<font color="#CCCCCC">where attacker</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> drop some random</font>

47
00:02:15,300 --> 00:02:20,400
malicious USB<font color="#CCCCCC"> drive end up in the in the</font>

48
00:02:17,909 --> 00:02:22,200
parking lot<font color="#E5E5E5"> the most well</font><font color="#CCCCCC"> annoying</font>

49
00:02:20,400 --> 00:02:23,250
<font color="#CCCCCC">setter attacks</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> Snowden the winter</font>

50
00:02:22,200 --> 00:02:26,810
case where a teacher

51
00:02:23,250 --> 00:02:28,740
plugging a typical USB<font color="#E5E5E5"> drives</font><font color="#CCCCCC"> into</font>

52
00:02:26,810 --> 00:02:29,550
<font color="#CCCCCC">classifiers</font><font color="#E5E5E5"> comforter system to</font>

53
00:02:28,740 --> 00:02:33,300
exfiltrate

54
00:02:29,550 --> 00:02:35,160
a sensitive data<font color="#E5E5E5"> and</font><font color="#CCCCCC"> even worse a recent</font>

55
00:02:33,300 --> 00:02:37,530
study from<font color="#CCCCCC"> a</font><font color="#E5E5E5"> local co-authors drop</font>

56
00:02:35,160 --> 00:02:41,549
hundreds of different<font color="#CCCCCC"> USB flash drives</font>

57
00:02:37,530 --> 00:02:43,290
across the campus<font color="#E5E5E5"> and it and and it</font>

58
00:02:41,550 --> 00:02:46,920
turns<font color="#E5E5E5"> out most</font><font color="#CCCCCC"> people would pick them up</font>

59
00:02:43,290 --> 00:02:49,320
and<font color="#E5E5E5"> plug into their laptops attacks I</font>

60
00:02:46,920 --> 00:02:51,089
<font color="#E5E5E5">have application</font><font color="#CCCCCC"> leaders he involves the</font>

61
00:02:49,320 --> 00:02:53,510
application<font color="#CCCCCC"> weaving the host operating</font>

62
00:02:51,090 --> 00:02:57,060
<font color="#CCCCCC">system and the</font><font color="#E5E5E5"> functionality</font><font color="#CCCCCC"> provided by</font>

63
00:02:53,510 --> 00:02:59,510
the<font color="#E5E5E5"> USB device</font><font color="#CCCCCC"> here we have Cody</font>

64
00:02:57,060 --> 00:03:01,800
<font color="#CCCCCC">injection you really involve certain</font>

65
00:02:59,510 --> 00:03:05,100
<font color="#E5E5E5">feature provided by the operating</font><font color="#CCCCCC"> system</font>

66
00:03:01,800 --> 00:03:07,800
<font color="#CCCCCC">such as ultra</font><font color="#E5E5E5"> to install certain malware</font>

67
00:03:05,100 --> 00:03:11,340
we have seen Stuxnet<font color="#E5E5E5"> here we have dark</font>

68
00:03:07,800 --> 00:03:14,459
oak on<font color="#CCCCCC"> Flickr inflame</font><font color="#E5E5E5"> data exfiltration</font>

69
00:03:11,340 --> 00:03:18,870
<font color="#E5E5E5">leverage the functionality of the USB</font>

70
00:03:14,459 --> 00:03:21,090
<font color="#CCCCCC">device</font><font color="#E5E5E5"> to exfiltrate data</font><font color="#CCCCCC"> Microsoft has</font>

71
00:03:18,870 --> 00:03:23,489
been<font color="#E5E5E5"> aware of this</font><font color="#CCCCCC"> auto</font><font color="#E5E5E5"> run issue for</font>

72
00:03:21,090 --> 00:03:27,030
years and<font color="#E5E5E5"> we added it is ultra round</font>

73
00:03:23,489 --> 00:03:29,340
protection<font color="#CCCCCC"> since 2007</font><font color="#E5E5E5"> but still you can</font>

74
00:03:27,030 --> 00:03:31,470
buy this USB<font color="#E5E5E5"> device on the market</font><font color="#CCCCCC"> which</font>

75
00:03:29,340 --> 00:03:34,400
<font color="#CCCCCC">can bypass this protection</font><font color="#E5E5E5"> and</font>

76
00:03:31,470 --> 00:03:37,470
<font color="#E5E5E5">reasonable the ultra run feature again</font>

77
00:03:34,400 --> 00:03:39,090
<font color="#CCCCCC">attacks at the transport layer</font><font color="#E5E5E5"> involves</font>

78
00:03:37,470 --> 00:03:41,280
<font color="#E5E5E5">at the USB stack weaving the upper</font>

79
00:03:39,090 --> 00:03:43,860
<font color="#CCCCCC">systems operating system and the USB</font>

80
00:03:41,280 --> 00:03:46,890
<font color="#CCCCCC">device drivers on the device</font><font color="#E5E5E5"> side aiding</font>

81
00:03:43,860 --> 00:03:48,930
involves the firmware<font color="#E5E5E5"> of the device here</font>

82
00:03:46,890 --> 00:03:52,078
we have protocol master reading and a

83
00:03:48,930 --> 00:03:54,530
protocol corruption<font color="#CCCCCC"> masquerading usually</font>

84
00:03:52,079 --> 00:03:57,660
takes the<font color="#E5E5E5"> advantage of the u.s.</font><font color="#CCCCCC"> beast</font>

85
00:03:54,530 --> 00:04:00,570
protocol<font color="#E5E5E5"> to add malicious functionality</font>

86
00:03:57,660 --> 00:04:03,390
into the from where my example is value

87
00:04:00,570 --> 00:04:05,850
as USB<font color="#E5E5E5"> here here we can see this USB</font>

88
00:04:03,390 --> 00:04:08,458
<font color="#E5E5E5">flash drive can inject keystroke just</font>

89
00:04:05,850 --> 00:04:10,200
like a keyboard<font color="#E5E5E5"> protocol corruption</font>

90
00:04:08,459 --> 00:04:12,540
usually involves hardware or software

91
00:04:10,200 --> 00:04:14,488
fuzzer to exploit certain

92
00:04:12,540 --> 00:04:18,349
vulnerabilities weaving<font color="#CCCCCC"> they use</font><font color="#E5E5E5"> USB</font>

93
00:04:14,489 --> 00:04:21,418
software stack we have these dancer here

94
00:04:18,350 --> 00:04:24,120
physical layers involves the physical

95
00:04:21,418 --> 00:04:25,890
<font color="#E5E5E5">characteristics happens on the</font><font color="#CCCCCC"> USB bus</font>

96
00:04:24,120 --> 00:04:28,890
between<font color="#CCCCCC"> the host machine</font><font color="#E5E5E5"> and the device</font>

97
00:04:25,890 --> 00:04:31,110
if<font color="#CCCCCC"> the straw being either</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> bad certain</font>

98
00:04:28,890 --> 00:04:34,460
extra<font color="#E5E5E5"> hardware into</font><font color="#CCCCCC"> the device or</font>

99
00:04:31,110 --> 00:04:35,729
keyboard or<font color="#E5E5E5"> exploit certain hardware</font>

100
00:04:34,460 --> 00:04:36,930
<font color="#CCCCCC">defect</font>

101
00:04:35,729 --> 00:04:39,599
to launch<font color="#E5E5E5"> side channel</font>

102
00:04:36,930 --> 00:04:42,690
attacks<font color="#E5E5E5"> my example here</font><font color="#CCCCCC"> is a USB</font>

103
00:04:39,600 --> 00:04:45,240
<font color="#E5E5E5">snooping attack</font><font color="#CCCCCC"> here the leakage signal</font>

104
00:04:42,690 --> 00:04:47,610
<font color="#E5E5E5">from the USB</font><font color="#CCCCCC"> hub</font><font color="#E5E5E5"> but can be leveraged to</font>

105
00:04:45,240 --> 00:04:50,340
<font color="#CCCCCC">launch side-channel attacks</font><font color="#E5E5E5"> against the</font>

106
00:04:47,610 --> 00:04:54,030
<font color="#E5E5E5">USB traffic happened in the adjacent</font>

107
00:04:50,340 --> 00:04:56,638
downstream port single injection attacks

108
00:04:54,030 --> 00:04:58,710
just inject higher voltage or<font color="#CCCCCC"> carbon to</font>

109
00:04:56,639 --> 00:05:00,930
destroy the host<font color="#E5E5E5"> machine the example</font>

110
00:04:58,710 --> 00:05:03,210
here<font color="#CCCCCC"> again is the</font><font color="#E5E5E5"> USB killer which is a</font>

111
00:05:00,930 --> 00:05:04,860
crepe with<font color="#CCCCCC"> bunch of capacitors</font><font color="#E5E5E5"> after</font>

112
00:05:03,210 --> 00:05:07,198
this device<font color="#CCCCCC"> the plug</font><font color="#E5E5E5"> into the host</font>

113
00:05:04,860 --> 00:05:09,900
machine<font color="#CCCCCC"> they would try to draw power</font>

114
00:05:07,199 --> 00:05:11,580
from the host controller<font color="#E5E5E5"> and was there</font>

115
00:05:09,900 --> 00:05:14,719
fully charged they<font color="#CCCCCC"> would discharge</font><font color="#E5E5E5"> and</font>

116
00:05:11,580 --> 00:05:18,359
it just put your machine into into fire

117
00:05:14,720 --> 00:05:21,889
so in summary we look at 40 different

118
00:05:18,360 --> 00:05:24,509
attacks<font color="#E5E5E5"> into a different</font><font color="#CCCCCC"> subcategories</font>

119
00:05:21,889 --> 00:05:27,410
<font color="#CCCCCC">one lesson learned</font><font color="#E5E5E5"> here is trust by</font>

120
00:05:24,509 --> 00:05:30,599
default<font color="#E5E5E5"> we see like people trust these</font>

121
00:05:27,410 --> 00:05:33,180
device<font color="#E5E5E5"> by its appearance and the old</font>

122
00:05:30,599 --> 00:05:35,880
operating<font color="#E5E5E5"> system tries this device by</font>

123
00:05:33,180 --> 00:05:38,400
default as<font color="#CCCCCC"> well another observation here</font>

124
00:05:35,880 --> 00:05:40,169
is attacks<font color="#E5E5E5"> transcend layers even the</font>

125
00:05:38,400 --> 00:05:42,448
attacks happens at the<font color="#E5E5E5"> transport layer</font>

126
00:05:40,169 --> 00:05:45,448
or<font color="#CCCCCC"> the hardware</font><font color="#E5E5E5"> layer</font><font color="#CCCCCC"> are still</font>

127
00:05:42,449 --> 00:05:48,990
targeting the application level<font color="#E5E5E5"> data and</font>

128
00:05:45,449 --> 00:05:51,240
<font color="#CCCCCC">or user level sensitive</font><font color="#E5E5E5"> data so then we</font>

129
00:05:48,990 --> 00:05:53,460
look at<font color="#E5E5E5"> all the</font><font color="#CCCCCC"> defenses happen at each</font>

130
00:05:51,240 --> 00:05:56,970
layer<font color="#CCCCCC"> differences</font><font color="#E5E5E5"> are the human leaders</font>

131
00:05:53,460 --> 00:05:58,979
ranging<font color="#E5E5E5"> from security</font><font color="#CCCCCC"> training data</font>

132
00:05:56,970 --> 00:06:02,010
encryption host<font color="#E5E5E5"> authentication to</font>

133
00:05:58,979 --> 00:06:05,460
auditing and physically disabled in USB

134
00:06:02,010 --> 00:06:08,520
<font color="#E5E5E5">port</font><font color="#CCCCCC"> probe</font><font color="#E5E5E5"> VSP is</font><font color="#CCCCCC"> a typical solution</font><font color="#E5E5E5"> for</font>

135
00:06:05,460 --> 00:06:11,698
host authentication<font color="#CCCCCC"> here the TPM</font><font color="#E5E5E5"> is</font>

136
00:06:08,520 --> 00:06:13,979
leveraged<font color="#E5E5E5"> by the probe USB device to</font>

137
00:06:11,699 --> 00:06:15,539
establish the unique identity and

138
00:06:13,979 --> 00:06:18,050
<font color="#CCCCCC">interpretive measurement of the host</font>

139
00:06:15,539 --> 00:06:20,729
machine<font color="#E5E5E5"> within the device each i/o</font>

140
00:06:18,050 --> 00:06:23,460
operation is recorded at the<font color="#E5E5E5"> block</font><font color="#CCCCCC"> level</font>

141
00:06:20,729 --> 00:06:26,219
to provide provenance<font color="#E5E5E5"> so later on if</font>

142
00:06:23,460 --> 00:06:28,830
this USB<font color="#E5E5E5"> device is infected</font><font color="#CCCCCC"> with certain</font>

143
00:06:26,220 --> 00:06:30,720
malware we can do forensic analysis

144
00:06:28,830 --> 00:06:32,909
using<font color="#E5E5E5"> this</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> to figure out when</font>

145
00:06:30,720 --> 00:06:35,669
and where does<font color="#E5E5E5"> this the infection</font>

146
00:06:32,909 --> 00:06:38,070
happened<font color="#E5E5E5"> defenses at the application</font>

147
00:06:35,669 --> 00:06:39,719
layer<font color="#E5E5E5"> has a system</font><font color="#CCCCCC"> of hardening which</font>

148
00:06:38,070 --> 00:06:42,780
usually<font color="#E5E5E5"> requires the</font><font color="#CCCCCC"> installation of</font>

149
00:06:39,720 --> 00:06:45,690
certain antivirus software and<font color="#E5E5E5"> driver</font>

150
00:06:42,780 --> 00:06:49,739
based access control which treated<font color="#E5E5E5"> the</font>

151
00:06:45,690 --> 00:06:50,520
USB drivers as<font color="#E5E5E5"> cavities and only</font>

152
00:06:49,740 --> 00:06:52,620
permitted

153
00:06:50,520 --> 00:06:54,870
ability based<font color="#E5E5E5"> on the policy setting of</font>

154
00:06:52,620 --> 00:06:57,810
<font color="#E5E5E5">this USB device and then we have honey</font>

155
00:06:54,870 --> 00:07:02,039
pots so good<font color="#CCCCCC"> ESB is a typical example of</font>

156
00:06:57,810 --> 00:07:06,150
driver based access control here<font color="#CCCCCC"> the</font>

157
00:07:02,039 --> 00:07:09,568
<font color="#CCCCCC">good ESB is able to intercept the</font><font color="#E5E5E5"> USB</font>

158
00:07:06,150 --> 00:07:12,179
<font color="#CCCCCC">device</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the driver loading so before</font>

159
00:07:09,569 --> 00:07:15,720
<font color="#E5E5E5">the corresponding driver is loaded guru</font>

160
00:07:12,180 --> 00:07:18,360
<font color="#CCCCCC">ESP is able to ask the expectation of</font>

161
00:07:15,720 --> 00:07:20,729
the device<font color="#CCCCCC"> from the user so for</font><font color="#E5E5E5"> example</font>

162
00:07:18,360 --> 00:07:23,280
if the user assumed this device is a USB

163
00:07:20,729 --> 00:07:25,650
<font color="#CCCCCC">flash</font><font color="#E5E5E5"> drive then guru USB would not</font>

164
00:07:23,280 --> 00:07:29,068
allow a keyboard driver to be loaded to

165
00:07:25,650 --> 00:07:31,020
<font color="#CCCCCC">serve this device differences of</font><font color="#E5E5E5"> the</font>

166
00:07:29,069 --> 00:07:34,110
transport layers have different

167
00:07:31,020 --> 00:07:36,690
categories<font color="#CCCCCC"> a firmware verification</font><font color="#E5E5E5"> you</font>

168
00:07:34,110 --> 00:07:38,699
really tries to verify either the

169
00:07:36,690 --> 00:07:41,159
functionality or the<font color="#E5E5E5"> integrity of the</font>

170
00:07:38,699 --> 00:07:44,009
<font color="#CCCCCC">firmware and then we have seen USB stack</font>

171
00:07:41,159 --> 00:07:46,139
fuzzing USB<font color="#E5E5E5"> pack the firewall solutions</font>

172
00:07:44,009 --> 00:07:48,389
<font color="#E5E5E5">treat the</font><font color="#CCCCCC"> USB security problem as a</font>

173
00:07:46,139 --> 00:07:51,030
networking problem and trying to enforce

174
00:07:48,389 --> 00:07:53,690
policies on each USB package and then we

175
00:07:51,030 --> 00:07:56,369
have USB<font color="#E5E5E5"> sorry we have a honeypot again</font>

176
00:07:53,690 --> 00:07:58,710
if you look at the USB filter

177
00:07:56,370 --> 00:08:01,020
architecture<font color="#CCCCCC"> its basically says in the</font>

178
00:07:58,710 --> 00:08:03,180
bottom of the USB<font color="#CCCCCC"> subsystem</font><font color="#E5E5E5"> within the</font>

179
00:08:01,020 --> 00:08:05,639
kernel<font color="#E5E5E5"> in the youth space there is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> to</font>

180
00:08:03,180 --> 00:08:08,849
<font color="#E5E5E5">call USB tables which specify the policy</font>

181
00:08:05,639 --> 00:08:11,370
of certain packet and the kernel is able

182
00:08:08,849 --> 00:08:13,529
to enforce this package to specify what

183
00:08:11,370 --> 00:08:17,130
kind of functionality<font color="#E5E5E5"> it is this USB</font>

184
00:08:13,529 --> 00:08:19,469
device is<font color="#CCCCCC"> able to perform there are not</font>

185
00:08:17,130 --> 00:08:21,479
too many<font color="#CCCCCC"> defenses at the</font><font color="#E5E5E5"> fiscal</font><font color="#CCCCCC"> year</font><font color="#E5E5E5"> and</font>

186
00:08:19,469 --> 00:08:25,349
to think a printing<font color="#CCCCCC"> randomize the</font><font color="#E5E5E5"> time</font>

187
00:08:21,479 --> 00:08:26,639
<font color="#E5E5E5">of the USB signaling trying to defend</font>

188
00:08:25,349 --> 00:08:28,710
against machine learning<font color="#E5E5E5"> based</font>

189
00:08:26,639 --> 00:08:31,919
fingerprinting techniques<font color="#CCCCCC"> secure</font>

190
00:08:28,710 --> 00:08:34,468
channels enables<font color="#E5E5E5"> encrypted communication</font>

191
00:08:31,919 --> 00:08:37,049
channel between<font color="#CCCCCC"> the host machine and the</font>

192
00:08:34,469 --> 00:08:41,550
device<font color="#E5E5E5"> one example is the u.s. scramble</font>

193
00:08:37,049 --> 00:08:45,569
<font color="#CCCCCC">if you see</font><font color="#E5E5E5"> so the encryption happens at</font>

194
00:08:41,549 --> 00:08:47,550
the controller<font color="#CCCCCC"> drive earlier</font><font color="#E5E5E5"> before each</font>

195
00:08:45,570 --> 00:08:50,720
packet<font color="#CCCCCC"> is sent to the controller</font>

196
00:08:47,550 --> 00:08:53,969
<font color="#CCCCCC">hardware it</font><font color="#E5E5E5"> is encrypted</font><font color="#CCCCCC"> by a use ramble</font>

197
00:08:50,720 --> 00:08:56,880
again<font color="#E5E5E5"> in summary we look at 30</font><font color="#CCCCCC"> different</font>

198
00:08:53,970 --> 00:08:59,310
defenses and well<font color="#CCCCCC"> observe Asia</font><font color="#E5E5E5"> is trust</font>

199
00:08:56,880 --> 00:09:01,860
anchors represent a design<font color="#E5E5E5"> trade-off we</font>

200
00:08:59,310 --> 00:09:04,140
have seen prob USB leverage the TPM from

201
00:09:01,860 --> 00:09:05,940
host machine to establish a trust but

202
00:09:04,140 --> 00:09:09,600
we haven't seen such trust anchor from

203
00:09:05,940 --> 00:09:11,430
the device<font color="#CCCCCC"> site</font><font color="#E5E5E5"> senior solutions single</font>

204
00:09:09,600 --> 00:09:13,590
<font color="#CCCCCC">area solutions are knotty effective</font>

205
00:09:11,430 --> 00:09:16,199
<font color="#CCCCCC">because we have seen attacks can</font>

206
00:09:13,590 --> 00:09:18,240
transcend layers and<font color="#E5E5E5"> last defenses for</font>

207
00:09:16,200 --> 00:09:20,610
signal<font color="#E5E5E5"> ejection are still missing</font><font color="#CCCCCC"> for</font>

208
00:09:18,240 --> 00:09:22,830
example the<font color="#CCCCCC"> u.s.</font><font color="#E5E5E5"> peculiar attack this is</font>

209
00:09:20,610 --> 00:09:24,540
also reasonable<font color="#E5E5E5"> because unless the</font><font color="#CCCCCC"> host</font>

210
00:09:22,830 --> 00:09:27,180
controller is equipped with<font color="#E5E5E5"> overcurrent</font>

211
00:09:24,540 --> 00:09:28,829
over-voltage protection<font color="#CCCCCC"> there's just no</font>

212
00:09:27,180 --> 00:09:31,130
way<font color="#CCCCCC"> for the software layer to defend</font>

213
00:09:28,830 --> 00:09:34,080
against these kind of attacks

214
00:09:31,130 --> 00:09:36,300
so we<font color="#CCCCCC"> combined the taxonomy of attacks</font>

215
00:09:34,080 --> 00:09:39,840
and<font color="#E5E5E5"> defenses together in our systematize</font>

216
00:09:36,300 --> 00:09:42,180
ation the first observation here is<font color="#E5E5E5"> the</font>

217
00:09:39,840 --> 00:09:44,130
packet the<font color="#CCCCCC"> packet firewall and the</font>

218
00:09:42,180 --> 00:09:47,099
honeypot solutions provides the best

219
00:09:44,130 --> 00:09:48,960
<font color="#E5E5E5">coverage across different attacks as we</font>

220
00:09:47,100 --> 00:09:50,940
mentioned<font color="#CCCCCC"> before</font><font color="#E5E5E5"> the defense for signal</font>

221
00:09:48,960 --> 00:09:53,390
injection attacks is missing

222
00:09:50,940 --> 00:09:56,100
but<font color="#E5E5E5"> unfortunately the USB implementers</font>

223
00:09:53,390 --> 00:09:57,720
forum<font color="#E5E5E5"> recognized this issue and</font>

224
00:09:56,100 --> 00:10:01,280
introduced the<font color="#E5E5E5"> type C authentication</font>

225
00:09:57,720 --> 00:10:04,140
protocol<font color="#CCCCCC"> trying to fix this</font><font color="#E5E5E5"> problem</font><font color="#CCCCCC"> so</font>

226
00:10:01,280 --> 00:10:05,939
<font color="#CCCCCC">there are some review comments on Amazon</font>

227
00:10:04,140 --> 00:10:09,900
from a Google engineer complaining about

228
00:10:05,940 --> 00:10:13,650
how a<font color="#CCCCCC"> Mesa wiretap a cable destroyed his</font>

229
00:10:09,900 --> 00:10:15,870
laptops and USB analyzers the USB<font color="#E5E5E5"> I have</font>

230
00:10:13,650 --> 00:10:17,850
recognized this issue and introduced

231
00:10:15,870 --> 00:10:18,360
<font color="#E5E5E5">Type C authentication</font><font color="#CCCCCC"> trying to</font><font color="#E5E5E5"> fix this</font>

232
00:10:17,850 --> 00:10:20,940
problem

233
00:10:18,360 --> 00:10:24,000
<font color="#E5E5E5">note that this a first official response</font>

234
00:10:20,940 --> 00:10:28,080
from<font color="#CCCCCC"> if2</font><font color="#E5E5E5"> security issues related with</font>

235
00:10:24,000 --> 00:10:30,480
USB<font color="#E5E5E5"> it is finalized on February 2017 so</font>

236
00:10:28,080 --> 00:10:34,830
in<font color="#E5E5E5"> short it brings a city model into the</font>

237
00:10:30,480 --> 00:10:36,270
<font color="#CCCCCC">USB ecosystem to support this same model</font>

238
00:10:34,830 --> 00:10:38,870
there are<font color="#E5E5E5"> some hardware changes needed</font>

239
00:10:36,270 --> 00:10:41,939
<font color="#E5E5E5">within</font><font color="#CCCCCC"> the device the first change is</font>

240
00:10:38,870 --> 00:10:43,740
maximum<font color="#E5E5E5"> eight different private keys and</font>

241
00:10:41,940 --> 00:10:47,670
their corresponding<font color="#CCCCCC"> certificate change</font>

242
00:10:43,740 --> 00:10:50,520
can be baked into this<font color="#E5E5E5"> USB device and</font>

243
00:10:47,670 --> 00:10:51,120
extra crypto components are also<font color="#E5E5E5"> needed</font>

244
00:10:50,520 --> 00:10:53,340
including

245
00:10:51,120 --> 00:10:57,450
random<font color="#E5E5E5"> number generator hashing and</font>

246
00:10:53,340 --> 00:10:59,040
<font color="#E5E5E5">finding modules after the device is</font>

247
00:10:57,450 --> 00:11:00,630
plugged<font color="#E5E5E5"> into the host machine</font><font color="#CCCCCC"> this</font>

248
00:10:59,040 --> 00:11:04,650
authentication protocol<font color="#E5E5E5"> gonna start</font>

249
00:11:00,630 --> 00:11:07,430
before<font color="#E5E5E5"> the device is fully activated the</font>

250
00:11:04,650 --> 00:11:08,550
whole protocol<font color="#E5E5E5"> works like a typical</font>

251
00:11:07,430 --> 00:11:11,189
<font color="#CCCCCC">challenge-response</font>

252
00:11:08,550 --> 00:11:14,430
<font color="#E5E5E5">messaging protocol</font><font color="#CCCCCC"> the holster starts</font>

253
00:11:11,190 --> 00:11:17,430
with a dices<font color="#CCCCCC"> priori asking for certain</font>

254
00:11:14,430 --> 00:11:19,199
certificate chain and then<font color="#E5E5E5"> the host read</font>

255
00:11:17,430 --> 00:11:21,780
certificate chain from the<font color="#E5E5E5"> device</font><font color="#CCCCCC"> and</font>

256
00:11:19,200 --> 00:11:25,320
finally the<font color="#E5E5E5"> Haute send of announce and</font>

257
00:11:21,780 --> 00:11:26,970
verify the signature<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> device we</font>

258
00:11:25,320 --> 00:11:29,070
<font color="#CCCCCC">realize this protocol is really</font>

259
00:11:26,970 --> 00:11:31,740
important and it had not been formally

260
00:11:29,070 --> 00:11:33,690
verified<font color="#CCCCCC"> so we did</font><font color="#E5E5E5"> it using perverse</font>

261
00:11:31,740 --> 00:11:35,490
the first challenge<font color="#E5E5E5"> comes from the</font>

262
00:11:33,690 --> 00:11:38,580
<font color="#E5E5E5">difference between networking protocol</font>

263
00:11:35,490 --> 00:11:42,540
and hardware protocol because<font color="#CCCCCC"> Prevert</font>

264
00:11:38,580 --> 00:11:44,610
assumes<font color="#E5E5E5"> thread as</font><font color="#CCCCCC"> an untrusted channel</font>

265
00:11:42,540 --> 00:11:46,709
and this<font color="#E5E5E5"> is usually the internet for</font>

266
00:11:44,610 --> 00:11:49,380
<font color="#E5E5E5">networking protocols but for</font><font color="#CCCCCC"> hardware</font>

267
00:11:46,710 --> 00:11:51,570
protocol especially USB we trade the

268
00:11:49,380 --> 00:11:53,700
firmware<font color="#E5E5E5"> as the untrusted protocol</font>

269
00:11:51,570 --> 00:11:56,190
<font color="#E5E5E5">because we have seen the firmware</font>

270
00:11:53,700 --> 00:11:58,110
changes are the most powerful<font color="#CCCCCC"> attacks</font>

271
00:11:56,190 --> 00:12:00,300
one can launch at the<font color="#E5E5E5"> software layer</font>

272
00:11:58,110 --> 00:12:03,240
<font color="#E5E5E5">then we need to figure out what need</font><font color="#CCCCCC"> to</font>

273
00:12:00,300 --> 00:12:05,280
<font color="#E5E5E5">be protected</font><font color="#CCCCCC"> we realize</font><font color="#E5E5E5"> all these</font>

274
00:12:03,240 --> 00:12:06,570
private<font color="#E5E5E5"> keys the inside this USB device</font>

275
00:12:05,280 --> 00:12:09,600
have to be private

276
00:12:06,570 --> 00:12:11,700
<font color="#E5E5E5">meanwhile the certificate change can be</font>

277
00:12:09,600 --> 00:12:14,490
public<font color="#CCCCCC"> and then what about the security</font>

278
00:12:11,700 --> 00:12:16,410
<font color="#CCCCCC">goes we</font><font color="#E5E5E5"> realize is successful</font>

279
00:12:14,490 --> 00:12:19,680
authentication should guarantee<font color="#E5E5E5"> the true</font>

280
00:12:16,410 --> 00:12:22,050
identity of<font color="#E5E5E5"> this USB device and even</font>

281
00:12:19,680 --> 00:12:24,449
more<font color="#E5E5E5"> a successful authentication should</font>

282
00:12:22,050 --> 00:12:28,140
guarantee<font color="#E5E5E5"> the original functionality of</font>

283
00:12:24,450 --> 00:12:30,540
this<font color="#E5E5E5"> device once we sort out this using</font>

284
00:12:28,140 --> 00:12:32,520
<font color="#CCCCCC">Provera</font><font color="#E5E5E5"> we implement the whole protocol</font>

285
00:12:30,540 --> 00:12:35,819
using<font color="#E5E5E5"> progress and we move on to the</font>

286
00:12:32,520 --> 00:12:38,490
<font color="#E5E5E5">formal verification so the good news</font>

287
00:12:35,820 --> 00:12:41,550
<font color="#CCCCCC">today is all the private keys are</font>

288
00:12:38,490 --> 00:12:43,680
<font color="#CCCCCC">secured because</font><font color="#E5E5E5"> there is no message</font>

289
00:12:41,550 --> 00:12:45,569
involved<font color="#E5E5E5"> with the protocol directly</font>

290
00:12:43,680 --> 00:12:48,540
accessing or transferring<font color="#CCCCCC"> the private</font>

291
00:12:45,570 --> 00:12:51,540
key<font color="#CCCCCC"> but the</font><font color="#E5E5E5"> bad news here is is</font>

292
00:12:48,540 --> 00:12:54,390
vulnerable to spoofing attacks so to

293
00:12:51,540 --> 00:12:56,370
accelerate the authentication procedure

294
00:12:54,390 --> 00:12:59,250
<font color="#CCCCCC">thus packer recommend the using of</font>

295
00:12:56,370 --> 00:13:01,770
certificated<font color="#CCCCCC"> chained catch if the digest</font>

296
00:12:59,250 --> 00:13:04,620
of this certificate<font color="#E5E5E5"> chain has</font><font color="#CCCCCC"> been seen</font>

297
00:13:01,770 --> 00:13:06,660
in this catch the host<font color="#E5E5E5"> would just escape</font>

298
00:13:04,620 --> 00:13:08,970
<font color="#E5E5E5">all the following procedures of these</font>

299
00:13:06,660 --> 00:13:11,130
authentication protocol and<font color="#CCCCCC"> trust this</font>

300
00:13:08,970 --> 00:13:13,650
device<font color="#E5E5E5"> and we think this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> bad</font>

301
00:13:11,130 --> 00:13:16,230
so we manually remove this certificate

302
00:13:13,650 --> 00:13:18,689
<font color="#E5E5E5">chain catch usage from our prover for</font>

303
00:13:16,230 --> 00:13:21,660
verification<font color="#E5E5E5"> and rerun the verification</font>

304
00:13:18,690 --> 00:13:23,820
<font color="#E5E5E5">and it's</font><font color="#CCCCCC"> still vulnerable</font><font color="#E5E5E5"> to bad USB</font>

305
00:13:21,660 --> 00:13:27,089
attacks<font color="#CCCCCC"> what happens here is the</font>

306
00:13:23,820 --> 00:13:29,100
attacker<font color="#E5E5E5"> just embed his own private key</font>

307
00:13:27,090 --> 00:13:31,080
and<font color="#E5E5E5"> certificate into the firmware</font>

308
00:13:29,100 --> 00:13:33,630
<font color="#E5E5E5">instead of using the</font><font color="#CCCCCC"> wire</font>

309
00:13:31,080 --> 00:13:36,270
baked into<font color="#E5E5E5"> the hardware and there are</font>

310
00:13:33,630 --> 00:13:38,550
even<font color="#CCCCCC"> more issues here including no</font>

311
00:13:36,270 --> 00:13:40,800
verification<font color="#E5E5E5"> for the certificate and a</font>

312
00:13:38,550 --> 00:13:43,560
self-signed certificates<font color="#E5E5E5"> are allowed as</font>

313
00:13:40,800 --> 00:13:45,839
well<font color="#E5E5E5"> we believe the type</font><font color="#CCCCCC"> C</font>

314
00:13:43,560 --> 00:13:48,300
authentication is really a good start

315
00:13:45,840 --> 00:13:51,420
<font color="#E5E5E5">but there are a lot of things we should</font>

316
00:13:48,300 --> 00:13:54,329
do to<font color="#CCCCCC"> make us</font><font color="#E5E5E5"> be secure one direction is</font>

317
00:13:51,420 --> 00:13:56,550
solution integration<font color="#E5E5E5"> we have seen like</font>

318
00:13:54,330 --> 00:13:58,620
how attacks can transcend layers<font color="#CCCCCC"> it's</font>

319
00:13:56,550 --> 00:14:00,689
natural to combine different different

320
00:13:58,620 --> 00:14:03,930
solutions at different layers<font color="#CCCCCC"> to provide</font>

321
00:14:00,690 --> 00:14:07,140
to provide<font color="#E5E5E5"> better coverage by the time</font>

322
00:14:03,930 --> 00:14:08,729
<font color="#CCCCCC">of writing</font><font color="#E5E5E5"> renesis has released a USB</font>

323
00:14:07,140 --> 00:14:10,680
powered power delivery controller

324
00:14:08,730 --> 00:14:15,420
<font color="#E5E5E5">supporting the type</font><font color="#CCCCCC"> c authentication</font>

325
00:14:10,680 --> 00:14:17,939
<font color="#E5E5E5">there are other</font><font color="#CCCCCC"> bunch of software</font><font color="#E5E5E5"> ie PS</font>

326
00:14:15,420 --> 00:14:22,949
supporting this protocol<font color="#E5E5E5"> as</font><font color="#CCCCCC"> well we</font>

327
00:14:17,940 --> 00:14:25,560
believe<font color="#E5E5E5"> is is needed to evaluate these</font>

328
00:14:22,950 --> 00:14:27,840
products as early as<font color="#CCCCCC"> possible</font><font color="#E5E5E5"> before</font>

329
00:14:25,560 --> 00:14:30,869
this protocol is fully adopted<font color="#E5E5E5"> by</font>

330
00:14:27,840 --> 00:14:33,240
different<font color="#CCCCCC"> vendors we have seen the</font><font color="#E5E5E5"> type</font>

331
00:14:30,870 --> 00:14:35,160
C authentication<font color="#E5E5E5"> only permits the</font>

332
00:14:33,240 --> 00:14:38,820
authentication<font color="#E5E5E5"> or the challenge from</font>

333
00:14:35,160 --> 00:14:41,250
<font color="#E5E5E5">host to the device and we really want</font>

334
00:14:38,820 --> 00:14:43,530
this bidirectional authentication<font color="#E5E5E5"> which</font>

335
00:14:41,250 --> 00:14:45,960
means<font color="#E5E5E5"> this would give billions of mobile</font>

336
00:14:43,530 --> 00:14:48,959
device<font color="#E5E5E5"> a chance to establish a trust</font>

337
00:14:45,960 --> 00:14:51,180
with the host machine<font color="#E5E5E5"> we also need to</font>

338
00:14:48,960 --> 00:14:53,040
support<font color="#E5E5E5"> the</font><font color="#CCCCCC"> lacks eight devices two</font>

339
00:14:51,180 --> 00:14:55,140
possible solutions<font color="#CCCCCC"> are former</font>

340
00:14:53,040 --> 00:14:56,430
attestation<font color="#E5E5E5"> and fingerprinting</font>

341
00:14:55,140 --> 00:14:58,020
although fingerprinting may be

342
00:14:56,430 --> 00:15:00,390
vulnerable to<font color="#CCCCCC"> a diversity</font><font color="#E5E5E5"> or machine</font>

343
00:14:58,020 --> 00:15:02,730
learning techniques<font color="#E5E5E5"> also we need to</font>

344
00:15:00,390 --> 00:15:06,210
implement<font color="#E5E5E5"> the policy mentioned across</font>

345
00:15:02,730 --> 00:15:08,580
<font color="#E5E5E5">the spec</font><font color="#CCCCCC"> whether or</font><font color="#E5E5E5"> not we can reuse the</font>

346
00:15:06,210 --> 00:15:11,610
existing policy language<font color="#E5E5E5"> like type</font>

347
00:15:08,580 --> 00:15:14,280
<font color="#CCCCCC">reinforcement used by SEO Linux or we</font>

348
00:15:11,610 --> 00:15:16,440
need<font color="#E5E5E5"> a new policy language designed for</font>

349
00:15:14,280 --> 00:15:19,980
USB peripherals<font color="#CCCCCC"> maybe following a</font>

350
00:15:16,440 --> 00:15:23,400
<font color="#E5E5E5">certain standard like SML or JSON so</font>

351
00:15:19,980 --> 00:15:26,040
inclusion we look at 40 attacks<font color="#E5E5E5"> plus 30</font>

352
00:15:23,400 --> 00:15:27,600
defenses we looked into USB<font color="#E5E5E5"> types the</font>

353
00:15:26,040 --> 00:15:30,900
authentication protocol which<font color="#E5E5E5"> is the</font>

354
00:15:27,600 --> 00:15:34,720
<font color="#E5E5E5">future</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> any USB devices and we give</font>

355
00:15:30,900 --> 00:15:40,669
<font color="#E5E5E5">future directions thank you</font>

356
00:15:34,720 --> 00:15:40,669
[Applause]

357
00:15:43,630 --> 00:15:49,850
<font color="#E5E5E5">all right so what people are getting</font><font color="#CCCCCC"> up</font>

358
00:15:46,460 --> 00:15:51,050
to<font color="#E5E5E5"> Michael asked my</font><font color="#CCCCCC"> question so you kind</font>

359
00:15:49,850 --> 00:15:52,670
<font color="#CCCCCC">of mentioned</font><font color="#E5E5E5"> it in the paper and if you</font>

360
00:15:51,050 --> 00:15:54,469
look at the bottom of the table<font color="#E5E5E5"> where</font>

361
00:15:52,670 --> 00:15:56,990
you<font color="#E5E5E5"> had the USBC at the bottom of the</font>

362
00:15:54,470 --> 00:15:59,660
<font color="#CCCCCC">table right and it failed</font><font color="#E5E5E5"> to cover most</font>

363
00:15:56,990 --> 00:16:01,520
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> threat vectors</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> where</font>

364
00:15:59,660 --> 00:16:03,589
correctly<font color="#E5E5E5"> but that was the</font><font color="#CCCCCC"> first and</font>

365
00:16:01,520 --> 00:16:05,990
<font color="#CCCCCC">only USB standard to incorporate a</font>

366
00:16:03,590 --> 00:16:07,640
secure<font color="#E5E5E5"> focus on security during design</font>

367
00:16:05,990 --> 00:16:12,080
yes<font color="#E5E5E5"> so I would say that</font><font color="#CCCCCC"> probably means</font>

368
00:16:07,640 --> 00:16:14,120
<font color="#E5E5E5">it failed</font><font color="#CCCCCC"> yeah be nice so would you make</font>

369
00:16:12,080 --> 00:16:16,460
<font color="#CCCCCC">any recommendations of how to carry out</font>

370
00:16:14,120 --> 00:16:18,710
<font color="#CCCCCC">that</font><font color="#E5E5E5"> secure design process better to</font>

371
00:16:16,460 --> 00:16:20,210
cover more threat vectors or is there

372
00:16:18,710 --> 00:16:21,230
<font color="#E5E5E5">something I'm missing about maybe some</font>

373
00:16:20,210 --> 00:16:23,870
<font color="#E5E5E5">of those threat vectors are actually</font>

374
00:16:21,230 --> 00:16:28,250
<font color="#CCCCCC">critical for a</font><font color="#E5E5E5"> USB cares about</font>

375
00:16:23,870 --> 00:16:30,590
I mean<font color="#E5E5E5"> first level we have emailed</font><font color="#CCCCCC"> USB</font>

376
00:16:28,250 --> 00:16:33,050
<font color="#E5E5E5">is about our findings and we're still</font>

377
00:16:30,590 --> 00:16:35,510
<font color="#E5E5E5">waiting for their response but regarding</font>

378
00:16:33,050 --> 00:16:36,800
whether or<font color="#CCCCCC"> not we wanted the the types</font>

379
00:16:35,510 --> 00:16:40,160
<font color="#E5E5E5">the authentication protocol to cover</font>

380
00:16:36,800 --> 00:16:42,920
more attacks<font color="#CCCCCC"> I mean I'm not sure because</font>

381
00:16:40,160 --> 00:16:45,079
<font color="#CCCCCC">my feeling is this protocol is is is</font>

382
00:16:42,920 --> 00:16:47,420
triggered<font color="#CCCCCC"> by these</font><font color="#E5E5E5"> like physical issues</font>

383
00:16:45,080 --> 00:16:50,060
where like it just<font color="#CCCCCC"> miss wire</font><font color="#E5E5E5"> type C</font>

384
00:16:47,420 --> 00:16:52,790
cable can destroy your machines<font color="#CCCCCC"> but</font>

385
00:16:50,060 --> 00:16:55,430
<font color="#E5E5E5">whether or not it can</font><font color="#CCCCCC"> be loved up to</font>

386
00:16:52,790 --> 00:16:57,860
defend<font color="#CCCCCC"> higher-level</font><font color="#E5E5E5"> attacks</font><font color="#CCCCCC"> I mean it's</font>

387
00:16:55,430 --> 00:17:00,229
possible<font color="#CCCCCC"> because at</font><font color="#E5E5E5"> least this</font><font color="#CCCCCC"> gives you</font>

388
00:16:57,860 --> 00:17:02,500
a trust anchor<font color="#CCCCCC"> within the device you can</font>

389
00:17:00,230 --> 00:17:05,000
<font color="#CCCCCC">always tell like for example you trust</font>

390
00:17:02,500 --> 00:17:07,579
<font color="#CCCCCC">device or host controller made by this</font>

391
00:17:05,000 --> 00:17:09,589
vendor<font color="#E5E5E5"> if you can build this trust you</font>

392
00:17:07,579 --> 00:17:12,199
probably can enforce certain policies

393
00:17:09,589 --> 00:17:14,300
but again like this is<font color="#E5E5E5"> just trusted</font>

394
00:17:12,200 --> 00:17:17,209
<font color="#CCCCCC">maybe not trustworthy</font>

395
00:17:14,300 --> 00:17:20,389
<font color="#E5E5E5">so you mentioned trust anchor but it</font>

396
00:17:17,209 --> 00:17:21,650
seems like you're able<font color="#CCCCCC"> to usurp the</font>

397
00:17:20,390 --> 00:17:22,130
trust anchor by writing<font color="#E5E5E5"> your own</font>

398
00:17:21,650 --> 00:17:24,170
firmware

399
00:17:22,130 --> 00:17:26,300
yes it's creating<font color="#CCCCCC"> your so</font><font color="#E5E5E5"> you're</font>

400
00:17:24,170 --> 00:17:28,339
motivating probably then you have

401
00:17:26,300 --> 00:17:30,740
<font color="#CCCCCC">hardware protections on the trust anchor</font>

402
00:17:28,339 --> 00:17:32,720
so that once a device is<font color="#E5E5E5"> sold from a</font>

403
00:17:30,740 --> 00:17:35,810
manufacturer<font color="#CCCCCC"> you can't overwrite a</font>

404
00:17:32,720 --> 00:17:39,290
certain like<font color="#E5E5E5"> TPM style but for USB</font>

405
00:17:35,810 --> 00:17:41,290
device<font color="#E5E5E5"> right I mean ideally the firmware</font>

406
00:17:39,290 --> 00:17:43,820
should not be reprogrammed

407
00:17:41,290 --> 00:17:45,740
<font color="#CCCCCC">because Ben then basically you give that</font>

408
00:17:43,820 --> 00:17:48,480
<font color="#E5E5E5">tech opportunities to do a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> crazy</font>

409
00:17:45,740 --> 00:17:52,740
stuff<font color="#CCCCCC"> but</font><font color="#E5E5E5"> as we have seen like</font>

410
00:17:48,480 --> 00:17:54,510
people just<font color="#E5E5E5"> can't can do that so okay</font>

411
00:17:52,740 --> 00:17:56,929
great<font color="#CCCCCC"> everybody let's take Dave for a</font>

412
00:17:54,510 --> 00:17:56,929
great talk

