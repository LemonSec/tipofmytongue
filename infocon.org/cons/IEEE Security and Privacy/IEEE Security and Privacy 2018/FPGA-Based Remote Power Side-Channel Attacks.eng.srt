1
00:00:07,770 --> 00:00:11,800
<font color="#CCCCCC">hey thank you</font><font color="#E5E5E5"> very much for the warm</font>

2
00:00:11,040 --> 00:00:14,200
welcome

3
00:00:11,800 --> 00:00:15,190
my name is Marcel<font color="#E5E5E5"> I'm an undergrad at</font>

4
00:00:14,200 --> 00:00:17,050
Cornell

5
00:00:15,190 --> 00:00:22,539
this work was done<font color="#CCCCCC"> alongside my</font><font color="#E5E5E5"> advisor</font>

6
00:00:17,050 --> 00:00:25,960
<font color="#CCCCCC">professor ed saw</font><font color="#E5E5E5"> so again this talk I</font>

7
00:00:22,539 --> 00:00:28,300
<font color="#E5E5E5">will talk</font><font color="#CCCCCC"> about how introducing FPGA</font>

8
00:00:25,960 --> 00:00:30,669
<font color="#E5E5E5">integrated systems introduces new</font>

9
00:00:28,300 --> 00:00:32,529
vulnerabilities that may<font color="#E5E5E5"> allow attackers</font>

10
00:00:30,669 --> 00:00:35,230
to perform remote<font color="#E5E5E5"> power</font><font color="#CCCCCC"> side-channel</font>

11
00:00:32,529 --> 00:00:37,270
<font color="#CCCCCC">attacks and this is important now as we</font>

12
00:00:35,230 --> 00:00:39,578
enter<font color="#CCCCCC"> an era of pervasive</font><font color="#E5E5E5"> hardware</font>

13
00:00:37,270 --> 00:00:42,700
specialization in which we are seeing a

14
00:00:39,579 --> 00:00:44,890
lot and a lot<font color="#CCCCCC"> more</font><font color="#E5E5E5"> prevalence of</font>

15
00:00:42,700 --> 00:00:47,530
hardware accelerators in both cloud and

16
00:00:44,890 --> 00:00:50,289
mobile<font color="#CCCCCC"> computing and one form of</font>

17
00:00:47,530 --> 00:00:53,140
<font color="#E5E5E5">hardware acceleration comes as a field</font>

18
00:00:50,289 --> 00:00:55,839
programmable<font color="#E5E5E5"> gate array or FPGA and what</font>

19
00:00:53,140 --> 00:00:58,710
these<font color="#CCCCCC"> FPGA czar is they're simply a</font>

20
00:00:55,839 --> 00:01:01,539
fabric<font color="#E5E5E5"> of reconfigurable logic blocks</font>

21
00:00:58,710 --> 00:01:05,290
connected<font color="#E5E5E5"> with some programmable</font>

22
00:01:01,539 --> 00:01:08,860
interconnects<font color="#E5E5E5"> and users</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> use RTL code</font>

23
00:01:05,290 --> 00:01:11,680
<font color="#E5E5E5">to virtually implement virtually any</font>

24
00:01:08,860 --> 00:01:13,270
circuit in the FPGA devices and this<font color="#E5E5E5"> is</font>

25
00:01:11,680 --> 00:01:15,940
very minimal<font color="#CCCCCC"> towards</font><font color="#E5E5E5"> datacenter</font>

26
00:01:13,270 --> 00:01:19,270
workloads which<font color="#E5E5E5"> rapidly change so for</font>

27
00:01:15,940 --> 00:01:21,730
example<font color="#E5E5E5"> two recent projects that came</font>

28
00:01:19,270 --> 00:01:24,009
out our Microsoft Project catapult<font color="#E5E5E5"> in</font>

29
00:01:21,730 --> 00:01:27,340
which<font color="#E5E5E5"> almost every new Microsoft server</font>

30
00:01:24,010 --> 00:01:30,190
is integrating a field<font color="#E5E5E5"> programmable gate</font>

31
00:01:27,340 --> 00:01:31,780
rate and secondly Amazon ec2<font color="#CCCCCC"> f-1</font>

32
00:01:30,190 --> 00:01:35,800
instances if any of you guys have<font color="#CCCCCC"> used</font>

33
00:01:31,780 --> 00:01:39,070
them which allow public users to program

34
00:01:35,800 --> 00:01:40,649
their own<font color="#E5E5E5"> device on</font><font color="#CCCCCC"> a cloud-based PJ</font><font color="#E5E5E5"> and</font>

35
00:01:39,070 --> 00:01:43,360
furthermore there's been a lot of

36
00:01:40,650 --> 00:01:46,690
proposed work that has proposed

37
00:01:43,360 --> 00:01:50,470
virtualizing or sharing<font color="#CCCCCC"> a few</font><font color="#E5E5E5"> J's with</font>

38
00:01:46,690 --> 00:01:53,410
multiple users<font color="#E5E5E5"> so the prop the problem</font>

39
00:01:50,470 --> 00:01:55,960
that this proposes is the fact<font color="#E5E5E5"> that</font>

40
00:01:53,410 --> 00:01:58,810
users<font color="#E5E5E5"> have very fine-grained control</font>

41
00:01:55,960 --> 00:02:01,089
over the<font color="#E5E5E5"> FPGA hardware and this may</font>

42
00:01:58,810 --> 00:02:04,600
allow<font color="#E5E5E5"> some users to abuse circuit level</font>

43
00:02:01,090 --> 00:02:08,110
<font color="#E5E5E5">from vulnerabilities and an FPGA in this</font>

44
00:02:04,600 --> 00:02:10,628
paper or this<font color="#CCCCCC"> talk we show</font><font color="#E5E5E5"> how we can</font>

45
00:02:08,110 --> 00:02:13,330
<font color="#CCCCCC">use these vulnerabilities</font><font color="#E5E5E5"> to perform a</font>

46
00:02:10,628 --> 00:02:14,709
remote<font color="#E5E5E5"> power side channel attack in</font>

47
00:02:13,330 --> 00:02:17,800
other words without<font color="#E5E5E5"> any</font><font color="#CCCCCC"> physical</font>

48
00:02:14,709 --> 00:02:20,140
proximity to the device itself<font color="#E5E5E5"> so as an</font>

49
00:02:17,800 --> 00:02:22,300
outline for<font color="#E5E5E5"> this talk</font><font color="#CCCCCC"> I first will talk</font>

50
00:02:20,140 --> 00:02:25,750
about how we<font color="#E5E5E5"> can program such power</font>

51
00:02:22,300 --> 00:02:28,930
monitors on an FPGA device and I'll talk

52
00:02:25,750 --> 00:02:32,320
about<font color="#E5E5E5"> a</font><font color="#CCCCCC"> PJ</font><font color="#E5E5E5"> to FPGA power now</font>

53
00:02:28,930 --> 00:02:35,050
followed<font color="#CCCCCC"> by an</font><font color="#E5E5E5"> FPGA to CPU power</font><font color="#CCCCCC"> based</font>

54
00:02:32,320 --> 00:02:36,970
timing attack so just as a bit<font color="#CCCCCC"> of a</font>

55
00:02:35,050 --> 00:02:38,890
background<font color="#E5E5E5"> on power noiseless power</font>

56
00:02:36,970 --> 00:02:40,810
analysis attacks<font color="#CCCCCC"> a traditional power</font>

57
00:02:38,890 --> 00:02:42,970
analysis attack works like the figure on

58
00:02:40,810 --> 00:02:45,370
the<font color="#CCCCCC"> Left where an attacker is assumed to</font>

59
00:02:42,970 --> 00:02:47,830
<font color="#CCCCCC">have</font><font color="#E5E5E5"> full physical control over the</font>

60
00:02:45,370 --> 00:02:50,590
target<font color="#E5E5E5"> device the attacker then measures</font>

61
00:02:47,830 --> 00:02:52,810
a power consumption of the device using

62
00:02:50,590 --> 00:02:55,030
a lab bench oscilloscope<font color="#E5E5E5"> which then</font>

63
00:02:52,810 --> 00:02:57,610
gives him or her a trace<font color="#CCCCCC"> as shown on the</font>

64
00:02:55,030 --> 00:02:59,410
right<font color="#E5E5E5"> using this power trace the</font>

65
00:02:57,610 --> 00:03:01,630
attacker can<font color="#CCCCCC"> then infer confidential</font>

66
00:02:59,410 --> 00:03:05,880
information<font color="#CCCCCC"> that the device is</font>

67
00:03:01,630 --> 00:03:09,010
processing in contrast<font color="#E5E5E5"> our attack</font>

68
00:03:05,880 --> 00:03:12,250
<font color="#E5E5E5">assumes no physical proximity to an FPGA</font>

69
00:03:09,010 --> 00:03:15,880
<font color="#E5E5E5">we only need the ability to program an</font>

70
00:03:12,250 --> 00:03:18,010
FPGA and<font color="#CCCCCC"> how we do this is we build on</font>

71
00:03:15,880 --> 00:03:20,769
<font color="#E5E5E5">the fact that the propagation delay</font><font color="#CCCCCC"> of a</font>

72
00:03:18,010 --> 00:03:23,140
signal<font color="#CCCCCC"> throughout CMOS logic</font><font color="#E5E5E5"> reflects</font>

73
00:03:20,770 --> 00:03:26,620
the<font color="#E5E5E5"> power consumption of the full device</font>

74
00:03:23,140 --> 00:03:28,420
itself<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> because more power</font>

75
00:03:26,620 --> 00:03:31,440
consumption results<font color="#CCCCCC"> in more current flow</font>

76
00:03:28,420 --> 00:03:33,970
through the device<font color="#E5E5E5"> which then leads to</font>

77
00:03:31,440 --> 00:03:37,660
voltage drops in the power dish view

78
00:03:33,970 --> 00:03:40,840
<font color="#CCCCCC">network because of phenomenon called</font><font color="#E5E5E5"> IR</font>

79
00:03:37,660 --> 00:03:42,940
and di/dt voltage drops<font color="#E5E5E5"> now these</font>

80
00:03:40,840 --> 00:03:45,040
transient voltage fluctuations<font color="#E5E5E5"> then</font>

81
00:03:42,940 --> 00:03:51,370
change how fast signals propagate

82
00:03:45,040 --> 00:03:53,530
through CMOS logic<font color="#E5E5E5"> so our so we</font><font color="#CCCCCC"> show</font>

83
00:03:51,370 --> 00:03:55,780
<font color="#CCCCCC">that in our case we can</font><font color="#E5E5E5"> digitize these</font>

84
00:03:53,530 --> 00:04:00,130
propagation delay values using<font color="#CCCCCC"> a ring</font>

85
00:03:55,780 --> 00:04:02,020
oscillator<font color="#E5E5E5"> or</font><font color="#CCCCCC"> ro so the picture on the</font>

86
00:04:00,130 --> 00:04:03,940
bottom shows a ring oscillator<font color="#CCCCCC"> it is</font>

87
00:04:02,020 --> 00:04:05,440
simply a NAND<font color="#CCCCCC"> gate</font><font color="#E5E5E5"> connected to</font><font color="#CCCCCC"> an</font>

88
00:04:03,940 --> 00:04:08,050
<font color="#E5E5E5">inverter which</font><font color="#CCCCCC"> is then loops</font><font color="#E5E5E5"> back on</font>

89
00:04:05,440 --> 00:04:10,959
itself<font color="#CCCCCC"> so when the enable signal of the</font>

90
00:04:08,050 --> 00:04:14,080
<font color="#E5E5E5">RO</font><font color="#CCCCCC"> is 0 then the circuit is static</font><font color="#E5E5E5"> and</font>

91
00:04:10,959 --> 00:04:17,920
nothing happens<font color="#E5E5E5"> however</font><font color="#CCCCCC"> if we enable the</font>

92
00:04:14,080 --> 00:04:18,880
ring<font color="#CCCCCC"> oscillator</font><font color="#E5E5E5"> we see that every signal</font>

93
00:04:17,920 --> 00:04:21,760
propagates around the ring<font color="#E5E5E5"> oscillator</font>

94
00:04:18,880 --> 00:04:25,570
<font color="#CCCCCC">and every oscillation the output value</font>

95
00:04:21,760 --> 00:04:30,010
flips so if we just<font color="#E5E5E5"> simply look at the</font>

96
00:04:25,570 --> 00:04:32,770
output<font color="#CCCCCC"> it looks like a square wave</font><font color="#E5E5E5"> the</font>

97
00:04:30,010 --> 00:04:35,860
insight is if there<font color="#E5E5E5"> is more power</font>

98
00:04:32,770 --> 00:04:38,560
consumption<font color="#E5E5E5"> this</font><font color="#CCCCCC"> reels results in</font>

99
00:04:35,860 --> 00:04:41,470
reduction<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the supply voltage</font><font color="#CCCCCC"> and in</font>

100
00:04:38,560 --> 00:04:42,180
turn<font color="#E5E5E5"> this changes</font><font color="#CCCCCC"> how fast or actually</font>

101
00:04:41,470 --> 00:04:45,040
reduced

102
00:04:42,180 --> 00:04:47,020
<font color="#E5E5E5">how fast these ring</font><font color="#CCCCCC"> else</font><font color="#E5E5E5"> oscillators</font>

103
00:04:45,040 --> 00:04:50,980
<font color="#CCCCCC">oscillate and it will look like</font><font color="#E5E5E5"> the</font>

104
00:04:47,020 --> 00:04:53,289
square wave to the right so if we

105
00:04:50,980 --> 00:04:56,950
connect a ring oscillator<font color="#E5E5E5"> output to the</font>

106
00:04:53,290 --> 00:05:00,340
clock of an up counter<font color="#E5E5E5"> and we let this</font>

107
00:04:56,950 --> 00:05:02,590
counter run for say T seconds after T

108
00:05:00,340 --> 00:05:05,229
seconds if we read the outputs of<font color="#E5E5E5"> the</font>

109
00:05:02,590 --> 00:05:07,869
counter we have<font color="#CCCCCC"> a digitized value of our</font>

110
00:05:05,230 --> 00:05:09,880
propagation delay<font color="#E5E5E5"> so for example if the</font>

111
00:05:07,870 --> 00:05:10,900
voltage supply is high then we might

112
00:05:09,880 --> 00:05:13,380
<font color="#E5E5E5">have a count of four</font>

113
00:05:10,900 --> 00:05:16,299
<font color="#CCCCCC">and the as shown</font><font color="#E5E5E5"> on the top</font><font color="#CCCCCC"> if the</font>

114
00:05:13,380 --> 00:05:17,920
<font color="#E5E5E5">voltage supply is low which</font><font color="#CCCCCC"> means more</font>

115
00:05:16,300 --> 00:05:21,250
<font color="#E5E5E5">power consumption we might have a lower</font>

116
00:05:17,920 --> 00:05:24,160
counter value so just to show that<font color="#E5E5E5"> our</font>

117
00:05:21,250 --> 00:05:26,230
conjecture<font color="#E5E5E5"> works we implement a network</font>

118
00:05:24,160 --> 00:05:29,770
of<font color="#CCCCCC"> twenty ring oscillators on a</font><font color="#E5E5E5"> Zed</font>

119
00:05:26,230 --> 00:05:32,140
board or<font color="#E5E5E5"> a zinc</font><font color="#CCCCCC"> 7020</font><font color="#E5E5E5"> system on chip and</font>

120
00:05:29,770 --> 00:05:35,140
alongside those ring<font color="#CCCCCC"> oscillator power</font>

121
00:05:32,140 --> 00:05:37,570
monitors we implement<font color="#CCCCCC"> 16,000</font><font color="#E5E5E5"> instances</font>

122
00:05:35,140 --> 00:05:39,700
of a power virus circuit as shown<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

123
00:05:37,570 --> 00:05:41,530
<font color="#CCCCCC">right so</font><font color="#E5E5E5"> this part of our circuit is</font>

124
00:05:39,700 --> 00:05:45,070
pretty simple<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's since that if you</font>

125
00:05:41,530 --> 00:05:47,530
just<font color="#E5E5E5"> enable the signal then it consumes</font>

126
00:05:45,070 --> 00:05:51,520
dynamic power if you don't<font color="#E5E5E5"> enable it</font>

127
00:05:47,530 --> 00:05:54,789
<font color="#CCCCCC">then it doesn't do anything</font><font color="#E5E5E5"> and as you</font>

128
00:05:51,520 --> 00:05:56,890
can<font color="#E5E5E5"> see on the graph as we enable a</font>

129
00:05:54,790 --> 00:05:59,890
increasing amounts<font color="#E5E5E5"> of power virus</font>

130
00:05:56,890 --> 00:06:01,979
instances then the oscillation<font color="#CCCCCC"> frequency</font>

131
00:05:59,890 --> 00:06:04,390
of these ring oscillators would

132
00:06:01,980 --> 00:06:07,960
decreases linearly with<font color="#CCCCCC"> a pretty good</font>

133
00:06:04,390 --> 00:06:10,360
<font color="#E5E5E5">fit so now that we can implement</font><font color="#CCCCCC"> our own</font>

134
00:06:07,960 --> 00:06:13,330
<font color="#E5E5E5">remote power monitors let's see how</font>

135
00:06:10,360 --> 00:06:15,160
these can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> used for some attacks so as</font>

136
00:06:13,330 --> 00:06:17,919
I<font color="#E5E5E5"> mentioned</font><font color="#CCCCCC"> before there's been works</font>

137
00:06:15,160 --> 00:06:20,140
that proposed<font color="#E5E5E5"> virtualizing fvj so for</font>

138
00:06:17,920 --> 00:06:22,540
example we might have<font color="#CCCCCC"> a case as shown in</font>

139
00:06:20,140 --> 00:06:25,300
the figure<font color="#E5E5E5"> below in which</font><font color="#CCCCCC"> there is a</font>

140
00:06:22,540 --> 00:06:29,670
victim<font color="#CCCCCC"> that is ko Tana alongside an</font>

141
00:06:25,300 --> 00:06:32,890
attacker and<font color="#CCCCCC"> on one physical fpga device</font>

142
00:06:29,670 --> 00:06:35,680
so traditional isolation mechanisms in

143
00:06:32,890 --> 00:06:37,510
these FEG devices will prevent the

144
00:06:35,680 --> 00:06:39,820
attacker from<font color="#E5E5E5"> directly reading any</font>

145
00:06:37,510 --> 00:06:42,450
secret information processed by the

146
00:06:39,820 --> 00:06:45,010
victim<font color="#E5E5E5"> however through this side</font><font color="#CCCCCC"> Channel</font>

147
00:06:42,450 --> 00:06:47,080
<font color="#CCCCCC">is confidential information may lead to</font>

148
00:06:45,010 --> 00:06:52,450
<font color="#CCCCCC">the attacker and this isolation</font>

149
00:06:47,080 --> 00:06:55,430
<font color="#CCCCCC">mechanism is broken so to make this more</font>

150
00:06:52,450 --> 00:06:57,890
concrete<font color="#E5E5E5"> we demonstrate this by</font>

151
00:06:55,430 --> 00:07:00,920
implementing a 1024<font color="#E5E5E5"> bit RSA crypto</font>

152
00:06:57,890 --> 00:07:03,640
engine<font color="#E5E5E5"> on our FPGA which uses a square</font>

153
00:07:00,920 --> 00:07:07,520
multiply algorithm<font color="#E5E5E5"> so square multiply</font>

154
00:07:03,640 --> 00:07:10,039
iterates through all<font color="#CCCCCC"> 1024 bit key bits</font>

155
00:07:07,520 --> 00:07:12,080
in a for loop<font color="#E5E5E5"> and the key</font><font color="#CCCCCC"> and the</font><font color="#E5E5E5"> key</font>

156
00:07:10,040 --> 00:07:15,170
<font color="#E5E5E5">thing to</font><font color="#CCCCCC"> note is that in the red box if</font>

157
00:07:12,080 --> 00:07:17,300
that conditional is true<font color="#E5E5E5"> then our module</font>

158
00:07:15,170 --> 00:07:19,670
has<font color="#E5E5E5"> two multipliers computing at the</font>

159
00:07:17,300 --> 00:07:21,980
same time if that conditional is false

160
00:07:19,670 --> 00:07:24,700
<font color="#E5E5E5">then only one multiplier is running</font>

161
00:07:21,980 --> 00:07:27,200
which means less power is consumed<font color="#E5E5E5"> so</font>

162
00:07:24,700 --> 00:07:29,300
while we if we run this module

163
00:07:27,200 --> 00:07:31,310
explanation module on that<font color="#E5E5E5"> VGA and use</font>

164
00:07:29,300 --> 00:07:33,980
our ring oscillators<font color="#CCCCCC"> to record a power</font>

165
00:07:31,310 --> 00:07:36,800
trace<font color="#E5E5E5"> we see in the power trace to the</font>

166
00:07:33,980 --> 00:07:41,810
right that not only is every round of

167
00:07:36,800 --> 00:07:44,150
this RSA decryption visible but the

168
00:07:41,810 --> 00:07:45,680
actual bit value computed during<font color="#E5E5E5"> each</font>

169
00:07:44,150 --> 00:07:48,890
<font color="#E5E5E5">round is also visible meaning that a</font>

170
00:07:45,680 --> 00:07:53,920
simple power analysis or<font color="#E5E5E5"> SP attack</font><font color="#CCCCCC"> s.p.a</font>

171
00:07:48,890 --> 00:07:57,830
<font color="#E5E5E5">attack is perfectly viable now there are</font>

172
00:07:53,920 --> 00:08:00,410
potential<font color="#CCCCCC"> VJ security mechanisms that</font>

173
00:07:57,830 --> 00:08:02,780
have already been proposed<font color="#CCCCCC"> a prior work</font>

174
00:08:00,410 --> 00:08:04,970
has proposed<font color="#E5E5E5"> that an untrusted module</font>

175
00:08:02,780 --> 00:08:07,760
and a trusted module can<font color="#CCCCCC"> be isolated</font>

176
00:08:04,970 --> 00:08:11,780
physically by emotes<font color="#E5E5E5"> of unused logic</font>

177
00:08:07,760 --> 00:08:14,000
blocks<font color="#E5E5E5"> and we implement this scenario as</font>

178
00:08:11,780 --> 00:08:17,390
shown<font color="#CCCCCC"> in the picture below</font><font color="#E5E5E5"> and we call</font>

179
00:08:14,000 --> 00:08:19,880
it<font color="#E5E5E5"> I so alternatively a</font><font color="#CCCCCC"> datacenter</font>

180
00:08:17,390 --> 00:08:22,280
<font color="#CCCCCC">provider may restrict the user to</font><font color="#E5E5E5"> only</font>

181
00:08:19,880 --> 00:08:24,830
use RTL<font color="#CCCCCC"> and other words the user</font><font color="#E5E5E5"> cannot</font>

182
00:08:22,280 --> 00:08:26,119
define where they place their ring

183
00:08:24,830 --> 00:08:28,700
oscillator<font color="#CCCCCC"> x' they can't define them</font>

184
00:08:26,120 --> 00:08:31,760
routing between<font color="#E5E5E5"> any logic in their</font>

185
00:08:28,700 --> 00:08:36,080
circuit<font color="#E5E5E5"> we implement this in</font><font color="#CCCCCC"> denoted</font><font color="#E5E5E5"> as</font>

186
00:08:31,760 --> 00:08:40,520
no PR we show that in either case our

187
00:08:36,080 --> 00:08:43,610
attack is<font color="#CCCCCC"> still viable so as you can see</font>

188
00:08:40,520 --> 00:08:48,680
on our<font color="#E5E5E5"> paper we run</font><font color="#CCCCCC"> through we run ten</font>

189
00:08:43,610 --> 00:08:51,530
twenty ten 1024 bit keys<font color="#CCCCCC"> through our RSA</font>

190
00:08:48,680 --> 00:08:54,530
decryption<font color="#E5E5E5"> engine and we record an</font>

191
00:08:51,530 --> 00:08:55,970
automated<font color="#CCCCCC"> s.p.a attack on each key with</font>

192
00:08:54,530 --> 00:08:57,620
their baseline case where we have

193
00:08:55,970 --> 00:09:00,290
control<font color="#CCCCCC"> over</font><font color="#E5E5E5"> the placement and routing</font>

194
00:08:57,620 --> 00:09:04,280
of<font color="#CCCCCC"> o-ring oscillators it takes on</font>

195
00:09:00,290 --> 00:09:08,329
average<font color="#CCCCCC"> 3.7 traces to recover</font><font color="#E5E5E5"> all 10,000</font>

196
00:09:04,280 --> 00:09:11,988
<font color="#CCCCCC">23 1,024 bits</font><font color="#E5E5E5"> of old</font>

197
00:09:08,329 --> 00:09:14,479
keys<font color="#E5E5E5"> in our physical isolation case we</font>

198
00:09:11,989 --> 00:09:17,360
still only need<font color="#E5E5E5"> 8.9 traces on average to</font>

199
00:09:14,480 --> 00:09:20,769
recover fully recover<font color="#E5E5E5"> all bits of each</font>

200
00:09:17,360 --> 00:09:23,809
key and are no place in<font color="#CCCCCC"> Ralph's case we</font>

201
00:09:20,769 --> 00:09:27,079
that number increases to eleven point

202
00:09:23,809 --> 00:09:28,969
four<font color="#E5E5E5"> traces on average we can still see</font>

203
00:09:27,079 --> 00:09:33,019
that this is a relatively low number<font color="#CCCCCC"> of</font>

204
00:09:28,970 --> 00:09:36,470
traces<font color="#E5E5E5"> that is required to recover the</font>

205
00:09:33,019 --> 00:09:39,799
<font color="#CCCCCC">entire key</font><font color="#E5E5E5"> in all cases</font><font color="#CCCCCC"> so now that</font>

206
00:09:36,470 --> 00:09:42,679
we've talked<font color="#E5E5E5"> about</font><font color="#CCCCCC"> FPGAs fpga side</font>

207
00:09:39,799 --> 00:09:47,839
channel attacks<font color="#E5E5E5"> let's move on to a</font><font color="#CCCCCC"> cpu -</font>

208
00:09:42,679 --> 00:09:49,129
<font color="#CCCCCC">fpga</font><font color="#E5E5E5"> attack so a common device is an</font>

209
00:09:47,839 --> 00:09:53,689
<font color="#CCCCCC">fpga system-on-chip</font>

210
00:09:49,129 --> 00:09:57,410
and these<font color="#E5E5E5"> devices integrates a hardened</font>

211
00:09:53,689 --> 00:10:00,559
<font color="#CCCCCC">cpu</font><font color="#E5E5E5"> i'm commonly an ARM based cpu onto</font>

212
00:09:57,410 --> 00:10:03,009
the same silicon die as reprogrammable

213
00:10:00,559 --> 00:10:05,749
<font color="#E5E5E5">fpga fabric</font>

214
00:10:03,009 --> 00:10:08,389
unfortunately these devices commonly

215
00:10:05,749 --> 00:10:10,610
share voltage regulator<font color="#E5E5E5"> which means that</font>

216
00:10:08,389 --> 00:10:12,829
the<font color="#E5E5E5"> CPUs power consumption exact is</font>

217
00:10:10,610 --> 00:10:16,639
actually<font color="#E5E5E5"> visible from the fpga device</font>

218
00:10:12,829 --> 00:10:19,399
itself<font color="#E5E5E5"> so for</font><font color="#CCCCCC"> example if we implement a</font>

219
00:10:16,639 --> 00:10:22,309
secure string pair algorithm<font color="#CCCCCC"> or process</font>

220
00:10:19,399 --> 00:10:25,100
on one core of the<font color="#E5E5E5"> CPU and we assume</font>

221
00:10:22,309 --> 00:10:27,499
that attacker has control<font color="#CCCCCC"> over</font><font color="#E5E5E5"> another</font>

222
00:10:25,100 --> 00:10:31,850
core of the<font color="#E5E5E5"> CPU alongside a portion</font><font color="#CCCCCC"> of</font>

223
00:10:27,499 --> 00:10:34,040
the<font color="#E5E5E5"> fpga fabric traditional isolation</font>

224
00:10:31,850 --> 00:10:37,369
mechanisms prevent any information from

225
00:10:34,040 --> 00:10:39,860
leaking directly from the string compare

226
00:10:37,369 --> 00:10:42,519
process<font color="#E5E5E5"> to the attackers core however</font>

227
00:10:39,860 --> 00:10:45,589
through this voltage regulator<font color="#E5E5E5"> the</font>

228
00:10:42,519 --> 00:10:48,739
activity<font color="#E5E5E5"> of core 1 in this</font><font color="#CCCCCC"> case is</font>

229
00:10:45,589 --> 00:10:50,389
leaked to the<font color="#CCCCCC"> fpga logic which then is</font>

230
00:10:48,739 --> 00:10:53,540
then directly communicated to the

231
00:10:50,389 --> 00:10:56,179
attackers<font color="#CCCCCC"> CPU core which thus reveals</font>

232
00:10:53,540 --> 00:10:59,149
the power consumption<font color="#E5E5E5"> of the string</font>

233
00:10:56,179 --> 00:11:01,220
<font color="#CCCCCC">compare process and more so we can</font><font color="#E5E5E5"> see</font>

234
00:10:59,149 --> 00:11:05,689
that timing<font color="#E5E5E5"> information is leaked</font>

235
00:11:01,220 --> 00:11:08,839
through<font color="#E5E5E5"> the CPU</font><font color="#CCCCCC"> activity itself</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

236
00:11:05,689 --> 00:11:11,899
<font color="#CCCCCC">important because timing side channel</font>

237
00:11:08,839 --> 00:11:15,919
attacks generally are built on

238
00:11:11,899 --> 00:11:17,779
variations<font color="#CCCCCC"> in timing</font><font color="#E5E5E5"> and countermeasures</font>

239
00:11:15,919 --> 00:11:19,879
generally assumed<font color="#E5E5E5"> that if computations</font>

240
00:11:17,779 --> 00:11:20,870
are observably constant time<font color="#CCCCCC"> then</font>

241
00:11:19,879 --> 00:11:23,350
there's no timing<font color="#CCCCCC"> there for me</font>

242
00:11:20,870 --> 00:11:25,790
leakage however these<font color="#CCCCCC"> countermeasures</font>

243
00:11:23,350 --> 00:11:29,089
<font color="#E5E5E5">frequently do not consider information</font><font color="#CCCCCC"> a</font>

244
00:11:25,790 --> 00:11:32,180
<font color="#CCCCCC">leak through CPU activity</font><font color="#E5E5E5"> itself so we</font>

245
00:11:29,089 --> 00:11:34,970
can see how more concretely<font color="#E5E5E5"> by</font>

246
00:11:32,180 --> 00:11:38,120
implementing a RSA the same RSA<font color="#CCCCCC"> a square</font>

247
00:11:34,970 --> 00:11:40,730
<font color="#E5E5E5">multiply algorithm but in software</font><font color="#CCCCCC"> and</font>

248
00:11:38,120 --> 00:11:43,339
in our case we mitigate timing channels

249
00:11:40,730 --> 00:11:44,990
by delaying<font color="#E5E5E5"> each iteration loop of the</font>

250
00:11:43,339 --> 00:11:47,089
square multiply algorithm to the worst

251
00:11:44,990 --> 00:11:51,440
case where the conditional statement<font color="#CCCCCC"> is</font>

252
00:11:47,089 --> 00:11:55,040
true so<font color="#E5E5E5"> we can see in the in the power</font>

253
00:11:51,440 --> 00:11:56,690
trace an attacker can<font color="#E5E5E5"> record a power</font>

254
00:11:55,040 --> 00:12:03,020
trace of the<font color="#E5E5E5"> CPU consumption in this</font>

255
00:11:56,690 --> 00:12:04,610
case we show a 32<font color="#CCCCCC"> chunks of 32</font>

256
00:12:03,020 --> 00:12:07,189
iterations of<font color="#E5E5E5"> The Scream else while loop</font>

257
00:12:04,610 --> 00:12:10,390
in this case it's 16 zeros followed by

258
00:12:07,190 --> 00:12:13,250
<font color="#CCCCCC">16</font><font color="#E5E5E5"> ones not only can you see each</font>

259
00:12:10,390 --> 00:12:16,730
iteration of<font color="#E5E5E5"> the square</font><font color="#CCCCCC"> multiply loop</font>

260
00:12:13,250 --> 00:12:21,020
visibly you can also see visibly see the

261
00:12:16,730 --> 00:12:24,230
bit value process<font color="#CCCCCC"> during each round thus</font>

262
00:12:21,020 --> 00:12:27,949
leaking<font color="#E5E5E5"> the seer key used by the RSA</font>

263
00:12:24,230 --> 00:12:30,050
square<font color="#E5E5E5"> multiply process so our paper</font>

264
00:12:27,950 --> 00:12:31,430
also<font color="#E5E5E5"> shows that the ring oscillator is</font>

265
00:12:30,050 --> 00:12:34,010
not the<font color="#E5E5E5"> only way that we can exploit</font>

266
00:12:31,430 --> 00:12:36,410
this side<font color="#E5E5E5"> channel we implement</font><font color="#CCCCCC"> aids of</font>

267
00:12:34,010 --> 00:12:37,850
<font color="#CCCCCC">ley-line based power monitor as shown</font>

268
00:12:36,410 --> 00:12:39,709
and<font color="#CCCCCC"> figures have left</font><font color="#E5E5E5"> for the sake of</font>

269
00:12:37,850 --> 00:12:43,490
time<font color="#E5E5E5"> I not gonna explain how that</font><font color="#CCCCCC"> works</font>

270
00:12:39,709 --> 00:12:47,650
but we show that the same attack can<font color="#E5E5E5"> be</font>

271
00:12:43,490 --> 00:12:50,300
performed on RSA a concurrent work<font color="#CCCCCC"> tours</font>

272
00:12:47,650 --> 00:12:53,470
uses these<font color="#CCCCCC"> ley-line based power monitor</font>

273
00:12:50,300 --> 00:12:57,529
<font color="#E5E5E5">where similar one to</font><font color="#CCCCCC"> implement a similar</font>

274
00:12:53,470 --> 00:12:59,839
power analysis attack on<font color="#E5E5E5"> AES</font><font color="#CCCCCC"> and finally</font>

275
00:12:57,529 --> 00:13:02,120
another concurrent work demonstrates a

276
00:12:59,839 --> 00:13:04,940
<font color="#E5E5E5">crosstalk based attack which uses</font>

277
00:13:02,120 --> 00:13:11,180
adjacently routed long wires<font color="#E5E5E5"> to perform</font>

278
00:13:04,940 --> 00:13:13,400
<font color="#E5E5E5">a attack on AES so the question is</font>

279
00:13:11,180 --> 00:13:15,620
remains that what can we do<font color="#CCCCCC"> about these</font>

280
00:13:13,400 --> 00:13:18,110
side channels<font color="#E5E5E5"> these side channel attacks</font>

281
00:13:15,620 --> 00:13:20,029
well there are has<font color="#E5E5E5"> been a lot of work</font>

282
00:13:18,110 --> 00:13:22,730
that<font color="#CCCCCC"> has studied traditional</font><font color="#E5E5E5"> power</font>

283
00:13:20,029 --> 00:13:26,120
<font color="#E5E5E5">analysis countermeasures for</font><font color="#CCCCCC"> example we</font>

284
00:13:22,730 --> 00:13:29,089
can mask or hide the power trace of a

285
00:13:26,120 --> 00:13:30,890
confidential module<font color="#E5E5E5"> however this incurs</font>

286
00:13:29,089 --> 00:13:33,089
added overhead<font color="#E5E5E5"> especially in case of</font>

287
00:13:30,890 --> 00:13:35,730
physically secure systems

288
00:13:33,089 --> 00:13:39,990
such as data centers that<font color="#E5E5E5"> data centers</font>

289
00:13:35,730 --> 00:13:42,689
did not previously<font color="#E5E5E5"> have to pay secondly</font>

290
00:13:39,990 --> 00:13:44,730
unique to data centers<font color="#CCCCCC"> data center</font>

291
00:13:42,689 --> 00:13:47,759
providers can analyze the netlist<font color="#E5E5E5"> and</font>

292
00:13:44,730 --> 00:13:51,180
<font color="#CCCCCC">bitstreams of incoming untrusted users</font>

293
00:13:47,759 --> 00:13:52,980
<font color="#E5E5E5">to detect</font><font color="#CCCCCC"> bring oscillators</font><font color="#E5E5E5"> ring</font>

294
00:13:51,180 --> 00:13:55,109
oscillators or<font color="#E5E5E5"> carry</font><font color="#CCCCCC"> changes</font><font color="#E5E5E5"> and delay</font>

295
00:13:52,980 --> 00:13:57,509
lines<font color="#E5E5E5"> however there are legitimate uses</font>

296
00:13:55,110 --> 00:14:00,809
<font color="#E5E5E5">for ring oscillators such as physically</font>

297
00:13:57,509 --> 00:14:03,300
on cloneable functions and long delay

298
00:14:00,809 --> 00:14:05,339
lines look pretty much like long<font color="#CCCCCC"> add or</font>

299
00:14:03,300 --> 00:14:07,050
chains and furthermore analyzing these

300
00:14:05,339 --> 00:14:10,949
netlist<font color="#E5E5E5"> is pretty computationally</font>

301
00:14:07,050 --> 00:14:13,920
intensive finally there is option of

302
00:14:10,949 --> 00:14:16,469
<font color="#E5E5E5">simply not sharing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> VGA</font><font color="#CCCCCC"> however this</font>

303
00:14:13,920 --> 00:14:19,378
is a imperfect allocation of resources

304
00:14:16,470 --> 00:14:21,899
<font color="#E5E5E5">from users to actual physical</font><font color="#CCCCCC"> fpga</font>

305
00:14:19,379 --> 00:14:25,319
devices and furthermore this doesn't

306
00:14:21,899 --> 00:14:28,649
really solve the<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> of the current</font>

307
00:14:25,319 --> 00:14:31,319
case we have a user taking a lot<font color="#CCCCCC"> of</font>

308
00:14:28,649 --> 00:14:33,480
<font color="#E5E5E5">different IP cores as from third parties</font>

309
00:14:31,319 --> 00:14:35,759
<font color="#E5E5E5">all of them are not necessarily trusted</font>

310
00:14:33,480 --> 00:14:38,519
in integrating<font color="#CCCCCC"> AI into their final</font>

311
00:14:35,759 --> 00:14:44,850
<font color="#E5E5E5">design</font><font color="#CCCCCC"> and this still does</font><font color="#E5E5E5"> not solve</font>

312
00:14:38,519 --> 00:14:47,240
that problem<font color="#E5E5E5"> so thus we believe further</font>

313
00:14:44,850 --> 00:14:50,759
amount of work is<font color="#CCCCCC"> required in this field</font>

314
00:14:47,240 --> 00:14:53,790
<font color="#E5E5E5">so in conclusion we show that a</font><font color="#CCCCCC"> pj</font>

315
00:14:50,759 --> 00:14:56,519
fabric can be<font color="#E5E5E5"> used to build multiple</font>

316
00:14:53,790 --> 00:14:59,009
different types<font color="#E5E5E5"> of</font><font color="#CCCCCC"> on chip our monitors</font>

317
00:14:56,519 --> 00:15:02,189
these power monitors are able to<font color="#CCCCCC"> be</font>

318
00:14:59,009 --> 00:15:03,809
<font color="#E5E5E5">programs on</font><font color="#CCCCCC"> fu JS directly or with no</font>

319
00:15:02,189 --> 00:15:06,660
physical<font color="#CCCCCC"> proximity directly through</font>

320
00:15:03,809 --> 00:15:09,540
<font color="#E5E5E5">software and these power monitors are</font>

321
00:15:06,660 --> 00:15:10,829
able to<font color="#CCCCCC"> be used to perform remote side</font>

322
00:15:09,540 --> 00:15:13,860
channel attacks as well as<font color="#CCCCCC"> coverage</font>

323
00:15:10,829 --> 00:15:17,519
channel checks and not only can<font color="#E5E5E5"> they be</font>

324
00:15:13,860 --> 00:15:21,420
<font color="#CCCCCC">used</font><font color="#E5E5E5"> to attack neighboring logic on the</font>

325
00:15:17,519 --> 00:15:25,620
same<font color="#E5E5E5"> fvj device but and we show that</font>

326
00:15:21,420 --> 00:15:26,579
they<font color="#E5E5E5"> can attack other components in</font><font color="#CCCCCC"> fpga</font>

327
00:15:25,620 --> 00:15:29,160
<font color="#CCCCCC">system-on-chip</font>

328
00:15:26,579 --> 00:15:31,189
so thank you<font color="#E5E5E5"> for your time and I'm happy</font>

329
00:15:29,160 --> 00:15:37,930
<font color="#CCCCCC">to take any questions</font>

330
00:15:31,190 --> 00:15:40,130
[Applause]

331
00:15:37,930 --> 00:15:41,479
right thanks<font color="#E5E5E5"> for your talk</font>

332
00:15:40,130 --> 00:15:46,939
are you sure you haven't given a talk

333
00:15:41,480 --> 00:15:48,920
before<font color="#CCCCCC"> impressive work again questions</font>

334
00:15:46,940 --> 00:15:53,210
<font color="#E5E5E5">please come to the mic state</font><font color="#CCCCCC"> name and</font>

335
00:15:48,920 --> 00:15:56,329
affiliation Matthew Hicks<font color="#CCCCCC"> Virginia Tech</font>

336
00:15:53,210 --> 00:15:58,490
great talk<font color="#E5E5E5"> as Kevin said great paper as</font>

337
00:15:56,330 --> 00:16:00,800
well or<font color="#CCCCCC"> enjoyed reading it</font><font color="#E5E5E5"> thank you</font>

338
00:15:58,490 --> 00:16:03,320
we're in an interesting<font color="#E5E5E5"> time where</font>

339
00:16:00,800 --> 00:16:06,400
<font color="#E5E5E5">companies like Intel are now</font><font color="#CCCCCC"> going to</font>

340
00:16:03,320 --> 00:16:09,920
sell Xeon chips<font color="#E5E5E5"> with integrated FPGAs</font><font color="#CCCCCC"> on</font>

341
00:16:06,400 --> 00:16:13,819
the processor itself<font color="#CCCCCC"> right how do you</font>

342
00:16:09,920 --> 00:16:15,319
think<font color="#E5E5E5"> your work impacts you know regular</font>

343
00:16:13,820 --> 00:16:17,960
<font color="#E5E5E5">operating system tasks where have an</font>

344
00:16:15,320 --> 00:16:21,170
underprivileged process<font color="#E5E5E5"> now running can</font>

345
00:16:17,960 --> 00:16:22,640
it spy on<font color="#CCCCCC"> SGX enclave processes the</font>

346
00:16:21,170 --> 00:16:24,829
operating in itself can it's<font color="#E5E5E5"> about</font>

347
00:16:22,640 --> 00:16:27,410
impact these things using the techniques

348
00:16:24,830 --> 00:16:29,620
described to your paper<font color="#E5E5E5"> right so yeah I</font>

349
00:16:27,410 --> 00:16:34,520
definitely<font color="#CCCCCC"> think that is a huge concern</font>

350
00:16:29,620 --> 00:16:36,080
there are so I<font color="#E5E5E5"> think our insight is not</font>

351
00:16:34,520 --> 00:16:38,150
the fact that you know you can just<font color="#E5E5E5"> do</font>

352
00:16:36,080 --> 00:16:39,410
an<font color="#E5E5E5"> SP a attack but the fact that this</font>

353
00:16:38,150 --> 00:16:40,939
side<font color="#E5E5E5"> channel can enable a lot more</font>

354
00:16:39,410 --> 00:16:42,740
different<font color="#E5E5E5"> attacks so we need covert</font>

355
00:16:40,940 --> 00:16:45,620
channel attacks we can do for example<font color="#E5E5E5"> as</font>

356
00:16:42,740 --> 00:16:47,690
<font color="#CCCCCC">you said</font><font color="#E5E5E5"> attack us</font><font color="#CCCCCC"> tree X</font><font color="#E5E5E5"> we can use it</font>

357
00:16:45,620 --> 00:16:49,460
<font color="#E5E5E5">for</font><font color="#CCCCCC"> example identify what program is</font>

358
00:16:47,690 --> 00:16:51,640
<font color="#CCCCCC">running on a process which may in</font>

359
00:16:49,460 --> 00:16:55,970
<font color="#CCCCCC">compromised virtual machines for example</font>

360
00:16:51,640 --> 00:16:58,760
<font color="#CCCCCC">and yeah I think</font><font color="#E5E5E5"> there's a lot</font><font color="#CCCCCC"> more work</font>

361
00:16:55,970 --> 00:17:02,180
<font color="#CCCCCC">to</font><font color="#E5E5E5"> be done</font><font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to kind of solve</font>

362
00:16:58,760 --> 00:17:04,520
this integrating a few<font color="#E5E5E5"> Jade devices and</font>

363
00:17:02,180 --> 00:17:06,409
furthermore there's also work on<font color="#E5E5E5"> for</font>

364
00:17:04,520 --> 00:17:08,389
<font color="#CCCCCC">example</font><font color="#E5E5E5"> mobile devices where</font><font color="#CCCCCC"> efi</font><font color="#E5E5E5"> J's are</font>

365
00:17:06,410 --> 00:17:09,860
being integrated<font color="#E5E5E5"> or have been proposed</font>

366
00:17:08,390 --> 00:17:13,160
<font color="#CCCCCC">to be</font><font color="#E5E5E5"> integrated</font><font color="#CCCCCC"> to multiply mobile</font>

367
00:17:09,859 --> 00:17:15,139
devices which again is concerned<font color="#CCCCCC"> I don't</font>

368
00:17:13,160 --> 00:17:17,900
<font color="#CCCCCC">really know what the solution is that</font><font color="#E5E5E5"> is</font>

369
00:17:15,140 --> 00:17:22,100
but<font color="#CCCCCC"> that's why I think</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> more work</font>

370
00:17:17,900 --> 00:17:25,210
needs to<font color="#E5E5E5"> be done this field all right</font>

371
00:17:22,099 --> 00:17:25,209
any<font color="#CCCCCC"> other questions</font>

372
00:17:25,990 --> 00:17:30,820
<font color="#CCCCCC">okay well let's think mark Egan thank</font>

373
00:17:28,670 --> 00:17:30,820
you

