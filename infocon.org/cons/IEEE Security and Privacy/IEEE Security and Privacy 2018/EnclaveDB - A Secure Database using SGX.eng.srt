1
00:00:07,760 --> 00:00:14,570
well<font color="#E5E5E5"> okay our first paper is</font>

2
00:00:12,110 --> 00:00:15,160
database using<font color="#E5E5E5"> as</font><font color="#CCCCCC"> triack's the presenter</font>

3
00:00:14,570 --> 00:00:18,220
is

4
00:00:15,160 --> 00:00:25,509
<font color="#CCCCCC">Kapila from microsoft research let's</font>

5
00:00:18,220 --> 00:00:28,540
<font color="#E5E5E5">welcome out</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> welcome our speaker thank</font>

6
00:00:25,510 --> 00:00:31,960
<font color="#E5E5E5">you so my name is kuba sunny hello and</font>

7
00:00:28,540 --> 00:00:34,200
welcome<font color="#CCCCCC"> my talk</font><font color="#E5E5E5"> today is going to be is</font>

8
00:00:31,960 --> 00:00:37,870
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to be about Enclave DB which is</font>

9
00:00:34,200 --> 00:00:40,510
<font color="#E5E5E5">secure database</font><font color="#CCCCCC"> that's fully</font><font color="#E5E5E5"> functional</font>

10
00:00:37,870 --> 00:00:42,129
offers full<font color="#E5E5E5"> sequence functionality has</font>

11
00:00:40,510 --> 00:00:44,370
strong security properties and<font color="#CCCCCC"> has</font><font color="#E5E5E5"> been</font>

12
00:00:42,129 --> 00:00:47,140
designed<font color="#E5E5E5"> specifically using</font><font color="#CCCCCC"> STX enclaves</font>

13
00:00:44,370 --> 00:00:48,879
<font color="#CCCCCC">this is joint work with christian pre</font>

14
00:00:47,140 --> 00:00:51,400
from University College<font color="#CCCCCC"> of London and my</font>

15
00:00:48,879 --> 00:00:55,110
colleague many<font color="#CCCCCC"> L poster from Microsoft</font>

16
00:00:51,400 --> 00:00:58,239
Research so before I talk<font color="#E5E5E5"> about on KBB</font>

17
00:00:55,110 --> 00:00:59,379
<font color="#CCCCCC">let me first describe what we mean by a</font>

18
00:00:58,239 --> 00:01:00,970
database being<font color="#E5E5E5"> secure</font>

19
00:00:59,379 --> 00:01:03,250
what does security mean in the context

20
00:01:00,970 --> 00:01:04,690
of a database<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we believe</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> a</font>

21
00:01:03,250 --> 00:01:07,000
secure<font color="#CCCCCC"> database should offer the</font>

22
00:01:04,690 --> 00:01:08,610
following security<font color="#E5E5E5"> guarantees so we</font>

23
00:01:07,000 --> 00:01:11,530
<font color="#E5E5E5">expect the database to protect all</font>

24
00:01:08,610 --> 00:01:13,570
sensitive data and provide

25
00:01:11,530 --> 00:01:15,670
confidentiality for both queries<font color="#E5E5E5"> and for</font>

26
00:01:13,570 --> 00:01:18,148
data and this<font color="#E5E5E5"> is important</font><font color="#CCCCCC"> because in</font>

27
00:01:15,670 --> 00:01:21,430
their large number of<font color="#E5E5E5"> applications where</font>

28
00:01:18,149 --> 00:01:23,289
the queries for applications<font color="#E5E5E5"> like high</font>

29
00:01:21,430 --> 00:01:25,930
frequency trading where the queries are

30
00:01:23,289 --> 00:01:28,750
<font color="#CCCCCC">probably more sensitive if not equally</font>

31
00:01:25,930 --> 00:01:30,640
as sensitive as<font color="#CCCCCC"> the data itself</font><font color="#E5E5E5"> we</font>

32
00:01:28,750 --> 00:01:32,890
expect the database to protect data and

33
00:01:30,640 --> 00:01:33,939
queries from from<font color="#E5E5E5"> hackers who might have</font>

34
00:01:32,890 --> 00:01:36,520
compromised the system and have

35
00:01:33,939 --> 00:01:38,048
privileged<font color="#E5E5E5"> access but we also expect the</font>

36
00:01:36,520 --> 00:01:39,789
database to protect the<font color="#E5E5E5"> data from</font>

37
00:01:38,049 --> 00:01:41,380
database admins and server

38
00:01:39,789 --> 00:01:43,990
administrators and<font color="#E5E5E5"> this is increasingly</font>

39
00:01:41,380 --> 00:01:46,420
important in a<font color="#CCCCCC"> cloud-like environment</font>

40
00:01:43,990 --> 00:01:49,359
where these tasks like<font color="#E5E5E5"> a database admin</font>

41
00:01:46,420 --> 00:01:51,369
<font color="#CCCCCC">task is being increasingly outsourced to</font>

42
00:01:49,359 --> 00:01:54,189
third parties who we<font color="#E5E5E5"> don't want may not</font>

43
00:01:51,369 --> 00:01:57,429
want<font color="#E5E5E5"> to trust and to</font><font color="#CCCCCC"> defend against</font>

44
00:01:54,189 --> 00:01:59,169
attacks<font color="#E5E5E5"> like insider attacks we also</font>

45
00:01:57,429 --> 00:02:01,420
want the database to support<font color="#E5E5E5"> advanced</font>

46
00:01:59,170 --> 00:02:05,259
security features<font color="#E5E5E5"> like</font><font color="#CCCCCC"> one-line</font><font color="#E5E5E5"> rotation</font>

47
00:02:01,420 --> 00:02:07,509
and revocation of<font color="#E5E5E5"> encryption keys but</font>

48
00:02:05,259 --> 00:02:09,220
beyond<font color="#E5E5E5"> confidentiality will also expect</font>

49
00:02:07,509 --> 00:02:11,410
<font color="#E5E5E5">our databases to give us integrity and</font>

50
00:02:09,220 --> 00:02:13,000
freshness<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is extremely</font>

51
00:02:11,410 --> 00:02:16,060
important in<font color="#CCCCCC"> applications like</font><font color="#E5E5E5"> online</font>

52
00:02:13,000 --> 00:02:17,530
<font color="#E5E5E5">voting and online auctions and what we</font>

53
00:02:16,060 --> 00:02:19,870
mean by integrity and freshness<font color="#E5E5E5"> is that</font>

54
00:02:17,530 --> 00:02:23,220
we expect<font color="#CCCCCC"> the transactions</font><font color="#E5E5E5"> we submit</font><font color="#CCCCCC"> to</font>

55
00:02:19,870 --> 00:02:26,290
a database<font color="#E5E5E5"> to obey the sequel semantics</font>

56
00:02:23,220 --> 00:02:28,319
<font color="#CCCCCC">and</font><font color="#E5E5E5"> also we expect</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the transactions</font>

57
00:02:26,290 --> 00:02:30,629
<font color="#E5E5E5">to execute in an order</font>

58
00:02:28,319 --> 00:02:31,980
that that that respects the consistency

59
00:02:30,629 --> 00:02:35,268
<font color="#E5E5E5">property is that the data database</font>

60
00:02:31,980 --> 00:02:37,649
promises<font color="#E5E5E5"> for example serializability</font><font color="#CCCCCC"> and</font>

61
00:02:35,269 --> 00:02:39,450
we also expect<font color="#CCCCCC"> the database to never</font>

62
00:02:37,650 --> 00:02:42,709
lose transactions and that's why we we

63
00:02:39,450 --> 00:02:42,708
want the database<font color="#E5E5E5"> to guarantee freshness</font>

64
00:02:42,950 --> 00:02:47,879
<font color="#CCCCCC">we also want the database</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> have a</font>

65
00:02:45,239 --> 00:02:49,170
small trusted computing base<font color="#CCCCCC"> full</font>

66
00:02:47,879 --> 00:02:51,780
<font color="#E5E5E5">sequence functionality and good</font>

67
00:02:49,170 --> 00:02:55,048
performance<font color="#CCCCCC"> and as far as the as far</font><font color="#E5E5E5"> as</font>

68
00:02:51,780 --> 00:02:56,819
<font color="#CCCCCC">as we know none of</font><font color="#E5E5E5"> the previous database</font>

69
00:02:55,049 --> 00:02:59,219
solutions<font color="#E5E5E5"> offer all</font><font color="#CCCCCC"> of these properties</font>

70
00:02:56,819 --> 00:03:01,768
<font color="#E5E5E5">for</font><font color="#CCCCCC"> example encrypted databases offer</font>

71
00:02:59,219 --> 00:03:03,269
some form<font color="#CCCCCC"> of confidentiality but</font><font color="#E5E5E5"> don't</font>

72
00:03:01,769 --> 00:03:06,989
offer integrity and freshness<font color="#E5E5E5"> and don't</font>

73
00:03:03,269 --> 00:03:09,209
offer full sequel functionality so

74
00:03:06,989 --> 00:03:11,489
here's the<font color="#CCCCCC"> outline of</font><font color="#E5E5E5"> my talk I'll first</font>

75
00:03:09,209 --> 00:03:13,199
describe Enclave DB and its architecture

76
00:03:11,489 --> 00:03:15,359
<font color="#E5E5E5">and I'll describe some</font><font color="#CCCCCC"> of the code</font>

77
00:03:13,199 --> 00:03:18,359
design decisions that<font color="#E5E5E5"> help us guarantee</font>

78
00:03:15,359 --> 00:03:20,400
get the<font color="#E5E5E5"> strong security properties I'll</font>

79
00:03:18,359 --> 00:03:23,370
describe the<font color="#E5E5E5"> transaction API that the</font>

80
00:03:20,400 --> 00:03:25,620
database exposes<font color="#CCCCCC"> and I'll talk about a</font>

81
00:03:23,370 --> 00:03:28,859
key component<font color="#E5E5E5"> of Enclave DB which is a</font>

82
00:03:25,620 --> 00:03:30,780
<font color="#E5E5E5">high performance protocol for ensuring</font>

83
00:03:28,859 --> 00:03:32,609
<font color="#CCCCCC">the integrity</font><font color="#E5E5E5"> and freshness of the</font>

84
00:03:30,780 --> 00:03:35,639
checkpoint<font color="#E5E5E5"> and the database transaction</font>

85
00:03:32,609 --> 00:03:37,560
log and finally I'll evaluate<font color="#E5E5E5"> I'll</font>

86
00:03:35,639 --> 00:03:41,150
present a quick<font color="#CCCCCC"> evaluation of the</font><font color="#E5E5E5"> system</font>

87
00:03:37,560 --> 00:03:44,689
and and and finish by some conclusions

88
00:03:41,150 --> 00:03:47,699
so what does unclear DB look like so

89
00:03:44,689 --> 00:03:50,040
<font color="#E5E5E5">announce a PB in Enclave DB the database</font>

90
00:03:47,699 --> 00:03:52,259
is composed of server-side and

91
00:03:50,040 --> 00:03:54,840
client-side components<font color="#E5E5E5"> on the server</font>

92
00:03:52,259 --> 00:03:58,168
<font color="#CCCCCC">side we have an untrusted sequel server</font>

93
00:03:54,840 --> 00:03:59,729
instance<font color="#E5E5E5"> database instance that is</font>

94
00:03:58,169 --> 00:04:02,729
<font color="#E5E5E5">responsible</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> managing</font><font color="#CCCCCC"> and running</font>

95
00:03:59,729 --> 00:04:04,650
<font color="#CCCCCC">queries on all public data but</font><font color="#E5E5E5"> this</font>

96
00:04:02,729 --> 00:04:06,180
sequel server instance is is going<font color="#E5E5E5"> to</font>

97
00:04:04,650 --> 00:04:08,849
<font color="#E5E5E5">create an enclave it's modified to</font>

98
00:04:06,180 --> 00:04:11,099
<font color="#CCCCCC">create an enclave and host</font><font color="#E5E5E5"> all sensitive</font>

99
00:04:08,849 --> 00:04:12,569
data inside the<font color="#E5E5E5"> Enclave along with an</font>

100
00:04:11,099 --> 00:04:14,629
in-memory query engine<font color="#E5E5E5"> that's</font>

101
00:04:12,569 --> 00:04:17,430
responsible for<font color="#CCCCCC"> processing</font><font color="#E5E5E5"> queries on</font>

102
00:04:14,629 --> 00:04:18,930
<font color="#CCCCCC">sensitive</font><font color="#E5E5E5"> data the in-memory query</font>

103
00:04:17,430 --> 00:04:21,690
<font color="#E5E5E5">engine also has</font><font color="#CCCCCC"> a transaction manager</font>

104
00:04:18,930 --> 00:04:22,710
that's responsible for serializing<font color="#E5E5E5"> for</font>

105
00:04:21,690 --> 00:04:27,120
doing concurrency control<font color="#E5E5E5"> and</font>

106
00:04:22,710 --> 00:04:30,120
<font color="#CCCCCC">serializing these transactions the whole</font>

107
00:04:27,120 --> 00:04:32,219
server uses a shared<font color="#E5E5E5"> log a database log</font>

108
00:04:30,120 --> 00:04:33,990
for serializing<font color="#E5E5E5"> transactions and</font>

109
00:04:32,219 --> 00:04:36,300
persisting them<font color="#E5E5E5"> for recovering from</font>

110
00:04:33,990 --> 00:04:39,510
failures the whole logging component in

111
00:04:36,300 --> 00:04:41,159
Enclave baby is completely untrusted on

112
00:04:39,510 --> 00:04:42,180
the<font color="#E5E5E5"> client side we have a key management</font>

113
00:04:41,159 --> 00:04:44,340
<font color="#E5E5E5">service</font>

114
00:04:42,180 --> 00:04:46,320
<font color="#E5E5E5">we're users who create an unsafe DB</font>

115
00:04:44,340 --> 00:04:49,590
instance<font color="#CCCCCC"> upload their encryption keys</font>

116
00:04:46,320 --> 00:04:51,510
with a<font color="#E5E5E5"> policy</font><font color="#CCCCCC"> that defines the</font><font color="#E5E5E5"> exact</font>

117
00:04:49,590 --> 00:04:53,460
enclaves<font color="#E5E5E5"> that the keys can be released</font>

118
00:04:51,510 --> 00:04:56,219
<font color="#E5E5E5">to and these are keys</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> will be used</font>

119
00:04:53,460 --> 00:05:01,010
<font color="#CCCCCC">to encrypt transactions on</font><font color="#E5E5E5"> sensitive</font>

120
00:04:56,220 --> 00:05:05,430
data in the database log<font color="#E5E5E5"> one clip DB</font>

121
00:05:01,010 --> 00:05:07,349
defines a new mechanism<font color="#E5E5E5"> for writing</font>

122
00:05:05,430 --> 00:05:09,840
queries<font color="#E5E5E5"> against sensitive data so we</font>

123
00:05:07,350 --> 00:05:11,810
<font color="#E5E5E5">expect that the queries be compiled and</font>

124
00:05:09,840 --> 00:05:14,340
optimized<font color="#E5E5E5"> on the client side</font><font color="#CCCCCC"> and</font>

125
00:05:11,810 --> 00:05:16,740
compiled into<font color="#E5E5E5"> native</font><font color="#CCCCCC"> leak into native</font>

126
00:05:14,340 --> 00:05:18,090
<font color="#CCCCCC">code and these binaries are then</font>

127
00:05:16,740 --> 00:05:20,220
packaged along<font color="#E5E5E5"> with the in</font><font color="#CCCCCC"> Murray</font>

128
00:05:18,090 --> 00:05:22,320
<font color="#E5E5E5">in-memory query engine and</font><font color="#CCCCCC"> deployed</font><font color="#E5E5E5"> on</font>

129
00:05:20,220 --> 00:05:24,780
the<font color="#E5E5E5"> server inside the Enclave and that</font>

130
00:05:22,320 --> 00:05:27,510
way you get when the Enclave is set up

131
00:05:24,780 --> 00:05:28,979
you get<font color="#E5E5E5"> a measurement that includes the</font>

132
00:05:27,510 --> 00:05:32,280
all the queries<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you are going</font><font color="#CCCCCC"> to</font>

133
00:05:28,980 --> 00:05:35,340
<font color="#CCCCCC">run on</font><font color="#E5E5E5"> the database</font><font color="#CCCCCC"> and finally clients</font>

134
00:05:32,280 --> 00:05:36,929
that want to connect to<font color="#CCCCCC"> the the Enclave</font>

135
00:05:35,340 --> 00:05:39,659
<font color="#E5E5E5">connect to the database and query</font>

136
00:05:36,930 --> 00:05:41,490
sensitive data<font color="#CCCCCC"> connect</font><font color="#E5E5E5"> to the database</font>

137
00:05:39,660 --> 00:05:43,650
<font color="#E5E5E5">using a client</font><font color="#CCCCCC"> library</font><font color="#E5E5E5"> that sets up a</font>

138
00:05:41,490 --> 00:05:45,150
secure channel with the Enclave<font color="#CCCCCC"> the</font>

139
00:05:43,650 --> 00:05:48,060
<font color="#CCCCCC">library is</font><font color="#E5E5E5"> also responsible for</font>

140
00:05:45,150 --> 00:05:51,409
encrypting<font color="#E5E5E5"> all parameter values that are</font>

141
00:05:48,060 --> 00:05:53,940
passed in the query to the to the server

142
00:05:51,410 --> 00:05:55,020
<font color="#E5E5E5">and decrypting all the result sets and</font>

143
00:05:53,940 --> 00:05:58,190
passing<font color="#E5E5E5"> them back to the client</font>

144
00:05:55,020 --> 00:06:00,599
<font color="#E5E5E5">application</font><font color="#CCCCCC"> in clear-text</font>

145
00:05:58,190 --> 00:06:02,550
so this is an architecture that<font color="#E5E5E5"> gives us</font>

146
00:06:00,600 --> 00:06:04,250
some<font color="#E5E5E5"> very interesting properties so we</font>

147
00:06:02,550 --> 00:06:06,300
<font color="#CCCCCC">choose an in-memory query engine</font>

148
00:06:04,250 --> 00:06:10,290
specifically because<font color="#E5E5E5"> it aligns well with</font>

149
00:06:06,300 --> 00:06:11,670
the nature of one place<font color="#E5E5E5"> it it guarantee</font>

150
00:06:10,290 --> 00:06:13,440
is<font color="#CCCCCC"> that there are no</font><font color="#E5E5E5"> explicit</font>

151
00:06:11,670 --> 00:06:16,500
information<font color="#E5E5E5"> leaks when we perform</font>

152
00:06:13,440 --> 00:06:18,150
operations on in-memory tables<font color="#CCCCCC"> because</font>

153
00:06:16,500 --> 00:06:19,770
all the operations<font color="#CCCCCC"> at the indexing are</font>

154
00:06:18,150 --> 00:06:21,650
performed in Enclave memory and there

155
00:06:19,770 --> 00:06:24,180
are no there<font color="#E5E5E5"> are no explicit leaks there</font>

156
00:06:21,650 --> 00:06:27,840
<font color="#CCCCCC">the choice of using</font><font color="#E5E5E5"> native compilation</font>

157
00:06:24,180 --> 00:06:29,490
to query<font color="#E5E5E5"> to compile queries</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> front on</font>

158
00:06:27,840 --> 00:06:32,190
the<font color="#E5E5E5"> client side reduces the attack</font>

159
00:06:29,490 --> 00:06:34,650
<font color="#E5E5E5">surface of the server running on the on</font>

160
00:06:32,190 --> 00:06:36,750
of the code running<font color="#E5E5E5"> on the untrusted</font>

161
00:06:34,650 --> 00:06:38,969
server and allows<font color="#CCCCCC"> us</font><font color="#E5E5E5"> to guarantee</font><font color="#CCCCCC"> to the</font>

162
00:06:36,750 --> 00:06:40,440
<font color="#E5E5E5">end users the exact set of queries</font><font color="#CCCCCC"> that</font>

163
00:06:38,970 --> 00:06:43,970
the database<font color="#E5E5E5"> will process on sensitive</font>

164
00:06:40,440 --> 00:06:46,560
data<font color="#CCCCCC"> one of the other reasons we chose</font>

165
00:06:43,970 --> 00:06:48,390
<font color="#CCCCCC">sequels in-memory engine is because it</font>

166
00:06:46,560 --> 00:06:50,460
has very few and very<font color="#CCCCCC"> well-defined</font>

167
00:06:48,390 --> 00:06:52,260
dependencies on sequel server<font color="#E5E5E5"> on the</font>

168
00:06:50,460 --> 00:06:54,539
operating<font color="#E5E5E5"> system and on the CRT so it's</font>

169
00:06:52,260 --> 00:06:55,680
very<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> to put inside enclaves and</font><font color="#E5E5E5"> it</font>

170
00:06:54,540 --> 00:06:57,780
has a<font color="#E5E5E5"> relatively small</font>

171
00:06:55,680 --> 00:06:59,130
<font color="#E5E5E5">çb compared to the whole sequel server</font>

172
00:06:57,780 --> 00:07:02,638
which is that which<font color="#E5E5E5"> is</font><font color="#CCCCCC"> ten million lines</font>

173
00:06:59,130 --> 00:07:04,680
of code<font color="#CCCCCC"> the TCB of the</font><font color="#E5E5E5"> in-memory query</font>

174
00:07:02,639 --> 00:07:09,330
<font color="#CCCCCC">engine and the transaction manager is is</font>

175
00:07:04,680 --> 00:07:10,860
relatively<font color="#E5E5E5"> small</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> other reason be why</font>

176
00:07:09,330 --> 00:07:12,810
we chose<font color="#E5E5E5"> an in-memory query engine and</font>

177
00:07:10,860 --> 00:07:15,300
this architecture<font color="#E5E5E5"> is because it lends to</font>

178
00:07:12,810 --> 00:07:16,979
<font color="#CCCCCC">a very simple programming model unlike</font>

179
00:07:15,300 --> 00:07:19,800
encrypted databases<font color="#E5E5E5"> where you have to</font>

180
00:07:16,979 --> 00:07:22,349
<font color="#E5E5E5">explicitly choose individual columns and</font>

181
00:07:19,800 --> 00:07:24,360
<font color="#E5E5E5">decide to encrypt them here you just</font>

182
00:07:22,350 --> 00:07:26,460
<font color="#E5E5E5">simply decide the set of tables that you</font>

183
00:07:24,360 --> 00:07:30,419
that contains and simple data and host

184
00:07:26,460 --> 00:07:33,000
them inside<font color="#CCCCCC"> and on</font><font color="#E5E5E5"> place we do in our</font>

185
00:07:30,419 --> 00:07:35,039
<font color="#E5E5E5">architecture</font><font color="#CCCCCC"> assume the support for very</font>

186
00:07:33,000 --> 00:07:38,190
large enclaves<font color="#CCCCCC"> because we are going to</font>

187
00:07:35,039 --> 00:07:39,810
host all<font color="#CCCCCC"> sensitive</font><font color="#E5E5E5"> data and the indexes</font>

188
00:07:38,190 --> 00:07:43,710
on these on<font color="#CCCCCC"> this</font><font color="#E5E5E5"> data on this data</font>

189
00:07:39,810 --> 00:07:45,389
inside the<font color="#E5E5E5"> Enclave these large in</font>

190
00:07:43,710 --> 00:07:48,448
conclaves<font color="#CCCCCC"> don't exist</font><font color="#E5E5E5"> today but we</font>

191
00:07:45,389 --> 00:07:50,550
believe there is<font color="#CCCCCC"> no real reason why why</font>

192
00:07:48,449 --> 00:07:57,300
<font color="#CCCCCC">enclave should not expand and support</font>

193
00:07:50,550 --> 00:07:58,800
large amounts of<font color="#CCCCCC"> memory so let's go</font><font color="#E5E5E5"> good</font>

194
00:07:57,300 --> 00:08:01,050
a<font color="#E5E5E5"> little bit deeper</font><font color="#CCCCCC"> and look</font><font color="#E5E5E5"> at some of</font>

195
00:07:58,800 --> 00:08:03,690
the interfaces<font color="#CCCCCC"> of Enclave DB between</font><font color="#E5E5E5"> the</font>

196
00:08:01,050 --> 00:08:08,190
untrusted<font color="#E5E5E5"> and trusted components so in</font>

197
00:08:03,690 --> 00:08:10,440
Enclave DB the<font color="#CCCCCC"> the sequel server uses a</font>

198
00:08:08,190 --> 00:08:14,219
transaction<font color="#E5E5E5"> API to invoke transactions</font>

199
00:08:10,440 --> 00:08:16,770
on in on sensitive<font color="#CCCCCC"> data</font><font color="#E5E5E5"> and in turn the</font>

200
00:08:14,220 --> 00:08:18,870
Enclave uses the untrusted<font color="#E5E5E5"> server sequel</font>

201
00:08:16,770 --> 00:08:22,889
server instance to log transactions to

202
00:08:18,870 --> 00:08:24,180
disk and to to<font color="#E5E5E5"> create checkpoints so</font>

203
00:08:22,889 --> 00:08:27,599
let's look at some<font color="#E5E5E5"> of these</font><font color="#CCCCCC"> api's</font><font color="#E5E5E5"> in</font>

204
00:08:24,180 --> 00:08:30,509
more detail<font color="#E5E5E5"> the transaction API that</font>

205
00:08:27,599 --> 00:08:31,919
Enclave<font color="#E5E5E5"> DB exposes is very simple</font><font color="#CCCCCC"> there</font>

206
00:08:30,509 --> 00:08:33,900
is<font color="#CCCCCC"> a function call</font><font color="#E5E5E5"> TX</font><font color="#CCCCCC"> a la</font><font color="#E5E5E5"> that you</font>

207
00:08:31,919 --> 00:08:35,909
create<font color="#CCCCCC"> to Al that you use to allocate a</font>

208
00:08:33,900 --> 00:08:37,799
new<font color="#E5E5E5"> transaction that assigns the</font>

209
00:08:35,909 --> 00:08:41,490
<font color="#E5E5E5">transactions a new logical time stamp</font>

210
00:08:37,799 --> 00:08:43,740
and then you call TX execute to load a

211
00:08:41,490 --> 00:08:45,120
pre-existing<font color="#CCCCCC"> slow</font><font color="#E5E5E5"> procedure binary that</font>

212
00:08:43,740 --> 00:08:48,300
has already<font color="#E5E5E5"> been deployed</font><font color="#CCCCCC"> inside the</font>

213
00:08:45,120 --> 00:08:50,040
Enclave<font color="#E5E5E5"> and run the transaction</font><font color="#CCCCCC"> TX</font>

214
00:08:48,300 --> 00:08:53,040
execute will automatically authenticate

215
00:08:50,040 --> 00:08:55,230
parameters<font color="#E5E5E5"> using</font><font color="#CCCCCC"> a key that</font><font color="#E5E5E5"> is set up</font>

216
00:08:53,040 --> 00:08:57,270
during during<font color="#E5E5E5"> the creation of a secure</font>

217
00:08:55,230 --> 00:08:59,160
<font color="#E5E5E5">channel with the client it executes the</font>

218
00:08:57,270 --> 00:09:01,529
<font color="#E5E5E5">stored procedure entirely within the</font>

219
00:08:59,160 --> 00:09:04,319
<font color="#E5E5E5">content within the Denali memory and</font>

220
00:09:01,529 --> 00:09:06,620
<font color="#CCCCCC">write encrypted results back to</font><font color="#E5E5E5"> the two</font>

221
00:09:04,320 --> 00:09:09,660
buffers that<font color="#E5E5E5"> are then passed to the user</font>

222
00:09:06,620 --> 00:09:13,500
once a transaction<font color="#E5E5E5"> has executed some</font>

223
00:09:09,660 --> 00:09:15,030
code<font color="#CCCCCC"> the client</font><font color="#E5E5E5"> is expected to call TX</font>

224
00:09:13,500 --> 00:09:17,640
prepare to try and commit this

225
00:09:15,030 --> 00:09:19,350
<font color="#E5E5E5">transaction commit is in two phases</font>

226
00:09:17,640 --> 00:09:21,510
first you<font color="#E5E5E5"> prepare the transaction commit</font>

227
00:09:19,350 --> 00:09:23,400
and then<font color="#E5E5E5"> do the actual commit the</font>

228
00:09:21,510 --> 00:09:25,710
<font color="#E5E5E5">prepare phase checks for conflicts</font><font color="#CCCCCC"> and</font>

229
00:09:23,400 --> 00:09:27,270
if there are<font color="#E5E5E5"> no more conflict conflicts</font>

230
00:09:25,710 --> 00:09:29,400
<font color="#E5E5E5">it assigns the transaction and</font><font color="#CCCCCC"> n</font>

231
00:09:27,270 --> 00:09:30,900
<font color="#CCCCCC">timestamp</font><font color="#E5E5E5"> a logical time stamp and then</font>

232
00:09:29,400 --> 00:09:34,400
waits for all<font color="#E5E5E5"> dependent transactions to</font>

233
00:09:30,900 --> 00:09:36,750
finish and then initiates<font color="#CCCCCC"> log-log</font><font color="#E5E5E5"> IO and</font>

234
00:09:34,400 --> 00:09:38,730
this is the<font color="#E5E5E5"> phase phase where we encrypt</font>

235
00:09:36,750 --> 00:09:41,550
the<font color="#E5E5E5"> the log IO to disk to ensure</font><font color="#CCCCCC"> that</font>

236
00:09:38,730 --> 00:09:44,100
the state of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> log is doesn't</font><font color="#CCCCCC"> leak</font>

237
00:09:41,550 --> 00:09:45,689
secrets<font color="#CCCCCC"> and finally you</font><font color="#E5E5E5"> can call TX</font>

238
00:09:44,100 --> 00:09:46,860
commit to notify all dependent

239
00:09:45,690 --> 00:09:50,450
transactions and release all<font color="#E5E5E5"> resources</font>

240
00:09:46,860 --> 00:09:53,730
<font color="#E5E5E5">or call abort to abort the transaction</font>

241
00:09:50,450 --> 00:09:56,220
<font color="#CCCCCC">so we've hardened this</font><font color="#E5E5E5"> API to protect</font>

242
00:09:53,730 --> 00:09:58,770
against a variety of variety of attacks

243
00:09:56,220 --> 00:10:00,810
that<font color="#E5E5E5"> include attacks that for example</font>

244
00:09:58,770 --> 00:10:04,020
<font color="#CCCCCC">time of use time of check-in time of use</font>

245
00:10:00,810 --> 00:10:05,430
attacks<font color="#CCCCCC"> an</font><font color="#E5E5E5"> API misuse attacks that try</font>

246
00:10:04,020 --> 00:10:07,410
and for example<font color="#CCCCCC"> try and committed</font>

247
00:10:05,430 --> 00:10:08,760
transaction that is previously<font color="#E5E5E5"> trying</font>

248
00:10:07,410 --> 00:10:13,890
<font color="#E5E5E5">about a transaction</font><font color="#CCCCCC"> that is previously</font>

249
00:10:08,760 --> 00:10:15,780
<font color="#CCCCCC">committed a core part</font><font color="#E5E5E5"> of this protocol</font>

250
00:10:13,890 --> 00:10:18,689
<font color="#CCCCCC">is the</font><font color="#E5E5E5"> log which is because the log is</font>

251
00:10:15,780 --> 00:10:21,780
is is the<font color="#CCCCCC"> logging component in Conclave</font>

252
00:10:18,690 --> 00:10:23,010
<font color="#CCCCCC">EB</font><font color="#E5E5E5"> is completely untrusted</font><font color="#CCCCCC"> so the</font>

253
00:10:21,780 --> 00:10:26,250
logging is completely managed by the

254
00:10:23,010 --> 00:10:29,880
host the<font color="#CCCCCC"> host expose is again a simple</font>

255
00:10:26,250 --> 00:10:31,290
<font color="#CCCCCC">API for logging</font><font color="#E5E5E5"> you can the the Enclave</font>

256
00:10:29,880 --> 00:10:35,160
can call the<font color="#E5E5E5"> host to append a</font>

257
00:10:31,290 --> 00:10:36,930
transaction<font color="#CCCCCC"> to the log and that the</font>

258
00:10:35,160 --> 00:10:39,959
append API is is<font color="#CCCCCC"> completely asynchronous</font>

259
00:10:36,930 --> 00:10:42,089
<font color="#E5E5E5">so the the host</font><font color="#CCCCCC"> The Enclave will pass to</font>

260
00:10:39,960 --> 00:10:43,740
<font color="#E5E5E5">the host a transaction handle along with</font>

261
00:10:42,090 --> 00:10:46,260
the size<font color="#E5E5E5"> the expected size of the log</font>

262
00:10:43,740 --> 00:10:48,720
record<font color="#E5E5E5"> and when the host</font><font color="#CCCCCC"> allocates size</font>

263
00:10:46,260 --> 00:10:51,990
in the log<font color="#E5E5E5"> it calls back into the the</font>

264
00:10:48,720 --> 00:10:53,700
Enclave and<font color="#CCCCCC"> in the callback passing the</font>

265
00:10:51,990 --> 00:10:55,140
pointer into<font color="#E5E5E5"> the buffer where the host</font>

266
00:10:53,700 --> 00:10:57,960
<font color="#E5E5E5">where the onclick can write the</font>

267
00:10:55,140 --> 00:11:00,210
transaction log the log also<font color="#E5E5E5"> supports</font>

268
00:10:57,960 --> 00:11:04,140
truncation for checkpointing so you can

269
00:11:00,210 --> 00:11:05,430
truncate the log at some point<font color="#E5E5E5"> and</font><font color="#CCCCCC"> after</font>

270
00:11:04,140 --> 00:11:07,470
<font color="#CCCCCC">you have</font><font color="#E5E5E5"> written the state of the</font>

271
00:11:05,430 --> 00:11:11,069
<font color="#E5E5E5">truncated log into it into a checkpoint</font>

272
00:11:07,470 --> 00:11:13,200
file notice<font color="#CCCCCC"> here that the logging is</font>

273
00:11:11,070 --> 00:11:16,440
completely asynchronous<font color="#CCCCCC"> it's callback</font>

274
00:11:13,200 --> 00:11:18,350
based and the log supports concurrent

275
00:11:16,440 --> 00:11:20,730
append<font color="#E5E5E5"> so you there can be many threads</font>

276
00:11:18,350 --> 00:11:23,070
inside the Enclave that<font color="#E5E5E5"> are concurrently</font>

277
00:11:20,730 --> 00:11:25,350
writing to this log

278
00:11:23,070 --> 00:11:27,540
and how does checkpointing work well at

279
00:11:25,350 --> 00:11:30,060
some<font color="#CCCCCC"> point when the enclave decides the</font>

280
00:11:27,540 --> 00:11:32,370
log is has grown long enough<font color="#E5E5E5"> then it can</font>

281
00:11:30,060 --> 00:11:35,219
decide to check point the checkpointing

282
00:11:32,370 --> 00:11:37,470
process creates<font color="#E5E5E5"> reads the state of the</font>

283
00:11:35,220 --> 00:11:40,710
reach the the transaction<font color="#CCCCCC"> read write</font>

284
00:11:37,470 --> 00:11:44,730
sets and writes them<font color="#E5E5E5"> to a set of data in</font>

285
00:11:40,710 --> 00:11:46,110
<font color="#CCCCCC">Delta files thus the names of all of</font>

286
00:11:44,730 --> 00:11:48,570
<font color="#E5E5E5">these files are written</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> something</font>

287
00:11:46,110 --> 00:11:50,400
<font color="#E5E5E5">called a root file which is a list of</font>

288
00:11:48,570 --> 00:11:53,820
all the<font color="#E5E5E5"> check points that the database</font>

289
00:11:50,400 --> 00:11:55,650
<font color="#CCCCCC">has created now</font><font color="#E5E5E5"> protecting the integrity</font>

290
00:11:53,820 --> 00:11:57,060
of the log<font color="#CCCCCC"> and check pointing and the</font>

291
00:11:55,650 --> 00:11:58,470
check pointing process is<font color="#CCCCCC"> very important</font>

292
00:11:57,060 --> 00:12:01,500
because this is what gives<font color="#E5E5E5"> us all</font><font color="#CCCCCC"> our</font>

293
00:11:58,470 --> 00:12:03,210
security guarantees protecting the state

294
00:12:01,500 --> 00:12:04,710
of the<font color="#E5E5E5"> check points is very literally</font>

295
00:12:03,210 --> 00:12:08,280
<font color="#E5E5E5">straightforward we can simply encrypt</font>

296
00:12:04,710 --> 00:12:10,110
<font color="#E5E5E5">all the Check Point files</font><font color="#CCCCCC"> and bind the</font>

297
00:12:08,280 --> 00:12:12,270
root file to<font color="#E5E5E5"> am electronic counter so</font>

298
00:12:10,110 --> 00:12:13,980
that<font color="#E5E5E5"> the adversary cannot replace the</font>

299
00:12:12,270 --> 00:12:15,780
root file with a previous version<font color="#CCCCCC"> of the</font>

300
00:12:13,980 --> 00:12:20,040
root file and in<font color="#E5E5E5"> the process we lose</font>

301
00:12:15,780 --> 00:12:21,689
<font color="#E5E5E5">checkpoints</font><font color="#CCCCCC"> and this process</font><font color="#E5E5E5"> of binding</font>

302
00:12:20,040 --> 00:12:24,329
<font color="#E5E5E5">of the Check Point file to a root file</font>

303
00:12:21,690 --> 00:12:26,280
can be<font color="#E5E5E5"> achieved using</font><font color="#CCCCCC"> a protocol called</font>

304
00:12:24,330 --> 00:12:29,160
<font color="#E5E5E5">called</font><font color="#CCCCCC"> a piane</font><font color="#E5E5E5"> that was proposed and</font>

305
00:12:26,280 --> 00:12:31,020
<font color="#CCCCCC">used</font><font color="#E5E5E5"> next 2016 and the idea here is</font><font color="#CCCCCC"> that</font>

306
00:12:29,160 --> 00:12:33,569
when we<font color="#E5E5E5"> write the file when the root</font>

307
00:12:31,020 --> 00:12:36,270
file<font color="#E5E5E5"> when they write the root file we</font>

308
00:12:33,570 --> 00:12:38,910
encrypt the root file and in<font color="#E5E5E5"> the root</font>

309
00:12:36,270 --> 00:12:40,710
file at embed the value of the current

310
00:12:38,910 --> 00:12:42,420
counter the current counter value and

311
00:12:40,710 --> 00:12:45,420
then increment<font color="#E5E5E5"> the counter after the</font>

312
00:12:42,420 --> 00:12:46,620
file<font color="#E5E5E5"> has been written out</font><font color="#CCCCCC"> and the</font>

313
00:12:45,420 --> 00:12:48,360
problem with the scheme with

314
00:12:46,620 --> 00:12:49,920
incrementing the counter<font color="#E5E5E5"> after</font><font color="#CCCCCC"> writing</font>

315
00:12:48,360 --> 00:12:52,410
the file is that<font color="#CCCCCC"> if there is a failure</font>

316
00:12:49,920 --> 00:12:54,270
<font color="#CCCCCC">after the file has been</font><font color="#E5E5E5"> written then the</font>

317
00:12:52,410 --> 00:12:56,430
<font color="#CCCCCC">adversary has a copy</font><font color="#E5E5E5"> of the file which</font>

318
00:12:54,270 --> 00:12:58,500
corresponds to the next version of<font color="#CCCCCC"> the</font>

319
00:12:56,430 --> 00:13:00,569
state but the count that hasn't been

320
00:12:58,500 --> 00:13:03,540
incremented<font color="#E5E5E5"> and the adversary can use</font>

321
00:13:00,570 --> 00:13:05,580
that<font color="#E5E5E5"> that next value of the next version</font>

322
00:13:03,540 --> 00:13:08,250
of the<font color="#E5E5E5"> file to fourth the database at</font>

323
00:13:05,580 --> 00:13:10,770
some point in<font color="#E5E5E5"> some point later and to</font>

324
00:13:08,250 --> 00:13:13,200
prevent<font color="#E5E5E5"> these attacks</font><font color="#CCCCCC"> the read file</font>

325
00:13:10,770 --> 00:13:13,560
process from<font color="#E5E5E5"> within an enclave does the</font>

326
00:13:13,200 --> 00:13:15,390
following

327
00:13:13,560 --> 00:13:17,310
<font color="#E5E5E5">it</font><font color="#CCCCCC"> reads the</font><font color="#E5E5E5"> current counter value and</font>

328
00:13:15,390 --> 00:13:18,870
asserts that the the file you<font color="#CCCCCC"> are</font>

329
00:13:17,310 --> 00:13:21,089
getting spawns to the current counter

330
00:13:18,870 --> 00:13:23,820
value but then it writes<font color="#E5E5E5"> the file and</font>

331
00:13:21,090 --> 00:13:25,740
binds it to this<font color="#CCCCCC"> - it increments</font><font color="#E5E5E5"> the</font>

332
00:13:23,820 --> 00:13:28,020
counter twice and each time writes the

333
00:13:25,740 --> 00:13:30,030
file out<font color="#E5E5E5"> and that invalidates all the</font>

334
00:13:28,020 --> 00:13:31,500
the fourth version<font color="#E5E5E5"> of the file</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font>

335
00:13:30,030 --> 00:13:33,750
adverse we might have had so there's a

336
00:13:31,500 --> 00:13:35,670
<font color="#CCCCCC">simple scheme for ensuring that we can</font>

337
00:13:33,750 --> 00:13:37,320
protect the<font color="#E5E5E5"> check points from being</font>

338
00:13:35,670 --> 00:13:40,209
the<font color="#E5E5E5"> adversary from replacing the</font>

339
00:13:37,320 --> 00:13:42,350
checkpoint<font color="#CCCCCC"> route file and then and then</font>

340
00:13:40,210 --> 00:13:45,180
[Music]

341
00:13:42,350 --> 00:13:48,450
and<font color="#CCCCCC"> then</font><font color="#E5E5E5"> ruling state back loading the</font>

342
00:13:45,180 --> 00:13:50,010
state of the<font color="#E5E5E5"> database back but ensuring</font>

343
00:13:48,450 --> 00:13:52,050
the state continuity<font color="#E5E5E5"> for the transaction</font>

344
00:13:50,010 --> 00:13:53,970
log is a lot more<font color="#E5E5E5"> challenging and that's</font>

345
00:13:52,050 --> 00:13:55,829
because like I<font color="#CCCCCC"> mentioned the log is</font>

346
00:13:53,970 --> 00:13:58,110
being updated<font color="#E5E5E5"> incrementally so the log</font>

347
00:13:55,830 --> 00:14:01,170
is not a whole blob of<font color="#CCCCCC"> state</font><font color="#E5E5E5"> that you</font>

348
00:13:58,110 --> 00:14:03,120
can<font color="#E5E5E5"> keep in writing out every time you</font>

349
00:14:01,170 --> 00:14:06,089
<font color="#CCCCCC">update it the log</font><font color="#E5E5E5"> is being appended to</font>

350
00:14:03,120 --> 00:14:07,730
<font color="#E5E5E5">and the logging API supports both</font>

351
00:14:06,090 --> 00:14:10,050
concurrent<font color="#E5E5E5"> appends and it's asynchronous</font>

352
00:14:07,730 --> 00:14:12,660
<font color="#E5E5E5">for high</font><font color="#CCCCCC"> performance</font><font color="#E5E5E5"> and it's also being</font>

353
00:14:10,050 --> 00:14:16,829
truncated<font color="#E5E5E5"> so to guarantee that the log</font>

354
00:14:12,660 --> 00:14:18,480
is is is the latest is<font color="#CCCCCC"> the latest log</font>

355
00:14:16,830 --> 00:14:21,680
when you recover<font color="#CCCCCC"> the log is the latest</font>

356
00:14:18,480 --> 00:14:21,680
is actually quite challenging

357
00:14:21,810 --> 00:14:25,439
we considered using<font color="#E5E5E5"> a Merkel tree</font><font color="#CCCCCC"> the</font>

358
00:14:24,150 --> 00:14:29,040
combination<font color="#E5E5E5"> for Merkel tree and a</font>

359
00:14:25,440 --> 00:14:30,660
<font color="#E5E5E5">monotonic counter for for ensuring state</font>

360
00:14:29,040 --> 00:14:32,490
continuity for<font color="#E5E5E5"> the log but that</font>

361
00:14:30,660 --> 00:14:33,870
unfortunately<font color="#E5E5E5"> introduces a single</font>

362
00:14:32,490 --> 00:14:36,030
synchronization bottleneck in<font color="#CCCCCC"> the whole</font>

363
00:14:33,870 --> 00:14:39,120
<font color="#E5E5E5">system specifically on the value the</font>

364
00:14:36,030 --> 00:14:40,800
root value of the<font color="#E5E5E5"> Merkel tree and that's</font>

365
00:14:39,120 --> 00:14:44,460
why we<font color="#CCCCCC"> proposed</font><font color="#E5E5E5"> that's a reason we</font>

366
00:14:40,800 --> 00:14:46,469
<font color="#E5E5E5">proposed a new scheme</font><font color="#CCCCCC"> for ensuring state</font>

367
00:14:44,460 --> 00:14:49,410
continuity<font color="#CCCCCC"> of the log and this relies on</font>

368
00:14:46,470 --> 00:14:50,630
some key observations<font color="#CCCCCC"> of that that whole</font>

369
00:14:49,410 --> 00:14:52,699
in the context of<font color="#E5E5E5"> a database</font>

370
00:14:50,630 --> 00:14:56,400
<font color="#E5E5E5">specifically an in-memory engine and</font>

371
00:14:52,700 --> 00:14:58,710
these<font color="#E5E5E5"> observations are as follows in a</font>

372
00:14:56,400 --> 00:15:01,590
database<font color="#CCCCCC"> like ours</font><font color="#E5E5E5"> it turns out that</font>

373
00:14:58,710 --> 00:15:03,450
it's enough for<font color="#CCCCCC"> us to</font><font color="#E5E5E5"> recover when when</font>

374
00:15:01,590 --> 00:15:05,730
a failure<font color="#E5E5E5"> occurs it's enough for</font><font color="#CCCCCC"> the</font>

375
00:15:03,450 --> 00:15:07,950
database<font color="#E5E5E5"> to recover with the set of log</font>

376
00:15:05,730 --> 00:15:09,840
records that<font color="#CCCCCC"> have committed</font><font color="#E5E5E5"> but have not</font>

377
00:15:07,950 --> 00:15:12,090
previously<font color="#CCCCCC"> been truncated</font><font color="#E5E5E5"> from the log</font>

378
00:15:09,840 --> 00:15:13,470
more specifically the order of the log

379
00:15:12,090 --> 00:15:15,420
records in the log<font color="#E5E5E5"> doesn't really matter</font>

380
00:15:13,470 --> 00:15:17,940
<font color="#CCCCCC">so we don't</font><font color="#E5E5E5"> have to ensure that when we</font>

381
00:15:15,420 --> 00:15:19,740
read the log we<font color="#E5E5E5"> recover the</font><font color="#CCCCCC"> log records</font>

382
00:15:17,940 --> 00:15:21,480
in exactly the same<font color="#E5E5E5"> order</font><font color="#CCCCCC"> because the</font>

383
00:15:19,740 --> 00:15:23,370
<font color="#E5E5E5">order</font><font color="#CCCCCC"> is based on a logical timestamp</font>

384
00:15:21,480 --> 00:15:26,640
<font color="#CCCCCC">that the database</font><font color="#E5E5E5"> engine has</font><font color="#CCCCCC"> assigned</font>

385
00:15:23,370 --> 00:15:28,200
and embedded in the log record<font color="#E5E5E5"> and the</font>

386
00:15:26,640 --> 00:15:30,810
second observation<font color="#E5E5E5"> is that any</font>

387
00:15:28,200 --> 00:15:33,210
transactions<font color="#E5E5E5"> that are in flight when the</font>

388
00:15:30,810 --> 00:15:35,250
<font color="#E5E5E5">failure occurred for example</font>

389
00:15:33,210 --> 00:15:37,650
transactions for which log i/o has been

390
00:15:35,250 --> 00:15:39,240
<font color="#E5E5E5">initiated but the host hasn't</font>

391
00:15:37,650 --> 00:15:40,020
acknowledged that the transactions<font color="#CCCCCC"> have</font>

392
00:15:39,240 --> 00:15:42,090
been returned to disk

393
00:15:40,020 --> 00:15:43,920
<font color="#E5E5E5">it's okay to discard those transactions</font>

394
00:15:42,090 --> 00:15:45,900
from the<font color="#E5E5E5"> log</font><font color="#CCCCCC"> because we haven't really</font>

395
00:15:43,920 --> 00:15:47,849
notified the users<font color="#E5E5E5"> that these</font>

396
00:15:45,900 --> 00:15:49,290
transactions have committed<font color="#E5E5E5"> anyway so</font>

397
00:15:47,850 --> 00:15:51,780
it's<font color="#E5E5E5"> okay to discard</font><font color="#CCCCCC"> do transact</font>

398
00:15:49,290 --> 00:15:54,689
for which<font color="#CCCCCC"> IO has been</font><font color="#E5E5E5"> initiated but we</font>

399
00:15:51,780 --> 00:15:56,430
<font color="#E5E5E5">haven't committed to the user so based</font>

400
00:15:54,690 --> 00:15:59,670
on these observe a very<font color="#CCCCCC"> quick key</font>

401
00:15:56,430 --> 00:16:02,010
observations<font color="#CCCCCC"> we have a new protocol</font><font color="#E5E5E5"> that</font>

402
00:15:59,670 --> 00:16:04,860
<font color="#E5E5E5">ensures the integrity of the log and</font>

403
00:16:02,010 --> 00:16:06,750
this is based on tracking<font color="#CCCCCC"> sets of log</font>

404
00:16:04,860 --> 00:16:09,510
records using<font color="#E5E5E5"> vector clocks</font><font color="#CCCCCC"> so let</font><font color="#E5E5E5"> me</font>

405
00:16:06,750 --> 00:16:12,150
<font color="#CCCCCC">quickly describe</font><font color="#E5E5E5"> this protocol</font><font color="#CCCCCC"> so this</font>

406
00:16:09,510 --> 00:16:14,460
protocol<font color="#E5E5E5"> uses</font><font color="#CCCCCC"> electronic counters there</font>

407
00:16:12,150 --> 00:16:19,050
is three sets of monitor encounters per

408
00:16:14,460 --> 00:16:23,370
thread<font color="#CCCCCC"> so here I'm</font><font color="#E5E5E5"> showing on the on the</font>

409
00:16:19,050 --> 00:16:25,890
on<font color="#E5E5E5"> on the the</font><font color="#CCCCCC"> x-axis is time</font><font color="#E5E5E5"> and log</font>

410
00:16:23,370 --> 00:16:27,630
records<font color="#CCCCCC"> there are</font><font color="#E5E5E5"> three sets of counters</font>

411
00:16:25,890 --> 00:16:28,710
there is a counter<font color="#CCCCCC"> that tracks all</font>

412
00:16:27,630 --> 00:16:31,230
<font color="#E5E5E5">around</font><font color="#CCCCCC"> Prakash</font><font color="#E5E5E5"> that have been truncated</font>

413
00:16:28,710 --> 00:16:32,940
<font color="#CCCCCC">per thread and a counter that tracks the</font>

414
00:16:31,230 --> 00:16:33,960
set of committed log records and a

415
00:16:32,940 --> 00:16:36,270
counter<font color="#E5E5E5"> that tracks the set of</font>

416
00:16:33,960 --> 00:16:38,340
uncommitted log records the set of

417
00:16:36,270 --> 00:16:40,260
<font color="#CCCCCC">longer</font><font color="#E5E5E5"> the committed log record counter</font>

418
00:16:38,340 --> 00:16:42,000
per thread is<font color="#E5E5E5"> incremented before a</font>

419
00:16:40,260 --> 00:16:44,850
thread initiates log<font color="#CCCCCC"> i/o for a</font>

420
00:16:42,000 --> 00:16:46,830
transaction<font color="#CCCCCC"> and the sorry the</font>

421
00:16:44,850 --> 00:16:48,930
<font color="#E5E5E5">uncommitted log record counter is</font>

422
00:16:46,830 --> 00:16:51,690
incremented<font color="#E5E5E5"> before a thread initiates</font>

423
00:16:48,930 --> 00:16:55,530
log i/o the committee log log<font color="#CCCCCC"> i/o</font>

424
00:16:51,690 --> 00:16:57,690
counter is is implemented<font color="#CCCCCC"> after the host</font>

425
00:16:55,530 --> 00:17:00,240
notifies the Enclave<font color="#E5E5E5"> that a transaction</font>

426
00:16:57,690 --> 00:17:02,880
<font color="#CCCCCC">is committed</font><font color="#E5E5E5"> and the truncated</font><font color="#CCCCCC"> rocket</font>

427
00:17:00,240 --> 00:17:06,420
log record<font color="#E5E5E5"> counter is incremented when</font><font color="#CCCCCC"> B</font>

428
00:17:02,880 --> 00:17:08,040
<font color="#E5E5E5">checkpoint so what this tells you is</font>

429
00:17:06,420 --> 00:17:10,079
<font color="#CCCCCC">that</font><font color="#E5E5E5"> if you look at the two vector</font>

430
00:17:08,040 --> 00:17:12,149
clocks<font color="#E5E5E5"> the committed and all vector</font>

431
00:17:10,079 --> 00:17:14,369
clocks<font color="#E5E5E5"> the difference</font><font color="#CCCCCC"> between them</font><font color="#E5E5E5"> tells</font>

432
00:17:12,150 --> 00:17:16,199
us the set of log records<font color="#E5E5E5"> for which we</font>

433
00:17:14,369 --> 00:17:22,139
have initiated<font color="#E5E5E5"> log i/o but we haven't</font>

434
00:17:16,199 --> 00:17:23,910
yet committed<font color="#CCCCCC"> each of the log records is</font>

435
00:17:22,140 --> 00:17:25,949
also encrypted<font color="#E5E5E5"> and</font><font color="#CCCCCC"> time-stamped with</font>

436
00:17:23,910 --> 00:17:27,930
these counters<font color="#E5E5E5"> stamped</font><font color="#CCCCCC"> with these</font>

437
00:17:25,949 --> 00:17:31,320
counter values<font color="#E5E5E5"> so each log</font><font color="#CCCCCC"> record is</font>

438
00:17:27,930 --> 00:17:33,810
unique because it<font color="#E5E5E5"> identifies the thread</font>

439
00:17:31,320 --> 00:17:36,510
that initiated<font color="#E5E5E5"> the log i/o and and the</font>

440
00:17:33,810 --> 00:17:39,629
counter value<font color="#E5E5E5"> and during</font><font color="#CCCCCC"> recovery we</font>

441
00:17:36,510 --> 00:17:41,640
ensure that<font color="#E5E5E5"> we can recover only if at</font>

442
00:17:39,630 --> 00:17:43,470
least all the committed log records are

443
00:17:41,640 --> 00:17:45,810
<font color="#CCCCCC">available so we don't expect all the</font>

444
00:17:43,470 --> 00:17:47,430
uncommitted<font color="#E5E5E5"> wants to be there but at the</font>

445
00:17:45,810 --> 00:17:50,730
very<font color="#E5E5E5"> least we expect that all committed</font>

446
00:17:47,430 --> 00:17:52,440
log records<font color="#E5E5E5"> must exist in the log we</font>

447
00:17:50,730 --> 00:17:54,240
also have a scheme<font color="#CCCCCC"> for invalidating</font><font color="#E5E5E5"> all</font>

448
00:17:52,440 --> 00:17:56,250
the log records that were uncommitted<font color="#E5E5E5"> so</font>

449
00:17:54,240 --> 00:17:58,770
that an adversary cannot reuse them<font color="#E5E5E5"> and</font>

450
00:17:56,250 --> 00:18:00,150
launch attacks<font color="#E5E5E5"> by</font><font color="#CCCCCC"> using</font><font color="#E5E5E5"> previously</font>

451
00:17:58,770 --> 00:18:02,250
uncommitted log records in later

452
00:18:00,150 --> 00:18:04,820
executions<font color="#E5E5E5"> but again I'll skip this for</font>

453
00:18:02,250 --> 00:18:04,820
the lack of time

454
00:18:09,450 --> 00:18:14,700
a quick<font color="#E5E5E5"> note on the implementation of</font>

455
00:18:11,909 --> 00:18:16,830
monitor monitor monotonic counters<font color="#CCCCCC"> STX</font>

456
00:18:14,700 --> 00:18:18,510
does support monitor encounters but and

457
00:18:16,830 --> 00:18:20,549
these are counters implemented in the in

458
00:18:18,510 --> 00:18:22,890
the<font color="#E5E5E5"> management engine but these counters</font>

459
00:18:20,549 --> 00:18:24,360
<font color="#E5E5E5">turn out to be too slow</font><font color="#CCCCCC"> especially</font><font color="#E5E5E5"> for</font>

460
00:18:22,890 --> 00:18:26,700
the kinds of throughputs that we expect

461
00:18:24,360 --> 00:18:28,350
<font color="#E5E5E5">so each counter update in</font><font color="#CCCCCC"> SC X is</font>

462
00:18:26,700 --> 00:18:30,150
roughly 100 milliseconds<font color="#E5E5E5"> and that's very</font>

463
00:18:28,350 --> 00:18:32,189
very slow<font color="#CCCCCC"> and these counters are also</font>

464
00:18:30,150 --> 00:18:33,690
not useful<font color="#E5E5E5"> across when we migrate a</font>

465
00:18:32,190 --> 00:18:36,659
database instance across<font color="#E5E5E5"> servers and</font>

466
00:18:33,690 --> 00:18:39,840
therefore we use<font color="#CCCCCC"> a counter using</font>

467
00:18:36,659 --> 00:18:41,400
replicated on place these guarantee

468
00:18:39,840 --> 00:18:42,959
availability as long as a majority<font color="#CCCCCC"> of</font>

469
00:18:41,400 --> 00:18:46,200
the server's majority of the enclaves

470
00:18:42,960 --> 00:18:48,980
are life and we also use sharding<font color="#E5E5E5"> 22 to</font>

471
00:18:46,200 --> 00:18:51,539
improve hype<font color="#E5E5E5"> to get higher</font><font color="#CCCCCC"> performance</font>

472
00:18:48,980 --> 00:18:54,179
so let<font color="#E5E5E5"> me quickly describe the</font>

473
00:18:51,539 --> 00:18:55,679
evaluation so we<font color="#E5E5E5"> evaluated these are</font>

474
00:18:54,179 --> 00:18:58,500
designed using a very<font color="#CCCCCC"> high-end server</font>

475
00:18:55,679 --> 00:19:02,580
configuration<font color="#E5E5E5"> so we have four sockets 32</font>

476
00:18:58,500 --> 00:19:05,220
cores<font color="#E5E5E5"> 512 gigabytes of memory and disk</font>

477
00:19:02,580 --> 00:19:08,399
that<font color="#E5E5E5"> is piped</font><font color="#CCCCCC"> eight ways to 50 gigabytes</font>

478
00:19:05,220 --> 00:19:11,309
each<font color="#CCCCCC"> we have two benchmarks two standard</font>

479
00:19:08,400 --> 00:19:12,750
database benchmarks TPCC and<font color="#CCCCCC"> TATP and in</font>

480
00:19:11,309 --> 00:19:14,460
both<font color="#E5E5E5"> of these benchmarks we assume that</font>

481
00:19:12,750 --> 00:19:18,210
<font color="#E5E5E5">all</font><font color="#CCCCCC"> the tables</font><font color="#E5E5E5"> and all the stored</font>

482
00:19:14,460 --> 00:19:20,580
procedures are<font color="#E5E5E5"> sensitive we assume that</font>

483
00:19:18,210 --> 00:19:22,260
<font color="#CCCCCC">we have</font><font color="#E5E5E5"> very large</font><font color="#CCCCCC"> enclaves</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> our case</font>

484
00:19:20,580 --> 00:19:25,770
we assume<font color="#CCCCCC"> that we have enclaves</font><font color="#E5E5E5"> of size</font>

485
00:19:22,260 --> 00:19:27,690
hundred<font color="#E5E5E5"> and ninety two gigabytes</font><font color="#CCCCCC"> since</font>

486
00:19:25,770 --> 00:19:30,240
enclaves<font color="#E5E5E5"> of this these sizes</font><font color="#CCCCCC"> don't exist</font>

487
00:19:27,690 --> 00:19:31,620
yet we had to use a performance<font color="#E5E5E5"> model to</font>

488
00:19:30,240 --> 00:19:33,390
estimate<font color="#E5E5E5"> the performance and we</font>

489
00:19:31,620 --> 00:19:36,090
validated<font color="#E5E5E5"> the performance model using</font>

490
00:19:33,390 --> 00:19:38,730
existing enclaves<font color="#E5E5E5"> using existing</font><font color="#CCCCCC"> HDX</font>

491
00:19:36,090 --> 00:19:40,199
enclaves<font color="#CCCCCC"> and the details of the</font>

492
00:19:38,730 --> 00:19:44,370
performance model and the validation<font color="#E5E5E5"> ad</font>

493
00:19:40,200 --> 00:19:47,070
in the paper<font color="#CCCCCC"> so so just to quickly</font>

494
00:19:44,370 --> 00:19:49,799
describe the<font color="#CCCCCC"> performance we get so the</font>

495
00:19:47,070 --> 00:19:51,780
<font color="#E5E5E5">result on the left</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> the graph on the</font>

496
00:19:49,799 --> 00:19:54,450
<font color="#E5E5E5">Left shows you the performance</font><font color="#CCCCCC"> for</font>

497
00:19:51,780 --> 00:19:57,389
<font color="#E5E5E5">throughput for TPCC there are four</font>

498
00:19:54,450 --> 00:19:59,309
<font color="#CCCCCC">configurations baseline</font><font color="#E5E5E5"> crypt which</font>

499
00:19:57,390 --> 00:20:01,530
represents the<font color="#E5E5E5"> the configuration where</font>

500
00:19:59,309 --> 00:20:03,629
<font color="#E5E5E5">the enable encryption of log records and</font>

501
00:20:01,530 --> 00:20:05,850
parameter values crypt<font color="#E5E5E5"> call which also</font>

502
00:20:03,630 --> 00:20:07,830
simulates<font color="#CCCCCC"> the overhead of calling in and</font>

503
00:20:05,850 --> 00:20:09,178
out of the<font color="#E5E5E5"> Enclave and crypt calm</font><font color="#CCCCCC"> em</font>

504
00:20:07,830 --> 00:20:12,990
which also stimulates the overhead of

505
00:20:09,179 --> 00:20:16,230
memory encryption that<font color="#CCCCCC"> scx imposes what</font>

506
00:20:12,990 --> 00:20:17,850
we find here is<font color="#CCCCCC"> that the overheads of</font>

507
00:20:16,230 --> 00:20:19,440
of our system<font color="#E5E5E5"> are reasonably low</font>

508
00:20:17,850 --> 00:20:21,418
especially for the<font color="#E5E5E5"> secure kind of</font>

509
00:20:19,440 --> 00:20:23,850
security<font color="#E5E5E5"> guarantees we get so it's</font><font color="#CCCCCC"> 40</font>

510
00:20:21,419 --> 00:20:25,290
<font color="#E5E5E5">percent</font><font color="#CCCCCC"> in the case of</font><font color="#E5E5E5"> PPCC 15 percent</font>

511
00:20:23,850 --> 00:20:27,480
in the case<font color="#E5E5E5"> of TATP and the difference</font>

512
00:20:25,290 --> 00:20:29,340
is because TPCC is a more<font color="#CCCCCC"> write</font>

513
00:20:27,480 --> 00:20:31,340
intensive workload whereas<font color="#CCCCCC"> tepees</font><font color="#E5E5E5"> datp</font>

514
00:20:29,340 --> 00:20:33,570
<font color="#E5E5E5">is a more read intensive workload and</font>

515
00:20:31,340 --> 00:20:35,549
the reason why we<font color="#E5E5E5"> get low encryption</font>

516
00:20:33,570 --> 00:20:37,620
overheads are because<font color="#CCCCCC"> our encryption</font><font color="#E5E5E5"> and</font>

517
00:20:35,549 --> 00:20:38,820
decryption is at a coarse granularity<font color="#CCCCCC"> we</font>

518
00:20:37,620 --> 00:20:41,760
are encrypting and decrypting log

519
00:20:38,820 --> 00:20:43,110
records not individual values<font color="#CCCCCC"> and we've</font>

520
00:20:41,760 --> 00:20:44,970
done<font color="#E5E5E5"> a whole bunch</font><font color="#CCCCCC"> of optimizing</font><font color="#E5E5E5"> this to</font>

521
00:20:43,110 --> 00:20:47,909
<font color="#E5E5E5">ensure that we have no bottlenecks on</font>

522
00:20:44,970 --> 00:20:50,429
the critical path<font color="#CCCCCC"> so just to summarize</font>

523
00:20:47,910 --> 00:20:53,100
<font color="#E5E5E5">Enclave DB is a database designed for</font>

524
00:20:50,429 --> 00:20:54,630
high security<font color="#CCCCCC"> it achieves security with</font>

525
00:20:53,100 --> 00:20:57,480
good performance and a<font color="#E5E5E5"> reasonably</font><font color="#CCCCCC"> small</font>

526
00:20:54,630 --> 00:20:59,370
TCB and a core component this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a new</font>

527
00:20:57,480 --> 00:21:01,140
<font color="#E5E5E5">protocol for ensuring integrity and</font>

528
00:20:59,370 --> 00:21:04,500
confidentiality of the log<font color="#E5E5E5"> and in the</font>

529
00:21:01,140 --> 00:21:06,870
checkpointing process<font color="#CCCCCC"> as described</font><font color="#E5E5E5"> in</font>

530
00:21:04,500 --> 00:21:08,910
the paper<font color="#E5E5E5"> Enclave DB enables new</font>

531
00:21:06,870 --> 00:21:10,649
scenarios for<font color="#E5E5E5"> a database to</font><font color="#CCCCCC"> be used for</font>

532
00:21:08,910 --> 00:21:12,120
<font color="#CCCCCC">example</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> a setting</font><font color="#E5E5E5"> where you</font><font color="#CCCCCC"> have</font>

533
00:21:10,650 --> 00:21:14,070
<font color="#CCCCCC">multiple users</font><font color="#E5E5E5"> who don't trust each</font>

534
00:21:12,120 --> 00:21:16,739
other and want to share a single sequel

535
00:21:14,070 --> 00:21:19,049
database instance<font color="#CCCCCC"> there are a large</font>

536
00:21:16,740 --> 00:21:20,850
number of<font color="#E5E5E5"> open problems here for example</font>

537
00:21:19,049 --> 00:21:23,129
transactions that<font color="#E5E5E5"> span multiplicand</font>

538
00:21:20,850 --> 00:21:26,399
private data<font color="#E5E5E5"> of course side channels and</font>

539
00:21:23,130 --> 00:21:29,390
reducing the TCB even further thank you

540
00:21:26,400 --> 00:21:29,390
and I'm happy<font color="#CCCCCC"> to take some</font><font color="#E5E5E5"> questions</font>

541
00:21:33,970 --> 00:21:38,140
<font color="#CCCCCC">I'll make</font><font color="#E5E5E5"> a time for for what</font><font color="#CCCCCC"> questions</font>

542
00:21:36,400 --> 00:21:46,710
please state your name<font color="#CCCCCC"> and affiliation</font>

543
00:21:38,140 --> 00:21:48,730
please<font color="#E5E5E5"> so you do a bunch of work on</font>

544
00:21:46,710 --> 00:21:50,350
<font color="#E5E5E5">integrity of the logging with</font>

545
00:21:48,730 --> 00:21:52,929
concurrences and that's a really neat

546
00:21:50,350 --> 00:21:55,030
technique but I wonder what happens to

547
00:21:52,929 --> 00:21:57,760
<font color="#E5E5E5">the actual data records you probably</font>

548
00:21:55,030 --> 00:21:59,740
have a similar<font color="#CCCCCC"> issue so I imagine that</font>

549
00:21:57,760 --> 00:22:02,500
<font color="#E5E5E5">for integrity you use maybe a miracle</font>

550
00:21:59,740 --> 00:22:04,960
tree either<font color="#CCCCCC"> built into</font><font color="#E5E5E5"> ejects or your</font>

551
00:22:02,500 --> 00:22:07,720
own but concurrency with that is

552
00:22:04,960 --> 00:22:11,440
difficult<font color="#CCCCCC"> and</font><font color="#E5E5E5"> isn't</font><font color="#CCCCCC"> that becoming a</font>

553
00:22:07,720 --> 00:22:13,030
<font color="#CCCCCC">bottleneck</font><font color="#E5E5E5"> so poor for data records</font>

554
00:22:11,440 --> 00:22:15,370
themselves<font color="#E5E5E5"> we assume</font><font color="#CCCCCC"> that we have the</font>

555
00:22:13,030 --> 00:22:17,918
all<font color="#E5E5E5"> the sensitive data is in</font><font color="#CCCCCC"> Enclave</font>

556
00:22:15,370 --> 00:22:20,110
memory<font color="#E5E5E5"> so we rely on hardware to protect</font>

557
00:22:17,919 --> 00:22:22,570
the integrity of of all sensitive data

558
00:22:20,110 --> 00:22:23,979
<font color="#CCCCCC">and indexes on those data because the</font>

559
00:22:22,570 --> 00:22:25,629
hardware<font color="#E5E5E5"> itself is essentially</font>

560
00:22:23,980 --> 00:22:28,720
<font color="#E5E5E5">implementing a miracle tree of some sort</font>

561
00:22:25,630 --> 00:22:30,490
and<font color="#CCCCCC"> yes concurrency bottlenecks yes</font>

562
00:22:28,720 --> 00:22:32,350
wonder if<font color="#E5E5E5"> you haven't run into that</font><font color="#CCCCCC"> as a</font>

563
00:22:30,490 --> 00:22:34,240
performance issue<font color="#E5E5E5"> yes we have we have</font>

564
00:22:32,350 --> 00:22:36,668
<font color="#CCCCCC">modeled that in our performance model as</font>

565
00:22:34,240 --> 00:22:39,280
much as we can<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that our performance</font>

566
00:22:36,669 --> 00:22:41,770
<font color="#E5E5E5">model includes the cost of integrity of</font>

567
00:22:39,280 --> 00:22:44,500
an of the additional<font color="#E5E5E5"> cost</font><font color="#CCCCCC"> of integrity</font>

568
00:22:41,770 --> 00:22:46,240
<font color="#E5E5E5">on the on memory</font><font color="#CCCCCC"> accesses</font><font color="#E5E5E5"> I see it might</font>

569
00:22:44,500 --> 00:22:47,740
be worth<font color="#CCCCCC"> looking at</font><font color="#E5E5E5"> a real hardware for</font>

570
00:22:46,240 --> 00:22:53,530
that<font color="#CCCCCC"> because we run into a bottleneck</font>

571
00:22:47,740 --> 00:22:57,750
yes<font color="#E5E5E5"> hey thank you very much for that</font>

572
00:22:53,530 --> 00:22:57,750
<font color="#CCCCCC">Santa speaker thank</font><font color="#E5E5E5"> you</font>

