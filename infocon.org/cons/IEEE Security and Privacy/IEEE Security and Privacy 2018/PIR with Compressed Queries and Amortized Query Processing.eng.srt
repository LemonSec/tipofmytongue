1
00:00:07,570 --> 00:00:11,320
<font color="#E5E5E5">okay so this talk is gonna</font><font color="#CCCCCC"> be about</font>

2
00:00:09,370 --> 00:00:13,809
private information retrieval or PIR

3
00:00:11,320 --> 00:00:15,280
<font color="#E5E5E5">which is a very powerful very useful but</font>

4
00:00:13,809 --> 00:00:17,320
<font color="#E5E5E5">also very expensive cryptographic</font>

5
00:00:15,280 --> 00:00:19,119
protocol<font color="#E5E5E5"> and what we can do to make</font><font color="#CCCCCC"> it</font>

6
00:00:17,320 --> 00:00:21,070
more efficient<font color="#E5E5E5"> in</font><font color="#CCCCCC"> practice</font><font color="#E5E5E5"> so if you're</font>

7
00:00:19,119 --> 00:00:23,470
not familiar with PIR here's the basic

8
00:00:21,070 --> 00:00:25,450
<font color="#CCCCCC">set up</font><font color="#E5E5E5"> there is a server and the server</font>

9
00:00:23,470 --> 00:00:26,918
has many files these files could be

10
00:00:25,450 --> 00:00:28,149
movies they could be songs that could be

11
00:00:26,919 --> 00:00:30,669
academic papers it doesn't matter

12
00:00:28,149 --> 00:00:33,520
<font color="#E5E5E5">there's also a client who wants to</font>

13
00:00:30,669 --> 00:00:34,899
access<font color="#E5E5E5"> one of these files but it doesn't</font>

14
00:00:33,520 --> 00:00:37,239
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> reveal which</font><font color="#CCCCCC"> of these files it</font>

15
00:00:34,899 --> 00:00:38,829
is accessing<font color="#E5E5E5"> to the server one way in</font>

16
00:00:37,239 --> 00:00:40,180
<font color="#E5E5E5">which the client can do this is the</font>

17
00:00:38,829 --> 00:00:42,160
client<font color="#CCCCCC"> can just download</font><font color="#E5E5E5"> the entire</font>

18
00:00:40,180 --> 00:00:44,950
database<font color="#E5E5E5"> and then locally select the</font>

19
00:00:42,160 --> 00:00:48,279
file that<font color="#E5E5E5"> he or she cares about but this</font>

20
00:00:44,950 --> 00:00:50,610
has<font color="#E5E5E5"> very high communication</font><font color="#CCCCCC"> costs</font><font color="#E5E5E5"> so the</font>

21
00:00:48,280 --> 00:00:53,470
purpose of PIR protocols<font color="#E5E5E5"> is to achieve</font>

22
00:00:50,610 --> 00:00:55,540
<font color="#E5E5E5">this privacy guarantee but at a much</font>

23
00:00:53,470 --> 00:00:57,489
lower communication cost and like I said

24
00:00:55,540 --> 00:01:00,160
PIR is very useful and<font color="#E5E5E5"> it has many</font>

25
00:00:57,490 --> 00:01:01,600
<font color="#CCCCCC">applications</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> if you want</font><font color="#E5E5E5"> to</font>

26
00:01:00,160 --> 00:01:03,040
figure out<font color="#E5E5E5"> which of your friends are</font>

27
00:01:01,600 --> 00:01:04,360
part of a social<font color="#E5E5E5"> network</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> you don't</font>

28
00:01:03,040 --> 00:01:06,429
want to reveal<font color="#E5E5E5"> to the social network</font>

29
00:01:04,360 --> 00:01:08,229
operator<font color="#CCCCCC"> where your friends are you</font>

30
00:01:06,430 --> 00:01:10,240
might use PIR for that<font color="#E5E5E5"> if you want to</font>

31
00:01:08,229 --> 00:01:12,520
fetch ads without<font color="#E5E5E5"> revealing which ad you</font>

32
00:01:10,240 --> 00:01:14,470
fetch<font color="#E5E5E5"> from the ad network you might use</font>

33
00:01:12,520 --> 00:01:15,940
PIR for that if you<font color="#E5E5E5"> want to</font><font color="#CCCCCC"> watch a</font>

34
00:01:14,470 --> 00:01:17,200
<font color="#E5E5E5">movie</font><font color="#CCCCCC"> on Netflix but you don't want to</font>

35
00:01:15,940 --> 00:01:19,090
reveal<font color="#E5E5E5"> to Netflix which movie you're</font>

36
00:01:17,200 --> 00:01:20,890
watching<font color="#E5E5E5"> you might use PIR for that so</font>

37
00:01:19,090 --> 00:01:23,979
<font color="#E5E5E5">you get sort</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the point here</font>

38
00:01:20,890 --> 00:01:26,260
PIR comes in two flavors<font color="#CCCCCC"> one of them is</font>

39
00:01:23,979 --> 00:01:28,060
the<font color="#E5E5E5"> information theoretic flavor this</font>

40
00:01:26,260 --> 00:01:29,590
requires multiple<font color="#E5E5E5"> servers that do not</font>

41
00:01:28,060 --> 00:01:31,210
<font color="#E5E5E5">collude with each other so if you're</font>

42
00:01:29,590 --> 00:01:33,820
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> with that assumption then you can</font>

43
00:01:31,210 --> 00:01:35,440
use<font color="#E5E5E5"> that</font><font color="#CCCCCC"> there's also the computational</font>

44
00:01:33,820 --> 00:01:37,389
variant of PIR<font color="#E5E5E5"> which requires</font>

45
00:01:35,440 --> 00:01:39,039
cryptographic assumptions and it's more

46
00:01:37,390 --> 00:01:41,350
<font color="#E5E5E5">expensive</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it doesn't require</font><font color="#CCCCCC"> the</font>

47
00:01:39,040 --> 00:01:42,549
known coalition assumption<font color="#E5E5E5"> so personally</font>

48
00:01:41,350 --> 00:01:44,380
I prefer this<font color="#CCCCCC"> because it's much easier</font>

49
00:01:42,549 --> 00:01:46,119
<font color="#CCCCCC">to</font><font color="#E5E5E5"> deploy because you don't have to make</font>

50
00:01:44,380 --> 00:01:48,399
that assumption<font color="#CCCCCC"> and so that's why I'm</font>

51
00:01:46,119 --> 00:01:52,600
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to focus on this so just to give</font>

52
00:01:48,400 --> 00:01:55,510
you<font color="#E5E5E5"> our results in a nutshell here</font><font color="#CCCCCC"> the</font>

53
00:01:52,600 --> 00:01:56,979
<font color="#E5E5E5">y-axis is</font><font color="#CCCCCC"> the amount of</font><font color="#E5E5E5"> communication</font>

54
00:01:55,510 --> 00:02:00,220
required between<font color="#E5E5E5"> the client and the</font>

55
00:01:56,979 --> 00:02:02,229
server to fetch a single file from a

56
00:02:00,220 --> 00:02:04,090
database<font color="#CCCCCC"> here the x-axis is the size of</font>

57
00:02:02,229 --> 00:02:06,100
the<font color="#E5E5E5"> database and the black line is</font><font color="#CCCCCC"> just</font>

58
00:02:04,090 --> 00:02:07,630
downloading the<font color="#CCCCCC"> entire database</font><font color="#E5E5E5"> and the</font>

59
00:02:06,100 --> 00:02:09,220
yellow<font color="#E5E5E5"> line is just</font><font color="#CCCCCC"> a non-private</font>

60
00:02:07,630 --> 00:02:10,598
retrieval basically you ask the server

61
00:02:09,220 --> 00:02:13,330
please send me a file<font color="#E5E5E5"> and the server</font>

62
00:02:10,598 --> 00:02:14,969
sends<font color="#CCCCCC"> you the file the orange line is</font><font color="#E5E5E5"> X</font>

63
00:02:13,330 --> 00:02:17,390
PIR which is the state of<font color="#E5E5E5"> the art</font>

64
00:02:14,969 --> 00:02:20,420
computational PIR library

65
00:02:17,390 --> 00:02:23,209
<font color="#E5E5E5">if you take a</font><font color="#CCCCCC"> look at what it</font><font color="#E5E5E5"> costs to</font>

66
00:02:20,420 --> 00:02:25,549
download at 288<font color="#E5E5E5"> by file it's actually</font>

67
00:02:23,210 --> 00:02:28,910
pretty significant<font color="#E5E5E5"> it's 17 17 megabytes</font>

68
00:02:25,550 --> 00:02:31,730
that's<font color="#CCCCCC"> 60,000 times more costly than the</font>

69
00:02:28,910 --> 00:02:34,910
non private version our work improves

70
00:02:31,730 --> 00:02:36,530
this by an order of<font color="#E5E5E5"> magnitude or so and</font>

71
00:02:34,910 --> 00:02:40,430
I'm<font color="#CCCCCC"> gonna describe</font><font color="#E5E5E5"> how we do it so we</font>

72
00:02:36,530 --> 00:02:44,120
<font color="#CCCCCC">basically are</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> PIR on larger</font>

73
00:02:40,430 --> 00:02:46,010
databases<font color="#E5E5E5"> or use PIR on regimes where</font>

74
00:02:44,120 --> 00:02:47,630
<font color="#CCCCCC">network communication is not</font><font color="#E5E5E5"> plentiful</font>

75
00:02:46,010 --> 00:02:50,179
for example if the clients are mobile

76
00:02:47,630 --> 00:02:52,310
devices so the rest of<font color="#CCCCCC"> this</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> is</font>

77
00:02:50,180 --> 00:02:54,410
<font color="#CCCCCC">gonna be as follows</font><font color="#E5E5E5"> I'm gonna give you</font>

78
00:02:52,310 --> 00:02:56,570
some background on<font color="#E5E5E5"> a concrete PIR scheme</font>

79
00:02:54,410 --> 00:02:58,160
then I'll tell<font color="#CCCCCC"> you what this source is</font>

80
00:02:56,570 --> 00:03:01,340
above her head<font color="#E5E5E5"> for that PIR scheme</font><font color="#CCCCCC"> our</font>

81
00:02:58,160 --> 00:03:02,660
and<font color="#CCCCCC"> our solution addresses</font><font color="#E5E5E5"> them and then</font>

82
00:03:01,340 --> 00:03:05,360
I'll talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> our implementation</font><font color="#CCCCCC"> and</font>

83
00:03:02,660 --> 00:03:07,760
evaluation<font color="#CCCCCC"> so let me talk</font><font color="#E5E5E5"> about the PIR</font>

84
00:03:05,360 --> 00:03:12,050
protocol due to<font color="#CCCCCC"> Julien</font><font color="#E5E5E5"> Stern which was</font>

85
00:03:07,760 --> 00:03:14,120
proposed in<font color="#E5E5E5"> a</font><font color="#CCCCCC"> script in 1998 so in PIR</font>

86
00:03:12,050 --> 00:03:17,030
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> this underlying assumption that</font>

87
00:03:14,120 --> 00:03:19,280
the client knows<font color="#E5E5E5"> the exact position in</font>

88
00:03:17,030 --> 00:03:21,500
<font color="#E5E5E5">the service database of the element that</font>

89
00:03:19,280 --> 00:03:23,630
<font color="#E5E5E5">will be retrieved so in this case the</font>

90
00:03:21,500 --> 00:03:26,060
<font color="#CCCCCC">client is interested in file two so it</font>

91
00:03:23,630 --> 00:03:27,859
knows that the file is<font color="#CCCCCC"> in a position to</font>

92
00:03:26,060 --> 00:03:29,900
what the<font color="#CCCCCC"> client does with this</font>

93
00:03:27,860 --> 00:03:31,940
<font color="#CCCCCC">information is it generates a query</font>

94
00:03:29,900 --> 00:03:33,890
vector where every entry in<font color="#CCCCCC"> this vector</font>

95
00:03:31,940 --> 00:03:36,290
<font color="#E5E5E5">is a zero except for the entry at</font>

96
00:03:33,890 --> 00:03:38,779
position 2 which is a 1<font color="#CCCCCC"> now what the</font>

97
00:03:36,290 --> 00:03:40,609
client does is then encrypts each of

98
00:03:38,780 --> 00:03:42,920
this entries individually the way to

99
00:03:40,610 --> 00:03:46,310
<font color="#E5E5E5">interpret this</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> each blue box is</font>

100
00:03:42,920 --> 00:03:47,750
an encryption as a different encryption

101
00:03:46,310 --> 00:03:48,950
<font color="#E5E5E5">of 0 and encryption of one this is</font>

102
00:03:47,750 --> 00:03:50,330
semantically secure so they're all

103
00:03:48,950 --> 00:03:52,850
indistinguishable from<font color="#E5E5E5"> each other and</font>

104
00:03:50,330 --> 00:03:55,040
this<font color="#CCCCCC"> is also</font><font color="#E5E5E5"> additively homomorphic</font>

105
00:03:52,850 --> 00:03:57,650
meaning that the server without<font color="#CCCCCC"> having</font>

106
00:03:55,040 --> 00:04:00,260
the secret key<font color="#E5E5E5"> can take</font><font color="#CCCCCC"> two ciphertext</font>

107
00:03:57,650 --> 00:04:01,700
and<font color="#E5E5E5"> add them to add them and then get</font>

108
00:04:00,260 --> 00:04:03,590
back the sum<font color="#E5E5E5"> of the corresponding</font>

109
00:04:01,700 --> 00:04:06,410
<font color="#CCCCCC">plaintext and</font><font color="#E5E5E5"> it can also multiply a</font>

110
00:04:03,590 --> 00:04:08,239
<font color="#CCCCCC">ciphertext</font><font color="#E5E5E5"> by a plaintext so what the</font>

111
00:04:06,410 --> 00:04:10,459
client does is it sends this<font color="#E5E5E5"> query</font>

112
00:04:08,239 --> 00:04:13,239
vector over the network<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the server</font>

113
00:04:10,459 --> 00:04:15,410
<font color="#E5E5E5">and the server computes a dot product so</font>

114
00:04:13,239 --> 00:04:16,459
<font color="#CCCCCC">this is</font><font color="#E5E5E5"> going to be a bunch of entry</font>

115
00:04:15,410 --> 00:04:18,260
wise multiplications these

116
00:04:16,459 --> 00:04:20,180
<font color="#E5E5E5">multiplications are between ciphertext</font>

117
00:04:18,260 --> 00:04:22,849
<font color="#E5E5E5">the blue boxes and plaintext you can</font>

118
00:04:20,180 --> 00:04:24,650
think<font color="#E5E5E5"> of files as giant integers and</font>

119
00:04:22,850 --> 00:04:26,450
<font color="#E5E5E5">then multiplying by 0 gives you 0</font>

120
00:04:24,650 --> 00:04:28,609
multiplying by 1 gives you<font color="#E5E5E5"> whatever you</font>

121
00:04:26,450 --> 00:04:30,650
started with and then because each<font color="#CCCCCC"> of</font>

122
00:04:28,610 --> 00:04:31,200
the cipher tag because<font color="#E5E5E5"> the</font><font color="#CCCCCC"> crypto scheme</font>

123
00:04:30,650 --> 00:04:33,330
is<font color="#E5E5E5"> additive</font>

124
00:04:31,200 --> 00:04:35,670
<font color="#E5E5E5">I'm a morphic the server can add all of</font>

125
00:04:33,330 --> 00:04:38,310
<font color="#E5E5E5">the</font><font color="#CCCCCC"> ciphertext in the output</font><font color="#E5E5E5"> into a</font>

126
00:04:35,670 --> 00:04:40,050
single<font color="#CCCCCC"> ciphertext that encrypts the file</font>

127
00:04:38,310 --> 00:04:42,150
<font color="#E5E5E5">and this</font><font color="#CCCCCC"> is what the client sends</font><font color="#E5E5E5"> back</font>

128
00:04:40,050 --> 00:04:43,920
<font color="#E5E5E5">to the server</font><font color="#CCCCCC"> what the server sends back</font>

129
00:04:42,150 --> 00:04:46,530
to<font color="#CCCCCC"> the line now you might look</font><font color="#E5E5E5"> at this</font>

130
00:04:43,920 --> 00:04:48,450
<font color="#E5E5E5">and</font><font color="#CCCCCC"> say well hold on one second</font><font color="#E5E5E5"> the size</font>

131
00:04:46,530 --> 00:04:50,429
of the query vector is as<font color="#E5E5E5"> large as the</font>

132
00:04:48,450 --> 00:04:52,170
<font color="#CCCCCC">database</font><font color="#E5E5E5"> so how are we saving any</font>

133
00:04:50,430 --> 00:04:53,070
communication at all<font color="#E5E5E5"> well there's a</font>

134
00:04:52,170 --> 00:04:55,290
standard technique<font color="#E5E5E5"> to reduce</font>

135
00:04:53,070 --> 00:04:57,240
<font color="#CCCCCC">communication costs which is that</font><font color="#E5E5E5"> if</font>

136
00:04:55,290 --> 00:05:00,110
instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> representing the database as</font>

137
00:04:57,240 --> 00:05:03,180
a vector<font color="#CCCCCC"> we</font><font color="#E5E5E5"> represent it as a</font><font color="#CCCCCC"> matrix</font>

138
00:05:00,110 --> 00:05:04,710
then we<font color="#E5E5E5"> just need two queries one to</font>

139
00:05:03,180 --> 00:05:06,540
specify the road one to specify the

140
00:05:04,710 --> 00:05:08,810
column and observe that each of these

141
00:05:06,540 --> 00:05:10,650
query vectors are square root of<font color="#CCCCCC"> n</font><font color="#E5E5E5"> and</font>

142
00:05:08,810 --> 00:05:14,640
therefore the communication is going<font color="#E5E5E5"> to</font>

143
00:05:10,650 --> 00:05:17,849
<font color="#CCCCCC">strongly sub linear</font><font color="#E5E5E5"> net okay so this is</font>

144
00:05:14,640 --> 00:05:19,800
<font color="#CCCCCC">turns protocol and</font><font color="#E5E5E5"> one of the issues</font>

145
00:05:17,850 --> 00:05:21,840
with this protocol<font color="#CCCCCC"> is that even though</font>

146
00:05:19,800 --> 00:05:24,720
the communication is<font color="#CCCCCC"> sub linear we're</font>

147
00:05:21,840 --> 00:05:27,539
still sending thousands of cipher types

148
00:05:24,720 --> 00:05:28,770
<font color="#E5E5E5">between the client</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the server</font><font color="#CCCCCC"> so in</font>

149
00:05:27,540 --> 00:05:30,840
other words the query is still very

150
00:05:28,770 --> 00:05:32,250
<font color="#E5E5E5">large the second issue is that the</font>

151
00:05:30,840 --> 00:05:33,719
<font color="#CCCCCC">computation that</font><font color="#E5E5E5"> the server</font><font color="#CCCCCC"> is</font>

152
00:05:32,250 --> 00:05:36,330
performing all those homomorphic

153
00:05:33,720 --> 00:05:39,360
operations are<font color="#E5E5E5"> very expensive so in the</font>

154
00:05:36,330 --> 00:05:41,430
paper<font color="#E5E5E5"> we</font><font color="#CCCCCC"> discuss two techniques</font><font color="#E5E5E5"> one is a</font>

155
00:05:39,360 --> 00:05:43,650
compression<font color="#E5E5E5"> technique that allows us</font><font color="#CCCCCC"> to</font>

156
00:05:41,430 --> 00:05:46,920
take this<font color="#CCCCCC"> entire query vector and make</font>

157
00:05:43,650 --> 00:05:48,510
it into a<font color="#E5E5E5"> single ciphertext that</font><font color="#CCCCCC"> the</font>

158
00:05:46,920 --> 00:05:52,170
client can<font color="#CCCCCC"> then send to the server and</font>

159
00:05:48,510 --> 00:05:55,349
in<font color="#CCCCCC"> intern state communication</font><font color="#E5E5E5"> cost we</font>

160
00:05:52,170 --> 00:05:56,880
also have an encoding that<font color="#E5E5E5"> allows the</font>

161
00:05:55,350 --> 00:05:58,560
server to<font color="#E5E5E5"> encode the database in such a</font>

162
00:05:56,880 --> 00:06:01,110
way<font color="#CCCCCC"> that it can process</font><font color="#E5E5E5"> a batch</font><font color="#CCCCCC"> of</font>

163
00:05:58,560 --> 00:06:02,430
queries from<font color="#E5E5E5"> the same client</font><font color="#CCCCCC"> and that</font>

164
00:06:01,110 --> 00:06:04,140
processing is more efficient<font color="#CCCCCC"> in</font>

165
00:06:02,430 --> 00:06:05,760
processing each query<font color="#CCCCCC"> individually in</font>

166
00:06:04,140 --> 00:06:08,010
other words the server gets<font color="#CCCCCC"> amortisation</font>

167
00:06:05,760 --> 00:06:10,890
<font color="#CCCCCC">if you're familiar with batch codes are</font>

168
00:06:08,010 --> 00:06:14,159
encoding is it's a relaxation<font color="#CCCCCC"> of batch</font>

169
00:06:10,890 --> 00:06:16,080
codes<font color="#E5E5E5"> but is weaker but it's much more</font>

170
00:06:14,160 --> 00:06:17,820
efficient<font color="#E5E5E5"> so I'm not in this</font><font color="#CCCCCC"> talk I'm</font>

171
00:06:16,080 --> 00:06:19,260
only going to<font color="#E5E5E5"> focus on how we do</font>

172
00:06:17,820 --> 00:06:21,000
compression if you're interested in how

173
00:06:19,260 --> 00:06:21,920
<font color="#E5E5E5">we do the encoding please take a look at</font>

174
00:06:21,000 --> 00:06:25,020
the paper

175
00:06:21,920 --> 00:06:27,780
so abstractly<font color="#E5E5E5"> what we want is for</font>

176
00:06:25,020 --> 00:06:29,880
decline<font color="#CCCCCC"> to instead</font><font color="#E5E5E5"> of sending this</font>

177
00:06:27,780 --> 00:06:32,549
gigantic query vector to just send an

178
00:06:29,880 --> 00:06:34,170
encryption<font color="#E5E5E5"> of</font><font color="#CCCCCC"> 2 to the server</font><font color="#E5E5E5"> but why</font>

179
00:06:32,550 --> 00:06:36,330
doesn't<font color="#CCCCCC"> this work right now the reason</font>

180
00:06:34,170 --> 00:06:37,670
it doesn't work is because<font color="#E5E5E5"> the PIR</font>

181
00:06:36,330 --> 00:06:40,979
protocol<font color="#E5E5E5"> that I showed</font><font color="#CCCCCC"> you earlier</font>

182
00:06:37,670 --> 00:06:42,480
<font color="#CCCCCC">requires this query vector of zeros and</font>

183
00:06:40,980 --> 00:06:44,639
<font color="#CCCCCC">ones so that</font><font color="#E5E5E5"> you can do the dot product</font>

184
00:06:42,480 --> 00:06:47,430
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> so what we're gonna propose</font>

185
00:06:44,639 --> 00:06:49,349
is for the server<font color="#E5E5E5"> to compute a</font>

186
00:06:47,430 --> 00:06:51,479
decompression function on this

187
00:06:49,349 --> 00:06:53,279
<font color="#E5E5E5">encryption of</font><font color="#CCCCCC"> 2 and the output of this</font>

188
00:06:51,479 --> 00:06:54,840
decompression function should<font color="#CCCCCC"> be the</font>

189
00:06:53,279 --> 00:06:57,300
query vector that<font color="#E5E5E5"> the client would have</font>

190
00:06:54,840 --> 00:06:58,560
generated<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> first place and the</font>

191
00:06:57,300 --> 00:07:01,560
server<font color="#E5E5E5"> should be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to do this without</font>

192
00:06:58,560 --> 00:07:03,779
learning anything in the process<font color="#E5E5E5"> so one</font>

193
00:07:01,560 --> 00:07:05,460
strum and solution to do this is let's

194
00:07:03,779 --> 00:07:07,529
<font color="#CCCCCC">just use fully homomorphic encryption so</font>

195
00:07:05,460 --> 00:07:10,590
if we have the ability<font color="#CCCCCC"> to add</font><font color="#E5E5E5"> ciphertext</font>

196
00:07:07,529 --> 00:07:12,330
and multiply ciphertext<font color="#E5E5E5"> we can compute</font>

197
00:07:10,590 --> 00:07:14,909
arbitrary functions including<font color="#E5E5E5"> the</font>

198
00:07:12,330 --> 00:07:16,590
compression<font color="#CCCCCC"> the problem with using fully</font>

199
00:07:14,909 --> 00:07:18,330
homomorphic encryption<font color="#CCCCCC"> is the</font>

200
00:07:16,590 --> 00:07:20,250
multiplications are very very<font color="#CCCCCC"> very</font>

201
00:07:18,330 --> 00:07:22,050
<font color="#E5E5E5">expensive</font><font color="#CCCCCC"> there are</font><font color="#E5E5E5"> orders of magnitude</font>

202
00:07:20,250 --> 00:07:24,419
more<font color="#E5E5E5"> expensive than some of the other</font>

203
00:07:22,050 --> 00:07:26,099
<font color="#E5E5E5">operations but what's worse is</font><font color="#CCCCCC"> that if</font>

204
00:07:24,419 --> 00:07:27,628
you're going to<font color="#CCCCCC"> use multiplications</font><font color="#E5E5E5"> you</font>

205
00:07:26,099 --> 00:07:29,460
also have to use larger security

206
00:07:27,629 --> 00:07:31,349
parameters which means that some<font color="#E5E5E5"> of your</font>

207
00:07:29,460 --> 00:07:33,508
other operations become more expensive

208
00:07:31,349 --> 00:07:36,150
<font color="#CCCCCC">as well</font><font color="#E5E5E5"> which means that the entire PIR</font>

209
00:07:33,509 --> 00:07:38,189
protocol becomes<font color="#E5E5E5"> more expensive so our</font>

210
00:07:36,150 --> 00:07:39,599
goal is to implement<font color="#E5E5E5"> this decompression</font>

211
00:07:38,189 --> 00:07:42,719
function<font color="#E5E5E5"> without</font><font color="#CCCCCC"> using any</font>

212
00:07:39,599 --> 00:07:46,020
multiplications at all now to explain

213
00:07:42,719 --> 00:07:48,569
<font color="#E5E5E5">how we do this let</font><font color="#CCCCCC"> me first</font><font color="#E5E5E5"> %</font><font color="#CCCCCC"> x PIR so x</font>

214
00:07:46,020 --> 00:07:50,990
<font color="#CCCCCC">bi are essentially implements Sterns</font>

215
00:07:48,569 --> 00:07:53,669
protocol but it makes one key

216
00:07:50,990 --> 00:07:57,120
optimization<font color="#E5E5E5"> which is that instead of</font>

217
00:07:53,669 --> 00:07:59,339
having<font color="#E5E5E5"> this ciphertext</font><font color="#CCCCCC"> be for</font><font color="#E5E5E5"> example</font>

218
00:07:57,120 --> 00:08:02,129
<font color="#CCCCCC">the</font><font color="#E5E5E5"> poly a crypto system they're going</font>

219
00:07:59,339 --> 00:08:04,139
<font color="#CCCCCC">to be from a</font><font color="#E5E5E5"> lattice based crypto system</font>

220
00:08:02,129 --> 00:08:06,960
and you're going to pre-process the

221
00:08:04,139 --> 00:08:08,729
<font color="#E5E5E5">database</font><font color="#CCCCCC"> and the result is</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> all the</font>

222
00:08:06,960 --> 00:08:11,609
homomorphic operations<font color="#E5E5E5"> are going to be</font>

223
00:08:08,729 --> 00:08:13,919
much more efficient<font color="#E5E5E5"> so in</font><font color="#CCCCCC"> XP ir the</font>

224
00:08:11,610 --> 00:08:16,199
plaintext space<font color="#E5E5E5"> they're not integers</font>

225
00:08:13,919 --> 00:08:17,339
they're actually polynomials so<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> is</font>

226
00:08:16,199 --> 00:08:20,250
<font color="#CCCCCC">just going</font><font color="#E5E5E5"> to be represented as the</font>

227
00:08:17,339 --> 00:08:21,389
polynomial with all<font color="#E5E5E5"> 0 coefficients and 1</font>

228
00:08:20,250 --> 00:08:23,069
is<font color="#E5E5E5"> gonna be represented as the</font>

229
00:08:21,389 --> 00:08:25,110
polynomial where the constant term is a

230
00:08:23,069 --> 00:08:27,180
1<font color="#CCCCCC"> and all of the other coefficients are</font>

231
00:08:25,110 --> 00:08:29,099
0<font color="#E5E5E5"> furthermore because the plaintext</font>

232
00:08:27,180 --> 00:08:30,960
space is polynomials all of the files

233
00:08:29,099 --> 00:08:33,029
also<font color="#E5E5E5"> have to be encoded as</font><font color="#CCCCCC"> polynomials</font>

234
00:08:30,960 --> 00:08:35,789
<font color="#E5E5E5">and this encoding is very simple just</font>

235
00:08:33,029 --> 00:08:37,019
take<font color="#E5E5E5"> the first 20 bits of the file put</font>

236
00:08:35,789 --> 00:08:38,458
them in the first<font color="#CCCCCC"> coefficient the next</font>

237
00:08:37,019 --> 00:08:41,250
20 bits in the next coefficient<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so</font>

238
00:08:38,458 --> 00:08:42,958
on now what we observe is that<font color="#E5E5E5"> you know</font>

239
00:08:41,250 --> 00:08:45,149
this<font color="#E5E5E5"> lattice</font><font color="#CCCCCC"> base crypto system support</font>

240
00:08:42,958 --> 00:08:47,130
an operation called substitution<font color="#E5E5E5"> this is</font>

241
00:08:45,149 --> 00:08:49,649
an operation that was<font color="#E5E5E5"> used by</font><font color="#CCCCCC"> gentry</font>

242
00:08:47,130 --> 00:08:51,360
healthy and<font color="#E5E5E5"> smart to build arbitrary</font>

243
00:08:49,649 --> 00:08:52,920
permutation networks<font color="#CCCCCC"> but we</font><font color="#E5E5E5"> don't need</font>

244
00:08:51,360 --> 00:08:55,649
<font color="#CCCCCC">other generality we just need the</font>

245
00:08:52,920 --> 00:08:58,019
substitution building block and what

246
00:08:55,649 --> 00:08:59,819
substitution does is given

247
00:08:58,019 --> 00:09:02,309
encryption<font color="#E5E5E5"> of a polynomial and some</font>

248
00:08:59,819 --> 00:09:03,988
<font color="#CCCCCC">integers that</font><font color="#E5E5E5"> take three it allows you</font>

249
00:09:02,309 --> 00:09:06,329
<font color="#E5E5E5">to get back an encryption of a</font>

250
00:09:03,989 --> 00:09:09,420
polynomial<font color="#CCCCCC"> where every instance</font><font color="#E5E5E5"> of X is</font>

251
00:09:06,329 --> 00:09:11,998
substituted by X cube<font color="#CCCCCC"> okay and this</font>

252
00:09:09,420 --> 00:09:13,618
operation<font color="#E5E5E5"> is orders</font><font color="#CCCCCC"> of magnitude more</font>

253
00:09:11,999 --> 00:09:15,899
efficient than homomorphic

254
00:09:13,619 --> 00:09:18,480
multiplications<font color="#E5E5E5"> and we can use</font><font color="#CCCCCC"> this</font>

255
00:09:15,899 --> 00:09:20,489
<font color="#E5E5E5">three operations addition of ciphertext</font>

256
00:09:18,480 --> 00:09:22,679
plaintext ciphertext multiplication<font color="#E5E5E5"> and</font>

257
00:09:20,489 --> 00:09:25,489
substitution<font color="#E5E5E5"> to build a function called</font>

258
00:09:22,679 --> 00:09:28,110
extract<font color="#E5E5E5"> and here's how extract works</font>

259
00:09:25,489 --> 00:09:30,360
so for extract we start with an

260
00:09:28,110 --> 00:09:31,499
encryption<font color="#E5E5E5"> of a polynomial and what it</font>

261
00:09:30,360 --> 00:09:33,959
<font color="#E5E5E5">allows you to do is it</font><font color="#CCCCCC"> allows you to</font>

262
00:09:31,499 --> 00:09:36,059
<font color="#E5E5E5">take each of the coefficients and place</font>

263
00:09:33,959 --> 00:09:38,219
them in<font color="#E5E5E5"> the constant term of a new</font>

264
00:09:36,059 --> 00:09:41,069
encrypted polynomial so for example we

265
00:09:38,220 --> 00:09:45,059
<font color="#E5E5E5">take this</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> and we place</font><font color="#CCCCCC"> it in</font><font color="#E5E5E5"> the</font>

266
00:09:41,069 --> 00:09:46,649
constant term<font color="#E5E5E5"> of a new polynomial we</font>

267
00:09:45,059 --> 00:09:48,360
take the<font color="#E5E5E5"> two we place it in the constant</font>

268
00:09:46,649 --> 00:09:49,769
term<font color="#E5E5E5"> of a new encrypted polynomial we</font>

269
00:09:48,360 --> 00:09:52,019
take the zero<font color="#CCCCCC"> place it in the constant</font>

270
00:09:49,769 --> 00:09:55,319
term<font color="#E5E5E5"> zero place and in the constant then</font>

271
00:09:52,019 --> 00:09:57,029
we can use this extract procedure to

272
00:09:55,319 --> 00:10:00,089
build a<font color="#E5E5E5"> compression and the compression</font>

273
00:09:57,029 --> 00:10:02,069
<font color="#E5E5E5">as follows so in</font><font color="#CCCCCC"> XP</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> are what the</font>

274
00:10:00,089 --> 00:10:04,139
client is doing<font color="#E5E5E5"> is is generating a bunch</font>

275
00:10:02,069 --> 00:10:06,389
of different encryptions of<font color="#CCCCCC"> zero and an</font>

276
00:10:04,139 --> 00:10:09,720
encryption of<font color="#E5E5E5"> one what we're going to</font><font color="#CCCCCC"> do</font>

277
00:10:06,389 --> 00:10:12,269
<font color="#CCCCCC">instead is</font><font color="#E5E5E5"> encode this query vector in</font>

278
00:10:09,720 --> 00:10:14,009
the coefficients of the<font color="#E5E5E5"> polynomial so</font>

279
00:10:12,269 --> 00:10:16,170
because the client was interested in<font color="#E5E5E5"> the</font>

280
00:10:14,009 --> 00:10:18,329
element at position<font color="#E5E5E5"> two we're gonna set</font>

281
00:10:16,170 --> 00:10:19,920
the one next to<font color="#CCCCCC"> X square and everything</font>

282
00:10:18,329 --> 00:10:21,299
else<font color="#E5E5E5"> all the other coefficients are</font>

283
00:10:19,920 --> 00:10:22,709
going<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> zero</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is going to be</font>

284
00:10:21,299 --> 00:10:25,079
a single<font color="#E5E5E5"> ciphertext of this polynomial</font>

285
00:10:22,709 --> 00:10:27,689
<font color="#E5E5E5">which the client</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to send to the</font>

286
00:10:25,079 --> 00:10:29,549
server<font color="#E5E5E5"> now the server is</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> receive</font>

287
00:10:27,689 --> 00:10:31,829
<font color="#CCCCCC">the ciphertext and what he</font><font color="#E5E5E5"> will do is he</font>

288
00:10:29,549 --> 00:10:33,629
<font color="#CCCCCC">will call extract</font><font color="#E5E5E5"> on it and if you</font>

289
00:10:31,829 --> 00:10:35,969
notice by extracting<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these</font>

290
00:10:33,629 --> 00:10:38,369
<font color="#CCCCCC">coefficients the server was able to</font>

291
00:10:35,970 --> 00:10:39,899
<font color="#CCCCCC">reconstruct the query vector that</font><font color="#E5E5E5"> the</font>

292
00:10:38,369 --> 00:10:41,429
client would<font color="#E5E5E5"> have</font><font color="#CCCCCC"> generated in the</font><font color="#E5E5E5"> first</font>

293
00:10:39,899 --> 00:10:43,470
place and then the server can proceed

294
00:10:41,429 --> 00:10:45,629
with<font color="#CCCCCC"> the rest of the PIR protocol</font><font color="#E5E5E5"> as</font>

295
00:10:43,470 --> 00:10:47,429
before now you might look<font color="#E5E5E5"> at this and</font>

296
00:10:45,629 --> 00:10:49,679
<font color="#CCCCCC">say hold on one second</font><font color="#E5E5E5"> what is the</font>

297
00:10:47,429 --> 00:10:51,059
degree<font color="#CCCCCC"> of this polynomial going to be is</font>

298
00:10:49,679 --> 00:10:53,660
<font color="#E5E5E5">it going to be as large as the database</font>

299
00:10:51,059 --> 00:10:57,299
<font color="#E5E5E5">and the answer is yes but recall</font><font color="#CCCCCC"> that</font>

300
00:10:53,660 --> 00:10:59,249
previously we are structuring<font color="#E5E5E5"> the</font>

301
00:10:57,299 --> 00:11:00,540
database<font color="#E5E5E5"> not as a vector but</font><font color="#CCCCCC"> as a matrix</font>

302
00:10:59,249 --> 00:11:03,029
<font color="#E5E5E5">so really the degree</font><font color="#CCCCCC"> of the polynomial</font>

303
00:11:00,540 --> 00:11:04,709
is<font color="#CCCCCC"> going to be square root</font><font color="#E5E5E5"> of N or if we</font>

304
00:11:03,029 --> 00:11:06,509
want it<font color="#E5E5E5"> to be smaller we can go into</font>

305
00:11:04,709 --> 00:11:09,888
<font color="#E5E5E5">higher dimensions we can represent the</font>

306
00:11:06,509 --> 00:11:11,820
database as<font color="#CCCCCC"> the dimensional hypercube ok</font>

307
00:11:09,889 --> 00:11:13,260
so in other words

308
00:11:11,820 --> 00:11:15,840
we've managed to instantiate<font color="#E5E5E5"> this</font>

309
00:11:13,260 --> 00:11:18,990
abstract solution where the client<font color="#E5E5E5"> is</font>

310
00:11:15,840 --> 00:11:21,390
sending<font color="#E5E5E5"> this encryption of</font><font color="#CCCCCC"> two and the</font>

311
00:11:18,990 --> 00:11:22,800
server<font color="#CCCCCC"> is performing this decompression</font>

312
00:11:21,390 --> 00:11:24,449
on this encryption<font color="#E5E5E5"> of two getting back</font>

313
00:11:22,800 --> 00:11:27,599
the query vector<font color="#E5E5E5"> doing the rest of the</font>

314
00:11:24,450 --> 00:11:29,370
PIR protocol<font color="#E5E5E5"> now let me talk about our</font>

315
00:11:27,600 --> 00:11:31,020
<font color="#E5E5E5">implementation</font><font color="#CCCCCC"> on evaluation and hope to</font>

316
00:11:29,370 --> 00:11:34,590
<font color="#E5E5E5">convince you that this</font><font color="#CCCCCC"> is actually</font>

317
00:11:31,020 --> 00:11:36,960
<font color="#E5E5E5">efficient so we've implemented two</font>

318
00:11:34,590 --> 00:11:39,660
libraries<font color="#CCCCCC"> one is called SIL PIR</font><font color="#E5E5E5"> which is</font>

319
00:11:36,960 --> 00:11:41,370
essentially X PIR<font color="#E5E5E5"> but with the</font>

320
00:11:39,660 --> 00:11:42,750
<font color="#CCCCCC">decompression procedure</font><font color="#E5E5E5"> it's a different</font>

321
00:11:41,370 --> 00:11:45,750
code base for reasons<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> explained</font>

322
00:11:42,750 --> 00:11:47,670
in the paper but it's not fundamental we

323
00:11:45,750 --> 00:11:49,860
also have a library<font color="#E5E5E5"> called MPI R and</font>

324
00:11:47,670 --> 00:11:51,469
this<font color="#E5E5E5"> library allows the server to encode</font>

325
00:11:49,860 --> 00:11:53,520
database to process multiple queries

326
00:11:51,470 --> 00:11:55,290
<font color="#E5E5E5">more efficiently than processing each</font>

327
00:11:53,520 --> 00:11:56,939
query individually<font color="#E5E5E5"> and then we also</font>

328
00:11:55,290 --> 00:11:58,589
reimplemented the<font color="#E5E5E5"> pong private</font>

329
00:11:56,940 --> 00:12:00,900
communication system using<font color="#CCCCCC"> both of</font><font color="#E5E5E5"> these</font>

330
00:11:58,590 --> 00:12:03,450
libraries<font color="#E5E5E5"> to</font><font color="#CCCCCC"> see what are the kinds of</font>

331
00:12:00,900 --> 00:12:07,800
benefits<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can expect to</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> from</font>

332
00:12:03,450 --> 00:12:09,870
<font color="#E5E5E5">using our techniques so in the paper we</font>

333
00:12:07,800 --> 00:12:11,400
answer three evaluation questions the

334
00:12:09,870 --> 00:12:13,320
first<font color="#E5E5E5"> is thus compression reduces</font>

335
00:12:11,400 --> 00:12:15,780
<font color="#CCCCCC">network cost and what is the overhead of</font>

336
00:12:13,320 --> 00:12:17,160
<font color="#E5E5E5">the</font><font color="#CCCCCC"> compression</font><font color="#E5E5E5"> the second is does</font>

337
00:12:15,780 --> 00:12:19,079
batching work well in practice<font color="#CCCCCC"> the</font>

338
00:12:17,160 --> 00:12:21,920
reason I say work well in<font color="#E5E5E5"> practice is</font>

339
00:12:19,080 --> 00:12:24,570
<font color="#CCCCCC">because our batching scheme is</font>

340
00:12:21,920 --> 00:12:26,430
probabilistic<font color="#E5E5E5"> meaning that if the client</font>

341
00:12:24,570 --> 00:12:28,200
<font color="#CCCCCC">wants</font><font color="#E5E5E5"> to get say 20 elements from the</font>

342
00:12:26,430 --> 00:12:32,130
database sometimes they might only<font color="#E5E5E5"> be</font>

343
00:12:28,200 --> 00:12:34,860
able<font color="#E5E5E5"> to get 19 or 18 or 15 and so we</font>

344
00:12:32,130 --> 00:12:37,050
wanted<font color="#CCCCCC"> to quantify</font><font color="#E5E5E5"> how often the queries</font>

345
00:12:34,860 --> 00:12:38,310
fail and whether<font color="#E5E5E5"> that's acceptable in</font>

346
00:12:37,050 --> 00:12:40,349
practice I<font color="#E5E5E5"> mean the paper we do that</font>

347
00:12:38,310 --> 00:12:41,880
<font color="#CCCCCC">evaluation it comes out to like one in a</font>

348
00:12:40,350 --> 00:12:42,920
billion<font color="#E5E5E5"> queries fail or something along</font>

349
00:12:41,880 --> 00:12:46,439
<font color="#E5E5E5">those</font><font color="#CCCCCC"> lines</font>

350
00:12:42,920 --> 00:12:48,240
<font color="#E5E5E5">now we also evaluated the poem system</font>

351
00:12:46,440 --> 00:12:49,650
and we saw significant improvements so

352
00:12:48,240 --> 00:12:53,610
in this talk I'm<font color="#E5E5E5"> gonna focus primarily</font>

353
00:12:49,650 --> 00:12:56,579
on<font color="#E5E5E5"> whether on the cost of compression</font>

354
00:12:53,610 --> 00:12:58,800
and decompression<font color="#CCCCCC"> so here I have a</font>

355
00:12:56,580 --> 00:13:00,810
<font color="#E5E5E5">comparison with</font><font color="#CCCCCC"> XP IR this is</font><font color="#E5E5E5"> the cost</font>

356
00:12:58,800 --> 00:13:03,060
of running a single<font color="#CCCCCC"> PIR query on a</font>

357
00:13:00,810 --> 00:13:07,770
database with<font color="#E5E5E5"> 1 million entries each</font>

358
00:13:03,060 --> 00:13:11,280
entry is 288 bytes<font color="#E5E5E5"> and what we find is</font>

359
00:13:07,770 --> 00:13:14,130
that compression<font color="#E5E5E5"> significantly reduces</font>

360
00:13:11,280 --> 00:13:16,680
the<font color="#E5E5E5"> cost that the network</font><font color="#CCCCCC"> cost the size</font>

361
00:13:14,130 --> 00:13:20,310
of the query by up to<font color="#E5E5E5"> two orders of</font>

362
00:13:16,680 --> 00:13:21,870
<font color="#E5E5E5">magnitude</font><font color="#CCCCCC"> and this has a second benefit</font>

363
00:13:20,310 --> 00:13:24,239
which<font color="#CCCCCC"> is that it also reduces</font><font color="#E5E5E5"> the</font>

364
00:13:21,870 --> 00:13:25,259
<font color="#E5E5E5">computational cost to the</font><font color="#CCCCCC"> client to</font>

365
00:13:24,240 --> 00:13:27,389
generate the

366
00:13:25,259 --> 00:13:29,459
this is because in<font color="#CCCCCC"> xpi our decline is</font>

367
00:13:27,389 --> 00:13:32,009
generating a bunch of encryptions of<font color="#CCCCCC"> 0</font>

368
00:13:29,459 --> 00:13:33,959
<font color="#CCCCCC">and 1 whereas in</font><font color="#E5E5E5"> CLP</font><font color="#CCCCCC"> ir the client is</font>

369
00:13:32,009 --> 00:13:35,519
<font color="#CCCCCC">only generating a polynomial and then</font>

370
00:13:33,959 --> 00:13:38,518
encrypting that poem<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is much more</font>

371
00:13:35,519 --> 00:13:39,990
efficient<font color="#CCCCCC"> this</font><font color="#E5E5E5"> does come at a cost</font>

372
00:13:38,519 --> 00:13:41,429
specifically<font color="#E5E5E5"> it</font><font color="#CCCCCC"> costs to the server</font>

373
00:13:39,990 --> 00:13:44,100
<font color="#E5E5E5">because the server has</font><font color="#CCCCCC"> to perform this</font>

374
00:13:41,429 --> 00:13:45,629
decompression function<font color="#E5E5E5"> but what we find</font>

375
00:13:44,100 --> 00:13:48,600
is that the<font color="#E5E5E5"> overhead is pretty small</font>

376
00:13:45,629 --> 00:13:51,449
<font color="#E5E5E5">about 6% which given the significant</font>

377
00:13:48,600 --> 00:13:52,920
savings that we get in network costs

378
00:13:51,449 --> 00:13:56,758
<font color="#E5E5E5">reduction I think this is an excellent</font>

379
00:13:52,920 --> 00:13:59,819
<font color="#E5E5E5">trade off now some a lot of times I've</font>

380
00:13:56,759 --> 00:14:01,350
received feedback<font color="#E5E5E5"> that if you only care</font>

381
00:13:59,819 --> 00:14:03,269
about<font color="#CCCCCC"> performance</font><font color="#E5E5E5"> and not network</font>

382
00:14:01,350 --> 00:14:05,579
<font color="#E5E5E5">resources then you're better off</font><font color="#CCCCCC"> just</font>

383
00:14:03,269 --> 00:14:07,709
downloading the database and this this

384
00:14:05,579 --> 00:14:09,829
is<font color="#E5E5E5"> true but only if you have very high</font>

385
00:14:07,709 --> 00:14:12,809
<font color="#CCCCCC">network speed</font><font color="#E5E5E5"> so the graph on the</font><font color="#CCCCCC"> Left</font>

386
00:14:09,829 --> 00:14:14,878
SCP is the secure copy command line tool

387
00:14:12,809 --> 00:14:17,490
<font color="#E5E5E5">so this is basically downloading all of</font>

388
00:14:14,879 --> 00:14:19,290
<font color="#E5E5E5">the database</font><font color="#CCCCCC"> and what we see is that</font>

389
00:14:17,490 --> 00:14:20,879
indeed if you have a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> network</font>

390
00:14:19,290 --> 00:14:21,569
bandwidth and<font color="#E5E5E5"> you only care</font><font color="#CCCCCC"> about</font>

391
00:14:20,879 --> 00:14:23,670
<font color="#E5E5E5">performance</font>

392
00:14:21,569 --> 00:14:26,219
you're better<font color="#E5E5E5"> off downloading the entire</font>

393
00:14:23,670 --> 00:14:28,110
database however<font color="#E5E5E5"> if you have network</font>

394
00:14:26,220 --> 00:14:30,059
conditions<font color="#E5E5E5"> for example the kind that you</font>

395
00:14:28,110 --> 00:14:31,949
would<font color="#CCCCCC"> see on a network</font><font color="#E5E5E5"> device it's</font>

396
00:14:30,059 --> 00:14:33,899
actually much bit much more<font color="#E5E5E5"> beneficial</font>

397
00:14:31,949 --> 00:14:35,969
to even if you don't<font color="#E5E5E5"> care about the</font>

398
00:14:33,899 --> 00:14:37,889
network consumption is<font color="#E5E5E5"> more</font><font color="#CCCCCC"> beneficial</font>

399
00:14:35,970 --> 00:14:42,089
to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> co-pi are just four</font><font color="#E5E5E5"> round-trip</font>

400
00:14:37,889 --> 00:14:44,699
time<font color="#E5E5E5"> reduction so just to summarize in</font>

401
00:14:42,089 --> 00:14:46,620
our paper<font color="#E5E5E5"> we have two techniques want to</font>

402
00:14:44,699 --> 00:14:48,508
compress PIR queries so that they're

403
00:14:46,620 --> 00:14:50,850
smaller<font color="#E5E5E5"> and you can say network</font>

404
00:14:48,509 --> 00:14:52,769
resources<font color="#E5E5E5"> and another one to amortize</font>

405
00:14:50,850 --> 00:14:54,740
the computational cost of processing<font color="#CCCCCC"> a</font>

406
00:14:52,769 --> 00:14:57,749
batch of queries from<font color="#E5E5E5"> the same client</font>

407
00:14:54,740 --> 00:14:59,399
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is we are we actually get 56 time</font>

408
00:14:57,749 --> 00:15:02,279
reduction<font color="#CCCCCC"> network costs with compression</font>

409
00:14:59,399 --> 00:15:05,670
<font color="#E5E5E5">and up to 40 times reduction</font><font color="#CCCCCC"> with</font>

410
00:15:02,279 --> 00:15:08,429
<font color="#CCCCCC">patching</font><font color="#E5E5E5"> one of the things that gets me</font>

411
00:15:05,670 --> 00:15:10,139
<font color="#E5E5E5">excited about this improvement is that</font>

412
00:15:08,429 --> 00:15:11,879
the net the client costs are actually

413
00:15:10,139 --> 00:15:14,129
<font color="#CCCCCC">low enough that you can envision using</font>

414
00:15:11,879 --> 00:15:16,079
PIR in mobile devices<font color="#CCCCCC"> both in</font><font color="#E5E5E5"> terms of</font>

415
00:15:14,129 --> 00:15:18,689
computational cost but also<font color="#CCCCCC"> in</font><font color="#E5E5E5"> terms of</font>

416
00:15:16,079 --> 00:15:20,189
network costs and we find<font color="#E5E5E5"> that when we</font>

417
00:15:18,689 --> 00:15:22,079
apply both of these techniques<font color="#CCCCCC"> to the</font>

418
00:15:20,189 --> 00:15:24,449
<font color="#CCCCCC">point private communication system we</font>

419
00:15:22,079 --> 00:15:27,089
can simultaneously achieve higher

420
00:15:24,449 --> 00:15:29,579
throughput<font color="#E5E5E5"> and also lower network</font>

421
00:15:27,089 --> 00:15:32,689
<font color="#E5E5E5">resources with this I conclude my talk</font>

422
00:15:29,579 --> 00:15:32,689
<font color="#E5E5E5">and I'm happy to take any questions</font>

423
00:15:34,990 --> 00:15:42,160
[Applause]

424
00:15:38,070 --> 00:15:43,570
<font color="#E5E5E5">hi I have</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> questions</font><font color="#CCCCCC"> so first in</font>

425
00:15:42,160 --> 00:15:45,670
terms of<font color="#E5E5E5"> the batching are you using</font>

426
00:15:43,570 --> 00:15:47,560
<font color="#CCCCCC">cocoa hashing is your failure</font>

427
00:15:45,670 --> 00:15:50,410
probability related to the fact that we

428
00:15:47,560 --> 00:15:53,560
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> how to</font><font color="#E5E5E5"> to limit the stash or</font>

429
00:15:50,410 --> 00:15:57,189
<font color="#E5E5E5">am</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> there there is no we're using cocoa</font>

430
00:15:53,560 --> 00:16:01,319
hashing but<font color="#E5E5E5"> no stash</font><font color="#CCCCCC"> and so the failure</font>

431
00:15:57,190 --> 00:16:01,320
<font color="#CCCCCC">probability is computed empirically</font><font color="#E5E5E5"> not</font>

432
00:16:02,670 --> 00:16:06,930
yes so we don't<font color="#E5E5E5"> have it</font><font color="#CCCCCC"> we don't have a</font>

433
00:16:04,720 --> 00:16:09,840
stash which means that if you<font color="#E5E5E5"> cannot map</font>

434
00:16:06,930 --> 00:16:12,579
if<font color="#E5E5E5"> there's at any point any coalition</font>

435
00:16:09,840 --> 00:16:16,150
<font color="#E5E5E5">into the same bucket</font><font color="#CCCCCC"> that means you can</font>

436
00:16:12,580 --> 00:16:18,640
<font color="#E5E5E5">only get one</font><font color="#CCCCCC"> of the elements</font><font color="#E5E5E5"> yes and my</font>

437
00:16:16,150 --> 00:16:20,290
<font color="#CCCCCC">other question was</font><font color="#E5E5E5"> so how hard is</font><font color="#CCCCCC"> to get</font>

438
00:16:18,640 --> 00:16:25,300
<font color="#E5E5E5">to symmetric</font><font color="#CCCCCC"> peer from</font><font color="#E5E5E5"> your</font>

439
00:16:20,290 --> 00:16:31,120
implementation<font color="#CCCCCC"> I your client is getting</font>

440
00:16:25,300 --> 00:16:33,160
more<font color="#CCCCCC"> than the one yes yes</font><font color="#E5E5E5"> because we so</font>

441
00:16:31,120 --> 00:16:34,390
for example in pong pong is a private

442
00:16:33,160 --> 00:16:36,400
<font color="#CCCCCC">communication system that</font><font color="#E5E5E5"> allows you to</font>

443
00:16:34,390 --> 00:16:38,410
<font color="#CCCCCC">have</font><font color="#E5E5E5"> group communication and in group</font>

444
00:16:36,400 --> 00:16:40,150
communication<font color="#E5E5E5"> you want to send a message</font>

445
00:16:38,410 --> 00:16:41,890
<font color="#CCCCCC">and then</font><font color="#E5E5E5"> get multiple messages at the</font>

446
00:16:40,150 --> 00:16:47,740
same time so we were looking<font color="#E5E5E5"> for that</font>

447
00:16:41,890 --> 00:16:49,270
<font color="#E5E5E5">particular scenario you can for</font><font color="#CCCCCC"> steal</font>

448
00:16:47,740 --> 00:16:50,860
PIR if you don't if you're<font color="#CCCCCC"> not worrying</font>

449
00:16:49,270 --> 00:16:58,840
<font color="#E5E5E5">about batching</font><font color="#CCCCCC"> you might be able</font><font color="#E5E5E5"> to get</font>

450
00:16:50,860 --> 00:17:01,390
it to<font color="#CCCCCC"> be symmetric okay yes once it so</font>

451
00:16:58,840 --> 00:17:02,890
that the overall server<font color="#E5E5E5"> process</font><font color="#CCCCCC"> anytime</font>

452
00:17:01,390 --> 00:17:04,750
<font color="#E5E5E5">is that what you add with the</font>

453
00:17:02,890 --> 00:17:05,920
<font color="#E5E5E5">decompression is</font><font color="#CCCCCC"> not a concern but the</font>

454
00:17:04,750 --> 00:17:08,439
high<font color="#E5E5E5"> overall cost</font>

455
00:17:05,920 --> 00:17:10,839
that seems intrinsic with this<font color="#E5E5E5"> style of</font>

456
00:17:08,439 --> 00:17:14,800
PR scheme is there any hope<font color="#E5E5E5"> for reducing</font>

457
00:17:10,839 --> 00:17:17,079
that<font color="#CCCCCC"> so what so yes the computational</font>

458
00:17:14,800 --> 00:17:18,849
<font color="#E5E5E5">cost of answering a</font><font color="#CCCCCC"> PIR query is gonna</font>

459
00:17:17,079 --> 00:17:21,909
be<font color="#E5E5E5"> linear in the size of the database</font>

460
00:17:18,849 --> 00:17:24,069
<font color="#E5E5E5">and and I don't</font><font color="#CCCCCC"> know the way to make</font><font color="#E5E5E5"> it</font>

461
00:17:21,910 --> 00:17:25,630
not<font color="#CCCCCC"> so but one of</font><font color="#E5E5E5"> the things that's</font>

462
00:17:24,069 --> 00:17:28,420
<font color="#E5E5E5">exciting about this particular protocol</font>

463
00:17:25,630 --> 00:17:29,890
is that<font color="#CCCCCC"> is easy to</font><font color="#E5E5E5"> paralyze because the</font>

464
00:17:28,420 --> 00:17:31,720
dot product<font color="#CCCCCC"> you know you can compute it</font>

465
00:17:29,890 --> 00:17:33,370
on different<font color="#E5E5E5"> course so you can reduce</font>

466
00:17:31,720 --> 00:17:35,460
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> definitely throw</font><font color="#E5E5E5"> hardware at the</font>

467
00:17:33,370 --> 00:17:35,459
<font color="#E5E5E5">problem</font>

468
00:17:36,970 --> 00:17:44,230
okay<font color="#CCCCCC"> he's</font><font color="#E5E5E5"> our time yeah there is yes I</font>

469
00:17:40,090 --> 00:17:46,959
can see<font color="#E5E5E5"> you yes my question is</font><font color="#CCCCCC"> uh how</font><font color="#E5E5E5"> so</font>

470
00:17:44,230 --> 00:17:48,370
has anybody evaluated just fhe<font color="#E5E5E5"> it seems</font>

471
00:17:46,960 --> 00:17:51,010
like<font color="#E5E5E5"> they're you could have a log size</font>

472
00:17:48,370 --> 00:17:53,439
ciphertext<font color="#E5E5E5"> the you'd have of course log</font>

473
00:17:51,010 --> 00:17:55,420
<font color="#E5E5E5">depth multiplication but it's not clear</font>

474
00:17:53,440 --> 00:17:56,020
to<font color="#CCCCCC"> me that that's that's</font><font color="#E5E5E5"> gonna be so</font>

475
00:17:55,420 --> 00:17:58,480
<font color="#E5E5E5">much worse</font>

476
00:17:56,020 --> 00:18:00,070
is there a paper that<font color="#E5E5E5"> does that so no</font>

477
00:17:58,480 --> 00:18:03,610
<font color="#E5E5E5">there is no well there's no paper that</font>

478
00:18:00,070 --> 00:18:05,379
<font color="#E5E5E5">has actually implemented</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> but I broke</font>

479
00:18:03,610 --> 00:18:06,939
<font color="#CCCCCC">her</font><font color="#E5E5E5"> ski and bike antenna and proposed</font>

480
00:18:05,380 --> 00:18:08,410
essentially what you what you're saying

481
00:18:06,940 --> 00:18:11,920
<font color="#E5E5E5">where you're just sending the encryption</font>

482
00:18:08,410 --> 00:18:15,490
of<font color="#CCCCCC"> to and then they evaluate this on the</font>

483
00:18:11,920 --> 00:18:17,020
entire<font color="#CCCCCC"> data base it goes back in further</font>

484
00:18:15,490 --> 00:18:20,020
I mean I<font color="#CCCCCC"> think</font><font color="#E5E5E5"> even gentry does that in</font>

485
00:18:17,020 --> 00:18:21,430
his thesis<font color="#E5E5E5"> so yeah so but I</font><font color="#CCCCCC"> think it</font>

486
00:18:20,020 --> 00:18:23,910
will<font color="#E5E5E5"> be much</font><font color="#CCCCCC"> more expensive</font><font color="#E5E5E5"> and the</font>

487
00:18:21,430 --> 00:18:25,990
reason is<font color="#CCCCCC"> that substitution itself is</font>

488
00:18:23,910 --> 00:18:27,880
orders of<font color="#E5E5E5"> magnitude</font><font color="#CCCCCC"> more efficient than</font>

489
00:18:25,990 --> 00:18:31,890
a single multiplication and<font color="#E5E5E5"> we only need</font>

490
00:18:27,880 --> 00:18:33,760
to use order degree multiplications<font color="#CCCCCC"> so</font>

491
00:18:31,890 --> 00:18:36,700
<font color="#CCCCCC">you're what you're proposing you're</font>

492
00:18:33,760 --> 00:18:38,980
gonna require n log n multiplications so

493
00:18:36,700 --> 00:18:40,330
that's<font color="#CCCCCC"> already</font><font color="#E5E5E5"> gonna be like</font>

494
00:18:38,980 --> 00:18:43,330
significantly more expensive<font color="#CCCCCC"> for</font>

495
00:18:40,330 --> 00:18:45,220
decompression<font color="#E5E5E5"> but communication will</font><font color="#CCCCCC"> be</font>

496
00:18:43,330 --> 00:18:47,199
smaller<font color="#E5E5E5"> yes absolutely it's not clear</font>

497
00:18:45,220 --> 00:18:49,270
that<font color="#E5E5E5"> one scheme is gonna be certainly</font>

498
00:18:47,200 --> 00:18:51,280
better right well I mean if your

499
00:18:49,270 --> 00:18:52,570
communication we're already at 300

500
00:18:51,280 --> 00:18:55,420
kilobytes<font color="#E5E5E5"> so if your communication is</font>

501
00:18:52,570 --> 00:18:58,179
gonna bring it down<font color="#E5E5E5"> to say you know 10</font>

502
00:18:55,420 --> 00:19:00,580
kilobytes<font color="#CCCCCC"> but it's gonna take you</font><font color="#E5E5E5"> five</font>

503
00:18:58,180 --> 00:19:05,320
hours<font color="#CCCCCC"> to process</font><font color="#E5E5E5"> a PIR query then it's</font>

504
00:19:00,580 --> 00:19:08,280
probably<font color="#CCCCCC"> not a good</font><font color="#E5E5E5"> trade-off okay let's</font>

505
00:19:05,320 --> 00:19:08,280
think Sebastian<font color="#E5E5E5"> again</font>

