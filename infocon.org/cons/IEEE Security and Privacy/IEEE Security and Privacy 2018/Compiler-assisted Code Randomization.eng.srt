1
00:00:07,610 --> 00:00:15,099
<font color="#E5E5E5">oh good</font><font color="#CCCCCC"> morning everyone I'm hyung Jun</font>

2
00:00:13,219 --> 00:00:17,529
<font color="#E5E5E5">I'm going to talk</font>

3
00:00:15,099 --> 00:00:21,400
compiler<font color="#CCCCCC"> assists the code randomization</font>

4
00:00:17,529 --> 00:00:23,920
<font color="#E5E5E5">this is a joint</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> including my</font>

5
00:00:21,400 --> 00:00:26,470
<font color="#CCCCCC">adviser majalis película</font><font color="#E5E5E5"> necklace from</font>

6
00:00:23,920 --> 00:00:28,119
<font color="#E5E5E5">Stony Brook University</font><font color="#CCCCCC"> Yahweh Chan and</font>

7
00:00:26,470 --> 00:00:32,560
long<font color="#CCCCCC"> Liu</font><font color="#E5E5E5"> from Northeastern University</font>

8
00:00:28,119 --> 00:00:38,800
and<font color="#CCCCCC"> vassilis cameras from Brown</font>

9
00:00:32,560 --> 00:00:41,920
University let me start by the need for

10
00:00:38,800 --> 00:00:44,949
fine-grained<font color="#E5E5E5"> code randomization</font><font color="#CCCCCC"> with the</font>

11
00:00:41,920 --> 00:00:47,559
introduction of memory protection policy

12
00:00:44,950 --> 00:00:51,309
that does not allow both writable<font color="#E5E5E5"> and</font>

13
00:00:47,559 --> 00:00:53,890
executable<font color="#E5E5E5"> permission in memory attack</font>

14
00:00:51,309 --> 00:00:57,070
<font color="#E5E5E5">paradigm has shifted from code injection</font>

15
00:00:53,890 --> 00:00:59,620
to code reuse or return-oriented

16
00:00:57,070 --> 00:01:02,379
programming<font color="#E5E5E5"> address space layout</font>

17
00:00:59,620 --> 00:01:05,408
randomization<font color="#CCCCCC"> has been introduced and</font>

18
00:01:02,379 --> 00:01:07,690
has been deployed<font color="#E5E5E5"> by</font><font color="#CCCCCC"> more than operating</font>

19
00:01:05,409 --> 00:01:10,560
system but it does<font color="#E5E5E5"> not provide a</font>

20
00:01:07,690 --> 00:01:14,080
sufficient mitigation<font color="#CCCCCC"> it is defeated by</font>

21
00:01:10,560 --> 00:01:16,810
information<font color="#CCCCCC"> leaks it's because</font><font color="#E5E5E5"> our</font>

22
00:01:14,080 --> 00:01:19,840
relative distances between functions and

23
00:01:16,810 --> 00:01:21,670
basic blocks are maintained that's why

24
00:01:19,840 --> 00:01:26,320
we need a fine-grained<font color="#E5E5E5"> code</font>

25
00:01:21,670 --> 00:01:29,200
randomization<font color="#E5E5E5"> it makes a gadget</font>

26
00:01:26,320 --> 00:01:32,559
locations<font color="#E5E5E5"> unpredictable here get it as a</font>

27
00:01:29,200 --> 00:01:34,630
sequence<font color="#E5E5E5"> of instructions for construct</font>

28
00:01:32,560 --> 00:01:38,800
constructing a functional payload for

29
00:01:34,630 --> 00:01:41,560
attackers<font color="#CCCCCC"> we have be advanced</font><font color="#E5E5E5"> just in</font>

30
00:01:38,800 --> 00:01:44,950
time Rob exploitation technique that

31
00:01:41,560 --> 00:01:48,640
does<font color="#E5E5E5"> allow that allows attackers to</font>

32
00:01:44,950 --> 00:01:51,340
collect the gadgets on the<font color="#E5E5E5"> fly which</font>

33
00:01:48,640 --> 00:01:53,890
ended up<font color="#E5E5E5"> by passing a fine-grained</font>

34
00:01:51,340 --> 00:01:57,490
called randomization but still we have

35
00:01:53,890 --> 00:02:01,090
another protection<font color="#E5E5E5"> mechanism</font><font color="#CCCCCC"> eken isms</font>

36
00:01:57,490 --> 00:02:05,289
<font color="#E5E5E5">called execute on the memory as skewed</font>

37
00:02:01,090 --> 00:02:06,940
only memory<font color="#E5E5E5"> also relies on</font><font color="#CCCCCC"> code fine</font>

38
00:02:05,290 --> 00:02:10,300
grade called randomization<font color="#E5E5E5"> to be</font>

39
00:02:06,940 --> 00:02:12,970
effective<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> a long story short we</font>

40
00:02:10,300 --> 00:02:16,530
need fine-grained called randomization

41
00:02:12,970 --> 00:02:21,370
for two<font color="#E5E5E5"> regions first a SLR is</font>

42
00:02:16,530 --> 00:02:25,480
insufficient second<font color="#CCCCCC"> execute only memory</font>

43
00:02:21,370 --> 00:02:28,290
also<font color="#E5E5E5"> requires code randomization as a</font>

44
00:02:25,480 --> 00:02:28,290
<font color="#CCCCCC">predicted</font>

45
00:02:29,480 --> 00:02:35,328
that case of research have shown<font color="#E5E5E5"> its</font>

46
00:02:32,239 --> 00:02:39,139
effectiveness<font color="#E5E5E5"> of code randomization but</font>

47
00:02:35,329 --> 00:02:43,549
it has not widely<font color="#CCCCCC"> adapted</font><font color="#E5E5E5"> yet until</font>

48
00:02:39,139 --> 00:02:47,420
<font color="#E5E5E5">today by any software vendor code</font>

49
00:02:43,549 --> 00:02:50,780
randomization technique<font color="#E5E5E5"> from the prior</font>

50
00:02:47,420 --> 00:02:54,200
works can<font color="#E5E5E5"> be done by either and the</font>

51
00:02:50,780 --> 00:02:58,430
users or software vendors<font color="#E5E5E5"> and the user</font>

52
00:02:54,200 --> 00:03:01,459
<font color="#E5E5E5">can recompile the source code or they</font>

53
00:02:58,430 --> 00:03:04,340
could rewrite the binary with a static

54
00:03:01,459 --> 00:03:06,769
analysis or dynamic analysis but in both

55
00:03:04,340 --> 00:03:09,680
cases<font color="#CCCCCC"> are they are</font><font color="#E5E5E5"> responsible for</font>

56
00:03:06,769 --> 00:03:13,909
performing<font color="#CCCCCC"> a complex and cumbersome</font>

57
00:03:09,680 --> 00:03:16,730
process<font color="#E5E5E5"> software vendors also can</font>

58
00:03:13,909 --> 00:03:20,030
deliver a<font color="#E5E5E5"> randomized</font><font color="#CCCCCC"> variants to each</font>

59
00:03:16,730 --> 00:03:25,250
user through app stores<font color="#E5E5E5"> but if you think</font>

60
00:03:20,030 --> 00:03:28,459
about any<font color="#E5E5E5"> software that is</font><font color="#CCCCCC"> used by tens</font>

61
00:03:25,250 --> 00:03:31,639
of millions of users like<font color="#E5E5E5"> web browsers</font>

62
00:03:28,459 --> 00:03:33,859
<font color="#E5E5E5">it would be</font><font color="#CCCCCC"> very costly to</font><font color="#E5E5E5"> generate and</font>

63
00:03:31,639 --> 00:03:38,439
distribute distribute at the randomized

64
00:03:33,859 --> 00:03:41,479
copies we have thoroughly<font color="#E5E5E5"> thought about</font>

65
00:03:38,439 --> 00:03:44,780
key factors for<font color="#E5E5E5"> making code</font>

66
00:03:41,479 --> 00:03:48,439
randomization practical so first factor

67
00:03:44,780 --> 00:03:50,750
<font color="#CCCCCC">is transparency that is software</font>

68
00:03:48,439 --> 00:03:53,540
<font color="#E5E5E5">distribution and installation should</font><font color="#CCCCCC"> be</font>

69
00:03:50,750 --> 00:03:56,689
remain<font color="#E5E5E5"> the same and the second key</font>

70
00:03:53,540 --> 00:04:02,239
factor is reliability<font color="#E5E5E5"> binary rewriting</font>

71
00:03:56,689 --> 00:04:05,659
requires ultimate precision<font color="#CCCCCC"> it's it</font>

72
00:04:02,239 --> 00:04:07,519
involves a highly destructive<font color="#E5E5E5"> process so</font>

73
00:04:05,659 --> 00:04:10,638
there are two<font color="#E5E5E5"> different techniques for</font>

74
00:04:07,519 --> 00:04:13,969
<font color="#E5E5E5">binary writing which is</font><font color="#CCCCCC"> static rewriting</font>

75
00:04:10,639 --> 00:04:17,900
<font color="#E5E5E5">and dynamic relating and steady writing</font>

76
00:04:13,969 --> 00:04:20,630
suffers from<font color="#E5E5E5"> correctness</font><font color="#CCCCCC"> mostly because</font>

77
00:04:17,899 --> 00:04:24,198
of indirect transfers and thus

78
00:04:20,630 --> 00:04:26,780
<font color="#E5E5E5">incomplete code coverage and we have</font>

79
00:04:24,199 --> 00:04:29,000
dynamic rewriting<font color="#E5E5E5"> but it all also</font>

80
00:04:26,780 --> 00:04:33,739
suffers<font color="#CCCCCC"> from performance degradation and</font>

81
00:04:29,000 --> 00:04:37,610
compatibility<font color="#E5E5E5"> issues the last but</font><font color="#CCCCCC"> not</font>

82
00:04:33,740 --> 00:04:39,750
the least effector is compatibility<font color="#CCCCCC"> the</font>

83
00:04:37,610 --> 00:04:42,350
randomized binary<font color="#CCCCCC"> should be</font><font color="#E5E5E5"> comparable</font>

84
00:04:39,750 --> 00:04:45,440
with<font color="#E5E5E5"> the existing software operations</font>

85
00:04:42,350 --> 00:04:50,640
<font color="#E5E5E5">like</font><font color="#CCCCCC"> a crash</font><font color="#E5E5E5"> reporting called shining</font>

86
00:04:45,440 --> 00:04:54,540
patching and updating<font color="#E5E5E5"> and also a variety</font>

87
00:04:50,640 --> 00:04:57,390
of constructs<font color="#E5E5E5"> that</font><font color="#CCCCCC"> includes</font><font color="#E5E5E5"> shared</font>

88
00:04:54,540 --> 00:05:00,060
object<font color="#E5E5E5"> exception handling compiler</font>

89
00:04:57,390 --> 00:05:04,740
optimizations and position independent

90
00:05:00,060 --> 00:05:07,980
code and and so forth<font color="#CCCCCC"> here is the</font>

91
00:05:04,740 --> 00:05:11,220
comparison table that shows the<font color="#E5E5E5"> needed</font>

92
00:05:07,980 --> 00:05:15,540
information<font color="#E5E5E5"> for binary</font><font color="#CCCCCC"> rewriting from</font>

93
00:05:11,220 --> 00:05:18,630
prior works<font color="#E5E5E5"> some of</font><font color="#CCCCCC"> the works requires a</font>

94
00:05:15,540 --> 00:05:22,110
<font color="#E5E5E5">source code itself for binary rewriting</font>

95
00:05:18,630 --> 00:05:27,360
and some worse requires<font color="#E5E5E5"> disassembly</font>

96
00:05:22,110 --> 00:05:30,660
<font color="#CCCCCC">relocation or symbol and so forth</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> R</font>

97
00:05:27,360 --> 00:05:34,290
<font color="#E5E5E5">4 and O on the bottom is the closest to</font>

98
00:05:30,660 --> 00:05:36,690
<font color="#CCCCCC">work with ours they used the real</font>

99
00:05:34,290 --> 00:05:40,800
<font color="#CCCCCC">location and function boundary and that</font>

100
00:05:36,690 --> 00:05:46,770
<font color="#CCCCCC">they stored it as a metadata</font><font color="#E5E5E5"> into the</font>

101
00:05:40,800 --> 00:05:51,350
executable we'll get to that later<font color="#CCCCCC"> and</font>

102
00:05:46,770 --> 00:05:53,930
there is a paper that<font color="#E5E5E5"> systematically</font>

103
00:05:51,350 --> 00:05:57,800
studied that the prior works<font color="#E5E5E5"> on</font>

104
00:05:53,930 --> 00:06:04,940
automated software diversity which was

105
00:05:57,800 --> 00:06:08,400
presented<font color="#CCCCCC"> Auckland in 2014</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> concluded</font>

106
00:06:04,940 --> 00:06:11,370
<font color="#E5E5E5">we pointed out several promising</font>

107
00:06:08,400 --> 00:06:14,789
directions<font color="#E5E5E5"> there is currently a lag</font><font color="#CCCCCC"> of a</font>

108
00:06:11,370 --> 00:06:17,280
research on hybrid approaches combining

109
00:06:14,790 --> 00:06:20,810
aspects of compilation<font color="#CCCCCC"> and binary</font>

110
00:06:17,280 --> 00:06:24,090
rewriting so this is exactly what we did

111
00:06:20,810 --> 00:06:27,419
so<font color="#E5E5E5"> we have set up</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> research question</font>

112
00:06:24,090 --> 00:06:31,549
where the following goal can we reliably

113
00:06:27,419 --> 00:06:35,520
<font color="#CCCCCC">randomized binaries in a transparent way</font>

114
00:06:31,550 --> 00:06:39,600
<font color="#E5E5E5">comparable with existing software so</font>

115
00:06:35,520 --> 00:06:42,299
here is an overview<font color="#E5E5E5"> of compiler assisted</font>

116
00:06:39,600 --> 00:06:45,510
<font color="#E5E5E5">to cause randomization our approach is</font>

117
00:06:42,300 --> 00:06:47,880
based on compiler rewriter cooperation

118
00:06:45,510 --> 00:06:50,490
so first compiler<font color="#E5E5E5"> takes the source code</font>

119
00:06:47,880 --> 00:06:53,069
<font color="#E5E5E5">and it is transformed to in</font>

120
00:06:50,490 --> 00:06:56,180
<font color="#CCCCCC">myriad representation and then assembler</font>

121
00:06:53,069 --> 00:07:01,020
takes intermediate representation and

122
00:06:56,180 --> 00:07:03,720
into the code<font color="#E5E5E5"> as an object file at this</font>

123
00:07:01,020 --> 00:07:05,639
point<font color="#E5E5E5"> we collect the supplementary</font>

124
00:07:03,720 --> 00:07:09,030
information from the compiler as

125
00:07:05,639 --> 00:07:13,229
metadata<font color="#E5E5E5"> and then object file combines</font>

126
00:07:09,030 --> 00:07:17,880
those object files<font color="#E5E5E5"> into the final</font>

127
00:07:13,229 --> 00:07:22,130
executable<font color="#E5E5E5"> we used compiler</font><font color="#CCCCCC"> LLVM as</font>

128
00:07:17,880 --> 00:07:26,719
compiler and gold as linker once

129
00:07:22,130 --> 00:07:30,120
software software vendor is ready for

130
00:07:26,720 --> 00:07:32,810
distributing<font color="#E5E5E5"> in the master binary and it</font>

131
00:07:30,120 --> 00:07:37,039
is transferred to the end the user<font color="#E5E5E5"> over</font>

132
00:07:32,810 --> 00:07:40,039
<font color="#CCCCCC">legacy Channel and then the end the user</font>

133
00:07:37,039 --> 00:07:45,979
triggers the rewriter<font color="#E5E5E5"> to produce</font>

134
00:07:40,039 --> 00:07:49,849
randomized binary<font color="#CCCCCC"> let's have a look at</font>

135
00:07:45,979 --> 00:07:52,469
transformation<font color="#CCCCCC"> assisting metadata now</font>

136
00:07:49,849 --> 00:07:55,699
the most important thing<font color="#CCCCCC"> is so we have</font>

137
00:07:52,470 --> 00:07:58,949
<font color="#E5E5E5">to</font><font color="#CCCCCC"> identify the object</font><font color="#E5E5E5"> boundaries for</font>

138
00:07:55,699 --> 00:08:01,830
transformation if you see the code and

139
00:07:58,949 --> 00:08:04,320
executable<font color="#CCCCCC"> the code consists of for</font>

140
00:08:01,830 --> 00:08:06,750
<font color="#E5E5E5">multiple objects and each object consist</font>

141
00:08:04,320 --> 00:08:08,940
of multiple functions<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> it's</font>

142
00:08:06,750 --> 00:08:15,750
function consists of a multiple page

143
00:08:08,940 --> 00:08:20,090
blocks<font color="#E5E5E5"> before moving on let me briefly</font>

144
00:08:15,750 --> 00:08:24,389
mention<font color="#E5E5E5"> code generation in</font><font color="#CCCCCC"> LLVM backend</font>

145
00:08:20,090 --> 00:08:26,940
so it has an internal hierarchical

146
00:08:24,389 --> 00:08:30,630
structure called machine code<font color="#CCCCCC"> a</font>

147
00:08:26,940 --> 00:08:33,479
<font color="#E5E5E5">framework that consists of machine</font>

148
00:08:30,630 --> 00:08:35,338
function<font color="#E5E5E5"> machine base block and machine</font>

149
00:08:33,479 --> 00:08:37,680
instruction you can<font color="#E5E5E5"> think of these three</font>

150
00:08:35,339 --> 00:08:43,039
<font color="#CCCCCC">components as just a function</font><font color="#E5E5E5"> base block</font>

151
00:08:37,679 --> 00:08:45,630
<font color="#E5E5E5">and instruction and you see here the</font>

152
00:08:43,039 --> 00:08:49,290
machine instruction number<font color="#CCCCCC"> 3 which</font>

153
00:08:45,630 --> 00:08:52,220
<font color="#E5E5E5">colored in orange this represents branch</font>

154
00:08:49,290 --> 00:08:55,560
instructions we also have the<font color="#CCCCCC"> note</font>

155
00:08:52,220 --> 00:09:01,110
colored in<font color="#CCCCCC"> gray this represents the</font>

156
00:08:55,560 --> 00:09:03,739
<font color="#CCCCCC">opcode</font><font color="#E5E5E5"> once this structure is complete</font>

157
00:09:01,110 --> 00:09:08,120
then machine code the assembler

158
00:09:03,740 --> 00:09:11,570
the code as a series of fragments that

159
00:09:08,120 --> 00:09:15,350
<font color="#E5E5E5">are data relaxa</font><font color="#CCCCCC"> below and alignment</font>

160
00:09:11,570 --> 00:09:18,890
fragments at this point assembler does

161
00:09:15,350 --> 00:09:21,080
not have any high-level structure like<font color="#E5E5E5"> a</font>

162
00:09:18,890 --> 00:09:25,250
<font color="#CCCCCC">machine function or a machine base block</font>

163
00:09:21,080 --> 00:09:27,530
so we<font color="#CCCCCC"> labor</font><font color="#E5E5E5"> the parent mission base</font>

164
00:09:25,250 --> 00:09:30,260
block and<font color="#E5E5E5"> machine function per each</font>

165
00:09:27,530 --> 00:09:33,670
<font color="#E5E5E5">machine instruction so for example here</font>

166
00:09:30,260 --> 00:09:36,950
machine instruction number<font color="#CCCCCC"> 1 2 & 3</font>

167
00:09:33,670 --> 00:09:40,060
<font color="#CCCCCC">belongs to</font><font color="#E5E5E5"> page block number 1</font><font color="#CCCCCC"> and</font>

168
00:09:36,950 --> 00:09:43,310
function number 1<font color="#E5E5E5"> so that's why we labor</font>

169
00:09:40,060 --> 00:09:47,270
<font color="#CCCCCC">label them as</font><font color="#E5E5E5"> machine function number 1</font>

170
00:09:43,310 --> 00:09:50,390
<font color="#E5E5E5">under bar and baby number 1 and as the</font>

171
00:09:47,270 --> 00:09:53,000
layout<font color="#E5E5E5"> is being determined there is a</font>

172
00:09:50,390 --> 00:09:56,540
internal function called<font color="#CCCCCC"> emit</font>

173
00:09:53,000 --> 00:09:58,280
instruction that<font color="#CCCCCC"> Desai's both machine</font>

174
00:09:56,540 --> 00:10:03,949
<font color="#E5E5E5">machine</font><font color="#CCCCCC"> page block and machine function</font>

175
00:09:58,280 --> 00:10:06,410
sizes here the first instruction<font color="#E5E5E5"> is 5 by</font>

176
00:10:03,950 --> 00:10:09,500
2<font color="#E5E5E5"> inside the second one is 3 bytes in</font>

177
00:10:06,410 --> 00:10:15,280
size<font color="#CCCCCC"> these</font><font color="#E5E5E5"> are combined together</font><font color="#CCCCCC"> which</font>

178
00:10:09,500 --> 00:10:19,390
forms<font color="#E5E5E5"> a data fragment and when assembler</font>

179
00:10:15,280 --> 00:10:23,030
encounters the branch<font color="#CCCCCC"> instruction it</font>

180
00:10:19,390 --> 00:10:26,120
forms relaxa<font color="#CCCCCC"> Balagtas</font><font color="#E5E5E5"> if you think about</font>

181
00:10:23,030 --> 00:10:29,600
<font color="#E5E5E5">the instruction of the jump instructions</font>

182
00:10:26,120 --> 00:10:32,420
there is the operand<font color="#E5E5E5"> sometimes this</font>

183
00:10:29,600 --> 00:10:34,520
operand should be expanded<font color="#E5E5E5"> if that's the</font>

184
00:10:32,420 --> 00:10:37,010
<font color="#CCCCCC">1</font><font color="#E5E5E5"> byte then you know the target is not</font>

185
00:10:34,520 --> 00:10:39,050
<font color="#E5E5E5">reachable</font><font color="#CCCCCC"> so it should be</font><font color="#E5E5E5"> expanded</font><font color="#CCCCCC"> to</font>

186
00:10:37,010 --> 00:10:41,840
four bytes<font color="#CCCCCC"> that's what the instruction</font>

187
00:10:39,050 --> 00:10:44,030
<font color="#CCCCCC">elections and luxation does so here we</font>

188
00:10:41,840 --> 00:10:49,010
have the<font color="#CCCCCC"> five bytes for</font><font color="#E5E5E5"> relaxed ball</font>

189
00:10:44,030 --> 00:10:52,180
fragment and<font color="#CCCCCC"> the last one</font><font color="#E5E5E5"> we have to see</font>

190
00:10:49,010 --> 00:10:55,580
is no bites<font color="#E5E5E5"> no</font><font color="#CCCCCC"> bytes is formed as</font>

191
00:10:52,180 --> 00:10:58,760
alignment of fragments once all the

192
00:10:55,580 --> 00:11:01,030
layout is determined then we store this

193
00:10:58,760 --> 00:11:04,760
<font color="#CCCCCC">information into the metadata in the</font>

194
00:11:01,030 --> 00:11:08,839
<font color="#E5E5E5">object file let me</font>

195
00:11:04,760 --> 00:11:10,460
another important metadata that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> I'd</font>

196
00:11:08,840 --> 00:11:13,250
like<font color="#E5E5E5"> to mention is the fix-up</font>

197
00:11:10,460 --> 00:11:17,020
information<font color="#E5E5E5"> you see there are two</font>

198
00:11:13,250 --> 00:11:20,230
different<font color="#CCCCCC"> byte codes one on the left</font>

199
00:11:17,020 --> 00:11:22,420
from object file and the<font color="#E5E5E5"> other one from</font>

200
00:11:20,230 --> 00:11:25,140
finally executable on the right and

201
00:11:22,420 --> 00:11:30,400
there are instructions<font color="#E5E5E5"> in the middle</font>

202
00:11:25,140 --> 00:11:36,010
here<font color="#CCCCCC"> the jump instructions</font><font color="#E5E5E5"> has the</font><font color="#CCCCCC"> fix</font>

203
00:11:30,400 --> 00:11:39,100
<font color="#CCCCCC">up which is d in</font><font color="#E5E5E5"> hex</font><font color="#CCCCCC"> pointing to some</font>

204
00:11:36,010 --> 00:11:42,340
base block<font color="#E5E5E5"> but this</font><font color="#CCCCCC"> fix</font><font color="#E5E5E5"> up has been</font>

205
00:11:39,100 --> 00:11:44,980
<font color="#CCCCCC">already reserved</font><font color="#E5E5E5"> at compilation time but</font>

206
00:11:42,340 --> 00:11:48,610
if you see the whole<font color="#E5E5E5"> instruction which</font>

207
00:11:44,980 --> 00:11:53,050
is<font color="#E5E5E5"> some</font><font color="#CCCCCC"> function the sum function is not</font>

208
00:11:48,610 --> 00:11:55,750
defined<font color="#E5E5E5"> inside the object file so it</font>

209
00:11:53,050 --> 00:11:59,050
<font color="#CCCCCC">produces the relocation</font><font color="#E5E5E5"> entry in a</font>

210
00:11:55,750 --> 00:12:01,390
relocation<font color="#CCCCCC"> table for an object</font><font color="#E5E5E5"> file so</font>

211
00:11:59,050 --> 00:12:04,569
there<font color="#CCCCCC"> are three</font><font color="#E5E5E5"> different kinds</font><font color="#CCCCCC"> of</font>

212
00:12:01,390 --> 00:12:08,140
<font color="#CCCCCC">fix-up so we have it could be reserved</font>

213
00:12:04,570 --> 00:12:11,560
at compilation time<font color="#E5E5E5"> link time and load</font>

214
00:12:08,140 --> 00:12:14,230
time<font color="#E5E5E5"> but if you see the the</font><font color="#CCCCCC"> fix ups</font><font color="#E5E5E5"> I</font>

215
00:12:11,560 --> 00:12:17,829
either at<font color="#E5E5E5"> link time or a load time you</font>

216
00:12:14,230 --> 00:12:20,320
can you might<font color="#E5E5E5"> find the real locations in</font>

217
00:12:17,830 --> 00:12:23,350
the relocation table<font color="#E5E5E5"> but most of the fix</font>

218
00:12:20,320 --> 00:12:27,990
ups that was reserved at compile<font color="#CCCCCC"> a</font>

219
00:12:23,350 --> 00:12:30,220
compilation time was missing so I just

220
00:12:27,990 --> 00:12:36,280
<font color="#CCCCCC">defined</font><font color="#E5E5E5"> that these three</font><font color="#CCCCCC"> different</font>

221
00:12:30,220 --> 00:12:40,000
categories<font color="#E5E5E5"> as three different sets as a</font>

222
00:12:36,280 --> 00:12:43,050
B and C then<font color="#E5E5E5"> the set a will be the</font>

223
00:12:40,000 --> 00:12:46,890
<font color="#CCCCCC">superset</font><font color="#E5E5E5"> that includes the entire</font><font color="#CCCCCC"> fix-up</font>

224
00:12:43,050 --> 00:12:50,859
<font color="#E5E5E5">so we are collecting</font><font color="#CCCCCC"> this information</font>

225
00:12:46,890 --> 00:12:53,920
including<font color="#E5E5E5"> offset from section base</font><font color="#CCCCCC"> T</font>

226
00:12:50,860 --> 00:12:58,480
referencing size and the value that<font color="#CCCCCC"> is</font>

227
00:12:53,920 --> 00:13:00,550
either absolute or relative<font color="#CCCCCC"> so here is</font>

228
00:12:58,480 --> 00:13:04,300
the<font color="#CCCCCC"> table</font><font color="#E5E5E5"> that summarized the metadata</font>

229
00:13:00,550 --> 00:13:08,170
<font color="#CCCCCC">we have talked about layout</font><font color="#E5E5E5"> base block</font>

230
00:13:04,300 --> 00:13:10,990
and fix up so another thing<font color="#E5E5E5"> that I'd</font>

231
00:13:08,170 --> 00:13:14,979
like<font color="#CCCCCC"> to point out is jump table actually</font>

232
00:13:10,990 --> 00:13:17,410
<font color="#E5E5E5">jump table</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> fix-up information has</font>

233
00:13:14,980 --> 00:13:20,170
the<font color="#E5E5E5"> corresponding jumped over</font>

234
00:13:17,410 --> 00:13:23,650
<font color="#CCCCCC">information that includes this size of</font>

235
00:13:20,170 --> 00:13:26,500
each tape a jump<font color="#CCCCCC"> table entry and the</font>

236
00:13:23,650 --> 00:13:29,240
number of jump<font color="#E5E5E5"> table entries</font><font color="#CCCCCC"> that could</font>

237
00:13:26,500 --> 00:13:31,890
be collected<font color="#CCCCCC"> at compilation time</font>

238
00:13:29,240 --> 00:13:35,700
so once everything<font color="#CCCCCC"> is done</font><font color="#E5E5E5"> at</font>

239
00:13:31,890 --> 00:13:39,600
compilation<font color="#E5E5E5"> then linker consolidates per</font>

240
00:13:35,700 --> 00:13:42,390
object metadata so linker plays three

241
00:13:39,600 --> 00:13:44,600
different roles which are first

242
00:13:42,390 --> 00:13:47,460
constructing the final layout<font color="#E5E5E5"> and</font>

243
00:13:44,600 --> 00:13:49,740
reserving symbols<font color="#E5E5E5"> and updating</font>

244
00:13:47,460 --> 00:13:52,220
relocation information<font color="#CCCCCC"> here we have</font>

245
00:13:49,740 --> 00:13:55,230
added<font color="#CCCCCC"> another feature which is</font><font color="#E5E5E5"> merging</font>

246
00:13:52,220 --> 00:13:58,530
<font color="#E5E5E5">adjusting collected metadata from each</font>

247
00:13:55,230 --> 00:14:01,320
object file<font color="#E5E5E5"> so this metadata</font><font color="#CCCCCC"> updates</font>

248
00:13:58,530 --> 00:14:05,790
includes layout<font color="#E5E5E5"> basic block size and</font>

249
00:14:01,320 --> 00:14:08,550
<font color="#CCCCCC">fixed</font><font color="#E5E5E5"> up offset so once the everything</font>

250
00:14:05,790 --> 00:14:11,819
is done master<font color="#CCCCCC"> binder</font><font color="#E5E5E5"> is already then</font>

251
00:14:08,550 --> 00:14:14,699
the end the user is going<font color="#CCCCCC"> to rewrite the</font>

252
00:14:11,820 --> 00:14:18,120
binary at installation time by parsing

253
00:14:14,700 --> 00:14:21,300
integrated metadata so here

254
00:14:18,120 --> 00:14:25,760
recall that we don't do any disassembly

255
00:14:21,300 --> 00:14:28,560
or binary analysis at this<font color="#CCCCCC"> phase we</font>

256
00:14:25,760 --> 00:14:31,800
reconstruct the layout from<font color="#CCCCCC"> the base</font>

257
00:14:28,560 --> 00:14:35,040
block function and object<font color="#E5E5E5"> from bottom up</font>

258
00:14:31,800 --> 00:14:39,770
level<font color="#E5E5E5"> and then we can reconstruct the</font>

259
00:14:35,040 --> 00:14:42,750
binary hierarchy<font color="#E5E5E5"> as a tree structure and</font>

260
00:14:39,770 --> 00:14:47,400
then<font color="#E5E5E5"> we perform randomization on that</font>

261
00:14:42,750 --> 00:14:51,570
and then we rewrite partly the three

262
00:14:47,400 --> 00:14:57,630
boxes<font color="#E5E5E5"> on the Left shows the sections in</font>

263
00:14:51,570 --> 00:14:59,460
elf<font color="#CCCCCC"> to be updated</font><font color="#E5E5E5"> for fix-up information</font>

264
00:14:57,630 --> 00:15:06,020
simple<font color="#CCCCCC"> information and exception</font>

265
00:14:59,460 --> 00:15:11,000
<font color="#CCCCCC">handling we have</font><font color="#E5E5E5"> evaluated our prototype</font>

266
00:15:06,020 --> 00:15:16,170
<font color="#CCCCCC">using</font><font color="#E5E5E5"> 20 binaries from</font><font color="#CCCCCC"> spec 2006</font>

267
00:15:11,000 --> 00:15:20,360
<font color="#E5E5E5">benchmark and we have generated 20</font>

268
00:15:16,170 --> 00:15:23,910
different<font color="#E5E5E5"> variants per each binary and</font>

269
00:15:20,360 --> 00:15:27,480
we got the<font color="#CCCCCC"> runtime or overhead on</font>

270
00:15:23,910 --> 00:15:31,819
average with 0.28%<font color="#CCCCCC"> and we have a</font>

271
00:15:27,480 --> 00:15:33,410
moderator file size increase with<font color="#E5E5E5"> 11%</font>

272
00:15:31,820 --> 00:15:40,020
<font color="#CCCCCC">0.5%</font>

273
00:15:33,410 --> 00:15:40,560
11.5%<font color="#E5E5E5"> so there are a lot</font><font color="#CCCCCC"> of topics that</font>

274
00:15:40,020 --> 00:15:45,870
we have

275
00:15:40,560 --> 00:15:49,260
not covered<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we have a lot of</font>

276
00:15:45,870 --> 00:15:52,860
<font color="#CCCCCC">challenges for enabling</font><font color="#E5E5E5"> robust and</font>

277
00:15:49,260 --> 00:15:56,240
practical transformation so we have<font color="#E5E5E5"> not</font>

278
00:15:52,860 --> 00:15:58,920
talked<font color="#CCCCCC"> about how to support</font><font color="#E5E5E5"> for various</font>

279
00:15:56,240 --> 00:16:01,580
<font color="#E5E5E5">software construction including</font>

280
00:15:58,920 --> 00:16:04,229
<font color="#E5E5E5">exception handling inline assembly</font>

281
00:16:01,580 --> 00:16:07,460
linking time<font color="#CCCCCC"> optimization and even</font>

282
00:16:04,230 --> 00:16:10,860
control flow integrity

283
00:16:07,460 --> 00:16:14,510
we have several randomization

284
00:16:10,860 --> 00:16:17,870
constraints and we<font color="#CCCCCC"> also had some</font>

285
00:16:14,510 --> 00:16:20,370
implementation pitfalls<font color="#E5E5E5"> and some</font>

286
00:16:17,870 --> 00:16:22,170
<font color="#E5E5E5">limitations but I think most of the</font>

287
00:16:20,370 --> 00:16:26,880
limitations can<font color="#E5E5E5"> be reserved with the</font>

288
00:16:22,170 --> 00:16:29,689
extra effort<font color="#E5E5E5"> engineering efforts if</font>

289
00:16:26,880 --> 00:16:33,089
you're interested please<font color="#E5E5E5"> read our people</font>

290
00:16:29,690 --> 00:16:35,910
to wrap<font color="#E5E5E5"> up</font><font color="#CCCCCC"> I have presented a compiler</font>

291
00:16:33,089 --> 00:16:38,760
assisted code randomization<font color="#E5E5E5"> at both</font>

292
00:16:35,910 --> 00:16:40,949
function and base block<font color="#CCCCCC"> level we have</font>

293
00:16:38,760 --> 00:16:43,950
facilitated<font color="#E5E5E5"> our prototype by</font>

294
00:16:40,950 --> 00:16:47,040
transformation<font color="#CCCCCC"> assisting metadata stored</font>

295
00:16:43,950 --> 00:16:51,240
within<font color="#E5E5E5"> augmented executables in a</font>

296
00:16:47,040 --> 00:16:55,050
transparent<font color="#E5E5E5"> reliable and a comparable</font>

297
00:16:51,240 --> 00:16:57,870
way<font color="#E5E5E5"> we have also successfully integrated</font>

298
00:16:55,050 --> 00:17:03,240
with<font color="#E5E5E5"> our prototype with the popular</font>

299
00:16:57,870 --> 00:17:06,209
package manager<font color="#E5E5E5"> apt in Linux we are we</font>

300
00:17:03,240 --> 00:17:08,849
are open sourcing<font color="#CCCCCC"> our prototype in this</font>

301
00:17:06,209 --> 00:17:12,510
<font color="#E5E5E5">link that the code is now available</font><font color="#CCCCCC"> if</font>

302
00:17:08,849 --> 00:17:15,270
you<font color="#E5E5E5"> are interested</font><font color="#CCCCCC"> thank you</font><font color="#E5E5E5"> very much</font>

303
00:17:12,510 --> 00:17:19,859
for<font color="#CCCCCC"> your attention</font>

304
00:17:15,270 --> 00:17:22,209
[Applause]

305
00:17:19,859 --> 00:17:24,809
<font color="#E5E5E5">all right we have</font><font color="#CCCCCC"> a few</font><font color="#E5E5E5"> minutes for</font>

306
00:17:22,209 --> 00:17:24,809
<font color="#CCCCCC">questions</font>

307
00:17:30,150 --> 00:17:34,460
is it<font color="#E5E5E5"> delayed there we go</font>

308
00:17:40,730 --> 00:17:46,630
hi excellent talk<font color="#CCCCCC"> Mangan DeFrancisco</font><font color="#E5E5E5"> can</font>

309
00:17:44,630 --> 00:17:48,950
you talk a little<font color="#E5E5E5"> bit on</font><font color="#CCCCCC"> your choice of</font>

310
00:17:46,630 --> 00:17:55,270
installation time<font color="#E5E5E5"> randomization as</font>

311
00:17:48,950 --> 00:17:57,920
opposed to say like load time<font color="#CCCCCC"> so we we</font>

312
00:17:55,270 --> 00:18:00,530
selected the installation time you can

313
00:17:57,920 --> 00:18:05,420
do<font color="#E5E5E5"> it at the randomization</font><font color="#CCCCCC"> as low time</font>

314
00:18:00,530 --> 00:18:07,790
as well but if there<font color="#CCCCCC"> are a lot of you</font>

315
00:18:05,420 --> 00:18:11,960
know<font color="#CCCCCC"> fix-up</font><font color="#E5E5E5"> information say more than</font>

316
00:18:07,790 --> 00:18:14,840
<font color="#CCCCCC">hundred</font><font color="#E5E5E5"> of thousand then maybe it</font><font color="#CCCCCC"> it</font>

317
00:18:11,960 --> 00:18:17,900
incurs the<font color="#E5E5E5"> you know the randomization</font>

318
00:18:14,840 --> 00:18:20,929
time it increases<font color="#CCCCCC"> a lot I mean it's</font>

319
00:18:17,900 --> 00:18:23,300
mostly<font color="#E5E5E5"> a few seconds but sometimes</font><font color="#CCCCCC"> a</font>

320
00:18:20,930 --> 00:18:27,440
minutes then you know at the end user

321
00:18:23,300 --> 00:18:29,960
<font color="#E5E5E5">will not be</font><font color="#CCCCCC"> portable for that so we</font>

322
00:18:27,440 --> 00:18:33,380
chose the installation time<font color="#E5E5E5"> and the</font>

323
00:18:29,960 --> 00:18:37,480
other thing I'd like<font color="#CCCCCC"> to know that is we</font>

324
00:18:33,380 --> 00:18:40,340
we use the Python<font color="#CCCCCC"> script so that's why</font>

325
00:18:37,480 --> 00:18:44,540
the randomization process is a little

326
00:18:40,340 --> 00:18:47,439
<font color="#E5E5E5">slow so if you use the C or C++ then we</font>

327
00:18:44,540 --> 00:18:50,030
could increase the<font color="#CCCCCC"> current installation</font>

328
00:18:47,440 --> 00:18:53,120
<font color="#E5E5E5">randomization</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> installation time more</font>

329
00:18:50,030 --> 00:18:54,340
and maybe<font color="#E5E5E5"> we can do it at a low</font><font color="#CCCCCC"> ten as</font>

330
00:18:53,120 --> 00:18:58,580
well

331
00:18:54,340 --> 00:19:11,320
<font color="#CCCCCC">Thanks let's</font><font color="#E5E5E5"> go to that side of it</font>

332
00:18:58,580 --> 00:19:11,320
reminders interesting transformation

333
00:19:14,680 --> 00:19:21,980
have you done anything to<font color="#E5E5E5"> actually</font>

334
00:19:17,980 --> 00:19:24,320
transformations correct yes<font color="#CCCCCC"> if the</font>

335
00:19:21,980 --> 00:19:28,220
transformation<font color="#E5E5E5"> has not been correct then</font>

336
00:19:24,320 --> 00:19:31,700
we could not<font color="#CCCCCC"> even</font><font color="#E5E5E5"> run the</font><font color="#CCCCCC"> 20 binary from</font>

337
00:19:28,220 --> 00:19:35,420
<font color="#E5E5E5">SPECT 2006 we have tested a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> other</font>

338
00:19:31,700 --> 00:19:39,380
executable as well and because we do not

339
00:19:35,420 --> 00:19:41,930
<font color="#E5E5E5">have the extensive test cases</font><font color="#CCCCCC"> so we</font>

340
00:19:39,380 --> 00:19:45,170
<font color="#CCCCCC">don't know we</font><font color="#E5E5E5"> I cannot guarantee that</font>

341
00:19:41,930 --> 00:19:47,960
<font color="#E5E5E5">everything was fine</font><font color="#CCCCCC"> but we did not have</font>

342
00:19:45,170 --> 00:19:50,800
any issue<font color="#E5E5E5"> problems that we have</font>

343
00:19:47,960 --> 00:19:50,800
encountered so far

344
00:19:54,539 --> 00:20:01,559
so if you have the<font color="#E5E5E5"> executable then it's</font>

345
00:19:58,139 --> 00:20:06,769
a kind<font color="#E5E5E5"> of hard</font><font color="#CCCCCC"> to verify</font><font color="#E5E5E5"> your executable</font>

346
00:20:01,559 --> 00:20:06,769
<font color="#E5E5E5">it's fully functional</font><font color="#CCCCCC"> because mostly</font>

347
00:20:11,779 --> 00:20:16,590
sorry<font color="#E5E5E5"> we're actually</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> of time but</font>

348
00:20:14,850 --> 00:20:20,730
<font color="#E5E5E5">that the rest of you can maybe talk to</font>

349
00:20:16,590 --> 00:20:22,939
him<font color="#E5E5E5"> after at lunch so let's think</font><font color="#CCCCCC"> I'm</font>

350
00:20:20,730 --> 00:20:22,940
<font color="#E5E5E5">again</font>

