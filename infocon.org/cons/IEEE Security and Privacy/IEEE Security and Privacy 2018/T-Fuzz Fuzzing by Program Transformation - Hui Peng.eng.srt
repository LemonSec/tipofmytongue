1
00:00:07,540 --> 00:00:13,269
okay we are<font color="#CCCCCC"> now turning to tifa's as the</font>

2
00:00:12,099 --> 00:00:17,289
second paper

3
00:00:13,269 --> 00:00:19,990
focusing on fuzzing<font color="#CCCCCC"> here the</font><font color="#E5E5E5"> PC meeting</font>

4
00:00:17,289 --> 00:00:23,619
liked the<font color="#E5E5E5"> tea fast takes a new twist and</font>

5
00:00:19,990 --> 00:00:25,990
how fasting is done so by actively

6
00:00:23,619 --> 00:00:29,350
transforming the program<font color="#E5E5E5"> while it is</font>

7
00:00:25,990 --> 00:00:31,839
being fast<font color="#E5E5E5"> they can reach locations that</font>

8
00:00:29,350 --> 00:00:33,940
other<font color="#E5E5E5"> fathers cannot achieve and all the</font>

9
00:00:31,840 --> 00:00:36,399
details will now be presented by<font color="#CCCCCC"> hooping</font>

10
00:00:33,940 --> 00:00:39,358
from Purdue University<font color="#CCCCCC"> in his talk on</font>

11
00:00:36,399 --> 00:00:47,460
tifa's<font color="#E5E5E5"> fuzzing by program transformation</font>

12
00:00:39,359 --> 00:00:50,289
welcome hello<font color="#CCCCCC"> thanks</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> for me</font>

13
00:00:47,460 --> 00:00:51,789
<font color="#CCCCCC">okay good thanks</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> for your</font>

14
00:00:50,289 --> 00:00:52,839
attendance<font color="#E5E5E5"> and thanks for the</font>

15
00:00:51,789 --> 00:00:56,440
introduction

16
00:00:52,839 --> 00:00:58,629
my<font color="#E5E5E5"> name is Hui it is a great honor and</font>

17
00:00:56,440 --> 00:01:00,579
<font color="#E5E5E5">the prayer for me to introduce our work</font>

18
00:00:58,629 --> 00:01:02,498
<font color="#CCCCCC">Kieffer's fuzzy</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> PI program</font>

19
00:01:00,579 --> 00:01:05,379
transformation here<font color="#CCCCCC"> this is a</font><font color="#E5E5E5"> joint work</font>

20
00:01:02,499 --> 00:01:07,780
<font color="#CCCCCC">with young</font><font color="#E5E5E5"> whose family</font><font color="#CCCCCC"> is too hard</font><font color="#E5E5E5"> for</font>

21
00:01:05,379 --> 00:01:09,400
<font color="#E5E5E5">me to pronounce</font><font color="#CCCCCC"> and the material spell</font>

22
00:01:07,780 --> 00:01:17,170
<font color="#CCCCCC">in other</font><font color="#E5E5E5"> Weiser who</font><font color="#CCCCCC"> is also from Purdue</font>

23
00:01:09,400 --> 00:01:19,000
University<font color="#CCCCCC"> fuzzy as a</font><font color="#E5E5E5"> finding approach</font>

24
00:01:17,170 --> 00:01:21,310
is becoming more<font color="#E5E5E5"> and</font><font color="#CCCCCC"> more important in</font>

25
00:01:19,000 --> 00:01:25,390
<font color="#E5E5E5">recent years it have contributed to the</font>

26
00:01:21,310 --> 00:01:27,280
finding<font color="#E5E5E5"> a lot of</font><font color="#CCCCCC"> CDs of</font><font color="#E5E5E5"> very high impact</font>

27
00:01:25,390 --> 00:01:30,400
<font color="#E5E5E5">being a lot of</font><font color="#CCCCCC"> important software</font>

28
00:01:27,280 --> 00:01:33,100
<font color="#E5E5E5">systems</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> imposing include</font><font color="#CCCCCC"> OpenSSL</font>

29
00:01:30,400 --> 00:01:35,710
<font color="#E5E5E5">a software secure data communication</font>

30
00:01:33,100 --> 00:01:37,000
over<font color="#E5E5E5"> the network and Linux kernel the</font>

31
00:01:35,710 --> 00:01:40,389
most<font color="#E5E5E5"> widely used</font>

32
00:01:37,000 --> 00:01:42,760
<font color="#CCCCCC">coño software web software endures have</font>

33
00:01:40,390 --> 00:01:46,060
started to<font color="#CCCCCC"> use it as</font><font color="#E5E5E5"> a proactive defense</font>

34
00:01:42,760 --> 00:01:50,220
mirror and hackers<font color="#CCCCCC"> are also</font><font color="#E5E5E5"> you need as</font>

35
00:01:46,060 --> 00:01:50,220
a first step being is prevent

36
00:01:50,340 --> 00:01:55,630
fundamental challenge in fuzzing is that

37
00:01:52,990 --> 00:01:59,259
is<font color="#E5E5E5"> so-called shadow</font><font color="#CCCCCC"> coverage it has also</font>

38
00:01:55,630 --> 00:02:01,780
called<font color="#E5E5E5"> coverage of war because fathers</font>

39
00:01:59,260 --> 00:02:05,409
are often designed to be program<font color="#E5E5E5"> of the</font>

40
00:02:01,780 --> 00:02:07,720
<font color="#CCCCCC">Bostic and the imports generated by them</font>

41
00:02:05,409 --> 00:02:10,030
are<font color="#E5E5E5"> often not able to bypass complex</font>

42
00:02:07,720 --> 00:02:14,530
sanitary<font color="#CCCCCC"> Jackson</font><font color="#E5E5E5"> settle program because</font>

43
00:02:10,030 --> 00:02:18,099
of<font color="#CCCCCC"> this code</font><font color="#E5E5E5"> forces cannot be easily</font>

44
00:02:14,530 --> 00:02:21,689
triggered and thus but hidden<font color="#E5E5E5"> in the</font>

45
00:02:18,099 --> 00:02:21,689
<font color="#E5E5E5">school</font><font color="#CCCCCC"> bus</font><font color="#E5E5E5"> can not be found easy</font>

46
00:02:22,000 --> 00:02:25,390
there have<font color="#E5E5E5"> already been a lot</font><font color="#CCCCCC"> of</font>

47
00:02:23,709 --> 00:02:27,280
accusative<font color="#CCCCCC"> work trying</font><font color="#E5E5E5"> to improve the</font>

48
00:02:25,390 --> 00:02:29,559
<font color="#E5E5E5">efficiency</font><font color="#CCCCCC"> of fuzzum most of them focus</font>

49
00:02:27,280 --> 00:02:32,200
<font color="#E5E5E5">our input generation for example Peter</font>

50
00:02:29,560 --> 00:02:35,830
uses<font color="#CCCCCC"> symbolic selector symbolic</font>

51
00:02:32,200 --> 00:02:37,839
execution and the<font color="#CCCCCC"> Buddha</font><font color="#E5E5E5"> uses Tin tins</font>

52
00:02:35,830 --> 00:02:40,569
analysis in combination with data and

53
00:02:37,840 --> 00:02:44,230
control flow analysis to aid input

54
00:02:40,569 --> 00:02:46,958
<font color="#CCCCCC">generation in the father these these</font>

55
00:02:44,230 --> 00:02:50,709
approaches are often very<font color="#E5E5E5"> heavyweight</font>

56
00:02:46,959 --> 00:02:52,720
<font color="#E5E5E5">and</font><font color="#CCCCCC"> do not scare more importantly even</font>

57
00:02:50,709 --> 00:02:54,910
<font color="#E5E5E5">using the most advanced symbolic</font>

58
00:02:52,720 --> 00:02:57,700
execution based input generation

59
00:02:54,910 --> 00:02:58,359
techniques<font color="#E5E5E5"> it is very hard to purpose</font>

60
00:02:57,700 --> 00:03:02,200
heart checks

61
00:02:58,360 --> 00:03:04,900
neck checks on<font color="#CCCCCC"> checksum values or</font>

62
00:03:02,200 --> 00:03:09,280
cryptographic hash values because

63
00:03:04,900 --> 00:03:11,260
Morton's<font color="#E5E5E5"> constraint solvers</font><font color="#CCCCCC"> it is very</font>

64
00:03:09,280 --> 00:03:13,599
hard<font color="#E5E5E5"> for modern</font><font color="#CCCCCC"> currents to</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> so much</font>

65
00:03:11,260 --> 00:03:20,519
<font color="#CCCCCC">cannot</font><font color="#E5E5E5"> accurately</font><font color="#CCCCCC"> input</font><font color="#E5E5E5"> that site</font><font color="#CCCCCC"> that</font>

66
00:03:13,599 --> 00:03:23,170
can<font color="#E5E5E5"> satisfy those checks</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this work we</font>

67
00:03:20,519 --> 00:03:25,569
<font color="#E5E5E5">solved the cover the issue from a</font>

68
00:03:23,170 --> 00:03:28,000
different perspective by disabling the

69
00:03:25,569 --> 00:03:30,160
<font color="#CCCCCC">Sandy Cheeks the key</font><font color="#E5E5E5"> insight behind this</font>

70
00:03:28,000 --> 00:03:32,290
<font color="#E5E5E5">idea that some of</font><font color="#CCCCCC"> the same checks in the</font>

71
00:03:30,160 --> 00:03:34,440
target program actually is<font color="#E5E5E5"> not intended</font>

72
00:03:32,290 --> 00:03:38,310
<font color="#E5E5E5">to prevent bugs</font>

73
00:03:34,440 --> 00:03:41,650
<font color="#CCCCCC">examples include</font><font color="#E5E5E5"> checks on magic values</font>

74
00:03:38,310 --> 00:03:44,049
checksums<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the hash values we turn</font>

75
00:03:41,650 --> 00:03:48,340
these category of checks<font color="#E5E5E5"> as a</font>

76
00:03:44,049 --> 00:03:52,180
<font color="#E5E5E5">non-critical checks and abbreviated as</font>

77
00:03:48,340 --> 00:03:54,220
<font color="#CCCCCC">uncie sees we add these bugs</font><font color="#E5E5E5"> as these</font>

78
00:03:52,180 --> 00:03:57,549
track checks are<font color="#E5E5E5"> not intended to prevent</font>

79
00:03:54,220 --> 00:04:00,730
bugs<font color="#E5E5E5"> it is removing and removing the</font>

80
00:03:57,549 --> 00:04:03,669
<font color="#CCCCCC">word incur erroneous perks but if we</font>

81
00:04:00,730 --> 00:04:07,149
remove<font color="#E5E5E5"> them the</font><font color="#CCCCCC"> furthering process is</font>

82
00:04:03,669 --> 00:04:07,660
greatly<font color="#CCCCCC"> simplified for example in</font><font color="#E5E5E5"> this</font>

83
00:04:07,150 --> 00:04:10,299
simple

84
00:04:07,660 --> 00:04:12,430
f-father the in the same simple<font color="#E5E5E5"> earth</font>

85
00:04:10,299 --> 00:04:15,069
passing program the main logic of the

86
00:04:12,430 --> 00:04:19,478
pro of<font color="#E5E5E5"> the program is a car dealer check</font>

87
00:04:15,069 --> 00:04:22,450
on<font color="#E5E5E5"> magic value no fair header and this</font>

88
00:04:19,478 --> 00:04:27,099
check is only intended<font color="#CCCCCC"> to filter out</font><font color="#E5E5E5"> the</font>

89
00:04:22,450 --> 00:04:29,469
<font color="#CCCCCC">authentic data and remove it won't incur</font>

90
00:04:27,099 --> 00:04:33,370
additional perks<font color="#E5E5E5"> but if we</font><font color="#CCCCCC"> move it</font>

91
00:04:29,469 --> 00:04:34,330
<font color="#CCCCCC">further</font><font color="#E5E5E5"> where P</font><font color="#CCCCCC"> where become more</font>

92
00:04:33,370 --> 00:04:37,870
efficient because

93
00:04:34,330 --> 00:04:41,948
or the volatility inputs will cover the

94
00:04:37,870 --> 00:04:44,979
main logic of the program<font color="#CCCCCC"> based</font><font color="#E5E5E5"> on these</font>

95
00:04:41,949 --> 00:04:47,050
considerations<font color="#E5E5E5"> we proposed</font><font color="#CCCCCC"> a new funding</font>

96
00:04:44,979 --> 00:04:48,729
scheme based<font color="#CCCCCC"> on proven transformation</font>

97
00:04:47,050 --> 00:04:50,860
and it works like this

98
00:04:48,729 --> 00:04:53,520
internally we use a coverage<font color="#CCCCCC"> guided</font>

99
00:04:50,860 --> 00:04:57,189
<font color="#E5E5E5">further that to generate input and</font>

100
00:04:53,520 --> 00:05:00,430
explore the program space<font color="#E5E5E5"> when the</font>

101
00:04:57,189 --> 00:05:02,770
<font color="#CCCCCC">further gets stuck and no longer</font><font color="#E5E5E5"> able to</font>

102
00:05:00,430 --> 00:05:06,009
<font color="#E5E5E5">find new code paths we use</font><font color="#CCCCCC"> that program</font>

103
00:05:02,770 --> 00:05:08,109
<font color="#CCCCCC">test warmer component to detect and see</font>

104
00:05:06,009 --> 00:05:10,360
candidates<font color="#CCCCCC"> inset the</font><font color="#E5E5E5"> pro target program</font>

105
00:05:08,110 --> 00:05:11,979
and<font color="#CCCCCC"> transfer</font><font color="#E5E5E5"> the program and the</font>

106
00:05:10,360 --> 00:05:14,530
transport<font color="#CCCCCC"> program or continue to</font><font color="#E5E5E5"> be</font>

107
00:05:11,979 --> 00:05:16,659
first<font color="#E5E5E5"> if any crush this process</font>

108
00:05:14,530 --> 00:05:19,150
<font color="#E5E5E5">continues if any crashes are formed</font>

109
00:05:16,659 --> 00:05:21,610
<font color="#CCCCCC">we're putting the test protocol we use</font>

110
00:05:19,150 --> 00:05:23,888
the crash<font color="#E5E5E5"> and another to verify that it</font>

111
00:05:21,610 --> 00:05:28,360
<font color="#CCCCCC">is really a trooper in</font><font color="#E5E5E5"> the original bug</font>

112
00:05:23,889 --> 00:05:30,699
you know<font color="#E5E5E5"> original program</font><font color="#CCCCCC"> again the</font><font color="#E5E5E5"> next</font>

113
00:05:28,360 --> 00:05:34,800
few slides I<font color="#CCCCCC"> will introduce our</font>

114
00:05:30,699 --> 00:05:36,969
techniques for detecting NCC candidates

115
00:05:34,800 --> 00:05:41,199
<font color="#E5E5E5">transform in the pocket program and how</font>

116
00:05:36,969 --> 00:05:45,310
we verify<font color="#CCCCCC"> the</font><font color="#E5E5E5"> crashes in transport</font>

117
00:05:41,199 --> 00:05:48,849
<font color="#CCCCCC">program</font><font color="#E5E5E5"> the first</font><font color="#CCCCCC"> row</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> first research</font>

118
00:05:45,310 --> 00:05:53,610
problem in the unit<font color="#E5E5E5"> project is to detect</font>

119
00:05:48,849 --> 00:05:57,360
<font color="#E5E5E5">any candidates which is a very hard</font>

120
00:05:53,610 --> 00:06:00,310
<font color="#CCCCCC">problem</font><font color="#E5E5E5"> and cannot be solved</font><font color="#CCCCCC"> very</font>

121
00:05:57,360 --> 00:06:01,900
precisely<font color="#E5E5E5"> without using very complex and</font>

122
00:06:00,310 --> 00:06:04,180
<font color="#E5E5E5">heavyweight program analysis techniques</font>

123
00:06:01,900 --> 00:06:07,710
in this<font color="#E5E5E5"> work for performance</font>

124
00:06:04,180 --> 00:06:10,389
considerations<font color="#E5E5E5"> we use a nice precise</font>

125
00:06:07,710 --> 00:06:12,729
approach that never just<font color="#E5E5E5"> the feedback</font>

126
00:06:10,389 --> 00:06:15,460
from the further<font color="#E5E5E5"> to detect the</font>

127
00:06:12,729 --> 00:06:21,159
candidates so when the<font color="#CCCCCC"> further get stuck</font>

128
00:06:15,460 --> 00:06:24,609
we use the edges in a control<font color="#E5E5E5"> flow graph</font>

129
00:06:21,159 --> 00:06:27,159
<font color="#CCCCCC">over the program connecting covered and</font>

130
00:06:24,610 --> 00:06:30,490
uncovered<font color="#CCCCCC"> note better</font>

131
00:06:27,159 --> 00:06:34,319
further<font color="#E5E5E5"> as approximation of these</font>

132
00:06:30,490 --> 00:06:36,879
candidates<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is an</font><font color="#E5E5E5"> approximate thus</font>

133
00:06:34,319 --> 00:06:39,580
furthering the<font color="#E5E5E5"> resulted transport</font>

134
00:06:36,879 --> 00:06:41,830
program map contain<font color="#E5E5E5"> for politics</font><font color="#CCCCCC"> but it</font>

135
00:06:39,580 --> 00:06:43,289
is not<font color="#CCCCCC"> wait and the very</font><font color="#E5E5E5"> simple and</font>

136
00:06:41,830 --> 00:06:46,060
robust

137
00:06:43,289 --> 00:06:48,020
<font color="#CCCCCC">K which can</font><font color="#E5E5E5"> be implemented based on</font>

138
00:06:46,060 --> 00:06:51,080
dynamic tracing which is bad

139
00:06:48,020 --> 00:06:55,460
<font color="#E5E5E5">use</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> coverage criteria</font><font color="#CCCCCC"> fathers</font>

140
00:06:51,080 --> 00:06:57,349
nowadays<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> were introduced our</font>

141
00:06:55,460 --> 00:07:01,070
techniques for filtering<font color="#E5E5E5"> out the fourth</font>

142
00:06:57,350 --> 00:07:03,580
party a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> later after NCC</font>

143
00:07:01,070 --> 00:07:06,590
candidates<font color="#E5E5E5"> are detected next step to</font>

144
00:07:03,580 --> 00:07:09,669
transfer the target program by removing

145
00:07:06,590 --> 00:07:13,150
them to this end there is also a lot of

146
00:07:09,670 --> 00:07:16,190
<font color="#E5E5E5">possible</font><font color="#CCCCCC"> options</font><font color="#E5E5E5"> but in our</font><font color="#CCCCCC"> book</font><font color="#E5E5E5"> we</font>

147
00:07:13,150 --> 00:07:19,400
<font color="#E5E5E5">choose to negate the Dracula and this is</font>

148
00:07:16,190 --> 00:07:21,640
<font color="#E5E5E5">negative first of all it is very very</font>

149
00:07:19,400 --> 00:07:24,770
<font color="#E5E5E5">easy</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> implement because on</font>

150
00:07:21,640 --> 00:07:26,810
<font color="#E5E5E5">architectures or conditional instruction</font>

151
00:07:24,770 --> 00:07:29,120
conditional jump instructions<font color="#E5E5E5"> have the</font>

152
00:07:26,810 --> 00:07:32,030
same<font color="#CCCCCC"> names at the educated counterpart</font>

153
00:07:29,120 --> 00:07:35,720
<font color="#CCCCCC">so we can implement it simply path that</font>

154
00:07:32,030 --> 00:07:37,429
<font color="#CCCCCC">he panel</font><font color="#E5E5E5"> rewriting and there is no</font>

155
00:07:35,720 --> 00:07:40,460
runtime overhead in<font color="#E5E5E5"> the result your</font>

156
00:07:37,430 --> 00:07:42,850
target program more<font color="#E5E5E5"> importantly the talk</font>

157
00:07:40,460 --> 00:07:46,460
is the control flow graph of that

158
00:07:42,850 --> 00:07:48,920
<font color="#E5E5E5">transport</font><font color="#CCCCCC"> program</font><font color="#E5E5E5"> keeps the same so</font><font color="#CCCCCC"> the</font>

159
00:07:46,460 --> 00:07:51,049
three C's of the transport program can

160
00:07:48,920 --> 00:07:53,270
be<font color="#E5E5E5"> mapped directly to original program</font>

161
00:07:51,050 --> 00:07:59,390
and<font color="#CCCCCC"> path constraints of the origin</font>

162
00:07:53,270 --> 00:08:03,080
program can<font color="#CCCCCC"> be also received as</font>

163
00:07:59,390 --> 00:08:05,659
mentioned earlier<font color="#E5E5E5"> over our approach for</font>

164
00:08:03,080 --> 00:08:08,659
detecting<font color="#E5E5E5"> NCC's are not precise so there</font>

165
00:08:05,660 --> 00:08:11,210
might be false<font color="#CCCCCC"> positives in the detect</font>

166
00:08:08,660 --> 00:08:13,490
in the crashes we found in transport

167
00:08:11,210 --> 00:08:16,190
program<font color="#E5E5E5"> in this step we</font><font color="#CCCCCC"> use a simple</font>

168
00:08:13,490 --> 00:08:19,850
<font color="#CCCCCC">execution</font><font color="#E5E5E5"> based approach to filter out</font>

169
00:08:16,190 --> 00:08:23,210
the<font color="#E5E5E5"> football team and reproduce</font><font color="#CCCCCC"> bugs</font>

170
00:08:19,850 --> 00:08:25,250
it works by<font color="#E5E5E5"> our symbolically tracing the</font>

171
00:08:23,210 --> 00:08:27,859
<font color="#CCCCCC">transport</font><font color="#E5E5E5"> program to connect cost</font>

172
00:08:25,250 --> 00:08:30,560
constraints for the original program

173
00:08:27,860 --> 00:08:32,210
<font color="#CCCCCC">leading to a crash</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> past</font>

174
00:08:30,560 --> 00:08:34,850
<font color="#E5E5E5">constraint is then used to decide</font>

175
00:08:32,210 --> 00:08:37,370
whether it is<font color="#E5E5E5"> of was part of a lot if it</font>

176
00:08:34,850 --> 00:08:39,050
is not a<font color="#CCCCCC"> first-party of</font><font color="#E5E5E5"> them we use the</font>

177
00:08:37,370 --> 00:08:41,120
connected<font color="#E5E5E5"> path constraint to generate</font>

178
00:08:39,049 --> 00:08:43,490
the inputs<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is able to</font><font color="#E5E5E5"> reproduce</font>

179
00:08:41,120 --> 00:08:46,550
crash<font color="#E5E5E5"> you know original program</font><font color="#CCCCCC"> and were</font>

180
00:08:43,490 --> 00:08:50,420
you to<font color="#CCCCCC"> tree were examples to show how</font>

181
00:08:46,550 --> 00:08:52,579
this approach<font color="#E5E5E5"> works this example this</font>

182
00:08:50,420 --> 00:08:58,420
<font color="#CCCCCC">part this example</font><font color="#E5E5E5"> shows how</font><font color="#CCCCCC"> we very fair</font>

183
00:08:52,580 --> 00:09:01,379
to<font color="#E5E5E5"> above this this program has per</font>

184
00:08:58,420 --> 00:09:04,348
<font color="#E5E5E5">guarded a pair</font><font color="#CCCCCC"> two checks on</font>

185
00:09:01,379 --> 00:09:08,759
<font color="#E5E5E5">acts under why and as you can imagine</font>

186
00:09:04,349 --> 00:09:14,479
<font color="#CCCCCC">the check on what the check on where</font><font color="#E5E5E5"> it</font>

187
00:09:08,759 --> 00:09:19,169
<font color="#E5E5E5">hard for the father to get past and so</font>

188
00:09:14,479 --> 00:09:22,259
our fuzzy on father<font color="#CCCCCC"> tutti father is able</font>

189
00:09:19,169 --> 00:09:23,970
to detect it as a candidate and the

190
00:09:22,259 --> 00:09:27,839
generator<font color="#CCCCCC"> transport</font><font color="#E5E5E5"> program like this</font>

191
00:09:23,970 --> 00:09:30,269
with detected and CDC<font color="#CCCCCC"> Decatur them and</font>

192
00:09:27,839 --> 00:09:34,069
then fighting<font color="#E5E5E5"> the transport program</font><font color="#CCCCCC"> it</font>

193
00:09:30,269 --> 00:09:38,509
is easy to get create digital crash well

194
00:09:34,069 --> 00:09:38,509
<font color="#E5E5E5">symbolically in the crash</font>

195
00:09:38,579 --> 00:09:45,539
for<font color="#CCCCCC"> red</font><font color="#E5E5E5"> for regular constraints we keep</font>

196
00:09:42,720 --> 00:09:48,169
it as it is and the<font color="#CCCCCC"> for constraint</font><font color="#E5E5E5"> give</font>

197
00:09:45,539 --> 00:09:51,539
wild from indicated conditions we

198
00:09:48,169 --> 00:09:54,179
recover the particles that are negating

199
00:09:51,539 --> 00:09:56,339
the the<font color="#E5E5E5"> task</font><font color="#CCCCCC"> colleges and in this</font>

200
00:09:54,179 --> 00:09:57,358
<font color="#E5E5E5">example the connected</font><font color="#CCCCCC"> past</font><font color="#E5E5E5"> country</font><font color="#CCCCCC"> is</font>

201
00:09:56,339 --> 00:09:59,939
<font color="#CCCCCC">shown like this</font>

202
00:09:57,359 --> 00:10:02,159
obviously it is a<font color="#E5E5E5"> satisfiable and so</font>

203
00:09:59,939 --> 00:10:04,009
this is the true bug<font color="#E5E5E5"> one solution from</font>

204
00:10:02,159 --> 00:10:06,569
these countries<font color="#E5E5E5"> it can</font><font color="#CCCCCC"> be used to</font>

205
00:10:04,009 --> 00:10:10,319
<font color="#E5E5E5">reproduce the bug in original program</font>

206
00:10:06,569 --> 00:10:12,929
<font color="#CCCCCC">shown on the left and in</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> example in</font>

207
00:10:10,319 --> 00:10:15,358
the<font color="#CCCCCC"> next example our show how our porch</font>

208
00:10:12,929 --> 00:10:18,449
can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> used to feel how the</font><font color="#CCCCCC"> forties so</font>

209
00:10:15,359 --> 00:10:21,269
<font color="#CCCCCC">this program takes an input</font><font color="#E5E5E5"> and if it is</font>

210
00:10:18,449 --> 00:10:23,849
a positive number<font color="#E5E5E5"> it called function and</font>

211
00:10:21,269 --> 00:10:26,459
pass it as an<font color="#E5E5E5"> argument in the court</font>

212
00:10:23,850 --> 00:10:30,149
fraction<font color="#E5E5E5"> it checks the input up game if</font>

213
00:10:26,459 --> 00:10:36,809
it<font color="#E5E5E5"> is not if it is</font><font color="#CCCCCC"> a lot a</font><font color="#E5E5E5"> possible</font>

214
00:10:30,149 --> 00:10:40,729
number it<font color="#E5E5E5"> raises</font><font color="#CCCCCC"> a bug and we are posing</font>

215
00:10:36,809 --> 00:10:47,059
<font color="#E5E5E5">it it's easy to imagine that this check</font>

216
00:10:40,729 --> 00:10:51,059
is hard to be pepper so our<font color="#E5E5E5"> foreign to</font>

217
00:10:47,059 --> 00:10:54,629
<font color="#CCCCCC">tifa's</font><font color="#E5E5E5"> will detect it as an NCC</font>

218
00:10:51,059 --> 00:10:58,019
candidate and<font color="#CCCCCC"> well fundings transporter</font>

219
00:10:54,629 --> 00:11:00,959
<font color="#E5E5E5">we we can easily trigger a trigger crash</font>

220
00:10:58,019 --> 00:11:03,479
<font color="#CCCCCC">negative well symbolic tracing does</font>

221
00:11:00,959 --> 00:11:04,858
transport<font color="#E5E5E5"> program</font><font color="#CCCCCC"> you know same way we</font>

222
00:11:03,479 --> 00:11:08,399
connect<font color="#CCCCCC"> Pascal tree in a Cadiz</font>

223
00:11:04,859 --> 00:11:11,839
obviously this<font color="#CCCCCC"> Pascal</font><font color="#E5E5E5"> constraint set is</font>

224
00:11:08,399 --> 00:11:14,880
unset so this is a portable

225
00:11:11,839 --> 00:11:17,160
our<font color="#E5E5E5"> folding</font>

226
00:11:14,880 --> 00:11:22,019
scheme based on proven transformation

227
00:11:17,160 --> 00:11:25,560
<font color="#E5E5E5">also comes with</font><font color="#CCCCCC"> some limitations</font><font color="#E5E5E5"> first</font>

228
00:11:22,019 --> 00:11:27,660
of all the<font color="#E5E5E5"> force crashes incurred by</font>

229
00:11:25,560 --> 00:11:30,000
transforming the program sometimes<font color="#CCCCCC"> might</font>

230
00:11:27,660 --> 00:11:32,160
hinder the discovery of true<font color="#E5E5E5"> bugs</font>

231
00:11:30,000 --> 00:11:36,750
for example in this<font color="#CCCCCC"> either in this</font>

232
00:11:32,160 --> 00:11:39,540
program if we negate the check on the

233
00:11:36,750 --> 00:11:41,790
<font color="#CCCCCC">fare pointer and first the transponder</font>

234
00:11:39,540 --> 00:11:44,699
<font color="#CCCCCC">okay a low point</font><font color="#E5E5E5"> ur/web opposed to a</font>

235
00:11:41,790 --> 00:11:47,310
<font color="#E5E5E5">freed and a force crash were being</font><font color="#CCCCCC"> cut</font>

236
00:11:44,699 --> 00:11:50,639
<font color="#E5E5E5">because of this the true bug falling</font>

237
00:11:47,310 --> 00:11:52,699
behind can never be triggered and the

238
00:11:50,639 --> 00:11:56,430
second limitation is<font color="#E5E5E5"> that is the</font>

239
00:11:52,699 --> 00:12:00,420
transformation<font color="#CCCCCC"> explosion</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> a kind</font>

240
00:11:56,430 --> 00:12:04,769
of<font color="#E5E5E5"> relic us to a</font><font color="#CCCCCC"> path</font><font color="#E5E5E5"> explosion issue in</font>

241
00:12:00,420 --> 00:12:08,630
<font color="#E5E5E5">a symbolic execution so well you posit a</font>

242
00:12:04,769 --> 00:12:11,670
lot of copies of canopy generated and

243
00:12:08,630 --> 00:12:14,939
sometimes it is it makes it even harder

244
00:12:11,670 --> 00:12:17,670
to<font color="#CCCCCC"> find bugs in</font><font color="#E5E5E5"> the target program and</font>

245
00:12:14,940 --> 00:12:20,579
these<font color="#E5E5E5"> two</font><font color="#CCCCCC"> limitations to have some</font>

246
00:12:17,670 --> 00:12:22,889
impact<font color="#CCCCCC"> on the performance of</font><font color="#E5E5E5"> a diva and</font>

247
00:12:20,579 --> 00:12:26,969
we will show<font color="#CCCCCC"> it a little bit</font><font color="#E5E5E5"> later in</font>

248
00:12:22,889 --> 00:12:29,819
<font color="#E5E5E5">the evaluation section to determine the</font>

249
00:12:26,970 --> 00:12:33,600
relative<font color="#E5E5E5"> status of our</font><font color="#CCCCCC"> for the</font><font color="#E5E5E5"> scheme we</font>

250
00:12:29,819 --> 00:12:36,149
evaluated keifa's on three data set<font color="#CCCCCC"> on</font>

251
00:12:33,600 --> 00:12:41,779
<font color="#CCCCCC">toppers et cetera</font><font color="#E5E5E5"> said ma am can acid</font>

252
00:12:36,149 --> 00:12:45,560
and the<font color="#CCCCCC"> for we would</font><font color="#E5E5E5"> programs to compare</font>

253
00:12:41,779 --> 00:12:49,560
<font color="#CCCCCC">keifa's with a</font><font color="#E5E5E5"> Twinner we evaluated on</font>

254
00:12:45,560 --> 00:12:52,800
topper<font color="#E5E5E5"> CDC data set you know what if the</font>

255
00:12:49,560 --> 00:12:55,279
<font color="#E5E5E5">moment</font><font color="#CCCCCC"> our experimental setup airfare</font>

256
00:12:52,800 --> 00:13:01,670
was able to find<font color="#CCCCCC"> 105 bucks</font>

257
00:12:55,279 --> 00:13:06,990
<font color="#CCCCCC">cleaner</font><font color="#E5E5E5"> fun 121</font><font color="#CCCCCC"> tifa's fun</font><font color="#E5E5E5"> 166</font>

258
00:13:01,670 --> 00:13:10,170
<font color="#CCCCCC">tifa's had improvement over AFL by 58</font>

259
00:13:06,990 --> 00:13:13,649
<font color="#CCCCCC">percent and an improvement over cleanup</font>

260
00:13:10,170 --> 00:13:18,180
<font color="#CCCCCC">at 37%</font><font color="#E5E5E5"> and due</font><font color="#CCCCCC"> to the limitations</font>

261
00:13:13,649 --> 00:13:20,579
mentioned<font color="#E5E5E5"> earlier and Kieffer's was</font>

262
00:13:18,180 --> 00:13:23,060
defeated by dinner in<font color="#CCCCCC"> time of the</font>

263
00:13:20,579 --> 00:13:23,060
<font color="#CCCCCC">programs</font>

264
00:13:23,760 --> 00:13:30,660
to compare<font color="#E5E5E5"> tifa's with brother and of</font>

265
00:13:27,269 --> 00:13:34,920
Phoenix<font color="#CCCCCC"> we evaluated it on the</font><font color="#E5E5E5"> Gnawa</font><font color="#CCCCCC"> em</font>

266
00:13:30,660 --> 00:13:37,469
data set<font color="#E5E5E5"> these data set contains the</font>

267
00:13:34,920 --> 00:13:42,060
vulnerable programs<font color="#CCCCCC"> containing but</font>

268
00:13:37,470 --> 00:13:44,550
coated by purse containing bugs<font color="#E5E5E5"> caught</font>

269
00:13:42,060 --> 00:13:48,000
<font color="#E5E5E5">in a pair hard-coded magic values and</font>

270
00:13:44,550 --> 00:13:50,729
<font color="#E5E5E5">thus</font><font color="#CCCCCC"> true snake brother and</font><font color="#E5E5E5"> thus</font><font color="#CCCCCC"> Teaneck</font>

271
00:13:48,000 --> 00:13:54,600
using static<font color="#CCCCCC"> 92 8 input generation</font>

272
00:13:50,730 --> 00:13:57,329
community figures the<font color="#E5E5E5"> expected inputs to</font>

273
00:13:54,600 --> 00:14:00,060
<font color="#E5E5E5">pay</font><font color="#CCCCCC"> pass the checks in mr. Hockley</font>

274
00:13:57,329 --> 00:14:02,760
program that is why this program<font color="#CCCCCC"> this</font>

275
00:14:00,060 --> 00:14:05,069
<font color="#CCCCCC">approaches performs</font><font color="#E5E5E5"> so well always our</font>

276
00:14:02,760 --> 00:14:09,649
liberation shows that given these

277
00:14:05,070 --> 00:14:14,370
favorable<font color="#E5E5E5"> conditions</font><font color="#CCCCCC"> ki Fateh performs</font>

278
00:14:09,649 --> 00:14:16,589
performs way enough<font color="#E5E5E5"> and in in the</font>

279
00:14:14,370 --> 00:14:19,920
present in the presence of<font color="#CCCCCC"> heart checks</font>

280
00:14:16,589 --> 00:14:24,300
in<font color="#E5E5E5"> mt</font><font color="#CCCCCC"> v keifa's was able to find more</font>

281
00:14:19,920 --> 00:14:26,240
bugs and teeth due<font color="#CCCCCC"> to the transformation</font>

282
00:14:24,300 --> 00:14:30,510
<font color="#CCCCCC">is closure issue</font>

283
00:14:26,240 --> 00:14:32,459
<font color="#CCCCCC">Kieffer's what defeated</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> are cynics in</font>

284
00:14:30,510 --> 00:14:35,790
who but is still what able to find more

285
00:14:32,459 --> 00:14:38,670
bugs<font color="#CCCCCC"> then</font><font color="#E5E5E5"> butter</font><font color="#CCCCCC"> my in</font><font color="#E5E5E5"> Cassini</font><font color="#CCCCCC"> ki Fateh</font>

286
00:14:35,790 --> 00:14:45,630
was able<font color="#CCCCCC"> to find</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> intended</font><font color="#CCCCCC"> work in</font>

287
00:14:38,670 --> 00:14:48,510
who and to evaluate<font color="#E5E5E5"> tifa's in real</font><font color="#CCCCCC"> would</font>

288
00:14:45,630 --> 00:14:50,370
programs we've evaluated on for real

289
00:14:48,510 --> 00:14:53,579
what<font color="#CCCCCC"> programs shown in this table which</font>

290
00:14:50,370 --> 00:14:55,649
are widely used in related work the

291
00:14:53,579 --> 00:14:58,199
verified<font color="#CCCCCC"> crush</font><font color="#E5E5E5"> is the number of version</font>

292
00:14:55,649 --> 00:15:02,010
<font color="#CCCCCC">file</font><font color="#E5E5E5"> crashes are shown in this table we</font>

293
00:14:58,199 --> 00:15:05,219
<font color="#E5E5E5">showed</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it was</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> find</font><font color="#CCCCCC"> about</font>

294
00:15:02,010 --> 00:15:08,790
<font color="#CCCCCC">more crashes in the</font><font color="#E5E5E5"> real</font><font color="#CCCCCC"> wood</font><font color="#E5E5E5"> program</font>

295
00:15:05,220 --> 00:15:17,240
and after<font color="#E5E5E5"> inspecting these crashes</font><font color="#CCCCCC"> with</font>

296
00:15:08,790 --> 00:15:17,240
point<font color="#CCCCCC"> three</font><font color="#E5E5E5"> debug sorry go back operator</font>

297
00:15:17,870 --> 00:15:23,149
<font color="#CCCCCC">cook-out calcio back panel</font><font color="#E5E5E5"> set</font>

298
00:15:23,620 --> 00:15:31,600
<font color="#E5E5E5">no oh sorry</font><font color="#CCCCCC"> okay</font>

299
00:15:28,230 --> 00:15:35,350
after inspecting<font color="#CCCCCC"> these</font><font color="#E5E5E5"> crashes we found</font>

300
00:15:31,600 --> 00:15:38,530
three do but you<font color="#CCCCCC"> know to him</font><font color="#E5E5E5"> imagemagick</font>

301
00:15:35,350 --> 00:15:40,630
and<font color="#E5E5E5"> to ye and ye not popular</font><font color="#CCCCCC"> it is</font>

302
00:15:38,530 --> 00:15:45,130
important<font color="#CCCCCC"> note to note that these bugs</font>

303
00:15:40,630 --> 00:15:49,000
<font color="#E5E5E5">are found in the latest release which</font>

304
00:15:45,130 --> 00:15:52,090
copying intensively first pair security

305
00:15:49,000 --> 00:15:53,710
researchers are<font color="#CCCCCC"> tiffith what you're able</font>

306
00:15:52,090 --> 00:15:56,230
to find<font color="#E5E5E5"> new bugs in this</font><font color="#CCCCCC"> book showing</font>

307
00:15:53,710 --> 00:16:02,440
<font color="#CCCCCC">that it is very</font><font color="#E5E5E5"> effective</font><font color="#CCCCCC"> in finding</font>

308
00:15:56,230 --> 00:16:05,320
<font color="#E5E5E5">bugs and finally to conclude</font><font color="#CCCCCC"> 14 so far</font>

309
00:16:02,440 --> 00:16:07,570
have been<font color="#E5E5E5"> limited by coverage and unable</font>

310
00:16:05,320 --> 00:16:10,030
to<font color="#E5E5E5"> find deep bugs in the target program</font>

311
00:16:07,570 --> 00:16:12,640
in this book we<font color="#CCCCCC"> obtained the</font><font color="#E5E5E5"> notion of</font>

312
00:16:10,030 --> 00:16:14,439
<font color="#E5E5E5">flooding by mutating</font><font color="#CCCCCC"> post</font><font color="#E5E5E5"> the input and</font>

313
00:16:12,640 --> 00:16:16,960
target program as well<font color="#E5E5E5"> and the</font>

314
00:16:14,440 --> 00:16:19,930
<font color="#E5E5E5">experimental results show that it</font><font color="#CCCCCC"> is</font>

315
00:16:16,960 --> 00:16:23,790
more effective<font color="#CCCCCC"> than state of what</font>

316
00:16:19,930 --> 00:16:26,620
<font color="#E5E5E5">flooding to us being</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> has a</font>

317
00:16:23,790 --> 00:16:31,449
considerable improvement<font color="#E5E5E5"> over cleaner</font>

318
00:16:26,620 --> 00:16:34,390
and<font color="#CCCCCC"> AF and</font><font color="#E5E5E5"> was able to trigger bugs</font>

319
00:16:31,450 --> 00:16:36,960
guarded by<font color="#CCCCCC"> heart checks it was also able</font>

320
00:16:34,390 --> 00:16:41,069
to<font color="#E5E5E5"> find you bugs in real-world</font><font color="#CCCCCC"> progress</font>

321
00:16:36,960 --> 00:16:44,680
in the future<font color="#E5E5E5"> we plan to improve</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> our</font>

322
00:16:41,070 --> 00:16:47,770
transformation<font color="#CCCCCC"> strategies and the theory</font>

323
00:16:44,680 --> 00:16:50,709
<font color="#E5E5E5">of</font><font color="#CCCCCC"> war parties we will</font><font color="#E5E5E5"> release our code</font>

324
00:16:47,770 --> 00:16:55,270
in this report very very soon and if you

325
00:16:50,710 --> 00:16:59,110
are<font color="#E5E5E5"> interested please</font><font color="#CCCCCC"> feel free to give</font>

326
00:16:55,270 --> 00:17:00,819
us an email and that's<font color="#E5E5E5"> all for my</font>

327
00:16:59,110 --> 00:17:03,520
<font color="#E5E5E5">presentation and thanks</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much</font>

328
00:17:00,820 --> 00:17:09,400
I'm ready to take<font color="#E5E5E5"> questions</font>

329
00:17:03,520 --> 00:17:09,400
[Applause]

330
00:17:10,220 --> 00:17:15,679
<font color="#E5E5E5">okay so yeah we have time for</font><font color="#CCCCCC"> few</font>

331
00:17:13,289 --> 00:17:15,679
<font color="#E5E5E5">questions</font>

332
00:17:16,560 --> 00:17:22,030
some watch an<font color="#E5E5E5"> actor Boston University so</font>

333
00:17:19,959 --> 00:17:23,730
I have to question<font color="#E5E5E5"> the first questions</font>

334
00:17:22,030 --> 00:17:26,230
about the results<font color="#E5E5E5"> that you</font><font color="#CCCCCC"> have reported</font>

335
00:17:23,730 --> 00:17:27,970
<font color="#E5E5E5">so you were telling that</font><font color="#CCCCCC"> folks crashes</font>

336
00:17:26,230 --> 00:17:30,280
might hinder the discovery of the true

337
00:17:27,970 --> 00:17:31,300
box and still meaning that some of the

338
00:17:30,280 --> 00:17:33,399
false positives

339
00:17:31,300 --> 00:17:35,530
after a manual analysis you<font color="#E5E5E5"> can say that</font>

340
00:17:33,400 --> 00:17:38,620
<font color="#E5E5E5">okay this specific input still causing</font>

341
00:17:35,530 --> 00:17:43,000
about the results that<font color="#E5E5E5"> you're reporting</font>

342
00:17:38,620 --> 00:17:47,850
are those including the ones including

343
00:17:43,000 --> 00:17:51,130
the manual analysis or they're just<font color="#E5E5E5"> yes</font>

344
00:17:47,850 --> 00:17:55,389
first<font color="#E5E5E5"> of all the results are involved</font><font color="#CCCCCC"> or</font>

345
00:17:51,130 --> 00:18:00,340
the<font color="#E5E5E5"> crashes</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> verified and some of the</font>

346
00:17:55,390 --> 00:18:02,020
crashes are verified manually yeah post

347
00:18:00,340 --> 00:18:06,610
was far too<font color="#E5E5E5"> much</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> gonna sort of</font>

348
00:18:02,020 --> 00:18:09,520
increase<font color="#CCCCCC"> the performance yes okay so my</font>

349
00:18:06,610 --> 00:18:12,490
second<font color="#CCCCCC"> question is basically the control</font>

350
00:18:09,520 --> 00:18:14,440
flow graph<font color="#CCCCCC"> so we know that control flow</font>

351
00:18:12,490 --> 00:18:16,630
graph can be<font color="#E5E5E5"> incomplete right</font>

352
00:18:14,440 --> 00:18:19,210
meaning that<font color="#E5E5E5"> because of the indirect</font>

353
00:18:16,630 --> 00:18:23,820
jumps what kind of control flow<font color="#E5E5E5"> graph</font>

354
00:18:19,210 --> 00:18:30,940
<font color="#E5E5E5">are</font><font color="#CCCCCC"> used is</font><font color="#E5E5E5"> that cause any challenge</font>

355
00:18:23,820 --> 00:18:34,510
<font color="#CCCCCC">well we do</font><font color="#E5E5E5"> yes</font><font color="#CCCCCC"> i but we we do have a</font>

356
00:18:30,940 --> 00:18:38,710
dynamic<font color="#CCCCCC"> case right you using</font><font color="#E5E5E5"> a dynamic</font>

357
00:18:34,510 --> 00:18:43,350
<font color="#E5E5E5">case you can locate where the code is so</font>

358
00:18:38,710 --> 00:18:45,280
I I think<font color="#CCCCCC"> you are mentioning that the</font>

359
00:18:43,350 --> 00:18:48,790
construction of control<font color="#E5E5E5"> flow graph</font>

360
00:18:45,280 --> 00:18:57,120
statically<font color="#E5E5E5"> is hard but we have</font><font color="#CCCCCC"> dynamic</font>

361
00:18:48,790 --> 00:18:57,120
Jason question

362
00:18:57,920 --> 00:19:05,700
suspicious of fuzzing<font color="#E5E5E5"> but let me ask you</font>

363
00:19:03,170 --> 00:19:08,760
when<font color="#E5E5E5"> you're when you're claiming you're</font>

364
00:19:05,700 --> 00:19:12,470
finding bugs<font color="#CCCCCC"> can you make a distinction</font>

365
00:19:08,760 --> 00:19:14,940
between exploitable bugs and just

366
00:19:12,470 --> 00:19:21,150
ordinary bugs that nobody<font color="#E5E5E5"> could ever do</font>

367
00:19:14,940 --> 00:19:24,540
<font color="#E5E5E5">anything with oh well we I could I</font>

368
00:19:21,150 --> 00:19:27,510
didn't<font color="#CCCCCC"> to verify whether the crashes</font>

369
00:19:24,540 --> 00:19:32,190
<font color="#E5E5E5">we've are found in the</font><font color="#CCCCCC"> real world</font>

370
00:19:27,510 --> 00:19:35,100
<font color="#E5E5E5">programs are exploitable</font><font color="#CCCCCC"> or not I think</font>

371
00:19:32,190 --> 00:19:41,340
<font color="#CCCCCC">that's the</font><font color="#E5E5E5"> answer and I will</font><font color="#CCCCCC"> definitely</font>

372
00:19:35,100 --> 00:19:46,290
<font color="#E5E5E5">check that thanks for watching</font><font color="#CCCCCC"> okay one</font>

373
00:19:41,340 --> 00:19:50,280
quick question<font color="#CCCCCC"> from my side you only I</font>

374
00:19:46,290 --> 00:19:55,350
use for most<font color="#CCCCCC"> of the tests I use a random</font>

375
00:19:50,280 --> 00:19:57,960
<font color="#E5E5E5">seed so that's</font><font color="#CCCCCC"> as an advantage over some</font>

376
00:19:55,350 --> 00:20:00,379
existing to a snake<font color="#CCCCCC"> buzzer and the</font>

377
00:19:57,960 --> 00:20:00,380
Phoenix

