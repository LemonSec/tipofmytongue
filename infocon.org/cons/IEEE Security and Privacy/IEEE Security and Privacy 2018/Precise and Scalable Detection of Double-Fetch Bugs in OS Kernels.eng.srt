1
00:00:07,800 --> 00:00:13,469
<font color="#CCCCCC">yes so</font><font color="#E5E5E5"> today I</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> be presenting this</font>

2
00:00:10,340 --> 00:00:16,378
double<font color="#E5E5E5"> fetch box like we try to do this</font>

3
00:00:13,469 --> 00:00:18,509
precisely and<font color="#E5E5E5"> in a scalable way so this</font>

4
00:00:16,379 --> 00:00:21,270
<font color="#CCCCCC">is the work John works with my lab mate</font>

5
00:00:18,510 --> 00:00:24,600
changing and professors<font color="#CCCCCC"> country micro</font>

6
00:00:21,270 --> 00:00:26,310
and tissue<font color="#E5E5E5"> so first thing</font><font color="#CCCCCC"> first why do</font>

7
00:00:24,600 --> 00:00:29,220
we do<font color="#CCCCCC"> our why - who knows -</font><font color="#E5E5E5"> double</font>

8
00:00:26,310 --> 00:00:31,169
<font color="#CCCCCC">Faction why do we</font><font color="#E5E5E5"> care about this so the</font>

9
00:00:29,220 --> 00:00:34,559
table<font color="#E5E5E5"> fetch all</font><font color="#CCCCCC"> originated from this</font>

10
00:00:31,170 --> 00:00:36,420
address based separation protection

11
00:00:34,559 --> 00:00:39,419
which<font color="#E5E5E5"> completely separate the user space</font>

12
00:00:36,420 --> 00:00:41,670
program<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> kernel space</font><font color="#E5E5E5"> so say if</font>

13
00:00:39,420 --> 00:00:43,890
you want<font color="#E5E5E5"> to this implies two things so</font>

14
00:00:41,670 --> 00:00:46,079
if<font color="#CCCCCC"> you want to copy</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> from the</font>

15
00:00:43,890 --> 00:00:48,060
kernel space<font color="#E5E5E5"> to user space you can now</font>

16
00:00:46,079 --> 00:00:50,370
directly dereference the user space

17
00:00:48,060 --> 00:00:52,980
pointer for example just<font color="#CCCCCC"> dark</font><font color="#E5E5E5"> the</font>

18
00:00:50,370 --> 00:00:55,260
reference<font color="#CCCCCC"> not this</font><font color="#E5E5E5"> is wrong and what you</font>

19
00:00:52,980 --> 00:00:57,209
should do is you should use this copy

20
00:00:55,260 --> 00:00:59,968
from user functions we call it transfer

21
00:00:57,210 --> 00:01:01,950
functions<font color="#E5E5E5"> that specify where to copy</font>

22
00:00:59,969 --> 00:01:03,719
from user space<font color="#E5E5E5"> and where to the</font><font color="#CCCCCC"> chrono</font>

23
00:01:01,950 --> 00:01:07,290
<font color="#E5E5E5">space and how many bytes you want to</font>

24
00:01:03,719 --> 00:01:10,140
copy<font color="#E5E5E5"> and then so this gives one this</font>

25
00:01:07,290 --> 00:01:13,679
<font color="#CCCCCC">case like how do we identify the fetches</font>

26
00:01:10,140 --> 00:01:15,270
so<font color="#CCCCCC"> there's a second implication</font><font color="#E5E5E5"> out of</font>

27
00:01:13,679 --> 00:01:18,060
this address<font color="#CCCCCC"> space separation which</font>

28
00:01:15,270 --> 00:01:20,280
means that all the the userspace threads

29
00:01:18,060 --> 00:01:21,689
of the same<font color="#E5E5E5"> program are shared of the</font>

30
00:01:20,280 --> 00:01:24,509
same<font color="#E5E5E5"> process</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> shares the same</font>

31
00:01:21,689 --> 00:01:27,359
virtual space address so basically every

32
00:01:24,509 --> 00:01:31,049
thread can have<font color="#E5E5E5"> something say write or</font>

33
00:01:27,359 --> 00:01:32,699
read<font color="#E5E5E5"> to this user space address and this</font>

34
00:01:31,049 --> 00:01:34,770
means that<font color="#E5E5E5"> there could be some risk</font>

35
00:01:32,700 --> 00:01:37,049
condition happening so<font color="#E5E5E5"> you do something</font>

36
00:01:34,770 --> 00:01:38,729
copy something from kernel and then at

37
00:01:37,049 --> 00:01:41,579
the same<font color="#CCCCCC"> time</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> other user space</font>

38
00:01:38,729 --> 00:01:44,158
thread try to modify<font color="#E5E5E5"> this value and this</font>

39
00:01:41,579 --> 00:01:46,529
<font color="#CCCCCC">is kind of</font><font color="#E5E5E5"> the root cause of this double</font>

40
00:01:44,159 --> 00:01:49,409
fetch box<font color="#E5E5E5"> which I'll show you later so</font>

41
00:01:46,529 --> 00:01:51,029
just<font color="#CCCCCC"> now we show why do we do a single</font>

42
00:01:49,409 --> 00:01:52,619
fetch because we want to<font color="#E5E5E5"> get some value</font>

43
00:01:51,029 --> 00:01:54,749
from<font color="#CCCCCC"> the user</font><font color="#E5E5E5"> space economies</font><font color="#CCCCCC"> know</font>

44
00:01:52,619 --> 00:01:57,240
certain questions why do we do double

45
00:01:54,749 --> 00:01:59,699
<font color="#CCCCCC">factions so this is the kind of example</font>

46
00:01:57,240 --> 00:02:01,919
code<font color="#E5E5E5"> it's actually</font><font color="#CCCCCC"> a simplify</font><font color="#E5E5E5"> coding the</font>

47
00:01:59,700 --> 00:02:03,989
chrono space so the reason the most

48
00:02:01,919 --> 00:02:05,819
<font color="#E5E5E5">common reason why</font><font color="#CCCCCC"> we do double fetch</font><font color="#E5E5E5"> is</font>

49
00:02:03,989 --> 00:02:07,829
that we<font color="#E5E5E5"> don't know how</font><font color="#CCCCCC"> many</font><font color="#E5E5E5"> bytes we're</font>

50
00:02:05,819 --> 00:02:09,300
going to<font color="#CCCCCC"> copy</font><font color="#E5E5E5"> from the user space for</font>

51
00:02:07,829 --> 00:02:12,450
example<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> case</font><font color="#CCCCCC"> we have a very</font>

52
00:02:09,300 --> 00:02:15,270
opaque<font color="#E5E5E5"> of user space pointer the the</font>

53
00:02:12,450 --> 00:02:16,079
structure of<font color="#E5E5E5"> for even attribute we don't</font>

54
00:02:15,270 --> 00:02:18,060
know how many<font color="#E5E5E5"> bytes</font>

55
00:02:16,080 --> 00:02:20,980
<font color="#E5E5E5">we're going to cover to user so what</font>

56
00:02:18,060 --> 00:02:23,530
typically<font color="#E5E5E5"> do is that we will prefer</font>

57
00:02:20,980 --> 00:02:25,569
the format of<font color="#E5E5E5"> this structure</font><font color="#CCCCCC"> so we see</font>

58
00:02:23,530 --> 00:02:27,519
that the first<font color="#E5E5E5"> four bytes will continue</font>

59
00:02:25,569 --> 00:02:29,920
a value of how many bytes of the<font color="#E5E5E5"> whole</font>

60
00:02:27,519 --> 00:02:32,230
<font color="#CCCCCC">messages so what we do is we do the</font>

61
00:02:29,920 --> 00:02:34,659
<font color="#E5E5E5">first</font><font color="#CCCCCC"> fetch</font><font color="#E5E5E5"> we copy the the first of all</font>

62
00:02:32,230 --> 00:02:37,238
by<font color="#CCCCCC"> its 4 bytes into the kernel space and</font>

63
00:02:34,659 --> 00:02:39,310
then we you really will do some sanity

64
00:02:37,239 --> 00:02:41,620
checks to make<font color="#CCCCCC"> sure that this is not a</font>

65
00:02:39,310 --> 00:02:44,290
stupid value in either stupidly large or

66
00:02:41,620 --> 00:02:46,450
small<font color="#E5E5E5"> and then we know</font><font color="#CCCCCC"> that the whole</font>

67
00:02:44,290 --> 00:02:47,859
message<font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to</font><font color="#CCCCCC"> be 30 bytes and then</font>

68
00:02:46,450 --> 00:02:51,250
we do the second factor and copy the

69
00:02:47,860 --> 00:02:53,110
<font color="#E5E5E5">whole message into the current and</font><font color="#CCCCCC"> then</font>

70
00:02:51,250 --> 00:02:56,140
<font color="#E5E5E5">the function</font><font color="#CCCCCC"> so just think about this</font>

71
00:02:53,110 --> 00:02:57,940
what could<font color="#E5E5E5"> go wrong</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this process so</font>

72
00:02:56,140 --> 00:03:01,420
basically up<font color="#E5E5E5"> until the first</font><font color="#CCCCCC"> fetch</font>

73
00:02:57,940 --> 00:03:04,569
<font color="#E5E5E5">everything is ok you know this 30 the</font>

74
00:03:01,420 --> 00:03:06,608
<font color="#E5E5E5">first byte is 30 the size is 30 but</font>

75
00:03:04,569 --> 00:03:08,560
while<font color="#CCCCCC"> you are</font><font color="#E5E5E5"> doing after</font><font color="#CCCCCC"> you're doing a</font>

76
00:03:06,609 --> 00:03:11,170
second<font color="#CCCCCC"> fetch and while we're doing the</font>

77
00:03:08,560 --> 00:03:13,180
sanity checks<font color="#E5E5E5"> another user spacer I can</font>

78
00:03:11,170 --> 00:03:15,309
override the first<font color="#CCCCCC"> four bytes because</font>

79
00:03:13,180 --> 00:03:17,799
<font color="#E5E5E5">that is in user space and you</font><font color="#CCCCCC"> go space</font>

80
00:03:15,310 --> 00:03:20,260
thread can have access<font color="#CCCCCC"> to these values</font>

81
00:03:17,799 --> 00:03:22,569
<font color="#E5E5E5">so</font><font color="#CCCCCC"> they can override a</font><font color="#E5E5E5"> 38 to any</font>

82
00:03:20,260 --> 00:03:24,310
arbitrary<font color="#CCCCCC"> large numbers and then when</font>

83
00:03:22,569 --> 00:03:27,280
you do<font color="#E5E5E5"> the second fish you basically</font>

84
00:03:24,310 --> 00:03:29,260
copy the whole<font color="#CCCCCC"> message but this time the</font>

85
00:03:27,280 --> 00:03:30,970
<font color="#CCCCCC">size of the header</font><font color="#E5E5E5"> unless your header or</font>

86
00:03:29,260 --> 00:03:34,209
the size of message actually<font color="#E5E5E5"> change and</font>

87
00:03:30,970 --> 00:03:36,700
later if you do some calculation<font color="#E5E5E5"> and</font>

88
00:03:34,209 --> 00:03:39,280
<font color="#E5E5E5">then you want to copy the buffer back to</font>

89
00:03:36,700 --> 00:03:41,319
the<font color="#CCCCCC"> users base and if you rely on the</font>

90
00:03:39,280 --> 00:03:43,810
<font color="#CCCCCC">first</font><font color="#E5E5E5"> four bytes</font><font color="#CCCCCC"> to indicate its size</font>

91
00:03:41,319 --> 00:03:46,958
<font color="#E5E5E5">probably you get you get you're going to</font>

92
00:03:43,810 --> 00:03:49,569
<font color="#E5E5E5">copy like 64 bytes of kernel</font><font color="#CCCCCC"> space into</font>

93
00:03:46,959 --> 00:03:53,230
user space which is a kernel information

94
00:03:49,569 --> 00:03:55,480
leak so so why double<font color="#E5E5E5"> fetch is quite</font>

95
00:03:53,230 --> 00:03:57,518
prevalent in<font color="#E5E5E5"> kernels or why it's kind of</font>

96
00:03:55,480 --> 00:03:59,319
difficult to detect<font color="#CCCCCC"> is that there are so</font>

97
00:03:57,519 --> 00:04:01,630
<font color="#CCCCCC">many reasons why there's so</font><font color="#E5E5E5"> many</font>

98
00:03:59,319 --> 00:04:03,399
patterns why double<font color="#E5E5E5"> fudge can happen so</font>

99
00:04:01,630 --> 00:04:05,079
what I show you just now it's the size

100
00:04:03,400 --> 00:04:06,430
checking pattern<font color="#E5E5E5"> and there are actually</font>

101
00:04:05,079 --> 00:04:07,870
more<font color="#CCCCCC"> and more patterns in acronym for</font>

102
00:04:06,430 --> 00:04:10,030
example<font color="#E5E5E5"> they're doing some defendants</font>

103
00:04:07,870 --> 00:04:12,340
they<font color="#E5E5E5"> look up or protocol signature check</font>

104
00:04:10,030 --> 00:04:14,709
so let me show<font color="#E5E5E5"> you another</font><font color="#CCCCCC"> example so</font>

105
00:04:12,340 --> 00:04:16,959
<font color="#E5E5E5">this is how the</font><font color="#CCCCCC"> Khronos develop try to</font>

106
00:04:14,709 --> 00:04:19,358
do dependency<font color="#CCCCCC"> low-cut so if you do the</font>

107
00:04:16,959 --> 00:04:22,030
<font color="#E5E5E5">first search you get the</font><font color="#CCCCCC"> message header</font>

108
00:04:19,358 --> 00:04:26,859
and then you try<font color="#CCCCCC"> to vary fur to try to</font>

109
00:04:22,029 --> 00:04:29,409
look<font color="#E5E5E5"> up IOC pointer based on the IOC</font>

110
00:04:26,860 --> 00:04:31,450
number and then once you get<font color="#E5E5E5"> a pointer</font>

111
00:04:29,409 --> 00:04:33,430
<font color="#E5E5E5">you're going to acquire the mutex lock</font>

112
00:04:31,450 --> 00:04:34,900
and once you have the mutex locked

113
00:04:33,430 --> 00:04:37,840
you're going to do

114
00:04:34,900 --> 00:04:39,909
<font color="#CCCCCC">a second patch</font><font color="#E5E5E5"> of the same header plus</font>

115
00:04:37,840 --> 00:04:43,299
something else<font color="#CCCCCC"> and</font><font color="#E5E5E5"> they are going to do</font>

116
00:04:39,910 --> 00:04:45,330
some download on the same iOS a number

117
00:04:43,300 --> 00:04:48,669
<font color="#E5E5E5">so what can actually</font><font color="#CCCCCC"> go wrong is that</font>

118
00:04:45,330 --> 00:04:50,258
<font color="#E5E5E5">the the IOC number of the two different</font>

119
00:04:48,669 --> 00:04:51,820
factors<font color="#E5E5E5"> can be different so what if</font>

120
00:04:50,259 --> 00:04:56,740
actually what you<font color="#E5E5E5"> are doing is</font><font color="#CCCCCC"> that you</font>

121
00:04:51,820 --> 00:04:59,320
are doing this the<font color="#E5E5E5"> do fw download on</font><font color="#CCCCCC"> ioc</font>

122
00:04:56,740 --> 00:05:01,780
number device number<font color="#CCCCCC"> two but with with</font>

123
00:04:59,320 --> 00:05:04,870
the log of device number<font color="#CCCCCC"> one</font><font color="#E5E5E5"> acquired</font><font color="#CCCCCC"> so</font>

124
00:05:01,780 --> 00:05:06,940
so it's up to develop also<font color="#E5E5E5"> attacker to</font>

125
00:05:04,870 --> 00:05:07,690
think about how they can abuse<font color="#E5E5E5"> these</font>

126
00:05:06,940 --> 00:05:10,780
<font color="#E5E5E5">kind of things</font>

127
00:05:07,690 --> 00:05:12,910
<font color="#CCCCCC">so another example</font><font color="#E5E5E5"> is how do they do</font>

128
00:05:10,780 --> 00:05:14,799
they do prove attacks protocol checks or

129
00:05:12,910 --> 00:05:17,289
signature<font color="#E5E5E5"> checks so they basically want</font>

130
00:05:14,800 --> 00:05:19,440
to early reject<font color="#CCCCCC"> a</font><font color="#E5E5E5"> message so</font><font color="#CCCCCC"> they copy</font>

131
00:05:17,289 --> 00:05:22,240
<font color="#CCCCCC">the header and verify that</font><font color="#E5E5E5"> the header</font>

132
00:05:19,440 --> 00:05:25,330
<font color="#E5E5E5">must be safe here</font><font color="#CCCCCC"> is one</font><font color="#E5E5E5"> point two and</font>

133
00:05:22,240 --> 00:05:27,910
then<font color="#E5E5E5"> they if not it just ever</font><font color="#CCCCCC"> returned</font>

134
00:05:25,330 --> 00:05:29,469
and if if<font color="#E5E5E5"> you yes then you do the second</font>

135
00:05:27,910 --> 00:05:33,250
faction<font color="#CCCCCC"> do something with the full</font>

136
00:05:29,470 --> 00:05:35,770
message<font color="#E5E5E5"> but what it's not</font><font color="#CCCCCC"> expected is</font>

137
00:05:33,250 --> 00:05:37,120
<font color="#CCCCCC">that when after</font><font color="#E5E5E5"> you do the first fetch</font>

138
00:05:35,770 --> 00:05:39,969
and while you're doing<font color="#CCCCCC"> the pro soccer</font>

139
00:05:37,120 --> 00:05:42,099
<font color="#E5E5E5">track this this</font><font color="#CCCCCC"> t is one point two</font>

140
00:05:39,970 --> 00:05:45,490
<font color="#E5E5E5">version can be changed in the header so</font>

141
00:05:42,099 --> 00:05:49,690
you can<font color="#E5E5E5"> basically send use any kind of</font>

142
00:05:45,490 --> 00:05:52,330
TRS 1.1 1.0 or something else<font color="#E5E5E5"> so this</font>

143
00:05:49,690 --> 00:05:55,930
has been<font color="#E5E5E5"> a issue like brought out by</font>

144
00:05:52,330 --> 00:05:59,409
<font color="#CCCCCC">both phone projects in blackhat 2013 and</font>

145
00:05:55,930 --> 00:06:01,720
<font color="#CCCCCC">it's it's</font><font color="#E5E5E5"> work on</font><font color="#CCCCCC"> Windows using some</font>

146
00:05:59,409 --> 00:06:03,669
virtual machine inspection techniques<font color="#CCCCCC"> so</font>

147
00:06:01,720 --> 00:06:05,470
the<font color="#E5E5E5"> pattern they define is that if</font>

148
00:06:03,669 --> 00:06:08,139
they're going<font color="#E5E5E5"> to be two consecutive</font>

149
00:06:05,470 --> 00:06:11,139
<font color="#E5E5E5">memory accesses</font><font color="#CCCCCC"> we doing a</font><font color="#E5E5E5"> short time to</font>

150
00:06:08,139 --> 00:06:13,720
the same<font color="#E5E5E5"> user space space address then</font>

151
00:06:11,139 --> 00:06:16,780
<font color="#E5E5E5">it's going to be a double fetch bug so a</font>

152
00:06:13,720 --> 00:06:19,419
<font color="#E5E5E5">similar technique works for the</font><font color="#CCCCCC"> Linux</font>

153
00:06:16,780 --> 00:06:23,198
and is recently proposing an archive is

154
00:06:19,419 --> 00:06:25,180
called decaf so they try to do a kernel

155
00:06:23,199 --> 00:06:28,810
<font color="#E5E5E5">farting to try to maximize</font><font color="#CCCCCC"> the code</font>

156
00:06:25,180 --> 00:06:31,690
<font color="#E5E5E5">coverage and they used a clever cache</font>

157
00:06:28,810 --> 00:06:34,479
side-channel to do this<font color="#E5E5E5"> so and the mole</font>

158
00:06:31,690 --> 00:06:37,060
<font color="#E5E5E5">related work for us is the the UNIX</font>

159
00:06:34,479 --> 00:06:39,639
security last year's works<font color="#E5E5E5"> so it's also</font>

160
00:06:37,060 --> 00:06:42,340
based<font color="#E5E5E5"> on static analysis and they use</font>

161
00:06:39,639 --> 00:06:44,380
<font color="#CCCCCC">some lexical code mashing to</font><font color="#E5E5E5"> find the</font>

162
00:06:42,340 --> 00:06:48,580
<font color="#E5E5E5">most the easy patterns like size</font>

163
00:06:44,380 --> 00:06:51,039
checking<font color="#E5E5E5"> things so the drawback of the</font>

164
00:06:48,580 --> 00:06:52,750
<font color="#E5E5E5">really works</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> they require menu</font>

165
00:06:51,039 --> 00:06:55,120
efforts<font color="#E5E5E5"> so basically what they're trying</font>

166
00:06:52,750 --> 00:06:56,680
to do is that they are going to tell you

167
00:06:55,120 --> 00:06:58,090
there are two<font color="#E5E5E5"> factors but they are not</font>

168
00:06:56,680 --> 00:07:00,159
<font color="#E5E5E5">going to tell you whether these two</font>

169
00:06:58,090 --> 00:07:02,349
factors<font color="#CCCCCC"> are</font><font color="#E5E5E5"> actually going to cause</font>

170
00:07:00,159 --> 00:07:05,349
trouble<font color="#CCCCCC"> or</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> so some some form of</font>

171
00:07:02,349 --> 00:07:07,840
manual<font color="#E5E5E5"> verification is needed for us we</font>

172
00:07:05,349 --> 00:07:10,750
we try to minimize<font color="#CCCCCC"> this menu effort as</font>

173
00:07:07,840 --> 00:07:13,659
much as possible<font color="#CCCCCC"> so what do</font><font color="#E5E5E5"> we do we use</font>

174
00:07:10,750 --> 00:07:16,150
we<font color="#E5E5E5"> also do static analysis but we</font><font color="#CCCCCC"> also</font>

175
00:07:13,659 --> 00:07:18,520
use<font color="#E5E5E5"> symbolic checking to not only find</font>

176
00:07:16,150 --> 00:07:21,789
that<font color="#E5E5E5"> this could be double fetch we all</font>

177
00:07:18,520 --> 00:07:23,740
<font color="#E5E5E5">we define a model</font><font color="#CCCCCC"> that saying that</font><font color="#E5E5E5"> if</font>

178
00:07:21,789 --> 00:07:25,330
the two fetchers are in<font color="#E5E5E5"> this shape they</font>

179
00:07:23,740 --> 00:07:27,219
are<font color="#E5E5E5"> going to be double fetch box and we</font>

180
00:07:25,330 --> 00:07:29,680
use symbolic checking to make sure that

181
00:07:27,219 --> 00:07:33,009
and by doing so<font color="#E5E5E5"> which minimize our</font>

182
00:07:29,680 --> 00:07:35,289
manual effort<font color="#E5E5E5"> so so how do we</font><font color="#CCCCCC"> define</font>

183
00:07:33,009 --> 00:07:38,620
this type of<font color="#CCCCCC"> hash box so basically</font><font color="#E5E5E5"> a</font>

184
00:07:35,289 --> 00:07:41,080
fetch<font color="#E5E5E5"> is just a pair it's a starting</font>

185
00:07:38,620 --> 00:07:42,639
address of<font color="#CCCCCC"> the user space and how many</font>

186
00:07:41,080 --> 00:07:45,219
bytes are going to copy<font color="#E5E5E5"> to a kernel and</font>

187
00:07:42,639 --> 00:07:47,259
then<font color="#E5E5E5"> the next thing</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> how it's</font>

188
00:07:45,219 --> 00:07:49,300
like if you<font color="#E5E5E5"> say you're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have a</font>

189
00:07:47,259 --> 00:07:51,580
double fudge pop the<font color="#E5E5E5"> the two factors</font>

190
00:07:49,300 --> 00:07:55,479
have<font color="#E5E5E5"> to have elapsed so basically the</font>

191
00:07:51,580 --> 00:07:58,060
overlap<font color="#E5E5E5"> means that you have to copy to</font>

192
00:07:55,479 --> 00:08:00,400
<font color="#CCCCCC">two to do two factors and then you</font>

193
00:07:58,060 --> 00:08:03,279
either in<font color="#E5E5E5"> the form of this</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> so you</font>

194
00:08:00,400 --> 00:08:05,020
copy<font color="#E5E5E5"> somewhere in the middle or</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> in</font>

195
00:08:03,279 --> 00:08:08,159
the form of this<font color="#CCCCCC"> one you copy the whole</font>

196
00:08:05,020 --> 00:08:11,909
<font color="#E5E5E5">message header into the kernel space and</font>

197
00:08:08,159 --> 00:08:14,589
also by doing<font color="#E5E5E5"> this overlap fetch we also</font>

198
00:08:11,909 --> 00:08:16,210
we also<font color="#E5E5E5"> know</font><font color="#CCCCCC"> that which part of</font><font color="#E5E5E5"> the</font>

199
00:08:14,589 --> 00:08:18,699
message<font color="#E5E5E5"> header is overlapped for example</font>

200
00:08:16,210 --> 00:08:20,758
<font color="#E5E5E5">you say the size or the whole structure</font>

201
00:08:18,699 --> 00:08:24,879
the whole header structure<font color="#E5E5E5"> in this case</font>

202
00:08:20,759 --> 00:08:26,680
so and then what knowing<font color="#E5E5E5"> that there's an</font>

203
00:08:24,879 --> 00:08:28,810
overlap patch it's not enough to make<font color="#CCCCCC"> it</font>

204
00:08:26,680 --> 00:08:30,879
<font color="#E5E5E5">a double fetch bug so what makes it a</font>

205
00:08:28,810 --> 00:08:32,380
double fetch bug<font color="#E5E5E5"> it's actually you have</font>

206
00:08:30,879 --> 00:08:34,599
to establish some relationship between

207
00:08:32,380 --> 00:08:36,070
<font color="#E5E5E5">the two fetches and one kind of</font>

208
00:08:34,599 --> 00:08:38,019
<font color="#E5E5E5">relationship</font><font color="#CCCCCC"> is called control</font>

209
00:08:36,070 --> 00:08:41,469
dependence what it means that is that

210
00:08:38,019 --> 00:08:44,560
the variable has to stay in the overlap

211
00:08:41,469 --> 00:08:46,480
region<font color="#CCCCCC"> and in order for the variable to</font>

212
00:08:44,560 --> 00:08:47,829
reach the second fact in<font color="#E5E5E5"> order for the</font>

213
00:08:46,480 --> 00:08:49,870
control flow to reach the second<font color="#CCCCCC"> fetch</font>

214
00:08:47,829 --> 00:08:52,899
this variable has to<font color="#CCCCCC"> satisfy some</font>

215
00:08:49,870 --> 00:08:55,600
<font color="#CCCCCC">conditions for example in this</font><font color="#E5E5E5"> case in</font>

216
00:08:52,899 --> 00:08:58,270
order<font color="#E5E5E5"> to reach the second fetch the the</font>

217
00:08:55,600 --> 00:09:00,399
header dot version must be here as one

218
00:08:58,270 --> 00:09:02,230
point<font color="#CCCCCC"> to</font><font color="#E5E5E5"> version therefore we expect</font>

219
00:09:00,399 --> 00:09:04,930
<font color="#E5E5E5">that after</font><font color="#CCCCCC"> you're doing the search</font>

220
00:09:02,230 --> 00:09:07,870
<font color="#CCCCCC">ouch</font><font color="#E5E5E5"> we should this this property issue</font>

221
00:09:04,930 --> 00:09:09,370
still<font color="#E5E5E5"> hold the same unfortunately if you</font>

222
00:09:07,870 --> 00:09:11,110
do after you do<font color="#CCCCCC"> a second flash and</font>

223
00:09:09,370 --> 00:09:13,510
ensure the end of<font color="#E5E5E5"> this function</font>

224
00:09:11,110 --> 00:09:16,360
<font color="#E5E5E5">there's no way to ensure that this</font>

225
00:09:13,510 --> 00:09:19,660
header dot version<font color="#E5E5E5"> or in this case is</font>

226
00:09:16,360 --> 00:09:23,050
full version adult version<font color="#E5E5E5"> it still</font><font color="#CCCCCC"> to</font>

227
00:09:19,660 --> 00:09:24,910
as<font color="#CCCCCC"> 1.2 therefore</font><font color="#E5E5E5"> it's kind of violation</font>

228
00:09:23,050 --> 00:09:26,829
<font color="#CCCCCC">of</font><font color="#E5E5E5"> this control dependence and that</font>

229
00:09:24,910 --> 00:09:29,110
makes it a double<font color="#CCCCCC"> Fishbach</font><font color="#E5E5E5"> instead of</font>

230
00:09:26,830 --> 00:09:31,570
<font color="#E5E5E5">just overlap fetch so the other</font>

231
00:09:29,110 --> 00:09:34,450
relationship it could<font color="#E5E5E5"> be is a data</font>

232
00:09:31,570 --> 00:09:37,570
dependence which means that some value

233
00:09:34,450 --> 00:09:40,060
in this overlap region is used in some

234
00:09:37,570 --> 00:09:42,070
form of calculation or in some<font color="#CCCCCC"> part of</font>

235
00:09:40,060 --> 00:09:45,180
some function calls<font color="#E5E5E5"> therefore we expect</font>

236
00:09:42,070 --> 00:09:48,520
the same value is going<font color="#E5E5E5"> to hold same</font>

237
00:09:45,180 --> 00:09:51,219
after the<font color="#E5E5E5"> second</font><font color="#CCCCCC"> batch</font><font color="#E5E5E5"> so and this is</font>

238
00:09:48,520 --> 00:09:53,199
<font color="#E5E5E5">this dependency lookup example is</font>

239
00:09:51,220 --> 00:09:55,240
<font color="#E5E5E5">actually a violation of this data</font>

240
00:09:53,200 --> 00:09:57,850
dependence because<font color="#E5E5E5"> once you get the</font>

241
00:09:55,240 --> 00:10:00,340
first<font color="#E5E5E5"> fetch you use this IOC number to</font>

242
00:09:57,850 --> 00:10:02,170
look up something<font color="#E5E5E5"> therefore after you do</font>

243
00:10:00,340 --> 00:10:04,000
the second fetch you expect that this

244
00:10:02,170 --> 00:10:06,010
IOC number is the same but<font color="#CCCCCC"> actually it's</font>

245
00:10:04,000 --> 00:10:08,320
not<font color="#CCCCCC"> therefore it's a violation of this</font>

246
00:10:06,010 --> 00:10:13,780
data dependence and which makes it

247
00:10:08,320 --> 00:10:16,210
double<font color="#E5E5E5"> fetch bar so quick recap so to</font>

248
00:10:13,780 --> 00:10:18,040
make<font color="#CCCCCC"> it to find a fresh</font><font color="#E5E5E5"> bag we</font><font color="#CCCCCC"> have to</font>

249
00:10:16,210 --> 00:10:20,860
have two<font color="#CCCCCC"> factors that</font><font color="#E5E5E5"> have overlapped</font>

250
00:10:18,040 --> 00:10:22,839
regions and some relation must be

251
00:10:20,860 --> 00:10:24,850
<font color="#E5E5E5">established between the store in this</font>

252
00:10:22,840 --> 00:10:27,370
overlap region either control<font color="#E5E5E5"> dominance</font>

253
00:10:24,850 --> 00:10:30,460
or<font color="#E5E5E5"> data dependence and we cannot prove</font>

254
00:10:27,370 --> 00:10:32,710
<font color="#CCCCCC">that at the end of function there's the</font>

255
00:10:30,460 --> 00:10:35,410
relation<font color="#CCCCCC"> it's still valid of the second</font>

256
00:10:32,710 --> 00:10:37,360
fish and therefore<font color="#E5E5E5"> therefore this is</font><font color="#CCCCCC"> the</font>

257
00:10:35,410 --> 00:10:40,600
<font color="#CCCCCC">definition of the double fetch</font><font color="#E5E5E5"> bug so</font>

258
00:10:37,360 --> 00:10:44,040
how this<font color="#E5E5E5"> kind definition help us guide</font>

259
00:10:40,600 --> 00:10:46,720
us<font color="#E5E5E5"> in terms of</font><font color="#CCCCCC"> finding those things</font><font color="#E5E5E5"> so</font>

260
00:10:44,040 --> 00:10:51,130
basically<font color="#CCCCCC"> we need to find</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> things so</font>

261
00:10:46,720 --> 00:10:52,900
find many double<font color="#E5E5E5"> fish pairs as much as</font>

262
00:10:51,130 --> 00:10:54,820
many<font color="#E5E5E5"> pairs as possible</font><font color="#CCCCCC"> and then</font>

263
00:10:52,900 --> 00:10:56,709
<font color="#CCCCCC">construct the code passes</font><font color="#E5E5E5"> that is</font>

264
00:10:54,820 --> 00:10:58,750
associated<font color="#E5E5E5"> based each fresh pair and</font>

265
00:10:56,710 --> 00:11:01,300
then symbolically check each of the code

266
00:10:58,750 --> 00:11:03,030
paths and decide whether the<font color="#CCCCCC"> two</font><font color="#E5E5E5"> factors</font>

267
00:11:01,300 --> 00:11:07,479
actually make a double<font color="#E5E5E5"> hash mark or not</font>

268
00:11:03,030 --> 00:11:09,760
<font color="#E5E5E5">so the goal or so how do we click the</font>

269
00:11:07,480 --> 00:11:11,560
fetch pairs the goal is that we're going

270
00:11:09,760 --> 00:11:13,630
to statically image all<font color="#CCCCCC"> the possible</font>

271
00:11:11,560 --> 00:11:16,150
factors that could occur in

272
00:11:13,630 --> 00:11:18,460
execution so the ideal solution would<font color="#CCCCCC"> be</font>

273
00:11:16,150 --> 00:11:20,260
a top-down approach<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you identify all</font>

274
00:11:18,460 --> 00:11:23,230
the<font color="#CCCCCC"> fetchers</font><font color="#E5E5E5"> in kernels and you</font>

275
00:11:20,260 --> 00:11:25,689
construct a complete<font color="#E5E5E5"> intro procedure CFG</font>

276
00:11:23,230 --> 00:11:27,790
in the<font color="#E5E5E5"> pinnacle a base in a code base</font>

277
00:11:25,690 --> 00:11:28,510
and then<font color="#E5E5E5"> we perform parrots we should</font>

278
00:11:27,790 --> 00:11:30,760
<font color="#CCCCCC">really test</font>

279
00:11:28,510 --> 00:11:33,040
well this is the idea about<font color="#E5E5E5"> two and</font>

280
00:11:30,760 --> 00:11:35,380
<font color="#CCCCCC">three</font><font color="#E5E5E5"> so it's not really possible right</font>

281
00:11:33,040 --> 00:11:37,719
<font color="#CCCCCC">now to do in the kernel</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> what we do is</font>

282
00:11:35,380 --> 00:11:41,380
we use a bottom-up approach approach so

283
00:11:37,720 --> 00:11:43,270
ideally all the all the<font color="#CCCCCC"> fetchers we</font><font color="#E5E5E5"> can</font>

284
00:11:41,380 --> 00:11:45,430
we<font color="#E5E5E5"> can still identify all the fetchers</font>

285
00:11:43,270 --> 00:11:47,290
in the kernel<font color="#E5E5E5"> but for each fetch instead</font>

286
00:11:45,430 --> 00:11:50,829
of building the<font color="#CCCCCC"> hosts</font>

287
00:11:47,290 --> 00:11:53,170
<font color="#CCCCCC">Cronos TFG we</font><font color="#E5E5E5"> we start with the function</font>

288
00:11:50,830 --> 00:11:55,120
<font color="#E5E5E5">is resizing</font><font color="#CCCCCC"> and then scan through is</font>

289
00:11:53,170 --> 00:11:56,949
reaching definitions to find the

290
00:11:55,120 --> 00:12:01,090
<font color="#E5E5E5">factories or fetch involved functions</font>

291
00:11:56,950 --> 00:12:03,010
so a quick some details is<font color="#E5E5E5"> is like so</font>

292
00:12:01,090 --> 00:12:04,810
you start from<font color="#CCCCCC"> a fetch which is copy</font>

293
00:12:03,010 --> 00:12:06,850
from user function and then you go

294
00:12:04,810 --> 00:12:09,010
upwards you find all these reaching

295
00:12:06,850 --> 00:12:11,860
instructions<font color="#E5E5E5"> and in the first case you</font>

296
00:12:09,010 --> 00:12:14,770
<font color="#E5E5E5">find a fetch which is good you you find</font>

297
00:12:11,860 --> 00:12:16,230
a fetch<font color="#CCCCCC"> pad now you can start you find a</font>

298
00:12:14,770 --> 00:12:18,490
<font color="#CCCCCC">passed and then you can start to</font>

299
00:12:16,230 --> 00:12:20,410
<font color="#CCCCCC">similarly check</font><font color="#E5E5E5"> whether there is</font>

300
00:12:18,490 --> 00:12:22,690
<font color="#CCCCCC">acceptable</font><font color="#E5E5E5"> factual</font><font color="#CCCCCC"> knowledge and then in</font>

301
00:12:20,410 --> 00:12:24,699
the second second case<font color="#E5E5E5"> you you find</font>

302
00:12:22,690 --> 00:12:28,150
a fetch involved function<font color="#E5E5E5"> so although</font>

303
00:12:24,700 --> 00:12:30,610
this is<font color="#CCCCCC"> a not a copy from user or</font>

304
00:12:28,150 --> 00:12:31,870
something function but somewhere<font color="#E5E5E5"> inside</font>

305
00:12:30,610 --> 00:12:34,120
the function there's a copy from user

306
00:12:31,870 --> 00:12:36,250
and you can you<font color="#E5E5E5"> can just inline the</font>

307
00:12:34,120 --> 00:12:37,750
<font color="#E5E5E5">function over there and then you do the</font>

308
00:12:36,250 --> 00:12:39,880
whole thing<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> will find a fetch</font>

309
00:12:37,750 --> 00:12:41,770
pair and then<font color="#E5E5E5"> in a</font><font color="#CCCCCC"> third case there's no</font>

310
00:12:39,880 --> 00:12:44,230
other<font color="#CCCCCC"> factors so this is a</font><font color="#E5E5E5"> single fish</font>

311
00:12:41,770 --> 00:12:47,380
so don't worry don't<font color="#E5E5E5"> worry about this so</font>

312
00:12:44,230 --> 00:12:49,630
we<font color="#CCCCCC"> finish</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> first part</font><font color="#E5E5E5"> on how to crack</font>

313
00:12:47,380 --> 00:12:52,150
the<font color="#E5E5E5"> double fetch pairs now the second</font>

314
00:12:49,630 --> 00:12:55,480
part<font color="#E5E5E5"> is given each code executes and</font>

315
00:12:52,150 --> 00:12:57,490
<font color="#E5E5E5">pass whether you remember</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> conditions</font>

316
00:12:55,480 --> 00:12:59,470
we say whether there's a control flow

317
00:12:57,490 --> 00:13:00,670
dependency and whether all they have

318
00:12:59,470 --> 00:13:02,890
flow dependence<font color="#E5E5E5"> here and whether this</font>

319
00:13:00,670 --> 00:13:05,140
relation is their home after<font color="#CCCCCC"> the</font><font color="#E5E5E5"> first -</font>

320
00:13:02,890 --> 00:13:09,250
so this is what we do for<font color="#CCCCCC"> this symbolic</font>

321
00:13:05,140 --> 00:13:11,680
checking so as I said<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going to to</font>

322
00:13:09,250 --> 00:13:14,800
<font color="#E5E5E5">prove that the relations</font><font color="#CCCCCC"> there hose or</font>

323
00:13:11,680 --> 00:13:17,229
doesn't hold so how do we do that let me

324
00:13:14,800 --> 00:13:20,319
<font color="#E5E5E5">walk through you walk you through with</font>

325
00:13:17,230 --> 00:13:21,250
with this example<font color="#CCCCCC"> so it's a same code we</font>

326
00:13:20,320 --> 00:13:24,760
show you just<font color="#E5E5E5"> now</font>

327
00:13:21,250 --> 00:13:27,370
so if upon entering this function<font color="#E5E5E5"> we're</font>

328
00:13:24,760 --> 00:13:29,800
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> know some immediate facts</font>

329
00:13:27,370 --> 00:13:32,800
like there are<font color="#E5E5E5"> going to be two arguments</font>

330
00:13:29,800 --> 00:13:34,660
and then to<font color="#E5E5E5"> sort function parameters and</font>

331
00:13:32,800 --> 00:13:36,370
<font color="#CCCCCC">the first parameter points to a user</font>

332
00:13:34,660 --> 00:13:38,890
space<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> and the</font><font color="#E5E5E5"> second parameter</font>

333
00:13:36,370 --> 00:13:42,070
points to a<font color="#CCCCCC"> corner</font><font color="#E5E5E5"> space memory so</font><font color="#CCCCCC"> you</font>

334
00:13:38,890 --> 00:13:44,890
have some like basic understanding<font color="#E5E5E5"> of</font>

335
00:13:42,070 --> 00:13:49,330
the memory layouts and<font color="#E5E5E5"> then doing during</font>

336
00:13:44,890 --> 00:13:52,630
a first fetch<font color="#E5E5E5"> you</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> collect the the</font>

337
00:13:49,330 --> 00:13:55,600
fetch information<font color="#CCCCCC"> which is it's</font>

338
00:13:52,630 --> 00:13:58,120
<font color="#E5E5E5">narrating fetch f1 so basically it tells</font>

339
00:13:55,600 --> 00:14:01,270
you that<font color="#E5E5E5"> it starts</font><font color="#CCCCCC"> from the first</font>

340
00:13:58,120 --> 00:14:02,800
parameter plus<font color="#CCCCCC"> fall</font><font color="#E5E5E5"> and give the</font>

341
00:14:01,270 --> 00:14:04,449
starting address is the first<font color="#CCCCCC"> prime</font>

342
00:14:02,800 --> 00:14:06,310
<font color="#CCCCCC">minister</font><font color="#E5E5E5"> of class four and</font><font color="#CCCCCC"> then the</font><font color="#E5E5E5"> size</font>

343
00:14:04,450 --> 00:14:09,190
I saw basically<font color="#E5E5E5"> you fetch four bytes</font>

344
00:14:06,310 --> 00:14:12,069
from the user and<font color="#E5E5E5"> then you do some</font>

345
00:14:09,190 --> 00:14:14,680
sanity checks basically translate<font color="#E5E5E5"> it to</font>

346
00:14:12,070 --> 00:14:16,810
some symbolic<font color="#CCCCCC"> use its is that if you're</font>

347
00:14:14,680 --> 00:14:20,020
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to reach the second</font><font color="#E5E5E5"> fetch you</font>

348
00:14:16,810 --> 00:14:22,660
expect that this size variable<font color="#E5E5E5"> which we</font>

349
00:14:20,020 --> 00:14:25,210
represent<font color="#CCCCCC"> by dollar sign to</font><font color="#E5E5E5"> is how to</font>

350
00:14:22,660 --> 00:14:27,339
have to<font color="#E5E5E5"> satisfy certain conditions and</font>

351
00:14:25,210 --> 00:14:31,360
<font color="#E5E5E5">now you reach the second fetch pair you</font>

352
00:14:27,340 --> 00:14:32,710
do the same thing<font color="#E5E5E5"> and you derive the the</font>

353
00:14:31,360 --> 00:14:36,400
a<font color="#E5E5E5"> and</font><font color="#CCCCCC"> s which is</font><font color="#E5E5E5"> the starting address</font>

354
00:14:32,710 --> 00:14:38,590
and the size of the whole fetch and now

355
00:14:36,400 --> 00:14:40,780
<font color="#E5E5E5">once you reach the end</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> function</font>

356
00:14:38,590 --> 00:14:42,850
you are<font color="#E5E5E5"> going to do two checks</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> first</font>

357
00:14:40,780 --> 00:14:45,250
check is that<font color="#E5E5E5"> whether there is an</font>

358
00:14:42,850 --> 00:14:49,840
overlap<font color="#E5E5E5"> fetch which means that you're</font>

359
00:14:45,250 --> 00:14:53,680
going to see that whether the<font color="#E5E5E5"> f1 dot a</font>

360
00:14:49,840 --> 00:14:55,750
and f1 I mean<font color="#CCCCCC"> f1 dot s and F 2 dot af2</font>

361
00:14:53,680 --> 00:14:57,729
dollar satisfy certain constraint<font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean</font>

362
00:14:55,750 --> 00:15:00,100
if we satisfy there's overlap<font color="#CCCCCC"> fresh and</font>

363
00:14:57,730 --> 00:15:01,750
in this case it turns out that there<font color="#CCCCCC"> is</font>

364
00:15:00,100 --> 00:15:06,250
an overlap fetch and the region<font color="#E5E5E5"> is</font>

365
00:15:01,750 --> 00:15:08,650
annotated<font color="#E5E5E5"> with</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> 4</font><font color="#CCCCCC"> &</font><font color="#E5E5E5"> 7</font><font color="#CCCCCC"> which means that</font>

366
00:15:06,250 --> 00:15:11,290
it's the<font color="#CCCCCC"> user space</font><font color="#E5E5E5"> function pointing to</font>

367
00:15:08,650 --> 00:15:13,780
you by you attr from byte<font color="#E5E5E5"> for 2 by 7</font>

368
00:15:11,290 --> 00:15:16,180
<font color="#CCCCCC">these are the overlap region</font><font color="#E5E5E5"> and then</font>

369
00:15:13,780 --> 00:15:19,120
the<font color="#E5E5E5"> next thing you're</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to prove is</font>

370
00:15:16,180 --> 00:15:20,949
that or this<font color="#E5E5E5"> probe is</font><font color="#CCCCCC"> that whether these</font>

371
00:15:19,120 --> 00:15:23,200
<font color="#CCCCCC">two fetches from the first one</font><font color="#E5E5E5"> and the</font>

372
00:15:20,950 --> 00:15:25,450
second<font color="#CCCCCC"> one are the same and it turns out</font>

373
00:15:23,200 --> 00:15:28,480
<font color="#CCCCCC">that there's no construction</font><font color="#E5E5E5"> there's no</font>

374
00:15:25,450 --> 00:15:30,220
<font color="#CCCCCC">constraint</font><font color="#E5E5E5"> that in this function to show</font>

375
00:15:28,480 --> 00:15:32,200
<font color="#CCCCCC">that these two</font><font color="#E5E5E5"> factors</font><font color="#CCCCCC"> have to be</font><font color="#E5E5E5"> the</font>

376
00:15:30,220 --> 00:15:34,900
same and therefore we conclude that<font color="#E5E5E5"> this</font>

377
00:15:32,200 --> 00:15:36,610
<font color="#CCCCCC">is a double fetch</font><font color="#E5E5E5"> bug because there's</font><font color="#CCCCCC"> a</font>

378
00:15:34,900 --> 00:15:39,370
<font color="#E5E5E5">data dependency established but we</font>

379
00:15:36,610 --> 00:15:41,200
cannot prove that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> thing fetched</font>

380
00:15:39,370 --> 00:15:45,060
<font color="#E5E5E5">across the two factors are the</font><font color="#CCCCCC"> same</font>

381
00:15:41,200 --> 00:15:48,160
so we actually have a more complicated

382
00:15:45,060 --> 00:15:50,800
example in the paper which shows you<font color="#CCCCCC"> how</font>

383
00:15:48,160 --> 00:15:53,439
we do loop unrolling<font color="#E5E5E5"> and some simple</font>

384
00:15:50,800 --> 00:15:55,870
pointer<font color="#E5E5E5"> resolving so if you're</font>

385
00:15:53,440 --> 00:15:56,950
<font color="#CCCCCC">interested you can feel free to refer</font><font color="#E5E5E5"> to</font>

386
00:15:55,870 --> 00:16:00,490
<font color="#E5E5E5">our paper on this</font>

387
00:15:56,950 --> 00:16:03,490
so findings so we find 24<font color="#CCCCCC"> bugs in the</font>

388
00:16:00,490 --> 00:16:07,089
kernel<font color="#E5E5E5"> in total so 23 is in</font><font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> and</font>

389
00:16:03,490 --> 00:16:09,820
wine FreeBSD so<font color="#E5E5E5"> 9 bugs have fixed</font><font color="#CCCCCC"> which</font>

390
00:16:07,089 --> 00:16:12,190
the patch we provided and<font color="#CCCCCC"> for bugs are</font>

391
00:16:09,820 --> 00:16:13,990
acknowledged but the patch is not very

392
00:16:12,190 --> 00:16:17,079
easy<font color="#CCCCCC"> to</font><font color="#E5E5E5"> provide and we are still working</font>

393
00:16:13,990 --> 00:16:18,699
on<font color="#E5E5E5"> a fix and there are nine bucks</font>

394
00:16:17,079 --> 00:16:22,060
<font color="#E5E5E5">pending for reviews</font><font color="#CCCCCC"> and they're two</font>

395
00:16:18,699 --> 00:16:25,060
<font color="#CCCCCC">bucks marks at won't fix which one of</font>

396
00:16:22,060 --> 00:16:27,160
the bug is<font color="#CCCCCC"> is actually a double</font><font color="#E5E5E5"> fetch</font>

397
00:16:25,060 --> 00:16:30,729
bar<font color="#E5E5E5"> confirmed but the developer thinks</font>

398
00:16:27,160 --> 00:16:33,850
<font color="#E5E5E5">that there is no serious security issues</font>

399
00:16:30,730 --> 00:16:37,120
in<font color="#CCCCCC"> here so they they say that let's just</font>

400
00:16:33,850 --> 00:16:42,699
ignore<font color="#E5E5E5"> it for now</font><font color="#CCCCCC"> and the other part is</font>

401
00:16:37,120 --> 00:16:45,850
is a it's a<font color="#CCCCCC"> miss assumption we made</font>

402
00:16:42,699 --> 00:16:48,579
which is not<font color="#E5E5E5"> why wrong</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> right in the</font>

403
00:16:45,850 --> 00:16:50,230
in<font color="#CCCCCC"> in the process so basically we we</font>

404
00:16:48,579 --> 00:16:53,709
argue<font color="#CCCCCC"> that in the hope in a hole</font>

405
00:16:50,230 --> 00:16:55,420
<font color="#E5E5E5">function there's I</font><font color="#CCCCCC"> mean the two-phase</font>

406
00:16:53,709 --> 00:16:58,060
<font color="#E5E5E5">happens in the same function but it</font>

407
00:16:55,420 --> 00:16:59,860
turns out<font color="#E5E5E5"> that there could be cases that</font>

408
00:16:58,060 --> 00:17:01,390
<font color="#E5E5E5">when you exit</font><font color="#CCCCCC"> the function you still</font>

409
00:16:59,860 --> 00:17:03,279
have the information<font color="#CCCCCC"> or</font><font color="#E5E5E5"> the first patch</font>

410
00:17:01,390 --> 00:17:06,609
and therefore you can still do some

411
00:17:03,279 --> 00:17:08,859
validation<font color="#E5E5E5"> outside this function</font><font color="#CCCCCC"> so to</font>

412
00:17:06,609 --> 00:17:12,309
make<font color="#CCCCCC"> sure that the two</font><font color="#E5E5E5"> factors have the</font>

413
00:17:08,859 --> 00:17:14,020
same value but this this is<font color="#E5E5E5"> not very</font>

414
00:17:12,309 --> 00:17:17,230
<font color="#CCCCCC">common in</font><font color="#E5E5E5"> the kernel space we only have</font>

415
00:17:14,020 --> 00:17:20,799
one such case and and this<font color="#E5E5E5"> is what Mark</font>

416
00:17:17,230 --> 00:17:23,230
<font color="#CCCCCC">has</font><font color="#E5E5E5"> won't</font><font color="#CCCCCC"> bone fix as well so how do</font><font color="#E5E5E5"> we</font>

417
00:17:20,799 --> 00:17:25,510
mitigate this<font color="#E5E5E5"> box</font><font color="#CCCCCC"> so the basic idea is</font>

418
00:17:23,230 --> 00:17:27,819
<font color="#E5E5E5">to reinsure that this control dependence</font>

419
00:17:25,510 --> 00:17:30,760
and determine<font color="#E5E5E5"> is still hold</font><font color="#CCCCCC"> after the</font>

420
00:17:27,819 --> 00:17:33,730
two<font color="#E5E5E5"> factors</font><font color="#CCCCCC"> so which means autumn a city</font>

421
00:17:30,760 --> 00:17:36,340
in the kernel space<font color="#E5E5E5"> memory accesses</font><font color="#CCCCCC"> so</font>

422
00:17:33,730 --> 00:17:38,799
based on our experience we have<font color="#E5E5E5"> four</font>

423
00:17:36,340 --> 00:17:40,559
generic patterns in patching them<font color="#E5E5E5"> so the</font>

424
00:17:38,799 --> 00:17:43,210
<font color="#E5E5E5">first one is you just override the</font>

425
00:17:40,559 --> 00:17:44,830
second<font color="#CCCCCC"> wrench so I</font><font color="#E5E5E5"> don't care</font><font color="#CCCCCC"> what you</font>

426
00:17:43,210 --> 00:17:47,530
<font color="#E5E5E5">fetching in the second search I just</font>

427
00:17:44,830 --> 00:17:49,780
<font color="#E5E5E5">override this value with what I got</font><font color="#CCCCCC"> in</font>

428
00:17:47,530 --> 00:17:52,840
the<font color="#CCCCCC"> first patch and we're going to go so</font>

429
00:17:49,780 --> 00:17:54,730
the second way is I'm going<font color="#E5E5E5"> to check</font>

430
00:17:52,840 --> 00:17:57,428
whether you modify

431
00:17:54,730 --> 00:17:59,379
<font color="#E5E5E5">while after the first fish</font><font color="#CCCCCC"> and if</font><font color="#E5E5E5"> I</font>

432
00:17:57,429 --> 00:18:00,059
detect you modify something<font color="#E5E5E5"> I'm going to</font>

433
00:17:59,379 --> 00:18:04,269
abort

434
00:18:00,059 --> 00:18:06,489
so the third<font color="#CCCCCC"> 13 is like let's just do</font>

435
00:18:04,269 --> 00:18:09,369
incremental fetches instead of overlap

436
00:18:06,489 --> 00:18:12,279
fetches<font color="#E5E5E5"> so a virtual</font><font color="#CCCCCC"> first region and</font>

437
00:18:09,369 --> 00:18:14,168
then<font color="#CCCCCC"> we fetch an offset of that</font><font color="#E5E5E5"> I mean</font>

438
00:18:12,279 --> 00:18:16,480
<font color="#CCCCCC">basically the rest of the message into</font>

439
00:18:14,169 --> 00:18:19,029
<font color="#CCCCCC">the kernel</font><font color="#E5E5E5"> and this requires some</font>

440
00:18:16,480 --> 00:18:21,489
refactoring<font color="#CCCCCC"> of the code</font><font color="#E5E5E5"> obviously and</font>

441
00:18:19,029 --> 00:18:23,169
then the last<font color="#E5E5E5"> part is let's don't do</font>

442
00:18:21,489 --> 00:18:26,320
<font color="#E5E5E5">that without you let's</font><font color="#CCCCCC"> just do a single</font>

443
00:18:23,169 --> 00:18:28,989
large fetch<font color="#E5E5E5"> which we do</font><font color="#CCCCCC"> all this magic</font>

444
00:18:26,320 --> 00:18:31,960
inside<font color="#E5E5E5"> a single fetch and this is a very</font>

445
00:18:28,989 --> 00:18:35,200
complicated<font color="#E5E5E5"> in case-by-case thing so</font>

446
00:18:31,960 --> 00:18:39,730
<font color="#CCCCCC">yeah so this is Roger</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> really requires</font>

447
00:18:35,200 --> 00:18:43,779
a lot<font color="#CCCCCC"> of many code modifications</font><font color="#E5E5E5"> so and</font>

448
00:18:39,730 --> 00:18:45,489
unfortunately<font color="#CCCCCC"> we</font><font color="#E5E5E5"> don't find a generic</font>

449
00:18:43,779 --> 00:18:48,940
way<font color="#CCCCCC"> of patching all this double fetch</font>

450
00:18:45,489 --> 00:18:51,340
bugs<font color="#E5E5E5"> some requires a heavier refactoring</font>

451
00:18:48,940 --> 00:18:53,679
<font color="#E5E5E5">of the code and or even redesigning the</font>

452
00:18:51,340 --> 00:18:57,009
interface and structures so<font color="#CCCCCC"> then</font>

453
00:18:53,679 --> 00:19:00,159
recently<font color="#E5E5E5"> decaf</font><font color="#CCCCCC"> has provided a promising</font>

454
00:18:57,009 --> 00:19:03,129
solution to use<font color="#E5E5E5"> TLS based technique to</font>

455
00:19:00,159 --> 00:19:05,379
ensure<font color="#E5E5E5"> the user space memory</font><font color="#CCCCCC"> I mean the</font>

456
00:19:03,129 --> 00:19:07,570
automated<font color="#E5E5E5"> here</font><font color="#CCCCCC"> amount so if I</font><font color="#E5E5E5"> interested</font>

457
00:19:05,379 --> 00:19:10,350
feel free to check the paper<font color="#E5E5E5"> so some</font>

458
00:19:07,570 --> 00:19:14,549
limitations<font color="#E5E5E5"> we</font><font color="#CCCCCC"> cannot analyze anything</font>

459
00:19:10,350 --> 00:19:17,709
<font color="#E5E5E5">not compatible with</font><font color="#CCCCCC"> lbm</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> there's some</font>

460
00:19:14,549 --> 00:19:20,200
execution<font color="#CCCCCC"> path constructions</font><font color="#E5E5E5"> limitations</font>

461
00:19:17,710 --> 00:19:23,049
for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> we couldn't</font><font color="#E5E5E5"> handle a pass</font>

462
00:19:20,200 --> 00:19:26,139
that test<font color="#CCCCCC"> to too</font><font color="#E5E5E5"> many branches and and</font>

463
00:19:23,049 --> 00:19:28,239
we only do loop unrolling once so and

464
00:19:26,139 --> 00:19:29,979
symbolic checking we ignore those in

465
00:19:28,239 --> 00:19:32,200
line and<font color="#CCCCCC"> someplace fortunately there</font><font color="#E5E5E5"> are</font>

466
00:19:29,980 --> 00:19:34,690
not many in<font color="#CCCCCC"> the double fetch cases</font><font color="#E5E5E5"> and</font>

467
00:19:32,200 --> 00:19:37,450
we may<font color="#CCCCCC"> have</font><font color="#E5E5E5"> some imprecise pointer to</font>

468
00:19:34,690 --> 00:19:41,710
memory object mapping things<font color="#E5E5E5"> so in</font>

469
00:19:37,450 --> 00:19:44,080
conclusion we we do we have precise and

470
00:19:41,710 --> 00:19:46,629
find that if you<font color="#E5E5E5"> have a precise and</font>

471
00:19:44,080 --> 00:19:49,239
formal modeling of this a bug it makes

472
00:19:46,629 --> 00:19:51,639
things very easy to write the tool to<font color="#E5E5E5"> to</font>

473
00:19:49,239 --> 00:19:53,379
detect it and<font color="#E5E5E5"> we find that there are</font>

474
00:19:51,639 --> 00:19:55,269
could be<font color="#E5E5E5"> more applications beyond the</font>

475
00:19:53,379 --> 00:19:56,889
<font color="#E5E5E5">canopic</font><font color="#CCCCCC"> beyond the kernel for example</font>

476
00:19:55,269 --> 00:20:00,100
the hypervisor<font color="#CCCCCC"> or trusted computing</font>

477
00:19:56,889 --> 00:20:02,889
basis as there's a clear<font color="#E5E5E5"> separation of</font>

478
00:20:00,100 --> 00:20:05,918
the privileges and<font color="#E5E5E5"> you can find the</font>

479
00:20:02,889 --> 00:20:06,879
functions of how to access like<font color="#E5E5E5"> upper or</font>

480
00:20:05,919 --> 00:20:10,360
lower<font color="#CCCCCC"> probation</font>

481
00:20:06,880 --> 00:20:12,280
regions and then<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> that logic</font>

482
00:20:10,360 --> 00:20:13,990
<font color="#CCCCCC">parks compare</font><font color="#E5E5E5"> with this memory safety</font>

483
00:20:12,280 --> 00:20:15,730
<font color="#E5E5E5">bugs are on the rise</font><font color="#CCCCCC"> so we hope that</font>

484
00:20:13,990 --> 00:20:18,220
<font color="#CCCCCC">there</font><font color="#E5E5E5"> will be more formal modeling of</font>

485
00:20:15,730 --> 00:20:20,890
the<font color="#CCCCCC"> bug and formal like systematic sure</font>

486
00:20:18,220 --> 00:20:22,810
to find them<font color="#E5E5E5"> so I will open source the</font>

487
00:20:20,890 --> 00:20:25,000
code or in the links of<font color="#CCCCCC"> your fruity</font>

488
00:20:22,810 --> 00:20:34,720
check back and with that I conclude the

489
00:20:25,000 --> 00:20:36,270
<font color="#E5E5E5">transition thank you because</font><font color="#CCCCCC"> we are</font>

490
00:20:34,720 --> 00:20:39,760
already running out<font color="#CCCCCC"> of time</font>

491
00:20:36,270 --> 00:20:41,350
hello<font color="#CCCCCC"> Chan from</font><font color="#E5E5E5"> Temple University</font><font color="#CCCCCC"> am i</font>

492
00:20:39,760 --> 00:20:44,050
interesting you some details about<font color="#E5E5E5"> this</font>

493
00:20:41,350 --> 00:20:46,480
embarrasses cuter<font color="#E5E5E5"> so</font><font color="#CCCCCC"> what's the entry</font>

494
00:20:44,050 --> 00:20:48,730
point for<font color="#E5E5E5"> your</font><font color="#CCCCCC"> Smar escutcheon</font><font color="#E5E5E5"> sir the</font>

495
00:20:46,480 --> 00:20:51,340
containing<font color="#CCCCCC"> cysts in the</font><font color="#E5E5E5"> quarter continue</font>

496
00:20:48,730 --> 00:20:53,350
<font color="#E5E5E5">yeah yeah good</font><font color="#CCCCCC"> question so yeah the</font>

497
00:20:51,340 --> 00:20:55,540
entry point of the single<font color="#CCCCCC"> equation is</font>

498
00:20:53,350 --> 00:20:57,189
<font color="#E5E5E5">the continuing function which way is the</font>

499
00:20:55,540 --> 00:20:59,050
the<font color="#E5E5E5"> neural function that contain both</font>

500
00:20:57,190 --> 00:21:00,730
<font color="#E5E5E5">factors so which means</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you we are</font>

501
00:20:59,050 --> 00:21:04,960
<font color="#E5E5E5">loose and also for</font><font color="#CCCCCC"> construing the</font>

502
00:21:00,730 --> 00:21:10,320
<font color="#E5E5E5">information</font><font color="#CCCCCC"> well technically</font><font color="#E5E5E5"> you could</font>

503
00:21:04,960 --> 00:21:12,550
lose a few the you could lose a few

504
00:21:10,320 --> 00:21:15,610
<font color="#CCCCCC">information but they are actually not</font>

505
00:21:12,550 --> 00:21:18,340
very<font color="#E5E5E5"> relevant because we</font><font color="#CCCCCC"> are also do</font>

506
00:21:15,610 --> 00:21:20,590
some slicing<font color="#E5E5E5"> out of this execution</font><font color="#CCCCCC"> so</font>

507
00:21:18,340 --> 00:21:22,540
<font color="#E5E5E5">we're not directly we're not going to</font>

508
00:21:20,590 --> 00:21:24,040
emulate actual eerie similarity all the

509
00:21:22,540 --> 00:21:26,020
instructions we only going to<font color="#CCCCCC"> exceed the</font>

510
00:21:24,040 --> 00:21:28,270
instructions<font color="#CCCCCC"> that could affect there's</font>

511
00:21:26,020 --> 00:21:30,550
the<font color="#CCCCCC"> stocking address and the size of the</font>

512
00:21:28,270 --> 00:21:32,800
whole fetch and then for<font color="#E5E5E5"> that we think</font>

513
00:21:30,550 --> 00:21:35,530
<font color="#E5E5E5">it's good enough</font><font color="#CCCCCC"> to just</font><font color="#E5E5E5"> start from the</font>

514
00:21:32,800 --> 00:21:38,590
function<font color="#CCCCCC"> that contains it and we assume</font>

515
00:21:35,530 --> 00:21:41,200
that the<font color="#CCCCCC"> function arguments can</font><font color="#E5E5E5"> be can</font>

516
00:21:38,590 --> 00:21:43,570
<font color="#CCCCCC">have point to any user space or memory</font>

517
00:21:41,200 --> 00:21:45,400
<font color="#E5E5E5">and we assume now they are not</font><font color="#CCCCCC"> going to</font>

518
00:21:43,570 --> 00:21:47,669
<font color="#E5E5E5">overlap we have some of the details</font><font color="#CCCCCC"> in</font>

519
00:21:45,400 --> 00:21:51,250
the paper<font color="#E5E5E5"> so feel free to check</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and</font>

520
00:21:47,670 --> 00:21:54,460
yeah so<font color="#E5E5E5"> we and we</font><font color="#CCCCCC"> we feel</font><font color="#E5E5E5"> that this is</font>

521
00:21:51,250 --> 00:21:57,760
<font color="#E5E5E5">this modeling is good enough to to</font>

522
00:21:54,460 --> 00:22:00,060
reconstruct the whole case<font color="#E5E5E5"> okay thank</font>

523
00:21:57,760 --> 00:22:00,060
you<font color="#CCCCCC"> okay</font>

524
00:22:02,200 --> 00:22:06,130
[Applause]

