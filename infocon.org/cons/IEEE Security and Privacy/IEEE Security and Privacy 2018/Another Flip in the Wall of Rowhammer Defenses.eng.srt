1
00:00:07,880 --> 00:00:16,139
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> thanks for attending my talk this</font>

2
00:00:13,380 --> 00:00:18,480
collaboration<font color="#E5E5E5"> started with when I</font>

3
00:00:16,139 --> 00:00:21,750
discussed with CEO<font color="#CCCCCC"> Li and Danny again</font>

4
00:00:18,480 --> 00:00:23,790
keen and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> by how we can mitigate draw</font>

5
00:00:21,750 --> 00:00:26,190
hammer attacks but all in all we<font color="#CCCCCC"> just</font>

6
00:00:23,790 --> 00:00:29,490
found<font color="#E5E5E5"> another flip in the wall of Roja</font>

7
00:00:26,190 --> 00:00:32,460
<font color="#CCCCCC">Mary</font><font color="#E5E5E5"> defenses</font><font color="#CCCCCC"> so what is wrong about we</font>

8
00:00:29,490 --> 00:00:33,570
already heard<font color="#CCCCCC"> that in the in like three</font>

9
00:00:32,460 --> 00:00:36,000
talks ago

10
00:00:33,570 --> 00:00:38,399
it's about DRM<font color="#CCCCCC"> and today if we look at</font>

11
00:00:36,000 --> 00:00:40,800
DRM<font color="#CCCCCC"> it's organized in channels in banks</font>

12
00:00:38,399 --> 00:00:43,199
<font color="#E5E5E5">and ranks and if you look at one of</font>

13
00:00:40,800 --> 00:00:45,858
<font color="#E5E5E5">those banks in detail</font><font color="#CCCCCC"> you'll find that</font>

14
00:00:43,199 --> 00:00:49,440
this<font color="#CCCCCC"> has several rows many rows and</font>

15
00:00:45,859 --> 00:00:52,019
these are the actual capacitors in the

16
00:00:49,440 --> 00:00:54,178
in the rows like<font color="#CCCCCC"> 64,000 capacitors we</font>

17
00:00:52,019 --> 00:00:58,100
store the actual<font color="#E5E5E5"> bits in your memory and</font>

18
00:00:54,179 --> 00:01:02,069
when<font color="#E5E5E5"> you read from</font><font color="#CCCCCC"> memory the marry</font>

19
00:00:58,100 --> 00:01:04,979
controller<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> has to load the load</font>

20
00:01:02,069 --> 00:01:07,320
the actual<font color="#CCCCCC"> bits into</font><font color="#E5E5E5"> the row buffer that</font>

21
00:01:04,979 --> 00:01:09,450
happens in the DRAM and then it's sent

22
00:01:07,320 --> 00:01:12,270
<font color="#E5E5E5">to</font><font color="#CCCCCC"> the memory controller to the</font><font color="#E5E5E5"> CPU</font>

23
00:01:09,450 --> 00:01:14,549
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> an effect</font><font color="#CCCCCC"> that leads to the so</font>

24
00:01:12,270 --> 00:01:16,890
<font color="#CCCCCC">called</font><font color="#E5E5E5"> row hammer effect which is</font><font color="#CCCCCC"> that</font>

25
00:01:14,549 --> 00:01:20,700
cells leak fast upon<font color="#CCCCCC"> proximate excesses</font>

26
00:01:16,890 --> 00:01:22,920
<font color="#E5E5E5">and we're going to exploit that so if</font>

27
00:01:20,700 --> 00:01:25,439
you activate those<font color="#CCCCCC"> rolls</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> a while</font>

28
00:01:22,920 --> 00:01:27,390
you will<font color="#E5E5E5"> see if it flips there are</font>

29
00:01:25,439 --> 00:01:29,369
different directions<font color="#E5E5E5"> that we can now go</font>

30
00:01:27,390 --> 00:01:31,860
the first is how do we do eviction<font color="#CCCCCC"> and</font>

31
00:01:29,369 --> 00:01:33,420
there are a<font color="#E5E5E5"> lot of papers going in</font>

32
00:01:31,860 --> 00:01:35,579
different directions<font color="#E5E5E5"> here we've</font><font color="#CCCCCC"> just</font>

33
00:01:33,420 --> 00:01:38,130
seen one in earlier talk but there's

34
00:01:35,579 --> 00:01:40,649
also another<font color="#E5E5E5"> direction how do we</font>

35
00:01:38,130 --> 00:01:43,140
actually hammer and previously there

36
00:01:40,649 --> 00:01:45,509
have been two techniques known the first

37
00:01:43,140 --> 00:01:49,259
is we have<font color="#CCCCCC"> a one row next to a victim</font>

38
00:01:45,509 --> 00:01:53,070
row and other random rows or we have a

39
00:01:49,259 --> 00:01:55,140
two neighboring rows and it<font color="#CCCCCC"> looks</font><font color="#E5E5E5"> like</font>

40
00:01:53,070 --> 00:01:57,329
<font color="#E5E5E5">this so if we do single sided hammering</font>

41
00:01:55,140 --> 00:02:00,600
we just hammer a bunch of rows<font color="#E5E5E5"> and</font>

42
00:01:57,329 --> 00:02:02,609
expect<font color="#E5E5E5"> bit flips next to one of them in</font>

43
00:02:00,600 --> 00:02:04,619
case of<font color="#E5E5E5"> double sided hammering we are</font>

44
00:02:02,609 --> 00:02:06,689
hammering<font color="#E5E5E5"> two rows and we're expecting</font>

45
00:02:04,619 --> 00:02:10,470
the bit flips<font color="#E5E5E5"> for instance between those</font>

46
00:02:06,689 --> 00:02:12,510
two or directly next to one<font color="#E5E5E5"> of them the</font>

47
00:02:10,470 --> 00:02:14,520
question then is<font color="#CCCCCC"> how to mitigate</font><font color="#E5E5E5"> row</font>

48
00:02:12,510 --> 00:02:16,769
hammer<font color="#E5E5E5"> and there have been</font><font color="#CCCCCC"> a bunch of</font>

49
00:02:14,520 --> 00:02:19,080
<font color="#CCCCCC">proposals how we mitigate roarhammer</font>

50
00:02:16,769 --> 00:02:20,200
attacks for instance<font color="#E5E5E5"> detecting row</font>

51
00:02:19,080 --> 00:02:21,819
hammer attacks by up

52
00:02:20,200 --> 00:02:24,250
<font color="#CCCCCC">Mormons counters because they have way</font>

53
00:02:21,819 --> 00:02:27,970
more cache misses and<font color="#CCCCCC"> cache hits than</font>

54
00:02:24,250 --> 00:02:30,690
other attacks or other<font color="#E5E5E5"> benign workloads</font>

55
00:02:27,970 --> 00:02:34,569
also so we<font color="#E5E5E5"> can probably single them out</font>

56
00:02:30,690 --> 00:02:36,250
the<font color="#E5E5E5"> other idea was another idea was to</font>

57
00:02:34,569 --> 00:02:38,530
<font color="#E5E5E5">detect them before they actually happen</font>

58
00:02:36,250 --> 00:02:41,050
<font color="#CCCCCC">for instance using static analyzers on</font>

59
00:02:38,530 --> 00:02:43,120
the<font color="#E5E5E5"> binary and finding that there is</font>

60
00:02:41,050 --> 00:02:45,400
such<font color="#E5E5E5"> attack codes there is an of course</font>

61
00:02:43,120 --> 00:02:47,110
<font color="#CCCCCC">an open problem</font><font color="#E5E5E5"> the false positives</font><font color="#CCCCCC"> but</font>

62
00:02:45,400 --> 00:02:47,730
we will see<font color="#CCCCCC"> another</font><font color="#E5E5E5"> problem in</font><font color="#CCCCCC"> in a</font>

63
00:02:47,110 --> 00:02:50,319
minute

64
00:02:47,730 --> 00:02:52,298
they have been software based defenses

65
00:02:50,319 --> 00:02:54,429
like<font color="#CCCCCC"> envel</font><font color="#E5E5E5"> I'm just picking a few here</font>

66
00:02:52,299 --> 00:02:57,190
and<font color="#CCCCCC"> there uses performance counters to</font>

67
00:02:54,430 --> 00:03:00,060
detect<font color="#E5E5E5"> to</font><font color="#CCCCCC"> detect which rows are hammered</font>

68
00:02:57,190 --> 00:03:03,549
and then refreshes the<font color="#E5E5E5"> neighboring rows</font>

69
00:03:00,060 --> 00:03:05,200
<font color="#CCCCCC">this also is available in</font><font color="#E5E5E5"> hardware in</font>

70
00:03:03,549 --> 00:03:09,160
assembly a variant<font color="#CCCCCC"> and it's called</font>

71
00:03:05,200 --> 00:03:10,000
target<font color="#CCCCCC"> row refresh</font><font color="#E5E5E5"> there was at using</font>

72
00:03:09,160 --> 00:03:12,160
last year

73
00:03:10,000 --> 00:03:14,590
big head and<font color="#CCCCCC"> jig head and</font><font color="#E5E5E5"> there the idea</font>

74
00:03:12,160 --> 00:03:17,590
<font color="#CCCCCC">is to either disable</font><font color="#E5E5E5"> the vulnerable</font>

75
00:03:14,590 --> 00:03:20,560
physical memory locations or<font color="#E5E5E5"> to isolate</font>

76
00:03:17,590 --> 00:03:22,780
them so to<font color="#E5E5E5"> place some very a physical</font>

77
00:03:20,560 --> 00:03:25,569
barrier<font color="#CCCCCC"> between the different security</font>

78
00:03:22,780 --> 00:03:27,370
<font color="#E5E5E5">domains in that paper it was just kernel</font>

79
00:03:25,569 --> 00:03:29,589
<font color="#E5E5E5">and user space but in</font><font color="#CCCCCC"> general you could</font>

80
00:03:27,370 --> 00:03:33,010
do<font color="#E5E5E5"> that with more security domains of</font>

81
00:03:29,590 --> 00:03:37,900
course so if we put<font color="#E5E5E5"> there all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that</font>

82
00:03:33,010 --> 00:03:40,929
together in a table we<font color="#CCCCCC"> see that we</font><font color="#E5E5E5"> have</font>

83
00:03:37,900 --> 00:03:42,280
a lot of<font color="#CCCCCC"> defenses that use performance</font>

84
00:03:40,930 --> 00:03:44,170
counters we have a lot of<font color="#CCCCCC"> Hardware</font>

85
00:03:42,280 --> 00:03:45,850
modifications I didn't<font color="#CCCCCC"> discussed them</font>

86
00:03:44,170 --> 00:03:47,888
and we will also not focus on them

87
00:03:45,850 --> 00:03:50,530
because most of them are<font color="#E5E5E5"> not applied yet</font>

88
00:03:47,889 --> 00:03:52,359
on current systems and a few other

89
00:03:50,530 --> 00:03:56,170
aesthetic analyzers physical proximity

90
00:03:52,359 --> 00:03:58,959
memory footprint<font color="#E5E5E5"> so also the memory</font>

91
00:03:56,170 --> 00:04:01,630
access pattern plays a role<font color="#CCCCCC"> here and the</font>

92
00:03:58,959 --> 00:04:03,730
question<font color="#CCCCCC"> one of</font><font color="#E5E5E5"> the core questions when</font>

93
00:04:01,630 --> 00:04:06,510
we started was do<font color="#E5E5E5"> you actually have to</font>

94
00:04:03,730 --> 00:04:08,738
<font color="#E5E5E5">hammer multiple memory locations and</font>

95
00:04:06,510 --> 00:04:10,959
that<font color="#E5E5E5"> brought us to one location</font>

96
00:04:08,739 --> 00:04:12,849
hammering actually there are at least

97
00:04:10,959 --> 00:04:14,730
three<font color="#CCCCCC"> different hammering techniques</font>

98
00:04:12,849 --> 00:04:18,370
because we<font color="#E5E5E5"> proposed a third one and</font>

99
00:04:14,730 --> 00:04:20,469
there you only<font color="#E5E5E5"> hammer one row and expect</font>

100
00:04:18,370 --> 00:04:23,110
bit flips<font color="#CCCCCC"> right next to it works like</font>

101
00:04:20,470 --> 00:04:25,090
this<font color="#E5E5E5"> you hammer it</font><font color="#CCCCCC"> you activate it it's</font>

102
00:04:23,110 --> 00:04:27,520
deactivated<font color="#CCCCCC"> you activate it again it's</font>

103
00:04:25,090 --> 00:04:30,190
<font color="#CCCCCC">deactivated you activate it and after a</font>

104
00:04:27,520 --> 00:04:32,950
<font color="#E5E5E5">while you see bit flips next to it why</font>

105
00:04:30,190 --> 00:04:34,599
does this<font color="#E5E5E5"> work</font><font color="#CCCCCC"> because we heard enough</font>

106
00:04:32,950 --> 00:04:36,820
in the previous talk<font color="#E5E5E5"> that there was a</font>

107
00:04:34,599 --> 00:04:39,490
system which used open page policy

108
00:04:36,820 --> 00:04:42,669
<font color="#E5E5E5">probably the idea there is that you keep</font>

109
00:04:39,490 --> 00:04:44,169
<font color="#E5E5E5">the</font><font color="#CCCCCC"> roll open</font><font color="#E5E5E5"> and buffered and then you</font>

110
00:04:42,669 --> 00:04:46,330
have a low<font color="#CCCCCC"> latency</font><font color="#E5E5E5"> for subsequent</font>

111
00:04:44,169 --> 00:04:48,640
<font color="#E5E5E5">accesses to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same row but a high</font>

112
00:04:46,330 --> 00:04:50,289
latency for<font color="#E5E5E5"> excesses to any other row</font>

113
00:04:48,640 --> 00:04:52,630
but there are thousands<font color="#E5E5E5"> of different</font>

114
00:04:50,289 --> 00:04:54,250
rows so this is good if you<font color="#CCCCCC"> are pretty</font>

115
00:04:52,630 --> 00:04:57,580
sure<font color="#E5E5E5"> that you're going</font><font color="#CCCCCC"> to access the</font>

116
00:04:54,250 --> 00:04:59,650
same row again more efficient if you are

117
00:04:57,580 --> 00:05:01,479
expecting<font color="#CCCCCC"> that the next access goes to a</font>

118
00:04:59,650 --> 00:05:03,520
<font color="#E5E5E5">different row is the</font><font color="#CCCCCC"> closed page</font>

119
00:05:01,479 --> 00:05:06,820
<font color="#CCCCCC">policies</font><font color="#E5E5E5"> there you immediately close a</font>

120
00:05:03,520 --> 00:05:09,430
row and are ready<font color="#CCCCCC"> to open a new row so</font>

121
00:05:06,820 --> 00:05:12,250
you have a medium latency for<font color="#E5E5E5"> accesses</font>

122
00:05:09,430 --> 00:05:15,550
to<font color="#E5E5E5"> any row including your the row that</font>

123
00:05:12,250 --> 00:05:19,060
you have just<font color="#E5E5E5"> opened before so it's just</font>

124
00:05:15,550 --> 00:05:20,289
a<font color="#CCCCCC"> trade-off in this case it has been</font>

125
00:05:19,060 --> 00:05:21,909
found<font color="#CCCCCC"> that these perform better on</font>

126
00:05:20,289 --> 00:05:23,680
<font color="#E5E5E5">multi-core systems because there you</font>

127
00:05:21,909 --> 00:05:26,020
have<font color="#CCCCCC"> the</font><font color="#E5E5E5"> memory accesses from different</font>

128
00:05:23,680 --> 00:05:29,229
cores<font color="#E5E5E5"> and usually they are not so much</font>

129
00:05:26,020 --> 00:05:31,719
<font color="#CCCCCC">related</font><font color="#E5E5E5"> to each other if we look at the</font>

130
00:05:29,229 --> 00:05:35,740
bit flip distribution on a<font color="#CCCCCC"> four</font><font color="#E5E5E5"> kilobyte</font>

131
00:05:31,719 --> 00:05:38,080
page you can see<font color="#E5E5E5"> that most of the bit</font>

132
00:05:35,740 --> 00:05:40,479
offsets are covered so<font color="#CCCCCC"> we ran</font><font color="#E5E5E5"> this test</font>

133
00:05:38,080 --> 00:05:43,090
<font color="#E5E5E5">only for eight hours but basically you</font>

134
00:05:40,479 --> 00:05:45,190
<font color="#CCCCCC">can reach</font><font color="#E5E5E5"> any for</font><font color="#CCCCCC"> bit any bit</font><font color="#E5E5E5"> offset on</font>

135
00:05:43,090 --> 00:05:47,169
a 4 kilobyte<font color="#E5E5E5"> page with double sided or</font>

136
00:05:45,190 --> 00:05:49,090
single sided hammering with one location

137
00:05:47,169 --> 00:05:53,049
hammering the number of bit flips is

138
00:05:49,090 --> 00:05:56,859
just lower<font color="#CCCCCC"> that's why we only</font><font color="#E5E5E5"> have 32 6</font>

139
00:05:53,050 --> 00:06:01,000
it's a<font color="#CCCCCC"> 36</font><font color="#E5E5E5"> percent of the bit offset</font>

140
00:05:56,860 --> 00:06:03,580
covered<font color="#E5E5E5"> after 8 hours</font><font color="#CCCCCC"> the distribution</font>

141
00:06:01,000 --> 00:06:06,870
of<font color="#CCCCCC"> 0 to 1 flips and</font><font color="#E5E5E5"> 1 to 0 flips is</font>

142
00:06:03,580 --> 00:06:09,909
approximately the same for all methods

143
00:06:06,870 --> 00:06:11,530
so next<font color="#E5E5E5"> question</font><font color="#CCCCCC"> is how do we exploit</font>

144
00:06:09,909 --> 00:06:13,450
random bit flips and we<font color="#E5E5E5"> already heard</font>

145
00:06:11,530 --> 00:06:15,219
that<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> previous talk they are not</font>

146
00:06:13,450 --> 00:06:17,289
actually random they are<font color="#E5E5E5"> highly</font>

147
00:06:15,219 --> 00:06:20,590
reproducible<font color="#CCCCCC"> once you have a bit flip</font>

148
00:06:17,289 --> 00:06:22,599
from some memory hammering pattern you

149
00:06:20,590 --> 00:06:24,159
can reproduce it<font color="#E5E5E5"> so the strategy</font><font color="#CCCCCC"> is</font>

150
00:06:22,599 --> 00:06:25,750
<font color="#CCCCCC">always the same you choose a data</font>

151
00:06:24,159 --> 00:06:28,180
<font color="#E5E5E5">structure that you</font><font color="#CCCCCC"> can place at an</font>

152
00:06:25,750 --> 00:06:31,060
arbitrary memory location then you<font color="#E5E5E5"> scan</font>

153
00:06:28,180 --> 00:06:33,190
for good bit flips and<font color="#CCCCCC"> then you place</font>

154
00:06:31,060 --> 00:06:35,110
the data structure there<font color="#CCCCCC"> then you</font>

155
00:06:33,190 --> 00:06:37,800
trigger the bit flip again and then you

156
00:06:35,110 --> 00:06:40,149
<font color="#E5E5E5">have your bit flip in the</font><font color="#CCCCCC"> right location</font>

157
00:06:37,800 --> 00:06:42,880
previous defenses suggested that you

158
00:06:40,149 --> 00:06:43,680
could just make the kernel out<font color="#E5E5E5"> of reach</font>

159
00:06:42,880 --> 00:06:46,590
<font color="#E5E5E5">right</font>

160
00:06:43,680 --> 00:06:48,180
like the<font color="#E5E5E5"> G</font><font color="#CCCCCC"> ket confirmation for that we</font>

161
00:06:46,590 --> 00:06:50,880
came<font color="#E5E5E5"> up</font><font color="#CCCCCC"> with some technique called</font>

162
00:06:48,180 --> 00:06:55,770
<font color="#E5E5E5">opcode flipping and with opcode flipping</font>

163
00:06:50,880 --> 00:06:58,440
we found that many<font color="#E5E5E5"> applications on your</font>

164
00:06:55,770 --> 00:07:00,930
<font color="#E5E5E5">system run is route for instance pseudo</font>

165
00:06:58,440 --> 00:07:02,759
runs as route<font color="#E5E5E5"> because they have to do</font>

166
00:07:00,930 --> 00:07:05,190
some operation that<font color="#E5E5E5"> unprivileged users</font>

167
00:07:02,759 --> 00:07:07,800
cannot but unprivileged users can use

168
00:07:05,190 --> 00:07:11,699
those<font color="#E5E5E5"> applications for instance</font><font color="#CCCCCC"> pinging</font>

169
00:07:07,800 --> 00:07:12,960
and mount also we target pseudo because

170
00:07:11,699 --> 00:07:15,090
it's easy to exploit<font color="#E5E5E5"> it's</font>

171
00:07:12,960 --> 00:07:17,250
straightforward<font color="#CCCCCC"> if there's</font><font color="#E5E5E5"> something</font>

172
00:07:15,090 --> 00:07:21,030
wrong in pseudo then we might<font color="#E5E5E5"> be route</font>

173
00:07:17,250 --> 00:07:23,550
and to illustrate<font color="#E5E5E5"> what happened happens</font>

174
00:07:21,030 --> 00:07:25,619
or might happen in the pseudo binary we

175
00:07:23,550 --> 00:07:27,780
will look at a jump<font color="#E5E5E5"> equal instruction</font>

176
00:07:25,620 --> 00:07:30,509
and if we<font color="#E5E5E5"> flip a bit in a jump equal</font>

177
00:07:27,780 --> 00:07:33,448
instruction it will change the semantics

178
00:07:30,509 --> 00:07:37,280
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> program and if the right bit</font>

179
00:07:33,449 --> 00:07:41,099
flips<font color="#E5E5E5"> it changes the semantics in a way</font>

180
00:07:37,280 --> 00:07:43,549
that you can directly bypass the

181
00:07:41,099 --> 00:07:46,169
password check this is quite unfortunate

182
00:07:43,550 --> 00:07:51,110
<font color="#CCCCCC">let's see whether we</font><font color="#E5E5E5"> can actually have a</font>

183
00:07:46,169 --> 00:07:54,270
bit flip in exactly that location first

184
00:07:51,110 --> 00:07:55,740
<font color="#E5E5E5">we don't need to target</font><font color="#CCCCCC"> exactly that</font>

185
00:07:54,270 --> 00:07:58,560
location we<font color="#E5E5E5"> can have a bit flip</font>

186
00:07:55,740 --> 00:08:01,020
somewhere else in a binary as well<font color="#E5E5E5"> for</font>

187
00:07:58,560 --> 00:08:03,240
instance<font color="#CCCCCC"> comparisons</font><font color="#E5E5E5"> addresses of memory</font>

188
00:08:01,020 --> 00:08:04,169
loads and stores<font color="#E5E5E5"> address calculations</font>

189
00:08:03,240 --> 00:08:06,419
<font color="#E5E5E5">there are loads of</font><font color="#CCCCCC"> different</font>

190
00:08:04,169 --> 00:08:09,539
opportunities<font color="#CCCCCC"> what you can flip</font><font color="#E5E5E5"> in a</font>

191
00:08:06,419 --> 00:08:12,389
<font color="#E5E5E5">manual analyzes we found 29 possible bit</font>

192
00:08:09,539 --> 00:08:14,520
flip offsets<font color="#CCCCCC"> but we think that we should</font>

193
00:08:12,389 --> 00:08:16,680
automate this search for possibly<font color="#E5E5E5"> bit</font>

194
00:08:14,520 --> 00:08:21,180
flip offsets but<font color="#E5E5E5"> we haven't done that</font>

195
00:08:16,680 --> 00:08:24,120
<font color="#E5E5E5">yet all of these bit flips somehow skip</font>

196
00:08:21,180 --> 00:08:26,280
the password check so somehow<font color="#CCCCCC"> we can</font>

197
00:08:24,120 --> 00:08:31,860
become route without<font color="#E5E5E5"> knowing the</font>

198
00:08:26,280 --> 00:08:34,140
passport<font color="#E5E5E5"> the question now is pseudo well</font>

199
00:08:31,860 --> 00:08:37,349
it's a binary<font color="#E5E5E5"> right how do we get the</font>

200
00:08:34,140 --> 00:08:39,539
target virtual page from<font color="#E5E5E5"> this binary to</font>

201
00:08:37,349 --> 00:08:42,120
the target physical location where<font color="#E5E5E5"> we</font>

202
00:08:39,539 --> 00:08:44,218
can induce the<font color="#CCCCCC"> right bit flip and for</font>

203
00:08:42,120 --> 00:08:47,160
that we<font color="#E5E5E5"> introduce the technique called</font>

204
00:08:44,219 --> 00:08:49,200
memory waylaying<font color="#CCCCCC"> the idea is quite</font>

205
00:08:47,160 --> 00:08:52,290
straightforward<font color="#E5E5E5"> basically we want to</font>

206
00:08:49,200 --> 00:08:53,380
maneuver a target binary page to a

207
00:08:52,290 --> 00:08:56,740
vulnerable

208
00:08:53,380 --> 00:08:59,590
<font color="#E5E5E5">Paige and it's not as easy</font><font color="#CCCCCC"> as with</font><font color="#E5E5E5"> page</font>

209
00:08:56,740 --> 00:09:01,930
tables or other<font color="#E5E5E5"> pages that we can spray</font>

210
00:08:59,590 --> 00:09:04,330
over<font color="#E5E5E5"> the entire memory because binaries</font>

211
00:09:01,930 --> 00:09:06,310
are only<font color="#E5E5E5"> once in memory they are kept in</font>

212
00:09:04,330 --> 00:09:08,200
the page cache once they<font color="#E5E5E5"> are in the page</font>

213
00:09:06,310 --> 00:09:10,569
cache<font color="#E5E5E5"> they will stay</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> even after</font>

214
00:09:08,200 --> 00:09:13,690
<font color="#CCCCCC">the program</font><font color="#E5E5E5"> terminates the page will</font>

215
00:09:10,570 --> 00:09:16,810
<font color="#CCCCCC">still be there</font><font color="#E5E5E5"> so when is it evicted</font>

216
00:09:13,690 --> 00:09:19,840
only if the page cache is full<font color="#E5E5E5"> only if</font>

217
00:09:16,810 --> 00:09:23,199
the entire memory is full<font color="#E5E5E5"> and the page</font>

218
00:09:19,840 --> 00:09:26,920
cache has<font color="#E5E5E5"> to remove one page to load one</font>

219
00:09:23,200 --> 00:09:29,470
more page into<font color="#E5E5E5"> the memory the page cache</font>

220
00:09:26,920 --> 00:09:32,380
usually occupies<font color="#E5E5E5"> all the unused memory</font>

221
00:09:29,470 --> 00:09:36,220
<font color="#CCCCCC">so we would have to occupied</font><font color="#E5E5E5"> occupy all</font>

222
00:09:32,380 --> 00:09:39,070
memory to throw out<font color="#E5E5E5"> our page however</font>

223
00:09:36,220 --> 00:09:41,560
instead we can also just move the victim

224
00:09:39,070 --> 00:09:45,310
page to<font color="#E5E5E5"> a target page by occupying the</font>

225
00:09:41,560 --> 00:09:47,739
memory with other page cache pages<font color="#E5E5E5"> so we</font>

226
00:09:45,310 --> 00:09:51,040
<font color="#CCCCCC">are evicting the page cache by filling</font>

227
00:09:47,740 --> 00:09:53,260
it with<font color="#E5E5E5"> other page cache pages with that</font>

228
00:09:51,040 --> 00:09:55,209
we<font color="#E5E5E5"> can</font><font color="#CCCCCC"> evict the victim binary and we</font>

229
00:09:53,260 --> 00:09:57,220
can use mink or that's a quite

230
00:09:55,210 --> 00:09:58,900
convenient<font color="#E5E5E5"> system</font><font color="#CCCCCC"> called for that to</font>

231
00:09:57,220 --> 00:10:02,770
check<font color="#CCCCCC"> whether the victim page was</font>

232
00:09:58,900 --> 00:10:06,550
evicted<font color="#CCCCCC"> so we just fit load more</font><font color="#E5E5E5"> binary</font>

233
00:10:02,770 --> 00:10:09,939
pages into the system into<font color="#CCCCCC"> the DM until</font>

234
00:10:06,550 --> 00:10:13,780
our victim page was evicted<font color="#E5E5E5"> and then we</font>

235
00:10:09,940 --> 00:10:18,010
reload the<font color="#E5E5E5"> victim and see that it has a</font>

236
00:10:13,780 --> 00:10:19,930
new physical<font color="#E5E5E5"> page we continue that with</font>

237
00:10:18,010 --> 00:10:22,060
this until it's<font color="#E5E5E5"> on the target page and</font>

238
00:10:19,930 --> 00:10:24,370
then we can induce<font color="#E5E5E5"> our bit flip there so</font>

239
00:10:22,060 --> 00:10:26,530
just<font color="#E5E5E5"> to illustrate this a bit</font><font color="#CCCCCC"> we start</font>

240
00:10:24,370 --> 00:10:28,630
with maybe a memory<font color="#E5E5E5"> layout like this</font><font color="#CCCCCC"> the</font>

241
00:10:26,530 --> 00:10:31,000
blue parts are occupied the white parts

242
00:10:28,630 --> 00:10:33,700
are free and the<font color="#E5E5E5"> gray parts are occupied</font>

243
00:10:31,000 --> 00:10:36,520
<font color="#CCCCCC">by the page cache</font><font color="#E5E5E5"> our binary page is</font>

244
00:10:33,700 --> 00:10:39,730
marked<font color="#CCCCCC"> as green with a B and our</font><font color="#E5E5E5"> target</font>

245
00:10:36,520 --> 00:10:42,100
page is the X and then we evict the page

246
00:10:39,730 --> 00:10:45,340
cache<font color="#E5E5E5"> so our binary page is gone</font><font color="#CCCCCC"> we</font>

247
00:10:42,100 --> 00:10:47,880
reload it<font color="#E5E5E5"> we repeat this again and again</font>

248
00:10:45,340 --> 00:10:50,920
<font color="#E5E5E5">until it's located at the</font><font color="#CCCCCC"> right offset</font>

249
00:10:47,880 --> 00:10:52,689
how well does this<font color="#CCCCCC"> work well it's first</font>

250
00:10:50,920 --> 00:10:55,839
of<font color="#E5E5E5"> all system dependent it depends on</font>

251
00:10:52,690 --> 00:10:57,880
where the operating<font color="#E5E5E5"> system which pages</font>

252
00:10:55,840 --> 00:11:00,190
the operating system assigns to<font color="#CCCCCC"> your new</font>

253
00:10:57,880 --> 00:11:03,070
page<font color="#CCCCCC"> on</font><font color="#E5E5E5"> a default</font><font color="#CCCCCC"> you're going to set up</font>

254
00:11:00,190 --> 00:11:04,590
we got this<font color="#CCCCCC"> so most of the physical</font>

255
00:11:03,070 --> 00:11:06,780
<font color="#CCCCCC">memory</font><font color="#E5E5E5"> was</font>

256
00:11:04,590 --> 00:11:10,800
<font color="#CCCCCC">right with</font><font color="#E5E5E5"> that so we were able</font><font color="#CCCCCC"> to</font>

257
00:11:06,780 --> 00:11:15,510
maneuver<font color="#E5E5E5"> our page to virtually any</font>

258
00:11:10,800 --> 00:11:18,689
physical memory location the great

259
00:11:15,510 --> 00:11:21,840
<font color="#E5E5E5">advantage over just evicting the memory</font>

260
00:11:18,690 --> 00:11:25,110
with<font color="#E5E5E5"> a large array with occupying just</font>

261
00:11:21,840 --> 00:11:28,770
<font color="#CCCCCC">Mary</font><font color="#E5E5E5"> with our own data is that we have a</font>

262
00:11:25,110 --> 00:11:30,690
very negligible<font color="#E5E5E5"> memory footprint as you</font>

263
00:11:28,770 --> 00:11:33,030
can see the<font color="#E5E5E5"> memory footprint stays very</font>

264
00:11:30,690 --> 00:11:34,770
<font color="#CCCCCC">very low because</font><font color="#E5E5E5"> the page cache pages</font>

265
00:11:33,030 --> 00:11:37,680
are not<font color="#E5E5E5"> considered our pages they are</font>

266
00:11:34,770 --> 00:11:40,079
just system pages right and now the

267
00:11:37,680 --> 00:11:42,599
third step<font color="#CCCCCC"> that we introduced is we</font>

268
00:11:40,080 --> 00:11:44,370
<font color="#CCCCCC">combine</font><font color="#E5E5E5"> row hammer with</font><font color="#CCCCCC"> SGX and</font><font color="#E5E5E5"> we get</font>

269
00:11:42,600 --> 00:11:47,580
two things<font color="#E5E5E5"> out</font><font color="#CCCCCC"> of that the first is</font>

270
00:11:44,370 --> 00:11:50,280
cheap<font color="#E5E5E5"> denial of service</font><font color="#CCCCCC"> SGX</font>

271
00:11:47,580 --> 00:11:51,990
is an instruction set in extension and

272
00:11:50,280 --> 00:11:53,880
it provides integrity<font color="#E5E5E5"> and</font>

273
00:11:51,990 --> 00:11:57,390
confidentiality for code and data and

274
00:11:53,880 --> 00:11:59,670
untrusted environments you can<font color="#CCCCCC"> run it</font><font color="#E5E5E5"> as</font>

275
00:11:57,390 --> 00:12:02,130
a<font color="#E5E5E5"> regular user program but you cannot</font>

276
00:11:59,670 --> 00:12:04,530
perform<font color="#E5E5E5"> certain things so that you're</font>

277
00:12:02,130 --> 00:12:08,730
not it not<font color="#E5E5E5"> able to implement malware in</font>

278
00:12:04,530 --> 00:12:12,030
it<font color="#E5E5E5"> right</font><font color="#CCCCCC"> the enclaves use a dedicated</font>

279
00:12:08,730 --> 00:12:14,880
<font color="#CCCCCC">memory</font><font color="#E5E5E5"> area in the physical</font><font color="#CCCCCC"> memory at</font>

280
00:12:12,030 --> 00:12:17,790
the<font color="#E5E5E5"> epc region and this is integrity</font>

281
00:12:14,880 --> 00:12:19,439
checked<font color="#E5E5E5"> and encrypted what so the</font>

282
00:12:17,790 --> 00:12:21,599
question then is<font color="#E5E5E5"> what happens if a bit</font>

283
00:12:19,440 --> 00:12:24,540
flips in this integrity checked region

284
00:12:21,600 --> 00:12:26,700
<font color="#CCCCCC">right and of course the integrity check</font>

285
00:12:24,540 --> 00:12:29,400
will fail<font color="#E5E5E5"> what will happen next</font>

286
00:12:26,700 --> 00:12:31,680
we<font color="#E5E5E5"> lock up</font><font color="#CCCCCC"> the entire memory controller</font>

287
00:12:29,400 --> 00:12:33,750
which<font color="#E5E5E5"> is not a good</font><font color="#CCCCCC"> idea</font><font color="#E5E5E5"> right because</font>

288
00:12:31,680 --> 00:12:37,050
no further memory goes through the

289
00:12:33,750 --> 00:12:39,030
memory controller<font color="#CCCCCC"> the system</font><font color="#E5E5E5"> hearts</font>

290
00:12:37,050 --> 00:12:41,790
<font color="#E5E5E5">immediately I don't</font><font color="#CCCCCC"> know think</font><font color="#E5E5E5"> of</font>

291
00:12:39,030 --> 00:12:45,839
<font color="#E5E5E5">backing up some stuff before halting the</font>

292
00:12:41,790 --> 00:12:48,000
entire system<font color="#E5E5E5"> yes sounds unsafe it is</font>

293
00:12:45,840 --> 00:12:50,220
unsafe you will lose data if that

294
00:12:48,000 --> 00:12:52,350
happens and<font color="#E5E5E5"> we we were</font><font color="#CCCCCC"> able to trigger</font>

295
00:12:50,220 --> 00:12:55,410
<font color="#CCCCCC">that actually the first attacks we</font>

296
00:12:52,350 --> 00:12:57,450
attack implementations we had triggered

297
00:12:55,410 --> 00:12:59,520
that by<font color="#CCCCCC"> accident we were</font><font color="#E5E5E5"> not intending</font>

298
00:12:57,450 --> 00:13:01,370
<font color="#CCCCCC">to trigger this in the beginning</font><font color="#E5E5E5"> quite</font>

299
00:12:59,520 --> 00:13:06,990
annoying if your system has<font color="#E5E5E5"> all the time</font>

300
00:13:01,370 --> 00:13:08,910
<font color="#E5E5E5">so the next thing is what if we have</font>

301
00:13:06,990 --> 00:13:11,790
what if this happens in the<font color="#E5E5E5"> cloud right</font>

302
00:13:08,910 --> 00:13:13,860
<font color="#E5E5E5">if a</font><font color="#CCCCCC"> malicious end</font><font color="#E5E5E5"> clave does that in</font>

303
00:13:11,790 --> 00:13:14,490
<font color="#E5E5E5">the cloud for instance Microsoft</font><font color="#CCCCCC"> now has</font>

304
00:13:13,860 --> 00:13:17,399
an

305
00:13:14,490 --> 00:13:20,070
has an has<font color="#CCCCCC"> a</font><font color="#E5E5E5"> cloud that allows you to</font>

306
00:13:17,399 --> 00:13:22,589
<font color="#CCCCCC">use SGX</font><font color="#E5E5E5"> if we trigger that in the cloud</font>

307
00:13:20,070 --> 00:13:25,560
<font color="#E5E5E5">the entire machine house including the</font>

308
00:13:22,589 --> 00:13:27,420
co-located tenants<font color="#E5E5E5"> so this is cheap</font>

309
00:13:25,560 --> 00:13:29,219
denial of service attacks<font color="#E5E5E5"> in the cloud</font>

310
00:13:27,420 --> 00:13:31,640
and<font color="#E5E5E5"> you can do that again</font><font color="#CCCCCC"> and again</font>

311
00:13:29,220 --> 00:13:34,680
<font color="#CCCCCC">every time the</font><font color="#E5E5E5"> system is booted up again</font>

312
00:13:31,640 --> 00:13:36,779
the other option that we<font color="#CCCCCC"> can do is we</font>

313
00:13:34,680 --> 00:13:38,489
can<font color="#E5E5E5"> combine</font><font color="#CCCCCC"> SGX with</font><font color="#E5E5E5"> mana location</font>

314
00:13:36,779 --> 00:13:40,529
hammering and opcode flipping and build

315
00:13:38,490 --> 00:13:44,220
an undetectable<font color="#CCCCCC"> row hammer exploit</font>

316
00:13:40,529 --> 00:13:46,230
because<font color="#CCCCCC"> STX protects software from</font>

317
00:13:44,220 --> 00:13:49,830
malicious environments it also protects

318
00:13:46,230 --> 00:13:52,230
it<font color="#CCCCCC"> from some attacks like performance</font>

319
00:13:49,830 --> 00:13:54,779
counter based attacks<font color="#E5E5E5"> most performance</font>

320
00:13:52,230 --> 00:13:58,410
counters<font color="#E5E5E5"> do not work on</font><font color="#CCCCCC"> SJ X in case</font>

321
00:13:54,779 --> 00:14:00,720
they<font color="#E5E5E5"> are just not included in in in the</font>

322
00:13:58,410 --> 00:14:03,750
performance counters<font color="#CCCCCC"> and this defeats</font>

323
00:14:00,720 --> 00:14:07,080
quite a lot of<font color="#CCCCCC"> counter</font><font color="#E5E5E5"> measures that</font>

324
00:14:03,750 --> 00:14:09,360
rely on performance counters<font color="#E5E5E5"> putting it</font>

325
00:14:07,080 --> 00:14:12,000
<font color="#E5E5E5">all together we can see that static</font>

326
00:14:09,360 --> 00:14:15,270
analyzes<font color="#E5E5E5"> performance counters are both</font>

327
00:14:12,000 --> 00:14:17,399
<font color="#E5E5E5">defeated by using Intel SGX one location</font>

328
00:14:15,270 --> 00:14:20,220
hammering destroys previous assumptions

329
00:14:17,399 --> 00:14:22,740
<font color="#CCCCCC">about the memory access patterns</font><font color="#E5E5E5"> of code</font>

330
00:14:20,220 --> 00:14:25,910
<font color="#E5E5E5">flippin works</font><font color="#CCCCCC"> around</font><font color="#E5E5E5"> the physical</font>

331
00:14:22,740 --> 00:14:28,440
<font color="#CCCCCC">proximity issue</font><font color="#E5E5E5"> and memory waylaying</font>

332
00:14:25,910 --> 00:14:30,209
solves the problem<font color="#E5E5E5"> that you have to</font>

333
00:14:28,440 --> 00:14:31,829
acquire a lot of memory and<font color="#CCCCCC"> by that</font>

334
00:14:30,209 --> 00:14:34,920
bring your system close to out of memory

335
00:14:31,829 --> 00:14:39,810
<font color="#CCCCCC">situations and by that we have</font><font color="#E5E5E5"> defeated</font>

336
00:14:34,920 --> 00:14:41,640
all<font color="#CCCCCC"> the different defense classes with</font>

337
00:14:39,810 --> 00:14:45,779
that I will<font color="#E5E5E5"> get</font><font color="#CCCCCC"> to the conclusion and</font>

338
00:14:41,640 --> 00:14:49,079
the conclusion is it's easy to break

339
00:14:45,779 --> 00:14:51,329
previous<font color="#E5E5E5"> assumptions and that this is</font>

340
00:14:49,079 --> 00:14:53,339
possible shows that we have an

341
00:14:51,329 --> 00:14:56,040
incomplete<font color="#CCCCCC"> understanding of the attacks</font>

342
00:14:53,339 --> 00:14:57,660
we first need to<font color="#E5E5E5"> get a complete more</font>

343
00:14:56,040 --> 00:15:00,449
complete<font color="#CCCCCC"> understanding of the</font><font color="#E5E5E5"> attack</font>

344
00:14:57,660 --> 00:15:03,360
<font color="#E5E5E5">before we are able to design complete</font>

345
00:15:00,450 --> 00:15:05,100
<font color="#CCCCCC">countermeasures the</font><font color="#E5E5E5"> current</font><font color="#CCCCCC"> counter</font>

346
00:15:03,360 --> 00:15:07,140
<font color="#CCCCCC">measures were only patches against</font>

347
00:15:05,100 --> 00:15:09,890
<font color="#E5E5E5">specific exploit they were not really</font>

348
00:15:07,140 --> 00:15:12,630
solutions to the underlying problems and

349
00:15:09,890 --> 00:15:14,579
as we heard<font color="#E5E5E5"> in the previous talk already</font>

350
00:15:12,630 --> 00:15:15,990
<font color="#E5E5E5">it's quite difficult to solve the</font>

351
00:15:14,579 --> 00:15:18,420
problem<font color="#E5E5E5"> because in the end it's an</font>

352
00:15:15,990 --> 00:15:20,700
optimization problem<font color="#CCCCCC"> on the one side you</font>

353
00:15:18,420 --> 00:15:24,329
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to optimize for performance on the</font>

354
00:15:20,700 --> 00:15:27,170
other side<font color="#E5E5E5"> you want to not have</font><font color="#CCCCCC"> roham a</font>

355
00:15:24,329 --> 00:15:30,680
bit flips the pro

356
00:15:27,170 --> 00:15:34,849
that the attacker<font color="#E5E5E5"> becomes more and more</font>

357
00:15:30,680 --> 00:15:37,550
<font color="#CCCCCC">powerful so attacks that were</font><font color="#E5E5E5"> once not</font>

358
00:15:34,850 --> 00:15:40,700
possible<font color="#E5E5E5"> because the boundary was chosen</font>

359
00:15:37,550 --> 00:15:44,719
<font color="#E5E5E5">wisely might become possible in the near</font>

360
00:15:40,700 --> 00:15:47,120
future<font color="#E5E5E5"> and</font><font color="#CCCCCC"> also new features might</font>

361
00:15:44,720 --> 00:15:49,550
<font color="#E5E5E5">introduce new attack vectors especially</font>

362
00:15:47,120 --> 00:15:53,750
the combination of<font color="#CCCCCC"> SGX and ro</font><font color="#E5E5E5"> hammer</font>

363
00:15:49,550 --> 00:15:56,930
here<font color="#E5E5E5"> allows to change the nature of the</font>

364
00:15:53,750 --> 00:15:58,639
<font color="#E5E5E5">attack quite a bit thanks for your</font>

365
00:15:56,930 --> 00:16:07,609
<font color="#E5E5E5">attention and I'm looking forward</font><font color="#CCCCCC"> to</font>

366
00:15:58,639 --> 00:16:10,459
discussion<font color="#E5E5E5"> all right amazing work</font><font color="#CCCCCC"> Daniel</font>

367
00:16:07,610 --> 00:16:12,560
again questions please approach one of

368
00:16:10,459 --> 00:16:20,630
<font color="#CCCCCC">the mics and state your</font><font color="#E5E5E5"> name and</font>

369
00:16:12,560 --> 00:16:22,930
affiliation don't all run<font color="#E5E5E5"> at once though</font>

370
00:16:20,630 --> 00:16:33,560
because<font color="#E5E5E5"> we don't want to flip any bits</font>

371
00:16:22,930 --> 00:16:35,149
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> and then by design Intel SGX</font>

372
00:16:33,560 --> 00:16:37,219
<font color="#E5E5E5">prohibited like you're reading</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> the</font>

373
00:16:35,149 --> 00:16:39,640
direct value<font color="#CCCCCC"> but there is a side channel</font>

374
00:16:37,220 --> 00:16:42,170
attack on like we can get some<font color="#E5E5E5"> of the</font>

375
00:16:39,640 --> 00:16:44,569
performance counter unit value for from

376
00:16:42,170 --> 00:16:46,610
the uncor performance<font color="#E5E5E5"> monitor and then</font>

377
00:16:44,570 --> 00:16:48,740
by subtracting<font color="#E5E5E5"> some of the values then</font>

378
00:16:46,610 --> 00:16:53,029
we<font color="#CCCCCC"> can indirectly</font><font color="#E5E5E5"> know about that what</font>

379
00:16:48,740 --> 00:16:54,769
<font color="#CCCCCC">SGX has performed and did you cuz did</font>

380
00:16:53,029 --> 00:16:58,269
you have any concern<font color="#CCCCCC"> on</font><font color="#E5E5E5"> there like it</font>

381
00:16:54,769 --> 00:17:01,250
that kind of<font color="#E5E5E5"> the things could rebuild</font>

382
00:16:58,269 --> 00:17:03,680
<font color="#E5E5E5">let the defenders can exploit</font><font color="#CCCCCC"> that</font>

383
00:17:01,250 --> 00:17:06,109
features<font color="#CCCCCC"> mmhmm</font><font color="#E5E5E5"> yeah thanks for the</font>

384
00:17:03,680 --> 00:17:08,418
<font color="#E5E5E5">question I actually we looked at quite a</font>

385
00:17:06,109 --> 00:17:10,490
lot<font color="#E5E5E5"> of performance counters</font><font color="#CCCCCC"> something</font>

386
00:17:08,419 --> 00:17:12,890
like<font color="#E5E5E5"> forty to fifty different</font>

387
00:17:10,490 --> 00:17:16,599
performance counters<font color="#E5E5E5"> and including also</font>

388
00:17:12,890 --> 00:17:20,569
the uncor for instance the CBO<font color="#CCCCCC"> cache</font>

389
00:17:16,599 --> 00:17:22,760
<font color="#E5E5E5">events</font><font color="#CCCCCC"> and I'm sure there are</font>

390
00:17:20,569 --> 00:17:25,490
performance counters which would work

391
00:17:22,760 --> 00:17:28,790
<font color="#E5E5E5">and which could be used to detect this</font>

392
00:17:25,490 --> 00:17:30,919
attack but we<font color="#E5E5E5"> haven't found any but</font>

393
00:17:28,790 --> 00:17:35,928
probably there<font color="#CCCCCC"> are there</font><font color="#E5E5E5"> is an abundance</font>

394
00:17:30,919 --> 00:17:38,630
of performance counters<font color="#CCCCCC"> I'm not sure</font>

395
00:17:35,929 --> 00:17:40,340
whether this is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> right way to solve</font>

396
00:17:38,630 --> 00:17:40,820
<font color="#CCCCCC">this problem because you can induce bit</font>

397
00:17:40,340 --> 00:17:44,029
flips

398
00:17:40,820 --> 00:17:50,779
quite quite quickly<font color="#CCCCCC"> in a small</font><font color="#E5E5E5"> amount of</font>

399
00:17:44,029 --> 00:17:55,309
time and also<font color="#CCCCCC"> our assumptions that ro</font>

400
00:17:50,779 --> 00:17:57,200
hammer<font color="#CCCCCC"> is so the attacks that</font><font color="#E5E5E5"> we've</font><font color="#CCCCCC"> seen</font>

401
00:17:55,309 --> 00:17:58,460
today<font color="#CCCCCC"> are still sort</font><font color="#E5E5E5"> of local attacks</font>

402
00:17:57,200 --> 00:18:01,039
right because they have<font color="#CCCCCC"> local code</font>

403
00:17:58,460 --> 00:18:03,559
execution<font color="#E5E5E5"> but there is an upcoming</font><font color="#CCCCCC"> view</font>

404
00:18:01,039 --> 00:18:10,158
<font color="#CCCCCC">SEC paper that shows that you can do</font><font color="#E5E5E5"> row</font>

405
00:18:03,559 --> 00:18:13,610
<font color="#E5E5E5">inmate</font><font color="#CCCCCC"> X over network thank you yes Matt</font>

406
00:18:10,159 --> 00:18:16,850
Matthew Hicks<font color="#CCCCCC"> Virginia Tech</font><font color="#E5E5E5"> so yeah you</font>

407
00:18:13,610 --> 00:18:19,519
<font color="#E5E5E5">mentioned the upcoming</font><font color="#CCCCCC"> you know packet</font>

408
00:18:16,850 --> 00:18:23,959
<font color="#E5E5E5">based network based</font><font color="#CCCCCC"> row hammer tech we</font>

409
00:18:19,519 --> 00:18:27,470
<font color="#E5E5E5">saw earlier you</font><font color="#CCCCCC"> can have sorry</font><font color="#E5E5E5"> system on</font>

410
00:18:23,960 --> 00:18:29,690
chip<font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> GPU based other you know</font>

411
00:18:27,470 --> 00:18:31,639
<font color="#CCCCCC">row hammer tax</font><font color="#E5E5E5"> you see in this work a</font>

412
00:18:29,690 --> 00:18:34,340
<font color="#E5E5E5">very systematic destruction of existing</font>

413
00:18:31,639 --> 00:18:37,070
defenses<font color="#E5E5E5"> so where are you and you said I</font>

414
00:18:34,340 --> 00:18:38,658
want<font color="#E5E5E5"> to start out doing defenses where</font>

415
00:18:37,070 --> 00:18:40,580
is your current<font color="#E5E5E5"> mindset your groups of</font>

416
00:18:38,659 --> 00:18:42,169
mindset on<font color="#E5E5E5"> defenses now does it have to</font>

417
00:18:40,580 --> 00:18:46,100
<font color="#E5E5E5">be</font><font color="#CCCCCC"> hardware is there any hope for</font>

418
00:18:42,169 --> 00:18:50,809
software where you<font color="#E5E5E5"> add on that it's</font>

419
00:18:46,100 --> 00:18:56,090
quite difficult<font color="#E5E5E5"> because I think we need</font>

420
00:18:50,809 --> 00:18:59,720
a solution<font color="#E5E5E5"> that is also</font><font color="#CCCCCC"> backed by</font>

421
00:18:56,090 --> 00:19:01,549
hardware mechanisms<font color="#E5E5E5"> the pure software</font>

422
00:18:59,720 --> 00:19:05,840
solution<font color="#E5E5E5"> probably would not work against</font>

423
00:19:01,549 --> 00:19:08,210
the<font color="#CCCCCC"> raw hammer problem then</font><font color="#E5E5E5"> this</font>

424
00:19:05,840 --> 00:19:10,158
challenge of deployability<font color="#E5E5E5"> comes into</font>

425
00:19:08,210 --> 00:19:12,710
play what<font color="#E5E5E5"> about all the</font><font color="#CCCCCC"> systems that</font>

426
00:19:10,159 --> 00:19:14,809
<font color="#E5E5E5">exist how can we provide protection do</font>

427
00:19:12,710 --> 00:19:18,799
you<font color="#E5E5E5"> see a way forward and for existing</font>

428
00:19:14,809 --> 00:19:23,059
<font color="#CCCCCC">deployed</font><font color="#E5E5E5"> systems luckily many systems</font>

429
00:19:18,799 --> 00:19:26,240
seem unaffected<font color="#CCCCCC"> where many is something</font>

430
00:19:23,059 --> 00:19:28,940
between<font color="#E5E5E5"> 30 and 70</font><font color="#CCCCCC"> percent</font><font color="#E5E5E5"> because we</font>

431
00:19:26,240 --> 00:19:32,720
don't have<font color="#E5E5E5"> any good prevalence studies</font>

432
00:19:28,940 --> 00:19:34,190
on row hammer<font color="#E5E5E5"> but most</font><font color="#CCCCCC"> systems are</font>

433
00:19:32,720 --> 00:19:36,440
probably unaffected especially by the

434
00:19:34,190 --> 00:19:38,960
more exotic variants<font color="#CCCCCC"> like row hammer</font><font color="#E5E5E5"> and</font>

435
00:19:36,440 --> 00:19:40,580
<font color="#E5E5E5">JavaScript I'm not sure about the the</font>

436
00:19:38,960 --> 00:19:43,009
GPU variant<font color="#E5E5E5"> because I haven't looked at</font>

437
00:19:40,580 --> 00:19:46,100
the<font color="#E5E5E5"> details</font><font color="#CCCCCC"> probably this one is a bit</font>

438
00:19:43,009 --> 00:19:49,070
<font color="#E5E5E5">more realistic but for raw</font><font color="#CCCCCC"> mrj as your</font>

439
00:19:46,100 --> 00:19:51,289
system<font color="#E5E5E5"> has to be really really</font><font color="#CCCCCC"> assisted</font>

440
00:19:49,070 --> 00:19:52,889
susceptible<font color="#E5E5E5"> for row hammer bit flips</font>

441
00:19:51,289 --> 00:19:55,460
from<font color="#CCCCCC"> JavaScript on a</font>

442
00:19:52,890 --> 00:19:57,690
from<font color="#CCCCCC"> using the CPU cache</font><font color="#E5E5E5"> a vacation</font>

443
00:19:55,460 --> 00:20:06,600
probably with the GPU it works a<font color="#CCCCCC"> bit</font>

444
00:19:57,690 --> 00:20:10,770
better<font color="#E5E5E5"> for in</font><font color="#CCCCCC"> general like the the</font><font color="#E5E5E5"> throw</font>

445
00:20:06,600 --> 00:20:13,350
hammer<font color="#CCCCCC"> attack that</font><font color="#E5E5E5"> also requires</font><font color="#CCCCCC"> RDMA</font>

446
00:20:10,770 --> 00:20:16,350
most systems today<font color="#E5E5E5"> don't have our DMA so</font>

447
00:20:13,350 --> 00:20:21,990
I would<font color="#CCCCCC"> expect that</font><font color="#E5E5E5"> most systems today</font>

448
00:20:16,350 --> 00:20:24,449
<font color="#CCCCCC">are not immediate attack targets and not</font>

449
00:20:21,990 --> 00:20:29,030
<font color="#E5E5E5">that much high on a target list of an</font>

450
00:20:24,450 --> 00:20:34,620
attacker<font color="#E5E5E5"> also because we</font><font color="#CCCCCC"> have more easy</font>

451
00:20:29,030 --> 00:20:39,918
<font color="#E5E5E5">vectors to get into a system right okay</font>

452
00:20:34,620 --> 00:20:44,399
<font color="#E5E5E5">we got two final questions</font><font color="#CCCCCC"> are nice work</font>

453
00:20:39,919 --> 00:20:47,370
<font color="#E5E5E5">no</font><font color="#CCCCCC"> sjx didn't have in its threat model</font>

454
00:20:44,400 --> 00:20:50,580
either side channels deny your service

455
00:20:47,370 --> 00:20:54,049
attacks<font color="#E5E5E5"> but of course if the</font><font color="#CCCCCC"> side</font>

456
00:20:50,580 --> 00:20:56,250
<font color="#E5E5E5">channel does threaten loss of</font>

457
00:20:54,049 --> 00:20:59,040
<font color="#E5E5E5">confidentiality or</font><font color="#CCCCCC"> integrity which is</font>

458
00:20:56,250 --> 00:21:02,179
what<font color="#CCCCCC"> SGX is trying to protect</font><font color="#E5E5E5"> the games</font>

459
00:20:59,040 --> 00:21:05,190
<font color="#E5E5E5">then that would be serious but I guess</font>

460
00:21:02,179 --> 00:21:08,880
all<font color="#CCCCCC"> you showed was a denial service</font>

461
00:21:05,190 --> 00:21:11,730
attack<font color="#E5E5E5"> which is interesting but you</font>

462
00:21:08,880 --> 00:21:15,990
didn't get any loss of confidentiality

463
00:21:11,730 --> 00:21:17,549
<font color="#E5E5E5">or integrity right so for the first</font>

464
00:21:15,990 --> 00:21:19,020
attack we had any<font color="#CCCCCC"> niall of service</font>

465
00:21:17,549 --> 00:21:20,730
attack but the second one where we

466
00:21:19,020 --> 00:21:26,480
<font color="#CCCCCC">combine it with opcode flipping and</font>

467
00:21:20,730 --> 00:21:30,679
memory<font color="#CCCCCC"> whaling and for this variant</font><font color="#E5E5E5"> we</font>

468
00:21:26,480 --> 00:21:34,200
we actually<font color="#CCCCCC"> compromised the</font><font color="#E5E5E5"> system the</font>

469
00:21:30,679 --> 00:21:37,530
integrity<font color="#E5E5E5"> the integrity so basically we</font>

470
00:21:34,200 --> 00:21:40,350
we<font color="#CCCCCC"> compromised the system we</font><font color="#E5E5E5"> can take</font>

471
00:21:37,530 --> 00:21:42,389
full control<font color="#CCCCCC"> of the system</font><font color="#E5E5E5"> not over the</font>

472
00:21:40,350 --> 00:21:47,820
<font color="#CCCCCC">SGX part this</font><font color="#E5E5E5"> will still</font><font color="#CCCCCC"> be protected</font>

473
00:21:42,390 --> 00:21:51,270
<font color="#E5E5E5">yeah the key point that we try to make</font>

474
00:21:47,820 --> 00:21:53,700
here<font color="#CCCCCC"> is that if you build SGX in a very</font>

475
00:21:51,270 --> 00:21:55,830
clever<font color="#CCCCCC"> way so that you cannot spy on</font>

476
00:21:53,700 --> 00:21:58,260
benign applications<font color="#E5E5E5"> you also won't be</font>

477
00:21:55,830 --> 00:22:02,800
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to spy on our row hammering clave</font>

478
00:21:58,260 --> 00:22:05,890
so<font color="#CCCCCC"> SGX then</font><font color="#E5E5E5"> also protects our malware</font>

479
00:22:02,800 --> 00:22:07,960
I thought your last comment<font color="#CCCCCC"> that we</font>

480
00:22:05,890 --> 00:22:09,820
really must understand the attacks

481
00:22:07,960 --> 00:22:13,080
better before<font color="#E5E5E5"> we can hit the</font>

482
00:22:09,820 --> 00:22:17,830
countermeasures<font color="#E5E5E5"> I was wondering can</font><font color="#CCCCCC"> you</font>

483
00:22:13,080 --> 00:22:21,520
articulate the fundamental problem in

484
00:22:17,830 --> 00:22:24,220
hardware that causes these<font color="#CCCCCC"> broham and</font>

485
00:22:21,520 --> 00:22:28,120
<font color="#E5E5E5">light attacks</font><font color="#CCCCCC"> I think that the the</font>

486
00:22:24,220 --> 00:22:30,580
<font color="#CCCCCC">problem that exists in hardware is known</font>

487
00:22:28,120 --> 00:22:34,379
to the<font color="#E5E5E5"> DRM vendors for quite a while now</font>

488
00:22:30,580 --> 00:22:38,620
not the rim I mean broader than dieren

489
00:22:34,380 --> 00:22:42,540
what is the fundament<font color="#E5E5E5"> big class of</font>

490
00:22:38,620 --> 00:22:47,199
problems<font color="#E5E5E5"> that</font><font color="#CCCCCC"> causes these Hardware</font>

491
00:22:42,540 --> 00:22:48,720
<font color="#CCCCCC">side-channel</font><font color="#E5E5E5"> it takes</font><font color="#CCCCCC"> yeah in general</font><font color="#E5E5E5"> we</font>

492
00:22:47,200 --> 00:22:51,460
always<font color="#CCCCCC"> have a trade-off between</font>

493
00:22:48,720 --> 00:22:56,830
<font color="#CCCCCC">optimization in</font><font color="#E5E5E5"> optimization between</font>

494
00:22:51,460 --> 00:23:01,630
performance<font color="#E5E5E5"> and security and the problem</font>

495
00:22:56,830 --> 00:23:05,620
in IT<font color="#E5E5E5"> security is that we that</font><font color="#CCCCCC"> we don't</font>

496
00:23:01,630 --> 00:23:07,660
optimize towards a physical boundary to

497
00:23:05,620 --> 00:23:09,429
have towards a physical law<font color="#CCCCCC"> that exists</font>

498
00:23:07,660 --> 00:23:12,310
that prevents us from<font color="#E5E5E5"> optimizing further</font>

499
00:23:09,430 --> 00:23:13,090
<font color="#E5E5E5">but we're optimizing with security</font><font color="#CCCCCC"> I</font>

500
00:23:12,310 --> 00:23:16,480
hope so

501
00:23:13,090 --> 00:23:19,030
with<font color="#E5E5E5"> security in mind and the problem</font>

502
00:23:16,480 --> 00:23:22,810
now<font color="#CCCCCC"> is that the adversary</font><font color="#E5E5E5"> doesn't stick</font>

503
00:23:19,030 --> 00:23:25,810
to its boundary that we intended for to

504
00:23:22,810 --> 00:23:28,540
exist or<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> thought to believe to</font>

505
00:23:25,810 --> 00:23:32,020
<font color="#CCCCCC">exist</font><font color="#E5E5E5"> the adversary pushes the boundary</font>

506
00:23:28,540 --> 00:23:35,560
more towards us and changes what<font color="#CCCCCC"> it what</font>

507
00:23:32,020 --> 00:23:38,050
it<font color="#E5E5E5"> is allowed</font><font color="#CCCCCC"> to do so our</font><font color="#E5E5E5"> previous</font>

508
00:23:35,560 --> 00:23:41,020
assumptions about what<font color="#E5E5E5"> the adversary can</font>

509
00:23:38,050 --> 00:23:43,180
do might<font color="#E5E5E5"> be wrong over time and I think</font>

510
00:23:41,020 --> 00:23:47,050
<font color="#E5E5E5">that's a</font><font color="#CCCCCC"> problem we need</font><font color="#E5E5E5"> security</font>

511
00:23:43,180 --> 00:23:49,690
mechanisms that that we can at a later

512
00:23:47,050 --> 00:23:53,800
point<font color="#E5E5E5"> adapt so that we can cope with a</font>

513
00:23:49,690 --> 00:23:54,910
stronger adversary later on and so as we

514
00:23:53,800 --> 00:23:56,620
go to the<font color="#CCCCCC"> last question I'll</font><font color="#E5E5E5"> just also</font>

515
00:23:54,910 --> 00:23:59,020
answer that there's actually a workshop

516
00:23:56,620 --> 00:24:01,270
<font color="#CCCCCC">that</font><font color="#E5E5E5"> will be happening this summer with</font>

517
00:23:59,020 --> 00:24:02,980
position papers due on June 1 just<font color="#E5E5E5"> one</font>

518
00:24:01,270 --> 00:24:06,400
page position papers if you search for

519
00:24:02,980 --> 00:24:08,560
<font color="#CCCCCC">the CCC embedded security workshop</font><font color="#E5E5E5"> not</font>

520
00:24:06,400 --> 00:24:11,800
<font color="#E5E5E5">the Chaos Computer Club but a different</font>

521
00:24:08,560 --> 00:24:13,210
CCC<font color="#E5E5E5"> the</font><font color="#CCCCCC"> embedded security</font><font color="#E5E5E5"> works up a lot</font>

522
00:24:11,800 --> 00:24:15,530
<font color="#E5E5E5">of these fundamental</font><font color="#CCCCCC"> questions</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> be</font>

523
00:24:13,210 --> 00:24:17,750
discussed our final<font color="#E5E5E5"> question</font>

524
00:24:15,530 --> 00:24:19,280
yes so Alex can't<font color="#E5E5E5"> run from welcome</font><font color="#CCCCCC"> so I</font>

525
00:24:17,750 --> 00:24:22,250
couldn't<font color="#CCCCCC"> resist</font><font color="#E5E5E5"> since you set it up so</font>

526
00:24:19,280 --> 00:24:24,530
well Daniel but your point about<font color="#E5E5E5"> needing</font>

527
00:24:22,250 --> 00:24:25,850
to<font color="#E5E5E5"> you know develop proper</font><font color="#CCCCCC"> long term</font>

528
00:24:24,530 --> 00:24:27,889
<font color="#E5E5E5">mitigations based on real understanding</font>

529
00:24:25,850 --> 00:24:31,209
<font color="#E5E5E5">your attacks so do you feel that</font><font color="#CCCCCC"> the</font>

530
00:24:27,890 --> 00:24:34,070
current<font color="#CCCCCC"> disclosure practices adequately</font>

531
00:24:31,210 --> 00:24:35,870
incentivize proper<font color="#CCCCCC"> development of</font>

532
00:24:34,070 --> 00:24:40,280
<font color="#CCCCCC">countermeasures over immediate</font>

533
00:24:35,870 --> 00:24:41,929
<font color="#E5E5E5">short-term fixes it's difficult to tell</font>

534
00:24:40,280 --> 00:24:46,790
<font color="#E5E5E5">I think currently there's a lot of</font>

535
00:24:41,930 --> 00:24:50,420
things<font color="#E5E5E5"> changing but in</font><font color="#CCCCCC"> general</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> think</font>

536
00:24:46,790 --> 00:24:52,879
in<font color="#CCCCCC"> we we've seen it</font><font color="#E5E5E5"> in other areas</font><font color="#CCCCCC"> bug</font>

537
00:24:50,420 --> 00:24:56,390
bounty programs<font color="#E5E5E5"> solve a lot of problems</font>

538
00:24:52,880 --> 00:24:59,810
but or<font color="#CCCCCC"> solver they reduce</font><font color="#E5E5E5"> the number of</font>

539
00:24:56,390 --> 00:25:03,080
bugs in products but I'm<font color="#E5E5E5"> not sure that</font>

540
00:24:59,810 --> 00:25:06,770
<font color="#E5E5E5">they necessarily improve the software</font>

541
00:25:03,080 --> 00:25:08,090
<font color="#E5E5E5">quality on a long run so the question is</font>

542
00:25:06,770 --> 00:25:12,889
whether we are<font color="#CCCCCC"> going the right direction</font>

543
00:25:08,090 --> 00:25:16,669
here in<font color="#E5E5E5"> hardware security it's difficult</font>

544
00:25:12,890 --> 00:25:19,040
to predict the<font color="#E5E5E5"> future right all right</font>

545
00:25:16,670 --> 00:25:20,300
<font color="#E5E5E5">thank you now we have one oh thanks</font>

546
00:25:19,040 --> 00:25:24,170
first

547
00:25:20,300 --> 00:25:24,169
[Applause]

