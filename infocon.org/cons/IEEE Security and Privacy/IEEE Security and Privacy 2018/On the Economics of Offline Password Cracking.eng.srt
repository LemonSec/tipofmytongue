1
00:00:07,680 --> 00:00:11,519
<font color="#CCCCCC">Thanks I'm excited to talk to you</font><font color="#E5E5E5"> today</font>

2
00:00:09,900 --> 00:00:14,459
<font color="#E5E5E5">about</font>

3
00:00:11,519 --> 00:00:16,859
of offline<font color="#E5E5E5"> password cracking attacks</font><font color="#CCCCCC"> so</font>

4
00:00:14,459 --> 00:00:22,169
this is joint work<font color="#CCCCCC"> with</font><font color="#E5E5E5"> Ben Harsha and</font>

5
00:00:16,859 --> 00:00:24,689
<font color="#E5E5E5">Samson Joe</font><font color="#CCCCCC"> also at Purdue University so</font>

6
00:00:22,169 --> 00:00:28,500
this may be review for<font color="#E5E5E5"> many of you but</font>

7
00:00:24,689 --> 00:00:31,200
let's first just define what<font color="#CCCCCC"> an offline</font>

8
00:00:28,500 --> 00:00:33,480
attack<font color="#E5E5E5"> is so here I am registering for</font>

9
00:00:31,200 --> 00:00:36,320
an account<font color="#E5E5E5"> at PlayStation com</font>

10
00:00:33,480 --> 00:00:40,890
that's not my<font color="#CCCCCC"> actual password</font><font color="#E5E5E5"> by the way</font>

11
00:00:36,320 --> 00:00:42,809
<font color="#CCCCCC">so what's typically done is that the</font>

12
00:00:40,890 --> 00:00:44,370
authentication server<font color="#E5E5E5"> will pick a random</font>

13
00:00:42,809 --> 00:00:46,440
<font color="#E5E5E5">value called</font><font color="#CCCCCC"> assault</font>

14
00:00:44,370 --> 00:00:49,169
they'll append this random value to the

15
00:00:46,440 --> 00:00:51,269
<font color="#E5E5E5">password</font><font color="#CCCCCC"> and they'll apply some</font><font color="#E5E5E5"> sort of</font>

16
00:00:49,170 --> 00:00:54,000
cryptographic hash function to it and

17
00:00:51,270 --> 00:00:58,620
they'll store the hash value on on their

18
00:00:54,000 --> 00:01:00,809
server now<font color="#CCCCCC"> oftentimes due to you know</font>

19
00:00:58,620 --> 00:01:02,370
<font color="#E5E5E5">security vulnerabilities attackers are</font>

20
00:01:00,809 --> 00:01:05,399
able to<font color="#E5E5E5"> break</font><font color="#CCCCCC"> into this authentication</font>

21
00:01:02,370 --> 00:01:09,360
<font color="#E5E5E5">server and steal all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these password</font>

22
00:01:05,399 --> 00:01:11,549
hash files<font color="#E5E5E5"> so at this point</font><font color="#CCCCCC"> the attacker</font>

23
00:01:09,360 --> 00:01:13,320
is only<font color="#E5E5E5"> limited by the amount of</font>

24
00:01:11,549 --> 00:01:15,420
<font color="#E5E5E5">resources</font><font color="#CCCCCC"> that he's</font><font color="#E5E5E5"> willing</font><font color="#CCCCCC"> to invest</font>

25
00:01:13,320 --> 00:01:17,398
<font color="#E5E5E5">trying to crack the</font><font color="#CCCCCC"> password</font><font color="#E5E5E5"> right</font>

26
00:01:15,420 --> 00:01:19,619
there's no way to lock the attacker out

27
00:01:17,399 --> 00:01:21,270
after a<font color="#E5E5E5"> couple incorrect guesses the</font>

28
00:01:19,619 --> 00:01:23,609
attacker can try as many guesses<font color="#E5E5E5"> as he</font>

29
00:01:21,270 --> 00:01:25,408
wants<font color="#E5E5E5"> the only constraint is</font><font color="#CCCCCC"> the</font>

30
00:01:23,609 --> 00:01:28,818
resources that<font color="#E5E5E5"> he's willing to invest</font>

31
00:01:25,409 --> 00:01:32,729
trying to crack each password

32
00:01:28,819 --> 00:01:35,490
so unfortunately offline<font color="#CCCCCC"> texts are an</font>

33
00:01:32,729 --> 00:01:38,459
increasingly common problem<font color="#E5E5E5"> password</font>

34
00:01:35,490 --> 00:01:40,560
breaches at major organizations have

35
00:01:38,459 --> 00:01:44,810
affected at this point billions<font color="#E5E5E5"> of user</font>

36
00:01:40,560 --> 00:01:48,630
accounts<font color="#CCCCCC"> so shown here</font><font color="#E5E5E5"> is an incomplete</font>

37
00:01:44,810 --> 00:01:51,299
<font color="#E5E5E5">list of organizations that have seen</font>

38
00:01:48,630 --> 00:01:54,479
major password breaches and I apologize

39
00:01:51,299 --> 00:02:00,179
to<font color="#CCCCCC"> you if I left out</font><font color="#E5E5E5"> your competitors</font>

40
00:01:54,479 --> 00:02:03,408
<font color="#E5E5E5">breach off of this list so how do we</font>

41
00:02:00,179 --> 00:02:06,689
<font color="#E5E5E5">mitigate the damages</font><font color="#CCCCCC"> of such breaches</font>

42
00:02:03,409 --> 00:02:09,119
<font color="#CCCCCC">well one</font><font color="#E5E5E5"> of the common tools that's used</font>

43
00:02:06,689 --> 00:02:11,008
is called key<font color="#E5E5E5"> stretching and the basic</font>

44
00:02:09,119 --> 00:02:13,890
idea<font color="#CCCCCC"> is to</font><font color="#E5E5E5"> make this underlying hash</font>

45
00:02:11,008 --> 00:02:15,540
function a bit more expensive<font color="#E5E5E5"> to compute</font>

46
00:02:13,890 --> 00:02:17,760
<font color="#E5E5E5">so that a</font><font color="#CCCCCC"> brute-force attack becomes</font>

47
00:02:15,540 --> 00:02:21,269
more<font color="#E5E5E5"> expensive</font><font color="#CCCCCC"> there's a couple ways to</font>

48
00:02:17,760 --> 00:02:23,920
do this<font color="#E5E5E5"> so hash algorithms like</font><font color="#CCCCCC"> decrypt</font>

49
00:02:21,270 --> 00:02:26,860
or pbkdf2

50
00:02:23,920 --> 00:02:28,329
<font color="#E5E5E5">they work by hash</font><font color="#CCCCCC"> iteration</font><font color="#E5E5E5"> so instead</font>

51
00:02:26,860 --> 00:02:30,459
of<font color="#E5E5E5"> computing the hash of the password</font>

52
00:02:28,330 --> 00:02:33,400
<font color="#CCCCCC">you compute the hash of</font><font color="#E5E5E5"> the hash of the</font>

53
00:02:30,459 --> 00:02:36,880
hash of<font color="#E5E5E5"> the password</font><font color="#CCCCCC"> and this increases</font>

54
00:02:33,400 --> 00:02:40,300
<font color="#E5E5E5">the cost of computing this this function</font>

55
00:02:36,880 --> 00:02:41,890
<font color="#CCCCCC">now there's a more modern way to do key</font>

56
00:02:40,300 --> 00:02:43,870
stretching which<font color="#E5E5E5"> we'll come back to at</font>

57
00:02:41,890 --> 00:02:47,619
the end<font color="#E5E5E5"> of the talk called memory hard</font>

58
00:02:43,870 --> 00:02:52,050
functions and s<font color="#E5E5E5"> crypt are gone to</font><font color="#CCCCCC"> ID</font><font color="#E5E5E5"> are</font>

59
00:02:47,620 --> 00:02:57,550
<font color="#E5E5E5">both examples of memory hard functions</font>

60
00:02:52,050 --> 00:03:00,400
all right<font color="#E5E5E5"> so let's look back</font><font color="#CCCCCC"> at our</font><font color="#E5E5E5"> list</font>

61
00:02:57,550 --> 00:03:03,060
of<font color="#E5E5E5"> breaches and in this talk we're</font><font color="#CCCCCC"> gonna</font>

62
00:03:00,400 --> 00:03:05,860
<font color="#E5E5E5">focus in on four of these breaches</font>

63
00:03:03,060 --> 00:03:08,350
<font color="#CCCCCC">Dropbox</font><font color="#E5E5E5"> Ashley Madison in Yahoo and</font>

64
00:03:05,860 --> 00:03:10,239
LastPass<font color="#CCCCCC"> one of the things that's</font>

65
00:03:08,350 --> 00:03:14,500
notable about these breaches is that

66
00:03:10,239 --> 00:03:16,720
each in<font color="#E5E5E5"> each case</font><font color="#CCCCCC"> after the breach we</font>

67
00:03:14,500 --> 00:03:19,390
learned that each company<font color="#E5E5E5"> was deploying</font>

68
00:03:16,720 --> 00:03:25,500
some form of key stretching<font color="#CCCCCC"> so for</font>

69
00:03:19,390 --> 00:03:31,809
<font color="#E5E5E5">example LastPass was using pbkdf2</font><font color="#CCCCCC"> with</font>

70
00:03:25,500 --> 00:03:35,500
<font color="#E5E5E5">sha-256</font><font color="#CCCCCC"> and tau equals 100,000 hash</font>

71
00:03:31,810 --> 00:03:36,180
iterations<font color="#CCCCCC"> so this actually exceeded</font>

72
00:03:35,500 --> 00:03:41,350
NIST

73
00:03:36,180 --> 00:03:44,859
minimal acceptable standard as defined

74
00:03:41,350 --> 00:03:47,680
in their<font color="#E5E5E5"> 2017 guidelines which basically</font>

75
00:03:44,859 --> 00:03:49,959
<font color="#CCCCCC">set</font><font color="#E5E5E5"> 10,000 hash iterations as the</font>

76
00:03:47,680 --> 00:03:54,760
minimal acceptable<font color="#E5E5E5"> level of key</font>

77
00:03:49,959 --> 00:03:56,530
stretching<font color="#E5E5E5"> so after these breaches</font>

78
00:03:54,760 --> 00:03:58,750
occurred there were a lot of<font color="#E5E5E5"> strong</font>

79
00:03:56,530 --> 00:04:00,489
claims that were were made<font color="#E5E5E5"> so for</font>

80
00:03:58,750 --> 00:04:04,150
<font color="#E5E5E5">example in the last class</font><font color="#CCCCCC"> on the</font>

81
00:04:00,489 --> 00:04:06,310
LastPass blog<font color="#CCCCCC"> they claimed that</font><font color="#E5E5E5"> cracking</font>

82
00:04:04,150 --> 00:04:10,120
our algorithms<font color="#E5E5E5"> is extremely difficult</font>

83
00:04:06,310 --> 00:04:12,579
even<font color="#E5E5E5"> for the strongest of computers and</font>

84
00:04:10,120 --> 00:04:15,370
after the Dropbox<font color="#E5E5E5"> breach</font><font color="#CCCCCC"> it was claimed</font>

85
00:04:12,579 --> 00:04:18,190
<font color="#E5E5E5">that the bcrypt hashing algorithm is</font>

86
00:04:15,370 --> 00:04:20,260
<font color="#E5E5E5">very resilient to cracking and frankly</font>

87
00:04:18,190 --> 00:04:21,850
you know all but<font color="#E5E5E5"> the worst possible</font>

88
00:04:20,260 --> 00:04:26,680
password choices are going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> remain</font>

89
00:04:21,850 --> 00:04:29,080
secure so the key research question

90
00:04:26,680 --> 00:04:31,510
which we explore in this<font color="#E5E5E5"> paper is can we</font>

91
00:04:29,080 --> 00:04:35,020
actually predict how many user passwords

92
00:04:31,510 --> 00:04:37,510
a rational<font color="#E5E5E5"> attacker might crack after a</font>

93
00:04:35,020 --> 00:04:40,599
breach occurs

94
00:04:37,510 --> 00:04:43,990
so to do this<font color="#CCCCCC"> we extend a decision</font>

95
00:04:40,600 --> 00:04:48,850
theoretic model which was introduced at

96
00:04:43,990 --> 00:04:52,810
CSF in 2016<font color="#CCCCCC"> and we</font><font color="#E5E5E5"> consider an</font>

97
00:04:48,850 --> 00:04:55,240
untargeted<font color="#E5E5E5"> rational password attacker</font>

98
00:04:52,810 --> 00:04:57,370
so by untargeted<font color="#E5E5E5"> I mean the attacker</font>

99
00:04:55,240 --> 00:04:59,830
knows<font color="#CCCCCC"> the password distribution</font><font color="#E5E5E5"> so he</font>

100
00:04:57,370 --> 00:05:01,810
knows<font color="#CCCCCC"> the</font><font color="#E5E5E5"> distribution from which</font><font color="#CCCCCC"> user</font>

101
00:04:59,830 --> 00:05:04,150
<font color="#E5E5E5">select their passwords but he doesn't</font>

102
00:05:01,810 --> 00:05:05,560
have background information<font color="#E5E5E5"> about the</font>

103
00:05:04,150 --> 00:05:07,419
<font color="#CCCCCC">particular user so he doesn't</font>

104
00:05:05,560 --> 00:05:09,390
<font color="#CCCCCC">necessarily know your birthdate or your</font>

105
00:05:07,420 --> 00:05:11,110
you know home address or<font color="#CCCCCC"> other</font>

106
00:05:09,390 --> 00:05:13,860
<font color="#E5E5E5">information that</font><font color="#CCCCCC"> might help them to</font>

107
00:05:11,110 --> 00:05:17,170
<font color="#E5E5E5">specifically target an individual user</font>

108
00:05:13,860 --> 00:05:20,620
<font color="#CCCCCC">we also assume that</font><font color="#E5E5E5"> the attacker is</font>

109
00:05:17,170 --> 00:05:22,690
rational<font color="#CCCCCC"> which means that the attacker</font>

110
00:05:20,620 --> 00:05:25,510
<font color="#E5E5E5">is going to quit guessing as soon as</font>

111
00:05:22,690 --> 00:05:30,370
marginal guessing costs exceed marginal

112
00:05:25,510 --> 00:05:32,740
rewards so let's look first at marginal

113
00:05:30,370 --> 00:05:35,500
guessing costs<font color="#E5E5E5"> marginal guessing</font>

114
00:05:32,740 --> 00:05:37,420
guessing costs are highly dependent<font color="#CCCCCC"> on</font>

115
00:05:35,500 --> 00:05:39,850
<font color="#CCCCCC">the particular key stretching algorithm</font>

116
00:05:37,420 --> 00:05:43,840
that was<font color="#E5E5E5"> deployed</font><font color="#CCCCCC"> so for example with</font>

117
00:05:39,850 --> 00:05:46,450
pbkdf2<font color="#CCCCCC"> we might ask how many hash</font>

118
00:05:43,840 --> 00:05:52,229
iterations<font color="#E5E5E5"> were used and what is the</font>

119
00:05:46,450 --> 00:05:55,840
cost<font color="#E5E5E5"> of the underlying hash function so</font>

120
00:05:52,230 --> 00:06:00,340
unfortunately the cost<font color="#E5E5E5"> of the underlying</font>

121
00:05:55,840 --> 00:06:02,919
hash function in this case<font color="#E5E5E5"> sha-256 has</font>

122
00:06:00,340 --> 00:06:07,299
become pretty small and in particular to

123
00:06:02,920 --> 00:06:10,690
<font color="#CCCCCC">see why</font><font color="#E5E5E5"> we can look to the Bitcoin</font>

124
00:06:07,300 --> 00:06:12,250
mining ecosystem there have been a lot

125
00:06:10,690 --> 00:06:16,780
of<font color="#CCCCCC"> application specific integrated</font>

126
00:06:12,250 --> 00:06:19,600
circuits that<font color="#E5E5E5"> are tuned to just compute</font>

127
00:06:16,780 --> 00:06:21,700
<font color="#E5E5E5">the sha-256 hash function over and over</font>

128
00:06:19,600 --> 00:06:24,910
and<font color="#CCCCCC"> over again in particular this</font>

129
00:06:21,700 --> 00:06:28,270
machine the<font color="#CCCCCC"> amp minor s9 computes this</font>

130
00:06:24,910 --> 00:06:30,550
function<font color="#E5E5E5"> 14 trillion times per second</font>

131
00:06:28,270 --> 00:06:33,340
<font color="#E5E5E5">that's what this 14</font><font color="#CCCCCC"> Tara hashes per</font>

132
00:06:30,550 --> 00:06:34,960
second<font color="#E5E5E5"> figure here means</font><font color="#CCCCCC"> and this</font>

133
00:06:33,340 --> 00:06:37,530
machine<font color="#CCCCCC"> is actually</font><font color="#E5E5E5"> not prohibitively</font>

134
00:06:34,960 --> 00:06:39,580
expensive<font color="#CCCCCC"> I just checked online</font>

135
00:06:37,530 --> 00:06:42,070
<font color="#E5E5E5">yesterday in the lowest price I</font><font color="#CCCCCC"> could</font>

136
00:06:39,580 --> 00:06:43,510
find was a thousand<font color="#E5E5E5"> two</font><font color="#CCCCCC"> hundred</font><font color="#E5E5E5"> you know</font>

137
00:06:42,070 --> 00:06:43,960
<font color="#E5E5E5">most stores sell for a bit more</font><font color="#CCCCCC"> than</font>

138
00:06:43,510 --> 00:06:48,539
<font color="#CCCCCC">that</font>

139
00:06:43,960 --> 00:06:51,400
but it's it's<font color="#E5E5E5"> relatively affordable so</font>

140
00:06:48,540 --> 00:06:54,910
now the<font color="#CCCCCC"> question is</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> we actually</font><font color="#E5E5E5"> ask</font>

141
00:06:51,400 --> 00:06:58,810
<font color="#CCCCCC">mate the cost of computing</font><font color="#E5E5E5"> the sha-256</font>

142
00:06:54,910 --> 00:07:02,680
function once<font color="#E5E5E5"> and we take an estimate</font>

143
00:06:58,810 --> 00:07:07,470
<font color="#E5E5E5">from</font><font color="#CCCCCC"> buna and Schechter</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> snicks</font>

144
00:07:02,680 --> 00:07:10,660
2014 which<font color="#CCCCCC"> is based on the Bitcoin</font>

145
00:07:07,470 --> 00:07:12,610
<font color="#CCCCCC">Bitcoin</font><font color="#E5E5E5"> mining statistics</font><font color="#CCCCCC"> and they came</font>

146
00:07:10,660 --> 00:07:16,780
up<font color="#CCCCCC"> with an estimate that</font><font color="#E5E5E5"> the cost to</font>

147
00:07:12,610 --> 00:07:20,770
compute this function once is<font color="#CCCCCC"> $7</font><font color="#E5E5E5"> times</font>

148
00:07:16,780 --> 00:07:24,489
10 to<font color="#E5E5E5"> the minus 15 which means that the</font>

149
00:07:20,770 --> 00:07:27,070
cost of computing pbkdf2<font color="#CCCCCC"> with a</font><font color="#E5E5E5"> hundred</font>

150
00:07:24,490 --> 00:07:30,760
thousand hash iterations is about<font color="#E5E5E5"> seven</font>

151
00:07:27,070 --> 00:07:33,340
times<font color="#CCCCCC"> ten to the</font><font color="#E5E5E5"> minus</font><font color="#CCCCCC"> ten or if you</font>

152
00:07:30,760 --> 00:07:38,469
prefer<font color="#CCCCCC"> seventy cents per billion</font>

153
00:07:33,340 --> 00:07:42,960
password<font color="#E5E5E5"> guesses</font><font color="#CCCCCC"> so that that figure</font><font color="#E5E5E5"> is</font>

154
00:07:38,470 --> 00:07:48,310
fairly fairly low and is one of<font color="#CCCCCC"> the</font>

155
00:07:42,960 --> 00:07:50,948
<font color="#E5E5E5">significant pieces of our analysis</font><font color="#CCCCCC"> so</font>

156
00:07:48,310 --> 00:07:54,400
the second piece<font color="#CCCCCC"> of our analysis is</font><font color="#E5E5E5"> to</font>

157
00:07:50,949 --> 00:07:57,400
look at marginal rewards<font color="#E5E5E5"> so marginal</font>

158
00:07:54,400 --> 00:07:59,460
rewards depend on<font color="#E5E5E5"> well a couple</font><font color="#CCCCCC"> things</font>

159
00:07:57,400 --> 00:08:01,750
<font color="#CCCCCC">first</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> value</font><font color="#E5E5E5"> of a cracked password</font>

160
00:07:59,460 --> 00:08:04,780
<font color="#CCCCCC">and to look for the value</font><font color="#E5E5E5"> of the</font>

161
00:08:01,750 --> 00:08:10,030
password we could look<font color="#CCCCCC"> for example</font><font color="#E5E5E5"> to</font>

162
00:08:04,780 --> 00:08:12,099
black Mike<font color="#CCCCCC"> black-market sale</font><font color="#E5E5E5"> prices the</font>

163
00:08:10,030 --> 00:08:15,520
marginal reward also depends on<font color="#E5E5E5"> the</font>

164
00:08:12,099 --> 00:08:17,500
<font color="#CCCCCC">distribution of user passwords so in</font>

165
00:08:15,520 --> 00:08:19,690
particular<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> interested</font><font color="#CCCCCC"> in the</font>

166
00:08:17,500 --> 00:08:22,389
<font color="#E5E5E5">probability that the next password</font><font color="#CCCCCC"> guess</font>

167
00:08:19,690 --> 00:08:25,479
<font color="#E5E5E5">that the attacker tries is actually</font>

168
00:08:22,389 --> 00:08:27,849
correct<font color="#CCCCCC"> so here we assume that</font><font color="#E5E5E5"> the</font>

169
00:08:25,479 --> 00:08:30,760
password distribution is is known and<font color="#E5E5E5"> P</font>

170
00:08:27,849 --> 00:08:36,490
I denotes the probability<font color="#CCCCCC"> of the I pass</font>

171
00:08:30,760 --> 00:08:39,059
word<font color="#CCCCCC"> and finally the third factor that</font>

172
00:08:36,490 --> 00:08:43,049
can<font color="#E5E5E5"> influence marginal rewards is</font>

173
00:08:39,059 --> 00:08:46,410
diminishing marginal returns so

174
00:08:43,049 --> 00:08:49,150
economics 101<font color="#CCCCCC"> if you increase</font><font color="#E5E5E5"> supply</font>

175
00:08:46,410 --> 00:08:51,969
<font color="#E5E5E5">right you decrease the price of a good</font>

176
00:08:49,150 --> 00:08:54,130
<font color="#E5E5E5">so in this case if the supply is cracked</font>

177
00:08:51,970 --> 00:08:56,680
passwords<font color="#E5E5E5"> as you crack more and more</font>

178
00:08:54,130 --> 00:08:58,570
passwords<font color="#CCCCCC"> you know the value or price</font>

179
00:08:56,680 --> 00:08:59,890
that you might receive<font color="#CCCCCC"> from those crack</font>

180
00:08:58,570 --> 00:09:03,120
passwords on the black market<font color="#CCCCCC"> stuff</font>

181
00:08:59,890 --> 00:09:03,120
<font color="#E5E5E5">starts to drop a bit</font>

182
00:09:03,820 --> 00:09:10,810
so let's take a quick look at the user

183
00:09:07,440 --> 00:09:12,790
<font color="#E5E5E5">password distribution so to</font><font color="#CCCCCC"> estimate the</font>

184
00:09:10,810 --> 00:09:15,959
user<font color="#E5E5E5"> password distribution we use</font>

185
00:09:12,790 --> 00:09:19,120
<font color="#E5E5E5">empirical data from Yahoo in particular</font>

186
00:09:15,960 --> 00:09:21,790
<font color="#CCCCCC">we base our analysis largely on a data</font>

187
00:09:19,120 --> 00:09:23,980
set of 70 million<font color="#E5E5E5"> Yahoo passwords and I</font>

188
00:09:21,790 --> 00:09:26,140
want to stress that these 70 million

189
00:09:23,980 --> 00:09:29,590
<font color="#CCCCCC">passwords actually don't come</font><font color="#E5E5E5"> from a</font>

190
00:09:26,140 --> 00:09:33,220
password breach<font color="#CCCCCC"> these were</font><font color="#E5E5E5"> collected by</font>

191
00:09:29,590 --> 00:09:36,550
bonobo kin<font color="#E5E5E5"> 2012 with permission from</font>

192
00:09:33,220 --> 00:09:40,270
<font color="#E5E5E5">Yahoo legal later we released this data</font>

193
00:09:36,550 --> 00:09:44,650
set with differential privacy to protect

194
00:09:40,270 --> 00:09:47,650
<font color="#E5E5E5">protect users now</font><font color="#CCCCCC"> what you find if you</font>

195
00:09:44,650 --> 00:09:51,189
look<font color="#CCCCCC"> at this password data set is it</font>

196
00:09:47,650 --> 00:09:54,640
actually fits<font color="#CCCCCC"> a form of zips law called</font>

197
00:09:51,190 --> 00:09:57,540
<font color="#E5E5E5">cdf</font><font color="#CCCCCC"> sips</font><font color="#E5E5E5"> law quite nicely</font><font color="#CCCCCC"> so in</font>

198
00:09:54,640 --> 00:10:00,970
particular if we<font color="#E5E5E5"> look at the cumulative</font>

199
00:09:57,540 --> 00:10:04,990
the<font color="#CCCCCC"> CDF the probability of the tea most</font>

200
00:10:00,970 --> 00:10:08,680
likely passwords<font color="#CCCCCC"> and we plot you know</font>

201
00:10:04,990 --> 00:10:10,780
<font color="#E5E5E5">lambda of T versus the rank T we can see</font>

202
00:10:08,680 --> 00:10:14,219
that<font color="#E5E5E5"> you know on a</font><font color="#CCCCCC"> log-log</font><font color="#E5E5E5"> scale this</font>

203
00:10:10,780 --> 00:10:18,100
this curve actually looks looks linear

204
00:10:14,220 --> 00:10:21,220
<font color="#CCCCCC">so in particular we have parameters y</font>

205
00:10:18,100 --> 00:10:24,310
and<font color="#E5E5E5"> r where r describes the slope of</font>

206
00:10:21,220 --> 00:10:27,340
this line in log log<font color="#CCCCCC"> scale and this</font>

207
00:10:24,310 --> 00:10:33,579
really<font color="#E5E5E5"> characterizes the distribution of</font>

208
00:10:27,340 --> 00:10:36,550
user passwords<font color="#CCCCCC"> so I'll mention that our</font>

209
00:10:33,580 --> 00:10:38,740
finding here is<font color="#E5E5E5"> consistent with previous</font>

210
00:10:36,550 --> 00:10:41,979
findings<font color="#E5E5E5"> of weighing at all</font>

211
00:10:38,740 --> 00:10:44,920
who looked at a<font color="#E5E5E5"> number of prior breaches</font>

212
00:10:41,980 --> 00:10:50,110
and found that all of<font color="#E5E5E5"> these breaches</font>

213
00:10:44,920 --> 00:10:52,870
were well modeled by by<font color="#CCCCCC"> zip slaw so we</font>

214
00:10:50,110 --> 00:10:57,310
show that also<font color="#E5E5E5"> the Yahoo distribution is</font>

215
00:10:52,870 --> 00:11:01,810
as well modeled by these<font color="#CCCCCC"> hips law ok</font>

216
00:10:57,310 --> 00:11:04,959
so let's suppose<font color="#CCCCCC"> for now that the user</font>

217
00:11:01,810 --> 00:11:06,910
password<font color="#E5E5E5"> user distribution of passwords</font>

218
00:11:04,960 --> 00:11:10,240
<font color="#E5E5E5">actually follows zip slaw with</font>

219
00:11:06,910 --> 00:11:12,400
parameters you know<font color="#CCCCCC"> yr and let's suppose</font>

220
00:11:10,240 --> 00:11:17,500
<font color="#CCCCCC">that the attacker encounters diminishing</font>

221
00:11:12,400 --> 00:11:19,930
returns<font color="#E5E5E5"> a now what we can show</font>

222
00:11:17,500 --> 00:11:21,730
is that there's<font color="#CCCCCC"> a threshold which</font>

223
00:11:19,930 --> 00:11:25,989
<font color="#E5E5E5">completely characterizes the attackers</font>

224
00:11:21,730 --> 00:11:29,160
behavior<font color="#CCCCCC"> so in</font><font color="#E5E5E5"> particular if the value</font>

225
00:11:25,990 --> 00:11:32,140
to cost<font color="#E5E5E5"> ratio exceeds this threshold</font>

226
00:11:29,160 --> 00:11:34,449
<font color="#E5E5E5">then the attacker should crack a hundred</font>

227
00:11:32,140 --> 00:11:36,220
percent of passwords<font color="#CCCCCC"> right in particular</font>

228
00:11:34,450 --> 00:11:38,920
if the value to cost<font color="#E5E5E5"> ratio exceeds this</font>

229
00:11:36,220 --> 00:11:42,240
threshold then marginal guessing costs

230
00:11:38,920 --> 00:11:46,810
are always<font color="#CCCCCC"> lower than marginal rewards</font>

231
00:11:42,240 --> 00:11:48,490
so in this case<font color="#E5E5E5"> you know V</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> K V is</font>

232
00:11:46,810 --> 00:11:50,109
the value of<font color="#E5E5E5"> the password K is the cost</font>

233
00:11:48,490 --> 00:11:53,230
of the password so intuitively you know

234
00:11:50,110 --> 00:11:55,740
<font color="#E5E5E5">as</font><font color="#CCCCCC"> a value increases the attacker should</font>

235
00:11:53,230 --> 00:11:58,680
crack<font color="#E5E5E5"> more passwords as the cost</font>

236
00:11:55,740 --> 00:12:02,410
decreases the attacker should<font color="#E5E5E5"> cross</font>

237
00:11:58,680 --> 00:12:04,000
should crack more passwords<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we show</font>

238
00:12:02,410 --> 00:12:06,189
that you know<font color="#E5E5E5"> once you exceed this</font>

239
00:12:04,000 --> 00:12:08,020
threshold<font color="#CCCCCC"> the attackers best strategy is</font>

240
00:12:06,190 --> 00:12:13,720
just to<font color="#E5E5E5"> keep</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> until</font><font color="#CCCCCC"> he's cracked</font>

241
00:12:08,020 --> 00:12:16,030
<font color="#E5E5E5">all of the passwords okay so you know</font>

242
00:12:13,720 --> 00:12:18,850
the<font color="#E5E5E5"> formula for this threshold might</font>

243
00:12:16,030 --> 00:12:20,740
look somewhat complicated<font color="#CCCCCC"> you know I</font>

244
00:12:18,850 --> 00:12:22,630
<font color="#E5E5E5">threw it up here</font><font color="#CCCCCC"> on the slide the</font>

245
00:12:20,740 --> 00:12:24,540
important thing<font color="#CCCCCC"> to note is that it's</font>

246
00:12:22,630 --> 00:12:31,540
<font color="#E5E5E5">just some function</font><font color="#CCCCCC"> which can</font><font color="#E5E5E5"> be computed</font>

247
00:12:24,540 --> 00:12:34,630
given the<font color="#E5E5E5"> parameters Y</font><font color="#CCCCCC"> R na so now let</font>

248
00:12:31,540 --> 00:12:38,469
<font color="#E5E5E5">me show you what</font><font color="#CCCCCC"> that looks like on a</font>

249
00:12:34,630 --> 00:12:41,170
plot right so in this<font color="#E5E5E5"> case we can</font>

250
00:12:38,470 --> 00:12:43,510
compute the thresholds that<font color="#E5E5E5"> we get for</font>

251
00:12:41,170 --> 00:12:47,620
various<font color="#CCCCCC"> password distributions</font><font color="#E5E5E5"> so the</font>

252
00:12:43,510 --> 00:12:51,280
blue<font color="#CCCCCC"> line here shows</font><font color="#E5E5E5"> plots V versus tau</font>

253
00:12:47,620 --> 00:12:55,470
for<font color="#E5E5E5"> the Yahoo distribution the red line</font>

254
00:12:51,280 --> 00:12:57,670
shows<font color="#CCCCCC"> the</font><font color="#E5E5E5"> plot for the</font><font color="#CCCCCC"> CSD n</font>

255
00:12:55,470 --> 00:13:01,810
<font color="#E5E5E5">distribution and the black plot shows</font>

256
00:12:57,670 --> 00:13:05,140
the<font color="#CCCCCC"> RockYou distribution</font><font color="#E5E5E5"> and the</font>

257
00:13:01,810 --> 00:13:09,099
<font color="#CCCCCC">threshold really gives us our doom Zone</font>

258
00:13:05,140 --> 00:13:15,189
right<font color="#CCCCCC"> so in particular</font><font color="#E5E5E5"> if if the value</font>

259
00:13:09,100 --> 00:13:17,410
and the so if our value V and our key

260
00:13:15,190 --> 00:13:20,320
stretching parameter<font color="#E5E5E5"> tau</font><font color="#CCCCCC"> lies within</font>

261
00:13:17,410 --> 00:13:22,480
<font color="#E5E5E5">this red region then this means that the</font>

262
00:13:20,320 --> 00:13:26,200
rational attacker should crack a hundred

263
00:13:22,480 --> 00:13:27,910
percent of passwords<font color="#E5E5E5"> so now it might</font>

264
00:13:26,200 --> 00:13:31,030
seem<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit odd for</font><font color="#CCCCCC"> me to call</font>

265
00:13:27,910 --> 00:13:31,510
this<font color="#E5E5E5"> an optimistic picture</font><font color="#CCCCCC"> why did I</font>

266
00:13:31,030 --> 00:13:35,050
call<font color="#CCCCCC"> this</font>

267
00:13:31,510 --> 00:13:37,900
optimistic picture<font color="#E5E5E5"> well</font><font color="#CCCCCC"> we're making all</font>

268
00:13:35,050 --> 00:13:40,150
<font color="#CCCCCC">of the best possible assumptions here so</font>

269
00:13:37,900 --> 00:13:42,130
we're assuming that the attacker

270
00:13:40,150 --> 00:13:46,569
encounters significant<font color="#E5E5E5"> diminishing</font>

271
00:13:42,130 --> 00:13:49,360
returns<font color="#CCCCCC"> were we look at a wide range of</font>

272
00:13:46,570 --> 00:13:51,040
estimates<font color="#E5E5E5"> for the value of</font><font color="#CCCCCC"> cracked</font>

273
00:13:49,360 --> 00:13:52,930
password<font color="#E5E5E5"> based on black market prices</font>

274
00:13:51,040 --> 00:13:54,910
and we're actually considering<font color="#E5E5E5"> the</font>

275
00:13:52,930 --> 00:13:59,949
lowest possible<font color="#E5E5E5"> estimate from any of</font>

276
00:13:54,910 --> 00:14:03,339
these many of<font color="#CCCCCC"> these studies and in all</font>

277
00:13:59,950 --> 00:14:06,400
<font color="#E5E5E5">cases we</font><font color="#CCCCCC"> found that we lie squarely in</font>

278
00:14:03,340 --> 00:14:11,470
this in this<font color="#E5E5E5"> doom zone so despite the</font>

279
00:14:06,400 --> 00:14:14,530
<font color="#E5E5E5">fact that</font><font color="#CCCCCC"> LastPass for example</font><font color="#E5E5E5"> was using</font>

280
00:14:11,470 --> 00:14:17,700
a hundred thousand<font color="#E5E5E5"> hash iterations which</font>

281
00:14:14,530 --> 00:14:20,650
exceed exceeded<font color="#E5E5E5"> NIST minimum</font>

282
00:14:17,700 --> 00:14:23,890
recommendations by one<font color="#E5E5E5"> order of</font>

283
00:14:20,650 --> 00:14:26,740
<font color="#CCCCCC">magnitude okay</font>

284
00:14:23,890 --> 00:14:31,090
I should also<font color="#E5E5E5"> point out here</font><font color="#CCCCCC"> that we're</font>

285
00:14:26,740 --> 00:14:32,470
taking<font color="#E5E5E5"> the best possible threshold here</font>

286
00:14:31,090 --> 00:14:35,020
so you know we looked at several

287
00:14:32,470 --> 00:14:37,600
<font color="#E5E5E5">different password distributions in this</font>

288
00:14:35,020 --> 00:14:41,650
case the doom zone shows the doom zone

289
00:14:37,600 --> 00:14:43,690
from the strongest<font color="#E5E5E5"> possible distribution</font>

290
00:14:41,650 --> 00:14:46,120
<font color="#E5E5E5">so we're</font><font color="#CCCCCC"> making all of the best</font><font color="#E5E5E5"> possible</font>

291
00:14:43,690 --> 00:14:48,160
assumptions which should minimize<font color="#E5E5E5"> the</font>

292
00:14:46,120 --> 00:14:50,830
chance of<font color="#E5E5E5"> password getting cracked and</font>

293
00:14:48,160 --> 00:14:52,180
still<font color="#E5E5E5"> finding that actually</font><font color="#CCCCCC"> the attacker</font>

294
00:14:50,830 --> 00:14:58,450
should crack a hundred percent of

295
00:14:52,180 --> 00:15:01,300
passwords all<font color="#E5E5E5"> right so so a quick</font><font color="#CCCCCC"> grain</font>

296
00:14:58,450 --> 00:15:06,220
of salt<font color="#E5E5E5"> about the analysis on the last</font>

297
00:15:01,300 --> 00:15:09,910
slide<font color="#CCCCCC"> so we showed that zips law fits</font>

298
00:15:06,220 --> 00:15:12,070
empirical data sets nicely<font color="#CCCCCC"> however we</font>

299
00:15:09,910 --> 00:15:13,449
can't be entirely certain<font color="#E5E5E5"> about the</font>

300
00:15:12,070 --> 00:15:16,090
shape of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> tale of a password</font>

301
00:15:13,450 --> 00:15:18,250
<font color="#E5E5E5">distribution in particular passwords</font>

302
00:15:16,090 --> 00:15:20,980
that<font color="#E5E5E5"> are observed once in a</font><font color="#CCCCCC"> breached</font>

303
00:15:18,250 --> 00:15:23,980
data set we're<font color="#E5E5E5"> not exactly sure</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> the</font>

304
00:15:20,980 --> 00:15:27,580
true true frequency of those<font color="#CCCCCC"> passwords</font>

305
00:15:23,980 --> 00:15:30,610
are so another way<font color="#E5E5E5"> to interpret this</font>

306
00:15:27,580 --> 00:15:33,010
finding is that<font color="#E5E5E5"> at minimum the attacker</font>

307
00:15:30,610 --> 00:15:34,540
will crack all passwords<font color="#CCCCCC"> as long as the</font>

308
00:15:33,010 --> 00:15:36,670
password distribution follows<font color="#CCCCCC"> IPPs law</font>

309
00:15:34,540 --> 00:15:38,020
and it's possible<font color="#E5E5E5"> that a few of these</font>

310
00:15:36,670 --> 00:15:39,550
passwords<font color="#CCCCCC"> at the tail</font><font color="#E5E5E5"> of the</font>

311
00:15:38,020 --> 00:15:42,370
distribution are strong enough that<font color="#CCCCCC"> they</font>

312
00:15:39,550 --> 00:15:45,040
won't be cracked so then the question<font color="#E5E5E5"> is</font>

313
00:15:42,370 --> 00:15:48,340
<font color="#E5E5E5">how big is the tail of the distribution</font>

314
00:15:45,040 --> 00:15:49,959
it seems to<font color="#E5E5E5"> be not too large in</font>

315
00:15:48,340 --> 00:15:53,110
particular if you looked at the<font color="#E5E5E5"> LinkedIn</font>

316
00:15:49,960 --> 00:15:57,190
breach<font color="#CCCCCC"> it appears only 14%</font><font color="#E5E5E5"> of the</font>

317
00:15:53,110 --> 00:16:00,100
passwords there were<font color="#E5E5E5"> we're unique</font><font color="#CCCCCC"> so</font>

318
00:15:57,190 --> 00:16:03,160
I'll refer<font color="#CCCCCC"> you to the paper we have some</font>

319
00:16:00,100 --> 00:16:05,170
model independent analysis<font color="#CCCCCC"> so</font><font color="#E5E5E5"> even if we</font>

320
00:16:03,160 --> 00:16:07,600
make no assumptions like<font color="#E5E5E5"> the password</font>

321
00:16:05,170 --> 00:16:09,280
distribution follows<font color="#CCCCCC"> IPPs</font><font color="#E5E5E5"> law</font><font color="#CCCCCC"> we can</font>

322
00:16:07,600 --> 00:16:12,520
still argue<font color="#E5E5E5"> that with high probability</font>

323
00:16:09,280 --> 00:16:15,300
<font color="#E5E5E5">the attacker cracks almost all the</font>

324
00:16:12,520 --> 00:16:18,130
passwords<font color="#E5E5E5"> these bounds are derived using</font>

325
00:16:15,300 --> 00:16:22,209
you know<font color="#E5E5E5"> statistical</font><font color="#CCCCCC"> tools and like</font>

326
00:16:18,130 --> 00:16:25,060
Chernoff bounds<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

327
00:16:22,210 --> 00:16:27,900
so so<font color="#E5E5E5"> far everything I've told you is</font>

328
00:16:25,060 --> 00:16:30,810
fairly<font color="#E5E5E5"> bleak</font><font color="#CCCCCC"> let me close by telling you</font>

329
00:16:27,900 --> 00:16:34,090
something<font color="#E5E5E5"> a</font><font color="#CCCCCC"> little bit more optimistic</font>

330
00:16:30,810 --> 00:16:36,670
<font color="#CCCCCC">so I mentioned</font><font color="#E5E5E5"> that there's two</font><font color="#CCCCCC"> ways to</font>

331
00:16:34,090 --> 00:16:39,070
stretch passwords there's hash iteration

332
00:16:36,670 --> 00:16:41,650
and there's the more modern technique

333
00:16:39,070 --> 00:16:43,540
called memory<font color="#E5E5E5"> hard functions intuitively</font>

334
00:16:41,650 --> 00:16:45,880
the way a memory hard function works is

335
00:16:43,540 --> 00:16:47,020
instead<font color="#CCCCCC"> of just iterating</font><font color="#E5E5E5"> a hash</font>

336
00:16:45,880 --> 00:16:49,420
function as soon as you start

337
00:16:47,020 --> 00:16:52,449
computation<font color="#E5E5E5"> you start filling memory</font>

338
00:16:49,420 --> 00:16:55,569
with random blocks or random data<font color="#E5E5E5"> that</font>

339
00:16:52,450 --> 00:16:56,860
you've computed and the idea now is<font color="#E5E5E5"> that</font>

340
00:16:55,570 --> 00:17:00,130
if the attacker<font color="#E5E5E5"> is computing this</font>

341
00:16:56,860 --> 00:17:04,209
function<font color="#CCCCCC"> he has to allocate</font><font color="#E5E5E5"> tau blocks</font>

342
00:17:00,130 --> 00:17:07,450
of memory<font color="#E5E5E5"> for tau time steps right so</font>

343
00:17:04,209 --> 00:17:09,670
the nice<font color="#CCCCCC"> thing is that now costs</font>

344
00:17:07,450 --> 00:17:11,230
actually<font color="#E5E5E5"> start to scale quadratically</font>

345
00:17:09,670 --> 00:17:14,709
with<font color="#E5E5E5"> your running time right because the</font>

346
00:17:11,230 --> 00:17:17,140
attacker has to<font color="#E5E5E5"> run for time tau</font><font color="#CCCCCC"> but he</font>

347
00:17:14,709 --> 00:17:20,050
also has to<font color="#E5E5E5"> has to allocate tau blocks</font>

348
00:17:17,140 --> 00:17:24,760
of memory<font color="#E5E5E5"> to compute this function by</font>

349
00:17:20,050 --> 00:17:28,450
contrast<font color="#E5E5E5"> bcrypt and pbkdf2 cost actually</font>

350
00:17:24,760 --> 00:17:29,879
scale linearly<font color="#E5E5E5"> with tau so quadratic</font>

351
00:17:28,450 --> 00:17:32,800
scaling<font color="#E5E5E5"> here is going to be a lot better</font>

352
00:17:29,880 --> 00:17:35,340
<font color="#CCCCCC">and there's a number</font><font color="#E5E5E5"> of candidate memory</font>

353
00:17:32,800 --> 00:17:39,220
<font color="#E5E5E5">hard functions there's s crypt which is</font>

354
00:17:35,340 --> 00:17:42,610
<font color="#E5E5E5">Percival's proposal back in 2009 argon</font>

355
00:17:39,220 --> 00:17:44,400
<font color="#CCCCCC">to ID</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> a variant of</font><font color="#E5E5E5"> the winner</font>

356
00:17:42,610 --> 00:17:46,659
of<font color="#E5E5E5"> the password hashing competition and</font>

357
00:17:44,400 --> 00:17:52,510
you<font color="#E5E5E5"> know some new theoretical</font>

358
00:17:46,660 --> 00:17:54,340
improvements to argon to<font color="#E5E5E5"> ID so I claim</font>

359
00:17:52,510 --> 00:17:57,490
that memory<font color="#E5E5E5"> hard functions are</font>

360
00:17:54,340 --> 00:17:58,570
incredibly helpful here so if we<font color="#E5E5E5"> perform</font>

361
00:17:57,490 --> 00:18:00,340
a pessimistic

362
00:17:58,570 --> 00:18:02,860
analysis now so if we assume<font color="#CCCCCC"> that the</font>

363
00:18:00,340 --> 00:18:05,049
value of<font color="#E5E5E5"> the crack password is</font><font color="#CCCCCC"> four</font>

364
00:18:02,860 --> 00:18:07,120
<font color="#E5E5E5">dollars instead of 40 cents so an order</font>

365
00:18:05,049 --> 00:18:09,120
of magnitude<font color="#CCCCCC"> higher</font><font color="#E5E5E5"> if we</font><font color="#CCCCCC"> assume that</font>

366
00:18:07,120 --> 00:18:13,299
<font color="#E5E5E5">there's no diminishing marginal returns</font>

367
00:18:09,120 --> 00:18:15,539
<font color="#CCCCCC">so you know</font><font color="#E5E5E5"> the attackers</font><font color="#CCCCCC"> value</font><font color="#E5E5E5"> for the</font>

368
00:18:13,299 --> 00:18:17,408
<font color="#E5E5E5">next crack path crack password isn't</font>

369
00:18:15,539 --> 00:18:20,139
diminishing as he cracks more and more

370
00:18:17,409 --> 00:18:23,980
passwords<font color="#CCCCCC"> even with these pessimistic</font>

371
00:18:20,139 --> 00:18:27,250
analysis assumptions we can<font color="#E5E5E5"> still show</font>

372
00:18:23,980 --> 00:18:29,019
that by using<font color="#CCCCCC"> an MA mhf you're actually</font>

373
00:18:27,250 --> 00:18:32,769
predicting the fraction of crack

374
00:18:29,019 --> 00:18:35,710
passwords<font color="#E5E5E5"> down to 20%</font><font color="#CCCCCC"> now of</font><font color="#E5E5E5"> course you</font>

375
00:18:32,769 --> 00:18:41,230
could<font color="#E5E5E5"> do the same</font><font color="#CCCCCC"> thing with something</font>

376
00:18:35,710 --> 00:18:43,809
like pbkdf2<font color="#CCCCCC"> but that requires you to one</font>

377
00:18:41,230 --> 00:18:46,929
for a very<font color="#CCCCCC"> long</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> so in particular</font><font color="#E5E5E5"> if</font>

378
00:18:43,809 --> 00:18:48,700
you perform a ridiculous number of hash

379
00:18:46,929 --> 00:18:51,309
iterations<font color="#E5E5E5"> you can achieve the same</font>

380
00:18:48,700 --> 00:18:53,049
<font color="#CCCCCC">effect</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> know it's</font><font color="#E5E5E5"> likely you're</font><font color="#CCCCCC"> going</font>

381
00:18:51,309 --> 00:18:56,168
<font color="#CCCCCC">to run for about</font><font color="#E5E5E5"> two minutes trying to</font>

382
00:18:53,049 --> 00:18:58,240
trying to hash the password<font color="#CCCCCC"> and we</font>

383
00:18:56,169 --> 00:19:01,600
believe<font color="#CCCCCC"> that two minutes is most likely</font>

384
00:18:58,240 --> 00:19:05,379
an unacceptable<font color="#E5E5E5"> time from a usability</font>

385
00:19:01,600 --> 00:19:09,309
<font color="#E5E5E5">standpoint so executive summary</font><font color="#CCCCCC"> of our</font>

386
00:19:05,379 --> 00:19:11,529
findings<font color="#CCCCCC"> move away from pbkdf2 and</font><font color="#E5E5E5"> be</font>

387
00:19:09,309 --> 00:19:16,269
<font color="#CCCCCC">Crips move towards memory heart</font>

388
00:19:11,529 --> 00:19:19,320
functions<font color="#E5E5E5"> also</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> organizations</font><font color="#CCCCCC"> we'd</font>

389
00:19:16,269 --> 00:19:22,960
<font color="#E5E5E5">recommend moving towards distributed</font>

390
00:19:19,320 --> 00:19:28,120
<font color="#E5E5E5">password hashing Pythia and</font><font color="#CCCCCC"> phoenix are</font>

391
00:19:22,960 --> 00:19:30,639
examples of systems that<font color="#E5E5E5"> do this and for</font>

392
00:19:28,120 --> 00:19:33,668
<font color="#E5E5E5">users we would recommend enabling</font>

393
00:19:30,639 --> 00:19:36,189
two-factor authentication<font color="#CCCCCC"> and focusing</font>

394
00:19:33,669 --> 00:19:37,840
more<font color="#E5E5E5"> energy on selecting different</font>

395
00:19:36,190 --> 00:19:39,549
passwords for<font color="#CCCCCC"> different accounts as</font>

396
00:19:37,840 --> 00:19:42,100
opposed to selecting more complex

397
00:19:39,549 --> 00:19:45,540
passwords<font color="#E5E5E5"> so with that I will</font><font color="#CCCCCC"> conclude</font>

398
00:19:42,100 --> 00:19:48,830
and take any<font color="#E5E5E5"> questions</font>

399
00:19:45,540 --> 00:19:50,970
[Applause]

400
00:19:48,830 --> 00:19:52,889
Peter no I'm gonna once again<font color="#E5E5E5"> I don't</font>

401
00:19:50,970 --> 00:19:55,740
want to go into<font color="#CCCCCC"> a great detail</font><font color="#E5E5E5"> but</font>

402
00:19:52,890 --> 00:19:58,170
you're<font color="#E5E5E5"> over endowing zips if you go back</font>

403
00:19:55,740 --> 00:20:00,630
to my<font color="#CCCCCC"> web</font><font color="#E5E5E5"> website you'll find a paper by</font>

404
00:19:58,170 --> 00:20:02,940
be told the belly which from the late

405
00:20:00,630 --> 00:20:05,070
fifties<font color="#E5E5E5"> where he showed you take any</font>

406
00:20:02,940 --> 00:20:09,930
distribution whatsoever you do the<font color="#CCCCCC"> rank</font>

407
00:20:05,070 --> 00:20:12,980
frequency inversion zip law is the<font color="#E5E5E5"> first</font>

408
00:20:09,930 --> 00:20:15,050
order<font color="#E5E5E5"> Taylor series</font><font color="#CCCCCC"> truncation</font>

409
00:20:12,980 --> 00:20:17,400
Mandelbrot's law is the<font color="#CCCCCC"> second order</font>

410
00:20:15,050 --> 00:20:21,110
<font color="#E5E5E5">truncation</font><font color="#CCCCCC"> it has the curve in it</font><font color="#E5E5E5"> and</font>

411
00:20:17,400 --> 00:20:24,150
this explains this explains the<font color="#CCCCCC"> tail</font>

412
00:20:21,110 --> 00:20:27,149
phenomenon in a lot<font color="#CCCCCC"> of the cases so</font>

413
00:20:24,150 --> 00:20:29,910
<font color="#E5E5E5">you're about you really look at that sir</font>

414
00:20:27,150 --> 00:20:34,680
very very simply that's that's a

415
00:20:29,910 --> 00:20:36,960
remarkable<font color="#E5E5E5"> paper and it deserves people</font>

416
00:20:34,680 --> 00:20:39,420
to understand it and I did write a

417
00:20:36,960 --> 00:20:42,750
little bit on<font color="#CCCCCC"> my</font><font color="#E5E5E5"> website</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> yeah</font>

418
00:20:39,420 --> 00:20:45,750
that's a an interesting interesting

419
00:20:42,750 --> 00:20:48,510
observation I will stress though that a

420
00:20:45,750 --> 00:20:50,550
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that analysis does not depend on</font>

421
00:20:48,510 --> 00:20:57,210
<font color="#E5E5E5">the assumption that passwords follow</font>

422
00:20:50,550 --> 00:20:59,669
<font color="#E5E5E5">zips law okay I'll take a one more</font><font color="#CCCCCC"> clue</font>

423
00:20:57,210 --> 00:21:02,370
<font color="#E5E5E5">question a Nicholas Allen from Amazon</font>

424
00:20:59,670 --> 00:21:04,170
given the prevalence of<font color="#CCCCCC"> pasture</font><font color="#E5E5E5"> abuse I</font>

425
00:21:02,370 --> 00:21:06,419
was wondering if there really is<font color="#E5E5E5"> much</font>

426
00:21:04,170 --> 00:21:08,610
value difference between different sites

427
00:21:06,420 --> 00:21:10,200
<font color="#CCCCCC">and</font><font color="#E5E5E5"> also kind of more for looking if you</font>

428
00:21:08,610 --> 00:21:12,209
did<font color="#E5E5E5"> this iteratively looking at cracking</font>

429
00:21:10,200 --> 00:21:13,800
<font color="#E5E5E5">many different sites does it</font><font color="#CCCCCC"> change your</font>

430
00:21:12,210 --> 00:21:16,320
analysis over cracking<font color="#E5E5E5"> just a single</font>

431
00:21:13,800 --> 00:21:19,680
site in terms<font color="#E5E5E5"> of what amount of effort</font>

432
00:21:16,320 --> 00:21:21,810
<font color="#E5E5E5">you put into the long tail</font><font color="#CCCCCC"> that's a</font>

433
00:21:19,680 --> 00:21:24,990
great question<font color="#CCCCCC"> I don't have a complete</font>

434
00:21:21,810 --> 00:21:27,149
answer the question is you know when

435
00:21:24,990 --> 00:21:28,830
there's multiple breaches<font color="#E5E5E5"> you know how</font>

436
00:21:27,150 --> 00:21:30,570
does the attacker<font color="#E5E5E5"> trade-off energy</font>

437
00:21:28,830 --> 00:21:33,899
between cracking passwords in breach<font color="#E5E5E5"> 1</font>

438
00:21:30,570 --> 00:21:36,120
or breach<font color="#E5E5E5"> - how</font><font color="#CCCCCC"> does the</font><font color="#E5E5E5"> value of you</font>

439
00:21:33,900 --> 00:21:40,410
<font color="#E5E5E5">know how does the value change as a new</font>

440
00:21:36,120 --> 00:21:43,080
new breach<font color="#CCCCCC"> comes out</font><font color="#E5E5E5"> these are excellent</font>

441
00:21:40,410 --> 00:21:46,320
<font color="#E5E5E5">questions</font><font color="#CCCCCC"> I don't know that there's a</font>

442
00:21:43,080 --> 00:21:49,770
<font color="#E5E5E5">complete answer in in our paper but</font>

443
00:21:46,320 --> 00:21:55,669
certainly a an<font color="#E5E5E5"> interesting area for</font>

444
00:21:49,770 --> 00:21:55,670
<font color="#E5E5E5">future future research thank you</font>

