1
00:00:07,580 --> 00:00:11,960
so hi everyone<font color="#E5E5E5"> I'm Pietro and</font>

2
00:00:10,690 --> 00:00:13,649
[Music]

3
00:00:11,960 --> 00:00:16,110
today I'm gonna present the work

4
00:00:13,650 --> 00:00:18,750
<font color="#E5E5E5">at the</font><font color="#CCCCCC"> Busiek and the title of the paper</font>

5
00:00:16,110 --> 00:00:21,860
<font color="#CCCCCC">is a</font><font color="#E5E5E5"> grand boning unit</font><font color="#CCCCCC"> I worked on this</font>

6
00:00:18,750 --> 00:00:25,849
paper with<font color="#E5E5E5"> Christian</font><font color="#CCCCCC"> Burton cada</font>

7
00:00:21,860 --> 00:00:28,050
so the start with<font color="#E5E5E5"> the brief summary so</font>

8
00:00:25,849 --> 00:00:30,330
we start looking<font color="#E5E5E5"> at a macro picture a</font>

9
00:00:28,050 --> 00:00:31,650
text from the<font color="#CCCCCC"> web</font><font color="#E5E5E5"> and the first thing we</font>

10
00:00:30,330 --> 00:00:33,089
look at was what are the major

11
00:00:31,650 --> 00:00:35,430
<font color="#E5E5E5">challenges in implementing this kind</font><font color="#CCCCCC"> of</font>

12
00:00:33,089 --> 00:00:37,110
<font color="#CCCCCC">attacks</font><font color="#E5E5E5"> and the first thing that you</font>

13
00:00:35,430 --> 00:00:39,390
could see is you want and when we<font color="#E5E5E5"> say</font>

14
00:00:37,110 --> 00:00:43,050
major market actual attacks we<font color="#E5E5E5"> mainly</font>

15
00:00:39,390 --> 00:00:44,160
mean<font color="#CCCCCC"> run attacks and saunas and when</font><font color="#E5E5E5"> we</font>

16
00:00:43,050 --> 00:00:47,940
want to build<font color="#CCCCCC"> this kind</font><font color="#E5E5E5"> of attacks the</font>

17
00:00:44,160 --> 00:00:49,229
major challenges that we incur<font color="#E5E5E5"> when we</font>

18
00:00:47,940 --> 00:00:51,269
want to plant<font color="#E5E5E5"> different web</font><font color="#CCCCCC"> are</font>

19
00:00:49,229 --> 00:00:52,949
<font color="#CCCCCC">high-resolution timers and</font><font color="#E5E5E5"> cache</font>

20
00:00:51,269 --> 00:00:55,260
eviction in the case of<font color="#E5E5E5"> runner attacks</font>

21
00:00:52,949 --> 00:00:57,809
now hurry<font color="#E5E5E5"> solution timers were actually</font>

22
00:00:55,260 --> 00:01:00,299
available<font color="#E5E5E5"> in the past from</font><font color="#CCCCCC"> the web</font><font color="#E5E5E5"> but</font>

23
00:00:57,809 --> 00:01:01,760
due<font color="#CCCCCC"> to previous attacks browser vendors</font>

24
00:01:00,299 --> 00:01:04,080
are disabled in these kind of<font color="#CCCCCC"> Steiners</font>

25
00:01:01,760 --> 00:01:06,929
<font color="#E5E5E5">whereas in the case of</font><font color="#CCCCCC"> a cash eviction</font>

26
00:01:04,080 --> 00:01:09,179
it has always been<font color="#E5E5E5"> a big problem because</font>

27
00:01:06,930 --> 00:01:11,220
<font color="#E5E5E5">it's actually</font><font color="#CCCCCC"> quite difficult</font><font color="#E5E5E5"> to reach</font>

28
00:01:09,180 --> 00:01:13,320
the front to reach<font color="#E5E5E5"> theorem without</font>

29
00:01:11,220 --> 00:01:15,179
having a<font color="#CCCCCC"> stash instruction for instance</font>

30
00:01:13,320 --> 00:01:17,399
and this is even<font color="#CCCCCC"> a</font><font color="#E5E5E5"> bigger</font><font color="#CCCCCC"> problem in the</font>

31
00:01:15,180 --> 00:01:20,490
case<font color="#E5E5E5"> of arm platforms because there is</font>

32
00:01:17,400 --> 00:01:24,660
no proof as of now<font color="#CCCCCC"> of</font><font color="#E5E5E5"> one attack from</font>

33
00:01:20,490 --> 00:01:26,850
JavaScript and what<font color="#CCCCCC"> we thought was okay</font>

34
00:01:24,660 --> 00:01:28,740
<font color="#E5E5E5">well when you look at this the the thing</font>

35
00:01:26,850 --> 00:01:30,929
<font color="#E5E5E5">that is common with all the taxes</font><font color="#CCCCCC"> that</font>

36
00:01:28,740 --> 00:01:33,658
all of them they use the CPU as<font color="#E5E5E5"> a back</font>

37
00:01:30,930 --> 00:01:35,400
vector and so the idea we had was it's

38
00:01:33,659 --> 00:01:37,320
about<font color="#E5E5E5"> time</font><font color="#CCCCCC"> that someone</font><font color="#E5E5E5"> looking to a</font>

39
00:01:35,400 --> 00:01:39,890
different attack vector and we switch to

40
00:01:37,320 --> 00:01:42,929
our<font color="#E5E5E5"> third</font><font color="#CCCCCC"> model</font><font color="#E5E5E5"> from the CPU to</font><font color="#CCCCCC"> the GPU</font>

41
00:01:39,890 --> 00:01:44,790
<font color="#E5E5E5">in terms of that once you remove the</font>

42
00:01:42,930 --> 00:01:46,620
threat<font color="#CCCCCC"> model to the GPU</font><font color="#E5E5E5"> we can actually</font>

43
00:01:44,790 --> 00:01:47,909
<font color="#E5E5E5">implement all</font><font color="#CCCCCC"> these kind of attacks</font><font color="#E5E5E5"> and</font>

44
00:01:46,620 --> 00:01:49,409
<font color="#E5E5E5">not only prevent them but we can bypass</font>

45
00:01:47,909 --> 00:01:52,409
all<font color="#CCCCCC"> the challenges</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the mitigation</font>

46
00:01:49,409 --> 00:01:54,180
<font color="#E5E5E5">that has been introduced in the past so</font>

47
00:01:52,409 --> 00:01:56,040
<font color="#CCCCCC">the result</font><font color="#E5E5E5"> is that we can finally</font>

48
00:01:54,180 --> 00:01:58,380
implement an<font color="#CCCCCC"> end-to-end the ROM</font><font color="#E5E5E5"> exploit</font>

49
00:01:56,040 --> 00:02:02,130
from JavaScript and we can do this even

50
00:01:58,380 --> 00:02:03,658
<font color="#CCCCCC">on the more challenging arm platforms so</font>

51
00:02:02,130 --> 00:02:06,089
the goal<font color="#E5E5E5"> for this presentation is</font><font color="#CCCCCC"> gonna</font>

52
00:02:03,659 --> 00:02:07,799
be for me<font color="#CCCCCC"> to</font><font color="#E5E5E5"> introduce you to our</font>

53
00:02:06,090 --> 00:02:11,549
<font color="#E5E5E5">endpoint exploit and guide you through</font>

54
00:02:07,799 --> 00:02:13,260
<font color="#E5E5E5">how we build this and the threat</font><font color="#CCCCCC"> model</font>

55
00:02:11,549 --> 00:02:15,360
in this<font color="#E5E5E5"> case is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be a</font><font color="#CCCCCC"> smartphone</font>

56
00:02:13,260 --> 00:02:17,790
<font color="#CCCCCC">so on Android smartphone and a website</font>

57
00:02:15,360 --> 00:02:20,370
<font color="#E5E5E5">with an attacker has control over this</font>

58
00:02:17,790 --> 00:02:21,200
website and<font color="#E5E5E5"> it can run is on a Java code</font>

59
00:02:20,370 --> 00:02:25,130
and

60
00:02:21,200 --> 00:02:27,140
<font color="#CCCCCC">with gel coat on the GPU our test set</font>

61
00:02:25,130 --> 00:02:30,470
was a nexus 5 because<font color="#E5E5E5"> we</font><font color="#CCCCCC"> had</font><font color="#E5E5E5"> that one in</font>

62
00:02:27,140 --> 00:02:33,649
<font color="#CCCCCC">the lab and we decided</font><font color="#E5E5E5"> to approach that</font>

63
00:02:30,470 --> 00:02:35,209
<font color="#E5E5E5">that</font><font color="#CCCCCC"> one again</font><font color="#E5E5E5"> so let's have a bit of</font>

64
00:02:33,650 --> 00:02:37,940
introduction about<font color="#E5E5E5"> runner</font>

65
00:02:35,209 --> 00:02:41,450
what's wrong Ranma is a bug<font color="#CCCCCC"> that affects</font>

66
00:02:37,940 --> 00:02:43,250
most<font color="#E5E5E5"> of modern</font><font color="#CCCCCC"> DRAM chips and</font><font color="#E5E5E5"> it relies</font>

67
00:02:41,450 --> 00:02:46,359
on the<font color="#E5E5E5"> fact that capacitors that store</font>

68
00:02:43,250 --> 00:02:49,280
data in DRAM<font color="#CCCCCC"> leaks charges</font><font color="#E5E5E5"> over time and</font>

69
00:02:46,360 --> 00:02:50,720
<font color="#E5E5E5">researchers</font><font color="#CCCCCC"> discover that if</font><font color="#E5E5E5"> you want to</font>

70
00:02:49,280 --> 00:02:52,459
if you access memories following a

71
00:02:50,720 --> 00:02:53,840
specific access pattern so you<font color="#E5E5E5"> usually</font>

72
00:02:52,459 --> 00:02:55,970
choose the<font color="#CCCCCC"> two</font><font color="#E5E5E5"> aggressor rows with a</font>

73
00:02:53,840 --> 00:02:57,440
victim raw in the middle<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> follow</font>

74
00:02:55,970 --> 00:02:59,150
specific<font color="#E5E5E5"> access pattern and you do it</font>

75
00:02:57,440 --> 00:03:01,970
fast<font color="#E5E5E5"> enough eventually may be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

76
00:02:59,150 --> 00:03:04,280
trigger<font color="#CCCCCC"> B flips</font><font color="#E5E5E5"> now if this bits are</font>

77
00:03:01,970 --> 00:03:05,239
random is not really a big deal<font color="#CCCCCC"> but the</font>

78
00:03:04,280 --> 00:03:07,400
thing<font color="#CCCCCC"> is this bit is actually</font>

79
00:03:05,239 --> 00:03:09,709
<font color="#E5E5E5">reproducible so once you find a big a</font>

80
00:03:07,400 --> 00:03:13,880
bit<font color="#CCCCCC"> flip you can actually use it later</font>

81
00:03:09,709 --> 00:03:14,840
on<font color="#CCCCCC"> - and to compromise sensitive data so</font>

82
00:03:13,880 --> 00:03:17,180
what do we<font color="#E5E5E5"> need to build this kind</font><font color="#CCCCCC"> of</font>

83
00:03:14,840 --> 00:03:19,660
attacks using<font color="#CCCCCC"> a bunch</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> ingredients</font>

84
00:03:17,180 --> 00:03:22,280
which we call<font color="#E5E5E5"> attacker primitives and</font>

85
00:03:19,660 --> 00:03:24,560
the communities<font color="#E5E5E5"> that we need</font><font color="#CCCCCC"> are first</font>

86
00:03:22,280 --> 00:03:28,250
of all<font color="#CCCCCC"> diem axis</font><font color="#E5E5E5"> because of course you</font>

87
00:03:24,560 --> 00:03:30,530
<font color="#E5E5E5">want to trigger</font><font color="#CCCCCC"> it on diem</font><font color="#E5E5E5"> then you need</font>

88
00:03:28,250 --> 00:03:33,320
<font color="#E5E5E5">to bypass the caches so</font><font color="#CCCCCC"> you need to get</font>

89
00:03:30,530 --> 00:03:34,430
<font color="#E5E5E5">fast enough access to the memory</font><font color="#CCCCCC"> and</font>

90
00:03:33,320 --> 00:03:36,170
eventually<font color="#CCCCCC"> need the contiguous</font><font color="#E5E5E5"> memory</font>

91
00:03:34,430 --> 00:03:37,760
because we said<font color="#CCCCCC"> we need the</font><font color="#E5E5E5"> two</font>

92
00:03:36,170 --> 00:03:39,890
aggressor rows and they became<font color="#E5E5E5"> law in</font>

93
00:03:37,760 --> 00:03:42,048
the middle so we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to go through</font>

94
00:03:39,890 --> 00:03:43,010
every single<font color="#CCCCCC"> one of them and</font><font color="#E5E5E5"> eventually</font>

95
00:03:42,049 --> 00:03:46,519
are<font color="#CCCCCC"> going to show you how we can</font><font color="#E5E5E5"> use</font>

96
00:03:43,010 --> 00:03:48,410
them<font color="#E5E5E5"> to build our end-to-end exploit so</font>

97
00:03:46,519 --> 00:03:50,299
I start from DRAM access to understand

98
00:03:48,410 --> 00:03:52,760
how we get dream access we need<font color="#CCCCCC"> to</font>

99
00:03:50,299 --> 00:03:55,280
understand how the GPU works and this<font color="#CCCCCC"> is</font>

100
00:03:52,760 --> 00:03:57,108
pure as the purpose of aiding the the

101
00:03:55,280 --> 00:03:59,660
rendering pipeline<font color="#E5E5E5"> and then in pipeline</font>

102
00:03:57,109 --> 00:04:03,470
runs in four main steps<font color="#E5E5E5"> at the beginning</font>

103
00:03:59,660 --> 00:04:05,859
you<font color="#E5E5E5"> have the the CPU providing</font>

104
00:04:03,470 --> 00:04:08,329
vertices as inputs for<font color="#CCCCCC"> the GPU</font><font color="#E5E5E5"> and</font>

105
00:04:05,859 --> 00:04:10,370
afterwards these vertices are run

106
00:04:08,329 --> 00:04:12,290
through the vertex<font color="#CCCCCC"> shader which performs</font>

107
00:04:10,370 --> 00:04:13,900
geometrical computations<font color="#CCCCCC"> over these</font>

108
00:04:12,290 --> 00:04:15,828
vertices

109
00:04:13,900 --> 00:04:18,139
afterwards at the<font color="#CCCCCC"> end of a vertex shader</font>

110
00:04:15,829 --> 00:04:20,900
<font color="#CCCCCC">you will have a polygon which is</font>

111
00:04:18,139 --> 00:04:22,130
basically agreed of the fragments which

112
00:04:20,899 --> 00:04:25,190
are basically<font color="#CCCCCC"> the pixel inside</font><font color="#E5E5E5"> the</font>

113
00:04:22,130 --> 00:04:26,539
<font color="#E5E5E5">polygon and after you would run the</font>

114
00:04:25,190 --> 00:04:29,690
fragment shader over every single<font color="#CCCCCC"> one of</font>

115
00:04:26,539 --> 00:04:30,880
these pixels<font color="#E5E5E5"> now when you want to run</font>

116
00:04:29,690 --> 00:04:31,840
<font color="#E5E5E5">the information one</font>

117
00:04:30,880 --> 00:04:34,030
when<font color="#CCCCCC"> you're on the</font><font color="#E5E5E5"> fragment shader most</font>

118
00:04:31,840 --> 00:04:35,830
the time the purpose<font color="#CCCCCC"> of the purpose of</font>

119
00:04:34,030 --> 00:04:38,140
this fragment<font color="#CCCCCC"> shader is to color the the</font>

120
00:04:35,830 --> 00:04:39,909
pixels<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you usually want to do it by</font>

121
00:04:38,140 --> 00:04:41,110
using<font color="#E5E5E5"> some textures</font><font color="#CCCCCC"> because maybe</font><font color="#E5E5E5"> you</font>

122
00:04:39,910 --> 00:04:43,480
<font color="#CCCCCC">want to draw</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> know I wouldn't share</font>

123
00:04:41,110 --> 00:04:44,650
or something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> that so the fragment</font>

124
00:04:43,480 --> 00:04:46,810
shader is the<font color="#E5E5E5"> the possibility</font><font color="#CCCCCC"> of</font>

125
00:04:44,650 --> 00:04:49,120
accessing<font color="#E5E5E5"> external data in the form of</font>

126
00:04:46,810 --> 00:04:51,940
textures<font color="#E5E5E5"> so once you get</font><font color="#CCCCCC"> the data you</font>

127
00:04:49,120 --> 00:04:53,800
<font color="#E5E5E5">run the fragment shader</font><font color="#CCCCCC"> you get your</font>

128
00:04:51,940 --> 00:04:55,719
output<font color="#E5E5E5"> as a</font><font color="#CCCCCC"> Budin triangle in this case</font>

129
00:04:53,800 --> 00:04:57,580
and<font color="#E5E5E5"> eventually you send it to the frame</font>

130
00:04:55,720 --> 00:05:00,250
buffer which<font color="#CCCCCC"> is the screen of</font><font color="#E5E5E5"> your</font>

131
00:04:57,580 --> 00:05:02,820
smartphone in this case so let's have a

132
00:05:00,250 --> 00:05:05,410
look<font color="#E5E5E5"> at how this happens</font><font color="#CCCCCC"> from the GPU</font>

133
00:05:02,820 --> 00:05:06,820
<font color="#CCCCCC">now we have we can</font><font color="#E5E5E5"> see that we have the</font>

134
00:05:05,410 --> 00:05:10,090
vertices and texture stored in the<font color="#CCCCCC"> UNAM</font>

135
00:05:06,820 --> 00:05:11,409
<font color="#CCCCCC">and this unit sphere on</font><font color="#E5E5E5"> the GPU are the</font>

136
00:05:10,090 --> 00:05:14,560
stream processor which are the one in

137
00:05:11,410 --> 00:05:16,720
<font color="#CCCCCC">charge of running the shaders</font><font color="#E5E5E5"> and what</font>

138
00:05:14,560 --> 00:05:18,820
the GPU does is start running the vertex

139
00:05:16,720 --> 00:05:22,300
shader<font color="#E5E5E5"> on the stream processors and it</font>

140
00:05:18,820 --> 00:05:24,880
outputs<font color="#E5E5E5"> the the polygons at the end of</font>

141
00:05:22,300 --> 00:05:26,380
the<font color="#E5E5E5"> vertex shader and afterwards once</font>

142
00:05:24,880 --> 00:05:26,740
once it's time<font color="#E5E5E5"> to run the fragment</font>

143
00:05:26,380 --> 00:05:28,630
shader

144
00:05:26,740 --> 00:05:31,300
it required the texture processor which

145
00:05:28,630 --> 00:05:33,940
<font color="#CCCCCC">had this</font><font color="#E5E5E5"> ones but</font><font color="#CCCCCC"> I just highlighted to</font>

146
00:05:31,300 --> 00:05:35,470
query the textures<font color="#E5E5E5"> from Dylan now</font>

147
00:05:33,940 --> 00:05:36,850
they've queried the textures<font color="#E5E5E5"> that we run</font>

148
00:05:35,470 --> 00:05:38,530
at<font color="#E5E5E5"> the fragment shader filling the</font>

149
00:05:36,850 --> 00:05:41,290
pixels and eventually send the output<font color="#CCCCCC"> to</font>

150
00:05:38,530 --> 00:05:42,789
<font color="#E5E5E5">the frame buffer now as you can</font><font color="#CCCCCC"> see we</font>

151
00:05:41,290 --> 00:05:44,980
have the<font color="#CCCCCC"> three main access points to</font>

152
00:05:42,790 --> 00:05:47,290
Dylan<font color="#E5E5E5"> and these are reading the vertices</font>

153
00:05:44,980 --> 00:05:50,110
<font color="#E5E5E5">reading the textures and writing to the</font>

154
00:05:47,290 --> 00:05:51,460
frame buffer we opted to go for<font color="#E5E5E5"> the</font>

155
00:05:50,110 --> 00:05:55,210
textures<font color="#E5E5E5"> because it was the most</font>

156
00:05:51,460 --> 00:05:57,640
<font color="#E5E5E5">predictable one and it allows us to fine</font>

157
00:05:55,210 --> 00:06:01,270
grained and fine<font color="#E5E5E5"> fine grain control over</font>

158
00:05:57,640 --> 00:06:04,990
the<font color="#E5E5E5"> memory accesses so</font><font color="#CCCCCC"> we get our first</font>

159
00:06:01,270 --> 00:06:07,510
<font color="#CCCCCC">primitive we get the vellum axis what</font>

160
00:06:04,990 --> 00:06:10,720
<font color="#E5E5E5">about the first cache addiction</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> we</font>

161
00:06:07,510 --> 00:06:14,140
bypass<font color="#CCCCCC"> the cache is fast enough now as I</font>

162
00:06:10,720 --> 00:06:18,790
mentioned earlier<font color="#E5E5E5"> the GPU also as</font><font color="#CCCCCC"> caches</font>

163
00:06:14,140 --> 00:06:21,370
<font color="#E5E5E5">and</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> caches we need to bypass them</font>

164
00:06:18,790 --> 00:06:23,860
as we will be the case<font color="#E5E5E5"> in the case of an</font>

165
00:06:21,370 --> 00:06:25,630
attack run<font color="#E5E5E5"> from the CPU so what we did</font>

166
00:06:23,860 --> 00:06:27,640
we had to reverse<font color="#CCCCCC"> engineer this caches</font>

167
00:06:25,630 --> 00:06:29,440
<font color="#E5E5E5">because they're undocumented and they</font>

168
00:06:27,640 --> 00:06:30,700
actually pertain interesting so if you

169
00:06:29,440 --> 00:06:32,820
want you can<font color="#CCCCCC"> ask me a question about</font><font color="#E5E5E5"> it</font>

170
00:06:30,700 --> 00:06:34,810
later or<font color="#E5E5E5"> look it up on the paper and</font>

171
00:06:32,820 --> 00:06:37,420
what we did was<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we compared these</font>

172
00:06:34,810 --> 00:06:40,150
caches<font color="#E5E5E5"> with the one from the CPU</font><font color="#CCCCCC"> to</font>

173
00:06:37,420 --> 00:06:42,310
verify how they was the difference

174
00:06:40,150 --> 00:06:43,909
between<font color="#CCCCCC"> the two and it turns</font><font color="#E5E5E5"> out that</font>

175
00:06:42,310 --> 00:06:45,170
the CPU caches are actually

176
00:06:43,910 --> 00:06:47,090
pretty large so in the order<font color="#CCCCCC"> of</font>

177
00:06:45,170 --> 00:06:48,620
megabytes and the usual implement a

178
00:06:47,090 --> 00:06:51,049
random replacement policy in the case of

179
00:06:48,620 --> 00:06:53,150
<font color="#CCCCCC">arm platforms</font><font color="#E5E5E5"> which makes it very very</font>

180
00:06:51,050 --> 00:06:54,710
<font color="#CCCCCC">hard to to bypass them because you don't</font>

181
00:06:53,150 --> 00:06:56,870
know when you're evicting the data you

182
00:06:54,710 --> 00:06:59,479
<font color="#E5E5E5">want to remove from the cache</font><font color="#CCCCCC"> whereas</font>

183
00:06:56,870 --> 00:07:01,430
this is<font color="#E5E5E5"> not the case when from the GPU</font>

184
00:06:59,480 --> 00:07:03,340
<font color="#E5E5E5">because this cache is actually very</font>

185
00:07:01,430 --> 00:07:05,660
<font color="#E5E5E5">small in the</font><font color="#CCCCCC"> order of kilobytes and</font>

186
00:07:03,340 --> 00:07:07,280
implement<font color="#CCCCCC"> five for</font><font color="#E5E5E5"> replacement policy</font>

187
00:07:05,660 --> 00:07:09,050
which is a<font color="#E5E5E5"> deterministic and as a</font>

188
00:07:07,280 --> 00:07:11,090
consequence it's pretty trivial to

189
00:07:09,050 --> 00:07:15,140
figure out what what ergonomic from the

190
00:07:11,090 --> 00:07:17,810
cache afterwards and we didn't figure

191
00:07:15,140 --> 00:07:19,760
out<font color="#E5E5E5"> these caches were actually fast</font>

192
00:07:17,810 --> 00:07:22,130
enough to bypass<font color="#E5E5E5"> and it turns out</font>

193
00:07:19,760 --> 00:07:24,800
<font color="#E5E5E5">actually we can do that so we have a</font>

194
00:07:22,130 --> 00:07:27,020
first<font color="#CCCCCC"> conviction and we're capable of</font>

195
00:07:24,800 --> 00:07:30,020
<font color="#CCCCCC">triggering be</font><font color="#E5E5E5"> released and now the</font>

196
00:07:27,020 --> 00:07:33,020
question<font color="#E5E5E5"> we were still</font><font color="#CCCCCC"> missing is how do</font>

197
00:07:30,020 --> 00:07:34,760
we<font color="#CCCCCC"> get contiguous memory to to</font><font color="#E5E5E5"> perform</font>

198
00:07:33,020 --> 00:07:36,560
our<font color="#E5E5E5"> ramen attack and have the aggressor</font>

199
00:07:34,760 --> 00:07:40,550
rose and the became<font color="#CCCCCC"> low</font><font color="#E5E5E5"> set in the</font>

200
00:07:36,560 --> 00:07:44,450
middle now the idea<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> you</font>

201
00:07:40,550 --> 00:07:46,550
allocate enough memory on the engine

202
00:07:44,450 --> 00:07:47,960
eventually the the operating system<font color="#E5E5E5"> will</font>

203
00:07:46,550 --> 00:07:50,390
provide you with<font color="#CCCCCC"> the contiguous chunks</font>

204
00:07:47,960 --> 00:07:51,890
<font color="#E5E5E5">and this because at the</font><font color="#CCCCCC"> beginning we</font><font color="#E5E5E5"> try</font>

205
00:07:50,390 --> 00:07:53,719
<font color="#E5E5E5">not to fragment</font><font color="#CCCCCC"> the memory but at one</font>

206
00:07:51,890 --> 00:07:55,340
point once you have exhausted all the

207
00:07:53,720 --> 00:07:58,340
small chunks you will need to allocate

208
00:07:55,340 --> 00:07:59,900
also from the big chunks<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we stopped</font>

209
00:07:58,340 --> 00:08:02,000
allocating single pages textures and in

210
00:07:59,900 --> 00:08:04,729
this case one page is represented by

211
00:08:02,000 --> 00:08:07,760
three<font color="#CCCCCC"> of the Indies cells and we start</font>

212
00:08:04,730 --> 00:08:09,650
allocating them at one point you will

213
00:08:07,760 --> 00:08:12,289
end up allocating from chunks which are

214
00:08:09,650 --> 00:08:14,630
actually contiguous<font color="#E5E5E5"> and we can use for</font>

215
00:08:12,290 --> 00:08:16,310
<font color="#E5E5E5">honor now we have one part of it which</font>

216
00:08:14,630 --> 00:08:20,270
<font color="#CCCCCC">is can be</font><font color="#E5E5E5"> used for honor and one part</font>

217
00:08:16,310 --> 00:08:22,460
that<font color="#E5E5E5"> is not usable for honor so the</font>

218
00:08:20,270 --> 00:08:26,359
question is how<font color="#CCCCCC"> can we distinguish these</font>

219
00:08:22,460 --> 00:08:28,400
two<font color="#E5E5E5"> these two areas and what we do is</font>

220
00:08:26,360 --> 00:08:30,650
actually we actually<font color="#CCCCCC"> build a side</font>

221
00:08:28,400 --> 00:08:32,598
channel to do this so we can<font color="#CCCCCC"> actually</font>

222
00:08:30,650 --> 00:08:35,329
prove that we<font color="#E5E5E5"> can not only build the</font>

223
00:08:32,599 --> 00:08:37,729
<font color="#CCCCCC">Ranma attacks but also side channels and</font>

224
00:08:35,330 --> 00:08:39,289
this<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> channel a targets the way DRAM</font>

225
00:08:37,729 --> 00:08:40,669
reads work<font color="#E5E5E5"> so when you want to read</font>

226
00:08:39,289 --> 00:08:43,010
something<font color="#CCCCCC"> from DRAM</font><font color="#E5E5E5"> so let's say we want</font>

227
00:08:40,669 --> 00:08:44,780
to<font color="#E5E5E5"> read these two pages on</font><font color="#CCCCCC"> that row what</font>

228
00:08:43,010 --> 00:08:46,340
<font color="#E5E5E5">you to do is you get that row you</font>

229
00:08:44,780 --> 00:08:48,380
activate it<font color="#E5E5E5"> and you bring it to the row</font>

230
00:08:46,340 --> 00:08:50,960
buffer which is<font color="#E5E5E5"> kind of a cache</font><font color="#CCCCCC"> forum</font>

231
00:08:48,380 --> 00:08:54,140
<font color="#E5E5E5">and then once it's in the row buffer you</font>

232
00:08:50,960 --> 00:08:55,640
<font color="#E5E5E5">can read</font><font color="#CCCCCC"> the page that you want and this</font>

233
00:08:54,140 --> 00:08:57,470
<font color="#E5E5E5">is the first</font><font color="#CCCCCC"> read</font><font color="#E5E5E5"> clearly is</font><font color="#CCCCCC"> going to be</font>

234
00:08:55,640 --> 00:08:58,939
slow<font color="#E5E5E5"> because you need to activate it</font>

235
00:08:57,470 --> 00:09:00,890
bring<font color="#E5E5E5"> into the row buffer and afterwards</font>

236
00:08:58,940 --> 00:09:01,880
you can get the data<font color="#E5E5E5"> from there but</font>

237
00:09:00,890 --> 00:09:03,800
<font color="#E5E5E5">that's not the case</font><font color="#CCCCCC"> for the second wave</font>

238
00:09:01,880 --> 00:09:06,320
because it's already in<font color="#E5E5E5"> the row buffer</font>

239
00:09:03,800 --> 00:09:09,050
so you can just<font color="#E5E5E5"> read from there is</font><font color="#CCCCCC"> gonna</font>

240
00:09:06,320 --> 00:09:11,120
<font color="#CCCCCC">be</font><font color="#E5E5E5"> quite as fast and you system this</font>

241
00:09:09,050 --> 00:09:13,160
intuition<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> actually exploit it to</font>

242
00:09:11,120 --> 00:09:15,410
<font color="#E5E5E5">the tech detect the contiguous and</font>

243
00:09:13,160 --> 00:09:18,079
non-contiguous<font color="#CCCCCC"> and the way it works is</font>

244
00:09:15,410 --> 00:09:22,490
we<font color="#E5E5E5"> basically access sequentially all the</font>

245
00:09:18,080 --> 00:09:23,990
texture we just allocated and<font color="#E5E5E5"> and so</font>

246
00:09:22,490 --> 00:09:26,810
like let's say we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> access the</font>

247
00:09:23,990 --> 00:09:28,520
first<font color="#CCCCCC"> feet actually well located what we</font>

248
00:09:26,810 --> 00:09:30,890
need to do is we activate the row<font color="#CCCCCC"> bring</font>

249
00:09:28,520 --> 00:09:33,079
it to<font color="#E5E5E5"> row buffer read from there do the</font>

250
00:09:30,890 --> 00:09:35,870
same for the second row and then again

251
00:09:33,080 --> 00:09:37,400
also<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the third row and</font><font color="#E5E5E5"> as you can</font>

252
00:09:35,870 --> 00:09:39,200
<font color="#E5E5E5">imagine this is</font><font color="#CCCCCC"> really slow because</font>

253
00:09:37,400 --> 00:09:40,880
<font color="#E5E5E5">every time</font><font color="#CCCCCC"> you're generating these row</font>

254
00:09:39,200 --> 00:09:42,320
conflicts<font color="#E5E5E5"> and also it's very nice</font>

255
00:09:40,880 --> 00:09:44,150
<font color="#CCCCCC">because you wouldn't know where</font><font color="#E5E5E5"> these</font>

256
00:09:42,320 --> 00:09:46,730
<font color="#E5E5E5">accesses are coming from so it might be</font>

257
00:09:44,150 --> 00:09:47,959
<font color="#E5E5E5">that it's</font><font color="#CCCCCC"> Ciroc on flickr or</font><font color="#E5E5E5"> heat but</font>

258
00:09:46,730 --> 00:09:50,390
this is not the<font color="#E5E5E5"> case when</font><font color="#CCCCCC"> you have a</font>

259
00:09:47,960 --> 00:09:52,460
<font color="#E5E5E5">contiguous memory because you can simply</font>

260
00:09:50,390 --> 00:09:55,310
say<font color="#E5E5E5"> okay we want</font><font color="#CCCCCC"> to allocate</font><font color="#E5E5E5"> and we want</font>

261
00:09:52,460 --> 00:09:57,170
to read is a consecutive five four pages

262
00:09:55,310 --> 00:09:58,939
<font color="#E5E5E5">what we do is we just activate the</font><font color="#CCCCCC"> row</font>

263
00:09:57,170 --> 00:10:00,050
<font color="#E5E5E5">bring it to a row buffer and all of them</font>

264
00:09:58,940 --> 00:10:03,050
<font color="#E5E5E5">are going to be in the row buffer so</font>

265
00:10:00,050 --> 00:10:04,609
this is gonna be quite fast<font color="#E5E5E5"> and</font><font color="#CCCCCC"> against</font>

266
00:10:03,050 --> 00:10:06,020
<font color="#CCCCCC">it</font><font color="#E5E5E5"> so this is</font><font color="#CCCCCC"> a really</font><font color="#E5E5E5"> fast</font>

267
00:10:04,610 --> 00:10:09,320
<font color="#E5E5E5">and also</font><font color="#CCCCCC"> provides you</font><font color="#E5E5E5"> with a really</font>

268
00:10:06,020 --> 00:10:11,870
<font color="#E5E5E5">clear signal</font><font color="#CCCCCC"> that you can use to to</font>

269
00:10:09,320 --> 00:10:13,970
<font color="#E5E5E5">detect</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> two different</font><font color="#CCCCCC"> errand</font>

270
00:10:11,870 --> 00:10:16,130
memory now this is not<font color="#E5E5E5"> really a major</font>

271
00:10:13,970 --> 00:10:18,290
contribution<font color="#E5E5E5"> in the sense of the of the</font>

272
00:10:16,130 --> 00:10:20,210
<font color="#CCCCCC">say channel itself but what</font><font color="#E5E5E5"> really</font>

273
00:10:18,290 --> 00:10:22,370
matter is<font color="#CCCCCC"> that we can do it from</font><font color="#E5E5E5"> the GPU</font>

274
00:10:20,210 --> 00:10:24,800
and what it<font color="#CCCCCC"> provides us what are the</font>

275
00:10:22,370 --> 00:10:27,800
tools<font color="#E5E5E5"> we need</font><font color="#CCCCCC"> to build these attacks we</font>

276
00:10:24,800 --> 00:10:29,240
clearly need timers to<font color="#E5E5E5"> do this and the</font>

277
00:10:27,800 --> 00:10:31,430
GPU provides with timers through the

278
00:10:29,240 --> 00:10:35,990
<font color="#E5E5E5">WebGL API and they provides it</font><font color="#CCCCCC"> to family</font>

279
00:10:31,430 --> 00:10:37,430
of<font color="#E5E5E5"> timers the first one is a timers</font>

280
00:10:35,990 --> 00:10:39,860
based on the disjoint and<font color="#CCCCCC"> require</font>

281
00:10:37,430 --> 00:10:41,660
extension and these<font color="#E5E5E5"> timers are explicit</font>

282
00:10:39,860 --> 00:10:43,100
and they and<font color="#E5E5E5"> they're really similar to</font>

283
00:10:41,660 --> 00:10:45,020
for instance clock<font color="#CCCCCC"> at time so you</font>

284
00:10:43,100 --> 00:10:47,000
basically<font color="#E5E5E5"> ask for a</font><font color="#CCCCCC"> timestamp</font><font color="#E5E5E5"> and you</font>

285
00:10:45,020 --> 00:10:47,870
will<font color="#E5E5E5"> get back the</font><font color="#CCCCCC"> result</font><font color="#E5E5E5"> and this time</font>

286
00:10:47,000 --> 00:10:50,480
<font color="#E5E5E5">must provide you a really high</font>

287
00:10:47,870 --> 00:10:51,740
resolution<font color="#E5E5E5"> and using some specific</font>

288
00:10:50,480 --> 00:10:54,130
<font color="#CCCCCC">techniques you can</font><font color="#E5E5E5"> bring it</font><font color="#CCCCCC"> down</font><font color="#E5E5E5"> to</font>

289
00:10:51,740 --> 00:10:56,390
almost a<font color="#E5E5E5"> few min a few or nanoseconds</font>

290
00:10:54,130 --> 00:10:58,400
<font color="#E5E5E5">the second coming of timer is that</font><font color="#CCCCCC"> is</font>

291
00:10:56,390 --> 00:11:00,470
based on the web<font color="#E5E5E5"> just sync objects and</font>

292
00:10:58,400 --> 00:11:02,510
these objects<font color="#E5E5E5"> are basically a fancy that</font>

293
00:11:00,470 --> 00:11:05,810
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can use</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> use to synchronize</font>

294
00:11:02,510 --> 00:11:10,230
the CPU and<font color="#E5E5E5"> the GPU now these diners are</font>

295
00:11:05,810 --> 00:11:11,430
not as as precise as the<font color="#E5E5E5"> other ones but</font>

296
00:11:10,230 --> 00:11:12,899
they're still good enough<font color="#E5E5E5"> because</font><font color="#CCCCCC"> they</font>

297
00:11:11,430 --> 00:11:14,760
provide a resolution of<font color="#E5E5E5"> less</font><font color="#CCCCCC"> than a</font>

298
00:11:12,899 --> 00:11:17,550
<font color="#CCCCCC">microsecond</font><font color="#E5E5E5"> so you can still</font><font color="#CCCCCC"> use them</font><font color="#E5E5E5"> to</font>

299
00:11:14,760 --> 00:11:19,230
to be<font color="#CCCCCC"> searched and</font><font color="#E5E5E5"> attacks and what's</font>

300
00:11:17,550 --> 00:11:20,849
even<font color="#CCCCCC"> more important of</font><font color="#E5E5E5"> this is that</font><font color="#CCCCCC"> all</font>

301
00:11:19,230 --> 00:11:22,589
the standard bypasses all the current

302
00:11:20,850 --> 00:11:25,139
<font color="#E5E5E5">domestic mitigations because no one</font>

303
00:11:22,589 --> 00:11:28,440
<font color="#CCCCCC">taking two takes into account the GPU in</font>

304
00:11:25,139 --> 00:11:32,040
the third model<font color="#E5E5E5"> so now we have all our</font>

305
00:11:28,440 --> 00:11:34,110
timers<font color="#CCCCCC"> all of our</font><font color="#E5E5E5"> primitives what can we</font>

306
00:11:32,040 --> 00:11:36,630
do<font color="#E5E5E5"> with these primitives as mentioned at</font>

307
00:11:34,110 --> 00:11:39,959
the beginning the goal<font color="#E5E5E5"> was to build an</font>

308
00:11:36,630 --> 00:11:41,899
end-to-end remote<font color="#CCCCCC"> rommel exploit and we</font>

309
00:11:39,959 --> 00:11:45,359
did this targeting<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Firefox</font><font color="#E5E5E5"> browser</font>

310
00:11:41,899 --> 00:11:47,610
so let<font color="#E5E5E5"> me introduce you</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> glitch</font><font color="#CCCCCC"> gluten</font>

311
00:11:45,360 --> 00:11:49,500
in a nutshell is it runs in five<font color="#E5E5E5"> steps</font>

312
00:11:47,610 --> 00:11:51,389
and the first<font color="#CCCCCC"> step as we mentioned we</font>

313
00:11:49,500 --> 00:11:54,000
need<font color="#E5E5E5"> to allocate and memory enough to</font>

314
00:11:51,389 --> 00:11:55,380
eventually<font color="#CCCCCC"> get contiguous chunks</font><font color="#E5E5E5"> then we</font>

315
00:11:54,000 --> 00:11:58,110
can use our<font color="#E5E5E5"> timing</font><font color="#CCCCCC"> side</font><font color="#E5E5E5"> channel to</font>

316
00:11:55,380 --> 00:11:59,550
detect<font color="#E5E5E5"> these chunks afterwards we need</font>

317
00:11:58,110 --> 00:12:01,440
to do memory templating<font color="#E5E5E5"> which is</font>

318
00:11:59,550 --> 00:12:02,969
basically the act of looking for the

319
00:12:01,440 --> 00:12:05,160
exploitable<font color="#CCCCCC"> beliefs so as you mentioned</font>

320
00:12:02,970 --> 00:12:07,320
<font color="#E5E5E5">earlier once you to grab if you can</font>

321
00:12:05,160 --> 00:12:09,060
reproduce it<font color="#E5E5E5"> later so you first look for</font>

322
00:12:07,320 --> 00:12:11,279
<font color="#E5E5E5">the business within</font><font color="#CCCCCC"> the memory</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you</font>

323
00:12:09,060 --> 00:12:13,768
control on the textures and afterwards

324
00:12:11,279 --> 00:12:16,560
you<font color="#E5E5E5"> will reuse it</font><font color="#CCCCCC"> over the</font><font color="#E5E5E5"> things that</font>

325
00:12:13,769 --> 00:12:18,959
you want<font color="#CCCCCC"> to corrupt so as we mentioned</font>

326
00:12:16,560 --> 00:12:21,268
<font color="#E5E5E5">you look for the extra bits then you</font>

327
00:12:18,959 --> 00:12:23,010
release the<font color="#E5E5E5"> memory and you</font><font color="#CCCCCC"> reuse it with</font>

328
00:12:21,269 --> 00:12:26,430
the<font color="#E5E5E5"> sensitive data and</font><font color="#CCCCCC"> eventually you</font>

329
00:12:23,010 --> 00:12:28,709
can<font color="#E5E5E5"> exploit it now the destroyit relies</font>

330
00:12:26,430 --> 00:12:31,560
on a primitive<font color="#E5E5E5"> that is known as type</font>

331
00:12:28,709 --> 00:12:34,949
flipping and disparities<font color="#E5E5E5"> is based on the</font>

332
00:12:31,560 --> 00:12:38,339
fact that<font color="#E5E5E5"> modern browsers use</font><font color="#CCCCCC"> a double</font>

333
00:12:34,949 --> 00:12:42,209
precision<font color="#E5E5E5"> values to store both numbers</font>

334
00:12:38,339 --> 00:12:43,680
<font color="#CCCCCC">and also</font><font color="#E5E5E5"> pointers so the in this numbers</font>

335
00:12:42,209 --> 00:12:46,890
there is<font color="#CCCCCC"> a the prefix of the</font><font color="#E5E5E5"> number</font>

336
00:12:43,680 --> 00:12:48,719
which is 32 bits and<font color="#E5E5E5"> 32 bits are</font><font color="#CCCCCC"> used as</font>

337
00:12:46,890 --> 00:12:50,730
a tag and if the tag<font color="#CCCCCC"> is lower of a</font>

338
00:12:48,720 --> 00:12:52,890
<font color="#E5E5E5">threshold value then it's going to be</font>

339
00:12:50,730 --> 00:12:55,140
considered as a double otherwise it it's

340
00:12:52,890 --> 00:12:56,790
a pointer and<font color="#E5E5E5"> now as you can imagine a</font>

341
00:12:55,140 --> 00:12:58,920
battery gonna be flipping this<font color="#E5E5E5"> tag you</font>

342
00:12:56,790 --> 00:13:01,170
can<font color="#CCCCCC"> just turn</font><font color="#E5E5E5"> a pointer into a double or</font>

343
00:12:58,920 --> 00:13:04,349
a double into a pointer<font color="#E5E5E5"> so you can do</font>

344
00:13:01,170 --> 00:13:06,810
<font color="#E5E5E5">both of the things so what we do is we</font>

345
00:13:04,350 --> 00:13:09,899
use this<font color="#E5E5E5"> primitive and we use one bit</font>

346
00:13:06,810 --> 00:13:12,089
<font color="#CCCCCC">flip to turn pointer</font><font color="#E5E5E5"> into a double and</font>

347
00:13:09,899 --> 00:13:13,769
break a SLR<font color="#E5E5E5"> because once we turn it</font><font color="#CCCCCC"> into</font>

348
00:13:12,089 --> 00:13:15,449
a double<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> actually read it</font><font color="#E5E5E5"> from</font>

349
00:13:13,769 --> 00:13:18,449
<font color="#E5E5E5">JavaScript and then once you have a</font>

350
00:13:15,449 --> 00:13:20,729
pointer we can do we can<font color="#CCCCCC"> create a fake</font>

351
00:13:18,449 --> 00:13:21,930
object and create<font color="#CCCCCC"> a reference</font><font color="#E5E5E5"> to it by</font>

352
00:13:20,730 --> 00:13:23,970
using<font color="#CCCCCC"> the other bit flip</font>

353
00:13:21,930 --> 00:13:26,390
so we just turn a<font color="#CCCCCC"> double that we crafted</font>

354
00:13:23,970 --> 00:13:28,830
specifically<font color="#E5E5E5"> and we turn it into a</font><font color="#CCCCCC"> ponte</font>

355
00:13:26,390 --> 00:13:31,530
<font color="#E5E5E5">so you</font><font color="#CCCCCC"> will think that the season in</font><font color="#E5E5E5"> the</font>

356
00:13:28,830 --> 00:13:34,050
<font color="#E5E5E5">two-bit lips this may require</font><font color="#CCCCCC"> a lot of</font>

357
00:13:31,530 --> 00:13:36,270
<font color="#E5E5E5">time but actually it doesn't we run an</font>

358
00:13:34,050 --> 00:13:37,979
experiment<font color="#E5E5E5"> and we run it for 15 times</font>

359
00:13:36,270 --> 00:13:40,530
and<font color="#E5E5E5"> it turns out</font><font color="#CCCCCC"> it runs in less</font><font color="#E5E5E5"> than</font>

360
00:13:37,980 --> 00:13:42,830
<font color="#CCCCCC">two minutes on average</font><font color="#E5E5E5"> so this is</font>

361
00:13:40,530 --> 00:13:47,130
actually the fastest exploit<font color="#CCCCCC"> ROM exploit</font>

362
00:13:42,830 --> 00:13:48,750
available from from JavaScript<font color="#E5E5E5"> and this</font>

363
00:13:47,130 --> 00:13:50,580
is even<font color="#CCCCCC"> more important</font><font color="#E5E5E5"> because we do it</font>

364
00:13:48,750 --> 00:13:51,710
on a platform that<font color="#E5E5E5"> before was not even</font>

365
00:13:50,580 --> 00:13:55,770
<font color="#CCCCCC">considered impossible</font>

366
00:13:51,710 --> 00:13:57,750
so clearly since it's quite it has quite

367
00:13:55,770 --> 00:14:00,120
a high impact we<font color="#E5E5E5"> disclose we follow the</font>

368
00:13:57,750 --> 00:14:03,060
responsible disclosure and<font color="#E5E5E5"> we got the</font>

369
00:14:00,120 --> 00:14:06,030
help from<font color="#E5E5E5"> the Dutchman CSC and then we</font>

370
00:14:03,060 --> 00:14:08,130
worked closely<font color="#CCCCCC"> with Google</font><font color="#E5E5E5"> to propose</font>

371
00:14:06,030 --> 00:14:09,660
<font color="#CCCCCC">mitigation</font><font color="#E5E5E5"> and eventually both Chrome</font>

372
00:14:08,130 --> 00:14:12,300
and Firefox<font color="#CCCCCC"> release partial fixes</font>

373
00:14:09,660 --> 00:14:13,319
<font color="#E5E5E5">against the timers now again as we</font>

374
00:14:12,300 --> 00:14:15,420
<font color="#CCCCCC">mention in</font><font color="#E5E5E5"> the beginning everybody</font>

375
00:14:13,320 --> 00:14:17,910
eventually targets the timer so you

376
00:14:15,420 --> 00:14:19,469
disable the<font color="#CCCCCC"> timers but more or less</font><font color="#E5E5E5"> you</font>

377
00:14:17,910 --> 00:14:21,540
would be able<font color="#E5E5E5"> to find a new time as</font>

378
00:14:19,470 --> 00:14:25,290
probably in the future<font color="#E5E5E5"> so in conclusion</font>

379
00:14:21,540 --> 00:14:27,240
we<font color="#E5E5E5"> introduced the GPU which is a new</font>

380
00:14:25,290 --> 00:14:28,829
attack vector<font color="#E5E5E5"> and we showed that by</font>

381
00:14:27,240 --> 00:14:31,290
<font color="#E5E5E5">simply shifting the threat model from</font>

382
00:14:28,830 --> 00:14:33,720
the GPO to the from the<font color="#E5E5E5"> CPU to the GPU</font>

383
00:14:31,290 --> 00:14:36,920
<font color="#E5E5E5">we can bypass all the challenges</font><font color="#CCCCCC"> and the</font>

384
00:14:33,720 --> 00:14:39,270
mitigation<font color="#E5E5E5"> that were now in place and</font>

385
00:14:36,920 --> 00:14:41,880
the lesson needs to be learned<font color="#E5E5E5"> from this</font>

386
00:14:39,270 --> 00:14:42,870
is<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> could not really simply we</font>

387
00:14:41,880 --> 00:14:45,360
<font color="#E5E5E5">need to redefine</font><font color="#CCCCCC"> the threat model</font>

388
00:14:42,870 --> 00:14:47,670
<font color="#CCCCCC">because if we simply consider the CPU as</font>

389
00:14:45,360 --> 00:14:49,050
attack vector then<font color="#E5E5E5"> somebody else can</font>

390
00:14:47,670 --> 00:14:51,390
choose to<font color="#E5E5E5"> use something different so in</font>

391
00:14:49,050 --> 00:14:52,740
this case we chose<font color="#E5E5E5"> to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> the GPU but</font>

392
00:14:51,390 --> 00:14:55,319
next<font color="#E5E5E5"> time could be that is the signal</font>

393
00:14:52,740 --> 00:15:00,810
processor or the<font color="#CCCCCC"> on FPGA or</font><font color="#E5E5E5"> whatever</font>

394
00:14:55,320 --> 00:15:03,240
<font color="#E5E5E5">other units inside the</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> on chip so</font>

395
00:15:00,810 --> 00:15:03,839
<font color="#E5E5E5">another brief demo to show</font><font color="#CCCCCC"> you how the</font>

396
00:15:03,240 --> 00:15:05,760
<font color="#CCCCCC">deck</font><font color="#E5E5E5"> works</font>

397
00:15:03,840 --> 00:15:07,560
so on the left<font color="#E5E5E5"> side here you have</font><font color="#CCCCCC"> a</font>

398
00:15:05,760 --> 00:15:09,870
terminal which basically represent the

399
00:15:07,560 --> 00:15:12,000
ground<font color="#E5E5E5"> truth of what happens on the</font>

400
00:15:09,870 --> 00:15:14,340
phone<font color="#E5E5E5"> so what I'm trying</font><font color="#CCCCCC"> to do is lick</font>

401
00:15:12,000 --> 00:15:17,040
the base address<font color="#E5E5E5"> of a library</font><font color="#CCCCCC"> in the</font>

402
00:15:14,340 --> 00:15:18,990
Firefox browser<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> side we</font>

403
00:15:17,040 --> 00:15:21,680
<font color="#CCCCCC">have</font><font color="#E5E5E5"> the remote console so we see what's</font>

404
00:15:18,990 --> 00:15:26,550
happening on<font color="#E5E5E5"> the phone so we start by</font>

405
00:15:21,680 --> 00:15:29,189
allocating<font color="#CCCCCC"> memory as we said before and</font>

406
00:15:26,550 --> 00:15:32,520
the<font color="#E5E5E5"> rest I was just looking for for the</font>

407
00:15:29,190 --> 00:15:34,950
base address<font color="#E5E5E5"> now once we</font><font color="#CCCCCC"> found it we</font>

408
00:15:32,520 --> 00:15:35,680
look for one once you<font color="#E5E5E5"> find the memory we</font>

409
00:15:34,950 --> 00:15:37,000
just look for

410
00:15:35,680 --> 00:15:39,699
<font color="#E5E5E5">huge chunks and eventually we start</font>

411
00:15:37,000 --> 00:15:43,270
templating<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we look for the to</font>

412
00:15:39,700 --> 00:15:44,440
exploit<font color="#CCCCCC"> will be flips then once</font><font color="#E5E5E5"> they get</font>

413
00:15:43,270 --> 00:15:48,970
<font color="#E5E5E5">the</font><font color="#CCCCCC"> business we</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to release and</font>

414
00:15:44,440 --> 00:15:51,180
reuse the memory and<font color="#CCCCCC"> eventually we start</font>

415
00:15:48,970 --> 00:15:54,850
exploiting it by a<font color="#E5E5E5"> trigger to business</font>

416
00:15:51,180 --> 00:15:56,219
<font color="#E5E5E5">now this is speed up it</font><font color="#CCCCCC"> actually runs in</font>

417
00:15:54,850 --> 00:15:59,649
<font color="#E5E5E5">around two minutes</font><font color="#CCCCCC"> but as you can see</font>

418
00:15:56,220 --> 00:16:02,070
probably not sure you can but you can

419
00:15:59,649 --> 00:16:05,200
see<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> get the same</font>

420
00:16:02,070 --> 00:16:07,779
pointer from<font color="#E5E5E5"> the ground truth and also</font>

421
00:16:05,200 --> 00:16:13,959
from<font color="#CCCCCC"> our exploit and we can lick the the</font>

422
00:16:07,779 --> 00:16:15,580
header of<font color="#E5E5E5"> death binary so this is it</font>

423
00:16:13,959 --> 00:16:19,209
if you have any question<font color="#CCCCCC"> feel free to</font>

424
00:16:15,580 --> 00:16:21,010
ask<font color="#E5E5E5"> and if you have any doubts and you</font>

425
00:16:19,209 --> 00:16:22,899
<font color="#E5E5E5">want to have more information about the</font>

426
00:16:21,010 --> 00:16:33,459
exploit or the paper you can find it on

427
00:16:22,899 --> 00:16:35,320
our web<font color="#CCCCCC"> page</font><font color="#E5E5E5"> thanks</font><font color="#CCCCCC"> Pietro</font><font color="#E5E5E5"> again if you</font>

428
00:16:33,459 --> 00:16:36,939
have<font color="#CCCCCC"> questions please</font><font color="#E5E5E5"> approach one of</font>

429
00:16:35,320 --> 00:16:41,740
<font color="#E5E5E5">the microphones and state your name and</font>

430
00:16:36,940 --> 00:16:42,970
affiliation please<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> so I got</font>

431
00:16:41,740 --> 00:16:44,470
<font color="#E5E5E5">one question</font><font color="#CCCCCC"> for you and</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> about</font>

432
00:16:42,970 --> 00:16:46,450
I'm in your paper you<font color="#CCCCCC"> talked about plans</font>

433
00:16:44,470 --> 00:16:48,670
for mitigations<font color="#E5E5E5"> yeah</font>

434
00:16:46,450 --> 00:16:50,650
you tell<font color="#E5E5E5"> us just tell us a little bit</font>

435
00:16:48,670 --> 00:16:52,150
<font color="#E5E5E5">more about what's in store and</font><font color="#CCCCCC"> maybe</font>

436
00:16:50,650 --> 00:16:56,470
some of the experiences with the

437
00:16:52,150 --> 00:16:58,060
manufacturers so well as of now<font color="#CCCCCC"> I own</font>

438
00:16:56,470 --> 00:16:59,290
the<font color="#E5E5E5"> paper we suggest</font><font color="#CCCCCC"> actually we are</font><font color="#E5E5E5"> the</font>

439
00:16:58,060 --> 00:17:01,719
first one<font color="#E5E5E5"> to suggest to disable the time</font>

440
00:16:59,290 --> 00:17:03,040
as a<font color="#E5E5E5"> short-term mitigation but we don't</font>

441
00:17:01,720 --> 00:17:06,130
believe that's<font color="#CCCCCC"> actually a long-term</font>

442
00:17:03,040 --> 00:17:09,099
solution because again they<font color="#CCCCCC"> disable them</font>

443
00:17:06,130 --> 00:17:12,069
before we found<font color="#E5E5E5"> new one and we can keep</font>

444
00:17:09,099 --> 00:17:16,270
on<font color="#CCCCCC"> going with this game for a runner</font><font color="#E5E5E5"> as</font>

445
00:17:12,069 --> 00:17:17,829
of now there is<font color="#E5E5E5"> no</font><font color="#CCCCCC"> solution but we've</font>

446
00:17:16,270 --> 00:17:19,839
been talking<font color="#CCCCCC"> with Google on possible</font>

447
00:17:17,829 --> 00:17:28,270
<font color="#CCCCCC">mitigation but I'm</font><font color="#E5E5E5"> not sure I can talk</font>

448
00:17:19,839 --> 00:17:30,340
<font color="#CCCCCC">about</font><font color="#E5E5E5"> it now</font><font color="#CCCCCC"> next paper</font><font color="#E5E5E5"> all right he's a</font>

449
00:17:28,270 --> 00:17:34,740
stretch<font color="#E5E5E5"> no that was a stretch not a hand</font>

450
00:17:30,340 --> 00:17:36,790
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> last call for the microphone but</font>

451
00:17:34,740 --> 00:17:38,680
<font color="#E5E5E5">thanks</font><font color="#CCCCCC"> again pho</font><font color="#E5E5E5"> thanks for your</font>

452
00:17:36,790 --> 00:17:42,289
presentation<font color="#CCCCCC"> and the demo</font>

453
00:17:38,680 --> 00:17:42,289
[Applause]

