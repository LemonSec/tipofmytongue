1
00:00:07,570 --> 00:00:13,150
thank you<font color="#E5E5E5"> for the introduction</font><font color="#CCCCCC"> I guess</font>

2
00:00:11,200 --> 00:00:14,450
<font color="#E5E5E5">my talk is the last thing that's</font>

3
00:00:13,150 --> 00:00:16,430
separating

4
00:00:14,450 --> 00:00:19,700
reception<font color="#E5E5E5"> so I'll try to keep</font><font color="#CCCCCC"> it</font>

5
00:00:16,430 --> 00:00:22,540
relatively high level<font color="#CCCCCC"> I won't try to</font><font color="#E5E5E5"> go</font>

6
00:00:19,700 --> 00:00:26,419
into details and<font color="#E5E5E5"> will refer to</font><font color="#CCCCCC"> the paper</font>

7
00:00:22,540 --> 00:00:28,340
<font color="#CCCCCC">so this</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> was led by the</font><font color="#E5E5E5"> New</font>

8
00:00:26,419 --> 00:00:30,759
Jerseyans of<font color="#E5E5E5"> Technology cybersecurity</font>

9
00:00:28,340 --> 00:00:33,620
research<font color="#E5E5E5"> center which is an active and</font>

10
00:00:30,759 --> 00:00:36,290
<font color="#E5E5E5">growing research center and we</font>

11
00:00:33,620 --> 00:00:41,030
extensively collaborate with DARPA<font color="#CCCCCC"> ir</font>

12
00:00:36,290 --> 00:00:44,540
defense<font color="#CCCCCC"> industry startups a major</font>

13
00:00:41,030 --> 00:00:46,490
research area of our Center is<font color="#CCCCCC"> lettuce</font>

14
00:00:44,540 --> 00:00:51,860
based cryptography which<font color="#E5E5E5"> is a form of</font>

15
00:00:46,490 --> 00:00:54,350
post quantum cryptography<font color="#E5E5E5"> and the all</font>

16
00:00:51,860 --> 00:00:57,620
our research is centered around<font color="#E5E5E5"> a</font>

17
00:00:54,350 --> 00:00:59,600
palisade library so palisade library is

18
00:00:57,620 --> 00:01:02,269
a publicly available library that

19
00:00:59,600 --> 00:01:04,790
incorporates different<font color="#E5E5E5"> both fundamental</font>

20
00:01:02,270 --> 00:01:08,540
blocks and cryptographic protocols based

21
00:01:04,790 --> 00:01:10,700
<font color="#E5E5E5">on</font><font color="#CCCCCC"> Larry's cryptography</font><font color="#E5E5E5"> it started from</font>

22
00:01:08,540 --> 00:01:13,909
the DARPA<font color="#E5E5E5"> proceed program focusing and</font>

23
00:01:10,700 --> 00:01:17,630
fully homomorphic encryption<font color="#E5E5E5"> and now</font>

24
00:01:13,909 --> 00:01:19,420
we're extending it<font color="#E5E5E5"> by the work that's</font>

25
00:01:17,630 --> 00:01:22,789
being done for<font color="#E5E5E5"> the DARPA safer program</font>

26
00:01:19,420 --> 00:01:25,819
<font color="#E5E5E5">the library</font><font color="#CCCCCC"> currently includes several</font>

27
00:01:22,789 --> 00:01:29,329
major homomorphic encryption scheme such

28
00:01:25,819 --> 00:01:31,459
as beefy<font color="#E5E5E5"> BGP and can be used</font><font color="#CCCCCC"> not just</font>

29
00:01:29,329 --> 00:01:34,880
for program application let's<font color="#E5E5E5"> discuss</font>

30
00:01:31,459 --> 00:01:37,899
here<font color="#CCCCCC"> but can be used for protocols such</font>

31
00:01:34,880 --> 00:01:40,548
as<font color="#E5E5E5"> proxy encryption for example so this</font>

32
00:01:37,899 --> 00:01:43,729
<font color="#E5E5E5">our implementation partners and</font>

33
00:01:40,549 --> 00:01:47,630
collaborators are a might even not like

34
00:01:43,729 --> 00:01:49,069
Anton<font color="#E5E5E5"> Nathan UCSD</font><font color="#CCCCCC"> daniela me chancho mr.</font>

35
00:01:47,630 --> 00:01:51,619
<font color="#E5E5E5">politic and a couple of other</font>

36
00:01:49,069 --> 00:01:55,090
universities and<font color="#E5E5E5"> will work closely with</font>

37
00:01:51,619 --> 00:01:58,159
<font color="#E5E5E5">Raytheon BBN with IBM</font><font color="#CCCCCC"> Research</font><font color="#E5E5E5"> Hawaii</font>

38
00:01:55,090 --> 00:02:00,829
with duality<font color="#E5E5E5"> technologists and several</font>

39
00:01:58,159 --> 00:02:03,740
other companies<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> library is</font>

40
00:02:00,829 --> 00:02:06,559
distributed using<font color="#E5E5E5"> BSD to license</font><font color="#CCCCCC"> it's a</font>

41
00:02:03,740 --> 00:02:11,510
<font color="#CCCCCC">cross platform</font><font color="#E5E5E5"> it supports Linux</font><font color="#CCCCCC"> Windows</font>

42
00:02:06,560 --> 00:02:15,560
so has<font color="#CCCCCC"> chorus platform support the work</font>

43
00:02:11,510 --> 00:02:17,870
that<font color="#E5E5E5"> I</font><font color="#CCCCCC"> discuss in this talk support it</font>

44
00:02:15,560 --> 00:02:19,430
<font color="#E5E5E5">was supported by the DARPA</font><font color="#CCCCCC"> Safe</font><font color="#E5E5E5"> Work</font>

45
00:02:17,870 --> 00:02:21,200
program it's actually<font color="#CCCCCC"> still being</font>

46
00:02:19,430 --> 00:02:25,700
supported by<font color="#CCCCCC"> the DARPA</font><font color="#E5E5E5"> program</font><font color="#CCCCCC"> it</font>

47
00:02:21,200 --> 00:02:28,100
started in 2015<font color="#E5E5E5"> and essentially it's a</font>

48
00:02:25,700 --> 00:02:30,619
sequel<font color="#E5E5E5"> of work of the DARPA</font>

49
00:02:28,100 --> 00:02:33,470
<font color="#CCCCCC">proceeded work which gave us several</font>

50
00:02:30,620 --> 00:02:37,190
homomorphic encryption schemes<font color="#E5E5E5"> that gave</font>

51
00:02:33,470 --> 00:02:40,580
us some<font color="#E5E5E5"> new results in multi-party</font>

52
00:02:37,190 --> 00:02:43,460
computations so that<font color="#E5E5E5"> particular program</font>

53
00:02:40,580 --> 00:02:45,830
dealt with<font color="#E5E5E5"> encrypting the data and</font>

54
00:02:43,460 --> 00:02:48,650
performing computations on it the DARPA

55
00:02:45,830 --> 00:02:51,050
<font color="#E5E5E5">safe</font><font color="#CCCCCC"> wear program deals with encrypting</font>

56
00:02:48,650 --> 00:02:53,690
the computations and<font color="#E5E5E5"> while the data may</font>

57
00:02:51,050 --> 00:02:55,580
stay<font color="#CCCCCC"> in the clear and the goal of this</font>

58
00:02:53,690 --> 00:02:57,200
<font color="#CCCCCC">program</font><font color="#E5E5E5"> is to build practical</font>

59
00:02:55,580 --> 00:02:59,750
cryptographic program obfuscation

60
00:02:57,200 --> 00:03:02,149
capabilities that would serve<font color="#CCCCCC"> department</font>

61
00:02:59,750 --> 00:03:04,010
of<font color="#CCCCCC"> defense needs</font><font color="#E5E5E5"> and when I say</font>

62
00:03:02,150 --> 00:03:06,710
cryptographic program<font color="#E5E5E5"> at fist occasion</font>

63
00:03:04,010 --> 00:03:08,179
the idea is<font color="#CCCCCC"> that these are the protocols</font>

64
00:03:06,710 --> 00:03:09,980
<font color="#CCCCCC">that are based either on standard</font>

65
00:03:08,180 --> 00:03:13,250
assumptions or assumptions that<font color="#E5E5E5"> are</font>

66
00:03:09,980 --> 00:03:14,989
close to standard assumptions versus the

67
00:03:13,250 --> 00:03:16,820
heuristic approach<font color="#E5E5E5"> that have been used</font>

68
00:03:14,990 --> 00:03:19,720
in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> industry</font><font color="#E5E5E5"> for many decades and</font>

69
00:03:16,820 --> 00:03:22,220
some<font color="#E5E5E5"> of the security models that are</font>

70
00:03:19,720 --> 00:03:23,900
explored as part of the DARPA safer

71
00:03:22,220 --> 00:03:25,880
program<font color="#E5E5E5"> including distinguishability</font>

72
00:03:23,900 --> 00:03:28,370
obfuscation virtual black box approach

73
00:03:25,880 --> 00:03:30,740
<font color="#E5E5E5">token based obfuscation and some other</font>

74
00:03:28,370 --> 00:03:34,610
techniques<font color="#E5E5E5"> that were discussed today for</font>

75
00:03:30,740 --> 00:03:36,920
example<font color="#CCCCCC"> so the motivating applications</font>

76
00:03:34,610 --> 00:03:38,900
for the DARPA safe<font color="#CCCCCC"> wear programs are</font>

77
00:03:36,920 --> 00:03:40,959
linear classifiers<font color="#CCCCCC"> for instance for</font>

78
00:03:38,900 --> 00:03:44,510
automatic target<font color="#CCCCCC"> recognition systems</font>

79
00:03:40,960 --> 00:03:46,340
nonlinear classifiers<font color="#CCCCCC"> linear and</font>

80
00:03:44,510 --> 00:03:49,480
<font color="#E5E5E5">nonlinear filters</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> signal</font><font color="#CCCCCC"> processing</font>

81
00:03:46,340 --> 00:03:51,880
such as correlation filters for example

82
00:03:49,480 --> 00:03:57,140
<font color="#CCCCCC">supervisory control and data acquisition</font>

83
00:03:51,880 --> 00:04:01,579
<font color="#E5E5E5">control systems the particular problem</font>

84
00:03:57,140 --> 00:04:03,589
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we tackled in this work is related</font>

85
00:04:01,580 --> 00:04:05,500
to linear classifiers<font color="#E5E5E5"> and specifically</font>

86
00:04:03,590 --> 00:04:09,680
<font color="#E5E5E5">we work with something that's called a</font>

87
00:04:05,500 --> 00:04:11,890
conjunction pattern<font color="#E5E5E5"> and the where this</font>

88
00:04:09,680 --> 00:04:15,470
can<font color="#E5E5E5"> be used one of the possible</font>

89
00:04:11,890 --> 00:04:19,339
applications is image recognition<font color="#E5E5E5"> if we</font>

90
00:04:15,470 --> 00:04:22,790
wanted to<font color="#CCCCCC"> determine if basically the</font>

91
00:04:19,339 --> 00:04:25,400
certain image is close enough<font color="#E5E5E5"> to a</font>

92
00:04:22,790 --> 00:04:27,230
certain<font color="#E5E5E5"> pattern and certain</font><font color="#CCCCCC"> extra</font>

93
00:04:25,400 --> 00:04:30,950
<font color="#E5E5E5">certain features are extracted and</font><font color="#CCCCCC"> then</font>

94
00:04:27,230 --> 00:04:33,770
<font color="#E5E5E5">they're compared and the security goal</font>

95
00:04:30,950 --> 00:04:36,560
of<font color="#E5E5E5"> this is we perform this</font><font color="#CCCCCC"> efficient</font>

96
00:04:33,770 --> 00:04:39,020
<font color="#CCCCCC">than this obfuscated program or</font>

97
00:04:36,560 --> 00:04:39,720
classifier in this case is distributed

98
00:04:39,020 --> 00:04:43,049
and can

99
00:04:39,720 --> 00:04:46,220
used and it's supposed to<font color="#CCCCCC"> be secure so</font>

100
00:04:43,050 --> 00:04:49,190
the<font color="#E5E5E5"> particular solution</font><font color="#CCCCCC"> that we</font>

101
00:04:46,220 --> 00:04:54,800
discussed in the paper<font color="#E5E5E5"> in detail</font>

102
00:04:49,190 --> 00:04:58,500
<font color="#CCCCCC">includes</font><font color="#E5E5E5"> the three standard steps of any</font>

103
00:04:54,800 --> 00:05:00,960
efficient protocol<font color="#E5E5E5"> so the first step is</font>

104
00:04:58,500 --> 00:05:03,150
key<font color="#E5E5E5"> generation which of course</font><font color="#CCCCCC"> includes</font>

105
00:05:00,960 --> 00:05:06,359
some setup of parameters<font color="#CCCCCC"> the initial</font>

106
00:05:03,150 --> 00:05:08,400
setting of parameters<font color="#CCCCCC"> and obfuscation</font>

107
00:05:06,360 --> 00:05:10,740
so the key generation<font color="#E5E5E5"> and obfuscation</font>

108
00:05:08,400 --> 00:05:14,190
<font color="#CCCCCC">are considered</font><font color="#E5E5E5"> the offline stages so</font>

109
00:05:10,740 --> 00:05:17,100
certain keys are<font color="#CCCCCC"> generated</font><font color="#E5E5E5"> and then</font>

110
00:05:14,190 --> 00:05:19,230
those keys are used to<font color="#CCCCCC"> obfuscate to</font>

111
00:05:17,100 --> 00:05:21,390
<font color="#E5E5E5">produce an obfuscated program and then</font>

112
00:05:19,230 --> 00:05:24,170
that obfuscated program is<font color="#E5E5E5"> sent</font>

113
00:05:21,390 --> 00:05:27,620
somewhere where it can<font color="#CCCCCC"> be used</font><font color="#E5E5E5"> for</font>

114
00:05:24,170 --> 00:05:32,460
executions<font color="#CCCCCC"> think of it</font><font color="#E5E5E5"> as a black</font><font color="#CCCCCC"> box</font>

115
00:05:27,620 --> 00:05:35,010
<font color="#E5E5E5">then their online stage</font><font color="#CCCCCC"> in the online</font>

116
00:05:32,460 --> 00:05:37,799
stage you load the program<font color="#E5E5E5"> for example</font>

117
00:05:35,010 --> 00:05:40,500
<font color="#CCCCCC">in the memory</font><font color="#E5E5E5"> and perform an evaluation</font>

118
00:05:37,800 --> 00:05:42,900
<font color="#E5E5E5">and the result of the evaluation should</font>

119
00:05:40,500 --> 00:05:45,930
<font color="#CCCCCC">be the same as if you worked</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> the</font>

120
00:05:42,900 --> 00:05:47,549
program in the clear<font color="#CCCCCC"> the main</font><font color="#E5E5E5"> idea is</font><font color="#CCCCCC"> to</font>

121
00:05:45,930 --> 00:05:49,650
<font color="#E5E5E5">make sure that</font><font color="#CCCCCC"> there's not</font><font color="#E5E5E5"> no</font>

122
00:05:47,550 --> 00:05:54,210
information can<font color="#E5E5E5"> be derived from the</font>

123
00:05:49,650 --> 00:05:56,280
obfuscated<font color="#E5E5E5"> program</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> in addition to</font>

124
00:05:54,210 --> 00:05:58,620
<font color="#E5E5E5">what you would learn by input-output</font>

125
00:05:56,280 --> 00:06:04,760
analysis<font color="#E5E5E5"> by feeling certain inputs and</font>

126
00:05:58,620 --> 00:06:06,900
getting outputs so<font color="#CCCCCC"> we'll conjunction</font>

127
00:06:04,760 --> 00:06:09,630
obfuscation that<font color="#CCCCCC"> is discussed in</font><font color="#E5E5E5"> the</font>

128
00:06:06,900 --> 00:06:13,469
<font color="#CCCCCC">paper you can think of</font><font color="#E5E5E5"> it as</font><font color="#CCCCCC"> a sequence</font>

129
00:06:09,630 --> 00:06:17,330
of bits with<font color="#CCCCCC"> wildcards and the use of</font>

130
00:06:13,470 --> 00:06:20,360
wildcards allows us to support<font color="#E5E5E5"> multiple</font>

131
00:06:17,330 --> 00:06:24,300
<font color="#E5E5E5">accepting</font><font color="#CCCCCC"> states so if we think</font><font color="#E5E5E5"> of it of</font>

132
00:06:20,360 --> 00:06:26,669
this conjunction<font color="#E5E5E5"> a problem as a finite</font>

133
00:06:24,300 --> 00:06:28,410
<font color="#CCCCCC">state machine</font><font color="#E5E5E5"> so multiple accepting</font>

134
00:06:26,669 --> 00:06:31,109
states are supported<font color="#E5E5E5"> which is more</font>

135
00:06:28,410 --> 00:06:33,180
<font color="#E5E5E5">complex than the traditional point</font>

136
00:06:31,110 --> 00:06:36,180
function application where<font color="#E5E5E5"> there is a</font>

137
00:06:33,180 --> 00:06:38,340
single accepting state and the<font color="#CCCCCC"> wildcard</font>

138
00:06:36,180 --> 00:06:43,890
is what creates the possibilities<font color="#CCCCCC"> for</font>

139
00:06:38,340 --> 00:06:48,119
different paths the state transitions<font color="#E5E5E5"> in</font>

140
00:06:43,890 --> 00:06:49,710
this model are<font color="#E5E5E5"> encoded as special types</font>

141
00:06:48,120 --> 00:06:51,690
of matrices in our case those<font color="#CCCCCC"> are</font>

142
00:06:49,710 --> 00:06:53,190
matrices<font color="#E5E5E5"> of ring elements or matrices of</font>

143
00:06:51,690 --> 00:06:55,800
polynomials

144
00:06:53,190 --> 00:06:58,380
and then there is a<font color="#E5E5E5"> certain</font><font color="#CCCCCC"> process to</font>

145
00:06:55,800 --> 00:07:00,660
load those matrices<font color="#CCCCCC"> when the program</font><font color="#E5E5E5"> is</font>

146
00:06:58,380 --> 00:07:03,050
executed<font color="#CCCCCC"> so there is certainly an</font>

147
00:07:00,660 --> 00:07:05,850
expansion<font color="#E5E5E5"> that is involved in</font>

148
00:07:03,050 --> 00:07:09,420
representing<font color="#E5E5E5"> these individual state</font>

149
00:07:05,850 --> 00:07:12,530
transitions as matrices<font color="#E5E5E5"> so the end</font>

150
00:07:09,420 --> 00:07:16,470
result<font color="#CCCCCC"> is if the certain pattern or</font>

151
00:07:12,530 --> 00:07:21,929
matches<font color="#E5E5E5"> then we it returns</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> otherwise</font>

152
00:07:16,470 --> 00:07:25,320
<font color="#E5E5E5">it returns</font><font color="#CCCCCC"> a non match</font><font color="#E5E5E5"> so to illustrate</font>

153
00:07:21,930 --> 00:07:29,010
<font color="#E5E5E5">the</font><font color="#CCCCCC"> idea of how those matrices are</font>

154
00:07:25,320 --> 00:07:30,390
encoded so for each possible<font color="#CCCCCC"> beat in the</font>

155
00:07:29,010 --> 00:07:34,380
pattern<font color="#E5E5E5"> for each possible state</font>

156
00:07:30,390 --> 00:07:36,479
transition we generate those matrices

157
00:07:34,380 --> 00:07:39,870
<font color="#E5E5E5">using trapdoor functions</font><font color="#CCCCCC"> so ladies</font>

158
00:07:36,480 --> 00:07:42,810
traveler functions and then afterwards

159
00:07:39,870 --> 00:07:44,640
<font color="#E5E5E5">we feed a certain input like in this</font>

160
00:07:42,810 --> 00:07:47,430
<font color="#E5E5E5">case</font><font color="#CCCCCC"> one zero zero</font><font color="#E5E5E5"> just a three beat</font>

161
00:07:44,640 --> 00:07:51,659
pattern with<font color="#E5E5E5"> very small program for</font>

162
00:07:47,430 --> 00:07:55,260
simplicity<font color="#E5E5E5"> and then specific matrices</font>

163
00:07:51,660 --> 00:07:58,110
are selected from the program<font color="#E5E5E5"> and then</font>

164
00:07:55,260 --> 00:07:59,820
<font color="#E5E5E5">we use a technique that's based on</font>

165
00:07:58,110 --> 00:08:00,510
multilinear maps<font color="#E5E5E5"> so in this particular</font>

166
00:07:59,820 --> 00:08:04,770
<font color="#CCCCCC">case</font>

167
00:08:00,510 --> 00:08:07,640
GGH<font color="#E5E5E5"> 15 directed encoding approach to</font>

168
00:08:04,770 --> 00:08:11,580
perform the evaluation using<font color="#E5E5E5"> those</font>

169
00:08:07,640 --> 00:08:15,390
random matrices<font color="#E5E5E5"> and in this case we</font>

170
00:08:11,580 --> 00:08:19,440
compute two products<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then these two</font>

171
00:08:15,390 --> 00:08:21,419
products are<font color="#E5E5E5"> used to produce the final</font>

172
00:08:19,440 --> 00:08:24,950
<font color="#CCCCCC">result and the final</font><font color="#E5E5E5"> the final</font>

173
00:08:21,419 --> 00:08:27,599
<font color="#CCCCCC">evaluation</font><font color="#E5E5E5"> uses the public</font><font color="#CCCCCC"> key during</font>

174
00:08:24,950 --> 00:08:30,599
the obfuscation protocol we obviously

175
00:08:27,600 --> 00:08:35,909
<font color="#E5E5E5">use the a private key</font><font color="#CCCCCC"> so we use the trap</font>

176
00:08:30,600 --> 00:08:37,440
<font color="#CCCCCC">doors the security model of this</font>

177
00:08:35,909 --> 00:08:39,900
<font color="#E5E5E5">particular conjunction obfuscation</font>

178
00:08:37,440 --> 00:08:41,729
protocol is based<font color="#E5E5E5"> on so-called</font>

179
00:08:39,900 --> 00:08:43,468
<font color="#E5E5E5">distributional virtual black box</font>

180
00:08:41,729 --> 00:08:45,810
approach<font color="#E5E5E5"> so in other words you cannot</font>

181
00:08:43,469 --> 00:08:47,940
learn anything more than from the

182
00:08:45,810 --> 00:08:50,489
input-output analysis with here with<font color="#E5E5E5"> an</font>

183
00:08:47,940 --> 00:08:53,850
additional<font color="#CCCCCC"> requirement of distributional</font>

184
00:08:50,490 --> 00:08:57,360
analysis in this particular case the

185
00:08:53,850 --> 00:08:59,190
assumption that was used was not<font color="#E5E5E5"> a pure</font>

186
00:08:57,360 --> 00:09:01,830
standard assumption such as learning

187
00:08:59,190 --> 00:09:03,690
<font color="#E5E5E5">with errors but it was a certain variant</font>

188
00:09:01,830 --> 00:09:06,430
which at this<font color="#E5E5E5"> moment is still believed</font>

189
00:09:03,690 --> 00:09:09,460
to<font color="#E5E5E5"> be secure and</font><font color="#CCCCCC"> tropic ring</font>

190
00:09:06,430 --> 00:09:11,079
with errors assumption<font color="#E5E5E5"> and the attack</font>

191
00:09:09,460 --> 00:09:16,000
models that we actually<font color="#E5E5E5"> discuss in the</font>

192
00:09:11,080 --> 00:09:18,850
paper that<font color="#E5E5E5"> can be used to break this are</font>

193
00:09:16,000 --> 00:09:23,800
based on two approaches<font color="#E5E5E5"> so the first</font>

194
00:09:18,850 --> 00:09:27,550
approach<font color="#E5E5E5"> is</font><font color="#CCCCCC"> is based on going</font><font color="#E5E5E5"> on</font>

195
00:09:23,800 --> 00:09:29,920
performing extensive<font color="#E5E5E5"> on performing</font>

196
00:09:27,550 --> 00:09:32,260
exhaustive search of inputs and<font color="#E5E5E5"> outputs</font>

197
00:09:29,920 --> 00:09:35,530
<font color="#CCCCCC">and trying to learn</font><font color="#E5E5E5"> the pattern in this</font>

198
00:09:32,260 --> 00:09:39,250
<font color="#E5E5E5">case through that analysis and in this</font>

199
00:09:35,530 --> 00:09:42,490
particular<font color="#CCCCCC"> approach</font><font color="#E5E5E5"> essentially does not</font>

200
00:09:39,250 --> 00:09:44,050
care which obfuscation protocol was used

201
00:09:42,490 --> 00:09:46,750
to produce this we're<font color="#CCCCCC"> just using</font><font color="#E5E5E5"> the</font>

202
00:09:44,050 --> 00:09:49,540
definition<font color="#CCCCCC"> of virtual blackbox</font><font color="#E5E5E5"> and the</font>

203
00:09:46,750 --> 00:09:52,240
second attack model is based<font color="#E5E5E5"> on solving</font>

204
00:09:49,540 --> 00:09:54,490
<font color="#E5E5E5">GLaDOS problems in this case so we have</font>

205
00:09:52,240 --> 00:09:58,930
the encoder we have the matrices<font color="#E5E5E5"> of ring</font>

206
00:09:54,490 --> 00:10:02,260
elements and then we<font color="#CCCCCC"> try</font><font color="#E5E5E5"> to solve a</font>

207
00:09:58,930 --> 00:10:04,180
<font color="#E5E5E5">certain number of latest problems to</font>

208
00:10:02,260 --> 00:10:06,300
come<font color="#E5E5E5"> to the solution sometimes</font><font color="#CCCCCC"> there is</font>

209
00:10:04,180 --> 00:10:10,150
a you can combine<font color="#E5E5E5"> those two techniques</font>

210
00:10:06,300 --> 00:10:12,670
so the word fact the work factor<font color="#E5E5E5"> in this</font>

211
00:10:10,150 --> 00:10:14,230
case depends on<font color="#E5E5E5"> the number</font><font color="#CCCCCC"> of wild cards</font>

212
00:10:12,670 --> 00:10:18,790
that are allowed in the conjunction

213
00:10:14,230 --> 00:10:21,130
pattern<font color="#E5E5E5"> and the goal of</font><font color="#CCCCCC"> this analysis is</font>

214
00:10:18,790 --> 00:10:23,740
to<font color="#E5E5E5"> find the minimum work factor for both</font>

215
00:10:21,130 --> 00:10:27,360
virtual<font color="#E5E5E5"> blackbox model distributed</font>

216
00:10:23,740 --> 00:10:31,360
virtual blocks model and<font color="#E5E5E5"> lattice attacks</font>

217
00:10:27,360 --> 00:10:35,080
<font color="#CCCCCC">so this is where we started</font><font color="#E5E5E5"> so the our</font>

218
00:10:31,360 --> 00:10:37,270
very first prototype for which basically

219
00:10:35,080 --> 00:10:39,070
was interpolated to a<font color="#E5E5E5"> 32 bit pattern</font>

220
00:10:37,270 --> 00:10:43,140
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that could be considered</font><font color="#E5E5E5"> more</font>

221
00:10:39,070 --> 00:10:46,480
product<font color="#CCCCCC"> I mean useful had the following</font>

222
00:10:43,140 --> 00:10:48,100
<font color="#CCCCCC">metrics so key generation</font><font color="#E5E5E5"> time would</font>

223
00:10:46,480 --> 00:10:49,990
<font color="#E5E5E5">take three</font><font color="#CCCCCC"> years I</font><font color="#E5E5E5"> mean this is an</font>

224
00:10:48,100 --> 00:10:51,730
<font color="#E5E5E5">estimate based</font><font color="#CCCCCC"> on a three bit pattern</font>

225
00:10:49,990 --> 00:10:54,760
that we had that<font color="#E5E5E5"> we presented to DARPA</font>

226
00:10:51,730 --> 00:10:57,220
<font color="#E5E5E5">in the initial</font><font color="#CCCCCC"> pie meeting then the key</font>

227
00:10:54,760 --> 00:10:58,540
size would<font color="#CCCCCC"> have to be 15 petabytes so</font>

228
00:10:57,220 --> 00:11:01,930
this is where we were<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> beginning</font>

229
00:10:58,540 --> 00:11:03,610
of 2016<font color="#E5E5E5"> just to give an idea then the</font>

230
00:11:01,930 --> 00:11:06,640
<font color="#E5E5E5">program size would</font><font color="#CCCCCC"> have to be six</font>

231
00:11:03,610 --> 00:11:09,430
hundred terabytes<font color="#CCCCCC"> the obfuscation time</font>

232
00:11:06,640 --> 00:11:11,890
<font color="#E5E5E5">would be 70 hours in</font><font color="#CCCCCC"> evaluation time</font>

233
00:11:09,430 --> 00:11:15,130
<font color="#E5E5E5">would be nine hours and this is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> for a</font>

234
00:11:11,890 --> 00:11:17,680
<font color="#CCCCCC">32-bit pattern so obviously this was far</font>

235
00:11:15,130 --> 00:11:19,930
away<font color="#CCCCCC"> from</font><font color="#E5E5E5"> being practical so by</font>

236
00:11:17,680 --> 00:11:22,149
September of 2017

237
00:11:19,930 --> 00:11:24,420
so<font color="#E5E5E5"> year-and-a-half</font><font color="#CCCCCC"> later a</font><font color="#E5E5E5"> little bit</font>

238
00:11:22,149 --> 00:11:28,480
more than that we were able<font color="#E5E5E5"> to</font>

239
00:11:24,420 --> 00:11:30,729
<font color="#CCCCCC">significantly reduce</font><font color="#E5E5E5"> the all those</font>

240
00:11:28,480 --> 00:11:33,160
<font color="#E5E5E5">metrics specifically</font><font color="#CCCCCC"> a key generation</font>

241
00:11:30,730 --> 00:11:36,279
<font color="#E5E5E5">time and key size became not a non-issue</font>

242
00:11:33,160 --> 00:11:39,640
<font color="#CCCCCC">as compared to</font><font color="#E5E5E5"> the original</font><font color="#CCCCCC"> design we</font>

243
00:11:36,279 --> 00:11:42,339
were able<font color="#E5E5E5"> to reduce the program size to</font>

244
00:11:39,640 --> 00:11:44,680
<font color="#E5E5E5">five to roughly six gigabytes the</font>

245
00:11:42,339 --> 00:11:46,690
<font color="#E5E5E5">obfuscation time</font><font color="#CCCCCC"> to 6.2 minutes and</font>

246
00:11:44,680 --> 00:11:48,550
again the obfuscation time is something

247
00:11:46,690 --> 00:11:51,220
<font color="#CCCCCC">that can</font><font color="#E5E5E5"> be considered an offline</font>

248
00:11:48,550 --> 00:11:55,839
operation and the evaluation time<font color="#E5E5E5"> which</font>

249
00:11:51,220 --> 00:11:58,240
is the online<font color="#E5E5E5"> operation</font><font color="#CCCCCC"> went down</font><font color="#E5E5E5"> to 32</font>

250
00:11:55,839 --> 00:12:02,470
milliseconds so 32 milliseconds versus

251
00:11:58,240 --> 00:12:04,350
<font color="#CCCCCC">nine hours so we had several orders of</font>

252
00:12:02,470 --> 00:12:07,870
magnitude improvements in various

253
00:12:04,350 --> 00:12:10,510
parameters and most of our<font color="#E5E5E5"> paper</font>

254
00:12:07,870 --> 00:12:12,790
discusses how we got to that<font color="#CCCCCC"> point how</font>

255
00:12:10,510 --> 00:12:16,110
we were able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> improve</font><font color="#CCCCCC"> the original</font>

256
00:12:12,790 --> 00:12:21,160
construction<font color="#E5E5E5"> and a lot of our</font>

257
00:12:16,110 --> 00:12:23,290
optimizations were around the latest

258
00:12:21,160 --> 00:12:27,219
trapdoor constructions and the latest

259
00:12:23,290 --> 00:12:31,000
trapdoor pre image<font color="#E5E5E5"> sampling so</font><font color="#CCCCCC"> ladies</font>

260
00:12:27,220 --> 00:12:33,130
<font color="#E5E5E5">trap doors are</font><font color="#CCCCCC"> a more advanced</font><font color="#E5E5E5"> primitive</font>

261
00:12:31,000 --> 00:12:34,930
cryptographic primitive<font color="#E5E5E5"> that are used</font>

262
00:12:33,130 --> 00:12:37,529
<font color="#E5E5E5">for many protocols not just program</font>

263
00:12:34,930 --> 00:12:42,160
obfuscation as we'll discuss briefly<font color="#E5E5E5"> and</font>

264
00:12:37,529 --> 00:12:43,930
prior<font color="#CCCCCC"> to this there was no relatively</font>

265
00:12:42,160 --> 00:12:47,230
efficient algorithm especially for

266
00:12:43,930 --> 00:12:49,270
<font color="#E5E5E5">so-called prime moduli so in in this</font>

267
00:12:47,230 --> 00:12:53,020
case we<font color="#E5E5E5"> used</font><font color="#CCCCCC"> a construction that's based</font>

268
00:12:49,270 --> 00:12:56,620
on ring learning with errors we extended

269
00:12:53,020 --> 00:12:58,750
the classical binary gadget matrix

270
00:12:56,620 --> 00:13:02,800
approach<font color="#E5E5E5"> from base 2 to</font><font color="#CCCCCC"> base 2 to the</font>

271
00:12:58,750 --> 00:13:04,060
power of 20 we improved the trapdoor

272
00:13:02,800 --> 00:13:05,740
<font color="#E5E5E5">image sampling based on the</font>

273
00:13:04,060 --> 00:13:08,500
<font color="#CCCCCC">collaboration with</font><font color="#E5E5E5"> Danielle</font>

274
00:13:05,740 --> 00:13:11,920
image-conscious<font color="#CCCCCC"> team and we were able to</font>

275
00:13:08,500 --> 00:13:13,810
<font color="#E5E5E5">improve both subroutines that are used</font>

276
00:13:11,920 --> 00:13:17,829
in the pre<font color="#CCCCCC"> image sampling</font><font color="#E5E5E5"> for lattices</font>

277
00:13:13,810 --> 00:13:20,109
<font color="#E5E5E5">and these particular optimizations have</font>

278
00:13:17,829 --> 00:13:21,910
a broader impact<font color="#E5E5E5"> and</font><font color="#CCCCCC"> just the</font>

279
00:13:20,110 --> 00:13:25,839
conjunction of<font color="#CCCCCC"> education problem that we</font>

280
00:13:21,910 --> 00:13:30,209
were<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to solve</font><font color="#E5E5E5"> in particular we</font>

281
00:13:25,839 --> 00:13:32,500
apply this to the<font color="#CCCCCC"> gpv signature and</font>

282
00:13:30,209 --> 00:13:33,339
significantly improved their results for

283
00:13:32,500 --> 00:13:35,860
it so that's a<font color="#CCCCCC"> Sur</font>

284
00:13:33,340 --> 00:13:38,710
paper<font color="#E5E5E5"> we applied it to identity based</font>

285
00:13:35,860 --> 00:13:40,450
encryption<font color="#E5E5E5"> we applied it to ciphertext</font>

286
00:13:38,710 --> 00:13:44,170
policy and key policy attribute based

287
00:13:40,450 --> 00:13:46,270
encryption<font color="#E5E5E5"> the</font><font color="#CCCCCC"> trapdoor</font><font color="#E5E5E5"> sampling is</font><font color="#CCCCCC"> used</font>

288
00:13:44,170 --> 00:13:48,520
in<font color="#E5E5E5"> predicate encryption and functional</font>

289
00:13:46,270 --> 00:13:50,829
encryption so a lot of<font color="#E5E5E5"> more a lot of</font>

290
00:13:48,520 --> 00:13:55,540
advanced constructions that<font color="#CCCCCC"> are based on</font>

291
00:13:50,830 --> 00:13:57,970
lattices<font color="#CCCCCC"> useless trapdoors</font><font color="#E5E5E5"> and a large</font>

292
00:13:55,540 --> 00:14:01,839
number of optimizations<font color="#CCCCCC"> dealt with</font><font color="#E5E5E5"> this</font>

293
00:13:57,970 --> 00:14:04,170
part<font color="#E5E5E5"> then there were other optimizations</font>

294
00:14:01,839 --> 00:14:06,250
that are<font color="#E5E5E5"> more specific to the</font>

295
00:14:04,170 --> 00:14:09,250
conjunction<font color="#CCCCCC"> efficient</font><font color="#E5E5E5"> multilinear maps</font>

296
00:14:06,250 --> 00:14:12,130
<font color="#E5E5E5">so for instance we saw that in the</font>

297
00:14:09,250 --> 00:14:15,730
<font color="#CCCCCC">original pattern we worked</font><font color="#E5E5E5"> with bits so</font>

298
00:14:12,130 --> 00:14:19,650
<font color="#E5E5E5">we considered a larger alphabet so we</font>

299
00:14:15,730 --> 00:14:24,450
found through some some analysis<font color="#E5E5E5"> that</font>

300
00:14:19,650 --> 00:14:28,060
using a byte would be more efficient<font color="#E5E5E5"> so</font>

301
00:14:24,450 --> 00:14:29,860
then we changed the we<font color="#E5E5E5"> tightened the</font>

302
00:14:28,060 --> 00:14:31,390
correctness<font color="#CCCCCC"> constraints significantly by</font>

303
00:14:29,860 --> 00:14:35,890
using central limit theorem<font color="#E5E5E5"> and some</font>

304
00:14:31,390 --> 00:14:38,740
other techniques<font color="#E5E5E5"> we improved matrix</font>

305
00:14:35,890 --> 00:14:41,500
arithmetic<font color="#E5E5E5"> we improved polynomial</font>

306
00:14:38,740 --> 00:14:44,610
arithmetic and used the<font color="#CCCCCC"> so-called</font><font color="#E5E5E5"> double</font>

307
00:14:41,500 --> 00:14:47,830
Chinese remainder theorem representation

308
00:14:44,610 --> 00:14:49,360
<font color="#E5E5E5">in this case so which made it more</font>

309
00:14:47,830 --> 00:14:53,320
efficient so we<font color="#E5E5E5"> could work</font><font color="#CCCCCC"> with native</font>

310
00:14:49,360 --> 00:14:55,060
data types<font color="#E5E5E5"> we improved the integer</font>

311
00:14:53,320 --> 00:14:58,300
sampling Gaussian sampling<font color="#E5E5E5"> that's used</font>

312
00:14:55,060 --> 00:15:02,439
for lattices<font color="#CCCCCC"> we applied parallelization</font>

313
00:14:58,300 --> 00:15:04,329
at multiple<font color="#CCCCCC"> levels and we also made a</font>

314
00:15:02,440 --> 00:15:06,370
lot<font color="#E5E5E5"> of improvements</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the palisade</font>

315
00:15:04,330 --> 00:15:10,990
library<font color="#E5E5E5"> itself so more of software</font>

316
00:15:06,370 --> 00:15:12,820
optimizations<font color="#E5E5E5"> so but most of our paper</font>

317
00:15:10,990 --> 00:15:16,690
discusses those optimizations how

318
00:15:12,820 --> 00:15:18,610
exactly they were developed<font color="#E5E5E5"> and I would</font>

319
00:15:16,690 --> 00:15:20,920
<font color="#E5E5E5">refer</font><font color="#CCCCCC"> to the paper for those</font><font color="#E5E5E5"> details or</font>

320
00:15:18,610 --> 00:15:26,370
I would<font color="#E5E5E5"> be happy</font><font color="#CCCCCC"> to explain</font><font color="#E5E5E5"> them offline</font>

321
00:15:20,920 --> 00:15:29,459
during<font color="#CCCCCC"> the</font><font color="#E5E5E5"> reception</font><font color="#CCCCCC"> so one of the</font>

322
00:15:26,370 --> 00:15:32,260
<font color="#E5E5E5">problems I want to discuss is</font><font color="#CCCCCC"> how</font>

323
00:15:29,459 --> 00:15:34,979
performance<font color="#E5E5E5"> of the conjunction</font><font color="#CCCCCC"> a fist</font>

324
00:15:32,260 --> 00:15:39,670
<font color="#CCCCCC">ocation scales</font><font color="#E5E5E5"> with a increase in the</font>

325
00:15:34,980 --> 00:15:42,550
length of<font color="#E5E5E5"> the program</font><font color="#CCCCCC"> so we we can get</font>

326
00:15:39,670 --> 00:15:45,020
<font color="#E5E5E5">results comparable to 32 bit patterns</font>

327
00:15:42,550 --> 00:15:47,990
for 40 bit patterns as we can see<font color="#E5E5E5"> here</font>

328
00:15:45,020 --> 00:15:50,510
expansion is<font color="#CCCCCC"> not significant as soon as</font>

329
00:15:47,990 --> 00:15:53,360
we go to a larger program size for

330
00:15:50,510 --> 00:15:57,830
example<font color="#E5E5E5"> 64-bit program size assuming</font><font color="#CCCCCC"> 16</font>

331
00:15:53,360 --> 00:16:00,560
<font color="#E5E5E5">wildcards in this case the program size</font>

332
00:15:57,830 --> 00:16:04,640
is<font color="#E5E5E5"> about</font><font color="#CCCCCC"> one terabyte so essentially</font>

333
00:16:00,560 --> 00:16:07,160
again we're getting<font color="#E5E5E5"> into the area where</font>

334
00:16:04,640 --> 00:16:10,819
it may not<font color="#CCCCCC"> be practical and we were not</font>

335
00:16:07,160 --> 00:16:13,100
able<font color="#E5E5E5"> to run the</font><font color="#CCCCCC"> 128-bit pattern because</font>

336
00:16:10,820 --> 00:16:15,710
of<font color="#CCCCCC"> the limitations of the systems we</font>

337
00:16:13,100 --> 00:16:18,710
<font color="#E5E5E5">worked with so there is still room for</font>

338
00:16:15,710 --> 00:16:20,780
improvement<font color="#CCCCCC"> and a lot of the</font>

339
00:16:18,710 --> 00:16:24,440
practicality questions that are being

340
00:16:20,780 --> 00:16:27,920
<font color="#CCCCCC">started</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> because this work is based</font>

341
00:16:24,440 --> 00:16:29,540
<font color="#E5E5E5">on what we had in</font><font color="#CCCCCC"> it it's in the</font>

342
00:16:27,920 --> 00:16:31,790
September of 2017

343
00:16:29,540 --> 00:16:35,449
<font color="#CCCCCC">so how to</font><font color="#E5E5E5"> efficiently implement more</font>

344
00:16:31,790 --> 00:16:37,250
complex functions<font color="#CCCCCC"> in particular</font><font color="#E5E5E5"> we're</font>

345
00:16:35,450 --> 00:16:40,010
looking at generalized<font color="#E5E5E5"> the branching</font>

346
00:16:37,250 --> 00:16:43,100
programs and to see how those can<font color="#E5E5E5"> be</font>

347
00:16:40,010 --> 00:16:44,540
<font color="#CCCCCC">implemented is it possible to build</font>

348
00:16:43,100 --> 00:16:46,940
general purpose of<font color="#CCCCCC"> Education</font>

349
00:16:44,540 --> 00:16:49,579
constructions<font color="#CCCCCC"> that cannot be</font><font color="#E5E5E5"> broken</font>

350
00:16:46,940 --> 00:16:51,410
<font color="#CCCCCC">another</font><font color="#E5E5E5"> aspect that was not discussed</font><font color="#CCCCCC"> in</font>

351
00:16:49,580 --> 00:16:53,390
<font color="#E5E5E5">this paper is</font><font color="#CCCCCC"> that a lot</font><font color="#E5E5E5"> of multi linear</font>

352
00:16:51,410 --> 00:16:55,339
map constructions were<font color="#E5E5E5"> broken in a</font>

353
00:16:53,390 --> 00:16:58,819
general case<font color="#E5E5E5"> and that's still an open</font>

354
00:16:55,340 --> 00:17:01,630
theoretical<font color="#CCCCCC"> a challenge to which to have</font>

355
00:16:58,820 --> 00:17:04,700
<font color="#E5E5E5">secure construction</font><font color="#CCCCCC"> if in the case of</font>

356
00:17:01,630 --> 00:17:07,089
<font color="#CCCCCC">dismiss ability obfuscation</font><font color="#E5E5E5"> are there</font>

357
00:17:04,700 --> 00:17:10,250
other major algorithmic improvements

358
00:17:07,089 --> 00:17:12,139
<font color="#E5E5E5">that can reduce the application program</font>

359
00:17:10,250 --> 00:17:15,140
size requirements for<font color="#E5E5E5"> instance we saw</font>

360
00:17:12,140 --> 00:17:19,459
<font color="#E5E5E5">that almost</font><font color="#CCCCCC"> 1 terabyte</font><font color="#E5E5E5"> is needed for</font>

361
00:17:15,140 --> 00:17:21,260
<font color="#E5E5E5">64-bit</font><font color="#CCCCCC"> parallel</font><font color="#E5E5E5"> 64-bit program and the</font>

362
00:17:19,459 --> 00:17:23,360
other branch and actually multiple

363
00:17:21,260 --> 00:17:26,329
branches that we're<font color="#E5E5E5"> exploring now is to</font>

364
00:17:23,359 --> 00:17:28,310
look at other<font color="#E5E5E5"> models for instance one of</font>

365
00:17:26,329 --> 00:17:31,669
<font color="#E5E5E5">the issues we saw is related to the</font>

366
00:17:28,310 --> 00:17:34,340
exhaustive search with a limitation of

367
00:17:31,670 --> 00:17:36,230
<font color="#E5E5E5">the virtual black box model because you</font>

368
00:17:34,340 --> 00:17:38,959
can learn a lot through input-output

369
00:17:36,230 --> 00:17:42,730
analysis<font color="#E5E5E5"> so some other techniques such</font>

370
00:17:38,960 --> 00:17:46,280
as<font color="#E5E5E5"> interactive</font><font color="#CCCCCC"> token based obfuscation</font>

371
00:17:42,730 --> 00:17:48,560
<font color="#CCCCCC">that limit the number of queries you can</font>

372
00:17:46,280 --> 00:17:53,420
<font color="#E5E5E5">run against the program are being</font>

373
00:17:48,560 --> 00:17:57,129
studied now this is the end of my talk

374
00:17:53,420 --> 00:17:57,130
any questions<font color="#E5E5E5"> thank you</font>

375
00:17:57,150 --> 00:18:02,819
[Applause]

376
00:18:04,240 --> 00:18:09,740
any questions<font color="#E5E5E5"> one question</font><font color="#CCCCCC"> there is one</font>

377
00:18:07,730 --> 00:18:12,080
one question<font color="#E5E5E5"> hi</font>

378
00:18:09,740 --> 00:18:14,059
Preity from<font color="#CCCCCC"> Berkeley so recently there's</font>

379
00:18:12,080 --> 00:18:15,860
<font color="#CCCCCC">been work on doing this kind of</font>

380
00:18:14,059 --> 00:18:18,110
confiscation for compute and<font color="#E5E5E5"> compare</font>

381
00:18:15,860 --> 00:18:20,090
programs but<font color="#CCCCCC"> lwe what do you guys</font>

382
00:18:18,110 --> 00:18:21,559
<font color="#E5E5E5">already have an estimate</font><font color="#CCCCCC"> of like the</font>

383
00:18:20,090 --> 00:18:23,509
performance<font color="#E5E5E5"> of yours</font><font color="#CCCCCC"> of your</font>

384
00:18:21,559 --> 00:18:24,259
implementation<font color="#CCCCCC"> on those I have you guys</font>

385
00:18:23,509 --> 00:18:26,840
even looked at it

386
00:18:24,259 --> 00:18:30,679
yeah yet so you're referring to<font color="#CCCCCC"> a</font>

387
00:18:26,840 --> 00:18:32,658
<font color="#E5E5E5">theoretical work on so we have looked at</font>

388
00:18:30,679 --> 00:18:34,429
that<font color="#E5E5E5"> and the construction is</font><font color="#CCCCCC"> very</font>

389
00:18:32,659 --> 00:18:36,710
similar<font color="#E5E5E5"> but it's a generalization of</font>

390
00:18:34,429 --> 00:18:38,809
that<font color="#E5E5E5"> construction and we actually</font>

391
00:18:36,710 --> 00:18:42,980
consider that as a possible approach

392
00:18:38,809 --> 00:18:44,928
that we would want<font color="#CCCCCC"> to implement</font><font color="#E5E5E5"> it is</font>

393
00:18:42,980 --> 00:18:47,570
based on learning<font color="#E5E5E5"> with other than</font>

394
00:18:44,929 --> 00:18:50,570
entropic learning with<font color="#E5E5E5"> errors our</font>

395
00:18:47,570 --> 00:18:52,730
initial analysis showed that<font color="#CCCCCC"> it would be</font>

396
00:18:50,570 --> 00:18:54,080
significantly less efficient and the

397
00:18:52,730 --> 00:18:56,149
<font color="#E5E5E5">construction that we have and we're</font>

398
00:18:54,080 --> 00:18:57,830
<font color="#E5E5E5">exploring slightly different approaches</font>

399
00:18:56,149 --> 00:19:00,860
<font color="#CCCCCC">that are essentially related</font><font color="#E5E5E5"> a token</font>

400
00:18:57,830 --> 00:19:03,139
<font color="#E5E5E5">based on fist</font><font color="#CCCCCC"> ocation so constraint</font>

401
00:19:00,860 --> 00:19:07,008
hiding<font color="#E5E5E5"> constraint PRF approaches we're</font>

402
00:19:03,139 --> 00:19:09,110
finding them<font color="#E5E5E5"> more practical another</font>

403
00:19:07,009 --> 00:19:11,330
question so I think<font color="#E5E5E5"> for this you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to</font>

404
00:19:09,110 --> 00:19:14,119
assume<font color="#CCCCCC"> that the conjunction itself has</font>

405
00:19:11,330 --> 00:19:15,980
some entropy so like how much entropy is

406
00:19:14,119 --> 00:19:19,580
there<font color="#E5E5E5"> in like</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> 32 bit patterns that</font>

407
00:19:15,980 --> 00:19:22,460
you are<font color="#CCCCCC"> office gating yes so that's a</font>

408
00:19:19,580 --> 00:19:26,360
<font color="#E5E5E5">very good question and there is</font>

409
00:19:22,460 --> 00:19:28,190
certainly limitation in<font color="#CCCCCC"> the in the</font>

410
00:19:26,360 --> 00:19:30,699
assumption that this conjunction pattern

411
00:19:28,190 --> 00:19:34,009
has to<font color="#CCCCCC"> basically have certain level</font>

412
00:19:30,700 --> 00:19:36,139
entropy<font color="#CCCCCC"> so it's it's a combination</font><font color="#E5E5E5"> of</font>

413
00:19:34,009 --> 00:19:37,669
<font color="#E5E5E5">two</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> to actual issues so</font>

414
00:19:36,139 --> 00:19:39,289
one issue<font color="#CCCCCC"> is how many wildcard</font>

415
00:19:37,669 --> 00:19:41,659
characters we have<font color="#E5E5E5"> and then for the rest</font>

416
00:19:39,289 --> 00:19:46,249
we should assume a<font color="#E5E5E5"> certain level</font>

417
00:19:41,659 --> 00:19:48,289
basically of<font color="#E5E5E5"> entropy to give you an</font>

418
00:19:46,249 --> 00:19:50,269
honest<font color="#E5E5E5"> answer this is I would consider</font>

419
00:19:48,289 --> 00:19:53,509
this more as a toy<font color="#E5E5E5"> model at this time</font>

420
00:19:50,269 --> 00:19:54,710
and going<font color="#E5E5E5"> to model web that hides for</font>

421
00:19:53,509 --> 00:19:56,509
instance the fact<font color="#E5E5E5"> that you're using</font>

422
00:19:54,710 --> 00:19:58,369
conjunction pattern which<font color="#CCCCCC"> is what we</font>

423
00:19:56,509 --> 00:20:00,049
<font color="#E5E5E5">exploring right now with some branching</font>

424
00:19:58,369 --> 00:20:03,350
program techniques would be<font color="#CCCCCC"> better</font>

425
00:20:00,049 --> 00:20:04,759
<font color="#E5E5E5">approach so I'll go that far and just</font>

426
00:20:03,350 --> 00:20:06,168
<font color="#E5E5E5">say it's probably would be more</font>

427
00:20:04,759 --> 00:20:07,490
practical to work on those and that's

428
00:20:06,169 --> 00:20:08,029
our next step and we're working<font color="#E5E5E5"> on</font><font color="#CCCCCC"> that</font>

429
00:20:07,490 --> 00:20:09,500
<font color="#CCCCCC">right now</font>

430
00:20:08,029 --> 00:20:12,950
<font color="#CCCCCC">okay cool look</font>

431
00:20:09,500 --> 00:20:15,930
thank you<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> let's thank</font><font color="#E5E5E5"> speaker again</font>

432
00:20:12,950 --> 00:20:15,930
[Applause]

