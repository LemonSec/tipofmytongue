1
00:00:00,260 --> 00:00:05,130
<font color="#E5E5E5">thank you to</font><font color="#CCCCCC"> 30 months for the</font>

2
00:00:03,000 --> 00:00:07,799
introduction the title<font color="#E5E5E5"> of my book is</font>

3
00:00:05,130 --> 00:00:10,019
tiny garble it's a tool for highly

4
00:00:07,799 --> 00:00:13,860
compressed and sequential garble circuit

5
00:00:10,019 --> 00:00:15,870
the main<font color="#E5E5E5"> idea behind this tool is to use</font>

6
00:00:13,860 --> 00:00:18,509
<font color="#CCCCCC">the knowledge that we have in</font><font color="#E5E5E5"> hardware</font>

7
00:00:15,870 --> 00:00:20,580
synthesis and hardware design to make

8
00:00:18,510 --> 00:00:23,539
<font color="#E5E5E5">yours garble circuit more and more</font>

9
00:00:20,580 --> 00:00:26,939
practical<font color="#CCCCCC"> okay let's look at the</font>

10
00:00:23,539 --> 00:00:28,920
motivation behind this work we want to

11
00:00:26,939 --> 00:00:33,800
solve the problem of secure function

12
00:00:28,920 --> 00:00:37,260
evaluation or sfe in sfe the goal is to

13
00:00:33,800 --> 00:00:40,410
compute a function jointly between two

14
00:00:37,260 --> 00:00:42,329
parties on their private data an example

15
00:00:40,410 --> 00:00:44,489
is the<font color="#E5E5E5"> O's millionaires problem where</font>

16
00:00:42,329 --> 00:00:46,590
two millionaires wants to want to

17
00:00:44,489 --> 00:00:49,019
compare<font color="#E5E5E5"> their world without letting each</font>

18
00:00:46,590 --> 00:00:50,700
other<font color="#E5E5E5"> to know what was their amount of</font>

19
00:00:49,020 --> 00:00:52,770
money do<font color="#E5E5E5"> you have in their bank account</font>

20
00:00:50,700 --> 00:00:54,660
there are a<font color="#E5E5E5"> couple of solution one of</font>

21
00:00:52,770 --> 00:00:56,430
them is you always<font color="#E5E5E5"> garbled circle</font>

22
00:00:54,660 --> 00:00:59,370
solution which seems<font color="#E5E5E5"> to be the most</font>

23
00:00:56,430 --> 00:01:02,789
promising one we<font color="#E5E5E5"> are focusing on to</font>

24
00:00:59,370 --> 00:01:05,518
party GC protocol or yours garble

25
00:01:02,789 --> 00:01:07,590
circuit protocol let's see how it<font color="#CCCCCC"> works</font>

26
00:01:05,519 --> 00:01:09,810
on the same problem<font color="#CCCCCC"> of yours new</font>

27
00:01:07,590 --> 00:01:12,990
<font color="#CCCCCC">universe problem the first step is to</font>

28
00:01:09,810 --> 00:01:16,860
make a garble a boolean circuit out of

29
00:01:12,990 --> 00:01:18,750
function f here is comparison so we need

30
00:01:16,860 --> 00:01:21,509
a<font color="#CCCCCC"> tree bit comparison here in this</font>

31
00:01:18,750 --> 00:01:24,450
example which is this circuit the next

32
00:01:21,509 --> 00:01:26,909
step Allison needs to make a<font color="#CCCCCC"> garbled</font>

33
00:01:24,450 --> 00:01:30,780
circuit which is the randomized and

34
00:01:26,909 --> 00:01:33,990
encryption circuit the same as the

35
00:01:30,780 --> 00:01:35,790
boolean circuit Alice also encrypt all

36
00:01:33,990 --> 00:01:38,490
the truth table in this randomized

37
00:01:35,790 --> 00:01:41,549
circuit and sends them to Bob Bob cannot

38
00:01:38,490 --> 00:01:47,548
open them unless he has the input labels

39
00:01:41,549 --> 00:01:51,149
or inputs randomized wires<font color="#E5E5E5"> Alison's hair</font>

40
00:01:47,549 --> 00:01:53,759
inputs to Bob and through a protocol

41
00:01:51,149 --> 00:01:57,810
called oblivious transfer or<font color="#E5E5E5"> ot Bob</font>

42
00:01:53,759 --> 00:02:01,200
receives his input so bob has all the

43
00:01:57,810 --> 00:02:04,140
input wires so we can go<font color="#E5E5E5"> ahead and open</font>

44
00:02:01,200 --> 00:02:09,539
each of these encrypted truth table to

45
00:02:04,140 --> 00:02:12,420
get the final output after this<font color="#E5E5E5"> you can</font>

46
00:02:09,538 --> 00:02:13,739
share<font color="#E5E5E5"> it with Alice to find out what was</font>

47
00:02:12,420 --> 00:02:18,059
<font color="#CCCCCC">the actual</font>

48
00:02:13,740 --> 00:02:20,310
to it so the question<font color="#CCCCCC"> is can this</font>

49
00:02:18,060 --> 00:02:24,060
protocol be practical can be<font color="#CCCCCC"> actually</font>

50
00:02:20,310 --> 00:02:25,560
implemented I use it thanks<font color="#CCCCCC"> to</font><font color="#E5E5E5"> lots of</font>

51
00:02:24,060 --> 00:02:27,750
people works in this world it is

52
00:02:25,560 --> 00:02:31,170
practical it has been practical since

53
00:02:27,750 --> 00:02:33,480
2004 for a decade and this is the

54
00:02:31,170 --> 00:02:37,280
chronology of<font color="#CCCCCC"> the work on the</font>

55
00:02:33,480 --> 00:02:41,209
implementation<font color="#E5E5E5"> of</font><font color="#CCCCCC"> garbled circuit and we</font>

56
00:02:37,280 --> 00:02:45,840
<font color="#CCCCCC">saw</font><font color="#E5E5E5"> that many of this work try to</font>

57
00:02:41,210 --> 00:02:48,600
implement a compiler or library to solve

58
00:02:45,840 --> 00:02:50,550
the problem in the first set of garble

59
00:02:48,600 --> 00:02:54,750
circuit which is making<font color="#CCCCCC"> a boolean search</font>

60
00:02:50,550 --> 00:02:57,150
out of a function description and still

61
00:02:54,750 --> 00:02:59,820
there<font color="#CCCCCC"> are some shortcoming in this step</font>

62
00:02:57,150 --> 00:03:02,340
for<font color="#E5E5E5"> scalability many of these work as a</font>

63
00:02:59,820 --> 00:03:05,280
porous scalability and prevents<font color="#E5E5E5"> user</font>

64
00:03:02,340 --> 00:03:07,860
from making a large circuit and some of

65
00:03:05,280 --> 00:03:09,960
them asked user to manually optimize

66
00:03:07,860 --> 00:03:12,900
their<font color="#CCCCCC"> circuit suit they don't</font><font color="#E5E5E5"> provide</font>

67
00:03:09,960 --> 00:03:14,820
any automatic tools for them<font color="#E5E5E5"> also some</font>

68
00:03:12,900 --> 00:03:17,190
<font color="#CCCCCC">of them use online circuit generation</font>

69
00:03:14,820 --> 00:03:19,230
which doesn't provide any global

70
00:03:17,190 --> 00:03:21,270
optimization for the function because we

71
00:03:19,230 --> 00:03:23,880
don't have<font color="#CCCCCC"> the circuit at a time so we</font>

72
00:03:21,270 --> 00:03:27,750
cannot optimize it also its waste of

73
00:03:23,880 --> 00:03:30,180
time of garbling<font color="#E5E5E5"> and some of them also</font>

74
00:03:27,750 --> 00:03:31,950
provide high level abstraction<font color="#CCCCCC"> which</font>

75
00:03:30,180 --> 00:03:34,550
usually result<font color="#CCCCCC"> in inefficient</font>

76
00:03:31,950 --> 00:03:38,160
optimization compared<font color="#CCCCCC"> to manual</font>

77
00:03:34,550 --> 00:03:40,170
optimization<font color="#CCCCCC"> ok what's your approach we</font>

78
00:03:38,160 --> 00:03:43,020
thought<font color="#CCCCCC"> maybe we can use</font><font color="#E5E5E5"> hardware</font>

79
00:03:40,170 --> 00:03:46,410
synthesis tools and techniques that<font color="#E5E5E5"> have</font>

80
00:03:43,020 --> 00:03:48,080
been<font color="#E5E5E5"> around for half a century and they</font>

81
00:03:46,410 --> 00:03:50,910
are<font color="#E5E5E5"> used for the</font><font color="#CCCCCC"> same purpose</font>

82
00:03:48,080 --> 00:03:52,770
translating a function description into

83
00:03:50,910 --> 00:03:56,180
a boolean circuit but for different

84
00:03:52,770 --> 00:04:00,030
objective for actual hardware and actual

85
00:03:56,180 --> 00:04:03,300
device so we want to hack these tools<font color="#CCCCCC"> to</font>

86
00:04:00,030 --> 00:04:07,350
make them able to generate an optimized

87
00:04:03,300 --> 00:04:10,110
<font color="#E5E5E5">circuit for GC protocol instead of</font>

88
00:04:07,350 --> 00:04:12,870
<font color="#E5E5E5">actual hardware the next one is all is a</font>

89
00:04:10,110 --> 00:04:15,780
concept in hardware design a sequential

90
00:04:12,870 --> 00:04:20,280
circuit which makes us<font color="#CCCCCC"> in able to make</font>

91
00:04:15,780 --> 00:04:23,520
scalable circuit for the complex

92
00:04:20,279 --> 00:04:25,900
functionality ok let's look at all

93
00:04:23,520 --> 00:04:28,419
detailed contribution

94
00:04:25,900 --> 00:04:31,210
the first one<font color="#E5E5E5"> is the adaptation of these</font>

95
00:04:28,419 --> 00:04:35,049
a shield synthesis tools for generating

96
00:04:31,210 --> 00:04:37,859
an optimized garbled circuit so we have

97
00:04:35,050 --> 00:04:41,320
an offline circuit generation we don't

98
00:04:37,860 --> 00:04:45,820
do it online also it's automatic user

99
00:04:41,320 --> 00:04:48,270
does that need to do anything also we

100
00:04:45,820 --> 00:04:51,729
create some new custom libraries and

101
00:04:48,270 --> 00:04:55,049
objective to change the up to change the

102
00:04:51,729 --> 00:04:58,449
purpose of these tools<font color="#CCCCCC"> to hack them to</font>

103
00:04:55,050 --> 00:05:00,400
<font color="#CCCCCC">get</font><font color="#E5E5E5"> an optimized circuit for DC protocol</font>

104
00:04:58,449 --> 00:05:04,870
instead of optimized circuit for actual

105
00:05:00,400 --> 00:05:09,460
hardware I also we<font color="#CCCCCC"> introduce sequential</font>

106
00:05:04,870 --> 00:05:11,110
circuit description for GC it makes us

107
00:05:09,460 --> 00:05:13,448
<font color="#E5E5E5">unable</font><font color="#CCCCCC"> to have a compact circuit</font>

108
00:05:11,110 --> 00:05:15,610
representation and limited memory

109
00:05:13,449 --> 00:05:18,039
footprint during garbling and<font color="#E5E5E5"> evaluation</font>

110
00:05:15,610 --> 00:05:19,690
also<font color="#E5E5E5"> makes is enabled</font><font color="#CCCCCC"> to use the</font>

111
00:05:18,039 --> 00:05:23,530
knowledge that we<font color="#CCCCCC"> have in hardware</font>

112
00:05:19,690 --> 00:05:25,030
design for making function in<font color="#CCCCCC"> gobble</font>

113
00:05:23,530 --> 00:05:27,369
circuit for example we provide a

114
00:05:25,030 --> 00:05:33,130
scalable solution for private function

115
00:05:27,370 --> 00:05:35,800
SF e or<font color="#CCCCCC"> PFS fe ok based on this idea we</font>

116
00:05:33,130 --> 00:05:40,510
generated<font color="#E5E5E5"> tool called tiny garble let's</font>

117
00:05:35,800 --> 00:05:43,060
see how it<font color="#E5E5E5"> works this is the global flow</font>

118
00:05:40,510 --> 00:05:45,820
of tiny<font color="#E5E5E5"> go a user can start from a high</font>

119
00:05:43,060 --> 00:05:49,690
<font color="#E5E5E5">level description of a function</font><font color="#CCCCCC"> like C</font>

120
00:05:45,820 --> 00:05:52,210
or<font color="#CCCCCC"> C++ our tools translated to a</font>

121
00:05:49,690 --> 00:05:55,690
hardware description language or HDL

122
00:05:52,210 --> 00:05:58,330
very log or VHDL or alternatively user

123
00:05:55,690 --> 00:06:00,780
canister from very low provision most of

124
00:05:58,330 --> 00:06:04,659
the hardware design are done in these

125
00:06:00,780 --> 00:06:08,049
languages then the next step<font color="#E5E5E5"> is hardware</font>

126
00:06:04,659 --> 00:06:10,780
logic synthesis tools with our objective

127
00:06:08,050 --> 00:06:15,550
and constraint which is hacked for

128
00:06:10,780 --> 00:06:17,520
generating optimized<font color="#E5E5E5"> garble circuit its</font>

129
00:06:15,550 --> 00:06:19,659
result in a netlist necklace is

130
00:06:17,520 --> 00:06:23,109
essentially the answer it has all the

131
00:06:19,659 --> 00:06:25,300
gates and it's connection so we want

132
00:06:23,110 --> 00:06:27,970
this necklace be optimized for<font color="#CCCCCC"> garbled</font>

133
00:06:25,300 --> 00:06:30,010
circuit the next step is a scheduling

134
00:06:27,970 --> 00:06:31,960
which is a topological sort then we

135
00:06:30,010 --> 00:06:35,050
store it in a portable format so we can

136
00:06:31,960 --> 00:06:39,039
distribute it and use it during garbling

137
00:06:35,050 --> 00:06:39,610
<font color="#E5E5E5">and evaluation so what about the</font>

138
00:06:39,039 --> 00:06:41,849
sequential

139
00:06:39,610 --> 00:06:44,530
circuit what is sequential circuit

140
00:06:41,849 --> 00:06:47,438
usually when we are<font color="#E5E5E5"> thinking about</font>

141
00:06:44,530 --> 00:06:49,030
boolean circuiting<font color="#E5E5E5"> corbel circuit we are</font>

142
00:06:47,439 --> 00:06:51,909
referring<font color="#E5E5E5"> to type of circuit called</font>

143
00:06:49,030 --> 00:06:54,039
combinational circuit in hardware design

144
00:06:51,909 --> 00:06:56,259
combinational circuit in combinational

145
00:06:54,039 --> 00:06:58,870
circuit outputs are only function of

146
00:06:56,259 --> 00:07:01,419
inputs so we have a directed acyclic

147
00:06:58,870 --> 00:07:05,550
graph around inputs to the output there

148
00:07:01,419 --> 00:07:09,340
is no loop while in sequential circuit

149
00:07:05,550 --> 00:07:11,620
outputs are functional inputs and also

150
00:07:09,340 --> 00:07:13,830
state of the circuit which are kept in

151
00:07:11,620 --> 00:07:16,389
some memory elements like a flip flops

152
00:07:13,830 --> 00:07:19,508
so<font color="#E5E5E5"> we have a loop here it's not bad</font>

153
00:07:16,389 --> 00:07:21,219
anymore all the hardware design are done

154
00:07:19,509 --> 00:07:23,949
in sequential circuit<font color="#E5E5E5"> not the</font>

155
00:07:21,219 --> 00:07:26,229
combinational circuit because if we want

156
00:07:23,949 --> 00:07:28,270
to design<font color="#E5E5E5"> a computer holy on</font><font color="#CCCCCC"> a</font>

157
00:07:26,229 --> 00:07:30,068
combinational circuit for a simple task

158
00:07:28,270 --> 00:07:33,340
a computer<font color="#E5E5E5"> would be the size of this</font>

159
00:07:30,069 --> 00:07:37,689
room it's not<font color="#E5E5E5"> as scalable and also it's</font>

160
00:07:33,340 --> 00:07:39,909
<font color="#E5E5E5">not just unrolling the</font><font color="#CCCCCC"> rupal having this</font>

161
00:07:37,689 --> 00:07:42,340
memory for the<font color="#E5E5E5"> loop it can do many</font>

162
00:07:39,909 --> 00:07:45,699
exciting<font color="#E5E5E5"> stuff that we cannot think</font><font color="#CCCCCC"> it</font>

163
00:07:42,340 --> 00:07:47,948
think<font color="#E5E5E5"> about it with the loops only for</font>

164
00:07:45,699 --> 00:07:50,440
example shift register or a counter if

165
00:07:47,949 --> 00:07:53,469
we mix them together we cannot think it

166
00:07:50,440 --> 00:07:55,870
about think<font color="#E5E5E5"> about them as a loop they're</font>

167
00:07:53,469 --> 00:07:59,860
just<font color="#E5E5E5"> a memory element for reusing them</font>

168
00:07:55,870 --> 00:08:02,529
later in the circuit<font color="#CCCCCC"> okay let's</font><font color="#E5E5E5"> look at</font>

169
00:07:59,860 --> 00:08:08,080
an example and<font color="#E5E5E5"> see how it</font><font color="#CCCCCC"> works this is</font>

170
00:08:02,529 --> 00:08:10,719
n bit adder for combinational circuit we

171
00:08:08,080 --> 00:08:13,198
have n minus 1 full adders and one half

172
00:08:10,719 --> 00:08:16,389
adder full adder has a carryin carryout

173
00:08:13,199 --> 00:08:20,379
half adder doesn't have a carry so the

174
00:08:16,389 --> 00:08:22,240
size of this circuit is<font color="#E5E5E5"> open while in</font>

175
00:08:20,379 --> 00:08:25,389
sequential circuit we can have only one

176
00:08:22,240 --> 00:08:28,300
full leather and reuse the carrying as a

177
00:08:25,389 --> 00:08:30,339
<font color="#CCCCCC">care as carry out as a carry in for the</font>

178
00:08:28,300 --> 00:08:33,779
<font color="#E5E5E5">next cycle so we need to repeat these</font>

179
00:08:30,339 --> 00:08:36,219
circuit<font color="#CCCCCC"> end times or</font><font color="#E5E5E5"> n sequential types</font>

180
00:08:33,779 --> 00:08:39,549
to have the same functionality as a

181
00:08:36,219 --> 00:08:43,209
combinational circuit number of gates is

182
00:08:39,549 --> 00:08:46,540
here is all one we only have one<font color="#E5E5E5"> full</font>

183
00:08:43,208 --> 00:08:48,810
adder no matter how arbitrary large n is

184
00:08:46,540 --> 00:08:52,300
the circuit is this so it's very compact

185
00:08:48,810 --> 00:08:53,229
it's a scalable as it's very easier to

186
00:08:52,300 --> 00:08:55,359
optimize if you

187
00:08:53,230 --> 00:08:59,440
want to optimize this the sequential

188
00:08:55,360 --> 00:09:01,510
circuit is much much easier but there<font color="#E5E5E5"> is</font>

189
00:08:59,440 --> 00:09:03,850
no free lunch unfortunately there is a

190
00:09:01,510 --> 00:09:05,470
small overhead here if you remember<font color="#CCCCCC"> her</font>

191
00:09:03,850 --> 00:09:08,650
father was<font color="#CCCCCC"> a little bit simpler than</font>

192
00:09:05,470 --> 00:09:10,990
full adder in sequential circuit we need

193
00:09:08,650 --> 00:09:12,880
to repeat<font color="#E5E5E5"> a full adder end time so it</font>

194
00:09:10,990 --> 00:09:15,580
means we are doing the full adder minus

195
00:09:12,880 --> 00:09:18,150
and half adder<font color="#E5E5E5"> mode</font><font color="#CCCCCC"> compare the</font>

196
00:09:15,580 --> 00:09:20,740
combinational circuit this is the

197
00:09:18,150 --> 00:09:23,260
because of the asymmetry in the loops of

198
00:09:20,740 --> 00:09:25,390
edition which in the first iteration we

199
00:09:23,260 --> 00:09:29,319
have a half adder the<font color="#CCCCCC"> rest is full adder</font>

200
00:09:25,390 --> 00:09:31,600
if you notice<font color="#E5E5E5"> I ignore the flip-flop</font>

201
00:09:29,320 --> 00:09:34,000
because we don't need to actually

202
00:09:31,600 --> 00:09:37,120
implement the flip-flop in an abstract

203
00:09:34,000 --> 00:09:41,080
<font color="#E5E5E5">level in</font><font color="#CCCCCC"> the gobble circle flip-flop is</font>

204
00:09:37,120 --> 00:09:43,180
just transferring a label from one wire

205
00:09:41,080 --> 00:09:48,520
to another wiring garble circuit so it

206
00:09:43,180 --> 00:09:50,709
doesn't have any over sequential circuit

207
00:09:48,520 --> 00:09:54,090
makes us in able to solve many exciting

208
00:09:50,710 --> 00:09:57,580
problem for example private function sfe

209
00:09:54,090 --> 00:09:59,920
where a user has a function the other

210
00:09:57,580 --> 00:10:04,510
user has a data I they want to jointly

211
00:09:59,920 --> 00:10:07,750
compute f of X now<font color="#CCCCCC"> the current solution</font>

212
00:10:04,510 --> 00:10:10,689
is to reduce this problem to sfe the

213
00:10:07,750 --> 00:10:12,790
normal sofy using a universal circuit a

214
00:10:10,690 --> 00:10:14,920
circuit that gets the circuit as an

215
00:10:12,790 --> 00:10:17,709
input<font color="#E5E5E5"> and a data and evaluate the</font>

216
00:10:14,920 --> 00:10:19,829
circuit unfortunately this is not is

217
00:10:17,710 --> 00:10:22,180
scalable the size of this circuit

218
00:10:19,830 --> 00:10:25,510
increases with the size of the function

219
00:10:22,180 --> 00:10:28,390
f so we are<font color="#E5E5E5"> looking for an</font><font color="#CCCCCC"> alter a</font>

220
00:10:25,510 --> 00:10:31,600
scalable alternative for the universal

221
00:10:28,390 --> 00:10:34,330
circuit without what<font color="#CCCCCC"> about processor</font>

222
00:10:31,600 --> 00:10:37,750
they are implementation of universal

223
00:10:34,330 --> 00:10:40,450
<font color="#CCCCCC">turing machine they receive a function f</font>

224
00:10:37,750 --> 00:10:43,270
as a<font color="#E5E5E5"> binary coding their memory the</font>

225
00:10:40,450 --> 00:10:45,640
receiver<font color="#CCCCCC"> x as an initial data in their</font>

226
00:10:43,270 --> 00:10:48,640
memory and they write something as an

227
00:10:45,640 --> 00:10:50,830
outlet in<font color="#CCCCCC"> your memory and the</font><font color="#E5E5E5"> size of</font>

228
00:10:48,640 --> 00:10:56,550
<font color="#E5E5E5">the processor is independent of size of</font>

229
00:10:50,830 --> 00:10:59,080
<font color="#E5E5E5">f is</font><font color="#CCCCCC"> 0 of 1 we have a laptop with the</font>

230
00:10:56,550 --> 00:11:01,329
limited area and we can do whatever we

231
00:10:59,080 --> 00:11:04,000
want with it doesn't matter what is the

232
00:11:01,330 --> 00:11:06,220
function and the time complex is very

233
00:11:04,000 --> 00:11:06,760
<font color="#CCCCCC">straightforward is all of them which</font><font color="#E5E5E5"> m</font>

234
00:11:06,220 --> 00:11:08,890
is<font color="#E5E5E5"> no</font>

235
00:11:06,760 --> 00:11:13,140
of instruction in<font color="#CCCCCC"> the function that we</font>

236
00:11:08,890 --> 00:11:17,140
have and<font color="#CCCCCC"> the question</font><font color="#E5E5E5"> is how</font><font color="#CCCCCC"> to secure</font>

237
00:11:13,140 --> 00:11:19,750
evaluated with the gobble circuit the

238
00:11:17,140 --> 00:11:21,699
good news is that processor<font color="#E5E5E5"> are</font>

239
00:11:19,750 --> 00:11:24,250
sequential circuit if we can support

240
00:11:21,700 --> 00:11:28,060
sequential circuit for global circuit we

241
00:11:24,250 --> 00:11:31,150
can use<font color="#CCCCCC"> this processor into garble</font>

242
00:11:28,060 --> 00:11:33,369
circuit and they have you can go ahead

243
00:11:31,150 --> 00:11:37,240
and<font color="#E5E5E5"> enter it and download them they have</font>

244
00:11:33,370 --> 00:11:39,190
available compiler so it's very

245
00:11:37,240 --> 00:11:41,950
straightforward to implement them if we

246
00:11:39,190 --> 00:11:45,430
can<font color="#E5E5E5"> support sequential circuit</font><font color="#CCCCCC"> okay</font>

247
00:11:41,950 --> 00:11:48,060
let's<font color="#E5E5E5"> look at the evaluation at the</font>

248
00:11:45,430 --> 00:11:51,219
<font color="#E5E5E5">first step we want to see the effect of</font>

249
00:11:48,060 --> 00:11:53,319
hi love hardware synthesis tools so we

250
00:11:51,220 --> 00:11:55,270
just compare or combinational circuit

251
00:11:53,320 --> 00:11:57,520
with previous work so we don't<font color="#E5E5E5"> have any</font>

252
00:11:55,270 --> 00:12:00,520
sequential circuit the next step is

253
00:11:57,520 --> 00:12:04,050
comparing<font color="#E5E5E5"> sequential circuit with what</font>

254
00:12:00,520 --> 00:12:08,680
we generate and also the previous book

255
00:12:04,050 --> 00:12:11,380
we use<font color="#CCCCCC"> to matrix the first one is memory</font>

256
00:12:08,680 --> 00:12:14,050
footprint efficiency which is comparison

257
00:12:11,380 --> 00:12:16,810
between total number of gates in<font color="#CCCCCC"> two</font>

258
00:12:14,050 --> 00:12:20,410
circuit why we call it memory footprint

259
00:12:16,810 --> 00:12:23,020
because for every gate in a circuit we

260
00:12:20,410 --> 00:12:25,240
have to a store a label during garbling

261
00:12:23,020 --> 00:12:27,610
<font color="#E5E5E5">and evaluation in the memory so if</font><font color="#CCCCCC"> we</font>

262
00:12:25,240 --> 00:12:30,420
can<font color="#E5E5E5"> reduce number of gates in a circuit</font>

263
00:12:27,610 --> 00:12:34,810
we are reducing memory footprint of

264
00:12:30,420 --> 00:12:38,530
garbling<font color="#E5E5E5"> and evaluation higher MFE is</font>

265
00:12:34,810 --> 00:12:40,930
better mean meaning that<font color="#E5E5E5"> the circuit</font><font color="#CCCCCC"> and</font>

266
00:12:38,530 --> 00:12:43,030
the size of circuit is reduced compared

267
00:12:40,930 --> 00:12:45,609
to the reference circuit the next one is

268
00:12:43,030 --> 00:12:48,939
number of garble table that is generated

269
00:12:45,610 --> 00:12:51,610
during garba which is number of non xor

270
00:12:48,940 --> 00:12:54,790
times c which sees number of sequential

271
00:12:51,610 --> 00:12:58,590
cycle for combinational circuits is one

272
00:12:54,790 --> 00:13:01,209
why number of<font color="#CCCCCC"> nanak sore this is due to</font>

273
00:12:58,590 --> 00:13:05,230
optimization called free XO that let us

274
00:13:01,210 --> 00:13:08,560
<font color="#E5E5E5">to garble only nanak circuit and Xers</font>

275
00:13:05,230 --> 00:13:10,540
are freeing under this optimization and

276
00:13:08,560 --> 00:13:16,239
it's a very very<font color="#E5E5E5"> good estimation of the</font>

277
00:13:10,540 --> 00:13:19,390
a sub garbling<font color="#CCCCCC"> and evaluation so we look</font>

278
00:13:16,240 --> 00:13:20,490
at the GT difference in a percentage to

279
00:13:19,390 --> 00:13:23,670
see if the circuit is

280
00:13:20,490 --> 00:13:26,010
optoma is more optimized or<font color="#E5E5E5"> less</font><font color="#CCCCCC"> the</font>

281
00:13:23,670 --> 00:13:30,959
<font color="#CCCCCC">most</font><font color="#E5E5E5"> negative GTD means the circuit has</font>

282
00:13:26,010 --> 00:13:34,350
a less number of<font color="#CCCCCC"> nanak source we compare</font>

283
00:13:30,959 --> 00:13:36,209
our combinational circuit with PCF PCF

284
00:13:34,350 --> 00:13:38,490
at the time of writing<font color="#E5E5E5"> was the best</font>

285
00:13:36,209 --> 00:13:43,319
automatic tools for generating garble

286
00:13:38,490 --> 00:13:46,500
circuit so let's look<font color="#CCCCCC"> at GTD compared to</font>

287
00:13:43,320 --> 00:13:49,080
PCF and also MFE for example for

288
00:13:46,500 --> 00:13:51,750
multiplication<font color="#CCCCCC"> 64-bit we have nine point</font>

289
00:13:49,080 --> 00:13:54,720
three times a smaller circuit compared

290
00:13:51,750 --> 00:13:57,779
<font color="#CCCCCC">to what PCF can generate also at the</font>

291
00:13:54,720 --> 00:14:00,270
same time this eighty-four percent more

292
00:13:57,779 --> 00:14:02,580
optimized meaning the cost of<font color="#CCCCCC"> garbling</font>

293
00:14:00,270 --> 00:14:04,589
is reduced by eighty-four percent just

294
00:14:02,580 --> 00:14:07,649
by using hardware synthesis tools and

295
00:14:04,589 --> 00:14:11,940
hack them to optimize the circuit for

296
00:14:07,649 --> 00:14:15,990
garble circuit ok let's look at

297
00:14:11,940 --> 00:14:18,690
<font color="#E5E5E5">sequential circuit we</font><font color="#CCCCCC"> compare them with</font>

298
00:14:15,990 --> 00:14:23,100
our combination circuit and also PCF

299
00:14:18,690 --> 00:14:25,950
again multiplication 64 we can reduce

300
00:14:23,100 --> 00:14:28,290
<font color="#E5E5E5">the size of circuit by 20 times compared</font>

301
00:14:25,950 --> 00:14:30,899
to a combinational circuit by<font color="#E5E5E5"> sequential</font>

302
00:14:28,290 --> 00:14:37,230
<font color="#E5E5E5">circuit and 200 times compared to what</font>

303
00:14:30,899 --> 00:14:39,660
<font color="#CCCCCC">PCF can do so it's much more compact GTD</font>

304
00:14:37,230 --> 00:14:42,300
number of non<font color="#CCCCCC"> x you're compared</font><font color="#E5E5E5"> to PCF</font>

305
00:14:39,660 --> 00:14:44,959
is negative eighty<font color="#CCCCCC"> percent so the number</font>

306
00:14:42,300 --> 00:14:48,810
<font color="#CCCCCC">of non</font><font color="#E5E5E5"> XOR is reduced by eighty percent</font>

307
00:14:44,959 --> 00:14:50,640
but when we are looking<font color="#CCCCCC"> at GTD compared</font>

308
00:14:48,810 --> 00:14:52,619
to our combinational logic we see a

309
00:14:50,640 --> 00:14:55,439
<font color="#CCCCCC">positive number twenty-eight percent</font>

310
00:14:52,620 --> 00:14:58,350
more number of knowledge so this is due

311
00:14:55,440 --> 00:15:01,320
to the overhead of sequential circuit

312
00:14:58,350 --> 00:15:06,230
because multiplication<font color="#E5E5E5"> 64 it doesn't</font>

313
00:15:01,320 --> 00:15:09,420
have<font color="#E5E5E5"> a symmetric loop so here's the deal</font>

314
00:15:06,230 --> 00:15:12,180
we can<font color="#E5E5E5"> use a combinational circuit and</font>

315
00:15:09,420 --> 00:15:14,339
have a very optimized circuit but<font color="#E5E5E5"> it's</font>

316
00:15:12,180 --> 00:15:18,120
<font color="#E5E5E5">not scalable we cannot do it for example</font>

317
00:15:14,339 --> 00:15:20,850
<font color="#CCCCCC">for multiplication 1024 it's not</font>

318
00:15:18,120 --> 00:15:23,610
practical we have to make a sequential

319
00:15:20,850 --> 00:15:26,839
circuit to be able<font color="#E5E5E5"> to optimize it using</font>

320
00:15:23,610 --> 00:15:30,329
these tools because they are<font color="#E5E5E5"> designed to</font>

321
00:15:26,839 --> 00:15:32,010
optimize small circuits for the actual

322
00:15:30,329 --> 00:15:33,550
<font color="#E5E5E5">hardware they are not designed to do</font>

323
00:15:32,010 --> 00:15:37,200
combinational circuit force

324
00:15:33,550 --> 00:15:41,319
huge circuit but<font color="#CCCCCC"> still you can see the</font>

325
00:15:37,200 --> 00:15:43,570
GTD the comparison<font color="#CCCCCC"> between onyx or is</font>

326
00:15:41,320 --> 00:15:48,190
still better than previous<font color="#E5E5E5"> four because</font>

327
00:15:43,570 --> 00:15:55,029
these tools are<font color="#CCCCCC"> designer for making</font>

328
00:15:48,190 --> 00:15:57,430
optimized circuit<font color="#CCCCCC"> okay in conclusion GC</font>

329
00:15:55,029 --> 00:16:02,560
we look at GC boolean circuit generation

330
00:15:57,430 --> 00:16:05,739
as a typical logic synthesis task where

331
00:16:02,560 --> 00:16:08,500
we change the objective of hardware

332
00:16:05,740 --> 00:16:10,690
synthesis tools for generating an

333
00:16:08,500 --> 00:16:12,700
<font color="#CCCCCC">optimized circuit for garble circuit</font>

334
00:16:10,690 --> 00:16:16,470
meaning reducing number of non exploring

335
00:16:12,700 --> 00:16:19,240
these circuits we also<font color="#CCCCCC"> introduce</font>

336
00:16:16,470 --> 00:16:22,360
sequential circuit description which

337
00:16:19,240 --> 00:16:24,839
<font color="#CCCCCC">beside</font><font color="#E5E5E5"> reducing the size of circuit it</font>

338
00:16:22,360 --> 00:16:27,610
makes<font color="#E5E5E5"> us an able to do many exciting</font>

339
00:16:24,839 --> 00:16:29,560
circuit that are<font color="#CCCCCC"> available in hardware</font>

340
00:16:27,610 --> 00:16:31,329
design for example chain nearest

341
00:16:29,560 --> 00:16:33,399
neighbor using sequential circuit is

342
00:16:31,329 --> 00:16:35,079
pretty easy to<font color="#E5E5E5"> think of boiled with</font>

343
00:16:33,399 --> 00:16:38,800
combinational circuit is very hard to

344
00:16:35,079 --> 00:16:41,680
design also a scalable private function

345
00:16:38,800 --> 00:16:44,020
is to be<font color="#E5E5E5"> using a processor circuit which</font>

346
00:16:41,680 --> 00:16:47,560
the circuit size is independent of the

347
00:16:44,020 --> 00:16:49,420
number<font color="#E5E5E5"> of instruction that we have so</font><font color="#CCCCCC"> we</font>

348
00:16:47,560 --> 00:16:52,029
can see using those knowledge that we

349
00:16:49,420 --> 00:16:54,279
had in the hardware design and hardware

350
00:16:52,029 --> 00:16:58,870
synthesis makes us<font color="#CCCCCC"> an able to do many</font>

351
00:16:54,279 --> 00:17:01,740
exciting<font color="#E5E5E5"> things for garble circuit thank</font>

352
00:16:58,870 --> 00:17:01,740
you in<font color="#E5E5E5"> Christian</font>

353
00:17:06,750 --> 00:17:14,140
thanks for the talk so use you surely

354
00:17:12,280 --> 00:17:16,810
and<font color="#E5E5E5"> it said</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the slide you have to</font>

355
00:17:14,140 --> 00:17:19,030
have a separate garbling table and

356
00:17:16,810 --> 00:17:22,419
separate wire labels for each time

357
00:17:19,030 --> 00:17:25,740
around oh the thing you said you

358
00:17:22,420 --> 00:17:28,600
actually replace the garble table and

359
00:17:25,740 --> 00:17:31,600
wire labels each time on the same

360
00:17:28,600 --> 00:17:33,219
circuit so we'd only need to store them

361
00:17:31,600 --> 00:17:35,830
in a memory you just replace them

362
00:17:33,220 --> 00:17:38,980
because we don't need them<font color="#CCCCCC"> okay so you</font>

363
00:17:35,830 --> 00:17:41,530
you are still generating yeah it's still

364
00:17:38,980 --> 00:17:43,240
the time and everything is saying<font color="#E5E5E5"> okay</font>

365
00:17:41,530 --> 00:17:45,760
with sequential circuit you're<font color="#E5E5E5"> just</font>

366
00:17:43,240 --> 00:17:47,800
throwing you can yeah just repeating the

367
00:17:45,760 --> 00:17:50,020
circuit<font color="#E5E5E5"> and send the garble table for</font>

368
00:17:47,800 --> 00:17:52,210
example to the other user but the thing

369
00:17:50,020 --> 00:17:54,700
<font color="#CCCCCC">is the memory footprint is much smaller</font>

370
00:17:52,210 --> 00:17:57,490
because we know how much why we have in

371
00:17:54,700 --> 00:18:00,280
this circuit right so some previous work

372
00:17:57,490 --> 00:18:02,170
also could figure out that<font color="#CCCCCC"> okay I'm</font>

373
00:18:00,280 --> 00:18:03,970
never going<font color="#E5E5E5"> to use these wires again and</font>

374
00:18:02,170 --> 00:18:06,760
dump it out of memory yeah but the thing

375
00:18:03,970 --> 00:18:09,940
is here is very<font color="#CCCCCC"> simpler we exactly know</font>

376
00:18:06,760 --> 00:18:11,830
before starting<font color="#E5E5E5"> to garbling or</font>

377
00:18:09,940 --> 00:18:14,050
evaluation we know exactly<font color="#CCCCCC"> how much</font>

378
00:18:11,830 --> 00:18:16,689
memory we have to and we have to

379
00:18:14,050 --> 00:18:22,210
allocate for this circuit because we

380
00:18:16,690 --> 00:18:24,640
have the surface<font color="#CCCCCC"> at a time thank you so</font>

381
00:18:22,210 --> 00:18:26,320
I yes one question sir just someone who

382
00:18:24,640 --> 00:18:27,670
doesn't work with these Hardware

383
00:18:26,320 --> 00:18:29,710
synthesis tools it seems like they're

384
00:18:27,670 --> 00:18:31,690
these these<font color="#E5E5E5"> magic super powerful tools</font>

385
00:18:29,710 --> 00:18:34,540
people<font color="#CCCCCC"> in</font><font color="#E5E5E5"> working on for 40 years yeah</font>

386
00:18:31,690 --> 00:18:37,150
that you put a circuit put logics

387
00:18:34,540 --> 00:18:39,700
description in and get circuits out so

388
00:18:37,150 --> 00:18:41,680
the questions can you you<font color="#E5E5E5"> found this</font>

389
00:18:39,700 --> 00:18:44,140
trade-off between the garbling<font color="#CCCCCC"> cost and</font>

390
00:18:41,680 --> 00:18:46,600
the<font color="#E5E5E5"> the memory footprint could that be</font>

391
00:18:44,140 --> 00:18:49,420
part of the input to the synthesis tools

392
00:18:46,600 --> 00:18:52,750
if you didn't<font color="#E5E5E5"> want to</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> want actually</font>

393
00:18:49,420 --> 00:18:54,700
it doesn't we sweep the number of

394
00:18:52,750 --> 00:18:58,030
folding the circuit or the number of

395
00:18:54,700 --> 00:19:00,490
sequential circuit we need to evaluate a

396
00:18:58,030 --> 00:19:03,160
sequential circuit we sweep it from one

397
00:19:00,490 --> 00:19:06,430
to<font color="#CCCCCC"> the maximum</font><font color="#E5E5E5"> and we find out which</font><font color="#CCCCCC"> one</font>

398
00:19:03,160 --> 00:19:07,990
is better actually the number<font color="#CCCCCC"> of the</font>

399
00:19:06,430 --> 00:19:11,740
size of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> circuit will reduce</font>

400
00:19:07,990 --> 00:19:13,720
definitely and<font color="#E5E5E5"> also the number of Nanak</font>

401
00:19:11,740 --> 00:19:16,110
soul will be increased because of the

402
00:19:13,720 --> 00:19:19,630
asymmetry if it doesn't have a

403
00:19:16,110 --> 00:19:22,689
asymmetric in its loop it will be static

404
00:19:19,630 --> 00:19:25,210
so it actually depends on the function

405
00:19:22,690 --> 00:19:30,540
we cannot ask those tools to do it for

406
00:19:25,210 --> 00:19:30,540
<font color="#E5E5E5">us we need to do it manually thank you</font>

