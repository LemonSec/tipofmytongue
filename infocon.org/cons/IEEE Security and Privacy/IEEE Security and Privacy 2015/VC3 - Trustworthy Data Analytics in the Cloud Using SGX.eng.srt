1
00:00:04,870 --> 00:00:09,980
so hello good morning everyone

2
00:00:07,939 --> 00:00:11,720
so I'll be presenting<font color="#CCCCCC"> we</font><font color="#E5E5E5"> see three</font>

3
00:00:09,980 --> 00:00:13,580
trustworthy light analytics in the cloud

4
00:00:11,720 --> 00:00:15,710
<font color="#E5E5E5">using</font><font color="#CCCCCC"> SGX and this is joint work with</font>

5
00:00:13,580 --> 00:00:18,650
Felix Schuster Cedric<font color="#E5E5E5"> moon a Christian</font>

6
00:00:15,710 --> 00:00:19,450
<font color="#E5E5E5">series Marcos panade reason in</font><font color="#CCCCCC"> micros in</font>

7
00:00:18,650 --> 00:00:22,099
of<font color="#E5E5E5"> each</font>

8
00:00:19,450 --> 00:00:25,640
silly<font color="#CCCCCC"> Felix should be doing the talk but</font>

9
00:00:22,100 --> 00:00:27,530
but he<font color="#E5E5E5"> lost his plane so the problem we</font>

10
00:00:25,640 --> 00:00:29,539
<font color="#CCCCCC">are addressing here with this work is</font>

11
00:00:27,530 --> 00:00:31,789
that<font color="#E5E5E5"> cloud computing introduces privacy</font>

12
00:00:29,539 --> 00:00:35,690
risks<font color="#E5E5E5"> so if a user wants to do cloud</font>

13
00:00:31,789 --> 00:00:37,970
analytics today<font color="#CCCCCC"> they prepare some data</font>

14
00:00:35,690 --> 00:00:40,280
and<font color="#CCCCCC"> some code then they upload the code</font>

15
00:00:37,970 --> 00:00:42,710
to the<font color="#E5E5E5"> cloud the</font><font color="#CCCCCC"> clouds</font><font color="#E5E5E5"> the untrusted</font>

16
00:00:40,280 --> 00:00:44,270
cloud runs the codes<font color="#E5E5E5"> over</font><font color="#CCCCCC"> the data</font>

17
00:00:42,710 --> 00:00:47,030
produces some results and<font color="#E5E5E5"> the results</font>

18
00:00:44,270 --> 00:00:49,190
<font color="#CCCCCC">are shipped back to</font><font color="#E5E5E5"> the user</font><font color="#CCCCCC"> so what can</font>

19
00:00:47,030 --> 00:00:51,440
go wrong<font color="#CCCCCC"> well a lot of things</font><font color="#E5E5E5"> the cloud</font>

20
00:00:49,190 --> 00:00:53,809
may leak confidential data encoded my

21
00:00:51,440 --> 00:00:55,519
temper with<font color="#E5E5E5"> the code in the data for</font>

22
00:00:53,809 --> 00:00:59,030
instance<font color="#E5E5E5"> privileged cloud operators may</font>

23
00:00:55,520 --> 00:01:01,129
leak the data intruders in<font color="#E5E5E5"> the data</font>

24
00:00:59,030 --> 00:01:02,600
centers<font color="#E5E5E5"> may also leak the data and we</font>

25
00:01:01,129 --> 00:01:06,829
know that<font color="#E5E5E5"> governments may ask for access</font>

26
00:01:02,600 --> 00:01:08,420
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the beta so encrypting data on disk</font>

27
00:01:06,829 --> 00:01:09,889
is obviously not<font color="#E5E5E5"> enough for this</font><font color="#CCCCCC"> because</font>

28
00:01:08,420 --> 00:01:14,420
users want<font color="#CCCCCC"> to perform general-purpose</font>

29
00:01:09,889 --> 00:01:17,060
computations on the data<font color="#E5E5E5"> and fully</font>

30
00:01:14,420 --> 00:01:19,009
homomorphic encryption is great but it's

31
00:01:17,060 --> 00:01:20,060
still inefficient for general-purpose

32
00:01:19,009 --> 00:01:21,350
computation

33
00:01:20,060 --> 00:01:23,600
although partial homomorphic encryption

34
00:01:21,350 --> 00:01:25,939
schemes have<font color="#E5E5E5"> been shown to be applicable</font>

35
00:01:23,600 --> 00:01:28,548
to restricted cases<font color="#CCCCCC"> so</font><font color="#E5E5E5"> people have</font>

36
00:01:25,939 --> 00:01:31,579
looked<font color="#CCCCCC"> at using trusted Hardware to</font>

37
00:01:28,549 --> 00:01:34,009
protect these workloads<font color="#E5E5E5"> from from</font>

38
00:01:31,579 --> 00:01:35,869
attacks from the<font color="#E5E5E5"> cloud but previous work</font>

39
00:01:34,009 --> 00:01:39,109
<font color="#E5E5E5">doesn't guarantee confidentiality and</font>

40
00:01:35,869 --> 00:01:42,590
integrity for<font color="#E5E5E5"> all code and data or it</font>

41
00:01:39,109 --> 00:01:44,839
has a very large<font color="#CCCCCC"> tcv</font><font color="#E5E5E5"> in previous systems</font>

42
00:01:42,590 --> 00:01:46,429
<font color="#E5E5E5">don't guarantee integrity of the fool</font>

43
00:01:44,840 --> 00:01:49,399
<font color="#CCCCCC">that distributed data and all these</font>

44
00:01:46,429 --> 00:01:52,179
computations<font color="#E5E5E5"> so in</font><font color="#CCCCCC"> vc3 we are addressing</font>

45
00:01:49,399 --> 00:01:55,249
this problem for MapReduce computation

46
00:01:52,179 --> 00:01:57,139
<font color="#CCCCCC">protects MapReduce computations from</font><font color="#E5E5E5"> the</font>

47
00:01:55,249 --> 00:01:59,208
<font color="#CCCCCC">untrusted cloud it</font><font color="#E5E5E5"> ensures</font>

48
00:01:57,139 --> 00:02:02,359
<font color="#E5E5E5">confidentiality of analytics code and</font>

49
00:01:59,209 --> 00:02:04,279
data and we use trusted<font color="#CCCCCC"> SGX processors</font>

50
00:02:02,359 --> 00:02:07,609
<font color="#CCCCCC">and compiler enforced invariants</font><font color="#E5E5E5"> to</font>

51
00:02:04,279 --> 00:02:09,619
achieve this<font color="#E5E5E5"> we also ensure integrity of</font>

52
00:02:07,609 --> 00:02:12,019
distributed MapReduce computations<font color="#E5E5E5"> and</font>

53
00:02:09,619 --> 00:02:12,840
we do<font color="#E5E5E5"> this</font><font color="#CCCCCC"> with a small software TCB and</font>

54
00:02:12,020 --> 00:02:15,780
lower

55
00:02:12,840 --> 00:02:17,400
so I'm going<font color="#E5E5E5"> to give you a quick</font>

56
00:02:15,780 --> 00:02:20,550
background on MapReduce and Intel SGX

57
00:02:17,400 --> 00:02:22,290
<font color="#CCCCCC">then I'll do an overview</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> vc3</font>

58
00:02:20,550 --> 00:02:24,540
design<font color="#E5E5E5"> I'll explain some details</font><font color="#CCCCCC"> about</font>

59
00:02:22,290 --> 00:02:26,609
<font color="#E5E5E5">our lightweight protocols and our</font>

60
00:02:24,540 --> 00:02:30,569
<font color="#CCCCCC">compiling</font><font color="#E5E5E5"> enforced</font><font color="#CCCCCC"> invariance</font><font color="#E5E5E5"> and I'll</font>

61
00:02:26,610 --> 00:02:33,120
<font color="#E5E5E5">conclude</font><font color="#CCCCCC"> with some numbers so MapReduce</font>

62
00:02:30,569 --> 00:02:35,790
is this very<font color="#E5E5E5"> popular data analytics</font>

63
00:02:33,120 --> 00:02:37,590
<font color="#E5E5E5">programming model and the idea is</font><font color="#CCCCCC"> very</font>

64
00:02:35,790 --> 00:02:40,200
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> if very simple so the</font><font color="#E5E5E5"> users</font>

65
00:02:37,590 --> 00:02:42,450
specify inputs as a set<font color="#E5E5E5"> of inputs pool</font>

66
00:02:40,200 --> 00:02:45,329
splits<font color="#E5E5E5"> and they write map and reduce</font>

67
00:02:42,450 --> 00:02:47,790
functions<font color="#E5E5E5"> the data analytics framework</font>

68
00:02:45,330 --> 00:02:49,709
then runs the<font color="#E5E5E5"> map functions in parallel</font>

69
00:02:47,790 --> 00:02:52,340
<font color="#E5E5E5">over the input splits and this can be</font>

70
00:02:49,709 --> 00:02:54,450
very<font color="#CCCCCC"> large datasets</font><font color="#E5E5E5"> think terabytes plus</font>

71
00:02:52,340 --> 00:02:57,239
and the map functions output

72
00:02:54,450 --> 00:02:59,339
<font color="#E5E5E5">intermediate key value pairs the system</font>

73
00:02:57,239 --> 00:03:01,349
then does a group<font color="#E5E5E5"> by on the keys of the</font>

74
00:02:59,340 --> 00:03:04,380
inter intermediate key value pairs<font color="#E5E5E5"> and</font>

75
00:03:01,349 --> 00:03:06,030
calls the<font color="#CCCCCC"> reduced functions in in</font>

76
00:03:04,380 --> 00:03:08,099
reducer nodes and the reducer nodes

77
00:03:06,030 --> 00:03:10,680
output<font color="#E5E5E5"> results so it's a very simple</font>

78
00:03:08,099 --> 00:03:12,750
programming model<font color="#E5E5E5"> but it is very popular</font>

79
00:03:10,680 --> 00:03:15,690
<font color="#CCCCCC">and it is very useful to do data</font>

80
00:03:12,750 --> 00:03:18,510
analytics the other piece of<font color="#CCCCCC"> background</font>

81
00:03:15,690 --> 00:03:21,090
is Intel SGX<font color="#CCCCCC"> so SGX is a set of</font>

82
00:03:18,510 --> 00:03:24,298
extensions<font color="#E5E5E5"> to the Intel instruction set</font>

83
00:03:21,090 --> 00:03:26,459
architecture that<font color="#E5E5E5"> Intel has defined and</font>

84
00:03:24,299 --> 00:03:29,010
what is these instructions<font color="#E5E5E5"> allowed me to</font>

85
00:03:26,459 --> 00:03:32,760
<font color="#E5E5E5">do is to it they allow a</font><font color="#CCCCCC"> user mode</font>

86
00:03:29,010 --> 00:03:34,709
process to<font color="#CCCCCC"> define a region</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> a virtual</font>

87
00:03:32,760 --> 00:03:37,440
memory<font color="#E5E5E5"> and</font><font color="#CCCCCC"> say that that</font><font color="#E5E5E5"> region of</font>

88
00:03:34,709 --> 00:03:39,690
<font color="#E5E5E5">virtual memory is isolated from the rest</font>

89
00:03:37,440 --> 00:03:43,650
of the system<font color="#E5E5E5"> and</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> regions are</font>

90
00:03:39,690 --> 00:03:46,200
called<font color="#E5E5E5"> enclaves and</font><font color="#CCCCCC"> SGX supports TPM</font>

91
00:03:43,650 --> 00:03:49,590
like features like<font color="#E5E5E5"> sealing sealing and</font>

92
00:03:46,200 --> 00:03:51,328
attestation<font color="#CCCCCC"> and it also does encryption</font>

93
00:03:49,590 --> 00:03:54,450
when cache lines are evicted<font color="#E5E5E5"> from the</font>

94
00:03:51,329 --> 00:03:56,130
CPU and<font color="#E5E5E5"> are written back to</font><font color="#CCCCCC"> RAM and</font>

95
00:03:54,450 --> 00:03:58,500
finally<font color="#CCCCCC"> SGX</font>

96
00:03:56,130 --> 00:04:00,569
allows the<font color="#CCCCCC"> enclosure</font><font color="#E5E5E5"> to do fast</font><font color="#CCCCCC"> il</font>

97
00:03:58,500 --> 00:04:02,069
through shared memory so the code<font color="#CCCCCC"> that</font>

98
00:04:00,569 --> 00:04:04,679
he is running<font color="#E5E5E5"> inside of</font><font color="#CCCCCC"> these enclaves</font>

99
00:04:02,069 --> 00:04:07,458
can read and write freely from the full

100
00:04:04,680 --> 00:04:12,419
address<font color="#E5E5E5"> space and this can be used to do</font>

101
00:04:07,459 --> 00:04:14,280
fast idea so we are going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> secure</font>

102
00:04:12,419 --> 00:04:16,260
these<font color="#CCCCCC"> MapReduce data analytics</font>

103
00:04:14,280 --> 00:04:18,810
computations<font color="#E5E5E5"> and we are going to use as</font>

104
00:04:16,260 --> 00:04:21,358
<font color="#E5E5E5">Jack's and</font><font color="#CCCCCC"> waves</font><font color="#E5E5E5"> so so at a</font><font color="#CCCCCC"> very high</font>

105
00:04:18,810 --> 00:04:24,150
level<font color="#CCCCCC"> what</font><font color="#E5E5E5"> we're going to</font><font color="#CCCCCC"> do is we're</font>

106
00:04:21,358 --> 00:04:25,870
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> encrypt data and</font><font color="#CCCCCC"> code and we're</font>

107
00:04:24,150 --> 00:04:29,109
going<font color="#E5E5E5"> to keep that data</font><font color="#CCCCCC"> encodes</font>

108
00:04:25,870 --> 00:04:32,770
<font color="#E5E5E5">cryptid except when it is inside these</font>

109
00:04:29,110 --> 00:04:34,990
<font color="#CCCCCC">SGX enclaves</font><font color="#E5E5E5"> and when it is inside</font><font color="#CCCCCC"> the</font>

110
00:04:32,770 --> 00:04:36,639
enclaves and inside the<font color="#CCCCCC"> CPU the data</font>

111
00:04:34,990 --> 00:04:38,380
will<font color="#E5E5E5"> be in</font><font color="#CCCCCC"> plaintext and the code</font><font color="#E5E5E5"> will</font>

112
00:04:36,639 --> 00:04:45,460
be in<font color="#CCCCCC"> plaintext and it can run</font>

113
00:04:38,380 --> 00:04:48,460
<font color="#CCCCCC">efficiently inside the CPU</font><font color="#E5E5E5"> so is this it</font>

114
00:04:45,460 --> 00:04:50,198
<font color="#CCCCCC">are</font><font color="#E5E5E5"> we done now</font><font color="#CCCCCC"> there are</font><font color="#E5E5E5"> lots of</font>

115
00:04:48,460 --> 00:04:53,469
challenges<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> need to address</font><font color="#E5E5E5"> here</font>

116
00:04:50,199 --> 00:04:56,740
to make a practical<font color="#CCCCCC"> system that works</font>

117
00:04:53,470 --> 00:04:59,199
for data analytics computations<font color="#E5E5E5"> one of</font>

118
00:04:56,740 --> 00:05:01,690
the challenges is how<font color="#E5E5E5"> to partition the</font>

119
00:04:59,199 --> 00:05:04,270
system<font color="#E5E5E5"> to achieve a small</font><font color="#CCCCCC"> TCB</font><font color="#E5E5E5"> what is</font>

120
00:05:01,690 --> 00:05:06,490
<font color="#E5E5E5">exactly this code that we trust</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get</font>

121
00:05:04,270 --> 00:05:08,859
access<font color="#E5E5E5"> to the data we would like to keep</font>

122
00:05:06,490 --> 00:05:10,960
that<font color="#CCCCCC"> as small</font><font color="#E5E5E5"> as possible the other</font>

123
00:05:08,860 --> 00:05:14,229
challenge is to guarantee integrity of

124
00:05:10,960 --> 00:05:17,198
the whole distributed computation<font color="#E5E5E5"> the</font>

125
00:05:14,229 --> 00:05:19,780
<font color="#E5E5E5">CPUs protect these regions</font><font color="#CCCCCC"> inside</font><font color="#E5E5E5"> the</font>

126
00:05:17,199 --> 00:05:22,210
single<font color="#E5E5E5"> machine but to build a full</font>

127
00:05:19,780 --> 00:05:24,340
distributed system we are<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to be</font>

128
00:05:22,210 --> 00:05:26,138
<font color="#E5E5E5">using many machines and at some point</font>

129
00:05:24,340 --> 00:05:28,090
<font color="#E5E5E5">data needs to come</font><font color="#CCCCCC"> out of</font><font color="#E5E5E5"> these regions</font>

130
00:05:26,139 --> 00:05:30,729
and it is handed over<font color="#CCCCCC"> to the operating</font>

131
00:05:28,090 --> 00:05:32,349
<font color="#CCCCCC">system the operating system can do them</font>

132
00:05:30,729 --> 00:05:35,710
many bad things<font color="#CCCCCC"> it can corrupt</font><font color="#E5E5E5"> the data</font>

133
00:05:32,349 --> 00:05:37,510
<font color="#E5E5E5">duplicate it drop it and if we don't</font><font color="#CCCCCC"> do</font>

134
00:05:35,710 --> 00:05:38,950
<font color="#E5E5E5">anything we wouldn't be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

135
00:05:37,510 --> 00:05:42,789
guarantee integrity of the<font color="#E5E5E5"> full</font>

136
00:05:38,950 --> 00:05:45,010
computation<font color="#CCCCCC"> the final challenge that we</font>

137
00:05:42,789 --> 00:05:46,510
need<font color="#CCCCCC"> to address is that the code</font><font color="#E5E5E5"> that is</font>

138
00:05:45,010 --> 00:05:49,360
running<font color="#E5E5E5"> inside</font><font color="#CCCCCC"> of these</font><font color="#E5E5E5"> regions</font><font color="#CCCCCC"> my</font>

139
00:05:46,510 --> 00:05:52,300
<font color="#CCCCCC">heavens safe memory accesses</font><font color="#E5E5E5"> and we</font>

140
00:05:49,360 --> 00:05:54,789
would like to<font color="#E5E5E5"> prevent leaks</font><font color="#CCCCCC"> due to this</font>

141
00:05:52,300 --> 00:05:56,919
unsafe memory accesses<font color="#E5E5E5"> and finally I</font>

142
00:05:54,789 --> 00:05:59,919
will just add as a bonus we would like

143
00:05:56,919 --> 00:06:03,219
<font color="#CCCCCC">to integrate</font><font color="#E5E5E5"> our design with existing</font>

144
00:05:59,919 --> 00:06:06,549
<font color="#CCCCCC">cloud frameworks so that we can easily</font>

145
00:06:03,220 --> 00:06:10,360
<font color="#E5E5E5">deploy this on existing data analytics</font>

146
00:06:06,550 --> 00:06:12,880
frameworks<font color="#CCCCCC"> ok so the first challenge</font><font color="#E5E5E5"> is</font>

147
00:06:10,360 --> 00:06:17,020
to partition the system to minimize<font color="#E5E5E5"> the</font>

148
00:06:12,880 --> 00:06:19,180
<font color="#CCCCCC">TCB</font><font color="#E5E5E5"> so what we did there was we we we</font>

149
00:06:17,020 --> 00:06:20,830
defined a simple programming model the

150
00:06:19,180 --> 00:06:24,070
traditional MapReduce programming model

151
00:06:20,830 --> 00:06:26,680
<font color="#E5E5E5">and users write code in C++ they write</font>

152
00:06:24,070 --> 00:06:29,650
map and reduce functions<font color="#E5E5E5"> we link</font><font color="#CCCCCC"> that</font>

153
00:06:26,680 --> 00:06:31,570
user<font color="#E5E5E5"> rate</font><font color="#CCCCCC"> Analytics code with a small</font>

154
00:06:29,650 --> 00:06:33,250
library<font color="#E5E5E5"> that includes in our prototype</font>

155
00:06:31,570 --> 00:06:34,930
mathematical and string functions so

156
00:06:33,250 --> 00:06:37,240
<font color="#E5E5E5">this would be typically you know they</font>

157
00:06:34,930 --> 00:06:40,990
<font color="#CCCCCC">turn out six libraries</font>

158
00:06:37,240 --> 00:06:43,690
<font color="#E5E5E5">we encrypt this secret code and we we</font>

159
00:06:40,990 --> 00:06:45,880
bind it to a small<font color="#E5E5E5"> amount of public code</font>

160
00:06:43,690 --> 00:06:48,639
that implements our public protocols<font color="#CCCCCC"> and</font>

161
00:06:45,880 --> 00:06:52,870
<font color="#E5E5E5">we put all</font><font color="#CCCCCC"> of this in a dll</font><font color="#E5E5E5"> where the</font>

162
00:06:48,639 --> 00:06:55,720
secret<font color="#E5E5E5"> code is encrypted</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> oh this is</font>

163
00:06:52,870 --> 00:06:57,759
<font color="#E5E5E5">going to be the the code that we're</font>

164
00:06:55,720 --> 00:07:00,430
going to<font color="#E5E5E5"> trust and give access to</font><font color="#CCCCCC"> the</font>

165
00:06:57,759 --> 00:07:03,160
<font color="#E5E5E5">data</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> overall we are talking</font><font color="#CCCCCC"> about a</font>

166
00:07:00,430 --> 00:07:06,250
<font color="#E5E5E5">few thousand lines of</font><font color="#CCCCCC"> code so it's it's</font>

167
00:07:03,160 --> 00:07:09,610
a very<font color="#E5E5E5"> very</font><font color="#CCCCCC"> small amount of trusted code</font>

168
00:07:06,250 --> 00:07:11,349
outside<font color="#CCCCCC"> so this code then has a very</font>

169
00:07:09,610 --> 00:07:14,289
narrow interface with the rest of<font color="#E5E5E5"> the</font>

170
00:07:11,349 --> 00:07:16,570
system<font color="#CCCCCC"> the code just reads and writes</font>

171
00:07:14,289 --> 00:07:21,310
key value pairs<font color="#E5E5E5"> from the rest of the</font>

172
00:07:16,570 --> 00:07:24,190
data<font color="#CCCCCC"> analytic system and</font><font color="#E5E5E5"> outside the the</font>

173
00:07:21,310 --> 00:07:27,340
<font color="#CCCCCC">trusted boundary the the code</font><font color="#E5E5E5"> that runs</font>

174
00:07:24,190 --> 00:07:30,550
in the the untrusted<font color="#E5E5E5"> area</font><font color="#CCCCCC"> those things</font>

175
00:07:27,340 --> 00:07:32,679
like<font color="#E5E5E5"> creating these</font><font color="#CCCCCC"> SGX enclaves</font><font color="#E5E5E5"> talking</font>

176
00:07:30,550 --> 00:07:35,169
with<font color="#E5E5E5"> the operating system binding to and</font>

177
00:07:32,680 --> 00:07:38,050
<font color="#E5E5E5">modify the loop installations but all of</font>

178
00:07:35,169 --> 00:07:40,210
<font color="#E5E5E5">that code which is if you include the</font>

179
00:07:38,050 --> 00:07:42,310
operating system<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the hypervisor is a</font>

180
00:07:40,210 --> 00:07:45,789
lot of code<font color="#CCCCCC"> but all of that</font><font color="#E5E5E5"> code is</font>

181
00:07:42,310 --> 00:07:48,250
untrusted so what we<font color="#E5E5E5"> we achieve here</font>

182
00:07:45,789 --> 00:07:50,259
with this design is that<font color="#CCCCCC"> the TCB is</font>

183
00:07:48,250 --> 00:07:53,560
essentially the code that we put<font color="#CCCCCC"> inside</font>

184
00:07:50,259 --> 00:07:56,830
of<font color="#E5E5E5"> this</font><font color="#CCCCCC"> DLL</font><font color="#E5E5E5"> the secret date Analytics</font>

185
00:07:53,560 --> 00:08:00,370
code that the user writes and the

186
00:07:56,830 --> 00:08:02,139
hardware<font color="#CCCCCC"> TCB is the SGX processor so the</font>

187
00:08:00,370 --> 00:08:04,930
software<font color="#CCCCCC"> tcv is three orders of</font>

188
00:08:02,139 --> 00:08:10,479
<font color="#CCCCCC">magnitude smaller then the</font><font color="#E5E5E5"> operating</font>

189
00:08:04,930 --> 00:08:13,990
system hypervisor<font color="#CCCCCC"> and a dupe so we have</font>

190
00:08:10,479 --> 00:08:17,530
this<font color="#E5E5E5"> very small</font><font color="#CCCCCC"> TC v so so this</font><font color="#E5E5E5"> is how</font>

191
00:08:13,990 --> 00:08:19,270
we package<font color="#E5E5E5"> the code to do the</font><font color="#CCCCCC"> data index</font>

192
00:08:17,530 --> 00:08:22,059
computations then we ship it<font color="#CCCCCC"> to the</font>

193
00:08:19,270 --> 00:08:26,049
cloud<font color="#E5E5E5"> we then run a key exchange and</font>

194
00:08:22,060 --> 00:08:28,060
remote or at<font color="#E5E5E5"> a session protocol to share</font>

195
00:08:26,050 --> 00:08:29,979
secret keys with<font color="#CCCCCC"> the code</font><font color="#E5E5E5"> I'll refer you</font>

196
00:08:28,060 --> 00:08:32,950
<font color="#CCCCCC">to the paper</font><font color="#E5E5E5"> due to the paper for</font>

197
00:08:29,979 --> 00:08:34,958
details<font color="#E5E5E5"> on that and once the key</font>

198
00:08:32,950 --> 00:08:36,760
exchange protocol completes the code is

199
00:08:34,958 --> 00:08:39,939
ready to run and<font color="#E5E5E5"> we can run the data</font>

200
00:08:36,760 --> 00:08:42,370
analytics<font color="#CCCCCC"> job so the date and the the</font>

201
00:08:39,940 --> 00:08:44,440
the<font color="#CCCCCC"> the our job execution</font><font color="#E5E5E5"> protocol is</font>

202
00:08:42,370 --> 00:08:46,870
<font color="#CCCCCC">going to do the normal sort</font><font color="#E5E5E5"> of data</font>

203
00:08:44,440 --> 00:08:49,240
processing<font color="#CCCCCC"> that you'd expect from a</font>

204
00:08:46,870 --> 00:08:50,590
MapReduce<font color="#E5E5E5"> job but it's going to do a few</font>

205
00:08:49,240 --> 00:08:52,630
additional<font color="#CCCCCC"> things</font>

206
00:08:50,590 --> 00:08:54,640
so the compute nodes<font color="#CCCCCC"> are going to output</font>

207
00:08:52,630 --> 00:08:57,220
some secure summaries of<font color="#E5E5E5"> the work they</font>

208
00:08:54,640 --> 00:08:59,530
<font color="#CCCCCC">did</font><font color="#E5E5E5"> and the and these secure summaries</font>

209
00:08:57,220 --> 00:09:02,770
are going to be aggregated<font color="#E5E5E5"> conceptually</font>

210
00:08:59,530 --> 00:09:04,420
at a<font color="#E5E5E5"> verifier node and a verifier now is</font>

211
00:09:02,770 --> 00:09:07,300
going<font color="#CCCCCC"> to check the consistency of all of</font>

212
00:09:04,420 --> 00:09:11,140
these summaries and detect any tampering

213
00:09:07,300 --> 00:09:13,000
with the<font color="#E5E5E5"> computation and both the key</font>

214
00:09:11,140 --> 00:09:15,220
exchange protocol<font color="#E5E5E5"> and the job execution</font>

215
00:09:13,000 --> 00:09:17,260
protocol<font color="#E5E5E5"> integrate with and modify that</font>

216
00:09:15,220 --> 00:09:19,630
<font color="#E5E5E5">loop we can run this on and modify the</font>

217
00:09:17,260 --> 00:09:22,870
<font color="#CCCCCC">ado per installations and the</font><font color="#E5E5E5"> the</font>

218
00:09:19,630 --> 00:09:24,430
protocols tolerate<font color="#E5E5E5"> filing now straggling</font>

219
00:09:22,870 --> 00:09:26,860
<font color="#CCCCCC">nodes the usual things that you expect</font>

220
00:09:24,430 --> 00:09:28,510
<font color="#CCCCCC">from</font><font color="#E5E5E5"> these data analytics frameworks so</font>

221
00:09:26,860 --> 00:09:31,630
let me give you<font color="#E5E5E5"> a little bit</font><font color="#CCCCCC"> of more</font>

222
00:09:28,510 --> 00:09:33,430
details on the job execution<font color="#E5E5E5"> protocol so</font>

223
00:09:31,630 --> 00:09:34,630
during the normal data analytics

224
00:09:33,430 --> 00:09:36,250
<font color="#E5E5E5">computation the mappers will be</font>

225
00:09:34,630 --> 00:09:39,640
<font color="#E5E5E5">producing these intermediate key value</font>

226
00:09:36,250 --> 00:09:42,370
pairs to send to the reducers so we

227
00:09:39,640 --> 00:09:43,840
change this and we we have a different

228
00:09:42,370 --> 00:09:46,060
format for<font color="#CCCCCC"> this intermediate</font><font color="#E5E5E5"> key value</font>

229
00:09:43,840 --> 00:09:49,450
pairs so in we're going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> put the</font>

230
00:09:46,060 --> 00:09:52,540
<font color="#E5E5E5">original key value pair encode it inside</font>

231
00:09:49,450 --> 00:09:55,720
a new key value<font color="#E5E5E5"> pair and we encrypt</font><font color="#CCCCCC"> that</font>

232
00:09:52,540 --> 00:09:57,280
with<font color="#E5E5E5"> the AES GCM and for the key we're</font>

233
00:09:55,720 --> 00:10:00,430
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> replace the key with a</font>

234
00:09:57,280 --> 00:10:04,150
pseudo-random function over the<font color="#E5E5E5"> original</font>

235
00:10:00,430 --> 00:10:06,699
<font color="#E5E5E5">key and in the</font><font color="#CCCCCC"> value we have</font><font color="#E5E5E5"> some extra</font>

236
00:10:04,150 --> 00:10:08,650
information like job<font color="#CCCCCC"> identifier and</font>

237
00:10:06,700 --> 00:10:11,050
<font color="#E5E5E5">identify for</font><font color="#CCCCCC"> the mapper a</font><font color="#E5E5E5"> sequence</font>

238
00:10:08,650 --> 00:10:14,380
number<font color="#CCCCCC"> to allow reducers to</font><font color="#E5E5E5"> detect</font>

239
00:10:11,050 --> 00:10:16,390
duplicates<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> still allows</font><font color="#CCCCCC"> the</font>

240
00:10:14,380 --> 00:10:19,270
system to<font color="#E5E5E5"> do the aggregation on the</font>

241
00:10:16,390 --> 00:10:23,560
<font color="#CCCCCC">inter in on the</font><font color="#E5E5E5"> intermediate keys so</font>

242
00:10:19,270 --> 00:10:27,460
<font color="#E5E5E5">that</font><font color="#CCCCCC"> precedes as usual but the user</font><font color="#E5E5E5"> also</font>

243
00:10:23,560 --> 00:10:29,709
<font color="#E5E5E5">writes the tools that user uses</font><font color="#CCCCCC"> write</font><font color="#E5E5E5"> a</font>

244
00:10:27,460 --> 00:10:32,050
job specification that includes the set

245
00:10:29,710 --> 00:10:34,180
of input splits<font color="#CCCCCC"> that the job is</font><font color="#E5E5E5"> supposed</font>

246
00:10:32,050 --> 00:10:38,560
<font color="#CCCCCC">to process</font><font color="#E5E5E5"> and the code that</font><font color="#CCCCCC"> is supposed</font>

247
00:10:34,180 --> 00:10:42,459
to<font color="#CCCCCC"> process those input splits and</font><font color="#E5E5E5"> this</font>

248
00:10:38,560 --> 00:10:44,650
is sent to logically to this verifier

249
00:10:42,460 --> 00:10:46,720
node and the mappers also sent to<font color="#E5E5E5"> the</font>

250
00:10:44,650 --> 00:10:49,870
verifier node<font color="#E5E5E5"> information information</font>

251
00:10:46,720 --> 00:10:52,060
<font color="#E5E5E5">such as what input splits were processed</font>

252
00:10:49,870 --> 00:10:54,910
by each mapper<font color="#E5E5E5"> how many intermediate key</font>

253
00:10:52,060 --> 00:10:57,790
value pairs were sent from each mapper

254
00:10:54,910 --> 00:11:00,910
to each reducer<font color="#E5E5E5"> likewise the reducers</font>

255
00:10:57,790 --> 00:11:02,620
send summaries<font color="#CCCCCC"> to the verifier including</font>

256
00:11:00,910 --> 00:11:03,670
what was the set of<font color="#CCCCCC"> mappers they</font>

257
00:11:02,620 --> 00:11:05,560
received information

258
00:11:03,670 --> 00:11:09,880
how many key value pairs they received

259
00:11:05,560 --> 00:11:11,920
<font color="#E5E5E5">from each each mapper for instance this</font>

260
00:11:09,880 --> 00:11:13,930
allows the very fired<font color="#E5E5E5"> into to answer</font>

261
00:11:11,920 --> 00:11:15,640
these<font color="#E5E5E5"> questions</font><font color="#CCCCCC"> did mappers process all</font>

262
00:11:13,930 --> 00:11:18,430
the input data<font color="#E5E5E5"> was an input data</font>

263
00:11:15,640 --> 00:11:20,470
duplicated or dropped do the reducers

264
00:11:18,430 --> 00:11:22,780
agree on the set of<font color="#E5E5E5"> mappers that process</font>

265
00:11:20,470 --> 00:11:24,400
the data<font color="#CCCCCC"> did the reducers process</font><font color="#E5E5E5"> all</font>

266
00:11:22,780 --> 00:11:29,079
the intermediate key value pairs<font color="#CCCCCC"> that</font><font color="#E5E5E5"> am</font>

267
00:11:24,400 --> 00:11:30,730
a percent and if the verifier<font color="#E5E5E5"> can</font><font color="#CCCCCC"> answer</font>

268
00:11:29,080 --> 00:11:33,280
positively to all of these questions<font color="#E5E5E5"> and</font>

269
00:11:30,730 --> 00:11:36,070
it can certify<font color="#E5E5E5"> the output</font><font color="#CCCCCC"> of the</font>

270
00:11:33,280 --> 00:11:38,620
computation<font color="#CCCCCC"> and in the paper we also</font>

271
00:11:36,070 --> 00:11:41,110
show that<font color="#E5E5E5"> the verifier can be modeled as</font>

272
00:11:38,620 --> 00:11:46,420
<font color="#E5E5E5">a normal MapReduce job and can be ran on</font>

273
00:11:41,110 --> 00:11:48,400
the normal<font color="#CCCCCC"> MapReduce framework I'll not</font>

274
00:11:46,420 --> 00:11:50,650
hear<font color="#CCCCCC"> that our encoding of</font><font color="#E5E5E5"> the</font>

275
00:11:48,400 --> 00:11:52,870
<font color="#E5E5E5">intermediate key value the intermediate</font>

276
00:11:50,650 --> 00:11:54,699
key<font color="#E5E5E5"> leaks some information about the</font>

277
00:11:52,870 --> 00:11:57,130
distribution<font color="#E5E5E5"> of keys and we don't</font>

278
00:11:54,700 --> 00:11:59,110
address this in<font color="#E5E5E5"> this paper but we in</font>

279
00:11:57,130 --> 00:12:04,960
follow<font color="#E5E5E5"> follow on work we have addressed</font>

280
00:11:59,110 --> 00:12:09,060
<font color="#E5E5E5">this problem so the the other challenge</font>

281
00:12:04,960 --> 00:12:11,980
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I wanted to address here is that</font>

282
00:12:09,060 --> 00:12:14,260
the<font color="#E5E5E5"> disk this data analytics code that</font>

283
00:12:11,980 --> 00:12:17,230
<font color="#E5E5E5">the users right in in C++ may have</font>

284
00:12:14,260 --> 00:12:19,630
<font color="#CCCCCC">low-level coding defects and</font><font color="#E5E5E5"> so if you</font>

285
00:12:17,230 --> 00:12:21,940
have a defect like a<font color="#E5E5E5"> right through an</font>

286
00:12:19,630 --> 00:12:25,350
initialized pointer<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> easily</font>

287
00:12:21,940 --> 00:12:27,850
corrupt memory or simply<font color="#E5E5E5"> leak data by</font>

288
00:12:25,350 --> 00:12:30,450
<font color="#E5E5E5">writing outside of the enclaves and</font>

289
00:12:27,850 --> 00:12:33,820
likewise<font color="#CCCCCC"> if you read through</font><font color="#E5E5E5"> an</font>

290
00:12:30,450 --> 00:12:37,360
uninitialized pointer<font color="#E5E5E5"> you may be reading</font>

291
00:12:33,820 --> 00:12:40,600
<font color="#E5E5E5">a not authenticated data supplied by an</font>

292
00:12:37,360 --> 00:12:51,580
attacker in the cloud so to deal with

293
00:12:40,600 --> 00:12:53,650
these problems<font color="#CCCCCC"> we allow sorry to deal</font>

294
00:12:51,580 --> 00:12:57,190
<font color="#E5E5E5">with these problems we allow users to</font>

295
00:12:53,650 --> 00:13:01,540
optionally<font color="#E5E5E5"> use a compiler that enforces</font>

296
00:12:57,190 --> 00:13:02,590
<font color="#E5E5E5">two security invariants so if users are</font>

297
00:13:01,540 --> 00:13:06,459
worried about<font color="#E5E5E5"> these problems they</font>

298
00:13:02,590 --> 00:13:08,230
compile the code automatically<font color="#E5E5E5"> with with</font>

299
00:13:06,460 --> 00:13:11,170
with<font color="#CCCCCC"> our compiler in the end they get</font>

300
00:13:08,230 --> 00:13:13,240
<font color="#E5E5E5">these security guarantees the one of the</font>

301
00:13:11,170 --> 00:13:15,099
guarantees is region<font color="#E5E5E5"> what we call region</font>

302
00:13:13,240 --> 00:13:17,470
<font color="#CCCCCC">write integrity which guarantees that</font>

303
00:13:15,100 --> 00:13:20,170
<font color="#E5E5E5">writes true pointers can only go to</font>

304
00:13:17,470 --> 00:13:22,180
<font color="#CCCCCC">a drastic and variables inside the</font>

305
00:13:20,170 --> 00:13:25,959
<font color="#E5E5E5">Enclave or</font><font color="#CCCCCC"> hip allocations</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font>

306
00:13:22,180 --> 00:13:30,250
<font color="#CCCCCC">enclave and so in this</font><font color="#E5E5E5"> current for</font>

307
00:13:25,960 --> 00:13:33,460
instance guarantees that any right<font color="#CCCCCC"> to a</font>

308
00:13:30,250 --> 00:13:35,680
pointer can never corrupt<font color="#CCCCCC"> known as</font><font color="#E5E5E5"> s</font>

309
00:13:33,460 --> 00:13:38,740
<font color="#CCCCCC">address</font><font color="#E5E5E5"> taken data inside</font><font color="#CCCCCC"> the Enclave</font>

310
00:13:35,680 --> 00:13:39,310
and<font color="#E5E5E5"> can ever write data outside</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

311
00:13:38,740 --> 00:13:42,130
enclaves

312
00:13:39,310 --> 00:13:45,369
so that's the first invariant and<font color="#E5E5E5"> the</font>

313
00:13:42,130 --> 00:13:48,100
second one is augmenting region<font color="#E5E5E5"> right</font>

314
00:13:45,370 --> 00:13:51,570
integrity<font color="#CCCCCC"> with all with the</font><font color="#E5E5E5"> guarantee</font>

315
00:13:48,100 --> 00:13:56,080
that<font color="#E5E5E5"> reads cannot go outside the Enclave</font>

316
00:13:51,570 --> 00:13:58,630
so its users can choose not to<font color="#CCCCCC"> use any</font>

317
00:13:56,080 --> 00:14:00,790
of these<font color="#CCCCCC"> or or either</font><font color="#E5E5E5"> add either one of</font>

318
00:13:58,630 --> 00:14:05,290
them and<font color="#E5E5E5"> just to give you an idea of how</font>

319
00:14:00,790 --> 00:14:06,790
we enforce<font color="#E5E5E5"> them to check the region</font>

320
00:14:05,290 --> 00:14:09,760
<font color="#CCCCCC">right integrity property</font><font color="#E5E5E5"> we keep a</font>

321
00:14:06,790 --> 00:14:12,849
bitmap<font color="#E5E5E5"> that</font><font color="#CCCCCC"> maps every eight bytes of</font>

322
00:14:09,760 --> 00:14:15,910
<font color="#CCCCCC">ankov</font><font color="#E5E5E5"> memory to one bit in the bitmap so</font>

323
00:14:12,850 --> 00:14:17,500
when one means<font color="#E5E5E5"> that the memory slot is</font>

324
00:14:15,910 --> 00:14:21,430
writable<font color="#CCCCCC"> so this is a compact</font>

325
00:14:17,500 --> 00:14:25,000
representation of the memory<font color="#CCCCCC"> protections</font>

326
00:14:21,430 --> 00:14:27,579
inside of the<font color="#E5E5E5"> Enclave</font><font color="#CCCCCC"> so if the compiler</font>

327
00:14:25,000 --> 00:14:29,920
cannot check that a rat is<font color="#CCCCCC"> safe it's</font>

328
00:14:27,580 --> 00:14:32,650
going to check the bit in the bitmap to

329
00:14:29,920 --> 00:14:35,199
see if it's<font color="#E5E5E5"> one and we update the the</font>

330
00:14:32,650 --> 00:14:37,590
bitmap on heap<font color="#E5E5E5"> allocations and stack</font>

331
00:14:35,200 --> 00:14:40,830
allocations<font color="#E5E5E5"> and deallocations</font>

332
00:14:37,590 --> 00:14:44,050
<font color="#CCCCCC">we also check</font><font color="#E5E5E5"> control</font><font color="#CCCCCC"> flow transitions</font>

333
00:14:40,830 --> 00:14:45,520
to make sure that the<font color="#E5E5E5"> the read checks</font>

334
00:14:44,050 --> 00:14:47,410
and the write checks cannot be bypassed

335
00:14:45,520 --> 00:14:48,880
and we use a similar bitmap to check

336
00:14:47,410 --> 00:14:51,430
control flow transition<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that is a</font>

337
00:14:48,880 --> 00:14:54,250
form<font color="#CCCCCC"> of course control flow inside</font>

338
00:14:51,430 --> 00:14:56,290
integrity that we enforce and finally

339
00:14:54,250 --> 00:14:58,540
the read checks are a simple range check

340
00:14:56,290 --> 00:15:01,510
that we enforce with with a simple bit

341
00:14:58,540 --> 00:15:03,550
<font color="#CCCCCC">mass mid mask</font><font color="#E5E5E5"> and I'm not going to go</font>

342
00:15:01,510 --> 00:15:05,860
into<font color="#E5E5E5"> details here but in the paper we</font>

343
00:15:03,550 --> 00:15:12,420
show how we<font color="#E5E5E5"> have efficient code</font>

344
00:15:05,860 --> 00:15:16,300
sequences<font color="#E5E5E5"> to to implement the checks</font><font color="#CCCCCC"> so</font>

345
00:15:12,420 --> 00:15:19,329
to evaluate<font color="#E5E5E5"> this we implemented vc3 for</font>

346
00:15:16,300 --> 00:15:21,219
Windows Server 2012<font color="#E5E5E5"> we tested the</font>

347
00:15:19,330 --> 00:15:23,740
implementation<font color="#E5E5E5"> on an emulator provided</font>

348
00:15:21,220 --> 00:15:26,230
by by Intel<font color="#E5E5E5"> but because that emulator is</font>

349
00:15:23,740 --> 00:15:28,390
not performance accurate we measured

350
00:15:26,230 --> 00:15:31,000
the properties of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> using our</font>

351
00:15:28,390 --> 00:15:33,189
own emulator<font color="#E5E5E5"> and we implemented the</font>

352
00:15:31,000 --> 00:15:34,990
region self integrity properties<font color="#E5E5E5"> as a</font>

353
00:15:33,190 --> 00:15:38,410
modification to<font color="#E5E5E5"> the microsoft c++</font>

354
00:15:34,990 --> 00:15:41,320
compiler<font color="#CCCCCC"> we tested seven</font><font color="#E5E5E5"> seven</font>

355
00:15:38,410 --> 00:15:44,439
applications<font color="#CCCCCC"> a mix of i/o intensive and</font>

356
00:15:41,320 --> 00:15:47,710
<font color="#CCCCCC">computer intensive applications</font><font color="#E5E5E5"> and we</font>

357
00:15:44,440 --> 00:15:52,090
run experiments<font color="#CCCCCC"> on a Hadoop cluster</font><font color="#E5E5E5"> with</font>

358
00:15:47,710 --> 00:15:55,420
<font color="#CCCCCC">eight workstations so the the graph here</font>

359
00:15:52,090 --> 00:15:58,300
<font color="#CCCCCC">on the slide shows</font><font color="#E5E5E5"> the numbers</font><font color="#CCCCCC"> the</font>

360
00:15:55,420 --> 00:16:00,189
<font color="#CCCCCC">runtime</font><font color="#E5E5E5"> numbers for</font><font color="#CCCCCC"> all of the</font>

361
00:15:58,300 --> 00:16:02,740
applications and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> runtimes are</font>

362
00:16:00,190 --> 00:16:04,240
normalized to<font color="#E5E5E5"> the case where the</font>

363
00:16:02,740 --> 00:16:08,080
application runs on I do but is not

364
00:16:04,240 --> 00:16:11,530
protected by<font color="#CCCCCC"> our mechanisms</font><font color="#E5E5E5"> so what we</font>

365
00:16:08,080 --> 00:16:14,500
see there<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that for VC 3 we</font><font color="#E5E5E5"> see over</font>

366
00:16:11,530 --> 00:16:17,920
the sort<font color="#E5E5E5"> of device properties of VC 3 we</font>

367
00:16:14,500 --> 00:16:19,960
see overheads below 1% for<font color="#E5E5E5"> VC 3 with the</font>

368
00:16:17,920 --> 00:16:24,010
right integrity checks<font color="#CCCCCC"> we see over</font>

369
00:16:19,960 --> 00:16:26,890
<font color="#CCCCCC">overheads on average</font><font color="#E5E5E5"> 4.5 percent and</font>

370
00:16:24,010 --> 00:16:30,430
with a<font color="#CCCCCC"> read/write integrity of an</font>

371
00:16:26,890 --> 00:16:33,490
average<font color="#E5E5E5"> of</font><font color="#CCCCCC"> 8 percent</font><font color="#E5E5E5"> now we whe when</font>

372
00:16:30,430 --> 00:16:35,020
when we ran<font color="#E5E5E5"> this on a dupe there are</font>

373
00:16:33,490 --> 00:16:38,230
lots of things<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are happening in the</font>

374
00:16:35,020 --> 00:16:40,600
system<font color="#CCCCCC"> that mask</font><font color="#E5E5E5"> the real overheads of</font>

375
00:16:38,230 --> 00:16:41,860
<font color="#CCCCCC">this III and</font><font color="#E5E5E5"> these things are scheduling</font>

376
00:16:40,600 --> 00:16:44,680
<font color="#E5E5E5">a dupe jobs</font>

377
00:16:41,860 --> 00:16:47,380
shuffling data around launching

378
00:16:44,680 --> 00:16:49,479
processes those types of things<font color="#CCCCCC"> so to</font>

379
00:16:47,380 --> 00:16:51,790
have a better understanding<font color="#CCCCCC"> of the</font>

380
00:16:49,480 --> 00:16:54,430
overhead we also ran<font color="#CCCCCC"> the map in reduce</font>

381
00:16:51,790 --> 00:16:57,040
tasks in<font color="#E5E5E5"> isolation without a dupe so on</font>

382
00:16:54,430 --> 00:17:00,550
a single machine<font color="#E5E5E5"> just executing you know</font>

383
00:16:57,040 --> 00:17:05,050
<font color="#E5E5E5">for instance a map function over an</font>

384
00:17:00,550 --> 00:17:06,849
input split in there we see<font color="#E5E5E5"> some higher</font>

385
00:17:05,050 --> 00:17:10,780
<font color="#E5E5E5">overheads so for</font><font color="#CCCCCC"> VC 3 we see an average</font>

386
00:17:06,849 --> 00:17:13,240
<font color="#E5E5E5">of 4% for VC</font><font color="#CCCCCC"> 3 3 with</font><font color="#E5E5E5"> region</font><font color="#CCCCCC"> right</font>

387
00:17:10,780 --> 00:17:15,420
integrity an average of 15%<font color="#E5E5E5"> and with the</font>

388
00:17:13,240 --> 00:17:21,670
<font color="#E5E5E5">read/write integrity and an</font><font color="#CCCCCC"> average of</font>

389
00:17:15,420 --> 00:17:24,850
about<font color="#CCCCCC"> 25% so I'll conclude here inside</font>

390
00:17:21,670 --> 00:17:26,290
that VC 3 protects<font color="#E5E5E5"> Map Reduce that</font>

391
00:17:24,849 --> 00:17:27,639
analytics computations from<font color="#E5E5E5"> the</font>

392
00:17:26,290 --> 00:17:29,920
<font color="#E5E5E5">untrusted cloud we ensure</font>

393
00:17:27,640 --> 00:17:31,690
confidentiality of code and data for

394
00:17:29,920 --> 00:17:34,210
these<font color="#CCCCCC"> applications</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we're showing to</font>

395
00:17:31,690 --> 00:17:37,450
ensure<font color="#E5E5E5"> integrity of the full distributed</font>

396
00:17:34,210 --> 00:17:39,730
computations<font color="#E5E5E5"> and our experimental</font>

397
00:17:37,450 --> 00:17:43,139
<font color="#CCCCCC">results show good performance</font>

398
00:17:39,730 --> 00:17:43,139
so thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I'll take questions</font>

399
00:17:49,799 --> 00:17:55,110
thanks a lot Manuel<font color="#CCCCCC"> any questions</font>

400
00:18:04,420 --> 00:18:11,570
Rupali Princeton University<font color="#CCCCCC"> it's very</font>

401
00:18:08,270 --> 00:18:15,020
interesting<font color="#CCCCCC"> I was wondering when you</font>

402
00:18:11,570 --> 00:18:19,689
talk about<font color="#E5E5E5"> the TCB and given that the</font>

403
00:18:15,020 --> 00:18:24,139
cloud can migrate<font color="#E5E5E5"> virtual machines and</font>

404
00:18:19,690 --> 00:18:27,260
there's a lot of<font color="#E5E5E5"> SSL may be involved in</font>

405
00:18:24,140 --> 00:18:32,150
talking to different<font color="#E5E5E5"> nodes within the</font>

406
00:18:27,260 --> 00:18:35,480
whole cloud scheduler and<font color="#E5E5E5"> you know</font>

407
00:18:32,150 --> 00:18:39,140
<font color="#E5E5E5">network stack protocol and so forth</font>

408
00:18:35,480 --> 00:18:44,030
<font color="#E5E5E5">wouldn't that have to</font><font color="#CCCCCC"> be in the TCP so</font>

409
00:18:39,140 --> 00:18:48,410
so<font color="#E5E5E5"> no so we we do rely on all of these</font>

410
00:18:44,030 --> 00:18:52,010
components<font color="#E5E5E5"> to run the full</font><font color="#CCCCCC"> system so if</font>

411
00:18:48,410 --> 00:18:54,710
the if the<font color="#CCCCCC"> cloud</font><font color="#E5E5E5"> can for instance do</font>

412
00:18:52,010 --> 00:18:57,200
denial of service attacks on our<font color="#E5E5E5"> system</font>

413
00:18:54,710 --> 00:19:01,400
<font color="#E5E5E5">by for instance</font><font color="#CCCCCC"> not migrating</font><font color="#E5E5E5"> or</font>

414
00:18:57,200 --> 00:19:06,080
scheduling jobs but those components

415
00:19:01,400 --> 00:19:07,880
<font color="#E5E5E5">they can never they never have access to</font>

416
00:19:06,080 --> 00:19:13,850
the<font color="#E5E5E5"> plain text data that we are</font>

417
00:19:07,880 --> 00:19:16,160
processing and and so they can<font color="#CCCCCC"> never you</font>

418
00:19:13,850 --> 00:19:21,559
know read or or temper with the data

419
00:19:16,160 --> 00:19:24,980
<font color="#E5E5E5">without being detected</font><font color="#CCCCCC"> and then we would</font>

420
00:19:21,559 --> 00:19:26,840
<font color="#E5E5E5">our integrity protocol which is based on</font>

421
00:19:24,980 --> 00:19:29,510
having<font color="#E5E5E5"> the the nodes that</font><font color="#CCCCCC"> have access</font><font color="#E5E5E5"> to</font>

422
00:19:26,840 --> 00:19:31,280
the data<font color="#E5E5E5"> producing some summary</font>

423
00:19:29,510 --> 00:19:34,100
<font color="#CCCCCC">information of what they did</font><font color="#E5E5E5"> what they</font>

424
00:19:31,280 --> 00:19:36,850
<font color="#CCCCCC">did they processed for instance</font><font color="#E5E5E5"> those</font>

425
00:19:34,100 --> 00:19:39,280
sort of our integrity<font color="#E5E5E5"> protocol then</font>

426
00:19:36,850 --> 00:19:41,870
aggregates all of that information<font color="#E5E5E5"> and</font>

427
00:19:39,280 --> 00:19:44,649
verifies that<font color="#CCCCCC"> for instance</font><font color="#E5E5E5"> the scheduler</font>

428
00:19:41,870 --> 00:19:46,850
<font color="#E5E5E5">did not temper with the computation</font><font color="#CCCCCC"> a</font>

429
00:19:44,650 --> 00:19:49,040
schedule might for instance<font color="#CCCCCC"> strike</font><font color="#E5E5E5"> when</font>

430
00:19:46,850 --> 00:19:52,250
<font color="#E5E5E5">a typical attack would be as the</font>

431
00:19:49,040 --> 00:19:55,129
schedule might for instance<font color="#E5E5E5"> not</font><font color="#CCCCCC"> schedule</font>

432
00:19:52,250 --> 00:19:58,790
<font color="#CCCCCC">a map function on us on a particular</font>

433
00:19:55,130 --> 00:20:02,570
input split but we would always<font color="#E5E5E5"> detect</font>

434
00:19:58,790 --> 00:20:04,899
it might be clearer to<font color="#CCCCCC"> see your threat</font>

435
00:20:02,570 --> 00:20:07,879
<font color="#CCCCCC">model doesn't</font><font color="#E5E5E5"> defend against</font>

436
00:20:04,900 --> 00:20:11,650
availability attacks but<font color="#CCCCCC"> it's failsafe</font>

437
00:20:07,880 --> 00:20:14,730
<font color="#E5E5E5">for confidentiality that's exactly right</font>

438
00:20:11,650 --> 00:20:18,520
there's another problem if I kind<font color="#E5E5E5"> of</font>

439
00:20:14,730 --> 00:20:25,030
understood your restrictions<font color="#E5E5E5"> you can</font>

440
00:20:18,520 --> 00:20:27,430
write from<font color="#E5E5E5"> the Enclave outside with your</font>

441
00:20:25,030 --> 00:20:30,879
<font color="#E5E5E5">right restriction or something so then</font>

442
00:20:27,430 --> 00:20:34,150
how do you release the<font color="#E5E5E5"> encrypted code</font>

443
00:20:30,880 --> 00:20:37,840
from your<font color="#E5E5E5"> Enclave</font><font color="#CCCCCC"> to the outside</font><font color="#E5E5E5"> if you</font>

444
00:20:34,150 --> 00:20:42,160
<font color="#E5E5E5">can't write or we</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> you get the</font>

445
00:20:37,840 --> 00:20:44,830
encrypted<font color="#E5E5E5"> code into the</font><font color="#CCCCCC"> arm so the that</font>

446
00:20:42,160 --> 00:20:48,690
the item if if we use our compiler

447
00:20:44,830 --> 00:20:53,740
extensions<font color="#E5E5E5"> the data analytics code</font>

448
00:20:48,690 --> 00:20:55,120
cannot<font color="#E5E5E5"> write outside</font><font color="#CCCCCC"> even</font><font color="#E5E5E5"> by mistake</font><font color="#CCCCCC"> and</font>

449
00:20:53,740 --> 00:20:56,800
that's our sort<font color="#CCCCCC"> of</font><font color="#E5E5E5"> our threat model</font>

450
00:20:55,120 --> 00:21:00,969
there that that code is not<font color="#E5E5E5"> malicious</font>

451
00:20:56,800 --> 00:21:03,600
<font color="#CCCCCC">but it it may have bugs so you are</font>

452
00:21:00,970 --> 00:21:07,600
<font color="#E5E5E5">writing that code cannot but the our</font>

453
00:21:03,600 --> 00:21:09,760
implementation of<font color="#E5E5E5"> the the protocols so I</font>

454
00:21:07,600 --> 00:21:11,320
had this slide with the<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the data</font>

455
00:21:09,760 --> 00:21:14,020
analytics<font color="#E5E5E5"> code in the small amount</font><font color="#CCCCCC"> of</font>

456
00:21:11,320 --> 00:21:16,059
crypto protocols<font color="#E5E5E5"> so our implementation</font>

457
00:21:14,020 --> 00:21:18,250
of<font color="#E5E5E5"> the the crypto protocols implements</font>

458
00:21:16,059 --> 00:21:20,740
the communication primitives<font color="#E5E5E5"> in that</font>

459
00:21:18,250 --> 00:21:21,520
code can write the messages out but that

460
00:21:20,740 --> 00:21:24,370
code first

461
00:21:21,520 --> 00:21:27,040
<font color="#E5E5E5">when writing out first in cribs and when</font>

462
00:21:24,370 --> 00:21:28,899
reading<font color="#CCCCCC"> data checks the the</font>

463
00:21:27,040 --> 00:21:32,190
authentication codes on the data that<font color="#E5E5E5"> is</font>

464
00:21:28,900 --> 00:21:32,190
coming in<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the outside</font>

