1
00:00:00,030 --> 00:00:05,310
<font color="#E5E5E5">Thanks this is joint work between</font><font color="#CCCCCC"> toss</font>

2
00:00:03,659 --> 00:00:07,950
<font color="#CCCCCC">and horse group</font><font color="#E5E5E5"> and go home and another</font>

3
00:00:05,310 --> 00:00:10,129
thing is<font color="#E5E5E5"> open and after</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> actually</font>

4
00:00:07,950 --> 00:00:11,969
<font color="#E5E5E5">just</font><font color="#CCCCCC"> rooted in my second talk</font>

5
00:00:10,130 --> 00:00:14,070
unfortunately I were to make<font color="#CCCCCC"> it in time</font>

6
00:00:11,969 --> 00:00:16,820
for<font color="#CCCCCC"> the vc3 cloud-computing talk on</font>

7
00:00:14,070 --> 00:00:19,260
Monday<font color="#E5E5E5"> yeah funny story</font>

8
00:00:16,820 --> 00:00:21,600
<font color="#E5E5E5">okay and today</font><font color="#CCCCCC"> I'm going to talk about</font><font color="#E5E5E5"> a</font>

9
00:00:19,260 --> 00:00:23,340
novel<font color="#CCCCCC"> code</font><font color="#E5E5E5"> we use attack and let me give</font>

10
00:00:21,600 --> 00:00:26,550
you a brief introduction to<font color="#CCCCCC"> two code</font>

11
00:00:23,340 --> 00:00:29,970
<font color="#CCCCCC">reuse attacks</font><font color="#E5E5E5"> in general so code reuse</font>

12
00:00:26,550 --> 00:00:33,149
attacks are roughly well<font color="#E5E5E5"> composed of two</font>

13
00:00:29,970 --> 00:00:35,219
steps and first is the initial control

14
00:00:33,149 --> 00:00:36,989
for hijacking because the attacker

15
00:00:35,219 --> 00:00:40,530
<font color="#E5E5E5">exploits buffer overflow vulnerability</font>

16
00:00:36,989 --> 00:00:42,410
<font color="#E5E5E5">or reviews of the precondition to take</font>

17
00:00:40,530 --> 00:00:44,789
control of the instruction pointer<font color="#E5E5E5"> and</font>

18
00:00:42,410 --> 00:00:46,890
because today we have<font color="#E5E5E5"> things</font><font color="#CCCCCC"> like data</font>

19
00:00:44,789 --> 00:00:49,590
execution prevention<font color="#E5E5E5"> attackers can</font>

20
00:00:46,890 --> 00:00:51,780
really jump to<font color="#E5E5E5"> their to the share code</font>

21
00:00:49,590 --> 00:00:54,210
directly but they need<font color="#CCCCCC"> to employ a</font>

22
00:00:51,780 --> 00:00:56,789
second step which<font color="#CCCCCC"> is a code</font><font color="#E5E5E5"> reuse step</font>

23
00:00:54,210 --> 00:00:59,760
and the purple of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> choreo</font><font color="#E5E5E5"> step is to</font>

24
00:00:56,789 --> 00:01:02,879
<font color="#E5E5E5">bypass data execution prevention mainly</font>

25
00:00:59,760 --> 00:01:04,470
and well probably<font color="#E5E5E5"> the most widely used</font>

26
00:01:02,879 --> 00:01:07,710
technique years<font color="#CCCCCC"> will turn them into</font>

27
00:01:04,470 --> 00:01:10,979
oriented programming<font color="#E5E5E5"> and in the curio</font>

28
00:01:07,710 --> 00:01:14,850
step<font color="#E5E5E5"> the attacker reuse existing pieces</font>

29
00:01:10,979 --> 00:01:16,890
of code that are<font color="#CCCCCC"> available in</font>

30
00:01:14,850 --> 00:01:19,080
applications<font color="#E5E5E5"> at</font><font color="#CCCCCC"> webspace and peels them</font>

31
00:01:16,890 --> 00:01:21,240
<font color="#E5E5E5">together such</font><font color="#CCCCCC"> that some alysha's</font>

32
00:01:19,080 --> 00:01:24,750
<font color="#E5E5E5">computation is performed for example in</font>

33
00:01:21,240 --> 00:01:27,060
<font color="#E5E5E5">Rob the attacking objects a fake effects</font>

34
00:01:24,750 --> 00:01:30,930
deck<font color="#E5E5E5"> and then private the stack pointer</font>

35
00:01:27,060 --> 00:01:33,030
to the stack and<font color="#E5E5E5"> such that short short</font>

36
00:01:30,930 --> 00:01:35,759
<font color="#E5E5E5">chunks of code are are chained together</font>

37
00:01:33,030 --> 00:01:37,170
<font color="#CCCCCC">and</font><font color="#E5E5E5"> Ingrid turns such that</font><font color="#CCCCCC"> some</font>

38
00:01:35,759 --> 00:01:39,540
<font color="#CCCCCC">malicious computation is performed of</font>

39
00:01:37,170 --> 00:01:42,509
course for<font color="#E5E5E5"> Coby</font><font color="#CCCCCC"> at attack the attacker</font>

40
00:01:39,540 --> 00:01:44,820
needs<font color="#E5E5E5"> to know the locations of the code</font>

41
00:01:42,509 --> 00:01:47,070
chunks he wants to reuse so usually

42
00:01:44,820 --> 00:01:48,869
there's also an initial step the

43
00:01:47,070 --> 00:01:51,779
information<font color="#CCCCCC"> leak where the attacker</font>

44
00:01:48,869 --> 00:01:54,000
needs someone ability to infer<font color="#CCCCCC"> the base</font>

45
00:01:51,780 --> 00:01:55,460
address<font color="#CCCCCC"> of executable modules and</font>

46
00:01:54,000 --> 00:01:58,469
application<font color="#CCCCCC"> gray space</font>

47
00:01:55,460 --> 00:02:00,509
all right<font color="#E5E5E5"> and in this talk I'm going to</font>

48
00:01:58,469 --> 00:02:03,990
concentrate on step<font color="#E5E5E5"> two and all our</font>

49
00:02:00,509 --> 00:02:06,560
contributions<font color="#E5E5E5"> just concerned step two we</font>

50
00:02:03,990 --> 00:02:10,008
are<font color="#E5E5E5"> preventing another</font><font color="#CCCCCC"> proper use attack</font>

51
00:02:06,560 --> 00:02:12,629
<font color="#CCCCCC">yes you may know if defense against</font>

52
00:02:10,008 --> 00:02:13,450
designing defenses against<font color="#CCCCCC"> koreas</font>

53
00:02:12,629 --> 00:02:15,250
attacks is a

54
00:02:13,450 --> 00:02:19,950
it's a busy field<font color="#CCCCCC"> post</font><font color="#E5E5E5"> in academia and</font>

55
00:02:15,250 --> 00:02:22,420
the<font color="#E5E5E5"> industry and I think you can roughly</font>

56
00:02:19,950 --> 00:02:25,329
categorize defenses against code<font color="#CCCCCC"> reuse</font>

57
00:02:22,420 --> 00:02:27,670
<font color="#E5E5E5">using this table they are first memory</font>

58
00:02:25,330 --> 00:02:30,310
safety<font color="#E5E5E5"> approaches which try to invent</font>

59
00:02:27,670 --> 00:02:31,720
the initial control for hijacking then

60
00:02:30,310 --> 00:02:34,690
they are control for integrity

61
00:02:31,720 --> 00:02:36,010
approaches which try<font color="#E5E5E5"> to not to prevent</font>

62
00:02:34,690 --> 00:02:39,640
<font color="#E5E5E5">the initial control high</font><font color="#CCCCCC"> braking but</font>

63
00:02:36,010 --> 00:02:39,940
rather to to mitigate the following code

64
00:02:39,640 --> 00:02:43,059
<font color="#CCCCCC">reuse</font>

65
00:02:39,940 --> 00:02:44,980
step they try to prevent an attacker

66
00:02:43,060 --> 00:02:47,530
from from branching to the<font color="#E5E5E5"> funny total</font>

67
00:02:44,980 --> 00:02:49,720
<font color="#E5E5E5">occasions essentially then they are code</font>

68
00:02:47,530 --> 00:02:53,080
shuffling and rewriting hiding

69
00:02:49,720 --> 00:02:55,359
techniques<font color="#E5E5E5"> but try to to make the code</font>

70
00:02:53,080 --> 00:02:58,420
to hide the code from<font color="#E5E5E5"> the attacker or</font>

71
00:02:55,360 --> 00:02:59,830
make it unusable<font color="#E5E5E5"> for for reuse</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then</font>

72
00:02:58,420 --> 00:03:02,798
finally<font color="#CCCCCC"> there</font><font color="#E5E5E5"> are heuristics based</font>

73
00:02:59,830 --> 00:03:04,239
systems which try<font color="#E5E5E5"> to detect code reuse</font>

74
00:03:02,799 --> 00:03:05,680
attacks at<font color="#E5E5E5"> one time using different</font>

75
00:03:04,239 --> 00:03:07,390
heuristics<font color="#CCCCCC"> and last year this</font>

76
00:03:05,680 --> 00:03:10,269
comprehensive was the out of control

77
00:03:07,390 --> 00:03:12,179
<font color="#CCCCCC">paper by a good test and others and they</font>

78
00:03:10,269 --> 00:03:14,340
<font color="#CCCCCC">urgently</font><font color="#E5E5E5"> essentially showed that</font>

79
00:03:12,180 --> 00:03:17,049
different control for integrity

80
00:03:14,340 --> 00:03:18,609
mechanisms relied on certain<font color="#E5E5E5"> assumptions</font>

81
00:03:17,049 --> 00:03:20,440
<font color="#E5E5E5">that are not necessarily</font><font color="#CCCCCC"> correct</font><font color="#E5E5E5"> in</font>

82
00:03:18,609 --> 00:03:22,630
practice<font color="#E5E5E5"> and they were they were able to</font>

83
00:03:20,440 --> 00:03:25,150
<font color="#E5E5E5">demonstrate an attack set by past some</font>

84
00:03:22,630 --> 00:03:27,220
of these<font color="#CCCCCC"> Avaya</font><font color="#E5E5E5"> systems additionally</font>

85
00:03:25,150 --> 00:03:29,230
there have been four papers last year

86
00:03:27,220 --> 00:03:31,750
<font color="#E5E5E5">two from our groups which saw that</font>

87
00:03:29,230 --> 00:03:42,160
<font color="#E5E5E5">certain heuristics based system are not</font>

88
00:03:31,750 --> 00:03:44,709
<font color="#E5E5E5">sufficient in practice all right</font><font color="#CCCCCC"> and in</font>

89
00:03:42,160 --> 00:03:45,970
our well<font color="#E5E5E5"> in this talk I'm going</font><font color="#CCCCCC"> to</font>

90
00:03:44,709 --> 00:03:48,280
<font color="#E5E5E5">pretend count of counterfeit</font><font color="#CCCCCC"> are</font>

91
00:03:45,970 --> 00:03:50,940
optically<font color="#CCCCCC"> or in the programming and we</font>

92
00:03:48,280 --> 00:03:53,320
essentially show that all<font color="#E5E5E5"> of these</font>

93
00:03:50,940 --> 00:03:56,470
defenses or that<font color="#E5E5E5"> defenses</font><font color="#CCCCCC"> from all these</font>

94
00:03:53,320 --> 00:03:57,819
<font color="#E5E5E5">categories have</font><font color="#CCCCCC"> rely on certain</font>

95
00:03:56,470 --> 00:04:01,930
<font color="#E5E5E5">assumptions</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> aren't necessarily true</font>

96
00:03:57,819 --> 00:04:03,700
<font color="#CCCCCC">in practice ok the autumn for the rest</font>

97
00:04:01,930 --> 00:04:06,340
<font color="#E5E5E5">of this talk</font><font color="#CCCCCC"> is as follows I</font><font color="#E5E5E5"> already</font>

98
00:04:03,700 --> 00:04:09,100
gave<font color="#E5E5E5"> introduction next is a background</font>

99
00:04:06,340 --> 00:04:11,980
slide on<font color="#CCCCCC"> on</font><font color="#E5E5E5"> c++ then i will prevent the</font>

100
00:04:09,100 --> 00:04:13,388
basic idea<font color="#E5E5E5"> of our</font><font color="#CCCCCC"> copious attack</font><font color="#E5E5E5"> then I</font>

101
00:04:11,980 --> 00:04:16,649
<font color="#CCCCCC">will walk you through a</font><font color="#E5E5E5"> simple example</font><font color="#CCCCCC"> I</font>

102
00:04:13,389 --> 00:04:20,320
will<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about our example exploits</font><font color="#E5E5E5"> and</font>

103
00:04:16,649 --> 00:04:24,549
there will be a discussion<font color="#CCCCCC"> illusion and</font>

104
00:04:20,320 --> 00:04:27,080
the<font color="#E5E5E5"> conclusion of course</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> but very</font>

105
00:04:24,550 --> 00:04:29,629
click quick background<font color="#E5E5E5"> slide on C++</font>

106
00:04:27,080 --> 00:04:32,659
and it also understand our<font color="#CCCCCC"> tech it is</font>

107
00:04:29,629 --> 00:04:36,289
<font color="#CCCCCC">essential</font><font color="#E5E5E5"> to to at least have a very</font>

108
00:04:32,659 --> 00:04:38,300
broad picture of what<font color="#CCCCCC"> she</font><font color="#E5E5E5"> prefers</font>

109
00:04:36,289 --> 00:04:40,159
<font color="#E5E5E5">objects look like in memory</font><font color="#CCCCCC"> so if you</font>

110
00:04:38,300 --> 00:04:44,629
<font color="#E5E5E5">consider Class A plus</font><font color="#CCCCCC"> I has two fields</font>

111
00:04:40,159 --> 00:04:47,150
<font color="#CCCCCC">index and</font><font color="#E5E5E5"> sharp point</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> Y and an object</font>

112
00:04:44,629 --> 00:04:50,539
of<font color="#E5E5E5"> Class A essentially looks like like</font>

113
00:04:47,150 --> 00:04:54,198
it<font color="#E5E5E5"> is shown over there in memory is just</font>

114
00:04:50,539 --> 00:04:56,539
<font color="#E5E5E5">composed of the fields x and y if you</font>

115
00:04:54,199 --> 00:05:00,169
<font color="#CCCCCC">now look at Class B we see Class</font><font color="#E5E5E5"> B is</font>

116
00:04:56,539 --> 00:05:05,389
essentially the same as<font color="#E5E5E5"> Class A but time</font>

117
00:05:00,169 --> 00:05:08,599
<font color="#CCCCCC">zero</font><font color="#E5E5E5"> is virtual so whenever we have a</font>

118
00:05:05,389 --> 00:05:11,629
<font color="#E5E5E5">virtual function</font><font color="#CCCCCC"> in the class object of</font>

119
00:05:08,599 --> 00:05:15,650
the class get a hidden field called the

120
00:05:11,629 --> 00:05:17,060
<font color="#E5E5E5">DPR and the VPT our points to to a table</font>

121
00:05:15,650 --> 00:05:19,609
of virtual function of pointers to

122
00:05:17,060 --> 00:05:21,440
virtual functions and this this<font color="#CCCCCC"> V</font><font color="#E5E5E5"> table</font>

123
00:05:19,610 --> 00:05:25,009
contains pointers to all virtual

124
00:05:21,440 --> 00:05:27,110
functions of the<font color="#CCCCCC"> class so what and</font>

125
00:05:25,009 --> 00:05:29,750
whenever a virtual function<font color="#CCCCCC"> is to</font><font color="#E5E5E5"> be</font>

126
00:05:27,110 --> 00:05:31,400
<font color="#E5E5E5">involved at the runtime</font><font color="#CCCCCC"> it isn't this</font>

127
00:05:29,750 --> 00:05:33,319
<font color="#E5E5E5">the</font><font color="#CCCCCC"> address</font><font color="#E5E5E5"> of this virtual function is</font>

128
00:05:31,400 --> 00:05:35,448
looked up dynamically from<font color="#E5E5E5"> this table</font>

129
00:05:33,319 --> 00:05:39,259
so what attackers usually do when they

130
00:05:35,449 --> 00:05:43,009
attack<font color="#CCCCCC"> c+ replications they they hijack</font>

131
00:05:39,259 --> 00:05:44,779
this<font color="#CCCCCC"> v PG are in order to</font><font color="#E5E5E5"> get control</font>

132
00:05:43,009 --> 00:05:46,699
over<font color="#E5E5E5"> the control flow and then to mount</font>

133
00:05:44,779 --> 00:05:49,250
the extra copy of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> tag and this is</font>

134
00:05:46,699 --> 00:05:52,460
also<font color="#E5E5E5"> what we</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> and please also keep in</font>

135
00:05:49,250 --> 00:05:54,199
<font color="#CCCCCC">mind</font><font color="#E5E5E5"> that because of this V tables they</font>

136
00:05:52,460 --> 00:05:55,669
exist pointers to all virtual functions

137
00:05:54,199 --> 00:05:57,529
in the sequence elliptic application and

138
00:05:55,669 --> 00:06:00,948
so there<font color="#E5E5E5"> are many address setting</font>

139
00:05:57,529 --> 00:06:05,000
functions in<font color="#E5E5E5"> a C++ application</font><font color="#CCCCCC"> okay now</font>

140
00:06:00,949 --> 00:06:06,379
<font color="#E5E5E5">all the basics of our our tech and the</font>

141
00:06:05,000 --> 00:06:07,539
motivation<font color="#CCCCCC"> for our tech was the</font>

142
00:06:06,379 --> 00:06:09,889
following of<font color="#CCCCCC"> the observation</font><font color="#E5E5E5"> and</font>

143
00:06:07,539 --> 00:06:13,729
<font color="#E5E5E5">existing code to use a text such as Rob</font>

144
00:06:09,889 --> 00:06:17,419
all exhibit one of these five five

145
00:06:13,729 --> 00:06:20,029
characteristics<font color="#E5E5E5"> first</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> branch to</font>

146
00:06:17,419 --> 00:06:22,940
funny code locations<font color="#E5E5E5"> then the</font><font color="#CCCCCC"> us return</font>

147
00:06:20,029 --> 00:06:24,680
<font color="#E5E5E5">instructions out of order and the inject</font>

148
00:06:22,940 --> 00:06:27,379
inject or manipulate existing code

149
00:06:24,680 --> 00:06:29,270
pointers<font color="#E5E5E5"> they executed successively many</font>

150
00:06:27,379 --> 00:06:32,090
indirect branches<font color="#CCCCCC"> all they</font><font color="#E5E5E5"> pirates a</font>

151
00:06:29,270 --> 00:06:34,520
stack pointer<font color="#E5E5E5"> and many defenses rely on</font>

152
00:06:32,090 --> 00:06:36,469
these characteristics and in essence it

153
00:06:34,520 --> 00:06:38,330
is sufficient<font color="#CCCCCC"> to maintain a</font><font color="#E5E5E5"> shape to</font>

154
00:06:36,469 --> 00:06:41,040
maintain and enforce a shadow<font color="#E5E5E5"> calls take</font>

155
00:06:38,330 --> 00:06:44,400
in<font color="#E5E5E5"> order</font><font color="#CCCCCC"> to fend off our base attacks</font>

156
00:06:41,040 --> 00:06:46,050
and our<font color="#E5E5E5"> initial question was to</font><font color="#CCCCCC"> Kobe use</font>

157
00:06:44,400 --> 00:06:51,090
the technique necessarily exceeded these

158
00:06:46,050 --> 00:06:54,600
five characteristics so the the ideas

159
00:06:51,090 --> 00:06:57,630
for<font color="#CCCCCC"> our tag</font><font color="#E5E5E5"> if we only</font><font color="#CCCCCC"> hijack and inject</font>

160
00:06:54,600 --> 00:07:00,180
<font color="#E5E5E5">C++</font><font color="#CCCCCC"> vpg ours</font><font color="#E5E5E5"> and the only reuse existing</font>

161
00:06:57,630 --> 00:07:03,120
<font color="#CCCCCC">see</font><font color="#E5E5E5"> plaster virtual functions on our own</font>

162
00:07:00,180 --> 00:07:04,500
injected counterfeit objects<font color="#E5E5E5"> and we call</font>

163
00:07:03,120 --> 00:07:06,630
these virtual functions only<font color="#E5E5E5"> from</font>

164
00:07:04,500 --> 00:07:09,390
existing virtual<font color="#CCCCCC"> function calling site</font>

165
00:07:06,630 --> 00:07:11,400
<font color="#E5E5E5">then a we don't exhibit these five</font>

166
00:07:09,390 --> 00:07:14,669
characteristics and be the defender

167
00:07:11,400 --> 00:07:16,799
needs to be aware of C++<font color="#E5E5E5"> semantics now</font>

168
00:07:14,670 --> 00:07:20,640
the question is<font color="#E5E5E5"> can we</font><font color="#CCCCCC"> create a mean</font>

169
00:07:16,800 --> 00:07:24,540
attack using<font color="#E5E5E5"> only using whole virtual</font>

170
00:07:20,640 --> 00:07:27,630
<font color="#E5E5E5">functions and turns out we can and</font>

171
00:07:24,540 --> 00:07:30,060
here's an excerpt from<font color="#E5E5E5"> our paper</font><font color="#CCCCCC"> and we</font>

172
00:07:27,630 --> 00:07:31,320
figured that<font color="#CCCCCC"> we would need virtual</font>

173
00:07:30,060 --> 00:07:33,170
function of<font color="#E5E5E5"> different types in order</font><font color="#CCCCCC"> to</font>

174
00:07:31,320 --> 00:07:34,730
<font color="#E5E5E5">provide the attacker with</font>

175
00:07:33,170 --> 00:07:37,260
turing-complete

176
00:07:34,730 --> 00:07:39,270
semantics<font color="#E5E5E5"> and earn</font><font color="#CCCCCC"> some extra semantics</font>

177
00:07:37,260 --> 00:07:41,039
<font color="#E5E5E5">and these are essentially</font><font color="#CCCCCC"> all the</font>

178
00:07:39,270 --> 00:07:44,849
different types of<font color="#E5E5E5"> need</font><font color="#CCCCCC"> in order to</font>

179
00:07:41,040 --> 00:07:49,920
<font color="#CCCCCC">create</font><font color="#E5E5E5"> a meaningful attack on x86 32-bit</font>

180
00:07:44,850 --> 00:07:52,500
and 64-bit and I'm not going to explain

181
00:07:49,920 --> 00:07:53,550
awesome but I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> explain the</font>

182
00:07:52,500 --> 00:07:57,090
main loop gated which is the most

183
00:07:53,550 --> 00:07:59,460
<font color="#E5E5E5">important one and two simple ones</font><font color="#CCCCCC"> okay</font>

184
00:07:57,090 --> 00:08:00,989
<font color="#CCCCCC">and we</font><font color="#E5E5E5"> refer to to these virtual</font>

185
00:07:59,460 --> 00:08:04,890
functions<font color="#E5E5E5"> that we use in the coop attack</font>

186
00:08:00,990 --> 00:08:07,170
<font color="#E5E5E5">as</font><font color="#CCCCCC"> react gadgets so the control phone</font>

187
00:08:04,890 --> 00:08:08,849
<font color="#CCCCCC">incorpo Tech looks looks like this</font><font color="#E5E5E5"> first</font>

188
00:08:07,170 --> 00:08:10,950
we have the<font color="#CCCCCC"> entire control V call</font>

189
00:08:08,850 --> 00:08:14,010
because<font color="#E5E5E5"> they take a</font><font color="#CCCCCC"> overrode thing</font><font color="#E5E5E5"> the</font>

190
00:08:10,950 --> 00:08:16,620
VPT<font color="#CCCCCC"> alpha</font><font color="#E5E5E5"> C++ object and the attacker</font>

191
00:08:14,010 --> 00:08:19,409
<font color="#E5E5E5">then branches to a main loop gadget and</font>

192
00:08:16,620 --> 00:08:22,020
<font color="#E5E5E5">from this main loop gadget we invoke the</font>

193
00:08:19,410 --> 00:08:24,900
actual<font color="#CCCCCC"> DF gadgets that</font><font color="#E5E5E5"> we want to to</font>

194
00:08:22,020 --> 00:08:27,180
execute in<font color="#CCCCCC"> order to program</font><font color="#E5E5E5"> our or</font>

195
00:08:24,900 --> 00:08:30,840
Twitter<font color="#E5E5E5"> or ballistics computation will</font>

196
00:08:27,180 --> 00:08:32,700
execute it<font color="#E5E5E5"> okay as I say the main loop</font>

197
00:08:30,840 --> 00:08:35,250
gadget is most important we<font color="#CCCCCC"> have a</font>

198
00:08:32,700 --> 00:08:36,900
gadget<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> koba tag</font><font color="#E5E5E5"> and it's defined</font>

199
00:08:35,250 --> 00:08:38,729
as<font color="#E5E5E5"> follows</font><font color="#CCCCCC"> let me read this</font><font color="#E5E5E5"> for you a</font>

200
00:08:36,900 --> 00:08:41,880
virtual<font color="#CCCCCC"> function that iterates over</font>

201
00:08:38,729 --> 00:08:43,620
container for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> a C++</font><font color="#CCCCCC"> that array</font>

202
00:08:41,880 --> 00:08:44,910
or vector of object pointers<font color="#CCCCCC"> that</font>

203
00:08:43,620 --> 00:08:47,310
<font color="#E5E5E5">involves a virtual function on each</font>

204
00:08:44,910 --> 00:08:50,160
object<font color="#CCCCCC"> and</font><font color="#E5E5E5"> here's an example it's a</font>

205
00:08:47,310 --> 00:08:54,719
simple container class which<font color="#CCCCCC"> has an area</font>

206
00:08:50,160 --> 00:08:57,060
<font color="#CCCCCC">of object pointers</font><font color="#E5E5E5"> and it iterates over</font>

207
00:08:54,720 --> 00:08:58,800
object pointers and<font color="#E5E5E5"> it works it works a</font>

208
00:08:57,060 --> 00:09:03,810
virtual function<font color="#CCCCCC"> on each of these</font>

209
00:08:58,800 --> 00:09:05,870
<font color="#E5E5E5">objects okay and here's an example</font><font color="#CCCCCC"> of a</font>

210
00:09:03,810 --> 00:09:08,310
main loop from video studio 18<font color="#E5E5E5"> store</font><font color="#CCCCCC"> age</font>

211
00:09:05,870 --> 00:09:10,740
<font color="#E5E5E5">just to give you an idea</font><font color="#CCCCCC"> looks</font><font color="#E5E5E5"> pretty</font>

212
00:09:08,310 --> 00:09:14,099
similar<font color="#CCCCCC"> to the for my</font><font color="#E5E5E5"> example here's an</font>

213
00:09:10,740 --> 00:09:17,149
<font color="#E5E5E5">example from from Chrome</font><font color="#CCCCCC"> and here's an</font>

214
00:09:14,100 --> 00:09:19,410
example<font color="#CCCCCC"> from Internet Explorer ok so</font>

215
00:09:17,149 --> 00:09:23,610
there<font color="#E5E5E5"> are plenty of main loop graduates</font>

216
00:09:19,410 --> 00:09:26,129
available and now<font color="#E5E5E5"> what kind of data that</font>

217
00:09:23,610 --> 00:09:29,040
<font color="#E5E5E5">the attacker inject in order to to know</font>

218
00:09:26,129 --> 00:09:31,430
the coop<font color="#E5E5E5"> attack</font><font color="#CCCCCC"> and as I said in and Rob</font>

219
00:09:29,040 --> 00:09:36,480
<font color="#E5E5E5">the attacker injects a fake snake and</font>

220
00:09:31,430 --> 00:09:39,120
<font color="#CCCCCC">manipul manipulates VPT R such that the</font>

221
00:09:36,480 --> 00:09:42,269
stack<font color="#CCCCCC"> pointer is private suit to this</font>

222
00:09:39,120 --> 00:09:47,339
fake stack in the coop<font color="#E5E5E5"> we inject a bunch</font>

223
00:09:42,269 --> 00:09:50,250
of fake<font color="#CCCCCC"> C of counterfeit C++ objects we</font>

224
00:09:47,339 --> 00:09:53,519
<font color="#E5E5E5">have a well imagine we have object here</font>

225
00:09:50,250 --> 00:09:59,490
we can<font color="#E5E5E5"> overflow into this object then</font>

226
00:09:53,519 --> 00:10:01,740
the<font color="#CCCCCC"> attacker</font><font color="#E5E5E5"> rewrites the B PTR of this</font>

227
00:09:59,490 --> 00:10:04,110
<font color="#CCCCCC">object such that the main loop gadget is</font>

228
00:10:01,740 --> 00:10:06,209
executed next<font color="#E5E5E5"> the next time virtual</font>

229
00:10:04,110 --> 00:10:11,670
functions<font color="#CCCCCC"> involving that object</font><font color="#E5E5E5"> and we</font>

230
00:10:06,209 --> 00:10:13,500
also inject<font color="#CCCCCC"> other</font><font color="#E5E5E5"> counter feed objects</font>

231
00:10:11,670 --> 00:10:16,439
the kind<font color="#CCCCCC"> of hit objects</font><font color="#E5E5E5"> that correspond</font>

232
00:10:13,500 --> 00:10:22,649
to the actual to the actual VF<font color="#CCCCCC"> gadget</font>

233
00:10:16,439 --> 00:10:25,709
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we want to to execute to</font><font color="#CCCCCC"> induce all</font>

234
00:10:22,649 --> 00:10:27,779
malicious computation<font color="#CCCCCC"> ok this</font><font color="#E5E5E5"> is this</font>

235
00:10:25,709 --> 00:10:29,910
was a main loop gadget<font color="#E5E5E5"> and now comes how</font>

236
00:10:27,779 --> 00:10:33,480
can you and you can you actually come

237
00:10:29,910 --> 00:10:34,769
<font color="#E5E5E5">actually compute this</font><font color="#CCCCCC"> coop so as I said</font>

238
00:10:33,480 --> 00:10:37,139
we have<font color="#E5E5E5"> this main loop gadget and this</font>

239
00:10:34,769 --> 00:10:38,790
<font color="#E5E5E5">made-up gadget invokes different virtual</font>

240
00:10:37,139 --> 00:10:41,370
functions<font color="#E5E5E5"> virtual functions that we want</font>

241
00:10:38,790 --> 00:10:44,790
to<font color="#CCCCCC"> execute</font><font color="#E5E5E5"> and I'm going to show you how</font>

242
00:10:41,370 --> 00:10:47,759
we can do some some meaningful

243
00:10:44,790 --> 00:10:50,759
computation<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we using virtual</font>

244
00:10:47,759 --> 00:10:53,309
functions on our own injected

245
00:10:50,759 --> 00:10:55,709
counterfeit objects and well I'm<font color="#E5E5E5"> going</font>

246
00:10:53,309 --> 00:10:57,719
<font color="#E5E5E5">to present two very very simple VF</font>

247
00:10:55,709 --> 00:11:01,170
<font color="#CCCCCC">carrots I'm going to show you</font><font color="#E5E5E5"> how how we</font>

248
00:10:57,720 --> 00:11:03,240
<font color="#E5E5E5">can combine them</font><font color="#CCCCCC"> ok first let's say we</font>

249
00:11:01,170 --> 00:11:06,209
want to to add values in our<font color="#CCCCCC"> attack we</font>

250
00:11:03,240 --> 00:11:08,400
want to dynamically<font color="#E5E5E5"> calculate the sum</font><font color="#CCCCCC"> of</font>

251
00:11:06,209 --> 00:11:11,280
something<font color="#CCCCCC"> so consider the classroom</font>

252
00:11:08,400 --> 00:11:12,720
and the class result has at least four

253
00:11:11,280 --> 00:11:15,810
fields<font color="#CCCCCC"> well you're able to</font><font color="#E5E5E5"> be well</font><font color="#CCCCCC"> you</font>

254
00:11:12,720 --> 00:11:20,640
<font color="#E5E5E5">see and and well you and the virtual</font>

255
00:11:15,810 --> 00:11:24,030
function update value adds<font color="#E5E5E5"> value ABC and</font>

256
00:11:20,640 --> 00:11:26,550
write the result to<font color="#E5E5E5"> the field</font><font color="#CCCCCC"> value so</font>

257
00:11:24,030 --> 00:11:29,610
if we<font color="#CCCCCC"> invoke</font><font color="#E5E5E5"> this virtual function on a</font>

258
00:11:26,550 --> 00:11:31,560
counterfeit object that<font color="#E5E5E5"> we inject it of</font>

259
00:11:29,610 --> 00:11:36,360
which we<font color="#E5E5E5"> control all</font><font color="#CCCCCC"> the data fields</font>

260
00:11:31,560 --> 00:11:38,310
then obviously<font color="#E5E5E5"> if we invoke this virtual</font>

261
00:11:36,360 --> 00:11:41,040
function on this<font color="#E5E5E5"> counterfeit object then</font>

262
00:11:38,310 --> 00:11:42,540
<font color="#E5E5E5">we have a simple simple summation</font><font color="#CCCCCC"> that</font>

263
00:11:41,040 --> 00:11:47,130
we could be controllable right we have a

264
00:11:42,540 --> 00:11:48,150
data flow from ABC<font color="#CCCCCC"> - well you</font><font color="#E5E5E5"> okay so</font>

265
00:11:47,130 --> 00:11:49,650
this is an example of<font color="#E5E5E5"> a virtual</font>

266
00:11:48,150 --> 00:11:52,140
functions we can use to do some

267
00:11:49,650 --> 00:11:55,439
arithmetic<font color="#CCCCCC"> and now let's say you want to</font>

268
00:11:52,140 --> 00:11:58,590
<font color="#E5E5E5">write some memory and</font><font color="#CCCCCC"> consider the class</font>

269
00:11:55,440 --> 00:12:02,430
simple string and the virtual function

270
00:11:58,590 --> 00:12:04,620
set just as a string<font color="#E5E5E5"> copy right and if</font>

271
00:12:02,430 --> 00:12:06,479
we<font color="#E5E5E5"> invoke the virtual function set on</font>

272
00:12:04,620 --> 00:12:09,750
the<font color="#CCCCCC"> counter feed object that we injected</font>

273
00:12:06,480 --> 00:12:12,330
then we of course<font color="#CCCCCC"> control</font><font color="#E5E5E5"> buffer and we</font>

274
00:12:09,750 --> 00:12:13,770
<font color="#CCCCCC">can control length so</font><font color="#E5E5E5"> we can control the</font>

275
00:12:12,330 --> 00:12:17,580
<font color="#CCCCCC">destination and</font><font color="#E5E5E5"> the amount of data</font>

276
00:12:13,770 --> 00:12:19,949
<font color="#E5E5E5">that's written but of course in the</font>

277
00:12:17,580 --> 00:12:23,040
meaningful<font color="#E5E5E5"> Korea's attack you</font><font color="#CCCCCC"> would</font>

278
00:12:19,950 --> 00:12:24,180
probably<font color="#CCCCCC"> want to control the destination</font>

279
00:12:23,040 --> 00:12:26,130
address<font color="#E5E5E5"> you would probably</font><font color="#CCCCCC"> want to</font>

280
00:12:24,180 --> 00:12:31,260
dynamically calculate this nation

281
00:12:26,130 --> 00:12:34,590
address right so you need an you need a

282
00:12:31,260 --> 00:12:36,480
data flow from<font color="#E5E5E5"> 1vf gate that you execute</font>

283
00:12:34,590 --> 00:12:39,090
to the next one<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> you want to</font>

284
00:12:36,480 --> 00:12:41,250
dynamically calculate the<font color="#CCCCCC"> address for</font>

285
00:12:39,090 --> 00:12:43,530
buffer and you want to do this using the

286
00:12:41,250 --> 00:12:45,420
first we advocated<font color="#E5E5E5"> I showed you and</font><font color="#CCCCCC"> you</font>

287
00:12:43,530 --> 00:12:46,680
want them<font color="#CCCCCC"> to write some data to that</font>

288
00:12:45,420 --> 00:12:49,800
<font color="#CCCCCC">address that you've calculated</font><font color="#E5E5E5"> and</font>

289
00:12:46,680 --> 00:12:51,089
here's how we do this<font color="#E5E5E5"> we have over there</font>

290
00:12:49,800 --> 00:12:54,959
we have the concept<font color="#CCCCCC"> of overlapping</font>

291
00:12:51,090 --> 00:12:57,630
counterfeit objects in coop<font color="#E5E5E5"> so see we</font>

292
00:12:54,960 --> 00:12:59,730
have the<font color="#E5E5E5"> a blue object which corresponds</font>

293
00:12:57,630 --> 00:13:03,390
to the<font color="#E5E5E5"> first we</font><font color="#CCCCCC"> F get it I showed you</font>

294
00:12:59,730 --> 00:13:07,440
this calculate the sum of<font color="#E5E5E5"> ABC and write</font>

295
00:13:03,390 --> 00:13:09,390
this<font color="#CCCCCC"> two to the field</font><font color="#E5E5E5"> down below because</font>

296
00:13:07,440 --> 00:13:13,500
<font color="#CCCCCC">these counterfeit objects overlap</font><font color="#E5E5E5"> the</font>

297
00:13:09,390 --> 00:13:16,110
<font color="#CCCCCC">next we F gadget interprets</font><font color="#E5E5E5"> this value</font>

298
00:13:13,500 --> 00:13:18,090
<font color="#E5E5E5">that we wrote as a destination pointer</font>

299
00:13:16,110 --> 00:13:21,180
for this<font color="#CCCCCC"> mem copy operation of the</font>

300
00:13:18,090 --> 00:13:22,310
<font color="#CCCCCC">stream</font><font color="#E5E5E5"> copy operation of course</font><font color="#CCCCCC"> you</font>

301
00:13:21,180 --> 00:13:24,829
would also want

302
00:13:22,310 --> 00:13:28,040
to control the<font color="#CCCCCC"> the</font><font color="#E5E5E5"> sewers pointer</font>

303
00:13:24,830 --> 00:13:29,870
probably in a<font color="#E5E5E5"> career</font><font color="#CCCCCC"> attack but well</font>

304
00:13:28,040 --> 00:13:33,250
this is<font color="#E5E5E5"> explained in the paper</font>

305
00:13:29,870 --> 00:13:36,650
how how how you could control<font color="#E5E5E5"> all this</font>

306
00:13:33,250 --> 00:13:39,230
<font color="#E5E5E5">okay so and we created different</font><font color="#CCCCCC"> two of</font>

307
00:13:36,650 --> 00:13:41,209
content exploits for<font color="#CCCCCC"> co-op</font><font color="#E5E5E5"> for example</font>

308
00:13:39,230 --> 00:13:45,380
for in to explore 64-bit we created

309
00:13:41,210 --> 00:13:49,220
<font color="#E5E5E5">where we used existing vulnerability for</font>

310
00:13:45,380 --> 00:13:52,430
for step<font color="#E5E5E5"> one and we created a co-op</font>

311
00:13:49,220 --> 00:13:55,029
attack that dynamically calculated the

312
00:13:52,430 --> 00:13:57,349
address of winner of the<font color="#E5E5E5"> Winx API and</font>

313
00:13:55,029 --> 00:14:00,980
read the current account<font color="#E5E5E5"> and if the</font>

314
00:13:57,350 --> 00:14:02,690
<font color="#E5E5E5">current account was even then</font><font color="#CCCCCC"> chi-x II</font>

315
00:14:00,980 --> 00:14:04,910
was launched if the current account was

316
00:14:02,690 --> 00:14:08,029
odd that<font color="#CCCCCC"> Emma's</font><font color="#E5E5E5"> pain taxi was launched</font>

317
00:14:04,910 --> 00:14:10,100
<font color="#CCCCCC">all in all we</font><font color="#E5E5E5"> needed to inject 21</font>

318
00:14:08,029 --> 00:14:12,080
<font color="#CCCCCC">counter feed objects</font><font color="#E5E5E5"> for that of which</font>

319
00:14:10,100 --> 00:14:14,779
<font color="#E5E5E5">eight overlapped like I showed</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> and</font>

320
00:14:12,080 --> 00:14:17,990
we<font color="#E5E5E5"> used eight different</font><font color="#CCCCCC"> V educators</font><font color="#E5E5E5"> from</font>

321
00:14:14,779 --> 00:14:20,300
its HTML<font color="#CCCCCC"> the DLL and we also did some</font>

322
00:14:17,990 --> 00:14:23,930
<font color="#E5E5E5">two of contact sports</font><font color="#CCCCCC"> winter exploring</font>

323
00:14:20,300 --> 00:14:27,319
<font color="#CCCCCC">to bid and for Firefox</font><font color="#E5E5E5"> 64-bit on Linux</font>

324
00:14:23,930 --> 00:14:29,870
<font color="#E5E5E5">and we implemented a core programming</font>

325
00:14:27,320 --> 00:14:34,370
framework that relies on<font color="#E5E5E5"> zip</font><font color="#CCCCCC"> three</font>

326
00:14:29,870 --> 00:14:37,670
<font color="#CCCCCC">theorems solver</font><font color="#E5E5E5"> and submit for arranging</font>

327
00:14:34,370 --> 00:14:42,530
<font color="#E5E5E5">objects in a given buffer and</font><font color="#CCCCCC"> we use</font>

328
00:14:37,670 --> 00:14:44,689
<font color="#CCCCCC">Amazon doesn't</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> metallic tool</font><font color="#E5E5E5"> to to</font>

329
00:14:42,530 --> 00:14:48,500
look for useful VF gadgets in a given

330
00:14:44,690 --> 00:14:51,830
binary<font color="#CCCCCC"> ok now comes the</font><font color="#E5E5E5"> discussion of</font>

331
00:14:48,500 --> 00:14:54,500
<font color="#E5E5E5">our co-op attack and first applicability</font>

332
00:14:51,830 --> 00:14:56,600
of course I mean<font color="#CCCCCC"> you can design</font><font color="#E5E5E5"> great</font>

333
00:14:54,500 --> 00:14:59,450
<font color="#CCCCCC">careers attacks</font><font color="#E5E5E5"> on paper but of course</font>

334
00:14:56,600 --> 00:15:05,900
this needs<font color="#E5E5E5"> to be applicable</font><font color="#CCCCCC"> all to be</font>

335
00:14:59,450 --> 00:15:08,270
relevant<font color="#E5E5E5"> and yeah we essentially we</font>

336
00:15:05,900 --> 00:15:12,500
found we we created<font color="#E5E5E5"> we brought the text</font>

337
00:15:08,270 --> 00:15:14,510
for x86<font color="#E5E5E5"> x64 and we also discussed</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

338
00:15:12,500 --> 00:15:17,720
paper why<font color="#CCCCCC"> Corp is probably applicable to</font>

339
00:15:14,510 --> 00:15:20,150
RISC architectures in general and of

340
00:15:17,720 --> 00:15:21,860
course the<font color="#E5E5E5"> question is how many useful</font>

341
00:15:20,150 --> 00:15:24,290
virtual functions are there<font color="#CCCCCC"> usually and</font>

342
00:15:21,860 --> 00:15:26,180
we found<font color="#E5E5E5"> that in reasonably sized</font>

343
00:15:24,290 --> 00:15:27,500
programs<font color="#E5E5E5"> there are lots of virtual</font>

344
00:15:26,180 --> 00:15:31,280
function that you can<font color="#CCCCCC"> be used to build a</font>

345
00:15:27,500 --> 00:15:32,839
cool<font color="#CCCCCC"> co-op attack and well as I said the</font>

346
00:15:31,280 --> 00:15:34,949
<font color="#E5E5E5">main loop is probably the most essential</font>

347
00:15:32,839 --> 00:15:36,779
<font color="#E5E5E5">we have</font><font color="#CCCCCC"> gadget that</font><font color="#E5E5E5"> we have</font>

348
00:15:34,950 --> 00:15:42,570
and it's unfortunately also<font color="#E5E5E5"> the rarest</font>

349
00:15:36,779 --> 00:15:44,250
one but we discovered that main loop<font color="#E5E5E5"> we</font>

350
00:15:42,570 --> 00:15:46,290
<font color="#CCCCCC">applicators</font><font color="#E5E5E5"> are also very relatively</font>

351
00:15:44,250 --> 00:15:49,019
common<font color="#CCCCCC"> for example we</font><font color="#E5E5E5"> found useful</font>

352
00:15:46,290 --> 00:15:50,849
<font color="#E5E5E5">specimen in standard libraries of with</font>

353
00:15:49,019 --> 00:15:52,610
<font color="#E5E5E5">the studio which are linked to very many</font>

354
00:15:50,850 --> 00:15:56,040
dynamically linked to very many

355
00:15:52,610 --> 00:15:57,510
applications and<font color="#E5E5E5"> windows so you're like</font>

356
00:15:56,040 --> 00:15:59,540
you are likely<font color="#E5E5E5"> to find all the Gators</font>

357
00:15:57,510 --> 00:16:03,000
you need in most<font color="#E5E5E5"> processors and windows</font>

358
00:15:59,540 --> 00:16:05,939
<font color="#CCCCCC">ok now the properties of coop and hope</font>

359
00:16:03,000 --> 00:16:07,260
<font color="#CCCCCC">does not</font><font color="#E5E5E5"> inject</font><font color="#CCCCCC"> all pointers cop who</font>

360
00:16:05,940 --> 00:16:09,660
lies does not rely on

361
00:16:07,260 --> 00:16:11,459
<font color="#CCCCCC">doneita semantics</font><font color="#E5E5E5"> of code does not</font>

362
00:16:09,660 --> 00:16:13,139
<font color="#E5E5E5">execute</font><font color="#CCCCCC"> rock returns</font><font color="#E5E5E5"> of strange</font>

363
00:16:11,459 --> 00:16:15,810
instruction sequences and it does not

364
00:16:13,139 --> 00:16:18,570
pipe the stack pointer<font color="#CCCCCC"> and as such scope</font>

365
00:16:15,810 --> 00:16:21,630
does not exhibit<font color="#E5E5E5"> the aforementioned</font><font color="#CCCCCC"> five</font>

366
00:16:18,570 --> 00:16:23,910
code reuse characteristics<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Cobus</font>

367
00:16:21,630 --> 00:16:26,880
immune against the<font color="#E5E5E5"> protection of code</font>

368
00:16:23,910 --> 00:16:30,389
pointers semantics preserving rewriting

369
00:16:26,880 --> 00:16:33,689
shuffling of code<font color="#E5E5E5"> detection rule six</font>

370
00:16:30,389 --> 00:16:37,500
existing heuristics<font color="#E5E5E5"> and general generic</font>

371
00:16:33,690 --> 00:16:40,199
see if<font color="#CCCCCC"> I or shadow crawl sex</font><font color="#E5E5E5"> how to</font>

372
00:16:37,500 --> 00:16:42,720
prevent<font color="#CCCCCC"> co-op and of course you can</font>

373
00:16:40,199 --> 00:16:44,459
protect<font color="#CCCCCC"> z plateau v PG arse you can</font>

374
00:16:42,720 --> 00:16:46,860
apply<font color="#CCCCCC"> c</font><font color="#E5E5E5"> pathos aware control for</font>

375
00:16:44,459 --> 00:16:48,599
integrity<font color="#CCCCCC"> or you can randomize</font><font color="#E5E5E5"> c plaster</font>

376
00:16:46,860 --> 00:16:53,250
structure<font color="#E5E5E5"> so there's probably more you</font>

377
00:16:48,600 --> 00:16:54,720
can do and the<font color="#E5E5E5"> inside is</font><font color="#CCCCCC"> but we</font><font color="#E5E5E5"> think</font>

378
00:16:53,250 --> 00:16:56,220
<font color="#CCCCCC">that in order</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> design</font><font color="#E5E5E5"> strong even</font>

379
00:16:54,720 --> 00:16:58,170
seeing hope you need<font color="#E5E5E5"> to have access</font><font color="#CCCCCC"> to</font>

380
00:16:56,220 --> 00:17:01,579
source code<font color="#CCCCCC"> because you need to consider</font>

381
00:16:58,170 --> 00:17:04,290
<font color="#CCCCCC">high</font><font color="#E5E5E5"> level c++ semantics as such</font>

382
00:17:01,579 --> 00:17:05,428
<font color="#E5E5E5">preventing</font><font color="#CCCCCC"> corpus our access</font><font color="#E5E5E5"> to source</font>

383
00:17:04,290 --> 00:17:08,490
code is very challenging

384
00:17:05,429 --> 00:17:11,160
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> always challenging this is what</font>

385
00:17:08,490 --> 00:17:13,589
we claim and in fact we don't<font color="#E5E5E5"> know</font><font color="#CCCCCC"> of</font>

386
00:17:11,160 --> 00:17:16,439
any effective by the<font color="#E5E5E5"> way</font><font color="#CCCCCC"> only defense</font>

387
00:17:13,589 --> 00:17:20,010
against<font color="#CCCCCC"> co-op</font><font color="#E5E5E5"> so here's the table from</font>

388
00:17:16,439 --> 00:17:21,480
from before<font color="#E5E5E5"> and i colored some some</font>

389
00:17:20,010 --> 00:17:23,760
defenses that are<font color="#CCCCCC"> vulnerable to corbin</font>

390
00:17:21,480 --> 00:17:26,040
<font color="#CCCCCC">red and even those that are that</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> not</font>

391
00:17:23,760 --> 00:17:29,010
<font color="#CCCCCC">wandering green</font><font color="#E5E5E5"> and we can see</font><font color="#CCCCCC"> that</font>

392
00:17:26,040 --> 00:17:32,780
basically<font color="#E5E5E5"> all the binary or most of the</font>

393
00:17:29,010 --> 00:17:36,419
binary only<font color="#CCCCCC"> stuff is vulnerable</font>

394
00:17:32,780 --> 00:17:39,090
<font color="#CCCCCC">alright that's it conclusion I presented</font>

395
00:17:36,419 --> 00:17:41,160
the novel<font color="#CCCCCC"> coleus</font><font color="#E5E5E5"> attack that shares</font>

396
00:17:39,090 --> 00:17:43,530
common assumptions that<font color="#E5E5E5"> many defenses</font>

397
00:17:41,160 --> 00:17:47,390
are built on and we make a strong

398
00:17:43,530 --> 00:17:48,899
<font color="#E5E5E5">argument for suus k z--</font><font color="#CCCCCC"> defenses that</font>

399
00:17:47,390 --> 00:17:50,190
<font color="#E5E5E5">consider</font>

400
00:17:48,900 --> 00:18:00,360
high level programming languages

401
00:17:50,190 --> 00:18:07,470
semantics<font color="#CCCCCC"> Thanks well time for a</font><font color="#E5E5E5"> couple</font>

402
00:18:00,360 --> 00:18:09,600
quick questions<font color="#E5E5E5"> can you come and our</font>

403
00:18:07,470 --> 00:18:14,220
other<font color="#CCCCCC"> Oh languages like C sharp</font>

404
00:18:09,600 --> 00:18:19,620
<font color="#E5E5E5">any and we thought</font><font color="#CCCCCC"> about that</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I</font>

405
00:18:14,220 --> 00:18:22,740
think and<font color="#CCCCCC"> cope</font><font color="#E5E5E5"> could be very believable</font>

406
00:18:19,620 --> 00:18:25,919
to Objective C Objective C<font color="#CCCCCC"> and because</font>

407
00:18:22,740 --> 00:18:27,690
<font color="#CCCCCC">there</font><font color="#E5E5E5"> also there's also this object</font><font color="#CCCCCC"> to</font>

408
00:18:25,920 --> 00:18:30,300
<font color="#E5E5E5">see if there's even more metadata than</font>

409
00:18:27,690 --> 00:18:32,880
then in<font color="#E5E5E5"> C++</font><font color="#CCCCCC"> and there's there's even</font>

410
00:18:30,300 --> 00:18:34,379
<font color="#CCCCCC">more dynamic binding going on and we</font><font color="#E5E5E5"> are</font>

411
00:18:32,880 --> 00:18:36,620
kind<font color="#E5E5E5"> of looking</font><font color="#CCCCCC"> into court that you've</font>

412
00:18:34,380 --> 00:18:40,350
<font color="#E5E5E5">seen yes</font>

413
00:18:36,620 --> 00:18:42,570
<font color="#CCCCCC">Matti</font><font color="#E5E5E5"> aspire Purdue</font><font color="#CCCCCC"> I love the technique</font>

414
00:18:40,350 --> 00:18:44,040
<font color="#E5E5E5">but I don't necessarily buy that you</font>

415
00:18:42,570 --> 00:18:47,700
need source code semantics for<font color="#E5E5E5"> that</font>

416
00:18:44,040 --> 00:18:50,340
<font color="#E5E5E5">imagine if you like the gadgets will be</font>

417
00:18:47,700 --> 00:18:52,620
less likely<font color="#CCCCCC"> and you will need to find</font>

418
00:18:50,340 --> 00:18:55,709
<font color="#CCCCCC">gadgets in sieve in several different</font>

419
00:18:52,620 --> 00:18:57,479
libraries<font color="#E5E5E5"> and even on the binary</font><font color="#CCCCCC"> level</font>

420
00:18:55,710 --> 00:18:59,250
you can observe control<font color="#E5E5E5"> flow transfers</font>

421
00:18:57,480 --> 00:19:01,950
between the individual libraries<font color="#CCCCCC"> if you</font>

422
00:18:59,250 --> 00:19:03,510
abstract to<font color="#E5E5E5"> this library granularity</font>

423
00:19:01,950 --> 00:19:05,940
level and this would be a clear

424
00:19:03,510 --> 00:19:09,780
indication<font color="#CCCCCC"> of some cope attack going</font><font color="#E5E5E5"> on</font>

425
00:19:05,940 --> 00:19:11,250
yes<font color="#E5E5E5"> and yes it's true okay it's true you</font>

426
00:19:09,780 --> 00:19:13,860
can probably construct<font color="#E5E5E5"> something that</font>

427
00:19:11,250 --> 00:19:16,200
does not require source code and<font color="#CCCCCC"> B</font><font color="#E5E5E5"> it's</font>

428
00:19:13,860 --> 00:19:19,500
what about some things<font color="#E5E5E5"> especially if you</font>

429
00:19:16,200 --> 00:19:21,360
monitor application at one time and I

430
00:19:19,500 --> 00:19:24,750
think it's hard<font color="#CCCCCC"> to</font><font color="#E5E5E5"> construct something</font>

431
00:19:21,360 --> 00:19:26,370
that's just<font color="#E5E5E5"> aesthetic</font><font color="#CCCCCC"> and yeah but</font><font color="#E5E5E5"> if</font>

432
00:19:24,750 --> 00:19:30,150
you run it if you have<font color="#E5E5E5"> some additional</font>

433
00:19:26,370 --> 00:19:32,309
runtime analysis I think well our

434
00:19:30,150 --> 00:19:35,250
exports<font color="#E5E5E5"> went to</font><font color="#CCCCCC"> expose they</font><font color="#E5E5E5"> just rely on</font>

435
00:19:32,309 --> 00:19:39,178
<font color="#E5E5E5">gadgets from</font><font color="#CCCCCC"> ms HTML dll</font><font color="#E5E5E5"> so maybe that's</font>

436
00:19:35,250 --> 00:19:41,550
not it's not too revealing but of course

437
00:19:39,179 --> 00:19:44,700
you cannot come up with<font color="#E5E5E5"> can't come up</font>

438
00:19:41,550 --> 00:19:46,889
with<font color="#E5E5E5"> something that's binary only but I</font>

439
00:19:44,700 --> 00:19:49,200
think our<font color="#E5E5E5"> point is that</font><font color="#CCCCCC"> you well then</font>

440
00:19:46,890 --> 00:19:50,070
you<font color="#E5E5E5"> can maybe again construct something</font>

441
00:19:49,200 --> 00:19:53,400
that<font color="#CCCCCC"> misses you design another</font>

442
00:19:50,070 --> 00:19:56,550
programming language features yeah we

443
00:19:53,400 --> 00:20:00,130
could discuss moral yes<font color="#CCCCCC"> thanks</font>

444
00:19:56,550 --> 00:20:02,020
I was wondering if you have any more

445
00:20:00,130 --> 00:20:05,410
<font color="#CCCCCC">thoughts on</font><font color="#E5E5E5"> defenses so for instance</font>

446
00:20:02,020 --> 00:20:07,030
<font color="#E5E5E5">just just throw one out there what if we</font>

447
00:20:05,410 --> 00:20:11,380
had something like stack Canaries

448
00:20:07,030 --> 00:20:12,820
Canaries after the V PTR or or can<font color="#CCCCCC"> you</font>

449
00:20:11,380 --> 00:20:14,500
suggest<font color="#CCCCCC"> other defenses that</font><font color="#E5E5E5"> you think</font>

450
00:20:12,820 --> 00:20:16,810
might be effective<font color="#E5E5E5"> and I think what</font>

451
00:20:14,500 --> 00:20:19,270
would<font color="#CCCCCC"> be a cool defense is if you could</font>

452
00:20:16,810 --> 00:20:22,450
randomize object layouts right<font color="#CCCCCC"> oh you</font>

453
00:20:19,270 --> 00:20:24,210
could<font color="#E5E5E5"> insert canneries</font><font color="#CCCCCC"> I mean this</font><font color="#E5E5E5"> like</font>

454
00:20:22,450 --> 00:20:26,530
like I said can be<font color="#E5E5E5"> as I said I think</font>

455
00:20:24,210 --> 00:20:33,730
there are<font color="#E5E5E5"> many</font><font color="#CCCCCC"> defenses but the question</font>

456
00:20:26,530 --> 00:20:39,550
is can<font color="#CCCCCC"> you well can</font><font color="#E5E5E5"> you maybe just find</font>

457
00:20:33,730 --> 00:20:39,880
a simple way around that we can take

458
00:20:39,550 --> 00:20:43,649
these guys

459
00:20:39,880 --> 00:20:43,650
<font color="#E5E5E5">obvious</font><font color="#CCCCCC"> thanks</font><font color="#E5E5E5"> again</font>

