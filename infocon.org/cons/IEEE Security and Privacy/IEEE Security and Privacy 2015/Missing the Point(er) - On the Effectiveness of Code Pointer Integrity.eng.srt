1
00:00:00,149 --> 00:00:05,700
good afternoon<font color="#E5E5E5"> I'm Hamid Rafi from MIT</font>

2
00:00:03,419 --> 00:00:07,649
Lincoln<font color="#CCCCCC"> lab</font><font color="#E5E5E5"> today I'm going to talk</font>

3
00:00:05,700 --> 00:00:09,360
about<font color="#E5E5E5"> an attack that we performed</font>

4
00:00:07,649 --> 00:00:12,150
against a memory corruption defense

5
00:00:09,360 --> 00:00:14,309
called code pointer integrity<font color="#CCCCCC"> this is</font>

6
00:00:12,150 --> 00:00:16,109
<font color="#CCCCCC">joint work with my students on the first</font>

7
00:00:14,309 --> 00:00:19,650
<font color="#CCCCCC">line and</font><font color="#E5E5E5"> my colleagues on the second</font>

8
00:00:16,109 --> 00:00:21,210
line so at the<font color="#CCCCCC"> beginning I'm going</font><font color="#E5E5E5"> to</font>

9
00:00:19,650 --> 00:00:23,070
<font color="#E5E5E5">tell you what you will see in the rest</font>

10
00:00:21,210 --> 00:00:25,470
<font color="#E5E5E5">of the talk</font><font color="#CCCCCC"> so this is a bottom line up</font>

11
00:00:23,070 --> 00:00:28,080
front slide there was a technique<font color="#E5E5E5"> that</font>

12
00:00:25,470 --> 00:00:29,519
<font color="#E5E5E5">was proposed at OSD I last year it was</font>

13
00:00:28,080 --> 00:00:32,070
called it's<font color="#E5E5E5"> called the code pointer</font>

14
00:00:29,519 --> 00:00:34,170
integrity<font color="#E5E5E5"> it was developed by teams at</font>

15
00:00:32,070 --> 00:00:37,680
EPFL UC<font color="#E5E5E5"> Berkeley and Stony Brook</font>

16
00:00:34,170 --> 00:00:40,680
University<font color="#E5E5E5"> and it's a memory corruption</font>

17
00:00:37,680 --> 00:00:42,930
defense<font color="#E5E5E5"> in this talk will show that some</font>

18
00:00:40,680 --> 00:00:47,129
of the<font color="#E5E5E5"> assumptions made in</font><font color="#CCCCCC"> the technique</font>

19
00:00:42,930 --> 00:00:49,110
<font color="#E5E5E5">are unsound and in fact specifically</font>

20
00:00:47,129 --> 00:00:51,989
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> the reliance on information</font>

21
00:00:49,110 --> 00:00:53,670
hiding is not a sound<font color="#E5E5E5"> assumption and</font><font color="#CCCCCC"> we</font>

22
00:00:51,989 --> 00:00:55,559
show a<font color="#E5E5E5"> fully functional attack that can</font>

23
00:00:53,670 --> 00:00:59,280
bypass the technique in a matter of

24
00:00:55,559 --> 00:01:01,349
seconds so first I would<font color="#CCCCCC"> like to give</font>

25
00:00:59,280 --> 00:01:03,000
you a quick overview<font color="#E5E5E5"> of the type</font><font color="#CCCCCC"> of</font>

26
00:01:01,350 --> 00:01:04,799
attack that<font color="#E5E5E5"> we are talking about you</font>

27
00:01:03,000 --> 00:01:07,860
heard the number of<font color="#E5E5E5"> overviews in this</font>

28
00:01:04,799 --> 00:01:09,270
session<font color="#CCCCCC"> but just</font><font color="#E5E5E5"> quickly a memory</font>

29
00:01:07,860 --> 00:01:11,729
corruption attack looks<font color="#E5E5E5"> something like</font>

30
00:01:09,270 --> 00:01:14,729
this<font color="#E5E5E5"> when we ask a machine to copy a</font>

31
00:01:11,729 --> 00:01:17,549
piece of data<font color="#E5E5E5"> a to a buffer</font><font color="#CCCCCC"> see it does</font>

32
00:01:14,729 --> 00:01:19,590
so unfortunately<font color="#E5E5E5"> when</font><font color="#CCCCCC"> we ask it to copy</font>

33
00:01:17,549 --> 00:01:21,869
<font color="#E5E5E5">data B which is now larger than the</font>

34
00:01:19,590 --> 00:01:24,750
buffer<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the same buffer C it is still</font>

35
00:01:21,869 --> 00:01:28,080
<font color="#E5E5E5">no so but it corrupts adjacent values</font>

36
00:01:24,750 --> 00:01:30,570
after the buffer so what<font color="#E5E5E5"> could be stored</font>

37
00:01:28,080 --> 00:01:32,970
in that in those<font color="#E5E5E5"> locations well as it</font>

38
00:01:30,570 --> 00:01:34,740
turns<font color="#E5E5E5"> out there can be important data</font>

39
00:01:32,970 --> 00:01:36,750
values such as function pointers or

40
00:01:34,740 --> 00:01:39,149
return addresses<font color="#E5E5E5"> or function arguments</font>

41
00:01:36,750 --> 00:01:41,340
to store<font color="#E5E5E5"> it there and by overwriting</font>

42
00:01:39,150 --> 00:01:43,920
those values an attacker can hijack

43
00:01:41,340 --> 00:01:47,070
control of the<font color="#E5E5E5"> machine this is the basis</font>

44
00:01:43,920 --> 00:01:49,229
of a memory corruption attack<font color="#E5E5E5"> now in the</font>

45
00:01:47,070 --> 00:01:52,130
past this<font color="#CCCCCC"> was done by redirecting</font>

46
00:01:49,229 --> 00:01:54,960
<font color="#CCCCCC">execution to a maliciously injected code</font>

47
00:01:52,130 --> 00:01:56,640
otherwise known as<font color="#E5E5E5"> code injection now</font>

48
00:01:54,960 --> 00:01:59,369
<font color="#E5E5E5">because of the</font><font color="#CCCCCC"> defense's such as data</font>

49
00:01:56,640 --> 00:02:01,710
execution prevention or W X or X or

50
00:01:59,369 --> 00:02:04,259
non-executable memory<font color="#E5E5E5"> this is usually</font>

51
00:02:01,710 --> 00:02:07,408
done with code reuse attacks or<font color="#CCCCCC"> ROC</font>

52
00:02:04,259 --> 00:02:10,440
attacks but the principles are<font color="#CCCCCC"> the same</font>

53
00:02:07,409 --> 00:02:13,810
so this<font color="#E5E5E5"> is an example of a control flow</font>

54
00:02:10,440 --> 00:02:17,440
hijacking attack where we are asking for

55
00:02:13,810 --> 00:02:20,140
user<font color="#E5E5E5"> name from</font><font color="#CCCCCC"> a user and the address of</font>

56
00:02:17,440 --> 00:02:22,480
<font color="#E5E5E5">a function</font><font color="#CCCCCC"> process user is stored</font><font color="#E5E5E5"> right</font>

57
00:02:20,140 --> 00:02:24,339
next to<font color="#CCCCCC"> that user name</font><font color="#E5E5E5"> so if the user</font>

58
00:02:22,480 --> 00:02:26,980
provides<font color="#E5E5E5"> a</font><font color="#CCCCCC"> user name that's longer than</font>

59
00:02:24,340 --> 00:02:29,590
the buffer<font color="#CCCCCC"> for the user</font><font color="#E5E5E5"> name it can crop</font>

60
00:02:26,980 --> 00:02:31,840
the<font color="#E5E5E5"> value of the function pointer and if</font>

61
00:02:29,590 --> 00:02:33,370
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> smart</font><font color="#CCCCCC"> in their injection if they</font>

62
00:02:31,840 --> 00:02:37,780
put the address<font color="#CCCCCC"> of a different function</font>

63
00:02:33,370 --> 00:02:40,269
<font color="#E5E5E5">let's say delete user they can overwrite</font>

64
00:02:37,780 --> 00:02:44,739
the function<font color="#CCCCCC"> pointer and redirect</font>

65
00:02:40,269 --> 00:02:47,380
execution to delete user<font color="#E5E5E5"> a nice way</font><font color="#CCCCCC"> of</font>

66
00:02:44,739 --> 00:02:49,959
describing this type of<font color="#E5E5E5"> attack is this</font>

67
00:02:47,380 --> 00:02:52,030
<font color="#E5E5E5">text</font><font color="#CCCCCC"> that says because</font><font color="#E5E5E5"> the source and</font>

68
00:02:49,959 --> 00:02:55,510
destination of data movement is not

69
00:02:52,030 --> 00:02:58,120
properly checked<font color="#E5E5E5"> an attacker can crop</font>

70
00:02:55,510 --> 00:02:59,769
<font color="#E5E5E5">the values and hijack control now would</font>

71
00:02:58,120 --> 00:03:02,470
<font color="#E5E5E5">you like to take a wild guess which</font>

72
00:02:59,769 --> 00:03:04,959
decade this text was written<font color="#E5E5E5"> in was</font>

73
00:03:02,470 --> 00:03:08,470
<font color="#E5E5E5">actually written way back in the 70s</font>

74
00:03:04,959 --> 00:03:10,180
so in them as a matter<font color="#E5E5E5"> of fact 1972 so</font>

75
00:03:08,470 --> 00:03:13,450
we've had this problem for<font color="#E5E5E5"> five decades</font>

76
00:03:10,180 --> 00:03:15,970
<font color="#CCCCCC">in computer science</font><font color="#E5E5E5"> and we still have it</font>

77
00:03:13,450 --> 00:03:19,209
<font color="#CCCCCC">today and</font><font color="#E5E5E5"> partly because defenses that</font>

78
00:03:15,970 --> 00:03:20,380
<font color="#E5E5E5">are efficient and that are preventing</font>

79
00:03:19,209 --> 00:03:23,190
memory corruption attack and are

80
00:03:20,380 --> 00:03:25,269
efficient are actually hard<font color="#CCCCCC"> to design</font>

81
00:03:23,190 --> 00:03:27,760
<font color="#CCCCCC">but we do know how</font><font color="#E5E5E5"> to solve this problem</font>

82
00:03:25,269 --> 00:03:30,100
<font color="#E5E5E5">if we provide complete memory safety</font>

83
00:03:27,760 --> 00:03:32,170
<font color="#CCCCCC">he's going to prevent all</font><font color="#E5E5E5"> of these</font><font color="#CCCCCC"> type</font>

84
00:03:30,100 --> 00:03:34,720
<font color="#CCCCCC">of attacks and complete memory</font><font color="#E5E5E5"> safety</font>

85
00:03:32,170 --> 00:03:36,880
refers to two properties<font color="#E5E5E5"> the first one</font>

86
00:03:34,720 --> 00:03:39,430
is providing spatial pointer safety

87
00:03:36,880 --> 00:03:42,370
meaning<font color="#E5E5E5"> that the pointer can point</font><font color="#CCCCCC"> to</font>

88
00:03:39,430 --> 00:03:45,370
some locations but not other locations

89
00:03:42,370 --> 00:03:46,510
so by enforcing that<font color="#E5E5E5"> we can ensure</font><font color="#CCCCCC"> that</font>

90
00:03:45,370 --> 00:03:48,819
<font color="#E5E5E5">the function pointer cannot be</font>

91
00:03:46,510 --> 00:03:51,130
redirected the second property<font color="#E5E5E5"> is</font>

92
00:03:48,819 --> 00:03:53,560
temporal a pointer safety meaning that a

93
00:03:51,130 --> 00:03:56,380
pointer may be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> point to a</font>

94
00:03:53,560 --> 00:03:58,209
<font color="#E5E5E5">location but after some</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> that</font>

95
00:03:56,380 --> 00:04:00,250
location<font color="#E5E5E5"> is holding some other data</font>

96
00:03:58,209 --> 00:04:02,350
value<font color="#E5E5E5"> the pointer isn't not allowed to</font>

97
00:04:00,250 --> 00:04:03,910
point to that<font color="#E5E5E5"> location and there are</font>

98
00:04:02,350 --> 00:04:06,340
techniques<font color="#E5E5E5"> that have been implemented in</font>

99
00:04:03,910 --> 00:04:08,920
<font color="#CCCCCC">the community that provide complete</font>

100
00:04:06,340 --> 00:04:11,739
<font color="#CCCCCC">memory safety</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> example the soft bound</font>

101
00:04:08,920 --> 00:04:15,010
technique but plus<font color="#E5E5E5"> it's sex sets</font>

102
00:04:11,739 --> 00:04:16,168
<font color="#E5E5E5">extension it provides complete memory</font>

103
00:04:15,010 --> 00:04:19,000
<font color="#CCCCCC">safety</font>

104
00:04:16,168 --> 00:04:21,969
unfortunately for unmanaged languages

105
00:04:19,000 --> 00:04:23,890
like C<font color="#CCCCCC"> C++</font><font color="#E5E5E5"> that comes at high cost</font>

106
00:04:21,970 --> 00:04:27,790
more<font color="#E5E5E5"> than</font><font color="#CCCCCC"> hundred percent overhead</font>

107
00:04:23,890 --> 00:04:29,289
usually and that<font color="#CCCCCC"> is the motivation why</font>

108
00:04:27,790 --> 00:04:31,180
<font color="#CCCCCC">searchers have looked at</font><font color="#E5E5E5"> like their way</font>

109
00:04:29,290 --> 00:04:33,460
techniques to enforce memory<font color="#CCCCCC"> safety</font><font color="#E5E5E5"> and</font>

110
00:04:31,180 --> 00:04:35,590
code pointer integrity is one of those

111
00:04:33,460 --> 00:04:36,909
<font color="#CCCCCC">lighter weight techniques</font><font color="#E5E5E5"> and the</font>

112
00:04:35,590 --> 00:04:39,489
concept<font color="#E5E5E5"> behind it is actually</font><font color="#CCCCCC"> fairly</font>

113
00:04:36,910 --> 00:04:42,910
simple<font color="#CCCCCC"> they enforce memory safety checks</font>

114
00:04:39,490 --> 00:04:44,920
but only on on code pointers<font color="#E5E5E5"> so in this</font>

115
00:04:42,910 --> 00:04:47,080
case they don't protect<font color="#E5E5E5"> data values or</font>

116
00:04:44,920 --> 00:04:50,320
data pointers<font color="#E5E5E5"> but they do protect code</font>

117
00:04:47,080 --> 00:04:54,280
pointers the process user example that I

118
00:04:50,320 --> 00:04:57,010
<font color="#E5E5E5">mentioned so if we look at the spectrum</font>

119
00:04:54,280 --> 00:04:58,479
<font color="#CCCCCC">of possibilities at the very left</font><font color="#E5E5E5"> end we</font>

120
00:04:57,010 --> 00:05:01,030
have the status code no memory

121
00:04:58,480 --> 00:05:03,760
protection<font color="#CCCCCC"> which is really</font><font color="#E5E5E5"> bad is</font><font color="#CCCCCC"> li</font>

122
00:05:01,030 --> 00:05:06,219
attackable<font color="#CCCCCC"> and at the</font><font color="#E5E5E5"> very right end we</font>

123
00:05:03,760 --> 00:05:08,490
have complete memory<font color="#E5E5E5"> safety but it is</font>

124
00:05:06,220 --> 00:05:12,370
slow<font color="#E5E5E5"> more than hundred percent overhead</font>

125
00:05:08,490 --> 00:05:13,630
<font color="#E5E5E5">CPI is actually somewhere in between it</font>

126
00:05:12,370 --> 00:05:16,000
provides some<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the guarantees of</font>

127
00:05:13,630 --> 00:05:18,400
<font color="#E5E5E5">complete memory</font><font color="#CCCCCC"> safety but with much</font>

128
00:05:16,000 --> 00:05:19,780
lower overhead<font color="#E5E5E5"> less than</font><font color="#CCCCCC"> 10 percent on</font>

129
00:05:18,400 --> 00:05:22,060
average<font color="#CCCCCC"> although for some of the</font>

130
00:05:19,780 --> 00:05:24,909
<font color="#CCCCCC">benchmarks is higher there's another</font>

131
00:05:22,060 --> 00:05:29,800
variant of CPI called code pointer

132
00:05:24,910 --> 00:05:32,380
safety code pointer safety or CPS<font color="#E5E5E5"> which</font>

133
00:05:29,800 --> 00:05:34,780
doesn't protect pointers to pointers<font color="#E5E5E5"> so</font>

134
00:05:32,380 --> 00:05:37,360
it's a weaker<font color="#E5E5E5"> security guarantee but</font>

135
00:05:34,780 --> 00:05:39,849
with lower<font color="#E5E5E5"> overhead but in our attack we</font>

136
00:05:37,360 --> 00:05:42,490
attack the<font color="#E5E5E5"> generalized technique of CPI</font>

137
00:05:39,850 --> 00:05:47,260
itself so we won't<font color="#E5E5E5"> talk about CPS any</font>

138
00:05:42,490 --> 00:05:49,300
longer<font color="#E5E5E5"> so let's look at how CPI works</font>

139
00:05:47,260 --> 00:05:52,090
<font color="#E5E5E5">the concept behind it is actually fairly</font>

140
00:05:49,300 --> 00:05:54,490
simple<font color="#E5E5E5"> they take any code pointer from</font>

141
00:05:52,090 --> 00:05:56,500
<font color="#E5E5E5">the code and replace that with an index</font>

142
00:05:54,490 --> 00:05:59,440
<font color="#CCCCCC">to a region of memory which is called</font>

143
00:05:56,500 --> 00:06:01,690
<font color="#E5E5E5">the safe region so in this case the</font>

144
00:05:59,440 --> 00:06:03,910
<font color="#CCCCCC">address of process user function is</font>

145
00:06:01,690 --> 00:06:05,950
replaced<font color="#CCCCCC"> within it with a reference</font><font color="#E5E5E5"> into</font>

146
00:06:03,910 --> 00:06:09,100
the safe region let's say in this case

147
00:06:05,950 --> 00:06:13,030
<font color="#E5E5E5">slot number</font><font color="#CCCCCC"> six and</font><font color="#E5E5E5"> again this is a</font>

148
00:06:09,100 --> 00:06:16,540
simplified view of what CPI is so more

149
00:06:13,030 --> 00:06:19,000
specifically the base<font color="#E5E5E5"> address of the</font>

150
00:06:16,540 --> 00:06:21,430
safe region is added<font color="#CCCCCC"> to any function</font>

151
00:06:19,000 --> 00:06:23,590
<font color="#E5E5E5">pointer to get a</font><font color="#CCCCCC"> reference into that</font>

152
00:06:21,430 --> 00:06:25,600
safe region and the safe region is

153
00:06:23,590 --> 00:06:28,890
somewhere<font color="#E5E5E5"> inside memory along with other</font>

154
00:06:25,600 --> 00:06:31,900
regions<font color="#E5E5E5"> of memory</font><font color="#CCCCCC"> like a stack or heap</font>

155
00:06:28,890 --> 00:06:33,789
<font color="#E5E5E5">so the important question is how is the</font>

156
00:06:31,900 --> 00:06:35,530
safe region protected<font color="#CCCCCC"> because it is the</font>

157
00:06:33,790 --> 00:06:37,690
treasure trove<font color="#E5E5E5"> of information and if an</font>

158
00:06:35,530 --> 00:06:40,570
attacker can leak the safe region<font color="#E5E5E5"> or</font>

159
00:06:37,690 --> 00:06:41,529
modify the safe region<font color="#E5E5E5"> then they can</font>

160
00:06:40,570 --> 00:06:47,248
bypass<font color="#E5E5E5"> a technique</font>

161
00:06:41,529 --> 00:06:49,859
CPI<font color="#CCCCCC"> in the current</font><font color="#E5E5E5"> implementation for</font>

162
00:06:47,249 --> 00:06:52,239
<font color="#E5E5E5">32-bit x86 architecture that supports</font>

163
00:06:49,859 --> 00:06:54,609
<font color="#E5E5E5">segmentation CPI actually use a</font>

164
00:06:52,239 --> 00:06:57,339
segmentation<font color="#E5E5E5"> to protect the safe region</font>

165
00:06:54,609 --> 00:06:58,539
which is reasonably secure but<font color="#CCCCCC"> for</font>

166
00:06:57,339 --> 00:07:02,859
architectures that<font color="#E5E5E5"> don't support</font>

167
00:06:58,539 --> 00:07:06,308
segmentation like<font color="#E5E5E5"> 64-bit versions of x86</font>

168
00:07:02,859 --> 00:07:08,769
or<font color="#E5E5E5"> arm</font><font color="#CCCCCC"> it relies on information hiding</font>

169
00:07:06,309 --> 00:07:12,279
<font color="#E5E5E5">and randomizing the location of the safe</font>

170
00:07:08,769 --> 00:07:15,189
region inside memory<font color="#E5E5E5"> so by hiding that</font>

171
00:07:12,279 --> 00:07:19,149
<font color="#E5E5E5">safe region inside memory that is how it</font>

172
00:07:15,189 --> 00:07:22,059
<font color="#E5E5E5">is protected in CPI but if it's a lower</font>

173
00:07:19,149 --> 00:07:25,479
is weak because<font color="#E5E5E5"> it can it can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> leaked</font>

174
00:07:22,059 --> 00:07:28,539
and attacked<font color="#E5E5E5"> the question is can CPI be</font>

175
00:07:25,479 --> 00:07:30,068
attacked the same way in order<font color="#E5E5E5"> to answer</font>

176
00:07:28,539 --> 00:07:32,979
that<font color="#CCCCCC"> question we have looked at two</font>

177
00:07:30,069 --> 00:07:36,639
<font color="#E5E5E5">implicit assumptions behind the CPI</font>

178
00:07:32,979 --> 00:07:38,739
technique the<font color="#CCCCCC"> first one is that in CPI</font>

179
00:07:36,639 --> 00:07:41,679
<font color="#E5E5E5">they specifically make the point of</font>

180
00:07:38,739 --> 00:07:44,378
removing any reference from the<font color="#E5E5E5"> code to</font>

181
00:07:41,679 --> 00:07:46,239
<font color="#E5E5E5">the safe region so that those references</font>

182
00:07:44,379 --> 00:07:47,799
or pointers<font color="#E5E5E5"> can not leak and the</font>

183
00:07:46,239 --> 00:07:50,768
assumption there is that if there is no

184
00:07:47,799 --> 00:07:52,688
pointer to the safe region its<font color="#CCCCCC"> contents</font>

185
00:07:50,769 --> 00:07:55,449
cannot leak cannot be leaked or

186
00:07:52,689 --> 00:07:57,249
maliciously<font color="#E5E5E5"> modify and the second</font>

187
00:07:55,449 --> 00:07:59,919
<font color="#E5E5E5">assumption is</font><font color="#CCCCCC"> that law leaking large</font>

188
00:07:57,249 --> 00:08:02,259
parts of<font color="#CCCCCC"> memory requires prohibitive</font>

189
00:07:59,919 --> 00:08:05,019
number of crashes<font color="#E5E5E5"> so this is against</font>

190
00:08:02,259 --> 00:08:07,119
servers that would respawn upon crashing

191
00:08:05,019 --> 00:08:09,189
<font color="#E5E5E5">which is important for example for web</font>

192
00:08:07,119 --> 00:08:11,469
<font color="#E5E5E5">servers because if they crash</font><font color="#CCCCCC"> and if</font>

193
00:08:09,189 --> 00:08:14,919
they don't<font color="#E5E5E5"> respawn</font><font color="#CCCCCC"> that would hurt</font>

194
00:08:11,469 --> 00:08:18,519
<font color="#E5E5E5">availability so for servers like in</font>

195
00:08:14,919 --> 00:08:20,919
genetics or Apache that would respond<font color="#E5E5E5"> an</font>

196
00:08:18,519 --> 00:08:23,979
attacker can cause a lot many crashes

197
00:08:20,919 --> 00:08:26,948
<font color="#E5E5E5">and still attack the server</font><font color="#CCCCCC"> but then</font>

198
00:08:23,979 --> 00:08:29,049
that may<font color="#E5E5E5"> be detected by by our defensive</font>

199
00:08:26,949 --> 00:08:31,749
mechanisms<font color="#E5E5E5"> so we have looked</font><font color="#CCCCCC"> at these</font>

200
00:08:29,049 --> 00:08:33,728
assumptions one by one the first

201
00:08:31,749 --> 00:08:36,839
<font color="#E5E5E5">assumption is actually not correct and</font>

202
00:08:33,729 --> 00:08:40,029
<font color="#E5E5E5">we showed that in a</font><font color="#CCCCCC"> ccs paper last</font><font color="#E5E5E5"> year</font>

203
00:08:36,839 --> 00:08:42,309
<font color="#E5E5E5">that information not</font><font color="#CCCCCC"> only can leak</font>

204
00:08:40,029 --> 00:08:44,860
directly<font color="#E5E5E5"> but it also can leak indirectly</font>

205
00:08:42,308 --> 00:08:47,170
using<font color="#CCCCCC"> side-channel attacks in this case</font>

206
00:08:44,860 --> 00:08:49,509
an attacker can<font color="#E5E5E5"> redirect a data pointer</font>

207
00:08:47,170 --> 00:08:51,519
dangling data pointer to an arbitrary

208
00:08:49,509 --> 00:08:53,259
<font color="#CCCCCC">location in memory</font><font color="#E5E5E5"> without actually</font>

209
00:08:51,519 --> 00:08:54,300
having<font color="#E5E5E5"> a prior knowledge of where that</font>

210
00:08:53,259 --> 00:08:57,180
location<font color="#E5E5E5"> is</font>

211
00:08:54,300 --> 00:08:59,310
and by monitoring<font color="#CCCCCC"> side-channel at</font><font color="#E5E5E5"> side</font>

212
00:08:57,180 --> 00:09:02,520
channel information<font color="#E5E5E5"> remotely</font><font color="#CCCCCC"> an attacker</font>

213
00:08:59,310 --> 00:09:03,540
can leak<font color="#E5E5E5"> the content of memory and this</font>

214
00:09:02,520 --> 00:09:07,890
<font color="#E5E5E5">is how it works</font>

215
00:09:03,540 --> 00:09:09,770
so on the left<font color="#E5E5E5"> side you</font><font color="#CCCCCC"> have nginx</font>

216
00:09:07,890 --> 00:09:13,410
running for example one server<font color="#E5E5E5"> and</font>

217
00:09:09,770 --> 00:09:16,490
there's a loop that depends on the value

218
00:09:13,410 --> 00:09:19,770
of a pointer data pointer in this case

219
00:09:16,490 --> 00:09:22,050
and<font color="#E5E5E5"> under on the left side you</font><font color="#CCCCCC"> have</font>

220
00:09:19,770 --> 00:09:24,420
sorry the<font color="#E5E5E5"> servers on the right side on</font>

221
00:09:22,050 --> 00:09:27,510
<font color="#CCCCCC">the</font><font color="#E5E5E5"> left side you</font><font color="#CCCCCC"> have the attacker now</font>

222
00:09:24,420 --> 00:09:30,240
if the attacker corrupts<font color="#CCCCCC"> a value the</font>

223
00:09:27,510 --> 00:09:33,030
<font color="#CCCCCC">value of that data pointer and to point</font>

224
00:09:30,240 --> 00:09:35,220
<font color="#E5E5E5">to some arbitrary location in memory the</font>

225
00:09:33,030 --> 00:09:37,740
<font color="#CCCCCC">runtime of that loop would depend on</font>

226
00:09:35,220 --> 00:09:39,300
<font color="#E5E5E5">what value the pointer is pointing to so</font>

227
00:09:37,740 --> 00:09:42,660
in this case the attacker sends a

228
00:09:39,300 --> 00:09:44,750
request<font color="#E5E5E5"> corrupts the value of n to</font><font color="#CCCCCC"> the</font>

229
00:09:42,660 --> 00:09:48,180
first location<font color="#CCCCCC"> in memory</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> 0 and</font>

230
00:09:44,750 --> 00:09:49,920
gets a<font color="#CCCCCC"> response back and based on the</font>

231
00:09:48,180 --> 00:09:52,500
<font color="#CCCCCC">timing of</font><font color="#E5E5E5"> the response they get a point</font>

232
00:09:49,920 --> 00:09:54,780
<font color="#E5E5E5">in that chart of delay versus request</font>

233
00:09:52,500 --> 00:09:56,850
number if they repeat that experiment

234
00:09:54,780 --> 00:09:59,850
<font color="#E5E5E5">corruptive a value of n to</font><font color="#CCCCCC"> the next</font>

235
00:09:56,850 --> 00:10:02,100
location they get another delay which<font color="#CCCCCC"> is</font>

236
00:09:59,850 --> 00:10:04,770
a little bit higher because<font color="#E5E5E5"> in this case</font>

237
00:10:02,100 --> 00:10:09,360
the<font color="#E5E5E5"> byte value is 5 for</font><font color="#CCCCCC"> example if they</font>

238
00:10:04,770 --> 00:10:12,060
repeat that the x<font color="#E5E5E5"> value is</font><font color="#CCCCCC"> FF 4 255</font><font color="#E5E5E5"> they</font>

239
00:10:09,360 --> 00:10:14,430
get a larger delay<font color="#E5E5E5"> and by monitoring</font>

240
00:10:12,060 --> 00:10:16,770
<font color="#E5E5E5">this these delays and attacker can leak</font>

241
00:10:14,430 --> 00:10:21,810
information<font color="#E5E5E5"> without</font><font color="#CCCCCC"> having a prior</font>

242
00:10:16,770 --> 00:10:24,720
reference to that location<font color="#E5E5E5"> in memory so</font>

243
00:10:21,810 --> 00:10:26,670
the first assumption is incorrect<font color="#CCCCCC"> what</font>

244
00:10:24,720 --> 00:10:28,110
<font color="#CCCCCC">about the second assumption</font><font color="#E5E5E5"> leaking</font>

245
00:10:26,670 --> 00:10:31,410
large parts<font color="#E5E5E5"> of memory requires</font>

246
00:10:28,110 --> 00:10:32,760
prohibitive number of crashes<font color="#E5E5E5"> we</font>

247
00:10:31,410 --> 00:10:34,560
<font color="#E5E5E5">actually show that that assumption is</font>

248
00:10:32,760 --> 00:10:37,260
<font color="#E5E5E5">also incorrect we have developed two</font>

249
00:10:34,560 --> 00:10:40,109
attacks that can find<font color="#E5E5E5"> and maliciously</font>

250
00:10:37,260 --> 00:10:42,330
modify the safe region one<font color="#E5E5E5"> is a non</font>

251
00:10:40,110 --> 00:10:43,770
crashing attack that's slower and the

252
00:10:42,330 --> 00:10:46,590
other one is a crashing attack that is

253
00:10:43,770 --> 00:10:50,430
much<font color="#E5E5E5"> faster</font><font color="#CCCCCC"> so I'll</font><font color="#E5E5E5"> talk about how these</font>

254
00:10:46,590 --> 00:10:53,420
<font color="#E5E5E5">are done so I'll talk about the non</font>

255
00:10:50,430 --> 00:10:56,520
crashing attack<font color="#E5E5E5"> on the left side first</font>

256
00:10:53,420 --> 00:10:59,370
<font color="#CCCCCC">in</font><font color="#E5E5E5"> this case we</font><font color="#CCCCCC"> are interested in</font>

257
00:10:56,520 --> 00:11:01,560
finding<font color="#E5E5E5"> the base address</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the safe</font>

258
00:10:59,370 --> 00:11:03,060
region because if we have if we know the

259
00:11:01,560 --> 00:11:05,219
base address<font color="#CCCCCC"> of the safe region we know</font>

260
00:11:03,060 --> 00:11:07,800
the<font color="#E5E5E5"> location of any pointer information</font>

261
00:11:05,220 --> 00:11:10,529
the<font color="#E5E5E5"> meta data that's stored to protect</font>

262
00:11:07,800 --> 00:11:12,839
point function pointers<font color="#E5E5E5"> and we can</font>

263
00:11:10,529 --> 00:11:16,050
modify them using dangling data data

264
00:11:12,839 --> 00:11:19,769
pointers so how do<font color="#CCCCCC"> we do that we first</font>

265
00:11:16,050 --> 00:11:21,870
redirect<font color="#E5E5E5"> a pointer</font><font color="#CCCCCC"> into some arbitrary</font>

266
00:11:19,769 --> 00:11:23,580
location inside<font color="#CCCCCC"> the safe region and this</font>

267
00:11:21,870 --> 00:11:27,329
<font color="#CCCCCC">is a data pointer so it's not protected</font>

268
00:11:23,580 --> 00:11:29,430
<font color="#CCCCCC">by CPI</font><font color="#E5E5E5"> you might ask how do we ensure</font>

269
00:11:27,329 --> 00:11:30,899
that<font color="#E5E5E5"> the process doesn't crash by just</font>

270
00:11:29,430 --> 00:11:33,599
redirecting pointer to an arbitrary

271
00:11:30,899 --> 00:11:36,420
location<font color="#E5E5E5"> well as it turns out the size</font>

272
00:11:33,600 --> 00:11:38,670
of the safe region is<font color="#E5E5E5"> actually much much</font>

273
00:11:36,420 --> 00:11:41,160
larger<font color="#CCCCCC"> than</font><font color="#E5E5E5"> the entropy in</font><font color="#CCCCCC"> the base</font>

274
00:11:38,670 --> 00:11:43,140
<font color="#E5E5E5">address of the safe region so in the</font>

275
00:11:41,160 --> 00:11:46,290
default<font color="#CCCCCC"> implementation that it uses</font>

276
00:11:43,140 --> 00:11:49,529
<font color="#E5E5E5">system</font><font color="#CCCCCC"> ASLR debase the entropy in the</font>

277
00:11:46,290 --> 00:11:51,899
<font color="#E5E5E5">base</font><font color="#CCCCCC"> address is 228 bits of entropy</font>

278
00:11:49,529 --> 00:11:54,660
<font color="#CCCCCC">whereas the size</font><font color="#E5E5E5"> of the safe region is</font>

279
00:11:51,899 --> 00:11:57,660
<font color="#E5E5E5">to 242 bytes so the safe region itself</font>

280
00:11:54,660 --> 00:11:59,250
is much larger than the base address

281
00:11:57,660 --> 00:12:00,390
entropy and<font color="#E5E5E5"> because</font><font color="#CCCCCC"> of that there are</font>

282
00:11:59,250 --> 00:12:03,329
certain regions<font color="#E5E5E5"> that are always</font>

283
00:12:00,390 --> 00:12:05,730
<font color="#E5E5E5">allocated and by redirecting a dangling</font>

284
00:12:03,329 --> 00:12:08,370
the<font color="#CCCCCC"> inter pointer to those locations we</font>

285
00:12:05,730 --> 00:12:12,089
can<font color="#CCCCCC"> be sure that the process</font><font color="#E5E5E5"> doesn't</font>

286
00:12:08,370 --> 00:12:14,490
crash now how do we find the base

287
00:12:12,089 --> 00:12:17,850
address<font color="#E5E5E5"> based on that well as it turns</font>

288
00:12:14,490 --> 00:12:19,620
out other libraries are linked<font color="#E5E5E5"> on top of</font>

289
00:12:17,850 --> 00:12:22,320
the safe region in the<font color="#E5E5E5"> EM map region of</font>

290
00:12:19,620 --> 00:12:26,490
the process and our intuition<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font>

291
00:12:22,320 --> 00:12:29,550
<font color="#E5E5E5">let's say the top libraries Lipsy if we</font>

292
00:12:26,490 --> 00:12:32,070
jump ahead<font color="#CCCCCC"> if we move to the top by the</font>

293
00:12:29,550 --> 00:12:34,109
<font color="#E5E5E5">size of Lib C we can be sure that we</font>

294
00:12:32,070 --> 00:12:36,899
will<font color="#E5E5E5"> never fall off the edge and cause a</font>

295
00:12:34,110 --> 00:12:40,290
crash<font color="#CCCCCC"> in in the process</font><font color="#E5E5E5"> so the second</font>

296
00:12:36,899 --> 00:12:44,880
scan happens size<font color="#E5E5E5"> L above the first scan</font>

297
00:12:40,290 --> 00:12:48,089
and L again<font color="#E5E5E5"> is the size of leap C and</font>

298
00:12:44,880 --> 00:12:50,250
this<font color="#E5E5E5"> is a simplified view</font><font color="#CCCCCC"> of it</font><font color="#E5E5E5"> and then</font>

299
00:12:48,089 --> 00:12:52,560
the<font color="#E5E5E5"> third scan happens size L above the</font>

300
00:12:50,250 --> 00:12:55,980
second scan<font color="#CCCCCC"> so on and so forth and after</font>

301
00:12:52,560 --> 00:12:59,880
we repeat this<font color="#CCCCCC"> n times</font><font color="#E5E5E5"> we'll get into</font>

302
00:12:55,980 --> 00:13:01,829
<font color="#CCCCCC">will land into</font><font color="#E5E5E5"> Lib C and then bingo the</font>

303
00:12:59,880 --> 00:13:03,270
attack is done because<font color="#E5E5E5"> now</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> know the</font>

304
00:13:01,829 --> 00:13:06,660
base address<font color="#CCCCCC"> of the safe region and we</font>

305
00:13:03,270 --> 00:13:09,060
can arbitrarily<font color="#E5E5E5"> modify for the details</font>

306
00:13:06,660 --> 00:13:11,040
of<font color="#E5E5E5"> how we distinguish</font><font color="#CCCCCC"> between</font><font color="#E5E5E5"> pages</font>

307
00:13:09,060 --> 00:13:12,569
inside the safe region and<font color="#E5E5E5"> Lipsy please</font>

308
00:13:11,040 --> 00:13:16,649
refer to the paper<font color="#CCCCCC"> there are a lot of</font>

309
00:13:12,570 --> 00:13:19,290
<font color="#E5E5E5">details involved in the attack</font><font color="#CCCCCC"> but we</font>

310
00:13:16,649 --> 00:13:21,279
can this attack takes actually more than

311
00:13:19,290 --> 00:13:22,719
<font color="#CCCCCC">90</font><font color="#E5E5E5"> hours because there</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> half</font>

312
00:13:21,279 --> 00:13:26,199
<font color="#CCCCCC">you know these scans that</font><font color="#E5E5E5"> should happen</font>

313
00:13:22,720 --> 00:13:28,300
if it is<font color="#E5E5E5"> very large</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> wanted to</font>

314
00:13:26,199 --> 00:13:29,949
<font color="#CCCCCC">actually implement a faster version of</font>

315
00:13:28,300 --> 00:13:31,689
this<font color="#E5E5E5"> attack as well and that is</font><font color="#CCCCCC"> the</font>

316
00:13:29,949 --> 00:13:35,050
<font color="#E5E5E5">crashing attack that I'm showing on the</font>

317
00:13:31,689 --> 00:13:37,809
<font color="#E5E5E5">right side of your screen</font><font color="#CCCCCC"> so here the</font>

318
00:13:35,050 --> 00:13:40,899
first page scan happens<font color="#E5E5E5"> in that same</font>

319
00:13:37,809 --> 00:13:43,329
always<font color="#E5E5E5"> allocated region so it is still</font>

320
00:13:40,899 --> 00:13:44,980
<font color="#CCCCCC">nothing and not causing</font><font color="#E5E5E5"> any crash but</font>

321
00:13:43,329 --> 00:13:51,519
then the second scan happens this way

322
00:13:44,980 --> 00:13:54,459
top in the in the memory so it causes

323
00:13:51,519 --> 00:13:56,529
crash most<font color="#E5E5E5"> likely because those regions</font>

324
00:13:54,459 --> 00:13:59,290
<font color="#E5E5E5">are not</font><font color="#CCCCCC"> allocated</font><font color="#E5E5E5"> and then for this</font>

325
00:13:56,529 --> 00:14:01,839
third<font color="#E5E5E5"> the scan we come down again and</font>

326
00:13:59,290 --> 00:14:04,949
scan some region inside the safe region

327
00:14:01,839 --> 00:14:06,939
for the<font color="#E5E5E5"> fourth scan we can</font><font color="#CCCCCC"> go above</font><font color="#E5E5E5"> in</font>

328
00:14:04,949 --> 00:14:09,430
in the<font color="#E5E5E5"> address the space in memory</font>

329
00:14:06,939 --> 00:14:11,680
<font color="#CCCCCC">caused a crash so what you're doing</font><font color="#E5E5E5"> is a</font>

330
00:14:09,430 --> 00:14:14,529
binary search essentially and after

331
00:14:11,680 --> 00:14:20,709
<font color="#E5E5E5">doing so many scans will eventually land</font>

332
00:14:14,529 --> 00:14:22,269
inside lip see at the<font color="#CCCCCC"> kate scan and then</font>

333
00:14:20,709 --> 00:14:26,819
the attack completes and this can be

334
00:14:22,269 --> 00:14:26,819
<font color="#E5E5E5">done much</font><font color="#CCCCCC"> faster than the</font><font color="#E5E5E5"> other attack</font>

335
00:14:26,879 --> 00:14:33,220
so the question is can can<font color="#E5E5E5"> this attack</font>

336
00:14:31,029 --> 00:14:36,160
be prevented<font color="#E5E5E5"> easily or is there</font>

337
00:14:33,220 --> 00:14:39,399
something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> can be done fairly easily</font>

338
00:14:36,160 --> 00:14:41,170
<font color="#E5E5E5">to prevent our attack well we have</font>

339
00:14:39,399 --> 00:14:44,470
looked<font color="#E5E5E5"> at those options and we have</font>

340
00:14:41,170 --> 00:14:46,059
evaluated<font color="#E5E5E5"> them in our paper I'll refer</font>

341
00:14:44,470 --> 00:14:48,550
you<font color="#CCCCCC"> to the paper for the details of</font><font color="#E5E5E5"> it</font>

342
00:14:46,059 --> 00:14:50,829
but<font color="#E5E5E5"> I'll</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> quickly</font><font color="#CCCCCC"> go over a number</font>

343
00:14:48,550 --> 00:14:53,620
<font color="#E5E5E5">of them here so</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> default</font>

344
00:14:50,829 --> 00:14:56,229
implementation relies on system<font color="#E5E5E5"> a SLR</font>

345
00:14:53,620 --> 00:14:59,019
which has 28 bits of entropy<font color="#E5E5E5"> for the</font>

346
00:14:56,230 --> 00:15:00,939
start address<font color="#E5E5E5"> but what if we don't do</font>

347
00:14:59,019 --> 00:15:04,300
that<font color="#CCCCCC"> what if we</font><font color="#E5E5E5"> allocate</font><font color="#CCCCCC"> the entire end</font>

348
00:15:00,939 --> 00:15:06,610
map or use the entire<font color="#CCCCCC"> M map region and</font>

349
00:15:04,300 --> 00:15:10,109
the<font color="#E5E5E5"> entire region that's</font><font color="#CCCCCC"> available to us</font>

350
00:15:06,610 --> 00:15:13,240
which<font color="#CCCCCC"> is roughly forty seven bits of</font>

351
00:15:10,110 --> 00:15:15,009
addressable space and then<font color="#CCCCCC"> randomize the</font>

352
00:15:13,240 --> 00:15:18,429
location of the safe region there so

353
00:15:15,009 --> 00:15:20,589
instead of<font color="#E5E5E5"> just having a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> of</font>

354
00:15:18,429 --> 00:15:23,290
<font color="#E5E5E5">entropy we can use the entire</font><font color="#CCCCCC"> address</font>

355
00:15:20,589 --> 00:15:25,329
<font color="#CCCCCC">space that is possible</font><font color="#E5E5E5"> and in that in</font>

356
00:15:23,290 --> 00:15:26,920
that<font color="#E5E5E5"> case the non crashing attack will</font>

357
00:15:25,329 --> 00:15:29,469
<font color="#CCCCCC">be stopped</font><font color="#E5E5E5"> we cannot do this without</font>

358
00:15:26,920 --> 00:15:31,420
<font color="#E5E5E5">causing a crash but the crashing attack</font>

359
00:15:29,470 --> 00:15:34,330
is still possible and<font color="#E5E5E5"> on average it will</font>

360
00:15:31,420 --> 00:15:38,110
cause<font color="#CCCCCC"> sixteen crashes for</font><font color="#E5E5E5"> this</font>

361
00:15:34,330 --> 00:15:40,330
even with this randomization another

362
00:15:38,110 --> 00:15:42,250
possible<font color="#E5E5E5"> defense against the attack is</font>

363
00:15:40,330 --> 00:15:46,030
to make the safe region smaller<font color="#CCCCCC"> because</font>

364
00:15:42,250 --> 00:15:48,910
<font color="#E5E5E5">a large part of the attack was that safe</font>

365
00:15:46,030 --> 00:15:50,500
region was very very large itself<font color="#E5E5E5"> and we</font>

366
00:15:48,910 --> 00:15:52,420
have looked at<font color="#E5E5E5"> that option as well</font><font color="#CCCCCC"> there</font>

367
00:15:50,500 --> 00:15:54,900
<font color="#CCCCCC">is another implementation of CPI is</font>

368
00:15:52,420 --> 00:15:57,490
called the hash<font color="#E5E5E5"> table implementation</font>

369
00:15:54,900 --> 00:15:59,800
<font color="#CCCCCC">that is slightly different</font><font color="#E5E5E5"> than the</font>

370
00:15:57,490 --> 00:16:01,750
simple table<font color="#E5E5E5"> so we have looked at what</font>

371
00:15:59,800 --> 00:16:04,359
<font color="#CCCCCC">is the</font><font color="#E5E5E5"> minimum size that is possible for</font>

372
00:16:01,750 --> 00:16:08,350
that hash table size and we<font color="#CCCCCC"> have</font>

373
00:16:04,360 --> 00:16:12,100
evaluated<font color="#E5E5E5"> to do a 33 size to the 28</font>

374
00:16:08,350 --> 00:16:13,870
first<font color="#CCCCCC"> sorry and for that size the</font><font color="#E5E5E5"> spec</font>

375
00:16:12,100 --> 00:16:16,180
benchmark actually did not complete some

376
00:16:13,870 --> 00:16:18,160
of<font color="#CCCCCC"> the programs</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> spec benchmark</font><font color="#E5E5E5"> failed</font>

377
00:16:16,180 --> 00:16:20,199
to provide the<font color="#CCCCCC"> correct result</font><font color="#E5E5E5"> so we</font>

378
00:16:18,160 --> 00:16:21,910
<font color="#E5E5E5">started to increase the hash hash table</font>

379
00:16:20,200 --> 00:16:23,080
size to the minimum size that's

380
00:16:21,910 --> 00:16:27,010
necessary to complete<font color="#CCCCCC"> the entire</font>

381
00:16:23,080 --> 00:16:29,290
spectrum<font color="#E5E5E5"> arc and</font><font color="#CCCCCC"> that size is to</font><font color="#E5E5E5"> 233</font>

382
00:16:27,010 --> 00:16:32,980
bytes<font color="#E5E5E5"> so that's the minimum size that's</font>

383
00:16:29,290 --> 00:16:34,810
necessary<font color="#E5E5E5"> and again in that</font><font color="#CCCCCC"> case the non</font>

384
00:16:32,980 --> 00:16:37,060
crashing attack will<font color="#CCCCCC"> be stopped</font><font color="#E5E5E5"> but the</font>

385
00:16:34,810 --> 00:16:39,160
crashing attack is<font color="#CCCCCC"> possible with on</font>

386
00:16:37,060 --> 00:16:42,760
average<font color="#CCCCCC"> eight thousand crashes</font><font color="#E5E5E5"> so now</font>

387
00:16:39,160 --> 00:16:46,510
the number<font color="#E5E5E5"> of crashes grows so actually</font>

388
00:16:42,760 --> 00:16:52,000
I have<font color="#CCCCCC"> a demo of this attack let me just</font>

389
00:16:46,510 --> 00:16:54,189
quickly show<font color="#CCCCCC"> you</font><font color="#E5E5E5"> okay on the left side</font>

390
00:16:52,000 --> 00:16:56,130
you are seeing<font color="#E5E5E5"> the</font><font color="#CCCCCC"> nginx</font><font color="#E5E5E5"> we have</font>

391
00:16:54,190 --> 00:16:58,030
implemented this attack against nginx

392
00:16:56,130 --> 00:17:00,130
<font color="#E5E5E5">specifically showing you the error log</font>

393
00:16:58,030 --> 00:17:01,870
of engine X so if I<font color="#CCCCCC"> caused a</font><font color="#E5E5E5"> number of</font>

394
00:17:00,130 --> 00:17:04,329
crashes<font color="#E5E5E5"> you should see some entries in</font>

395
00:17:01,870 --> 00:17:06,839
the<font color="#CCCCCC"> air lock</font><font color="#E5E5E5"> and on the right</font><font color="#CCCCCC"> side I</font>

396
00:17:04,329 --> 00:17:09,609
<font color="#E5E5E5">have two worker</font><font color="#CCCCCC"> processes that are</font>

397
00:17:06,839 --> 00:17:11,050
running<font color="#E5E5E5"> on the attacker machine so the</font>

398
00:17:09,609 --> 00:17:14,079
right side<font color="#E5E5E5"> is the attacker machine the</font>

399
00:17:11,050 --> 00:17:16,060
left side is the<font color="#CCCCCC"> victims machine and if</font>

400
00:17:14,079 --> 00:17:19,240
the attack<font color="#CCCCCC"> is successful I should be</font>

401
00:17:16,060 --> 00:17:22,359
able<font color="#CCCCCC"> to get a shell in that window</font>

402
00:17:19,240 --> 00:17:23,560
<font color="#E5E5E5">pained at the bottom so when when I run</font>

403
00:17:22,359 --> 00:17:25,629
the attack script you should see a

404
00:17:23,560 --> 00:17:27,579
number<font color="#E5E5E5"> of crashes then a number of bytes</font>

405
00:17:25,630 --> 00:17:29,860
<font color="#CCCCCC">scanned then it will be ready</font><font color="#E5E5E5"> to deploy</font>

406
00:17:27,579 --> 00:17:31,780
<font color="#CCCCCC">the payload</font><font color="#E5E5E5"> and as soon as I</font><font color="#CCCCCC"> deploy</font><font color="#E5E5E5"> the</font>

407
00:17:29,860 --> 00:17:33,250
payload it will<font color="#CCCCCC"> corrupt</font><font color="#E5E5E5"> a function</font>

408
00:17:31,780 --> 00:17:37,600
pointer inside the safe region and

409
00:17:33,250 --> 00:17:41,050
hijack control<font color="#E5E5E5"> so let's run it crashes</font>

410
00:17:37,600 --> 00:17:44,649
<font color="#CCCCCC">white scans done so</font><font color="#E5E5E5"> right now it caused</font>

411
00:17:41,050 --> 00:17:47,800
<font color="#CCCCCC">ten</font><font color="#E5E5E5"> crashes with 110</font><font color="#CCCCCC"> byte scans so let</font>

412
00:17:44,650 --> 00:17:50,950
me actually<font color="#E5E5E5"> deploy the exploit</font>

413
00:17:47,800 --> 00:17:54,100
<font color="#CCCCCC">i exploit deployed</font><font color="#E5E5E5"> there we go</font><font color="#CCCCCC"> i got a</font>

414
00:17:50,950 --> 00:17:58,150
shell on the machine<font color="#CCCCCC"> i can run whatever</font>

415
00:17:54,100 --> 00:18:02,469
<font color="#CCCCCC">command they want a</font><font color="#E5E5E5"> lessor user</font><font color="#CCCCCC"> ad or</font>

416
00:17:58,150 --> 00:18:05,350
other<font color="#E5E5E5"> commands and as you can</font><font color="#CCCCCC"> see it</font>

417
00:18:02,470 --> 00:18:11,220
<font color="#CCCCCC">caused ten entries</font><font color="#E5E5E5"> in the error log of</font>

418
00:18:05,350 --> 00:18:11,219
<font color="#E5E5E5">nginx which we</font><font color="#CCCCCC"> set the</font><font color="#E5E5E5"> thread crashed</font>

419
00:18:13,710 --> 00:18:22,780
<font color="#E5E5E5">okay so to conclude in</font><font color="#CCCCCC"> this talk we</font>

420
00:18:20,350 --> 00:18:26,429
showed that information hiding in memory

421
00:18:22,780 --> 00:18:30,040
is is not an effective<font color="#E5E5E5"> defense and</font>

422
00:18:26,430 --> 00:18:32,800
that's how systems like<font color="#CCCCCC"> is a Larabar</font>

423
00:18:30,040 --> 00:18:34,780
<font color="#CCCCCC">bypass and even state of the art</font>

424
00:18:32,800 --> 00:18:36,520
techniques like<font color="#E5E5E5"> CPI can be bypassed</font><font color="#CCCCCC"> by</font>

425
00:18:34,780 --> 00:18:39,940
more<font color="#CCCCCC"> sophisticated forms of reformation</font>

426
00:18:36,520 --> 00:18:41,830
leakage<font color="#CCCCCC"> now I have to mention that</font><font color="#E5E5E5"> CPI</font>

427
00:18:39,940 --> 00:18:43,870
does<font color="#E5E5E5"> certainly raise the bar because now</font>

428
00:18:41,830 --> 00:18:47,110
<font color="#E5E5E5">I have to attack CPI and then attack the</font>

429
00:18:43,870 --> 00:18:48,760
<font color="#E5E5E5">machine but we believe that the true</font>

430
00:18:47,110 --> 00:18:53,679
cost of preventing memory corruption

431
00:18:48,760 --> 00:18:55,720
attacks is actually very<font color="#E5E5E5"> high and some</font>

432
00:18:53,680 --> 00:18:57,880
of the more promising defenses in<font color="#E5E5E5"> the</font>

433
00:18:55,720 --> 00:19:00,400
community<font color="#E5E5E5"> are those that are looking</font><font color="#CCCCCC"> for</font>

434
00:18:57,880 --> 00:19:03,670
<font color="#CCCCCC">hardware extensions that can facilitate</font>

435
00:19:00,400 --> 00:19:07,570
<font color="#E5E5E5">or make complete</font><font color="#CCCCCC"> memory safety</font><font color="#E5E5E5"> checks</font>

436
00:19:03,670 --> 00:19:09,340
faster<font color="#E5E5E5"> the pump talk that you heard in</font>

437
00:19:07,570 --> 00:19:11,290
this session<font color="#E5E5E5"> earlier in this session and</font>

438
00:19:09,340 --> 00:19:13,959
the cherry talk that you heard on<font color="#CCCCCC"> Monday</font>

439
00:19:11,290 --> 00:19:15,970
<font color="#E5E5E5">or some of the more promising defenses</font>

440
00:19:13,960 --> 00:19:20,730
that<font color="#E5E5E5"> can prevent this type of attack in</font>

441
00:19:15,970 --> 00:19:23,590
an efficient manner<font color="#E5E5E5"> lastly I have to</font>

442
00:19:20,730 --> 00:19:26,020
mention that this work<font color="#E5E5E5"> was</font><font color="#CCCCCC"> only possible</font>

443
00:19:23,590 --> 00:19:28,389
<font color="#E5E5E5">because</font><font color="#CCCCCC"> the CPI team has graciously</font>

444
00:19:26,020 --> 00:19:30,310
<font color="#E5E5E5">agreed to share their implementation</font>

445
00:19:28,390 --> 00:19:32,050
which<font color="#CCCCCC"> is much more</font><font color="#E5E5E5"> than many would do in</font>

446
00:19:30,310 --> 00:19:34,240
the community<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> really thankful</font>

447
00:19:32,050 --> 00:19:36,340
to<font color="#E5E5E5"> them</font><font color="#CCCCCC"> for doing so</font><font color="#E5E5E5"> we have been in</font>

448
00:19:34,240 --> 00:19:37,840
contact<font color="#E5E5E5"> with them with long email</font>

449
00:19:36,340 --> 00:19:40,720
exchanges<font color="#E5E5E5"> that have been very</font>

450
00:19:37,840 --> 00:19:42,189
constructive for both of our<font color="#E5E5E5"> teams they</font>

451
00:19:40,720 --> 00:19:44,050
mentioned to us that<font color="#CCCCCC"> they are working on</font>

452
00:19:42,190 --> 00:19:46,930
a<font color="#E5E5E5"> software fault isolation based</font>

453
00:19:44,050 --> 00:19:48,850
implementation<font color="#CCCCCC"> of CPI</font><font color="#E5E5E5"> to protect the</font>

454
00:19:46,930 --> 00:19:52,810
safe region and we believe<font color="#CCCCCC"> that that's</font><font color="#E5E5E5"> a</font>

455
00:19:48,850 --> 00:19:55,659
<font color="#E5E5E5">great idea</font><font color="#CCCCCC"> to move away from</font><font color="#E5E5E5"> information</font>

456
00:19:52,810 --> 00:19:59,050
hiding<font color="#E5E5E5"> and use more</font><font color="#CCCCCC"> use of stronger</font>

457
00:19:55,660 --> 00:20:00,970
defenses<font color="#CCCCCC"> we would love to see an</font>

458
00:19:59,050 --> 00:20:02,190
implementation<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the CFI</font><font color="#CCCCCC"> based</font>

459
00:20:00,970 --> 00:20:06,100
technique

460
00:20:02,190 --> 00:20:10,210
<font color="#E5E5E5">some of the previous</font><font color="#CCCCCC"> I'm sorry</font><font color="#E5E5E5"> SFI based</font>

461
00:20:06,100 --> 00:20:12,039
techniques<font color="#CCCCCC"> have had larger overhead so</font>

462
00:20:10,210 --> 00:20:14,080
we would love to<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> evaluate</font>

463
00:20:12,039 --> 00:20:16,169
this new implementation of CPI as well

464
00:20:14,080 --> 00:20:18,070
<font color="#E5E5E5">what we are really</font><font color="#CCCCCC"> thankful</font><font color="#E5E5E5"> to them for</font>

465
00:20:16,169 --> 00:20:21,750
collaborating with us and sharing their

466
00:20:18,070 --> 00:20:21,750
implementation thank you

467
00:20:26,560 --> 00:20:32,200
time<font color="#E5E5E5"> for one quick question</font><font color="#CCCCCC"> than lunch</font>

468
00:20:28,690 --> 00:20:34,210
<font color="#CCCCCC">oh so I</font><font color="#E5E5E5"> am all</font><font color="#CCCCCC"> edema question so from</font>

469
00:20:32,200 --> 00:20:36,550
epfl<font color="#CCCCCC"> I am one is louder please</font>

470
00:20:34,210 --> 00:20:39,070
<font color="#E5E5E5">I'm relative more question so from epfl</font>

471
00:20:36,550 --> 00:20:40,960
<font color="#CCCCCC">I am one of</font><font color="#E5E5E5"> the authors</font><font color="#CCCCCC"> of CPI work so</font>

472
00:20:39,070 --> 00:20:44,860
yeah we did some email exchanges<font color="#CCCCCC"> with</font>

473
00:20:40,960 --> 00:20:47,170
you and so<font color="#E5E5E5"> yes since for the work on you</font>

474
00:20:44,860 --> 00:20:50,290
analyzing<font color="#E5E5E5"> the information</font><font color="#CCCCCC"> hiding based</font>

475
00:20:47,170 --> 00:20:51,940
<font color="#CCCCCC">implementation of CPI</font><font color="#E5E5E5"> but I'd like to</font>

476
00:20:50,290 --> 00:20:54,730
point out<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> just one of</font><font color="#E5E5E5"> the</font>

477
00:20:51,940 --> 00:20:58,720
implementations<font color="#CCCCCC"> that we released so we</font>

478
00:20:54,730 --> 00:21:01,510
released and so in the our<font color="#CCCCCC"> original</font>

479
00:20:58,720 --> 00:21:03,460
paper we also<font color="#E5E5E5"> described the SFI based</font>

480
00:21:01,510 --> 00:21:07,050
implementation<font color="#CCCCCC"> we did</font><font color="#E5E5E5"> not start working</font>

481
00:21:03,460 --> 00:21:10,600
<font color="#CCCCCC">on it now it existed all the time and</font>

482
00:21:07,050 --> 00:21:13,409
<font color="#E5E5E5">also even among information hiding in</font>

483
00:21:10,600 --> 00:21:16,840
for my<font color="#E5E5E5"> information hiding based</font>

484
00:21:13,410 --> 00:21:18,400
implementations<font color="#E5E5E5"> we also have stronger</font>

485
00:21:16,840 --> 00:21:20,919
implementations and<font color="#E5E5E5"> the value attacked</font>

486
00:21:18,400 --> 00:21:22,840
<font color="#E5E5E5">right so we have yes</font><font color="#CCCCCC"> we have evaluated</font>

487
00:21:20,920 --> 00:21:25,450
all of the implementations that<font color="#E5E5E5"> were</font>

488
00:21:22,840 --> 00:21:27,820
available<font color="#E5E5E5"> to</font><font color="#CCCCCC"> us which were three of them</font>

489
00:21:25,450 --> 00:21:30,970
<font color="#E5E5E5">simple table hash table and</font><font color="#CCCCCC"> sub</font><font color="#E5E5E5"> table</font>

490
00:21:27,820 --> 00:21:33,879
and only hash table and<font color="#E5E5E5"> simple table</font>

491
00:21:30,970 --> 00:21:35,800
provided<font color="#E5E5E5"> the correct values and we</font>

492
00:21:33,880 --> 00:21:37,590
evaluated<font color="#E5E5E5"> those and we have all the</font>

493
00:21:35,800 --> 00:21:40,419
<font color="#E5E5E5">numbers in the paper</font>

494
00:21:37,590 --> 00:21:41,830
<font color="#E5E5E5">we have also evaluated other options</font>

495
00:21:40,420 --> 00:21:43,390
that<font color="#E5E5E5"> are possible that were not</font>

496
00:21:41,830 --> 00:21:47,110
implemented to to make the

497
00:21:43,390 --> 00:21:48,910
implementation stronger and yeah we

498
00:21:47,110 --> 00:21:51,040
would love<font color="#E5E5E5"> to see the SFI implementation</font>

499
00:21:48,910 --> 00:21:55,510
as<font color="#E5E5E5"> well</font><font color="#CCCCCC"> oh yeah you can download it now</font>

500
00:21:51,040 --> 00:21:58,960
from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> website so I I think that it's</font>

501
00:21:55,510 --> 00:22:02,140
a good reason<font color="#CCCCCC"> to</font><font color="#E5E5E5"> file a bug report</font><font color="#CCCCCC"> the</font>

502
00:21:58,960 --> 00:22:04,270
<font color="#CCCCCC">for</font><font color="#E5E5E5"> CPI so we would welcome getting a</font>

503
00:22:02,140 --> 00:22:05,500
bug report<font color="#CCCCCC"> and our issue tracker about</font>

504
00:22:04,270 --> 00:22:08,730
the<font color="#E5E5E5"> bugs that you found in the</font>

505
00:22:05,500 --> 00:22:10,750
implementation<font color="#CCCCCC"> but I do not</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> that a</font>

506
00:22:08,730 --> 00:22:13,090
vulnerability in<font color="#E5E5E5"> one of the</font>

507
00:22:10,750 --> 00:22:17,020
implementations warrants<font color="#E5E5E5"> the claims that</font>

508
00:22:13,090 --> 00:22:18,760
<font color="#E5E5E5">CPI as a technique is broken right we</font>

509
00:22:17,020 --> 00:22:21,070
are not making that<font color="#E5E5E5"> claim we</font><font color="#CCCCCC"> are</font>

510
00:22:18,760 --> 00:22:24,460
evaluating<font color="#CCCCCC"> different implementations and</font>

511
00:22:21,070 --> 00:22:26,710
we are we<font color="#CCCCCC"> are trying to understand</font><font color="#E5E5E5"> what</font>

512
00:22:24,460 --> 00:22:28,600
is the effectiveness<font color="#E5E5E5"> that CPI provides</font>

513
00:22:26,710 --> 00:22:30,220
and what it takes<font color="#E5E5E5"> to bypass them we're</font>

514
00:22:28,600 --> 00:22:32,020
actually<font color="#E5E5E5"> not making any judgment call as</font>

515
00:22:30,220 --> 00:22:33,790
to whether or<font color="#CCCCCC"> not</font><font color="#E5E5E5"> you would be able to</font>

516
00:22:32,020 --> 00:22:36,960
<font color="#E5E5E5">detect that many</font><font color="#CCCCCC"> crashes or just many</font>

517
00:22:33,790 --> 00:22:40,740
crashes<font color="#E5E5E5"> or how how difficult it would be</font>

518
00:22:36,960 --> 00:22:40,740
<font color="#CCCCCC">okay thank you</font>

519
00:22:42,119 --> 00:22:49,149
follow up with<font color="#CCCCCC"> robust comments I</font><font color="#E5E5E5"> think</font>

520
00:22:45,239 --> 00:22:51,549
it's important<font color="#E5E5E5"> to note that the the CPI</font>

521
00:22:49,149 --> 00:22:52,959
so essentially the work is<font color="#E5E5E5"> its only</font>

522
00:22:51,549 --> 00:22:56,859
focus on actually<font color="#E5E5E5"> the simplest</font>

523
00:22:52,960 --> 00:22:58,690
<font color="#E5E5E5">implementation for CPI and we</font><font color="#CCCCCC"> actually I</font>

524
00:22:56,859 --> 00:23:00,369
think<font color="#E5E5E5"> what was supposed</font><font color="#CCCCCC"> to yesterday has</font>

525
00:22:58,690 --> 00:23:02,979
shows numbers<font color="#CCCCCC"> for the other</font>

526
00:23:00,369 --> 00:23:05,889
implementations<font color="#CCCCCC"> I will take at least for</font>

527
00:23:02,979 --> 00:23:07,690
example<font color="#CCCCCC"> 15,000 crashes to for some of</font>

528
00:23:05,889 --> 00:23:10,629
the implementations to actually for the

529
00:23:07,690 --> 00:23:12,909
attack to<font color="#E5E5E5"> work and also CPI at the</font>

530
00:23:10,629 --> 00:23:15,279
design it has a<font color="#CCCCCC"> theoretical essentially</font>

531
00:23:12,909 --> 00:23:17,259
has<font color="#CCCCCC"> a theoretical</font><font color="#E5E5E5"> properties and</font><font color="#CCCCCC"> the</font>

532
00:23:15,279 --> 00:23:19,029
they attacked essentially it's only on

533
00:23:17,259 --> 00:23:22,599
one of the simplest implementation and

534
00:23:19,029 --> 00:23:24,159
it's not on the CPI's design thank you

535
00:23:22,599 --> 00:23:25,869
for your question<font color="#E5E5E5"> as I mentioned we</font>

536
00:23:24,159 --> 00:23:27,460
actually do evaluate all of the

537
00:23:25,869 --> 00:23:33,609
implementations that<font color="#CCCCCC"> were available</font><font color="#E5E5E5"> to</font>

538
00:23:27,460 --> 00:23:35,139
<font color="#E5E5E5">us</font><font color="#CCCCCC"> so the implementation of crisis some</font>

539
00:23:33,609 --> 00:23:36,908
of the implementations<font color="#E5E5E5"> may be</font><font color="#CCCCCC"> rocky and</font>

540
00:23:35,139 --> 00:23:38,408
so on<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> VAWA has</font><font color="#E5E5E5"> done a creative</font>

541
00:23:36,909 --> 00:23:41,289
working<font color="#E5E5E5"> actually making an</font><font color="#CCCCCC"> open-source</font>

542
00:23:38,409 --> 00:23:42,700
and<font color="#E5E5E5"> we welcome the community to</font><font color="#CCCCCC"> actually</font>

543
00:23:41,289 --> 00:23:44,469
help you improve the opening<font color="#CCCCCC"> sorry</font><font color="#E5E5E5"> sure</font>

544
00:23:42,700 --> 00:23:46,269
<font color="#E5E5E5">let's</font><font color="#CCCCCC"> take there's</font><font color="#E5E5E5"> some discussion</font>

545
00:23:44,469 --> 00:23:48,539
offline<font color="#CCCCCC"> yeah let's do the offline it's</font>

546
00:23:46,269 --> 00:23:48,539
lunchtime

