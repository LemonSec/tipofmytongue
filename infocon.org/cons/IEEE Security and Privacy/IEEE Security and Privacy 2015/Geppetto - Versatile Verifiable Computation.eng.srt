1
00:00:00,030 --> 00:00:03,750
hello<font color="#E5E5E5"> everybody my name is Brian Pardo</font>

2
00:00:02,250 --> 00:00:05,609
and this is joint work<font color="#CCCCCC"> with</font><font color="#E5E5E5"> my</font>

3
00:00:03,750 --> 00:00:07,200
colleagues at Microsoft<font color="#CCCCCC"> Research along</font>

4
00:00:05,609 --> 00:00:09,960
with two interns who joined us<font color="#E5E5E5"> from the</font>

5
00:00:07,200 --> 00:00:11,490
<font color="#E5E5E5">University of Virginia so in our work we</font>

6
00:00:09,960 --> 00:00:13,410
consider scenario where<font color="#CCCCCC"> Alice is a</font>

7
00:00:11,490 --> 00:00:15,269
scientist<font color="#E5E5E5"> and unfortunately she hasn't</font>

8
00:00:13,410 --> 00:00:16,680
been<font color="#E5E5E5"> very</font><font color="#CCCCCC"> lucky</font><font color="#E5E5E5"> with her grants and so</font>

9
00:00:15,269 --> 00:00:18,330
she can't afford<font color="#E5E5E5"> the cluster for dreams</font>

10
00:00:16,680 --> 00:00:21,150
and instead she's going to outsource her

11
00:00:18,330 --> 00:00:23,038
research to the cloud and get a<font color="#E5E5E5"> response</font>

12
00:00:21,150 --> 00:00:25,229
<font color="#E5E5E5">back from the cloud based on that</font>

13
00:00:23,039 --> 00:00:26,849
response<font color="#CCCCCC"> she might send the computation</font>

14
00:00:25,230 --> 00:00:29,279
<font color="#E5E5E5">and run it with some new data hoping to</font>

15
00:00:26,849 --> 00:00:30,750
get a<font color="#E5E5E5"> new answer of course from Alice's</font>

16
00:00:29,279 --> 00:00:32,369
perspective it's<font color="#CCCCCC"> very important to know</font>

17
00:00:30,750 --> 00:00:34,020
whether the clouds doing what she asked

18
00:00:32,369 --> 00:00:35,820
it to or if it's doing<font color="#CCCCCC"> something a</font>

19
00:00:34,020 --> 00:00:39,030
<font color="#CCCCCC">little</font><font color="#E5E5E5"> bit simpler and probably cheaper</font>

20
00:00:35,820 --> 00:00:40,829
<font color="#E5E5E5">from the clouds perspective even</font><font color="#CCCCCC"> from</font>

21
00:00:39,030 --> 00:00:42,690
the<font color="#CCCCCC"> perspective of an non-malicious</font>

22
00:00:40,829 --> 00:00:44,460
provider<font color="#E5E5E5"> we like to think that places</font>

23
00:00:42,690 --> 00:00:46,500
like Azure and Amazon<font color="#CCCCCC"> are not in fact</font>

24
00:00:44,460 --> 00:00:47,789
malicious it can be<font color="#E5E5E5"> desirable to be</font><font color="#CCCCCC"> able</font>

25
00:00:46,500 --> 00:00:49,620
<font color="#CCCCCC">to prove that you</font><font color="#E5E5E5"> did the correct</font>

26
00:00:47,789 --> 00:00:51,690
computation<font color="#E5E5E5"> both to instill</font><font color="#CCCCCC"> confidence</font>

27
00:00:49,620 --> 00:00:53,940
<font color="#E5E5E5">in your customers</font><font color="#CCCCCC"> and potentially to</font>

28
00:00:51,690 --> 00:00:55,349
help shed liability<font color="#E5E5E5"> so if a</font><font color="#CCCCCC"> customer is</font>

29
00:00:53,940 --> 00:00:56,730
upset with<font color="#CCCCCC"> the outputs he's getting from</font>

30
00:00:55,350 --> 00:00:58,199
the cloud<font color="#CCCCCC"> it'd be nice to</font><font color="#E5E5E5"> be able to</font>

31
00:00:56,730 --> 00:00:59,489
<font color="#E5E5E5">prove that those outputs came from the</font>

32
00:00:58,199 --> 00:01:02,218
inputs<font color="#E5E5E5"> that he provided and not a</font>

33
00:00:59,489 --> 00:01:03,899
<font color="#E5E5E5">mistake on the</font><font color="#CCCCCC"> providers part so to</font>

34
00:01:02,219 --> 00:01:05,700
formalize this setting we define<font color="#E5E5E5"> a</font>

35
00:01:03,899 --> 00:01:07,619
<font color="#E5E5E5">notion of verifiable computation</font>

36
00:01:05,700 --> 00:01:08,909
protocols<font color="#E5E5E5"> and what this means is</font><font color="#CCCCCC"> that</font>

37
00:01:07,619 --> 00:01:10,920
Alice<font color="#E5E5E5"> can take the function</font><font color="#CCCCCC"> that she</font>

38
00:01:08,909 --> 00:01:13,619
wants to<font color="#CCCCCC"> outsource</font><font color="#E5E5E5"> and convert it into a</font>

39
00:01:10,920 --> 00:01:16,080
pair of<font color="#E5E5E5"> keys a public evaluation key and</font>

40
00:01:13,619 --> 00:01:17,549
a<font color="#CCCCCC"> public verification key</font><font color="#E5E5E5"> she can then</font>

41
00:01:16,080 --> 00:01:19,439
send the input that<font color="#E5E5E5"> she wants to compute</font>

42
00:01:17,549 --> 00:01:21,570
on to the cloud<font color="#E5E5E5"> and the worker can</font>

43
00:01:19,439 --> 00:01:23,639
compute the<font color="#E5E5E5"> correct answer and use the</font>

44
00:01:21,570 --> 00:01:25,619
public evaluation key to produce a proof

45
00:01:23,640 --> 00:01:27,060
<font color="#CCCCCC">that this particular output</font><font color="#E5E5E5"> is the</font>

46
00:01:25,619 --> 00:01:29,790
correct answer<font color="#E5E5E5"> for the input that was</font>

47
00:01:27,060 --> 00:01:31,530
provided this proof is publicly

48
00:01:29,790 --> 00:01:33,329
verifiable<font color="#CCCCCC"> so you can</font><font color="#E5E5E5"> think of it like a</font>

49
00:01:31,530 --> 00:01:35,159
digital<font color="#E5E5E5"> signature except that it covers</font>

50
00:01:33,329 --> 00:01:37,079
<font color="#CCCCCC">the entire computation not just a</font>

51
00:01:35,159 --> 00:01:38,610
<font color="#E5E5E5">message and so we can send this proof</font>

52
00:01:37,079 --> 00:01:40,529
along with the output back<font color="#CCCCCC"> to Alice</font><font color="#E5E5E5"> and</font>

53
00:01:38,610 --> 00:01:42,540
<font color="#CCCCCC">she can use the public</font><font color="#E5E5E5"> verification key</font>

54
00:01:40,530 --> 00:01:44,670
<font color="#E5E5E5">to check this is indeed</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> correct</font>

55
00:01:42,540 --> 00:01:46,320
<font color="#CCCCCC">output of course the key challenge here</font>

56
00:01:44,670 --> 00:01:47,490
is<font color="#E5E5E5"> that we want the verification to be</font>

57
00:01:46,320 --> 00:01:49,289
cheaper than computing<font color="#E5E5E5"> the</font><font color="#CCCCCC"> function</font>

58
00:01:47,490 --> 00:01:52,320
itself or we<font color="#E5E5E5"> haven't won a whole lot</font>

59
00:01:49,290 --> 00:01:54,570
from<font color="#E5E5E5"> outsourcing now we can add a flavor</font>

60
00:01:52,320 --> 00:01:56,279
of zero knowledge<font color="#E5E5E5"> to this entire</font><font color="#CCCCCC"> setup</font>

61
00:01:54,570 --> 00:01:58,979
<font color="#E5E5E5">and here it's better to think</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

62
00:01:56,280 --> 00:02:00,360
cloud as say another scientist and this

63
00:01:58,979 --> 00:02:02,369
scientist has access to<font color="#E5E5E5"> a</font><font color="#CCCCCC"> private</font>

64
00:02:00,360 --> 00:02:04,020
database and he's willing<font color="#CCCCCC"> to</font><font color="#E5E5E5"> let Alice</font>

65
00:02:02,369 --> 00:02:05,070
compute over<font color="#E5E5E5"> it but he doesn't</font><font color="#CCCCCC"> want to</font>

66
00:02:04,020 --> 00:02:07,560
<font color="#E5E5E5">give her a direct access to</font><font color="#CCCCCC"> that</font>

67
00:02:05,070 --> 00:02:10,109
<font color="#E5E5E5">database and so Alice can provide her</font>

68
00:02:07,560 --> 00:02:12,239
<font color="#CCCCCC">input to Bob and Bob can compute a</font>

69
00:02:10,110 --> 00:02:13,920
function both of his input<font color="#E5E5E5"> and Alice's</font>

70
00:02:12,239 --> 00:02:15,030
input and he can<font color="#E5E5E5"> send</font><font color="#CCCCCC"> backup</font>

71
00:02:13,920 --> 00:02:16,950
that convinces<font color="#E5E5E5"> Alice that the</font>

72
00:02:15,030 --> 00:02:18,989
computation was done<font color="#E5E5E5"> correctly even</font>

73
00:02:16,950 --> 00:02:21,899
though<font color="#CCCCCC"> Alice learns nothing</font><font color="#E5E5E5"> about Bob's</font>

74
00:02:18,989 --> 00:02:23,940
input and so this has<font color="#E5E5E5"> been a very</font>

75
00:02:21,900 --> 00:02:24,900
exciting<font color="#CCCCCC"> area to work in lately</font><font color="#E5E5E5"> when I</font>

76
00:02:23,940 --> 00:02:27,090
first started<font color="#CCCCCC"> working</font><font color="#E5E5E5"> in this area</font><font color="#CCCCCC"> in</font>

77
00:02:24,900 --> 00:02:28,560
2007<font color="#CCCCCC"> if you took</font><font color="#E5E5E5"> a state of the art</font>

78
00:02:27,090 --> 00:02:30,810
protocol and used it to<font color="#CCCCCC"> verify a</font>

79
00:02:28,560 --> 00:02:33,209
computation<font color="#E5E5E5"> it could take upwards of 72</font>

80
00:02:30,810 --> 00:02:34,560
trillion years<font color="#E5E5E5"> to verify a computation</font>

81
00:02:33,209 --> 00:02:37,310
<font color="#E5E5E5">that would take about 15 milliseconds</font>

82
00:02:34,560 --> 00:02:41,130
locally fortunately we've seen dramatic

83
00:02:37,310 --> 00:02:42,870
improvements in<font color="#E5E5E5"> the area both for</font><font color="#CCCCCC"> myself</font>

84
00:02:41,130 --> 00:02:44,760
<font color="#E5E5E5">and from many others in the community to</font>

85
00:02:42,870 --> 00:02:46,380
<font color="#CCCCCC">the point where two years ago</font><font color="#E5E5E5"> at this</font>

86
00:02:44,760 --> 00:02:48,120
conference<font color="#E5E5E5"> we presented the Pinocchio</font>

87
00:02:46,380 --> 00:02:50,010
protocol<font color="#E5E5E5"> where we're finally able to</font>

88
00:02:48,120 --> 00:02:52,350
break<font color="#E5E5E5"> past the point where verification</font>

89
00:02:50,010 --> 00:02:54,390
was cheaper<font color="#CCCCCC"> than doing the computation</font>

90
00:02:52,350 --> 00:02:56,370
yourself<font color="#E5E5E5"> and</font><font color="#CCCCCC"> overall this represented a</font>

91
00:02:54,390 --> 00:02:57,988
fall and<font color="#E5E5E5"> twenty three orders of</font>

92
00:02:56,370 --> 00:03:01,110
<font color="#E5E5E5">magnitude</font><font color="#CCCCCC"> in the course</font><font color="#E5E5E5"> cost of</font>

93
00:02:57,989 --> 00:03:02,370
verifying<font color="#E5E5E5"> these computations and since</font>

94
00:03:01,110 --> 00:03:04,140
then there's<font color="#CCCCCC"> been a ton of great work in</font>

95
00:03:02,370 --> 00:03:05,790
<font color="#CCCCCC">this</font><font color="#E5E5E5"> area there's been work on</font>

96
00:03:04,140 --> 00:03:08,429
optimizing<font color="#CCCCCC"> the Pinocchio protocol for</font>

97
00:03:05,790 --> 00:03:10,319
various operations on adding<font color="#E5E5E5"> to the X</font>

98
00:03:08,430 --> 00:03:11,489
precipitate of the protocol<font color="#E5E5E5"> as well as</font>

99
00:03:10,319 --> 00:03:13,738
<font color="#CCCCCC">using it</font><font color="#E5E5E5"> for various applications</font>

100
00:03:11,489 --> 00:03:16,100
including Bitcoin and<font color="#E5E5E5"> you'll hear about</font>

101
00:03:13,739 --> 00:03:18,359
<font color="#E5E5E5">a couple of these later in this</font><font color="#CCCCCC"> session</font>

102
00:03:16,100 --> 00:03:20,250
<font color="#E5E5E5">however if you look back at</font><font color="#CCCCCC"> the worker</font>

103
00:03:18,359 --> 00:03:22,079
<font color="#E5E5E5">and look at how much effort it takes to</font>

104
00:03:20,250 --> 00:03:23,880
<font color="#E5E5E5">produce one</font><font color="#CCCCCC"> of these proofs there we've</font>

105
00:03:22,079 --> 00:03:25,680
seen a fall of<font color="#CCCCCC"> 18 orders of magnitude</font>

106
00:03:23,880 --> 00:03:26,970
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> great and in many</font><font color="#CCCCCC"> areas of</font>

107
00:03:25,680 --> 00:03:28,739
computer<font color="#CCCCCC"> scientist science you could</font>

108
00:03:26,970 --> 00:03:30,269
<font color="#E5E5E5">just say all right</font><font color="#CCCCCC"> we're done</font>

109
00:03:28,739 --> 00:03:31,980
but unfortunately<font color="#E5E5E5"> here we're still four</font>

110
00:03:30,269 --> 00:03:33,660
to six orders of<font color="#E5E5E5"> magnitude slower than</font>

111
00:03:31,980 --> 00:03:35,608
the original<font color="#E5E5E5"> computation so you're</font><font color="#CCCCCC"> doing</font>

112
00:03:33,660 --> 00:03:37,230
a ton of work<font color="#CCCCCC"> to</font><font color="#E5E5E5"> produce this proof way</font>

113
00:03:35,609 --> 00:03:40,049
above and beyond what you did to produce

114
00:03:37,230 --> 00:03:41,488
the answer<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so with Geppetto we've</font>

115
00:03:40,049 --> 00:03:43,980
tried to look at ways in which<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can</font>

116
00:03:41,489 --> 00:03:45,810
reduce the<font color="#CCCCCC"> cost of</font><font color="#E5E5E5"> generating the proof</font>

117
00:03:43,980 --> 00:03:47,608
as well<font color="#CCCCCC"> as</font><font color="#E5E5E5"> increasing the flexibility of</font>

118
00:03:45,810 --> 00:03:49,950
the prover for various<font color="#E5E5E5"> classes</font><font color="#CCCCCC"> of</font>

119
00:03:47,609 --> 00:03:52,380
computation<font color="#E5E5E5"> so we've developed a new</font>

120
00:03:49,950 --> 00:03:54,660
encoding we call multi cue<font color="#CCCCCC"> APs</font><font color="#E5E5E5"> to enable</font>

121
00:03:52,380 --> 00:03:56,730
computations over shared<font color="#CCCCCC"> state we've</font>

122
00:03:54,660 --> 00:03:58,829
optimized the notion of bounded

123
00:03:56,730 --> 00:04:00,630
bootstrapping for proofs about proofs

124
00:03:58,829 --> 00:04:02,579
<font color="#E5E5E5">and I'll talk a</font><font color="#CCCCCC"> minute in a minute about</font>

125
00:04:00,630 --> 00:04:03,989
<font color="#E5E5E5">why that's useful</font><font color="#CCCCCC"> and finally we've</font>

126
00:04:02,579 --> 00:04:06,030
brought the cost of<font color="#E5E5E5"> generating the proof</font>

127
00:04:03,989 --> 00:04:07,980
closer to the cost of<font color="#E5E5E5"> the actual runtime</font>

128
00:04:06,030 --> 00:04:09,930
<font color="#CCCCCC">through something we call energy</font><font color="#E5E5E5"> saving</font>

129
00:04:07,980 --> 00:04:12,149
circuits<font color="#E5E5E5"> and to support this new</font>

130
00:04:09,930 --> 00:04:14,519
versatility<font color="#CCCCCC"> we've</font><font color="#E5E5E5"> built a new compiler</font>

131
00:04:12,150 --> 00:04:16,350
architecture that scales higher and

132
00:04:14,519 --> 00:04:19,410
enables more flexibility<font color="#CCCCCC"> than previous</font>

133
00:04:16,350 --> 00:04:20,690
compilers so to give you<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of</font>

134
00:04:19,410 --> 00:04:24,000
<font color="#CCCCCC">background before going into</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> details</font>

135
00:04:20,690 --> 00:04:25,320
<font color="#CCCCCC">the Pinocchio system took the</font><font color="#E5E5E5"> C code</font>

136
00:04:24,000 --> 00:04:26,110
that you wanted to outsource<font color="#E5E5E5"> to the</font>

137
00:04:25,320 --> 00:04:28,150
remote

138
00:04:26,110 --> 00:04:30,430
cloud<font color="#E5E5E5"> and compiled it to an intermediate</font>

139
00:04:28,150 --> 00:04:32,109
representation look like a circuit that

140
00:04:30,430 --> 00:04:34,030
<font color="#E5E5E5">circuit was then compiled to an encoding</font>

141
00:04:32,110 --> 00:04:35,680
we call a multi<font color="#CCCCCC"> queue API</font><font color="#E5E5E5"> sorry that we</font>

142
00:04:34,030 --> 00:04:38,138
call a quadratic arithmetic program or

143
00:04:35,680 --> 00:04:39,639
<font color="#CCCCCC">QAP</font><font color="#E5E5E5"> and that encoding is designed to</font>

144
00:04:38,139 --> 00:04:41,530
lend<font color="#E5E5E5"> itself to</font><font color="#CCCCCC"> very efficient</font>

145
00:04:39,639 --> 00:04:43,030
cryptographic protocols such<font color="#CCCCCC"> as</font><font color="#E5E5E5"> the key</font>

146
00:04:41,530 --> 00:04:44,770
generation proof generation and

147
00:04:43,030 --> 00:04:46,869
verification algorithms<font color="#CCCCCC"> I told you about</font>

148
00:04:44,770 --> 00:04:49,120
earlier<font color="#CCCCCC"> and so the important thing for</font>

149
00:04:46,870 --> 00:04:51,520
this talk is that the cost of<font color="#CCCCCC"> generating</font>

150
00:04:49,120 --> 00:04:52,569
the proof as well<font color="#CCCCCC"> as the key size grows</font>

151
00:04:51,520 --> 00:04:54,669
in proportion to<font color="#CCCCCC"> this intermediate</font>

152
00:04:52,569 --> 00:04:56,110
<font color="#E5E5E5">circuit representation so that's where</font>

153
00:04:54,669 --> 00:04:58,990
we're<font color="#E5E5E5"> going to focus our</font><font color="#CCCCCC"> optimization</font>

154
00:04:56,110 --> 00:05:00,669
efforts<font color="#E5E5E5"> so let's look at how pinocchio</font>

155
00:04:58,990 --> 00:05:02,979
would compile a<font color="#E5E5E5"> stateful computation</font>

156
00:05:00,669 --> 00:05:05,438
such<font color="#E5E5E5"> as a loop that's updating its</font><font color="#CCCCCC"> state</font>

157
00:05:02,979 --> 00:05:06,878
on every iteration<font color="#E5E5E5"> so the first thing we</font>

158
00:05:05,439 --> 00:05:09,159
would do<font color="#CCCCCC"> is compile the body of the loop</font>

159
00:05:06,879 --> 00:05:11,409
to a circuit<font color="#E5E5E5"> but then we would repeat</font>

160
00:05:09,159 --> 00:05:13,060
<font color="#CCCCCC">that body four</font><font color="#E5E5E5"> more times as we unroll</font>

161
00:05:11,409 --> 00:05:14,710
the loop<font color="#E5E5E5"> and so this is going to</font><font color="#CCCCCC"> create</font>

162
00:05:13,060 --> 00:05:17,050
a very large circuit representation<font color="#CCCCCC"> and</font>

163
00:05:14,710 --> 00:05:18,279
hence lead to a large evaluation key and

164
00:05:17,050 --> 00:05:21,340
<font color="#E5E5E5">that's not going to be</font><font color="#CCCCCC"> very performant</font>

165
00:05:18,279 --> 00:05:23,500
so how could we do<font color="#CCCCCC"> better</font><font color="#E5E5E5"> well we could</font>

166
00:05:21,340 --> 00:05:25,900
compile just the body and compile that

167
00:05:23,500 --> 00:05:27,009
<font color="#E5E5E5">directly into an</font><font color="#CCCCCC"> evaluation key</font><font color="#E5E5E5"> but then</font>

168
00:05:25,900 --> 00:05:29,169
how do we<font color="#E5E5E5"> produce a proof</font>

169
00:05:27,009 --> 00:05:30,909
well the worker can take the input that

170
00:05:29,169 --> 00:05:32,349
<font color="#E5E5E5">the client provided and feed it through</font>

171
00:05:30,909 --> 00:05:34,360
<font color="#E5E5E5">the circuit to get some intermediate</font>

172
00:05:32,349 --> 00:05:35,740
<font color="#CCCCCC">state we can then take that intermediate</font>

173
00:05:34,360 --> 00:05:37,810
<font color="#CCCCCC">state and feed it through a circuit</font>

174
00:05:35,740 --> 00:05:39,550
<font color="#E5E5E5">again to get a new intermediate</font><font color="#CCCCCC"> state</font>

175
00:05:37,810 --> 00:05:41,139
and of course we can repeat this over

176
00:05:39,550 --> 00:05:42,250
<font color="#E5E5E5">and</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> over again until we finally</font>

177
00:05:41,139 --> 00:05:44,860
get the output<font color="#CCCCCC"> that the client</font><font color="#E5E5E5"> was</font>

178
00:05:42,250 --> 00:05:46,659
expecting but that raises<font color="#CCCCCC"> the question</font>

179
00:05:44,860 --> 00:05:48,789
<font color="#CCCCCC">of</font><font color="#E5E5E5"> how does</font><font color="#CCCCCC"> the client check that we did</font>

180
00:05:46,659 --> 00:05:50,500
this correctly<font color="#E5E5E5"> well we obviously have to</font>

181
00:05:48,789 --> 00:05:51,639
<font color="#CCCCCC">send her</font><font color="#E5E5E5"> the input and output but to</font>

182
00:05:50,500 --> 00:05:53,680
make sure<font color="#CCCCCC"> that all of that state was</font>

183
00:05:51,639 --> 00:05:55,449
correctly<font color="#CCCCCC"> routed from one output</font><font color="#E5E5E5"> to the</font>

184
00:05:53,680 --> 00:05:57,129
next input<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> to send all that back</font>

185
00:05:55,449 --> 00:05:59,310
to her as well and all of<font color="#CCCCCC"> a sudden she's</font>

186
00:05:57,129 --> 00:06:01,449
not quite as efficient as she used to<font color="#E5E5E5"> be</font>

187
00:05:59,310 --> 00:06:04,300
and<font color="#E5E5E5"> we see a similar</font><font color="#CCCCCC"> problem if you look</font>

188
00:06:01,449 --> 00:06:05,409
at sort<font color="#CCCCCC"> of MapReduce style operations so</font>

189
00:06:04,300 --> 00:06:07,509
<font color="#E5E5E5">we have a whole lot of mappers that are</font>

190
00:06:05,409 --> 00:06:09,009
in a fetus set of reducers<font color="#CCCCCC"> and in</font><font color="#E5E5E5"> theory</font>

191
00:06:07,509 --> 00:06:10,539
we<font color="#CCCCCC"> could</font><font color="#E5E5E5"> turn all this</font><font color="#CCCCCC"> into one giant</font>

192
00:06:09,009 --> 00:06:12,009
evaluation key representing the<font color="#CCCCCC"> entire</font>

193
00:06:10,539 --> 00:06:14,830
computation<font color="#CCCCCC"> but that's going</font><font color="#E5E5E5"> to be</font>

194
00:06:12,009 --> 00:06:16,360
<font color="#CCCCCC">extremely inefficient</font><font color="#E5E5E5"> instead we'd like</font>

195
00:06:14,830 --> 00:06:18,128
<font color="#CCCCCC">to produce an evaluation key that just</font>

196
00:06:16,360 --> 00:06:19,810
represents<font color="#E5E5E5"> one map operation</font><font color="#CCCCCC"> and</font>

197
00:06:18,129 --> 00:06:21,849
similarly one key that represents the

198
00:06:19,810 --> 00:06:23,199
reduce<font color="#CCCCCC"> operation but if you look at how</font>

199
00:06:21,849 --> 00:06:25,089
the computation proceeds<font color="#E5E5E5"> we're gonna</font>

200
00:06:23,199 --> 00:06:26,409
have a whole<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of input data the</font>

201
00:06:25,089 --> 00:06:28,330
mappers are<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> produce a whole lot of</font>

202
00:06:26,409 --> 00:06:29,979
intermediate<font color="#CCCCCC"> state before producing the</font>

203
00:06:28,330 --> 00:06:31,210
final output<font color="#E5E5E5"> and we really don't want to</font>

204
00:06:29,979 --> 00:06:32,469
send all<font color="#E5E5E5"> that back to the client to</font>

205
00:06:31,210 --> 00:06:35,198
<font color="#E5E5E5">check that the computations were done</font>

206
00:06:32,469 --> 00:06:37,899
correctly<font color="#E5E5E5"> so with Geppetto we address</font>

207
00:06:35,199 --> 00:06:39,339
this in two ways first we<font color="#CCCCCC"> generalized</font>

208
00:06:37,899 --> 00:06:39,670
the encoding scheme that we're using to

209
00:06:39,339 --> 00:06:43,120
<font color="#E5E5E5">create</font>

210
00:06:39,670 --> 00:06:45,160
we call a multi<font color="#CCCCCC"> QAP</font><font color="#E5E5E5"> and we use</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> to</font>

211
00:06:43,120 --> 00:06:48,130
generalize the cryptographic protocols

212
00:06:45,160 --> 00:06:49,060
<font color="#E5E5E5">to create a commit and</font><font color="#CCCCCC"> prove scheme so</font>

213
00:06:48,130 --> 00:06:50,560
to give<font color="#E5E5E5"> you a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit more detail</font>

214
00:06:49,060 --> 00:06:51,610
about<font color="#E5E5E5"> what</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> means we're still going</font>

215
00:06:50,560 --> 00:06:53,590
<font color="#CCCCCC">to</font><font color="#E5E5E5"> have the same key generation</font>

216
00:06:51,610 --> 00:06:55,960
algorithm<font color="#E5E5E5"> that we did</font><font color="#CCCCCC"> before but</font><font color="#E5E5E5"> now the</font>

217
00:06:53,590 --> 00:06:57,940
prover can commit to<font color="#CCCCCC"> a series of</font><font color="#E5E5E5"> inputs</font>

218
00:06:55,960 --> 00:07:00,159
<font color="#CCCCCC">and create a constant size commitment</font>

219
00:06:57,940 --> 00:07:01,630
representing a large set of data<font color="#CCCCCC"> that</font>

220
00:07:00,160 --> 00:07:03,220
you<font color="#E5E5E5"> can then use</font><font color="#CCCCCC"> that commitment along</font>

221
00:07:01,630 --> 00:07:04,840
<font color="#CCCCCC">with other commitments to generate a</font>

222
00:07:03,220 --> 00:07:06,700
proof that<font color="#CCCCCC"> the values</font><font color="#E5E5E5"> that those</font>

223
00:07:04,840 --> 00:07:08,530
commitments correspond to are a correct

224
00:07:06,700 --> 00:07:09,940
evaluation<font color="#CCCCCC"> of the function and so</font>

225
00:07:08,530 --> 00:07:11,409
essentially<font color="#E5E5E5"> the prover can commit to</font>

226
00:07:09,940 --> 00:07:12,700
<font color="#E5E5E5">different values</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> use those</font>

227
00:07:11,410 --> 00:07:15,340
commitments<font color="#E5E5E5"> and many different proofs</font>

228
00:07:12,700 --> 00:07:16,870
<font color="#E5E5E5">and thereby save effort on computations</font>

229
00:07:15,340 --> 00:07:19,090
that<font color="#E5E5E5"> share state across instantly</font>

230
00:07:16,870 --> 00:07:20,800
<font color="#E5E5E5">instantiations and similarly the</font>

231
00:07:19,090 --> 00:07:22,989
verifier can verify commitment once

232
00:07:20,800 --> 00:07:24,310
<font color="#CCCCCC">check that it's correct and then verify</font>

233
00:07:22,990 --> 00:07:26,800
many proofs<font color="#CCCCCC"> that make use of that</font>

234
00:07:24,310 --> 00:07:28,870
commitment<font color="#E5E5E5"> so to go back</font><font color="#CCCCCC"> to our</font>

235
00:07:26,800 --> 00:07:30,010
<font color="#CCCCCC">MapReduce example instead of sending all</font>

236
00:07:28,870 --> 00:07:31,870
this data<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> client the client</font>

237
00:07:30,010 --> 00:07:33,360
<font color="#E5E5E5">can specify all the inputs based on</font>

238
00:07:31,870 --> 00:07:36,070
commitments that she pre computes

239
00:07:33,360 --> 00:07:37,750
similarly the worker<font color="#E5E5E5"> as he's producing</font>

240
00:07:36,070 --> 00:07:39,640
<font color="#E5E5E5">this intermediate state can produce</font>

241
00:07:37,750 --> 00:07:40,660
commitments to those values<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that's</font>

242
00:07:39,640 --> 00:07:42,190
all we're<font color="#E5E5E5"> gonna send back to the client</font>

243
00:07:40,660 --> 00:07:43,840
<font color="#CCCCCC">so she's going to</font><font color="#E5E5E5"> get a small collection</font>

244
00:07:42,190 --> 00:07:45,250
<font color="#E5E5E5">of commitments</font><font color="#CCCCCC"> and she'll get a set of</font>

245
00:07:43,840 --> 00:07:47,049
<font color="#E5E5E5">proofs showing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> those commitments</font>

246
00:07:45,250 --> 00:07:49,630
<font color="#E5E5E5">were used properly in the computations</font>

247
00:07:47,050 --> 00:07:51,850
<font color="#E5E5E5">and why is this a win well the</font>

248
00:07:49,630 --> 00:07:54,460
commitments are constant size regardless

249
00:07:51,850 --> 00:07:56,650
<font color="#E5E5E5">of the data so only 256 bytes regardless</font>

250
00:07:54,460 --> 00:07:58,210
of how big the data is and the size<font color="#E5E5E5"> of</font>

251
00:07:56,650 --> 00:08:01,359
the proofs<font color="#E5E5E5"> is constant regardless of how</font>

252
00:07:58,210 --> 00:08:02,710
complex the computation it is and so

253
00:08:01,360 --> 00:08:04,750
<font color="#CCCCCC">Alice is</font><font color="#E5E5E5"> only going to receive a small</font>

254
00:08:02,710 --> 00:08:07,479
<font color="#E5E5E5">set</font><font color="#CCCCCC"> of data that's easy to easy</font><font color="#E5E5E5"> to</font>

255
00:08:04,750 --> 00:08:09,340
handle so to look<font color="#E5E5E5"> at the impact this has</font>

256
00:08:07,480 --> 00:08:10,960
<font color="#CCCCCC">on performance</font><font color="#E5E5E5"> we can compare against a</font>

257
00:08:09,340 --> 00:08:12,549
<font color="#E5E5E5">system from last year's SOS P called</font>

258
00:08:10,960 --> 00:08:14,530
pantry<font color="#E5E5E5"> where they were also trying</font><font color="#CCCCCC"> to</font>

259
00:08:12,550 --> 00:08:15,880
handle stateful MapReduce computations

260
00:08:14,530 --> 00:08:17,919
however they were doing it by doing

261
00:08:15,880 --> 00:08:19,630
hashing verified hashing at the

262
00:08:17,920 --> 00:08:21,400
application layer<font color="#E5E5E5"> rather than changing</font>

263
00:08:19,630 --> 00:08:23,020
<font color="#E5E5E5">the</font><font color="#CCCCCC"> underlying cryptographic routines as</font>

264
00:08:21,400 --> 00:08:24,460
you can see how long it takes<font color="#CCCCCC"> to</font>

265
00:08:23,020 --> 00:08:26,950
generate proofs for various benchmark

266
00:08:24,460 --> 00:08:28,330
applications and the high order bit is

267
00:08:26,950 --> 00:08:30,190
that<font color="#CCCCCC"> Gepetto's improving by one two</font>

268
00:08:28,330 --> 00:08:33,520
three<font color="#E5E5E5"> orders of magnitude on how long it</font>

269
00:08:30,190 --> 00:08:34,960
takes to generate<font color="#E5E5E5"> these proofs now if we</font>

270
00:08:33,520 --> 00:08:36,490
look<font color="#E5E5E5"> back at how much work Alice has to</font>

271
00:08:34,960 --> 00:08:37,990
do now<font color="#CCCCCC"> for each of these commitments</font>

272
00:08:36,490 --> 00:08:40,240
<font color="#CCCCCC">that she receives</font><font color="#E5E5E5"> she needs to verify</font>

273
00:08:37,990 --> 00:08:41,409
<font color="#CCCCCC">that</font><font color="#E5E5E5"> the commitment is correct and then</font>

274
00:08:40,240 --> 00:08:42,549
for<font color="#CCCCCC"> each</font><font color="#E5E5E5"> of the proof she also has to</font>

275
00:08:41,409 --> 00:08:43,299
<font color="#E5E5E5">verify that those are correct given</font>

276
00:08:42,549 --> 00:08:46,150
<font color="#E5E5E5">those commitments</font>

277
00:08:43,299 --> 00:08:47,260
now<font color="#E5E5E5"> this isn't too</font><font color="#CCCCCC"> much work</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> it's</font>

278
00:08:46,150 --> 00:08:48,850
<font color="#E5E5E5">still a</font><font color="#CCCCCC"> little bit less attractive than</font>

279
00:08:47,260 --> 00:08:50,439
<font color="#E5E5E5">the original Pinocchio protocol where</font>

280
00:08:48,850 --> 00:08:52,030
Alice only receives a single constant

281
00:08:50,440 --> 00:08:53,200
<font color="#E5E5E5">size proof and did a constant amount of</font>

282
00:08:52,030 --> 00:08:54,610
<font color="#E5E5E5">work on that proof</font>

283
00:08:53,200 --> 00:08:57,130
so how can we get<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to that world</font>

284
00:08:54,610 --> 00:08:58,089
<font color="#E5E5E5">well if we look at all this code</font><font color="#CCCCCC"> that</font>

285
00:08:57,130 --> 00:09:00,430
she's gonna run to do the verification

286
00:08:58,089 --> 00:09:02,410
<font color="#CCCCCC">we can think</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> that as one one big C</font>

287
00:09:00,430 --> 00:09:05,138
program<font color="#E5E5E5"> and we can run Geppetto on it</font>

288
00:09:02,410 --> 00:09:06,610
again<font color="#CCCCCC"> and</font><font color="#E5E5E5"> generate a new evaluation key</font>

289
00:09:05,139 --> 00:09:08,110
for that<font color="#CCCCCC"> verification step and we can</font>

290
00:09:06,610 --> 00:09:10,120
outsource<font color="#E5E5E5"> that operation as well and</font>

291
00:09:08,110 --> 00:09:11,740
then we can<font color="#CCCCCC"> similarly turn all these</font>

292
00:09:10,120 --> 00:09:14,139
<font color="#CCCCCC">commitments and proofs</font><font color="#E5E5E5"> into a single</font>

293
00:09:11,740 --> 00:09:15,790
commitment and proof to the larger set

294
00:09:14,139 --> 00:09:17,199
of<font color="#CCCCCC"> data and</font><font color="#E5E5E5"> so now</font><font color="#CCCCCC"> Alice's back into a</font>

295
00:09:15,790 --> 00:09:18,969
world<font color="#E5E5E5"> where she only looks at one</font>

296
00:09:17,199 --> 00:09:22,120
commitment<font color="#E5E5E5"> and one proof</font><font color="#CCCCCC"> to check the</font>

297
00:09:18,970 --> 00:09:23,410
<font color="#E5E5E5">entire computation was done correctly so</font>

298
00:09:22,120 --> 00:09:24,850
essentially if you<font color="#CCCCCC"> look at</font><font color="#E5E5E5"> our pipeline</font>

299
00:09:23,410 --> 00:09:26,079
<font color="#E5E5E5">what we've done is add a layer of</font>

300
00:09:24,850 --> 00:09:27,690
recursion<font color="#E5E5E5"> so that we can run this</font>

301
00:09:26,079 --> 00:09:30,189
<font color="#CCCCCC">process over and over again</font>

302
00:09:27,690 --> 00:09:31,870
<font color="#E5E5E5">unfortunately if you do this naively the</font>

303
00:09:30,190 --> 00:09:33,279
time to take to<font color="#CCCCCC"> verify a single</font>

304
00:09:31,870 --> 00:09:35,769
commitment or proof<font color="#E5E5E5"> can take</font><font color="#CCCCCC"> we're</font>

305
00:09:33,279 --> 00:09:37,930
upwards of five<font color="#E5E5E5"> CPU days and so that's</font>

306
00:09:35,769 --> 00:09:40,810
not going<font color="#E5E5E5"> to be great from a from from</font>

307
00:09:37,930 --> 00:09:41,160
<font color="#CCCCCC">the prover standpoint so how can we do</font>

308
00:09:40,810 --> 00:09:43,888
<font color="#CCCCCC">better</font>

309
00:09:41,160 --> 00:09:46,240
well in a paper last year<font color="#CCCCCC"> at Krypto</font>

310
00:09:43,889 --> 00:09:48,010
<font color="#CCCCCC">Ben's the song at all developed a</font><font color="#E5E5E5"> very</font>

311
00:09:46,240 --> 00:09:49,690
nice set of elliptic curve technology

312
00:09:48,010 --> 00:09:51,310
that allowed them to<font color="#E5E5E5"> do unbounded</font>

313
00:09:49,690 --> 00:09:52,930
recursion in this<font color="#E5E5E5"> style</font><font color="#CCCCCC"> so they can do</font>

314
00:09:51,310 --> 00:09:55,839
proofs about proofs about proofs sort of

315
00:09:52,930 --> 00:09:58,089
ad infinitum<font color="#CCCCCC"> and they also use this for</font>

316
00:09:55,839 --> 00:09:59,800
a general CPU interpreter so they can

317
00:09:58,089 --> 00:10:00,850
support<font color="#CCCCCC"> a very general class of</font>

318
00:09:59,800 --> 00:10:02,890
computations

319
00:10:00,850 --> 00:10:04,630
unfortunately this led to<font color="#E5E5E5"> fairly slow</font>

320
00:10:02,890 --> 00:10:06,670
performance<font color="#CCCCCC"> so if you look at</font><font color="#E5E5E5"> sort of a</font>

321
00:10:04,630 --> 00:10:08,620
standard<font color="#CCCCCC"> benchmark application it can</font>

322
00:10:06,670 --> 00:10:11,290
<font color="#E5E5E5">take upwards of 29 years</font><font color="#CCCCCC"> to run on this</font>

323
00:10:08,620 --> 00:10:13,120
framework so with<font color="#CCCCCC"> Gepetto we explored a</font>

324
00:10:11,290 --> 00:10:14,469
different option<font color="#E5E5E5"> we looked at different</font>

325
00:10:13,120 --> 00:10:16,480
elliptic curves<font color="#E5E5E5"> that give better</font>

326
00:10:14,470 --> 00:10:18,160
performance<font color="#CCCCCC"> but require a fixed bound a</font>

327
00:10:16,480 --> 00:10:19,570
head of<font color="#E5E5E5"> time so you have to commit ahead</font>

328
00:10:18,160 --> 00:10:21,730
of time<font color="#CCCCCC"> so how</font><font color="#E5E5E5"> many proofs about proofs</font>

329
00:10:19,570 --> 00:10:23,620
<font color="#CCCCCC">you're going to do and we also</font><font color="#E5E5E5"> choose a</font>

330
00:10:21,730 --> 00:10:24,730
approach based on<font color="#CCCCCC"> compilation</font><font color="#E5E5E5"> so you</font>

331
00:10:23,620 --> 00:10:26,079
have to specify the function that<font color="#E5E5E5"> you</font>

332
00:10:24,730 --> 00:10:28,390
<font color="#CCCCCC">want to verify and we're going</font><font color="#E5E5E5"> to</font>

333
00:10:26,079 --> 00:10:30,880
compile<font color="#E5E5E5"> key specific to that</font><font color="#CCCCCC"> function in</font>

334
00:10:28,390 --> 00:10:31,930
exchange however we get<font color="#CCCCCC"> a result that</font>

335
00:10:30,880 --> 00:10:33,910
<font color="#CCCCCC">we're able to</font><font color="#E5E5E5"> do these proofs about</font>

336
00:10:31,930 --> 00:10:35,439
proofs much more efficiently<font color="#E5E5E5"> overall</font>

337
00:10:33,910 --> 00:10:36,610
we've improved by up to<font color="#CCCCCC"> five orders</font><font color="#E5E5E5"> of</font>

338
00:10:35,440 --> 00:10:40,029
<font color="#E5E5E5">magnitude for for some of these</font>

339
00:10:36,610 --> 00:10:41,649
<font color="#CCCCCC">computations and finally we looked at</font>

340
00:10:40,029 --> 00:10:42,939
<font color="#CCCCCC">how we can do</font><font color="#E5E5E5"> better for various</font>

341
00:10:41,649 --> 00:10:44,589
<font color="#E5E5E5">programming constructs that show up</font>

342
00:10:42,940 --> 00:10:47,170
<font color="#E5E5E5">regularly how can we encode them in a</font>

343
00:10:44,589 --> 00:10:49,540
more efficient manner<font color="#E5E5E5"> in particular if</font>

344
00:10:47,170 --> 00:10:51,370
you<font color="#E5E5E5"> look at how a standard compiler like</font>

345
00:10:49,540 --> 00:10:52,540
Pinocchio or<font color="#E5E5E5"> a lot of the compilers and</font>

346
00:10:51,370 --> 00:10:54,490
<font color="#E5E5E5">the secure multi-party computation</font>

347
00:10:52,540 --> 00:10:56,139
literature work<font color="#E5E5E5"> if you have an if-else</font>

348
00:10:54,490 --> 00:10:58,000
branch<font color="#E5E5E5"> you compile a circuit</font>

349
00:10:56,139 --> 00:10:59,470
representing the if portion you compile

350
00:10:58,000 --> 00:11:01,329
a circuit representing else portion and

351
00:10:59,470 --> 00:11:02,649
then<font color="#E5E5E5"> you add a multiplexer at the end to</font>

352
00:11:01,329 --> 00:11:04,449
decide which of the two<font color="#E5E5E5"> sets of values</font>

353
00:11:02,649 --> 00:11:06,490
<font color="#E5E5E5">are going to continue to the rest of the</font>

354
00:11:04,449 --> 00:11:06,880
circuit<font color="#E5E5E5"> unfortunately if you</font><font color="#CCCCCC"> look at how</font>

355
00:11:06,490 --> 00:11:08,380
this<font color="#E5E5E5"> is</font>

356
00:11:06,880 --> 00:11:09,939
used in<font color="#E5E5E5"> the cryptographic protocol</font>

357
00:11:08,380 --> 00:11:12,189
essentially we're<font color="#CCCCCC"> going to do a giant</font>

358
00:11:09,940 --> 00:11:13,660
multi exponentiation<font color="#E5E5E5"> where some of the</font>

359
00:11:12,190 --> 00:11:15,040
values are<font color="#CCCCCC"> coming from the if branch</font><font color="#E5E5E5"> and</font>

360
00:11:13,660 --> 00:11:16,959
some of the<font color="#E5E5E5"> values are coming</font><font color="#CCCCCC"> from the</font>

361
00:11:15,040 --> 00:11:18,640
else branch<font color="#E5E5E5"> and so regardless</font><font color="#CCCCCC"> of which</font>

362
00:11:16,960 --> 00:11:20,290
branch we take we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> end up</font>

363
00:11:18,640 --> 00:11:22,060
doing cryptographic work for both

364
00:11:20,290 --> 00:11:24,880
branches<font color="#E5E5E5"> and so that seems rather</font>

365
00:11:22,060 --> 00:11:26,829
unattractive<font color="#E5E5E5"> what we realized was</font><font color="#CCCCCC"> that</font>

366
00:11:24,880 --> 00:11:28,930
if we instead<font color="#E5E5E5"> move the multiplexer to</font>

367
00:11:26,830 --> 00:11:30,700
<font color="#E5E5E5">the inputs we can ensure</font><font color="#CCCCCC"> that in</font><font color="#E5E5E5"> the</font>

368
00:11:28,930 --> 00:11:32,770
branch that's not taken in this<font color="#E5E5E5"> case the</font>

369
00:11:30,700 --> 00:11:35,050
else branch<font color="#CCCCCC"> all the values are driven</font><font color="#E5E5E5"> to</font>

370
00:11:32,770 --> 00:11:36,250
<font color="#CCCCCC">zero and so when we go to</font><font color="#E5E5E5"> do the</font>

371
00:11:35,050 --> 00:11:38,290
exponentiation<font color="#E5E5E5"> and the cryptographic</font>

372
00:11:36,250 --> 00:11:40,510
work all those go to<font color="#E5E5E5"> zero and so it's</font>

373
00:11:38,290 --> 00:11:42,520
<font color="#CCCCCC">very easy to</font><font color="#E5E5E5"> do those</font><font color="#CCCCCC"> exponents</font><font color="#E5E5E5"> and so</font>

374
00:11:40,510 --> 00:11:43,870
essentially<font color="#E5E5E5"> now the computational work</font>

375
00:11:42,520 --> 00:11:45,400
<font color="#E5E5E5">for the</font><font color="#CCCCCC"> PRU root to generate the proof</font>

376
00:11:43,870 --> 00:11:47,200
is proportional to<font color="#E5E5E5"> the branch</font><font color="#CCCCCC"> that we</font>

377
00:11:45,400 --> 00:11:49,420
actually<font color="#E5E5E5"> take rather than all possible</font>

378
00:11:47,200 --> 00:11:50,800
branches<font color="#E5E5E5"> if you look at the impact this</font>

379
00:11:49,420 --> 00:11:52,630
has<font color="#E5E5E5"> if you look at the standard way</font><font color="#CCCCCC"> of</font>

380
00:11:50,800 --> 00:11:54,819
compiling<font color="#E5E5E5"> say we compile ahead of time</font>

381
00:11:52,630 --> 00:11:57,040
expecting to do<font color="#E5E5E5"> five</font><font color="#CCCCCC"> maintenance five</font>

382
00:11:54,820 --> 00:11:59,350
iterations<font color="#CCCCCC"> of a loop and in practice we</font>

383
00:11:57,040 --> 00:12:01,270
only do one<font color="#CCCCCC"> wellyou're the standard</font>

384
00:11:59,350 --> 00:12:03,610
approach you're still going to<font color="#CCCCCC"> do</font><font color="#E5E5E5"> effort</font>

385
00:12:01,270 --> 00:12:05,439
<font color="#E5E5E5">proportional to all five</font><font color="#CCCCCC"> whereas</font><font color="#E5E5E5"> with</font>

386
00:12:03,610 --> 00:12:07,660
the energy saving approach<font color="#E5E5E5"> if we compile</font>

387
00:12:05,440 --> 00:12:09,280
for<font color="#E5E5E5"> five but we end up only doing one we</font>

388
00:12:07,660 --> 00:12:10,750
do work that's much<font color="#E5E5E5"> closer to the</font>

389
00:12:09,280 --> 00:12:11,800
computation we would have done if we'd

390
00:12:10,750 --> 00:12:15,250
<font color="#E5E5E5">known ahead of time that we're only</font>

391
00:12:11,800 --> 00:12:16,750
going<font color="#E5E5E5"> to do one iteration and so</font><font color="#CCCCCC"> to</font>

392
00:12:15,250 --> 00:12:18,580
<font color="#E5E5E5">support all this flexibility that</font>

393
00:12:16,750 --> 00:12:20,860
<font color="#CCCCCC">Geppetto now offers</font><font color="#E5E5E5"> we developed a new</font>

394
00:12:18,580 --> 00:12:22,450
compiler infrastructure so<font color="#CCCCCC"> we designed</font>

395
00:12:20,860 --> 00:12:24,310
it to be a streaming architecture so we

396
00:12:22,450 --> 00:12:25,600
skip the intermediate<font color="#E5E5E5"> state entirely and</font>

397
00:12:24,310 --> 00:12:26,979
go directly<font color="#E5E5E5"> to the multi cue IP</font>

398
00:12:25,600 --> 00:12:28,990
representation and from there<font color="#CCCCCC"> onto the</font>

399
00:12:26,980 --> 00:12:31,390
<font color="#E5E5E5">crypto this allows</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to scale better</font>

400
00:12:28,990 --> 00:12:32,650
and to make<font color="#CCCCCC"> better use of the memory</font>

401
00:12:31,390 --> 00:12:35,319
resources<font color="#E5E5E5"> that are available on the</font>

402
00:12:32,650 --> 00:12:37,209
platform<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> front end we've</font>

403
00:12:35,320 --> 00:12:39,670
developed<font color="#E5E5E5"> an a new fronting based on</font>

404
00:12:37,210 --> 00:12:40,840
clang and<font color="#CCCCCC"> LLVM for consuming C code</font><font color="#E5E5E5"> and</font>

405
00:12:39,670 --> 00:12:42,069
that allows<font color="#CCCCCC"> us to</font><font color="#E5E5E5"> take advantage of</font><font color="#CCCCCC"> a</font>

406
00:12:40,840 --> 00:12:43,480
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the great optimization work</font>

407
00:12:42,070 --> 00:12:46,540
that's being done<font color="#E5E5E5"> in</font><font color="#CCCCCC"> that community</font><font color="#E5E5E5"> on</font>

408
00:12:43,480 --> 00:12:48,760
the cryptographic side<font color="#E5E5E5"> we use a single</font>

409
00:12:46,540 --> 00:12:50,230
symbolic interpretation<font color="#E5E5E5"> engine to run</font>

410
00:12:48,760 --> 00:12:51,939
through the<font color="#E5E5E5"> program and when we're</font>

411
00:12:50,230 --> 00:12:53,860
<font color="#CCCCCC">generating keys we have a very precise</font>

412
00:12:51,940 --> 00:12:55,900
range<font color="#E5E5E5"> and semantics tracking for all the</font>

413
00:12:53,860 --> 00:12:57,430
unknown values<font color="#E5E5E5"> that occur during key</font>

414
00:12:55,900 --> 00:12:58,780
<font color="#E5E5E5">generation and that allows us to create</font>

415
00:12:57,430 --> 00:13:00,880
<font color="#E5E5E5">the smallest most efficient keys</font>

416
00:12:58,780 --> 00:13:02,949
possible then when it<font color="#CCCCCC"> comes</font><font color="#E5E5E5"> time for</font>

417
00:13:00,880 --> 00:13:05,230
proof<font color="#CCCCCC"> we use the same engine</font><font color="#E5E5E5"> but we</font>

418
00:13:02,950 --> 00:13:06,610
<font color="#CCCCCC">instantiate the values in the program</font>

419
00:13:05,230 --> 00:13:08,140
with<font color="#E5E5E5"> concrete values and use those to</font>

420
00:13:06,610 --> 00:13:10,630
<font color="#CCCCCC">generate the commitments</font><font color="#E5E5E5"> and proofs and</font>

421
00:13:08,140 --> 00:13:12,189
finally from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> perspective of</font><font color="#E5E5E5"> the</font>

422
00:13:10,630 --> 00:13:14,710
verifier<font color="#E5E5E5"> this integrates very nicely</font>

423
00:13:12,190 --> 00:13:16,150
with your<font color="#CCCCCC"> existing</font><font color="#E5E5E5"> code and so all you</font>

424
00:13:14,710 --> 00:13:18,040
have to<font color="#E5E5E5"> do is label the function that</font>

425
00:13:16,150 --> 00:13:20,259
<font color="#E5E5E5">you want</font><font color="#CCCCCC"> outsource and it</font><font color="#E5E5E5"> behaves sort</font>

426
00:13:18,040 --> 00:13:22,689
of like an RPC<font color="#E5E5E5"> your program can execute</font>

427
00:13:20,259 --> 00:13:24,100
reaches that<font color="#CCCCCC"> point</font><font color="#E5E5E5"> the values are out</font>

428
00:13:22,689 --> 00:13:26,410
sourced<font color="#CCCCCC"> they</font><font color="#E5E5E5"> come back the underlying</font>

429
00:13:24,100 --> 00:13:28,119
machinery<font color="#E5E5E5"> checks</font><font color="#CCCCCC"> it all the computation</font>

430
00:13:26,410 --> 00:13:29,618
was done<font color="#E5E5E5"> correctly and then passes those</font>

431
00:13:28,119 --> 00:13:32,799
values<font color="#E5E5E5"> back</font><font color="#CCCCCC"> into your program which</font><font color="#E5E5E5"> can</font>

432
00:13:29,619 --> 00:13:33,939
continue<font color="#E5E5E5"> executing as normally and so</font>

433
00:13:32,799 --> 00:13:35,410
<font color="#E5E5E5">all together thanks to these</font>

434
00:13:33,939 --> 00:13:37,238
<font color="#E5E5E5">improvements Geppetto is able to scale</font>

435
00:13:35,410 --> 00:13:39,100
<font color="#E5E5E5">up to programs 40 times larger than</font>

436
00:13:37,239 --> 00:13:42,910
previous works such as<font color="#CCCCCC"> Pinocchio was</font>

437
00:13:39,100 --> 00:13:45,009
able<font color="#CCCCCC"> to handle so as we add all of this</font>

438
00:13:42,910 --> 00:13:46,118
<font color="#CCCCCC">complexity to the compiler it becomes</font>

439
00:13:45,009 --> 00:13:48,189
more and<font color="#E5E5E5"> more important to look at</font>

440
00:13:46,119 --> 00:13:50,319
certification other words being<font color="#E5E5E5"> able to</font>

441
00:13:48,189 --> 00:13:51,969
prove<font color="#E5E5E5"> that the cryptographic material</font>

442
00:13:50,319 --> 00:13:53,228
that we're<font color="#CCCCCC"> generating actually respects</font>

443
00:13:51,970 --> 00:13:54,489
the semantics of the<font color="#CCCCCC"> original program</font>

444
00:13:53,229 --> 00:13:55,779
that we<font color="#CCCCCC"> started</font><font color="#E5E5E5"> with and that we haven't</font>

445
00:13:54,489 --> 00:13:57,759
<font color="#E5E5E5">made a mistake</font><font color="#CCCCCC"> during the compilation</font>

446
00:13:55,779 --> 00:13:59,799
<font color="#E5E5E5">process we've also</font><font color="#CCCCCC"> started looking at</font>

447
00:13:57,759 --> 00:14:01,509
various applications such<font color="#CCCCCC"> as</font><font color="#E5E5E5"> x.509</font>

448
00:13:59,799 --> 00:14:04,959
certificate validation<font color="#E5E5E5"> as well as</font>

449
00:14:01,509 --> 00:14:06,850
<font color="#E5E5E5">electronic voting so just to summarize</font>

450
00:14:04,959 --> 00:14:08,618
with Geppetto<font color="#CCCCCC"> we've been able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> reduce</font>

451
00:14:06,850 --> 00:14:11,139
<font color="#E5E5E5">the cost</font><font color="#CCCCCC"> of shared state computations</font>

452
00:14:08,619 --> 00:14:12,879
such as MapReduce<font color="#E5E5E5"> and loops by up one to</font>

453
00:14:11,139 --> 00:14:14,499
three orders<font color="#CCCCCC"> of</font><font color="#E5E5E5"> magnitude</font><font color="#CCCCCC"> we've been</font>

454
00:14:12,879 --> 00:14:16,029
able to reduce<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cost of bootstrap</font>

455
00:14:14,499 --> 00:14:18,369
proofs by up to<font color="#CCCCCC"> five</font><font color="#E5E5E5"> orders of magnitude</font>

456
00:14:16,029 --> 00:14:20,799
<font color="#CCCCCC">and we're able to align proof</font><font color="#E5E5E5"> or cost</font>

457
00:14:18,369 --> 00:14:22,569
<font color="#E5E5E5">with the actual runtime execution rather</font>

458
00:14:20,799 --> 00:14:24,399
than worst of case execution<font color="#CCCCCC"> through</font>

459
00:14:22,569 --> 00:14:26,259
these<font color="#E5E5E5"> energy saving circuits and all</font>

460
00:14:24,399 --> 00:14:28,119
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> supported by a new compiler</font>

461
00:14:26,259 --> 00:14:29,649
infrastructure<font color="#E5E5E5"> that increases the scale</font>

462
00:14:28,119 --> 00:14:33,089
and flexibility<font color="#CCCCCC"> of</font><font color="#E5E5E5"> what we can support</font>

463
00:14:29,649 --> 00:14:33,089
so thank<font color="#E5E5E5"> you</font>

464
00:14:37,620 --> 00:14:45,520
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> how how much does it cost to</font>

465
00:14:42,700 --> 00:14:47,830
generate the keys in the<font color="#E5E5E5"> first place as</font>

466
00:14:45,520 --> 00:14:51,220
compared<font color="#CCCCCC"> to like if Alice couldn't</font><font color="#E5E5E5"> run</font>

467
00:14:47,830 --> 00:14:54,010
the cures cancer<font color="#CCCCCC"> predicate could</font><font color="#E5E5E5"> she</font>

468
00:14:51,220 --> 00:14:57,040
generate the keys necessary to run the

469
00:14:54,010 --> 00:14:58,689
<font color="#CCCCCC">cancer predicates</font><font color="#E5E5E5"> sure so the the cost</font>

470
00:14:57,040 --> 00:15:00,250
to generate the keys generally scales

471
00:14:58,690 --> 00:15:03,070
<font color="#E5E5E5">proportionally to one execution of the</font>

472
00:15:00,250 --> 00:15:05,230
program<font color="#CCCCCC"> and so you do</font><font color="#E5E5E5"> need to be</font><font color="#CCCCCC"> able to</font>

473
00:15:03,070 --> 00:15:06,700
have some computational<font color="#E5E5E5"> to get that to</font>

474
00:15:05,230 --> 00:15:08,380
<font color="#E5E5E5">get that started</font>

475
00:15:06,700 --> 00:15:09,490
though interestingly<font color="#E5E5E5"> there's a talk</font>

476
00:15:08,380 --> 00:15:10,510
<font color="#E5E5E5">later in the</font><font color="#CCCCCC"> session on how you can</font>

477
00:15:09,490 --> 00:15:14,370
distribute that<font color="#E5E5E5"> work and have multiple</font>

478
00:15:10,510 --> 00:15:14,370
<font color="#E5E5E5">people involved in the key generation</font>

479
00:15:16,350 --> 00:15:19,540
positions be applied independently of

480
00:15:18,520 --> 00:15:21,730
each other like can<font color="#CCCCCC"> you</font><font color="#E5E5E5"> take advantage</font>

481
00:15:19,540 --> 00:15:23,740
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> energy-saving</font><font color="#E5E5E5"> circuits</font><font color="#CCCCCC"> without</font>

482
00:15:21,730 --> 00:15:25,780
needing to<font color="#E5E5E5"> use bootstrapping or other</font>

483
00:15:23,740 --> 00:15:26,770
permutations<font color="#CCCCCC"> yeah indeed</font><font color="#E5E5E5"> all of</font><font color="#CCCCCC"> these</font>

484
00:15:25,780 --> 00:15:28,540
are<font color="#E5E5E5"> sort of</font><font color="#CCCCCC"> independent optimizations</font>

485
00:15:26,770 --> 00:15:31,090
they happen<font color="#CCCCCC"> to play nicely with</font><font color="#E5E5E5"> each</font>

486
00:15:28,540 --> 00:15:32,020
<font color="#E5E5E5">other so when you're doing bootstrapping</font>

487
00:15:31,090 --> 00:15:33,250
you have several<font color="#E5E5E5"> independent</font>

488
00:15:32,020 --> 00:15:35,079
<font color="#E5E5E5">computations</font><font color="#CCCCCC"> like you're doing the</font><font color="#E5E5E5"> same</font>

489
00:15:33,250 --> 00:15:37,420
verification algorithm to many different

490
00:15:35,080 --> 00:15:39,220
<font color="#E5E5E5">proofs so that's nice and also with a</font>

491
00:15:37,420 --> 00:15:40,630
fixed bounded bootstrapping<font color="#CCCCCC"> you have to</font>

492
00:15:39,220 --> 00:15:42,400
<font color="#E5E5E5">commit in advance - how many proofs you</font>

493
00:15:40,630 --> 00:15:43,780
want to verify<font color="#CCCCCC"> mmm so having the</font><font color="#E5E5E5"> energy</font>

494
00:15:42,400 --> 00:15:46,449
<font color="#CCCCCC">saving it's kind of nice if you wind up</font>

495
00:15:43,780 --> 00:15:53,020
verifying<font color="#E5E5E5"> fewer proofs but</font><font color="#CCCCCC"> yeah each one</font>

496
00:15:46,450 --> 00:15:57,220
can<font color="#E5E5E5"> be applied sort of independently any</font>

497
00:15:53,020 --> 00:15:59,740
other questions<font color="#CCCCCC"> so when are we</font><font color="#E5E5E5"> gonna get</font>

498
00:15:57,220 --> 00:16:01,420
an S<font color="#CCCCCC"> okay paper</font><font color="#E5E5E5"> explaining all</font><font color="#CCCCCC"> of that</font>

499
00:15:59,740 --> 00:16:03,160
it<font color="#E5E5E5"> seems</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> the space of optimizations</font>

500
00:16:01,420 --> 00:16:05,890
is so complicated<font color="#E5E5E5"> here now and like</font>

501
00:16:03,160 --> 00:16:07,180
Andrew was saying some you know it seems

502
00:16:05,890 --> 00:16:09,100
like<font color="#E5E5E5"> most of them play well together so</font>

503
00:16:07,180 --> 00:16:11,160
<font color="#CCCCCC">when are we gonna have the grand paper</font>

504
00:16:09,100 --> 00:16:13,060
explaining sort of all the points

505
00:16:11,160 --> 00:16:16,180
<font color="#CCCCCC">someday when I find the right</font><font color="#E5E5E5"> entry I</font>

506
00:16:13,060 --> 00:16:19,020
guess<font color="#CCCCCC"> alright</font>

507
00:16:16,180 --> 00:16:19,020
<font color="#CCCCCC">yeah let's think Brian</font>

