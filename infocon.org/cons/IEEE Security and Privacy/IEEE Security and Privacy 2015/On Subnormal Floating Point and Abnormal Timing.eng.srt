1
00:00:00,000 --> 00:00:05,819
<font color="#E5E5E5">hi</font><font color="#CCCCCC"> I'm David</font><font color="#E5E5E5"> kohlbrenner this is work</font>

2
00:00:02,700 --> 00:00:08,099
with<font color="#E5E5E5"> Mark and</font><font color="#CCCCCC"> risco</font><font color="#E5E5E5"> Keaton Maori</font><font color="#CCCCCC"> run G</font>

3
00:00:05,819 --> 00:00:11,670
<font color="#CCCCCC">Jolla Soren learner and Hohokam my</font>

4
00:00:08,099 --> 00:00:13,139
<font color="#E5E5E5">advisor all at UC San Diego</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we're</font>

5
00:00:11,670 --> 00:00:16,198
gonna be<font color="#E5E5E5"> talking about floating</font><font color="#CCCCCC"> point</font>

6
00:00:13,139 --> 00:00:17,880
and side channels so not<font color="#E5E5E5"> caches</font><font color="#CCCCCC"> so</font>

7
00:00:16,199 --> 00:00:19,619
that's cash we've been talking a lot

8
00:00:17,880 --> 00:00:21,029
about caches you've seen a lot<font color="#CCCCCC"> of cache</font>

9
00:00:19,619 --> 00:00:22,050
attacks but<font color="#E5E5E5"> we're gonna talk</font><font color="#CCCCCC"> about a</font>

10
00:00:21,029 --> 00:00:23,910
slightly<font color="#CCCCCC"> different part</font><font color="#E5E5E5"> of your</font>

11
00:00:22,050 --> 00:00:26,070
<font color="#E5E5E5">processor</font><font color="#CCCCCC"> today a little bit</font><font color="#E5E5E5"> less</font>

12
00:00:23,910 --> 00:00:28,380
understood the floating-point unit of

13
00:00:26,070 --> 00:00:30,660
<font color="#E5E5E5">your processor so let's run code on</font><font color="#CCCCCC"> our</font>

14
00:00:28,380 --> 00:00:33,210
floating-point unit we have two programs

15
00:00:30,660 --> 00:00:35,730
here<font color="#CCCCCC"> both</font><font color="#E5E5E5"> of them perform the same</font>

16
00:00:33,210 --> 00:00:38,250
multiplication a hundred million<font color="#CCCCCC"> times</font>

17
00:00:35,730 --> 00:00:41,129
<font color="#E5E5E5">except one</font><font color="#CCCCCC"> of them multiplies 1.0 times</font>

18
00:00:38,250 --> 00:00:44,370
1.0 and one of them multiplies 1.0 times

19
00:00:41,129 --> 00:00:45,930
a rather suspiciously small value<font color="#E5E5E5"> and if</font>

20
00:00:44,370 --> 00:00:48,120
we<font color="#CCCCCC"> just run these two</font><font color="#E5E5E5"> programs in user</font>

21
00:00:45,930 --> 00:00:50,460
land on<font color="#CCCCCC"> linux</font><font color="#E5E5E5"> and we time them using</font>

22
00:00:48,120 --> 00:00:52,680
unix time we said that one<font color="#CCCCCC"> of them</font><font color="#E5E5E5"> runs</font>

23
00:00:50,460 --> 00:00:55,020
in point<font color="#E5E5E5"> two seconds the other one runs</font>

24
00:00:52,680 --> 00:00:58,469
<font color="#E5E5E5">in point four point</font><font color="#CCCCCC"> three seconds which</font>

25
00:00:55,020 --> 00:01:00,960
is<font color="#E5E5E5"> over</font><font color="#CCCCCC"> twenty</font><font color="#E5E5E5"> times slower so that's a</font>

26
00:00:58,469 --> 00:01:02,370
little<font color="#E5E5E5"> bit disturbing who knew that</font><font color="#CCCCCC"> if I</font>

27
00:01:00,960 --> 00:01:05,159
wrote<font color="#E5E5E5"> these two programs they</font><font color="#CCCCCC"> would run</font>

28
00:01:02,370 --> 00:01:07,259
<font color="#CCCCCC">20 times slower well numerical analysts</font>

29
00:01:05,159 --> 00:01:09,390
knew this and CPU designers obviously

30
00:01:07,260 --> 00:01:11,460
had to build<font color="#E5E5E5"> this game engine authors</font>

31
00:01:09,390 --> 00:01:13,799
have great blogs detailing how to avoid

32
00:01:11,460 --> 00:01:15,600
this behavior but<font color="#CCCCCC"> I would argue that a</font>

33
00:01:13,799 --> 00:01:18,240
<font color="#CCCCCC">lot of</font><font color="#E5E5E5"> us didn't know it and we probably</font>

34
00:01:15,600 --> 00:01:19,860
should<font color="#CCCCCC"> have because we all read what</font>

35
00:01:18,240 --> 00:01:21,420
every computer scientist<font color="#E5E5E5"> should know</font>

36
00:01:19,860 --> 00:01:24,479
about floating-point arithmetic<font color="#E5E5E5"> which</font>

37
00:01:21,420 --> 00:01:26,280
was written in 1991 and and as a kind of

38
00:01:24,479 --> 00:01:28,170
an<font color="#CCCCCC"> example here one of the systems that</font>

39
00:01:26,280 --> 00:01:30,270
we<font color="#E5E5E5"> examined and we were able</font><font color="#CCCCCC"> to find a</font>

40
00:01:28,170 --> 00:01:33,659
floating-point side channel in the

41
00:01:30,270 --> 00:01:35,670
<font color="#E5E5E5">authors stated that they quote claims to</font>

42
00:01:33,659 --> 00:01:37,700
effectively<font color="#CCCCCC"> closed all known remote</font>

43
00:01:35,670 --> 00:01:39,840
remotely exploitable channels

44
00:01:37,700 --> 00:01:42,210
<font color="#E5E5E5">specifically referring to timing side</font>

45
00:01:39,840 --> 00:01:44,810
channels and we have a functional timing

46
00:01:42,210 --> 00:01:46,740
side channel attack against their system

47
00:01:44,810 --> 00:01:48,210
<font color="#E5E5E5">so let's learn a little</font><font color="#CCCCCC"> bit about</font>

48
00:01:46,740 --> 00:01:50,429
<font color="#E5E5E5">floating-point and timing because</font>

49
00:01:48,210 --> 00:01:52,380
<font color="#CCCCCC">obviously they run rather strangely well</font>

50
00:01:50,430 --> 00:01:54,659
what just happened in the code I showed

51
00:01:52,380 --> 00:01:56,369
<font color="#CCCCCC">you</font><font color="#E5E5E5"> well there's this I Triple E</font>

52
00:01:54,659 --> 00:01:57,990
standard which was standardized in<font color="#CCCCCC"> the</font>

53
00:01:56,369 --> 00:02:00,210
late 80s there's these<font color="#CCCCCC"> subnormal</font>

54
00:01:57,990 --> 00:02:02,310
floating-point values let's actually

55
00:02:00,210 --> 00:02:03,600
<font color="#CCCCCC">look</font><font color="#E5E5E5"> at them for a second here</font><font color="#CCCCCC"> so</font>

56
00:02:02,310 --> 00:02:04,619
there's these sub normal values but

57
00:02:03,600 --> 00:02:08,549
first we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> talk about normal</font>

58
00:02:04,619 --> 00:02:11,489
values this is an I Triple E 754<font color="#E5E5E5"> 64-bit</font>

59
00:02:08,550 --> 00:02:13,410
<font color="#E5E5E5">double</font><font color="#CCCCCC"> via</font><font color="#E5E5E5"> 52 bits of significand you</font>

60
00:02:11,489 --> 00:02:15,270
have an exponent you<font color="#E5E5E5"> have a sign bit</font>

61
00:02:13,410 --> 00:02:17,010
this value that<font color="#CCCCCC"> it represents is here</font>

62
00:02:15,270 --> 00:02:19,170
<font color="#E5E5E5">one thing to note is there's a bias</font>

63
00:02:17,010 --> 00:02:21,630
value applied to the<font color="#E5E5E5"> exponent and this</font>

64
00:02:19,170 --> 00:02:24,959
lets you represent values a lot easier

65
00:02:21,630 --> 00:02:28,650
<font color="#E5E5E5">and a normal</font><font color="#CCCCCC"> value</font><font color="#E5E5E5"> the exponent</font><font color="#CCCCCC"> those</font>

66
00:02:24,960 --> 00:02:30,930
<font color="#CCCCCC">eleven bits are non all</font><font color="#E5E5E5"> zero so you set</font>

67
00:02:28,650 --> 00:02:33,120
something<font color="#E5E5E5"> there</font><font color="#CCCCCC"> and this specifies then</font>

68
00:02:30,930 --> 00:02:34,830
that you have<font color="#CCCCCC"> an implicit leading</font><font color="#E5E5E5"> one</font>

69
00:02:33,120 --> 00:02:36,930
bit on your significant

70
00:02:34,830 --> 00:02:39,780
now the<font color="#CCCCCC"> adroitly</font><font color="#E5E5E5"> standard also specifies</font>

71
00:02:36,930 --> 00:02:41,430
a sub normal<font color="#E5E5E5"> floating point number and</font>

72
00:02:39,780 --> 00:02:43,790
<font color="#E5E5E5">these are an optional part of the</font>

73
00:02:41,430 --> 00:02:46,470
standard<font color="#E5E5E5"> but most</font><font color="#CCCCCC"> c</font><font color="#E5E5E5"> or most CPUs</font>

74
00:02:43,790 --> 00:02:49,709
<font color="#E5E5E5">implement them and in the sub normal</font>

75
00:02:46,470 --> 00:02:52,109
case<font color="#E5E5E5"> your exponent is all zero bits and</font>

76
00:02:49,710 --> 00:02:54,510
you have an implicit leading<font color="#CCCCCC"> 0 bit on</font>

77
00:02:52,110 --> 00:02:55,920
<font color="#E5E5E5">your significant now if you're doing the</font>

78
00:02:54,510 --> 00:02:58,410
<font color="#CCCCCC">math</font><font color="#E5E5E5"> you're going to say that is an</font>

79
00:02:55,920 --> 00:03:00,000
incredibly small number and yes it's an

80
00:02:58,410 --> 00:03:01,980
incredibly small number this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> your</font>

81
00:03:00,000 --> 00:03:04,890
range<font color="#E5E5E5"> and I've included the plunk length</font>

82
00:03:01,980 --> 00:03:07,920
there for scale<font color="#CCCCCC"> now why would you</font><font color="#E5E5E5"> want</font>

83
00:03:04,890 --> 00:03:10,799
numbers that are so incredibly tiny and

84
00:03:07,920 --> 00:03:12,269
these are<font color="#E5E5E5"> just doubles well one thing is</font>

85
00:03:10,800 --> 00:03:14,280
it greatly<font color="#E5E5E5"> extends the representable</font>

86
00:03:12,270 --> 00:03:15,990
range<font color="#E5E5E5"> of</font><font color="#CCCCCC"> floating-point</font><font color="#E5E5E5"> values you've</font>

87
00:03:14,280 --> 00:03:18,360
got a much larger<font color="#CCCCCC"> range of representable</font>

88
00:03:15,990 --> 00:03:21,000
values and kind of getting<font color="#E5E5E5"> back to our</font>

89
00:03:18,360 --> 00:03:23,430
<font color="#CCCCCC">goldberg we have a graceful underflow</font>

90
00:03:21,000 --> 00:03:25,709
problem here<font color="#E5E5E5"> if</font><font color="#CCCCCC"> I were to perform</font><font color="#E5E5E5"> this</font>

91
00:03:23,430 --> 00:03:28,680
<font color="#CCCCCC">check and</font><font color="#E5E5E5"> math with integer arithmetic</font>

92
00:03:25,709 --> 00:03:30,810
<font color="#CCCCCC">you would</font><font color="#E5E5E5"> agree</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> me that a minus B</font>

93
00:03:28,680 --> 00:03:31,770
<font color="#E5E5E5">is never going to be</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> and we would</font>

94
00:03:30,810 --> 00:03:34,500
<font color="#E5E5E5">never divide by</font><font color="#CCCCCC"> 0</font>

95
00:03:31,770 --> 00:03:36,000
<font color="#E5E5E5">but with floating point this is not true</font>

96
00:03:34,500 --> 00:03:38,130
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we can end up with a situation</font>

97
00:03:36,000 --> 00:03:41,220
<font color="#E5E5E5">where we have values that are too close</font>

98
00:03:38,130 --> 00:03:43,590
to each<font color="#CCCCCC"> other</font><font color="#E5E5E5"> with sub</font><font color="#CCCCCC"> normal values</font>

99
00:03:41,220 --> 00:03:45,750
enabled you are guaranteed that<font color="#E5E5E5"> no</font>

100
00:03:43,590 --> 00:03:48,360
<font color="#E5E5E5">matter what a and</font><font color="#CCCCCC"> B</font><font color="#E5E5E5"> are you will never</font>

101
00:03:45,750 --> 00:03:49,830
result<font color="#CCCCCC"> with zero in this case</font><font color="#E5E5E5"> so there's</font>

102
00:03:48,360 --> 00:03:52,130
a kind<font color="#CCCCCC"> of a safety</font><font color="#E5E5E5"> and correctness</font>

103
00:03:49,830 --> 00:03:54,270
<font color="#E5E5E5">property that's that's nice to have here</font>

104
00:03:52,130 --> 00:03:56,280
<font color="#E5E5E5">so what happened let's get back to</font><font color="#CCCCCC"> that</font>

105
00:03:54,270 --> 00:03:57,750
<font color="#E5E5E5">so we have these sub normal values</font><font color="#CCCCCC"> I</font>

106
00:03:56,280 --> 00:04:00,270
just kind of<font color="#CCCCCC"> explain to</font><font color="#E5E5E5"> you though that</font>

107
00:03:57,750 --> 00:04:02,100
<font color="#CCCCCC">they're not the common case and the FPU</font>

108
00:04:00,270 --> 00:04:04,050
that you have the<font color="#CCCCCC"> floating-point</font><font color="#E5E5E5"> unit is</font>

109
00:04:02,100 --> 00:04:06,630
<font color="#E5E5E5">designed purely for</font><font color="#CCCCCC"> speed that's</font><font color="#E5E5E5"> your</font>

110
00:04:04,050 --> 00:04:07,770
goal so most of the time they're<font color="#CCCCCC"> just</font>

111
00:04:06,630 --> 00:04:09,660
<font color="#CCCCCC">gonna kind of pretend that</font><font color="#E5E5E5"> they don't</font>

112
00:04:07,770 --> 00:04:12,209
matter<font color="#E5E5E5"> and</font><font color="#CCCCCC"> there they end up being a</font>

113
00:04:09,660 --> 00:04:14,070
hardware slow path on all processors

114
00:04:12,209 --> 00:04:16,140
<font color="#CCCCCC">today they're your</font><font color="#E5E5E5"> commodity processors</font>

115
00:04:14,070 --> 00:04:18,450
notably<font color="#E5E5E5"> for example as kind of a</font>

116
00:04:16,140 --> 00:04:20,820
motivation here the<font color="#CCCCCC"> Alpha traps to</font>

117
00:04:18,450 --> 00:04:22,169
<font color="#CCCCCC">kernel</font><font color="#E5E5E5"> every single time it results</font><font color="#CCCCCC"> it</font>

118
00:04:20,820 --> 00:04:23,700
got a sub normal as the result of a

119
00:04:22,169 --> 00:04:26,370
computation<font color="#E5E5E5"> and that's a machine</font><font color="#CCCCCC"> that</font>

120
00:04:23,700 --> 00:04:27,120
wanted to<font color="#E5E5E5"> be cranked and</font><font color="#CCCCCC"> also most GPUs</font>

121
00:04:26,370 --> 00:04:28,800
don't support

122
00:04:27,120 --> 00:04:30,210
values some newer<font color="#E5E5E5"> ones there's some</font>

123
00:04:28,800 --> 00:04:31,740
differences but the<font color="#CCCCCC"> majority of them</font>

124
00:04:30,210 --> 00:04:34,859
<font color="#E5E5E5">will simply treat them as zero if they</font>

125
00:04:31,740 --> 00:04:36,630
encounter<font color="#E5E5E5"> them now I'd like to</font><font color="#CCCCCC"> argue</font>

126
00:04:34,860 --> 00:04:39,330
<font color="#E5E5E5">that floating point is a security issue</font>

127
00:04:36,630 --> 00:04:40,949
<font color="#CCCCCC">for several</font><font color="#E5E5E5"> reasons</font><font color="#CCCCCC"> but this is not</font><font color="#E5E5E5"> the</font>

128
00:04:39,330 --> 00:04:43,080
first<font color="#E5E5E5"> time the floating point has been</font>

129
00:04:40,949 --> 00:04:45,720
misunderstood there's a<font color="#E5E5E5"> fantastic piece</font>

130
00:04:43,080 --> 00:04:48,359
of<font color="#E5E5E5"> work by</font><font color="#CCCCCC"> Ilya Morano on laplacian</font>

131
00:04:45,720 --> 00:04:50,210
noise generation<font color="#E5E5E5"> there was a system that</font>

132
00:04:48,360 --> 00:04:53,370
was attempting<font color="#CCCCCC"> to join to generate</font>

133
00:04:50,210 --> 00:04:54,900
uniform<font color="#CCCCCC"> random noise and rather than end</font>

134
00:04:53,370 --> 00:04:57,300
up with a beautiful probability curve

135
00:04:54,900 --> 00:04:59,070
that like you would<font color="#E5E5E5"> expect they used a</font>

136
00:04:57,300 --> 00:05:01,039
naive<font color="#E5E5E5"> way of generating this noise and</font>

137
00:04:59,070 --> 00:05:03,330
they got this Bowser's Castle of

138
00:05:01,039 --> 00:05:05,280
probability<font color="#E5E5E5"> distributions which I don't</font>

139
00:05:03,330 --> 00:05:06,630
need to explain<font color="#CCCCCC"> to</font><font color="#E5E5E5"> you before you'll</font>

140
00:05:05,280 --> 00:05:09,030
know that<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> probably</font><font color="#E5E5E5"> not what you</font>

141
00:05:06,630 --> 00:05:11,100
expected<font color="#E5E5E5"> and there's also kind of this</font>

142
00:05:09,030 --> 00:05:14,039
issue of dependable results when you use

143
00:05:11,100 --> 00:05:16,500
floating-point arithmetic<font color="#E5E5E5"> recompiling</font>

144
00:05:14,039 --> 00:05:19,110
your program can result in not<font color="#CCCCCC"> only</font>

145
00:05:16,500 --> 00:05:22,650
different running<font color="#E5E5E5"> times but different</font>

146
00:05:19,110 --> 00:05:24,360
values<font color="#E5E5E5"> out of</font><font color="#CCCCCC"> your computations</font><font color="#E5E5E5"> and this</font>

147
00:05:22,650 --> 00:05:26,130
is<font color="#E5E5E5"> especially noticeable if you start</font>

148
00:05:24,360 --> 00:05:29,490
doing things like changing<font color="#E5E5E5"> optimization</font>

149
00:05:26,130 --> 00:05:31,530
<font color="#E5E5E5">flags so they run in</font><font color="#CCCCCC"> different amounts</font>

150
00:05:29,490 --> 00:05:33,030
<font color="#CCCCCC">of time</font><font color="#E5E5E5"> how do we leverage this into an</font>

151
00:05:31,530 --> 00:05:34,380
attack we're gonna<font color="#E5E5E5"> need to get two</font>

152
00:05:33,030 --> 00:05:35,479
timing attacks and not<font color="#E5E5E5"> even even talked</font>

153
00:05:34,380 --> 00:05:39,840
about<font color="#E5E5E5"> them yet</font>

154
00:05:35,479 --> 00:05:41,909
so on a<font color="#E5E5E5"> timing attack you want something</font>

155
00:05:39,840 --> 00:05:44,789
<font color="#E5E5E5">that</font><font color="#CCCCCC"> operates on</font><font color="#E5E5E5"> secret data</font><font color="#CCCCCC"> and</font>

156
00:05:41,910 --> 00:05:46,860
attacker data and you<font color="#E5E5E5"> want it to have</font>

157
00:05:44,789 --> 00:05:48,870
some<font color="#CCCCCC"> sort of difference so</font><font color="#E5E5E5"> we've seen</font>

158
00:05:46,860 --> 00:05:50,820
instruction traces we see memory access

159
00:05:48,870 --> 00:05:53,639
patterns<font color="#E5E5E5"> caste utilization IO</font>

160
00:05:50,820 --> 00:05:57,180
<font color="#E5E5E5">utilization etc this work presents the</font>

161
00:05:53,639 --> 00:06:00,090
first practical instruction database

162
00:05:57,180 --> 00:06:02,610
<font color="#E5E5E5">timing</font><font color="#CCCCCC"> side-channel</font><font color="#E5E5E5"> so our attacks have</font>

163
00:06:00,090 --> 00:06:04,710
identical code<font color="#E5E5E5"> paths identical memory</font>

164
00:06:02,610 --> 00:06:06,389
<font color="#E5E5E5">access identical</font><font color="#CCCCCC"> Oh IO access</font><font color="#E5E5E5"> the only</font>

165
00:06:04,710 --> 00:06:07,530
difference is the value that's

166
00:06:06,389 --> 00:06:09,870
represented in our floating-point

167
00:06:07,530 --> 00:06:11,400
registers<font color="#CCCCCC"> and this was proposed by coach</font>

168
00:06:09,870 --> 00:06:12,900
or<font color="#E5E5E5"> twenty</font><font color="#CCCCCC"> years</font><font color="#E5E5E5"> ago in the original work</font>

169
00:06:11,400 --> 00:06:16,729
on<font color="#CCCCCC"> floating-point but there hasn't been</font>

170
00:06:12,900 --> 00:06:19,080
anything since so this is some<font color="#E5E5E5"> kind of</font>

171
00:06:16,729 --> 00:06:22,169
random data from<font color="#E5E5E5"> from our paper on</font>

172
00:06:19,080 --> 00:06:24,510
unloading point<font color="#CCCCCC"> on the top we have</font><font color="#E5E5E5"> a</font>

173
00:06:22,169 --> 00:06:26,909
core i7<font color="#E5E5E5"> processor and on the bottom we</font>

174
00:06:24,510 --> 00:06:29,460
<font color="#CCCCCC">have an atom</font><font color="#E5E5E5"> Intel processor</font><font color="#CCCCCC"> and the</font>

175
00:06:26,910 --> 00:06:33,150
blue<font color="#E5E5E5"> is SSE instructions these implement</font>

176
00:06:29,460 --> 00:06:35,520
your I Triple E 754 standard<font color="#E5E5E5"> and on the</font>

177
00:06:33,150 --> 00:06:37,409
<font color="#E5E5E5">other side we</font><font color="#CCCCCC"> have our orange which is</font>

178
00:06:35,520 --> 00:06:39,150
<font color="#E5E5E5">the</font><font color="#CCCCCC"> x87</font><font color="#E5E5E5"> unit now you might not</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> been</font>

179
00:06:37,409 --> 00:06:40,539
<font color="#CCCCCC">aware of this but</font><font color="#E5E5E5"> you're a cop in your</font>

180
00:06:39,150 --> 00:06:42,810
processor actually<font color="#E5E5E5"> has</font><font color="#CCCCCC"> to in</font>

181
00:06:40,540 --> 00:06:45,100
highly independent<font color="#CCCCCC"> non compatible</font><font color="#E5E5E5"> and</font>

182
00:06:42,810 --> 00:06:47,080
non-conforming floating-point stacks and

183
00:06:45,100 --> 00:06:48,610
your compiler is deciding<font color="#E5E5E5"> which of these</font>

184
00:06:47,080 --> 00:06:51,159
to use and you're going<font color="#CCCCCC"> to get</font><font color="#E5E5E5"> different</font>

185
00:06:48,610 --> 00:06:54,040
results<font color="#E5E5E5"> from them</font><font color="#CCCCCC"> so we have add and</font>

186
00:06:51,160 --> 00:06:57,010
division for<font color="#CCCCCC"> SSE and we we have add and</font>

187
00:06:54,040 --> 00:07:00,010
multiply<font color="#E5E5E5"> for x87 here and these</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> all</font>

188
00:06:57,010 --> 00:07:02,260
normalized<font color="#E5E5E5"> graphs to how long</font>

189
00:07:00,010 --> 00:07:04,480
<font color="#CCCCCC">add normal value</font><font color="#E5E5E5"> plus normal value takes</font>

190
00:07:02,260 --> 00:07:06,520
so on the i7 as you can see we have some

191
00:07:04,480 --> 00:07:09,310
variation<font color="#E5E5E5"> division where the</font>

192
00:07:06,520 --> 00:07:10,690
normalizable is nasty the x87 is worse

193
00:07:09,310 --> 00:07:13,080
on both of these<font color="#CCCCCC"> than the atom is</font>

194
00:07:10,690 --> 00:07:15,430
notably kind of all<font color="#E5E5E5"> over the</font><font color="#CCCCCC"> place</font>

195
00:07:13,080 --> 00:07:16,479
<font color="#E5E5E5">so these are just for normal and sub</font>

196
00:07:15,430 --> 00:07:17,920
normal but there's actually<font color="#CCCCCC"> a wide</font>

197
00:07:16,480 --> 00:07:20,200
variety<font color="#CCCCCC"> of timing differences with</font>

198
00:07:17,920 --> 00:07:21,970
special cases like<font color="#E5E5E5"> zeros and ones and</font>

199
00:07:20,200 --> 00:07:23,469
extra large values and<font color="#E5E5E5"> that sort of</font>

200
00:07:21,970 --> 00:07:24,930
thing<font color="#E5E5E5"> and you can see</font><font color="#CCCCCC"> the paper for</font>

201
00:07:23,470 --> 00:07:29,050
details<font color="#E5E5E5"> on that</font>

202
00:07:24,930 --> 00:07:31,510
so these as<font color="#E5E5E5"> I said though</font><font color="#CCCCCC"> are our cycle</font>

203
00:07:29,050 --> 00:07:33,040
<font color="#CCCCCC">count</font><font color="#E5E5E5"> differences</font><font color="#CCCCCC"> so when I say</font><font color="#E5E5E5"> that you</font>

204
00:07:31,510 --> 00:07:34,810
know oh this one's like twice as long

205
00:07:33,040 --> 00:07:37,570
I'm talking about<font color="#CCCCCC"> seven cycles versus</font>

206
00:07:34,810 --> 00:07:39,190
<font color="#CCCCCC">fourteen CPU cycles which on a loaded</font>

207
00:07:37,570 --> 00:07:41,650
system<font color="#E5E5E5"> is gonna be a little bit</font>

208
00:07:39,190 --> 00:07:42,730
difficult to spot<font color="#E5E5E5"> and if we go back</font><font color="#CCCCCC"> to</font>

209
00:07:41,650 --> 00:07:44,229
that code I showed<font color="#E5E5E5"> you at the</font><font color="#CCCCCC"> very</font>

210
00:07:42,730 --> 00:07:47,080
beginning<font color="#CCCCCC"> we're gonna need</font><font color="#E5E5E5"> a way</font><font color="#CCCCCC"> to</font>

211
00:07:44,230 --> 00:07:48,730
amplify<font color="#E5E5E5"> this timing difference and I did</font>

212
00:07:47,080 --> 00:07:52,030
that<font color="#E5E5E5"> in the sample code I just ran</font><font color="#CCCCCC"> the</font>

213
00:07:48,730 --> 00:07:53,800
math<font color="#E5E5E5"> one hundred million times so we</font>

214
00:07:52,030 --> 00:07:55,659
want code if we're<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to use this as</font>

215
00:07:53,800 --> 00:07:57,670
a side<font color="#CCCCCC"> channel as a timing side</font><font color="#E5E5E5"> channel</font>

216
00:07:55,660 --> 00:08:00,280
<font color="#E5E5E5">we want</font><font color="#CCCCCC"> a code</font><font color="#E5E5E5"> that runs tight math</font>

217
00:07:57,670 --> 00:08:02,920
loops over<font color="#E5E5E5"> a repetitive data so that we</font>

218
00:08:00,280 --> 00:08:04,539
<font color="#E5E5E5">can amplify</font><font color="#CCCCCC"> our attack which</font><font color="#E5E5E5"> means we</font>

219
00:08:02,920 --> 00:08:06,640
need<font color="#E5E5E5"> to now take</font><font color="#CCCCCC"> a detour</font><font color="#E5E5E5"> I've been down</font>

220
00:08:04,540 --> 00:08:08,260
in<font color="#E5E5E5"> the low</font><font color="#CCCCCC"> level talking to you about FP</font>

221
00:08:06,640 --> 00:08:09,250
use I don't need to<font color="#E5E5E5"> talk to you about</font>

222
00:08:08,260 --> 00:08:10,780
something<font color="#CCCCCC"> that we can attack</font>

223
00:08:09,250 --> 00:08:12,970
specifically I'm going to<font color="#E5E5E5"> talk to you</font>

224
00:08:10,780 --> 00:08:15,250
about Firefox<font color="#CCCCCC"> and to do that I'm going</font>

225
00:08:12,970 --> 00:08:17,050
<font color="#CCCCCC">to talk</font><font color="#E5E5E5"> about Firefox SVG filters and</font>

226
00:08:15,250 --> 00:08:18,970
summarize<font color="#E5E5E5"> a previous attack that used</font>

227
00:08:17,050 --> 00:08:22,480
Firefox SVG filters<font color="#E5E5E5"> because ours looks</font>

228
00:08:18,970 --> 00:08:25,210
pretty similar<font color="#CCCCCC"> so what's a Firefox SVG</font>

229
00:08:22,480 --> 00:08:27,790
filter<font color="#E5E5E5"> well if I fox SVG filter is a CSS</font>

230
00:08:25,210 --> 00:08:30,219
<font color="#E5E5E5">thing that lets you turn this a I framed</font>

231
00:08:27,790 --> 00:08:33,340
copy<font color="#E5E5E5"> of Wikipedia into this which is a</font>

232
00:08:30,220 --> 00:08:35,560
blurred<font color="#E5E5E5"> iframes copy of Wikipedia this</font>

233
00:08:33,340 --> 00:08:37,120
is very valuable<font color="#E5E5E5"> as we all know it does</font>

234
00:08:35,559 --> 00:08:39,039
<font color="#E5E5E5">actually let you do other things and</font>

235
00:08:37,120 --> 00:08:40,599
then that you can<font color="#E5E5E5"> apply it really to</font>

236
00:08:39,039 --> 00:08:42,939
pretty much any<font color="#E5E5E5"> Dom element that you</font>

237
00:08:40,599 --> 00:08:44,680
would like notably iframes in this case

238
00:08:42,940 --> 00:08:45,820
<font color="#E5E5E5">and you can run</font><font color="#CCCCCC"> over a</font><font color="#E5E5E5"> variety of</font>

239
00:08:44,680 --> 00:08:48,400
<font color="#CCCCCC">different functions you</font><font color="#E5E5E5"> can run your</font>

240
00:08:45,820 --> 00:08:50,950
blurs your excuse gradients clipping etc

241
00:08:48,400 --> 00:08:52,870
and very importantly these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> stackable</font>

242
00:08:50,950 --> 00:08:54,220
filters<font color="#E5E5E5"> so I can apply</font><font color="#CCCCCC"> ten of</font><font color="#E5E5E5"> these</font>

243
00:08:52,870 --> 00:08:58,089
filters<font color="#E5E5E5"> in a row compose</font>

244
00:08:54,220 --> 00:09:00,519
and get back<font color="#CCCCCC"> out a</font><font color="#E5E5E5"> different result so</font>

245
00:08:58,089 --> 00:09:02,500
I'm<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> go</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of a high</font>

246
00:09:00,519 --> 00:09:05,110
level version of<font color="#E5E5E5"> pulse tones pixel</font>

247
00:09:02,500 --> 00:09:07,660
<font color="#E5E5E5">perfect timing attacks with html5</font><font color="#CCCCCC"> this</font>

248
00:09:05,110 --> 00:09:09,970
was an<font color="#E5E5E5"> attack on</font><font color="#CCCCCC"> Firefox privacy that</font>

249
00:09:07,660 --> 00:09:12,730
used SVG filters<font color="#CCCCCC"> the purpose of it was</font>

250
00:09:09,970 --> 00:09:15,310
<font color="#CCCCCC">that an attacker webpage</font><font color="#E5E5E5"> could I</font><font color="#CCCCCC"> frame a</font>

251
00:09:12,730 --> 00:09:16,810
victim<font color="#E5E5E5"> web page and then read pixel data</font>

252
00:09:15,310 --> 00:09:19,300
out of<font color="#E5E5E5"> that web page effectively</font>

253
00:09:16,810 --> 00:09:20,910
violating the<font color="#CCCCCC"> same-origin policy so</font>

254
00:09:19,300 --> 00:09:23,439
that's what we have<font color="#E5E5E5"> right here we</font><font color="#CCCCCC"> have a</font>

255
00:09:20,910 --> 00:09:25,240
attacker web page that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> eye framing a</font>

256
00:09:23,439 --> 00:09:27,189
target web page we're gonna pick out

257
00:09:25,240 --> 00:09:28,689
some pixel<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> just gonna highlight it</font>

258
00:09:27,189 --> 00:09:31,149
as<font color="#CCCCCC"> read let's pretend pixels are black</font>

259
00:09:28,689 --> 00:09:34,389
and<font color="#E5E5E5"> white for now and we're going</font><font color="#CCCCCC"> to</font>

260
00:09:31,149 --> 00:09:36,009
expand<font color="#E5E5E5"> this pixel and we're gonna do</font>

261
00:09:34,389 --> 00:09:39,189
this with some filters we're going to

262
00:09:36,009 --> 00:09:41,110
use some divs a couple of kind of silly

263
00:09:39,189 --> 00:09:42,910
CSS elements<font color="#CCCCCC"> and you're</font><font color="#E5E5E5"> going to end up</font>

264
00:09:41,110 --> 00:09:44,680
<font color="#E5E5E5">with</font><font color="#CCCCCC"> a div that contains that</font><font color="#E5E5E5"> target</font>

265
00:09:42,910 --> 00:09:47,410
pixel<font color="#E5E5E5"> as many times as you would like</font>

266
00:09:44,680 --> 00:09:49,209
<font color="#CCCCCC">and then</font><font color="#E5E5E5"> in the Paul stone case we're</font>

267
00:09:47,410 --> 00:09:52,620
going<font color="#E5E5E5"> to run an SVG filter over this</font>

268
00:09:49,209 --> 00:09:55,300
we're going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> run he runs the FE</font>

269
00:09:52,620 --> 00:09:57,009
<font color="#E5E5E5">morphology filter over this and you</font>

270
00:09:55,300 --> 00:09:58,990
<font color="#CCCCCC">obtain the filtered rending rendering of</font>

271
00:09:57,009 --> 00:10:00,850
that<font color="#CCCCCC"> div which we immediately throw away</font>

272
00:09:58,990 --> 00:10:03,279
<font color="#E5E5E5">because you</font><font color="#CCCCCC"> don't care about it but you</font>

273
00:10:00,850 --> 00:10:05,259
time the rendering of that<font color="#CCCCCC"> and you can</font>

274
00:10:03,279 --> 00:10:07,360
<font color="#E5E5E5">use JavaScript</font><font color="#CCCCCC"> to do this you can</font><font color="#E5E5E5"> use</font>

275
00:10:05,259 --> 00:10:09,069
JavaScript<font color="#E5E5E5"> you can set callbacks for</font>

276
00:10:07,360 --> 00:10:11,290
animation frame timing and you<font color="#CCCCCC"> can get a</font>

277
00:10:09,069 --> 00:10:14,139
high performance<font color="#E5E5E5"> timing counters out and</font>

278
00:10:11,290 --> 00:10:16,810
you time this and in the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> FeO</font>

279
00:10:14,139 --> 00:10:19,029
morphology case there was a fast path<font color="#E5E5E5"> in</font>

280
00:10:16,810 --> 00:10:20,859
the code<font color="#CCCCCC"> for the filter if</font><font color="#E5E5E5"> it found an</font>

281
00:10:19,029 --> 00:10:21,910
image<font color="#E5E5E5"> that looked very</font><font color="#CCCCCC"> similar across</font>

282
00:10:20,860 --> 00:10:23,949
all of itself

283
00:10:21,910 --> 00:10:26,560
the code ran quicker than in other cases

284
00:10:23,949 --> 00:10:28,060
<font color="#CCCCCC">and this</font><font color="#E5E5E5"> is actually an excerpt from</font>

285
00:10:26,560 --> 00:10:30,969
that<font color="#CCCCCC"> specific code so there was this</font>

286
00:10:28,060 --> 00:10:32,709
fast path<font color="#CCCCCC"> optimization</font><font color="#E5E5E5"> and by utilizing</font>

287
00:10:30,970 --> 00:10:34,269
this fast path<font color="#CCCCCC"> opposite</font><font color="#E5E5E5"> optimization the</font>

288
00:10:32,709 --> 00:10:36,880
attack was able to read out pixel data

289
00:10:34,269 --> 00:10:38,800
now the fix for<font color="#E5E5E5"> this was to write</font>

290
00:10:36,880 --> 00:10:40,870
constant time code which is something

291
00:10:38,800 --> 00:10:43,389
<font color="#CCCCCC">that should scare everyone</font><font color="#E5E5E5"> and it took</font>

292
00:10:40,870 --> 00:10:44,980
around<font color="#E5E5E5"> two years to land the patch for</font>

293
00:10:43,389 --> 00:10:47,350
this for various reasons there's an

294
00:10:44,980 --> 00:10:49,420
enormous bug thread<font color="#CCCCCC"> I highly</font><font color="#E5E5E5"> recommend</font>

295
00:10:47,350 --> 00:10:52,329
reading<font color="#E5E5E5"> it it's very interesting</font><font color="#CCCCCC"> a lot</font>

296
00:10:49,420 --> 00:10:54,128
to say about Mozilla and and kind of<font color="#E5E5E5"> it</font>

297
00:10:52,329 --> 00:10:56,769
boiled down<font color="#E5E5E5"> to</font><font color="#CCCCCC"> to them trying</font><font color="#E5E5E5"> to</font>

298
00:10:54,129 --> 00:11:00,519
<font color="#E5E5E5">implement a couple key parts as constant</font>

299
00:10:56,769 --> 00:11:02,649
time things in C++<font color="#E5E5E5"> okay so I'm I'm gonna</font>

300
00:11:00,519 --> 00:11:04,360
now shift us back to the present<font color="#CCCCCC"> let's</font>

301
00:11:02,649 --> 00:11:07,100
remember<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we have our sub normal</font>

302
00:11:04,360 --> 00:11:09,320
floating point we have this SVP attack

303
00:11:07,100 --> 00:11:11,420
and really<font color="#CCCCCC"> firefox SVG filters weren't</font>

304
00:11:09,320 --> 00:11:12,800
<font color="#CCCCCC">fixed right the filters were just</font>

305
00:11:11,420 --> 00:11:14,870
written<font color="#E5E5E5"> to be constant time but we still</font>

306
00:11:12,800 --> 00:11:17,930
<font color="#CCCCCC">get to compute over</font><font color="#E5E5E5"> foreign</font><font color="#CCCCCC"> in pixel</font>

307
00:11:14,870 --> 00:11:19,940
data and I have a<font color="#E5E5E5"> brand new timing side</font>

308
00:11:17,930 --> 00:11:21,890
channel<font color="#CCCCCC"> source for you</font><font color="#E5E5E5"> but I told you</font>

309
00:11:19,940 --> 00:11:23,420
<font color="#E5E5E5">that well and I guess it should be no</font>

310
00:11:21,890 --> 00:11:25,640
surprise at<font color="#E5E5E5"> this point but SVG filters</font>

311
00:11:23,420 --> 00:11:29,449
run floating point math so this looks

312
00:11:25,640 --> 00:11:32,150
really good<font color="#E5E5E5"> for us</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> I still need I</font>

313
00:11:29,450 --> 00:11:35,930
still need an amplifier<font color="#CCCCCC"> remember</font><font color="#E5E5E5"> cuz I</font>

314
00:11:32,150 --> 00:11:37,490
ran my code<font color="#E5E5E5"> 100 million times thankfully</font>

315
00:11:35,930 --> 00:11:39,260
<font color="#CCCCCC">10 seconds</font><font color="#E5E5E5"> ago</font><font color="#CCCCCC"> I showed you an amplifier</font>

316
00:11:37,490 --> 00:11:40,880
which<font color="#CCCCCC"> is that I take a target pixel</font><font color="#E5E5E5"> and</font>

317
00:11:39,260 --> 00:11:42,890
I'm able<font color="#E5E5E5"> to expand it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be as many</font>

318
00:11:40,880 --> 00:11:45,260
pixels<font color="#E5E5E5"> as I want and then run a filter</font>

319
00:11:42,890 --> 00:11:47,300
<font color="#CCCCCC">over it so that's</font><font color="#E5E5E5"> exactly</font><font color="#CCCCCC"> what I'm</font>

320
00:11:45,260 --> 00:11:49,819
<font color="#CCCCCC">looking for</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a simplified</font>

321
00:11:47,300 --> 00:11:51,380
<font color="#CCCCCC">version of the the</font><font color="#E5E5E5"> convolution filter</font><font color="#CCCCCC"> in</font>

322
00:11:49,820 --> 00:11:54,530
<font color="#E5E5E5">Firefox which is what we use to</font>

323
00:11:51,380 --> 00:11:57,320
implement<font color="#E5E5E5"> our attack</font><font color="#CCCCCC"> so this is run over</font>

324
00:11:54,530 --> 00:11:58,730
every pixel in the target div that

325
00:11:57,320 --> 00:12:01,010
<font color="#E5E5E5">you're running it over and it's gonna</font>

326
00:11:58,730 --> 00:12:02,780
take a swatch of<font color="#E5E5E5"> nearby pixels and it's</font>

327
00:12:01,010 --> 00:12:04,340
going<font color="#CCCCCC"> to multiply it against a kernel</font>

328
00:12:02,780 --> 00:12:06,770
<font color="#E5E5E5">the kernel is what is controlled by the</font>

329
00:12:04,340 --> 00:12:08,180
attacker<font color="#CCCCCC"> and then it's going to</font><font color="#E5E5E5"> sum up</font>

330
00:12:06,770 --> 00:12:10,850
the result of<font color="#E5E5E5"> that multiplication and</font>

331
00:12:08,180 --> 00:12:12,620
set that<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the new pixel value so the</font>

332
00:12:10,850 --> 00:12:14,450
<font color="#E5E5E5">sorts patch in this case is the unknown</font>

333
00:12:12,620 --> 00:12:15,530
<font color="#E5E5E5">data of some sort and</font><font color="#CCCCCC"> we as</font><font color="#E5E5E5"> the attacker</font>

334
00:12:14,450 --> 00:12:17,540
I've set the kernel to be some

335
00:12:15,530 --> 00:12:20,360
suspiciously small<font color="#E5E5E5"> floating-point values</font>

336
00:12:17,540 --> 00:12:21,920
<font color="#E5E5E5">and so there's gonna be two</font><font color="#CCCCCC"> kind of sets</font>

337
00:12:20,360 --> 00:12:24,260
of math that<font color="#CCCCCC"> occur the first</font><font color="#E5E5E5"> is this</font>

338
00:12:21,920 --> 00:12:26,689
multiplication<font color="#CCCCCC"> and let's</font><font color="#E5E5E5"> pretend that</font>

339
00:12:24,260 --> 00:12:29,240
<font color="#CCCCCC">our pixel data czar just</font><font color="#E5E5E5"> one or zero</font><font color="#CCCCCC"> for</font>

340
00:12:26,690 --> 00:12:31,070
this case you're either going<font color="#E5E5E5"> to be</font>

341
00:12:29,240 --> 00:12:32,300
multiplying 1<font color="#CCCCCC"> times</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> subnormal value</font>

342
00:12:31,070 --> 00:12:33,920
a bunch of times or you're gonna be

343
00:12:32,300 --> 00:12:35,630
multiplying<font color="#E5E5E5"> 0 times a</font><font color="#CCCCCC"> subnormal</font><font color="#E5E5E5"> a bunch</font>

344
00:12:33,920 --> 00:12:37,520
of times now this does<font color="#CCCCCC"> actually turn out</font>

345
00:12:35,630 --> 00:12:39,050
<font color="#CCCCCC">to have a</font><font color="#E5E5E5"> timing</font><font color="#CCCCCC"> difference</font><font color="#E5E5E5"> but we don't</font>

346
00:12:37,520 --> 00:12:40,939
care<font color="#CCCCCC"> about</font><font color="#E5E5E5"> it very much</font><font color="#CCCCCC"> what we care</font>

347
00:12:39,050 --> 00:12:43,459
about<font color="#E5E5E5"> is that this fills temp up with</font>

348
00:12:40,940 --> 00:12:45,680
either<font color="#CCCCCC"> sub normal values or</font><font color="#E5E5E5"> zeros</font>

349
00:12:43,460 --> 00:12:48,350
because<font color="#E5E5E5"> then at the bottom we're gonna</font>

350
00:12:45,680 --> 00:12:51,199
sum everything up<font color="#E5E5E5"> and summing sub normal</font>

351
00:12:48,350 --> 00:12:53,240
<font color="#CCCCCC">plus sub normal versus</font><font color="#E5E5E5"> 0 plus</font><font color="#CCCCCC"> 0 is an</font>

352
00:12:51,200 --> 00:12:55,130
enormous timing<font color="#CCCCCC"> side-channel and we do</font>

353
00:12:53,240 --> 00:12:56,660
<font color="#CCCCCC">this as many times as we want</font><font color="#E5E5E5"> because we</font>

354
00:12:55,130 --> 00:12:59,689
simply expand our pixel as big as we

355
00:12:56,660 --> 00:13:01,819
need<font color="#E5E5E5"> in our case 200 by 200 pixels and</font>

356
00:12:59,690 --> 00:13:04,070
we're<font color="#CCCCCC"> able to time the running of</font><font color="#E5E5E5"> this</font>

357
00:13:01,820 --> 00:13:06,440
and we get<font color="#E5E5E5"> out about a 20 millisecond</font><font color="#CCCCCC"> on</font>

358
00:13:04,070 --> 00:13:07,790
most machines<font color="#E5E5E5"> difference and that's</font>

359
00:13:06,440 --> 00:13:10,600
measured<font color="#CCCCCC"> from</font><font color="#E5E5E5"> JavaScript with</font><font color="#CCCCCC"> a browser</font>

360
00:13:07,790 --> 00:13:13,280
<font color="#E5E5E5">running and all of the usual Gmail open</font>

361
00:13:10,600 --> 00:13:14,540
so this is again we're doing<font color="#CCCCCC"> this</font><font color="#E5E5E5"> attack</font>

362
00:13:13,280 --> 00:13:15,860
it's the same thing we just<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of</font>

363
00:13:14,540 --> 00:13:17,930
switched out the<font color="#E5E5E5"> filter and switched out</font>

364
00:13:15,860 --> 00:13:18,760
the<font color="#E5E5E5"> timing</font><font color="#CCCCCC"> and it's all based on</font><font color="#E5E5E5"> data</font>

365
00:13:17,930 --> 00:13:23,680
now rather than

366
00:13:18,760 --> 00:13:25,390
on code paths<font color="#E5E5E5"> so this is a not real time</font>

367
00:13:23,680 --> 00:13:28,229
<font color="#E5E5E5">but why would you want to do this well</font>

368
00:13:25,390 --> 00:13:30,340
maybe you want<font color="#CCCCCC"> to read some internal</font>

369
00:13:28,230 --> 00:13:31,840
websites<font color="#E5E5E5"> that you can't access</font>

370
00:13:30,340 --> 00:13:33,540
internally on an intranet<font color="#CCCCCC"> and you'd like</font>

371
00:13:31,840 --> 00:13:35,530
<font color="#E5E5E5">to read some pixels</font><font color="#CCCCCC"> from that</font><font color="#E5E5E5"> web page</font>

372
00:13:33,540 --> 00:13:37,660
<font color="#E5E5E5">Firefox currently</font><font color="#CCCCCC"> doesn't consider</font>

373
00:13:35,530 --> 00:13:38,920
running SVG filters over<font color="#E5E5E5"> foreign pixels</font>

374
00:13:37,660 --> 00:13:41,530
a violation of the<font color="#CCCCCC"> same-origin policy</font>

375
00:13:38,920 --> 00:13:43,500
<font color="#CCCCCC">and I think between</font><font color="#E5E5E5"> Paul stones work and</font>

376
00:13:41,530 --> 00:13:46,959
ours that really should change here

377
00:13:43,500 --> 00:13:48,580
<font color="#CCCCCC">cores or CSP or one of these standards</font>

378
00:13:46,960 --> 00:13:49,840
should be applied and computing over

379
00:13:48,580 --> 00:13:52,240
<font color="#CCCCCC">foreign pixels just really should not</font><font color="#E5E5E5"> be</font>

380
00:13:49,840 --> 00:13:53,230
<font color="#E5E5E5">allowed well what can you do with this</font>

381
00:13:52,240 --> 00:13:55,300
I'm not<font color="#CCCCCC"> gonna talk</font><font color="#E5E5E5"> a whole lot about</font>

382
00:13:53,230 --> 00:13:58,090
<font color="#E5E5E5">this but reading pixels is a little bit</font>

383
00:13:55,300 --> 00:13:59,650
boring<font color="#CCCCCC"> if you're</font><font color="#E5E5E5"> reading from other</font>

384
00:13:58,090 --> 00:14:01,360
origins<font color="#CCCCCC"> you can do things like</font>

385
00:13:59,650 --> 00:14:03,670
reconstruct characters<font color="#CCCCCC"> or other pages</font>

386
00:14:01,360 --> 00:14:05,050
lets you read user names and logins and

387
00:14:03,670 --> 00:14:07,030
anything that you can<font color="#E5E5E5"> I frame they can</font>

388
00:14:05,050 --> 00:14:10,000
read so<font color="#E5E5E5"> you can't read Facebook but it</font>

389
00:14:07,030 --> 00:14:11,680
doesn't matter<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit more subtly</font>

390
00:14:10,000 --> 00:14:13,840
though<font color="#E5E5E5"> we can read pixels from our own</font>

391
00:14:11,680 --> 00:14:15,189
origin<font color="#E5E5E5"> so there's an attack called</font>

392
00:14:13,840 --> 00:14:16,960
history sniffing which if you haven't

393
00:14:15,190 --> 00:14:19,540
<font color="#CCCCCC">heard</font><font color="#E5E5E5"> of it the</font><font color="#CCCCCC"> idea is that in history</font>

394
00:14:16,960 --> 00:14:21,820
<font color="#E5E5E5">sniffing you read the link color on a</font>

395
00:14:19,540 --> 00:14:24,099
<font color="#CCCCCC">webpage so you</font><font color="#E5E5E5"> as the attacker page make</font>

396
00:14:21,820 --> 00:14:25,240
a link to some other<font color="#E5E5E5"> page</font><font color="#CCCCCC"> and you're not</font>

397
00:14:24,100 --> 00:14:26,470
<font color="#E5E5E5">supposed to be able to read the link</font>

398
00:14:25,240 --> 00:14:27,400
<font color="#E5E5E5">color of that because</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> would tell</font>

399
00:14:26,470 --> 00:14:29,380
you whether<font color="#CCCCCC"> or</font><font color="#E5E5E5"> not the user has been</font>

400
00:14:27,400 --> 00:14:31,150
<font color="#E5E5E5">there before but we can just read the</font>

401
00:14:29,380 --> 00:14:32,560
<font color="#CCCCCC">link</font><font color="#E5E5E5"> color of</font><font color="#CCCCCC"> our own links using</font><font color="#E5E5E5"> this</font>

402
00:14:31,150 --> 00:14:36,850
attack and<font color="#E5E5E5"> then we know whether the user</font>

403
00:14:32,560 --> 00:14:38,469
<font color="#E5E5E5">has been there</font><font color="#CCCCCC"> ok so how do I avoid</font>

404
00:14:36,850 --> 00:14:39,790
problems with<font color="#E5E5E5"> floating point I've just</font>

405
00:14:38,470 --> 00:14:42,250
told you<font color="#CCCCCC"> that it's kind of a disaster</font>

406
00:14:39,790 --> 00:14:43,780
<font color="#CCCCCC">there's a lot of timing</font><font color="#E5E5E5"> problems and the</font>

407
00:14:42,250 --> 00:14:45,250
<font color="#E5E5E5">answer is don't use floating point if</font>

408
00:14:43,780 --> 00:14:48,880
you're writing security<font color="#CCCCCC"> critical code</font>

409
00:14:45,250 --> 00:14:50,800
and the phrase timing side-channel<font color="#E5E5E5"> has</font>

410
00:14:48,880 --> 00:14:53,020
ever occurred to anyone<font color="#E5E5E5"> in development</font><font color="#CCCCCC"> I</font>

411
00:14:50,800 --> 00:14:55,030
suggest not using<font color="#CCCCCC"> floating point there's</font>

412
00:14:53,020 --> 00:14:56,560
<font color="#E5E5E5">undo predictable results</font><font color="#CCCCCC"> you have these</font>

413
00:14:55,030 --> 00:14:58,390
enormous<font color="#E5E5E5"> timing variations I don't</font><font color="#CCCCCC"> even</font>

414
00:14:56,560 --> 00:14:59,530
show you all<font color="#CCCCCC"> of the graphs</font><font color="#E5E5E5"> for that</font><font color="#CCCCCC"> and</font>

415
00:14:58,390 --> 00:15:01,569
it turns<font color="#E5E5E5"> out to be extraordinarily</font>

416
00:14:59,530 --> 00:15:04,180
processor and build<font color="#E5E5E5"> dependent</font><font color="#CCCCCC"> you also</font>

417
00:15:01,570 --> 00:15:06,310
get a fingerprint out of it<font color="#CCCCCC"> if you need</font>

418
00:15:04,180 --> 00:15:08,770
non integer math for some reason we

419
00:15:06,310 --> 00:15:10,599
<font color="#E5E5E5">suggest using fixed point which entirely</font>

420
00:15:08,770 --> 00:15:12,790
coincidentally brings me to the final

421
00:15:10,600 --> 00:15:15,520
<font color="#E5E5E5">contribution of our paper which is Lib</font><font color="#CCCCCC"> F</font>

422
00:15:12,790 --> 00:15:18,730
<font color="#CCCCCC">TFP which is a fixed</font><font color="#E5E5E5"> time fixed point</font>

423
00:15:15,520 --> 00:15:20,650
math library it's a<font color="#CCCCCC"> sea library that</font>

424
00:15:18,730 --> 00:15:22,540
implements most math functions that you

425
00:15:20,650 --> 00:15:24,730
<font color="#E5E5E5">would care about</font><font color="#CCCCCC"> AD by transcendentals</font>

426
00:15:22,540 --> 00:15:26,349
etc<font color="#E5E5E5"> it's variable width when you compile</font>

427
00:15:24,730 --> 00:15:28,420
the library you can decide how<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want</font>

428
00:15:26,350 --> 00:15:31,360
to<font color="#E5E5E5"> split</font><font color="#CCCCCC"> up your</font><font color="#E5E5E5"> fractional and integer</font>

429
00:15:28,420 --> 00:15:32,319
bits it's 64 bit it requires<font color="#E5E5E5"> 2 bits for</font>

430
00:15:31,360 --> 00:15:34,060
<font color="#E5E5E5">flags and</font>

431
00:15:32,320 --> 00:15:35,680
probably<font color="#E5E5E5"> constant time well I say</font>

432
00:15:34,060 --> 00:15:38,859
<font color="#E5E5E5">probably constant time we tried really</font>

433
00:15:35,680 --> 00:15:40,540
hard<font color="#CCCCCC"> techniques we used</font><font color="#E5E5E5"> no</font>

434
00:15:38,860 --> 00:15:42,370
<font color="#CCCCCC">data-dependent jumps this means avoiding</font>

435
00:15:40,540 --> 00:15:44,770
<font color="#E5E5E5">things like double ampersand it means</font>

436
00:15:42,370 --> 00:15:46,750
using a lot of<font color="#CCCCCC"> preprocessor macros you</font>

437
00:15:44,770 --> 00:15:49,150
can't use instructions like<font color="#E5E5E5"> div you get</font>

438
00:15:46,750 --> 00:15:50,680
to re-implement division yourself<font color="#CCCCCC"> you</font>

439
00:15:49,150 --> 00:15:53,079
can't have<font color="#CCCCCC"> look-up tables do the</font><font color="#E5E5E5"> caching</font>

440
00:15:50,680 --> 00:15:56,109
<font color="#E5E5E5">and memory accesses</font><font color="#CCCCCC"> but we can't be 100%</font>

441
00:15:53,080 --> 00:15:57,700
sure<font color="#E5E5E5"> of the the constant nosov our code</font>

442
00:15:56,110 --> 00:16:00,040
and this<font color="#CCCCCC"> is where I'd really</font><font color="#E5E5E5"> love to</font>

443
00:15:57,700 --> 00:16:01,600
<font color="#CCCCCC">talk to</font><font color="#E5E5E5"> Intel some more</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> they're</font>

444
00:16:00,040 --> 00:16:05,380
<font color="#E5E5E5">totally unwilling</font><font color="#CCCCCC"> to release</font><font color="#E5E5E5"> information</font>

445
00:16:01,600 --> 00:16:07,450
about<font color="#CCCCCC"> the data dependency timing and</font>

446
00:16:05,380 --> 00:16:09,280
honestly the timing in general of many

447
00:16:07,450 --> 00:16:11,590
of their instructions<font color="#E5E5E5"> and we can't</font>

448
00:16:09,280 --> 00:16:13,150
exhaustively test this<font color="#E5E5E5"> so our library</font>

449
00:16:11,590 --> 00:16:14,650
uses<font color="#E5E5E5"> things that we think are constant</font>

450
00:16:13,150 --> 00:16:17,290
<font color="#CCCCCC">time and</font><font color="#E5E5E5"> we spent a long time testing</font>

451
00:16:14,650 --> 00:16:18,970
but<font color="#CCCCCC"> we can't be sure</font><font color="#E5E5E5"> of it and really</font>

452
00:16:17,290 --> 00:16:20,709
any time you write<font color="#E5E5E5"> constant time code in</font>

453
00:16:18,970 --> 00:16:22,390
this kind of a case you're<font color="#E5E5E5"> battling</font>

454
00:16:20,710 --> 00:16:23,950
against every future processor and every

455
00:16:22,390 --> 00:16:27,550
future compiler<font color="#CCCCCC"> that your users</font><font color="#E5E5E5"> are ever</font>

456
00:16:23,950 --> 00:16:29,550
going<font color="#CCCCCC"> to use so here are some some brief</font>

457
00:16:27,550 --> 00:16:31,510
statistics on on<font color="#E5E5E5"> Libya left</font><font color="#CCCCCC"> EFP</font>

458
00:16:29,550 --> 00:16:33,310
comparing to us<font color="#CCCCCC"> two hardware which is</font>

459
00:16:31,510 --> 00:16:34,450
<font color="#CCCCCC">the SSE column isn't</font><font color="#E5E5E5"> exactly fair</font>

460
00:16:33,310 --> 00:16:37,530
<font color="#CCCCCC">because we're a software implementation</font>

461
00:16:34,450 --> 00:16:40,810
<font color="#E5E5E5">and comparing us to</font><font color="#CCCCCC"> M</font><font color="#E5E5E5"> PFR which is a</font>

462
00:16:37,530 --> 00:16:42,550
infinite precision<font color="#E5E5E5"> representation in</font>

463
00:16:40,810 --> 00:16:45,569
<font color="#E5E5E5">software is also a little bit unfair</font>

464
00:16:42,550 --> 00:16:48,699
<font color="#CCCCCC">because we're fixed precision and we use</font>

465
00:16:45,570 --> 00:16:50,560
<font color="#E5E5E5">we use various approximations but we</font>

466
00:16:48,700 --> 00:16:52,390
feel<font color="#E5E5E5"> that if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> really need some fixed</font>

467
00:16:50,560 --> 00:16:54,790
point<font color="#E5E5E5"> math you need</font><font color="#CCCCCC"> non integer math</font>

468
00:16:52,390 --> 00:16:55,870
that<font color="#E5E5E5"> Lib</font><font color="#CCCCCC"> FTO P is worth checking out</font><font color="#E5E5E5"> and</font>

469
00:16:54,790 --> 00:16:59,410
we'd<font color="#E5E5E5"> love to talk</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> people who</font><font color="#CCCCCC"> are</font>

470
00:16:55,870 --> 00:17:01,210
<font color="#CCCCCC">interested</font><font color="#E5E5E5"> using it so</font><font color="#CCCCCC"> takeaways</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> um</font>

471
00:16:59,410 --> 00:17:03,430
<font color="#E5E5E5">if you're writing security</font><font color="#CCCCCC"> critical code</font>

472
00:17:01,210 --> 00:17:05,170
again I want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> reiterate this don't use</font>

473
00:17:03,430 --> 00:17:07,060
<font color="#E5E5E5">floating-point if you can avoid it just</font>

474
00:17:05,170 --> 00:17:08,860
it's there's a<font color="#CCCCCC"> lot of pitfalls there</font>

475
00:17:07,060 --> 00:17:13,089
<font color="#E5E5E5">there's a lot of problems and we all</font>

476
00:17:08,859 --> 00:17:14,859
haven't read<font color="#CCCCCC"> Goldberg's paper writing</font>

477
00:17:13,089 --> 00:17:16,329
provably constant<font color="#CCCCCC"> time code turned out</font>

478
00:17:14,859 --> 00:17:18,339
to be extraordinarily<font color="#E5E5E5"> difficult</font><font color="#CCCCCC"> I</font>

479
00:17:16,329 --> 00:17:20,290
recommend reading<font color="#E5E5E5"> our paper for some</font>

480
00:17:18,339 --> 00:17:21,819
background on<font color="#E5E5E5"> some of the things we had</font>

481
00:17:20,290 --> 00:17:23,409
to<font color="#E5E5E5"> go through</font><font color="#CCCCCC"> and again</font><font color="#E5E5E5"> Intel some help</font>

482
00:17:21,819 --> 00:17:25,958
here would<font color="#E5E5E5"> be great</font>

483
00:17:23,410 --> 00:17:27,910
and lastly<font color="#E5E5E5"> browsers</font><font color="#CCCCCC"> should really be</font>

484
00:17:25,959 --> 00:17:30,460
requiring cores or CSP<font color="#CCCCCC"> for computing</font>

485
00:17:27,910 --> 00:17:32,350
over foreign data like pixels at this

486
00:17:30,460 --> 00:17:33,540
point I think<font color="#E5E5E5"> that's kind of a foregone</font>

487
00:17:32,350 --> 00:17:36,370
conclusion

488
00:17:33,540 --> 00:17:38,260
<font color="#E5E5E5">so future work at Firefox</font><font color="#CCCCCC"> light-attack</font><font color="#E5E5E5"> I</font>

489
00:17:36,370 --> 00:17:40,060
showed you it doesn't work<font color="#CCCCCC"> any</font><font color="#E5E5E5"> more the</font>

490
00:17:38,260 --> 00:17:42,190
<font color="#E5E5E5">attacks stopped working on version 27</font>

491
00:17:40,060 --> 00:17:43,780
<font color="#E5E5E5">not because</font><font color="#CCCCCC"> of an intentional patch to</font>

492
00:17:42,190 --> 00:17:46,210
fix<font color="#E5E5E5"> it but because</font><font color="#CCCCCC"> they switched to the</font>

493
00:17:43,780 --> 00:17:48,820
<font color="#E5E5E5">GPU and at that time GPUs did</font>

494
00:17:46,210 --> 00:17:50,980
<font color="#CCCCCC">support subnormal floating-point</font><font color="#E5E5E5"> however</font>

495
00:17:48,820 --> 00:17:52,360
<font color="#CCCCCC">nvidia engineers have stated that</font><font color="#E5E5E5"> they</font>

496
00:17:50,980 --> 00:17:55,929
do now supports a mobile<font color="#CCCCCC"> floating-point</font>

497
00:17:52,360 --> 00:17:58,360
<font color="#CCCCCC">and great for</font><font color="#E5E5E5"> us there's a</font><font color="#CCCCCC"> slowdown on</font>

498
00:17:55,929 --> 00:18:00,220
computing<font color="#CCCCCC"> subnormal floating-point but</font>

499
00:17:58,360 --> 00:18:01,539
only in some cases and we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> been</font>

500
00:18:00,220 --> 00:18:03,159
able to adapt the attack to that

501
00:18:01,539 --> 00:18:04,779
additionally we only looked at

502
00:18:03,159 --> 00:18:06,909
floating-point<font color="#E5E5E5"> there's obviously a tons</font>

503
00:18:04,779 --> 00:18:09,279
of integer arithmetic instructions and

504
00:18:06,909 --> 00:18:10,869
we would love to<font color="#CCCCCC"> look at what we</font><font color="#E5E5E5"> can</font>

505
00:18:09,279 --> 00:18:12,669
break with those because<font color="#CCCCCC"> we know that a</font>

506
00:18:10,869 --> 00:18:16,178
large<font color="#E5E5E5"> number</font><font color="#CCCCCC"> of them</font><font color="#E5E5E5"> are not constant</font>

507
00:18:12,669 --> 00:18:18,399
time<font color="#E5E5E5"> and are used in real libraries</font><font color="#CCCCCC"> with</font>

508
00:18:16,179 --> 00:18:20,169
that<font color="#CCCCCC"> I'd love to take</font><font color="#E5E5E5"> questions you can</font>

509
00:18:18,399 --> 00:18:22,268
email me there or contact any others and

510
00:18:20,169 --> 00:18:33,279
<font color="#CCCCCC">Lib</font><font color="#E5E5E5"> FTF</font><font color="#CCCCCC"> P is available on github</font><font color="#E5E5E5"> right</font>

511
00:18:22,269 --> 00:18:37,090
now so go for it questions no thanks

512
00:18:33,279 --> 00:18:39,929
this<font color="#CCCCCC"> is a great fascinating talk coming</font>

513
00:18:37,090 --> 00:18:42,610
from<font color="#E5E5E5"> the usability</font><font color="#CCCCCC"> of security viewpoint</font>

514
00:18:39,929 --> 00:18:47,230
<font color="#CCCCCC">one of the last things you said is okay</font>

515
00:18:42,610 --> 00:18:50,289
we have this<font color="#E5E5E5"> lib fixed point yes all</font>

516
00:18:47,230 --> 00:18:52,360
these<font color="#E5E5E5"> things but division actually is</font>

517
00:18:50,289 --> 00:18:54,279
<font color="#E5E5E5">variable time so if you we are not</font>

518
00:18:52,360 --> 00:18:57,158
<font color="#E5E5E5">including that if you need it just</font><font color="#CCCCCC"> write</font>

519
00:18:54,279 --> 00:18:58,919
yourself<font color="#E5E5E5"> division is in</font><font color="#CCCCCC"> our library I</font>

520
00:18:57,159 --> 00:19:01,419
meant that we had<font color="#CCCCCC"> to reimplementation</font>

521
00:18:58,919 --> 00:19:02,889
<font color="#E5E5E5">second we had to re-implement division</font>

522
00:19:01,419 --> 00:19:04,720
we couldn't use division instruction<font color="#CCCCCC"> oh</font>

523
00:19:02,889 --> 00:19:07,928
you have implemented<font color="#CCCCCC"> oh yeah we have</font>

524
00:19:04,720 --> 00:19:13,450
sorry<font color="#CCCCCC"> if you are writing is you have to</font>

525
00:19:07,929 --> 00:19:15,399
rebuild it<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> went in depth on this</font>

526
00:19:13,450 --> 00:19:17,110
one attack with pixels a<font color="#CCCCCC"> bit of you guys</font>

527
00:19:15,399 --> 00:19:21,100
explored other places where<font color="#E5E5E5"> you might</font>

528
00:19:17,110 --> 00:19:22,658
yes<font color="#CCCCCC"> so we do have another attack we have</font>

529
00:19:21,100 --> 00:19:23,980
<font color="#CCCCCC">an attack on a differentially private</font>

530
00:19:22,659 --> 00:19:25,629
database which I didn't<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about right</font>

531
00:19:23,980 --> 00:19:29,409
in here<font color="#E5E5E5"> today I'll talk</font><font color="#CCCCCC"> about</font>

532
00:19:25,629 --> 00:19:30,399
differential<font color="#E5E5E5"> privacy but we recommend</font>

533
00:19:29,409 --> 00:19:31,509
looking at<font color="#CCCCCC"> that as</font><font color="#E5E5E5"> well it's an</font>

534
00:19:30,399 --> 00:19:32,918
interesting attack<font color="#E5E5E5"> um unfortunately</font>

535
00:19:31,509 --> 00:19:34,389
<font color="#CCCCCC">there aren't actually a huge number</font><font color="#E5E5E5"> of</font>

536
00:19:32,919 --> 00:19:35,730
applications<font color="#CCCCCC"> for</font><font color="#E5E5E5"> floating-point because</font>

537
00:19:34,389 --> 00:19:37,418
there's not that<font color="#E5E5E5"> many things that do</font>

538
00:19:35,730 --> 00:19:39,970
large amounts of floating-point

539
00:19:37,419 --> 00:19:41,860
computation if people have<font color="#E5E5E5"> other things</font>

540
00:19:39,970 --> 00:19:43,419
<font color="#E5E5E5">that do use floating point math that</font>

541
00:19:41,860 --> 00:19:46,110
they've spotted we recommend<font color="#CCCCCC"> looking to</font>

542
00:19:43,419 --> 00:19:54,669
see whether this type of attack applies

543
00:19:46,110 --> 00:19:58,149
<font color="#E5E5E5">all right</font><font color="#CCCCCC"> oh one more</font><font color="#E5E5E5"> question all right</font>

544
00:19:54,669 --> 00:20:00,519
<font color="#CCCCCC">Ruby</font><font color="#E5E5E5"> Lee from Princeton I'm sorry</font><font color="#CCCCCC"> to</font>

545
00:19:58,149 --> 00:20:03,629
this book disappointing<font color="#CCCCCC"> overview but</font>

546
00:20:00,519 --> 00:20:08,019
most of hardware performance

547
00:20:03,629 --> 00:20:11,168
<font color="#E5E5E5">optimization is based on</font><font color="#CCCCCC"> a fast path in</font>

548
00:20:08,019 --> 00:20:13,419
a slow path<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> think about it it's</font>

549
00:20:11,169 --> 00:20:16,809
really<font color="#E5E5E5"> no easy way to optimize</font>

550
00:20:13,419 --> 00:20:20,019
<font color="#E5E5E5">performance except making the frequent</font>

551
00:20:16,809 --> 00:20:23,320
<font color="#CCCCCC">path fast</font><font color="#E5E5E5"> and the infrequent path slow</font>

552
00:20:20,019 --> 00:20:26,350
so there's all over the place in

553
00:20:23,320 --> 00:20:29,470
<font color="#CCCCCC">Hardware performance optimization is</font>

554
00:20:26,350 --> 00:20:32,498
feature so the issue is is extremely

555
00:20:29,470 --> 00:20:36,369
<font color="#CCCCCC">easy for</font><font color="#E5E5E5"> hardware vendors to make</font>

556
00:20:32,499 --> 00:20:39,149
<font color="#E5E5E5">constant time operations</font><font color="#CCCCCC"> the question is</font>

557
00:20:36,369 --> 00:20:41,610
how much performance<font color="#CCCCCC"> are you willing to</font>

558
00:20:39,149 --> 00:20:46,469
to suffer

559
00:20:41,610 --> 00:20:49,649
for this<font color="#E5E5E5"> and so one new line of research</font>

560
00:20:46,470 --> 00:20:52,640
<font color="#E5E5E5">that I've</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> trying to promote is to</font>

561
00:20:49,650 --> 00:20:55,800
do<font color="#CCCCCC"> Hardware</font><font color="#E5E5E5"> optimization through</font>

562
00:20:52,640 --> 00:20:59,990
randomization rather than this approach

563
00:20:55,800 --> 00:21:05,159
of<font color="#E5E5E5"> frequent operation fast and</font>

564
00:20:59,990 --> 00:21:08,940
infrequent<font color="#E5E5E5"> operation slow</font><font color="#CCCCCC"> ok so if there</font>

565
00:21:05,160 --> 00:21:11,760
are randomization security experts in

566
00:21:08,940 --> 00:21:14,550
the room we would very much like to

567
00:21:11,760 --> 00:21:17,970
<font color="#CCCCCC">develop this new theory of hardware</font>

568
00:21:14,550 --> 00:21:20,370
design<font color="#E5E5E5"> that is completely</font><font color="#CCCCCC"> different from</font>

569
00:21:17,970 --> 00:21:23,730
<font color="#CCCCCC">before</font><font color="#E5E5E5"> but we if we're gonna use</font>

570
00:21:20,370 --> 00:21:27,090
<font color="#E5E5E5">randomization for</font><font color="#CCCCCC"> Hardware</font><font color="#E5E5E5"> optimization</font>

571
00:21:23,730 --> 00:21:30,630
<font color="#E5E5E5">it must not sacrifice performance and we</font>

572
00:21:27,090 --> 00:21:33,419
think that's entirely doable so please

573
00:21:30,630 --> 00:21:37,170
do do you want to finish<font color="#CCCCCC"> that off with a</font>

574
00:21:33,420 --> 00:21:40,200
question<font color="#E5E5E5"> or</font><font color="#CCCCCC"> no I</font><font color="#E5E5E5"> wanted to</font><font color="#CCCCCC"> make that</font>

575
00:21:37,170 --> 00:21:45,390
comment because I think<font color="#E5E5E5"> there's no</font><font color="#CCCCCC"> other</font>

576
00:21:40,200 --> 00:21:48,240
way<font color="#E5E5E5"> to prevent a side channel covert</font>

577
00:21:45,390 --> 00:21:52,050
<font color="#E5E5E5">channel with any kind of power or</font>

578
00:21:48,240 --> 00:21:54,090
performance optimization<font color="#CCCCCC"> I think so</font>

579
00:21:52,050 --> 00:21:55,320
there have been<font color="#E5E5E5"> a number of processors</font>

580
00:21:54,090 --> 00:21:57,899
<font color="#CCCCCC">that I unfortunately cannot remember</font><font color="#E5E5E5"> off</font>

581
00:21:55,320 --> 00:22:00,240
the top of my head that<font color="#E5E5E5"> have allowed the</font>

582
00:21:57,900 --> 00:22:03,630
user to disable certain fast path

583
00:22:00,240 --> 00:22:06,300
optimizations<font color="#CCCCCC"> and just drop</font><font color="#E5E5E5"> to constant</font>

584
00:22:03,630 --> 00:22:08,220
slow path and I<font color="#E5E5E5"> think that for</font><font color="#CCCCCC"> some</font>

585
00:22:06,300 --> 00:22:09,600
<font color="#E5E5E5">cases this would be actually</font><font color="#CCCCCC"> pretty</font>

586
00:22:08,220 --> 00:22:11,250
valuable<font color="#E5E5E5"> and again</font><font color="#CCCCCC"> for example if the</font>

587
00:22:09,600 --> 00:22:12,689
Intel would you be<font color="#E5E5E5"> willing to commit</font><font color="#CCCCCC"> to</font>

588
00:22:11,250 --> 00:22:15,510
certain<font color="#E5E5E5"> things being saying like for</font>

589
00:22:12,690 --> 00:22:17,130
<font color="#CCCCCC">example</font><font color="#E5E5E5"> if you multiply a 32 by a 32</font>

590
00:22:15,510 --> 00:22:18,540
it's<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be constant time that would</font>

591
00:22:17,130 --> 00:22:20,850
be really great<font color="#CCCCCC"> for a lot of these</font>

592
00:22:18,540 --> 00:22:22,379
things all<font color="#CCCCCC"> right all right well what</font>

593
00:22:20,850 --> 00:22:24,389
we're<font color="#CCCCCC"> out of time</font><font color="#E5E5E5"> so let's take it</font>

594
00:22:22,380 --> 00:22:27,440
offline<font color="#E5E5E5"> sounds like a fascinating and</font>

595
00:22:24,390 --> 00:22:29,820
longer discussion than we have<font color="#E5E5E5"> time for</font>

596
00:22:27,440 --> 00:22:31,650
did you run in the cloud<font color="#E5E5E5"> we did not run</font>

597
00:22:29,820 --> 00:22:34,250
it in the cloud<font color="#CCCCCC"> but we ran it on</font><font color="#E5E5E5"> a very</font>

598
00:22:31,650 --> 00:22:34,250
loaded<font color="#E5E5E5"> system</font>

599
00:22:34,800 --> 00:22:40,139
well with that why<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> we thank all of</font>

600
00:22:36,940 --> 00:22:40,140
the<font color="#E5E5E5"> speakers recession</font>

