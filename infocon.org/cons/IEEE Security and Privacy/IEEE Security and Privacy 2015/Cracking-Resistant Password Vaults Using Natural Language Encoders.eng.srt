1
00:00:00,089 --> 00:00:04,980
good afternoon everyone I'm going<font color="#E5E5E5"> to</font>

2
00:00:03,029 --> 00:00:09,650
tell<font color="#CCCCCC"> you how</font><font color="#E5E5E5"> to create a password vault</font>

3
00:00:04,980 --> 00:00:12,769
that cannot be cracked offline so

4
00:00:09,650 --> 00:00:14,940
nowadays users has numerous online

5
00:00:12,769 --> 00:00:16,470
accounts and remembering all the

6
00:00:14,940 --> 00:00:18,810
passwords for each of the accounts is a

7
00:00:16,470 --> 00:00:22,529
serious burden that's why experts

8
00:00:18,810 --> 00:00:24,810
suggest using password vault so she can

9
00:00:22,529 --> 00:00:27,210
show<font color="#CCCCCC"> our user can collect all of our</font>

10
00:00:24,810 --> 00:00:29,880
passwords in a vault and encrypt it

11
00:00:27,210 --> 00:00:32,549
using a master password the vault

12
00:00:29,880 --> 00:00:34,440
service also allow the encrypted vol to

13
00:00:32,549 --> 00:00:36,300
be<font color="#E5E5E5"> stored in a cloud storage so that</font>

14
00:00:34,440 --> 00:00:38,370
from now on she only need to remember

15
00:00:36,300 --> 00:00:40,110
the master<font color="#E5E5E5"> password and she can access</font>

16
00:00:38,370 --> 00:00:43,919
all of our accounts from all of our

17
00:00:40,110 --> 00:00:45,809
devices there are tons<font color="#E5E5E5"> of password</font>

18
00:00:43,920 --> 00:00:47,850
managers or password vault services out

19
00:00:45,809 --> 00:00:50,968
there in the market and<font color="#E5E5E5"> this shows that</font>

20
00:00:47,850 --> 00:00:52,739
there is increasing popularity of usage

21
00:00:50,969 --> 00:00:54,329
of password vault and this also raised

22
00:00:52,739 --> 00:00:58,288
the<font color="#CCCCCC"> question how secure is our password</font>

23
00:00:54,329 --> 00:01:00,719
bonds so the specific threat model that

24
00:00:58,289 --> 00:01:03,390
we are considering is what if an

25
00:01:00,719 --> 00:01:07,889
attacker gets hold of the vault<font color="#CCCCCC"> cipher</font>

26
00:01:03,390 --> 00:01:09,899
<font color="#CCCCCC">text I the attacker can obtain this</font>

27
00:01:07,889 --> 00:01:12,859
<font color="#E5E5E5">ciphertext either by compromising the</font>

28
00:01:09,899 --> 00:01:15,450
server where the vault is<font color="#CCCCCC"> to saint or</font>

29
00:01:12,859 --> 00:01:19,919
fra by exfiltrating from the user's

30
00:01:15,450 --> 00:01:22,439
machine so it apparently it feels that

31
00:01:19,920 --> 00:01:23,880
<font color="#E5E5E5">okay the vault is encrypted so the</font>

32
00:01:22,439 --> 00:01:26,669
attacker should not learn what is the

33
00:01:23,880 --> 00:01:28,439
valuable data inside it but what<font color="#E5E5E5"> the</font>

34
00:01:26,670 --> 00:01:31,889
attacker can do he can mount an offline

35
00:01:28,439 --> 00:01:34,038
<font color="#CCCCCC">brute-force attack against the world so</font>

36
00:01:31,889 --> 00:01:36,810
he will try to decrypt the world using

37
00:01:34,039 --> 00:01:40,020
<font color="#E5E5E5">his bunch of master password guesses and</font>

38
00:01:36,810 --> 00:01:42,240
the way normal traditional encryption

39
00:01:40,020 --> 00:01:44,848
scheme works the output<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

40
00:01:42,240 --> 00:01:49,229
decryption will be a failure or<font color="#CCCCCC"> a junk</font>

41
00:01:44,849 --> 00:01:50,939
if the<font color="#CCCCCC"> gas is wrong and the moment he is</font>

42
00:01:49,229 --> 00:01:53,009
able to<font color="#E5E5E5"> guess the correct master</font>

43
00:01:50,939 --> 00:01:55,139
password the decryption will output a

44
00:01:53,009 --> 00:01:57,599
legitimate print plain text which is

45
00:01:55,139 --> 00:01:58,949
<font color="#E5E5E5">very easy to say</font><font color="#CCCCCC"> that okay I have got</font>

46
00:01:57,599 --> 00:02:02,700
the correct master password and this is

47
00:01:58,950 --> 00:02:05,880
the password vault so the total run time

48
00:02:02,700 --> 00:02:08,549
of the work<font color="#CCCCCC"> that the total computational</font>

49
00:02:05,880 --> 00:02:10,560
effort of the attacker is the number of

50
00:02:08,549 --> 00:02:13,110
different attempts we call this offline

51
00:02:10,560 --> 00:02:13,700
work because<font color="#E5E5E5"> that I do not doesn't need</font>

52
00:02:13,110 --> 00:02:17,660
to

53
00:02:13,700 --> 00:02:21,768
go contact any server now the question

54
00:02:17,660 --> 00:02:24,709
<font color="#CCCCCC">is how easy</font><font color="#E5E5E5"> to guess a masturbar my</font>

55
00:02:21,769 --> 00:02:26,269
master password ok so the studies shows

56
00:02:24,709 --> 00:02:28,160
the seventy percent of the human chosen

57
00:02:26,269 --> 00:02:31,430
passwords can be<font color="#E5E5E5"> tracked less than a</font>

58
00:02:28,160 --> 00:02:33,349
billion attempt<font color="#CCCCCC"> ok and the</font><font color="#E5E5E5"> bottom line</font>

59
00:02:31,430 --> 00:02:34,819
<font color="#E5E5E5">is if</font><font color="#CCCCCC"> you lose your ball today most</font>

60
00:02:33,349 --> 00:02:39,619
likely your<font color="#CCCCCC"> vault gonna be cracked by</font>

61
00:02:34,819 --> 00:02:41,899
tomorrow so so what<font color="#E5E5E5"> we we are trying to</font>

62
00:02:39,620 --> 00:02:44,900
achieve that how can you<font color="#E5E5E5"> stop</font><font color="#CCCCCC"> the target</font>

63
00:02:41,900 --> 00:02:46,910
from cracking the vault offline and the

64
00:02:44,900 --> 00:02:48,830
way we will<font color="#E5E5E5"> achieve this by using decoy</font>

65
00:02:46,910 --> 00:02:52,220
techniques this idea<font color="#CCCCCC"> was first</font>

66
00:02:48,830 --> 00:02:55,310
introduced by boo<font color="#CCCCCC"> zeinab</font><font color="#E5E5E5"> Bernstein bone</font>

67
00:02:52,220 --> 00:02:57,590
and bone a they proposed a new vault

68
00:02:55,310 --> 00:02:59,140
service called camouflage our first

69
00:02:57,590 --> 00:03:02,720
contributions will be to show that

70
00:02:59,140 --> 00:03:06,048
camouflage<font color="#CCCCCC"> maeda create the security in</font>

71
00:03:02,720 --> 00:03:08,239
many important cases we will move on and

72
00:03:06,049 --> 00:03:10,790
<font color="#CCCCCC">we will propose a new mechanism called</font>

73
00:03:08,239 --> 00:03:12,980
natural language encoded and<font color="#E5E5E5"> thereby</font>

74
00:03:10,790 --> 00:03:15,590
<font color="#E5E5E5">using honey encryption on Topham</font>

75
00:03:12,980 --> 00:03:18,470
password vault and make it uncrackable

76
00:03:15,590 --> 00:03:20,090
offline will create a whole full vault

77
00:03:18,470 --> 00:03:21,530
service using this honey encryption and

78
00:03:20,090 --> 00:03:25,069
natural language encoder we call the

79
00:03:21,530 --> 00:03:26,930
call it no crack so first we<font color="#E5E5E5"> will</font>

80
00:03:25,069 --> 00:03:29,358
describe how what is<font color="#CCCCCC"> the problem with</font>

81
00:03:26,930 --> 00:03:32,030
camouflage how camouflage works so

82
00:03:29,359 --> 00:03:34,850
careful as is a pretty nice trick so

83
00:03:32,030 --> 00:03:37,010
they start they not<font color="#CCCCCC"> only encrypt the</font>

84
00:03:34,850 --> 00:03:39,590
normal vault they create a bunch of

85
00:03:37,010 --> 00:03:41,989
decoy bolts and deploy master passwords

86
00:03:39,590 --> 00:03:44,870
encrypt each of the vaults using the

87
00:03:41,989 --> 00:03:46,850
corresponding master password and this

88
00:03:44,870 --> 00:03:49,340
whole list of cipher<font color="#E5E5E5"> they store whole</font>

89
00:03:46,850 --> 00:03:52,010
list of ciphertext so for our example we

90
00:03:49,340 --> 00:03:54,889
have three decoy passwords decoy vaults

91
00:03:52,010 --> 00:03:56,450
in real scenarios it will be something

92
00:03:54,889 --> 00:03:59,239
like thousand or ten thousand decoy

93
00:03:56,450 --> 00:04:01,518
words so when someone<font color="#E5E5E5"> will decrypt try</font>

94
00:03:59,239 --> 00:04:04,819
to decrypt a vault the decryption will

95
00:04:01,519 --> 00:04:06,560
output three things either if your guest

96
00:04:04,819 --> 00:04:08,480
master password is correct it will

97
00:04:06,560 --> 00:04:09,889
output the real world if the guest

98
00:04:08,480 --> 00:04:12,200
master password is one of the decoy

99
00:04:09,889 --> 00:04:15,530
<font color="#E5E5E5">master passwords it will output a decoy</font>

100
00:04:12,200 --> 00:04:17,510
vault or if the if your master password

101
00:04:15,530 --> 00:04:20,060
is neither the real nor the decoy it

102
00:04:17,510 --> 00:04:21,469
will output a junk so let's see<font color="#CCCCCC"> what</font>

103
00:04:20,060 --> 00:04:23,690
will<font color="#CCCCCC"> happen if attack a try to</font>

104
00:04:21,470 --> 00:04:27,620
<font color="#CCCCCC">brute-force a camouflage fault he will</font>

105
00:04:23,690 --> 00:04:29,570
not<font color="#CCCCCC"> only get a random junk as before</font>

106
00:04:27,620 --> 00:04:32,139
he will<font color="#CCCCCC"> also get some plausible looking</font>

107
00:04:29,570 --> 00:04:34,760
vault and might<font color="#E5E5E5"> be the real world also</font>

108
00:04:32,139 --> 00:04:37,400
so at the end of the game the attacker

109
00:04:34,760 --> 00:04:39,229
will get a bunch of plausible looking

110
00:04:37,400 --> 00:04:41,570
vaults and you will have<font color="#E5E5E5"> no idea which</font>

111
00:04:39,229 --> 00:04:44,630
you know this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the actual the the real</font>

112
00:04:41,570 --> 00:04:46,159
world so only option<font color="#E5E5E5"> to check an ideal</font>

113
00:04:44,630 --> 00:04:49,159
either to check the veracity of the

114
00:04:46,160 --> 00:04:50,690
vault he has to go online and try to<font color="#CCCCCC"> log</font>

115
00:04:49,160 --> 00:04:54,199
<font color="#CCCCCC">in</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> the credentials</font><font color="#E5E5E5"> inside the ball</font>

116
00:04:50,690 --> 00:04:55,969
and this will actually enforce that the

117
00:04:54,199 --> 00:04:57,919
attacker has to do<font color="#CCCCCC"> all the offline work</font>

118
00:04:55,970 --> 00:04:59,960
and then do some<font color="#CCCCCC"> online work</font>

119
00:04:57,919 --> 00:05:01,789
proportional to the number of decoy

120
00:04:59,960 --> 00:05:04,638
walls created at<font color="#CCCCCC"> the time of encryption</font>

121
00:05:01,789 --> 00:05:06,500
and the camouflage argues that<font color="#CCCCCC"> okay no</font>

122
00:05:04,639 --> 00:05:11,090
attack can do better than<font color="#CCCCCC"> this night</font>

123
00:05:06,500 --> 00:05:14,600
attack but we found a subtle

124
00:05:11,090 --> 00:05:16,250
vulnerability in the camouflage and the

125
00:05:14,600 --> 00:05:20,900
basically<font color="#E5E5E5"> the way they generate decoys</font>

126
00:05:16,250 --> 00:05:23,300
is all the decoy passwords officially

127
00:05:20,900 --> 00:05:27,830
the master password share the same

128
00:05:23,300 --> 00:05:29,960
template as the original one like here

129
00:05:27,830 --> 00:05:32,359
if the real master password<font color="#E5E5E5"> is</font><font color="#CCCCCC"> my pass</font>

130
00:05:29,960 --> 00:05:34,219
for all the decoy master password you

131
00:05:32,360 --> 00:05:37,580
will also have six characters and

132
00:05:34,220 --> 00:05:38,870
followed by digit what the attacker can

133
00:05:37,580 --> 00:05:40,820
exploit this information in the

134
00:05:38,870 --> 00:05:43,310
following way he will try to decrypt the

135
00:05:40,820 --> 00:05:46,159
camouflage vault as<font color="#E5E5E5"> previously with his</font>

136
00:05:43,310 --> 00:05:48,950
list of guesses he will probably most

137
00:05:46,160 --> 00:05:51,260
<font color="#CCCCCC">likely get junk initially but the moment</font>

138
00:05:48,950 --> 00:05:53,180
he gets a plausible looking vault he

139
00:05:51,260 --> 00:05:58,460
learns the mast<font color="#E5E5E5"> the structure of the</font>

140
00:05:53,180 --> 00:05:59,780
master password and now so now he can<font color="#CCCCCC"> go</font>

141
00:05:58,460 --> 00:06:02,690
online check<font color="#E5E5E5"> whether the vault is</font>

142
00:05:59,780 --> 00:06:05,599
<font color="#E5E5E5">correct or not if it is correct he</font><font color="#CCCCCC"> is</font>

143
00:06:02,690 --> 00:06:07,669
done if it is<font color="#E5E5E5"> not you can move on by</font>

144
00:06:05,599 --> 00:06:10,190
pruning out lot of the master password

145
00:06:07,669 --> 00:06:13,430
guesses that do not match this structure

146
00:06:10,190 --> 00:06:15,410
and this<font color="#E5E5E5"> actually we found out that this</font>

147
00:06:13,430 --> 00:06:19,490
actually gives a big speed up we

148
00:06:15,410 --> 00:06:23,060
simulated the the attack scenario using

149
00:06:19,490 --> 00:06:25,550
real password from the<font color="#E5E5E5"> real leak so for</font>

150
00:06:23,060 --> 00:06:27,650
for our test for example the we use the

151
00:06:25,550 --> 00:06:31,250
camouflage where you use<font color="#E5E5E5"> 10,000 decoys</font>

152
00:06:27,650 --> 00:06:36,200
and ideally it should the attacker

153
00:06:31,250 --> 00:06:38,240
should do all the offline work and 500

154
00:06:36,200 --> 00:06:41,400
at least at an average 500 online

155
00:06:38,240 --> 00:06:44,169
queries but what we found

156
00:06:41,400 --> 00:06:46,030
attacker can get the<font color="#CCCCCC"> gate to the</font><font color="#E5E5E5"> real</font>

157
00:06:44,169 --> 00:06:47,799
master password in half of<font color="#E5E5E5"> the effort</font>

158
00:06:46,030 --> 00:06:50,530
compared to the normal password based

159
00:06:47,800 --> 00:06:53,169
encryption schemes and the<font color="#E5E5E5"> online work</font>

160
00:06:50,530 --> 00:06:55,750
is also negligible<font color="#E5E5E5"> it's he just needs</font>

161
00:06:53,169 --> 00:07:00,070
only<font color="#CCCCCC"> 11 or length queries to find out</font>

162
00:06:55,750 --> 00:07:02,530
whether the vault<font color="#E5E5E5"> is real or not so the</font>

163
00:07:00,070 --> 00:07:04,570
<font color="#CCCCCC">situation</font><font color="#E5E5E5"> is passwords are very easy to</font>

164
00:07:02,530 --> 00:07:06,570
guess and password based encryption

165
00:07:04,570 --> 00:07:09,340
scheme cannot save our password bolts

166
00:07:06,570 --> 00:07:13,360
the first<font color="#E5E5E5"> approach in PA ting a decoy</font>

167
00:07:09,340 --> 00:07:15,250
technique actually<font color="#E5E5E5"> makes the security</font>

168
00:07:13,360 --> 00:07:19,180
words than the normal password based

169
00:07:15,250 --> 00:07:21,310
encryption scheme so we created we now

170
00:07:19,180 --> 00:07:23,440
need to<font color="#E5E5E5"> find out a better approach and</font>

171
00:07:21,310 --> 00:07:26,860
we are first motivated by honey

172
00:07:23,440 --> 00:07:29,590
encryption previously<font color="#CCCCCC"> G Kong gave a nice</font>

173
00:07:26,860 --> 00:07:32,620
introduction to of honey encryption let

174
00:07:29,590 --> 00:07:34,510
me remind you again so the main<font color="#E5E5E5"> idea is</font>

175
00:07:32,620 --> 00:07:36,970
if you try<font color="#E5E5E5"> to decrypt the honey</font>

176
00:07:34,510 --> 00:07:38,950
encrypted<font color="#E5E5E5"> ciphertext with any key it</font>

177
00:07:36,970 --> 00:07:41,830
<font color="#E5E5E5">will output a plausible looking splendid</font>

178
00:07:38,950 --> 00:07:44,590
and they achieve it by the following<font color="#E5E5E5"> way</font>

179
00:07:41,830 --> 00:07:47,050
they encode the message to a bit string

180
00:07:44,590 --> 00:07:49,929
and then encrypt the bit string to the

181
00:07:47,050 --> 00:07:52,000
ciphertext using any standard encryption

182
00:07:49,930 --> 00:07:55,120
scheme the decryption works in a similar

183
00:07:52,000 --> 00:07:58,000
way you decrypt the ciphertext to a bit

184
00:07:55,120 --> 00:08:00,250
string and then decode the bit string to

185
00:07:58,000 --> 00:08:02,650
a<font color="#CCCCCC"> NASA to a plausible looking message</font>

186
00:08:00,250 --> 00:08:04,780
and the good thing<font color="#CCCCCC"> is if you try to</font>

187
00:08:02,650 --> 00:08:07,450
decrypt using a wrong master<font color="#E5E5E5"> bus</font><font color="#CCCCCC"> the</font>

188
00:08:04,780 --> 00:08:10,750
wrong and<font color="#E5E5E5"> wrong key the output of the</font>

189
00:08:07,450 --> 00:08:13,180
decode will be another fresh random bit

190
00:08:10,750 --> 00:08:16,539
string which the decode will convert

191
00:08:13,180 --> 00:08:21,760
that into a another message but which

192
00:08:16,539 --> 00:08:23,710
looks plausible so in the whole setting

193
00:08:21,760 --> 00:08:25,210
the most interesting part<font color="#E5E5E5"> of most</font>

194
00:08:23,710 --> 00:08:27,250
interesting and key challenging part<font color="#E5E5E5"> of</font>

195
00:08:25,210 --> 00:08:30,388
honey encryption is creating this encode

196
00:08:27,250 --> 00:08:33,659
and decode in a secure manner in

197
00:08:30,389 --> 00:08:36,430
currently in the previous work we have

198
00:08:33,659 --> 00:08:38,950
encoder and decoder for relatively

199
00:08:36,429 --> 00:08:42,819
simple distributions<font color="#CCCCCC"> of recently</font><font color="#E5E5E5"> we also</font>

200
00:08:38,950 --> 00:08:44,290
have encoder for genomic data and we

201
00:08:42,820 --> 00:08:45,910
will show how to<font color="#E5E5E5"> create this encoder for</font>

202
00:08:44,290 --> 00:08:48,819
relatively complex distribution like

203
00:08:45,910 --> 00:08:50,620
natural languages such as passwords we

204
00:08:48,820 --> 00:08:53,680
call these encoders as natural language

205
00:08:50,620 --> 00:08:54,610
included which the functionality wise it

206
00:08:53,680 --> 00:08:56,739
is it takes

207
00:08:54,610 --> 00:08:59,260
password and can encode it into a bit

208
00:08:56,740 --> 00:09:01,260
string while the decode takes a bit

209
00:08:59,260 --> 00:09:04,000
string and convert<font color="#CCCCCC"> that into a password</font>

210
00:09:01,260 --> 00:09:07,689
the main security ID security criteria

211
00:09:04,000 --> 00:09:10,029
of this that decoding a random bit

212
00:09:07,690 --> 00:09:16,870
string should<font color="#E5E5E5"> look indistinguishable</font>

213
00:09:10,029 --> 00:09:18,850
<font color="#CCCCCC">from a randomly sampled password so the</font>

214
00:09:16,870 --> 00:09:21,670
thing is<font color="#E5E5E5"> the main idea is that we need</font>

215
00:09:18,850 --> 00:09:24,579
to<font color="#CCCCCC"> have a good model of the password</font>

216
00:09:21,670 --> 00:09:27,069
distributions and the best<font color="#E5E5E5"> part is that</font>

217
00:09:24,579 --> 00:09:29,859
we have we<font color="#CCCCCC"> already do that</font><font color="#E5E5E5"> the password</font>

218
00:09:27,070 --> 00:09:31,779
crackers already tries to do that so

219
00:09:29,860 --> 00:09:35,170
what happens the modern password cracker

220
00:09:31,779 --> 00:09:36,700
they try to learn a password model from

221
00:09:35,170 --> 00:09:39,250
a password<font color="#E5E5E5"> League and then use that</font>

222
00:09:36,700 --> 00:09:41,820
model to generate passwords in the

223
00:09:39,250 --> 00:09:44,589
decreasing order of their likelihood to

224
00:09:41,820 --> 00:09:47,820
generate better tracker the researchers

225
00:09:44,589 --> 00:09:50,860
always tries to<font color="#CCCCCC"> create better models and</font>

226
00:09:47,820 --> 00:09:54,370
what<font color="#CCCCCC"> we will show that</font><font color="#E5E5E5"> we can take this</font>

227
00:09:50,860 --> 00:09:56,380
model and convert it into an anally in

228
00:09:54,370 --> 00:09:58,990
our paper we<font color="#CCCCCC"> have shown a bunch of</font>

229
00:09:56,380 --> 00:10:01,649
generic a bunch of approaches how to

230
00:09:58,990 --> 00:10:04,420
convert<font color="#CCCCCC"> these models into a secure nle</font>

231
00:10:01,649 --> 00:10:06,899
our approach is quite generic and for

232
00:10:04,420 --> 00:10:09,279
<font color="#CCCCCC">example like for</font><font color="#E5E5E5"> Ingram</font><font color="#CCCCCC"> Markov model</font>

233
00:10:06,899 --> 00:10:13,079
<font color="#E5E5E5">probabilistic context-free grammars how</font>

234
00:10:09,279 --> 00:10:13,079
can you convert those things internally

235
00:10:13,170 --> 00:10:19,839
give also<font color="#E5E5E5"> the password vault contains</font>

236
00:10:17,410 --> 00:10:21,519
the bunch of repeated and related

237
00:10:19,839 --> 00:10:25,449
passwords we also have<font color="#CCCCCC"> a scheme to</font>

238
00:10:21,519 --> 00:10:28,480
<font color="#E5E5E5">handle that situations to give a</font>

239
00:10:25,449 --> 00:10:30,189
<font color="#CCCCCC">high-level view to in so we have seen</font>

240
00:10:28,480 --> 00:10:32,290
how to do with the Engram it is more

241
00:10:30,190 --> 00:10:35,440
similar to the genomic that you just

242
00:10:32,290 --> 00:10:37,480
seen for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> PC of G it's like you take</font>

243
00:10:35,440 --> 00:10:38,920
a parts of<font color="#E5E5E5"> the password and input the</font>

244
00:10:37,480 --> 00:10:41,560
<font color="#CCCCCC">password into a compact</font><font color="#E5E5E5"> beach</font>

245
00:10:38,920 --> 00:10:42,939
representation while decoding will take

246
00:10:41,560 --> 00:10:44,979
a bit string and convert that<font color="#E5E5E5"> into a</font>

247
00:10:42,940 --> 00:10:47,620
parse tree and output the associated

248
00:10:44,980 --> 00:10:49,390
passwords I'm glossing over a bunch<font color="#E5E5E5"> of</font>

249
00:10:47,620 --> 00:10:52,329
details that will make this<font color="#E5E5E5"> an early</font>

250
00:10:49,390 --> 00:10:55,319
secure and usable but the bottom line is

251
00:10:52,329 --> 00:10:58,000
if<font color="#E5E5E5"> you can make a bit and password model</font>

252
00:10:55,320 --> 00:10:59,800
we show how can you convert the model

253
00:10:58,000 --> 00:11:03,220
into a better in early and<font color="#E5E5E5"> thereby</font>

254
00:10:59,800 --> 00:11:06,130
create better d coils so it took this<font color="#E5E5E5"> in</font>

255
00:11:03,220 --> 00:11:08,020
<font color="#E5E5E5">early and the create take the honey</font>

256
00:11:06,130 --> 00:11:08,390
encryption and create a full wall system

257
00:11:08,020 --> 00:11:12,319
called

258
00:11:08,390 --> 00:11:14,150
<font color="#E5E5E5">cracked the best part is that if you try</font>

259
00:11:12,320 --> 00:11:16,070
<font color="#E5E5E5">to decrypt a no crack ciphertext with</font>

260
00:11:14,150 --> 00:11:19,220
any master password it will output in

261
00:11:16,070 --> 00:11:21,100
plausible looking<font color="#E5E5E5"> wall no peg also</font>

262
00:11:19,220 --> 00:11:24,880
supports machine-generated passwords and

263
00:11:21,100 --> 00:11:31,550
other functionalities like<font color="#E5E5E5"> domain hiding</font>

264
00:11:24,880 --> 00:11:33,650
easy online sink etc then now we turn

265
00:11:31,550 --> 00:11:35,810
<font color="#E5E5E5">into how secure is our no crack how</font>

266
00:11:33,650 --> 00:11:39,199
better than the previous approaches so

267
00:11:35,810 --> 00:11:42,050
we try<font color="#E5E5E5"> to do we want that the</font><font color="#CCCCCC"> output of</font>

268
00:11:39,200 --> 00:11:43,100
the<font color="#E5E5E5"> no crack decryption on a random</font>

269
00:11:42,050 --> 00:11:46,040
master password<font color="#E5E5E5"> should look like</font>

270
00:11:43,100 --> 00:11:48,050
plausible<font color="#E5E5E5"> OD</font><font color="#CCCCCC"> day</font><font color="#E5E5E5"> we would come up with a</font>

271
00:11:46,040 --> 00:11:49,670
<font color="#E5E5E5">bunch of attacks and the best attack we</font>

272
00:11:48,050 --> 00:11:53,170
could come up<font color="#CCCCCC"> with using machine</font>

273
00:11:49,670 --> 00:11:56,030
learning classifiers and the on

274
00:11:53,170 --> 00:12:01,400
simulating unreal passwords leaks we

275
00:11:56,030 --> 00:12:05,630
<font color="#E5E5E5">found that if the attacker needs q</font>

276
00:12:01,400 --> 00:12:07,730
queries to decrypt a password of<font color="#E5E5E5"> line he</font>

277
00:12:05,630 --> 00:12:09,890
will lead at more at least Q by three

278
00:12:07,730 --> 00:12:12,260
online<font color="#E5E5E5"> queries he has to make at least Q</font>

279
00:12:09,890 --> 00:12:15,560
by three<font color="#E5E5E5"> online queries which if you</font>

280
00:12:12,260 --> 00:12:18,260
turn into a number if for yahoo leagues

281
00:12:15,560 --> 00:12:20,479
if the attacker needs to break almost

282
00:12:18,260 --> 00:12:24,069
<font color="#E5E5E5">eighty seven percent of the password in</font>

283
00:12:20,480 --> 00:12:27,080
2.5 million gases he will has to make

284
00:12:24,070 --> 00:12:29,780
800,000 online queries which is way more

285
00:12:27,080 --> 00:12:35,510
<font color="#CCCCCC">than any website will allow and he will</font>

286
00:12:29,780 --> 00:12:39,110
<font color="#E5E5E5">most likely get locked out this all come</font>

287
00:12:35,510 --> 00:12:40,370
do<font color="#CCCCCC"> not come without some limitations the</font>

288
00:12:39,110 --> 00:12:45,650
first limitation is the site information

289
00:12:40,370 --> 00:12:47,120
that if some the attacker has a some

290
00:12:45,650 --> 00:12:48,560
side information about the victim such

291
00:12:47,120 --> 00:12:51,620
as he knows one of the password of the

292
00:12:48,560 --> 00:12:54,640
victim then it will be very he can prune

293
00:12:51,620 --> 00:12:58,640
out the decoys and decreases online

294
00:12:54,640 --> 00:13:00,410
queries we also did not<font color="#E5E5E5"> take into</font>

295
00:12:58,640 --> 00:13:02,090
account the scenarios<font color="#CCCCCC"> where the</font><font color="#E5E5E5"> master</font>

296
00:13:00,410 --> 00:13:07,699
password is related with the passwords

297
00:13:02,090 --> 00:13:11,000
inside the vault also for lots of

298
00:13:07,700 --> 00:13:14,420
websites infos password policies and we

299
00:13:11,000 --> 00:13:16,760
<font color="#E5E5E5">our current</font><font color="#CCCCCC"> beko nle does not take into</font>

300
00:13:14,420 --> 00:13:18,589
account<font color="#CCCCCC"> that scenario but we have some</font>

301
00:13:16,760 --> 00:13:21,650
idea to implement it we have to we

302
00:13:18,590 --> 00:13:22,390
haven't thought through it and finally

303
00:13:21,650 --> 00:13:24,430
<font color="#E5E5E5">the</font>

304
00:13:22,390 --> 00:13:26,199
fact that<font color="#E5E5E5"> we have proposed is the</font><font color="#CCCCCC"> show's</font>

305
00:13:24,430 --> 00:13:28,270
our best effort but<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have no proof</font>

306
00:13:26,200 --> 00:13:30,190
<font color="#CCCCCC">that</font><font color="#E5E5E5"> there cannot exist some better</font>

307
00:13:28,270 --> 00:13:33,280
attack against no crack so it will be we

308
00:13:30,190 --> 00:13:36,280
welcome the community to try find out

309
00:13:33,280 --> 00:13:39,280
better attacks against no crack said

310
00:13:36,280 --> 00:13:40,959
that no crack never degrades the

311
00:13:39,280 --> 00:13:43,750
security relative to a possible

312
00:13:40,960 --> 00:13:45,910
encryption scheme so whatever even given

313
00:13:43,750 --> 00:13:48,400
these limitations the attacker as at

314
00:13:45,910 --> 00:13:51,880
<font color="#E5E5E5">least has to make all the pass</font><font color="#CCCCCC"> off line</font>

315
00:13:48,400 --> 00:13:56,170
<font color="#E5E5E5">reports of all the effort of a normal</font>

316
00:13:51,880 --> 00:13:58,689
password based encryption so in let<font color="#E5E5E5"> me</font>

317
00:13:56,170 --> 00:14:01,180
summarize so we showed<font color="#CCCCCC"> that the only</font>

318
00:13:58,690 --> 00:14:04,210
<font color="#E5E5E5">private approach on trying to apply</font>

319
00:14:01,180 --> 00:14:06,339
deploy decoy techniques actually

320
00:14:04,210 --> 00:14:07,840
declared security we<font color="#E5E5E5"> devised a new</font>

321
00:14:06,340 --> 00:14:10,960
mechanism called natural language

322
00:14:07,840 --> 00:14:12,400
encoder that can encode natural

323
00:14:10,960 --> 00:14:14,340
languages to a bit string and thereby

324
00:14:12,400 --> 00:14:16,810
use honey encryption on top of<font color="#E5E5E5"> it and</font>

325
00:14:14,340 --> 00:14:19,300
finally using this in early<font color="#E5E5E5"> and honey</font>

326
00:14:16,810 --> 00:14:21,369
encryption we created a prototype vault

327
00:14:19,300 --> 00:14:23,589
a prototype<font color="#CCCCCC"> of a password vault and</font>

328
00:14:21,370 --> 00:14:26,290
which<font color="#CCCCCC"> you call no crack thanks for</font><font color="#E5E5E5"> your</font>

329
00:14:23,590 --> 00:14:28,350
attention I am ready to<font color="#E5E5E5"> take your</font>

330
00:14:26,290 --> 00:14:28,349
questions

331
00:14:32,759 --> 00:14:38,109
thank you very much uh so I I did have

332
00:14:36,160 --> 00:14:40,660
one question I think<font color="#E5E5E5"> you might have</font>

333
00:14:38,109 --> 00:14:42,579
touched on it<font color="#E5E5E5"> really in the limitations</font>

334
00:14:40,660 --> 00:14:44,949
but I'd imagine that there'd be a lot of

335
00:14:42,579 --> 00:14:46,868
coupling between individual passwords

336
00:14:44,949 --> 00:14:50,679
with<font color="#E5E5E5"> it yeah we have person involved yes</font>

337
00:14:46,869 --> 00:14:53,799
we have that that is no crack handles

338
00:14:50,679 --> 00:14:56,829
that the interdependence of passwords

339
00:14:53,799 --> 00:14:58,329
inside the vault but it doesn't<font color="#CCCCCC"> do how</font>

340
00:14:56,829 --> 00:15:01,269
master password is related to the

341
00:14:58,329 --> 00:15:05,349
password inside the vault ok cool and

342
00:15:01,269 --> 00:15:08,470
then one final did you do any<font color="#E5E5E5"> sort of</font>

343
00:15:05,350 --> 00:15:09,970
human based evaluation of which one's of

344
00:15:08,470 --> 00:15:12,459
these like feasible versus which one of

345
00:15:09,970 --> 00:15:13,539
these are our honey-based<font color="#CCCCCC"> I know that</font>

346
00:15:12,459 --> 00:15:15,539
once you start working with<font color="#CCCCCC"> these</font>

347
00:15:13,539 --> 00:15:17,529
encoders there might be a<font color="#E5E5E5"> lot of</font>

348
00:15:15,539 --> 00:15:19,209
inference at the human level that you

349
00:15:17,529 --> 00:15:23,399
<font color="#CCCCCC">would necessarily be able to</font><font color="#E5E5E5"> build into</font>

350
00:15:19,209 --> 00:15:26,319
a yeah I understand so we didn't do for

351
00:15:23,399 --> 00:15:30,669
<font color="#E5E5E5">two reasons one was it's pretty slow and</font>

352
00:15:26,319 --> 00:15:33,279
it feels like me he learned in like it

353
00:15:30,669 --> 00:15:34,899
needs a lot of expertise to find human

354
00:15:33,279 --> 00:15:37,209
who can distinguish between<font color="#E5E5E5"> this decoy</font>

355
00:15:34,899 --> 00:15:38,829
and real passwords like someone has to

356
00:15:37,209 --> 00:15:39,939
see look through those passwords and

357
00:15:38,829 --> 00:15:41,709
password leaks that what kind<font color="#CCCCCC"> of</font>

358
00:15:39,939 --> 00:15:43,629
password people generate I mostly like

359
00:15:41,709 --> 00:15:45,219
if you<font color="#E5E5E5"> ask an individual password he is</font>

360
00:15:43,629 --> 00:15:47,709
biased to the kind<font color="#E5E5E5"> of password he</font>

361
00:15:45,220 --> 00:15:49,439
generates right right<font color="#E5E5E5"> so it's I could</font>

362
00:15:47,709 --> 00:15:51,429
not come up with a good<font color="#CCCCCC"> data like</font>

363
00:15:49,439 --> 00:15:52,988
experiment scenarios how you can use

364
00:15:51,429 --> 00:15:54,999
human in this yeah I guess I was

365
00:15:52,989 --> 00:15:57,100
worrying about a rigorous experiment as

366
00:15:54,999 --> 00:15:58,839
much as you probably looked at a lot of

367
00:15:57,100 --> 00:16:01,569
passwords over the course of working on

368
00:15:58,839 --> 00:16:03,299
this yeah exactly that's that's give me

369
00:16:01,569 --> 00:16:06,488
the feel<font color="#CCCCCC"> okay I could not</font><font color="#E5E5E5"> disintegrate</font>

370
00:16:03,299 --> 00:16:09,209
<font color="#CCCCCC">haha</font><font color="#E5E5E5"> here cool</font><font color="#CCCCCC"> alright let's thank the</font>

371
00:16:06,489 --> 00:16:09,209
speaker one more time

