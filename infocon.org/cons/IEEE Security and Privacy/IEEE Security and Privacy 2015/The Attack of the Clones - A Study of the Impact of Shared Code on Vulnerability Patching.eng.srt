1
00:00:00,210 --> 00:00:07,990
so this work is about client<font color="#E5E5E5"> application</font>

2
00:00:06,000 --> 00:00:10,839
vulnerability patching and related

3
00:00:07,990 --> 00:00:15,400
issues so let me<font color="#CCCCCC"> introduce you a little</font>

4
00:00:10,839 --> 00:00:18,490
bit dictionary oh<font color="#E5E5E5"> okay software</font>

5
00:00:15,400 --> 00:00:21,550
vulnerabilities are one of the most

6
00:00:18,490 --> 00:00:23,490
critical issues for the<font color="#E5E5E5"> security of our</font>

7
00:00:21,550 --> 00:00:26,679
computers because they can get exploited

8
00:00:23,490 --> 00:00:29,439
basically and your machine can get part

9
00:00:26,679 --> 00:00:33,059
of<font color="#E5E5E5"> a botnet or your personal</font><font color="#CCCCCC"> data may be</font>

10
00:00:29,439 --> 00:00:36,640
stolen one of the most effective ways to

11
00:00:33,059 --> 00:00:38,589
against vulnerabilities is patching if

12
00:00:36,640 --> 00:00:42,760
you pass<font color="#E5E5E5"> your vulnerability basically</font>

13
00:00:38,590 --> 00:00:46,030
your machine<font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to be safe so the</font>

14
00:00:42,760 --> 00:00:49,329
idea<font color="#E5E5E5"> is how to study vulnerabilities we</font>

15
00:00:46,030 --> 00:00:52,510
are used to this life cycle that's

16
00:00:49,329 --> 00:00:55,210
basically linear so you will release

17
00:00:52,510 --> 00:00:57,608
your vulnerable application and<font color="#E5E5E5"> then at</font>

18
00:00:55,210 --> 00:00:59,440
some point the vulnerability will get

19
00:00:57,609 --> 00:01:02,170
disclosed then you will start to patch

20
00:00:59,440 --> 00:01:04,420
and then we will observe for<font color="#E5E5E5"> example</font>

21
00:01:02,170 --> 00:01:06,549
three important milestones that have<font color="#E5E5E5"> 50</font>

22
00:01:04,420 --> 00:01:10,540
nineteen ninety-five percent patching of

23
00:01:06,549 --> 00:01:12,070
the vulnerable hosts so what are<font color="#CCCCCC"> the</font>

24
00:01:10,540 --> 00:01:15,040
research question that we are going<font color="#E5E5E5"> to</font>

25
00:01:12,070 --> 00:01:16,869
ask in<font color="#E5E5E5"> this work so when does the</font>

26
00:01:15,040 --> 00:01:19,000
patching<font color="#CCCCCC"> starts so what is the delay</font>

27
00:01:16,869 --> 00:01:21,700
between the vulnerability disclosure and

28
00:01:19,000 --> 00:01:23,680
the start<font color="#E5E5E5"> of the patchy how long does</font>

29
00:01:21,700 --> 00:01:26,350
the past deployment take basically<font color="#E5E5E5"> how</font>

30
00:01:23,680 --> 00:01:29,049
fast the<font color="#E5E5E5"> hosts that are vulnerable are</font>

31
00:01:26,350 --> 00:01:31,000
going to patch and what<font color="#E5E5E5"> are the factors</font>

32
00:01:29,049 --> 00:01:34,299
that<font color="#CCCCCC"> are affecting vulnerability</font>

33
00:01:31,000 --> 00:01:37,450
patching so we we<font color="#E5E5E5"> have found share code</font>

34
00:01:34,299 --> 00:01:39,130
user categories basically different<font color="#CCCCCC"> user</font>

35
00:01:37,450 --> 00:01:43,290
categories may pass differently and

36
00:01:39,130 --> 00:01:47,560
exploits so as a sprite I mean basically

37
00:01:43,290 --> 00:01:50,530
the way to out the vulnerability gets

38
00:01:47,560 --> 00:01:55,240
patch when<font color="#E5E5E5"> the exploit is released if</font>

39
00:01:50,530 --> 00:01:58,110
it's get faster or not so PI work has

40
00:01:55,240 --> 00:02:01,600
studied extensively<font color="#E5E5E5"> server-side</font>

41
00:01:58,110 --> 00:02:03,520
vulnerabilities and it's easy because

42
00:02:01,600 --> 00:02:06,038
you can scan the internet and basically

43
00:02:03,520 --> 00:02:08,500
check that your machine is vulnerable or

44
00:02:06,039 --> 00:02:11,470
not but on client site you cannot scan

45
00:02:08,500 --> 00:02:13,870
so this is<font color="#CCCCCC"> not going to work there is a</font>

46
00:02:11,470 --> 00:02:16,870
<font color="#CCCCCC">PI work on browsers that</font>

47
00:02:13,870 --> 00:02:18,220
client-side applications and that

48
00:02:16,870 --> 00:02:21,220
basically studied through the network

49
00:02:18,220 --> 00:02:23,500
the user agent string of the browsers

50
00:02:21,220 --> 00:02:25,840
that were visiting a particular and very

51
00:02:23,500 --> 00:02:28,720
popular website the problem of this

52
00:02:25,840 --> 00:02:31,690
approach is basically that<font color="#E5E5E5"> if the</font>

53
00:02:28,720 --> 00:02:34,209
machine are behind nothing<font color="#E5E5E5"> you cannot</font>

54
00:02:31,690 --> 00:02:36,069
<font color="#E5E5E5">really count them and if the machines</font>

55
00:02:34,209 --> 00:02:37,780
are not visiting the website that you

56
00:02:36,069 --> 00:02:40,988
are monitoring you cannot count them and

57
00:02:37,780 --> 00:02:42,400
also there could be dormant application

58
00:02:40,989 --> 00:02:47,440
applications that you install in your

59
00:02:42,400 --> 00:02:49,599
<font color="#E5E5E5">system that</font><font color="#CCCCCC"> basically you never use so</font>

60
00:02:47,440 --> 00:02:52,480
the problem is<font color="#CCCCCC"> that in</font><font color="#E5E5E5"> order to study</font>

61
00:02:49,599 --> 00:02:54,730
client-side vulnerabilities you need to

62
00:02:52,480 --> 00:02:59,369
be on the machine and in order to<font color="#E5E5E5"> be on</font>

63
00:02:54,730 --> 00:03:01,899
the machine basically<font color="#E5E5E5"> you need something</font>

64
00:02:59,370 --> 00:03:03,489
that will help you to understand which

65
00:03:01,900 --> 00:03:05,980
have the applications that<font color="#CCCCCC"> are installed</font>

66
00:03:03,489 --> 00:03:08,200
<font color="#E5E5E5">in the</font><font color="#CCCCCC"> machine</font><font color="#E5E5E5"> and in our case we had</font>

67
00:03:05,980 --> 00:03:11,230
access<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the semantic wine binary</font>

68
00:03:08,200 --> 00:03:13,839
reputation data set and let me explain

69
00:03:11,230 --> 00:03:16,690
<font color="#CCCCCC">you how this</font><font color="#E5E5E5"> data set</font><font color="#CCCCCC"> basically works</font>

70
00:03:13,840 --> 00:03:20,769
this<font color="#E5E5E5"> dataset contains</font><font color="#CCCCCC"> eight million</font>

71
00:03:16,690 --> 00:03:22,900
<font color="#CCCCCC">Windows host data basically the ashes of</font>

72
00:03:20,769 --> 00:03:26,290
the file and some other<font color="#CCCCCC"> information like</font>

73
00:03:22,900 --> 00:03:28,359
<font color="#E5E5E5">the first scene date in the system</font><font color="#CCCCCC"> so we</font>

74
00:03:26,290 --> 00:03:30,879
have the<font color="#CCCCCC"> Internet</font><font color="#E5E5E5"> users that is a big</font>

75
00:03:28,359 --> 00:03:34,709
set then the subset are the semantic

76
00:03:30,879 --> 00:03:39,010
users then the user that<font color="#E5E5E5"> opted in for</font>

77
00:03:34,709 --> 00:03:40,810
the system it's another subset then this

78
00:03:39,010 --> 00:03:43,448
data is sampled and we have the wine

79
00:03:40,810 --> 00:03:46,980
users and we selected ten popular

80
00:03:43,449 --> 00:03:49,419
applications for this from<font color="#E5E5E5"> this data set</font>

81
00:03:46,980 --> 00:03:51,760
<font color="#E5E5E5">so let me show you which are the</font>

82
00:03:49,419 --> 00:03:53,440
application that we will study and why

83
00:03:51,760 --> 00:03:57,099
we did it<font color="#E5E5E5"> where we selected these</font>

84
00:03:53,440 --> 00:04:00,430
applications so we selected for browsers

85
00:03:57,099 --> 00:04:03,069
to multimedia players one document

86
00:04:00,430 --> 00:04:06,250
reader and one document editor one email

87
00:04:03,069 --> 00:04:07,690
client and one networking tool we

88
00:04:06,250 --> 00:04:09,220
selected<font color="#CCCCCC"> this application because they</font>

89
00:04:07,690 --> 00:04:11,109
are popular they are from different

90
00:04:09,220 --> 00:04:14,379
publishers so they may<font color="#E5E5E5"> have different</font>

91
00:04:11,109 --> 00:04:17,289
patching policies they have<font color="#E5E5E5"> auto a</font>

92
00:04:14,379 --> 00:04:21,519
manual updates they are<font color="#CCCCCC"> opening closed</font>

93
00:04:17,289 --> 00:04:24,370
source and we select and analyze roughly

94
00:04:21,519 --> 00:04:28,860
1,600 vulnerabilities for a period of

95
00:04:24,370 --> 00:04:31,150
five years over more than<font color="#E5E5E5"> eight million</font>

96
00:04:28,860 --> 00:04:34,000
so what are<font color="#E5E5E5"> the main contribution of</font>

97
00:04:31,150 --> 00:04:36,159
this work we analyze these number of

98
00:04:34,000 --> 00:04:38,710
vulnerabilities for 10 applications over

99
00:04:36,160 --> 00:04:41,710
a period of five years<font color="#E5E5E5"> then we developed</font>

100
00:04:38,710 --> 00:04:43,840
a methodology to map the files on the

101
00:04:41,710 --> 00:04:47,020
hand host to vulnerable and patch

102
00:04:43,840 --> 00:04:48,909
version and basically we do survival

103
00:04:47,020 --> 00:04:50,349
analysis that<font color="#CCCCCC"> is a statistical technique</font>

104
00:04:48,910 --> 00:04:53,020
that is going to tell us how the

105
00:04:50,350 --> 00:04:56,110
vulnerability is decaying over time

106
00:04:53,020 --> 00:04:57,490
basically outed vulnerable population is

107
00:04:56,110 --> 00:05:00,730
decreasing over time when the

108
00:04:57,490 --> 00:05:05,620
application are getting patched and we

109
00:05:00,730 --> 00:05:07,150
show that the Venera the linear

110
00:05:05,620 --> 00:05:10,000
vulnerability lifecycle is not

111
00:05:07,150 --> 00:05:12,039
descriptive enough to describe some

112
00:05:10,000 --> 00:05:15,820
<font color="#CCCCCC">corner cases for example</font><font color="#E5E5E5"> shallot code</font>

113
00:05:12,040 --> 00:05:18,730
that<font color="#CCCCCC"> I will tell you what it is and we</font>

114
00:05:15,820 --> 00:05:21,730
made we<font color="#E5E5E5"> basically developed two new</font>

115
00:05:18,730 --> 00:05:25,780
attacks<font color="#E5E5E5"> proof-of-concept against</font>

116
00:05:21,730 --> 00:05:28,560
<font color="#E5E5E5">Charlotte code and we make user category</font>

117
00:05:25,780 --> 00:05:31,299
categorization and basically we<font color="#E5E5E5"> analyze</font>

118
00:05:28,560 --> 00:05:35,200
different user categories how fast<font color="#E5E5E5"> they</font>

119
00:05:31,300 --> 00:05:37,270
patch and we make measurements about

120
00:05:35,200 --> 00:05:40,510
exploitation basically when they exploit

121
00:05:37,270 --> 00:05:43,690
gets available on the in the wild and

122
00:05:40,510 --> 00:05:46,120
<font color="#E5E5E5">how this affects the vulnerability</font>

123
00:05:43,690 --> 00:05:51,250
patching so let me<font color="#E5E5E5"> tell you what is</font>

124
00:05:46,120 --> 00:05:54,820
shared code so<font color="#CCCCCC"> we are used to this model</font>

125
00:05:51,250 --> 00:05:56,350
that<font color="#E5E5E5"> I show you before so what happens</font>

126
00:05:54,820 --> 00:05:58,570
if you have another line of the

127
00:05:56,350 --> 00:06:00,670
application installed for example<font color="#CCCCCC"> you</font>

128
00:05:58,570 --> 00:06:03,640
have adobe reader<font color="#CCCCCC"> 5 because you</font>

129
00:06:00,670 --> 00:06:05,740
installed it with your old printer

130
00:06:03,640 --> 00:06:07,950
driver and you just forget about it and

131
00:06:05,740 --> 00:06:11,790
then you have a<font color="#CCCCCC"> WTF time because you</font>

132
00:06:07,950 --> 00:06:14,979
<font color="#CCCCCC">needed it so what happens to</font><font color="#E5E5E5"> the patchy</font>

133
00:06:11,790 --> 00:06:16,930
let me show<font color="#CCCCCC"> you some scenarios and then</font>

134
00:06:14,980 --> 00:06:20,500
we can<font color="#E5E5E5"> go a little bit into the attacks</font>

135
00:06:16,930 --> 00:06:23,830
<font color="#E5E5E5">that we have found so imagine</font><font color="#CCCCCC"> the user</font>

136
00:06:20,500 --> 00:06:26,860
has for example adobe reader<font color="#E5E5E5"> and adobe</font>

137
00:06:23,830 --> 00:06:29,260
reader has this library that is used to

138
00:06:26,860 --> 00:06:31,840
play flash content and it's in one<font color="#E5E5E5"> part</font>

139
00:06:29,260 --> 00:06:34,240
then you have adobe flash that has the

140
00:06:31,840 --> 00:06:36,969
same library and is in another part so

141
00:06:34,240 --> 00:06:39,610
basically you will have two libraries

142
00:06:36,970 --> 00:06:41,500
the same code two times in the system<font color="#E5E5E5"> so</font>

143
00:06:39,610 --> 00:06:43,720
<font color="#E5E5E5">i let you try to imagine what</font>

144
00:06:41,500 --> 00:06:46,750
can happen what an attacker<font color="#CCCCCC"> can do with</font>

145
00:06:43,720 --> 00:06:48,910
this setup so the<font color="#CCCCCC"> first problem is</font>

146
00:06:46,750 --> 00:06:52,030
basically they will have different parts

147
00:06:48,910 --> 00:06:53,890
releases and of course different

148
00:06:52,030 --> 00:06:57,070
patching programs so for<font color="#CCCCCC"> example what</font>

149
00:06:53,890 --> 00:06:58,390
can happen is<font color="#E5E5E5"> ok I got the pop-up from</font>

150
00:06:57,070 --> 00:07:00,370
<font color="#E5E5E5">the flash client from the flash</font>

151
00:06:58,390 --> 00:07:02,440
application it says you have to update I

152
00:07:00,370 --> 00:07:04,540
upped it and I think<font color="#E5E5E5"> I'm safe and then I</font>

153
00:07:02,440 --> 00:07:06,850
forget<font color="#E5E5E5"> that I have the same library in</font>

154
00:07:04,540 --> 00:07:10,660
another application and<font color="#CCCCCC"> maybe I don't</font>

155
00:07:06,850 --> 00:07:15,610
<font color="#E5E5E5">patch it there is another scenario of</font>

156
00:07:10,660 --> 00:07:18,550
shell code that is basically two

157
00:07:15,610 --> 00:07:21,940
versions of<font color="#CCCCCC"> the same application for</font>

158
00:07:18,550 --> 00:07:24,400
example reader<font color="#CCCCCC"> 5 and rid of 10 and one</font>

159
00:07:21,940 --> 00:07:29,080
of the two libraries can be<font color="#E5E5E5"> vulnerable</font>

160
00:07:24,400 --> 00:07:30,729
and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> other one can be patched so</font>

161
00:07:29,080 --> 00:07:34,390
<font color="#E5E5E5">basically what an attacker can</font><font color="#CCCCCC"> do in</font>

162
00:07:30,730 --> 00:07:37,060
this<font color="#E5E5E5"> scenario is trying to trigger the</font>

163
00:07:34,390 --> 00:07:40,479
old version so in this model that<font color="#E5E5E5"> I have</font>

164
00:07:37,060 --> 00:07:42,460
here the user has adobe flash with this

165
00:07:40,480 --> 00:07:45,040
library for playing flash content that

166
00:07:42,460 --> 00:07:49,960
is updated<font color="#E5E5E5"> and then the user has adobe</font>

167
00:07:45,040 --> 00:07:53,919
air that is<font color="#CCCCCC"> a framework to play web</font>

168
00:07:49,960 --> 00:07:56,229
applications on the<font color="#E5E5E5"> desktop and on top</font>

169
00:07:53,919 --> 00:07:57,820
of<font color="#CCCCCC"> this adobe</font><font color="#E5E5E5"> air the user has an flv</font>

170
00:07:56,229 --> 00:08:02,320
player that<font color="#CCCCCC"> is an application</font><font color="#E5E5E5"> that</font>

171
00:07:57,820 --> 00:08:04,510
basically plays<font color="#E5E5E5"> flv files that are flash</font>

172
00:08:02,320 --> 00:08:06,610
videos it's just another format for

173
00:08:04,510 --> 00:08:09,130
flash videos so<font color="#CCCCCC"> if the attacker is</font>

174
00:08:06,610 --> 00:08:12,190
trying to to send to the user and swf

175
00:08:09,130 --> 00:08:14,350
file this will eat the flash player<font color="#E5E5E5"> that</font>

176
00:08:12,190 --> 00:08:17,140
is patched so nothing is going to happen

177
00:08:14,350 --> 00:08:19,270
but what happens<font color="#CCCCCC"> if the user sends an</font>

178
00:08:17,140 --> 00:08:22,450
FLV file that is automatically

179
00:08:19,270 --> 00:08:24,159
associated with the flv player<font color="#CCCCCC"> I like</font><font color="#E5E5E5"> to</font>

180
00:08:22,450 --> 00:08:27,159
<font color="#E5E5E5">imagine what can happen basically it can</font>

181
00:08:24,160 --> 00:08:29,290
get exploited we avoid another attack

182
00:08:27,160 --> 00:08:30,970
and i suggest<font color="#E5E5E5"> you to check the paper</font>

183
00:08:29,290 --> 00:08:34,960
because we didn't<font color="#CCCCCC"> have time to explain</font>

184
00:08:30,970 --> 00:08:37,960
it here so let me<font color="#E5E5E5"> show you how</font><font color="#CCCCCC"> we did</font>

185
00:08:34,960 --> 00:08:40,390
this study we had<font color="#CCCCCC"> access to different</font>

186
00:08:37,960 --> 00:08:42,430
data set mainly the most important one

187
00:08:40,390 --> 00:08:44,830
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the one binary reputation data set</font>

188
00:08:42,429 --> 00:08:48,640
that gives us the files that<font color="#E5E5E5"> are</font>

189
00:08:44,830 --> 00:08:50,290
installed<font color="#CCCCCC"> on the user machines and then</font>

190
00:08:48,640 --> 00:08:52,120
we enrich this data set with the

191
00:08:50,290 --> 00:08:55,360
metadata from virustotal basically

192
00:08:52,120 --> 00:08:57,040
seventy percent of the files in wine in

193
00:08:55,360 --> 00:08:59,440
the wine binary reputation are also

194
00:08:57,040 --> 00:09:01,329
invited status so we couldn't<font color="#E5E5E5"> reach this</font>

195
00:08:59,440 --> 00:09:03,459
data with more information<font color="#CCCCCC"> for example</font>

196
00:09:01,329 --> 00:09:07,000
the developer<font color="#CCCCCC"> the publisher and not</font><font color="#E5E5E5"> this</font>

197
00:09:03,459 --> 00:09:10,569
kind of information from these files we

198
00:09:07,000 --> 00:09:12,519
basically<font color="#E5E5E5"> associate them to the</font><font color="#CCCCCC"> National</font>

199
00:09:10,570 --> 00:09:15,130
vulnerability database and<font color="#E5E5E5"> open source</font>

200
00:09:12,519 --> 00:09:16,690
vulnerability database in order to see

201
00:09:15,130 --> 00:09:20,260
which are<font color="#E5E5E5"> the vulnerable version for a</font>

202
00:09:16,690 --> 00:09:23,350
given vulnerability and then thanks to

203
00:09:20,260 --> 00:09:25,329
<font color="#E5E5E5">the semantic wine AV data set and</font>

204
00:09:23,350 --> 00:09:29,110
exploit DB we basically check the

205
00:09:25,329 --> 00:09:31,120
exploit release date and we see how<font color="#E5E5E5"> the</font>

206
00:09:29,110 --> 00:09:34,390
vulnerability patching is affected when

207
00:09:31,120 --> 00:09:36,339
an exploit is released so let<font color="#CCCCCC"> me show</font>

208
00:09:34,390 --> 00:09:39,040
you a<font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit the pipeline that we</font>

209
00:09:36,339 --> 00:09:43,480
have so the first thing is<font color="#E5E5E5"> that you have</font>

210
00:09:39,040 --> 00:09:45,490
<font color="#CCCCCC">to associate a list of ashes to a</font>

211
00:09:43,480 --> 00:09:48,910
realist elation of an<font color="#CCCCCC"> application on the</font>

212
00:09:45,490 --> 00:09:51,640
client machine so the<font color="#E5E5E5"> idea is you have</font>

213
00:09:48,910 --> 00:09:55,029
to find a<font color="#CCCCCC"> way to understand if the users</font>

214
00:09:51,640 --> 00:09:58,930
add add the application installed so<font color="#E5E5E5"> the</font>

215
00:09:55,029 --> 00:10:02,649
idea is some applications constantly use

216
00:09:58,930 --> 00:10:05,050
the same<font color="#E5E5E5"> file name for the main</font>

217
00:10:02,649 --> 00:10:07,300
executable for example Firefox dot exe

218
00:10:05,050 --> 00:10:10,420
<font color="#E5E5E5">is an example so all the version of</font>

219
00:10:07,300 --> 00:10:13,510
Firefox will have Firefox exe and this

220
00:10:10,420 --> 00:10:15,790
file keeps updating its version where

221
00:10:13,510 --> 00:10:17,920
they knew when the new releases are

222
00:10:15,790 --> 00:10:20,920
released and then we have another

223
00:10:17,920 --> 00:10:24,250
<font color="#E5E5E5">interesting piece</font><font color="#CCCCCC"> of data that</font><font color="#E5E5E5"> is the</font>

224
00:10:20,920 --> 00:10:28,120
first scene so well when the application

225
00:10:24,250 --> 00:10:31,540
appeared in the data set than with this

226
00:10:28,120 --> 00:10:33,279
data we associated in<font color="#CCCCCC"> the National</font>

227
00:10:31,540 --> 00:10:35,529
vulnerability database and open source

228
00:10:33,279 --> 00:10:38,380
vulnerability database to find which are

229
00:10:35,529 --> 00:10:40,360
the vulnerable versions for a given

230
00:10:38,380 --> 00:10:42,189
vulnerability so this is an<font color="#CCCCCC"> example you</font>

231
00:10:40,360 --> 00:10:45,250
see the CV and then you have the

232
00:10:42,190 --> 00:10:48,190
versions so i put the arrows there

233
00:10:45,250 --> 00:10:50,860
because one of<font color="#E5E5E5"> the issues that we have</font>

234
00:10:48,190 --> 00:10:53,019
<font color="#E5E5E5">found in</font><font color="#CCCCCC"> mvd is basically that</font><font color="#E5E5E5"> you have</font>

235
00:10:50,860 --> 00:10:56,170
the program version that is for example

236
00:10:53,019 --> 00:10:58,899
<font color="#E5E5E5">advertised but is not the exit file</font>

237
00:10:56,170 --> 00:11:01,060
version so for<font color="#E5E5E5"> example firefox 3</font>

238
00:10:58,899 --> 00:11:03,310
correspond to the file version 1.9 point

239
00:11:01,060 --> 00:11:05,260
3 so this<font color="#CCCCCC"> is an issue because we</font>

240
00:11:03,310 --> 00:11:08,920
couldn't find all the mappings for all

241
00:11:05,260 --> 00:11:10,810
the applications so

242
00:11:08,920 --> 00:11:14,680
we also found other errors in the<font color="#E5E5E5"> mvd</font>

243
00:11:10,810 --> 00:11:17,829
for example missing a vulnerable version

244
00:11:14,680 --> 00:11:19,239
or extraneous so version that are not

245
00:11:17,829 --> 00:11:22,859
vulnerable that<font color="#CCCCCC"> are reported</font><font color="#E5E5E5"> as</font>

246
00:11:19,240 --> 00:11:25,810
vulnerable then we cluster together

247
00:11:22,860 --> 00:11:28,810
vulnerabilities that patch with the<font color="#E5E5E5"> same</font>

248
00:11:25,810 --> 00:11:31,420
versions in order to like minimize the

249
00:11:28,810 --> 00:11:33,550
amount of work<font color="#E5E5E5"> and then we perform</font>

250
00:11:31,420 --> 00:11:36,880
survival analysis that is<font color="#E5E5E5"> a statistical</font>

251
00:11:33,550 --> 00:11:38,979
technique that allows us to measure how

252
00:11:36,880 --> 00:11:41,279
the vulnerabilities decane over time

253
00:11:38,980 --> 00:11:43,870
this technique is used in life science

254
00:11:41,279 --> 00:11:48,070
to basically test the survival of the

255
00:11:43,870 --> 00:11:50,980
patients for a new drug so<font color="#E5E5E5"> basically in</font>

256
00:11:48,070 --> 00:11:52,690
<font color="#E5E5E5">this case we</font><font color="#CCCCCC"> use this technique to</font>

257
00:11:50,980 --> 00:11:56,769
measure out the vulnerability of the

258
00:11:52,690 --> 00:11:58,510
king and this is an example<font color="#CCCCCC"> so these</font><font color="#E5E5E5"> are</font>

259
00:11:56,769 --> 00:12:00,850
two vulnerability clusters for google

260
00:11:58,510 --> 00:12:04,449
chrome and as you can see the red

261
00:12:00,850 --> 00:12:06,760
cluster is decaying and it reaches

262
00:12:04,449 --> 00:12:14,979
ninety percent let's see if<font color="#CCCCCC"> i have the</font>

263
00:12:06,760 --> 00:12:16,689
laser pointer not ok so the

264
00:12:14,980 --> 00:12:18,399
vulnerability is decaying and after<font color="#CCCCCC"> 50</font>

265
00:12:16,690 --> 00:12:20,320
days is reaching ninety percent of the

266
00:12:18,399 --> 00:12:24,070
patching but for example the<font color="#CCCCCC"> other</font>

267
00:12:20,320 --> 00:12:26,529
vulnerability cluster will reach the

268
00:12:24,070 --> 00:12:29,459
ninety percent<font color="#CCCCCC"> after more than 200 days</font>

269
00:12:26,529 --> 00:12:31,510
and this could be due for example two

270
00:12:29,459 --> 00:12:34,839
unused that application that you have

271
00:12:31,510 --> 00:12:39,189
installed<font color="#E5E5E5"> in your system so let me</font><font color="#CCCCCC"> show</font>

272
00:12:34,839 --> 00:12:43,750
you<font color="#E5E5E5"> some results in this</font><font color="#CCCCCC"> table i show</font>

273
00:12:39,190 --> 00:12:47,110
you basically the second column<font color="#E5E5E5"> is the</font>

274
00:12:43,750 --> 00:12:48,730
<font color="#CCCCCC">past delay that takes from the</font>

275
00:12:47,110 --> 00:12:51,760
vulnerability disclosure and as you can

276
00:12:48,730 --> 00:12:54,519
see there are negative values what this

277
00:12:51,760 --> 00:12:56,620
means it means<font color="#E5E5E5"> that some application</font>

278
00:12:54,519 --> 00:12:59,079
starts to pass before the vulnerability

279
00:12:56,620 --> 00:13:00,970
disclosure this because probably<font color="#E5E5E5"> the</font>

280
00:12:59,079 --> 00:13:02,529
developers already know the problem and

281
00:13:00,970 --> 00:13:05,230
they start to patch before the

282
00:13:02,529 --> 00:13:08,860
vulnerability disclosure then we have

283
00:13:05,230 --> 00:13:10,779
<font color="#E5E5E5">the two milestones that are how the the</font>

284
00:13:08,860 --> 00:13:13,449
<font color="#E5E5E5">patching evolves over time for google</font>

285
00:13:10,779 --> 00:13:16,360
chrome that had automatic updates since

286
00:13:13,449 --> 00:13:19,000
its beginning it takes<font color="#E5E5E5"> only 15 days</font><font color="#CCCCCC"> to</font>

287
00:13:16,360 --> 00:13:20,709
reach fifty percent of the machines for

288
00:13:19,000 --> 00:13:22,390
under percent of our cluster but it

289
00:13:20,709 --> 00:13:25,119
takes more than 200 days to

290
00:13:22,390 --> 00:13:27,699
each day ninety percent milestone but

291
00:13:25,120 --> 00:13:29,710
it's still the fastest application on

292
00:13:27,700 --> 00:13:32,740
the<font color="#CCCCCC"> other</font><font color="#E5E5E5"> end if you see white shark</font>

293
00:13:29,710 --> 00:13:37,360
that our during our observation period

294
00:13:32,740 --> 00:13:39,760
had completely manual updates it doesn't

295
00:13:37,360 --> 00:13:42,460
reach any milestone during our

296
00:13:39,760 --> 00:13:44,620
observation period now<font color="#CCCCCC"> I will show</font><font color="#E5E5E5"> you</font>

297
00:13:42,460 --> 00:13:46,240
how<font color="#E5E5E5"> the</font><font color="#CCCCCC"> shallot code impacts the</font>

298
00:13:44,620 --> 00:13:50,140
vulnerability patching so this<font color="#E5E5E5"> is</font>

299
00:13:46,240 --> 00:13:51,790
another plot of survival analysis but as

300
00:13:50,140 --> 00:13:54,430
you can see here we have<font color="#E5E5E5"> taught</font>

301
00:13:51,790 --> 00:13:56,410
locations and the same vulnerability so

302
00:13:54,430 --> 00:13:58,150
the idea<font color="#E5E5E5"> that should pop up in your mind</font>

303
00:13:56,410 --> 00:14:00,819
immediately is<font color="#E5E5E5"> that these two lines</font>

304
00:13:58,150 --> 00:14:02,949
should overlap because it's the same

305
00:14:00,820 --> 00:14:06,250
vulnerability but they are patched

306
00:14:02,950 --> 00:14:09,130
differently so what we have found is

307
00:14:06,250 --> 00:14:11,560
that we have found 80<font color="#CCCCCC"> Verner abilities</font>

308
00:14:09,130 --> 00:14:13,750
in application that are sharing code and

309
00:14:11,560 --> 00:14:17,229
the median difference between the

310
00:14:13,750 --> 00:14:19,030
patching is 11 days<font color="#E5E5E5"> but we had like the</font>

311
00:14:17,230 --> 00:14:21,070
extreme case that is the maximum<font color="#CCCCCC"> that</font>

312
00:14:19,030 --> 00:14:25,740
two applications with with<font color="#CCCCCC"> shanna</font><font color="#E5E5E5"> code</font>

313
00:14:21,070 --> 00:14:28,450
had a difference of patching of 118 days

314
00:14:25,740 --> 00:14:31,330
so now<font color="#CCCCCC"> I will show you what we have done</font>

315
00:14:28,450 --> 00:14:36,160
in order to see if the user category

316
00:14:31,330 --> 00:14:38,350
influences the patching rate so we have

317
00:14:36,160 --> 00:14:41,680
identified<font color="#E5E5E5"> different user categories</font>

318
00:14:38,350 --> 00:14:43,780
this this<font color="#E5E5E5"> is a picture for all the users</font>

319
00:14:41,680 --> 00:14:46,390
then we have software professionals

320
00:14:43,780 --> 00:14:48,579
developers and security analyst how we

321
00:14:46,390 --> 00:14:51,699
selected them based on the application

322
00:14:48,580 --> 00:14:53,470
that they use for example<font color="#E5E5E5"> they the use</font>

323
00:14:51,700 --> 00:14:55,540
of the software professional we use

324
00:14:53,470 --> 00:14:59,560
application like<font color="#CCCCCC"> sap or sigh tricks</font>

325
00:14:55,540 --> 00:15:02,230
while the developers will use Eclipse

326
00:14:59,560 --> 00:15:06,099
NetBeans visual studio subversion

327
00:15:02,230 --> 00:15:08,200
<font color="#E5E5E5">mercurial and the security analyst is</font>

328
00:15:06,100 --> 00:15:12,190
going to use either pro Wireshark all

329
00:15:08,200 --> 00:15:16,900
dbg so all the users patch in a<font color="#E5E5E5"> median</font>

330
00:15:12,190 --> 00:15:22,660
time of 45 days then the developers in

331
00:15:16,900 --> 00:15:26,800
45 in 24 days the professionals in 30

332
00:15:22,660 --> 00:15:29,500
days and the security analysts in 18

333
00:15:26,800 --> 00:15:32,620
days so this could really help cyber

334
00:15:29,500 --> 00:15:35,320
insurance because we dis profiling you

335
00:15:32,620 --> 00:15:36,110
can basically design at a low rate

336
00:15:35,320 --> 00:15:40,760
policy

337
00:15:36,110 --> 00:15:44,000
for each user category and now let me

338
00:15:40,760 --> 00:15:45,829
<font color="#CCCCCC">show you how</font><font color="#E5E5E5"> to exploit impact on the</font>

339
00:15:44,000 --> 00:15:48,860
vulnerability patching in this plot you

340
00:15:45,829 --> 00:15:53,870
<font color="#E5E5E5">can see the same survival analysis but</font>

341
00:15:48,860 --> 00:15:57,740
we reported the number of days after<font color="#E5E5E5"> we</font>

342
00:15:53,870 --> 00:15:59,750
reported the number of days<font color="#E5E5E5"> after</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> de</font>

343
00:15:57,740 --> 00:16:02,600
<font color="#E5E5E5">passively is released when they exploit</font>

344
00:15:59,750 --> 00:16:05,690
appear in the world and<font color="#E5E5E5"> basically we</font>

345
00:16:02,600 --> 00:16:07,610
found that only fourteen percent of the

346
00:16:05,690 --> 00:16:10,250
<font color="#CCCCCC">Earth's are patched when the exploits</font>

347
00:16:07,610 --> 00:16:12,860
are available we did this only 450 for

348
00:16:10,250 --> 00:16:16,149
vulnerabilities because we could found

349
00:16:12,860 --> 00:16:19,550
the release date only<font color="#E5E5E5"> 450 for exploits</font>

350
00:16:16,149 --> 00:16:23,450
so wrapping up what we have<font color="#E5E5E5"> done in this</font>

351
00:16:19,550 --> 00:16:25,069
work and so basically<font color="#E5E5E5"> it would be really</font>

352
00:16:23,450 --> 00:16:28,700
interesting<font color="#CCCCCC"> to consolidate the patching</font>

353
00:16:25,070 --> 00:16:31,430
mechanism it means if you have a shallot

354
00:16:28,700 --> 00:16:33,290
code is needed to<font color="#CCCCCC"> have a single</font>

355
00:16:31,430 --> 00:16:36,019
application that will handle and<font color="#CCCCCC"> elytte</font>

356
00:16:33,290 --> 00:16:38,480
and of course having an installer that

357
00:16:36,019 --> 00:16:40,820
is going to check if you<font color="#CCCCCC"> have a prior</font>

358
00:16:38,480 --> 00:16:42,740
version and it's going to uninstall it

359
00:16:40,820 --> 00:16:45,199
if you install a new version it would be

360
00:16:42,740 --> 00:16:47,870
really helpful and<font color="#E5E5E5"> also we propose a</font>

361
00:16:45,199 --> 00:16:50,300
wild idea that could be basically

362
00:16:47,870 --> 00:16:53,140
managing updates for library in a

363
00:16:50,300 --> 00:16:57,140
different way with separate applications

364
00:16:53,140 --> 00:16:59,390
so in this work we have<font color="#E5E5E5"> analyzed roughly</font>

365
00:16:57,140 --> 00:17:00,939
1,600 vulnerabilities for 10

366
00:16:59,390 --> 00:17:03,890
applications over a period of five years

367
00:17:00,940 --> 00:17:05,209
we show that the linear life cycle for

368
00:17:03,890 --> 00:17:08,059
vulnerabilities is not descriptive

369
00:17:05,209 --> 00:17:12,079
enough especially in case of<font color="#CCCCCC"> Shalott</font>

370
00:17:08,059 --> 00:17:14,750
code we we developed two new attacks

371
00:17:12,079 --> 00:17:17,000
against shallot code we<font color="#E5E5E5"> measured which</font>

372
00:17:14,750 --> 00:17:22,160
is the user impact based on categories

373
00:17:17,000 --> 00:17:24,199
on the patching delay and we<font color="#E5E5E5"> propose a</font>

374
00:17:22,160 --> 00:17:27,860
general technique to map the files and

375
00:17:24,199 --> 00:17:30,020
realize survival analysis so thank you

376
00:17:27,859 --> 00:17:32,059
very<font color="#E5E5E5"> much I will take questions now and</font>

377
00:17:30,020 --> 00:17:33,980
please if you are interested to see the

378
00:17:32,059 --> 00:17:37,100
errors that<font color="#E5E5E5"> we have found in the nvd</font>

379
00:17:33,980 --> 00:17:39,400
please visit clean dash and<font color="#CCCCCC"> VD com thank</font>

380
00:17:37,100 --> 00:17:39,399
you very much

381
00:17:42,610 --> 00:17:53,090
thanks Antonio we have time for two

382
00:17:44,960 --> 00:17:54,830
questions hi kami vania<font color="#E5E5E5"> Indiana</font>

383
00:17:53,090 --> 00:17:57,260
<font color="#E5E5E5">University you were mentioning the</font>

384
00:17:54,830 --> 00:17:59,000
average time to patch for the various

385
00:17:57,260 --> 00:18:02,900
groups i'm curious what the ranges

386
00:17:59,000 --> 00:18:06,140
looked like so we're users more our

387
00:18:02,900 --> 00:18:08,029
normal users<font color="#E5E5E5"> more inclined to to cluster</font>

388
00:18:06,140 --> 00:18:12,230
around that mean or you seeing a very

389
00:18:08,029 --> 00:18:13,820
<font color="#E5E5E5">wide range and you essentially what are</font>

390
00:18:12,230 --> 00:18:15,919
the standard deviations look like for

391
00:18:13,820 --> 00:18:18,139
those different groups I'm sorry I

392
00:18:15,919 --> 00:18:20,779
didn't understand your question<font color="#E5E5E5"> I</font>

393
00:18:18,140 --> 00:18:22,610
imagine end users do not all patch and

394
00:18:20,779 --> 00:18:27,080
it's for life please please quickly

395
00:18:22,610 --> 00:18:31,490
because<font color="#CCCCCC"> okay um I imagine end users do</font>

396
00:18:27,080 --> 00:18:34,100
not patch at all 45 days so there's a

397
00:18:31,490 --> 00:18:36,230
range right there's<font color="#CCCCCC"> gbhs I'm curious</font>

398
00:18:34,100 --> 00:18:39,189
with the standard deviation differences

399
00:18:36,230 --> 00:18:41,929
are between<font color="#E5E5E5"> the groups so are you seeing</font>

400
00:18:39,190 --> 00:18:45,080
the differences between developers in

401
00:18:41,929 --> 00:18:52,309
their range of times patch from end

402
00:18:45,080 --> 00:18:55,549
users well<font color="#E5E5E5"> I think the difference is not</font>

403
00:18:52,309 --> 00:18:58,700
really huge so basically the median that

404
00:18:55,549 --> 00:19:01,639
we have measured is saying more or less

405
00:18:58,700 --> 00:19:02,960
<font color="#CCCCCC">what we have observed so there</font><font color="#E5E5E5"> is not a</font>

406
00:19:01,640 --> 00:19:06,950
huge difference between the user

407
00:19:02,960 --> 00:19:09,169
categories the difference is that the

408
00:19:06,950 --> 00:19:11,419
groups of users<font color="#CCCCCC"> are different the size</font>

409
00:19:09,169 --> 00:19:13,760
of the groups of users are different so

410
00:19:11,419 --> 00:19:17,390
there are<font color="#E5E5E5"> less security analysts there</font>

411
00:19:13,760 --> 00:19:23,890
are less developers but the data<font color="#E5E5E5"> I mean</font>

412
00:19:17,390 --> 00:19:23,890
it's it's not really different thank you

413
00:19:24,330 --> 00:19:28,360
so I just<font color="#E5E5E5"> have one quick question so</font>

414
00:19:26,590 --> 00:19:29,980
have<font color="#CCCCCC"> you how did you go about picking</font>

415
00:19:28,360 --> 00:19:32,679
the<font color="#E5E5E5"> applications should I didn't see</font>

416
00:19:29,980 --> 00:19:35,170
java on that list for example so why

417
00:19:32,680 --> 00:19:37,840
didn't<font color="#E5E5E5"> you pick Java as I mean it's one</font>

418
00:19:35,170 --> 00:19:41,110
of the most<font color="#CCCCCC"> exploited applications well</font>

419
00:19:37,840 --> 00:19:44,169
I think<font color="#E5E5E5"> we we selected the application</font>

420
00:19:41,110 --> 00:19:48,939
also based on what<font color="#E5E5E5"> was</font><font color="#CCCCCC"> the availability</font>

421
00:19:44,170 --> 00:19:51,850
of the main executable because when you

422
00:19:48,940 --> 00:19:54,220
stole Java maybe the version it's not

423
00:19:51,850 --> 00:19:56,590
included in the<font color="#E5E5E5"> file</font><font color="#CCCCCC"> that is the main</font>

424
00:19:54,220 --> 00:19:58,540
executable so you cannot track<font color="#E5E5E5"> without</font>

425
00:19:56,590 --> 00:20:00,310
<font color="#E5E5E5">the version are evolving over time</font>

426
00:19:58,540 --> 00:20:02,320
that's basically why we didn't select

427
00:20:00,310 --> 00:20:05,590
Java for example<font color="#E5E5E5"> because maybe the main</font>

428
00:20:02,320 --> 00:20:07,480
executable is not reporting the actual

429
00:20:05,590 --> 00:20:10,750
version of the file so we cannot

430
00:20:07,480 --> 00:20:13,540
associate it with the because the

431
00:20:10,750 --> 00:20:17,260
problem<font color="#E5E5E5"> is you have Java 7</font><font color="#CCCCCC"> ok and</font><font color="#E5E5E5"> then</font>

432
00:20:13,540 --> 00:20:19,180
<font color="#CCCCCC">in the nvd you will see java 7 and you</font>

433
00:20:17,260 --> 00:20:21,070
don't<font color="#E5E5E5"> know to which file version it</font>

434
00:20:19,180 --> 00:20:23,530
corresponds so that's why we<font color="#E5E5E5"> didn't</font>

435
00:20:21,070 --> 00:20:25,649
select it ok now let's like the speaker

436
00:20:23,530 --> 00:20:25,649
again

