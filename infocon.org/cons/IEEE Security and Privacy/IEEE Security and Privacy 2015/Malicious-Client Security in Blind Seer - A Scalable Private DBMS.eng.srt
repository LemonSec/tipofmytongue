1
00:00:01,530 --> 00:00:08,830
thank you for the introduction<font color="#E5E5E5"> so in</font>

2
00:00:05,830 --> 00:00:11,019
this work<font color="#E5E5E5"> we present a practical and</font>

3
00:00:08,830 --> 00:00:14,460
scalable database<font color="#E5E5E5"> management system that</font>

4
00:00:11,019 --> 00:00:18,720
<font color="#E5E5E5">achieves a unique</font><font color="#CCCCCC"> combination of privacy</font>

5
00:00:14,460 --> 00:00:22,810
versatility and security the system

6
00:00:18,720 --> 00:00:24,909
achieves<font color="#E5E5E5"> both query privacy and fully</font>

7
00:00:22,810 --> 00:00:27,130
robust<font color="#E5E5E5"> access control while supporting a</font>

8
00:00:24,909 --> 00:00:30,549
rich<font color="#E5E5E5"> search functionality including</font>

9
00:00:27,130 --> 00:00:32,829
arbitrary boolean expressions it extends

10
00:00:30,550 --> 00:00:35,109
the<font color="#E5E5E5"> blind seer system which was first</font>

11
00:00:32,829 --> 00:00:37,719
<font color="#CCCCCC">presented at security and</font><font color="#E5E5E5"> privacy last</font>

12
00:00:35,109 --> 00:00:40,030
year blind seer stands for a bloom

13
00:00:37,719 --> 00:00:41,920
filter<font color="#E5E5E5"> index search of encrypted results</font>

14
00:00:40,030 --> 00:00:44,050
which alludes to<font color="#E5E5E5"> its use</font><font color="#CCCCCC"> of encrypted</font>

15
00:00:41,920 --> 00:00:47,500
bloom filters for supporting private

16
00:00:44,050 --> 00:00:49,599
<font color="#E5E5E5">search over encrypted data the goals of</font>

17
00:00:47,500 --> 00:00:52,300
blind seer<font color="#E5E5E5"> are threefold</font><font color="#CCCCCC"> one to protect</font>

18
00:00:49,600 --> 00:00:54,910
<font color="#CCCCCC">the privacy of a client's query</font><font color="#E5E5E5"> from the</font>

19
00:00:52,300 --> 00:00:56,709
server<font color="#E5E5E5"> two to protect the data in the</font>

20
00:00:54,910 --> 00:00:58,779
server so that<font color="#E5E5E5"> the client cannot learn</font>

21
00:00:56,710 --> 00:01:01,600
<font color="#E5E5E5">anything about the database</font><font color="#CCCCCC"> other than</font>

22
00:00:58,780 --> 00:01:03,730
the<font color="#E5E5E5"> results of its query and finally to</font>

23
00:01:01,600 --> 00:01:06,160
implement access control in the form of

24
00:01:03,730 --> 00:01:08,200
policies restricting what queries the

25
00:01:06,160 --> 00:01:10,560
client can ask<font color="#E5E5E5"> even</font><font color="#CCCCCC"> though those queries</font>

26
00:01:08,200 --> 00:01:14,770
are kept private

27
00:01:10,560 --> 00:01:16,480
however a drawback<font color="#E5E5E5"> of blind seer</font><font color="#CCCCCC"> in its</font>

28
00:01:14,770 --> 00:01:19,869
original<font color="#E5E5E5"> form was</font><font color="#CCCCCC"> that the access</font>

29
00:01:16,480 --> 00:01:22,180
control was not<font color="#E5E5E5"> robust</font><font color="#CCCCCC"> it was only</font>

30
00:01:19,870 --> 00:01:24,670
<font color="#CCCCCC">secured against a so-called</font><font color="#E5E5E5"> semi honest</font>

31
00:01:22,180 --> 00:01:26,380
client<font color="#E5E5E5"> however</font><font color="#CCCCCC"> a malicious client could</font>

32
00:01:24,670 --> 00:01:28,440
really ask<font color="#E5E5E5"> any question and wanted at</font>

33
00:01:26,380 --> 00:01:31,960
the database<font color="#CCCCCC"> without risk</font><font color="#E5E5E5"> of detection</font>

34
00:01:28,440 --> 00:01:34,780
<font color="#E5E5E5">so our result obtains fully robust</font>

35
00:01:31,960 --> 00:01:39,300
<font color="#E5E5E5">access control without sacrificing on</font>

36
00:01:34,780 --> 00:01:41,920
query privacy or overall performance

37
00:01:39,300 --> 00:01:44,860
<font color="#E5E5E5">private database query is an age-old</font>

38
00:01:41,920 --> 00:01:47,470
problem in cryptography<font color="#CCCCCC"> in</font><font color="#E5E5E5"> its most</font>

39
00:01:44,860 --> 00:01:49,930
general form<font color="#E5E5E5"> a client sends a query to</font><font color="#CCCCCC"> a</font>

40
00:01:47,470 --> 00:01:51,340
server who holds a database and ideally

41
00:01:49,930 --> 00:01:53,860
the server<font color="#CCCCCC"> should learn nothing about</font>

42
00:01:51,340 --> 00:01:55,510
the<font color="#E5E5E5"> query and the client should learn</font>

43
00:01:53,860 --> 00:01:57,700
nothing about the<font color="#E5E5E5"> database other than</font>

44
00:01:55,510 --> 00:02:00,250
the<font color="#E5E5E5"> results of its query there are a</font>

45
00:01:57,700 --> 00:02:01,990
host of perfect theoretical solutions to

46
00:02:00,250 --> 00:02:04,090
this problem<font color="#CCCCCC"> that can be built from such</font>

47
00:02:01,990 --> 00:02:06,669
primitives as secure function evaluation

48
00:02:04,090 --> 00:02:07,950
private information retrieval and more

49
00:02:06,670 --> 00:02:10,330
recently fully homomorphic encryption

50
00:02:07,950 --> 00:02:12,330
<font color="#E5E5E5">but the ongoing challenge is in</font>

51
00:02:10,330 --> 00:02:15,510
designing truly practical<font color="#E5E5E5"> solution</font>

52
00:02:12,330 --> 00:02:20,340
<font color="#CCCCCC">this</font><font color="#E5E5E5"> problem especially</font><font color="#CCCCCC"> for large-scale</font>

53
00:02:15,510 --> 00:02:22,410
<font color="#E5E5E5">databases in fact there is a fundamental</font>

54
00:02:20,340 --> 00:02:24,240
limitation<font color="#E5E5E5"> on the efficiency of perfect</font>

55
00:02:22,410 --> 00:02:27,840
solutions to this problem with a single

56
00:02:24,240 --> 00:02:29,400
server and single client<font color="#E5E5E5"> for the to</font>

57
00:02:27,840 --> 00:02:31,140
completely hide<font color="#E5E5E5"> the query from the</font>

58
00:02:29,400 --> 00:02:33,330
server the<font color="#CCCCCC"> server would be required to</font>

59
00:02:31,140 --> 00:02:34,859
do a linear<font color="#E5E5E5"> amount of work in the size</font>

60
00:02:33,330 --> 00:02:36,900
of the<font color="#E5E5E5"> database if it doesn't examine</font>

61
00:02:34,860 --> 00:02:39,510
<font color="#E5E5E5">every record at its database on a query</font>

62
00:02:36,900 --> 00:02:41,250
then it will at least<font color="#E5E5E5"> discover what</font>

63
00:02:39,510 --> 00:02:45,060
information is not<font color="#CCCCCC"> being returned by the</font>

64
00:02:41,250 --> 00:02:47,610
query so practical approaches to this

65
00:02:45,060 --> 00:02:49,740
problem<font color="#CCCCCC"> turn to</font><font color="#E5E5E5"> relaxed models such as a</font>

66
00:02:47,610 --> 00:02:52,440
split server model where the server<font color="#E5E5E5"> is</font>

67
00:02:49,740 --> 00:02:54,270
split into two<font color="#E5E5E5"> non polluting entities</font>

68
00:02:52,440 --> 00:02:56,490
one can be thought<font color="#E5E5E5"> of as</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> data owner</font>

69
00:02:54,270 --> 00:02:57,240
and another a proxy server<font color="#CCCCCC"> that</font>

70
00:02:56,490 --> 00:03:00,150
facilitates

71
00:02:57,240 --> 00:03:02,910
<font color="#E5E5E5">the search protocol and the privacy of</font>

72
00:03:00,150 --> 00:03:05,100
the queries should be held with<font color="#CCCCCC"> respect</font>

73
00:03:02,910 --> 00:03:07,590
to both the<font color="#E5E5E5"> index server and the server</font>

74
00:03:05,100 --> 00:03:09,359
<font color="#E5E5E5">as long as they are not colluding and in</font>

75
00:03:07,590 --> 00:03:11,340
this setting<font color="#CCCCCC"> sublinear solutions are</font>

76
00:03:09,360 --> 00:03:13,830
possible<font color="#E5E5E5"> now this is the model that</font>

77
00:03:11,340 --> 00:03:16,140
blind seer follows<font color="#E5E5E5"> in blind seer</font><font color="#CCCCCC"> the</font>

78
00:03:13,830 --> 00:03:18,420
<font color="#CCCCCC">server is the</font><font color="#E5E5E5"> data owner it builds an</font>

79
00:03:16,140 --> 00:03:20,730
encrypted index to its database<font color="#CCCCCC"> that it</font>

80
00:03:18,420 --> 00:03:22,440
sends<font color="#CCCCCC"> to</font><font color="#E5E5E5"> what we call the index server</font>

81
00:03:20,730 --> 00:03:26,970
<font color="#CCCCCC">sorry it's cut off in the</font><font color="#E5E5E5"> slide index</font>

82
00:03:22,440 --> 00:03:29,579
server and the<font color="#CCCCCC"> index server interacts</font>

83
00:03:26,970 --> 00:03:33,090
with the client<font color="#CCCCCC"> to process the clients</font>

84
00:03:29,580 --> 00:03:35,280
private query on its encrypted index the

85
00:03:33,090 --> 00:03:37,830
client receives<font color="#E5E5E5"> back encrypted records</font>

86
00:03:35,280 --> 00:03:39,510
<font color="#E5E5E5">that satisfy its query and finally</font>

87
00:03:37,830 --> 00:03:41,489
receives decryption keys to decrypt

88
00:03:39,510 --> 00:03:43,049
<font color="#CCCCCC">these records from the server but in a</font>

89
00:03:41,489 --> 00:03:44,519
way that<font color="#CCCCCC"> hides from</font><font color="#E5E5E5"> the server the</font>

90
00:03:43,050 --> 00:03:46,400
identities of the records that<font color="#CCCCCC"> are</font>

91
00:03:44,519 --> 00:03:49,769
actually being<font color="#E5E5E5"> returned</font>

92
00:03:46,400 --> 00:03:52,140
there is a<font color="#CCCCCC"> fourth entity that</font><font color="#E5E5E5"> we call</font>

93
00:03:49,769 --> 00:03:55,080
the query checker<font color="#E5E5E5"> whose responsibility</font>

94
00:03:52,140 --> 00:03:57,238
is<font color="#E5E5E5"> to enforce a policy restricting what</font>

95
00:03:55,080 --> 00:03:59,489
questions the client can ask<font color="#E5E5E5"> without</font>

96
00:03:57,239 --> 00:04:01,860
knowing what the<font color="#E5E5E5"> clients</font><font color="#CCCCCC"> questions are</font>

97
00:03:59,489 --> 00:04:03,690
now the query checker can be logically

98
00:04:01,860 --> 00:04:05,220
<font color="#E5E5E5">associated with either the server or</font><font color="#CCCCCC"> the</font>

99
00:04:03,690 --> 00:04:07,200
index server we only depict it<font color="#E5E5E5"> as a</font>

100
00:04:05,220 --> 00:04:13,739
separate<font color="#E5E5E5"> entity for sake of generality</font>

101
00:04:07,200 --> 00:04:17,789
<font color="#CCCCCC">so blind seer</font><font color="#E5E5E5"> achieved provable query</font>

102
00:04:13,739 --> 00:04:20,548
privacy and data security up<font color="#E5E5E5"> to bounded</font>

103
00:04:17,790 --> 00:04:23,280
information that is leaked<font color="#E5E5E5"> in the form</font>

104
00:04:20,548 --> 00:04:25,070
of randomized<font color="#E5E5E5"> data access and query</font>

105
00:04:23,280 --> 00:04:28,309
patterns now this trade-off<font color="#E5E5E5"> allowed</font>

106
00:04:25,070 --> 00:04:30,700
- you know achieve a combination of

107
00:04:28,310 --> 00:04:35,150
security privacy and efficiency<font color="#E5E5E5"> and</font>

108
00:04:30,700 --> 00:04:38,390
versatility<font color="#CCCCCC"> that was not before achieved</font>

109
00:04:35,150 --> 00:04:40,580
<font color="#E5E5E5">so it supports a very rich query set</font>

110
00:04:38,390 --> 00:04:43,340
including arbitrary boolean formulas

111
00:04:40,580 --> 00:04:45,469
<font color="#E5E5E5">over both keyword searches range</font>

112
00:04:43,340 --> 00:04:48,260
searches and more and<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> performance</font>

113
00:04:45,470 --> 00:04:50,450
<font color="#E5E5E5">was comparable to my sequel performing</font>

114
00:04:48,260 --> 00:04:53,030
within<font color="#CCCCCC"> a factor</font><font color="#E5E5E5"> 3 on many queries and</font>

115
00:04:50,450 --> 00:04:56,620
was<font color="#E5E5E5"> tested on database sizes ranging</font><font color="#CCCCCC"> to</font>

116
00:04:53,030 --> 00:04:56,619
<font color="#E5E5E5">10 terabytes with 100 million records</font>

117
00:04:57,130 --> 00:05:02,480
previous work on private database

118
00:04:59,690 --> 00:05:05,150
systems<font color="#E5E5E5"> was either theoretical in nature</font>

119
00:05:02,480 --> 00:05:06,800
<font color="#CCCCCC">or practical</font><font color="#E5E5E5"> would achieve privacy only</font>

120
00:05:05,150 --> 00:05:09,590
for<font color="#E5E5E5"> limited</font><font color="#CCCCCC"> functionalities such</font><font color="#E5E5E5"> as</font>

121
00:05:06,800 --> 00:05:12,500
single<font color="#E5E5E5"> keyword searches or conjunction</font>

122
00:05:09,590 --> 00:05:14,030
queries<font color="#CCCCCC"> now there is a long line</font><font color="#E5E5E5"> of</font>

123
00:05:12,500 --> 00:05:16,760
works<font color="#E5E5E5"> on searchable symmetric encryption</font>

124
00:05:14,030 --> 00:05:19,090
<font color="#E5E5E5">which</font><font color="#CCCCCC"> addresses</font><font color="#E5E5E5"> a special setting where</font>

125
00:05:16,760 --> 00:05:21,560
the client is<font color="#CCCCCC"> the owner</font><font color="#E5E5E5"> of the data and</font>

126
00:05:19,090 --> 00:05:23,960
wants to<font color="#E5E5E5"> search over</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> encrypted data</font>

127
00:05:21,560 --> 00:05:26,150
say held in a cloud server<font color="#E5E5E5"> and in that</font>

128
00:05:23,960 --> 00:05:30,799
<font color="#E5E5E5">setting it's not a consideration to keep</font>

129
00:05:26,150 --> 00:05:32,630
the data private from the client<font color="#E5E5E5"> system</font>

130
00:05:30,800 --> 00:05:35,990
more recent systems that have having

131
00:05:32,630 --> 00:05:38,080
have incorporated<font color="#CCCCCC"> SSE</font><font color="#E5E5E5"> into extended</font>

132
00:05:35,990 --> 00:05:39,950
applications such as<font color="#CCCCCC"> crip DB and</font><font color="#E5E5E5"> miler</font>

133
00:05:38,080 --> 00:05:42,409
<font color="#E5E5E5">and there have been other practical</font>

134
00:05:39,950 --> 00:05:43,880
systems that that support limited<font color="#CCCCCC"> search</font>

135
00:05:42,410 --> 00:05:46,640
functionality such as<font color="#E5E5E5"> single keyword in</font>

136
00:05:43,880 --> 00:05:48,350
conjunction queries<font color="#E5E5E5"> but recently there</font>

137
00:05:46,640 --> 00:05:50,630
were two systems blind Cyrano's<font color="#CCCCCC"> bureau</font>

138
00:05:48,350 --> 00:05:53,420
XD<font color="#E5E5E5"> that were concurrently developed and</font>

139
00:05:50,630 --> 00:05:56,330
they really achieved a breakthrough<font color="#E5E5E5"> in</font>

140
00:05:53,420 --> 00:05:58,550
combining<font color="#E5E5E5"> provable privacy</font><font color="#CCCCCC"> functionality</font>

141
00:05:56,330 --> 00:06:00,380
and performance<font color="#CCCCCC"> each system achieves</font>

142
00:05:58,550 --> 00:06:02,840
different trade-offs<font color="#CCCCCC"> between</font><font color="#E5E5E5"> security</font>

143
00:06:00,380 --> 00:06:05,420
privacy<font color="#CCCCCC"> and functionality performance</font>

144
00:06:02,840 --> 00:06:08,510
<font color="#E5E5E5">and are most appropriate for different</font>

145
00:06:05,420 --> 00:06:10,190
<font color="#E5E5E5">application scenarios but the weakness</font>

146
00:06:08,510 --> 00:06:12,469
in<font color="#CCCCCC"> blind seer which is the focus of this</font>

147
00:06:10,190 --> 00:06:16,490
work was that<font color="#E5E5E5"> the access control was not</font>

148
00:06:12,470 --> 00:06:19,250
<font color="#CCCCCC">secured against</font><font color="#E5E5E5"> a malicious client now</font>

149
00:06:16,490 --> 00:06:22,250
granted the servers are<font color="#CCCCCC"> also assumed to</font>

150
00:06:19,250 --> 00:06:24,260
<font color="#E5E5E5">be semi honest</font><font color="#CCCCCC"> but we see the fact that</font>

151
00:06:22,250 --> 00:06:26,150
the client<font color="#CCCCCC"> cannot be malicious</font><font color="#E5E5E5"> as a more</font>

152
00:06:24,260 --> 00:06:28,250
significant issue in<font color="#E5E5E5"> a database where</font>

153
00:06:26,150 --> 00:06:30,409
<font color="#E5E5E5">this privacy of the clients query is not</font>

154
00:06:28,250 --> 00:06:32,090
<font color="#E5E5E5">important you can trivially implement</font>

155
00:06:30,410 --> 00:06:34,610
robust access<font color="#CCCCCC"> control by prohibiting</font>

156
00:06:32,090 --> 00:06:36,279
queries that<font color="#CCCCCC"> are not allowed so in</font>

157
00:06:34,610 --> 00:06:38,319
offering search privacy

158
00:06:36,279 --> 00:06:43,808
<font color="#CCCCCC">blinder shouldn't sacrifice on on a</font>

159
00:06:38,319 --> 00:06:45,159
basic tenets<font color="#CCCCCC"> of of database security now</font>

160
00:06:43,809 --> 00:06:47,379
implies here there are two separate

161
00:06:45,159 --> 00:06:50,409
protocols there is a search protocol to

162
00:06:47,379 --> 00:06:53,349
evaluate the query on the database<font color="#E5E5E5"> and a</font>

163
00:06:50,409 --> 00:06:56,009
policy protocol to evaluate the policy

164
00:06:53,349 --> 00:06:58,569
on<font color="#E5E5E5"> the query in both of these procedures</font>

165
00:06:56,009 --> 00:07:00,549
<font color="#CCCCCC">the query is kept private</font>

166
00:06:58,569 --> 00:07:02,409
using a cryptographic protocol known as

167
00:07:00,549 --> 00:07:05,229
secure function evaluation which was

168
00:07:02,409 --> 00:07:09,819
talked about in in<font color="#CCCCCC"> previous talks in</font>

169
00:07:05,229 --> 00:07:11,679
<font color="#E5E5E5">this session and but the the</font>

170
00:07:09,819 --> 00:07:14,860
vulnerability<font color="#E5E5E5"> is that the client can</font>

171
00:07:11,679 --> 00:07:16,869
submit entirely separate queries<font color="#CCCCCC"> to the</font>

172
00:07:14,860 --> 00:07:20,319
database search protocol and the policy

173
00:07:16,869 --> 00:07:23,319
check protocol so our solution<font color="#E5E5E5"> uses a</font>

174
00:07:20,319 --> 00:07:24,789
<font color="#E5E5E5">simple trick</font><font color="#CCCCCC"> we still maintain</font><font color="#E5E5E5"> the same</font>

175
00:07:23,319 --> 00:07:26,319
<font color="#E5E5E5">architecture and we use and we use</font>

176
00:07:24,789 --> 00:07:28,509
<font color="#E5E5E5">secure function evaluation in both</font>

177
00:07:26,319 --> 00:07:30,399
procedures but we use a simple<font color="#E5E5E5"> trick</font><font color="#CCCCCC"> to</font>

178
00:07:28,509 --> 00:07:32,919
<font color="#E5E5E5">prevent this vulnerability</font><font color="#CCCCCC"> now in order</font>

179
00:07:30,399 --> 00:07:35,199
<font color="#E5E5E5">to explain this trick I'm going to again</font>

180
00:07:32,919 --> 00:07:38,229
review briefly<font color="#CCCCCC"> secure function</font>

181
00:07:35,199 --> 00:07:39,609
evaluation<font color="#CCCCCC"> it was talked about</font><font color="#E5E5E5"> in the</font>

182
00:07:38,229 --> 00:07:41,739
talk on<font color="#E5E5E5"> tiny car bolt but I'll</font>

183
00:07:39,609 --> 00:07:45,008
reintroduce the basic concepts<font color="#CCCCCC"> so in</font>

184
00:07:41,739 --> 00:07:47,679
this primitive<font color="#E5E5E5"> two parties will engage</font>

185
00:07:45,009 --> 00:07:49,239
in a<font color="#CCCCCC"> computation that</font><font color="#E5E5E5"> will allow one</font><font color="#CCCCCC"> or</font>

186
00:07:47,679 --> 00:07:51,909
both of the<font color="#CCCCCC"> parties</font><font color="#E5E5E5"> to learn the output</font>

187
00:07:49,239 --> 00:07:54,609
of a function<font color="#CCCCCC"> while there are inputs to</font>

188
00:07:51,909 --> 00:07:57,610
the function<font color="#E5E5E5"> remain secret our</font>

189
00:07:54,610 --> 00:07:59,709
implementation<font color="#E5E5E5"> uses garbled circuits</font>

190
00:07:57,610 --> 00:08:03,429
<font color="#E5E5E5">which was also</font><font color="#CCCCCC"> mentioned in</font><font color="#E5E5E5"> that in</font><font color="#CCCCCC"> the</font>

191
00:07:59,709 --> 00:08:05,829
<font color="#E5E5E5">tiny</font><font color="#CCCCCC"> garbled paper in a garbled circuit</font>

192
00:08:03,429 --> 00:08:08,109
protocol<font color="#CCCCCC"> we</font><font color="#E5E5E5"> represent the circuit as a</font>

193
00:08:05,829 --> 00:08:10,869
boolean<font color="#E5E5E5"> we represent the function as a</font>

194
00:08:08,110 --> 00:08:12,519
<font color="#E5E5E5">boolean</font><font color="#CCCCCC"> circuit and a garbled</font><font color="#E5E5E5"> circuit is</font>

195
00:08:10,869 --> 00:08:14,709
essentially<font color="#E5E5E5"> an encrypted version of that</font>

196
00:08:12,519 --> 00:08:17,589
circuit one party<font color="#E5E5E5"> that we call the</font>

197
00:08:14,709 --> 00:08:19,149
generator<font color="#CCCCCC"> essentially replaces each gate</font>

198
00:08:17,589 --> 00:08:20,979
of the circuit with<font color="#E5E5E5"> ciphertext and</font>

199
00:08:19,149 --> 00:08:23,619
chooses different decryption keys

200
00:08:20,979 --> 00:08:27,519
corresponding to the different<font color="#E5E5E5"> possible</font>

201
00:08:23,619 --> 00:08:30,369
inputs to<font color="#CCCCCC"> that gate this generator then</font>

202
00:08:27,519 --> 00:08:32,500
transfers<font color="#E5E5E5"> the</font><font color="#CCCCCC"> garbled circuit along</font><font color="#E5E5E5"> with</font>

203
00:08:30,369 --> 00:08:35,229
the keys corresponding to its own inputs

204
00:08:32,500 --> 00:08:37,919
to the circuit<font color="#E5E5E5"> it sends these to the</font>

205
00:08:35,229 --> 00:08:40,059
evaluator party and the evaluator

206
00:08:37,919 --> 00:08:42,218
additionally obtains through an

207
00:08:40,058 --> 00:08:44,350
oblivious transfer the keys that

208
00:08:42,219 --> 00:08:46,179
<font color="#E5E5E5">correspond to each of its own inputs to</font>

209
00:08:44,350 --> 00:08:48,850
the circuit once it obtains<font color="#E5E5E5"> all these</font>

210
00:08:46,179 --> 00:08:49,779
keys it is<font color="#E5E5E5"> able to decrypt the value out</font>

211
00:08:48,850 --> 00:08:52,279
<font color="#CCCCCC">of the circuit</font>

212
00:08:49,779 --> 00:08:55,610
so garbled circuits are actually very

213
00:08:52,279 --> 00:08:57,589
fast for small circuits<font color="#E5E5E5"> and using the</font>

214
00:08:55,610 --> 00:08:59,240
<font color="#E5E5E5">optimization called the free</font><font color="#CCCCCC"> x-ray</font>

215
00:08:57,589 --> 00:09:02,600
technique introduced by<font color="#CCCCCC"> kolesnikova</font>

216
00:08:59,240 --> 00:09:05,690
<font color="#CCCCCC">Nider in 2008</font><font color="#E5E5E5"> XOR gates in the circuit</font>

217
00:09:02,600 --> 00:09:07,370
<font color="#E5E5E5">don't actually contribute noticeably to</font>

218
00:09:05,690 --> 00:09:10,910
the overall computation time of a

219
00:09:07,370 --> 00:09:14,930
garbled circuit now<font color="#CCCCCC"> garbled circuit</font>

220
00:09:10,910 --> 00:09:18,050
protocols<font color="#E5E5E5"> are they preserve the privacy</font>

221
00:09:14,930 --> 00:09:20,060
<font color="#CCCCCC">of the inputs but they assume</font><font color="#E5E5E5"> a semi</font>

222
00:09:18,050 --> 00:09:23,240
honest generator meaning a generator

223
00:09:20,060 --> 00:09:25,939
<font color="#E5E5E5">that</font><font color="#CCCCCC"> is trusted to</font><font color="#E5E5E5"> indeed garble the</font>

224
00:09:23,240 --> 00:09:27,589
specified function<font color="#E5E5E5"> being evaluated but</font>

225
00:09:25,940 --> 00:09:30,170
on the other<font color="#CCCCCC"> hand the evaluator can</font>

226
00:09:27,589 --> 00:09:32,060
actually be malicious<font color="#E5E5E5"> alternatively you</font>

227
00:09:30,170 --> 00:09:33,890
<font color="#E5E5E5">can think of it as</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> semi</font><font color="#CCCCCC"> private</font>

228
00:09:32,060 --> 00:09:36,890
function evaluation where one party<font color="#CCCCCC"> can</font>

229
00:09:33,890 --> 00:09:38,839
choose a function<font color="#E5E5E5"> of its own choice and</font>

230
00:09:36,890 --> 00:09:44,240
<font color="#E5E5E5">the second party will only learn the</font>

231
00:09:38,839 --> 00:09:47,149
<font color="#CCCCCC">topology of</font><font color="#E5E5E5"> the function we use garbled</font>

232
00:09:44,240 --> 00:09:49,790
circuits in both the policy protocol and

233
00:09:47,149 --> 00:09:51,770
the search protocol in blind seer<font color="#E5E5E5"> but</font>

234
00:09:49,790 --> 00:09:54,800
<font color="#E5E5E5">the client plays different roles in</font>

235
00:09:51,770 --> 00:09:57,560
<font color="#E5E5E5">these two</font><font color="#CCCCCC"> procedures</font><font color="#E5E5E5"> in one person</font><font color="#CCCCCC"> in</font>

236
00:09:54,800 --> 00:09:59,329
the in<font color="#E5E5E5"> the search protocol the client</font>

237
00:09:57,560 --> 00:10:01,040
acts as the generator<font color="#E5E5E5"> of the garbled</font>

238
00:09:59,329 --> 00:10:03,170
circuit it generates a query circuit

239
00:10:01,040 --> 00:10:04,699
<font color="#E5E5E5">corresponding</font><font color="#CCCCCC"> to its query</font><font color="#E5E5E5"> and that</font>

240
00:10:03,170 --> 00:10:07,099
circuit<font color="#E5E5E5"> is then evaluated</font><font color="#CCCCCC"> on the</font>

241
00:10:04,700 --> 00:10:09,079
<font color="#E5E5E5">server's end on the database on the</font>

242
00:10:07,100 --> 00:10:11,600
other hand in the policy protocol the

243
00:10:09,079 --> 00:10:14,660
query checker generates a garbled<font color="#E5E5E5"> policy</font>

244
00:10:11,600 --> 00:10:17,149
circuit representing the policy and the

245
00:10:14,660 --> 00:10:19,189
client<font color="#E5E5E5"> acts as the evaluator in this</font>

246
00:10:17,149 --> 00:10:22,760
procedure<font color="#E5E5E5"> evaluating the</font><font color="#CCCCCC"> policy circuit</font>

247
00:10:19,190 --> 00:10:24,649
<font color="#E5E5E5">on its own query it obtains through an</font>

248
00:10:22,760 --> 00:10:27,079
oblivious transfer<font color="#CCCCCC"> Keys corresponding to</font>

249
00:10:24,649 --> 00:10:28,700
its query inputs<font color="#E5E5E5"> so this is the root</font>

250
00:10:27,079 --> 00:10:30,529
<font color="#CCCCCC">cause of the malicious client</font>

251
00:10:28,700 --> 00:10:33,079
vulnerability because nothing guarantees

252
00:10:30,529 --> 00:10:35,810
that<font color="#E5E5E5"> the keys</font><font color="#CCCCCC"> that the client obtains in</font>

253
00:10:33,079 --> 00:10:39,199
the<font color="#E5E5E5"> policy circuit</font><font color="#CCCCCC"> evaluation at all</font>

254
00:10:35,810 --> 00:10:40,699
represent the<font color="#CCCCCC"> same query as the garbled</font>

255
00:10:39,200 --> 00:10:44,570
query circuit<font color="#E5E5E5"> that it produces</font><font color="#CCCCCC"> for the</font>

256
00:10:40,700 --> 00:10:47,600
search protocol now in general obtaining

257
00:10:44,570 --> 00:10:49,579
practical malicious security in

258
00:10:47,600 --> 00:10:51,709
in secure function evaluation protocols

259
00:10:49,579 --> 00:10:53,660
is a difficult problem<font color="#E5E5E5"> semi honest</font>

260
00:10:51,709 --> 00:10:56,000
secure<font color="#CCCCCC"> sfe protocols are orders of</font>

261
00:10:53,660 --> 00:10:58,759
<font color="#E5E5E5">magnitude</font><font color="#CCCCCC"> more efficient</font><font color="#E5E5E5"> and although</font>

262
00:10:56,000 --> 00:11:01,070
generic transformations of semi honest

263
00:10:58,759 --> 00:11:04,190
to malicious protocols exists they incur

264
00:11:01,070 --> 00:11:05,779
impractical overheads<font color="#CCCCCC"> in general</font><font color="#E5E5E5"> in our</font>

265
00:11:04,190 --> 00:11:07,579
case we are<font color="#E5E5E5"> dealing with a special case</font>

266
00:11:05,779 --> 00:11:09,259
where we only need one<font color="#E5E5E5"> party</font><font color="#CCCCCC"> to be</font>

267
00:11:07,579 --> 00:11:10,459
malicious namely the client<font color="#E5E5E5"> and we</font>

268
00:11:09,259 --> 00:11:12,800
already<font color="#E5E5E5"> saw the garbled circuit</font>

269
00:11:10,459 --> 00:11:14,660
protocols are<font color="#E5E5E5"> secured against one</font>

270
00:11:12,800 --> 00:11:18,258
malicious party the evaluator<font color="#CCCCCC"> the</font>

271
00:11:14,660 --> 00:11:20,180
problem is that the client does<font color="#CCCCCC"> not play</font>

272
00:11:18,259 --> 00:11:22,459
the role of evaluator in both the search

273
00:11:20,180 --> 00:11:25,160
protocol and the policy evaluation

274
00:11:22,459 --> 00:11:27,439
protocol so the our idea is to<font color="#CCCCCC"> make the</font>

275
00:11:25,160 --> 00:11:33,050
<font color="#E5E5E5">client the evaluator</font><font color="#CCCCCC"> in both of these</font>

276
00:11:27,440 --> 00:11:34,970
protocols<font color="#E5E5E5"> as the generator the server</font>

277
00:11:33,050 --> 00:11:38,060
will be<font color="#CCCCCC"> able to cryptographically bind</font>

278
00:11:34,970 --> 00:11:41,029
<font color="#E5E5E5">the</font><font color="#CCCCCC"> clients inputs to these different</font>

279
00:11:38,060 --> 00:11:44,359
circuits simply by<font color="#CCCCCC"> synchronizing the</font>

280
00:11:41,029 --> 00:11:46,130
keys that<font color="#CCCCCC"> it will use to</font><font color="#E5E5E5"> evaluate these</font>

281
00:11:44,360 --> 00:11:47,600
circuits<font color="#E5E5E5"> you can think of this as</font><font color="#CCCCCC"> giving</font>

282
00:11:46,130 --> 00:11:51,050
the client one key for<font color="#E5E5E5"> two</font><font color="#CCCCCC"> different</font>

283
00:11:47,600 --> 00:11:52,819
locks the main question is how<font color="#E5E5E5"> can the</font>

284
00:11:51,050 --> 00:11:54,889
server generate the query circuit

285
00:11:52,819 --> 00:11:57,380
without<font color="#E5E5E5"> knowing the query and</font><font color="#CCCCCC"> the answer</font>

286
00:11:54,889 --> 00:11:59,720
is to use<font color="#CCCCCC"> a</font><font color="#E5E5E5"> universal circuit that will</font>

287
00:11:57,380 --> 00:12:01,399
take the query as input<font color="#E5E5E5"> now it's very</font>

288
00:11:59,720 --> 00:12:04,339
nice that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> tiny garbled paper also</font>

289
00:12:01,399 --> 00:12:05,360
talked about<font color="#CCCCCC"> universal circuits</font><font color="#E5E5E5"> and it</font>

290
00:12:04,339 --> 00:12:08,690
mentioned<font color="#E5E5E5"> that you can generate</font>

291
00:12:05,360 --> 00:12:10,399
<font color="#E5E5E5">Universal circuit</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> will simulate any</font>

292
00:12:08,690 --> 00:12:12,019
circuit of size<font color="#E5E5E5"> K essentially takes the</font>

293
00:12:10,399 --> 00:12:15,970
input description<font color="#CCCCCC"> of a circuit</font><font color="#E5E5E5"> of size K</font>

294
00:12:12,019 --> 00:12:19,190
and some value and<font color="#CCCCCC"> will output C of X</font>

295
00:12:15,970 --> 00:12:21,829
but the cost of those constructions are

296
00:12:19,190 --> 00:12:23,930
expensive<font color="#E5E5E5"> and perhaps</font><font color="#CCCCCC"> using</font><font color="#E5E5E5"> tiny garble</font>

297
00:12:21,829 --> 00:12:29,089
will actually be relevant in this case

298
00:12:23,930 --> 00:12:32,209
as well but in our case we achieved

299
00:12:29,089 --> 00:12:34,130
efficiency<font color="#CCCCCC"> a different way</font><font color="#E5E5E5"> so again so</font>

300
00:12:32,209 --> 00:12:35,869
the known constructions<font color="#E5E5E5"> of universal</font>

301
00:12:34,130 --> 00:12:38,269
circuits just increase the circuit size

302
00:12:35,870 --> 00:12:40,420
by a<font color="#E5E5E5"> tremendous amount so inserting them</font>

303
00:12:38,269 --> 00:12:42,529
into<font color="#CCCCCC"> a garbled circuit protocol will be</font>

304
00:12:40,420 --> 00:12:44,990
expensive<font color="#E5E5E5"> and will certainly cause a</font>

305
00:12:42,529 --> 00:12:48,079
performance<font color="#E5E5E5"> Satan in blind seer but in</font>

306
00:12:44,990 --> 00:12:49,490
in blind seer the<font color="#E5E5E5"> query circuits because</font>

307
00:12:48,079 --> 00:12:52,699
we're using garbled circuit protocols

308
00:12:49,490 --> 00:12:54,949
they do not hide the<font color="#CCCCCC"> topology of the of</font>

309
00:12:52,699 --> 00:12:56,930
the of the query the queries topology is

310
00:12:54,949 --> 00:12:57,769
actually known to<font color="#E5E5E5"> both the server and</font>

311
00:12:56,930 --> 00:12:59,689
<font color="#CCCCCC">the client</font>

312
00:12:57,769 --> 00:13:01,699
so the topology<font color="#E5E5E5"> is not private</font><font color="#CCCCCC"> and</font>

313
00:12:59,689 --> 00:13:03,649
second the private part<font color="#E5E5E5"> of the circuit</font>

314
00:13:01,699 --> 00:13:04,729
is actually monotone all the gates in

315
00:13:03,649 --> 00:13:07,310
the private part of<font color="#E5E5E5"> the circuit are</font>

316
00:13:04,730 --> 00:13:08,720
either and or or gates<font color="#E5E5E5"> for reasons</font><font color="#CCCCCC"> that</font>

317
00:13:07,310 --> 00:13:12,619
I<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> have time to go into in this</font>

318
00:13:08,720 --> 00:13:15,290
talk<font color="#CCCCCC"> but what we're able to do is come</font>

319
00:13:12,620 --> 00:13:17,360
up<font color="#CCCCCC"> with a very cheap construction of a</font>

320
00:13:15,290 --> 00:13:19,430
universal circuit<font color="#E5E5E5"> that will simulate any</font>

321
00:13:17,360 --> 00:13:22,189
monotone circuit with a<font color="#E5E5E5"> given topology</font>

322
00:13:19,430 --> 00:13:25,279
<font color="#E5E5E5">and it incurs absolutely no overhead in</font>

323
00:13:22,189 --> 00:13:26,360
a garbled circuit evaluation<font color="#E5E5E5"> so I'll</font>

324
00:13:25,279 --> 00:13:28,370
explain<font color="#E5E5E5"> the construction the</font>

325
00:13:26,360 --> 00:13:31,180
construction<font color="#E5E5E5"> is actually very</font><font color="#CCCCCC"> simple so</font>

326
00:13:28,370 --> 00:13:33,439
think of the<font color="#E5E5E5"> original circuit and</font>

327
00:13:31,180 --> 00:13:36,529
<font color="#E5E5E5">replace each gate with just a question</font>

328
00:13:33,439 --> 00:13:38,899
mark and now define<font color="#E5E5E5"> the circuit to take</font>

329
00:13:36,529 --> 00:13:40,579
in<font color="#E5E5E5"> three inputs to every gate two of the</font>

330
00:13:38,899 --> 00:13:41,750
inputs<font color="#CCCCCC"> will be</font><font color="#E5E5E5"> the original inputs and</font>

331
00:13:40,579 --> 00:13:43,250
then there will<font color="#E5E5E5"> be a third bit that just</font>

332
00:13:41,750 --> 00:13:47,079
<font color="#E5E5E5">determines the functionality</font><font color="#CCCCCC"> of that</font>

333
00:13:43,250 --> 00:13:49,670
<font color="#E5E5E5">gate either a NAND gate or</font><font color="#CCCCCC"> a nor gate</font>

334
00:13:47,079 --> 00:13:51,888
now in transforming this<font color="#CCCCCC"> into a binary</font>

335
00:13:49,670 --> 00:13:54,079
circuit we<font color="#CCCCCC"> necessarily have to increase</font>

336
00:13:51,889 --> 00:13:56,089
the circuit size by a factor<font color="#CCCCCC"> four</font><font color="#E5E5E5"> but</font>

337
00:13:54,079 --> 00:13:58,729
we're able<font color="#E5E5E5"> to do that without increasing</font>

338
00:13:56,089 --> 00:14:00,380
<font color="#CCCCCC">the number</font><font color="#E5E5E5"> of non XOR gates so as you</font>

339
00:13:58,730 --> 00:14:02,420
can<font color="#E5E5E5"> see here each gate is replaced with</font>

340
00:14:00,380 --> 00:14:05,269
<font color="#E5E5E5">this</font><font color="#CCCCCC"> gadget of</font><font color="#E5E5E5"> three XOR gates and one</font>

341
00:14:02,420 --> 00:14:07,670
or gate<font color="#CCCCCC"> and because XOR gates</font><font color="#E5E5E5"> as I</font>

342
00:14:05,269 --> 00:14:10,069
mentioned come for free<font color="#E5E5E5"> in garbled</font>

343
00:14:07,670 --> 00:14:12,199
circuit<font color="#CCCCCC"> evaluation protocols the cost of</font>

344
00:14:10,069 --> 00:14:14,240
<font color="#E5E5E5">evaluating this</font><font color="#CCCCCC"> Universal query circuit</font>

345
00:14:12,199 --> 00:14:15,769
is no more than<font color="#CCCCCC"> the original cut than</font>

346
00:14:14,240 --> 00:14:18,949
the cost of evaluating the original

347
00:14:15,769 --> 00:14:21,529
circuit<font color="#E5E5E5"> so in summary the index server</font>

348
00:14:18,949 --> 00:14:23,540
will garble a<font color="#CCCCCC"> universal query circuit</font>

349
00:14:21,529 --> 00:14:25,970
<font color="#E5E5E5">that it sends to the client</font><font color="#CCCCCC"> the query</font>

350
00:14:23,540 --> 00:14:27,949
checker will garble a policy circuit

351
00:14:25,970 --> 00:14:30,889
they will synchronize the keys<font color="#CCCCCC"> that they</font>

352
00:14:27,949 --> 00:14:32,870
use in both of these garbling<font color="#E5E5E5"> in both of</font>

353
00:14:30,889 --> 00:14:34,699
these garbled circuits<font color="#E5E5E5"> and the client</font>

354
00:14:32,870 --> 00:14:36,709
will then obtain one set of keys

355
00:14:34,699 --> 00:14:41,260
corresponding to its query<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it will</font>

356
00:14:36,709 --> 00:14:41,260
use to<font color="#CCCCCC"> evaluate both of these circuits</font>

357
00:14:42,040 --> 00:14:47,000
we<font color="#E5E5E5"> analyze the</font><font color="#CCCCCC"> performance of this</font>

358
00:14:45,050 --> 00:14:49,010
improved system on the same database

359
00:14:47,000 --> 00:14:51,589
<font color="#E5E5E5">that the original system was evaluated</font>

360
00:14:49,010 --> 00:14:54,439
on it was a<font color="#E5E5E5"> 100 million record database</font>

361
00:14:51,589 --> 00:14:56,990
of mock<font color="#E5E5E5"> US census data when</font><font color="#CCCCCC"> we showed as</font>

362
00:14:54,439 --> 00:14:59,750
expected<font color="#E5E5E5"> that the performance did not</font>

363
00:14:56,990 --> 00:15:02,230
degrade<font color="#CCCCCC"> this compares the performance of</font>

364
00:14:59,750 --> 00:15:05,810
the two systems<font color="#CCCCCC"> for single term queries</font>

365
00:15:02,230 --> 00:15:09,740
for<font color="#E5E5E5"> three term boolean queries and</font>

366
00:15:05,810 --> 00:15:13,520
for more complex range queries we also

367
00:15:09,740 --> 00:15:17,180
compare we also compared<font color="#CCCCCC"> the</font><font color="#E5E5E5"> performance</font>

368
00:15:13,520 --> 00:15:19,579
of<font color="#E5E5E5"> blinds here to the to my sequel again</font>

369
00:15:17,180 --> 00:15:21,800
this time introducing parallelization

370
00:15:19,580 --> 00:15:25,490
inside the search protocol which was not

371
00:15:21,800 --> 00:15:27,140
<font color="#E5E5E5">done in the original system so this</font><font color="#CCCCCC"> was</font>

372
00:15:25,490 --> 00:15:30,290
sort of<font color="#CCCCCC"> secondary work that we also did</font>

373
00:15:27,140 --> 00:15:33,529
<font color="#E5E5E5">as a part of this project</font><font color="#CCCCCC"> and we showed</font>

374
00:15:30,290 --> 00:15:37,250
that<font color="#E5E5E5"> the system performs within a factor</font>

375
00:15:33,529 --> 00:15:38,839
<font color="#E5E5E5">3 of my sequel on all queries and this</font>

376
00:15:37,250 --> 00:15:40,550
difference<font color="#CCCCCC"> becomes</font><font color="#E5E5E5"> obviously less</font>

377
00:15:38,839 --> 00:15:42,050
noticeable when<font color="#E5E5E5"> you include the</font><font color="#CCCCCC"> time it</font>

378
00:15:40,550 --> 00:15:44,329
<font color="#E5E5E5">takes to transfer</font><font color="#CCCCCC"> the payload at the</font>

379
00:15:42,050 --> 00:15:47,060
database to the client so in<font color="#CCCCCC"> conclusion</font>

380
00:15:44,330 --> 00:15:49,010
our<font color="#CCCCCC"> main result is</font><font color="#E5E5E5"> that we achieved</font>

381
00:15:47,060 --> 00:15:51,619
malicious client security<font color="#CCCCCC"> in blind seer</font>

382
00:15:49,010 --> 00:15:53,480
<font color="#E5E5E5">or robust access control we proved our</font>

383
00:15:51,620 --> 00:15:55,610
security cryptographically<font color="#E5E5E5"> there was no</font>

384
00:15:53,480 --> 00:15:58,089
degradation and<font color="#E5E5E5"> in the privacy of the</font>

385
00:15:55,610 --> 00:16:01,339
query<font color="#CCCCCC"> and no significant cost in</font>

386
00:15:58,089 --> 00:16:03,700
performance so thank you<font color="#E5E5E5"> very much and</font>

387
00:16:01,339 --> 00:16:03,700
I'll take questions

388
00:16:11,089 --> 00:16:17,160
<font color="#CCCCCC">the truck so what are your assumptions</font>

389
00:16:15,480 --> 00:16:22,980
about collusion between<font color="#E5E5E5"> the query</font>

390
00:16:17,160 --> 00:16:26,160
checker and the index server right<font color="#E5E5E5"> so in</font>

391
00:16:22,980 --> 00:16:27,899
theory the the query checker<font color="#E5E5E5"> could be a</font>

392
00:16:26,160 --> 00:16:30,300
logically associated with the index

393
00:16:27,899 --> 00:16:33,269
server<font color="#CCCCCC"> we would actually in in our</font>

394
00:16:30,300 --> 00:16:35,010
<font color="#E5E5E5">implementation we assume that there is</font>

395
00:16:33,269 --> 00:16:37,260
no collusion<font color="#CCCCCC"> between</font><font color="#E5E5E5"> the index server</font>

396
00:16:35,010 --> 00:16:39,240
and<font color="#E5E5E5"> the and the query checker</font><font color="#CCCCCC"> so we</font>

397
00:16:37,260 --> 00:16:41,550
could<font color="#E5E5E5"> not just simply logically</font>

398
00:16:39,240 --> 00:16:43,230
associate them right here<font color="#CCCCCC"> but what we</font>

399
00:16:41,550 --> 00:16:44,819
would we would<font color="#E5E5E5"> have to change around</font><font color="#CCCCCC"> it</font>

400
00:16:43,230 --> 00:16:46,709
would not be too difficult<font color="#CCCCCC"> and I can</font>

401
00:16:44,820 --> 00:16:49,139
<font color="#E5E5E5">explain the details but it would not be</font>

402
00:16:46,709 --> 00:16:51,060
<font color="#CCCCCC">too difficult</font><font color="#E5E5E5"> to run the query checker</font>

403
00:16:49,139 --> 00:16:54,209
<font color="#CCCCCC">on</font><font color="#E5E5E5"> the index server and then involve the</font>

404
00:16:51,060 --> 00:16:55,949
server more in that<font color="#E5E5E5"> computation so you</font>

405
00:16:54,209 --> 00:16:58,849
do need<font color="#E5E5E5"> three you do need to non</font>

406
00:16:55,949 --> 00:17:01,740
<font color="#E5E5E5">colluding parties</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> that protocol but</font>

407
00:16:58,850 --> 00:17:04,260
we could logically associate the query

408
00:17:01,740 --> 00:17:06,449
checker with the index server or the or

409
00:17:04,260 --> 00:17:08,099
<font color="#CCCCCC">the server I'm wondering about</font><font color="#E5E5E5"> the case</font>

410
00:17:06,449 --> 00:17:09,900
<font color="#CCCCCC">word</font><font color="#E5E5E5"> so someone has to decide that</font>

411
00:17:08,099 --> 00:17:14,698
policy<font color="#E5E5E5"> that the query checker is</font>

412
00:17:09,900 --> 00:17:17,100
enforcing and then if the query checker

413
00:17:14,699 --> 00:17:19,290
is malicious<font color="#E5E5E5"> it could try to learn more</font>

414
00:17:17,099 --> 00:17:21,359
<font color="#CCCCCC">about the queries by adjusting</font><font color="#E5E5E5"> that</font>

415
00:17:19,290 --> 00:17:27,540
policy<font color="#E5E5E5"> more than you would learn by the</font>

416
00:17:21,359 --> 00:17:29,428
original<font color="#E5E5E5"> policy</font><font color="#CCCCCC"> yes but so the what can</font>

417
00:17:27,540 --> 00:17:31,740
you clarify though what your question is

418
00:17:29,429 --> 00:17:33,809
<font color="#CCCCCC">so are you</font><font color="#E5E5E5"> asking whether the query</font>

419
00:17:31,740 --> 00:17:36,450
checker will learn anything<font color="#E5E5E5"> about the</font>

420
00:17:33,809 --> 00:17:38,820
<font color="#E5E5E5">queries yes so if the query</font><font color="#CCCCCC"> checker is</font>

421
00:17:36,450 --> 00:17:40,110
malicious<font color="#CCCCCC"> mm-hmm it could change the</font>

422
00:17:38,820 --> 00:17:41,909
policy in ways that would leak

423
00:17:40,110 --> 00:17:44,250
information<font color="#CCCCCC"> about the query based on</font>

424
00:17:41,910 --> 00:17:46,410
whether the query<font color="#E5E5E5"> violates the new</font>

425
00:17:44,250 --> 00:17:47,669
policy<font color="#CCCCCC"> or</font><font color="#E5E5E5"> not yes that is true</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> query</font>

426
00:17:46,410 --> 00:17:53,000
checker is assumed<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be semi honest</font>

427
00:17:47,669 --> 00:17:55,470
just as the index servers<font color="#E5E5E5"> okay yeah in</font>

428
00:17:53,000 --> 00:17:57,570
achieving malicious security against<font color="#E5E5E5"> the</font>

429
00:17:55,470 --> 00:18:00,780
server<font color="#E5E5E5"> would be a great</font><font color="#CCCCCC"> result for</font><font color="#E5E5E5"> this</font>

430
00:17:57,570 --> 00:18:02,129
system but and perhaps<font color="#E5E5E5"> you can see this</font>

431
00:18:00,780 --> 00:18:04,230
as sort of a stepping<font color="#E5E5E5"> stone towards</font>

432
00:18:02,130 --> 00:18:06,360
<font color="#E5E5E5">malicious secured against the server but</font>

433
00:18:04,230 --> 00:18:07,950
while we're<font color="#CCCCCC"> able to achieve malicious</font>

434
00:18:06,360 --> 00:18:09,270
security against<font color="#E5E5E5"> the client we're not</font>

435
00:18:07,950 --> 00:18:11,010
<font color="#E5E5E5">able to achieve malicious security</font>

436
00:18:09,270 --> 00:18:13,350
<font color="#E5E5E5">against the server okay yeah so that</font>

437
00:18:11,010 --> 00:18:15,570
<font color="#CCCCCC">makes sense yeah</font><font color="#E5E5E5"> all of</font><font color="#CCCCCC"> the other</font>

438
00:18:13,350 --> 00:18:18,949
entities<font color="#E5E5E5"> are non colluding and some way</font>

439
00:18:15,570 --> 00:18:18,950
<font color="#E5E5E5">on us exactly yes</font>

440
00:18:19,000 --> 00:18:22,690
<font color="#E5E5E5">other questions okay</font>

