1
00:00:00,040 --> 00:00:06,490
okay so<font color="#E5E5E5"> uh welcome to this talk on</font>

2
00:00:04,180 --> 00:00:09,190
automatic inference of search patterns

3
00:00:06,490 --> 00:00:11,230
for change style vulnerabilities my name

4
00:00:09,190 --> 00:00:14,230
is Fabian Yamaguchi and what I'm about

5
00:00:11,230 --> 00:00:16,960
<font color="#E5E5E5">to present is joint work with Ivan Maya</font>

6
00:00:14,230 --> 00:00:19,780
who ohh gasps<font color="#CCCCCC"> coal and Conrad week and</font>

7
00:00:16,960 --> 00:00:23,920
we're all from the University<font color="#CCCCCC"> of getting</font>

8
00:00:19,780 --> 00:00:26,680
in Germany so before we talk about

9
00:00:23,920 --> 00:00:28,000
automatically inferring anything let's

10
00:00:26,680 --> 00:00:31,900
take<font color="#E5E5E5"> a look at</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> taint style</font>

11
00:00:28,000 --> 00:00:33,760
vulnerability is so this is a this<font color="#CCCCCC"> is a</font>

12
00:00:31,900 --> 00:00:36,550
common theme that's been popping up in

13
00:00:33,760 --> 00:00:39,220
recent research papers on a

14
00:00:36,550 --> 00:00:40,959
vulnerability discovery and the idea is

15
00:00:39,220 --> 00:00:43,239
there is<font color="#E5E5E5"> some sort of attacker</font>

16
00:00:40,960 --> 00:00:45,670
controlled source and the<font color="#E5E5E5"> data from this</font>

17
00:00:43,240 --> 00:00:48,130
attacker controlled source propagates to

18
00:00:45,670 --> 00:00:50,650
<font color="#CCCCCC">a sensitive sink and there's some sort</font>

19
00:00:48,130 --> 00:00:53,610
of check missing right and fortunately

20
00:00:50,650 --> 00:00:56,739
for us well there are prominent

21
00:00:53,610 --> 00:00:59,019
vulnerabilities with logos that<font color="#CCCCCC"> are</font>

22
00:00:56,739 --> 00:01:00,449
examples of these kinds of bugs so for

23
00:00:59,020 --> 00:01:03,820
<font color="#E5E5E5">example the heartbleed vulnerability</font>

24
00:01:00,450 --> 00:01:06,030
that you see here in the back that's<font color="#E5E5E5"> a</font>

25
00:01:03,820 --> 00:01:11,620
<font color="#E5E5E5">good example so here you have this flow</font>

26
00:01:06,030 --> 00:01:14,850
from a function n to s to the third

27
00:01:11,620 --> 00:01:18,700
argument of a mem copy operation and

28
00:01:14,850 --> 00:01:22,990
well in this case the attacker controls

29
00:01:18,700 --> 00:01:26,610
the amount of<font color="#E5E5E5"> data to copy and this</font>

30
00:01:22,990 --> 00:01:30,250
<font color="#E5E5E5">essentially lets them then disclose</font>

31
00:01:26,610 --> 00:01:33,070
things which are<font color="#CCCCCC"> passed the buffer in a</font>

32
00:01:30,250 --> 00:01:34,750
packet that is<font color="#E5E5E5"> being sent back and in a</font>

33
00:01:33,070 --> 00:01:36,779
green<font color="#E5E5E5"> you can see the check that was</font>

34
00:01:34,750 --> 00:01:39,250
eventually introduced to fix this

35
00:01:36,780 --> 00:01:42,720
vulnerability but in the initial

36
00:01:39,250 --> 00:01:46,030
vulnerability this check was not there

37
00:01:42,720 --> 00:01:48,548
now a lot<font color="#CCCCCC"> of different kinds of bugs fit</font>

38
00:01:46,030 --> 00:01:50,200
<font color="#E5E5E5">this theme very well so lots of</font>

39
00:01:48,549 --> 00:01:52,119
different<font color="#CCCCCC"> kinds</font><font color="#E5E5E5"> of memory corruption and</font>

40
00:01:50,200 --> 00:01:55,000
as you just saw memory disclosure bugs

41
00:01:52,119 --> 00:01:58,180
in C programs about<font color="#CCCCCC"> for overflows buffer</font>

42
00:01:55,000 --> 00:02:01,420
/ rates but also this fits web

43
00:01:58,180 --> 00:02:03,549
applications very well so SQL injection

44
00:02:01,420 --> 00:02:06,220
and command injection would be other

45
00:02:03,549 --> 00:02:09,819
examples so this discussion is not so

46
00:02:06,220 --> 00:02:12,209
much limited to see cooked now in<font color="#E5E5E5"> our</font>

47
00:02:09,818 --> 00:02:14,010
previous work at last year's conference

48
00:02:12,209 --> 00:02:16,110
we presented

49
00:02:14,010 --> 00:02:19,099
approach to identify different kinds<font color="#E5E5E5"> of</font>

50
00:02:16,110 --> 00:02:22,019
bugs including<font color="#E5E5E5"> paint style</font>

51
00:02:19,099 --> 00:02:24,810
vulnerabilities in particular and what

52
00:02:22,019 --> 00:02:26,849
we did<font color="#E5E5E5"> was</font><font color="#CCCCCC"> we presented a joint data</font>

53
00:02:24,810 --> 00:02:30,650
structure<font color="#CCCCCC"> that we call the court</font>

54
00:02:26,849 --> 00:02:35,190
property graph and it exposes syntax

55
00:02:30,650 --> 00:02:37,260
control flow and also data<font color="#E5E5E5"> flow and the</font>

56
00:02:35,190 --> 00:02:39,930
idea is<font color="#CCCCCC"> to characterize bugs as</font>

57
00:02:37,260 --> 00:02:43,048
traversals in this graph so to do graph

58
00:02:39,930 --> 00:02:45,959
matching to find bugs so we did then was

59
00:02:43,049 --> 00:02:49,950
we took this code property graph and we

60
00:02:45,959 --> 00:02:52,379
<font color="#CCCCCC">put</font><font color="#E5E5E5"> it into a graph database and then we</font>

61
00:02:49,950 --> 00:02:54,899
<font color="#E5E5E5">formulated different kinds of templates</font>

62
00:02:52,379 --> 00:02:58,709
for different bugs that you could fill

63
00:02:54,900 --> 00:03:03,209
out to find vulnerabilities and specific

64
00:02:58,709 --> 00:03:06,389
code bases now here's what this would

65
00:03:03,209 --> 00:03:08,790
look like for the for the heartbleed

66
00:03:06,389 --> 00:03:11,190
vulnerability so you can see<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I'm</font>

67
00:03:08,790 --> 00:03:14,940
saying give<font color="#CCCCCC"> me all the calls to mem copy</font>

68
00:03:11,190 --> 00:03:18,150
and the third argument should be tainted

69
00:03:14,940 --> 00:03:21,859
by a statement<font color="#CCCCCC"> that matches the regular</font>

70
00:03:18,150 --> 00:03:26,430
expression dot star and<font color="#CCCCCC"> 2's star and</font>

71
00:03:21,859 --> 00:03:29,340
finally the this third argument should

72
00:03:26,430 --> 00:03:31,769
not be checked and this gives you kind

73
00:03:29,340 --> 00:03:34,079
of like a grep grep like functionality

74
00:03:31,769 --> 00:03:36,799
meaning<font color="#E5E5E5"> that if you know what to search</font>

75
00:03:34,079 --> 00:03:39,810
for<font color="#CCCCCC"> you can very quickly scan the code</font>

76
00:03:36,799 --> 00:03:42,329
now the<font color="#CCCCCC"> problem that you have with this</font>

77
00:03:39,810 --> 00:03:45,269
is<font color="#E5E5E5"> that usually when you take a look at</font>

78
00:03:42,329 --> 00:03:48,660
<font color="#CCCCCC">a new code base well it's</font><font color="#E5E5E5"> it's a pile of</font>

79
00:03:45,269 --> 00:03:50,910
garbage to you so you<font color="#E5E5E5"> really don't know</font>

80
00:03:48,660 --> 00:03:53,430
what to search for in<font color="#E5E5E5"> the first place so</font>

81
00:03:50,910 --> 00:03:55,829
we want<font color="#E5E5E5"> to build in this paper is more</font>

82
00:03:53,430 --> 00:03:58,560
LS like functionality so something that

83
00:03:55,829 --> 00:04:01,199
will list the different kinds of

84
00:03:58,560 --> 00:04:04,319
programming patterns which are there in

85
00:04:01,199 --> 00:04:07,379
<font color="#E5E5E5">the code base in explicit and editable</font>

86
00:04:04,319 --> 00:04:08,909
form so the<font color="#CCCCCC"> question we ask is what are</font>

87
00:04:07,379 --> 00:04:10,709
<font color="#CCCCCC">the most prominent taint style</font>

88
00:04:08,909 --> 00:04:15,780
programming patterns present in the code

89
00:04:10,709 --> 00:04:17,849
<font color="#E5E5E5">base now since this talk is limited in</font>

90
00:04:15,780 --> 00:04:20,579
time and there are a lot of technical

91
00:04:17,849 --> 00:04:22,079
details in the paper I just<font color="#E5E5E5"> want to</font>

92
00:04:20,579 --> 00:04:23,099
quickly summarize what's in there and

93
00:04:22,079 --> 00:04:25,320
we're<font color="#E5E5E5"> not going to talk about all of</font>

94
00:04:23,099 --> 00:04:27,849
this in the talks so the cure is also

95
00:04:25,320 --> 00:04:29,560
the paper are we generate these

96
00:04:27,850 --> 00:04:32,710
where is 14 style vulnerabilities and

97
00:04:29,560 --> 00:04:34,450
these queries are they formulate rules

98
00:04:32,710 --> 00:04:37,210
which are explicitly contained in the

99
00:04:34,450 --> 00:04:39,099
code base and the queries can find

100
00:04:37,210 --> 00:04:41,770
violations of these rules so missing

101
00:04:39,100 --> 00:04:44,230
checks as I already said they are

102
00:04:41,770 --> 00:04:46,840
explicit and edible<font color="#E5E5E5"> editable so that's</font>

103
00:04:44,230 --> 00:04:49,360
important it means<font color="#CCCCCC"> that all the things</font>

104
00:04:46,840 --> 00:04:52,060
<font color="#E5E5E5">that can't be automatically determined</font>

105
00:04:49,360 --> 00:04:55,120
from the code the analyst has the

106
00:04:52,060 --> 00:04:58,780
ability<font color="#CCCCCC"> to make changes to this query to</font>

107
00:04:55,120 --> 00:05:01,960
to<font color="#CCCCCC"> fine-tune it and on the way to do</font>

108
00:04:58,780 --> 00:05:03,159
this to generate these queries we need

109
00:05:01,960 --> 00:05:05,200
to address a couple of different

110
00:05:03,160 --> 00:05:07,450
<font color="#CCCCCC">problems so first of all we extended the</font>

111
00:05:05,200 --> 00:05:11,979
code property graph for interprocedural

112
00:05:07,450 --> 00:05:14,830
analysis and there's a heuristic in the

113
00:05:11,980 --> 00:05:16,660
paper to identify<font color="#E5E5E5"> our library functions</font>

114
00:05:14,830 --> 00:05:19,390
which are likely to modify their

115
00:05:16,660 --> 00:05:21,330
arguments as for<font color="#CCCCCC"> example the n2 s</font>

116
00:05:19,390 --> 00:05:24,669
function function that you saw earlier

117
00:05:21,330 --> 00:05:26,770
and there's a so-called bag of reg ex

118
00:05:24,670 --> 00:05:28,060
representation which we use and you're

119
00:05:26,770 --> 00:05:30,700
going to see<font color="#E5E5E5"> this in a moment so I'm</font>

120
00:05:28,060 --> 00:05:33,490
going to<font color="#E5E5E5"> go into detail on this right</font>

121
00:05:30,700 --> 00:05:36,340
but<font color="#E5E5E5"> first let's zoom out a bit and take</font>

122
00:05:33,490 --> 00:05:38,350
a look<font color="#E5E5E5"> at the problem so this is the</font>

123
00:05:36,340 --> 00:05:40,270
<font color="#E5E5E5">template for change style</font>

124
00:05:38,350 --> 00:05:41,830
vulnerabilities and essentially<font color="#CCCCCC"> what we</font>

125
00:05:40,270 --> 00:05:44,740
want to do is we want<font color="#E5E5E5"> to learn</font>

126
00:05:41,830 --> 00:05:48,010
parameters of this template so our model

127
00:05:44,740 --> 00:05:51,010
parameters and in particular these are

128
00:05:48,010 --> 00:05:52,719
the different initializations for the

129
00:05:51,010 --> 00:05:56,110
arguments so what do the statements<font color="#E5E5E5"> look</font>

130
00:05:52,720 --> 00:05:59,260
like and also what do the checks look

131
00:05:56,110 --> 00:06:01,510
like and well to make<font color="#E5E5E5"> this to make this</font>

132
00:05:59,260 --> 00:06:04,360
very compatible with the<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the</font>

133
00:06:01,510 --> 00:06:06,219
analyst we want these to be regular

134
00:06:04,360 --> 00:06:08,920
expressions so generated regular

135
00:06:06,220 --> 00:06:10,750
expressions and then once we have this

136
00:06:08,920 --> 00:06:12,720
you can imagine that<font color="#E5E5E5"> this program</font>

137
00:06:10,750 --> 00:06:15,520
instantiated by the model<font color="#E5E5E5"> parameters</font>

138
00:06:12,720 --> 00:06:20,320
drives around the graph and as it finds

139
00:06:15,520 --> 00:06:23,109
<font color="#E5E5E5">different matches to the to</font><font color="#CCCCCC"> the query it</font>

140
00:06:20,320 --> 00:06:27,370
will output these matches as a side

141
00:06:23,110 --> 00:06:29,200
effect now conceptually seen<font color="#CCCCCC"> ah</font><font color="#E5E5E5"> this is</font>

142
00:06:27,370 --> 00:06:32,340
a machine learning problem right so

143
00:06:29,200 --> 00:06:34,719
machine learning means you have data and

144
00:06:32,340 --> 00:06:37,270
you have the<font color="#E5E5E5"> machine runner which</font>

145
00:06:34,720 --> 00:06:40,080
generates a model for you and then<font color="#E5E5E5"> this</font>

146
00:06:37,270 --> 00:06:41,560
model can be<font color="#CCCCCC"> used to instantiate a</font>

147
00:06:40,080 --> 00:06:43,780
predictor

148
00:06:41,560 --> 00:06:47,950
and then you can<font color="#E5E5E5"> throw more data at this</font>

149
00:06:43,780 --> 00:06:50,530
predictor and it will then output well

150
00:06:47,950 --> 00:06:52,389
it will for example put the data into

151
00:06:50,530 --> 00:06:55,359
groups now I<font color="#E5E5E5"> want to stress here that</font>

152
00:06:52,389 --> 00:06:56,919
this is not this doesn't only describe

153
00:06:55,360 --> 00:06:58,960
supervised learning but this also

154
00:06:56,919 --> 00:07:03,609
describes unsupervised learning as we do

155
00:06:58,960 --> 00:07:06,340
in this without<font color="#E5E5E5"> you now learning queries</font>

156
00:07:03,610 --> 00:07:08,889
<font color="#CCCCCC">the similar so instead of the pile of</font>

157
00:07:06,340 --> 00:07:11,500
garbage we have these code property

158
00:07:08,889 --> 00:07:13,389
graphs that we use that we give to the

159
00:07:11,500 --> 00:07:16,510
learner and then it generates the

160
00:07:13,389 --> 00:07:18,550
template parameters and these template

161
00:07:16,510 --> 00:07:21,940
parameters are then used<font color="#E5E5E5"> to instantiate</font>

162
00:07:18,550 --> 00:07:23,860
the template and we get a program

163
00:07:21,940 --> 00:07:28,450
essentially that that runs over the

164
00:07:23,860 --> 00:07:30,370
graph and says vulnerable or<font color="#E5E5E5"> okay now</font>

165
00:07:28,450 --> 00:07:33,719
here's let's take<font color="#CCCCCC"> a closer look at</font>

166
00:07:30,370 --> 00:07:36,220
what's inside this easy bake oven so

167
00:07:33,720 --> 00:07:39,250
first of all we assume that<font color="#E5E5E5"> there's a</font>

168
00:07:36,220 --> 00:07:41,740
given sinks for example<font color="#E5E5E5"> you say mem copy</font>

169
00:07:39,250 --> 00:07:43,180
and now what<font color="#E5E5E5"> it does is</font><font color="#CCCCCC"> it starts to</font>

170
00:07:41,740 --> 00:07:45,669
enumerate the different kinds of

171
00:07:43,180 --> 00:07:48,640
<font color="#E5E5E5">invocations and what I mean</font><font color="#CCCCCC"> by that</font><font color="#E5E5E5"> is</font>

172
00:07:45,669 --> 00:07:50,830
that we take<font color="#E5E5E5"> a look at how are the</font>

173
00:07:48,640 --> 00:07:53,430
arguments initialized so each of them

174
00:07:50,830 --> 00:07:55,900
separately and how are they validated

175
00:07:53,430 --> 00:07:58,840
what we then<font color="#E5E5E5"> do is we try to find</font>

176
00:07:55,900 --> 00:08:01,770
similar invocations by clustering them

177
00:07:58,840 --> 00:08:04,500
and that's where<font color="#CCCCCC"> we use a bag of reg ex</font>

178
00:08:01,770 --> 00:08:07,810
mapping that you see in a minute<font color="#E5E5E5"> and</font>

179
00:08:04,500 --> 00:08:09,750
once we've performed this mapping we do

180
00:08:07,810 --> 00:08:13,000
linkage cluster so that's a costume step

181
00:08:09,750 --> 00:08:15,669
and then from each cluster we can

182
00:08:13,000 --> 00:08:19,030
instantiate these templates and i'll put

183
00:08:15,669 --> 00:08:21,159
<font color="#E5E5E5">a query where we insert the the reg ex</font>

184
00:08:19,030 --> 00:08:23,950
into this template and we're going<font color="#CCCCCC"> to</font>

185
00:08:21,160 --> 00:08:25,800
talk about these steps in detail now ok

186
00:08:23,950 --> 00:08:28,750
so first of all enumerate invocations

187
00:08:25,800 --> 00:08:31,979
what i mean by invocation is if you for

188
00:08:28,750 --> 00:08:35,169
example look at the the<font color="#E5E5E5"> call to foo here</font>

189
00:08:31,979 --> 00:08:37,449
which is inside a function bar you will

190
00:08:35,169 --> 00:08:40,838
<font color="#E5E5E5">see that our bar is being called by</font>

191
00:08:37,450 --> 00:08:42,820
other functions here<font color="#E5E5E5"> it's mu and</font><font color="#CCCCCC"> wu and</font>

192
00:08:40,839 --> 00:08:45,459
you can<font color="#E5E5E5"> imagine there are different</font>

193
00:08:42,820 --> 00:08:48,209
there<font color="#E5E5E5"> are different cases of</font>

194
00:08:45,459 --> 00:08:50,829
initializations for the variables x y&z

195
00:08:48,209 --> 00:08:54,250
and particularly if you do

196
00:08:50,830 --> 00:08:58,300
interprocedural analysis you<font color="#E5E5E5"> can</font>

197
00:08:54,250 --> 00:09:00,340
you can get<font color="#E5E5E5"> more examples of how these</font>

198
00:08:58,300 --> 00:09:03,310
functions are how the parameters are

199
00:09:00,340 --> 00:09:06,610
initialized and<font color="#CCCCCC"> now to enumerate all of</font>

200
00:09:03,310 --> 00:09:08,829
these we use so the main data structure

201
00:09:06,610 --> 00:09:12,310
that<font color="#E5E5E5"> we use here is what</font><font color="#CCCCCC"> we call a</font>

202
00:09:08,830 --> 00:09:14,470
definition graph and it's essentially we

203
00:09:12,310 --> 00:09:17,349
have a program slice for each function

204
00:09:14,470 --> 00:09:19,180
involved and we take<font color="#E5E5E5"> these programs</font>

205
00:09:17,350 --> 00:09:22,690
license again and make a graph of these

206
00:09:19,180 --> 00:09:25,540
programs slice slices that connect the

207
00:09:22,690 --> 00:09:28,330
slice to the slices of their collars

208
00:09:25,540 --> 00:09:31,360
<font color="#E5E5E5">right so</font><font color="#CCCCCC"> callers are</font><font color="#E5E5E5"> mu Andrew here and</font>

209
00:09:28,330 --> 00:09:33,850
you<font color="#E5E5E5"> can imagine that we can easily</font>

210
00:09:31,360 --> 00:09:35,950
enumerate all of the different and

211
00:09:33,850 --> 00:09:38,050
locations using this data structure so

212
00:09:35,950 --> 00:09:39,940
here's one and here would<font color="#CCCCCC"> be another and</font>

213
00:09:38,050 --> 00:09:43,959
there are a couple of others in there as

214
00:09:39,940 --> 00:09:47,440
well now what we do then is we want<font color="#CCCCCC"> to</font>

215
00:09:43,960 --> 00:09:51,940
cluster these<font color="#E5E5E5"> invocations and to do this</font>

216
00:09:47,440 --> 00:09:54,040
we<font color="#E5E5E5"> need to map them</font><font color="#CCCCCC"> to a vector space so</font>

217
00:09:51,940 --> 00:09:57,490
that we can<font color="#E5E5E5"> apply a linkage clustering</font>

218
00:09:54,040 --> 00:09:59,319
now the design of this mapping is

219
00:09:57,490 --> 00:10:02,650
crucial for the success of this and this

220
00:09:59,320 --> 00:10:05,970
<font color="#CCCCCC">is where we</font><font color="#E5E5E5"> introduce a bag of red</font><font color="#CCCCCC"> x</font>

221
00:10:02,650 --> 00:10:09,880
mapping so the idea is the following a

222
00:10:05,970 --> 00:10:13,180
naive mapping would simply associate

223
00:10:09,880 --> 00:10:16,480
each symbol that occurs in the

224
00:10:13,180 --> 00:10:21,040
statements with one dimension but<font color="#E5E5E5"> then</font>

225
00:10:16,480 --> 00:10:22,930
<font color="#E5E5E5">something like char 52 or cha 32 what</font>

226
00:10:21,040 --> 00:10:25,209
would be considered something<font color="#E5E5E5"> completely</font>

227
00:10:22,930 --> 00:10:27,430
different now that's not something we

228
00:10:25,210 --> 00:10:29,320
want what we want is we want similar

229
00:10:27,430 --> 00:10:31,750
symbols to be mapped to the same

230
00:10:29,320 --> 00:10:35,320
dimension so we first cluster the

231
00:10:31,750 --> 00:10:37,930
symbols and then we use<font color="#E5E5E5"> the vector space</font>

232
00:10:35,320 --> 00:10:41,170
that is spanned by these sets of similar

233
00:10:37,930 --> 00:10:44,349
symbols now the nice thing is there's

234
00:10:41,170 --> 00:10:46,750
previous work from signature generation

235
00:10:44,350 --> 00:10:49,990
<font color="#E5E5E5">for malware detection that shows a nice</font>

236
00:10:46,750 --> 00:10:52,300
technique where<font color="#CCCCCC"> you can take sets of</font>

237
00:10:49,990 --> 00:10:55,120
similar strings and then generate

238
00:10:52,300 --> 00:10:59,319
regular expressions from these and so

239
00:10:55,120 --> 00:11:01,480
what we get is<font color="#E5E5E5"> a vector space that is</font>

240
00:10:59,320 --> 00:11:03,640
spanned by by regular expressions<font color="#CCCCCC"> and</font>

241
00:11:01,480 --> 00:11:07,200
this is how we represent the invocations

242
00:11:03,640 --> 00:11:07,199
that we can then<font color="#E5E5E5"> cluster</font>

243
00:11:07,380 --> 00:11:12,850
now once we<font color="#CCCCCC"> have these clusters all we</font>

244
00:11:10,810 --> 00:11:15,699
need to do is we look at the nonzero

245
00:11:12,850 --> 00:11:19,690
dimensions that are common among the

246
00:11:15,699 --> 00:11:21,969
vectors inside the cluster and as I said

247
00:11:19,690 --> 00:11:23,980
each dimension corresponds to a regular

248
00:11:21,970 --> 00:11:26,680
expression<font color="#E5E5E5"> so we can simply take these</font>

249
00:11:23,980 --> 00:11:31,779
regular expressions and use them to

250
00:11:26,680 --> 00:11:35,709
instantiate the template now doing this

251
00:11:31,779 --> 00:11:40,990
for the sanitizers is conceptually the

252
00:11:35,709 --> 00:11:43,449
same we do<font color="#CCCCCC"> backward slicing to get the</font>

253
00:11:40,990 --> 00:11:45,040
controlling conditions then it becomes a

254
00:11:43,449 --> 00:11:47,920
little<font color="#CCCCCC"> more</font><font color="#E5E5E5"> difficult than in the case</font>

255
00:11:45,040 --> 00:11:50,110
<font color="#E5E5E5">of symbols because we because conditions</font>

256
00:11:47,920 --> 00:11:52,269
<font color="#CCCCCC">are trees and we need</font><font color="#E5E5E5"> to map these trees</font>

257
00:11:50,110 --> 00:11:54,880
to the<font color="#CCCCCC"> vector space but conceptually</font>

258
00:11:52,269 --> 00:11:57,760
it's exactly the<font color="#E5E5E5"> same so I'm not going</font>

259
00:11:54,880 --> 00:12:00,880
into this in detail right now<font color="#E5E5E5"> all right</font>

260
00:11:57,760 --> 00:12:03,670
so of course<font color="#E5E5E5"> we need to somehow see</font>

261
00:12:00,880 --> 00:12:07,089
whether this stuff works and what we did

262
00:12:03,670 --> 00:12:09,969
<font color="#E5E5E5">was</font><font color="#CCCCCC"> we had a controlled experiment where</font>

263
00:12:07,089 --> 00:12:11,589
for known bugs we wanted to<font color="#E5E5E5"> see whether</font>

264
00:12:09,970 --> 00:12:13,690
the system is actually<font color="#E5E5E5"> capable of</font>

265
00:12:11,589 --> 00:12:16,149
generating queries that express this bug

266
00:12:13,690 --> 00:12:17,529
and these queries when we execute them

267
00:12:16,149 --> 00:12:20,350
they should find the vulnerable

268
00:12:17,529 --> 00:12:22,389
functions and they should find very few

269
00:12:20,350 --> 00:12:25,899
other functions because these<font color="#E5E5E5"> would be</font>

270
00:12:22,389 --> 00:12:27,639
false positives so<font color="#CCCCCC"> the core question is</font>

271
00:12:25,899 --> 00:12:29,560
does the query that we have actually

272
00:12:27,639 --> 00:12:33,180
reduced the amount of code<font color="#CCCCCC"> that we need</font>

273
00:12:29,560 --> 00:12:37,060
<font color="#E5E5E5">to review so here's an overview of</font>

274
00:12:33,180 --> 00:12:40,180
results we use different code bases and

275
00:12:37,060 --> 00:12:42,540
always specify the sink and<font color="#E5E5E5"> we had each</font>

276
00:12:40,180 --> 00:12:45,010
of these code bases we had a

277
00:12:42,540 --> 00:12:47,589
vulnerability attained style

278
00:12:45,010 --> 00:12:51,250
vulnerability and we wanted to see

279
00:12:47,589 --> 00:12:53,880
whether we<font color="#CCCCCC"> could determine</font><font color="#E5E5E5"> the correct</font>

280
00:12:51,250 --> 00:12:57,510
sources and the<font color="#E5E5E5"> correct sanitizers and</font>

281
00:12:53,880 --> 00:13:01,510
in all but one case this worked<font color="#CCCCCC"> at will</font>

282
00:12:57,510 --> 00:13:05,139
and the reduction that<font color="#E5E5E5"> we got was on</font>

283
00:13:01,510 --> 00:13:08,260
average 94 dot nine percent now what you

284
00:13:05,139 --> 00:13:10,720
can<font color="#CCCCCC"> see down here is a table showing</font>

285
00:13:08,260 --> 00:13:12,430
some some of the regular expressions

286
00:13:10,720 --> 00:13:14,709
that were automatically generated by the

287
00:13:12,430 --> 00:13:17,378
system you can take a look<font color="#E5E5E5"> at this in</font>

288
00:13:14,709 --> 00:13:19,268
the paper in detail

289
00:13:17,379 --> 00:13:21,339
alright then of course we wanted to see

290
00:13:19,269 --> 00:13:23,859
what about the what about<font color="#E5E5E5"> the heartbleed</font>

291
00:13:21,339 --> 00:13:26,709
bug<font color="#E5E5E5"> would it generate for this and it's</font>

292
00:13:23,859 --> 00:13:30,069
nice<font color="#E5E5E5"> that it actually generated this dot</font>

293
00:13:26,709 --> 00:13:32,978
star and<font color="#E5E5E5"> to s dot star which we used in</font>

294
00:13:30,069 --> 00:13:36,009
our manual query but then it also found

295
00:13:32,979 --> 00:13:39,989
something<font color="#E5E5E5"> else so it it found that the</font>

296
00:13:36,009 --> 00:13:42,579
the second argument is actually<font color="#CCCCCC"> always</font>

297
00:13:39,989 --> 00:13:44,919
allocated on the heap and there's<font color="#E5E5E5"> always</font>

298
00:13:42,579 --> 00:13:47,108
a check against know right so this the

299
00:13:44,919 --> 00:13:51,549
allocation in the heap shows itself in

300
00:13:47,109 --> 00:13:54,519
this check against<font color="#E5E5E5"> no yeah and then then</font>

301
00:13:51,549 --> 00:13:56,669
we down here we<font color="#E5E5E5"> have well the checks in</font>

302
00:13:54,519 --> 00:13:59,079
there<font color="#E5E5E5"> seem</font><font color="#CCCCCC"> to always be against a number</font>

303
00:13:56,669 --> 00:14:01,509
so this<font color="#E5E5E5"> is not as generic as it could be</font>

304
00:13:59,079 --> 00:14:03,279
but as<font color="#E5E5E5"> I</font><font color="#CCCCCC"> said the analyst could now edit</font>

305
00:14:01,509 --> 00:14:05,739
this<font color="#E5E5E5"> string slightly to make this more</font>

306
00:14:03,279 --> 00:14:07,629
generic for example and<font color="#CCCCCC"> you see the</font>

307
00:14:05,739 --> 00:14:09,429
functions that<font color="#E5E5E5"> it matches so the two</font>

308
00:14:07,629 --> 00:14:11,259
<font color="#E5E5E5">functions that needed to be patched for</font>

309
00:14:09,429 --> 00:14:13,809
heartbleed are included and there are a

310
00:14:11,259 --> 00:14:15,819
couple of others but this is the entire

311
00:14:13,809 --> 00:14:18,728
listing so there's not too much extra

312
00:14:15,819 --> 00:14:20,169
code to review all right then we also

313
00:14:18,729 --> 00:14:22,600
wanted to<font color="#E5E5E5"> see whether we can actually</font>

314
00:14:20,169 --> 00:14:25,689
<font color="#CCCCCC">use this in practice to find a new</font>

315
00:14:22,600 --> 00:14:29,499
vulnerabilities and what we produced a

316
00:14:25,689 --> 00:14:30,849
lot<font color="#E5E5E5"> of different different queries but</font>

317
00:14:29,499 --> 00:14:33,819
<font color="#E5E5E5">this is one that I found particularly</font>

318
00:14:30,850 --> 00:14:37,449
nice because it already encodes a bug in

319
00:14:33,819 --> 00:14:40,748
itself so what you see<font color="#CCCCCC"> here is that the</font>

320
00:14:37,449 --> 00:14:43,029
first<font color="#E5E5E5"> argument to mem copy is actually</font>

321
00:14:40,749 --> 00:14:47,799
something<font color="#E5E5E5"> that is allocated on the stack</font>

322
00:14:43,029 --> 00:14:50,729
and it is controlled<font color="#CCCCCC"> by something</font><font color="#E5E5E5"> that</font>

323
00:14:47,799 --> 00:14:52,959
looks like<font color="#E5E5E5"> a variable called Len and</font>

324
00:14:50,729 --> 00:14:56,470
what<font color="#E5E5E5"> that means is that you can</font>

325
00:14:52,959 --> 00:14:59,649
essentially shift the stack pointer to

326
00:14:56,470 --> 00:15:04,329
possibly an arbitrary location in the

327
00:14:59,649 --> 00:15:07,689
address space to jump the guard page and

328
00:15:04,329 --> 00:15:10,179
essentially right to some memory to to

329
00:15:07,689 --> 00:15:12,608
get an exploitable condition and we

330
00:15:10,179 --> 00:15:14,858
reported all of these bugs and you can

331
00:15:12,609 --> 00:15:19,619
see some of the<font color="#CCCCCC"> cve identifiers here and</font>

332
00:15:14,859 --> 00:15:19,619
there's also of the<font color="#CCCCCC"> listing in the paper</font>

333
00:15:19,739 --> 00:15:26,470
yeah<font color="#CCCCCC"> ok that being said</font>

334
00:15:22,750 --> 00:15:28,660
I conclude what we did was we<font color="#CCCCCC"> showed</font><font color="#E5E5E5"> a</font>

335
00:15:26,470 --> 00:15:30,400
system to automatically generate<font color="#E5E5E5"> a graph</font>

336
00:15:28,660 --> 00:15:34,000
database queries from source code and

337
00:15:30,400 --> 00:15:36,490
they encode change style systems now you

338
00:15:34,000 --> 00:15:39,190
can do two things<font color="#CCCCCC"> with this you</font><font color="#E5E5E5"> can take</font>

339
00:15:36,490 --> 00:15:40,960
your<font color="#E5E5E5"> existing box and you can generate</font>

340
00:15:39,190 --> 00:15:42,820
kind of like a robust signature for the

341
00:15:40,960 --> 00:15:45,370
bug<font color="#E5E5E5"> and the second</font><font color="#CCCCCC"> thing is you can use</font>

342
00:15:42,820 --> 00:15:48,460
this as an exploration tool so if you

343
00:15:45,370 --> 00:15:51,100
look at a new code base you can you can

344
00:15:48,460 --> 00:15:53,590
<font color="#E5E5E5">ask it so what kind of flows are in here</font>

345
00:15:51,100 --> 00:15:56,140
how are the arguments to mem copy for

346
00:15:53,590 --> 00:15:58,360
example initialized and conceptually

347
00:15:56,140 --> 00:16:01,510
seeing this is a unsupervised learning

348
00:15:58,360 --> 00:16:04,780
of parameters for a program template and

349
00:16:01,510 --> 00:16:07,420
the experiments show well some some

350
00:16:04,780 --> 00:16:10,120
promising results now the alternative

351
00:16:07,420 --> 00:16:11,979
conclusion we<font color="#E5E5E5"> created programs that take</font>

352
00:16:10,120 --> 00:16:13,780
programs to generate programs the

353
00:16:11,980 --> 00:16:17,590
<font color="#CCCCCC">pronoun programs to find ways to inject</font>

354
00:16:13,780 --> 00:16:19,240
programs into these programs and also<font color="#E5E5E5"> we</font>

355
00:16:17,590 --> 00:16:20,860
found<font color="#E5E5E5"> something useful</font><font color="#CCCCCC"> to do vector</font>

356
00:16:19,240 --> 00:16:23,400
space to spend by regular expressions

357
00:16:20,860 --> 00:16:23,400
thank you

358
00:16:34,270 --> 00:16:38,780
can you comment on the<font color="#E5E5E5"> training set a</font>

359
00:16:36,680 --> 00:16:41,000
little<font color="#E5E5E5"> bit more get out what training</font>

360
00:16:38,780 --> 00:16:43,400
set training said yeah oh there's not

361
00:16:41,000 --> 00:16:45,470
really a training set this is<font color="#CCCCCC"> it's</font>

362
00:16:43,400 --> 00:16:48,290
unsupervised learning completely so you

363
00:16:45,470 --> 00:16:50,330
just<font color="#CCCCCC"> take the code base and you need to</font>

364
00:16:48,290 --> 00:16:52,430
specify a sink that you're interested in

365
00:16:50,330 --> 00:16:56,090
so something like mmm papi and<font color="#E5E5E5"> then it</font>

366
00:16:52,430 --> 00:16:59,810
from that it generates the queries<font color="#CCCCCC"> so</font>

367
00:16:56,090 --> 00:17:03,470
yeah so how you look at false positives

368
00:16:59,810 --> 00:17:07,579
and yeah i manually extend the code

369
00:17:03,470 --> 00:17:09,319
decides well we manually<font color="#E5E5E5"> analyzed the</font>

370
00:17:07,579 --> 00:17:10,909
false positives of course we're not

371
00:17:09,319 --> 00:17:12,500
entirely sure whether they're false

372
00:17:10,910 --> 00:17:14,080
positives right<font color="#E5E5E5"> because they could be</font>

373
00:17:12,500 --> 00:17:17,630
bugs in there that we<font color="#E5E5E5"> simply don't see</font>

374
00:17:14,079 --> 00:17:22,270
but well I think<font color="#E5E5E5"> they were all false</font>

375
00:17:17,630 --> 00:17:22,270
positives<font color="#CCCCCC"> so other</font><font color="#E5E5E5"> questions</font>

376
00:17:26,640 --> 00:17:29,810
thank speaker again

