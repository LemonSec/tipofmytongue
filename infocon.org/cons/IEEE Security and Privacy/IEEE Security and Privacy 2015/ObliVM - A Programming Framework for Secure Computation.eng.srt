1
00:00:00,180 --> 00:00:07,120
hello everyone I'm very happy to be<font color="#CCCCCC"> here</font>

2
00:00:03,760 --> 00:00:09,280
to<font color="#E5E5E5"> present our work about</font><font color="#CCCCCC"> our bbm that</font>

3
00:00:07,120 --> 00:00:11,740
is a<font color="#E5E5E5"> problem in framework for secure</font>

4
00:00:09,280 --> 00:00:13,450
computation<font color="#E5E5E5"> and this is a</font><font color="#CCCCCC"> John work with</font>

5
00:00:11,740 --> 00:00:16,480
our<font color="#CCCCCC"> team mates</font>

6
00:00:13,450 --> 00:00:20,680
shaolong<font color="#CCCCCC"> Carty sitting</font><font color="#E5E5E5"> there and yeah</font>

7
00:00:16,480 --> 00:00:22,720
yeah<font color="#E5E5E5"> a lecture and so I'm</font><font color="#CCCCCC"> very happy</font>

8
00:00:20,680 --> 00:00:25,420
<font color="#CCCCCC">that my previous talk have feast</font>

9
00:00:22,720 --> 00:00:28,570
intensively explain what is secure

10
00:00:25,420 --> 00:00:32,439
computation a secure function evaluation

11
00:00:28,570 --> 00:00:35,620
<font color="#CCCCCC">I just give you</font><font color="#E5E5E5"> a brief motivation that</font>

12
00:00:32,439 --> 00:00:38,859
<font color="#E5E5E5">for example</font><font color="#CCCCCC"> Sheldon man</font><font color="#E5E5E5"> Amy here wants</font>

13
00:00:35,620 --> 00:00:41,498
<font color="#E5E5E5">to find</font><font color="#CCCCCC"> Cooper</font><font color="#E5E5E5"> a good partner for each</font>

14
00:00:38,859 --> 00:00:45,839
other and<font color="#E5E5E5"> they all believe in genomic</font>

15
00:00:41,499 --> 00:00:48,129
dating and so they can run their

16
00:00:45,839 --> 00:00:51,248
analysis to see<font color="#E5E5E5"> whether it can match or</font>

17
00:00:48,129 --> 00:00:53,170
not<font color="#E5E5E5"> so the key security question is they</font>

18
00:00:51,249 --> 00:00:56,920
don't<font color="#E5E5E5"> want to leak their sensitive</font>

19
00:00:53,170 --> 00:01:00,489
genomic data to each other so this<font color="#CCCCCC"> is so</font>

20
00:00:56,920 --> 00:01:02,350
and we have been<font color="#CCCCCC"> talking we have been</font>

21
00:01:00,489 --> 00:01:05,229
talking that secure competition is a

22
00:01:02,350 --> 00:01:07,630
good good solution<font color="#CCCCCC"> to solve this</font><font color="#E5E5E5"> problem</font>

23
00:01:05,230 --> 00:01:10,720
<font color="#E5E5E5">for example</font><font color="#CCCCCC"> burn for example we can</font>

24
00:01:07,630 --> 00:01:14,440
abstract this problem<font color="#E5E5E5"> as following given</font>

25
00:01:10,720 --> 00:01:17,080
two parties Alice and Bob having their

26
00:01:14,440 --> 00:01:19,780
secret input<font color="#E5E5E5"> exam why so they want to</font>

27
00:01:17,080 --> 00:01:22,240
join<font color="#E5E5E5"> Johnny computer public function f</font>

28
00:01:19,780 --> 00:01:25,480
over<font color="#CCCCCC"> X</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> white got some results and</font>

29
00:01:22,240 --> 00:01:27,850
then the<font color="#CCCCCC"> computation</font><font color="#E5E5E5"> over these two</font>

30
00:01:25,480 --> 00:01:31,090
secret<font color="#CCCCCC"> inputs should not leak anything</font>

31
00:01:27,850 --> 00:01:33,339
other than the result<font color="#CCCCCC"> Z to each other</font><font color="#E5E5E5"> so</font>

32
00:01:31,090 --> 00:01:37,600
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> secure</font><font color="#E5E5E5"> competition and we've</font>

33
00:01:33,340 --> 00:01:40,000
been so you already<font color="#E5E5E5"> know there are Joe</font>

34
00:01:37,600 --> 00:01:42,520
Scarborough second there are<font color="#CCCCCC"> gmw</font>

35
00:01:40,000 --> 00:01:46,990
protocols that<font color="#CCCCCC"> can solve the secure</font>

36
00:01:42,520 --> 00:01:49,179
<font color="#E5E5E5">competition so what is our focus</font><font color="#CCCCCC"> our</font>

37
00:01:46,990 --> 00:01:51,970
focus<font color="#CCCCCC"> is that how we can</font><font color="#E5E5E5"> make secure</font>

38
00:01:49,180 --> 00:01:54,820
computation really practical for example

39
00:01:51,970 --> 00:01:57,190
one developer want to develop<font color="#E5E5E5"> a secure</font>

40
00:01:54,820 --> 00:01:59,350
<font color="#CCCCCC">competition applications</font><font color="#E5E5E5"> so they don't</font>

41
00:01:57,190 --> 00:02:01,780
want<font color="#E5E5E5"> to write in a circuit format they</font>

42
00:01:59,350 --> 00:02:03,520
want<font color="#CCCCCC"> to write in</font><font color="#E5E5E5"> right right in the C</font>

43
00:02:01,780 --> 00:02:06,550
language<font color="#E5E5E5"> writing a Java or Python</font>

44
00:02:03,520 --> 00:02:10,209
language<font color="#E5E5E5"> so there is a gap</font><font color="#CCCCCC"> between</font><font color="#E5E5E5"> the</font>

45
00:02:06,550 --> 00:02:12,850
source source program and secure actual

46
00:02:10,209 --> 00:02:17,620
secure computation protocol so this is

47
00:02:12,850 --> 00:02:22,060
our<font color="#CCCCCC"> oblivion framework - so so our IBM</font>

48
00:02:17,620 --> 00:02:24,430
vertical our<font color="#E5E5E5"> a</font><font color="#CCCCCC"> bbm is a tool</font><font color="#E5E5E5"> to try to</font>

49
00:02:22,060 --> 00:02:28,150
translate source programs into the

50
00:02:24,430 --> 00:02:31,330
<font color="#E5E5E5">actual secure computation protocols so</font>

51
00:02:28,150 --> 00:02:34,090
<font color="#E5E5E5">okay this is an overview and</font><font color="#CCCCCC"> then what</font>

52
00:02:31,330 --> 00:02:37,330
is the main<font color="#CCCCCC"> question as Karthik just and</font>

53
00:02:34,090 --> 00:02:39,880
introduce<font color="#E5E5E5"> a question is</font><font color="#CCCCCC"> that Nesbitt is</font>

54
00:02:37,330 --> 00:02:42,670
the gap<font color="#CCCCCC"> between</font><font color="#E5E5E5"> the programmers favorite</font>

55
00:02:39,880 --> 00:02:45,970
model for<font color="#CCCCCC"> example this is a Python like</font>

56
00:02:42,670 --> 00:02:48,130
language and this is<font color="#CCCCCC"> what the</font><font color="#E5E5E5"> problem is</font>

57
00:02:45,970 --> 00:02:50,620
<font color="#E5E5E5">really want to write but actually the</font>

58
00:02:48,130 --> 00:02:54,280
most secure<font color="#E5E5E5"> computation protocols are</font>

59
00:02:50,620 --> 00:02:57,820
treating with<font color="#CCCCCC"> these</font><font color="#E5E5E5"> circuit</font><font color="#CCCCCC"> models so</font>

60
00:02:54,280 --> 00:03:00,310
there is a big gap<font color="#E5E5E5"> between the high</font>

61
00:02:57,820 --> 00:03:03,959
level language<font color="#E5E5E5"> programs and the circuit</font>

62
00:03:00,310 --> 00:03:09,430
so our question is<font color="#E5E5E5"> how can we translate</font>

63
00:03:03,960 --> 00:03:12,970
the<font color="#CCCCCC"> life part into the</font><font color="#E5E5E5"> right part okay</font>

64
00:03:09,430 --> 00:03:16,120
so thank you<font color="#CCCCCC"> very much Karthik you</font><font color="#E5E5E5"> have</font>

65
00:03:12,970 --> 00:03:18,910
motivated<font color="#CCCCCC"> this wall so the key challenge</font>

66
00:03:16,120 --> 00:03:21,760
here is<font color="#CCCCCC"> that how we can</font><font color="#E5E5E5"> make the dynamic</font>

67
00:03:18,910 --> 00:03:26,730
memory accesses<font color="#E5E5E5"> not</font><font color="#CCCCCC"> leak information so</font>

68
00:03:21,760 --> 00:03:26,730
this is not a trivial challenge but but

69
00:03:26,910 --> 00:03:35,100
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> another</font><font color="#E5E5E5"> trivial</font><font color="#CCCCCC"> task</font><font color="#E5E5E5"> so actually</font>

70
00:03:31,600 --> 00:03:39,190
our our solution is that<font color="#CCCCCC"> we want to</font>

71
00:03:35,100 --> 00:03:42,570
translate the problem<font color="#E5E5E5"> in a</font><font color="#CCCCCC"> RAM model</font>

72
00:03:39,190 --> 00:03:45,760
program RAM model language into the

73
00:03:42,570 --> 00:03:49,209
<font color="#E5E5E5">obvious counterpart so here our business</font>

74
00:03:45,760 --> 00:03:51,640
means that memory accesses and<font color="#CCCCCC"> fit and</font>

75
00:03:49,210 --> 00:03:54,730
the instruction traces<font color="#E5E5E5"> do not depend on</font>

76
00:03:51,640 --> 00:03:57,100
<font color="#CCCCCC">secure input so that in this</font><font color="#E5E5E5"> way the</font>

77
00:03:54,730 --> 00:04:01,899
previous<font color="#E5E5E5"> program can easily translate</font>

78
00:03:57,100 --> 00:04:04,120
<font color="#E5E5E5">transfer into a circuit so so we can</font><font color="#CCCCCC"> see</font>

79
00:04:01,900 --> 00:04:06,550
the in this transformation<font color="#CCCCCC"> the later</font>

80
00:04:04,120 --> 00:04:08,860
part is relatively easy<font color="#CCCCCC"> and the first</font>

81
00:04:06,550 --> 00:04:11,650
<font color="#E5E5E5">part is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> really challenging</font><font color="#CCCCCC"> so this</font>

82
00:04:08,860 --> 00:04:16,780
<font color="#E5E5E5">this talk will focus on the first first</font>

83
00:04:11,650 --> 00:04:19,340
part and how to do that<font color="#E5E5E5"> so a very few</font>

84
00:04:16,779 --> 00:04:23,710
<font color="#CCCCCC">very not not really about</font>

85
00:04:19,339 --> 00:04:28,159
a solution<font color="#CCCCCC"> that was proposed first in</font>

86
00:04:23,710 --> 00:04:30,919
2013 was<font color="#CCCCCC"> to use a big-ish ram - so for</font>

87
00:04:28,160 --> 00:04:33,740
abuse ROM or Ram that can compel an

88
00:04:30,919 --> 00:04:37,460
arbitrary program<font color="#CCCCCC"> into as a biggest</font>

89
00:04:33,740 --> 00:04:41,440
counterpart<font color="#CCCCCC"> and based on this idea last</font>

90
00:04:37,460 --> 00:04:45,710
<font color="#E5E5E5">year we present our ICBM framework that</font>

91
00:04:41,440 --> 00:04:49,960
<font color="#E5E5E5">does this work to simulate generic or</font>

92
00:04:45,710 --> 00:04:53,289
<font color="#E5E5E5">Ram and we can show we can achieve</font>

93
00:04:49,960 --> 00:04:57,739
asymptotic performance<font color="#E5E5E5"> gain over</font><font color="#CCCCCC"> the</font>

94
00:04:53,290 --> 00:05:01,070
<font color="#E5E5E5">previous solution</font><font color="#CCCCCC"> however</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> solution</font>

95
00:04:57,740 --> 00:05:04,160
is generic and is it easy<font color="#E5E5E5"> to implement</font>

96
00:05:01,070 --> 00:05:07,099
<font color="#E5E5E5">but</font><font color="#CCCCCC"> the problem is</font><font color="#E5E5E5"> that a</font><font color="#CCCCCC"> main up might</font>

97
00:05:04,160 --> 00:05:09,740
<font color="#CCCCCC">not</font><font color="#E5E5E5"> be the most efficient</font><font color="#CCCCCC"> way so</font><font color="#E5E5E5"> over</font>

98
00:05:07,100 --> 00:05:11,990
the<font color="#E5E5E5"> past few</font><font color="#CCCCCC"> years we have</font><font color="#E5E5E5"> observed many</font>

99
00:05:09,740 --> 00:05:14,660
customized<font color="#E5E5E5"> secure</font><font color="#CCCCCC"> computation</font><font color="#E5E5E5"> protocols</font>

100
00:05:11,990 --> 00:05:17,419
<font color="#E5E5E5">there is a long list of all this work</font>

101
00:05:14,660 --> 00:05:20,360
and<font color="#CCCCCC"> unfortunately I don't have space to</font>

102
00:05:17,419 --> 00:05:22,900
<font color="#E5E5E5">list them all so they are varied and</font>

103
00:05:20,360 --> 00:05:24,919
<font color="#CCCCCC">they are very</font><font color="#E5E5E5"> very efficient but</font>

104
00:05:22,900 --> 00:05:28,400
basically I can<font color="#CCCCCC"> say they are more</font>

105
00:05:24,919 --> 00:05:31,370
efficient than<font color="#E5E5E5"> our our last year's work</font>

106
00:05:28,400 --> 00:05:34,729
but the<font color="#E5E5E5"> problem is that they incur very</font>

107
00:05:31,370 --> 00:05:38,539
high<font color="#CCCCCC"> desire effort for example we have</font>

108
00:05:34,729 --> 00:05:40,940
talked<font color="#E5E5E5"> to Nina</font><font color="#CCCCCC"> Tov that she is our</font>

109
00:05:38,539 --> 00:05:43,280
collaborator and we had a<font color="#E5E5E5"> private</font>

110
00:05:40,940 --> 00:05:46,250
<font color="#CCCCCC">conversation about their entire paper</font>

111
00:05:43,280 --> 00:05:50,059
<font color="#CCCCCC">and their paper on private matrix</font>

112
00:05:46,250 --> 00:05:54,830
factorization publishing in CCS 2013 and

113
00:05:50,060 --> 00:05:57,860
<font color="#E5E5E5">she mentioned to us that I spent a team</font>

114
00:05:54,830 --> 00:05:59,599
of<font color="#CCCCCC"> five researchers</font><font color="#E5E5E5"> about four months to</font>

115
00:05:57,860 --> 00:06:03,490
<font color="#CCCCCC">implement everything</font><font color="#E5E5E5"> so that is</font>

116
00:05:59,599 --> 00:06:06,680
basically<font color="#CCCCCC"> 1/2 that</font><font color="#E5E5E5"> is what modern 1/2</font>

117
00:06:03,490 --> 00:06:11,660
<font color="#E5E5E5">research a year so that that</font><font color="#CCCCCC"> isn't that</font>

118
00:06:06,680 --> 00:06:13,669
<font color="#E5E5E5">was a big effort so so our question is</font>

119
00:06:11,660 --> 00:06:16,550
that can<font color="#CCCCCC"> we make it</font><font color="#E5E5E5"> better so can we</font>

120
00:06:13,669 --> 00:06:19,789
contribute computer and generic

121
00:06:16,550 --> 00:06:22,669
framework but<font color="#E5E5E5"> also achieved customized</font>

122
00:06:19,789 --> 00:06:26,479
performance so this is<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is about</font>

123
00:06:22,669 --> 00:06:29,450
<font color="#E5E5E5">our</font><font color="#CCCCCC"> work of EVM to achieve this goal</font><font color="#E5E5E5"> so</font>

124
00:06:26,479 --> 00:06:32,180
<font color="#E5E5E5">we are we want to allow non specialties</font>

125
00:06:29,450 --> 00:06:33,050
so example<font color="#E5E5E5"> non cryptographer to</font>

126
00:06:32,180 --> 00:06:35,180
<font color="#CCCCCC">implement some</font>

127
00:06:33,050 --> 00:06:39,139
secure computation protocols while

128
00:06:35,180 --> 00:06:43,220
achieving the customized performance so

129
00:06:39,139 --> 00:06:46,569
how do we do that<font color="#E5E5E5"> so the key here key</font>

130
00:06:43,220 --> 00:06:48,949
idea is that<font color="#CCCCCC"> we've you know within</font><font color="#E5E5E5"> IBM</font>

131
00:06:46,569 --> 00:06:50,900
<font color="#E5E5E5">we provide several programming</font>

132
00:06:48,949 --> 00:06:53,180
abstractions for example at<font color="#E5E5E5"> least many</font>

133
00:06:50,900 --> 00:06:55,549
here<font color="#CCCCCC"> previous data structures and</font>

134
00:06:53,180 --> 00:06:57,830
<font color="#CCCCCC">MapReduce and</font><font color="#E5E5E5"> loop call a scene but I</font>

135
00:06:55,550 --> 00:07:00,740
will introduce one<font color="#CCCCCC"> of them like pepper</font>

136
00:06:57,830 --> 00:07:04,340
and for more<font color="#E5E5E5"> details I will refer you</font><font color="#CCCCCC"> to</font>

137
00:07:00,740 --> 00:07:07,909
the paper<font color="#E5E5E5"> and I also would like</font><font color="#CCCCCC"> to</font>

138
00:07:04,340 --> 00:07:11,000
<font color="#CCCCCC">mention</font><font color="#E5E5E5"> that the graph I see paper that</font>

139
00:07:07,909 --> 00:07:14,270
<font color="#E5E5E5">was just presented by Karthik what is</font>

140
00:07:11,000 --> 00:07:19,340
also is<font color="#E5E5E5"> also a program as abstraction</font>

141
00:07:14,270 --> 00:07:23,840
dedicated for parallel computing<font color="#CCCCCC"> so so</font>

142
00:07:19,340 --> 00:07:27,770
<font color="#CCCCCC">do so</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> provide program abstraction</font>

143
00:07:23,840 --> 00:07:30,710
so I will give you<font color="#CCCCCC"> a intuition about</font>

144
00:07:27,770 --> 00:07:33,349
what it is<font color="#E5E5E5"> so let's think about the</font>

145
00:07:30,710 --> 00:07:35,780
distributed community I<font color="#E5E5E5"> think I think</font>

146
00:07:33,349 --> 00:07:39,580
all of most of you should heard of<font color="#CCCCCC"> this</font>

147
00:07:35,780 --> 00:07:41,989
<font color="#E5E5E5">the MapReduce that that was published by</font>

148
00:07:39,580 --> 00:07:46,460
Google<font color="#E5E5E5"> in 2004</font>

149
00:07:41,990 --> 00:07:49,340
you know SDI<font color="#E5E5E5"> and before before and that</font>

150
00:07:46,460 --> 00:07:51,710
paper was published<font color="#E5E5E5"> parallel computing</font>

151
00:07:49,340 --> 00:07:54,500
<font color="#E5E5E5">are distributed computing was considered</font>

152
00:07:51,710 --> 00:07:58,609
a<font color="#CCCCCC"> hard house</font><font color="#E5E5E5"> but using MapReduce the</font>

153
00:07:54,500 --> 00:08:00,740
developer only<font color="#E5E5E5"> need to write write only</font>

154
00:07:58,610 --> 00:08:03,319
<font color="#E5E5E5">need to encode their computation into a</font>

155
00:08:00,740 --> 00:08:06,349
map<font color="#E5E5E5"> here along with</font><font color="#CCCCCC"> the reducer so that</font>

156
00:08:03,319 --> 00:08:08,000
<font color="#CCCCCC">the so that they don't so developer</font>

157
00:08:06,349 --> 00:08:10,490
<font color="#E5E5E5">don't need to worry anything about the</font>

158
00:08:08,000 --> 00:08:12,529
<font color="#CCCCCC">distribution but the</font><font color="#E5E5E5"> MapReduce framework</font>

159
00:08:10,490 --> 00:08:14,779
<font color="#CCCCCC">can do everything</font><font color="#E5E5E5"> for you so the</font>

160
00:08:12,529 --> 00:08:17,750
development<font color="#CCCCCC"> effort using</font><font color="#E5E5E5"> MapReduce is</font>

161
00:08:14,779 --> 00:08:22,460
very low<font color="#E5E5E5"> comparing</font><font color="#CCCCCC"> to our two comparing</font>

162
00:08:17,750 --> 00:08:24,229
to previous work so we take a very

163
00:08:22,460 --> 00:08:26,750
similar<font color="#E5E5E5"> and we want to take a very</font>

164
00:08:24,229 --> 00:08:30,919
<font color="#CCCCCC">similar approach here so we want to</font>

165
00:08:26,750 --> 00:08:33,469
provide some some abstractions<font color="#E5E5E5"> to allow</font>

166
00:08:30,919 --> 00:08:37,429
to allow<font color="#E5E5E5"> problem is to design their</font>

167
00:08:33,469 --> 00:08:40,729
<font color="#CCCCCC">tasks</font><font color="#E5E5E5"> to encode their tasks into these</font>

168
00:08:37,429 --> 00:08:42,888
abstractions and so that they<font color="#E5E5E5"> don't need</font>

169
00:08:40,729 --> 00:08:45,980
<font color="#E5E5E5">to worry about the crypto</font>

170
00:08:42,889 --> 00:08:50,109
that underlying cryptography primitives

171
00:08:45,980 --> 00:08:50,109
<font color="#E5E5E5">and while achieving the same</font><font color="#CCCCCC"> performance</font>

172
00:08:50,589 --> 00:08:58,429
so so here is<font color="#E5E5E5"> our goal so so here is our</font>

173
00:08:56,089 --> 00:09:02,689
solution<font color="#E5E5E5"> so how can we provide these</font>

174
00:08:58,429 --> 00:09:04,939
program abstractions<font color="#E5E5E5"> so we want to -</font><font color="#CCCCCC"> we</font>

175
00:09:02,689 --> 00:09:07,189
want<font color="#E5E5E5"> to implement</font><font color="#CCCCCC"> a language support so</font>

176
00:09:04,939 --> 00:09:12,139
for example we want<font color="#E5E5E5"> to implement a new</font>

177
00:09:07,189 --> 00:09:15,230
language<font color="#E5E5E5"> for our developers so when T</font>

178
00:09:12,139 --> 00:09:18,079
<font color="#E5E5E5">when developing this language we have</font>

179
00:09:15,230 --> 00:09:20,749
two goals in our mind<font color="#E5E5E5"> the first the</font>

180
00:09:18,079 --> 00:09:24,008
<font color="#E5E5E5">first one is</font><font color="#CCCCCC"> that using our language the</font>

181
00:09:20,749 --> 00:09:26,509
expert our cryptographers can implement

182
00:09:24,009 --> 00:09:30,139
different different programming

183
00:09:26,509 --> 00:09:32,600
abstractions very easily and on the

184
00:09:30,139 --> 00:09:34,429
other hand<font color="#E5E5E5"> for those non non</font><font color="#CCCCCC"> specialists</font>

185
00:09:32,600 --> 00:09:38,209
<font color="#CCCCCC">so for</font><font color="#E5E5E5"> example they do not know very</font>

186
00:09:34,429 --> 00:09:40,399
<font color="#CCCCCC">much about</font><font color="#E5E5E5"> the problem of</font><font color="#CCCCCC"> cryptography</font>

187
00:09:38,209 --> 00:09:42,709
<font color="#E5E5E5">then they can use</font><font color="#CCCCCC"> these abstractions</font>

188
00:09:40,399 --> 00:09:44,980
well very easily<font color="#CCCCCC"> to build their own</font>

189
00:09:42,709 --> 00:09:48,768
applications

190
00:09:44,980 --> 00:09:52,279
so with this<font color="#E5E5E5"> goal with these two goals</font>

191
00:09:48,769 --> 00:09:54,889
in our mind and<font color="#E5E5E5"> we our solution is to</font>

192
00:09:52,279 --> 00:09:56,720
<font color="#E5E5E5">support new language features that was</font>

193
00:09:54,889 --> 00:10:01,100
never supported<font color="#E5E5E5"> before you buy any</font>

194
00:09:56,720 --> 00:10:03,799
previous system and<font color="#CCCCCC"> so I list a couple</font>

195
00:10:01,100 --> 00:10:08,739
<font color="#CCCCCC">of them</font><font color="#E5E5E5"> here and I will refer</font><font color="#CCCCCC"> you to the</font>

196
00:10:03,799 --> 00:10:12,259
reader for more details<font color="#E5E5E5"> I can and</font>

197
00:10:08,739 --> 00:10:16,040
further<font color="#CCCCCC"> feed</font><font color="#E5E5E5"> further we will open source</font>

198
00:10:12,259 --> 00:10:18,139
our compiler<font color="#E5E5E5"> here so that you can know</font>

199
00:10:16,040 --> 00:10:20,959
even more details about<font color="#E5E5E5"> the compiler so</font>

200
00:10:18,139 --> 00:10:24,079
<font color="#E5E5E5">uh so I think these features are</font><font color="#CCCCCC"> really</font>

201
00:10:20,959 --> 00:10:26,569
cool for example we can use<font color="#E5E5E5"> random time</font>

202
00:10:24,079 --> 00:10:28,789
<font color="#E5E5E5">tandem functions so and to actually</font>

203
00:10:26,569 --> 00:10:31,279
implement the<font color="#E5E5E5"> biggest Ram</font><font color="#CCCCCC"> protocols in</font>

204
00:10:28,789 --> 00:10:37,339
in the<font color="#E5E5E5"> sauce level rather than as a</font>

205
00:10:31,279 --> 00:10:39,470
<font color="#E5E5E5">back-end primitive and</font><font color="#CCCCCC"> ok so so so</font>

206
00:10:37,339 --> 00:10:41,569
having<font color="#E5E5E5"> all of these</font><font color="#CCCCCC"> than what programmer</font>

207
00:10:39,470 --> 00:10:43,699
can do for example<font color="#E5E5E5"> they want to we</font><font color="#CCCCCC"> want</font>

208
00:10:41,569 --> 00:10:48,410
<font color="#E5E5E5">to implement a sparse graph algorithms</font>

209
00:10:43,699 --> 00:10:51,289
then we have this<font color="#CCCCCC"> arsenal</font><font color="#E5E5E5"> about our</font>

210
00:10:48,410 --> 00:10:53,618
programming abstractions then<font color="#CCCCCC"> for</font>

211
00:10:51,289 --> 00:10:56,540
example<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to implement a sparse</font>

212
00:10:53,619 --> 00:10:59,240
<font color="#E5E5E5">directress shortest distance algorithm</font>

213
00:10:56,540 --> 00:11:02,300
then we can<font color="#E5E5E5"> peek oblivious data</font>

214
00:10:59,240 --> 00:11:06,940
structure<font color="#CCCCCC"> that is our previous heap and</font>

215
00:11:02,300 --> 00:11:10,959
then you pick a loop called as you know

216
00:11:06,940 --> 00:11:14,450
<font color="#CCCCCC">abstraction to implement them</font><font color="#E5E5E5"> okay</font>

217
00:11:10,960 --> 00:11:17,570
then<font color="#E5E5E5"> using</font><font color="#CCCCCC"> these tools these tools we we</font>

218
00:11:14,450 --> 00:11:20,690
<font color="#E5E5E5">actually implement three three different</font>

219
00:11:17,570 --> 00:11:23,650
sparse graph algorithms and everything

220
00:11:20,690 --> 00:11:27,380
looks fine<font color="#E5E5E5"> right but we have a very</font>

221
00:11:23,650 --> 00:11:31,400
<font color="#E5E5E5">expected result is that that is our</font>

222
00:11:27,380 --> 00:11:33,439
implemented algorithm made<font color="#E5E5E5"> a theoretical</font>

223
00:11:31,400 --> 00:11:36,650
breakthrough<font color="#CCCCCC"> so for example all</font><font color="#E5E5E5"> these</font>

224
00:11:33,440 --> 00:11:39,470
three algorithms have better<font color="#E5E5E5"> asymptotic</font>

225
00:11:36,650 --> 00:11:44,480
complexity than the<font color="#E5E5E5"> state-of-the-art so</font>

226
00:11:39,470 --> 00:11:46,130
this is very surprising<font color="#CCCCCC"> to us and and</font>

227
00:11:44,480 --> 00:11:48,680
for more detail about<font color="#CCCCCC"> all those</font>

228
00:11:46,130 --> 00:11:53,150
algorithms I would also like to refer

229
00:11:48,680 --> 00:11:55,939
you to the<font color="#E5E5E5"> reader</font><font color="#CCCCCC"> okay so how do</font><font color="#E5E5E5"> we</font>

230
00:11:53,150 --> 00:12:00,020
actually do that<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I will</font><font color="#E5E5E5"> you know as I</font>

231
00:11:55,940 --> 00:12:02,060
<font color="#CCCCCC">just promised several</font><font color="#E5E5E5"> minutes ago that</font><font color="#CCCCCC"> I</font>

232
00:12:00,020 --> 00:12:04,760
will<font color="#E5E5E5"> introduce you one program as</font>

233
00:12:02,060 --> 00:12:09,650
<font color="#E5E5E5">direction that is loop coalescing</font><font color="#CCCCCC"> so a</font>

234
00:12:04,760 --> 00:12:12,260
big a big this is<font color="#E5E5E5"> a this</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> deep</font>

235
00:12:09,650 --> 00:12:15,439
detail so insecure computation<font color="#CCCCCC"> it is</font>

236
00:12:12,260 --> 00:12:19,520
very challenging<font color="#E5E5E5"> to implement a secret</font>

237
00:12:15,440 --> 00:12:21,470
loop in the contacts<font color="#E5E5E5"> in secure</font>

238
00:12:19,520 --> 00:12:25,220
computation because the loop itself will

239
00:12:21,470 --> 00:12:28,970
be at<font color="#CCCCCC"> an odd</font><font color="#E5E5E5"> number of iterations of the</font>

240
00:12:25,220 --> 00:12:32,000
loop<font color="#CCCCCC"> really</font><font color="#E5E5E5"> being information</font><font color="#CCCCCC"> so here we</font>

241
00:12:28,970 --> 00:12:34,940
allow to write the programmers to write

242
00:12:32,000 --> 00:12:37,850
upon the loop for example we can we

243
00:12:34,940 --> 00:12:41,750
allow the loop to have a<font color="#E5E5E5"> secret art but</font>

244
00:12:37,850 --> 00:12:45,710
we ask the programmer to<font color="#E5E5E5"> provide a puppy</font>

245
00:12:41,750 --> 00:12:48,740
<font color="#E5E5E5">pound after</font><font color="#CCCCCC"> loop so so this is</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> nicely</font>

246
00:12:45,710 --> 00:12:51,170
loop and the interesting<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font>

247
00:12:48,740 --> 00:12:56,570
in the inner loop from line for to<font color="#E5E5E5"> line</font>

248
00:12:51,170 --> 00:13:00,110
<font color="#E5E5E5">silent so the the pound</font><font color="#CCCCCC"> M is not the</font>

249
00:12:56,570 --> 00:13:03,020
pound for one pound for each iteration

250
00:13:00,110 --> 00:13:05,210
of<font color="#E5E5E5"> the outer loop but that is a total</font>

251
00:13:03,020 --> 00:13:08,030
<font color="#CCCCCC">bound for the entire</font><font color="#E5E5E5"> execution after</font><font color="#CCCCCC"> an</font>

252
00:13:05,210 --> 00:13:10,430
<font color="#E5E5E5">acid after tunity loop so that we don't</font>

253
00:13:08,030 --> 00:13:13,220
<font color="#E5E5E5">to repeat</font><font color="#CCCCCC"> anything so for example</font>

254
00:13:10,430 --> 00:13:17,630
if we provide<font color="#CCCCCC"> a</font><font color="#E5E5E5"> pound a natural way is</font>

255
00:13:13,220 --> 00:13:22,970
to make n times M iterations but here we

256
00:13:17,630 --> 00:13:25,520
only make n plus M iterations<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then</font>

257
00:13:22,970 --> 00:13:28,970
our<font color="#E5E5E5"> some</font><font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> analyze</font><font color="#CCCCCC"> these codn't</font>

258
00:13:25,520 --> 00:13:31,010
and automatically transform that into

259
00:13:28,970 --> 00:13:33,709
the following<font color="#E5E5E5"> one that that it looks</font>

260
00:13:31,010 --> 00:13:37,760
like<font color="#CCCCCC"> a state machine so that we do not</font>

261
00:13:33,709 --> 00:13:42,199
<font color="#CCCCCC">incur any extra actual complexity</font><font color="#E5E5E5"> after</font>

262
00:13:37,760 --> 00:13:44,060
algorithm and so without<font color="#E5E5E5"> dealing with</font>

263
00:13:42,200 --> 00:13:47,089
<font color="#E5E5E5">all these techniques</font><font color="#CCCCCC"> so what can we</font>

264
00:13:44,060 --> 00:13:49,790
achieve so I I have mentioned that<font color="#E5E5E5"> for</font>

265
00:13:47,089 --> 00:13:52,580
the<font color="#E5E5E5"> max factorization</font><font color="#CCCCCC"> is spend</font><font color="#E5E5E5"> about one</font>

266
00:13:49,790 --> 00:13:55,520
<font color="#E5E5E5">more than</font><font color="#CCCCCC"> 1/2</font><font color="#E5E5E5"> research a year so what</font>

267
00:13:52,580 --> 00:13:57,830
can<font color="#CCCCCC"> we do now</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> our PBM so that is</font>

268
00:13:55,520 --> 00:14:00,439
very surprising we only do<font color="#E5E5E5"> that in one</font>

269
00:13:57,830 --> 00:14:02,779
day<font color="#E5E5E5"> only only one PhD student can</font>

270
00:14:00,440 --> 00:14:04,670
implement<font color="#E5E5E5"> everything in one day</font><font color="#CCCCCC"> so you</font>

271
00:14:02,779 --> 00:14:04,970
may wonder<font color="#E5E5E5"> whether it is</font><font color="#CCCCCC"> efficient</font><font color="#E5E5E5"> or</font>

272
00:14:04,670 --> 00:14:10,339
<font color="#E5E5E5">not</font>

273
00:14:04,970 --> 00:14:13,610
furthermore for example that I might not

274
00:14:10,339 --> 00:14:16,580
<font color="#E5E5E5">be efficient</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> but the thing</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> we</font>

275
00:14:13,610 --> 00:14:19,370
can<font color="#E5E5E5"> achieve 10 to 20 times</font><font color="#CCCCCC"> faster so</font>

276
00:14:16,580 --> 00:14:23,060
that<font color="#E5E5E5"> is even better</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is what we</font>

277
00:14:19,370 --> 00:14:26,540
can<font color="#E5E5E5"> do today so</font><font color="#CCCCCC"> I so so I believe</font><font color="#E5E5E5"> rpm is</font>

278
00:14:23,060 --> 00:14:31,369
a<font color="#CCCCCC"> very valuable</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> for our secure</font>

279
00:14:26,540 --> 00:14:33,079
computation<font color="#E5E5E5"> developers ok so let's see</font>

280
00:14:31,370 --> 00:14:36,170
<font color="#CCCCCC">and</font><font color="#E5E5E5"> let's look at a detailed breakdown</font>

281
00:14:33,080 --> 00:14:39,740
<font color="#CCCCCC">of the</font><font color="#E5E5E5"> performance</font><font color="#CCCCCC"> game</font><font color="#E5E5E5"> so this is this</font>

282
00:14:36,170 --> 00:14:41,540
<font color="#CCCCCC">is we we give the result of the</font>

283
00:14:39,740 --> 00:14:45,970
<font color="#CCCCCC">Dijkstra's algorithm and more result</font>

284
00:14:41,540 --> 00:14:48,860
will be shown in the<font color="#E5E5E5"> paper so so a</font><font color="#CCCCCC"> BVM</font>

285
00:14:45,970 --> 00:14:51,740
although<font color="#E5E5E5"> I focus on the programming</font>

286
00:14:48,860 --> 00:14:54,829
<font color="#E5E5E5">language part of a</font><font color="#CCCCCC"> BBN actually it has a</font>

287
00:14:51,740 --> 00:14:59,150
has a highly optimized<font color="#E5E5E5"> back-end called</font>

288
00:14:54,829 --> 00:15:02,150
<font color="#E5E5E5">rpm as</font><font color="#CCCCCC"> C that is already</font><font color="#E5E5E5"> open source and</font>

289
00:14:59,150 --> 00:15:04,610
<font color="#E5E5E5">you can visit</font><font color="#CCCCCC"> our website for</font><font color="#E5E5E5"> the link</font>

290
00:15:02,150 --> 00:15:07,220
and we implement a state-of-the-art

291
00:15:04,610 --> 00:15:10,070
circuit circuit<font color="#CCCCCC"> orang that is optimized</font>

292
00:15:07,220 --> 00:15:13,760
<font color="#E5E5E5">that optimized for secure computation</font>

293
00:15:10,070 --> 00:15:18,070
and<font color="#E5E5E5"> this single thing we compare our</font>

294
00:15:13,760 --> 00:15:24,500
system with<font color="#CCCCCC"> path path previous solution</font>

295
00:15:18,070 --> 00:15:29,030
publishing in CCS 2012 so the circuit

296
00:15:24,500 --> 00:15:31,820
itself<font color="#E5E5E5"> can you can gain us about 50</font>

297
00:15:29,030 --> 00:15:33,650
times performance beat up and the

298
00:15:31,820 --> 00:15:35,450
language and compiler can give us about

299
00:15:33,650 --> 00:15:39,530
two thousand and two thousand<font color="#E5E5E5"> five</font>

300
00:15:35,450 --> 00:15:41,930
hundred speed-up<font color="#E5E5E5"> and</font><font color="#CCCCCC"> further we also</font><font color="#E5E5E5"> do</font>

301
00:15:39,530 --> 00:15:43,970
some other<font color="#CCCCCC"> packin optimizations</font><font color="#E5E5E5"> and</font>

302
00:15:41,930 --> 00:15:48,140
those details<font color="#CCCCCC"> can</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> found in our paper</font>

303
00:15:43,970 --> 00:15:51,380
<font color="#E5E5E5">so there are also</font><font color="#CCCCCC"> gives us</font><font color="#E5E5E5"> seven times</font>

304
00:15:48,140 --> 00:15:53,750
speed up<font color="#E5E5E5"> so in total we achieve about 1</font>

305
00:15:51,380 --> 00:15:58,180
million times<font color="#E5E5E5"> speed up so that's a huge</font>

306
00:15:53,750 --> 00:16:02,240
huge<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> so so give you a even</font><font color="#CCCCCC"> more</font>

307
00:15:58,180 --> 00:16:05,209
intuitive solution so in 2012 in that

308
00:16:02,240 --> 00:16:08,240
same paper<font color="#E5E5E5"> so they did binary search</font>

309
00:16:05,210 --> 00:16:10,940
over<font color="#CCCCCC"> 1 gigabyte of data base and one</font>

310
00:16:08,240 --> 00:16:14,960
only<font color="#E5E5E5"> one single query spend about modern</font>

311
00:16:10,940 --> 00:16:18,470
12 hours to compute and what about today

312
00:16:14,960 --> 00:16:21,560
<font color="#CCCCCC">so</font><font color="#E5E5E5"> using our oblivion free market only</font>

313
00:16:18,470 --> 00:16:26,600
only<font color="#E5E5E5"> requires seven point seven point</font>

314
00:16:21,560 --> 00:16:30,500
three seconds for each query<font color="#CCCCCC"> ok we also</font>

315
00:16:26,600 --> 00:16:32,480
compare our ICBM<font color="#CCCCCC"> in framework with with</font>

316
00:16:30,500 --> 00:16:36,890
a you secure solution for example<font color="#CCCCCC"> that</font>

317
00:16:32,480 --> 00:16:39,320
claim<font color="#CCCCCC"> playing program</font><font color="#E5E5E5"> running on</font><font color="#CCCCCC"> top of</font>

318
00:16:36,890 --> 00:16:42,020
<font color="#CCCCCC">SATs</font><font color="#E5E5E5"> it's machine or something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> that</font>

319
00:16:39,320 --> 00:16:46,400
and we compute the<font color="#CCCCCC"> slowdown so so the</font>

320
00:16:42,020 --> 00:16:49,220
<font color="#CCCCCC">Sotiris</font><font color="#E5E5E5"> are very moderate so for example</font>

321
00:16:46,400 --> 00:16:55,189
for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> distributed GWS</font><font color="#E5E5E5"> so the slowdown</font>

322
00:16:49,220 --> 00:16:57,200
<font color="#E5E5E5">is only</font><font color="#CCCCCC"> 100</font><font color="#E5E5E5"> and 113 so so so so we</font><font color="#CCCCCC"> can</font>

323
00:16:55,190 --> 00:17:02,270
expect that<font color="#E5E5E5"> the in the</font><font color="#CCCCCC"> future this</font>

324
00:16:57,200 --> 00:17:04,130
number will<font color="#E5E5E5"> be even slower</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so so</font>

325
00:17:02,270 --> 00:17:07,460
there are several collaborations with

326
00:17:04,130 --> 00:17:11,090
that that our<font color="#E5E5E5"> our PBM has been updating</font>

327
00:17:07,460 --> 00:17:14,750
all these kind of these<font color="#CCCCCC"> process</font><font color="#E5E5E5"> and we</font>

328
00:17:11,089 --> 00:17:18,050
with just one one one task of genomic

329
00:17:14,750 --> 00:17:22,359
and analysis competition<font color="#CCCCCC"> again in March</font>

330
00:17:18,050 --> 00:17:25,579
in March<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that was two months ago</font><font color="#E5E5E5"> and</font>

331
00:17:22,359 --> 00:17:29,240
<font color="#E5E5E5">now we are</font><font color="#CCCCCC"> to for future directions we</font>

332
00:17:25,579 --> 00:17:32,210
are<font color="#CCCCCC"> adopting our p VAR b vm framework</font><font color="#E5E5E5"> to</font>

333
00:17:29,240 --> 00:17:34,080
more cryptography<font color="#E5E5E5"> tasks like follow</font>

334
00:17:32,210 --> 00:17:36,419
homomorphic encryption

335
00:17:34,080 --> 00:17:39,360
and something more<font color="#E5E5E5"> so thank you very</font>

336
00:17:36,419 --> 00:17:50,129
<font color="#E5E5E5">much here is my talk now I like</font><font color="#CCCCCC"> to take</font>

337
00:17:39,360 --> 00:17:51,678
questions so the the<font color="#E5E5E5"> example he</font><font color="#CCCCCC"> gave</font>

338
00:17:50,129 --> 00:17:53,850
right at the beginning<font color="#CCCCCC"> of binary search</font>

339
00:17:51,679 --> 00:17:55,559
<font color="#E5E5E5">what would that</font><font color="#CCCCCC"> look like</font>

340
00:17:53,850 --> 00:18:00,629
like what<font color="#E5E5E5"> would the programmer have to</font>

341
00:17:55,559 --> 00:18:02,340
write so<font color="#E5E5E5"> we see example are you</font><font color="#CCCCCC"> right in</font>

342
00:18:00,629 --> 00:18:08,488
<font color="#CCCCCC">the beginning you gave an example of</font>

343
00:18:02,340 --> 00:18:13,019
binary search<font color="#E5E5E5"> and you said oh so so this</font>

344
00:18:08,489 --> 00:18:15,359
<font color="#CCCCCC">is this</font><font color="#E5E5E5"> is the sort of left the left</font>

345
00:18:13,019 --> 00:18:18,210
part of<font color="#E5E5E5"> this figure is what programmer</font>

346
00:18:15,359 --> 00:18:20,369
<font color="#E5E5E5">need to write</font><font color="#CCCCCC"> for the loop coalescing</font><font color="#E5E5E5"> so</font>

347
00:18:18,210 --> 00:18:23,279
you<font color="#E5E5E5"> mentioned you mentioned the binary</font>

348
00:18:20,369 --> 00:18:28,709
search example<font color="#E5E5E5"> right yeah I think that's</font>

349
00:18:23,279 --> 00:18:34,980
a good point<font color="#CCCCCC"> so</font><font color="#E5E5E5"> so the thing</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> let</font>

350
00:18:28,710 --> 00:18:37,559
<font color="#CCCCCC">me go</font><font color="#E5E5E5"> back to there</font><font color="#CCCCCC"> oh and here so</font><font color="#E5E5E5"> so</font>

351
00:18:34,980 --> 00:18:40,080
this<font color="#E5E5E5"> is actually what programmer need to</font>

352
00:18:37,559 --> 00:18:41,700
let me see if they can tell ya this

353
00:18:40,080 --> 00:18:45,090
program can<font color="#CCCCCC"> be compiled you know</font>

354
00:18:41,700 --> 00:18:49,830
oblivion compiler so the<font color="#E5E5E5"> compiler will</font>

355
00:18:45,090 --> 00:18:51,869
handle the<font color="#E5E5E5"> memory access so yes the</font>

356
00:18:49,830 --> 00:18:54,359
compiler can figure that<font color="#E5E5E5"> out which part</font>

357
00:18:51,869 --> 00:18:58,289
in you to be placing or amend which part

358
00:18:54,359 --> 00:19:00,570
do not<font color="#E5E5E5"> need to do that</font><font color="#CCCCCC"> okay so is</font><font color="#E5E5E5"> it a</font>

359
00:18:58,289 --> 00:19:03,929
potential use for<font color="#E5E5E5"> oblivion to have it</font>

360
00:19:00,570 --> 00:19:05,668
just output like C<font color="#E5E5E5"> code instead of</font><font color="#CCCCCC"> a</font>

361
00:19:03,929 --> 00:19:07,830
circuit so<font color="#CCCCCC"> that you can take</font><font color="#E5E5E5"> basically</font>

362
00:19:05,669 --> 00:19:09,629
<font color="#E5E5E5">an arbitrary program and turn it into</font>

363
00:19:07,830 --> 00:19:13,830
one that doesn't have<font color="#E5E5E5"> side channels</font>

364
00:19:09,629 --> 00:19:16,350
oh yeah that's a very<font color="#CCCCCC"> good question</font><font color="#E5E5E5"> so</font>

365
00:19:13,830 --> 00:19:18,749
yeah<font color="#E5E5E5"> so it's a very interesting</font><font color="#CCCCCC"> theme</font>

366
00:19:16,350 --> 00:19:22,678
that our<font color="#CCCCCC"> Oblivion compiler actually</font>

367
00:19:18,749 --> 00:19:24,899
<font color="#CCCCCC">emits</font><font color="#E5E5E5"> Java code yeah that and then the</font>

368
00:19:22,679 --> 00:19:27,570
tower<font color="#CCCCCC"> run in the Java code will actually</font>

369
00:19:24,899 --> 00:19:29,879
produce the<font color="#E5E5E5"> produced a circuit so I</font>

370
00:19:27,570 --> 00:19:33,418
think<font color="#E5E5E5"> that's a very good that's a very</font>

371
00:19:29,879 --> 00:19:35,969
good question<font color="#E5E5E5"> that and I</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> that will</font>

372
00:19:33,419 --> 00:19:39,179
be<font color="#E5E5E5"> an interesting future direction to</font>

373
00:19:35,970 --> 00:19:42,749
see how our<font color="#CCCCCC"> RP VN compiler can be</font>

374
00:19:39,179 --> 00:19:45,030
customized<font color="#E5E5E5"> to avoid such channels yeah</font>

375
00:19:42,749 --> 00:19:47,060
<font color="#E5E5E5">thank you</font>

376
00:19:45,030 --> 00:19:47,060
<font color="#E5E5E5">Oh</font>

377
00:19:54,029 --> 00:20:08,200
you actually you can come to the

378
00:19:57,340 --> 00:20:11,860
microphone we don't have<font color="#E5E5E5"> channel if you</font>

379
00:20:08,200 --> 00:20:13,480
just compare<font color="#CCCCCC"> to generic Iran and but you</font>

380
00:20:11,860 --> 00:20:15,189
can alternatively just<font color="#E5E5E5"> call our</font>

381
00:20:13,480 --> 00:20:16,330
<font color="#E5E5E5">obliviously</font><font color="#CCCCCC"> no structure we have binary</font>

382
00:20:15,190 --> 00:20:19,269
search trees implemented in our

383
00:20:16,330 --> 00:20:20,860
<font color="#CCCCCC">oblivious in the structure and those</font><font color="#E5E5E5"> if</font>

384
00:20:19,269 --> 00:20:23,230
you use our<font color="#E5E5E5"> obliviously the structure</font>

385
00:20:20,860 --> 00:20:33,158
<font color="#E5E5E5">abstraction it will cut a log log n</font>

386
00:20:23,230 --> 00:20:40,649
factor during<font color="#CCCCCC"> the compilation</font><font color="#E5E5E5"> change the</font>

387
00:20:33,159 --> 00:20:51,090
compiler how do you compare<font color="#CCCCCC"> efficient</font>

388
00:20:40,649 --> 00:20:56,039
circuits thanks Helene yes until II and

389
00:20:51,090 --> 00:20:56,039
III<font color="#E5E5E5"> thank our speaker again</font>

