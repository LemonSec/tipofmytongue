1
00:00:00,000 --> 00:00:07,589
<font color="#E5E5E5">okay thank you for the introduction this</font>

2
00:00:04,350 --> 00:00:12,239
is joint work with<font color="#CCCCCC"> Eric Chen of CMU and</font>

3
00:00:07,589 --> 00:00:15,809
<font color="#E5E5E5">my colleagues</font><font color="#CCCCCC"> Jets Katya and</font><font color="#E5E5E5"> REE one in</font>

4
00:00:12,240 --> 00:00:18,448
Microsoft so our work is about secure

5
00:00:15,809 --> 00:00:22,830
programming and verification of online

6
00:00:18,449 --> 00:00:26,310
services today there are many scenarios

7
00:00:22,830 --> 00:00:28,880
where multiple parties need to be

8
00:00:26,310 --> 00:00:31,769
involved<font color="#E5E5E5"> in a transaction for example</font>

9
00:00:28,880 --> 00:00:35,640
<font color="#CCCCCC">third-party payment involves a merchant</font>

10
00:00:31,769 --> 00:00:41,160
and the cashier sorry<font color="#CCCCCC"> kk you see the</font>

11
00:00:35,640 --> 00:00:44,550
mouse and<font color="#CCCCCC"> the single</font><font color="#E5E5E5"> sign-on involves a</font>

12
00:00:41,160 --> 00:00:47,610
relying party and an identity provider

13
00:00:44,550 --> 00:00:50,339
and the<font color="#E5E5E5"> similarly authorization is also</font>

14
00:00:47,610 --> 00:00:52,289
a multi-party scenario unfortunately

15
00:00:50,340 --> 00:00:56,160
plenty of logic bugs have been

16
00:00:52,289 --> 00:00:59,070
discovered and according to<font color="#E5E5E5"> the cloud</font>

17
00:00:56,160 --> 00:01:02,788
security alliance these problems<font color="#CCCCCC"> have</font>

18
00:00:59,070 --> 00:01:05,099
become<font color="#CCCCCC"> the number for cloud secure cloud</font>

19
00:01:02,789 --> 00:01:08,070
computing top threat and the

20
00:01:05,099 --> 00:01:10,048
consequences are serious people can an

21
00:01:08,070 --> 00:01:12,779
attacker can<font color="#E5E5E5"> purchase without making</font>

22
00:01:10,049 --> 00:01:15,150
payment log into other people's account

23
00:01:12,780 --> 00:01:19,400
without password or obtain some

24
00:01:15,150 --> 00:01:22,380
unintended authorizations so clearly

25
00:01:19,400 --> 00:01:24,750
this situation asks for an<font color="#E5E5E5"> effective</font>

26
00:01:22,380 --> 00:01:28,170
program program verification approach

27
00:01:24,750 --> 00:01:30,689
and indeed researchers have<font color="#E5E5E5"> been talking</font>

28
00:01:28,170 --> 00:01:34,079
about a program verification for many

29
00:01:30,689 --> 00:01:37,320
many years but<font color="#E5E5E5"> in reality it is rarely</font>

30
00:01:34,079 --> 00:01:40,289
put in practice by developers because of

31
00:01:37,320 --> 00:01:43,110
<font color="#E5E5E5">several practical hurdles that I'm going</font>

32
00:01:40,290 --> 00:01:46,079
<font color="#E5E5E5">to explain in the next slide so our work</font>

33
00:01:43,110 --> 00:01:48,180
CST is to significantly lower this

34
00:01:46,079 --> 00:01:52,079
hurdles so that the real developers can

35
00:01:48,180 --> 00:01:54,950
do verification now first<font color="#E5E5E5"> question why</font>

36
00:01:52,079 --> 00:01:57,479
is verification difficulty in reality

37
00:01:54,950 --> 00:02:00,659
suppose we have a multi-party system

38
00:01:57,479 --> 00:02:03,090
based on protocol<font color="#E5E5E5"> X now some people may</font>

39
00:02:00,659 --> 00:02:04,920
say that verification is not so hard

40
00:02:03,090 --> 00:02:07,409
because you<font color="#E5E5E5"> just feed the source code</font>

41
00:02:04,920 --> 00:02:09,598
into an automatic theorem prover or the

42
00:02:07,409 --> 00:02:13,860
model checker and your job is done well

43
00:02:09,598 --> 00:02:16,589
that is they miss a few very important

44
00:02:13,860 --> 00:02:20,160
things here first the source code has to

45
00:02:16,590 --> 00:02:23,970
be<font color="#E5E5E5"> verified against a spec so typically</font>

46
00:02:20,160 --> 00:02:26,280
<font color="#E5E5E5">protocol X is written in a document in</font>

47
00:02:23,970 --> 00:02:28,380
English so developers need to really

48
00:02:26,280 --> 00:02:32,040
understand the protocol text in<font color="#E5E5E5"> order to</font>

49
00:02:28,380 --> 00:02:35,160
come up<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the specification for every</font>

50
00:02:32,040 --> 00:02:38,250
party which<font color="#CCCCCC"> is not very easy and second</font>

51
00:02:35,160 --> 00:02:40,560
<font color="#E5E5E5">the source code runs on top of the</font>

52
00:02:38,250 --> 00:02:43,350
system platform which need to be<font color="#E5E5E5"> modeled</font>

53
00:02:40,560 --> 00:02:47,310
and furthermore since we are talking

54
00:02:43,350 --> 00:02:50,880
<font color="#E5E5E5">about services these source code exposed</font>

55
00:02:47,310 --> 00:02:53,910
public method that can be arbitrarily

56
00:02:50,880 --> 00:02:56,489
invoked by the attacker so the modeling

57
00:02:53,910 --> 00:03:00,209
of the attacker and<font color="#E5E5E5"> the platform can be</font>

58
00:02:56,489 --> 00:03:04,170
very subjective and very challenging now

59
00:03:00,209 --> 00:03:06,420
the third hurdle is that even<font color="#CCCCCC"> after the</font>

60
00:03:04,170 --> 00:03:09,269
modeling the proof itself is still very

61
00:03:06,420 --> 00:03:11,579
challenging because the attacker is

62
00:03:09,270 --> 00:03:13,739
essentially a<font color="#CCCCCC"> top-level loop that</font>

63
00:03:11,580 --> 00:03:15,989
interact within the system so we<font color="#E5E5E5"> are</font>

64
00:03:13,739 --> 00:03:20,100
talking about<font color="#E5E5E5"> an infinite state space</font>

65
00:03:15,989 --> 00:03:23,250
here and at the<font color="#E5E5E5"> end the developers need</font>

66
00:03:20,100 --> 00:03:26,430
to convince<font color="#E5E5E5"> the verifier that every</font>

67
00:03:23,250 --> 00:03:29,670
possible transaction satisfied the<font color="#E5E5E5"> the</font>

68
00:03:26,430 --> 00:03:33,660
safety property and this<font color="#E5E5E5"> kind of proof</font>

69
00:03:29,670 --> 00:03:36,000
has to be inducted<font color="#E5E5E5"> which requires very</font>

70
00:03:33,660 --> 00:03:39,030
complicated loop invariant to<font color="#E5E5E5"> be derived</font>

71
00:03:36,000 --> 00:03:41,640
from the front of source code which is

72
00:03:39,030 --> 00:03:44,489
very<font color="#E5E5E5"> very difficult especially for</font>

73
00:03:41,640 --> 00:03:48,268
<font color="#CCCCCC">real-world</font><font color="#E5E5E5"> code so now let's see what</font>

74
00:03:44,489 --> 00:03:53,310
CST does in CST everything runs on top

75
00:03:48,269 --> 00:03:57,060
of the actual platform and even the even

76
00:03:53,310 --> 00:03:59,549
the program verifier which we call the

77
00:03:57,060 --> 00:04:03,959
certifier even the certifier runs on top

78
00:03:59,549 --> 00:04:06,330
of the actual platform and then<font color="#CCCCCC"> I</font><font color="#E5E5E5"> will</font>

79
00:04:03,959 --> 00:04:08,820
<font color="#E5E5E5">explain later that CST is going to</font>

80
00:04:06,330 --> 00:04:13,560
<font color="#E5E5E5">verify a system-wide multi-party</font>

81
00:04:08,820 --> 00:04:15,450
property independent of any protocol now

82
00:04:13,560 --> 00:04:17,760
CST doesn't need to model the attacker

83
00:04:15,450 --> 00:04:20,339
either because we just allow<font color="#E5E5E5"> the user to</font>

84
00:04:17,760 --> 00:04:22,740
interact with<font color="#E5E5E5"> the system for real in</font>

85
00:04:20,339 --> 00:04:26,469
other words every transaction just

86
00:04:22,740 --> 00:04:29,110
concretely happens in the system

87
00:04:26,470 --> 00:04:33,610
and then at<font color="#CCCCCC"> the end the certifier checks</font>

88
00:04:29,110 --> 00:04:36,190
if if this transaction satisfies the

89
00:04:33,610 --> 00:04:40,810
system-wide property so now let's see a

90
00:04:36,190 --> 00:04:44,890
toy example we we<font color="#E5E5E5"> have three parties</font>

91
00:04:40,810 --> 00:04:47,320
here so you can<font color="#CCCCCC"> see a calm has the</font>

92
00:04:44,890 --> 00:04:50,320
integer a be calm has the integer array

93
00:04:47,320 --> 00:04:53,469
B and C calm has a boolean see now this

94
00:04:50,320 --> 00:04:55,719
system wants to maintain a property<font color="#E5E5E5"> C</font>

95
00:04:53,470 --> 00:04:59,590
equals true if and only if there exists

96
00:04:55,720 --> 00:05:02,740
an item in B which equals a<font color="#CCCCCC"> okay so we</font>

97
00:04:59,590 --> 00:05:05,830
call this the<font color="#CCCCCC"> mbm predicate because it</font>

98
00:05:02,740 --> 00:05:10,330
is defined<font color="#CCCCCC"> over all the parties it is</font>

99
00:05:05,830 --> 00:05:13,120
<font color="#CCCCCC">about the global safety property now</font>

100
00:05:10,330 --> 00:05:16,240
<font color="#E5E5E5">this ambient predicate is great except</font>

101
00:05:13,120 --> 00:05:20,560
that<font color="#E5E5E5"> it cannot be concretely checked</font>

102
00:05:16,240 --> 00:05:23,260
because the certifier on<font color="#CCCCCC"> si.com</font><font color="#E5E5E5"> does not</font>

103
00:05:20,560 --> 00:05:26,410
have the concrete value of the secret in

104
00:05:23,260 --> 00:05:30,400
a<font color="#E5E5E5"> end of the array B right now what can</font>

105
00:05:26,410 --> 00:05:34,720
we do here our CS<font color="#E5E5E5"> CST approach is</font>

106
00:05:30,400 --> 00:05:37,210
essentially<font color="#E5E5E5"> that during the execution of</font>

107
00:05:34,720 --> 00:05:39,910
the<font color="#E5E5E5"> transaction we just collect the</font>

108
00:05:37,210 --> 00:05:43,989
executed source code from every party

109
00:05:39,910 --> 00:05:47,770
and then at<font color="#E5E5E5"> the end</font><font color="#CCCCCC"> we symbolically</font>

110
00:05:43,990 --> 00:05:50,310
check the ambient<font color="#CCCCCC"> predicates using the</font>

111
00:05:47,770 --> 00:05:52,330
collected source code so i know that

112
00:05:50,310 --> 00:05:57,160
this is a<font color="#E5E5E5"> very high level description</font>

113
00:05:52,330 --> 00:05:58,780
but please bear with me i'm going<font color="#E5E5E5"> to use</font>

114
00:05:57,160 --> 00:06:02,020
<font color="#E5E5E5">third-party payment as a concrete</font>

115
00:05:58,780 --> 00:06:04,900
example in this system there are<font color="#E5E5E5"> three</font>

116
00:06:02,020 --> 00:06:07,780
parties the client<font color="#E5E5E5"> our cashier and</font>

117
00:06:04,900 --> 00:06:11,310
merchant now let's see let's call the

118
00:06:07,780 --> 00:06:14,080
first message place order<font color="#E5E5E5"> request which</font>

119
00:06:11,310 --> 00:06:17,169
invokes a method on the merchant<font color="#E5E5E5"> called</font>

120
00:06:14,080 --> 00:06:20,620
place order then this method generate a

121
00:06:17,169 --> 00:06:24,549
redirection to bring the client to the

122
00:06:20,620 --> 00:06:27,100
cashier where a method pay is called now

123
00:06:24,550 --> 00:06:29,620
this<font color="#E5E5E5"> method generate another redirection</font>

124
00:06:27,100 --> 00:06:32,500
to bring the client to the<font color="#E5E5E5"> to the</font>

125
00:06:29,620 --> 00:06:35,020
<font color="#E5E5E5">merchant where complete order is called</font>

126
00:06:32,500 --> 00:06:38,920
now the merchant at this moment can

127
00:06:35,020 --> 00:06:43,479
decide to accept or reject the

128
00:06:38,920 --> 00:06:47,380
transaction<font color="#CCCCCC"> okay now what is the safety</font>

129
00:06:43,480 --> 00:06:49,950
property here we realize that<font color="#E5E5E5"> the safety</font>

130
00:06:47,380 --> 00:06:52,990
property is<font color="#E5E5E5"> actually very very intuitive</font>

131
00:06:49,950 --> 00:06:56,229
essentially<font color="#E5E5E5"> what we want is that pipe at</font>

132
00:06:52,990 --> 00:06:58,270
the<font color="#E5E5E5"> end of the transaction the order to</font>

133
00:06:56,230 --> 00:07:00,310
be checked out must have been paid on

134
00:06:58,270 --> 00:07:04,359
the cashier<font color="#CCCCCC"> right this is this</font><font color="#E5E5E5"> is common</font>

135
00:07:00,310 --> 00:07:08,680
sense and more specifically we want to

136
00:07:04,360 --> 00:07:12,400
check that there exists an item there

137
00:07:08,680 --> 00:07:15,970
exists a payment on the cashier<font color="#E5E5E5"> of which</font>

138
00:07:12,400 --> 00:07:18,460
the status is paid the total equals the

139
00:07:15,970 --> 00:07:23,200
gross amount of the order and the payee

140
00:07:18,460 --> 00:07:26,109
is this merchant and the the payment is

141
00:07:23,200 --> 00:07:30,159
for this particular<font color="#E5E5E5"> order right so this</font>

142
00:07:26,110 --> 00:07:33,310
is our nvm predicate this is what we

143
00:07:30,160 --> 00:07:35,200
want to ensure by the whole system now

144
00:07:33,310 --> 00:07:37,450
let's see what a traditional

145
00:07:35,200 --> 00:07:40,030
implementation does so here<font color="#E5E5E5"> I'm showing</font>

146
00:07:37,450 --> 00:07:42,280
you a real implementation called

147
00:07:40,030 --> 00:07:46,020
nopcommerce which integrate amazon

148
00:07:42,280 --> 00:07:49,840
payment so you see these are the

149
00:07:46,020 --> 00:07:53,140
<font color="#E5E5E5">messages and and you can see that this</font>

150
00:07:49,840 --> 00:07:55,210
pain request is signed by<font color="#CCCCCC"> tea store</font>

151
00:07:53,140 --> 00:07:57,640
which<font color="#CCCCCC"> is the merchant running knob</font>

152
00:07:55,210 --> 00:08:00,130
<font color="#CCCCCC">commerce</font><font color="#E5E5E5"> and you can also see another</font>

153
00:07:57,640 --> 00:08:02,800
message is<font color="#E5E5E5"> signed by amazon so</font><font color="#CCCCCC"> these</font>

154
00:08:00,130 --> 00:08:05,560
<font color="#E5E5E5">digital signatures make sure that the</font>

155
00:08:02,800 --> 00:08:09,960
client can not attend temper with the

156
00:08:05,560 --> 00:08:13,140
messages<font color="#E5E5E5"> okay so so far it looks good</font>

157
00:08:09,960 --> 00:08:16,870
unfortunately this implementation is

158
00:08:13,140 --> 00:08:20,919
vulnerable it allows an attacker mark to

159
00:08:16,870 --> 00:08:23,260
pay to his own store like<font color="#E5E5E5"> Mark store but</font>

160
00:08:20,920 --> 00:08:26,530
still check out an order from<font color="#E5E5E5"> the victim</font>

161
00:08:23,260 --> 00:08:29,110
tea store calm the details are in the

162
00:08:26,530 --> 00:08:31,570
paper which are not very important for

163
00:08:29,110 --> 00:08:35,710
my presentation what is important here

164
00:08:31,570 --> 00:08:39,090
is that in a traditional implementation

165
00:08:35,710 --> 00:08:42,490
every party just<font color="#E5E5E5"> to do some local checks</font>

166
00:08:39,090 --> 00:08:44,320
but the most important<font color="#CCCCCC"> mbm predicate is</font>

167
00:08:42,490 --> 00:08:46,990
nowhere to be found in the whole

168
00:08:44,320 --> 00:08:50,280
implementation so wouldn't it be great

169
00:08:46,990 --> 00:08:52,270
if we can enable developers to

170
00:08:50,280 --> 00:08:54,610
explicitly check the ambient

171
00:08:52,270 --> 00:08:58,270
that will make<font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that we have an</font>

172
00:08:54,610 --> 00:09:02,770
end-to-end safety so here comes our CST

173
00:08:58,270 --> 00:09:05,650
implementation the only the only

174
00:09:02,770 --> 00:09:09,610
<font color="#E5E5E5">addition that CST introduced is a</font>

175
00:09:05,650 --> 00:09:12,160
message field called seem t are it's

176
00:09:09,610 --> 00:09:15,340
called<font color="#CCCCCC"> seem t or symbolic transaction</font>

177
00:09:12,160 --> 00:09:17,370
and initially<font color="#CCCCCC"> seemed t is empty but</font>

178
00:09:15,340 --> 00:09:21,130
<font color="#E5E5E5">after the execution of the first method</font>

179
00:09:17,370 --> 00:09:25,140
now the<font color="#E5E5E5"> Sigma T becomes T store calm</font>

180
00:09:21,130 --> 00:09:28,630
<font color="#CCCCCC">Colin Colin hash place order</font><font color="#E5E5E5"> now this</font>

181
00:09:25,140 --> 00:09:32,530
hash place order is<font color="#CCCCCC"> the sha-1 hash value</font>

182
00:09:28,630 --> 00:09:36,240
of the source code of place order right

183
00:09:32,530 --> 00:09:40,329
so this this<font color="#E5E5E5"> transaction goes on and</font>

184
00:09:36,240 --> 00:09:44,080
eventually after complete order is

185
00:09:40,330 --> 00:09:47,370
executed the final seem t is this long

186
00:09:44,080 --> 00:09:51,610
string which consists of the three steps

187
00:09:47,370 --> 00:09:55,090
now we will<font color="#CCCCCC"> just pass this final seem t</font>

188
00:09:51,610 --> 00:09:59,230
to the certifier the certifiers job is

189
00:09:55,090 --> 00:10:01,480
to assume that tea store and<font color="#CCCCCC"> amazon are</font>

190
00:09:59,230 --> 00:10:05,080
the only trusted parties and then<font color="#E5E5E5"> it's</font>

191
00:10:01,480 --> 00:10:07,870
try to verify that this sequence of

192
00:10:05,080 --> 00:10:09,880
computations logically implies the

193
00:10:07,870 --> 00:10:14,530
<font color="#CCCCCC">ambient predicate so this</font><font color="#E5E5E5"> is a symbolic</font>

194
00:10:09,880 --> 00:10:18,010
check now let's see the the internal of

195
00:10:14,530 --> 00:10:21,819
the certifier mmm the certifier consists

196
00:10:18,010 --> 00:10:24,850
of a<font color="#CCCCCC"> cache a program synthesizer and an</font>

197
00:10:21,820 --> 00:10:27,400
off-the-shelf c-sharp program verifier

198
00:10:24,850 --> 00:10:30,120
so here you<font color="#E5E5E5"> also see the three pieces of</font>

199
00:10:27,400 --> 00:10:33,730
input that<font color="#CCCCCC"> i show in the last slide</font>

200
00:10:30,120 --> 00:10:36,430
initially the cash is empty so the so

201
00:10:33,730 --> 00:10:38,730
the input arrives at the program

202
00:10:36,430 --> 00:10:43,359
synthesizer which does three things it's

203
00:10:38,730 --> 00:10:46,840
discard untrusted steps and stitch

204
00:10:43,360 --> 00:10:50,890
together trusted steps and assured the

205
00:10:46,840 --> 00:10:53,530
ambient predicate so in this case we can

206
00:10:50,890 --> 00:10:58,120
see that this is the synthesized the

207
00:10:53,530 --> 00:11:00,430
<font color="#E5E5E5">program which basically the synthesizers</font>

208
00:10:58,120 --> 00:11:02,860
just stitch together this is<font color="#CCCCCC"> three</font>

209
00:11:00,430 --> 00:11:04,589
<font color="#CCCCCC">methyl cause and then put an assert at</font>

210
00:11:02,860 --> 00:11:08,560
the end<font color="#E5E5E5"> of the program</font>

211
00:11:04,590 --> 00:11:11,440
so in this case these three<font color="#E5E5E5"> method calls</font>

212
00:11:08,560 --> 00:11:14,349
are sufficient to ensure the ambient

213
00:11:11,440 --> 00:11:18,010
predicate that's why this verification

214
00:11:14,350 --> 00:11:20,830
is successful then it is it's right<font color="#CCCCCC"> to</font>

215
00:11:18,010 --> 00:11:23,950
the verification result into the<font color="#CCCCCC"> cache</font>

216
00:11:20,830 --> 00:11:27,370
and in the meanwhile this transaction<font color="#CCCCCC"> is</font>

217
00:11:23,950 --> 00:11:30,250
accepted now on the other hand if the

218
00:11:27,370 --> 00:11:33,430
previous attack is launched then<font color="#E5E5E5"> this is</font>

219
00:11:30,250 --> 00:11:37,510
the<font color="#E5E5E5"> final sim t and you can see that</font><font color="#CCCCCC"> the</font>

220
00:11:33,430 --> 00:11:41,079
first step happens<font color="#E5E5E5"> on a party called</font>

221
00:11:37,510 --> 00:11:42,850
marks locom which is not trusted then as

222
00:11:41,080 --> 00:11:48,190
a result when we synthesized in the

223
00:11:42,850 --> 00:11:51,130
program it only consists of the two

224
00:11:48,190 --> 00:11:54,910
<font color="#E5E5E5">metal course and this the first method</font>

225
00:11:51,130 --> 00:11:58,000
is skipped so as a result these two

226
00:11:54,910 --> 00:12:01,750
metal costs are insufficient<font color="#CCCCCC"> to imply</font>

227
00:11:58,000 --> 00:12:05,800
the<font color="#CCCCCC"> NBN predicate so in this case it is</font>

228
00:12:01,750 --> 00:12:09,430
not a it's not verified then this

229
00:12:05,800 --> 00:12:13,060
transaction<font color="#E5E5E5"> is rejected ok so I just</font>

230
00:12:09,430 --> 00:12:16,920
explained<font color="#CCCCCC"> to</font><font color="#E5E5E5"> you how CST works but very</font>

231
00:12:13,060 --> 00:12:20,619
briefly we have applied CST on many

232
00:12:16,920 --> 00:12:22,870
open-source asp.net solutions including

233
00:12:20,620 --> 00:12:26,470
to<font color="#E5E5E5"> third-party payment solutions and</font>

234
00:12:22,870 --> 00:12:29,560
<font color="#E5E5E5">three single sign-on solutions we also</font>

235
00:12:26,470 --> 00:12:33,480
<font color="#CCCCCC">are build a gambling scenario which</font>

236
00:12:29,560 --> 00:12:36,400
<font color="#CCCCCC">included</font><font color="#E5E5E5"> a gambling site a cashier at a</font>

237
00:12:33,480 --> 00:12:42,100
token manager and the<font color="#CCCCCC"> Cohen closer so we</font>

238
00:12:36,400 --> 00:12:45,870
put these<font color="#E5E5E5"> four altogether so our systems</font>

239
00:12:42,100 --> 00:12:50,110
are accessible through through the page

240
00:12:45,870 --> 00:12:52,390
through our project page so we measure

241
00:12:50,110 --> 00:12:56,170
the<font color="#E5E5E5"> lines of code that we added or</font>

242
00:12:52,390 --> 00:12:59,470
changed in this project and the numbers

243
00:12:56,170 --> 00:13:02,740
are always below 200 lines of 200 lines

244
00:12:59,470 --> 00:13:04,990
of code for every party for performance

245
00:13:02,740 --> 00:13:07,720
because of caching we are able<font color="#E5E5E5"> to</font>

246
00:13:04,990 --> 00:13:12,730
achieve near zero amortized runtime

247
00:13:07,720 --> 00:13:17,560
overhead yeah and for security we

248
00:13:12,730 --> 00:13:18,370
selected 14 known vulnerabilities and we

249
00:13:17,560 --> 00:13:21,640
conclude that

250
00:13:18,370 --> 00:13:24,070
<font color="#CCCCCC">12 of them are logic flaws that CST is</font>

251
00:13:21,640 --> 00:13:27,760
able to prevent and two of them are not

252
00:13:24,070 --> 00:13:30,279
including a signature validation flow

253
00:13:27,760 --> 00:13:34,930
and client-side same origin access

254
00:13:30,279 --> 00:13:38,770
violation now<font color="#E5E5E5"> I want</font><font color="#CCCCCC"> to say that a very</font>

255
00:13:34,930 --> 00:13:41,589
big advantage of CST is protocol

256
00:13:38,770 --> 00:13:44,890
independence to show this we come up

257
00:13:41,589 --> 00:13:47,800
with<font color="#E5E5E5"> several implementations obviously</font>

258
00:13:44,890 --> 00:13:50,380
violating or two point oh but CST is

259
00:13:47,800 --> 00:13:52,689
able to make sure that they are all

260
00:13:50,380 --> 00:13:54,670
doing authentication correctly although

261
00:13:52,690 --> 00:13:58,450
they violated the protocol now let me

262
00:13:54,670 --> 00:14:01,180
briefly talk to you what we<font color="#CCCCCC"> did so here</font>

263
00:13:58,450 --> 00:14:03,339
you see<font color="#E5E5E5"> the original protocol flow which</font>

264
00:14:01,180 --> 00:14:07,510
is doing single<font color="#E5E5E5"> sign-on authentication</font>

265
00:14:03,339 --> 00:14:10,810
and our first question is why do we need

266
00:14:07,510 --> 00:14:13,720
this<font color="#E5E5E5"> app secret for authentication so we</font>

267
00:14:10,810 --> 00:14:15,779
just remove<font color="#E5E5E5"> it and and it's turned out</font>

268
00:14:13,720 --> 00:14:18,370
<font color="#CCCCCC">that we</font><font color="#E5E5E5"> can still do authentication</font>

269
00:14:15,779 --> 00:14:22,060
correctly without this this field and

270
00:14:18,370 --> 00:14:26,890
then we<font color="#E5E5E5"> started to to violate the</font>

271
00:14:22,060 --> 00:14:29,199
protocol more more blatantly we use

272
00:14:26,890 --> 00:14:31,689
access token to replace the

273
00:14:29,200 --> 00:14:35,200
authorization code in this in this

274
00:14:31,690 --> 00:14:38,890
method call and this is explicitly

275
00:14:35,200 --> 00:14:41,950
forbidden by<font color="#E5E5E5"> the by the protocol</font><font color="#CCCCCC"> bios 2</font>

276
00:14:38,890 --> 00:14:45,390
point<font color="#CCCCCC"> 0 but we realize that</font><font color="#E5E5E5"> as long as</font>

277
00:14:41,950 --> 00:14:50,410
<font color="#E5E5E5">we move the move this check to the</font>

278
00:14:45,390 --> 00:14:53,620
second to the<font color="#E5E5E5"> second call this flow is</font>

279
00:14:50,410 --> 00:14:56,650
still doing correct authentication now

280
00:14:53,620 --> 00:14:59,320
if you insist that<font color="#E5E5E5"> this is not OS design</font>

281
00:14:56,650 --> 00:15:02,319
the identity provider should absolutely

282
00:14:59,320 --> 00:15:05,980
check nothing then the flow can still be

283
00:15:02,320 --> 00:15:09,250
secure if if the relying party checks

284
00:15:05,980 --> 00:15:13,180
everything right so I guess my<font color="#CCCCCC"> point</font>

285
00:15:09,250 --> 00:15:15,520
here is<font color="#CCCCCC"> that for a complex protocol it</font>

286
00:15:13,180 --> 00:15:18,939
is very<font color="#E5E5E5"> difficult to understand exactly</font>

287
00:15:15,520 --> 00:15:22,209
which parties should do what and why so

288
00:15:18,940 --> 00:15:25,060
it is much better to just verify that

289
00:15:22,209 --> 00:15:26,770
all parties collaboratively<font color="#CCCCCC"> satisfy a</font>

290
00:15:25,060 --> 00:15:31,469
system-wide property that is more

291
00:15:26,770 --> 00:15:34,829
intuitive so to conclude CST

292
00:15:31,470 --> 00:15:36,810
CST is unique because it<font color="#E5E5E5"> sits on the</font>

293
00:15:34,830 --> 00:15:38,760
middle ground between<font color="#E5E5E5"> aesthetic</font>

294
00:15:36,810 --> 00:15:41,579
verification and runtime checking in

295
00:15:38,760 --> 00:15:45,390
fact it is doing symbolic checking at

296
00:15:41,580 --> 00:15:48,540
runtime and our CSD reduces burdens for

297
00:15:45,390 --> 00:15:50,699
our developers because it is able<font color="#CCCCCC"> to</font>

298
00:15:48,540 --> 00:15:53,189
<font color="#E5E5E5">verify a system-wide multi-party</font>

299
00:15:50,700 --> 00:15:57,750
property it reduces the burden of

300
00:15:53,190 --> 00:16:00,210
modeling and<font color="#CCCCCC"> the csts proof application</font>

301
00:15:57,750 --> 00:16:03,750
is not about all possible transactions

302
00:16:00,210 --> 00:16:09,300
it is only about the transaction at the

303
00:16:03,750 --> 00:16:13,100
moment so<font color="#CCCCCC"> please visit visit our webpage</font>

304
00:16:09,300 --> 00:16:13,099
and<font color="#CCCCCC"> I'm happy to</font><font color="#E5E5E5"> take questions</font>

