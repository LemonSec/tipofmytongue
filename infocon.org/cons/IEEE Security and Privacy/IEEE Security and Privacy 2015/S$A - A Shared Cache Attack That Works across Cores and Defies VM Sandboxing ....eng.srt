1
00:00:01,190 --> 00:00:07,259
I can do it<font color="#CCCCCC"> thank you</font><font color="#E5E5E5"> Tom for the</font>

2
00:00:04,890 --> 00:00:09,570
<font color="#CCCCCC">introduction yeah I'm good Kayla</font>

3
00:00:07,259 --> 00:00:11,730
and I will speak about<font color="#CCCCCC"> the</font><font color="#E5E5E5"> shared</font><font color="#CCCCCC"> cash</font>

4
00:00:09,570 --> 00:00:13,889
attack that what works<font color="#CCCCCC"> a closed course</font>

5
00:00:11,730 --> 00:00:16,980
and<font color="#E5E5E5"> divides B M sub boxing and we will</font>

6
00:00:13,889 --> 00:00:18,900
see how can<font color="#CCCCCC"> we apply to two AES these</font>

7
00:00:16,980 --> 00:00:20,880
<font color="#E5E5E5">are work done with my two advisers</font>

8
00:00:18,900 --> 00:00:23,099
professor eisenberg<font color="#E5E5E5"> a professor sooner</font>

9
00:00:20,880 --> 00:00:25,979
in WPI in Worcester Polytechnic

10
00:00:23,100 --> 00:00:33,270
Institute<font color="#E5E5E5"> and more precisely in the</font><font color="#CCCCCC"> burn</font>

11
00:00:25,980 --> 00:00:35,640
<font color="#CCCCCC">number Club so this is the is the agenda</font>

12
00:00:33,270 --> 00:00:37,710
will follow first<font color="#CCCCCC"> will talk out an</font>

13
00:00:35,640 --> 00:00:39,480
introduction to wear with with<font color="#E5E5E5"> a</font>

14
00:00:37,710 --> 00:00:42,660
<font color="#E5E5E5">necessary background to understand the</font>

15
00:00:39,480 --> 00:00:44,069
attack<font color="#E5E5E5"> then we will see how the</font><font color="#CCCCCC"> novel</font>

16
00:00:42,660 --> 00:00:46,019
<font color="#E5E5E5">side-channel technique can reach the</font>

17
00:00:44,070 --> 00:00:48,149
last of<font color="#E5E5E5"> all cash to a struct information</font>

18
00:00:46,020 --> 00:00:50,399
then we<font color="#E5E5E5"> will see can we how can we apply</font>

19
00:00:48,149 --> 00:00:53,670
to a yes<font color="#E5E5E5"> we see a result and will</font>

20
00:00:50,399 --> 00:00:55,920
conclude the presentation afterwards<font color="#CCCCCC"> um</font>

21
00:00:53,670 --> 00:00:58,500
so let<font color="#E5E5E5"> me start with</font><font color="#CCCCCC"> an introduction of</font>

22
00:00:55,920 --> 00:01:00,809
the cache side-channel attacks history

23
00:00:58,500 --> 00:01:02,879
<font color="#E5E5E5">um so basically they have been studied</font>

24
00:01:00,809 --> 00:01:04,920
over<font color="#CCCCCC"> the last 12 years more or less I'm</font>

25
00:01:02,879 --> 00:01:07,798
first the first implementations were

26
00:01:04,920 --> 00:01:10,680
done by<font color="#E5E5E5"> trauma laid out for example and</font>

27
00:01:07,799 --> 00:01:13,920
<font color="#E5E5E5">I dismiss</font><font color="#CCCCCC"> term rate I'll explore to</font>

28
00:01:10,680 --> 00:01:17,400
<font color="#CCCCCC">write processes which are prime improve</font>

29
00:01:13,920 --> 00:01:19,770
and<font color="#CCCCCC"> plus time</font><font color="#E5E5E5"> and they show that they</font>

30
00:01:17,400 --> 00:01:22,409
show it<font color="#E5E5E5"> how to apply to to AES and</font>

31
00:01:19,770 --> 00:01:24,509
recover<font color="#CCCCCC"> a es kiss and then</font><font color="#E5E5E5"> a dish</font>

32
00:01:22,409 --> 00:01:26,070
<font color="#CCCCCC">misused the same prime</font><font color="#E5E5E5"> improve technique</font>

33
00:01:24,509 --> 00:01:30,470
in the instruction cache to recover<font color="#CCCCCC"> I</font>

34
00:01:26,070 --> 00:01:32,990
say<font color="#CCCCCC"> so these attacks are really</font><font color="#E5E5E5"> nice but</font>

35
00:01:30,470 --> 00:01:35,429
they have a practicality issue because

36
00:01:32,990 --> 00:01:38,009
they are assuming that<font color="#E5E5E5"> both victim and</font>

37
00:01:35,430 --> 00:01:40,140
and thus<font color="#E5E5E5"> Piper's are being executed in</font>

38
00:01:38,009 --> 00:01:42,600
the same in<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> OS which indeed is</font>

39
00:01:40,140 --> 00:01:44,130
<font color="#CCCCCC">not very practical</font><font color="#E5E5E5"> I mean the I cannot</font>

40
00:01:42,600 --> 00:01:46,530
imagine a scenario where I can go<font color="#E5E5E5"> to a</font>

41
00:01:44,130 --> 00:01:49,229
<font color="#E5E5E5">victim service and execute the same</font>

42
00:01:46,530 --> 00:01:52,560
process<font color="#CCCCCC"> well</font><font color="#E5E5E5"> spy process concurrently</font>

43
00:01:49,229 --> 00:01:55,470
with his<font color="#CCCCCC"> bully</font><font color="#E5E5E5"> novel process also</font><font color="#CCCCCC"> they</font>

44
00:01:52,560 --> 00:01:58,500
were targeting level<font color="#CCCCCC"> 1 caches and indeed</font>

45
00:01:55,470 --> 00:02:00,960
this<font color="#CCCCCC"> translated to our our mobile</font>

46
00:01:58,500 --> 00:02:02,909
processors means that we have to execute

47
00:02:00,960 --> 00:02:05,449
despite despite person<font color="#E5E5E5"> day on the attack</font>

48
00:02:02,909 --> 00:02:07,649
in<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> color which again</font><font color="#CCCCCC"> adds</font>

49
00:02:05,450 --> 00:02:11,250
reduces the practicality of the

50
00:02:07,649 --> 00:02:13,680
implementations<font color="#CCCCCC"> so the question is</font>

51
00:02:11,250 --> 00:02:15,360
if there is a<font color="#E5E5E5"> practical scenario where</font>

52
00:02:13,680 --> 00:02:17,940
cache side-channel attacks can<font color="#CCCCCC"> be</font>

53
00:02:15,360 --> 00:02:19,950
applied and<font color="#CCCCCC"> yep thanks to the widely</font>

54
00:02:17,940 --> 00:02:22,290
<font color="#E5E5E5">wide adoption of</font><font color="#CCCCCC"> the cloud computing</font>

55
00:02:19,950 --> 00:02:24,149
<font color="#E5E5E5">systems</font><font color="#CCCCCC"> we can see that</font><font color="#E5E5E5"> cache</font>

56
00:02:22,290 --> 00:02:26,340
side-channel attacks from the<font color="#E5E5E5"> perfect</font>

57
00:02:24,150 --> 00:02:31,590
<font color="#E5E5E5">scenario where they can be applied</font>

58
00:02:26,340 --> 00:02:33,630
why because<font color="#CCCCCC"> - in the cloud - users to</font>

59
00:02:31,590 --> 00:02:35,460
different users share the same<font color="#E5E5E5"> physical</font>

60
00:02:33,630 --> 00:02:37,769
<font color="#E5E5E5">hardware this means that we can</font><font color="#CCCCCC"> go to a</font>

61
00:02:35,460 --> 00:02:40,860
scenario<font color="#CCCCCC"> from this scenario for example</font>

62
00:02:37,770 --> 00:02:42,860
we have where we<font color="#CCCCCC"> have two VMs that are</font>

63
00:02:40,860 --> 00:02:47,580
executing<font color="#E5E5E5"> process in the same hardware</font>

64
00:02:42,860 --> 00:02:50,400
isolated by<font color="#CCCCCC"> a by a</font><font color="#E5E5E5"> B mmm this looks very</font>

65
00:02:47,580 --> 00:02:51,780
<font color="#E5E5E5">nice</font><font color="#CCCCCC"> but it can turn</font><font color="#E5E5E5"> to this</font><font color="#CCCCCC"> a scenario</font>

66
00:02:50,400 --> 00:02:53,970
where one<font color="#CCCCCC"> of them</font><font color="#E5E5E5"> is a victim the other</font>

67
00:02:51,780 --> 00:02:56,580
one is the spy process<font color="#E5E5E5"> and the spy</font>

68
00:02:53,970 --> 00:02:58,859
process is monitoring the<font color="#CCCCCC"> hardware so</font>

69
00:02:56,580 --> 00:03:02,820
that<font color="#E5E5E5"> he can extract information from the</font>

70
00:02:58,860 --> 00:03:04,200
victim<font color="#CCCCCC"> and indeed this kind of attacks</font>

71
00:03:02,820 --> 00:03:06,359
have been<font color="#CCCCCC"> also studied I guess our</font>

72
00:03:04,200 --> 00:03:09,000
session sure can call the first paper<font color="#E5E5E5"> um</font>

73
00:03:06,360 --> 00:03:14,760
so the hey<font color="#E5E5E5"> you get off my cloud paper</font>

74
00:03:09,000 --> 00:03:16,470
<font color="#CCCCCC">where they were able to co-locate to</font>

75
00:03:14,760 --> 00:03:17,910
<font color="#E5E5E5">virtual</font><font color="#CCCCCC"> machines or yeah a brutal</font>

76
00:03:16,470 --> 00:03:21,120
<font color="#CCCCCC">machine with with a</font><font color="#E5E5E5"> potential victim</font>

77
00:03:17,910 --> 00:03:24,510
in Amazon ec2 and even figure out<font color="#E5E5E5"> the</font>

78
00:03:21,120 --> 00:03:27,720
<font color="#CCCCCC">the traffic</font><font color="#E5E5E5"> thanks to the</font><font color="#CCCCCC"> cash</font>

79
00:03:24,510 --> 00:03:29,480
<font color="#E5E5E5">monetization</font><font color="#CCCCCC"> then in 2012 sang it all</font>

80
00:03:27,720 --> 00:03:31,709
<font color="#E5E5E5">also were able to extract</font>

81
00:03:29,480 --> 00:03:33,030
<font color="#CCCCCC">Allegan all decryption keys from from</font>

82
00:03:31,709 --> 00:03:36,180
level<font color="#CCCCCC"> one caches in in bitwise</font>

83
00:03:33,030 --> 00:03:38,850
environments and<font color="#CCCCCC"> in 2014 the i-raman</font>

84
00:03:36,180 --> 00:03:40,560
<font color="#CCCCCC">Falconer</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> yep</font><font color="#E5E5E5"> they were able also to</font>

85
00:03:38,850 --> 00:03:43,290
use<font color="#E5E5E5"> well they</font><font color="#CCCCCC"> used a flashing red</font>

86
00:03:40,560 --> 00:03:46,470
<font color="#E5E5E5">channel technique to recover RSA keys</font>

87
00:03:43,290 --> 00:03:47,820
from from co-located<font color="#CCCCCC"> VMs but this is</font>

88
00:03:46,470 --> 00:03:49,140
important<font color="#E5E5E5"> because</font><font color="#CCCCCC"> this attack was</font>

89
00:03:47,820 --> 00:03:50,459
applied<font color="#CCCCCC"> in the last of the cache this</font>

90
00:03:49,140 --> 00:03:52,500
means that we<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have we don't need</font>

91
00:03:50,459 --> 00:03:54,510
to be co-located in the same<font color="#CCCCCC"> quarry</font>

92
00:03:52,500 --> 00:03:57,299
anymore but this attack<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be applied</font>

93
00:03:54,510 --> 00:04:01,500
from<font color="#E5E5E5"> different course</font><font color="#CCCCCC"> and this is</font>

94
00:03:57,299 --> 00:04:03,750
important<font color="#E5E5E5"> so how are they the flash I</font>

95
00:04:01,500 --> 00:04:05,190
reload<font color="#CCCCCC"> such a</font><font color="#E5E5E5"> technique has well it's</font>

96
00:04:03,750 --> 00:04:07,350
based<font color="#E5E5E5"> on the application</font><font color="#CCCCCC"> features that</font>

97
00:04:05,190 --> 00:04:10,350
have been<font color="#E5E5E5"> executed in the in the</font>

98
00:04:07,350 --> 00:04:11,850
<font color="#E5E5E5">hypervisor or the</font><font color="#CCCCCC"> Bamm and indeed</font><font color="#E5E5E5"> this</font>

99
00:04:10,350 --> 00:04:13,620
cannot be<font color="#E5E5E5"> this might not be enabled in</font>

100
00:04:11,850 --> 00:04:16,228
this<font color="#E5E5E5"> these features might not be</font><font color="#CCCCCC"> enable</font>

101
00:04:13,620 --> 00:04:19,349
<font color="#E5E5E5">in in commercial clouds so the next</font>

102
00:04:16,228 --> 00:04:21,870
<font color="#E5E5E5">challenge is to find a new side channel</font>

103
00:04:19,349 --> 00:04:23,349
technique that also applies to<font color="#E5E5E5"> a little</font>

104
00:04:21,870 --> 00:04:26,350
<font color="#CCCCCC">three cache so</font>

105
00:04:23,350 --> 00:04:28,780
<font color="#CCCCCC">volker score across scores and that</font>

106
00:04:26,350 --> 00:04:30,310
<font color="#E5E5E5">doesn't rely in in the application</font>

107
00:04:28,780 --> 00:04:32,710
<font color="#CCCCCC">process so basically the application is</font>

108
00:04:30,310 --> 00:04:34,030
turned off<font color="#CCCCCC"> so is</font><font color="#E5E5E5"> this possible we will</font>

109
00:04:32,710 --> 00:04:35,710
see that in this process<font color="#E5E5E5"> in this</font>

110
00:04:34,030 --> 00:04:39,760
presentation<font color="#E5E5E5"> that this is indeed</font>

111
00:04:35,710 --> 00:04:41,200
possible<font color="#CCCCCC"> but first of all let me</font><font color="#E5E5E5"> go for</font>

112
00:04:39,760 --> 00:04:42,849
the background and yeah I'm kind of

113
00:04:41,200 --> 00:04:45,729
<font color="#E5E5E5">giving a hint of what we're gonna do but</font>

114
00:04:42,850 --> 00:04:47,020
yeah let's<font color="#E5E5E5"> ask ourselves</font><font color="#CCCCCC"> why primum</font>

115
00:04:45,730 --> 00:04:49,600
<font color="#CCCCCC">probe has only been applied to upper</font>

116
00:04:47,020 --> 00:04:54,159
level caches<font color="#CCCCCC"> so small caches well indeed</font>

117
00:04:49,600 --> 00:04:56,560
<font color="#E5E5E5">um primum proof based basis is</font><font color="#CCCCCC"> at a key</font>

118
00:04:54,160 --> 00:04:58,180
or<font color="#E5E5E5"> the prime</font><font color="#CCCCCC"> probe spy process is based</font>

119
00:04:56,560 --> 00:05:00,220
on the<font color="#CCCCCC"> knowledge that the user had</font>

120
00:04:58,180 --> 00:05:03,190
choirs<font color="#E5E5E5"> from the physical from the</font>

121
00:05:00,220 --> 00:05:04,900
physical<font color="#E5E5E5"> address</font><font color="#CCCCCC"> and indeed with well we</font>

122
00:05:03,190 --> 00:05:07,510
know that the users only see<font color="#E5E5E5"> bill to</font>

123
00:05:04,900 --> 00:05:08,950
address<font color="#E5E5E5"> this</font><font color="#CCCCCC"> and this which others have</font>

124
00:05:07,510 --> 00:05:10,690
to be<font color="#E5E5E5"> translated</font><font color="#CCCCCC"> to physical addresses</font>

125
00:05:08,950 --> 00:05:12,880
<font color="#E5E5E5">did there is a portion</font><font color="#CCCCCC"> of the route</font>

126
00:05:10,690 --> 00:05:14,800
<font color="#E5E5E5">others that is not translated to that</font>

127
00:05:12,880 --> 00:05:18,430
doesn't<font color="#E5E5E5"> suffer a translation step which</font>

128
00:05:14,800 --> 00:05:19,990
is<font color="#CCCCCC"> the object</font><font color="#E5E5E5"> the offset is directly</font>

129
00:05:18,430 --> 00:05:22,420
depends on the on the memory page size

130
00:05:19,990 --> 00:05:24,840
with with regular page<font color="#E5E5E5"> sizes of four</font>

131
00:05:22,420 --> 00:05:27,940
kilobytes this offset becomes<font color="#E5E5E5"> 12 bits</font>

132
00:05:24,840 --> 00:05:30,849
which might<font color="#E5E5E5"> not</font><font color="#CCCCCC"> be enough to others big</font>

133
00:05:27,940 --> 00:05:32,260
caches we we can we can go to a

134
00:05:30,850 --> 00:05:35,140
<font color="#CCCCCC">situation like like the one we've seen</font>

135
00:05:32,260 --> 00:05:37,300
<font color="#CCCCCC">the slides were let's say</font><font color="#E5E5E5"> the set field</font>

136
00:05:35,140 --> 00:05:38,860
is the one that tells<font color="#E5E5E5"> you what your what</font>

137
00:05:37,300 --> 00:05:41,860
your data are is<font color="#CCCCCC"> gonna be located in</font><font color="#E5E5E5"> the</font>

138
00:05:38,860 --> 00:05:43,960
cache and if the set field<font color="#E5E5E5"> gets some</font>

139
00:05:41,860 --> 00:05:47,470
portion of the on the of<font color="#E5E5E5"> the physical</font>

140
00:05:43,960 --> 00:05:48,789
page the user doesn't know<font color="#CCCCCC"> a user</font>

141
00:05:47,470 --> 00:05:50,020
doesn't know where his data is<font color="#CCCCCC"> gonna be</font>

142
00:05:48,790 --> 00:05:53,290
<font color="#CCCCCC">located and therefore he cannot apply</font>

143
00:05:50,020 --> 00:05:55,780
the the attack but still there are<font color="#E5E5E5"> some</font>

144
00:05:53,290 --> 00:05:56,050
<font color="#CCCCCC">advantages of going to a last level</font>

145
00:05:55,780 --> 00:05:57,760
cache

146
00:05:56,050 --> 00:05:59,890
<font color="#E5E5E5">compared</font><font color="#CCCCCC"> to a level one cache</font><font color="#E5E5E5"> first of</font>

147
00:05:57,760 --> 00:06:02,890
all we have more resolution<font color="#E5E5E5"> last level</font>

148
00:05:59,890 --> 00:06:04,659
cache<font color="#CCCCCC"> accesses compared</font><font color="#E5E5E5"> to memory</font>

149
00:06:02,890 --> 00:06:07,270
<font color="#E5E5E5">accesses are much bigger are much more</font>

150
00:06:04,660 --> 00:06:10,390
<font color="#E5E5E5">distinguishable than level</font><font color="#CCCCCC"> 1 and level 2</font>

151
00:06:07,270 --> 00:06:11,710
accesses and also again<font color="#E5E5E5"> we can work</font>

152
00:06:10,390 --> 00:06:13,390
across<font color="#E5E5E5"> course this is important we</font>

153
00:06:11,710 --> 00:06:14,979
cannot we don't have to be co-located in

154
00:06:13,390 --> 00:06:17,349
the same core anymore<font color="#E5E5E5"> this is a much</font>

155
00:06:14,980 --> 00:06:19,090
<font color="#E5E5E5">weaker assumption on before</font><font color="#CCCCCC"> this</font>

156
00:06:17,350 --> 00:06:21,700
<font color="#E5E5E5">advantage is up the</font><font color="#CCCCCC"> lazarette</font><font color="#E5E5E5"> cache is</font>

157
00:06:19,090 --> 00:06:24,489
usually<font color="#CCCCCC"> in Intel processors</font><font color="#E5E5E5"> at least</font>

158
00:06:21,700 --> 00:06:26,740
it's divided<font color="#E5E5E5"> into a slices this means</font>

159
00:06:24,490 --> 00:06:28,480
that instead of having a lateral cache

160
00:06:26,740 --> 00:06:30,850
<font color="#E5E5E5">like the one we see in the slide where</font>

161
00:06:28,480 --> 00:06:31,930
we<font color="#E5E5E5"> have</font><font color="#CCCCCC"> four sets for example well</font><font color="#E5E5E5"> this</font>

162
00:06:30,850 --> 00:06:33,550
<font color="#E5E5E5">is not</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be like this this is</font>

163
00:06:31,930 --> 00:06:35,910
going<font color="#E5E5E5"> to be for example divided in two</font>

164
00:06:33,550 --> 00:06:37,060
slices<font color="#E5E5E5"> a slice one</font><font color="#CCCCCC"> on a</font><font color="#E5E5E5"> size two</font><font color="#CCCCCC"> and</font>

165
00:06:35,910 --> 00:06:38,860
yeah

166
00:06:37,060 --> 00:06:40,980
you'll find<font color="#E5E5E5"> for said it just lies as</font>

167
00:06:38,860 --> 00:06:45,160
when I get to set so basically the user

168
00:06:40,980 --> 00:06:46,870
<font color="#CCCCCC">was gonna be only able to to</font><font color="#E5E5E5"> put his</font>

169
00:06:45,160 --> 00:06:49,060
<font color="#CCCCCC">date time to set zero or set one and</font>

170
00:06:46,870 --> 00:06:52,120
<font color="#E5E5E5">there is</font><font color="#CCCCCC"> a I shouldn't say unknown I</font>

171
00:06:49,060 --> 00:06:54,520
should say<font color="#CCCCCC"> I'm public function</font><font color="#E5E5E5"> not</font>

172
00:06:52,120 --> 00:06:57,100
documented<font color="#CCCCCC"> by</font><font color="#E5E5E5"> Intel that decides</font><font color="#CCCCCC"> between</font>

173
00:06:54,520 --> 00:07:02,070
both the slices<font color="#E5E5E5"> between</font><font color="#CCCCCC"> words gonna be</font>

174
00:06:57,100 --> 00:07:04,570
<font color="#E5E5E5">located with these evidences let's</font>

175
00:07:02,070 --> 00:07:07,000
explain how the new side channel attack

176
00:07:04,570 --> 00:07:09,010
works<font color="#CCCCCC"> so basically we want to make the</font>

177
00:07:07,000 --> 00:07:11,440
offset bigger so<font color="#CCCCCC"> that so that we</font><font color="#E5E5E5"> can</font>

178
00:07:09,010 --> 00:07:13,300
address the last level cache<font color="#E5E5E5"> so that we</font>

179
00:07:11,440 --> 00:07:17,200
can control<font color="#E5E5E5"> the last of the cache so</font>

180
00:07:13,300 --> 00:07:19,389
<font color="#E5E5E5">what come how can we do this well</font><font color="#CCCCCC"> indeed</font>

181
00:07:17,200 --> 00:07:21,969
we can allocate<font color="#E5E5E5"> huge memory pages which</font>

182
00:07:19,389 --> 00:07:24,970
yes is enabled in most hypervisor

183
00:07:21,970 --> 00:07:27,100
sourcing from<font color="#E5E5E5"> the guest VM huge memory</font>

184
00:07:24,970 --> 00:07:29,139
<font color="#E5E5E5">pages instead of</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> kilobyte four</font>

185
00:07:27,100 --> 00:07:30,940
kilobytes are of a size of two megabytes

186
00:07:29,139 --> 00:07:33,580
<font color="#E5E5E5">this means that the offset instead of</font>

187
00:07:30,940 --> 00:07:35,740
<font color="#CCCCCC">twelve feet it becomes 21</font><font color="#E5E5E5"> bits well this</font>

188
00:07:33,580 --> 00:07:39,849
is much better<font color="#E5E5E5"> we can now control caches</font>

189
00:07:35,740 --> 00:07:42,250
up to<font color="#CCCCCC"> two to a 15 sets</font><font color="#E5E5E5"> and indeed this</font>

190
00:07:39,850 --> 00:07:44,890
is<font color="#E5E5E5"> far from what</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> need because most</font>

191
00:07:42,250 --> 00:07:48,610
Intel processors has last has have last

192
00:07:44,890 --> 00:07:50,950
level caches<font color="#CCCCCC"> of 2 to 11 2 to 11 sets</font><font color="#E5E5E5"> at</font>

193
00:07:48,610 --> 00:07:53,800
most<font color="#E5E5E5"> so basically we are far from from</font>

194
00:07:50,950 --> 00:07:56,289
the limit now that we can control<font color="#E5E5E5"> the</font>

195
00:07:53,800 --> 00:07:58,030
last level cache<font color="#CCCCCC"> we can apply a primer</font>

196
00:07:56,289 --> 00:08:00,099
<font color="#E5E5E5">primer improve process we're gonna add a</font>

197
00:07:58,030 --> 00:08:02,559
slightly different step here which<font color="#E5E5E5"> is</font>

198
00:08:00,100 --> 00:08:04,750
the reprime process but let me<font color="#E5E5E5"> explain</font>

199
00:08:02,560 --> 00:08:06,400
how this works<font color="#CCCCCC"> so basically we first of</font>

200
00:08:04,750 --> 00:08:08,860
all<font color="#E5E5E5"> as attackers generated lines or</font>

201
00:08:06,400 --> 00:08:10,710
memory blocks that<font color="#E5E5E5"> feel</font><font color="#CCCCCC"> a set in the</font>

202
00:08:08,860 --> 00:08:12,880
level 3<font color="#CCCCCC"> cache</font>

203
00:08:10,710 --> 00:08:16,210
however since<font color="#E5E5E5"> level 3 cache is</font><font color="#CCCCCC"> are</font>

204
00:08:12,880 --> 00:08:17,680
inclusive in Intel processors<font color="#E5E5E5"> we are</font>

205
00:08:16,210 --> 00:08:19,330
going to experience something like<font color="#E5E5E5"> this</font>

206
00:08:17,680 --> 00:08:22,360
<font color="#E5E5E5">word upper level caches are going to</font>

207
00:08:19,330 --> 00:08:24,729
also<font color="#E5E5E5"> be filled</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> since we want to</font>

208
00:08:22,360 --> 00:08:28,450
clearly distinguish between last level

209
00:08:24,729 --> 00:08:30,190
cache<font color="#E5E5E5"> and memory accesses</font><font color="#CCCCCC"> we don't want</font>

210
00:08:28,450 --> 00:08:32,588
that a big<font color="#CCCCCC"> chunk in the level 1 level 2</font>

211
00:08:30,190 --> 00:08:36,010
cache is affect our our results in<font color="#E5E5E5"> any</font>

212
00:08:32,589 --> 00:08:37,599
<font color="#E5E5E5">way so what we do is we reprime the</font>

213
00:08:36,010 --> 00:08:43,150
upper level caches<font color="#CCCCCC"> so basically we</font>

214
00:08:37,599 --> 00:08:44,470
generate memory blocks that<font color="#E5E5E5"> kick memory</font>

215
00:08:43,150 --> 00:08:46,569
blocks in the level<font color="#E5E5E5"> 1 and level 2</font>

216
00:08:44,470 --> 00:08:48,760
crashes<font color="#E5E5E5"> but</font><font color="#CCCCCC"> that don't</font><font color="#E5E5E5"> touch the</font><font color="#CCCCCC"> the</font>

217
00:08:46,570 --> 00:08:50,740
memory blocks in the last level<font color="#E5E5E5"> cache so</font>

218
00:08:48,760 --> 00:08:52,540
now we have the<font color="#CCCCCC"> perfect scenario where</font>

219
00:08:50,740 --> 00:08:55,390
any<font color="#CCCCCC"> eviction in the level 3</font><font color="#E5E5E5"> cast is</font>

220
00:08:52,540 --> 00:08:56,439
gonna<font color="#CCCCCC"> give us a stick it's gonna</font><font color="#E5E5E5"> we're</font>

221
00:08:55,390 --> 00:08:59,470
gonna be able<font color="#E5E5E5"> to extinguish with the</font>

222
00:08:56,440 --> 00:09:01,300
memory access and<font color="#CCCCCC"> level 3 now the big</font>

223
00:08:59,470 --> 00:09:03,970
<font color="#CCCCCC">team comes for example and executes set</font>

224
00:09:01,300 --> 00:09:05,709
process<font color="#CCCCCC"> that might or might not use this</font>

225
00:09:03,970 --> 00:09:08,740
set we're monitoring in the<font color="#E5E5E5"> level</font><font color="#CCCCCC"> 3</font>

226
00:09:05,710 --> 00:09:10,600
cache<font color="#CCCCCC"> let's assume that</font><font color="#E5E5E5"> he doesn't use</font>

227
00:09:08,740 --> 00:09:12,790
<font color="#E5E5E5">the level 3 cache so he will</font><font color="#CCCCCC"> use a</font>

228
00:09:10,600 --> 00:09:14,680
<font color="#E5E5E5">memory block that doesn't evict any of</font>

229
00:09:12,790 --> 00:09:19,569
our red lines in the level<font color="#E5E5E5"> 3</font><font color="#CCCCCC"> cache and</font>

230
00:09:14,680 --> 00:09:21,819
when we prove this<font color="#CCCCCC"> let these three red</font>

231
00:09:19,570 --> 00:09:23,530
memory blocks from the from the cache

232
00:09:21,820 --> 00:09:25,000
well indeed<font color="#E5E5E5"> since all of them still</font>

233
00:09:23,530 --> 00:09:28,810
reside in the last<font color="#E5E5E5"> level cache we're</font>

234
00:09:25,000 --> 00:09:30,280
gonna see a low pro of<font color="#E5E5E5"> timing however it</font>

235
00:09:28,810 --> 00:09:32,260
can it might<font color="#CCCCCC"> have in the opposite right</font>

236
00:09:30,280 --> 00:09:34,930
it<font color="#E5E5E5"> might happen that the big team uses</font>

237
00:09:32,260 --> 00:09:36,580
the<font color="#CCCCCC"> set we</font><font color="#E5E5E5"> are monitoring</font><font color="#CCCCCC"> I indeed one</font>

238
00:09:34,930 --> 00:09:37,959
of the<font color="#E5E5E5"> memory blocks is not gonna recite</font>

239
00:09:36,580 --> 00:09:39,520
<font color="#E5E5E5">any more in the in the last level</font><font color="#CCCCCC"> cache</font>

240
00:09:37,960 --> 00:09:41,590
but it's gonna<font color="#E5E5E5"> be</font><font color="#CCCCCC"> eternally residing in</font>

241
00:09:39,520 --> 00:09:43,480
memory<font color="#E5E5E5"> this time so basically</font><font color="#CCCCCC"> we're</font>

242
00:09:41,590 --> 00:09:44,950
going<font color="#E5E5E5"> to reload two memory blocks from</font>

243
00:09:43,480 --> 00:09:47,080
the from the lateral cache<font color="#E5E5E5"> one from</font>

244
00:09:44,950 --> 00:09:50,110
memory and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> give us a high</font>

245
00:09:47,080 --> 00:09:53,800
<font color="#CCCCCC">profile the question is if this is still</font>

246
00:09:50,110 --> 00:09:57,970
distinguishable<font color="#E5E5E5"> well indeed it is we can</font>

247
00:09:53,800 --> 00:10:00,520
see in the in the plot the<font color="#E5E5E5"> probability</font>

248
00:09:57,970 --> 00:10:02,620
distribution of<font color="#CCCCCC"> 12 the red distribution</font>

249
00:10:00,520 --> 00:10:05,860
is registration<font color="#CCCCCC"> are</font><font color="#E5E5E5"> twelve lines</font>

250
00:10:02,620 --> 00:10:09,190
<font color="#E5E5E5">pre-loaded from the last level cache and</font>

251
00:10:05,860 --> 00:10:10,660
the blue distribution<font color="#E5E5E5"> are 11 lines from</font>

252
00:10:09,190 --> 00:10:13,240
the last<font color="#E5E5E5"> total cache on one from memory</font>

253
00:10:10,660 --> 00:10:14,439
and<font color="#CCCCCC"> indeed this</font><font color="#E5E5E5"> is the probability their</font>

254
00:10:13,240 --> 00:10:17,230
<font color="#E5E5E5">probability distribution over the</font>

255
00:10:14,440 --> 00:10:19,450
<font color="#CCCCCC">hardware cycles</font><font color="#E5E5E5"> we can see that they</font><font color="#CCCCCC"> are</font>

256
00:10:17,230 --> 00:10:21,550
not<font color="#E5E5E5"> only the</font><font color="#CCCCCC"> timing or the</font><font color="#E5E5E5"> reload time</font>

257
00:10:19,450 --> 00:10:23,140
<font color="#CCCCCC">is much lower</font><font color="#E5E5E5"> when we reload all of them</font>

258
00:10:21,550 --> 00:10:25,359
<font color="#E5E5E5">from the cache but also the variance the</font>

259
00:10:23,140 --> 00:10:26,830
<font color="#E5E5E5">variance to seem unimportant of should</font>

260
00:10:25,360 --> 00:10:28,950
vanish observation that<font color="#E5E5E5"> we make here</font>

261
00:10:26,830 --> 00:10:31,930
because it's much lower as well as well

262
00:10:28,950 --> 00:10:35,500
so basically<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> see that if we put a</font>

263
00:10:31,930 --> 00:10:37,030
threshold<font color="#E5E5E5"> between let's say 300 and 300</font>

264
00:10:35,500 --> 00:10:40,360
cycles we can clearly<font color="#CCCCCC"> distinguish both</font>

265
00:10:37,030 --> 00:10:42,819
both<font color="#E5E5E5"> cases again this is true if we can</font>

266
00:10:40,360 --> 00:10:46,570
control the<font color="#E5E5E5"> the slices where we're</font>

267
00:10:42,820 --> 00:10:49,800
monitoring separately so how can we

268
00:10:46,570 --> 00:10:52,300
apply this to<font color="#CCCCCC"> a yes</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> this we're gonna</font>

269
00:10:49,800 --> 00:10:53,800
apply<font color="#E5E5E5"> this to a</font><font color="#CCCCCC"> t-table implementation</font>

270
00:10:52,300 --> 00:10:56,740
of AES and we're<font color="#CCCCCC"> gonna apply</font><font color="#E5E5E5"> a lesser</font>

271
00:10:53,800 --> 00:10:58,270
<font color="#E5E5E5">attack where the last round yeah the</font>

272
00:10:56,740 --> 00:11:00,280
last<font color="#CCCCCC"> one</font><font color="#E5E5E5"> of various looks somehow</font>

273
00:10:58,270 --> 00:11:03,939
similar<font color="#E5E5E5"> of to what we are seen in the</font>

274
00:11:00,280 --> 00:11:04,540
<font color="#E5E5E5">slide so we're gonna try</font><font color="#CCCCCC"> to monitor</font>

275
00:11:03,940 --> 00:11:06,459
<font color="#E5E5E5">where</font>

276
00:11:04,540 --> 00:11:09,849
well when a<font color="#E5E5E5"> t-table position has</font><font color="#CCCCCC"> not</font>

277
00:11:06,459 --> 00:11:11,680
been used<font color="#E5E5E5"> there is indeed let's say that</font>

278
00:11:09,850 --> 00:11:14,440
we're monitoring<font color="#E5E5E5"> table position number</font>

279
00:11:11,680 --> 00:11:16,599
<font color="#E5E5E5">one right so there's gonna be only a</font>

280
00:11:14,440 --> 00:11:18,459
ciphertext value that always uses that

281
00:11:16,600 --> 00:11:21,630
field position for<font color="#CCCCCC"> this last</font><font color="#E5E5E5"> round</font>

282
00:11:18,459 --> 00:11:23,500
<font color="#E5E5E5">indeed the one that holds this equation</font>

283
00:11:21,630 --> 00:11:25,510
<font color="#E5E5E5">so there's going to be only one</font>

284
00:11:23,500 --> 00:11:27,070
ciphertext value<font color="#E5E5E5"> that always uses</font><font color="#CCCCCC"> the</font>

285
00:11:25,510 --> 00:11:28,449
table position the rest they might have

286
00:11:27,070 --> 00:11:30,850
a<font color="#E5E5E5"> chance or they might not have a chance</font>

287
00:11:28,449 --> 00:11:32,949
of using<font color="#E5E5E5"> it so you need if we monitor</font>

288
00:11:30,850 --> 00:11:36,310
when this has not been<font color="#CCCCCC"> used</font><font color="#E5E5E5"> this there's</font>

289
00:11:32,949 --> 00:11:38,529
<font color="#E5E5E5">gonna be only one set vertex value that</font>

290
00:11:36,310 --> 00:11:40,719
is going<font color="#CCCCCC"> to show us</font><font color="#E5E5E5"> the counter</font><font color="#CCCCCC"> a very</font>

291
00:11:38,529 --> 00:11:42,760
low counter and we can see it<font color="#E5E5E5"> even and</font>

292
00:11:40,720 --> 00:11:44,610
once we obtained<font color="#E5E5E5"> that ciphertext value</font>

293
00:11:42,760 --> 00:11:46,720
we can solve the question<font color="#CCCCCC"> byte by byte</font>

294
00:11:44,610 --> 00:11:50,740
<font color="#E5E5E5">we can see it in there in the picture</font>

295
00:11:46,720 --> 00:11:53,410
need where the x-axis plots the the

296
00:11:50,740 --> 00:11:56,620
ciphertext value and and I see the

297
00:11:53,410 --> 00:11:58,899
distribution<font color="#E5E5E5"> in the y-axis normalized so</font>

298
00:11:56,620 --> 00:12:01,870
we see<font color="#E5E5E5"> well indeed a cache line holds</font>

299
00:11:58,899 --> 00:12:03,610
more than<font color="#E5E5E5"> one table position so</font>

300
00:12:01,870 --> 00:12:05,680
basically we<font color="#E5E5E5"> can't monitor only one</font>

301
00:12:03,610 --> 00:12:07,540
table<font color="#CCCCCC"> per sumit we have to monitor</font><font color="#E5E5E5"> many</font>

302
00:12:05,680 --> 00:12:09,910
of them at the same<font color="#CCCCCC"> time</font><font color="#E5E5E5"> but still it's</font>

303
00:12:07,540 --> 00:12:13,329
clearly the distributions are clearly

304
00:12:09,910 --> 00:12:15,910
clearly distinguishable so we can still

305
00:12:13,329 --> 00:12:17,560
solve<font color="#E5E5E5"> the question and get</font><font color="#CCCCCC"> the key that</font>

306
00:12:15,910 --> 00:12:24,040
<font color="#E5E5E5">has been used</font><font color="#CCCCCC"> you can do is for all</font><font color="#E5E5E5"> the</font>

307
00:12:17,560 --> 00:12:25,540
<font color="#E5E5E5">bytes in in the in the</font><font color="#CCCCCC"> years</font><font color="#E5E5E5"> so however</font>

308
00:12:24,040 --> 00:12:27,459
there is a pre step that we have<font color="#CCCCCC"> to do</font>

309
00:12:25,540 --> 00:12:29,139
before before that that we have<font color="#E5E5E5"> to know</font>

310
00:12:27,459 --> 00:12:32,229
where<font color="#E5E5E5"> the</font><font color="#CCCCCC"> tea tables are located in the</font>

311
00:12:29,139 --> 00:12:35,110
last<font color="#CCCCCC"> -</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> is not</font><font color="#E5E5E5"> a hard hard process</font>

312
00:12:32,230 --> 00:12:37,410
<font color="#E5E5E5">because</font><font color="#CCCCCC"> so basically we can</font><font color="#E5E5E5"> clearly</font>

313
00:12:35,110 --> 00:12:40,300
distinguish<font color="#CCCCCC"> as</font><font color="#E5E5E5"> we've seen in the</font><font color="#CCCCCC"> figures</font>

314
00:12:37,410 --> 00:12:42,579
<font color="#E5E5E5">when a set has been used by the</font>

315
00:12:40,300 --> 00:12:44,290
encryption<font color="#E5E5E5"> and when a set has not been</font>

316
00:12:42,579 --> 00:12:47,229
<font color="#E5E5E5">used by the AES encryption</font><font color="#CCCCCC"> indeed the</font>

317
00:12:44,290 --> 00:12:50,189
<font color="#CCCCCC">right the right the right graph shows</font>

318
00:12:47,230 --> 00:12:53,829
said that hasn't been hasn't used the

319
00:12:50,190 --> 00:12:57,160
the set<font color="#E5E5E5"> since we see all the timings</font>

320
00:12:53,829 --> 00:12:58,660
around 200 cycles<font color="#E5E5E5"> I mean the left one we</font>

321
00:12:57,160 --> 00:13:02,350
can see a said that<font color="#CCCCCC"> has</font><font color="#E5E5E5"> been used by the</font>

322
00:12:58,660 --> 00:13:05,949
AES<font color="#E5E5E5"> and indeed</font><font color="#CCCCCC"> at table position because</font>

323
00:13:02,350 --> 00:13:08,230
we see low timings<font color="#E5E5E5"> around like 8 percent</font>

324
00:13:05,949 --> 00:13:09,639
of the<font color="#E5E5E5"> times and</font><font color="#CCCCCC"> yeah high</font><font color="#E5E5E5"> time is</font>

325
00:13:08,230 --> 00:13:11,470
<font color="#E5E5E5">around 90% of the times which is</font>

326
00:13:09,639 --> 00:13:15,970
<font color="#E5E5E5">actually the behavior we expect</font><font color="#CCCCCC"> from the</font>

327
00:13:11,470 --> 00:13:18,010
<font color="#CCCCCC">primitives from a</font><font color="#E5E5E5"> table position</font><font color="#CCCCCC"> so let</font>

328
00:13:15,970 --> 00:13:18,430
<font color="#E5E5E5">me show the results we implemented this</font>

329
00:13:18,010 --> 00:13:21,730
<font color="#CCCCCC">in</font>

330
00:13:18,430 --> 00:13:24,189
in two<font color="#CCCCCC"> different machines one of them is</font>

331
00:13:21,730 --> 00:13:27,220
an<font color="#E5E5E5"> Intel i5 6 5 0 it has 2 cores 2</font>

332
00:13:24,190 --> 00:13:29,200
<font color="#E5E5E5">slices</font><font color="#CCCCCC"> so basically here the slide</font>

333
00:13:27,220 --> 00:13:33,190
<font color="#CCCCCC">selection algorithm is easy to figure</font>

334
00:13:29,200 --> 00:13:35,649
out<font color="#CCCCCC"> just it's just</font><font color="#E5E5E5"> using the</font><font color="#CCCCCC"> xvii</font><font color="#E5E5E5"> bit to</font>

335
00:13:33,190 --> 00:13:37,779
the side<font color="#E5E5E5"> from with whether it goes to</font>

336
00:13:35,649 --> 00:13:40,390
<font color="#CCCCCC">one side or the other are we implemented</font>

337
00:13:37,779 --> 00:13:43,180
this in<font color="#CCCCCC"> x10</font><font color="#E5E5E5"> on VMware you that with</font><font color="#CCCCCC"> one</font>

338
00:13:40,390 --> 00:13:45,850
to<font color="#E5E5E5"> twelve of our guest VMs we also</font>

339
00:13:43,180 --> 00:13:49,660
implemented in a much more much more

340
00:13:45,850 --> 00:13:52,360
modern<font color="#E5E5E5"> machine until I five to thirty</font>

341
00:13:49,660 --> 00:13:55,329
nine five two<font color="#CCCCCC"> two six four zero V three</font>

342
00:13:52,360 --> 00:13:57,880
<font color="#E5E5E5">that has eight core safety slices it</font>

343
00:13:55,330 --> 00:13:59,800
uses<font color="#E5E5E5"> many bits on the on the to select</font>

344
00:13:57,880 --> 00:14:02,230
between<font color="#E5E5E5"> all the slices</font><font color="#CCCCCC"> that it has</font>

345
00:13:59,800 --> 00:14:03,849
<font color="#E5E5E5">however we can still target the slices</font>

346
00:14:02,230 --> 00:14:07,089
separately<font color="#E5E5E5"> because we can actually</font>

347
00:14:03,850 --> 00:14:10,060
<font color="#E5E5E5">figure out which memory blocks go to the</font>

348
00:14:07,089 --> 00:14:12,580
same or<font color="#E5E5E5"> collide in the same a slice</font><font color="#CCCCCC"> we</font>

349
00:14:10,060 --> 00:14:14,800
are using this<font color="#E5E5E5"> thing with VMware and and</font>

350
00:14:12,580 --> 00:14:18,250
we're using this time 1/2 1404 for the

351
00:14:14,800 --> 00:14:20,979
<font color="#CCCCCC">ascus</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> engine the results are shown</font>

352
00:14:18,250 --> 00:14:23,589
<font color="#E5E5E5">in</font><font color="#CCCCCC"> the in the picture where the x-axis</font>

353
00:14:20,980 --> 00:14:25,810
<font color="#E5E5E5">plots</font><font color="#CCCCCC"> then the number</font><font color="#E5E5E5"> of encryptions we</font>

354
00:14:23,589 --> 00:14:28,270
need<font color="#CCCCCC"> times one thousand two to</font><font color="#E5E5E5"> recover</font>

355
00:14:25,810 --> 00:14:31,719
<font color="#E5E5E5">the key and the y-axis shows the number</font>

356
00:14:28,270 --> 00:14:33,370
of correctly<font color="#E5E5E5"> guessed key bytes from zero</font>

357
00:14:31,720 --> 00:14:37,350
to<font color="#E5E5E5"> sixteen because you will</font><font color="#CCCCCC"> use in a es</font>

358
00:14:33,370 --> 00:14:40,000
<font color="#CCCCCC">one 128 and ignoring</font><font color="#E5E5E5"> for a moment the</font>

359
00:14:37,350 --> 00:14:41,800
green and the red<font color="#CCCCCC"> lines which</font><font color="#E5E5E5"> do not</font>

360
00:14:40,000 --> 00:14:45,700
plot the<font color="#E5E5E5"> crossbeam</font><font color="#CCCCCC"> as scenario let's</font>

361
00:14:41,800 --> 00:14:48,400
focus on the on the<font color="#CCCCCC"> other ones we can</font>

362
00:14:45,700 --> 00:14:52,120
see that<font color="#E5E5E5"> the blue line</font><font color="#CCCCCC"> which is the</font><font color="#E5E5E5"> xn</font>

363
00:14:48,400 --> 00:14:54,459
hypervisor in in the<font color="#E5E5E5"> Intel a</font><font color="#CCCCCC"> is the one</font>

364
00:14:52,120 --> 00:14:56,140
that<font color="#E5E5E5"> needs more more traces to recover</font>

365
00:14:54,459 --> 00:14:58,089
the key and indeed we think that it

366
00:14:56,140 --> 00:14:59,350
behaves<font color="#E5E5E5"> worse than the</font><font color="#CCCCCC"> VMware because</font>

367
00:14:58,089 --> 00:15:02,020
we're using a fully<font color="#CCCCCC"> virtualized</font>

368
00:14:59,350 --> 00:15:05,020
hypervisor here this is<font color="#E5E5E5"> selling more</font>

369
00:15:02,020 --> 00:15:08,050
<font color="#E5E5E5">noise than a para virtualized hypervisor</font>

370
00:15:05,020 --> 00:15:09,189
<font color="#E5E5E5">so basically that's what that's</font><font color="#CCCCCC"> the we</font>

371
00:15:08,050 --> 00:15:11,020
believe this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> reason why we're</font>

372
00:15:09,190 --> 00:15:16,779
seeing<font color="#E5E5E5"> worse results</font><font color="#CCCCCC"> an index and an</font>

373
00:15:11,020 --> 00:15:20,130
VMware we also observe that<font color="#E5E5E5"> the internal</font>

374
00:15:16,779 --> 00:15:22,480
key on<font color="#E5E5E5"> in needs less traces also to</font>

375
00:15:20,130 --> 00:15:25,750
recover the key and we really this is

376
00:15:22,480 --> 00:15:28,390
because the key<font color="#CCCCCC"> this the lateral caste</font>

377
00:15:25,750 --> 00:15:30,790
<font color="#E5E5E5">that the King has it's much bigger than</font>

378
00:15:28,390 --> 00:15:32,300
<font color="#E5E5E5">the one that the Intel i5 has so</font>

379
00:15:30,790 --> 00:15:35,060
basically a side process that is

380
00:15:32,300 --> 00:15:37,069
using the same set and<font color="#E5E5E5"> it's creating</font>

381
00:15:35,060 --> 00:15:39,469
false positives<font color="#E5E5E5"> it's very likely</font><font color="#CCCCCC"> that</font>

382
00:15:37,070 --> 00:15:41,690
it's much more<font color="#CCCCCC"> likely that uses the same</font>

383
00:15:39,470 --> 00:15:45,260
set in the<font color="#E5E5E5"> Intel i5 than in the Intel</font>

384
00:15:41,690 --> 00:15:47,270
<font color="#CCCCCC">kill so</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> still in the</font><font color="#E5E5E5"> worst case even</font>

385
00:15:45,260 --> 00:15:50,030
<font color="#E5E5E5">in the worst case we</font><font color="#CCCCCC"> can still recover</font>

386
00:15:47,270 --> 00:15:53,329
the key<font color="#E5E5E5"> pretty quickly so the same case</font>

387
00:15:50,030 --> 00:15:57,770
was<font color="#CCCCCC"> used</font><font color="#E5E5E5"> we were able to obtain the key</font>

388
00:15:53,330 --> 00:16:00,650
in less than three minutes<font color="#E5E5E5"> so to</font>

389
00:15:57,770 --> 00:16:02,150
conclude so we show<font color="#E5E5E5"> that a new cross</font>

390
00:16:00,650 --> 00:16:03,770
<font color="#E5E5E5">core side channel attack that uses the</font>

391
00:16:02,150 --> 00:16:06,230
<font color="#E5E5E5">last</font><font color="#CCCCCC"> level cache is still possible</font><font color="#E5E5E5"> even</font>

392
00:16:03,770 --> 00:16:08,150
<font color="#E5E5E5">when the duplication features are not</font>

393
00:16:06,230 --> 00:16:09,380
turned on<font color="#E5E5E5"> so basically</font><font color="#CCCCCC"> I'm gonna</font><font color="#E5E5E5"> steal</font>

394
00:16:08,150 --> 00:16:12,350
monitor<font color="#E5E5E5"> that's a little cash across</font>

395
00:16:09,380 --> 00:16:15,620
course the only assumption we are<font color="#E5E5E5"> using</font>

396
00:16:12,350 --> 00:16:17,990
is<font color="#CCCCCC"> that the the guest VM or the tagger</font>

397
00:16:15,620 --> 00:16:19,640
<font color="#CCCCCC">beam</font><font color="#E5E5E5"> can use huge pages can allocate</font>

398
00:16:17,990 --> 00:16:22,040
huge pages<font color="#E5E5E5"> to control the</font><font color="#CCCCCC"> rest of the</font><font color="#E5E5E5"> -</font>

399
00:16:19,640 --> 00:16:23,960
and we saw this<font color="#E5E5E5"> with demonstrators in in</font>

400
00:16:22,040 --> 00:16:28,630
<font color="#CCCCCC">AES</font><font color="#E5E5E5"> and we see that we can recover the</font>

401
00:16:23,960 --> 00:16:30,710
AES key<font color="#E5E5E5"> pretty fast we have an</font>

402
00:16:28,630 --> 00:16:33,380
additional stage of<font color="#E5E5E5"> course that</font><font color="#CCCCCC"> devaloka</font>

403
00:16:30,710 --> 00:16:36,290
<font color="#E5E5E5">somebody we still we saw that</font><font color="#CCCCCC"> it doesn't</font>

404
00:16:33,380 --> 00:16:38,210
add too<font color="#E5E5E5"> much overhead and</font><font color="#CCCCCC"> the remaining</font>

405
00:16:36,290 --> 00:16:39,740
question question that<font color="#CCCCCC"> that well the</font>

406
00:16:38,210 --> 00:16:41,510
question that remains<font color="#CCCCCC"> is if</font><font color="#E5E5E5"> tenants</font>

407
00:16:39,740 --> 00:16:43,220
should be allowed<font color="#CCCCCC"> to use huge size pages</font>

408
00:16:41,510 --> 00:16:45,380
from from<font color="#CCCCCC"> the SD</font><font color="#E5E5E5"> ins or at least the way</font>

409
00:16:43,220 --> 00:16:47,570
they do it now<font color="#E5E5E5"> that concludes my</font>

410
00:16:45,380 --> 00:16:49,780
<font color="#CCCCCC">presentation thank you and I'll take</font>

411
00:16:47,570 --> 00:16:49,780
questions

412
00:16:55,970 --> 00:17:01,950
good Jethro Beekman<font color="#E5E5E5"> uc-berkeley</font>

413
00:16:59,550 --> 00:17:03,300
<font color="#CCCCCC">I was wondering what is the workload in</font>

414
00:17:01,950 --> 00:17:04,920
your test<font color="#E5E5E5"> setup were there any other</font>

415
00:17:03,300 --> 00:17:09,149
<font color="#CCCCCC">things running besides two measurements</font>

416
00:17:04,920 --> 00:17:11,939
<font color="#CCCCCC">PI processes no no no there was nothing</font>

417
00:17:09,150 --> 00:17:13,410
<font color="#E5E5E5">Ryan Ryan at the same time no um we</font>

418
00:17:11,939 --> 00:17:15,480
believe will indeed<font color="#CCCCCC"> we've seen the</font>

419
00:17:13,410 --> 00:17:18,000
<font color="#E5E5E5">results right um that when you are using</font>

420
00:17:15,480 --> 00:17:19,829
a fully real choice you know hypervisor

421
00:17:18,000 --> 00:17:21,209
that<font color="#E5E5E5"> creates more more additional noise</font>

422
00:17:19,829 --> 00:17:23,369
and so on we can<font color="#E5E5E5"> see we see that the</font>

423
00:17:21,209 --> 00:17:29,190
results<font color="#E5E5E5"> get get worse but no apart from</font>

424
00:17:23,369 --> 00:17:31,110
<font color="#E5E5E5">that nothing nothing else what have you</font>

425
00:17:29,190 --> 00:17:35,550
confirmed if like Amazon ec2 allows

426
00:17:31,110 --> 00:17:39,810
large page allocations if you can use

427
00:17:35,550 --> 00:17:42,540
huge if you can allocate huge pages and

428
00:17:39,810 --> 00:17:46,860
have you tried running<font color="#E5E5E5"> your attack</font><font color="#CCCCCC"> I</font>

429
00:17:42,540 --> 00:17:48,810
would<font color="#CCCCCC"> say noting this paper we'll take</font>

430
00:17:46,860 --> 00:17:50,250
that offline<font color="#CCCCCC"> all right why don't</font><font color="#E5E5E5"> we</font>

431
00:17:48,810 --> 00:17:53,270
unless there's any<font color="#E5E5E5"> more</font><font color="#CCCCCC"> questions well</font>

432
00:17:50,250 --> 00:17:53,270
thank the speaker<font color="#E5E5E5"> again</font>

