1
00:00:00,000 --> 00:00:04,799
thank you<font color="#CCCCCC"> very</font><font color="#E5E5E5"> much for the introduction</font>

2
00:00:02,159 --> 00:00:08,129
I<font color="#CCCCCC"> said great</font><font color="#E5E5E5"> honor to be able to present</font>

3
00:00:04,799 --> 00:00:11,160
here so hi my name is Pam<font color="#CCCCCC"> Yong Kim or</font>

4
00:00:08,130 --> 00:00:13,139
simply call me<font color="#E5E5E5"> Ben and this work was</font>

5
00:00:11,160 --> 00:00:16,440
done with Professor David Lee at the

6
00:00:13,139 --> 00:00:18,960
<font color="#CCCCCC">University of Toronto so I'd like to</font>

7
00:00:16,440 --> 00:00:20,820
talk about the<font color="#CCCCCC"> chaos which is a system</font>

8
00:00:18,960 --> 00:00:22,830
for verifying the consistency of class

9
00:00:20,820 --> 00:00:27,359
story services with the battery-powered

10
00:00:22,830 --> 00:00:30,900
devices so these days we have a<font color="#E5E5E5"> variety</font>

11
00:00:27,359 --> 00:00:33,149
of cloud storage services these are

12
00:00:30,900 --> 00:00:35,370
managed<font color="#CCCCCC"> by the third parties so their</font>

13
00:00:33,149 --> 00:00:40,379
customers are concerned<font color="#CCCCCC"> about their</font>

14
00:00:35,370 --> 00:00:43,140
information security so as bread and

15
00:00:40,379 --> 00:00:45,960
butter encryption<font color="#E5E5E5"> can protect data</font>

16
00:00:43,140 --> 00:00:49,920
confidentiality and<font color="#E5E5E5"> this</font><font color="#CCCCCC"> dose signature</font>

17
00:00:45,960 --> 00:00:52,199
can protect data integrity however these

18
00:00:49,920 --> 00:00:56,360
are not sufficient<font color="#E5E5E5"> to protect from</font><font color="#CCCCCC"> the</font>

19
00:00:52,199 --> 00:00:59,280
consistency attacks as one example<font color="#E5E5E5"> of</font>

20
00:00:56,360 --> 00:01:03,059
consistency attacks is a classical<font color="#E5E5E5"> a</font>

21
00:00:59,280 --> 00:01:05,790
classic fork attack let's let's assume

22
00:01:03,059 --> 00:01:10,619
there is a git repository service hosted

23
00:01:05,790 --> 00:01:14,369
on the<font color="#CCCCCC"> cloud and client a has push it</font>

24
00:01:10,619 --> 00:01:17,360
initial update to the cloud and which is

25
00:01:14,369 --> 00:01:20,689
feasible by every other client now

26
00:01:17,360 --> 00:01:23,729
malicious cloud starts emitting any

27
00:01:20,689 --> 00:01:27,539
update from client a and C and hide them

28
00:01:23,729 --> 00:01:29,640
<font color="#E5E5E5">from</font><font color="#CCCCCC"> point B</font><font color="#E5E5E5"> and vice versa now any</font>

29
00:01:27,540 --> 00:01:34,280
subsequent<font color="#E5E5E5"> updates made by client a and</font>

30
00:01:29,640 --> 00:01:36,869
C will not be seen by client be also

31
00:01:34,280 --> 00:01:39,780
client piece subsequent updates will not

32
00:01:36,869 --> 00:01:42,960
be seen by client ANC either so now the

33
00:01:39,780 --> 00:01:48,780
view of history of operations is forked

34
00:01:42,960 --> 00:01:50,820
into to<font color="#E5E5E5"> s4 sustains longer recovering</font>

35
00:01:48,780 --> 00:01:52,649
from the attack by merging conflicting

36
00:01:50,820 --> 00:01:55,679
changes will be<font color="#E5E5E5"> getting more and more</font>

37
00:01:52,649 --> 00:01:58,759
typical so detecting the consistency

38
00:01:55,680 --> 00:02:02,670
attack in timely manner is important and

39
00:01:58,759 --> 00:02:05,549
in<font color="#E5E5E5"> this example the updates are omitted</font>

40
00:02:02,670 --> 00:02:09,509
but the attack can be easily extended to

41
00:02:05,549 --> 00:02:11,819
reorder we play and delay and kills

42
00:02:09,508 --> 00:02:13,619
tries to<font color="#E5E5E5"> catch it this kind of</font>

43
00:02:11,819 --> 00:02:15,060
consistency attacks

44
00:02:13,620 --> 00:02:18,140
with the battery<font color="#CCCCCC"> divided</font><font color="#E5E5E5"> battery-powered</font>

45
00:02:15,060 --> 00:02:22,799
devices in our battery friendly and

46
00:02:18,140 --> 00:02:25,260
timely manner<font color="#E5E5E5"> there have</font><font color="#CCCCCC"> been several</font>

47
00:02:22,799 --> 00:02:28,349
related to the works trying to detect

48
00:02:25,260 --> 00:02:31,590
the consistency<font color="#E5E5E5"> of tab and here is a</font>

49
00:02:28,349 --> 00:02:33,540
table summarizing them the first column

50
00:02:31,590 --> 00:02:36,120
of the table means the solution<font color="#CCCCCC"> is</font>

51
00:02:33,540 --> 00:02:38,370
better efficient and the second column

52
00:02:36,120 --> 00:02:41,430
<font color="#E5E5E5">means the solution can support timely</font>

53
00:02:38,370 --> 00:02:43,920
detection in the last column<font color="#E5E5E5"> means the</font>

54
00:02:41,430 --> 00:02:46,140
solution can support various consistency

55
00:02:43,920 --> 00:02:49,790
models such as eventual causal and

56
00:02:46,140 --> 00:02:52,440
strong normally battery efficient

57
00:02:49,790 --> 00:02:55,590
solutions do not<font color="#E5E5E5"> require their clients</font>

58
00:02:52,440 --> 00:02:57,510
to exchange views periodically so

59
00:02:55,590 --> 00:03:00,049
clients can sleep most of time and

60
00:02:57,510 --> 00:03:02,340
therefore they're better efficient

61
00:03:00,049 --> 00:03:05,670
however without exchanging views

62
00:03:02,340 --> 00:03:09,530
periodically<font color="#E5E5E5"> it is hard to enforce the</font>

63
00:03:05,670 --> 00:03:12,980
timely detection on the other<font color="#E5E5E5"> hand the</font>

64
00:03:09,530 --> 00:03:15,269
solutions supporting timely detection

65
00:03:12,980 --> 00:03:17,369
require their clients to be open<font color="#E5E5E5"> and</font>

66
00:03:15,269 --> 00:03:20,609
running all the time to exchange<font color="#E5E5E5"> the</font>

67
00:03:17,370 --> 00:03:22,560
views periodically over the direct

68
00:03:20,609 --> 00:03:26,130
trusted client client communication

69
00:03:22,560 --> 00:03:28,560
channels so their clients need to be

70
00:03:26,130 --> 00:03:32,129
awake all the time<font color="#E5E5E5"> and therefore they</font>

71
00:03:28,560 --> 00:03:35,310
are<font color="#E5E5E5"> not better efficient so</font><font color="#CCCCCC"> Thunder pft</font>

72
00:03:32,129 --> 00:03:40,349
2f and cloud proof are better efficient

73
00:03:35,310 --> 00:03:42,930
but cannot support timely detection on

74
00:03:40,349 --> 00:03:44,879
the other<font color="#E5E5E5"> end</font><font color="#CCCCCC"> Depot spork Venus can</font>

75
00:03:42,930 --> 00:03:47,299
support timely detection but they're not

76
00:03:44,879 --> 00:03:50,010
better efficient and none of<font color="#E5E5E5"> this</font>

77
00:03:47,299 --> 00:03:52,139
actually<font color="#E5E5E5"> provide actually support</font>

78
00:03:50,010 --> 00:03:55,440
various consistency models<font color="#E5E5E5"> either strong</font>

79
00:03:52,139 --> 00:03:57,419
or just causal however different

80
00:03:55,440 --> 00:04:00,269
<font color="#E5E5E5">consistency models are useful in</font>

81
00:03:57,419 --> 00:04:02,639
different context for example we

82
00:04:00,269 --> 00:04:05,699
consistency model is better for

83
00:04:02,639 --> 00:04:07,919
scalability lower latency and<font color="#CCCCCC"> favoring</font>

84
00:04:05,699 --> 00:04:10,109
<font color="#CCCCCC">an availability</font><font color="#E5E5E5"> in failure failure</font>

85
00:04:07,919 --> 00:04:13,160
scenarios at the sacrifice<font color="#CCCCCC"> of</font>

86
00:04:10,109 --> 00:04:15,780
consistency which can be useful

87
00:04:13,160 --> 00:04:19,738
properties in certain contexts<font color="#E5E5E5"> such as</font>

88
00:04:15,780 --> 00:04:21,389
<font color="#CCCCCC">shopping cart example and therefore it</font>

89
00:04:19,738 --> 00:04:26,530
is important to support various

90
00:04:21,389 --> 00:04:30,310
consistency models so callous tries to

91
00:04:26,530 --> 00:04:33,700
achieve all these three properties so

92
00:04:30,310 --> 00:04:35,889
callous does not require direct<font color="#E5E5E5"> trusty</font>

93
00:04:33,700 --> 00:04:38,380
client client communication it is

94
00:04:35,889 --> 00:04:41,050
battery friendly it can support timely

95
00:04:38,380 --> 00:04:44,650
detection at last it can<font color="#E5E5E5"> also support</font>

96
00:04:41,050 --> 00:04:47,110
various consistency models so here is

97
00:04:44,650 --> 00:04:49,060
<font color="#E5E5E5">the system overview so we have a bunch</font>

98
00:04:47,110 --> 00:04:52,300
of battery-powered devices as a<font color="#CCCCCC"> client</font>

99
00:04:49,060 --> 00:04:55,060
<font color="#CCCCCC">which we trust and we on trust the cloud</font>

100
00:04:52,300 --> 00:04:58,600
we have a special client called a tester

101
00:04:55,060 --> 00:05:01,000
which fetches client operations from the

102
00:04:58,600 --> 00:05:03,820
cloud and size<font color="#CCCCCC"> it to generate the</font>

103
00:05:01,000 --> 00:05:06,640
attestation then a tester posts the test

104
00:05:03,820 --> 00:05:09,219
ation on the cloud so that other clients

105
00:05:06,640 --> 00:05:11,620
can download it<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the cloud with</font><font color="#E5E5E5"> the</font>

106
00:05:09,220 --> 00:05:14,740
<font color="#E5E5E5">test</font><font color="#CCCCCC"> asian client can perform</font>

107
00:05:11,620 --> 00:05:16,900
consistency verification procedure by

108
00:05:14,740 --> 00:05:22,210
comparing their own local view with<font color="#CCCCCC"> the</font>

109
00:05:16,900 --> 00:05:24,280
test<font color="#CCCCCC"> ation as we discussed malicious</font>

110
00:05:22,210 --> 00:05:26,229
cloud may mount consistency attack and

111
00:05:24,280 --> 00:05:29,500
provide different views to the different

112
00:05:26,229 --> 00:05:31,479
<font color="#E5E5E5">clients providing a single view will</font>

113
00:05:29,500 --> 00:05:35,830
allow us to detect consistency attack

114
00:05:31,479 --> 00:05:38,050
and solve the issue so a tester fetches

115
00:05:35,830 --> 00:05:40,030
operation history attaches sequence

116
00:05:38,050 --> 00:05:41,950
number and<font color="#CCCCCC"> time stamp and sign them to</font>

117
00:05:40,030 --> 00:05:43,929
generate the test asian now this

118
00:05:41,950 --> 00:05:46,030
attestation will serve as a single view

119
00:05:43,930 --> 00:05:49,180
<font color="#CCCCCC">there will</font><font color="#E5E5E5"> be distributed</font><font color="#CCCCCC"> to the client</font>

120
00:05:46,030 --> 00:05:53,080
through the cloud so that it allows us

121
00:05:49,180 --> 00:05:55,330
<font color="#E5E5E5">to detect the consistency attack with</font>

122
00:05:53,080 --> 00:05:58,120
<font color="#CCCCCC">the sequence number a malicious cloud</font>

123
00:05:55,330 --> 00:06:00,940
cannot omit reorder or replay the test

124
00:05:58,120 --> 00:06:03,700
asian and the<font color="#E5E5E5"> timestamp allow clients to</font>

125
00:06:00,940 --> 00:06:06,580
check whether the attestation is delayed

126
00:06:03,700 --> 00:06:10,180
<font color="#E5E5E5">or the new one and the signature prevent</font>

127
00:06:06,580 --> 00:06:12,849
from the tempering attack and same

128
00:06:10,180 --> 00:06:16,210
technique is used to<font color="#E5E5E5"> protect each of the</font>

129
00:06:12,850 --> 00:06:18,220
client operation as well now since we

130
00:06:16,210 --> 00:06:20,169
assume there is no direct trusted client

131
00:06:18,220 --> 00:06:22,890
to client communication channel every

132
00:06:20,169 --> 00:06:25,990
message is going<font color="#E5E5E5"> through the cloud and</font>

133
00:06:22,890 --> 00:06:27,880
which means a malicious cloud may block

134
00:06:25,990 --> 00:06:30,850
the communication by dropping every

135
00:06:27,880 --> 00:06:33,460
messages so in this example client piano

136
00:06:30,850 --> 00:06:36,460
tester cannot communicate through the

137
00:06:33,460 --> 00:06:38,200
cloud therefore client p will have no

138
00:06:36,460 --> 00:06:40,180
idea whether there was a new

139
00:06:38,200 --> 00:06:42,520
attestations to receive or not

140
00:06:40,180 --> 00:06:45,009
so we devised the<font color="#CCCCCC"> scheduled or test</font>

141
00:06:42,520 --> 00:06:47,409
<font color="#CCCCCC">station where every client expect to see</font>

142
00:06:45,009 --> 00:06:50,680
the test ation at the skit scheduled to

143
00:06:47,410 --> 00:06:52,780
period so in this example if client be

144
00:06:50,680 --> 00:06:55,210
does not see the attestation at the

145
00:06:52,780 --> 00:06:59,650
expected time it will notice it and

146
00:06:55,210 --> 00:07:01,630
raise the flag with the<font color="#E5E5E5"> schedule</font><font color="#CCCCCC"> dr.</font>

147
00:06:59,650 --> 00:07:05,020
station we can enforce the timely

148
00:07:01,630 --> 00:07:08,169
detection so but we have<font color="#CCCCCC"> to consider two</font>

149
00:07:05,020 --> 00:07:11,469
timing factors first when client sends

150
00:07:08,169 --> 00:07:13,299
their operation to the cloud it will

151
00:07:11,470 --> 00:07:15,820
take<font color="#CCCCCC"> some time for the operations to be</font>

152
00:07:13,300 --> 00:07:18,340
<font color="#E5E5E5">fully replicated across the distributed</font>

153
00:07:15,820 --> 00:07:19,960
nodes in the cloud system so that every

154
00:07:18,340 --> 00:07:22,388
other client can see those operations

155
00:07:19,960 --> 00:07:26,250
and we account this time effector as the

156
00:07:22,389 --> 00:07:28,419
visibility time or TS and a tester

157
00:07:26,250 --> 00:07:31,810
generate the<font color="#E5E5E5"> schedule</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> test station</font>

158
00:07:28,419 --> 00:07:35,530
periodically at every attestations or ta

159
00:07:31,810 --> 00:07:38,410
a tester sends these<font color="#E5E5E5"> assess attestation</font>

160
00:07:35,530 --> 00:07:40,719
to<font color="#E5E5E5"> the client through the cloud so there</font>

161
00:07:38,410 --> 00:07:44,260
<font color="#E5E5E5">is some network and processing the labor</font>

162
00:07:40,720 --> 00:07:48,400
involved but we'll just<font color="#E5E5E5"> focus on TSN ta</font>

163
00:07:44,260 --> 00:07:51,550
for this talk in short kills enforce<font color="#E5E5E5"> the</font>

164
00:07:48,400 --> 00:07:55,539
<font color="#E5E5E5">time bound TS plus ta</font><font color="#CCCCCC"> are for operation</font>

165
00:07:51,550 --> 00:07:57,580
to<font color="#CCCCCC"> be verified now let's look at the</font>

166
00:07:55,539 --> 00:07:59,639
consistency verification procedures

167
00:07:57,580 --> 00:08:02,289
through the strong consistency example

168
00:07:59,639 --> 00:08:04,930
suppose there are is a couple of clients

169
00:08:02,289 --> 00:08:07,300
making operations colored in blue and

170
00:08:04,930 --> 00:08:09,460
red as they're described in the ground

171
00:08:07,300 --> 00:08:12,669
truth box as there appeared in<font color="#CCCCCC"> real time</font>

172
00:08:09,460 --> 00:08:15,219
a tester comes along fetches the

173
00:08:12,669 --> 00:08:18,490
operation history and generate the

174
00:08:15,220 --> 00:08:20,500
attestation as we<font color="#E5E5E5"> discussed earlier now</font>

175
00:08:18,490 --> 00:08:22,960
since knowledge malicious cloud may have

176
00:08:20,500 --> 00:08:24,759
temporarily with the test asian the

177
00:08:22,960 --> 00:08:26,650
first thing client has to do when it

178
00:08:24,759 --> 00:08:28,930
receives the test ation from the cloud

179
00:08:26,650 --> 00:08:32,348
is validating the signature of the

180
00:08:28,930 --> 00:08:34,328
attestation also it has to check

181
00:08:32,349 --> 00:08:38,589
sequence number and time stamp as we

182
00:08:34,328 --> 00:08:43,569
<font color="#E5E5E5">discussed the next next step is presence</font>

183
00:08:38,589 --> 00:08:46,089
<font color="#E5E5E5">check so every client is responsible to</font>

184
00:08:43,570 --> 00:08:50,529
remember<font color="#E5E5E5"> its own operations and verify</font>

185
00:08:46,089 --> 00:08:53,939
them and note that<font color="#E5E5E5"> malicious cloud may</font>

186
00:08:50,529 --> 00:08:56,920
have a reorder replay

187
00:08:53,939 --> 00:08:59,649
omitted or tempered some of the client

188
00:08:56,920 --> 00:09:02,889
operations before it gives the operation

189
00:08:59,649 --> 00:09:06,369
history to<font color="#E5E5E5"> that tester so the client</font>

190
00:09:02,889 --> 00:09:09,100
first has to validate signature on each

191
00:09:06,369 --> 00:09:11,589
operation so in this example client

192
00:09:09,100 --> 00:09:14,619
beacon detect there was tampering attack

193
00:09:11,589 --> 00:09:19,179
by trying<font color="#CCCCCC"> to validate the second</font>

194
00:09:14,619 --> 00:09:21,269
operations signature now client also<font color="#E5E5E5"> had</font>

195
00:09:19,179 --> 00:09:24,249
asked<font color="#E5E5E5"> to check sequence number and</font>

196
00:09:21,269 --> 00:09:26,470
client a in this example can figure out

197
00:09:24,249 --> 00:09:29,079
there was some omission attack by

198
00:09:26,470 --> 00:09:35,259
figuring out there was<font color="#E5E5E5"> sequence number</font>

199
00:09:29,079 --> 00:09:37,358
two missing the<font color="#E5E5E5"> last step is consistency</font>

200
00:09:35,259 --> 00:09:39,730
model specific track and here's the

201
00:09:37,359 --> 00:09:44,499
example where get reads the stable value

202
00:09:39,730 --> 00:09:45,999
and in strong consistency every get

203
00:09:44,499 --> 00:09:48,179
should read the value from the

204
00:09:45,999 --> 00:09:52,720
immediately preceding put in the history

205
00:09:48,179 --> 00:09:55,419
so client ace second operation and

206
00:09:52,720 --> 00:09:57,730
client base first operations can be

207
00:09:55,419 --> 00:10:00,399
verified because they<font color="#CCCCCC"> actually read the</font>

208
00:09:57,730 --> 00:10:03,279
value from the immediately preceding put

209
00:10:00,399 --> 00:10:06,399
in the history however when<font color="#CCCCCC"> Klein a</font>

210
00:10:03,279 --> 00:10:09,699
tries to verify<font color="#CCCCCC"> the third operation it</font>

211
00:10:06,399 --> 00:10:12,939
noticed that there was more recent put

212
00:10:09,699 --> 00:10:15,488
in the history so a client<font color="#E5E5E5"> a can detect</font>

213
00:10:12,939 --> 00:10:20,199
that its third<font color="#E5E5E5"> operation has read the</font>

214
00:10:15,489 --> 00:10:23,019
stale value now the kills not only

215
00:10:20,199 --> 00:10:25,959
support the<font color="#E5E5E5"> strong consistency but also</font>

216
00:10:23,019 --> 00:10:27,999
support the weaker consistency models

217
00:10:25,959 --> 00:10:32,109
such as eventual and causal with the

218
00:10:27,999 --> 00:10:34,239
certain time bound and eventual

219
00:10:32,110 --> 00:10:36,819
consistency model requires additional

220
00:10:34,239 --> 00:10:39,459
checks due to visibility time it is

221
00:10:36,819 --> 00:10:41,378
greater<font color="#E5E5E5"> that is greater than</font><font color="#CCCCCC"> zero which</font>

222
00:10:39,459 --> 00:10:43,899
allow clients to read the value from

223
00:10:41,379 --> 00:10:46,059
a-put older than the immediately

224
00:10:43,899 --> 00:10:48,279
preceding<font color="#CCCCCC"> put in the history which means</font>

225
00:10:46,059 --> 00:10:51,789
there can be more than one put that get

226
00:10:48,279 --> 00:10:54,160
possibly<font color="#CCCCCC"> read a</font><font color="#E5E5E5"> value from so so that</font>

227
00:10:51,789 --> 00:10:56,619
makes chat a bit<font color="#E5E5E5"> more complicated than</font>

228
00:10:54,160 --> 00:10:59,319
the strong consistency model and it is

229
00:10:56,619 --> 00:11:01,629
similar<font color="#CCCCCC"> for causal consistency but it</font>

230
00:10:59,319 --> 00:11:03,759
additionally<font color="#CCCCCC"> require vector clocks to</font>

231
00:11:01,629 --> 00:11:06,309
keep track of the color ordering between

232
00:11:03,759 --> 00:11:09,240
operations further details are

233
00:11:06,309 --> 00:11:12,339
discussing the paper

234
00:11:09,240 --> 00:11:14,200
so to provide the timely detection a

235
00:11:12,340 --> 00:11:17,740
tester should generate the schedule

236
00:11:14,200 --> 00:11:21,880
<font color="#CCCCCC">detestation in short period but this</font>

237
00:11:17,740 --> 00:11:25,210
<font color="#E5E5E5">will keep</font><font color="#CCCCCC"> the tester awake and therefore</font>

238
00:11:21,880 --> 00:11:28,300
will deplete the battery on<font color="#E5E5E5"> the tester</font>

239
00:11:25,210 --> 00:11:30,490
device quite quickly to solve this issue

240
00:11:28,300 --> 00:11:35,020
we<font color="#CCCCCC"> devise the tester partitioning scheme</font>

241
00:11:30,490 --> 00:11:38,170
where we<font color="#E5E5E5"> split a tester into to route a</font>

242
00:11:35,020 --> 00:11:40,270
tester and the active odd tester so rude

243
00:11:38,170 --> 00:11:44,069
a tester selects an active<font color="#CCCCCC"> odd tester</font>

244
00:11:40,270 --> 00:11:46,810
device at every are a period and

245
00:11:44,070 --> 00:11:49,360
activate tester generates the schedule

246
00:11:46,810 --> 00:11:54,099
actual scheduled attestation at much

247
00:11:49,360 --> 00:11:56,800
shorter attestation period<font color="#E5E5E5"> I note that</font>

248
00:11:54,100 --> 00:11:58,900
<font color="#CCCCCC">our a period is much longer and our aim</font>

249
00:11:56,800 --> 00:12:02,890
is to<font color="#CCCCCC"> wake up only when</font><font color="#E5E5E5"> it has to</font><font color="#CCCCCC"> select</font>

250
00:11:58,900 --> 00:12:04,930
active active active tester device most

251
00:12:02,890 --> 00:12:06,760
of the other time it can sleep so we can

252
00:12:04,930 --> 00:12:10,180
save a<font color="#E5E5E5"> lot of battery consumption on the</font>

253
00:12:06,760 --> 00:12:12,880
re device and when we sell an 8th activo

254
00:12:10,180 --> 00:12:14,819
tester device we select<font color="#CCCCCC"> the device</font>

255
00:12:12,880 --> 00:12:18,150
<font color="#CCCCCC">that's already awake for other purposes</font>

256
00:12:14,820 --> 00:12:20,770
like being actively used by the users or

257
00:12:18,150 --> 00:12:24,850
running some background<font color="#CCCCCC"> tasks like</font>

258
00:12:20,770 --> 00:12:26,770
software update so we can minimize<font color="#E5E5E5"> the</font>

259
00:12:24,850 --> 00:12:29,650
additional battery increase on the AAA

260
00:12:26,770 --> 00:12:33,520
device due to short periodic scheduled

261
00:12:29,650 --> 00:12:37,569
attestation after<font color="#E5E5E5"> our a period is over</font>

262
00:12:33,520 --> 00:12:45,939
AAA stops and<font color="#CCCCCC"> ra either renews the new</font>

263
00:12:37,570 --> 00:12:48,910
old AAA or select a new AAA device but

264
00:12:45,940 --> 00:12:51,490
it is important to note that hey stops

265
00:12:48,910 --> 00:12:54,370
after<font color="#E5E5E5"> our a period is over and</font><font color="#CCCCCC"> our a</font>

266
00:12:51,490 --> 00:12:56,760
only selects only one active a tester

267
00:12:54,370 --> 00:12:59,500
for a given<font color="#E5E5E5"> are a period otherwise</font>

268
00:12:56,760 --> 00:13:01,920
malicious cloud may trick the clients to

269
00:12:59,500 --> 00:13:05,970
have more than one active a tester

270
00:13:01,920 --> 00:13:09,520
therefore it can effectively<font color="#CCCCCC"> forth abuse</font>

271
00:13:05,970 --> 00:13:13,750
we also do some measurements study with

272
00:13:09,520 --> 00:13:16,120
<font color="#CCCCCC">Amazon s3 trying to see whether cows can</font>

273
00:13:13,750 --> 00:13:19,510
effectively catches consistency

274
00:13:16,120 --> 00:13:21,120
violation but we<font color="#E5E5E5"> don't mean that imagine</font>

275
00:13:19,510 --> 00:13:24,330
is trying to trick their

276
00:13:21,120 --> 00:13:26,850
<font color="#E5E5E5">is as three actually provide eventual</font>

277
00:13:24,330 --> 00:13:30,779
consistency models without publishing

278
00:13:26,850 --> 00:13:33,900
any visibility time but using a shorter

279
00:13:30,779 --> 00:13:35,730
bwat time then Ezra can support actually

280
00:13:33,900 --> 00:13:40,589
actually<font color="#E5E5E5"> allow us to effectively</font>

281
00:13:35,730 --> 00:13:43,110
simulate malicious cloud provider we try

282
00:13:40,589 --> 00:13:47,130
to<font color="#E5E5E5"> write non-repeating value to the same</font>

283
00:13:43,110 --> 00:13:50,400
key from the<font color="#CCCCCC"> East Coast server with</font>

284
00:13:47,130 --> 00:13:53,010
<font color="#E5E5E5">timestamp embedded in the value and try</font>

285
00:13:50,400 --> 00:13:57,029
to read from the<font color="#CCCCCC"> west coast server and</font>

286
00:13:53,010 --> 00:13:59,310
try to get the<font color="#E5E5E5"> timestamp then based on</font>

287
00:13:57,029 --> 00:14:01,920
these times then we can calculate how

288
00:13:59,310 --> 00:14:06,150
long it takes for the operation to<font color="#CCCCCC"> be</font>

289
00:14:01,920 --> 00:14:10,010
replicated from east<font color="#E5E5E5"> to the west so with</font>

290
00:14:06,150 --> 00:14:13,650
this<font color="#CCCCCC"> we</font><font color="#E5E5E5"> we can get ground truth whether</font>

291
00:14:10,010 --> 00:14:18,569
operation has violated visibility time

292
00:14:13,650 --> 00:14:21,510
or even<font color="#E5E5E5"> the time bound we enforce so we</font>

293
00:14:18,570 --> 00:14:25,830
<font color="#E5E5E5">fixed attestation period and varied the</font>

294
00:14:21,510 --> 00:14:27,569
visibility time by decreasing it so

295
00:14:25,830 --> 00:14:30,390
let's<font color="#E5E5E5"> look at what's happening in the</font>

296
00:14:27,570 --> 00:14:32,730
timeline suppose we made the put

297
00:14:30,390 --> 00:14:36,029
operation writing value 15 to<font color="#E5E5E5"> the key X</font>

298
00:14:32,730 --> 00:14:38,910
it will<font color="#CCCCCC"> take at maximum TS time for the</font>

299
00:14:36,029 --> 00:14:41,790
operations to<font color="#E5E5E5"> be fully replicated and it</font>

300
00:14:38,910 --> 00:14:43,680
will take a maximum TS plus<font color="#CCCCCC"> da time for</font>

301
00:14:41,790 --> 00:14:46,290
the operations to<font color="#CCCCCC"> be fully replicate it</font>

302
00:14:43,680 --> 00:14:50,189
up<font color="#E5E5E5"> test it so that clients can verify</font>

303
00:14:46,290 --> 00:14:55,650
verify it if the operation takes longer

304
00:14:50,190 --> 00:14:58,350
than TS then we label it and group it as

305
00:14:55,650 --> 00:15:01,680
a GT service group which where GT means

306
00:14:58,350 --> 00:15:05,339
ground truth and if it<font color="#E5E5E5"> takes even</font><font color="#CCCCCC"> longer</font>

307
00:15:01,680 --> 00:15:08,160
than TS<font color="#E5E5E5"> plus ta which is a time-bound we</font>

308
00:15:05,339 --> 00:15:11,070
label it<font color="#E5E5E5"> and grab it as a GT</font><font color="#CCCCCC"> Kahless</font>

309
00:15:08,160 --> 00:15:14,579
group and every operation the long to GT

310
00:15:11,070 --> 00:15:16,920
<font color="#E5E5E5">chaos is also belong to GT service and</font>

311
00:15:14,580 --> 00:15:19,770
what else tries to catch is every

312
00:15:16,920 --> 00:15:22,170
operations belong to GT kills that<font color="#E5E5E5"> is</font>

313
00:15:19,770 --> 00:15:26,520
violating the time bound and some of the

314
00:15:22,170 --> 00:15:28,979
GT service that but those operations

315
00:15:26,520 --> 00:15:31,140
that in the those operations in the GT

316
00:15:28,980 --> 00:15:34,499
service but not in the GT kills with

317
00:15:31,140 --> 00:15:39,359
some probability because

318
00:15:34,499 --> 00:15:43,469
the the attestation timing is time

319
00:15:39,359 --> 00:15:45,239
effects the<font color="#E5E5E5"> the catch so those</font>

320
00:15:43,469 --> 00:15:47,639
operations caught by the<font color="#CCCCCC"> kalos</font><font color="#E5E5E5"> are</font>

321
00:15:45,239 --> 00:15:50,969
labeled and<font color="#E5E5E5"> grouped it grouped in the</font>

322
00:15:47,639 --> 00:15:53,849
violations group now let's look<font color="#E5E5E5"> at the</font>

323
00:15:50,969 --> 00:15:55,439
resulting<font color="#E5E5E5"> table graph and the column of</font>

324
00:15:53,849 --> 00:15:57,989
the graph shows the percentage of<font color="#E5E5E5"> the</font>

325
00:15:55,439 --> 00:16:00,169
guests belong to each group and the role

326
00:15:57,989 --> 00:16:03,179
of the graph shows the variations in the

327
00:16:00,169 --> 00:16:05,129
visibility time and as you can see the

328
00:16:03,179 --> 00:16:07,189
blue line representing the violations

329
00:16:05,129 --> 00:16:09,839
group is always above the red line

330
00:16:07,189 --> 00:16:12,539
representing the GT cable scope which

331
00:16:09,839 --> 00:16:15,419
means kalos have caught every operation

332
00:16:12,539 --> 00:16:19,468
of violating the time bound TS plus da

333
00:16:15,419 --> 00:16:23,309
and<font color="#CCCCCC"> you can notice there is some gap</font>

334
00:16:19,469 --> 00:16:24,929
between those two lines which means what

335
00:16:23,309 --> 00:16:27,779
<font color="#CCCCCC">chaos could have caught some of</font><font color="#E5E5E5"> the</font>

336
00:16:24,929 --> 00:16:30,899
<font color="#E5E5E5">operations belong to GT service only but</font>

337
00:16:27,779 --> 00:16:32,489
not in the GT<font color="#CCCCCC"> kilos and we could have</font><font color="#E5E5E5"> we</font>

338
00:16:30,899 --> 00:16:36,889
could have tried<font color="#CCCCCC"> to catch every</font>

339
00:16:32,489 --> 00:16:36,889
operations violating the visibility time

340
00:16:36,949 --> 00:16:44,789
by trying to get ta infinitely close to

341
00:16:41,369 --> 00:16:48,509
the zero but this<font color="#E5E5E5"> is a infeasible in</font>

342
00:16:44,789 --> 00:16:50,309
real world because<font color="#E5E5E5"> that means a tester</font>

343
00:16:48,509 --> 00:16:55,739
should generate the schedule dr. station

344
00:16:50,309 --> 00:16:58,939
at the<font color="#CCCCCC"> infinitely fast pace we also did</font>

345
00:16:55,739 --> 00:17:02,369
some battery consumption measurement

346
00:16:58,939 --> 00:17:04,049
study and when we measure the idle

347
00:17:02,369 --> 00:17:06,990
phone's battery consumption the phone

348
00:17:04,049 --> 00:17:09,929
was sleeping most of<font color="#E5E5E5"> the time and and</font>

349
00:17:06,990 --> 00:17:11,849
then we also measure<font color="#CCCCCC"> the battery</font>

350
00:17:09,929 --> 00:17:14,209
consumption with the singular tester

351
00:17:11,849 --> 00:17:16,740
running on the phone where phone

352
00:17:14,209 --> 00:17:19,919
generates the schedule<font color="#E5E5E5"> data station in</font>

353
00:17:16,740 --> 00:17:24,079
short period here we<font color="#CCCCCC"> disabled the tester</font>

354
00:17:19,919 --> 00:17:27,959
tester partitioning scheme so phone was

355
00:17:24,079 --> 00:17:30,389
not sleep<font color="#CCCCCC"> a formalist neighbors in sleep</font>

356
00:17:27,959 --> 00:17:34,379
and therefore battery consumption was

357
00:17:30,389 --> 00:17:36,299
increased significantly with the tester

358
00:17:34,379 --> 00:17:39,090
partitioning scheme enabled we place the

359
00:17:36,299 --> 00:17:40,830
<font color="#E5E5E5">routed tester on the phone and therefore</font>

360
00:17:39,090 --> 00:17:43,110
phone could<font color="#CCCCCC"> sleep most of the time and</font>

361
00:17:40,830 --> 00:17:45,629
the additional battery increase was

362
00:17:43,110 --> 00:17:47,820
minimized so in short<font color="#CCCCCC"> ester partitioning</font>

363
00:17:45,629 --> 00:17:48,120
can save about 40 times of additional

364
00:17:47,820 --> 00:17:50,970
better

365
00:17:48,120 --> 00:17:53,189
increase compared to singular tester in

366
00:17:50,970 --> 00:17:55,260
conclusion kelsey is able to avoid

367
00:17:53,190 --> 00:17:57,930
direct client client communication and

368
00:17:55,260 --> 00:18:00,600
use on trusted cloud to deliver messages

369
00:17:57,930 --> 00:18:02,390
securely the role of<font color="#E5E5E5"> the tester can be</font>

370
00:18:00,600 --> 00:18:05,790
partitioned to achieve better efficiency

371
00:18:02,390 --> 00:18:08,520
in a secure and timely<font color="#CCCCCC"> manner and kels</font>

372
00:18:05,790 --> 00:18:12,270
can support various consistency models

373
00:18:08,520 --> 00:18:14,790
and<font color="#E5E5E5"> last evaluation shows that chaos is</font>

374
00:18:12,270 --> 00:18:18,030
effective very<font color="#E5E5E5"> friendly and efficient in</font>

375
00:18:14,790 --> 00:18:21,300
terms of<font color="#CCCCCC"> CPU and network</font><font color="#E5E5E5"> costs thank you</font>

376
00:18:18,030 --> 00:18:31,100
very<font color="#E5E5E5"> much</font><font color="#CCCCCC"> and I'll happy to take any</font>

377
00:18:21,300 --> 00:18:31,100
question<font color="#CCCCCC"> okay questions</font>

378
00:18:39,950 --> 00:18:44,630
<font color="#CCCCCC">cami vanier Indiana University so you</font>

379
00:18:42,740 --> 00:18:47,389
mentioned that you're<font color="#E5E5E5"> trying to select</font>

380
00:18:44,630 --> 00:18:49,610
devices that are already<font color="#E5E5E5"> on for doing on</font>

381
00:18:47,389 --> 00:18:51,229
tests at attestation so that way that

382
00:18:49,610 --> 00:18:54,379
you're doubling up on one that the user

383
00:18:51,230 --> 00:18:56,659
is<font color="#E5E5E5"> using them users typically only use</font>

384
00:18:54,380 --> 00:18:58,250
devices for about 45 seconds on average

385
00:18:56,659 --> 00:19:01,190
though they use them frequently during

386
00:18:58,250 --> 00:19:03,260
the day how are<font color="#E5E5E5"> you figuring out when</font>

387
00:19:01,190 --> 00:19:05,059
which of the devices in your set are

388
00:19:03,260 --> 00:19:06,789
going to be on it at what point in time

389
00:19:05,059 --> 00:19:09,289
because they don't stay<font color="#CCCCCC"> on for very long</font>

390
00:19:06,789 --> 00:19:12,350
right i<font color="#CCCCCC"> think that actually requires</font>

391
00:19:09,289 --> 00:19:18,019
more rigorous<font color="#CCCCCC"> Caesar study than we did</font>

392
00:19:12,350 --> 00:19:20,870
and what we just<font color="#E5E5E5"> think as a solution to</font>

393
00:19:18,019 --> 00:19:24,950
that it was like doing some profiling

394
00:19:20,870 --> 00:19:27,649
and see the users pattern of the usually

395
00:19:24,950 --> 00:19:30,440
device usage right so that we can pick

396
00:19:27,649 --> 00:19:35,120
we can<font color="#E5E5E5"> kind of prioritize which device</font>

397
00:19:30,440 --> 00:19:37,399
will<font color="#CCCCCC"> be likely up for the next I don't</font>

398
00:19:35,120 --> 00:19:41,979
know a few minutes<font color="#E5E5E5"> or so so that we can</font>

399
00:19:37,399 --> 00:19:45,879
pick that device first yes thank you

400
00:19:41,980 --> 00:19:45,880
<font color="#CCCCCC">okay let's thank the speaker again</font>

