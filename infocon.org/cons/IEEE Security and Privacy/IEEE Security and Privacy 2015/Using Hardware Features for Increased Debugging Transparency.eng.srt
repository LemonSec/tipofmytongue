1
00:00:00,140 --> 00:00:05,270
and hello<font color="#CCCCCC"> everyone thanks for showing up</font>

2
00:00:03,140 --> 00:00:07,459
my name is a fun way John I'm from

3
00:00:05,270 --> 00:00:09,469
George Mason University today I'm going

4
00:00:07,459 --> 00:00:12,760
<font color="#CCCCCC">to talk about using hardware features</font>

5
00:00:09,470 --> 00:00:15,560
for increased debugging transparency

6
00:00:12,760 --> 00:00:17,480
this is overview of the talk first<font color="#E5E5E5"> I</font>

7
00:00:15,560 --> 00:00:18,980
will start with the motivation of this

8
00:00:17,480 --> 00:00:21,349
paper and<font color="#CCCCCC"> they have talked</font><font color="#E5E5E5"> about</font>

9
00:00:18,980 --> 00:00:22,970
<font color="#CCCCCC">background like a system and remote then</font>

10
00:00:21,349 --> 00:00:24,310
<font color="#E5E5E5">I will talk about a system architecture</font>

11
00:00:22,970 --> 00:00:26,810
followed by the evaluation results

12
00:00:24,310 --> 00:00:31,609
lastly ever conclude my talk with the

13
00:00:26,810 --> 00:00:33,109
future directions motivation so the

14
00:00:31,609 --> 00:00:34,820
<font color="#E5E5E5">lambo member attacks against the</font>

15
00:00:33,109 --> 00:00:38,809
computer assistance has been critical

16
00:00:34,820 --> 00:00:42,410
matically this are some<font color="#CCCCCC"> merwell text</font>

17
00:00:38,809 --> 00:00:44,870
statistics semantic blockage<font color="#E5E5E5"> of the 247</font>

18
00:00:42,410 --> 00:00:46,819
attacks per day<font color="#E5E5E5"> McAfee reported</font>

19
00:00:44,870 --> 00:00:49,640
<font color="#CCCCCC">eight-minute numero samples in the</font><font color="#E5E5E5"> first</font>

20
00:00:46,820 --> 00:00:52,609
quarter in 2014 in last year alone

21
00:00:49,640 --> 00:00:54,769
maribel threats has grown 34% with over

22
00:00:52,609 --> 00:00:57,379
200,000 new threads per day this is

23
00:00:54,769 --> 00:00:59,570
reported by<font color="#CCCCCC"> the Kaspersky Lab nowadays</font>

24
00:00:57,379 --> 00:01:01,218
computer systems rely on our large

25
00:00:59,570 --> 00:01:03,739
amount of application to operate and

26
00:01:01,219 --> 00:01:05,600
these applications<font color="#E5E5E5"> inevitably Korean</font>

27
00:01:03,739 --> 00:01:08,420
abilities are could be easily exploited

28
00:01:05,600 --> 00:01:10,820
by attackers thus there is a need for us

29
00:01:08,420 --> 00:01:14,240
to analyze the behavior of the male and

30
00:01:10,820 --> 00:01:16,669
the defend against of<font color="#CCCCCC"> them so</font>

31
00:01:14,240 --> 00:01:18,919
<font color="#CCCCCC">traditionally we use a</font><font color="#E5E5E5"> virtualization</font>

32
00:01:16,670 --> 00:01:22,189
elimination technologies for malware

33
00:01:18,920 --> 00:01:24,409
analysis and basically we use

34
00:01:22,189 --> 00:01:27,110
virtualization technology to create an

35
00:01:24,409 --> 00:01:29,180
isolated as<font color="#E5E5E5"> Christian why Matt and run</font>

36
00:01:27,110 --> 00:01:32,119
the mail well inside of the virtual

37
00:01:29,180 --> 00:01:35,509
<font color="#CCCCCC">machine and then run the analysis tool</font>

38
00:01:32,119 --> 00:01:37,909
outside<font color="#E5E5E5"> of the virtual machine in this</font>

39
00:01:35,509 --> 00:01:40,040
case analysis 20 be isolated from the

40
00:01:37,909 --> 00:01:43,579
<font color="#CCCCCC">Manuel and then we can study the</font>

41
00:01:40,040 --> 00:01:45,070
behavior of the<font color="#E5E5E5"> mail well however there</font>

42
00:01:43,579 --> 00:01:48,008
are some limitations for this

43
00:01:45,070 --> 00:01:50,419
traditional approaches first

44
00:01:48,009 --> 00:01:52,460
visualization based approach route amber

45
00:01:50,420 --> 00:01:54,590
hypervisor that has a large atrocity

46
00:01:52,460 --> 00:01:56,899
computing base for example the

47
00:01:54,590 --> 00:02:00,140
hypervisor has about 500 thousand lambs

48
00:01:56,899 --> 00:02:02,689
source code and national one in ddb

49
00:02:00,140 --> 00:02:06,009
database show<font color="#E5E5E5"> Saturday about 245 warm</font>

50
00:02:02,689 --> 00:02:08,419
abilities for xen hypervisor second

51
00:02:06,009 --> 00:02:11,030
traditional approach is incapable of

52
00:02:08,419 --> 00:02:13,910
analyzing<font color="#CCCCCC"> locates with</font><font color="#E5E5E5"> the same or</font>

53
00:02:11,030 --> 00:02:16,220
higher level privilege for example this

54
00:02:13,910 --> 00:02:19,930
approach cannot analyze hypervisor layer

55
00:02:16,220 --> 00:02:21,950
of oil level rootkits most importantly

56
00:02:19,930 --> 00:02:23,960
virtualization based approach cannot

57
00:02:21,950 --> 00:02:26,510
analyze arm the malware with<font color="#E5E5E5"> aunty</font>

58
00:02:23,960 --> 00:02:29,600
visualization or anti imaging techniques

59
00:02:26,510 --> 00:02:32,060
so nowadays a<font color="#E5E5E5"> male well become more more</font>

60
00:02:29,600 --> 00:02:35,980
sophisticated so basically<font color="#E5E5E5"> if</font><font color="#CCCCCC"> they can</font>

61
00:02:32,060 --> 00:02:38,990
use NT vm<font color="#CCCCCC"> and intimidation techniques</font>

62
00:02:35,980 --> 00:02:40,910
for example you<font color="#CCCCCC"> for</font><font color="#E5E5E5"> mal finally the self</font>

63
00:02:38,990 --> 00:02:43,160
running inside of the virtual machine it

64
00:02:40,910 --> 00:02:45,470
will creat or suspend its own malicious

65
00:02:43,160 --> 00:02:48,100
behavior in this case the virtualization

66
00:02:45,470 --> 00:02:50,750
<font color="#E5E5E5">based approach will not be analyzing</font>

67
00:02:48,100 --> 00:02:52,549
last but not<font color="#CCCCCC"> least this will approach</font>

68
00:02:50,750 --> 00:02:56,570
sometimes Santa suffered from high

69
00:02:52,550 --> 00:02:58,610
performance overhead so in light of this

70
00:02:56,570 --> 00:03:00,709
problem man we present<font color="#CCCCCC"> a parameter</font>

71
00:02:58,610 --> 00:03:02,990
debugging system called amount that

72
00:03:00,710 --> 00:03:05,930
leverages system and remote formal

73
00:03:02,990 --> 00:03:07,820
analysis it basically<font color="#CCCCCC"> used</font><font color="#E5E5E5"> system manual</font>

74
00:03:05,930 --> 00:03:11,120
<font color="#E5E5E5">mode as a hardware isolated as</font><font color="#CCCCCC"> krrish</font>

75
00:03:07,820 --> 00:03:13,880
environment to run<font color="#E5E5E5"> analysis tool and it</font>

76
00:03:11,120 --> 00:03:16,970
is<font color="#E5E5E5"> capable of detecting hypervisor level</font>

77
00:03:13,880 --> 00:03:19,430
rootkits basically our approach moves

78
00:03:16,970 --> 00:03:21,950
the analysis tool from the hypervisor

79
00:03:19,430 --> 00:03:27,080
layer to the hardware which can achieve

80
00:03:21,950 --> 00:03:28,880
a higher level of transparency before

81
00:03:27,080 --> 00:03:30,470
i'm going to introduce the detail of the

82
00:03:28,880 --> 00:03:32,359
system<font color="#E5E5E5"> i would like to give</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> guys</font>

83
00:03:30,470 --> 00:03:36,620
some background knowledge like system

84
00:03:32,360 --> 00:03:38,990
and remote so what<font color="#E5E5E5"> is this</font><font color="#CCCCCC"> manual mode</font>

85
00:03:36,620 --> 00:03:41,990
as a man it's<font color="#CCCCCC"> a special CPU mode</font>

86
00:03:38,990 --> 00:03:44,510
existing in the x86 architecture and it

87
00:03:41,990 --> 00:03:47,660
can be<font color="#E5E5E5"> used the isin hardware isolated</font>

88
00:03:44,510 --> 00:03:49,220
<font color="#CCCCCC">squashing alignment originally</font><font color="#E5E5E5"> as a man</font>

89
00:03:47,660 --> 00:03:52,160
<font color="#E5E5E5">is designing for implementing system</font>

90
00:03:49,220 --> 00:03:54,380
functions like a power management so for

91
00:03:52,160 --> 00:03:56,780
<font color="#E5E5E5">example if we fold the laptop the laptop</font>

92
00:03:54,380 --> 00:03:58,880
go to sleep and the laptop<font color="#CCCCCC"> may</font><font color="#E5E5E5"> invoke</font>

93
00:03:56,780 --> 00:04:01,070
some power saving functions and this

94
00:03:58,880 --> 00:04:04,820
<font color="#E5E5E5">power semi functions could be inside of</font>

95
00:04:01,070 --> 00:04:06,380
<font color="#E5E5E5">the system and remote also system and</font>

96
00:04:04,820 --> 00:04:08,900
<font color="#E5E5E5">rumor mode has an isolated system</font>

97
00:04:06,380 --> 00:04:11,209
manager ram that is inaccessible from

98
00:04:08,900 --> 00:04:13,040
the loma<font color="#CCCCCC"> urban system when the lot more</font>

99
00:04:11,209 --> 00:04:15,560
urban system wants to access<font color="#CCCCCC"> this memory</font>

100
00:04:13,040 --> 00:04:18,380
region the hardware<font color="#E5E5E5"> will automatically</font>

101
00:04:15,560 --> 00:04:20,418
redirects access to the vga memory this

102
00:04:18,380 --> 00:04:23,750
is due to the<font color="#E5E5E5"> region memory has the same</font>

103
00:04:20,418 --> 00:04:26,630
mapping with the<font color="#E5E5E5"> system and um the only</font>

104
00:04:23,750 --> 00:04:27,810
way to enter system manual mode is to

105
00:04:26,630 --> 00:04:30,540
enter system and

106
00:04:27,810 --> 00:04:32,639
interrupt the next slides I'm<font color="#E5E5E5"> going to</font>

107
00:04:30,540 --> 00:04:36,210
talk<font color="#E5E5E5"> about the approaches how to trigger</font>

108
00:04:32,639 --> 00:04:39,210
system and we interrupt to<font color="#E5E5E5"> Exodus a male</font>

109
00:04:36,210 --> 00:04:41,669
rerun the special instruction<font color="#CCCCCC"> rsn to</font>

110
00:04:39,210 --> 00:04:44,700
resume the<font color="#CCCCCC"> low mumbling system back to</font>

111
00:04:41,669 --> 00:04:47,250
the protect mode and note that<font color="#E5E5E5"> this RSM</font>

112
00:04:44,700 --> 00:04:52,200
instruction can only be executed in the

113
00:04:47,250 --> 00:04:54,090
system<font color="#E5E5E5"> and your mode so in general</font><font color="#CCCCCC"> there</font>

114
00:04:52,200 --> 00:04:55,950
are two approaches to trigger system and

115
00:04:54,090 --> 00:04:58,770
<font color="#CCCCCC">to interrupt software-based and</font>

116
00:04:55,950 --> 00:05:00,960
<font color="#E5E5E5">hardware-based for software based</font>

117
00:04:58,770 --> 00:05:03,240
approach we can ride to your special<font color="#CCCCCC"> i</font>

118
00:05:00,960 --> 00:05:05,700
oh portas passed by the<font color="#CCCCCC"> Southbridge for</font>

119
00:05:03,240 --> 00:05:08,340
example intel chipsets that youths<font color="#E5E5E5"> Oh X</font>

120
00:05:05,700 --> 00:05:11,010
<font color="#E5E5E5">to be as a poll number for md they have</font>

121
00:05:08,340 --> 00:05:13,380
different poll number for hardware based

122
00:05:11,010 --> 00:05:15,479
approach we can<font color="#CCCCCC"> use the i/o devices to</font>

123
00:05:13,380 --> 00:05:18,240
trigger system and interrupt for example

124
00:05:15,479 --> 00:05:21,659
we can use network card keyboard mouse

125
00:05:18,240 --> 00:05:23,940
or<font color="#E5E5E5"> hardware timers and the figure below</font>

126
00:05:21,660 --> 00:05:28,380
shows you the steps how to trigger

127
00:05:23,940 --> 00:05:30,810
system<font color="#CCCCCC"> manual</font><font color="#E5E5E5"> interrupt the box on your</font>

128
00:05:28,380 --> 00:05:34,320
left represents the<font color="#CCCCCC"> lomo urban system</font>

129
00:05:30,810 --> 00:05:36,930
which is in protective mode the box on

130
00:05:34,320 --> 00:05:39,030
<font color="#E5E5E5">your right represents the isolated</font>

131
00:05:36,930 --> 00:05:42,060
<font color="#CCCCCC">screech environment which in the system</font>

132
00:05:39,030 --> 00:05:44,070
management mode when the software or

133
00:05:42,060 --> 00:05:47,280
hardware triggers a system and we

134
00:05:44,070 --> 00:05:51,000
interrupt the<font color="#CCCCCC"> CPU we</font><font color="#E5E5E5"> are automatically</font>

135
00:05:47,280 --> 00:05:54,419
switches from<font color="#CCCCCC"> the protective mode to</font>

136
00:05:51,000 --> 00:05:56,490
<font color="#CCCCCC">system and remote then the CPU we are</font>

137
00:05:54,419 --> 00:06:00,120
starting to execute a special handler

138
00:05:56,490 --> 00:06:03,630
called a semi handle and this is a my

139
00:06:00,120 --> 00:06:06,630
handler is recite in<font color="#E5E5E5"> the isolated system</font>

140
00:06:03,630 --> 00:06:09,510
angry sex manual<font color="#CCCCCC"> RAM and this settlement</font>

141
00:06:06,630 --> 00:06:12,870
will Ram is inaccessible from the<font color="#CCCCCC"> loma</font>

142
00:06:09,510 --> 00:06:14,969
<font color="#CCCCCC">or brain system and at the end</font><font color="#E5E5E5"> of the sm</font>

143
00:06:12,870 --> 00:06:17,430
and<font color="#CCCCCC"> is</font><font color="#E5E5E5"> my handler it'll be all executed</font>

144
00:06:14,970 --> 00:06:19,289
especially instruction is<font color="#CCCCCC"> m to resume</font>

145
00:06:17,430 --> 00:06:23,250
the low mobile system back to the

146
00:06:19,289 --> 00:06:25,229
protect mode this figure basically just

147
00:06:23,250 --> 00:06:27,210
shows your typical software layers and

148
00:06:25,229 --> 00:06:29,190
the frontal figure we can see that

149
00:06:27,210 --> 00:06:31,380
system management<font color="#E5E5E5"> mode is part of the</font>

150
00:06:29,190 --> 00:06:35,039
bios and it belongs to the phone<font color="#E5E5E5"> where</font>

151
00:06:31,380 --> 00:06:36,659
layer<font color="#CCCCCC"> i</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about motivation and</font>

152
00:06:35,039 --> 00:06:39,700
background so next I'm going<font color="#E5E5E5"> to</font>

153
00:06:36,659 --> 00:06:41,920
introduce<font color="#E5E5E5"> you the system architecture</font>

154
00:06:39,700 --> 00:06:43,599
as a mansioner traditional mallet

155
00:06:41,920 --> 00:06:46,990
<font color="#E5E5E5">debugging they use virtualization</font>

156
00:06:43,600 --> 00:06:49,120
elimination technologies so<font color="#E5E5E5"> basically if</font>

157
00:06:46,990 --> 00:06:50,950
a now this may well become more more

158
00:06:49,120 --> 00:06:52,780
sophisticated if you define yourself

159
00:06:50,950 --> 00:06:55,000
running inside of the virtual machine it

160
00:06:52,780 --> 00:06:57,159
will creat or suspend so malicious

161
00:06:55,000 --> 00:06:59,050
behavior so in this case traditional

162
00:06:57,160 --> 00:07:03,250
approaches we are not be able<font color="#E5E5E5"> to analyze</font>

163
00:06:59,050 --> 00:07:05,410
it<font color="#CCCCCC"> mount debug</font><font color="#E5E5E5"> samara our Parramatta</font>

164
00:07:03,250 --> 00:07:07,990
machine and you can remain transparent

165
00:07:05,410 --> 00:07:10,690
in the presence<font color="#E5E5E5"> of existing anti</font>

166
00:07:07,990 --> 00:07:13,510
debugging and TV m and and elimination

167
00:07:10,690 --> 00:07:16,540
techniques the figure below shows you

168
00:07:13,510 --> 00:07:18,430
the architecture of the mud system<font color="#E5E5E5"> the</font>

169
00:07:16,540 --> 00:07:20,500
box on your left represents the

170
00:07:18,430 --> 00:07:22,420
debugging client and the box on<font color="#E5E5E5"> your</font>

171
00:07:20,500 --> 00:07:25,480
right represents the debugging server

172
00:07:22,420 --> 00:07:28,180
and we run the debugger application on

173
00:07:25,480 --> 00:07:31,090
the debugging server and use the<font color="#E5E5E5"> a sama</font>

174
00:07:28,180 --> 00:07:33,220
handler to introspective and also be

175
00:07:31,090 --> 00:07:35,619
wrong<font color="#CCCCCC"> AG to be like the debugger on the</font>

176
00:07:33,220 --> 00:07:37,690
client side and the when the client

177
00:07:35,620 --> 00:07:40,030
wants to start at<font color="#E5E5E5"> the back in session it</font>

178
00:07:37,690 --> 00:07:42,100
will send a message<font color="#E5E5E5"> to the debugging</font>

179
00:07:40,030 --> 00:07:44,950
server and the trigger system and to

180
00:07:42,100 --> 00:07:47,620
interrupt then the client we are sending

181
00:07:44,950 --> 00:07:49,330
the debugging commands and when the SMI

182
00:07:47,620 --> 00:07:51,880
handle<font color="#CCCCCC"> received the debugging commands</font>

183
00:07:49,330 --> 00:07:54,340
<font color="#E5E5E5">it were executed the comments and the</font>

184
00:07:51,880 --> 00:07:58,390
send the response message back<font color="#CCCCCC"> to the</font>

185
00:07:54,340 --> 00:08:00,640
client we have improved we have

186
00:07:58,390 --> 00:08:03,640
implemented a few debugging functions in

187
00:08:00,640 --> 00:08:05,650
<font color="#CCCCCC">Marstons one of the functions we</font>

188
00:08:03,640 --> 00:08:09,250
increment<font color="#E5E5E5"> is a step-by-step execution</font>

189
00:08:05,650 --> 00:08:11,590
and the figure shows you how we achieve

190
00:08:09,250 --> 00:08:13,930
step-by-step execution in<font color="#CCCCCC"> mouth systems</font>

191
00:08:11,590 --> 00:08:16,539
and basically we use the performance

192
00:08:13,930 --> 00:08:18,850
counter for this purpose performance

193
00:08:16,540 --> 00:08:22,240
counter is a hardware future that can

194
00:08:18,850 --> 00:08:23,730
count about however<font color="#E5E5E5"> events and for</font>

195
00:08:22,240 --> 00:08:26,470
<font color="#E5E5E5">example if we want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> implement</font>

196
00:08:23,730 --> 00:08:29,080
instruction by instruction execution we

197
00:08:26,470 --> 00:08:32,050
first restart the performance counter to

198
00:08:29,080 --> 00:08:34,659
its maximum value then we started the

199
00:08:32,049 --> 00:08:38,049
professor counter to count the<font color="#CCCCCC"> number of</font>

200
00:08:34,659 --> 00:08:41,620
retiring instructions so basically<font color="#E5E5E5"> when</font>

201
00:08:38,049 --> 00:08:44,079
<font color="#CCCCCC">the next instruction retires the counter</font>

202
00:08:41,620 --> 00:08:47,680
we are<font color="#CCCCCC"> over floats and this overflow</font>

203
00:08:44,080 --> 00:08:50,890
action will generate an exception then

204
00:08:47,680 --> 00:08:53,229
we reroutes this exception to become a

205
00:08:50,890 --> 00:08:53,680
system<font color="#E5E5E5"> manager interrupt and in this</font>

206
00:08:53,230 --> 00:08:55,360
case of

207
00:08:53,680 --> 00:08:57,279
we can trigger each in a trigger a

208
00:08:55,360 --> 00:09:00,700
system and we interrupt for each

209
00:08:57,279 --> 00:09:04,120
instructions and note that<font color="#E5E5E5"> we also can</font>

210
00:09:00,700 --> 00:09:07,860
use other<font color="#CCCCCC"> hardware events and to you to</font>

211
00:09:04,120 --> 00:09:07,860
implement<font color="#CCCCCC"> the different stepping modes</font>

212
00:09:08,760 --> 00:09:13,209
so I talk about<font color="#CCCCCC"> our motivation</font>

213
00:09:11,200 --> 00:09:14,950
background system architecture now<font color="#E5E5E5"> I'm</font>

214
00:09:13,209 --> 00:09:17,319
going to talk about the<font color="#E5E5E5"> evaluation</font>

215
00:09:14,950 --> 00:09:19,709
results for the evaluation result we

216
00:09:17,320 --> 00:09:24,070
evaluate<font color="#CCCCCC"> our system in two extracts</font>

217
00:09:19,709 --> 00:09:26,500
transparency and performance for

218
00:09:24,070 --> 00:09:29,320
transparency analysis we focus on two

219
00:09:26,500 --> 00:09:31,390
subjects why is the runny environment of

220
00:09:29,320 --> 00:09:34,149
the debugger the other is a<font color="#CCCCCC"> debugger</font>

221
00:09:31,390 --> 00:09:36,220
itself for<font color="#CCCCCC"> the run environment of a</font>

222
00:09:34,149 --> 00:09:37,839
debugger we<font color="#CCCCCC"> compare the system</font>

223
00:09:36,220 --> 00:09:41,529
management mode with the<font color="#E5E5E5"> virtualization</font>

224
00:09:37,839 --> 00:09:43,690
elimination technologies so<font color="#CCCCCC"> the mall</font>

225
00:09:41,529 --> 00:09:46,839
system we use system management mode and

226
00:09:43,690 --> 00:09:49,420
<font color="#E5E5E5">it is a hardware future existing or x86</font>

227
00:09:46,839 --> 00:09:50,470
<font color="#E5E5E5">architecture well from mostly</font>

228
00:09:49,420 --> 00:09:51,640
traditional approach<font color="#CCCCCC"> they use</font>

229
00:09:50,470 --> 00:09:54,250
virtualization<font color="#CCCCCC"> and emulation</font>

230
00:09:51,640 --> 00:09:56,170
technologies and they<font color="#E5E5E5"> introduce a large</font>

231
00:09:54,250 --> 00:09:58,570
<font color="#E5E5E5">Chester County Building base also the</font>

232
00:09:56,170 --> 00:10:01,089
introducer larki large attacking surface

233
00:09:58,570 --> 00:10:05,260
so<font color="#E5E5E5"> we believe that is using system</font>

234
00:10:01,089 --> 00:10:07,060
management mode it's more transparent in

235
00:10:05,260 --> 00:10:10,270
terms of side<font color="#E5E5E5"> effects introduced by the</font>

236
00:10:07,060 --> 00:10:12,729
<font color="#E5E5E5">debugger yourselves we email system we</font>

237
00:10:10,270 --> 00:10:16,390
emulate all of the side effects

238
00:10:12,730 --> 00:10:21,100
introduced by mouth in CPU cache memory

239
00:10:16,390 --> 00:10:24,069
i/o pals even Tami and also we show that

240
00:10:21,100 --> 00:10:25,959
that we can mitigate most of the side

241
00:10:24,070 --> 00:10:28,839
effects introduced by<font color="#CCCCCC"> mouse by our</font>

242
00:10:25,959 --> 00:10:31,239
assistance towards the truth

243
00:10:28,839 --> 00:10:33,760
transparency mouth is not<font color="#E5E5E5"> fully</font>

244
00:10:31,240 --> 00:10:35,500
transparent and for<font color="#E5E5E5"> example it cannot</font>

245
00:10:33,760 --> 00:10:37,779
defend against the external timing

246
00:10:35,500 --> 00:10:40,060
attacks and we believe about<font color="#CCCCCC"> you to</font>

247
00:10:37,779 --> 00:10:42,790
increase the<font color="#CCCCCC"> state-of-the-art departing</font>

248
00:10:40,060 --> 00:10:45,130
transparency and also we would like to

249
00:10:42,790 --> 00:10:47,079
<font color="#CCCCCC">draw attention to this hardware based</font>

250
00:10:45,130 --> 00:10:53,230
approach for addressing the debugging

251
00:10:47,079 --> 00:10:55,000
transparency problem to match the

252
00:10:53,230 --> 00:10:57,760
performance<font color="#CCCCCC"> of</font><font color="#E5E5E5"> overhead we implement</font><font color="#CCCCCC"> a</font>

253
00:10:55,000 --> 00:11:00,399
prototype about systems the test by the

254
00:10:57,760 --> 00:11:03,640
specification shows on the slides the

255
00:11:00,399 --> 00:11:06,010
table<font color="#E5E5E5"> shows you the SMN switch and a</font>

256
00:11:03,640 --> 00:11:07,360
resume time so basically front table we

257
00:11:06,010 --> 00:11:10,089
can see that

258
00:11:07,360 --> 00:11:13,180
switching takes about<font color="#E5E5E5"> three microseconds</font>

259
00:11:10,089 --> 00:11:15,430
<font color="#CCCCCC">and SMA resume only takes about five</font>

260
00:11:13,180 --> 00:11:16,899
microseconds so in total these two

261
00:11:15,430 --> 00:11:19,329
operations only take about eight

262
00:11:16,899 --> 00:11:24,100
microseconds so it's pretty slow a

263
00:11:19,329 --> 00:11:26,709
pretty low overhead also we measured<font color="#CCCCCC"> up</font>

264
00:11:24,100 --> 00:11:29,050
stepping<font color="#CCCCCC"> over head in our system since</font>

265
00:11:26,709 --> 00:11:31,239
the SMA is<font color="#CCCCCC"> Hardware future major the</font>

266
00:11:29,050 --> 00:11:34,660
overhead and both Windows and Linux plan

267
00:11:31,240 --> 00:11:36,760
phones and we use a different benchmarks

268
00:11:34,660 --> 00:11:41,380
to manage this and this table shows you

269
00:11:36,760 --> 00:11:43,630
the benchmark<font color="#CCCCCC"> of Pi operation so also we</font>

270
00:11:41,380 --> 00:11:45,579
<font color="#CCCCCC">can see that we included four different</font>

271
00:11:43,630 --> 00:11:48,339
stepping modes they are to

272
00:11:45,579 --> 00:11:51,519
transfer near return taking branch and

273
00:11:48,339 --> 00:11:53,560
instructions from table we can<font color="#CCCCCC"> see that</font>

274
00:11:51,519 --> 00:11:55,540
<font color="#E5E5E5">that if we increase the current reality</font>

275
00:11:53,560 --> 00:12:01,180
of this stepping modes the overhead

276
00:11:55,540 --> 00:12:03,730
increases in conclusion we develop a

277
00:12:01,180 --> 00:12:05,589
system<font color="#CCCCCC"> call amount it is a parameter T</font>

278
00:12:03,730 --> 00:12:07,269
banking system that employs system

279
00:12:05,589 --> 00:12:10,060
management mode to analyze my well and

280
00:12:07,269 --> 00:12:12,670
it is a hardware<font color="#CCCCCC"> assistance system that</font>

281
00:12:10,060 --> 00:12:15,310
that does not<font color="#E5E5E5"> use any virtualization or</font>

282
00:12:12,670 --> 00:12:16,899
emulation technologies and it provide a

283
00:12:15,310 --> 00:12:19,989
more transparent<font color="#E5E5E5"> execution environment</font>

284
00:12:16,899 --> 00:12:22,089
and<font color="#CCCCCC"> also by</font><font color="#E5E5E5"> Tesla existing entity buggy</font>

285
00:12:19,990 --> 00:12:24,970
and TV m and ng<font color="#E5E5E5"> Malaysian techniques</font>

286
00:12:22,089 --> 00:12:26,790
remains transparent so in terms of

287
00:12:24,970 --> 00:12:30,100
future work you would like to combine

288
00:12:26,790 --> 00:12:33,519
mouth with other popular debuggers for

289
00:12:30,100 --> 00:12:35,589
example idea pro or gdb client and in

290
00:12:33,519 --> 00:12:37,839
this case<font color="#CCCCCC"> a</font><font color="#E5E5E5"> basically we can build a</font>

291
00:12:35,589 --> 00:12:40,570
generic interface between mouth and

292
00:12:37,839 --> 00:12:42,820
other popular<font color="#E5E5E5"> debuggers and the figure</font>

293
00:12:40,570 --> 00:12:44,740
below basically shows you the design of

294
00:12:42,820 --> 00:12:47,760
<font color="#E5E5E5">using mouth with multiple other</font>

295
00:12:44,740 --> 00:12:50,050
debugging clients this is a reference

296
00:12:47,760 --> 00:12:53,279
thank you very<font color="#E5E5E5"> much</font><font color="#CCCCCC"> for your attention I</font>

297
00:12:50,050 --> 00:12:53,279
will be happy<font color="#CCCCCC"> to take</font><font color="#E5E5E5"> any questions</font>

298
00:12:59,670 --> 00:13:08,529
<font color="#CCCCCC">Thanks fun way for an interesting</font><font color="#E5E5E5"> talk</font>

299
00:13:02,790 --> 00:13:10,689
questions my question is simple so

300
00:13:08,529 --> 00:13:15,309
what's the<font color="#CCCCCC"> difference between your work</font>

301
00:13:10,689 --> 00:13:18,009
and bear box I'm sorry could you repeat

302
00:13:15,309 --> 00:13:20,920
your question<font color="#E5E5E5"> okay what's the difference</font>

303
00:13:18,009 --> 00:13:23,139
between<font color="#CCCCCC"> who you are sorry what's the</font>

304
00:13:20,920 --> 00:13:27,429
difference<font color="#CCCCCC"> between your work and bear</font>

305
00:13:23,139 --> 00:13:29,139
box I see so the<font color="#E5E5E5"> question is what's</font><font color="#CCCCCC"> the</font>

306
00:13:27,429 --> 00:13:32,439
difference between my work and the bear

307
00:13:29,139 --> 00:13:35,589
box so advanced<font color="#CCCCCC"> are known for power box</font>

308
00:13:32,439 --> 00:13:37,599
it's also a bear mental<font color="#CCCCCC"> Merrill answer</font>

309
00:13:35,589 --> 00:13:40,300
system so basically the bear box they

310
00:13:37,600 --> 00:13:42,459
try to focus on the fast restoring so

311
00:13:40,300 --> 00:13:43,839
basically<font color="#E5E5E5"> if you want to debug a memo</font>

312
00:13:42,459 --> 00:13:46,899
you want to staff around the clean

313
00:13:43,839 --> 00:13:48,970
session right and in<font color="#CCCCCC"> that case they try</font>

314
00:13:46,899 --> 00:13:52,300
to use the faster way to restart the

315
00:13:48,970 --> 00:13:55,420
<font color="#E5E5E5">system and in our work we use system and</font>

316
00:13:52,300 --> 00:13:57,939
remote and so basically<font color="#CCCCCC"> it's in our work</font>

317
00:13:55,420 --> 00:13:59,290
we focus on the transparency part and in

318
00:13:57,939 --> 00:14:04,300
their work i<font color="#CCCCCC"> think</font><font color="#E5E5E5"> it's we have</font>

319
00:13:59,290 --> 00:14:06,910
different focus thank you very much next

320
00:14:04,300 --> 00:14:10,599
question but yes pile Purdue University

321
00:14:06,910 --> 00:14:13,149
I wonder about timing issues if Maldor

322
00:14:10,600 --> 00:14:15,009
reads out timing counters or cycle

323
00:14:13,149 --> 00:14:17,740
counters and stuff like that can it

324
00:14:15,009 --> 00:14:21,670
observe that you're trapping and

325
00:14:17,740 --> 00:14:23,620
resuming all the time<font color="#E5E5E5"> I'm sorry so your</font>

326
00:14:21,670 --> 00:14:26,889
question is about<font color="#E5E5E5"> the timing issue of</font>

327
00:14:23,620 --> 00:14:29,800
Alice's yes assumed melvar execute<font color="#CCCCCC"> RTDs</font>

328
00:14:26,889 --> 00:14:33,189
see all the time to count cycles that

329
00:14:29,800 --> 00:14:34,748
it's spent executing and you're

330
00:14:33,189 --> 00:14:36,189
switching back and forth all the time

331
00:14:34,749 --> 00:14:38,620
and if you're single stepping<font color="#E5E5E5"> this will</font>

332
00:14:36,189 --> 00:14:40,240
have huge issues regarding timing of the

333
00:14:38,620 --> 00:14:44,079
malware itself and if the malware self

334
00:14:40,240 --> 00:14:46,509
self checks itself it could detect it so

335
00:14:44,079 --> 00:14:48,519
basically question is am alwa can use<font color="#E5E5E5"> a</font>

336
00:14:46,509 --> 00:14:50,709
timing information to detect our system

337
00:14:48,519 --> 00:14:51,730
since up my major contribution of the

338
00:14:50,709 --> 00:14:54,969
walk is trying to achieve the

339
00:14:51,730 --> 00:14:56,439
transparency right so for<font color="#CCCCCC"> tamio</font><font color="#E5E5E5"> text I</font>

340
00:14:54,970 --> 00:14:58,389
believe there are two kinds of<font color="#E5E5E5"> tamika's</font>

341
00:14:56,439 --> 00:15:01,449
why is the internal timing text like you

342
00:14:58,389 --> 00:15:03,490
mention it we can<font color="#E5E5E5"> use the</font><font color="#CCCCCC"> rtt at RTC try</font>

343
00:15:01,449 --> 00:15:06,040
to check the current is high and to see

344
00:15:03,490 --> 00:15:06,640
if today's overhead means that debugging

345
00:15:06,040 --> 00:15:08,530
exists

346
00:15:06,640 --> 00:15:10,689
right and<font color="#CCCCCC"> I was</font><font color="#E5E5E5"> another timing attack</font>

347
00:15:08,530 --> 00:15:12,970
actually the external time<font color="#E5E5E5"> attack so</font>

348
00:15:10,690 --> 00:15:14,740
<font color="#E5E5E5">basically you can send a request to the</font>

349
00:15:12,970 --> 00:15:17,830
external server to ask you for timing

350
00:15:14,740 --> 00:15:21,010
information so for the<font color="#CCCCCC"> internet America</font>

351
00:15:17,830 --> 00:15:24,880
basically in our work we did like<font color="#E5E5E5"> modify</font>

352
00:15:21,010 --> 00:15:27,160
those kind of internal timers and the to

353
00:15:24,880 --> 00:15:29,200
see to basically mitigate those kind<font color="#E5E5E5"> of</font>

354
00:15:27,160 --> 00:15:31,270
internal timer cracks but for example if

355
00:15:29,200 --> 00:15:35,380
you execute a sometimes in the SMI

356
00:15:31,270 --> 00:15:37,630
handler we are just substi- that timing

357
00:15:35,380 --> 00:15:39,220
information for the internal timer but

358
00:15:37,630 --> 00:15:40,780
<font color="#E5E5E5">unfortunately for our work we still</font>

359
00:15:39,220 --> 00:15:42,880
cannot defend against external time

360
00:15:40,780 --> 00:15:45,040
attacks because external thermal<font color="#CCCCCC"> tax</font><font color="#E5E5E5"> is</font>

361
00:15:42,880 --> 00:15:46,570
<font color="#E5E5E5">very hard to defend and also the timing</font>

362
00:15:45,040 --> 00:15:48,849
of everything timing information could

363
00:15:46,570 --> 00:15:51,640
be encrypted<font color="#E5E5E5"> even so in that case it's a</font>

364
00:15:48,850 --> 00:15:55,600
via via via via<font color="#CCCCCC"> steal cannot defend</font>

365
00:15:51,640 --> 00:16:03,819
against that attack thank you sure

366
00:15:55,600 --> 00:16:06,550
thanks hi so on that<font color="#CCCCCC"> note you said the</font>

367
00:16:03,820 --> 00:16:08,410
overhead was like<font color="#CCCCCC"> 7 microseconds which</font>

368
00:16:06,550 --> 00:16:10,569
you said was<font color="#CCCCCC"> very low but that's like</font>

369
00:16:08,410 --> 00:16:12,370
three you're almost four orders of

370
00:16:10,570 --> 00:16:14,230
magnitude larger than the time<font color="#CCCCCC"> it takes</font>

371
00:16:12,370 --> 00:16:16,120
to execute one instruction so if you're

372
00:16:14,230 --> 00:16:17,920
doing that single stepping you're

373
00:16:16,120 --> 00:16:20,470
slowing down execution by a factor of

374
00:16:17,920 --> 00:16:24,069
well over a thousand right so that

375
00:16:20,470 --> 00:16:27,500
doesn't sound like<font color="#E5E5E5"> low overhead yes you</font>

376
00:16:24,070 --> 00:16:30,300
<font color="#E5E5E5">all right so basically</font>

377
00:16:27,500 --> 00:16:32,760
yeah as I surely in the slides so they

378
00:16:30,300 --> 00:16:35,130
are<font color="#CCCCCC"> to performance evaluation why is the</font>

379
00:16:32,760 --> 00:16:37,980
estimates reaching time and as<font color="#E5E5E5"> I showed</font>

380
00:16:35,130 --> 00:16:41,700
in the slides let me go<font color="#E5E5E5"> back for the</font>

381
00:16:37,980 --> 00:16:43,650
slides so in the<font color="#E5E5E5"> performance SMS which</font>

382
00:16:41,700 --> 00:16:45,690
in Thai is pretty low days for each

383
00:16:43,650 --> 00:16:48,000
switching it's only take about eight

384
00:16:45,690 --> 00:16:49,950
microseconds I could imagine<font color="#E5E5E5"> if we do</font>

385
00:16:48,000 --> 00:16:53,430
the single step in means that every

386
00:16:49,950 --> 00:16:56,220
instruction is this time and front this

387
00:16:53,430 --> 00:16:58,890
basically this table shows you the

388
00:16:56,220 --> 00:17:00,600
stepping over head and we can see that

389
00:16:58,890 --> 00:17:06,060
<font color="#E5E5E5">for instruction now over here actually</font>

390
00:17:00,600 --> 00:17:09,060
is about 970 slow down time<font color="#E5E5E5"> slow down so</font>

391
00:17:06,060 --> 00:17:11,190
the system<font color="#E5E5E5"> it's it's it's has a very</font>

392
00:17:09,060 --> 00:17:13,109
hyper from the overhead but the purpose

393
00:17:11,190 --> 00:17:15,420
of this<font color="#E5E5E5"> work is we are</font><font color="#CCCCCC"> trying to achieve</font>

394
00:17:13,109 --> 00:17:17,729
the high transparency and we do believe

395
00:17:15,420 --> 00:17:19,949
<font color="#E5E5E5">that in some kind of malware they can</font>

396
00:17:17,730 --> 00:17:21,930
maybe sacrifice this performance

397
00:17:19,949 --> 00:17:23,820
overhead but the focus of that my

398
00:17:21,930 --> 00:17:25,860
loyalty buggy is trying to achieve the

399
00:17:23,819 --> 00:17:28,379
high transparency but I do agree with

400
00:17:25,859 --> 00:17:34,469
<font color="#E5E5E5">you this system still have a very high</font>

401
00:17:28,380 --> 00:17:37,860
performance impact thank you turn<font color="#E5E5E5"> Jagger</font>

402
00:17:34,470 --> 00:17:40,980
from Penn State so I've seen malware

403
00:17:37,860 --> 00:17:42,929
that takes advantage of if you're trying

404
00:17:40,980 --> 00:17:45,530
to analyze would say using gdb the

405
00:17:42,930 --> 00:17:49,560
malware will actually look for the

406
00:17:45,530 --> 00:17:51,060
effects that gdb causes to your address

407
00:17:49,560 --> 00:17:53,520
space in order to detect that the

408
00:17:51,060 --> 00:17:56,010
malware is being debugged and take

409
00:17:53,520 --> 00:17:58,680
countermeasures against that so did you

410
00:17:56,010 --> 00:18:00,990
<font color="#E5E5E5">look at your GD be like debugger and the</font>

411
00:17:58,680 --> 00:18:05,430
side effects that<font color="#CCCCCC"> it has and whether</font>

412
00:18:00,990 --> 00:18:07,740
those are detectable by the malware I'm

413
00:18:05,430 --> 00:18:09,660
sorry so I hope I understand your

414
00:18:07,740 --> 00:18:13,370
question so you questions they are some

415
00:18:09,660 --> 00:18:15,900
bugs in the gdb maybe no not bugs the

416
00:18:13,370 --> 00:18:18,479
gdb the malware will look for whether

417
00:18:15,900 --> 00:18:23,430
you've instrumented you're using gdb to

418
00:18:18,480 --> 00:18:26,610
the bug the malware I see I see so for

419
00:18:23,430 --> 00:18:28,860
our GDP like the debugger actually we

420
00:18:26,610 --> 00:18:30,780
put most of our code in this kind of

421
00:18:28,860 --> 00:18:33,830
isolated screech environment called<font color="#E5E5E5"> a</font>

422
00:18:30,780 --> 00:18:36,000
system and remote and this code<font color="#E5E5E5"> is</font>

423
00:18:33,830 --> 00:18:39,120
inaccessible from the<font color="#E5E5E5"> lawnmower</font>

424
00:18:36,000 --> 00:18:40,480
<font color="#E5E5E5">insistent so the</font><font color="#CCCCCC"> male well basically</font>

425
00:18:39,120 --> 00:18:42,250
cannot look handed

426
00:18:40,480 --> 00:18:44,350
system management<font color="#CCCCCC"> one the memory to</font>

427
00:18:42,250 --> 00:18:46,990
identify what Achilles over there so in

428
00:18:44,350 --> 00:18:49,418
this case via transparent but don't<font color="#E5E5E5"> you</font>

429
00:18:46,990 --> 00:18:51,700
instrument the malware in order to cause

430
00:18:49,419 --> 00:18:54,010
the traps to the system<font color="#E5E5E5"> management mode</font>

431
00:18:51,700 --> 00:18:56,350
and those that instrumentation could be

432
00:18:54,010 --> 00:18:59,440
detected potentially by the malware and

433
00:18:56,350 --> 00:19:02,770
thus the malware would stop right right

434
00:18:59,440 --> 00:19:04,660
so in this case so we<font color="#E5E5E5"> in your paper we</font>

435
00:19:02,770 --> 00:19:05,980
emulate all of those kind of side

436
00:19:04,660 --> 00:19:09,160
effects including you mentioned for

437
00:19:05,980 --> 00:19:11,380
example we basically inches fact your

438
00:19:09,160 --> 00:19:13,240
interest mandala malware we have to have

439
00:19:11,380 --> 00:19:15,549
a mechanism way to<font color="#E5E5E5"> like a standard the</font>

440
00:19:13,240 --> 00:19:17,620
interrupts the<font color="#E5E5E5"> frequent rewrite and also</font>

441
00:19:15,549 --> 00:19:20,440
in<font color="#E5E5E5"> our paper we show how we mitigate</font>

442
00:19:17,620 --> 00:19:22,449
those kind<font color="#E5E5E5"> of start effects and also</font>

443
00:19:20,440 --> 00:19:23,710
that those kind of artifacts<font color="#E5E5E5"> and I will</font>

444
00:19:22,450 --> 00:19:25,390
be happy to<font color="#E5E5E5"> talk about</font><font color="#CCCCCC"> our borders</font>

445
00:19:23,710 --> 00:19:31,360
candle with you after the talk and

446
00:19:25,390 --> 00:19:35,410
regarding to the paper<font color="#CCCCCC"> okay yeah so how</font>

447
00:19:31,360 --> 00:19:39,820
do you compare out the use of SMS mi

448
00:19:35,410 --> 00:19:45,100
with the<font color="#E5E5E5"> single step debugging feature</font>

449
00:19:39,820 --> 00:19:47,530
of the Intel processor the question is

450
00:19:45,100 --> 00:19:51,159
how can I compare my sister with the

451
00:19:47,530 --> 00:19:54,730
Intel future step assistant oh because

452
00:19:51,160 --> 00:19:59,620
the processor itself has its own see a

453
00:19:54,730 --> 00:20:02,950
single<font color="#E5E5E5"> step debugging function right so</font>

454
00:19:59,620 --> 00:20:05,049
uh actually I'm not familiar with the

455
00:20:02,950 --> 00:20:07,169
processor single stab me mo but I

456
00:20:05,049 --> 00:20:10,240
believe if<font color="#CCCCCC"> you are talking</font><font color="#E5E5E5"> about the</font>

457
00:20:07,169 --> 00:20:12,490
departed stir by the intel chipset for

458
00:20:10,240 --> 00:20:13,750
example for that debugger register so

459
00:20:12,490 --> 00:20:16,480
<font color="#E5E5E5">basically if you have rings your</font>

460
00:20:13,750 --> 00:20:19,150
privilege the matter can read what's in

461
00:20:16,480 --> 00:20:20,919
there right and for<font color="#CCCCCC"> that purpose i think</font>

462
00:20:19,150 --> 00:20:22,720
<font color="#E5E5E5">the purpose of</font><font color="#CCCCCC"> the Intel is trying to</font>

463
00:20:20,919 --> 00:20:25,330
<font color="#E5E5E5">for the debugging function they are not</font>

464
00:20:22,720 --> 00:20:27,549
<font color="#E5E5E5">trying to do a high transparency but for</font>

465
00:20:25,330 --> 00:20:29,370
our system the focus is to try to

466
00:20:27,549 --> 00:20:31,690
achieve the high transparency and

467
00:20:29,370 --> 00:20:34,780
although the debugging function is not

468
00:20:31,690 --> 00:20:37,390
as powerful as the<font color="#CCCCCC"> Intel are debugging</font>

469
00:20:34,780 --> 00:20:39,790
function but I think the two sister has

470
00:20:37,390 --> 00:20:45,150
very different focus let's hope I answer

471
00:20:39,790 --> 00:20:45,149
the question<font color="#E5E5E5"> thank you</font>

