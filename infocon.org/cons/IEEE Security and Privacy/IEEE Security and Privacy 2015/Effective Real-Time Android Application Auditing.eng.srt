1
00:00:00,050 --> 00:00:04,609
hello<font color="#E5E5E5"> everyone I'm mainland cro-magnon</font>

2
00:00:02,629 --> 00:00:06,859
<font color="#E5E5E5">Yuba City and today I'm present our work</font>

3
00:00:04,610 --> 00:00:08,950
are making android application auditing

4
00:00:06,860 --> 00:00:11,450
more efficient and also more effective

5
00:00:08,950 --> 00:00:13,459
so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the screen</font><font color="#CCCCCC"> where you want to</font>

6
00:00:11,450 --> 00:00:15,829
install<font color="#E5E5E5"> a new android app they will pop</font>

7
00:00:13,460 --> 00:00:17,749
up with the permission requires so here

8
00:00:15,830 --> 00:00:19,880
you see that this app will access your

9
00:00:17,749 --> 00:00:22,159
personal information as well as<font color="#CCCCCC"> i want</font>

10
00:00:19,880 --> 00:00:24,380
to perform full network communications

11
00:00:22,159 --> 00:00:26,749
so by looking at this have you<font color="#E5E5E5"> ever</font>

12
00:00:24,380 --> 00:00:28,399
<font color="#E5E5E5">wondered if this app will leak your</font>

13
00:00:26,749 --> 00:00:30,890
personal information why network

14
00:00:28,399 --> 00:00:33,260
communication so if you not you<font color="#CCCCCC"> should</font>

15
00:00:30,890 --> 00:00:35,600
starting today because nowadays a

16
00:00:33,260 --> 00:00:38,390
smartphone app can access all kinds of

17
00:00:35,600 --> 00:00:40,670
your privacy<font color="#E5E5E5"> and</font><font color="#CCCCCC"> concern data your text</font>

18
00:00:38,390 --> 00:00:42,859
messages your content your payment

19
00:00:40,670 --> 00:00:46,129
information location your schedule and

20
00:00:42,859 --> 00:00:48,440
your browsing history so the leaks are

21
00:00:46,129 --> 00:00:51,140
commonly related to a source and a sink

22
00:00:48,440 --> 00:00:53,329
so you can for<font color="#E5E5E5"> example for an app you</font>

23
00:00:51,140 --> 00:00:55,609
<font color="#CCCCCC">can get the</font><font color="#E5E5E5"> phone number</font><font color="#CCCCCC"> as from a</font>

24
00:00:53,329 --> 00:00:58,309
source<font color="#CCCCCC"> api then you can transform this</font>

25
00:00:55,609 --> 00:01:00,379
informant number into a URL and<font color="#CCCCCC"> then you</font>

26
00:00:58,309 --> 00:01:04,429
call this URL that's open connection to

27
00:01:00,379 --> 00:01:07,429
lick it so here app auditing aims to

28
00:01:04,430 --> 00:01:09,290
uncover those data leaks in apps and a

29
00:01:07,430 --> 00:01:11,300
<font color="#CCCCCC">fine-grained one should be able to tell</font>

30
00:01:09,290 --> 00:01:13,310
you not<font color="#E5E5E5"> only the sauce in a sink but</font>

31
00:01:11,300 --> 00:01:14,780
also the form that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> data will be</font>

32
00:01:13,310 --> 00:01:17,390
leaked for example here<font color="#E5E5E5"> it's only</font>

33
00:01:14,780 --> 00:01:19,760
encrypted HTTP your<font color="#E5E5E5"> get it also shows</font>

34
00:01:17,390 --> 00:01:23,180
<font color="#CCCCCC">you</font><font color="#E5E5E5"> domain name and</font><font color="#CCCCCC"> a component where</font>

35
00:01:19,760 --> 00:01:25,430
<font color="#E5E5E5">will leak this data so there are</font>

36
00:01:23,180 --> 00:01:27,680
<font color="#CCCCCC">definitely a lot</font><font color="#E5E5E5"> of use cases for such</font>

37
00:01:25,430 --> 00:01:29,570
auditing tools for example your app

38
00:01:27,680 --> 00:01:32,420
developers can check the earth their app

39
00:01:29,570 --> 00:01:35,330
before releasing them so you they won't

40
00:01:32,420 --> 00:01:38,480
<font color="#E5E5E5">be using any data leaking libraries also</font>

41
00:01:35,330 --> 00:01:40,910
app market operators will want to<font color="#E5E5E5"> scan</font>

42
00:01:38,480 --> 00:01:43,070
those apps and newly uploaded apps to

43
00:01:40,910 --> 00:01:45,410
make sure<font color="#CCCCCC"> their then</font><font color="#E5E5E5"> the leaking ones</font>

44
00:01:43,070 --> 00:01:47,839
are not entering the market for mobile

45
00:01:45,410 --> 00:01:49,520
users you<font color="#E5E5E5"> can install apple app oddity</font>

46
00:01:47,840 --> 00:01:51,320
to on<font color="#E5E5E5"> your smartphone so when you</font>

47
00:01:49,520 --> 00:01:54,140
install new apps<font color="#CCCCCC"> it you can check it</font>

48
00:01:51,320 --> 00:01:56,960
before using it so all of these use

49
00:01:54,140 --> 00:01:59,300
cases have various requirements on the

50
00:01:56,960 --> 00:02:01,339
apartment<font color="#CCCCCC"> tool for example you want the</font>

51
00:01:59,300 --> 00:02:04,700
app developers want to see all the data

52
00:02:01,340 --> 00:02:06,470
leaks in the app app market operators do

53
00:02:04,700 --> 00:02:07,880
not want<font color="#E5E5E5"> to have false positive they</font>

54
00:02:06,470 --> 00:02:10,970
don't<font color="#CCCCCC"> want to blame anyone who is not</font>

55
00:02:07,880 --> 00:02:12,859
leaking and mobile users do not have

56
00:02:10,970 --> 00:02:13,340
their patients to which the tool to run

57
00:02:12,860 --> 00:02:16,010
<font color="#E5E5E5">lower</font>

58
00:02:13,340 --> 00:02:19,700
so you expect the efficiency of the

59
00:02:16,010 --> 00:02:22,160
analysis so if<font color="#E5E5E5"> we look back into the</font>

60
00:02:19,700 --> 00:02:24,140
existing<font color="#E5E5E5"> tools we can for</font><font color="#CCCCCC"> sure perform</font>

61
00:02:22,160 --> 00:02:26,030
dynamic analysis for example<font color="#E5E5E5"> 10th droid</font>

62
00:02:24,140 --> 00:02:29,149
which is the modified android operating

63
00:02:26,030 --> 00:02:31,310
system with dynamic<font color="#CCCCCC"> tent analysis</font>

64
00:02:29,150 --> 00:02:34,010
tracking your sensitive data however

65
00:02:31,310 --> 00:02:37,010
dynamic analysis has a limitation it's

66
00:02:34,010 --> 00:02:39,319
largely dependent on the user<font color="#CCCCCC"> input so</font>

67
00:02:37,010 --> 00:02:41,500
if user click on a button then the

68
00:02:39,319 --> 00:02:45,679
analysis we only look<font color="#E5E5E5"> at the past</font>

69
00:02:41,500 --> 00:02:49,280
following the<font color="#E5E5E5"> disk the click button</font><font color="#CCCCCC"> pest</font>

70
00:02:45,680 --> 00:02:51,890
and a<font color="#CCCCCC"> slope coverage as a result on the</font>

71
00:02:49,280 --> 00:02:53,840
country we have<font color="#E5E5E5"> studied static analysis</font>

72
00:02:51,890 --> 00:02:56,298
which stamp app<font color="#E5E5E5"> intent and a flow joyed</font>

73
00:02:53,840 --> 00:02:58,629
which can take<font color="#E5E5E5"> a look at the entire app</font>

74
00:02:56,299 --> 00:03:01,040
and outline all<font color="#CCCCCC"> of those data leaks</font>

75
00:02:58,629 --> 00:03:02,989
however the limitations for these tools

76
00:03:01,040 --> 00:03:04,609
they have false positives and they are

77
00:03:02,989 --> 00:03:08,720
<font color="#E5E5E5">very they could be very time-consuming</font>

78
00:03:04,610 --> 00:03:11,209
in face of<font color="#CCCCCC"> real-world</font><font color="#E5E5E5"> applications why</font>

79
00:03:08,720 --> 00:03:14,359
is this so because nowadays<font color="#E5E5E5"> that</font><font color="#CCCCCC"> Android</font>

80
00:03:11,209 --> 00:03:17,959
apps are becoming way complicated<font color="#E5E5E5"> than</font>

81
00:03:14,360 --> 00:03:19,910
usual and typical app can has tens of

82
00:03:17,959 --> 00:03:23,750
thousands<font color="#E5E5E5"> of functions which is millions</font>

83
00:03:19,910 --> 00:03:26,269
of instructions has to be exempt today's

84
00:03:23,750 --> 00:03:28,760
static analysis<font color="#E5E5E5"> tool and they are all</font>

85
00:03:26,269 --> 00:03:31,700
performing whole program analysis<font color="#CCCCCC"> or</font>

86
00:03:28,760 --> 00:03:34,578
needs to have<font color="#E5E5E5"> a analysis time in the</font>

87
00:03:31,700 --> 00:03:37,040
scale<font color="#E5E5E5"> of minutes or hours and having a</font>

88
00:03:34,579 --> 00:03:39,319
greater amount of memory to run these

89
00:03:37,040 --> 00:03:43,150
tools and a definitively these tools are

90
00:03:39,319 --> 00:03:46,310
not practical for mobile users right now

91
00:03:43,150 --> 00:03:48,560
so in this work we<font color="#CCCCCC"> propose a porridge</font>

92
00:03:46,310 --> 00:03:51,200
which you want<font color="#E5E5E5"> to solve the problem with</font>

93
00:03:48,560 --> 00:03:53,359
static and dynamic analysis we<font color="#E5E5E5"> present a</font>

94
00:03:51,200 --> 00:03:55,578
signature of<font color="#CCCCCC"> true animal</font><font color="#E5E5E5"> senses and we</font>

95
00:03:53,359 --> 00:03:57,889
want to make<font color="#E5E5E5"> static analysis faster with</font>

96
00:03:55,579 --> 00:04:00,470
some false positives then we use<font color="#CCCCCC"> the</font>

97
00:03:57,889 --> 00:04:02,180
dynamic analysis to remove them<font color="#E5E5E5"> and the</font>

98
00:04:00,470 --> 00:04:04,940
dynamic analysis it cannot be performed

99
00:04:02,180 --> 00:04:08,810
automatically so we propose a proximity

100
00:04:04,940 --> 00:04:11,630
exclusion to tackle this problem so this

101
00:04:08,810 --> 00:04:15,260
<font color="#CCCCCC">is</font><font color="#E5E5E5"> how about it works in a high level</font>

102
00:04:11,630 --> 00:04:17,089
picture so if it takes<font color="#CCCCCC"> raw davek that</font>

103
00:04:15,260 --> 00:04:20,329
one byte code which<font color="#CCCCCC"> is the android java</font>

104
00:04:17,089 --> 00:04:23,119
bytecode perform a fast course<font color="#CCCCCC"> grant</font>

105
00:04:20,329 --> 00:04:27,080
data analysis and they find suspicious

106
00:04:23,120 --> 00:04:29,460
function that has the dead code data

107
00:04:27,080 --> 00:04:32,130
for<font color="#CCCCCC"> sure it because it's a closed</font><font color="#E5E5E5"> grant</font>

108
00:04:29,460 --> 00:04:35,219
assessment so it has<font color="#E5E5E5"> post positives and</font>

109
00:04:32,130 --> 00:04:37,620
as also actual leaking functions then we

110
00:04:35,220 --> 00:04:40,530
use this approximate exclusion to exam

111
00:04:37,620 --> 00:04:43,410
each of those functions it's a<font color="#CCCCCC"> it's a</font>

112
00:04:40,530 --> 00:04:45,210
dynamic analysis and it it will confirm

113
00:04:43,410 --> 00:04:48,990
that the data we're actually being

114
00:04:45,210 --> 00:04:50,580
leaked and<font color="#CCCCCC"> it said because it's a</font>

115
00:04:48,990 --> 00:04:53,250
dynamic analysis in your sense<font color="#E5E5E5"> its</font>

116
00:04:50,580 --> 00:04:55,229
revised I'll be executing this function

117
00:04:53,250 --> 00:04:57,389
to confirm leaks so it's much<font color="#CCCCCC"> more</font>

118
00:04:55,229 --> 00:05:00,270
efficient than staring at points and

119
00:04:57,389 --> 00:05:02,400
also we can exam multiple functions in

120
00:05:00,270 --> 00:05:05,580
parallel to further improve performance

121
00:05:02,400 --> 00:05:08,729
at this stage so<font color="#E5E5E5"> we will first look at</font>

122
00:05:05,580 --> 00:05:10,590
our lightweight static analysis it's the

123
00:05:08,729 --> 00:05:14,099
goal is to<font color="#E5E5E5"> find a suspicious functions</font>

124
00:05:10,590 --> 00:05:16,638
so here as we remember the function will

125
00:05:14,099 --> 00:05:19,530
can leak data only if it can reach a

126
00:05:16,639 --> 00:05:22,139
source API which gets the<font color="#CCCCCC"> salt</font><font color="#E5E5E5"> sensitive</font>

127
00:05:19,530 --> 00:05:24,059
data and<font color="#E5E5E5"> also a sync API which can leak</font>

128
00:05:22,139 --> 00:05:27,300
it can transmit the data out<font color="#CCCCCC"> of the</font>

129
00:05:24,060 --> 00:05:29,130
<font color="#E5E5E5">device so here we use</font><font color="#CCCCCC"> a call graph</font>

130
00:05:27,300 --> 00:05:32,940
structure to find the functions<font color="#E5E5E5"> that can</font>

131
00:05:29,130 --> 00:05:34,289
reach both a source in a sync API for

132
00:05:32,940 --> 00:05:36,210
sure there's a lot of practical

133
00:05:34,289 --> 00:05:39,449
challenges for example the virtual

134
00:05:36,210 --> 00:05:42,469
called reflections and we<font color="#E5E5E5"> simply extend</font>

135
00:05:39,449 --> 00:05:45,300
those call relationship to resulting a

136
00:05:42,469 --> 00:05:47,280
overestimating call graph this coral

137
00:05:45,300 --> 00:05:49,289
graph can be constructed and analyzed

138
00:05:47,280 --> 00:05:53,340
efficiently but<font color="#E5E5E5"> it has some false</font>

139
00:05:49,289 --> 00:05:55,560
positive as a result next we depend on

140
00:05:53,340 --> 00:05:57,900
our dynamic analysis to remove those

141
00:05:55,560 --> 00:06:00,479
false positives it's called a proximity

142
00:05:57,900 --> 00:06:02,698
exclusion and the the<font color="#CCCCCC"> high-level</font>

143
00:06:00,479 --> 00:06:05,159
<font color="#E5E5E5">description of it is automatically and</font>

144
00:06:02,699 --> 00:06:07,710
approximately execute a suspicious

145
00:06:05,159 --> 00:06:11,430
function to confirm that the<font color="#E5E5E5"> data will</font>

146
00:06:07,710 --> 00:06:13,380
<font color="#E5E5E5">be leaked and it will its goal</font><font color="#CCCCCC"> is to</font>

147
00:06:11,430 --> 00:06:16,409
<font color="#CCCCCC">mimic the</font><font color="#E5E5E5"> real execution of the function</font>

148
00:06:13,380 --> 00:06:18,210
it's approximately because when we are

149
00:06:16,409 --> 00:06:20,969
executing a function without any

150
00:06:18,210 --> 00:06:24,930
knowledge of its<font color="#E5E5E5"> the user inputs we will</font>

151
00:06:20,969 --> 00:06:27,570
have unknowns which is not<font color="#CCCCCC"> Bill here</font><font color="#E5E5E5"> I</font>

152
00:06:24,930 --> 00:06:30,300
will show<font color="#E5E5E5"> you a running example showing</font>

153
00:06:27,570 --> 00:06:33,630
how this approximate execution happens

154
00:06:30,300 --> 00:06:36,270
so for example<font color="#E5E5E5"> we want to run this full</font>

155
00:06:33,630 --> 00:06:39,900
function and where we start running and

156
00:06:36,270 --> 00:06:40,599
we have no<font color="#E5E5E5"> idea what is what X is so we</font>

157
00:06:39,900 --> 00:06:43,690
do not<font color="#E5E5E5"> know</font>

158
00:06:40,600 --> 00:06:46,030
type we do not<font color="#CCCCCC"> owe its value so here we</font>

159
00:06:43,690 --> 00:06:49,630
introduce the<font color="#E5E5E5"> object of representation</font>

160
00:06:46,030 --> 00:06:52,239
we assign X with the imaginary unknown

161
00:06:49,630 --> 00:06:56,770
object which represents an object<font color="#CCCCCC"> that</font>

162
00:06:52,240 --> 00:06:58,690
exists before the execution then we come

163
00:06:56,770 --> 00:07:00,700
<font color="#CCCCCC">to the first line the source API which</font>

164
00:06:58,690 --> 00:07:03,550
can be something<font color="#E5E5E5"> like a gets the phone</font>

165
00:07:00,700 --> 00:07:06,370
number it returns a your sensitive data

166
00:07:03,550 --> 00:07:10,030
it returns the<font color="#E5E5E5"> integer of the of your</font>

167
00:07:06,370 --> 00:07:12,310
phone number and it ain't it it's a like

168
00:07:10,030 --> 00:07:14,440
dynamic<font color="#E5E5E5"> change analysis it's a 10 to the</font>

169
00:07:12,310 --> 00:07:18,220
<font color="#CCCCCC">object contains the info your sensitive</font>

170
00:07:14,440 --> 00:07:21,520
data is designed to X dot M so M now

171
00:07:18,220 --> 00:07:26,110
points to this tentative object next we

172
00:07:21,520 --> 00:07:28,599
created a new object y which sorry which

173
00:07:26,110 --> 00:07:31,930
is a we know for sure is of the type of

174
00:07:28,600 --> 00:07:37,060
my class and we know<font color="#E5E5E5"> it's that it's a</font>

175
00:07:31,930 --> 00:07:41,050
few M is<font color="#CCCCCC"> for sure 0 then we take then we</font>

176
00:07:37,060 --> 00:07:43,330
derive from<font color="#CCCCCC"> X dot m and to generate a</font>

177
00:07:41,050 --> 00:07:47,710
new object you you is derived from a

178
00:07:43,330 --> 00:07:50,349
tented object so it's due tented next

179
00:07:47,710 --> 00:07:53,049
it's designed to<font color="#CCCCCC"> Y dot am now the Y</font>

180
00:07:50,350 --> 00:07:57,220
object which is the null object it's M

181
00:07:53,050 --> 00:08:00,700
points to you finally we come to a

182
00:07:57,220 --> 00:08:03,820
condition so it tested if<font color="#E5E5E5"> X is equal to</font>

183
00:08:00,700 --> 00:08:05,830
<font color="#CCCCCC">Y by definition here why is the non pas</font>

184
00:08:03,820 --> 00:08:08,290
object which is<font color="#E5E5E5"> created after the</font>

185
00:08:05,830 --> 00:08:10,780
execution and the<font color="#CCCCCC"> X is unknown object</font>

186
00:08:08,290 --> 00:08:13,750
which is exists before the exclusion so

187
00:08:10,780 --> 00:08:17,440
we can for<font color="#CCCCCC"> sure evaluate this condition</font>

188
00:08:13,750 --> 00:08:19,810
to true and it comes to the sink api

189
00:08:17,440 --> 00:08:22,120
which we checked and<font color="#E5E5E5"> a see</font><font color="#CCCCCC"> that there is</font>

190
00:08:19,810 --> 00:08:25,990
tented object going out of<font color="#CCCCCC"> the device</font>

191
00:08:22,120 --> 00:08:28,540
and<font color="#E5E5E5"> it's a leak so the approximated</font>

192
00:08:25,990 --> 00:08:30,250
<font color="#E5E5E5">exclusion as</font><font color="#CCCCCC"> i show you</font><font color="#E5E5E5"> this looks like</font>

193
00:08:28,540 --> 00:08:33,849
<font color="#CCCCCC">on a source code level but it's actually</font>

194
00:08:30,250 --> 00:08:36,280
running byte codes and have 15 rules

195
00:08:33,849 --> 00:08:38,680
<font color="#CCCCCC">them to manipulating the unknown object</font>

196
00:08:36,280 --> 00:08:41,799
representation we have roast the keep

197
00:08:38,679 --> 00:08:43,839
executing into a fan finds a leak it

198
00:08:41,799 --> 00:08:46,359
will report or the function is

199
00:08:43,840 --> 00:08:48,520
terminated with no leaks or it can

200
00:08:46,360 --> 00:08:50,680
encounter some unknown control flow

201
00:08:48,520 --> 00:08:53,480
conditions and the details can be found

202
00:08:50,680 --> 00:08:56,269
<font color="#E5E5E5">in the paper the reefs</font>

203
00:08:53,480 --> 00:08:58,399
out of the approximate execution engine

204
00:08:56,269 --> 00:09:00,560
is it first it has no<font color="#E5E5E5"> false-positive</font>

205
00:08:58,399 --> 00:09:03,380
because it's actually running this

206
00:09:00,560 --> 00:09:06,349
program it's like dynamic<font color="#E5E5E5"> analysis every</font>

207
00:09:03,380 --> 00:09:10,579
leaks we encountered will be true in the

208
00:09:06,350 --> 00:09:12,589
real execution and also can<font color="#CCCCCC"> 1% find all</font>

209
00:09:10,579 --> 00:09:16,160
the<font color="#E5E5E5"> deterministic leaks it terminates</font>

210
00:09:12,589 --> 00:09:19,010
the leaks means that if<font color="#CCCCCC"> there's no</font>

211
00:09:16,160 --> 00:09:21,230
conditions for those leaks and most most

212
00:09:19,010 --> 00:09:23,750
real-world leaks are like that and<font color="#CCCCCC"> the</font>

213
00:09:21,230 --> 00:09:28,010
<font color="#CCCCCC">for external inputs</font><font color="#E5E5E5"> dependence leaks we</font>

214
00:09:23,750 --> 00:09:30,620
might or might not find all of them so

215
00:09:28,010 --> 00:09:32,510
for evaluation we assess app audit in

216
00:09:30,620 --> 00:09:35,750
three perspectives we assess its

217
00:09:32,510 --> 00:09:37,430
correctness and its usability<font color="#E5E5E5"> the in</font>

218
00:09:35,750 --> 00:09:40,160
terms of and a message time and memory

219
00:09:37,430 --> 00:09:42,410
consumption and for correctness we use

220
00:09:40,160 --> 00:09:45,410
open data<font color="#E5E5E5"> and malware data set which</font>

221
00:09:42,410 --> 00:09:47,779
contains hours of<font color="#CCCCCC"> where characterize the</font>

222
00:09:45,410 --> 00:09:51,110
leaking behaviors and also use<font color="#CCCCCC"> to a</font>

223
00:09:47,779 --> 00:09:54,260
<font color="#E5E5E5">benchmark for the for the usability of</font>

224
00:09:51,110 --> 00:09:56,300
this tool we examine we use it on

225
00:09:54,260 --> 00:09:58,579
<font color="#CCCCCC">malware's as well as real-world</font>

226
00:09:56,300 --> 00:10:02,149
<font color="#E5E5E5">applications also we want to share</font><font color="#CCCCCC"> with</font>

227
00:09:58,579 --> 00:10:03,500
you some insights we find from the real

228
00:10:02,149 --> 00:10:06,769
leaks we found in<font color="#CCCCCC"> real world</font>

229
00:10:03,500 --> 00:10:09,290
applications firstly accuracy the

230
00:10:06,769 --> 00:10:11,779
malware<font color="#CCCCCC"> datasets contains over 1,000</font>

231
00:10:09,290 --> 00:10:14,480
samples and we are comparing about it

232
00:10:11,779 --> 00:10:16,639
with the other two static analysis tool

233
00:10:14,480 --> 00:10:19,370
app intent is symbolic execution based

234
00:10:16,639 --> 00:10:21,800
<font color="#CCCCCC">and a flow joe is flow graph based so</font>

235
00:10:19,370 --> 00:10:25,399
you can see that<font color="#E5E5E5"> a pod italy is leading</font>

236
00:10:21,800 --> 00:10:28,219
the accuracy in this game and we have

237
00:10:25,399 --> 00:10:30,560
missing point seven percent are all

238
00:10:28,220 --> 00:10:33,199
false negatives they are all external

239
00:10:30,560 --> 00:10:36,018
input dependent leaks they're typically

240
00:10:33,199 --> 00:10:38,750
there is a malfunction which pins a

241
00:10:36,019 --> 00:10:42,079
phone number then which waits for its a

242
00:10:38,750 --> 00:10:44,300
call<font color="#E5E5E5"> back and then lift its data things</font>

243
00:10:42,079 --> 00:10:46,399
that analysis is done without the

244
00:10:44,300 --> 00:10:49,250
knowledge of<font color="#CCCCCC"> the external sources so</font>

245
00:10:46,399 --> 00:10:53,750
that's the false<font color="#CCCCCC"> negative</font><font color="#E5E5E5"> I want to</font>

246
00:10:49,250 --> 00:10:56,209
highlight a dis- case in<font color="#CCCCCC"> a dis- case</font>

247
00:10:53,750 --> 00:10:58,880
<font color="#E5E5E5">while both</font><font color="#CCCCCC"> of the previous tools</font>

248
00:10:56,209 --> 00:11:02,000
marketed as a false positive only a<font color="#E5E5E5"> poor</font>

249
00:10:58,880 --> 00:11:05,120
it<font color="#E5E5E5"> is I successfully identify it as a</font>

250
00:11:02,000 --> 00:11:07,290
true negative so this case works like

251
00:11:05,120 --> 00:11:10,259
this so this malware will

252
00:11:07,290 --> 00:11:13,920
as a configuration file which is

253
00:11:10,259 --> 00:11:16,740
encrypted by a customer<font color="#E5E5E5"> dsds with the</font>

254
00:11:13,920 --> 00:11:19,560
hard-coded private key it returns a

255
00:11:16,740 --> 00:11:22,829
string then it pass it and generate a

256
00:11:19,560 --> 00:11:25,709
obtain a list of URLs that it will send

257
00:11:22,829 --> 00:11:28,079
to this your sensitive data<font color="#E5E5E5"> to however</font>

258
00:11:25,709 --> 00:11:31,138
this specific case has a malformed that

259
00:11:28,079 --> 00:11:34,469
configuration file<font color="#E5E5E5"> after passing</font><font color="#CCCCCC"> it it</font>

260
00:11:31,139 --> 00:11:37,170
gets no urls so there's no leaks will

261
00:11:34,470 --> 00:11:39,420
happen in real and only<font color="#E5E5E5"> by doing a</font>

262
00:11:37,170 --> 00:11:43,050
proximate exclusion we will run<font color="#E5E5E5"> it and</font>

263
00:11:39,420 --> 00:11:44,610
we decode this conclusion<font color="#CCCCCC"> filed perform</font>

264
00:11:43,050 --> 00:11:48,839
all the passing we know<font color="#E5E5E5"> that there's</font>

265
00:11:44,610 --> 00:11:51,660
there won't<font color="#E5E5E5"> be leaks at all so for the</font>

266
00:11:48,839 --> 00:11:53,970
<font color="#CCCCCC">use</font><font color="#E5E5E5"> front for the usability side we</font>

267
00:11:51,660 --> 00:11:56,610
first assessed the analysis time for app

268
00:11:53,970 --> 00:11:58,889
intent it's not publicly available we

269
00:11:56,610 --> 00:12:00,600
only reference it's the results from

270
00:11:58,889 --> 00:12:03,720
their paper and we have no results on

271
00:12:00,600 --> 00:12:05,730
the real world apps it's<font color="#E5E5E5"> way beyond one</font>

272
00:12:03,720 --> 00:12:09,149
hour it's out of the scope of the

273
00:12:05,730 --> 00:12:11,670
competition for flow joy deported both

274
00:12:09,149 --> 00:12:13,980
of them perform faster on mowers because

275
00:12:11,670 --> 00:12:18,120
mowers are smaller than real world app

276
00:12:13,980 --> 00:12:20,310
apps and if for flu<font color="#CCCCCC"> joyed when it</font>

277
00:12:18,120 --> 00:12:22,980
encounters<font color="#CCCCCC"> real-world</font><font color="#E5E5E5"> applications it</font>

278
00:12:20,310 --> 00:12:24,989
takes more than minutes to exam each of

279
00:12:22,980 --> 00:12:28,529
them you know well I don't<font color="#E5E5E5"> think</font><font color="#CCCCCC"> mobile</font>

280
00:12:24,990 --> 00:12:31,560
user can stand that around<font color="#E5E5E5"> two to get</font>

281
00:12:28,529 --> 00:12:34,050
<font color="#E5E5E5">this result about it it returns</font>

282
00:12:31,560 --> 00:12:36,750
immediately when examining mowers and

283
00:12:34,050 --> 00:12:40,380
also for relapse it takes<font color="#E5E5E5"> around five</font>

284
00:12:36,750 --> 00:12:43,139
seconds each on the memory card side and

285
00:12:40,380 --> 00:12:45,060
the<font color="#CCCCCC"> both of the static tools our whole</font>

286
00:12:43,139 --> 00:12:47,310
program analysis they maintain large

287
00:12:45,060 --> 00:12:51,089
analysis data structure<font color="#CCCCCC"> of the entire</font>

288
00:12:47,310 --> 00:12:53,910
program it's according<font color="#CCCCCC"> to their paper</font>

289
00:12:51,089 --> 00:12:58,260
and also our evaluation they<font color="#CCCCCC"> take</font>

290
00:12:53,910 --> 00:13:00,510
several gigabytes to examine per ad for

291
00:12:58,260 --> 00:13:02,310
a broad it is exclusion based it's<font color="#E5E5E5"> not</font>

292
00:13:00,510 --> 00:13:04,410
whole program analysis so it takes

293
00:13:02,310 --> 00:13:08,219
<font color="#E5E5E5">around two hundred megabytes for each</font>

294
00:13:04,410 --> 00:13:10,199
for each app at most and we claim we

295
00:13:08,220 --> 00:13:12,870
argue that<font color="#E5E5E5"> the airport it is only</font>

296
00:13:10,199 --> 00:13:16,859
solution which is practical for running

297
00:13:12,870 --> 00:13:19,170
on a mobile device right now finally I

298
00:13:16,860 --> 00:13:20,940
want<font color="#E5E5E5"> to share with you some real leaks</font>

299
00:13:19,170 --> 00:13:24,630
we found in real water

300
00:13:20,940 --> 00:13:26,820
we examd 400 relapse and we find 330

301
00:13:24,630 --> 00:13:30,110
data leaks all of them<font color="#E5E5E5"> are manually</font>

302
00:13:26,820 --> 00:13:33,060
confirmed and there is no<font color="#E5E5E5"> false positive</font>

303
00:13:30,110 --> 00:13:34,710
the the detail the list is in the<font color="#E5E5E5"> paper</font>

304
00:13:33,060 --> 00:13:37,319
but<font color="#CCCCCC"> I would just want to show you some</font>

305
00:13:34,710 --> 00:13:40,110
insights of them so all of these leaks

306
00:13:37,320 --> 00:13:42,480
combined has<font color="#E5E5E5"> half-billion-dollar in</font>

307
00:13:40,110 --> 00:13:47,070
stores and<font color="#E5E5E5"> I personally have some of</font>

308
00:13:42,480 --> 00:13:48,900
them install my device so first we want

309
00:13:47,070 --> 00:13:51,300
<font color="#E5E5E5">to take a</font><font color="#CCCCCC"> look at what component whats</font>

310
00:13:48,900 --> 00:13:54,260
app components actually leads the most

311
00:13:51,300 --> 00:13:57,300
we find out the<font color="#E5E5E5"> answer is to add at</font>

312
00:13:54,260 --> 00:14:00,630
library and when we<font color="#E5E5E5"> look at the privacy</font>

313
00:13:57,300 --> 00:14:03,120
policy<font color="#CCCCCC"> of these apps only a few of them</font>

314
00:14:00,630 --> 00:14:05,460
mentioned third-party libraries so this

315
00:14:03,120 --> 00:14:07,800
makes a case for developers to use app

316
00:14:05,460 --> 00:14:10,620
auditing to check their apps before

317
00:14:07,800 --> 00:14:15,150
releasing them to get<font color="#E5E5E5"> to know what</font><font color="#CCCCCC"> your</font>

318
00:14:10,620 --> 00:14:17,430
as library are doing<font color="#E5E5E5"> next we examd the</font>

319
00:14:15,150 --> 00:14:19,770
sources of<font color="#E5E5E5"> the data leaks real wood apps</font>

320
00:14:17,430 --> 00:14:21,719
we will leave three kinds of data two of

321
00:14:19,770 --> 00:14:24,180
them are tracking tokens and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> last</font>

322
00:14:21,720 --> 00:14:28,830
<font color="#E5E5E5">one is</font><font color="#CCCCCC"> the location we</font><font color="#E5E5E5"> although we</font>

323
00:14:24,180 --> 00:14:31,140
checked around 15 kinds of leaks tents

324
00:14:28,830 --> 00:14:33,600
the only<font color="#CCCCCC"> Tsar the only three funding</font>

325
00:14:31,140 --> 00:14:36,650
real world app it makes sense that as

326
00:14:33,600 --> 00:14:40,530
library once you use them to to how to

327
00:14:36,650 --> 00:14:43,079
customer lies<font color="#CCCCCC"> their ass finally the</font>

328
00:14:40,530 --> 00:14:45,180
values of those leaks we surprisingly

329
00:14:43,080 --> 00:14:47,820
fund lots of those leaks are planned

330
00:14:45,180 --> 00:14:50,130
test HTTP<font color="#CCCCCC"> requests they are not included</font>

331
00:14:47,820 --> 00:14:53,370
<font color="#CCCCCC">everyone</font><font color="#E5E5E5"> on the network can see your</font>

332
00:14:50,130 --> 00:14:56,700
data encoded in our URL and<font color="#CCCCCC"> a future of</font>

333
00:14:53,370 --> 00:15:01,880
them are using<font color="#CCCCCC"> your</font><font color="#E5E5E5"> HTTPS and the HTTP</font>

334
00:14:56,700 --> 00:15:05,490
is a dominant way of doing these leaks

335
00:15:01,880 --> 00:15:07,920
so these readouts the sturdy data leaks

336
00:15:05,490 --> 00:15:11,010
are discussing the paper we<font color="#CCCCCC"> have set up</font>

337
00:15:07,920 --> 00:15:15,089
<font color="#CCCCCC">a</font><font color="#E5E5E5"> cloud scanning infrastructure about a</font>

338
00:15:11,010 --> 00:15:17,250
tile we now<font color="#E5E5E5"> have scanned over 140,000</font>

339
00:15:15,089 --> 00:15:20,700
apps and we have uncovered more than

340
00:15:17,250 --> 00:15:23,280
8,000 data leaks it takes us slightly

341
00:15:20,700 --> 00:15:27,290
less than<font color="#CCCCCC"> two days to finish all of them</font>

342
00:15:23,280 --> 00:15:31,050
with three million class blade servers

343
00:15:27,290 --> 00:15:33,480
<font color="#CCCCCC">the walking progress we have we want to</font>

344
00:15:31,050 --> 00:15:34,380
improve<font color="#CCCCCC"> this tool towards more auditing</font>

345
00:15:33,480 --> 00:15:36,390
details for

346
00:15:34,380 --> 00:15:38,790
sample want to inform the user when this

347
00:15:36,390 --> 00:15:42,120
leak will happen for example we click on

348
00:15:38,790 --> 00:15:43,500
button then something will leaked we

349
00:15:42,120 --> 00:15:45,720
will provide that information in the

350
00:15:43,500 --> 00:15:49,080
future version also<font color="#CCCCCC"> we are working on</font>

351
00:15:45,720 --> 00:15:51,570
the mobile<font color="#CCCCCC"> and a developer tools side to</font>

352
00:15:49,080 --> 00:15:56,190
make<font color="#E5E5E5"> a part it's more useful for more</font>

353
00:15:51,570 --> 00:15:58,350
users and I do have a simple and enjoy

354
00:15:56,190 --> 00:16:00,570
port for the app audit or it's running

355
00:15:58,350 --> 00:16:03,090
on my Nexus 5 tool but it's still too

356
00:16:00,570 --> 00:16:04,920
ugly to show you guys<font color="#E5E5E5"> or to skip that if</font>

357
00:16:03,090 --> 00:16:08,370
you're interested you<font color="#E5E5E5"> can come to me</font>

358
00:16:04,920 --> 00:16:11,490
<font color="#E5E5E5">after the talk and the here it's the</font>

359
00:16:08,370 --> 00:16:14,250
look<font color="#E5E5E5"> of look at the ipod adult ayos</font>

360
00:16:11,490 --> 00:16:16,650
results and we have three cases which

361
00:16:14,250 --> 00:16:19,140
has all data leaks and we also check

362
00:16:16,650 --> 00:16:21,750
with virustotal and a check with that

363
00:16:19,140 --> 00:16:25,130
there are permissions and<font color="#E5E5E5"> that concludes</font>

364
00:16:21,750 --> 00:16:25,130
my talk thank you very much

365
00:16:29,209 --> 00:16:38,638
x 44 time for<font color="#E5E5E5"> some questions oh sorry</font><font color="#CCCCCC"> I</font>

366
00:16:35,220 --> 00:16:40,860
do<font color="#E5E5E5"> have a Q&A list which is</font><font color="#CCCCCC"> if you</font>

367
00:16:38,639 --> 00:16:49,860
happen<font color="#CCCCCC"> to ops one of them you tell</font><font color="#E5E5E5"> me</font>

368
00:16:40,860 --> 00:16:52,139
the number you see that's great<font color="#E5E5E5"> ok so</font>

369
00:16:49,860 --> 00:16:54,350
<font color="#E5E5E5">I'll show</font><font color="#CCCCCC"> ya ever</font><font color="#E5E5E5"> ninth question if</font>

370
00:16:52,139 --> 00:16:57,209
you're mine I'm JP from<font color="#CCCCCC"> EPFL</font><font color="#E5E5E5"> sweets on</font>

371
00:16:54,350 --> 00:17:00,989
the question is are following the very

372
00:16:57,209 --> 00:17:02,758
notion of leak is actually this is<font color="#CCCCCC"> may</font>

373
00:17:00,989 --> 00:17:06,329
be<font color="#E5E5E5"> relatively close to a question tuba</font>

374
00:17:02,759 --> 00:17:10,649
city with a different flavor depending

375
00:17:06,329 --> 00:17:15,089
<font color="#CCCCCC">on</font><font color="#E5E5E5"> the context in which a user is he or</font>

376
00:17:10,648 --> 00:17:17,609
she<font color="#CCCCCC"> will be destroyed or not of having</font>

377
00:17:15,089 --> 00:17:21,270
the information lead right will depend

378
00:17:17,609 --> 00:17:22,948
essentially on what circumstances you

379
00:17:21,270 --> 00:17:27,089
know the location the time of the day

380
00:17:22,949 --> 00:17:29,250
with whom the person is<font color="#CCCCCC"> etc so</font><font color="#E5E5E5"> um so</font><font color="#CCCCCC"> how</font>

381
00:17:27,089 --> 00:17:32,399
do you take do you do you take the

382
00:17:29,250 --> 00:17:33,990
dimension into account some way yeah

383
00:17:32,399 --> 00:17:36,689
that's a good question currently our

384
00:17:33,990 --> 00:17:38,899
tour it's now<font color="#CCCCCC"> teta it's not in the scope</font>

385
00:17:36,690 --> 00:17:42,559
but we have some thoughts on that and

386
00:17:38,899 --> 00:17:45,899
this the subjective needs of leaks are

387
00:17:42,559 --> 00:17:49,020
quite hard to characterize in real but

388
00:17:45,899 --> 00:17:53,129
for example the external input dependent

389
00:17:49,020 --> 00:17:55,408
leaks<font color="#E5E5E5"> there rely on some external inputs</font>

390
00:17:53,130 --> 00:17:57,720
and they say well if it is from a

391
00:17:55,409 --> 00:17:59,880
<font color="#E5E5E5">trusted source then you think it might</font>

392
00:17:57,720 --> 00:18:03,510
not<font color="#CCCCCC"> be leaking your privacy if it is</font>

393
00:17:59,880 --> 00:18:06,960
from some unknown networks then it's a

394
00:18:03,510 --> 00:18:11,370
leak so it's a hard question but we want

395
00:18:06,960 --> 00:18:13,080
<font color="#E5E5E5">to we have some sauce on it in a for</font>

396
00:18:11,370 --> 00:18:15,449
example<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> provide a white list of</font>

397
00:18:13,080 --> 00:18:19,980
those external sources so if for example

398
00:18:15,450 --> 00:18:23,120
is if it is from well-known like the<font color="#E5E5E5"> the</font>

399
00:18:19,980 --> 00:18:25,950
cat your carrier or<font color="#E5E5E5"> your the well-known</font>

400
00:18:23,120 --> 00:18:29,668
trusted website and then it's not<font color="#E5E5E5"> a leak</font>

401
00:18:25,950 --> 00:18:31,289
otherwise then it could be right<font color="#CCCCCC"> okay</font>

402
00:18:29,669 --> 00:18:33,000
<font color="#E5E5E5">we'll also be interested in question</font><font color="#CCCCCC"> six</font>

403
00:18:31,289 --> 00:18:35,090
<font color="#E5E5E5">monday we should leave a time for the</font>

404
00:18:33,000 --> 00:18:35,090
other

405
00:18:36,080 --> 00:18:43,070
hung in from Syracuse University so my

406
00:18:39,110 --> 00:18:45,799
<font color="#CCCCCC">question is about the entry apps is</font>

407
00:18:43,070 --> 00:18:48,590
unique in terms of the multi entry

408
00:18:45,799 --> 00:18:50,899
<font color="#E5E5E5">points and</font><font color="#CCCCCC"> there some activity can only</font>

409
00:18:48,590 --> 00:18:54,408
be triggered by in intense and system

410
00:18:50,899 --> 00:18:59,320
events so do you<font color="#CCCCCC"> have particular</font>

411
00:18:54,409 --> 00:19:02,720
handling to trigger certain you know

412
00:18:59,320 --> 00:19:04,279
entry points and this start to ask you

413
00:19:02,720 --> 00:19:06,460
to or not because<font color="#CCCCCC"> if you don't do that</font>

414
00:19:04,279 --> 00:19:09,799
you're definitely cause force negatives

415
00:19:06,460 --> 00:19:11,990
<font color="#CCCCCC">Thanks we do have handling of those</font>

416
00:19:09,799 --> 00:19:14,090
cases we have to we have<font color="#CCCCCC"> the handle my</font>

417
00:19:11,990 --> 00:19:16,190
balls in the static part also in the

418
00:19:14,090 --> 00:19:19,428
dynamic<font color="#E5E5E5"> part in a static part we will</font>

419
00:19:16,190 --> 00:19:22,460
complement the we will extend<font color="#E5E5E5"> the call</font>

420
00:19:19,429 --> 00:19:24,980
graph in terms of those intense receiver

421
00:19:22,460 --> 00:19:28,010
and the life cycles and at the dynamic

422
00:19:24,980 --> 00:19:29,929
part we will emulate what enjoy will do

423
00:19:28,010 --> 00:19:32,720
for those callbacks for example<font color="#E5E5E5"> you're</font>

424
00:19:29,929 --> 00:19:34,909
<font color="#E5E5E5">clicking on a button then the callback</font>

425
00:19:32,720 --> 00:19:40,899
will be scheduled and we will execute it

426
00:19:34,909 --> 00:19:40,899
just like real executions<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> extinct</font>

427
00:19:42,039 --> 00:19:48,379
<font color="#E5E5E5">epic tale since Posada University I</font>

428
00:19:44,870 --> 00:19:51,139
guess it's a<font color="#CCCCCC"> follow-up question so I was</font>

429
00:19:48,380 --> 00:19:53,720
<font color="#CCCCCC">wondering how can you distinguish</font><font color="#E5E5E5"> dead</font>

430
00:19:51,139 --> 00:19:56,059
code from code that's actually reachable

431
00:19:53,720 --> 00:19:58,070
so for instance and<font color="#E5E5E5"> third-party</font>

432
00:19:56,059 --> 00:20:00,139
libraries you have a lot of functions

433
00:19:58,070 --> 00:20:02,629
where it's only a small fraction of

434
00:20:00,139 --> 00:20:07,689
these functions<font color="#CCCCCC"> is reused in the app and</font>

435
00:20:02,630 --> 00:20:11,360
if you have some arm leakage within this

436
00:20:07,690 --> 00:20:14,409
yeah within this<font color="#E5E5E5"> third-party library how</font>

437
00:20:11,360 --> 00:20:18,199
can<font color="#CCCCCC"> you be sure that this is really</font>

438
00:20:14,409 --> 00:20:20,990
executed yeah that's a good question so

439
00:20:18,200 --> 00:20:24,440
um yeah I agree there a lot<font color="#CCCCCC"> of dead code</font>

440
00:20:20,990 --> 00:20:28,490
is not at<font color="#CCCCCC"> all code by the by this some</font>

441
00:20:24,440 --> 00:20:31,070
by the application so but consider two

442
00:20:28,490 --> 00:20:33,289
cases for example first you receive an

443
00:20:31,070 --> 00:20:36,168
intent and you will have triggered all

444
00:20:33,289 --> 00:20:39,639
this life cycle method of Android so we

445
00:20:36,169 --> 00:20:42,409
can have a rich ability test to see how

446
00:20:39,639 --> 00:20:44,899
open to see if the some code will be

447
00:20:42,409 --> 00:20:47,210
reached that's the first case on the

448
00:20:44,899 --> 00:20:49,299
second case if the phone if the app has

449
00:20:47,210 --> 00:20:52,149
the reflection call

450
00:20:49,299 --> 00:20:55,360
then that coat might be called in some

451
00:20:52,149 --> 00:20:57,639
cases so we cannot firmly say what<font color="#CCCCCC"> that</font>

452
00:20:55,360 --> 00:20:59,918
code is<font color="#E5E5E5"> will never be touched at all if</font>

453
00:20:57,639 --> 00:21:02,590
we have<font color="#E5E5E5"> reflections and that that's not</font>

454
00:20:59,919 --> 00:21:06,129
uncommon in android apps yeah but<font color="#CCCCCC"> I was</font>

455
00:21:02,590 --> 00:21:09,009
<font color="#CCCCCC">thinking more like virtual method calls</font>

456
00:21:06,129 --> 00:21:12,879
for instance you have a very imp resize

457
00:21:09,009 --> 00:21:15,869
<font color="#E5E5E5">coil craft which you say</font><font color="#CCCCCC"> ok if</font><font color="#E5E5E5"> there's a</font>

458
00:21:12,879 --> 00:21:19,509
virtual method call then<font color="#E5E5E5"> you assume that</font>

459
00:21:15,869 --> 00:21:24,939
<font color="#E5E5E5">it could</font><font color="#CCCCCC"> be any class</font><font color="#E5E5E5"> that's that could</font>

460
00:21:19,509 --> 00:21:27,429
be the receiver and if<font color="#CCCCCC"> you have if you</font>

461
00:21:24,940 --> 00:21:30,129
would have an more precise coilcraft

462
00:21:27,429 --> 00:21:33,340
with some type inference you could

463
00:21:30,129 --> 00:21:35,769
eliminate those false positives well

464
00:21:33,340 --> 00:21:37,269
that's a trade-off so we really want to

465
00:21:35,769 --> 00:21:39,399
<font color="#E5E5E5">make call graph simple as possible</font>

466
00:21:37,269 --> 00:21:42,609
because we have the dynamic analysis to

467
00:21:39,399 --> 00:21:44,649
exam that and while we have<font color="#E5E5E5"> seen</font>

468
00:21:42,609 --> 00:21:47,649
previous work for example<font color="#CCCCCC"> flow joyed it</font>

469
00:21:44,649 --> 00:21:50,049
has a really accurate flow graph to

470
00:21:47,649 --> 00:21:52,479
model all those calling<font color="#E5E5E5"> and also data</font>

471
00:21:50,049 --> 00:21:54,940
flow and control flow transitions but we

472
00:21:52,480 --> 00:21:57,519
we are a different trade-offs pace as

473
00:21:54,940 --> 00:22:01,529
compared to those cases<font color="#E5E5E5"> ok so thank you</font>

474
00:21:57,519 --> 00:22:01,529
<font color="#E5E5E5">thanks all right</font>

