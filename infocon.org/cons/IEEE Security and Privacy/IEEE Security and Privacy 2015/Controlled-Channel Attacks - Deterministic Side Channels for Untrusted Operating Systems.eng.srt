1
00:00:00,650 --> 00:00:04,640
hello everyone today<font color="#CCCCCC"> I'm gonna</font><font color="#E5E5E5"> talk</font>

2
00:00:03,060 --> 00:00:06,569
<font color="#CCCCCC">about control channel attacks</font>

3
00:00:04,640 --> 00:00:08,010
<font color="#CCCCCC">deterministic side channels for</font>

4
00:00:06,569 --> 00:00:10,350
untrusted operating systems

5
00:00:08,010 --> 00:00:11,910
this work was partly<font color="#E5E5E5"> done when I was</font><font color="#CCCCCC"> an</font>

6
00:00:10,350 --> 00:00:17,189
intern<font color="#E5E5E5"> last summer at Microsoft Research</font>

7
00:00:11,910 --> 00:00:19,350
<font color="#E5E5E5">with we don't sway and</font><font color="#CCCCCC"> marks venado in a</font>

8
00:00:17,190 --> 00:00:21,990
<font color="#CCCCCC">table</font><font color="#E5E5E5"> computer system applications run</font>

9
00:00:19,350 --> 00:00:23,940
on<font color="#E5E5E5"> top of a burning system</font><font color="#CCCCCC"> and the OS</font>

10
00:00:21,990 --> 00:00:26,759
has been considered<font color="#E5E5E5"> a software root of</font>

11
00:00:23,940 --> 00:00:29,190
trust<font color="#E5E5E5"> however they are often reasons why</font>

12
00:00:26,760 --> 00:00:32,070
we don't want to trust the OS first

13
00:00:29,190 --> 00:00:34,140
<font color="#E5E5E5">let's see a commodity urban systems have</font>

14
00:00:32,070 --> 00:00:36,150
<font color="#CCCCCC">very large code bases and people have</font>

15
00:00:34,140 --> 00:00:38,489
<font color="#CCCCCC">found</font><font color="#E5E5E5"> endless security bugs in them</font>

16
00:00:36,150 --> 00:00:40,410
<font color="#E5E5E5">these bugs will leave vulnerabilities in</font>

17
00:00:38,489 --> 00:00:43,169
the system<font color="#E5E5E5"> which might enable some</font>

18
00:00:40,410 --> 00:00:45,870
<font color="#E5E5E5">external attacker to install the rootkit</font>

19
00:00:43,170 --> 00:00:50,220
<font color="#E5E5E5">into your system that steals the users</font>

20
00:00:45,870 --> 00:00:52,230
data in<font color="#E5E5E5"> a different scenario</font><font color="#CCCCCC"> suppose the</font>

21
00:00:50,220 --> 00:00:54,870
user or company wants<font color="#CCCCCC"> to create a</font>

22
00:00:52,230 --> 00:00:57,930
website<font color="#E5E5E5"> today is increasingly</font><font color="#CCCCCC"> popular</font>

23
00:00:54,870 --> 00:01:00,540
that he will just use<font color="#E5E5E5"> just just run a</font>

24
00:00:57,930 --> 00:01:03,660
web server on<font color="#E5E5E5"> a cloud service in this</font>

25
00:01:00,540 --> 00:01:07,408
case the cloud provider has full<font color="#CCCCCC"> control</font>

26
00:01:03,660 --> 00:01:09,060
over<font color="#E5E5E5"> the</font><font color="#CCCCCC"> option system</font><font color="#E5E5E5"> running in it but</font>

27
00:01:07,409 --> 00:01:13,499
if the cloud provider is either

28
00:01:09,060 --> 00:01:16,770
malicious<font color="#CCCCCC"> or compromised you</font><font color="#E5E5E5"> can abuse</font>

29
00:01:13,499 --> 00:01:18,529
<font color="#CCCCCC">this control</font><font color="#E5E5E5"> to steal the users data in</font>

30
00:01:16,770 --> 00:01:20,789
order<font color="#CCCCCC"> to solve these problems</font>

31
00:01:18,529 --> 00:01:23,908
<font color="#CCCCCC">researchers have proposed</font><font color="#E5E5E5"> several</font>

32
00:01:20,789 --> 00:01:26,999
systems<font color="#E5E5E5"> to remove the operating system</font>

33
00:01:23,909 --> 00:01:29,909
from the trusted computing<font color="#E5E5E5"> base they we</font>

34
00:01:26,999 --> 00:01:32,579
we use<font color="#E5E5E5"> a term shielding system to refer</font>

35
00:01:29,909 --> 00:01:34,770
to<font color="#E5E5E5"> these type of systems and they</font>

36
00:01:32,579 --> 00:01:37,318
typically<font color="#E5E5E5"> use</font><font color="#CCCCCC"> a hypervisor as an awesome</font>

37
00:01:34,770 --> 00:01:39,329
secure hardware<font color="#E5E5E5"> to confine the OS such</font>

38
00:01:37,319 --> 00:01:41,459
that the applications are shielded from

39
00:01:39,329 --> 00:01:44,309
<font color="#E5E5E5">the potentially malicious</font><font color="#CCCCCC"> hopping system</font>

40
00:01:41,459 --> 00:01:46,139
for example<font color="#CCCCCC"> overshadow</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> intact</font><font color="#E5E5E5"> are</font>

41
00:01:44,310 --> 00:01:48,389
hyper<font color="#E5E5E5"> observed based and</font><font color="#CCCCCC"> shipping</font>

42
00:01:46,139 --> 00:01:51,839
<font color="#E5E5E5">systems while Haven is a relatively new</font>

43
00:01:48,389 --> 00:01:54,899
<font color="#E5E5E5">system based on as</font><font color="#CCCCCC"> interest reacts a 3x</font>

44
00:01:51,840 --> 00:01:59,029
is a new secure security feature

45
00:01:54,899 --> 00:02:02,130
proposed by<font color="#E5E5E5"> Intel voice and future</font><font color="#CCCCCC"> CPUs</font>

46
00:01:59,029 --> 00:02:04,770
one of one<font color="#E5E5E5"> of the key protections they</font>

47
00:02:02,130 --> 00:02:07,408
provide is to<font color="#CCCCCC"> product</font><font color="#E5E5E5"> the application</font>

48
00:02:04,770 --> 00:02:09,539
memory pages from the OS<font color="#E5E5E5"> and guarantee</font>

49
00:02:07,409 --> 00:02:13,520
both secrecy and integrity for these

50
00:02:09,539 --> 00:02:16,299
pages<font color="#E5E5E5"> that means the OS can't steal or</font>

51
00:02:13,520 --> 00:02:19,820
temper with the data<font color="#E5E5E5"> inside these pages</font>

52
00:02:16,300 --> 00:02:23,390
<font color="#E5E5E5">another important feature for</font><font color="#CCCCCC"> these</font>

53
00:02:19,820 --> 00:02:25,070
<font color="#E5E5E5">showing system is that the supports run</font>

54
00:02:23,390 --> 00:02:26,989
legacy applications on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> legacy</font>

55
00:02:25,070 --> 00:02:29,840
<font color="#E5E5E5">operating system with very small or even</font>

56
00:02:26,990 --> 00:02:31,790
<font color="#E5E5E5">no modifications the OS is not</font>

57
00:02:29,840 --> 00:02:35,090
eliminated from the software stack

58
00:02:31,790 --> 00:02:37,549
instead<font color="#E5E5E5"> is still needed</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> some core</font>

59
00:02:35,090 --> 00:02:40,910
functionalities<font color="#E5E5E5"> and such as resource</font>

60
00:02:37,550 --> 00:02:42,290
management<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> because the OS</font><font color="#CCCCCC"> is</font>

61
00:02:40,910 --> 00:02:44,720
supposed to<font color="#E5E5E5"> run many applications</font>

62
00:02:42,290 --> 00:02:47,630
efficiently and the<font color="#E5E5E5"> result</font><font color="#CCCCCC"> management is</font>

63
00:02:44,720 --> 00:02:51,530
a non-trivial task in this case in

64
00:02:47,630 --> 00:02:53,329
particular with shooting systems the OS

65
00:02:51,530 --> 00:02:55,010
<font color="#E5E5E5">is still responsible</font><font color="#CCCCCC"> for memory</font>

66
00:02:53,330 --> 00:02:57,350
management<font color="#E5E5E5"> even for particular</font>

67
00:02:55,010 --> 00:02:59,209
applications<font color="#CCCCCC"> it's responsible for</font>

68
00:02:57,350 --> 00:03:02,540
managing the page tables of all the

69
00:02:59,210 --> 00:03:04,640
<font color="#CCCCCC">protected</font><font color="#E5E5E5"> applications but the</font><font color="#CCCCCC"> schilling</font>

70
00:03:02,540 --> 00:03:07,900
<font color="#E5E5E5">system will likely add some integrity</font>

71
00:03:04,640 --> 00:03:11,839
<font color="#E5E5E5">checks on average</font><font color="#CCCCCC"> the page table updates</font>

72
00:03:07,900 --> 00:03:13,730
now with<font color="#CCCCCC"> shielding systems</font><font color="#E5E5E5"> all your</font>

73
00:03:11,840 --> 00:03:15,740
applications<font color="#CCCCCC"> are protected from the</font>

74
00:03:13,730 --> 00:03:17,660
potentially malicious<font color="#E5E5E5"> operating system</font>

75
00:03:15,740 --> 00:03:20,570
<font color="#E5E5E5">and they still</font><font color="#CCCCCC"> enjoy the rich</font>

76
00:03:17,660 --> 00:03:23,120
functionality<font color="#CCCCCC"> is provided by the organ</font>

77
00:03:20,570 --> 00:03:25,010
system however<font color="#E5E5E5"> in this talk I'm</font><font color="#CCCCCC"> going to</font>

78
00:03:23,120 --> 00:03:27,500
<font color="#E5E5E5">show</font><font color="#CCCCCC"> you that existing shooting systems</font>

79
00:03:25,010 --> 00:03:31,190
are insufficient to<font color="#E5E5E5"> provide the security</font>

80
00:03:27,500 --> 00:03:34,220
<font color="#E5E5E5">guarantees they claim here are some</font>

81
00:03:31,190 --> 00:03:37,640
<font color="#E5E5E5">highlights of our results first suppose</font>

82
00:03:34,220 --> 00:03:40,490
the user has a secret<font color="#CCCCCC"> a</font><font color="#E5E5E5"> treasure map in</font>

83
00:03:37,640 --> 00:03:42,049
a JPEG format in<font color="#E5E5E5"> order to display it he</font>

84
00:03:40,490 --> 00:03:47,270
has to decode<font color="#E5E5E5"> it using some standard</font>

85
00:03:42,050 --> 00:03:49,760
library<font color="#E5E5E5"> like the late</font><font color="#CCCCCC"> JPEG</font><font color="#E5E5E5"> and we found</font>

86
00:03:47,270 --> 00:03:51,890
that even<font color="#E5E5E5"> if he runs the data coding in</font>

87
00:03:49,760 --> 00:03:55,870
a particular application<font color="#CCCCCC"> the malicious</font>

88
00:03:51,890 --> 00:03:59,029
OS can<font color="#E5E5E5"> still learn a sketch of the image</font>

89
00:03:55,870 --> 00:04:02,630
from<font color="#E5E5E5"> where you concluded clearly see the</font>

90
00:03:59,030 --> 00:04:04,400
<font color="#E5E5E5">destination of the chart and second</font>

91
00:04:02,630 --> 00:04:07,730
suppose the user<font color="#E5E5E5"> got a secret message</font>

92
00:04:04,400 --> 00:04:10,190
<font color="#CCCCCC">and he wants to display it using some</font>

93
00:04:07,730 --> 00:04:12,829
<font color="#E5E5E5">funky rendering</font><font color="#CCCCCC"> library like freetype we</font>

94
00:04:10,190 --> 00:04:14,570
found that that<font color="#E5E5E5"> OS can actually</font>

95
00:04:12,830 --> 00:04:18,739
reconstruct the whole message<font color="#E5E5E5"> with</font>

96
00:04:14,570 --> 00:04:21,168
perfect accuracy<font color="#E5E5E5"> and last so</font><font color="#CCCCCC"> will the</font>

97
00:04:18,738 --> 00:04:23,960
user want to spellcheck<font color="#E5E5E5"> a text file</font>

98
00:04:21,168 --> 00:04:26,219
using<font color="#E5E5E5"> tools like Huntsville we found</font>

99
00:04:23,960 --> 00:04:27,840
<font color="#CCCCCC">that at the OS can actually</font>

100
00:04:26,220 --> 00:04:29,730
reconstruct most of the words in a

101
00:04:27,840 --> 00:04:33,140
document<font color="#CCCCCC"> although some words have the</font>

102
00:04:29,730 --> 00:04:36,120
affix is removed we in our experiment we

103
00:04:33,140 --> 00:04:39,150
<font color="#E5E5E5">spellcheck the entire</font><font color="#CCCCCC"> novel</font><font color="#E5E5E5"> Wizard of Oz</font>

104
00:04:36,120 --> 00:04:42,960
<font color="#E5E5E5">we found that hacker can get around 96%</font>

105
00:04:39,150 --> 00:04:45,750
<font color="#E5E5E5">of accuracy so it must wonder how we</font>

106
00:04:42,960 --> 00:04:49,349
could achieve this the short answer is

107
00:04:45,750 --> 00:04:52,170
such an attacks in our scenario<font color="#CCCCCC"> that</font>

108
00:04:49,350 --> 00:04:54,480
<font color="#E5E5E5">hacker is the</font><font color="#CCCCCC"> Arvin system because the</font>

109
00:04:52,170 --> 00:04:57,900
OS controls the victim applications

110
00:04:54,480 --> 00:05:01,260
running in it we use the term<font color="#CCCCCC"> controlled</font>

111
00:04:57,900 --> 00:05:03,570
<font color="#E5E5E5">channel attacks to the</font><font color="#CCCCCC"> end to refer to</font>

112
00:05:01,260 --> 00:05:05,700
our new type of<font color="#CCCCCC"> such line of attacks we</font>

113
00:05:03,570 --> 00:05:08,400
show it's more powerful<font color="#E5E5E5"> than traditional</font>

114
00:05:05,700 --> 00:05:10,440
side channel attacks<font color="#CCCCCC"> with</font><font color="#E5E5E5"> where the</font>

115
00:05:08,400 --> 00:05:12,630
attacker is an unprivileged the process

116
00:05:10,440 --> 00:05:15,900
in a traditional side channel setting

117
00:05:12,630 --> 00:05:18,060
the victim has some secret protected<font color="#CCCCCC"> an</font>

118
00:05:15,900 --> 00:05:20,820
attacker<font color="#E5E5E5"> doesn't have direct access to</font>

119
00:05:18,060 --> 00:05:23,580
<font color="#E5E5E5">them but the attacker might leverage</font>

120
00:05:20,820 --> 00:05:26,460
<font color="#E5E5E5">some side effects made by the victim</font>

121
00:05:23,580 --> 00:05:28,440
<font color="#CCCCCC">such as the</font><font color="#E5E5E5"> timing of the cache access</font>

122
00:05:26,460 --> 00:05:30,659
power consumption or network traffic<font color="#E5E5E5"> in</font>

123
00:05:28,440 --> 00:05:34,530
order to infer some knowledge<font color="#E5E5E5"> about</font><font color="#CCCCCC"> the</font>

124
00:05:30,660 --> 00:05:36,570
secret<font color="#E5E5E5"> however a common drawback</font><font color="#CCCCCC"> of</font>

125
00:05:34,530 --> 00:05:39,150
these traditional attacks is<font color="#E5E5E5"> that</font>

126
00:05:36,570 --> 00:05:41,760
<font color="#CCCCCC">they're subject to severe system noses</font>

127
00:05:39,150 --> 00:05:45,919
like<font color="#E5E5E5"> Connect switches TLB flushes</font>

128
00:05:41,760 --> 00:05:47,669
exceptions<font color="#E5E5E5"> and page faults as a result</font>

129
00:05:45,919 --> 00:05:52,349
<font color="#E5E5E5">that have really</font>

130
00:05:47,669 --> 00:05:55,349
<font color="#CCCCCC">already got a very noisy result in</font>

131
00:05:52,350 --> 00:05:57,720
contrast<font color="#E5E5E5"> in our case the attacker is the</font>

132
00:05:55,350 --> 00:06:01,080
<font color="#E5E5E5">operating system it controls all these</font>

133
00:05:57,720 --> 00:06:03,210
system events for this reason it can

134
00:06:01,080 --> 00:06:09,240
leverage<font color="#E5E5E5"> noise free side channels from</font>

135
00:06:03,210 --> 00:06:11,190
<font color="#CCCCCC">the victim in particular because the OS</font>

136
00:06:09,240 --> 00:06:13,140
<font color="#CCCCCC">is still responsible for manage the page</font>

137
00:06:11,190 --> 00:06:15,870
tables<font color="#CCCCCC"> for protecting the applications</font>

138
00:06:13,140 --> 00:06:18,450
we use page<font color="#E5E5E5"> faults at an</font><font color="#CCCCCC"> inside</font><font color="#E5E5E5"> channel</font>

139
00:06:15,870 --> 00:06:20,340
the power of this side<font color="#CCCCCC"> Channel is</font><font color="#E5E5E5"> that</font>

140
00:06:18,450 --> 00:06:23,340
it is completely<font color="#E5E5E5"> deterministic</font>

141
00:06:20,340 --> 00:06:25,590
<font color="#CCCCCC">the</font><font color="#E5E5E5"> OS controls the page tables and it</font>

142
00:06:23,340 --> 00:06:28,469
can set a trap at any page by making it

143
00:06:25,590 --> 00:06:30,270
inaccessible<font color="#CCCCCC"> and it doesn't</font><font color="#E5E5E5"> even need to</font>

144
00:06:28,470 --> 00:06:33,810
do timing to tell whether trap has been

145
00:06:30,270 --> 00:06:36,479
<font color="#E5E5E5">triggered on the other hand we do</font><font color="#CCCCCC"> have a</font>

146
00:06:33,810 --> 00:06:38,620
new challenge here which is the page

147
00:06:36,479 --> 00:06:40,270
<font color="#CCCCCC">faults</font><font color="#E5E5E5"> only tell page granularity</font>

148
00:06:38,620 --> 00:06:43,270
information as opposed to a cache line

149
00:06:40,270 --> 00:06:45,520
<font color="#E5E5E5">and granularity however we found that</font>

150
00:06:43,270 --> 00:06:47,370
<font color="#E5E5E5">even with this course we're inside</font>

151
00:06:45,520 --> 00:06:49,299
<font color="#CCCCCC">channel</font><font color="#E5E5E5"> the attacker is able to</font>

152
00:06:47,370 --> 00:06:53,229
<font color="#E5E5E5">reconstruct very fine-grained</font>

153
00:06:49,300 --> 00:06:57,400
application data<font color="#E5E5E5"> the basic idea is</font><font color="#CCCCCC"> to</font>

154
00:06:53,229 --> 00:06:59,800
use input dependent<font color="#E5E5E5"> memory accesses for</font>

155
00:06:57,400 --> 00:07:04,030
example if the<font color="#CCCCCC"> application code contains</font>

156
00:06:59,800 --> 00:07:07,180
such a branch where the input is a

157
00:07:04,030 --> 00:07:08,859
branch condition<font color="#E5E5E5"> additionally if</font>

158
00:07:07,180 --> 00:07:11,260
different<font color="#E5E5E5"> branches are located in</font>

159
00:07:08,860 --> 00:07:14,169
<font color="#E5E5E5">different memory pages then we will</font>

160
00:07:11,260 --> 00:07:15,789
<font color="#CCCCCC">observe different page faults and</font>

161
00:07:14,169 --> 00:07:18,010
sequences when<font color="#E5E5E5"> different branches are</font>

162
00:07:15,789 --> 00:07:19,810
taken<font color="#E5E5E5"> so based on the page fault</font>

163
00:07:18,010 --> 00:07:22,449
sequence we can<font color="#E5E5E5"> tell whether input is</font>

164
00:07:19,810 --> 00:07:24,639
true or<font color="#CCCCCC"> false</font><font color="#E5E5E5"> another</font><font color="#CCCCCC"> example is the</font>

165
00:07:22,449 --> 00:07:27,760
<font color="#E5E5E5">application reads one element from a big</font>

166
00:07:24,639 --> 00:07:30,610
array and where the index is the<font color="#CCCCCC"> input</font>

167
00:07:27,760 --> 00:07:32,949
if the array spans across different

168
00:07:30,610 --> 00:07:35,910
memory pages then based on<font color="#E5E5E5"> page faults</font>

169
00:07:32,949 --> 00:07:39,370
<font color="#E5E5E5">we can tell a range about this input</font>

170
00:07:35,910 --> 00:07:41,560
next<font color="#CCCCCC"> I'll use Huntsville as an example</font>

171
00:07:39,370 --> 00:07:44,620
<font color="#E5E5E5">to show</font><font color="#CCCCCC"> how we can use this basic</font><font color="#E5E5E5"> idea</font>

172
00:07:41,560 --> 00:07:46,450
<font color="#CCCCCC">to extract</font><font color="#E5E5E5"> application data Huntsville</font>

173
00:07:44,620 --> 00:07:48,610
<font color="#E5E5E5">is open source spell checker</font>

174
00:07:46,450 --> 00:07:53,200
is<font color="#CCCCCC"> used in many popular applications</font>

175
00:07:48,610 --> 00:07:57,039
like Libre Office and Firefox the way it

176
00:07:53,200 --> 00:07:59,289
works is very<font color="#E5E5E5"> simple as initialization</font>

177
00:07:57,039 --> 00:08:01,270
<font color="#CCCCCC">to load the dictionary file into a big</font>

178
00:07:59,289 --> 00:08:04,320
hash table here we assume that

179
00:08:01,270 --> 00:08:06,520
<font color="#CCCCCC">dictionary is known the hash school is</font>

180
00:08:04,320 --> 00:08:08,530
implemented in a standard way<font color="#E5E5E5"> called</font>

181
00:08:06,520 --> 00:08:09,969
<font color="#CCCCCC">sever</font><font color="#E5E5E5"> chaining you can find the</font>

182
00:08:08,530 --> 00:08:14,138
<font color="#E5E5E5">definition of subroutine in many</font>

183
00:08:09,970 --> 00:08:16,210
<font color="#E5E5E5">textbooks of data structures and as you</font>

184
00:08:14,139 --> 00:08:18,460
see here there<font color="#CCCCCC"> are</font><font color="#E5E5E5"> two parts in</font><font color="#CCCCCC"> the hash</font>

185
00:08:16,210 --> 00:08:21,070
table<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> part on the top is an</font>

186
00:08:18,460 --> 00:08:23,138
array<font color="#CCCCCC"> of pointers</font><font color="#E5E5E5"> where the index of</font>

187
00:08:21,070 --> 00:08:26,740
each<font color="#E5E5E5"> element corresponds to a unique</font>

188
00:08:23,139 --> 00:08:28,720
<font color="#CCCCCC">hash code then each element points to a</font>

189
00:08:26,740 --> 00:08:33,580
linked list which<font color="#E5E5E5"> contains all the words</font>

190
00:08:28,720 --> 00:08:35,680
sharing the same hash code and and this

191
00:08:33,580 --> 00:08:38,289
<font color="#E5E5E5">is a very standard</font><font color="#CCCCCC"> way to deal with a</font>

192
00:08:35,679 --> 00:08:40,270
hash collisions so all applications

193
00:08:38,289 --> 00:08:43,240
<font color="#E5E5E5">using similar data structures will have</font>

194
00:08:40,270 --> 00:08:47,800
the same type<font color="#CCCCCC"> of vulnerability the first</font>

195
00:08:43,240 --> 00:08:50,380
step<font color="#E5E5E5"> of our time is</font><font color="#CCCCCC"> to track the fake</font>

196
00:08:47,800 --> 00:08:53,199
<font color="#E5E5E5">page faults of the loading phase of the</font>

197
00:08:50,380 --> 00:08:55,270
of the dictionary based<font color="#E5E5E5"> on these page</font>

198
00:08:53,200 --> 00:08:57,700
<font color="#E5E5E5">faults we can learn some page level</font>

199
00:08:55,270 --> 00:09:02,079
knowledge<font color="#E5E5E5"> about the memory layout of the</font>

200
00:08:57,700 --> 00:09:05,340
of the hash<font color="#E5E5E5"> table</font><font color="#CCCCCC"> but we'll skip</font><font color="#E5E5E5"> the</font>

201
00:09:02,080 --> 00:09:09,370
details here and<font color="#E5E5E5"> focus on the next step</font>

202
00:09:05,340 --> 00:09:13,180
when<font color="#CCCCCC"> unspell checks</font><font color="#E5E5E5"> the spelling</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

203
00:09:09,370 --> 00:09:15,370
input file for<font color="#E5E5E5"> every input word hunt</font>

204
00:09:13,180 --> 00:09:19,540
spell will perform a<font color="#E5E5E5"> hash table lookup</font>

205
00:09:15,370 --> 00:09:21,520
and here on left<font color="#E5E5E5"> this is a simplified</font>

206
00:09:19,540 --> 00:09:24,040
code snippet for<font color="#E5E5E5"> the spell checking</font>

207
00:09:21,520 --> 00:09:26,640
routine<font color="#E5E5E5"> for each input word</font><font color="#CCCCCC"> we'll</font>

208
00:09:24,040 --> 00:09:31,240
compute<font color="#CCCCCC"> the hash in order</font><font color="#E5E5E5"> to locate a</font>

209
00:09:26,640 --> 00:09:34,540
linked list then<font color="#CCCCCC"> it traverses the linked</font>

210
00:09:31,240 --> 00:09:36,550
<font color="#E5E5E5">list trying to</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> a matching word if a</font>

211
00:09:34,540 --> 00:09:40,569
match is found<font color="#E5E5E5"> a rapport success</font>

212
00:09:36,550 --> 00:09:42,819
otherwise<font color="#E5E5E5"> if reports failure so suppose</font>

213
00:09:40,570 --> 00:09:47,320
we have<font color="#E5E5E5"> a simple input which has three</font>

214
00:09:42,820 --> 00:09:50,710
words<font color="#CCCCCC"> side channel attack then for first</font>

215
00:09:47,320 --> 00:09:54,250
word<font color="#E5E5E5"> it computes a hash code and using</font>

216
00:09:50,710 --> 00:09:57,490
that hash code<font color="#CCCCCC"> as an index to read an</font>

217
00:09:54,250 --> 00:10:00,520
element from the pointer<font color="#E5E5E5"> array this will</font>

218
00:09:57,490 --> 00:10:04,720
trigger a page fault<font color="#E5E5E5"> at page</font><font color="#CCCCCC"> four then</font>

219
00:10:00,520 --> 00:10:06,910
it traverses<font color="#CCCCCC"> the linked list which</font>

220
00:10:04,720 --> 00:10:09,540
contains<font color="#CCCCCC"> only a</font><font color="#E5E5E5"> single word and this</font>

221
00:10:06,910 --> 00:10:12,100
will cause<font color="#E5E5E5"> the page faults as page</font><font color="#CCCCCC"> 7</font>

222
00:10:09,540 --> 00:10:16,750
<font color="#E5E5E5">similarly for the</font><font color="#CCCCCC"> next</font><font color="#E5E5E5"> word channel</font>

223
00:10:12,100 --> 00:10:20,790
<font color="#CCCCCC">we'll get page fault</font><font color="#E5E5E5"> at 1 5 & 6</font><font color="#CCCCCC"> for last</font>

224
00:10:16,750 --> 00:10:24,370
word attack<font color="#CCCCCC"> again</font><font color="#E5E5E5"> page faults at 3</font><font color="#CCCCCC"> & 5</font>

225
00:10:20,790 --> 00:10:28,360
<font color="#E5E5E5">now we have a page fault trace the next</font>

226
00:10:24,370 --> 00:10:29,980
step is to divide it into segments such

227
00:10:28,360 --> 00:10:32,410
that each segment corresponds to a

228
00:10:29,980 --> 00:10:35,290
single<font color="#E5E5E5"> word in the input</font><font color="#CCCCCC"> well there are</font>

229
00:10:32,410 --> 00:10:37,719
many<font color="#CCCCCC"> ways to do this but the simple</font>

230
00:10:35,290 --> 00:10:40,630
approach we<font color="#CCCCCC"> used is</font><font color="#E5E5E5"> to leverage the hash</font>

231
00:10:37,720 --> 00:10:42,790
function<font color="#E5E5E5"> the half function is located in</font>

232
00:10:40,630 --> 00:10:45,670
a<font color="#E5E5E5"> different memory page and it's invoked</font>

233
00:10:42,790 --> 00:10:48,579
for every input word so we can use the

234
00:10:45,670 --> 00:10:51,339
page fault<font color="#E5E5E5"> at that page</font><font color="#CCCCCC"> 2 as a separator</font>

235
00:10:48,580 --> 00:10:54,220
in our page<font color="#CCCCCC"> for trace now for each</font>

236
00:10:51,340 --> 00:10:56,710
segment we can<font color="#E5E5E5"> learn the original input</font>

237
00:10:54,220 --> 00:11:00,000
<font color="#E5E5E5">word based on our knowledge about the</font>

238
00:10:56,710 --> 00:11:02,470
page level structure of the hash table

239
00:11:00,000 --> 00:11:03,280
<font color="#E5E5E5">the key of this attack is the hash</font>

240
00:11:02,470 --> 00:11:07,390
function

241
00:11:03,280 --> 00:11:09,880
the hash function<font color="#CCCCCC"> is</font><font color="#E5E5E5"> opposed to to</font>

242
00:11:07,390 --> 00:11:12,370
<font color="#E5E5E5">shuffle the words in an order</font><font color="#CCCCCC"> that</font>

243
00:11:09,880 --> 00:11:14,860
appears random and it has very low

244
00:11:12,370 --> 00:11:17,350
correlation<font color="#E5E5E5"> with</font><font color="#CCCCCC"> a word in the linked</font>

245
00:11:14,860 --> 00:11:22,330
list<font color="#CCCCCC"> as a result we</font><font color="#E5E5E5"> get very low</font>

246
00:11:17,350 --> 00:11:24,700
ambiguity in our attack results<font color="#E5E5E5"> here's a</font>

247
00:11:22,330 --> 00:11:27,010
quick summary of<font color="#E5E5E5"> our attack results we</font>

248
00:11:24,700 --> 00:11:29,620
have implemented three attacks against

249
00:11:27,010 --> 00:11:33,760
<font color="#CCCCCC">Huntsville</font><font color="#E5E5E5"> free type and</font><font color="#CCCCCC"> live JPAC on</font>

250
00:11:29,620 --> 00:11:36,640
both Haven and<font color="#CCCCCC"> in tac4</font><font color="#E5E5E5"> for Huntsville</font>

251
00:11:33,760 --> 00:11:37,569
when we<font color="#CCCCCC"> spellcheck the entire novel to</font>

252
00:11:36,640 --> 00:11:41,860
<font color="#E5E5E5">wizard odds</font>

253
00:11:37,570 --> 00:11:43,360
we got around<font color="#CCCCCC"> 96% of accuracy</font><font color="#E5E5E5"> for free</font>

254
00:11:41,860 --> 00:11:46,420
type which is found rendering library

255
00:11:43,360 --> 00:11:48,850
<font color="#CCCCCC">well we got perfect</font><font color="#E5E5E5"> accuracy for any</font>

256
00:11:46,420 --> 00:11:52,660
<font color="#E5E5E5">English input including letters and</font>

257
00:11:48,850 --> 00:11:56,710
punctuation marks for<font color="#CCCCCC"> Lib jihad here's a</font>

258
00:11:52,660 --> 00:11:58,780
list of image pairs in each pair the

259
00:11:56,710 --> 00:12:01,240
left image<font color="#E5E5E5"> is the original one and</font><font color="#CCCCCC"> the</font>

260
00:11:58,780 --> 00:12:03,810
right image is the one we recovered from

261
00:12:01,240 --> 00:12:06,400
<font color="#E5E5E5">the</font><font color="#CCCCCC"> page faults</font><font color="#E5E5E5"> clearly the</font>

262
00:12:03,810 --> 00:12:12,280
reconstructed images<font color="#E5E5E5"> still tell</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of</font>

263
00:12:06,400 --> 00:12:14,650
information our tags<font color="#E5E5E5"> add a lot of page</font>

264
00:12:12,280 --> 00:12:17,140
<font color="#CCCCCC">faults to execution and applications</font><font color="#E5E5E5"> and</font>

265
00:12:14,650 --> 00:12:20,140
page fault handling is expensive

266
00:12:17,140 --> 00:12:21,880
<font color="#CCCCCC">especially</font><font color="#E5E5E5"> in systems like intact so our</font>

267
00:12:20,140 --> 00:12:24,580
attacks have non-trivial<font color="#CCCCCC"> overhead</font>

268
00:12:21,880 --> 00:12:29,770
however they are still realistic to

269
00:12:24,580 --> 00:12:33,730
execute<font color="#CCCCCC"> for example with</font><font color="#E5E5E5"> our tag enabled</font>

270
00:12:29,770 --> 00:12:37,839
<font color="#E5E5E5">hung spell takes in less than</font><font color="#CCCCCC"> 3 seconds</font>

271
00:12:33,730 --> 00:12:40,810
<font color="#E5E5E5">to check the entire novel</font><font color="#CCCCCC"> and for free</font>

272
00:12:37,839 --> 00:12:44,080
type it only takes less than<font color="#E5E5E5"> rounds how</font>

273
00:12:40,810 --> 00:12:47,050
<font color="#E5E5E5">the second to render 5 kilobytes text</font>

274
00:12:44,080 --> 00:12:49,990
file<font color="#E5E5E5"> we believe that these small</font>

275
00:12:47,050 --> 00:12:51,760
<font color="#CCCCCC">runtimes are sometimes unnoticeable by</font>

276
00:12:49,990 --> 00:12:54,400
the user<font color="#E5E5E5"> especially in the cloud</font>

277
00:12:51,760 --> 00:12:58,780
scenario where the<font color="#E5E5E5"> background noises are</font>

278
00:12:54,400 --> 00:13:00,640
significant and finally<font color="#E5E5E5"> I'd like</font><font color="#CCCCCC"> to</font>

279
00:12:58,780 --> 00:13:03,970
share some<font color="#CCCCCC"> thoughts on traditional</font>

280
00:13:00,640 --> 00:13:07,300
medications unfortunately at this<font color="#CCCCCC"> point</font>

281
00:13:03,970 --> 00:13:11,709
we don't<font color="#CCCCCC"> have great</font><font color="#E5E5E5"> ideas</font><font color="#CCCCCC"> about we</font><font color="#E5E5E5"> don't</font>

282
00:13:07,300 --> 00:13:13,660
have great<font color="#CCCCCC"> other</font><font color="#E5E5E5"> shell solutions</font><font color="#CCCCCC"> if we</font>

283
00:13:11,709 --> 00:13:16,000
do<font color="#CCCCCC"> that defense on the application side</font>

284
00:13:13,660 --> 00:13:16,630
<font color="#E5E5E5">we might want to rewrite</font><font color="#CCCCCC"> the application</font>

285
00:13:16,000 --> 00:13:19,840
in

286
00:13:16,630 --> 00:13:22,720
to hide<font color="#CCCCCC"> page-level</font><font color="#E5E5E5"> access patterns we</font>

287
00:13:19,840 --> 00:13:25,720
could do this either manually<font color="#CCCCCC"> or with</font>

288
00:13:22,720 --> 00:13:27,730
<font color="#E5E5E5">help of a compiler for example the</font>

289
00:13:25,720 --> 00:13:29,680
developers<font color="#CCCCCC"> of</font><font color="#E5E5E5"> OpenSSL</font>

290
00:13:27,730 --> 00:13:31,780
over the years have changed<font color="#CCCCCC"> the</font>

291
00:13:29,680 --> 00:13:34,900
implementation of some small security

292
00:13:31,780 --> 00:13:37,569
<font color="#E5E5E5">critical functions in order to prevent</font><font color="#CCCCCC"> -</font>

293
00:13:34,900 --> 00:13:40,180
<font color="#CCCCCC">beta side channel attacks</font><font color="#E5E5E5"> however</font><font color="#CCCCCC"> the</font>

294
00:13:37,570 --> 00:13:44,080
shielding systems are trying to protect

295
00:13:40,180 --> 00:13:46,930
<font color="#E5E5E5">complex large legacy applications so the</font>

296
00:13:44,080 --> 00:13:50,170
cost to rewriting them completely<font color="#E5E5E5"> will</font>

297
00:13:46,930 --> 00:13:53,290
be<font color="#E5E5E5"> very high including engineering</font>

298
00:13:50,170 --> 00:13:55,420
<font color="#E5E5E5">effort and performance overhead on the</font>

299
00:13:53,290 --> 00:13:57,550
system<font color="#CCCCCC"> side</font><font color="#E5E5E5"> we might want the shielding</font>

300
00:13:55,420 --> 00:13:59,319
<font color="#E5E5E5">system to add more restrictions on the</font>

301
00:13:57,550 --> 00:14:02,770
behavior of the operating system for

302
00:13:59,320 --> 00:14:05,230
example<font color="#E5E5E5"> we can restrict</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> as we</font><font color="#CCCCCC"> can</font>

303
00:14:02,770 --> 00:14:08,439
resist the way<font color="#E5E5E5"> all the OS performed</font>

304
00:14:05,230 --> 00:14:10,150
memory management however<font color="#E5E5E5"> this may</font>

305
00:14:08,440 --> 00:14:14,050
<font color="#E5E5E5">affect some functionality provided by</font>

306
00:14:10,150 --> 00:14:16,540
<font color="#CCCCCC">the US or the</font><font color="#E5E5E5"> transparency provided by</font>

307
00:14:14,050 --> 00:14:18,819
the<font color="#E5E5E5"> shooting system with these</font>

308
00:14:16,540 --> 00:14:20,800
difficulties<font color="#E5E5E5"> I'd encourage the</font>

309
00:14:18,820 --> 00:14:23,050
commitment the community to rethink the

310
00:14:20,800 --> 00:14:26,349
challenges for<font color="#CCCCCC"> overshadows initial</font>

311
00:14:23,050 --> 00:14:28,719
<font color="#E5E5E5">vision which is to protect legacy</font>

312
00:14:26,350 --> 00:14:32,920
applications from<font color="#E5E5E5"> legacy untrusted</font>

313
00:14:28,720 --> 00:14:35,560
<font color="#E5E5E5">offerings and systems in conclusion</font><font color="#CCCCCC"> an</font>

314
00:14:32,920 --> 00:14:39,189
untrusted<font color="#E5E5E5"> organ system can construct</font>

315
00:14:35,560 --> 00:14:41,800
noise free side channels from for

316
00:14:39,190 --> 00:14:44,260
<font color="#CCCCCC">applications running inside of</font><font color="#E5E5E5"> it the</font>

317
00:14:41,800 --> 00:14:46,180
page<font color="#E5E5E5"> false</font><font color="#CCCCCC"> side channel leaks large</font>

318
00:14:44,260 --> 00:14:48,910
amounts of information<font color="#E5E5E5"> about legacy</font>

319
00:14:46,180 --> 00:14:51,189
applications for this reason control

320
00:14:48,910 --> 00:14:53,469
channel attacks must be addressed<font color="#E5E5E5"> in the</font>

321
00:14:51,190 --> 00:14:55,590
design<font color="#CCCCCC"> of future</font><font color="#E5E5E5"> shielding systems thank</font>

322
00:14:53,470 --> 00:14:55,590
you

323
00:15:01,149 --> 00:15:09,589
we have plenty<font color="#E5E5E5"> of time for questions I'd</font>

324
00:15:08,389 --> 00:15:12,860
one quick one

325
00:15:09,589 --> 00:15:14,600
so you demonstrated on ink<font color="#CCCCCC"> tagging Haven</font>

326
00:15:12,860 --> 00:15:18,279
and is there going<font color="#CCCCCC"> to be any problem</font>

327
00:15:14,600 --> 00:15:20,959
<font color="#E5E5E5">supporting the attacks to</font><font color="#CCCCCC"> STX</font><font color="#E5E5E5"> yeah we we</font>

328
00:15:18,279 --> 00:15:24,379
implement attacks on both in town and

329
00:15:20,959 --> 00:15:25,579
<font color="#E5E5E5">Haven Halen is based on</font><font color="#CCCCCC"> STX okay</font><font color="#E5E5E5"> okay</font>

330
00:15:24,379 --> 00:15:28,699
good<font color="#CCCCCC"> that's a</font><font color="#E5E5E5"> good point</font>

331
00:15:25,579 --> 00:15:31,160
great<font color="#E5E5E5"> so that was a dumb question can we</font>

332
00:15:28,699 --> 00:15:35,809
you want to have some better<font color="#E5E5E5"> ones from</font>

333
00:15:31,160 --> 00:15:37,639
the audience<font color="#E5E5E5"> help me out up here all</font>

334
00:15:35,809 --> 00:15:39,889
right well then let's<font color="#E5E5E5"> thank this</font><font color="#CCCCCC"> oh we</font>

335
00:15:37,639 --> 00:15:42,110
do<font color="#E5E5E5"> yes it has to be better than</font><font color="#CCCCCC"> last one</font>

336
00:15:39,889 --> 00:15:45,470
<font color="#E5E5E5">now</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> I'll try hard</font>

337
00:15:42,110 --> 00:15:47,499
<font color="#CCCCCC">matías Piper do I wonder how useful your</font>

338
00:15:45,470 --> 00:15:50,660
attack is<font color="#CCCCCC"> if you don't know the actual</font>

339
00:15:47,499 --> 00:15:52,970
code that<font color="#CCCCCC"> is being executed</font><font color="#E5E5E5"> this will</font>

340
00:15:50,660 --> 00:15:55,249
<font color="#E5E5E5">restrict in the</font><font color="#CCCCCC"> the form and</font><font color="#E5E5E5"> the places</font>

341
00:15:52,970 --> 00:15:57,920
where you can<font color="#CCCCCC"> put page faults and the</font>

342
00:15:55,249 --> 00:16:00,170
information<font color="#CCCCCC"> that you get from the from</font>

343
00:15:57,920 --> 00:16:01,368
from<font color="#CCCCCC"> that attack yeah that's a good</font>

344
00:16:00,170 --> 00:16:03,559
question<font color="#CCCCCC"> I didn't mention this in the</font>

345
00:16:01,369 --> 00:16:07,519
talk but we do rely on the<font color="#CCCCCC"> knowledge</font>

346
00:16:03,559 --> 00:16:10,939
about the<font color="#CCCCCC"> binary</font><font color="#E5E5E5"> and actually for our to</font>

347
00:16:07,519 --> 00:16:14,209
ease our hacking we actually use the

348
00:16:10,939 --> 00:16:16,040
source code<font color="#E5E5E5"> of the applications but I</font>

349
00:16:14,209 --> 00:16:18,319
don't know if this is<font color="#CCCCCC"> a fundamental</font>

350
00:16:16,040 --> 00:16:21,410
limitation<font color="#CCCCCC"> well you could imagine a</font>

351
00:16:18,319 --> 00:16:24,290
small TCP<font color="#E5E5E5"> component component that loads</font>

352
00:16:21,410 --> 00:16:28,519
the executable image from the from some

353
00:16:24,290 --> 00:16:30,919
trusted but in that model<font color="#E5E5E5"> to</font><font color="#CCCCCC"> me when it</font>

354
00:16:28,519 --> 00:16:34,129
when advocating<font color="#CCCCCC"> execute it is still</font>

355
00:16:30,919 --> 00:16:36,980
isolated from the OS but that's not the

356
00:16:34,129 --> 00:16:39,199
target<font color="#E5E5E5"> of our time our tag is the target</font>

357
00:16:36,980 --> 00:16:41,829
<font color="#E5E5E5">of our</font><font color="#CCCCCC"> tag is when application runs on</font>

358
00:16:39,199 --> 00:16:46,189
<font color="#E5E5E5">top</font><font color="#CCCCCC"> of the OS not isolated from</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> eyes</font>

359
00:16:41,829 --> 00:16:48,609
okay thanks it's much better<font color="#E5E5E5"> question</font>

360
00:16:46,189 --> 00:16:52,599
any others

361
00:16:48,610 --> 00:16:52,600
all right well we thank<font color="#E5E5E5"> the speaker</font>

