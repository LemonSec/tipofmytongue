1
00:00:00,000 --> 00:00:07,379
I'm boy young who a PhD student from

2
00:00:03,750 --> 00:00:09,510
Joseon University China and today it is

3
00:00:07,379 --> 00:00:13,410
a great honor for me here<font color="#E5E5E5"> to present our</font>

4
00:00:09,510 --> 00:00:15,928
work slinked a two-way implemented to

5
00:00:13,410 --> 00:00:19,619
automatically verify as a self API usage

6
00:00:15,929 --> 00:00:21,240
in applications by static analysis and<font color="#CCCCCC"> a</font>

7
00:00:19,619 --> 00:00:24,380
report in one ear abilities whenever

8
00:00:21,240 --> 00:00:27,810
this verification fails this work is

9
00:00:24,380 --> 00:00:29,549
conducted with the<font color="#E5E5E5"> joint lab of</font><font color="#CCCCCC"> Internet</font>

10
00:00:27,810 --> 00:00:30,810
and security technology at Georgia

11
00:00:29,550 --> 00:00:33,510
<font color="#E5E5E5">University and in northwestern</font>

12
00:00:30,810 --> 00:00:36,180
university<font color="#CCCCCC"> supervised the</font><font color="#E5E5E5"> pipe advisory</font>

13
00:00:33,510 --> 00:00:38,820
engine and also collaborated with our

14
00:00:36,180 --> 00:00:41,550
alumina injured hall from<font color="#E5E5E5"> Columbia</font>

15
00:00:38,820 --> 00:00:45,500
<font color="#E5E5E5">University and professor venkata krishna</font>

16
00:00:41,550 --> 00:00:51,209
from university<font color="#CCCCCC"> of illinois of chicago</font>

17
00:00:45,500 --> 00:00:52,890
and as we know SSL and TLS protocol have

18
00:00:51,210 --> 00:00:55,620
become the<font color="#E5E5E5"> security backbones of</font>

19
00:00:52,890 --> 00:00:58,920
Internet today as a transport layer

20
00:00:55,620 --> 00:01:00,510
protocol<font color="#E5E5E5"> SSL you're a</font><font color="#CCCCCC"> year's TCPS at the</font>

21
00:00:58,920 --> 00:01:02,280
learning protocol and<font color="#CCCCCC"> the many</font>

22
00:01:00,510 --> 00:01:05,519
application layer protocols are built on

23
00:01:02,280 --> 00:01:07,409
top<font color="#CCCCCC"> of it and the</font><font color="#E5E5E5"> SSL provide an</font>

24
00:01:05,519 --> 00:01:10,530
end-to-end encrypted communication

25
00:01:07,409 --> 00:01:13,290
security over Internet as a result<font color="#CCCCCC"> many</font>

26
00:01:10,530 --> 00:01:16,110
software including mobile in excuse me

27
00:01:13,290 --> 00:01:19,979
and desktop applications are protected

28
00:01:16,110 --> 00:01:21,630
by SS of particles and SSL is based on

29
00:01:19,979 --> 00:01:26,039
<font color="#E5E5E5">the model of public key infrastructure</font>

30
00:01:21,630 --> 00:01:28,009
and x509certificate and is designed to

31
00:01:26,040 --> 00:01:30,479
guarantee the confidentiality

32
00:01:28,009 --> 00:01:32,189
authenticity and integrity for

33
00:01:30,479 --> 00:01:38,640
communication against the<font color="#CCCCCC"> man in the</font>

34
00:01:32,189 --> 00:01:40,859
middle<font color="#E5E5E5"> attacks however recent study</font>

35
00:01:38,640 --> 00:01:43,320
shows that some SSL applications are

36
00:01:40,860 --> 00:01:46,590
still vulnerable to<font color="#CCCCCC"> my enemy attacks</font>

37
00:01:43,320 --> 00:01:50,100
because of implementation flaws in many

38
00:01:46,590 --> 00:01:51,780
cases as a library api's are not well

39
00:01:50,100 --> 00:01:53,789
designed so the developers to fail<font color="#CCCCCC"> to</font>

40
00:01:51,780 --> 00:01:56,579
understand them correctly and they also

41
00:01:53,790 --> 00:01:58,799
fail to use them correctly so previous

42
00:01:56,579 --> 00:02:01,710
work has already mentioned<font color="#CCCCCC"> that this in</font>

43
00:01:58,799 --> 00:02:02,850
cracker usage problem especially in the

44
00:02:01,710 --> 00:02:05,279
server certificate certificate

45
00:02:02,850 --> 00:02:08,310
validation on the client side showing

46
00:02:05,280 --> 00:02:09,959
that that many<font color="#CCCCCC"> applications are affected</font>

47
00:02:08,310 --> 00:02:13,300
<font color="#E5E5E5">by this problem and making all of them</font>

48
00:02:09,959 --> 00:02:15,620
vulnerable to many enemy attack so

49
00:02:13,300 --> 00:02:18,530
motivated<font color="#E5E5E5"> by this</font><font color="#CCCCCC"> SSL API uses</font>

50
00:02:15,620 --> 00:02:20,750
vulnerabilities we wonder that since SSL

51
00:02:18,530 --> 00:02:23,270
is so important<font color="#E5E5E5"> and why they use to how</font>

52
00:02:20,750 --> 00:02:25,700
<font color="#E5E5E5">many such unknown vulnerability that</font>

53
00:02:23,270 --> 00:02:27,800
still there and whether it is possible

54
00:02:25,700 --> 00:02:30,019
to automatically detect such as a

55
00:02:27,800 --> 00:02:32,180
vulnerability in a large scale and in a

56
00:02:30,020 --> 00:02:37,160
more general way with the high

57
00:02:32,180 --> 00:02:41,150
efficiency and accuracy to<font color="#CCCCCC"> answer this</font>

58
00:02:37,160 --> 00:02:44,210
<font color="#CCCCCC">question we propose an approach as well</font>

59
00:02:41,150 --> 00:02:46,360
as a tool called<font color="#CCCCCC"> slimmed</font><font color="#E5E5E5"> a scalable</font>

60
00:02:44,210 --> 00:02:49,430
static analysis framework which is<font color="#E5E5E5"> into</font>

61
00:02:46,360 --> 00:02:51,920
automatically identifying incorrect

62
00:02:49,430 --> 00:02:55,400
usage<font color="#CCCCCC"> of SSL ap is in client-side</font>

63
00:02:51,920 --> 00:02:58,030
applications so our work has foramen

64
00:02:55,400 --> 00:03:00,020
contributions and the number one is we

65
00:02:58,030 --> 00:03:02,360
designed a systematic<font color="#CCCCCC"> approach to</font>

66
00:03:00,020 --> 00:03:05,000
automatically detect incorrectly use

67
00:03:02,360 --> 00:03:08,630
assess our API usage vulnerabilities and

68
00:03:05,000 --> 00:03:11,180
the second one we implemented<font color="#CCCCCC"> SSS linked</font>

69
00:03:08,630 --> 00:03:16,010
a scalable automated a tool to verify

70
00:03:11,180 --> 00:03:18,019
SSL usage in applications the third one

71
00:03:16,010 --> 00:03:20,899
in<font color="#E5E5E5"> order to find those other</font>

72
00:03:18,019 --> 00:03:23,930
applications using SSL library<font color="#CCCCCC"> ap is</font><font color="#E5E5E5"> as</font>

73
00:03:20,900 --> 00:03:26,269
our candidates with leveraging on the

74
00:03:23,930 --> 00:03:29,390
existing<font color="#E5E5E5"> package managers which existing</font>

75
00:03:26,269 --> 00:03:31,220
existing in many linux distributions for

76
00:03:29,390 --> 00:03:34,630
automatically comparison and analysis

77
00:03:31,220 --> 00:03:37,220
and then acquire all the application

78
00:03:34,630 --> 00:03:39,950
target applications with ssl library as

79
00:03:37,220 --> 00:03:42,410
<font color="#CCCCCC">their building dependences in the end we</font>

80
00:03:39,950 --> 00:03:44,869
<font color="#CCCCCC">did a large scale merriment and analyzed</font>

81
00:03:42,410 --> 00:03:47,570
more than 22 million lines of code and

82
00:03:44,870 --> 00:03:50,209
discover 27 previous unknown<font color="#E5E5E5"> SSL</font>

83
00:03:47,570 --> 00:03:53,450
vulnerabilities in<font color="#CCCCCC"> the software</font><font color="#E5E5E5"> packages</font>

84
00:03:50,209 --> 00:03:56,150
from the<font color="#CCCCCC"> ubuntu 1204 and we confirm all</font>

85
00:03:53,450 --> 00:04:00,709
of them and the so far for have being

86
00:03:56,150 --> 00:04:02,090
<font color="#CCCCCC">four have been fixed sorry here comes</font>

87
00:04:00,709 --> 00:04:04,450
the agenda for<font color="#CCCCCC"> the rest of my</font>

88
00:04:02,090 --> 00:04:06,440
presentation today we<font color="#E5E5E5"> start from some</font>

89
00:04:04,450 --> 00:04:08,630
background knowledge of the SSL

90
00:04:06,440 --> 00:04:12,560
vulnerabilities and show how many in the

91
00:04:08,630 --> 00:04:14,030
media tech had happened and<font color="#E5E5E5"> my enemy</font>

92
00:04:12,560 --> 00:04:17,660
<font color="#CCCCCC">turcica</font><font color="#E5E5E5"> happened due to the incorrect</font>

93
00:04:14,030 --> 00:04:20,209
API usage then we present our<font color="#E5E5E5"> slink</font>

94
00:04:17,660 --> 00:04:22,910
design and implementation including code

95
00:04:20,209 --> 00:04:25,420
representation we use in a stack<font color="#E5E5E5"> nasus</font>

96
00:04:22,910 --> 00:04:27,250
and the signature design

97
00:04:25,420 --> 00:04:30,370
at the end of presentation we gave a

98
00:04:27,250 --> 00:04:32,170
summary of<font color="#E5E5E5"> our</font><font color="#CCCCCC"> fundings we start</font><font color="#E5E5E5"> from</font>

99
00:04:30,370 --> 00:04:34,600
some background knowledge<font color="#E5E5E5"> sterling how</font>

100
00:04:32,170 --> 00:04:36,280
<font color="#E5E5E5">ssl protocol works and as a transport</font>

101
00:04:34,600 --> 00:04:39,700
layer protocol<font color="#CCCCCC"> SSL is</font><font color="#E5E5E5"> built on top of</font>

102
00:04:36,280 --> 00:04:42,359
TCP so after a successful story<font color="#CCCCCC"> we TCP</font>

103
00:04:39,700 --> 00:04:44,500
handshake and<font color="#E5E5E5"> SSL handshake is</font>

104
00:04:42,360 --> 00:04:46,720
established from the client<font color="#E5E5E5"> side and</font>

105
00:04:44,500 --> 00:04:50,020
then<font color="#E5E5E5"> the server presented a certificate</font>

106
00:04:46,720 --> 00:04:52,140
for the client to verify and such this

107
00:04:50,020 --> 00:04:55,390
is authentication face for the<font color="#E5E5E5"> SSL and</font>

108
00:04:52,140 --> 00:04:58,180
you're related<font color="#E5E5E5"> clients</font><font color="#CCCCCC"> a certificate is</font>

109
00:04:55,390 --> 00:05:00,130
optional according to the RFC's so in

110
00:04:58,180 --> 00:05:02,500
fact the one we all syndication is a

111
00:05:00,130 --> 00:05:05,620
common practice in many SSL applications

112
00:05:02,500 --> 00:05:07,810
as shown in this example and after a

113
00:05:05,620 --> 00:05:09,940
successful authentication the keys and

114
00:05:07,810 --> 00:05:11,470
staffers will be exchanged between a

115
00:05:09,940 --> 00:05:13,620
carnist server before the handshake is

116
00:05:11,470 --> 00:05:15,990
down and in the end a<font color="#E5E5E5"> secure</font>

117
00:05:13,620 --> 00:05:18,580
<font color="#E5E5E5">communication channel is established and</font>

118
00:05:15,990 --> 00:05:21,090
encrypted application data can be

119
00:05:18,580 --> 00:05:23,710
transferred over this channel as

120
00:05:21,090 --> 00:05:25,359
mentioned earlier<font color="#E5E5E5"> SSL is designed to</font>

121
00:05:23,710 --> 00:05:26,530
secure an end to end this channel

122
00:05:25,360 --> 00:05:29,530
between a carnist server to avoid a

123
00:05:26,530 --> 00:05:31,989
man-in-the-middle attacks however it may

124
00:05:29,530 --> 00:05:35,140
still be possible<font color="#CCCCCC"> if we</font><font color="#E5E5E5"> still be</font>

125
00:05:31,990 --> 00:05:36,640
vulnerable<font color="#CCCCCC"> to such attacks if ssl</font>

126
00:05:35,140 --> 00:05:41,080
protocols are not implemented

127
00:05:36,640 --> 00:05:42,969
incorrectly incorrectly usage of SS

128
00:05:41,080 --> 00:05:45,190
api's make it possible for attackers to

129
00:05:42,970 --> 00:05:47,710
bypass certificate validation and in

130
00:05:45,190 --> 00:05:51,160
this way attackers can easily intercept

131
00:05:47,710 --> 00:05:54,789
on decrypt or tamper all the information

132
00:05:51,160 --> 00:05:57,430
instead ssl channel in other words the

133
00:05:54,790 --> 00:05:59,980
<font color="#E5E5E5">sss completely broken and there is such</font>

134
00:05:57,430 --> 00:06:01,390
attacks so we will present<font color="#E5E5E5"> a demo video</font>

135
00:05:59,980 --> 00:06:03,310
of such attacks against<font color="#E5E5E5"> the one</font>

136
00:06:01,390 --> 00:06:06,610
vulnerable email app we found at the end

137
00:06:03,310 --> 00:06:09,010
<font color="#E5E5E5">of the presentation in order to show the</font>

138
00:06:06,610 --> 00:06:12,130
details of the vulnerabilities and the

139
00:06:09,010 --> 00:06:14,770
idea of<font color="#E5E5E5"> our system design now present a</font>

140
00:06:12,130 --> 00:06:17,710
motivating example from a real

141
00:06:14,770 --> 00:06:21,370
vulnerable app we found this application

142
00:06:17,710 --> 00:06:24,640
use<font color="#E5E5E5"> openssl as its SSN implementation</font>

143
00:06:21,370 --> 00:06:27,370
and the first<font color="#E5E5E5"> api ssl ctx new as you can</font>

144
00:06:24,640 --> 00:06:29,590
see the first line is called to create a

145
00:06:27,370 --> 00:06:32,290
ssl contacts which is for as<font color="#CCCCCC"> the</font>

146
00:06:29,590 --> 00:06:35,799
configuration and then the second one

147
00:06:32,290 --> 00:06:38,730
the ssl new is<font color="#E5E5E5"> called to create SSS</font>

148
00:06:35,800 --> 00:06:42,250
session using this context for next

149
00:06:38,730 --> 00:06:44,370
as a handshake is lunch using the<font color="#CCCCCC"> SSR</font>

150
00:06:42,250 --> 00:06:46,360
<font color="#CCCCCC">conducted</font><font color="#E5E5E5"> API after all this this</font>

151
00:06:44,370 --> 00:06:49,150
successful its establishment of the

152
00:06:46,360 --> 00:06:52,740
<font color="#CCCCCC">connection the another API SS ok the</font>

153
00:06:49,150 --> 00:06:54,900
very fair result is called here to see

154
00:06:52,740 --> 00:06:56,710
if the certificate validation is

155
00:06:54,900 --> 00:06:59,140
successful and<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> terminate the</font>

156
00:06:56,710 --> 00:07:01,810
connection if necessary this is one of

157
00:06:59,140 --> 00:07:04,599
<font color="#E5E5E5">the common practice or corrupt a usage</font>

158
00:07:01,810 --> 00:07:06,940
when developing the<font color="#E5E5E5"> and open an app</font>

159
00:07:04,600 --> 00:07:10,170
using the<font color="#E5E5E5"> openssl library and we've</font>

160
00:07:06,940 --> 00:07:13,570
referred to as checking after handshake

161
00:07:10,170 --> 00:07:15,430
however opening SSL<font color="#CCCCCC"> API is not a</font><font color="#E5E5E5"> well</font>

162
00:07:13,570 --> 00:07:18,790
<font color="#E5E5E5">designed as most of you know we know and</font>

163
00:07:15,430 --> 00:07:21,160
the well-documented so the<font color="#E5E5E5"> SSL get a</font>

164
00:07:18,790 --> 00:07:23,320
very fun without the function will still

165
00:07:21,160 --> 00:07:25,210
return a successful flag if no

166
00:07:23,320 --> 00:07:29,099
certificate is presented by the server

167
00:07:25,210 --> 00:07:32,169
so in this way this app is vulnerable to

168
00:07:29,100 --> 00:07:33,790
fix this vulnerable app another epi I

169
00:07:32,170 --> 00:07:35,290
sense they'll get peer certificate<font color="#E5E5E5"> it</font>

170
00:07:33,790 --> 00:07:37,180
should be called when checking

171
00:07:35,290 --> 00:07:38,830
certificate validation results so in

172
00:07:37,180 --> 00:07:40,660
this<font color="#CCCCCC"> way the app will terminate the</font>

173
00:07:38,830 --> 00:07:46,990
connection with no certificate is

174
00:07:40,660 --> 00:07:48,700
presented by<font color="#CCCCCC"> the server so in order to</font>

175
00:07:46,990 --> 00:07:50,710
automatically detect such ssl

176
00:07:48,700 --> 00:07:53,469
vulnerabilities including those shown in

177
00:07:50,710 --> 00:07:57,070
the motive in examples we first model

178
00:07:53,470 --> 00:08:01,240
the correct usage of the API<font color="#E5E5E5"> SSL API as</font>

179
00:07:57,070 --> 00:08:03,250
a signatures with under<font color="#E5E5E5"> Zen with his</font>

180
00:08:01,240 --> 00:08:07,000
ends linked which takes<font color="#E5E5E5"> the source of</font>

181
00:08:03,250 --> 00:08:08,950
the app as input and then transform the

182
00:08:07,000 --> 00:08:10,750
source code into a<font color="#E5E5E5"> certain kind of code</font>

183
00:08:08,950 --> 00:08:15,460
representation in a static analyzer and

184
00:08:10,750 --> 00:08:18,390
then match the match the match the

185
00:08:15,460 --> 00:08:22,030
signatures to detect<font color="#E5E5E5"> let vulnerabilities</font>

186
00:08:18,390 --> 00:08:24,460
remember that it is<font color="#CCCCCC"> a correct logic that</font>

187
00:08:22,030 --> 00:08:26,349
we model so in a signature so the

188
00:08:24,460 --> 00:08:30,760
vulnerabilities will only be reported

189
00:08:26,350 --> 00:08:32,290
whenever the signature measure fails in

190
00:08:30,760 --> 00:08:34,870
order to show the ideas of a signature

191
00:08:32,289 --> 00:08:37,209
design here<font color="#E5E5E5"> again we use our motivating</font>

192
00:08:34,870 --> 00:08:39,159
examples this is a<font color="#E5E5E5"> fixed version</font>

193
00:08:37,210 --> 00:08:40,690
representing the correct logic of the

194
00:08:39,159 --> 00:08:43,770
open<font color="#E5E5E5"> ssab is when buried in a</font>

195
00:08:40,690 --> 00:08:46,750
certificate the model is<font color="#E5E5E5"> correct logic</font>

196
00:08:43,770 --> 00:08:50,050
first our signature needs to track the

197
00:08:46,750 --> 00:08:52,420
data flow between all of this<font color="#CCCCCC"> AP is so</font>

198
00:08:50,050 --> 00:08:55,019
starting from the ssl ctx new you

199
00:08:52,420 --> 00:08:57,930
can see at<font color="#CCCCCC"> the land one on the left here</font>

200
00:08:55,019 --> 00:09:00,550
at all the data flows we need a<font color="#CCCCCC"> track</font>

201
00:08:57,930 --> 00:09:04,180
<font color="#E5E5E5">including all the ssl in critical assets</font>

202
00:09:00,550 --> 00:09:07,630
<font color="#CCCCCC">AP is</font><font color="#E5E5E5"> and also there are some if</font>

203
00:09:04,180 --> 00:09:09,370
conditions in this state of<font color="#CCCCCC"> law in</font>

204
00:09:07,630 --> 00:09:11,920
<font color="#E5E5E5">addition to this develop the country</font>

205
00:09:09,370 --> 00:09:13,779
flows relates to the ssl api's usage

206
00:09:11,920 --> 00:09:16,599
also needs<font color="#E5E5E5"> to be modeled in</font><font color="#CCCCCC"> a signature</font>

207
00:09:13,779 --> 00:09:19,329
for example the ssl read an ssl right

208
00:09:16,600 --> 00:09:22,600
<font color="#CCCCCC">aps which adds the line eight on the</font>

209
00:09:19,329 --> 00:09:24,459
left too many aps used for developer to

210
00:09:22,600 --> 00:09:27,519
send and receive data over<font color="#E5E5E5"> as a channel</font>

211
00:09:24,459 --> 00:09:29,888
<font color="#E5E5E5">so these two aps should be called only</font>

212
00:09:27,519 --> 00:09:32,829
after the successful<font color="#CCCCCC"> a certificate</font>

213
00:09:29,889 --> 00:09:35,380
validation as a result<font color="#E5E5E5"> in this example</font>

214
00:09:32,829 --> 00:09:37,870
we also need to track this country flow

215
00:09:35,380 --> 00:09:40,060
from the two if condition to<font color="#CCCCCC"> the ssl</font>

216
00:09:37,870 --> 00:09:44,889
read and as a ride as you can see<font color="#E5E5E5"> that</font>

217
00:09:40,060 --> 00:09:47,500
dots the arrow in this flow graph yeah

218
00:09:44,889 --> 00:09:49,089
in our solution we use program

219
00:09:47,500 --> 00:09:51,459
dependence graph as code representation

220
00:09:49,089 --> 00:09:53,709
as well as signature representation in

221
00:09:51,459 --> 00:09:55,449
this way we successfully<font color="#E5E5E5"> capture both</font>

222
00:09:53,709 --> 00:09:57,989
the<font color="#CCCCCC"> country follow and the data flow in</font>

223
00:09:55,449 --> 00:10:00,670
our signature and here we<font color="#CCCCCC"> show our</font>

224
00:09:57,990 --> 00:10:03,070
signature for the openssl AP is and

225
00:10:00,670 --> 00:10:05,469
which is very<font color="#E5E5E5"> similar to the flowchart</font>

226
00:10:03,070 --> 00:10:07,060
as shown<font color="#E5E5E5"> in the last page and you may</font>

227
00:10:05,470 --> 00:10:11,320
already noticed that there were two

228
00:10:07,060 --> 00:10:13,420
parts in this signature and that's

229
00:10:11,320 --> 00:10:15,610
<font color="#CCCCCC">because the openssl has to correct API</font>

230
00:10:13,420 --> 00:10:17,589
usage when managing the certificate the

231
00:10:15,610 --> 00:10:20,110
one is already shown in our motivating

232
00:10:17,589 --> 00:10:21,910
example as check after the handshake and

233
00:10:20,110 --> 00:10:23,740
the other is the checking during the

234
00:10:21,910 --> 00:10:25,000
handshake which<font color="#CCCCCC"> i will not go into</font><font color="#E5E5E5"> the</font>

235
00:10:23,740 --> 00:10:27,970
details<font color="#CCCCCC"> because the limited</font><font color="#E5E5E5"> time here</font>

236
00:10:25,000 --> 00:10:30,190
and so we model the correct<font color="#E5E5E5"> AP</font><font color="#CCCCCC"> i use</font>

237
00:10:27,970 --> 00:10:32,350
<font color="#CCCCCC">that you for the post cases and if</font><font color="#E5E5E5"> these</font>

238
00:10:30,190 --> 00:10:36,720
are<font color="#CCCCCC"> often two parts is matched warning</font>

239
00:10:32,350 --> 00:10:36,720
will<font color="#CCCCCC"> be triggered in our system our</font>

240
00:10:37,319 --> 00:10:41,829
slinked implementation has the following

241
00:10:39,550 --> 00:10:44,380
<font color="#CCCCCC">technique</font><font color="#E5E5E5"> challenges the first one is</font>

242
00:10:41,829 --> 00:10:46,989
the given and SSN library we need to

243
00:10:44,380 --> 00:10:49,269
understand the precise conditions for

244
00:10:46,990 --> 00:10:52,630
the correct and the correct usage and

245
00:10:49,269 --> 00:10:55,209
then model them in our signature the

246
00:10:52,630 --> 00:10:57,310
second one is the<font color="#E5E5E5"> given a signature we</font>

247
00:10:55,209 --> 00:10:59,859
need to identify a preliminary

248
00:10:57,310 --> 00:11:03,040
conditions to decide if a signature

249
00:10:59,860 --> 00:11:04,570
master match for example in our open SSL

250
00:11:03,040 --> 00:11:08,860
signature shown in the last

251
00:11:04,570 --> 00:11:11,080
the data flow from the<font color="#CCCCCC"> SSN new API to</font>

252
00:11:08,860 --> 00:11:13,030
the<font color="#CCCCCC"> SSN read or write API it must be</font>

253
00:11:11,080 --> 00:11:15,670
captured before the PDG paste the

254
00:11:13,030 --> 00:11:18,610
signature is matched so the last one

255
00:11:15,670 --> 00:11:20,530
from<font color="#E5E5E5"> nan OS</font><font color="#CCCCCC"> dibs distribution we need to</font>

256
00:11:18,610 --> 00:11:22,870
identify that is the selected candidate

257
00:11:20,530 --> 00:11:25,089
apps using<font color="#CCCCCC"> SSL libraries and</font>

258
00:11:22,870 --> 00:11:29,590
successfully compile<font color="#CCCCCC"> this apps for</font><font color="#E5E5E5"> now</font>

259
00:11:25,090 --> 00:11:32,740
analysis<font color="#CCCCCC"> er implement our implementation</font>

260
00:11:29,590 --> 00:11:35,920
slinked<font color="#E5E5E5"> ex act as a certificate</font>

261
00:11:32,740 --> 00:11:37,570
validation a vulnerability scanner we

262
00:11:35,920 --> 00:11:40,089
use code suffer with<font color="#E5E5E5"> a static analyzer</font>

263
00:11:37,570 --> 00:11:42,400
provided by<font color="#E5E5E5"> Crom attack for static</font>

264
00:11:40,090 --> 00:11:46,360
analysis and the generating<font color="#E5E5E5"> pd GS and</font>

265
00:11:42,400 --> 00:11:49,090
the<font color="#CCCCCC"> slint is implemented in</font><font color="#E5E5E5"> c++ and it</font>

266
00:11:46,360 --> 00:11:52,150
is about to<font color="#CCCCCC"> sound</font><font color="#E5E5E5"> and your lines of code</font>

267
00:11:49,090 --> 00:11:54,610
and our signature expression design is

268
00:11:52,150 --> 00:11:58,240
motivated from cipher a graph query

269
00:11:54,610 --> 00:12:00,580
language used in popular graph graph

270
00:11:58,240 --> 00:12:03,070
database name for<font color="#CCCCCC"> Jay and we also design</font>

271
00:12:00,580 --> 00:12:06,880
a custom algorithm to perform this

272
00:12:03,070 --> 00:12:10,420
signature matching in our evaluation we

273
00:12:06,880 --> 00:12:13,240
invest in well investigated apps

274
00:12:10,420 --> 00:12:16,959
leveraging on the most popular to<font color="#E5E5E5"> SSL</font>

275
00:12:13,240 --> 00:12:20,140
libraries on<font color="#CCCCCC"> C++</font><font color="#E5E5E5"> cns</font><font color="#CCCCCC"> C++ platform the</font>

276
00:12:16,960 --> 00:12:21,670
one is<font color="#CCCCCC"> opening exercises guru TRS with</font>

277
00:12:20,140 --> 00:12:24,189
<font color="#CCCCCC">designing signatures for both the</font>

278
00:12:21,670 --> 00:12:28,030
libraries automatically scan over 22

279
00:12:24,190 --> 00:12:29,500
million lines of code and detect a<font color="#E5E5E5"> 27</font>

280
00:12:28,030 --> 00:12:32,680
<font color="#CCCCCC">progress unknown vulnerability</font>

281
00:12:29,500 --> 00:12:35,080
vulnerable apps on<font color="#E5E5E5"> a 485 Ubuntu Linux</font>

282
00:12:32,680 --> 00:12:36,939
apps we have reported all of our

283
00:12:35,080 --> 00:12:39,850
findings to developers or<font color="#E5E5E5"> maintainer and</font>

284
00:12:36,940 --> 00:12:43,030
got 14 confirmations from developers and

285
00:12:39,850 --> 00:12:45,130
so far for have been already fixed our

286
00:12:43,030 --> 00:12:47,410
<font color="#CCCCCC">results shows that the vulnerable apps</font>

287
00:12:45,130 --> 00:12:50,020
from<font color="#CCCCCC"> the various categories as you can</font>

288
00:12:47,410 --> 00:12:51,719
see here we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> email apps we have web</font>

289
00:12:50,020 --> 00:12:54,579
apps and the even database apps and

290
00:12:51,720 --> 00:12:56,320
tools for administration and performance

291
00:12:54,580 --> 00:12:57,790
testing and these vulnerabilities can

292
00:12:56,320 --> 00:13:00,670
lead to serious consequences such as

293
00:12:57,790 --> 00:13:04,829
privacy leakage and privilege escalation

294
00:13:00,670 --> 00:13:08,110
and make us great trouble for users and

295
00:13:04,830 --> 00:13:10,630
they hear the table are the our

296
00:13:08,110 --> 00:13:13,870
measurement result in detail as you<font color="#E5E5E5"> can</font>

297
00:13:10,630 --> 00:13:16,990
see the size of each code for each

298
00:13:13,870 --> 00:13:18,579
vulnerable app is between a few thousand

299
00:13:16,990 --> 00:13:20,679
lines to more than one

300
00:13:18,579 --> 00:13:22,628
hundred thousand our lunch 14 of the

301
00:13:20,679 --> 00:13:25,749
vulnerabilities are<font color="#E5E5E5"> either</font><font color="#CCCCCC"> conformed</font><font color="#E5E5E5"> of</font>

302
00:13:22,629 --> 00:13:27,249
fixed by developers for this photos we

303
00:13:25,749 --> 00:13:29,649
have not heard<font color="#CCCCCC"> from the maintainers or</font>

304
00:13:27,249 --> 00:13:31,540
developers we successfully<font color="#CCCCCC"> launched the</font>

305
00:13:29,649 --> 00:13:33,579
main enemy attacks are all of them so we

306
00:13:31,540 --> 00:13:36,339
confirmed that<font color="#E5E5E5"> they are really</font>

307
00:13:33,579 --> 00:13:38,829
vulnerable we refer to this part of job

308
00:13:36,339 --> 00:13:42,790
as dynamic auditing as listed<font color="#CCCCCC"> in this</font>

309
00:13:38,829 --> 00:13:44,589
table another thing another<font color="#E5E5E5"> interesting</font>

310
00:13:42,790 --> 00:13:46,839
finding we found in our evaluation is

311
00:13:44,589 --> 00:13:48,369
that<font color="#CCCCCC"> ubuntu developers are only</font>

312
00:13:46,839 --> 00:13:49,929
responsible<font color="#E5E5E5"> for maintaining a small</font>

313
00:13:48,369 --> 00:13:52,689
number of apps in this software

314
00:13:49,929 --> 00:13:55,089
repository the other apps are maintained

315
00:13:52,689 --> 00:13:56,889
<font color="#CCCCCC">by the community the our evaluation we</font>

316
00:13:55,089 --> 00:13:58,929
found that the both the<font color="#E5E5E5"> Linux</font>

317
00:13:56,889 --> 00:14:01,509
distributions and the community

318
00:13:58,929 --> 00:14:03,850
developer linux distribution<font color="#E5E5E5"> maintenance</font>

319
00:14:01,509 --> 00:14:05,589
<font color="#E5E5E5">and the community developers feel no</font>

320
00:14:03,850 --> 00:14:07,689
application to fix bugs or

321
00:14:05,589 --> 00:14:11,379
vulnerabilities in<font color="#CCCCCC"> Linux distributions</font>

322
00:14:07,689 --> 00:14:14,379
so we even<font color="#E5E5E5"> found that examples which has</font>

323
00:14:11,379 --> 00:14:16,239
already been<font color="#CCCCCC"> got fixed in the community</font>

324
00:14:14,379 --> 00:14:18,939
<font color="#E5E5E5">up streams but it's still vulnerable in</font>

325
00:14:16,239 --> 00:14:20,529
the latest<font color="#E5E5E5"> Linux distributions and it is</font>

326
00:14:18,939 --> 00:14:23,079
also<font color="#E5E5E5"> true for the other Linux</font>

327
00:14:20,529 --> 00:14:25,239
distributions besides 12 we sing such<font color="#CCCCCC"> a</font>

328
00:14:23,079 --> 00:14:28,019
security problem<font color="#E5E5E5"> yeah the</font><font color="#CCCCCC"> open-source</font>

329
00:14:25,239 --> 00:14:30,879
<font color="#E5E5E5">software must be soft properly to avoid</font>

330
00:14:28,019 --> 00:14:32,799
more vulnerabilities in the future to

331
00:14:30,879 --> 00:14:34,749
<font color="#E5E5E5">conclude our work we started from the</font>

332
00:14:32,799 --> 00:14:37,809
motivating examples<font color="#E5E5E5"> there there a lot of</font>

333
00:14:34,749 --> 00:14:39,999
misuse of the ssl<font color="#CCCCCC"> api's</font><font color="#E5E5E5"> in application</font>

334
00:14:37,809 --> 00:14:43,988
and<font color="#E5E5E5"> the design and implement</font><font color="#CCCCCC"> is linked a</font>

335
00:14:39,999 --> 00:14:46,689
system to verify the<font color="#CCCCCC"> ssl API usage in a</font>

336
00:14:43,989 --> 00:14:48,459
large scale and the way these<font color="#CCCCCC"> discovered</font>

337
00:14:46,689 --> 00:14:50,860
27 previous unknown vulnerable

338
00:14:48,459 --> 00:14:52,540
vulnerable in the womanhood software and

339
00:14:50,860 --> 00:14:55,989
most of which are also sharing<font color="#E5E5E5"> other</font>

340
00:14:52,540 --> 00:14:58,179
<font color="#CCCCCC">linux distributions and 3 is our first</font>

341
00:14:55,989 --> 00:15:00,129
step to verify API usage based analysis

342
00:14:58,179 --> 00:15:02,769
battle we believe that<font color="#E5E5E5"> this approach</font><font color="#CCCCCC"> is</font>

343
00:15:00,129 --> 00:15:04,869
not a strictly in in<font color="#E5E5E5"> SSL so currently</font>

344
00:15:02,769 --> 00:15:07,059
<font color="#CCCCCC">we're focusing on the</font><font color="#E5E5E5"> following ongoing</font>

345
00:15:04,869 --> 00:15:09,610
works that and first one we are<font color="#E5E5E5"> building</font>

346
00:15:07,059 --> 00:15:10,919
generic system to verify API usage in

347
00:15:09,610 --> 00:15:14,559
application of different programs

348
00:15:10,919 --> 00:15:15,999
languages such as Java Java apps and the

349
00:15:14,559 --> 00:15:18,879
second one we are trying to fix those

350
00:15:15,999 --> 00:15:20,489
filled applications in<font color="#E5E5E5"> our analysis due</font>

351
00:15:18,879 --> 00:15:23,619
to the memory explosions and<font color="#CCCCCC"> the other</font>

352
00:15:20,489 --> 00:15:25,269
arrows by automatically identifying as a

353
00:15:23,619 --> 00:15:27,970
rather bland code in the application and

354
00:15:25,269 --> 00:15:30,009
only focus<font color="#CCCCCC"> on</font><font color="#E5E5E5"> that part of the code to</font>

355
00:15:27,970 --> 00:15:31,620
reduce the workload out our static

356
00:15:30,009 --> 00:15:34,350
analysis

357
00:15:31,620 --> 00:15:36,930
in n<font color="#E5E5E5"> I'd like to show to show you a tech</font>

358
00:15:34,350 --> 00:15:38,490
demo video against the one of the

359
00:15:36,930 --> 00:15:39,750
vulnerable email app we found and

360
00:15:38,490 --> 00:15:42,029
meanwhile I'd like to<font color="#E5E5E5"> take your</font>

361
00:15:39,750 --> 00:15:45,890
<font color="#CCCCCC">questions and that's in number of my</font>

362
00:15:42,029 --> 00:15:45,890
presentation today thank you<font color="#E5E5E5"> thank you</font>

363
00:15:49,430 --> 00:16:03,930
so sorry hello Cammie<font color="#CCCCCC"> vanier Indiana</font>

364
00:16:01,050 --> 00:16:05,910
University I'm<font color="#E5E5E5"> curious how much of the</font>

365
00:16:03,930 --> 00:16:08,160
<font color="#E5E5E5">signature</font><font color="#CCCCCC"> is you able to</font><font color="#E5E5E5"> create just</font>

366
00:16:05,910 --> 00:16:10,020
from the documentation and how many<font color="#E5E5E5"> of</font>

367
00:16:08,160 --> 00:16:13,050
<font color="#E5E5E5">them you then had to later create based</font>

368
00:16:10,020 --> 00:16:14,640
on looking at the examples were finding

369
00:16:13,050 --> 00:16:16,050
so were<font color="#E5E5E5"> you able to actually just create</font>

370
00:16:14,640 --> 00:16:17,850
figure out with the<font color="#E5E5E5"> correct one it was</font>

371
00:16:16,050 --> 00:16:20,729
<font color="#E5E5E5">upfront or how much did you have to go</font>

372
00:16:17,850 --> 00:16:23,430
back in and create new signatures after

373
00:16:20,730 --> 00:16:24,510
looking examples<font color="#E5E5E5"> ok so am I understand</font>

374
00:16:23,430 --> 00:16:26,969
what a<font color="#CCCCCC"> question</font><font color="#E5E5E5"> is so how many</font>

375
00:16:24,510 --> 00:16:30,390
signatures do it do it do it<font color="#E5E5E5"> made and</font>

376
00:16:26,970 --> 00:16:32,730
yes we made the signatures for kabuki OS

377
00:16:30,390 --> 00:16:35,150
we have actually we have<font color="#CCCCCC"> two and we have</font>

378
00:16:32,730 --> 00:16:38,010
openssl actually we have that one and

379
00:16:35,150 --> 00:16:41,370
all of them the front<font color="#E5E5E5"> example so some of</font>

380
00:16:38,010 --> 00:16:43,650
<font color="#E5E5E5">them up from the document button you as</font>

381
00:16:41,370 --> 00:16:45,990
you<font color="#CCCCCC"> know the open</font><font color="#E5E5E5"> desolation is always</font>

382
00:16:43,650 --> 00:16:51,529
poorly documented so many of them from

383
00:16:45,990 --> 00:16:51,529
<font color="#E5E5E5">the examples from the developers yes oh</font>

384
00:16:53,510 --> 00:17:01,709
sorry from<font color="#E5E5E5"> the video 100 seconds</font><font color="#CCCCCC"> ok so</font>

385
00:16:59,940 --> 00:17:03,480
i'm mike from the united states military

386
00:17:01,709 --> 00:17:06,569
academy I just wondered if you had

387
00:17:03,480 --> 00:17:08,270
synthesized any lessons based on looking

388
00:17:06,569 --> 00:17:10,470
at the api's and looking at your results

389
00:17:08,270 --> 00:17:12,420
that you could kind of make some

390
00:17:10,470 --> 00:17:14,610
recommendations<font color="#CCCCCC"> and all these api's</font>

391
00:17:12,420 --> 00:17:15,959
could be better I mean I know<font color="#E5E5E5"> George</font>

392
00:17:14,609 --> 00:17:18,149
<font color="#E5E5E5">Evan fall and others have shown that</font>

393
00:17:15,959 --> 00:17:20,550
they're bad but anything anything like

394
00:17:18,150 --> 00:17:24,770
<font color="#E5E5E5">opinions on that you'd like to share ok</font>

395
00:17:20,550 --> 00:17:28,740
so I asking me for opinions or<font color="#CCCCCC"> okay</font>

396
00:17:24,770 --> 00:17:32,250
first we recommend it all of the

397
00:17:28,740 --> 00:17:33,990
available now to use openssl that's true

398
00:17:32,250 --> 00:17:36,179
that's a really poor design and oh poor

399
00:17:33,990 --> 00:17:39,110
document today that's true<font color="#E5E5E5"> and I noticed</font>

400
00:17:36,179 --> 00:17:43,350
that many of the vendors have already

401
00:17:39,110 --> 00:17:45,270
open you<font color="#CCCCCC"> can start</font><font color="#E5E5E5"> their own project</font>

402
00:17:43,350 --> 00:17:48,219
down that's libraries so

403
00:17:45,270 --> 00:17:54,330
something like the labor at liberal SSL

404
00:17:48,220 --> 00:17:54,330
or other libraries and I think for<font color="#E5E5E5"> now</font>

405
00:17:54,600 --> 00:18:00,189
many developers has known this fact that

406
00:17:57,940 --> 00:18:05,220
the openness are now safe so that's cool

407
00:18:00,190 --> 00:18:08,530
thing I<font color="#E5E5E5"> think yeah thank you very much</font>

408
00:18:05,220 --> 00:18:10,000
<font color="#CCCCCC">okay one other question I had did you</font>

409
00:18:08,530 --> 00:18:11,920
have any false positives when you're

410
00:18:10,000 --> 00:18:13,780
running<font color="#E5E5E5"> these applications</font><font color="#CCCCCC"> first</font>

411
00:18:11,920 --> 00:18:16,630
positive<font color="#CCCCCC"> of course as you don't know I</font>

412
00:18:13,780 --> 00:18:19,240
prepare<font color="#CCCCCC"> for slides but</font><font color="#E5E5E5"> this video is not</font>

413
00:18:16,630 --> 00:18:22,990
over so<font color="#E5E5E5"> okay it's false positive view of</font>

414
00:18:19,240 --> 00:18:25,120
course because developers can do some

415
00:18:22,990 --> 00:18:27,340
customizations to the openssl libraries

416
00:18:25,120 --> 00:18:31,000
so in that case they can write a

417
00:18:27,340 --> 00:18:34,090
callback functions inside the openssl so

418
00:18:31,000 --> 00:18:37,030
in that way we cannot capture this for

419
00:18:34,090 --> 00:18:39,550
static static analysis by the way<font color="#E5E5E5"> and we</font>

420
00:18:37,030 --> 00:18:41,710
i'm pretty<font color="#E5E5E5"> sure that we can do that in</font>

421
00:18:39,550 --> 00:18:45,250
data analysis as we<font color="#E5E5E5"> have some previous</font>

422
00:18:41,710 --> 00:18:46,810
work has already done that yeah all

423
00:18:45,250 --> 00:18:51,930
right let's thanks billion and all the

424
00:18:46,810 --> 00:18:51,929
other speakers<font color="#E5E5E5"> in the session thank you</font>

