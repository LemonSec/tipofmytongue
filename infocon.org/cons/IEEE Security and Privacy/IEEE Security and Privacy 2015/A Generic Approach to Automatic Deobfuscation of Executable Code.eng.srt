1
00:00:01,159 --> 00:00:07,649
<font color="#E5E5E5">um hello everybody I'm Bob back thanks</font>

2
00:00:04,980 --> 00:00:09,900
front for the introduction<font color="#CCCCCC"> and I'm</font><font color="#E5E5E5"> gonna</font>

3
00:00:07,649 --> 00:00:12,769
be talking about<font color="#E5E5E5"> our work and the</font>

4
00:00:09,900 --> 00:00:15,150
obfuscation<font color="#CCCCCC"> so this was joint work with</font>

5
00:00:12,769 --> 00:00:17,759
<font color="#CCCCCC">Bryan Johannes Meyer been</font><font color="#E5E5E5"> lightly and</font>

6
00:00:15,150 --> 00:00:20,970
<font color="#CCCCCC">chummy debry</font><font color="#E5E5E5"> all from the University of</font>

7
00:00:17,760 --> 00:00:22,980
<font color="#E5E5E5">Arizona so first of all what is</font><font color="#CCCCCC"> the</font>

8
00:00:20,970 --> 00:00:24,570
obfuscation<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> referring to the</font>

9
00:00:22,980 --> 00:00:27,810
office<font color="#CCCCCC"> ocation as opposed to office</font>

10
00:00:24,570 --> 00:00:33,059
<font color="#CCCCCC">occation as a</font><font color="#E5E5E5"> transformation or process</font>

11
00:00:27,810 --> 00:00:34,050
that<font color="#E5E5E5"> given a</font><font color="#CCCCCC"> obfuscate given an office</font>

12
00:00:33,059 --> 00:00:37,078
<font color="#CCCCCC">credit program</font>

13
00:00:34,050 --> 00:00:39,209
it will produce a simpler program<font color="#E5E5E5"> that</font>

14
00:00:37,079 --> 00:00:43,050
is so simpler to understand and easier

15
00:00:39,210 --> 00:00:47,160
to<font color="#E5E5E5"> analyze and the thing is that this</font>

16
00:00:43,050 --> 00:00:48,870
<font color="#CCCCCC">process should not be changed the</font>

17
00:00:47,160 --> 00:00:57,089
functionality of<font color="#E5E5E5"> the code or the program</font>

18
00:00:48,870 --> 00:01:00,000
that<font color="#CCCCCC"> was</font><font color="#E5E5E5"> our fee scale so the reason or</font>

19
00:00:57,090 --> 00:01:02,730
<font color="#E5E5E5">the motivation for this for having such</font>

20
00:01:00,000 --> 00:01:05,040
the office<font color="#CCCCCC"> keishon process is that a lot</font>

21
00:01:02,730 --> 00:01:07,229
<font color="#E5E5E5">of malicious codes use office</font><font color="#CCCCCC"> occasion</font>

22
00:01:05,040 --> 00:01:08,729
techniques<font color="#CCCCCC"> all</font><font color="#E5E5E5"> sorts of various types of</font>

23
00:01:07,229 --> 00:01:10,470
office<font color="#E5E5E5"> occasion techniques to protect</font>

24
00:01:08,729 --> 00:01:13,710
the code from being analyzed<font color="#E5E5E5"> or being</font>

25
00:01:10,470 --> 00:01:16,289
reverse engineered for example as it is

26
00:01:13,710 --> 00:01:19,470
<font color="#E5E5E5">shown in this slide</font><font color="#CCCCCC"> the program on the</font>

27
00:01:16,290 --> 00:01:21,439
<font color="#E5E5E5">right the CFG is shown here is the</font>

28
00:01:19,470 --> 00:01:24,000
binary<font color="#CCCCCC"> search program which was</font>

29
00:01:21,439 --> 00:01:27,630
obfuscated using<font color="#CCCCCC"> Sumida</font><font color="#E5E5E5"> which is a</font>

30
00:01:24,000 --> 00:01:31,619
commercial<font color="#E5E5E5"> office keishon tool so as it</font>

31
00:01:27,630 --> 00:01:35,759
<font color="#E5E5E5">is obvious from</font><font color="#CCCCCC"> the slide or</font><font color="#E5E5E5"> the CFG the</font>

32
00:01:31,619 --> 00:01:40,280
program on the right which is obfuscated

33
00:01:35,759 --> 00:01:43,110
is much much more complicated<font color="#CCCCCC"> to analyze</font>

34
00:01:40,280 --> 00:01:46,950
<font color="#E5E5E5">well manually and it is of</font><font color="#CCCCCC"> course</font>

35
00:01:43,110 --> 00:01:50,570
subject errors so our goal is<font color="#CCCCCC"> to have a</font>

36
00:01:46,950 --> 00:01:54,420
technique or tool that<font color="#CCCCCC"> are automatically</font>

37
00:01:50,570 --> 00:01:57,689
given<font color="#CCCCCC"> an obfuscated program can identify</font>

38
00:01:54,420 --> 00:02:00,180
and extract<font color="#E5E5E5"> all the significant</font>

39
00:01:57,689 --> 00:02:04,258
operations or the logic that was

40
00:02:00,180 --> 00:02:08,940
embedded in the office<font color="#CCCCCC"> gedit program</font><font color="#E5E5E5"> and</font>

41
00:02:04,259 --> 00:02:13,020
produce a simpler<font color="#CCCCCC"> program which as you</font>

42
00:02:08,940 --> 00:02:13,920
see in this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> our tool</font><font color="#E5E5E5"> memory</font><font color="#CCCCCC"> was</font>

43
00:02:13,020 --> 00:02:15,270
<font color="#E5E5E5">able to</font>

44
00:02:13,920 --> 00:02:16,849
<font color="#CCCCCC">covered the original logic</font><font color="#E5E5E5"> of the</font>

45
00:02:15,270 --> 00:02:20,069
<font color="#CCCCCC">program which was binary search and</font>

46
00:02:16,849 --> 00:02:22,230
thing is<font color="#CCCCCC"> that the recovered logic might</font>

47
00:02:20,069 --> 00:02:25,589
not be exactly<font color="#CCCCCC"> the same as the</font><font color="#E5E5E5"> the</font>

48
00:02:22,230 --> 00:02:27,840
<font color="#E5E5E5">original program but it is a lot simpler</font>

49
00:02:25,590 --> 00:02:31,200
<font color="#E5E5E5">and easier to understand and</font><font color="#CCCCCC"> analyze and</font>

50
00:02:27,840 --> 00:02:34,890
it has the semantics of the<font color="#E5E5E5"> original</font>

51
00:02:31,200 --> 00:02:37,679
program so<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> there have been a</font><font color="#CCCCCC"> few</font>

52
00:02:34,890 --> 00:02:41,119
related works<font color="#E5E5E5"> to the office</font><font color="#CCCCCC"> ocation I</font>

53
00:02:37,680 --> 00:02:43,500
have some of the<font color="#E5E5E5"> most relevance here so</font>

54
00:02:41,120 --> 00:02:48,300
<font color="#CCCCCC">Coogan uses equational reasoning</font><font color="#E5E5E5"> and</font>

55
00:02:43,500 --> 00:02:50,190
assembly<font color="#CCCCCC"> level instructions to identify</font>

56
00:02:48,300 --> 00:02:53,069
relevant instructions to the original

57
00:02:50,190 --> 00:02:55,290
code<font color="#CCCCCC"> and to simplify</font><font color="#E5E5E5"> the office</font>

58
00:02:53,069 --> 00:02:59,670
occasions<font color="#CCCCCC"> the problem with this approach</font>

59
00:02:55,290 --> 00:03:02,519
<font color="#CCCCCC">is that</font><font color="#E5E5E5"> it is hard to extract high-level</font>

60
00:02:59,670 --> 00:03:06,238
information<font color="#CCCCCC"> like CFG or syntax trees</font>

61
00:03:02,519 --> 00:03:10,730
from the simplified trace<font color="#E5E5E5"> sheriff also</font>

62
00:03:06,239 --> 00:03:15,269
<font color="#E5E5E5">uses abstract variable binding to</font>

63
00:03:10,730 --> 00:03:19,828
<font color="#E5E5E5">reverse engineer</font><font color="#CCCCCC"> the emulator that was</font>

64
00:03:15,269 --> 00:03:21,239
<font color="#E5E5E5">being</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> to obfuscate</font><font color="#CCCCCC"> but again</font>

65
00:03:19,829 --> 00:03:23,510
problem here is that<font color="#CCCCCC"> they are making</font>

66
00:03:21,239 --> 00:03:26,640
strong assumptions about the underlying

67
00:03:23,510 --> 00:03:30,390
obfuscation being used<font color="#E5E5E5"> so for example if</font>

68
00:03:26,640 --> 00:03:35,040
the emulator is being used on<font color="#E5E5E5"> pack the</font>

69
00:03:30,390 --> 00:03:38,040
logic<font color="#CCCCCC"> of the binary I mean the the</font>

70
00:03:35,040 --> 00:03:41,970
<font color="#CCCCCC">unpacking routine has been immolated</font>

71
00:03:38,040 --> 00:03:43,890
then this approach<font color="#E5E5E5"> will</font><font color="#CCCCCC"> not give us what</font>

72
00:03:41,970 --> 00:03:45,690
<font color="#CCCCCC">we are</font><font color="#E5E5E5"> looking for</font><font color="#CCCCCC"> so our main</font>

73
00:03:43,890 --> 00:03:48,570
contribution here is that we<font color="#CCCCCC"> are not</font>

74
00:03:45,690 --> 00:03:51,980
<font color="#E5E5E5">making any assumption about underlying</font>

75
00:03:48,570 --> 00:03:54,810
<font color="#CCCCCC">of fist occasion that</font><font color="#E5E5E5"> is being used so</font>

76
00:03:51,980 --> 00:03:58,078
<font color="#CCCCCC">in order to start the deification</font>

77
00:03:54,810 --> 00:03:59,609
process we need<font color="#CCCCCC"> to define</font><font color="#E5E5E5"> what is</font>

78
00:03:58,079 --> 00:04:01,920
significant<font color="#E5E5E5"> about the program that we</font>

79
00:03:59,609 --> 00:04:03,750
want the deification process to preserve

80
00:04:01,920 --> 00:04:06,048
<font color="#CCCCCC">so we are</font><font color="#E5E5E5"> defining a program as a</font>

81
00:04:03,750 --> 00:04:10,200
mapping<font color="#E5E5E5"> from its inputs to the outputs</font>

82
00:04:06,049 --> 00:04:12,989
so then our deification we want a

83
00:04:10,200 --> 00:04:15,690
deification<font color="#CCCCCC"> to</font><font color="#E5E5E5"> identify</font><font color="#CCCCCC"> this mapping the</font>

84
00:04:12,989 --> 00:04:18,950
computation that involves this mapping

85
00:04:15,690 --> 00:04:21,719
<font color="#CCCCCC">from inputs to outputs</font><font color="#E5E5E5"> extract this</font>

86
00:04:18,950 --> 00:04:26,219
<font color="#CCCCCC">information from the office cater</font>

87
00:04:21,720 --> 00:04:27,790
program and somehow simplify this so

88
00:04:26,220 --> 00:04:29,470
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> our system overview</font>

89
00:04:27,790 --> 00:04:31,540
we first<font color="#E5E5E5"> get an execution trace of the</font>

90
00:04:29,470 --> 00:04:34,960
program using an emulator<font color="#E5E5E5"> which in our</font>

91
00:04:31,540 --> 00:04:39,520
case<font color="#E5E5E5"> is either on</font><font color="#CCCCCC"> top of then</font><font color="#E5E5E5"> and then</font>

92
00:04:34,960 --> 00:04:43,479
we do identify<font color="#E5E5E5"> inputs and outputs to the</font>

93
00:04:39,520 --> 00:04:48,099
program we propagate<font color="#CCCCCC"> taint from inputs</font>

94
00:04:43,480 --> 00:04:51,400
and from outputs backward<font color="#E5E5E5"> to identify</font>

95
00:04:48,100 --> 00:04:53,400
all the computations<font color="#CCCCCC"> that affecting or</font>

96
00:04:51,400 --> 00:04:56,560
<font color="#E5E5E5">affected by</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> input and output values</font>

97
00:04:53,400 --> 00:04:59,710
<font color="#E5E5E5">then</font><font color="#CCCCCC"> we find control dependencies and</font>

98
00:04:56,560 --> 00:05:02,500
then we apply some simplification

99
00:04:59,710 --> 00:05:05,620
transformations on the<font color="#E5E5E5"> code and then</font>

100
00:05:02,500 --> 00:05:10,180
from the<font color="#CCCCCC"> simplify trace we construct a</font>

101
00:05:05,620 --> 00:05:12,040
final control flow graph we have also

102
00:05:10,180 --> 00:05:18,160
added a<font color="#E5E5E5"> colleague execution engine to</font>

103
00:05:12,040 --> 00:05:20,980
our system so it can<font color="#E5E5E5"> be fed either from</font>

104
00:05:18,160 --> 00:05:24,870
the original trace of his credit race or

105
00:05:20,980 --> 00:05:28,320
the simplified trace and<font color="#E5E5E5"> it can't build</font>

106
00:05:24,870 --> 00:05:31,240
path constraints in the trace<font color="#E5E5E5"> and</font>

107
00:05:28,320 --> 00:05:33,610
suggest other inputs to the user that

108
00:05:31,240 --> 00:05:35,830
could cause the program<font color="#CCCCCC"> to execute</font><font color="#E5E5E5"> other</font>

109
00:05:33,610 --> 00:05:40,300
execution<font color="#E5E5E5"> paths but I'm not going to be</font>

110
00:05:35,830 --> 00:05:44,830
discussing about this part in this<font color="#E5E5E5"> talk</font>

111
00:05:40,300 --> 00:05:47,980
<font color="#CCCCCC">so first though</font><font color="#E5E5E5"> let's discuss the change</font>

112
00:05:44,830 --> 00:05:51,280
analysis I'm just going<font color="#CCCCCC"> to go</font><font color="#E5E5E5"> over an</font>

113
00:05:47,980 --> 00:05:53,530
example<font color="#E5E5E5"> to</font><font color="#CCCCCC"> see how</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> analysis</font><font color="#E5E5E5"> are</font>

114
00:05:51,280 --> 00:05:58,510
used in our approach so first as I said

115
00:05:53,530 --> 00:06:00,520
<font color="#E5E5E5">change analysis so here you see the code</font>

116
00:05:58,510 --> 00:06:03,430
for<font color="#CCCCCC"> a simple factorial program it beats</font>

117
00:06:00,520 --> 00:06:07,810
<font color="#E5E5E5">and from input and computes the</font>

118
00:06:03,430 --> 00:06:11,170
factorial in a loop and finally<font color="#E5E5E5"> prints</font>

119
00:06:07,810 --> 00:06:12,850
the results<font color="#E5E5E5"> and here on the right we</font>

120
00:06:11,170 --> 00:06:15,610
have<font color="#E5E5E5"> the execution</font><font color="#CCCCCC"> trace</font><font color="#E5E5E5"> of the program</font>

121
00:06:12,850 --> 00:06:19,990
for<font color="#E5E5E5"> n being 3 so the loop</font><font color="#CCCCCC"> actually is</font>

122
00:06:15,610 --> 00:06:23,140
being<font color="#E5E5E5"> executed</font><font color="#CCCCCC"> twice</font><font color="#E5E5E5"> so the first step</font>

123
00:06:19,990 --> 00:06:26,320
is to finding inputs and outputs<font color="#CCCCCC"> their</font>

124
00:06:23,140 --> 00:06:27,969
program<font color="#E5E5E5"> the sets of breathe here is an</font>

125
00:06:26,320 --> 00:06:30,700
input<font color="#E5E5E5"> to the program</font>

126
00:06:27,970 --> 00:06:32,500
so<font color="#E5E5E5"> we first identify these and propagate</font>

127
00:06:30,700 --> 00:06:34,570
change forward<font color="#E5E5E5"> from the same</font><font color="#CCCCCC"> point so</font>

128
00:06:32,500 --> 00:06:36,130
<font color="#E5E5E5">this identifies the</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> Aoife</font>

129
00:06:34,570 --> 00:06:38,170
statements in the program<font color="#E5E5E5"> as being</font>

130
00:06:36,130 --> 00:06:41,500
forward tainted<font color="#E5E5E5"> then we do</font><font color="#CCCCCC"> a backward</font>

131
00:06:38,170 --> 00:06:44,410
taint on outputs of the program so

132
00:06:41,500 --> 00:06:46,680
we start propagating<font color="#CCCCCC"> paint backward from</font>

133
00:06:44,410 --> 00:06:50,220
<font color="#E5E5E5">the values that flow into output</font>

134
00:06:46,680 --> 00:06:55,150
functions which is right<font color="#E5E5E5"> in</font><font color="#CCCCCC"> this example</font>

135
00:06:50,220 --> 00:06:57,310
<font color="#E5E5E5">so all this will identify instructions</font>

136
00:06:55,150 --> 00:07:00,729
<font color="#E5E5E5">that affect the body is going to output</font>

137
00:06:57,310 --> 00:07:03,190
functions well the next<font color="#E5E5E5"> step</font><font color="#CCCCCC"> after doing</font>

138
00:07:00,730 --> 00:07:09,190
change analysis is to<font color="#E5E5E5"> find control</font>

139
00:07:03,190 --> 00:07:12,100
dependencies and here the purpose of the

140
00:07:09,190 --> 00:07:13,719
control<font color="#E5E5E5"> dependencies is that we find all</font>

141
00:07:12,100 --> 00:07:17,590
those<font color="#E5E5E5"> instructions that are affecting</font>

142
00:07:13,720 --> 00:07:21,400
<font color="#E5E5E5">the output but are potentially subject</font>

143
00:07:17,590 --> 00:07:22,750
to simplification so but the<font color="#CCCCCC"> thing is</font>

144
00:07:21,400 --> 00:07:25,229
they<font color="#CCCCCC"> are being</font><font color="#E5E5E5"> controlled by some input</font>

145
00:07:22,750 --> 00:07:28,750
values so<font color="#E5E5E5"> for example here the</font>

146
00:07:25,230 --> 00:07:31,210
multiplication of fact is dependent the

147
00:07:28,750 --> 00:07:33,370
number of times that<font color="#E5E5E5"> this multiplier is</font>

148
00:07:31,210 --> 00:07:35,650
being<font color="#E5E5E5"> executed is dependent on some</font>

149
00:07:33,370 --> 00:07:38,650
input<font color="#E5E5E5"> value so for simplification we</font>

150
00:07:35,650 --> 00:07:40,659
don't want to<font color="#E5E5E5"> simplify this part of the</font>

151
00:07:38,650 --> 00:07:46,270
code<font color="#CCCCCC"> so we find these control</font>

152
00:07:40,660 --> 00:07:48,760
dependencies and<font color="#E5E5E5"> well the code that I</font>

153
00:07:46,270 --> 00:07:51,400
<font color="#CCCCCC">showed you here is</font><font color="#E5E5E5"> not an office gated</font>

154
00:07:48,760 --> 00:07:53,080
one but finding the control dependencies

155
00:07:51,400 --> 00:07:57,370
<font color="#E5E5E5">in office</font><font color="#CCCCCC"> critical might be challenging</font>

156
00:07:53,080 --> 00:07:59,169
especially in office<font color="#CCCCCC"> caissons like CFG</font>

157
00:07:57,370 --> 00:08:02,770
flattening or<font color="#CCCCCC"> immolations where you</font>

158
00:07:59,169 --> 00:08:06,820
don't have<font color="#CCCCCC"> the control dependencies that</font>

159
00:08:02,770 --> 00:08:09,310
<font color="#E5E5E5">are present in the</font><font color="#CCCCCC"> original</font><font color="#E5E5E5"> program so</font>

160
00:08:06,820 --> 00:08:11,560
we have a notion<font color="#E5E5E5"> of implicit control</font>

161
00:08:09,310 --> 00:08:16,630
dependencies<font color="#CCCCCC"> so these are those control</font>

162
00:08:11,560 --> 00:08:19,780
dependencies that<font color="#E5E5E5"> that are</font><font color="#CCCCCC"> due that</font><font color="#E5E5E5"> are</font>

163
00:08:16,630 --> 00:08:21,490
caused<font color="#E5E5E5"> by some</font><font color="#CCCCCC"> data dependencies so</font><font color="#E5E5E5"> for</font>

164
00:08:19,780 --> 00:08:23,500
<font color="#E5E5E5">finding implicit control dependencies we</font>

165
00:08:21,490 --> 00:08:25,930
first identify explicit<font color="#E5E5E5"> control</font>

166
00:08:23,500 --> 00:08:30,270
dependencies using post Dominator

167
00:08:25,930 --> 00:08:32,620
relationships on CFG s then we find

168
00:08:30,270 --> 00:08:37,079
implicit data dependencies which is

169
00:08:32,620 --> 00:08:41,229
similar to<font color="#E5E5E5"> implicit tainted values and</font>

170
00:08:37,080 --> 00:08:44,740
then we consider all the control

171
00:08:41,229 --> 00:08:49,660
transfers that<font color="#CCCCCC"> are</font><font color="#E5E5E5"> based on some</font>

172
00:08:44,740 --> 00:08:53,530
implicit<font color="#E5E5E5"> tainted value so we actually</font>

173
00:08:49,660 --> 00:08:55,170
treat those control transfers as<font color="#E5E5E5"> like</font>

174
00:08:53,530 --> 00:08:57,490
the conditional jumps

175
00:08:55,170 --> 00:08:59,889
so then after<font color="#E5E5E5"> finding the control</font>

176
00:08:57,490 --> 00:09:04,750
dependencies<font color="#CCCCCC"> so we have actually</font>

177
00:08:59,889 --> 00:09:06,220
<font color="#E5E5E5">identified significant instructions or</font>

178
00:09:04,750 --> 00:09:12,029
statements in the trace that<font color="#CCCCCC"> we want to</font>

179
00:09:06,220 --> 00:09:14,970
<font color="#E5E5E5">keep then we apply</font><font color="#CCCCCC"> some simplification</font>

180
00:09:12,029 --> 00:09:17,800
transformations<font color="#E5E5E5"> and these</font>

181
00:09:14,970 --> 00:09:19,180
<font color="#E5E5E5">transformations are basically semantic</font>

182
00:09:17,800 --> 00:09:21,459
preserving meaning that they<font color="#E5E5E5"> don't</font>

183
00:09:19,180 --> 00:09:23,589
change the behavior of<font color="#E5E5E5"> the code or</font><font color="#CCCCCC"> like</font>

184
00:09:21,459 --> 00:09:25,959
a basic<font color="#E5E5E5"> block</font>

185
00:09:23,589 --> 00:09:27,610
they are generally compiler

186
00:09:25,959 --> 00:09:30,128
optimizations such as constant

187
00:09:27,610 --> 00:09:34,930
propagation<font color="#CCCCCC"> dead code elimination and</font>

188
00:09:30,129 --> 00:09:37,029
copy propagation and cetera and<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is</font>

189
00:09:34,930 --> 00:09:41,638
<font color="#E5E5E5">that these transformations</font><font color="#CCCCCC"> need to be</font>

190
00:09:37,029 --> 00:09:46,180
<font color="#E5E5E5">controlled or as I said we need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> keep</font>

191
00:09:41,639 --> 00:09:48,430
the things that are significant program

192
00:09:46,180 --> 00:09:57,550
so we need to be careful<font color="#CCCCCC"> that we don't</font>

193
00:09:48,430 --> 00:10:02,319
<font color="#E5E5E5">simplify those computations</font><font color="#CCCCCC"> away then we</font>

194
00:09:57,550 --> 00:10:04,870
<font color="#CCCCCC">have the simplified trace we need to</font>

195
00:10:02,319 --> 00:10:08,290
build a control<font color="#E5E5E5"> flow graph out of the</font>

196
00:10:04,870 --> 00:10:11,410
simplified<font color="#E5E5E5"> trace but the problem here is</font>

197
00:10:08,290 --> 00:10:15,490
that for some of you sophistications

198
00:10:11,410 --> 00:10:18,490
for example here emulation<font color="#CCCCCC"> the issue is</font>

199
00:10:15,490 --> 00:10:21,009
that emulator uses the same piece<font color="#CCCCCC"> of</font>

200
00:10:18,490 --> 00:10:23,500
code for<font color="#CCCCCC"> different</font><font color="#E5E5E5"> for for the same</font>

201
00:10:21,009 --> 00:10:24,879
functionality<font color="#E5E5E5"> for every instances of</font>

202
00:10:23,500 --> 00:10:28,600
that functionality<font color="#E5E5E5"> in the original</font>

203
00:10:24,879 --> 00:10:31,180
<font color="#E5E5E5">program let's say a branch a conditional</font>

204
00:10:28,600 --> 00:10:34,500
branch<font color="#E5E5E5"> used like multiple times in the</font>

205
00:10:31,180 --> 00:10:38,410
original program<font color="#E5E5E5"> they are</font><font color="#CCCCCC"> all being</font>

206
00:10:34,500 --> 00:10:40,360
transformed to<font color="#E5E5E5"> one piece of code in the</font>

207
00:10:38,410 --> 00:10:44,199
office gated code probably<font color="#E5E5E5"> with</font>

208
00:10:40,360 --> 00:10:47,050
different inputs or arguments<font color="#E5E5E5"> so what we</font>

209
00:10:44,199 --> 00:10:51,339
end up<font color="#E5E5E5"> having in the simplified trace or</font>

210
00:10:47,050 --> 00:10:54,250
<font color="#E5E5E5">a CFG if we</font><font color="#CCCCCC"> build the CFG</font><font color="#E5E5E5"> normally from</font>

211
00:10:51,339 --> 00:10:56,170
the simplified trace we often see basic

212
00:10:54,250 --> 00:10:59,949
blocks that<font color="#CCCCCC"> have multiple successors</font><font color="#E5E5E5"> and</font>

213
00:10:56,170 --> 00:11:02,439
multiple predecessors for one basic

214
00:10:59,949 --> 00:11:07,719
block<font color="#E5E5E5"> which doesn't make sense</font><font color="#CCCCCC"> so what</font>

215
00:11:02,439 --> 00:11:08,740
we do we try<font color="#E5E5E5"> to duplicate these basic</font>

216
00:11:07,720 --> 00:11:11,670
<font color="#E5E5E5">blocks</font>

217
00:11:08,740 --> 00:11:15,250
as as a way of<font color="#E5E5E5"> distinguishing like</font>

218
00:11:11,670 --> 00:11:21,399
different instances<font color="#CCCCCC"> of using one</font>

219
00:11:15,250 --> 00:11:23,800
functionality in the original code<font color="#E5E5E5"> so so</font>

220
00:11:21,399 --> 00:11:27,339
this actually<font color="#E5E5E5"> reduces</font><font color="#CCCCCC"> the number of</font>

221
00:11:23,800 --> 00:11:29,949
spurious<font color="#E5E5E5"> paths in the final CFG so for</font>

222
00:11:27,339 --> 00:11:34,420
example if the<font color="#CCCCCC"> combination of create</font>

223
00:11:29,950 --> 00:11:36,550
<font color="#E5E5E5">zero basic block B is</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> only happens</font>

224
00:11:34,420 --> 00:11:40,689
in<font color="#E5E5E5"> the trace we don't need to have a</font>

225
00:11:36,550 --> 00:11:43,779
<font color="#E5E5E5">basic block that has all the combination</font>

226
00:11:40,690 --> 00:11:46,240
of these<font color="#CCCCCC"> three predecessors</font><font color="#E5E5E5"> with basic</font>

227
00:11:43,779 --> 00:11:52,000
block B and all the successors following

228
00:11:46,240 --> 00:11:54,880
that basic block so<font color="#CCCCCC"> we basically limit</font>

229
00:11:52,000 --> 00:12:00,160
the number of possible execution paths

230
00:11:54,880 --> 00:12:03,420
in the final CFG and before<font color="#CCCCCC"> actually</font>

231
00:12:00,160 --> 00:12:07,350
showing some numbers for evaluation I'm

232
00:12:03,420 --> 00:12:11,709
I'm going<font color="#E5E5E5"> to show some CFG examples for</font>

233
00:12:07,350 --> 00:12:14,410
like<font color="#CCCCCC"> two programs so this is a binary</font>

234
00:12:11,709 --> 00:12:16,750
<font color="#E5E5E5">search program on the left the</font><font color="#CCCCCC"> original</font>

235
00:12:14,410 --> 00:12:19,899
that's<font color="#E5E5E5"> the CFG for the original program</font>

236
00:12:16,750 --> 00:12:23,649
<font color="#E5E5E5">and in the middle we see the office</font>

237
00:12:19,899 --> 00:12:28,570
<font color="#E5E5E5">cadet program and picture on the right</font>

238
00:12:23,649 --> 00:12:33,990
shows<font color="#CCCCCC"> the CFG we were able to recover</font>

239
00:12:28,570 --> 00:12:37,870
from that<font color="#E5E5E5"> office</font><font color="#CCCCCC"> gated trace and this</font><font color="#E5E5E5"> is</font>

240
00:12:33,990 --> 00:12:40,000
for for<font color="#E5E5E5"> fibonacci program we used drop</font>

241
00:12:37,870 --> 00:12:44,279
<font color="#E5E5E5">gadgets to build the</font><font color="#CCCCCC"> Fibonacci program</font>

242
00:12:40,000 --> 00:12:46,360
and as you see our tool was able<font color="#CCCCCC"> to</font>

243
00:12:44,279 --> 00:12:48,760
recover the original logic<font color="#CCCCCC"> of the</font>

244
00:12:46,360 --> 00:12:52,000
<font color="#CCCCCC">program from your physical</font><font color="#E5E5E5"> trace and we</font>

245
00:12:48,760 --> 00:12:55,000
have also measured the<font color="#E5E5E5"> CFG similarity</font><font color="#CCCCCC"> of</font>

246
00:12:52,000 --> 00:12:57,959
a bunch of<font color="#E5E5E5"> programs for emulation based</font>

247
00:12:55,000 --> 00:13:00,430
off fish obfuscation we used for

248
00:12:57,959 --> 00:13:02,500
commercial<font color="#E5E5E5"> office</font><font color="#CCCCCC"> occasion tools code</font>

249
00:13:00,430 --> 00:13:08,380
which<font color="#E5E5E5"> eliezer</font><font color="#CCCCCC"> executors we are</font>

250
00:13:02,500 --> 00:13:11,040
protecting<font color="#E5E5E5"> to</font><font color="#CCCCCC"> media</font><font color="#E5E5E5"> and so the red bars</font>

251
00:13:08,380 --> 00:13:13,570
show<font color="#CCCCCC"> the CFG similarity of the</font>

252
00:13:11,040 --> 00:13:16,569
obfuscated programs<font color="#E5E5E5"> to the original</font>

253
00:13:13,570 --> 00:13:19,320
programs and the blue bars<font color="#CCCCCC"> show the</font><font color="#E5E5E5"> CFG</font>

254
00:13:16,570 --> 00:13:21,510
similarity<font color="#CCCCCC"> of the simplified</font><font color="#E5E5E5"> programs</font>

255
00:13:19,320 --> 00:13:23,360
<font color="#E5E5E5">again to the original programs</font>

256
00:13:21,510 --> 00:13:27,779
and we did the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> thing for</font><font color="#E5E5E5"> Rob</font>

257
00:13:23,360 --> 00:13:30,709
<font color="#E5E5E5">programs</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> used for our program and we</font>

258
00:13:27,779 --> 00:13:33,990
built these are all programs<font color="#E5E5E5"> ourselves</font>

259
00:13:30,709 --> 00:13:37,560
we didn't actually do<font color="#CCCCCC"> Malaysia</font><font color="#E5E5E5"> sprouts</font>

260
00:13:33,990 --> 00:13:40,889
because they were like so trivial and

261
00:13:37,560 --> 00:13:45,599
easy<font color="#E5E5E5"> so these programs that we've</font>

262
00:13:40,889 --> 00:13:51,740
selected have interesting structures so

263
00:13:45,600 --> 00:13:55,199
as you see the average CFG similarity is

264
00:13:51,740 --> 00:13:57,949
generally above<font color="#CCCCCC"> 80%</font><font color="#E5E5E5"> with regards</font><font color="#CCCCCC"> to the</font>

265
00:13:55,199 --> 00:13:57,949
office gated code

266
00:13:58,220 --> 00:14:06,110
so in conclusion<font color="#E5E5E5"> we've described a</font>

267
00:14:03,329 --> 00:14:09,180
generic approach<font color="#E5E5E5"> to the affiliation and</font>

268
00:14:06,110 --> 00:14:11,160
well as<font color="#E5E5E5"> I said we make no assumptions</font>

269
00:14:09,180 --> 00:14:16,349
about the other<font color="#CCCCCC"> obvious keishon being</font>

270
00:14:11,160 --> 00:14:19,079
used in the code<font color="#CCCCCC"> we considered programs</font>

271
00:14:16,350 --> 00:14:20,670
<font color="#E5E5E5">as a mapping</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> its</font><font color="#CCCCCC"> input/output so</font>

272
00:14:19,079 --> 00:14:24,899
that's the<font color="#E5E5E5"> only assumptions we make</font>

273
00:14:20,670 --> 00:14:27,389
about<font color="#E5E5E5"> the programs and so this the</font>

274
00:14:24,899 --> 00:14:31,130
obfuscation approach identifies and

275
00:14:27,389 --> 00:14:34,290
simplifies the computation that involves

276
00:14:31,130 --> 00:14:38,819
in this mapping from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> input/output</font>

277
00:14:34,290 --> 00:14:42,540
<font color="#CCCCCC">and our evaluation shows that this</font>

278
00:14:38,819 --> 00:14:46,469
approach was successful against both

279
00:14:42,540 --> 00:14:49,170
emulation<font color="#E5E5E5"> and Rob office occasions so I</font>

280
00:14:46,470 --> 00:14:51,529
<font color="#E5E5E5">guess that was all if there's any</font>

281
00:14:49,170 --> 00:14:51,529
question

282
00:14:55,540 --> 00:15:03,020
so<font color="#E5E5E5"> we have time for a couple questions</font>

283
00:14:58,600 --> 00:15:05,540
um so<font color="#CCCCCC"> juan caballero from in there so</font>

284
00:15:03,020 --> 00:15:08,060
what<font color="#CCCCCC"> institute so why is the</font><font color="#E5E5E5"> CFG</font>

285
00:15:05,540 --> 00:15:08,959
similarity the right metric here for

286
00:15:08,060 --> 00:15:11,300
evaluating<font color="#E5E5E5"> your</font>

287
00:15:08,960 --> 00:15:13,550
deification<font color="#CCCCCC"> it seems like if you what</font>

288
00:15:11,300 --> 00:15:14,870
<font color="#E5E5E5">you want is</font><font color="#CCCCCC"> like at</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> office rated</font>

289
00:15:13,550 --> 00:15:16,939
program with the same semantics you

290
00:15:14,870 --> 00:15:18,980
<font color="#E5E5E5">should run the</font><font color="#CCCCCC"> full skated code and</font>

291
00:15:16,940 --> 00:15:20,540
<font color="#E5E5E5">actually have the same absurd the same</font>

292
00:15:18,980 --> 00:15:23,589
semantics<font color="#E5E5E5"> or behavior</font><font color="#CCCCCC"> that you would</font>

293
00:15:20,540 --> 00:15:27,020
<font color="#E5E5E5">actually have with your</font><font color="#CCCCCC"> biscuit code so</font>

294
00:15:23,589 --> 00:15:29,360
well ideally<font color="#E5E5E5"> yeah that's the case but we</font>

295
00:15:27,020 --> 00:15:31,899
were not able to<font color="#CCCCCC"> actually run the</font>

296
00:15:29,360 --> 00:15:36,200
<font color="#E5E5E5">simplified code because of like some</font>

297
00:15:31,899 --> 00:15:38,390
memory issues like pointers and those

298
00:15:36,200 --> 00:15:40,850
are stuff<font color="#E5E5E5"> so that's our goal actually</font>

299
00:15:38,390 --> 00:15:42,770
<font color="#CCCCCC">but</font><font color="#E5E5E5"> we're working on</font><font color="#CCCCCC"> it but we haven't</font>

300
00:15:40,850 --> 00:15:45,529
got there yet to be<font color="#CCCCCC"> able to execute some</font>

301
00:15:42,770 --> 00:15:47,740
fight code<font color="#E5E5E5"> thank you</font>

302
00:15:45,529 --> 00:15:50,839
some monster news rats<font color="#E5E5E5"> Chris University</font>

303
00:15:47,740 --> 00:15:52,070
<font color="#CCCCCC">great piece of</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> if I understand</font>

304
00:15:50,839 --> 00:15:53,540
<font color="#E5E5E5">correctly you're using con colleague</font>

305
00:15:52,070 --> 00:15:56,750
execution to make sure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> all the code</font>

306
00:15:53,540 --> 00:15:59,540
is exercised and I was wondering if<font color="#CCCCCC"> the</font>

307
00:15:56,750 --> 00:16:03,529
<font color="#CCCCCC">Packer could not possibly just put a lot</font>

308
00:15:59,540 --> 00:16:07,990
of branches<font color="#E5E5E5"> to just make this con</font>

309
00:16:03,529 --> 00:16:11,120
<font color="#CCCCCC">colicky execution</font><font color="#E5E5E5"> connect</font><font color="#CCCCCC"> feasible so</font>

310
00:16:07,990 --> 00:16:13,010
<font color="#CCCCCC">packet and do what</font><font color="#E5E5E5"> I'm sorry so</font>

311
00:16:11,120 --> 00:16:15,890
basically the opposite<font color="#CCCCCC"> air puts a lot of</font>

312
00:16:13,010 --> 00:16:18,410
<font color="#CCCCCC">branches so that execution</font><font color="#E5E5E5"> in reasonable</font>

313
00:16:15,890 --> 00:16:20,600
time cannot cover<font color="#E5E5E5"> all the code so that's</font>

314
00:16:18,410 --> 00:16:22,640
<font color="#CCCCCC">actually well well interesting so this</font>

315
00:16:20,600 --> 00:16:26,630
is what happens with we have<font color="#CCCCCC"> eczema and</font>

316
00:16:22,640 --> 00:16:30,319
some other tools<font color="#CCCCCC"> like</font><font color="#E5E5E5"> s2e and well some</font>

317
00:16:26,630 --> 00:16:32,300
of<font color="#CCCCCC"> the tools so the thing is that</font><font color="#E5E5E5"> for</font>

318
00:16:30,320 --> 00:16:35,589
<font color="#CCCCCC">our purposes taint analysis should be</font>

319
00:16:32,300 --> 00:16:41,209
precise to identify only tainted or

320
00:16:35,589 --> 00:16:44,450
<font color="#CCCCCC">input</font><font color="#E5E5E5"> dependent conditional branches so</font>

321
00:16:41,209 --> 00:16:47,869
this is what causing other tools<font color="#E5E5E5"> to fail</font>

322
00:16:44,450 --> 00:16:51,200
on office<font color="#CCCCCC"> headed</font><font color="#E5E5E5"> codes they are not able</font>

323
00:16:47,870 --> 00:16:55,670
<font color="#CCCCCC">to precisely find only tainted</font>

324
00:16:51,200 --> 00:16:56,470
conditional branches<font color="#E5E5E5"> but we have some</font>

325
00:16:55,670 --> 00:17:01,459
refined

326
00:16:56,470 --> 00:17:07,030
<font color="#CCCCCC">change analysis that only</font><font color="#E5E5E5"> identifies</font>

327
00:17:01,459 --> 00:17:07,030
tainted<font color="#CCCCCC"> conditional branches thanks</font>

328
00:17:10,079 --> 00:17:16,490
can you do a a double translation<font color="#E5E5E5"> and</font>

329
00:17:13,380 --> 00:17:21,329
come up with a grammar for<font color="#E5E5E5"> obfuscation</font>

330
00:17:16,490 --> 00:17:24,800
given obfuscated piece of code double

331
00:17:21,329 --> 00:17:24,800
the transformation yeah

332
00:17:25,099 --> 00:17:32,699
also what<font color="#E5E5E5"> happens if you run it</font><font color="#CCCCCC"> on</font>

333
00:17:27,839 --> 00:17:34,050
ordinary code<font color="#E5E5E5"> it basically it's it's</font>

334
00:17:32,700 --> 00:17:37,860
like<font color="#E5E5E5"> similar to the compiler</font>

335
00:17:34,050 --> 00:17:40,980
optimization<font color="#E5E5E5"> so it it doesn't change the</font>

336
00:17:37,860 --> 00:17:47,219
<font color="#E5E5E5">code much because there's nothing</font>

337
00:17:40,980 --> 00:17:51,960
simplify<font color="#CCCCCC"> and what if the obfuscator</font>

338
00:17:47,220 --> 00:17:55,190
changes the semantics<font color="#CCCCCC"> I</font><font color="#E5E5E5"> so I mean there</font>

339
00:17:51,960 --> 00:17:59,250
<font color="#E5E5E5">are ways</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> carry out factoring through</font>

340
00:17:55,190 --> 00:18:01,530
<font color="#E5E5E5">set operations I hope they don't</font>

341
00:17:59,250 --> 00:18:03,480
basically change the semantics they<font color="#E5E5E5"> ball</font>

342
00:18:01,530 --> 00:18:06,330
one office<font color="#E5E5E5"> here might change some</font>

343
00:18:03,480 --> 00:18:09,210
instruction or operands<font color="#CCCCCC"> to one</font>

344
00:18:06,330 --> 00:18:12,060
instruction in the original<font color="#E5E5E5"> program but</font>

345
00:18:09,210 --> 00:18:18,600
they don't change the semantics in any

346
00:18:12,060 --> 00:18:22,649
ways<font color="#E5E5E5"> but if they did well then</font><font color="#CCCCCC"> well what</font>

347
00:18:18,600 --> 00:18:25,889
we produce from<font color="#E5E5E5"> the on a few</font><font color="#CCCCCC"> skated</font>

348
00:18:22,650 --> 00:18:29,000
program has this has<font color="#CCCCCC"> this new semantics</font>

349
00:18:25,890 --> 00:18:29,000
<font color="#CCCCCC">a deteriorated program</font>

350
00:18:31,950 --> 00:18:37,419
<font color="#E5E5E5">hey um hello</font><font color="#CCCCCC"> hey this is fish from UC</font>

351
00:18:36,129 --> 00:18:39,340
Santa Barbara and<font color="#CCCCCC"> this is a very</font>

352
00:18:37,419 --> 00:18:41,619
interesting piece<font color="#CCCCCC"> of work and I think</font><font color="#E5E5E5"> is</font>

353
00:18:39,340 --> 00:18:42,369
very<font color="#E5E5E5"> astonishing</font><font color="#CCCCCC"> I have two questions</font>

354
00:18:41,619 --> 00:18:44,889
<font color="#CCCCCC">about it</font>

355
00:18:42,369 --> 00:18:46,539
the first thing is that I think<font color="#E5E5E5"> the</font>

356
00:18:44,889 --> 00:18:48,639
<font color="#E5E5E5">office kitchen</font><font color="#CCCCCC"> is not</font><font color="#E5E5E5"> I mean</font><font color="#CCCCCC"> it's really</font>

357
00:18:46,539 --> 00:18:50,289
<font color="#E5E5E5">about to make this program simpler but</font>

358
00:18:48,639 --> 00:18:52,959
it's really not<font color="#E5E5E5"> only about simplifying</font>

359
00:18:50,289 --> 00:18:54,519
<font color="#CCCCCC">the CFG</font><font color="#E5E5E5"> right so for example like</font>

360
00:18:52,960 --> 00:18:59,249
<font color="#E5E5E5">there's a paper in 2008 it talks about</font>

361
00:18:54,519 --> 00:19:01,840
<font color="#CCCCCC">how</font><font color="#E5E5E5"> to make Oh back up opaque on</font>

362
00:18:59,249 --> 00:19:04,749
<font color="#E5E5E5">conditions for</font><font color="#CCCCCC"> example like you can</font>

363
00:19:01,840 --> 00:19:05,978
encode your conditional your conditional

364
00:19:04,749 --> 00:19:07,929
operations or your condition<font color="#E5E5E5"> your</font>

365
00:19:05,979 --> 00:19:10,299
conditions<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of like</font>

366
00:19:07,929 --> 00:19:12,009
mathematical expressions and I think is

367
00:19:10,299 --> 00:19:13,629
<font color="#E5E5E5">super hard</font><font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> reverse it and</font>

368
00:19:12,009 --> 00:19:16,119
it's<font color="#E5E5E5"> definitely not</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> that you</font>

369
00:19:13,629 --> 00:19:17,349
can<font color="#E5E5E5"> reverse it it just by um the</font><font color="#CCCCCC"> data</font>

370
00:19:16,119 --> 00:19:19,238
<font color="#CCCCCC">flow tracking or data dependency</font>

371
00:19:17,349 --> 00:19:21,369
tracking<font color="#E5E5E5"> how are you gonna handle</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> or</font>

372
00:19:19,239 --> 00:19:24,070
are<font color="#E5E5E5"> you handling it or not and the other</font>

373
00:19:21,369 --> 00:19:25,359
<font color="#E5E5E5">thing is about</font><font color="#CCCCCC"> one question</font><font color="#E5E5E5"> please sorry</font>

374
00:19:24,070 --> 00:19:26,639
can we<font color="#CCCCCC"> just leave</font><font color="#E5E5E5"> it to the first</font>

375
00:19:25,359 --> 00:19:30,218
question<font color="#CCCCCC"> okay sure</font>

376
00:19:26,639 --> 00:19:32,379
<font color="#E5E5E5">so I guess</font><font color="#CCCCCC"> though again that depends on</font>

377
00:19:30,219 --> 00:19:37,330
the how precise<font color="#E5E5E5"> your change analysis is</font>

378
00:19:32,379 --> 00:19:40,389
<font color="#CCCCCC">to identify the tainted conditional</font>

379
00:19:37,330 --> 00:19:42,968
branches right so well for example in

380
00:19:40,389 --> 00:19:46,389
<font color="#E5E5E5">executors we find a lot of conditional</font>

381
00:19:42,969 --> 00:19:50,169
branches<font color="#CCCCCC"> some of them are introduced by</font>

382
00:19:46,389 --> 00:19:52,178
<font color="#CCCCCC">the office cater and I mean some of them</font>

383
00:19:50,169 --> 00:19:54,039
are tainted actually but they don't

384
00:19:52,179 --> 00:19:56,409
change the behavior of<font color="#E5E5E5"> the code so we</font>

385
00:19:54,039 --> 00:19:59,259
cannot simplify those but a lot<font color="#CCCCCC"> of the</font>

386
00:19:56,409 --> 00:20:01,450
others that<font color="#CCCCCC"> are not</font><font color="#E5E5E5"> dependent input we</font>

387
00:19:59,259 --> 00:20:04,690
<font color="#E5E5E5">can't simply get rid</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> those because no</font>

388
00:20:01,450 --> 00:20:07,809
matter what<font color="#E5E5E5"> input is the result we know</font>

389
00:20:04,690 --> 00:20:13,179
the result of that conditional job<font color="#CCCCCC"> do</font>

390
00:20:07,809 --> 00:20:14,609
<font color="#CCCCCC">you think this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> region Eric I don't</font>

391
00:20:13,179 --> 00:20:17,609
see why not

392
00:20:14,609 --> 00:20:17,609
<font color="#CCCCCC">Thanks</font>

