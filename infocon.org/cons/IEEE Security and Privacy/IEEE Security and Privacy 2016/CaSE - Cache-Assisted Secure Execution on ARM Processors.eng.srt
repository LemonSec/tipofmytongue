1
00:00:06,690 --> 00:00:13,920
<font color="#E5E5E5">um morning</font><font color="#CCCCCC"> I'm here to talk</font><font color="#E5E5E5"> about cash</font>

2
00:00:09,910 --> 00:00:13,920
<font color="#E5E5E5">assisted</font><font color="#CCCCCC"> secure execution or arm devices</font>

3
00:00:16,980 --> 00:00:22,750
<font color="#E5E5E5">okay this is our</font><font color="#CCCCCC"> line</font><font color="#E5E5E5"> my talk I'm gonna</font>

4
00:00:19,930 --> 00:00:26,860
<font color="#E5E5E5">start with why did we start this project</font>

5
00:00:22,750 --> 00:00:29,860
<font color="#E5E5E5">and then look into the</font><font color="#CCCCCC"> Fred model who</font>

6
00:00:26,860 --> 00:00:31,720
are we defending against<font color="#E5E5E5"> then we show a</font>

7
00:00:29,860 --> 00:00:33,489
little<font color="#E5E5E5"> bit animation about how it works</font>

8
00:00:31,720 --> 00:00:35,920
<font color="#E5E5E5">and then give you a little bit taste of</font>

9
00:00:33,489 --> 00:00:39,300
what<font color="#CCCCCC"> are the implementation details</font><font color="#E5E5E5"> that</font>

10
00:00:35,920 --> 00:00:44,220
we face when we<font color="#E5E5E5"> implement our systems</font>

11
00:00:39,300 --> 00:00:49,750
followed<font color="#E5E5E5"> by the followed by the</font>

12
00:00:44,220 --> 00:00:51,220
evaluation<font color="#E5E5E5"> and conclusion so mobile</font>

13
00:00:49,750 --> 00:00:52,239
malware is on the rising<font color="#E5E5E5"> this is not a</font>

14
00:00:51,220 --> 00:00:54,850
news for<font color="#E5E5E5"> everybody</font>

15
00:00:52,239 --> 00:00:56,649
<font color="#CCCCCC">in general things many people joke about</font>

16
00:00:54,850 --> 00:01:00,610
it and<font color="#CCCCCC"> say it's Internet of</font><font color="#E5E5E5"> insecure</font>

17
00:00:56,649 --> 00:01:02,110
things<font color="#CCCCCC"> so with all the malware</font><font color="#E5E5E5"> out there</font>

18
00:01:00,610 --> 00:01:04,149
some of<font color="#E5E5E5"> the malware actually make it to</font>

19
00:01:02,110 --> 00:01:08,920
<font color="#E5E5E5">the kernel and</font><font color="#CCCCCC"> retrieve arbitrary code</font>

20
00:01:04,149 --> 00:01:11,859
execution<font color="#E5E5E5"> in the kernel so arm is one of</font>

21
00:01:08,920 --> 00:01:15,340
the biggest embedded processors that's

22
00:01:11,859 --> 00:01:17,288
powering<font color="#E5E5E5"> more than</font><font color="#CCCCCC"> 60% of the</font><font color="#E5E5E5"> embedded</font>

23
00:01:15,340 --> 00:01:20,289
devices<font color="#E5E5E5"> they</font><font color="#CCCCCC"> introduced something called</font>

24
00:01:17,289 --> 00:01:22,899
<font color="#E5E5E5">a trust zone which was talked</font><font color="#CCCCCC"> about a</font>

25
00:01:20,289 --> 00:01:24,310
lot<font color="#E5E5E5"> in the previous couple talks so</font>

26
00:01:22,899 --> 00:01:27,490
<font color="#E5E5E5">trans don't provide a system-wide</font>

27
00:01:24,310 --> 00:01:31,179
protection that delivers<font color="#CCCCCC"> partitions</font>

28
00:01:27,490 --> 00:01:33,520
between<font color="#E5E5E5"> resources the the non trusted</font>

29
00:01:31,179 --> 00:01:37,179
resources runs the content rich

30
00:01:33,520 --> 00:01:39,939
<font color="#E5E5E5">environments for example running your</font>

31
00:01:37,179 --> 00:01:42,009
Angry Bird<font color="#E5E5E5"> in the normal world and then</font>

32
00:01:39,939 --> 00:01:46,288
the trusted domain runs your<font color="#E5E5E5"> security</font>

33
00:01:42,009 --> 00:01:49,149
services such as a<font color="#E5E5E5"> ESN encryption and</font>

34
00:01:46,289 --> 00:01:50,740
this protection<font color="#CCCCCC"> what's</font><font color="#E5E5E5"> different than</font>

35
00:01:49,149 --> 00:01:53,409
some<font color="#E5E5E5"> of the previous</font><font color="#CCCCCC"> eee is that it</font>

36
00:01:50,740 --> 00:01:57,098
provides<font color="#E5E5E5"> a system-wide protection that</font>

37
00:01:53,409 --> 00:02:00,009
<font color="#CCCCCC">spans</font><font color="#E5E5E5"> across processor memory and i/o</font>

38
00:01:57,099 --> 00:02:02,200
devices as we can see<font color="#E5E5E5"> later it actually</font>

39
00:02:00,009 --> 00:02:06,099
<font color="#CCCCCC">modifies the cache in the</font><font color="#E5E5E5"> cache</font>

40
00:02:02,200 --> 00:02:08,979
architecture as well<font color="#E5E5E5"> so there are many</font>

41
00:02:06,099 --> 00:02:11,860
<font color="#E5E5E5">products out there that use</font><font color="#CCCCCC"> charging</font>

42
00:02:08,979 --> 00:02:15,360
devices<font color="#CCCCCC"> transition</font><font color="#E5E5E5"> services such as</font>

43
00:02:11,860 --> 00:02:16,959
<font color="#CCCCCC">samsung knox</font><font color="#E5E5E5"> Restonic Sierra where</font>

44
00:02:15,360 --> 00:02:19,659
Qualcomm

45
00:02:16,959 --> 00:02:22,719
and<font color="#E5E5E5"> Qualcomm</font><font color="#CCCCCC"> actually spur a little bit</font>

46
00:02:19,659 --> 00:02:26,129
news on in<font color="#E5E5E5"> blackhat where people start</font>

47
00:02:22,719 --> 00:02:30,159
<font color="#CCCCCC">looking into the water</font><font color="#E5E5E5"> abilities inside</font>

48
00:02:26,129 --> 00:02:32,370
so besides the software<font color="#E5E5E5"> side right if we</font>

49
00:02:30,159 --> 00:02:35,290
think<font color="#E5E5E5"> about the physical assistant</font>

50
00:02:32,370 --> 00:02:37,780
<font color="#CCCCCC">sometimes your smartphone's</font><font color="#E5E5E5"> actually go</font>

51
00:02:35,290 --> 00:02:39,159
<font color="#CCCCCC">a lot</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> mobile than</font><font color="#E5E5E5"> you wish to for</font>

52
00:02:37,780 --> 00:02:42,219
example<font color="#CCCCCC"> when you're</font><font color="#E5E5E5"> just reading the</font>

53
00:02:39,159 --> 00:02:43,929
phone<font color="#CCCCCC"> it could get snapped</font><font color="#E5E5E5"> under in the</font>

54
00:02:42,219 --> 00:02:45,969
train or<font color="#CCCCCC"> something and then</font><font color="#E5E5E5"> you lose</font>

55
00:02:43,930 --> 00:02:48,370
physical<font color="#E5E5E5"> percent possession of your</font>

56
00:02:45,969 --> 00:02:52,450
<font color="#E5E5E5">phone so how does this translate to</font>

57
00:02:48,370 --> 00:02:53,919
security<font color="#E5E5E5"> actually once you lose the</font>

58
00:02:52,450 --> 00:02:56,349
<font color="#E5E5E5">physical possession of your phone</font>

59
00:02:53,919 --> 00:02:58,930
there's the attacker can do a lot<font color="#CCCCCC"> more</font>

60
00:02:56,349 --> 00:03:01,119
<font color="#CCCCCC">than just software</font><font color="#E5E5E5"> attacks they can</font>

61
00:02:58,930 --> 00:03:03,430
launch something<font color="#E5E5E5"> called the Copa attack</font>

62
00:03:01,120 --> 00:03:04,659
which is<font color="#E5E5E5"> probably not a new topic</font><font color="#CCCCCC"> for</font>

63
00:03:03,430 --> 00:03:07,480
everyone here

64
00:03:04,659 --> 00:03:09,959
it relies<font color="#E5E5E5"> it exploits the physical</font>

65
00:03:07,480 --> 00:03:12,310
memory<font color="#CCCCCC"> remanence feature of</font><font color="#E5E5E5"> my memory</font>

66
00:03:09,959 --> 00:03:13,989
<font color="#CCCCCC">contrary to popular belief where you</font>

67
00:03:12,310 --> 00:03:17,590
think if you turn off<font color="#CCCCCC"> the</font><font color="#E5E5E5"> power of a</font>

68
00:03:13,989 --> 00:03:20,230
<font color="#CCCCCC">computer the memory contents are gone</font>

69
00:03:17,590 --> 00:03:23,500
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> not true especially when you</font>

70
00:03:20,230 --> 00:03:26,078
freeze the RAM so initially this<font color="#E5E5E5"> attack</font>

71
00:03:23,500 --> 00:03:28,389
was published<font color="#E5E5E5"> and launched on</font><font color="#CCCCCC"> the</font>

72
00:03:26,079 --> 00:03:30,940
desktops where they can recover memory

73
00:03:28,389 --> 00:03:32,949
<font color="#E5E5E5">encryption keys inside</font><font color="#CCCCCC"> the RAM it was</font>

74
00:03:30,940 --> 00:03:36,540
later demonstrated on those mobile

75
00:03:32,949 --> 00:03:39,129
<font color="#CCCCCC">phones</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> therefore the threat of</font>

76
00:03:36,540 --> 00:03:42,900
of cope would when you lose the scope<font color="#E5E5E5"> is</font>

77
00:03:39,129 --> 00:03:42,899
that<font color="#CCCCCC"> possession of the phone</font><font color="#E5E5E5"> is real</font>

78
00:03:43,439 --> 00:03:50,349
<font color="#E5E5E5">recognizing the threat there has been</font>

79
00:03:45,669 --> 00:03:52,449
multiple defenses<font color="#CCCCCC"> that were proposed on</font>

80
00:03:50,349 --> 00:03:55,720
how to fix this type of cope with

81
00:03:52,449 --> 00:03:58,180
attacks where the significance of<font color="#CCCCCC"> COBOL</font>

82
00:03:55,720 --> 00:04:00,728
<font color="#CCCCCC">that have is despite</font><font color="#E5E5E5"> the software</font>

83
00:03:58,180 --> 00:04:02,500
protection<font color="#CCCCCC"> at hacker</font><font color="#E5E5E5"> as long as they get</font>

84
00:04:00,729 --> 00:04:05,519
<font color="#E5E5E5">they get their hands on</font><font color="#CCCCCC"> your mobile</font>

85
00:04:02,500 --> 00:04:09,159
devices they can<font color="#E5E5E5"> read all the memory so</font>

86
00:04:05,519 --> 00:04:11,949
most<font color="#E5E5E5"> of</font><font color="#CCCCCC"> defense focuses on how do we do</font>

87
00:04:09,159 --> 00:04:14,978
<font color="#E5E5E5">things without the involvement of memory</font>

88
00:04:11,949 --> 00:04:17,320
<font color="#E5E5E5">therefore the first one is on</font><font color="#CCCCCC"> the random</font>

89
00:04:14,979 --> 00:04:20,019
so encryption on AES followed by<font color="#CCCCCC"> a</font>

90
00:04:17,320 --> 00:04:23,830
series of works<font color="#E5E5E5"> on using iteration</font>

91
00:04:20,019 --> 00:04:27,430
coprocessors or using cash registers<font color="#E5E5E5"> to</font>

92
00:04:23,830 --> 00:04:30,370
achieve encryptions<font color="#CCCCCC"> however none of</font><font color="#E5E5E5"> this</font>

93
00:04:27,430 --> 00:04:30,810
work<font color="#E5E5E5"> actually look at multi vector</font>

94
00:04:30,370 --> 00:04:32,550
attacker

95
00:04:30,810 --> 00:04:35,630
where you launch both software attacks

96
00:04:32,550 --> 00:04:37,800
and how their attacks which would<font color="#E5E5E5"> be if</font>

97
00:04:35,630 --> 00:04:39,389
for example<font color="#CCCCCC"> if you are a government</font>

98
00:04:37,800 --> 00:04:42,150
<font color="#CCCCCC">state's</font><font color="#E5E5E5"> trying to crack a phone or</font>

99
00:04:39,389 --> 00:04:43,830
<font color="#E5E5E5">you're some really persistent attackers</font>

100
00:04:42,150 --> 00:04:45,570
who really want the contents on the

101
00:04:43,830 --> 00:04:48,510
phone then<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to pay the price of</font>

102
00:04:45,570 --> 00:04:53,909
<font color="#E5E5E5">using both hardware attacks and malware</font>

103
00:04:48,510 --> 00:04:59,099
exploits<font color="#CCCCCC"> to get to the mobile</font><font color="#E5E5E5"> phone</font><font color="#CCCCCC"> so</font>

104
00:04:53,910 --> 00:05:02,419
the goal<font color="#E5E5E5"> of our</font><font color="#CCCCCC"> system is to defend</font>

105
00:04:59,100 --> 00:05:04,889
against such multi-vector<font color="#E5E5E5"> emissaries in</font>

106
00:05:02,419 --> 00:05:07,590
<font color="#CCCCCC">particularly we want to defense against</font>

107
00:05:04,889 --> 00:05:09,000
<font color="#E5E5E5">two types of attackers the first type of</font>

108
00:05:07,590 --> 00:05:11,849
attacker is the physical<font color="#E5E5E5"> memory</font>

109
00:05:09,000 --> 00:05:13,889
disclosure attack or which is<font color="#CCCCCC"> the Koopa</font>

110
00:05:11,850 --> 00:05:18,330
<font color="#E5E5E5">that</font><font color="#CCCCCC"> hack where you gain</font><font color="#E5E5E5"> unrestricted</font>

111
00:05:13,889 --> 00:05:22,410
<font color="#CCCCCC">read access</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> memory and second one</font>

112
00:05:18,330 --> 00:05:25,919
is<font color="#E5E5E5"> we assume that hacker can exploit the</font>

113
00:05:22,410 --> 00:05:28,320
OS through some<font color="#E5E5E5"> were abilities so they</font>

114
00:05:25,919 --> 00:05:31,830
can get control<font color="#E5E5E5"> to the page table and</font>

115
00:05:28,320 --> 00:05:34,500
things<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that and the design</font><font color="#E5E5E5"> goal of</font>

116
00:05:31,830 --> 00:05:37,530
our system is to<font color="#E5E5E5"> provide confidentiality</font>

117
00:05:34,500 --> 00:05:39,479
and integrity<font color="#CCCCCC"> to both</font><font color="#E5E5E5"> Cole and data</font>

118
00:05:37,530 --> 00:05:42,900
segments of the<font color="#E5E5E5"> binary as well as the</font>

119
00:05:39,479 --> 00:05:45,539
runtime data's so the incentive for

120
00:05:42,900 --> 00:05:48,690
confidentiality<font color="#E5E5E5"> is that if there are</font>

121
00:05:45,539 --> 00:05:50,700
<font color="#CCCCCC">some intellectual properties secret</font>

122
00:05:48,690 --> 00:05:54,180
codes<font color="#CCCCCC"> sensitive data that you store in</font>

123
00:05:50,700 --> 00:05:55,800
this data segment of the<font color="#CCCCCC"> Cole you really</font>

124
00:05:54,180 --> 00:05:57,630
want to<font color="#CCCCCC"> protect it</font><font color="#E5E5E5"> such that other</font>

125
00:05:55,800 --> 00:06:00,510
people will<font color="#E5E5E5"> find it hard to do reverse</font>

126
00:05:57,630 --> 00:06:02,430
<font color="#E5E5E5">engineering</font><font color="#CCCCCC"> on it the integrity powers</font>

127
00:06:00,510 --> 00:06:05,780
<font color="#E5E5E5">we want to make verify that we have</font><font color="#CCCCCC"> the</font>

128
00:06:02,430 --> 00:06:05,780
<font color="#CCCCCC">correct program behavior</font>

129
00:06:06,680 --> 00:06:12,330
so this is our<font color="#CCCCCC"> fret model it's a</font>

130
00:06:10,530 --> 00:06:15,119
simplified wheel of the program

131
00:06:12,330 --> 00:06:17,250
hierarchy in the ARM processors<font color="#E5E5E5"> here I</font>

132
00:06:15,120 --> 00:06:20,850
oversimplify a little bit where we<font color="#CCCCCC"> only</font>

133
00:06:17,250 --> 00:06:22,910
have processor cache and the memory as I

134
00:06:20,850 --> 00:06:26,610
talked about<font color="#E5E5E5"> in the very beginning</font>

135
00:06:22,910 --> 00:06:29,220
<font color="#E5E5E5">resources in arm devices are divided</font>

136
00:06:26,610 --> 00:06:31,260
into<font color="#E5E5E5"> the secure and the non secure in</font>

137
00:06:29,220 --> 00:06:34,200
the memory<font color="#E5E5E5"> you basically assign a</font>

138
00:06:31,260 --> 00:06:38,219
segment<font color="#CCCCCC"> to the secure and you assign a</font>

139
00:06:34,200 --> 00:06:40,950
segment<font color="#CCCCCC"> to the non secure however in the</font>

140
00:06:38,220 --> 00:06:43,280
cache of<font color="#E5E5E5"> arm devices it's a little bit</font>

141
00:06:40,950 --> 00:06:44,670
different<font color="#CCCCCC"> where allocations knock fix</font>

142
00:06:43,280 --> 00:06:48,359
<font color="#E5E5E5">they</font>

143
00:06:44,670 --> 00:06:50,490
additional bid call<font color="#CCCCCC"> NSP</font><font color="#E5E5E5"> into the cache</font>

144
00:06:48,360 --> 00:06:55,800
lines<font color="#E5E5E5"> such that each cache line can</font>

145
00:06:50,490 --> 00:06:57,420
either be<font color="#E5E5E5"> secured on a secure so what's</font>

146
00:06:55,800 --> 00:07:01,590
the capability<font color="#CCCCCC"> of the attacker</font><font color="#E5E5E5"> in this</font>

147
00:06:57,420 --> 00:07:03,750
type of model<font color="#E5E5E5"> cope would attack can read</font>

148
00:07:01,590 --> 00:07:05,880
or can gain can read all the<font color="#E5E5E5"> physical</font>

149
00:07:03,750 --> 00:07:10,340
memory<font color="#E5E5E5"> therefore it can read both</font><font color="#CCCCCC"> the</font>

150
00:07:05,880 --> 00:07:13,400
<font color="#CCCCCC">secure memory and the non</font><font color="#E5E5E5"> secure memory</font>

151
00:07:10,340 --> 00:07:17,400
the software attacker<font color="#E5E5E5"> on the other hand</font>

152
00:07:13,400 --> 00:07:20,489
<font color="#E5E5E5">compromised the normal normal</font><font color="#CCCCCC"> word</font><font color="#E5E5E5"> rich</font>

153
00:07:17,400 --> 00:07:22,530
OS kernel therefore they get unlimited

154
00:07:20,490 --> 00:07:24,990
<font color="#E5E5E5">read access to</font><font color="#CCCCCC"> the normal word memory</font>

155
00:07:22,530 --> 00:07:27,270
<font color="#E5E5E5">and also they get access</font><font color="#CCCCCC"> to the</font>

156
00:07:24,990 --> 00:07:31,340
processor cache of<font color="#CCCCCC"> the non secure cache</font>

157
00:07:27,270 --> 00:07:31,340
as well because they can choose the CPU

158
00:07:32,090 --> 00:07:39,239
so<font color="#E5E5E5"> sounds like the only place</font><font color="#CCCCCC"> without</font>

159
00:07:35,640 --> 00:07:41,760
<font color="#CCCCCC">attacker</font><font color="#E5E5E5"> is the secure cache and I feel</font>

160
00:07:39,240 --> 00:07:48,090
like that's<font color="#CCCCCC"> the Haven so I'm putting my</font>

161
00:07:41,760 --> 00:07:52,560
system in there so here we go<font color="#CCCCCC"> into an</font>

162
00:07:48,090 --> 00:07:55,950
overview<font color="#CCCCCC"> of how the system</font><font color="#E5E5E5"> works we have</font>

163
00:07:52,560 --> 00:07:58,470
<font color="#CCCCCC">we designed to execution power modes one</font>

164
00:07:55,950 --> 00:08:02,340
is<font color="#E5E5E5"> secure mode the other one is normal</font>

165
00:07:58,470 --> 00:08:05,250
non secure mo insecure<font color="#E5E5E5"> mo we use the</font>

166
00:08:02,340 --> 00:08:08,340
secure the secure cache as the execution

167
00:08:05,250 --> 00:08:11,490
<font color="#E5E5E5">environment memory and non secure mode</font>

168
00:08:08,340 --> 00:08:13,049
we use the non secure cash<font color="#E5E5E5"> there are</font>

169
00:08:11,490 --> 00:08:16,380
actually all pros and cons<font color="#E5E5E5"> that we'll</font>

170
00:08:13,050 --> 00:08:18,920
discuss further details in the paper<font color="#CCCCCC"> but</font>

171
00:08:16,380 --> 00:08:23,730
let's go<font color="#E5E5E5"> into the how secure mode works</font>

172
00:08:18,920 --> 00:08:26,160
so applications are encrypted in<font color="#E5E5E5"> memory</font>

173
00:08:23,730 --> 00:08:31,350
<font color="#E5E5E5">and then when they</font><font color="#CCCCCC"> need to be executed</font>

174
00:08:26,160 --> 00:08:34,140
<font color="#CCCCCC">they gets loaded into</font><font color="#E5E5E5"> the cache the key</font>

175
00:08:31,350 --> 00:08:36,659
is loaded<font color="#E5E5E5"> from the secure storage and</font>

176
00:08:34,140 --> 00:08:38,250
when the application<font color="#CCCCCC"> binary is loaded</font>

177
00:08:36,659 --> 00:08:41,150
into cache so it's the application

178
00:08:38,250 --> 00:08:42,900
<font color="#CCCCCC">context</font><font color="#E5E5E5"> because when you consider the</font>

179
00:08:41,150 --> 00:08:44,819
execution of a program

180
00:08:42,900 --> 00:08:47,810
it includes the data<font color="#CCCCCC"> segment code</font>

181
00:08:44,820 --> 00:08:50,280
segment<font color="#E5E5E5"> also</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> Stags heaps and other</font>

182
00:08:47,810 --> 00:08:52,609
application<font color="#CCCCCC"> contacts environment which</font>

183
00:08:50,280 --> 00:08:54,750
we want<font color="#E5E5E5"> to store or inside</font><font color="#CCCCCC"> the cache</font>

184
00:08:52,610 --> 00:08:57,470
such that we can protect the entire

185
00:08:54,750 --> 00:09:02,299
population and<font color="#E5E5E5"> the execution</font>

186
00:08:57,470 --> 00:09:02,299
so the application is then decrypted

187
00:09:06,499 --> 00:09:13,319
<font color="#CCCCCC">once it's decrypted</font><font color="#E5E5E5"> we can direct our</font>

188
00:09:10,379 --> 00:09:17,220
control flow inside the code that's

189
00:09:13,319 --> 00:09:19,529
loaded entirely inside<font color="#E5E5E5"> the cache so well</font>

190
00:09:17,220 --> 00:09:22,079
but however when we need

191
00:09:19,529 --> 00:09:24,329
there's always task switching between<font color="#E5E5E5"> in</font>

192
00:09:22,079 --> 00:09:26,219
the<font color="#E5E5E5"> operating system when there's</font><font color="#CCCCCC"> a task</font>

193
00:09:24,329 --> 00:09:30,868
switch for example when we need<font color="#E5E5E5"> to start</font>

194
00:09:26,220 --> 00:09:32,879
playing<font color="#E5E5E5"> our mp3 music there's it's not</font>

195
00:09:30,869 --> 00:09:34,589
necessary to erase the<font color="#CCCCCC"> entire thing we</font>

196
00:09:32,879 --> 00:09:36,569
can just leave them in<font color="#E5E5E5"> the secure cache</font>

197
00:09:34,589 --> 00:09:39,749
because the in her protection<font color="#E5E5E5"> of</font>

198
00:09:36,569 --> 00:09:41,579
trazodone where as<font color="#E5E5E5"> long as it's</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> less</font>

199
00:09:39,749 --> 00:09:41,999
secure the normal<font color="#CCCCCC"> work but the</font>

200
00:09:41,579 --> 00:09:46,609
<font color="#CCCCCC">compromise</font>

201
00:09:41,999 --> 00:09:46,610
normal work<font color="#CCCCCC"> rich</font><font color="#E5E5E5"> OS cannot touch</font><font color="#CCCCCC"> it</font>

202
00:09:46,759 --> 00:09:50,970
however<font color="#E5E5E5"> things can be a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit more</font>

203
00:09:49,170 --> 00:09:54,029
difficult when<font color="#CCCCCC"> you try to use the</font><font color="#E5E5E5"> normal</font>

204
00:09:50,970 --> 00:09:58,739
<font color="#E5E5E5">work</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> the incentive</font><font color="#CCCCCC"> for us to use</font>

205
00:09:54,029 --> 00:10:02,040
<font color="#E5E5E5">normal work</font><font color="#CCCCCC"> cache is because if</font><font color="#E5E5E5"> we place</font>

206
00:09:58,739 --> 00:10:03,809
everything<font color="#E5E5E5"> in secure cache yes we have</font>

207
00:10:02,040 --> 00:10:06,569
less overheads<font color="#E5E5E5"> during the test which</font>

208
00:10:03,809 --> 00:10:10,649
however<font color="#CCCCCC"> time</font><font color="#E5E5E5"> that also implies if we</font>

209
00:10:06,569 --> 00:10:13,410
<font color="#E5E5E5">have a</font><font color="#CCCCCC"> one-er ability</font><font color="#E5E5E5"> inside the the</font>

210
00:10:10,649 --> 00:10:15,059
code itself which is nowadays<font color="#E5E5E5"> it's hard</font>

211
00:10:13,410 --> 00:10:18,480
to guarantee<font color="#CCCCCC"> that codes are free of</font>

212
00:10:15,059 --> 00:10:21,059
vulnerabilities then our trust zone is

213
00:10:18,480 --> 00:10:24,480
<font color="#CCCCCC">own - and when we lose</font><font color="#E5E5E5"> control</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> our</font>

214
00:10:21,059 --> 00:10:29,730
just wrong<font color="#CCCCCC"> it becomes impossible to talk</font>

215
00:10:24,480 --> 00:10:32,249
<font color="#CCCCCC">about</font><font color="#E5E5E5"> security so</font><font color="#CCCCCC"> with the using the</font>

216
00:10:29,730 --> 00:10:35,669
normal<font color="#CCCCCC"> word</font><font color="#E5E5E5"> hash we can sort of contain</font>

217
00:10:32,249 --> 00:10:38,519
our program such that when there's

218
00:10:35,669 --> 00:10:42,569
damage<font color="#E5E5E5"> it's limited again the</font>

219
00:10:38,519 --> 00:10:45,119
applications are encrypted<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the normal</font>

220
00:10:42,569 --> 00:10:47,939
world memory<font color="#E5E5E5"> and just remind you</font><font color="#CCCCCC"> D the</font>

221
00:10:45,119 --> 00:10:50,220
<font color="#E5E5E5">RAM there means the attacker has read</font>

222
00:10:47,939 --> 00:10:52,679
access to<font color="#CCCCCC"> both the normal</font><font color="#E5E5E5"> remembering</font>

223
00:10:50,220 --> 00:10:54,540
and the secure memory and the malicious

224
00:10:52,679 --> 00:10:57,329
had means that they have control<font color="#E5E5E5"> of the</font>

225
00:10:54,540 --> 00:11:02,160
end<font color="#E5E5E5"> the attacker also has the control</font>

226
00:10:57,329 --> 00:11:06,089
<font color="#CCCCCC">over</font><font color="#E5E5E5"> the entire normal war memory so the</font>

227
00:11:02,160 --> 00:11:08,939
first step we did is post normal or OS

228
00:11:06,089 --> 00:11:10,060
because if we are<font color="#E5E5E5"> going to use the</font>

229
00:11:08,939 --> 00:11:13,779
<font color="#E5E5E5">normal</font>

230
00:11:10,060 --> 00:11:15,878
cash<font color="#E5E5E5"> and the normal OS has access to</font>

231
00:11:13,779 --> 00:11:19,589
<font color="#CCCCCC">cash then we are</font><font color="#E5E5E5"> fighting a battle with</font>

232
00:11:15,879 --> 00:11:22,209
without results so we<font color="#CCCCCC"> post that OS</font><font color="#E5E5E5"> and</font>

233
00:11:19,589 --> 00:11:25,300
then we load the<font color="#CCCCCC"> application into</font><font color="#E5E5E5"> the</font>

234
00:11:22,209 --> 00:11:26,619
the secure or the normal cash<font color="#CCCCCC"> and then</font>

235
00:11:25,300 --> 00:11:29,800
we'll turn in the context just like<font color="#CCCCCC"> we</font>

236
00:11:26,620 --> 00:11:32,470
<font color="#CCCCCC">did</font><font color="#E5E5E5"> in the secure and then the case</font>

237
00:11:29,800 --> 00:11:35,709
manager need to verify<font color="#E5E5E5"> the execution</font>

238
00:11:32,470 --> 00:11:38,579
environment of the<font color="#CCCCCC"> secure inside this</font>

239
00:11:35,709 --> 00:11:41,680
verification<font color="#CCCCCC"> why it's different</font><font color="#E5E5E5"> and</font>

240
00:11:38,579 --> 00:11:43,660
secure<font color="#E5E5E5"> cache execution mode is because</font>

241
00:11:41,680 --> 00:11:48,339
if you<font color="#E5E5E5"> think about it most of</font><font color="#CCCCCC"> the modern</font>

242
00:11:43,660 --> 00:11:51,639
cache use<font color="#E5E5E5"> P</font><font color="#CCCCCC"> IPTA physically index</font>

243
00:11:48,339 --> 00:11:53,199
physically tagged caches<font color="#E5E5E5"> however the</font>

244
00:11:51,639 --> 00:11:55,120
processor actually<font color="#E5E5E5"> runs in virtual</font>

245
00:11:53,199 --> 00:11:57,819
<font color="#CCCCCC">memory model</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> there's there's this</font>

246
00:11:55,120 --> 00:11:59,800
translation from the<font color="#E5E5E5"> virtual address to</font>

247
00:11:57,819 --> 00:12:02,740
physical address<font color="#E5E5E5"> then map to the cache</font>

248
00:11:59,800 --> 00:12:03,969
and if you just<font color="#E5E5E5"> where</font><font color="#CCCCCC"> if I contents in</font>

249
00:12:02,740 --> 00:12:07,629
the cache it's not enough because

250
00:12:03,970 --> 00:12:09,430
attacker can just redirect the your

251
00:12:07,629 --> 00:12:11,980
virtual pointer to a different place<font color="#CCCCCC"> so</font>

252
00:12:09,430 --> 00:12:14,589
<font color="#CCCCCC">we also verify the TLB ease and things</font>

253
00:12:11,980 --> 00:12:19,870
like<font color="#CCCCCC"> that and the details are in</font><font color="#E5E5E5"> the</font>

254
00:12:14,589 --> 00:12:22,059
Devils are<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> paper so similar to</font>

255
00:12:19,870 --> 00:12:29,319
the<font color="#E5E5E5"> secure we load a key and we unpack</font>

256
00:12:22,059 --> 00:12:31,689
the applications once it's<font color="#E5E5E5"> unpacked</font>

257
00:12:29,319 --> 00:12:33,490
we can start<font color="#E5E5E5"> executing do all sort of</font>

258
00:12:31,689 --> 00:12:37,209
stuff for example decryption encryption

259
00:12:33,490 --> 00:12:39,449
<font color="#CCCCCC">kernel</font><font color="#E5E5E5"> checks once it's done when we</font>

260
00:12:37,209 --> 00:12:42,069
need to<font color="#E5E5E5"> switch</font><font color="#CCCCCC"> are the type of tosses</font>

261
00:12:39,449 --> 00:12:45,519
the application contacts need to be safe

262
00:12:42,069 --> 00:12:49,209
because the<font color="#E5E5E5"> normal cash is accessible by</font>

263
00:12:45,519 --> 00:12:51,720
the<font color="#E5E5E5"> adversaries so we encrypt the</font>

264
00:12:49,209 --> 00:12:54,309
content<font color="#E5E5E5"> using the Packer again and</font>

265
00:12:51,720 --> 00:12:57,069
safety encrypted content in the memory

266
00:12:54,309 --> 00:12:58,779
<font color="#E5E5E5">and because Coppa only has to read</font>

267
00:12:57,069 --> 00:13:03,910
access<font color="#CCCCCC"> to the memory it cannot temper</font>

268
00:12:58,779 --> 00:13:06,399
with our encrypted contacts so now I

269
00:13:03,910 --> 00:13:09,449
<font color="#E5E5E5">give you</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> to - - details in</font>

270
00:13:06,399 --> 00:13:12,459
<font color="#E5E5E5">my implementation</font><font color="#CCCCCC"> the first detail is</font>

271
00:13:09,449 --> 00:13:14,439
controlling the cash so cash is designed

272
00:13:12,459 --> 00:13:17,439
to be a transient feature in processors

273
00:13:14,439 --> 00:13:20,679
<font color="#E5E5E5">where you're supposed to be</font><font color="#CCCCCC"> just use it</font>

274
00:13:17,439 --> 00:13:22,010
as a black magic<font color="#E5E5E5"> how do we control it we</font>

275
00:13:20,679 --> 00:13:24,680
use the

276
00:13:22,010 --> 00:13:27,410
<font color="#E5E5E5">-</font><font color="#CCCCCC"> Hong Kong registers</font><font color="#E5E5E5"> so in arm in order</font>

277
00:13:24,680 --> 00:13:29,269
to and give some specific and

278
00:13:27,410 --> 00:13:31,370
performance enhancement capability to

279
00:13:29,269 --> 00:13:33,380
designers they introduced something

280
00:13:31,370 --> 00:13:35,330
called a<font color="#CCCCCC"> cash knockdown such that if you</font>

281
00:13:33,380 --> 00:13:38,810
<font color="#CCCCCC">know a cash is going to be frequently</font>

282
00:13:35,330 --> 00:13:42,079
used you can<font color="#E5E5E5"> lock</font><font color="#CCCCCC"> that down in order to</font>

283
00:13:38,810 --> 00:13:45,890
avoid cash pollutions<font color="#E5E5E5"> the granularity</font><font color="#CCCCCC"> of</font>

284
00:13:42,079 --> 00:13:49,399
<font color="#E5E5E5">the locking in in our processor at the</font>

285
00:13:45,890 --> 00:13:52,760
cortex a8<font color="#CCCCCC"> is per cache way and there</font><font color="#E5E5E5"> are</font>

286
00:13:49,399 --> 00:13:56,779
<font color="#E5E5E5">eight cache ways of a total size 256 KB</font>

287
00:13:52,760 --> 00:14:00,019
<font color="#CCCCCC">of l2 unified cache in cortex a8</font><font color="#E5E5E5"> so we</font>

288
00:13:56,779 --> 00:14:06,709
can<font color="#E5E5E5"> either lock the caches 32 KB 64 KB</font>

289
00:14:00,019 --> 00:14:08,420
<font color="#E5E5E5">96</font><font color="#CCCCCC"> KP</font><font color="#E5E5E5"> so how do we lock the cache right</font>

290
00:14:06,709 --> 00:14:10,569
the first step is we disable the local

291
00:14:08,420 --> 00:14:14,060
<font color="#CCCCCC">errors we make sure nobody can bother us</font>

292
00:14:10,570 --> 00:14:18,769
<font color="#CCCCCC">the second step is</font><font color="#E5E5E5"> we enable the caching</font>

293
00:14:14,060 --> 00:14:20,930
in the of<font color="#E5E5E5"> the memory area and then we</font>

294
00:14:18,769 --> 00:14:23,420
disable the<font color="#E5E5E5"> caching of logical</font><font color="#CCCCCC"> and order</font>

295
00:14:20,930 --> 00:14:26,420
stack<font color="#E5E5E5"> the reason why we need to disable</font>

296
00:14:23,420 --> 00:14:28,969
<font color="#E5E5E5">that is if we enable the caching of the</font>

297
00:14:26,420 --> 00:14:31,729
loader colon stack<font color="#E5E5E5"> when we look when we</font>

298
00:14:28,970 --> 00:14:33,770
<font color="#E5E5E5">try</font><font color="#CCCCCC"> to load the memory a lot the other</font>

299
00:14:31,730 --> 00:14:35,660
values that<font color="#E5E5E5"> are associated with the</font>

300
00:14:33,770 --> 00:14:37,760
loader program will<font color="#E5E5E5"> also be loaded into</font>

301
00:14:35,660 --> 00:14:40,100
cache and<font color="#CCCCCC"> we really don't want</font><font color="#E5E5E5"> to lock</font>

302
00:14:37,760 --> 00:14:43,100
that particular loader code in the cache

303
00:14:40,100 --> 00:14:46,130
<font color="#CCCCCC">instead of our stuff like the program</font>

304
00:14:43,100 --> 00:14:50,600
execution space of the<font color="#E5E5E5"> application that</font>

305
00:14:46,130 --> 00:14:53,360
<font color="#E5E5E5">we want to protect</font><font color="#CCCCCC"> once we are once we</font>

306
00:14:50,600 --> 00:14:58,010
disable<font color="#CCCCCC"> the caching</font><font color="#E5E5E5"> on those</font><font color="#CCCCCC"> loader</font>

307
00:14:53,360 --> 00:15:00,740
<font color="#CCCCCC">codes</font><font color="#E5E5E5"> we invalidate the caching for the</font>

308
00:14:58,010 --> 00:15:02,990
memory area that we want to<font color="#E5E5E5"> low</font><font color="#CCCCCC"> so why</font>

309
00:15:00,740 --> 00:15:07,399
do we did that the reason we did that is

310
00:15:02,990 --> 00:15:10,610
because in many<font color="#CCCCCC"> of our</font><font color="#E5E5E5"> computer</font>

311
00:15:07,399 --> 00:15:12,560
architectures such as<font color="#E5E5E5"> arm you don't have</font>

312
00:15:10,610 --> 00:15:14,959
<font color="#CCCCCC">a notion</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have multiple levels of</font>

313
00:15:12,560 --> 00:15:18,560
cache first first of<font color="#E5E5E5"> all so you have L 1</font>

314
00:15:14,959 --> 00:15:21,550
<font color="#CCCCCC">cache</font><font color="#E5E5E5"> l2 cache l3 cache and our caching</font>

315
00:15:18,560 --> 00:15:24,410
locking is<font color="#E5E5E5"> only enable on the l2 cache</font>

316
00:15:21,550 --> 00:15:27,050
therefore if<font color="#E5E5E5"> the memory area was</font>

317
00:15:24,410 --> 00:15:29,300
<font color="#E5E5E5">previously filled in the</font><font color="#CCCCCC"> l1 cache</font><font color="#E5E5E5"> then</font>

318
00:15:27,050 --> 00:15:32,329
we<font color="#CCCCCC"> loved the Alpha 2 cache we end up</font><font color="#E5E5E5"> not</font>

319
00:15:29,300 --> 00:15:34,699
locking<font color="#E5E5E5"> the cache at all that's why we</font>

320
00:15:32,329 --> 00:15:35,709
want<font color="#E5E5E5"> to validate it and then when we</font>

321
00:15:34,699 --> 00:15:37,359
load it in

322
00:15:35,710 --> 00:15:39,970
it would be automatically<font color="#CCCCCC"> filling</font><font color="#E5E5E5"> to</font>

323
00:15:37,360 --> 00:15:44,980
both l1 and l2<font color="#CCCCCC"> due</font><font color="#E5E5E5"> to the cash fielding</font>

324
00:15:39,970 --> 00:15:47,170
process inside the processor<font color="#E5E5E5"> and then we</font>

325
00:15:44,980 --> 00:15:49,090
basically we toggle<font color="#E5E5E5"> the switch and say</font>

326
00:15:47,170 --> 00:15:52,260
all the cash go to the<font color="#E5E5E5"> designated way of</font>

327
00:15:49,090 --> 00:15:54,880
<font color="#CCCCCC">locking for us once we do that we</font>

328
00:15:52,260 --> 00:15:56,920
iteratively load<font color="#E5E5E5"> them load the memory</font>

329
00:15:54,880 --> 00:15:59,860
<font color="#E5E5E5">causing cash fields on the memory area</font>

330
00:15:56,920 --> 00:16:02,260
once<font color="#E5E5E5"> the memory</font><font color="#CCCCCC"> area is all</font><font color="#E5E5E5"> fill in the</font>

331
00:15:59,860 --> 00:16:05,260
<font color="#E5E5E5">cache in other words there's a cache</font>

332
00:16:02,260 --> 00:16:07,439
line for each memory address that we're

333
00:16:05,260 --> 00:16:11,650
going<font color="#E5E5E5"> to use for the application space</font>

334
00:16:07,440 --> 00:16:13,390
<font color="#CCCCCC">we lock the cache so that's one of the</font>

335
00:16:11,650 --> 00:16:15,250
<font color="#E5E5E5">implementation details with it</font>

336
00:16:13,390 --> 00:16:17,890
the second<font color="#CCCCCC"> challenge that</font><font color="#E5E5E5"> we find</font>

337
00:16:15,250 --> 00:16:22,000
interesting is handling self modifying

338
00:16:17,890 --> 00:16:24,699
programs<font color="#CCCCCC"> if you record that we decrypt</font>

339
00:16:22,000 --> 00:16:29,650
<font color="#E5E5E5">our application entire in</font><font color="#CCCCCC"> cache</font><font color="#E5E5E5"> so it's</font>

340
00:16:24,700 --> 00:16:33,850
<font color="#E5E5E5">a in place decryption on on modern</font>

341
00:16:29,650 --> 00:16:38,199
computer caches<font color="#E5E5E5"> you have separated l1</font>

342
00:16:33,850 --> 00:16:40,150
data and l1 instruction<font color="#E5E5E5"> right so for</font>

343
00:16:38,200 --> 00:16:42,690
<font color="#E5E5E5">example when they are both loaded</font><font color="#CCCCCC"> as</font>

344
00:16:40,150 --> 00:16:46,209
<font color="#E5E5E5">encrypted in</font><font color="#CCCCCC"> the cache in</font><font color="#E5E5E5"> the l1 cache</font>

345
00:16:42,690 --> 00:16:47,950
when it's decrypted the<font color="#E5E5E5"> the decrypted</font>

346
00:16:46,210 --> 00:16:50,620
value is<font color="#CCCCCC"> actually store in the l1 data</font>

347
00:16:47,950 --> 00:16:54,430
<font color="#E5E5E5">so now we have a Miss matching between</font>

348
00:16:50,620 --> 00:16:56,170
<font color="#CCCCCC">the instruction and</font><font color="#E5E5E5"> data and if you're</font>

349
00:16:54,430 --> 00:16:58,270
<font color="#E5E5E5">lucky like</font><font color="#CCCCCC"> me you're gonna</font><font color="#E5E5E5"> see this</font>

350
00:16:56,170 --> 00:16:59,829
screen which<font color="#E5E5E5"> tells you the</font><font color="#CCCCCC"> colonel has</font>

351
00:16:58,270 --> 00:17:03,970
died<font color="#E5E5E5"> and you need to reboot the process</font>

352
00:16:59,830 --> 00:17:06,339
<font color="#E5E5E5">support so the common way</font><font color="#CCCCCC"> of fixing this</font>

353
00:17:03,970 --> 00:17:08,650
<font color="#E5E5E5">is you would flush and</font><font color="#CCCCCC"> everything to</font>

354
00:17:06,339 --> 00:17:10,980
care<font color="#E5E5E5"> everything</font><font color="#CCCCCC"> to memory</font><font color="#E5E5E5"> and then just</font>

355
00:17:08,650 --> 00:17:13,810
<font color="#E5E5E5">that the synchronization does its job</font>

356
00:17:10,980 --> 00:17:16,839
however<font color="#E5E5E5"> in our use case</font>

357
00:17:13,810 --> 00:17:18,399
flushing to memory is it's not possible

358
00:17:16,839 --> 00:17:22,329
because<font color="#E5E5E5"> we</font><font color="#CCCCCC"> want we don't want to flush</font>

359
00:17:18,400 --> 00:17:24,040
our secret contents into the<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

360
00:17:22,329 --> 00:17:27,520
memory we<font color="#E5E5E5"> wanted everything in to be</font>

361
00:17:24,040 --> 00:17:30,149
inside<font color="#E5E5E5"> the cache so again we have the</font>

362
00:17:27,520 --> 00:17:33,610
encrypted data once it's decrypted

363
00:17:30,150 --> 00:17:36,130
<font color="#E5E5E5">instead of saving it in l1 we erase</font>

364
00:17:33,610 --> 00:17:39,060
everything in l1 and and write direct<font color="#E5E5E5"> to</font>

365
00:17:36,130 --> 00:17:41,950
directly to l2<font color="#E5E5E5"> which is a unified cache</font>

366
00:17:39,060 --> 00:17:43,330
<font color="#E5E5E5">because it's the unified cache we don't</font>

367
00:17:41,950 --> 00:17:45,010
have to deal with<font color="#E5E5E5"> the incoherency</font>

368
00:17:43,330 --> 00:17:45,570
between the data cache and instruction

369
00:17:45,010 --> 00:17:50,110
cache

370
00:17:45,570 --> 00:17:54,760
and the way we we write<font color="#CCCCCC"> into ll2 unified</font>

371
00:17:50,110 --> 00:17:57,280
<font color="#E5E5E5">cache is by using the</font><font color="#CCCCCC"> l to write a</font>

372
00:17:54,760 --> 00:18:03,400
location feature that are common across

373
00:17:57,280 --> 00:18:06,790
<font color="#CCCCCC">many processors okay so now we</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> to</font>

374
00:18:03,400 --> 00:18:09,010
<font color="#CCCCCC">the</font><font color="#E5E5E5"> evaluation part so one of the</font>

375
00:18:06,790 --> 00:18:11,170
questions<font color="#E5E5E5"> I ask myself is</font><font color="#CCCCCC"> okay I'm gonna</font>

376
00:18:09,010 --> 00:18:13,390
put everything<font color="#E5E5E5"> in cash that decrypt the</font>

377
00:18:11,170 --> 00:18:15,640
application in cash<font color="#E5E5E5"> what type</font><font color="#CCCCCC"> of</font>

378
00:18:13,390 --> 00:18:23,040
<font color="#CCCCCC">application can I fit in the tiny teeny</font>

379
00:18:15,640 --> 00:18:26,350
<font color="#CCCCCC">cache right so with so we implement</font><font color="#E5E5E5"> two</font>

380
00:18:23,040 --> 00:18:28,810
applications using our framework<font color="#E5E5E5"> one is</font>

381
00:18:26,350 --> 00:18:31,449
the<font color="#CCCCCC"> color integrity check</font><font color="#E5E5E5"> the other one</font>

382
00:18:28,810 --> 00:18:34,510
is a suite of kernel suite of

383
00:18:31,450 --> 00:18:38,110
cryptographic functions<font color="#E5E5E5"> so as you can</font>

384
00:18:34,510 --> 00:18:40,180
see<font color="#E5E5E5"> in the in the table the the</font>

385
00:18:38,110 --> 00:18:43,060
cryptographic functions include RSA

386
00:18:40,180 --> 00:18:47,440
Chawla and AES<font color="#E5E5E5"> and it's of the size of</font>

387
00:18:43,060 --> 00:18:48,909
<font color="#E5E5E5">24 for</font><font color="#CCCCCC"> twenty point four KB and we</font>

388
00:18:47,440 --> 00:18:51,250
compare<font color="#CCCCCC"> it</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> foam code such it would</font>

389
00:18:48,910 --> 00:18:54,310
<font color="#E5E5E5">be smaller therefore we can fit the</font>

390
00:18:51,250 --> 00:18:59,890
entire crypto library<font color="#CCCCCC"> in just one cache</font>

391
00:18:54,310 --> 00:19:03,940
way<font color="#CCCCCC"> therefore this and then the</font><font color="#E5E5E5"> next one</font>

392
00:18:59,890 --> 00:19:06,370
<font color="#E5E5E5">we we look at is hey we are putting</font>

393
00:19:03,940 --> 00:19:09,040
everything in cash<font color="#CCCCCC"> now we need to</font>

394
00:19:06,370 --> 00:19:10,600
decrypt<font color="#CCCCCC"> code in</font><font color="#E5E5E5"> critical every time when</font>

395
00:19:09,040 --> 00:19:14,740
it gets called<font color="#E5E5E5"> what's the performance</font>

396
00:19:10,600 --> 00:19:17,169
impact we analyze it from two aspects

397
00:19:14,740 --> 00:19:19,300
the first aspect we<font color="#E5E5E5"> analyze it is from</font>

398
00:19:17,170 --> 00:19:22,840
the impact to<font color="#E5E5E5"> the application</font>

399
00:19:19,300 --> 00:19:27,820
performance itself on the<font color="#E5E5E5"> left side is</font>

400
00:19:22,840 --> 00:19:30,340
the<font color="#E5E5E5"> diagram for RSA decryption so as you</font>

401
00:19:27,820 --> 00:19:32,560
can see if we only need to<font color="#CCCCCC"> creep one art</font>

402
00:19:30,340 --> 00:19:35,770
make one RSA decryption<font color="#CCCCCC"> every time we</font>

403
00:19:32,560 --> 00:19:38,950
build and<font color="#CCCCCC"> teardown the environment</font><font color="#E5E5E5"> we're</font>

404
00:19:35,770 --> 00:19:41,470
making we're having<font color="#CCCCCC"> 25%</font><font color="#E5E5E5"> of performance</font>

405
00:19:38,950 --> 00:19:43,330
overhead however if we do a little<font color="#CCCCCC"> bit</font>

406
00:19:41,470 --> 00:19:46,570
more decryption with the environments up

407
00:19:43,330 --> 00:19:50,310
and tear down cycle then the the

408
00:19:46,570 --> 00:19:55,629
overheads almost need<font color="#E5E5E5"> electrical for AES</font>

409
00:19:50,310 --> 00:19:58,149
if you just give it one at 128 byte

410
00:19:55,630 --> 00:19:58,660
blocks<font color="#E5E5E5"> 108 bit blocks every time then</font>

411
00:19:58,150 --> 00:20:01,510
the

412
00:19:58,660 --> 00:20:05,140
<font color="#E5E5E5">/ has large however once it get to</font>

413
00:20:01,510 --> 00:20:09,040
around<font color="#E5E5E5"> 50 KB you you can barely see the</font>

414
00:20:05,140 --> 00:20:11,080
performance<font color="#E5E5E5"> so with that I conclude that</font>

415
00:20:09,040 --> 00:20:16,540
<font color="#CCCCCC">it's it incurs overhead but it's</font>

416
00:20:11,080 --> 00:20:17,980
<font color="#E5E5E5">manageable so what is the performance so</font>

417
00:20:16,540 --> 00:20:20,170
what is the performance<font color="#E5E5E5"> impact on the</font>

418
00:20:17,980 --> 00:20:21,730
system<font color="#CCCCCC"> itself right we now see the</font>

419
00:20:20,170 --> 00:20:23,910
<font color="#E5E5E5">performance impact on the application</font>

420
00:20:21,730 --> 00:20:28,270
<font color="#CCCCCC">the performance</font><font color="#E5E5E5"> impact on the system is</font>

421
00:20:23,910 --> 00:20:31,510
shown on the<font color="#CCCCCC"> graph when we use only</font><font color="#E5E5E5"> one</font>

422
00:20:28,270 --> 00:20:36,610
l2-cache way<font color="#E5E5E5"> it's actually very small</font>

423
00:20:31,510 --> 00:20:39,190
<font color="#E5E5E5">about</font><font color="#CCCCCC"> 3% of</font><font color="#E5E5E5"> the overhead in the</font><font color="#CCCCCC"> worst</font>

424
00:20:36,610 --> 00:20:43,149
case where we do<font color="#E5E5E5"> render memory reads</font>

425
00:20:39,190 --> 00:20:46,240
across<font color="#E5E5E5"> the entire memory region and when</font>

426
00:20:43,150 --> 00:20:49,570
we use the entire<font color="#CCCCCC"> seven cache ways</font><font color="#E5E5E5"> we</font>

427
00:20:46,240 --> 00:20:52,000
can see<font color="#E5E5E5"> that we actually have</font><font color="#CCCCCC"> a slightly</font>

428
00:20:49,570 --> 00:20:55,929
worse<font color="#CCCCCC"> performance overhead</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> where</font>

429
00:20:52,000 --> 00:20:57,640
<font color="#CCCCCC">we reach</font><font color="#E5E5E5"> 20 30 % but but for the</font>

430
00:20:55,930 --> 00:21:01,480
<font color="#CCCCCC">security that we get I believe this</font><font color="#E5E5E5"> is a</font>

431
00:20:57,640 --> 00:21:04,240
<font color="#CCCCCC">reasonable</font><font color="#E5E5E5"> price</font><font color="#CCCCCC"> to pay so as a</font>

432
00:21:01,480 --> 00:21:06,610
conclusion<font color="#E5E5E5"> we propose secure cash</font>

433
00:21:04,240 --> 00:21:08,830
assisted<font color="#E5E5E5"> solve on the execution that</font>

434
00:21:06,610 --> 00:21:13,300
provides confidentiality and integrity

435
00:21:08,830 --> 00:21:15,610
<font color="#E5E5E5">to</font><font color="#CCCCCC"> both the code</font><font color="#E5E5E5"> and data of the</font>

436
00:21:13,300 --> 00:21:19,180
application which is what we did

437
00:21:15,610 --> 00:21:21,729
uniquely and<font color="#CCCCCC"> will</font><font color="#E5E5E5"> protect against both</font>

438
00:21:19,180 --> 00:21:24,610
software<font color="#CCCCCC"> level attacks</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Cobra memory</font>

439
00:21:21,730 --> 00:21:26,530
disclosure attacks<font color="#CCCCCC"> in the future we</font>

440
00:21:24,610 --> 00:21:29,080
would<font color="#CCCCCC"> like to</font><font color="#E5E5E5"> invest because currently</font>

441
00:21:26,530 --> 00:21:33,879
our application<font color="#CCCCCC"> bill there is still</font><font color="#E5E5E5"> self</font>

442
00:21:29,080 --> 00:21:37,260
<font color="#E5E5E5">contained how do we support OS code into</font>

443
00:21:33,880 --> 00:21:39,820
an<font color="#E5E5E5"> untrusted OS they still uncharted</font><font color="#CCCCCC"> in</font>

444
00:21:37,260 --> 00:21:43,510
territory in active research area that

445
00:21:39,820 --> 00:21:45,780
we want<font color="#E5E5E5"> to look</font><font color="#CCCCCC"> into and that's all I</font>

446
00:21:43,510 --> 00:21:45,780
have

447
00:21:48,010 --> 00:21:58,370
time for one question before<font color="#CCCCCC"> we end the</font>

448
00:21:50,900 --> 00:22:01,669
session it's a very nice<font color="#CCCCCC"> work to</font><font color="#E5E5E5"> say</font>

449
00:21:58,370 --> 00:22:03,820
<font color="#CCCCCC">young limb from</font><font color="#E5E5E5"> Apple</font><font color="#CCCCCC"> during our talk</font>

450
00:22:01,669 --> 00:22:06,080
you<font color="#CCCCCC"> mentioned that</font><font color="#E5E5E5"> you're going to post</font>

451
00:22:03,820 --> 00:22:08,149
<font color="#E5E5E5">opt-in system when you load something</font>

452
00:22:06,080 --> 00:22:11,178
<font color="#E5E5E5">into the cache can you please provide</font>

453
00:22:08,150 --> 00:22:14,360
more details about what<font color="#CCCCCC"> you will what</font>

454
00:22:11,179 --> 00:22:17,360
<font color="#CCCCCC">you are doing when</font><font color="#E5E5E5"> you post oh wise</font><font color="#CCCCCC"> is</font>

455
00:22:14,360 --> 00:22:20,330
<font color="#CCCCCC">that possible that attacker can use DMA</font>

456
00:22:17,360 --> 00:22:22,340
to overwrite the<font color="#E5E5E5"> contents in the</font><font color="#CCCCCC"> cache</font>

457
00:22:20,330 --> 00:22:23,418
thank you<font color="#CCCCCC"> ah</font><font color="#E5E5E5"> that's that's great</font>

458
00:22:22,340 --> 00:22:26,418
question

459
00:22:23,419 --> 00:22:29,150
so we did we<font color="#E5E5E5"> would write about that</font>

460
00:22:26,419 --> 00:22:30,380
<font color="#CCCCCC">detail in the paper but when we post the</font>

461
00:22:29,150 --> 00:22:34,190
OS<font color="#CCCCCC"> will basically disable other</font>

462
00:22:30,380 --> 00:22:35,960
interrupts<font color="#E5E5E5"> yes they can program a DMA</font>

463
00:22:34,190 --> 00:22:38,690
capable device to come back and rewrite

464
00:22:35,960 --> 00:22:40,850
and we did verification there<font color="#CCCCCC"> too</font><font color="#E5E5E5"> to see</font>

465
00:22:38,690 --> 00:22:43,700
that they cannot rewrite our cash they

466
00:22:40,850 --> 00:22:46,209
can rewrite our memory which is<font color="#E5E5E5"> fine but</font>

467
00:22:43,700 --> 00:22:49,970
the<font color="#E5E5E5"> cache environment is protected</font>

468
00:22:46,210 --> 00:22:51,080
did I<font color="#CCCCCC"> answer your question</font><font color="#E5E5E5"> sure we can't</font>

469
00:22:49,970 --> 00:22:54,070
discard no<font color="#E5E5E5"> details</font>

470
00:22:51,080 --> 00:22:54,070
thank you<font color="#CCCCCC"> okay</font>

