1
00:00:00,060 --> 00:00:06,210
as if<font color="#CCCCCC"> box in as if browser books weren't</font>

2
00:00:04,230 --> 00:00:09,630
bad enough<font color="#E5E5E5"> I'm here to present an attack</font>

3
00:00:06,210 --> 00:00:13,830
<font color="#E5E5E5">which the explosive browser</font><font color="#CCCCCC"> without</font>

4
00:00:09,630 --> 00:00:17,750
requiring requiring and the<font color="#E5E5E5"> box it in</font>

5
00:00:13,830 --> 00:00:21,500
the browser<font color="#CCCCCC"> so I'm going to abuse</font>

6
00:00:17,750 --> 00:00:23,850
deduplication<font color="#CCCCCC"> inside a</font><font color="#E5E5E5"> channel which</font>

7
00:00:21,500 --> 00:00:30,660
together with<font color="#E5E5E5"> row hammer which is a</font>

8
00:00:23,850 --> 00:00:34,140
hardware bug and together<font color="#CCCCCC"> they allow us</font>

9
00:00:30,660 --> 00:00:39,170
<font color="#E5E5E5">to exploit a modern</font><font color="#CCCCCC"> browser Microsoft</font>

10
00:00:34,140 --> 00:00:41,399
edge<font color="#E5E5E5"> without the use of any additional</font>

11
00:00:39,170 --> 00:00:44,309
<font color="#E5E5E5">books in the browser itself from</font>

12
00:00:41,399 --> 00:00:47,309
JavaScript<font color="#E5E5E5"> so in</font><font color="#CCCCCC"> short how are we going</font>

13
00:00:44,309 --> 00:00:50,730
<font color="#E5E5E5">to do this we will use</font><font color="#CCCCCC"> the deduplication</font>

14
00:00:47,309 --> 00:00:55,530
side channel attack<font color="#E5E5E5"> to leak information</font>

15
00:00:50,730 --> 00:00:59,129
so leak a hip pointer<font color="#E5E5E5"> to date that we</font>

16
00:00:55,530 --> 00:01:04,830
control<font color="#E5E5E5"> and then combine this with code</font>

17
00:00:59,129 --> 00:01:08,548
pointer appointed to the process

18
00:01:04,830 --> 00:01:13,729
<font color="#E5E5E5">javascript library and these two secrets</font>

19
00:01:08,549 --> 00:01:19,530
<font color="#E5E5E5">allow</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to create a fake object and</font>

20
00:01:13,729 --> 00:01:23,789
this fact objects will yeah we will use

21
00:01:19,530 --> 00:01:34,500
<font color="#CCCCCC">row hammer to flip up</font><font color="#E5E5E5"> a bit in a pointer</font>

22
00:01:23,790 --> 00:01:37,470
<font color="#CCCCCC">to make to</font><font color="#E5E5E5"> make yeah to get</font><font color="#CCCCCC"> a reference</font>

23
00:01:34,500 --> 00:01:40,049
<font color="#E5E5E5">to this fake object and this fake object</font>

24
00:01:37,470 --> 00:01:43,070
will allow us to have<font color="#E5E5E5"> an arbitrary</font>

25
00:01:40,049 --> 00:01:47,310
<font color="#E5E5E5">readwrite primitive and</font><font color="#CCCCCC"> own the browser</font>

26
00:01:43,070 --> 00:01:50,970
so how does this deduplication<font color="#CCCCCC"> side as a</font>

27
00:01:47,310 --> 00:01:55,799
side channel attack work well say<font color="#E5E5E5"> an</font>

28
00:01:50,970 --> 00:01:59,009
attacker has control<font color="#E5E5E5"> for some memory</font><font color="#CCCCCC"> and</font>

29
00:01:55,799 --> 00:02:00,689
a victim as its own memory<font color="#E5E5E5"> and the</font>

30
00:01:59,009 --> 00:02:03,149
attacker wants<font color="#E5E5E5"> to know whether a certain</font>

31
00:02:00,689 --> 00:02:08,429
picture<font color="#E5E5E5"> is inside</font><font color="#CCCCCC"> outer</font><font color="#E5E5E5"> space of the</font>

32
00:02:03,149 --> 00:02:10,770
victim so in this case it<font color="#E5E5E5"> is what the</font>

33
00:02:08,429 --> 00:02:13,680
attacker does is recreate the pages that

34
00:02:10,770 --> 00:02:17,069
<font color="#CCCCCC">it wants to probe for</font>

35
00:02:13,680 --> 00:02:18,690
in its own<font color="#E5E5E5"> address space and then it</font>

36
00:02:17,069 --> 00:02:22,280
waits<font color="#E5E5E5"> for the operating system or</font><font color="#CCCCCC"> a</font>

37
00:02:18,690 --> 00:02:25,530
hypervisor<font color="#CCCCCC"> so for example</font><font color="#E5E5E5"> Windows 8.1</font>

38
00:02:22,280 --> 00:02:32,159
and<font color="#CCCCCC"> higher have this feature as well</font><font color="#E5E5E5"> as</font>

39
00:02:25,530 --> 00:02:34,980
<font color="#CCCCCC">some virtualization hyper some</font>

40
00:02:32,159 --> 00:02:37,019
<font color="#E5E5E5">hypervisors they will scan memory and</font>

41
00:02:34,980 --> 00:02:42,420
identify pages which<font color="#E5E5E5"> are similar and</font>

42
00:02:37,019 --> 00:02:48,030
will point the all<font color="#E5E5E5"> the memory to the</font>

43
00:02:42,420 --> 00:02:53,040
same place<font color="#E5E5E5"> and this saves memory</font><font color="#CCCCCC"> but the</font>

44
00:02:48,030 --> 00:02:54,780
problem is and<font color="#E5E5E5"> that yeah</font><font color="#CCCCCC"> so the kernel</font>

45
00:02:53,040 --> 00:02:57,660
or<font color="#CCCCCC"> the</font><font color="#E5E5E5"> hypervisor will mark this memory</font>

46
00:02:54,780 --> 00:03:00,829
<font color="#CCCCCC">copy-on-write</font><font color="#E5E5E5"> so why is this a problem</font>

47
00:02:57,660 --> 00:03:03,299
<font color="#CCCCCC">well if you do a normal</font><font color="#E5E5E5"> right to a</font>

48
00:03:00,829 --> 00:03:03,870
memory page which is not marked

49
00:03:03,299 --> 00:03:07,440
copy-on-write

50
00:03:03,870 --> 00:03:11,329
it will go very<font color="#E5E5E5"> fast and then but the</font>

51
00:03:07,440 --> 00:03:13,859
deduplicated page has to be as to be

52
00:03:11,329 --> 00:03:18,030
copied first<font color="#CCCCCC"> before the rice can happen</font>

53
00:03:13,859 --> 00:03:22,019
and<font color="#E5E5E5"> this takes longer and this take yeah</font>

54
00:03:18,030 --> 00:03:26,069
this takes<font color="#E5E5E5"> longer</font><font color="#CCCCCC"> and you can measure</font>

55
00:03:22,019 --> 00:03:28,109
<font color="#E5E5E5">this from JavaScript so this is all nice</font>

56
00:03:26,069 --> 00:03:31,108
if you want to leak the content of

57
00:03:28,109 --> 00:03:35,430
entire page but can we generalize<font color="#CCCCCC"> this</font>

58
00:03:31,109 --> 00:03:39,329
to<font color="#E5E5E5"> leaking a small bit of</font><font color="#CCCCCC"> information</font>

59
00:03:35,430 --> 00:03:43,530
like the randomization in the pointer or

60
00:03:39,329 --> 00:03:45,030
<font color="#E5E5E5">password so turns out we can but there</font>

61
00:03:43,530 --> 00:03:49,549
are some challenges<font color="#CCCCCC"> that we have to</font>

62
00:03:45,030 --> 00:03:52,340
<font color="#E5E5E5">overcome so first of all the small</font>

63
00:03:49,549 --> 00:03:55,230
secret<font color="#E5E5E5"> it does not span an entire page</font>

64
00:03:52,340 --> 00:04:00,329
<font color="#E5E5E5">so we need to turn this secret into a</font>

65
00:03:55,230 --> 00:04:03,899
page so we need to find a way to get a

66
00:04:00,329 --> 00:04:08,810
secret<font color="#E5E5E5"> together in the page with all</font>

67
00:04:03,900 --> 00:04:11,730
<font color="#E5E5E5">known data so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can protect we can</font>

68
00:04:08,810 --> 00:04:16,019
we can predict what<font color="#CCCCCC"> the whole page looks</font>

69
00:04:11,730 --> 00:04:20,099
like another problem<font color="#CCCCCC"> that we can have is</font>

70
00:04:16,019 --> 00:04:22,229
<font color="#CCCCCC">that the secret</font><font color="#E5E5E5"> is just just</font><font color="#CCCCCC"> too many</font>

71
00:04:20,099 --> 00:04:26,180
<font color="#E5E5E5">much entropy and if we wanted to scan</font>

72
00:04:22,229 --> 00:04:26,180
for every possible<font color="#CCCCCC"> value of</font><font color="#E5E5E5"> this</font>

73
00:04:26,770 --> 00:04:34,840
secret we exhaust our memory so to solve

74
00:04:32,889 --> 00:04:35,770
this<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have in the paper we have</font><font color="#E5E5E5"> to</font>

75
00:04:34,840 --> 00:04:39,310
well

76
00:04:35,770 --> 00:04:41,469
<font color="#E5E5E5">three primitives which will help us with</font>

77
00:04:39,310 --> 00:04:46,330
<font color="#CCCCCC">redo with finding out the secret</font>

78
00:04:41,470 --> 00:04:49,180
nonetheless<font color="#CCCCCC"> one is</font><font color="#E5E5E5"> we control alignment</font>

79
00:04:46,330 --> 00:04:52,810
of the secret where we only<font color="#E5E5E5"> have part of</font>

80
00:04:49,180 --> 00:04:56,199
<font color="#E5E5E5">the secret in a page such that we have</font>

81
00:04:52,810 --> 00:05:03,520
<font color="#E5E5E5">we can leak the information in two or</font>

82
00:04:56,199 --> 00:05:07,840
<font color="#E5E5E5">more steps</font><font color="#CCCCCC"> and this allows us to this</font>

83
00:05:03,520 --> 00:05:10,150
allows us<font color="#CCCCCC"> to reduce the</font><font color="#E5E5E5"> entropy and leak</font>

84
00:05:07,840 --> 00:05:13,119
the information<font color="#E5E5E5"> we have a second</font>

85
00:05:10,150 --> 00:05:15,460
primitive which<font color="#E5E5E5"> where if you cannot</font>

86
00:05:13,120 --> 00:05:20,880
control<font color="#CCCCCC"> the linemen</font><font color="#E5E5E5"> but possibly</font>

87
00:05:15,460 --> 00:05:25,359
<font color="#E5E5E5">overwrite</font><font color="#CCCCCC"> parts of the secrets in memory</font>

88
00:05:20,880 --> 00:05:29,680
we can we can reduce the<font color="#E5E5E5"> entropy that</font>

89
00:05:25,360 --> 00:05:32,949
<font color="#E5E5E5">way so for our browser attack we use the</font>

90
00:05:29,680 --> 00:05:37,960
first method of controlling the

91
00:05:32,949 --> 00:05:40,090
alignment<font color="#CCCCCC"> to make use of the jet</font>

92
00:05:37,960 --> 00:05:43,479
function<font color="#E5E5E5"> in the compiled jet function</font>

93
00:05:40,090 --> 00:05:45,570
epilogue<font color="#E5E5E5"> in Microsoft edge and because</font>

94
00:05:43,479 --> 00:05:49,449
we control the function we can create

95
00:05:45,570 --> 00:05:51,729
functions which are just slightly<font color="#E5E5E5"> larger</font>

96
00:05:49,449 --> 00:05:55,599
than<font color="#E5E5E5"> one page so that the function</font>

97
00:05:51,729 --> 00:05:59,530
epilogue is on the border of a page and

98
00:05:55,599 --> 00:06:02,650
<font color="#E5E5E5">then some some of the functions will</font>

99
00:05:59,530 --> 00:06:05,710
<font color="#CCCCCC">have the code address which is</font><font color="#E5E5E5"> in the</font>

100
00:06:02,650 --> 00:06:07,448
function epilogue actually we come to we

101
00:06:05,710 --> 00:06:09,430
know all in from the<font color="#CCCCCC"> hole</font><font color="#E5E5E5"> all</font>

102
00:06:07,449 --> 00:06:11,530
information in<font color="#E5E5E5"> the epilogue except for</font>

103
00:06:09,430 --> 00:06:15,010
the code address<font color="#E5E5E5"> so that's what we want</font>

104
00:06:11,530 --> 00:06:16,359
<font color="#E5E5E5">to leak so if we</font><font color="#CCCCCC"> create a jet function</font>

105
00:06:15,010 --> 00:06:22,449
with the code<font color="#E5E5E5"> address just on the</font>

106
00:06:16,360 --> 00:06:27,699
boundary<font color="#E5E5E5"> we can leak this code address</font>

107
00:06:22,449 --> 00:06:29,860
<font color="#E5E5E5">in multiple steps and</font><font color="#CCCCCC"> every step</font><font color="#E5E5E5"> we can</font>

108
00:06:27,699 --> 00:06:36,550
fill in the<font color="#CCCCCC"> parts</font><font color="#E5E5E5"> that we</font><font color="#CCCCCC"> already know</font>

109
00:06:29,860 --> 00:06:38,890
<font color="#E5E5E5">so</font><font color="#CCCCCC"> then there is a final possibility</font>

110
00:06:36,550 --> 00:06:44,580
<font color="#CCCCCC">that we cannot</font>

111
00:06:38,890 --> 00:06:50,800
<font color="#CCCCCC">/ right part</font><font color="#E5E5E5"> of the secret or align this</font>

112
00:06:44,580 --> 00:06:54,240
something are<font color="#E5E5E5"> we then lost</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is not</font>

113
00:06:50,800 --> 00:06:57,040
always<font color="#E5E5E5"> the</font><font color="#CCCCCC"> case so in the case of</font>

114
00:06:54,240 --> 00:07:03,360
finding our heat pointer in our browser

115
00:06:57,040 --> 00:07:06,460
exploit<font color="#E5E5E5"> we couldn't find an alignment or</font>

116
00:07:03,360 --> 00:07:10,390
yeah a way<font color="#E5E5E5"> to control the alignment or</font>

117
00:07:06,460 --> 00:07:15,120
to override a part of it but<font color="#E5E5E5"> then but</font>

118
00:07:10,390 --> 00:07:19,000
then<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> another solution</font><font color="#E5E5E5"> so this</font>

119
00:07:15,120 --> 00:07:21,820
we<font color="#E5E5E5"> can still lick a hip pointer</font><font color="#CCCCCC"> making</font>

120
00:07:19,000 --> 00:07:25,600
use of an observation<font color="#E5E5E5"> called the</font>

121
00:07:21,820 --> 00:07:27,969
<font color="#E5E5E5">birthday problem</font><font color="#CCCCCC"> which tells you that</font>

122
00:07:25,600 --> 00:07:31,350
<font color="#CCCCCC">the surprisingly small they are given</font>

123
00:07:27,970 --> 00:07:34,450
<font color="#E5E5E5">this surprisingly small group of people</font>

124
00:07:31,350 --> 00:07:38,140
<font color="#CCCCCC">the chances of two of them having</font><font color="#E5E5E5"> the</font>

125
00:07:34,450 --> 00:07:42,330
same<font color="#CCCCCC"> birthday gets really high</font>

126
00:07:38,140 --> 00:07:46,240
relatively soon<font color="#E5E5E5"> and the underlying</font>

127
00:07:42,330 --> 00:07:49,359
iteration about this is<font color="#E5E5E5"> that you're not</font>

128
00:07:46,240 --> 00:07:51,970
doing not<font color="#CCCCCC"> doing a comparison one</font>

129
00:07:49,360 --> 00:07:54,370
comparison<font color="#E5E5E5"> of someone's birthday with</font>

130
00:07:51,970 --> 00:07:58,390
some<font color="#E5E5E5"> others birthday but you</font><font color="#CCCCCC"> are doing</font>

131
00:07:54,370 --> 00:07:59,350
<font color="#E5E5E5">all comparisons at the same time and if</font>

132
00:07:58,390 --> 00:08:01,840
you think of it

133
00:07:59,350 --> 00:08:06,880
memory deduplication<font color="#E5E5E5"> does this as well</font>

134
00:08:01,840 --> 00:08:08,700
so<font color="#CCCCCC"> we abuse this functionality</font><font color="#E5E5E5"> in this</font>

135
00:08:06,880 --> 00:08:11,409
case we were leaking pointer so we

136
00:08:08,700 --> 00:08:14,530
generate lots of pointers any of them

137
00:08:11,410 --> 00:08:16,890
will be the pointers to objects that<font color="#E5E5E5"> we</font>

138
00:08:14,530 --> 00:08:20,380
control<font color="#E5E5E5"> and if</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> will be okay for us</font>

139
00:08:16,890 --> 00:08:22,930
at the same<font color="#E5E5E5"> time way we probe for lots</font>

140
00:08:20,380 --> 00:08:26,440
of pointers<font color="#E5E5E5"> and we only have to have</font><font color="#CCCCCC"> one</font>

141
00:08:22,930 --> 00:08:30,600
match and this match will be done by the

142
00:08:26,440 --> 00:08:35,440
deduplication mechanism which justice<font color="#CCCCCC"> I</font>

143
00:08:30,600 --> 00:08:37,419
need to any comparison so in memory

144
00:08:35,440 --> 00:08:39,910
<font color="#CCCCCC">looks like this you have we have</font>

145
00:08:37,419 --> 00:08:43,360
pointers to real objects and then we

146
00:08:39,909 --> 00:08:46,780
have<font color="#E5E5E5"> we</font><font color="#CCCCCC"> guess pointers to fake objects</font>

147
00:08:43,360 --> 00:08:49,710
and then we just create some of them and

148
00:08:46,780 --> 00:08:52,189
<font color="#E5E5E5">after not that many</font>

149
00:08:49,710 --> 00:08:53,970
well we don't<font color="#CCCCCC"> have to create</font><font color="#E5E5E5"> that many</font>

150
00:08:52,190 --> 00:08:59,700
to get a hit

151
00:08:53,970 --> 00:09:02,160
so the duplication mechanism<font color="#E5E5E5"> make sure</font>

152
00:08:59,700 --> 00:09:04,530
<font color="#E5E5E5">that both pages point to the same</font>

153
00:09:02,160 --> 00:09:07,680
<font color="#E5E5E5">physical page and then we can do our</font>

154
00:09:04,530 --> 00:09:13,230
deduplication<font color="#E5E5E5"> tests by writing to it and</font>

155
00:09:07,680 --> 00:09:15,750
get memory so now we have<font color="#E5E5E5"> leaked the</font>

156
00:09:13,230 --> 00:09:19,800
<font color="#E5E5E5">code pointer and the hip pointer so we</font>

157
00:09:15,750 --> 00:09:24,810
can create a fake object which allows us

158
00:09:19,800 --> 00:09:27,060
<font color="#CCCCCC">to do readwrite but we still</font><font color="#E5E5E5"> need a</font>

159
00:09:24,810 --> 00:09:29,369
reference<font color="#E5E5E5"> to</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and the JavaScript</font>

160
00:09:27,060 --> 00:09:32,400
engine for good reasons doesn't allow us

161
00:09:29,370 --> 00:09:35,700
<font color="#CCCCCC">to do</font><font color="#E5E5E5"> this so what we do is we create</font>

162
00:09:32,400 --> 00:09:39,030
<font color="#E5E5E5">this</font><font color="#CCCCCC"> object inside an X extend data</font>

163
00:09:35,700 --> 00:09:43,280
structure<font color="#CCCCCC"> a JavaScript array</font><font color="#E5E5E5"> and then we</font>

164
00:09:39,030 --> 00:09:43,280
<font color="#CCCCCC">have another</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> right next to</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> and</font>

165
00:09:43,640 --> 00:09:52,790
now we need<font color="#E5E5E5"> to pivot a reference to the</font>

166
00:09:48,240 --> 00:09:58,680
one the second array<font color="#CCCCCC"> onto the</font><font color="#E5E5E5"> the first</font>

167
00:09:52,790 --> 00:10:01,319
int onto our fake object and we do this

168
00:09:58,680 --> 00:10:03,479
by inducing a bit flip using a row

169
00:10:01,320 --> 00:10:09,870
<font color="#E5E5E5">hammer so row hammer is the hardware</font>

170
00:10:03,480 --> 00:10:12,060
vulnerability where where the

171
00:10:09,870 --> 00:10:19,800
observation is<font color="#CCCCCC"> that if you access a</font>

172
00:10:12,060 --> 00:10:24,599
certain row in memory<font color="#CCCCCC"> very quickly a</font>

173
00:10:19,800 --> 00:10:31,560
quick succession the the neighboring

174
00:10:24,600 --> 00:10:40,320
<font color="#E5E5E5">rows experience</font><font color="#CCCCCC"> interference and some of</font>

175
00:10:31,560 --> 00:10:45,959
the neighboring<font color="#E5E5E5"> rows bits can flip</font><font color="#CCCCCC"> so in</font>

176
00:10:40,320 --> 00:10:49,410
our case we we used a bit flip<font color="#CCCCCC"> to so we</font>

177
00:10:45,960 --> 00:10:52,680
are we find bit flip a memory<font color="#E5E5E5"> that's</font>

178
00:10:49,410 --> 00:10:59,670
that you can flip<font color="#E5E5E5"> and then we insert the</font>

179
00:10:52,680 --> 00:11:01,949
right pointer in this memory location<font color="#E5E5E5"> we</font>

180
00:10:59,670 --> 00:11:04,290
hammer the<font color="#E5E5E5"> point pointer flips and we</font>

181
00:11:01,950 --> 00:11:06,959
get a pointer<font color="#CCCCCC"> to our</font><font color="#E5E5E5"> object</font>

182
00:11:04,290 --> 00:11:09,290
and then we can have arbitrary<font color="#E5E5E5"> read</font>

183
00:11:06,959 --> 00:11:09,290
rights

184
00:11:09,500 --> 00:11:16,230
so in short memory deduplication<font color="#E5E5E5"> is way</font>

185
00:11:13,740 --> 00:11:19,889
more<font color="#E5E5E5"> powerful</font><font color="#CCCCCC"> cycle</font><font color="#E5E5E5"> than previously</font>

186
00:11:16,230 --> 00:11:23,279
thought<font color="#CCCCCC"> in our</font><font color="#E5E5E5"> paper we also have an</font>

187
00:11:19,889 --> 00:11:33,509
example<font color="#CCCCCC"> of leaking information from a</font>

188
00:11:23,279 --> 00:11:36,899
different<font color="#E5E5E5"> process</font><font color="#CCCCCC"> and yeah it's</font><font color="#E5E5E5"> possible</font>

189
00:11:33,509 --> 00:11:40,709
<font color="#E5E5E5">to do reliable browser exploitation in</font>

190
00:11:36,899 --> 00:11:50,550
JavaScript that's it

191
00:11:40,709 --> 00:11:53,579
any question hey thanks<font color="#CCCCCC"> so how long do</font>

192
00:11:50,550 --> 00:11:56,609
each of these<font color="#E5E5E5"> two parts of the attack</font>

193
00:11:53,579 --> 00:11:58,589
take so how<font color="#E5E5E5"> often is the OS or the</font>

194
00:11:56,610 --> 00:12:00,410
hypervisor doing this deduplication

195
00:11:58,589 --> 00:12:04,709
<font color="#E5E5E5">because you have to guess the</font><font color="#CCCCCC"> lot of</font>

196
00:12:00,410 --> 00:12:08,490
<font color="#E5E5E5">values in Windows</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> windows it's</font>

197
00:12:04,709 --> 00:12:10,859
every 15 minutes<font color="#E5E5E5"> as we tested every 15</font>

198
00:12:08,490 --> 00:12:18,870
minutes<font color="#CCCCCC"> yes but don't</font><font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to like</font>

199
00:12:10,860 --> 00:12:20,819
gas to<font color="#CCCCCC"> the yes 8 if not 16 so</font><font color="#E5E5E5"> we haven't</font>

200
00:12:18,870 --> 00:12:24,449
studied the exact mechanism with which

201
00:12:20,819 --> 00:12:29,579
it is<font color="#E5E5E5"> being done</font><font color="#CCCCCC"> in Windows in in</font><font color="#E5E5E5"> Linux</font>

202
00:12:24,449 --> 00:12:34,889
it's it's or it's being done<font color="#E5E5E5"> right</font><font color="#CCCCCC"> every</font>

203
00:12:29,579 --> 00:12:42,329
once in a while<font color="#CCCCCC"> yeah just just</font><font color="#E5E5E5"> they</font>

204
00:12:34,889 --> 00:12:45,839
<font color="#CCCCCC">merged</font><font color="#E5E5E5"> several small pages just</font><font color="#CCCCCC"> ink</font><font color="#E5E5E5"> they</font>

205
00:12:42,329 --> 00:12:48,479
just<font color="#CCCCCC"> kinda memory I'm allergic pages row</font>

206
00:12:45,839 --> 00:12:51,120
hammer<font color="#E5E5E5"> flips a random bit and then you</font>

207
00:12:48,480 --> 00:12:53,519
have to check did was i lucky<font color="#CCCCCC"> no try</font>

208
00:12:51,120 --> 00:12:57,529
again<font color="#CCCCCC"> how so how long does this whole</font>

209
00:12:53,519 --> 00:12:59,959
attack take it depends on the the

210
00:12:57,529 --> 00:13:07,709
<font color="#E5E5E5">deduplication</font>

211
00:12:59,959 --> 00:13:10,258
attack<font color="#E5E5E5"> it takes about 30 minutes</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> need</font>

212
00:13:07,709 --> 00:13:13,079
<font color="#E5E5E5">two sweeps for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> code</font><font color="#CCCCCC"> for three so and</font>

213
00:13:10,259 --> 00:13:15,900
then the the row hammer attack really

214
00:13:13,079 --> 00:13:21,209
depends on how vulnerable<font color="#E5E5E5"> here</font>

215
00:13:15,900 --> 00:13:22,650
memory is<font color="#CCCCCC"> Touro hammer</font><font color="#E5E5E5"> right okay my</font>

216
00:13:21,210 --> 00:13:29,370
question<font color="#CCCCCC"> is more related to the RO</font>

217
00:13:22,650 --> 00:13:33,810
hammer<font color="#E5E5E5"> how did you reliably find that if</font>

218
00:13:29,370 --> 00:13:35,430
if the f1<font color="#CCCCCC"> bed I flipped this bit it's</font>

219
00:13:33,810 --> 00:13:38,790
going<font color="#E5E5E5"> to convert</font><font color="#CCCCCC"> into a pointer to the</font>

220
00:13:35,430 --> 00:13:44,189
other location<font color="#E5E5E5"> so you need</font><font color="#CCCCCC"> deikun</font>

221
00:13:38,790 --> 00:13:49,380
<font color="#CCCCCC">instance</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> there in the</font><font color="#E5E5E5"> description in</font>

222
00:13:44,190 --> 00:13:52,860
<font color="#E5E5E5">paper but what the</font><font color="#CCCCCC"> justice that</font><font color="#E5E5E5"> we in</font>

223
00:13:49,380 --> 00:13:54,960
edge you can<font color="#E5E5E5"> have pointers and double</font>

224
00:13:52,860 --> 00:13:57,720
values in the same location in the same

225
00:13:54,960 --> 00:14:00,450
type so we<font color="#E5E5E5"> put a double value there and</font>

226
00:13:57,720 --> 00:14:04,200
that we can completely<font color="#E5E5E5"> agree we can read</font>

227
00:14:00,450 --> 00:14:07,080
so we do<font color="#E5E5E5"> ro hammer and then see if the</font>

228
00:14:04,200 --> 00:14:09,540
double value<font color="#E5E5E5"> changed and then see which</font>

229
00:14:07,080 --> 00:14:12,600
bit changed that's kind of interesting

230
00:14:09,540 --> 00:14:14,939
<font color="#E5E5E5">if you do ro hammer</font><font color="#CCCCCC"> it's usually the</font>

231
00:14:12,600 --> 00:14:18,300
<font color="#CCCCCC">same bit that flips again</font><font color="#E5E5E5"> and again and</font>

232
00:14:14,940 --> 00:14:20,910
<font color="#CCCCCC">it's directional yeah so so so we have</font>

233
00:14:18,300 --> 00:14:24,990
doubles in an array<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> when we</font>

234
00:14:20,910 --> 00:14:27,839
know which bit flips we we put a pointer

235
00:14:24,990 --> 00:14:32,490
there<font color="#CCCCCC"> a</font><font color="#E5E5E5"> reference to an object and then</font>

236
00:14:27,839 --> 00:14:35,250
so in<font color="#CCCCCC"> h4 this this you can put it in the</font>

237
00:14:32,490 --> 00:14:37,980
same location<font color="#CCCCCC"> but the details</font><font color="#E5E5E5"> are in the</font>

238
00:14:35,250 --> 00:14:41,160
paper<font color="#E5E5E5"> so my</font><font color="#CCCCCC"> complimentary</font><font color="#E5E5E5"> question to</font>

239
00:14:37,980 --> 00:14:48,390
that is the<font color="#E5E5E5"> same physical page was being</font>

240
00:14:41,160 --> 00:14:51,689
used when you are<font color="#E5E5E5"> doing the attack so</font>

241
00:14:48,390 --> 00:14:54,510
first time you do the you do the<font color="#CCCCCC"> rec on</font>

242
00:14:51,690 --> 00:14:56,160
that<font color="#E5E5E5"> okay this bit is flipping and once</font>

243
00:14:54,510 --> 00:14:58,770
you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> the knowledge</font><font color="#CCCCCC"> that this bit is</font>

244
00:14:56,160 --> 00:15:00,930
flipping after you have after<font color="#CCCCCC"> that you</font>

245
00:14:58,770 --> 00:15:03,150
have<font color="#CCCCCC"> to reuse that physical page you</font>

246
00:15:00,930 --> 00:15:04,979
have<font color="#E5E5E5"> to force the system to use reuse</font>

247
00:15:03,150 --> 00:15:09,180
the physical page for the same data

248
00:15:04,980 --> 00:15:11,130
object<font color="#E5E5E5"> so what behavior</font><font color="#CCCCCC"> you saw there</font>

249
00:15:09,180 --> 00:15:18,989
was it was<font color="#CCCCCC"> edge</font><font color="#E5E5E5"> using the same physical</font>

250
00:15:11,130 --> 00:15:21,000
page<font color="#CCCCCC"> I said the roham I said yes said</font><font color="#E5E5E5"> so</font>

251
00:15:18,990 --> 00:15:23,160
actually for<font color="#CCCCCC"> row hammer we make sure</font>

252
00:15:21,000 --> 00:15:25,079
that Windows doesn't<font color="#CCCCCC"> de</font><font color="#E5E5E5"> doop the pages</font>

253
00:15:23,160 --> 00:15:26,689
where<font color="#E5E5E5"> ro hammering otherwise it will</font>

254
00:15:25,079 --> 00:15:32,819
screw up<font color="#E5E5E5"> the</font>

255
00:15:26,690 --> 00:15:39,420
the yeah the<font color="#CCCCCC"> the voices will screw up</font>

256
00:15:32,820 --> 00:15:42,240
<font color="#E5E5E5">the whole well the measure so the</font>

257
00:15:39,420 --> 00:15:47,339
measurements<font color="#E5E5E5"> will both the</font><font color="#CCCCCC"> robot</font><font color="#E5E5E5"> will</font>

258
00:15:42,240 --> 00:15:50,220
not work anymore<font color="#CCCCCC"> but so so it's</font><font color="#E5E5E5"> always</font>

259
00:15:47,340 --> 00:15:54,630
the same page<font color="#E5E5E5"> that so if you find the</font>

260
00:15:50,220 --> 00:15:59,700
bit flip using so<font color="#E5E5E5"> you hammer one one</font>

261
00:15:54,630 --> 00:16:09,150
location or<font color="#CCCCCC"> it's actually two but and</font>

262
00:15:59,700 --> 00:16:12,980
then it's the and then the neighboring

263
00:16:09,150 --> 00:16:12,980
<font color="#CCCCCC">rows will get bit flips</font>

