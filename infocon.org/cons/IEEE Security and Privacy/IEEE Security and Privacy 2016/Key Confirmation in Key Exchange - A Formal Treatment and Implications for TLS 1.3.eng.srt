1
00:00:00,000 --> 00:00:05,040
so as<font color="#CCCCCC"> you already will have guessed from</font>

2
00:00:02,669 --> 00:00:08,250
the session and the paper title this

3
00:00:05,040 --> 00:00:10,740
talk is about key exchange the key

4
00:00:08,250 --> 00:00:13,469
exchange is this neat concept that

5
00:00:10,740 --> 00:00:15,990
allows to remote parties to establish a

6
00:00:13,469 --> 00:00:18,779
shared symmetric key of an insecure

7
00:00:15,990 --> 00:00:20,970
network usually you bootstrap this from

8
00:00:18,779 --> 00:00:23,100
knowing public keys or certificates of

9
00:00:20,970 --> 00:00:25,500
each other and<font color="#CCCCCC"> you will run a protocol</font>

10
00:00:23,100 --> 00:00:28,140
the key exchange protocol which in the

11
00:00:25,500 --> 00:00:30,150
end supposed<font color="#E5E5E5"> to output a shared key the</font>

12
00:00:28,140 --> 00:00:34,140
same key on both sides of the protocol

13
00:00:30,150 --> 00:00:36,239
participants<font color="#E5E5E5"> security wise formalization</font>

14
00:00:34,140 --> 00:00:38,700
go back to the seminal paper of balerion

15
00:00:36,239 --> 00:00:41,040
<font color="#CCCCCC">rug away from 1993 and</font><font color="#E5E5E5"> there are two</font>

16
00:00:38,700 --> 00:00:42,960
main security goals that are usually

17
00:00:41,040 --> 00:00:46,920
consider here the<font color="#E5E5E5"> first and</font><font color="#CCCCCC"> probably</font>

18
00:00:42,960 --> 00:00:48,660
most intuitive one is key secrecy the

19
00:00:46,920 --> 00:00:51,420
key secrecy is basically telling that an

20
00:00:48,660 --> 00:00:53,879
outsider<font color="#CCCCCC"> and outer adversary</font><font color="#E5E5E5"> eve to that</font>

21
00:00:51,420 --> 00:00:55,739
communication given some capabilities

22
00:00:53,879 --> 00:00:57,480
<font color="#E5E5E5">formalized should not learn anything</font>

23
00:00:55,739 --> 00:00:59,459
<font color="#E5E5E5">about the key so basically the key</font>

24
00:00:57,480 --> 00:01:02,160
should be<font color="#E5E5E5"> as good as fallen randomly</font>

25
00:00:59,460 --> 00:01:04,619
from the sky being perfectly random on

26
00:01:02,160 --> 00:01:07,399
both sides and<font color="#E5E5E5"> if not knowing anything</font>

27
00:01:04,619 --> 00:01:10,080
about it the<font color="#E5E5E5"> other property is</font>

28
00:01:07,400 --> 00:01:13,049
authentication<font color="#CCCCCC"> and it's often formalized</font>

29
00:01:10,080 --> 00:01:15,750
in an implicit way by<font color="#CCCCCC"> giving for example</font>

30
00:01:13,049 --> 00:01:18,590
<font color="#CCCCCC">LS the guarantee that only Bob can</font>

31
00:01:15,750 --> 00:01:21,119
potentially<font color="#E5E5E5"> hold the key and no one else</font>

32
00:01:18,590 --> 00:01:23,460
however Ellis is not guaranteed well

33
00:01:21,119 --> 00:01:26,490
actually Bob indeed holds the key or not

34
00:01:23,460 --> 00:01:29,399
just told that<font color="#E5E5E5"> they don't if only then</font>

35
00:01:26,490 --> 00:01:31,259
Bob can be the one<font color="#E5E5E5"> that holds it this is</font>

36
00:01:29,400 --> 00:01:34,650
where key confirmation comes into the

37
00:01:31,259 --> 00:01:38,189
game the topic of this talk and to<font color="#E5E5E5"> start</font>

38
00:01:34,650 --> 00:01:39,420
with an informal definition let's quote

39
00:01:38,189 --> 00:01:42,360
from the handbook of applied

40
00:01:39,420 --> 00:01:44,520
cryptography it says key<font color="#E5E5E5"> confirmation is</font>

41
00:01:42,360 --> 00:01:46,470
the<font color="#E5E5E5"> property where by one party is</font>

42
00:01:44,520 --> 00:01:48,780
assured that a second possibly

43
00:01:46,470 --> 00:01:51,840
unidentified party actually<font color="#CCCCCC"> has</font>

44
00:01:48,780 --> 00:01:54,479
possession of a particular secret key in

45
00:01:51,840 --> 00:01:56,460
other words it's basically aiming at

46
00:01:54,479 --> 00:01:58,979
saying that<font color="#CCCCCC"> you're insured Ellis is</font>

47
00:01:56,460 --> 00:02:02,579
ensured that Bob actually<font color="#E5E5E5"> holds the key</font>

48
00:01:58,979 --> 00:02:04,289
that she has so while this property

49
00:02:02,579 --> 00:02:06,059
confirmation is often mentioned in

50
00:02:04,290 --> 00:02:09,869
scientific papers on key exchange

51
00:02:06,060 --> 00:02:11,760
interestingly there was no formalization

52
00:02:09,869 --> 00:02:13,380
no explicit formal treatment of this

53
00:02:11,760 --> 00:02:15,450
notion so far

54
00:02:13,380 --> 00:02:17,040
so you may wonder whether key

55
00:02:15,450 --> 00:02:19,410
confirmation at all<font color="#CCCCCC"> matters where it's</font>

56
00:02:17,040 --> 00:02:21,480
important to look into<font color="#E5E5E5"> it</font><font color="#CCCCCC"> and if you ask</font>

57
00:02:19,410 --> 00:02:23,820
cryptographers one answer you might get

58
00:02:21,480 --> 00:02:26,280
is well actually it's not so interesting

59
00:02:23,820 --> 00:02:27,720
after all because if you have a key no

60
00:02:26,280 --> 00:02:29,670
one else<font color="#CCCCCC"> has and you encrypt something</font>

61
00:02:27,720 --> 00:02:31,650
under<font color="#CCCCCC"> their key well no one can decrypt</font>

62
00:02:29,670 --> 00:02:34,290
it but that's<font color="#E5E5E5"> all the security problem</font>

63
00:02:31,650 --> 00:02:35,730
so why should you care about it you

64
00:02:34,290 --> 00:02:38,070
might also think well it's somewhat

65
00:02:35,730 --> 00:02:39,720
<font color="#E5E5E5">clear when you get key confirmation you</font>

66
00:02:38,070 --> 00:02:42,180
just use the key<font color="#CCCCCC"> you encrypt something</font>

67
00:02:39,720 --> 00:02:43,470
and by<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> prove that you hold the</font>

68
00:02:42,180 --> 00:02:46,200
<font color="#CCCCCC">key and</font><font color="#E5E5E5"> the other side will know that</font>

69
00:02:43,470 --> 00:02:48,840
you have it however one needs to<font color="#E5E5E5"> be</font>

70
00:02:46,200 --> 00:02:51,239
cautious here because if you do this in

71
00:02:48,840 --> 00:02:54,450
a careless way you might<font color="#E5E5E5"> actually lose</font>

72
00:02:51,240 --> 00:02:56,580
the main goal security goal of session

73
00:02:54,450 --> 00:02:59,700
key secrecy that you wanted to<font color="#E5E5E5"> actually</font>

74
00:02:56,580 --> 00:03:01,230
aim for in your protocol so

75
00:02:59,700 --> 00:03:03,209
cryptographers usually go and say okay

76
00:03:01,230 --> 00:03:05,519
well you just derive some separate key

77
00:03:03,210 --> 00:03:07,380
which<font color="#CCCCCC"> is independent and</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> you send</font>

78
00:03:05,520 --> 00:03:09,390
some message authentication code over a

79
00:03:07,380 --> 00:03:12,269
transcript to confirm that you are

80
00:03:09,390 --> 00:03:14,070
sharing the same<font color="#CCCCCC"> communication if you</font>

81
00:03:12,270 --> 00:03:16,410
look<font color="#E5E5E5"> into standards it's interesting</font>

82
00:03:14,070 --> 00:03:19,260
<font color="#E5E5E5">that in the discussions around till</font><font color="#CCCCCC"> has</font>

83
00:03:16,410 --> 00:03:21,570
1.3<font color="#E5E5E5"> the upcoming next version of TLS</font>

84
00:03:19,260 --> 00:03:23,130
there was some<font color="#CCCCCC"> discussion where the key</font>

85
00:03:21,570 --> 00:03:26,040
confirmation is actually something<font color="#E5E5E5"> that</font>

86
00:03:23,130 --> 00:03:27,720
should be explicitly aimed for until at

87
00:03:26,040 --> 00:03:29,790
<font color="#E5E5E5">one point three settle for it Sookie</font>

88
00:03:27,720 --> 00:03:31,859
confirmation is a goal for<font color="#E5E5E5"> Taylor's 1.3</font>

89
00:03:29,790 --> 00:03:33,840
and it's also mentioned as an explicit

90
00:03:31,860 --> 00:03:36,990
goal in various miss standards for

91
00:03:33,840 --> 00:03:39,420
example so there's some good reason to

92
00:03:36,990 --> 00:03:42,030
look into key confirmation and what we

93
00:03:39,420 --> 00:03:46,160
do in this work is we do three things

94
00:03:42,030 --> 00:03:48,270
the first one we provide a formal model

95
00:03:46,160 --> 00:03:51,000
<font color="#E5E5E5">formalization of what key confirmation</font>

96
00:03:48,270 --> 00:03:53,490
means in order to provide a ground where

97
00:03:51,000 --> 00:03:57,810
you can have well-founded discussions

98
00:03:53,490 --> 00:03:59,910
upon second we look<font color="#E5E5E5"> into this full glory</font>

99
00:03:57,810 --> 00:04:03,090
<font color="#E5E5E5">transform refreshing with a new key</font>

100
00:03:59,910 --> 00:04:04,560
sending a mac<font color="#E5E5E5"> and analyze what kind of</font>

101
00:04:03,090 --> 00:04:07,470
key confirmation properties you get

102
00:04:04,560 --> 00:04:11,160
there and third we look into one of the

103
00:04:07,470 --> 00:04:13,050
latest draft of TLS 1.3<font color="#E5E5E5"> and check what</font>

104
00:04:11,160 --> 00:04:16,469
key confirmation properties are

105
00:04:13,050 --> 00:04:20,160
established there so let<font color="#CCCCCC"> me start</font><font color="#E5E5E5"> with</font>

106
00:04:16,470 --> 00:04:22,830
<font color="#E5E5E5">the former model of course in a more</font>

107
00:04:20,160 --> 00:04:24,330
high-level way here and there will be as

108
00:04:22,830 --> 00:04:26,039
you will see in a second they're

109
00:04:24,330 --> 00:04:26,830
actually two notions that we formalize

110
00:04:26,040 --> 00:04:29,710
<font color="#E5E5E5">there</font>

111
00:04:26,830 --> 00:04:32,050
I'll explain<font color="#CCCCCC"> in a bit why well start</font>

112
00:04:29,710 --> 00:04:34,330
with what<font color="#CCCCCC"> we call full key conformation</font>

113
00:04:32,050 --> 00:04:35,830
which<font color="#E5E5E5"> is supposed to formalize the</font>

114
00:04:34,330 --> 00:04:39,068
intuition that by now maybe you already

115
00:04:35,830 --> 00:04:42,008
<font color="#CCCCCC">have which means that</font><font color="#E5E5E5"> once I if one side</font>

116
00:04:39,069 --> 00:04:43,930
one session accepts a key and there

117
00:04:42,009 --> 00:04:46,240
should be already another session which

118
00:04:43,930 --> 00:04:48,280
holds<font color="#CCCCCC"> the same key so consider a</font>

119
00:04:46,240 --> 00:04:50,560
protocol where<font color="#E5E5E5"> errors begin sends the</font>

120
00:04:48,280 --> 00:04:53,438
<font color="#CCCCCC">first message which allows pop to derive</font>

121
00:04:50,560 --> 00:04:56,620
a key and then<font color="#E5E5E5"> Bob responds with its</font>

122
00:04:53,439 --> 00:05:00,430
message and then Ellis concludes by

123
00:04:56,620 --> 00:05:02,560
deriving the key as<font color="#CCCCCC"> well so now</font><font color="#E5E5E5"> folky</font>

124
00:05:00,430 --> 00:05:04,569
confirmation is formalized through the

125
00:05:02,560 --> 00:05:06,069
following establishing the following

126
00:05:04,569 --> 00:05:08,050
<font color="#E5E5E5">predicate or ensuring the following</font>

127
00:05:06,069 --> 00:05:11,110
predicate which<font color="#E5E5E5"> I'll translate in in</font>

128
00:05:08,050 --> 00:05:13,719
<font color="#E5E5E5">high level so</font><font color="#CCCCCC"> you're guaranteed that</font><font color="#E5E5E5"> for</font>

129
00:05:11,110 --> 00:05:16,090
any session in a particular set s and

130
00:05:13,719 --> 00:05:17,770
here you might think of as<font color="#CCCCCC"> being the set</font>

131
00:05:16,090 --> 00:05:21,190
of all client sessions in the protocol

132
00:05:17,770 --> 00:05:23,440
when touch session accepts there exists

133
00:05:21,190 --> 00:05:25,770
another session as<font color="#CCCCCC"> prime</font><font color="#E5E5E5"> in another set</font>

134
00:05:23,440 --> 00:05:30,099
s prime for example a server session

135
00:05:25,770 --> 00:05:33,669
that ensures satisfies three properties

136
00:05:30,099 --> 00:05:35,830
it accepted already it shares its the

137
00:05:33,669 --> 00:05:37,779
communication partner it's like having

138
00:05:35,830 --> 00:05:39,849
the same communication transcript for

139
00:05:37,779 --> 00:05:41,800
example or here formalized as holding

140
00:05:39,849 --> 00:05:45,279
<font color="#E5E5E5">some identifiers value for this session</font>

141
00:05:41,800 --> 00:05:48,370
and most importantly third it holds the

142
00:05:45,279 --> 00:05:51,009
same key it's actually some technical

143
00:05:48,370 --> 00:05:52,539
restriction that we need<font color="#E5E5E5"> to add here we</font>

144
00:05:51,009 --> 00:05:53,919
can only talk about key confirmation

145
00:05:52,539 --> 00:05:56,289
when you talk when you are communicating

146
00:05:53,919 --> 00:05:58,508
<font color="#E5E5E5">with someone that</font><font color="#CCCCCC"> you know in particular</font>

147
00:05:56,289 --> 00:05:59,979
which is not the adversary because

148
00:05:58,509 --> 00:06:03,629
<font color="#E5E5E5">formally you cannot reason about whether</font>

149
00:05:59,979 --> 00:06:05,830
an adversary derives the key or not

150
00:06:03,629 --> 00:06:07,539
let's now formalizing this intuition

151
00:06:05,830 --> 00:06:09,849
that when you accept there is already

152
00:06:07,539 --> 00:06:12,818
someone that accepted with the same key

153
00:06:09,849 --> 00:06:16,389
so<font color="#E5E5E5"> you know you're not using the key for</font>

154
00:06:12,819 --> 00:06:19,089
nothing and interestingly this

155
00:06:16,389 --> 00:06:20,979
formalization now exposes a nice duality

156
00:06:19,089 --> 00:06:23,259
to the classical notion of

157
00:06:20,979 --> 00:06:25,029
authentication so remember<font color="#CCCCCC"> that implicit</font>

158
00:06:23,259 --> 00:06:28,029
authentication tells you that there

159
00:06:25,029 --> 00:06:30,610
exists at most one session that holds

160
00:06:28,029 --> 00:06:32,680
the key you're talking about<font color="#CCCCCC"> while now</font>

161
00:06:30,610 --> 00:06:35,169
full key confirmation says that there

162
00:06:32,680 --> 00:06:37,149
exists at least one session that holds

163
00:06:35,169 --> 00:06:39,250
the key this means that these two

164
00:06:37,149 --> 00:06:40,660
notions modular<font color="#E5E5E5"> acquire modular</font><font color="#CCCCCC"> and</font>

165
00:06:39,250 --> 00:06:42,670
<font color="#CCCCCC">combined nicely you</font><font color="#E5E5E5"> can</font>

166
00:06:40,660 --> 00:06:44,710
prove them separately and in a combined

167
00:06:42,670 --> 00:06:47,500
fashion you will then get<font color="#E5E5E5"> that there</font>

168
00:06:44,710 --> 00:06:49,630
exists exactly one session namely one of

169
00:06:47,500 --> 00:06:51,270
the partner you wanted to talk<font color="#CCCCCC"> to which</font>

170
00:06:49,630 --> 00:06:54,600
holds<font color="#CCCCCC"> the key that you are</font><font color="#E5E5E5"> holding</font>

171
00:06:51,270 --> 00:06:57,729
sometimes called explicit authentication

172
00:06:54,600 --> 00:07:00,670
so why a second notion<font color="#CCCCCC"> well this is</font>

173
00:06:57,730 --> 00:07:03,340
<font color="#E5E5E5">because you inherently cannot have this</font>

174
00:07:00,670 --> 00:07:06,250
notion of full key confirmation on both

175
00:07:03,340 --> 00:07:09,130
sides of the protocol one why is this

176
00:07:06,250 --> 00:07:10,510
let's look at an<font color="#CCCCCC"> example so let's say</font>

177
00:07:09,130 --> 00:07:13,930
<font color="#E5E5E5">there's some communication already going</font>

178
00:07:10,510 --> 00:07:16,360
on and then at some point Ellis accepts

179
00:07:13,930 --> 00:07:19,060
the key she sends a last message in the

180
00:07:16,360 --> 00:07:22,570
protocol which makes also Bob<font color="#CCCCCC"> accept</font><font color="#E5E5E5"> the</font>

181
00:07:19,060 --> 00:07:24,760
key now in<font color="#E5E5E5"> any reasonably strong model</font>

182
00:07:22,570 --> 00:07:26,650
an adversary is always allowed to drop

183
00:07:24,760 --> 00:07:27,909
this last message to infer with the

184
00:07:26,650 --> 00:07:31,810
communication<font color="#CCCCCC"> dropped this message</font>

185
00:07:27,910 --> 00:07:33,580
preventing Bob from deriving this key so

186
00:07:31,810 --> 00:07:36,340
in particular Ellis cannot get this

187
00:07:33,580 --> 00:07:38,430
guarantee that when she accepts there is

188
00:07:36,340 --> 00:07:41,260
already someone that holds the same key

189
00:07:38,430 --> 00:07:42,880
in any<font color="#E5E5E5"> particular whenever you're in the</font>

190
00:07:41,260 --> 00:07:46,360
center of the<font color="#E5E5E5"> last message you can only</font>

191
00:07:42,880 --> 00:07:49,090
get some wicked guarantees and this is

192
00:07:46,360 --> 00:07:52,150
what we formalize under the notion of

193
00:07:49,090 --> 00:07:55,330
almost<font color="#E5E5E5"> full kiko information which aims</font>

194
00:07:52,150 --> 00:07:57,520
at the<font color="#E5E5E5"> following intuition the guarantee</font>

195
00:07:55,330 --> 00:07:59,830
for that for<font color="#E5E5E5"> a session is when this</font>

196
00:07:57,520 --> 00:08:02,440
session accepts then there exists

197
00:07:59,830 --> 00:08:04,780
already another session that might not

198
00:08:02,440 --> 00:08:06,640
<font color="#CCCCCC">have accepted yet but if it accepts it</font>

199
00:08:04,780 --> 00:08:09,669
will<font color="#E5E5E5"> you're guaranteed array that it</font>

200
00:08:06,640 --> 00:08:11,740
will do so with the same key and for

201
00:08:09,669 --> 00:08:13,840
this we<font color="#CCCCCC"> introduce a technical helper</font>

202
00:08:11,740 --> 00:08:16,720
tool which we call key confirmation

203
00:08:13,840 --> 00:08:19,390
identifiers and which work as follows

204
00:08:16,720 --> 00:08:22,120
let's look at this example let's<font color="#CCCCCC"> say</font>

205
00:08:19,390 --> 00:08:24,490
<font color="#E5E5E5">Ellis sends a message and then this</font>

206
00:08:22,120 --> 00:08:26,590
provides some agreement already which

207
00:08:24,490 --> 00:08:28,690
allows Bob to send a key confirmation

208
00:08:26,590 --> 00:08:30,099
identifying<font color="#E5E5E5"> I will show you in a second</font>

209
00:08:28,690 --> 00:08:33,250
how this then works out in<font color="#E5E5E5"> the</font>

210
00:08:30,100 --> 00:08:36,430
formalization then Bob response which

211
00:08:33,250 --> 00:08:39,039
makes Ellis also set this helper to key

212
00:08:36,429 --> 00:08:42,039
confirmation NT fire as well as accept

213
00:08:39,039 --> 00:08:45,280
the session key and then if Bob receives

214
00:08:42,039 --> 00:08:49,120
Ellis last message will also accept with

215
00:08:45,280 --> 00:08:52,329
a key so now the formalization again

216
00:08:49,120 --> 00:08:54,730
translated in more high-level way saying

217
00:08:52,330 --> 00:08:57,010
that for all such session like

218
00:08:54,730 --> 00:08:58,899
is now on the<font color="#E5E5E5"> left side when it accepts</font>

219
00:08:57,010 --> 00:09:00,939
<font color="#E5E5E5">you're guaranteed the following there</font>

220
00:08:58,899 --> 00:09:03,910
exists another session already which

221
00:09:00,940 --> 00:09:06,430
shares some agreement namely it has set

222
00:09:03,910 --> 00:09:07,750
<font color="#E5E5E5">the same key confirmation identifying it</font>

223
00:09:06,430 --> 00:09:09,339
doesn't have the<font color="#CCCCCC"> same key yet it might</font>

224
00:09:07,750 --> 00:09:11,410
<font color="#CCCCCC">not have accepted yet but it holds the</font>

225
00:09:09,339 --> 00:09:14,139
same key confirmation in<font color="#CCCCCC"> the fire</font><font color="#E5E5E5"> and in</font>

226
00:09:11,410 --> 00:09:16,180
particular when this session accepts you

227
00:09:14,139 --> 00:09:18,670
already guaranteed that<font color="#E5E5E5"> it will do so</font>

228
00:09:16,180 --> 00:09:20,529
<font color="#E5E5E5">will only do so with the same key so you</font>

229
00:09:18,670 --> 00:09:24,160
<font color="#E5E5E5">cannot make this other session accept</font>

230
00:09:20,529 --> 00:09:26,860
any more with another key so of course

231
00:09:24,160 --> 00:09:29,380
there's a lot more things to formalize

232
00:09:26,860 --> 00:09:31,209
and<font color="#E5E5E5"> I refer</font><font color="#CCCCCC"> you to for that to the paper</font>

233
00:09:29,380 --> 00:09:33,760
one thing<font color="#E5E5E5"> I want to mention is</font><font color="#CCCCCC"> that</font>

234
00:09:31,209 --> 00:09:35,709
these two notions are indeed comparable

235
00:09:33,760 --> 00:09:38,740
in a sense of that full key confirmation

236
00:09:35,709 --> 00:09:41,979
is stronger that is implies almost full

237
00:09:38,740 --> 00:09:44,620
key confirmation so now<font color="#E5E5E5"> that let's look</font>

238
00:09:41,980 --> 00:09:47,980
how these notions can be applied to

239
00:09:44,620 --> 00:09:50,440
protocols I want<font color="#E5E5E5"> to first look into this</font>

240
00:09:47,980 --> 00:09:53,250
protocol<font color="#E5E5E5"> transform just supposed to add</font>

241
00:09:50,440 --> 00:09:56,589
key confirmation to an app to some

242
00:09:53,250 --> 00:09:58,240
arbitrary protocol so we<font color="#E5E5E5"> start from a</font>

243
00:09:56,589 --> 00:10:00,760
key exchange protocol which is complete

244
00:09:58,240 --> 00:10:02,410
in its sense it outputs a key and some

245
00:10:00,760 --> 00:10:05,470
session identifier<font color="#CCCCCC"> which is basically</font>

246
00:10:02,410 --> 00:10:08,139
like<font color="#CCCCCC"> a notion that makes you formally</font>

247
00:10:05,470 --> 00:10:10,630
link these two sites together as talking

248
00:10:08,139 --> 00:10:11,829
in the same communication you might

249
00:10:10,630 --> 00:10:14,709
think of it being for example the

250
00:10:11,829 --> 00:10:16,989
transcript of all messages exchanged now

251
00:10:14,709 --> 00:10:19,959
we want to build around this a transform

252
00:10:16,990 --> 00:10:22,810
transform protocol which ensures key

253
00:10:19,959 --> 00:10:24,939
confirmation and we do so by first of

254
00:10:22,810 --> 00:10:27,250
all having this session identifier

255
00:10:24,940 --> 00:10:29,410
agreement of<font color="#CCCCCC"> the initial protocol being</font>

256
00:10:27,250 --> 00:10:32,110
our key confirmation identifiers our

257
00:10:29,410 --> 00:10:34,510
preliminary agreement and then from the

258
00:10:32,110 --> 00:10:36,730
session key that we derived in the<font color="#CCCCCC"> main</font>

259
00:10:34,510 --> 00:10:38,740
protocol we arrived three independent

260
00:10:36,730 --> 00:10:41,949
<font color="#CCCCCC">Keys a green one an orange one and the</font>

261
00:10:38,740 --> 00:10:44,079
purple one and the letter<font color="#E5E5E5"> to we use to</font>

262
00:10:41,949 --> 00:10:46,149
exchange message authentication codes

263
00:10:44,079 --> 00:10:49,630
over the transcript of the session

264
00:10:46,149 --> 00:10:51,610
identifiers that establish the linking

265
00:10:49,630 --> 00:10:54,189
in the original protocol and if these

266
00:10:51,610 --> 00:10:56,589
verify with an output the third the

267
00:10:54,190 --> 00:10:58,839
green key as our actual session key

268
00:10:56,589 --> 00:11:01,839
which<font color="#CCCCCC"> will be independent of all the</font>

269
00:10:58,839 --> 00:11:04,209
<font color="#CCCCCC">other keys involved so now in the work</font>

270
00:11:01,839 --> 00:11:07,120
we show that first of all this

271
00:11:04,209 --> 00:11:08,410
transformation doesn't break anything so

272
00:11:07,120 --> 00:11:09,970
it preserves in

273
00:11:08,410 --> 00:11:12,790
they're the key secrecy and the

274
00:11:09,970 --> 00:11:15,399
authentication properties of the

275
00:11:12,790 --> 00:11:17,680
original protocol and moreover it

276
00:11:15,399 --> 00:11:19,569
provides you with the strongest<font color="#CCCCCC"> t</font>

277
00:11:17,680 --> 00:11:22,029
confirmation you can hope for namely

278
00:11:19,569 --> 00:11:24,699
full key confirmation for the receiver

279
00:11:22,029 --> 00:11:28,649
and<font color="#E5E5E5"> almost full key confirmation for the</font>

280
00:11:24,699 --> 00:11:33,550
sender of the final<font color="#E5E5E5"> of the last message</font>

281
00:11:28,649 --> 00:11:35,230
<font color="#CCCCCC">alright so now let's</font><font color="#E5E5E5"> look into what key</font>

282
00:11:33,550 --> 00:11:38,290
confirmation will became about say about

283
00:11:35,230 --> 00:11:40,870
key confirmation until as<font color="#CCCCCC"> 1.3 more</font>

284
00:11:38,290 --> 00:11:44,019
specifically we looked into draft n this

285
00:11:40,870 --> 00:11:46,240
was a version out there around<font color="#CCCCCC"> October</font>

286
00:11:44,019 --> 00:11:49,269
follow following October last year and

287
00:11:46,240 --> 00:11:51,730
we look<font color="#CCCCCC"> into the main handshake which is</font>

288
00:11:49,269 --> 00:11:55,209
in diff ahem and based handshake so key

289
00:11:51,730 --> 00:11:57,850
exchange protocol in Phyllis you don't

290
00:11:55,209 --> 00:11:59,888
have to lower understand all the details

291
00:11:57,850 --> 00:12:02,230
of the protocol the main ideas of this

292
00:11:59,889 --> 00:12:04,089
handshake is as follows so<font color="#CCCCCC"> the client</font>

293
00:12:02,230 --> 00:12:06,579
and<font color="#E5E5E5"> the server start off by the client</font>

294
00:12:04,089 --> 00:12:08,680
beginning server responding with a hello

295
00:12:06,579 --> 00:12:10,239
and<font color="#E5E5E5"> the kisha message where the hello</font>

296
00:12:08,680 --> 00:12:14,229
message is basically a random nonce

297
00:12:10,240 --> 00:12:17,019
Reynolds number value and the<font color="#E5E5E5"> shiki</font>

298
00:12:14,230 --> 00:12:19,180
share being a defilement share and<font color="#CCCCCC"> then</font>

299
00:12:17,019 --> 00:12:21,579
for authentication the server will send

300
00:12:19,180 --> 00:12:24,849
its certificate in particular including

301
00:12:21,579 --> 00:12:26,459
its public key<font color="#E5E5E5"> and a signature over the</font>

302
00:12:24,850 --> 00:12:29,680
transcripts<font color="#E5E5E5"> of the messages exchanged</font>

303
00:12:26,459 --> 00:12:33,939
will then also send<font color="#CCCCCC"> a finished message a</font>

304
00:12:29,680 --> 00:12:36,189
Mac value over this transcript and then

305
00:12:33,939 --> 00:12:37,660
to complete the handshake the client for

306
00:12:36,189 --> 00:12:40,149
authentication also sends its

307
00:12:37,660 --> 00:12:43,240
certificate and a signature and Mac

308
00:12:40,149 --> 00:12:45,430
value over the transcript well we can

309
00:12:43,240 --> 00:12:47,290
show now is that this<font color="#E5E5E5"> basically achieves</font>

310
00:12:45,430 --> 00:12:49,329
the strongest eco information you can

311
00:12:47,290 --> 00:12:51,370
hope for in the setting namely that for

312
00:12:49,329 --> 00:12:54,099
clients which sent the last message you

313
00:12:51,370 --> 00:12:55,839
get<font color="#E5E5E5"> almost full key confirmation so you</font>

314
00:12:54,100 --> 00:12:57,670
don't know whether the server actually

315
00:12:55,839 --> 00:12:59,740
<font color="#E5E5E5">will get your message it might be</font>

316
00:12:57,670 --> 00:13:01,509
dropped but if it gets the server will

317
00:12:59,740 --> 00:13:04,240
accept with the same key that<font color="#CCCCCC"> you're</font>

318
00:13:01,509 --> 00:13:07,180
<font color="#CCCCCC">having already on the other side the</font>

319
00:13:04,240 --> 00:13:08,680
server gets full key confirmation so

320
00:13:07,180 --> 00:13:11,128
he's already sure that there is a client

321
00:13:08,680 --> 00:13:14,529
<font color="#CCCCCC">out there which holds the same key</font>

322
00:13:11,129 --> 00:13:17,110
interestingly now we show this based on

323
00:13:14,529 --> 00:13:19,660
<font color="#E5E5E5">the signatures of them in the protocol</font>

324
00:13:17,110 --> 00:13:20,920
not based on the Mac<font color="#CCCCCC"> values send to the</font>

325
00:13:19,660 --> 00:13:22,100
finished messages which are somewhat

326
00:13:20,920 --> 00:13:25,130
resembling the

327
00:13:22,100 --> 00:13:27,949
generic transform which might<font color="#CCCCCC"> be a bit</font>

328
00:13:25,130 --> 00:13:29,509
surprising because often<font color="#CCCCCC"> finished</font>

329
00:13:27,949 --> 00:13:31,849
messages are thought of the mean of

330
00:13:29,509 --> 00:13:33,079
getting key confirmation but we<font color="#E5E5E5"> can</font>

331
00:13:31,850 --> 00:13:36,350
actually<font color="#E5E5E5"> show that</font><font color="#CCCCCC"> even</font><font color="#E5E5E5"> without key</font>

332
00:13:33,079 --> 00:13:37,790
confirmation the same properties hold we

333
00:13:36,350 --> 00:13:40,550
wear now this does not mean that we

334
00:13:37,790 --> 00:13:44,000
advocate removing finish messages hell

335
00:13:40,550 --> 00:13:45,529
no<font color="#E5E5E5"> it just says okay you get this from</font>

336
00:13:44,000 --> 00:13:47,300
some other part of the protocol already

337
00:13:45,529 --> 00:13:49,790
in particular<font color="#E5E5E5"> the finished messages are</font>

338
00:13:47,300 --> 00:13:51,709
quite important for other modes and for

339
00:13:49,790 --> 00:13:54,589
other aspects of<font color="#E5E5E5"> security in this</font>

340
00:13:51,709 --> 00:13:58,339
protocol but for key confirmation you

341
00:13:54,589 --> 00:14:00,589
can actually rely on the signatures and

342
00:13:58,339 --> 00:14:02,870
<font color="#E5E5E5">finally in the paper we also look into</font>

343
00:14:00,589 --> 00:14:04,370
the unilateral authentication case so

344
00:14:02,870 --> 00:14:08,300
the case where only the server

345
00:14:04,370 --> 00:14:10,190
authenticates and we show that get some

346
00:14:08,300 --> 00:14:14,990
similar somewhat<font color="#CCCCCC"> similar results there</font>

347
00:14:10,190 --> 00:14:18,860
refer you<font color="#CCCCCC"> to the paper for</font><font color="#E5E5E5"> this okay so</font>

348
00:14:14,990 --> 00:14:20,899
to summarize well we formalize key

349
00:14:18,860 --> 00:14:23,690
confirmation and are the first ones to

350
00:14:20,899 --> 00:14:26,029
do so in a game based setting providing

351
00:14:23,690 --> 00:14:27,980
some formal ground for discussion of

352
00:14:26,029 --> 00:14:32,660
this property where there was<font color="#E5E5E5"> long</font>

353
00:14:27,980 --> 00:14:34,490
before and we establish two notions

354
00:14:32,660 --> 00:14:36,350
separate two notions<font color="#E5E5E5"> full key</font>

355
00:14:34,490 --> 00:14:38,899
confirmation for the receiver<font color="#E5E5E5"> of the</font>

356
00:14:36,350 --> 00:14:41,060
last message and some weaker notion

357
00:14:38,899 --> 00:14:43,670
almost full kiko information for the

358
00:14:41,060 --> 00:14:47,180
sender of the last<font color="#E5E5E5"> message we then</font>

359
00:14:43,670 --> 00:14:49,880
exercise this formalism on this generic

360
00:14:47,180 --> 00:14:53,149
transformation and show<font color="#CCCCCC"> that it's indeed</font>

361
00:14:49,880 --> 00:14:55,610
generically at ski confirmation to some

362
00:14:53,149 --> 00:14:59,060
key con to some key exchange protocol

363
00:14:55,610 --> 00:15:01,069
and finally we're looking to<font color="#E5E5E5"> till as 1.3</font>

364
00:14:59,060 --> 00:15:03,969
and we show that it provides key

365
00:15:01,069 --> 00:15:06,410
confirmation interestingly even without

366
00:15:03,970 --> 00:15:09,620
using the finished messages within this

367
00:15:06,410 --> 00:15:11,920
proof right<font color="#E5E5E5"> this concludes my talk thank</font>

368
00:15:09,620 --> 00:15:11,920
you very much

369
00:15:17,620 --> 00:15:29,870
questions so I have one question and so

370
00:15:27,440 --> 00:15:31,430
you<font color="#E5E5E5"> see the TRS apprised key</font>

371
00:15:29,870 --> 00:15:33,620
confirmation<font color="#CCCCCC"> over the finish</font><font color="#E5E5E5"> messages</font>

372
00:15:31,430 --> 00:15:35,089
does that mean that I complete I can

373
00:15:33,620 --> 00:15:37,579
completely remove these messages<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the</font>

374
00:15:35,089 --> 00:15:40,730
protocol is still secure you use<font color="#E5E5E5"> nothing</font>

375
00:15:37,579 --> 00:15:42,410
or you lose something else so again I

376
00:15:40,730 --> 00:15:45,620
want to stress that one has<font color="#E5E5E5"> to be</font>

377
00:15:42,410 --> 00:15:47,870
careful here so<font color="#E5E5E5"> for key confirmation in</font>

378
00:15:45,620 --> 00:15:49,430
this main hench Tag Mode you don't need

379
00:15:47,870 --> 00:15:53,089
to<font color="#E5E5E5"> finish messages and we show that you</font>

380
00:15:49,430 --> 00:15:54,890
could even remove them however this does

381
00:15:53,089 --> 00:15:57,170
not<font color="#E5E5E5"> this does not say</font><font color="#CCCCCC"> anything about</font>

382
00:15:54,890 --> 00:15:59,300
what kind of other properties key

383
00:15:57,170 --> 00:16:00,649
secrecy authentication etc you get we

384
00:15:59,300 --> 00:16:02,689
don't look<font color="#E5E5E5"> into this for this specific</font>

385
00:16:00,649 --> 00:16:06,170
purpose and in particular we do not

386
00:16:02,690 --> 00:16:08,300
advocate to remove them but especially

387
00:16:06,170 --> 00:16:10,939
because they serve important purposes in

388
00:16:08,300 --> 00:16:12,589
other modes of the protocol so for key

389
00:16:10,940 --> 00:16:14,690
confirmation in the<font color="#E5E5E5"> main mode you don't</font>

390
00:16:12,589 --> 00:16:19,550
need<font color="#CCCCCC"> them but please don't remove them</font>

391
00:16:14,690 --> 00:16:22,040
okay I have a question so you mentioned

392
00:16:19,550 --> 00:16:26,270
that<font color="#E5E5E5"> some jealous modes don't use</font>

393
00:16:22,040 --> 00:16:29,990
signatures did you look at confirmation

394
00:16:26,270 --> 00:16:32,839
property for let's say pre-shared key in

395
00:16:29,990 --> 00:16:35,779
TLS 13<font color="#E5E5E5"> no we just looked into the main</font>

396
00:16:32,839 --> 00:16:37,760
mode using signatures for the pre-shared

397
00:16:35,779 --> 00:16:39,560
key mode you're right there no no

398
00:16:37,760 --> 00:16:42,170
signatures involved this would be<font color="#E5E5E5"> in</font>

399
00:16:39,560 --> 00:16:43,790
particular case where well a you get

400
00:16:42,170 --> 00:16:45,469
secrecy only through the finished

401
00:16:43,790 --> 00:16:47,839
messages so you crucially need them and

402
00:16:45,470 --> 00:16:50,350
I would expect that you<font color="#CCCCCC"> also get key</font>

403
00:16:47,839 --> 00:16:53,440
confirmation only through these messages

404
00:16:50,350 --> 00:16:53,440
thank you

405
00:16:56,100 --> 00:17:03,240
okay last<font color="#CCCCCC"> year's best paper was the</font>

406
00:16:59,290 --> 00:17:08,069
barouche paper on TLS on the previous

407
00:17:03,240 --> 00:17:12,790
version<font color="#E5E5E5"> and they pointed out that the</font>

408
00:17:08,069 --> 00:17:15,010
implementations were deeply flawed I

409
00:17:12,790 --> 00:17:17,950
applaud what you're doing and starting

410
00:17:15,010 --> 00:17:21,490
to<font color="#E5E5E5"> get the formal analysis of the</font>

411
00:17:17,950 --> 00:17:23,860
protocol but<font color="#CCCCCC"> ultimately I think there</font>

412
00:17:21,490 --> 00:17:26,980
are<font color="#E5E5E5"> a lot of properties</font><font color="#CCCCCC"> that the</font>

413
00:17:23,859 --> 00:17:29,530
barouche paper showed should not exist

414
00:17:26,980 --> 00:17:31,000
and these<font color="#CCCCCC"> are the tough ones to get</font><font color="#E5E5E5"> at</font>

415
00:17:29,530 --> 00:17:33,389
so I just wondered if<font color="#E5E5E5"> you had any</font>

416
00:17:31,000 --> 00:17:36,730
thoughts about where this is going and

417
00:17:33,390 --> 00:17:38,890
what you might do in the future and this

418
00:17:36,730 --> 00:17:40,570
question sort of bears on some of the

419
00:17:38,890 --> 00:17:42,370
subsequent papers in this session as

420
00:17:40,570 --> 00:17:44,950
well but I'm<font color="#CCCCCC"> not</font><font color="#E5E5E5"> going to get up and ask</font>

421
00:17:42,370 --> 00:17:46,360
at each time so well I guess the others

422
00:17:44,950 --> 00:17:49,180
can just repeat the<font color="#E5E5E5"> question without</font>

423
00:17:46,360 --> 00:17:51,159
being asked<font color="#E5E5E5"> for my boy guess I fully</font>

424
00:17:49,180 --> 00:17:53,500
agree of course this is just one piece

425
00:17:51,160 --> 00:17:55,450
<font color="#CCCCCC">in a large puzzle there are lot of</font>

426
00:17:53,500 --> 00:17:57,010
things to look into both from the<font color="#CCCCCC"> Siri</font>

427
00:17:55,450 --> 00:18:00,370
perspective as well as from

428
00:17:57,010 --> 00:18:02,560
implementations and yes the the paper

429
00:18:00,370 --> 00:18:05,679
last year did a particularly great job

430
00:18:02,560 --> 00:18:09,120
there in finding some aspects and we're

431
00:18:05,680 --> 00:18:12,700
definitely<font color="#E5E5E5"> not done I think it's it's</font>

432
00:18:09,120 --> 00:18:15,100
worthwhile and and rewarding to first

433
00:18:12,700 --> 00:18:17,740
look into the theory aspects and to

434
00:18:15,100 --> 00:18:22,570
transfer them then into further models

435
00:18:17,740 --> 00:18:27,190
which are closer to implementations man

436
00:18:22,570 --> 00:18:29,050
getting from cisco systems<font color="#CCCCCC"> I'm trying</font><font color="#E5E5E5"> to</font>

437
00:18:27,190 --> 00:18:32,880
<font color="#E5E5E5">remember way back but if I remember</font>

438
00:18:29,050 --> 00:18:36,070
correctly the bell<font color="#CCCCCC"> arion Rogo a model is</font>

439
00:18:32,880 --> 00:18:38,500
actually<font color="#E5E5E5"> broken by key confirmation the</font>

440
00:18:36,070 --> 00:18:41,350
adversary can use the that tributed key

441
00:18:38,500 --> 00:18:43,810
confirmation to distinguish a key from a

442
00:18:41,350 --> 00:18:45,340
random key so<font color="#E5E5E5"> as curious if you could</font>

443
00:18:43,810 --> 00:18:46,659
comment on your security model and

444
00:18:45,340 --> 00:18:50,790
whether or<font color="#E5E5E5"> not you looked at how key</font>

445
00:18:46,660 --> 00:18:53,080
confirmation actually affects that model

446
00:18:50,790 --> 00:18:55,420
I'm not<font color="#E5E5E5"> sure I got the question right I</font>

447
00:18:53,080 --> 00:18:56,860
understood as saying that in the belly

448
00:18:55,420 --> 00:18:58,630
rub away more low-key confirmation you

449
00:18:56,860 --> 00:19:02,409
inherently<font color="#E5E5E5"> cannot have because it breaks</font>

450
00:18:58,630 --> 00:19:04,240
the key secrecy aspect<font color="#E5E5E5"> um basically I</font>

451
00:19:02,410 --> 00:19:07,120
<font color="#E5E5E5">don't know if it's necessarily an</font>

452
00:19:04,240 --> 00:19:08,350
important like like the adversary can

453
00:19:07,120 --> 00:19:09,580
recover the key but it actually does

454
00:19:08,350 --> 00:19:10,929
provide<font color="#E5E5E5"> a way if the adversary</font>

455
00:19:09,580 --> 00:19:12,669
to distinguish from random which is

456
00:19:10,930 --> 00:19:14,710
essentially<font color="#E5E5E5"> their their security problem</font>

457
00:19:12,670 --> 00:19:17,590
yeah<font color="#E5E5E5"> okay so so this notion is</font>

458
00:19:14,710 --> 00:19:19,720
compatible in a sense of well the main

459
00:19:17,590 --> 00:19:22,270
point is you or you<font color="#E5E5E5"> should you cannot do</font>

460
00:19:19,720 --> 00:19:23,860
<font color="#E5E5E5">key confirmation with your main key like</font>

461
00:19:22,270 --> 00:19:25,870
sending a<font color="#CCCCCC"> Mac under your main key this</font>

462
00:19:23,860 --> 00:19:28,149
breaks the the key indistinguishability

463
00:19:25,870 --> 00:19:29,110
in a sense of<font color="#E5E5E5"> below so what you have</font><font color="#CCCCCC"> to</font>

464
00:19:28,150 --> 00:19:30,880
<font color="#CCCCCC">do</font><font color="#E5E5E5"> and this is what it's done for</font>

465
00:19:29,110 --> 00:19:33,010
example in this transform you derive a

466
00:19:30,880 --> 00:19:34,720
separate key with this one you<font color="#CCCCCC"> Dookie</font>

467
00:19:33,010 --> 00:19:36,879
confirmation and the<font color="#E5E5E5"> other one that you</font>

468
00:19:34,720 --> 00:19:38,770
are kept<font color="#E5E5E5"> indistinguishable not used</font>

469
00:19:36,880 --> 00:19:40,090
before at this point you output as your

470
00:19:38,770 --> 00:19:42,580
main session key and then you still get

471
00:19:40,090 --> 00:19:44,560
like the freshness the good property in

472
00:19:42,580 --> 00:19:47,740
a sense of<font color="#E5E5E5"> ll go away cool thank you</font>

473
00:19:44,560 --> 00:19:49,810
welcome final<font color="#CCCCCC"> question yes interesting</font>

474
00:19:47,740 --> 00:19:51,760
work I was wondering<font color="#CCCCCC"> have you come</font>

475
00:19:49,810 --> 00:19:54,220
<font color="#E5E5E5">across protocols that are used in</font>

476
00:19:51,760 --> 00:19:56,080
practice or being standardized that do

477
00:19:54,220 --> 00:19:59,290
not meet your definitions of key

478
00:19:56,080 --> 00:20:01,480
confirmation well in particular if you

479
00:19:59,290 --> 00:20:04,480
<font color="#E5E5E5">look into tears 1.2 there was quite some</font>

480
00:20:01,480 --> 00:20:06,520
trouble into in analyzing kills 1.2 in a

481
00:20:04,480 --> 00:20:08,950
formal way because it did not fit this

482
00:20:06,520 --> 00:20:10,840
concept of having a fresh key at the<font color="#E5E5E5"> end</font>

483
00:20:08,950 --> 00:20:13,360
of the handshake so you needed more

484
00:20:10,840 --> 00:20:17,139
tailored more specific ways of analyzing

485
00:20:13,360 --> 00:20:18,459
it because it broke this idea of not

486
00:20:17,140 --> 00:20:21,040
using the session key before you

487
00:20:18,460 --> 00:20:22,510
finalize the handshake and that's not

488
00:20:21,040 --> 00:20:26,950
the<font color="#CCCCCC"> only example of course but it's one</font>

489
00:20:22,510 --> 00:20:28,690
<font color="#E5E5E5">of the prominent ones it's not</font><font color="#CCCCCC"> clear if</font>

490
00:20:26,950 --> 00:20:30,910
the protocols and not necessarily meet

491
00:20:28,690 --> 00:20:33,730
your definition but this work helps you

492
00:20:30,910 --> 00:20:35,290
sort<font color="#E5E5E5"> of organize discussed about it well</font>

493
00:20:33,730 --> 00:20:37,210
it's we didn't look into whether T at

494
00:20:35,290 --> 00:20:39,760
one point two meets<font color="#E5E5E5"> this kind of key</font>

495
00:20:37,210 --> 00:20:42,820
confirmation notion but it's an example

496
00:20:39,760 --> 00:20:44,680
<font color="#CCCCCC">where using</font><font color="#E5E5E5"> the key in a way that</font>

497
00:20:42,820 --> 00:20:46,780
whether key was used in a way that

498
00:20:44,680 --> 00:20:49,540
breaks this main idea of key secrecy

499
00:20:46,780 --> 00:20:52,270
idea of key secrecy idea of key secrecy

500
00:20:49,540 --> 00:20:54,750
idea of key secrecy idea of key secrecy

501
00:20:52,270 --> 00:20:54,750
idea

