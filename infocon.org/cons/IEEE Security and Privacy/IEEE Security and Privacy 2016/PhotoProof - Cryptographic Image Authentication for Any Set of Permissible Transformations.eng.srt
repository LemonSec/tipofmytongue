1
00:00:00,000 --> 00:00:05,580
<font color="#E5E5E5">I would like</font><font color="#CCCCCC"> to tell you about a recent</font>

2
00:00:02,790 --> 00:00:08,129
feature sorry recent research done with

3
00:00:05,580 --> 00:00:10,620
a son<font color="#CCCCCC"> of a and the system that</font><font color="#E5E5E5"> we build</font>

4
00:00:08,130 --> 00:00:12,990
called photo proof for authenticating

5
00:00:10,620 --> 00:00:16,410
images and let's<font color="#E5E5E5"> start with</font><font color="#CCCCCC"> some</font>

6
00:00:12,990 --> 00:00:18,150
motivation photographic images are

7
00:00:16,410 --> 00:00:20,010
nowadays ubiquitous especially in the

8
00:00:18,150 --> 00:00:22,409
digital medium and they are used as

9
00:00:20,010 --> 00:00:25,410
evidence that<font color="#CCCCCC"> a certain physical seen</font>

10
00:00:22,410 --> 00:00:27,539
once happened in reality this happens in

11
00:00:25,410 --> 00:00:30,300
numerous contacts in the legal context

12
00:00:27,539 --> 00:00:33,210
as legal evidence in journalism<font color="#E5E5E5"> in</font>

13
00:00:30,300 --> 00:00:35,850
politics in social interactions<font color="#CCCCCC"> of all</font>

14
00:00:33,210 --> 00:00:39,180
sorts whether positive or negative as in

15
00:00:35,850 --> 00:00:41,579
shaming or extortion it happens in

16
00:00:39,180 --> 00:00:45,059
dating website as proofs of physical

17
00:00:41,579 --> 00:00:47,520
attractiveness and perhaps in the most

18
00:00:45,059 --> 00:00:49,890
important form of images on the internet

19
00:00:47,520 --> 00:00:57,000
that frequently stretch our credulity

20
00:00:49,890 --> 00:00:59,539
about physics and<font color="#CCCCCC"> physic cats and in all</font>

21
00:00:57,000 --> 00:01:02,879
of these cases there's the question of

22
00:00:59,539 --> 00:01:05,430
is our<font color="#CCCCCC"> if they</font><font color="#E5E5E5"> claim true is the</font>

23
00:01:02,879 --> 00:01:07,850
evidence really truthful and of<font color="#CCCCCC"> course</font>

24
00:01:05,430 --> 00:01:11,159
with the ease of digital manipulation

25
00:01:07,850 --> 00:01:13,009
it's<font color="#E5E5E5"> often false taking dating website</font>

26
00:01:11,159 --> 00:01:15,540
for example well there's an app for that

27
00:01:13,010 --> 00:01:20,220
facetune would fix up minor blemishes

28
00:01:15,540 --> 00:01:22,439
and clearly the presence of a bunch of

29
00:01:20,220 --> 00:01:25,140
<font color="#E5E5E5">pixels in in a properly formatted file</font>

30
00:01:22,439 --> 00:01:26,908
it construes very weak evidence that

31
00:01:25,140 --> 00:01:32,610
something ever happened in reality and

32
00:01:26,909 --> 00:01:36,540
it's something that even a major news

33
00:01:32,610 --> 00:01:39,030
venues fall prey to and there have been

34
00:01:36,540 --> 00:01:44,240
<font color="#E5E5E5">many</font><font color="#CCCCCC"> Fiasco's about fake images making</font>

35
00:01:39,030 --> 00:01:46,920
it to top newspapers and<font color="#CCCCCC"> journals and</font>

36
00:01:44,240 --> 00:01:50,820
it's a concern for everyone from Reuters

37
00:01:46,920 --> 00:01:53,070
to the Opera nowadays well clearly what

38
00:01:50,820 --> 00:01:56,250
we<font color="#E5E5E5"> need them is an image of syndication</font>

39
00:01:53,070 --> 00:01:58,710
scheme that allows someone to capture an

40
00:01:56,250 --> 00:02:01,890
image and translate that image to a

41
00:01:58,710 --> 00:02:04,110
viewer and along with that image<font color="#CCCCCC"> we</font>

42
00:02:01,890 --> 00:02:06,960
would like<font color="#CCCCCC"> to also have some kind of</font>

43
00:02:04,110 --> 00:02:09,869
proving and verification mechanism that

44
00:02:06,960 --> 00:02:12,629
would allow us<font color="#E5E5E5"> to send the proof and</font><font color="#CCCCCC"> the</font>

45
00:02:09,869 --> 00:02:13,800
proof would be verified well sounds<font color="#CCCCCC"> very</font>

46
00:02:12,629 --> 00:02:15,840
straightforward<font color="#E5E5E5"> and</font>

47
00:02:13,800 --> 00:02:19,020
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> the naive solution of simply</font>

48
00:02:15,840 --> 00:02:22,110
signing every image on the camera it's

49
00:02:19,020 --> 00:02:23,520
<font color="#E5E5E5">something that Nikon and Canon have</font>

50
00:02:22,110 --> 00:02:25,260
already implemented and some of their

51
00:02:23,520 --> 00:02:30,060
camera intake in their case

52
00:02:25,260 --> 00:02:35,250
preposterously bad but it<font color="#CCCCCC"> could be done</font>

53
00:02:30,060 --> 00:02:37,260
<font color="#CCCCCC">properly but</font><font color="#E5E5E5"> even if we implemented this</font>

54
00:02:35,250 --> 00:02:38,820
properly and we kept the key secure and

55
00:02:37,260 --> 00:02:42,060
if they didn't use the same secret key

56
00:02:38,820 --> 00:02:45,560
on every camera like they did there's

57
00:02:42,060 --> 00:02:48,860
still a fun day functionality issue

58
00:02:45,560 --> 00:02:51,360
because any change to an image will

59
00:02:48,860 --> 00:02:53,160
invalidate the chorus posing digital

60
00:02:51,360 --> 00:02:55,830
signature by design by definition of

61
00:02:53,160 --> 00:02:58,500
digital signatures but in practice maybe

62
00:02:55,830 --> 00:03:00,330
<font color="#E5E5E5">the image was originally captured by 24</font>

63
00:02:58,500 --> 00:03:04,290
megapixel camera and is somewhat

64
00:03:00,330 --> 00:03:05,670
underexposed and there's a junkie around

65
00:03:04,290 --> 00:03:08,030
it<font color="#E5E5E5"> it needs to be corrupt out and</font>

66
00:03:05,670 --> 00:03:10,410
rotated and so forth and none<font color="#CCCCCC"> of this</font>

67
00:03:08,030 --> 00:03:13,200
would detract from the authenticity of

68
00:03:10,410 --> 00:03:14,790
the image so we would like to<font color="#CCCCCC"> have</font><font color="#E5E5E5"> some</font>

69
00:03:13,200 --> 00:03:18,690
degrees of freedom but clearly not

70
00:03:14,790 --> 00:03:21,239
others so we want<font color="#E5E5E5"> to be able to specify</font>

71
00:03:18,690 --> 00:03:23,070
some set of legitimate or permissible

72
00:03:21,239 --> 00:03:25,380
transformations that comply with

73
00:03:23,070 --> 00:03:28,769
whatever is our view of authenticity in

74
00:03:25,380 --> 00:03:30,989
a particular application moreover we

75
00:03:28,770 --> 00:03:32,940
would not like to allow repeated editing

76
00:03:30,989 --> 00:03:35,670
after cropping maybe some brightness

77
00:03:32,940 --> 00:03:38,579
adjustment some rotation all of these

78
00:03:35,670 --> 00:03:40,799
will preserve the authenticity of the

79
00:03:38,580 --> 00:03:44,760
image and we<font color="#E5E5E5"> want to preserve soundness</font>

80
00:03:40,800 --> 00:03:46,680
in the sense that<font color="#E5E5E5"> images will pass</font>

81
00:03:44,760 --> 00:03:48,239
verification if and only if they

82
00:03:46,680 --> 00:03:51,330
resulted from a series of permissible

83
00:03:48,239 --> 00:03:53,070
transformations for efficiency we want

84
00:03:51,330 --> 00:03:56,120
the sickness meaning that proofs are

85
00:03:53,070 --> 00:03:59,070
small and can be quickly verified and

86
00:03:56,120 --> 00:04:00,690
often we also want the proofs<font color="#E5E5E5"> to be zero</font>

87
00:03:59,070 --> 00:04:03,450
knowledge in the sense that they do not

88
00:04:00,690 --> 00:04:06,480
reveal anything about<font color="#CCCCCC"> the final image</font>

89
00:04:03,450 --> 00:04:09,869
<font color="#E5E5E5">other than its authenticity in the</font>

90
00:04:06,480 --> 00:04:13,140
affirmation sense so as a quick use case

91
00:04:09,870 --> 00:04:16,019
let's go back to dating website photos

92
00:04:13,140 --> 00:04:19,320
should reflect what users<font color="#E5E5E5"> really look</font>

93
00:04:16,019 --> 00:04:22,100
like which<font color="#CCCCCC"> they dictate a</font><font color="#E5E5E5"> set of</font>

94
00:04:19,320 --> 00:04:27,240
transformations that we can haggle over

95
00:04:22,100 --> 00:04:29,160
and we also want to<font color="#E5E5E5"> make sure that</font>

96
00:04:27,240 --> 00:04:30,990
the transformation loses information

97
00:04:29,160 --> 00:04:33,270
like<font color="#CCCCCC"> warping the ninth information is</font>

98
00:04:30,990 --> 00:04:37,800
really lost for example this attractive

99
00:04:33,270 --> 00:04:40,169
picture right here maybe originated in a

100
00:04:37,800 --> 00:04:42,150
somewhat less attractive picture and we

101
00:04:40,169 --> 00:04:44,068
want the user to be able to crop just

102
00:04:42,150 --> 00:04:46,830
the relevant portion while hiding the

103
00:04:44,069 --> 00:04:50,849
rest so I<font color="#E5E5E5"> think this is</font><font color="#CCCCCC"> a very very</font>

104
00:04:46,830 --> 00:04:54,539
<font color="#E5E5E5">reasonable set of properties to wish for</font>

105
00:04:50,849 --> 00:05:00,780
and indeed the desire<font color="#CCCCCC"> for this</font><font color="#E5E5E5"> has been</font>

106
00:04:54,539 --> 00:05:03,539
recognized for decades<font color="#E5E5E5"> now and we can</font>

107
00:05:00,780 --> 00:05:05,638
look at schemes in the literature beyond

108
00:05:03,539 --> 00:05:07,979
the trivial digital signature scheme

109
00:05:05,639 --> 00:05:10,430
they be a series of works coming mainly

110
00:05:07,979 --> 00:05:13,770
from<font color="#CCCCCC"> the computer graphics community</font>

111
00:05:10,430 --> 00:05:15,750
that uses the robust hash technique and

112
00:05:13,770 --> 00:05:18,210
what they say<font color="#E5E5E5"> basically is let's not</font>

113
00:05:15,750 --> 00:05:20,580
sign the full original image but this

114
00:05:18,210 --> 00:05:22,229
still it ensues into something and<font color="#E5E5E5"> then</font>

115
00:05:20,580 --> 00:05:24,000
signed something and that something

116
00:05:22,229 --> 00:05:26,280
would be invariant to<font color="#CCCCCC"> the</font>

117
00:05:24,000 --> 00:05:29,150
transformations that we desire so for

118
00:05:26,280 --> 00:05:32,638
example<font color="#E5E5E5"> if we want an image to be</font>

119
00:05:29,150 --> 00:05:34,888
rotatable the rotations are in the class

120
00:05:32,639 --> 00:05:37,620
of permissible / transformations then

121
00:05:34,889 --> 00:05:39,539
well on the camera we would compute the

122
00:05:37,620 --> 00:05:42,240
radon transform of the image which is

123
00:05:39,539 --> 00:05:43,770
invariant<font color="#E5E5E5"> to rotations we sign that and</font>

124
00:05:42,240 --> 00:05:45,570
<font color="#E5E5E5">everyone wants to verify would compute</font>

125
00:05:43,770 --> 00:05:47,909
the same transform and compare that<font color="#CCCCCC"> to</font>

126
00:05:45,570 --> 00:05:50,639
the<font color="#E5E5E5"> signature if you want to allow a bit</font>

127
00:05:47,909 --> 00:05:53,639
of noise order or JPEG artifact let's

128
00:05:50,639 --> 00:05:56,969
just down scale the image and sign down

129
00:05:53,639 --> 00:05:58,319
scale the image and so forth the problem

130
00:05:56,969 --> 00:06:00,210
with<font color="#CCCCCC"> all of</font><font color="#E5E5E5"> these approaches is that</font>

131
00:05:58,319 --> 00:06:05,069
they<font color="#CCCCCC"> are very</font><font color="#E5E5E5"> specific to the</font>

132
00:06:00,210 --> 00:06:08,580
transformations that<font color="#E5E5E5"> a to which this</font>

133
00:06:05,069 --> 00:06:10,919
that summary is invariant and each<font color="#E5E5E5"> of</font>

134
00:06:08,580 --> 00:06:12,919
them allows few of transformations but

135
00:06:10,919 --> 00:06:15,419
no others many of them are also

136
00:06:12,919 --> 00:06:17,068
inefficient<font color="#E5E5E5"> in the sense that that</font>

137
00:06:15,419 --> 00:06:19,500
<font color="#CCCCCC">condensed transformed version of the</font>

138
00:06:17,069 --> 00:06:21,659
image is large often proportional to the

139
00:06:19,500 --> 00:06:24,150
original image and many of them also

140
00:06:21,659 --> 00:06:25,949
have<font color="#CCCCCC"> a very high rate of errors false</font>

141
00:06:24,150 --> 00:06:28,948
negatives and or false not very

142
00:06:25,949 --> 00:06:30,419
positives<font color="#CCCCCC"> so clearly that technique</font>

143
00:06:28,949 --> 00:06:35,069
doesn't cut it it doesn't provide enough

144
00:06:30,419 --> 00:06:37,260
generality performance or<font color="#CCCCCC"> something it</font>

145
00:06:35,069 --> 00:06:39,029
worked at his closest to<font color="#CCCCCC"> us since</font><font color="#E5E5E5"> period</font>

146
00:06:37,260 --> 00:06:39,900
<font color="#CCCCCC">is in the thesis of walsh from</font><font color="#E5E5E5"> a few</font>

147
00:06:39,029 --> 00:06:43,219
<font color="#CCCCCC">years</font><font color="#E5E5E5"> ago</font>

148
00:06:39,900 --> 00:06:45,900
and it uses a trusted<font color="#E5E5E5"> hardware TPM</font>

149
00:06:43,220 --> 00:06:48,120
together with the Nexus OS<font color="#E5E5E5"> built on top</font>

150
00:06:45,900 --> 00:06:51,508
<font color="#CCCCCC">of</font><font color="#E5E5E5"> that and the approach there is to</font>

151
00:06:48,120 --> 00:06:54,060
have secured platforms perform the

152
00:06:51,509 --> 00:06:56,130
transformations and then use TPM at the

153
00:06:54,060 --> 00:06:59,820
station to convince us that they did it

154
00:06:56,130 --> 00:07:01,409
correctly the wonderful<font color="#CCCCCC"> thing about it</font>

155
00:06:59,820 --> 00:07:03,150
is that these platforms can run any

156
00:07:01,410 --> 00:07:05,340
computation and therefore this really

157
00:07:03,150 --> 00:07:07,770
supports any class of permissible

158
00:07:05,340 --> 00:07:10,919
transformations but it does rely on

159
00:07:07,770 --> 00:07:13,049
trusted hardware it does have proof so

160
00:07:10,919 --> 00:07:14,820
<font color="#E5E5E5">the size growth been the number of edits</font>

161
00:07:13,050 --> 00:07:17,430
and it does<font color="#E5E5E5"> not provide your knowledge</font>

162
00:07:14,820 --> 00:07:19,260
and<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this talk I'll tell you about</font><font color="#CCCCCC"> our</font>

163
00:07:17,430 --> 00:07:21,750
system called photo proof which actually

164
00:07:19,260 --> 00:07:27,930
achieves all of the goals<font color="#CCCCCC"> that we list</font>

165
00:07:21,750 --> 00:07:30,449
here including full flexibility for all

166
00:07:27,930 --> 00:07:34,320
images small succinct proofs ends your

167
00:07:30,449 --> 00:07:36,389
knowledge in a natural water system

168
00:07:34,320 --> 00:07:38,400
looks like is the following there is a

169
00:07:36,389 --> 00:07:41,070
<font color="#CCCCCC">setup</font><font color="#E5E5E5"> stage where the system</font>

170
00:07:38,400 --> 00:07:46,109
<font color="#CCCCCC">administrator or say the manager of the</font>

171
00:07:41,070 --> 00:07:49,740
dating website or the US government

172
00:07:46,110 --> 00:07:50,910
attorney general they decree what is

173
00:07:49,740 --> 00:07:52,740
their state<font color="#CCCCCC"> of permissible</font>

174
00:07:50,910 --> 00:07:55,620
transformations and they run an

175
00:07:52,740 --> 00:07:57,419
algorithm to<font color="#E5E5E5"> encode that into a set of</font>

176
00:07:55,620 --> 00:07:59,490
public keys used for proving in

177
00:07:57,419 --> 00:08:04,049
verifying statement this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> done just</font>

178
00:07:59,490 --> 00:08:06,419
once for every application then once the

179
00:08:04,050 --> 00:08:10,229
keys are distributed everyone can

180
00:08:06,419 --> 00:08:12,000
capture images so you can capture an

181
00:08:10,229 --> 00:08:14,669
image and then send<font color="#CCCCCC"> that along with</font><font color="#E5E5E5"> the</font>

182
00:08:12,000 --> 00:08:16,560
signature to user who might edit that

183
00:08:14,669 --> 00:08:17,580
image for example flip it and suppose

184
00:08:16,560 --> 00:08:20,270
that flipping is a permissible

185
00:08:17,580 --> 00:08:23,880
transformation then they could<font color="#E5E5E5"> use</font>

186
00:08:20,270 --> 00:08:26,400
another algorithm another software

187
00:08:23,880 --> 00:08:29,070
module within the photo proof system to

188
00:08:26,400 --> 00:08:31,679
<font color="#E5E5E5">create the rotate sorry the flipped</font>

189
00:08:29,070 --> 00:08:34,200
image along<font color="#E5E5E5"> with the proof</font><font color="#CCCCCC"> that it is</font>

190
00:08:31,680 --> 00:08:36,060
authentic that can<font color="#E5E5E5"> later undergo</font>

191
00:08:34,200 --> 00:08:37,709
additional transformations a cropping

192
00:08:36,059 --> 00:08:40,140
resulting in a new image with the

193
00:08:37,708 --> 00:08:43,140
corresponding proof and so forth<font color="#E5E5E5"> and any</font>

194
00:08:40,140 --> 00:08:45,540
user along the along this chain can run

195
00:08:43,140 --> 00:08:47,569
a verification algorithm on the image

196
00:08:45,540 --> 00:08:49,829
and the<font color="#E5E5E5"> proof a testing that it is</font>

197
00:08:47,570 --> 00:08:52,589
indeed the result<font color="#E5E5E5"> of a sequence of</font>

198
00:08:49,829 --> 00:08:53,579
permissible transformations that is the

199
00:08:52,589 --> 00:08:56,820
completeness property

200
00:08:53,580 --> 00:08:58,680
the<font color="#E5E5E5"> soundness property is intuitively</font>

201
00:08:56,820 --> 00:09:00,930
that<font color="#E5E5E5"> if anything else happens for</font>

202
00:08:58,680 --> 00:09:04,109
example someone<font color="#E5E5E5"> tries to airbrush an</font>

203
00:09:00,930 --> 00:09:06,089
image then they will<font color="#E5E5E5"> never be able to</font>

204
00:09:04,110 --> 00:09:08,400
construct a convincing proof any attempt

205
00:09:06,090 --> 00:09:10,770
<font color="#CCCCCC">to create</font><font color="#E5E5E5"> a proof and send it to a very</font>

206
00:09:08,400 --> 00:09:15,329
<font color="#E5E5E5">fiery resulting to verify recognizing</font>

207
00:09:10,770 --> 00:09:18,780
the image as not authentic so this<font color="#E5E5E5"> is</font>

208
00:09:15,330 --> 00:09:21,870
what we would like<font color="#CCCCCC"> to construct and our</font>

209
00:09:18,780 --> 00:09:25,589
technique for doing this is very

210
00:09:21,870 --> 00:09:28,740
different<font color="#CCCCCC"> from the old works using image</font>

211
00:09:25,590 --> 00:09:30,750
transformations in summaries from the

212
00:09:28,740 --> 00:09:33,120
graphics community instead of<font color="#E5E5E5"> use</font>

213
00:09:30,750 --> 00:09:37,590
cryptographic techniques we used a

214
00:09:33,120 --> 00:09:40,410
paradigm of a proof carrying data which

215
00:09:37,590 --> 00:09:43,950
is<font color="#CCCCCC"> a generalization of snark stand one</font>

216
00:09:40,410 --> 00:09:45,540
mentioned in the previous talk and the

217
00:09:43,950 --> 00:09:47,820
<font color="#CCCCCC">idea proof carrying data taken</font>

218
00:09:45,540 --> 00:09:49,439
abstractly is that we have some

219
00:09:47,820 --> 00:09:51,960
computation a distributed computation

220
00:09:49,440 --> 00:09:55,440
consisting of numerous parties none of

221
00:09:51,960 --> 00:09:58,920
which trusts any other and they would

222
00:09:55,440 --> 00:10:00,900
like<font color="#CCCCCC"> to</font><font color="#E5E5E5"> ensure that some property of</font>

223
00:09:58,920 --> 00:10:02,550
integrity is preserved throughout the

224
00:10:00,900 --> 00:10:04,770
computation they would like to<font color="#E5E5E5"> ensure</font>

225
00:10:02,550 --> 00:10:10,140
that<font color="#CCCCCC"> the computation is compliant with</font>

226
00:10:04,770 --> 00:10:12,150
some policy and they will produce proofs

227
00:10:10,140 --> 00:10:14,160
at every stage of the computation<font color="#CCCCCC"> that</font>

228
00:10:12,150 --> 00:10:16,620
compliance<font color="#E5E5E5"> with the policy is preserved</font>

229
00:10:14,160 --> 00:10:18,780
where every proof attests that all of

230
00:10:16,620 --> 00:10:21,080
the computations so far including retro

231
00:10:18,780 --> 00:10:24,060
actively has preserved<font color="#CCCCCC"> the property the</font>

232
00:10:21,080 --> 00:10:25,620
<font color="#CCCCCC">property is defined as a compliance</font>

233
00:10:24,060 --> 00:10:27,900
predicate reasoning about every

234
00:10:25,620 --> 00:10:29,970
individual node in the computation the

235
00:10:27,900 --> 00:10:31,680
compliance predicates observes the

236
00:10:29,970 --> 00:10:34,770
inputs of the node the outputs<font color="#CCCCCC"> of the</font>

237
00:10:31,680 --> 00:10:36,780
<font color="#E5E5E5">node and some local inputs in our case</font>

238
00:10:34,770 --> 00:10:39,600
<font color="#CCCCCC">the</font><font color="#E5E5E5"> inputs will be the source image that</font>

239
00:10:36,780 --> 00:10:41,850
would be the new target<font color="#E5E5E5"> image and the</font>

240
00:10:39,600 --> 00:10:43,820
local inputs would be the choice of

241
00:10:41,850 --> 00:10:46,410
transformation and its parameters and

242
00:10:43,820 --> 00:10:51,330
then the compliance<font color="#CCCCCC"> predicate decide</font>

243
00:10:46,410 --> 00:10:53,310
whether this<font color="#CCCCCC"> is acceptable</font><font color="#E5E5E5"> or not</font>

244
00:10:51,330 --> 00:10:55,140
<font color="#E5E5E5">D gives us the ability to take any such</font>

245
00:10:53,310 --> 00:10:58,380
compliance<font color="#CCCCCC"> predicates and Britain bake</font>

246
00:10:55,140 --> 00:11:00,990
it into a system so applying that to the

247
00:10:58,380 --> 00:11:02,939
problem of images indication we think

248
00:11:00,990 --> 00:11:05,220
about<font color="#CCCCCC"> the lifetime of an image as a</font>

249
00:11:02,940 --> 00:11:06,300
distributed computation in this case a

250
00:11:05,220 --> 00:11:09,240
line graph we could

251
00:11:06,300 --> 00:11:12,180
extend that to more general graphs then

252
00:11:09,240 --> 00:11:14,700
we express the locally permissible

253
00:11:12,180 --> 00:11:17,400
transformations with by encoding them

254
00:11:14,700 --> 00:11:19,170
into a compliance<font color="#E5E5E5"> predicate and we use a</font>

255
00:11:17,400 --> 00:11:21,270
piece of the<font color="#CCCCCC"> implementation to enforce</font>

256
00:11:19,170 --> 00:11:24,240
the compliance of an image throughout

257
00:11:21,270 --> 00:11:25,560
the history so for<font color="#E5E5E5"> example if the set of</font>

258
00:11:24,240 --> 00:11:27,480
permissible transformations were

259
00:11:25,560 --> 00:11:29,189
cropping rotations and flipping we

260
00:11:27,480 --> 00:11:31,440
encode that<font color="#E5E5E5"> into compliance predicates</font>

261
00:11:29,190 --> 00:11:33,630
and then every proof will<font color="#E5E5E5"> attest that</font>

262
00:11:31,440 --> 00:11:38,370
every step consisted of just one of

263
00:11:33,630 --> 00:11:41,070
these three transformations so we

264
00:11:38,370 --> 00:11:43,920
actually<font color="#E5E5E5"> implemented the</font><font color="#CCCCCC"> site the idea</font>

265
00:11:41,070 --> 00:11:45,810
the underlying PC the implementation is

266
00:11:43,920 --> 00:11:48,930
that of the<font color="#CCCCCC"> lip snark library that we</font>

267
00:11:45,810 --> 00:11:51,089
<font color="#E5E5E5">build as part of skipper lab this is an</font>

268
00:11:48,930 --> 00:11:54,680
<font color="#CCCCCC">open-source implementation it started as</font>

269
00:11:51,090 --> 00:11:57,780
a series of very theoretical works

270
00:11:54,680 --> 00:11:59,280
progressing through increasingly

271
00:11:57,780 --> 00:12:02,640
efficient constructions and

272
00:11:59,280 --> 00:12:04,319
implementations an artifact<font color="#E5E5E5"> that</font>

273
00:12:02,640 --> 00:12:05,910
released as open source two years<font color="#E5E5E5"> ago</font>

274
00:12:04,320 --> 00:12:09,240
<font color="#E5E5E5">and then the national improvements and</font>

275
00:12:05,910 --> 00:12:11,310
open source contributions and it allows

276
00:12:09,240 --> 00:12:13,560
<font color="#CCCCCC">us to write a compliance predicate</font>

277
00:12:11,310 --> 00:12:16,260
expressing our application specific

278
00:12:13,560 --> 00:12:19,530
needs<font color="#CCCCCC"> in</font><font color="#E5E5E5"> our case it compliance</font>

279
00:12:16,260 --> 00:12:21,270
predicates reasons about RGB images in

280
00:12:19,530 --> 00:12:23,970
the prototype<font color="#E5E5E5"> includes a cropping</font>

281
00:12:21,270 --> 00:12:26,819
rotations flipping front a transpose

282
00:12:23,970 --> 00:12:29,040
<font color="#CCCCCC">brightens and just Monroe tations and so</font>

283
00:12:26,820 --> 00:12:32,730
forth and can be trivially extended for

284
00:12:29,040 --> 00:12:34,290
additional ones now I hope that<font color="#E5E5E5"> I</font>

285
00:12:32,730 --> 00:12:36,540
convinced you<font color="#E5E5E5"> that the mapping between</font>

286
00:12:34,290 --> 00:12:38,670
the images indication problem and that

287
00:12:36,540 --> 00:12:41,790
of proof game data is very<font color="#CCCCCC"> natural and</font>

288
00:12:38,670 --> 00:12:43,410
appealing once recognized but in

289
00:12:41,790 --> 00:12:45,329
practice realizing this has many

290
00:12:43,410 --> 00:12:47,490
challenges some of these are mundane

291
00:12:45,330 --> 00:12:50,190
engineering concerns of<font color="#E5E5E5"> format matching</font>

292
00:12:47,490 --> 00:12:51,930
and integration others are deep theory

293
00:12:50,190 --> 00:12:53,700
questions that arise when you try to<font color="#E5E5E5"> do</font>

294
00:12:51,930 --> 00:12:57,719
all<font color="#CCCCCC"> of the impedance matching like</font>

295
00:12:53,700 --> 00:13:00,840
finding the right theoretical security

296
00:12:57,720 --> 00:13:02,970
definitions in this case turns out to

297
00:13:00,840 --> 00:13:06,090
raise a fascinating question<font color="#CCCCCC"> some of</font>

298
00:13:02,970 --> 00:13:08,010
them still open about having<font color="#CCCCCC"> proof</font>

299
00:13:06,090 --> 00:13:10,770
carrying data reason about things that

300
00:13:08,010 --> 00:13:12,810
originated in digital signatures for

301
00:13:10,770 --> 00:13:15,870
which none of the current parties has

302
00:13:12,810 --> 00:13:18,900
the key the quantifiers end up all wrong

303
00:13:15,870 --> 00:13:20,250
<font color="#CCCCCC">and need new treatment other are</font>

304
00:13:18,900 --> 00:13:23,790
engineering

305
00:13:20,250 --> 00:13:25,260
challenges in the realm of implementing

306
00:13:23,790 --> 00:13:30,569
the compliance predicates in an

307
00:13:25,260 --> 00:13:33,150
efficient way and the point is that yes

308
00:13:30,570 --> 00:13:35,310
there are generic compilers that can

309
00:13:33,150 --> 00:13:37,819
take a<font color="#E5E5E5"> high level presentations of</font>

310
00:13:35,310 --> 00:13:42,119
computation and transform them into

311
00:13:37,820 --> 00:13:44,460
compliance predicates one of them is<font color="#CCCCCC"> a</font>

312
00:13:42,120 --> 00:13:47,010
<font color="#CCCCCC">Gepetto system that</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> and one mentioned</font>

313
00:13:44,460 --> 00:13:49,140
which can be trivially adapted to this

314
00:13:47,010 --> 00:13:51,500
goal and other such implementation is

315
00:13:49,140 --> 00:13:53,760
the tiny<font color="#CCCCCC"> Ram GCC compiler of</font><font color="#E5E5E5"> skipper lab</font>

316
00:13:51,500 --> 00:13:56,190
the problem with all<font color="#E5E5E5"> of this is</font><font color="#CCCCCC"> that</font>

317
00:13:53,760 --> 00:13:59,189
they then they entail a high cost for

318
00:13:56,190 --> 00:14:02,340
their generality<font color="#E5E5E5"> and in our</font><font color="#CCCCCC"> case as</font>

319
00:13:59,190 --> 00:14:04,770
<font color="#CCCCCC">you'll see</font><font color="#E5E5E5"> we are really struggling to</font>

320
00:14:02,340 --> 00:14:07,080
reach the realm of practicality and

321
00:14:04,770 --> 00:14:08,790
therefore we found ourselves<font color="#E5E5E5"> hard coding</font>

322
00:14:07,080 --> 00:14:11,970
image transformations within the

323
00:14:08,790 --> 00:14:14,040
peculiar language of proof carrying data

324
00:14:11,970 --> 00:14:17,990
compliance predicates and<font color="#CCCCCC"> let me</font>

325
00:14:14,040 --> 00:14:20,910
exemplify that by looking at rotations

326
00:14:17,990 --> 00:14:23,940
so image rotation by an arbitrary angle

327
00:14:20,910 --> 00:14:26,069
theta you can represent that as

328
00:14:23,940 --> 00:14:28,860
multiplication by a<font color="#E5E5E5"> rotation matrix</font>

329
00:14:26,070 --> 00:14:32,310
consisting of some trigonometric

330
00:14:28,860 --> 00:14:33,690
functions of theta and if you implement

331
00:14:32,310 --> 00:14:36,540
that<font color="#E5E5E5"> it's a compliance predicate you</font>

332
00:14:33,690 --> 00:14:39,630
find yourself expressing that within the

333
00:14:36,540 --> 00:14:42,329
<font color="#CCCCCC">language of roughly arithmetic circuits</font>

334
00:14:39,630 --> 00:14:44,670
because<font color="#E5E5E5"> that is the native language</font><font color="#CCCCCC"> for</font>

335
00:14:42,330 --> 00:14:46,320
the cryptographic scheme so we need an

336
00:14:44,670 --> 00:14:48,780
arithmetic circuit that gets the input

337
00:14:46,320 --> 00:14:50,790
image the output image the angle maybe

338
00:14:48,780 --> 00:14:53,250
some auxiliary<font color="#E5E5E5"> input and decides whether</font>

339
00:14:50,790 --> 00:14:57,089
this rotation was done correctly<font color="#E5E5E5"> whether</font>

340
00:14:53,250 --> 00:14:59,430
it's permissible now if we<font color="#CCCCCC"> were using</font>

341
00:14:57,089 --> 00:15:01,860
<font color="#CCCCCC">gray random access computation there is</font>

342
00:14:59,430 --> 00:15:03,780
a trivial algorithm of doing random

343
00:15:01,860 --> 00:15:06,180
lookups with with quadratic complexity

344
00:15:03,780 --> 00:15:08,040
but we are stuck with arithmetic

345
00:15:06,180 --> 00:15:09,870
circuits again<font color="#E5E5E5"> because</font><font color="#CCCCCC"> of the underlying</font>

346
00:15:08,040 --> 00:15:12,750
or presentation of the cryptography a

347
00:15:09,870 --> 00:15:17,760
generic reduction would lose us at least

348
00:15:12,750 --> 00:15:20,220
an n factor but in our case<font color="#CCCCCC"> we can do</font>

349
00:15:17,760 --> 00:15:24,750
better by using specific algorithms for

350
00:15:20,220 --> 00:15:27,210
the problem a in<font color="#E5E5E5"> the implementation</font>

351
00:15:24,750 --> 00:15:31,080
music arithmetic circuits would be bad

352
00:15:27,210 --> 00:15:32,940
as well because every pixel could have

353
00:15:31,080 --> 00:15:33,660
resulted prior to the transformation

354
00:15:32,940 --> 00:15:37,010
from any

355
00:15:33,660 --> 00:15:39,959
and pixels and therefore they<font color="#CCCCCC"> could</font>

356
00:15:37,010 --> 00:15:42,420
implement the efficiency of a naive

357
00:15:39,960 --> 00:15:46,640
implementation would be cubic in the

358
00:15:42,420 --> 00:15:49,530
image dimension but we can use the

359
00:15:46,640 --> 00:15:51,569
tricks like the alternative

360
00:15:49,530 --> 00:15:53,550
representation of the<font color="#CCCCCC"> rotator equation</font>

361
00:15:51,570 --> 00:15:55,620
<font color="#CCCCCC">matrix based on composition of shearing</font>

362
00:15:53,550 --> 00:15:58,680
matrices each of which can be

363
00:15:55,620 --> 00:16:01,710
implemented using<font color="#E5E5E5"> barrel shifters using</font>

364
00:15:58,680 --> 00:16:04,560
n log n gates for every row and that

365
00:16:01,710 --> 00:16:07,320
saves us roughly a factor of N word and

366
00:16:04,560 --> 00:16:08,849
is the image dimension in<font color="#CCCCCC"> the size of</font>

367
00:16:07,320 --> 00:16:13,080
the circuit<font color="#CCCCCC"> and eventually in the</font>

368
00:16:08,850 --> 00:16:16,020
runtime of<font color="#CCCCCC"> the prover then another trick</font>

369
00:16:13,080 --> 00:16:18,600
we can use to just to exemplify is that

370
00:16:16,020 --> 00:16:24,240
of non deterministic advice remember

371
00:16:18,600 --> 00:16:27,260
that the local input can include various

372
00:16:24,240 --> 00:16:31,260
parameters<font color="#E5E5E5"> that the currently executing</font>

373
00:16:27,260 --> 00:16:33,510
editing node claim when it went into<font color="#CCCCCC"> the</font>

374
00:16:31,260 --> 00:16:35,370
transformation and this allows us to

375
00:16:33,510 --> 00:16:38,700
short-circuit some<font color="#E5E5E5"> computation just by</font>

376
00:16:35,370 --> 00:16:41,220
verifying it instead of computing it for

377
00:16:38,700 --> 00:16:42,960
<font color="#E5E5E5">example we given an angle we still have</font>

378
00:16:41,220 --> 00:16:45,090
to compute those nasty trigonometric

379
00:16:42,960 --> 00:16:48,270
functions of the angle in doing that in

380
00:16:45,090 --> 00:16:51,990
arithmetic circuit is a very awkward<font color="#CCCCCC"> for</font>

381
00:16:48,270 --> 00:16:55,380
performance<font color="#E5E5E5"> however we can just get as</font>

382
00:16:51,990 --> 00:16:59,400
extra effort as an extra is<font color="#CCCCCC"> extra advice</font>

383
00:16:55,380 --> 00:17:01,740
a<font color="#CCCCCC"> non-deterministic witness that</font><font color="#E5E5E5"> way the</font>

384
00:16:59,400 --> 00:17:06,540
compliance<font color="#E5E5E5"> predicate receives in order</font>

385
00:17:01,740 --> 00:17:09,300
to get the requisite functions of the

386
00:17:06,540 --> 00:17:12,930
angle and verifying this is much more

387
00:17:09,300 --> 00:17:14,940
<font color="#E5E5E5">efficient just some cubic functions so</font>

388
00:17:12,930 --> 00:17:18,150
there's a<font color="#E5E5E5"> whole bunch of tricks like</font>

389
00:17:14,940 --> 00:17:21,210
this<font color="#E5E5E5"> and there's a lesson here about the</font>

390
00:17:18,150 --> 00:17:24,450
design of such systems<font color="#CCCCCC"> that they really</font>

391
00:17:21,210 --> 00:17:26,579
become very domain-specific once you<font color="#CCCCCC"> Oh</font>

392
00:17:24,450 --> 00:17:30,570
up optimize<font color="#E5E5E5"> performance for this</font>

393
00:17:26,579 --> 00:17:34,830
verification setting let's talk about

394
00:17:30,570 --> 00:17:37,260
performance so these are<font color="#CCCCCC"> some numbers</font>

395
00:17:34,830 --> 00:17:41,310
let's focus on the last row of images

396
00:17:37,260 --> 00:17:43,020
which are 128 x 128 pixels there's<font color="#CCCCCC"> a</font><font color="#E5E5E5"> not</font>

397
00:17:41,310 --> 00:17:46,200
very<font color="#E5E5E5"> large images but it's clearly the</font>

398
00:17:43,020 --> 00:17:46,980
<font color="#E5E5E5">right size of image because it has</font>

399
00:17:46,200 --> 00:17:52,610
roughly the

400
00:17:46,980 --> 00:17:57,140
<font color="#E5E5E5">mount of entropy as a thousand words so</font>

401
00:17:52,610 --> 00:18:02,010
in this case the generator encoding the

402
00:17:57,140 --> 00:18:04,320
permissible sets into the public is a

403
00:18:02,010 --> 00:18:07,140
runs for about four<font color="#E5E5E5"> minutes and</font>

404
00:18:04,320 --> 00:18:11,939
generates about<font color="#E5E5E5"> four gigabytes worth of</font>

405
00:18:07,140 --> 00:18:16,830
public keys the prover takes about five

406
00:18:11,940 --> 00:18:20,370
<font color="#CCCCCC">minutes to</font><font color="#E5E5E5"> prove that the single</font>

407
00:18:16,830 --> 00:18:22,340
<font color="#E5E5E5">transformation was indeed legitimate and</font>

408
00:18:20,370 --> 00:18:26,489
this covers<font color="#E5E5E5"> all of the day</font>

409
00:18:22,340 --> 00:18:28,949
transformations concurrently the size of

410
00:18:26,490 --> 00:18:32,130
the of the proof is just a few kilobytes

411
00:18:28,950 --> 00:18:34,049
and<font color="#E5E5E5"> very fire runs in under a second and</font>

412
00:18:32,130 --> 00:18:36,330
you may know that<font color="#E5E5E5"> the numbers are</font>

413
00:18:34,049 --> 00:18:43,049
surprisingly similar to those of the

414
00:18:36,330 --> 00:18:45,750
previous talk and it's I think<font color="#CCCCCC"> the</font>

415
00:18:43,049 --> 00:18:48,090
partly<font color="#E5E5E5"> coincidence and partly both teams</font>

416
00:18:45,750 --> 00:18:51,360
optimizing their benchmarks to what

417
00:18:48,090 --> 00:18:55,590
could run in<font color="#E5E5E5"> finishing time for the</font>

418
00:18:51,360 --> 00:18:58,080
submission deadline now there are many

419
00:18:55,590 --> 00:19:00,418
<font color="#E5E5E5">additional features that photo proof has</font>

420
00:18:58,080 --> 00:19:03,620
or could be<font color="#E5E5E5"> it could easily acquire</font>

421
00:19:00,419 --> 00:19:06,660
including plugins for gimp or photoshop

422
00:19:03,620 --> 00:19:10,918
reasoning about method at and eggs if

423
00:19:06,660 --> 00:19:12,900
tags including Eddie history using

424
00:19:10,919 --> 00:19:17,549
certificate change to allow revocation

425
00:19:12,900 --> 00:19:23,600
of cameras and many opens can you come

426
00:19:17,549 --> 00:19:23,600
<font color="#E5E5E5">back thank you many problems remain open</font>

427
00:19:24,140 --> 00:19:30,000
the good news<font color="#CCCCCC"> is that we've really</font>

428
00:19:27,000 --> 00:19:32,370
solved an open long-standing problem

429
00:19:30,000 --> 00:19:34,650
that's been over for two decades at

430
00:19:32,370 --> 00:19:36,780
least<font color="#E5E5E5"> in the asymptotic sense in the</font>

431
00:19:34,650 --> 00:19:40,679
practical sense it's on<font color="#CCCCCC"> the verge</font><font color="#E5E5E5"> of</font>

432
00:19:36,780 --> 00:19:43,470
practicality and a expect that with

433
00:19:40,679 --> 00:19:47,750
additional engineering will soon be

434
00:19:43,470 --> 00:19:52,440
useful for larger images and beside a

435
00:19:47,750 --> 00:19:54,210
question of improving performance our

436
00:19:52,440 --> 00:19:56,040
security questions about attack see the

437
00:19:54,210 --> 00:19:57,540
sensor level<font color="#E5E5E5"> these have been addressed</font>

438
00:19:56,040 --> 00:19:58,918
by<font color="#E5E5E5"> many pie walks I will not go into</font>

439
00:19:57,540 --> 00:20:01,289
these

440
00:19:58,919 --> 00:20:04,289
and there is the tantalizing idea of

441
00:20:01,289 --> 00:20:05,549
extending a proof<font color="#E5E5E5"> carrying data and</font>

442
00:20:04,289 --> 00:20:08,970
reasoning about provenance for

443
00:20:05,549 --> 00:20:18,570
additional media types like text audio

444
00:20:08,970 --> 00:20:22,820
and databases thank you very much one

445
00:20:18,570 --> 00:20:25,859
quick question hey thanks a lot so I

446
00:20:22,820 --> 00:20:27,928
really like how you're using proof

447
00:20:25,859 --> 00:20:29,908
carrying data to do all this stuff<font color="#E5E5E5"> but</font>

448
00:20:27,929 --> 00:20:33,419
at the beginning there's like the analog

449
00:20:29,909 --> 00:20:38,179
hole right so going back<font color="#CCCCCC"> to your dating</font>

450
00:20:33,419 --> 00:20:41,850
example so you prevent someone from

451
00:20:38,179 --> 00:20:44,039
airbrushing their photo but<font color="#E5E5E5"> you don't</font>

452
00:20:41,850 --> 00:20:47,279
how do you<font color="#E5E5E5"> prevent me I mean an</font>

453
00:20:44,039 --> 00:20:48,989
unscrupulous person from taking a

454
00:20:47,279 --> 00:20:52,019
photograph of a much better looking

455
00:20:48,989 --> 00:20:54,899
person right I'm just putting it on

456
00:20:52,019 --> 00:20:57,299
their site or more<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the point how do</font>

457
00:20:54,899 --> 00:20:59,969
you I mean<font color="#CCCCCC"> it doesn't prevent someone</font>

458
00:20:57,299 --> 00:21:02,700
from doing an arbitrary image

459
00:20:59,970 --> 00:21:07,619
manipulation and then<font color="#E5E5E5"> taking a photo of</font>

460
00:21:02,700 --> 00:21:10,710
that manipulated image right cuz all all

461
00:21:07,619 --> 00:21:12,709
the signature is doing is signing that

462
00:21:10,710 --> 00:21:15,299
the camera took a picture of<font color="#E5E5E5"> something</font>

463
00:21:12,710 --> 00:21:17,039
but that<font color="#E5E5E5"> something it took a picture of</font>

464
00:21:15,299 --> 00:21:18,960
could have been itself totally

465
00:21:17,039 --> 00:21:21,570
manipulated yes this is certainly true

466
00:21:18,960 --> 00:21:23,600
<font color="#E5E5E5">and in this system we only reason about</font>

467
00:21:21,570 --> 00:21:25,559
was what happens after the<font color="#E5E5E5"> sense or</font>

468
00:21:23,600 --> 00:21:27,059
there are certain works that we

469
00:21:25,559 --> 00:21:28,980
<font color="#CCCCCC">summarized in this paper and it's an</font>

470
00:21:27,059 --> 00:21:31,678
extended version in SST sees that

471
00:21:28,980 --> 00:21:33,210
discuss these challenges and in a

472
00:21:31,679 --> 00:21:36,239
nutshell there are many things you can

473
00:21:33,210 --> 00:21:39,269
do also with that<font color="#E5E5E5"> level like reasoning</font>

474
00:21:36,239 --> 00:21:41,009
about the the<font color="#E5E5E5"> analog signature of the</font>

475
00:21:39,269 --> 00:21:42,960
sensor to make sure that<font color="#E5E5E5"> it came</font><font color="#CCCCCC"> from an</font>

476
00:21:41,009 --> 00:21:46,320
authentic sense or perhaps in a

477
00:21:42,960 --> 00:21:49,259
tamper-proof a module reasoning about

478
00:21:46,320 --> 00:21:51,239
focus distances and dynamic of dynamics

479
00:21:49,259 --> 00:21:54,989
of the scene that will capture many

480
00:21:51,239 --> 00:21:57,029
inexpensive forms of treachery<font color="#E5E5E5"> but</font>

481
00:21:54,989 --> 00:21:59,460
putting someone else's picture on my

482
00:21:57,029 --> 00:22:01,980
dating site isn't left as an open

483
00:21:59,460 --> 00:22:05,269
problem there you go<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right that's</font>

484
00:22:01,980 --> 00:22:05,269
<font color="#E5E5E5">all we have time for thank you</font>

485
00:22:05,490 --> 00:22:07,550
you

