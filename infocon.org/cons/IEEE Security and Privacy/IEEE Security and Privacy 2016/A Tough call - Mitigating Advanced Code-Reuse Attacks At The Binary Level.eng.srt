1
00:00:00,000 --> 00:00:04,589
my name is NS Creek Dodge cannot go to

2
00:00:02,100 --> 00:00:06,330
present our work which<font color="#CCCCCC"> is on mitigating</font>

3
00:00:04,589 --> 00:00:10,080
<font color="#CCCCCC">advanced code reuse attacks at the</font>

4
00:00:06,330 --> 00:00:11,639
binary level so I share the first<font color="#E5E5E5"> auto</font>

5
00:00:10,080 --> 00:00:15,330
ship with<font color="#CCCCCC"> victor finder fee who's</font>

6
00:00:11,639 --> 00:00:17,970
sitting there so control flow integrity

7
00:00:15,330 --> 00:00:20,430
is a very promising technique to stop

8
00:00:17,970 --> 00:00:23,000
code reuse attacks what it actually is

9
00:00:20,430 --> 00:00:27,539
doing is an it enforces certain

10
00:00:23,000 --> 00:00:29,279
constraints so control integrity

11
00:00:27,539 --> 00:00:31,920
actually modifies the program such that

12
00:00:29,279 --> 00:00:35,160
it enforce a certain constraints during

13
00:00:31,920 --> 00:00:39,870
runtime which actually hinders the

14
00:00:35,160 --> 00:00:42,860
capabilities of attackers however it is

15
00:00:39,870 --> 00:00:46,828
not<font color="#E5E5E5"> that easy to enforce a very good</font>

16
00:00:42,860 --> 00:00:49,739
control flow integrity at in a program

17
00:00:46,829 --> 00:00:52,440
especially at the binary level where you

18
00:00:49,739 --> 00:00:58,530
<font color="#E5E5E5">don't have the information that's</font>

19
00:00:52,440 --> 00:01:02,280
<font color="#E5E5E5">available in the source code so existing</font>

20
00:00:58,530 --> 00:01:04,549
binary level cfi solutions these are<font color="#E5E5E5"> not</font>

21
00:01:02,280 --> 00:01:06,840
able to protect I mean<font color="#E5E5E5"> to prevent</font>

22
00:01:04,549 --> 00:01:10,409
function reuse attack so the more

23
00:01:06,840 --> 00:01:14,340
advanced code reuse attacks this is

24
00:01:10,409 --> 00:01:18,689
called so one of these attack techniques

25
00:01:14,340 --> 00:01:21,780
is called<font color="#CCCCCC"> coupe so we develop type armor</font>

26
00:01:18,689 --> 00:01:23,158
which is<font color="#E5E5E5"> a binary level</font><font color="#CCCCCC"> cfi solution but</font>

27
00:01:21,780 --> 00:01:26,210
a more precise one than the current

28
00:01:23,159 --> 00:01:30,000
<font color="#E5E5E5">state-of-the-art binary levels solutions</font>

29
00:01:26,210 --> 00:01:31,710
it stops all published code reviews

30
00:01:30,000 --> 00:01:34,200
attacks with an acceptable and

31
00:01:31,710 --> 00:01:40,020
comparable overhead of about three

32
00:01:34,200 --> 00:01:42,860
percent on spec so what we try to do is

33
00:01:40,020 --> 00:01:45,990
we try<font color="#E5E5E5"> to get as close as</font><font color="#CCCCCC"> possible to</font>

34
00:01:42,860 --> 00:01:49,350
salute source level solutions so we<font color="#E5E5E5"> try</font>

35
00:01:45,990 --> 00:01:52,169
so in source of solutions they enforce

36
00:01:49,350 --> 00:01:54,658
they look at the types of functions and

37
00:01:52,170 --> 00:01:57,740
they use a certain<font color="#E5E5E5"> information</font><font color="#CCCCCC"> and we</font>

38
00:01:54,659 --> 00:02:03,420
try to get actually close to<font color="#E5E5E5"> this</font>

39
00:01:57,740 --> 00:02:05,850
solution so let me try to give<font color="#CCCCCC"> you an</font>

40
00:02:03,420 --> 00:02:07,829
idea of what advanced code reuse attacks

41
00:02:05,850 --> 00:02:10,619
<font color="#E5E5E5">also</font><font color="#CCCCCC"> what our attackers doing in such</font>

42
00:02:07,829 --> 00:02:11,920
advanced attacks so here<font color="#E5E5E5"> we have a piece</font>

43
00:02:10,619 --> 00:02:13,980
of code

44
00:02:11,920 --> 00:02:17,319
a function that contains a while loop

45
00:02:13,980 --> 00:02:19,988
which contains an indirect call and this

46
00:02:17,319 --> 00:02:23,738
indirect call uses the f pointer

47
00:02:19,989 --> 00:02:25,480
variable to call different functions so

48
00:02:23,739 --> 00:02:27,130
at runtime this<font color="#E5E5E5"> f pointer variable is</font>

49
00:02:25,480 --> 00:02:30,459
being loaded with<font color="#E5E5E5"> the address</font><font color="#CCCCCC"> of a</font>

50
00:02:27,130 --> 00:02:32,319
function and then at runtime it caused

51
00:02:30,459 --> 00:02:34,480
<font color="#E5E5E5">this function that the loaded the</font>

52
00:02:32,319 --> 00:02:36,760
function and this can also be another

53
00:02:34,480 --> 00:02:38,310
function at the same indirect call so

54
00:02:36,760 --> 00:02:40,630
it's<font color="#E5E5E5"> not a direct call can be different</font>

55
00:02:38,310 --> 00:02:44,980
functions at different moments in

56
00:02:40,630 --> 00:02:50,709
program but here we take three functions

57
00:02:44,980 --> 00:02:52,569
from the program among others we take

58
00:02:50,709 --> 00:02:54,940
the we take function one as an example

59
00:02:52,569 --> 00:02:57,100
<font color="#CCCCCC">so if this indirect call is allowed to</font>

60
00:02:54,940 --> 00:03:06,870
<font color="#E5E5E5">call function one but not function two</font>

61
00:02:57,100 --> 00:03:06,870
and function three<font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> working</font>

62
00:03:08,700 --> 00:03:13,988
okay so what does<font color="#CCCCCC"> an attacker do the</font>

63
00:03:11,860 --> 00:03:16,390
attacker gets control over this indirect

64
00:03:13,989 --> 00:03:18,849
call with some vulnerability so it gets

65
00:03:16,390 --> 00:03:22,299
control of this<font color="#E5E5E5"> f pointer it slowed its</font>

66
00:03:18,849 --> 00:03:23,859
it loads its own the address of its

67
00:03:22,300 --> 00:03:32,470
interested function for example function

68
00:03:23,860 --> 00:03:33,850
to and function<font color="#CCCCCC"> 3 so an attacker what an</font>

69
00:03:32,470 --> 00:03:36,580
attacker does in this advanced<font color="#E5E5E5"> code</font>

70
00:03:33,850 --> 00:03:39,190
reuse attacks is it<font color="#E5E5E5"> uses this in their</font>

71
00:03:36,580 --> 00:03:42,400
call<font color="#E5E5E5"> within this loop to call multiple</font>

72
00:03:39,190 --> 00:03:44,829
functions after each other so it also

73
00:03:42,400 --> 00:03:48,190
<font color="#E5E5E5">gets control of this while loop actually</font>

74
00:03:44,830 --> 00:03:50,410
and then it costs multiple functions

75
00:03:48,190 --> 00:03:52,630
after each other to perform its desired

76
00:03:50,410 --> 00:03:54,609
functionality the functions that perform

77
00:03:52,630 --> 00:03:58,840
the functionality article we call

78
00:03:54,610 --> 00:04:01,390
gadgets and<font color="#CCCCCC"> the main loop gadget we call</font>

79
00:03:58,840 --> 00:04:09,069
loop gadgets and this is functional

80
00:04:01,390 --> 00:04:11,200
rented programming so however binary

81
00:04:09,069 --> 00:04:14,320
levels you have I solutions they are

82
00:04:11,200 --> 00:04:16,060
unable<font color="#E5E5E5"> to resolve the exact targets of</font>

83
00:04:14,320 --> 00:04:18,700
this indirect call so they do raise the

84
00:04:16,060 --> 00:04:22,510
bar for attackers the indirect call

85
00:04:18,700 --> 00:04:25,740
<font color="#CCCCCC">cannot</font><font color="#E5E5E5"> go anywhere in the program but</font><font color="#CCCCCC"> to</font>

86
00:04:22,510 --> 00:04:28,650
a limited set of targets but to all

87
00:04:25,740 --> 00:04:31,000
functions in the<font color="#E5E5E5"> end this allows</font>

88
00:04:28,650 --> 00:04:34,090
attackers to still performed advanced

89
00:04:31,000 --> 00:04:35,320
<font color="#E5E5E5">Codrus attacks so it would allow this</font>

90
00:04:34,090 --> 00:04:42,070
indirect call to go to all these

91
00:04:35,320 --> 00:04:46,349
functions so at source level you have

92
00:04:42,070 --> 00:04:49,120
all the information you can extract the

93
00:04:46,350 --> 00:04:50,530
targets for all indirect calls and you

94
00:04:49,120 --> 00:04:52,930
can enforce the information during

95
00:04:50,530 --> 00:04:57,570
<font color="#E5E5E5">runtime for example vtv and forces the</font>

96
00:04:52,930 --> 00:05:00,669
class hierarchy information to actually

97
00:04:57,570 --> 00:05:02,919
enforce this constraint at runtime<font color="#E5E5E5"> and</font>

98
00:05:00,669 --> 00:05:07,389
<font color="#CCCCCC">this allows for example this another</font>

99
00:05:02,919 --> 00:05:09,729
call to<font color="#E5E5E5"> go to unintended locations like</font>

100
00:05:07,389 --> 00:05:13,419
function to and function<font color="#E5E5E5"> 3 I have CC the</font>

101
00:05:09,729 --> 00:05:15,789
same however this technique enforces the

102
00:05:13,419 --> 00:05:20,130
value leverages the function argument

103
00:05:15,789 --> 00:05:20,130
types available at source code

104
00:05:22,590 --> 00:05:27,520
so what<font color="#E5E5E5"> is type</font><font color="#CCCCCC"> armor doing so type</font>

105
00:05:25,629 --> 00:05:30,250
armor tries to approximate the source

106
00:05:27,520 --> 00:05:32,818
level accuracy tries to get close<font color="#CCCCCC"> to the</font>

107
00:05:30,250 --> 00:05:36,099
source level available information

108
00:05:32,819 --> 00:05:40,000
however<font color="#E5E5E5"> it is not as accurate as source</font>

109
00:05:36,099 --> 00:05:45,009
so it allows certain unintended

110
00:05:40,000 --> 00:05:49,090
functions still however it does stop

111
00:05:45,009 --> 00:05:51,400
suit it stops more than the current

112
00:05:49,090 --> 00:05:54,969
buyer level solutions so it for example

113
00:05:51,400 --> 00:05:59,258
<font color="#CCCCCC">it stops for that the third function</font>

114
00:05:54,970 --> 00:06:00,789
function<font color="#CCCCCC"> 3 so we so we are somewhere in</font>

115
00:05:59,259 --> 00:06:02,110
<font color="#E5E5E5">between the current state-of-the-art</font>

116
00:06:00,789 --> 00:06:06,639
solutions and the source several

117
00:06:02,110 --> 00:06:08,199
solutions okay how do we approximate the

118
00:06:06,639 --> 00:06:13,469
source level accuracy so what do we

119
00:06:08,199 --> 00:06:15,669
extract from the binaries we perform a

120
00:06:13,469 --> 00:06:19,960
function signature matching by

121
00:06:15,669 --> 00:06:22,359
extracting argument counts at dinner

122
00:06:19,960 --> 00:06:24,638
call sides and the function<font color="#E5E5E5"> so at the</font>

123
00:06:22,360 --> 00:06:28,780
indirect call sides we do some analysis

124
00:06:24,639 --> 00:06:31,990
and we get we look for arguments being

125
00:06:28,780 --> 00:06:34,080
prepared that we and we use<font color="#E5E5E5"> that as the</font>

126
00:06:31,990 --> 00:06:36,849
invariant at the indirect call side and

127
00:06:34,080 --> 00:06:40,770
we do a similar thing at the functions

128
00:06:36,849 --> 00:06:43,900
where we look at arguments being used

129
00:06:40,770 --> 00:06:45,669
and then once we have this information

130
00:06:43,900 --> 00:06:49,179
<font color="#CCCCCC">we marked in our call sites and</font>

131
00:06:45,669 --> 00:06:54,448
functions with the argument count and

132
00:06:49,180 --> 00:06:54,449
<font color="#E5E5E5">then we perform some matching to only</font>

133
00:06:55,440 --> 00:06:59,699
functions that match within Eric all

134
00:06:57,610 --> 00:07:02,409
sides<font color="#E5E5E5"> only these are allowed to be</font>

135
00:06:59,699 --> 00:07:04,870
performed during<font color="#E5E5E5"> runtime so let's give</font>

136
00:07:02,409 --> 00:07:07,509
an example assume that we have indirect

137
00:07:04,870 --> 00:07:13,000
call site and type armor determines that

138
00:07:07,509 --> 00:07:15,340
it prepares to arguments then this<font color="#CCCCCC"> inner</font>

139
00:07:13,000 --> 00:07:18,940
<font color="#CCCCCC">calcite is not allowed</font><font color="#E5E5E5"> to call functions</font>

140
00:07:15,340 --> 00:07:23,020
that actually expect three or more

141
00:07:18,940 --> 00:07:25,779
arguments we have implemented type armor

142
00:07:23,020 --> 00:07:27,490
for 64-bit architecture where the

143
00:07:25,779 --> 00:07:30,009
calling convention is that the first few

144
00:07:27,490 --> 00:07:32,580
arguments when a function is called is

145
00:07:30,009 --> 00:07:34,379
given through registers

146
00:07:32,580 --> 00:07:37,889
when we do the analysis at the narco

147
00:07:34,379 --> 00:07:41,039
site and the functions we look for

148
00:07:37,889 --> 00:07:42,449
instructions that so<font color="#E5E5E5"> for at the indirect</font>

149
00:07:41,039 --> 00:07:44,400
calcite we look for instructions that

150
00:07:42,449 --> 00:07:47,520
actually write to these register

151
00:07:44,400 --> 00:07:50,030
arguments and at the function<font color="#E5E5E5"> at the</font>

152
00:07:47,520 --> 00:07:54,000
functions we look at instructions that

153
00:07:50,030 --> 00:07:59,219
read<font color="#E5E5E5"> the register argument before it is</font>

154
00:07:54,000 --> 00:08:10,710
written so it uses the value<font color="#CCCCCC"> that has</font>

155
00:07:59,219 --> 00:08:14,400
<font color="#E5E5E5">come in the function</font><font color="#CCCCCC"> okay so let's give</font>

156
00:08:10,710 --> 00:08:18,539
an example so we match once we<font color="#E5E5E5"> have the</font>

157
00:08:14,400 --> 00:08:21,090
information we match the call<font color="#E5E5E5"> sides and</font>

158
00:08:18,539 --> 00:08:26,370
the functions and depending on the types

159
00:08:21,090 --> 00:08:30,049
we either allow or disallow the link for

160
00:08:26,370 --> 00:08:33,929
example at this<font color="#CCCCCC"> Ania calcite type armor</font>

161
00:08:30,050 --> 00:08:37,169
determines that it prepares to arguments

162
00:08:33,929 --> 00:08:39,140
and at the<font color="#CCCCCC"> Fed function one also</font>

163
00:08:37,169 --> 00:08:43,140
determines that it expects to arguments

164
00:08:39,140 --> 00:08:47,250
type armor<font color="#E5E5E5"> would allow this link to be</font>

165
00:08:43,140 --> 00:08:49,290
performed the same applies for function

166
00:08:47,250 --> 00:08:53,640
to wear type armor determines that it

167
00:08:49,290 --> 00:08:56,550
actually also expects to arguments and

168
00:08:53,640 --> 00:08:58,800
it would allow again the link the

169
00:08:56,550 --> 00:09:02,550
control flow from<font color="#CCCCCC"> the narco to this</font>

170
00:08:58,800 --> 00:09:04,560
function function to however at function

171
00:09:02,550 --> 00:09:07,979
<font color="#CCCCCC">three it determines that it expects</font>

172
00:09:04,560 --> 00:09:11,459
three arguments and as a result type

173
00:09:07,980 --> 00:09:12,750
armor this allows<font color="#E5E5E5"> this indirect call to</font>

174
00:09:11,459 --> 00:09:20,430
go to function three because the

175
00:09:12,750 --> 00:09:25,070
matching didn't succeed so how accurate

176
00:09:20,430 --> 00:09:27,660
can we determine the prepared and the

177
00:09:25,070 --> 00:09:32,370
used argument count<font color="#E5E5E5"> in our call sites</font>

178
00:09:27,660 --> 00:09:34,439
and<font color="#CCCCCC"> the functions we have evaluated some</font>

179
00:09:32,370 --> 00:09:38,010
widely used applications servers

180
00:09:34,440 --> 00:09:40,949
including memcache deal<font color="#E5E5E5"> I</font><font color="#CCCCCC"> tpd engine X</font>

181
00:09:38,010 --> 00:09:44,180
and MySQL memcache t is a distributed

182
00:09:40,949 --> 00:09:46,040
server mem memory cache

183
00:09:44,180 --> 00:09:48,920
that forms memory caching lighttpd

184
00:09:46,040 --> 00:09:51,949
engine XR HTTP servers that serve

185
00:09:48,920 --> 00:09:54,170
websites and mysql database the first

186
00:09:51,950 --> 00:09:56,960
three servers<font color="#E5E5E5"> are</font><font color="#CCCCCC"> C programs mysql is a</font>

187
00:09:54,170 --> 00:09:59,689
<font color="#E5E5E5">c++ program and you can see that mysql</font>

188
00:09:56,960 --> 00:10:01,250
is actually a lot more<font color="#E5E5E5"> complexity it</font>

189
00:09:59,690 --> 00:10:06,200
contains lots of in our calls and lots

190
00:10:01,250 --> 00:10:08,540
of other second functions we can notice

191
00:10:06,200 --> 00:10:10,370
<font color="#CCCCCC">actually that we get quite close to the</font>

192
00:10:08,540 --> 00:10:14,420
source code in determining the argument

193
00:10:10,370 --> 00:10:16,480
counts for example for<font color="#CCCCCC"> mysql we can</font>

194
00:10:14,420 --> 00:10:21,699
determine well type our midterms that

195
00:10:16,480 --> 00:10:26,600
finds that about close<font color="#E5E5E5"> to six thousand</font>

196
00:10:21,700 --> 00:10:29,000
call sides so it's able<font color="#E5E5E5"> to determine</font>

197
00:10:26,600 --> 00:10:31,100
precisely the argument count for<font color="#CCCCCC"> 6000</font>

198
00:10:29,000 --> 00:10:35,750
call sites out of<font color="#CCCCCC"> seven thousand five</font>

199
00:10:31,100 --> 00:10:37,970
<font color="#CCCCCC">hundred and four functions it is</font><font color="#E5E5E5"> able to</font>

200
00:10:35,750 --> 00:10:40,430
determine precisely for about seven

201
00:10:37,970 --> 00:10:44,529
thousand out of<font color="#CCCCCC"> ten thousand functions</font>

202
00:10:40,430 --> 00:10:44,529
the<font color="#E5E5E5"> argument counted it expects</font>

203
00:10:48,710 --> 00:10:58,620
so once we have this information how do

204
00:10:52,440 --> 00:11:00,720
we enforce it during runtime like the

205
00:10:58,620 --> 00:11:04,020
matching we insert checks before the

206
00:11:00,720 --> 00:11:08,070
indirect calls and we insert the<font color="#CCCCCC"> IDs</font>

207
00:11:04,020 --> 00:11:12,199
which are the expected<font color="#E5E5E5"> argument counts</font>

208
00:11:08,070 --> 00:11:15,270
at the functions we inserted before the

209
00:11:12,200 --> 00:11:17,820
function entry point once the indirect

210
00:11:15,270 --> 00:11:20,960
<font color="#E5E5E5">costs about to be called it performs the</font>

211
00:11:17,820 --> 00:11:23,940
check it retrieves the idea of<font color="#CCCCCC"> the</font>

212
00:11:20,960 --> 00:11:29,070
function that's targeted and then it

213
00:11:23,940 --> 00:11:32,160
performs a check this check does is the

214
00:11:29,070 --> 00:11:34,920
ID of the targeted function within my

215
00:11:32,160 --> 00:11:38,189
reach and that is it checks whether the

216
00:11:34,920 --> 00:11:39,900
<font color="#E5E5E5">target ID is less or equal to its own ID</font>

217
00:11:38,190 --> 00:11:43,490
so in this case this internet call could

218
00:11:39,900 --> 00:11:52,980
go to functions that have<font color="#CCCCCC"> 0 1 or 2</font>

219
00:11:43,490 --> 00:11:57,150
arguments<font color="#E5E5E5"> ok so we also performed some</font>

220
00:11:52,980 --> 00:12:01,590
performance evaluation to compare our

221
00:11:57,150 --> 00:12:03,300
solution with<font color="#E5E5E5"> the others and we</font>

222
00:12:01,590 --> 00:12:08,130
performed the performance evaluation on

223
00:12:03,300 --> 00:12:09,540
spec where we had well acceptable

224
00:12:08,130 --> 00:12:14,220
performs<font color="#CCCCCC"> overhead less</font><font color="#E5E5E5"> than three</font>

225
00:12:09,540 --> 00:12:20,939
percent in geometric<font color="#E5E5E5"> mean we again</font>

226
00:12:14,220 --> 00:12:24,780
evaluated some servers and here we could

227
00:12:20,940 --> 00:12:29,910
see that actually security comes with a

228
00:12:24,780 --> 00:12:31,620
price so<font color="#E5E5E5"> improved security can can give</font>

229
00:12:29,910 --> 00:12:34,050
actually also<font color="#E5E5E5"> quite some forms over that</font>

230
00:12:31,620 --> 00:12:37,140
we saw in<font color="#CCCCCC"> MySQL with which is our worst</font>

231
00:12:34,050 --> 00:12:40,349
<font color="#CCCCCC">case</font><font color="#E5E5E5"> performance overhead which is in</font>

232
00:12:37,140 --> 00:12:43,530
<font color="#E5E5E5">C++ had a performance overhead of</font><font color="#CCCCCC"> twenty</font>

233
00:12:40,350 --> 00:12:45,690
<font color="#CCCCCC">four</font><font color="#E5E5E5"> percent but others had far less</font>

234
00:12:43,530 --> 00:12:49,319
performs overhead and we think<font color="#E5E5E5"> that</font>

235
00:12:45,690 --> 00:12:54,120
<font color="#E5E5E5">MySQL execute an immense amount</font><font color="#CCCCCC"> of</font>

236
00:12:49,320 --> 00:12:57,540
indirect<font color="#E5E5E5"> calls in its critical path as</font>

237
00:12:54,120 --> 00:12:59,430
to conclude we extract new and variants

238
00:12:57,540 --> 00:13:01,800
from binaries that were not evaluated

239
00:12:59,430 --> 00:13:04,709
before extracted before and we

240
00:13:01,800 --> 00:13:06,870
use this information to apply<font color="#E5E5E5"> the</font>

241
00:13:04,709 --> 00:13:09,899
strictest security policy at the binary

242
00:13:06,870 --> 00:13:12,089
level<font color="#E5E5E5"> non state and we actually</font><font color="#CCCCCC"> also</font>

243
00:13:09,899 --> 00:13:15,080
show that binary levels cfi solutions

244
00:13:12,089 --> 00:13:18,029
can mitigate<font color="#E5E5E5"> advanced code reuse attacks</font>

245
00:13:15,080 --> 00:13:19,980
also we<font color="#CCCCCC"> are planning to make type armor</font>

246
00:13:18,029 --> 00:13:23,070
open source so keep an eye out on our

247
00:13:19,980 --> 00:13:24,360
<font color="#E5E5E5">webpage the u.s. agnete thanks for</font>

248
00:13:23,070 --> 00:13:34,170
listening<font color="#CCCCCC"> and I'm happy to accept</font>

249
00:13:24,360 --> 00:13:37,700
questions I thanks for the top so you

250
00:13:34,170 --> 00:13:41,670
you showed like seventy eighty percent

251
00:13:37,700 --> 00:13:46,190
precision rate for finding argument

252
00:13:41,670 --> 00:13:49,050
counter both call sites and at functions

253
00:13:46,190 --> 00:13:52,050
when you're wrong are you consistently

254
00:13:49,050 --> 00:13:58,439
over or under do you have cases where

255
00:13:52,050 --> 00:14:00,060
you have accidentally over counted the

256
00:13:58,440 --> 00:14:01,800
number of arguments for a<font color="#E5E5E5"> function or</font>

257
00:14:00,060 --> 00:14:05,969
under counted the number of arguments of

258
00:14:01,800 --> 00:14:08,069
call site and thus will block legitimate

259
00:14:05,970 --> 00:14:10,980
calls when there's no attack President

260
00:14:08,070 --> 00:14:14,040
and<font color="#E5E5E5"> cause the program to crash yeah so</font>

261
00:14:10,980 --> 00:14:18,920
we try<font color="#CCCCCC"> to be as conservative as possible</font>

262
00:14:14,040 --> 00:14:24,469
so during the analysis well we tried to

263
00:14:18,920 --> 00:14:27,990
at the indirect<font color="#CCCCCC"> cause I'd try to</font>

264
00:14:24,470 --> 00:14:30,329
overestimate and at the<font color="#CCCCCC"> function</font>

265
00:14:27,990 --> 00:14:32,850
underestimate that was the idea<font color="#E5E5E5"> and then</font>

266
00:14:30,329 --> 00:14:37,079
we couldn't find any case where the

267
00:14:32,850 --> 00:14:38,940
program<font color="#E5E5E5"> would break so okay and what</font><font color="#CCCCCC"> do</font>

268
00:14:37,079 --> 00:14:42,000
you do with like varargs functions like

269
00:14:38,940 --> 00:14:44,399
sorry<font color="#E5E5E5"> for like printf right all you do</font>

270
00:14:42,000 --> 00:14:47,329
is<font color="#E5E5E5"> print out yeah cuz printf is like</font>

271
00:14:44,399 --> 00:14:50,399
<font color="#E5E5E5">attack complete uh-huh yeah so we look</font>

272
00:14:47,329 --> 00:14:52,680
for we do some pattern matching for such

273
00:14:50,399 --> 00:14:59,160
<font color="#E5E5E5">functions so if printf</font><font color="#CCCCCC"> lets its</font><font color="#E5E5E5"> address</font>

274
00:14:52,680 --> 00:15:00,660
taken<font color="#CCCCCC"> okay printf itself I'm sure if its</font>

275
00:14:59,160 --> 00:15:02,819
address taking but the program itself

276
00:15:00,660 --> 00:15:05,100
can have a printf like function<font color="#E5E5E5"> which</font>

277
00:15:02,820 --> 00:15:07,529
can be<font color="#E5E5E5"> addressed taken and for such</font>

278
00:15:05,100 --> 00:15:09,990
functions for functions with arrival

279
00:15:07,529 --> 00:15:12,630
very attic arguments we do some pattern

280
00:15:09,990 --> 00:15:16,620
matching so you have this specific

281
00:15:12,630 --> 00:15:19,980
a piece of assembly in such art in such

282
00:15:16,620 --> 00:15:22,170
functions and there you can extract you

283
00:15:19,980 --> 00:15:25,080
can see how many are actually exactly

284
00:15:22,170 --> 00:15:29,579
set and then<font color="#E5E5E5"> the rest is Barry addict</font>

285
00:15:25,080 --> 00:15:39,630
and then we take this exact argument cam

286
00:15:29,580 --> 00:15:42,330
that<font color="#E5E5E5"> we can detect there</font><font color="#CCCCCC"> alright so what</font>

287
00:15:39,630 --> 00:15:45,540
some<font color="#CCCCCC"> schemer</font><font color="#E5E5E5"> lose Brown University so</font>

288
00:15:42,330 --> 00:15:47,010
when you identify argument you rely<font color="#CCCCCC"> on</font>

289
00:15:45,540 --> 00:15:49,829
the fact that you know<font color="#E5E5E5"> the calling</font>

290
00:15:47,010 --> 00:15:51,480
convention which is x86 64 and which

291
00:15:49,830 --> 00:15:53,850
arguments parts and registers and so on

292
00:15:51,480 --> 00:15:56,040
<font color="#CCCCCC">so forth how do you handle static</font>

293
00:15:53,850 --> 00:15:57,690
functions how do I li kung when a

294
00:15:56,040 --> 00:16:00,000
compiler compiles a static function

295
00:15:57,690 --> 00:16:01,740
steadily from<font color="#CCCCCC"> ya and function that is</font>

296
00:16:00,000 --> 00:16:04,500
not exposed in a compilation unit there

297
00:16:01,740 --> 00:16:06,360
is no requirement to respect the calling

298
00:16:04,500 --> 00:16:14,070
convention so how do you identify the

299
00:16:06,360 --> 00:16:16,080
arguments there in some cases so in

300
00:16:14,070 --> 00:16:18,810
static functions so which are not

301
00:16:16,080 --> 00:16:20,370
<font color="#E5E5E5">address taken you mean or I think I that</font>

302
00:16:18,810 --> 00:16:21,719
you can have static functions which are

303
00:16:20,370 --> 00:16:24,240
a<font color="#CCCCCC"> Jew is taken and are assigned to</font>

304
00:16:21,720 --> 00:16:25,950
function pointers<font color="#CCCCCC"> okay what's the</font>

305
00:16:24,240 --> 00:16:29,250
problem you're seeing there so the

306
00:16:25,950 --> 00:16:30,780
problem is<font color="#E5E5E5"> that how do you know you rely</font>

307
00:16:29,250 --> 00:16:33,060
on<font color="#E5E5E5"> the calling convention to identify</font>

308
00:16:30,780 --> 00:16:35,850
the arguments right and the compiler

309
00:16:33,060 --> 00:16:37,439
when it compiles that doesn't need to

310
00:16:35,850 --> 00:16:39,000
follow the<font color="#E5E5E5"> column convention it can do</font>

311
00:16:37,440 --> 00:16:41,010
whatever it wants because the function

312
00:16:39,000 --> 00:16:44,130
<font color="#E5E5E5">is not exposed outside of the</font>

313
00:16:41,010 --> 00:16:45,810
compilation unit I think if it is

314
00:16:44,130 --> 00:16:49,500
<font color="#E5E5E5">address taken I don't think the compiler</font>

315
00:16:45,810 --> 00:16:51,599
can do whatever it wants I think<font color="#CCCCCC"> okay we</font>

316
00:16:49,500 --> 00:16:53,520
<font color="#E5E5E5">will have a look at it but I think if</font>

317
00:16:51,600 --> 00:16:55,050
its edges taken it has to follow<font color="#E5E5E5"> rules</font>

318
00:16:53,520 --> 00:16:57,110
that apply to address things I<font color="#CCCCCC"> think</font>

319
00:16:55,050 --> 00:17:02,729
that priorities higher then if it's

320
00:16:57,110 --> 00:17:05,430
devastating<font color="#CCCCCC"> all right thanks so I have</font>

321
00:17:02,730 --> 00:17:09,420
another question how does your tool

322
00:17:05,430 --> 00:17:11,939
handle calls based on the register

323
00:17:09,420 --> 00:17:13,400
register based calls when the address is

324
00:17:11,939 --> 00:17:15,480
in<font color="#CCCCCC"> the register not in the memory</font>

325
00:17:13,400 --> 00:17:18,870
compiler can do those kind of things

326
00:17:15,480 --> 00:17:21,069
right<font color="#CCCCCC"> so I think I couldn't understand</font>

327
00:17:18,869 --> 00:17:25,158
so

328
00:17:21,069 --> 00:17:27,289
the example<font color="#CCCCCC"> that you showed yes it</font><font color="#E5E5E5"> was a</font>

329
00:17:25,159 --> 00:17:29,570
<font color="#E5E5E5">call F pointer so yeah f pointer is</font>

330
00:17:27,289 --> 00:17:33,639
holding the address of<font color="#CCCCCC"> the collar but</font>

331
00:17:29,570 --> 00:17:38,418
there are<font color="#E5E5E5"> certain situations in which</font>

332
00:17:33,639 --> 00:17:40,519
compiler uses register-based calls it it

333
00:17:38,419 --> 00:17:44,480
uses the registers to make a call yeah

334
00:17:40,519 --> 00:17:47,600
<font color="#E5E5E5">yeah do you address those yellow during</font>

335
00:17:44,480 --> 00:17:49,879
the buyer instrumentation we take the so

336
00:17:47,600 --> 00:17:56,449
we look at the call the indirect call

337
00:17:49,879 --> 00:17:58,730
and then we extract<font color="#E5E5E5"> the target based on</font>

338
00:17:56,450 --> 00:18:00,740
what so how the call is making the call

339
00:17:58,730 --> 00:18:02,090
actually so if it is register we get to

340
00:18:00,740 --> 00:18:03,860
address from I mean the value of the

341
00:18:02,090 --> 00:18:05,990
register if it's a dereference on the

342
00:18:03,860 --> 00:18:08,779
register we also do reference that

343
00:18:05,990 --> 00:18:11,149
register to get the target<font color="#CCCCCC"> okay so at</font>

344
00:18:08,779 --> 00:18:13,490
the part<font color="#E5E5E5"> of the dual analysis you make</font>

345
00:18:11,149 --> 00:18:15,309
sure that if it is not an indirect call

346
00:18:13,490 --> 00:18:17,690
based on the<font color="#E5E5E5"> memory then you actually</font>

347
00:18:15,309 --> 00:18:21,860
try<font color="#CCCCCC"> and look for if it is making a</font>

348
00:18:17,690 --> 00:18:24,320
register-based call<font color="#E5E5E5"> yeah I have</font>

349
00:18:21,860 --> 00:18:27,769
complicated i'll take off line yes yes

350
00:18:24,320 --> 00:18:31,009
<font color="#CCCCCC">sure hi I'm Nathan borough from Purdue I</font>

351
00:18:27,769 --> 00:18:32,870
was curious your tool relies on function

352
00:18:31,009 --> 00:18:34,940
signatures do you have any insight into

353
00:18:32,870 --> 00:18:36,439
how many functions in a program have the

354
00:18:34,940 --> 00:18:38,480
same signature according to your tool

355
00:18:36,440 --> 00:18:40,940
and if<font color="#CCCCCC"> that group is large enough to</font>

356
00:18:38,480 --> 00:18:42,620
still make code reuse attacks within

357
00:18:40,940 --> 00:18:45,230
that group of functions with the same

358
00:18:42,620 --> 00:18:54,649
signature practical<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> it's a very good</font>

359
00:18:45,230 --> 00:19:00,440
<font color="#CCCCCC">question no I don't have</font><font color="#E5E5E5"> to answer right</font>

360
00:18:54,649 --> 00:19:02,000
now<font color="#CCCCCC"> ok thank you um so I noticed</font><font color="#E5E5E5"> you</font>

361
00:19:00,440 --> 00:19:05,389
mentioned in your abstract a little bit

362
00:19:02,000 --> 00:19:07,759
about the coop attack do you can can you

363
00:19:05,389 --> 00:19:09,559
talk a little bit about why<font color="#CCCCCC"> your why</font>

364
00:19:07,759 --> 00:19:13,309
your solutions is is still not fully

365
00:19:09,559 --> 00:19:15,049
precise mitigates that attack I guess I

366
00:19:13,309 --> 00:19:18,259
just<font color="#E5E5E5"> don't understand that that link</font>

367
00:19:15,049 --> 00:19:20,059
there what does not mitigate why it does

368
00:19:18,259 --> 00:19:21,649
maybe you had a blurb in your abstract

369
00:19:20,059 --> 00:19:23,990
and maybe I should just<font color="#CCCCCC"> have the</font><font color="#E5E5E5"> paper</font>

370
00:19:21,649 --> 00:19:26,330
but but why like what's the interaction

371
00:19:23,990 --> 00:19:29,539
between this this additional<font color="#E5E5E5"> precision</font>

372
00:19:26,330 --> 00:19:31,370
and the coop attack mm-hmm so during<font color="#E5E5E5"> the</font>

373
00:19:29,539 --> 00:19:33,320
coop attack it uses the main loop

374
00:19:31,370 --> 00:19:35,000
the loop gadget where it has one

375
00:19:33,320 --> 00:19:38,750
<font color="#CCCCCC">indirect call site and it costs</font>

376
00:19:35,000 --> 00:19:41,170
different functions right<font color="#CCCCCC"> okay so we</font>

377
00:19:38,750 --> 00:19:45,140
look at the indirect call site and we so

378
00:19:41,170 --> 00:19:47,390
in the examples we saw in advance code

379
00:19:45,140 --> 00:19:51,559
twist attacks we looked at we could see

380
00:19:47,390 --> 00:19:53,690
<font color="#CCCCCC">that the entire call that was used in</font>

381
00:19:51,559 --> 00:19:55,730
the main loop did not match with at

382
00:19:53,690 --> 00:19:58,520
least one of<font color="#E5E5E5"> the functions that we're</font>

383
00:19:55,730 --> 00:20:02,300
called so in that way we could stop the

384
00:19:58,520 --> 00:20:03,920
attack so to be<font color="#CCCCCC"> clear you</font><font color="#E5E5E5"> were just</font>

385
00:20:02,300 --> 00:20:06,500
looking did you did<font color="#CCCCCC"> you look</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> see if</font>

386
00:20:03,920 --> 00:20:07,880
like the there were other functions that

387
00:20:06,500 --> 00:20:09,320
were still allowed on your your scheme

388
00:20:07,880 --> 00:20:11,990
that could have replaced<font color="#E5E5E5"> the ones that</font>

389
00:20:09,320 --> 00:20:14,360
<font color="#CCCCCC">were used in the</font><font color="#E5E5E5"> coop attack no we</font>

390
00:20:11,990 --> 00:20:16,910
didn't look at<font color="#E5E5E5"> the two to harden the</font>

391
00:20:14,360 --> 00:20:19,600
available<font color="#E5E5E5"> export we didn't have a look</font>

392
00:20:16,910 --> 00:20:19,600
at it<font color="#CCCCCC"> okay</font>

