1
00:00:00,000 --> 00:00:05,819
my name is<font color="#CCCCCC"> Christina by Cisco and I will</font>

2
00:00:02,730 --> 00:00:08,069
talk today about network nodes that

3
00:00:05,819 --> 00:00:11,940
hinder communication in the internet and

4
00:00:08,069 --> 00:00:14,099
how we can localize them and I will

5
00:00:11,940 --> 00:00:16,500
present for prints the first for

6
00:00:14,099 --> 00:00:19,198
localization protocol that<font color="#CCCCCC"> scares to</font>

7
00:00:16,500 --> 00:00:23,070
inter domain settings this is joint work

8
00:00:19,199 --> 00:00:29,970
with you shaun leane humming junk and

9
00:00:23,070 --> 00:00:32,009
<font color="#E5E5E5">Adrian</font><font color="#CCCCCC"> thetic so when a source contacts</font>

10
00:00:29,970 --> 00:00:34,200
<font color="#E5E5E5">a destination over the</font><font color="#CCCCCC"> Internet it</font>

11
00:00:32,009 --> 00:00:36,870
expects the network to be<font color="#E5E5E5"> available and</font>

12
00:00:34,200 --> 00:00:40,530
this is vital<font color="#E5E5E5"> especially in the case of</font>

13
00:00:36,870 --> 00:00:43,589
critical infrastructures however there

14
00:00:40,530 --> 00:00:47,250
are many<font color="#E5E5E5"> things that can go wrong well</font>

15
00:00:43,590 --> 00:00:50,129
last<font color="#E5E5E5"> December an authorized code was</font>

16
00:00:47,250 --> 00:00:52,019
discovered on juniper routers that may

17
00:00:50,129 --> 00:00:55,260
have been used<font color="#E5E5E5"> to spy on juniper</font>

18
00:00:52,020 --> 00:00:59,059
customers now if this attack result in

19
00:00:55,260 --> 00:01:02,280
traffic delay perhaps we can localize it

20
00:00:59,059 --> 00:01:04,979
also is P is engaged in anti-competitive

21
00:01:02,280 --> 00:01:09,630
behavior with the purpose of increasing

22
00:01:04,979 --> 00:01:12,360
<font color="#E5E5E5">the revenue and</font><font color="#CCCCCC"> often times they drop or</font>

23
00:01:09,630 --> 00:01:16,350
delay packets<font color="#E5E5E5"> and so it would be nice to</font>

24
00:01:12,360 --> 00:01:17,759
know<font color="#CCCCCC"> what where this happens so there</font>

25
00:01:16,350 --> 00:01:20,339
are countries that sends our

26
00:01:17,759 --> 00:01:23,990
communication for instance Myanmar and

27
00:01:20,340 --> 00:01:29,430
the United Arab Emirates drop skype

28
00:01:23,990 --> 00:01:31,798
packets and finally the network may not

29
00:01:29,430 --> 00:01:34,259
be available because<font color="#E5E5E5"> of Miss</font>

30
00:01:31,799 --> 00:01:39,299
configuration and as you can see in the

31
00:01:34,259 --> 00:01:42,390
figure this happens quite<font color="#E5E5E5"> often and so</font>

32
00:01:39,299 --> 00:01:46,439
our goal is to localize entities that

33
00:01:42,390 --> 00:01:48,450
drop delay or modify traffic and so if

34
00:01:46,439 --> 00:01:50,908
the source can localize such entities

35
00:01:48,450 --> 00:01:53,130
whether there is there<font color="#E5E5E5"> are those nodes</font>

36
00:01:50,909 --> 00:01:55,710
there with a question mark it could

37
00:01:53,130 --> 00:02:00,179
select a path that goes around these

38
00:01:55,710 --> 00:02:04,679
nodes like the green path in the figure

39
00:02:00,180 --> 00:02:08,310
and so there<font color="#CCCCCC"> are four questions that</font>

40
00:02:04,680 --> 00:02:11,190
a for localization approach to dusk and

41
00:02:08,310 --> 00:02:14,340
should answer first one is who localizes

42
00:02:11,190 --> 00:02:16,350
folds is it the source are there perhaps

43
00:02:14,340 --> 00:02:21,150
other nodes and ended in the<font color="#CCCCCC"> network</font>

44
00:02:16,350 --> 00:02:23,310
that localize them second is how<font color="#E5E5E5"> long</font>

45
00:02:21,150 --> 00:02:25,709
does it take to localize note to

46
00:02:23,310 --> 00:02:29,459
localize folds and what is the

47
00:02:25,709 --> 00:02:31,590
communication overhead and finally what

48
00:02:29,459 --> 00:02:33,420
is this storage strain on notes I mean

49
00:02:31,590 --> 00:02:38,520
this knows that support for localization

50
00:02:33,420 --> 00:02:40,980
how much do<font color="#E5E5E5"> they need to store and so</font>

51
00:02:38,520 --> 00:02:44,370
there has already been extensive work

52
00:02:40,980 --> 00:02:46,380
and for localization and previous

53
00:02:44,370 --> 00:02:49,590
approach do a wonderful<font color="#CCCCCC"> work and</font>

54
00:02:46,380 --> 00:02:53,700
localizing folds inside the domain so

55
00:02:49,590 --> 00:02:56,000
they are introduced but when we look<font color="#E5E5E5"> at</font>

56
00:02:53,700 --> 00:02:58,820
inter domain settings so across<font color="#E5E5E5"> domains</font>

57
00:02:56,000 --> 00:03:05,160
we see that they are not practical and

58
00:02:58,820 --> 00:03:08,579
let me show<font color="#CCCCCC"> you why well typically to</font>

59
00:03:05,160 --> 00:03:11,459
localize folds<font color="#E5E5E5"> nodes store summaries of</font>

60
00:03:08,580 --> 00:03:13,890
the<font color="#E5E5E5"> traffic that they observe and in</font>

61
00:03:11,459 --> 00:03:16,950
some of the approaches for instance<font color="#E5E5E5"> you</font>

62
00:03:13,890 --> 00:03:19,018
see here neighboring nodes so they store

63
00:03:16,950 --> 00:03:22,048
summaries of the outgoing and incoming

64
00:03:19,019 --> 00:03:26,010
flows and then they compare their views

65
00:03:22,049 --> 00:03:30,030
of the world and they can use<font color="#CCCCCC"> either</font>

66
00:03:26,010 --> 00:03:33,440
trusted hardware or they can send these

67
00:03:30,030 --> 00:03:36,959
summaries to a<font color="#E5E5E5"> trusted central entity</font>

68
00:03:33,440 --> 00:03:39,480
but you know in large-scale networks

69
00:03:36,959 --> 00:03:41,940
relying on a trusty central entity or

70
00:03:39,480 --> 00:03:46,109
requiring everybody to deploy trusted

71
00:03:41,940 --> 00:03:48,239
hardware is cumbersome on the<font color="#CCCCCC"> positive</font>

72
00:03:46,110 --> 00:03:50,100
side<font color="#E5E5E5"> these approaches require low</font>

73
00:03:48,239 --> 00:03:55,620
storage overhead it's only / neighbor

74
00:03:50,100 --> 00:03:57,989
<font color="#CCCCCC">state in other approaches all nodes on</font>

75
00:03:55,620 --> 00:04:00,510
<font color="#CCCCCC">the path need to store summaries of the</font>

76
00:03:57,989 --> 00:04:04,549
package that they observe and then they

77
00:04:00,510 --> 00:04:04,548
send these summaries back to the source

78
00:04:05,209 --> 00:04:13,799
but as we will see they require either /

79
00:04:08,640 --> 00:04:15,839
flow or purse or state and in fact you

80
00:04:13,799 --> 00:04:16,900
can see in this<font color="#CCCCCC"> table in the first two</font>

81
00:04:15,840 --> 00:04:19,750
columns

82
00:04:16,899 --> 00:04:23,229
they require up to<font color="#E5E5E5"> a couple of gigabytes</font>

83
00:04:19,750 --> 00:04:27,490
and then up to hundreds of gigabytes and

84
00:04:23,229 --> 00:04:30,758
<font color="#CCCCCC">this is on</font><font color="#E5E5E5"> the fast path and so this</font><font color="#CCCCCC"> is</font>

85
00:04:27,490 --> 00:04:33,669
not exactly<font color="#E5E5E5"> practical and I will present</font>

86
00:04:30,759 --> 00:04:36,729
you for prints this is our approach and

87
00:04:33,669 --> 00:04:40,240
<font color="#CCCCCC">that only requires less than 50</font>

88
00:04:36,729 --> 00:04:45,090
megabytes of storage so how do we do

89
00:04:40,240 --> 00:04:47,199
that all<font color="#CCCCCC"> in for prints notes</font>

90
00:04:45,090 --> 00:04:50,349
probabilistically sample the pack is

91
00:04:47,199 --> 00:04:54,220
<font color="#CCCCCC">that they observe so knows do not store</font>

92
00:04:50,350 --> 00:04:56,860
information about all packets and then

93
00:04:54,220 --> 00:05:00,090
sampling is based on keys that are

94
00:04:56,860 --> 00:05:02,620
shared between each node and the source

95
00:05:00,090 --> 00:05:06,010
but recall that we don't want / source

96
00:05:02,620 --> 00:05:09,729
storage so instead of storing these keys

97
00:05:06,010 --> 00:05:13,030
and<font color="#CCCCCC"> knows derive them on the fly and for</font>

98
00:05:09,729 --> 00:05:17,159
this we use the dr key protocol<font color="#E5E5E5"> that was</font>

99
00:05:13,030 --> 00:05:20,500
published at etsy com two<font color="#E5E5E5"> years ago and</font>

100
00:05:17,160 --> 00:05:23,919
so because the source has these keys it

101
00:05:20,500 --> 00:05:27,130
knows which nodes should sample which

102
00:05:23,919 --> 00:05:28,719
packets but knows do not know<font color="#CCCCCC"> about each</font>

103
00:05:27,130 --> 00:05:32,349
<font color="#E5E5E5">other's behavior because they do not</font>

104
00:05:28,720 --> 00:05:34,539
have each other's shared keys and so the

105
00:05:32,349 --> 00:05:36,969
source can then compare the expected

106
00:05:34,539 --> 00:05:40,620
behavior with the actual runtime

107
00:05:36,970 --> 00:05:46,870
behavior and can localize where

108
00:05:40,620 --> 00:05:48,789
something doesn't match so each node

109
00:05:46,870 --> 00:05:50,440
force for storing this packet

110
00:05:48,789 --> 00:05:52,930
fingerprints each node has a bloom

111
00:05:50,440 --> 00:05:55,270
filter and if we look<font color="#E5E5E5"> at the green node</font>

112
00:05:52,930 --> 00:05:59,260
that shares the green keys with<font color="#CCCCCC"> the</font>

113
00:05:55,270 --> 00:06:02,260
source when the source sends a packet it

114
00:05:59,260 --> 00:06:04,930
inserts<font color="#E5E5E5"> an authenticator and this</font>

115
00:06:02,260 --> 00:06:07,810
Authenticator is updated by each node on

116
00:06:04,930 --> 00:06:12,699
<font color="#CCCCCC">the path depending on the</font><font color="#E5E5E5"> contents of</font>

117
00:06:07,810 --> 00:06:14,889
<font color="#E5E5E5">the packet so the Authenticator captures</font>

118
00:06:12,699 --> 00:06:18,610
both the packet presence and the packet

119
00:06:14,889 --> 00:06:21,310
contents and so when a packet reaches

120
00:06:18,610 --> 00:06:22,810
this node the node first updates the

121
00:06:21,310 --> 00:06:24,639
Authenticator based on the packet

122
00:06:22,810 --> 00:06:28,150
contents and the<font color="#E5E5E5"> previous authenticator</font>

123
00:06:24,639 --> 00:06:30,400
so it's a nested authenticator and then

124
00:06:28,150 --> 00:06:33,370
it randomizes the sampling decision

125
00:06:30,400 --> 00:06:35,799
based on this<font color="#E5E5E5"> field if the</font><font color="#CCCCCC"> output is</font>

126
00:06:33,370 --> 00:06:39,060
greater than the<font color="#E5E5E5"> sampling probability is</font>

127
00:06:35,800 --> 00:06:41,889
going to store it in<font color="#CCCCCC"> the bloom filter</font>

128
00:06:39,060 --> 00:06:45,340
now you may notice<font color="#CCCCCC"> that</font><font color="#E5E5E5"> if we actually</font>

129
00:06:41,889 --> 00:06:47,259
<font color="#E5E5E5">do the steps that I mentioned here the</font>

130
00:06:45,340 --> 00:06:49,750
next<font color="#CCCCCC"> door indicator is computed on the</font>

131
00:06:47,259 --> 00:06:54,280
whole packet and this slows down

132
00:06:49,750 --> 00:06:55,960
processing so instead an optimization

133
00:06:54,280 --> 00:07:00,099
that<font color="#E5E5E5"> we do is we let the source</font>

134
00:06:55,960 --> 00:07:03,099
<font color="#CCCCCC">precompute some digests of the packet</font>

135
00:07:00,100 --> 00:07:06,460
contents for each node on<font color="#CCCCCC"> the path then</font>

136
00:07:03,100 --> 00:07:07,960
the notes first just use their digest to

137
00:07:06,460 --> 00:07:11,979
see what the value of the<font color="#CCCCCC"> Authenticator</font>

138
00:07:07,960 --> 00:07:15,250
and only if the packet needs to be

139
00:07:11,979 --> 00:07:20,530
stored do they check whether the digests

140
00:07:15,250 --> 00:07:23,380
have the correct value now this

141
00:07:20,530 --> 00:07:26,650
technique<font color="#E5E5E5"> of letting the source compute</font>

142
00:07:23,380 --> 00:07:28,590
authenticate computer<font color="#CCCCCC"> digest also allows</font>

143
00:07:26,650 --> 00:07:31,479
us to decrease communication overhead

144
00:07:28,590 --> 00:07:33,669
you see later when the source wants to

145
00:07:31,479 --> 00:07:35,889
retrieve the bloom filter<font color="#E5E5E5"> bits it only</font>

146
00:07:33,669 --> 00:07:39,010
<font color="#CCCCCC">needs to send these digests to let the</font>

147
00:07:35,889 --> 00:07:43,870
source query<font color="#E5E5E5"> their bloom filters and not</font>

148
00:07:39,010 --> 00:07:45,820
send<font color="#E5E5E5"> the entire packet I have described</font>

149
00:07:43,870 --> 00:07:47,620
here packet modification but we use

150
00:07:45,820 --> 00:07:54,789
similar techniques for packet drop and

151
00:07:47,620 --> 00:07:56,380
for localizing packet delay so the

152
00:07:54,789 --> 00:07:58,630
source is that something might have<font color="#CCCCCC"> gone</font>

153
00:07:56,380 --> 00:08:01,930
wrong because some of the pegs are not

154
00:07:58,630 --> 00:08:05,260
acknowledged and in fact this can happen

155
00:08:01,930 --> 00:08:07,810
due to be nine reasons link have a

156
00:08:05,260 --> 00:08:10,870
natural drop rate and this might be

157
00:08:07,810 --> 00:08:14,680
perfectly legitimate and so the source

158
00:08:10,870 --> 00:08:16,449
only proceeds to localize<font color="#E5E5E5"> folds only</font>

159
00:08:14,680 --> 00:08:18,639
when the<font color="#CCCCCC"> end to end rate of</font>

160
00:08:16,449 --> 00:08:23,260
unacknowledged packets exceeds the

161
00:08:18,639 --> 00:08:25,539
entrant natural drop rate and for some

162
00:08:23,260 --> 00:08:29,080
of the unacknowledged packets the sense

163
00:08:25,539 --> 00:08:31,030
and the source and<font color="#E5E5E5"> the probe request the</font>

164
00:08:29,080 --> 00:08:35,260
niche node replies with the bloom filter

165
00:08:31,030 --> 00:08:37,689
bits now probably applies travel the

166
00:08:35,260 --> 00:08:39,669
same unreliable network so some of the

167
00:08:37,690 --> 00:08:42,000
nose may not send probably probably

168
00:08:39,669 --> 00:08:43,120
applies at all because<font color="#E5E5E5"> they want to hide</font>

169
00:08:42,000 --> 00:08:46,480
<font color="#CCCCCC">Misbah</font>

170
00:08:43,120 --> 00:08:49,570
living and in other nodes may modify

171
00:08:46,480 --> 00:08:53,040
this replies<font color="#E5E5E5"> and so they might arrive in</font>

172
00:08:49,570 --> 00:08:56,200
correctly<font color="#E5E5E5"> at the source the</font><font color="#CCCCCC"> source will</font>

173
00:08:53,040 --> 00:09:00,010
localize folds based on both correct and

174
00:08:56,200 --> 00:09:01,990
incorrect probably applies in the case

175
00:09:00,010 --> 00:09:05,080
of correct probe replies the source

176
00:09:01,990 --> 00:09:08,230
computes link corruptions course this

177
00:09:05,080 --> 00:09:10,480
means this such a score just gives us an

178
00:09:08,230 --> 00:09:13,450
<font color="#CCCCCC">idea of how many times the link appears</font>

179
00:09:10,480 --> 00:09:17,080
to have misbehaved and so a big gap

180
00:09:13,450 --> 00:09:18,940
between the between two<font color="#E5E5E5"> neighboring</font>

181
00:09:17,080 --> 00:09:22,600
links shows that there might be a

182
00:09:18,940 --> 00:09:25,480
<font color="#E5E5E5">problem there for</font><font color="#CCCCCC"> instance if these are</font>

183
00:09:22,600 --> 00:09:28,480
the received values on the<font color="#E5E5E5"> first row</font>

184
00:09:25,480 --> 00:09:30,430
where a tick means that the packet was

185
00:09:28,480 --> 00:09:32,580
observed<font color="#E5E5E5"> in the bloom filter and X that</font>

186
00:09:30,430 --> 00:09:36,040
the packet was not stored and the

187
00:09:32,580 --> 00:09:38,170
question mark is an incorrect reply then

188
00:09:36,040 --> 00:09:40,719
the source will compared the expected

189
00:09:38,170 --> 00:09:44,920
values which it knows with the<font color="#CCCCCC"> receive</font>

190
00:09:40,720 --> 00:09:46,690
values and we'll see where we're lost

191
00:09:44,920 --> 00:09:49,390
where was the last place where the

192
00:09:46,690 --> 00:09:52,270
packet was correctly observed and<font color="#E5E5E5"> where</font>

193
00:09:49,390 --> 00:09:56,520
<font color="#E5E5E5">is the first place where the packet went</font>

194
00:09:52,270 --> 00:10:00,040
missing and so all these links appear to

195
00:09:56,520 --> 00:10:03,459
my two may have misbehaved so all their

196
00:10:00,040 --> 00:10:06,449
corruption scores go up this step is

197
00:10:03,459 --> 00:10:11,290
<font color="#E5E5E5">repeated by the source multiple times</font>

198
00:10:06,450 --> 00:10:14,320
and so because the source does this for

199
00:10:11,290 --> 00:10:16,209
multiple unacknowledged data packets it

200
00:10:14,320 --> 00:10:24,070
will be able<font color="#E5E5E5"> to localize with a higher</font>

201
00:10:16,209 --> 00:10:26,229
precision where a fault occurs the

202
00:10:24,070 --> 00:10:31,029
source<font color="#E5E5E5"> also uses incorrect probe replies</font>

203
00:10:26,230 --> 00:10:34,209
to assess<font color="#E5E5E5"> a node misbehavior probability</font>

204
00:10:31,029 --> 00:10:36,700
for each node this means how probable is

205
00:10:34,209 --> 00:10:40,569
that node to have dropped or modified a

206
00:10:36,700 --> 00:10:47,170
pro bleep lie for details please see the

207
00:10:40,570 --> 00:10:50,610
paper well is our<font color="#E5E5E5"> protocol secure after</font>

208
00:10:47,170 --> 00:10:53,170
all we operate in an unreliable network

209
00:10:50,610 --> 00:10:56,269
well<font color="#E5E5E5"> I'll first explain how we defend</font>

210
00:10:53,170 --> 00:11:00,389
against storage exhaustion attacks

211
00:10:56,269 --> 00:11:03,180
<font color="#CCCCCC">not store packet fingerprints for a</font>

212
00:11:00,389 --> 00:11:05,040
limited amount of time we divide time in

213
00:11:03,180 --> 00:11:08,579
epochs and in fact they store packets

214
00:11:05,040 --> 00:11:12,110
for an epoch at most and in a worst-case

215
00:11:08,579 --> 00:11:15,420
scenario when they<font color="#CCCCCC"> rob the node receives</font>

216
00:11:12,110 --> 00:11:17,970
traffic at line rate and the smallest

217
00:11:15,420 --> 00:11:20,819
size packet we actually<font color="#CCCCCC"> need to store</font>

218
00:11:17,970 --> 00:11:24,240
less than 50 megabytes per 10 gigabits

219
00:11:20,819 --> 00:11:27,029
<font color="#CCCCCC">per second of traffic and this is for a</font>

220
00:11:24,240 --> 00:11:29,309
range of false positive false positive

221
00:11:27,029 --> 00:11:32,009
rates of the<font color="#E5E5E5"> bloom filter that</font><font color="#CCCCCC"> give al</font>

222
00:11:29,309 --> 00:11:37,589
gives us a good accuracy as you will see

223
00:11:32,009 --> 00:11:39,240
<font color="#CCCCCC">in the</font><font color="#E5E5E5"> evaluation I also explain</font><font color="#CCCCCC"> how we</font>

224
00:11:37,589 --> 00:11:41,639
defend against framing attacks and the

225
00:11:39,240 --> 00:11:44,430
scenario is as follows there is a

226
00:11:41,639 --> 00:11:48,839
malicious node that tries to behave in

227
00:11:44,430 --> 00:11:51,540
<font color="#E5E5E5">such a way to make the target node Lucas</font>

228
00:11:48,839 --> 00:11:54,809
malicious so what<font color="#E5E5E5"> could the malicious</font>

229
00:11:51,540 --> 00:11:58,860
node do well first it could selectively

230
00:11:54,809 --> 00:12:00,870
drop data packets or modify them and we

231
00:11:58,860 --> 00:12:04,100
choose those data packets that are

232
00:12:00,870 --> 00:12:06,600
likely<font color="#CCCCCC"> to be sampled by the target node</font>

233
00:12:04,100 --> 00:12:08,550
well but the<font color="#CCCCCC"> demolitions know does not</font>

234
00:12:06,600 --> 00:12:11,879
know which pack is the target node with

235
00:12:08,550 --> 00:12:17,670
sample so the bet at best it can just

236
00:12:11,879 --> 00:12:20,790
<font color="#E5E5E5">drop them at random a more interesting</font>

237
00:12:17,670 --> 00:12:24,300
case is when the malicious node drops

238
00:12:20,790 --> 00:12:27,360
replies that originated<font color="#E5E5E5"> the target node</font>

239
00:12:24,300 --> 00:12:29,160
so in this case the malicious node would

240
00:12:27,360 --> 00:12:30,839
make it look like<font color="#E5E5E5"> the target node does</font>

241
00:12:29,160 --> 00:12:34,829
not send replies because it has

242
00:12:30,839 --> 00:12:36,839
something to hide and<font color="#E5E5E5"> for this I mean to</font>

243
00:12:34,829 --> 00:12:38,819
defend against this attack we make

244
00:12:36,839 --> 00:12:41,220
probably applies<font color="#E5E5E5"> indistinguishable from</font>

245
00:12:38,819 --> 00:12:42,628
each other and you<font color="#CCCCCC"> may know that</font><font color="#E5E5E5"> the</font>

246
00:12:41,220 --> 00:12:45,179
indistinguishability is a hard problem

247
00:12:42,629 --> 00:12:48,929
but in our setting it's a<font color="#E5E5E5"> little bit</font>

248
00:12:45,179 --> 00:12:52,709
easier that's because the source can

249
00:12:48,929 --> 00:12:55,610
tell each node when to<font color="#E5E5E5"> send a reply so</font>

250
00:12:52,709 --> 00:12:59,489
we defend<font color="#CCCCCC"> against timing attacks and</font>

251
00:12:55,610 --> 00:13:02,100
second because each node can encrypt the

252
00:12:59,490 --> 00:13:04,709
probe reply and so it's<font color="#E5E5E5"> not possible</font>

253
00:13:02,100 --> 00:13:06,970
based on contents to say where the reply

254
00:13:04,709 --> 00:13:10,388
originates

255
00:13:06,970 --> 00:13:13,750
and so the best<font color="#CCCCCC"> strategy for an attacker</font>

256
00:13:10,389 --> 00:13:16,329
is to attack at random and this reduces

257
00:13:13,750 --> 00:13:17,889
our attack surface<font color="#CCCCCC"> there also other</font>

258
00:13:16,329 --> 00:13:25,359
attacks that we consider in the paper

259
00:13:17,889 --> 00:13:27,129
but<font color="#E5E5E5"> I will skip them well you've all</font>

260
00:13:25,360 --> 00:13:30,850
just had lunch but there<font color="#CCCCCC"> is no such</font>

261
00:13:27,129 --> 00:13:34,959
thing<font color="#E5E5E5"> as a free lunch and let's see some</font>

262
00:13:30,850 --> 00:13:39,189
pros and cons of the<font color="#CCCCCC"> for</font><font color="#E5E5E5"> prints well</font>

263
00:13:34,959 --> 00:13:40,930
I've said that we have a low storage but

264
00:13:39,189 --> 00:13:43,360
this comes at the cost of a higher

265
00:13:40,930 --> 00:13:46,000
communication overhead this compares to

266
00:13:43,360 --> 00:13:47,800
previous schemes in fact<font color="#E5E5E5"> our scheme has</font>

267
00:13:46,000 --> 00:13:51,759
about three percent communication

268
00:13:47,800 --> 00:13:55,420
overhead and this is much higher than

269
00:13:51,759 --> 00:13:58,120
the other schemes however<font color="#CCCCCC"> badness is</font>

270
00:13:55,420 --> 00:14:00,639
less expensive than storage on the fast

271
00:13:58,120 --> 00:14:04,449
path and this is why we make this

272
00:14:00,639 --> 00:14:06,639
trade-off we also require pass to be

273
00:14:04,449 --> 00:14:09,758
symmetric or significantly overlapping

274
00:14:06,639 --> 00:14:11,980
and for delay localization we require

275
00:14:09,759 --> 00:14:16,389
<font color="#E5E5E5">time synchronization this is also what</font>

276
00:14:11,980 --> 00:14:18,579
previous schemes required and as I said

277
00:14:16,389 --> 00:14:21,939
<font color="#E5E5E5">we are secure against sophisticated</font>

278
00:14:18,579 --> 00:14:26,888
attackers and I will please refer to the

279
00:14:21,939 --> 00:14:31,089
paper or feel free<font color="#CCCCCC"> to ask questions now</font>

280
00:14:26,889 --> 00:14:36,430
let's see how for<font color="#E5E5E5"> prints performs well</font>

281
00:14:31,089 --> 00:14:38,259
we first simulated scenarios to<font color="#E5E5E5"> see how</font>

282
00:14:36,430 --> 00:14:40,019
<font color="#CCCCCC">accurate the scheme is and that's</font>

283
00:14:38,259 --> 00:14:42,910
<font color="#CCCCCC">because it's a probabilistic scheme and</font>

284
00:14:40,019 --> 00:14:45,160
we have one malicious node at random

285
00:14:42,910 --> 00:14:48,129
locations on<font color="#CCCCCC"> the path and I will present</font>

286
00:14:45,160 --> 00:14:53,050
here a path length of 5 s's which is the

287
00:14:48,129 --> 00:14:56,110
average path length in the<font color="#E5E5E5"> internet on</font>

288
00:14:53,050 --> 00:14:59,378
the<font color="#CCCCCC"> x-axis you see the false positive</font>

289
00:14:56,110 --> 00:15:02,230
rate of the bloom filter higher values

290
00:14:59,379 --> 00:15:03,759
of the false positive rate means we have

291
00:15:02,230 --> 00:15:06,189
a lower storage but there's a higher

292
00:15:03,759 --> 00:15:09,699
chance of collisions and so the scheme

293
00:15:06,189 --> 00:15:11,769
is less precise and on the<font color="#CCCCCC"> y-axis there</font>

294
00:15:09,699 --> 00:15:16,089
is the localization accuracy where

295
00:15:11,769 --> 00:15:18,160
higher is better and you can see that as

296
00:15:16,089 --> 00:15:19,510
soon<font color="#E5E5E5"> as the source sends two thousand</font>

297
00:15:18,160 --> 00:15:26,110
data packets

298
00:15:19,510 --> 00:15:28,590
at least 4 4.1 probability of point<font color="#CCCCCC"> 01</font>

299
00:15:26,110 --> 00:15:31,000
<font color="#E5E5E5">false positive rate of the bloom filter</font>

300
00:15:28,590 --> 00:15:34,030
the scheme is more than<font color="#E5E5E5"> ninety-five</font>

301
00:15:31,000 --> 00:15:37,450
percent accurate and actually as soon as

302
00:15:34,030 --> 00:15:41,199
the source sends 4,000 data packets we

303
00:15:37,450 --> 00:15:42,780
see<font color="#E5E5E5"> that the scheme is again more than</font>

304
00:15:41,200 --> 00:15:45,490
ninety-five percent accurate for all

305
00:15:42,780 --> 00:15:51,610
false positive rates that we have

306
00:15:45,490 --> 00:15:53,380
evaluated now<font color="#E5E5E5"> regarding throughput we</font>

307
00:15:51,610 --> 00:15:58,540
<font color="#E5E5E5">don't know we do not want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> slow down</font>

308
00:15:53,380 --> 00:16:01,480
existing traffic and so here you can see

309
00:15:58,540 --> 00:16:05,050
<font color="#E5E5E5">data packets on the x-axis the data</font>

310
00:16:01,480 --> 00:16:07,420
packet size and on the y-axis the

311
00:16:05,050 --> 00:16:11,140
forwarding efficiency and for small

312
00:16:07,420 --> 00:16:14,890
packets<font color="#E5E5E5"> you see the throughput is around</font>

313
00:16:11,140 --> 00:16:18,610
50 gigabits per second and the good put

314
00:16:14,890 --> 00:16:22,000
is around 15 but for large data packets

315
00:16:18,610 --> 00:16:24,340
greater<font color="#E5E5E5"> than 1024 bytes the throughput</font>

316
00:16:22,000 --> 00:16:28,030
stars being line rate and the good put

317
00:16:24,340 --> 00:16:31,060
is around 90 gigabits is around 100

318
00:16:28,030 --> 00:16:34,959
gigabits<font color="#CCCCCC"> per second well we've also</font>

319
00:16:31,060 --> 00:16:39,280
looked at what happens when we send data

320
00:16:34,960 --> 00:16:41,560
packets whose size has the same

321
00:16:39,280 --> 00:16:44,550
distribution as the data packet size in

322
00:16:41,560 --> 00:16:47,829
the internet and for such traffic mix

323
00:16:44,550 --> 00:16:50,109
the throughput is almost line rate and

324
00:16:47,830 --> 00:16:55,990
the good put is around 95 gigabits per

325
00:16:50,110 --> 00:16:59,470
second in conclusion I<font color="#CCCCCC"> have presented</font>

326
00:16:55,990 --> 00:17:01,330
for prints a faux localization scheme

327
00:16:59,470 --> 00:17:03,000
that scares to the size<font color="#E5E5E5"> of the internet</font>

328
00:17:01,330 --> 00:17:06,520
and that's<font color="#CCCCCC"> because we use a</font>

329
00:17:03,000 --> 00:17:08,619
probabilistic packet sampling we have

330
00:17:06,520 --> 00:17:11,079
low storage and you've also seen that

331
00:17:08,619 --> 00:17:13,540
<font color="#CCCCCC">the throughput it's close to line rate</font>

332
00:17:11,079 --> 00:17:15,819
for an<font color="#E5E5E5"> Internet</font><font color="#CCCCCC"> mixed data packet</font>

333
00:17:13,540 --> 00:17:17,680
distribution thank you for<font color="#E5E5E5"> your</font>

334
00:17:15,819 --> 00:17:19,800
<font color="#CCCCCC">attention and I'm</font><font color="#E5E5E5"> happy to take</font>

335
00:17:17,680 --> 00:17:19,800
questions

336
00:17:24,299 --> 00:17:34,389
any questions hi just a clarification so

337
00:17:31,389 --> 00:17:40,149
<font color="#E5E5E5">I saw that in your empirical evaluation</font>

338
00:17:34,389 --> 00:17:41,678
you had one<font color="#E5E5E5"> node randomly put someone on</font>

339
00:17:40,149 --> 00:17:45,209
the path is that correct yeah that's

340
00:17:41,679 --> 00:17:50,289
right so can fall Prince be used to find

341
00:17:45,210 --> 00:17:52,029
multiple faulty notes yes yes<font color="#CCCCCC"> yes it can</font>

342
00:17:50,289 --> 00:17:54,340
be<font color="#E5E5E5"> used to find multiple multiple faulty</font>

343
00:17:52,029 --> 00:17:58,119
notes<font color="#E5E5E5"> okay you just haven't experimented</font>

344
00:17:54,340 --> 00:18:03,249
with it not not where i showed it here

345
00:17:58,119 --> 00:18:04,959
<font color="#E5E5E5">okay yeah yeah thanks we have a little</font>

346
00:18:03,249 --> 00:18:08,109
<font color="#CCCCCC">time before</font><font color="#E5E5E5"> perhaps</font><font color="#CCCCCC"> I should</font><font color="#E5E5E5"> clarify</font>

347
00:18:04,960 --> 00:18:10,299
this going to detect<font color="#E5E5E5"> them one by one so</font>

348
00:18:08,109 --> 00:18:12,970
it's not going to detect<font color="#E5E5E5"> multiple volte</font>

349
00:18:10,299 --> 00:18:15,730
notes at the same time so you need<font color="#E5E5E5"> to</font>

350
00:18:12,970 --> 00:18:17,409
your first<font color="#E5E5E5"> going to detect them the one</font>

351
00:18:15,730 --> 00:18:19,539
that bit miss behaves the most let's say

352
00:18:17,409 --> 00:18:22,389
and the one that's closer to<font color="#CCCCCC"> the source</font>

353
00:18:19,539 --> 00:18:25,179
<font color="#E5E5E5">and then you know if you have a path</font>

354
00:18:22,389 --> 00:18:26,949
that's gonna go around<font color="#E5E5E5"> that note you're</font>

355
00:18:25,179 --> 00:18:33,759
going to detect<font color="#E5E5E5"> the others so this is</font>

356
00:18:26,950 --> 00:18:37,239
<font color="#E5E5E5">how</font><font color="#CCCCCC"> the scheme works so if all the nodes</font>

357
00:18:33,759 --> 00:18:39,220
misbehave equally badly then it always

358
00:18:37,239 --> 00:18:41,259
finds the closest one to the source well

359
00:18:39,220 --> 00:18:43,480
yeah and you need to you know you need

360
00:18:41,259 --> 00:18:45,129
to take them take<font color="#CCCCCC"> it off the path so not</font>

361
00:18:43,480 --> 00:18:50,499
send traffic to that node to find the

362
00:18:45,129 --> 00:18:53,980
<font color="#E5E5E5">other ones yes ok</font><font color="#CCCCCC"> mistral any other</font>

363
00:18:50,499 --> 00:18:56,139
questions well I have a question how do

364
00:18:53,980 --> 00:18:58,989
you envision for<font color="#E5E5E5"> for prints can be</font>

365
00:18:56,139 --> 00:19:01,299
deployed in practice yeah so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font>

366
00:18:58,989 --> 00:19:03,129
very good<font color="#CCCCCC"> question it's</font><font color="#E5E5E5"> always for it</font>

367
00:19:01,299 --> 00:19:06,639
always comes up for new network

368
00:19:03,129 --> 00:19:09,399
protocols so luckily in this case we can

369
00:19:06,639 --> 00:19:11,738
deploy for prints in islands so you can

370
00:19:09,399 --> 00:19:14,590
imagine that<font color="#E5E5E5"> let's say if a few asses</font>

371
00:19:11,739 --> 00:19:17,529
around the internet deployed then you

372
00:19:14,590 --> 00:19:20,590
the source could know on which segment

373
00:19:17,529 --> 00:19:22,769
between these aliases something bad may

374
00:19:20,590 --> 00:19:22,769
happen

