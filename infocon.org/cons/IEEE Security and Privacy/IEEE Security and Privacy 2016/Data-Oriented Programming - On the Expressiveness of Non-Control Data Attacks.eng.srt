1
00:00:00,000 --> 00:00:03,990
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> Huell from one National University</font>

2
00:00:01,740 --> 00:00:05,750
of Singapore and I<font color="#CCCCCC"> won't talk about the</font>

3
00:00:03,990 --> 00:00:07,649
dates are<font color="#CCCCCC"> inter</font><font color="#E5E5E5"> programming as a</font>

4
00:00:05,750 --> 00:00:11,129
expressiveness of an ankh into<font color="#E5E5E5"> the</font>

5
00:00:07,649 --> 00:00:16,680
attacks<font color="#E5E5E5"> so this is a John</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> go back</font><font color="#CCCCCC"> to</font>

6
00:00:11,130 --> 00:00:18,920
the<font color="#E5E5E5"> sorry can go back to the first</font><font color="#CCCCCC"> of</font>

7
00:00:16,680 --> 00:00:18,920
<font color="#CCCCCC">slides</font>

8
00:00:22,580 --> 00:00:27,959
<font color="#E5E5E5">okay I think</font><font color="#CCCCCC"> that just start from this</font>

9
00:00:25,949 --> 00:00:31,439
here<font color="#E5E5E5"> so this is John work we sweat our</font>

10
00:00:27,960 --> 00:00:33,469
<font color="#E5E5E5">urine children predict and Ching hai so</font>

11
00:00:31,439 --> 00:00:36,030
nowadays<font color="#CCCCCC"> contort eggs are getting</font><font color="#E5E5E5"> harder</font>

12
00:00:33,469 --> 00:00:38,190
<font color="#E5E5E5">so give it a venerable program with</font><font color="#CCCCCC"> a</font>

13
00:00:36,030 --> 00:00:39,690
memory error<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> choice</font><font color="#CCCCCC"> kin to</font>

14
00:00:38,190 --> 00:00:42,449
photograph and<font color="#CCCCCC"> a memory</font><font color="#E5E5E5"> space in this</font>

15
00:00:39,690 --> 00:00:44,699
<font color="#E5E5E5">way so originally attackers can</font><font color="#CCCCCC"> places</font>

16
00:00:42,450 --> 00:00:46,410
<font color="#E5E5E5">the malicious</font><font color="#CCCCCC"> code in data section and a</font>

17
00:00:44,700 --> 00:00:49,050
directory<font color="#CCCCCC"> jamot wait</font><font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is a</font>

18
00:00:46,410 --> 00:00:50,940
so-called code injection attack<font color="#E5E5E5"> but now</font>

19
00:00:49,050 --> 00:00:53,399
in the<font color="#E5E5E5"> system we have the data execution</font>

20
00:00:50,940 --> 00:00:56,129
prevention<font color="#E5E5E5"> and a choice to make</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> data</font>

21
00:00:53,399 --> 00:00:57,840
<font color="#E5E5E5">segment</font><font color="#CCCCCC"> not excludable so attackers</font>

22
00:00:56,129 --> 00:01:00,089
<font color="#E5E5E5">instead is not going to make the program</font>

23
00:00:57,840 --> 00:01:02,449
come<font color="#E5E5E5"> into code section to reuse existing</font>

24
00:01:00,090 --> 00:01:04,920
code to mount attacks for example<font color="#CCCCCC"> ISA</font>

25
00:01:02,449 --> 00:01:07,890
written to<font color="#CCCCCC"> Livesey attack and the return</font>

26
00:01:04,920 --> 00:01:08,400
to<font color="#E5E5E5"> the programming so to prevent such</font>

27
00:01:07,890 --> 00:01:09,869
attacks

28
00:01:08,400 --> 00:01:11,640
<font color="#E5E5E5">we searched the proposed controller</font>

29
00:01:09,869 --> 00:01:13,920
integrity that<font color="#E5E5E5"> I chose to block all</font>

30
00:01:11,640 --> 00:01:15,630
malicious can do flow transfers<font color="#E5E5E5"> so in</font>

31
00:01:13,920 --> 00:01:17,759
this way if a<font color="#CCCCCC"> taggers want to build</font>

32
00:01:15,630 --> 00:01:20,100
access<font color="#E5E5E5"> successful exploit</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> able to</font>

33
00:01:17,759 --> 00:01:22,530
bypass a safe<font color="#E5E5E5"> I know in the first place</font>

34
00:01:20,100 --> 00:01:25,020
<font color="#E5E5E5">but in your work we want</font><font color="#CCCCCC"> to understand</font>

35
00:01:22,530 --> 00:01:27,180
<font color="#E5E5E5">wanted to try a</font><font color="#CCCCCC"> new class</font><font color="#E5E5E5"> of attacks and</font>

36
00:01:25,020 --> 00:01:28,860
we assume<font color="#CCCCCC"> that a programs execution</font>

37
00:01:27,180 --> 00:01:30,840
totally conforms to control flow graph

38
00:01:28,860 --> 00:01:32,939
<font color="#E5E5E5">and we won't understand in this case</font>

39
00:01:30,840 --> 00:01:35,400
what is<font color="#E5E5E5"> that has capability giving an up</font>

40
00:01:32,939 --> 00:01:37,110
tree<font color="#CCCCCC"> one word program</font><font color="#E5E5E5"> so is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> true</font>

41
00:01:35,400 --> 00:01:38,640
attackers cannot do anything malicious

42
00:01:37,110 --> 00:01:40,710
or you can do some a specific

43
00:01:38,640 --> 00:01:42,299
computation<font color="#CCCCCC"> now even worse at else can</font>

44
00:01:40,710 --> 00:01:45,389
do anything<font color="#E5E5E5"> they want</font><font color="#CCCCCC"> even can complete</font>

45
00:01:42,299 --> 00:01:46,799
attacks so previous work show that at

46
00:01:45,390 --> 00:01:47,820
<font color="#CCCCCC">hangars at least can do something</font>

47
00:01:46,799 --> 00:01:50,880
specific

48
00:01:47,820 --> 00:01:52,679
using this<font color="#CCCCCC"> non-kin to data attacks so</font>

49
00:01:50,880 --> 00:01:54,990
with this attacks<font color="#CCCCCC"> attackers are going to</font>

50
00:01:52,680 --> 00:01:57,659
corrupt<font color="#E5E5E5"> or leak several bites of</font><font color="#CCCCCC"> this</font>

51
00:01:54,990 --> 00:01:59,820
security<font color="#E5E5E5"> critical data for example</font><font color="#CCCCCC"> in</font>

52
00:01:57,659 --> 00:02:01,680
this a vulnerable code<font color="#E5E5E5"> the school are</font>

53
00:01:59,820 --> 00:02:03,329
going<font color="#E5E5E5"> to temporarily</font><font color="#CCCCCC"> leave the</font><font color="#E5E5E5"> to the</font>

54
00:02:01,680 --> 00:02:05,189
<font color="#CCCCCC">privileged and</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> tank read back to</font>

55
00:02:03,329 --> 00:02:07,979
<font color="#CCCCCC">the normal</font><font color="#E5E5E5"> user privilege but if a</font>

56
00:02:05,189 --> 00:02:09,869
Tigers have the ability to crop this<font color="#CCCCCC"> PW</font>

57
00:02:07,979 --> 00:02:12,420
<font color="#CCCCCC">ID variable</font><font color="#E5E5E5"> you can keep the</font><font color="#CCCCCC"> root</font>

58
00:02:09,869 --> 00:02:14,460
<font color="#E5E5E5">privilege so similarly in the IE browser</font>

59
00:02:12,420 --> 00:02:16,980
if attackers can

60
00:02:14,460 --> 00:02:19,710
<font color="#E5E5E5">safe</font><font color="#CCCCCC"> mode flag you can silently load up</font>

61
00:02:16,980 --> 00:02:21,209
<font color="#CCCCCC">Shrieker into a process for execution</font><font color="#E5E5E5"> so</font>

62
00:02:19,710 --> 00:02:23,760
these are<font color="#E5E5E5"> text very severe to these</font>

63
00:02:21,210 --> 00:02:26,070
programs<font color="#CCCCCC"> but</font><font color="#E5E5E5"> there are very special</font>

64
00:02:23,760 --> 00:02:27,899
<font color="#E5E5E5">cases</font><font color="#CCCCCC"> and we rely on particular data our</font>

65
00:02:26,070 --> 00:02:31,170
functions to build its attack<font color="#E5E5E5"> for them</font>

66
00:02:27,900 --> 00:02:33,420
<font color="#CCCCCC">this user ID safe mode flag private key</font>

67
00:02:31,170 --> 00:02:35,010
for them poor to leak out some of the

68
00:02:33,420 --> 00:02:36,750
tags for them of the<font color="#CCCCCC"> control bonding</font>

69
00:02:35,010 --> 00:02:39,870
require<font color="#E5E5E5"> particular functions to build a</font>

70
00:02:36,750 --> 00:02:41,550
text like that printf so but what if the

71
00:02:39,870 --> 00:02:43,500
vulnerable program<font color="#E5E5E5"> doesn't have any</font>

72
00:02:41,550 --> 00:02:45,780
critical data<font color="#E5E5E5"> of functions like this and</font>

73
00:02:43,500 --> 00:02:48,060
in this case<font color="#CCCCCC"> what can't actors do</font>

74
00:02:45,780 --> 00:02:49,500
so next I'm<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> show</font><font color="#CCCCCC"> you that</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> an</font>

75
00:02:48,060 --> 00:02:50,310
<font color="#CCCCCC">on consider</font><font color="#E5E5E5"> that has can</font><font color="#CCCCCC"> be</font>

76
00:02:49,500 --> 00:02:52,650
<font color="#E5E5E5">turing-complete</font>

77
00:02:50,310 --> 00:02:54,660
and the way<font color="#E5E5E5"> proposed</font><font color="#CCCCCC"> our data into the</font>

78
00:02:52,650 --> 00:02:56,730
programming<font color="#E5E5E5"> as a general way to build</font>

79
00:02:54,660 --> 00:02:58,859
<font color="#CCCCCC">this</font><font color="#E5E5E5"> a expressive</font><font color="#CCCCCC"> non-kin to data</font>

80
00:02:56,730 --> 00:03:01,109
<font color="#E5E5E5">attacks and these</font><font color="#CCCCCC"> attacks are going</font><font color="#E5E5E5"> to</font>

81
00:02:58,860 --> 00:03:03,570
be our independent of any specific<font color="#CCCCCC"> data</font>

82
00:03:01,110 --> 00:03:05,730
<font color="#CCCCCC">our functions and the</font><font color="#E5E5E5"> width is the</font><font color="#CCCCCC"> dop</font>

83
00:03:03,570 --> 00:03:08,579
technique<font color="#E5E5E5"> we build</font><font color="#CCCCCC"> real-world</font><font color="#E5E5E5"> attacks to</font>

84
00:03:05,730 --> 00:03:10,590
show<font color="#E5E5E5"> that you can bypass SR without any</font>

85
00:03:08,580 --> 00:03:12,780
address leakage<font color="#E5E5E5"> you can simulate a</font>

86
00:03:10,590 --> 00:03:15,330
<font color="#E5E5E5">network board or</font><font color="#CCCCCC"> even can vocally</font>

87
00:03:12,780 --> 00:03:17,970
injection attacks<font color="#CCCCCC"> ok let's see</font><font color="#E5E5E5"> how this</font>

88
00:03:15,330 --> 00:03:19,920
is<font color="#E5E5E5"> doable so first of all let's check it</font>

89
00:03:17,970 --> 00:03:22,350
is a simple program this is<font color="#E5E5E5"> the server</font>

90
00:03:19,920 --> 00:03:24,420
program with<font color="#CCCCCC"> stack based before flow and</font>

91
00:03:22,350 --> 00:03:26,040
this<font color="#E5E5E5"> one doesn't have any critical</font>

92
00:03:24,420 --> 00:03:29,010
detail function here<font color="#E5E5E5"> but we won't</font>

93
00:03:26,040 --> 00:03:31,290
<font color="#E5E5E5">understand what context</font><font color="#CCCCCC"> to so</font><font color="#E5E5E5"> say a</font><font color="#CCCCCC"> text</font>

94
00:03:29,010 --> 00:03:33,510
can one want<font color="#CCCCCC"> to do this updated</font><font color="#E5E5E5"> list</font>

95
00:03:31,290 --> 00:03:33,959
<font color="#E5E5E5">this function so can they achieve this</font>

96
00:03:33,510 --> 00:03:36,149
scope

97
00:03:33,959 --> 00:03:38,010
so remember that we<font color="#CCCCCC"> want to guarantee</font>

98
00:03:36,150 --> 00:03:40,620
<font color="#E5E5E5">the execution totally conforms to</font>

99
00:03:38,010 --> 00:03:42,390
control flow graph<font color="#CCCCCC"> ok let's</font><font color="#E5E5E5"> check the</font>

100
00:03:40,620 --> 00:03:45,030
<font color="#E5E5E5">physical operation</font><font color="#CCCCCC"> the malicious</font>

101
00:03:42,390 --> 00:03:47,609
competition<font color="#E5E5E5"> our has so it has</font><font color="#CCCCCC"> our for</font>

102
00:03:45,030 --> 00:03:49,350
loop<font color="#E5E5E5"> and loop condition the memory</font>

103
00:03:47,610 --> 00:03:52,680
loading behavior and the addition

104
00:03:49,350 --> 00:03:54,239
operation so if we check the<font color="#E5E5E5"> vulnerable</font>

105
00:03:52,680 --> 00:03:57,270
program<font color="#E5E5E5"> actually you can</font><font color="#CCCCCC"> find the</font>

106
00:03:54,239 --> 00:03:59,760
<font color="#CCCCCC">similar competition</font><font color="#E5E5E5"> component loop loop</font>

107
00:03:57,270 --> 00:04:02,520
condition memory<font color="#CCCCCC"> Lorien behavior</font><font color="#E5E5E5"> and</font>

108
00:03:59,760 --> 00:04:04,380
there's<font color="#E5E5E5"> an addition operation so it</font>

109
00:04:02,520 --> 00:04:06,360
seems that we can use<font color="#CCCCCC"> these the</font>

110
00:04:04,380 --> 00:04:07,739
malicious<font color="#CCCCCC"> as this</font><font color="#E5E5E5"> vulnerable code to</font>

111
00:04:06,360 --> 00:04:11,280
similarly this a malicious<font color="#E5E5E5"> computation</font>

112
00:04:07,739 --> 00:04:13,019
<font color="#CCCCCC">actually it is I see how this is doable</font>

113
00:04:11,280 --> 00:04:15,840
we control the memory space in this way

114
00:04:13,019 --> 00:04:18,959
<font color="#E5E5E5">including the stack and the heap</font><font color="#CCCCCC"> so this</font>

115
00:04:15,840 --> 00:04:20,850
is a<font color="#CCCCCC"> legitimate memory memory layout</font><font color="#E5E5E5"> so</font>

116
00:04:18,959 --> 00:04:23,370
if we<font color="#CCCCCC"> execute</font><font color="#E5E5E5"> it is some vulnerable code</font>

117
00:04:20,850 --> 00:04:26,190
<font color="#E5E5E5">so this is why out here can be</font><font color="#CCCCCC"> used so</font>

118
00:04:23,370 --> 00:04:27,450
similar this for loop and I continually

119
00:04:26,190 --> 00:04:30,090
<font color="#E5E5E5">are we can</font>

120
00:04:27,450 --> 00:04:32,550
you can use the memory<font color="#E5E5E5"> error to corrupt</font>

121
00:04:30,090 --> 00:04:35,549
the memory the stack<font color="#E5E5E5"> in this particular</font>

122
00:04:32,550 --> 00:04:37,020
way and the next<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that this checking</font>

123
00:04:35,550 --> 00:04:39,090
is interesting<font color="#CCCCCC"> so the purpose</font><font color="#E5E5E5"> is</font>

124
00:04:37,020 --> 00:04:41,190
pointing to the list<font color="#E5E5E5"> of variable so this</font>

125
00:04:39,090 --> 00:04:43,349
one is actually<font color="#E5E5E5"> going to simulate this a</font>

126
00:04:41,190 --> 00:04:45,450
<font color="#CCCCCC">loop condition</font><font color="#E5E5E5"> in the malicious</font>

127
00:04:43,350 --> 00:04:48,780
computation<font color="#CCCCCC"> and we can make the program</font>

128
00:04:45,450 --> 00:04:50,490
go<font color="#E5E5E5"> to this</font><font color="#CCCCCC"> if branch</font><font color="#E5E5E5"> sorry sister else</font>

129
00:04:48,780 --> 00:04:52,409
branch of<font color="#E5E5E5"> this condition and</font><font color="#CCCCCC"> this</font>

130
00:04:50,490 --> 00:04:55,020
<font color="#CCCCCC">operation are giving to corrupt</font>

131
00:04:52,410 --> 00:04:57,240
SRV pointing to the<font color="#E5E5E5"> first object of this</font>

132
00:04:55,020 --> 00:05:00,180
linked list<font color="#CCCCCC"> and this addition here</font><font color="#E5E5E5"> is</font>

133
00:04:57,240 --> 00:05:02,820
<font color="#E5E5E5">interesting this one currently simulated</font>

134
00:05:00,180 --> 00:05:05,340
addition operation<font color="#E5E5E5"> is a he expected a</font>

135
00:05:02,820 --> 00:05:07,110
malicious<font color="#E5E5E5"> computation so next the</font>

136
00:05:05,340 --> 00:05:09,000
<font color="#E5E5E5">excusing will go to another</font><font color="#CCCCCC"> round of the</font>

137
00:05:07,110 --> 00:05:11,400
while loop<font color="#CCCCCC"> and I used the memory error</font>

138
00:05:09,000 --> 00:05:16,110
to crab the step in another way<font color="#E5E5E5"> and</font><font color="#CCCCCC"> this</font>

139
00:05:11,400 --> 00:05:17,640
<font color="#CCCCCC">time</font><font color="#E5E5E5"> we go to the branch so here this</font>

140
00:05:16,110 --> 00:05:20,130
memory loading<font color="#CCCCCC"> P here we are going</font><font color="#E5E5E5"> to</font>

141
00:05:17,640 --> 00:05:22,950
simulate this expected loading behavior

142
00:05:20,130 --> 00:05:25,440
in the for loop<font color="#CCCCCC"> ok so in this way we</font>

143
00:05:22,950 --> 00:05:27,090
show that with<font color="#CCCCCC"> properly input</font><font color="#E5E5E5"> we can</font><font color="#CCCCCC"> use</font>

144
00:05:25,440 --> 00:05:30,630
this a vulnerable program to<font color="#E5E5E5"> simulate</font>

145
00:05:27,090 --> 00:05:31,739
the malicious computation so this

146
00:05:30,630 --> 00:05:33,380
technique<font color="#E5E5E5"> is interesting and we</font>

147
00:05:31,740 --> 00:05:36,180
generalize this<font color="#CCCCCC"> technique and</font><font color="#E5E5E5"> propose a</font>

148
00:05:33,380 --> 00:05:38,490
deterrent to the programming so<font color="#CCCCCC"> that are</font>

149
00:05:36,180 --> 00:05:40,740
in the<font color="#CCCCCC"> program</font><font color="#E5E5E5"> is a general way to build</font>

150
00:05:38,490 --> 00:05:42,600
a data<font color="#CCCCCC"> build on Duncan to deter attacks</font>

151
00:05:40,740 --> 00:05:45,180
<font color="#E5E5E5">and these attacks are going to be</font>

152
00:05:42,600 --> 00:05:47,370
independent<font color="#CCCCCC"> of any specific</font><font color="#E5E5E5"> data or</font>

153
00:05:45,180 --> 00:05:50,460
functions<font color="#CCCCCC"> and this o</font><font color="#E5E5E5"> test can be very</font>

154
00:05:47,370 --> 00:05:52,800
<font color="#E5E5E5">expressive even</font><font color="#CCCCCC"> Turing complete and 2p</font>

155
00:05:50,460 --> 00:05:56,130
<font color="#CCCCCC">relies on two concepts</font><font color="#E5E5E5"> that it's</font><font color="#CCCCCC"> Araneta</font>

156
00:05:52,800 --> 00:05:57,840
<font color="#CCCCCC">gadgets</font><font color="#E5E5E5"> and Quechua dispatchers so theta</font>

157
00:05:56,130 --> 00:05:59,790
<font color="#E5E5E5">little</font><font color="#CCCCCC"> gadgets are just</font><font color="#E5E5E5"> exceeded six</font>

158
00:05:57,840 --> 00:06:02,549
<font color="#CCCCCC">instructions</font><font color="#E5E5E5"> it's quite a similar to the</font>

159
00:05:59,790 --> 00:06:03,690
<font color="#E5E5E5">LP gadget but differently are we require</font>

160
00:06:02,550 --> 00:06:05,670
them<font color="#E5E5E5"> to be showing in the normal</font>

161
00:06:03,690 --> 00:06:07,050
execution of the program so which<font color="#CCCCCC"> means</font>

162
00:06:05,670 --> 00:06:09,330
in<font color="#E5E5E5"> the CFG</font>

163
00:06:07,050 --> 00:06:11,670
for example in the previous code we have

164
00:06:09,330 --> 00:06:13,440
this addition gadget which is a long

165
00:06:11,670 --> 00:06:15,180
thing in<font color="#CCCCCC"> this</font><font color="#E5E5E5"> a CFG</font>

166
00:06:13,440 --> 00:06:16,920
but we can see in the<font color="#E5E5E5"> surf</font><font color="#CCCCCC"> G they also</font>

167
00:06:15,180 --> 00:06:20,730
there are also other computations in the

168
00:06:16,920 --> 00:06:22,860
<font color="#E5E5E5">middle so this these are unrelated</font><font color="#CCCCCC"> the</font>

169
00:06:20,730 --> 00:06:25,650
<font color="#CCCCCC">operation symmetric may overwrite the</font>

170
00:06:22,860 --> 00:06:27,530
result<font color="#E5E5E5"> so it requires that as a kgs are</font>

171
00:06:25,650 --> 00:06:30,030
going to receive the<font color="#E5E5E5"> result in memory</font>

172
00:06:27,530 --> 00:06:32,039
which means<font color="#E5E5E5"> this gadget are going to</font>

173
00:06:30,030 --> 00:06:33,989
load operand from memory to<font color="#CCCCCC"> the</font>

174
00:06:32,040 --> 00:06:36,690
operation<font color="#E5E5E5"> and then see</font><font color="#CCCCCC"> if the</font><font color="#E5E5E5"> result in</font>

175
00:06:33,990 --> 00:06:38,640
memory again so similarly we have<font color="#E5E5E5"> the</font>

176
00:06:36,690 --> 00:06:40,770
memory loading our gadget<font color="#CCCCCC"> in the</font>

177
00:06:38,640 --> 00:06:41,340
previous code<font color="#E5E5E5"> so to</font><font color="#CCCCCC"> pass data between</font>

178
00:06:40,770 --> 00:06:43,200
<font color="#E5E5E5">different</font>

179
00:06:41,340 --> 00:06:45,239
just<font color="#E5E5E5"> guarantee the memory right he</font>

180
00:06:43,200 --> 00:06:46,920
addressed in the previous gadget<font color="#E5E5E5"> are the</font>

181
00:06:45,240 --> 00:06:50,100
<font color="#E5E5E5">same with the memory read address in the</font>

182
00:06:46,920 --> 00:06:51,750
<font color="#E5E5E5">following gadget so once we have the kgs</font>

183
00:06:50,100 --> 00:06:53,250
<font color="#E5E5E5">we need to find a way to connect the</font>

184
00:06:51,750 --> 00:06:54,930
different kg that together<font color="#E5E5E5"> in a</font>

185
00:06:53,250 --> 00:06:56,760
<font color="#E5E5E5">particular order to appeal the</font>

186
00:06:54,930 --> 00:06:59,370
increasing attacks<font color="#E5E5E5"> so this is the</font>

187
00:06:56,760 --> 00:07:01,560
purpose<font color="#CCCCCC"> of a gadget</font><font color="#E5E5E5"> a dispatcher so</font>

188
00:06:59,370 --> 00:07:03,630
<font color="#CCCCCC">catchy dispatcher</font><font color="#E5E5E5"> are going to connect</font>

189
00:07:01,560 --> 00:07:06,120
<font color="#E5E5E5">detail</font><font color="#CCCCCC"> into kgs legitimate le</font><font color="#E5E5E5"> I</font>

190
00:07:03,630 --> 00:07:08,040
regarding to the control flow graph<font color="#CCCCCC"> so</font>

191
00:07:06,120 --> 00:07:10,530
it has two components<font color="#CCCCCC"> firstly has a loop</font>

192
00:07:08,040 --> 00:07:13,080
to<font color="#CCCCCC"> make the program execution</font><font color="#E5E5E5"> to to go</font>

193
00:07:10,530 --> 00:07:14,820
through the gadget repeatedly<font color="#E5E5E5"> and for</font>

194
00:07:13,080 --> 00:07:16,800
its run of the loop it's going<font color="#CCCCCC"> to use a</font>

195
00:07:14,820 --> 00:07:18,960
selector to selectively enable

196
00:07:16,800 --> 00:07:20,910
particular gadget for them<font color="#CCCCCC"> he</font><font color="#E5E5E5"> needs</font>

197
00:07:18,960 --> 00:07:22,260
concrete execution<font color="#CCCCCC"> the first around</font><font color="#E5E5E5"> I</font>

198
00:07:20,910 --> 00:07:23,970
was<font color="#CCCCCC"> excused we</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> going to go to one</font>

199
00:07:22,260 --> 00:07:26,250
pass and again<font color="#CCCCCC"> poke a cheetah 1 and a 3</font>

200
00:07:23,970 --> 00:07:29,130
so the next<font color="#CCCCCC"> around</font><font color="#E5E5E5"> would go to another</font>

201
00:07:26,250 --> 00:07:30,660
<font color="#E5E5E5">past 9:00 a.m. okay to the 6</font><font color="#CCCCCC"> &</font><font color="#E5E5E5"> 7</font><font color="#CCCCCC"> so the</font>

202
00:07:29,130 --> 00:07:32,280
third around<font color="#E5E5E5"> may</font><font color="#CCCCCC"> go through</font><font color="#E5E5E5"> the same</font>

203
00:07:30,660 --> 00:07:34,710
past<font color="#E5E5E5"> the first one part enable different</font>

204
00:07:32,280 --> 00:07:36,690
gadget<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> 4 so in this way</font>

205
00:07:34,710 --> 00:07:39,450
different gadget are connected with<font color="#E5E5E5"> this</font>

206
00:07:36,690 --> 00:07:42,420
<font color="#E5E5E5">particular order as a text won't so in</font>

207
00:07:39,450 --> 00:07:44,729
previous code we have this<font color="#E5E5E5"> well as as a</font>

208
00:07:42,420 --> 00:07:47,430
loop and as a memory<font color="#E5E5E5"> error is a selector</font>

209
00:07:44,730 --> 00:07:51,300
so once we have the<font color="#CCCCCC"> kth and selectors</font>

210
00:07:47,430 --> 00:07:53,700
<font color="#E5E5E5">the</font><font color="#CCCCCC"> 2p can emulate</font><font color="#E5E5E5"> a minimum language we</font>

211
00:07:51,300 --> 00:07:55,350
call<font color="#E5E5E5"> them in GOP so in our paper we I</font>

212
00:07:53,700 --> 00:07:57,780
will prove<font color="#E5E5E5"> that I mean</font><font color="#CCCCCC"> TP is that unit</font>

213
00:07:55,350 --> 00:07:59,910
<font color="#CCCCCC">committee language</font><font color="#E5E5E5"> so this means that if</font>

214
00:07:57,780 --> 00:08:02,159
we<font color="#E5E5E5"> can find enough cages and</font><font color="#CCCCCC"> dispatchers</font>

215
00:07:59,910 --> 00:08:05,040
<font color="#E5E5E5">from the one more program we can use TP</font>

216
00:08:02,160 --> 00:08:07,500
to build a turing-complete<font color="#E5E5E5"> attacks so</font>

217
00:08:05,040 --> 00:08:09,990
here are the<font color="#CCCCCC"> steps so we compare the</font>

218
00:08:07,500 --> 00:08:11,850
<font color="#E5E5E5">salt curry</font><font color="#CCCCCC"> in to</font><font color="#E5E5E5"> LV Mir and we do static</font>

219
00:08:09,990 --> 00:08:14,340
analysis and<font color="#E5E5E5"> IV manner to identify the</font>

220
00:08:11,850 --> 00:08:16,800
basic<font color="#E5E5E5"> element so</font><font color="#CCCCCC"> identify this the</font><font color="#E5E5E5"> load</font>

221
00:08:14,340 --> 00:08:20,340
the semantics<font color="#CCCCCC"> stall</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> operation chain</font>

222
00:08:16,800 --> 00:08:23,550
as the<font color="#E5E5E5"> gadget-gadget candidate and also</font>

223
00:08:20,340 --> 00:08:26,789
we identify the loops with<font color="#E5E5E5"> interesting</font>

224
00:08:23,550 --> 00:08:28,350
<font color="#CCCCCC">kgs as the dispatcher candidate and then</font>

225
00:08:26,790 --> 00:08:32,039
I will<font color="#CCCCCC"> consider</font><font color="#E5E5E5"> the concrete memory</font>

226
00:08:28,350 --> 00:08:34,200
error we<font color="#CCCCCC"> have and we manually select the</font>

227
00:08:32,039 --> 00:08:35,819
<font color="#CCCCCC">caches</font><font color="#E5E5E5"> and dispatchers to build attacks</font>

228
00:08:34,200 --> 00:08:38,130
<font color="#E5E5E5">so this part we planning to make it</font>

229
00:08:35,820 --> 00:08:40,230
automatic<font color="#E5E5E5"> so this is the general</font>

230
00:08:38,130 --> 00:08:42,330
technique to build attacks next I'm

231
00:08:40,230 --> 00:08:44,130
going to<font color="#CCCCCC"> show the evaluation to show</font>

232
00:08:42,330 --> 00:08:46,080
whether we can<font color="#CCCCCC"> fun</font><font color="#E5E5E5"> enough occasion</font>

233
00:08:44,130 --> 00:08:48,030
dispatchers from the program<font color="#E5E5E5"> and whether</font>

234
00:08:46,080 --> 00:08:51,210
we can build real attacks with this

235
00:08:48,030 --> 00:08:54,000
<font color="#E5E5E5">technique so</font><font color="#CCCCCC"> we apply this technique on</font>

236
00:08:51,210 --> 00:08:54,750
nine<font color="#E5E5E5"> programs including web servers file</font>

237
00:08:54,000 --> 00:08:56,880
servers

238
00:08:54,750 --> 00:08:58,650
kalana programs<font color="#E5E5E5"> and each of this program</font>

239
00:08:56,880 --> 00:09:01,740
has<font color="#CCCCCC"> the least the one vulnerability from</font>

240
00:08:58,650 --> 00:09:03,750
this<font color="#CCCCCC"> CVE database and from</font><font color="#E5E5E5"> these nine</font>

241
00:09:01,740 --> 00:09:05,850
<font color="#CCCCCC">programs</font><font color="#E5E5E5"> we identify</font><font color="#CCCCCC"> modern sub</font>

242
00:09:03,750 --> 00:09:07,710
installed<font color="#E5E5E5"> in engages and from the</font>

243
00:09:05,850 --> 00:09:10,470
concrete memory error<font color="#E5E5E5"> we can reach more</font>

244
00:09:07,710 --> 00:09:13,380
<font color="#CCCCCC">than 1,000 of them so it'll programs</font>

245
00:09:10,470 --> 00:09:16,610
have<font color="#CCCCCC"> enough kg to simulate all mean to</font>

246
00:09:13,380 --> 00:09:19,620
be operations so further<font color="#CCCCCC"> we identify</font>

247
00:09:16,610 --> 00:09:21,270
about<font color="#E5E5E5"> 1/2 thousand dispatchers from</font>

248
00:09:19,620 --> 00:09:24,690
these programs<font color="#E5E5E5"> and from the concrete</font>

249
00:09:21,270 --> 00:09:26,910
memory error we<font color="#CCCCCC"> can reach</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> 110</font>

250
00:09:24,690 --> 00:09:30,060
gadgets<font color="#E5E5E5"> so this means that the basic</font>

251
00:09:26,910 --> 00:09:32,280
elements of<font color="#E5E5E5"> the GOP</font><font color="#CCCCCC"> bonding</font><font color="#E5E5E5"> here award</font>

252
00:09:30,060 --> 00:09:34,020
programs so we confirm that<font color="#CCCCCC"> at</font><font color="#E5E5E5"> two</font>

253
00:09:32,280 --> 00:09:36,720
programs can be used to build<font color="#E5E5E5"> a</font>

254
00:09:34,020 --> 00:09:38,640
turing-complete attacks so with<font color="#E5E5E5"> this</font>

255
00:09:36,720 --> 00:09:40,920
gadget and<font color="#E5E5E5"> dispatchers with build of</font>

256
00:09:38,640 --> 00:09:42,740
three in a twin attacks<font color="#E5E5E5"> so next I'm</font>

257
00:09:40,920 --> 00:09:46,020
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> discuss</font><font color="#E5E5E5"> the details of these</font>

258
00:09:42,740 --> 00:09:47,610
attacks<font color="#E5E5E5"> so the first one we used to be</font>

259
00:09:46,020 --> 00:09:49,560
to bypass the randomization techniques

260
00:09:47,610 --> 00:09:51,300
<font color="#E5E5E5">so the previous</font><font color="#CCCCCC"> methods by</font>

261
00:09:49,560 --> 00:09:54,119
pasteurization<font color="#CCCCCC"> based</font><font color="#E5E5E5"> on the information</font>

262
00:09:51,300 --> 00:09:56,910
leakage to<font color="#E5E5E5"> network but what I'm going to</font>

263
00:09:54,120 --> 00:09:59,400
do is to bypass<font color="#CCCCCC"> SR without any leakage</font>

264
00:09:56,910 --> 00:10:01,530
to network and any address leakage to

265
00:09:59,400 --> 00:10:03,630
<font color="#E5E5E5">network so this attack is based on the</font>

266
00:10:01,530 --> 00:10:05,910
vulnerable<font color="#CCCCCC"> program DB D file server</font>

267
00:10:03,630 --> 00:10:07,770
so this<font color="#E5E5E5"> first server can use</font><font color="#CCCCCC"> open SSL</font>

268
00:10:05,910 --> 00:10:09,630
for<font color="#CCCCCC"> authentication</font><font color="#E5E5E5"> so in this case</font>

269
00:10:07,770 --> 00:10:11,490
<font color="#CCCCCC">they'll have a</font><font color="#E5E5E5"> diverse</font><font color="#CCCCCC"> change in the</font>

270
00:10:09,630 --> 00:10:13,110
program<font color="#E5E5E5"> so starting from the fixed</font>

271
00:10:11,490 --> 00:10:15,089
address they are going<font color="#E5E5E5"> to go through</font>

272
00:10:13,110 --> 00:10:17,460
<font color="#E5E5E5">several steps to reach this randomized</font><font color="#CCCCCC"> a</font>

273
00:10:15,089 --> 00:10:20,160
location<font color="#E5E5E5"> private key</font><font color="#CCCCCC"> so all these</font>

274
00:10:17,460 --> 00:10:22,950
variables<font color="#CCCCCC"> except the first one I started</font>

275
00:10:20,160 --> 00:10:25,829
<font color="#E5E5E5">randomly so with</font><font color="#CCCCCC"> OTP technique we</font>

276
00:10:22,950 --> 00:10:28,140
identify the<font color="#CCCCCC"> caches</font><font color="#E5E5E5"> and dispatchers from</font>

277
00:10:25,830 --> 00:10:30,390
the program<font color="#E5E5E5"> so including</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> move gadget</font>

278
00:10:28,140 --> 00:10:32,100
<font color="#CCCCCC">addition gadget</font><font color="#E5E5E5"> and the loading gadget</font>

279
00:10:30,390 --> 00:10:34,350
so<font color="#E5E5E5"> although I read</font><font color="#CCCCCC"> the value I</font><font color="#E5E5E5"> can talk</font>

280
00:10:32,100 --> 00:10:35,850
<font color="#CCCCCC">about hackers and the</font><font color="#E5E5E5"> XYZ</font><font color="#CCCCCC"> are fixed</font>

281
00:10:34,350 --> 00:10:39,420
values<font color="#E5E5E5"> so they are known</font><font color="#CCCCCC"> to attackers</font>

282
00:10:35,850 --> 00:10:41,430
before and this is<font color="#CCCCCC"> the pseudo code of</font>

283
00:10:39,420 --> 00:10:43,380
the dispatcher<font color="#E5E5E5"> so with the dispatcher</font>

284
00:10:41,430 --> 00:10:46,349
and gadgets we can we can achieve<font color="#E5E5E5"> this</font>

285
00:10:43,380 --> 00:10:48,089
<font color="#E5E5E5">very basic computation in this way so we</font>

286
00:10:46,350 --> 00:10:50,040
can abstract it under<font color="#CCCCCC"> describing in this</font>

287
00:10:48,089 --> 00:10:52,500
<font color="#E5E5E5">way so starting</font><font color="#CCCCCC"> from this a fixed</font>

288
00:10:50,040 --> 00:10:54,510
<font color="#E5E5E5">address we can find the object pointer</font>

289
00:10:52,500 --> 00:10:57,360
by this<font color="#E5E5E5"> value and the load of particular</font>

290
00:10:54,510 --> 00:11:00,089
field into the<font color="#E5E5E5"> fixed location so this is</font>

291
00:10:57,360 --> 00:11:02,100
doable<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> just use this with basic</font>

292
00:11:00,089 --> 00:11:03,810
operation and<font color="#E5E5E5"> foliage the diversity and</font>

293
00:11:02,100 --> 00:11:06,930
finally we can<font color="#E5E5E5"> load as a randomized</font>

294
00:11:03,810 --> 00:11:08,640
randomized address of the private key

295
00:11:06,930 --> 00:11:10,949
into<font color="#CCCCCC"> the into memory</font>

296
00:11:08,640 --> 00:11:13,439
<font color="#E5E5E5">into fix the location so next which</font><font color="#CCCCCC"> is a</font>

297
00:11:10,950 --> 00:11:16,260
fun of<font color="#CCCCCC"> the writing system</font><font color="#E5E5E5"> call and I use</font>

298
00:11:13,440 --> 00:11:17,430
the move gadget to corrupt as a<font color="#E5E5E5"> pointed</font>

299
00:11:16,260 --> 00:11:20,670
buffer used by right

300
00:11:17,430 --> 00:11:25,280
and then finally sorry kind of out of

301
00:11:20,670 --> 00:11:25,280
<font color="#E5E5E5">control</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> go back to the previous</font><font color="#CCCCCC"> one</font>

302
00:11:25,730 --> 00:11:31,470
hello<font color="#E5E5E5"> go to the previous slide</font>

303
00:11:28,560 --> 00:11:33,599
yeah great<font color="#CCCCCC"> okay so finally this</font><font color="#E5E5E5"> opponent</font>

304
00:11:31,470 --> 00:11:35,790
<font color="#CCCCCC">proffer</font><font color="#E5E5E5"> is corrupted by by the</font>

305
00:11:33,600 --> 00:11:37,650
randomizer<font color="#CCCCCC"> dry sob private key and</font><font color="#E5E5E5"> a</font>

306
00:11:35,790 --> 00:11:40,230
<font color="#E5E5E5">fundraiser</font><font color="#CCCCCC"> accounting</font><font color="#E5E5E5"> of private keys</font>

307
00:11:37,650 --> 00:11:42,750
send it out to<font color="#E5E5E5"> the network so he this</font>

308
00:11:40,230 --> 00:11:44,490
<font color="#E5E5E5">attack we didn't leak any randomized</font>

309
00:11:42,750 --> 00:11:46,410
address to the network<font color="#E5E5E5"> but we still</font>

310
00:11:44,490 --> 00:11:48,660
<font color="#E5E5E5">chief the tech and in this time the</font>

311
00:11:46,410 --> 00:11:51,870
program's execution<font color="#CCCCCC"> totally</font><font color="#E5E5E5"> confirm to</font>

312
00:11:48,660 --> 00:11:53,670
the control flow graph<font color="#CCCCCC"> so next I'm going</font>

313
00:11:51,870 --> 00:11:55,320
<font color="#CCCCCC">to</font><font color="#E5E5E5"> consider the programs that exist in</font>

314
00:11:53,670 --> 00:11:57,930
<font color="#E5E5E5">functionality to</font><font color="#CCCCCC"> purely events to the</font>

315
00:11:55,320 --> 00:11:59,790
attacks<font color="#E5E5E5"> so but first I wanna introduce</font>

316
00:11:57,930 --> 00:12:01,380
some background of the<font color="#E5E5E5"> yeah open</font>

317
00:11:59,790 --> 00:12:03,270
function<font color="#E5E5E5"> so this function is</font><font color="#CCCCCC"> the</font>

318
00:12:01,380 --> 00:12:06,150
interface<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the dynamic linking loader</font>

319
00:12:03,270 --> 00:12:08,010
<font color="#CCCCCC">and this one is used to load a library</font>

320
00:12:06,150 --> 00:12:10,709
dynamic library into memory space at a

321
00:12:08,010 --> 00:12:13,290
long time and this one can resolve

322
00:12:10,710 --> 00:12:14,910
symbols and pets program<font color="#E5E5E5"> due to the</font>

323
00:12:13,290 --> 00:12:16,020
relocation<font color="#CCCCCC"> so</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> Windows systems</font><font color="#E5E5E5"> you</font>

324
00:12:14,910 --> 00:12:18,630
<font color="#E5E5E5">have the loader library function</font>

325
00:12:16,020 --> 00:12:20,550
similarly so previous low cashews<font color="#CCCCCC"> that</font>

326
00:12:18,630 --> 00:12:23,880
is a<font color="#CCCCCC"> dynamic</font><font color="#E5E5E5"> loader can do a</font><font color="#CCCCCC"> pre</font>

327
00:12:20,550 --> 00:12:26,550
computation<font color="#CCCCCC"> if it can crop Lisa f5 file</font>

328
00:12:23,880 --> 00:12:28,350
<font color="#E5E5E5">so we notice that this</font><font color="#CCCCCC"> is also</font><font color="#E5E5E5"> same into</font>

329
00:12:26,550 --> 00:12:29,939
that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> open which</font><font color="#CCCCCC"> means if what</font>

330
00:12:28,350 --> 00:12:31,650
hackers<font color="#E5E5E5"> can crop is the e memory</font>

331
00:12:29,940 --> 00:12:33,780
structure of their open so they can

332
00:12:31,650 --> 00:12:35,760
<font color="#CCCCCC">perform arbitrary computation so this is</font>

333
00:12:33,780 --> 00:12:37,650
the general method<font color="#CCCCCC"> attackers</font><font color="#E5E5E5"> are going</font>

334
00:12:35,760 --> 00:12:40,470
to<font color="#E5E5E5"> cindy cimolestes a pillar into memory</font>

335
00:12:37,650 --> 00:12:43,050
space<font color="#E5E5E5"> corrupted is the</font><font color="#CCCCCC"> link list</font><font color="#E5E5E5"> and the</font>

336
00:12:40,470 --> 00:12:44,220
wait for the<font color="#CCCCCC"> dl open call so fundraise</font>

337
00:12:43,050 --> 00:12:46,260
<font color="#CCCCCC">at the urban core will do this</font>

338
00:12:44,220 --> 00:12:47,340
<font color="#CCCCCC">computation</font><font color="#E5E5E5"> for attackers but in real</font>

339
00:12:46,260 --> 00:12:49,590
<font color="#E5E5E5">world programs there are several</font>

340
00:12:47,340 --> 00:12:51,570
challenge here<font color="#E5E5E5"> so first the program</font><font color="#CCCCCC"> we</font>

341
00:12:49,590 --> 00:12:52,770
<font color="#E5E5E5">have a standardization code so something</font>

342
00:12:51,570 --> 00:12:55,170
he valued the code cannot<font color="#E5E5E5"> be directly</font>

343
00:12:52,770 --> 00:12:57,480
<font color="#E5E5E5">seen into memory space and there another</font>

344
00:12:55,170 --> 00:12:59,610
challenge is<font color="#E5E5E5"> the program doesn't call</font>

345
00:12:57,480 --> 00:13:01,650
the<font color="#E5E5E5"> open at all of this memory error so</font>

346
00:12:59,610 --> 00:13:03,870
even you can have this crops incorrectly

347
00:13:01,650 --> 00:13:05,790
<font color="#E5E5E5">but a program doesn't have the attack in</font>

348
00:13:03,870 --> 00:13:08,880
the<font color="#CCCCCC"> last step</font><font color="#E5E5E5"> so let's</font><font color="#CCCCCC"> see how the open</font>

349
00:13:05,790 --> 00:13:11,310
can help here sorry let's see how deep

350
00:13:08,880 --> 00:13:13,410
you can<font color="#E5E5E5"> help here</font><font color="#CCCCCC"> so first</font><font color="#E5E5E5"> we used to be</font>

351
00:13:11,310 --> 00:13:14,989
to construct<font color="#CCCCCC"> the</font><font color="#E5E5E5"> memory the malicious</font>

352
00:13:13,410 --> 00:13:17,490
<font color="#CCCCCC">payload in memory which means these</font>

353
00:13:14,990 --> 00:13:19,470
malicious<font color="#E5E5E5"> invalid the code already</font>

354
00:13:17,490 --> 00:13:21,360
<font color="#E5E5E5">inside of the memory space</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> just use</font>

355
00:13:19,470 --> 00:13:22,510
the<font color="#CCCCCC"> move</font><font color="#E5E5E5"> kgd to constructors of</font>

356
00:13:21,360 --> 00:13:25,200
malicious payload in

357
00:13:22,510 --> 00:13:28,990
to<font color="#E5E5E5"> bypass this and transition and then</font>

358
00:13:25,200 --> 00:13:30,850
and then we<font color="#CCCCCC"> fund a vlogging program to</font>

359
00:13:28,990 --> 00:13:32,740
decided to call the<font color="#CCCCCC"> open or</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> so we</font>

360
00:13:30,850 --> 00:13:34,750
used<font color="#E5E5E5"> to</font><font color="#CCCCCC"> p2 krub his flag and a foster</font>

361
00:13:32,740 --> 00:13:36,460
program<font color="#CCCCCC"> to</font><font color="#E5E5E5"> court the open and finally</font>

362
00:13:34,750 --> 00:13:40,030
<font color="#E5E5E5">this attack is launched with more</font><font color="#CCCCCC"> than</font>

363
00:13:36,460 --> 00:13:42,130
700 requested to the program so the<font color="#E5E5E5"> last</font>

364
00:13:40,030 --> 00:13:44,199
attack is<font color="#CCCCCC"> not</font><font color="#E5E5E5"> going to change the memory</font>

365
00:13:42,130 --> 00:13:45,970
permission<font color="#E5E5E5"> so this is even severe</font>

366
00:13:44,200 --> 00:13:47,710
because<font color="#E5E5E5"> we know many defense mechanisms</font>

367
00:13:45,970 --> 00:13:49,690
based on the memory information<font color="#E5E5E5"> for the</font>

368
00:13:47,710 --> 00:13:51,610
<font color="#CCCCCC">mo deep here acquire an unreadable</font><font color="#E5E5E5"> code</font>

369
00:13:49,690 --> 00:13:54,670
and a<font color="#CCCCCC"> summer implementation of CFR</font>

370
00:13:51,610 --> 00:13:56,020
requires the<font color="#CCCCCC"> read</font><font color="#E5E5E5"> only jump tables but</font>

371
00:13:54,670 --> 00:13:58,660
as<font color="#E5E5E5"> the existing functionality of the</font>

372
00:13:56,020 --> 00:14:00,400
open the relocation<font color="#E5E5E5"> our country can</font>

373
00:13:58,660 --> 00:14:02,439
change<font color="#E5E5E5"> the permission of any page and</font>

374
00:14:00,400 --> 00:14:04,840
the<font color="#CCCCCC"> path shade</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Chisolm back so we're</font>

375
00:14:02,440 --> 00:14:06,520
coming to<font color="#CCCCCC"> is TP is you can use TP</font><font color="#E5E5E5"> to</font>

376
00:14:04,840 --> 00:14:08,530
corrupt<font color="#E5E5E5"> these documents and global</font>

377
00:14:06,520 --> 00:14:10,090
<font color="#CCCCCC">variables used by the open and a</font><font color="#E5E5E5"> forced</font>

378
00:14:08,530 --> 00:14:13,000
<font color="#CCCCCC">the</font><font color="#E5E5E5"> open the register code in the code</font>

379
00:14:10,090 --> 00:14:16,090
page so in this way the<font color="#CCCCCC"> cooling expect</font>

380
00:14:13,000 --> 00:14:17,650
<font color="#CCCCCC">to attackers so this evaluation show</font>

381
00:14:16,090 --> 00:14:18,940
that<font color="#CCCCCC"> we can funny enough gadget and</font>

382
00:14:17,650 --> 00:14:21,130
<font color="#E5E5E5">dispatchers from more real-world</font>

383
00:14:18,940 --> 00:14:25,120
programs and we can build a real<font color="#E5E5E5"> see</font><font color="#CCCCCC"> the</font>

384
00:14:21,130 --> 00:14:26,410
attacks with<font color="#E5E5E5"> GOP so this is a one to</font>

385
00:14:25,120 --> 00:14:28,330
compare the<font color="#CCCCCC"> dupe here is the previous</font>

386
00:14:26,410 --> 00:14:30,850
<font color="#E5E5E5">original work regarding what is that you</font>

387
00:14:28,330 --> 00:14:32,860
complete<font color="#E5E5E5"> whether they can prism certify</font>

388
00:14:30,850 --> 00:14:34,600
and whether they are<font color="#CCCCCC"> independent I was</font>

389
00:14:32,860 --> 00:14:36,460
<font color="#CCCCCC">the best vehicle functional data so</font>

390
00:14:34,600 --> 00:14:38,380
<font color="#E5E5E5">altering complete is the the technique</font>

391
00:14:36,460 --> 00:14:40,360
<font color="#E5E5E5">that can</font><font color="#CCCCCC"> achieve the same all the goals</font>

392
00:14:38,380 --> 00:14:41,410
at the<font color="#CCCCCC"> same time</font><font color="#E5E5E5"> so one of the religion</font>

393
00:14:40,360 --> 00:14:42,970
<font color="#E5E5E5">works</font><font color="#CCCCCC"> that are print or</font><font color="#E5E5E5"> inter</font>

394
00:14:41,410 --> 00:14:44,740
programming which is disgusting<font color="#CCCCCC"> is the</font>

395
00:14:42,970 --> 00:14:45,850
<font color="#CCCCCC">controller Bunyan work</font><font color="#E5E5E5"> this one is also</font>

396
00:14:44,740 --> 00:14:47,680
a turing-complete

397
00:14:45,850 --> 00:14:49,390
<font color="#E5E5E5">non concluded thank you to the attack</font>

398
00:14:47,680 --> 00:14:51,430
but<font color="#E5E5E5"> this one</font><font color="#CCCCCC"> requires</font><font color="#E5E5E5"> is a particular</font>

399
00:14:49,390 --> 00:14:53,170
function printf<font color="#E5E5E5"> and also is a personal</font>

400
00:14:51,430 --> 00:14:57,219
option to be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> build attacks and</font>

401
00:14:53,170 --> 00:14:59,410
<font color="#E5E5E5">TP is a general technique okay that</font>

402
00:14:57,220 --> 00:15:02,110
could<font color="#CCCCCC"> be several potential defense</font>

403
00:14:59,410 --> 00:15:05,260
<font color="#CCCCCC">mechanisms</font><font color="#E5E5E5"> to prevent a dupe attack and</font>

404
00:15:02,110 --> 00:15:08,140
it could be memory safety<font color="#E5E5E5"> and</font><font color="#CCCCCC"> dfi</font><font color="#E5E5E5"> but</font>

405
00:15:05,260 --> 00:15:10,420
due<font color="#CCCCCC"> to this overhead all the</font>

406
00:15:08,140 --> 00:15:13,030
completeness of<font color="#CCCCCC"> this differs</font><font color="#E5E5E5"> there's no</font>

407
00:15:10,420 --> 00:15:16,089
practical defense yet<font color="#CCCCCC"> I can't disguise</font>

408
00:15:13,030 --> 00:15:18,640
<font color="#E5E5E5">east of life you are interested</font><font color="#CCCCCC"> so in</font>

409
00:15:16,090 --> 00:15:20,350
summary we<font color="#CCCCCC"> probably</font><font color="#E5E5E5"> true that</font><font color="#CCCCCC"> non</font>

410
00:15:18,640 --> 00:15:22,540
consider the test can be<font color="#CCCCCC"> Turing</font><font color="#E5E5E5"> complete</font>

411
00:15:20,350 --> 00:15:24,220
and we<font color="#CCCCCC"> propose a date Sorrentino</font>

412
00:15:22,540 --> 00:15:26,530
<font color="#E5E5E5">programming as a general way to build</font>

413
00:15:24,220 --> 00:15:28,570
expressive non-candidate attacks and

414
00:15:26,530 --> 00:15:31,180
these<font color="#CCCCCC"> attacks are independent of any</font>

415
00:15:28,570 --> 00:15:33,400
<font color="#E5E5E5">specific data are functions and we used</font>

416
00:15:31,180 --> 00:15:35,550
<font color="#E5E5E5">to</font><font color="#CCCCCC"> pew to build real attacks that</font><font color="#E5E5E5"> can</font>

417
00:15:33,400 --> 00:15:37,740
bypass<font color="#CCCCCC"> SR without any address</font>

418
00:15:35,550 --> 00:15:39,479
<font color="#E5E5E5">which can</font><font color="#CCCCCC"> stimulate a network aboard or</font>

419
00:15:37,740 --> 00:15:41,519
<font color="#E5E5E5">even</font><font color="#CCCCCC"> cable coding Jersey attacks</font>

420
00:15:39,480 --> 00:15:42,660
<font color="#CCCCCC">okay that's</font><font color="#E5E5E5"> all for my talk and if I</font>

421
00:15:41,519 --> 00:15:45,180
<font color="#E5E5E5">interested you can find</font><font color="#CCCCCC"> more information</font>

422
00:15:42,660 --> 00:15:47,390
<font color="#CCCCCC">follow these links thank you I'm</font><font color="#E5E5E5"> ready</font>

423
00:15:45,180 --> 00:15:47,390
<font color="#E5E5E5">for questions</font>

424
00:15:52,589 --> 00:15:59,040
hi<font color="#CCCCCC"> Patrick Doolin MIT Lincoln lab I just</font>

425
00:15:56,519 --> 00:16:01,860
<font color="#E5E5E5">wanted to ask a couple questions kind</font><font color="#CCCCCC"> of</font>

426
00:15:59,040 --> 00:16:05,099
about future work<font color="#E5E5E5"> first of</font><font color="#CCCCCC"> all do you do</font>

427
00:16:01,860 --> 00:16:07,410
you think<font color="#CCCCCC"> that the dispatcher idiom is</font>

428
00:16:05,100 --> 00:16:11,370
is necessary like if there a way you can

429
00:16:07,410 --> 00:16:13,560
imagine<font color="#E5E5E5"> sort of selectively enabling</font>

430
00:16:11,370 --> 00:16:15,959
gadgets as the program continues<font color="#CCCCCC"> to</font>

431
00:16:13,560 --> 00:16:18,060
execute<font color="#CCCCCC"> without having an explicit</font>

432
00:16:15,959 --> 00:16:19,469
control<font color="#E5E5E5"> flow loop I like I realize I</font>

433
00:16:18,060 --> 00:16:20,550
would<font color="#E5E5E5"> probably be pretty complicated but</font>

434
00:16:19,470 --> 00:16:22,890
did you look at<font color="#E5E5E5"> that at all</font>

435
00:16:20,550 --> 00:16:24,660
so<font color="#E5E5E5"> I mean whether the dispatcher is</font>

436
00:16:22,890 --> 00:16:26,490
necessary<font color="#E5E5E5"> or</font><font color="#CCCCCC"> an alternate</font><font color="#E5E5E5"> yeah like like</font>

437
00:16:24,660 --> 00:16:29,040
whether you can<font color="#E5E5E5"> kind of just look at the</font>

438
00:16:26,490 --> 00:16:30,660
<font color="#CCCCCC">program's continuing execution after a</font>

439
00:16:29,040 --> 00:16:32,819
memory corruption view that as a

440
00:16:30,660 --> 00:16:36,089
sequence of gadgets<font color="#E5E5E5"> and then figure</font><font color="#CCCCCC"> out</font>

441
00:16:32,820 --> 00:16:37,800
some way to stitch those together<font color="#E5E5E5"> so the</font>

442
00:16:36,089 --> 00:16:39,690
technique is necessary because the<font color="#E5E5E5"> data</font>

443
00:16:37,800 --> 00:16:41,849
<font color="#CCCCCC">tag</font><font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> have any way</font><font color="#E5E5E5"> to change the</font>

444
00:16:39,690 --> 00:16:43,050
control flow<font color="#E5E5E5"> so if you want to connect a</font>

445
00:16:41,850 --> 00:16:46,320
mortgage<font color="#CCCCCC"> either to build a meaningful</font>

446
00:16:43,050 --> 00:16:48,300
attack so<font color="#E5E5E5"> that the dispatcher is is a</font>

447
00:16:46,320 --> 00:16:50,550
useful<font color="#E5E5E5"> technique so in the future if you</font>

448
00:16:48,300 --> 00:16:52,469
if you if<font color="#E5E5E5"> you can find enough akechi</font>

449
00:16:50,550 --> 00:16:53,790
that<font color="#CCCCCC"> within</font><font color="#E5E5E5"> one i'm switching parts so</font>

450
00:16:52,470 --> 00:16:55,740
<font color="#CCCCCC">that is enough to build a tagger then</font>

451
00:16:53,790 --> 00:16:58,290
you don't<font color="#E5E5E5"> need a dispatcher but if you</font>

452
00:16:55,740 --> 00:17:00,360
have you<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to have more more</font>

453
00:16:58,290 --> 00:17:02,849
functionality if you'd better have a

454
00:17:00,360 --> 00:17:05,309
dispatcher<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> this is my opinion okay</font>

455
00:17:02,850 --> 00:17:08,699
<font color="#CCCCCC">the the other</font><font color="#E5E5E5"> other question I</font><font color="#CCCCCC"> wanted to</font>

456
00:17:05,309 --> 00:17:10,889
ask was<font color="#E5E5E5"> okay do you have you said in the</font>

457
00:17:08,699 --> 00:17:12,480
paper that<font color="#E5E5E5"> there were that there were</font>

458
00:17:10,890 --> 00:17:14,520
only<font color="#E5E5E5"> two</font><font color="#CCCCCC"> out of the eight</font><font color="#E5E5E5"> programs could</font>

459
00:17:12,480 --> 00:17:16,679
have<font color="#E5E5E5"> turing-complete computation do you</font>

460
00:17:14,520 --> 00:17:18,809
have any intuition about why those the

461
00:17:16,679 --> 00:17:20,370
other<font color="#E5E5E5"> six didn't and and whether like</font>

462
00:17:18,809 --> 00:17:21,510
the attack could<font color="#CCCCCC"> be extended</font><font color="#E5E5E5"> or is that</font>

463
00:17:20,369 --> 00:17:22,918
<font color="#CCCCCC">just kind</font><font color="#E5E5E5"> of a function of the</font>

464
00:17:21,510 --> 00:17:25,490
vulnerabilities themselves that<font color="#E5E5E5"> you were</font>

465
00:17:22,919 --> 00:17:29,790
looking<font color="#E5E5E5"> at sorry why</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> referring to</font>

466
00:17:25,490 --> 00:17:32,300
<font color="#E5E5E5">waste paper in your paper in</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> paper</font>

467
00:17:29,790 --> 00:17:35,428
<font color="#E5E5E5">it was how question can I repeat again</font>

468
00:17:32,300 --> 00:17:37,110
you said there were I<font color="#E5E5E5"> think</font><font color="#CCCCCC"> it was</font><font color="#E5E5E5"> and</font>

469
00:17:35,429 --> 00:17:39,720
correct me if I'm<font color="#CCCCCC"> wrong but I think it</font>

470
00:17:37,110 --> 00:17:43,860
was<font color="#E5E5E5"> you said there were only two out of</font>

471
00:17:39,720 --> 00:17:45,540
the<font color="#E5E5E5"> eight program had</font><font color="#CCCCCC"> turned ability</font>

472
00:17:43,860 --> 00:17:47,699
yeah I'm<font color="#E5E5E5"> do</font><font color="#CCCCCC"> have a sense for why that</font>

473
00:17:45,540 --> 00:17:48,360
was<font color="#E5E5E5"> and if your techniques extensible</font><font color="#CCCCCC"> to</font>

474
00:17:47,700 --> 00:17:49,799
make

475
00:17:48,360 --> 00:17:54,540
<font color="#CCCCCC">or</font><font color="#E5E5E5"> things during complete or is that</font>

476
00:17:49,799 --> 00:17:56,460
just a function as okay<font color="#CCCCCC"> so a question is</font>

477
00:17:54,540 --> 00:17:58,320
why there are<font color="#CCCCCC"> only two programs have to</font>

478
00:17:56,460 --> 00:17:59,850
complete an<font color="#E5E5E5"> ace right yeah so actually</font>

479
00:17:58,320 --> 00:18:01,500
this<font color="#E5E5E5"> is technically based on the program</font>

480
00:17:59,850 --> 00:18:03,540
so if you can find<font color="#E5E5E5"> an</font><font color="#CCCCCC"> application from a</font>

481
00:18:01,500 --> 00:18:05,010
program<font color="#E5E5E5"> funding application dispatcher</font>

482
00:18:03,540 --> 00:18:07,678
from<font color="#E5E5E5"> the program actually</font><font color="#CCCCCC"> you can build</font>

483
00:18:05,010 --> 00:18:08,940
a turing-complete attacks<font color="#E5E5E5"> but</font><font color="#CCCCCC"> uh but</font>

484
00:18:07,679 --> 00:18:10,890
<font color="#E5E5E5">depending on the size of the program</font>

485
00:18:08,940 --> 00:18:13,110
<font color="#CCCCCC">actually some program is quite</font><font color="#E5E5E5"> as small</font>

486
00:18:10,890 --> 00:18:14,670
<font color="#E5E5E5">if you if you can check out paper</font><font color="#CCCCCC"> so we</font>

487
00:18:13,110 --> 00:18:15,990
<font color="#CCCCCC">can out of</font><font color="#E5E5E5"> fun enough gadget and these</font>

488
00:18:14,670 --> 00:18:17,610
<font color="#E5E5E5">passers so we</font><font color="#CCCCCC"> can all build it in</font>

489
00:18:15,990 --> 00:18:20,429
<font color="#CCCCCC">complete attacks</font><font color="#E5E5E5"> I think this is quite</font>

490
00:18:17,610 --> 00:18:23,100
related<font color="#E5E5E5"> what is similar to</font><font color="#CCCCCC"> our peer text</font>

491
00:18:20,429 --> 00:18:24,390
depend on the program<font color="#CCCCCC"> okay thanks I just</font>

492
00:18:23,100 --> 00:18:26,010
want to say this is really really<font color="#E5E5E5"> cool</font>

493
00:18:24,390 --> 00:18:28,020
work and I'm<font color="#E5E5E5"> really excited about it</font>

494
00:18:26,010 --> 00:18:30,540
thanks<font color="#E5E5E5"> thank you</font>

495
00:18:28,020 --> 00:18:32,340
<font color="#CCCCCC">dozen holes from who our university go</font>

496
00:18:30,540 --> 00:18:34,770
home<font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean so if I understand correctly</font>

497
00:18:32,340 --> 00:18:36,480
<font color="#E5E5E5">the turing completeness relies on the</font>

498
00:18:34,770 --> 00:18:38,580
fact that the elf loader is<font color="#CCCCCC"> turing</font>

499
00:18:36,480 --> 00:18:41,850
<font color="#CCCCCC">complete so the weird machine by the elf</font>

500
00:18:38,580 --> 00:18:43,970
loader<font color="#CCCCCC"> so just this or how would doin</font>

501
00:18:41,850 --> 00:18:47,189
completeness be achievable<font color="#CCCCCC"> on</font><font color="#E5E5E5"> windows</font>

502
00:18:43,970 --> 00:18:50,580
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so so first of the</font><font color="#CCCCCC"> color</font><font color="#E5E5E5"> Friday's</font>

503
00:18:47,190 --> 00:18:51,870
one<font color="#CCCCCC"> hour</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> to be done rely on any</font><font color="#E5E5E5"> alpha</font>

504
00:18:50,580 --> 00:18:54,210
<font color="#CCCCCC">does</font><font color="#E5E5E5"> rely on these to build it to</font>

505
00:18:51,870 --> 00:18:56,370
<font color="#CCCCCC">compute</font><font color="#E5E5E5"> attacks so just as a</font><font color="#CCCCCC"> lasted two</font>

506
00:18:54,210 --> 00:18:59,730
technique<font color="#CCCCCC"> luster to</font><font color="#E5E5E5"> concrete attacks</font>

507
00:18:56,370 --> 00:19:00,959
<font color="#CCCCCC">they rely on</font><font color="#E5E5E5"> this to peer attacks so and</font>

508
00:18:59,730 --> 00:19:03,240
windows<font color="#CCCCCC"> are</font><font color="#E5E5E5"> things they have similar</font>

509
00:19:00,960 --> 00:19:04,710
attacking similar function<font color="#CCCCCC"> estimation</font><font color="#E5E5E5"> of</font>

510
00:19:03,240 --> 00:19:05,490
<font color="#E5E5E5">the loader loader library but I didn't</font>

511
00:19:04,710 --> 00:19:08,850
check<font color="#CCCCCC"> out whether</font><font color="#E5E5E5"> they have this</font>

512
00:19:05,490 --> 00:19:11,220
functionality or not so<font color="#E5E5E5"> that so I</font><font color="#CCCCCC"> tell</font>

513
00:19:08,850 --> 00:19:13,260
<font color="#E5E5E5">means</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> last two tech the</font><font color="#E5E5E5"> last</font>

514
00:19:11,220 --> 00:19:15,270
<font color="#E5E5E5">two attack maybe not possible on Windows</font>

515
00:19:13,260 --> 00:19:18,710
<font color="#CCCCCC">but I'm not</font><font color="#E5E5E5"> sure yet</font><font color="#CCCCCC"> I will check it and</font>

516
00:19:15,270 --> 00:19:22,049
<font color="#CCCCCC">let you</font><font color="#E5E5E5"> know thank you Pavlov ski</font>

517
00:19:18,710 --> 00:19:24,360
<font color="#E5E5E5">university bow home in your first attack</font>

518
00:19:22,049 --> 00:19:27,960
you say you don't need<font color="#E5E5E5"> an information</font>

519
00:19:24,360 --> 00:19:29,639
leak to bypass a terrible<font color="#E5E5E5"> yes but you</font>

520
00:19:27,960 --> 00:19:31,980
say you have an<font color="#CCCCCC"> address a fixed address</font>

521
00:19:29,640 --> 00:19:33,690
where does this address come from

522
00:19:31,980 --> 00:19:35,580
<font color="#E5E5E5">without any</font><font color="#CCCCCC"> information leak when you</font>

523
00:19:33,690 --> 00:19:38,880
have a<font color="#CCCCCC"> Solara</font><font color="#E5E5E5"> okay great</font>

524
00:19:35,580 --> 00:19:41,540
so the first<font color="#E5E5E5"> a fixed address is uh it's</font>

525
00:19:38,880 --> 00:19:44,340
known to us<font color="#CCCCCC"> because</font><font color="#E5E5E5"> he saw inside is a</font>

526
00:19:41,540 --> 00:19:46,649
<font color="#CCCCCC">global data section</font><font color="#E5E5E5"> that is fixed</font><font color="#CCCCCC"> I mean</font>

527
00:19:44,340 --> 00:19:48,750
if the program is not<font color="#E5E5E5"> compared with the</font>

528
00:19:46,650 --> 00:19:51,120
p IE option that we always<font color="#E5E5E5"> loaded to</font>

529
00:19:48,750 --> 00:19:52,679
this<font color="#CCCCCC"> a fixed location</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> just starting</font>

530
00:19:51,120 --> 00:19:54,299
<font color="#E5E5E5">from</font><font color="#CCCCCC"> this hooks fix the location and the</font>

531
00:19:52,679 --> 00:19:56,070
reference is<font color="#CCCCCC"> to randomize the location</font>

532
00:19:54,299 --> 00:19:59,070
seven times<font color="#E5E5E5"> and we can finally carry</font>

533
00:19:56,070 --> 00:20:00,530
this<font color="#E5E5E5"> randomized the value so the most</font>

534
00:19:59,070 --> 00:20:02,419
important part<font color="#CCCCCC"> to</font><font color="#E5E5E5"> say</font>

535
00:20:00,530 --> 00:20:04,879
<font color="#E5E5E5">all the</font><font color="#CCCCCC"> competitions are</font><font color="#E5E5E5"> within the</font>

536
00:20:02,420 --> 00:20:10,090
memory<font color="#E5E5E5"> of this server program</font><font color="#CCCCCC"> we never</font>

537
00:20:04,880 --> 00:20:10,090
<font color="#E5E5E5">leave them out right okay</font>

