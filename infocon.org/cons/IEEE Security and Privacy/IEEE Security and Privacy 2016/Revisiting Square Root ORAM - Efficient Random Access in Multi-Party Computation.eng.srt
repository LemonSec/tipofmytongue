1
00:00:03,610 --> 00:00:10,150
so yeah this one's about a random access

2
00:00:06,340 --> 00:00:12,160
in multi-party computation now MPC in

3
00:00:10,150 --> 00:00:14,740
general has been doing fairly well over

4
00:00:12,160 --> 00:00:17,530
the last decade<font color="#E5E5E5"> and a half lots of</font>

5
00:00:14,740 --> 00:00:20,290
applications have taken off we have

6
00:00:17,530 --> 00:00:25,270
applications in bioinformatics and data

7
00:00:20,290 --> 00:00:28,869
and data analytics and whatnot which is

8
00:00:25,270 --> 00:00:30,009
great however<font color="#E5E5E5"> if you look at so all</font>

9
00:00:28,870 --> 00:00:31,780
these<font color="#E5E5E5"> are these are applications where</font>

10
00:00:30,010 --> 00:00:33,460
you have two or<font color="#E5E5E5"> more parties and they</font>

11
00:00:31,780 --> 00:00:35,860
have their own private data they want to

12
00:00:33,460 --> 00:00:37,690
do some computation which combines<font color="#E5E5E5"> their</font>

13
00:00:35,860 --> 00:00:39,310
prob what about combines data from<font color="#E5E5E5"> both</font>

14
00:00:37,690 --> 00:00:40,839
parties but they don't<font color="#E5E5E5"> want to reveal</font>

15
00:00:39,310 --> 00:00:42,190
anything other than<font color="#CCCCCC"> the final output</font>

16
00:00:40,840 --> 00:00:43,329
they don't<font color="#E5E5E5"> want to reveal any</font>

17
00:00:42,190 --> 00:00:45,760
intermediate results they don't want to

18
00:00:43,329 --> 00:00:48,730
reveal their inputs to each other which

19
00:00:45,760 --> 00:00:52,410
<font color="#CCCCCC">is great but if you look at the slide</font>

20
00:00:48,730 --> 00:00:54,879
here each application is basically a new

21
00:00:52,410 --> 00:00:56,230
you need<font color="#E5E5E5"> lots of smart people to spend a</font>

22
00:00:54,880 --> 00:00:58,420
lot of time coming up with me

23
00:00:56,230 --> 00:01:01,629
optimizations before each of<font color="#CCCCCC"> these</font>

24
00:00:58,420 --> 00:01:03,969
applications become practical this is

25
00:01:01,630 --> 00:01:08,409
great<font color="#E5E5E5"> we like new papers but it needs to</font>

26
00:01:03,969 --> 00:01:10,570
<font color="#E5E5E5">be easier so it would be nice if generic</font>

27
00:01:08,409 --> 00:01:12,460
methods of developing<font color="#CCCCCC"> the these concerts</font>

28
00:01:10,570 --> 00:01:15,548
<font color="#E5E5E5">of</font><font color="#CCCCCC"> MPC</font><font color="#E5E5E5"> applications were actually</font>

29
00:01:12,460 --> 00:01:17,798
practical now if you ask<font color="#E5E5E5"> anyone who's</font>

30
00:01:15,549 --> 00:01:19,450
ever written embassy applications the

31
00:01:17,799 --> 00:01:21,670
first thing they'll tell you that's

32
00:01:19,450 --> 00:01:23,860
really<font color="#CCCCCC"> a nagging problem when you write</font>

33
00:01:21,670 --> 00:01:25,780
NBC applications is that random access

34
00:01:23,860 --> 00:01:27,790
is a problem so let's say<font color="#CCCCCC"> you have a</font>

35
00:01:25,780 --> 00:01:29,049
program and somewhere<font color="#CCCCCC"> Ellen lying you</font>

36
00:01:27,790 --> 00:01:32,409
<font color="#E5E5E5">make an access you need to access</font>

37
00:01:29,049 --> 00:01:35,619
element<font color="#E5E5E5"> 5 now the data themselves can be</font>

38
00:01:32,409 --> 00:01:37,060
encrypted all you want but both parties

39
00:01:35,619 --> 00:01:40,750
will<font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to see you're accessing</font>

40
00:01:37,060 --> 00:01:42,159
element 5 and if<font color="#E5E5E5"> that five somehow it</font>

41
00:01:40,750 --> 00:01:44,770
depends on the secret<font color="#E5E5E5"> data that you</font>

42
00:01:42,159 --> 00:01:45,909
didn't want to<font color="#E5E5E5"> reveal if that that's an</font>

43
00:01:44,770 --> 00:01:48,490
intermediate result that you<font color="#CCCCCC"> were</font>

44
00:01:45,909 --> 00:01:50,409
viewing so we don't<font color="#CCCCCC"> want to do that now</font>

45
00:01:48,490 --> 00:01:52,479
<font color="#E5E5E5">you could incur you being able to hide</font>

46
00:01:50,409 --> 00:01:54,159
everything by accessing every single

47
00:01:52,479 --> 00:01:57,070
element<font color="#E5E5E5"> to hide which one you're really</font>

48
00:01:54,159 --> 00:01:59,590
interested in but in that case you<font color="#CCCCCC"> just</font>

49
00:01:57,070 --> 00:02:01,479
made a<font color="#CCCCCC"> ban</font><font color="#E5E5E5"> and one array access a linear</font>

50
00:01:59,590 --> 00:02:04,750
time operation that's the linear scan

51
00:02:01,479 --> 00:02:05,950
that will completely make most under non

52
00:02:04,750 --> 00:02:08,079
trivial algorithm is completely

53
00:02:05,950 --> 00:02:10,149
unscalable we<font color="#E5E5E5"> don't want to do that the</font>

54
00:02:08,079 --> 00:02:11,950
other approach as the other<font color="#E5E5E5"> speakers</font>

55
00:02:10,149 --> 00:02:14,140
have spoken so far to talk to him so far

56
00:02:11,950 --> 00:02:15,760
is oblivious<font color="#CCCCCC"> Ram here the idea is that</font>

57
00:02:14,140 --> 00:02:16,809
you<font color="#E5E5E5"> take a few elements you keep</font>

58
00:02:15,760 --> 00:02:19,390
shuffling them<font color="#CCCCCC"> all</font>

59
00:02:16,810 --> 00:02:20,800
time with every single<font color="#E5E5E5"> axis so that when</font>

60
00:02:19,390 --> 00:02:22,238
you actually do reveal which element

61
00:02:20,800 --> 00:02:24,970
<font color="#E5E5E5">you're accessing their physical location</font>

62
00:02:22,239 --> 00:02:26,680
will not reveal the logical identity so

63
00:02:24,970 --> 00:02:30,190
that works too they give you accessing

64
00:02:26,680 --> 00:02:32,830
poly logarithmic time if you go through

65
00:02:30,190 --> 00:02:34,090
<font color="#E5E5E5">the literature one of one of the Quran</font>

66
00:02:32,830 --> 00:02:36,580
constructions that will be<font color="#E5E5E5"> comparing</font>

67
00:02:34,090 --> 00:02:39,670
against all the time is the circuit

68
00:02:36,580 --> 00:02:45,340
diagram paper from last<font color="#E5E5E5"> year</font><font color="#CCCCCC"> ccs it was</font>

69
00:02:39,670 --> 00:02:48,220
by wang xi and and others so this one is

70
00:02:45,340 --> 00:02:49,750
sort of fast as there is for MPC

71
00:02:48,220 --> 00:02:51,400
applications if you want to hide your

72
00:02:49,750 --> 00:02:54,280
excess patterning MPC this is the best

73
00:02:51,400 --> 00:02:56,950
<font color="#E5E5E5">you can do so far now this is great</font>

74
00:02:54,280 --> 00:02:58,930
however we wanted to sort of see how it

75
00:02:56,950 --> 00:03:01,869
plays out in real applications so if you

76
00:02:58,930 --> 00:03:04,569
compare the performance of this existing

77
00:03:01,870 --> 00:03:06,220
scheme with just linear scan if you are

78
00:03:04,569 --> 00:03:09,730
exiting every single element what do<font color="#E5E5E5"> you</font>

79
00:03:06,220 --> 00:03:12,310
get it looks kind of like this so if you

80
00:03:09,730 --> 00:03:15,640
have fewer<font color="#E5E5E5"> than say up 10,000 elements</font>

81
00:03:12,310 --> 00:03:18,069
or say 66,000 elements or so linear<font color="#E5E5E5"> scan</font>

82
00:03:15,640 --> 00:03:21,179
is actually faster for larger data this

83
00:03:18,069 --> 00:03:24,130
smells good which is<font color="#E5E5E5"> great however that</font>

84
00:03:21,180 --> 00:03:25,660
<font color="#CCCCCC">all</font><font color="#E5E5E5"> often sometimes not quite tractable</font>

85
00:03:24,130 --> 00:03:27,700
because if you look<font color="#E5E5E5"> at it it requires</font>

86
00:03:25,660 --> 00:03:30,730
something like two seconds per access if

87
00:03:27,700 --> 00:03:33,910
you have<font color="#E5E5E5"> two meal and a data in</font><font color="#CCCCCC"> your</font>

88
00:03:30,730 --> 00:03:36,340
area which means<font color="#E5E5E5"> even if you're trying</font>

89
00:03:33,910 --> 00:03:38,459
to just initialize the array you need

90
00:03:36,340 --> 00:03:40,959
two million seconds that's several weeks

91
00:03:38,459 --> 00:03:42,579
just for initializing a structure just

92
00:03:40,959 --> 00:03:45,130
<font color="#E5E5E5">because you want to hide which elements</font>

93
00:03:42,579 --> 00:03:46,780
you're interested in for processing a

94
00:03:45,130 --> 00:03:50,590
million data in whatever data elements

95
00:03:46,780 --> 00:03:52,540
which is not always what<font color="#E5E5E5"> you want so</font>

96
00:03:50,590 --> 00:03:54,790
what we wanted to do is<font color="#E5E5E5"> to come up with</font>

97
00:03:52,540 --> 00:03:58,750
<font color="#E5E5E5">the new construction</font><font color="#CCCCCC"> that will a have</font>

98
00:03:54,790 --> 00:04:01,929
lower initial<font color="#E5E5E5"> cost which helps and</font><font color="#CCCCCC"> B</font>

99
00:03:58,750 --> 00:04:05,440
will<font color="#CCCCCC"> be able to break even with linear</font>

100
00:04:01,930 --> 00:04:08,400
scan at a much smaller size I'm not just

101
00:04:05,440 --> 00:04:11,019
to foreshadow<font color="#E5E5E5"> our results if you look at</font>

102
00:04:08,400 --> 00:04:13,120
<font color="#E5E5E5">the kind of parameters we should work</font>

103
00:04:11,019 --> 00:04:14,440
with<font color="#CCCCCC"> each construction here this is this</font>

104
00:04:13,120 --> 00:04:16,120
show this graph shows the combination of

105
00:04:14,440 --> 00:04:19,089
parameter for which<font color="#CCCCCC"> each constructions</font>

106
00:04:16,120 --> 00:04:20,590
optimum so x axis here is the size of

107
00:04:19,089 --> 00:04:22,539
<font color="#E5E5E5">each element and why accesses the number</font>

108
00:04:20,589 --> 00:04:25,599
of<font color="#CCCCCC"> elements so as</font><font color="#E5E5E5"> you can see for a</font>

109
00:04:22,539 --> 00:04:27,280
large combination of parameters our

110
00:04:25,599 --> 00:04:29,500
approach<font color="#E5E5E5"> even though it's asymptotically</font>

111
00:04:27,280 --> 00:04:30,630
poorer actually helps you and<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

112
00:04:29,500 --> 00:04:32,670
just<font color="#E5E5E5"> the access time</font>

113
00:04:30,630 --> 00:04:34,469
without considering<font color="#E5E5E5"> Shannon</font><font color="#CCCCCC"> cost so in</font>

114
00:04:32,670 --> 00:04:35,850
real application you might be<font color="#E5E5E5"> you will</font>

115
00:04:34,470 --> 00:04:40,590
<font color="#CCCCCC">probably want to use our construction</font>

116
00:04:35,850 --> 00:04:42,720
even first among the red regions so yeah

117
00:04:40,590 --> 00:04:44,520
for the small smaller the data sizes

118
00:04:42,720 --> 00:04:45,870
minions<font color="#E5E5E5"> can is still faster for large</font>

119
00:04:44,520 --> 00:04:48,150
enough sizes you still want<font color="#E5E5E5"> to use</font>

120
00:04:45,870 --> 00:04:50,280
circular<font color="#E5E5E5"> ram however when it's a large</font>

121
00:04:48,150 --> 00:04:52,530
it means<font color="#E5E5E5"> something in order of several</font>

122
00:04:50,280 --> 00:04:53,820
days or weeks that kind of thing<font color="#E5E5E5"> but for</font>

123
00:04:52,530 --> 00:04:56,190
all other applications you want to use

124
00:04:53,820 --> 00:05:00,810
<font color="#CCCCCC">our scheme probably and how do we how do</font>

125
00:04:56,190 --> 00:05:02,730
we actually I accomplish this well we

126
00:05:00,810 --> 00:05:06,410
looked at some of<font color="#E5E5E5"> the older schemes some</font>

127
00:05:02,730 --> 00:05:09,480
of the very first earlier schemes by by

128
00:05:06,410 --> 00:05:10,950
<font color="#E5E5E5">golden</font><font color="#CCCCCC"> Ostrovsky in 96 they considered</font>

129
00:05:09,480 --> 00:05:12,870
<font color="#E5E5E5">this square root scheme it's really</font>

130
00:05:10,950 --> 00:05:15,060
simple but it<font color="#E5E5E5"> was initially considered</font>

131
00:05:12,870 --> 00:05:16,670
to be impractical for NBC applications

132
00:05:15,060 --> 00:05:19,170
because they require you<font color="#E5E5E5"> to securely</font>

133
00:05:16,670 --> 00:05:22,710
evaluate hash functions inside a

134
00:05:19,170 --> 00:05:24,030
cryptographic protocol so everyone said

135
00:05:22,710 --> 00:05:26,729
okay you know what this is not going to

136
00:05:24,030 --> 00:05:28,380
be<font color="#E5E5E5"> tragically and practical for NBC so</font>

137
00:05:26,730 --> 00:05:32,910
that's the<font color="#E5E5E5"> one we decide to concentrate</font>

138
00:05:28,380 --> 00:05:37,670
<font color="#CCCCCC">on yes why not um so what we do here is</font>

139
00:05:32,910 --> 00:05:39,780
that we get<font color="#CCCCCC"> around</font><font color="#E5E5E5"> this requirement to</font>

140
00:05:37,670 --> 00:05:41,490
evaluate<font color="#CCCCCC"> the hash function we did every</font>

141
00:05:39,780 --> 00:05:44,969
<font color="#CCCCCC">axis and we show that this actually</font>

142
00:05:41,490 --> 00:05:46,680
helps so the<font color="#CCCCCC"> rest of the talk will be</font>

143
00:05:44,970 --> 00:05:48,360
talking<font color="#E5E5E5"> about how our construction</font>

144
00:05:46,680 --> 00:05:50,550
applies to a small<font color="#CCCCCC"> number of elements</font>

145
00:05:48,360 --> 00:05:52,380
less than just four elements<font color="#E5E5E5"> just for</font>

146
00:05:50,550 --> 00:05:54,060
the sake of illustration and then we'll

147
00:05:52,380 --> 00:05:55,890
talk<font color="#E5E5E5"> about</font><font color="#CCCCCC"> how it applies to larger</font>

148
00:05:54,060 --> 00:05:59,430
sizes especially how the metadata get

149
00:05:55,890 --> 00:06:00,840
some gets processed and finally we'll

150
00:05:59,430 --> 00:06:04,470
finish with evaluation<font color="#CCCCCC"> and conclusion</font>

151
00:06:00,840 --> 00:06:06,119
right so for four elements let's say<font color="#E5E5E5"> we</font>

152
00:06:04,470 --> 00:06:08,130
have an array of just four elements we

153
00:06:06,120 --> 00:06:09,270
have wires carrying four data elements

154
00:06:08,130 --> 00:06:11,420
and move to hide which one we're

155
00:06:09,270 --> 00:06:14,159
actually interested in how do we do it

156
00:06:11,420 --> 00:06:17,700
well first of all we start with by

157
00:06:14,160 --> 00:06:19,400
shuffling it oh this one slide will be

158
00:06:17,700 --> 00:06:23,700
talking about<font color="#E5E5E5"> we'll be using this</font>

159
00:06:19,400 --> 00:06:25,260
notation of b.o.b bytes of data transfer

160
00:06:23,700 --> 00:06:27,510
<font color="#CCCCCC">of data will be transferred for</font>

161
00:06:25,260 --> 00:06:28,890
accessing one block of item now

162
00:06:27,510 --> 00:06:31,110
operating on one block of items so for

163
00:06:28,890 --> 00:06:33,750
shuffling we can do it in<font color="#CCCCCC"> five</font><font color="#E5E5E5"> B 5e</font>

164
00:06:31,110 --> 00:06:35,730
bytes of their transfer once we do the

165
00:06:33,750 --> 00:06:37,110
shuffle next time we<font color="#E5E5E5"> want to access</font>

166
00:06:35,730 --> 00:06:38,610
something we can actually<font color="#E5E5E5"> do which one</font>

167
00:06:37,110 --> 00:06:40,470
<font color="#E5E5E5">and we're accessing so in this case we</font>

168
00:06:38,610 --> 00:06:42,690
can reveal that<font color="#E5E5E5"> we're accessing the</font>

169
00:06:40,470 --> 00:06:44,280
second wire because we don't know which

170
00:06:42,690 --> 00:06:45,830
logical that element that really

171
00:06:44,280 --> 00:06:49,380
chorus monster it's all it mean shuffled

172
00:06:45,830 --> 00:06:51,000
now once once we do that for<font color="#E5E5E5"> the second</font>

173
00:06:49,380 --> 00:06:52,980
<font color="#CCCCCC">X is however we need to</font><font color="#E5E5E5"> be a</font><font color="#CCCCCC"> little more</font>

174
00:06:51,000 --> 00:06:55,290
careful because now we need to<font color="#E5E5E5"> sort of</font>

175
00:06:52,980 --> 00:06:57,240
access to elements and secretly choose

176
00:06:55,290 --> 00:06:58,560
one of<font color="#E5E5E5"> the one of the two so that we</font>

177
00:06:57,240 --> 00:07:01,740
don't reveal it whether<font color="#E5E5E5"> or not it's a</font>

178
00:06:58,560 --> 00:07:04,669
repeat but other than that we now have

179
00:07:01,740 --> 00:07:07,110
<font color="#E5E5E5">to pay to be by it's worth of</font>

180
00:07:04,669 --> 00:07:08,789
communication for the third axis will

181
00:07:07,110 --> 00:07:10,889
have to pay<font color="#E5E5E5"> 3 B rights of communication</font>

182
00:07:08,790 --> 00:07:12,570
and what we do in our construction is

183
00:07:10,889 --> 00:07:13,919
that from the for Texas onwards<font color="#E5E5E5"> we just</font>

184
00:07:12,570 --> 00:07:17,430
reset the whole process lose the shuffle

185
00:07:13,919 --> 00:07:20,370
again do 1 B 2 B 3 B actual again 1 B 2

186
00:07:17,430 --> 00:07:22,350
B 3 B and so on<font color="#CCCCCC"> and so forth now if you</font>

187
00:07:20,370 --> 00:07:24,419
look<font color="#E5E5E5"> at the cost here this is all you</font>

188
00:07:22,350 --> 00:07:26,640
<font color="#E5E5E5">can kind of interesting</font><font color="#CCCCCC"> because we are</font>

189
00:07:24,419 --> 00:07:29,370
paying a cost of 11<font color="#E5E5E5"> b buys for every</font>

190
00:07:26,640 --> 00:07:31,169
tree excesses this is<font color="#E5E5E5"> already better</font>

191
00:07:29,370 --> 00:07:32,850
than linear scan in<font color="#CCCCCC"> Lea's can you be</font>

192
00:07:31,169 --> 00:07:36,659
secretly choosing between four elements

193
00:07:32,850 --> 00:07:39,030
for be bites this is already breaking

194
00:07:36,660 --> 00:07:40,229
even for just four elements which is

195
00:07:39,030 --> 00:07:42,179
much better<font color="#E5E5E5"> than all other</font><font color="#CCCCCC"> over m</font>

196
00:07:40,229 --> 00:07:45,030
schemes other RM schemes they tend<font color="#E5E5E5"> to</font>

197
00:07:42,180 --> 00:07:48,690
break even at around a hundred or 64

198
00:07:45,030 --> 00:07:50,039
depending<font color="#CCCCCC"> on how account so over here</font><font color="#E5E5E5"> it</font>

199
00:07:48,690 --> 00:07:53,460
seems<font color="#CCCCCC"> like this approach could</font><font color="#E5E5E5"> be</font>

200
00:07:50,040 --> 00:07:55,710
promising even though we're sort of even

201
00:07:53,460 --> 00:07:57,750
though it's<font color="#E5E5E5"> really simple scheme so what</font>

202
00:07:55,710 --> 00:07:59,310
we'll talk<font color="#CCCCCC"> about next is how this</font>

203
00:07:57,750 --> 00:08:02,280
<font color="#E5E5E5">applies to larger size especially how</font>

204
00:07:59,310 --> 00:08:05,010
the metadata gets not attract so we told

205
00:08:02,280 --> 00:08:07,500
<font color="#E5E5E5">you</font><font color="#CCCCCC"> that we're</font><font color="#E5E5E5"> not here we're not using</font>

206
00:08:05,010 --> 00:08:10,409
a hash function so what we're doing is

207
00:08:07,500 --> 00:08:11,610
using a recursive program so we'll be

208
00:08:10,410 --> 00:08:13,020
talking about how the metadata gets

209
00:08:11,610 --> 00:08:16,500
generated and how we keep track of the

210
00:08:13,020 --> 00:08:18,270
position map ok so the part that we

211
00:08:16,500 --> 00:08:20,039
didn't discuss is that every time<font color="#E5E5E5"> we</font>

212
00:08:18,270 --> 00:08:22,080
shuffle we need to produce this extra

213
00:08:20,039 --> 00:08:23,820
map that says you know<font color="#E5E5E5"> element 0 when T</font>

214
00:08:22,080 --> 00:08:26,130
position 3 element 1 went to position 0

215
00:08:23,820 --> 00:08:29,150
and so on<font color="#E5E5E5"> so forth with every shuffle we</font>

216
00:08:26,130 --> 00:08:31,680
need to do<font color="#CCCCCC"> that and in order</font><font color="#E5E5E5"> to do that</font>

217
00:08:29,150 --> 00:08:33,809
if you just abstract out<font color="#E5E5E5"> the problem</font>

218
00:08:31,680 --> 00:08:35,370
just<font color="#CCCCCC"> for the shuffle the problem looks</font>

219
00:08:33,809 --> 00:08:37,079
kind of like this will come<font color="#CCCCCC"> in with</font><font color="#E5E5E5"> a</font>

220
00:08:35,370 --> 00:08:39,240
position<font color="#E5E5E5"> we will come in with some</font>

221
00:08:37,080 --> 00:08:42,599
elements will permit it while permuting

222
00:08:39,240 --> 00:08:44,790
we also need<font color="#CCCCCC"> to produce a map which has</font>

223
00:08:42,599 --> 00:08:46,560
served inverse permutation so if

224
00:08:44,790 --> 00:08:49,380
elements you ended up in position two

225
00:08:46,560 --> 00:08:52,469
then we<font color="#CCCCCC"> need a map that says o kzo maps</font>

226
00:08:49,380 --> 00:08:54,270
position to win so on so forth now for

227
00:08:52,470 --> 00:08:57,250
the first shuffle this is fairly easy

228
00:08:54,270 --> 00:08:58,930
your inputs are all nicely ordered

229
00:08:57,250 --> 00:09:00,250
you know which ones to go through the

230
00:08:58,930 --> 00:09:02,170
protocol knows which one's got swapped

231
00:09:00,250 --> 00:09:04,030
and I'm on it didn't<font color="#E5E5E5"> get swapped you can</font>

232
00:09:02,170 --> 00:09:06,640
just run it in reverse and produce the

233
00:09:04,030 --> 00:09:07,959
inverse permutation which is easy the

234
00:09:06,640 --> 00:09:11,470
second time it's a little more difficult

235
00:09:07,960 --> 00:09:13,300
because now which<font color="#E5E5E5"> element ended up where</font>

236
00:09:11,470 --> 00:09:14,950
depends on two shuffles instead of one

237
00:09:13,300 --> 00:09:16,930
if<font color="#CCCCCC"> you combined operation from combine</font>

238
00:09:14,950 --> 00:09:18,430
information from two shuffles you don't

239
00:09:16,930 --> 00:09:20,739
want<font color="#E5E5E5"> anyone want to do that so what we</font>

240
00:09:18,430 --> 00:09:23,770
need<font color="#E5E5E5"> to do is come</font><font color="#CCCCCC"> up with some sort of</font>

241
00:09:20,740 --> 00:09:28,030
a two-party protocol that starts with

242
00:09:23,770 --> 00:09:30,130
the<font color="#CCCCCC"> encrypted representation of where</font>

243
00:09:28,030 --> 00:09:32,439
each element is and we<font color="#CCCCCC"> need to</font><font color="#E5E5E5"> find the</font>

244
00:09:30,130 --> 00:09:34,600
inverse permutation without leaking

245
00:09:32,440 --> 00:09:37,990
without telling either party finding out

246
00:09:34,600 --> 00:09:39,370
what the permutation is so we have we

247
00:09:37,990 --> 00:09:41,170
started with<font color="#E5E5E5"> the permutation p and we'll</font>

248
00:09:39,370 --> 00:09:44,170
need to come up with p inverse so we

249
00:09:41,170 --> 00:09:47,110
have<font color="#E5E5E5"> allison bob or our crypto</font>

250
00:09:44,170 --> 00:09:49,719
characters and the way we deal with is

251
00:09:47,110 --> 00:09:53,680
that we have Alice pick a random

252
00:09:49,720 --> 00:09:55,750
permutation pie I<font color="#CCCCCC"> Paille and use that to</font>

253
00:09:53,680 --> 00:09:57,579
permute the crypt of the actual

254
00:09:55,750 --> 00:09:59,020
sensitive permutation once it's been

255
00:09:57,580 --> 00:10:01,210
prone muted it gets revealed your Bob

256
00:09:59,020 --> 00:10:03,010
now they both see a random permutation

257
00:10:01,210 --> 00:10:05,500
they don't see the sensitive permutation

258
00:10:03,010 --> 00:10:07,510
at this point what Bob can do is that

259
00:10:05,500 --> 00:10:10,480
Bob can locally compute the inverse of

260
00:10:07,510 --> 00:10:12,970
the whole thing<font color="#CCCCCC"> and combine them back</font>

261
00:10:10,480 --> 00:10:14,770
together so that the pie ay gets

262
00:10:12,970 --> 00:10:17,080
cancelled out so you're<font color="#E5E5E5"> just left with</font>

263
00:10:14,770 --> 00:10:19,569
put<font color="#E5E5E5"> P</font><font color="#CCCCCC"> Prime therapy inverse which is</font>

264
00:10:17,080 --> 00:10:21,339
what we wanted so in this way<font color="#E5E5E5"> we can</font>

265
00:10:19,570 --> 00:10:23,890
compute the two two parties can

266
00:10:21,339 --> 00:10:27,730
collaboratively collaboratively compute

267
00:10:23,890 --> 00:10:29,589
the permutation inverse without having

268
00:10:27,730 --> 00:10:31,300
to reveal the information to each other

269
00:10:29,589 --> 00:10:34,390
and without using expensive sorting

270
00:10:31,300 --> 00:10:37,209
operations so yeah the whole process

271
00:10:34,390 --> 00:10:40,240
looks<font color="#CCCCCC"> like this our Ram you start with</font>

272
00:10:37,210 --> 00:10:42,580
shuffling we produce<font color="#E5E5E5"> a position map you</font>

273
00:10:40,240 --> 00:10:44,140
make tea some number of accesses you go

274
00:10:42,580 --> 00:10:45,790
back<font color="#E5E5E5"> to shuffle again make position map</font>

275
00:10:44,140 --> 00:10:50,080
you do some number of accesses so on so

276
00:10:45,790 --> 00:10:52,990
forth you<font color="#CCCCCC"> do HW do square root n login</font>

277
00:10:50,080 --> 00:10:55,330
access so<font color="#CCCCCC"> you pay a cost average cost of</font>

278
00:10:52,990 --> 00:10:59,020
square root n log n / access that's the

279
00:10:55,330 --> 00:11:01,720
amortized cost so we're the next we have

280
00:10:59,020 --> 00:11:04,060
the evaluation slides on the x axis we

281
00:11:01,720 --> 00:11:06,580
have the data num number of data

282
00:11:04,060 --> 00:11:08,829
elements the<font color="#CCCCCC"> y-axis time as you can</font><font color="#E5E5E5"> see</font>

283
00:11:06,580 --> 00:11:10,990
<font color="#E5E5E5">our approach is asymptotically inferior</font>

284
00:11:08,830 --> 00:11:13,060
as we said super axe s time

285
00:11:10,990 --> 00:11:15,790
eventually for larger sizes we do

286
00:11:13,060 --> 00:11:18,369
perform worse but that's okay because

287
00:11:15,790 --> 00:11:20,680
what<font color="#CCCCCC"> this</font><font color="#E5E5E5"> rap doesn't show you is the</font>

288
00:11:18,370 --> 00:11:22,360
startup initial<font color="#CCCCCC"> cost that week Lanka has</font>

289
00:11:20,680 --> 00:11:24,250
cost let me talked about that's that's

290
00:11:22,360 --> 00:11:27,190
not shown here that's just / access time

291
00:11:24,250 --> 00:11:29,140
so if you<font color="#E5E5E5"> look at the initial cost we do</font>

292
00:11:27,190 --> 00:11:32,740
about 100x better for pretty much all

293
00:11:29,140 --> 00:11:36,370
the other sizes once again this means

294
00:11:32,740 --> 00:11:39,430
that for pretty much any benchmark where

295
00:11:36,370 --> 00:11:42,490
you are spending less than<font color="#E5E5E5"> a few days</font>

296
00:11:39,430 --> 00:11:44,560
<font color="#CCCCCC">you probably want to use our</font><font color="#E5E5E5"> scheme so</font>

297
00:11:42,490 --> 00:11:47,589
these are a few sample benchmarks for

298
00:11:44,560 --> 00:11:49,380
some data sizes binary search that

299
00:11:47,589 --> 00:11:52,120
actually counts the insurance and<font color="#CCCCCC"> costs</font>

300
00:11:49,380 --> 00:11:55,480
whereas in previously<font color="#CCCCCC"> oftentimes we</font>

301
00:11:52,120 --> 00:11:58,209
<font color="#CCCCCC">could other papers would not and for</font>

302
00:11:55,480 --> 00:12:01,240
<font color="#E5E5E5">most of the cases our ours is actually</font>

303
00:11:58,209 --> 00:12:03,699
better and for stable matching this is

304
00:12:01,240 --> 00:12:06,640
just a naive Wikipedia implementation of

305
00:12:03,700 --> 00:12:07,899
stable matching if you want to do<font color="#E5E5E5"> custom</font>

306
00:12:06,640 --> 00:12:10,000
algorithms you can<font color="#E5E5E5"> definitely do much</font>

307
00:12:07,899 --> 00:12:12,250
better in fact if you<font color="#E5E5E5"> are hanging around</font>

308
00:12:10,000 --> 00:12:13,690
for the poster session I believe Jack

309
00:12:12,250 --> 00:12:16,980
<font color="#CCCCCC">darner will actually be presenting a</font>

310
00:12:13,690 --> 00:12:20,079
much much much faster like 40<font color="#E5E5E5"> accessor</font>

311
00:12:16,980 --> 00:12:22,570
algorithm so yeah we can definitely do

312
00:12:20,079 --> 00:12:25,300
much better than that and<font color="#E5E5E5"> s script was</font>

313
00:12:22,570 --> 00:12:26,950
just a hash function that does lots of

314
00:12:25,300 --> 00:12:31,420
unpredictable random access so we went

315
00:12:26,950 --> 00:12:34,089
<font color="#E5E5E5">with that so yeah when to conclude we</font>

316
00:12:31,420 --> 00:12:35,620
revisit an old scheme see check that

317
00:12:34,089 --> 00:12:38,020
whether or not we<font color="#CCCCCC"> can do something</font>

318
00:12:35,620 --> 00:12:39,640
<font color="#E5E5E5">useful with that and it turns out that</font>

319
00:12:38,020 --> 00:12:42,100
if you're in real life applications

320
00:12:39,640 --> 00:12:44,079
often the concrete<font color="#CCCCCC"> costs matter not just</font>

321
00:12:42,100 --> 00:12:46,060
that somebody cause often you're in

322
00:12:44,079 --> 00:12:47,430
charge and cause cut of course breakeven

323
00:12:46,060 --> 00:12:49,180
points those things<font color="#E5E5E5"> are things</font>

324
00:12:47,430 --> 00:12:52,300
parameters<font color="#E5E5E5"> that you need to pay</font>

325
00:12:49,180 --> 00:12:56,170
attention to<font color="#E5E5E5"> and hopefully this will</font>

326
00:12:52,300 --> 00:12:59,290
make other applications more more

327
00:12:56,170 --> 00:13:01,709
interesting so yeah that Oh taking

328
00:12:59,290 --> 00:13:01,709
<font color="#E5E5E5">questions</font>

329
00:13:04,080 --> 00:13:15,600
I thanks a lot for your talk so I think

330
00:13:13,800 --> 00:13:17,490
the original square root<font color="#CCCCCC"> a ram you can</font>

331
00:13:15,600 --> 00:13:20,250
<font color="#E5E5E5">apply it recursively right I think it's</font>

332
00:13:17,490 --> 00:13:22,560
going<font color="#E5E5E5"> on hierarchical</font><font color="#CCCCCC"> Oh Graham uh yes</font>

333
00:13:20,250 --> 00:13:25,020
that's true so can<font color="#CCCCCC"> you do that here and</font>

334
00:13:22,560 --> 00:13:26,609
is there<font color="#CCCCCC"> any point to doing it um yes</font>

335
00:13:25,020 --> 00:13:29,340
there is a point to do it we are trying

336
00:13:26,610 --> 00:13:30,810
to<font color="#E5E5E5"> do it at the moment what happens is</font>

337
00:13:29,340 --> 00:13:33,300
that you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to be a</font><font color="#E5E5E5"> little bit careful</font>

338
00:13:30,810 --> 00:13:36,660
<font color="#CCCCCC">about not accessing</font><font color="#E5E5E5"> the position map</font>

339
00:13:33,300 --> 00:13:39,209
multiple times for each<font color="#E5E5E5"> outer axis which</font>

340
00:13:36,660 --> 00:13:40,980
creates asymptotic problems so doing

341
00:13:39,210 --> 00:13:46,770
knively doesn't work but it's doable

342
00:13:40,980 --> 00:13:48,930
we're working<font color="#E5E5E5"> on it yeah thanks are</font>

343
00:13:46,770 --> 00:13:52,040
there<font color="#CCCCCC"> Kenny</font><font color="#E5E5E5"> are you</font><font color="#CCCCCC"> all working</font><font color="#E5E5E5"> on other</font>

344
00:13:48,930 --> 00:13:55,800
uses for square root or<font color="#E5E5E5"> a min here 24</font>

345
00:13:52,040 --> 00:13:58,410
undecided<font color="#CCCCCC"> partying amputation um pretty</font>

346
00:13:55,800 --> 00:14:01,609
much anywhere where well the only thing

347
00:13:58,410 --> 00:14:09,650
about multiple<font color="#E5E5E5"> computation is that it's</font>

348
00:14:01,610 --> 00:14:15,630
slow so in other cases where you have

349
00:14:09,650 --> 00:14:18,990
you have<font color="#CCCCCC"> smaller smaller data sizes</font>

350
00:14:15,630 --> 00:14:22,580
basically<font color="#CCCCCC"> where interesting yep it's</font>

351
00:14:18,990 --> 00:14:22,580
definitely what<font color="#CCCCCC"> we're looking into</font>

