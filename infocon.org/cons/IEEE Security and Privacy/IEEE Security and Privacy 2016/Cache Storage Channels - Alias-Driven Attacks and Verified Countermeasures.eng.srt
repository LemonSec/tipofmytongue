1
00:00:03,879 --> 00:00:08,679
hi thank you<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the introduction so as</font>

2
00:00:07,000 --> 00:00:10,389
I say I'm<font color="#E5E5E5"> Roberto when Charlie from</font><font color="#CCCCCC"> the</font>

3
00:00:08,679 --> 00:00:12,010
Royal Institute of Technology from

4
00:00:10,389 --> 00:00:14,280
Stockholm you can guess this by<font color="#E5E5E5"> looking</font>

5
00:00:12,010 --> 00:00:18,550
<font color="#E5E5E5">my red face after one day in Santa Cruz</font>

6
00:00:14,280 --> 00:00:20,890
so today represent new attack that use

7
00:00:18,550 --> 00:00:23,829
cash to tamper both integrity and

8
00:00:20,890 --> 00:00:25,630
confidentiality of secure software so in

9
00:00:23,829 --> 00:00:28,210
the last<font color="#E5E5E5"> year there's been a huge</font>

10
00:00:25,630 --> 00:00:31,229
investment<font color="#CCCCCC"> in formally verified platform</font>

11
00:00:28,210 --> 00:00:34,960
and these paid back by providing

12
00:00:31,230 --> 00:00:36,910
hypervisor Mick microkernel basically

13
00:00:34,960 --> 00:00:40,000
<font color="#E5E5E5">low-level execution platform with</font>

14
00:00:36,910 --> 00:00:41,860
unprecedent security properties this

15
00:00:40,000 --> 00:00:45,280
platform can be<font color="#E5E5E5"> used to bootstrap</font>

16
00:00:41,860 --> 00:00:47,350
security of system by<font color="#E5E5E5"> giving transport</font>

17
00:00:45,280 --> 00:00:50,890
<font color="#CCCCCC">lee isolation of the critical components</font>

18
00:00:47,350 --> 00:00:53,350
and isolating them from less security

19
00:00:50,890 --> 00:00:55,390
<font color="#E5E5E5">guard less security critical part of the</font>

20
00:00:53,350 --> 00:00:58,510
<font color="#CCCCCC">system that</font><font color="#E5E5E5"> can be done implemented</font>

21
00:00:55,390 --> 00:01:00,370
using off-the-shelf software so among

22
00:00:58,510 --> 00:01:02,829
this project there is also prosper a

23
00:01:00,370 --> 00:01:04,569
project<font color="#CCCCCC"> in which I'm involved that focus</font>

24
00:01:02,829 --> 00:01:07,659
<font color="#E5E5E5">on the development and verification of</font>

25
00:01:04,569 --> 00:01:10,329
an app advisor for embedded system now

26
00:01:07,659 --> 00:01:12,999
in some cases this platform has been

27
00:01:10,329 --> 00:01:15,520
<font color="#E5E5E5">verified down to the instruction set</font>

28
00:01:12,999 --> 00:01:16,990
architecture so even the binary code of

29
00:01:15,520 --> 00:01:19,960
the<font color="#E5E5E5"> platform has been formally verified</font>

30
00:01:16,990 --> 00:01:22,568
and so you<font color="#E5E5E5"> don't even need to trust the</font>

31
00:01:19,960 --> 00:01:26,199
compiler but<font color="#E5E5E5"> even in the state</font><font color="#CCCCCC"> of the</font>

32
00:01:22,569 --> 00:01:29,350
<font color="#CCCCCC">art basically cash rxq are excluded from</font>

33
00:01:26,200 --> 00:01:31,719
these analysis and how much<font color="#E5E5E5"> of</font><font color="#CCCCCC"> this is a</font>

34
00:01:29,350 --> 00:01:33,699
<font color="#E5E5E5">problem I mean we know that cash can</font>

35
00:01:31,719 --> 00:01:36,249
affect<font color="#E5E5E5"> the execution time of a software</font>

36
00:01:33,700 --> 00:01:38,859
and a detailed analysis<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> exists</font>

37
00:01:36,249 --> 00:01:40,839
<font color="#E5E5E5">the execution time can be used to</font><font color="#CCCCCC"> leak</font>

38
00:01:38,859 --> 00:01:43,600
information from<font color="#E5E5E5"> implementation of a</font>

39
00:01:40,840 --> 00:01:46,389
crypto service similarly power

40
00:01:43,600 --> 00:01:48,609
consumption or temperature can be used

41
00:01:46,389 --> 00:01:50,319
and can be analyzed<font color="#E5E5E5"> by an attacker to</font>

42
00:01:48,609 --> 00:01:53,559
<font color="#E5E5E5">extract information from a secure</font>

43
00:01:50,319 --> 00:01:55,779
software now in all these cases this

44
00:01:53,560 --> 00:01:57,420
channel are built over variables that

45
00:01:55,779 --> 00:02:00,429
are not part of the formal verification

46
00:01:57,420 --> 00:02:02,229
the main<font color="#E5E5E5"> reason is that today is too</font>

47
00:02:00,429 --> 00:02:04,299
difficult to have a formal model that

48
00:02:02,229 --> 00:02:06,069
take into account all these variables

49
00:02:04,299 --> 00:02:08,770
it's<font color="#E5E5E5"> really difficult to predict</font>

50
00:02:06,069 --> 00:02:11,410
statically the time needed<font color="#E5E5E5"> to execute</font>

51
00:02:08,770 --> 00:02:14,410
any structure in a commodity hardware

52
00:02:11,410 --> 00:02:16,329
today but in all this case so since this

53
00:02:14,410 --> 00:02:17,100
variable are external to the formal

54
00:02:16,330 --> 00:02:19,770
model

55
00:02:17,100 --> 00:02:21,810
the software has to use some model

56
00:02:19,770 --> 00:02:23,910
external means to counter this attack

57
00:02:21,810 --> 00:02:26,070
<font color="#E5E5E5">for example you introduce some noise</font>

58
00:02:23,910 --> 00:02:29,549
whenever the entrusted software try to

59
00:02:26,070 --> 00:02:32,190
<font color="#CCCCCC">assess the</font><font color="#E5E5E5"> system time but at least the</font>

60
00:02:29,550 --> 00:02:34,110
models should be sound respect available

61
00:02:32,190 --> 00:02:35,790
that they represent so if you have

62
00:02:34,110 --> 00:02:38,850
system that has been formally verified

63
00:02:35,790 --> 00:02:41,010
down to destruction set architecture the

64
00:02:38,850 --> 00:02:43,109
formal model used for the analysis

65
00:02:41,010 --> 00:02:45,829
should correctly predict the behavior of

66
00:02:43,110 --> 00:02:47,820
the software / register and memories

67
00:02:45,830 --> 00:02:49,620
unfortunately some time<font color="#E5E5E5"> this is not</font><font color="#CCCCCC"> the</font>

68
00:02:47,820 --> 00:02:52,859
case<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> attack that I will present</font>

69
00:02:49,620 --> 00:02:55,020
today use cash to change the behavior of

70
00:02:52,860 --> 00:02:56,940
the software over some of the variable

71
00:02:55,020 --> 00:02:59,310
that has been used use it<font color="#E5E5E5"> for former</font>

72
00:02:56,940 --> 00:03:02,010
verification so they can be used to

73
00:02:59,310 --> 00:03:05,730
invalidate the formally verified result

74
00:03:02,010 --> 00:03:08,459
so our talk are mainly built over

75
00:03:05,730 --> 00:03:10,829
incoherent cache behavior a little bit

76
00:03:08,460 --> 00:03:13,650
<font color="#CCCCCC">of background here so we clearly use</font>

77
00:03:10,830 --> 00:03:15,990
cash to speed up memory asses but

78
00:03:13,650 --> 00:03:18,330
sometime some of these memories Hasse's

79
00:03:15,990 --> 00:03:21,240
should not be cash it a trivial example

80
00:03:18,330 --> 00:03:24,990
is when operating system try to us some

81
00:03:21,240 --> 00:03:27,450
memory map I or register of a device so

82
00:03:24,990 --> 00:03:30,480
this memory<font color="#CCCCCC"> right clearly should</font><font color="#E5E5E5"> not be</font>

83
00:03:27,450 --> 00:03:33,089
Cashin so today we configure cash

84
00:03:30,480 --> 00:03:34,709
ability of memory using page table and

85
00:03:33,090 --> 00:03:37,620
configuring the memory management unit

86
00:03:34,710 --> 00:03:39,750
for each region of<font color="#CCCCCC"> digital</font><font color="#E5E5E5"> memory we can</font>

87
00:03:37,620 --> 00:03:41,760
say if this region is<font color="#CCCCCC"> cacheable or not</font>

88
00:03:39,750 --> 00:03:44,760
and this can clearly lead to

89
00:03:41,760 --> 00:03:46,679
inconsistency of the configuration now

90
00:03:44,760 --> 00:03:49,320
we can have two different<font color="#E5E5E5"> virtual</font><font color="#CCCCCC"> alias</font>

91
00:03:46,680 --> 00:03:52,440
to the same physical address one that is

92
00:03:49,320 --> 00:03:54,420
<font color="#CCCCCC">cacheable and the other one no this is</font>

93
00:03:52,440 --> 00:03:57,990
called<font color="#CCCCCC"> mismeasured</font><font color="#E5E5E5"> cash ability</font>

94
00:03:54,420 --> 00:04:03,179
attribute so<font color="#E5E5E5"> I think there</font><font color="#CCCCCC"> is a</font>

95
00:03:57,990 --> 00:04:06,480
difference between here<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> mismatch of</font>

96
00:04:03,180 --> 00:04:08,760
cash ability attributes so we have two

97
00:04:06,480 --> 00:04:11,160
<font color="#E5E5E5">different visual</font><font color="#CCCCCC"> alias what</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> cacheable</font>

98
00:04:08,760 --> 00:04:14,820
and the other one no and if you read the

99
00:04:11,160 --> 00:04:17,250
specification<font color="#E5E5E5"> of modern CPU arm</font><font color="#CCCCCC"> intel</font>

100
00:04:14,820 --> 00:04:20,130
power the reference manual usually say

101
00:04:17,250 --> 00:04:22,650
don't do this<font color="#CCCCCC"> I would say more this is</font>

102
00:04:20,130 --> 00:04:25,680
please don't do this our secure software

103
00:04:22,650 --> 00:04:28,289
shared the hardware with some untrusted

104
00:04:25,680 --> 00:04:30,630
component and possibly the Sun process

105
00:04:28,290 --> 00:04:33,180
component is powerful enough to<font color="#CCCCCC"> break</font>

106
00:04:30,630 --> 00:04:34,320
this assumption so to configure the

107
00:04:33,180 --> 00:04:36,570
system in a way that there are

108
00:04:34,320 --> 00:04:39,030
mismatched<font color="#CCCCCC"> catchability</font><font color="#E5E5E5"> attribute over</font>

109
00:04:36,570 --> 00:04:41,490
the virtual memory so if<font color="#E5E5E5"> this is the</font>

110
00:04:39,030 --> 00:04:44,369
case you<font color="#CCCCCC"> can have incoherent</font><font color="#E5E5E5"> cache</font>

111
00:04:41,490 --> 00:04:47,310
behavior so for<font color="#E5E5E5"> example in arm you can</font>

112
00:04:44,370 --> 00:04:50,010
have unexpected cash it even if the

113
00:04:47,310 --> 00:04:52,980
<font color="#E5E5E5">cache report on it during a memory asses</font>

114
00:04:50,010 --> 00:04:55,950
thus if you can disregard this<font color="#E5E5E5"> cache</font>

115
00:04:52,980 --> 00:04:59,430
this it if the beautiful alias use is

116
00:04:55,950 --> 00:05:01,800
<font color="#CCCCCC">not catchable so when an attacker is</font>

117
00:04:59,430 --> 00:05:04,440
powerful enough to break this assumption

118
00:05:01,800 --> 00:05:06,690
there are several scenario<font color="#CCCCCC"> today so one</font>

119
00:05:04,440 --> 00:05:08,460
is an<font color="#E5E5E5"> operating system that is trying to</font>

120
00:05:06,690 --> 00:05:10,740
attack an<font color="#E5E5E5"> ID</font><font color="#CCCCCC"> adviser or another</font>

121
00:05:08,460 --> 00:05:12,630
operating system or this<font color="#E5E5E5"> can be an</font>

122
00:05:10,740 --> 00:05:14,250
operating system that is trying to

123
00:05:12,630 --> 00:05:16,350
attack a secure software that is

124
00:05:14,250 --> 00:05:18,600
deployed in some specialized that

125
00:05:16,350 --> 00:05:21,780
security domain of<font color="#E5E5E5"> this if you like arm</font>

126
00:05:18,600 --> 00:05:24,210
trustzone or Intel SGX oh this<font color="#E5E5E5"> can be a</font>

127
00:05:21,780 --> 00:05:26,580
device driver that is trying to attack a

128
00:05:24,210 --> 00:05:28,890
user process or a cardinal in a

129
00:05:26,580 --> 00:05:31,289
microkernel environment so in all these

130
00:05:28,890 --> 00:05:34,020
cases that occur mainly the operating

131
00:05:31,290 --> 00:05:37,230
system is capable of changing the cache

132
00:05:34,020 --> 00:05:39,570
ability attribute of its own memory so<font color="#E5E5E5"> I</font>

133
00:05:37,230 --> 00:05:41,550
can now finally present the attack so

134
00:05:39,570 --> 00:05:43,800
here<font color="#E5E5E5"> we have an attacker and the victim</font>

135
00:05:41,550 --> 00:05:46,080
the victim is implementing a quite

136
00:05:43,800 --> 00:05:48,300
common design pattern so it's a

137
00:05:46,080 --> 00:05:50,969
reference<font color="#CCCCCC"> monitor it receive a</font><font color="#E5E5E5"> request</font>

138
00:05:48,300 --> 00:05:53,640
<font color="#E5E5E5">from the Tucker</font><font color="#CCCCCC"> it check this request</font>

139
00:05:50,970 --> 00:05:55,980
again some security policy if this

140
00:05:53,640 --> 00:05:58,200
security<font color="#E5E5E5"> policy is</font><font color="#CCCCCC"> not satisfied the</font>

141
00:05:55,980 --> 00:06:00,690
request is rejected otherwise it is

142
00:05:58,200 --> 00:06:04,440
accepted<font color="#E5E5E5"> and it is used as input for</font>

143
00:06:00,690 --> 00:06:07,830
some secure critical function additional

144
00:06:04,440 --> 00:06:10,500
here we have the parameters of this

145
00:06:07,830 --> 00:06:12,810
critical function<font color="#CCCCCC"> arp acid using memory</font>

146
00:06:10,500 --> 00:06:15,350
so there<font color="#E5E5E5"> is a transfer of memory</font>

147
00:06:12,810 --> 00:06:17,760
ownership from the<font color="#E5E5E5"> Tucker to the victim</font>

148
00:06:15,350 --> 00:06:20,430
initially both attacker and the victim

149
00:06:17,760 --> 00:06:22,730
share this part of memory but later on

150
00:06:20,430 --> 00:06:25,380
the victim will remove its mapping

151
00:06:22,730 --> 00:06:28,140
allowing the victim to be the only

152
00:06:25,380 --> 00:06:31,980
<font color="#E5E5E5">player capable at as of assessing this</font>

153
00:06:28,140 --> 00:06:35,130
part of memory so the attacker use non

154
00:06:31,980 --> 00:06:37,290
<font color="#CCCCCC">cacheable alias it right 0 using this</font>

155
00:06:35,130 --> 00:06:40,350
virtual memory this is not catchable so

156
00:06:37,290 --> 00:06:41,850
we directly write 0 into the memory we

157
00:06:40,350 --> 00:06:44,220
completely bypassed the cash obviously

158
00:06:41,850 --> 00:06:47,070
the victim for some reason

159
00:06:44,220 --> 00:06:49,050
asses this region of memory this can

160
00:06:47,070 --> 00:06:52,260
even be induced in a malicious way from

161
00:06:49,050 --> 00:06:54,780
the<font color="#CCCCCC"> Tucker so it use it read the virtual</font>

162
00:06:52,260 --> 00:06:57,990
address VA in<font color="#E5E5E5"> this case this is</font><font color="#CCCCCC"> cashable</font>

163
00:06:54,780 --> 00:07:00,359
it as a cache miss so the value<font color="#CCCCCC"> zero is</font>

164
00:06:57,990 --> 00:07:02,820
fecha from the<font color="#E5E5E5"> memory and is copied into</font>

165
00:07:00,360 --> 00:07:04,740
the cache initially clearly this cache

166
00:07:02,820 --> 00:07:07,080
line is not dirty because we didn't

167
00:07:04,740 --> 00:07:09,030
change anything into the cache the

168
00:07:07,080 --> 00:07:11,219
attacker is scheduled again and this

169
00:07:09,030 --> 00:07:13,830
time it writes one into the<font color="#E5E5E5"> known</font>

170
00:07:11,220 --> 00:07:16,440
<font color="#CCCCCC">cacheable alias so this is not cashable</font>

171
00:07:13,830 --> 00:07:19,320
so it right one directly into the memory

172
00:07:16,440 --> 00:07:21,990
the cash is completed<font color="#E5E5E5"> by</font><font color="#CCCCCC"> pass this is an</font>

173
00:07:19,320 --> 00:07:25,620
expected cash<font color="#E5E5E5"> it it neither the cache</font>

174
00:07:21,990 --> 00:07:28,860
line or the dirty flag is updated so the

175
00:07:25,620 --> 00:07:31,230
<font color="#CCCCCC">tucker finally delegate I mean transfer</font>

176
00:07:28,860 --> 00:07:33,600
the<font color="#E5E5E5"> ownership of this memory it take its</font>

177
00:07:31,230 --> 00:07:36,060
virtual mapping it removed this so<font color="#CCCCCC"> if</font>

178
00:07:33,600 --> 00:07:38,910
free this part of the memory and now the

179
00:07:36,060 --> 00:07:41,310
victim is<font color="#CCCCCC"> the only player that is</font><font color="#E5E5E5"> able</font>

180
00:07:38,910 --> 00:07:42,750
to assess this region<font color="#E5E5E5"> of memory so</font>

181
00:07:41,310 --> 00:07:44,810
should<font color="#E5E5E5"> be completely secured to</font>

182
00:07:42,750 --> 00:07:48,150
implement the standard reference monitor

183
00:07:44,810 --> 00:07:50,910
reference monitor design pattern so the

184
00:07:48,150 --> 00:07:54,210
victim now check the request it read

185
00:07:50,910 --> 00:07:56,810
requests using the<font color="#CCCCCC"> cashable alias so it</font>

186
00:07:54,210 --> 00:08:00,000
tosses the cash it basically<font color="#CCCCCC"> read zero</font>

187
00:07:56,810 --> 00:08:02,490
it check these requests this value

188
00:08:00,000 --> 00:08:05,430
<font color="#E5E5E5">against the security policy let's say</font>

189
00:08:02,490 --> 00:08:07,860
<font color="#E5E5E5">that the policies d must be</font><font color="#CCCCCC"> zero in this</font>

190
00:08:05,430 --> 00:08:10,350
<font color="#E5E5E5">case the policy is accepted so it's a</font>

191
00:08:07,860 --> 00:08:12,960
satisfied the request<font color="#E5E5E5"> is accepted and</font>

192
00:08:10,350 --> 00:08:16,110
not rejected but now for some reason

193
00:08:12,960 --> 00:08:18,180
this cache line is evicted the victim is

194
00:08:16,110 --> 00:08:20,880
performing some additional operation

195
00:08:18,180 --> 00:08:24,360
over the memory so this line is removed

196
00:08:20,880 --> 00:08:26,969
from<font color="#CCCCCC"> the cache and later on the victim</font>

197
00:08:24,360 --> 00:08:28,500
use these beautiful alias again to

198
00:08:26,970 --> 00:08:31,590
implement the security policy the

199
00:08:28,500 --> 00:08:33,809
security function it read from VA this

200
00:08:31,590 --> 00:08:36,240
time there is<font color="#CCCCCC"> a cache miss we read from</font>

201
00:08:33,809 --> 00:08:39,539
the memory with fresh one and basically

202
00:08:36,240 --> 00:08:41,610
the attacker managed to inject one as

203
00:08:39,539 --> 00:08:43,650
parameter of<font color="#E5E5E5"> the critical functionality</font>

204
00:08:41,610 --> 00:08:46,460
<font color="#CCCCCC">by passing completely the security</font>

205
00:08:43,650 --> 00:08:48,990
policy so this is<font color="#CCCCCC"> clearly see a</font>

206
00:08:46,460 --> 00:08:51,630
integrity threat and is<font color="#E5E5E5"> based on two</font>

207
00:08:48,990 --> 00:08:54,030
fact and this mismatch ability attribute

208
00:08:51,630 --> 00:08:57,750
and this transfer<font color="#CCCCCC"> of memory ownership</font>

209
00:08:54,030 --> 00:08:58,740
notice also that between<font color="#E5E5E5"> the check of</font>

210
00:08:57,750 --> 00:09:01,020
the

211
00:08:58,740 --> 00:09:03,180
curity policy and execution of the

212
00:09:01,020 --> 00:09:05,490
critical functionality there was no

213
00:09:03,180 --> 00:09:08,310
simultaneous double mapping available

214
00:09:05,490 --> 00:09:10,560
for the Tucker so an instruction same

215
00:09:08,310 --> 00:09:12,810
and instruction set architecture model

216
00:09:10,560 --> 00:09:15,890
will not predict this behavior<font color="#E5E5E5"> of the</font>

217
00:09:12,810 --> 00:09:18,239
attacker so similarly the same

218
00:09:15,890 --> 00:09:20,370
incoherent behavior can be used by an

219
00:09:18,240 --> 00:09:23,279
attacker to extract information<font color="#E5E5E5"> from a</font>

220
00:09:20,370 --> 00:09:25,709
victim here the victim asses two

221
00:09:23,279 --> 00:09:28,080
different cache line dependently on a

222
00:09:25,709 --> 00:09:30,119
cigarette variable if the variable is

223
00:09:28,080 --> 00:09:32,820
<font color="#E5E5E5">zero the victim asks the first line</font>

224
00:09:30,120 --> 00:09:35,459
otherwise<font color="#E5E5E5"> it asses the second line there</font>

225
00:09:32,820 --> 00:09:37,470
is no Charlotte memory here but both the

226
00:09:35,459 --> 00:09:40,560
attacker and the victim shared the cash

227
00:09:37,470 --> 00:09:42,720
and<font color="#CCCCCC"> the victim now use mismeasured</font>

228
00:09:40,560 --> 00:09:45,959
catchability attribute over its own

229
00:09:42,720 --> 00:09:49,500
memory region to Monsieur if there<font color="#E5E5E5"> is</font>

230
00:09:45,959 --> 00:09:52,589
some misbehavior of the cash if Debbie

231
00:09:49,500 --> 00:09:54,959
if the<font color="#CCCCCC"> cache is exposing some incoherent</font>

232
00:09:52,589 --> 00:09:57,120
behavior so in this case the attacker

233
00:09:54,959 --> 00:09:59,849
can probe which cache line has been

234
00:09:57,120 --> 00:10:03,149
evicted by the victim and discover if

235
00:09:59,850 --> 00:10:05,430
the<font color="#E5E5E5"> secret variable was 0 or 1 this</font>

236
00:10:03,149 --> 00:10:07,800
clearly<font color="#CCCCCC"> opened to confidentiality</font><font color="#E5E5E5"> threat</font>

237
00:10:05,430 --> 00:10:09,870
and can be used<font color="#CCCCCC"> to build us as driven</font>

238
00:10:07,800 --> 00:10:13,589
attack attack where the victim<font color="#E5E5E5"> Monsieur</font>

239
00:10:09,870 --> 00:10:16,079
the eviction over the cash perform at by

240
00:10:13,589 --> 00:10:17,820
a victim so these are not new attack

241
00:10:16,079 --> 00:10:20,459
<font color="#E5E5E5">they're in literature there are several</font>

242
00:10:17,820 --> 00:10:22,649
SS driven attack mainly to crypto

243
00:10:20,459 --> 00:10:24,869
services but for the first<font color="#E5E5E5"> time you</font>

244
00:10:22,649 --> 00:10:26,760
<font color="#E5E5E5">don't need an external variable to me</font>

245
00:10:24,870 --> 00:10:28,950
served eviction from the cash you don't

246
00:10:26,760 --> 00:10:31,170
need<font color="#CCCCCC"> to assess time you can just assess</font>

247
00:10:28,950 --> 00:10:33,240
your own memory to me sir if there is an

248
00:10:31,170 --> 00:10:35,490
inconsistency in the behavior of the

249
00:10:33,240 --> 00:10:38,040
cash so it's really<font color="#E5E5E5"> difficult to counter</font>

250
00:10:35,490 --> 00:10:39,660
this attack at probing time because the

251
00:10:38,040 --> 00:10:43,740
attacker don't have to assess for

252
00:10:39,660 --> 00:10:46,170
example the system time so we experiment

253
00:10:43,740 --> 00:10:48,450
this attack on some real software we

254
00:10:46,170 --> 00:10:49,860
took our formally verified a vaporizer

255
00:10:48,450 --> 00:10:52,860
so in theory there should be no back

256
00:10:49,860 --> 00:10:55,110
here and this advisor has been<font color="#E5E5E5"> verified</font>

257
00:10:52,860 --> 00:10:57,180
using a<font color="#CCCCCC"> quad detailing model of</font>

258
00:10:55,110 --> 00:11:00,149
destruction set of<font color="#E5E5E5"> an architectural firm</font>

259
00:10:57,180 --> 00:11:01,739
and implement a virtualization mechanism

260
00:11:00,149 --> 00:11:04,529
that is<font color="#CCCCCC"> similar to the part of</font>

261
00:11:01,740 --> 00:11:06,930
<font color="#E5E5E5">equalization mechanism oxen so we use</font>

262
00:11:04,529 --> 00:11:09,300
page table to isolate<font color="#CCCCCC"> Linux from</font>

263
00:11:06,930 --> 00:11:10,439
hypervisor and the other secure critical

264
00:11:09,300 --> 00:11:12,810
components

265
00:11:10,440 --> 00:11:16,620
the page table are located inside the

266
00:11:12,810 --> 00:11:19,619
Linux memory but linux is prevented to

267
00:11:16,620 --> 00:11:21,840
directly write them so when<font color="#E5E5E5"> Linux want</font>

268
00:11:19,620 --> 00:11:24,330
to spawn a new process is test to write

269
00:11:21,840 --> 00:11:26,850
a new page table inside it's so dry

270
00:11:24,330 --> 00:11:29,370
table region of memory it<font color="#CCCCCC"> has to ask</font>

271
00:11:26,850 --> 00:11:31,860
their advice oh please make this<font color="#CCCCCC"> reader</font>

272
00:11:29,370 --> 00:11:34,020
read<font color="#E5E5E5"> oddly for me so the upper visor</font>

273
00:11:31,860 --> 00:11:36,000
change the existing page table so that

274
00:11:34,020 --> 00:11:38,250
there is<font color="#E5E5E5"> no way for Linux to change this</font>

275
00:11:36,000 --> 00:11:41,250
region<font color="#E5E5E5"> of memory anymore that's the</font>

276
00:11:38,250 --> 00:11:43,110
transfer of memory on ship basically<font color="#CCCCCC"> the</font>

277
00:11:41,250 --> 00:11:45,510
<font color="#CCCCCC">other visor checked that the content of</font>

278
00:11:43,110 --> 00:11:47,730
this page table is sound there is no

279
00:11:45,510 --> 00:11:50,010
mapping here that hull of<font color="#E5E5E5"> Linux to write</font>

280
00:11:47,730 --> 00:11:52,980
<font color="#E5E5E5">in to another page table or that advisor</font>

281
00:11:50,010 --> 00:11:55,200
itself and if this is<font color="#CCCCCC"> the case if the</font>

282
00:11:52,980 --> 00:11:58,860
policy is respected than the<font color="#E5E5E5"> provider</font>

283
00:11:55,200 --> 00:12:01,500
activated vegetable now due to<font color="#CCCCCC"> a</font><font color="#E5E5E5"> post</font>

284
00:11:58,860 --> 00:12:03,690
<font color="#E5E5E5">possible incoherent cache behavior that</font>

285
00:12:01,500 --> 00:12:06,540
advisor can possibly validate stale data

286
00:12:03,690 --> 00:12:09,240
now we can have any key<font color="#E5E5E5"> and eviction</font>

287
00:12:06,540 --> 00:12:11,280
from the cache the content of this

288
00:12:09,240 --> 00:12:13,380
memory region that is used by the memory

289
00:12:11,280 --> 00:12:15,449
management unit is different respect

290
00:12:13,380 --> 00:12:18,540
what has been<font color="#CCCCCC"> validated by the by the</font>

291
00:12:15,450 --> 00:12:21,060
upper visor so Linux can inject a

292
00:12:18,540 --> 00:12:23,250
mapping the tallow Linux itself to right

293
00:12:21,060 --> 00:12:26,430
into the advisor memory and take

294
00:12:23,250 --> 00:12:28,350
complete control of<font color="#E5E5E5"> the system so for</font>

295
00:12:26,430 --> 00:12:30,900
the confidentiality track we experiment

296
00:12:28,350 --> 00:12:33,690
with AES so we took an existing

297
00:12:30,900 --> 00:12:36,540
implementation of AES we deployed this

298
00:12:33,690 --> 00:12:39,300
implementation inside<font color="#CCCCCC"> precedes own arm</font>

299
00:12:36,540 --> 00:12:41,520
trustzone this is a special security

300
00:12:39,300 --> 00:12:43,589
domain of farm that is designed<font color="#E5E5E5"> to</font>

301
00:12:41,520 --> 00:12:46,770
isolate the critical components from the

302
00:12:43,590 --> 00:12:48,270
untrusted operating system now this

303
00:12:46,770 --> 00:12:51,120
implementation has a<font color="#CCCCCC"> well-know</font>

304
00:12:48,270 --> 00:12:54,300
vulnerability it<font color="#E5E5E5"> implements the crypto I</font>

305
00:12:51,120 --> 00:12:57,120
mean the a grid using look-up tables so

306
00:12:54,300 --> 00:12:59,790
we exploit an existing vulnerability to

307
00:12:57,120 --> 00:13:02,250
measure which kind which cache line are

308
00:12:59,790 --> 00:13:03,900
evicted during the encryption but for

309
00:13:02,250 --> 00:13:05,880
the<font color="#E5E5E5"> first time we don't need to assess</font>

310
00:13:03,900 --> 00:13:08,339
time to measure<font color="#E5E5E5"> this eviction we can</font>

311
00:13:05,880 --> 00:13:10,530
just read<font color="#CCCCCC"> the eviction by measuring the</font>

312
00:13:08,339 --> 00:13:12,030
memory by reading the memory so it's

313
00:13:10,530 --> 00:13:14,189
really<font color="#E5E5E5"> difficult to counter this attack</font>

314
00:13:12,030 --> 00:13:15,870
at run time because the operating system

315
00:13:14,190 --> 00:13:18,810
don't<font color="#E5E5E5"> have to interact with rust on</font>

316
00:13:15,870 --> 00:13:21,900
service to obtain this information so

317
00:13:18,810 --> 00:13:24,089
some countermeasure for the integrity

318
00:13:21,900 --> 00:13:24,360
threat you want to guarantee memory call

319
00:13:24,089 --> 00:13:26,850
here

320
00:13:24,360 --> 00:13:28,320
that means<font color="#E5E5E5"> that you never open in the</font>

321
00:13:26,850 --> 00:13:30,360
system that<font color="#E5E5E5"> you have something</font><font color="#CCCCCC"> in the</font>

322
00:13:28,320 --> 00:13:32,250
<font color="#E5E5E5">cache that is different respect what you</font>

323
00:13:30,360 --> 00:13:34,829
have in the memory and the cash is not

324
00:13:32,250 --> 00:13:37,230
<font color="#E5E5E5">dirty you have several strategy here</font>

325
00:13:34,829 --> 00:13:39,479
<font color="#E5E5E5">either you flush</font><font color="#CCCCCC"> the cache whenever you</font>

326
00:13:37,230 --> 00:13:41,550
enter in the critical software I mean in

327
00:13:39,480 --> 00:13:43,529
the critical section that's we

328
00:13:41,550 --> 00:13:45,510
experiment<font color="#CCCCCC"> this endeavor visor clearly</font>

329
00:13:43,529 --> 00:13:47,189
as a huge over at like eight hundred

330
00:13:45,510 --> 00:13:49,170
percent in the<font color="#E5E5E5"> case of Deborah bustle or</font>

331
00:13:47,190 --> 00:13:51,750
you can<font color="#E5E5E5"> do something better you just</font>

332
00:13:49,170 --> 00:13:53,490
evict the cache line that you<font color="#E5E5E5"> know that</font>

333
00:13:51,750 --> 00:13:55,950
can affect the behavior of your software

334
00:13:53,490 --> 00:13:57,839
so this is<font color="#CCCCCC"> clearly more efficient but</font>

335
00:13:55,950 --> 00:13:59,490
add some verification constraint to your

336
00:13:57,839 --> 00:14:02,010
system you need<font color="#CCCCCC"> to check that you are</font>

337
00:13:59,490 --> 00:14:04,110
actual addicting the right lines for the

338
00:14:02,010 --> 00:14:06,689
<font color="#E5E5E5">confidentiality threat the standard</font>

339
00:14:04,110 --> 00:14:09,209
<font color="#CCCCCC">climbing approach can be used either you</font>

340
00:14:06,690 --> 00:14:12,300
don't<font color="#E5E5E5"> use in secret dependent memory</font>

341
00:14:09,209 --> 00:14:14,369
<font color="#CCCCCC">access or if you use a lookup table this</font>

342
00:14:12,300 --> 00:14:15,990
lookup table should be deployed in a

343
00:14:14,370 --> 00:14:18,390
region of virtual memory that<font color="#CCCCCC"> is not</font>

344
00:14:15,990 --> 00:14:20,940
catchable so that the crypto service for

345
00:14:18,390 --> 00:14:24,240
example does not leave a footprint over

346
00:14:20,940 --> 00:14:26,430
the cash afterdeck tribution the result

347
00:14:24,240 --> 00:14:29,820
<font color="#E5E5E5">of some vector specific</font><font color="#CCCCCC"> Condor misery in</font>

348
00:14:26,430 --> 00:14:32,609
the case of diaper visor<font color="#CCCCCC"> linux we can</font>

349
00:14:29,820 --> 00:14:34,860
force linux to allocate all the page

350
00:14:32,610 --> 00:14:38,399
table in a small region of physical

351
00:14:34,860 --> 00:14:40,769
memory<font color="#E5E5E5"> then force also linux to allocate</font>

352
00:14:38,399 --> 00:14:43,019
this region<font color="#E5E5E5"> of memory as always</font><font color="#CCCCCC"> cashable</font>

353
00:14:40,769 --> 00:14:45,420
so that we know that<font color="#E5E5E5"> cannot be an incal</font>

354
00:14:43,019 --> 00:14:47,699
here and behavior in this region this

355
00:14:45,420 --> 00:14:49,560
clearly check required to change the

356
00:14:47,699 --> 00:14:53,160
coast rain jacket but<font color="#E5E5E5"> ever visor and</font>

357
00:14:49,560 --> 00:14:54,839
change the locator of limbs finally

358
00:14:53,160 --> 00:14:56,699
there are also some<font color="#CCCCCC"> hard work under me</font>

359
00:14:54,839 --> 00:14:59,570
<font color="#CCCCCC">sir I mean the main reason why we have</font>

360
00:14:56,699 --> 00:15:02,699
this channel is that<font color="#E5E5E5"> our door disregard</font>

361
00:14:59,570 --> 00:15:04,980
unexpected cash<font color="#CCCCCC"> it just</font><font color="#E5E5E5"> don't disregard</font>

362
00:15:02,699 --> 00:15:07,620
them if there is<font color="#CCCCCC"> a cache hit if there is</font>

363
00:15:04,980 --> 00:15:10,740
<font color="#CCCCCC">an expected cash it a week from</font><font color="#E5E5E5"> the cash</font>

364
00:15:07,620 --> 00:15:12,480
what you don't expect<font color="#E5E5E5"> to</font><font color="#CCCCCC"> bidder so some</font>

365
00:15:10,740 --> 00:15:15,720
concluding remarks in the paper we

366
00:15:12,480 --> 00:15:18,390
present also third attack this attack

367
00:15:15,720 --> 00:15:20,820
used self-modifying code to exploit

368
00:15:18,390 --> 00:15:23,279
incoherency between the struction cache

369
00:15:20,820 --> 00:15:27,199
and data cache and extract information

370
00:15:23,279 --> 00:15:29,970
from a pc<font color="#E5E5E5"> known secure application and</font>

371
00:15:27,199 --> 00:15:33,060
some ongoing work i mean<font color="#E5E5E5"> we discovered</font>

372
00:15:29,970 --> 00:15:35,040
this attack by trying<font color="#E5E5E5"> to remove</font><font color="#CCCCCC"> some of</font>

373
00:15:33,060 --> 00:15:37,319
the assumption that we did in<font color="#CCCCCC"> the formal</font>

374
00:15:35,040 --> 00:15:38,099
verification of their advisor so clearly

375
00:15:37,319 --> 00:15:40,319
how long

376
00:15:38,100 --> 00:15:42,540
term goal is to<font color="#E5E5E5"> have a general machinery</font>

377
00:15:40,319 --> 00:15:44,819
that all of us to repair a formal

378
00:15:42,540 --> 00:15:47,040
verification perform at a distraction

379
00:15:44,819 --> 00:15:48,810
set architecture level we are also

380
00:15:47,040 --> 00:15:51,750
experimenting with some other<font color="#CCCCCC"> low-level</font>

381
00:15:48,810 --> 00:15:53,339
<font color="#E5E5E5">feature of CPU like a TLB branch</font>

382
00:15:51,750 --> 00:15:55,470
prediction that can be used<font color="#E5E5E5"> build</font>

383
00:15:53,339 --> 00:15:57,870
similar channel similar story channel

384
00:15:55,470 --> 00:15:59,970
and finally we are evaluating some

385
00:15:57,870 --> 00:16:04,980
artwork on door measures that can speed

386
00:15:59,970 --> 00:16:07,529
up the<font color="#E5E5E5"> Condor misery so thank you for</font>

387
00:16:04,980 --> 00:16:10,199
<font color="#E5E5E5">your attention and do you have any</font>

388
00:16:07,529 --> 00:16:26,069
question<font color="#E5E5E5"> wait let's congratulate the</font>

389
00:16:10,199 --> 00:16:28,349
speaker very nice I think you do the Sun

390
00:16:26,069 --> 00:16:31,319
did you try this on<font color="#E5E5E5"> an x86 processor I</font>

391
00:16:28,350 --> 00:16:33,329
believe it does detect soul of a cash

392
00:16:31,319 --> 00:16:35,370
and<font color="#E5E5E5"> uncashed at the same time so we</font>

393
00:16:33,329 --> 00:16:37,229
didn't try with this with x86 so our

394
00:16:35,370 --> 00:16:39,839
experimentation has been done<font color="#CCCCCC"> ollie</font><font color="#E5E5E5"> on</font>

395
00:16:37,230 --> 00:16:42,089
arm so we experimented<font color="#CCCCCC"> a vis</font><font color="#E5E5E5"> rv7 and</font>

396
00:16:39,839 --> 00:16:44,370
then we check again<font color="#CCCCCC"> and we have accepted</font>

397
00:16:42,089 --> 00:16:46,439
the same behavior also<font color="#E5E5E5"> narviat now in</font>

398
00:16:44,370 --> 00:16:48,569
x86 we did experiment but the

399
00:16:46,439 --> 00:16:51,149
specification<font color="#E5E5E5"> explicitly state that you</font>

400
00:16:48,569 --> 00:16:53,310
should not have mismatched cash ability

401
00:16:51,149 --> 00:16:56,519
attribute on memory in this case the

402
00:16:53,310 --> 00:16:59,069
behavior of the<font color="#CCCCCC"> CPU can be unpredictable</font>

403
00:16:56,519 --> 00:17:00,779
let's say well if<font color="#E5E5E5"> you get a machine I</font>

404
00:16:59,069 --> 00:17:03,180
used to<font color="#E5E5E5"> work retail so let's say you get</font>

405
00:17:00,779 --> 00:17:05,880
a machine check yeah but all those

406
00:17:03,180 --> 00:17:08,760
checks are on the l1 cache if you do a

407
00:17:05,880 --> 00:17:11,850
selective flush of the l1 now that's not

408
00:17:08,760 --> 00:17:13,829
<font color="#E5E5E5">a CL flush instruction you actually work</font>

409
00:17:11,849 --> 00:17:16,168
the entire<font color="#E5E5E5"> set and push everything out</font>

410
00:17:13,829 --> 00:17:18,240
yeah it won't detect it yeah you could

411
00:17:16,169 --> 00:17:23,339
have you even more powerful attack yeah

412
00:17:18,240 --> 00:17:25,679
that's also a I David Hartley from

413
00:17:23,339 --> 00:17:28,950
kool Kone could you say anything<font color="#E5E5E5"> about</font>

414
00:17:25,679 --> 00:17:30,600
the interaction<font color="#CCCCCC"> between the overrides</font>

415
00:17:28,950 --> 00:17:33,450
<font color="#E5E5E5">and cash ability attributes between</font>

416
00:17:30,600 --> 00:17:37,530
stage<font color="#E5E5E5"> 1 and stage 2 translations in the</font>

417
00:17:33,450 --> 00:17:39,720
ARM architecture I mean kk he repeated

418
00:17:37,530 --> 00:17:42,059
in in the ARM architecture when you have

419
00:17:39,720 --> 00:17:44,850
two stages of translation yes you can

420
00:17:42,059 --> 00:17:46,770
override<font color="#E5E5E5"> the cache ability at Triple H</font>

421
00:17:44,850 --> 00:17:49,678
<font color="#CCCCCC">one so in this case we experiment</font><font color="#E5E5E5"> with</font>

422
00:17:46,770 --> 00:17:50,970
just one stage translation so in this

423
00:17:49,679 --> 00:17:51,870
case we are<font color="#E5E5E5"> a little bit lucky right</font>

424
00:17:50,970 --> 00:17:53,670
because which<font color="#CCCCCC"> once</font>

425
00:17:51,870 --> 00:17:55,320
translation we are complete control of

426
00:17:53,670 --> 00:17:57,450
the<font color="#CCCCCC"> cash ability in the case of the</font>

427
00:17:55,320 --> 00:18:00,210
proviso the<font color="#CCCCCC"> two-stage is even little bit</font>

428
00:17:57,450 --> 00:18:02,700
worse because the cash ability can be

429
00:18:00,210 --> 00:18:05,250
configured in the first stage and second

430
00:18:02,700 --> 00:18:08,760
stage and something become<font color="#CCCCCC"> cacheable</font>

431
00:18:05,250 --> 00:18:11,580
only if both stage say that this address

432
00:18:08,760 --> 00:18:13,740
should be occasioned right so in this

433
00:18:11,580 --> 00:18:16,080
case their<font color="#E5E5E5"> advisors really no control of</font>

434
00:18:13,740 --> 00:18:18,900
what the operating system is<font color="#CCCCCC"> doing and</font>

435
00:18:16,080 --> 00:18:20,370
the<font color="#CCCCCC"> only</font><font color="#E5E5E5"> way to prevent these mismatched</font>

436
00:18:18,900 --> 00:18:23,040
cash ability attributes to make

437
00:18:20,370 --> 00:18:25,199
everything non-cash<font color="#E5E5E5"> basically you cannot</font>

438
00:18:23,040 --> 00:18:27,059
force something to be cash by

439
00:18:25,200 --> 00:18:29,220
controlling<font color="#E5E5E5"> the second stage you just</font>

440
00:18:27,059 --> 00:18:31,530
can force something to be non<font color="#CCCCCC"> cacheable</font>

441
00:18:29,220 --> 00:18:34,170
so the only way for diaper visor to

442
00:18:31,530 --> 00:18:36,809
protect against is this scenario is

443
00:18:34,170 --> 00:18:41,280
basically to make the<font color="#CCCCCC"> wool critical part</font>

444
00:18:36,809 --> 00:18:44,160
of memory non<font color="#CCCCCC"> cashable thank you</font><font color="#E5E5E5"> I have</font>

445
00:18:41,280 --> 00:18:46,290
a quick<font color="#CCCCCC"> question you mentioned</font><font color="#E5E5E5"> so going</font>

446
00:18:44,160 --> 00:18:48,809
<font color="#CCCCCC">back to defenses do you think that</font>

447
00:18:46,290 --> 00:18:51,149
having large caches and locking the

448
00:18:48,809 --> 00:18:53,580
lines in the cache is that the way<font color="#E5E5E5"> to go</font>

449
00:18:51,150 --> 00:18:55,559
for<font color="#CCCCCC"> the praise that you mentioned for</font>

450
00:18:53,580 --> 00:18:57,240
reference monitors and such or are there

451
00:18:55,559 --> 00:18:58,800
other alternatives that you would also

452
00:18:57,240 --> 00:19:00,600
recommend yeah I<font color="#CCCCCC"> mean there is always</font>

453
00:18:58,800 --> 00:19:02,280
like a balance between like what you can

454
00:19:00,600 --> 00:19:04,110
do in artwork how much this<font color="#CCCCCC"> is expensive</font>

455
00:19:02,280 --> 00:19:06,240
<font color="#E5E5E5">in our work in order what you can do in</font>

456
00:19:04,110 --> 00:19:08,189
<font color="#CCCCCC">softer right I mean it's important to be</font>

457
00:19:06,240 --> 00:19:09,960
aware of this channel<font color="#E5E5E5"> I don't need I</font>

458
00:19:08,190 --> 00:19:11,820
don't say necessary that something has

459
00:19:09,960 --> 00:19:13,500
to be done in<font color="#CCCCCC"> Hardware I mean removing</font>

460
00:19:11,820 --> 00:19:14,730
these and expected cash it is some

461
00:19:13,500 --> 00:19:17,610
disease probably can be done really

462
00:19:14,730 --> 00:19:20,610
<font color="#E5E5E5">easily you know without like affecting</font>

463
00:19:17,610 --> 00:19:22,169
efficiency or like power consumption it

464
00:19:20,610 --> 00:19:24,209
can be for example more difficult to

465
00:19:22,170 --> 00:19:26,670
<font color="#E5E5E5">keep coherent distraction cache and data</font>

466
00:19:24,210 --> 00:19:28,290
cache so in this case your formal

467
00:19:26,670 --> 00:19:31,590
verification your<font color="#E5E5E5"> secure shop software</font>

468
00:19:28,290 --> 00:19:34,710
should be aware<font color="#E5E5E5"> that the architecture</font>

469
00:19:31,590 --> 00:19:36,449
does not support<font color="#E5E5E5"> these coherent and you</font>

470
00:19:34,710 --> 00:19:38,130
should<font color="#E5E5E5"> verify your software against this</font>

471
00:19:36,450 --> 00:19:40,200
kind of channel<font color="#E5E5E5"> and that's why you are</font>

472
00:19:38,130 --> 00:19:42,929
trying to unify you bring this kind<font color="#E5E5E5"> of</font>

473
00:19:40,200 --> 00:19:45,860
spec and exactly<font color="#E5E5E5"> very nice let's thank</font>

474
00:19:42,929 --> 00:19:45,860
the speaker once again

