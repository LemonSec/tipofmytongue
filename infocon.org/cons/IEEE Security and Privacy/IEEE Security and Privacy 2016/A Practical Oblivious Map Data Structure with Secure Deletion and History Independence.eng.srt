1
00:00:00,030 --> 00:00:04,049
so this is what I'm<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> talking</font>

2
00:00:01,170 --> 00:00:09,240
<font color="#E5E5E5">about is how</font><font color="#CCCCCC"> to store a key</font><font color="#E5E5E5"> value store</font>

3
00:00:04,049 --> 00:00:10,860
in untrusted cloud server and<font color="#E5E5E5"> this is</font>

4
00:00:09,240 --> 00:00:12,540
joint work<font color="#CCCCCC"> with</font><font color="#E5E5E5"> my two colleagues Adam</font>

5
00:00:10,860 --> 00:00:14,160
Aviv and<font color="#CCCCCC"> sungold choi who are right down</font>

6
00:00:12,540 --> 00:00:15,928
here<font color="#E5E5E5"> so I really want to give them some</font>

7
00:00:14,160 --> 00:00:17,520
<font color="#E5E5E5">credit</font><font color="#CCCCCC"> for convincing me that there</font><font color="#E5E5E5"> were</font>

8
00:00:15,929 --> 00:00:21,270
<font color="#E5E5E5">some</font><font color="#CCCCCC"> interesting problems to work on</font>

9
00:00:17,520 --> 00:00:23,160
here<font color="#E5E5E5"> and that's been pretty</font><font color="#CCCCCC"> great</font><font color="#E5E5E5"> so</font>

10
00:00:21,270 --> 00:00:26,070
here's what we're<font color="#E5E5E5"> gonna do we want to</font>

11
00:00:23,160 --> 00:00:27,990
store have a key value<font color="#E5E5E5"> store so like a</font>

12
00:00:26,070 --> 00:00:29,099
regular<font color="#E5E5E5"> map where you give some labels</font>

13
00:00:27,990 --> 00:00:31,650
and you can look<font color="#E5E5E5"> up</font><font color="#CCCCCC"> the corresponding</font>

14
00:00:29,099 --> 00:00:33,780
<font color="#E5E5E5">payload everything is going to be stored</font>

15
00:00:31,650 --> 00:00:35,040
remotely on a cloud server<font color="#E5E5E5"> and you want</font>

16
00:00:33,780 --> 00:00:37,890
to get sort of<font color="#E5E5E5"> the maximum amount of</font>

17
00:00:35,040 --> 00:00:39,660
privacy<font color="#CCCCCC"> where that cloud server that's</font>

18
00:00:37,890 --> 00:00:41,309
<font color="#E5E5E5">storing all</font><font color="#CCCCCC"> your data</font><font color="#E5E5E5"> doesn't know</font>

19
00:00:39,660 --> 00:00:42,480
<font color="#E5E5E5">anything about what you're storing and</font>

20
00:00:41,309 --> 00:00:44,910
also<font color="#E5E5E5"> doesn't know anything about the</font>

21
00:00:42,480 --> 00:00:46,620
access<font color="#E5E5E5"> pattern so beyond just encrypting</font>

22
00:00:44,910 --> 00:00:49,199
the values of what you're storing you

23
00:00:46,620 --> 00:00:50,968
<font color="#CCCCCC">also want to encrypt</font><font color="#E5E5E5"> the correlations</font>

24
00:00:49,200 --> 00:00:53,340
<font color="#E5E5E5">between what you're accessing when and</font>

25
00:00:50,969 --> 00:00:55,020
things like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> and we also are</font>

26
00:00:53,340 --> 00:00:56,280
<font color="#E5E5E5">thinking</font><font color="#CCCCCC"> about some even more powerful</font>

27
00:00:55,020 --> 00:00:58,170
attack models other<font color="#E5E5E5"> than just</font>

28
00:00:56,280 --> 00:00:59,879
obliviousness<font color="#E5E5E5"> so we'll see what</font><font color="#CCCCCC"> that</font>

29
00:00:58,170 --> 00:01:01,170
<font color="#E5E5E5">means secure deletion and history</font>

30
00:00:59,879 --> 00:01:03,269
<font color="#E5E5E5">independence is what we looked at as</font>

31
00:01:01,170 --> 00:01:06,299
well<font color="#CCCCCC"> and besides just</font><font color="#E5E5E5"> the security we</font>

32
00:01:03,270 --> 00:01:08,640
want<font color="#E5E5E5"> it to be</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> usable and what</font>

33
00:01:06,299 --> 00:01:12,000
that means<font color="#CCCCCC"> is we want it</font><font color="#E5E5E5"> to be fast</font><font color="#CCCCCC"> so</font>

34
00:01:08,640 --> 00:01:13,409
here's the basic<font color="#E5E5E5"> setting since the this</font>

35
00:01:12,000 --> 00:01:16,140
there's gonna be I<font color="#CCCCCC"> think like three</font>

36
00:01:13,409 --> 00:01:18,240
<font color="#E5E5E5">talks at least about a Rams</font><font color="#CCCCCC"> so you might</font>

37
00:01:16,140 --> 00:01:21,150
as well have a basic<font color="#CCCCCC"> idea</font><font color="#E5E5E5"> of what that</font>

38
00:01:18,240 --> 00:01:23,130
is<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> principle is</font><font color="#CCCCCC"> that you are</font>

39
00:01:21,150 --> 00:01:25,439
storing<font color="#E5E5E5"> some kind of a key locally and</font>

40
00:01:23,130 --> 00:01:27,449
you're interacting<font color="#CCCCCC"> with a cloud server</font>

41
00:01:25,439 --> 00:01:30,419
and you're assuming<font color="#CCCCCC"> that someone is</font><font color="#E5E5E5"> in</font>

42
00:01:27,450 --> 00:01:33,560
the middle<font color="#CCCCCC"> that's spying on all of your</font>

43
00:01:30,420 --> 00:01:36,960
communication<font color="#E5E5E5"> and can see everything and</font>

44
00:01:33,560 --> 00:01:39,150
and what you're trying<font color="#CCCCCC"> to</font><font color="#E5E5E5"> hide is not</font>

45
00:01:36,960 --> 00:01:40,589
only the contents of<font color="#E5E5E5"> your data but also</font>

46
00:01:39,150 --> 00:01:42,509
the access patterns of what you're

47
00:01:40,590 --> 00:01:44,579
<font color="#E5E5E5">accessing so you can think of it as</font>

48
00:01:42,509 --> 00:01:47,220
<font color="#CCCCCC">hiding not just the payloads but also</font>

49
00:01:44,579 --> 00:01:50,130
the metadata<font color="#E5E5E5"> and I think a relevant</font>

50
00:01:47,220 --> 00:01:53,009
quote here is<font color="#CCCCCC"> from our former NSA</font>

51
00:01:50,130 --> 00:01:54,570
<font color="#E5E5E5">director that said I think last year or</font>

52
00:01:53,009 --> 00:01:57,000
two<font color="#CCCCCC"> years ago</font><font color="#E5E5E5"> he said we kill people</font>

53
00:01:54,570 --> 00:01:58,949
<font color="#CCCCCC">based</font><font color="#E5E5E5"> on metadata so a little bit of a</font>

54
00:01:57,000 --> 00:02:00,689
<font color="#E5E5E5">chilling</font><font color="#CCCCCC"> reminder in case you're</font><font color="#E5E5E5"> not</font>

55
00:01:58,950 --> 00:02:04,619
convinced that it's worth it's a<font color="#E5E5E5"> hide</font>

56
00:02:00,689 --> 00:02:07,020
access patterns<font color="#E5E5E5"> somebody said that they</font>

57
00:02:04,619 --> 00:02:09,810
<font color="#E5E5E5">kill</font><font color="#CCCCCC"> people based</font><font color="#E5E5E5"> on metadata so we</font>

58
00:02:07,020 --> 00:02:10,919
should maybe<font color="#CCCCCC"> think about that</font><font color="#E5E5E5"> and what</font>

59
00:02:09,810 --> 00:02:13,510
we're<font color="#E5E5E5"> going to do is to dress some</font>

60
00:02:10,919 --> 00:02:14,738
issues in these existing construction

61
00:02:13,510 --> 00:02:16,870
<font color="#E5E5E5">in our work and the first problem</font><font color="#CCCCCC"> that</font>

62
00:02:14,739 --> 00:02:19,810
<font color="#CCCCCC">we looked</font><font color="#E5E5E5"> at is what if</font><font color="#CCCCCC"> this size of</font>

63
00:02:16,870 --> 00:02:21,610
<font color="#E5E5E5">data is not fixed into fixed size blocks</font>

64
00:02:19,810 --> 00:02:22,900
that<font color="#CCCCCC"> are all</font><font color="#E5E5E5"> exactly the same</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> what if</font>

65
00:02:21,610 --> 00:02:24,099
you're<font color="#E5E5E5"> storing file some of them are a</font>

66
00:02:22,900 --> 00:02:26,230
little<font color="#E5E5E5"> bit larger</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> of them are a</font>

67
00:02:24,099 --> 00:02:26,738
little bit<font color="#E5E5E5"> smaller and what can you do</font>

68
00:02:26,230 --> 00:02:31,298
<font color="#E5E5E5">about that</font>

69
00:02:26,739 --> 00:02:32,860
<font color="#CCCCCC">well one</font><font color="#E5E5E5"> of the what</font><font color="#CCCCCC"> Oh RAM leaks</font><font color="#E5E5E5"> is the</font>

70
00:02:31,299 --> 00:02:34,120
amount<font color="#E5E5E5"> of operations</font><font color="#CCCCCC"> that you're</font>

71
00:02:32,860 --> 00:02:36,340
<font color="#CCCCCC">performing</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> an O Ram</font>

72
00:02:34,120 --> 00:02:38,260
so<font color="#CCCCCC"> it's oblivious to what the access</font>

73
00:02:36,340 --> 00:02:40,299
patterns are but an attacker can see how

74
00:02:38,260 --> 00:02:42,459
much<font color="#CCCCCC"> communication you're doing and from</font>

75
00:02:40,299 --> 00:02:44,349
<font color="#E5E5E5">that can say exactly how</font><font color="#CCCCCC"> many</font><font color="#E5E5E5"> operations</font>

76
00:02:42,459 --> 00:02:47,019
<font color="#E5E5E5">you did so if you just break up your</font>

77
00:02:44,349 --> 00:02:49,599
large files into<font color="#E5E5E5"> some number</font><font color="#CCCCCC"> of blocks</font>

78
00:02:47,019 --> 00:02:52,720
<font color="#CCCCCC">well now there might</font><font color="#E5E5E5"> be a correlation</font>

79
00:02:49,599 --> 00:02:54,099
<font color="#CCCCCC">that can be done between</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> size</font><font color="#E5E5E5"> of the</font>

80
00:02:52,720 --> 00:02:57,849
file the size of whatever<font color="#CCCCCC"> you're doing</font>

81
00:02:54,099 --> 00:02:58,720
<font color="#E5E5E5">and when you did</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and so the first</font>

82
00:02:57,849 --> 00:03:01,238
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> we looked</font><font color="#E5E5E5"> at in the first</font>

83
00:02:58,720 --> 00:03:03,010
<font color="#E5E5E5">construction we'll see is what we call</font>

84
00:03:01,239 --> 00:03:05,260
the vo<font color="#CCCCCC"> Ram where the V stands for</font>

85
00:03:03,010 --> 00:03:07,659
variable<font color="#E5E5E5"> size blocks and what this</font>

86
00:03:05,260 --> 00:03:10,269
allows you to<font color="#E5E5E5"> do is to store variable</font>

87
00:03:07,659 --> 00:03:12,040
size blocks within<font color="#CCCCCC"> an O</font><font color="#E5E5E5"> Ram and still</font>

88
00:03:10,269 --> 00:03:14,280
get<font color="#E5E5E5"> that obliviousness so there's not</font>

89
00:03:12,040 --> 00:03:17,530
going<font color="#E5E5E5"> to be any</font><font color="#CCCCCC"> correlation as possible</font>

90
00:03:14,280 --> 00:03:20,349
so the second issue<font color="#E5E5E5"> is going beyond just</font>

91
00:03:17,530 --> 00:03:22,780
<font color="#E5E5E5">a Rams sometimes you want to store a</font>

92
00:03:20,349 --> 00:03:24,910
data<font color="#E5E5E5"> structure inside your RAM and this</font>

93
00:03:22,780 --> 00:03:27,849
was looked at a couple<font color="#E5E5E5"> years ago in this</font>

94
00:03:24,910 --> 00:03:29,829
great paper at CCS<font color="#E5E5E5"> and the basic idea</font><font color="#CCCCCC"> as</font>

95
00:03:27,849 --> 00:03:32,589
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can see from</font><font color="#CCCCCC"> my excellent picture is</font>

96
00:03:29,829 --> 00:03:34,629
that<font color="#CCCCCC"> you have an AVL tree</font><font color="#E5E5E5"> or some kind</font>

97
00:03:32,590 --> 00:03:36,370
of other tree that's slapped on top of

98
00:03:34,629 --> 00:03:38,260
the<font color="#E5E5E5"> o Ram meaning that each one</font><font color="#CCCCCC"> of the</font>

99
00:03:36,370 --> 00:03:40,299
nodes in<font color="#CCCCCC"> that data</font><font color="#E5E5E5"> structure is going to</font>

100
00:03:38,260 --> 00:03:42,489
be<font color="#CCCCCC"> stored in a single</font><font color="#E5E5E5"> block in the o Ram</font>

101
00:03:40,299 --> 00:03:43,660
<font color="#E5E5E5">and then what kind</font><font color="#CCCCCC"> of things happen here</font>

102
00:03:42,489 --> 00:03:45,129
<font color="#E5E5E5">well they looked at a lot of</font><font color="#CCCCCC"> these</font>

103
00:03:43,660 --> 00:03:47,769
things<font color="#E5E5E5"> in this paper and came up with</font>

104
00:03:45,129 --> 00:03:49,929
<font color="#E5E5E5">some great</font><font color="#CCCCCC"> ideas</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> there's another</font>

105
00:03:47,769 --> 00:03:51,669
issue similarly to the different size

106
00:03:49,930 --> 00:03:53,139
files if you<font color="#E5E5E5"> think about an AVL tree</font>

107
00:03:51,669 --> 00:03:56,139
different nodes are at different<font color="#E5E5E5"> heights</font>

108
00:03:53,139 --> 00:03:58,720
<font color="#E5E5E5">so if I access some node normally if</font>

109
00:03:56,139 --> 00:04:00,129
it's at height<font color="#CCCCCC"> 2</font><font color="#E5E5E5"> then that should</font><font color="#CCCCCC"> be a</font>

110
00:03:58,720 --> 00:04:01,419
little<font color="#E5E5E5"> bit of a faster access than</font>

111
00:04:00,129 --> 00:04:05,078
accessing<font color="#E5E5E5"> something else that's at</font>

112
00:04:01,419 --> 00:04:06,280
height 10 but wait if I allow my data

113
00:04:05,079 --> 00:04:07,989
structure<font color="#CCCCCC"> to</font><font color="#E5E5E5"> take a different running</font>

114
00:04:06,280 --> 00:04:09,579
time depending<font color="#E5E5E5"> on what I'm accessing</font>

115
00:04:07,989 --> 00:04:11,919
that's going to break the obliviousness

116
00:04:09,579 --> 00:04:13,840
property so what you have<font color="#E5E5E5"> to do is you</font>

117
00:04:11,919 --> 00:04:16,090
have to<font color="#E5E5E5"> perform dummy operations up to</font>

118
00:04:13,840 --> 00:04:17,500
this<font color="#E5E5E5"> worst-case cost bound so</font><font color="#CCCCCC"> the second</font>

119
00:04:16,089 --> 00:04:19,478
<font color="#E5E5E5">thing we're going to see is a new kind</font>

120
00:04:17,500 --> 00:04:21,849
<font color="#CCCCCC">of data structure</font><font color="#E5E5E5"> that's called a herb</font>

121
00:04:19,478 --> 00:04:23,650
tree with this long title that will

122
00:04:21,849 --> 00:04:25,780
<font color="#CCCCCC">actually see what all</font><font color="#E5E5E5"> those parts mean</font>

123
00:04:23,650 --> 00:04:27,150
<font color="#CCCCCC">and it's a fixed height tree data</font>

124
00:04:25,780 --> 00:04:29,130
structure so it's a

125
00:04:27,150 --> 00:04:30,690
modification of some<font color="#E5E5E5"> existing history</font>

126
00:04:29,130 --> 00:04:31,940
independent<font color="#E5E5E5"> data structures but the</font>

127
00:04:30,690 --> 00:04:34,590
advantage<font color="#CCCCCC"> that you're going</font><font color="#E5E5E5"> to get is</font>

128
00:04:31,940 --> 00:04:37,169
<font color="#E5E5E5">it's gonna work very well</font><font color="#CCCCCC"> within</font><font color="#E5E5E5"> this</font>

129
00:04:34,590 --> 00:04:38,549
<font color="#E5E5E5">oblivious setting</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right the third</font>

130
00:04:37,169 --> 00:04:40,080
thing we looked<font color="#E5E5E5"> at if you were at the</font>

131
00:04:38,550 --> 00:04:42,330
<font color="#E5E5E5">last talk in the first session this</font>

132
00:04:40,080 --> 00:04:44,609
morning<font color="#E5E5E5"> it was looking at multiple</font>

133
00:04:42,330 --> 00:04:46,258
attack vectors and there is this nice

134
00:04:44,610 --> 00:04:48,509
picture<font color="#CCCCCC"> of someone stealing your</font><font color="#E5E5E5"> cell</font>

135
00:04:46,259 --> 00:04:49,949
phone so<font color="#E5E5E5"> what if this spy that's been</font>

136
00:04:48,509 --> 00:04:51,870
listening to<font color="#CCCCCC"> all of your cloud</font>

137
00:04:49,949 --> 00:04:53,669
communication and knows<font color="#E5E5E5"> everything that</font>

138
00:04:51,870 --> 00:04:55,919
<font color="#E5E5E5">you've ever stored in the server what if</font>

139
00:04:53,669 --> 00:04:56,789
they also<font color="#CCCCCC"> chorus your private key okay</font>

140
00:04:55,919 --> 00:04:58,560
so this is what we call<font color="#E5E5E5"> it a</font>

141
00:04:56,789 --> 00:05:00,270
catastrophic<font color="#CCCCCC"> attack and it</font><font color="#E5E5E5"> is</font>

142
00:04:58,560 --> 00:05:01,680
catastrophic<font color="#CCCCCC"> all of your data is</font>

143
00:05:00,270 --> 00:05:03,180
definitely<font color="#E5E5E5"> going to be revealed</font>

144
00:05:01,680 --> 00:05:05,520
whatever you're storing because they

145
00:05:03,180 --> 00:05:07,260
have your private key however you<font color="#E5E5E5"> would</font>

146
00:05:05,520 --> 00:05:09,448
still<font color="#CCCCCC"> like to get some security</font><font color="#E5E5E5"> here in</font>

147
00:05:07,260 --> 00:05:11,490
particular<font color="#CCCCCC"> whatever you've done</font><font color="#E5E5E5"> in the</font>

148
00:05:09,449 --> 00:05:12,960
past<font color="#CCCCCC"> that you've deleted from your data</font>

149
00:05:11,490 --> 00:05:15,990
structure<font color="#CCCCCC"> before your private key gets</font>

150
00:05:12,960 --> 00:05:18,419
stolen<font color="#CCCCCC"> you want that to not be able to</font>

151
00:05:15,990 --> 00:05:20,880
be<font color="#E5E5E5"> accessed by this catastrophic very</font>

152
00:05:18,419 --> 00:05:22,889
powerful attacker<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the only way that</font>

153
00:05:20,880 --> 00:05:25,289
<font color="#CCCCCC">we could actually</font><font color="#E5E5E5"> think of that you</font>

154
00:05:22,889 --> 00:05:26,910
could<font color="#E5E5E5"> do this before our work was to</font>

155
00:05:25,289 --> 00:05:28,710
just do the very stupid thing of

156
00:05:26,910 --> 00:05:30,270
download the entire database<font color="#E5E5E5"> and</font>

157
00:05:28,710 --> 00:05:34,620
<font color="#E5E5E5">re-encrypted and send it back every time</font>

158
00:05:30,270 --> 00:05:35,490
and so we have our<font color="#E5E5E5"> vo</font><font color="#CCCCCC"> RAM + herb when</font>

159
00:05:34,620 --> 00:05:37,410
you put them<font color="#E5E5E5"> together</font>

160
00:05:35,490 --> 00:05:39,090
besides this extra performance<font color="#E5E5E5"> we're</font>

161
00:05:37,410 --> 00:05:40,590
also going to get<font color="#E5E5E5"> these extra security</font>

162
00:05:39,090 --> 00:05:43,679
guarantees in the case of a very

163
00:05:40,590 --> 00:05:45,060
powerful attacker<font color="#CCCCCC"> okay so here's a</font>

164
00:05:43,680 --> 00:05:48,360
little<font color="#CCCCCC"> bit of a line of</font><font color="#E5E5E5"> what we're going</font>

165
00:05:45,060 --> 00:05:51,659
to see again there's<font color="#E5E5E5"> these</font><font color="#CCCCCC"> two new</font>

166
00:05:48,360 --> 00:05:53,820
<font color="#CCCCCC">things that</font><font color="#E5E5E5"> are really</font><font color="#CCCCCC"> just some not too</font>

167
00:05:51,659 --> 00:05:56,610
difficult modifications of prior work so

168
00:05:53,820 --> 00:05:58,320
the<font color="#CCCCCC"> VRM and then the herb which will be</font>

169
00:05:56,610 --> 00:05:59,490
stored inside<font color="#E5E5E5"> the vo</font><font color="#CCCCCC"> RAM so we're gonna</font>

170
00:05:58,320 --> 00:06:01,770
look<font color="#E5E5E5"> at both of those a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> how</font>

171
00:05:59,490 --> 00:06:05,099
they work and<font color="#E5E5E5"> then you'll see that they</font>

172
00:06:01,770 --> 00:06:08,370
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> do work so here's the a little</font>

173
00:06:05,099 --> 00:06:09,960
bit more about the vo<font color="#E5E5E5"> Ram</font><font color="#CCCCCC"> the general</font>

174
00:06:08,370 --> 00:06:12,510
<font color="#E5E5E5">principle is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> there's an overhead</font>

175
00:06:09,960 --> 00:06:15,419
associated<font color="#CCCCCC"> with path</font><font color="#E5E5E5"> o Ram so if you're</font>

176
00:06:12,510 --> 00:06:16,620
familiar with the path<font color="#CCCCCC"> o RAM then this</font>

177
00:06:15,419 --> 00:06:18,080
will make sense<font color="#CCCCCC"> to</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> not you're</font>

178
00:06:16,620 --> 00:06:20,909
<font color="#CCCCCC">gonna see an</font><font color="#E5E5E5"> example in a second</font><font color="#CCCCCC"> anyway</font>

179
00:06:18,080 --> 00:06:22,680
the that overhead<font color="#E5E5E5"> that's associated</font><font color="#CCCCCC"> with</font>

180
00:06:20,909 --> 00:06:24,780
each<font color="#E5E5E5"> of the operations in a</font><font color="#CCCCCC"> Panther Ram</font>

181
00:06:22,680 --> 00:06:27,419
we can take advantage<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that to be able</font>

182
00:06:24,780 --> 00:06:30,150
<font color="#E5E5E5">to store variable size blocks so what</font>

183
00:06:27,419 --> 00:06:32,039
we're<font color="#E5E5E5"> going to see is at the top here</font><font color="#CCCCCC"> so</font>

184
00:06:30,150 --> 00:06:35,789
this is a picture<font color="#CCCCCC"> of our vo RAM at the</font>

185
00:06:32,039 --> 00:06:37,289
top each one of<font color="#E5E5E5"> these blocks is a bucket</font>

186
00:06:35,789 --> 00:06:38,639
<font color="#E5E5E5">that's stored on the back end so</font>

187
00:06:37,289 --> 00:06:39,960
everything at the top<font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually a</font>

188
00:06:38,639 --> 00:06:40,810
piece<font color="#CCCCCC"> of information that are</font><font color="#E5E5E5"> stored on</font>

189
00:06:39,960 --> 00:06:42,969
<font color="#E5E5E5">the server</font>

190
00:06:40,810 --> 00:06:45,370
and then the actual blocks that you're

191
00:06:42,970 --> 00:06:48,460
interacting<font color="#CCCCCC"> with are these variable size</font>

192
00:06:45,370 --> 00:06:50,200
color blocks at the<font color="#E5E5E5"> bottom</font><font color="#CCCCCC"> and so the</font>

193
00:06:48,460 --> 00:06:51,909
<font color="#CCCCCC">server's restoring these fixed</font><font color="#E5E5E5"> size</font>

194
00:06:50,200 --> 00:06:54,490
buckets<font color="#E5E5E5"> but within those buckets</font><font color="#CCCCCC"> our</font>

195
00:06:51,910 --> 00:06:58,120
variable size blocks<font color="#E5E5E5"> and you can see</font>

196
00:06:54,490 --> 00:06:59,740
that the larger ones<font color="#E5E5E5"> like the blue block</font>

197
00:06:58,120 --> 00:07:03,520
is broken up<font color="#E5E5E5"> into three</font><font color="#CCCCCC"> different parts</font>

198
00:06:59,740 --> 00:07:05,650
<font color="#CCCCCC">which we call chunks so here's the</font><font color="#E5E5E5"> data</font>

199
00:07:03,520 --> 00:07:07,060
structure and you can<font color="#CCCCCC"> see that</font>

200
00:07:05,650 --> 00:07:09,340
everything<font color="#E5E5E5"> is encrypted with different</font>

201
00:07:07,060 --> 00:07:12,639
keys<font color="#CCCCCC"> that are</font><font color="#E5E5E5"> each key is stored in the</font>

202
00:07:09,340 --> 00:07:14,739
parents node and let's see how this

203
00:07:12,639 --> 00:07:16,660
works<font color="#CCCCCC"> so if I'm doing an any kind</font><font color="#E5E5E5"> of</font>

204
00:07:14,740 --> 00:07:18,940
operation where let's say<font color="#CCCCCC"> I'm looking up</font>

205
00:07:16,660 --> 00:07:20,979
this yellow block so what I'm<font color="#E5E5E5"> gonna do</font>

206
00:07:18,940 --> 00:07:22,600
is look<font color="#E5E5E5"> along the path for that block so</font>

207
00:07:20,979 --> 00:07:24,490
<font color="#CCCCCC">you notice that</font><font color="#E5E5E5"> each block is associated</font>

208
00:07:22,600 --> 00:07:26,380
with<font color="#E5E5E5"> an index so</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> gonna look up</font>

209
00:07:24,490 --> 00:07:28,030
everything along that path<font color="#E5E5E5"> you're going</font>

210
00:07:26,380 --> 00:07:29,950
to read<font color="#E5E5E5"> that into your local stash and</font>

211
00:07:28,030 --> 00:07:31,388
combine the<font color="#CCCCCC"> different pieces</font><font color="#E5E5E5"> the</font>

212
00:07:29,950 --> 00:07:33,729
different chunks<font color="#E5E5E5"> of the blocks that you</font>

213
00:07:31,389 --> 00:07:36,070
find so we'll get in our stash we'll get

214
00:07:33,729 --> 00:07:38,440
the entirely of that<font color="#E5E5E5"> yellow block and</font>

215
00:07:36,070 --> 00:07:40,270
we'll also get part of the purple<font color="#CCCCCC"> block</font>

216
00:07:38,440 --> 00:07:41,590
but not the other parts but<font color="#CCCCCC"> that doesn't</font>

217
00:07:40,270 --> 00:07:43,780
matter<font color="#E5E5E5"> because we're only</font><font color="#CCCCCC"> looking up the</font>

218
00:07:41,590 --> 00:07:45,539
yellow thing now what<font color="#E5E5E5"> you'll notice if</font>

219
00:07:43,780 --> 00:07:48,760
<font color="#E5E5E5">you think it's a mistake</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> my slides</font>

220
00:07:45,539 --> 00:07:52,090
<font color="#CCCCCC">it's not so the the number has changed</font>

221
00:07:48,760 --> 00:07:53,409
<font color="#E5E5E5">so the numbers change from 1</font><font color="#CCCCCC"> to index 6</font>

222
00:07:52,090 --> 00:07:55,989
<font color="#E5E5E5">that's where you get the obliviousness</font>

223
00:07:53,410 --> 00:07:58,300
from and this<font color="#E5E5E5"> is this is all from</font><font color="#CCCCCC"> patho</font>

224
00:07:55,990 --> 00:07:59,350
<font color="#CCCCCC">Ram</font><font color="#E5E5E5"> except for the variable size</font><font color="#CCCCCC"> part</font><font color="#E5E5E5"> so</font>

225
00:07:58,300 --> 00:08:02,320
I don't want you to think<font color="#CCCCCC"> that I came</font><font color="#E5E5E5"> up</font>

226
00:07:59,350 --> 00:08:03,850
<font color="#CCCCCC">with all this so the index changes</font>

227
00:08:02,320 --> 00:08:05,440
that's what<font color="#E5E5E5"> provides obliviousness so</font>

228
00:08:03,850 --> 00:08:07,390
it's gonna be randomly reassigned to a

229
00:08:05,440 --> 00:08:09,280
<font color="#E5E5E5">different path the next</font><font color="#CCCCCC"> time and then</font>

230
00:08:07,390 --> 00:08:10,719
you write everything<font color="#E5E5E5"> back according</font><font color="#CCCCCC"> to</font>

231
00:08:09,280 --> 00:08:12,460
<font color="#E5E5E5">their new rules</font><font color="#CCCCCC"> according to those new</font>

232
00:08:10,720 --> 00:08:13,840
paths<font color="#E5E5E5"> and one of the things that I want</font>

233
00:08:12,460 --> 00:08:16,810
<font color="#CCCCCC">you to</font><font color="#E5E5E5"> notice in this diagram is</font><font color="#CCCCCC"> that</font>

234
00:08:13,840 --> 00:08:18,369
<font color="#E5E5E5">the keys changed along that path so this</font>

235
00:08:16,810 --> 00:08:19,720
is actually the secure deletion part

236
00:08:18,370 --> 00:08:22,090
that when we write something<font color="#CCCCCC"> back we</font>

237
00:08:19,720 --> 00:08:25,600
change all the keys along<font color="#E5E5E5"> the path to</font>

238
00:08:22,090 --> 00:08:27,070
that<font color="#E5E5E5"> original thing that we read so a</font>

239
00:08:25,600 --> 00:08:28,960
little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> details of what we get</font>

240
00:08:27,070 --> 00:08:30,520
out<font color="#CCCCCC"> of this again the identifiers are</font>

241
00:08:28,960 --> 00:08:32,020
<font color="#CCCCCC">chosen randomly and</font><font color="#E5E5E5"> that's what</font><font color="#CCCCCC"> provides</font>

242
00:08:30,520 --> 00:08:35,079
<font color="#E5E5E5">the obliviousness but we'll also see</font>

243
00:08:32,020 --> 00:08:37,208
it's a<font color="#E5E5E5"> little bit of an issue</font><font color="#CCCCCC"> this is a</font>

244
00:08:35,080 --> 00:08:39,010
pretty efficient construction<font color="#CCCCCC"> in</font><font color="#E5E5E5"> that</font>

245
00:08:37,208 --> 00:08:41,348
you can achieve<font color="#E5E5E5"> only two rounds of</font>

246
00:08:39,010 --> 00:08:43,718
communication for every operation<font color="#E5E5E5"> so all</font>

247
00:08:41,349 --> 00:08:45,640
the buckets<font color="#E5E5E5"> along the path that</font><font color="#CCCCCC"> you're</font>

248
00:08:43,719 --> 00:08:47,170
reading<font color="#E5E5E5"> they can be fetched in parallel</font>

249
00:08:45,640 --> 00:08:48,100
<font color="#E5E5E5">because you know exactly</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> path that</font>

250
00:08:47,170 --> 00:08:49,689
<font color="#E5E5E5">you're going to be reading</font><font color="#CCCCCC"> and then they</font>

251
00:08:48,100 --> 00:08:52,390
can be<font color="#CCCCCC"> written back</font><font color="#E5E5E5"> in parallel as</font><font color="#CCCCCC"> well</font>

252
00:08:49,690 --> 00:08:53,860
<font color="#E5E5E5">so that can be</font><font color="#CCCCCC"> very fast</font><font color="#E5E5E5"> and the secure</font>

253
00:08:52,390 --> 00:08:57,040
deletion part comes in

254
00:08:53,860 --> 00:08:59,740
in that since<font color="#CCCCCC"> I'm rekeying the entire</font>

255
00:08:57,040 --> 00:09:01,930
path every time including the<font color="#CCCCCC"> the root</font>

256
00:08:59,740 --> 00:09:04,779
node<font color="#E5E5E5"> what that means is that any prior</font>

257
00:09:01,930 --> 00:09:07,029
<font color="#E5E5E5">states of the tree aren't recoverable by</font>

258
00:09:04,779 --> 00:09:08,170
anyone including by the original<font color="#CCCCCC"> user</font>

259
00:09:07,029 --> 00:09:09,880
because you throw away<font color="#E5E5E5"> that old</font>

260
00:09:08,170 --> 00:09:11,620
encryption key<font color="#E5E5E5"> and so that's what's</font>

261
00:09:09,880 --> 00:09:15,010
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> provide a secure deletion in</font>

262
00:09:11,620 --> 00:09:18,220
the<font color="#E5E5E5"> vo</font><font color="#CCCCCC"> RAM context okay now a big</font>

263
00:09:15,010 --> 00:09:19,810
question<font color="#CCCCCC"> in</font><font color="#E5E5E5"> any om construction is how</font>

264
00:09:18,220 --> 00:09:22,660
big do the buckets have to be so what's

265
00:09:19,810 --> 00:09:26,560
the overhead what's the kind of wastage

266
00:09:22,660 --> 00:09:29,860
that we have and for our vo<font color="#E5E5E5"> Ram</font><font color="#CCCCCC"> what we</font>

267
00:09:26,560 --> 00:09:31,959
have is roughly a<font color="#CCCCCC"> 20 times blow-up which</font>

268
00:09:29,860 --> 00:09:33,100
is not great<font color="#CCCCCC"> and but</font><font color="#E5E5E5"> this is under this</font>

269
00:09:31,959 --> 00:09:35,079
<font color="#E5E5E5">restriction that I want you to remember</font>

270
00:09:33,100 --> 00:09:36,610
that<font color="#CCCCCC"> the size of the variable size</font>

271
00:09:35,079 --> 00:09:38,800
things are<font color="#E5E5E5"> restoring they have to be</font>

272
00:09:36,610 --> 00:09:42,130
they<font color="#CCCCCC"> can vary but they can't vary that</font>

273
00:09:38,800 --> 00:09:43,660
<font color="#E5E5E5">much</font><font color="#CCCCCC"> so the tail of the distribution of</font>

274
00:09:42,130 --> 00:09:45,459
whatever the sizes<font color="#E5E5E5"> of things that you're</font>

275
00:09:43,660 --> 00:09:48,069
storing<font color="#E5E5E5"> needs to be a pretty light tail</font>

276
00:09:45,459 --> 00:09:50,290
needs to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> a geometric distribution so</font>

277
00:09:48,070 --> 00:09:52,480
they can vary but they can't vary hugely

278
00:09:50,290 --> 00:09:55,149
<font color="#E5E5E5">or</font><font color="#CCCCCC"> also you'll lose your efficiency and</font>

279
00:09:52,480 --> 00:09:59,220
if the<font color="#CCCCCC"> 20 seems really bad to you it is</font>

280
00:09:55,149 --> 00:10:01,720
<font color="#E5E5E5">because</font><font color="#CCCCCC"> in fact it's only 6 all</font><font color="#E5E5E5"> right</font>

281
00:09:59,220 --> 00:10:03,640
the next thing I want<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about is</font>

282
00:10:01,720 --> 00:10:04,690
the herb tree so<font color="#E5E5E5"> this is the new data</font>

283
00:10:03,640 --> 00:10:07,240
structure<font color="#CCCCCC"> that we're gonna be storing</font>

284
00:10:04,690 --> 00:10:09,399
inside<font color="#E5E5E5"> our vo Ram and just a little</font><font color="#CCCCCC"> bit</font>

285
00:10:07,240 --> 00:10:11,410
<font color="#E5E5E5">of a motivation we have these indexes in</font>

286
00:10:09,399 --> 00:10:13,029
the<font color="#E5E5E5"> vo</font><font color="#CCCCCC"> Ram but they don't mean anything</font>

287
00:10:11,410 --> 00:10:14,649
<font color="#E5E5E5">and they're also changing every time so</font>

288
00:10:13,029 --> 00:10:16,779
<font color="#E5E5E5">you have kind of a chicken and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> egg</font>

289
00:10:14,649 --> 00:10:17,949
<font color="#CCCCCC">problem of okay you have this awesome</font>

290
00:10:16,779 --> 00:10:19,930
data structure how do you remember the

291
00:10:17,949 --> 00:10:22,120
indexes of<font color="#E5E5E5"> everything the standard</font>

292
00:10:19,930 --> 00:10:24,130
solution<font color="#CCCCCC"> is you store a position map in</font>

293
00:10:22,120 --> 00:10:25,750
recursively smaller<font color="#CCCCCC"> or</font><font color="#E5E5E5"> ramps which is</font>

294
00:10:24,130 --> 00:10:28,839
one of<font color="#CCCCCC"> these beautiful theoretic</font>

295
00:10:25,750 --> 00:10:31,149
constructions that<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> sounds nice</font>

296
00:10:28,839 --> 00:10:35,230
and then if you go<font color="#E5E5E5"> to try to make that</font>

297
00:10:31,149 --> 00:10:37,750
<font color="#E5E5E5">work</font><font color="#CCCCCC"> you're like it's not great and</font><font color="#E5E5E5"> the</font>

298
00:10:35,230 --> 00:10:39,190
office of the oblivious data structures

299
00:10:37,750 --> 00:10:40,390
paper<font color="#E5E5E5"> actually came up with</font><font color="#CCCCCC"> a great</font>

300
00:10:39,190 --> 00:10:42,339
observation<font color="#CCCCCC"> which is that if you're</font>

301
00:10:40,390 --> 00:10:43,660
storing<font color="#E5E5E5"> a data structure inside here you</font>

302
00:10:42,339 --> 00:10:45,579
don't<font color="#CCCCCC"> have to worry</font><font color="#E5E5E5"> about the position</font>

303
00:10:43,660 --> 00:10:47,350
map because you only really need<font color="#E5E5E5"> the</font>

304
00:10:45,579 --> 00:10:49,359
identifier<font color="#CCCCCC"> of the root node which you</font>

305
00:10:47,350 --> 00:10:51,040
can save locally and then store the

306
00:10:49,360 --> 00:10:52,420
subsequent identifiers inside their

307
00:10:51,040 --> 00:10:55,000
parent<font color="#E5E5E5"> notes and so we're going to take</font>

308
00:10:52,420 --> 00:10:56,680
<font color="#E5E5E5">advantage of that improvement but we're</font>

309
00:10:55,000 --> 00:10:57,820
not going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use an AVL tree</font><font color="#CCCCCC"> and so</font>

310
00:10:56,680 --> 00:10:59,920
here's a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> of why so it's a</font>

311
00:10:57,820 --> 00:11:02,560
little<font color="#E5E5E5"> bit of exercise for you in case</font>

312
00:10:59,920 --> 00:11:04,630
<font color="#E5E5E5">you came in late</font><font color="#CCCCCC"> what's the difference</font>

313
00:11:02,560 --> 00:11:06,760
<font color="#CCCCCC">between these two AVL trees so I have</font>

314
00:11:04,630 --> 00:11:07,480
two AVL trees here they're both storing

315
00:11:06,760 --> 00:11:09,550
the

316
00:11:07,480 --> 00:11:12,730
same<font color="#E5E5E5"> four items they're both in order</font>

317
00:11:09,550 --> 00:11:14,979
they're both valid AVL trees but imagine

318
00:11:12,730 --> 00:11:17,019
this is<font color="#E5E5E5"> your browsing history</font><font color="#CCCCCC"> and you</font>

319
00:11:14,980 --> 00:11:19,149
were had a<font color="#CCCCCC"> browser private browsing tab</font>

320
00:11:17,019 --> 00:11:20,680
open and then<font color="#CCCCCC"> you</font><font color="#E5E5E5"> close</font><font color="#CCCCCC"> it real quick</font><font color="#E5E5E5"> so</font>

321
00:11:19,149 --> 00:11:21,100
<font color="#E5E5E5">you just deleted something from this</font>

322
00:11:20,680 --> 00:11:23,050
tree

323
00:11:21,100 --> 00:11:24,430
and I know<font color="#E5E5E5"> that you were either browsing</font>

324
00:11:23,050 --> 00:11:27,010
<font color="#E5E5E5">reddit or your bowels of browsing</font>

325
00:11:24,430 --> 00:11:28,120
<font color="#CCCCCC">YouTube</font><font color="#E5E5E5"> but you just deleted it</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> it's</font>

326
00:11:27,010 --> 00:11:30,459
<font color="#E5E5E5">not in the tree anymore</font>

327
00:11:28,120 --> 00:11:34,360
however hopefully in this time you've

328
00:11:30,459 --> 00:11:36,069
<font color="#CCCCCC">been</font><font color="#E5E5E5"> able to think</font><font color="#CCCCCC"> about which tree you</font>

329
00:11:34,360 --> 00:11:37,630
see which structure of the tree actually

330
00:11:36,070 --> 00:11:40,600
reveals which one of<font color="#E5E5E5"> those things was</font>

331
00:11:37,630 --> 00:11:42,070
<font color="#CCCCCC">just deleted so you know from the</font>

332
00:11:40,600 --> 00:11:44,110
structure of the tree from the four

333
00:11:42,070 --> 00:11:46,180
things<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are there which one of the</font>

334
00:11:44,110 --> 00:11:48,370
things was<font color="#CCCCCC"> just prior to that removed</font>

335
00:11:46,180 --> 00:11:50,769
<font color="#E5E5E5">from it even</font><font color="#CCCCCC"> though its contents were</font>

336
00:11:48,370 --> 00:11:52,930
actually gone from<font color="#CCCCCC"> the tree</font><font color="#E5E5E5"> so this is</font>

337
00:11:50,769 --> 00:11:55,000
the security issue<font color="#E5E5E5"> that we're</font><font color="#CCCCCC"> gonna</font>

338
00:11:52,930 --> 00:11:57,130
solve with our herb tree so it's based

339
00:11:55,000 --> 00:11:58,660
on some work<font color="#CCCCCC"> on history independent</font><font color="#E5E5E5"> data</font>

340
00:11:57,130 --> 00:12:00,189
structures what<font color="#E5E5E5"> it actually achieves is</font>

341
00:11:58,660 --> 00:12:02,050
a<font color="#E5E5E5"> notion called strong history</font>

342
00:12:00,190 --> 00:12:04,510
<font color="#E5E5E5">independence what that means is that the</font>

343
00:12:02,050 --> 00:12:06,550
<font color="#CCCCCC">state of</font><font color="#E5E5E5"> our data structure depends and</font>

344
00:12:04,510 --> 00:12:08,410
is uniquely<font color="#CCCCCC"> determined by the contents</font>

345
00:12:06,550 --> 00:12:10,029
of<font color="#E5E5E5"> whatever stored in it so we can't</font>

346
00:12:08,410 --> 00:12:12,550
have<font color="#E5E5E5"> the</font><font color="#CCCCCC"> situation</font><font color="#E5E5E5"> like we just saw with</font>

347
00:12:10,029 --> 00:12:13,540
an AVL tree where the same<font color="#E5E5E5"> four items</font>

348
00:12:12,550 --> 00:12:15,459
could come in two different

349
00:12:13,540 --> 00:12:18,130
<font color="#CCCCCC">configurations with then potentially</font>

350
00:12:15,459 --> 00:12:20,050
leak some information<font color="#CCCCCC"> and so that's what</font>

351
00:12:18,130 --> 00:12:21,880
strong<font color="#CCCCCC"> independent history independence</font>

352
00:12:20,050 --> 00:12:23,859
is and the way that we<font color="#CCCCCC"> actually make</font>

353
00:12:21,880 --> 00:12:25,870
this<font color="#CCCCCC"> happen is when you create your tree</font>

354
00:12:23,860 --> 00:12:28,690
you<font color="#CCCCCC"> randomly choose a hash function from</font>

355
00:12:25,870 --> 00:12:30,100
<font color="#E5E5E5">a family</font><font color="#CCCCCC"> of hash functions</font><font color="#E5E5E5"> and then</font>

356
00:12:28,690 --> 00:12:32,319
you're going<font color="#E5E5E5"> to use that hash function</font>

357
00:12:30,100 --> 00:12:35,079
every<font color="#E5E5E5"> time you're inserting something to</font>

358
00:12:32,319 --> 00:12:37,120
<font color="#E5E5E5">determine the position the exact place</font>

359
00:12:35,079 --> 00:12:38,979
in<font color="#E5E5E5"> that tree where your data belongs and</font>

360
00:12:37,120 --> 00:12:41,380
not just the lateral position<font color="#E5E5E5"> but also</font>

361
00:12:38,980 --> 00:12:42,790
the height<font color="#E5E5E5"> so normally in</font><font color="#CCCCCC"> be trees you</font>

362
00:12:41,380 --> 00:12:44,829
would choose<font color="#E5E5E5"> the height according to the</font>

363
00:12:42,790 --> 00:12:46,269
sequence<font color="#CCCCCC"> of operations if you've taught</font>

364
00:12:44,829 --> 00:12:47,529
a data structures class at some point

365
00:12:46,269 --> 00:12:50,649
you're going<font color="#E5E5E5"> to split the node and</font>

366
00:12:47,529 --> 00:12:52,449
merging nodes and all those wonderful

367
00:12:50,649 --> 00:12:53,800
<font color="#E5E5E5">things we're not going to do things in</font>

368
00:12:52,449 --> 00:12:55,540
that way<font color="#E5E5E5"> because that</font><font color="#CCCCCC"> would not</font><font color="#E5E5E5"> be</font>

369
00:12:53,800 --> 00:12:58,359
<font color="#E5E5E5">history independent so here's an example</font>

370
00:12:55,540 --> 00:13:00,639
<font color="#CCCCCC">and for</font><font color="#E5E5E5"> the oversimplification here I'm</font>

371
00:12:58,360 --> 00:13:01,810
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to say that</font><font color="#E5E5E5"> the height of every</font>

372
00:13:00,639 --> 00:13:03,880
node is determined by the number<font color="#CCCCCC"> of</font>

373
00:13:01,810 --> 00:13:05,380
<font color="#E5E5E5">trailing zeros in the hash so what you</font>

374
00:13:03,880 --> 00:13:06,819
see in this tree is just<font color="#CCCCCC"> a bunch of</font>

375
00:13:05,380 --> 00:13:08,589
hashes you don't know what I'm storing

376
00:13:06,819 --> 00:13:10,899
<font color="#E5E5E5">because I'm only going to store the</font>

377
00:13:08,589 --> 00:13:12,760
hashes of<font color="#E5E5E5"> the keys all I need to do is</font>

378
00:13:10,899 --> 00:13:15,010
<font color="#E5E5E5">look things up so I don't</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to have</font>

379
00:13:12,760 --> 00:13:17,680
the original key that the hash came from

380
00:13:15,010 --> 00:13:19,000
and then<font color="#E5E5E5"> you can see that like 400 is at</font>

381
00:13:17,680 --> 00:13:21,040
the root<font color="#CCCCCC"> level because that</font><font color="#E5E5E5"> ends with</font>

382
00:13:19,000 --> 00:13:22,600
<font color="#E5E5E5">two trailing</font><font color="#CCCCCC"> zeros</font>

383
00:13:21,040 --> 00:13:24,430
and what you should<font color="#CCCCCC"> notice right</font><font color="#E5E5E5"> away is</font>

384
00:13:22,600 --> 00:13:27,279
<font color="#CCCCCC">that</font><font color="#E5E5E5"> it's different than a regular bee</font>

385
00:13:24,430 --> 00:13:29,138
tree in<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> sizes of the nodes are</font>

386
00:13:27,279 --> 00:13:31,389
not going to be in as tight<font color="#E5E5E5"> arranged as</font>

387
00:13:29,139 --> 00:13:33,160
they would<font color="#CCCCCC"> be in a normal B tree</font><font color="#E5E5E5"> so for</font>

388
00:13:31,389 --> 00:13:35,709
<font color="#E5E5E5">example we have one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> our leaf nodes is</font>

389
00:13:33,160 --> 00:13:37,689
empty it<font color="#E5E5E5"> has nothing inside</font><font color="#CCCCCC"> it which</font>

390
00:13:35,709 --> 00:13:39,819
<font color="#E5E5E5">normally would not ever be allowed to</font>

391
00:13:37,690 --> 00:13:41,769
<font color="#CCCCCC">happen in a bee tree but here it</font><font color="#E5E5E5"> has to</font>

392
00:13:39,819 --> 00:13:43,269
happen<font color="#CCCCCC"> just</font><font color="#E5E5E5"> because with these data</font>

393
00:13:41,769 --> 00:13:44,860
<font color="#CCCCCC">items</font><font color="#E5E5E5"> hopefully you can convince</font>

394
00:13:43,269 --> 00:13:46,149
<font color="#CCCCCC">yourself that following the rules if</font>

395
00:13:44,860 --> 00:13:47,709
they<font color="#E5E5E5"> have to be in</font><font color="#CCCCCC"> order according to</font>

396
00:13:46,149 --> 00:13:48,819
<font color="#E5E5E5">the hash and they have to be on the</font>

397
00:13:47,709 --> 00:13:50,800
level<font color="#CCCCCC"> according to</font><font color="#E5E5E5"> the number of</font>

398
00:13:48,819 --> 00:13:51,160
<font color="#E5E5E5">trailing zeros we couldn't have it any</font>

399
00:13:50,800 --> 00:13:53,439
other way

400
00:13:51,160 --> 00:13:55,329
we can't avoid having<font color="#E5E5E5"> that empty node</font>

401
00:13:53,440 --> 00:13:58,810
and so if you want<font color="#E5E5E5"> to insert something</font>

402
00:13:55,329 --> 00:14:00,699
<font color="#CCCCCC">new you hash it if we hashed hello in my</font>

403
00:13:58,810 --> 00:14:02,800
totally made-up<font color="#E5E5E5"> hash function that ends</font>

404
00:14:00,699 --> 00:14:04,089
<font color="#E5E5E5">up with five one</font><font color="#CCCCCC"> zero so that's</font><font color="#E5E5E5"> going to</font>

405
00:14:02,800 --> 00:14:05,439
<font color="#E5E5E5">end up at the second level and I know</font>

406
00:14:04,089 --> 00:14:06,940
exactly<font color="#E5E5E5"> where it's going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> go it</font>

407
00:14:05,440 --> 00:14:08,589
couldn't possibly<font color="#CCCCCC"> go anywhere else and</font>

408
00:14:06,940 --> 00:14:11,740
<font color="#E5E5E5">so we ended up splitting that node</font><font color="#CCCCCC"> and</font>

409
00:14:08,589 --> 00:14:13,480
<font color="#E5E5E5">and that's what we see okay so we have</font>

410
00:14:11,740 --> 00:14:15,339
<font color="#E5E5E5">some similar performance properties to a</font>

411
00:14:13,480 --> 00:14:19,360
bee tree<font color="#E5E5E5"> but a big difference in that</font>

412
00:14:15,339 --> 00:14:21,279
<font color="#CCCCCC">the nodes can vary in</font><font color="#E5E5E5"> their size and the</font>

413
00:14:19,360 --> 00:14:22,870
choosing the heights of<font color="#E5E5E5"> every element is</font>

414
00:14:21,279 --> 00:14:25,029
<font color="#E5E5E5">really crucial to making this whole</font>

415
00:14:22,870 --> 00:14:26,589
thing<font color="#CCCCCC"> work and my description of saying</font>

416
00:14:25,029 --> 00:14:29,560
the number of<font color="#E5E5E5"> trailing</font><font color="#CCCCCC"> zeros is actually</font>

417
00:14:26,589 --> 00:14:31,540
not too far<font color="#CCCCCC"> off from the</font><font color="#E5E5E5"> probability</font>

418
00:14:29,560 --> 00:14:34,268
distribution<font color="#CCCCCC"> that we want so what we do</font>

419
00:14:31,540 --> 00:14:36,040
in<font color="#CCCCCC"> fact is you as a user you're allowed</font>

420
00:14:34,269 --> 00:14:37,630
to choose an expected block size which

421
00:14:36,040 --> 00:14:40,180
is going<font color="#E5E5E5"> to be optimized according to</font>

422
00:14:37,630 --> 00:14:42,100
<font color="#E5E5E5">however you're storing it and then</font>

423
00:14:40,180 --> 00:14:44,079
you're going to every time you<font color="#E5E5E5"> insert</font>

424
00:14:42,100 --> 00:14:45,730
something<font color="#E5E5E5"> new you'll use its hash to</font>

425
00:14:44,079 --> 00:14:48,849
<font color="#E5E5E5">seed a pseudo-random number generator</font>

426
00:14:45,730 --> 00:14:51,010
<font color="#E5E5E5">making it not at all random and then</font>

427
00:14:48,850 --> 00:14:52,569
you'll<font color="#E5E5E5"> sample from</font><font color="#CCCCCC"> that random number</font>

428
00:14:51,010 --> 00:14:54,639
generator according to a geometric

429
00:14:52,569 --> 00:14:55,899
distribution<font color="#CCCCCC"> and that's going</font><font color="#E5E5E5"> to</font>

430
00:14:54,639 --> 00:14:57,279
<font color="#E5E5E5">determine</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> height so it's similar</font>

431
00:14:55,899 --> 00:14:58,540
sort of to how you<font color="#CCCCCC"> would determine the</font>

432
00:14:57,279 --> 00:15:01,269
height of an element in a skip list

433
00:14:58,540 --> 00:15:02,620
<font color="#CCCCCC">actually but with the</font><font color="#E5E5E5"> biased probability</font>

434
00:15:01,269 --> 00:15:06,639
according to how<font color="#E5E5E5"> big you want</font><font color="#CCCCCC"> your nodes</font>

435
00:15:02,620 --> 00:15:08,889
to<font color="#CCCCCC"> be cool so what you should notice is</font>

436
00:15:06,639 --> 00:15:11,439
that<font color="#CCCCCC"> perb and</font><font color="#E5E5E5"> vo</font><font color="#CCCCCC"> Ram</font><font color="#E5E5E5"> work perfectly</font>

437
00:15:08,889 --> 00:15:13,449
together<font color="#CCCCCC"> almost</font><font color="#E5E5E5"> like we specifically</font>

438
00:15:11,439 --> 00:15:17,860
<font color="#E5E5E5">designed</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> only to work in this one</font>

439
00:15:13,449 --> 00:15:19,508
context with each other<font color="#E5E5E5"> and that's great</font>

440
00:15:17,860 --> 00:15:21,399
<font color="#E5E5E5">and we're going to see some nice</font>

441
00:15:19,509 --> 00:15:23,040
performance benefits from this and<font color="#E5E5E5"> these</font>

442
00:15:21,399 --> 00:15:25,149
<font color="#CCCCCC">are some of</font><font color="#E5E5E5"> the aspects so the</font>

443
00:15:23,040 --> 00:15:27,339
everything is only<font color="#E5E5E5"> stored in the parent</font>

444
00:15:25,149 --> 00:15:29,350
nodes including<font color="#CCCCCC"> identifiers</font><font color="#E5E5E5"> in the herb</font>

445
00:15:27,339 --> 00:15:30,850
<font color="#E5E5E5">and in the vo</font><font color="#CCCCCC"> RAM remember we're storing</font>

446
00:15:29,350 --> 00:15:32,290
<font color="#E5E5E5">encryption keys in each of the parent</font>

447
00:15:30,850 --> 00:15:34,120
<font color="#CCCCCC">notes that also gives us our secure</font>

448
00:15:32,290 --> 00:15:34,599
deletion<font color="#E5E5E5"> one interesting</font><font color="#CCCCCC"> thing about</font>

449
00:15:34,120 --> 00:15:35,889
<font color="#E5E5E5">that</font>

450
00:15:34,600 --> 00:15:38,380
is that when you're<font color="#E5E5E5"> thinking about</font>

451
00:15:35,889 --> 00:15:39,819
composing<font color="#E5E5E5"> these different protocols so</font>

452
00:15:38,380 --> 00:15:42,279
we're thinking about composing<font color="#CCCCCC"> a data</font>

453
00:15:39,819 --> 00:15:44,889
structure inside<font color="#CCCCCC"> an ORM</font><font color="#E5E5E5"> the amount of</font>

454
00:15:42,279 --> 00:15:46,899
say<font color="#E5E5E5"> history independence or a secure</font>

455
00:15:44,889 --> 00:15:49,060
deletion<font color="#E5E5E5"> you get is really dependent on</font>

456
00:15:46,899 --> 00:15:50,589
both of those pieces<font color="#CCCCCC"> so if you store a</font>

457
00:15:49,060 --> 00:15:52,508
perfectly history independent<font color="#E5E5E5"> data</font>

458
00:15:50,589 --> 00:15:55,870
structure inside a<font color="#E5E5E5"> not history</font>

459
00:15:52,509 --> 00:15:58,329
independent<font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> Ram construction then you</font>

460
00:15:55,870 --> 00:16:02,470
lose it<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> really have to have it</font><font color="#CCCCCC"> in</font>

461
00:15:58,329 --> 00:16:04,540
both<font color="#CCCCCC"> places ok I want to say that we</font>

462
00:16:02,470 --> 00:16:06,819
compared to<font color="#CCCCCC"> these other</font><font color="#E5E5E5"> things and what</font>

463
00:16:04,540 --> 00:16:09,490
we observed as you can imagine<font color="#E5E5E5"> is that</font>

464
00:16:06,819 --> 00:16:11,649
<font color="#E5E5E5">ours has pretty</font><font color="#CCCCCC"> good performance you can</font>

465
00:16:09,490 --> 00:16:14,050
get<font color="#E5E5E5"> better performance for sure than our</font>

466
00:16:11,649 --> 00:16:15,519
vo Ram plus herb construction but to do

467
00:16:14,050 --> 00:16:18,790
<font color="#E5E5E5">it you have</font><font color="#CCCCCC"> to give up a lot of security</font>

468
00:16:15,519 --> 00:16:20,889
<font color="#CCCCCC">so in the forward way comparison here</font>

469
00:16:18,790 --> 00:16:23,079
between<font color="#E5E5E5"> what we did the prior work on</font>

470
00:16:20,889 --> 00:16:25,060
oblivious data structures the prior work

471
00:16:23,079 --> 00:16:28,959
on just secure deletion<font color="#E5E5E5"> and this naive</font>

472
00:16:25,060 --> 00:16:31,959
baseline<font color="#E5E5E5"> what we saw and I'll skip back</font>

473
00:16:28,959 --> 00:16:33,550
as to why we see this what we<font color="#E5E5E5"> see is</font>

474
00:16:31,959 --> 00:16:35,829
<font color="#CCCCCC">that our construction</font><font color="#E5E5E5"> is almost the</font>

475
00:16:33,550 --> 00:16:37,920
fastest it's a little bit not as fast as

476
00:16:35,829 --> 00:16:40,660
just<font color="#E5E5E5"> doing secure deletion and a b-tree</font>

477
00:16:37,920 --> 00:16:43,389
<font color="#CCCCCC">and we shouldn't</font><font color="#E5E5E5"> expect that it would be</font>

478
00:16:40,660 --> 00:16:45,639
<font color="#E5E5E5">because that's really just not providing</font>

479
00:16:43,389 --> 00:16:47,860
any obliviousness at all and revealing

480
00:16:45,639 --> 00:16:49,689
<font color="#E5E5E5">the access patterns completely but we</font>

481
00:16:47,860 --> 00:16:51,670
<font color="#E5E5E5">get almost</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> good performance of</font><font color="#CCCCCC"> that</font>

482
00:16:49,689 --> 00:16:53,920
and significantly significantly<font color="#E5E5E5"> improved</font>

483
00:16:51,670 --> 00:16:56,219
this<font color="#E5E5E5"> is a log scale</font><font color="#CCCCCC"> Gryff significantly</font>

484
00:16:53,920 --> 00:16:58,569
<font color="#E5E5E5">improves performance compared to the</font>

485
00:16:56,220 --> 00:17:00,220
previous of<font color="#E5E5E5"> livius data structure work</font>

486
00:16:58,569 --> 00:17:02,829
and what<font color="#E5E5E5"> I really want to emphasize is</font>

487
00:17:00,220 --> 00:17:04,809
<font color="#E5E5E5">look at the y-axis</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> we're less than</font>

488
00:17:02,829 --> 00:17:07,089
<font color="#CCCCCC">one second so this is measuring one</font>

489
00:17:04,809 --> 00:17:10,629
access the cost of<font color="#CCCCCC"> doing one</font><font color="#E5E5E5"> lookup or</font>

490
00:17:07,089 --> 00:17:12,458
or<font color="#E5E5E5"> a store</font><font color="#CCCCCC"> or any operation</font><font color="#E5E5E5"> using an</font>

491
00:17:10,630 --> 00:17:15,069
actual networked implementation with the

492
00:17:12,459 --> 00:17:19,870
server being Amazon Web Services<font color="#CCCCCC"> free</font>

493
00:17:15,069 --> 00:17:21,250
tier and<font color="#E5E5E5"> and it totally works</font><font color="#CCCCCC"> and it's I</font>

494
00:17:19,869 --> 00:17:22,688
<font color="#E5E5E5">think</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> argue that this</font><font color="#CCCCCC"> is a</font>

495
00:17:21,250 --> 00:17:24,819
reasonable<font color="#E5E5E5"> performance if you're willing</font>

496
00:17:22,689 --> 00:17:26,650
to<font color="#E5E5E5"> wait one second you can use this so</font>

497
00:17:24,819 --> 00:17:28,870
the takeaways<font color="#CCCCCC"> and thank you</font><font color="#E5E5E5"> for your</font>

498
00:17:26,650 --> 00:17:30,700
time<font color="#E5E5E5"> are that</font><font color="#CCCCCC"> a Rams I think there's an</font>

499
00:17:28,870 --> 00:17:32,949
idea that<font color="#E5E5E5"> obliviousness would be nice</font>

500
00:17:30,700 --> 00:17:35,230
<font color="#CCCCCC">but</font><font color="#E5E5E5"> it sucks in terms of performance</font><font color="#CCCCCC"> I</font>

501
00:17:32,950 --> 00:17:36,730
think<font color="#CCCCCC"> that it doesn't and I</font><font color="#E5E5E5"> think that</font>

502
00:17:35,230 --> 00:17:38,380
it doesn't<font color="#CCCCCC"> have to and we can also get</font>

503
00:17:36,730 --> 00:17:40,809
more flexibility in terms of like

504
00:17:38,380 --> 00:17:42,809
variable size blocks and more security

505
00:17:40,809 --> 00:17:46,360
<font color="#E5E5E5">in</font><font color="#CCCCCC"> terms of things like secure deletion</font>

506
00:17:42,809 --> 00:17:47,920
<font color="#CCCCCC">so that's it for me</font><font color="#E5E5E5"> thanks a</font><font color="#CCCCCC"> lot I hope</font>

507
00:17:46,360 --> 00:17:59,679
there's a<font color="#E5E5E5"> couple questions and thank</font>

508
00:17:47,920 --> 00:18:04,530
again to my co-authors hi

509
00:17:59,680 --> 00:18:08,800
great<font color="#CCCCCC"> thanks great talk so one of the</font>

510
00:18:04,530 --> 00:18:12,250
<font color="#E5E5E5">other big downsides of</font><font color="#CCCCCC"> Aram is</font><font color="#E5E5E5"> single</font>

511
00:18:08,800 --> 00:18:12,909
<font color="#E5E5E5">use</font><font color="#CCCCCC"> earnest</font><font color="#E5E5E5"> right so what can you do</font>

512
00:18:12,250 --> 00:18:16,630
about<font color="#CCCCCC"> that</font>

513
00:18:12,910 --> 00:18:18,070
maybe<font color="#CCCCCC"> yet nothing so I'll admit</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> we</font>

514
00:18:16,630 --> 00:18:21,850
can do<font color="#E5E5E5"> nothing about</font><font color="#CCCCCC"> that right now</font>

515
00:18:18,070 --> 00:18:25,149
but it's it's a thought<font color="#E5E5E5"> that that</font><font color="#CCCCCC"> hasn't</font>

516
00:18:21,850 --> 00:18:27,280
not crossed our mind but I should<font color="#E5E5E5"> also</font>

517
00:18:25,150 --> 00:18:28,810
say there are some approaches that

518
00:18:27,280 --> 00:18:31,750
<font color="#E5E5E5">people</font><font color="#CCCCCC"> are looking at for you know</font>

519
00:18:28,810 --> 00:18:34,929
<font color="#E5E5E5">multi-user</font><font color="#CCCCCC"> OEMs</font><font color="#E5E5E5"> and they should compose</font>

520
00:18:31,750 --> 00:18:36,070
nicely with<font color="#CCCCCC"> what we're doing so I'm not</font>

521
00:18:34,930 --> 00:18:37,360
<font color="#E5E5E5">aware of anything that we're doing that</font>

522
00:18:36,070 --> 00:18:40,320
<font color="#E5E5E5">would prevent some of those techniques</font>

523
00:18:37,360 --> 00:18:40,320
<font color="#E5E5E5">from being used great</font>

524
00:18:40,450 --> 00:18:46,560
so it's possible<font color="#CCCCCC"> I I just missed some</font>

525
00:18:43,780 --> 00:18:50,950
point here but you seem<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have some</font>

526
00:18:46,560 --> 00:18:55,000
parameterizations<font color="#E5E5E5"> that are heuristic and</font>

527
00:18:50,950 --> 00:18:58,060
<font color="#E5E5E5">ad hoc</font><font color="#CCCCCC"> the block size and number</font><font color="#E5E5E5"> of</font>

528
00:18:55,000 --> 00:19:00,070
<font color="#CCCCCC">zeros and things okay so</font><font color="#E5E5E5"> the number of</font>

529
00:18:58,060 --> 00:19:02,290
<font color="#CCCCCC">zeros was just for that example in fact</font>

530
00:19:00,070 --> 00:19:04,179
<font color="#E5E5E5">what you'll do is you'll</font><font color="#CCCCCC"> be seating</font><font color="#E5E5E5"> this</font>

531
00:19:02,290 --> 00:19:05,740
pseudo random number generator based on

532
00:19:04,180 --> 00:19:09,430
the hash and where you define<font color="#E5E5E5"> the</font>

533
00:19:05,740 --> 00:19:11,950
<font color="#E5E5E5">distribution so that's not ad hoc and</font>

534
00:19:09,430 --> 00:19:13,840
the other thing is the block size that

535
00:19:11,950 --> 00:19:16,570
you mentioned so what we did is we

536
00:19:13,840 --> 00:19:19,120
proved<font color="#CCCCCC"> that you need at most</font><font color="#E5E5E5"> of 20</font><font color="#CCCCCC"> times</font>

537
00:19:16,570 --> 00:19:22,510
<font color="#CCCCCC">factor blow-up in your block size and</font>

538
00:19:19,120 --> 00:19:24,219
then what we saw is<font color="#E5E5E5"> experimentally based</font>

539
00:19:22,510 --> 00:19:27,280
<font color="#E5E5E5">on the experiments we ran that can be as</font>

540
00:19:24,220 --> 00:19:29,080
low as<font color="#CCCCCC"> six</font><font color="#E5E5E5"> so if you don't believe in</font>

541
00:19:27,280 --> 00:19:32,020
our experiments then you can stick<font color="#CCCCCC"> with</font>

542
00:19:29,080 --> 00:19:34,330
the 20 times block size and<font color="#E5E5E5"> if you want</font>

543
00:19:32,020 --> 00:19:36,580
to try then<font color="#CCCCCC"> you can go down to six is</font>

544
00:19:34,330 --> 00:19:38,710
what we found<font color="#E5E5E5"> experimentally and that's</font>

545
00:19:36,580 --> 00:19:40,389
similar<font color="#E5E5E5"> to other</font><font color="#CCCCCC"> Oh Ram constructions</font>

546
00:19:38,710 --> 00:19:42,160
where there's a<font color="#E5E5E5"> little bit of gap you</font>

547
00:19:40,390 --> 00:19:45,280
<font color="#E5E5E5">know in the constants of your proof</font>

548
00:19:42,160 --> 00:19:47,110
well I'd wonder if you take an oblique

549
00:19:45,280 --> 00:19:49,389
look at it through<font color="#E5E5E5"> information theory</font>

550
00:19:47,110 --> 00:19:50,409
and<font color="#CCCCCC"> if you had some</font><font color="#E5E5E5"> notion of number</font><font color="#CCCCCC"> of</font>

551
00:19:49,390 --> 00:19:55,200
<font color="#CCCCCC">bits leaked</font>

552
00:19:50,410 --> 00:19:58,750
per<font color="#E5E5E5"> oh I think the number of bits leaked</font>

553
00:19:55,200 --> 00:20:00,640
<font color="#CCCCCC">for any operations</font><font color="#E5E5E5"> would be</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> is is</font>

554
00:19:58,750 --> 00:20:01,720
is what we're<font color="#E5E5E5"> trying to</font><font color="#CCCCCC"> so everything</font>

555
00:20:00,640 --> 00:20:03,670
that<font color="#E5E5E5"> I've said is with</font>

556
00:20:01,720 --> 00:20:06,430
the absolutely<font color="#E5E5E5"> zero amount of</font><font color="#CCCCCC"> leakage</font>

557
00:20:03,670 --> 00:20:08,410
and I'm not sure if there's I don't

558
00:20:06,430 --> 00:20:12,160
<font color="#E5E5E5">think the leakage would be elegant</font><font color="#CCCCCC"> once</font>

559
00:20:08,410 --> 00:20:17,260
things started<font color="#E5E5E5"> to blow up performance</font>

560
00:20:12,160 --> 00:20:19,210
<font color="#E5E5E5">not for security so yes so having a</font>

561
00:20:17,260 --> 00:20:21,160
larger block<font color="#E5E5E5"> size will decrease the</font>

562
00:20:19,210 --> 00:20:23,620
<font color="#CCCCCC">probability that</font><font color="#E5E5E5"> you sort of run out of</font>

563
00:20:21,160 --> 00:20:25,470
room in a path and the way that you lose

564
00:20:23,620 --> 00:20:29,320
security is that if you run out<font color="#CCCCCC"> of room</font>

565
00:20:25,470 --> 00:20:32,050
<font color="#E5E5E5">then the attacker might realize</font><font color="#CCCCCC"> that</font>

566
00:20:29,320 --> 00:20:33,520
you've run<font color="#CCCCCC"> out of room because</font><font color="#E5E5E5"> you you</font>

567
00:20:32,050 --> 00:20:36,580
<font color="#CCCCCC">know start crying about it or</font><font color="#E5E5E5"> something</font>

568
00:20:33,520 --> 00:20:38,110
and<font color="#E5E5E5"> that will leak the fact that you</font>

569
00:20:36,580 --> 00:20:40,330
<font color="#E5E5E5">were doing a lot</font><font color="#CCCCCC"> of a certain</font><font color="#E5E5E5"> kind of</font>

570
00:20:38,110 --> 00:20:42,840
operation<font color="#E5E5E5"> so that's that's kind</font><font color="#CCCCCC"> of where</font>

571
00:20:40,330 --> 00:20:42,840
that<font color="#CCCCCC"> comes</font><font color="#E5E5E5"> in</font>

