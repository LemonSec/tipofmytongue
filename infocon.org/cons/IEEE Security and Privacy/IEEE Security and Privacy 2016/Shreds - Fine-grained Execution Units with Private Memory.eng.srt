1
00:00:03,020 --> 00:00:07,310
this is joint work with my colleagues in

2
00:00:05,660 --> 00:00:09,469
<font color="#CCCCCC">Stony Brook</font><font color="#E5E5E5"> Sebastian man Johnson</font>

3
00:00:07,310 --> 00:00:13,190
<font color="#CCCCCC">disjunction and my advisors don't look</font>

4
00:00:09,469 --> 00:00:15,559
so first of<font color="#E5E5E5"> all what other execution</font>

5
00:00:13,190 --> 00:00:17,330
units that we are mentioning that we're

6
00:00:15,559 --> 00:00:20,900
talking about here and why do we<font color="#E5E5E5"> need a</font>

7
00:00:17,330 --> 00:00:24,320
more<font color="#E5E5E5"> fine-grained one so there are on to</font>

8
00:00:20,900 --> 00:00:27,200
it execution<font color="#E5E5E5"> unit</font><font color="#CCCCCC"> assists in the current</font>

9
00:00:24,320 --> 00:00:29,480
<font color="#CCCCCC">oasis so namely the processes and</font>

10
00:00:27,200 --> 00:00:32,628
threats and the distinction between<font color="#E5E5E5"> then</font>

11
00:00:29,480 --> 00:00:34,730
is that processes have separate address

12
00:00:32,628 --> 00:00:36,589
spaces while<font color="#CCCCCC"> Stuart's they'd only share</font>

13
00:00:34,730 --> 00:00:39,709
one if they belong to<font color="#E5E5E5"> the same as</font><font color="#CCCCCC"> their</font>

14
00:00:36,590 --> 00:00:43,070
group and this model<font color="#CCCCCC"> has been used for</font>

15
00:00:39,710 --> 00:00:44,780
decades it runs very well but it doesn't

16
00:00:43,070 --> 00:00:47,390
match with the modern app development

17
00:00:44,780 --> 00:00:49,790
paradigm where multiple components from

18
00:00:47,390 --> 00:00:52,850
different parties are get put together

19
00:00:49,790 --> 00:00:55,010
into one single application and this

20
00:00:52,850 --> 00:00:57,110
model cannot defend against a class of

21
00:00:55,010 --> 00:01:00,500
attacks<font color="#E5E5E5"> that we try to address in our</font>

22
00:00:57,110 --> 00:01:03,440
work so<font color="#E5E5E5"> this attacks is turned by us in</font>

23
00:01:00,500 --> 00:01:05,719
process memory abuses that here's<font color="#E5E5E5"> the</font>

24
00:01:03,440 --> 00:01:07,789
definition basically there are if there

25
00:01:05,719 --> 00:01:10,548
are malicious or compromised components

26
00:01:07,789 --> 00:01:12,920
they try to steal data or sq code of

27
00:01:10,549 --> 00:01:14,810
other components running in the same

28
00:01:12,920 --> 00:01:16,630
process and we call it<font color="#E5E5E5"> in process</font><font color="#CCCCCC"> memory</font>

29
00:01:14,810 --> 00:01:19,069
of abuses let me give you two examples

30
00:01:16,630 --> 00:01:21,798
the first one is<font color="#CCCCCC"> about stealing secret</font>

31
00:01:19,069 --> 00:01:25,130
data remember the public back from two

32
00:01:21,799 --> 00:01:26,990
years ago if the attacker can exploit

33
00:01:25,130 --> 00:01:29,119
the vulnerable open<font color="#E5E5E5"> seas our library</font>

34
00:01:26,990 --> 00:01:32,529
then he is able to<font color="#E5E5E5"> steal the sensitive</font>

35
00:01:29,119 --> 00:01:36,200
data from the web server process such as

36
00:01:32,529 --> 00:01:37,969
private keys or login passwords and the

37
00:01:36,200 --> 00:01:40,999
second example about executing private

38
00:01:37,969 --> 00:01:43,279
code so in iOS applications there<font color="#E5E5E5"> are</font>

39
00:01:40,999 --> 00:01:48,348
those privates api's gets loaded into

40
00:01:43,279 --> 00:01:50,509
the user address space<font color="#CCCCCC"> of the use of the</font>

41
00:01:48,349 --> 00:01:53,270
applications and this opens up a window

42
00:01:50,509 --> 00:01:54,799
for the attackers to find out those<font color="#CCCCCC"> AP</font>

43
00:01:53,270 --> 00:01:57,380
ice and then invoke them during<font color="#CCCCCC"> run time</font>

44
00:01:54,799 --> 00:02:01,399
to do harm to the system and certainly

45
00:01:57,380 --> 00:02:03,589
on the threat of impress abuse has been

46
00:02:01,399 --> 00:02:05,659
there since<font color="#E5E5E5"> the day one of this model of</font>

47
00:02:03,590 --> 00:02:07,279
virtual<font color="#E5E5E5"> memory so there are certain</font>

48
00:02:05,659 --> 00:02:09,289
techniques out there that could be the

49
00:02:07,279 --> 00:02:11,120
potential medications of this problem

50
00:02:09,288 --> 00:02:14,149
<font color="#E5E5E5">but they are only doing it either</font>

51
00:02:11,120 --> 00:02:16,390
partially or paying too much prices so

52
00:02:14,150 --> 00:02:19,450
the first<font color="#E5E5E5"> line</font><font color="#CCCCCC"> of work belong to the</font>

53
00:02:16,390 --> 00:02:20,980
ss level isolation so basically<font color="#E5E5E5"> a put</font>

54
00:02:19,450 --> 00:02:23,380
different components into different

55
00:02:20,980 --> 00:02:25,720
address spaces and then use a different

56
00:02:23,380 --> 00:02:27,459
processes surround them you can find

57
00:02:25,720 --> 00:02:30,520
this approach being adopted to open

58
00:02:27,459 --> 00:02:32,890
stage and chrome but the<font color="#E5E5E5"> problem with is</font>

59
00:02:30,520 --> 00:02:35,260
the<font color="#CCCCCC"> ibc it's very expensive but</font><font color="#E5E5E5"> this</font>

60
00:02:32,890 --> 00:02:37,450
approach heavily rely on IPC<font color="#CCCCCC"> to</font><font color="#E5E5E5"> to data</font>

61
00:02:35,260 --> 00:02:39,489
exchange or synchronization successor

62
00:02:37,450 --> 00:02:42,010
also the adoption adversities are

63
00:02:39,490 --> 00:02:44,920
relatively<font color="#CCCCCC"> high because you're basically</font>

64
00:02:42,010 --> 00:02:48,429
are splitting monotonic applications

65
00:02:44,920 --> 00:02:51,549
into multiple components<font color="#CCCCCC"> let alone if</font>

66
00:02:48,430 --> 00:02:53,910
you<font color="#E5E5E5"> can do this or not even assume that</font>

67
00:02:51,550 --> 00:02:55,900
you can do it it's still kind of

68
00:02:53,910 --> 00:02:58,060
difficult because you now have to<font color="#CCCCCC"> deal</font>

69
00:02:55,900 --> 00:03:00,190
with those concurrency issues which is

70
00:02:58,060 --> 00:03:01,600
very error-prone and the second line<font color="#CCCCCC"> of</font>

71
00:03:00,190 --> 00:03:03,880
work belongs to the<font color="#E5E5E5"> software fault</font>

72
00:03:01,600 --> 00:03:07,420
isolation one example is<font color="#E5E5E5"> Google's native</font>

73
00:03:03,880 --> 00:03:09,640
clients so no step because of the<font color="#CCCCCC"> stura</font>

74
00:03:07,420 --> 00:03:12,369
<font color="#E5E5E5">model of native clients on it can only</font>

75
00:03:09,640 --> 00:03:14,440
adjust a subset of being processed abuse

76
00:03:12,370 --> 00:03:16,390
problems because it requires<font color="#CCCCCC"> to</font>

77
00:03:14,440 --> 00:03:18,760
instrument the untrusted code which

78
00:03:16,390 --> 00:03:20,920
means that<font color="#E5E5E5"> it's ineffective only</font>

79
00:03:18,760 --> 00:03:23,798
dynamically generated or the external

80
00:03:20,920 --> 00:03:25,059
code and the last line of<font color="#CCCCCC"> work of the</font>

81
00:03:23,799 --> 00:03:27,880
techniques belongs to the<font color="#E5E5E5"> highway</font>

82
00:03:25,060 --> 00:03:31,930
assisted techniques such as<font color="#E5E5E5"> in-house</font><font color="#CCCCCC"> sgx</font>

83
00:03:27,880 --> 00:03:34,120
or arms chest zone on those are in terms

84
00:03:31,930 --> 00:03:38,500
of security<font color="#CCCCCC"> this techniques of doing</font>

85
00:03:34,120 --> 00:03:42,220
well but in<font color="#E5E5E5"> terms of usability on so for</font>

86
00:03:38,500 --> 00:03:44,829
example in Intel SGX<font color="#CCCCCC"> it's being overly</font>

87
00:03:42,220 --> 00:03:47,140
restrictive for for<font color="#E5E5E5"> example when the co</font>

88
00:03:44,829 --> 00:03:50,950
running anxiety securing environments<font color="#E5E5E5"> of</font>

89
00:03:47,140 --> 00:03:53,529
the<font color="#CCCCCC"> sgx the cocaine not even make system</font>

90
00:03:50,950 --> 00:03:55,420
<font color="#E5E5E5">costs also in armchairs own you bring up</font>

91
00:03:53,530 --> 00:03:57,610
this on semantic gap<font color="#CCCCCC"> that you need</font><font color="#E5E5E5"> to</font>

92
00:03:55,420 --> 00:04:00,518
fill up with so it's kind of difficult

93
00:03:57,610 --> 00:04:02,920
sometimes to use them with other beings

94
00:04:00,519 --> 00:04:04,860
that we want<font color="#CCCCCC"> to propose</font><font color="#E5E5E5"> Fred you can</font>

95
00:04:02,920 --> 00:04:07,690
feel stressed as arbitrary scope

96
00:04:04,860 --> 00:04:10,510
arbitrary scope segments of the stura

97
00:04:07,690 --> 00:04:12,700
executions on the left<font color="#E5E5E5"> hand side on this</font>

98
00:04:10,510 --> 00:04:15,040
figure those red lines scoped by the

99
00:04:12,700 --> 00:04:17,409
dash for tangos those other threats and

100
00:04:15,040 --> 00:04:19,358
what's special about red is that<font color="#CCCCCC"> each</font>

101
00:04:17,410 --> 00:04:21,280
one of them get to have<font color="#CCCCCC"> a private memory</font>

102
00:04:19,358 --> 00:04:24,430
pool allocated from the same virtual

103
00:04:21,279 --> 00:04:26,140
address space and this private memory

104
00:04:24,430 --> 00:04:28,660
pool can only be accessed by the

105
00:04:26,140 --> 00:04:30,639
corresponding spirit and we<font color="#CCCCCC"> turn</font><font color="#E5E5E5"> them</font>

106
00:04:28,660 --> 00:04:33,729
out as pool also<font color="#CCCCCC"> we have a</font>

107
00:04:30,639 --> 00:04:37,360
out of AP<font color="#E5E5E5"> is and that are backed by our</font>

108
00:04:33,729 --> 00:04:39,758
os-level support and for the developers

109
00:04:37,360 --> 00:04:42,550
to use our system which I was or in the

110
00:04:39,759 --> 00:04:44,800
<font color="#E5E5E5">latest light so because</font><font color="#CCCCCC"> we need to</font>

111
00:04:42,550 --> 00:04:47,379
operate an OS level we assume<font color="#E5E5E5"> a trustee</font>

112
00:04:44,800 --> 00:04:49,689
OS but there are unjustly components in

113
00:04:47,379 --> 00:04:52,080
the victim process which means that

114
00:04:49,689 --> 00:04:54,460
other components in that process are

115
00:04:52,080 --> 00:04:57,248
subjected to<font color="#CCCCCC"> the attacks of this</font>

116
00:04:54,460 --> 00:04:58,539
untrusted component so now allow me use

117
00:04:57,249 --> 00:05:01,659
the<font color="#CCCCCC"> high level example to better</font>

118
00:04:58,539 --> 00:05:03,669
illustrate the idea of<font color="#E5E5E5"> shred using the</font>

119
00:05:01,659 --> 00:05:06,370
case of doing password authentication on

120
00:05:03,669 --> 00:05:09,310
web server so the scenario is that the

121
00:05:06,370 --> 00:05:11,050
client will send the password to the web

122
00:05:09,310 --> 00:05:13,120
server and the web server will to

123
00:05:11,050 --> 00:05:15,610
compute a hash of this password and do

124
00:05:13,120 --> 00:05:18,669
the authentication etc and this is the

125
00:05:15,610 --> 00:05:21,099
first row address space of a web server

126
00:05:18,669 --> 00:05:23,020
process so<font color="#E5E5E5"> you can see the relative the</font>

127
00:05:21,099 --> 00:05:25,509
yellow bars or where the plaintext

128
00:05:23,020 --> 00:05:27,549
password<font color="#E5E5E5"> okay doing so in case</font><font color="#CCCCCC"> of a in</font>

129
00:05:25,509 --> 00:05:30,240
process memory abuse attacks there is a

130
00:05:27,550 --> 00:05:33,069
malicious component in this case it's a

131
00:05:30,240 --> 00:05:35,620
malicious library and if it wants to

132
00:05:33,069 --> 00:05:39,699
<font color="#E5E5E5">steal the sensitive data located in the</font>

133
00:05:35,620 --> 00:05:41,979
<font color="#CCCCCC">industry users in this area that is very</font>

134
00:05:39,699 --> 00:05:43,839
difficult to defend against that but

135
00:05:41,979 --> 00:05:46,270
with shred what we can do is we can put

136
00:05:43,839 --> 00:05:48,279
those sensitive data inside<font color="#CCCCCC"> a</font><font color="#E5E5E5"> spool and</font>

137
00:05:46,270 --> 00:05:50,049
only the are corresponding

138
00:05:48,279 --> 00:05:52,870
authentication<font color="#CCCCCC"> shredder will be able</font><font color="#E5E5E5"> to</font>

139
00:05:50,050 --> 00:05:56,469
<font color="#CCCCCC">access them so in case of malicious</font>

140
00:05:52,870 --> 00:05:58,149
components again this is<font color="#E5E5E5"> attempt to</font>

141
00:05:56,469 --> 00:06:01,419
steal the secret data will be blocked by

142
00:05:58,149 --> 00:06:03,449
us so now i want<font color="#E5E5E5"> to show you to set up</font>

143
00:06:01,419 --> 00:06:06,159
<font color="#E5E5E5">for AP is the first</font><font color="#CCCCCC"> day</font><font color="#E5E5E5"> is called on</font>

144
00:06:03,449 --> 00:06:08,740
recreation api's namely<font color="#CCCCCC"> to enter</font><font color="#E5E5E5"> and</font>

145
00:06:06,159 --> 00:06:10,569
<font color="#CCCCCC">axis so the</font><font color="#E5E5E5"> idea is that whatever code</font>

146
00:06:08,740 --> 00:06:13,449
running in between the invocations of

147
00:06:10,569 --> 00:06:15,759
this to api<font color="#E5E5E5"> arco running inside fred and</font>

148
00:06:13,449 --> 00:06:17,889
as you can see<font color="#CCCCCC"> three enter takes one</font>

149
00:06:15,759 --> 00:06:20,110
argument called put descriptor to

150
00:06:17,889 --> 00:06:22,839
indicate which as put it for its bounty

151
00:06:20,110 --> 00:06:25,870
to and we have a second set of<font color="#CCCCCC"> api</font>

152
00:06:22,839 --> 00:06:27,849
<font color="#CCCCCC">scores po allocation api's they function</font>

153
00:06:25,870 --> 00:06:30,279
similarly to the<font color="#E5E5E5"> julie bc malloc and</font>

154
00:06:27,849 --> 00:06:33,399
free so the idea is that you call them

155
00:06:30,279 --> 00:06:35,740
inside where to allocate<font color="#CCCCCC"> sorry</font><font color="#E5E5E5"> memory</font>

156
00:06:33,399 --> 00:06:37,870
inside espoo now allow me to show you

157
00:06:35,740 --> 00:06:40,209
<font color="#CCCCCC">the co example like how to use those for</font>

158
00:06:37,870 --> 00:06:41,709
AP is again using the<font color="#E5E5E5"> same cases of</font>

159
00:06:40,209 --> 00:06:44,350
doing<font color="#CCCCCC"> password authentication on web</font>

160
00:06:41,709 --> 00:06:45,820
server this is the coolest<font color="#E5E5E5"> in from light</font>

161
00:06:44,350 --> 00:06:47,890
which is lightweight web<font color="#E5E5E5"> servers so</font>

162
00:06:45,820 --> 00:06:50,290
basically when the<font color="#E5E5E5"> web server see there</font>

163
00:06:47,890 --> 00:06:53,050
is a coming authentication requests and

164
00:06:50,290 --> 00:06:55,660
it will just call our enter to make this

165
00:06:53,050 --> 00:06:58,300
password pool available and then you can

166
00:06:55,660 --> 00:07:00,100
cause<font color="#CCCCCC"> SDS in its which is the wrapper of</font>

167
00:06:58,300 --> 00:07:02,680
despereaux location API which<font color="#E5E5E5"> I will</font>

168
00:07:00,100 --> 00:07:05,350
show you<font color="#CCCCCC"> in the next slides and then you</font>

169
00:07:02,680 --> 00:07:08,170
can allocate<font color="#E5E5E5"> memory inside espoo then</font>

170
00:07:05,350 --> 00:07:11,110
the web server can store the sensitive

171
00:07:08,170 --> 00:07:13,360
data inside as food and cultural access

172
00:07:11,110 --> 00:07:16,180
to a lot distance put down so that no

173
00:07:13,360 --> 00:07:17,830
one<font color="#E5E5E5"> else's can access it later and on</font>

174
00:07:16,180 --> 00:07:20,470
the<font color="#CCCCCC"> left-hand</font><font color="#E5E5E5"> side are the RS</font>

175
00:07:17,830 --> 00:07:23,500
publication wrappers on and on the right

176
00:07:20,470 --> 00:07:25,600
<font color="#CCCCCC">hand side which is the code for the</font>

177
00:07:23,500 --> 00:07:29,020
<font color="#E5E5E5">authentication shred so very intuitive</font>

178
00:07:25,600 --> 00:07:30,850
you just culture enter again to make

179
00:07:29,020 --> 00:07:33,549
this as<font color="#E5E5E5"> per available</font><font color="#CCCCCC"> then you can do</font>

180
00:07:30,850 --> 00:07:35,050
the<font color="#E5E5E5"> computation to access these memories</font>

181
00:07:33,550 --> 00:07:36,850
like just like<font color="#E5E5E5"> they are the normal</font>

182
00:07:35,050 --> 00:07:38,770
memory and then after you<font color="#CCCCCC"> down</font><font color="#E5E5E5"> you</font>

183
00:07:36,850 --> 00:07:41,320
called SDS free to free you can free

184
00:07:38,770 --> 00:07:43,330
this jungle memory for later used by

185
00:07:41,320 --> 00:07:46,180
other components and<font color="#E5E5E5"> Daniel cultural</font>

186
00:07:43,330 --> 00:07:48,460
axis to finish this for execution<font color="#CCCCCC"> okay</font>

187
00:07:46,180 --> 00:07:51,100
so now let me show you the overview of

188
00:07:48,460 --> 00:07:54,430
<font color="#E5E5E5">our system</font><font color="#CCCCCC"> basically we have</font><font color="#E5E5E5"> two major</font>

189
00:07:51,100 --> 00:07:56,890
components as driver and as compiler so

190
00:07:54,430 --> 00:07:58,990
as driver is<font color="#CCCCCC"> the OS module that up will</font>

191
00:07:56,890 --> 00:08:01,690
deal with those runtime events such as

192
00:07:58,990 --> 00:08:03,880
our entry<font color="#CCCCCC"> axis or as per allocation</font>

193
00:08:01,690 --> 00:08:07,120
de-allocation etc and on the<font color="#CCCCCC"> right hand</font>

194
00:08:03,880 --> 00:08:10,510
side at the runtime view of our system

195
00:08:07,120 --> 00:08:13,330
so what's not mentioning here is that we

196
00:08:10,510 --> 00:08:15,730
<font color="#CCCCCC">actually allow multiple threats to share</font>

197
00:08:13,330 --> 00:08:18,580
the same as pool because imagine a

198
00:08:15,730 --> 00:08:20,380
scenario that there is a encryption and

199
00:08:18,580 --> 00:08:23,140
decryption shreds they might want<font color="#E5E5E5"> to</font>

200
00:08:20,380 --> 00:08:26,050
share they want to share<font color="#CCCCCC"> this and a set</font>

201
00:08:23,140 --> 00:08:28,510
of crypto keys and we also<font color="#CCCCCC"> have a way to</font>

202
00:08:26,050 --> 00:08:30,100
prevent the attacker from abusing this

203
00:08:28,510 --> 00:08:33,218
feature which<font color="#E5E5E5"> I was reviewing the latest</font>

204
00:08:30,100 --> 00:08:34,780
lights so now let's dive into the<font color="#CCCCCC"> s</font>

205
00:08:33,219 --> 00:08:37,000
driver<font color="#E5E5E5"> I want to show you how we build</font>

206
00:08:34,780 --> 00:08:38,679
the concept of s pool basically we

207
00:08:37,000 --> 00:08:41,260
utilize the our memories<font color="#E5E5E5"> of my mechanism</font>

208
00:08:38,679 --> 00:08:43,630
<font color="#CCCCCC">as our building block but</font><font color="#E5E5E5"> before I move</font>

209
00:08:41,260 --> 00:08:45,370
on I<font color="#E5E5E5"> also want</font><font color="#CCCCCC"> to remind you</font><font color="#E5E5E5"> that intel</font>

210
00:08:43,630 --> 00:08:47,020
has<font color="#CCCCCC"> a very similar mechanism called</font>

211
00:08:45,370 --> 00:08:49,780
memory<font color="#E5E5E5"> protection keys in the upcoming</font>

212
00:08:47,020 --> 00:08:52,750
<font color="#E5E5E5">cpus so the design that</font><font color="#CCCCCC"> i talked about</font>

213
00:08:49,780 --> 00:08:55,510
here can<font color="#CCCCCC"> be very broadly applied to the</font>

214
00:08:52,750 --> 00:08:57,250
india as well but for the sake of this

215
00:08:55,510 --> 00:09:00,069
<font color="#E5E5E5">talk let's just</font>

216
00:08:57,250 --> 00:09:03,540
focus on arm so on the<font color="#E5E5E5"> right hand side</font>

217
00:09:00,070 --> 00:09:05,710
of the page tables a structure<font color="#CCCCCC"> of</font>

218
00:09:03,540 --> 00:09:07,540
architecture and as you can see in the

219
00:09:05,710 --> 00:09:10,210
first layer page table you can basically

220
00:09:07,540 --> 00:09:12,660
tag them with different domains in this

221
00:09:10,210 --> 00:09:15,010
<font color="#E5E5E5">case we have domain 1 and domain 14 and</font>

222
00:09:12,660 --> 00:09:17,920
also in the system there are<font color="#E5E5E5"> those</font>

223
00:09:15,010 --> 00:09:19,930
domain access control registers so<font color="#E5E5E5"> they</font>

224
00:09:17,920 --> 00:09:22,930
function just like their names by

225
00:09:19,930 --> 00:09:24,790
assigning value into incident you can

226
00:09:22,930 --> 00:09:26,560
basically control the accessibility of

227
00:09:24,790 --> 00:09:29,380
different domains on the corresponding

228
00:09:26,560 --> 00:09:31,719
<font color="#CCCCCC">quarters registers are banked just for</font>

229
00:09:29,380 --> 00:09:34,540
<font color="#E5E5E5">your</font><font color="#CCCCCC"> information and in this case</font><font color="#E5E5E5"> we</font>

230
00:09:31,720 --> 00:09:38,080
have domain 14 is accessible and domain

231
00:09:34,540 --> 00:09:40,810
one is not so based on el momento man is

232
00:09:38,080 --> 00:09:43,030
<font color="#CCCCCC">very intuitive to build a concept of as</font>

233
00:09:40,810 --> 00:09:45,189
Pope but still we have<font color="#E5E5E5"> several</font>

234
00:09:43,030 --> 00:09:47,439
challenges to deal with the first one<font color="#CCCCCC"> is</font>

235
00:09:45,190 --> 00:09:49,900
that<font color="#E5E5E5"> the granularity of the assessing</font>

236
00:09:47,440 --> 00:09:53,110
subject he only be checked at sea level

237
00:09:49,900 --> 00:09:55,180
and corresponding core about way we want

238
00:09:53,110 --> 00:09:57,460
<font color="#CCCCCC">something more fine-grained so we create</font>

239
00:09:55,180 --> 00:10:00,489
<font color="#E5E5E5">a notion of threat such so that the</font>

240
00:09:57,460 --> 00:10:03,220
assessing subject can be recognized and

241
00:10:00,490 --> 00:10:05,170
as a<font color="#E5E5E5"> threat level and then we can use s</font>

242
00:10:03,220 --> 00:10:06,760
driver to manage them<font color="#E5E5E5"> and the second</font>

243
00:10:05,170 --> 00:10:09,640
limitation is that there are only

244
00:10:06,760 --> 00:10:11,860
existing demands available on in the

245
00:10:09,640 --> 00:10:14,350
inner systems so we<font color="#CCCCCC"> cannot fully</font>

246
00:10:11,860 --> 00:10:17,350
allocate a new domain whenever a new as

247
00:10:14,350 --> 00:10:19,630
food gets allocated because it is does

248
00:10:17,350 --> 00:10:21,520
not<font color="#CCCCCC"> scale so the solution to</font><font color="#E5E5E5"> that is</font>

249
00:10:19,630 --> 00:10:23,470
that we statically bind an accessible

250
00:10:21,520 --> 00:10:25,870
domain to each<font color="#E5E5E5"> CPU and then we reduce</font>

251
00:10:23,470 --> 00:10:28,000
that domain for multiple<font color="#E5E5E5"> high schools if</font>

252
00:10:25,870 --> 00:10:30,310
they are accessed from<font color="#CCCCCC"> the same CPU but</font>

253
00:10:28,000 --> 00:10:32,680
not at the same time let me use a

254
00:10:30,310 --> 00:10:34,989
<font color="#CCCCCC">high-level example to show you how this</font>

255
00:10:32,680 --> 00:10:37,060
<font color="#CCCCCC">works this</font><font color="#E5E5E5"> Q face representative dual</font>

256
00:10:34,990 --> 00:10:39,160
core system and the two eyebrows

257
00:10:37,060 --> 00:10:41,170
represent the two domain access control

258
00:10:39,160 --> 00:10:44,350
registers as you can see in<font color="#E5E5E5"> their</font>

259
00:10:41,170 --> 00:10:47,469
<font color="#E5E5E5">entries of them if it's great means on</font>

260
00:10:44,350 --> 00:10:49,570
<font color="#E5E5E5">only corresponding poor this domain is</font>

261
00:10:47,470 --> 00:10:51,280
not accessible but if<font color="#CCCCCC"> its colorful means</font>

262
00:10:49,570 --> 00:10:53,470
the<font color="#E5E5E5"> other way so the two eyes</font>

263
00:10:51,280 --> 00:10:55,750
<font color="#E5E5E5">represented</font><font color="#CCCCCC"> two course and mouth</font>

264
00:10:53,470 --> 00:10:58,450
represent a virtual address space of a

265
00:10:55,750 --> 00:11:00,730
<font color="#E5E5E5">process that is using our system and</font>

266
00:10:58,450 --> 00:11:03,130
there are two the 2 t's represented to a

267
00:11:00,730 --> 00:11:06,760
spruce that belongs to<font color="#E5E5E5"> two different on</font>

268
00:11:03,130 --> 00:11:09,010
friends so if there's a number one

269
00:11:06,760 --> 00:11:10,660
running the yellow corn now it wants to

270
00:11:09,010 --> 00:11:12,850
<font color="#E5E5E5">access its as poo number</font>

271
00:11:10,660 --> 00:11:14,980
what we do is we assign the domain of

272
00:11:12,850 --> 00:11:17,740
this as put to the yellow domain so that

273
00:11:14,980 --> 00:11:20,170
the district<font color="#E5E5E5"> and access it's as pool but</font>

274
00:11:17,740 --> 00:11:22,329
no houses can and if at the<font color="#CCCCCC"> same time</font>

275
00:11:20,170 --> 00:11:24,279
another thread running on core numbers

276
00:11:22,329 --> 00:11:26,199
who wants to access it cesspool number

277
00:11:24,279 --> 00:11:28,750
two we do the same thing except that we

278
00:11:26,199 --> 00:11:31,060
change the domain of that s put to the

279
00:11:28,750 --> 00:11:33,550
orange<font color="#CCCCCC"> Edo man so the results that both</font>

280
00:11:31,060 --> 00:11:36,550
of them can access their own CP at their

281
00:11:33,550 --> 00:11:38,258
own as<font color="#E5E5E5"> posed but not each other's</font>

282
00:11:36,550 --> 00:11:40,359
because this is prevented by the

283
00:11:38,259 --> 00:11:42,040
dimensions control registers set up up

284
00:11:40,360 --> 00:11:45,069
there<font color="#E5E5E5"> as you can see and when they're</font>

285
00:11:42,040 --> 00:11:47,139
down the code<font color="#E5E5E5"> for exits so so we</font>

286
00:11:45,069 --> 00:11:50,199
assigned domain of the aspects back to

287
00:11:47,139 --> 00:11:53,740
the radiomen again so to sum up as

288
00:11:50,199 --> 00:11:55,569
driver will<font color="#CCCCCC"> act</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> proven true exit or</font>

289
00:11:53,740 --> 00:11:57,759
when it's congress which our the code

290
00:11:55,569 --> 00:11:59,349
running<font color="#CCCCCC"> in stylish red or the reason is</font>

291
00:11:57,759 --> 00:12:01,930
<font color="#CCCCCC">synchronized events such as signal</font>

292
00:11:59,350 --> 00:12:06,100
handling etc and you<font color="#CCCCCC"> will</font><font color="#E5E5E5"> unlock the as</font>

293
00:12:01,930 --> 00:12:08,050
pool for those opposite effect so we

294
00:12:06,100 --> 00:12:09,610
want to<font color="#E5E5E5"> optimize our system by moving</font>

295
00:12:08,050 --> 00:12:12,310
the domain<font color="#E5E5E5"> adjusting</font><font color="#CCCCCC"> off</font><font color="#E5E5E5"> the critical</font>

296
00:12:09,610 --> 00:12:14,740
<font color="#CCCCCC">path that will be because adjusting that</font>

297
00:12:12,310 --> 00:12:17,138
domain is relatively cumbersome because

298
00:12:14,740 --> 00:12:19,240
you a need to<font color="#E5E5E5"> do page table working and</font>

299
00:12:17,139 --> 00:12:21,579
then be you have to<font color="#E5E5E5"> invalidate the</font>

300
00:12:19,240 --> 00:12:24,420
corresponding tlb entries to make this

301
00:12:21,579 --> 00:12:27,008
change take effect so how we do that is

302
00:12:24,420 --> 00:12:29,110
remember there are two knobs that could

303
00:12:27,009 --> 00:12:30,699
control the accessibility of as post the

304
00:12:29,110 --> 00:12:33,399
<font color="#E5E5E5">first one is the domain of the page</font>

305
00:12:30,699 --> 00:12:36,160
table entry yeah the second one is<font color="#CCCCCC"> the</font>

306
00:12:33,399 --> 00:12:40,019
value<font color="#CCCCCC"> of those registry entries so we</font>

307
00:12:36,160 --> 00:12:43,350
are use the second way<font color="#CCCCCC"> to move the</font>

308
00:12:40,019 --> 00:12:46,360
domain Justin our critical paths because

309
00:12:43,350 --> 00:12:48,459
changing the register value is much much

310
00:12:46,360 --> 00:12:50,350
faster it only<font color="#E5E5E5"> takes one instruction as</font>

311
00:12:48,459 --> 00:12:52,779
highlighted there and he takes it as

312
00:12:50,350 --> 00:12:55,120
almost instantly the only problem is

313
00:12:52,779 --> 00:12:56,860
that on now<font color="#E5E5E5"> even the legitimate domain</font>

314
00:12:55,120 --> 00:12:59,290
assets could trigger the domain thought

315
00:12:56,860 --> 00:13:01,959
so we<font color="#CCCCCC"> develop the domain thoughts handle</font>

316
00:12:59,290 --> 00:13:03,849
<font color="#CCCCCC">her to lazily handle the domain faults</font>

317
00:13:01,959 --> 00:13:06,878
that<font color="#E5E5E5"> triggered by different events such</font>

318
00:13:03,850 --> 00:13:09,430
as if it was an attack then we will

319
00:13:06,879 --> 00:13:11,290
<font color="#CCCCCC">abort a program or if it's a legitimate</font>

320
00:13:09,430 --> 00:13:13,439
domain access then we will help the

321
00:13:11,290 --> 00:13:16,180
program recover from that<font color="#E5E5E5"> domain</font><font color="#CCCCCC"> thought</font>

322
00:13:13,439 --> 00:13:18,430
so other than those things as driver

323
00:13:16,180 --> 00:13:20,859
will also provide certain runtime events

324
00:13:18,430 --> 00:13:23,019
the first one is the secure stacks so

325
00:13:20,860 --> 00:13:24,339
the<font color="#E5E5E5"> idea is that each</font><font color="#CCCCCC"> etre has a secure</font>

326
00:13:23,019 --> 00:13:26,620
stack allocated from

327
00:13:24,339 --> 00:13:29,019
its own as pool and we switch this

328
00:13:26,620 --> 00:13:31,059
directive industry enter and and other

329
00:13:29,019 --> 00:13:34,449
defense because we don't want the

330
00:13:31,059 --> 00:13:36,459
sensitive data computed by a thread to

331
00:13:34,449 --> 00:13:39,490
be accessed<font color="#CCCCCC"> by other</font><font color="#E5E5E5"> components in</font><font color="#CCCCCC"> the</font>

332
00:13:36,459 --> 00:13:41,498
process and also<font color="#E5E5E5"> there are certain</font>

333
00:13:39,490 --> 00:13:43,180
system interfaces<font color="#E5E5E5"> the</font><font color="#CCCCCC"> S driver needs to</font>

334
00:13:41,499 --> 00:13:45,339
take care<font color="#CCCCCC"> of such as if the attacker</font>

335
00:13:43,180 --> 00:13:47,439
wants pictures the code running inside

336
00:13:45,339 --> 00:13:49,689
shred or try to directly read a

337
00:13:47,439 --> 00:13:51,879
sensitive value from the physical<font color="#E5E5E5"> memory</font>

338
00:13:49,689 --> 00:13:54,998
or from the i/o channels s driver will

339
00:13:51,879 --> 00:13:56,740
block those accordingly and here's an

340
00:13:54,999 --> 00:13:58,629
attic components in our system as

341
00:13:56,740 --> 00:14:01,959
compiler as compiler will do the

342
00:13:58,629 --> 00:14:05,620
following<font color="#E5E5E5"> things such as a verified</font>

343
00:14:01,959 --> 00:14:07,508
kereta API usage<font color="#CCCCCC"> and B remember this</font>

344
00:14:05,620 --> 00:14:11,740
show as proof feature that I<font color="#CCCCCC"> mentioned</font>

345
00:14:07,509 --> 00:14:14,110
previously so on how has compiled do

346
00:14:11,740 --> 00:14:16,839
this is that by associating each thread

347
00:14:14,110 --> 00:14:18,699
with its as<font color="#E5E5E5"> post at compile time and</font>

348
00:14:16,839 --> 00:14:20,379
then each store the information in the

349
00:14:18,699 --> 00:14:22,359
generated binary so that this

350
00:14:20,379 --> 00:14:24,040
information can be registered<font color="#CCCCCC"> to the ask</font>

351
00:14:22,360 --> 00:14:26,259
driver during the low time of the

352
00:14:24,040 --> 00:14:27,579
program and<font color="#CCCCCC"> also as driver will do</font>

353
00:14:26,259 --> 00:14:30,819
certain flow analysis and

354
00:14:27,579 --> 00:14:33,219
instrumentation to for example hardening

355
00:14:30,819 --> 00:14:35,679
the control flow of the inks record or

356
00:14:33,220 --> 00:14:37,449
do some data flow checking to prevent

357
00:14:35,679 --> 00:14:41,019
the infrared<font color="#E5E5E5"> code from accidentally</font>

358
00:14:37,449 --> 00:14:44,620
propagates<font color="#E5E5E5"> the sensitive data from the</font>

359
00:14:41,019 --> 00:14:46,660
Espiritu the unprotected memory for more

360
00:14:44,620 --> 00:14:49,300
<font color="#CCCCCC">information please refer to our paper on</font>

361
00:14:46,660 --> 00:14:52,809
the reason of time I needs to jump to

362
00:14:49,300 --> 00:14:54,550
the evaluation so we prototype our

363
00:14:52,809 --> 00:14:56,920
system on top of<font color="#E5E5E5"> Raspberry Pi to</font>

364
00:14:54,550 --> 00:14:59,290
multiple with the cortex a7 processor

365
00:14:56,920 --> 00:15:01,329
which it has only one gigabyte memory

366
00:14:59,290 --> 00:15:03,429
and we adopt<font color="#E5E5E5"> straight into this 50</font>

367
00:15:01,329 --> 00:15:05,620
<font color="#E5E5E5">venture software's will choose them</font>

368
00:15:03,429 --> 00:15:08,170
because intuitively each one of them has

369
00:15:05,620 --> 00:15:10,360
<font color="#E5E5E5">some sensitive data to protest for</font>

370
00:15:08,170 --> 00:15:13,029
example likely the login<font color="#CCCCCC"> password</font><font color="#E5E5E5"> or the</font>

371
00:15:10,360 --> 00:15:15,249
<font color="#E5E5E5">openssl the private keys and for the</font>

372
00:15:13,029 --> 00:15:17,529
record in our evaluation will only

373
00:15:15,249 --> 00:15:19,600
protect one kind of sensitive data for

374
00:15:17,529 --> 00:15:21,309
each one of<font color="#CCCCCC"> the softwares because we</font>

375
00:15:19,600 --> 00:15:23,350
<font color="#E5E5E5">another developers of them it's kind of</font>

376
00:15:21,309 --> 00:15:25,889
difficult if not impossible for us to

377
00:15:23,350 --> 00:15:28,449
identify all<font color="#CCCCCC"> the possible sensitive data</font>

378
00:15:25,889 --> 00:15:30,879
that they have and regarding the

379
00:15:28,449 --> 00:15:33,370
adoption efforts Oh average you only

380
00:15:30,879 --> 00:15:35,920
<font color="#CCCCCC">introduce 20 at 21 line</font><font color="#E5E5E5"> of codes</font>

381
00:15:33,370 --> 00:15:38,040
changing to them and<font color="#E5E5E5"> you only took us 32</font>

382
00:15:35,920 --> 00:15:40,630
<font color="#E5E5E5">minutes to adopt right into them</font>

383
00:15:38,040 --> 00:15:42,939
because the adoption process is very

384
00:15:40,630 --> 00:15:45,220
straightforward<font color="#CCCCCC"> but not once you know</font>

385
00:15:42,940 --> 00:15:47,770
what beta<font color="#E5E5E5"> okay we want to protect just</font>

386
00:15:45,220 --> 00:15:49,630
find<font color="#CCCCCC"> the code that Isis stem and wrap</font>

387
00:15:47,770 --> 00:15:52,329
them with the corresponding for AP ice

388
00:15:49,630 --> 00:15:54,310
so minimum coach ange and regarding the

389
00:15:52,330 --> 00:15:57,010
performance we observe less than five

390
00:15:54,310 --> 00:15:58,839
percent slow down on some of them

391
00:15:57,010 --> 00:16:01,089
because of<font color="#E5E5E5"> the system cause some of them</font>

392
00:15:58,839 --> 00:16:04,149
because the instrumentation code added

393
00:16:01,089 --> 00:16:06,040
by the<font color="#CCCCCC"> S compiler and on average rate we</font>

394
00:16:04,149 --> 00:16:08,080
sought less than a percent memory

395
00:16:06,040 --> 00:16:10,029
overhead and here's another evaluation

396
00:16:08,080 --> 00:16:11,980
results we want to compare those<font color="#CCCCCC"> four</font>

397
00:16:10,029 --> 00:16:14,350
<font color="#E5E5E5">API switch the corresponding system</font>

398
00:16:11,980 --> 00:16:16,480
<font color="#E5E5E5">costs so I'll go into</font><font color="#CCCCCC"> this diskette PID</font>

399
00:16:14,350 --> 00:16:19,420
which is one of<font color="#E5E5E5"> the lightest</font><font color="#CCCCCC"> sis course</font>

400
00:16:16,480 --> 00:16:23,230
in Linux and we compared to recreation

401
00:16:19,420 --> 00:16:26,620
api's with a clone Teal'c alone is the

402
00:16:23,230 --> 00:16:28,930
one that create a threat so<font color="#E5E5E5"> for entry</font>

403
00:16:26,620 --> 00:16:31,240
and relaxes as you can see<font color="#E5E5E5"> procreation</font>

404
00:16:28,930 --> 00:16:33,250
API to run slightly faster than<font color="#CCCCCC"> Colonia</font>

405
00:16:31,240 --> 00:16:36,100
<font color="#E5E5E5">almost twice the time of get PID and</font>

406
00:16:33,250 --> 00:16:39,610
also we compared as<font color="#E5E5E5"> poor allocation API</font>

407
00:16:36,100 --> 00:16:41,950
serves em map here as<font color="#E5E5E5"> application runs</font>

408
00:16:39,610 --> 00:16:44,380
slightly slower but this is actually

409
00:16:41,950 --> 00:16:47,740
<font color="#E5E5E5">expected because there are the wrappers</font>

410
00:16:44,380 --> 00:16:50,140
of<font color="#CCCCCC"> em map so to conclude our goal is to</font>

411
00:16:47,740 --> 00:16:52,899
<font color="#CCCCCC">help</font><font color="#E5E5E5"> developers to protect the sensitive</font>

412
00:16:50,140 --> 00:16:55,510
code or data from in process abuse and

413
00:16:52,899 --> 00:16:57,880
to achieve that goal with pros threads

414
00:16:55,510 --> 00:16:59,620
with private memory or threat of<font color="#CCCCCC"> an</font>

415
00:16:57,880 --> 00:17:02,410
grant you can fill them as flexible

416
00:16:59,620 --> 00:17:04,720
scope segments of<font color="#CCCCCC"> their executions and</font>

417
00:17:02,410 --> 00:17:07,119
rota efficient and comparable because we

418
00:17:04,720 --> 00:17:08,860
based on a menu dome and check and we

419
00:17:07,119 --> 00:17:10,750
don't introduce multiple page tables we

420
00:17:08,859 --> 00:17:12,969
don't<font color="#E5E5E5"> have nested pagelings now have</font>

421
00:17:10,750 --> 00:17:15,179
instrumentations and lastly know how<font color="#E5E5E5"> our</font>

422
00:17:12,970 --> 00:17:18,400
modifications so you can just grab our

423
00:17:15,179 --> 00:17:21,040
driver and by are machined and use our

424
00:17:18,400 --> 00:17:23,650
system and<font color="#E5E5E5"> also the last but not least</font>

425
00:17:21,040 --> 00:17:25,659
as robust because we not just prevent

426
00:17:23,650 --> 00:17:27,939
the attacker from attacking threat from

427
00:17:25,660 --> 00:17:30,070
<font color="#E5E5E5">the code outside even if the type of</font>

428
00:17:27,939 --> 00:17:32,650
fine manages to find vulnerabilities for

429
00:17:30,070 --> 00:17:35,860
coding infrared we also make sure<font color="#CCCCCC"> that</font>

430
00:17:32,650 --> 00:17:38,679
<font color="#CCCCCC">on</font><font color="#E5E5E5"> its the chances the attacker</font><font color="#CCCCCC"> put this</font>

431
00:17:35,860 --> 00:17:40,629
<font color="#E5E5E5">attack</font><font color="#CCCCCC"> offer will be negligible so that</font>

432
00:17:38,679 --> 00:17:42,990
concludes my talk I want<font color="#E5E5E5"> I'm happy</font><font color="#CCCCCC"> to</font>

433
00:17:40,630 --> 00:17:42,990
take questions

434
00:17:47,950 --> 00:17:52,549
<font color="#CCCCCC">hey</font><font color="#E5E5E5"> thanks a lot so this may be in the</font>

435
00:17:50,960 --> 00:17:54,409
part where you said I don't<font color="#E5E5E5"> have time to</font>

436
00:17:52,549 --> 00:17:57,110
talk about<font color="#E5E5E5"> this so read the paper but</font>

437
00:17:54,409 --> 00:17:59,510
how do you keep the light the evil

438
00:17:57,110 --> 00:18:03,889
library from just calling shred enter

439
00:17:59,510 --> 00:18:06,289
with some other<font color="#CCCCCC"> oks pool and reading the</font>

440
00:18:03,890 --> 00:18:08,600
data directly yes thank you<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font>

441
00:18:06,289 --> 00:18:11,330
question on so this<font color="#E5E5E5"> is actually this</font>

442
00:18:08,600 --> 00:18:14,389
feature called as push rearing and<font color="#E5E5E5"> I</font>

443
00:18:11,330 --> 00:18:16,220
also mentioned in the talk that how the

444
00:18:14,390 --> 00:18:18,620
S compiler prevent this attack from

445
00:18:16,220 --> 00:18:21,830
happening is that<font color="#E5E5E5"> Ella compile time are</font>

446
00:18:18,620 --> 00:18:26,270
as compiler will try to associate each

447
00:18:21,830 --> 00:18:29,418
correct enter coincides with the SP SP

448
00:18:26,270 --> 00:18:31,908
descriptor and store that information at

449
00:18:29,419 --> 00:18:33,799
the generator binary additional elf

450
00:18:31,909 --> 00:18:36,320
section and this information<font color="#CCCCCC"> will be</font>

451
00:18:33,799 --> 00:18:38,299
registered<font color="#CCCCCC"> to the edge driver at the</font>

452
00:18:36,320 --> 00:18:41,299
program load time so if there's a

453
00:18:38,299 --> 00:18:44,480
malicious library try to call us<font color="#E5E5E5"> or</font>

454
00:18:41,299 --> 00:18:47,210
<font color="#E5E5E5">enter with other</font><font color="#CCCCCC"> tres a spool descriptor</font>

455
00:18:44,480 --> 00:18:52,700
it will be like rejected by desh driver

456
00:18:47,210 --> 00:18:55,610
so<font color="#E5E5E5"> okay thank you Brian Ford</font><font color="#CCCCCC"> EPFL nice</font>

457
00:18:52,700 --> 00:18:57,770
work I like especially like the

458
00:18:55,610 --> 00:19:01,070
attention to the kind<font color="#E5E5E5"> of IPI simplicity</font>

459
00:18:57,770 --> 00:19:04,059
and stuff I am a little concerned you

460
00:19:01,070 --> 00:19:06,950
didn't describe the threat model very

461
00:19:04,059 --> 00:19:08,928
too much I'm concerned it you know if

462
00:19:06,950 --> 00:19:11,510
these the attack code can kind of live

463
00:19:08,929 --> 00:19:13,850
anywhere and do you know a lot<font color="#CCCCCC"> of other</font>

464
00:19:11,510 --> 00:19:18,710
things<font color="#E5E5E5"> in the library why wouldn't the</font>

465
00:19:13,850 --> 00:19:22,370
attack code just try to try to say cause

466
00:19:18,710 --> 00:19:24,980
<font color="#E5E5E5">your replace the the</font><font color="#CCCCCC"> Shred based</font>

467
00:19:22,370 --> 00:19:26,750
password<font color="#CCCCCC"> check</font><font color="#E5E5E5"> password hash checking</font>

468
00:19:24,980 --> 00:19:29,419
code with its own version that doesn't

469
00:19:26,750 --> 00:19:31,730
use threat shreds you know for aggregate

470
00:19:29,419 --> 00:19:37,610
you know by fiddling with a function

471
00:19:31,730 --> 00:19:39,799
<font color="#CCCCCC">pointer or a some dll or you know</font><font color="#E5E5E5"> a dll</font>

472
00:19:37,610 --> 00:19:42,949
loading state or something to to<font color="#CCCCCC"> just</font>

473
00:19:39,799 --> 00:19:45,860
kind of redirect the whole you know

474
00:19:42,950 --> 00:19:49,840
password checking module to something

475
00:19:45,860 --> 00:19:54,860
<font color="#CCCCCC">that the the malicious library controls</font>

476
00:19:49,840 --> 00:19:56,959
so yes this is this attack is that salad

477
00:19:54,860 --> 00:19:57,620
and our current implementation we

478
00:19:56,960 --> 00:20:00,170
require

479
00:19:57,620 --> 00:20:04,100
the source codes of<font color="#CCCCCC"> the like the</font>

480
00:20:00,170 --> 00:20:07,670
libraries or those things and during our

481
00:20:04,100 --> 00:20:10,370
<font color="#E5E5E5">compile time we will like do the program</font>

482
00:20:07,670 --> 00:20:15,500
analysis for the<font color="#E5E5E5"> whole other modules</font>

483
00:20:10,370 --> 00:20:17,330
together and I'm not<font color="#CCCCCC"> sure if I</font>

484
00:20:15,500 --> 00:20:19,430
understand that we can discuss the

485
00:20:17,330 --> 00:20:21,260
details online it's just I kind of

486
00:20:19,430 --> 00:20:24,230
unclear what what the separation between

487
00:20:21,260 --> 00:20:26,690
<font color="#E5E5E5">the trusted part of the code and</font>

488
00:20:24,230 --> 00:20:28,280
untrusted is I'd like<font color="#CCCCCC"> to but yeah there</font>

489
00:20:26,690 --> 00:20:32,120
<font color="#E5E5E5">that offline thank you no good stuff</font>

490
00:20:28,280 --> 00:20:33,800
like you I can fix that so what you need

491
00:20:32,120 --> 00:20:35,840
<font color="#E5E5E5">to do</font><font color="#CCCCCC"> is you need</font><font color="#E5E5E5"> to associate what code</font>

492
00:20:33,800 --> 00:20:39,409
is with a shred well so that you can't

493
00:20:35,840 --> 00:20:41,720
control flow inject out of a shred to

494
00:20:39,410 --> 00:20:43,850
the library alternatively just use Intel

495
00:20:41,720 --> 00:20:46,910
SGX and encrypt your coat and your data

496
00:20:43,850 --> 00:20:49,010
if you can stand the overheads it'll

497
00:20:46,910 --> 00:20:51,710
give you the same ability today yeah as

498
00:20:49,010 --> 00:20:56,809
checks is very secure in<font color="#E5E5E5"> that sense and</font>

499
00:20:51,710 --> 00:20:58,610
but the problem is that<font color="#E5E5E5"> you know so in</font>

500
00:20:56,809 --> 00:21:02,450
the unclaimed the security environment

501
00:20:58,610 --> 00:21:06,169
<font color="#CCCCCC">sgx</font><font color="#E5E5E5"> the code cannot make system</font><font color="#CCCCCC"> cause so</font>

502
00:21:02,450 --> 00:21:08,600
it's kind of for some cases<font color="#CCCCCC"> states kind</font>

503
00:21:06,170 --> 00:21:10,670
of difficult<font color="#CCCCCC"> to use them for example</font>

504
00:21:08,600 --> 00:21:13,490
there are some<font color="#CCCCCC"> papers before that has to</font>

505
00:21:10,670 --> 00:21:15,890
throwing the whole OS in the unclaimed

506
00:21:13,490 --> 00:21:18,920
to make the applications work so in that

507
00:21:15,890 --> 00:21:21,770
kind of scenario if you are willing<font color="#E5E5E5"> to</font>

508
00:21:18,920 --> 00:21:24,710
assist and the security guarantee that

509
00:21:21,770 --> 00:21:28,940
we provide then I think our solution is

510
00:21:24,710 --> 00:21:30,950
actually easier<font color="#CCCCCC"> to use so in either case</font>

511
00:21:28,940 --> 00:21:34,190
so you've got<font color="#E5E5E5"> to draw lines around stuff</font>

512
00:21:30,950 --> 00:21:36,610
<font color="#CCCCCC">and you're just doing thread calls</font><font color="#E5E5E5"> sgx</font>

513
00:21:34,190 --> 00:21:39,470
<font color="#CCCCCC">is</font><font color="#E5E5E5"> got to do more like the chrome style</font>

514
00:21:36,610 --> 00:21:43,340
sandboxing but thank you very much<font color="#CCCCCC"> okay</font>

515
00:21:39,470 --> 00:21:46,220
thanks I Paul<font color="#CCCCCC"> makowsky from North</font>

516
00:21:43,340 --> 00:21:48,139
<font color="#E5E5E5">industries thanks for the talk so my</font>

517
00:21:46,220 --> 00:21:50,690
question<font color="#CCCCCC"> is regarding memory protection</font>

518
00:21:48,140 --> 00:21:53,179
keys so<font color="#E5E5E5"> you talked a lot about armed</font>

519
00:21:50,690 --> 00:21:55,160
protection domains and that would

520
00:21:53,179 --> 00:21:57,470
require you know Colonel involvement<font color="#E5E5E5"> to</font>

521
00:21:55,160 --> 00:21:59,090
change the protection domains but for

522
00:21:57,470 --> 00:22:00,590
the memory protection keys my

523
00:21:59,090 --> 00:22:02,959
understanding is you can just issue new

524
00:22:00,590 --> 00:22:05,120
instructions in user space that would

525
00:22:02,960 --> 00:22:07,340
write to those keys that would<font color="#E5E5E5"> hold</font>

526
00:22:05,120 --> 00:22:09,979
whether or not you can read or write<font color="#CCCCCC"> two</font>

527
00:22:07,340 --> 00:22:12,020
different domains so I guess<font color="#CCCCCC"> my question</font>

528
00:22:09,980 --> 00:22:14,540
is do you does your compiler and

529
00:22:12,020 --> 00:22:16,040
imitation ban instructions would<font color="#E5E5E5"> you</font>

530
00:22:14,540 --> 00:22:17,540
have to do<font color="#CCCCCC"> something like</font><font color="#E5E5E5"> nakal where</font>

531
00:22:16,040 --> 00:22:19,360
you have a verification pass to make

532
00:22:17,540 --> 00:22:22,220
sure you don't<font color="#E5E5E5"> have off cut instructions</font>

533
00:22:19,360 --> 00:22:24,590
that represent those instructions<font color="#E5E5E5"> okay</font>

534
00:22:22,220 --> 00:22:26,390
so yeah what you said is valid and I

535
00:22:24,590 --> 00:22:29,120
think you also kind<font color="#E5E5E5"> of answer the</font>

536
00:22:26,390 --> 00:22:31,580
questions they erased so yes in the

537
00:22:29,120 --> 00:22:34,790
<font color="#E5E5E5">memory toast protesting keys the user</font>

538
00:22:31,580 --> 00:22:38,060
level<font color="#CCCCCC"> code can like change the value of</font>

539
00:22:34,790 --> 00:22:40,280
their registers but what we can do is

540
00:22:38,060 --> 00:22:42,980
that I mean fundamentally the designs

541
00:22:40,280 --> 00:22:45,170
will still be mostly the same is that

542
00:22:42,980 --> 00:22:49,510
that we could use<font color="#E5E5E5"> compiler techniques to</font>

543
00:22:45,170 --> 00:22:53,860
like sanitize the code to make<font color="#E5E5E5"> sure that</font>

544
00:22:49,510 --> 00:22:56,750
there is no like gadgets to change their

545
00:22:53,860 --> 00:23:00,100
verification passes well then is<font color="#E5E5E5"> that</font>

546
00:22:56,750 --> 00:23:00,100
correct<font color="#CCCCCC"> okay</font>

