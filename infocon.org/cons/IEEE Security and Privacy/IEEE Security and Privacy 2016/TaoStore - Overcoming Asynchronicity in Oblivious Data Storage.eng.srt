1
00:00:00,000 --> 00:00:05,190
<font color="#E5E5E5">okay hello hello everyone thanks Jay for</font>

2
00:00:03,120 --> 00:00:07,529
the introduction I'm going<font color="#E5E5E5"> to present</font>

3
00:00:05,190 --> 00:00:09,599
our work Toph store overcoming a

4
00:00:07,529 --> 00:00:11,940
synchronous Tina Louise data storage

5
00:00:09,599 --> 00:00:14,460
that we developed at use University of

6
00:00:11,940 --> 00:00:17,210
California Santa Barbara actually I am

7
00:00:14,460 --> 00:00:19,980
<font color="#E5E5E5">lucky that Danny already</font><font color="#CCCCCC"> rap-up you</font>

8
00:00:17,210 --> 00:00:23,550
regarding 20 blue stream<font color="#CCCCCC"> and oblivious</font>

9
00:00:19,980 --> 00:00:25,590
<font color="#E5E5E5">frame ideology so all sourcing private</font>

10
00:00:23,550 --> 00:00:28,920
data has become increasingly more

11
00:00:25,590 --> 00:00:31,410
popular and day by day we see more cloud

12
00:00:28,920 --> 00:00:33,719
based storage services and after

13
00:00:31,410 --> 00:00:36,809
outsourcing the data users access their

14
00:00:33,719 --> 00:00:39,809
data in terms<font color="#E5E5E5"> of read and write manner</font>

15
00:00:36,809 --> 00:00:42,780
but Hubble and this cloud storage

16
00:00:39,809 --> 00:00:45,000
services provides nice features but how

17
00:00:42,780 --> 00:00:46,829
<font color="#E5E5E5">about the security concerns the first</font>

18
00:00:45,000 --> 00:00:49,289
thing that<font color="#E5E5E5"> you can think about is the</font>

19
00:00:46,829 --> 00:00:51,420
confidentiality<font color="#CCCCCC"> of the data we can</font>

20
00:00:49,289 --> 00:00:55,350
ensure the confidentiality of the data

21
00:00:51,420 --> 00:00:57,510
by using the encryption however at this

22
00:00:55,350 --> 00:01:01,370
point we need to ask the question

23
00:00:57,510 --> 00:01:03,210
whether the encryption alone is enough

24
00:01:01,370 --> 00:01:06,630
unfortunately the answer to this

25
00:01:03,210 --> 00:01:08,760
question is- earlier work<font color="#CCCCCC"> showed that</font>

26
00:01:06,630 --> 00:01:11,970
access patterns can lead sensitive

27
00:01:08,760 --> 00:01:14,420
information to hide access pattern we

28
00:01:11,970 --> 00:01:17,340
would like<font color="#E5E5E5"> the hu oblivious access</font>

29
00:01:14,420 --> 00:01:19,530
basically we<font color="#CCCCCC"> are trying</font><font color="#E5E5E5"> to find a way to</font>

30
00:01:17,340 --> 00:01:21,570
translate each logical access to a

31
00:01:19,530 --> 00:01:24,930
sequence of random random looking

32
00:01:21,570 --> 00:01:27,990
accesses oblivious<font color="#E5E5E5"> Ram is a standard</font>

33
00:01:24,930 --> 00:01:30,479
approach to achieve of<font color="#E5E5E5"> Lewis access and</font>

34
00:01:27,990 --> 00:01:32,669
it was initially<font color="#E5E5E5"> proposed by God</font><font color="#CCCCCC"> rehan</font>

35
00:01:30,479 --> 00:01:35,960
<font color="#CCCCCC">ostrovsky and there is a huge body of</font>

36
00:01:32,670 --> 00:01:38,850
work that that achieves oblivious access

37
00:01:35,960 --> 00:01:41,309
they<font color="#E5E5E5"> usually store a secret state of</font>

38
00:01:38,850 --> 00:01:43,408
<font color="#E5E5E5">info a secret state in terms of the</font>

39
00:01:41,310 --> 00:01:49,380
storage information or at the client

40
00:01:43,409 --> 00:01:51,689
side and the question here are we done

41
00:01:49,380 --> 00:01:53,490
with this<font color="#E5E5E5"> many of the questions so the</font>

42
00:01:51,689 --> 00:01:55,229
<font color="#E5E5E5">answer is no because these are all</font>

43
00:01:53,490 --> 00:01:57,479
single client single client

44
00:01:55,229 --> 00:01:59,460
constructions and that was also<font color="#E5E5E5"> the</font><font color="#CCCCCC"> one</font>

45
00:01:57,479 --> 00:02:01,350
of the questions just before my toga

46
00:01:59,460 --> 00:02:04,710
actually we consider a different

47
00:02:01,350 --> 00:02:07,140
scenario here where a company outsource

48
00:02:04,710 --> 00:02:10,799
it is they<font color="#CCCCCC"> all data to the untrusted</font>

49
00:02:07,140 --> 00:02:15,050
cloud and then the trusted employees

50
00:02:10,800 --> 00:02:15,050
will access this data concurrently

51
00:02:15,110 --> 00:02:21,870
here and the concurrency along with the

52
00:02:19,980 --> 00:02:26,190
concurrency we would like to<font color="#E5E5E5"> achieve</font>

53
00:02:21,870 --> 00:02:28,920
security and the efficiency the simple

54
00:02:26,190 --> 00:02:31,550
approach will be<font color="#CCCCCC"> taught by introducing a</font>

55
00:02:28,920 --> 00:02:34,940
single<font color="#CCCCCC"> or M client in the middle and</font>

56
00:02:31,550 --> 00:02:37,500
this can handle the client<font color="#CCCCCC"> requests</font>

57
00:02:34,940 --> 00:02:39,329
sequentially but here we lose the

58
00:02:37,500 --> 00:02:43,140
efficiency because the access will<font color="#CCCCCC"> be</font>

59
00:02:39,330 --> 00:02:45,630
handled sequentially and to the date we

60
00:02:43,140 --> 00:02:47,309
don't have so many solutions that

61
00:02:45,630 --> 00:02:50,160
leverage parallelism for higher

62
00:02:47,310 --> 00:02:52,830
throughput and efficiency the initial

63
00:02:50,160 --> 00:02:55,980
<font color="#CCCCCC">verte that was / that initial work was</font>

64
00:02:52,830 --> 00:02:58,170
the<font color="#CCCCCC"> private FS that try to provide</font>

65
00:02:55,980 --> 00:03:00,829
parallel or bluish accesses to the

66
00:02:58,170 --> 00:03:03,329
<font color="#CCCCCC">cobbler is Oh to</font><font color="#E5E5E5"> the cloud storage</font>

67
00:03:00,830 --> 00:03:06,840
unfortunately the private<font color="#CCCCCC"> FS support</font>

68
00:03:03,330 --> 00:03:09,989
small number of concurrency and then

69
00:03:06,840 --> 00:03:12,900
later on<font color="#CCCCCC"> a blue beast or system came</font>

70
00:03:09,989 --> 00:03:15,239
came up and it introduced a proxy

71
00:03:12,900 --> 00:03:17,459
approach in the middle where there<font color="#E5E5E5"> is a</font>

72
00:03:15,239 --> 00:03:20,040
trusted proxy in the middle and it

73
00:03:17,459 --> 00:03:23,100
mediates the client requests and handles

74
00:03:20,040 --> 00:03:26,340
the request concurrently by accessing to

75
00:03:23,100 --> 00:03:28,680
the storage the more recent development

76
00:03:26,340 --> 00:03:31,890
is curious<font color="#CCCCCC"> that just came up and it also</font>

77
00:03:28,680 --> 00:03:34,260
follows the similar as similar setting

78
00:03:31,890 --> 00:03:38,059
and we also considered similar setting

79
00:03:34,260 --> 00:03:40,649
in our work another variable variable

80
00:03:38,060 --> 00:03:43,340
that affects the security<font color="#E5E5E5"> and the</font>

81
00:03:40,650 --> 00:03:46,260
performance is the a synchronicity

82
00:03:43,340 --> 00:03:48,450
unfortunately the earlier works does not

83
00:03:46,260 --> 00:03:51,149
care does not capture the essence<font color="#E5E5E5"> still</font>

84
00:03:48,450 --> 00:03:55,619
well so what this<font color="#CCCCCC"> is what we are going</font>

85
00:03:51,150 --> 00:03:58,200
to handle here we have two main

86
00:03:55,620 --> 00:04:00,060
contributions in this verb first we

87
00:03:58,200 --> 00:04:02,880
develop a security model for a

88
00:04:00,060 --> 00:04:05,940
synchronous ORM and attack and then we

89
00:04:02,880 --> 00:04:07,769
develop at a store so which is<font color="#CCCCCC"> a fully a</font>

90
00:04:05,940 --> 00:04:11,280
synchronous and concurrent or ebay

91
00:04:07,769 --> 00:04:13,230
oblivious torch our trade model

92
00:04:11,280 --> 00:04:15,750
considers an honest but curious

93
00:04:13,230 --> 00:04:17,728
adversary model we're at<font color="#E5E5E5"> the adversary</font>

94
00:04:15,750 --> 00:04:20,130
can<font color="#CCCCCC"> seize the road storage and all the</font>

95
00:04:17,728 --> 00:04:22,079
network communication to the<font color="#E5E5E5"> storage in</font>

96
00:04:20,130 --> 00:04:26,039
addition<font color="#CCCCCC"> to that the adversary can</font>

97
00:04:22,079 --> 00:04:26,820
control the asynchronous links so we can

98
00:04:26,039 --> 00:04:29,130
not sure

99
00:04:26,820 --> 00:04:32,070
what the capabilities of the adversary

100
00:04:29,130 --> 00:04:34,650
and the we give<font color="#CCCCCC"> we assume the worst case</font>

101
00:04:32,070 --> 00:04:37,380
scenario that the adversary control<font color="#E5E5E5"> the</font>

102
00:04:34,650 --> 00:04:40,739
messages and it can delay the messages

103
00:04:37,380 --> 00:04:43,350
arbitrarily long another thing is<font color="#CCCCCC"> that</font>

104
00:04:40,740 --> 00:04:45,570
the our adversary's see our adversary

105
00:04:43,350 --> 00:04:49,080
can schedule the operations at any point

106
00:04:45,570 --> 00:04:52,620
in<font color="#CCCCCC"> time adaptively and it also learns to</font>

107
00:04:49,080 --> 00:04:55,560
response times of these requests earlier

108
00:04:52,620 --> 00:04:58,950
a synchronous or<font color="#E5E5E5"> em security model was</font>

109
00:04:55,560 --> 00:05:01,440
kept well defined in da<font color="#CCCCCC"> blue restore it</font>

110
00:04:58,950 --> 00:05:02,880
is inherently non-adaptive and it

111
00:05:01,440 --> 00:05:06,480
doesn't leak the response time

112
00:05:02,880 --> 00:05:08,510
information however it is<font color="#E5E5E5"> a very hard to</font>

113
00:05:06,480 --> 00:05:12,060
<font color="#CCCCCC">offer a hard to hide this information</font>

114
00:05:08,510 --> 00:05:13,980
the network<font color="#CCCCCC"> might be intruded or the</font>

115
00:05:12,060 --> 00:05:16,770
response to the clients might trigger

116
00:05:13,980 --> 00:05:20,190
different behaviors and there might be a

117
00:05:16,770 --> 00:05:22,760
side channel leakage therefore we<font color="#E5E5E5"> are</font>

118
00:05:20,190 --> 00:05:25,200
<font color="#E5E5E5">formalized obliviousness in this setting</font>

119
00:05:22,760 --> 00:05:28,590
basically to time in consistent

120
00:05:25,200 --> 00:05:30,060
execution should be indistinguishable we

121
00:05:28,590 --> 00:05:32,340
have an indistinguishable of the base

122
00:05:30,060 --> 00:05:34,800
security definition which is called

123
00:05:32,340 --> 00:05:38,310
adaptive<font color="#E5E5E5"> asynchronous of</font><font color="#CCCCCC"> Lewis pneus or</font>

124
00:05:34,800 --> 00:05:40,380
a a or b security for sure but<font color="#CCCCCC"> i will</font>

125
00:05:38,310 --> 00:05:44,460
<font color="#E5E5E5">not get into the details here</font><font color="#CCCCCC"> please</font>

126
00:05:40,380 --> 00:05:47,760
refer<font color="#E5E5E5"> to this paper for more details so</font>

127
00:05:44,460 --> 00:05:50,460
we have the<font color="#CCCCCC"> ALB security the question we</font>

128
00:05:47,760 --> 00:05:52,860
need to ask whether the existing systems

129
00:05:50,460 --> 00:05:55,080
achieve air will be security been

130
00:05:52,860 --> 00:05:56,940
simpler min<font color="#CCCCCC"> Schadler and his team showed</font>

131
00:05:55,080 --> 00:06:00,570
that<font color="#CCCCCC"> uh luister</font><font color="#E5E5E5"> has some security</font>

132
00:05:56,940 --> 00:06:03,690
problems and all about curious is secure

133
00:06:00,570 --> 00:06:05,820
in oblivious<font color="#CCCCCC"> tours threat model here in</font>

134
00:06:03,690 --> 00:06:09,000
this work we<font color="#E5E5E5"> showed that curious does</font>

135
00:06:05,820 --> 00:06:11,820
not<font color="#CCCCCC"> hua OB security but we would</font><font color="#E5E5E5"> like to</font>

136
00:06:09,000 --> 00:06:13,860
<font color="#E5E5E5">note that no claims are incorrect in</font>

137
00:06:11,820 --> 00:06:16,620
curious it just assumes a different

138
00:06:13,860 --> 00:06:18,480
security model so i am going<font color="#CCCCCC"> to show you</font>

139
00:06:16,620 --> 00:06:20,910
<font color="#E5E5E5">that the curious is not area will be</font>

140
00:06:18,480 --> 00:06:24,420
secure<font color="#E5E5E5"> but first let me cover briefly</font>

141
00:06:20,910 --> 00:06:27,330
how the curious system work<font color="#E5E5E5"> it so it</font>

142
00:06:24,420 --> 00:06:29,400
partitions the storage space<font color="#E5E5E5"> and it has</font>

143
00:06:27,330 --> 00:06:32,430
a modular design actually each

144
00:06:29,400 --> 00:06:34,349
<font color="#E5E5E5">partitions runs a single or inclined and</font>

145
00:06:32,430 --> 00:06:37,380
area access happens to a random

146
00:06:34,350 --> 00:06:38,780
partition items are randomly assigned

147
00:06:37,380 --> 00:06:41,750
after every

148
00:06:38,780 --> 00:06:44,299
earth and concurrent accesses four

149
00:06:41,750 --> 00:06:46,970
distinct items most likely<font color="#CCCCCC"> will go to</font>

150
00:06:44,300 --> 00:06:49,820
the different partitions so here you

151
00:06:46,970 --> 00:06:51,530
<font color="#CCCCCC">will see that we try to access item amb</font>

152
00:06:49,820 --> 00:06:54,710
and these will be handled through

153
00:06:51,530 --> 00:06:56,450
different partitions how does curious

154
00:06:54,710 --> 00:06:59,840
handle when there are concurrent access

155
00:06:56,450 --> 00:07:02,840
is on same item so curious users fake

156
00:06:59,840 --> 00:07:06,799
access approach only one real access

157
00:07:02,840 --> 00:07:09,440
will<font color="#CCCCCC"> be made to the real access will be</font>

158
00:07:06,800 --> 00:07:12,140
<font color="#E5E5E5">made and the others will issue invoke</font>

159
00:07:09,440 --> 00:07:15,200
fake or random obsesses so here you see

160
00:07:12,140 --> 00:07:18,260
there are two concurrent access is on on

161
00:07:15,200 --> 00:07:21,469
item a and the second request will issue

162
00:07:18,260 --> 00:07:24,469
a fake access operation now we can

163
00:07:21,470 --> 00:07:27,260
present our attack against curious so

164
00:07:24,470 --> 00:07:30,830
here we consider two scenarios actually

165
00:07:27,260 --> 00:07:34,280
on the<font color="#CCCCCC"> left case we have two concurrent</font>

166
00:07:30,830 --> 00:07:36,789
accesses on item a on the rights case we

167
00:07:34,280 --> 00:07:40,250
have our<font color="#E5E5E5"> accessories on distinct items</font>

168
00:07:36,790 --> 00:07:43,160
the first request for the item a will

169
00:07:40,250 --> 00:07:45,229
issue a real access operation but on the

170
00:07:43,160 --> 00:07:48,320
<font color="#CCCCCC">Left case there is the concurrent access</font>

171
00:07:45,229 --> 00:07:50,960
on item a so<font color="#CCCCCC"> that will issue a</font><font color="#E5E5E5"> fake leg</font>

172
00:07:48,320 --> 00:07:53,990
access operation but on the<font color="#E5E5E5"> right case</font>

173
00:07:50,960 --> 00:07:57,469
we have an access on be that involves a

174
00:07:53,990 --> 00:08:00,200
real read operation so since the network

175
00:07:57,470 --> 00:08:03,350
is a<font color="#E5E5E5"> synchronous and that it is under</font>

176
00:08:00,200 --> 00:08:05,479
the control of an adversary<font color="#E5E5E5"> so we cannot</font>

177
00:08:03,350 --> 00:08:07,370
should know that<font color="#E5E5E5"> whether the second</font>

178
00:08:05,479 --> 00:08:10,430
request will be<font color="#E5E5E5"> returned earlier or</font>

179
00:08:07,370 --> 00:08:12,650
later actually so assume a scenario here

180
00:08:10,430 --> 00:08:14,630
we return the response to the second

181
00:08:12,650 --> 00:08:18,200
request<font color="#E5E5E5"> return earlier than the first</font>

182
00:08:14,630 --> 00:08:20,810
one in this case on the right case the

183
00:08:18,200 --> 00:08:24,080
proxy will return a response for Billy

184
00:08:20,810 --> 00:08:26,960
but on the<font color="#E5E5E5"> Left case we cannot return</font><font color="#CCCCCC"> a</font>

185
00:08:24,080 --> 00:08:29,930
<font color="#E5E5E5">response for a because we haven't</font>

186
00:08:26,960 --> 00:08:32,689
touched<font color="#E5E5E5"> it yet whenever we fetch the pad</font>

187
00:08:29,930 --> 00:08:34,789
for a and whenever we fetch the item a

188
00:08:32,690 --> 00:08:37,940
we will return responses for the request

189
00:08:34,789 --> 00:08:40,429
of a as you can<font color="#E5E5E5"> see since the adversary</font>

190
00:08:37,940 --> 00:08:42,950
knows when the return<font color="#CCCCCC"> remind the</font>

191
00:08:40,429 --> 00:08:46,359
response are returned it learns whether

192
00:08:42,950 --> 00:08:49,250
the accesses are on the same item or not

193
00:08:46,360 --> 00:08:51,680
we have<font color="#CCCCCC"> a fixed for later but just stay</font>

194
00:08:49,250 --> 00:08:54,860
tuned so we will show it to<font color="#E5E5E5"> you</font><font color="#CCCCCC"> later</font>

195
00:08:51,680 --> 00:08:57,140
so does our second contribution is that

196
00:08:54,860 --> 00:08:59,149
we develop at a store and new full a

197
00:08:57,140 --> 00:09:02,210
synchronous and concurrent three bags of

198
00:08:59,149 --> 00:09:04,220
luggage storage curious is very good<font color="#CCCCCC"> in</font>

199
00:09:02,210 --> 00:09:07,520
terms of design it is modular but it has

200
00:09:04,220 --> 00:09:10,670
two drawbacks as we show as we see so it

201
00:09:07,520 --> 00:09:14,089
<font color="#E5E5E5">is not it doesn't support a OB security</font>

202
00:09:10,670 --> 00:09:17,390
and the it achieves a concurrency by

203
00:09:14,089 --> 00:09:20,779
using partitioning underlying single

204
00:09:17,390 --> 00:09:22,910
<font color="#E5E5E5">orem clients are not concurrent but we</font>

205
00:09:20,779 --> 00:09:25,520
would like<font color="#CCCCCC"> to</font><font color="#E5E5E5"> achieve with concurrency</font>

206
00:09:22,910 --> 00:09:27,890
independent of the partitioning we would

207
00:09:25,520 --> 00:09:30,020
like to<font color="#CCCCCC"> achieve a native concurrency</font>

208
00:09:27,890 --> 00:09:32,300
even if there is<font color="#CCCCCC"> just one partition and</font>

209
00:09:30,020 --> 00:09:35,329
the partitioning can be a simple<font color="#CCCCCC"> add-on</font>

210
00:09:32,300 --> 00:09:37,670
<font color="#E5E5E5">later on therefore our solution we</font>

211
00:09:35,330 --> 00:09:40,850
developed<font color="#E5E5E5"> a store it is a three base a</font>

212
00:09:37,670 --> 00:09:43,250
synchronous Oh blimey storage which of

213
00:09:40,850 --> 00:09:46,300
which is of course a will be secure and

214
00:09:43,250 --> 00:09:48,529
it ensures atomic atomic semantics

215
00:09:46,300 --> 00:09:50,420
additionally it is simple fully

216
00:09:48,529 --> 00:09:53,959
concurrent and it enables either

217
00:09:50,420 --> 00:09:57,339
partitioning to date we have two too

218
00:09:53,959 --> 00:09:59,989
many three base single clients<font color="#E5E5E5"> or M</font>

219
00:09:57,339 --> 00:10:02,540
constructions available but the main

220
00:09:59,990 --> 00:10:07,160
challenge here is how<font color="#E5E5E5"> to make three base</font>

221
00:10:02,540 --> 00:10:09,170
or amps concurrent let me briefly go

222
00:10:07,160 --> 00:10:11,510
over the<font color="#CCCCCC"> petroleum again and try to</font>

223
00:10:09,170 --> 00:10:12,949
explain it<font color="#E5E5E5"> how it works so this is</font><font color="#CCCCCC"> a</font>

224
00:10:11,510 --> 00:10:15,500
very<font color="#E5E5E5"> popular tree-based orem</font>

225
00:10:12,950 --> 00:10:17,300
construction it organizes storage as a

226
00:10:15,500 --> 00:10:19,730
binary<font color="#E5E5E5"> tree and the nodes of the tree</font>

227
00:10:17,300 --> 00:10:22,490
account contains constant number of

228
00:10:19,730 --> 00:10:25,339
blocks every access happens to a random

229
00:10:22,490 --> 00:10:27,560
path and the items are randomly assigned

230
00:10:25,339 --> 00:10:30,470
after error access this assignment

231
00:10:27,560 --> 00:10:34,130
information is stored or stored in the

232
00:10:30,470 --> 00:10:35,720
position map at the proxy it is<font color="#E5E5E5"> possible</font>

233
00:10:34,130 --> 00:10:38,480
to all source<font color="#E5E5E5"> this position map</font>

234
00:10:35,720 --> 00:10:42,440
recursively but however we are<font color="#CCCCCC"> not going</font>

235
00:10:38,480 --> 00:10:45,260
to consider this in our model when we

236
00:10:42,440 --> 00:10:48,320
want to<font color="#E5E5E5"> access a below using the three</font>

237
00:10:45,260 --> 00:10:51,350
<font color="#E5E5E5">beds or MC key so it happens in three</font>

238
00:10:48,320 --> 00:10:54,200
states when we would like<font color="#CCCCCC"> to access item</font>

239
00:10:51,350 --> 00:10:57,110
a here we first need to associate of you

240
00:10:54,200 --> 00:10:59,600
need to fetch<font color="#CCCCCC"> the associated pad then we</font>

241
00:10:57,110 --> 00:11:02,540
will do either read or modify operation

242
00:10:59,600 --> 00:11:05,089
so that will opt either update below a

243
00:11:02,540 --> 00:11:05,390
or not but then what we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> going to do</font>

244
00:11:05,089 --> 00:11:08,270
we

245
00:11:05,390 --> 00:11:10,760
we'll assign item a2 any random<font color="#CCCCCC"> path in</font>

246
00:11:08,270 --> 00:11:13,850
<font color="#E5E5E5">the position map the second stage is the</font>

247
00:11:10,760 --> 00:11:15,860
<font color="#E5E5E5">flash we try to push every block to</font><font color="#CCCCCC"> the</font>

248
00:11:13,850 --> 00:11:20,150
lowest now full note that intersects

249
00:11:15,860 --> 00:11:23,510
with is assigned pad in flash however we

250
00:11:20,150 --> 00:11:26,240
have<font color="#E5E5E5"> two cases the first one if the root</font>

251
00:11:23,510 --> 00:11:29,510
is not full here we need<font color="#E5E5E5"> to move out</font>

252
00:11:26,240 --> 00:11:33,500
west ash the second case<font color="#CCCCCC"> is that we can</font>

253
00:11:29,510 --> 00:11:36,410
place the a into a subtree now the third

254
00:11:33,500 --> 00:11:39,530
<font color="#CCCCCC">pace so after we are done with the</font>

255
00:11:36,410 --> 00:11:42,050
<font color="#E5E5E5">flashing actually so we r Ian crypt the</font>

256
00:11:39,530 --> 00:11:44,180
complete path with random with fresh

257
00:11:42,050 --> 00:11:48,260
randomness and we write<font color="#CCCCCC"> it back to the</font>

258
00:11:44,180 --> 00:11:50,359
storage see now we know how<font color="#CCCCCC"> the simple</font>

259
00:11:48,260 --> 00:11:52,640
how<font color="#E5E5E5"> the single client or</font><font color="#CCCCCC"> ebay's</font>

260
00:11:50,360 --> 00:11:54,950
<font color="#E5E5E5">construction works so the question here</font>

261
00:11:52,640 --> 00:11:57,230
we need<font color="#E5E5E5"> to answer how to handle k</font>

262
00:11:54,950 --> 00:12:00,200
concurrent requests we would like to

263
00:11:57,230 --> 00:12:02,840
<font color="#E5E5E5">achieve concurrency a simple approach</font>

264
00:12:00,200 --> 00:12:06,740
will be processing<font color="#CCCCCC"> k first processing k</font>

265
00:12:02,840 --> 00:12:09,380
operations we fetch k corresponding pads

266
00:12:06,740 --> 00:12:12,680
to the proxy and form a<font color="#CCCCCC"> subtree in the</font>

267
00:12:09,380 --> 00:12:17,000
memory the second stage we will reassign

268
00:12:12,680 --> 00:12:19,520
k items their new random paths then we

269
00:12:17,000 --> 00:12:23,420
will flush along the entire subtree and

270
00:12:19,520 --> 00:12:26,210
then we will write this a pad right the

271
00:12:23,420 --> 00:12:29,360
entire subtree back to the storage

272
00:12:26,210 --> 00:12:31,430
server<font color="#E5E5E5"> in beds by alternating between</font>

273
00:12:29,360 --> 00:12:34,400
these two stages we can have a nice

274
00:12:31,430 --> 00:12:36,739
solution however here there are two

275
00:12:34,400 --> 00:12:40,400
problems that these are very important

276
00:12:36,740 --> 00:12:43,820
the first how we are going to handle

277
00:12:40,400 --> 00:12:46,400
concurrent access is on same block the

278
00:12:43,820 --> 00:12:49,070
second question is even we have a nice

279
00:12:46,400 --> 00:12:51,560
alternating structure here and nice

280
00:12:49,070 --> 00:12:54,560
system flush and write back<font color="#E5E5E5"> operations</font>

281
00:12:51,560 --> 00:12:57,439
are still be lodging we would like<font color="#CCCCCC"> to</font>

282
00:12:54,560 --> 00:12:59,689
achieve full concurrency and let me hear

283
00:12:57,440 --> 00:13:02,450
first consider this our second problem

284
00:12:59,690 --> 00:13:05,870
first we want<font color="#E5E5E5"> to achieve non-blocking</font>

285
00:13:02,450 --> 00:13:08,000
right back even if there are<font color="#E5E5E5"> ongoing or</font>

286
00:13:05,870 --> 00:13:09,980
<font color="#E5E5E5">right back operations we would like to</font>

287
00:13:08,000 --> 00:13:12,640
continue<font color="#E5E5E5"> processing that is the</font>

288
00:13:09,980 --> 00:13:15,410
motivation however it is<font color="#E5E5E5"> not that easy</font>

289
00:13:12,640 --> 00:13:17,390
let me give you an escenario here we

290
00:13:15,410 --> 00:13:19,069
have a pro very subtly in the pro

291
00:13:17,390 --> 00:13:21,740
saying we would like to write it back on

292
00:13:19,070 --> 00:13:24,350
the server whenever we receive an

293
00:13:21,740 --> 00:13:26,690
acknowledgement what should<font color="#E5E5E5"> we do in a</font>

294
00:13:24,350 --> 00:13:28,820
sequential case actually we can just

295
00:13:26,690 --> 00:13:30,650
free up the memory but here we are

296
00:13:28,820 --> 00:13:33,310
<font color="#CCCCCC">talking about concurrent case there</font>

297
00:13:30,650 --> 00:13:36,230
might be so many other<font color="#E5E5E5"> things on going</font>

298
00:13:33,310 --> 00:13:39,619
so here the important question what

299
00:13:36,230 --> 00:13:42,200
should<font color="#CCCCCC"> we delete it is not an</font><font color="#E5E5E5"> easy</font>

300
00:13:39,620 --> 00:13:44,510
question to answer so let me<font color="#E5E5E5"> give you an</font>

301
00:13:42,200 --> 00:13:46,340
example for this case we are<font color="#E5E5E5"> at the time</font>

302
00:13:44,510 --> 00:13:48,560
that<font color="#E5E5E5"> we received an acknowledgement and</font>

303
00:13:46,340 --> 00:13:51,740
assume<font color="#CCCCCC"> that we are waiting for a pet</font>

304
00:13:48,560 --> 00:13:53,839
<font color="#E5E5E5">that is shown with the balloon line so</font>

305
00:13:51,740 --> 00:13:57,080
what<font color="#E5E5E5"> part of sorry that we need</font><font color="#CCCCCC"> to</font>

306
00:13:53,840 --> 00:13:59,320
delete consider a scenario because the

307
00:13:57,080 --> 00:14:02,840
answer is the answer to<font color="#E5E5E5"> this question</font>

308
00:13:59,320 --> 00:14:05,450
depends so it seemed to scenario that

309
00:14:02,840 --> 00:14:07,790
the right<font color="#E5E5E5"> back operation is processed at</font>

310
00:14:05,450 --> 00:14:11,120
the server before a request is received

311
00:14:07,790 --> 00:14:13,520
before it receives the required for the

312
00:14:11,120 --> 00:14:17,180
patrick patrick west on the<font color="#E5E5E5"> server and</font>

313
00:14:13,520 --> 00:14:20,060
then at this stage where the proxy will

314
00:14:17,180 --> 00:14:22,520
return<font color="#CCCCCC"> we'll get the tail potential or</font>

315
00:14:20,060 --> 00:14:25,010
we'll get the up-to-date faq up-to-date

316
00:14:22,520 --> 00:14:28,970
and fresh pet there is no problem here

317
00:14:25,010 --> 00:14:31,040
on the<font color="#E5E5E5"> other</font><font color="#CCCCCC"> hand in the second</font><font color="#E5E5E5"> case</font>

318
00:14:28,970 --> 00:14:34,550
actually the right back might might be

319
00:14:31,040 --> 00:14:36,620
processed later on so in this case we

320
00:14:34,550 --> 00:14:39,109
<font color="#CCCCCC">are going to fetch the stale pad to the</font>

321
00:14:36,620 --> 00:14:40,820
prophecy that there is no way for proxy

322
00:14:39,110 --> 00:14:43,940
to understand which of these<font color="#E5E5E5"> cases</font>

323
00:14:40,820 --> 00:14:46,220
happened on the server so it will assume

324
00:14:43,940 --> 00:14:48,530
<font color="#CCCCCC">the worst case scenarios and it needs to</font>

325
00:14:46,220 --> 00:14:51,350
store the most up-to-date most

326
00:14:48,530 --> 00:14:53,449
up-to-date part of the sub tree and it

327
00:14:51,350 --> 00:14:56,030
will keep this intersection of the pad

328
00:14:53,450 --> 00:14:58,970
on the proxy and delete the other part

329
00:14:56,030 --> 00:15:03,500
of the<font color="#E5E5E5"> subtree there are</font><font color="#CCCCCC"> even more</font><font color="#E5E5E5"> cases</font>

330
00:14:58,970 --> 00:15:06,170
for for for the decision but here i will

331
00:15:03,500 --> 00:15:08,150
<font color="#E5E5E5">skip of these the main motivation is</font>

332
00:15:06,170 --> 00:15:09,920
that tall store achieves full

333
00:15:08,150 --> 00:15:12,860
concurrence by maintaining<font color="#CCCCCC"> stretch</font>

334
00:15:09,920 --> 00:15:16,959
subtly invariant the items<font color="#E5E5E5"> in the local</font>

335
00:15:12,860 --> 00:15:20,000
subtree and stash are always up-to-date

336
00:15:16,960 --> 00:15:22,010
encrease YH so please see the

337
00:15:20,000 --> 00:15:24,320
correctness proof in the paper actually

338
00:15:22,010 --> 00:15:26,150
so but we achievable concurrency by

339
00:15:24,320 --> 00:15:28,670
maintaining some flash supreme warrior

340
00:15:26,150 --> 00:15:30,649
and let me go back<font color="#CCCCCC"> to do a my</font><font color="#E5E5E5"> first</font>

341
00:15:28,670 --> 00:15:32,389
problem concurrent access

342
00:15:30,649 --> 00:15:34,999
on<font color="#E5E5E5"> the same item how we are going to</font>

343
00:15:32,389 --> 00:15:38,059
fetch it so we will use<font color="#CCCCCC"> the</font><font color="#E5E5E5"> fake access</font>

344
00:15:34,999 --> 00:15:40,279
approach as in curious and now<font color="#E5E5E5"> I can see</font>

345
00:15:38,059 --> 00:15:42,949
<font color="#E5E5E5">that what</font><font color="#CCCCCC"> you are</font><font color="#E5E5E5"> asking wasn't there a</font>

346
00:15:40,279 --> 00:15:44,779
problem it wasn't their security problem

347
00:15:42,949 --> 00:15:47,269
with that approach that is why we

348
00:15:44,779 --> 00:15:50,540
<font color="#E5E5E5">introduced sequencer whose whole</font>

349
00:15:47,269 --> 00:15:52,160
function is ensuring logical request to

350
00:15:50,540 --> 00:15:55,099
be<font color="#E5E5E5"> replied in the same order as they</font>

351
00:15:52,160 --> 00:15:56,868
arrive consider the attacking scenario

352
00:15:55,100 --> 00:15:59,089
that we have the problem was that we

353
00:15:56,869 --> 00:16:02,110
return a response for the second request

354
00:15:59,089 --> 00:16:05,509
earlier than the first first request

355
00:16:02,110 --> 00:16:08,540
here actually<font color="#CCCCCC"> the sequencer placed</font>

356
00:16:05,509 --> 00:16:11,869
<font color="#CCCCCC">return and all the requests</font><font color="#E5E5E5"> are replied</font>

357
00:16:08,540 --> 00:16:13,879
in the<font color="#E5E5E5"> same order as</font><font color="#CCCCCC"> there I it's not</font>

358
00:16:11,869 --> 00:16:16,369
that is<font color="#E5E5E5"> a generic solution and it can</font>

359
00:16:13,879 --> 00:16:18,889
also fix the curious in order to

360
00:16:16,369 --> 00:16:22,129
evaluate the performance of<font color="#E5E5E5"> tau store we</font>

361
00:16:18,889 --> 00:16:24,259
perform cloud-based experiments we use a

362
00:16:22,129 --> 00:16:28,610
1 gigabyte of data set and we have a

363
00:16:24,259 --> 00:16:32,540
proxy at UCSB and we use the server from

364
00:16:28,610 --> 00:16:34,970
the AWS north<font color="#E5E5E5"> California</font><font color="#CCCCCC"> datacenter here</font>

365
00:16:32,540 --> 00:16:37,248
when the return concurrent requests the

366
00:16:34,970 --> 00:16:40,129
toaster achieves the performance of 40

367
00:16:37,249 --> 00:16:42,589
operations per second when<font color="#CCCCCC"> the number of</font>

368
00:16:40,129 --> 00:16:45,050
concurrency increase actually we don't

369
00:16:42,589 --> 00:16:46,490
gain too much in the<font color="#E5E5E5"> true put</font><font color="#CCCCCC"> because</font>

370
00:16:45,050 --> 00:16:49,639
there is a solid the throughput

371
00:16:46,490 --> 00:16:53,089
saturates due to the full bandwidth full

372
00:16:49,639 --> 00:16:55,100
bandwidth utilization this shows us that

373
00:16:53,089 --> 00:16:58,399
bandwidth really<font color="#E5E5E5"> betters in real-world</font>

374
00:16:55,100 --> 00:17:00,649
scenario another set of experiments be

375
00:16:58,399 --> 00:17:02,749
conducted is that so in order to see

376
00:17:00,649 --> 00:17:05,779
what is the effect of memory tool

377
00:17:02,749 --> 00:17:08,689
ization to those performance here

378
00:17:05,779 --> 00:17:12,799
<font color="#CCCCCC">k-means the right back threshold after</font>

379
00:17:08,689 --> 00:17:14,240
so that after how after k pad fetches we

380
00:17:12,799 --> 00:17:17,658
are going to write back the entire

381
00:17:14,240 --> 00:17:20,449
subtree to the storage server at this

382
00:17:17,659 --> 00:17:22,899
<font color="#E5E5E5">point we</font><font color="#CCCCCC"> have a five purse at vended the</font>

383
00:17:20,449 --> 00:17:25,880
number when the right back threshold is

384
00:17:22,898 --> 00:17:30,080
240 we have a five percent memory tool

385
00:17:25,880 --> 00:17:33,559
ization basically each of which<font color="#E5E5E5"> is the</font>

386
00:17:30,080 --> 00:17:35,389
store which of the five percent storage

387
00:17:33,559 --> 00:17:38,120
utilization this is compared to<font color="#E5E5E5"> the</font>

388
00:17:35,390 --> 00:17:41,330
overall data set size when we have the

389
00:17:38,120 --> 00:17:43,969
right back threshold is 40 and then at

390
00:17:41,330 --> 00:17:45,830
this point<font color="#E5E5E5"> we achieve a throughput of 39</font>

391
00:17:43,970 --> 00:17:47,900
and this was also the case when the

392
00:17:45,830 --> 00:17:51,889
right back threshold was<font color="#E5E5E5"> to under them</font>

393
00:17:47,900 --> 00:17:54,679
for<font color="#E5E5E5"> 40 evenly the smaller memory</font>

394
00:17:51,890 --> 00:17:58,760
utilization a weekend tall store can

395
00:17:54,679 --> 00:18:00,470
achieve similar performance we in the

396
00:17:58,760 --> 00:18:02,330
first case we have five percent in the

397
00:18:00,470 --> 00:18:04,280
<font color="#E5E5E5">second case we have two percent memory</font>

398
00:18:02,330 --> 00:18:07,460
utilization but the<font color="#E5E5E5"> achieve throughput</font>

399
00:18:04,280 --> 00:18:09,620
is the same this brings me to<font color="#E5E5E5"> the end of</font>

400
00:18:07,460 --> 00:18:11,510
<font color="#E5E5E5">my talk thank you so much for your</font>

401
00:18:09,620 --> 00:18:24,289
listening and now<font color="#E5E5E5"> I am ready</font><font color="#CCCCCC"> to take</font>

402
00:18:11,510 --> 00:18:26,960
your questions we have time for

403
00:18:24,289 --> 00:18:30,408
<font color="#CCCCCC">questions if there</font><font color="#E5E5E5"> are no questions I</font>

404
00:18:26,960 --> 00:18:32,210
have a question for<font color="#CCCCCC"> you so as univ</font>

405
00:18:30,409 --> 00:18:33,830
asking you do support multiple clients

406
00:18:32,210 --> 00:18:35,870
it's my understanding though that they

407
00:18:33,830 --> 00:18:38,990
have to trust each<font color="#E5E5E5"> other's that right</font>

408
00:18:35,870 --> 00:18:41,239
the clients are trusted so these are<font color="#CCCCCC"> the</font>

409
00:18:38,990 --> 00:18:43,130
employees of an company<font color="#E5E5E5"> you can assume</font>

410
00:18:41,240 --> 00:18:44,659
in this way but what<font color="#CCCCCC"> if they were what</font>

411
00:18:43,130 --> 00:18:46,190
if<font color="#E5E5E5"> they were mutually distressing what</font>

412
00:18:44,659 --> 00:18:48,650
if they didn't want each other to see

413
00:18:46,190 --> 00:18:50,510
their access patterns or the contents of

414
00:18:48,650 --> 00:18:52,940
keys actually the collapse will not see

415
00:18:50,510 --> 00:18:55,129
that each other's access patterns in

416
00:18:52,940 --> 00:18:58,039
this manner<font color="#E5E5E5"> okay so they're they're also</font>

417
00:18:55,130 --> 00:19:00,679
see other is that proven that the

418
00:18:58,039 --> 00:19:02,120
clients will see the access patterns it

419
00:19:00,679 --> 00:19:03,710
won't be able to deduce anything about

420
00:19:02,120 --> 00:19:05,418
each other's access patterns no they

421
00:19:03,710 --> 00:19:07,850
will not see so each you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> assume that</font>

422
00:19:05,419 --> 00:19:10,250
one of the clients can be an adversary

423
00:19:07,850 --> 00:19:13,399
so the motivation<font color="#CCCCCC"> is to hide the access</font>

424
00:19:10,250 --> 00:19:15,679
patterns so not none of<font color="#CCCCCC"> the clients will</font>

425
00:19:13,400 --> 00:19:17,330
see the other<font color="#E5E5E5"> clients access patterns</font>

426
00:19:15,679 --> 00:19:22,909
they will not be able<font color="#E5E5E5"> to understand this</font>

427
00:19:17,330 --> 00:19:25,549
I think<font color="#CCCCCC"> okay that's good</font><font color="#E5E5E5"> also so you</font>

428
00:19:22,909 --> 00:19:29,030
were assuming the attacker is is local

429
00:19:25,549 --> 00:19:30,408
it is what the sorry the attacker has

430
00:19:29,030 --> 00:19:32,299
access to the local network<font color="#E5E5E5"> these</font>

431
00:19:30,409 --> 00:19:34,280
clients all work for the for the same

432
00:19:32,299 --> 00:19:36,820
company and but the attacker has access

433
00:19:34,280 --> 00:19:39,770
to the internal networks would there be

434
00:19:36,820 --> 00:19:42,260
wood there'll be other channels that the

435
00:19:39,770 --> 00:19:45,850
in adversary that<font color="#E5E5E5"> much power aren't they</font>

436
00:19:42,260 --> 00:19:49,220
<font color="#E5E5E5">probably at this point it is hard to</font>

437
00:19:45,850 --> 00:19:51,678
understand what an attacker has what are

438
00:19:49,220 --> 00:19:54,590
the capabilities but the clients each

439
00:19:51,679 --> 00:19:56,330
client's talk to a proxy to rain<font color="#E5E5E5"> Network</font>

440
00:19:54,590 --> 00:19:58,010
actually we assume the worst case

441
00:19:56,330 --> 00:20:00,159
scenario it has an

442
00:19:58,010 --> 00:20:02,960
Seth over the asynchronous links also

443
00:20:00,160 --> 00:20:04,880
that is the<font color="#E5E5E5"> when an attacker that</font>

444
00:20:02,960 --> 00:20:08,750
powerful have other side channels that

445
00:20:04,880 --> 00:20:11,750
they could exploit so the communications

446
00:20:08,750 --> 00:20:15,200
are encrypted here so they might<font color="#CCCCCC"> be an</font>

447
00:20:11,750 --> 00:20:18,440
attacker has other capabilities but<font color="#E5E5E5"> even</font>

448
00:20:15,200 --> 00:20:20,750
it sees this as it sees the messages it

449
00:20:18,440 --> 00:20:22,760
will not understand<font color="#CCCCCC"> actually it will not</font>

450
00:20:20,750 --> 00:20:26,090
get any information so there will be<font color="#CCCCCC"> a</font>

451
00:20:22,760 --> 00:20:29,379
zero leakage okay<font color="#E5E5E5"> okay let's make sure</font>

452
00:20:26,090 --> 00:20:29,379
<font color="#E5E5E5">and thank you so much</font>

