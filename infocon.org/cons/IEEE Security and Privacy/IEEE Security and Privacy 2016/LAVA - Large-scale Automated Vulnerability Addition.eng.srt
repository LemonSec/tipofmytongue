1
00:00:00,000 --> 00:00:03,120
<font color="#E5E5E5">all right so yeah we're the idiots who</font>

2
00:00:01,469 --> 00:00:06,150
<font color="#CCCCCC">are trying</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually add bugs to</font>

3
00:00:03,120 --> 00:00:07,560
programs<font color="#CCCCCC"> just</font><font color="#E5E5E5"> to be completely</font><font color="#CCCCCC"> clear</font><font color="#E5E5E5"> we</font>

4
00:00:06,150 --> 00:00:09,450
don't<font color="#CCCCCC"> know how</font><font color="#E5E5E5"> to find bugs we don't how</font>

5
00:00:07,560 --> 00:00:12,329
to mitigate bugs but we do now know how

6
00:00:09,450 --> 00:00:15,088
to add bugs<font color="#CCCCCC"> this is joint work with</font>

7
00:00:12,330 --> 00:00:16,859
<font color="#E5E5E5">people from NYU poly as well as</font>

8
00:00:15,089 --> 00:00:21,660
<font color="#CCCCCC">Northeastern</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> all the people on the</font>

9
00:00:16,859 --> 00:00:23,760
<font color="#E5E5E5">screen deserve a lot of credit okay so</font>

10
00:00:21,660 --> 00:00:24,930
to situate this the problem here is<font color="#CCCCCC"> that</font>

11
00:00:23,760 --> 00:00:28,890
we're<font color="#E5E5E5"> really interested in is actually</font>

12
00:00:24,930 --> 00:00:31,289
vulnerability discovery<font color="#CCCCCC"> I'm sure all of</font>

13
00:00:28,890 --> 00:00:33,030
you read the newspapers<font color="#CCCCCC"> there</font><font color="#E5E5E5"> are bugs</font>

14
00:00:31,289 --> 00:00:35,130
all over<font color="#CCCCCC"> the place</font><font color="#E5E5E5"> we're always getting</font>

15
00:00:33,030 --> 00:00:36,840
<font color="#E5E5E5">you know reports of another thing that's</font>

16
00:00:35,130 --> 00:00:39,140
vulnerable there's a new shell shock or

17
00:00:36,840 --> 00:00:42,149
heartbleed every sort of minute it seems

18
00:00:39,140 --> 00:00:43,860
and it's<font color="#E5E5E5"> not the case</font><font color="#CCCCCC"> that academia has</font>

19
00:00:42,149 --> 00:00:47,789
been asleep<font color="#E5E5E5"> at the wheel they've been</font>

20
00:00:43,860 --> 00:00:49,590
monitoring<font color="#E5E5E5"> this problem</font><font color="#CCCCCC"> they probably</font>

21
00:00:47,789 --> 00:00:50,940
started<font color="#E5E5E5"> working on this around about the</font>

22
00:00:49,590 --> 00:00:54,000
same<font color="#E5E5E5"> time as this conference started</font>

23
00:00:50,940 --> 00:00:55,739
back in<font color="#E5E5E5"> 1980</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a paper from 1990</font>

24
00:00:54,000 --> 00:00:58,649
actually by Bart Miller of Michigan

25
00:00:55,739 --> 00:01:01,070
where<font color="#E5E5E5"> he was fuzzing UNIX programs try</font>

26
00:00:58,649 --> 00:01:03,570
to find<font color="#E5E5E5"> bugs in them there has also been</font>

27
00:01:01,070 --> 00:01:06,290
grammar based fuzzing<font color="#CCCCCC"> university of oulu</font>

28
00:01:03,570 --> 00:01:10,110
<font color="#CCCCCC">in 1995 oops</font>

29
00:01:06,290 --> 00:01:11,220
in 2005<font color="#CCCCCC"> Klee symbolic execution</font><font color="#E5E5E5"> and sat</font>

30
00:01:10,110 --> 00:01:13,920
solving and<font color="#CCCCCC"> there a bunch of other</font>

31
00:01:11,220 --> 00:01:15,869
<font color="#E5E5E5">papers is not an exhaustive list and</font>

32
00:01:13,920 --> 00:01:17,549
then<font color="#E5E5E5"> recently some combinations of</font>

33
00:01:15,869 --> 00:01:21,330
fuzzing and<font color="#E5E5E5"> symbolic execution have</font>

34
00:01:17,549 --> 00:01:22,740
started to surface<font color="#CCCCCC"> furthermore industry</font>

35
00:01:21,330 --> 00:01:25,860
is making<font color="#CCCCCC"> pay</font><font color="#E5E5E5"> attention to this sort of</font>

36
00:01:22,740 --> 00:01:27,658
<font color="#CCCCCC">thing there bunch</font><font color="#E5E5E5"> of companies have sort</font>

37
00:01:25,860 --> 00:01:29,250
<font color="#E5E5E5">of come out of</font><font color="#CCCCCC"> the woodwork and started</font>

38
00:01:27,659 --> 00:01:30,420
to<font color="#CCCCCC"> offer you things</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> IDs</font><font color="#E5E5E5"> that will</font>

39
00:01:29,250 --> 00:01:33,060
check your code and see if there are

40
00:01:30,420 --> 00:01:34,860
<font color="#E5E5E5">bugs in it sort of bug checking as a</font>

41
00:01:33,060 --> 00:01:35,880
service<font color="#E5E5E5"> you can submit your code</font><font color="#CCCCCC"> to them</font>

42
00:01:34,860 --> 00:01:38,729
and they'll tell<font color="#E5E5E5"> you where all the bugs</font>

43
00:01:35,880 --> 00:01:40,560
are but from our perspective and I hope

44
00:01:38,729 --> 00:01:41,939
a lot<font color="#CCCCCC"> of yours</font><font color="#E5E5E5"> there's a big</font><font color="#CCCCCC"> question</font>

45
00:01:40,560 --> 00:01:45,119
hanging<font color="#CCCCCC"> in the air</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is does any of</font>

46
00:01:41,939 --> 00:01:47,669
this actually<font color="#E5E5E5"> work no offense</font><font color="#CCCCCC"> I don't</font>

47
00:01:45,119 --> 00:01:49,729
<font color="#CCCCCC">think we know</font><font color="#E5E5E5"> and and the</font><font color="#CCCCCC"> reason</font><font color="#E5E5E5"> is</font>

48
00:01:47,670 --> 00:01:51,899
because<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> difficult to measure</font>

49
00:01:49,729 --> 00:01:53,579
fundamental measures it figures of<font color="#CCCCCC"> Merit</font>

50
00:01:51,899 --> 00:01:57,869
like<font color="#E5E5E5"> myths and false alarm rate for</font>

51
00:01:53,579 --> 00:02:00,179
vulnerability discovery tools so what

52
00:01:57,869 --> 00:02:01,560
kind of corpora<font color="#E5E5E5"> are out there this</font><font color="#CCCCCC"> is</font>

53
00:02:00,180 --> 00:02:02,880
the sort of thing<font color="#CCCCCC"> that we try to</font><font color="#E5E5E5"> find</font>

54
00:02:01,560 --> 00:02:04,799
when we're<font color="#CCCCCC"> looking into this</font><font color="#E5E5E5"> sort of</font>

55
00:02:02,880 --> 00:02:06,539
<font color="#E5E5E5">thing you know corpora that contains</font>

56
00:02:04,799 --> 00:02:08,700
ground truth<font color="#CCCCCC"> there's a bug in this</font>

57
00:02:06,540 --> 00:02:10,860
program this particular<font color="#E5E5E5"> you know line in</font>

58
00:02:08,699 --> 00:02:12,709
the code exposes the bug this input

59
00:02:10,860 --> 00:02:15,350
creates that bug or

60
00:02:12,710 --> 00:02:16,670
<font color="#CCCCCC">Manifest</font><font color="#E5E5E5"> that bug</font><font color="#CCCCCC"> there are resources</font>

61
00:02:15,350 --> 00:02:19,489
<font color="#E5E5E5">like the national vulnerability</font><font color="#CCCCCC"> database</font>

62
00:02:16,670 --> 00:02:22,070
and<font color="#CCCCCC"> CVE</font><font color="#E5E5E5"> these things are both from I</font>

63
00:02:19,490 --> 00:02:23,390
<font color="#E5E5E5">think mitre</font><font color="#CCCCCC"> and they're great resources</font>

64
00:02:22,070 --> 00:02:25,010
but they don't have the kind of you ever

65
00:02:23,390 --> 00:02:26,000
tried to use<font color="#CCCCCC"> them to actually</font><font color="#E5E5E5"> you know</font>

66
00:02:25,010 --> 00:02:27,290
<font color="#E5E5E5">test whether your vulnerability</font>

67
00:02:26,000 --> 00:02:29,090
discovery tool works and I have the<font color="#E5E5E5"> kind</font>

68
00:02:27,290 --> 00:02:30,350
of<font color="#E5E5E5"> resources that</font><font color="#CCCCCC"> you want</font><font color="#E5E5E5"> NIST has</font>

69
00:02:29,090 --> 00:02:33,980
something called Sam<font color="#CCCCCC"> eight which is</font><font color="#E5E5E5"> also</font>

70
00:02:30,350 --> 00:02:35,210
good<font color="#CCCCCC"> exploit DB and Metasploit</font><font color="#E5E5E5"> have a</font>

71
00:02:33,980 --> 00:02:37,519
<font color="#E5E5E5">little bit more details tend to be on</font>

72
00:02:35,210 --> 00:02:39,080
<font color="#CCCCCC">closed-source</font><font color="#E5E5E5"> we've created a couple</font><font color="#CCCCCC"> of</font>

73
00:02:37,520 --> 00:02:42,200
corpora which which have been good and

74
00:02:39,080 --> 00:02:44,450
beside it<font color="#E5E5E5"> many many times</font><font color="#CCCCCC"> part of the</font>

75
00:02:42,200 --> 00:02:46,220
confounding problem here is that<font color="#E5E5E5"> bugs</font>

76
00:02:44,450 --> 00:02:48,320
are worth tons and tons of<font color="#E5E5E5"> money you</font>

77
00:02:46,220 --> 00:02:50,150
know five six figures is not uncommon

78
00:02:48,320 --> 00:02:53,239
<font color="#E5E5E5">and so people aren't sharing</font><font color="#CCCCCC"> these</font>

79
00:02:50,150 --> 00:02:55,220
<font color="#CCCCCC">things so a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> more about the</font>

80
00:02:53,240 --> 00:02:57,830
sources<font color="#E5E5E5"> there's we think of them as</font>

81
00:02:55,220 --> 00:02:59,510
<font color="#CCCCCC">being sort of five four ways to find to</font>

82
00:02:57,830 --> 00:03:01,490
collect vulnerability corpora you can

83
00:02:59,510 --> 00:03:03,440
wait<font color="#CCCCCC"> until your program crashes</font><font color="#E5E5E5"> and</font>

84
00:03:01,490 --> 00:03:05,630
those are really realistic<font color="#E5E5E5"> but it's a</font>

85
00:03:03,440 --> 00:03:08,630
tiny corpus<font color="#CCCCCC"> you can search for</font><font color="#E5E5E5"> things</font>

86
00:03:05,630 --> 00:03:10,310
<font color="#E5E5E5">using math or fuzzers or staring in</font><font color="#CCCCCC"> Ida</font>

87
00:03:08,630 --> 00:03:11,930
<font color="#CCCCCC">Pro or</font><font color="#E5E5E5"> something like that</font><font color="#CCCCCC"> and they're</font>

88
00:03:10,310 --> 00:03:14,300
pretty high-quality<font color="#CCCCCC"> but it's again low</font>

89
00:03:11,930 --> 00:03:16,670
yield<font color="#E5E5E5"> you can create bugs by injecting</font>

90
00:03:14,300 --> 00:03:18,800
them into<font color="#E5E5E5"> programs</font><font color="#CCCCCC"> and those</font><font color="#E5E5E5"> are pretty</font>

91
00:03:16,670 --> 00:03:21,140
<font color="#E5E5E5">realistic</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> they're they're low to</font>

92
00:03:18,800 --> 00:03:23,210
medium yield<font color="#CCCCCC"> and you can synthesize</font>

93
00:03:21,140 --> 00:03:24,380
things<font color="#E5E5E5"> you know writing like a Python</font>

94
00:03:23,210 --> 00:03:26,590
<font color="#CCCCCC">script or something like that</font><font color="#E5E5E5"> that</font>

95
00:03:24,380 --> 00:03:28,820
creates lots of buggy programs for you

96
00:03:26,590 --> 00:03:31,610
we're trying<font color="#E5E5E5"> to hit this sweet spot and</font>

97
00:03:28,820 --> 00:03:34,250
in lava<font color="#CCCCCC"> we try to inject bugs into</font><font color="#E5E5E5"> real</font>

98
00:03:31,610 --> 00:03:35,840
programs to get good realism<font color="#E5E5E5"> but we're</font>

99
00:03:34,250 --> 00:03:37,300
kind of synthesizing things we have low

100
00:03:35,840 --> 00:03:40,130
cost and<font color="#CCCCCC"> high yield</font>

101
00:03:37,300 --> 00:03:42,860
<font color="#E5E5E5">okay what's the concept here we want</font>

102
00:03:40,130 --> 00:03:44,240
lava bugs to<font color="#E5E5E5"> be cheap and plentiful</font><font color="#CCCCCC"> we</font>

103
00:03:42,860 --> 00:03:46,580
need them<font color="#CCCCCC"> to be realistic as realistic</font>

104
00:03:44,240 --> 00:03:48,530
<font color="#E5E5E5">as possible</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> want there to be a</font>

105
00:03:46,580 --> 00:03:50,810
triggering input we wanted to manifest

106
00:03:48,530 --> 00:03:52,970
<font color="#E5E5E5">themselves for only one input or a few</font>

107
00:03:50,810 --> 00:03:54,950
inputs<font color="#CCCCCC"> not</font><font color="#E5E5E5"> a bug isn't very interesting</font>

108
00:03:52,970 --> 00:03:56,870
if for every<font color="#CCCCCC"> single input it triggers</font>

109
00:03:54,950 --> 00:03:58,540
itself and they want we want there to be

110
00:03:56,870 --> 00:04:00,740
some<font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> security</font><font color="#CCCCCC"> critical effect</font>

111
00:03:58,540 --> 00:04:03,049
<font color="#E5E5E5">some caveats which we don't</font><font color="#CCCCCC"> think are</font>

112
00:04:00,740 --> 00:04:05,270
<font color="#CCCCCC">actually important we work</font><font color="#E5E5E5"> only from</font>

113
00:04:03,050 --> 00:04:06,590
source code<font color="#E5E5E5"> C programs Linux and for the</font>

114
00:04:05,270 --> 00:04:09,560
<font color="#E5E5E5">moment we're actually just focusing on</font>

115
00:04:06,590 --> 00:04:11,750
buffer overflows so this is<font color="#E5E5E5"> large-scale</font>

116
00:04:09,560 --> 00:04:13,340
automated vulnerability<font color="#E5E5E5"> addition we use</font>

117
00:04:11,750 --> 00:04:15,110
<font color="#CCCCCC">a combination of static but</font><font color="#E5E5E5"> mostly</font>

118
00:04:13,340 --> 00:04:16,760
dynamic analysis to find attacker

119
00:04:15,110 --> 00:04:18,410
<font color="#E5E5E5">controlled data that can be</font><font color="#CCCCCC"> used to</font>

120
00:04:16,760 --> 00:04:20,480
<font color="#E5E5E5">introduce new code</font><font color="#CCCCCC"> that creates a bug</font>

121
00:04:18,410 --> 00:04:22,490
<font color="#E5E5E5">what we do is actually change the</font>

122
00:04:20,480 --> 00:04:24,440
program source code and the input at the

123
00:04:22,490 --> 00:04:26,060
same time to make<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that the bug</font>

124
00:04:24,440 --> 00:04:28,730
really manifests itself

125
00:04:26,060 --> 00:04:31,060
the special sauce is here<font color="#E5E5E5"> some new tank</font>

126
00:04:28,730 --> 00:04:34,970
based measures<font color="#E5E5E5"> that make this possible</font>

127
00:04:31,060 --> 00:04:36,650
<font color="#E5E5E5">so we make use of this</font><font color="#CCCCCC"> panda dynamic</font>

128
00:04:34,970 --> 00:04:38,090
<font color="#CCCCCC">team</font><font color="#E5E5E5"> panda whole system emulator which</font>

129
00:04:36,650 --> 00:04:39,409
we actually<font color="#E5E5E5"> wrote there's a URL down</font>

130
00:04:38,090 --> 00:04:41,719
there it's on the<font color="#E5E5E5"> internet you</font><font color="#CCCCCC"> can get</font>

131
00:04:39,410 --> 00:04:43,940
<font color="#E5E5E5">it from github</font><font color="#CCCCCC"> it's a whole system</font>

132
00:04:41,720 --> 00:04:46,760
<font color="#E5E5E5">dynamic analysis so all processes and</font>

133
00:04:43,940 --> 00:04:48,740
the kernel are implicated or analyzed<font color="#CCCCCC"> it</font>

134
00:04:46,760 --> 00:04:50,840
works on binaries<font color="#CCCCCC"> so you don't need to</font>

135
00:04:48,740 --> 00:04:52,700
compile<font color="#CCCCCC"> your source code</font><font color="#E5E5E5"> all library</font>

136
00:04:50,840 --> 00:04:54,560
code<font color="#E5E5E5"> is automatically</font><font color="#CCCCCC"> included</font><font color="#E5E5E5"> weird</font>

137
00:04:52,700 --> 00:04:56,930
instructions are handled properly<font color="#CCCCCC"> we</font>

138
00:04:54,560 --> 00:04:59,210
think but<font color="#E5E5E5"> most critically for analysis</font>

139
00:04:56,930 --> 00:05:01,400
purposes<font color="#E5E5E5"> many labels are supported so</font>

140
00:04:59,210 --> 00:05:04,010
<font color="#E5E5E5">every byte in like a</font><font color="#CCCCCC"> 1 megabyte or 10</font>

141
00:05:01,400 --> 00:05:06,349
megabyte file gets a different<font color="#CCCCCC"> label</font><font color="#E5E5E5"> we</font>

142
00:05:04,010 --> 00:05:08,539
also combine labels<font color="#CCCCCC"> into</font><font color="#E5E5E5"> sets to</font>

143
00:05:06,350 --> 00:05:10,160
<font color="#E5E5E5">represent computation we think it's fast</font>

144
00:05:08,540 --> 00:05:11,330
enough<font color="#E5E5E5"> for our purposes which again</font><font color="#CCCCCC"> our</font>

145
00:05:10,160 --> 00:05:14,360
analytical we're not trying<font color="#CCCCCC"> to do</font>

146
00:05:11,330 --> 00:05:15,469
defense here so what are these taint

147
00:05:14,360 --> 00:05:17,240
based measures I've been talking about

148
00:05:15,470 --> 00:05:19,400
<font color="#E5E5E5">this is kind of the heart of lava and</font>

149
00:05:17,240 --> 00:05:22,580
<font color="#CCCCCC">how it does its work</font><font color="#E5E5E5"> one is called</font>

150
00:05:19,400 --> 00:05:25,039
lively liveness<font color="#E5E5E5"> and that is I admit</font>

151
00:05:22,580 --> 00:05:26,330
stealing that term from<font color="#E5E5E5"> other things the</font>

152
00:05:25,040 --> 00:05:28,190
<font color="#CCCCCC">basic idea there is actually</font><font color="#E5E5E5"> quite</font>

153
00:05:26,330 --> 00:05:30,109
simple<font color="#E5E5E5"> is to count the</font><font color="#CCCCCC"> number of</font>

154
00:05:28,190 --> 00:05:32,300
branches<font color="#CCCCCC"> a particular</font><font color="#E5E5E5"> input byte is used</font>

155
00:05:30,110 --> 00:05:34,190
to decide and<font color="#E5E5E5"> this lets us know how much</font>

156
00:05:32,300 --> 00:05:36,530
<font color="#CCCCCC">affect upon</font><font color="#E5E5E5"> the control flow that</font>

157
00:05:34,190 --> 00:05:37,460
particular byte has<font color="#E5E5E5"> and this is critical</font>

158
00:05:36,530 --> 00:05:39,650
because<font color="#E5E5E5"> later we're going to want to</font>

159
00:05:37,460 --> 00:05:41,120
modify<font color="#E5E5E5"> that particular byte in order to</font>

160
00:05:39,650 --> 00:05:42,650
trigger a bug somewhere so we don't want

161
00:05:41,120 --> 00:05:44,500
<font color="#E5E5E5">it to send the</font><font color="#CCCCCC"> program off on a</font>

162
00:05:42,650 --> 00:05:46,609
completely<font color="#E5E5E5"> different control flow branch</font>

163
00:05:44,500 --> 00:05:48,289
the other<font color="#E5E5E5"> critical measure that we came</font>

164
00:05:46,610 --> 00:05:51,260
<font color="#E5E5E5">up</font><font color="#CCCCCC"> with is called taint compute number</font>

165
00:05:48,289 --> 00:05:52,789
and this<font color="#E5E5E5"> is really the depth of the tree</font>

166
00:05:51,260 --> 00:05:54,919
<font color="#CCCCCC">of computation used to compute a</font>

167
00:05:52,789 --> 00:05:57,289
<font color="#E5E5E5">particular</font><font color="#CCCCCC"> El</font><font color="#E5E5E5"> Val at a particular point</font>

168
00:05:54,919 --> 00:05:58,880
in<font color="#CCCCCC"> the execution</font><font color="#E5E5E5"> trace so it's basically</font>

169
00:05:57,289 --> 00:06:01,700
how complicated a function of input

170
00:05:58,880 --> 00:06:04,669
<font color="#E5E5E5">bytes is a particular value at a point</font>

171
00:06:01,700 --> 00:06:06,620
in the trace<font color="#E5E5E5"> so together these two</font>

172
00:06:04,669 --> 00:06:08,659
things give us<font color="#E5E5E5"> what we call dead</font>

173
00:06:06,620 --> 00:06:10,190
<font color="#E5E5E5">uncomplicated and available data it's</font>

174
00:06:08,660 --> 00:06:12,770
available at<font color="#E5E5E5"> this particular point or</font>

175
00:06:10,190 --> 00:06:14,270
<font color="#E5E5E5">duas</font><font color="#CCCCCC"> this is really the attacker</font>

176
00:06:12,770 --> 00:06:16,340
controlled data that can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> used to</font>

177
00:06:14,270 --> 00:06:18,169
create<font color="#E5E5E5"> a</font><font color="#CCCCCC"> vulnerability now</font><font color="#E5E5E5"> this is</font>

178
00:06:16,340 --> 00:06:19,638
<font color="#CCCCCC">actually kind of a page out of</font><font color="#E5E5E5"> the you</font>

179
00:06:18,169 --> 00:06:21,469
<font color="#E5E5E5">know systems exploitation finding</font>

180
00:06:19,639 --> 00:06:23,240
vulnerabilities book<font color="#E5E5E5"> this is the sort of</font>

181
00:06:21,470 --> 00:06:25,940
thing that<font color="#E5E5E5"> people do</font><font color="#CCCCCC"> all the time with</font>

182
00:06:23,240 --> 00:06:29,120
programs they try to find where they as

183
00:06:25,940 --> 00:06:30,740
an attacker have they know<font color="#E5E5E5"> user input is</font>

184
00:06:29,120 --> 00:06:32,150
actually<font color="#CCCCCC"> available deep within</font><font color="#E5E5E5"> a program</font>

185
00:06:30,740 --> 00:06:33,080
and they have enough control over<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and</font>

186
00:06:32,150 --> 00:06:37,099
then they see<font color="#E5E5E5"> what they can get out of</font>

187
00:06:33,080 --> 00:06:39,469
<font color="#E5E5E5">it here's a couple of graphs overlaid on</font>

188
00:06:37,099 --> 00:06:39,860
<font color="#CCCCCC">top of this these are probably too</font>

189
00:06:39,470 --> 00:06:42,379
detailed

190
00:06:39,860 --> 00:06:44,539
<font color="#E5E5E5">go into in some depth</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> basically time</font>

191
00:06:42,379 --> 00:06:46,789
is along the<font color="#CCCCCC"> horizontal axis and along</font>

192
00:06:44,539 --> 00:06:48,680
<font color="#E5E5E5">the vertical</font><font color="#CCCCCC"> axis is the input byte</font>

193
00:06:46,789 --> 00:06:51,469
<font color="#CCCCCC">number that label and so these are</font><font color="#E5E5E5"> files</font>

194
00:06:48,680 --> 00:06:53,719
so<font color="#CCCCCC"> it's input by position and and</font>

195
00:06:51,469 --> 00:06:55,310
basically the<font color="#E5E5E5"> the darker the spot is the</font>

196
00:06:53,719 --> 00:06:57,139
higher<font color="#E5E5E5"> the liveness is or the higher the</font>

197
00:06:55,310 --> 00:07:00,379
tank compute number is so the more

198
00:06:57,139 --> 00:07:02,150
control<font color="#E5E5E5"> it has over control flow or more</font>

199
00:07:00,379 --> 00:07:04,219
<font color="#E5E5E5">complicated function it</font><font color="#CCCCCC"> is of the inputs</font>

200
00:07:02,150 --> 00:07:06,560
and so in<font color="#E5E5E5"> this case you want you know</font>

201
00:07:04,219 --> 00:07:08,509
<font color="#CCCCCC">whiter things and so this</font><font color="#E5E5E5"> allows us to</font>

202
00:07:06,560 --> 00:07:11,120
<font color="#CCCCCC">identify that in this</font><font color="#E5E5E5"> particular input</font>

203
00:07:08,509 --> 00:07:12,710
bytes<font color="#E5E5E5"> 28 through 32 are dead</font>

204
00:07:11,120 --> 00:07:16,750
uncomplicated and available so we<font color="#CCCCCC"> can</font>

205
00:07:12,710 --> 00:07:19,789
use them<font color="#CCCCCC"> to create</font><font color="#E5E5E5"> a bug so here's the</font>

206
00:07:16,750 --> 00:07:21,889
<font color="#E5E5E5">yeah</font><font color="#CCCCCC"> the architecture of the system we</font>

207
00:07:19,789 --> 00:07:23,779
use clang it's really that interesting

208
00:07:21,889 --> 00:07:24,979
to instrument the source code with<font color="#CCCCCC"> tank</font>

209
00:07:23,779 --> 00:07:27,469
queries<font color="#E5E5E5"> because that's how we do it at</font>

210
00:07:24,979 --> 00:07:30,110
<font color="#E5E5E5">the moment</font><font color="#CCCCCC"> we use a</font><font color="#E5E5E5"> particular input</font><font color="#CCCCCC"> and</font>

211
00:07:27,469 --> 00:07:32,120
we use<font color="#E5E5E5"> panda in order to do this taint</font>

212
00:07:30,110 --> 00:07:33,889
analysis it works on a record and<font color="#E5E5E5"> then</font>

213
00:07:32,120 --> 00:07:35,930
replay under complicated dynamic

214
00:07:33,889 --> 00:07:38,930
analysis kind<font color="#E5E5E5"> of approach and so we</font>

215
00:07:35,930 --> 00:07:41,659
record the the<font color="#E5E5E5"> processing of that</font><font color="#CCCCCC"> input</font>

216
00:07:38,930 --> 00:07:43,250
with<font color="#CCCCCC"> panda and then under replay we do</font>

217
00:07:41,659 --> 00:07:45,199
with detailed<font color="#E5E5E5"> taint analysis to find</font>

218
00:07:43,250 --> 00:07:47,629
this attacker<font color="#E5E5E5"> control data as well as</font>

219
00:07:45,199 --> 00:07:48,710
attack points later on in the code<font color="#E5E5E5"> stick</font>

220
00:07:47,629 --> 00:07:50,900
<font color="#E5E5E5">those into a database these are</font>

221
00:07:48,710 --> 00:07:52,729
potentially injectable bugs

222
00:07:50,900 --> 00:07:55,370
these are heuristic measures so there's

223
00:07:52,729 --> 00:07:57,050
no guarantees<font color="#CCCCCC"> here and then finally we</font>

224
00:07:55,370 --> 00:08:00,409
instantiate we actually inject the bug

225
00:07:57,050 --> 00:08:02,000
with clang<font color="#E5E5E5"> compile and</font><font color="#CCCCCC"> then create a</font>

226
00:08:00,409 --> 00:08:04,870
<font color="#E5E5E5">modified version of the input</font><font color="#CCCCCC"> and see if</font>

227
00:08:02,000 --> 00:08:07,089
we get bugs<font color="#E5E5E5"> and so we get some yield</font>

228
00:08:04,870 --> 00:08:09,589
here's an example<font color="#E5E5E5"> of how this works</font>

229
00:08:07,089 --> 00:08:11,240
<font color="#CCCCCC">let's say the</font><font color="#E5E5E5"> Panda taint analysis tells</font>

230
00:08:09,589 --> 00:08:13,039
that the this<font color="#E5E5E5"> that</font><font color="#CCCCCC"> bites zero through</font>

231
00:08:11,240 --> 00:08:14,539
<font color="#CCCCCC">three and a buffer buff at a particular</font>

232
00:08:13,039 --> 00:08:17,889
line and<font color="#CCCCCC"> the source code is attacker</font>

233
00:08:14,539 --> 00:08:20,270
controlled that's what that<font color="#E5E5E5"> looks like</font>

234
00:08:17,889 --> 00:08:21,889
then we also learned from<font color="#CCCCCC"> panda that</font>

235
00:08:20,270 --> 00:08:25,068
there's a pointer that that we can

236
00:08:21,889 --> 00:08:26,960
corrupt<font color="#E5E5E5"> later on in the trace</font><font color="#CCCCCC"> that's in</font>

237
00:08:25,069 --> 00:08:28,580
a completely<font color="#E5E5E5"> different file and the</font>

238
00:08:26,960 --> 00:08:30,710
dynamic analysis tells us both of these

239
00:08:28,580 --> 00:08:32,390
things<font color="#E5E5E5"> and so then our</font><font color="#CCCCCC"> job to create</font><font color="#E5E5E5"> a</font>

240
00:08:30,710 --> 00:08:35,240
bug is to just introduce data flow

241
00:08:32,390 --> 00:08:37,250
between these two that makes those<font color="#E5E5E5"> four</font>

242
00:08:35,240 --> 00:08:38,779
bytes<font color="#E5E5E5"> and the beginning of buff do</font>

243
00:08:37,250 --> 00:08:41,599
something<font color="#CCCCCC"> terrible to that pointer</font>

244
00:08:38,779 --> 00:08:43,159
that's<font color="#E5E5E5"> ampersand info furthermore to</font>

245
00:08:41,599 --> 00:08:44,329
make it so that<font color="#CCCCCC"> this is trigger a bowl</font>

246
00:08:43,159 --> 00:08:46,370
so it doesn't happen sort of all the

247
00:08:44,329 --> 00:08:48,079
time<font color="#E5E5E5"> we introduce some kind</font><font color="#CCCCCC"> of a switch</font>

248
00:08:46,370 --> 00:08:50,540
<font color="#E5E5E5">which means that the bytes basically</font>

249
00:08:48,079 --> 00:08:52,189
have to be a particular value<font color="#CCCCCC"> or</font><font color="#E5E5E5"> you</font>

250
00:08:50,540 --> 00:08:54,569
know have a lot<font color="#E5E5E5"> of constraints</font><font color="#CCCCCC"> bump</font>

251
00:08:52,190 --> 00:08:57,420
here's what the<font color="#CCCCCC"> actual changes</font><font color="#E5E5E5"> to the</font>

252
00:08:54,570 --> 00:08:59,160
source<font color="#E5E5E5"> code look like in this case it's</font>

253
00:08:57,420 --> 00:09:01,500
not<font color="#E5E5E5"> really</font><font color="#CCCCCC"> that complicated or pretty</font>

254
00:08:59,160 --> 00:09:03,689
we basically siphon off those first<font color="#E5E5E5"> four</font>

255
00:09:01,500 --> 00:09:06,450
bytes in<font color="#CCCCCC"> the buffer</font><font color="#E5E5E5"> pack them into a UN</font>

256
00:09:03,690 --> 00:09:08,640
<font color="#CCCCCC">32</font><font color="#E5E5E5"> send them to a global</font><font color="#CCCCCC"> function which</font>

257
00:09:06,450 --> 00:09:12,030
holds on to them and<font color="#E5E5E5"> then later</font><font color="#CCCCCC"> on in</font>

258
00:09:08,640 --> 00:09:13,890
the in the<font color="#CCCCCC"> program we</font><font color="#E5E5E5"> just use them to</font>

259
00:09:12,030 --> 00:09:16,620
corrupt the pointer<font color="#E5E5E5"> we are working on</font>

260
00:09:13,890 --> 00:09:18,330
making this you know much more natural

261
00:09:16,620 --> 00:09:20,040
kind<font color="#CCCCCC"> of data flow realistic</font><font color="#E5E5E5"> data flow</font>

262
00:09:18,330 --> 00:09:24,330
but for the moment<font color="#CCCCCC"> this is the simplest</font>

263
00:09:20,040 --> 00:09:25,560
thing<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> and it works</font><font color="#CCCCCC"> so how well</font>

264
00:09:24,330 --> 00:09:27,630
does this work we<font color="#E5E5E5"> have this complete</font>

265
00:09:25,560 --> 00:09:29,369
working system<font color="#E5E5E5"> and we've used it to</font>

266
00:09:27,630 --> 00:09:31,439
inject lots of bugs and programs<font color="#E5E5E5"> in</font>

267
00:09:29,370 --> 00:09:33,480
<font color="#CCCCCC">particular</font><font color="#E5E5E5"> we took for open source</font>

268
00:09:31,440 --> 00:09:35,270
programs between<font color="#CCCCCC"> ten</font><font color="#E5E5E5"> thousand lines of</font>

269
00:09:33,480 --> 00:09:37,710
<font color="#E5E5E5">code</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> two million lines of code</font>

270
00:09:35,270 --> 00:09:39,660
<font color="#E5E5E5">injected two thousand bugs into each of</font>

271
00:09:37,710 --> 00:09:42,780
them were attempted to when we get

272
00:09:39,660 --> 00:09:45,719
varying yield<font color="#E5E5E5"> so that second last column</font>

273
00:09:42,780 --> 00:09:47,370
is yield we get<font color="#E5E5E5"> between 10 and 50</font>

274
00:09:45,720 --> 00:09:50,580
percent yield<font color="#E5E5E5"> and that's just</font><font color="#CCCCCC"> because we</font>

275
00:09:47,370 --> 00:09:52,860
try the specific change<font color="#E5E5E5"> the source code</font>

276
00:09:50,580 --> 00:09:54,120
with the<font color="#CCCCCC"> right modification to the right</font>

277
00:09:52,860 --> 00:09:56,040
part of<font color="#E5E5E5"> the input because remember we</font>

278
00:09:54,120 --> 00:09:58,020
have taint<font color="#CCCCCC"> and so we know what parts of</font>

279
00:09:56,040 --> 00:09:59,520
the input<font color="#E5E5E5"> to modify and see if it</font>

280
00:09:58,020 --> 00:10:01,170
<font color="#CCCCCC">actually triggers a segmentation</font><font color="#E5E5E5"> fault</font>

281
00:09:59,520 --> 00:10:03,180
<font color="#CCCCCC">we also</font><font color="#E5E5E5"> check to see</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> original</font>

282
00:10:01,170 --> 00:10:06,599
input<font color="#E5E5E5"> does not cause</font><font color="#CCCCCC"> any trouble anymore</font>

283
00:10:03,180 --> 00:10:09,270
<font color="#CCCCCC">all right now and with</font><font color="#E5E5E5"> this we've been</font>

284
00:10:06,600 --> 00:10:11,700
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to inject over</font><font color="#CCCCCC"> 2,000 bugs</font><font color="#E5E5E5"> into</font>

285
00:10:09,270 --> 00:10:13,560
these<font color="#E5E5E5"> four different</font><font color="#CCCCCC"> programs</font><font color="#E5E5E5"> the kind</font>

286
00:10:11,700 --> 00:10:16,560
<font color="#E5E5E5">of interesting thing about this here is</font>

287
00:10:13,560 --> 00:10:18,420
<font color="#E5E5E5">that the one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the programs</font><font color="#CCCCCC"> we injected</font>

288
00:10:16,560 --> 00:10:21,300
bugs<font color="#E5E5E5"> into wire sharks command-line</font>

289
00:10:18,420 --> 00:10:23,790
utility<font color="#CCCCCC"> there are</font><font color="#E5E5E5"> over 1.2 million</font>

290
00:10:21,300 --> 00:10:27,180
potential bugs in our database<font color="#CCCCCC"> so if we</font>

291
00:10:23,790 --> 00:10:28,500
extrapolate with the yield of<font color="#E5E5E5"> 17.7% it</font>

292
00:10:27,180 --> 00:10:30,959
seems as though<font color="#CCCCCC"> we may</font><font color="#E5E5E5"> be able to add</font>

293
00:10:28,500 --> 00:10:33,090
<font color="#E5E5E5">about 200,000 bugs into a Wireshark and</font>

294
00:10:30,960 --> 00:10:35,730
there are lots of caveats<font color="#CCCCCC"> here and</font><font color="#E5E5E5"> it</font>

295
00:10:33,090 --> 00:10:37,740
but if anything<font color="#E5E5E5"> our intuition from this</font>

296
00:10:35,730 --> 00:10:39,990
is these<font color="#E5E5E5"> numbers are small we can add</font>

297
00:10:37,740 --> 00:10:41,880
way more than<font color="#E5E5E5"> this if we want</font><font color="#CCCCCC"> to because</font>

298
00:10:39,990 --> 00:10:44,100
the way in which we're tracking do is

299
00:10:41,880 --> 00:10:45,360
and finding<font color="#E5E5E5"> them is is incomplete with</font>

300
00:10:44,100 --> 00:10:50,670
<font color="#E5E5E5">there are many more</font><font color="#CCCCCC"> opportunities than</font>

301
00:10:45,360 --> 00:10:52,470
this so we've used this to<font color="#CCCCCC"> create a</font>

302
00:10:50,670 --> 00:10:53,750
couple<font color="#CCCCCC"> of different corpora I'm gonna</font>

303
00:10:52,470 --> 00:10:57,120
<font color="#E5E5E5">talk about one of them in particular</font>

304
00:10:53,750 --> 00:10:59,010
which<font color="#CCCCCC"> is this lava M corpora basically</font>

305
00:10:57,120 --> 00:11:00,660
what we did<font color="#E5E5E5"> is</font><font color="#CCCCCC"> we took</font><font color="#E5E5E5"> four different</font>

306
00:10:59,010 --> 00:11:03,840
core utils programs which has been used

307
00:11:00,660 --> 00:11:05,370
<font color="#CCCCCC">to evaluate lots of lots of different</font>

308
00:11:03,840 --> 00:11:08,250
<font color="#E5E5E5">tools for</font><font color="#CCCCCC"> finding bugs and</font>

309
00:11:05,370 --> 00:11:09,870
programs<font color="#CCCCCC"> and in each</font><font color="#E5E5E5"> of those we added</font>

310
00:11:08,250 --> 00:11:13,110
as many bugs<font color="#E5E5E5"> as we could</font><font color="#CCCCCC"> we're actually</font>

311
00:11:09,870 --> 00:11:15,300
able to put bugs in at the same<font color="#CCCCCC"> time</font><font color="#E5E5E5"> and</font>

312
00:11:13,110 --> 00:11:17,040
I think<font color="#CCCCCC"> we added over two thousand bucks</font>

313
00:11:15,300 --> 00:11:18,930
to<font color="#E5E5E5"> these four programs and then we took</font>

314
00:11:17,040 --> 00:11:20,760
<font color="#CCCCCC">two open-source tools that are</font>

315
00:11:18,930 --> 00:11:22,229
vulnerability discovery tools and we

316
00:11:20,760 --> 00:11:24,510
determine what<font color="#E5E5E5"> their detection rates are</font>

317
00:11:22,230 --> 00:11:27,720
for<font color="#E5E5E5"> these bugs that we can inject and we</font>

318
00:11:24,510 --> 00:11:29,010
saw<font color="#E5E5E5"> that let's see one of them as a</font>

319
00:11:27,720 --> 00:11:30,600
fuzzer and the other is symbolic

320
00:11:29,010 --> 00:11:31,800
execution<font color="#CCCCCC"> it's at solving</font><font color="#E5E5E5"> we're not</font>

321
00:11:30,600 --> 00:11:34,080
naming them and the reason<font color="#CCCCCC"> is because</font>

322
00:11:31,800 --> 00:11:35,520
this is a<font color="#E5E5E5"> kind of incomplete evaluation</font>

323
00:11:34,080 --> 00:11:37,110
we just wanted<font color="#CCCCCC"> to see if this could</font><font color="#E5E5E5"> be</font>

324
00:11:35,520 --> 00:11:38,460
used<font color="#E5E5E5"> for evaluation and we think it</font>

325
00:11:37,110 --> 00:11:41,430
<font color="#CCCCCC">can't but</font><font color="#E5E5E5"> we'd like to</font><font color="#CCCCCC"> do a much more</font>

326
00:11:38,460 --> 00:11:42,779
<font color="#E5E5E5">careful evaluation</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> detection rate is</font>

327
00:11:41,430 --> 00:11:44,370
less<font color="#E5E5E5"> than</font><font color="#CCCCCC"> 2%</font>

328
00:11:42,779 --> 00:11:46,860
<font color="#CCCCCC">you know we injected over 2,000 and</font>

329
00:11:44,370 --> 00:11:48,839
about 40 were found by the<font color="#E5E5E5"> the tools</font>

330
00:11:46,860 --> 00:11:50,460
combined<font color="#E5E5E5"> so that's not that's actually</font>

331
00:11:48,839 --> 00:11:52,650
<font color="#E5E5E5">great I'm really</font><font color="#CCCCCC"> happy that they</font><font color="#E5E5E5"> found</font>

332
00:11:50,460 --> 00:11:56,490
some<font color="#E5E5E5"> of them but clearly there's work to</font>

333
00:11:52,650 --> 00:11:58,470
be<font color="#E5E5E5"> done</font><font color="#CCCCCC"> so big</font><font color="#E5E5E5"> question hanging in the</font>

334
00:11:56,490 --> 00:12:00,360
air<font color="#E5E5E5"> here is realism</font><font color="#CCCCCC"> it's totally a</font>

335
00:11:58,470 --> 00:12:03,570
concern we get that it's very hard to

336
00:12:00,360 --> 00:12:05,010
<font color="#CCCCCC">quantify and as you can see</font><font color="#E5E5E5"> the kind of</font>

337
00:12:03,570 --> 00:12:07,020
modifications we're making to the source

338
00:12:05,010 --> 00:12:08,400
code are very<font color="#CCCCCC"> artefact</font><font color="#E5E5E5"> he we're changing</font>

339
00:12:07,020 --> 00:12:10,560
it in this kind<font color="#CCCCCC"> of weird</font><font color="#E5E5E5"> way with this</font>

340
00:12:08,400 --> 00:12:12,390
<font color="#E5E5E5">you know data flow through a global and</font>

341
00:12:10,560 --> 00:12:15,540
whatever which we're actually working<font color="#E5E5E5"> on</font>

342
00:12:12,390 --> 00:12:17,459
we know how to<font color="#E5E5E5"> fix but what we did do</font><font color="#CCCCCC"> is</font>

343
00:12:15,540 --> 00:12:19,620
<font color="#CCCCCC">we</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> think we think</font><font color="#CCCCCC"> it's a</font>

344
00:12:17,459 --> 00:12:20,969
<font color="#E5E5E5">concern but I think what's important</font>

345
00:12:19,620 --> 00:12:23,130
here<font color="#CCCCCC"> is</font><font color="#E5E5E5"> whether or</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> these lava bugs</font>

346
00:12:20,970 --> 00:12:24,630
can<font color="#CCCCCC"> be used to evaluate things and they</font>

347
00:12:23,130 --> 00:12:26,850
may<font color="#E5E5E5"> still be able to even</font><font color="#CCCCCC"> in their</font>

348
00:12:24,630 --> 00:12:28,950
<font color="#CCCCCC">current</font><font color="#E5E5E5"> state what we did was we</font><font color="#CCCCCC"> did a</font>

349
00:12:26,850 --> 00:12:30,690
measurement<font color="#E5E5E5"> of what fraction of the</font>

350
00:12:28,950 --> 00:12:32,940
execution trace needs to be<font color="#E5E5E5"> analyzed</font>

351
00:12:30,690 --> 00:12:35,070
basically correctly in order<font color="#CCCCCC"> to be able</font>

352
00:12:32,940 --> 00:12:37,500
<font color="#CCCCCC">to get this right and so we</font><font color="#E5E5E5"> found</font><font color="#CCCCCC"> that</font>

353
00:12:35,070 --> 00:12:41,070
the<font color="#CCCCCC"> the place at which</font><font color="#E5E5E5"> the duo was</font>

354
00:12:37,500 --> 00:12:42,959
siphoned off is is sort of all<font color="#CCCCCC"> over</font><font color="#E5E5E5"> the</font>

355
00:12:41,070 --> 00:12:44,339
<font color="#E5E5E5">execution</font><font color="#CCCCCC"> trace</font><font color="#E5E5E5"> and in fact if anything</font>

356
00:12:42,959 --> 00:12:46,709
<font color="#E5E5E5">it's sort of near the end</font><font color="#CCCCCC"> of the</font>

357
00:12:44,339 --> 00:12:49,050
<font color="#CCCCCC">execution trace and so that indicates to</font>

358
00:12:46,709 --> 00:12:51,119
us that<font color="#CCCCCC"> if anything the lava bugs that</font>

359
00:12:49,050 --> 00:12:53,219
<font color="#E5E5E5">are insert</font><font color="#CCCCCC"> inserted our are kind of hard</font>

360
00:12:51,120 --> 00:12:54,270
<font color="#E5E5E5">they might be too hard for</font><font color="#CCCCCC"> these four</font>

361
00:12:53,220 --> 00:12:56,910
tools<font color="#E5E5E5"> in general</font><font color="#CCCCCC"> because we're</font><font color="#E5E5E5"> sort of</font>

362
00:12:54,270 --> 00:12:58,439
inserting them near the<font color="#E5E5E5"> end actually we</font>

363
00:12:56,910 --> 00:13:00,180
can pick and choose we could have<font color="#E5E5E5"> chosen</font>

364
00:12:58,440 --> 00:13:01,500
<font color="#E5E5E5">earlier</font><font color="#CCCCCC"> in the trace we just didn't know</font>

365
00:13:00,180 --> 00:13:05,540
<font color="#CCCCCC">that at the time that we were doing</font><font color="#E5E5E5"> that</font>

366
00:13:01,500 --> 00:13:09,390
analysis<font color="#CCCCCC"> but we can we can do that later</font>

367
00:13:05,540 --> 00:13:11,279
so in summary we have<font color="#CCCCCC"> a working system</font>

368
00:13:09,390 --> 00:13:13,650
that that automates the construction of

369
00:13:11,279 --> 00:13:16,610
large<font color="#E5E5E5"> corpora for study and assessment</font>

370
00:13:13,650 --> 00:13:19,150
we<font color="#E5E5E5"> think this can</font><font color="#CCCCCC"> be the basis for</font>

371
00:13:16,610 --> 00:13:21,340
coming up with<font color="#CCCCCC"> ground truth</font><font color="#E5E5E5"> basic</font>

372
00:13:19,150 --> 00:13:23,819
on demand<font color="#E5E5E5"> to test whether or not</font>

373
00:13:21,340 --> 00:13:26,170
vulnerability discovery tools<font color="#CCCCCC"> even work</font>

374
00:13:23,820 --> 00:13:28,660
<font color="#CCCCCC">the novel taint based measures that we</font>

375
00:13:26,170 --> 00:13:30,640
used are key<font color="#CCCCCC"> here liveness and 10</font>

376
00:13:28,660 --> 00:13:32,350
compute<font color="#E5E5E5"> number are you know not</font>

377
00:13:30,640 --> 00:13:34,300
<font color="#E5E5E5">guarantees but they're perfectly</font>

378
00:13:32,350 --> 00:13:35,980
adequate for<font color="#E5E5E5"> coming up with the bugs</font>

379
00:13:34,300 --> 00:13:39,760
<font color="#E5E5E5">that we were that we came up</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> yet we</font>

380
00:13:35,980 --> 00:13:41,470
get yields<font color="#CCCCCC"> between</font><font color="#E5E5E5"> 10 and 50 percent</font><font color="#CCCCCC"> in</font>

381
00:13:39,760 --> 00:13:43,630
<font color="#E5E5E5">terms of future directions</font><font color="#CCCCCC"> we'd like to</font>

382
00:13:41,470 --> 00:13:44,800
use this in<font color="#E5E5E5"> order to create we don't</font>

383
00:13:43,630 --> 00:13:46,030
actually<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> in the business of</font>

384
00:13:44,800 --> 00:13:48,370
<font color="#E5E5E5">evaluating other people's vulnerability</font>

385
00:13:46,030 --> 00:13:50,530
discovery tools that's no fun we'd love

386
00:13:48,370 --> 00:13:52,600
<font color="#CCCCCC">to have a continuous online competition</font>

387
00:13:50,530 --> 00:13:55,089
<font color="#E5E5E5">where you push a button get a corpus</font>

388
00:13:52,600 --> 00:13:56,620
<font color="#E5E5E5">maybe we want</font><font color="#CCCCCC"> to test a hypothesis you</font>

389
00:13:55,090 --> 00:13:59,050
know do that<font color="#E5E5E5"> and then throw it away push</font>

390
00:13:56,620 --> 00:14:01,960
a button and<font color="#E5E5E5"> get another corpus</font><font color="#CCCCCC"> instead</font>

391
00:13:59,050 --> 00:14:03,609
maybe<font color="#E5E5E5"> you push a button</font><font color="#CCCCCC"> you determine</font>

392
00:14:01,960 --> 00:14:05,620
whether your tool works<font color="#E5E5E5"> you submit a</font>

393
00:14:03,610 --> 00:14:07,030
result and there's a leaderboard<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you</font>

394
00:14:05,620 --> 00:14:09,100
know<font color="#E5E5E5"> the first person who actually</font>

395
00:14:07,030 --> 00:14:11,199
<font color="#CCCCCC">submits results is going to be in first</font>

396
00:14:09,100 --> 00:14:13,740
<font color="#E5E5E5">place and you know you're gonna</font><font color="#CCCCCC"> topple</font>

397
00:14:11,200 --> 00:14:15,940
<font color="#CCCCCC">that person if you</font><font color="#E5E5E5"> have a better system</font>

398
00:14:13,740 --> 00:14:18,310
<font color="#CCCCCC">furthermore we've run capture-the-flag</font>

399
00:14:15,940 --> 00:14:20,530
tournaments<font color="#E5E5E5"> and it's a big problem in in</font>

400
00:14:18,310 --> 00:14:22,209
those in actually actually<font color="#E5E5E5"> being able to</font>

401
00:14:20,530 --> 00:14:24,339
reuse the infrastructure and<font color="#E5E5E5"> the</font>

402
00:14:22,210 --> 00:14:26,230
challenges but<font color="#E5E5E5"> we think a tool like lava</font>

403
00:14:24,340 --> 00:14:28,270
could allow us<font color="#CCCCCC"> do</font><font color="#E5E5E5"> that we can push a</font>

404
00:14:26,230 --> 00:14:30,310
button<font color="#CCCCCC"> and add you know a</font><font color="#E5E5E5"> hundred new</font>

405
00:14:28,270 --> 00:14:31,780
right<font color="#E5E5E5"> what we're kind of vulnerabilities</font>

406
00:14:30,310 --> 00:14:34,030
into something or information

407
00:14:31,780 --> 00:14:36,640
disclosures<font color="#E5E5E5"> and have a new CTF</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that</font>

408
00:14:34,030 --> 00:14:38,439
could be really<font color="#CCCCCC"> wonderful we have to do</font>

409
00:14:36,640 --> 00:14:40,270
some work<font color="#E5E5E5"> to assess and improve the</font>

410
00:14:38,440 --> 00:14:41,620
realism<font color="#E5E5E5"> of lava bugs and I think that's</font>

411
00:14:40,270 --> 00:14:43,900
gonna<font color="#E5E5E5"> make more sense when they become</font>

412
00:14:41,620 --> 00:14:45,820
<font color="#CCCCCC">more</font><font color="#E5E5E5"> complicated they're not</font><font color="#CCCCCC"> just these</font>

413
00:14:43,900 --> 00:14:47,890
corrupt a pointer<font color="#CCCCCC"> and this not really</font>

414
00:14:45,820 --> 00:14:50,410
<font color="#E5E5E5">exploitable way but you know interesting</font>

415
00:14:47,890 --> 00:14:52,150
in terms of vulnerability discovery<font color="#E5E5E5"> we</font>

416
00:14:50,410 --> 00:14:54,699
do want to add<font color="#CCCCCC"> two other</font><font color="#E5E5E5"> kinds of</font>

417
00:14:52,150 --> 00:14:57,189
vulnerabilities<font color="#E5E5E5"> and and we're</font><font color="#CCCCCC"> going to</font>

418
00:14:54,700 --> 00:14:58,720
<font color="#E5E5E5">work on that but but I think we first</font>

419
00:14:57,190 --> 00:15:01,450
want<font color="#E5E5E5"> to try to introduce more</font>

420
00:14:58,720 --> 00:15:03,430
interesting effects<font color="#CCCCCC"> we want the buffer</font>

421
00:15:01,450 --> 00:15:05,710
overflows definitely to be<font color="#E5E5E5"> exploitable</font>

422
00:15:03,430 --> 00:15:08,380
first in the context of<font color="#CCCCCC"> CTFs and other</font>

423
00:15:05,710 --> 00:15:11,340
other situations<font color="#E5E5E5"> too and that's all I</font>

424
00:15:08,380 --> 00:15:11,340
have any questions

425
00:15:14,100 --> 00:15:24,300
<font color="#CCCCCC">alright question</font><font color="#E5E5E5"> hey I am</font><font color="#CCCCCC"> yon shortage</font>

426
00:15:20,340 --> 00:15:25,860
<font color="#CCCCCC">video from UCSB and I was wondering</font><font color="#E5E5E5"> did</font>

427
00:15:24,300 --> 00:15:27,719
<font color="#CCCCCC">you make any modifications to</font><font color="#E5E5E5"> your</font>

428
00:15:25,860 --> 00:15:30,300
fuzzer to make it work on<font color="#E5E5E5"> these binaries</font>

429
00:15:27,720 --> 00:15:32,130
<font color="#E5E5E5">what</font><font color="#CCCCCC"> fuzzer did you use</font><font color="#E5E5E5"> can you talk a</font>

430
00:15:30,300 --> 00:15:34,740
little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> more about that</font><font color="#E5E5E5"> I'm not</font><font color="#CCCCCC"> going</font>

431
00:15:32,130 --> 00:15:38,730
<font color="#CCCCCC">to tell you</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> buzzer that we used</font><font color="#E5E5E5"> we</font>

432
00:15:34,740 --> 00:15:39,930
did not make any<font color="#CCCCCC"> modifications we we ran</font>

433
00:15:38,730 --> 00:15:41,940
the fuzzer and the<font color="#E5E5E5"> symbolic execution</font>

434
00:15:39,930 --> 00:15:44,430
and<font color="#E5E5E5"> sat solving tools each I think</font><font color="#CCCCCC"> we</font>

435
00:15:41,940 --> 00:15:45,780
had them<font color="#CCCCCC"> five hours just completely</font>

436
00:15:44,430 --> 00:15:47,099
pulled out of the air because<font color="#CCCCCC"> we were</font>

437
00:15:45,780 --> 00:15:49,110
running<font color="#CCCCCC"> out of time</font>

438
00:15:47,100 --> 00:15:52,290
but one hour<font color="#E5E5E5"> seemed too short and 24</font>

439
00:15:49,110 --> 00:15:53,700
hours is<font color="#CCCCCC"> just like forget it no we</font>

440
00:15:52,290 --> 00:15:55,230
didn't<font color="#E5E5E5"> make</font><font color="#CCCCCC"> any modifications</font><font color="#E5E5E5"> but we</font>

441
00:15:53,700 --> 00:15:58,110
worked hard to<font color="#E5E5E5"> try to understand how</font>

442
00:15:55,230 --> 00:15:59,310
they we tried to be users<font color="#CCCCCC"> basically we</font>

443
00:15:58,110 --> 00:16:01,230
didn't just like pull them off<font color="#E5E5E5"> the shelf</font>

444
00:15:59,310 --> 00:16:02,790
<font color="#CCCCCC">try them and then they</font><font color="#E5E5E5"> just failed</font><font color="#CCCCCC"> amel</font>

445
00:16:01,230 --> 00:16:05,700
<font color="#E5E5E5">I have to get them but that buzzer is a</font>

446
00:16:02,790 --> 00:16:11,449
publicly available one<font color="#E5E5E5"> yes</font><font color="#CCCCCC"> okay cool</font>

447
00:16:05,700 --> 00:16:14,370
<font color="#E5E5E5">thanks thank you any other questions so</font>

448
00:16:11,450 --> 00:16:18,690
<font color="#CCCCCC">let</font><font color="#E5E5E5"> me have</font><font color="#CCCCCC"> just quick questions so this</font>

449
00:16:14,370 --> 00:16:21,330
<font color="#E5E5E5">is only for the injecting just buff</font>

450
00:16:18,690 --> 00:16:23,400
overflow<font color="#E5E5E5"> do you expect any more</font>

451
00:16:21,330 --> 00:16:26,330
<font color="#E5E5E5">challenges or difficulties if you want</font>

452
00:16:23,400 --> 00:16:28,770
to expand<font color="#E5E5E5"> this work by including</font>

453
00:16:26,330 --> 00:16:31,550
<font color="#CCCCCC">additional vulnerabilities such as</font>

454
00:16:28,770 --> 00:16:35,100
<font color="#E5E5E5">usually after free or two other types</font>

455
00:16:31,550 --> 00:16:37,949
it's a great question<font color="#E5E5E5"> we do anticipate</font>

456
00:16:35,100 --> 00:16:39,540
difficulties but we<font color="#E5E5E5"> think the the</font>

457
00:16:37,950 --> 00:16:41,040
ability<font color="#CCCCCC"> to</font><font color="#E5E5E5"> locate the attacker</font>

458
00:16:39,540 --> 00:16:43,050
<font color="#E5E5E5">controlled data within the trace and</font>

459
00:16:41,040 --> 00:16:44,219
<font color="#CCCCCC">within the program is a fundamental</font>

460
00:16:43,050 --> 00:16:46,140
building block for<font color="#CCCCCC"> any kind</font><font color="#E5E5E5"> of</font>

461
00:16:44,220 --> 00:16:47,700
vulnerability<font color="#E5E5E5"> because it has to be</font>

462
00:16:46,140 --> 00:16:49,949
<font color="#E5E5E5">triggered by the input otherwise it's</font>

463
00:16:47,700 --> 00:16:52,080
<font color="#E5E5E5">not particularly interesting and we know</font>

464
00:16:49,950 --> 00:16:54,180
how<font color="#E5E5E5"> to do that and we have we're working</font>

465
00:16:52,080 --> 00:16:56,760
on<font color="#E5E5E5"> use after free and amongst other</font>

466
00:16:54,180 --> 00:16:58,290
kinds of<font color="#CCCCCC"> vulnerabilities we think many</font>

467
00:16:56,760 --> 00:16:59,480
can be adapted<font color="#CCCCCC"> of this framework is I</font>

468
00:16:58,290 --> 00:17:01,650
think<font color="#E5E5E5"> some things are definitely</font>

469
00:16:59,480 --> 00:17:03,630
<font color="#E5E5E5">fundamentally off limits like crypto</font>

470
00:17:01,650 --> 00:17:05,040
flaws<font color="#CCCCCC"> I don't know what that means in</font>

471
00:17:03,630 --> 00:17:07,890
this context I don't<font color="#CCCCCC"> know how to add</font>

472
00:17:05,040 --> 00:17:09,300
those but maybe maybe some clever<font color="#E5E5E5"> person</font>

473
00:17:07,890 --> 00:17:10,470
can figure it<font color="#E5E5E5"> out the finding the</font>

474
00:17:09,300 --> 00:17:12,869
<font color="#E5E5E5">attacker</font><font color="#CCCCCC"> controlled data</font><font color="#E5E5E5"> is really</font>

475
00:17:10,470 --> 00:17:17,850
<font color="#E5E5E5">important it's very</font><font color="#CCCCCC"> good thank you</font>

476
00:17:12,869 --> 00:17:21,629
yes<font color="#CCCCCC"> so did</font><font color="#E5E5E5"> you do</font><font color="#CCCCCC"> the characterization</font>

477
00:17:17,849 --> 00:17:26,409
of<font color="#E5E5E5"> why the NRC's didn't find these bugs</font>

478
00:17:21,630 --> 00:17:28,240
<font color="#E5E5E5">was it because those all the current</font>

479
00:17:26,410 --> 00:17:31,030
analyzers are trying to get bugs that

480
00:17:28,240 --> 00:17:32,830
are<font color="#E5E5E5"> human caused and so is it just</font>

481
00:17:31,030 --> 00:17:34,780
because there's<font color="#CCCCCC"> too artificial</font><font color="#E5E5E5"> or</font>

482
00:17:32,830 --> 00:17:39,340
because their limits levels<font color="#E5E5E5"> of</font>

483
00:17:34,780 --> 00:17:40,540
indirection<font color="#CCCCCC"> or what what we found we did</font>

484
00:17:39,340 --> 00:17:43,240
some analysis<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that and it's in the</font>

485
00:17:40,540 --> 00:17:44,620
paper<font color="#CCCCCC"> what we found is that they are</font>

486
00:17:43,240 --> 00:17:46,780
mostly finding bugs that are shallow

487
00:17:44,620 --> 00:17:50,709
<font color="#E5E5E5">they're finding bugs that are early</font><font color="#CCCCCC"> on</font>

488
00:17:46,780 --> 00:17:52,510
in the execution<font color="#CCCCCC"> trace</font><font color="#E5E5E5"> so fuzzers and</font>

489
00:17:50,710 --> 00:17:55,050
symbolic execution<font color="#CCCCCC"> they sort of have the</font>

490
00:17:52,510 --> 00:17:58,150
<font color="#CCCCCC">same path explosion problem they need</font><font color="#E5E5E5"> to</font>

491
00:17:55,050 --> 00:17:59,889
try to explore all possible you know

492
00:17:58,150 --> 00:18:02,140
ways through the<font color="#E5E5E5"> program and</font><font color="#CCCCCC"> therefore</font>

493
00:17:59,890 --> 00:18:04,000
all possible inputs and only one input

494
00:18:02,140 --> 00:18:07,900
<font color="#E5E5E5">or two or something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> actually</font>

495
00:18:04,000 --> 00:18:09,730
<font color="#E5E5E5">trigger these bugs that was the analysis</font>

496
00:18:07,900 --> 00:18:11,320
that<font color="#E5E5E5"> we found that they</font><font color="#CCCCCC"> write</font><font color="#E5E5E5"> okay and</font>

497
00:18:09,730 --> 00:18:16,000
that's also<font color="#CCCCCC"> true</font><font color="#E5E5E5"> that the stack</font><font color="#CCCCCC"> analyze</font>

498
00:18:11,320 --> 00:18:17,290
<font color="#E5E5E5">see analyzers or do you they also seem</font>

499
00:18:16,000 --> 00:18:21,060
to get stuck near the beginning<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

500
00:18:17,290 --> 00:18:24,220
program yeah<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> needle in a haystack</font>

501
00:18:21,060 --> 00:18:27,550
<font color="#E5E5E5">okay it seems that I would have very</font>

502
00:18:24,220 --> 00:18:29,920
good<font color="#E5E5E5"> sort of bug finding success rate if</font>

503
00:18:27,550 --> 00:18:33,220
I use pandas as my bug finding

504
00:18:29,920 --> 00:18:36,700
<font color="#CCCCCC">constraint solar panel</font><font color="#E5E5E5"> doesn't do</font>

505
00:18:33,220 --> 00:18:39,040
constraint solving but you could you

506
00:18:36,700 --> 00:18:41,140
could try to take<font color="#E5E5E5"> this same approach</font>

507
00:18:39,040 --> 00:18:42,720
this lava approach<font color="#E5E5E5"> and flip it</font><font color="#CCCCCC"> on its</font>

508
00:18:41,140 --> 00:18:44,860
head<font color="#E5E5E5"> and</font><font color="#CCCCCC"> use it to try to find</font><font color="#E5E5E5"> bugs</font>

509
00:18:42,720 --> 00:18:48,220
<font color="#E5E5E5">basically and we may be working on that</font>

510
00:18:44,860 --> 00:18:49,510
no no but<font color="#E5E5E5"> I</font><font color="#CCCCCC"> mean I would find my point</font>

511
00:18:48,220 --> 00:18:51,700
is the success rate would<font color="#CCCCCC"> be good</font>

512
00:18:49,510 --> 00:18:54,790
against<font color="#E5E5E5"> the bugs that that lava outputs</font>

513
00:18:51,700 --> 00:18:56,350
right<font color="#E5E5E5"> so if I used the same the same</font>

514
00:18:54,790 --> 00:18:58,180
search mechanism which you<font color="#CCCCCC"> used</font><font color="#E5E5E5"> to find</font>

515
00:18:56,350 --> 00:19:03,120
places<font color="#E5E5E5"> to inject bugs to find bugs then</font>

516
00:18:58,180 --> 00:19:05,560
sort of<font color="#E5E5E5"> I would a symmetric</font><font color="#CCCCCC"> s-- possibly</font>

517
00:19:03,120 --> 00:19:07,270
but it's an easier it's a fundamentally

518
00:19:05,560 --> 00:19:10,240
easier problem adding bugs to programs

519
00:19:07,270 --> 00:19:12,160
<font color="#E5E5E5">and so you know even if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> use exactly</font>

520
00:19:10,240 --> 00:19:16,690
the same technique<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we use to inject</font>

521
00:19:12,160 --> 00:19:17,710
these bugs<font color="#CCCCCC"> you still have to you know</font>

522
00:19:16,690 --> 00:19:19,900
look through all the various

523
00:19:17,710 --> 00:19:21,610
possibilities and try<font color="#E5E5E5"> everything whereas</font>

524
00:19:19,900 --> 00:19:23,230
we<font color="#CCCCCC"> don't have to try everything we</font><font color="#E5E5E5"> are</font>

525
00:19:21,610 --> 00:19:25,840
adding one along a<font color="#CCCCCC"> specific execution</font>

526
00:19:23,230 --> 00:19:26,950
<font color="#E5E5E5">trace so in particular what you don't</font>

527
00:19:25,840 --> 00:19:28,389
<font color="#E5E5E5">have when you're trying to do</font>

528
00:19:26,950 --> 00:19:29,950
vulnerability discovery is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> input</font>

529
00:19:28,390 --> 00:19:31,900
that<font color="#CCCCCC"> we use to do our taint analysis</font>

530
00:19:29,950 --> 00:19:33,820
<font color="#E5E5E5">we're not going to give that to</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> so</font>

531
00:19:31,900 --> 00:19:35,710
you need to you know find<font color="#E5E5E5"> the one input</font>

532
00:19:33,820 --> 00:19:38,649
<font color="#E5E5E5">that gets you down the same trace to add</font>

533
00:19:35,710 --> 00:19:39,160
bugs<font color="#CCCCCC"> and so I don't</font><font color="#E5E5E5"> think there's an</font>

534
00:19:38,650 --> 00:19:41,880
<font color="#CCCCCC">advantage</font>

535
00:19:39,160 --> 00:19:41,880
<font color="#E5E5E5">all right thanks</font>

