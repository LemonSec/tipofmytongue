1
00:00:08,850 --> 00:00:14,860
thank you actually I'm no more in the

2
00:00:12,610 --> 00:00:16,600
way I just move one month ago through

3
00:00:14,860 --> 00:00:19,000
the Technical University of Vienna it's

4
00:00:16,600 --> 00:00:23,890
also very nice so you can come there so

5
00:00:19,000 --> 00:00:25,570
no problem so I would like to start this

6
00:00:23,890 --> 00:00:28,330
talk by taking a comparison between

7
00:00:25,570 --> 00:00:31,360
browser extensions and web applications

8
00:00:28,330 --> 00:00:35,199
as you may know web applications are

9
00:00:31,360 --> 00:00:36,070
very restricted restricted servers and

10
00:00:35,200 --> 00:00:38,800
there is the same origin policy

11
00:00:36,070 --> 00:00:41,080
implemented in browsers that mentor that

12
00:00:38,800 --> 00:00:43,260
a web application can only access data

13
00:00:41,080 --> 00:00:45,760
which is managed but by that application

14
00:00:43,260 --> 00:00:47,650
resident if the application has set some

15
00:00:45,760 --> 00:00:49,360
cookies in the browser it can access

16
00:00:47,650 --> 00:00:52,120
only those cookies but no the cookies of

17
00:00:49,360 --> 00:00:54,129
another application on the other hand

18
00:00:52,120 --> 00:00:55,959
browser extensions are highly privileged

19
00:00:54,130 --> 00:00:57,640
meaning that for instance they are not

20
00:00:55,960 --> 00:00:59,800
subject to the same origin policy which

21
00:00:57,640 --> 00:01:02,320
means that they can access user data on

22
00:00:59,800 --> 00:01:05,170
all websites including cookies and and

23
00:01:02,320 --> 00:01:07,450
everything because extensions are highly

24
00:01:05,170 --> 00:01:09,700
privileged there is a kind of separation

25
00:01:07,450 --> 00:01:11,979
in context execution context between web

26
00:01:09,700 --> 00:01:13,810
application and browser extensions so

27
00:01:11,979 --> 00:01:16,210
this prevents web application from

28
00:01:13,810 --> 00:01:18,820
directly accessing browser extension

29
00:01:16,210 --> 00:01:20,889
context but since browser extension are

30
00:01:18,820 --> 00:01:22,419
privileged they execute with the

31
00:01:20,890 --> 00:01:26,890
privileges of the browser they can

32
00:01:22,420 --> 00:01:29,020
manipulate web web applications so

33
00:01:26,890 --> 00:01:30,700
usually there are two threat models that

34
00:01:29,020 --> 00:01:33,670
are considered regarding an browser

35
00:01:30,700 --> 00:01:36,759
extension security the first one is to

36
00:01:33,670 --> 00:01:38,439
view extensions the extension itself as

37
00:01:36,759 --> 00:01:40,719
being malicious potentially malicious

38
00:01:38,439 --> 00:01:42,699
and this is what browser vendors usually

39
00:01:40,719 --> 00:01:44,619
do so whenever you submit an extension

40
00:01:42,700 --> 00:01:46,359
to Google Chrome for instance they will

41
00:01:44,619 --> 00:01:47,619
go through the the code of the extension

42
00:01:46,359 --> 00:01:49,270
to review it and check whether the

43
00:01:47,619 --> 00:01:51,850
extension is safe or not before

44
00:01:49,270 --> 00:01:53,770
publishing the extension the other

45
00:01:51,850 --> 00:01:57,520
threat model is to view the extensions

46
00:01:53,770 --> 00:01:59,619
as non malicious but potentially buggy

47
00:01:57,520 --> 00:02:01,840
so it means that it could contain some

48
00:01:59,619 --> 00:02:04,209
vulnerabilities that can be exploited by

49
00:02:01,840 --> 00:02:08,610
attackers in order to perform sensitive

50
00:02:04,209 --> 00:02:10,929
action so and one of those attackers for

51
00:02:08,610 --> 00:02:13,240
vulnerable extension is the web attacker

52
00:02:10,929 --> 00:02:15,160
so here one view the web application as

53
00:02:13,240 --> 00:02:18,280
a potential attacker that can exploit

54
00:02:15,160 --> 00:02:20,530
vulnerabilities in the in extensions and

55
00:02:18,280 --> 00:02:21,460
this attack model has been considered a

56
00:02:20,530 --> 00:02:24,790
lot in

57
00:02:21,460 --> 00:02:26,950
search this is actually the the attacker

58
00:02:24,790 --> 00:02:28,510
that we also considered in this talk so

59
00:02:26,950 --> 00:02:30,160
we view the web application as

60
00:02:28,510 --> 00:02:32,739
potentially the attacker attacking an

61
00:02:30,160 --> 00:02:34,930
extension in order to access some

62
00:02:32,740 --> 00:02:37,540
sensitive information and specifically

63
00:02:34,930 --> 00:02:42,070
we are looking at the message passing

64
00:02:37,540 --> 00:02:44,049
api's so I as I already mentioned so

65
00:02:42,070 --> 00:02:46,239
there is a separation context between

66
00:02:44,050 --> 00:02:48,850
browser extensions and web applications

67
00:02:46,240 --> 00:02:50,590
but extension can open message

68
00:02:48,850 --> 00:02:52,420
communication channels with web

69
00:02:50,590 --> 00:02:55,480
application in order to exchange

70
00:02:52,420 --> 00:02:57,309
messages so here you see the different

71
00:02:55,480 --> 00:02:59,590
components of extensions present the

72
00:02:57,310 --> 00:03:01,390
content script they can directly

73
00:02:59,590 --> 00:03:03,400
interact with web application by sending

74
00:03:01,390 --> 00:03:05,920
messages user using the postmessage api

75
00:03:03,400 --> 00:03:07,240
which you know is using course origin

76
00:03:05,920 --> 00:03:10,929
communication between for instance

77
00:03:07,240 --> 00:03:13,630
iframes and their parent pages etc or

78
00:03:10,930 --> 00:03:15,640
also there there are more specific

79
00:03:13,630 --> 00:03:17,380
extensions api's forcing their own

80
00:03:15,640 --> 00:03:19,510
message external that can be used by

81
00:03:17,380 --> 00:03:21,130
browser extensions in the background

82
00:03:19,510 --> 00:03:28,000
page to communicate directly with web

83
00:03:21,130 --> 00:03:29,710
applications so how would we found we

84
00:03:28,000 --> 00:03:31,600
analyze extensions basically we

85
00:03:29,710 --> 00:03:33,970
downloaded extensions

86
00:03:31,600 --> 00:03:36,010
most of them from chrome opera and

87
00:03:33,970 --> 00:03:38,350
Firefox because those browsers support

88
00:03:36,010 --> 00:03:41,470
almost the same API for extensions so

89
00:03:38,350 --> 00:03:43,030
the web extension API and those

90
00:03:41,470 --> 00:03:45,340
extension that we download go fruit

91
00:03:43,030 --> 00:03:47,500
two-step analysis in the first step we

92
00:03:45,340 --> 00:03:50,140
statically analysis and analyze the code

93
00:03:47,500 --> 00:03:52,270
of the extensions automatically and then

94
00:03:50,140 --> 00:03:54,100
afterwards when we have some suspicious

95
00:03:52,270 --> 00:03:56,020
extensions we go there manually and we

96
00:03:54,100 --> 00:03:57,960
review the code of those extensions in

97
00:03:56,020 --> 00:04:01,930
order to check whether the extension is

98
00:03:57,960 --> 00:04:05,140
vulnerable or not so as I said in the

99
00:04:01,930 --> 00:04:08,140
static analysis phase what we're looking

100
00:04:05,140 --> 00:04:12,250
for bit basically is to check whether in

101
00:04:08,140 --> 00:04:14,619
the extension code there are some APRs

102
00:04:12,250 --> 00:04:17,079
code which is listening for messages

103
00:04:14,620 --> 00:04:18,820
from web applications and if this is the

104
00:04:17,079 --> 00:04:24,840
case we also further check whether the

105
00:04:18,820 --> 00:04:28,360
handlers of those API messages sorry

106
00:04:24,840 --> 00:04:30,940
triggering some sensitive extension API

107
00:04:28,360 --> 00:04:32,830
calls and if this is the case we flag

108
00:04:30,940 --> 00:04:35,210
the extensions are being suspicious and

109
00:04:32,830 --> 00:04:36,318
in the second phase we go manual

110
00:04:35,210 --> 00:04:39,020
we'll review the corner with the

111
00:04:36,319 --> 00:04:41,030
extension and the goal here of course it

112
00:04:39,020 --> 00:04:44,590
is to eliminate false positives because

113
00:04:41,030 --> 00:04:47,599
since we are dealing with JavaScript and

114
00:04:44,590 --> 00:04:49,609
static analysis there are certainly many

115
00:04:47,599 --> 00:04:52,520
false positives so we try to remove all

116
00:04:49,610 --> 00:04:54,770
of those but the goal is of course to

117
00:04:52,520 --> 00:04:59,448
discover if the extension which was

118
00:04:54,770 --> 00:05:02,330
reported as being vulnerable is really

119
00:04:59,449 --> 00:05:05,330
vulnerable to discover what are the APS

120
00:05:02,330 --> 00:05:07,099
that can be exploited and when we

121
00:05:05,330 --> 00:05:08,630
discover that the extension is really

122
00:05:07,099 --> 00:05:10,370
vulnerable we try to construct the

123
00:05:08,630 --> 00:05:12,770
messages that need to be sent by web

124
00:05:10,370 --> 00:05:14,750
applications in order to exploit the

125
00:05:12,770 --> 00:05:17,389
vulnerabilities in extensions and in the

126
00:05:14,750 --> 00:05:18,800
end we mount the attacks meaning that we

127
00:05:17,389 --> 00:05:21,229
install the extension and we try to

128
00:05:18,800 --> 00:05:26,060
exploit all the vulnerabilities in this

129
00:05:21,229 --> 00:05:27,919
extension so those are links that you

130
00:05:26,060 --> 00:05:30,139
can where you can find the tool the

131
00:05:27,919 --> 00:05:33,680
static analysis tool and you can give it

132
00:05:30,139 --> 00:05:37,220
a try so this is a life like let's say

133
00:05:33,680 --> 00:05:39,110
an online version on my website and a

134
00:05:37,220 --> 00:05:41,150
little bit limited compared to the

135
00:05:39,110 --> 00:05:44,060
offline version which you can download

136
00:05:41,150 --> 00:05:47,599
on from develop you only require no

137
00:05:44,060 --> 00:05:50,659
chase in order to run the you know the

138
00:05:47,599 --> 00:05:53,330
analysis against an extension so those

139
00:05:50,659 --> 00:05:56,120
are the results we obtain as you can see

140
00:05:53,330 --> 00:05:58,130
it's around we found around to 200

141
00:05:56,120 --> 00:05:59,780
vulnerable extensions mostly on Chrome

142
00:05:58,130 --> 00:06:02,930
that can be exploited to perform

143
00:05:59,780 --> 00:06:04,789
different actions so this is the number

144
00:06:02,930 --> 00:06:07,940
of all extension that we downloaded and

145
00:06:04,789 --> 00:06:09,590
analyzed but those are the 200 at

146
00:06:07,940 --> 00:06:12,770
extension that can be exploited for

147
00:06:09,590 --> 00:06:14,630
different purpose so the first exploit

148
00:06:12,770 --> 00:06:19,159
that one could mount is that we found

149
00:06:14,630 --> 00:06:22,490
it's some extensions that allow web

150
00:06:19,159 --> 00:06:24,740
application to execute arbitrary code in

151
00:06:22,490 --> 00:06:27,380
the sensitive in the privileged context

152
00:06:24,740 --> 00:06:29,120
of the extension and as you may guess so

153
00:06:27,380 --> 00:06:30,590
if you can execute quote in the context

154
00:06:29,120 --> 00:06:33,050
of the extension if this means that you

155
00:06:30,590 --> 00:06:36,169
can export all the permissions of the

156
00:06:33,050 --> 00:06:38,810
extension and then access any data that

157
00:06:36,169 --> 00:06:41,030
the extension can access from the web

158
00:06:38,810 --> 00:06:42,680
application there are many extension

159
00:06:41,030 --> 00:06:45,349
that also allowed to bypass the same

160
00:06:42,680 --> 00:06:47,180
origin policy as I already said the web

161
00:06:45,349 --> 00:06:47,688
application normally can only access its

162
00:06:47,180 --> 00:06:49,759
own day

163
00:06:47,689 --> 00:06:51,739
ha unless there is there are other

164
00:06:49,759 --> 00:06:53,929
mechanism like course that allows to

165
00:06:51,739 --> 00:06:57,378
access cross origin data but yeah

166
00:06:53,929 --> 00:06:59,388
normally it's only the the application

167
00:06:57,379 --> 00:07:01,999
own data that is accessible but we found

168
00:06:59,389 --> 00:07:04,459
many extensions allowed web application

169
00:07:01,999 --> 00:07:05,989
to access other application data so we

170
00:07:04,459 --> 00:07:07,489
basically go through the extension the

171
00:07:05,989 --> 00:07:09,198
extension fetch the data and then

172
00:07:07,489 --> 00:07:10,638
returns it back to the to the

173
00:07:09,199 --> 00:07:15,319
application which is trying to access

174
00:07:10,639 --> 00:07:18,619
others data the third fret is being able

175
00:07:15,319 --> 00:07:20,300
to read cookies so again here are

176
00:07:18,619 --> 00:07:22,279
basically the same origin policy says

177
00:07:20,300 --> 00:07:24,619
that you cannot read cookies about it at

178
00:07:22,279 --> 00:07:26,029
a website or the web application but

179
00:07:24,619 --> 00:07:28,099
there are extension which are exposing

180
00:07:26,029 --> 00:07:30,349
you all user cookies to any other

181
00:07:28,099 --> 00:07:32,058
application you send a message and the

182
00:07:30,349 --> 00:07:34,308
extension get all the cookies and

183
00:07:32,059 --> 00:07:35,689
returns them back to the attacker and

184
00:07:34,309 --> 00:07:37,309
you can use those cookies to mount

185
00:07:35,689 --> 00:07:39,559
different attacks like session hijacking

186
00:07:37,309 --> 00:07:40,989
attacks oh and also read the user

187
00:07:39,559 --> 00:07:44,149
sensitive information

188
00:07:40,989 --> 00:07:46,578
the other two threats let's say more

189
00:07:44,149 --> 00:07:48,409
related to privacy you cannot read in

190
00:07:46,579 --> 00:07:52,009
being able to read user browsing history

191
00:07:48,409 --> 00:07:54,379
or the bookmarks that you put on the

192
00:07:52,009 --> 00:07:57,019
browser rather code to profile them and

193
00:07:54,379 --> 00:07:59,199
this could be used to for invert iseman

194
00:07:57,019 --> 00:08:01,669
proposition and things like that so

195
00:07:59,199 --> 00:08:03,889
there are also extension that allowed to

196
00:08:01,669 --> 00:08:05,419
get the list of other extension that the

197
00:08:03,889 --> 00:08:08,179
user ARS installed there have been

198
00:08:05,419 --> 00:08:10,429
recent studies that shown that those

199
00:08:08,179 --> 00:08:12,049
this information can be used for

200
00:08:10,429 --> 00:08:20,659
fingerprinting purposes again for

201
00:08:12,050 --> 00:08:22,279
tracking purposes sorry again also the

202
00:08:20,659 --> 00:08:24,860
majority of the extension that we found

203
00:08:22,279 --> 00:08:27,589
actually allowed web application to

204
00:08:24,860 --> 00:08:30,259
store data in the context of extension

205
00:08:27,589 --> 00:08:32,509
and this point is this is also

206
00:08:30,259 --> 00:08:34,519
interesting because as you may know

207
00:08:32,509 --> 00:08:36,529
normally web application can set cookies

208
00:08:34,519 --> 00:08:38,448
in the user browser but the user can go

209
00:08:36,529 --> 00:08:41,318
there and remove those cookies and all

210
00:08:38,448 --> 00:08:43,159
those information but when you do so

211
00:08:41,318 --> 00:08:46,309
information which are stored by

212
00:08:43,159 --> 00:08:47,600
extensions are not affected so if from a

213
00:08:46,309 --> 00:08:49,550
web application you can store

214
00:08:47,600 --> 00:08:52,129
information directly in the context in

215
00:08:49,550 --> 00:08:53,269
the storage of extensions it means that

216
00:08:52,129 --> 00:08:55,009
basically you are sure that this

217
00:08:53,269 --> 00:08:56,750
information will be persisted there and

218
00:08:55,009 --> 00:08:58,430
you can use it for tracking purpose even

219
00:08:56,750 --> 00:09:01,250
though the user removes

220
00:08:58,430 --> 00:09:03,439
the browsing and browsing data and the

221
00:09:01,250 --> 00:09:05,390
last Fred who liked to talk about is the

222
00:09:03,440 --> 00:09:09,530
ability to trigger the downloads of any

223
00:09:05,390 --> 00:09:12,230
software on a user device yeah browser

224
00:09:09,530 --> 00:09:13,640
extensions so we can just send a link of

225
00:09:12,230 --> 00:09:15,680
that the software you want to download

226
00:09:13,640 --> 00:09:17,600
the extension downloads it and saves it

227
00:09:15,680 --> 00:09:19,609
on the user device without the user

228
00:09:17,600 --> 00:09:23,570
knowing or without the user choosing to

229
00:09:19,610 --> 00:09:31,040
do so so now I would like to quickly

230
00:09:23,570 --> 00:09:35,390
give a demo so I have a local web server

231
00:09:31,040 --> 00:09:38,689
running as you can see from the URL here

232
00:09:35,390 --> 00:09:41,060
and then those are actually extensions

233
00:09:38,690 --> 00:09:43,730
Chrome extension that that can be

234
00:09:41,060 --> 00:09:46,160
exploited to access different sensitive

235
00:09:43,730 --> 00:09:49,610
user information but I'm just going to

236
00:09:46,160 --> 00:09:52,219
give a demo with this eerily extension

237
00:09:49,610 --> 00:09:54,470
which is here so you can find this

238
00:09:52,220 --> 00:09:56,930
extensions on the Chrome Web Store it's

239
00:09:54,470 --> 00:10:00,350
here and as you can see it has this

240
00:09:56,930 --> 00:10:02,930
number of users which is quite large as

241
00:10:00,350 --> 00:10:05,180
I said I've installed this extension and

242
00:10:02,930 --> 00:10:08,930
it's only the only extension which is

243
00:10:05,180 --> 00:10:10,819
active and yeah I have also created I'm

244
00:10:08,930 --> 00:10:13,880
an email account just for the purposes

245
00:10:10,820 --> 00:10:18,320
of this of this demo so going back to

246
00:10:13,880 --> 00:10:20,960
the local web page so basically what we

247
00:10:18,320 --> 00:10:23,090
can you one can do from any website so

248
00:10:20,960 --> 00:10:24,680
here I'm in a local host bus from any

249
00:10:23,090 --> 00:10:27,650
web site what you can do is for instance

250
00:10:24,680 --> 00:10:30,890
to read the coop user cookies from other

251
00:10:27,650 --> 00:10:32,990
web sites so if I just click here I get

252
00:10:30,890 --> 00:10:35,270
all the cookies that are set in the user

253
00:10:32,990 --> 00:10:38,150
browser part by all other applications

254
00:10:35,270 --> 00:10:40,939
so Frances if you try to find google.com

255
00:10:38,150 --> 00:10:42,949
yeah you see that all the cookies from

256
00:10:40,940 --> 00:10:45,850
google.com and other domains are the

257
00:10:42,950 --> 00:10:48,590
website that I visited every web site in

258
00:10:45,850 --> 00:10:51,080
where the user is logged in you get all

259
00:10:48,590 --> 00:10:52,520
the cookies here in the local host of

260
00:10:51,080 --> 00:10:56,810
course you can use those cookies to mark

261
00:10:52,520 --> 00:10:58,640
and attack you want but to access

262
00:10:56,810 --> 00:11:00,170
sensitive user information but you don't

263
00:10:58,640 --> 00:11:02,330
need actually to model the attack

264
00:11:00,170 --> 00:11:04,490
because directly you can again using

265
00:11:02,330 --> 00:11:07,820
this extension access any data you want

266
00:11:04,490 --> 00:11:11,650
so from lock the local host I can try to

267
00:11:07,820 --> 00:11:11,650
read the male's of the

268
00:11:11,840 --> 00:11:27,290
to use a gmail account so I just need to

269
00:11:14,770 --> 00:11:30,170
to say so if I do so of course the

270
00:11:27,290 --> 00:11:32,480
internet works at some point I get of

271
00:11:30,170 --> 00:11:35,420
course it's the HTML page of the Gmail

272
00:11:32,480 --> 00:11:37,340
home page HTML content of Gmail home

273
00:11:35,420 --> 00:11:43,370
page and then here i get all the e-mails

274
00:11:37,340 --> 00:11:45,140
i can press and search gmail.com yeah

275
00:11:43,370 --> 00:11:47,800
and then you see that this is the

276
00:11:45,140 --> 00:11:51,319
username that the email of the user and

277
00:11:47,800 --> 00:11:54,560
you can even try to see what is this

278
00:11:51,320 --> 00:11:56,450
email I mean it somewhere here change it

279
00:11:54,560 --> 00:12:01,420
to our Terms of Service or security

280
00:11:56,450 --> 00:12:01,420
alert if I search sorry

281
00:12:08,170 --> 00:12:16,569
so if I search Security Alert I think I

282
00:12:11,200 --> 00:12:18,820
can yeah I mean you get every

283
00:12:16,570 --> 00:12:20,230
information we want from from this email

284
00:12:18,820 --> 00:12:22,210
account you can further use the

285
00:12:20,230 --> 00:12:24,400
different tokens and things that are

286
00:12:22,210 --> 00:12:27,900
there in order to fetch more precise

287
00:12:24,400 --> 00:12:30,220
information about mod precise mails and

288
00:12:27,900 --> 00:12:32,860
basically you can do everything here you

289
00:12:30,220 --> 00:12:35,770
can access Twitter Facebook everything

290
00:12:32,860 --> 00:12:37,750
you want to access from within this this

291
00:12:35,770 --> 00:12:41,110
this webpage if the user has installed

292
00:12:37,750 --> 00:12:43,120
this you rail extensions for instance as

293
00:12:41,110 --> 00:12:45,760
I said there are more extensions but of

294
00:12:43,120 --> 00:12:47,620
course because we don't have much time

295
00:12:45,760 --> 00:12:52,990
I'm just I will just stop here for the

296
00:12:47,620 --> 00:12:55,210
demo going back to the presentation

297
00:12:52,990 --> 00:12:57,130
I've also recorded a few videos that you

298
00:12:55,210 --> 00:12:59,260
can find on my website on how you can

299
00:12:57,130 --> 00:13:01,000
exploit more extensions and some of the

300
00:12:59,260 --> 00:13:04,060
tools and you can find out also more on

301
00:13:01,000 --> 00:13:08,080
in the wood in a paper so just quickly

302
00:13:04,060 --> 00:13:10,390
to give you to say a few words about the

303
00:13:08,080 --> 00:13:12,820
static analysis tool so basically this

304
00:13:10,390 --> 00:13:14,860
is what is produced by the tool when you

305
00:13:12,820 --> 00:13:17,530
and we try to analyze the arel Chrome

306
00:13:14,860 --> 00:13:19,000
extension and you don't need of course

307
00:13:17,530 --> 00:13:22,480
to read it but I just wanted to point

308
00:13:19,000 --> 00:13:24,700
out that basically it's saying that the

309
00:13:22,480 --> 00:13:27,370
extension is allowing web application to

310
00:13:24,700 --> 00:13:30,040
exploit the Ajax API in the in the

311
00:13:27,370 --> 00:13:32,500
extent yeah allowing whether he should

312
00:13:30,040 --> 00:13:34,750
spoil the Ajax API in the application

313
00:13:32,500 --> 00:13:36,580
this is what I've used in order to to

314
00:13:34,750 --> 00:13:39,460
read the Gmail accounts of the user or

315
00:13:36,580 --> 00:13:43,000
the extension is exposing user cookies

316
00:13:39,460 --> 00:13:44,980
somehow and here are the messages that I

317
00:13:43,000 --> 00:13:47,020
sent from the local host in order to get

318
00:13:44,980 --> 00:13:48,730
the cookies you just post message and

319
00:13:47,020 --> 00:13:51,370
then you send this and you get all the

320
00:13:48,730 --> 00:13:52,870
cookies back from the extension and what

321
00:13:51,370 --> 00:13:55,000
you want to really use a gmail you just

322
00:13:52,870 --> 00:13:56,770
put here you the URL or you can change

323
00:13:55,000 --> 00:13:58,690
this to Twitter Facebook any other

324
00:13:56,770 --> 00:14:00,610
account that you want to access and then

325
00:13:58,690 --> 00:14:02,710
the extension will fetch the the

326
00:14:00,610 --> 00:14:08,230
information from that URL and get site

327
00:14:02,710 --> 00:14:11,620
back to you reported those findings to

328
00:14:08,230 --> 00:14:12,970
the vendors Firefox and opera like you

329
00:14:11,620 --> 00:14:14,980
already removed the

330
00:14:12,970 --> 00:14:16,870
neural extensions chrome said are they

331
00:14:14,980 --> 00:14:18,639
planning to work on those vulnerable

332
00:14:16,870 --> 00:14:19,930
extensions so this means that the

333
00:14:18,639 --> 00:14:21,910
extensions are still there as you may

334
00:14:19,930 --> 00:14:23,439
you have seen difference in the array of

335
00:14:21,910 --> 00:14:25,750
Chrome extensions so as a disclaimer

336
00:14:23,439 --> 00:14:27,069
please don't use those exploit against

337
00:14:25,750 --> 00:14:28,720
your friends or people that you know

338
00:14:27,069 --> 00:14:34,240
that have installed those vulnerable

339
00:14:28,720 --> 00:14:37,029
extensions this work also got some an

340
00:14:34,240 --> 00:14:39,040
important media coverage for in

341
00:14:37,029 --> 00:14:41,259
something far more than hundred links

342
00:14:39,040 --> 00:14:43,529
and website talking about it and it also

343
00:14:41,259 --> 00:14:47,740
triggers a discussion in the community

344
00:14:43,529 --> 00:14:52,029
specifically on Twitter as mitigations

345
00:14:47,740 --> 00:14:54,100
with we think that a quick fix may be to

346
00:14:52,029 --> 00:14:56,350
review more rigorously browser

347
00:14:54,100 --> 00:14:58,420
extensions take into consideration the

348
00:14:56,350 --> 00:15:00,100
message passing API and the

349
00:14:58,420 --> 00:15:04,060
vulnerabilities that could be exploited

350
00:15:00,100 --> 00:15:05,980
from web applications and we think that

351
00:15:04,060 --> 00:15:08,138
static analysis tool like ours could

352
00:15:05,980 --> 00:15:10,389
help definitely in order to try to

353
00:15:08,139 --> 00:15:13,660
detect those those inner abilities and

354
00:15:10,389 --> 00:15:15,670
this especially true for extension

355
00:15:13,660 --> 00:15:17,740
developers that want to check whether

356
00:15:15,670 --> 00:15:21,339
their their extensions are vulnerable to

357
00:15:17,740 --> 00:15:23,920
some of those those yeah those exploits

358
00:15:21,339 --> 00:15:26,079
and you can use the tools check check

359
00:15:23,920 --> 00:15:27,849
the extension against it and then if you

360
00:15:26,079 --> 00:15:31,029
find those vulnerabilities try to fix

361
00:15:27,850 --> 00:15:33,790
them before publishing the extension we

362
00:15:31,029 --> 00:15:36,870
also think that we need course browser

363
00:15:33,790 --> 00:15:40,719
tools like analyzing these extensions

364
00:15:36,870 --> 00:15:42,910
this is true because the the web web

365
00:15:40,720 --> 00:15:45,069
extension API is compatible with Chrome

366
00:15:42,910 --> 00:15:47,259
Firefox and opera so usually people

367
00:15:45,069 --> 00:15:51,399
publish the extensions on those three

368
00:15:47,259 --> 00:15:53,920
website browsers so if we have cross

369
00:15:51,399 --> 00:15:55,959
browser tools so we can we could find

370
00:15:53,920 --> 00:15:59,279
easily find the same vulnerable

371
00:15:55,959 --> 00:16:01,300
extension in those different browsers a

372
00:15:59,279 --> 00:16:03,129
fix could be also to change the

373
00:16:01,300 --> 00:16:05,050
extension system as we know it now like

374
00:16:03,129 --> 00:16:08,529
if having a fine-grained permission

375
00:16:05,050 --> 00:16:11,800
system could also help or could also

376
00:16:08,529 --> 00:16:13,449
help to detect suspicious exchange

377
00:16:11,800 --> 00:16:16,449
between web application and extensions

378
00:16:13,449 --> 00:16:18,339
and block them and as future work we are

379
00:16:16,449 --> 00:16:20,769
already exploring more security and

380
00:16:18,339 --> 00:16:22,339
privacy threats with a goal to have to

381
00:16:20,769 --> 00:16:25,610
make proposal in order to make

382
00:16:22,339 --> 00:16:27,829
sentience more trustworthy to conclude

383
00:16:25,610 --> 00:16:30,319
in this talk assume that a venerable

384
00:16:27,829 --> 00:16:33,050
extensions can be exploited specifically

385
00:16:30,319 --> 00:16:36,769
for the message-passing API in order to

386
00:16:33,050 --> 00:16:38,809
perform sensitive actions and this

387
00:16:36,769 --> 00:16:40,550
includes readings sensitive user

388
00:16:38,809 --> 00:16:42,769
information and executing malicious

389
00:16:40,550 --> 00:16:45,349
causing a context of the extensions for

390
00:16:42,769 --> 00:16:47,209
instance and we definitely need tools

391
00:16:45,350 --> 00:16:48,949
and methods that to find those

392
00:16:47,209 --> 00:16:50,959
vulnerabilities in like in extensions

393
00:16:48,949 --> 00:16:53,660
and I think that static analysis tools

394
00:16:50,959 --> 00:16:56,660
can help or changing changes in the

395
00:16:53,660 --> 00:16:58,309
extension system itself and of course we

396
00:16:56,660 --> 00:17:00,589
need more work in browser extensions

397
00:16:58,309 --> 00:17:02,899
security in order to try to uncover more

398
00:17:00,589 --> 00:17:07,010
vulnerabilities and more threats and

399
00:17:02,899 --> 00:17:10,549
also mitigate them so I would like to

400
00:17:07,010 --> 00:17:14,240
thank tu the Technical University of

401
00:17:10,549 --> 00:17:17,560
Vienna who supported my my trip to San

402
00:17:14,240 --> 00:17:21,300
Francisco thank you

403
00:17:17,560 --> 00:17:21,300
[Applause]

404
00:17:24,329 --> 00:17:27,550
same spiel as before if you have a

405
00:17:26,470 --> 00:17:29,559
question please line up at the

406
00:17:27,550 --> 00:17:36,309
microphone in the middle state your name

407
00:17:29,559 --> 00:17:40,720
and affiliation and ask questions hi

408
00:17:36,309 --> 00:17:43,149
Emily Stark from crumb um are you

409
00:17:40,720 --> 00:17:47,620
familiar with manifest v3 I was

410
00:17:43,150 --> 00:17:49,780
wondering it's it's a new proposal for

411
00:17:47,620 --> 00:17:51,100
the extension system in chrome and I was

412
00:17:49,780 --> 00:17:53,139
wondering if you had looked at it and

413
00:17:51,100 --> 00:17:57,129
what are your techniques apply there as

414
00:17:53,140 --> 00:17:59,260
well so this was actually at some point

415
00:17:57,130 --> 00:18:02,020
one of the questions on Twitter people

416
00:17:59,260 --> 00:18:03,280
was wondering if this worked didn't this

417
00:18:02,020 --> 00:18:06,100
work have done and they didn't trigger

418
00:18:03,280 --> 00:18:08,110
some of the changes on this manifest in

419
00:18:06,100 --> 00:18:10,719
version 3 so I've read quickly through

420
00:18:08,110 --> 00:18:13,360
some of the changes because I have

421
00:18:10,720 --> 00:18:15,970
another work on a part of an another

422
00:18:13,360 --> 00:18:17,379
vulnerability venerability but security

423
00:18:15,970 --> 00:18:20,830
issue also but this one has been

424
00:18:17,380 --> 00:18:24,400
considered already in manifest three but

425
00:18:20,830 --> 00:18:25,689
this one not not yet because I mean the

426
00:18:24,400 --> 00:18:27,309
vulnerable extensions are still there

427
00:18:25,690 --> 00:18:30,010
and those communication are still

428
00:18:27,309 --> 00:18:32,970
allowed maybe you can take you can tell

429
00:18:30,010 --> 00:18:32,970
more of like

430
00:18:39,340 --> 00:18:43,639
and I thought we would get a question

431
00:18:41,630 --> 00:18:46,250
back there in the meantime let me ask

432
00:18:43,640 --> 00:18:47,960
another one so browser extensions have

433
00:18:46,250 --> 00:18:51,470
been at the the focus of many analyses

434
00:18:47,960 --> 00:18:53,780
over the past 10 years what makes you

435
00:18:51,470 --> 00:18:55,700
are so much more performant or fine what

436
00:18:53,780 --> 00:18:57,440
makes yours find many more of these

437
00:18:55,700 --> 00:18:59,120
problems that we so far couldn't find

438
00:18:57,440 --> 00:19:07,220
what's the secret sauce in your

439
00:18:59,120 --> 00:19:09,020
announcement I don't how to say this

440
00:19:07,220 --> 00:19:11,120
this study actually has gone for a long

441
00:19:09,020 --> 00:19:14,180
very very long process because it's took

442
00:19:11,120 --> 00:19:16,280
a very long time for me just to improve

443
00:19:14,180 --> 00:19:19,910
the static analysis tool first and also

444
00:19:16,280 --> 00:19:22,190
I mean I didn't talk about the number of

445
00:19:19,910 --> 00:19:25,730
extension that I've manually reviewed

446
00:19:22,190 --> 00:19:28,070
but around 4,000 of course it's a lot

447
00:19:25,730 --> 00:19:30,140
but I mean I took time some of them

448
00:19:28,070 --> 00:19:33,260
trivial I could just say okay this is a

449
00:19:30,140 --> 00:19:34,850
false positive but anyway the process

450
00:19:33,260 --> 00:19:37,129
was very long I took the time in order

451
00:19:34,850 --> 00:19:41,659
to yeah to find out all those extensions

452
00:19:37,130 --> 00:19:44,720
yeah there are no further questions

453
00:19:41,660 --> 00:19:49,039
let's thank our speaker once again

454
00:19:44,720 --> 00:19:49,039
[Applause]

