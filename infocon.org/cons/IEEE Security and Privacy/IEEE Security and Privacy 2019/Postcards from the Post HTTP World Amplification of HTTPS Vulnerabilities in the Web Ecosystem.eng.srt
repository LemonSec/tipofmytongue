1
00:00:08,910 --> 00:00:12,259
okay so this

2
00:00:10,820 --> 00:00:14,420
joint work with a record of Accardi

3
00:00:12,259 --> 00:00:18,529
Matos namitha visitability

4
00:00:14,420 --> 00:00:21,500
marco square Gino so as you all know

5
00:00:18,529 --> 00:00:23,480
HTTP is a protocol which is not secure

6
00:00:21,500 --> 00:00:25,520
doesn't provide any level of secure

7
00:00:23,480 --> 00:00:28,039
security in terms of confidentiality in

8
00:00:25,520 --> 00:00:31,119
terms of integrity but luckily it is

9
00:00:28,039 --> 00:00:33,949
going to be replaced really soon by

10
00:00:31,119 --> 00:00:35,660
HTTPS so we observe a major increase in

11
00:00:33,949 --> 00:00:37,849
the adoption of HTTPS in the last few

12
00:00:35,660 --> 00:00:40,040
years and were several is not from this

13
00:00:37,850 --> 00:00:41,360
one of the reason is that now it is very

14
00:00:40,040 --> 00:00:43,309
easy to get access to trusted

15
00:00:41,360 --> 00:00:45,379
certificate thanks to authorities like

16
00:00:43,309 --> 00:00:47,570
let's encrypt and when we observe that

17
00:00:45,379 --> 00:00:50,960
major web browser certainly pushing for

18
00:00:47,570 --> 00:00:53,719
a better HTTPS adoption by marking HTTPS

19
00:00:50,960 --> 00:00:56,600
insecure directly in in the address bar

20
00:00:53,719 --> 00:00:58,160
and based on data from Mozilla we

21
00:00:56,600 --> 00:01:01,190
observed that the amount of web traffic

22
00:00:58,160 --> 00:01:02,870
which is encrypting now is higher than

23
00:01:01,190 --> 00:01:05,089
the amount of web traffic which is not

24
00:01:02,870 --> 00:01:07,759
encrypted so this means basically that

25
00:01:05,089 --> 00:01:12,170
we can be happy to safely use Wi-Fi

26
00:01:07,759 --> 00:01:13,670
everywhere at the base of its work web

27
00:01:12,170 --> 00:01:16,580
this question can we really trust the

28
00:01:13,670 --> 00:01:19,040
CPS and the reason behind this is that

29
00:01:16,580 --> 00:01:21,350
of course it's CPS is much better than

30
00:01:19,040 --> 00:01:23,030
HTTP but there are plenty of attacks

31
00:01:21,350 --> 00:01:24,770
which have been published against TLS

32
00:01:23,030 --> 00:01:27,259
which is the cryptographic protocol

33
00:01:24,770 --> 00:01:29,030
behind the security of HTTPS you can see

34
00:01:27,259 --> 00:01:32,210
you can see a few logos of in family

35
00:01:29,030 --> 00:01:35,630
attacks against TLS in this image slide

36
00:01:32,210 --> 00:01:37,880
as you can see we have attacks like

37
00:01:35,630 --> 00:01:40,009
drown a robot which operates

38
00:01:37,880 --> 00:01:41,990
thanks to cryptographic weaknesses in

39
00:01:40,009 --> 00:01:44,329
implementation and when we have nasty

40
00:01:41,990 --> 00:01:47,960
bugs like heartbleed which can reveal

41
00:01:44,329 --> 00:01:49,490
cryptographic keys and all these attacks

42
00:01:47,960 --> 00:01:53,419
can completely compromise the security

43
00:01:49,490 --> 00:01:55,250
of HCPs and you might think that visit

44
00:01:53,420 --> 00:01:57,920
acts are so severe that we have been

45
00:01:55,250 --> 00:02:01,490
fixed on major website so we should not

46
00:01:57,920 --> 00:02:03,619
care about these attacks anymore but our

47
00:02:01,490 --> 00:02:05,270
observation here is that the web is a

48
00:02:03,619 --> 00:02:07,850
very complicated and interconnected

49
00:02:05,270 --> 00:02:10,038
ecosystem and the security of a website

50
00:02:07,850 --> 00:02:13,220
is actually a function of the security

51
00:02:10,038 --> 00:02:15,109
of many other website in particular what

52
00:02:13,220 --> 00:02:17,930
will service that TLS vulnerabilities

53
00:02:15,110 --> 00:02:19,970
get amplified in the web ecosystem you

54
00:02:17,930 --> 00:02:22,580
can see a picture here which we built

55
00:02:19,970 --> 00:02:25,130
from using our analysis tool

56
00:02:22,580 --> 00:02:27,950
so this is actually a picture of a real

57
00:02:25,130 --> 00:02:30,560
website you can see in the center of the

58
00:02:27,950 --> 00:02:33,109
picture we have a gray circle which is

59
00:02:30,560 --> 00:02:35,420
the main site but you can see that this

60
00:02:33,110 --> 00:02:37,160
site is loading content from any other

61
00:02:35,420 --> 00:02:40,790
different toasts which are the white

62
00:02:37,160 --> 00:02:42,950
circles in the in the picture also the

63
00:02:40,790 --> 00:02:44,959
security of the website depends on the

64
00:02:42,950 --> 00:02:46,369
security of its subdomains in particular

65
00:02:44,960 --> 00:02:48,260
when it comes to authentication

66
00:02:46,370 --> 00:02:51,680
credential like cookies and these are

67
00:02:48,260 --> 00:02:53,209
the grey circles in the picture you can

68
00:02:51,680 --> 00:02:55,220
see but is a very complicated ecosystem

69
00:02:53,210 --> 00:02:57,950
a lot of inclusion so the main site is

70
00:02:55,220 --> 00:03:00,710
loading from any other faust and the

71
00:02:57,950 --> 00:03:03,589
strife lost are a host which are which

72
00:03:00,710 --> 00:03:05,090
suffer from some TLS vulnerability so

73
00:03:03,590 --> 00:03:06,830
you can see in this case we have a

74
00:03:05,090 --> 00:03:08,180
website which is apparently secure it

75
00:03:06,830 --> 00:03:10,160
doesn't suffer from any TLS

76
00:03:08,180 --> 00:03:11,930
vulnerability but since it load stuff

77
00:03:10,160 --> 00:03:15,590
from other web sites which are broken

78
00:03:11,930 --> 00:03:17,900
it is a mentally compromised so what we

79
00:03:15,590 --> 00:03:20,090
did in our work was to take a systematic

80
00:03:17,900 --> 00:03:23,180
look of this class of problems so what

81
00:03:20,090 --> 00:03:25,940
we did is first of all reviewing most of

82
00:03:23,180 --> 00:03:27,890
the existing attacks against TLS we

83
00:03:25,940 --> 00:03:30,770
identify those with still work in modern

84
00:03:27,890 --> 00:03:33,380
clients through modern browsers and we

85
00:03:30,770 --> 00:03:35,630
characterize these attacks in terms of

86
00:03:33,380 --> 00:03:37,100
attack trees we define very precisely

87
00:03:35,630 --> 00:03:39,769
the condition which are needed for the

88
00:03:37,100 --> 00:03:42,829
talk to work after were defining these

89
00:03:39,770 --> 00:03:44,480
attacks we build a tool which is an

90
00:03:42,830 --> 00:03:46,580
analogous platform for web application

91
00:03:44,480 --> 00:03:49,310
and idea of the tool is what the tool

92
00:03:46,580 --> 00:03:51,050
collects data for a bunch of relevant

93
00:03:49,310 --> 00:03:53,630
toasts it will be clear what I mean

94
00:03:51,050 --> 00:03:56,840
later but as you can already see from

95
00:03:53,630 --> 00:03:58,700
the previous slide the security of our

96
00:03:56,840 --> 00:04:00,140
website depends on many other hosts from

97
00:03:58,700 --> 00:04:03,200
which contents are loaded for instance

98
00:04:00,140 --> 00:04:05,480
and when we use existing tools to

99
00:04:03,200 --> 00:04:08,238
analyze this other host and build the

100
00:04:05,480 --> 00:04:09,738
security report we use a word platform

101
00:04:08,239 --> 00:04:11,930
to carry out a large-scale analysis of

102
00:04:09,739 --> 00:04:14,180
the web and we focus in particular on

103
00:04:11,930 --> 00:04:15,890
three different aspects we focus on page

104
00:04:14,180 --> 00:04:17,570
integrity so the possibility for an

105
00:04:15,890 --> 00:04:20,149
attacker to engender content in the page

106
00:04:17,570 --> 00:04:21,409
and in particular script when we focus

107
00:04:20,149 --> 00:04:23,239
on the security of authentication

108
00:04:21,410 --> 00:04:25,280
credentials and they will discuss in

109
00:04:23,240 --> 00:04:27,140
particular cookies and then we will

110
00:04:25,280 --> 00:04:29,030
reason about the security implication of

111
00:04:27,140 --> 00:04:31,099
web tracking and broken TLS

112
00:04:29,030 --> 00:04:34,250
implementation in what popular web

113
00:04:31,100 --> 00:04:35,870
trackers to sum up I can say that this

114
00:04:34,250 --> 00:04:38,330
is the first quantitative analysis

115
00:04:35,870 --> 00:04:43,580
of the impact of TLS vulnerabilities on

116
00:04:38,330 --> 00:04:45,830
web application of security this is the

117
00:04:43,580 --> 00:04:48,800
first contribution of our work so we

118
00:04:45,830 --> 00:04:50,659
start by reviewing known attacks against

119
00:04:48,800 --> 00:04:52,850
TLS and we characterize these attacks

120
00:04:50,660 --> 00:04:54,560
using attack trees we serve roughly

121
00:04:52,850 --> 00:04:56,990
boolean formulas which can be used to

122
00:04:54,560 --> 00:04:58,880
express attack condition you can see an

123
00:04:56,990 --> 00:05:00,890
example of a simple attack tree in the

124
00:04:58,880 --> 00:05:02,240
right part of the slide so let's assume

125
00:05:00,890 --> 00:05:03,890
that the goal of the tucker is learning

126
00:05:02,240 --> 00:05:05,420
the session key so that the attacker it

127
00:05:03,890 --> 00:05:07,940
might be able to eventually decrypt the

128
00:05:05,420 --> 00:05:10,490
traffic this is possible if the attacker

129
00:05:07,940 --> 00:05:12,920
is able to decrypt the RSA key exchange

130
00:05:10,490 --> 00:05:15,350
offline which in turn is again possible

131
00:05:12,920 --> 00:05:18,020
if it two conditions are true the first

132
00:05:15,350 --> 00:05:20,600
condition is that an RSA key exchange is

133
00:05:18,020 --> 00:05:23,930
used and this is only possible if either

134
00:05:20,600 --> 00:05:25,790
RSA using the is the TLS version or it

135
00:05:23,930 --> 00:05:28,820
is possible to force a downgraded

136
00:05:25,790 --> 00:05:31,370
Vitelli version which prefers RSA and

137
00:05:28,820 --> 00:05:33,950
the second condition which must be true

138
00:05:31,370 --> 00:05:36,110
for the ductwork is that there is an NSA

139
00:05:33,950 --> 00:05:38,780
decryption Oracle which is available on

140
00:05:36,110 --> 00:05:41,570
the target toast or on a host with the

141
00:05:38,780 --> 00:05:46,070
same certificate or on an Oscar with the

142
00:05:41,570 --> 00:05:48,500
same public RSA key we develop this kind

143
00:05:46,070 --> 00:05:50,150
of attack trees and by building on top

144
00:05:48,500 --> 00:05:52,760
of that we characterize a family of

145
00:05:50,150 --> 00:05:54,590
insecure channels so we have channels

146
00:05:52,760 --> 00:05:57,500
which are tainted which means in

147
00:05:54,590 --> 00:05:58,669
particular that with channels suffer

148
00:05:57,500 --> 00:06:01,010
from confidentiality and integrity

149
00:05:58,670 --> 00:06:02,960
issues which might allow the attacker to

150
00:06:01,010 --> 00:06:04,520
run many in the middle attacks so to bin

151
00:06:02,960 --> 00:06:06,830
in the middle of the communication and

152
00:06:04,520 --> 00:06:09,469
read modify everything which is sent to

153
00:06:06,830 --> 00:06:13,280
despite the use of HTTP when we have a

154
00:06:09,470 --> 00:06:15,980
leaky channels which are not let's say

155
00:06:13,280 --> 00:06:17,510
as broken as to allow many the middle

156
00:06:15,980 --> 00:06:19,070
attacks but still allow decryption

157
00:06:17,510 --> 00:06:21,080
so if something is sent where the

158
00:06:19,070 --> 00:06:23,420
attacker might be able to recover the

159
00:06:21,080 --> 00:06:25,789
content at some point and then we have a

160
00:06:23,420 --> 00:06:28,100
class of partially leaky channels which

161
00:06:25,790 --> 00:06:30,200
are channel which suffer from sides a no

162
00:06:28,100 --> 00:06:32,030
sooner abilities which means that you

163
00:06:30,200 --> 00:06:34,159
can leak secret the sent over the table

164
00:06:32,030 --> 00:06:36,890
over the channel for instance what one

165
00:06:34,160 --> 00:06:38,480
bit at a time so if a same secret sent

166
00:06:36,890 --> 00:06:39,800
over the tunnel multiple times you might

167
00:06:38,480 --> 00:06:43,370
be able to actually try to the full

168
00:06:39,800 --> 00:06:45,560
secret by using the side channel this is

169
00:06:43,370 --> 00:06:47,510
a useful abstraction layer which we use

170
00:06:45,560 --> 00:06:48,490
to reason about security issues in what

171
00:06:47,510 --> 00:06:50,560
network applications

172
00:06:48,490 --> 00:06:52,990
we don't care on why our channel is

173
00:06:50,560 --> 00:06:55,419
broken but we try to reason on what

174
00:06:52,990 --> 00:06:56,830
happens when the channel is broken if

175
00:06:55,419 --> 00:06:58,659
you are interested in this part of the

176
00:06:56,830 --> 00:07:08,139
work you can see the paper for food

177
00:06:58,660 --> 00:07:10,330
details this is our methodology the idea

178
00:07:08,139 --> 00:07:13,030
is that we access the website we want

179
00:07:10,330 --> 00:07:14,650
analyzed using Atlas Chrome we collect a

180
00:07:13,030 --> 00:07:16,750
bunch of information including the

181
00:07:14,650 --> 00:07:19,630
sterilized dome of the page cookies and

182
00:07:16,750 --> 00:07:23,650
holy oath which serve the sub resources

183
00:07:19,630 --> 00:07:25,990
to the page like script images etc with

184
00:07:23,650 --> 00:07:28,780
a non subdomain enumeration on the main

185
00:07:25,990 --> 00:07:30,099
website to find other security relevant

186
00:07:28,780 --> 00:07:32,500
hosts which are important for our

187
00:07:30,099 --> 00:07:34,719
analysis and after collecting all this

188
00:07:32,500 --> 00:07:37,630
information we run existent Els analysis

189
00:07:34,720 --> 00:07:39,880
tools on the collected host we map the

190
00:07:37,630 --> 00:07:41,770
output of such tools to the condition of

191
00:07:39,880 --> 00:07:43,659
the tag trees so we are able to identify

192
00:07:41,770 --> 00:07:45,159
the presence of leakage channels tainted

193
00:07:43,659 --> 00:07:47,530
channels and partially decayed channels

194
00:07:45,159 --> 00:07:49,840
where and we use all this information to

195
00:07:47,530 --> 00:07:52,150
build a security report what is

196
00:07:49,840 --> 00:07:54,369
interesting my opinion is that now we're

197
00:07:52,150 --> 00:07:56,530
on Elizabeth with scan tank a website

198
00:07:54,370 --> 00:07:59,919
from Alexa and we eventually added to

199
00:07:56,530 --> 00:08:01,599
scan more than 100k hosts so it means

200
00:07:59,919 --> 00:08:03,880
that indeed there is an amplification of

201
00:08:01,599 --> 00:08:05,590
the textual face against this website we

202
00:08:03,880 --> 00:08:11,590
want analyze 10k but we haven't only

203
00:08:05,590 --> 00:08:14,020
analyzed more than 100 chaos these are a

204
00:08:11,590 --> 00:08:15,969
few premium statistics so we were able

205
00:08:14,020 --> 00:08:18,639
to find the telephony liabilities in

206
00:08:15,969 --> 00:08:21,699
more than five chaos which is roughly

207
00:08:18,639 --> 00:08:23,229
the 5% of our data set you can see the

208
00:08:21,699 --> 00:08:25,389
breakdown in the table you can see that

209
00:08:23,229 --> 00:08:27,550
change change painted saunas are the

210
00:08:25,389 --> 00:08:28,900
most represented here but you can also

211
00:08:27,550 --> 00:08:31,810
find a presence of liquid channel

212
00:08:28,900 --> 00:08:33,458
partially channel you can say that with

213
00:08:31,810 --> 00:08:35,078
number somewhat concerning but they

214
00:08:33,458 --> 00:08:37,029
don't tell much about web application

215
00:08:35,078 --> 00:08:38,949
security and the impact of this number

216
00:08:37,029 --> 00:08:43,270
application security is actually the

217
00:08:38,950 --> 00:08:45,010
main contribution of our board so let me

218
00:08:43,270 --> 00:08:46,720
start by discussing the first issue

219
00:08:45,010 --> 00:08:49,779
which we analyzed in detail in our paper

220
00:08:46,720 --> 00:08:51,130
which the problem of page integrity so

221
00:08:49,779 --> 00:08:53,380
let's assume we have a web page and

222
00:08:51,130 --> 00:08:55,600
which web page load the JavaScript from

223
00:08:53,380 --> 00:08:57,310
two different hosts the first host is

224
00:08:55,600 --> 00:08:59,110
fine but the second dose is broken

225
00:08:57,310 --> 00:09:01,060
because it suffers from a TLS

226
00:08:59,110 --> 00:09:01,810
vulnerability which allow the attacker

227
00:09:01,060 --> 00:09:04,329
tuned in

228
00:09:01,810 --> 00:09:07,150
content over the channel what were

229
00:09:04,330 --> 00:09:09,730
serving practice is that around the 900

230
00:09:07,150 --> 00:09:11,829
webpages are at the danger of script

231
00:09:09,730 --> 00:09:14,140
injection due to the presence of tainted

232
00:09:11,830 --> 00:09:16,450
channels and what I find interesting in

233
00:09:14,140 --> 00:09:18,610
particular is that in the large majority

234
00:09:16,450 --> 00:09:20,920
of cases the problem is not on the

235
00:09:18,610 --> 00:09:23,920
homepage itself but the problem is due

236
00:09:20,920 --> 00:09:25,719
to the inclusion of scripts over tender

237
00:09:23,920 --> 00:09:28,029
channels so it means that but they are

238
00:09:25,720 --> 00:09:29,350
the main host is fine but it loads stuff

239
00:09:28,029 --> 00:09:32,560
from other hosts which are actually

240
00:09:29,350 --> 00:09:36,610
broken and this is the case for the 75%

241
00:09:32,560 --> 00:09:38,680
of the website we analyzed we can

242
00:09:36,610 --> 00:09:40,420
impress upon defend against miss attacks

243
00:09:38,680 --> 00:09:42,130
by using sub resource integrity because

244
00:09:40,420 --> 00:09:44,829
you can provide a national descriptor

245
00:09:42,130 --> 00:09:46,930
for the browser to check but whatever

246
00:09:44,830 --> 00:09:49,540
serving practice is that at the moment

247
00:09:46,930 --> 00:09:51,729
the adoption of SLI is really

248
00:09:49,540 --> 00:09:54,339
ineffective Azariah is not really used

249
00:09:51,730 --> 00:09:56,860
on many website and even websites which

250
00:09:54,339 --> 00:09:58,779
make use of as I do not actually patch

251
00:09:56,860 --> 00:10:02,260
all the possible channels for content

252
00:09:58,779 --> 00:10:04,420
inclusion another interesting takeaway

253
00:10:02,260 --> 00:10:06,490
from this part of the analysis is that

254
00:10:04,420 --> 00:10:08,770
there are a few popular scriptura

255
00:10:06,490 --> 00:10:10,690
provider which lead to a vulnerability

256
00:10:08,770 --> 00:10:12,339
amplification because many websites load

257
00:10:10,690 --> 00:10:15,760
the content from this script provider

258
00:10:12,339 --> 00:10:17,410
but we script providers are broken here

259
00:10:15,760 --> 00:10:19,510
you have a couple of examples you can

260
00:10:17,410 --> 00:10:21,069
see that around the 200 home pages are

261
00:10:19,510 --> 00:10:23,050
broken by the inclusion of scripts

262
00:10:21,070 --> 00:10:25,810
served by a vulnerable hosts of Baidu

263
00:10:23,050 --> 00:10:28,030
and we have more than 100 home pages

264
00:10:25,810 --> 00:10:32,920
which include content from a vulnerable

265
00:10:28,030 --> 00:10:35,800
host unbinding Kadeem a second aspect

266
00:10:32,920 --> 00:10:38,500
when allies is the use of cookies

267
00:10:35,800 --> 00:10:40,270
cookies are the cornerstone of client

268
00:10:38,500 --> 00:10:42,970
authentication of the web where a

269
00:10:40,270 --> 00:10:44,890
security critical component they can be

270
00:10:42,970 --> 00:10:47,380
set as a first only which means that the

271
00:10:44,890 --> 00:10:49,390
host will set the cookie for itself but

272
00:10:47,380 --> 00:10:50,890
most of the times who Jesus set as

273
00:10:49,390 --> 00:10:54,100
domain cookies which means that were

274
00:10:50,890 --> 00:10:57,459
shared across different subdomains the

275
00:10:54,100 --> 00:10:58,839
application of this choice is that the

276
00:10:57,459 --> 00:11:01,089
attack surface against cookies is

277
00:10:58,839 --> 00:11:02,950
particularly large there are several

278
00:11:01,089 --> 00:11:04,990
tricky consideration to be done when it

279
00:11:02,950 --> 00:11:06,880
comes to cookies in terms of

280
00:11:04,990 --> 00:11:08,950
confidentiality we have to be careful

281
00:11:06,880 --> 00:11:10,420
about which domain sharing because it

282
00:11:08,950 --> 00:11:13,450
means that if a Cook is shared between

283
00:11:10,420 --> 00:11:14,800
multiple subdomains a vulnerability of a

284
00:11:13,450 --> 00:11:16,300
single subdomain might be

285
00:11:14,800 --> 00:11:18,219
enough for the attacker to disclose the

286
00:11:16,300 --> 00:11:19,540
cookie value and if the tackle exposes

287
00:11:18,220 --> 00:11:21,910
the cookie value it might be eventually

288
00:11:19,540 --> 00:11:25,719
able to impersonate the victim which is

289
00:11:21,910 --> 00:11:28,269
the owner of the cookie then since

290
00:11:25,720 --> 00:11:28,690
cookies can be forced to be sent by the

291
00:11:28,269 --> 00:11:32,500
attacker

292
00:11:28,690 --> 00:11:35,230
by forging HTTP traffic it means that

293
00:11:32,500 --> 00:11:36,760
four exfiltrating cookie partially

294
00:11:35,230 --> 00:11:38,200
leakage analysts are good enough so the

295
00:11:36,760 --> 00:11:40,269
attacker can use with simple set

296
00:11:38,200 --> 00:11:43,149
channels to leak a cookie values by

297
00:11:40,269 --> 00:11:44,500
forcing a lot of web traffic so cookies

298
00:11:43,149 --> 00:11:47,440
are particularly vulnerable in this

299
00:11:44,500 --> 00:11:49,510
respect and it is also possible for the

300
00:11:47,440 --> 00:11:52,029
attacker to steal cookies by injecting

301
00:11:49,510 --> 00:11:54,399
script inside pages because scripts can

302
00:11:52,029 --> 00:11:56,410
normally be accessed can normally access

303
00:11:54,399 --> 00:11:58,420
cookies unless with cookies are marked

304
00:11:56,410 --> 00:12:00,250
with the HT poly attribute so the

305
00:11:58,420 --> 00:12:04,689
texture face against cookies is

306
00:12:00,250 --> 00:12:06,610
particularly high and similar

307
00:12:04,690 --> 00:12:11,380
consideration applies to integrity

308
00:12:06,610 --> 00:12:13,660
because also in the case of of integrity

309
00:12:11,380 --> 00:12:16,720
consideration the subdomains can set

310
00:12:13,660 --> 00:12:19,360
cookies for the main website and it is

311
00:12:16,720 --> 00:12:21,490
possible to mitigate this issue by using

312
00:12:19,360 --> 00:12:23,230
the house prefix which forces cookie to

313
00:12:21,490 --> 00:12:25,990
be set without the domain attribute so

314
00:12:23,230 --> 00:12:27,850
without any formal domain sharing but as

315
00:12:25,990 --> 00:12:31,810
we will see this is not very commonly

316
00:12:27,850 --> 00:12:33,579
used in the web at a time being these

317
00:12:31,810 --> 00:12:35,890
are a few numbers so you can see the

318
00:12:33,579 --> 00:12:38,050
percentage of cookies on which we were

319
00:12:35,890 --> 00:12:39,910
able to find a confidentiality or

320
00:12:38,050 --> 00:12:40,479
integrity issue due to the presence of

321
00:12:39,910 --> 00:12:43,329
some

322
00:12:40,480 --> 00:12:46,029
TLS vulnerability as you can see from

323
00:12:43,329 --> 00:12:47,709
the table the attack surface against

324
00:12:46,029 --> 00:12:50,140
domain cookies is much larger than

325
00:12:47,709 --> 00:12:51,339
forest only cookies as I said since the

326
00:12:50,140 --> 00:12:53,770
main cookies are shared between multiple

327
00:12:51,339 --> 00:12:56,560
hosts it is much easier to attack them

328
00:12:53,770 --> 00:12:58,390
so we find a roughly double the number

329
00:12:56,560 --> 00:13:02,170
of vulnerable cookies if we just focus

330
00:12:58,390 --> 00:13:05,020
on represented and in particular we

331
00:13:02,170 --> 00:13:07,779
observed that for more than 400 website

332
00:13:05,020 --> 00:13:10,390
it is all the session cookies a below

333
00:13:07,779 --> 00:13:12,449
confidentiality so it means we use some

334
00:13:10,390 --> 00:13:15,279
heuristic to the text session cookies

335
00:13:12,449 --> 00:13:17,859
but whatever service that it is very

336
00:13:15,279 --> 00:13:20,260
easy to have possibility of session

337
00:13:17,860 --> 00:13:22,480
hijacking of this prominent website if

338
00:13:20,260 --> 00:13:25,930
we called mark always cookie with the

339
00:13:22,480 --> 00:13:28,060
HCP only attribute we would in very

340
00:13:25,930 --> 00:13:29,589
limited at Duxford phase because

341
00:13:28,060 --> 00:13:32,349
number of vulnerable website will be

342
00:13:29,590 --> 00:13:33,760
around half of this number but of course

343
00:13:32,350 --> 00:13:35,430
which might have an impact on

344
00:13:33,760 --> 00:13:37,569
compatibility so we cannot just

345
00:13:35,430 --> 00:13:39,760
stipulate that this cookie cannot be

346
00:13:37,570 --> 00:13:41,380
accessed by JavaScript and at the same

347
00:13:39,760 --> 00:13:44,350
time being sure that this is not going

348
00:13:41,380 --> 00:13:48,430
to break website when we observed that

349
00:13:44,350 --> 00:13:50,220
more than 500 website had the session

350
00:13:48,430 --> 00:13:52,959
cookies all of which have low integrity

351
00:13:50,220 --> 00:13:55,900
in principle we can mitigate this issue

352
00:13:52,960 --> 00:13:58,150
by using those prefix and in particular

353
00:13:55,900 --> 00:14:00,640
this will help in more than 100 cases

354
00:13:58,150 --> 00:14:03,939
but we solve at only one web site in our

355
00:14:00,640 --> 00:14:05,590
data set is using the host prefix to

356
00:14:03,940 --> 00:14:09,700
prevent cookie sharing between

357
00:14:05,590 --> 00:14:12,130
subdomains and we also estimated that

358
00:14:09,700 --> 00:14:13,990
there are a few cases 22 where it is

359
00:14:12,130 --> 00:14:15,580
possible to deploy the host prefects

360
00:14:13,990 --> 00:14:20,650
world breaking compatibility but the

361
00:14:15,580 --> 00:14:22,300
websites are not to doing so last part

362
00:14:20,650 --> 00:14:24,910
of the analysis related to the web

363
00:14:22,300 --> 00:14:26,709
tracking in particular we start from the

364
00:14:24,910 --> 00:14:28,890
salvation that TLS vulnerabilities in

365
00:14:26,710 --> 00:14:32,380
popular tracking trackers might enable

366
00:14:28,890 --> 00:14:34,660
privacy leaks in particular if tracking

367
00:14:32,380 --> 00:14:36,910
cookies are sent over leaky channels the

368
00:14:34,660 --> 00:14:39,540
attacker might be able to build cross

369
00:14:36,910 --> 00:14:42,130
site navigation profiles of users and

370
00:14:39,540 --> 00:14:44,020
this issue can be amplified if the

371
00:14:42,130 --> 00:14:46,540
attacker can actually force scripts to

372
00:14:44,020 --> 00:14:49,120
load this content from the trackers in

373
00:14:46,540 --> 00:14:51,060
other pages we have a similar analysis

374
00:14:49,120 --> 00:14:54,640
for tracking cookies published at the

375
00:14:51,060 --> 00:14:56,979
ww2 thousand 15 but what analysis

376
00:14:54,640 --> 00:14:58,780
focused on HP traffic here instead we

377
00:14:56,980 --> 00:15:01,330
focus on HTTP traffic which is not

378
00:14:58,780 --> 00:15:03,280
completely secure due to the presence of

379
00:15:01,330 --> 00:15:08,440
will not ability but the methodology is

380
00:15:03,280 --> 00:15:09,970
pretty similar here a few example these

381
00:15:08,440 --> 00:15:12,040
are example of a host which are

382
00:15:09,970 --> 00:15:14,140
vulnerable these are used by trackers

383
00:15:12,040 --> 00:15:15,760
and they are very popular because you

384
00:15:14,140 --> 00:15:19,540
can see that we're included by many

385
00:15:15,760 --> 00:15:21,220
different hosts and we estimated based

386
00:15:19,540 --> 00:15:23,439
on the numbers that we have in the paper

387
00:15:21,220 --> 00:15:24,490
but attacking a single publisher alone

388
00:15:23,440 --> 00:15:27,700
like pub Matic

389
00:15:24,490 --> 00:15:29,950
will allow profiling over more than 140

390
00:15:27,700 --> 00:15:32,680
web site and the attacking can be

391
00:15:29,950 --> 00:15:34,570
amplified if the attacker plays the

392
00:15:32,680 --> 00:15:37,030
active role of injecting scripts in

393
00:15:34,570 --> 00:15:39,430
error pages and it is possible in

394
00:15:37,030 --> 00:15:42,279
particular to increase the profiling to

395
00:15:39,430 --> 00:15:46,040
almost 1,000 websites

396
00:15:42,279 --> 00:15:47,930
so to conclude HCPs is essential for the

397
00:15:46,040 --> 00:15:48,770
application security but it is not a

398
00:15:47,930 --> 00:15:50,630
final solution

399
00:15:48,770 --> 00:15:52,000
in particular we have to ensure that its

400
00:15:50,630 --> 00:15:54,410
base is deployed correctly otherwise

401
00:15:52,000 --> 00:15:56,899
attacker might be able to exploit the

402
00:15:54,410 --> 00:15:59,270
last one an ability to run nasty attacks

403
00:15:56,899 --> 00:16:01,070
we have seen some other tax in visto

404
00:15:59,270 --> 00:16:03,260
particularly we estimated the page

405
00:16:01,070 --> 00:16:06,140
integrity issues in 10% of the home

406
00:16:03,260 --> 00:16:07,700
pages which we analyzed and we observed

407
00:16:06,140 --> 00:16:09,949
that in most cases these issues are

408
00:16:07,700 --> 00:16:12,620
related to remote script inclusion so

409
00:16:09,950 --> 00:16:16,040
the main host is fine but the home page

410
00:16:12,620 --> 00:16:20,000
is loading stuff from hosts with the

411
00:16:16,040 --> 00:16:21,920
deploy a CPS insecurely in the case of

412
00:16:20,000 --> 00:16:26,120
session cookies we found that it is very

413
00:16:21,920 --> 00:16:29,000
easy to leak cookies through broken TLS

414
00:16:26,120 --> 00:16:30,620
channels and very likely this is due to

415
00:16:29,000 --> 00:16:32,630
the fact that these cookies are shared

416
00:16:30,620 --> 00:16:36,230
between subdomains however very large

417
00:16:32,630 --> 00:16:38,570
attack surface and in 13% of the website

418
00:16:36,230 --> 00:16:40,220
we found problems similar to cookie

419
00:16:38,570 --> 00:16:42,800
forcing where the attacker might be able

420
00:16:40,220 --> 00:16:44,330
to compromise cookie integrity it is

421
00:16:42,800 --> 00:16:46,040
possible to reduce the tax surface for

422
00:16:44,330 --> 00:16:49,040
this by using the osprey fix for cookies

423
00:16:46,040 --> 00:16:52,510
but no one is using it basically as of

424
00:16:49,040 --> 00:16:55,399
now and finally we analyzed web tracking

425
00:16:52,510 --> 00:16:57,709
and we have served that broken TLS

426
00:16:55,399 --> 00:17:00,380
implementation in web trackers can be

427
00:16:57,709 --> 00:17:02,149
used to build the accurate cross site

428
00:17:00,380 --> 00:17:05,240
navigation profiles across different

429
00:17:02,149 --> 00:17:07,339
website and a single track in a single

430
00:17:05,240 --> 00:17:10,099
leaky tracker enable profiling on more

431
00:17:07,339 --> 00:17:12,438
than 140 website and it is possible to

432
00:17:10,099 --> 00:17:15,349
make this attack stronger by exploiting

433
00:17:12,439 --> 00:17:17,449
the script interaction so let's say the

434
00:17:15,349 --> 00:17:21,469
main goal of our research was showing

435
00:17:17,449 --> 00:17:23,480
that even if we move to full HTTP the

436
00:17:21,470 --> 00:17:25,880
last release can still represent a

437
00:17:23,480 --> 00:17:29,390
serious issue to the security of the

438
00:17:25,880 --> 00:17:32,420
deployment and we want to really listen

439
00:17:29,390 --> 00:17:35,420
on how to improve on this state of the

440
00:17:32,420 --> 00:17:38,929
art in particular the upcoming release

441
00:17:35,420 --> 00:17:40,390
of TLS 1.3 major browsers will

442
00:17:38,929 --> 00:17:45,260
definitely help in improving this

443
00:17:40,390 --> 00:17:47,870
situation so very briefly to conclude we

444
00:17:45,260 --> 00:17:49,610
are currently looking for internships

445
00:17:47,870 --> 00:17:51,139
because we are still developing this

446
00:17:49,610 --> 00:17:52,409
tool in collaboration with crypto since

447
00:17:51,140 --> 00:17:55,440
because we want to let

448
00:17:52,410 --> 00:17:57,720
is the tool as a web application for

449
00:17:55,440 --> 00:17:59,730
people to use so if you are interesting

450
00:17:57,720 --> 00:18:02,340
in development work on these kind of

451
00:17:59,730 --> 00:18:04,470
topics you can contact me or Ricardo for

452
00:18:02,340 --> 00:18:05,750
cardiod visa dresses thank you for

453
00:18:04,470 --> 00:18:10,190
attention

454
00:18:05,750 --> 00:18:11,940
[Applause]

455
00:18:10,190 --> 00:18:15,020
thank you very much therefore no

456
00:18:11,940 --> 00:18:17,610
questions line up at the microphones and

457
00:18:15,020 --> 00:18:20,940
fire away with your questions until you

458
00:18:17,610 --> 00:18:23,159
get up let me ask one so you said that

459
00:18:20,940 --> 00:18:24,780
for the quantitative analysis that you

460
00:18:23,160 --> 00:18:28,140
did you had to start out with those

461
00:18:24,780 --> 00:18:30,330
attack trees can you share a word or two

462
00:18:28,140 --> 00:18:32,090
on how you came up with those trees

463
00:18:30,330 --> 00:18:34,379
what's the process for doing that yeah

464
00:18:32,090 --> 00:18:36,959
so basically the construction of the

465
00:18:34,380 --> 00:18:40,140
tech trees are based on extensive

466
00:18:36,960 --> 00:18:43,590
literature order review it's a review of

467
00:18:40,140 --> 00:18:46,410
the literature and you can see an

468
00:18:43,590 --> 00:18:48,600
example in this slide and what we did

469
00:18:46,410 --> 00:18:50,460
was taking assumption but the user is

470
00:18:48,600 --> 00:18:53,129
navigating the web using a modern client

471
00:18:50,460 --> 00:18:54,360
so we have some strict requirement by

472
00:18:53,130 --> 00:18:56,940
Mozilla which is called modern

473
00:18:54,360 --> 00:18:59,429
compatibility requirement for TLS

474
00:18:56,940 --> 00:19:02,310
security so we assume that the user is

475
00:18:59,430 --> 00:19:05,250
accessing the web from a client which is

476
00:19:02,310 --> 00:19:08,190
updated and based on this we dint if I

477
00:19:05,250 --> 00:19:10,800
condition for attacks which fall into

478
00:19:08,190 --> 00:19:12,270
this category to be true and we estimate

479
00:19:10,800 --> 00:19:14,909
the the presence of his kind of

480
00:19:12,270 --> 00:19:18,470
vulnerabilities by scanning Austin and

481
00:19:14,910 --> 00:19:21,990
mapping the output of a known tools like

482
00:19:18,470 --> 00:19:28,380
TLS attacker against the condition of

483
00:19:21,990 --> 00:19:30,960
attack trees hey Thomas Koba University

484
00:19:28,380 --> 00:19:33,780
of Edinburgh I wanted to ask what

485
00:19:30,960 --> 00:19:35,670
sampling set of websites did you use

486
00:19:33,780 --> 00:19:39,090
because you for a lot of numbers around

487
00:19:35,670 --> 00:19:43,140
but I don't know what the corresponding

488
00:19:39,090 --> 00:19:47,250
references okay so we access a lexer

489
00:19:43,140 --> 00:19:51,360
website so we took the top 100 k and

490
00:19:47,250 --> 00:19:53,460
then we started sample until we get 10 k

491
00:19:51,360 --> 00:19:56,639
website all of which are deployed on top

492
00:19:53,460 --> 00:19:59,310
of HTTP so that's a better setting we

493
00:19:56,640 --> 00:20:01,650
use the Alex List which was the most

494
00:19:59,310 --> 00:20:05,149
updated when we perform our own

495
00:20:01,650 --> 00:20:05,150
investigation okay thank you

496
00:20:05,160 --> 00:20:10,390
any other questions

497
00:20:07,510 --> 00:20:12,080
if not then let's thank Stefano once

498
00:20:10,390 --> 00:20:16,180
again and I think we're due for a break

499
00:20:12,080 --> 00:20:16,179
[Applause]

