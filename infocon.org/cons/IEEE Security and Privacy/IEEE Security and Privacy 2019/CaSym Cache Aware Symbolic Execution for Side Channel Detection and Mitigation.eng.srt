1
00:00:15,940 --> 00:00:21,279
all right so I'm Robert and I'm happy to

2
00:00:19,840 --> 00:00:23,560
be here today to talk about our work on

3
00:00:21,279 --> 00:00:24,460
cache side-channel detection with our

4
00:00:23,560 --> 00:00:26,410
two large chasm

5
00:00:24,460 --> 00:00:28,629
so to start I'd like to go over at a

6
00:00:26,410 --> 00:00:32,369
high level how trash based side channels

7
00:00:28,629 --> 00:00:36,370
work so if we imagine that we have a

8
00:00:32,369 --> 00:00:39,519
program here and the programs you want

9
00:00:36,370 --> 00:00:41,530
to take some sensitive data as input and

10
00:00:39,520 --> 00:00:42,610
as we process the data it's going to

11
00:00:41,530 --> 00:00:45,310
leave some artifacts that may be

12
00:00:42,610 --> 00:00:46,840
observable in the CPU cache so the

13
00:00:45,310 --> 00:00:48,399
adversary can extract these artifacts

14
00:00:46,840 --> 00:00:51,160
maybe using a primum probe or a flush

15
00:00:48,399 --> 00:00:52,660
and reload style attack and then if we

16
00:00:51,160 --> 00:00:54,669
imagine a program that takes this

17
00:00:52,660 --> 00:00:56,769
different the same program with the same

18
00:00:54,670 --> 00:00:59,620
public inputs but a different sensitive

19
00:00:56,770 --> 00:01:02,890
input and it also processes the data and

20
00:00:59,620 --> 00:01:04,030
the final cache state is a different the

21
00:01:02,890 --> 00:01:06,340
implication is that there's information

22
00:01:04,030 --> 00:01:07,840
flowing from the sensitive data into the

23
00:01:06,340 --> 00:01:12,329
cache and that's the unintentional

24
00:01:07,840 --> 00:01:15,789
information transfer that's happening so

25
00:01:12,329 --> 00:01:18,219
just how a severe as this problem so at

26
00:01:15,789 --> 00:01:20,439
these attacks have been shown to be a

27
00:01:18,219 --> 00:01:21,908
rather high bandwidth so there's been

28
00:01:20,439 --> 00:01:23,949
work that's shown the baton yet up to a

29
00:01:21,909 --> 00:01:24,639
hundred over 100 kilobytes of leakage

30
00:01:23,950 --> 00:01:26,920
per second

31
00:01:24,639 --> 00:01:28,829
they've been shown to work on a secure

32
00:01:26,920 --> 00:01:31,029
Enclave such as until ice chips and

33
00:01:28,829 --> 00:01:33,189
they've also been shown to be able to be

34
00:01:31,029 --> 00:01:34,569
launched across cores and the across

35
00:01:33,189 --> 00:01:37,270
virtual machines in the in the cloud

36
00:01:34,569 --> 00:01:39,249
using the shared last level cache and

37
00:01:37,270 --> 00:01:40,749
most recently respect during meltdown

38
00:01:39,249 --> 00:01:42,939
vulnerability that brought the side

39
00:01:40,749 --> 00:01:44,469
channels to the forefront taking

40
00:01:42,939 --> 00:01:47,258
advantage of speculative and out of

41
00:01:44,469 --> 00:01:52,508
order execution delete arbitrary data

42
00:01:47,259 --> 00:01:54,389
from the victim address space and one of

43
00:01:52,509 --> 00:01:56,439
the main problems is finding these

44
00:01:54,389 --> 00:01:58,060
vulnerabilities in code is often quite

45
00:01:56,439 --> 00:01:59,770
challenging because micro architectural

46
00:01:58,060 --> 00:02:01,299
properties are often quite a subtle and

47
00:01:59,770 --> 00:02:04,359
hard for people to think about as

48
00:02:01,299 --> 00:02:07,840
they're programming so there's been some

49
00:02:04,359 --> 00:02:09,429
prior work on this so one of the first

50
00:02:07,840 --> 00:02:12,489
ones would be a cache audit that was

51
00:02:09,429 --> 00:02:13,450
from 2013 from Euston security and what

52
00:02:12,489 --> 00:02:14,709
they do is they use abstract

53
00:02:13,450 --> 00:02:16,839
interpretation to try and relate a

54
00:02:14,709 --> 00:02:18,569
program execution to how the cache

55
00:02:16,840 --> 00:02:20,549
behaves

56
00:02:18,569 --> 00:02:22,890
they try to compute an upper bound on a

57
00:02:20,549 --> 00:02:24,569
deleted from the source code via the

58
00:02:22,890 --> 00:02:25,920
cash based side Channel but they don't

59
00:02:24,569 --> 00:02:28,048
provide any information of the

60
00:02:25,920 --> 00:02:30,839
programmer on where the vulnerability is

61
00:02:28,049 --> 00:02:33,180
in their in their program and then more

62
00:02:30,840 --> 00:02:34,829
recently in 2017 a tool called cash see

63
00:02:33,180 --> 00:02:36,060
uses symbolic execution to build a

64
00:02:34,829 --> 00:02:39,329
relationship of how a program executes

65
00:02:36,060 --> 00:02:41,609
from the cache state and they're able to

66
00:02:39,329 --> 00:02:43,530
detect where the leakage happens but

67
00:02:41,609 --> 00:02:46,200
they may miss side channels because they

68
00:02:43,530 --> 00:02:48,209
require some inputs to be concrete which

69
00:02:46,200 --> 00:02:49,290
means it may not go down certain control

70
00:02:48,209 --> 00:02:51,359
flow paths that actually have

71
00:02:49,290 --> 00:02:53,638
vulnerabilities and they don't provide

72
00:02:51,359 --> 00:02:55,109
any way to fix them so because of these

73
00:02:53,639 --> 00:02:56,819
two limitations are also not able to

74
00:02:55,109 --> 00:03:00,419
verify that programs are actually

75
00:02:56,819 --> 00:03:03,000
side-channel free so that's where our

76
00:03:00,419 --> 00:03:05,879
work comes in so we proposed using cash

77
00:03:03,000 --> 00:03:07,470
aware symbolic execution so we're able

78
00:03:05,879 --> 00:03:09,418
to soundly model a cash base side

79
00:03:07,470 --> 00:03:11,579
channels so those resulting from memory

80
00:03:09,419 --> 00:03:13,319
arson see is where the the memory

81
00:03:11,579 --> 00:03:16,530
address is computed from some sensitive

82
00:03:13,319 --> 00:03:18,388
data and also branches where the

83
00:03:16,530 --> 00:03:21,859
condition is tainted and the different

84
00:03:18,389 --> 00:03:23,609
branches will access different data and

85
00:03:21,859 --> 00:03:25,079
we're able to detect where the

86
00:03:23,609 --> 00:03:27,299
side-channel happens in the code so we

87
00:03:25,079 --> 00:03:28,739
can identify the line in the source code

88
00:03:27,299 --> 00:03:31,470
that causes the vulnerability and tell

89
00:03:28,739 --> 00:03:33,090
the programmer why it happens and we're

90
00:03:31,470 --> 00:03:35,220
able to provide some simple fixes to

91
00:03:33,090 --> 00:03:38,370
remove the program and then verify the

92
00:03:35,220 --> 00:03:41,459
absence of the side-channel we also

93
00:03:38,370 --> 00:03:45,090
include a variety of different cache

94
00:03:41,459 --> 00:03:48,569
models that yield different precision

95
00:03:45,090 --> 00:03:52,250
and efficiency so as an overview our

96
00:03:48,569 --> 00:03:54,810
tool tapes as input a C a source program

97
00:03:52,250 --> 00:03:57,269
and uses the client Pilar to generate

98
00:03:54,810 --> 00:04:01,109
LLVM IR code we then perform our

99
00:03:57,269 --> 00:04:03,060
analysis on the LLVM IR code and we will

100
00:04:01,109 --> 00:04:04,620
require a model and the model is going

101
00:04:03,060 --> 00:04:07,109
to include an attack model and a cache

102
00:04:04,620 --> 00:04:08,819
model will then generate a verification

103
00:04:07,109 --> 00:04:12,599
condition which will be passed on to the

104
00:04:08,819 --> 00:04:14,668
XIII SMT solver and if the SMT solver

105
00:04:12,599 --> 00:04:16,889
reports an unsatisfiable result that

106
00:04:14,669 --> 00:04:18,209
means that there's no cash base side

107
00:04:16,889 --> 00:04:21,320
channel with respect to the models that

108
00:04:18,209 --> 00:04:23,849
were used and well if it's satisfiable

109
00:04:21,320 --> 00:04:25,530
will generate a localization report and

110
00:04:23,849 --> 00:04:26,820
the localization report will tell the

111
00:04:25,530 --> 00:04:27,219
user why the sidechain will happen and

112
00:04:26,820 --> 00:04:29,800
where

113
00:04:27,220 --> 00:04:31,540
and with that information the

114
00:04:29,800 --> 00:04:33,130
mitigations can be applied and then if

115
00:04:31,540 --> 00:04:34,870
the user wants to verify the absence of

116
00:04:33,130 --> 00:04:36,520
the side channel I like to run it back

117
00:04:34,870 --> 00:04:38,050
through our tool and if it report is

118
00:04:36,520 --> 00:04:42,159
unsatisfiable it means that there's no

119
00:04:38,050 --> 00:04:45,640
side Channel so trying to go over an

120
00:04:42,160 --> 00:04:47,590
illustrative example we talked about the

121
00:04:45,640 --> 00:04:50,349
square multiply algorithm which is used

122
00:04:47,590 --> 00:04:52,799
in modular exponentiation so this is

123
00:04:50,350 --> 00:04:55,180
commonly used in asymmetric cryptography

124
00:04:52,800 --> 00:04:57,640
so in these cases the exponent is

125
00:04:55,180 --> 00:04:58,780
typically the the private key and here

126
00:04:57,640 --> 00:05:00,760
the loop is joined iterate over every

127
00:04:58,780 --> 00:05:02,169
bit of the key and waiting to see online

128
00:05:00,760 --> 00:05:04,330
stitch that there's a key dependent

129
00:05:02,170 --> 00:05:05,800
branch and inside of the branch that's

130
00:05:04,330 --> 00:05:07,479
trying to access some data that wouldn't

131
00:05:05,800 --> 00:05:09,880
be accessed if the branch wasn't aging

132
00:05:07,480 --> 00:05:12,070
and this is going to leave a some

133
00:05:09,880 --> 00:05:14,860
observable remnants in the cache that

134
00:05:12,070 --> 00:05:18,640
can be exploited by an adversary to to

135
00:05:14,860 --> 00:05:21,730
learn information about the key so our

136
00:05:18,640 --> 00:05:23,830
tool uses a symbolic execution so unlike

137
00:05:21,730 --> 00:05:26,320
some tools that use a symbolic execution

138
00:05:23,830 --> 00:05:27,849
we actually treat all program variables

139
00:05:26,320 --> 00:05:30,909
as symbolic values instead of mating

140
00:05:27,850 --> 00:05:33,550
some of them concrete so this is true

141
00:05:30,910 --> 00:05:35,980
for both public and private inputs and

142
00:05:33,550 --> 00:05:37,360
then we also introduced cache variables

143
00:05:35,980 --> 00:05:40,480
in the cache we're going to create a

144
00:05:37,360 --> 00:05:42,700
cache variable for every public variable

145
00:05:40,480 --> 00:05:44,169
and these cache variables are going to

146
00:05:42,700 --> 00:05:48,729
be expressed differently depending on

147
00:05:44,169 --> 00:05:50,349
which cache model is selected so the

148
00:05:48,730 --> 00:05:51,910
verification step is going to require us

149
00:05:50,350 --> 00:05:53,500
to take a program and essentially we

150
00:05:51,910 --> 00:05:55,270
start off with the original program and

151
00:05:53,500 --> 00:05:56,950
then we're going to duplicate the

152
00:05:55,270 --> 00:05:59,039
program renaming all of the variables so

153
00:05:56,950 --> 00:06:01,060
we're going to run the program twice and

154
00:05:59,040 --> 00:06:02,830
initially all of the public variables

155
00:06:01,060 --> 00:06:06,250
and the catch variables are going to be

156
00:06:02,830 --> 00:06:08,169
equal and only the sensitive data will

157
00:06:06,250 --> 00:06:09,940
be different so the SMT solver will be

158
00:06:08,169 --> 00:06:12,250
able to select two different values for

159
00:06:09,940 --> 00:06:13,960
the private data what I want to see is

160
00:06:12,250 --> 00:06:15,250
at the end are there two different

161
00:06:13,960 --> 00:06:17,859
possible cache States that these

162
00:06:15,250 --> 00:06:20,740
sensitive data can cause and in the

163
00:06:17,860 --> 00:06:22,240
event that the cache variables are not

164
00:06:20,740 --> 00:06:23,320
equal that means if the cache states are

165
00:06:22,240 --> 00:06:25,300
different and we'll report a side

166
00:06:23,320 --> 00:06:27,760
channel and if there are always equal

167
00:06:25,300 --> 00:06:29,110
for any two possible key pairs now that

168
00:06:27,760 --> 00:06:31,570
means that there's no information

169
00:06:29,110 --> 00:06:37,450
flowing from the sensitive input into

170
00:06:31,570 --> 00:06:39,940
the final observable cache state so the

171
00:06:37,450 --> 00:06:40,390
reason we use these cache models to

172
00:06:39,940 --> 00:06:42,180
abstract

173
00:06:40,390 --> 00:06:44,500
some of the details is oftentimes

174
00:06:42,180 --> 00:06:46,300
trashes are rather complex to the cash

175
00:06:44,500 --> 00:06:47,470
hierarchies replacement policy

176
00:06:46,300 --> 00:06:50,080
inclusivity and a lot of these

177
00:06:47,470 --> 00:06:52,570
properties vary tremendously and a lot

178
00:06:50,080 --> 00:06:55,390
of times they're not even available to

179
00:06:52,570 --> 00:06:58,060
us a lot of the details are kept private

180
00:06:55,390 --> 00:07:01,510
and even if they were known they vary

181
00:06:58,060 --> 00:07:03,940
amongst many architectures anyways so we

182
00:07:01,510 --> 00:07:06,280
developed these models to be more apply

183
00:07:03,940 --> 00:07:08,020
more generally so our infinite model is

184
00:07:06,280 --> 00:07:09,909
a rather simple model and under

185
00:07:08,020 --> 00:07:12,039
approximation of a lot of real behavior

186
00:07:09,910 --> 00:07:15,850
and treats caches if it's an infinite

187
00:07:12,040 --> 00:07:18,160
set but we find that that even though

188
00:07:15,850 --> 00:07:21,790
it's a simple it actually is pretty good

189
00:07:18,160 --> 00:07:22,930
at finding side channels and then we

190
00:07:21,790 --> 00:07:25,720
have our age model which over

191
00:07:22,930 --> 00:07:28,870
approximates real policies by

192
00:07:25,720 --> 00:07:31,840
essentially keeping track of how old

193
00:07:28,870 --> 00:07:33,580
each variable is so essentially the age

194
00:07:31,840 --> 00:07:35,919
is how many accesses have passed since

195
00:07:33,580 --> 00:07:37,930
it was last used and then we have a more

196
00:07:35,920 --> 00:07:41,430
realistic model called a least recently

197
00:07:37,930 --> 00:07:44,080
used model which also uses an age but

198
00:07:41,430 --> 00:07:45,670
essentially the expression is going to

199
00:07:44,080 --> 00:07:49,150
be a binary result which is either it's

200
00:07:45,670 --> 00:07:50,890
cached or it's not cached so to

201
00:07:49,150 --> 00:07:53,020
demonstrate how these models would work

202
00:07:50,890 --> 00:07:55,450
we have this toy program here and we're

203
00:07:53,020 --> 00:07:58,960
going to initialize the cache to be all

204
00:07:55,450 --> 00:08:00,490
false and then when we execute the if

205
00:07:58,960 --> 00:08:02,590
condition here we're going to access the

206
00:08:00,490 --> 00:08:04,210
key so we'll mark that as true and then

207
00:08:02,590 --> 00:08:05,679
you'll note that the key value here is

208
00:08:04,210 --> 00:08:08,229
assigned to be once older than the then

209
00:08:05,680 --> 00:08:10,690
branch and we'll get a is access and

210
00:08:08,230 --> 00:08:13,690
we'll get true and then on the next on

211
00:08:10,690 --> 00:08:15,490
the second execution the SMT solver

212
00:08:13,690 --> 00:08:17,890
might select zero to be the key value

213
00:08:15,490 --> 00:08:19,630
and we'll still execute the condition

214
00:08:17,890 --> 00:08:21,340
and this time we'll go down the else

215
00:08:19,630 --> 00:08:23,050
branch and we can see that there is

216
00:08:21,340 --> 00:08:24,580
going to be a difference in the final

217
00:08:23,050 --> 00:08:28,240
trash States and this is what our tool

218
00:08:24,580 --> 00:08:30,880
is looking for and then to demonstrate

219
00:08:28,240 --> 00:08:32,080
how the age model might work so here we

220
00:08:30,880 --> 00:08:33,669
start off with all of the ages to be

221
00:08:32,080 --> 00:08:35,350
affinity infinity which means that there

222
00:08:33,669 --> 00:08:37,599
haven't been abscessed yet essentially

223
00:08:35,350 --> 00:08:39,419
then when we access P initially we'll

224
00:08:37,600 --> 00:08:41,190
increment all of the ages and here

225
00:08:39,419 --> 00:08:43,949
intermitting infinity by 1 is still

226
00:08:41,190 --> 00:08:45,540
infinity so they stay the same and then

227
00:08:43,950 --> 00:08:49,170
since we asked this T will set that age

228
00:08:45,540 --> 00:08:51,269
to 0 and then again when we get to the

229
00:08:49,170 --> 00:08:53,760
line and the in the Ben branch

230
00:08:51,269 --> 00:08:58,110
I will increment the ages first and then

231
00:08:53,760 --> 00:09:00,930
we'll set the members of the program the

232
00:08:58,110 --> 00:09:02,100
tranche variable that was used to 0 and

233
00:09:00,930 --> 00:09:04,260
then when we do it out in the else

234
00:09:02,100 --> 00:09:06,810
branch it'll be very similar will do the

235
00:09:04,260 --> 00:09:09,149
increment and then do the access and at

236
00:09:06,810 --> 00:09:11,699
the end this model will actually provide

237
00:09:09,149 --> 00:09:14,670
essentially a sequence an order of the

238
00:09:11,699 --> 00:09:16,229
memory access pattern and we can see

239
00:09:14,670 --> 00:09:18,689
that with the age model it'll still

240
00:09:16,230 --> 00:09:21,750
it'll also report there's a side channel

241
00:09:18,690 --> 00:09:23,240
in this program so we had to make some

242
00:09:21,750 --> 00:09:25,920
trade-offs to improve performance

243
00:09:23,240 --> 00:09:29,430
because symbolic execution is typically

244
00:09:25,920 --> 00:09:31,349
rather an expensive process so the array

245
00:09:29,430 --> 00:09:33,810
reads when we read from arrays are going

246
00:09:31,350 --> 00:09:36,240
to be unconstrained so when we drop the

247
00:09:33,810 --> 00:09:40,349
constraints that essentially we'll treat

248
00:09:36,240 --> 00:09:42,540
them as private variables so in order to

249
00:09:40,350 --> 00:09:43,890
overcome this we use a taint analysis to

250
00:09:42,540 --> 00:09:49,860
be able to tell if they're sensitive or

251
00:09:43,890 --> 00:09:51,329
or insensitive and then we have we have

252
00:09:49,860 --> 00:09:52,620
this reset command which is going to

253
00:09:51,329 --> 00:09:54,149
reset the constraints so it essentially

254
00:09:52,620 --> 00:09:56,310
allows us to break a program up into

255
00:09:54,149 --> 00:09:58,560
multiple components and verify the

256
00:09:56,310 --> 00:10:00,329
individual components and we also apply

257
00:09:58,560 --> 00:10:02,069
this tain analysis to make sure that

258
00:10:00,329 --> 00:10:04,859
when we drop these constraints that we

259
00:10:02,070 --> 00:10:07,709
still know which variables are sensitive

260
00:10:04,860 --> 00:10:09,600
and insensitive after a reset and this

261
00:10:07,709 --> 00:10:11,969
command is particularly useful when we

262
00:10:09,600 --> 00:10:14,070
do it to reason about loops so we also

263
00:10:11,970 --> 00:10:15,690
have a loop transformation that will

264
00:10:14,070 --> 00:10:18,680
soundly rewrite our programs to be a

265
00:10:15,690 --> 00:10:21,990
loop free by using our reset command and

266
00:10:18,680 --> 00:10:23,310
it makes it very convenient because then

267
00:10:21,990 --> 00:10:24,569
we don't have to unroll loops and when

268
00:10:23,310 --> 00:10:26,399
you do loop unrolling and symbolic

269
00:10:24,569 --> 00:10:30,060
execution it typically causes that path

270
00:10:26,399 --> 00:10:31,800
explosion it was a difficult so to get

271
00:10:30,060 --> 00:10:34,880
performance some more information about

272
00:10:31,800 --> 00:10:37,380
this details can be found in the paper

273
00:10:34,880 --> 00:10:38,899
so now to briefly talk about the two

274
00:10:37,380 --> 00:10:40,700
different attack models that we consider

275
00:10:38,899 --> 00:10:42,620
so in the

276
00:10:40,700 --> 00:10:44,390
access model essentially an adversary is

277
00:10:42,620 --> 00:10:47,150
able to observe before and after some

278
00:10:44,390 --> 00:10:50,000
window and there they're able to see a

279
00:10:47,150 --> 00:10:51,380
sequence of memory or a set of addresses

280
00:10:50,000 --> 00:10:52,640
that are accessed but they can't see the

281
00:10:51,380 --> 00:10:55,100
sequence they can't tell the order in

282
00:10:52,640 --> 00:10:56,630
which the data is accessed and then a

283
00:10:55,100 --> 00:10:57,890
much stronger attack model as a trace

284
00:10:56,630 --> 00:11:00,260
base model where they're actually able

285
00:10:57,890 --> 00:11:02,660
to see a and B after every single memory

286
00:11:00,260 --> 00:11:05,600
access so they're able to get a sequence

287
00:11:02,660 --> 00:11:10,819
of memory addresses that are are used by

288
00:11:05,600 --> 00:11:13,760
the victim so as far as a result so here

289
00:11:10,820 --> 00:11:16,340
I'll talk about our cryptic results for

290
00:11:13,760 --> 00:11:17,660
using our trace model so using our

291
00:11:16,340 --> 00:11:20,510
infinite model and we're able to

292
00:11:17,660 --> 00:11:23,120
identify 269 unique of vulnerable points

293
00:11:20,510 --> 00:11:25,310
in these benchmarks and about 200

294
00:11:23,120 --> 00:11:27,170
seconds which is quite good considering

295
00:11:25,310 --> 00:11:31,609
that the infinite model is actually an

296
00:11:27,170 --> 00:11:33,290
under approximation and then we have our

297
00:11:31,610 --> 00:11:36,920
age model which is able to identify one

298
00:11:33,290 --> 00:11:38,480
more vulnerable location and the

299
00:11:36,920 --> 00:11:42,560
trade-off here is that it takes an order

300
00:11:38,480 --> 00:11:44,450
of magnitude more time to execute and

301
00:11:42,560 --> 00:11:46,550
then our most realistic model actually

302
00:11:44,450 --> 00:11:47,930
more closely corresponds to our infinite

303
00:11:46,550 --> 00:11:50,150
model which highlights actually how

304
00:11:47,930 --> 00:11:52,609
effective our more simple model is of

305
00:11:50,150 --> 00:11:54,050
finding these vulnerabilities but it'll

306
00:11:52,610 --> 00:11:56,450
still actually tell you a significant

307
00:11:54,050 --> 00:11:57,949
amount more time so the one benchmark

308
00:11:56,450 --> 00:11:59,150
where we see a difference here is going

309
00:11:57,950 --> 00:12:01,220
to be on the square and always multiply

310
00:11:59,150 --> 00:12:03,260
routine and the only reason the aged

311
00:12:01,220 --> 00:12:04,970
model still reports a difference is that

312
00:12:03,260 --> 00:12:07,670
the the order of the accesses is still

313
00:12:04,970 --> 00:12:08,930
different and the LRU model doesn't

314
00:12:07,670 --> 00:12:10,459
report anything because there the

315
00:12:08,930 --> 00:12:12,500
difference is actually very close

316
00:12:10,460 --> 00:12:14,090
together so it's only a couple of memory

317
00:12:12,500 --> 00:12:15,740
accesses apart so there's two actually

318
00:12:14,090 --> 00:12:18,410
both going to be cached and it's going

319
00:12:15,740 --> 00:12:22,930
to be indistinguishable and our infinite

320
00:12:18,410 --> 00:12:25,850
model reports the same as our LRU model

321
00:12:22,930 --> 00:12:28,430
so we're also able to verify the absence

322
00:12:25,850 --> 00:12:30,800
of side-channel so we introduced two

323
00:12:28,430 --> 00:12:32,930
primitives pre loading and pinning so

324
00:12:30,800 --> 00:12:34,189
pre loading the data is going to be

325
00:12:32,930 --> 00:12:35,810
cached at the beginning of the function

326
00:12:34,190 --> 00:12:38,960
and with pinning that's going to be

327
00:12:35,810 --> 00:12:42,439
cached throughout the function so when

328
00:12:38,960 --> 00:12:43,970
we analyze the program we see that with

329
00:12:42,440 --> 00:12:45,950
the infinite model it reports that there

330
00:12:43,970 --> 00:12:47,630
is no side channels because things will

331
00:12:45,950 --> 00:12:50,060
never be evicted from the cache with

332
00:12:47,630 --> 00:12:51,320
that model so it was a bit pre literally

333
00:12:50,060 --> 00:12:54,560
at the beginning it will permit

334
00:12:51,320 --> 00:12:55,880
in the cash and with the age model we

335
00:12:54,560 --> 00:12:57,500
still report side channels because the

336
00:12:55,880 --> 00:13:00,889
order of the access seizes remains

337
00:12:57,500 --> 00:13:01,699
unchanged and then pinning the data is

338
00:13:00,889 --> 00:13:02,930
going to be cashed throughout the

339
00:13:01,699 --> 00:13:05,839
function so what that means is that the

340
00:13:02,930 --> 00:13:07,219
age that we use for that the age model

341
00:13:05,839 --> 00:13:08,889
is always going to be zero for those

342
00:13:07,220 --> 00:13:11,509
sensitive values so it won't ever change

343
00:13:08,889 --> 00:13:14,360
so we're able to verify the absence of

344
00:13:11,509 --> 00:13:19,100
side channels in those crypto benchmarks

345
00:13:14,360 --> 00:13:20,899
with these defenses so in conclusion we

346
00:13:19,100 --> 00:13:22,579
build our tool chasm to automatically

347
00:13:20,899 --> 00:13:25,190
identify vulnerabilities and programs

348
00:13:22,579 --> 00:13:27,739
and we're able to support a variety of

349
00:13:25,190 --> 00:13:30,130
cash models that will deliver different

350
00:13:27,740 --> 00:13:34,220
amounts of precision and efficiency and

351
00:13:30,130 --> 00:13:35,720
we tested on assortment of benchmarks we

352
00:13:34,220 --> 00:13:38,089
confirmed existing vulnerabilities in

353
00:13:35,720 --> 00:13:39,199
crypto code we verified the mitigation

354
00:13:38,089 --> 00:13:41,180
strategies on some of the crypto

355
00:13:39,199 --> 00:13:43,459
benchmarks and we found over 20 new

356
00:13:41,180 --> 00:13:44,839
vulnerabilities in the postre sequel

357
00:13:43,459 --> 00:13:45,949
database which I didn't have a chance to

358
00:13:44,839 --> 00:13:49,430
talk about today but you didn't find

359
00:13:45,949 --> 00:13:50,420
that information in the paper so thank

360
00:13:49,430 --> 00:13:56,728
you

361
00:13:50,420 --> 00:13:56,728
[Applause]

362
00:14:05,140 --> 00:14:11,529
I start on France hike van fuschak

363
00:14:08,040 --> 00:14:14,920
so I see it's interesting work and a

364
00:14:11,529 --> 00:14:16,689
great talk by the way idea so I see you

365
00:14:14,920 --> 00:14:18,240
simplify the model for accessing

366
00:14:16,690 --> 00:14:20,380
addresses but have you considered

367
00:14:18,240 --> 00:14:22,810
confused deputy attacks where you have a

368
00:14:20,380 --> 00:14:25,209
benign component in your CPU that you

369
00:14:22,810 --> 00:14:27,189
can mislead to do cache attacks for you

370
00:14:25,209 --> 00:14:27,760
an example of this was previous year at

371
00:14:27,190 --> 00:14:29,830
usenix

372
00:14:27,760 --> 00:14:31,990
transferred attacks or malicious

373
00:14:29,830 --> 00:14:33,520
management unit why stopping cache

374
00:14:31,990 --> 00:14:35,970
attacks is hard and software than you

375
00:14:33,520 --> 00:14:35,970
think so

376
00:14:36,160 --> 00:14:41,560
how are you planning to actually address

377
00:14:38,230 --> 00:14:43,890
these kind of issues I'm not sure is

378
00:14:41,560 --> 00:14:46,479
that can you explain more details with

379
00:14:43,890 --> 00:14:49,000
everything yeah so what the paper showed

380
00:14:46,480 --> 00:14:51,399
back then was that you can use the

381
00:14:49,000 --> 00:14:53,800
memory management unit just by accessing

382
00:14:51,399 --> 00:14:55,690
addresses to get page tables in the

383
00:14:53,800 --> 00:14:57,760
cache to still perform a cache attack oh

384
00:14:55,690 --> 00:15:00,100
yeah so we don't consider the page

385
00:14:57,760 --> 00:15:01,300
tables in this model but so one of the

386
00:15:00,100 --> 00:15:03,700
nice things that we can still apply the

387
00:15:01,300 --> 00:15:05,439
base symbolic execution to as we just

388
00:15:03,700 --> 00:15:06,730
need to formalize how that model would

389
00:15:05,440 --> 00:15:09,100
work so in our cache model if we

390
00:15:06,730 --> 00:15:10,270
included that with it it would be able

391
00:15:09,100 --> 00:15:12,459
to reason about that but that's not

392
00:15:10,270 --> 00:15:19,959
something on the we considered okay

393
00:15:12,459 --> 00:15:22,149
thank you hi network so you initialize

394
00:15:19,959 --> 00:15:24,609
all the global variables it's symbolic

395
00:15:22,149 --> 00:15:26,890
values some of those variables as

396
00:15:24,610 --> 00:15:32,020
pointers how do you handle some

397
00:15:26,890 --> 00:15:34,480
symbolize the pointers so for pointers

398
00:15:32,020 --> 00:15:40,829
we actually have to simplify them a bit

399
00:15:34,480 --> 00:15:42,790
so we typically once say we we have to

400
00:15:40,829 --> 00:15:44,620
we only allow them to point to

401
00:15:42,790 --> 00:15:47,500
essentially one data structure at a time

402
00:15:44,620 --> 00:15:50,020
so if they point to a different data

403
00:15:47,500 --> 00:15:51,339
structure we don't verify the program

404
00:15:50,020 --> 00:15:54,100
but that didn't happen in any of our

405
00:15:51,339 --> 00:15:55,690
benchmarks but we can reason about like

406
00:15:54,100 --> 00:15:58,839
pointer arithmetic as long as it points

407
00:15:55,690 --> 00:16:03,040
to one memory region so one array at a

408
00:15:58,839 --> 00:16:05,110
time that will be verified have your

409
00:16:03,040 --> 00:16:07,420
salt airboats like if I might find out

410
00:16:05,110 --> 00:16:13,440
to my those kind of techniques you

411
00:16:07,420 --> 00:16:13,439
handle no thanks

412
00:16:13,860 --> 00:16:20,769
any more questions we still have some

413
00:16:16,869 --> 00:16:23,439
time left here well maybe then let me

414
00:16:20,769 --> 00:16:25,989
ask a very quick question here for the

415
00:16:23,439 --> 00:16:29,079
three cash models you constructed are

416
00:16:25,989 --> 00:16:30,579
they generically applicable to different

417
00:16:29,079 --> 00:16:32,469
architectures or different processor

418
00:16:30,579 --> 00:16:34,899
families oh yeah so that's why we wanted

419
00:16:32,470 --> 00:16:36,069
to have these abstract models is so we

420
00:16:34,899 --> 00:16:37,779
don't make any assumptions about how the

421
00:16:36,069 --> 00:16:40,229
architecture works so they are

422
00:16:37,779 --> 00:16:42,549
applicable to multiple architectures

423
00:16:40,230 --> 00:16:43,510
thank you let's thank the speaker one

424
00:16:42,549 --> 00:16:48,179
more time

425
00:16:43,510 --> 00:16:48,179
[Applause]

