1
00:00:09,850 --> 00:00:16,109
so hello everyone I'm Stefan

2
00:00:13,310 --> 00:00:18,510
goodbye dreidel or Logan flight

3
00:00:16,109 --> 00:00:23,340
and suppose we have a machine this is an

4
00:00:18,510 --> 00:00:24,630
Intel Core i7 7800 X and it's one of the

5
00:00:23,340 --> 00:00:26,730
machines in the office so and the first

6
00:00:24,630 --> 00:00:29,340
one you see it's a CPU it has all the

7
00:00:26,730 --> 00:00:33,030
mitigations against attacks we've seen

8
00:00:29,340 --> 00:00:36,329
in the previous year so meltdown Spectre

9
00:00:33,030 --> 00:00:38,460
for shadow it's all in there and the

10
00:00:36,329 --> 00:00:40,890
question is of course we have all these

11
00:00:38,460 --> 00:00:41,989
mitigations so what can we actually do

12
00:00:40,890 --> 00:00:45,270
as an attacker

13
00:00:41,989 --> 00:00:47,370
well surfeit have to set it to a shadow

14
00:00:45,270 --> 00:00:50,370
file and we look at it as a normal user

15
00:00:47,370 --> 00:00:52,349
then we see permission denied but if we

16
00:00:50,370 --> 00:00:53,849
try to look at it as a root user we can

17
00:00:52,350 --> 00:00:56,010
of course see the password hashes and

18
00:00:53,850 --> 00:00:57,600
what we have here is we go back as a

19
00:00:56,010 --> 00:01:00,329
normal user and we have here a real

20
00:00:57,600 --> 00:01:03,629
program that actually leaks the password

21
00:01:00,329 --> 00:01:05,970
hash from the root account so meet

22
00:01:03,629 --> 00:01:07,830
welcome flight data loader riddle a new

23
00:01:05,970 --> 00:01:09,900
class of speculative execution attacks

24
00:01:07,830 --> 00:01:11,429
that knows no boundaries and to show you

25
00:01:09,900 --> 00:01:12,659
that that notion of boundaries I'm first

26
00:01:11,430 --> 00:01:14,430
going to talk a bit about previous

27
00:01:12,659 --> 00:01:16,440
levels and privilege levels are just

28
00:01:14,430 --> 00:01:19,590
social constructs so we have different

29
00:01:16,440 --> 00:01:21,300
security domains so for instance in this

30
00:01:19,590 --> 00:01:23,760
case what I've shown you is that riddle

31
00:01:21,300 --> 00:01:25,410
works on to two different threats so you

32
00:01:23,760 --> 00:01:28,410
have a victim Challinor and attacker

33
00:01:25,410 --> 00:01:29,670
chat which are more security domains so

34
00:01:28,410 --> 00:01:32,460
the question is of course can we League

35
00:01:29,670 --> 00:01:34,350
across those and so for instance we have

36
00:01:32,460 --> 00:01:35,850
the kernel and yes we can leak from the

37
00:01:34,350 --> 00:01:38,490
kernel

38
00:01:35,850 --> 00:01:39,270
we leak across VMs we can leak from the

39
00:01:38,490 --> 00:01:43,050
hypervisor

40
00:01:39,270 --> 00:01:45,289
and we can leak from SGX and close so we

41
00:01:43,050 --> 00:01:47,910
leak across all security domains

42
00:01:45,290 --> 00:01:48,870
another question is of course can we

43
00:01:47,910 --> 00:01:52,080
leak in your web browser

44
00:01:48,870 --> 00:01:54,540
so we also implemented this and the we

45
00:01:52,080 --> 00:01:57,000
found out that we actually can and we

46
00:01:54,540 --> 00:01:59,190
reproduce riddle in Mozilla Firefox

47
00:01:57,000 --> 00:02:02,190
more specifically the spider monkey

48
00:01:59,190 --> 00:02:03,480
Michelle and what this means is that

49
00:02:02,190 --> 00:02:05,520
there's actually no need for special

50
00:02:03,480 --> 00:02:07,410
instructions there's no needs for sale

51
00:02:05,520 --> 00:02:10,560
flush you can just do it in a web

52
00:02:07,410 --> 00:02:12,870
browser League across security domains

53
00:02:10,560 --> 00:02:14,700
and in the browser

54
00:02:12,870 --> 00:02:17,099
another social construct I'm going to

55
00:02:14,700 --> 00:02:19,890
talk about are memory addresses so we

56
00:02:17,099 --> 00:02:21,690
all remember these logos meld inspector

57
00:02:19,890 --> 00:02:23,549
and for set up and what they showed us

58
00:02:21,690 --> 00:02:26,130
is that we can speculatively leak from

59
00:02:23,550 --> 00:02:27,590
addresses and what that means for our

60
00:02:26,130 --> 00:02:30,230
mitigation efforts

61
00:02:27,590 --> 00:02:33,140
is that we actually focus on isolating

62
00:02:30,230 --> 00:02:35,030
or masking these addresses so for

63
00:02:33,140 --> 00:02:36,649
instance Spector shows that you can

64
00:02:35,030 --> 00:02:38,540
access out-of-bounds addresses

65
00:02:36,650 --> 00:02:41,690
speculatively sorting of an away where

66
00:02:38,540 --> 00:02:43,340
your access beyond to their way modern

67
00:02:41,690 --> 00:02:45,500
showed that we can meet Colonel data

68
00:02:43,340 --> 00:02:46,760
from virtual addresses and foreshadows

69
00:02:45,500 --> 00:02:48,320
shows that we can also lead from

70
00:02:46,760 --> 00:02:49,280
physical addresses as long as they're an

71
00:02:48,320 --> 00:02:51,799
11 D cash

72
00:02:49,280 --> 00:02:53,810
so what's what are the mitigation so

73
00:02:51,800 --> 00:02:56,150
which factor one of the mitigations is

74
00:02:53,810 --> 00:02:58,190
to master way index to limit at address

75
00:02:56,150 --> 00:02:59,720
right you can access what Mel done we

76
00:02:58,190 --> 00:03:02,359
earn a colonel addresses from user space

77
00:02:59,720 --> 00:03:04,670
and read for shadow we simply invalidate

78
00:03:02,360 --> 00:03:07,280
the physical address when in case we are

79
00:03:04,670 --> 00:03:09,649
in mapping a page for instance so an

80
00:03:07,280 --> 00:03:12,500
example of this is what now down what

81
00:03:09,650 --> 00:03:14,900
does what use it what does it look like

82
00:03:12,500 --> 00:03:16,520
before is that with Mel done we had what

83
00:03:14,900 --> 00:03:18,260
like a single address space with

84
00:03:16,520 --> 00:03:19,940
everything inside they're living happily

85
00:03:18,260 --> 00:03:21,649
so we had the user space and we had the

86
00:03:19,940 --> 00:03:23,780
kernel and the problem was of course

87
00:03:21,650 --> 00:03:25,970
would meld on you can Li kernel data

88
00:03:23,780 --> 00:03:27,650
from virtual addresses so what does it

89
00:03:25,970 --> 00:03:30,230
look like nowadays we have two different

90
00:03:27,650 --> 00:03:33,230
address spaces there in previous one

91
00:03:30,230 --> 00:03:34,579
with a user space and the previous one

92
00:03:33,230 --> 00:03:36,619
with the user space and kernel memory

93
00:03:34,580 --> 00:03:38,989
mapped it great

94
00:03:36,620 --> 00:03:41,540
so pre visit text the exploit addressing

95
00:03:38,989 --> 00:03:43,690
and the mitigation works mostly by

96
00:03:41,540 --> 00:03:45,890
isolating and masking these addresses

97
00:03:43,690 --> 00:03:48,140
little however does not depend on

98
00:03:45,890 --> 00:03:50,899
addressing and what this means is that

99
00:03:48,140 --> 00:03:53,510
it can bypass all security based all

100
00:03:50,900 --> 00:03:55,910
address based security checks and that

101
00:03:53,510 --> 00:03:58,239
means that riddle is hard to mitigate so

102
00:03:55,910 --> 00:04:01,549
what CPUs industry will actually affect

103
00:03:58,239 --> 00:04:03,980
well we bought Intel and AMD CPUs from

104
00:04:01,549 --> 00:04:06,350
almost every generation since 2008 and

105
00:04:03,980 --> 00:04:09,548
we sent the invoices to Herbert or

106
00:04:06,350 --> 00:04:12,109
professor and this is what it looks like

107
00:04:09,549 --> 00:04:15,200
you could name it for instance the lodge

108
00:04:12,110 --> 00:04:17,060
hyper tread collider and what we found

109
00:04:15,200 --> 00:04:20,089
is that will actually works on all

110
00:04:17,060 --> 00:04:21,829
mainstream Intel CPUs since 2008 so

111
00:04:20,089 --> 00:04:26,299
here's the list of CPUs we tested it on

112
00:04:21,829 --> 00:04:28,909
and then we submitted the paper and we

113
00:04:26,300 --> 00:04:31,280
look at the Intel website and you see a

114
00:04:28,910 --> 00:04:33,200
new announcement of the coffee leg

115
00:04:31,280 --> 00:04:35,090
refresh the ninth generation CPUs and

116
00:04:33,200 --> 00:04:37,010
the interesting bit here is that they

117
00:04:35,090 --> 00:04:39,500
mention in silicon mitigations again

118
00:04:37,010 --> 00:04:41,030
smell diner for shadow so we thought

119
00:04:39,500 --> 00:04:42,440
well let's buy it we

120
00:04:41,030 --> 00:04:44,750
the core I nine nine thousand nine

121
00:04:42,440 --> 00:04:47,630
hundred K and we send another invoice to

122
00:04:44,750 --> 00:04:52,300
her but of course Sarah device

123
00:04:47,630 --> 00:04:57,740
one day after recently to pay for it and

124
00:04:52,300 --> 00:04:59,660
it also works so of course the question

125
00:04:57,740 --> 00:05:02,180
is we don't only have Intel we also have

126
00:04:59,660 --> 00:05:04,610
other companies like Indian arm and we

127
00:05:02,180 --> 00:05:06,890
try to reproduce it ourselves on AMD and

128
00:05:04,610 --> 00:05:08,810
we found that real does not affect AMD

129
00:05:06,890 --> 00:05:12,289
so we tested try to test it on three

130
00:05:08,810 --> 00:05:15,260
different CPUs but I don't seem to be

131
00:05:12,290 --> 00:05:17,390
affected and forearm it's also the case

132
00:05:15,260 --> 00:05:20,240
that I don't seem to be affected as we

133
00:05:17,390 --> 00:05:20,780
got an official statement from arm so

134
00:05:20,240 --> 00:05:24,710
nice

135
00:05:20,780 --> 00:05:27,109
ritalin site runs great on Intel but

136
00:05:24,710 --> 00:05:30,049
where are we actually leaking from so

137
00:05:27,110 --> 00:05:32,510
here's a part of the skylight diagram

138
00:05:30,050 --> 00:05:34,490
and previous attacks I headed a bit easy

139
00:05:32,510 --> 00:05:36,409
and they leave from caches we all know

140
00:05:34,490 --> 00:05:38,810
that nowadays and caches are well

141
00:05:36,410 --> 00:05:41,540
documented and well understood but

142
00:05:38,810 --> 00:05:43,400
riddle does not leak from the caches but

143
00:05:41,540 --> 00:05:45,460
what else is student to leak from so

144
00:05:43,400 --> 00:05:48,679
there are other see internal CPU buffers

145
00:05:45,460 --> 00:05:50,810
delightful buffer the store buffer and

146
00:05:48,680 --> 00:05:52,910
the low port for instance and but there

147
00:05:50,810 --> 00:05:55,040
is also more than that so we here you

148
00:05:52,910 --> 00:05:57,050
see like an overview of the quad core in

149
00:05:55,040 --> 00:05:59,240
this Chi Lake and there's also run cache

150
00:05:57,050 --> 00:06:01,130
memory that we can leak form so we can

151
00:05:59,240 --> 00:06:04,370
leak from various internal CPU buffers

152
00:06:01,130 --> 00:06:06,200
and what we show is really that will is

153
00:06:04,370 --> 00:06:08,240
a class of speculative execution attacks

154
00:06:06,200 --> 00:06:11,360
and it's also known in the media

155
00:06:08,240 --> 00:06:13,250
nowadays especially by Intel as NDS or

156
00:06:11,360 --> 00:06:17,060
micro as oxygen architectural data

157
00:06:13,250 --> 00:06:18,710
sampling and for this talk since it's

158
00:06:17,060 --> 00:06:20,660
only going to be brief I'm going to

159
00:06:18,710 --> 00:06:23,180
focus on one instance of riddle which is

160
00:06:20,660 --> 00:06:25,880
the rifle buffers so we look at the

161
00:06:23,180 --> 00:06:27,590
manuals and we try to find a bit of more

162
00:06:25,880 --> 00:06:29,000
information about all these internal CPU

163
00:06:27,590 --> 00:06:31,010
buffers and there's some mentions here

164
00:06:29,000 --> 00:06:33,410
and there but the problem is there's not

165
00:06:31,010 --> 00:06:35,140
really much of an explanation there so

166
00:06:33,410 --> 00:06:37,610
where would you start to look otherwise

167
00:06:35,140 --> 00:06:39,770
well that's why we started reading

168
00:06:37,610 --> 00:06:42,229
patterns and stats so here's the list of

169
00:06:39,770 --> 00:06:44,690
patterns we actually read and well I'm

170
00:06:42,229 --> 00:06:46,669
here nowadays sorry survived and now I

171
00:06:44,690 --> 00:06:49,729
can be talk to you about these

172
00:06:46,669 --> 00:06:52,070
rifle buffers for instance but wait what

173
00:06:49,729 --> 00:06:53,450
are these mindful buffers so they were

174
00:06:52,070 --> 00:06:55,248
never mentioned during my computer s

175
00:06:53,450 --> 00:06:58,128
lecture class maybe I didn't

176
00:06:55,249 --> 00:07:01,399
any attention I don't know well lightful

177
00:06:58,129 --> 00:07:03,289
buffers you have to level 1d cash the

178
00:07:01,399 --> 00:07:05,599
execution units and the level 2 cache

179
00:07:03,289 --> 00:07:08,688
and what lightful buffers are they're

180
00:07:05,599 --> 00:07:10,759
the central unit in between these and to

181
00:07:08,689 --> 00:07:13,009
improve memory throughput so they in the

182
00:07:10,759 --> 00:07:14,629
Intel CPUs have multiple roles and they

183
00:07:13,009 --> 00:07:17,059
allow for a synchronous memory request

184
00:07:14,629 --> 00:07:18,649
they are used to implement lowest

185
00:07:17,059 --> 00:07:21,139
questioning white combining an N cache

186
00:07:18,649 --> 00:07:22,879
memory and for this talk I'm just going

187
00:07:21,139 --> 00:07:24,559
to focus on the first one if you want to

188
00:07:22,879 --> 00:07:26,509
know more about the other parts of

189
00:07:24,559 --> 00:07:29,749
delightful buffer I invite you to read

190
00:07:26,509 --> 00:07:31,579
the paper so one of the problems if you

191
00:07:29,749 --> 00:07:33,019
designers have is well what to do in the

192
00:07:31,579 --> 00:07:35,569
cache miss so let's say we're accessing

193
00:07:33,019 --> 00:07:38,899
memory so we send out the memory request

194
00:07:35,569 --> 00:07:40,879
and we find the notes and the level 1 D

195
00:07:38,899 --> 00:07:42,499
cache well one thing you could do is you

196
00:07:40,879 --> 00:07:44,059
could just wait for it to complete but

197
00:07:42,499 --> 00:07:45,860
what it means is that you just block all

198
00:07:44,059 --> 00:07:47,659
the loads and stores so what's the

199
00:07:45,860 --> 00:07:49,459
solution you actually keep track of the

200
00:07:47,659 --> 00:07:51,919
address in the L of D so you send out

201
00:07:49,459 --> 00:07:53,959
the memory request you allocate the L of

202
00:07:51,919 --> 00:07:56,448
e entry you store the address in the L

203
00:07:53,959 --> 00:07:58,279
of V and in the meantime you do other

204
00:07:56,449 --> 00:07:59,569
things you use basically serve order

205
00:07:58,279 --> 00:08:01,699
loads and stores while you wait for this

206
00:07:59,569 --> 00:08:04,849
data and at some point this request

207
00:08:01,699 --> 00:08:07,759
eventually completes one of the issues

208
00:08:04,849 --> 00:08:10,909
here is allocate LD entry so what's the

209
00:08:07,759 --> 00:08:12,769
problem allocate L of the entry all of

210
00:08:10,909 --> 00:08:14,419
the entry may actually contain data from

211
00:08:12,769 --> 00:08:18,169
a previous load for instance and this is

212
00:08:14,419 --> 00:08:20,239
exactly what will exploit and we

213
00:08:18,169 --> 00:08:21,859
performed several experiment experiments

214
00:08:20,239 --> 00:08:24,138
for this instance of real so there you

215
00:08:21,860 --> 00:08:25,639
can find them in the paper but important

216
00:08:24,139 --> 00:08:27,919
conclusion here is that this particular

217
00:08:25,639 --> 00:08:31,459
little instance leaks from landfill

218
00:08:27,919 --> 00:08:33,588
buffers now we get to the important bits

219
00:08:31,459 --> 00:08:36,649
so how do we actually mount a real

220
00:08:33,589 --> 00:08:38,149
attack so let's say that this is a trap

221
00:08:36,649 --> 00:08:40,639
model we have a victim vm in the clouds

222
00:08:38,149 --> 00:08:43,458
and we basically try to get a vm on the

223
00:08:40,639 --> 00:08:45,230
same server and ideally we try to get it

224
00:08:43,458 --> 00:08:47,349
colocation in such a way that delightful

225
00:08:45,230 --> 00:08:50,360
buffers are shared between these two VMs

226
00:08:47,350 --> 00:08:53,059
and the victim vm runs a ssh server and

227
00:08:50,360 --> 00:08:54,740
there's a say server whenever you try to

228
00:08:53,059 --> 00:08:57,350
connect it accesses that sees where

229
00:08:54,740 --> 00:08:59,809
shadow file so we have treat challenges

230
00:08:57,350 --> 00:09:02,720
here getting the data in flight leaking

231
00:08:59,809 --> 00:09:05,329
the data and filtering the data so how

232
00:09:02,720 --> 00:09:08,089
do we get the data in flight well we run

233
00:09:05,329 --> 00:09:08,810
in as a judge client and this SSH client

234
00:09:08,089 --> 00:09:11,330
keeps connecting

235
00:09:08,810 --> 00:09:14,420
to the ssh server upon which as a safe

236
00:09:11,330 --> 00:09:17,660
SSH server loads etc shadow to the LED

237
00:09:14,420 --> 00:09:19,010
and the contents from etc shadow run on

238
00:09:17,660 --> 00:09:21,410
flight so we keep making these

239
00:09:19,010 --> 00:09:23,420
connections over and over again and that

240
00:09:21,410 --> 00:09:26,600
solves our first problem like getting

241
00:09:23,420 --> 00:09:28,819
the data in flight now that the data is

242
00:09:26,600 --> 00:09:30,650
in flight we actually want to leak it so

243
00:09:28,820 --> 00:09:33,740
we run a riddle program on our server

244
00:09:30,650 --> 00:09:35,209
and which leaks the data from the LV of

245
00:09:33,740 --> 00:09:37,730
course you're wondering like ok what

246
00:09:35,210 --> 00:09:39,010
does this program look like so here we

247
00:09:37,730 --> 00:09:42,320
have two three parts of the program

248
00:09:39,010 --> 00:09:44,390
flush riddle and reload and what flash

249
00:09:42,320 --> 00:09:47,600
does is well we have reallocated proper

250
00:09:44,390 --> 00:09:49,400
way and we basically flush every entry

251
00:09:47,600 --> 00:09:50,839
inappropriate and what this does is it

252
00:09:49,400 --> 00:09:53,020
make sure that every entry you can

253
00:09:50,839 --> 00:09:55,760
access and the proper way is not slow

254
00:09:53,020 --> 00:09:58,250
then we run our riddle program and the

255
00:09:55,760 --> 00:10:01,220
first highlight is basically that we we

256
00:09:58,250 --> 00:10:03,380
form a null pointer speculatively but it

257
00:10:01,220 --> 00:10:05,920
also works for any other invalid or

258
00:10:03,380 --> 00:10:09,290
unmapped page including demand paging

259
00:10:05,920 --> 00:10:11,000
then we speculate if we read some bytes

260
00:10:09,290 --> 00:10:13,579
and now we want to leave it and this is

261
00:10:11,000 --> 00:10:15,770
the second step in a riddle program and

262
00:10:13,580 --> 00:10:17,839
it's actually using that byte as an

263
00:10:15,770 --> 00:10:19,310
index to select the entry in the proper

264
00:10:17,839 --> 00:10:23,060
way to load that so now that one is

265
00:10:19,310 --> 00:10:25,040
cached and now that we have to leave the

266
00:10:23,060 --> 00:10:26,989
bytes we can do the weilert step and the

267
00:10:25,040 --> 00:10:29,360
reload step basically times every entry

268
00:10:26,990 --> 00:10:31,130
so the first entry is slow the second

269
00:10:29,360 --> 00:10:32,930
entry is flow the third entry is flow

270
00:10:31,130 --> 00:10:35,030
the fourth entry is false and now we

271
00:10:32,930 --> 00:10:38,060
know it's number four so byte 4 was the

272
00:10:35,030 --> 00:10:40,459
one that we leaked great we can also now

273
00:10:38,060 --> 00:10:41,989
leak the data but of course there's

274
00:10:40,460 --> 00:10:44,600
another problem actually filtering this

275
00:10:41,990 --> 00:10:45,320
data so riddle is like drinking from a

276
00:10:44,600 --> 00:10:47,210
firehose

277
00:10:45,320 --> 00:10:49,490
you just get whatever data is in flight

278
00:10:47,210 --> 00:10:51,440
so the question is of course how can we

279
00:10:49,490 --> 00:10:53,450
actually filter this data so in this

280
00:10:51,440 --> 00:10:56,360
particular example we want to leave from

281
00:10:53,450 --> 00:10:58,880
etc shadow and the first one in its

282
00:10:56,360 --> 00:11:01,970
search it set its etc shadow is usually

283
00:10:58,880 --> 00:11:03,320
for the root account and one important

284
00:11:01,970 --> 00:11:06,830
thing to notice is that always starts

285
00:11:03,320 --> 00:11:08,959
with would call it so what we do here is

286
00:11:06,830 --> 00:11:11,750
we use prefix matching so if we try to

287
00:11:08,959 --> 00:11:13,760
see if the data matches and then we

288
00:11:11,750 --> 00:11:16,370
learn about a new byte and if it's no

289
00:11:13,760 --> 00:11:19,189
match then we simply ignore the data so

290
00:11:16,370 --> 00:11:21,290
what does it actually look like so we

291
00:11:19,190 --> 00:11:22,950
have an own prefix which is wood Colin

292
00:11:21,290 --> 00:11:25,170
and now we perform

293
00:11:22,950 --> 00:11:27,959
so now we get some random data and we

294
00:11:25,170 --> 00:11:29,639
check the if we find if we actually see

295
00:11:27,959 --> 00:11:31,829
which color and in this case we don't so

296
00:11:29,639 --> 00:11:33,930
we ignore the data we get another load

297
00:11:31,829 --> 00:11:36,449
and here we see okay there's a match

298
00:11:33,930 --> 00:11:38,550
it's huge : and we learn a new byte and

299
00:11:36,450 --> 00:11:40,800
we don't just don't do this one time we

300
00:11:38,550 --> 00:11:42,209
make sure we do this several times so

301
00:11:40,800 --> 00:11:44,010
that we're actually sure we're getting

302
00:11:42,209 --> 00:11:47,160
the right data so now we know another

303
00:11:44,010 --> 00:11:49,470
byte and so now we have not we doing a

304
00:11:47,160 --> 00:11:52,920
turtle or for instance we see we've made

305
00:11:49,470 --> 00:11:55,199
its no match and then we get the same

306
00:11:52,920 --> 00:11:57,209
load again and then we see we match food

307
00:11:55,199 --> 00:11:59,819
column as and learn a new byte so we

308
00:11:57,209 --> 00:12:03,510
basically try to use previous data to

309
00:11:59,820 --> 00:12:05,370
stitch together new information so we

310
00:12:03,510 --> 00:12:08,459
solved the third challenge as well we

311
00:12:05,370 --> 00:12:10,110
can now filter the data there of course

312
00:12:08,459 --> 00:12:11,670
more examples in the paper if you're

313
00:12:10,110 --> 00:12:14,399
interested so you can leaked internal

314
00:12:11,670 --> 00:12:16,380
CPU data for for example the page tables

315
00:12:14,399 --> 00:12:18,449
you can perform an arbitrary journal

316
00:12:16,380 --> 00:12:22,170
read if you want to and you can also do

317
00:12:18,449 --> 00:12:23,880
leaking in the browser so mitigation of

318
00:12:22,170 --> 00:12:26,069
course we are also interested in well

319
00:12:23,880 --> 00:12:27,750
we're all in panic modes we we have all

320
00:12:26,070 --> 00:12:30,300
these issues we want to make sure that

321
00:12:27,750 --> 00:12:31,980
they actually solved and so Intel

322
00:12:30,300 --> 00:12:34,560
released a new micro code update for

323
00:12:31,980 --> 00:12:37,050
this and this new micro code updates

324
00:12:34,560 --> 00:12:39,239
patches the ver W instruction which is a

325
00:12:37,050 --> 00:12:41,910
very exotic instruction that nobody ever

326
00:12:39,240 --> 00:12:44,910
used and it's otherwise all the buffers

327
00:12:41,910 --> 00:12:48,060
there are also special assembly snippets

328
00:12:44,910 --> 00:12:50,339
in case you you want to do this and you

329
00:12:48,060 --> 00:12:52,170
don't have the micro code update you can

330
00:12:50,339 --> 00:12:53,670
find more in Intel's white paper like

331
00:12:52,170 --> 00:12:56,310
this so this is what you use to mitigate

332
00:12:53,670 --> 00:12:58,079
a riddle on the same threat but of

333
00:12:56,310 --> 00:12:59,790
course you also have this situation with

334
00:12:58,079 --> 00:13:02,160
hyper threading so what's the solution

335
00:12:59,790 --> 00:13:04,890
there well int'l proposes that you can

336
00:13:02,160 --> 00:13:06,689
use scheduling where you basically make

337
00:13:04,890 --> 00:13:09,029
sure that both shots are running from

338
00:13:06,690 --> 00:13:10,470
the same security domain and you make

339
00:13:09,029 --> 00:13:13,319
sure that they do proper synchronization

340
00:13:10,470 --> 00:13:14,970
for the fer W instruction or you can

341
00:13:13,319 --> 00:13:16,219
just disable Intel hyper-threading like

342
00:13:14,970 --> 00:13:20,760
everyone else did

343
00:13:16,220 --> 00:13:23,010
so disclosure process so this is the

344
00:13:20,760 --> 00:13:24,990
timeline from our point of view so in

345
00:13:23,010 --> 00:13:28,199
September we discovered riddle and

346
00:13:24,990 --> 00:13:31,410
responded to Intel reported to Intel and

347
00:13:28,199 --> 00:13:33,149
on November 1st we submitted riddle to

348
00:13:31,410 --> 00:13:36,329
this conference because Intel told us

349
00:13:33,149 --> 00:13:38,610
like their order finders but they're not

350
00:13:36,330 --> 00:13:40,530
interested in an academic paper so we

351
00:13:38,610 --> 00:13:43,950
went ahead where the paper submitted it

352
00:13:40,530 --> 00:13:46,230
to little to S&T and then and on

353
00:13:43,950 --> 00:13:49,410
December 2nd until tells us there are

354
00:13:46,230 --> 00:13:51,570
three other finders Georgie who and done

355
00:13:49,410 --> 00:13:53,850
an la lumière and George you might saw

356
00:13:51,570 --> 00:13:56,400
that say eat we talked a bit with them

357
00:13:53,850 --> 00:13:59,070
and at some points we agree that we are

358
00:13:56,400 --> 00:14:02,880
collaborated on the paper and that's

359
00:13:59,070 --> 00:14:06,180
also why his name is on there so we

360
00:14:02,880 --> 00:14:08,700
invert your efforts together but there

361
00:14:06,180 --> 00:14:10,920
are many more finders but until reported

362
00:14:08,700 --> 00:14:13,500
them just before the disclosure most of

363
00:14:10,920 --> 00:14:16,589
them and here are all the finders that

364
00:14:13,500 --> 00:14:18,420
you have and if you want to know more

365
00:14:16,590 --> 00:14:21,060
about this like an exact timeline then

366
00:14:18,420 --> 00:14:23,339
you can go to NDS attack so calm

367
00:14:21,060 --> 00:14:26,280
finally we're also at a tool to verify

368
00:14:23,340 --> 00:14:29,400
your system this includes from meltdown

369
00:14:26,280 --> 00:14:33,780
for shadow specter but also the new MDS

370
00:14:29,400 --> 00:14:35,490
attacks so conclusion we thought well

371
00:14:33,780 --> 00:14:37,589
spectrum all down maybe it's just one

372
00:14:35,490 --> 00:14:40,080
mistake for shadow maybe the second

373
00:14:37,590 --> 00:14:41,730
mistake but here we actually show that

374
00:14:40,080 --> 00:14:43,500
there's a new class of speculative

375
00:14:41,730 --> 00:14:46,590
execution of the text and it is a

376
00:14:43,500 --> 00:14:48,180
fundamental issue in the CPUs and there

377
00:14:46,590 --> 00:14:50,420
are many more buffers order than just

378
00:14:48,180 --> 00:14:53,609
caches to actually leaked data form and

379
00:14:50,420 --> 00:14:55,020
what the problem is which will in our

380
00:14:53,610 --> 00:14:57,090
particular case is that it's hard to

381
00:14:55,020 --> 00:15:00,750
mitigate because it does not rely on any

382
00:14:57,090 --> 00:15:02,490
of the addresses and I've also shown you

383
00:15:00,750 --> 00:15:05,340
today that riddle works across different

384
00:15:02,490 --> 00:15:08,040
security dimension in the browser and

385
00:15:05,340 --> 00:15:09,660
you can reach me on Twitter as well as

386
00:15:08,040 --> 00:15:13,069
three sec and you can find more

387
00:15:09,660 --> 00:15:24,159
information at NDSU Texas cop thanks

388
00:15:13,070 --> 00:15:24,159
[Applause]

389
00:15:26,060 --> 00:15:31,729
questions come to the center I know this

390
00:15:29,700 --> 00:15:34,080
just got released a couple days ago so

391
00:15:31,730 --> 00:15:36,210
because my lab my students in my lab

392
00:15:34,080 --> 00:15:37,980
came to show me this right I was like oh

393
00:15:36,210 --> 00:15:40,380
that's the paper that's not on the

394
00:15:37,980 --> 00:15:42,110
schedule yet so go ahead ask your

395
00:15:40,380 --> 00:15:45,689
questions name and affiliation please

396
00:15:42,110 --> 00:15:49,400
hey my name is near I'm security

397
00:15:45,690 --> 00:15:49,400
researcher with Intel

398
00:15:51,339 --> 00:15:57,759
hoping to help address this of course so

399
00:15:54,959 --> 00:16:00,008
first question if you could describe the

400
00:15:57,759 --> 00:16:03,490
coordinated disclosure process and what

401
00:16:00,009 --> 00:16:06,519
that was like areas to improve and then

402
00:16:03,490 --> 00:16:09,459
second question the effectiveness of the

403
00:16:06,519 --> 00:16:11,670
proposed mitigations MD clear things of

404
00:16:09,459 --> 00:16:11,670
that nature

405
00:16:11,759 --> 00:16:20,860
is it a categorical fix or what else is

406
00:16:15,399 --> 00:16:23,309
there to be done okay so it's one of

407
00:16:20,860 --> 00:16:26,980
these double questions first question is

408
00:16:23,309 --> 00:16:30,309
what can you highlight your disclosure

409
00:16:26,980 --> 00:16:32,290
process I'm guessing with Intel and any

410
00:16:30,309 --> 00:16:33,579
lessons learned that the audience can

411
00:16:32,290 --> 00:16:35,680
take since it'll probably be mean more

412
00:16:33,579 --> 00:16:40,209
process or full flaws hopefully an AMD

413
00:16:35,680 --> 00:16:43,359
and arm as well we love everyone let's

414
00:16:40,209 --> 00:16:45,849
all do that one now get that okay yes

415
00:16:43,360 --> 00:16:51,670
sir I think the the disclosure process

416
00:16:45,850 --> 00:16:53,259
was a really interesting experience not

417
00:16:51,670 --> 00:16:55,449
one that I would like to do again but

418
00:16:53,259 --> 00:16:58,720
unfortunately something that we have to

419
00:16:55,449 --> 00:17:00,819
do at this point and it feels like

420
00:16:58,720 --> 00:17:04,120
disclosure process are actually getting

421
00:17:00,819 --> 00:17:05,530
longer and the problem is that it's a

422
00:17:04,119 --> 00:17:08,438
it's a parental problem and the hardware

423
00:17:05,530 --> 00:17:09,849
right so so for issues like you have a

424
00:17:08,439 --> 00:17:12,100
buffer overflow you just patch the

425
00:17:09,849 --> 00:17:14,438
software you can release it and maybe a

426
00:17:12,099 --> 00:17:16,809
few months with hardware box it becomes

427
00:17:14,439 --> 00:17:19,329
less trivial to do this so with hardware

428
00:17:16,809 --> 00:17:21,520
box it can take maybe like five years to

429
00:17:19,329 --> 00:17:22,569
actually roll this out in a new

430
00:17:21,520 --> 00:17:25,119
microstructure

431
00:17:22,569 --> 00:17:27,459
verify the entire microarchitecture and

432
00:17:25,119 --> 00:17:29,469
what you can do today is only try to

433
00:17:27,459 --> 00:17:31,510
come up with a solution that you can

434
00:17:29,470 --> 00:17:33,610
just make sure that it doesn't work

435
00:17:31,510 --> 00:17:36,100
fully like you introduce a mitigation

436
00:17:33,610 --> 00:17:37,750
you and that's it but if you want to

437
00:17:36,100 --> 00:17:39,610
really fix it in the hardware level it's

438
00:17:37,750 --> 00:17:43,120
going to take several years and I get

439
00:17:39,610 --> 00:17:46,959
why the embargo is more like almost a

440
00:17:43,120 --> 00:17:48,399
year because even if you if you don't

441
00:17:46,960 --> 00:17:50,559
release a new process so you have to

442
00:17:48,399 --> 00:17:52,330
think of a way to mitigate this at the

443
00:17:50,559 --> 00:17:55,418
software level or the micro code level

444
00:17:52,330 --> 00:17:58,899
so and take a long time for that okay

445
00:17:55,419 --> 00:18:01,299
part two was I guess was the MDS clear

446
00:17:58,899 --> 00:18:02,399
is a proposed mitigation strategy I'm

447
00:18:01,299 --> 00:18:03,960
guessing microcode Bay

448
00:18:02,400 --> 00:18:06,830
I don't know maybe you know more about

449
00:18:03,960 --> 00:18:11,070
it what's your take on the effectiveness

450
00:18:06,830 --> 00:18:13,949
long-term viability of such solutions so

451
00:18:11,070 --> 00:18:15,450
like I said the problem is that the

452
00:18:13,950 --> 00:18:18,090
hardware's art now it's really hard to

453
00:18:15,450 --> 00:18:19,830
to mitigate now so the thing I said with

454
00:18:18,090 --> 00:18:21,959
the microcode you're just going to try

455
00:18:19,830 --> 00:18:23,760
and do the best you can and Andy player

456
00:18:21,960 --> 00:18:26,610
works for the for the real claws of

457
00:18:23,760 --> 00:18:28,260
attacks so you cannot just use it for W

458
00:18:26,610 --> 00:18:29,750
instruction and it will override the

459
00:18:28,260 --> 00:18:31,890
buffers but I think there are more

460
00:18:29,750 --> 00:18:34,500
fundamental issues in the Intel CPUs

461
00:18:31,890 --> 00:18:36,510
where like this kind of tricks won't

462
00:18:34,500 --> 00:18:39,840
won't work anymore and then it can

463
00:18:36,510 --> 00:18:41,370
become very problematic thank you yeah

464
00:18:39,840 --> 00:18:43,320
if we before in the next question if we

465
00:18:41,370 --> 00:18:46,189
look at the what happened in the time

466
00:18:43,320 --> 00:18:48,570
line respect er there are many different

467
00:18:46,190 --> 00:18:50,370
that's almost the hook there are many

468
00:18:48,570 --> 00:18:51,840
different defenses proposed and some of

469
00:18:50,370 --> 00:18:53,729
them added new bugs and none of them are

470
00:18:51,840 --> 00:18:55,590
our completely effective besides new

471
00:18:53,730 --> 00:18:59,430
silicones so one last question

472
00:18:55,590 --> 00:19:03,030
guru Raj from Georgia Tech in your

473
00:18:59,430 --> 00:19:07,370
opinion is this more of a bug or a

474
00:19:03,030 --> 00:19:10,320
feature because what we heard earlier

475
00:19:07,370 --> 00:19:13,139
about what Paul was talking on Spector

476
00:19:10,320 --> 00:19:15,179
the the thing that was explored there

477
00:19:13,140 --> 00:19:17,730
was actually a feature right branch

478
00:19:15,180 --> 00:19:19,950
speculation here the fact that the data

479
00:19:17,730 --> 00:19:22,410
seems to be getting forwarded or read

480
00:19:19,950 --> 00:19:24,330
without any address checking it seems to

481
00:19:22,410 --> 00:19:28,020
me more like a bug in the design as such

482
00:19:24,330 --> 00:19:30,540
any thoughts it depends on what you like

483
00:19:28,020 --> 00:19:31,980
it's always trade-offs right so at the

484
00:19:30,540 --> 00:19:33,750
one hand you have like the high

485
00:19:31,980 --> 00:19:35,550
performance computing people we actually

486
00:19:33,750 --> 00:19:36,990
want the most performance out of the CPU

487
00:19:35,550 --> 00:19:39,000
and they will probably see this as a

488
00:19:36,990 --> 00:19:41,610
feature like it improves the speculative

489
00:19:39,000 --> 00:19:43,740
execution or workloads run faster it's

490
00:19:41,610 --> 00:19:45,360
nice we are security people of course so

491
00:19:43,740 --> 00:19:47,700
we see this is a book you can leak data

492
00:19:45,360 --> 00:19:50,340
you're not supposed to see and I think

493
00:19:47,700 --> 00:19:52,860
that's like and that's why I think we

494
00:19:50,340 --> 00:19:55,409
should really work together as in the

495
00:19:52,860 --> 00:19:57,449
different domains and think about these

496
00:19:55,410 --> 00:20:00,390
issues and find the right trade-off and

497
00:19:57,450 --> 00:20:03,480
not primarily optimize from force just

498
00:20:00,390 --> 00:20:05,330
performance all right let's thank our

499
00:20:03,480 --> 00:20:07,390
speaker

500
00:20:05,330 --> 00:20:07,389
you

