1
00:00:08,640 --> 00:00:13,920
good morning everyone today I would like

2
00:00:11,940 --> 00:00:16,320
to present our research on challenges

3
00:00:13,920 --> 00:00:19,050
pitfalls and perils of using hardware

4
00:00:16,320 --> 00:00:22,230
performance counters for security this

5
00:00:19,050 --> 00:00:24,750
work was done in collaboration with John

6
00:00:22,230 --> 00:00:28,560
Warner Manos antonio khakis nicolas

7
00:00:24,750 --> 00:00:30,119
polychronic is Fabien Montrose my name

8
00:00:28,560 --> 00:00:33,530
is Sanjeev dass I'm a postdoc in

9
00:00:30,119 --> 00:00:35,820
University of North Carolina Chapel Hill

10
00:00:33,530 --> 00:00:38,460
modern processors provide a unique

11
00:00:35,820 --> 00:00:40,050
ability to visualize Hardware related

12
00:00:38,460 --> 00:00:43,290
activities through a special set of

13
00:00:40,050 --> 00:00:45,809
registers called Hardware preference

14
00:00:43,290 --> 00:00:48,379
counters they are available in

15
00:00:45,809 --> 00:00:51,120
processors for more than two decades

16
00:00:48,379 --> 00:00:54,199
they are used to monitor and measure

17
00:00:51,120 --> 00:00:57,530
Hardware events such as instructions

18
00:00:54,199 --> 00:00:59,970
memory accesses cache hits misses

19
00:00:57,530 --> 00:01:05,040
translation lookaside buffer hits and

20
00:00:59,970 --> 00:01:07,140
misses they have been used in many

21
00:01:05,040 --> 00:01:09,750
application domains such as software

22
00:01:07,140 --> 00:01:12,360
profiling debugging high-performance

23
00:01:09,750 --> 00:01:15,660
computing power analysis and we have

24
00:01:12,360 --> 00:01:19,770
seen recent rise in the use of reference

25
00:01:15,660 --> 00:01:22,170
counter in security domain at species

26
00:01:19,770 --> 00:01:24,119
provide a good foundation for measuring

27
00:01:22,170 --> 00:01:26,100
microarchitecture and information that

28
00:01:24,120 --> 00:01:28,560
are typically not available by any other

29
00:01:26,100 --> 00:01:32,490
traditional tools for example branch

30
00:01:28,560 --> 00:01:34,380
misses cache misses moreover they this

31
00:01:32,490 --> 00:01:37,408
information can be obtained at a very

32
00:01:34,380 --> 00:01:41,009
low performance overhead given these

33
00:01:37,409 --> 00:01:43,170
advantages it's no surprise that it has

34
00:01:41,010 --> 00:01:45,990
been used in security applications for

35
00:01:43,170 --> 00:01:49,409
various purposes such as malware

36
00:01:45,990 --> 00:01:54,240
detection rope detection rootkits

37
00:01:49,409 --> 00:01:57,690
development side channel attacks so the

38
00:01:54,240 --> 00:01:58,770
talk on Spector even for recent

39
00:01:57,690 --> 00:02:01,200
side-channel and attacks such as

40
00:01:58,770 --> 00:02:03,600
spectral emailed on researchers have

41
00:02:01,200 --> 00:02:06,920
looked into how performance can be used

42
00:02:03,600 --> 00:02:09,449
to defend these attacks

43
00:02:06,920 --> 00:02:13,349
given the wide popularity of performance

44
00:02:09,449 --> 00:02:15,179
counters I got an idea can we use

45
00:02:13,349 --> 00:02:19,019
performance counters to defeat data only

46
00:02:15,180 --> 00:02:22,440
attacks joining the new research who had

47
00:02:19,020 --> 00:02:25,050
the good experience on data only attacks

48
00:02:22,440 --> 00:02:27,000
and since I have some I had some good

49
00:02:25,050 --> 00:02:28,980
experience working on performance

50
00:02:27,000 --> 00:02:31,710
counter I thought it would be a quick

51
00:02:28,980 --> 00:02:36,239
win for me we can quickly write a paper

52
00:02:31,710 --> 00:02:38,580
and impress the group working on this

53
00:02:36,240 --> 00:02:40,500
idea we encountered several challenges

54
00:02:38,580 --> 00:02:43,620
there are hundreds of performance

55
00:02:40,500 --> 00:02:45,360
counter events understanding micro

56
00:02:43,620 --> 00:02:48,540
architectural interaction is a daunting

57
00:02:45,360 --> 00:02:51,900
task which which are and more of these

58
00:02:48,540 --> 00:02:54,000
events are related to one another so the

59
00:02:51,900 --> 00:02:55,980
bigger question was which events should

60
00:02:54,000 --> 00:02:57,680
we choose to model the data early

61
00:02:55,980 --> 00:03:01,200
attacks

62
00:02:57,680 --> 00:03:02,520
moreover there are many different

63
00:03:01,200 --> 00:03:04,980
frameworks built using hardware

64
00:03:02,520 --> 00:03:06,840
performance counters and the collection

65
00:03:04,980 --> 00:03:10,320
techniques varies across these these

66
00:03:06,840 --> 00:03:12,240
frameworks so the another question

67
00:03:10,320 --> 00:03:16,070
raised is is there a standard way to

68
00:03:12,240 --> 00:03:16,070
collect performance counter measurement

69
00:03:16,610 --> 00:03:22,880
after spending weeks on these challenges

70
00:03:19,320 --> 00:03:26,670
we encounter more substantial problems

71
00:03:22,880 --> 00:03:28,760
we found the seminal work by Weaver and

72
00:03:26,670 --> 00:03:30,839
McKee which highlighted the

73
00:03:28,760 --> 00:03:33,989
non-determinism issues in performance

74
00:03:30,840 --> 00:03:35,790
counter measurement of given by

75
00:03:33,989 --> 00:03:37,459
preference counter varies across

76
00:03:35,790 --> 00:03:39,929
different runs

77
00:03:37,459 --> 00:03:43,890
non-determinism issues drove us crazy

78
00:03:39,930 --> 00:03:46,830
we are baffled on top there is lack of

79
00:03:43,890 --> 00:03:48,690
application level profiling of

80
00:03:46,830 --> 00:03:51,750
performance counter data at the hardware

81
00:03:48,690 --> 00:03:53,880
level I felt to be on the edge of the

82
00:03:51,750 --> 00:03:59,850
cliff a quiquina idea turned out to be

83
00:03:53,880 --> 00:04:02,720
Herculean task we thought of it and we

84
00:03:59,850 --> 00:04:04,859
realize these issues cannot go unnoticed

85
00:04:02,720 --> 00:04:06,980
this beat falls must have been

86
00:04:04,860 --> 00:04:09,120
encountered by other researchers as well

87
00:04:06,980 --> 00:04:12,480
thus we started looking into the

88
00:04:09,120 --> 00:04:14,550
literature and we wanted to understand

89
00:04:12,480 --> 00:04:19,519
if they have been addressed how can we

90
00:04:14,550 --> 00:04:23,100
use them in our approach therefore after

91
00:04:19,519 --> 00:04:24,960
spending two months full-time into the

92
00:04:23,100 --> 00:04:27,270
literature survey we analyzed our own

93
00:04:24,960 --> 00:04:29,070
hundred papers from different

94
00:04:27,270 --> 00:04:31,710
application domains such as debugging

95
00:04:29,070 --> 00:04:35,460
power analysis performance analysis and

96
00:04:31,710 --> 00:04:36,400
security to supplement our understanding

97
00:04:35,460 --> 00:04:38,169
of how performance

98
00:04:36,400 --> 00:04:40,539
counters can be used by different

99
00:04:38,169 --> 00:04:43,120
approaches we sent questionnaire to the

100
00:04:40,540 --> 00:04:47,760
authors even though response turnout was

101
00:04:43,120 --> 00:04:50,550
not very high of these hundred papers

102
00:04:47,760 --> 00:04:52,360
fifty-six papers where those papers that

103
00:04:50,550 --> 00:04:53,620
specifically acknowledged the

104
00:04:52,360 --> 00:04:55,660
non-determinism issue

105
00:04:53,620 --> 00:04:57,910
they were mostly from non security

106
00:04:55,660 --> 00:05:00,520
application domains which initially

107
00:04:57,910 --> 00:05:03,639
where the users of hardware preference

108
00:05:00,520 --> 00:05:07,840
counter quite surprisingly we found that

109
00:05:03,639 --> 00:05:12,340
45% of these papers did have reservation

110
00:05:07,840 --> 00:05:14,169
of using performance counters they they

111
00:05:12,340 --> 00:05:18,609
do not recommend using preference

112
00:05:14,169 --> 00:05:20,979
counter because of two reasons one lack

113
00:05:18,610 --> 00:05:24,010
of determinism in the performance

114
00:05:20,979 --> 00:05:25,659
counter and two lack of portability of

115
00:05:24,010 --> 00:05:28,419
performance counter events across

116
00:05:25,660 --> 00:05:29,430
different micro architecture some events

117
00:05:28,419 --> 00:05:31,030
could be present in one

118
00:05:29,430 --> 00:05:34,860
microarchitecture but may not be

119
00:05:31,030 --> 00:05:37,570
available in the another architecture

120
00:05:34,860 --> 00:05:40,830
thus my initial idea of using a hardware

121
00:05:37,570 --> 00:05:46,510
preference counter for data only attacks

122
00:05:40,830 --> 00:05:49,060
defense was doomed next we look into 40

123
00:05:46,510 --> 00:05:53,620
security papers that has recently used s

124
00:05:49,060 --> 00:05:57,340
pcs we found that only 10% of them

125
00:05:53,620 --> 00:05:59,590
acknowledged non-determinism issues some

126
00:05:57,340 --> 00:06:03,630
of them argued that their approaches are

127
00:05:59,590 --> 00:06:03,630
not affected by non determinism

128
00:06:03,750 --> 00:06:12,400
it made us it made us constantly go back

129
00:06:09,340 --> 00:06:16,510
and rethink Hardware performance can be

130
00:06:12,400 --> 00:06:18,280
trusted which was initially raised which

131
00:06:16,510 --> 00:06:23,680
was the initial issue raised by Weber

132
00:06:18,280 --> 00:06:26,580
and McKee ten years earlier going

133
00:06:23,680 --> 00:06:29,610
through the literature survey we found

134
00:06:26,580 --> 00:06:33,389
two common failures that has been

135
00:06:29,610 --> 00:06:35,500
followed by many security approaches one

136
00:06:33,389 --> 00:06:37,960
mishandling upper phones counted data

137
00:06:35,500 --> 00:06:41,050
this mainly occurs because of lack of

138
00:06:37,960 --> 00:06:45,030
process level filtering at the hardware

139
00:06:41,050 --> 00:06:47,680
level and the other main his issue was

140
00:06:45,030 --> 00:06:50,188
ignored ins of ignoring non determinism

141
00:06:47,680 --> 00:06:55,199
issues non determinism mostly

142
00:06:50,189 --> 00:06:58,349
because of two reasons skid and over or

143
00:06:55,199 --> 00:07:00,509
under counting of the events to

144
00:06:58,349 --> 00:07:02,099
understand these issues in detail let us

145
00:07:00,509 --> 00:07:06,659
walk through hope reference counter data

146
00:07:02,099 --> 00:07:08,909
is collected from the hardware there are

147
00:07:06,659 --> 00:07:11,099
limited number of programmable counters

148
00:07:08,909 --> 00:07:14,099
that can be configured to a specific set

149
00:07:11,099 --> 00:07:16,800
of events the configuration is done in

150
00:07:14,099 --> 00:07:19,199
the kernel mode there are two modes to

151
00:07:16,800 --> 00:07:21,569
read the counter data poling and

152
00:07:19,199 --> 00:07:23,639
sampling in polling mode one can read

153
00:07:21,569 --> 00:07:29,219
the counter data at any given point of

154
00:07:23,639 --> 00:07:32,099
time for sampling mode a specific

155
00:07:29,219 --> 00:07:34,889
interrupt is provided by the performance

156
00:07:32,099 --> 00:07:37,709
monitoring subsystem called preference

157
00:07:34,889 --> 00:07:41,009
monitoring interrupts it can be

158
00:07:37,709 --> 00:07:43,729
configured to trigger trigger the

159
00:07:41,009 --> 00:07:47,550
interrupt after certain after n

160
00:07:43,729 --> 00:07:48,089
occurrence of this event as one would

161
00:07:47,550 --> 00:07:49,979
expect

162
00:07:48,089 --> 00:07:53,819
first the event has to be configured in

163
00:07:49,979 --> 00:07:56,039
the sample mode such as after an

164
00:07:53,819 --> 00:07:58,110
instruction retired as the program

165
00:07:56,039 --> 00:07:59,998
begins execution after n instructions

166
00:07:58,110 --> 00:08:03,329
the performance monitoring interrupt

167
00:07:59,999 --> 00:08:07,379
isn't rated at this point of time all

168
00:08:03,329 --> 00:08:09,599
the counter values can be read now we

169
00:08:07,379 --> 00:08:12,329
look into how performance counter data

170
00:08:09,599 --> 00:08:17,579
has been mishandled by many approaches

171
00:08:12,329 --> 00:08:19,829
as this as discussed earlier this is

172
00:08:17,579 --> 00:08:24,209
mainly because of lack of process level

173
00:08:19,829 --> 00:08:28,829
filtering at the hardware level many

174
00:08:24,209 --> 00:08:31,379
approaches take a shortcut and try to

175
00:08:28,829 --> 00:08:33,990
filter the process at the interrupt

176
00:08:31,379 --> 00:08:37,019
level to demonstrate that let's say a

177
00:08:33,990 --> 00:08:40,259
process executes and interrupts is

178
00:08:37,019 --> 00:08:42,899
triggered at the interrupt one can

179
00:08:40,259 --> 00:08:45,540
measure the a one can observe whether

180
00:08:42,899 --> 00:08:50,339
this belongs to process a or not using

181
00:08:45,540 --> 00:08:52,170
process ID etc however after context

182
00:08:50,339 --> 00:08:56,399
switch there is another process that

183
00:08:52,170 --> 00:08:59,250
comes into execution and again one can

184
00:08:56,399 --> 00:09:03,329
observe whether the current processes

185
00:08:59,250 --> 00:09:05,540
process a or no not however there is a

186
00:09:03,329 --> 00:09:05,540
pro

187
00:09:05,600 --> 00:09:11,220
when once we identify that this is frost

188
00:09:08,700 --> 00:09:14,220
this is not process a we may disregard

189
00:09:11,220 --> 00:09:16,650
that counter data and this can lead to a

190
00:09:14,220 --> 00:09:21,450
loss of events from performance process

191
00:09:16,650 --> 00:09:23,280
a similarly when the process a resumed

192
00:09:21,450 --> 00:09:28,170
execution at constructs context which

193
00:09:23,280 --> 00:09:31,890
and we observe we observe whether a

194
00:09:28,170 --> 00:09:33,510
current processes process a or not we

195
00:09:31,890 --> 00:09:40,040
might might incorporate noise from

196
00:09:33,510 --> 00:09:42,540
process P however there is a an easy fix

197
00:09:40,040 --> 00:09:44,939
one can save the province counter data

198
00:09:42,540 --> 00:09:48,150
at the context switch and can restore

199
00:09:44,940 --> 00:09:52,680
the province counter data before process

200
00:09:48,150 --> 00:09:56,010
a resume the execution but many papers

201
00:09:52,680 --> 00:09:58,469
did not follow this is this small fix

202
00:09:56,010 --> 00:10:01,080
and this is especially hard harder in

203
00:09:58,470 --> 00:10:03,300
some some of this operating system such

204
00:10:01,080 --> 00:10:07,710
as Windows operating system which is

205
00:10:03,300 --> 00:10:09,540
closed source and it requires the

206
00:10:07,710 --> 00:10:14,250
changes in the kernel which which might

207
00:10:09,540 --> 00:10:17,310
might not be trivial another main issue

208
00:10:14,250 --> 00:10:19,770
in performance counters is the skid skid

209
00:10:17,310 --> 00:10:22,829
is the most frustrating issue and most

210
00:10:19,770 --> 00:10:25,680
difficult to deal with it occurs in the

211
00:10:22,830 --> 00:10:28,890
sampling mode the PMI is not delivered

212
00:10:25,680 --> 00:10:30,989
at the time it has it is raised there is

213
00:10:28,890 --> 00:10:32,730
a late delivery of the interrupt which

214
00:10:30,990 --> 00:10:36,380
leads to various in in the measurements

215
00:10:32,730 --> 00:10:39,270
for example let's say sampling is done

216
00:10:36,380 --> 00:10:43,080
configured to be done at every end D TLB

217
00:10:39,270 --> 00:10:47,069
misses however that PMI is delivered at

218
00:10:43,080 --> 00:10:49,770
n plus 10 or n plus 30 this leads to a

219
00:10:47,070 --> 00:10:53,190
nice kid and this typically affects

220
00:10:49,770 --> 00:10:56,220
certain applications such as data only

221
00:10:53,190 --> 00:10:58,410
attacks for example this may be because

222
00:10:56,220 --> 00:11:03,390
the signature lies in a small code

223
00:10:58,410 --> 00:11:05,930
segment in Edison to his kid nan de

224
00:11:03,390 --> 00:11:08,430
tourism may occur due to other reasons

225
00:11:05,930 --> 00:11:11,819
to dig further into non determinism

226
00:11:08,430 --> 00:11:15,270
issues we revisited the work done by we

227
00:11:11,820 --> 00:11:17,660
were at all we performed the empirical

228
00:11:15,270 --> 00:11:21,170
analysis using their benchmarks we added

229
00:11:17,660 --> 00:11:24,020
new benchmarks we found that some issues

230
00:11:21,170 --> 00:11:28,110
has been fixed in the newer processes

231
00:11:24,020 --> 00:11:30,120
however some issues still persist we

232
00:11:28,110 --> 00:11:33,840
also found that there are some new

233
00:11:30,120 --> 00:11:36,720
issues base Falls peaceful leads to our

234
00:11:33,840 --> 00:11:40,080
counting of instructions after working

235
00:11:36,720 --> 00:11:44,130
on several papers I'd go I got buried

236
00:11:40,080 --> 00:11:48,950
into the baseball's why do these issues

237
00:11:44,130 --> 00:11:52,080
matter for security perspective and

238
00:11:48,950 --> 00:11:53,520
improper uses of performance counters in

239
00:11:52,080 --> 00:11:56,400
security application can be disastrous

240
00:11:53,520 --> 00:11:58,650
for example incorrect data can Delic

241
00:11:56,400 --> 00:12:01,280
data collection can lead to a in

242
00:11:58,650 --> 00:12:04,290
correctness of the approach similarly an

243
00:12:01,280 --> 00:12:07,650
advances adversary can use the non

244
00:12:04,290 --> 00:12:09,900
determinism and for example they can

245
00:12:07,650 --> 00:12:13,740
trigger pace falls to undermine the

246
00:12:09,900 --> 00:12:16,319
defenses to demonstrate that we saw our

247
00:12:13,740 --> 00:12:18,840
case study on malware detection module

248
00:12:16,320 --> 00:12:20,640
classification we selected the

249
00:12:18,840 --> 00:12:25,020
state-of-the-art approach proposed by

250
00:12:20,640 --> 00:12:28,020
Tang at all for following their approach

251
00:12:25,020 --> 00:12:29,130
we sample every we sample events every

252
00:12:28,020 --> 00:12:33,480
end instruction retard

253
00:12:29,130 --> 00:12:35,370
and we try to see how incorrect data

254
00:12:33,480 --> 00:12:37,800
handling can lead to any correctness of

255
00:12:35,370 --> 00:12:39,780
the approach we perform multi-class

256
00:12:37,800 --> 00:12:43,130
classification using machine learning

257
00:12:39,780 --> 00:12:46,470
approach we found that incorrect data

258
00:12:43,130 --> 00:12:48,620
collection can impact impact detection

259
00:12:46,470 --> 00:12:52,280
accuracy for certain malware families

260
00:12:48,620 --> 00:12:57,750
the discrepancy between the two of the

261
00:12:52,280 --> 00:13:01,110
discrepancy is almost more than 30% in

262
00:12:57,750 --> 00:13:04,790
some of the cases even handling data

263
00:13:01,110 --> 00:13:08,700
correctly doesn't have a higher accuracy

264
00:13:04,790 --> 00:13:12,480
this begs a question rhpc is a good

265
00:13:08,700 --> 00:13:13,980
foundation for malware detection we

266
00:13:12,480 --> 00:13:16,800
refer the audience to the concurrent

267
00:13:13,980 --> 00:13:20,160
work done by Joe at all which was

268
00:13:16,800 --> 00:13:24,420
published in ACS CCS however the title

269
00:13:20,160 --> 00:13:28,620
speaks for itself we also perform a

270
00:13:24,420 --> 00:13:29,819
another case study on rope detection for

271
00:13:28,620 --> 00:13:32,810
detecting return-oriented programming

272
00:13:29,820 --> 00:13:32,810
attacks

273
00:13:33,170 --> 00:13:40,920
the most that Wang and Baker proposed a

274
00:13:37,230 --> 00:13:44,400
state-of-the-art approach where the

275
00:13:40,920 --> 00:13:47,729
basic idea is that the rope attacks have

276
00:13:44,400 --> 00:13:50,459
higher number of return instruction per

277
00:13:47,730 --> 00:13:52,620
total instructions executed which allows

278
00:13:50,460 --> 00:13:54,870
them which allows us to set a threshold

279
00:13:52,620 --> 00:13:59,790
value such that these attacks can be

280
00:13:54,870 --> 00:14:02,100
detected besides they rope attack also

281
00:13:59,790 --> 00:14:06,000
incur lot of return misses within a

282
00:14:02,100 --> 00:14:08,330
small section of the code to demonstrate

283
00:14:06,000 --> 00:14:10,950
that let's say we have to probe

284
00:14:08,330 --> 00:14:16,670
performance counters instructions and

285
00:14:10,950 --> 00:14:16,670
return rope gadgets execute in the chain

286
00:14:16,850 --> 00:14:25,470
and we can observe that just four six

287
00:14:22,200 --> 00:14:27,330
written instruction then the total the

288
00:14:25,470 --> 00:14:29,870
total number of instructions is less

289
00:14:27,330 --> 00:14:34,040
than say only 16

290
00:14:29,870 --> 00:14:37,740
this helps to figure out the rope attack

291
00:14:34,040 --> 00:14:41,969
now is demonstrate that an advanced

292
00:14:37,740 --> 00:14:44,340
adversity can trigger the pace falls by

293
00:14:41,970 --> 00:14:48,230
embedding manipulator gadgets inside the

294
00:14:44,340 --> 00:14:48,230
rope chain and can bypass the detection

295
00:14:50,810 --> 00:14:55,790
the point to be noted here is that

296
00:14:52,980 --> 00:14:58,410
irrespective of the parameter choices

297
00:14:55,790 --> 00:15:02,160
base Falls can still be leveraged to

298
00:14:58,410 --> 00:15:04,439
bypass such detection the boat mode for

299
00:15:02,160 --> 00:15:10,410
more technical details we defer the

300
00:15:04,440 --> 00:15:12,840
audience for two hours paper in

301
00:15:10,410 --> 00:15:15,560
conclusion performance contours offer a

302
00:15:12,840 --> 00:15:19,560
powerful capability however

303
00:15:15,560 --> 00:15:21,540
Davises in the detail we cannot blindly

304
00:15:19,560 --> 00:15:23,780
apply preference counter for critical

305
00:15:21,540 --> 00:15:26,670
applications such as security defenses

306
00:15:23,780 --> 00:15:29,569
one has to take care of direct way of

307
00:15:26,670 --> 00:15:32,219
handling reference counter data and

308
00:15:29,570 --> 00:15:35,300
knowledge issues such as non determinism

309
00:15:32,220 --> 00:15:37,440
to guide the future work on this on

310
00:15:35,300 --> 00:15:39,060
performance counter we provide

311
00:15:37,440 --> 00:15:42,360
recommendations to correctly use

312
00:15:39,060 --> 00:15:45,949
performance counter in our paper thank

313
00:15:42,360 --> 00:15:45,950
you for listening I will talk any case

314
00:15:54,240 --> 00:16:04,180
you have questions come to the center

315
00:15:56,529 --> 00:16:06,189
member state your name hello my name is

316
00:16:04,180 --> 00:16:08,888
Erica Leal I'm from the University of

317
00:16:06,190 --> 00:16:12,070
Texas at Arlington using your

318
00:16:08,889 --> 00:16:14,860
recommendations to use HBC's regarding

319
00:16:12,070 --> 00:16:24,279
security where do you see the future of

320
00:16:14,860 --> 00:16:27,240
that so it depends for critical

321
00:16:24,279 --> 00:16:33,279
applications such as security defenses

322
00:16:27,240 --> 00:16:36,670
we cannot allow more more inaccuracies

323
00:16:33,279 --> 00:16:38,760
so for tolerating those noises because

324
00:16:36,670 --> 00:16:41,889
of the non determinism or incorrect

325
00:16:38,760 --> 00:16:45,149
non-deterministic effects it would be

326
00:16:41,889 --> 00:16:48,100
very hard to implement that it would be

327
00:16:45,149 --> 00:16:51,430
not not good for those defenses defense

328
00:16:48,100 --> 00:16:54,820
mechanisms because those can impact the

329
00:16:51,430 --> 00:16:57,640
inner accuracy of the approach whereas

330
00:16:54,820 --> 00:17:00,430
if an if an approach can tolerate the

331
00:16:57,640 --> 00:17:02,680
non-determinism effects and if the data

332
00:17:00,430 --> 00:17:05,010
can be handled correctly at the at the

333
00:17:02,680 --> 00:17:07,928
context switches and all then I think

334
00:17:05,010 --> 00:17:12,030
those applications can be using security

335
00:17:07,929 --> 00:17:12,030
can be using preference counter

336
00:17:14,800 --> 00:17:22,669
so I have a question so you know those

337
00:17:21,410 --> 00:17:25,220
we're gonna find out next with the

338
00:17:22,670 --> 00:17:26,840
eviction set talk sometimes what's good

339
00:17:25,220 --> 00:17:29,300
for defenses are also good for attacks

340
00:17:26,839 --> 00:17:32,449
namely if I have a fine-grained notion

341
00:17:29,300 --> 00:17:34,280
of time or events it that may be good

342
00:17:32,450 --> 00:17:36,080
for having a low cost defense that uses

343
00:17:34,280 --> 00:17:37,399
hardware primitives but it also might be

344
00:17:36,080 --> 00:17:39,949
good for attacks that want to create a

345
00:17:37,400 --> 00:17:41,300
side channel or covert channel do you

346
00:17:39,950 --> 00:17:47,450
what you what are your feelings about

347
00:17:41,300 --> 00:17:49,520
this trade space yes I think since the

348
00:17:47,450 --> 00:17:51,740
attacks needs to be done only once the

349
00:17:49,520 --> 00:17:54,040
success through it can be low in the

350
00:17:51,740 --> 00:17:55,880
attacks I think one can use attacks

351
00:17:54,040 --> 00:17:58,370
performance counter for attacks that

352
00:17:55,880 --> 00:18:01,310
would be more beneficial for the

353
00:17:58,370 --> 00:18:03,610
advanced adversity however for the

354
00:18:01,310 --> 00:18:07,190
defense where we need to have a high

355
00:18:03,610 --> 00:18:09,530
accuracy we cannot allow the defense

356
00:18:07,190 --> 00:18:12,770
mechanism to break because of the

357
00:18:09,530 --> 00:18:15,170
manipulation of the events I would

358
00:18:12,770 --> 00:18:18,410
suggest it's better for the attack

359
00:18:15,170 --> 00:18:20,960
mechanism great Thank You Sanjeev

360
00:18:18,410 --> 00:18:25,229
everybody thank our speaker

361
00:18:20,960 --> 00:18:25,229
[Applause]

