1
00:00:08,620 --> 00:00:13,299
hello this is Monty again and today I

2
00:00:11,140 --> 00:00:15,550
will present attack directories not

3
00:00:13,300 --> 00:00:18,130
caches side-channel attacks in a

4
00:00:15,550 --> 00:00:21,250
non-inclusive world this is work done

5
00:00:18,130 --> 00:00:23,380
with my collaborator read rubric per

6
00:00:21,250 --> 00:00:25,780
Kafka be ready and professor Chris

7
00:00:23,380 --> 00:00:28,210
Fletcher professor Roy Campbell and my

8
00:00:25,780 --> 00:00:30,640
advisor to stop thrillers at UIUC

9
00:00:28,210 --> 00:00:32,230
basically we designed a new cache based

10
00:00:30,640 --> 00:00:34,510
side-channel attacks targeting the

11
00:00:32,229 --> 00:00:36,970
latest Intel processor with the new

12
00:00:34,510 --> 00:00:40,420
cache hierarchy and our attack does not

13
00:00:36,970 --> 00:00:42,610
require SMT it works with the attack and

14
00:00:40,420 --> 00:00:46,420
a victim on different course and does

15
00:00:42,610 --> 00:00:48,309
not require page sharing and I have the

16
00:00:46,420 --> 00:00:51,219
bell and from the computer architecture

17
00:00:48,309 --> 00:00:53,709
community so from a pen from a computer

18
00:00:51,219 --> 00:00:55,989
architects perspective to be fair this

19
00:00:53,710 --> 00:00:58,629
design this Intel processor design is

20
00:00:55,989 --> 00:01:01,899
quite reasonable in terms of performance

21
00:00:58,629 --> 00:01:04,030
rather complexity and cost so our

22
00:01:01,899 --> 00:01:06,700
problem our attack is not targeting a

23
00:01:04,030 --> 00:01:10,300
specific bug is actually targeting the

24
00:01:06,700 --> 00:01:13,080
problem root in the feature of the cache

25
00:01:10,300 --> 00:01:15,580
is shared and let's start

26
00:01:13,080 --> 00:01:17,530
we all know that cache base side-channel

27
00:01:15,580 --> 00:01:19,300
attacks are very popular and effective

28
00:01:17,530 --> 00:01:21,700
for example given a multi-core processor

29
00:01:19,300 --> 00:01:24,099
in a cloud we have different virtual

30
00:01:21,700 --> 00:01:27,429
machines from Disney users even though

31
00:01:24,099 --> 00:01:29,830
we have soft relation information can

32
00:01:27,429 --> 00:01:32,200
still leak via shared cache resources

33
00:01:29,830 --> 00:01:33,959
and this attacks has been demonstrated

34
00:01:32,200 --> 00:01:36,819
on cloud a lot of public cloud

35
00:01:33,959 --> 00:01:38,770
containers and people write Java swickle

36
00:01:36,819 --> 00:01:42,310
to the tag launch it on a mobile device

37
00:01:38,770 --> 00:01:44,949
and it the tag is very effective to

38
00:01:42,310 --> 00:01:47,259
steal keys seek the keys monitor

39
00:01:44,950 --> 00:01:49,509
keystrokes from user and monitor the

40
00:01:47,259 --> 00:01:51,759
browser content and also we know that

41
00:01:49,509 --> 00:01:53,709
when the side-channel attacks work with

42
00:01:51,759 --> 00:01:56,039
spider modem and all the other

43
00:01:53,709 --> 00:01:58,539
variations of special executions

44
00:01:56,039 --> 00:02:01,390
speculative execution attacks they can

45
00:01:58,539 --> 00:02:03,940
break memory isolation and down kernel

46
00:02:01,390 --> 00:02:06,849
my content and do many powerful things

47
00:02:03,940 --> 00:02:09,970
so given attacks are so popular and

48
00:02:06,849 --> 00:02:13,120
effective why we need another cash basis

49
00:02:09,970 --> 00:02:15,280
Iran attacks the answer is this attacks

50
00:02:13,120 --> 00:02:19,209
most of them do not work on the latest

51
00:02:15,280 --> 00:02:20,130
Intel processor let me show you so we

52
00:02:19,209 --> 00:02:21,990
have many diff

53
00:02:20,130 --> 00:02:24,630
attack techniques most of them come with

54
00:02:21,990 --> 00:02:26,850
this a plus B format generally when I

55
00:02:24,630 --> 00:02:29,010
look into this attacks I classify them

56
00:02:26,850 --> 00:02:31,650
into two categories the first category

57
00:02:29,010 --> 00:02:34,470
uses special instruction called CL flash

58
00:02:31,650 --> 00:02:37,230
and the other category where I hide a

59
00:02:34,470 --> 00:02:39,540
sum here we call done conflict based

60
00:02:37,230 --> 00:02:41,579
attacks because they do not need this

61
00:02:39,540 --> 00:02:44,130
self large instruction they use cash

62
00:02:41,580 --> 00:02:46,830
conflicts to perform the attack these

63
00:02:44,130 --> 00:02:49,500
attacks more still see and more

64
00:02:46,830 --> 00:02:51,930
difficult to defend against and this

65
00:02:49,500 --> 00:02:54,810
attacks have only been demonstrated on

66
00:02:51,930 --> 00:02:56,850
inclusive cash hierarchies which is fine

67
00:02:54,810 --> 00:02:59,550
because all the past Intel processors

68
00:02:56,850 --> 00:03:02,970
use inclusive cash but things changed

69
00:02:59,550 --> 00:03:05,430
insulin 17 into something else's on 17

70
00:03:02,970 --> 00:03:09,480
Intel released their new processor the

71
00:03:05,430 --> 00:03:12,030
codename a skylake X and Scala KSP this

72
00:03:09,480 --> 00:03:15,000
processor come with a non-inclusive

73
00:03:12,030 --> 00:03:17,040
cache hierarchy then people think cache

74
00:03:15,000 --> 00:03:19,350
attacks will fail on these processors

75
00:03:17,040 --> 00:03:22,049
and even now if you search online you

76
00:03:19,350 --> 00:03:25,019
can find articles such as with the title

77
00:03:22,050 --> 00:03:27,150
such as new Intel CPU cache architecture

78
00:03:25,020 --> 00:03:29,520
boosts the protection against a side

79
00:03:27,150 --> 00:03:31,410
channel attacks well this is when you

80
00:03:29,520 --> 00:03:33,780
need our new cache base title tag

81
00:03:31,410 --> 00:03:35,730
because our attack challenged this

82
00:03:33,780 --> 00:03:38,700
assumption and approved this is wrong

83
00:03:35,730 --> 00:03:40,500
but and we propose the first two cache

84
00:03:38,700 --> 00:03:42,540
attacks conflict the base the cache

85
00:03:40,500 --> 00:03:45,690
attacks which work on a non-inclusive

86
00:03:42,540 --> 00:03:48,390
cache hierarchy before I give you all

87
00:03:45,690 --> 00:03:50,190
the details about the text let me just

88
00:03:48,390 --> 00:03:52,350
give you some brief background about

89
00:03:50,190 --> 00:03:55,710
what's the difference between inclusive

90
00:03:52,350 --> 00:03:57,780
caches and non-inclusive caches modern

91
00:03:55,710 --> 00:03:59,940
caches are organized into multiple

92
00:03:57,780 --> 00:04:02,610
levels generally have three levels in

93
00:03:59,940 --> 00:04:05,640
Intel processors here I show a private

94
00:04:02,610 --> 00:04:08,850
l2 cache and share the lateral cache in

95
00:04:05,640 --> 00:04:11,339
an inclusive cache all the outer lines

96
00:04:08,850 --> 00:04:13,980
will be duplicated in the lasso cache

97
00:04:11,340 --> 00:04:16,738
like this and this will happen to all

98
00:04:13,980 --> 00:04:20,070
outlines so here the lateral cache is

99
00:04:16,738 --> 00:04:22,979
inclusive of the l2 it is the superset

100
00:04:20,070 --> 00:04:25,409
of our two lines well in a non-inclusive

101
00:04:22,980 --> 00:04:27,480
cache this this may not be the case

102
00:04:25,410 --> 00:04:30,540
basically private

103
00:04:27,480 --> 00:04:32,160
outline may or may not duplicate in the

104
00:04:30,540 --> 00:04:33,580
last cache and according to our

105
00:04:32,160 --> 00:04:35,439
evaluation we find

106
00:04:33,580 --> 00:04:37,599
and all the exclusive line wings it is

107
00:04:35,439 --> 00:04:40,689
not sheer the line will never duplicate

108
00:04:37,599 --> 00:04:42,580
in the last cache attacks will be very

109
00:04:40,689 --> 00:04:44,889
different on these two different types

110
00:04:42,580 --> 00:04:47,909
of cache hierarchies how can it be

111
00:04:44,889 --> 00:04:51,039
different let me show you a very

112
00:04:47,909 --> 00:04:52,870
classical prime probic tag left I have

113
00:04:51,039 --> 00:04:55,990
the inclusive cache and on the right I

114
00:04:52,870 --> 00:04:58,810
have the non-inclusive cache when the

115
00:04:55,990 --> 00:05:00,939
victim accesses a target address in an

116
00:04:58,810 --> 00:05:03,580
inclusive cache the line will be

117
00:05:00,939 --> 00:05:05,460
inserted into both the l2 and the loss

118
00:05:03,580 --> 00:05:08,919
of cache because the cache is inclusive

119
00:05:05,460 --> 00:05:11,138
then when the tagger wants to evict this

120
00:05:08,919 --> 00:05:13,900
target address out of the cache the

121
00:05:11,139 --> 00:05:15,969
tracker will access a bunch of addresses

122
00:05:13,900 --> 00:05:16,388
map the same cache set in the result

123
00:05:15,969 --> 00:05:19,150
cache

124
00:05:16,389 --> 00:05:21,250
once it accesses enough addresses it

125
00:05:19,150 --> 00:05:24,008
will create a massive cache conflict

126
00:05:21,250 --> 00:05:26,800
this conflict will evict the target

127
00:05:24,009 --> 00:05:29,050
address out of the loss of cash and as a

128
00:05:26,800 --> 00:05:31,569
result the corresponding out to copy

129
00:05:29,050 --> 00:05:33,400
line will also be evicted because the

130
00:05:31,569 --> 00:05:36,129
cache wants to maintain the inclusion

131
00:05:33,400 --> 00:05:38,229
inclusive property and we call this line

132
00:05:36,129 --> 00:05:40,090
inclusion victim because the line is

133
00:05:38,229 --> 00:05:42,779
evicted due to the inclusive property

134
00:05:40,090 --> 00:05:46,270
not because of any local conflicts and

135
00:05:42,779 --> 00:05:48,819
this is very important for more than

136
00:05:46,270 --> 00:05:50,919
cache attacks modern cache tags is so

137
00:05:48,819 --> 00:05:53,919
powerful so that the private cache is

138
00:05:50,919 --> 00:05:56,378
transparent to the attacker so given a

139
00:05:53,919 --> 00:05:58,680
single cache line address attacker can

140
00:05:56,379 --> 00:06:01,539
monitor all the victims accesses on it

141
00:05:58,680 --> 00:06:03,699
but things will not be like this on a

142
00:06:01,539 --> 00:06:06,099
non-inclusive cache because to begin

143
00:06:03,699 --> 00:06:08,379
with when the victim accesses target

144
00:06:06,099 --> 00:06:12,159
address the line will not be duplicated

145
00:06:08,379 --> 00:06:14,409
in the lass of cache and out of this no

146
00:06:12,159 --> 00:06:16,930
matter how many attacker how many lines

147
00:06:14,409 --> 00:06:19,240
attacker accesses in attacker takes the

148
00:06:16,930 --> 00:06:22,360
whole lot of cash it can still not

149
00:06:19,240 --> 00:06:23,940
create cache conflicts and no inclusion

150
00:06:22,360 --> 00:06:26,710
victims can be created

151
00:06:23,940 --> 00:06:29,979
therefore without the capability to

152
00:06:26,710 --> 00:06:32,349
evicting the victims line attacker loses

153
00:06:29,979 --> 00:06:35,589
the visibility into the victims private

154
00:06:32,349 --> 00:06:37,930
cache that's why conflict based attacks

155
00:06:35,589 --> 00:06:39,729
are very difficult on now inclusive

156
00:06:37,930 --> 00:06:42,009
caches and that's why people believe it

157
00:06:39,729 --> 00:06:44,050
will fail but as a measure and will make

158
00:06:42,009 --> 00:06:47,320
the work will make a work by not

159
00:06:44,050 --> 00:06:50,110
exploiting cache conflicts we exploit

160
00:06:47,320 --> 00:06:51,909
on the directory structure the directory

161
00:06:50,110 --> 00:06:53,710
structure here is not the softer

162
00:06:51,910 --> 00:06:55,990
directory in the operating system you

163
00:06:53,710 --> 00:06:59,680
use to understand this is actually a

164
00:06:55,990 --> 00:07:02,080
hardware structure and it also has

165
00:06:59,680 --> 00:07:04,690
another name called smooth pewter it is

166
00:07:02,080 --> 00:07:07,000
structured to use it's used to track the

167
00:07:04,690 --> 00:07:10,210
presence information for all the cache

168
00:07:07,000 --> 00:07:13,030
lines in the cache hierarchy it can be

169
00:07:10,210 --> 00:07:15,880
in very many different formats a very

170
00:07:13,030 --> 00:07:19,599
classical format is a big vector given

171
00:07:15,880 --> 00:07:22,060
eight cores then the direct entry can

172
00:07:19,600 --> 00:07:24,870
have a bit vector with a length of eight

173
00:07:22,060 --> 00:07:27,250
and each bit indicates whether the

174
00:07:24,870 --> 00:07:30,550
corresponding course private cache has

175
00:07:27,250 --> 00:07:32,890
the copy of the line or not and you can

176
00:07:30,550 --> 00:07:34,960
learn this from any advanced computer

177
00:07:32,890 --> 00:07:36,550
architecture course and the lucky

178
00:07:34,960 --> 00:07:38,680
listings arm a computer architecture

179
00:07:36,550 --> 00:07:41,380
student so I know this beforehand the

180
00:07:38,680 --> 00:07:43,960
things I do not understand is how this

181
00:07:41,380 --> 00:07:46,480
directory is specifically organized in

182
00:07:43,960 --> 00:07:49,270
the latest Intel skylake as processor

183
00:07:46,480 --> 00:07:51,220
and we and this is what we reverse

184
00:07:49,270 --> 00:07:54,310
engineered by doing a lot of experiments

185
00:07:51,220 --> 00:07:56,740
in the paper we provide very we provide

186
00:07:54,310 --> 00:07:58,870
very detailed documentation about how we

187
00:07:56,740 --> 00:08:01,180
reverse engineered a structure step by

188
00:07:58,870 --> 00:08:02,560
step but today due to the time limit I

189
00:08:01,180 --> 00:08:05,980
will just show you our reverse

190
00:08:02,560 --> 00:08:08,380
engineering result here is a slice of

191
00:08:05,980 --> 00:08:11,140
the share the lasso cache as we all know

192
00:08:08,380 --> 00:08:13,960
it has data cache lines inside organized

193
00:08:11,140 --> 00:08:16,750
in two ways and sets we find there are

194
00:08:13,960 --> 00:08:19,750
two extra structures inside the first

195
00:08:16,750 --> 00:08:20,410
one is called traditional directory TD

196
00:08:19,750 --> 00:08:22,960
for short

197
00:08:20,410 --> 00:08:25,240
this traditional directory holds

198
00:08:22,960 --> 00:08:27,940
directory entries for all the cache

199
00:08:25,240 --> 00:08:29,980
lines in that particular slice so it is

200
00:08:27,940 --> 00:08:32,799
a one-to-one mapping of the cache line

201
00:08:29,980 --> 00:08:34,750
array and the traditional directory so

202
00:08:32,799 --> 00:08:37,419
the traditional directory has the same

203
00:08:34,750 --> 00:08:38,409
number of sets and ways as the cache

204
00:08:37,419 --> 00:08:40,419
line arrays

205
00:08:38,409 --> 00:08:43,900
there is another structure called

206
00:08:40,419 --> 00:08:46,630
extended directory this is the directory

207
00:08:43,900 --> 00:08:48,699
that tries that holds the air directory

208
00:08:46,630 --> 00:08:52,870
entries for all the cache lines in the

209
00:08:48,700 --> 00:08:54,610
l2 but not in the lasso cache a very

210
00:08:52,870 --> 00:08:57,220
important thing here is that the

211
00:08:54,610 --> 00:08:57,630
directory is inclusive because you need

212
00:08:57,220 --> 00:08:59,640
to

213
00:08:57,630 --> 00:09:01,380
track the presents information for all

214
00:08:59,640 --> 00:09:03,810
the cache lines in whole cache our

215
00:09:01,380 --> 00:09:06,270
hierarchy otherwise it is useless right

216
00:09:03,810 --> 00:09:08,880
so in this sense because the directory

217
00:09:06,270 --> 00:09:11,130
is inclusive it is our new attack

218
00:09:08,880 --> 00:09:15,840
surface where we launch our cash basis

219
00:09:11,130 --> 00:09:17,970
on attack and I just want to mention

220
00:09:15,840 --> 00:09:19,860
that so this is structure for this

221
00:09:17,970 --> 00:09:22,320
non-inclusive cache in an inclusive

222
00:09:19,860 --> 00:09:24,180
cache you also have directory which you

223
00:09:22,320 --> 00:09:25,830
do not really see you only have the

224
00:09:24,180 --> 00:09:28,290
traditional directory because that is

225
00:09:25,830 --> 00:09:29,970
enough to hold all the cache lines but

226
00:09:28,290 --> 00:09:31,829
you cannot see it and the one people

227
00:09:29,970 --> 00:09:33,810
attack the inclusive cache they are also

228
00:09:31,830 --> 00:09:37,290
attacking the directory because because

229
00:09:33,810 --> 00:09:40,050
it's a one-to-one mapping ok so now I

230
00:09:37,290 --> 00:09:44,640
will visualize how a prime probe attack

231
00:09:40,050 --> 00:09:46,890
works in in on a non-inclusive cache so

232
00:09:44,640 --> 00:09:49,920
the first step we do in front row is

233
00:09:46,890 --> 00:09:52,410
prime and instead of exploiting cache

234
00:09:49,920 --> 00:09:54,900
conflicts we exploit conflicts in the

235
00:09:52,410 --> 00:09:57,360
extended directory to enforce the

236
00:09:54,900 --> 00:10:00,360
victim's line to be evicted from l2 to

237
00:09:57,360 --> 00:10:02,610
lasso cache and this is the system we

238
00:10:00,360 --> 00:10:04,830
work with we have the victim and

239
00:10:02,610 --> 00:10:06,660
attacker on different cores they shared

240
00:10:04,830 --> 00:10:09,600
the loss of cash I only show one slice

241
00:10:06,660 --> 00:10:11,730
of it and I will use green lines book

242
00:10:09,600 --> 00:10:13,980
trim blog to indicate target address and

243
00:10:11,730 --> 00:10:16,650
the red blog to indicate attackers

244
00:10:13,980 --> 00:10:19,170
addresses and I used softly the blog to

245
00:10:16,650 --> 00:10:21,090
show the cache line and the slash the

246
00:10:19,170 --> 00:10:24,839
blog to show the corresponding directory

247
00:10:21,090 --> 00:10:26,880
entries first the victim access is lying

248
00:10:24,840 --> 00:10:28,530
the care the hardware will insert the

249
00:10:26,880 --> 00:10:29,880
line into the outer and the

250
00:10:28,530 --> 00:10:32,670
corresponding and she will be in the

251
00:10:29,880 --> 00:10:35,870
extended directory when the tiger wants

252
00:10:32,670 --> 00:10:39,510
to evict this line it will access a

253
00:10:35,870 --> 00:10:42,420
group of addresses map to the same eb

254
00:10:39,510 --> 00:10:45,060
set extended directory set as the target

255
00:10:42,420 --> 00:10:47,640
address once it filled up the set it

256
00:10:45,060 --> 00:10:49,890
creates edie conflict and the ET

257
00:10:47,640 --> 00:10:53,280
conflict will evicted this line to be

258
00:10:49,890 --> 00:10:55,920
migrated from eb to TD and as i

259
00:10:53,280 --> 00:10:59,459
mentioned before all the TD entry has

260
00:10:55,920 --> 00:11:01,800
want one mapping to the cache line array

261
00:10:59,460 --> 00:11:04,920
in the lasso cache so you need to have a

262
00:11:01,800 --> 00:11:08,130
cache line in the lasso cache and this

263
00:11:04,920 --> 00:11:10,229
will enforce the eviction of the victims

264
00:11:08,130 --> 00:11:11,189
lying to migrate from the private auto

265
00:11:10,230 --> 00:11:14,190
to the last

266
00:11:11,190 --> 00:11:17,430
- and this is the inclusion victim and

267
00:11:14,190 --> 00:11:20,640
you can see the prime approach the prime

268
00:11:17,430 --> 00:11:23,729
step is completed now let's see how the

269
00:11:20,640 --> 00:11:26,550
probe works as we all know the probe is

270
00:11:23,730 --> 00:11:29,730
just a reacts s all the dresses used in

271
00:11:26,550 --> 00:11:32,400
the prime step and if victim does

272
00:11:29,730 --> 00:11:34,560
nothing in the between once when the

273
00:11:32,400 --> 00:11:37,860
attacker reacts s is all the dresses it

274
00:11:34,560 --> 00:11:41,849
will col2 hits very short latency but

275
00:11:37,860 --> 00:11:46,320
one if the victim reacts s line the line

276
00:11:41,850 --> 00:11:49,140
will be will go back to the L 2 and this

277
00:11:46,320 --> 00:11:51,570
will be observed by the attacker how can

278
00:11:49,140 --> 00:11:55,710
it be how can to work when the line goes

279
00:11:51,570 --> 00:11:58,620
back to L 2 it will make the TD entry

280
00:11:55,710 --> 00:12:01,020
migrate to the IDI now you have another

281
00:11:58,620 --> 00:12:03,720
IDI conflict so with the hardware needs

282
00:12:01,020 --> 00:12:06,840
to do a swap here so attackers entry

283
00:12:03,720 --> 00:12:09,210
will be migrated to the TD and this

284
00:12:06,840 --> 00:12:11,460
operation enforce one of the taggers

285
00:12:09,210 --> 00:12:14,190
lying to be evicted from the out - and

286
00:12:11,460 --> 00:12:15,720
one attacker measure the latency it will

287
00:12:14,190 --> 00:12:18,000
see an l2 miss

288
00:12:15,720 --> 00:12:20,610
instead of or l2 hits so longer latency

289
00:12:18,000 --> 00:12:22,410
but I just comparing the time difference

290
00:12:20,610 --> 00:12:24,090
you will feel attacker will figure out

291
00:12:22,410 --> 00:12:26,040
whether the victim have accessed the

292
00:12:24,090 --> 00:12:27,870
dress or not so you do all the same

293
00:12:26,040 --> 00:12:30,089
thing as what you did in the prime probe

294
00:12:27,870 --> 00:12:32,160
the only difference that we exploit the

295
00:12:30,090 --> 00:12:34,320
directory conflicts and the attacker

296
00:12:32,160 --> 00:12:36,600
needs to figure out how to figure out

297
00:12:34,320 --> 00:12:39,120
the mapping between the directory and

298
00:12:36,600 --> 00:12:42,330
the physical address it use in the

299
00:12:39,120 --> 00:12:44,760
attack now I will demonstrate this

300
00:12:42,330 --> 00:12:46,770
attack on a very simple victim and I

301
00:12:44,760 --> 00:12:49,050
just want to show you how effective this

302
00:12:46,770 --> 00:12:51,240
attacks is and how noiseless this attack

303
00:12:49,050 --> 00:12:53,790
is I will use this very simple example

304
00:12:51,240 --> 00:12:56,610
it's not it's the square and a multiply

305
00:12:53,790 --> 00:12:58,290
explanation computation and it's not

306
00:12:56,610 --> 00:13:00,720
really interesting but it's widely

307
00:12:58,290 --> 00:13:03,660
understood and easy to explain in this

308
00:13:00,720 --> 00:13:07,589
particular example the the loop iterate

309
00:13:03,660 --> 00:13:09,990
over each key bit and it performs square

310
00:13:07,589 --> 00:13:12,030
mod operation each iteration and if the

311
00:13:09,990 --> 00:13:15,270
corresponding bit is one it will float

312
00:13:12,030 --> 00:13:18,959
up performs and multiply operation and

313
00:13:15,270 --> 00:13:21,480
in this particular example I use the

314
00:13:18,960 --> 00:13:23,520
multiply function as the target address

315
00:13:21,480 --> 00:13:24,690
and we will use prime probe to monitor

316
00:13:23,520 --> 00:13:26,579
it and this

317
00:13:24,690 --> 00:13:31,079
is the trace we get you can see it's

318
00:13:26,579 --> 00:13:33,239
very clear the x-axis is the epoch ID we

319
00:13:31,079 --> 00:13:36,089
use five high five hundred cycles as

320
00:13:33,240 --> 00:13:39,209
epoch ID and if the victim does not

321
00:13:36,089 --> 00:13:41,339
access any line the attacker will see

322
00:13:39,209 --> 00:13:44,040
all out two hits it will take only one

323
00:13:41,339 --> 00:13:46,620
hundred to one hundred seventy five

324
00:13:44,040 --> 00:13:48,959
cycles and if the victim access is a

325
00:13:46,620 --> 00:13:51,089
single line the attacker will see around

326
00:13:48,959 --> 00:13:52,949
two hundred twenty five cycles it's very

327
00:13:51,089 --> 00:13:57,480
easy to be distinguished whether the

328
00:13:52,949 --> 00:14:00,209
victim access or not and here the IRD

329
00:13:57,480 --> 00:14:02,759
market block 0 which means attacker is

330
00:14:00,209 --> 00:14:04,979
the victim is doing a square operation

331
00:14:02,759 --> 00:14:08,220
without accessing the multiply function

332
00:14:04,980 --> 00:14:09,980
and the bit one is a square operation

333
00:14:08,220 --> 00:14:12,839
followed by the multiplication

334
00:14:09,980 --> 00:14:15,269
computation and attacker just need to

335
00:14:12,839 --> 00:14:17,790
look into this trace and iterates each

336
00:14:15,269 --> 00:14:20,009
bit of it very clear without any

337
00:14:17,790 --> 00:14:23,730
complicated a postal process technique

338
00:14:20,009 --> 00:14:25,470
and this is what I will cover but there

339
00:14:23,730 --> 00:14:28,170
are many more interesting things in the

340
00:14:25,470 --> 00:14:30,389
paper so as we all know it's very if you

341
00:14:28,170 --> 00:14:32,639
want to target the last all cash and do

342
00:14:30,389 --> 00:14:35,519
the prime probe attack you need eviction

343
00:14:32,639 --> 00:14:37,110
set and the eviction set construction

344
00:14:35,519 --> 00:14:39,389
algorithm the old eviction set

345
00:14:37,110 --> 00:14:41,189
construction algorithm does not really

346
00:14:39,389 --> 00:14:43,620
work for now inclusive cache hierarchy

347
00:14:41,189 --> 00:14:47,160
so we proposed our new version of it and

348
00:14:43,620 --> 00:14:48,630
this is in the paper also we documented

349
00:14:47,160 --> 00:14:50,550
the detailed step of how we

350
00:14:48,630 --> 00:14:52,560
reverse-engineer the directory structure

351
00:14:50,550 --> 00:14:54,389
and all the parameters and

352
00:14:52,560 --> 00:14:56,638
configurations and the special

353
00:14:54,389 --> 00:14:59,040
operations within this structure a lot

354
00:14:56,639 --> 00:15:01,259
of details and also in addition to

355
00:14:59,040 --> 00:15:03,269
prompt Robotech we also designed a

356
00:15:01,259 --> 00:15:04,980
multi-threaded a high-bandwidth evict

357
00:15:03,269 --> 00:15:07,050
and reload attack which is slightly

358
00:15:04,980 --> 00:15:09,360
different from front probe because the

359
00:15:07,050 --> 00:15:11,609
directory handles cache a shared cache

360
00:15:09,360 --> 00:15:14,880
line differently from the private cache

361
00:15:11,610 --> 00:15:17,519
lines and we also show attacker results

362
00:15:14,880 --> 00:15:19,800
on AMD machines the short summary is

363
00:15:17,519 --> 00:15:22,170
that our tag does not work on AMD

364
00:15:19,800 --> 00:15:24,149
machines because they are they have very

365
00:15:22,170 --> 00:15:26,459
small number of cores on each triplets

366
00:15:24,149 --> 00:15:28,860
so probably they do not use directory

367
00:15:26,459 --> 00:15:31,229
but the their design is not scalable in

368
00:15:28,860 --> 00:15:35,160
from the perspective of a computer

369
00:15:31,230 --> 00:15:38,020
architect and I have attended this

370
00:15:35,160 --> 00:15:40,360
conference for more than 1/2 days

371
00:15:38,020 --> 00:15:42,250
and I see a common question asked during

372
00:15:40,360 --> 00:15:44,230
the Q&A session is what's the future

373
00:15:42,250 --> 00:15:46,810
whether you have counter measures of it

374
00:15:44,230 --> 00:15:49,660
so we do think about it there are two

375
00:15:46,810 --> 00:15:51,939
simple solutions one is increase the

376
00:15:49,660 --> 00:15:54,160
directory associativity if you have

377
00:15:51,940 --> 00:15:56,230
enough associativity and you can hold

378
00:15:54,160 --> 00:15:58,810
all the cache lines in your l2 then you

379
00:15:56,230 --> 00:16:01,630
will not have directory conflicts but

380
00:15:58,810 --> 00:16:04,209
from a computer architects perspective

381
00:16:01,630 --> 00:16:08,080
it is not realistic to take to build you

382
00:16:04,209 --> 00:16:10,779
will never build a set a set associative

383
00:16:08,080 --> 00:16:12,880
array with more than 100 ways just too

384
00:16:10,779 --> 00:16:15,820
expensive and very low performance

385
00:16:12,880 --> 00:16:17,920
another possible solution is to do the

386
00:16:15,820 --> 00:16:20,380
way partition of the directory just as

387
00:16:17,920 --> 00:16:23,140
we what we did with the cache but it's

388
00:16:20,380 --> 00:16:25,930
not really feasible because the extended

389
00:16:23,140 --> 00:16:28,720
directory only has 12 ways which means

390
00:16:25,930 --> 00:16:31,209
you can support as maximally 12 security

391
00:16:28,720 --> 00:16:33,910
domains but these server processors they

392
00:16:31,209 --> 00:16:36,729
can have up to 28 cores so they can

393
00:16:33,910 --> 00:16:38,980
potentially have 28 secure domains so

394
00:16:36,730 --> 00:16:40,870
this way petition is not really visible

395
00:16:38,980 --> 00:16:44,470
when you have many different secure

396
00:16:40,870 --> 00:16:47,140
domains so since this work is completed

397
00:16:44,470 --> 00:16:49,720
early last year we do have some solution

398
00:16:47,140 --> 00:16:52,810
for that for that this paper is secured

399
00:16:49,720 --> 00:16:54,910
sector a secure directory to defeat

400
00:16:52,810 --> 00:16:58,060
directory sites and attacks from our

401
00:16:54,910 --> 00:17:00,010
group this work is published in East our

402
00:16:58,060 --> 00:17:01,899
international symposium of computer

403
00:17:00,010 --> 00:17:04,209
architecture this year and will will be

404
00:17:01,899 --> 00:17:07,089
presented in next month for people who

405
00:17:04,209 --> 00:17:09,040
are not familiar with this conference it

406
00:17:07,089 --> 00:17:11,889
is the topic of your conference in the

407
00:17:09,040 --> 00:17:13,750
computer architecture community and we

408
00:17:11,890 --> 00:17:15,939
are the people who try to design and

409
00:17:13,750 --> 00:17:18,280
propose different hardware designs and

410
00:17:15,939 --> 00:17:20,559
we are the person do try to collaborate

411
00:17:18,280 --> 00:17:22,569
with security people to come up with

412
00:17:20,559 --> 00:17:24,910
better designs and if you are interested

413
00:17:22,569 --> 00:17:27,069
you can check out this paper to

414
00:17:24,910 --> 00:17:29,320
summarize in this paper we reverse

415
00:17:27,069 --> 00:17:32,290
engineer the directory structure and we

416
00:17:29,320 --> 00:17:34,689
propose the first 2 cache attacks work

417
00:17:32,290 --> 00:17:37,090
on the non-inclusive in-house garlic ax

418
00:17:34,690 --> 00:17:39,940
processor and we evolve it on the RSA

419
00:17:37,090 --> 00:17:42,070
encryption album to summarize we think

420
00:17:39,940 --> 00:17:44,770
the directory is the unified structure

421
00:17:42,070 --> 00:17:46,899
for conflict based Akash attacks because

422
00:17:44,770 --> 00:17:49,629
when you attack inclusive cache you are

423
00:17:46,900 --> 00:17:50,890
also attacking the directory that's it

424
00:17:49,630 --> 00:18:06,970
thank you and

425
00:17:50,890 --> 00:18:10,000
four questions questions hi brian

426
00:18:06,970 --> 00:18:11,950
Massenburg Western Digital the example

427
00:18:10,000 --> 00:18:14,830
algorithm that you were attacking has

428
00:18:11,950 --> 00:18:17,140
very clear side channels it has a timing

429
00:18:14,830 --> 00:18:18,730
side channel in the pseudocode it's also

430
00:18:17,140 --> 00:18:21,640
not regular with respect to memory

431
00:18:18,730 --> 00:18:24,700
accesses is there a way to use this

432
00:18:21,640 --> 00:18:26,440
against algorithms that are regular in

433
00:18:24,700 --> 00:18:29,260
their timing and memory access pattern

434
00:18:26,440 --> 00:18:31,990
or is that a sufficient countermeasure

435
00:18:29,260 --> 00:18:34,030
for cryptographic algorithms so clearly

436
00:18:31,990 --> 00:18:37,810
using our technique you can give us

437
00:18:34,030 --> 00:18:40,060
cache address and we can monitor the

438
00:18:37,810 --> 00:18:43,810
victims accesses on that cache address

439
00:18:40,060 --> 00:18:47,560
so our attack is very just attacking

440
00:18:43,810 --> 00:18:49,840
that as long as the victim it's access

441
00:18:47,560 --> 00:18:53,379
pattern leaks some secret information we

442
00:18:49,840 --> 00:18:56,139
can do with that it's very general so if

443
00:18:53,380 --> 00:18:58,990
we were to only use cryptographic

444
00:18:56,140 --> 00:19:00,730
implementations that had regular memory

445
00:18:58,990 --> 00:19:03,040
access pattern you mean the access

446
00:19:00,730 --> 00:19:04,840
pattern does not leak any classical

447
00:19:03,040 --> 00:19:10,030
information yes of course we cannot work

448
00:19:04,840 --> 00:19:12,580
with that okay yes thank you sorry did

449
00:19:10,030 --> 00:19:15,550
you try attacking other types of targets

450
00:19:12,580 --> 00:19:18,879
besides the one you described it would

451
00:19:15,550 --> 00:19:20,770
only show this one because so as you as

452
00:19:18,880 --> 00:19:22,630
you can understand that it's kind of

453
00:19:20,770 --> 00:19:24,940
it's a very general technique to monitor

454
00:19:22,630 --> 00:19:27,010
the victims accesses right as long as

455
00:19:24,940 --> 00:19:30,180
you can monitor the accesses and if the

456
00:19:27,010 --> 00:19:33,180
access leak information you can break it

457
00:19:30,180 --> 00:19:39,760
basically anywhere primeplus probe is

458
00:19:33,180 --> 00:19:41,220
good and precise and effective great any

459
00:19:39,760 --> 00:19:43,400
other questions

460
00:19:41,220 --> 00:19:48,349
ok let's thank the speaker again

461
00:19:43,400 --> 00:19:48,349
[Applause]

