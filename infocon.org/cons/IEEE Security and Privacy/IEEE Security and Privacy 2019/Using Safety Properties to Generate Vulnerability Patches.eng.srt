1
00:00:08,889 --> 00:00:17,210
so much for the introduction also in

2
00:00:13,129 --> 00:00:20,029
this talk I will present our work tele

3
00:00:17,210 --> 00:00:28,130
uses safety properties to generate

4
00:00:20,029 --> 00:00:34,190
vulnerability patches so first I will

5
00:00:28,130 --> 00:00:36,830
discuss some background information on

6
00:00:34,190 --> 00:00:40,070
software vulnerabilities an automatic

7
00:00:36,830 --> 00:00:44,120
program repair then I will describe

8
00:00:40,070 --> 00:00:46,969
safety property and how we use safety

9
00:00:44,120 --> 00:00:52,129
properties to generate vulnerability

10
00:00:46,969 --> 00:00:56,690
patches which involves synthesizing

11
00:00:52,129 --> 00:01:00,410
patch predicates and optimizing patch

12
00:00:56,690 --> 00:01:07,160
location lastly I will present our

13
00:01:00,410 --> 00:01:09,920
evaluation results and conclude software

14
00:01:07,160 --> 00:01:14,330
vulnerabilities continue to be a rampant

15
00:01:09,920 --> 00:01:17,509
problem last year over 16,000

16
00:01:14,330 --> 00:01:21,310
vulnerabilities who are reported among

17
00:01:17,509 --> 00:01:24,020
them 25 percent how well known

18
00:01:21,310 --> 00:01:27,860
vulnerabilities including buffer

19
00:01:24,020 --> 00:01:32,600
overflows perturb cost and integer

20
00:01:27,860 --> 00:01:37,180
overflows so far this year 3,000 won and

21
00:01:32,600 --> 00:01:41,320
will ''tis have already been reported

22
00:01:37,180 --> 00:01:46,240
one software vulnerability is discovered

23
00:01:41,320 --> 00:01:49,130
the software vendor who had need to

24
00:01:46,240 --> 00:01:54,020
developer a patch and release the patch

25
00:01:49,130 --> 00:01:56,860
41 ability after which users can apply

26
00:01:54,020 --> 00:02:00,949
the patch to fix the vulnerability

27
00:01:56,860 --> 00:02:03,860
because release in the patch takes time

28
00:02:00,950 --> 00:02:05,780
there usually exists a window all the

29
00:02:03,860 --> 00:02:08,350
time between the discovery of

30
00:02:05,780 --> 00:02:11,019
vulnerability and the release of a patch

31
00:02:08,350 --> 00:02:14,269
which is called a pre patch window

32
00:02:11,019 --> 00:02:17,480
during the bridge patch window attackers

33
00:02:14,269 --> 00:02:22,340
can exploit this known vulnerability

34
00:02:17,480 --> 00:02:27,560
because the patch is yet available

35
00:02:22,340 --> 00:02:31,260
well study published in 2016 finds that

36
00:02:27,560 --> 00:02:40,380
the average pre-party window is as long

37
00:02:31,260 --> 00:02:43,590
as 52 days in order to reduce the

38
00:02:40,380 --> 00:02:44,750
prepaid window many automatic program

39
00:02:43,590 --> 00:02:50,160
repair techniques

40
00:02:44,750 --> 00:02:53,070
APR techniques have been proposed some

41
00:02:50,160 --> 00:02:56,790
of them leverages fixed patterns to

42
00:02:53,070 --> 00:02:59,519
mimic developers patches some uses

43
00:02:56,790 --> 00:03:04,920
genetic programming to generate the

44
00:02:59,520 --> 00:03:08,870
patches some generator patches by

45
00:03:04,920 --> 00:03:13,609
pouring code from correct programs

46
00:03:08,870 --> 00:03:16,410
others uses symbolic execution and

47
00:03:13,610 --> 00:03:21,930
constrain the server to generate the

48
00:03:16,410 --> 00:03:24,840
patches however state of art API

49
00:03:21,930 --> 00:03:28,910
techniques have a two major limitations

50
00:03:24,840 --> 00:03:33,720
when they are used to generate

51
00:03:28,910 --> 00:03:37,019
vulnerability patches first the correct

52
00:03:33,720 --> 00:03:40,859
anis have regenerated Apaches is heavily

53
00:03:37,020 --> 00:03:45,390
dependent on the complete list of the

54
00:03:40,860 --> 00:03:48,270
tested suite they use because they

55
00:03:45,390 --> 00:03:52,679
generate a large number of candidate

56
00:03:48,270 --> 00:03:56,340
pages and then rely on the test Suites

57
00:03:52,680 --> 00:04:01,290
to determine whether a candidate Apache

58
00:03:56,340 --> 00:04:02,520
is crack or not if the test suite is

59
00:04:01,290 --> 00:04:08,190
incomplete

60
00:04:02,520 --> 00:04:13,230
I encourage can pass the test suite and

61
00:04:08,190 --> 00:04:17,930
mistakenly be considered correct her

62
00:04:13,230 --> 00:04:21,890
study population in 2015 confirms that

63
00:04:17,930 --> 00:04:25,380
most of rows previously considered

64
00:04:21,890 --> 00:04:28,370
correctly generated Apaches by state of

65
00:04:25,380 --> 00:04:33,680
art Lydia techniques are indeed

66
00:04:28,370 --> 00:04:33,680
incorrect due to limitation

67
00:04:34,650 --> 00:04:47,560
so so now we show one patch that sees

68
00:04:44,260 --> 00:04:52,750
incorrectly generated by state of art

69
00:04:47,560 --> 00:04:56,020
API techniques this patch removes a

70
00:04:52,750 --> 00:05:00,490
check to integer overflow in the code of

71
00:04:56,020 --> 00:05:05,380
Liberty in an attempt to fix an integer

72
00:05:00,490 --> 00:05:09,220
overflow due to the incompleteness of

73
00:05:05,380 --> 00:05:13,390
the test suite this incorrect approach

74
00:05:09,220 --> 00:05:16,060
were simply not a trigger the test input

75
00:05:13,390 --> 00:05:19,080
that of the reveal the integer overflow

76
00:05:16,060 --> 00:05:22,530
and the sauce were being correctly

77
00:05:19,080 --> 00:05:22,530
considered correct

78
00:05:23,670 --> 00:05:37,590
second the this TPR techniques are not

79
00:05:34,090 --> 00:05:39,700
designed to address complex

80
00:05:37,590 --> 00:05:45,969
vulnerabilities involving

81
00:05:39,700 --> 00:05:50,469
interprocedural code because they focus

82
00:05:45,970 --> 00:05:55,690
are generating candidated patches for a

83
00:05:50,470 --> 00:06:01,450
single function for simple code like

84
00:05:55,690 --> 00:06:04,060
these are example where the location of

85
00:06:01,450 --> 00:06:07,479
the buffer and the exercise of the power

86
00:06:04,060 --> 00:06:11,230
her occurred in the same function they

87
00:06:07,480 --> 00:06:15,760
may be able to generate a patch that

88
00:06:11,230 --> 00:06:20,250
will check whether the range of exercise

89
00:06:15,760 --> 00:06:20,250
is within the bounds of the buffer

90
00:06:22,620 --> 00:06:30,400
however they cannot generate a crack the

91
00:06:25,690 --> 00:06:33,160
patches one the hole location of the

92
00:06:30,400 --> 00:06:36,960
buffer and the exercise of the buffer or

93
00:06:33,160 --> 00:06:40,090
curl in different functions the example

94
00:06:36,960 --> 00:06:43,479
is the result of breaking down the

95
00:06:40,090 --> 00:06:47,349
previous example code into three

96
00:06:43,480 --> 00:06:50,590
separate functions Fang Jing Jie

97
00:06:47,350 --> 00:06:53,260
Oh locates the buffer vanishing age

98
00:06:50,590 --> 00:06:57,520
excised the bottle and the things you

99
00:06:53,260 --> 00:07:03,520
have caused Gian h2o locate and exercise

100
00:06:57,520 --> 00:07:06,030
the part this is a common pattern the

101
00:07:03,520 --> 00:07:10,109
existing complex and the large

102
00:07:06,030 --> 00:07:14,500
publications the challenges is that

103
00:07:10,110 --> 00:07:18,610
function age has no information on the

104
00:07:14,500 --> 00:07:21,780
size of the buffer family she have does

105
00:07:18,610 --> 00:07:26,110
not have information on the range of

106
00:07:21,780 --> 00:07:32,760
exercise well thing she have is not a

107
00:07:26,110 --> 00:07:35,860
directly involve the in Devon bility the

108
00:07:32,760 --> 00:07:39,159
fundamental cause of recent imitations

109
00:07:35,860 --> 00:07:47,980
is that they do not take into account

110
00:07:39,160 --> 00:07:53,440
the semantics of one abilities so - so

111
00:07:47,980 --> 00:07:58,750
our solution aims to address these

112
00:07:53,440 --> 00:08:01,120
limitations by capture the semantics of

113
00:07:58,750 --> 00:08:05,230
vulnerabilities with safety properties

114
00:08:01,120 --> 00:08:10,930
and then use these safety properties to

115
00:08:05,230 --> 00:08:13,920
generate vulnerability patches we

116
00:08:10,930 --> 00:08:18,520
propose an approach for the sinks that

117
00:08:13,920 --> 00:08:22,020
uses human defined safely properties to

118
00:08:18,520 --> 00:08:25,810
generate a vulnerability purchase a

119
00:08:22,020 --> 00:08:29,680
safety property is designed specifically

120
00:08:25,810 --> 00:08:32,650
for one type of vulnerabilities for

121
00:08:29,680 --> 00:08:36,789
example given a safety property for

122
00:08:32,650 --> 00:08:41,650
Parker Hall flaws sinks can generate the

123
00:08:36,789 --> 00:08:45,430
pages for buffer overflows in many

124
00:08:41,650 --> 00:08:49,540
different target programs sinks

125
00:08:45,430 --> 00:08:53,199
generates a source code patches that it

126
00:08:49,540 --> 00:08:55,870
can be easily adopted by developers her

127
00:08:53,200 --> 00:08:58,900
sinks patch is in the form of an if

128
00:08:55,870 --> 00:09:01,449
statement that ability word program

129
00:08:58,900 --> 00:09:05,410
excusing to error handling

130
00:09:01,449 --> 00:09:09,399
one a safely property is violated and

131
00:09:05,410 --> 00:09:15,420
here we call this check the condition as

132
00:09:09,399 --> 00:09:20,230
a patch predicate a safety property

133
00:09:15,420 --> 00:09:24,779
defines an England to prevent a type of

134
00:09:20,230 --> 00:09:29,170
vulnerabilities for example by the

135
00:09:24,779 --> 00:09:32,589
definition of buffer overflow we can

136
00:09:29,170 --> 00:09:36,399
define a safety property for of hole

137
00:09:32,589 --> 00:09:40,779
flows that would a check between the

138
00:09:36,399 --> 00:09:45,279
range of exercise with the bounce over

139
00:09:40,779 --> 00:09:49,209
the target buffer also lowers the range

140
00:09:45,279 --> 00:09:54,360
of exercise is within the bounds of a

141
00:09:49,209 --> 00:09:58,449
target buffer no.1 an ability can occur

142
00:09:54,360 --> 00:10:01,809
by doing this the correctness of the

143
00:09:58,449 --> 00:10:04,529
generated apaches is enforced by the

144
00:10:01,809 --> 00:10:07,629
correctness of the safety properties

145
00:10:04,529 --> 00:10:13,420
used to generate this vulnerability

146
00:10:07,629 --> 00:10:16,769
patches to generate the patch syncs Maps

147
00:10:13,420 --> 00:10:20,399
a safety property to a patch predicate

148
00:10:16,769 --> 00:10:22,870
consisting of program expressions

149
00:10:20,399 --> 00:10:28,589
available in the code of a target

150
00:10:22,870 --> 00:10:32,259
program for one given safely property

151
00:10:28,589 --> 00:10:35,620
the code of a target program and an

152
00:10:32,259 --> 00:10:39,449
input to trigger the vulnerability sinks

153
00:10:35,620 --> 00:10:42,779
are executed a target code observes

154
00:10:39,449 --> 00:10:46,628
where the safety property is violated

155
00:10:42,779 --> 00:10:52,629
and maps the safety property to a patch

156
00:10:46,629 --> 00:10:55,410
predicate for example the this code ho

157
00:10:52,629 --> 00:10:58,860
locates the buffer vial chordoma lock

158
00:10:55,410 --> 00:11:01,959
which the size is specified by s and

159
00:10:58,860 --> 00:11:03,540
restores the studying address of the

160
00:11:01,959 --> 00:11:08,349
buffer to point above

161
00:11:03,540 --> 00:11:12,069
so things were map bastard and besides

162
00:11:08,350 --> 00:11:16,589
in the safety property to path and ask

163
00:11:12,069 --> 00:11:16,589
respectively for this target probe

164
00:11:16,620 --> 00:11:25,240
similarly things were map access range

165
00:11:20,620 --> 00:11:28,649
and hex eyes start to howl and the P

166
00:11:25,240 --> 00:11:31,839
respectively because the target program

167
00:11:28,649 --> 00:11:34,209
exercised the butter while core to my

168
00:11:31,839 --> 00:11:38,350
Maccabi with the starting address

169
00:11:34,209 --> 00:11:48,099
specified by point P and the links

170
00:11:38,350 --> 00:11:51,670
specified by he'll eventually sinks well

171
00:11:48,100 --> 00:11:54,880
map the safety property into a patch

172
00:11:51,670 --> 00:12:01,140
predicate for this target program as

173
00:11:54,880 --> 00:12:03,640
shown here to address growth

174
00:12:01,140 --> 00:12:08,380
vulnerability is involving hinder

175
00:12:03,640 --> 00:12:11,140
procedural code sinks translates program

176
00:12:08,380 --> 00:12:16,570
expressions across different program

177
00:12:11,140 --> 00:12:20,589
scopes even needed for this same example

178
00:12:16,570 --> 00:12:24,579
code that we shown before things will

179
00:12:20,589 --> 00:12:29,190
find that the buffer size can be mapped

180
00:12:24,579 --> 00:12:32,770
to P times Q in the scope of function G

181
00:12:29,190 --> 00:12:37,120
and the access range can be mapped to

182
00:12:32,770 --> 00:12:41,100
Lane in the scope of H because fangs

183
00:12:37,120 --> 00:12:45,430
have is the common color of G and H

184
00:12:41,100 --> 00:12:49,860
sinks tries to translate the buffer size

185
00:12:45,430 --> 00:12:54,279
and access range to the scope of Earth

186
00:12:49,860 --> 00:12:59,920
by examining the arguments used by half

187
00:12:54,279 --> 00:13:04,149
tukoji and H sinks were translate P

188
00:12:59,920 --> 00:13:07,689
times Q from the scope of G to Adam see

189
00:13:04,149 --> 00:13:11,589
in the scope of app hello translates

190
00:13:07,690 --> 00:13:14,310
lean from the scope of age to end in the

191
00:13:11,589 --> 00:13:14,310
scope of F

192
00:13:16,089 --> 00:13:24,680
and by doing so syncs can synthesize

193
00:13:20,870 --> 00:13:30,589
Apache predicates and ass as a patch in

194
00:13:24,680 --> 00:13:33,529
the scope of half in the case when a

195
00:13:30,589 --> 00:13:38,540
patch is to be inserted into the body of

196
00:13:33,529 --> 00:13:41,149
loop sinks tries to promote a patch how

197
00:13:38,540 --> 00:13:48,199
the site at the pad lupa body to reduce

198
00:13:41,149 --> 00:13:52,940
random overhead this requires to find

199
00:13:48,200 --> 00:13:56,240
out the range of exercise performed by

200
00:13:52,940 --> 00:14:00,980
the body of a loop sings to address that

201
00:13:56,240 --> 00:14:04,329
with two techniques for well form the

202
00:14:00,980 --> 00:14:08,899
loops sinks users access range analysis

203
00:14:04,329 --> 00:14:14,810
to statically compute a symbolic access

204
00:14:08,899 --> 00:14:18,290
range for for these loops and in this

205
00:14:14,810 --> 00:14:21,859
example things were find that the access

206
00:14:18,290 --> 00:14:27,079
range for this nasty the loop is n times

207
00:14:21,860 --> 00:14:34,760
I am and then it will use n times m in

208
00:14:27,079 --> 00:14:38,569
the generated patch further loops syncs

209
00:14:34,760 --> 00:14:41,329
with the use loop calumny that well

210
00:14:38,570 --> 00:14:45,560
column the code of the function that

211
00:14:41,329 --> 00:14:49,160
contains the loop makes the columnar

212
00:14:45,560 --> 00:14:52,790
code free of side effect and then let

213
00:14:49,160 --> 00:14:57,800
the patch caused the columnar code to

214
00:14:52,790 --> 00:15:00,829
dynamically compute the access range as

215
00:14:57,800 --> 00:15:04,040
I show in this example the code on the

216
00:15:00,829 --> 00:15:07,959
right we show the corona code on the top

217
00:15:04,040 --> 00:15:11,930
and at the bottom we show the patch

218
00:15:07,959 --> 00:15:14,779
generated by sings well cord is Colonna

219
00:15:11,930 --> 00:15:20,870
code at a random - computer the access

220
00:15:14,779 --> 00:15:23,240
range outside the body of the loop we

221
00:15:20,870 --> 00:15:25,850
build a prototype of things that are

222
00:15:23,240 --> 00:15:28,180
target's three common types of

223
00:15:25,850 --> 00:15:28,180
vulnerabilities

224
00:15:28,820 --> 00:15:36,270
our prototype is built on top of our

225
00:15:32,640 --> 00:15:43,110
lien and works with targeted programs

226
00:15:36,270 --> 00:15:47,550
written in C and C++ we evaluate the

227
00:15:43,110 --> 00:15:51,450
things 42 real-world vulnerabilities in

228
00:15:47,550 --> 00:15:55,290
11 widely deployed applications and the

229
00:15:51,450 --> 00:15:58,530
libraries which in total have over three

230
00:15:55,290 --> 00:16:03,449
meanings lines of source code syncs

231
00:15:58,530 --> 00:16:07,380
successfully generates pages for 76% of

232
00:16:03,450 --> 00:16:11,040
these vulnerabilities to verify the

233
00:16:07,380 --> 00:16:14,220
correctness of the generated pages we

234
00:16:11,040 --> 00:16:21,540
manually compare the generated patches

235
00:16:14,220 --> 00:16:26,010
with official patches so here we show

236
00:16:21,540 --> 00:16:29,150
one sample patch generated by syncs so

237
00:16:26,010 --> 00:16:32,490
the figure on the Left shows the patch

238
00:16:29,150 --> 00:16:36,270
generated by syncs where the feet on the

239
00:16:32,490 --> 00:16:39,930
right shows the patch that's created by

240
00:16:36,270 --> 00:16:47,220
human developers and we can see the two

241
00:16:39,930 --> 00:16:50,329
patches are almost identical things does

242
00:16:47,220 --> 00:16:55,350
not generate the patches in some cases

243
00:16:50,330 --> 00:16:58,290
mainly due to two causes first things

244
00:16:55,350 --> 00:17:01,580
may not be able to map a safety property

245
00:16:58,290 --> 00:17:04,530
to a patch predicate due to the

246
00:17:01,580 --> 00:17:10,650
complexity of the code of a target

247
00:17:04,530 --> 00:17:15,480
program second things may not be able to

248
00:17:10,650 --> 00:17:18,660
find a program scope in which all the

249
00:17:15,480 --> 00:17:25,980
program expressions involved in patch

250
00:17:18,660 --> 00:17:28,740
predicates are available to conclude we

251
00:17:25,980 --> 00:17:32,000
propose an approach for the syncs that

252
00:17:28,740 --> 00:17:34,860
uses human defined program independent

253
00:17:32,000 --> 00:17:38,670
safety properties to generate

254
00:17:34,860 --> 00:17:41,340
vulnerability patches the quirkiness of

255
00:17:38,670 --> 00:17:42,340
the generated purchase is enforced by

256
00:17:41,340 --> 00:17:45,610
the crack

257
00:17:42,340 --> 00:17:49,530
of these safety properties our

258
00:17:45,610 --> 00:17:52,360
evaluation shows that sinks can generate

259
00:17:49,530 --> 00:17:54,810
water nobility patches for real-world

260
00:17:52,360 --> 00:18:05,919
warrant abilities

261
00:17:54,810 --> 00:18:07,450
thank you and I'm open to questions do

262
00:18:05,920 --> 00:18:13,680
we have any questions from the audience

263
00:18:07,450 --> 00:18:13,680
we actually have a lot of time left

264
00:18:14,760 --> 00:18:20,440
well then then let me start there with

265
00:18:18,580 --> 00:18:23,439
one simple question so one thing that

266
00:18:20,440 --> 00:18:25,660
I'm not quite sure if I understand is

267
00:18:23,440 --> 00:18:28,450
that what exactly is the input to your

268
00:18:25,660 --> 00:18:30,040
system I understand is this some it's

269
00:18:28,450 --> 00:18:31,900
some form of expression of a safety

270
00:18:30,040 --> 00:18:33,610
property yes that's right let's say for

271
00:18:31,900 --> 00:18:35,740
a for vulnerability for a reported

272
00:18:33,610 --> 00:18:37,179
vulnerability what exactly is is the

273
00:18:35,740 --> 00:18:41,680
input to your system Oh

274
00:18:37,180 --> 00:18:45,160
so we require the code of the tracking

275
00:18:41,680 --> 00:18:48,790
the program and we also require one

276
00:18:45,160 --> 00:18:53,320
input to trigger the vulnerability along

277
00:18:48,790 --> 00:18:56,200
with the safety property so that's the

278
00:18:53,320 --> 00:18:58,389
basically three types of inputs to my

279
00:18:56,200 --> 00:19:02,140
assisting man okay then a follow-up

280
00:18:58,390 --> 00:19:04,900
question to that is how easy or how

281
00:19:02,140 --> 00:19:09,370
difficult to to construct or define this

282
00:19:04,900 --> 00:19:15,330
property given a new bug yes that's a

283
00:19:09,370 --> 00:19:19,179
yeah so regarding that from our

284
00:19:15,330 --> 00:19:21,460
experiment and for these three types of

285
00:19:19,180 --> 00:19:26,350
vulnerabilities that things can

286
00:19:21,460 --> 00:19:28,230
currently fix they are very simple to

287
00:19:26,350 --> 00:19:31,389
define in these safety properties

288
00:19:28,230 --> 00:19:35,530
because we just provide some primitives

289
00:19:31,390 --> 00:19:39,430
for security experts to write in these

290
00:19:35,530 --> 00:19:42,580
expressions that is an inherent to

291
00:19:39,430 --> 00:19:46,840
prevent one type of one abilities

292
00:19:42,580 --> 00:19:48,790
I assume that the efforts required for

293
00:19:46,840 --> 00:19:51,280
defining these properties would be much

294
00:19:48,790 --> 00:19:55,600
less than the effort required for really

295
00:19:51,280 --> 00:19:59,210
writing a patch to this vulnerability

296
00:19:55,600 --> 00:20:04,389
I'm not sure if yeah we we can't compare

297
00:19:59,210 --> 00:20:07,700
this because the factory is that to use

298
00:20:04,389 --> 00:20:10,459
sinks to generate the pages we only need

299
00:20:07,700 --> 00:20:13,309
to define a safety property for one type

300
00:20:10,460 --> 00:20:15,559
of vulnerability once so while the

301
00:20:13,309 --> 00:20:18,139
safety property is defined for one type

302
00:20:15,559 --> 00:20:20,658
of vulnerabilities then we can just use

303
00:20:18,139 --> 00:20:25,570
the same safety probability to generate

304
00:20:20,659 --> 00:20:25,570
many wannabe pages okay thanks

