1
00:00:08,620 --> 00:00:14,329
okay thank you yeah so I'm going to be

2
00:00:11,629 --> 00:00:16,730
talking about fidelia's this project is

3
00:00:14,330 --> 00:00:17,960
joint work with a small army of Stanford

4
00:00:16,730 --> 00:00:20,240
undergrad and master students whose

5
00:00:17,960 --> 00:00:22,460
names you can see on the slide as well

6
00:00:20,240 --> 00:00:26,000
as Giancarlo Pellegrino from cipa and

7
00:00:22,460 --> 00:00:28,099
Dan Bonet so the problem that we're

8
00:00:26,000 --> 00:00:29,390
interested here is that all the time all

9
00:00:28,099 --> 00:00:30,800
the time users are asked to put

10
00:00:29,390 --> 00:00:31,550
sensitive information into their web

11
00:00:30,800 --> 00:00:33,050
browser window

12
00:00:31,550 --> 00:00:34,550
so whether you're enrolling in online

13
00:00:33,050 --> 00:00:36,290
banking you're applying for a loan

14
00:00:34,550 --> 00:00:37,760
online and you're doing your taxes or

15
00:00:36,290 --> 00:00:39,199
signing up for direct deposit with your

16
00:00:37,760 --> 00:00:40,670
employer you're asked to put in

17
00:00:39,199 --> 00:00:42,320
sensitive information like a social

18
00:00:40,670 --> 00:00:44,539
security number a bank account number

19
00:00:42,320 --> 00:00:46,340
and if your computer happens to be

20
00:00:44,539 --> 00:00:47,660
compromised by malware either in the

21
00:00:46,340 --> 00:00:49,100
browser or maybe the whole operating

22
00:00:47,660 --> 00:00:51,019
system you're in the unfortunate

23
00:00:49,100 --> 00:00:53,449
situation where the malware is able to

24
00:00:51,020 --> 00:00:55,340
steal all of your secrets so the

25
00:00:53,449 --> 00:00:57,079
question we want to answer is can we

26
00:00:55,340 --> 00:00:59,140
stop malware from reading the secrets

27
00:00:57,079 --> 00:01:01,219
that we type into the browser window and

28
00:00:59,140 --> 00:01:02,420
of course if we're interested in a

29
00:01:01,219 --> 00:01:03,890
setting where potentially the whole

30
00:01:02,420 --> 00:01:06,110
operating system is compromised by

31
00:01:03,890 --> 00:01:08,330
malware we might have to resort to

32
00:01:06,110 --> 00:01:09,410
hardware to solve part of our problem

33
00:01:08,330 --> 00:01:11,539
and that's exactly what we're gonna do

34
00:01:09,410 --> 00:01:13,070
here we're going to be using trusted

35
00:01:11,539 --> 00:01:15,530
Hardware enclaves and if you're not

36
00:01:13,070 --> 00:01:17,210
familiar a hardware Enclave is a trusted

37
00:01:15,530 --> 00:01:18,770
component in an otherwise untrusted

38
00:01:17,210 --> 00:01:20,658
system so what an Hardware Enclave gives

39
00:01:18,770 --> 00:01:22,789
you is it gives you a small area of

40
00:01:20,659 --> 00:01:25,820
memory that even if the entire operating

41
00:01:22,790 --> 00:01:28,310
system is compromised this area this

42
00:01:25,820 --> 00:01:29,899
memory is isolated so you can have some

43
00:01:28,310 --> 00:01:32,000
code in that area you can have some data

44
00:01:29,900 --> 00:01:33,290
in that area and then the execution of

45
00:01:32,000 --> 00:01:35,540
that code can't be interrupted or

46
00:01:33,290 --> 00:01:36,520
damaged by the can be tampered with by

47
00:01:35,540 --> 00:01:39,020
the operating system

48
00:01:36,520 --> 00:01:40,399
in addition enclaves are able to prove

49
00:01:39,020 --> 00:01:41,810
that they're authentic enclaves to a

50
00:01:40,399 --> 00:01:44,780
remote host using a process called

51
00:01:41,810 --> 00:01:46,369
attestation and in our project for in

52
00:01:44,780 --> 00:01:48,829
the implementation we used enclaves

53
00:01:46,369 --> 00:01:50,689
based on Intel SGX but there's actually

54
00:01:48,829 --> 00:01:52,429
nothing in particular about the system

55
00:01:50,689 --> 00:01:54,258
I'm going to describe that relies on SGX

56
00:01:52,430 --> 00:01:56,420
we could just as easily have used any

57
00:01:54,259 --> 00:01:58,759
other Enclave so we could have used arm

58
00:01:56,420 --> 00:02:00,140
trust so in our AMD's SUV or any one of

59
00:01:58,759 --> 00:02:01,969
the number of academic proposals that

60
00:02:00,140 --> 00:02:05,930
are out there to provide Hardware

61
00:02:01,969 --> 00:02:07,280
unclear functionality so even if we have

62
00:02:05,930 --> 00:02:08,720
we have a hardware Enclave we can have

63
00:02:07,280 --> 00:02:10,009
some hope that maybe we can have some

64
00:02:08,720 --> 00:02:11,810
kind of security even if we have

65
00:02:10,008 --> 00:02:12,980
software compromised but there's still a

66
00:02:11,810 --> 00:02:14,450
number of challenges that we need to

67
00:02:12,980 --> 00:02:16,160
overcome before we can leverage the

68
00:02:14,450 --> 00:02:18,619
hardware Enclave to solve our problem of

69
00:02:16,160 --> 00:02:20,180
protecting user inputs to the browser so

70
00:02:18,620 --> 00:02:21,680
the first problem is that what the

71
00:02:20,180 --> 00:02:22,340
Enclave gives you is some protected

72
00:02:21,680 --> 00:02:24,110
memory

73
00:02:22,340 --> 00:02:25,880
but what we want to do is we want to

74
00:02:24,110 --> 00:02:27,890
allow users to interact with browsers

75
00:02:25,880 --> 00:02:29,870
and users type on keyboards and look at

76
00:02:27,890 --> 00:02:31,760
displays and the Enclave doesn't have

77
00:02:29,870 --> 00:02:33,050
access to displays and keyboards the

78
00:02:31,760 --> 00:02:34,579
Enclave can only communicate to this

79
00:02:33,050 --> 00:02:36,020
operating system that might be

80
00:02:34,580 --> 00:02:38,150
compromised and needs to interact with

81
00:02:36,020 --> 00:02:39,319
peripherals on its behalf so we need

82
00:02:38,150 --> 00:02:41,000
some way to make sure that this

83
00:02:39,319 --> 00:02:42,738
potentially compromised operating system

84
00:02:41,000 --> 00:02:47,239
and browser aren't able to intercept

85
00:02:42,739 --> 00:02:49,610
user secrets second if we want to

86
00:02:47,239 --> 00:02:51,410
protect web browsers web browsers today

87
00:02:49,610 --> 00:02:52,880
are huge pieces of software with

88
00:02:51,410 --> 00:02:54,950
millions and millions of lines of code

89
00:02:52,880 --> 00:02:56,480
and it would be a huge engineering feat

90
00:02:54,950 --> 00:02:58,130
to try to take a browser and push it

91
00:02:56,480 --> 00:02:59,810
into the limited space of an Enclave

92
00:02:58,130 --> 00:03:01,220
but even if we could pull this off we

93
00:02:59,810 --> 00:03:03,200
have another problem and this is that in

94
00:03:01,220 --> 00:03:05,450
these millions of lines of code browsers

95
00:03:03,200 --> 00:03:06,649
have lots of vulnerabilities too and if

96
00:03:05,450 --> 00:03:08,420
you take a browser and put it into an

97
00:03:06,650 --> 00:03:10,040
enclave the vulnerabilities will still

98
00:03:08,420 --> 00:03:11,510
be there so you could end up in a

99
00:03:10,040 --> 00:03:12,470
situation that's actually worse than

100
00:03:11,510 --> 00:03:14,540
where you started where you have a

101
00:03:12,470 --> 00:03:16,670
browser in an enclave the browser is

102
00:03:14,540 --> 00:03:18,170
compromised by malware and any defense

103
00:03:16,670 --> 00:03:20,540
mechanism you might have like antivirus

104
00:03:18,170 --> 00:03:22,548
to detect and remove malware is actually

105
00:03:20,540 --> 00:03:24,140
now unable to see the attacker because

106
00:03:22,549 --> 00:03:25,610
it's being protected by your Enclave and

107
00:03:24,140 --> 00:03:27,018
you really shot yourself from the foot

108
00:03:25,610 --> 00:03:30,049
here so we're gonna have to be careful

109
00:03:27,019 --> 00:03:31,519
of this too so with these two challenges

110
00:03:30,049 --> 00:03:33,350
in mind this is where the fidelity of

111
00:03:31,519 --> 00:03:35,480
system comes in mind comes into play and

112
00:03:33,350 --> 00:03:37,070
the goal of Fedele is is to protect user

113
00:03:35,480 --> 00:03:41,420
keyboard inputs from a browser that's

114
00:03:37,070 --> 00:03:43,280
been fully compromised so and we can do

115
00:03:41,420 --> 00:03:46,429
this without having to push the browser

116
00:03:43,280 --> 00:03:48,019
into the Enclave so in particular the

117
00:03:46,430 --> 00:03:49,609
browser stays outside of the Enclave all

118
00:03:48,019 --> 00:03:51,260
that goes into the Enclave is the small

119
00:03:49,609 --> 00:03:53,239
Fidelis functionality that we've written

120
00:03:51,260 --> 00:03:54,590
and we also have a Chrome extension that

121
00:03:53,239 --> 00:03:56,120
allows the browser and the Enclave to

122
00:03:54,590 --> 00:03:57,260
communicate so that the browser can take

123
00:03:56,120 --> 00:03:59,900
advantage of the features that the

124
00:03:57,260 --> 00:04:01,608
Enclave provides and what our Enclave

125
00:03:59,900 --> 00:04:03,799
allows users to do is we have support

126
00:04:01,609 --> 00:04:05,720
for for simple HTML forms where users

127
00:04:03,799 --> 00:04:07,579
can type in their sensitive data we

128
00:04:05,720 --> 00:04:10,069
allow JavaScript to run in the Enclave

129
00:04:07,579 --> 00:04:12,230
to do operations on the users data and

130
00:04:10,069 --> 00:04:14,238
we provide access to local storage as

131
00:04:12,230 --> 00:04:15,738
well as XML HTTP requests to send that

132
00:04:14,239 --> 00:04:19,010
data to some remote host wherever it

133
00:04:15,739 --> 00:04:20,239
needs to go now another important

134
00:04:19,010 --> 00:04:21,918
consideration if we're building a system

135
00:04:20,238 --> 00:04:23,570
for the web is how our developer is

136
00:04:21,918 --> 00:04:24,979
going to interact with it and we wanted

137
00:04:23,570 --> 00:04:26,630
to make sure that to use fidelia's

138
00:04:24,979 --> 00:04:28,400
developers have to make minimal changes

139
00:04:26,630 --> 00:04:29,810
to their websites today so to get

140
00:04:28,400 --> 00:04:31,909
started with fidelia's all you need to

141
00:04:29,810 --> 00:04:34,340
do is to take an existing tag that you

142
00:04:31,909 --> 00:04:35,960
have and add this secure attribute to it

143
00:04:34,340 --> 00:04:37,489
and the secure attribute in the

144
00:04:35,960 --> 00:04:39,440
kate's that whatever this tag is whether

145
00:04:37,490 --> 00:04:41,000
it's a script or an input it's going to

146
00:04:39,440 --> 00:04:43,280
be handled inside of the Enclave and not

147
00:04:41,000 --> 00:04:44,720
by the rest of the browser in addition

148
00:04:43,280 --> 00:04:47,270
to the tag there needs to be a signature

149
00:04:44,720 --> 00:04:49,009
added added to each tag that's going to

150
00:04:47,270 --> 00:04:50,659
be sensitive and this is a signature

151
00:04:49,009 --> 00:04:52,699
that's generated by the web server and

152
00:04:50,660 --> 00:04:53,990
verified in the Enclave and the purpose

153
00:04:52,699 --> 00:04:55,550
for this is to make sure that a browser

154
00:04:53,990 --> 00:04:57,380
that's sitting between the server and

155
00:04:55,550 --> 00:04:58,880
the Enclave isn't able to tamper with

156
00:04:57,380 --> 00:05:02,900
the the contents that are supposed to be

157
00:04:58,880 --> 00:05:04,490
processed inside of the Enclave finally

158
00:05:02,900 --> 00:05:06,020
and perhaps most importantly we need

159
00:05:04,490 --> 00:05:07,400
some way for the user to be able to

160
00:05:06,020 --> 00:05:09,380
interact with the Enclave and take

161
00:05:07,400 --> 00:05:11,179
advantage of fidelia's so we build these

162
00:05:09,380 --> 00:05:13,520
dongles you can see pictures of them

163
00:05:11,180 --> 00:05:15,560
here and they implement a trusted path

164
00:05:13,520 --> 00:05:17,690
from the Enclave to the to the user so

165
00:05:15,560 --> 00:05:19,780
that any attacker in between isn't able

166
00:05:17,690 --> 00:05:21,949
to tamper with or read what's being sent

167
00:05:19,780 --> 00:05:24,710
so I want to start by talking about this

168
00:05:21,949 --> 00:05:26,630
trusted path to and from the Enclave so

169
00:05:24,710 --> 00:05:29,000
we built these dongles out of raspberry

170
00:05:26,630 --> 00:05:31,009
PI's and attach them to off-the-shelf

171
00:05:29,000 --> 00:05:32,479
keyboards in this place I want to point

172
00:05:31,009 --> 00:05:34,009
out that raspberry PI's were actually

173
00:05:32,479 --> 00:05:36,380
really really overkill for this project

174
00:05:34,009 --> 00:05:38,120
they're just good for for prototyping

175
00:05:36,380 --> 00:05:39,919
and quick development but in practice we

176
00:05:38,120 --> 00:05:41,960
could use much weaker processors and

177
00:05:39,919 --> 00:05:43,310
raspberry PI's to do this and the reason

178
00:05:41,960 --> 00:05:45,020
you'll see is with all the dongles

179
00:05:43,310 --> 00:05:46,849
really do is that they allow these

180
00:05:45,020 --> 00:05:49,039
devices to switch between trusted and

181
00:05:46,849 --> 00:05:51,169
untrusted modes so when a device is in

182
00:05:49,039 --> 00:05:52,580
an untrusted mode it does the exact same

183
00:05:51,169 --> 00:05:54,020
thing that it would do if the dongle

184
00:05:52,580 --> 00:05:55,520
wasn't there so the dongles just act is

185
00:05:54,020 --> 00:05:57,139
passed through devices so if we user

186
00:05:55,520 --> 00:05:58,609
presses something on the keyboard the

187
00:05:57,139 --> 00:06:01,159
dongle pretends to be a keyboard and

188
00:05:58,610 --> 00:06:03,199
sends the key press to the computer for

189
00:06:01,159 --> 00:06:04,880
the display the dongle just receives all

190
00:06:03,199 --> 00:06:06,740
of the HDMI output from the computer and

191
00:06:04,880 --> 00:06:09,919
sends it back out on the Sony HDMI

192
00:06:06,740 --> 00:06:11,419
output to the display what gets

193
00:06:09,919 --> 00:06:14,060
interesting is when we switch into the

194
00:06:11,419 --> 00:06:15,710
trusted mode so in the trusted mode for

195
00:06:14,060 --> 00:06:17,870
the keyboard when you switch into

196
00:06:15,710 --> 00:06:20,180
trusted mode dongle begins to simulate a

197
00:06:17,870 --> 00:06:21,919
second device and this second device

198
00:06:20,180 --> 00:06:24,710
sends a constant stream of encrypted

199
00:06:21,919 --> 00:06:25,820
packets into the Enclave and these these

200
00:06:24,710 --> 00:06:27,409
packets are encrypted with the key

201
00:06:25,820 --> 00:06:30,860
shared between the the dongle and the

202
00:06:27,409 --> 00:06:32,300
Enclave so and these are sent at a

203
00:06:30,860 --> 00:06:33,620
constant rate because we don't want to

204
00:06:32,300 --> 00:06:35,630
reveal anything about the typing

205
00:06:33,620 --> 00:06:37,490
patterns of the user to an attacker so

206
00:06:35,630 --> 00:06:38,960
if a user presses a key the encrypted

207
00:06:37,490 --> 00:06:40,820
packet is going to contain whatever key

208
00:06:38,960 --> 00:06:42,560
the user pressed if the user doesn't

209
00:06:40,820 --> 00:06:46,310
press a key just empty packets are going

210
00:06:42,560 --> 00:06:47,270
to be sent on the display side one thing

211
00:06:46,310 --> 00:06:48,589
we could do is we could do the same

212
00:06:47,270 --> 00:06:49,370
thing that we did with the keyboard we

213
00:06:48,589 --> 00:06:50,660
could just encrypt

214
00:06:49,370 --> 00:06:52,520
everything that needs to be displayed

215
00:06:50,660 --> 00:06:54,260
and then decrypted on the dongle but

216
00:06:52,520 --> 00:06:56,359
this is really taxing both in terms of

217
00:06:54,260 --> 00:06:58,729
the resources of the of the Enclave and

218
00:06:56,360 --> 00:07:00,740
also it would be a lot to ask the dongle

219
00:06:58,729 --> 00:07:02,539
to repeatedly decrypt the entire

220
00:07:00,740 --> 00:07:05,360
contents of a high-resolution display at

221
00:07:02,540 --> 00:07:07,040
a good refresh rate so instead when we

222
00:07:05,360 --> 00:07:08,540
move into the trusted mode the display

223
00:07:07,040 --> 00:07:09,800
dongle continues to act as a

224
00:07:08,540 --> 00:07:11,030
pass-through device and just send

225
00:07:09,800 --> 00:07:13,010
everything it receives out to the

226
00:07:11,030 --> 00:07:14,900
display but in addition to the regular

227
00:07:13,010 --> 00:07:16,849
contents of the display we allow the

228
00:07:14,900 --> 00:07:19,010
Enclave to send a series of encrypted

229
00:07:16,850 --> 00:07:20,479
overlays to the display too and these

230
00:07:19,010 --> 00:07:22,250
encrypted overlays are going to contain

231
00:07:20,479 --> 00:07:24,199
exactly the sensitive information that a

232
00:07:22,250 --> 00:07:25,669
user has typed so in this way we don't

233
00:07:24,199 --> 00:07:27,470
pay for the overhead except for the

234
00:07:25,669 --> 00:07:29,120
minimum overhead we need to play in

235
00:07:27,470 --> 00:07:31,400
order to see like the number that a user

236
00:07:29,120 --> 00:07:32,960
is typing on the screen and when the

237
00:07:31,400 --> 00:07:34,669
when the dongle gets this thing it'll

238
00:07:32,960 --> 00:07:37,750
decrypt it and it will place it in the

239
00:07:34,669 --> 00:07:41,599
appropriate place on this on the screen

240
00:07:37,750 --> 00:07:43,220
so what this looks like for users is the

241
00:07:41,600 --> 00:07:44,840
in the prototype that we built we have

242
00:07:43,220 --> 00:07:47,660
these two lights the dongles have lights

243
00:07:44,840 --> 00:07:49,698
on them and when the keyboard and

244
00:07:47,660 --> 00:07:51,620
display are move into the trusted mode

245
00:07:49,699 --> 00:07:53,090
these lights turn on so the reason that

246
00:07:51,620 --> 00:07:54,560
we have two lights is that whenever

247
00:07:53,090 --> 00:07:56,900
you're using fidelity is to interact

248
00:07:54,560 --> 00:07:58,370
with a secured website your the

249
00:07:56,900 --> 00:07:59,719
information that is sensitive on the

250
00:07:58,370 --> 00:08:01,310
screen will always be displayed so the

251
00:07:59,720 --> 00:08:03,560
display always needs to be in trusted

252
00:08:01,310 --> 00:08:05,330
mode whenever you're looking at a

253
00:08:03,560 --> 00:08:06,560
fidelity secured website but it's

254
00:08:05,330 --> 00:08:08,539
possible that you might switch between

255
00:08:06,560 --> 00:08:10,220
trusted and untrusted inputs on the

256
00:08:08,539 --> 00:08:11,570
keyboards like maybe one moment you're

257
00:08:10,220 --> 00:08:13,460
typing in your social security number

258
00:08:11,570 --> 00:08:14,960
and the other maybe you're typing in

259
00:08:13,460 --> 00:08:16,190
some customer support feedback and one

260
00:08:14,960 --> 00:08:17,750
of these is sensitive and the other is

261
00:08:16,190 --> 00:08:19,070
not and we need to be able to switch

262
00:08:17,750 --> 00:08:20,630
between them so that sometimes the

263
00:08:19,070 --> 00:08:22,219
normal keyboard is the one that gets

264
00:08:20,630 --> 00:08:25,580
through the system and other times it's

265
00:08:22,220 --> 00:08:26,930
the Fidelia secure keyboard so this is

266
00:08:25,580 --> 00:08:29,000
why we have the two lights in addition

267
00:08:26,930 --> 00:08:30,979
to this for the trusted display we have

268
00:08:29,000 --> 00:08:32,990
a little green overlay that goes across

269
00:08:30,979 --> 00:08:35,630
the bottom of the user screen and this

270
00:08:32,990 --> 00:08:37,490
overlay indicates what remote origin the

271
00:08:35,630 --> 00:08:39,049
Enclave has connected to and that is

272
00:08:37,490 --> 00:08:40,219
exactly the only person who's allowed to

273
00:08:39,049 --> 00:08:43,789
see the sensitive information that

274
00:08:40,219 --> 00:08:45,140
you're typing so something that was

275
00:08:43,789 --> 00:08:47,480
mentioned in the previous talks and then

276
00:08:45,140 --> 00:08:48,949
you might be thinking right now is in

277
00:08:47,480 --> 00:08:50,480
this prototype we've built security

278
00:08:48,950 --> 00:08:52,550
relies on users watching security

279
00:08:50,480 --> 00:08:53,570
indicators and watching security

280
00:08:52,550 --> 00:08:54,949
indicators is something that's been

281
00:08:53,570 --> 00:08:57,320
shown again and again to not be an

282
00:08:54,950 --> 00:08:59,750
effective way of getting users to to

283
00:08:57,320 --> 00:09:01,880
behave it turns out people don't really

284
00:08:59,750 --> 00:09:02,810
pay attention so I want to say this is

285
00:09:01,880 --> 00:09:03,320
something we just built for our

286
00:09:02,810 --> 00:09:04,969
prototypes

287
00:09:03,320 --> 00:09:06,890
that we can see that like an alert and

288
00:09:04,970 --> 00:09:08,690
trained user can use fidelia's properly

289
00:09:06,890 --> 00:09:10,220
if we wanted to deploy Fedeli yes we'd

290
00:09:08,690 --> 00:09:11,420
have to take advantage of all the work

291
00:09:10,220 --> 00:09:13,190
that the security community has done

292
00:09:11,420 --> 00:09:14,510
over the last few decades and build in

293
00:09:13,190 --> 00:09:15,920
other things like maybe secure detention

294
00:09:14,510 --> 00:09:18,050
sequences and other stuff that will help

295
00:09:15,920 --> 00:09:19,550
users really understand what it is that

296
00:09:18,050 --> 00:09:23,060
they're interacting with and when it's

297
00:09:19,550 --> 00:09:25,160
on and when it's off so this is an

298
00:09:23,060 --> 00:09:27,319
example of fidelity it's in action on

299
00:09:25,160 --> 00:09:29,839
the left you can see a photograph I took

300
00:09:27,320 --> 00:09:30,950
of somebody typing in some sensitive

301
00:09:29,840 --> 00:09:32,660
credit card information on the screen

302
00:09:30,950 --> 00:09:33,890
and on the right you can see a

303
00:09:32,660 --> 00:09:35,540
screenshot we took from the same

304
00:09:33,890 --> 00:09:37,189
computer at the time the user was typing

305
00:09:35,540 --> 00:09:38,449
and this is to simulate kind of the view

306
00:09:37,190 --> 00:09:39,770
that malware would have if they were it

307
00:09:38,450 --> 00:09:41,570
was able to take over your computer and

308
00:09:39,770 --> 00:09:42,890
capture everything that your computer

309
00:09:41,570 --> 00:09:45,230
was doing including the output to the

310
00:09:42,890 --> 00:09:46,939
display so you can see that in real life

311
00:09:45,230 --> 00:09:49,370
I saw the credit card number being typed

312
00:09:46,940 --> 00:09:50,960
on the screen but the malware only sees

313
00:09:49,370 --> 00:09:52,730
that somebody has navigated to this page

314
00:09:50,960 --> 00:09:54,470
that they've clicked the the credit card

315
00:09:52,730 --> 00:09:56,270
number field but then the actual digits

316
00:09:54,470 --> 00:09:58,100
that get typed aren't visible to the

317
00:09:56,270 --> 00:10:00,110
attacker and there's a video of the

318
00:09:58,100 --> 00:10:02,030
video demo of this at crypto Stanford

319
00:10:00,110 --> 00:10:03,440
edu slash Fidelia so you can see it kind

320
00:10:02,030 --> 00:10:06,410
of working live there if you're

321
00:10:03,440 --> 00:10:08,060
interested I should point out at this

322
00:10:06,410 --> 00:10:09,709
point there's kind of an attack that

323
00:10:08,060 --> 00:10:11,839
that comes to mind when I describe this

324
00:10:09,710 --> 00:10:15,200
system to people and this is that what's

325
00:10:11,840 --> 00:10:16,640
to stop a web browser from seeing that

326
00:10:15,200 --> 00:10:18,380
this is a website that's supposed to use

327
00:10:16,640 --> 00:10:20,930
fidelia's stripping off all of the

328
00:10:18,380 --> 00:10:22,400
fidelia's parts and then just doing

329
00:10:20,930 --> 00:10:23,739
everything itself like surely the

330
00:10:22,400 --> 00:10:25,459
browser by itself can give you

331
00:10:23,740 --> 00:10:27,530
interactive display as well where you

332
00:10:25,460 --> 00:10:29,570
can type in your credit card number but

333
00:10:27,530 --> 00:10:30,740
this is where the the security

334
00:10:29,570 --> 00:10:33,440
indicators I talked about on the

335
00:10:30,740 --> 00:10:35,150
previous slide come in so it's kind of a

336
00:10:33,440 --> 00:10:36,530
generic attack against any system using

337
00:10:35,150 --> 00:10:39,500
an Enclave that the operating system can

338
00:10:36,530 --> 00:10:41,600
ignore the Enclave and not use it but at

339
00:10:39,500 --> 00:10:43,880
least in our system if this is happening

340
00:10:41,600 --> 00:10:47,290
the user can be aware because fidelia's

341
00:10:43,880 --> 00:10:47,290
won't turn on and you won't notice that

342
00:10:47,950 --> 00:10:52,460
yeah so once you so I've talked about

343
00:10:50,600 --> 00:10:54,050
how fidelia's is able to secure user io

344
00:10:52,460 --> 00:10:55,820
against tampering and eavesdropping

345
00:10:54,050 --> 00:10:58,099
there's also protections against replay

346
00:10:55,820 --> 00:10:59,240
that you can read about in our paper but

347
00:10:58,100 --> 00:11:00,370
once you've secured the path from the

348
00:10:59,240 --> 00:11:02,930
user for user IO

349
00:11:00,370 --> 00:11:04,520
fidelia's also gives this trusted

350
00:11:02,930 --> 00:11:06,680
javascript that the server has sent

351
00:11:04,520 --> 00:11:07,760
access to locally interact with the

352
00:11:06,680 --> 00:11:08,989
sensitive data so you can have

353
00:11:07,760 --> 00:11:10,730
JavaScript that's running on the whole

354
00:11:08,990 --> 00:11:12,530
webpage and then you can also have

355
00:11:10,730 --> 00:11:14,090
separate JavaScript that runs only on

356
00:11:12,530 --> 00:11:15,949
the sensitive data this is kind of the

357
00:11:14,090 --> 00:11:17,089
the Fidelis JavaScript that runs in the

358
00:11:15,950 --> 00:11:20,120
Enclave everything else run

359
00:11:17,089 --> 00:11:21,559
the regular JavaScript engine and then

360
00:11:20,120 --> 00:11:22,850
of course we only allow data to be sent

361
00:11:21,559 --> 00:11:24,499
to the to the origin that's designated

362
00:11:22,850 --> 00:11:26,870
and the overlay and we don't allow it to

363
00:11:24,499 --> 00:11:28,490
go anywhere else

364
00:11:26,870 --> 00:11:30,019
there's also a few things that fidelia's

365
00:11:28,490 --> 00:11:32,209
does not do that we should be clear on

366
00:11:30,019 --> 00:11:34,309
so fidelia's doesn't secure hardware

367
00:11:32,209 --> 00:11:35,628
enclaves against side-channel attacks so

368
00:11:34,309 --> 00:11:36,980
there's a lot of work in the last few

369
00:11:35,629 --> 00:11:39,319
years showing that maybe the hardware

370
00:11:36,980 --> 00:11:40,309
enclaves that are deployed today don't

371
00:11:39,319 --> 00:11:41,719
actually provide the security

372
00:11:40,309 --> 00:11:44,329
abstraction that we would like from an

373
00:11:41,720 --> 00:11:45,709
enclave and we don't do anything to

374
00:11:44,329 --> 00:11:47,479
mitigate these attacks it's kind of an

375
00:11:45,709 --> 00:11:49,670
orthogonal problem to be able to build

376
00:11:47,480 --> 00:11:50,959
better and better enclaves what we can

377
00:11:49,670 --> 00:11:52,339
do for our part is that our system is

378
00:11:50,959 --> 00:11:54,410
designed in a way that it doesn't rely

379
00:11:52,339 --> 00:11:56,089
on any particular instantiation of a

380
00:11:54,410 --> 00:11:58,189
hardware Enclave so whenever the

381
00:11:56,089 --> 00:11:59,930
next-best Enclave comes out we could

382
00:11:58,189 --> 00:12:01,879
build fidelia's for that system as well

383
00:11:59,930 --> 00:12:03,589
we just used Intel SGX is kind of what

384
00:12:01,879 --> 00:12:07,129
was convenient and what was available on

385
00:12:03,589 --> 00:12:08,480
our system another thing that fidelia's

386
00:12:07,129 --> 00:12:10,790
does is fidelity it doesn't protect

387
00:12:08,480 --> 00:12:13,399
against dumb websites so if we have a

388
00:12:10,790 --> 00:12:14,779
website that uses fidelia's and you know

389
00:12:13,399 --> 00:12:16,579
you type in your social security number

390
00:12:14,779 --> 00:12:18,350
it's secure the browser doesn't see it

391
00:12:16,579 --> 00:12:20,329
and then it gets sent off to the server

392
00:12:18,350 --> 00:12:21,769
and then the server decides that it

393
00:12:20,329 --> 00:12:23,120
wants to do something irresponsible with

394
00:12:21,769 --> 00:12:25,339
your data like give it to someone else

395
00:12:23,120 --> 00:12:27,230
or just send it right back to you in

396
00:12:25,339 --> 00:12:29,569
plain HTML if it sends back a page it

397
00:12:27,230 --> 00:12:31,309
says hey thanks for submitting this is

398
00:12:29,569 --> 00:12:33,019
your social security number now the

399
00:12:31,309 --> 00:12:35,029
browser will see this because this plain

400
00:12:33,019 --> 00:12:37,129
HTML might not be secured by fidelia's

401
00:12:35,029 --> 00:12:39,230
so the we have to trust that once you're

402
00:12:37,129 --> 00:12:40,730
willing to give some server all of your

403
00:12:39,230 --> 00:12:44,749
secrets that they won't do something

404
00:12:40,730 --> 00:12:46,670
abusive with it I want to talk a little

405
00:12:44,749 --> 00:12:48,920
bit about the performance of the system

406
00:12:46,670 --> 00:12:50,479
as well so we were able to implement the

407
00:12:48,920 --> 00:12:52,998
component of fidelia's that runs inside

408
00:12:50,480 --> 00:12:55,429
of an enclave in about 8,500 lines of

409
00:12:52,999 --> 00:12:57,110
C++ code so this is a really big win

410
00:12:55,429 --> 00:12:58,790
over the the millions of lines of code

411
00:12:57,110 --> 00:13:00,079
that a full web browser would have if we

412
00:12:58,790 --> 00:13:02,269
were to push it into the Enclave and

413
00:13:00,079 --> 00:13:03,679
this PCB this piece that's in the

414
00:13:02,269 --> 00:13:05,629
Enclave is the component that you really

415
00:13:03,679 --> 00:13:08,149
need to to audit and be careful about

416
00:13:05,629 --> 00:13:10,009
because any any vulnerability that

417
00:13:08,149 --> 00:13:11,509
exists in this codebase is going to

418
00:13:10,009 --> 00:13:14,779
result in malware that can run inside of

419
00:13:11,509 --> 00:13:16,759
the Enclave instead of outside of it in

420
00:13:14,779 --> 00:13:18,319
terms of the latency on the display this

421
00:13:16,759 --> 00:13:19,850
is the time between when you press a key

422
00:13:18,319 --> 00:13:22,759
and when you can see something change on

423
00:13:19,850 --> 00:13:24,350
the screen it takes about 200

424
00:13:22,759 --> 00:13:26,209
milliseconds from when you press the key

425
00:13:24,350 --> 00:13:27,860
to 1 you can see the change and you can

426
00:13:26,209 --> 00:13:29,779
see from the the chart that it kind of

427
00:13:27,860 --> 00:13:30,120
scales up very slowly as the size of the

428
00:13:29,779 --> 00:13:33,060
trust

429
00:13:30,120 --> 00:13:35,940
Relays increases I want to mention that

430
00:13:33,060 --> 00:13:37,469
this is not like a necessary cost the

431
00:13:35,940 --> 00:13:39,000
reason that the costs are so high is

432
00:13:37,470 --> 00:13:41,100
that we built this out of a prototype

433
00:13:39,000 --> 00:13:42,720
Raspberry Pi where we have to do a bunch

434
00:13:41,100 --> 00:13:44,190
of hacks to get the display to pass

435
00:13:42,720 --> 00:13:45,420
through from the computer to the

436
00:13:44,190 --> 00:13:48,029
Raspberry Pi and then back out to the

437
00:13:45,420 --> 00:13:49,770
display so this chart here shows our

438
00:13:48,029 --> 00:13:51,839
display pipeline and you can see these

439
00:13:49,770 --> 00:13:53,490
middle three bars the decryption of the

440
00:13:51,839 --> 00:13:54,870
of the overlays decoding them and then

441
00:13:53,490 --> 00:13:56,580
transferring them to the screen which

442
00:13:54,870 --> 00:13:57,180
are kind of the necessary parts of this

443
00:13:56,580 --> 00:13:59,279
operation

444
00:13:57,180 --> 00:14:01,349
they run quite quickly compared to these

445
00:13:59,279 --> 00:14:03,420
more expensive refresh and render stages

446
00:14:01,350 --> 00:14:05,520
and the Refresh and render are more

447
00:14:03,420 --> 00:14:06,779
artifacts of how we're using the

448
00:14:05,520 --> 00:14:09,060
raspberry PI's and not something that

449
00:14:06,779 --> 00:14:11,460
would necessarily be there if we were to

450
00:14:09,060 --> 00:14:13,529
kind of implement dedicated hardware for

451
00:14:11,460 --> 00:14:14,790
this operation so we'd expect a

452
00:14:13,529 --> 00:14:16,070
dedicated implementation to actually be

453
00:14:14,790 --> 00:14:18,240
much much faster

454
00:14:16,070 --> 00:14:20,970
despite the having the unoptimized

455
00:14:18,240 --> 00:14:22,320
refresh rate we're still getting refresh

456
00:14:20,970 --> 00:14:24,720
rates that are about three times faster

457
00:14:22,320 --> 00:14:27,330
than what you'd get on the latest Kindle

458
00:14:24,720 --> 00:14:30,600
e-reader which is maybe not the highest

459
00:14:27,330 --> 00:14:32,100
bar but usable nonetheless and in

460
00:14:30,600 --> 00:14:33,630
addition to this we are comparable to

461
00:14:32,100 --> 00:14:35,880
kind of middle-market smartphones like

462
00:14:33,630 --> 00:14:38,040
the HTC Rezound which is the phone from

463
00:14:35,880 --> 00:14:39,959
a few years ago you can see though that

464
00:14:38,040 --> 00:14:42,990
we're not quite as fast as things like

465
00:14:39,959 --> 00:14:44,939
the Galaxy phones and iPhones but the

466
00:14:42,990 --> 00:14:47,070
the system and you can see it on the on

467
00:14:44,940 --> 00:14:49,080
the video if you go watch it kind of

468
00:14:47,070 --> 00:14:53,220
moves at a at a speed that's usable for

469
00:14:49,080 --> 00:14:55,350
a person so to wrap up

470
00:14:53,220 --> 00:14:57,000
Fedele ace is a system that uses trusted

471
00:14:55,350 --> 00:14:58,560
Hardware enclaves to protect user

472
00:14:57,000 --> 00:15:01,500
secrets even if the whole oh s is

473
00:14:58,560 --> 00:15:04,020
compromised we have support for for

474
00:15:01,500 --> 00:15:06,779
JavaScript HTML forms access to local

475
00:15:04,020 --> 00:15:08,970
storage and XML HTTP requests and we

476
00:15:06,779 --> 00:15:10,529
have this trusted path for i/o between

477
00:15:08,970 --> 00:15:11,580
the user and the Enclave and this is

478
00:15:10,529 --> 00:15:13,170
actually something that's kind of

479
00:15:11,580 --> 00:15:14,820
independent of the rest of the Fidelia

480
00:15:13,170 --> 00:15:16,890
system even if you're not interested in

481
00:15:14,820 --> 00:15:18,570
the the web browser component and you

482
00:15:16,890 --> 00:15:21,000
just have a project that needs to do IO

483
00:15:18,570 --> 00:15:22,320
between the user and the Enclave you can

484
00:15:21,000 --> 00:15:24,540
still use the fidelia's trusted path

485
00:15:22,320 --> 00:15:25,980
even for that component so you can read

486
00:15:24,540 --> 00:15:28,560
more about the system at crypto at

487
00:15:25,980 --> 00:15:29,820
stanford.edu slash fidelia's and all of

488
00:15:28,560 --> 00:15:32,349
our code is also available on github

489
00:15:29,820 --> 00:15:38,810
thanks

490
00:15:32,350 --> 00:15:41,070
[Applause]

491
00:15:38,810 --> 00:15:42,660
hi Mike brats Minh Department of Defense

492
00:15:41,070 --> 00:15:45,060
I was just wondering if you considered

493
00:15:42,660 --> 00:15:48,810
replacing your hardware dongles with a

494
00:15:45,060 --> 00:15:50,729
hypervisor or stand aside VM yeah it's

495
00:15:48,810 --> 00:15:52,560
totally possible to implement this in

496
00:15:50,730 --> 00:15:55,800
other ways and with like a separate

497
00:15:52,560 --> 00:15:57,180
computer - yeah we were interested in

498
00:15:55,800 --> 00:15:58,949
this kind of the worst worst-case

499
00:15:57,180 --> 00:16:00,120
scenario where everything has been

500
00:15:58,950 --> 00:16:01,500
compromised and we wanted to see if

501
00:16:00,120 --> 00:16:03,210
there's anything we can do there but

502
00:16:01,500 --> 00:16:04,380
there's a lot of different points on

503
00:16:03,210 --> 00:16:06,630
this trade-off curve between what you're

504
00:16:04,380 --> 00:16:07,830
willing to trust and what security

505
00:16:06,630 --> 00:16:08,790
guarantees you get and there's a lot of

506
00:16:07,830 --> 00:16:12,270
other work too that you can look at that

507
00:16:08,790 --> 00:16:14,730
does looks at different trade-offs hi I

508
00:16:12,270 --> 00:16:15,660
really enjoyed the display overlay I was

509
00:16:14,730 --> 00:16:17,220
not expecting that it was very

510
00:16:15,660 --> 00:16:19,079
impressive

511
00:16:17,220 --> 00:16:22,140
Luke desert house from Samsung Research

512
00:16:19,080 --> 00:16:24,960
America I've seen a lot of websites

513
00:16:22,140 --> 00:16:26,430
where because of HTTPS providing some

514
00:16:24,960 --> 00:16:28,830
encryption guarantees they'll just send

515
00:16:26,430 --> 00:16:31,500
the password or other form data in plain

516
00:16:28,830 --> 00:16:33,810
text and so I guess I have a

517
00:16:31,500 --> 00:16:35,370
clarification question even if what I'm

518
00:16:33,810 --> 00:16:37,890
typing is not available to the browser

519
00:16:35,370 --> 00:16:39,150
does it eventually need the data to send

520
00:16:37,890 --> 00:16:41,010
it over to the server if the browser

521
00:16:39,150 --> 00:16:43,050
looks at the network request logs and

522
00:16:41,010 --> 00:16:46,280
checks the form data would it would it

523
00:16:43,050 --> 00:16:48,479
see the plain text there no no no so we

524
00:16:46,280 --> 00:16:50,280
so part of what you're saying is you

525
00:16:48,480 --> 00:16:52,200
know the server just knows I was using

526
00:16:50,280 --> 00:16:53,819
HTTPS and sends back the the data in the

527
00:16:52,200 --> 00:16:55,380
clear this is kind of the dumb website

528
00:16:53,820 --> 00:16:57,000
scenario that we don't protect against

529
00:16:55,380 --> 00:16:59,640
but when you type your information into

530
00:16:57,000 --> 00:17:01,260
the into the browser it goes from the

531
00:16:59,640 --> 00:17:02,819
displayed on the keyboard dongle into

532
00:17:01,260 --> 00:17:05,670
the Enclave it's encrypted in the

533
00:17:02,820 --> 00:17:07,980
Enclave and then the the TLS endpoint is

534
00:17:05,670 --> 00:17:09,240
actually in the in the Enclave so it

535
00:17:07,980 --> 00:17:10,860
gets encrypted in the Enclave and the

536
00:17:09,240 --> 00:17:12,300
the outside operating system can't see

537
00:17:10,859 --> 00:17:13,829
what's going on inside of that packet

538
00:17:12,300 --> 00:17:15,480
okay so the server will still get a

539
00:17:13,829 --> 00:17:17,069
plaintext message the server still

540
00:17:15,480 --> 00:17:17,970
learns through your secrets that's how

541
00:17:17,069 --> 00:17:21,770
you're trying to send it to but

542
00:17:17,970 --> 00:17:21,770
everybody in between doesn't get it okay

543
00:17:25,730 --> 00:17:31,020
have you looked into NOP research

544
00:17:28,290 --> 00:17:32,790
looking into the actual labels of what

545
00:17:31,020 --> 00:17:34,680
you're about to type into I know at some

546
00:17:32,790 --> 00:17:37,830
point you'd be trusting the browser but

547
00:17:34,680 --> 00:17:39,210
it'd be interesting to see if it had an

548
00:17:37,830 --> 00:17:41,580
extra layer and it said ah that's a

549
00:17:39,210 --> 00:17:43,110
credit card security code I'm gonna go

550
00:17:41,580 --> 00:17:44,730
ahead and switch you into secure State

551
00:17:43,110 --> 00:17:46,100
that way I don't have to hit a button I

552
00:17:44,730 --> 00:17:47,900
could just look at it and visual

553
00:17:46,100 --> 00:17:49,280
confirm that I've tapped into it and

554
00:17:47,900 --> 00:17:51,230
it's special for me yeah absolutely

555
00:17:49,280 --> 00:17:52,610
that's a great idea so I showed that you

556
00:17:51,230 --> 00:17:54,200
could you have to add this secure

557
00:17:52,610 --> 00:17:55,850
attribute to a paid tag to know that

558
00:17:54,200 --> 00:17:57,140
it's trusted but there's no reason why

559
00:17:55,850 --> 00:17:58,909
you couldn't have some other software

560
00:17:57,140 --> 00:18:01,460
that goes in detects when you have

561
00:17:58,910 --> 00:18:02,660
sensitive information yeah that could

562
00:18:01,460 --> 00:18:07,220
totally be compatible with our system

563
00:18:02,660 --> 00:18:09,860
thank you all right

564
00:18:07,220 --> 00:18:11,690
while we have Stefano setup maybe let me

565
00:18:09,860 --> 00:18:13,250
ask one more question I know you kind of

566
00:18:11,690 --> 00:18:15,169
defined it outside of the the threat

567
00:18:13,250 --> 00:18:17,360
model of your work but particularly

568
00:18:15,169 --> 00:18:19,220
given the hardware security session that

569
00:18:17,360 --> 00:18:21,110
we had this morning is it a good idea to

570
00:18:19,220 --> 00:18:25,039
trust on the implementation of these

571
00:18:21,110 --> 00:18:27,799
enclaves yeah I mean I'm I would say

572
00:18:25,039 --> 00:18:29,809
cautiously optimistic I think that like

573
00:18:27,799 --> 00:18:31,429
clearly there are attacks coming out all

574
00:18:29,809 --> 00:18:33,678
the time but also people are working on

575
00:18:31,429 --> 00:18:34,940
improving the the defenses so even if

576
00:18:33,679 --> 00:18:36,590
you know today's on Claes might not

577
00:18:34,940 --> 00:18:38,270
quite be there yet it I think that maybe

578
00:18:36,590 --> 00:18:39,439
in a few years I mean maybe I left

579
00:18:38,270 --> 00:18:40,730
regret this but I think in a few years

580
00:18:39,440 --> 00:18:44,240
maybe we can have more confidence in

581
00:18:40,730 --> 00:18:44,950
unclose let's thank our speaker one more

582
00:18:44,240 --> 00:18:48,489
time

583
00:18:44,950 --> 00:18:48,489
[Applause]

