1
00:00:09,270 --> 00:00:16,540
hello everyone good afternoon I am

2
00:00:12,880 --> 00:00:24,310
pei-chun from Christ and I'm going to

3
00:00:16,540 --> 00:00:28,630
present the work Roger okay Roger how to

4
00:00:24,310 --> 00:00:31,418
studies how how to study is how to find

5
00:00:28,630 --> 00:00:34,600
better how to better find the race walk

6
00:00:31,419 --> 00:00:36,460
through fuzzing this drone is a joint

7
00:00:34,600 --> 00:00:41,290
work with Christ Seoul National

8
00:00:36,460 --> 00:00:43,900
University and Purdue University common

9
00:00:41,290 --> 00:00:46,470
vulnerabilities have a very very

10
00:00:43,900 --> 00:00:50,260
important meaning in system security

11
00:00:46,470 --> 00:00:53,850
because as because a corner has the

12
00:00:50,260 --> 00:00:56,019
highest privilege if the color

13
00:00:53,850 --> 00:01:01,390
probabilities is compromised by the

14
00:00:56,020 --> 00:01:06,460
attacker then the attacker may control

15
00:01:01,390 --> 00:01:08,409
the entire system so first you got to be

16
00:01:06,460 --> 00:01:12,579
one of the most practical approaches in

17
00:01:08,409 --> 00:01:14,200
finding such vulnerabilities why there

18
00:01:12,579 --> 00:01:17,469
are many different details and

19
00:01:14,200 --> 00:01:20,189
techniques in fighting overall most of

20
00:01:17,469 --> 00:01:22,390
them are covered to carry the fuzzing

21
00:01:20,189 --> 00:01:26,829
coverage Qaeda fuzzing gathers

22
00:01:22,390 --> 00:01:30,939
interesting inputs that extend the code

23
00:01:26,829 --> 00:01:33,669
coverage and since both were called

24
00:01:30,939 --> 00:01:36,210
coverage during footing typically

25
00:01:33,670 --> 00:01:39,130
translates to more vulnerabilities

26
00:01:36,210 --> 00:01:41,829
coverage by disposing appears to be very

27
00:01:39,130 --> 00:01:45,249
effective to find vulnerabilities in the

28
00:01:41,829 --> 00:01:45,999
target program using the following

29
00:01:45,249 --> 00:01:49,600
techniques

30
00:01:45,999 --> 00:01:52,589
our story starts from thinking about how

31
00:01:49,600 --> 00:01:55,630
the footing would work for race box

32
00:01:52,590 --> 00:01:59,889
before answering the question please let

33
00:01:55,630 --> 00:02:02,350
me introduce the basics of race box to

34
00:01:59,889 --> 00:02:04,240
easily explain our work I'm going to

35
00:02:02,350 --> 00:02:07,719
assume that a race condition occurs

36
00:02:04,240 --> 00:02:10,119
between two threads to have race

37
00:02:07,719 --> 00:02:13,660
conditions the following three

38
00:02:10,119 --> 00:02:16,689
conditions should be satisfied first two

39
00:02:13,660 --> 00:02:18,879
instructions two instructions access the

40
00:02:16,689 --> 00:02:20,560
same memory location and second and

41
00:02:18,879 --> 00:02:21,790
least one of them is a writing

42
00:02:20,560 --> 00:02:23,769
instruction in

43
00:02:21,790 --> 00:02:28,090
third two instructions are executed

44
00:02:23,769 --> 00:02:30,609
concurrently here the important point is

45
00:02:28,090 --> 00:02:32,680
that if race occurs then the

46
00:02:30,609 --> 00:02:35,079
computational research may vary

47
00:02:32,680 --> 00:02:38,439
depending on the execution order of

48
00:02:35,079 --> 00:02:40,840
instructions it is very hard for

49
00:02:38,439 --> 00:02:44,189
developers to think about all possible

50
00:02:40,840 --> 00:02:47,170
execution order developers may fail to

51
00:02:44,189 --> 00:02:48,638
avoid race condition or attain visa

52
00:02:47,170 --> 00:02:52,238
handles the consequence of the race

53
00:02:48,639 --> 00:02:54,849
condition therefore a race of owner

54
00:02:52,239 --> 00:02:58,150
ability is a cost is caused by the

55
00:02:54,849 --> 00:03:03,129
execution order which is unintended by

56
00:02:58,150 --> 00:03:06,790
developers so especially for the race

57
00:03:03,129 --> 00:03:09,459
bulk how would the following work will

58
00:03:06,790 --> 00:03:12,519
be be efficient similar to how fathers

59
00:03:09,459 --> 00:03:17,139
are discovering on race box or would it

60
00:03:12,519 --> 00:03:20,439
in would it be inefficient my shorten

61
00:03:17,139 --> 00:03:22,689
short answer is that traditional fathers

62
00:03:20,439 --> 00:03:26,108
are not really efficient to find race

63
00:03:22,689 --> 00:03:28,810
box this is because the race only

64
00:03:26,109 --> 00:03:31,329
happens if the offending is the

65
00:03:28,810 --> 00:03:33,970
offending instruction is executed within

66
00:03:31,329 --> 00:03:38,199
a specific time window which we call as

67
00:03:33,970 --> 00:03:41,949
race window such a race window are

68
00:03:38,199 --> 00:03:44,199
pretty narrow the traditional folders

69
00:03:41,949 --> 00:03:46,389
are not really helping to bake the

70
00:03:44,199 --> 00:03:48,329
excretion happen within the within

71
00:03:46,389 --> 00:03:52,299
socially their own race window

72
00:03:48,329 --> 00:03:55,180
more specifically the execution if

73
00:03:52,299 --> 00:03:57,489
kitchen odors are mainly determined by

74
00:03:55,180 --> 00:04:00,190
the color scheduler which is not

75
00:03:57,489 --> 00:04:07,840
considered at all by the traditional

76
00:04:00,190 --> 00:04:09,970
fathers to better explain this let me

77
00:04:07,840 --> 00:04:13,419
take the example which is the simplified

78
00:04:09,970 --> 00:04:17,130
color race bug in this example there are

79
00:04:13,419 --> 00:04:20,590
two different threads thread one is

80
00:04:17,130 --> 00:04:23,320
trying to clone the final object and to

81
00:04:20,589 --> 00:04:25,960
do that we first compute the length of

82
00:04:23,320 --> 00:04:29,039
the queue file name and it auto case the

83
00:04:25,960 --> 00:04:32,979
buffer using the length of the by name

84
00:04:29,039 --> 00:04:35,849
then it copies the original file name to

85
00:04:32,979 --> 00:04:38,979
the newly allocated buffer

86
00:04:35,849 --> 00:04:41,860
but during this cloning process done by

87
00:04:38,979 --> 00:04:44,229
thread one what would happen if thread

88
00:04:41,860 --> 00:04:49,300
two modifies the final object into a

89
00:04:44,229 --> 00:04:51,250
longer one if the file name changes in

90
00:04:49,300 --> 00:04:54,039
the middle then the size of the

91
00:04:51,250 --> 00:04:57,039
allocated buffer would be smaller than

92
00:04:54,039 --> 00:05:00,878
the other then the size to be copied by

93
00:04:57,039 --> 00:05:04,090
string copy function therefore before

94
00:05:00,879 --> 00:05:06,280
fool would happen since more data will

95
00:05:04,090 --> 00:05:11,979
be copied than the size of the O located

96
00:05:06,280 --> 00:05:15,250
the buffer to make the concrete concrete

97
00:05:11,979 --> 00:05:17,560
case showing how inefficient traditional

98
00:05:15,250 --> 00:05:20,199
fatherís is to find race box we

99
00:05:17,560 --> 00:05:22,930
performed a restricted experiment using

100
00:05:20,199 --> 00:05:27,069
seed color which is the color photo

101
00:05:22,930 --> 00:05:29,259
developed by Google in this experiment

102
00:05:27,069 --> 00:05:33,099
we try to give as many favors as

103
00:05:29,259 --> 00:05:35,440
possible in finding races we limited a

104
00:05:33,099 --> 00:05:37,870
set of Cisco to easily trigger the race

105
00:05:35,440 --> 00:05:39,969
and limit the parameters so that it

106
00:05:37,870 --> 00:05:43,840
doesn't need to try ten many

107
00:05:39,969 --> 00:05:46,719
combinations of this : put with these

108
00:05:43,840 --> 00:05:50,549
three restrictions see the color fail to

109
00:05:46,719 --> 00:05:54,759
find all of three responds in ten hours

110
00:05:50,550 --> 00:05:57,880
as I will show you later our larger fund

111
00:05:54,759 --> 00:06:05,199
all of them in a very short time from

112
00:05:57,880 --> 00:06:07,539
stable minutes to 30 minute now to

113
00:06:05,199 --> 00:06:11,020
efficiently find the races we introduced

114
00:06:07,539 --> 00:06:13,990
Roger the key idea behind our Roger is

115
00:06:11,020 --> 00:06:16,779
not only extending call coverage for

116
00:06:13,990 --> 00:06:18,759
folding but also considering the thread

117
00:06:16,779 --> 00:06:21,639
into living to deterministically it is

118
00:06:18,759 --> 00:06:23,740
covered the race by enforcing the

119
00:06:21,639 --> 00:06:27,699
inscription to be performed within the

120
00:06:23,740 --> 00:06:31,120
race window to better understand this

121
00:06:27,699 --> 00:06:33,819
idea let me take the example again as

122
00:06:31,120 --> 00:06:37,680
you can see here two thirds are about

123
00:06:33,819 --> 00:06:40,629
twist cute the previous example but

124
00:06:37,680 --> 00:06:43,509
before including the example Roger

125
00:06:40,629 --> 00:06:47,589
inserts to break point at the end of the

126
00:06:43,509 --> 00:06:48,820
race window now when it is ready execute

127
00:06:47,589 --> 00:06:51,640
a Cisco

128
00:06:48,820 --> 00:06:55,330
is a threat we studied its execution

129
00:06:51,640 --> 00:06:55,840
right before the break point at this

130
00:06:55,330 --> 00:07:01,150
point

131
00:06:55,840 --> 00:07:04,030
Roger ensures that in ensure instead the

132
00:07:01,150 --> 00:07:07,150
modification of file name by threat to

133
00:07:04,030 --> 00:07:09,909
is now performed this means that

134
00:07:07,150 --> 00:07:11,530
modification of my name always takes

135
00:07:09,910 --> 00:07:15,550
place within the right window

136
00:07:11,530 --> 00:07:20,530
so Roger deterministically enforces that

137
00:07:15,550 --> 00:07:22,900
the race always takes place then we

138
00:07:20,530 --> 00:07:27,099
resume the execution alleged threat so

139
00:07:22,900 --> 00:07:29,140
powerful flow always occurs again this

140
00:07:27,100 --> 00:07:31,360
is how rather tames the body

141
00:07:29,140 --> 00:07:34,080
non-deterministic don't deterministic

142
00:07:31,360 --> 00:07:37,150
behavior based conditions which in turn

143
00:07:34,080 --> 00:07:43,180
significantly improved the father's

144
00:07:37,150 --> 00:07:46,060
efficiency in finding ways to post now

145
00:07:43,180 --> 00:07:49,300
let me start showing little more design

146
00:07:46,060 --> 00:07:52,350
details of Roger rather consists of

147
00:07:49,300 --> 00:07:55,150
static analysis and online folding faces

148
00:07:52,350 --> 00:07:57,610
Roger static analysis to identify the

149
00:07:55,150 --> 00:08:00,789
location of the candidate to insert a

150
00:07:57,610 --> 00:08:05,500
breakpoint by over up over approximating

151
00:08:00,790 --> 00:08:09,670
data races then the next online floating

152
00:08:05,500 --> 00:08:12,010
face is use the online I mean then the

153
00:08:09,670 --> 00:08:15,790
next online fuzzing phases use the over

154
00:08:12,010 --> 00:08:20,260
approximated data races and vector race

155
00:08:15,790 --> 00:08:23,230
behavior deterministic let's look at the

156
00:08:20,260 --> 00:08:27,480
detail of each component and I will show

157
00:08:23,230 --> 00:08:27,480
are we start with the static analysis

158
00:08:27,900 --> 00:08:33,510
Roger sustained analysis identifies

159
00:08:30,810 --> 00:08:37,240
instructions Tembe raised at the runtime

160
00:08:33,510 --> 00:08:39,220
this is actually teaching Roger wrote in

161
00:08:37,240 --> 00:08:42,490
store breakpoints to trigger the race

162
00:08:39,220 --> 00:08:43,000
conditions looking at the technical

163
00:08:42,490 --> 00:08:45,760
details

164
00:08:43,000 --> 00:08:48,960
Roger state acknowledges is inclusion

165
00:08:45,760 --> 00:08:54,130
base 2.0 analysis which is also known as

166
00:08:48,960 --> 00:08:56,740
Anderson style point analysis the static

167
00:08:54,130 --> 00:08:59,280
analysis certainly has post positives as

168
00:08:56,740 --> 00:09:02,890
it is a well-known limitation of

169
00:08:59,280 --> 00:09:06,030
limitation of voice analysis however

170
00:09:02,890 --> 00:09:09,819
this is not a real problem of the rather

171
00:09:06,030 --> 00:09:12,670
because Roger is doing the folding in

172
00:09:09,820 --> 00:09:16,200
the next phases and folding technique is

173
00:09:12,670 --> 00:09:18,430
if does not have any or first positives

174
00:09:16,200 --> 00:09:21,010
this can be an interesting feature of

175
00:09:18,430 --> 00:09:23,229
Roger because Roger takes the advantage

176
00:09:21,010 --> 00:09:28,390
of posing to others the post positive

177
00:09:23,230 --> 00:09:31,690
issues of risk of static analysis going

178
00:09:28,390 --> 00:09:33,790
back to the example our static analysis

179
00:09:31,690 --> 00:09:37,230
will identify following two rays

180
00:09:33,790 --> 00:09:39,250
candidates one candidate will be between

181
00:09:37,230 --> 00:09:41,170
string length of function and string

182
00:09:39,250 --> 00:09:44,070
copy function and the other will be

183
00:09:41,170 --> 00:09:46,900
between two string copy functions

184
00:09:44,070 --> 00:09:50,110
according to our static analysis over

185
00:09:46,900 --> 00:09:55,660
the entire corner we identified about 3

186
00:09:50,110 --> 00:10:01,410
million risk candidate based on these

187
00:09:55,660 --> 00:10:03,969
risk candidates Roger start voting now I

188
00:10:01,410 --> 00:10:06,310
will move on to the first row following

189
00:10:03,970 --> 00:10:09,760
phase which is called single thread

190
00:10:06,310 --> 00:10:12,640
fuzzy it is in charge of in extended

191
00:10:09,760 --> 00:10:15,670
code coverage as well as finding on

192
00:10:12,640 --> 00:10:17,770
input which has to see school they can

193
00:10:15,670 --> 00:10:20,670
heat race candidate obtained by the

194
00:10:17,770 --> 00:10:20,670
static analysis

195
00:10:21,360 --> 00:10:27,430
Roger step Rogers the single thread 14

196
00:10:24,700 --> 00:10:29,740
is similar to the traditional father it

197
00:10:27,430 --> 00:10:32,560
basically runs with a single thread and

198
00:10:29,740 --> 00:10:33,400
makes an input while extending called

199
00:10:32,560 --> 00:10:37,599
coverage

200
00:10:33,400 --> 00:10:40,180
meanwhile Roger also checks whether to

201
00:10:37,600 --> 00:10:43,720
see scores excuted any race candidates

202
00:10:40,180 --> 00:10:46,390
obtained by the static analysis if we

203
00:10:43,720 --> 00:10:49,300
found any the roger transforms

204
00:10:46,390 --> 00:10:54,430
distinguish third input into a multi

205
00:10:49,300 --> 00:10:56,800
thread input for instance saying single

206
00:10:54,430 --> 00:11:00,370
trade input has two Cisco's open and

207
00:10:56,800 --> 00:11:05,770
rename and we split this into multi

208
00:11:00,370 --> 00:11:08,170
threaded input like this now open cisco

209
00:11:05,770 --> 00:11:09,939
will be executed by red one green a

210
00:11:08,170 --> 00:11:14,870
missed call will be exceeded by thread

211
00:11:09,940 --> 00:11:17,300
two additionally we also mark

212
00:11:14,870 --> 00:11:20,840
the information about where to set up

213
00:11:17,300 --> 00:11:25,490
the breakpoint in this case it will be

214
00:11:20,840 --> 00:11:27,380
it is to string copy functions the last

215
00:11:25,490 --> 00:11:31,130
component Oh Roger is multi-threaded

216
00:11:27,380 --> 00:11:33,650
fuzzing multitrader fuzzing will execute

217
00:11:31,130 --> 00:11:35,360
the multi-threading input generated by a

218
00:11:33,650 --> 00:11:38,480
single thread input a single thread

219
00:11:35,360 --> 00:11:40,820
opposing while ensuring that the

220
00:11:38,480 --> 00:11:46,880
offending instruction is executed within

221
00:11:40,820 --> 00:11:49,100
the racing race window so now when

222
00:11:46,880 --> 00:11:51,980
running this multi-threading input we

223
00:11:49,100 --> 00:11:56,090
actually install the breakpoint using

224
00:11:51,980 --> 00:12:04,400
the hypervisor to do that a cheat thread

225
00:11:56,090 --> 00:12:07,520
involves the hyper code if the execution

226
00:12:04,400 --> 00:12:08,930
really stops at the breakpoint then we

227
00:12:07,520 --> 00:12:12,800
perform the virtual machine

228
00:12:08,930 --> 00:12:16,489
introspection to see if the race truly

229
00:12:12,800 --> 00:12:19,010
occurs that is we look at the concrete

230
00:12:16,490 --> 00:12:22,640
addresses that these two instructions

231
00:12:19,010 --> 00:12:26,660
are accessing and see whether they

232
00:12:22,640 --> 00:12:29,569
access the same memory others by doing

233
00:12:26,660 --> 00:12:33,260
this rather deterministically triggers a

234
00:12:29,570 --> 00:12:35,180
race condition there are P more details

235
00:12:33,260 --> 00:12:39,050
on how actual killer

236
00:12:35,180 --> 00:12:41,719
to crash all of this race but let me

237
00:12:39,050 --> 00:12:48,770
skip the details because of the time

238
00:12:41,720 --> 00:12:51,110
limit of this presentation so now taking

239
00:12:48,770 --> 00:12:54,710
about implementation we implemented

240
00:12:51,110 --> 00:12:56,720
steady analysis using SPF which is a

241
00:12:54,710 --> 00:13:00,440
steady analysis framework based on

242
00:12:56,720 --> 00:13:03,350
eleven compiler suit and our state our

243
00:13:00,440 --> 00:13:05,570
single thread fuzzing and monitor the

244
00:13:03,350 --> 00:13:08,360
voting is implemented based on city

245
00:13:05,570 --> 00:13:11,960
color which is a popular color powder

246
00:13:08,360 --> 00:13:14,780
developed by Google the key changes is

247
00:13:11,960 --> 00:13:17,510
in implementing deterministic scheduler

248
00:13:14,780 --> 00:13:22,459
which is implemented using QM new and

249
00:13:17,510 --> 00:13:26,770
KVM this exposes hyper core interfaces

250
00:13:22,460 --> 00:13:26,770
to support / core breakpoint

251
00:13:27,220 --> 00:13:34,970
using digital implementations we falsely

252
00:13:31,070 --> 00:13:40,130
linked Connor about the month and we

253
00:13:34,970 --> 00:13:41,269
found 30 new rates vulnerabilities all

254
00:13:40,130 --> 00:13:45,110
of these findings

255
00:13:41,269 --> 00:13:50,060
many of them have serious security for

256
00:13:45,110 --> 00:13:52,010
violation such as Ebola flow and I mean

257
00:13:50,060 --> 00:13:58,969
usually after free and hippo full and

258
00:13:52,010 --> 00:14:01,700
total free lastly to show how Roger can

259
00:13:58,970 --> 00:14:05,300
improve the finding ability compared to

260
00:14:01,700 --> 00:14:07,760
the traditional Potter we're an post

261
00:14:05,300 --> 00:14:11,870
office is cooler in Roger within with

262
00:14:07,760 --> 00:14:14,959
three already known race race box age I

263
00:14:11,870 --> 00:14:18,200
show you before the color failed to find

264
00:14:14,959 --> 00:14:21,260
all three races within ten hours but

265
00:14:18,200 --> 00:14:24,230
water found all of them within a very

266
00:14:21,260 --> 00:14:28,720
short time from stable minutes to 26

267
00:14:24,230 --> 00:14:31,459
minutes so here I want to emphasize that

268
00:14:28,720 --> 00:14:33,860
taking a consider about timing can make

269
00:14:31,459 --> 00:14:40,040
a huge improvement when finding race

270
00:14:33,860 --> 00:14:41,930
balls to conclude the presentation we

271
00:14:40,040 --> 00:14:44,810
introduced though we introduced the

272
00:14:41,930 --> 00:14:48,649
Roger which is a new folder focusing on

273
00:14:44,810 --> 00:14:50,479
finding race box the Noto featural roger

274
00:14:48,649 --> 00:14:52,970
is that it takes the non-deterministic

275
00:14:50,480 --> 00:14:55,480
behavior of race conditions by

276
00:14:52,970 --> 00:14:58,130
implementing deterministic scheduler

277
00:14:55,480 --> 00:15:00,620
which combines well-known techniques

278
00:14:58,130 --> 00:15:04,519
such as I telling Allah sees important

279
00:15:00,620 --> 00:15:06,490
to implement a Roger and lastly we will

280
00:15:04,519 --> 00:15:12,589
make the source code of the rudder on

281
00:15:06,490 --> 00:15:14,300
the site on the screen in thank you for

282
00:15:12,589 --> 00:15:19,390
listening and if you have any question

283
00:15:14,300 --> 00:15:25,010
feel free to let me know thank you

284
00:15:19,390 --> 00:15:28,170
[Applause]

285
00:15:25,010 --> 00:15:30,390
we have time for questions please step

286
00:15:28,170 --> 00:15:37,110
to the microphone and state your name

287
00:15:30,390 --> 00:15:39,000
and affiliation going once

288
00:15:37,110 --> 00:15:44,670
I think Giovanni has a question for this

289
00:15:39,000 --> 00:15:47,040
talk never do this with nails I have two

290
00:15:44,670 --> 00:15:49,589
questions actually okay the first one it

291
00:15:47,040 --> 00:15:52,110
seems that you're taking one thread so

292
00:15:49,590 --> 00:15:54,090
one one piece of code and then you split

293
00:15:52,110 --> 00:15:56,580
it and you make sure that two threads

294
00:15:54,090 --> 00:15:59,010
are executing the same code but do you

295
00:15:56,580 --> 00:16:01,320
also consider threads that are executing

296
00:15:59,010 --> 00:16:03,510
different parts of the code but they

297
00:16:01,320 --> 00:16:07,260
actually share some of the data I'll

298
00:16:03,510 --> 00:16:11,760
present I'm sorry I don't understand

299
00:16:07,260 --> 00:16:13,170
yes so from your explanation I haven't

300
00:16:11,760 --> 00:16:15,900
read the paper so you might explain this

301
00:16:13,170 --> 00:16:17,640
in the paper I'm sure but you have sort

302
00:16:15,900 --> 00:16:20,189
of like execution of certain

303
00:16:17,640 --> 00:16:22,410
instructions and you can see if I take

304
00:16:20,190 --> 00:16:25,020
this piece of code and I have two

305
00:16:22,410 --> 00:16:28,199
threads execution that's actually

306
00:16:25,020 --> 00:16:31,290
executing the same code I might have a

307
00:16:28,200 --> 00:16:34,050
race condition however you could also

308
00:16:31,290 --> 00:16:37,829
have situation situations in which you

309
00:16:34,050 --> 00:16:41,400
have two different pieces of code that

310
00:16:37,830 --> 00:16:43,800
are executed by two different threads

311
00:16:41,400 --> 00:16:47,130
but they're still creating a race

312
00:16:43,800 --> 00:16:51,170
condition does your tool take care of

313
00:16:47,130 --> 00:16:55,890
this of course rather take care of the

314
00:16:51,170 --> 00:16:59,760
two different code help has a have a

315
00:16:55,890 --> 00:17:02,449
race condition actually to see I said

316
00:16:59,760 --> 00:17:05,520
that there are two syscalls in the

317
00:17:02,450 --> 00:17:08,880
sequence of this course so we split it

318
00:17:05,520 --> 00:17:12,720
and then the two Cisco's are excluded in

319
00:17:08,880 --> 00:17:15,150
the different thread so it means that to

320
00:17:12,720 --> 00:17:20,760
see schools have different good two

321
00:17:15,150 --> 00:17:24,209
Cisco's execute different code how to

322
00:17:20,760 --> 00:17:26,119
say that I took your time all right no

323
00:17:24,209 --> 00:17:28,130
pressure

324
00:17:26,119 --> 00:17:30,080
thank y'all seriously take your time I

325
00:17:28,130 --> 00:17:32,210
don't know why I mean I know it's hard

326
00:17:30,080 --> 00:17:37,428
to be there when asking questions right

327
00:17:32,210 --> 00:17:43,250
with language barrier and all that to

328
00:17:37,429 --> 00:17:45,140
the rescue I'm the co-author of the

329
00:17:43,250 --> 00:17:46,850
paper I mean so we are basically running

330
00:17:45,140 --> 00:17:49,250
two different code in the two different

331
00:17:46,850 --> 00:17:50,899
courts at two different dress so given

332
00:17:49,250 --> 00:17:54,890
the same code we actually spin love it

333
00:17:50,900 --> 00:17:56,510
to two different two different code we

334
00:17:54,890 --> 00:17:58,100
are partitioning the code and I want

335
00:17:56,510 --> 00:17:59,899
partition is all in one thread and the

336
00:17:58,100 --> 00:18:01,340
other one is running then I understand

337
00:17:59,899 --> 00:18:03,289
the part the point that I don't

338
00:18:01,340 --> 00:18:04,760
understand I know there were somebody

339
00:18:03,289 --> 00:18:06,110
else so I'm gonna be very short the

340
00:18:04,760 --> 00:18:08,360
porter and understand suppose that I

341
00:18:06,110 --> 00:18:11,689
have a risk condition that is not caused

342
00:18:08,360 --> 00:18:14,510
by two threads executing the same code

343
00:18:11,690 --> 00:18:17,630
with different timings but actually I

344
00:18:14,510 --> 00:18:20,539
have to thread executing two separate

345
00:18:17,630 --> 00:18:23,299
functions that for some crazy reason got

346
00:18:20,539 --> 00:18:25,340
as a parameter the same object and now

347
00:18:23,299 --> 00:18:27,260
there is a race condition do you deal

348
00:18:25,340 --> 00:18:29,418
with this case so yeah even if it is

349
00:18:27,260 --> 00:18:31,520
running with the same code technically

350
00:18:29,419 --> 00:18:33,140
we should be able to handle that because

351
00:18:31,520 --> 00:18:34,639
I mean what we are doing is that we are

352
00:18:33,140 --> 00:18:36,559
simply running the I'm single threaded

353
00:18:34,640 --> 00:18:38,419
code and if it is actually making the

354
00:18:36,559 --> 00:18:40,940
same Cisco and if they are actually

355
00:18:38,419 --> 00:18:43,070
accessing the same data variable data

356
00:18:40,940 --> 00:18:45,080
address then we're gonna actually split

357
00:18:43,070 --> 00:18:46,428
the two into two different thread so

358
00:18:45,080 --> 00:18:47,899
technically it's gonna handle but we

359
00:18:46,429 --> 00:18:49,970
haven't checked it okay in that case I

360
00:18:47,899 --> 00:18:52,250
would change your well we will challenge

361
00:18:49,970 --> 00:18:59,179
your over approximation soundness claim

362
00:18:52,250 --> 00:19:01,010
in in that thing just too high last

363
00:18:59,179 --> 00:19:03,860
question hi this is a chignon from

364
00:19:01,010 --> 00:19:06,350
microsoft research and in your talk you

365
00:19:03,860 --> 00:19:08,779
mentioned that you use a pre point to

366
00:19:06,350 --> 00:19:11,779
verify that this is a true race

367
00:19:08,779 --> 00:19:12,950
condition on two strats so if one strats

368
00:19:11,779 --> 00:19:15,080
it's the break point

369
00:19:12,950 --> 00:19:18,380
but the other never hits the break point

370
00:19:15,080 --> 00:19:20,240
how do you handle this situation to make

371
00:19:18,380 --> 00:19:22,820
sure that third one and hit the

372
00:19:20,240 --> 00:19:26,720
breakpoint and three two doesn't hit the

373
00:19:22,820 --> 00:19:30,590
breakpoint right yes we think that this

374
00:19:26,720 --> 00:19:34,130
is possible when the code instructions

375
00:19:30,590 --> 00:19:37,490
are protected by a rack that then if we

376
00:19:34,130 --> 00:19:39,860
hit or if there's a thread one hit a

377
00:19:37,490 --> 00:19:42,590
breakpoint the thread on hold

378
00:19:39,860 --> 00:19:46,008
and to cannot hit the breakpoint because

379
00:19:42,590 --> 00:19:49,519
of the lack so we have reinstall the

380
00:19:46,009 --> 00:19:53,210
time timer and after the time of expire

381
00:19:49,519 --> 00:19:54,620
then we think the two instructions never

382
00:19:53,210 --> 00:19:57,200
raise because of the lat

383
00:19:54,620 --> 00:19:59,620
so it is called the input I see so you

384
00:19:57,200 --> 00:20:02,710
have a time-out mechanism to yeah yeah

385
00:19:59,620 --> 00:20:06,939
all right let's thank the speaker

386
00:20:02,710 --> 00:20:06,940
[Applause]

