1
00:00:08,590 --> 00:00:13,170
all right

2
00:00:10,950 --> 00:00:15,030
thank you for that introduction so

3
00:00:13,170 --> 00:00:16,430
without further ado we'll get into it

4
00:00:15,030 --> 00:00:18,349
and in

5
00:00:16,430 --> 00:00:20,600
I'll start with giving a bit of

6
00:00:18,350 --> 00:00:22,820
introduction to what proof of stake is

7
00:00:20,600 --> 00:00:26,240
and the motivation of why privacy and it

8
00:00:22,820 --> 00:00:27,440
is interesting so to start off with to

9
00:00:26,240 --> 00:00:29,330
remind ourselves what distributed

10
00:00:27,440 --> 00:00:32,930
Ledger's are essentially it's just a

11
00:00:29,330 --> 00:00:36,500
protocol which allows us to agree on a

12
00:00:32,930 --> 00:00:38,210
sequence of blocks and then users can

13
00:00:36,500 --> 00:00:40,449
occasionally append to the sequence of

14
00:00:38,210 --> 00:00:42,710
blocks if some conditions are satisfied

15
00:00:40,449 --> 00:00:44,839
when we say proof of stake systems

16
00:00:42,710 --> 00:00:48,110
really we just mean this condition

17
00:00:44,840 --> 00:00:52,239
depends on how much stake or value you

18
00:00:48,110 --> 00:00:54,890
hold within a transaction system here so

19
00:00:52,239 --> 00:00:56,419
proof of stake is advantageous of a

20
00:00:54,890 --> 00:01:00,680
proof-of-work for multiple reasons in

21
00:00:56,420 --> 00:01:02,120
particular it is a lot less it consumers

22
00:01:00,680 --> 00:01:03,530
a lot less energy it is much more

23
00:01:02,120 --> 00:01:05,960
environmentally friendly simply by

24
00:01:03,530 --> 00:01:09,259
virtue of it not requiring a huge amount

25
00:01:05,960 --> 00:01:11,000
of work to be done and it's also less

26
00:01:09,259 --> 00:01:12,229
susceptible to external attacks so there

27
00:01:11,000 --> 00:01:13,550
have been instances where a

28
00:01:12,229 --> 00:01:17,149
proof-of-work currencies have been

29
00:01:13,550 --> 00:01:19,369
attacked by mining pools from larger

30
00:01:17,149 --> 00:01:21,740
currencies which use the same algorithm

31
00:01:19,369 --> 00:01:23,840
and this is more difficult to execute in

32
00:01:21,740 --> 00:01:26,360
a proof of stake setting because instead

33
00:01:23,840 --> 00:01:28,450
of just buying computation power

34
00:01:26,360 --> 00:01:30,950
wholesale you have to actually convince

35
00:01:28,450 --> 00:01:34,549
participants in the protocol to give you

36
00:01:30,950 --> 00:01:36,710
part of it that said proof of stake

37
00:01:34,549 --> 00:01:40,210
constructions that are currently in

38
00:01:36,710 --> 00:01:42,619
development or have a reliance on

39
00:01:40,210 --> 00:01:44,809
knowing how much stake every party has

40
00:01:42,619 --> 00:01:48,020
for fairly obvious reasons for the most

41
00:01:44,810 --> 00:01:50,570
part so weak circumvent this restriction

42
00:01:48,020 --> 00:01:52,158
and we design a proof of stake system

43
00:01:50,570 --> 00:01:54,589
that works with a zero cash based

44
00:01:52,159 --> 00:01:58,549
transaction system and is based on a

45
00:01:54,590 --> 00:02:03,079
reverse Genesis so our main contribution

46
00:01:58,549 --> 00:02:06,290
is that we do develop and prove this

47
00:02:03,079 --> 00:02:08,359
first privacy-preserving proof of stake

48
00:02:06,290 --> 00:02:10,369
protocol I should mention at this point

49
00:02:08,360 --> 00:02:12,049
that there is a concurrent work by

50
00:02:10,369 --> 00:02:13,610
Ganesha tile which I believe is

51
00:02:12,049 --> 00:02:16,670
currently being presented to your crypt

52
00:02:13,610 --> 00:02:19,190
which goes across very similar line so

53
00:02:16,670 --> 00:02:20,929
it is a joint first in this regard we

54
00:02:19,190 --> 00:02:23,780
model in the universal composability

55
00:02:20,930 --> 00:02:26,050
setting what privacy means for a proof

56
00:02:23,780 --> 00:02:28,360
of stake protocol and

57
00:02:26,050 --> 00:02:29,490
you can see the full using specification

58
00:02:28,360 --> 00:02:34,270
in the paper I will give a brief

59
00:02:29,490 --> 00:02:38,050
overview of part of the model later on

60
00:02:34,270 --> 00:02:40,150
but that's about all very importantly we

61
00:02:38,050 --> 00:02:43,480
also ensure that the adaptive security

62
00:02:40,150 --> 00:02:45,610
guarantees that are in or abort Genesis

63
00:02:43,480 --> 00:02:48,700
are preserved I will go into a bit later

64
00:02:45,610 --> 00:02:50,860
why this is important but this was

65
00:02:48,700 --> 00:02:53,079
really one of the major difficulties we

66
00:02:50,860 --> 00:02:55,330
had in the paper and it's something I'm

67
00:02:53,080 --> 00:02:58,180
very glad to say we have succeeded in

68
00:02:55,330 --> 00:03:00,730
preserving and in particular in the

69
00:02:58,180 --> 00:03:03,670
process of doing so we have introduced

70
00:03:00,730 --> 00:03:05,920
new new stock friendly authentication

71
00:03:03,670 --> 00:03:09,040
primitive to replace forward secure

72
00:03:05,920 --> 00:03:11,049
signatures and we have introduced a key

73
00:03:09,040 --> 00:03:15,220
private for secure encryption to replace

74
00:03:11,050 --> 00:03:16,420
the encryption and zero cash so I need

75
00:03:15,220 --> 00:03:18,580
to give a little bit of background on

76
00:03:16,420 --> 00:03:20,649
both forwards Genesis and zero cash for

77
00:03:18,580 --> 00:03:23,650
this to make any sense so to start off

78
00:03:20,650 --> 00:03:25,570
with with or worse Genesis it divides as

79
00:03:23,650 --> 00:03:28,210
Geonosis pointed out in the last session

80
00:03:25,570 --> 00:03:29,950
it divides time into large units called

81
00:03:28,210 --> 00:03:32,830
epochs and small units called slots

82
00:03:29,950 --> 00:03:35,019
during each epoch there is some entropy

83
00:03:32,830 --> 00:03:37,780
ETA which magically comes from somewhere

84
00:03:35,020 --> 00:03:40,209
I will not go into that here and then

85
00:03:37,780 --> 00:03:41,860
for every slot if you want to create a

86
00:03:40,209 --> 00:03:43,900
block this slot you evaluate a

87
00:03:41,860 --> 00:03:45,520
verifiable random country and you

88
00:03:43,900 --> 00:03:49,060
evaluate it at the point that is the

89
00:03:45,520 --> 00:03:52,330
slot number and the epoch entropy if

90
00:03:49,060 --> 00:03:54,250
this random evaluation falls under a

91
00:03:52,330 --> 00:03:57,130
target then you get to create a block

92
00:03:54,250 --> 00:03:58,560
and what target you have depends on how

93
00:03:57,130 --> 00:04:01,810
much stake you have in the system

94
00:03:58,560 --> 00:04:02,950
so an execution of horrible sentences

95
00:04:01,810 --> 00:04:07,480
may look something like this where you

96
00:04:02,950 --> 00:04:09,700
see one epoch in the in the non greyed

97
00:04:07,480 --> 00:04:12,790
out area and you see that various users

98
00:04:09,700 --> 00:04:15,429
create various slots and some slots are

99
00:04:12,790 --> 00:04:16,959
not do not have any users who can create

100
00:04:15,430 --> 00:04:19,418
blocks and then when some slots have

101
00:04:16,959 --> 00:04:23,530
multiple users where which can create

102
00:04:19,418 --> 00:04:25,060
blocks in them on a separate side of the

103
00:04:23,530 --> 00:04:28,659
spectrum in cryptocurrencies there's

104
00:04:25,060 --> 00:04:30,250
zero cash which really doesn't concern

105
00:04:28,660 --> 00:04:32,650
itself with the consensus layer at all

106
00:04:30,250 --> 00:04:34,960
it's just a transaction system and it

107
00:04:32,650 --> 00:04:37,150
builds on the transaction system of

108
00:04:34,960 --> 00:04:39,120
Bitcoin and makes it more private so

109
00:04:37,150 --> 00:04:41,489
where a Bitcoin

110
00:04:39,120 --> 00:04:43,470
Trax unspent transaction outputs so what

111
00:04:41,490 --> 00:04:47,060
it does in practice is it keeps a set of

112
00:04:43,470 --> 00:04:49,620
coins which are unspent at any time and

113
00:04:47,060 --> 00:04:51,750
then a transaction in Bitcoin is that

114
00:04:49,620 --> 00:04:55,080
you remove something from this set you

115
00:04:51,750 --> 00:04:57,840
insert something in this set and that's

116
00:04:55,080 --> 00:04:59,490
about it now this is very simple as a

117
00:04:57,840 --> 00:05:01,260
construction which is why it is also the

118
00:04:59,490 --> 00:05:03,720
first that has been adopted but as

119
00:05:01,260 --> 00:05:06,360
previous research in transaction link

120
00:05:03,720 --> 00:05:09,479
ability is shown it is very not

121
00:05:06,360 --> 00:05:12,030
anonymous and you can essentially DN

122
00:05:09,479 --> 00:05:14,219
Onam i's transactions in it so zero cash

123
00:05:12,030 --> 00:05:16,530
gets around this and the Lim wave gets

124
00:05:14,220 --> 00:05:18,600
around this is it takes these two set

125
00:05:16,530 --> 00:05:20,760
this the set of unspent coins and it

126
00:05:18,600 --> 00:05:22,740
creates instead two sets which make it

127
00:05:20,760 --> 00:05:24,659
up it creates a set of coins that have

128
00:05:22,740 --> 00:05:27,500
ever been created and a set of coins

129
00:05:24,660 --> 00:05:30,590
that have ever been destroyed now that

130
00:05:27,500 --> 00:05:35,010
oops that by itself is not enough

131
00:05:30,590 --> 00:05:37,229
because well you can still recompute the

132
00:05:35,010 --> 00:05:39,750
original set so wouldn't zero cash does

133
00:05:37,229 --> 00:05:41,960
instead is it instead of storing coins

134
00:05:39,750 --> 00:05:44,190
directly in this these sets it stores

135
00:05:41,960 --> 00:05:46,469
different cryptographic properties of

136
00:05:44,190 --> 00:05:48,719
the coins and these sets in particular

137
00:05:46,470 --> 00:05:50,520
these I refer to as the coin commitment

138
00:05:48,720 --> 00:05:51,930
and the set of created coins and coin

139
00:05:50,520 --> 00:05:54,060
serial number and the set of destroyed

140
00:05:51,930 --> 00:05:57,090
coins then if you want to spend the coin

141
00:05:54,060 --> 00:05:58,770
you prove that is a member of the set of

142
00:05:57,090 --> 00:06:00,179
created coins and you prove that it is

143
00:05:58,770 --> 00:06:02,729
not a member of the set of destroyed

144
00:06:00,180 --> 00:06:04,889
coins you do the former by doing a

145
00:06:02,729 --> 00:06:06,570
Merkel tree membership proof of the coin

146
00:06:04,889 --> 00:06:08,520
commitment and you do the latter by

147
00:06:06,570 --> 00:06:11,820
simply revealing the serial number since

148
00:06:08,520 --> 00:06:14,698
it son linkable the this doesn't reveal

149
00:06:11,820 --> 00:06:17,039
anything really and this proof is done

150
00:06:14,699 --> 00:06:19,830
in a zero knowledge proof in addition to

151
00:06:17,039 --> 00:06:22,169
proving consistency properties such as

152
00:06:19,830 --> 00:06:25,380
that the transaction is ever so and that

153
00:06:22,169 --> 00:06:27,000
there's no value being created or lost a

154
00:06:25,380 --> 00:06:29,370
brief overview of some of the

155
00:06:27,000 --> 00:06:31,199
cryptographic values involved so if you

156
00:06:29,370 --> 00:06:33,930
have a secret key which is randomly

157
00:06:31,199 --> 00:06:36,810
sampled and then you can derive from

158
00:06:33,930 --> 00:06:39,479
this the public key and together with a

159
00:06:36,810 --> 00:06:41,430
coins randomness and the coins value you

160
00:06:39,479 --> 00:06:43,409
can create the coin commitments and the

161
00:06:41,430 --> 00:06:45,780
serial numbers one thing to note here is

162
00:06:43,410 --> 00:06:47,280
that you only need the public key to

163
00:06:45,780 --> 00:06:48,869
create a commitment so you can send

164
00:06:47,280 --> 00:06:51,609
other people money but you do need the

165
00:06:48,870 --> 00:06:55,879
secret key to actually spend it

166
00:06:51,610 --> 00:06:58,310
so what does cripsy nose do in a

167
00:06:55,879 --> 00:07:01,490
nutshell will we run our bus Genesis and

168
00:06:58,310 --> 00:07:06,949
zero cash together in tandem and we move

169
00:07:01,490 --> 00:07:09,439
the proof of leadership into a zero

170
00:07:06,949 --> 00:07:12,620
knowledge proof encrypting notes so in

171
00:07:09,439 --> 00:07:14,569
particular this the main challenge is we

172
00:07:12,620 --> 00:07:15,949
need to somehow convince people that we

173
00:07:14,569 --> 00:07:18,860
have some stake in the system without

174
00:07:15,949 --> 00:07:20,360
revealing what I'll stake is and we do

175
00:07:18,860 --> 00:07:23,090
this by doing a one-to-one zero cash

176
00:07:20,360 --> 00:07:26,300
transfer so we simply transfer one coin

177
00:07:23,090 --> 00:07:30,109
into a new coin and this transfer then

178
00:07:26,300 --> 00:07:31,280
reveals a value inside of these zero

179
00:07:30,110 --> 00:07:33,169
knowledge proof and this can be then

180
00:07:31,280 --> 00:07:37,099
used for additional conditions and we

181
00:07:33,169 --> 00:07:40,580
essentially embed the Genesis leadership

182
00:07:37,099 --> 00:07:42,440
conditions in this a subtle thing is

183
00:07:40,580 --> 00:07:43,878
that the verifiable random function can

184
00:07:42,440 --> 00:07:44,960
now be replaced with absurd a random

185
00:07:43,879 --> 00:07:46,789
function because we get the

186
00:07:44,960 --> 00:07:48,948
verifiability just from the zero

187
00:07:46,789 --> 00:07:51,199
knowledge itself so there are a couple

188
00:07:48,949 --> 00:07:52,819
of subtle problems that turn up here and

189
00:07:51,199 --> 00:07:54,590
the rest of the talk will really be

190
00:07:52,819 --> 00:07:57,979
discussed discussing these problems and

191
00:07:54,590 --> 00:07:59,419
what they are briefly a slide of how

192
00:07:57,979 --> 00:08:01,008
this would look compared to Ouroboros

193
00:07:59,419 --> 00:08:04,789
Genesis this is a little bit

194
00:08:01,009 --> 00:08:06,860
disingenuous because this shows that you

195
00:08:04,789 --> 00:08:08,599
can't see anything if you're observing

196
00:08:06,860 --> 00:08:11,750
the network you will still be able to

197
00:08:08,599 --> 00:08:13,460
see things so you if you have network

198
00:08:11,750 --> 00:08:15,169
control then you will still be able to

199
00:08:13,460 --> 00:08:19,128
determine who is the leader of a

200
00:08:15,169 --> 00:08:20,779
specific slot but otherwise you still

201
00:08:19,129 --> 00:08:22,400
see the same structure you see the same

202
00:08:20,779 --> 00:08:25,009
blocks being created and in the same

203
00:08:22,400 --> 00:08:29,419
sequence but you would not see who is

204
00:08:25,009 --> 00:08:31,069
associated with them so one of the first

205
00:08:29,419 --> 00:08:33,140
problems we encountered was that in

206
00:08:31,069 --> 00:08:37,640
Reverse Genesis an assumption is made

207
00:08:33,140 --> 00:08:39,679
that the steak or the steak distribution

208
00:08:37,640 --> 00:08:42,500
during the course of an epoch has to

209
00:08:39,679 --> 00:08:44,000
remain frozen and this is so you take a

210
00:08:42,500 --> 00:08:45,230
snapshot at the start and then you keep

211
00:08:44,000 --> 00:08:47,690
using that for the remainder of the

212
00:08:45,230 --> 00:08:49,540
e-book and this is done primarily to

213
00:08:47,690 --> 00:08:52,190
prevent grinding attacks in which you

214
00:08:49,540 --> 00:08:54,920
reroll your secret keys until you get a

215
00:08:52,190 --> 00:08:57,350
secret key with wins in the election

216
00:08:54,920 --> 00:09:01,579
process and this is obviously not ideal

217
00:08:57,350 --> 00:09:04,440
for proof of stake so this introduces a

218
00:09:01,579 --> 00:09:06,390
couple of chip problems because with the

219
00:09:04,440 --> 00:09:08,190
one two one zero cash transactions as

220
00:09:06,390 --> 00:09:10,800
part of our leadership proofs we need to

221
00:09:08,190 --> 00:09:13,920
change the coins that are available and

222
00:09:10,800 --> 00:09:15,959
furthermore we just can't prevent users

223
00:09:13,920 --> 00:09:18,329
from spending and once the user spends a

224
00:09:15,960 --> 00:09:20,250
coin they reveal their serial number

225
00:09:18,330 --> 00:09:21,930
which would link it to a corresponding

226
00:09:20,250 --> 00:09:24,570
leadership proof because it would have

227
00:09:21,930 --> 00:09:27,209
the same serial number in it so what we

228
00:09:24,570 --> 00:09:29,520
do instead is we have two sets of coins

229
00:09:27,210 --> 00:09:31,260
and we say that once you spend a coin it

230
00:09:29,520 --> 00:09:33,030
is no longer eligible for leadership

231
00:09:31,260 --> 00:09:34,590
during the course of this epoch the

232
00:09:33,030 --> 00:09:38,390
start of the next epoch it becomes

233
00:09:34,590 --> 00:09:41,910
eligible again this does introduce a

234
00:09:38,390 --> 00:09:44,490
somewhat subtle concern in that it

235
00:09:41,910 --> 00:09:46,469
reduces the amount of total stake that

236
00:09:44,490 --> 00:09:48,270
is still staking during that epoch and

237
00:09:46,470 --> 00:09:49,980
it if an honest transaction is made it

238
00:09:48,270 --> 00:09:52,740
also reduces the honest stake during

239
00:09:49,980 --> 00:09:55,260
that epoch and we get around the issue

240
00:09:52,740 --> 00:09:57,990
with the one phone transfers and

241
00:09:55,260 --> 00:10:00,569
leadership proofs by making the newly

242
00:09:57,990 --> 00:10:02,850
created coin deterministically derived

243
00:10:00,570 --> 00:10:04,410
from the old one this means there is no

244
00:10:02,850 --> 00:10:05,850
input that an adversary could have here

245
00:10:04,410 --> 00:10:07,949
there is no way for the adversary to

246
00:10:05,850 --> 00:10:10,740
control whether the new coin will win

247
00:10:07,950 --> 00:10:12,240
and it gets around the it gets around

248
00:10:10,740 --> 00:10:16,800
the grinding attack issue that in that

249
00:10:12,240 --> 00:10:19,440
way one thing we took a lot of care in

250
00:10:16,800 --> 00:10:22,109
designing is the model of our

251
00:10:19,440 --> 00:10:23,910
transaction system and since we wanted

252
00:10:22,110 --> 00:10:26,910
to model it in uc2 following the path of

253
00:10:23,910 --> 00:10:28,680
or reverse genesis we first encountered

254
00:10:26,910 --> 00:10:32,579
the issue that zero cash does not have a

255
00:10:28,680 --> 00:10:35,099
you see definition it is property it has

256
00:10:32,580 --> 00:10:36,660
property based security and so the first

257
00:10:35,100 --> 00:10:38,790
thing is we had formalize what what does

258
00:10:36,660 --> 00:10:41,790
this mean in the simulation based

259
00:10:38,790 --> 00:10:43,680
setting the second thing is that the

260
00:10:41,790 --> 00:10:46,410
ledger which were trying to realize is

261
00:10:43,680 --> 00:10:48,750
no longer the same ledger that people

262
00:10:46,410 --> 00:10:51,150
typically talk about because in in the

263
00:10:48,750 --> 00:10:51,720
standard ledger everyone sees every

264
00:10:51,150 --> 00:10:54,569
transaction

265
00:10:51,720 --> 00:10:56,310
whereas we want private transactions we

266
00:10:54,570 --> 00:10:58,860
do not want everyone to see everything

267
00:10:56,310 --> 00:11:00,959
about every transaction so we introduce

268
00:10:58,860 --> 00:11:02,760
a new ledger we introduced a private

269
00:11:00,960 --> 00:11:04,530
ledger and we parameterize the private

270
00:11:02,760 --> 00:11:09,480
illiterate with a private transaction

271
00:11:04,530 --> 00:11:10,829
system so one example is if you have a

272
00:11:09,480 --> 00:11:13,320
public ledger and you have various

273
00:11:10,830 --> 00:11:15,300
transactions here so we have others

274
00:11:13,320 --> 00:11:16,350
transferring ten units of something to

275
00:11:15,300 --> 00:11:19,709
Bob

276
00:11:16,350 --> 00:11:21,080
in a private ledger different parties

277
00:11:19,710 --> 00:11:23,850
would see this in a different way so

278
00:11:21,080 --> 00:11:26,250
Alice would see that she is transferring

279
00:11:23,850 --> 00:11:28,110
tannins to someone on the ledger and Bob

280
00:11:26,250 --> 00:11:30,150
would see that he is receiving ten units

281
00:11:28,110 --> 00:11:35,790
from someone but beyond that the ledger

282
00:11:30,150 --> 00:11:38,310
itself doesn't reveal anything one the

283
00:11:35,790 --> 00:11:40,380
core issue we had was that of adaptive

284
00:11:38,310 --> 00:11:43,500
corruptions and to briefly motivate why

285
00:11:40,380 --> 00:11:46,050
this is really important is that if I

286
00:11:43,500 --> 00:11:49,470
hold 20% of stake in the crypto currency

287
00:11:46,050 --> 00:11:51,620
and I've decided well I'm investing into

288
00:11:49,470 --> 00:11:54,930
something else now I'm gonna sell it off

289
00:11:51,620 --> 00:11:57,360
then I may no longer care about the

290
00:11:54,930 --> 00:12:01,800
secret keys associated with it I may no

291
00:11:57,360 --> 00:12:03,540
longer care that if about the security

292
00:12:01,800 --> 00:12:05,969
that I'm using with the hardware that I

293
00:12:03,540 --> 00:12:08,550
stored my tokens on at some point if I

294
00:12:05,970 --> 00:12:11,070
now sell my laptop on eBay and an

295
00:12:08,550 --> 00:12:14,400
adversary picks this up they may at a

296
00:12:11,070 --> 00:12:16,890
later point in time attack the system in

297
00:12:14,400 --> 00:12:19,410
the past where I held this amount of

298
00:12:16,890 --> 00:12:23,790
stake and this is a major issue for a

299
00:12:19,410 --> 00:12:25,589
non adaptive protocol so the core thing

300
00:12:23,790 --> 00:12:28,290
that is needed for adaptive security is

301
00:12:25,590 --> 00:12:30,630
that once an honest party has created a

302
00:12:28,290 --> 00:12:32,579
leadership proof for a slot it should be

303
00:12:30,630 --> 00:12:34,200
impossible to afterwards go back and

304
00:12:32,580 --> 00:12:36,630
change this and to make a different

305
00:12:34,200 --> 00:12:40,320
leadership proof or a different block

306
00:12:36,630 --> 00:12:41,880
and whatever boss Genesis does for this

307
00:12:40,320 --> 00:12:44,610
is it uses forward secure signatures

308
00:12:41,880 --> 00:12:46,920
this is nice but obviously it reveals

309
00:12:44,610 --> 00:12:48,900
who is signing and we can't use

310
00:12:46,920 --> 00:12:51,390
signatures in zero-knowledge

311
00:12:48,900 --> 00:12:52,829
because they are well forward secure

312
00:12:51,390 --> 00:12:56,340
signatures anyway because they are too

313
00:12:52,830 --> 00:12:58,170
expensive so instead we design a system

314
00:12:56,340 --> 00:13:00,680
of Merkel tree proofs and key erasure

315
00:12:58,170 --> 00:13:04,530
which replaces this so if we recall

316
00:13:00,680 --> 00:13:06,150
these are the cryptographic items

317
00:13:04,530 --> 00:13:08,850
involved in zero cash and what we really

318
00:13:06,150 --> 00:13:11,520
do is we split up the secret key and we

319
00:13:08,850 --> 00:13:14,310
say we start off at a time t0 where the

320
00:13:11,520 --> 00:13:17,280
secret key is generated and we randomly

321
00:13:14,310 --> 00:13:20,459
sample a secret key SKT zero every

322
00:13:17,280 --> 00:13:22,530
subsequent secret key in the industry is

323
00:13:20,460 --> 00:13:25,680
then deterministically derived from the

324
00:13:22,530 --> 00:13:28,740
previous one up until SKT zero + R where

325
00:13:25,680 --> 00:13:30,239
are some fairly large bound we can then

326
00:13:28,740 --> 00:13:33,990
create a Merkel tree

327
00:13:30,240 --> 00:13:37,139
of this and ensure that at any time we

328
00:13:33,990 --> 00:13:39,480
only keep the keys we still need around

329
00:13:37,139 --> 00:13:43,319
so at time t minus one we'd only have sk

330
00:13:39,480 --> 00:13:46,319
t minus one still around as part of a

331
00:13:43,319 --> 00:13:48,509
leadership proof now we would prove that

332
00:13:46,319 --> 00:13:50,969
we know a path in this Merkel tree to

333
00:13:48,509 --> 00:13:53,069
the corresponding secret key and then we

334
00:13:50,970 --> 00:13:55,470
would erase it and this would ensure

335
00:13:53,069 --> 00:13:58,139
that no adversary who can corrupt us at

336
00:13:55,470 --> 00:14:04,319
this point can create a new block with

337
00:13:58,139 --> 00:14:05,970
this the final issue we had with with

338
00:14:04,319 --> 00:14:07,769
adaptive security was that of non

339
00:14:05,970 --> 00:14:09,509
commiting encryption and this is a

340
00:14:07,769 --> 00:14:12,779
little bit technical as it arises

341
00:14:09,509 --> 00:14:16,589
essentially from it being a simulation

342
00:14:12,779 --> 00:14:18,959
based proof that we are doing but zero

343
00:14:16,589 --> 00:14:21,779
cache requires key private encryption by

344
00:14:18,959 --> 00:14:23,368
necessity it sends some cryptographic

345
00:14:21,779 --> 00:14:24,899
values to the recipient of the

346
00:14:23,369 --> 00:14:29,910
transaction in particular it sends the

347
00:14:24,899 --> 00:14:32,149
coin randomness row and in a simulation

348
00:14:29,910 --> 00:14:34,189
based setting with adaptive corruptions

349
00:14:32,149 --> 00:14:36,899
encryption needs to be non committing

350
00:14:34,189 --> 00:14:39,118
it's unfortunately in no way around this

351
00:14:36,899 --> 00:14:40,949
well there are non commiting encryption

352
00:14:39,119 --> 00:14:44,429
constructions in practice they are not

353
00:14:40,949 --> 00:14:46,799
feasible they have running times that

354
00:14:44,429 --> 00:14:49,369
are proportional to the size of the

355
00:14:46,799 --> 00:14:52,980
message space and usually are single-use

356
00:14:49,369 --> 00:14:55,439
so what instead we do is we employee key

357
00:14:52,980 --> 00:14:57,059
private forward secure encryption and we

358
00:14:55,439 --> 00:15:01,040
do a little bit of a trick we assume

359
00:14:57,059 --> 00:15:03,360
first off that messages have a maximum

360
00:15:01,040 --> 00:15:05,040
delivery delay so if there is a maximum

361
00:15:03,360 --> 00:15:07,980
network delay and every time the message

362
00:15:05,040 --> 00:15:10,618
is sent it is received and within some

363
00:15:07,980 --> 00:15:11,939
delay afterwards further off furthermore

364
00:15:10,619 --> 00:15:13,829
where you assume that there is a delay

365
00:15:11,939 --> 00:15:16,498
in corruption so when the adversary

366
00:15:13,829 --> 00:15:17,969
requests a corruption the corruption

367
00:15:16,499 --> 00:15:20,879
doesn't actually go through in the real

368
00:15:17,970 --> 00:15:23,730
world until sometime later and what this

369
00:15:20,879 --> 00:15:27,569
means is we can use forward secure

370
00:15:23,730 --> 00:15:30,360
encryption and essentially always keep a

371
00:15:27,569 --> 00:15:34,559
key updated to some time in the past and

372
00:15:30,360 --> 00:15:38,790
erase it as appropriate so maybe more

373
00:15:34,559 --> 00:15:41,429
vividly for these green messages being

374
00:15:38,790 --> 00:15:42,810
sent here everything's fine by default

375
00:15:41,429 --> 00:15:48,089
because

376
00:15:42,810 --> 00:15:49,380
the the user receiving them is honest

377
00:15:48,090 --> 00:15:51,120
both when they are sent and when they

378
00:15:49,380 --> 00:15:52,710
are received so by the time corruption

379
00:15:51,120 --> 00:15:54,450
goes through the user will have updated

380
00:15:52,710 --> 00:15:57,560
a secret key and will no longer be able

381
00:15:54,450 --> 00:15:59,760
to read them for the messages in red

382
00:15:57,560 --> 00:16:02,729
everything is also fine because at the

383
00:15:59,760 --> 00:16:05,040
time it is sent in the ideal world

384
00:16:02,730 --> 00:16:08,760
corruption has gone through the

385
00:16:05,040 --> 00:16:10,709
simulator knows the the plaintext and

386
00:16:08,760 --> 00:16:12,810
can create a sensible ciphertext

387
00:16:10,710 --> 00:16:15,630
correspondent and for the message in

388
00:16:12,810 --> 00:16:17,540
yellow this is where the corruption

389
00:16:15,630 --> 00:16:21,090
delay assumption really comes in because

390
00:16:17,540 --> 00:16:22,500
at the time it is sent the simulator

391
00:16:21,090 --> 00:16:25,590
knows nothing but at the same time

392
00:16:22,500 --> 00:16:26,960
because we assume that the adversary

393
00:16:25,590 --> 00:16:29,880
will not be able to read until

394
00:16:26,960 --> 00:16:31,770
corruption has gone through it we can

395
00:16:29,880 --> 00:16:36,060
still assume that the key is updated in

396
00:16:31,770 --> 00:16:37,350
time so to summarize we construct a

397
00:16:36,060 --> 00:16:40,020
privacy-preserving proof of stake

398
00:16:37,350 --> 00:16:42,750
protocol we model it mu C and we model

399
00:16:40,020 --> 00:16:44,760
it with adaptive corruptions and we also

400
00:16:42,750 --> 00:16:46,560
introduce the private letter

401
00:16:44,760 --> 00:16:51,170
functionality and use it to construct a

402
00:16:46,560 --> 00:16:51,170
private currency and I'll take questions

403
00:16:51,350 --> 00:17:08,970
much questions Thomas I really like your

404
00:17:06,990 --> 00:17:12,300
Merkel tree construction can this be

405
00:17:08,970 --> 00:17:14,400
used for the previous protocols or

406
00:17:12,300 --> 00:17:16,589
orogenesis for adaptive security or

407
00:17:14,400 --> 00:17:19,170
doing or what is the difference in the

408
00:17:16,589 --> 00:17:20,609
assumptions if we adopted it I can't

409
00:17:19,170 --> 00:17:23,250
show it again because I think the slides

410
00:17:20,609 --> 00:17:24,719
have gone off but so this could be used

411
00:17:23,250 --> 00:17:28,560
in previous protocols it does have a

412
00:17:24,720 --> 00:17:31,200
slight downside in that if you paid

413
00:17:28,560 --> 00:17:33,090
attention there was a upper limit - well

414
00:17:31,200 --> 00:17:35,340
it's a Merkel tree there's a finite

415
00:17:33,090 --> 00:17:39,000
number of items in it and there's enough

416
00:17:35,340 --> 00:17:41,550
limit to how many there are in practice

417
00:17:39,000 --> 00:17:44,520
it may not matter so much in a setting

418
00:17:41,550 --> 00:17:47,820
where you can use forward secure

419
00:17:44,520 --> 00:17:50,580
signatures anyway and also that this

420
00:17:47,820 --> 00:17:52,409
limit is not too bad in practice so

421
00:17:50,580 --> 00:17:54,689
we've run the numbers and it'll work out

422
00:17:52,410 --> 00:17:56,160
fine but yes you could use this in

423
00:17:54,690 --> 00:17:58,800
another setting it's

424
00:17:56,160 --> 00:18:01,530
maybe not as necessary for if you're not

425
00:17:58,800 --> 00:18:08,190
as constrained in computation powers in

426
00:18:01,530 --> 00:18:10,910
zero knowledge more questions okay and

427
00:18:08,190 --> 00:18:12,080
that's the thing to see speaker again

428
00:18:10,910 --> 00:18:15,150
[Applause]

429
00:18:12,080 --> 00:18:15,149
[Music]

