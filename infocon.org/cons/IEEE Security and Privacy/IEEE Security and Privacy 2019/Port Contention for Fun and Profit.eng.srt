1
00:00:08,930 --> 00:00:12,980
good afternoon everyone and

2
00:00:13,100 --> 00:00:17,680
mine

3
00:00:15,550 --> 00:00:20,500
dr. researcher Tampere University

4
00:00:17,680 --> 00:00:22,360
Finland and I will be presenting our

5
00:00:20,500 --> 00:00:25,270
paper port contention for fun and profit

6
00:00:22,360 --> 00:00:28,060
this is a joint work between Tampere

7
00:00:25,270 --> 00:00:33,280
University Finland and Technical

8
00:00:28,060 --> 00:00:35,890
University of Havana Cuba let's start by

9
00:00:33,280 --> 00:00:39,970
introducing a new side channel technique

10
00:00:35,890 --> 00:00:41,950
we call it port smash the technique

11
00:00:39,970 --> 00:00:43,899
targets the shared execution unit in

12
00:00:41,950 --> 00:00:47,890
simultaneous multithreading environments

13
00:00:43,899 --> 00:00:50,350
by monitoring the port execution a users

14
00:00:47,890 --> 00:00:53,949
of secret data dependent control slows

15
00:00:50,350 --> 00:00:56,260
now you must be wondering from port

16
00:00:53,949 --> 00:00:59,079
contention various ports match terms

17
00:00:56,260 --> 00:01:02,500
form from so in this talk I'm going to

18
00:00:59,079 --> 00:01:06,340
explain how our new side channel

19
00:01:02,500 --> 00:01:08,410
technique of how using port contention

20
00:01:06,340 --> 00:01:16,409
we can actually create a timing side

21
00:01:08,410 --> 00:01:19,810
channel this is a figure of a typical

22
00:01:16,409 --> 00:01:21,700
modern microarchitecture it's been taken

23
00:01:19,810 --> 00:01:25,260
from the internet so this should be

24
00:01:21,700 --> 00:01:27,610
pretty close to the actual architecture

25
00:01:25,260 --> 00:01:29,320
as we all know that traditional

26
00:01:27,610 --> 00:01:31,270
approaches to the microarchitecture

27
00:01:29,320 --> 00:01:33,550
design has focused more on the

28
00:01:31,270 --> 00:01:37,210
performance while limiting the silicon

29
00:01:33,550 --> 00:01:39,160
area and and power dissipation so more

30
00:01:37,210 --> 00:01:43,449
more and more components are coming

31
00:01:39,160 --> 00:01:46,720
closer to the processor for example to

32
00:01:43,450 --> 00:01:49,630
reduce latencies for DRAM accesses we

33
00:01:46,720 --> 00:01:51,400
got caches and then for in increasing

34
00:01:49,630 --> 00:01:53,679
throughputs we have pipelining different

35
00:01:51,400 --> 00:01:55,450
buffers in the pipelining stages we have

36
00:01:53,680 --> 00:02:00,510
branch predictors and we have

37
00:01:55,450 --> 00:02:03,610
speculation speculative execution on the

38
00:02:00,510 --> 00:02:05,950
instruction level parallelism we can

39
00:02:03,610 --> 00:02:09,098
either I have two different physical

40
00:02:05,950 --> 00:02:12,610
cores or we can replicate the physical

41
00:02:09,098 --> 00:02:16,599
core or we can use simultaneous

42
00:02:12,610 --> 00:02:20,019
multi-threading so the idea of SMT is to

43
00:02:16,599 --> 00:02:24,030
have two logical cores per physical core

44
00:02:20,019 --> 00:02:24,030
where each logical core assets on

45
00:02:24,150 --> 00:02:28,150
architecture state on the some set of

46
00:02:26,830 --> 00:02:31,420
registers

47
00:02:28,150 --> 00:02:34,000
and they share some of the components of

48
00:02:31,420 --> 00:02:36,578
the physical course such as the l1 l2

49
00:02:34,000 --> 00:02:41,530
cache and execution engine in this

50
00:02:36,579 --> 00:02:45,970
example here so due to the inherent

51
00:02:41,530 --> 00:02:49,540
nature of sharing resources in SMT

52
00:02:45,970 --> 00:02:51,640
architecture security researchers

53
00:02:49,540 --> 00:02:54,358
started looking into it that is it

54
00:02:51,640 --> 00:02:58,559
possible to leak sensitive information

55
00:02:54,359 --> 00:03:01,180
by having contention on these subsystems

56
00:02:58,560 --> 00:03:06,159
in this pioneer work first of all in

57
00:03:01,180 --> 00:03:08,650
2005 I demonstrated that I shared l1

58
00:03:06,159 --> 00:03:12,010
data cache can leak information and that

59
00:03:08,650 --> 00:03:14,439
was used to recover RSA key and later on

60
00:03:12,010 --> 00:03:17,500
I am use specific to the Pentium 4

61
00:03:14,439 --> 00:03:20,560
processors which was shared among

62
00:03:17,500 --> 00:03:24,010
logical cores was targeted again on a

63
00:03:20,560 --> 00:03:26,109
real-world application then there was an

64
00:03:24,010 --> 00:03:28,629
attack on l1 instruction cache again

65
00:03:26,109 --> 00:03:31,889
this was innocent environment a shared

66
00:03:28,629 --> 00:03:34,929
resource and very recently a cache plate

67
00:03:31,889 --> 00:03:39,519
which instead of attacking the cache

68
00:03:34,930 --> 00:03:42,370
line it was targeting offsets within the

69
00:03:39,519 --> 00:03:46,810
cache line and finally just last year

70
00:03:42,370 --> 00:03:51,010
another shared resource which is TLB

71
00:03:46,810 --> 00:03:53,079
this partially shade was exploited to

72
00:03:51,010 --> 00:03:58,120
recover keys from the serious in our set

73
00:03:53,079 --> 00:04:01,690
and where we come we are focusing on

74
00:03:58,120 --> 00:04:04,150
execution engine and how the contention

75
00:04:01,690 --> 00:04:09,250
on the ports can actually leak

76
00:04:04,150 --> 00:04:11,560
information so let's zoom into the

77
00:04:09,250 --> 00:04:16,510
execution engine so here we have a

78
00:04:11,560 --> 00:04:20,228
simplified figure of how an execution

79
00:04:16,510 --> 00:04:22,389
engine looks like on a high level we

80
00:04:20,228 --> 00:04:24,610
have some instructions which are first

81
00:04:22,389 --> 00:04:27,430
then they are decoded into smaller micro

82
00:04:24,610 --> 00:04:29,380
operations and these micro operations

83
00:04:27,430 --> 00:04:30,520
are scheduled to be executed on

84
00:04:29,380 --> 00:04:34,330
different

85
00:04:30,520 --> 00:04:37,030
Genet so the scheduler keeps a queue of

86
00:04:34,330 --> 00:04:39,219
these micro operations and there are

87
00:04:37,030 --> 00:04:41,590
channel to different ports to be

88
00:04:39,220 --> 00:04:44,590
executed there is a port contention

89
00:04:41,590 --> 00:04:53,440
whenever two or more micro operations

90
00:04:44,590 --> 00:04:55,299
are issued to the same port when we

91
00:04:53,440 --> 00:04:57,580
discovered first about this port

92
00:04:55,300 --> 00:04:59,440
contention we started looking into

93
00:04:57,580 --> 00:05:02,849
related working and we came across this

94
00:04:59,440 --> 00:05:07,150
very interesting blog post from Fogg

95
00:05:02,849 --> 00:05:11,969
this mentioned about a tool called code

96
00:05:07,150 --> 00:05:14,590
shotgun and the idea was to try to find

97
00:05:11,970 --> 00:05:16,930
contention in subsystems and SMT

98
00:05:14,590 --> 00:05:21,539
architectures of a pair of instructions

99
00:05:16,930 --> 00:05:25,270
were running the the post a blog post

100
00:05:21,539 --> 00:05:28,360
specifically mentioned about congestions

101
00:05:25,270 --> 00:05:32,039
due to execution unit and ports and also

102
00:05:28,360 --> 00:05:35,909
a caching of D decoded micro-operations

103
00:05:32,039 --> 00:05:38,940
now they were to open question first

104
00:05:35,909 --> 00:05:42,909
which substrate systems were getting

105
00:05:38,940 --> 00:05:45,159
congested by by the inspire of

106
00:05:42,909 --> 00:05:48,219
instructions that is the source of

107
00:05:45,159 --> 00:05:52,389
leakage and then whether that source of

108
00:05:48,219 --> 00:05:55,090
leakage could be used to create a side

109
00:05:52,389 --> 00:05:58,080
channel attack so in other word from

110
00:05:55,090 --> 00:06:01,779
cover channel to to a side channel and

111
00:05:58,080 --> 00:06:06,068
import smash we have tried to fill this

112
00:06:01,779 --> 00:06:09,279
research gap so what a sports match

113
00:06:06,069 --> 00:06:13,029
again it exploits the shared execution

114
00:06:09,279 --> 00:06:15,759
engine creates a timing side channel due

115
00:06:13,029 --> 00:06:17,680
to port contention among two processes

116
00:06:15,759 --> 00:06:20,800
running on different logical cores and

117
00:06:17,680 --> 00:06:22,870
same physical core so in order to and

118
00:06:20,800 --> 00:06:24,729
physically verify that there is indeed a

119
00:06:22,870 --> 00:06:27,240
port contention and and there is some

120
00:06:24,729 --> 00:06:30,279
kind of a covert channel to secretly

121
00:06:27,240 --> 00:06:34,509
communicate we performed an experiment

122
00:06:30,279 --> 00:06:37,029
on intel core or cable 8 processor we

123
00:06:34,509 --> 00:06:39,729
selected a set of instructions based on

124
00:06:37,029 --> 00:06:40,210
their performance characteristics and

125
00:06:39,729 --> 00:06:46,020
also

126
00:06:40,210 --> 00:06:49,719
so their porches a footprint we had to

127
00:06:46,020 --> 00:06:51,849
recreate two processes on different

128
00:06:49,720 --> 00:06:56,860
illogical course we call them Alice and

129
00:06:51,849 --> 00:07:00,219
Bob here we decided that for sending a

130
00:06:56,860 --> 00:07:03,099
bit zero we would use or execute

131
00:07:00,220 --> 00:07:06,389
instructions through port one and force

132
00:07:03,099 --> 00:07:11,169
in sending a bit one we would execute

133
00:07:06,389 --> 00:07:17,430
instructions using port five so let's

134
00:07:11,169 --> 00:07:20,380
starts listening on port 1 and then Bob

135
00:07:17,430 --> 00:07:24,820
G cute some instructions on port five

136
00:07:20,380 --> 00:07:28,330
and Alice looks at the values of the

137
00:07:24,820 --> 00:07:34,500
latencies here and then the same when

138
00:07:28,330 --> 00:07:39,849
Bob sends a one zero sorry in this case

139
00:07:34,500 --> 00:07:42,669
so started issuing instructions on port

140
00:07:39,849 --> 00:07:46,210
1 and there's a contention so we can see

141
00:07:42,669 --> 00:07:52,448
the clock cycles went up and this means

142
00:07:46,210 --> 00:07:56,409
there was a zero being sent to Alice so

143
00:07:52,449 --> 00:07:58,449
now that we have seen that there is some

144
00:07:56,409 --> 00:08:03,130
kind of a code channel going on and that

145
00:07:58,449 --> 00:08:04,449
two processes Alice and Bob on on

146
00:08:03,130 --> 00:08:06,849
different logical course their

147
00:08:04,449 --> 00:08:10,120
performance depend on each other sport

148
00:08:06,849 --> 00:08:12,880
usage can be used that to H place by and

149
00:08:10,120 --> 00:08:15,610
create a timing side channel so for that

150
00:08:12,880 --> 00:08:18,280
we created a spy process here now you

151
00:08:15,610 --> 00:08:20,080
can see there are different three

152
00:08:18,280 --> 00:08:22,960
different configurations here one is on

153
00:08:20,080 --> 00:08:24,820
port 1 then there is port 5 and then

154
00:08:22,960 --> 00:08:27,669
there is pour zero and five six

155
00:08:24,820 --> 00:08:30,789
depending on the instructions that we

156
00:08:27,669 --> 00:08:34,419
have selected the spy would based on one

157
00:08:30,789 --> 00:08:37,990
of the configurations start running

158
00:08:34,419 --> 00:08:43,740
these instructions while computing the

159
00:08:37,990 --> 00:08:47,579
latencies we created our victim process

160
00:08:43,740 --> 00:08:50,199
here you can see there is a condition

161
00:08:47,579 --> 00:08:52,729
based on the secret bit value it will

162
00:08:50,199 --> 00:08:55,520
either take the first branch

163
00:08:52,730 --> 00:09:01,580
it will jump to the second branch if the

164
00:08:55,520 --> 00:09:05,540
bit value is one now the tag starts when

165
00:09:01,580 --> 00:09:08,780
the spice when we run this by here we

166
00:09:05,540 --> 00:09:11,120
configure this by on port 1 so the spice

167
00:09:08,780 --> 00:09:14,900
list aspires executing instructions on

168
00:09:11,120 --> 00:09:19,220
port 1 and waiting for the with victim

169
00:09:14,900 --> 00:09:22,220
to start running its code so when the

170
00:09:19,220 --> 00:09:24,890
victim is when there is a bit 0 the

171
00:09:22,220 --> 00:09:28,790
victim will start or executing the first

172
00:09:24,890 --> 00:09:32,900
part of the branch and if you can see

173
00:09:28,790 --> 00:09:34,730
here for both on port 1 there is a port

174
00:09:32,900 --> 00:09:39,709
contention we get a timing side channel

175
00:09:34,730 --> 00:09:43,690
and we have our latency 0 and when the

176
00:09:39,710 --> 00:09:47,180
victim or is on the other branch the

177
00:09:43,690 --> 00:09:49,460
latencies are flat here so from this

178
00:09:47,180 --> 00:09:51,650
timing side channel or we can infer

179
00:09:49,460 --> 00:09:59,950
which secret bit is being executed on

180
00:09:51,650 --> 00:10:04,840
the item so another important aspect of

181
00:09:59,950 --> 00:10:08,870
port smash is that it has a very fine

182
00:10:04,840 --> 00:10:12,020
spatial resolution if you look at these

183
00:10:08,870 --> 00:10:14,360
are two different victims but they have

184
00:10:12,020 --> 00:10:17,870
the similar port to the footprint

185
00:10:14,360 --> 00:10:20,150
because they execute the instructions

186
00:10:17,870 --> 00:10:23,840
are based on this condition either on

187
00:10:20,150 --> 00:10:26,240
port 1 or or port 5 in this case but

188
00:10:23,840 --> 00:10:29,000
there is a difference here if you look

189
00:10:26,240 --> 00:10:30,890
at the memory footprint there this is

190
00:10:29,000 --> 00:10:33,830
different so this one resides within one

191
00:10:30,890 --> 00:10:37,939
cache line but the other one is between

192
00:10:33,830 --> 00:10:40,940
two different cache lines so for the

193
00:10:37,940 --> 00:10:43,580
second victim it is a good target for

194
00:10:40,940 --> 00:10:47,300
attacks such as flush and reload or the

195
00:10:43,580 --> 00:10:50,420
cache based attack but those attacks

196
00:10:47,300 --> 00:10:55,490
will not work on on victims which reside

197
00:10:50,420 --> 00:10:58,640
within one cache line for example so for

198
00:10:55,490 --> 00:10:59,930
port smash it doesn't really matter as

199
00:10:58,640 --> 00:11:03,890
long as we

200
00:10:59,930 --> 00:11:11,870
we are able to identify the victims port

201
00:11:03,890 --> 00:11:16,250
usage footprint we in order to prove

202
00:11:11,870 --> 00:11:20,000
prove that this is a real attack or this

203
00:11:16,250 --> 00:11:22,100
this is a attack this is a side channel

204
00:11:20,000 --> 00:11:23,270
technique that can be used to attack

205
00:11:22,100 --> 00:11:29,050
real-world applications

206
00:11:23,270 --> 00:11:33,050
so we performed an attack on TLS server

207
00:11:29,050 --> 00:11:36,260
and specifically the ECDSA

208
00:11:33,050 --> 00:11:39,680
our signature generation we chose the

209
00:11:36,260 --> 00:11:41,720
open SSL one 100h branch because at that

210
00:11:39,680 --> 00:11:46,459
time it was the latest branch which has

211
00:11:41,720 --> 00:11:53,899
a secret dependent control flow in the

212
00:11:46,459 --> 00:11:56,989
code and we actually fixed the branches

213
00:11:53,899 --> 00:12:02,920
like the future release branches whether

214
00:11:56,990 --> 00:12:02,920
another work that we did previously

215
00:12:03,220 --> 00:12:10,790
so the code always executes double

216
00:12:07,640 --> 00:12:13,880
operation and then it looks at value of

217
00:12:10,790 --> 00:12:16,939
a secret digit if it's not zero it will

218
00:12:13,880 --> 00:12:19,160
do error operation so here we can see

219
00:12:16,940 --> 00:12:20,779
there is a conditional branch and this

220
00:12:19,160 --> 00:12:25,760
is what we are going to export in the

221
00:12:20,779 --> 00:12:30,170
indie attack phase so we started the

222
00:12:25,760 --> 00:12:34,459
attack by procuring procuring TLS crisis

223
00:12:30,170 --> 00:12:36,529
and for that we cubed multiple to TLS

224
00:12:34,459 --> 00:12:40,040
sessions while there was a spy running

225
00:12:36,529 --> 00:12:43,520
in parallel monitoring the one of the

226
00:12:40,040 --> 00:12:50,209
ports which we actually selected based

227
00:12:43,520 --> 00:12:52,370
on experimentation you didn't see here

228
00:12:50,209 --> 00:12:53,660
we have the Thiele stress which as you

229
00:12:52,370 --> 00:12:56,020
see the HN ECDSA

230
00:12:53,660 --> 00:12:59,390
because we are interested in the ECDSA

231
00:12:56,020 --> 00:13:03,230
we creamed that out and when the signal

232
00:12:59,390 --> 00:13:05,930
processing phase we tried to recover the

233
00:13:03,230 --> 00:13:08,180
double and add operations so here you

234
00:13:05,930 --> 00:13:09,880
can see after different steps of

235
00:13:08,180 --> 00:13:13,670
filtering we are able to

236
00:13:09,880 --> 00:13:17,750
our clearly identify Peaks as the ad

237
00:13:13,670 --> 00:13:20,329
operations so for example here this end

238
00:13:17,750 --> 00:13:22,540
that our ad which means we are able to

239
00:13:20,330 --> 00:13:27,130
learn at least one bit of liquid shape

240
00:13:22,540 --> 00:13:32,990
we did that for all the creases and then

241
00:13:27,130 --> 00:13:35,810
build a partial nons information and use

242
00:13:32,990 --> 00:13:41,150
that in our lattice attack to recover

243
00:13:35,810 --> 00:13:43,150
the long term key of TLS over here you

244
00:13:41,150 --> 00:13:47,930
can see four different trailing

245
00:13:43,150 --> 00:13:52,850
sequences of the point multiplication we

246
00:13:47,930 --> 00:13:55,279
get really good distributions so this

247
00:13:52,850 --> 00:13:57,260
information is provided enough resources

248
00:13:55,279 --> 00:14:02,089
this is this information is enough to

249
00:13:57,260 --> 00:14:04,040
mount a successful Redis attack well and

250
00:14:02,089 --> 00:14:07,310
if you want more information about this

251
00:14:04,040 --> 00:14:12,800
how the attack work you can also refer

252
00:14:07,310 --> 00:14:18,260
to the paper so port smash is also

253
00:14:12,800 --> 00:14:22,490
effective against Intel SGX so here you

254
00:14:18,260 --> 00:14:24,970
can see we have two different traces on

255
00:14:22,490 --> 00:14:27,500
the top we have point multiplication

256
00:14:24,970 --> 00:14:30,800
running insider Intel SGX

257
00:14:27,500 --> 00:14:33,020
in clave and on the bottom we have known

258
00:14:30,800 --> 00:14:36,130
as three X version so you can see we can

259
00:14:33,020 --> 00:14:39,500
clearly identify the eight Peaks so

260
00:14:36,130 --> 00:14:42,939
because we are focusing on the execution

261
00:14:39,500 --> 00:14:47,810
engine any isolation provided by the in

262
00:14:42,940 --> 00:14:55,610
SGX on and wheel subsystem does not

263
00:14:47,810 --> 00:14:59,569
affect our side Channel finally we also

264
00:14:55,610 --> 00:15:01,760
proposed some mitigations we have

265
00:14:59,570 --> 00:15:04,250
learned the hardware hardware in

266
00:15:01,760 --> 00:15:08,480
security community that we should always

267
00:15:04,250 --> 00:15:10,730
avoid conditional branches all caused so

268
00:15:08,480 --> 00:15:13,270
there I think is the best solution write

269
00:15:10,730 --> 00:15:17,520
the code that doesn't leak information

270
00:15:13,270 --> 00:15:21,960
and as a result of this work

271
00:15:17,520 --> 00:15:27,689
we were assigned a CV and we also

272
00:15:21,960 --> 00:15:30,150
contacted OpenSSL and the backported the

273
00:15:27,690 --> 00:15:33,500
timing resistant implementation two

274
00:15:30,150 --> 00:15:39,360
older versions which by the way was also

275
00:15:33,500 --> 00:15:42,840
or another work we did on open ssl in

276
00:15:39,360 --> 00:15:44,970
very on highly secure security critical

277
00:15:42,840 --> 00:15:47,630
applications we can always disable SMT

278
00:15:44,970 --> 00:15:49,760
so this attack will not work in

279
00:15:47,630 --> 00:15:54,090
environments where there is no assembly

280
00:15:49,760 --> 00:15:56,430
and if there's a highly threaded

281
00:15:54,090 --> 00:15:58,920
application where we really need some

282
00:15:56,430 --> 00:16:01,560
kind of performance so there are options

283
00:15:58,920 --> 00:16:05,189
where we can have isolation on the voice

284
00:16:01,560 --> 00:16:07,109
level so we can conditionally turn

285
00:16:05,190 --> 00:16:10,950
office empty but it is hard to implement

286
00:16:07,110 --> 00:16:14,700
because we need to change OS level and

287
00:16:10,950 --> 00:16:18,890
also underlying library so and also it

288
00:16:14,700 --> 00:16:18,890
might be difficult to put two different

289
00:16:19,550 --> 00:16:28,589
so what is the takeaway a port smash is

290
00:16:24,930 --> 00:16:31,709
a new side channel attack or which can

291
00:16:28,590 --> 00:16:35,300
be used to attack real-world

292
00:16:31,710 --> 00:16:40,230
applications it can be configured using

293
00:16:35,300 --> 00:16:42,540
different port it is portable so we just

294
00:16:40,230 --> 00:16:45,240
need an SMT architecture we can run it

295
00:16:42,540 --> 00:16:47,910
it has a very fine spatial resolution

296
00:16:45,240 --> 00:16:49,760
since we are talking about the microbes

297
00:16:47,910 --> 00:16:52,850
on the execution in general

298
00:16:49,760 --> 00:16:54,650
and then it doesn't require a lot of

299
00:16:52,850 --> 00:16:56,900
prerequisites we don't need to know

300
00:16:54,650 --> 00:17:00,949
eviction sets and and and other things

301
00:16:56,900 --> 00:17:04,369
we just have to end aspire and configure

302
00:17:00,950 --> 00:17:06,170
it based on the architecture and as

303
00:17:04,369 --> 00:17:09,439
Marko microarchitectures are becoming

304
00:17:06,170 --> 00:17:12,980
more complex so there might be new

305
00:17:09,440 --> 00:17:13,520
side-channel attacks coming on in the

306
00:17:12,980 --> 00:17:16,819
future

307
00:17:13,520 --> 00:17:19,430
but the idea of this point is that now

308
00:17:16,819 --> 00:17:22,550
it's time for the security community and

309
00:17:19,430 --> 00:17:26,120
the architecture researchers to

310
00:17:22,550 --> 00:17:29,899
collaborate and to get to have solution

311
00:17:26,119 --> 00:17:37,929
better solutions we don't have these

312
00:17:29,900 --> 00:17:41,210
kind of security of problems and finally

313
00:17:37,930 --> 00:17:45,620
such an analysis is still a practical

314
00:17:41,210 --> 00:17:47,540
and powerful tool to detect exploits or

315
00:17:45,620 --> 00:17:53,719
to find exploits in the software and

316
00:17:47,540 --> 00:17:56,840
finally mitigate them and thanks

317
00:17:53,720 --> 00:17:59,240
everyone for listening to me and I'm

318
00:17:56,840 --> 00:18:03,500
open for questions in the meantime you

319
00:17:59,240 --> 00:18:06,080
can go on and just pull our proof of

320
00:18:03,500 --> 00:18:14,930
concept from this repo and just start

321
00:18:06,080 --> 00:18:19,220
smashing your ports thank you thank you

322
00:18:14,930 --> 00:18:20,720
so we have time for some questions so

323
00:18:19,220 --> 00:18:22,850
maybe I'll take a quick question why you

324
00:18:20,720 --> 00:18:26,330
want people come up to the microphone so

325
00:18:22,850 --> 00:18:29,030
there's like a whole gaggle of side

326
00:18:26,330 --> 00:18:31,220
channel attacks now available at this in

327
00:18:29,030 --> 00:18:33,379
SMT setting and so and you're gonna loot

328
00:18:31,220 --> 00:18:35,750
to sum the talk so in this can you

329
00:18:33,380 --> 00:18:37,400
compare a little bit more about like why

330
00:18:35,750 --> 00:18:40,130
port smash would be better or worse and

331
00:18:37,400 --> 00:18:42,650
obviously there's the spacial I think

332
00:18:40,130 --> 00:18:43,790
which is very nice but in the victim

333
00:18:42,650 --> 00:18:45,110
code for example that you're looking at

334
00:18:43,790 --> 00:18:49,940
other attacks would have been applicable

335
00:18:45,110 --> 00:18:52,370
as well or or not oh so I mean in the

336
00:18:49,940 --> 00:18:57,650
paper we have a bit more detailed

337
00:18:52,370 --> 00:18:59,550
analysis on that but one different thing

338
00:18:57,650 --> 00:19:01,590
in port smash is

339
00:18:59,550 --> 00:19:04,770
we are not relying on the memory

340
00:19:01,590 --> 00:19:07,320
subsystem so we are just focusing on the

341
00:19:04,770 --> 00:19:16,379
execution unit so when most of the

342
00:19:07,320 --> 00:19:18,290
attacks have been high garage from

343
00:19:16,380 --> 00:19:21,060
Georgia Tech excellent talk loud

344
00:19:18,290 --> 00:19:25,560
listening to it two questions first

345
00:19:21,060 --> 00:19:27,720
could you quickly maybe ballpark how

346
00:19:25,560 --> 00:19:31,320
much bitrate you're able to get through

347
00:19:27,720 --> 00:19:32,520
this versus c-care side channels and if

348
00:19:31,320 --> 00:19:36,629
there is any difference in noise

349
00:19:32,520 --> 00:19:39,540
sensitivity and second did you

350
00:19:36,630 --> 00:19:42,510
subsequently try trying to fit this in

351
00:19:39,540 --> 00:19:44,370
with broad speculation based attacks and

352
00:19:42,510 --> 00:19:47,430
trying to use this cover channel in that

353
00:19:44,370 --> 00:19:49,560
context Thanks I'll answer the second

354
00:19:47,430 --> 00:19:53,580
question first so I think there is a

355
00:19:49,560 --> 00:19:58,440
paper smother Spectre which have

356
00:19:53,580 --> 00:20:00,449
actually used the sports mash technique

357
00:19:58,440 --> 00:20:04,560
and they combine it with the specter

358
00:20:00,450 --> 00:20:06,720
attack so instead of cash and on the

359
00:20:04,560 --> 00:20:09,990
first one so we get a very fine

360
00:20:06,720 --> 00:20:12,270
resolution because like for example in

361
00:20:09,990 --> 00:20:15,780
cash based attacks where you're looking

362
00:20:12,270 --> 00:20:18,090
so I think the cash bleed is is one of

363
00:20:15,780 --> 00:20:21,690
the attacks which is which has the

364
00:20:18,090 --> 00:20:23,790
finest resolution because you're taking

365
00:20:21,690 --> 00:20:26,130
the cash bank conflicts within the cache

366
00:20:23,790 --> 00:20:29,420
line but here we are actually talking

367
00:20:26,130 --> 00:20:34,020
about micro operation level so I think

368
00:20:29,420 --> 00:20:38,490
the resolution is time for one more

369
00:20:34,020 --> 00:20:42,389
question i debit Ken's UC Irvine a

370
00:20:38,490 --> 00:20:44,010
really cool talk interesting work I have

371
00:20:42,390 --> 00:20:45,990
a technical question about the port

372
00:20:44,010 --> 00:20:48,210
assignments you had a table we showed

373
00:20:45,990 --> 00:20:51,390
the different instructions and for ad

374
00:20:48,210 --> 00:20:52,890
there were different ports right um the

375
00:20:51,390 --> 00:20:55,050
way that I understand it it means that

376
00:20:52,890 --> 00:20:57,080
add instruction can go to all of these

377
00:20:55,050 --> 00:21:00,180
ports yeah yeah correct

378
00:20:57,080 --> 00:21:03,330
so in your second analysis you showed

379
00:21:00,180 --> 00:21:05,280
that you extracted secrets from open SSL

380
00:21:03,330 --> 00:21:07,580
I believe yeah and it used yet

381
00:21:05,280 --> 00:21:10,440
instruction right and in the first

382
00:21:07,580 --> 00:21:11,600
analysis you use instructions like CRC

383
00:21:10,440 --> 00:21:14,510
or instructions that go

384
00:21:11,600 --> 00:21:15,260
to the vector Boris okay so only B could

385
00:21:14,510 --> 00:21:17,840
you elaborate on that

386
00:21:15,260 --> 00:21:21,140
yeah so your question is that or in the

387
00:21:17,840 --> 00:21:22,760
attack we used add instruction no

388
00:21:21,140 --> 00:21:27,860
actually that that as is air is a

389
00:21:22,760 --> 00:21:29,780
different actually so this is related to

390
00:21:27,860 --> 00:21:34,129
the implementation of the elliptic curve

391
00:21:29,780 --> 00:21:37,250
cryptography and then we have our

392
00:21:34,130 --> 00:21:39,110
outpatient and within these add in

393
00:21:37,250 --> 00:21:41,809
double operation we have different

394
00:21:39,110 --> 00:21:44,270
finite field operations like squares and

395
00:21:41,809 --> 00:21:47,690
multiplies and and those turn into

396
00:21:44,270 --> 00:21:50,750
instructions and then into microbes for

397
00:21:47,690 --> 00:21:52,580
the sake of the attack like depending on

398
00:21:50,750 --> 00:21:56,960
the architecture we have to do

399
00:21:52,580 --> 00:21:59,600
experiments of which on which port we

400
00:21:56,960 --> 00:22:03,020
get the better signal so I think we use

401
00:21:59,600 --> 00:22:05,658
port 5 in this case first okay yeah

402
00:22:03,020 --> 00:22:06,250
thank you okay well we thank the speaker

403
00:22:05,659 --> 00:22:12,309
one more time

404
00:22:06,250 --> 00:22:12,309
[Applause]

