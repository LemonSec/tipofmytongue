1
00:00:08,790 --> 00:00:14,320
okay thanks Michael for the introduction

2
00:00:11,410 --> 00:00:16,630
I'm too young song a PhD student at UC

3
00:00:14,320 --> 00:00:19,090
Irvine so this is a joint work with my

4
00:00:16,630 --> 00:00:21,820
collaborators Julian Prabhu Yost and

5
00:00:19,090 --> 00:00:23,439
pear and my adviser Michael friends so

6
00:00:21,820 --> 00:00:25,900
this talk is going to be about tools

7
00:00:23,440 --> 00:00:30,160
that find vulnerabilities in C and C++

8
00:00:25,900 --> 00:00:31,810
programs so this is an S ok paper so

9
00:00:30,160 --> 00:00:34,560
there will be lots of materials that's

10
00:00:31,810 --> 00:00:39,670
in the paper but omitted from the talk

11
00:00:34,560 --> 00:00:42,850
I'd like to start by looking at how C

12
00:00:39,670 --> 00:00:45,100
and C++ programs are varied for security

13
00:00:42,850 --> 00:00:47,680
vulnerabilities today there are broadly

14
00:00:45,100 --> 00:00:50,260
speaking manual analysis static analysis

15
00:00:47,680 --> 00:00:52,480
and dynamic analysis our paper focuses

16
00:00:50,260 --> 00:00:54,820
on dynamic analysis allow these tools

17
00:00:52,480 --> 00:00:58,449
often called sanitizers to find

18
00:00:54,820 --> 00:01:00,400
vulnerabilities in C and C++ programs so

19
00:00:58,450 --> 00:01:02,230
this is a mature area as you can see

20
00:01:00,400 --> 00:01:05,199
here there is a large body of research

21
00:01:02,230 --> 00:01:08,200
published in the area over the last 35

22
00:01:05,199 --> 00:01:10,509
years starting from 80s when C started

23
00:01:08,200 --> 00:01:14,140
gaining popularity some of them are

24
00:01:10,509 --> 00:01:16,409
already widely adopted and behind these

25
00:01:14,140 --> 00:01:20,619
covers of many software vulnerabilities

26
00:01:16,409 --> 00:01:22,479
many other tools however only exist in

27
00:01:20,619 --> 00:01:26,679
the literature without being adopted and

28
00:01:22,479 --> 00:01:28,719
deployed in practice so by surveying and

29
00:01:26,679 --> 00:01:31,929
tax on emerging these tools we shed

30
00:01:28,719 --> 00:01:33,699
light on why during the talk I'll

31
00:01:31,929 --> 00:01:35,950
highlight some of the challenges that

32
00:01:33,700 --> 00:01:37,600
remain to be solved in designing and

33
00:01:35,950 --> 00:01:41,079
implementing a dynamic analysis tools

34
00:01:37,600 --> 00:01:43,270
for C++ ICS C++ and addressing those

35
00:01:41,079 --> 00:01:45,818
challenges will increase adoption and

36
00:01:43,270 --> 00:01:47,859
also lead to discovering more

37
00:01:45,819 --> 00:01:50,619
vulnerabilities that might be might be

38
00:01:47,859 --> 00:01:52,419
lurking in today's software so by

39
00:01:50,619 --> 00:01:55,600
looking at these tools here however you

40
00:01:52,420 --> 00:01:57,520
might wonder that why some of the tools

41
00:01:55,600 --> 00:02:00,428
that are often discussed as exploit

42
00:01:57,520 --> 00:02:02,850
mitigations are shown here in our paper

43
00:02:00,429 --> 00:02:05,229
we consistently view these tools as

44
00:02:02,850 --> 00:02:07,568
sanitizers and both finding tools

45
00:02:05,229 --> 00:02:09,490
because these tools do have some of the

46
00:02:07,569 --> 00:02:11,620
characteristics that's desirable in

47
00:02:09,490 --> 00:02:14,319
detecting and finding vulnerabilities

48
00:02:11,620 --> 00:02:17,260
let me use this example flow of a

49
00:02:14,319 --> 00:02:19,599
control for hijacking attack to explain

50
00:02:17,260 --> 00:02:21,489
how exploit mitigations and sanitization

51
00:02:19,599 --> 00:02:23,920
might differ and

52
00:02:21,490 --> 00:02:26,590
perhaps overlap so this control-flow

53
00:02:23,920 --> 00:02:29,350
hijacking attack starts by triggering an

54
00:02:26,590 --> 00:02:31,990
integer overflow which triggers a heap

55
00:02:29,350 --> 00:02:34,480
buffer overflow and the attacker uses

56
00:02:31,990 --> 00:02:36,760
this heap buffer overflow to override a

57
00:02:34,480 --> 00:02:38,950
function pointer which is later used in

58
00:02:36,760 --> 00:02:41,340
an indirect caller so the goal of

59
00:02:38,950 --> 00:02:43,660
exploit mitigations is to mitigate

60
00:02:41,340 --> 00:02:46,540
consequences of a vulnerability that

61
00:02:43,660 --> 00:02:48,100
might be present in a program as such it

62
00:02:46,540 --> 00:02:51,010
does not need to detect the

63
00:02:48,100 --> 00:02:53,920
vulnerabilities as they occur if

64
00:02:51,010 --> 00:02:56,799
especially if it comes at a cost so in

65
00:02:53,920 --> 00:02:59,320
this example tools enforcing certain

66
00:02:56,800 --> 00:03:01,420
forms of control flow integrity and cool

67
00:02:59,320 --> 00:03:04,420
pointer integrity limit possible

68
00:03:01,420 --> 00:03:05,950
consequences of a possible vulnerability

69
00:03:04,420 --> 00:03:07,500
in the program but they do not

70
00:03:05,950 --> 00:03:10,600
necessarily find vulnerabilities

71
00:03:07,500 --> 00:03:13,510
themselves as they occur on the other

72
00:03:10,600 --> 00:03:15,940
hand tools that perform forms of bound

73
00:03:13,510 --> 00:03:18,700
tracking such as soft bond and address

74
00:03:15,940 --> 00:03:21,220
sanitizer can be viewed as sanitizers

75
00:03:18,700 --> 00:03:23,679
because they do detect the heap buffer

76
00:03:21,220 --> 00:03:26,740
overflow to vulnerability itself as it

77
00:03:23,680 --> 00:03:29,020
occurs their differences can further be

78
00:03:26,740 --> 00:03:32,830
summarized as follows to put to point

79
00:03:29,020 --> 00:03:35,080
out a couple more tools sanitizers do

80
00:03:32,830 --> 00:03:37,780
have more relaxed performance budget

81
00:03:35,080 --> 00:03:39,820
than exploit mitigations do so it's

82
00:03:37,780 --> 00:03:42,040
often more desirable to track more

83
00:03:39,820 --> 00:03:44,410
diagnostic information as the program

84
00:03:42,040 --> 00:03:46,329
executes because such information can

85
00:03:44,410 --> 00:03:50,290
tell you about the location of the

86
00:03:46,330 --> 00:03:52,840
vulnerability now what makes C and C++

87
00:03:50,290 --> 00:03:55,450
so special from the security standpoint

88
00:03:52,840 --> 00:03:59,170
one of the things that distinguishes C

89
00:03:55,450 --> 00:04:01,299
and C++ from perhaps managed languages

90
00:03:59,170 --> 00:04:03,910
is that the presence of undefined

91
00:04:01,300 --> 00:04:05,980
behavior undefined behavior is a

92
00:04:03,910 --> 00:04:09,100
possible program behavior that's left

93
00:04:05,980 --> 00:04:13,480
undefined explicitly and deliberately by

94
00:04:09,100 --> 00:04:16,089
the language standard so in fact CS C++

95
00:04:13,480 --> 00:04:18,519
leave quite many aspects of a possible

96
00:04:16,089 --> 00:04:21,010
program behavior undefined which include

97
00:04:18,519 --> 00:04:24,250
buffer overflow use after free and type

98
00:04:21,010 --> 00:04:26,800
errors and so on these are all widely

99
00:04:24,250 --> 00:04:28,720
known security vulnerabilities and more

100
00:04:26,800 --> 00:04:30,820
specifically the security implications

101
00:04:28,720 --> 00:04:33,700
of undefined behavior can be classified

102
00:04:30,820 --> 00:04:34,820
into two first and foremost of course is

103
00:04:33,700 --> 00:04:37,580
a memory

104
00:04:34,820 --> 00:04:40,280
violations which is vulnerable to memory

105
00:04:37,580 --> 00:04:42,680
exploits on the left-hand side of this

106
00:04:40,280 --> 00:04:45,619
slide is an example program statement

107
00:04:42,680 --> 00:04:49,190
which is vulnerable to lower pointed

108
00:04:45,620 --> 00:04:51,860
reference and on the right hand side is

109
00:04:49,190 --> 00:04:54,350
compliation result null pointer

110
00:04:51,860 --> 00:04:57,260
dereference is undefined behavior and is

111
00:04:54,350 --> 00:04:59,180
also a violation of memory safety

112
00:04:57,260 --> 00:05:00,520
that's exploitable under certain

113
00:04:59,180 --> 00:05:03,410
circumstances

114
00:05:00,520 --> 00:05:05,960
besides memory safety violations there's

115
00:05:03,410 --> 00:05:09,110
the second security implication though

116
00:05:05,960 --> 00:05:10,849
which is perhaps often overlooked it is

117
00:05:09,110 --> 00:05:14,030
that the presence of undefined behavior

118
00:05:10,850 --> 00:05:16,400
in a program can surprisingly result in

119
00:05:14,030 --> 00:05:19,070
vulnerable code being generated by the

120
00:05:16,400 --> 00:05:21,620
compiler let me take the same example

121
00:05:19,070 --> 00:05:24,620
but this time with an added law pointer

122
00:05:21,620 --> 00:05:27,110
tag and some privilege code that's

123
00:05:24,620 --> 00:05:29,750
protected by the null pointer check as

124
00:05:27,110 --> 00:05:32,630
you can see here unfortunately the null

125
00:05:29,750 --> 00:05:34,700
pointer check is placed after a possible

126
00:05:32,630 --> 00:05:37,100
nor pointer dereference in the first

127
00:05:34,700 --> 00:05:39,229
line this can create a very interesting

128
00:05:37,100 --> 00:05:41,630
fall or ability so what can happen here

129
00:05:39,230 --> 00:05:43,750
is that the compiler reasons about the

130
00:05:41,630 --> 00:05:46,100
value of the pointer turn here and

131
00:05:43,750 --> 00:05:49,010
concludes that the pointer can't be

132
00:05:46,100 --> 00:05:51,800
known when the null pointer check is

133
00:05:49,010 --> 00:05:53,960
performed the reasoning here is that the

134
00:05:51,800 --> 00:05:56,660
pointer was already being dereferenced

135
00:05:53,960 --> 00:05:59,180
in the first line before so it can't be

136
00:05:56,660 --> 00:06:01,970
known since the pointer can't be null

137
00:05:59,180 --> 00:06:04,400
the compiler removes the lower pointer

138
00:06:01,970 --> 00:06:08,060
check that was supposed to protect the

139
00:06:04,400 --> 00:06:10,250
privileged code that follows so combined

140
00:06:08,060 --> 00:06:12,880
with compilers cool reordering the

141
00:06:10,250 --> 00:06:15,380
result can be rather unexpectedly that

142
00:06:12,880 --> 00:06:17,330
the null pointer check present at the

143
00:06:15,380 --> 00:06:20,000
source code level becomes a privilege

144
00:06:17,330 --> 00:06:21,919
escalation vulnerability in the end even

145
00:06:20,000 --> 00:06:24,380
though the null pointer check that was

146
00:06:21,920 --> 00:06:27,020
protecting the privilege code was

147
00:06:24,380 --> 00:06:29,000
present at the source code level so

148
00:06:27,020 --> 00:06:31,669
these are vulnerabilities that the

149
00:06:29,000 --> 00:06:34,130
sanitizers we studied cover most of

150
00:06:31,670 --> 00:06:37,670
these can either directly or indirectly

151
00:06:34,130 --> 00:06:40,580
lead to memory safety violations besides

152
00:06:37,670 --> 00:06:42,440
direct memory safety violations spatial

153
00:06:40,580 --> 00:06:45,050
and temporal memory safety violations

154
00:06:42,440 --> 00:06:47,600
things like type confusion and integer

155
00:06:45,050 --> 00:06:47,889
overflows are also considered harmful in

156
00:06:47,600 --> 00:06:55,120
the

157
00:06:47,889 --> 00:06:58,539
sense of memory safety in c and c++ in

158
00:06:55,120 --> 00:07:01,240
addition some undefined behavior such as

159
00:06:58,539 --> 00:07:03,610
using uninitialized variable sum of type

160
00:07:01,240 --> 00:07:07,240
errors and nor pointer dereference and

161
00:07:03,610 --> 00:07:09,509
others can even today lead to vulnerable

162
00:07:07,240 --> 00:07:12,219
code being generated by the compiler

163
00:07:09,509 --> 00:07:15,099
this is because the mainstream compilers

164
00:07:12,219 --> 00:07:17,639
are already reason about actively reason

165
00:07:15,099 --> 00:07:20,169
about like such undefined behavior

166
00:07:17,639 --> 00:07:22,300
having recognized that risk you might

167
00:07:20,169 --> 00:07:24,460
have already seen that many projects

168
00:07:22,300 --> 00:07:27,069
actually set different compiler flags to

169
00:07:24,460 --> 00:07:29,710
disable certain optimization behavior

170
00:07:27,069 --> 00:07:32,430
flex that disable deletion of null

171
00:07:29,710 --> 00:07:34,930
pointer checks like the disable

172
00:07:32,430 --> 00:07:36,689
optimization based on strict areas in

173
00:07:34,930 --> 00:07:39,639
room incipiency

174
00:07:36,689 --> 00:07:41,830
but but bad news is that things can

175
00:07:39,639 --> 00:07:45,729
change as the compiler optimizations

176
00:07:41,830 --> 00:07:48,729
evolve so a sanitizer implements a bug

177
00:07:45,729 --> 00:07:50,830
finding technique using various program

178
00:07:48,729 --> 00:07:52,930
instrumentation and metadata management

179
00:07:50,830 --> 00:07:56,979
techniques about finding technique

180
00:07:52,930 --> 00:08:00,009
describes the key mechanism that a tool

181
00:07:56,979 --> 00:08:00,400
uses to detect a given target class of

182
00:08:00,009 --> 00:08:03,669
bugs

183
00:08:00,400 --> 00:08:06,758
for instance address sanitizer inserts

184
00:08:03,669 --> 00:08:09,188
so-called red zones between objects in

185
00:08:06,759 --> 00:08:11,979
memory to find spatial memory safety

186
00:08:09,189 --> 00:08:14,259
violations by checking each memory

187
00:08:11,979 --> 00:08:17,560
whether each memory access goes to red

188
00:08:14,259 --> 00:08:20,439
zone or not program instrumentation

189
00:08:17,560 --> 00:08:22,509
technique describes how and when a tool

190
00:08:20,439 --> 00:08:25,719
instruments a program to monitor is

191
00:08:22,509 --> 00:08:28,389
runtime behavior address analyzer uses

192
00:08:25,719 --> 00:08:31,029
compiler based instrumentation for

193
00:08:28,389 --> 00:08:33,909
example a metadata management technique

194
00:08:31,029 --> 00:08:36,250
describes how a tool stores and manages

195
00:08:33,909 --> 00:08:39,250
various types of static and dynamic

196
00:08:36,250 --> 00:08:41,679
metadata at one time and address

197
00:08:39,250 --> 00:08:43,779
sanitizer again for example uses a

198
00:08:41,679 --> 00:08:47,609
shadow memory to indicate whether a

199
00:08:43,779 --> 00:08:50,199
memory region is red zone or not and

200
00:08:47,610 --> 00:08:53,740
precision and overheads are a more or

201
00:08:50,199 --> 00:08:56,649
less direct result of the implementation

202
00:08:53,740 --> 00:09:00,579
and design choices and this is our

203
00:08:56,649 --> 00:09:01,010
analysis of 37 tools along these axes

204
00:09:00,579 --> 00:09:02,329
above

205
00:09:01,010 --> 00:09:05,150
finding technique program

206
00:09:02,330 --> 00:09:07,460
instrumentation metadata management as

207
00:09:05,150 --> 00:09:10,310
well as their performance and precision

208
00:09:07,460 --> 00:09:12,710
characteristics I'll not go into details

209
00:09:10,310 --> 00:09:15,859
about each axis and each of the tools

210
00:09:12,710 --> 00:09:18,410
here please refer to our paper for more

211
00:09:15,860 --> 00:09:21,200
details for the remainder of the talk I

212
00:09:18,410 --> 00:09:22,760
will instead focus on and highlight some

213
00:09:21,200 --> 00:09:25,840
of the challenges that remain to be

214
00:09:22,760 --> 00:09:31,069
solved in designing and implementing a

215
00:09:25,840 --> 00:09:33,440
dynamic analysis tools for C and C++ as

216
00:09:31,070 --> 00:09:36,680
we all know performance is not a major

217
00:09:33,440 --> 00:09:38,690
concern for a book finding tool for

218
00:09:36,680 --> 00:09:43,609
example tools having 3x performance

219
00:09:38,690 --> 00:09:46,040
overhead are widely used in practice so

220
00:09:43,610 --> 00:09:48,920
the bulk detection technique book

221
00:09:46,040 --> 00:09:53,959
detection precision problems are the

222
00:09:48,920 --> 00:09:57,620
main concern and challenge here there

223
00:09:53,960 --> 00:09:59,780
are many false positives even especially

224
00:09:57,620 --> 00:10:03,940
in tools that are not widely deployed

225
00:09:59,780 --> 00:10:03,939
and there are many false negatives

226
00:10:03,970 --> 00:10:11,840
especially in widely deployed tools they

227
00:10:07,670 --> 00:10:14,750
can miss many types of box to elaborate

228
00:10:11,840 --> 00:10:17,240
further let me describe how false

229
00:10:14,750 --> 00:10:20,810
positives and how false negatives can be

230
00:10:17,240 --> 00:10:23,870
understood and perhaps be defined so

231
00:10:20,810 --> 00:10:26,869
there is the ISO standard and real world

232
00:10:23,870 --> 00:10:29,420
programs that are well defined by the

233
00:10:26,870 --> 00:10:32,420
are ISO standard as you can see in the

234
00:10:29,420 --> 00:10:35,329
diagram and there are also programs that

235
00:10:32,420 --> 00:10:37,310
are not well well-defined which include

236
00:10:35,330 --> 00:10:39,050
programs that transiently construct

237
00:10:37,310 --> 00:10:46,219
pointers that go out of bounds of an

238
00:10:39,050 --> 00:10:48,229
array however there are many many

239
00:10:46,220 --> 00:10:50,530
real-world programs that transiently

240
00:10:48,230 --> 00:10:53,270
construct such are abolish pointers

241
00:10:50,530 --> 00:10:56,540
which is reflected in what's called de

242
00:10:53,270 --> 00:10:59,660
facto standards so de facto standards

243
00:10:56,540 --> 00:11:01,910
reflect dialects of the language that an

244
00:10:59,660 --> 00:11:05,930
actual corpus of real-world programs

245
00:11:01,910 --> 00:11:07,939
follow so sanitizer policies do not

246
00:11:05,930 --> 00:11:10,430
quite aligned with any of these

247
00:11:07,940 --> 00:11:13,010
standards so red shading here it

248
00:11:10,430 --> 00:11:14,780
represents programs that violate a

249
00:11:13,010 --> 00:11:17,930
sanitizer policy is

250
00:11:14,780 --> 00:11:20,449
often too strict generating false alarms

251
00:11:17,930 --> 00:11:23,810
for programs that are legitimate under

252
00:11:20,450 --> 00:11:27,140
the ISO and de facto standards and it's

253
00:11:23,810 --> 00:11:29,650
often too permissive leaving many real

254
00:11:27,140 --> 00:11:34,069
bugs unsanitized

255
00:11:29,650 --> 00:11:36,260
so how can we reduce these gaps one way

256
00:11:34,070 --> 00:11:39,320
towards reducing these false alarms is

257
00:11:36,260 --> 00:11:41,840
to take into account both ISO and de

258
00:11:39,320 --> 00:11:45,590
facto standards supporting more of de

259
00:11:41,840 --> 00:11:47,660
facto standards is desirable because it

260
00:11:45,590 --> 00:11:50,210
means that a tool is applicable to a

261
00:11:47,660 --> 00:11:52,760
actual corpus of real-world programs

262
00:11:50,210 --> 00:11:55,430
that are out there and which in turn

263
00:11:52,760 --> 00:11:58,640
means that a tool can find actual bugs

264
00:11:55,430 --> 00:12:00,770
in real world programs for example many

265
00:11:58,640 --> 00:12:03,199
real-world programs transiently

266
00:12:00,770 --> 00:12:05,780
construct out-of-bounds pointers however

267
00:12:03,200 --> 00:12:08,390
many tools do not actually permit this

268
00:12:05,780 --> 00:12:10,730
some abound tracking tools and dengle

269
00:12:08,390 --> 00:12:13,520
important in pointer invalidation tools

270
00:12:10,730 --> 00:12:15,710
for example can incorrectly invalidate

271
00:12:13,520 --> 00:12:19,490
pointers when programs construct

272
00:12:15,710 --> 00:12:22,460
out-of-bounds pointers let me also take

273
00:12:19,490 --> 00:12:25,220
a look at the other precision gap namely

274
00:12:22,460 --> 00:12:28,250
false negatives there are still many

275
00:12:25,220 --> 00:12:31,460
challenging bugs that elude existing and

276
00:12:28,250 --> 00:12:34,580
widely deployed sanitizers many

277
00:12:31,460 --> 00:12:37,970
subclasses of memory safety violations

278
00:12:34,580 --> 00:12:40,960
for example such as intra object buffer

279
00:12:37,970 --> 00:12:44,510
overflow elude a widely deployed

280
00:12:40,960 --> 00:12:47,120
sanitizer address sanitizer and also

281
00:12:44,510 --> 00:12:49,370
type error detection tools type error

282
00:12:47,120 --> 00:12:53,120
detection efforts are also focused

283
00:12:49,370 --> 00:12:55,130
mostly on bad casting detection but

284
00:12:53,120 --> 00:12:58,130
there are many type unning constructs in

285
00:12:55,130 --> 00:13:01,100
C and C++ that programmers can use and

286
00:12:58,130 --> 00:13:03,710
any errors in using such typing

287
00:13:01,100 --> 00:13:08,050
constructs are not detected by existing

288
00:13:03,710 --> 00:13:11,240
bad casting detection tools in general

289
00:13:08,050 --> 00:13:14,209
finding these elusive bugs requires a

290
00:13:11,240 --> 00:13:16,430
finer-grained metadata tracking such as

291
00:13:14,210 --> 00:13:18,500
tracking bounds for every single pointer

292
00:13:16,430 --> 00:13:20,930
and tracking effective type of every

293
00:13:18,500 --> 00:13:23,660
single object in memory however it

294
00:13:20,930 --> 00:13:25,400
brings its own set of performance and

295
00:13:23,660 --> 00:13:27,110
precision challenges which to our

296
00:13:25,400 --> 00:13:28,019
knowledge has not been properly

297
00:13:27,110 --> 00:13:30,300
addressed

298
00:13:28,019 --> 00:13:33,420
yet let me describe some of the

299
00:13:30,300 --> 00:13:35,579
challenges first uninstrumented code can

300
00:13:33,420 --> 00:13:37,920
cause problems for a pointer pointer

301
00:13:35,579 --> 00:13:40,019
metadata tracking for example if you see

302
00:13:37,920 --> 00:13:41,610
on the left hand side fat pointer

303
00:13:40,019 --> 00:13:45,660
technique is incompatible with

304
00:13:41,610 --> 00:13:47,100
uninstrumented code because if a peppy

305
00:13:45,660 --> 00:13:49,379
for fat pointer gets passed to

306
00:13:47,100 --> 00:13:51,420
uninstrumented code the program can

307
00:13:49,379 --> 00:13:55,670
crash as the fat pointer gets the

308
00:13:51,420 --> 00:13:59,069
referenced and on the right hand side

309
00:13:55,670 --> 00:14:01,199
maintaining metadata disjoined from

310
00:13:59,069 --> 00:14:06,059
original pointer values can be an option

311
00:14:01,199 --> 00:14:08,368
but now it can create another problem as

312
00:14:06,059 --> 00:14:11,399
you as you seen on the right hand side

313
00:14:08,369 --> 00:14:14,220
of the slide uninstrumented code can

314
00:14:11,399 --> 00:14:17,839
update a pointer without updating its

315
00:14:14,220 --> 00:14:21,299
metadata which can cause problems when

316
00:14:17,839 --> 00:14:24,749
the outdated meta data gets used in a

317
00:14:21,299 --> 00:14:27,420
sanitizer check I should also mention

318
00:14:24,749 --> 00:14:30,149
that full instrumentation is also an

319
00:14:27,420 --> 00:14:34,529
option but it's often not viable due to

320
00:14:30,149 --> 00:14:36,809
things like binary only libraries even

321
00:14:34,529 --> 00:14:39,230
with full instrumentation like for

322
00:14:36,809 --> 00:14:41,670
example using dynamic binary translation

323
00:14:39,230 --> 00:14:44,369
sanitizers has still failed to keep

324
00:14:41,670 --> 00:14:47,939
track of pointer meta data for example c

325
00:14:44,369 --> 00:14:50,399
supports pointer to integer casts this

326
00:14:47,939 --> 00:14:53,339
is incompatible with fat and tagged

327
00:14:50,399 --> 00:14:56,220
pointers and destroyed metadata can also

328
00:14:53,339 --> 00:14:58,499
be an option here but pointer flow

329
00:14:56,220 --> 00:15:00,660
tracking across pointer in either casts

330
00:14:58,499 --> 00:15:03,869
remains to be an often problem to our

331
00:15:00,660 --> 00:15:07,100
knowledge no existing tools address this

332
00:15:03,869 --> 00:15:10,199
problem another challenge is maintaining

333
00:15:07,100 --> 00:15:13,049
thread safety if the original program is

334
00:15:10,199 --> 00:15:16,139
multi-threaded for example if there are

335
00:15:13,049 --> 00:15:18,629
two threads that are atomically updating

336
00:15:16,139 --> 00:15:21,629
the same pointer value concurrently and

337
00:15:18,629 --> 00:15:24,989
if the corresponding metadata update is

338
00:15:21,629 --> 00:15:29,069
not within the same atomic unit meta

339
00:15:24,989 --> 00:15:30,569
data can go out of sync here one may be

340
00:15:29,069 --> 00:15:33,238
able to address this problem by

341
00:15:30,569 --> 00:15:35,849
introducing locks for every memory

342
00:15:33,239 --> 00:15:38,579
location that's accessed atomically but

343
00:15:35,850 --> 00:15:41,040
no tool actually addresses this problem

344
00:15:38,579 --> 00:15:43,620
yet the

345
00:15:41,040 --> 00:15:46,199
five errors beyond bad casting

346
00:15:43,620 --> 00:15:49,080
vulnerability requires tracking

347
00:15:46,200 --> 00:15:52,170
effective type of all memory objects

348
00:15:49,080 --> 00:15:54,660
however the effective type rules in C

349
00:15:52,170 --> 00:15:57,839
are complex mainly because it's not a

350
00:15:54,660 --> 00:16:00,630
strongly typed language it supports many

351
00:15:57,840 --> 00:16:03,030
constructs that support type punning and

352
00:16:00,630 --> 00:16:05,790
there are standard library functions

353
00:16:03,030 --> 00:16:08,280
such as mem copy that work that work

354
00:16:05,790 --> 00:16:09,930
right on by byte level data

355
00:16:08,280 --> 00:16:13,350
representation without knowing its

356
00:16:09,930 --> 00:16:17,910
high-level type so C's aliasing rules

357
00:16:13,350 --> 00:16:20,670
also make type error detection difficult

358
00:16:17,910 --> 00:16:23,010
this is because a stored value can be

359
00:16:20,670 --> 00:16:25,680
read by using pointers of different

360
00:16:23,010 --> 00:16:29,460
types for example reading a stored value

361
00:16:25,680 --> 00:16:32,689
using a a pointer of a character type

362
00:16:29,460 --> 00:16:32,690
it's always allowed

363
00:16:32,960 --> 00:16:39,840
besides addressing challenges related to

364
00:16:36,630 --> 00:16:43,460
both detection precision problems there

365
00:16:39,840 --> 00:16:46,020
are also several areas that we find

366
00:16:43,460 --> 00:16:48,930
areas for future research that we find

367
00:16:46,020 --> 00:16:52,530
promising composing Fanny titers would

368
00:16:48,930 --> 00:16:55,979
help users to find bugs closer to their

369
00:16:52,530 --> 00:16:58,170
source and help users to use resource

370
00:16:55,980 --> 00:17:01,080
more efficiently and press more

371
00:16:58,170 --> 00:17:02,939
importantly there's newly with newly

372
00:17:01,080 --> 00:17:05,069
available hardware features such as

373
00:17:02,940 --> 00:17:07,530
address tagging and memory tagging in

374
00:17:05,069 --> 00:17:10,520
arm we may want to revisit some of the

375
00:17:07,530 --> 00:17:14,250
precision and performance challenges

376
00:17:10,520 --> 00:17:17,490
that the software based tool had to face

377
00:17:14,250 --> 00:17:19,459
and it would also be interesting to see

378
00:17:17,490 --> 00:17:22,829
whether research in user space

379
00:17:19,459 --> 00:17:26,310
sanitizers extend to non user space

380
00:17:22,829 --> 00:17:27,839
programs such as OS kernels with that

381
00:17:26,310 --> 00:17:29,399
I'd like to thank you all for your

382
00:17:27,839 --> 00:17:30,820
attention I'm happy to take any

383
00:17:29,400 --> 00:17:34,260
questions

384
00:17:30,820 --> 00:17:36,700
[Applause]

385
00:17:34,260 --> 00:17:43,480
anyone with questions please step

386
00:17:36,700 --> 00:17:46,420
forward to the microphone okay I guess

387
00:17:43,480 --> 00:17:48,180
we have no questions thank you very much

388
00:17:46,420 --> 00:17:50,890
oh we do have a question

389
00:17:48,180 --> 00:17:54,270
so Mike since you're the advisor I'll

390
00:17:50,890 --> 00:17:56,800
save your question right I'll ask it so

391
00:17:54,270 --> 00:17:59,139
well you mentioned those potential

392
00:17:56,800 --> 00:18:01,690
future directions on those are something

393
00:17:59,140 --> 00:18:04,510
big right can you share some actual

394
00:18:01,690 --> 00:18:06,550
thoughts in terms of doing this in the

395
00:18:04,510 --> 00:18:14,650
tech architecture or even composition

396
00:18:06,550 --> 00:18:19,810
compositions is such a big word that's a

397
00:18:14,650 --> 00:18:22,180
difficult question actually so so the

398
00:18:19,810 --> 00:18:26,830
main problem is that there are so many

399
00:18:22,180 --> 00:18:29,440
research tools there but they're really

400
00:18:26,830 --> 00:18:31,090
not comparable with like real world

401
00:18:29,440 --> 00:18:37,090
programs that's kind of hindering

402
00:18:31,090 --> 00:18:43,020
adoption so I think I think there is

403
00:18:37,090 --> 00:18:45,250
room for research especially like

404
00:18:43,020 --> 00:18:51,460
performance is not a major concern for a

405
00:18:45,250 --> 00:18:53,470
sanitizer and trying to answer some of

406
00:18:51,460 --> 00:18:57,430
the precision problems by sacrificing

407
00:18:53,470 --> 00:19:00,610
performance probably that might also be

408
00:18:57,430 --> 00:19:06,280
a possible future direction some

409
00:19:00,610 --> 00:19:08,919
concrete so I think I do want to add

410
00:19:06,280 --> 00:19:10,780
that you know so performance is not a

411
00:19:08,920 --> 00:19:12,460
concern but if you start layering these

412
00:19:10,780 --> 00:19:15,310
things on top of each other then at some

413
00:19:12,460 --> 00:19:17,410
point possibly people will not want to

414
00:19:15,310 --> 00:19:19,570
do this anymore right so if you have

415
00:19:17,410 --> 00:19:22,270
three sanitizers each of them gives you

416
00:19:19,570 --> 00:19:24,760
three X at some point you know but where

417
00:19:22,270 --> 00:19:28,720
do people want to draw the line I I

418
00:19:24,760 --> 00:19:30,580
don't know yeah okay so thank you very

419
00:19:28,720 --> 00:19:33,720
much again thank you all for coming

420
00:19:30,580 --> 00:19:33,720
thanks to the speakers

