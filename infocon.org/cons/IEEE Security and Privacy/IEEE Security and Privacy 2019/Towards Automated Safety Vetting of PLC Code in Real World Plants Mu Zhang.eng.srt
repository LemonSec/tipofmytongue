1
00:00:08,580 --> 00:00:21,000
yeah thank you for the introduction okay

2
00:00:18,080 --> 00:00:23,639
so this figures are just to show that

3
00:00:21,000 --> 00:00:26,430
the problems have real real factory

4
00:00:23,640 --> 00:00:30,570
floors have become the victim for cyber

5
00:00:26,430 --> 00:00:31,800
crimes and more importantly comparing to

6
00:00:30,570 --> 00:00:34,829
the traditional attacks that are

7
00:00:31,800 --> 00:00:36,780
targeting at consumer systems these

8
00:00:34,829 --> 00:00:39,420
attacks are different in a sense that

9
00:00:36,780 --> 00:00:41,879
attackers are not only trying to make

10
00:00:39,420 --> 00:00:43,859
profits but more importantly they want

11
00:00:41,879 --> 00:00:49,070
to cause physical damage they want to

12
00:00:43,859 --> 00:00:52,199
cause safety hazards learning from the

13
00:00:49,070 --> 00:00:54,600
prior incidents we know that the PRC

14
00:00:52,199 --> 00:00:57,510
actually is a major attack vector

15
00:00:54,600 --> 00:00:59,879
so PRC stands for programmable logic

16
00:00:57,510 --> 00:01:03,269
controller which is a core country unit

17
00:00:59,879 --> 00:01:05,309
for the entire factory floor so safety

18
00:01:03,269 --> 00:01:08,270
violations actually can be introduced

19
00:01:05,309 --> 00:01:11,370
into the peers he called either by

20
00:01:08,270 --> 00:01:14,750
accidentally by mistakes were

21
00:01:11,370 --> 00:01:17,340
intentionally by attacks either way the

22
00:01:14,750 --> 00:01:21,810
problematic code will eventually cause

23
00:01:17,340 --> 00:01:24,570
damage to the infrastructure so knowing

24
00:01:21,810 --> 00:01:27,300
this a great many of prior work actually

25
00:01:24,570 --> 00:01:30,559
has aimed to automatically detect the

26
00:01:27,300 --> 00:01:33,750
safety violations in individual Piercy's

27
00:01:30,560 --> 00:01:36,480
however a common limitation of the prior

28
00:01:33,750 --> 00:01:39,690
work is that they overlooked a important

29
00:01:36,480 --> 00:01:41,450
fact that the industrial control system

30
00:01:39,690 --> 00:01:44,039
is actually a highly collaborative

31
00:01:41,450 --> 00:01:47,970
environment piercing is never working

32
00:01:44,040 --> 00:01:50,820
alone so this photo actually shows our

33
00:01:47,970 --> 00:01:54,480
tester that it so called smartest bet

34
00:01:50,820 --> 00:01:57,300
it's a precise miniature of automotive

35
00:01:54,480 --> 00:02:00,330
production line sexually developed by

36
00:01:57,300 --> 00:02:02,910
domain experts from rockwell automation

37
00:02:00,330 --> 00:02:07,080
which is a number-one manufacturing

38
00:02:02,910 --> 00:02:09,538
vendor as you can see even within this

39
00:02:07,080 --> 00:02:12,170
small scout system it has already

40
00:02:09,538 --> 00:02:16,739
included a lot of a different components

41
00:02:12,170 --> 00:02:20,700
he has a PRC and also has multiple CNC

42
00:02:16,740 --> 00:02:22,260
machines each of which is also equipped

43
00:02:20,700 --> 00:02:25,290
with a small TRC

44
00:02:22,260 --> 00:02:27,120
and we also have multiple robots which

45
00:02:25,290 --> 00:02:30,890
are programmed to perform different

46
00:02:27,120 --> 00:02:33,989
actions aside from all those

47
00:02:30,890 --> 00:02:36,689
programmable units we also have some non

48
00:02:33,989 --> 00:02:40,260
programmable units for example here we

49
00:02:36,689 --> 00:02:43,290
have a circular conveyor bed and we also

50
00:02:40,260 --> 00:02:46,440
have pallets that are moving on top of

51
00:02:43,290 --> 00:02:49,739
this conveyor so these pallets are used

52
00:02:46,440 --> 00:02:51,930
as containers to hold and carry these

53
00:02:49,739 --> 00:02:55,250
parts and deliver these parts to

54
00:02:51,930 --> 00:02:59,579
different CNC machines for processing

55
00:02:55,250 --> 00:03:01,769
as a result PLC's are actually

56
00:02:59,579 --> 00:03:04,079
intensively communicating and

57
00:03:01,769 --> 00:03:06,690
collaborating with all the components on

58
00:03:04,079 --> 00:03:09,299
the factory floor and a Piercy code is

59
00:03:06,690 --> 00:03:12,959
actually driven by the external events

60
00:03:09,299 --> 00:03:15,629
from other machines what that means is

61
00:03:12,959 --> 00:03:19,349
that in order to be able to detect the

62
00:03:15,629 --> 00:03:22,138
safety violations by testing PRC code we

63
00:03:19,349 --> 00:03:26,608
also need to take all the external

64
00:03:22,139 --> 00:03:28,109
inputs events into consideration so

65
00:03:26,609 --> 00:03:30,510
essentially this is the contesting

66
00:03:28,109 --> 00:03:34,199
problem for event-driven programs which

67
00:03:30,510 --> 00:03:35,849
however is a well studied problems in

68
00:03:34,199 --> 00:03:40,680
other domains for example Android

69
00:03:35,849 --> 00:03:43,379
applications web applications in order

70
00:03:40,680 --> 00:03:46,500
to understand how to test a Piercy code

71
00:03:43,379 --> 00:03:49,078
which we can just first learn from this

72
00:03:46,500 --> 00:03:51,989
prior work for example if we want to

73
00:03:49,079 --> 00:03:53,910
wrong of what we found to test a Android

74
00:03:51,989 --> 00:03:57,269
app what we can do is that we can first

75
00:03:53,910 --> 00:03:59,730
a riding emulator and then we can a

76
00:03:57,269 --> 00:04:03,449
model and assimilate into events as a

77
00:03:59,730 --> 00:04:05,578
sequence to improve code coverage we can

78
00:04:03,449 --> 00:04:07,560
further rearrange the order of the

79
00:04:05,579 --> 00:04:10,590
events to generate different

80
00:04:07,560 --> 00:04:13,199
permutations so all the sequences will

81
00:04:10,590 --> 00:04:15,690
be used that you drive the program to

82
00:04:13,199 --> 00:04:19,919
run and eventually help us to find the

83
00:04:15,690 --> 00:04:23,659
bugs essentially we can do the same

84
00:04:19,918 --> 00:04:26,580
thing for testing PRC so we can first

85
00:04:23,659 --> 00:04:29,159
simulate the PRC execution and then

86
00:04:26,580 --> 00:04:33,060
further simulate input events of course

87
00:04:29,159 --> 00:04:35,440
we can rearrange their orders however in

88
00:04:33,060 --> 00:04:38,860
practice what we have noticed

89
00:04:35,440 --> 00:04:41,680
is that just a rearranging the order of

90
00:04:38,860 --> 00:04:45,700
the events it's not sufficient to test a

91
00:04:41,680 --> 00:04:48,850
Piercy code what we have observed here

92
00:04:45,700 --> 00:04:52,450
is that two event sequences of the same

93
00:04:48,850 --> 00:04:54,520
ordering may or may not cause a safety

94
00:04:52,450 --> 00:04:58,990
problem because there are timings are

95
00:04:54,520 --> 00:05:01,060
different to give you guys a more

96
00:04:58,990 --> 00:05:03,100
concrete idea let's take a look at this

97
00:05:01,060 --> 00:05:04,960
running example this is actually a

98
00:05:03,100 --> 00:05:08,170
real-world problem that we have

99
00:05:04,960 --> 00:05:11,200
discovered from our testable so here we

100
00:05:08,170 --> 00:05:13,870
have a conveyor bed which is sending a

101
00:05:11,200 --> 00:05:17,020
empty pallet or cell so this cell

102
00:05:13,870 --> 00:05:19,870
consists of two CNC machines and a robot

103
00:05:17,020 --> 00:05:22,320
the entire system is controlled by a

104
00:05:19,870 --> 00:05:22,320
Piercy

105
00:05:22,500 --> 00:05:29,190
so once this pallet has arrived at this

106
00:05:25,420 --> 00:05:32,380
cell it will be blocked by a stopper

107
00:05:29,190 --> 00:05:35,080
during this process five events will be

108
00:05:32,380 --> 00:05:37,630
sent to Pier C and once Piercy has

109
00:05:35,080 --> 00:05:40,570
received all these five events it will

110
00:05:37,630 --> 00:05:43,060
trigger two actions first it will update

111
00:05:40,570 --> 00:05:47,159
the state of the part which is actually

112
00:05:43,060 --> 00:05:51,970
stored on the part once that is down

113
00:05:47,160 --> 00:05:55,630
Pier C will receive a signal event six

114
00:05:51,970 --> 00:05:58,419
update complete the second action is to

115
00:05:55,630 --> 00:06:00,730
request the robot to pass a process

116
00:05:58,419 --> 00:06:03,760
depart from the CNC machine to the

117
00:06:00,730 --> 00:06:06,550
pallet and once that is down the

118
00:06:03,760 --> 00:06:10,060
piercing will receive event seven part a

119
00:06:06,550 --> 00:06:13,510
a conveyor so once both of these two

120
00:06:10,060 --> 00:06:15,430
events are true then Piercy knows that

121
00:06:13,510 --> 00:06:16,419
now the pallet has already been loaded

122
00:06:15,430 --> 00:06:19,900
waits apart

123
00:06:16,419 --> 00:06:21,690
you will then retract the stopper to let

124
00:06:19,900 --> 00:06:25,510
it go

125
00:06:21,690 --> 00:06:27,520
so notice that here this event seven

126
00:06:25,510 --> 00:06:32,260
part of conveyor actually has another

127
00:06:27,520 --> 00:06:35,320
purpose so when it is also used to

128
00:06:32,260 --> 00:06:39,400
control the robot when the signal is on

129
00:06:35,320 --> 00:06:42,610
the robot will always wait at the

130
00:06:39,400 --> 00:06:45,340
conveyor bed only if it is turned off

131
00:06:42,610 --> 00:06:47,350
meaning the part has already left of the

132
00:06:45,340 --> 00:06:48,760
cell and the conveyor bed is now clear

133
00:06:47,350 --> 00:06:53,230
then

134
00:06:48,760 --> 00:06:58,719
robot can move towards a CNC machine to

135
00:06:53,230 --> 00:07:01,900
prepare for another delivery however in

136
00:06:58,720 --> 00:07:04,690
practice for the sake of a throughput we

137
00:07:01,900 --> 00:07:05,830
don't want the the robot to always wait

138
00:07:04,690 --> 00:07:08,830
at the Convair bad

139
00:07:05,830 --> 00:07:11,469
instead we wanted to move towards the

140
00:07:08,830 --> 00:07:13,979
sensi machine in advance right to save

141
00:07:11,470 --> 00:07:16,960
some time for another delivery

142
00:07:13,980 --> 00:07:21,100
regardless of whether the conveyor belt

143
00:07:16,960 --> 00:07:23,979
is clear or not and therefore we will

144
00:07:21,100 --> 00:07:29,890
proactively terminate this event 7

145
00:07:23,980 --> 00:07:31,810
within 0.5 seconds nevertheless this

146
00:07:29,890 --> 00:07:35,200
does not cause any problem in normal

147
00:07:31,810 --> 00:07:38,050
situations the system works fine and it

148
00:07:35,200 --> 00:07:41,260
conforms to our predefined safety rule

149
00:07:38,050 --> 00:07:45,060
which requires that the time duration

150
00:07:41,260 --> 00:07:50,490
between pallet arrival and a pallet

151
00:07:45,060 --> 00:07:50,490
departure is no greater than 30 seconds

152
00:07:50,790 --> 00:07:56,440
we further or formally define this

153
00:07:53,500 --> 00:08:01,210
safety rule using T BTL time the

154
00:07:56,440 --> 00:08:05,920
proposition no temporal logic however if

155
00:08:01,210 --> 00:08:09,370
somehow the event servin happens very

156
00:08:05,920 --> 00:08:12,430
early for example because of the

157
00:08:09,370 --> 00:08:15,340
increase of a robot speed then what can

158
00:08:12,430 --> 00:08:16,960
happen is that this signal will

159
00:08:15,340 --> 00:08:22,510
terminate prematurely

160
00:08:16,960 --> 00:08:24,489
even before the occurrence of event 6 in

161
00:08:22,510 --> 00:08:26,530
this case there's actually no time

162
00:08:24,490 --> 00:08:30,190
window when both of these two signals

163
00:08:26,530 --> 00:08:32,589
can be - and even if the pallet has

164
00:08:30,190 --> 00:08:34,950
already been loaded with a part the

165
00:08:32,590 --> 00:08:37,360
piercing will never know and will never

166
00:08:34,950 --> 00:08:37,780
retract the stopper to lead the pallet

167
00:08:37,360 --> 00:08:40,150
go

168
00:08:37,780 --> 00:08:45,760
this will definitely violate our safety

169
00:08:40,150 --> 00:08:48,430
rule to detect such a problem let's

170
00:08:45,760 --> 00:08:51,270
first reduce to try the traditional way

171
00:08:48,430 --> 00:08:54,969
which is to generate event sequences

172
00:08:51,270 --> 00:08:57,910
based on different ordering to test the

173
00:08:54,970 --> 00:08:59,620
piercing code so for example we can

174
00:08:57,910 --> 00:09:02,620
create a sequence like this right from

175
00:08:59,620 --> 00:09:05,470
event 1 to event 7 so in this case

176
00:09:02,620 --> 00:09:07,810
everything works fine then we can

177
00:09:05,470 --> 00:09:11,500
rearrange the order of the events by two

178
00:09:07,810 --> 00:09:13,630
five seven six so in this case something

179
00:09:11,500 --> 00:09:15,310
wrong happens so this is actually

180
00:09:13,630 --> 00:09:19,300
exactly the same as what we have seen

181
00:09:15,310 --> 00:09:22,479
the lastest slide however such a

182
00:09:19,300 --> 00:09:27,130
sequence may not always be able to cause

183
00:09:22,480 --> 00:09:30,700
this problem for example we can create a

184
00:09:27,130 --> 00:09:33,970
third sequence which actually shares the

185
00:09:30,700 --> 00:09:38,050
same ordering as a second one five seven

186
00:09:33,970 --> 00:09:40,660
six however since the event six actually

187
00:09:38,050 --> 00:09:43,920
happens before the termination of event

188
00:09:40,660 --> 00:09:47,020
seven ever since still works fine so

189
00:09:43,920 --> 00:09:50,229
this actually explains that pure

190
00:09:47,020 --> 00:09:53,620
ordering based event sequence generation

191
00:09:50,230 --> 00:09:57,510
cannot sufficiently help us to discover

192
00:09:53,620 --> 00:10:00,940
the safety violation seeing the PRC code

193
00:09:57,510 --> 00:10:05,350
to solve this problem we proposed our

194
00:10:00,940 --> 00:10:09,100
solution that PRC which can create timed

195
00:10:05,350 --> 00:10:11,800
event sequences to do so we first

196
00:10:09,100 --> 00:10:14,260
performed program analysis on tiers and

197
00:10:11,800 --> 00:10:17,079
a robot code to extract the causal

198
00:10:14,260 --> 00:10:19,510
dependencies among the events right so

199
00:10:17,080 --> 00:10:22,060
this can help us to drew out the

200
00:10:19,510 --> 00:10:25,540
impossible permutations and reduce

201
00:10:22,060 --> 00:10:27,969
search space and then we further resort

202
00:10:25,540 --> 00:10:30,300
to the avantime data that is collected

203
00:10:27,970 --> 00:10:33,820
from our physical test beds and

204
00:10:30,300 --> 00:10:36,430
performed data mining to extract timing

205
00:10:33,820 --> 00:10:39,790
invariants for events so this timing

206
00:10:36,430 --> 00:10:43,180
variants are corresponding to some

207
00:10:39,790 --> 00:10:45,400
certain machine operations so eventually

208
00:10:43,180 --> 00:10:49,439
this timed event sequences can help us

209
00:10:45,400 --> 00:10:52,000
to perform testing now let's see how we

210
00:10:49,440 --> 00:10:55,300
actually apply that PRC to our running

211
00:10:52,000 --> 00:10:57,580
example so first of all we want to

212
00:10:55,300 --> 00:11:00,150
perform program analysis in order to

213
00:10:57,580 --> 00:11:03,760
extract the causal dependencies among

214
00:11:00,150 --> 00:11:07,590
events however if we just look at the

215
00:11:03,760 --> 00:11:11,610
PRC code what we can see is a bunch of

216
00:11:07,590 --> 00:11:13,960
independent if clauses so which are

217
00:11:11,610 --> 00:11:16,339
effectively the event handlers in the

218
00:11:13,960 --> 00:11:18,949
PRC code we do

219
00:11:16,339 --> 00:11:20,990
really have any knowledge how this

220
00:11:18,949 --> 00:11:24,199
events are related to one another

221
00:11:20,990 --> 00:11:26,360
to address that problem we further look

222
00:11:24,199 --> 00:11:30,949
at the collaboration between the PRC and

223
00:11:26,360 --> 00:11:33,680
a robot so in this case when the

224
00:11:30,949 --> 00:11:36,378
parallel conveyor is forced in other

225
00:11:33,680 --> 00:11:40,219
words the event negative particle varies

226
00:11:36,379 --> 00:11:43,399
received the PRC will send a signal to

227
00:11:40,220 --> 00:11:46,490
di zero which is the digital input zero

228
00:11:43,399 --> 00:11:49,389
at the robot side upon receiving this

229
00:11:46,490 --> 00:11:52,339
signal the robot will trigger a routine

230
00:11:49,389 --> 00:11:55,670
in which you will first perform some

231
00:11:52,339 --> 00:11:57,649
robot movements and eventually it will

232
00:11:55,670 --> 00:12:01,219
send a signal to the digital output tube

233
00:11:57,649 --> 00:12:05,720
which is then mapped back to the part a

234
00:12:01,220 --> 00:12:08,269
conveyor event at the PRC sign so now we

235
00:12:05,720 --> 00:12:10,509
know that there's actually a causal

236
00:12:08,269 --> 00:12:13,850
dependency between these two events and

237
00:12:10,509 --> 00:12:16,459
by further performing data mining we

238
00:12:13,850 --> 00:12:20,660
know that the time duration between this

239
00:12:16,459 --> 00:12:22,369
events two events is actually a soft

240
00:12:20,660 --> 00:12:24,679
invariant which is actually

241
00:12:22,370 --> 00:12:27,949
corresponding to the time cost to

242
00:12:24,679 --> 00:12:31,069
deliver part and furthermore if we

243
00:12:27,949 --> 00:12:34,639
consider the speed of reconfiguration

244
00:12:31,069 --> 00:12:37,689
for the robot we can also computer the

245
00:12:34,639 --> 00:12:41,149
theoretical bound for this deliver time

246
00:12:37,689 --> 00:12:45,019
then by digging to the robot code

247
00:12:41,149 --> 00:12:48,230
further we know that the event seven

248
00:12:45,019 --> 00:12:50,990
actually can only last for 0.5 seconds

249
00:12:48,230 --> 00:12:53,809
which is actually a constant hard-coded

250
00:12:50,990 --> 00:12:57,170
in the robot program and again by

251
00:12:53,809 --> 00:12:59,240
performing data mining we know that the

252
00:12:57,170 --> 00:13:03,878
time duration between event five and

253
00:12:59,240 --> 00:13:07,129
events 6 is also a temporary invariant

254
00:13:03,879 --> 00:13:10,339
so there are some technical details due

255
00:13:07,129 --> 00:13:14,509
to the time limit I just a do a flyby so

256
00:13:10,339 --> 00:13:17,179
in order to model the crossover

257
00:13:14,509 --> 00:13:20,179
relations among the events we actually

258
00:13:17,179 --> 00:13:23,720
introduce this a timed event causality

259
00:13:20,179 --> 00:13:26,990
graph so to build this graph we actually

260
00:13:23,720 --> 00:13:30,700
borrow some idea from the N war graph

261
00:13:26,990 --> 00:13:32,410
and eventually we perform

262
00:13:30,700 --> 00:13:35,230
context-sensitive flow census of

263
00:13:32,410 --> 00:13:36,880
interprocedural data flow analysis so

264
00:13:35,230 --> 00:13:40,530
the detailed algorithm using our paper

265
00:13:36,880 --> 00:13:43,110
and in terms of the data mining we also

266
00:13:40,530 --> 00:13:45,850
follow some existing approach

267
00:13:43,110 --> 00:13:48,490
particularly we follow the Synoptics

268
00:13:45,850 --> 00:13:51,910
approach to determine the qualitative

269
00:13:48,490 --> 00:13:55,360
relations between events and further we

270
00:13:51,910 --> 00:13:57,850
leverage perfumes algorithm to determine

271
00:13:55,360 --> 00:14:00,520
the quantitive relations between events

272
00:13:57,850 --> 00:14:06,310
and eventually for this case we can

273
00:14:00,520 --> 00:14:08,520
discover three temporary invariants so

274
00:14:06,310 --> 00:14:11,560
now that we have butyl graph and we have

275
00:14:08,520 --> 00:14:13,380
extracted the temporary invariants we

276
00:14:11,560 --> 00:14:17,469
can leverage its knowledge to create

277
00:14:13,380 --> 00:14:20,800
time to event sequences particularly for

278
00:14:17,470 --> 00:14:23,590
those independent events for example in

279
00:14:20,800 --> 00:14:26,620
this case the first five events which do

280
00:14:23,590 --> 00:14:30,340
not bear any relations we can actually

281
00:14:26,620 --> 00:14:32,740
arrange them in any order so when five

282
00:14:30,340 --> 00:14:35,230
events are all received the time is T

283
00:14:32,740 --> 00:14:37,480
and then further by leveraging the

284
00:14:35,230 --> 00:14:40,060
knowledge from a data mining we know

285
00:14:37,480 --> 00:14:44,590
that the event update

286
00:14:40,060 --> 00:14:48,760
complete actually happens between time T

287
00:14:44,590 --> 00:14:51,580
plus 15 two T plus 20 and further in

288
00:14:48,760 --> 00:14:55,439
order to encode this attending timing

289
00:14:51,580 --> 00:14:58,120
knowledge into event sequences we

290
00:14:55,440 --> 00:15:01,240
discretize the continuous time range

291
00:14:58,120 --> 00:15:03,940
into multiple slices and for each slice

292
00:15:01,240 --> 00:15:09,610
we will create a version event so for

293
00:15:03,940 --> 00:15:12,070
example here we can discretize this time

294
00:15:09,610 --> 00:15:14,920
range into a three slice to two slices

295
00:15:12,070 --> 00:15:18,670
and therefore create three versions

296
00:15:14,920 --> 00:15:21,910
event so in in this time sequence we

297
00:15:18,670 --> 00:15:24,430
only need to pick one and we can do the

298
00:15:21,910 --> 00:15:27,160
same thing for another event parlare

299
00:15:24,430 --> 00:15:30,989
come here the only difference is that

300
00:15:27,160 --> 00:15:34,569
since we know this event only lasts for

301
00:15:30,990 --> 00:15:38,650
0.5 seconds so we will a pro actively

302
00:15:34,570 --> 00:15:41,740
terminates this signal accordingly so

303
00:15:38,650 --> 00:15:44,589
here we actually can create this event

304
00:15:41,740 --> 00:15:46,149
sequence that can actually cause

305
00:15:44,589 --> 00:15:49,809
the safety violations that we have

306
00:15:46,149 --> 00:15:52,929
discussed however another question

307
00:15:49,809 --> 00:15:56,259
remains here is how do we discretize a

308
00:15:52,929 --> 00:16:00,129
time range in a proper way so we will

309
00:15:56,259 --> 00:16:02,529
answer that in our evaluation so our

310
00:16:00,129 --> 00:16:05,109
evaluation is actually performed using

311
00:16:02,529 --> 00:16:07,209
real-world physical test beds we

312
00:16:05,109 --> 00:16:09,759
actually applied it to two different

313
00:16:07,209 --> 00:16:12,128
test bed why is a smart house pair the

314
00:16:09,759 --> 00:16:16,359
other is the fish technique which is a

315
00:16:12,129 --> 00:16:19,419
smaller but more complex test today we

316
00:16:16,359 --> 00:16:22,349
also have applied at that PRC to ten

317
00:16:19,419 --> 00:16:25,059
different real-world scenarios in terms

318
00:16:22,349 --> 00:16:29,229
in order to detect the real-world

319
00:16:25,059 --> 00:16:32,519
problems so the first question we want

320
00:16:29,229 --> 00:16:34,749
to answer in our evaluation is how many

321
00:16:32,519 --> 00:16:39,579
event sequences that can actually be

322
00:16:34,749 --> 00:16:42,489
created using different techniques so

323
00:16:39,579 --> 00:16:45,279
this chart shows the result so the red

324
00:16:42,489 --> 00:16:49,479
curve is a baseline which represents the

325
00:16:45,279 --> 00:16:51,779
total amount of event sequences that can

326
00:16:49,479 --> 00:16:55,720
be created using state of our technique

327
00:16:51,779 --> 00:16:58,539
or sequence and so all sequence consider

328
00:16:55,720 --> 00:17:01,869
only the event ordering by a consider

329
00:16:58,539 --> 00:17:05,549
all possibilities when we further apply

330
00:17:01,869 --> 00:17:09,459
program analysis to remove the

331
00:17:05,549 --> 00:17:12,398
impossible permutations we Koide that

332
00:17:09,459 --> 00:17:14,829
PRC sequence then we can reduce its

333
00:17:12,398 --> 00:17:19,059
amount from the red curve to the green

334
00:17:14,829 --> 00:17:22,118
curve furthermore when we apply time

335
00:17:19,059 --> 00:17:25,269
discretization this amount will be

336
00:17:22,118 --> 00:17:27,609
increased it will be increased from the

337
00:17:25,269 --> 00:17:29,799
green curve to the orange curve to the

338
00:17:27,609 --> 00:17:33,719
black curve and eventually to the blue

339
00:17:29,799 --> 00:17:38,799
curve due to different granularities

340
00:17:33,720 --> 00:17:40,960
so as you can see so this shows that the

341
00:17:38,799 --> 00:17:43,509
time discretization actually increased

342
00:17:40,960 --> 00:17:49,480
the amount of our general description

343
00:17:43,509 --> 00:17:51,869
that the generate sequences to a large

344
00:17:49,480 --> 00:17:55,450
extent especially with the highest

345
00:17:51,869 --> 00:17:57,490
granularity however since we have

346
00:17:55,450 --> 00:17:58,150
already applied the program analysis to

347
00:17:57,490 --> 00:18:01,120
out

348
00:17:58,150 --> 00:18:04,240
impossible permutations so the time

349
00:18:01,120 --> 00:18:07,899
discretization with a median granularity

350
00:18:04,240 --> 00:18:12,730
in other words this black curve can

351
00:18:07,900 --> 00:18:14,710
still give us some reasonable numbers so

352
00:18:12,730 --> 00:18:17,380
in the end we perform a comparative

353
00:18:14,710 --> 00:18:21,870
experiments between state-of-art and the

354
00:18:17,380 --> 00:18:26,020
PRC to see whether we can find real box

355
00:18:21,870 --> 00:18:28,840
so for state of our technique we have

356
00:18:26,020 --> 00:18:32,710
adopted to our algorithms or sequence

357
00:18:28,840 --> 00:18:36,209
and versi sequence and for very PRC we

358
00:18:32,710 --> 00:18:39,340
choose to still go with three different

359
00:18:36,210 --> 00:18:40,860
parameters for the granite granularity

360
00:18:39,340 --> 00:18:46,270
levels

361
00:18:40,860 --> 00:18:48,610
the result is promising so while the

362
00:18:46,270 --> 00:18:51,490
state apart pure ordering based the

363
00:18:48,610 --> 00:18:54,159
event sequence generation cannot help us

364
00:18:51,490 --> 00:18:57,310
to detect any safety safety violations

365
00:18:54,160 --> 00:18:59,950
in our test abets that PRC which

366
00:18:57,310 --> 00:19:02,980
different granularity selection can

367
00:18:59,950 --> 00:19:08,860
always help us to detect those problems

368
00:19:02,980 --> 00:19:12,070
and furthermore we noticed that when we

369
00:19:08,860 --> 00:19:13,050
apply time discretization with different

370
00:19:12,070 --> 00:19:17,139
granularities

371
00:19:13,050 --> 00:19:20,320
the discovered error triggering ranges

372
00:19:17,140 --> 00:19:23,950
are also different for example in

373
00:19:20,320 --> 00:19:26,470
scenario 1 when we divide the time

374
00:19:23,950 --> 00:19:29,770
duration into two slices then what we

375
00:19:26,470 --> 00:19:32,200
can see is the problem may occur only

376
00:19:29,770 --> 00:19:35,470
when the robots is running at his

377
00:19:32,200 --> 00:19:39,070
maximal speed however if we improve the

378
00:19:35,470 --> 00:19:42,280
granularity and divided the time

379
00:19:39,070 --> 00:19:45,370
rearranged into five slices then we

380
00:19:42,280 --> 00:19:48,970
women know that as long as the speed of

381
00:19:45,370 --> 00:19:53,439
the robot is greater than 550 then the

382
00:19:48,970 --> 00:19:56,590
error may occur so in general with

383
00:19:53,440 --> 00:19:58,990
higher granularity we may get more

384
00:19:56,590 --> 00:20:02,250
precise error trading ranges for the

385
00:19:58,990 --> 00:20:06,430
discovered problems however in practice

386
00:20:02,250 --> 00:20:08,840
empirically we also noticed that the

387
00:20:06,430 --> 00:20:11,570
time discretization with a media

388
00:20:08,840 --> 00:20:13,668
and granularity Canora already give us

389
00:20:11,570 --> 00:20:15,980
some reasonable results and not to

390
00:20:13,669 --> 00:20:21,650
mention that the amount of a generated

391
00:20:15,980 --> 00:20:27,370
sequence is also acceptable so to sum it

392
00:20:21,650 --> 00:20:30,740
up so we have studied the real-world ICS

393
00:20:27,370 --> 00:20:35,270
test beds and got very important inside

394
00:20:30,740 --> 00:20:39,799
so real-world PRC is event-driven and

395
00:20:35,270 --> 00:20:43,760
timing sensitive to detect the safety

396
00:20:39,799 --> 00:20:45,740
problems in such PRC so we developed a

397
00:20:43,760 --> 00:20:48,440
system called their PRC which can

398
00:20:45,740 --> 00:20:51,590
automatically construct time to event

399
00:20:48,440 --> 00:20:54,440
sequences and the result is promising

400
00:20:51,590 --> 00:20:57,020
so that PRC outperform state-of-art and

401
00:20:54,440 --> 00:20:58,940
can detect the hidden safety problems

402
00:20:57,020 --> 00:21:02,690
that cannot be discovered using the

403
00:20:58,940 --> 00:21:06,940
prior techniques so with that I conclude

404
00:21:02,690 --> 00:21:06,940
my talk and I'm happy to take questions

405
00:21:07,490 --> 00:21:11,930
[Applause]

406
00:21:17,919 --> 00:21:23,899
thank you I'm how from UC Davis you

407
00:21:21,320 --> 00:21:26,870
mentioned that you used data mining to

408
00:21:23,899 --> 00:21:31,039
find the timing information now do you

409
00:21:26,870 --> 00:21:33,439
use that as a ground truth or do you use

410
00:21:31,039 --> 00:21:37,429
as a starting point but you are going to

411
00:21:33,440 --> 00:21:39,200
find the exact timing later uh we use

412
00:21:37,429 --> 00:21:41,000
actually use their ground truth

413
00:21:39,200 --> 00:21:42,559
okay so then my question I said because

414
00:21:41,000 --> 00:21:45,110
it's data mining you may not have

415
00:21:42,559 --> 00:21:47,899
observed all the states that's true so

416
00:21:45,110 --> 00:21:52,908
will this cause false positive or false

417
00:21:47,899 --> 00:21:57,428
negative or both in your approach some

418
00:21:52,909 --> 00:22:01,669
say it's generally a challenging problem

419
00:21:57,429 --> 00:22:05,740
so the coverage problem so for us it's a

420
00:22:01,669 --> 00:22:10,220
best effort and also our focus is to

421
00:22:05,740 --> 00:22:13,460
find out the timing variance that is

422
00:22:10,220 --> 00:22:16,190
related to the Machine operations and in

423
00:22:13,460 --> 00:22:19,010
our case those machine there there's

424
00:22:16,190 --> 00:22:21,950
limited set of machines as long as our

425
00:22:19,010 --> 00:22:22,220
system goes through all those critical

426
00:22:21,950 --> 00:22:25,400
state

427
00:22:22,220 --> 00:22:28,820
for the mushing operations then we can

428
00:22:25,400 --> 00:22:32,240
guarantee the discovery for those timing

429
00:22:28,820 --> 00:22:34,100
parents so we say guarantee which part

430
00:22:32,240 --> 00:22:37,490
you guarantee together so for example we

431
00:22:34,100 --> 00:22:41,418
want to look for the time cost to

432
00:22:37,490 --> 00:22:47,780
deliver deliver part for example as long

433
00:22:41,419 --> 00:22:51,770
as we in our in our data mining we

434
00:22:47,780 --> 00:22:54,408
always go through that pass then we can

435
00:22:51,770 --> 00:22:56,990
always observe that behavior so assuming

436
00:22:54,409 --> 00:22:59,330
that your data mining is perfect then

437
00:22:56,990 --> 00:23:01,159
you guarantee that the safety property

438
00:22:59,330 --> 00:23:03,280
will never be violated that's true thank

439
00:23:01,159 --> 00:23:03,280
you

