1
00:00:08,559 --> 00:00:12,340
so thank you for the introduction and

2
00:00:10,299 --> 00:00:15,910
good more

3
00:00:12,340 --> 00:00:18,070
I'm Anu and I'm very excited to present

4
00:00:15,910 --> 00:00:21,430
the results that we have on the security

5
00:00:18,070 --> 00:00:23,710
of two round multi signatures so let's

6
00:00:21,430 --> 00:00:25,869
start with multi signatures multi

7
00:00:23,710 --> 00:00:28,509
signatures are a cryptographic building

8
00:00:25,869 --> 00:00:31,630
block that allow a group of signers to

9
00:00:28,509 --> 00:00:33,460
collaboratively sign a common message so

10
00:00:31,630 --> 00:00:35,829
let's say for concreteness we have Alice

11
00:00:33,460 --> 00:00:37,480
Bob and Charlie here they can all

12
00:00:35,829 --> 00:00:40,809
generate a key pair for a signature

13
00:00:37,480 --> 00:00:43,629
scheme as as as usual but now they can

14
00:00:40,809 --> 00:00:45,459
all agree to sign a common message by

15
00:00:43,629 --> 00:00:48,879
running a potentially interactive

16
00:00:45,460 --> 00:00:50,530
signing algorithm the result of that is

17
00:00:48,879 --> 00:00:52,928
Sigma is what we call the multi

18
00:00:50,530 --> 00:00:57,069
signature and now anybody can verify

19
00:00:52,929 --> 00:01:00,550
that both Alice Bob and Charlie wanted

20
00:00:57,069 --> 00:01:05,080
to sign that message m and the goal here

21
00:01:00,550 --> 00:01:08,560
is that that the Sigma is much smaller

22
00:01:05,080 --> 00:01:12,550
than n signatures ideally it's even

23
00:01:08,560 --> 00:01:15,299
constant size and similarly we want the

24
00:01:12,550 --> 00:01:18,250
verification to be very efficient so

25
00:01:15,299 --> 00:01:21,520
ideally as efficient as verifying a

26
00:01:18,250 --> 00:01:23,439
single signature and the security

27
00:01:21,520 --> 00:01:25,298
promise is that we can only see a valid

28
00:01:23,439 --> 00:01:29,320
signature if each of the signers indeed

29
00:01:25,299 --> 00:01:31,659
wanted to sign the message one extra

30
00:01:29,320 --> 00:01:34,898
feature that we often like is called key

31
00:01:31,659 --> 00:01:36,430
aggregation and if I want to know that

32
00:01:34,899 --> 00:01:38,439
Alice Bob and Charlie signed a message

33
00:01:36,430 --> 00:01:40,750
what I can do is take their public keys

34
00:01:38,439 --> 00:01:42,689
and then first squeeze them together in

35
00:01:40,750 --> 00:01:45,369
what's called an aggregate public key

36
00:01:42,689 --> 00:01:47,048
now I verify the multi signature against

37
00:01:45,369 --> 00:01:49,240
that aggregate public key and if that's

38
00:01:47,049 --> 00:01:54,250
valid then I'm convinced that the three

39
00:01:49,240 --> 00:01:56,520
signers approved the message and mobile

40
00:01:54,250 --> 00:01:59,500
signatures have many applications

41
00:01:56,520 --> 00:02:01,479
insured any place where many people find

42
00:01:59,500 --> 00:02:04,450
the same message multi signatures are

43
00:02:01,479 --> 00:02:06,729
typically a good idea one example is in

44
00:02:04,450 --> 00:02:08,979
Bitcoin where it might protect my

45
00:02:06,729 --> 00:02:11,140
bitcoins with multiple keys and require

46
00:02:08,979 --> 00:02:13,330
each of the keys to sign off spending of

47
00:02:11,140 --> 00:02:15,130
my bitcoins this is something that can

48
00:02:13,330 --> 00:02:17,050
be done more efficiently with multi

49
00:02:15,130 --> 00:02:18,490
signatures and actually the Bitcoin

50
00:02:17,050 --> 00:02:21,519
community is considering moving to a

51
00:02:18,490 --> 00:02:25,239
different signature scheme for where

52
00:02:21,519 --> 00:02:25,780
this is one of the reasons a different

53
00:02:25,239 --> 00:02:29,320
use

54
00:02:25,780 --> 00:02:31,180
was presented here three years ago and

55
00:02:29,320 --> 00:02:35,590
the target there is to distribute trust

56
00:02:31,180 --> 00:02:37,690
in authorities for example reducing the

57
00:02:35,590 --> 00:02:39,430
trust and certificate authorities by

58
00:02:37,690 --> 00:02:42,940
splitting them up in many small pieces

59
00:02:39,430 --> 00:02:44,860
and then they all need to sign off - for

60
00:02:42,940 --> 00:02:46,240
example generate a certificate and this

61
00:02:44,860 --> 00:02:49,840
is not a thing where multi signatures

62
00:02:46,240 --> 00:02:53,320
can can help it's been proposed to

63
00:02:49,840 --> 00:02:55,840
generate random as beacons using multi

64
00:02:53,320 --> 00:02:58,600
signatures and a fourth interesting use

65
00:02:55,840 --> 00:03:01,300
case is in permissioned or proof of

66
00:02:58,600 --> 00:03:04,540
stake blockchains there are typically

67
00:03:01,300 --> 00:03:06,670
have some some committee of users that

68
00:03:04,540 --> 00:03:09,750
needs to approve adding a block to the

69
00:03:06,670 --> 00:03:11,679
blockchain by signing that block off and

70
00:03:09,750 --> 00:03:13,840
that means they all need to sign the

71
00:03:11,680 --> 00:03:18,400
same block so multi signatures are

72
00:03:13,840 --> 00:03:21,610
useful they're good to multi signatures

73
00:03:18,400 --> 00:03:23,320
of many use cases let's see it how we

74
00:03:21,610 --> 00:03:26,739
can build them which schemes do we have

75
00:03:23,320 --> 00:03:28,690
and as a start I'm gonna talk you

76
00:03:26,739 --> 00:03:31,090
through the basic snore signature scheme

77
00:03:28,690 --> 00:03:34,390
and then we can look at turning that

78
00:03:31,090 --> 00:03:36,760
into a multi signature scheme so when

79
00:03:34,390 --> 00:03:38,470
national signature scheme a signer has a

80
00:03:36,760 --> 00:03:40,840
public key which is G - the secret key

81
00:03:38,470 --> 00:03:43,000
and to sign a message it first takes

82
00:03:40,840 --> 00:03:46,989
some randomness and then compute the

83
00:03:43,000 --> 00:03:49,090
value T which is G - the randomness then

84
00:03:46,989 --> 00:03:51,190
it hashes that value T along with the

85
00:03:49,090 --> 00:03:54,790
message that it wants to sign which we

86
00:03:51,190 --> 00:03:56,709
call C and it computes the value S which

87
00:03:54,790 --> 00:04:00,340
is this randomness it shows earlier plus

88
00:03:56,709 --> 00:04:02,170
C times that secret key and now that the

89
00:04:00,340 --> 00:04:05,950
cns together form the signature and this

90
00:04:02,170 --> 00:04:07,238
we can very efficiently verify and

91
00:04:05,950 --> 00:04:09,160
what's nice about this is that it's

92
00:04:07,239 --> 00:04:12,130
efficient and it's provably secure under

93
00:04:09,160 --> 00:04:13,570
the discrete log assumption and what's

94
00:04:12,130 --> 00:04:15,180
particularly interesting about the

95
00:04:13,570 --> 00:04:18,130
signature scheme is that it's very

96
00:04:15,180 --> 00:04:20,290
structured so for example this s value

97
00:04:18,130 --> 00:04:23,140
that the secret key only appears in this

98
00:04:20,290 --> 00:04:25,300
value as multiplied by some constant and

99
00:04:23,140 --> 00:04:30,490
this structure is is what is useful

100
00:04:25,300 --> 00:04:32,229
which we'll see later so many people

101
00:04:30,490 --> 00:04:33,880
have tried creating multi signature

102
00:04:32,229 --> 00:04:36,640
schemes out of the Schnoor signature

103
00:04:33,880 --> 00:04:39,070
scheme and first I'll talk you through

104
00:04:36,640 --> 00:04:39,430
the standard way of doing that of how

105
00:04:39,070 --> 00:04:41,050
you at

106
00:04:39,430 --> 00:04:44,830
that and then we're going to see some

107
00:04:41,050 --> 00:04:46,630
problems so let's say we just take three

108
00:04:44,830 --> 00:04:49,120
users again and they all generate their

109
00:04:46,630 --> 00:04:51,460
individual key pair they compute this T

110
00:04:49,120 --> 00:04:53,790
value as before and now they're going to

111
00:04:51,460 --> 00:04:56,260
interact and send each other the T value

112
00:04:53,790 --> 00:04:58,810
so that they can all compute the product

113
00:04:56,260 --> 00:05:01,719
of the T values compute the C value as

114
00:04:58,810 --> 00:05:04,780
before and all compute a part of the S

115
00:05:01,720 --> 00:05:07,270
value which they send around and because

116
00:05:04,780 --> 00:05:10,000
of that structure we can sum that up and

117
00:05:07,270 --> 00:05:13,210
now we have a signature which is small

118
00:05:10,000 --> 00:05:15,550
and we can verify against the product of

119
00:05:13,210 --> 00:05:17,320
their public keys so we can multiply the

120
00:05:15,550 --> 00:05:19,660
keys together we can see that as their

121
00:05:17,320 --> 00:05:21,340
aggregate public key and what we've

122
00:05:19,660 --> 00:05:23,530
constructed here with some interaction

123
00:05:21,340 --> 00:05:27,700
exactly has the shape of a standard

124
00:05:23,530 --> 00:05:29,590
Schnoor signature so this looks this

125
00:05:27,700 --> 00:05:32,800
looks promising but unfortunately there

126
00:05:29,590 --> 00:05:35,590
are some issues here the first issue is

127
00:05:32,800 --> 00:05:38,740
called the rogue key attack this allows

128
00:05:35,590 --> 00:05:41,560
an adversary to choose a specific key to

129
00:05:38,740 --> 00:05:44,710
attack a user so if we have an honest

130
00:05:41,560 --> 00:05:46,510
user on the left with public key one now

131
00:05:44,710 --> 00:05:49,719
the adversary can choose his public key

132
00:05:46,510 --> 00:05:52,320
by taking gee tutors some value divided

133
00:05:49,720 --> 00:05:54,670
by this honest users public key and

134
00:05:52,320 --> 00:05:56,140
because we take the aggregate public key

135
00:05:54,670 --> 00:05:58,360
as the product of those individual

136
00:05:56,140 --> 00:06:00,370
public keys the ad very effectively

137
00:05:58,360 --> 00:06:02,890
cancels out the public key of the honest

138
00:06:00,370 --> 00:06:05,410
user that means that it can just compute

139
00:06:02,890 --> 00:06:07,630
signatures by itself even in the name of

140
00:06:05,410 --> 00:06:11,020
that honest user which goes against our

141
00:06:07,630 --> 00:06:12,760
security properties but this attack is

142
00:06:11,020 --> 00:06:14,830
not new this this has been known for a

143
00:06:12,760 --> 00:06:17,740
very long time and we have many ways of

144
00:06:14,830 --> 00:06:19,479
dealing with this one way is having

145
00:06:17,740 --> 00:06:22,030
different C values per signer a

146
00:06:19,480 --> 00:06:23,530
different way is requiring users to

147
00:06:22,030 --> 00:06:27,609
prove that they know their own secret

148
00:06:23,530 --> 00:06:29,650
key or a more recent approach is doing a

149
00:06:27,610 --> 00:06:31,420
bit more complicated key aggregation

150
00:06:29,650 --> 00:06:34,049
where we don't just multiply but we

151
00:06:31,420 --> 00:06:37,950
raise each key to a different exponent

152
00:06:34,050 --> 00:06:40,510
so this problem we know how to address

153
00:06:37,950 --> 00:06:43,120
there is unfortunately a second more

154
00:06:40,510 --> 00:06:44,830
subtle issue and this mainly shows up

155
00:06:43,120 --> 00:06:47,020
when you're trying to prove the security

156
00:06:44,830 --> 00:06:49,240
of the scheme when you try to prove the

157
00:06:47,020 --> 00:06:51,880
security you need to simulate signing

158
00:06:49,240 --> 00:06:52,740
queries and in the standard nor security

159
00:06:51,880 --> 00:06:54,150
proof

160
00:06:52,740 --> 00:06:57,570
you can do this by what's called

161
00:06:54,150 --> 00:06:58,799
programming the random Oracle so you you

162
00:06:57,570 --> 00:07:01,980
use the fact that you assume an

163
00:06:58,800 --> 00:07:04,260
idealized hash function unfortunately in

164
00:07:01,980 --> 00:07:06,060
in the multi signature case this doesn't

165
00:07:04,260 --> 00:07:09,390
work because the adversary can control

166
00:07:06,060 --> 00:07:11,070
the product of the T values so this

167
00:07:09,390 --> 00:07:13,830
seems like a technicality but this

168
00:07:11,070 --> 00:07:17,120
prevents you from proving security in

169
00:07:13,830 --> 00:07:19,349
the way that you expect you could and

170
00:07:17,120 --> 00:07:21,930
many people have tried to address the

171
00:07:19,350 --> 00:07:24,900
second issue in in varying ways so

172
00:07:21,930 --> 00:07:27,000
Valera and Navin for example instead of

173
00:07:24,900 --> 00:07:28,919
using a two round scheme they add an

174
00:07:27,000 --> 00:07:31,470
additional communication round to their

175
00:07:28,920 --> 00:07:36,180
protocol exactly to avoid the second

176
00:07:31,470 --> 00:07:38,280
issue buggers and Liat all used a more

177
00:07:36,180 --> 00:07:40,620
complicated way to compute the T value

178
00:07:38,280 --> 00:07:43,619
with what's called a homomorphic with

179
00:07:40,620 --> 00:07:45,210
vocable commitment and then try to prove

180
00:07:43,620 --> 00:07:50,100
security with only two communication

181
00:07:45,210 --> 00:07:52,130
rounds midol used double size secret

182
00:07:50,100 --> 00:07:54,240
keys and then try to use the witnessed

183
00:07:52,130 --> 00:07:56,630
indistinguishability of that to prove

184
00:07:54,240 --> 00:07:58,770
security in two rounds

185
00:07:56,630 --> 00:08:01,320
cosy is the multi signature scheme that

186
00:07:58,770 --> 00:08:03,330
was presented here three years ago they

187
00:08:01,320 --> 00:08:05,250
sent essentially used the plane or multi

188
00:08:03,330 --> 00:08:06,419
signature scheme but they didn't run

189
00:08:05,250 --> 00:08:09,960
into this problem because they didn't

190
00:08:06,420 --> 00:08:11,970
try to prove its secure and recently

191
00:08:09,960 --> 00:08:15,270
music is a scheme that was designed for

192
00:08:11,970 --> 00:08:16,710
use in Bitcoin they try to avoid this

193
00:08:15,270 --> 00:08:20,190
issue by using a stronger cryptographic

194
00:08:16,710 --> 00:08:21,840
assumption now surprisingly what we

195
00:08:20,190 --> 00:08:25,590
found is that all these two round

196
00:08:21,840 --> 00:08:27,359
schemes are in fact insecure so we can

197
00:08:25,590 --> 00:08:29,400
show concrete attacks on all of those

198
00:08:27,360 --> 00:08:31,770
schemes because they all share the

199
00:08:29,400 --> 00:08:35,579
common issue of not fully addressing

200
00:08:31,770 --> 00:08:37,740
this second issue that I described we

201
00:08:35,580 --> 00:08:40,380
introduced a slight modification of the

202
00:08:37,740 --> 00:08:43,799
buggers on the Adolphe scheme that that

203
00:08:40,380 --> 00:08:45,510
does address this issue so that we can

204
00:08:43,799 --> 00:08:48,120
with a small fix we can repair that

205
00:08:45,510 --> 00:08:50,580
scheme and other schemes that came out

206
00:08:48,120 --> 00:08:53,010
after this work go back to focusing on

207
00:08:50,580 --> 00:08:55,980
three round schemes and we still have

208
00:08:53,010 --> 00:09:00,210
secure schemes from BLS based on BLS

209
00:08:55,980 --> 00:09:02,250
signatures good so let's look at these

210
00:09:00,210 --> 00:09:04,089
attacks and the problems with those two

211
00:09:02,250 --> 00:09:06,249
round schemes

212
00:09:04,089 --> 00:09:08,350
and to do that we're going to look at

213
00:09:06,249 --> 00:09:09,579
Wagner's algorithm this is a way of

214
00:09:08,350 --> 00:09:12,550
solving the so-called

215
00:09:09,579 --> 00:09:15,160
case some problem in the case some

216
00:09:12,550 --> 00:09:18,008
problem you have K lists of random

217
00:09:15,160 --> 00:09:20,230
integers modulo Q and the challenge is

218
00:09:18,009 --> 00:09:23,800
find one element in each of those

219
00:09:20,230 --> 00:09:27,309
Kahless such that the they sum up to 0

220
00:09:23,800 --> 00:09:30,339
modulo Q and you can imagine that if Q

221
00:09:27,309 --> 00:09:31,959
is large let's say 256 bit number this

222
00:09:30,339 --> 00:09:33,610
is a very hard problem right because it

223
00:09:31,959 --> 00:09:34,589
seems unlikely that some random numbers

224
00:09:33,610 --> 00:09:37,149
add up to 0

225
00:09:34,589 --> 00:09:39,040
however wagner's algorithm does a

226
00:09:37,149 --> 00:09:42,569
surprisingly good job at this problem

227
00:09:39,040 --> 00:09:45,069
and solves it in some exponential time

228
00:09:42,569 --> 00:09:48,610
this is what we're going to use to do

229
00:09:45,069 --> 00:09:50,680
our attacks so we think back at the

230
00:09:48,610 --> 00:09:53,399
Schnoor signature scheme we saw that the

231
00:09:50,680 --> 00:09:55,839
secret key only appeared in this value S

232
00:09:53,399 --> 00:09:59,470
which was some randomness plus C times

233
00:09:55,839 --> 00:10:01,899
the secret key where C was some hash so

234
00:09:59,470 --> 00:10:05,439
you can imagine that if we have a set of

235
00:10:01,899 --> 00:10:08,139
signatures where the C values have

236
00:10:05,439 --> 00:10:10,420
special structure and particular where

237
00:10:08,139 --> 00:10:12,879
the C values add up to the hash of a

238
00:10:10,420 --> 00:10:15,189
different message then we can just take

239
00:10:12,879 --> 00:10:17,350
the signatures that we have somehow add

240
00:10:15,189 --> 00:10:19,240
them up to come up with a new signature

241
00:10:17,350 --> 00:10:22,089
on that different message without

242
00:10:19,240 --> 00:10:23,740
knowing the secret key and so this is

243
00:10:22,089 --> 00:10:26,379
exactly the attack that we're going to

244
00:10:23,740 --> 00:10:29,199
do however finding such signatures is is

245
00:10:26,379 --> 00:10:30,850
is difficult but what we find is that we

246
00:10:29,199 --> 00:10:33,819
can translate this to the case sum

247
00:10:30,850 --> 00:10:36,429
problem so we can make K lists of

248
00:10:33,819 --> 00:10:40,059
different hashes and then run Wagner's

249
00:10:36,429 --> 00:10:41,800
algorithm to find nice hashes in those

250
00:10:40,059 --> 00:10:43,929
lists such that we get this special

251
00:10:41,800 --> 00:10:46,089
structure that we need and then we can

252
00:10:43,929 --> 00:10:53,319
combine signatures that we have into a

253
00:10:46,089 --> 00:10:55,749
new signature on a forged message and so

254
00:10:53,319 --> 00:10:57,610
this this intuition works on those four

255
00:10:55,749 --> 00:11:00,850
schemes so the burgers and DLL schemes

256
00:10:57,610 --> 00:11:04,509
the model schemes cosy and the first

257
00:11:00,850 --> 00:11:07,420
version of music basically in exactly

258
00:11:04,509 --> 00:11:09,399
the same way and while it's not exactly

259
00:11:07,420 --> 00:11:11,378
polynomial because Wagner's algorithm is

260
00:11:09,399 --> 00:11:16,480
sub-exponential it's actually very

261
00:11:11,379 --> 00:11:18,030
practical so we find that for for

262
00:11:16,480 --> 00:11:21,270
standard group sizes that we you

263
00:11:18,030 --> 00:11:23,910
today if we make only 15 signing queries

264
00:11:21,270 --> 00:11:27,780
we can forge a signature in to to the 64

265
00:11:23,910 --> 00:11:30,839
to to the 62 steps and if we make 127

266
00:11:27,780 --> 00:11:33,390
signing queries we only need to to the

267
00:11:30,840 --> 00:11:35,640
45 steps of computation so this is this

268
00:11:33,390 --> 00:11:37,380
is very concretely practical we can we

269
00:11:35,640 --> 00:11:41,760
can break we can forward signatures for

270
00:11:37,380 --> 00:11:44,939
all those schemes you might wonder if we

271
00:11:41,760 --> 00:11:47,610
can if we can resolve the situation by

272
00:11:44,940 --> 00:11:50,400
taking larger larger groups because it's

273
00:11:47,610 --> 00:11:53,090
not exactly a polynomial attack but that

274
00:11:50,400 --> 00:11:57,840
actually also seems very unlikely that

275
00:11:53,090 --> 00:11:59,550
is because what we prove is that you

276
00:11:57,840 --> 00:12:01,230
cannot prove the security of these

277
00:11:59,550 --> 00:12:03,300
schemes under the one more discrete log

278
00:12:01,230 --> 00:12:06,030
problem if that assumption is actually

279
00:12:03,300 --> 00:12:08,270
hard there are some some technical

280
00:12:06,030 --> 00:12:10,680
restrictions to this to this statement

281
00:12:08,270 --> 00:12:12,300
but what it really means is that it's

282
00:12:10,680 --> 00:12:14,280
very unlikely that these schemes can be

283
00:12:12,300 --> 00:12:16,219
proven secure because essentially all

284
00:12:14,280 --> 00:12:18,870
the known techniques that we have

285
00:12:16,220 --> 00:12:22,710
wouldn't wouldn't allow you to prove

286
00:12:18,870 --> 00:12:24,630
security of those schemes and that also

287
00:12:22,710 --> 00:12:26,460
in particularly shows that those

288
00:12:24,630 --> 00:12:30,000
published security proofs actually

289
00:12:26,460 --> 00:12:31,650
contain very subtle flaws and yes so

290
00:12:30,000 --> 00:12:36,990
there's there's slight flaws in in those

291
00:12:31,650 --> 00:12:38,880
proofs so there was a lot of negative

292
00:12:36,990 --> 00:12:39,720
results luckily we also have some

293
00:12:38,880 --> 00:12:42,870
positive results

294
00:12:39,720 --> 00:12:45,740
so this buggers on the italic scheme we

295
00:12:42,870 --> 00:12:47,970
can repair with a slight modification

296
00:12:45,740 --> 00:12:50,610
and so that means that we still have a

297
00:12:47,970 --> 00:12:53,970
two round multi signature scheme secured

298
00:12:50,610 --> 00:12:55,200
under the discrete log assumption this

299
00:12:53,970 --> 00:12:58,320
this scheme is slightly more expensive

300
00:12:55,200 --> 00:13:00,180
than the plain snore or cozy schemes but

301
00:12:58,320 --> 00:13:02,670
we we implemented in the framework that

302
00:13:00,180 --> 00:13:04,920
cosy was implemented in and what we we

303
00:13:02,670 --> 00:13:06,930
notice is that 16,000 signers can

304
00:13:04,920 --> 00:13:09,630
together sign a common message in less

305
00:13:06,930 --> 00:13:11,189
than two seconds and we saw a slight

306
00:13:09,630 --> 00:13:14,400
increase in bandwidth compared to

307
00:13:11,190 --> 00:13:16,470
prepare to cozy and 75% increase in

308
00:13:14,400 --> 00:13:19,410
computation but still this is very

309
00:13:16,470 --> 00:13:23,630
efficient and scalable and so we can use

310
00:13:19,410 --> 00:13:23,630
this even for large amounts of signers

311
00:13:26,010 --> 00:13:32,600
there are also other options so since

312
00:13:29,450 --> 00:13:34,830
since we publish the scheme other other

313
00:13:32,600 --> 00:13:36,840
eccentric policies attacks other schemes

314
00:13:34,830 --> 00:13:39,060
cannot that went back to focusing on

315
00:13:36,840 --> 00:13:41,880
three rounds so we know that with a bit

316
00:13:39,060 --> 00:13:44,520
more interaction we can also obtain

317
00:13:41,880 --> 00:13:48,360
secure schemes from the discrete log

318
00:13:44,520 --> 00:13:52,319
assumption or alternatively we can build

319
00:13:48,360 --> 00:13:53,970
on BLS signatures and they have the

320
00:13:52,320 --> 00:13:57,540
advantage that they that they need even

321
00:13:53,970 --> 00:13:59,730
less interaction but the the security

322
00:13:57,540 --> 00:14:06,930
assumption is may be slightly stronger

323
00:13:59,730 --> 00:14:08,670
than just discrete log ok so that was a

324
00:14:06,930 --> 00:14:10,560
lot about multi signatures is there is

325
00:14:08,670 --> 00:14:14,160
there a bigger lesson we can learn from

326
00:14:10,560 --> 00:14:16,020
this and I think it one thing it shows

327
00:14:14,160 --> 00:14:17,939
is that that security proofs are

328
00:14:16,020 --> 00:14:19,140
extremely important and that we

329
00:14:17,940 --> 00:14:20,730
shouldn't place too much trust in

330
00:14:19,140 --> 00:14:24,090
cryptographic schemes that haven't been

331
00:14:20,730 --> 00:14:26,820
proven secure and in particular also we

332
00:14:24,090 --> 00:14:28,200
shouldn't drop steps from a scheme that

333
00:14:26,820 --> 00:14:30,330
seemed to be there just to make the

334
00:14:28,200 --> 00:14:33,660
proof work because this is exactly what

335
00:14:30,330 --> 00:14:36,320
can get you in trouble but that's not

336
00:14:33,660 --> 00:14:38,250
the full story because on the other hand

337
00:14:36,320 --> 00:14:40,190
some of these schemes had security

338
00:14:38,250 --> 00:14:43,140
proofs that looked extremely convincing

339
00:14:40,190 --> 00:14:44,670
but they did have subtle flaws and these

340
00:14:43,140 --> 00:14:47,610
proofs can really be very difficult to

341
00:14:44,670 --> 00:14:50,400
verify so I think in the future we

342
00:14:47,610 --> 00:14:53,850
really need to support for checking such

343
00:14:50,400 --> 00:14:55,380
proofs and in summary I think that this

344
00:14:53,850 --> 00:14:57,570
shows that provable security is is

345
00:14:55,380 --> 00:14:59,610
really not perfect but still it's the

346
00:14:57,570 --> 00:15:02,480
best tool that we have to design

347
00:14:59,610 --> 00:15:06,110
provably secure cryptographic schemes

348
00:15:02,480 --> 00:15:06,110
thank you for your attention

349
00:15:07,230 --> 00:15:14,760
[Applause]

350
00:15:11,760 --> 00:15:14,760
questions

351
00:15:17,070 --> 00:15:23,230
so under two to the 45 work you can

352
00:15:20,950 --> 00:15:25,839
basically steal money from Bitcoin by

353
00:15:23,230 --> 00:15:27,880
breaking Bitcoin signatures so they they

354
00:15:25,839 --> 00:15:30,149
haven't started using this yet so

355
00:15:27,880 --> 00:15:33,490
they're they're thinking of or

356
00:15:30,149 --> 00:15:35,680
unfortunately now today they're thinking

357
00:15:33,490 --> 00:15:38,560
of switching to short signatures and

358
00:15:35,680 --> 00:15:40,060
then using these multi signatures but

359
00:15:38,560 --> 00:15:42,880
they haven't done that yet and they've

360
00:15:40,060 --> 00:15:44,829
since revised their paper to do three

361
00:15:42,880 --> 00:15:47,860
rounds of communication so that that's

362
00:15:44,830 --> 00:15:50,440
fine so you didn't talk about the oh go

363
00:15:47,860 --> 00:15:52,330
ahead a being from BMO research this is

364
00:15:50,440 --> 00:15:55,240
just a clarifying question but is your

365
00:15:52,330 --> 00:15:59,080
attack exploiting the Box in the

366
00:15:55,240 --> 00:16:00,790
security proofs or is it yeah exactly so

367
00:15:59,080 --> 00:16:03,839
there's exactly steps in the security

368
00:16:00,790 --> 00:16:07,779
proof where there is a statement saying

369
00:16:03,839 --> 00:16:10,540
what I extract is independent from this

370
00:16:07,779 --> 00:16:14,850
and that's exactly not true so there is

371
00:16:10,540 --> 00:16:14,849
a clear step where we where we abuse

372
00:16:17,010 --> 00:16:25,039
right let's thank the speaker again

373
00:16:20,410 --> 00:16:25,039
[Applause]

