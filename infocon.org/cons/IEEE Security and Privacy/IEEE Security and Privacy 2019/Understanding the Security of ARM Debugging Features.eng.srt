1
00:00:09,220 --> 00:00:13,730
okay good morning everyone

2
00:00:11,720 --> 00:00:15,620
I'm doing meaning from combustible

3
00:00:13,730 --> 00:00:17,570
Wednesday the universe day today I'm

4
00:00:15,620 --> 00:00:19,430
going to present our paper understanding

5
00:00:17,570 --> 00:00:22,010
the security of our debugging features

6
00:00:19,430 --> 00:00:25,370
and this paper is a joint work with my

7
00:00:22,010 --> 00:00:27,230
adviser professor from Laketown now this

8
00:00:25,370 --> 00:00:30,440
is the outline for the presentation

9
00:00:27,230 --> 00:00:33,559
now let's start from introduction as we

10
00:00:30,440 --> 00:00:35,510
know modern processors memories they are

11
00:00:33,559 --> 00:00:37,580
equipped with the hardware based bugging

12
00:00:35,510 --> 00:00:40,460
features for example we have some

13
00:00:37,580 --> 00:00:41,960
hardware based breakpoints and also we

14
00:00:40,460 --> 00:00:44,570
may have some hardware based trace

15
00:00:41,960 --> 00:00:46,820
components and to make a use of this

16
00:00:44,570 --> 00:00:49,640
kind of hardware debugging features the

17
00:00:46,820 --> 00:00:51,409
normally requires us to make a physical

18
00:00:49,640 --> 00:00:54,769
connection like a cable jack cable

19
00:00:51,409 --> 00:00:56,510
connection to the tool device this is an

20
00:00:54,769 --> 00:00:59,059
example of the traditional debugging

21
00:00:56,510 --> 00:01:01,430
mode in this mode we have a typical

22
00:00:59,059 --> 00:01:03,409
house on your left and we have a debug

23
00:01:01,430 --> 00:01:05,690
target on your right and normally we

24
00:01:03,409 --> 00:01:08,270
connect the host and target with a jack

25
00:01:05,690 --> 00:01:10,220
cable then you can sit in front of the

26
00:01:08,270 --> 00:01:12,920
debugger host and try to debug the

27
00:01:10,220 --> 00:01:17,420
target where the JTAG interface and in

28
00:01:12,920 --> 00:01:19,969
this mode the host with malicious so to

29
00:01:17,420 --> 00:01:23,659
defend against the malicious host um

30
00:01:19,969 --> 00:01:25,548
designs tobacco syndication mechanism in

31
00:01:23,659 --> 00:01:27,799
this tobacco syndication mechanism it

32
00:01:25,549 --> 00:01:30,740
will decide whether the hardware

33
00:01:27,799 --> 00:01:32,659
debugging is allowed or not so if the

34
00:01:30,740 --> 00:01:34,579
hardware debugging is disabled on the

35
00:01:32,659 --> 00:01:36,859
debug target then the malicious host

36
00:01:34,579 --> 00:01:41,270
cannot access any independent features

37
00:01:36,859 --> 00:01:43,609
of the back pocket okay so this mode has

38
00:01:41,270 --> 00:01:47,359
been introduced to the industry for many

39
00:01:43,609 --> 00:01:49,699
many years but actually we can we didn't

40
00:01:47,359 --> 00:01:54,499
really see a lot of security research

41
00:01:49,700 --> 00:01:57,289
related to this mode why we conceived it

42
00:01:54,499 --> 00:02:01,339
is because that we have some obstacles

43
00:01:57,289 --> 00:02:03,140
for the photo attackers first in this

44
00:02:01,340 --> 00:02:05,179
debugging mode since we need a direct

45
00:02:03,140 --> 00:02:07,640
attack connection so normally we will

46
00:02:05,179 --> 00:02:10,340
assume that the attack the hood hacker

47
00:02:07,640 --> 00:02:13,790
will require the physical cells to

48
00:02:10,340 --> 00:02:15,560
attack alert system in a second we will

49
00:02:13,790 --> 00:02:18,260
assume that the typical syndication

50
00:02:15,560 --> 00:02:21,980
mechanism will block all the malicious

51
00:02:18,260 --> 00:02:25,549
hosts well to this obstacle

52
00:02:21,980 --> 00:02:28,010
works now we will discuss this over sex

53
00:02:25,550 --> 00:02:30,440
in details first

54
00:02:28,010 --> 00:02:33,500
does it really require physical access

55
00:02:30,440 --> 00:02:36,590
to to the hardware debugging and of

56
00:02:33,500 --> 00:02:39,050
course the answer is not actually we can

57
00:02:36,590 --> 00:02:41,599
use one processor on the chip to debug

58
00:02:39,050 --> 00:02:43,250
another process on the same chip and we

59
00:02:41,599 --> 00:02:45,679
refer this kind of debugging as the

60
00:02:43,250 --> 00:02:47,420
inter process of debugging in the ARM

61
00:02:45,680 --> 00:02:49,280
architecture the inter process of

62
00:02:47,420 --> 00:02:52,910
debugging is achieved by the memory

63
00:02:49,280 --> 00:02:55,160
mapped tobacco registers and even we use

64
00:02:52,910 --> 00:02:58,400
this kind of driving mode we will not

65
00:02:55,160 --> 00:03:00,680
require any jet jet hack cable and of

66
00:02:58,400 --> 00:03:04,640
course we were not required the physical

67
00:03:00,680 --> 00:03:06,709
sets in the same second does the debacle

68
00:03:04,640 --> 00:03:09,708
of syndication mechanism really works as

69
00:03:06,709 --> 00:03:11,660
what we expected before we answer this

70
00:03:09,709 --> 00:03:13,690
question I want to introduce something

71
00:03:11,660 --> 00:03:16,430
about the tobacco syndication mechanism

72
00:03:13,690 --> 00:03:18,500
first I will introduce different

73
00:03:16,430 --> 00:03:20,630
debugging categories in RAM debugging

74
00:03:18,500 --> 00:03:22,280
architecture as we know when the

75
00:03:20,630 --> 00:03:25,069
processor is running in the normal state

76
00:03:22,280 --> 00:03:27,410
the processor will continue executing

77
00:03:25,069 --> 00:03:30,200
the instructions pointed by the program

78
00:03:27,410 --> 00:03:32,510
counter and if we use the non-invasive

79
00:03:30,200 --> 00:03:34,970
debugging we are trying to model these

80
00:03:32,510 --> 00:03:38,388
are the status of the processor without

81
00:03:34,970 --> 00:03:40,519
any control and if we use the invasive

82
00:03:38,389 --> 00:03:42,560
debugging we are trying to post the

83
00:03:40,519 --> 00:03:45,200
processor to make it a running in the

84
00:03:42,560 --> 00:03:48,920
debug state after that we can change the

85
00:03:45,200 --> 00:03:50,888
status of the system then the tobacco

86
00:03:48,920 --> 00:03:53,238
syndication mechanism in the arm is

87
00:03:50,889 --> 00:03:55,280
achieved by a group of with tobacco

88
00:03:53,239 --> 00:03:56,959
syndication signals the tobacco

89
00:03:55,280 --> 00:03:58,579
syndication signals is a group of

90
00:03:56,959 --> 00:04:01,100
hardware signals

91
00:03:58,579 --> 00:04:04,639
connected to the processor and it how

92
00:04:01,100 --> 00:04:06,920
two different states on and off and on

93
00:04:04,639 --> 00:04:08,299
and off status is used to control

94
00:04:06,920 --> 00:04:10,760
whether the Hardware debugging is

95
00:04:08,299 --> 00:04:13,370
allowed on on the chip is allowed for

96
00:04:10,760 --> 00:04:15,980
the processor and if we consider

97
00:04:13,370 --> 00:04:18,289
positive secure and non-secure state of

98
00:04:15,980 --> 00:04:20,450
the processor and also the invasive and

99
00:04:18,289 --> 00:04:21,380
non-invasive debugging we will have four

100
00:04:20,450 --> 00:04:25,460
different

101
00:04:21,380 --> 00:04:27,169
tobacco syndication signals and they I

102
00:04:25,460 --> 00:04:29,239
will introduce the army ecosystem and

103
00:04:27,169 --> 00:04:31,729
and their relationship with tobacco

104
00:04:29,240 --> 00:04:34,070
education signals in the arm ecosystem

105
00:04:31,729 --> 00:04:35,960
we have four different roles we have our

106
00:04:34,070 --> 00:04:38,360
we have sot brandon we

107
00:04:35,960 --> 00:04:40,609
Oh yen Oh yen means the original

108
00:04:38,360 --> 00:04:44,060
equipment manufacturers and also we have

109
00:04:40,610 --> 00:04:46,699
end-user first we are reasons that here

110
00:04:44,060 --> 00:04:48,710
knowledge it to the soc vendor in regard

111
00:04:46,699 --> 00:04:50,660
to the tobacco syndication signal I'm

112
00:04:48,710 --> 00:04:53,150
owning designs the tobacco education

113
00:04:50,660 --> 00:04:55,639
sing-along and they we are not specified

114
00:04:53,150 --> 00:04:58,039
any details about the implementation of

115
00:04:55,639 --> 00:05:01,400
the tobacco's indicator sing along in

116
00:04:58,039 --> 00:05:03,349
the same the OSI the SOC vendor

117
00:05:01,400 --> 00:05:06,620
there we are development as a they were

118
00:05:03,350 --> 00:05:08,120
developed strips for the OEMs and the

119
00:05:06,620 --> 00:05:09,919
for the the back wasn't occasion signal

120
00:05:08,120 --> 00:05:12,410
they we are implemented a tobacco

121
00:05:09,919 --> 00:05:14,960
syndicated sing-along and also they are

122
00:05:12,410 --> 00:05:18,259
in charge of how to manage it is kind of

123
00:05:14,960 --> 00:05:20,900
tobacco syndication signals after that

124
00:05:18,259 --> 00:05:22,699
the OM gets there is also chips from the

125
00:05:20,900 --> 00:05:25,520
random and as they can produce the

126
00:05:22,699 --> 00:05:27,440
devices for the users and for the

127
00:05:25,520 --> 00:05:29,539
tobacco syndication signal they are

128
00:05:27,440 --> 00:05:32,570
responsible to configure the debugger

129
00:05:29,539 --> 00:05:35,389
syndication single loss and then finally

130
00:05:32,570 --> 00:05:38,120
the end user can enjoy the device and in

131
00:05:35,389 --> 00:05:39,710
most cases the user can only learn the

132
00:05:38,120 --> 00:05:42,050
status of the tobacco syndication

133
00:05:39,710 --> 00:05:44,270
signals okay that's all about the

134
00:05:42,050 --> 00:05:46,430
tobacco syndication signals now let's

135
00:05:44,270 --> 00:05:48,349
get to the question of game does the

136
00:05:46,430 --> 00:05:52,039
debug or syndication mechanism work as

137
00:05:48,349 --> 00:05:55,610
what we expected specifically we want to

138
00:05:52,039 --> 00:05:57,800
answer two questions first of all what

139
00:05:55,610 --> 00:05:59,440
is the status of the tobacco syndication

140
00:05:57,800 --> 00:06:02,780
signals in the real world device and

141
00:05:59,440 --> 00:06:05,479
also how to management how to manage the

142
00:06:02,780 --> 00:06:07,369
signals in the real world device to

143
00:06:05,479 --> 00:06:09,280
answer these questions we perform the

144
00:06:07,370 --> 00:06:12,229
investigation to the real world device

145
00:06:09,280 --> 00:06:15,520
in our investigation we try to cover

146
00:06:12,229 --> 00:06:18,710
different categories of devices such as

147
00:06:15,520 --> 00:06:21,349
development boards the IOT devices the

148
00:06:18,710 --> 00:06:24,169
cloud the cloud pen phones and also the

149
00:06:21,349 --> 00:06:26,810
mobile devices the last four columns

150
00:06:24,169 --> 00:06:28,639
indicates the status of the tobacco's

151
00:06:26,810 --> 00:06:32,389
and occasion signals in the real device

152
00:06:28,639 --> 00:06:34,449
as we can see in many devices all the

153
00:06:32,389 --> 00:06:38,419
debuggers indication signals are enabled

154
00:06:34,449 --> 00:06:40,340
surprise hmm and then we answer the

155
00:06:38,419 --> 00:06:43,520
second question how to manage the

156
00:06:40,340 --> 00:06:45,799
signals in the device for this one we

157
00:06:43,520 --> 00:06:48,770
try to survey the publicly available

158
00:06:45,800 --> 00:06:49,830
manuals of the devices and also we try

159
00:06:48,770 --> 00:06:52,409
to find the opens

160
00:06:49,830 --> 00:06:54,150
kernels for the devices for the

161
00:06:52,410 --> 00:06:57,980
development boards we have the manuals

162
00:06:54,150 --> 00:07:01,739
but still to the best of our knowledge

163
00:06:57,980 --> 00:07:04,560
we can only control part of the tobacco

164
00:07:01,740 --> 00:07:06,930
syndication signals and also we found

165
00:07:04,560 --> 00:07:08,790
that in some mobile phones the tobacco

166
00:07:06,930 --> 00:07:11,730
syndication signals is controlled by the

167
00:07:08,790 --> 00:07:14,130
one-time programmable fuse but for all

168
00:07:11,730 --> 00:07:16,230
the other devices now seeing about the

169
00:07:14,130 --> 00:07:20,070
tobacco syndication signals is publicly

170
00:07:16,230 --> 00:07:23,490
available now let's summarize a little

171
00:07:20,070 --> 00:07:25,710
bit first we don't really require the

172
00:07:23,490 --> 00:07:28,590
physical set to use the hardware

173
00:07:25,710 --> 00:07:30,630
debugging features second the debug

174
00:07:28,590 --> 00:07:33,119
authentication mechanism in the robot

175
00:07:30,630 --> 00:07:36,469
device actually allows us to - the

176
00:07:33,120 --> 00:07:39,000
debugging then let's see what we can get

177
00:07:36,470 --> 00:07:42,120
this is the inter process in debugging

178
00:07:39,000 --> 00:07:43,830
mode we introduce again you have a host

179
00:07:42,120 --> 00:07:46,560
on your left and you have a target on

180
00:07:43,830 --> 00:07:48,450
your right and you can use a host to

181
00:07:46,560 --> 00:07:51,990
debug the target whereas a memory-mapped

182
00:07:48,450 --> 00:07:54,539
interface and in this mode again the

183
00:07:51,990 --> 00:07:58,440
host may be malicious then what will

184
00:07:54,540 --> 00:08:01,440
happen let's consider SOC season degrees

185
00:07:58,440 --> 00:08:04,200
in this system we have a host processor

186
00:08:01,440 --> 00:08:06,270
and also we have a target processor and

187
00:08:04,200 --> 00:08:09,270
we have a low pressure resource and we

188
00:08:06,270 --> 00:08:11,370
have a high pressure source here the low

189
00:08:09,270 --> 00:08:13,950
provision refers to the non-secure

190
00:08:11,370 --> 00:08:17,070
kernel evaporation that is because that

191
00:08:13,950 --> 00:08:19,380
in most cases it requests the non secure

192
00:08:17,070 --> 00:08:22,230
cannoli operation to access the hardware

193
00:08:19,380 --> 00:08:24,930
debugging features and then the high

194
00:08:22,230 --> 00:08:27,180
high provision refers to any higher

195
00:08:24,930 --> 00:08:28,980
privilege for example they have wider

196
00:08:27,180 --> 00:08:32,580
level perversion or any insecure

197
00:08:28,980 --> 00:08:34,830
providers as a worry beginning we will

198
00:08:32,580 --> 00:08:37,290
assume that is a host and a target a

199
00:08:34,830 --> 00:08:39,630
post running in the normal state low

200
00:08:37,289 --> 00:08:41,849
provisional since they are running in a

201
00:08:39,630 --> 00:08:45,630
low pro mode so they can only access the

202
00:08:41,850 --> 00:08:47,760
low provision sauce then we can ask the

203
00:08:45,630 --> 00:08:50,700
host to send a debug request to the

204
00:08:47,760 --> 00:08:52,980
target once the debug target receive

205
00:08:50,700 --> 00:08:55,850
this travel request the target will

206
00:08:52,980 --> 00:08:58,890
check his own tobacco station signal and

207
00:08:55,850 --> 00:09:02,730
the privilege over the tobacco host will

208
00:08:58,890 --> 00:09:03,510
be not what I mean it means even the

209
00:09:02,730 --> 00:09:05,610
host is

210
00:09:03,510 --> 00:09:08,250
the low-pressure mode and the target is

211
00:09:05,610 --> 00:09:10,520
running in a hyper remote the host can

212
00:09:08,250 --> 00:09:14,010
still say no to public request to the

213
00:09:10,520 --> 00:09:15,930
target but here for genera T we still

214
00:09:14,010 --> 00:09:18,960
assume that the target is running in the

215
00:09:15,930 --> 00:09:21,839
low pressure mode so after the target

216
00:09:18,960 --> 00:09:24,420
received the request it will turns to

217
00:09:21,840 --> 00:09:26,310
the back to back state but again it is

218
00:09:24,420 --> 00:09:28,099
running in the low pressure mode so it

219
00:09:26,310 --> 00:09:31,439
can only access the low proof resource

220
00:09:28,100 --> 00:09:34,590
to achieve access to the hybrid resource

221
00:09:31,440 --> 00:09:37,020
the host can they send their provision

222
00:09:34,590 --> 00:09:39,660
is creation request to target for

223
00:09:37,020 --> 00:09:42,840
example the host can ask the target to

224
00:09:39,660 --> 00:09:45,510
execute the DCPS instructions the cheat

225
00:09:42,840 --> 00:09:47,490
the TCPS instructions they will promote

226
00:09:45,510 --> 00:09:52,290
her processor running in the debug step

227
00:09:47,490 --> 00:09:54,260
to any required previous state and also

228
00:09:52,290 --> 00:09:57,530
when the target received this request

229
00:09:54,260 --> 00:10:01,050
again the period of the host is ignored

230
00:09:57,530 --> 00:10:03,410
so the target will accept the request

231
00:10:01,050 --> 00:10:06,060
and it turns to the high pressure mode

232
00:10:03,410 --> 00:10:09,630
that means that now the target has

233
00:10:06,060 --> 00:10:11,489
access to the hyper resource but at this

234
00:10:09,630 --> 00:10:13,380
moment the host is running in a low

235
00:10:11,490 --> 00:10:16,650
pressure mode the target is only in the

236
00:10:13,380 --> 00:10:18,530
hybrid remote the host still has full

237
00:10:16,650 --> 00:10:21,959
control over the target

238
00:10:18,530 --> 00:10:23,970
that means the host can then send the

239
00:10:21,960 --> 00:10:26,880
resource request access request to a

240
00:10:23,970 --> 00:10:28,710
target for example the host can ask the

241
00:10:26,880 --> 00:10:30,780
target to ask you some special

242
00:10:28,710 --> 00:10:33,180
instructions to access the skill ran

243
00:10:30,780 --> 00:10:36,720
just access the secure register or

244
00:10:33,180 --> 00:10:40,500
secure peripherals and again again the

245
00:10:36,720 --> 00:10:42,150
purchase of the host is ignored so the

246
00:10:40,500 --> 00:10:44,790
target will just accesses the hyper

247
00:10:42,150 --> 00:10:49,319
resource and they return the result to

248
00:10:44,790 --> 00:10:52,349
the host and in this way the host

249
00:10:49,320 --> 00:10:54,300
actually gains in direct access to the

250
00:10:52,350 --> 00:10:55,950
hyper-v sauce although it is all

251
00:10:54,300 --> 00:10:59,099
although it is still running in the

252
00:10:55,950 --> 00:11:02,580
normal state low pressure mode and we

253
00:10:59,100 --> 00:11:04,920
reference at the nagas the idea of the

254
00:11:02,580 --> 00:11:07,830
Ngong attack is to break the isolation

255
00:11:04,920 --> 00:11:10,800
of the unplanned phone while misusing

256
00:11:07,830 --> 00:11:12,810
the I'm debugging features and in fact

257
00:11:10,800 --> 00:11:15,630
the nail gun can be used to craft even

258
00:11:12,810 --> 00:11:16,920
attacks for example we we implement a

259
00:11:15,630 --> 00:11:19,860
different attack scenario

260
00:11:16,920 --> 00:11:22,529
like inferring the in fearing the AES

261
00:11:19,860 --> 00:11:24,960
keys from fascism like really the secure

262
00:11:22,529 --> 00:11:27,210
configuration register and even after a

263
00:11:24,960 --> 00:11:30,660
payload execution in the neutral zone

264
00:11:27,210 --> 00:11:33,930
and also we we try to cover different

265
00:11:30,660 --> 00:11:36,630
architectures and different devices to

266
00:11:33,930 --> 00:11:39,479
verify the impact of the nail gun into

267
00:11:36,630 --> 00:11:41,939
the real-world device we also show that

268
00:11:39,480 --> 00:11:43,620
nail gun can be used to extract the

269
00:11:41,940 --> 00:11:46,140
fingerprinting match from a commercial

270
00:11:43,620 --> 00:11:48,450
mobile phone the phone we truth is a

271
00:11:46,140 --> 00:11:52,110
faraway mate7 and the fingerprint sensor

272
00:11:48,450 --> 00:11:54,420
on this phone is FPC 1020 we choose this

273
00:11:52,110 --> 00:11:56,490
one because of the menu and the drywall

274
00:11:54,420 --> 00:11:58,920
over the fingerprint sensor is publicly

275
00:11:56,490 --> 00:12:01,920
available so it will save us a lot of

276
00:11:58,920 --> 00:12:03,930
our engineering efforts in regard to the

277
00:12:01,920 --> 00:12:06,599
attack actually you just need some

278
00:12:03,930 --> 00:12:08,910
simple steps first by reverse

279
00:12:06,600 --> 00:12:10,709
engineering the phone where we can learn

280
00:12:08,910 --> 00:12:14,399
the memory or address of the fingerprint

281
00:12:10,709 --> 00:12:16,770
data inside the secure Ram after that we

282
00:12:14,399 --> 00:12:18,570
can extract those secure extractors the

283
00:12:16,770 --> 00:12:22,189
fingerprint data with the inter process

284
00:12:18,570 --> 00:12:24,180
in debugging mode of the nail gun then

285
00:12:22,190 --> 00:12:27,029
according to the publicly available

286
00:12:24,180 --> 00:12:28,650
manual we can reconstruct the finger

287
00:12:27,029 --> 00:12:31,920
when they emerge from the fingerprint

288
00:12:28,650 --> 00:12:34,110
data and this is a example of the

289
00:12:31,920 --> 00:12:36,870
extractor fingerprint data the right

290
00:12:34,110 --> 00:12:39,060
path of the image is blonde for privacy

291
00:12:36,870 --> 00:12:41,220
concern and it's a source code and the

292
00:12:39,060 --> 00:12:45,689
view that video demo of this attack can

293
00:12:41,220 --> 00:12:48,450
be found on our project website also we

294
00:12:45,690 --> 00:12:51,330
have reported our Fannie's to armed and

295
00:12:48,450 --> 00:12:52,850
relatively OMS this is a timeline for

296
00:12:51,330 --> 00:12:54,839
our disclosure

297
00:12:52,850 --> 00:12:59,279
now we are going to talk about other

298
00:12:54,839 --> 00:13:01,560
medications in qtv if we can disable all

299
00:12:59,279 --> 00:13:03,029
the tobacco syndication signals the

300
00:13:01,560 --> 00:13:05,849
heart in the process is debugging we

301
00:13:03,029 --> 00:13:10,490
another walk but can we simply disable

302
00:13:05,850 --> 00:13:14,579
this thing in us unfortunately no why

303
00:13:10,490 --> 00:13:17,670
first we have a lot of tools build on

304
00:13:14,579 --> 00:13:19,649
the debug debug features for example we

305
00:13:17,670 --> 00:13:21,930
may have a lot of program program

306
00:13:19,649 --> 00:13:24,029
analysis tools they try to use the JTAG

307
00:13:21,930 --> 00:13:26,430
interface to monitor the status of a

308
00:13:24,029 --> 00:13:28,200
processor they try to monitor the memory

309
00:13:26,430 --> 00:13:30,400
of the system they try to monitor the

310
00:13:28,200 --> 00:13:32,860
execution over the of the

311
00:13:30,400 --> 00:13:35,860
so see and if you disable the tobacco

312
00:13:32,860 --> 00:13:37,140
syndication signals then this system

313
00:13:35,860 --> 00:13:40,390
will not work

314
00:13:37,140 --> 00:13:42,069
second as we mentioned the management

315
00:13:40,390 --> 00:13:45,130
mechanism of the tobacco syndication

316
00:13:42,070 --> 00:13:47,260
signal is not publicly available assume

317
00:13:45,130 --> 00:13:49,570
that you you have get a raspberry patch

318
00:13:47,260 --> 00:13:52,600
and if you build your own LT solution

319
00:13:49,570 --> 00:13:55,180
based on that based on that hi now you

320
00:13:52,600 --> 00:13:57,490
know near contact but with all the

321
00:13:55,180 --> 00:14:01,120
manuals on your hand you have no way to

322
00:13:57,490 --> 00:14:04,270
disable tobacco syndication signals and

323
00:14:01,120 --> 00:14:06,850
also from the view of Em's yeah they

324
00:14:04,270 --> 00:14:09,819
because they use the one time program

325
00:14:06,850 --> 00:14:11,710
fuse to configure to configure the

326
00:14:09,820 --> 00:14:13,840
vehicles allocation signal so the one

327
00:14:11,710 --> 00:14:15,610
hand program future will prevent them

328
00:14:13,840 --> 00:14:17,890
from reconfiguring the tobacco

329
00:14:15,610 --> 00:14:19,570
syndication signals and also they may

330
00:14:17,890 --> 00:14:22,960
have some additional concerns about the

331
00:14:19,570 --> 00:14:25,150
cost and the maintenance so we will

332
00:14:22,960 --> 00:14:27,070
suggest a comprehensive defense across

333
00:14:25,150 --> 00:14:29,620
different roles in the armed ecosystem

334
00:14:27,070 --> 00:14:31,840
for the arm we will suggest that

335
00:14:29,620 --> 00:14:33,690
additional restriction should be applied

336
00:14:31,840 --> 00:14:36,400
through the inter process debugging mode

337
00:14:33,690 --> 00:14:38,380
specifically when we try to do the inter

338
00:14:36,400 --> 00:14:40,240
processing apart the tobacco hole the

339
00:14:38,380 --> 00:14:41,980
per each of the tobacco hosts should not

340
00:14:40,240 --> 00:14:43,780
be ignored the way you should consider

341
00:14:41,980 --> 00:14:45,940
post the provision of they should

342
00:14:43,780 --> 00:14:49,000
consider the provision of postal debug

343
00:14:45,940 --> 00:14:51,490
host and the debug target and from the

344
00:14:49,000 --> 00:14:53,340
view of SOC Landin we will suggest that

345
00:14:51,490 --> 00:14:56,080
they can refine the single management

346
00:14:53,340 --> 00:14:58,360
management mechanism and also they may

347
00:14:56,080 --> 00:14:59,830
deploy some hardware system access

348
00:14:58,360 --> 00:15:01,930
control to the debug

349
00:14:59,830 --> 00:15:05,770
component that means they can restrict

350
00:15:01,930 --> 00:15:08,079
the access to the registers also for

351
00:15:05,770 --> 00:15:09,939
OEMs and the cloud providers we will

352
00:15:08,080 --> 00:15:13,450
suggest that they can use some software

353
00:15:09,940 --> 00:15:16,900
based access control now we conclude

354
00:15:13,450 --> 00:15:18,670
here we present a study on the security

355
00:15:16,900 --> 00:15:21,699
of the hardware debugging features on am

356
00:15:18,670 --> 00:15:23,680
painful and our study shows that the

357
00:15:21,700 --> 00:15:25,690
safe components in the lakers assistance

358
00:15:23,680 --> 00:15:27,969
may become vulnerable in the demands of

359
00:15:25,690 --> 00:15:30,070
dissidence here the traditional

360
00:15:27,970 --> 00:15:32,320
debugging mode is the latest system and

361
00:15:30,070 --> 00:15:34,720
the single core system is the legacy

362
00:15:32,320 --> 00:15:36,550
system but when it comes to the inter

363
00:15:34,720 --> 00:15:39,190
process of debugging in the Monaco

364
00:15:36,550 --> 00:15:42,160
system the safe component becomes

365
00:15:39,190 --> 00:15:43,520
vulnerable so we will suggest that wait

366
00:15:42,160 --> 00:15:45,319
we have to just comprehend

367
00:15:43,520 --> 00:15:48,470
we sing on the security of all the

368
00:15:45,320 --> 00:15:50,690
legacy systems mechanisms this is a

369
00:15:48,470 --> 00:15:51,950
reference for the presentation thanks

370
00:15:50,690 --> 00:16:00,770
for your attention I'm happy to take any

371
00:15:51,950 --> 00:16:05,960
questions if folks have questions please

372
00:16:00,770 --> 00:16:08,390
line up so one question that I had is

373
00:16:05,960 --> 00:16:10,960
when you reached out to the vendor what

374
00:16:08,390 --> 00:16:13,790
was their reaction to all of this

375
00:16:10,960 --> 00:16:16,640
actually we because we talked about the

376
00:16:13,790 --> 00:16:19,520
total visa a lot of om and SOC vendors

377
00:16:16,640 --> 00:16:21,620
but the most specifically the old SOC

378
00:16:19,520 --> 00:16:23,810
vendor is responsible for the management

379
00:16:21,620 --> 00:16:27,440
so they are trying to restrict the

380
00:16:23,810 --> 00:16:30,020
access to the to the dragon components

381
00:16:27,440 --> 00:16:32,390
for example a media attack they say that

382
00:16:30,020 --> 00:16:34,790
they have some hardware component to

383
00:16:32,390 --> 00:16:36,860
restrict to define the boundary between

384
00:16:34,790 --> 00:16:39,020
the trusting and a non trust zone so

385
00:16:36,860 --> 00:16:41,830
they are prying to apply this hardware

386
00:16:39,020 --> 00:16:45,290
to restrict the access to debauch raises

387
00:16:41,830 --> 00:16:47,420
interesting and then I guess one other

388
00:16:45,290 --> 00:16:48,680
question is does that solve the supply

389
00:16:47,420 --> 00:16:50,209
chain issue because right now it seems

390
00:16:48,680 --> 00:16:52,729
like everybody in your solution has a

391
00:16:50,210 --> 00:16:54,350
responsibility in it is in their

392
00:16:52,730 --> 00:16:56,390
thinking of a different strategy then or

393
00:16:54,350 --> 00:16:58,040
it'll still exist as a problem of supply

394
00:16:56,390 --> 00:17:00,020
chain mmm

395
00:16:58,040 --> 00:17:03,050
because the management is decided by the

396
00:17:00,020 --> 00:17:05,510
OCA SOC Wendon so if the SOC Wendell has

397
00:17:03,050 --> 00:17:08,149
deployed some some defense mechanism the

398
00:17:05,510 --> 00:17:11,900
OEMs can make benefits from the front of

399
00:17:08,150 --> 00:17:13,790
the face okay if there are no other

400
00:17:11,900 --> 00:17:14,760
questions then let's thank the speaker

401
00:17:13,790 --> 00:17:20,200
thank you

402
00:17:14,760 --> 00:17:20,200
[Applause]

