1
00:00:08,610 --> 00:00:13,099
Thank You Austin and good afternoon

2
00:00:11,160 --> 00:00:15,139
everyone my name is amongst you

3
00:00:13,099 --> 00:00:17,630
Georgia Tech and I'm happy to present a

4
00:00:15,139 --> 00:00:19,669
work how do we design a dominate scheme

5
00:00:17,630 --> 00:00:21,799
for the IOT devices and this is a

6
00:00:19,670 --> 00:00:23,930
drawing work with three interns me

7
00:00:21,800 --> 00:00:26,450
Manuel returned from MSR and our

8
00:00:23,930 --> 00:00:29,599
advisors they're poor markers

9
00:00:26,450 --> 00:00:31,549
sang-ho andrey Dennis Rob and Stefan so

10
00:00:29,599 --> 00:00:33,320
we know that this large-scale IOT

11
00:00:31,550 --> 00:00:35,750
deployment has arrived with the SAR

12
00:00:33,320 --> 00:00:37,850
Industrial 4.0 smash cities supply

13
00:00:35,750 --> 00:00:40,640
chains so the things like they have

14
00:00:37,850 --> 00:00:44,230
identical IOT devices deploys across

15
00:00:40,640 --> 00:00:47,329
like a lot of places for example this

16
00:00:44,230 --> 00:00:48,860
widely deployed air quality monitor it's

17
00:00:47,329 --> 00:00:51,079
actually deployed everywhere you can

18
00:00:48,860 --> 00:00:52,820
find the same identical devices a lot of

19
00:00:51,079 --> 00:00:55,640
places around the world around States

20
00:00:52,820 --> 00:00:57,590
but once the attacker can compromise a

21
00:00:55,640 --> 00:00:59,539
single device they will be able to

22
00:00:57,590 --> 00:01:01,129
compromise everything because I is

23
00:00:59,539 --> 00:01:03,680
basically identical they share the same

24
00:01:01,129 --> 00:01:05,300
vulnerability share the same bug so are

25
00:01:03,680 --> 00:01:08,330
we really ready for these kind of

26
00:01:05,300 --> 00:01:10,429
attacks how can we recover those things

27
00:01:08,330 --> 00:01:13,070
back when even where they are actually

28
00:01:10,430 --> 00:01:14,750
rooted and without too much of manual

29
00:01:13,070 --> 00:01:17,149
invention and so let's think through

30
00:01:14,750 --> 00:01:19,700
this with a concrete example so suppose

31
00:01:17,150 --> 00:01:21,560
that your companies it has to manage all

32
00:01:19,700 --> 00:01:23,630
the smart traffic lights across say

33
00:01:21,560 --> 00:01:26,659
California and those traffic lights

34
00:01:23,630 --> 00:01:29,329
actually deploys in all the places in

35
00:01:26,659 --> 00:01:31,430
California and they are managed by a

36
00:01:29,329 --> 00:01:33,740
central hub called I would hub this

37
00:01:31,430 --> 00:01:36,619
whole station on some IOT on cloud

38
00:01:33,740 --> 00:01:38,479
services so in normal cases these

39
00:01:36,619 --> 00:01:40,880
traffic lights will be able to turn a

40
00:01:38,479 --> 00:01:42,740
traffic condition reports to the heart

41
00:01:40,880 --> 00:01:45,560
and then the hub does select some

42
00:01:42,740 --> 00:01:46,908
processing and then replies with how

43
00:01:45,560 --> 00:01:48,740
you're going to schedule the traffic

44
00:01:46,909 --> 00:01:51,290
seeing the next couple of minutes or

45
00:01:48,740 --> 00:01:53,600
hours but what if the attacker can

46
00:01:51,290 --> 00:01:56,689
explore software vulnerabilities or

47
00:01:53,600 --> 00:01:58,939
using exploit a weak password there and

48
00:01:56,689 --> 00:02:03,408
then control all over all the devices

49
00:01:58,939 --> 00:02:05,298
there and once the cash attacker get

50
00:02:03,409 --> 00:02:08,179
there it will be able to cut down all

51
00:02:05,299 --> 00:02:10,910
the services and basically all the

52
00:02:08,179 --> 00:02:12,950
traffic to the hub is lost and it's

53
00:02:10,910 --> 00:02:15,560
controlled by botnet and our only

54
00:02:12,950 --> 00:02:19,010
solution probably today is to deploy say

55
00:02:15,560 --> 00:02:21,769
a batch of our service fuel workers and

56
00:02:19,010 --> 00:02:23,418
go their driver service car and fix the

57
00:02:21,769 --> 00:02:26,120
things manually say flash the firmware

58
00:02:23,419 --> 00:02:26,599
or take down the firm tick down firmer

59
00:02:26,120 --> 00:02:29,269
and

60
00:02:26,599 --> 00:02:31,159
reload a new one so can we do a little

61
00:02:29,269 --> 00:02:34,159
bit better than this sending people

62
00:02:31,159 --> 00:02:36,700
there to fix all these cameras can we do

63
00:02:34,159 --> 00:02:39,260
something like we press one button in a

64
00:02:36,700 --> 00:02:41,030
in the administration room and then we

65
00:02:39,260 --> 00:02:43,250
suddenly get all the device back and

66
00:02:41,030 --> 00:02:45,680
recover them back into working again so

67
00:02:43,250 --> 00:02:48,829
how can we do that so this talk is about

68
00:02:45,680 --> 00:02:50,420
how do we achieve this and this is the

69
00:02:48,829 --> 00:02:52,909
concept we would want to introduce to

70
00:02:50,420 --> 00:02:55,399
the IOT world is called dominance so we

71
00:02:52,909 --> 00:02:58,099
say that this IOT harp can dominate an

72
00:02:55,400 --> 00:03:00,889
IOT devices if the harp can choose

73
00:02:58,099 --> 00:03:02,719
arbitrary code and let the device and

74
00:03:00,889 --> 00:03:05,209
force the device to run arbitrary code

75
00:03:02,719 --> 00:03:07,280
within a bounded amount of time so in

76
00:03:05,209 --> 00:03:10,069
the example that is attacked by the

77
00:03:07,280 --> 00:03:13,400
attacker the arbitrary code can be the

78
00:03:10,069 --> 00:03:15,230
patch firmware and the arbitrary the

79
00:03:13,400 --> 00:03:17,239
bounded amount of time can be saying

80
00:03:15,230 --> 00:03:19,069
within four hours or TAC discovery so

81
00:03:17,239 --> 00:03:21,049
basically we want to say that we are

82
00:03:19,069 --> 00:03:24,138
able to recover the device back to you

83
00:03:21,049 --> 00:03:25,129
within four hours of attack discovery so

84
00:03:24,139 --> 00:03:27,500
how do we do that

85
00:03:25,129 --> 00:03:29,810
under up our first adversary so recall

86
00:03:27,500 --> 00:03:31,549
that we assume a very strong adversarial

87
00:03:29,810 --> 00:03:33,739
model they can compromise your

88
00:03:31,549 --> 00:03:36,379
application hijack your communication

89
00:03:33,739 --> 00:03:38,720
and even route your form your kernel so

90
00:03:36,379 --> 00:03:40,728
the only thing we trust here is the

91
00:03:38,720 --> 00:03:43,040
hardware because there you can all reach

92
00:03:40,729 --> 00:03:45,319
the hardware from the software level so

93
00:03:43,040 --> 00:03:48,078
we are going to show you that how what

94
00:03:45,319 --> 00:03:50,750
our hardware primitives we use to build

95
00:03:48,079 --> 00:03:53,419
this dominant scheme so basically there

96
00:03:50,750 --> 00:03:55,939
are three primitives we require the

97
00:03:53,419 --> 00:03:58,699
first one is a read read read write

98
00:03:55,939 --> 00:04:01,698
latch so basically the latch blocks all

99
00:03:58,699 --> 00:04:04,040
the read and write accesses to a storage

100
00:04:01,699 --> 00:04:06,349
reason once you apply there until the

101
00:04:04,040 --> 00:04:08,179
next device reset so basically once you

102
00:04:06,349 --> 00:04:10,668
apply the latch to certain storage

103
00:04:08,180 --> 00:04:13,099
regions no further except through that

104
00:04:10,669 --> 00:04:14,959
particular regions no more and similarly

105
00:04:13,099 --> 00:04:17,358
there's a writer latch which is kind of

106
00:04:14,959 --> 00:04:20,060
weaker form of the redirect latch so

107
00:04:17,358 --> 00:04:22,039
only it blocks the write accesses but

108
00:04:20,060 --> 00:04:24,409
still allow read accesses to the storage

109
00:04:22,039 --> 00:04:26,449
arranger and the next piece of hardware

110
00:04:24,409 --> 00:04:29,419
primitive is called authenticated

111
00:04:26,449 --> 00:04:31,250
watchdog timer so we say that this this

112
00:04:29,419 --> 00:04:33,169
virtual timer is similar to a commercial

113
00:04:31,250 --> 00:04:35,840
watchdog camera which we will explain

114
00:04:33,169 --> 00:04:38,419
later but it's similar to that but

115
00:04:35,840 --> 00:04:40,489
instead of you can service the watchdog

116
00:04:38,419 --> 00:04:44,299
with writing some counts

117
00:04:40,490 --> 00:04:45,860
and publicly known passphrases this kind

118
00:04:44,300 --> 00:04:49,430
of watchdog timer has to be serviced

119
00:04:45,860 --> 00:04:51,229
with certificates issued by the hub so

120
00:04:49,430 --> 00:04:54,110
how do we get there

121
00:04:51,229 --> 00:04:56,000
with bit of trace primitives well we can

122
00:04:54,110 --> 00:04:57,440
say that we can achieve this dominance

123
00:04:56,000 --> 00:04:59,810
scheme with rigor aunties

124
00:04:57,440 --> 00:05:02,389
so the first guarantee is that whenever

125
00:04:59,810 --> 00:05:04,759
you hit a reset button the device will

126
00:05:02,389 --> 00:05:07,190
put into a trusted boot loader and the

127
00:05:04,759 --> 00:05:09,680
bootloader is unaltered we guarantee

128
00:05:07,190 --> 00:05:12,410
that is it's always an altered if is

129
00:05:09,680 --> 00:05:14,870
you've been compromised firmer and ii

130
00:05:12,410 --> 00:05:17,000
guarantee says that when this bootloader

131
00:05:14,870 --> 00:05:19,340
finishes boot loading the firmware you

132
00:05:17,000 --> 00:05:21,740
will always transfer the control to a

133
00:05:19,340 --> 00:05:23,900
firmer that is actually approved by the

134
00:05:21,740 --> 00:05:26,150
hub which means that if the bootloader

135
00:05:23,900 --> 00:05:28,669
finds that the firmware is not actually

136
00:05:26,150 --> 00:05:31,698
what the hub wants it will go to the hub

137
00:05:28,669 --> 00:05:34,580
download a patch flash firmware and put

138
00:05:31,699 --> 00:05:38,060
it and the last and most important piece

139
00:05:34,580 --> 00:05:40,068
of the scheme is that when the former is

140
00:05:38,060 --> 00:05:43,069
running and we assume that the firmware

141
00:05:40,069 --> 00:05:45,770
is untrusted and can be easily and can't

142
00:05:43,069 --> 00:05:48,800
refuse to take man from the hub the hub

143
00:05:45,770 --> 00:05:51,560
can still unconditionally force a reset

144
00:05:48,800 --> 00:05:53,150
at the device and when the reset happens

145
00:05:51,560 --> 00:05:54,860
it will go through the cider bootloader

146
00:05:53,150 --> 00:05:57,440
which is the trusted code and the code

147
00:05:54,860 --> 00:05:59,960
we can control so that's the three

148
00:05:57,440 --> 00:06:01,909
guarantees but how yeah there's also one

149
00:05:59,960 --> 00:06:03,739
thing we want to highlight in scheme

150
00:06:01,909 --> 00:06:06,380
it's like we tried to do isolation time

151
00:06:03,740 --> 00:06:08,630
so we don't want the cider code and the

152
00:06:06,380 --> 00:06:10,880
untrusted the trusted code an untrusted

153
00:06:08,630 --> 00:06:13,430
code to run in parallel we try to

154
00:06:10,880 --> 00:06:15,469
isolate strictly in time so we alternate

155
00:06:13,430 --> 00:06:17,710
the execution of trusted and untrusted

156
00:06:15,469 --> 00:06:19,789
code so we'll highlight this later but

157
00:06:17,710 --> 00:06:22,219
let's see how we achieve this through

158
00:06:19,789 --> 00:06:24,380
guarantees first so guarantee one we

159
00:06:22,219 --> 00:06:26,360
always want to reset into an unaltered

160
00:06:24,380 --> 00:06:28,099
bootloader which is controlled by us how

161
00:06:26,360 --> 00:06:29,810
do we do that we use the read/write head

162
00:06:28,099 --> 00:06:32,330
latch so the right relax

163
00:06:29,810 --> 00:06:34,669
so basically as we show you before it

164
00:06:32,330 --> 00:06:37,370
blocks the right accesses to a storage

165
00:06:34,669 --> 00:06:40,430
region so what we do is like on your

166
00:06:37,370 --> 00:06:42,469
storage either a flash or MMC we're

167
00:06:40,430 --> 00:06:44,569
going to scan what other blocks that

168
00:06:42,469 --> 00:06:47,270
your bootloader resides and we are to

169
00:06:44,569 --> 00:06:49,070
going to apply this latch right before

170
00:06:47,270 --> 00:06:52,940
we transfer the control to the untrusted

171
00:06:49,070 --> 00:06:53,909
former so before and after that even the

172
00:06:52,940 --> 00:06:56,580
attacker control

173
00:06:53,910 --> 00:06:59,460
however you want there's no way it can

174
00:06:56,580 --> 00:07:01,349
compromise the cider bootloader

175
00:06:59,460 --> 00:07:04,440
and when you do a reset it will always

176
00:07:01,350 --> 00:07:04,950
come from the untrusted sorry unaltered

177
00:07:04,440 --> 00:07:07,860
bootloader

178
00:07:04,950 --> 00:07:10,409
so the second guarantee is that we are

179
00:07:07,860 --> 00:07:13,020
going to always put in the firmware that

180
00:07:10,410 --> 00:07:14,940
is approved by the hub and for that we

181
00:07:13,020 --> 00:07:17,190
need this attestation and patching

182
00:07:14,940 --> 00:07:19,050
scheme so how and for attestation

183
00:07:17,190 --> 00:07:21,630
patching we need to communicate with the

184
00:07:19,050 --> 00:07:22,980
hub and everyone knows that if you're

185
00:07:21,630 --> 00:07:25,500
going to communicate through your open

186
00:07:22,980 --> 00:07:28,260
channel you need a attestation key so

187
00:07:25,500 --> 00:07:30,120
how do we accomplish theater key it has

188
00:07:28,260 --> 00:07:33,120
to stall from somewhere on the device

189
00:07:30,120 --> 00:07:35,970
and it can only be used by the cider

190
00:07:33,120 --> 00:07:37,710
bootloader because that's what when the

191
00:07:35,970 --> 00:07:40,710
communica the testing and patching

192
00:07:37,710 --> 00:07:43,289
happens and it cannot be learned by the

193
00:07:40,710 --> 00:07:45,000
former running because the firmware is

194
00:07:43,290 --> 00:07:45,720
untrusted and if you let the firmware

195
00:07:45,000 --> 00:07:47,880
knows it

196
00:07:45,720 --> 00:07:50,310
the attacker can knows it and it can

197
00:07:47,880 --> 00:07:52,620
fake the communication between the hub

198
00:07:50,310 --> 00:07:55,770
and a high drag this thing so how do we

199
00:07:52,620 --> 00:07:58,290
seal this attestation key is to use the

200
00:07:55,770 --> 00:08:00,870
redirect latch so recall that when you

201
00:07:58,290 --> 00:08:01,680
apply the latch there's no more accesses

202
00:08:00,870 --> 00:08:03,870
to the key

203
00:08:01,680 --> 00:08:05,910
therefore we consume the key in the

204
00:08:03,870 --> 00:08:08,520
bootloader and right after that we

205
00:08:05,910 --> 00:08:12,090
immediately apply the latch therefore no

206
00:08:08,520 --> 00:08:14,190
more read and writes to the true region

207
00:08:12,090 --> 00:08:16,440
and there's no way this compromised

208
00:08:14,190 --> 00:08:18,840
former I can learn it so another thing

209
00:08:16,440 --> 00:08:21,150
is like because we need to talk to the

210
00:08:18,840 --> 00:08:23,880
hub we inevitably need a networking

211
00:08:21,150 --> 00:08:26,010
stack so but we want to highlight that

212
00:08:23,880 --> 00:08:28,290
this networking stack is not actually

213
00:08:26,010 --> 00:08:31,140
part our TCB the reason is like

214
00:08:28,290 --> 00:08:33,510
networking stack is huge it can be a lot

215
00:08:31,140 --> 00:08:35,669
of implementations a lot of code and a

216
00:08:33,510 --> 00:08:38,819
lot of attack surface but this one not

217
00:08:35,669 --> 00:08:40,439
actually has to be trusted by us we

218
00:08:38,820 --> 00:08:42,690
basically isolate the whole networking

219
00:08:40,440 --> 00:08:45,300
stack into a recovery module and we

220
00:08:42,690 --> 00:08:47,310
treat the recovery model as a firmer so

221
00:08:45,300 --> 00:08:49,109
before we actually boot into the

222
00:08:47,310 --> 00:08:51,959
recovery say if you want to talk to the

223
00:08:49,110 --> 00:08:54,300
hub download patches we treat it as a

224
00:08:51,960 --> 00:08:56,160
former we apply all the latches the

225
00:08:54,300 --> 00:08:58,800
watchdog timer which helped later

226
00:08:56,160 --> 00:09:00,600
explained and then you do that so even

227
00:08:58,800 --> 00:09:02,219
if you compromised the networking stack

228
00:09:00,600 --> 00:09:05,520
is just like you compromised firm

229
00:09:02,220 --> 00:09:07,090
there's no further damage to us so and

230
00:09:05,520 --> 00:09:09,100
also in which

231
00:09:07,090 --> 00:09:10,690
is in our paper we say that you don't

232
00:09:09,100 --> 00:09:12,910
actually have to go to the networking

233
00:09:10,690 --> 00:09:14,890
every time you boot you only go to the

234
00:09:12,910 --> 00:09:17,530
networking basically only download the

235
00:09:14,890 --> 00:09:19,090
further the new patches if the hub

236
00:09:17,530 --> 00:09:21,010
thinks that you are compromised

237
00:09:19,090 --> 00:09:23,620
so therefore in normal cases you just

238
00:09:21,010 --> 00:09:25,480
streamline into your former it's only

239
00:09:23,620 --> 00:09:27,460
when the hub is questioning the

240
00:09:25,480 --> 00:09:29,950
integrity of the firmware it tries to

241
00:09:27,460 --> 00:09:32,170
download the patch from the hub so the

242
00:09:29,950 --> 00:09:35,560
third guarantee is that we are going to

243
00:09:32,170 --> 00:09:37,479
unconditionally reset the device if the

244
00:09:35,560 --> 00:09:39,969
hub things that the device is not

245
00:09:37,480 --> 00:09:42,550
functioning very well so basically in a

246
00:09:39,970 --> 00:09:45,100
normal case the hub can still try to

247
00:09:42,550 --> 00:09:48,490
talk to the device but the attacker can

248
00:09:45,100 --> 00:09:49,990
simply refuse to cooperate but we cider

249
00:09:48,490 --> 00:09:52,960
we want to give you the guarantee that

250
00:09:49,990 --> 00:09:54,940
even you the the attacker stopped

251
00:09:52,960 --> 00:09:56,680
responding you still a guarantee say

252
00:09:54,940 --> 00:09:59,830
then you're going to reset in terminus

253
00:09:56,680 --> 00:10:01,989
no antimatter work and this is the thing

254
00:09:59,830 --> 00:10:05,860
we want to provide with sad we cited but

255
00:10:01,990 --> 00:10:07,480
how do we do that so the first trial

256
00:10:05,860 --> 00:10:09,790
will take is to use the conventional

257
00:10:07,480 --> 00:10:13,150
watch start timer which is very popular

258
00:10:09,790 --> 00:10:16,360
among IOT devices and it was used to as

259
00:10:13,150 --> 00:10:19,660
a resilience guarantee to be different

260
00:10:16,360 --> 00:10:21,970
against blows buggy out his former that

261
00:10:19,660 --> 00:10:23,980
hands occasionally so the thing works

262
00:10:21,970 --> 00:10:26,200
like this so when the former is running

263
00:10:23,980 --> 00:10:31,450
and everything is fine you will write a

264
00:10:26,200 --> 00:10:33,580
constant value to register or or a

265
00:10:31,450 --> 00:10:36,340
memory location so as long as you

266
00:10:33,580 --> 00:10:38,560
service the water timer and the timer we

267
00:10:36,340 --> 00:10:41,470
will never go to end and never expires

268
00:10:38,560 --> 00:10:44,680
but if you hung accidentally the timer

269
00:10:41,470 --> 00:10:46,840
will expire and will reset your device

270
00:10:44,680 --> 00:10:49,630
so this is the content conversion of

271
00:10:46,840 --> 00:10:51,790
water timer but the bad thing is like

272
00:10:49,630 --> 00:10:53,620
the attacker can also know this and once

273
00:10:51,790 --> 00:10:56,709
you guess in the firmware it can

274
00:10:53,620 --> 00:10:59,470
simulate how you service the water timer

275
00:10:56,710 --> 00:11:01,480
and do this for example the attacker can

276
00:10:59,470 --> 00:11:03,420
still write the same value to the

277
00:11:01,480 --> 00:11:05,950
register or to the memory location and

278
00:11:03,420 --> 00:11:07,630
by doing that it basically keeps the

279
00:11:05,950 --> 00:11:10,090
device forever as long as you can

280
00:11:07,630 --> 00:11:12,730
service it so that the solution is to

281
00:11:10,090 --> 00:11:15,010
use our authenticated water timer so

282
00:11:12,730 --> 00:11:16,990
instead of writing simple things to the

283
00:11:15,010 --> 00:11:20,120
register or memory you have to fetch a

284
00:11:16,990 --> 00:11:21,470
ticket or certificate from the hub

285
00:11:20,120 --> 00:11:23,810
so basically what you do is you

286
00:11:21,470 --> 00:11:26,810
generally announce and ask the hub to

287
00:11:23,810 --> 00:11:29,300
sign the nonce for you and then you

288
00:11:26,810 --> 00:11:31,849
serve the design certificate to the

289
00:11:29,300 --> 00:11:34,849
firmware and then by doing so if you are

290
00:11:31,850 --> 00:11:36,890
running and the hub is satisfied you you

291
00:11:34,850 --> 00:11:42,320
you are allowed to be continued to run

292
00:11:36,890 --> 00:11:45,199
and if in any case that you are rooted

293
00:11:42,320 --> 00:11:47,480
and the half finds out that you are not

294
00:11:45,200 --> 00:11:49,790
the firmware is not what the hub wants

295
00:11:47,480 --> 00:11:51,589
we will stop issuing the tickets and the

296
00:11:49,790 --> 00:11:53,540
timer will expire and we sell your

297
00:11:51,589 --> 00:11:55,370
device and we'll call that when you

298
00:11:53,540 --> 00:11:57,260
reset the device we will always go to

299
00:11:55,370 --> 00:11:59,060
the side there trusted boot loader and

300
00:11:57,260 --> 00:12:02,000
then in the bootloader you can download

301
00:11:59,060 --> 00:12:03,709
the firmware and do the patches so this

302
00:12:02,000 --> 00:12:05,720
is how we achieve the third guarantee

303
00:12:03,710 --> 00:12:08,660
which means that the harp can always

304
00:12:05,720 --> 00:12:11,210
unconditionally force the device to

305
00:12:08,660 --> 00:12:14,060
reset so as long as the hub stopped

306
00:12:11,210 --> 00:12:16,279
issuing you the certificate so we

307
00:12:14,060 --> 00:12:18,439
implement this is a quite new concept

308
00:12:16,279 --> 00:12:19,970
and there is no commodity hardware for

309
00:12:18,440 --> 00:12:22,130
do this so there are two way to

310
00:12:19,970 --> 00:12:24,980
implement it we show in a paper one is

311
00:12:22,130 --> 00:12:28,610
to use an external water our external

312
00:12:24,980 --> 00:12:30,620
are much microcontroller so it's you can

313
00:12:28,610 --> 00:12:32,959
obtain them in very low cost probably

314
00:12:30,620 --> 00:12:35,060
less than one dollar and write eight the

315
00:12:32,959 --> 00:12:37,640
program to the plug into the serial port

316
00:12:35,060 --> 00:12:39,500
and your work also you can repurpose the

317
00:12:37,640 --> 00:12:43,010
existing hardware if you have trust zone

318
00:12:39,500 --> 00:12:45,050
or this abroad comes your physical timer

319
00:12:43,010 --> 00:12:47,360
or you have memory protection unit you

320
00:12:45,050 --> 00:12:49,550
can reprogram repurpose this existing

321
00:12:47,360 --> 00:12:51,589
hardware to make it authentic a watch

322
00:12:49,550 --> 00:12:54,829
the timer so for details please read out

323
00:12:51,589 --> 00:12:58,940
paper for this and we prototype cider

324
00:12:54,830 --> 00:12:59,440
into three boards solid round verse 3 PI

325
00:12:58,940 --> 00:13:02,630
and

326
00:12:59,440 --> 00:13:05,870
stm32 representing high mid and low end

327
00:13:02,630 --> 00:13:08,420
boards based on the process so basically

328
00:13:05,870 --> 00:13:10,010
the the how we approach rapid is

329
00:13:08,420 --> 00:13:11,750
basically read through their manuals and

330
00:13:10,010 --> 00:13:14,290
find out what are the things that

331
00:13:11,750 --> 00:13:16,760
provide the latches or provide the

332
00:13:14,290 --> 00:13:18,890
authenticator what are the primitives in

333
00:13:16,760 --> 00:13:21,350
in a menu we can use to construct the

334
00:13:18,890 --> 00:13:23,120
latch or the watchdog timer and we found

335
00:13:21,350 --> 00:13:25,310
that most of them are quite readily

336
00:13:23,120 --> 00:13:27,140
available in those pores you just need

337
00:13:25,310 --> 00:13:30,319
to find the right thing and use them as

338
00:13:27,140 --> 00:13:32,839
the glaciers all the warts alzheimer so

339
00:13:30,320 --> 00:13:34,010
in case that they are not readily there

340
00:13:32,839 --> 00:13:36,380
or you want to

341
00:13:34,010 --> 00:13:39,080
you don't want to repurpose the hardware

342
00:13:36,380 --> 00:13:41,810
you can always obtain it within a very

343
00:13:39,080 --> 00:13:46,040
low cost by doing obtaining an external

344
00:13:41,810 --> 00:13:50,270
chip so we um so here's our evaluation

345
00:13:46,040 --> 00:13:52,370
so we try to we try we programmed cider

346
00:13:50,270 --> 00:13:54,199
and a bunch of boards and when we run

347
00:13:52,370 --> 00:13:56,060
the firmware that is commonly run on

348
00:13:54,200 --> 00:13:58,460
those pores and we found that there's no

349
00:13:56,060 --> 00:14:03,109
compatibility if you cider works pretty

350
00:13:58,460 --> 00:14:07,910
well with those firmer and evaluation

351
00:14:03,110 --> 00:14:10,370
shows that for boot time in most cases

352
00:14:07,910 --> 00:14:12,880
there's a little bit delay because you

353
00:14:10,370 --> 00:14:15,740
need to do this extra attest to extra

354
00:14:12,880 --> 00:14:17,420
cryptography things to verify whether

355
00:14:15,740 --> 00:14:19,880
the firmware is actually the thing you

356
00:14:17,420 --> 00:14:21,890
want or not and in a very worst case

357
00:14:19,880 --> 00:14:24,830
that you need to go to the hub and get a

358
00:14:21,890 --> 00:14:27,800
the patch then the time actually depends

359
00:14:24,830 --> 00:14:29,600
on how large the path the patch is so in

360
00:14:27,800 --> 00:14:31,910
terms of run time delay is really

361
00:14:29,600 --> 00:14:33,440
negligible the delay is caused by when

362
00:14:31,910 --> 00:14:35,060
the firmer is wrong you need to pee

363
00:14:33,440 --> 00:14:37,070
really go to the hub and get a

364
00:14:35,060 --> 00:14:40,459
certificate to feed the watchdog timer

365
00:14:37,070 --> 00:14:41,960
but as we see that the the overhead is

366
00:14:40,460 --> 00:14:44,750
really minimum it because this only

367
00:14:41,960 --> 00:14:47,930
happens in practice once for hours or

368
00:14:44,750 --> 00:14:51,020
even per days so it's really minimum and

369
00:14:47,930 --> 00:14:52,310
there's also some discussion we are and

370
00:14:51,020 --> 00:14:55,400
some thoughts we tried to put in the

371
00:14:52,310 --> 00:14:57,229
paper so we we try to argue that we are

372
00:14:55,400 --> 00:14:59,780
providing a solution which is not only

373
00:14:57,230 --> 00:15:02,060
minimum in software sizes but you also

374
00:14:59,780 --> 00:15:04,880
want to require a minimum hotbird

375
00:15:02,060 --> 00:15:07,250
trusted computing base so and basically

376
00:15:04,880 --> 00:15:09,439
we run we have two thoughts why it's

377
00:15:07,250 --> 00:15:12,170
wrong time isolation and the second is

378
00:15:09,440 --> 00:15:15,620
isolating time so we can easily program

379
00:15:12,170 --> 00:15:17,900
cider into s3x for example trust them

380
00:15:15,620 --> 00:15:20,180
everything just put it there and that

381
00:15:17,900 --> 00:15:21,980
will be and let the cider run together

382
00:15:20,180 --> 00:15:24,199
with the firmware and that's what we

383
00:15:21,980 --> 00:15:26,480
call run time isolation but in order to

384
00:15:24,200 --> 00:15:28,610
do that you need a lot of hardware

385
00:15:26,480 --> 00:15:31,160
things that you need to multi-threading

386
00:15:28,610 --> 00:15:33,530
support you need the string privilege

387
00:15:31,160 --> 00:15:35,689
separation which we learn from day one

388
00:15:33,530 --> 00:15:38,569
as a social known and we also need this

389
00:15:35,690 --> 00:15:40,190
page tables this memory management units

390
00:15:38,570 --> 00:15:43,760
and we need to get the interaction

391
00:15:40,190 --> 00:15:45,830
context which is done correctly so these

392
00:15:43,760 --> 00:15:47,020
things are if you still remember they

393
00:15:45,830 --> 00:15:48,700
one session one

394
00:15:47,020 --> 00:15:51,370
so these thing are subjective side

395
00:15:48,700 --> 00:15:54,700
channels spectra attacks and many types

396
00:15:51,370 --> 00:15:57,160
of attacks on the hardware but for us we

397
00:15:54,700 --> 00:15:59,770
try to do isolation time we don't need

398
00:15:57,160 --> 00:16:02,530
those complicated Hardware stuff all we

399
00:15:59,770 --> 00:16:05,590
need is some latches very simple concept

400
00:16:02,530 --> 00:16:07,720
and authenticated watch our timer which

401
00:16:05,590 --> 00:16:10,300
you can program in a very small micro

402
00:16:07,720 --> 00:16:12,850
control unit and simplicity is really a

403
00:16:10,300 --> 00:16:16,359
key to the whole scheme and it's not

404
00:16:12,850 --> 00:16:19,210
it's not immune to those speculative

405
00:16:16,360 --> 00:16:21,490
execution side channel leaks and it's a

406
00:16:19,210 --> 00:16:23,710
perfect fit for providing a security

407
00:16:21,490 --> 00:16:25,870
cornerstone for outtie so you can

408
00:16:23,710 --> 00:16:28,360
program your former however you want you

409
00:16:25,870 --> 00:16:30,580
can compromise however you want but

410
00:16:28,360 --> 00:16:32,920
there's always kana stone you can go

411
00:16:30,580 --> 00:16:35,080
back to Wednesday's compromise so in

412
00:16:32,920 --> 00:16:36,790
conclusion it's a we think that

413
00:16:35,080 --> 00:16:38,350
dominance is very necessary in the

414
00:16:36,790 --> 00:16:42,010
presence of large scale out he

415
00:16:38,350 --> 00:16:44,290
deployments we needed a scheme to return

416
00:16:42,010 --> 00:16:46,780
those thousands of identical devices to

417
00:16:44,290 --> 00:16:48,640
back to their original mission and it's

418
00:16:46,780 --> 00:16:52,630
a practical scheme that enforces

419
00:16:48,640 --> 00:16:54,400
dominance decider is a practical scheme

420
00:16:52,630 --> 00:16:57,070
that enforces dominant sandals our

421
00:16:54,400 --> 00:17:00,250
devices and they achieve this with three

422
00:16:57,070 --> 00:17:02,470
guarantees booting decider and former

423
00:17:00,250 --> 00:17:04,630
attestation patching and unconditional

424
00:17:02,470 --> 00:17:06,970
reset and the evaluation shows that

425
00:17:04,630 --> 00:17:09,540
cider is compatible with a wide range of

426
00:17:06,970 --> 00:17:12,490
balls and former and does introduce

427
00:17:09,540 --> 00:17:14,109
negligible overhead and with that I

428
00:17:12,490 --> 00:17:18,599
conclude a talk and thank you for

429
00:17:14,109 --> 00:17:18,599
attention I'm happy to take questions

430
00:17:19,660 --> 00:17:26,630
okay so we have time for a few questions

431
00:17:22,990 --> 00:17:29,780
and let me start how about you Niall of

432
00:17:26,630 --> 00:17:31,940
service attacks yeah question so yeah

433
00:17:29,780 --> 00:17:34,010
many people will think that this will

434
00:17:31,940 --> 00:17:37,070
actually give you an T now service

435
00:17:34,010 --> 00:17:40,720
attacks so I have a few backup slides

436
00:17:37,070 --> 00:17:43,280
let me just pull this up here yeah so

437
00:17:40,720 --> 00:17:44,960
yeah it's a very common question like

438
00:17:43,280 --> 00:17:47,030
people ask what if the networking stack

439
00:17:44,960 --> 00:17:49,190
gets hacked well the worst case as you

440
00:17:47,030 --> 00:17:51,950
said is a denial of service attacks you

441
00:17:49,190 --> 00:17:55,010
just put into this endless loop with

442
00:17:51,950 --> 00:17:57,710
eNOS and the the the common practice and

443
00:17:55,010 --> 00:17:59,690
also what we propose to do is for this

444
00:17:57,710 --> 00:18:02,060
kind in our service attacks regardless

445
00:17:59,690 --> 00:18:03,910
of whether you have cider or not it will

446
00:18:02,060 --> 00:18:07,669
happen because that's against your

447
00:18:03,910 --> 00:18:09,740
out--he devices and for those cases you

448
00:18:07,670 --> 00:18:14,240
have to ask this I internet service

449
00:18:09,740 --> 00:18:16,490
providers to temporary block those those

450
00:18:14,240 --> 00:18:18,260
attacking traffic and until you come up

451
00:18:16,490 --> 00:18:20,840
with a patch and patch everything there

452
00:18:18,260 --> 00:18:23,690
so the thing is like we don't make

453
00:18:20,840 --> 00:18:26,510
things worse so if you if you're subject

454
00:18:23,690 --> 00:18:28,790
to it in our service attacks so that's

455
00:18:26,510 --> 00:18:32,540
that's that's what you are going to

456
00:18:28,790 --> 00:18:35,300
subject you initially and also we don't

457
00:18:32,540 --> 00:18:38,750
actually make him more vulnerable in the

458
00:18:35,300 --> 00:18:42,169
sense that we don't go to random pause

459
00:18:38,750 --> 00:18:44,690
or random IP addresses or random domains

460
00:18:42,170 --> 00:18:46,700
to ask for device we only talk to the

461
00:18:44,690 --> 00:18:49,010
heart which is most likely the IP

462
00:18:46,700 --> 00:18:52,670
address is hard-coded there and we only

463
00:18:49,010 --> 00:18:55,030
enforce the connection we only actually

464
00:18:52,670 --> 00:18:57,380
initiate the connection so instead of

465
00:18:55,030 --> 00:18:59,330
passively open your port and breathing

466
00:18:57,380 --> 00:19:02,630
for commands and the very last thing is

467
00:18:59,330 --> 00:19:06,949
like it's an internet service Internet

468
00:19:02,630 --> 00:19:08,540
of Things and if you have denial of

469
00:19:06,950 --> 00:19:13,520
service your original functionality

470
00:19:08,540 --> 00:19:15,920
wouldn't work as well so yeah hi

471
00:19:13,520 --> 00:19:18,379
thanks for your talk have you considered

472
00:19:15,920 --> 00:19:20,810
that since IOT devices are fundamentally

473
00:19:18,380 --> 00:19:23,960
like low-power devices power saving

474
00:19:20,810 --> 00:19:27,310
features like one of them for example

475
00:19:23,960 --> 00:19:29,270
would be to be able to shut off the emmc

476
00:19:27,310 --> 00:19:30,629
independently of all the others and

477
00:19:29,270 --> 00:19:32,250
therefore if you could as

478
00:19:30,630 --> 00:19:34,140
Decker could power cycle it you could

479
00:19:32,250 --> 00:19:38,130
reset the latches have you considered

480
00:19:34,140 --> 00:19:42,990
that yeah we we actually consider this

481
00:19:38,130 --> 00:19:46,620
we actually find that by by programming

482
00:19:42,990 --> 00:19:48,900
the pings to certain things so I mean I

483
00:19:46,620 --> 00:19:51,419
mean it depends on how you wire the emmc

484
00:19:48,900 --> 00:19:54,630
device into the board so if you wire it

485
00:19:51,420 --> 00:19:57,840
correctly it will you have to reset the

486
00:19:54,630 --> 00:20:00,030
whole devices for this and yes I think

487
00:19:57,840 --> 00:20:01,889
what you said is could be a bad a point

488
00:20:00,030 --> 00:20:04,200
that if you periodically shut down the

489
00:20:01,890 --> 00:20:06,780
MMC and then restarted whether they're

490
00:20:04,200 --> 00:20:08,760
latches are still there so if the MMC

491
00:20:06,780 --> 00:20:12,120
latches are not there probably you need

492
00:20:08,760 --> 00:20:14,730
to plug into another MC use which you

493
00:20:12,120 --> 00:20:16,909
can program in like one less than one

494
00:20:14,730 --> 00:20:19,920
order and then plug it there with the

495
00:20:16,910 --> 00:20:22,320
extensible UART or serial ports and then

496
00:20:19,920 --> 00:20:24,750
do the protection there so yeah so it's

497
00:20:22,320 --> 00:20:26,730
really like implementation dependent and

498
00:20:24,750 --> 00:20:28,920
vendor-specific I have you like like

499
00:20:26,730 --> 00:20:30,240
given major warning signs like you

500
00:20:28,920 --> 00:20:34,710
should implement it this way

501
00:20:30,240 --> 00:20:37,410
oh wow I won't I won't have to put the

502
00:20:34,710 --> 00:20:39,420
major one inside I am I mean as I said

503
00:20:37,410 --> 00:20:42,360
this is a really a vendor specific thing

504
00:20:39,420 --> 00:20:44,100
so it's I'm not so sure like whether it

505
00:20:42,360 --> 00:20:45,510
we should really broadcasting that you

506
00:20:44,100 --> 00:20:48,149
should increment in this way or that way

507
00:20:45,510 --> 00:20:52,320
I think it's it's up to the user to

508
00:20:48,150 --> 00:20:53,760
decide on this okay thank you okay with

509
00:20:52,320 --> 00:20:55,850
this I would like to thank mang again

510
00:20:53,760 --> 00:20:59,060
thank you

511
00:20:55,850 --> 00:20:59,060
[Applause]

