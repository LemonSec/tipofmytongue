1
00:00:09,380 --> 00:00:15,690
all right so thank you very much for

2
00:00:12,240 --> 00:00:19,590
attending my talk so in this talk I'm

3
00:00:15,690 --> 00:00:21,150
going to discuss how we actually empower

4
00:00:19,590 --> 00:00:22,619
reverse engineering using the latest

5
00:00:21,150 --> 00:00:23,610
techniques in machine learning as well

6
00:00:22,619 --> 00:00:26,939
as data mining

7
00:00:23,610 --> 00:00:29,130
so the overall process the overall

8
00:00:26,939 --> 00:00:31,320
process that we try to optimize about

9
00:00:29,130 --> 00:00:33,660
binary and it's about binary analysis or

10
00:00:31,320 --> 00:00:35,640
program message so we start with

11
00:00:33,660 --> 00:00:38,489
typically we start with a binary file

12
00:00:35,640 --> 00:00:41,070
which is the sequence of 0 1 0 0 1 and

13
00:00:38,489 --> 00:00:43,739
then we have a disassembler we can get a

14
00:00:41,070 --> 00:00:46,800
list of assembly functions and each

15
00:00:43,739 --> 00:00:48,959
function basically is a list of assembly

16
00:00:46,800 --> 00:00:51,899
instructions and then here is our

17
00:00:48,960 --> 00:00:55,260
reverse engineering fellow and he or she

18
00:00:51,899 --> 00:00:57,649
will try to do a manual Narus it has to

19
00:00:55,260 --> 00:01:00,059
take a look at a functionality or high

20
00:00:57,649 --> 00:01:02,339
abstract high-level logics of the

21
00:01:00,059 --> 00:01:04,830
assembly functions and depending on what

22
00:01:02,339 --> 00:01:07,289
kind of ties such as the malware Nancy

23
00:01:04,830 --> 00:01:08,760
or one durability and Nancy so so they

24
00:01:07,290 --> 00:01:10,800
are different they have different

25
00:01:08,760 --> 00:01:13,710
purpose here but the overall process

26
00:01:10,800 --> 00:01:16,140
this is the over simplified process of

27
00:01:13,710 --> 00:01:18,929
the workflow the reverse engineer buffer

28
00:01:16,140 --> 00:01:21,210
that would try to optimize of course we

29
00:01:18,930 --> 00:01:23,730
have a different kind of techniques that

30
00:01:21,210 --> 00:01:26,639
here and there helping out this process

31
00:01:23,730 --> 00:01:29,100
as well but we really focus on the last

32
00:01:26,640 --> 00:01:32,340
steps here for reverse engineering by

33
00:01:29,100 --> 00:01:35,899
trying to answer two specific questions

34
00:01:32,340 --> 00:01:38,520
so when a reverse John you try to

35
00:01:35,900 --> 00:01:40,260
understand a specific functions where we

36
00:01:38,520 --> 00:01:42,600
try to address the information needs

37
00:01:40,260 --> 00:01:45,450
information needs of the reverse

38
00:01:42,600 --> 00:01:48,630
engineering task is this something that

39
00:01:45,450 --> 00:01:51,570
has been analyzed before by himself or

40
00:01:48,630 --> 00:01:55,020
herself or is something that has been

41
00:01:51,570 --> 00:01:57,690
analyzed just couple seconds ago by his

42
00:01:55,020 --> 00:02:00,119
or her teammates or interests and no

43
00:01:57,690 --> 00:02:01,950
library functions or variation of the

44
00:02:00,120 --> 00:02:04,680
known library functions we try to

45
00:02:01,950 --> 00:02:07,440
address this information needs their

46
00:02:04,680 --> 00:02:10,979
information needs by using an info group

47
00:02:07,440 --> 00:02:13,500
information retrieval approach so we

48
00:02:10,979 --> 00:02:16,140
develop an open source of assembly

49
00:02:13,500 --> 00:02:19,530
called chrome search engine camino and

50
00:02:16,140 --> 00:02:22,170
so suppose it's like a centralized

51
00:02:19,530 --> 00:02:24,510
repository of assembly lang

52
00:02:22,170 --> 00:02:26,700
courage that people can build different

53
00:02:24,510 --> 00:02:28,709
repositories just like on github instead

54
00:02:26,700 --> 00:02:31,019
of a repository of source code the

55
00:02:28,709 --> 00:02:32,250
Creole repository of assembly code

56
00:02:31,020 --> 00:02:35,130
depending on the task that they are

57
00:02:32,250 --> 00:02:38,099
working on and then reverse engineers is

58
00:02:35,130 --> 00:02:42,870
a team or within organizations so they

59
00:02:38,099 --> 00:02:45,869
can index the assembly functions they're

60
00:02:42,870 --> 00:02:48,810
analyzing and they can search for the

61
00:02:45,870 --> 00:02:51,540
chromes as well so by using this

62
00:02:48,810 --> 00:02:53,489
high-level system we try to address the

63
00:02:51,540 --> 00:02:56,480
information needs for the reverse

64
00:02:53,489 --> 00:02:59,239
engineering but when we talk about

65
00:02:56,480 --> 00:03:03,329
information retrieval we need to define

66
00:02:59,239 --> 00:03:06,360
what is exactly exactly similarity right

67
00:03:03,330 --> 00:03:09,200
what is exactly is a chrome so in the

68
00:03:06,360 --> 00:03:12,480
literature so in the literary Church of

69
00:03:09,200 --> 00:03:14,700
assembly assembly language chrome search

70
00:03:12,480 --> 00:03:16,140
so there are typically three different

71
00:03:14,700 --> 00:03:18,238
type of Chrome's so the first type of

72
00:03:16,140 --> 00:03:20,458
chrome is exact room right so there's

73
00:03:18,239 --> 00:03:22,560
nothing fancy here they're exactly the

74
00:03:20,459 --> 00:03:25,019
same so to find this kind of chrome we

75
00:03:22,560 --> 00:03:27,359
can simply do exact hashing right and

76
00:03:25,019 --> 00:03:29,880
the second type of chrome is that is

77
00:03:27,359 --> 00:03:33,570
costing tactically a quick Bolin so

78
00:03:29,880 --> 00:03:34,890
these two pieces of assembly code looks

79
00:03:33,570 --> 00:03:37,650
are different but they are actually

80
00:03:34,890 --> 00:03:39,899
corresponding to the same logics but may

81
00:03:37,650 --> 00:03:41,430
be due to different compilers or

82
00:03:39,900 --> 00:03:44,340
different versions of the compiler they

83
00:03:41,430 --> 00:03:46,170
use different registers or different

84
00:03:44,340 --> 00:03:48,780
offsets or on the stack to represent

85
00:03:46,170 --> 00:03:51,328
different variable so after normalizing

86
00:03:48,780 --> 00:03:53,370
the assembly code or normalizing

87
00:03:51,329 --> 00:03:56,790
instructions and variable into the

88
00:03:53,370 --> 00:03:59,340
abstract high-level token representation

89
00:03:56,790 --> 00:04:01,590
they are actually the same just like two

90
00:03:59,340 --> 00:04:03,840
minifigures here is that that the

91
00:04:01,590 --> 00:04:05,489
picture is taken from different angle

92
00:04:03,840 --> 00:04:07,319
that's why they are different but if we

93
00:04:05,489 --> 00:04:10,500
normalize the camera they would be the

94
00:04:07,319 --> 00:04:12,869
same so this kind of cross that is not

95
00:04:10,500 --> 00:04:14,069
difficult to handle as well and the

96
00:04:12,870 --> 00:04:16,410
third type of chrome is the minor

97
00:04:14,069 --> 00:04:18,589
modification so for minor modification

98
00:04:16,410 --> 00:04:21,299
means that we allow a certain degree of

99
00:04:18,589 --> 00:04:24,419
update or change to the come out to the

100
00:04:21,298 --> 00:04:27,239
assembly code so this this can be done

101
00:04:24,419 --> 00:04:30,859
through any like firstly firstly hashing

102
00:04:27,240 --> 00:04:34,039
or locality sensitive hashing algorithms

103
00:04:30,860 --> 00:04:35,440
for nearest neighbor cool search but

104
00:04:34,039 --> 00:04:37,719
much

105
00:04:35,440 --> 00:04:40,030
what is more challenge is that we also

106
00:04:37,720 --> 00:04:42,220
have different kind of Apophis occasion

107
00:04:40,030 --> 00:04:45,429
as well as optimization techniques that

108
00:04:42,220 --> 00:04:47,830
make the same assembly functions that

109
00:04:45,430 --> 00:04:49,390
look completely different so for example

110
00:04:47,830 --> 00:04:52,479
in this case suppose this the

111
00:04:49,390 --> 00:04:56,200
minifigures that on the left hand side

112
00:04:52,480 --> 00:04:58,960
is original ones we can break it is a

113
00:04:56,200 --> 00:05:01,630
different prognosis and even inject

114
00:04:58,960 --> 00:05:03,549
different noise to it so the image here

115
00:05:01,630 --> 00:05:06,250
looks very different so how does this

116
00:05:03,550 --> 00:05:09,910
translate to a real-life scenario so

117
00:05:06,250 --> 00:05:11,890
here we have four different assembly

118
00:05:09,910 --> 00:05:14,530
functions they are actually come from

119
00:05:11,890 --> 00:05:17,740
the sock the same source code so the one

120
00:05:14,530 --> 00:05:19,809
on the left is the original one that

121
00:05:17,740 --> 00:05:22,290
without any optimization and then the

122
00:05:19,810 --> 00:05:25,030
second one is that with the all-day

123
00:05:22,290 --> 00:05:27,910
optimizations turns on and the third one

124
00:05:25,030 --> 00:05:31,330
is obfuscated by the control flow graph

125
00:05:27,910 --> 00:05:32,860
F a flattening techniques in the OEM so

126
00:05:31,330 --> 00:05:36,609
all the basic blocks are break into

127
00:05:32,860 --> 00:05:39,760
different parts and and duplicated and

128
00:05:36,610 --> 00:05:41,770
arranged by a big switch gigantic switch

129
00:05:39,760 --> 00:05:45,280
and the last one is above asked aided by

130
00:05:41,770 --> 00:05:48,370
the abacus control so because we're

131
00:05:45,280 --> 00:05:50,020
trying to do a search engines right to

132
00:05:48,370 --> 00:05:52,030
find this kind of Chrome we can one

133
00:05:50,020 --> 00:05:53,680
possible way is that to do dynamic and

134
00:05:52,030 --> 00:05:56,229
there is e right we can run the program

135
00:05:53,680 --> 00:05:57,910
because they're the same thing so should

136
00:05:56,230 --> 00:06:00,790
expect the same input and output

137
00:05:57,910 --> 00:06:03,910
behavior but as a search engine we

138
00:06:00,790 --> 00:06:06,970
cannot really able to afford the luxury

139
00:06:03,910 --> 00:06:08,740
of time dynamic and nursey so we don't

140
00:06:06,970 --> 00:06:12,310
want the user to wake for let's say 10

141
00:06:08,740 --> 00:06:15,760
minutes - for the query - to dynamically

142
00:06:12,310 --> 00:06:18,940
execute it or symbolically execute it so

143
00:06:15,760 --> 00:06:22,780
I will look into existing literature or

144
00:06:18,940 --> 00:06:25,180
existing methods to static remodel the

145
00:06:22,780 --> 00:06:28,780
assembly code so we identify two main

146
00:06:25,180 --> 00:06:31,360
challenge or problems so typically when

147
00:06:28,780 --> 00:06:34,659
we try to model assembly code the

148
00:06:31,360 --> 00:06:39,250
relationships among the tokens that we

149
00:06:34,660 --> 00:06:42,520
think as Enrico is mostly and glad so

150
00:06:39,250 --> 00:06:44,680
for example we have XX m m0 register

151
00:06:42,520 --> 00:06:46,719
versus the artist reading the streaming

152
00:06:44,680 --> 00:06:48,349
operations they're not exactly the same

153
00:06:46,720 --> 00:06:51,379
but I mean they

154
00:06:48,349 --> 00:06:53,748
on high-level day they focus on same as

155
00:06:51,379 --> 00:06:56,629
back of the assembly instructions or F

156
00:06:53,749 --> 00:06:59,330
curves and I versus F opens they're

157
00:06:56,629 --> 00:07:01,969
different but the can occurs bonding

158
00:06:59,330 --> 00:07:04,909
both to the file operations and string

159
00:07:01,969 --> 00:07:07,248
compare men compare string coffee and

160
00:07:04,909 --> 00:07:09,830
memory copy sometimes they are swappable

161
00:07:07,249 --> 00:07:12,110
right and the second challenge the

162
00:07:09,830 --> 00:07:16,008
second problem is that it's about how we

163
00:07:12,110 --> 00:07:19,039
wait this information so as experience

164
00:07:16,009 --> 00:07:22,099
reverse engineer you may not actually

165
00:07:19,039 --> 00:07:23,688
with every single line of assembly like

166
00:07:22,099 --> 00:07:25,430
assembly instructions when you try to

167
00:07:23,689 --> 00:07:27,080
analyze something right so reverse

168
00:07:25,430 --> 00:07:29,930
engineer look for something interesting

169
00:07:27,080 --> 00:07:31,748
so we put higher weight on something

170
00:07:29,930 --> 00:07:34,459
that we never saw before they violate

171
00:07:31,749 --> 00:07:37,039
what we commonly know what we can really

172
00:07:34,459 --> 00:07:37,459
know and regular rang them with repeat

173
00:07:37,039 --> 00:07:40,068
the better

174
00:07:37,459 --> 00:07:41,990
repeat the patterns and now interesting

175
00:07:40,069 --> 00:07:44,469
so we want to put a lower way on that so

176
00:07:41,990 --> 00:07:47,360
these two problems actually quite

177
00:07:44,469 --> 00:07:49,789
similar to the problems in natural

178
00:07:47,360 --> 00:07:50,240
language processing or using machine

179
00:07:49,789 --> 00:07:54,438
learning

180
00:07:50,240 --> 00:07:57,019
so actually what we're trying to do is

181
00:07:54,439 --> 00:07:59,209
that well we try to build a a new

182
00:07:57,019 --> 00:08:01,490
network to help us to address these two

183
00:07:59,209 --> 00:08:03,680
challenge but Before we jump into how we

184
00:08:01,490 --> 00:08:06,050
build this new network for assembly

185
00:08:03,680 --> 00:08:08,749
language I want to talk about how I

186
00:08:06,050 --> 00:08:10,699
learned learn English as most of you can

187
00:08:08,749 --> 00:08:12,289
already tell so I'm not a native English

188
00:08:10,699 --> 00:08:15,769
speaker so my first language is not

189
00:08:12,289 --> 00:08:17,839
English the way that I was the way that

190
00:08:15,769 --> 00:08:19,669
I learned English is that it's quite

191
00:08:17,839 --> 00:08:21,769
brutal we do a lot of multiple-choice

192
00:08:19,669 --> 00:08:23,568
correction in exams they're trying to

193
00:08:21,769 --> 00:08:25,729
complete a sentence with different

194
00:08:23,569 --> 00:08:29,689
options right so to find the right word

195
00:08:25,729 --> 00:08:31,669
fit fit into the context or the thus

196
00:08:29,689 --> 00:08:34,760
impacts of the sentence right so this is

197
00:08:31,669 --> 00:08:37,698
how I did before and it turns out okay

198
00:08:34,760 --> 00:08:40,549
so I can speak English right now and ten

199
00:08:37,698 --> 00:08:43,848
years later people find out that this is

200
00:08:40,549 --> 00:08:48,040
a fantastic way to change to train and

201
00:08:43,849 --> 00:08:48,040
you never to learn human language so

202
00:08:48,100 --> 00:08:54,230
given a new network so we asked a new

203
00:08:50,810 --> 00:08:56,660
neighbor to solve millions of this kind

204
00:08:54,230 --> 00:08:58,730
of multiple-choice questions following

205
00:08:56,660 --> 00:09:00,140
the same way so in this case first we

206
00:08:58,730 --> 00:09:04,220
need to have the questions

207
00:09:00,140 --> 00:09:06,560
right so let's say if I have some text a

208
00:09:04,220 --> 00:09:09,410
sequence of text that cat said on a map

209
00:09:06,560 --> 00:09:11,239
so we apply a sliding window on the text

210
00:09:09,410 --> 00:09:13,069
and ask them your network to predict

211
00:09:11,240 --> 00:09:15,050
what is in the middle which is said

212
00:09:13,070 --> 00:09:18,560
given the context so you can see here

213
00:09:15,050 --> 00:09:20,479
the input is the cat on and the output

214
00:09:18,560 --> 00:09:22,609
is set right so we warned you never to

215
00:09:20,480 --> 00:09:25,490
make these kind of predictions over all

216
00:09:22,610 --> 00:09:28,640
the questions and this approach turn out

217
00:09:25,490 --> 00:09:30,590
to be great we can learn actually very

218
00:09:28,640 --> 00:09:33,590
rich semantic relationship between

219
00:09:30,590 --> 00:09:36,050
tokens from the natural language so you

220
00:09:33,590 --> 00:09:38,990
can see that one typical example is that

221
00:09:36,050 --> 00:09:41,719
the representation of King - man press

222
00:09:38,990 --> 00:09:46,820
woman actually is queen and the Batman

223
00:09:41,720 --> 00:09:48,860
is good and its meaning a copula it

224
00:09:46,820 --> 00:09:51,050
actually kind of makes sense right and

225
00:09:48,860 --> 00:09:54,170
the paragraph vectors here actually can

226
00:09:51,050 --> 00:09:56,120
capture what is unique about this

227
00:09:54,170 --> 00:09:57,860
question suppose you always said the

228
00:09:56,120 --> 00:10:00,500
castle on America sort of met but one

229
00:09:57,860 --> 00:10:02,150
times I told you that you make a you

230
00:10:00,500 --> 00:10:05,420
make a wrong answer

231
00:10:02,150 --> 00:10:08,840
the right answer is not set is speaking

232
00:10:05,420 --> 00:10:10,939
and then you will be okay so the exam I

233
00:10:08,840 --> 00:10:13,070
took last week actually as a very weird

234
00:10:10,940 --> 00:10:15,650
correct answer that it's not said it's

235
00:10:13,070 --> 00:10:18,020
is about speaking right so this

236
00:10:15,650 --> 00:10:20,630
information is captured on the paragraph

237
00:10:18,020 --> 00:10:22,760
ID which is like the exam ID right you

238
00:10:20,630 --> 00:10:25,040
recorded in aspects of exam there's a

239
00:10:22,760 --> 00:10:27,400
real answer well we're following the

240
00:10:25,040 --> 00:10:29,390
same way applying this model and

241
00:10:27,400 --> 00:10:31,760
directory on the assembly code it works

242
00:10:29,390 --> 00:10:33,680
great but the problem is that assembly

243
00:10:31,760 --> 00:10:37,370
language not like tags is that linear

244
00:10:33,680 --> 00:10:40,969
layout right so we adopt this model a

245
00:10:37,370 --> 00:10:43,010
little bit so instead of asking the

246
00:10:40,970 --> 00:10:45,010
model to predict what is in the middle

247
00:10:43,010 --> 00:10:48,200
of the token we ask the model to

248
00:10:45,010 --> 00:10:50,090
reconstruct the instructions assembly

249
00:10:48,200 --> 00:10:51,830
instruction in the middle by considering

250
00:10:50,090 --> 00:10:54,320
the neighborhood instructions right so

251
00:10:51,830 --> 00:10:57,410
given a sliding window over the assembly

252
00:10:54,320 --> 00:11:00,050
instructions let's say a size of three I

253
00:10:57,410 --> 00:11:02,930
asked the model to predict reconstruct

254
00:11:00,050 --> 00:11:05,390
words in the middle by taking the

255
00:11:02,930 --> 00:11:08,599
context the neighbor instruction into

256
00:11:05,390 --> 00:11:11,540
considerations and this this more it

257
00:11:08,600 --> 00:11:12,850
turns out it works pretty well on

258
00:11:11,540 --> 00:11:15,899
assembly language and

259
00:11:12,850 --> 00:11:18,009
visualizing the relationship among the

260
00:11:15,899 --> 00:11:19,690
assembly took at the tokens that we

261
00:11:18,009 --> 00:11:22,930
soften as soon and which is quite

262
00:11:19,690 --> 00:11:26,170
interesting so we can see that on the

263
00:11:22,930 --> 00:11:27,489
waxer space 16 bits register so the

264
00:11:26,170 --> 00:11:29,469
register pretty much group into

265
00:11:27,490 --> 00:11:30,940
different bit lines they kind of be

266
00:11:29,470 --> 00:11:32,949
similar to each other considering their

267
00:11:30,940 --> 00:11:36,040
context and then the term operations

268
00:11:32,949 --> 00:11:38,109
equip the crew together we also have the

269
00:11:36,040 --> 00:11:40,660
condition condition operations that

270
00:11:38,110 --> 00:11:42,639
critical could do together and if we

271
00:11:40,660 --> 00:11:44,469
look into the function course the seal

272
00:11:42,639 --> 00:11:47,019
I've received the Lipsy function course

273
00:11:44,470 --> 00:11:50,050
is that it Co we can also find a fire

274
00:11:47,019 --> 00:11:52,889
operations I could be together as well

275
00:11:50,050 --> 00:11:55,660
as the networking access control

276
00:11:52,889 --> 00:11:57,519
functions are very similar to each RS so

277
00:11:55,660 --> 00:12:00,219
these are the data token the under the

278
00:11:57,519 --> 00:12:02,829
call instruction right after the after

279
00:12:00,220 --> 00:12:05,250
the coil instruction so also we have the

280
00:12:02,829 --> 00:12:09,279
memory operations that tend to be routed

281
00:12:05,250 --> 00:12:11,620
together as well as string stage and for

282
00:12:09,279 --> 00:12:13,449
all the math related function calls I

283
00:12:11,620 --> 00:12:16,779
also could be clear but it's not shown

284
00:12:13,449 --> 00:12:19,899
in this life and we conduct the Chrome

285
00:12:16,779 --> 00:12:22,149
search evaluations by comparing the

286
00:12:19,899 --> 00:12:24,519
original barrier against the optimized

287
00:12:22,149 --> 00:12:27,550
one and then we compare our approach

288
00:12:24,519 --> 00:12:30,149
with all different kinds of aesthetic

289
00:12:27,550 --> 00:12:33,250
approach including grab base assembly

290
00:12:30,149 --> 00:12:35,319
language base as well as to most reasons

291
00:12:33,250 --> 00:12:37,209
are dynamic and there is a base approach

292
00:12:35,319 --> 00:12:39,670
it turns out that approach is pretty

293
00:12:37,209 --> 00:12:41,800
accurate matching between the Orangemen

294
00:12:39,670 --> 00:12:45,790
one as well as the optimized one even

295
00:12:41,800 --> 00:12:47,649
compared to the some reasons dynamic

296
00:12:45,790 --> 00:12:49,899
approach but we don't have enough

297
00:12:47,649 --> 00:12:52,389
samples to make conclusion that is the

298
00:12:49,899 --> 00:12:56,410
significant test is a statistically

299
00:12:52,389 --> 00:12:59,079
significant difference and then we also

300
00:12:56,410 --> 00:13:02,469
conduct the cone search and nursey using

301
00:12:59,079 --> 00:13:04,630
the OEM obfuscator it's not the best out

302
00:13:02,470 --> 00:13:06,850
there but it makes it already makes the

303
00:13:04,630 --> 00:13:08,889
assembly code looks very different and

304
00:13:06,850 --> 00:13:12,670
it also turns out that our approach our

305
00:13:08,889 --> 00:13:14,920
performs very well on this on this for

306
00:13:12,670 --> 00:13:17,680
this of a skater we also conduct a

307
00:13:14,920 --> 00:13:19,060
Studies on vulnerability retrieval data

308
00:13:17,680 --> 00:13:20,649
sets like it's like you have a

309
00:13:19,060 --> 00:13:21,550
repository of different assembly

310
00:13:20,649 --> 00:13:23,990
functions some of them are

311
00:13:21,550 --> 00:13:26,750
vulnerabilities we try to retrieve them

312
00:13:23,990 --> 00:13:29,120
compared to esh which which relies on

313
00:13:26,750 --> 00:13:31,250
dynamic and there is the our pro our

314
00:13:29,120 --> 00:13:33,980
approach without any modification

315
00:13:31,250 --> 00:13:36,770
actually have a zero force positive and

316
00:13:33,980 --> 00:13:38,680
as a static approach it takes only

317
00:13:36,770 --> 00:13:41,959
couple million SEK like a couple hundred

318
00:13:38,680 --> 00:13:44,410
milliseconds to get the results and we

319
00:13:41,959 --> 00:13:47,140
take another extreme we use the tigris

320
00:13:44,410 --> 00:13:50,390
obfuscator which relying on

321
00:13:47,140 --> 00:13:53,260
virtualizations just-in-time executions

322
00:13:50,390 --> 00:13:57,410
to apophis kate at the assembly language

323
00:13:53,260 --> 00:14:00,020
simply code and so for the inquiry

324
00:13:57,410 --> 00:14:02,329
through alpha station well it performs

325
00:14:00,020 --> 00:14:04,520
great for virtualization we can still

326
00:14:02,330 --> 00:14:06,649
recover some of the vulnerabilities for

327
00:14:04,520 --> 00:14:09,199
JIT execution well still recover some of

328
00:14:06,649 --> 00:14:11,779
them but if we apply all of them like is

329
00:14:09,200 --> 00:14:14,450
you apply the in curvature and then

330
00:14:11,779 --> 00:14:16,790
virtualization and then we applied a JIT

331
00:14:14,450 --> 00:14:19,279
execution unfortunately we cannot

332
00:14:16,790 --> 00:14:21,500
recover anything because it looks

333
00:14:19,279 --> 00:14:25,970
already very very difficult out

334
00:14:21,500 --> 00:14:29,270
different so of for this model for this

335
00:14:25,970 --> 00:14:32,300
approach we developed to to push the

336
00:14:29,270 --> 00:14:34,910
boundary of static analysis against coop

337
00:14:32,300 --> 00:14:36,890
investigation and optimization so even

338
00:14:34,910 --> 00:14:39,890
performs a lot somewhat better than the

339
00:14:36,890 --> 00:14:42,649
recent dynamic approach ass aesthetic

340
00:14:39,890 --> 00:14:45,529
approach if isn't scalable we can just

341
00:14:42,649 --> 00:14:47,180
use it for our search engines and but

342
00:14:45,529 --> 00:14:49,660
the problem is that where I went

343
00:14:47,180 --> 00:14:51,560
prosthetic chrome because it's a vector

344
00:14:49,660 --> 00:14:53,990
representation right it's very difficult

345
00:14:51,560 --> 00:14:56,420
to explain to the end-user to reverse

346
00:14:53,990 --> 00:14:58,120
engineer that why exactly these two

347
00:14:56,420 --> 00:15:01,250
functions are considered as a chrome

348
00:14:58,120 --> 00:15:03,860
unlike and the other sub grab based

349
00:15:01,250 --> 00:15:06,649
chrome search method but I mean after

350
00:15:03,860 --> 00:15:09,529
above of assocation the graph Bhangra is

351
00:15:06,649 --> 00:15:11,510
it's broken anyway so so the SUBSCRIBE

352
00:15:09,529 --> 00:15:13,329
the concert of a subscribe is no longer

353
00:15:11,510 --> 00:15:16,490
valid

354
00:15:13,329 --> 00:15:21,099
static approach of course has some

355
00:15:16,490 --> 00:15:23,660
inherent this disadvantage so there's no

356
00:15:21,100 --> 00:15:26,420
it cannot recognize for example the

357
00:15:23,660 --> 00:15:28,370
dynamic jump table and we also assume

358
00:15:26,420 --> 00:15:30,890
the assembly code coming from the same

359
00:15:28,370 --> 00:15:33,170
family so we are talking from our

360
00:15:30,890 --> 00:15:35,480
searching English against English but

361
00:15:33,170 --> 00:15:37,219
not English against French right so it's

362
00:15:35,480 --> 00:15:40,129
not like it

363
00:15:37,220 --> 00:15:44,389
six against the Armco and actually we

364
00:15:40,129 --> 00:15:46,339
put this model as part of our Camino

365
00:15:44,389 --> 00:15:48,589
binary and then it's a platform so it's

366
00:15:46,339 --> 00:15:50,449
on github it's open source is ready to

367
00:15:48,589 --> 00:15:52,939
use it can be deployed on your laptop

368
00:15:50,449 --> 00:15:56,810
and workstation or you can deploy it on

369
00:15:52,939 --> 00:15:58,790
a cloud services rely on spark so it's

370
00:15:56,810 --> 00:16:01,069
ready to use besides of ASM to where

371
00:15:58,790 --> 00:16:03,290
which focus on optimization and apophis

372
00:16:01,069 --> 00:16:05,180
occasion we also have ASM chrome which

373
00:16:03,290 --> 00:16:07,430
is the typical subgroup Chrome's

374
00:16:05,180 --> 00:16:10,339
approach cool search approach that given

375
00:16:07,430 --> 00:16:12,859
the query given a target we can identify

376
00:16:10,339 --> 00:16:14,750
the chromeless subgraph it's like really

377
00:16:12,860 --> 00:16:16,639
showing the reverse engineering which

378
00:16:14,750 --> 00:16:19,459
part of the function is a chrome to

379
00:16:16,639 --> 00:16:22,339
another functions and we also have a

380
00:16:19,459 --> 00:16:24,910
seminal module which search for the

381
00:16:22,339 --> 00:16:28,129
clocks across across architecture

382
00:16:24,910 --> 00:16:31,310
assembly instructions so you can search

383
00:16:28,129 --> 00:16:33,259
x86 against an arm call so that this

384
00:16:31,310 --> 00:16:35,060
approach actually we relying on the

385
00:16:33,259 --> 00:16:37,490
intermediate representation for the code

386
00:16:35,060 --> 00:16:39,589
matching and this is also following a

387
00:16:37,490 --> 00:16:42,800
support from such a pro so it has a very

388
00:16:39,589 --> 00:16:47,000
good degree of interpret ability for

389
00:16:42,800 --> 00:16:55,790
search engines so that's it okay so any

390
00:16:47,000 --> 00:16:59,870
questions any questions from the

391
00:16:55,790 --> 00:17:01,969
audience please come to the microphone

392
00:16:59,870 --> 00:17:03,769
and before you ask questions please

393
00:17:01,970 --> 00:17:13,220
state your name and affiliation please

394
00:17:03,769 --> 00:17:16,419
thanks hi personally from IBM I'm not

395
00:17:13,220 --> 00:17:19,429
sure if you had any discussion about

396
00:17:16,419 --> 00:17:20,750
different architectures I mean I've

397
00:17:19,429 --> 00:17:25,730
different during network architectures

398
00:17:20,750 --> 00:17:28,549
for higher-level languages like Java I

399
00:17:25,730 --> 00:17:30,980
think people have used it as James or

400
00:17:28,549 --> 00:17:33,200
Shannon's and all actually Sheena has

401
00:17:30,980 --> 00:17:35,659
been also used for binary so have you

402
00:17:33,200 --> 00:17:40,309
compared them with this see bone

403
00:17:35,659 --> 00:17:42,350
structure so so the reason why we use

404
00:17:40,309 --> 00:17:44,000
the most similar architecture is that we

405
00:17:42,350 --> 00:17:48,360
want to prove like a high throughput

406
00:17:44,000 --> 00:17:50,340
rate of the of the of the of

407
00:17:48,360 --> 00:17:52,260
the training model because we want the

408
00:17:50,340 --> 00:17:55,620
model to learn as much as from the data

409
00:17:52,260 --> 00:17:57,780
so that's why we didn't rely on ASTM so

410
00:17:55,620 --> 00:17:59,699
another reason why we don't use our

411
00:17:57,780 --> 00:18:03,629
statements that we've observed that when

412
00:17:59,700 --> 00:18:07,140
we increase increase the context the the

413
00:18:03,630 --> 00:18:08,940
larger the context we increase the the

414
00:18:07,140 --> 00:18:11,220
higher chance that you can actually just

415
00:18:08,940 --> 00:18:15,929
directly predict how the assembly

416
00:18:11,220 --> 00:18:18,540
instruction that as our target and if we

417
00:18:15,929 --> 00:18:21,090
have less information propagate back to

418
00:18:18,540 --> 00:18:23,100
the exam ID that we can remember oh I

419
00:18:21,090 --> 00:18:25,139
make it's like make the question

420
00:18:23,100 --> 00:18:26,939
extremely difficult for the model so

421
00:18:25,140 --> 00:18:29,669
instead we make a lot of simple

422
00:18:26,940 --> 00:18:34,110
questions to the model so actually we

423
00:18:29,669 --> 00:18:36,330
did try our SDM on our own but the

424
00:18:34,110 --> 00:18:39,178
performance is not very good because the

425
00:18:36,330 --> 00:18:42,990
frupa rate is very small yeah compared

426
00:18:39,179 --> 00:18:44,790
to thank you thank you all right due to

427
00:18:42,990 --> 00:18:46,919
the time limited we may only take one

428
00:18:44,790 --> 00:18:48,740
question for this this talk so let's

429
00:18:46,919 --> 00:18:53,470
thank Stephen one more time

430
00:18:48,740 --> 00:18:53,470
[Applause]

