1
00:00:11,420 --> 00:00:18,630
awesome thanks okay so in traditional

2
00:00:15,389 --> 00:00:22,710
use of a signature scheme the signing

3
00:00:18,630 --> 00:00:24,450
key lives on a single device and pushing

4
00:00:22,710 --> 00:00:25,890
a button on this device is sufficient to

5
00:00:24,450 --> 00:00:29,369
be able to produce a signature under the

6
00:00:25,890 --> 00:00:31,500
public key it in the threshold setting

7
00:00:29,369 --> 00:00:34,860
we split the signing key into a number

8
00:00:31,500 --> 00:00:37,890
of different fragments or with called an

9
00:00:34,860 --> 00:00:39,090
SKS KBS KC and you can put these

10
00:00:37,890 --> 00:00:41,930
fragments on your different devices

11
00:00:39,090 --> 00:00:46,650
let's say your phone and your tablet and

12
00:00:41,930 --> 00:00:48,180
it's basically it needs you to push

13
00:00:46,650 --> 00:00:50,400
buttons on all of these and have all of

14
00:00:48,180 --> 00:00:52,710
these devices be in agreement in order

15
00:00:50,400 --> 00:00:54,809
to produce a signature under the common

16
00:00:52,710 --> 00:00:56,309
public key and it's an important

17
00:00:54,809 --> 00:00:57,720
requirement that the signature that

18
00:00:56,309 --> 00:00:59,159
comes out of the threshold scheme looks

19
00:00:57,720 --> 00:01:03,239
exactly like the one that came out of

20
00:00:59,159 --> 00:01:04,729
the regular way so for instance in a

21
00:01:03,239 --> 00:01:06,570
three event signature scheme any

22
00:01:04,729 --> 00:01:09,150
consortium of three parties should be

23
00:01:06,570 --> 00:01:10,798
able to produce a signature and at the

24
00:01:09,150 --> 00:01:12,690
same time no two parties should be able

25
00:01:10,799 --> 00:01:14,700
to collude the forces third into signing

26
00:01:12,690 --> 00:01:16,500
something that they don't want to write

27
00:01:14,700 --> 00:01:18,840
so in a full threshold scheme an

28
00:01:16,500 --> 00:01:23,160
adversary can essentially corrupt every

29
00:01:18,840 --> 00:01:24,300
party but one and ECDSA which is the

30
00:01:23,160 --> 00:01:27,090
elliptic curve digital signature

31
00:01:24,300 --> 00:01:28,979
algorithm was standardized by nist

32
00:01:27,090 --> 00:01:30,540
device by david roberts and has seen

33
00:01:28,980 --> 00:01:33,410
widespread adoption across the internet

34
00:01:30,540 --> 00:01:36,000
in all of your favorite protocols a

35
00:01:33,410 --> 00:01:37,259
quick look and addition or the elliptic

36
00:01:36,000 --> 00:01:40,500
curve is going to be generated by

37
00:01:37,260 --> 00:01:42,270
capital G and it's audio cue and the

38
00:01:40,500 --> 00:01:44,220
secret values in the system are the

39
00:01:42,270 --> 00:01:47,070
secret key which lasts for the lifetime

40
00:01:44,220 --> 00:01:48,679
of a particular set up and in instance

41
00:01:47,070 --> 00:01:51,270
key K which is ephemeral

42
00:01:48,680 --> 00:01:52,950
the public values which are visible to

43
00:01:51,270 --> 00:01:56,789
the rest of the world are the public key

44
00:01:52,950 --> 00:01:59,190
PK and the signing lands are its so a

45
00:01:56,790 --> 00:02:01,500
quick recap of how ECDSA signing works

46
00:01:59,190 --> 00:02:04,740
the nonce is the instance key in the

47
00:02:01,500 --> 00:02:06,810
exponent and signing a message involves

48
00:02:04,740 --> 00:02:08,699
hashing it first and adding to it the

49
00:02:06,810 --> 00:02:10,229
secret key times are X which is the

50
00:02:08,699 --> 00:02:12,750
x-coordinate of the signing nonce and

51
00:02:10,229 --> 00:02:14,819
then finally division by K the instance

52
00:02:12,750 --> 00:02:16,950
key and unfortunately this division step

53
00:02:14,819 --> 00:02:19,200
is not linear and this non-linearity

54
00:02:16,950 --> 00:02:21,450
makes a adopting ECDSA in the threshold

55
00:02:19,200 --> 00:02:22,510
setting somewhat difficult there have

56
00:02:21,450 --> 00:02:24,579
been worse today right

57
00:02:22,510 --> 00:02:26,230
listen and there have been some limited

58
00:02:24,580 --> 00:02:28,120
schemes based on by a starting with

59
00:02:26,230 --> 00:02:30,849
Mackenzie and i2 and more recent works

60
00:02:28,120 --> 00:02:34,689
on this by gennaro goldfeder narnun and

61
00:02:30,849 --> 00:02:36,879
Linda and recently works could garden

62
00:02:34,689 --> 00:02:38,078
tiles achieved practical key generation

63
00:02:36,879 --> 00:02:40,239
and efficient signing for the full

64
00:02:38,079 --> 00:02:42,700
threshold works by gennaro and goldfeder

65
00:02:40,239 --> 00:02:43,959
use a bio based approach and linden

66
00:02:42,700 --> 00:02:46,510
offered a Dellucci use and Elgar

67
00:02:43,959 --> 00:02:48,190
model-based approach at Auckland last

68
00:02:46,510 --> 00:02:50,108
year we presented a way to get ECDSA

69
00:02:48,190 --> 00:02:52,359
signatures and the two of nks under

70
00:02:50,109 --> 00:02:53,799
native assumptions that assumptions in

71
00:02:52,359 --> 00:02:56,590
the same curve as the signature itself

72
00:02:53,799 --> 00:02:58,090
and in this work we extend our work from

73
00:02:56,590 --> 00:03:01,540
last year to accommodate a full

74
00:02:58,090 --> 00:03:02,200
threshold under the same assumptions at

75
00:03:01,540 --> 00:03:04,138
a high level

76
00:03:02,200 --> 00:03:06,548
our approach is built on top of

77
00:03:04,139 --> 00:03:08,680
two-party multipliers that's oblivious

78
00:03:06,549 --> 00:03:11,319
transferred or instantiated in the same

79
00:03:08,680 --> 00:03:13,720
curve as the signature the advantages of

80
00:03:11,319 --> 00:03:15,638
these approaches that with ot extension

81
00:03:13,720 --> 00:03:17,049
which requires no extra assumptions a

82
00:03:15,639 --> 00:03:20,470
multiplication cost just a few

83
00:03:17,049 --> 00:03:21,670
milliseconds to execute and keep the

84
00:03:20,470 --> 00:03:24,489
graphic assumptions that we need for

85
00:03:21,670 --> 00:03:25,958
this native to the same curve that's got

86
00:03:24,489 --> 00:03:29,139
the computational diffie-hellman is hard

87
00:03:25,959 --> 00:03:31,269
in the same curve and on the other hand

88
00:03:29,139 --> 00:03:32,889
we incur a penalty in terms of bandwidth

89
00:03:31,269 --> 00:03:34,120
that's a few hundred kilobytes per party

90
00:03:32,889 --> 00:03:36,489
I'll talk more about this later

91
00:03:34,120 --> 00:03:39,629
in contrast using let's say homomorphic

92
00:03:36,489 --> 00:03:42,879
encryption like the other works use are

93
00:03:39,629 --> 00:03:44,290
it's somewhat heavy in terms of

94
00:03:42,879 --> 00:03:46,388
computation and while it saves on

95
00:03:44,290 --> 00:03:49,769
communication it can incur extra

96
00:03:46,389 --> 00:03:53,049
assumptions for instance let's say by a

97
00:03:49,769 --> 00:03:55,560
right so we use a multiplier that we

98
00:03:53,049 --> 00:03:58,480
built in our work last year and this

99
00:03:55,560 --> 00:04:00,519
multiplier which we optimize is secured

100
00:03:58,480 --> 00:04:01,810
up to choice of inputs and it's a

101
00:04:00,519 --> 00:04:03,280
challenge to design some sort of

102
00:04:01,810 --> 00:04:05,019
consistency checking mechanism that

103
00:04:03,280 --> 00:04:06,459
makes sure that an adversary uses

104
00:04:05,019 --> 00:04:09,970
correct inputs and all the multipliers

105
00:04:06,459 --> 00:04:11,680
and enforce this we design a novel

106
00:04:09,970 --> 00:04:13,359
lightweight consistency checking

107
00:04:11,680 --> 00:04:15,970
mechanism which is unique to our

108
00:04:13,359 --> 00:04:17,769
protocol and this works roughly by

109
00:04:15,970 --> 00:04:19,680
verifying shares in the exponent before

110
00:04:17,769 --> 00:04:22,180
they're even revealed in the clear and

111
00:04:19,680 --> 00:04:23,949
this is pretty cheap it costs only five

112
00:04:22,180 --> 00:04:25,330
exponentiation to party and about as

113
00:04:23,949 --> 00:04:27,639
many core points will be transmitted and

114
00:04:25,330 --> 00:04:29,740
that's quite right and we show that

115
00:04:27,639 --> 00:04:31,000
supporting these checks implies solving

116
00:04:29,740 --> 00:04:32,530
the computational diffie-hellman problem

117
00:04:31,000 --> 00:04:34,330
so if you believe that holes in the same

118
00:04:32,530 --> 00:04:36,029
curve is the signature then our scheme

119
00:04:34,330 --> 00:04:38,258
is secure

120
00:04:36,029 --> 00:04:40,569
let's so the trade-offs of this approach

121
00:04:38,259 --> 00:04:42,639
we avoid expensive zero knowledge proof

122
00:04:40,569 --> 00:04:45,430
so for instance for UC security this

123
00:04:42,639 --> 00:04:47,830
becomes easier and we avoid assumptions

124
00:04:45,430 --> 00:04:49,569
for into ECDSA itself like all of our

125
00:04:47,830 --> 00:04:54,308
assumptions are arguably native to the

126
00:04:49,569 --> 00:04:56,259
same curve and using OTPs multiplication

127
00:04:54,309 --> 00:04:58,689
like I mentioned earlier is pretty light

128
00:04:56,259 --> 00:05:00,939
on computation but more demanding in

129
00:04:58,689 --> 00:05:02,589
terms of bandwidth or specifically more

130
00:05:00,939 --> 00:05:05,649
demanding than home offic encryption but

131
00:05:02,589 --> 00:05:06,909
we show a couple of use cases to argue

132
00:05:05,649 --> 00:05:10,330
that this is not really an issue in

133
00:05:06,909 --> 00:05:13,119
practice we implemented a scheme and

134
00:05:10,330 --> 00:05:15,188
benchmarked it and found that our

135
00:05:13,119 --> 00:05:16,419
numbers are pretty good they're an order

136
00:05:15,189 --> 00:05:20,709
of magnitude better than the next best

137
00:05:16,419 --> 00:05:22,628
concurrent work right so our model is at

138
00:05:20,709 --> 00:05:24,369
Universal composability by gannett e

139
00:05:22,629 --> 00:05:25,779
with the static adversary and a local

140
00:05:24,369 --> 00:05:27,279
tandem article and this is strictly

141
00:05:25,779 --> 00:05:28,539
stronger than any game beta definition

142
00:05:27,279 --> 00:05:31,029
that can be formulated for this problem

143
00:05:28,539 --> 00:05:33,878
which is used by some other works in

144
00:05:31,029 --> 00:05:36,759
this area and the functionality that our

145
00:05:33,879 --> 00:05:40,180
protocol emulates or which is formalized

146
00:05:36,759 --> 00:05:42,490
in the paper is the obvious thing it

147
00:05:40,180 --> 00:05:44,199
samples a uniform secret key and it

148
00:05:42,490 --> 00:05:47,469
computes an ECDSA signature when enough

149
00:05:44,199 --> 00:05:49,449
parties ask it to the only assumption

150
00:05:47,469 --> 00:05:50,830
that we rely on in our world is that the

151
00:05:49,449 --> 00:05:52,240
computational diffie-hellman problem is

152
00:05:50,830 --> 00:05:55,659
hard and specifically in the same curve

153
00:05:52,240 --> 00:05:57,819
is the signature itself and the network

154
00:05:55,659 --> 00:06:00,729
assumptions that we use a VM synchronous

155
00:05:57,819 --> 00:06:03,669
network and the an access to a broadcast

156
00:06:00,729 --> 00:06:07,360
channel and we achieve security with the

157
00:06:03,669 --> 00:06:10,119
board right so walking through our

158
00:06:07,360 --> 00:06:12,550
approach first the setup it's fully

159
00:06:10,119 --> 00:06:16,269
distributed and it was running a bunch

160
00:06:12,550 --> 00:06:17,680
of OTAs pairwise among parties to run

161
00:06:16,269 --> 00:06:20,619
the base OD floatie extension

162
00:06:17,680 --> 00:06:22,119
essentially and our key generation is

163
00:06:20,619 --> 00:06:24,219
dialect done in the style of medicine

164
00:06:22,119 --> 00:06:26,050
which is to have every part a shammy

165
00:06:24,219 --> 00:06:27,490
shared it's secret I mean a random

166
00:06:26,050 --> 00:06:29,050
secret and to define the secret key to

167
00:06:27,490 --> 00:06:32,349
be the sum of each party's contribution

168
00:06:29,050 --> 00:06:34,569
and then these and ultimately at the end

169
00:06:32,349 --> 00:06:36,998
of this protocol or every party verifies

170
00:06:34,569 --> 00:06:39,119
that they have a share on the same

171
00:06:36,999 --> 00:06:41,800
polynomial by checking in the exponent

172
00:06:39,119 --> 00:06:43,539
interpolating in the exponent right ok

173
00:06:41,800 --> 00:06:45,159
so the first step is signing if they had

174
00:06:43,539 --> 00:06:47,649
candidate shares for the instance key K

175
00:06:45,159 --> 00:06:49,020
its inverse and K and the exponent which

176
00:06:47,649 --> 00:06:51,129
is just assigning grants

177
00:06:49,020 --> 00:06:52,930
so the building block that we use for

178
00:06:51,129 --> 00:06:54,639
this is the two-party multiplier with

179
00:06:52,930 --> 00:06:57,909
full security that we had from last year

180
00:06:54,639 --> 00:07:00,310
and some optimizations and one approach

181
00:06:57,909 --> 00:07:02,229
to get candidate shares 4k and its

182
00:07:00,310 --> 00:07:04,240
inverse is to have each party start with

183
00:07:02,229 --> 00:07:06,909
multiplicative shares of K and its

184
00:07:04,240 --> 00:07:08,710
inverse and done a conversion protocol

185
00:07:06,909 --> 00:07:10,449
to get additive shares out of this this

186
00:07:08,710 --> 00:07:13,029
costs rounds now going to make in the

187
00:07:10,449 --> 00:07:15,400
number of parties alternatively we could

188
00:07:13,029 --> 00:07:16,870
use the well-known approach of Berlin

189
00:07:15,400 --> 00:07:18,400
and Bieber to get a constant down

190
00:07:16,870 --> 00:07:21,849
protocol and we're working on this for

191
00:07:18,400 --> 00:07:24,099
our channel version right so the next

192
00:07:21,849 --> 00:07:25,539
step is to get or a candidate for the

193
00:07:24,099 --> 00:07:27,460
secret key over the instance key and

194
00:07:25,539 --> 00:07:28,509
this is easily accomplished with

195
00:07:27,460 --> 00:07:32,590
standard techniques from the literature

196
00:07:28,509 --> 00:07:33,909
basically jmw then this is the sort of

197
00:07:32,590 --> 00:07:37,869
secret sauce for a protocol which is

198
00:07:33,909 --> 00:07:39,400
check relations in the exponent and note

199
00:07:37,870 --> 00:07:42,400
on what the challenges are moving from

200
00:07:39,400 --> 00:07:43,750
to tamati parties it's not obvious how

201
00:07:42,400 --> 00:07:45,068
to generalize the checks from the two

202
00:07:43,750 --> 00:07:48,339
party setting you don't need to take my

203
00:07:45,069 --> 00:07:50,469
word for it and we in the two party case

204
00:07:48,339 --> 00:07:51,969
you like rely heavily on the

205
00:07:50,469 --> 00:07:54,159
diffie-hellman key exchange way of

206
00:07:51,969 --> 00:07:55,509
getting out of getting assigning knots

207
00:07:54,159 --> 00:07:57,250
which we can't do when there are

208
00:07:55,509 --> 00:07:58,750
multiple parties or it's going to be

209
00:07:57,250 --> 00:08:01,150
fairly expensive in terms of loans and

210
00:07:58,750 --> 00:08:05,589
yeah oh I see the paper for details at a

211
00:08:01,150 --> 00:08:07,419
base that we get around this right so at

212
00:08:05,589 --> 00:08:09,399
a high level there are three relations

213
00:08:07,419 --> 00:08:10,930
that need to be verified that's

214
00:08:09,399 --> 00:08:13,000
candidate shares of the instance key

215
00:08:10,930 --> 00:08:15,490
it's inverse and it's inverse multiplied

216
00:08:13,000 --> 00:08:19,599
by the secret key right so consider the

217
00:08:15,490 --> 00:08:22,000
task of oh sorry yeah the technique at a

218
00:08:19,599 --> 00:08:23,469
high level is to verify each equation in

219
00:08:22,000 --> 00:08:25,330
the exponent basically each relation

220
00:08:23,469 --> 00:08:26,500
between these three values using some

221
00:08:25,330 --> 00:08:29,919
auxiliary information that's already

222
00:08:26,500 --> 00:08:31,659
available to the world and the cost of

223
00:08:29,919 --> 00:08:33,039
doing this as you'll see are about five

224
00:08:31,659 --> 00:08:35,140
exponentiations and as many Gloop

225
00:08:33,039 --> 00:08:36,578
elements per party and this is

226
00:08:35,140 --> 00:08:37,958
independent of party count like it

227
00:08:36,578 --> 00:08:39,760
doesn't grow with the number of parties

228
00:08:37,958 --> 00:08:41,529
and there's no genetic zero knowledge

229
00:08:39,760 --> 00:08:43,299
that we use in this so this means that

230
00:08:41,529 --> 00:08:44,920
you don't have to like you don't have to

231
00:08:43,299 --> 00:08:46,510
fill instance done as many verifications

232
00:08:44,920 --> 00:08:50,709
of as there are parties and things like

233
00:08:46,510 --> 00:08:52,600
this right so consider the task of

234
00:08:50,709 --> 00:08:55,000
verifying the relationship between the

235
00:08:52,600 --> 00:08:57,370
sharing of K and its inverse and the

236
00:08:55,000 --> 00:08:59,560
idea at a high level is to verify that K

237
00:08:57,370 --> 00:09:01,089
times K inverse is 1 by verifying the K

238
00:08:59,560 --> 00:09:01,768
times K inverse and the exponent gives

239
00:09:01,089 --> 00:09:05,009
back the group

240
00:09:01,769 --> 00:09:07,709
later of the curve and let's see an

241
00:09:05,009 --> 00:09:10,470
attempt to the solution it's so we have

242
00:09:07,709 --> 00:09:13,410
our that's the signing nonce visible to

243
00:09:10,470 --> 00:09:17,009
the rest of the world and we instruct

244
00:09:13,410 --> 00:09:19,469
each party to multiply by all its local

245
00:09:17,009 --> 00:09:20,730
share of one over K and to broadcast

246
00:09:19,470 --> 00:09:23,999
this value and to give it a name that's

247
00:09:20,730 --> 00:09:25,889
called a gamma I now we tell each party

248
00:09:23,999 --> 00:09:27,569
to verify that adding up these gamma I

249
00:09:25,889 --> 00:09:31,049
values gives back the group generator

250
00:09:27,569 --> 00:09:33,769
for the curve right now this can be

251
00:09:31,049 --> 00:09:36,360
verified K times K in verses one so

252
00:09:33,769 --> 00:09:38,009
right so this doesn't work immediately

253
00:09:36,360 --> 00:09:40,619
and to see why we have to see what's

254
00:09:38,009 --> 00:09:42,899
going on under the hood or splitting up

255
00:09:40,619 --> 00:09:44,790
cater its constituent parts contribution

256
00:09:42,899 --> 00:09:46,709
by an adversary called that ka and a

257
00:09:44,790 --> 00:09:50,368
contribution by an honest party called

258
00:09:46,709 --> 00:09:52,768
the KH we can see that if an adversary

259
00:09:50,369 --> 00:09:55,019
puts in some annoying cheat value call

260
00:09:52,769 --> 00:09:57,509
it epsilon into its contribution of 1

261
00:09:55,019 --> 00:10:01,769
over K a that's a cheap relative to its

262
00:09:57,509 --> 00:10:03,959
initial committed value it induces some

263
00:10:01,769 --> 00:10:06,329
offset that's a function of the values

264
00:10:03,959 --> 00:10:09,029
that it put into the system itself so as

265
00:10:06,329 --> 00:10:11,819
an adversary I can put in epsilon and ka

266
00:10:09,029 --> 00:10:14,100
and find the offset for the sum check

267
00:10:11,819 --> 00:10:16,110
protocol to be some function of epsilon

268
00:10:14,100 --> 00:10:17,850
key and nothing else and because I know

269
00:10:16,110 --> 00:10:19,949
both of these values as an adversary I

270
00:10:17,850 --> 00:10:23,309
can compute the offset and sort of undo

271
00:10:19,949 --> 00:10:24,689
my cheat quite easily and the idea that

272
00:10:23,309 --> 00:10:26,850
we use to mitigate this cheat is to

273
00:10:24,689 --> 00:10:28,679
randomize the target that is at the

274
00:10:26,850 --> 00:10:30,660
moment we're expecting the sum check to

275
00:10:28,679 --> 00:10:33,119
give some constant value that's just the

276
00:10:30,660 --> 00:10:35,969
generator for the curve and the idea is

277
00:10:33,119 --> 00:10:37,920
to multiply is randomized this

278
00:10:35,970 --> 00:10:39,740
multiplication that we do so that the

279
00:10:37,920 --> 00:10:43,199
target if the sum check is unpredictable

280
00:10:39,740 --> 00:10:45,089
let's so we compute Phi over K instead

281
00:10:43,199 --> 00:10:49,049
of 1 over K by Phi is a uniformly chosen

282
00:10:45,089 --> 00:10:50,819
value and we reveal Phi only after the

283
00:10:49,049 --> 00:10:52,579
adversary has already chosen all of the

284
00:10:50,819 --> 00:10:55,709
values in the system so he can't

285
00:10:52,579 --> 00:10:58,309
essentially his behavior with regards to

286
00:10:55,709 --> 00:11:01,258
this check has to be independent of Phi

287
00:10:58,309 --> 00:11:04,860
so to see how this helps let's go back

288
00:11:01,259 --> 00:11:07,139
to our template solution right so

289
00:11:04,860 --> 00:11:10,910
instead of 1 over K times the nonce we

290
00:11:07,139 --> 00:11:10,910
now have Phi over K times the nonce and

291
00:11:11,299 --> 00:11:14,740
give it a name let's call it Phi like a

292
00:11:13,799 --> 00:11:16,630
profile in

293
00:11:14,740 --> 00:11:19,779
as the target of the Sun check protocol

294
00:11:16,630 --> 00:11:21,490
now if we see what happens when there's

295
00:11:19,779 --> 00:11:25,630
an additive cheat and the adversary's

296
00:11:21,490 --> 00:11:27,399
contribution the ultimate value that

297
00:11:25,630 --> 00:11:29,380
it's going to induce as an offset

298
00:11:27,399 --> 00:11:30,940
specifically what the adversary has to

299
00:11:29,380 --> 00:11:33,160
compute in order to be able to get away

300
00:11:30,940 --> 00:11:35,140
with the cheat is now a function of Phi

301
00:11:33,160 --> 00:11:37,569
as well which the adversity doesn't know

302
00:11:35,140 --> 00:11:39,370
when he commits gamma I so this make

303
00:11:37,570 --> 00:11:40,779
sure that essentially with probability

304
00:11:39,370 --> 00:11:42,399
one of us the size of the field the

305
00:11:40,779 --> 00:11:45,180
address that he can't get away with

306
00:11:42,399 --> 00:11:47,350
putting any kind of additive cheatin

307
00:11:45,180 --> 00:11:49,060
right so that's how we you verify the

308
00:11:47,350 --> 00:11:51,100
first solution and I won't be speaking

309
00:11:49,060 --> 00:11:53,050
about this now but please leave the

310
00:11:51,100 --> 00:11:55,450
paper feel interested or we use similar

311
00:11:53,050 --> 00:11:58,839
techniques to verify the second pair and

312
00:11:55,450 --> 00:12:02,410
the final pair of relations and roughly

313
00:11:58,839 --> 00:12:04,270
each of these each of these checks costs

314
00:12:02,410 --> 00:12:06,279
per party a couple of exponentiations

315
00:12:04,270 --> 00:12:07,990
and as many field elements to be

316
00:12:06,279 --> 00:12:09,490
transmitted in to broadcast runs but of

317
00:12:07,990 --> 00:12:10,899
course when we batch these together the

318
00:12:09,490 --> 00:12:14,080
cost amortize and you can do on these

319
00:12:10,899 --> 00:12:15,580
and parallels and things like this right

320
00:12:14,080 --> 00:12:17,260
and the final step once we verify that

321
00:12:15,580 --> 00:12:18,880
all the sharings are good is to just

322
00:12:17,260 --> 00:12:21,819
broadcast a linear combination of shares

323
00:12:18,880 --> 00:12:24,100
which is quite simple so looking at the

324
00:12:21,820 --> 00:12:25,570
dominant costs for our protocol we look

325
00:12:24,100 --> 00:12:27,399
at the dimensions of the number of

326
00:12:25,570 --> 00:12:29,680
rounds the publicly operations and the

327
00:12:27,399 --> 00:12:32,680
bandwidth required and we see that the

328
00:12:29,680 --> 00:12:34,569
setup protocol needs five rounds but 500

329
00:12:32,680 --> 00:12:37,870
ish or publicly operations for every

330
00:12:34,570 --> 00:12:39,130
party in the system and 21 times the

331
00:12:37,870 --> 00:12:42,550
number of parties kilobytes to be

332
00:12:39,130 --> 00:12:45,430
transmitted and the signing takes a log

333
00:12:42,550 --> 00:12:46,839
number of parties plus six runs to

334
00:12:45,430 --> 00:12:48,910
produce a signature and only five

335
00:12:46,839 --> 00:12:50,200
exponentiations online with the

336
00:12:48,910 --> 00:12:51,939
bandwidth of about a hundred kilobytes

337
00:12:50,200 --> 00:12:54,730
transmitted for each party in the system

338
00:12:51,940 --> 00:12:56,290
and in the journal version which is in

339
00:12:54,730 --> 00:12:57,730
progress we use the technique of

340
00:12:56,290 --> 00:13:00,219
bar-ilan and b were to get an eighth

341
00:12:57,730 --> 00:13:02,890
round signing protocol it so we

342
00:13:00,220 --> 00:13:04,779
implemented a protocol with a with an

343
00:13:02,890 --> 00:13:07,510
implementation in dust and we

344
00:13:04,779 --> 00:13:09,880
benchmarked it with nodes on Google

345
00:13:07,510 --> 00:13:13,240
Cloud with the node to each party and in

346
00:13:09,880 --> 00:13:14,410
the LAN and when we did we ran our

347
00:13:13,240 --> 00:13:16,060
benchmarks in the land Advanced Settings

348
00:13:14,410 --> 00:13:17,890
up to sixteen zones which I'll speak

349
00:13:16,060 --> 00:13:19,630
about in a minute and to prove that a

350
00:13:17,890 --> 00:13:21,490
protocol is friendly it at the low power

351
00:13:19,630 --> 00:13:23,260
setting we ran benchmark so that as with

352
00:13:21,490 --> 00:13:24,670
raspberry pi devices with three devices

353
00:13:23,260 --> 00:13:26,100
being able to sign in under 100

354
00:13:24,670 --> 00:13:28,599
milliseconds

355
00:13:26,100 --> 00:13:30,430
now it's a setup costs

356
00:13:28,600 --> 00:13:32,410
under 100 milliseconds for up to eight

357
00:13:30,430 --> 00:13:35,020
parties and under half a second for 32

358
00:13:32,410 --> 00:13:37,449
in the land setting and signing costs

359
00:13:35,020 --> 00:13:39,400
under under 30 milliseconds for 16

360
00:13:37,450 --> 00:13:43,360
parties and at the extreme end under

361
00:13:39,400 --> 00:13:45,220
half a second for 256 parties so I'll

362
00:13:43,360 --> 00:13:47,860
ban benchmarks for with well done with

363
00:13:45,220 --> 00:13:50,500
nodes around the world with the heaviest

364
00:13:47,860 --> 00:13:52,180
link between being between Europe and

365
00:13:50,500 --> 00:13:55,600
India at about 350 milliseconds

366
00:13:52,180 --> 00:13:57,219
round-trip time and 5 parties across the

367
00:13:55,600 --> 00:13:59,260
US were able to sign in under 300

368
00:13:57,220 --> 00:14:01,090
milliseconds 16 parties with one each

369
00:13:59,260 --> 00:14:03,280
one in each zone of the world in just

370
00:14:01,090 --> 00:14:04,540
over three seconds and 128 parties

371
00:14:03,280 --> 00:14:09,339
across the world in just over four

372
00:14:04,540 --> 00:14:11,530
seconds so compared with concurrent

373
00:14:09,340 --> 00:14:12,910
works we looked at the land benchmark

374
00:14:11,530 --> 00:14:15,819
setting specifically because that's what

375
00:14:12,910 --> 00:14:18,160
are they implemented as well all figures

376
00:14:15,820 --> 00:14:20,140
are in milliseconds and and that our

377
00:14:18,160 --> 00:14:22,660
clock times which include network costs

378
00:14:20,140 --> 00:14:25,210
are an order of magnitude better than

379
00:14:22,660 --> 00:14:28,569
the next best work even in the low and

380
00:14:25,210 --> 00:14:32,070
high threshold settings and we find the

381
00:14:28,570 --> 00:14:33,940
same to hold for setup costs as well

382
00:14:32,070 --> 00:14:35,380
it's so a quick note on whether

383
00:14:33,940 --> 00:14:38,140
communication is really the bottleneck

384
00:14:35,380 --> 00:14:39,939
so consider a mobile application which

385
00:14:38,140 --> 00:14:42,640
is human initiated that is a bunch of

386
00:14:39,940 --> 00:14:46,120
people on their phones press a button to

387
00:14:42,640 --> 00:14:48,220
be able to get a signature right so it's

388
00:14:46,120 --> 00:14:50,230
let's say four people doing this this is

389
00:14:48,220 --> 00:14:52,420
less than four megabits transmitted per

390
00:14:50,230 --> 00:14:54,310
party which for a responsive application

391
00:14:52,420 --> 00:14:56,709
running on LTE is quite reasonable it's

392
00:14:54,310 --> 00:14:58,689
well within its envelope and on the

393
00:14:56,710 --> 00:15:00,430
other end of use cases consider like a

394
00:14:58,690 --> 00:15:02,530
large-scale automated distributed

395
00:15:00,430 --> 00:15:04,630
signing with a number of servers digged

396
00:15:02,530 --> 00:15:07,089
up together to be able to produce a

397
00:15:04,630 --> 00:15:08,410
number of signatures that's what we're

398
00:15:07,090 --> 00:15:10,870
aiming to optimize here is the

399
00:15:08,410 --> 00:15:15,339
throughput right and just by computation

400
00:15:10,870 --> 00:15:17,200
cost which may demand you is the is

401
00:15:15,340 --> 00:15:19,870
fairly efficient for a scheme like it's

402
00:15:17,200 --> 00:15:22,000
pretty quick on the throughput is

403
00:15:19,870 --> 00:15:23,560
limited to about 260 signatures a second

404
00:15:22,000 --> 00:15:25,780
and the low threshold setting and about

405
00:15:23,560 --> 00:15:27,969
31 a second that you want per second in

406
00:15:25,780 --> 00:15:29,230
the high threshold setting and in both

407
00:15:27,970 --> 00:15:31,810
the settings when you're less than half

408
00:15:29,230 --> 00:15:34,510
a gigabit of data to be transmitted per

409
00:15:31,810 --> 00:15:36,579
party and this is quite reasonable to

410
00:15:34,510 --> 00:15:39,130
assume that we can do this in with

411
00:15:36,580 --> 00:15:41,050
gigabit connections and the like right

412
00:15:39,130 --> 00:15:42,400
so in conclusion we have an efficient

413
00:15:41,050 --> 00:15:44,890
full threshold ECDSA sk

414
00:15:42,400 --> 00:15:47,079
with fully distributed key generation

415
00:15:44,890 --> 00:15:49,120
and paradigm is of producing candidate

416
00:15:47,080 --> 00:15:51,670
shares and verifying which X and the

417
00:15:49,120 --> 00:15:53,350
exponent and this costs just a handful

418
00:15:51,670 --> 00:15:55,540
of exponentiations and few hashes and

419
00:15:53,350 --> 00:15:57,040
some zero knowledge online with no zero

420
00:15:55,540 --> 00:15:58,390
knowledge online sorry and we

421
00:15:57,040 --> 00:16:01,380
instantiate this with assumptions that

422
00:15:58,390 --> 00:16:03,339
are native to the curve of ECDSA and

423
00:16:01,380 --> 00:16:05,140
overall the reproach is light on

424
00:16:03,339 --> 00:16:07,750
computation but communication is quite

425
00:16:05,140 --> 00:16:11,189
practical for many cases as we show with

426
00:16:07,750 --> 00:16:14,900
our benchmarks of our implementation and

427
00:16:11,190 --> 00:16:18,840
thank you I'm happy to take questions

428
00:16:14,900 --> 00:16:18,840
[Applause]

429
00:16:19,080 --> 00:16:22,500
any questions

430
00:16:28,900 --> 00:16:37,050
all right let's thank the speaker again

431
00:16:32,810 --> 00:16:37,050
[Applause]

