1
00:00:08,610 --> 00:00:12,120
hello everyone I'm one today our

2
00:00:11,430 --> 00:00:14,610
president

3
00:00:12,120 --> 00:00:17,340
the work from our group for the info

4
00:00:14,610 --> 00:00:20,540
systems through two-dimensional input

5
00:00:17,340 --> 00:00:20,540
space exploration

6
00:00:22,730 --> 00:00:29,030
so let's first talk about what is five

7
00:00:25,640 --> 00:00:32,000
systems and how users use it so normally

8
00:00:29,030 --> 00:00:35,600
we usually store the data on a disk

9
00:00:32,000 --> 00:00:38,690
image and then we need to first mount it

10
00:00:35,600 --> 00:00:41,960
through the operating systems where the

11
00:00:38,690 --> 00:00:45,320
filesystem module is installed and then

12
00:00:41,960 --> 00:00:48,200
the image is mounted to a specific

13
00:00:45,320 --> 00:00:51,020
folder and then users or applications or

14
00:00:48,200 --> 00:00:56,300
operating systems can access it by

15
00:00:51,020 --> 00:01:00,670
invoking some system calls so here

16
00:00:56,300 --> 00:01:04,849
file systems exposed to attack surfaces

17
00:01:00,670 --> 00:01:08,450
which is the mounting operation where

18
00:01:04,849 --> 00:01:13,929
the disk image is accepted and also the

19
00:01:08,450 --> 00:01:20,509
operations in real world we see a lot of

20
00:01:13,930 --> 00:01:22,640
attacks against file systems so first by

21
00:01:20,509 --> 00:01:26,170
giving some malicious disk images

22
00:01:22,640 --> 00:01:31,160
through malicious USB drives or

23
00:01:26,170 --> 00:01:32,920
untrusted installation packages the box

24
00:01:31,160 --> 00:01:36,850
inside file system can be exploited

25
00:01:32,920 --> 00:01:39,280
through mounting or you know Altamonte

26
00:01:36,850 --> 00:01:42,140
supported by the operating systems and

27
00:01:39,280 --> 00:01:48,679
we can see a lot of real cases such as

28
00:01:42,140 --> 00:01:52,190
some air-gapped apt attacks or some evil

29
00:01:48,679 --> 00:01:56,000
made attacks and also users can attack

30
00:01:52,190 --> 00:01:59,390
ask invoke some Cisco payload on a

31
00:01:56,000 --> 00:02:02,119
monkey disk image to trigger some books

32
00:01:59,390 --> 00:02:09,020
inside file systems we can see a lot of

33
00:02:02,119 --> 00:02:12,200
loot exploits however it is very hard to

34
00:02:09,020 --> 00:02:14,980
eliminate bugs in file systems this is

35
00:02:12,200 --> 00:02:17,839
because AI systems is quite complex and

36
00:02:14,980 --> 00:02:20,079
also it is still under active

37
00:02:17,840 --> 00:02:20,080
development

38
00:02:23,230 --> 00:02:28,700
that's why we choose 40 because fuzzing

39
00:02:26,660 --> 00:02:30,680
is efficient and into them to acquire

40
00:02:28,700 --> 00:02:35,260
much background knowledge about target

41
00:02:30,680 --> 00:02:35,260
and there's also proven to be practical

42
00:02:35,349 --> 00:02:41,899
however is they easy to falsify system

43
00:02:38,989 --> 00:02:46,459
by directly applying existing folding

44
00:02:41,900 --> 00:02:49,400
techniques the answer is no so first we

45
00:02:46,459 --> 00:02:51,440
can force images to be bonded and there

46
00:02:49,400 --> 00:02:54,080
are already a lot of photos like a

47
00:02:51,440 --> 00:02:57,470
fellow a live father which can false

48
00:02:54,080 --> 00:02:59,870
binary blob efficiently and also for

49
00:02:57,470 --> 00:03:03,620
fire operations in fact there are a list

50
00:02:59,870 --> 00:03:09,709
of system calls so we can fast them by

51
00:03:03,620 --> 00:03:11,870
using six color or Trinity but directly

52
00:03:09,709 --> 00:03:14,060
applying these photos to phosphite

53
00:03:11,870 --> 00:03:19,459
systems is not so effective I will

54
00:03:14,060 --> 00:03:23,750
explain the reason so first different

55
00:03:19,459 --> 00:03:26,510
from some other simple binary blob file

56
00:03:23,750 --> 00:03:30,380
systems images are quite large as a

57
00:03:26,510 --> 00:03:33,530
block you can see that I listed the

58
00:03:30,380 --> 00:03:35,989
minimum size of some valid file system

59
00:03:33,530 --> 00:03:39,319
image here and they are much larger than

60
00:03:35,989 --> 00:03:43,040
the suggested file size by FL which is

61
00:03:39,319 --> 00:03:49,040
one megabyte and also file system images

62
00:03:43,040 --> 00:03:50,769
are quite structured besides the playing

63
00:03:49,040 --> 00:03:53,388
user data there are also a lot of

64
00:03:50,769 --> 00:03:55,459
metadata which you use for managing this

65
00:03:53,389 --> 00:03:58,690
user that are by the file systems and

66
00:03:55,459 --> 00:04:01,370
these are the things we want to fuss and

67
00:03:58,690 --> 00:04:04,730
finally many file systems introduce

68
00:04:01,370 --> 00:04:09,650
checksums for integrity checks so if we

69
00:04:04,730 --> 00:04:13,988
just naively mutates these bytes on the

70
00:04:09,650 --> 00:04:17,840
image will violate the checksum checks

71
00:04:13,989 --> 00:04:21,649
so if we directly apply FL to first PI

72
00:04:17,839 --> 00:04:23,719
system images we will suffer from a huge

73
00:04:21,649 --> 00:04:27,500
io cost because of the large size and

74
00:04:23,720 --> 00:04:30,260
also we will rarely touch the metadata

75
00:04:27,500 --> 00:04:34,400
but keep mutating this playing user data

76
00:04:30,260 --> 00:04:35,560
which is not we want and also all the

77
00:04:34,400 --> 00:04:40,818
check sounds may be

78
00:04:35,560 --> 00:04:44,300
crafted after an imitation so that's why

79
00:04:40,819 --> 00:04:47,659
we propose our approach which is

80
00:04:44,300 --> 00:04:50,360
metadata only image fuzzy so simply we

81
00:04:47,659 --> 00:04:53,090
locate and extract all the metadata from

82
00:04:50,360 --> 00:04:58,400
a CD image and during the mutation we

83
00:04:53,090 --> 00:05:03,198
only mutate them so by doing this we

84
00:04:58,400 --> 00:05:04,969
will suffer from very much less io costs

85
00:05:03,199 --> 00:05:08,919
because meta data really occupies a

86
00:05:04,969 --> 00:05:12,979
little portion of a disk image and also

87
00:05:08,919 --> 00:05:14,960
only metadata is mutated and because we

88
00:05:12,979 --> 00:05:17,120
accurately located all the metadata on a

89
00:05:14,960 --> 00:05:22,099
CD image we can easily fix the checksums

90
00:05:17,120 --> 00:05:23,659
after each wrong mutation so next we

91
00:05:22,099 --> 00:05:27,229
will talk about for the entire

92
00:05:23,659 --> 00:05:30,020
operations so in fact a file operations

93
00:05:27,229 --> 00:05:34,068
are list of system calls to be invoked

94
00:05:30,020 --> 00:05:35,930
on some file objects in the image so

95
00:05:34,069 --> 00:05:39,639
there are some interdependence between

96
00:05:35,930 --> 00:05:43,069
these two sides file operations decides

97
00:05:39,639 --> 00:05:46,759
how to operate these file objects and

98
00:05:43,069 --> 00:05:51,889
file objects also decide what file

99
00:05:46,759 --> 00:05:54,229
operations can operate so let's see some

100
00:05:51,889 --> 00:05:58,550
existing file system folders such as

101
00:05:54,229 --> 00:06:00,589
this column they simply wrong based on

102
00:05:58,550 --> 00:06:03,259
some static rules which defines the

103
00:06:00,589 --> 00:06:05,330
definition of the system causes so based

104
00:06:03,259 --> 00:06:07,690
on the system code definition they

105
00:06:05,330 --> 00:06:12,500
generate some arguments which has a

106
00:06:07,690 --> 00:06:14,360
valid type and just random but in the

107
00:06:12,500 --> 00:06:19,060
context of vices and folders and also

108
00:06:14,360 --> 00:06:21,289
effective for example they may a

109
00:06:19,060 --> 00:06:23,360
generates a such system cause like they

110
00:06:21,289 --> 00:06:27,199
create a directory but they try to open

111
00:06:23,360 --> 00:06:29,930
it with read and write or maybe a fire

112
00:06:27,199 --> 00:06:32,779
has already been renamed in the early

113
00:06:29,930 --> 00:06:34,819
stage of the system coalesced but then

114
00:06:32,779 --> 00:06:37,699
they still try to open it and try to

115
00:06:34,819 --> 00:06:41,270
read it so these operations afterwards

116
00:06:37,699 --> 00:06:44,300
are all meaningless and the reason is

117
00:06:41,270 --> 00:06:48,198
because they only care about generating

118
00:06:44,300 --> 00:06:49,100
some synthetically correct file

119
00:06:48,199 --> 00:06:51,110
operations to

120
00:06:49,100 --> 00:06:52,610
preys on fire objects but in fact the

121
00:06:51,110 --> 00:06:55,690
fire objects are also changed

122
00:06:52,610 --> 00:07:00,080
dynamically during the fuzzy but they

123
00:06:55,690 --> 00:07:02,390
ignore this interdependence so that's

124
00:07:00,080 --> 00:07:06,440
why we propose our approach which in the

125
00:07:02,390 --> 00:07:08,450
context were Cisco generation so besides

126
00:07:06,440 --> 00:07:12,530
generating system calls we also

127
00:07:08,450 --> 00:07:15,580
maintained assumed status of the file

128
00:07:12,530 --> 00:07:19,940
system image during fuzzing at runtime

129
00:07:15,580 --> 00:07:24,530
so we speculate the status of every file

130
00:07:19,940 --> 00:07:28,010
objects after each generate system call

131
00:07:24,530 --> 00:07:29,809
executed a long time so you can see with

132
00:07:28,010 --> 00:07:34,310
the given our city image we have the

133
00:07:29,810 --> 00:07:36,200
first vices spiced status and then we

134
00:07:34,310 --> 00:07:38,750
use this status generate the first

135
00:07:36,200 --> 00:07:41,810
system call and then the first engine

136
00:07:38,750 --> 00:07:45,550
call may change some fires we assume a

137
00:07:41,810 --> 00:07:49,520
long time so we will have an updated

138
00:07:45,550 --> 00:07:52,100
status of the file system image and by

139
00:07:49,520 --> 00:07:54,859
doing this in the exact way we can

140
00:07:52,100 --> 00:07:57,970
generate context-aware system calls to

141
00:07:54,860 --> 00:08:02,840
achieve our coverage and find more bugs

142
00:07:57,970 --> 00:08:07,160
and the search challenges of vices and

143
00:08:02,840 --> 00:08:10,789
funding always falling is that existing

144
00:08:07,160 --> 00:08:12,440
system call always follows all first the

145
00:08:10,790 --> 00:08:16,850
target always in a virtual machine

146
00:08:12,440 --> 00:08:19,730
normally and then they never reboot

147
00:08:16,850 --> 00:08:22,420
because rebooting or reverting a

148
00:08:19,730 --> 00:08:25,850
snapshot takes a lot of time however

149
00:08:22,420 --> 00:08:28,160
this brings a very serious side effect

150
00:08:25,850 --> 00:08:31,640
is they are keep using aging kernel

151
00:08:28,160 --> 00:08:34,130
unless the kernel crashes and then it

152
00:08:31,640 --> 00:08:36,380
will leads to unstable kernel execution

153
00:08:34,130 --> 00:08:38,960
and also the bugs are a result of

154
00:08:36,380 --> 00:08:41,570
hundreds of thousands of system calls

155
00:08:38,960 --> 00:08:45,890
invoked in the past which makes the box

156
00:08:41,570 --> 00:08:48,530
over hard to reproduce so to avoid this

157
00:08:45,890 --> 00:08:51,740
our approach is to use libraries instead

158
00:08:48,530 --> 00:08:52,520
of running a real always instance in a

159
00:08:51,740 --> 00:08:57,320
virtual machine

160
00:08:52,520 --> 00:08:59,069
so normally so here we are not fuzzy a

161
00:08:57,320 --> 00:09:01,530
fear in fact

162
00:08:59,070 --> 00:09:04,170
causing a user application so everything

163
00:09:01,530 --> 00:09:06,689
become much simpler we can easily

164
00:09:04,170 --> 00:09:10,770
monitor the coverage easily share the

165
00:09:06,690 --> 00:09:14,570
test case and auto up every time when we

166
00:09:10,770 --> 00:09:18,439
finish testing a test case we can easily

167
00:09:14,570 --> 00:09:23,550
restart the application which has a

168
00:09:18,440 --> 00:09:26,280
little cost and the last challenge of

169
00:09:23,550 --> 00:09:30,180
the infestation fuzzing is that in fact

170
00:09:26,280 --> 00:09:33,510
no existing trolls can force both binary

171
00:09:30,180 --> 00:09:36,599
blob and operations at the same time

172
00:09:33,510 --> 00:09:40,590
simultaneously which in fact are the two

173
00:09:36,600 --> 00:09:44,150
dimensional input for file systems so we

174
00:09:40,590 --> 00:09:48,960
propose Janus which achieve this so

175
00:09:44,150 --> 00:09:52,079
Janice found we will run Janus for 4

176
00:09:48,960 --> 00:09:55,530
months against the a5 systems and we

177
00:09:52,080 --> 00:10:00,170
totally found 90 unique box in these

178
00:09:55,530 --> 00:10:03,120
file systems and which we get 32 CVS and

179
00:10:00,170 --> 00:10:06,209
during this period we check the sis

180
00:10:03,120 --> 00:10:09,890
color and it found and fixed only 8 box

181
00:10:06,210 --> 00:10:14,100
and only one of them is missed by Jesus

182
00:10:09,890 --> 00:10:17,030
so here's the list of the box we found

183
00:10:14,100 --> 00:10:20,820
in main stream file systems on linux

184
00:10:17,030 --> 00:10:23,970
yeah and also some of the box only need

185
00:10:20,820 --> 00:10:29,240
to mount a malicious image to trigger

186
00:10:23,970 --> 00:10:31,920
without invoking any file operations so

187
00:10:29,240 --> 00:10:36,480
however talk about more detail about our

188
00:10:31,920 --> 00:10:39,479
our Father Janus so generous accept seed

189
00:10:36,480 --> 00:10:41,790
images and seed programs and it's for

190
00:10:39,480 --> 00:10:44,880
the engine colonies of the image mutator

191
00:10:41,790 --> 00:10:47,689
and the Cisco folder and then by

192
00:10:44,880 --> 00:10:51,090
generating new mutated image and new

193
00:10:47,690 --> 00:10:53,550
Cisco sequences we use the library or

194
00:10:51,090 --> 00:10:56,040
space executor to mount the mutated

195
00:10:53,550 --> 00:10:58,740
image and executed the generated Cisco

196
00:10:56,040 --> 00:11:01,800
and if there's new coverage we saved

197
00:10:58,740 --> 00:11:06,830
both the image and Cisco if there is

198
00:11:01,800 --> 00:11:06,829
crash then we record also so here

199
00:11:07,160 --> 00:11:12,899
let's first take a look at the image

200
00:11:09,629 --> 00:11:16,079
mutator so we're always given a CD image

201
00:11:12,899 --> 00:11:18,480
we extract the metadata and during each

202
00:11:16,079 --> 00:11:22,498
run we always only mutate the metadata

203
00:11:18,480 --> 00:11:24,420
and if the image helps to find some new

204
00:11:22,499 --> 00:11:27,300
code coverage you also only save the

205
00:11:24,420 --> 00:11:31,649
mutated and metadata blocks and every

206
00:11:27,300 --> 00:11:34,649
time after mutation we really recombine

207
00:11:31,649 --> 00:11:36,360
the mutated metadata with the immutable

208
00:11:34,649 --> 00:11:39,269
user that I wish we are not interested

209
00:11:36,360 --> 00:11:43,470
to release a full sized image and mount

210
00:11:39,269 --> 00:11:45,769
it and here's the details of our Cisco

211
00:11:43,470 --> 00:11:50,009
father so for our Cisco father

212
00:11:45,769 --> 00:11:53,339
this shows the composition of one test

213
00:11:50,009 --> 00:11:56,660
case not only including the program we

214
00:11:53,339 --> 00:12:00,209
also saved the open file descriptor and

215
00:11:56,660 --> 00:12:01,889
stay off by objects and also the

216
00:12:00,209 --> 00:12:05,369
concrete information of all the

217
00:12:01,889 --> 00:12:08,149
live-fire objects after executing the

218
00:12:05,370 --> 00:12:11,370
program at runtime we spec we assume

219
00:12:08,149 --> 00:12:15,839
including their past types and extended

220
00:12:11,370 --> 00:12:17,850
attributes so we always generate the

221
00:12:15,839 --> 00:12:21,360
system code based on the context by

222
00:12:17,850 --> 00:12:23,689
mutating the mutating existing Cisco in

223
00:12:21,360 --> 00:12:26,939
a program or a penny a new one and then

224
00:12:23,689 --> 00:12:29,309
after generating new system code we

225
00:12:26,939 --> 00:12:32,240
should update the context which is also

226
00:12:29,309 --> 00:12:36,809
included in the test case so for example

227
00:12:32,240 --> 00:12:40,290
if we want a sub Cisco onto a pass then

228
00:12:36,809 --> 00:12:43,019
we can check directly pass or fire pass

229
00:12:40,290 --> 00:12:45,059
or even sometimes when we open or make a

230
00:12:43,019 --> 00:12:48,120
new directory we can give a new pass and

231
00:12:45,059 --> 00:12:50,249
then after generating the system call we

232
00:12:48,120 --> 00:12:52,980
need to reflect the change to this

233
00:12:50,249 --> 00:12:55,379
context so if it is open a new path then

234
00:12:52,980 --> 00:12:58,490
we have a new file and then we also will

235
00:12:55,379 --> 00:13:01,589
also have a new file is good and also

236
00:12:58,490 --> 00:13:04,470
Jenna's successfully cooperates these

237
00:13:01,589 --> 00:13:08,819
two photos so we always first invoke

238
00:13:04,470 --> 00:13:11,490
image mutator this is because image the

239
00:13:08,819 --> 00:13:14,878
disk image in fact it represents the

240
00:13:11,490 --> 00:13:17,490
initial status of a file system so after

241
00:13:14,879 --> 00:13:19,970
the time flies more and more fire

242
00:13:17,490 --> 00:13:21,560
operations are evoked its impact

243
00:13:19,970 --> 00:13:24,950
become less and less so we always

244
00:13:21,560 --> 00:13:27,109
militate image first and do not mute a

245
00:13:24,950 --> 00:13:29,870
program so if there's no progress then

246
00:13:27,110 --> 00:13:32,030
we try to generate a new program that

247
00:13:29,870 --> 00:13:36,770
appending new discourse or mutating

248
00:13:32,030 --> 00:13:38,930
existing system calls so here's the

249
00:13:36,770 --> 00:13:42,170
implementation of Janus so generously

250
00:13:38,930 --> 00:13:44,689
implemented based upon a FL so we reuse

251
00:13:42,170 --> 00:13:47,839
the AFL's binary block mutation

252
00:13:44,690 --> 00:13:50,840
algorithm which is which also fit for

253
00:13:47,840 --> 00:13:55,490
mutating the metadata blocks but we need

254
00:13:50,840 --> 00:14:00,140
to implement our own Cisco Cisco buzzer

255
00:13:55,490 --> 00:14:01,820
and also we select L care of the Linux

256
00:14:00,140 --> 00:14:05,240
kernel library as our library or a

257
00:14:01,820 --> 00:14:08,270
solution which contains the Cisco

258
00:14:05,240 --> 00:14:09,860
executor and also we had introduced the

259
00:14:08,270 --> 00:14:12,500
kernel just and it has the support

260
00:14:09,860 --> 00:14:15,740
entity which is very popular for finding

261
00:14:12,500 --> 00:14:18,350
box and also we instrument for coverage

262
00:14:15,740 --> 00:14:20,560
so our photos about eight mainstream

263
00:14:18,350 --> 00:14:24,160
file system on Linux and supports 34

264
00:14:20,560 --> 00:14:29,030
system costs which is really related to

265
00:14:24,160 --> 00:14:33,110
operate team fight fires and here's the

266
00:14:29,030 --> 00:14:35,959
evaluation so first we want to see if

267
00:14:33,110 --> 00:14:40,460
using a libraries is really better than

268
00:14:35,960 --> 00:14:43,070
following a vm and by running for 12

269
00:14:40,460 --> 00:14:45,880
hours on these 4 5 system you can see

270
00:14:43,070 --> 00:14:50,630
channels can reproduce most of the box

271
00:14:45,880 --> 00:14:55,820
after 40 but sis caller fails to

272
00:14:50,630 --> 00:14:58,370
reproduce any of its phone crash and

273
00:14:55,820 --> 00:15:01,940
also we want to see if Jenna's image

274
00:14:58,370 --> 00:15:05,690
mutated performs better so in this

275
00:15:01,940 --> 00:15:08,920
experiment we fix the payload to operate

276
00:15:05,690 --> 00:15:12,140
our monkey to file systems but we only

277
00:15:08,920 --> 00:15:14,360
to make we only make Janis and Cisco

278
00:15:12,140 --> 00:15:15,800
love mutates the image to be mounted and

279
00:15:14,360 --> 00:15:19,460
you can see

280
00:15:15,800 --> 00:15:22,760
Janis performs better 1.5 times better

281
00:15:19,460 --> 00:15:25,190
than see scholar on XT 4 and much much

282
00:15:22,760 --> 00:15:27,439
better on XSS it's because it has

283
00:15:25,190 --> 00:15:32,540
checksums and cisco low just

284
00:15:27,440 --> 00:15:33,080
mutates this data on image it cannot fix

285
00:15:32,540 --> 00:15:35,180
the check

286
00:15:33,080 --> 00:15:38,050
after meditation so its cover is quite

287
00:15:35,180 --> 00:15:39,380
low and also generous for the Cisco

288
00:15:38,050 --> 00:15:41,750
better

289
00:15:39,380 --> 00:15:44,240
in this experiment we only for Cisco's

290
00:15:41,750 --> 00:15:46,130
without mutating image so every time

291
00:15:44,240 --> 00:15:49,010
among the same image you can see also

292
00:15:46,130 --> 00:15:51,290
Jenny's performance 1.2 times to 1.5

293
00:15:49,010 --> 00:15:54,760
times better on these popular file

294
00:15:51,290 --> 00:15:59,360
systems and this is overall evaluation

295
00:15:54,760 --> 00:16:02,420
so in this experiment we first we make

296
00:15:59,360 --> 00:16:05,810
Janus first both input and also sis

297
00:16:02,420 --> 00:16:09,050
colorful suppose input and here first

298
00:16:05,810 --> 00:16:11,359
thing is when jealous mutate both input

299
00:16:09,050 --> 00:16:15,649
it achieved higher previously mutated

300
00:16:11,360 --> 00:16:19,640
only image or only Cisco and also its

301
00:16:15,649 --> 00:16:21,620
performance 4.2 times better then 6

302
00:16:19,640 --> 00:16:23,510
color unfolding the bottom face we

303
00:16:21,620 --> 00:16:26,620
should consider the one of the most

304
00:16:23,510 --> 00:16:30,760
complicated file systems widely used and

305
00:16:26,620 --> 00:16:35,140
here we used a large seat 128 megabytes

306
00:16:30,760 --> 00:16:38,149
to further show that generous performs

307
00:16:35,140 --> 00:16:43,149
better than 6 color regarding file

308
00:16:38,149 --> 00:16:46,550
system poly we believe Janice is a

309
00:16:43,149 --> 00:16:50,020
practical one-stop solutions for all

310
00:16:46,550 --> 00:16:52,880
kinds of file system testing so

311
00:16:50,020 --> 00:16:55,640
developers or researchers can use Janice

312
00:16:52,880 --> 00:16:58,730
to testing other types of vices and

313
00:16:55,640 --> 00:17:03,220
other operating system easily by porting

314
00:16:58,730 --> 00:17:05,990
our file system 14 core engine and also

315
00:17:03,220 --> 00:17:08,360
the this work only focused on finding

316
00:17:05,990 --> 00:17:11,089
memory crashing bus but it can be easily

317
00:17:08,359 --> 00:17:15,020
ported to find some other vices and loss

318
00:17:11,089 --> 00:17:18,790
box which developers really care like

319
00:17:15,020 --> 00:17:22,790
crack consistency or semantic practice

320
00:17:18,790 --> 00:17:25,730
and also we use libraries which we

321
00:17:22,790 --> 00:17:28,359
believe is also very good inspiration

322
00:17:25,730 --> 00:17:31,730
for other operating systems for the

323
00:17:28,359 --> 00:17:34,490
research so further work is supported by

324
00:17:31,730 --> 00:17:38,440
Google faculty researcher word and we

325
00:17:34,490 --> 00:17:38,440
will open source our further

326
00:17:44,290 --> 00:17:54,110
so any questions please step to the

327
00:17:47,900 --> 00:17:56,360
microphone I have a question you seem to

328
00:17:54,110 --> 00:17:59,899
take away part of the kernel so that you

329
00:17:56,360 --> 00:18:02,629
can do the fuzzing in userland there are

330
00:17:59,900 --> 00:18:04,190
a lot of bugs in in a special in file

331
00:18:02,630 --> 00:18:05,900
system that are caused by race

332
00:18:04,190 --> 00:18:09,140
conditions as we have seen from another

333
00:18:05,900 --> 00:18:11,720
paper how do you deal with that also in

334
00:18:09,140 --> 00:18:16,130
fact Lunas collaborated and support the

335
00:18:11,720 --> 00:18:21,169
SMP we cannot launch to more than one

336
00:18:16,130 --> 00:18:25,400
stress in this library OS so we don't we

337
00:18:21,169 --> 00:18:35,630
didn't find any box yes not supported

338
00:18:25,400 --> 00:18:38,240
yeah any more questions I have one

339
00:18:35,630 --> 00:18:41,179
question you 32 more please mostly

340
00:18:38,240 --> 00:18:43,070
focused on metadata mutation to sort of

341
00:18:41,179 --> 00:18:44,690
be more efficient if you sort of looked

342
00:18:43,070 --> 00:18:46,939
at all at the structure of that metadata

343
00:18:44,690 --> 00:18:48,890
in some sense similar to what we heard

344
00:18:46,940 --> 00:18:50,870
in earlier talks on sort of you know

345
00:18:48,890 --> 00:18:55,660
changing method that is more likely to

346
00:18:50,870 --> 00:18:59,479
increase code coverage or create crashes

347
00:18:55,660 --> 00:19:04,190
yeah we only we folk only focus on

348
00:18:59,480 --> 00:19:06,169
mutating metadata because we think

349
00:19:04,190 --> 00:19:11,390
mutating user data seems to be

350
00:19:06,169 --> 00:19:14,150
meaningless to say a minister is

351
00:19:11,390 --> 00:19:16,820
steering on particular types of metadata

352
00:19:14,150 --> 00:19:20,540
to change the know when it hit all the

353
00:19:16,820 --> 00:19:23,750
metadata so we parsed we make parser for

354
00:19:20,540 --> 00:19:27,860
each file system and we fully passed an

355
00:19:23,750 --> 00:19:30,049
image and get all its metadata okay

356
00:19:27,860 --> 00:19:33,110
thank you yeah there's no we don't

357
00:19:30,049 --> 00:19:36,090
differentiate different metal it all

358
00:19:33,110 --> 00:19:38,149
right let's thank the speaker

359
00:19:36,090 --> 00:19:38,149
you

