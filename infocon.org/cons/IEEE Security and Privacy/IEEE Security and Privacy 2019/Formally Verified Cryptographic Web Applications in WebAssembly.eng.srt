1
00:00:09,000 --> 00:00:13,620
thank you I'm here to tell you today

2
00:00:11,550 --> 00:00:16,380
about a new tool chain that we developed

3
00:00:13,620 --> 00:00:18,090
that allows you to formally verify your

4
00:00:16,379 --> 00:00:19,740
web applications and especially your

5
00:00:18,090 --> 00:00:23,090
cryptographic ones while targeting

6
00:00:19,740 --> 00:00:25,560
webassembly this is joint work with

7
00:00:23,090 --> 00:00:27,060
friends that INRIA and this is a

8
00:00:25,560 --> 00:00:30,418
collaboration that's part of the greater

9
00:00:27,060 --> 00:00:32,519
everest project alright so the web - the

10
00:00:30,419 --> 00:00:34,440
h20 19 the web is not just on the web

11
00:00:32,520 --> 00:00:36,000
it's pretty much everywhere and when

12
00:00:34,440 --> 00:00:38,370
you're writing applications these days a

13
00:00:36,000 --> 00:00:41,190
natural choice is to use the web runtime

14
00:00:38,370 --> 00:00:44,430
in particular JavaScript that's valid

15
00:00:41,190 --> 00:00:46,470
for web sites desktop apps that execute

16
00:00:44,430 --> 00:00:48,240
through the elektron framework that's

17
00:00:46,470 --> 00:00:50,100
valid for server apps that execute

18
00:00:48,240 --> 00:00:51,420
through nodejs and of course there's

19
00:00:50,100 --> 00:00:54,200
browser add-ons in all sorts of

20
00:00:51,420 --> 00:00:56,820
situations when you find yourself using

21
00:00:54,200 --> 00:01:00,990
javascript and the web runtime as your

22
00:00:56,820 --> 00:01:02,490
target and my question is here what do

23
00:01:00,990 --> 00:01:04,860
we do when we have security sensitive

24
00:01:02,490 --> 00:01:06,930
applications think about say a password

25
00:01:04,860 --> 00:01:09,720
manager that will either case sorry in

26
00:01:06,930 --> 00:01:12,630
the case of a browser add-on or think

27
00:01:09,720 --> 00:01:15,030
about signal desktop that also runs with

28
00:01:12,630 --> 00:01:17,820
electron our whatsapp web that runs on a

29
00:01:15,030 --> 00:01:19,860
website and the situation is pretty dire

30
00:01:17,820 --> 00:01:23,250
when you want to have high confidence

31
00:01:19,860 --> 00:01:26,100
and high security results for the web

32
00:01:23,250 --> 00:01:28,260
apps that execute in that context first

33
00:01:26,100 --> 00:01:29,580
of all imagine that you have a custom

34
00:01:28,260 --> 00:01:31,890
cryptographic scheme that is not

35
00:01:29,580 --> 00:01:33,630
supported by the web crypto API or by

36
00:01:31,890 --> 00:01:35,460
your nodejs package then you're pretty

37
00:01:33,630 --> 00:01:37,470
much on your own if you have an ad-hoc

38
00:01:35,460 --> 00:01:39,000
protocol you're on your own as well and

39
00:01:37,470 --> 00:01:41,190
oftentimes because you're targeting

40
00:01:39,000 --> 00:01:42,659
JavaScript it is extremely hard to

41
00:01:41,190 --> 00:01:44,729
reason about where your application is

42
00:01:42,659 --> 00:01:46,500
doing you have a language whose

43
00:01:44,729 --> 00:01:49,590
semantics are notoriously challenging

44
00:01:46,500 --> 00:01:51,600
that have led to work such as defensive

45
00:01:49,590 --> 00:01:53,400
GS that are trying to compensate for the

46
00:01:51,600 --> 00:01:55,798
weaknesses in the semantics you have no

47
00:01:53,400 --> 00:01:58,860
isolation guarantees anyone can modify

48
00:01:55,799 --> 00:02:01,350
your prototype life is hard and I claim

49
00:01:58,860 --> 00:02:03,030
that javascript is a hostile target

50
00:02:01,350 --> 00:02:05,880
environment for security sensitive

51
00:02:03,030 --> 00:02:07,830
applications and as such that the

52
00:02:05,880 --> 00:02:09,239
JavaScript tool chain is inadequate when

53
00:02:07,830 --> 00:02:10,769
you want to have strong security

54
00:02:09,239 --> 00:02:12,930
guarantees for the programs you compile

55
00:02:10,769 --> 00:02:15,360
to your web runtime environment what

56
00:02:12,930 --> 00:02:17,310
we're introducing in this paper is a

57
00:02:15,360 --> 00:02:19,440
brand new tool chain that allows you to

58
00:02:17,310 --> 00:02:21,390
compile from F star and in particular

59
00:02:19,440 --> 00:02:24,180
it's subset called low

60
00:02:21,390 --> 00:02:25,980
star all the way to webassembly with a

61
00:02:24,180 --> 00:02:27,810
paper formalization that tells you

62
00:02:25,980 --> 00:02:30,239
clearly what is happening the read

63
00:02:27,810 --> 00:02:31,920
interests nation and a companion

64
00:02:30,240 --> 00:02:34,530
implementation that allows you to

65
00:02:31,920 --> 00:02:36,869
actually execute a translation and

66
00:02:34,530 --> 00:02:40,110
compile your programs from F star to

67
00:02:36,870 --> 00:02:41,640
webassembly in short our contributions

68
00:02:40,110 --> 00:02:43,950
are as follows we have a generic

69
00:02:41,640 --> 00:02:45,359
toolchain both in terms of formalization

70
00:02:43,950 --> 00:02:48,179
and implementation that targets

71
00:02:45,360 --> 00:02:50,640
webassembly we have applied this tool

72
00:02:48,180 --> 00:02:52,380
chain to an existing project namely the

73
00:02:50,640 --> 00:02:54,390
hack of star high assurance crypto

74
00:02:52,380 --> 00:02:57,420
library which means that now you can use

75
00:02:54,390 --> 00:02:58,799
hack of star on webassembly for all of

76
00:02:57,420 --> 00:03:01,559
your cryptographic needs in a web

77
00:02:58,800 --> 00:03:03,269
environment and we also wrote a formally

78
00:03:01,560 --> 00:03:05,730
verified implementation of the signal

79
00:03:03,269 --> 00:03:06,330
protocol in F star and we compiled it to

80
00:03:05,730 --> 00:03:08,549
webassembly

81
00:03:06,330 --> 00:03:10,200
this implementation is verified for

82
00:03:08,550 --> 00:03:12,630
functional correctness it does the right

83
00:03:10,200 --> 00:03:14,070
thing memory safety the wesam code is

84
00:03:12,630 --> 00:03:15,959
not going to crash with an out of Duns

85
00:03:14,070 --> 00:03:17,850
error site channel resistance and

86
00:03:15,959 --> 00:03:19,170
protocol security there is no

87
00:03:17,850 --> 00:03:20,910
performance penalty and our

88
00:03:19,170 --> 00:03:22,799
implementation is ready to integrate if

89
00:03:20,910 --> 00:03:25,290
you're already using signal because it

90
00:03:22,800 --> 00:03:27,450
offers the same API and the remainder of

91
00:03:25,290 --> 00:03:29,130
this talk I'm gonna use signal as a

92
00:03:27,450 --> 00:03:30,958
running example to go over all of these

93
00:03:29,130 --> 00:03:32,540
points and show you a little bit more

94
00:03:30,959 --> 00:03:35,579
detail how we securely compile

95
00:03:32,540 --> 00:03:37,078
applications to web assembly so just a

96
00:03:35,579 --> 00:03:39,959
little bit of background in single first

97
00:03:37,079 --> 00:03:43,530
signal is a secure communications

98
00:03:39,959 --> 00:03:45,630
protocol that targets that is used by a

99
00:03:43,530 --> 00:03:47,040
bunch of applications such as whatsapp

100
00:03:45,630 --> 00:03:50,010
which claims over a billion users

101
00:03:47,040 --> 00:03:53,040
Facebook messenger Skype and signal

102
00:03:50,010 --> 00:03:55,019
itself one key feature signal is that

103
00:03:53,040 --> 00:03:56,880
allows you to communicate asynchronously

104
00:03:55,019 --> 00:03:59,220
like many other protocols now do these

105
00:03:56,880 --> 00:04:01,170
days it relies on a server with limited

106
00:03:59,220 --> 00:04:03,329
trust that holds some key material and

107
00:04:01,170 --> 00:04:06,119
generally it goes along with a trust and

108
00:04:03,329 --> 00:04:07,860
first use policy let's start with a

109
00:04:06,120 --> 00:04:10,980
quick overview of the protocol in a very

110
00:04:07,860 --> 00:04:14,549
simplified manner we have Alice a server

111
00:04:10,980 --> 00:04:16,168
and Bob Alice is offline she's grayed

112
00:04:14,549 --> 00:04:19,048
out and Bob is sending public key

113
00:04:16,168 --> 00:04:20,760
material from the server later on Alice

114
00:04:19,048 --> 00:04:22,799
wants to start chatting with Bob so she

115
00:04:20,760 --> 00:04:25,050
gets the key bundle of Bob from the

116
00:04:22,800 --> 00:04:26,940
server and then proceeds to do what's

117
00:04:25,050 --> 00:04:28,919
called a triple diffie-hellman to

118
00:04:26,940 --> 00:04:30,840
generate a first key followed by another

119
00:04:28,919 --> 00:04:31,620
fancy step called a diffie-hellman

120
00:04:30,840 --> 00:04:34,260
ratchet

121
00:04:31,620 --> 00:04:34,940
that gives her two keys one of which is

122
00:04:34,260 --> 00:04:36,560
the root key

123
00:04:34,940 --> 00:04:38,780
the other one is the chain key this

124
00:04:36,560 --> 00:04:41,960
allows Alice to encrypt a first message

125
00:04:38,780 --> 00:04:43,520
using CK one the chain key along with

126
00:04:41,960 --> 00:04:46,940
her public key material and send it to

127
00:04:43,520 --> 00:04:48,859
the server the message says hey Bob in a

128
00:04:46,940 --> 00:04:50,990
third kind of step which is called a

129
00:04:48,860 --> 00:04:51,740
symmetric key Bechet Alice is deriving a

130
00:04:50,990 --> 00:04:53,840
second

131
00:04:51,740 --> 00:04:55,730
chain key for the next message that says

132
00:04:53,840 --> 00:04:58,190
where's the secret stash and also sends

133
00:04:55,730 --> 00:05:00,800
it to the server later on Alice can

134
00:04:58,190 --> 00:05:02,690
continue sending messages Alice can go

135
00:05:00,800 --> 00:05:04,340
offline at which case Bob wants to check

136
00:05:02,690 --> 00:05:06,740
out what messages are waiting for him on

137
00:05:04,340 --> 00:05:08,799
the server and he gets the first M one

138
00:05:06,740 --> 00:05:11,570
message plus Alice's key material

139
00:05:08,800 --> 00:05:13,370
performs the exact same fancy triple

140
00:05:11,570 --> 00:05:15,349
diffie-hellman followed by a DC Hammond

141
00:05:13,370 --> 00:05:18,710
ratchet and is subsequently able to

142
00:05:15,350 --> 00:05:20,690
decrypt a message later on Bob also gets

143
00:05:18,710 --> 00:05:22,310
the second message performs the same

144
00:05:20,690 --> 00:05:24,500
step as Alice and is also able to

145
00:05:22,310 --> 00:05:26,630
decrypt a message and if Bob wants to

146
00:05:24,500 --> 00:05:28,220
send some stuff back Bob can do the

147
00:05:26,630 --> 00:05:30,500
diffie-hellman ratchet to generate a new

148
00:05:28,220 --> 00:05:32,420
grid key this is important the chain key

149
00:05:30,500 --> 00:05:33,860
gives you forward secrecy and the root

150
00:05:32,420 --> 00:05:35,300
key gives you post compromised security

151
00:05:33,860 --> 00:05:37,190
Annie

152
00:05:35,300 --> 00:05:39,710
Bob says the secret stash is at Oakland

153
00:05:37,190 --> 00:05:42,050
etc so what are the key points about

154
00:05:39,710 --> 00:05:43,700
signal we're taking signal IDs it is

155
00:05:42,050 --> 00:05:45,560
we're just interested in implementing it

156
00:05:43,700 --> 00:05:47,960
the key points about signal is that

157
00:05:45,560 --> 00:05:49,220
signal is offensive protocol it has many

158
00:05:47,960 --> 00:05:51,409
different steps it's use triple

159
00:05:49,220 --> 00:05:53,600
diffie-hellman and a double ratchet and

160
00:05:51,410 --> 00:05:56,330
it revolves a bunch of non-trivial

161
00:05:53,600 --> 00:05:59,450
cryptographic algorithms the ducts are

162
00:05:56,330 --> 00:06:01,909
online so how are we going to use our

163
00:05:59,450 --> 00:06:03,919
framework to verify an implementation of

164
00:06:01,910 --> 00:06:06,230
signal and compile it all the way to Ed

165
00:06:03,919 --> 00:06:09,380
assembly there's four big steps

166
00:06:06,230 --> 00:06:11,720
the first one is specifying the protocol

167
00:06:09,380 --> 00:06:14,360
we build on previous work that was

168
00:06:11,720 --> 00:06:16,669
published at urs and p17 and we write a

169
00:06:14,360 --> 00:06:19,760
complete model of signal using the probe

170
00:06:16,669 --> 00:06:22,640
arif symbolic verification tool this

171
00:06:19,760 --> 00:06:24,669
tool says the protocol looks fine I can

172
00:06:22,640 --> 00:06:27,260
check that the protocol has integrity

173
00:06:24,669 --> 00:06:29,690
confidentiality forward secrecy and post

174
00:06:27,260 --> 00:06:31,580
compromised security the way that these

175
00:06:29,690 --> 00:06:33,020
things look when you draw them in the

176
00:06:31,580 --> 00:06:35,419
papers that you basically have a little

177
00:06:33,020 --> 00:06:37,940
diagram with messages and key protocol

178
00:06:35,419 --> 00:06:39,620
actions such as initiate that basically

179
00:06:37,940 --> 00:06:41,570
describe in a very precise manner what I

180
00:06:39,620 --> 00:06:44,720
was doing informally with Alice and Bob

181
00:06:41,570 --> 00:06:47,479
so let's look at the initiate step and

182
00:06:44,720 --> 00:06:48,020
this step in particular what we do is

183
00:06:47,479 --> 00:06:49,818
that we

184
00:06:48,020 --> 00:06:52,219
take our protocol description that we

185
00:06:49,819 --> 00:06:56,060
wrote in prove Arif and we transcribe it

186
00:06:52,220 --> 00:06:58,849
into F star so word about F star F star

187
00:06:56,060 --> 00:07:01,280
is an ml like programming language think

188
00:06:58,849 --> 00:07:02,810
oh camel F sharp that allows you to

189
00:07:01,280 --> 00:07:05,059
perform program very program

190
00:07:02,810 --> 00:07:08,360
verification using SMT solvers to

191
00:07:05,060 --> 00:07:10,729
automate those groups such as z3 the

192
00:07:08,360 --> 00:07:12,770
specifications that rewrites in F star

193
00:07:10,729 --> 00:07:14,060
or a little more detailed than the ones

194
00:07:12,770 --> 00:07:16,370
in fervor if they might include some

195
00:07:14,060 --> 00:07:18,169
tags for instance and the transcription

196
00:07:16,370 --> 00:07:20,389
from probe Arif to F star is currently

197
00:07:18,169 --> 00:07:21,830
done by hand and we manually added the

198
00:07:20,389 --> 00:07:23,840
two set by side to make sure that it's

199
00:07:21,830 --> 00:07:26,180
the same we're hoping to automate it in

200
00:07:23,840 --> 00:07:28,219
the future these specifications are not

201
00:07:26,180 --> 00:07:30,409
suitable for implementation or

202
00:07:28,220 --> 00:07:32,960
compilation but we can still test them

203
00:07:30,409 --> 00:07:34,669
by extracting them from a start to a

204
00:07:32,960 --> 00:07:36,440
camel just for a sanity check and

205
00:07:34,669 --> 00:07:39,680
convince ourselves that we have the

206
00:07:36,440 --> 00:07:43,039
right specification to start from the

207
00:07:39,680 --> 00:07:46,099
next step is actually implementing code

208
00:07:43,039 --> 00:07:47,599
that matches the specification so if

209
00:07:46,099 --> 00:07:48,919
we're going to implement signal we're

210
00:07:47,599 --> 00:07:50,840
going to need some code to do the base

211
00:07:48,919 --> 00:07:52,729
cryptographic primitives and for that

212
00:07:50,840 --> 00:07:56,090
we'll reuse the existing hacker store

213
00:07:52,729 --> 00:07:59,930
library HECO store is driven by an RIA

214
00:07:56,090 --> 00:08:02,000
it's a set of cryptographic algorithms

215
00:07:59,930 --> 00:08:03,919
that are written in that special subset

216
00:08:02,000 --> 00:08:06,229
of F store called blue star and that

217
00:08:03,919 --> 00:08:08,389
compiled to C code Heco's star has been

218
00:08:06,229 --> 00:08:12,169
integrated in Firefox the wire guard VPN

219
00:08:08,389 --> 00:08:13,909
and bet TLS etc etc so the first

220
00:08:12,169 --> 00:08:16,190
consequence of our new tool chain is

221
00:08:13,909 --> 00:08:17,569
that hacker star becomes available on

222
00:08:16,190 --> 00:08:19,310
the weight and that's just as a side

223
00:08:17,569 --> 00:08:21,560
effect because we're going to need some

224
00:08:19,310 --> 00:08:23,150
cryptographic libraries and we think

225
00:08:21,560 --> 00:08:25,219
that just that feels an important gap

226
00:08:23,150 --> 00:08:28,940
because signal uses some custom

227
00:08:25,219 --> 00:08:30,979
cryptography they have a custom 55 on an

228
00:08:28,940 --> 00:08:32,690
operation and some of the primitives

229
00:08:30,979 --> 00:08:35,299
that single uses are not even available

230
00:08:32,690 --> 00:08:37,370
in web crypto so just that demonstrates

231
00:08:35,299 --> 00:08:39,799
the usefulness of having a compilations

232
00:08:37,370 --> 00:08:43,610
came from the cryptographic library from

233
00:08:39,799 --> 00:08:45,500
F star to the web other advantages of

234
00:08:43,610 --> 00:08:47,720
just that of just compelling heiko star

235
00:08:45,500 --> 00:08:50,360
to web assembly is that we now offer a

236
00:08:47,720 --> 00:08:52,220
synchronous API the web crypto API

237
00:08:50,360 --> 00:08:54,320
that's available by default for webpages

238
00:08:52,220 --> 00:08:57,260
is asynchronous and you can't always

239
00:08:54,320 --> 00:08:59,360
call asynchronous code from your code so

240
00:08:57,260 --> 00:09:00,960
our library is callable in synchronous

241
00:08:59,360 --> 00:09:03,060
mode and it also avoids

242
00:09:00,960 --> 00:09:04,500
the need for legacy libraries that one

243
00:09:03,060 --> 00:09:06,869
might want to use if they're running on

244
00:09:04,500 --> 00:09:09,000
node and one to use the OpenSSL bindings

245
00:09:06,870 --> 00:09:11,280
for node so that's the first step for

246
00:09:09,000 --> 00:09:13,380
the implementation repurpose the hacker

247
00:09:11,280 --> 00:09:15,480
star library to be compatible to have

248
00:09:13,380 --> 00:09:17,130
assembly the second step is now that we

249
00:09:15,480 --> 00:09:19,650
have the core building blocks to curl

250
00:09:17,130 --> 00:09:22,110
algorithms is to implement the core

251
00:09:19,650 --> 00:09:24,360
operations of the signal protocol so for

252
00:09:22,110 --> 00:09:26,250
instance the initiate operation that I

253
00:09:24,360 --> 00:09:29,100
was talking about is something that

254
00:09:26,250 --> 00:09:30,960
we're going to implement in F star using

255
00:09:29,100 --> 00:09:33,420
the cryptographic primitives from hackle

256
00:09:30,960 --> 00:09:35,220
start the language that we're using for

257
00:09:33,420 --> 00:09:37,020
that purpose and I've mentioned it

258
00:09:35,220 --> 00:09:39,240
before it's called look star it's a

259
00:09:37,020 --> 00:09:41,579
subset of F star that would normally

260
00:09:39,240 --> 00:09:43,890
compile to see but in this work we

261
00:09:41,580 --> 00:09:47,220
repurpose the target of this language

262
00:09:43,890 --> 00:09:48,689
from C to webassembly unless star is the

263
00:09:47,220 --> 00:09:50,580
language that has been used to write

264
00:09:48,690 --> 00:09:52,800
high cost or the library or crypto

265
00:09:50,580 --> 00:09:54,480
primitives but also a larger provider

266
00:09:52,800 --> 00:09:56,790
called ever crypt and implementation of

267
00:09:54,480 --> 00:09:58,260
Merkle trees a cryptographic library for

268
00:09:56,790 --> 00:10:01,140
the quic protocol and many other

269
00:09:58,260 --> 00:10:03,780
software projects so now we have an

270
00:10:01,140 --> 00:10:05,430
implementation of the signal protocol

271
00:10:03,780 --> 00:10:08,430
written in that language called blue

272
00:10:05,430 --> 00:10:09,930
star the implementation of signal uses

273
00:10:08,430 --> 00:10:12,390
HECO star for the cryptographic

274
00:10:09,930 --> 00:10:14,250
primitives and by default because it's

275
00:10:12,390 --> 00:10:16,020
written in the star it's going to compel

276
00:10:14,250 --> 00:10:18,000
to see what we're going to do is instead

277
00:10:16,020 --> 00:10:21,600
of compiling it to see we target it to

278
00:10:18,000 --> 00:10:22,170
web assembly so why compile to web

279
00:10:21,600 --> 00:10:25,500
assembly

280
00:10:22,170 --> 00:10:27,599
first of all web assembly is a new safe

281
00:10:25,500 --> 00:10:30,240
widely supported target for fast

282
00:10:27,600 --> 00:10:33,300
portable execution think of it as a

283
00:10:30,240 --> 00:10:35,580
bytecode ir for the web that is widely

284
00:10:33,300 --> 00:10:37,380
supported all major browsers implemented

285
00:10:35,580 --> 00:10:39,030
and there's even more use cases that are

286
00:10:37,380 --> 00:10:40,470
popping up and the really good thing

287
00:10:39,030 --> 00:10:42,990
about web as symbol is that it has

288
00:10:40,470 --> 00:10:45,120
clear-cut semantics there's a pl di

289
00:10:42,990 --> 00:10:46,950
paper that will tell you very precisely

290
00:10:45,120 --> 00:10:49,410
what the execution semantics of it are

291
00:10:46,950 --> 00:10:51,810
it has an operand stack that is well

292
00:10:49,410 --> 00:10:53,910
typed it has structured control flow you

293
00:10:51,810 --> 00:10:55,829
can jump into anywhere and it has strong

294
00:10:53,910 --> 00:10:58,260
isolation guarantees your code runs in

295
00:10:55,830 --> 00:10:59,730
the wizened memory and that means that

296
00:10:58,260 --> 00:11:01,740
all of the limitations that we had

297
00:10:59,730 --> 00:11:04,320
previously because we were targeting

298
00:11:01,740 --> 00:11:05,880
JavaScript are replaced in favor of

299
00:11:04,320 --> 00:11:08,570
something that has a lot more structure

300
00:11:05,880 --> 00:11:11,970
and that it has a lot more guarantees

301
00:11:08,570 --> 00:11:14,400
wasum is supported as a target by many

302
00:11:11,970 --> 00:11:16,410
compilers such as LVM

303
00:11:14,400 --> 00:11:18,569
Emscripten which also uses LLVM

304
00:11:16,410 --> 00:11:20,730
livlihood mono in it has been used so

305
00:11:18,570 --> 00:11:23,160
far for video games or large

306
00:11:20,730 --> 00:11:24,660
applications so webassembly is happening

307
00:11:23,160 --> 00:11:26,250
and now we're going to use that as our

308
00:11:24,660 --> 00:11:29,100
target for our signal

309
00:11:26,250 --> 00:11:31,860
implementation so just to sum things up

310
00:11:29,100 --> 00:11:34,440
we formalize a verified pipeline from

311
00:11:31,860 --> 00:11:36,570
probe F which we transcribe to in F star

312
00:11:34,440 --> 00:11:38,490
specification we implement that

313
00:11:36,570 --> 00:11:40,380
specification with efficient code and

314
00:11:38,490 --> 00:11:43,050
now we compile using a dedicated

315
00:11:40,380 --> 00:11:47,460
compiler that implementation of signal

316
00:11:43,050 --> 00:11:50,040
to webassembly another thing to realize

317
00:11:47,460 --> 00:11:54,270
is that if you're using the default

318
00:11:50,040 --> 00:11:56,730
tools that are available you might have

319
00:11:54,270 --> 00:11:59,339
a little overhead but with us what we

320
00:11:56,730 --> 00:12:02,339
have is a very simple translation that

321
00:11:59,339 --> 00:12:04,710
fits in two pages of the paper it's

322
00:12:02,339 --> 00:12:06,690
compact it's editable and simple which

323
00:12:04,710 --> 00:12:09,270
gives you a lot more assurance than if

324
00:12:06,690 --> 00:12:11,880
you were using existing tools in terms

325
00:12:09,270 --> 00:12:13,350
of implementation just like the

326
00:12:11,880 --> 00:12:14,880
formalization is small and fits into

327
00:12:13,350 --> 00:12:17,610
pages the implementation is equally

328
00:12:14,880 --> 00:12:19,709
small and only required 2,400 lines of a

329
00:12:17,610 --> 00:12:22,200
camel code added to the existing Kremlin

330
00:12:19,709 --> 00:12:24,029
compiler it's not very sophisticated in

331
00:12:22,200 --> 00:12:26,490
the sense that it follows the two pages

332
00:12:24,029 --> 00:12:28,709
of rules from the paper very closely and

333
00:12:26,490 --> 00:12:30,480
it's extremely regular and what this

334
00:12:28,709 --> 00:12:32,670
means is that we now have a high

335
00:12:30,480 --> 00:12:35,459
assurance compilation to chain to

336
00:12:32,670 --> 00:12:37,560
webassembly just as a point of

337
00:12:35,459 --> 00:12:39,630
comparison the reason why we chose to

338
00:12:37,560 --> 00:12:41,130
implement our own tool chain rather than

339
00:12:39,630 --> 00:12:43,410
using the previous route which could

340
00:12:41,130 --> 00:12:45,150
have been compiled a star code to see

341
00:12:43,410 --> 00:12:47,459
like to see how co-star is doing and

342
00:12:45,150 --> 00:12:50,880
then use enough - of compiler to compile

343
00:12:47,459 --> 00:12:54,119
to web assembly is twofold first of all

344
00:12:50,880 --> 00:12:56,100
there's a massive TCB these competitors

345
00:12:54,120 --> 00:12:57,959
typically use LVM and they're enormous

346
00:12:56,100 --> 00:12:59,640
and we don't want to trust all of these

347
00:12:57,959 --> 00:13:02,790
millions lines of code that are present

348
00:12:59,640 --> 00:13:05,310
in LLVM and also there's things that

349
00:13:02,790 --> 00:13:07,170
just don't exist like we have shown in

350
00:13:05,310 --> 00:13:09,209
the paper that if you use c i'm

351
00:13:07,170 --> 00:13:10,620
scripting to compile - as in the GS you

352
00:13:09,209 --> 00:13:12,390
may have some side channel leaks so

353
00:13:10,620 --> 00:13:14,640
really we don't want to trust all of

354
00:13:12,390 --> 00:13:18,120
that and we want to rely on a small

355
00:13:14,640 --> 00:13:22,380
compact editable compiler that goes to

356
00:13:18,120 --> 00:13:24,720
webassembly the verification results are

357
00:13:22,380 --> 00:13:27,180
as follow we show that there's memory

358
00:13:24,720 --> 00:13:27,960
safety our code is not going to throw an

359
00:13:27,180 --> 00:13:29,819
exception the

360
00:13:27,960 --> 00:13:32,250
the wisdom could decided to read outside

361
00:13:29,820 --> 00:13:33,720
of its allocated memory we sure that the

362
00:13:32,250 --> 00:13:34,920
code is doing the right thing that is

363
00:13:33,720 --> 00:13:37,380
that it matches the functional

364
00:13:34,920 --> 00:13:39,660
specifications and we also show an

365
00:13:37,380 --> 00:13:42,540
absence of classic sectional leagues

366
00:13:39,660 --> 00:13:45,300
namely using secrets for branches are

367
00:13:42,540 --> 00:13:48,150
using secrets for memory accesses by a

368
00:13:45,300 --> 00:13:50,640
dedicated check so a way to sum up this

369
00:13:48,150 --> 00:13:52,980
word is that all of the core actions of

370
00:13:50,640 --> 00:13:55,110
the single protocol are now implemented

371
00:13:52,980 --> 00:13:57,510
in a verified manner and what we do next

372
00:13:55,110 --> 00:13:59,040
is that we take the existing lip signal

373
00:13:57,510 --> 00:14:02,189
the one that's available readily on

374
00:13:59,040 --> 00:14:06,719
github and we replace all of the core

375
00:14:02,190 --> 00:14:08,640
actions from the critical with ours this

376
00:14:06,720 --> 00:14:11,970
means that we offer the exact same API

377
00:14:08,640 --> 00:14:13,770
as we normally be available we just

378
00:14:11,970 --> 00:14:16,350
replace the core bits of lip sync note

379
00:14:13,770 --> 00:14:17,280
with ours we pass the exact same test

380
00:14:16,350 --> 00:14:19,500
suite and if you have an application

381
00:14:17,280 --> 00:14:21,480
that uses signal and you want a version

382
00:14:19,500 --> 00:14:24,930
of it that has greater assurance you can

383
00:14:21,480 --> 00:14:26,730
use our code as a drop-in replacement in

384
00:14:24,930 --> 00:14:29,130
terms of performance we have compared

385
00:14:26,730 --> 00:14:31,800
the performance of our implementation of

386
00:14:29,130 --> 00:14:33,570
lip signal and the vanilla or addition

387
00:14:31,800 --> 00:14:35,310
of lip signal and what we see is that

388
00:14:33,570 --> 00:14:37,440
we're actually faster than the original

389
00:14:35,310 --> 00:14:40,140
implementation on several core

390
00:14:37,440 --> 00:14:42,170
operations so the reason for this and

391
00:14:40,140 --> 00:14:45,930
there's a reason is that previously

392
00:14:42,170 --> 00:14:48,780
because curve to 5:09 is not included in

393
00:14:45,930 --> 00:14:50,250
web crypto signal would ship their own

394
00:14:48,780 --> 00:14:52,350
version of curve two five five one nine

395
00:14:50,250 --> 00:14:54,660
compelled to a predecessor of web

396
00:14:52,350 --> 00:14:57,120
assembly called as in the Jas and our

397
00:14:54,660 --> 00:14:59,069
implementation is faster so that just

398
00:14:57,120 --> 00:15:01,470
means that by default these actions of

399
00:14:59,070 --> 00:15:03,600
the protocol also become faster for the

400
00:15:01,470 --> 00:15:06,720
actions of the protocol that involved

401
00:15:03,600 --> 00:15:08,610
primitives such as sha and AES CBC these

402
00:15:06,720 --> 00:15:10,830
are offered natively in web crypto

403
00:15:08,610 --> 00:15:13,080
meaning that they might have vectorized

404
00:15:10,830 --> 00:15:15,030
implementations enabled so it's really

405
00:15:13,080 --> 00:15:18,330
hard to beat them so we're a little bit

406
00:15:15,030 --> 00:15:20,850
slower on these cases if we take a

407
00:15:18,330 --> 00:15:23,220
closer look at performance and look at

408
00:15:20,850 --> 00:15:24,480
individual cryptographic primitives to

409
00:15:23,220 --> 00:15:27,030
see how their performance compares

410
00:15:24,480 --> 00:15:28,740
between the Kremlin compiler and our

411
00:15:27,030 --> 00:15:30,449
tool chain that goes to wizened directly

412
00:15:28,740 --> 00:15:33,030
and the previous tool chain that would

413
00:15:30,450 --> 00:15:35,100
first generate C then web assembly using

414
00:15:33,030 --> 00:15:38,579
one of these standard compilers where

415
00:15:35,100 --> 00:15:41,100
sometimes 30% slower to up to maybe two

416
00:15:38,580 --> 00:15:43,890
or three times slower the

417
00:15:41,100 --> 00:15:45,360
is explainable our completion scheme is

418
00:15:43,890 --> 00:15:48,030
extremely straightforward and extremely

419
00:15:45,360 --> 00:15:49,890
small and we favor auditability over

420
00:15:48,030 --> 00:15:52,470
optimizations so it's natural that we

421
00:15:49,890 --> 00:15:54,030
don't let do the same optimizations as

422
00:15:52,470 --> 00:15:56,220
the millions of lines of code that are

423
00:15:54,030 --> 00:15:57,660
in LVM it also turns out that these

424
00:15:56,220 --> 00:15:59,730
algorithms that are in the lower half

425
00:15:57,660 --> 00:16:02,329
are optimized for targets that have

426
00:15:59,730 --> 00:16:04,710
native support via intrinsics for

427
00:16:02,330 --> 00:16:05,550
128-bit arithmetic and that's not the

428
00:16:04,710 --> 00:16:07,620
case for wisdom

429
00:16:05,550 --> 00:16:09,689
typically a good crypto library would

430
00:16:07,620 --> 00:16:11,550
have several implementations of the same

431
00:16:09,690 --> 00:16:13,140
algorithm depending on the degree of

432
00:16:11,550 --> 00:16:15,449
support for the target platform so for

433
00:16:13,140 --> 00:16:16,949
these we expect the performance to

434
00:16:15,450 --> 00:16:18,810
improve naturally as we replace them

435
00:16:16,950 --> 00:16:21,660
with implementations that are good for

436
00:16:18,810 --> 00:16:22,859
32-bit targets and finally it turns out

437
00:16:21,660 --> 00:16:24,719
that there's also a lot of rewritings

438
00:16:22,860 --> 00:16:26,490
that we can do under source code to not

439
00:16:24,720 --> 00:16:28,860
rely so much on the optimizations that

440
00:16:26,490 --> 00:16:30,720
AC compiler would naturally perform and

441
00:16:28,860 --> 00:16:34,260
we've done that for Chester 20 and we

442
00:16:30,720 --> 00:16:37,230
only have a 30% overhead so in

443
00:16:34,260 --> 00:16:38,610
conclusion I would say that we have a

444
00:16:37,230 --> 00:16:40,920
tool chain and that is generally

445
00:16:38,610 --> 00:16:42,600
applicable anytime you want to target a

446
00:16:40,920 --> 00:16:45,209
web context and have strong guarantees

447
00:16:42,600 --> 00:16:48,210
for your implementation desktop server

448
00:16:45,210 --> 00:16:49,830
or browser in particular this means that

449
00:16:48,210 --> 00:16:51,330
for crypto libraries you can take our

450
00:16:49,830 --> 00:16:53,760
version of high cost are compelled to

451
00:16:51,330 --> 00:16:54,960
webassembly and use it if you have new

452
00:16:53,760 --> 00:16:56,970
algorithms that are not readily

453
00:16:54,960 --> 00:17:00,570
available or if you have custom schemes

454
00:16:56,970 --> 00:17:02,040
and finally we demonstrated with a novel

455
00:17:00,570 --> 00:17:04,170
implementation of signal that you can

456
00:17:02,040 --> 00:17:05,819
write more than existing code and that

457
00:17:04,170 --> 00:17:08,220
you can write protocols and have

458
00:17:05,819 --> 00:17:10,139
protocols verified all the way to arrest

459
00:17:08,220 --> 00:17:11,579
somebody we just put up the website so

460
00:17:10,140 --> 00:17:15,740
if you want to take a look our code is

461
00:17:11,579 --> 00:17:15,740
online as well as on github thank you

462
00:17:16,339 --> 00:17:25,740
thank you very much

463
00:17:19,400 --> 00:17:27,900
and we have a question from Peter spice

464
00:17:25,740 --> 00:17:30,600
all right this is one of the most

465
00:17:27,900 --> 00:17:34,289
gorgeous applications of formal methods

466
00:17:30,600 --> 00:17:34,949
and automated tools that I have ever

467
00:17:34,289 --> 00:17:38,658
seen

468
00:17:34,950 --> 00:17:42,030
I am delighted thank you I'm blushing

469
00:17:38,659 --> 00:17:43,500
but it's all available online so we'll

470
00:17:42,030 --> 00:18:01,649
have to pick it up and see what we can

471
00:17:43,500 --> 00:18:03,659
do with it great great questions hi I'm

472
00:18:01,650 --> 00:18:05,250
Andres from MIT could you say more about

473
00:18:03,659 --> 00:18:08,490
the driving side channel issues you

474
00:18:05,250 --> 00:18:10,409
found in M scripting yes we have looked

475
00:18:08,490 --> 00:18:13,620
at the curve to 509 lat

476
00:18:10,409 --> 00:18:16,890
included in signal that was compelled to

477
00:18:13,620 --> 00:18:18,928
Azzam that Jas and we found that because

478
00:18:16,890 --> 00:18:21,659
when you compile 2002 J s its JavaScript

479
00:18:18,929 --> 00:18:25,049
and it's really a 32 bit target because

480
00:18:21,659 --> 00:18:27,179
it's using I Triple E 754 as its number

481
00:18:25,049 --> 00:18:29,850
type you cannot encode 64-bit integers

482
00:18:27,179 --> 00:18:31,919
in floating in floats right so it's a 32

483
00:18:29,850 --> 00:18:33,719
bit target and that means that when you

484
00:18:31,919 --> 00:18:35,909
have 64 bit operations you need to

485
00:18:33,720 --> 00:18:38,640
emulate them using a pair of 32-bit

486
00:18:35,909 --> 00:18:40,919
integers and in one of the M bits of

487
00:18:38,640 --> 00:18:42,809
emulation the compilation scheme of

488
00:18:40,919 --> 00:18:45,360
Emscripten had added some shifts that

489
00:18:42,809 --> 00:18:47,460
were clearly not constant time and so we

490
00:18:45,360 --> 00:18:50,370
like looked at the generated code and

491
00:18:47,460 --> 00:18:53,460
found that in this emulated 64-bit

492
00:18:50,370 --> 00:18:57,689
multiplication on 32-bit integers there

493
00:18:53,460 --> 00:18:59,330
was a side channel leak thank you Thanks

494
00:18:57,690 --> 00:19:01,980
thank you very much any more questions

495
00:18:59,330 --> 00:19:02,730
and that's thanks to speaker again thank

496
00:19:01,980 --> 00:19:05,910
you very much

497
00:19:02,730 --> 00:19:05,910
[Applause]

