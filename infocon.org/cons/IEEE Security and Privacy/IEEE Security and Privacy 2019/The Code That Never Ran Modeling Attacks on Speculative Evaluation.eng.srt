1
00:00:09,410 --> 00:00:14,510
all right thank you very much and so I'm

2
00:00:12,590 --> 00:00:19,840
gonna be talking to you

3
00:00:14,510 --> 00:00:22,730
made a model for speculative evaluation

4
00:00:19,840 --> 00:00:25,520
so I don't know how you're a third of

5
00:00:22,730 --> 00:00:28,520
January was last year mine was quite

6
00:00:25,520 --> 00:00:30,200
nice and went into London went to the

7
00:00:28,520 --> 00:00:31,759
tape water and met up with my brother

8
00:00:30,200 --> 00:00:34,850
and his kids they have this fabulous

9
00:00:31,760 --> 00:00:38,690
exhibit in the turbine hole of a bunch

10
00:00:34,850 --> 00:00:40,400
of swings and I was on the train back

11
00:00:38,690 --> 00:00:46,000
you know doing what you normally do

12
00:00:40,400 --> 00:00:49,430
checking Twitter on my phone and Twitter

13
00:00:46,000 --> 00:00:53,960
respect all happened right and this is

14
00:00:49,430 --> 00:00:58,640
my hot take on Spectre on the day was

15
00:00:53,960 --> 00:01:03,140
first of all over ng this is really

16
00:00:58,640 --> 00:01:04,909
serious and and secondly normally

17
00:01:03,140 --> 00:01:06,740
there's a kind of smug feeling of

18
00:01:04,909 --> 00:01:08,210
satisfaction from somebody works and

19
00:01:06,740 --> 00:01:09,770
they could have formal methods a bit of

20
00:01:08,210 --> 00:01:13,070
the world and he took one of these

21
00:01:09,770 --> 00:01:15,289
things happens of ah if only you'd use

22
00:01:13,070 --> 00:01:17,179
and now you insert some horrible

23
00:01:15,290 --> 00:01:19,970
combination of lace separation or to

24
00:01:17,180 --> 00:01:21,800
control object and you would have solved

25
00:01:19,970 --> 00:01:23,870
this problem and that that wasn't my

26
00:01:21,800 --> 00:01:26,929
reaction in this case my reaction was I

27
00:01:23,870 --> 00:01:29,150
don't know even how to talk about this I

28
00:01:26,930 --> 00:01:30,200
don't know how to model this attack

29
00:01:29,150 --> 00:01:33,260
never mind

30
00:01:30,200 --> 00:01:37,190
you know proposed mitigations against

31
00:01:33,260 --> 00:01:40,310
Ted and and and so the the could have

32
00:01:37,190 --> 00:01:42,470
reason for the OMG power of this is the

33
00:01:40,310 --> 00:01:44,600
the inspector is essentially a mechanism

34
00:01:42,470 --> 00:01:47,960
of a bypassing any dynamic security

35
00:01:44,600 --> 00:01:51,020
check and in particular you can bypass

36
00:01:47,960 --> 00:01:54,649
the dynamic security check of array

37
00:01:51,020 --> 00:01:57,050
indexing and that means that you've you

38
00:01:54,650 --> 00:02:00,620
can index arbitrary points into an array

39
00:01:57,050 --> 00:02:03,770
way off the end of it and and revé any

40
00:02:00,620 --> 00:02:08,720
address in memory in the current dress

41
00:02:03,770 --> 00:02:11,000
space and you know you will you might

42
00:02:08,720 --> 00:02:12,890
note that it says the browser vendors

43
00:02:11,000 --> 00:02:15,349
who are like throwing their hands up

44
00:02:12,890 --> 00:02:18,018
about this that's because we're in the

45
00:02:15,349 --> 00:02:20,569
business of sandbox execution of

46
00:02:18,019 --> 00:02:22,670
untrusted code that is one of the main

47
00:02:20,569 --> 00:02:24,798
things that bozo is providing for you

48
00:02:22,670 --> 00:02:26,640
and so the fact that you can exploit

49
00:02:24,799 --> 00:02:31,110
this from inside JavaScript

50
00:02:26,640 --> 00:02:34,260
is really quite worrying and and the the

51
00:02:31,110 --> 00:02:36,740
feature that they're exploiting there is

52
00:02:34,260 --> 00:02:39,390
speculative valuation so this is a

53
00:02:36,740 --> 00:02:41,640
hardware optimization that's meant to be

54
00:02:39,390 --> 00:02:44,339
just down at the microarchitecture level

55
00:02:41,640 --> 00:02:45,350
and not visible at the architectural

56
00:02:44,340 --> 00:02:48,150
level

57
00:02:45,350 --> 00:02:50,060
all right so for these kind of

58
00:02:48,150 --> 00:02:54,300
optimizations well here's a simple

59
00:02:50,060 --> 00:02:56,400
optimizer I shown and so a a lie that we

60
00:02:54,300 --> 00:02:58,590
tell to kindergartners when they're

61
00:02:56,400 --> 00:03:00,510
learning to program is the computers

62
00:02:58,590 --> 00:03:02,430
execute instructions one after the other

63
00:03:00,510 --> 00:03:04,620
so we give you a program like this that

64
00:03:02,430 --> 00:03:06,840
increments X and then sets Y to be one

65
00:03:04,620 --> 00:03:08,940
and right okay this is the execution

66
00:03:06,840 --> 00:03:11,489
that it has and that's that the model

67
00:03:08,940 --> 00:03:12,810
that we give to people up until some

68
00:03:11,489 --> 00:03:15,300
time at the end of their undergraduate

69
00:03:12,810 --> 00:03:18,120
education in computer science and and

70
00:03:15,300 --> 00:03:19,709
where you get three actions here one of

71
00:03:18,120 --> 00:03:22,860
which is you read X and you might get

72
00:03:19,709 --> 00:03:25,500
one and then you write x v2 and then you

73
00:03:22,860 --> 00:03:28,860
write way to be one and but that's not

74
00:03:25,500 --> 00:03:30,780
what's actually executed by hardware so

75
00:03:28,860 --> 00:03:34,110
hardware is perfectly capable of

76
00:03:30,780 --> 00:03:37,530
spotting that writes Y of Y - one

77
00:03:34,110 --> 00:03:39,299
doesn't depend on the value of x and so

78
00:03:37,530 --> 00:03:41,840
it's perfectly capable of executing it

79
00:03:39,299 --> 00:03:45,540
first so there's there's no dependency

80
00:03:41,840 --> 00:03:47,280
between any of the actions on X and the

81
00:03:45,540 --> 00:03:51,239
action on wise they can get reordered

82
00:03:47,280 --> 00:03:53,700
and and that would that's fine if you

83
00:03:51,239 --> 00:03:55,829
couldn't spot that and lack of

84
00:03:53,700 --> 00:03:59,160
dependency and for single-threaded

85
00:03:55,829 --> 00:04:01,200
programs you can't and so for quite a

86
00:03:59,160 --> 00:04:03,359
while you know every model of

87
00:04:01,200 --> 00:04:06,179
programming languages was based on

88
00:04:03,360 --> 00:04:08,040
sequential consistency and but

89
00:04:06,180 --> 00:04:09,840
unfortunately the instant you get shared

90
00:04:08,040 --> 00:04:12,209
memory concurrency in this goes out the

91
00:04:09,840 --> 00:04:14,519
window and and that's resulted in

92
00:04:12,209 --> 00:04:16,430
there's an entire cottage industry this

93
00:04:14,519 --> 00:04:19,350
you know the century of people

94
00:04:16,430 --> 00:04:21,780
developing and weak memory models so

95
00:04:19,350 --> 00:04:25,890
kicking off with a Java memory model and

96
00:04:21,779 --> 00:04:29,039
from a puritjarra in about 2005 and and

97
00:04:25,890 --> 00:04:31,830
like c11 has got a very similar style of

98
00:04:29,039 --> 00:04:35,340
model okay so that's what's happened

99
00:04:31,830 --> 00:04:36,469
with instruction reordering and right

100
00:04:35,340 --> 00:04:38,310
well what's happened with respect

101
00:04:36,470 --> 00:04:40,619
evaluation well it's kind of a similar

102
00:04:38,310 --> 00:04:43,649
story of like well we've got this

103
00:04:40,619 --> 00:04:45,059
lie that we tell people that you you've

104
00:04:43,649 --> 00:04:46,679
got in this statement there and one of

105
00:04:45,059 --> 00:04:50,759
the two branches is going to get

106
00:04:46,679 --> 00:04:52,919
executed ha ha ha right well first of

107
00:04:50,759 --> 00:04:54,449
all that's you know we've already seen

108
00:04:52,919 --> 00:04:56,878
that there's an untruth there because

109
00:04:54,449 --> 00:04:57,599
that right of Zed does not depend on the

110
00:04:56,879 --> 00:05:00,659
right way

111
00:04:57,599 --> 00:05:04,099
so there's a lack of dependency but also

112
00:05:00,659 --> 00:05:09,449
there is actually an execution in which

113
00:05:04,099 --> 00:05:11,938
the ROI of to might happen and then the

114
00:05:09,449 --> 00:05:15,269
hardware rolls back it goes oh oops

115
00:05:11,939 --> 00:05:18,269
sorry about that and let's we didn't

116
00:05:15,269 --> 00:05:21,089
actually do that that right of Tyrion

117
00:05:18,269 --> 00:05:23,489
instead we did the right of one and and

118
00:05:21,089 --> 00:05:25,579
more absolute that's the optimization

119
00:05:23,489 --> 00:05:29,849
which current Hardware currently does

120
00:05:25,579 --> 00:05:32,549
but compilers get in the way even more

121
00:05:29,849 --> 00:05:34,498
so compilers so most hardware will not

122
00:05:32,549 --> 00:05:37,078
do this but your average compiler will

123
00:05:34,499 --> 00:05:38,579
and will spot the fact that Roy is said

124
00:05:37,079 --> 00:05:40,769
to one it's happening on both branches

125
00:05:38,579 --> 00:05:42,839
and so I'll move it outside this

126
00:05:40,769 --> 00:05:45,869
statement and at that point it's now

127
00:05:42,839 --> 00:05:49,739
floating and and and there's no control

128
00:05:45,869 --> 00:05:51,079
dependency from reading x2 1 and 2

129
00:05:49,739 --> 00:05:53,188
writing Zed

130
00:05:51,079 --> 00:05:57,059
all right ok so we've got a similar

131
00:05:53,189 --> 00:05:58,739
situation of you know we've had we've

132
00:05:57,059 --> 00:06:01,679
got an abstraction that abstraction has

133
00:05:58,739 --> 00:06:05,969
leaked so you know in practice we know

134
00:06:01,679 --> 00:06:09,058
that a user code can observe this

135
00:06:05,969 --> 00:06:13,769
behavior alright so what we're going to

136
00:06:09,059 --> 00:06:16,829
do about it so one possibility is to

137
00:06:13,769 --> 00:06:18,589
look to see what kind of language model

138
00:06:16,829 --> 00:06:22,049
you could provide that's a high level

139
00:06:18,589 --> 00:06:24,689
model and abstracts away from as much

140
00:06:22,049 --> 00:06:26,729
and like draw architectural detail as we

141
00:06:24,689 --> 00:06:30,749
can but still actually more all

142
00:06:26,729 --> 00:06:32,459
speculative evaluation and so one of the

143
00:06:30,749 --> 00:06:34,459
reasons for doing that is Spector so

144
00:06:32,459 --> 00:06:37,259
we'd like to at least be able to capture

145
00:06:34,459 --> 00:06:39,239
Spector and spectral like a tie so a

146
00:06:37,259 --> 00:06:41,609
very simplified version of what Spector

147
00:06:39,239 --> 00:06:43,469
does if you imagine you get a secret and

148
00:06:41,609 --> 00:06:45,599
you get a runtime security check and

149
00:06:43,469 --> 00:06:48,029
that's going to determine with your ID

150
00:06:45,599 --> 00:06:50,429
access to that secret and for the

151
00:06:48,029 --> 00:06:53,969
attacker that security check will always

152
00:06:50,429 --> 00:06:56,638
fail so it's always going to go down the

153
00:06:53,969 --> 00:06:59,699
else punch and and therefore you would

154
00:06:56,639 --> 00:07:04,229
think not get to read the secret and and

155
00:06:59,699 --> 00:07:08,669
so it would be safe right okay so here's

156
00:07:04,229 --> 00:07:11,128
an example execution and a you look to

157
00:07:08,669 --> 00:07:12,889
see if Y is true you know if you can

158
00:07:11,129 --> 00:07:15,059
read the secret then you said and

159
00:07:12,889 --> 00:07:17,969
actually be the secret otherwise you say

160
00:07:15,059 --> 00:07:23,459
to blah blah blah right okay so in that

161
00:07:17,969 --> 00:07:26,279
in that execution the the read of the

162
00:07:23,459 --> 00:07:29,219
secret might get executed and then

163
00:07:26,279 --> 00:07:31,879
rolled back but it won't happen in in

164
00:07:29,219 --> 00:07:34,110
the regular non speculative execution

165
00:07:31,879 --> 00:07:36,989
but the attacker would still like to

166
00:07:34,110 --> 00:07:38,549
know whether the secret zero or one so

167
00:07:36,989 --> 00:07:40,919
if they could leave one bit they can

168
00:07:38,549 --> 00:07:45,179
probably iterate and leak over to number

169
00:07:40,919 --> 00:07:48,659
of bit right so and so here is your

170
00:07:45,179 --> 00:07:51,149
Specter attack and so you you look to

171
00:07:48,659 --> 00:07:55,199
see if you can read the secret and if so

172
00:07:51,149 --> 00:07:56,669
you use it as a an array offset and now

173
00:07:55,199 --> 00:07:59,099
you look to see whether you've touched

174
00:07:56,669 --> 00:08:00,659
that a bit of memory and if you've

175
00:07:59,099 --> 00:08:02,308
touched that bit of memory you say X

176
00:08:00,659 --> 00:08:04,529
based on which bitter memories been

177
00:08:02,309 --> 00:08:07,949
touched right okay and so now that's got

178
00:08:04,529 --> 00:08:10,499
the execution the allows information to

179
00:08:07,949 --> 00:08:13,050
flow from the speculative world into the

180
00:08:10,499 --> 00:08:15,389
non-speculative world so there's an

181
00:08:13,050 --> 00:08:17,969
information for attack there if you can

182
00:08:15,389 --> 00:08:21,029
introduce an implementation of the the

183
00:08:17,969 --> 00:08:22,979
magic there and oh dear that's that's

184
00:08:21,029 --> 00:08:24,899
what's speculate and so now the the

185
00:08:22,979 --> 00:08:28,589
advantage of having the high level model

186
00:08:24,899 --> 00:08:30,929
is that we can we can reason about the

187
00:08:28,589 --> 00:08:33,208
ability to detect whether an area of

188
00:08:30,929 --> 00:08:35,068
memories been touched without having to

189
00:08:33,208 --> 00:08:37,348
reason about a low-level

190
00:08:35,068 --> 00:08:42,240
timing and cache behavior over actually

191
00:08:37,349 --> 00:08:45,240
causes that to be implementable right so

192
00:08:42,240 --> 00:08:46,800
and those pray pictures I've just shown

193
00:08:45,240 --> 00:08:48,629
you those are actually formalized ball

194
00:08:46,800 --> 00:08:49,859
so there is a formal model that's

195
00:08:48,629 --> 00:08:52,559
sitting behind that that's based on

196
00:08:49,860 --> 00:08:54,089
partial orange multi sites and using

197
00:08:52,559 --> 00:08:54,779
that we can build a compositional

198
00:08:54,089 --> 00:08:55,980
semantics

199
00:08:54,779 --> 00:08:57,779
so if you're familiar with the way that

200
00:08:55,980 --> 00:08:59,279
C 11 semantics looks like then there's

201
00:08:57,779 --> 00:09:01,769
not that much of a surprise there and

202
00:08:59,279 --> 00:09:04,439
we've got examples of how you can use

203
00:09:01,769 --> 00:09:05,670
that model Specter and spectra

204
00:09:04,439 --> 00:09:09,569
mitigations

205
00:09:05,670 --> 00:09:11,130
and attacks on transactional memory well

206
00:09:09,570 --> 00:09:14,130
one thing that was funny about this is

207
00:09:11,130 --> 00:09:17,810
that during this work we realized that

208
00:09:14,130 --> 00:09:20,370
in fact the models got some odds

209
00:09:17,810 --> 00:09:22,949
information flow properties that are

210
00:09:20,370 --> 00:09:25,620
just about the compiler optimizations

211
00:09:22,950 --> 00:09:28,110
not the Hardware optimizations and so

212
00:09:25,620 --> 00:09:29,970
they if you look at that program there

213
00:09:28,110 --> 00:09:31,980
we've got multi-threaded programmers got

214
00:09:29,970 --> 00:09:35,220
two threads one of which is forwarding

215
00:09:31,980 --> 00:09:37,200
and x2i and the other one of which is

216
00:09:35,220 --> 00:09:39,570
looking to see if while I was nonzero

217
00:09:37,200 --> 00:09:41,190
and and if it is setting X to be 1 and

218
00:09:39,570 --> 00:09:43,980
otherwise it looks it does the kind of

219
00:09:41,190 --> 00:09:46,950
slow spectra kind of stuff all right ok

220
00:09:43,980 --> 00:09:50,070
so you would think there is no way that

221
00:09:46,950 --> 00:09:52,620
right - said - one can happen it's like

222
00:09:50,070 --> 00:09:56,610
well how did you end up down that branch

223
00:09:52,620 --> 00:09:59,490
right well the problem is the if the

224
00:09:56,610 --> 00:10:02,700
secret is one then the compiler can spot

225
00:09:59,490 --> 00:10:05,040
all three branches are assigning X to be

226
00:10:02,700 --> 00:10:07,230
one and can float it out of the if

227
00:10:05,040 --> 00:10:10,380
statement and so now that the dependency

228
00:10:07,230 --> 00:10:11,790
from Y to X isn't there anymore and that

229
00:10:10,380 --> 00:10:14,790
means you can actually get that first

230
00:10:11,790 --> 00:10:16,439
execution whereas if you try doing it

231
00:10:14,790 --> 00:10:18,390
for anything other than the secret being

232
00:10:16,440 --> 00:10:20,370
one right there's now a dependency

233
00:10:18,390 --> 00:10:22,050
between the read of of Y and the right

234
00:10:20,370 --> 00:10:23,640
of X and that means you end up with a

235
00:10:22,050 --> 00:10:26,250
cycle in the model and those kind of

236
00:10:23,640 --> 00:10:28,500
cycles aren't allowed and so that

237
00:10:26,250 --> 00:10:30,720
execution can't happen and that means

238
00:10:28,500 --> 00:10:34,710
you've got an information flow sitting

239
00:10:30,720 --> 00:10:37,110
there all right well ok say you know

240
00:10:34,710 --> 00:10:39,600
that's the theory and but that might

241
00:10:37,110 --> 00:10:41,550
just be an artifact of the model so you

242
00:10:39,600 --> 00:10:43,980
know who cares whether you can attack my

243
00:10:41,550 --> 00:10:46,199
model or not right what we care about is

244
00:10:43,980 --> 00:10:48,120
can you actually attacked your compiler

245
00:10:46,200 --> 00:10:52,460
so at this point I'm going to introduce

246
00:10:48,120 --> 00:10:55,950
Craig and who will talk about that right

247
00:10:52,460 --> 00:10:57,510
yeah okay so as Alan said the main

248
00:10:55,950 --> 00:10:59,160
question we're trying to answer now is

249
00:10:57,510 --> 00:11:01,170
you know our model captures all these

250
00:10:59,160 --> 00:11:03,900
attacks including Specter prime and

251
00:11:01,170 --> 00:11:06,060
abort other existing attacks but and

252
00:11:03,900 --> 00:11:07,500
these other these existing attacks you

253
00:11:06,060 --> 00:11:09,060
know they exist in the real world we can

254
00:11:07,500 --> 00:11:10,980
implement them can we do the same for

255
00:11:09,060 --> 00:11:13,469
these attacks on compiler optimizations

256
00:11:10,980 --> 00:11:15,270
and in our paper we definitively answer

257
00:11:13,470 --> 00:11:17,700
this question as yes we can implement

258
00:11:15,270 --> 00:11:19,120
these compiler attacks in the real world

259
00:11:17,700 --> 00:11:22,420
on real

260
00:11:19,120 --> 00:11:24,790
like lying in GCC with an important

261
00:11:22,420 --> 00:11:26,140
caveat that we need we have an

262
00:11:24,790 --> 00:11:28,719
unrealistic attacker model right so

263
00:11:26,140 --> 00:11:30,939
we're able to attack clang in GCC but

264
00:11:28,720 --> 00:11:33,070
only when the secret is a compile time

265
00:11:30,940 --> 00:11:35,800
constant because that way the compiler

266
00:11:33,070 --> 00:11:37,660
can reason about the value of the secret

267
00:11:35,800 --> 00:11:39,670
and perform optimizations based on it

268
00:11:37,660 --> 00:11:42,040
but at the same time we need the

269
00:11:39,670 --> 00:11:44,170
permission check to be dynamic so that

270
00:11:42,040 --> 00:11:46,660
the compiler can't optimize a way code

271
00:11:44,170 --> 00:11:48,279
that would fail the permission check so

272
00:11:46,660 --> 00:11:49,900
obviously this is not a realistic

273
00:11:48,279 --> 00:11:51,850
attacker model that anyone's going to be

274
00:11:49,900 --> 00:11:54,310
worried about or issuing a you know

275
00:11:51,850 --> 00:11:55,839
security update for but nonetheless we

276
00:11:54,310 --> 00:11:57,520
feel that this is an interesting attack

277
00:11:55,839 --> 00:11:59,650
at least from an academic perspective

278
00:11:57,520 --> 00:12:04,240
because no one's really done attacks on

279
00:11:59,650 --> 00:12:05,740
compiler optimizations before so to put

280
00:12:04,240 --> 00:12:07,750
this a little more concretely this

281
00:12:05,740 --> 00:12:09,310
program at the top here looks a lot like

282
00:12:07,750 --> 00:12:12,670
the program that Alan showed you earlier

283
00:12:09,310 --> 00:12:15,849
and we see that the code generated by

284
00:12:12,670 --> 00:12:17,800
GCC whether based on when secret is or

285
00:12:15,850 --> 00:12:19,839
is not one is very different so on the

286
00:12:17,800 --> 00:12:22,029
Left we have the code generated when the

287
00:12:19,839 --> 00:12:23,650
secret is not one and on the right we

288
00:12:22,029 --> 00:12:27,850
have the code generated when the secret

289
00:12:23,650 --> 00:12:30,430
is one and in particular on the left we

290
00:12:27,850 --> 00:12:34,060
see that GCC emits the right X before

291
00:12:30,430 --> 00:12:35,829
the read Y whereas on the right there's

292
00:12:34,060 --> 00:12:38,349
no conditional because there doesn't

293
00:12:35,830 --> 00:12:40,870
need to be a conditional and then GCC

294
00:12:38,350 --> 00:12:43,600
omits the read of Y before the right of

295
00:12:40,870 --> 00:12:45,100
X and normally you wouldn't be able to

296
00:12:43,600 --> 00:12:46,240
observe this but in order to observe

297
00:12:45,100 --> 00:12:48,820
this we're basically going to add

298
00:12:46,240 --> 00:12:50,620
another thread which just does X equals

299
00:12:48,820 --> 00:12:52,900
y in a loop and that will allow the

300
00:12:50,620 --> 00:12:56,320
attacker to be able to spot this load

301
00:12:52,900 --> 00:12:57,850
store reordering so to make this attack

302
00:12:56,320 --> 00:12:59,800
a little bit more practical we add a

303
00:12:57,850 --> 00:13:01,390
small delay between the right X and the

304
00:12:59,800 --> 00:13:03,310
read Y which increases the probability

305
00:13:01,390 --> 00:13:06,339
that the other thread gets a chance to

306
00:13:03,310 --> 00:13:08,439
jump in and do y equals x we found that

307
00:13:06,339 --> 00:13:11,680
we can insert up to 30 straight line

308
00:13:08,440 --> 00:13:13,810
instructions into in between the right X

309
00:13:11,680 --> 00:13:16,449
and read Y and GCC will still do the

310
00:13:13,810 --> 00:13:18,189
load/store reordering that we need then

311
00:13:16,450 --> 00:13:20,260
we can repeat this attack to leak

312
00:13:18,190 --> 00:13:22,120
multiple bits of the secret and also to

313
00:13:20,260 --> 00:13:24,450
perform error correction and as a result

314
00:13:22,120 --> 00:13:27,850
we can achieve a bitwise accuracy of

315
00:13:24,450 --> 00:13:32,020
99.99% at 300k bits per second for this

316
00:13:27,850 --> 00:13:33,010
fictitious attack we also implemented a

317
00:13:32,020 --> 00:13:34,600
similar attack

318
00:13:33,010 --> 00:13:38,050
ded story elimination which works

319
00:13:34,600 --> 00:13:39,870
against both clang and GCC and for that

320
00:13:38,050 --> 00:13:45,280
attack we achieve a bitwise accuracy of

321
00:13:39,870 --> 00:13:46,960
99.99% at 1.2 megabits per second so in

322
00:13:45,280 --> 00:13:48,610
conclusion in this paper we presented a

323
00:13:46,960 --> 00:13:51,030
compositional model of program execution

324
00:13:48,610 --> 00:13:53,830
that is sufficient to capture both

325
00:13:51,030 --> 00:13:55,839
existing attacks like Spectre and Prime

326
00:13:53,830 --> 00:13:58,210
and abort as well as new attacks on

327
00:13:55,840 --> 00:13:59,650
optimizing compilers we have obtained

328
00:13:58,210 --> 00:14:01,630
experimental evidence that these new

329
00:13:59,650 --> 00:14:04,110
attacks can be carried out but only

330
00:14:01,630 --> 00:14:06,760
against compile time secrets which is a

331
00:14:04,110 --> 00:14:09,760
not a realistic attacker model as a

332
00:14:06,760 --> 00:14:11,530
final side note we we were interested in

333
00:14:09,760 --> 00:14:13,780
whether these new compiler attacks can

334
00:14:11,530 --> 00:14:16,510
be applied against JIT compilers because

335
00:14:13,780 --> 00:14:18,370
JIT compilers have access to potentially

336
00:14:16,510 --> 00:14:21,640
much more interesting secrets at compile

337
00:14:18,370 --> 00:14:24,370
time thankfully depending on your

338
00:14:21,640 --> 00:14:26,650
perspective we were not able to do this

339
00:14:24,370 --> 00:14:28,240
because today's JIT compilers simply

340
00:14:26,650 --> 00:14:30,130
aren't aggressive enough with their

341
00:14:28,240 --> 00:14:33,310
optimizations to enable us to conduct

342
00:14:30,130 --> 00:14:34,720
this attack but maybe in the future if

343
00:14:33,310 --> 00:14:37,119
JIT compilers get more aggressive we'll

344
00:14:34,720 --> 00:14:38,860
have to start worrying about this in

345
00:14:37,120 --> 00:14:40,450
conclusion all of our code is open

346
00:14:38,860 --> 00:14:42,790
source and available at this URL and

347
00:14:40,450 --> 00:14:45,150
we're happy to take any questions thank

348
00:14:42,790 --> 00:14:45,150
you very much

349
00:14:49,019 --> 00:14:55,930
anyone with questions please step

350
00:14:51,250 --> 00:14:57,490
forward to the mic Jonathan Lee

351
00:14:55,930 --> 00:15:01,089
Microsoft Research

352
00:14:57,490 --> 00:15:02,829
um love you talk one question I have so

353
00:15:01,089 --> 00:15:04,959
it sounds like a lot of your modeling is

354
00:15:02,829 --> 00:15:06,040
assuming that the disclosure gadget you

355
00:15:04,959 --> 00:15:09,010
have introduced from speculative

356
00:15:06,040 --> 00:15:17,980
execution is based on accessing memory

357
00:15:09,010 --> 00:15:20,890
somewhere so it sounds from your model

358
00:15:17,980 --> 00:15:23,140
like the disclosure gadget that you're

359
00:15:20,890 --> 00:15:25,410
using for your speculative execution is

360
00:15:23,140 --> 00:15:27,189
fundamentally linked to memory accesses

361
00:15:25,410 --> 00:15:28,420
and there are a number of papers

362
00:15:27,190 --> 00:15:29,589
published at this point that show that

363
00:15:28,420 --> 00:15:31,180
there are other ways of getting

364
00:15:29,589 --> 00:15:32,980
information out of speculative execution

365
00:15:31,180 --> 00:15:35,589
for example you can look at the

366
00:15:32,980 --> 00:15:37,269
execution units that are used or you can

367
00:15:35,589 --> 00:15:39,370
touch other like internal structures in

368
00:15:37,269 --> 00:15:41,079
the CPU I wonder if you have any

369
00:15:39,370 --> 00:15:42,550
thoughts about what you could generalize

370
00:15:41,079 --> 00:15:46,540
the work you've done here to capture

371
00:15:42,550 --> 00:15:48,339
that yeah so so the examples I've given

372
00:15:46,540 --> 00:15:52,630
here are entirely about the shared

373
00:15:48,339 --> 00:15:55,300
memory concurrency what we've kept the

374
00:15:52,630 --> 00:15:58,959
approach we've tended to take for other

375
00:15:55,300 --> 00:16:02,500
forms of communication so for example

376
00:15:58,959 --> 00:16:05,469
for transactions and is to introduce new

377
00:16:02,500 --> 00:16:07,180
forms of events so the events I've given

378
00:16:05,470 --> 00:16:09,430
here adjust the read and write events on

379
00:16:07,180 --> 00:16:13,989
memory whereas for transactions you also

380
00:16:09,430 --> 00:16:16,390
get and commit and beget sort of begin

381
00:16:13,990 --> 00:16:20,860
transaction commit transaction events

382
00:16:16,390 --> 00:16:22,750
and and that style so so far the

383
00:16:20,860 --> 00:16:25,449
examples we've tried it on we've always

384
00:16:22,750 --> 00:16:27,370
managed to click invent a few new events

385
00:16:25,449 --> 00:16:29,199
and come up with what the invariant is

386
00:16:27,370 --> 00:16:31,810
that those events have to satisfy and

387
00:16:29,199 --> 00:16:36,040
and and use that as a way of abstractly

388
00:16:31,810 --> 00:16:40,119
modeling the kind of style of attacks

389
00:16:36,040 --> 00:16:43,060
and so like we've done transactions we

390
00:16:40,120 --> 00:16:49,899
come to I did riddle on a blackboard and

391
00:16:43,060 --> 00:16:53,140
so really other ones oh yeah we did we

392
00:16:49,899 --> 00:16:54,640
did fencing as well and it is and and

393
00:16:53,140 --> 00:16:56,800
and the stuff about mitigation is

394
00:16:54,640 --> 00:16:59,319
requires requires fencing so so I

395
00:16:56,800 --> 00:17:01,500
believe it's a slightly unsatisfactory

396
00:16:59,319 --> 00:17:04,389
answer because it's like you know

397
00:17:01,500 --> 00:17:07,710
though it required us to do custom stuff

398
00:17:04,390 --> 00:17:10,150
each time and we do so we'd have a

399
00:17:07,710 --> 00:17:13,060
formalization of how to do that custom

400
00:17:10,150 --> 00:17:14,530
stuff we've just like observed that in

401
00:17:13,060 --> 00:17:20,550
practice we've been able to do it each

402
00:17:14,530 --> 00:17:20,550
time so much thank you very much again

403
00:17:21,020 --> 00:17:25,848
[Applause]

